WEBVTT
1
00:00:01.113 --> 00:00:02.880
And this video, we'll discuss code coverage

2
00:00:02.880 --> 00:00:04.563
and test reports with Maven.

3
00:00:08.880 --> 00:00:10.810
Now, if you're not using intelliJ, don't worry.

4
00:00:10.810 --> 00:00:13.340
So in this video, I'll show you how to do the same thing

5
00:00:13.340 --> 00:00:15.050
using Maven commands.

6
00:00:15.050 --> 00:00:16.620
No IDEs required.

7
00:00:16.620 --> 00:00:18.930
We can run Maven from the command line.

8
00:00:18.930 --> 00:00:20.790
And this is very useful when running as part

9
00:00:20.790 --> 00:00:22.700
of a DevOps build process,

10
00:00:22.700 --> 00:00:24.140
using like continuous integration,

11
00:00:24.140 --> 00:00:27.283
continuous deployment, CI/CD environments.

12
00:00:31.240 --> 00:00:32.920
Now, as far as system requirements,

13
00:00:32.920 --> 00:00:33.980
to complete these steps,

14
00:00:33.980 --> 00:00:36.770
you must have Maven locally installed in your computer,

15
00:00:36.770 --> 00:00:38.560
not with just the IDE.

16
00:00:38.560 --> 00:00:41.820
You need to be able to run Maven from the command line.

17
00:00:41.820 --> 00:00:43.620
If you don't have Maven installed,

18
00:00:43.620 --> 00:00:45.530
follow the steps that I have here at the link,

19
00:00:45.530 --> 00:00:47.930
maven.apache.org.

20
00:00:47.930 --> 00:00:50.580
And then once installed, verify your Maven installation.

21
00:00:50.580 --> 00:00:53.380
So open a terminal window or a command prompt window,

22
00:00:53.380 --> 00:00:55.300
and then type, mvn -version.

23
00:00:55.300 --> 00:00:56.820
And then, you should get information back,

24
00:00:56.820 --> 00:00:58.920
as far as which version that you're using.

25
00:00:59.970 --> 00:01:01.500
You see the version I have listed on the screen,

26
00:01:01.500 --> 00:01:03.390
you don't have to use this exact version.

27
00:01:03.390 --> 00:01:06.090
I would say, as long as you're using Maven 3.6 or higher,

28
00:01:06.090 --> 00:01:07.090
then you'll be fine.

29
00:01:10.760 --> 00:01:12.530
Let's look at our development process.

30
00:01:12.530 --> 00:01:14.410
So in the first step, we're going to figure Maven

31
00:01:14.410 --> 00:01:16.550
to find unit test.

32
00:01:16.550 --> 00:01:18.470
And then, we'll run the unit test.

33
00:01:18.470 --> 00:01:20.720
Next, we'll generate unit test reports.

34
00:01:20.720 --> 00:01:23.470
And then finally, we'll generate code coverage reports.

35
00:01:27.160 --> 00:01:29.920
Okay. Step one of configuring Maven to find unit tests.

36
00:01:29.920 --> 00:01:31.260
Now, one thing that's interesting here is that

37
00:01:31.260 --> 00:01:36.260
by default, Maven will not find JUnit5 test classes.

38
00:01:36.320 --> 00:01:39.010
So I could even try this out at my command line.

39
00:01:39.010 --> 00:01:41.240
I could just type, mvn clean test,

40
00:01:41.240 --> 00:01:42.960
without doing anything special,

41
00:01:42.960 --> 00:01:44.550
and it'll gimme the test results here.

42
00:01:44.550 --> 00:01:47.120
And notice, it'll say, "Tests run: 0,"

43
00:01:47.120 --> 00:01:50.160
even if my project has JUnit5 test classes,

44
00:01:50.160 --> 00:01:52.373
Maven will not find it by default.

45
00:01:55.350 --> 00:01:56.760
So we need to make some configs here,

46
00:01:56.760 --> 00:01:58.870
so Maven can find the unit test.

47
00:01:58.870 --> 00:01:59.703
We can resolve this

48
00:01:59.703 --> 00:02:03.693
by using Maven SureFire Plugin version 2.22 or higher.

49
00:02:06.010 --> 00:02:07.450
And our pom file will basically,

50
00:02:07.450 --> 00:02:11.020
add a new section here for build, and we'll add in plugin,

51
00:02:11.020 --> 00:02:13.280
so we're adding some functionality to Maven.

52
00:02:13.280 --> 00:02:15.010
We'll add the Maven SureFire Plugin,

53
00:02:15.010 --> 00:02:16.290
and we give the appropriate version

54
00:02:16.290 --> 00:02:18.140
that I have listed here on the slide.

55
00:02:22.180 --> 00:02:23.030
So then with step two,

56
00:02:23.030 --> 00:02:25.290
we can test this out by running our unit test.

57
00:02:25.290 --> 00:02:28.000
So then at command line, I can type, mvn clean test.

58
00:02:28.000 --> 00:02:29.990
And then, we'll notice here that it found the test.

59
00:02:29.990 --> 00:02:32.790
It ran nine tests, and it gave us the actual test results.

60
00:02:32.790 --> 00:02:35.640
So at this point, Maven is smart enough now

61
00:02:35.640 --> 00:02:38.433
to find JUnit5 test classes.

62
00:02:41.510 --> 00:02:43.700
Okay. So moving ahead to step three of generating

63
00:02:43.700 --> 00:02:45.120
unit test reports,

64
00:02:45.120 --> 00:02:48.040
so we can use the Maven SureFire-Report plugin

65
00:02:48.040 --> 00:02:51.270
to generate an HTML unit test report.

66
00:02:51.270 --> 00:02:53.110
And we can do this by adding some entries here

67
00:02:53.110 --> 00:02:53.943
in our pom.xml.

68
00:02:54.900 --> 00:02:56.580
So we'll add another plugin entry here

69
00:02:56.580 --> 00:02:59.370
for Maven SureFire-Report plugin

70
00:02:59.370 --> 00:03:00.750
and give the appropriate version.

71
00:03:00.750 --> 00:03:02.880
And there's some other information that we need to do here,

72
00:03:02.880 --> 00:03:04.363
in this pom.xml.

73
00:03:08.530 --> 00:03:10.030
So I'll go ahead and fill in the blanks here.

74
00:03:10.030 --> 00:03:12.763
So we'll add this new execution section here.

75
00:03:16.500 --> 00:03:18.510
And so during Maven's test phase,

76
00:03:18.510 --> 00:03:20.970
we're going to execute the plugin goal,

77
00:03:20.970 --> 00:03:24.740
maven-surefire-report-plugin:report.

78
00:03:24.740 --> 00:03:27.910
So we're telling Maven, during the test phase,

79
00:03:27.910 --> 00:03:31.580
execute the plugin goal, report.

80
00:03:31.580 --> 00:03:34.523
And that's from the Maven SureFire-Report plugin.

81
00:03:39.110 --> 00:03:40.580
And so we can test this out here.

82
00:03:40.580 --> 00:03:43.900
So at the command line, we simply do a, mvn clean test.

83
00:03:43.900 --> 00:03:45.270
So this will run the test

84
00:03:45.270 --> 00:03:47.620
and execute the SureFire-Report plugin

85
00:03:47.620 --> 00:03:49.763
to generate the HTML reports.

86
00:03:51.050 --> 00:03:53.860
There's another command we need to run here,

87
00:03:53.860 --> 00:03:55.720
to help with the reports.

88
00:03:55.720 --> 00:03:57.460
By default, the reports don't have

89
00:03:57.460 --> 00:03:59.790
any images or CSS styling.

90
00:03:59.790 --> 00:04:02.500
So we can add support for these website resources

91
00:04:02.500 --> 00:04:04.460
by doing, mvn site,

92
00:04:04.460 --> 00:04:07.010
in case those will give us our images, CSS.

93
00:04:07.010 --> 00:04:09.280
And then we make use of the other argument here,

94
00:04:09.280 --> 00:04:12.020
DgenerateReports=false.

95
00:04:12.020 --> 00:04:13.097
So here, we are saying,

96
00:04:13.097 --> 00:04:16.200
"Hey, don't override the existing HTML reports

97
00:04:16.200 --> 00:04:19.007
because we created those in the previous command."

98
00:04:23.530 --> 00:04:26.340
Now, we can actually view the unit test reports.

99
00:04:26.340 --> 00:04:28.950
So these files are generated in the directory,

100
00:04:28.950 --> 00:04:32.800
target/site/surefire-report.html.

101
00:04:32.800 --> 00:04:35.180
And then this is our actual SureFire Report.

102
00:04:35.180 --> 00:04:37.600
So it has a summary, the list of packages,

103
00:04:37.600 --> 00:04:38.803
and the test results.

104
00:04:40.210 --> 00:04:42.910
And then, it has a list of the test cases.

105
00:04:42.910 --> 00:04:46.033
And then, the actual method names here, for the test cases.

106
00:04:48.940 --> 00:04:51.490
Now, let's discuss the idea of handling test failure.

107
00:04:51.490 --> 00:04:53.830
So by default, the Maven SureFire plugin

108
00:04:53.830 --> 00:04:57.083
will not generate reports if the test fail.

109
00:04:57.950 --> 00:05:00.040
But we'd like to actually generate the reports

110
00:05:00.040 --> 00:05:03.070
if the test pass or fail, because I want to see the results.

111
00:05:03.070 --> 00:05:04.000
Even if the test failed,

112
00:05:04.000 --> 00:05:06.813
I want to see the results in the actual HTML page.

113
00:05:08.390 --> 00:05:12.130
So in my pom.xml, I can add a configuration here

114
00:05:12.130 --> 00:05:14.720
for the Maven SureFire plugin.

115
00:05:14.720 --> 00:05:16.940
So in the configuration section here,

116
00:05:16.940 --> 00:05:21.230
for testFailureIgnore, I'll set the value to true.

117
00:05:21.230 --> 00:05:22.217
Basically I'm saying,

118
00:05:22.217 --> 00:05:25.687
"Generate the reports if test pass or fail."

119
00:05:29.330 --> 00:05:30.750
And then if I run the test again,

120
00:05:30.750 --> 00:05:32.660
then I'll see this given output here,

121
00:05:32.660 --> 00:05:34.650
so I'll have the SureFire Report.

122
00:05:34.650 --> 00:05:35.780
We see the failures,

123
00:05:35.780 --> 00:05:37.550
if there was a test that failed,

124
00:05:37.550 --> 00:05:39.790
and then the information here in the package list,

125
00:05:39.790 --> 00:05:42.160
and the actual failure items there.

126
00:05:42.160 --> 00:05:43.370
And over here, the test cases,

127
00:05:43.370 --> 00:05:45.440
it'll point out which test case failed,

128
00:05:45.440 --> 00:05:46.940
and the the actual failure detail.

129
00:05:46.940 --> 00:05:49.750
So this is good information that you'd like to see

130
00:05:49.750 --> 00:05:51.093
in the unit test report.

131
00:05:55.190 --> 00:05:58.910
And now, let's talk about showing display name in reports.

132
00:05:58.910 --> 00:06:01.230
By default, the Maven SureFire plugin

133
00:06:01.230 --> 00:06:04.340
will not show @DisplayName in reports.

134
00:06:04.340 --> 00:06:05.940
Even if you have it in your code,

135
00:06:05.940 --> 00:06:07.823
it won't show it or display it.

136
00:06:08.940 --> 00:06:10.780
So to show @DisplayName in reports,

137
00:06:10.780 --> 00:06:13.423
we need to make some additional configurations here.

138
00:06:14.920 --> 00:06:18.110
And so, this is where it gets a little bit scary,

139
00:06:18.110 --> 00:06:21.080
because the configuration item is very,

140
00:06:21.080 --> 00:06:22.610
I don't know, verbose.

141
00:06:22.610 --> 00:06:23.900
We give this configuration here,

142
00:06:23.900 --> 00:06:27.330
statelessTestsetReporter, but the key item here

143
00:06:27.330 --> 00:06:31.490
is usePhrasedTestCaseMethodName, to true.

144
00:06:31.490 --> 00:06:32.327
So that'll basically say,

145
00:06:32.327 --> 00:06:36.830
"Hey, access or use the @DisplayName annotation,

146
00:06:36.830 --> 00:06:38.880
and use that in the actual test reports."

147
00:06:42.060 --> 00:06:45.610
So now, when I run it, and then view the actual reports,

148
00:06:45.610 --> 00:06:47.640
then I'll see the normal information,

149
00:06:47.640 --> 00:06:50.210
and the new item here is when they show Test Cases.

150
00:06:50.210 --> 00:06:52.100
So instead of the actual method names,

151
00:06:52.100 --> 00:06:54.630
they're actually honoring the @DisplayName annotation,

152
00:06:54.630 --> 00:06:57.603
and using our text information that we've provided.

