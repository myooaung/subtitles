WEBVTT
1
00:00:01.070 --> 00:00:04.022
In this video, we'll get an overview of unit testing.

2
00:00:06.700 --> 00:00:07.860
Here's the question.

3
00:00:07.860 --> 00:00:09.330
How do we test code?

4
00:00:09.330 --> 00:00:11.600
If we're manually testing the code,

5
00:00:11.600 --> 00:00:13.690
maybe we're doing something like this.

6
00:00:13.690 --> 00:00:16.760
We write the code, and then we run the code,

7
00:00:16.760 --> 00:00:18.520
and then we examine the results

8
00:00:18.520 --> 00:00:21.120
by simply looking at the output in a terminal

9
00:00:21.120 --> 00:00:24.140
and seeing if our output statements or log statements

10
00:00:24.140 --> 00:00:25.963
match at what we were expecting.

11
00:00:29.910 --> 00:00:32.840
And you're probably, "Well, what's wrong with this?"

12
00:00:32.840 --> 00:00:36.610
Well, for small projects, it's probably okay,

13
00:00:36.610 --> 00:00:39.400
but for much larger projects, it's a problem.

14
00:00:39.400 --> 00:00:40.980
And the reason is because it requires

15
00:00:40.980 --> 00:00:43.000
human interaction and analysis.

16
00:00:43.000 --> 00:00:45.020
You actually have to examine the results,

17
00:00:45.020 --> 00:00:47.940
look at the output and know exactly what's out there.

18
00:00:47.940 --> 00:00:49.910
And in your mind, you know what's correct

19
00:00:49.910 --> 00:00:51.280
and what's not correct.

20
00:00:51.280 --> 00:00:53.630
But again, it requires human analysis.

21
00:00:53.630 --> 00:00:56.280
Also, the test case is not reproducible.

22
00:00:56.280 --> 00:00:58.400
When you examine the results as a human,

23
00:00:58.400 --> 00:01:01.090
you can look at the output and know exactly what's there.

24
00:01:01.090 --> 00:01:03.380
But if you wanted to automate this process,

25
00:01:03.380 --> 00:01:04.750
then it's really hard to do,

26
00:01:04.750 --> 00:01:07.140
because you need some way of identifying

27
00:01:07.140 --> 00:01:10.040
what's the correct answer and what's not correct.

28
00:01:10.040 --> 00:01:13.530
Also, there's no easy way to automate the test.

29
00:01:13.530 --> 00:01:15.930
What if I wanted to run a battery of tests

30
00:01:15.930 --> 00:01:19.340
for each code commit, or produce a report of test results?

31
00:01:19.340 --> 00:01:22.120
Well, if we're manually testing the results,

32
00:01:22.120 --> 00:01:24.060
then we can't easily do that.

33
00:01:24.060 --> 00:01:26.753
And ideally, we want to automate this process.

34
00:01:29.450 --> 00:01:32.220
We have the question, what is unit testing?

35
00:01:32.220 --> 00:01:34.230
Well, it's basically when we test

36
00:01:34.230 --> 00:01:36.990
an individual unit of code for correctness.

37
00:01:36.990 --> 00:01:38.940
We provide some fixed inputs,

38
00:01:38.940 --> 00:01:41.373
and then we expect a known output.

39
00:01:44.250 --> 00:01:47.070
So let's say, for example, we're building a calculator,

40
00:01:47.070 --> 00:01:49.030
and we have to create an add method.

41
00:01:49.030 --> 00:01:51.310
And we pass in two values, x and y.

42
00:01:51.310 --> 00:01:54.510
And when we add those two values together and get a result.

43
00:01:54.510 --> 00:01:56.220
So we could create a test case,

44
00:01:56.220 --> 00:01:58.920
and we could say add five comma two,

45
00:01:58.920 --> 00:02:01.510
and then we expect the result of seven.

46
00:02:01.510 --> 00:02:04.580
And if that's okay, then that given test will pass.

47
00:02:04.580 --> 00:02:06.330
We could also create another test case,

48
00:02:06.330 --> 00:02:10.860
where we could say, hey, let's see how this add method works

49
00:02:10.860 --> 00:02:14.520
for negative numbers, and if it gives us the desired result.

50
00:02:14.520 --> 00:02:17.420
And what happens if we give it one negative number,

51
00:02:17.420 --> 00:02:19.610
one positive number, and the results in.

52
00:02:19.610 --> 00:02:23.030
What if I add zero plus zero, what are the results?

53
00:02:23.030 --> 00:02:25.680
All right, so we can kind of start building up a battery

54
00:02:25.680 --> 00:02:30.300
or a collection of tests here for this given add method.

55
00:02:30.300 --> 00:02:32.530
And also the nice thing about it is that once we create

56
00:02:32.530 --> 00:02:34.280
these tests, then we can run these tests

57
00:02:34.280 --> 00:02:35.890
in an automated fashion,

58
00:02:35.890 --> 00:02:38.090
and also they're easily reproducible,

59
00:02:38.090 --> 00:02:39.823
and anyone can reproduce it.

60
00:02:44.280 --> 00:02:46.370
Now let's take a look at another example here

61
00:02:46.370 --> 00:02:48.620
of this class called StringUtils.

62
00:02:48.620 --> 00:02:51.780
And let's imagine that we have a junior developer,

63
00:02:51.780 --> 00:02:55.120
or we have a summer intern who's joined our company,

64
00:02:55.120 --> 00:02:57.750
and we tell them, "Hey, we'd like for you to implement

65
00:02:57.750 --> 00:02:59.190
the code here for capitalize."

66
00:02:59.190 --> 00:03:00.590
And again, I know it's very trivial,

67
00:03:00.590 --> 00:03:02.090
but just think of it as some

68
00:03:02.090 --> 00:03:04.633
super-duper complex method or whatever.

69
00:03:05.830 --> 00:03:08.350
So we can create this test case here called capitalize.

70
00:03:08.350 --> 00:03:09.550
And we pass in Luv2code.

71
00:03:10.410 --> 00:03:13.880
And if this method works correctly or accordingly,

72
00:03:13.880 --> 00:03:17.480
then we should get back LUV2CODE in all caps.

73
00:03:17.480 --> 00:03:19.920
Now, that's one scenario.

74
00:03:19.920 --> 00:03:22.100
Another test case is that we could say,

75
00:03:22.100 --> 00:03:25.370
call capitalize and pass in a string in all caps,

76
00:03:25.370 --> 00:03:26.410
what's the result?

77
00:03:26.410 --> 00:03:28.680
Let's pass in a string and it's in all lowercase,

78
00:03:28.680 --> 00:03:29.560
what's the result?

79
00:03:29.560 --> 00:03:32.660
We could also say, what happens if we pass in a value

80
00:03:32.660 --> 00:03:35.890
of null, and we handle the results accordingly.

81
00:03:35.890 --> 00:03:38.090
So again, we can build up this battery

82
00:03:38.090 --> 00:03:40.330
or this collection or this suite of tests,

83
00:03:40.330 --> 00:03:44.137
and we can use this to verify that the interns work,

84
00:03:44.137 --> 00:03:46.280
or our junior developer,

85
00:03:46.280 --> 00:03:49.950
make sure their work actually works as desired.

86
00:03:49.950 --> 00:03:52.627
Now in the old days, we would ask a developer,

87
00:03:52.627 --> 00:03:54.960
"Hey, your code's finished. Does it work?"

88
00:03:54.960 --> 00:03:57.930
And the developer would say, "Yes, boss, everything works."

89
00:03:57.930 --> 00:03:59.979
And you have to kind of trust them (chuckles)

90
00:03:59.979 --> 00:04:01.950
that they're code actually works.

91
00:04:01.950 --> 00:04:05.060
But now once we have unit test in place,

92
00:04:05.060 --> 00:04:08.010
then we have some objective, reproducible,

93
00:04:08.010 --> 00:04:09.777
automated tests that we can run to say,

94
00:04:09.777 --> 00:04:12.200
"Okay, yes, this code really does work."

95
00:04:12.200 --> 00:04:15.510
And as a manager or as a senior,

96
00:04:15.510 --> 00:04:17.730
I can run these tests even

97
00:04:17.730 --> 00:04:19.910
after the junior developer's gone home for the day,

98
00:04:19.910 --> 00:04:21.930
or they've moved on to another position.

99
00:04:21.930 --> 00:04:25.110
I can still run these tests, and I can verify or validate

100
00:04:25.110 --> 00:04:28.130
that yes, the code works, or hey, this code doesn't work,

101
00:04:28.130 --> 00:04:30.530
because it fails certain test cases.

102
00:04:30.530 --> 00:04:32.230
All right, so that's one of the ideas here

103
00:04:32.230 --> 00:04:33.963
of using these unit tests.

104
00:04:37.820 --> 00:04:39.160
Okay great, so this leads us

105
00:04:39.160 --> 00:04:41.130
into the benefits of unit tests.

106
00:04:41.130 --> 00:04:43.020
So, I've discussed this a bit,

107
00:04:43.020 --> 00:04:44.150
and kind of here we are.

108
00:04:44.150 --> 00:04:46.850
So when is it that we can have automated tests

109
00:04:46.850 --> 00:04:49.890
and also better code design and fewer bugs

110
00:04:49.890 --> 00:04:52.690
and higher reliability, and it increases

111
00:04:52.690 --> 00:04:54.510
the confidence of code refactoring.

112
00:04:54.510 --> 00:04:56.620
So in case I had to go and modify

113
00:04:56.620 --> 00:04:58.470
some of the application code

114
00:04:58.470 --> 00:05:01.540
or add some new features or refactor some code,

115
00:05:01.540 --> 00:05:02.820
then the biggest thing is like, okay,

116
00:05:02.820 --> 00:05:05.720
I touched the code, did I break anything?

117
00:05:05.720 --> 00:05:07.630
Well, if all the tests pass,

118
00:05:07.630 --> 00:05:10.170
then you have a high level of confidence

119
00:05:10.170 --> 00:05:12.100
that yeah, you know, we're A-Okay.

120
00:05:12.100 --> 00:05:14.259
So that's the nice think about having tests.

121
00:05:14.259 --> 00:05:17.420
And also, unit tests are one of the basic requirements

122
00:05:17.420 --> 00:05:20.060
for DevOps and Build Pipelines.

123
00:05:20.060 --> 00:05:22.530
So, for example of setting up continuous integration

124
00:05:22.530 --> 00:05:24.140
and continuous deployment,

125
00:05:24.140 --> 00:05:26.920
a unit test is one of the key components here

126
00:05:26.920 --> 00:05:28.360
of this DevOps culture.

127
00:05:28.360 --> 00:05:30.470
So by learning unit testing here,

128
00:05:30.470 --> 00:05:31.733
you're really setting yourself up to go

129
00:05:31.733 --> 00:05:33.300
into some more advance,

130
00:05:33.300 --> 00:05:35.963
more sure software development processes.

131
00:05:39.020 --> 00:05:42.210
Now you also may have heard this term integration testing

132
00:05:42.210 --> 00:05:44.330
and how does it relate to unit testing?

133
00:05:44.330 --> 00:05:46.840
Well, integration testing is basically where we test

134
00:05:46.840 --> 00:05:50.370
multiple components together as part of a test plan.

135
00:05:50.370 --> 00:05:52.260
And really here, we want to determine

136
00:05:52.260 --> 00:05:55.730
if the software units work together as expected,

137
00:05:55.730 --> 00:05:59.070
and identify any negative side effects due

138
00:05:59.070 --> 00:06:00.173
to the integration.

139
00:06:01.220 --> 00:06:03.570
And when we're performing integration testing,

140
00:06:03.570 --> 00:06:05.850
we can make use of mocks and stubs,

141
00:06:05.850 --> 00:06:08.120
but we can also test using some live integrations,

142
00:06:08.120 --> 00:06:10.000
like with a database or a file system.

143
00:06:10.000 --> 00:06:11.680
And there's pros and cons in each one,

144
00:06:11.680 --> 00:06:13.130
and we'll talk more a bit about that later.

145
00:06:13.130 --> 00:06:16.320
And so we'll actually perform unit testing in this course

146
00:06:16.320 --> 00:06:19.313
and also we'll perform integration testing in this course.

147
00:06:21.830 --> 00:06:24.430
Okay, let's take a look at some unit testing frameworks.

148
00:06:24.430 --> 00:06:26.550
One of the popular frameworks is JUnit,

149
00:06:26.550 --> 00:06:28.813
and so JUnit supports creating test cases,

150
00:06:28.813 --> 00:06:32.240
automation of test cases with pass/fail results,

151
00:06:32.240 --> 00:06:33.320
the utilities available

152
00:06:33.320 --> 00:06:36.410
for test setup, teardown, assertions,

153
00:06:36.410 --> 00:06:39.480
and also there's Mockito for creating mocks and stubs,

154
00:06:39.480 --> 00:06:42.400
and Mockito's mainly for minimizing dependencies

155
00:06:42.400 --> 00:06:43.620
on external components.

156
00:06:43.620 --> 00:06:46.250
And so during this course, we'll use a lot of JUnit,

157
00:06:46.250 --> 00:06:47.650
and we'll also make use of Mockito,

158
00:06:47.650 --> 00:06:49.470
so you'll get a lot of hands-on practice

159
00:06:49.470 --> 00:06:50.823
using these frameworks.

160
00:06:54.812 --> 00:06:56.870
And then finally, one thing that we'll use a lot

161
00:06:56.870 --> 00:06:58.230
this week is that we'll make use

162
00:06:58.230 --> 00:06:59.913
of this unit testing in our IDE.

163
00:07:00.909 --> 00:07:02.930
So we'll make use of IntelliJ in this course.

164
00:07:02.930 --> 00:07:06.453
And so IntelliJ has built in support for unit tests.

165
00:07:07.370 --> 00:07:10.260
We can see results of tests in terms of pass/fail.

166
00:07:10.260 --> 00:07:12.150
We can also get information as far as the number

167
00:07:12.150 --> 00:07:15.170
of tests that were executed and some other data here, there.

168
00:07:15.170 --> 00:07:17.270
We'll see a lot of hands-on practice here

169
00:07:17.270 --> 00:07:20.093
of using unit testing in IntelliJ.

170
00:07:23.670 --> 00:07:26.790
And also Eclipse has built in support for unit testing.

171
00:07:26.790 --> 00:07:28.750
So here we can get a list of the test results

172
00:07:28.750 --> 00:07:31.970
as far as pass/fail, the number of tests that were executed,

173
00:07:31.970 --> 00:07:34.640
with the classic green bar as far as tests that pass,

174
00:07:34.640 --> 00:07:36.550
and then red if tests fail.

175
00:07:36.550 --> 00:07:38.820
Eclipse and IntelliJ, they have a very similar feature set

176
00:07:38.820 --> 00:07:41.343
here in regards to unit testing.

