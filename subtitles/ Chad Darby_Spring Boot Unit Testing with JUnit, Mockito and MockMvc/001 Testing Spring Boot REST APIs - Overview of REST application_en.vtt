WEBVTT
1
00:00:01.240 --> 00:00:03.180
This video, we're going to get a REST API

2
00:00:03.180 --> 00:00:04.533
testing overview.

3
00:00:07.970 --> 00:00:11.670
We'll start with the existing Student Grade Book REST API.

4
00:00:11.670 --> 00:00:13.590
It's very similar to the Student Grade Book app

5
00:00:13.590 --> 00:00:16.070
that we worked on in the previous set of videos.

6
00:00:16.070 --> 00:00:18.460
REST API was created by a previous employee,

7
00:00:18.460 --> 00:00:21.393
but it does not have any test. Yikes!

8
00:00:22.390 --> 00:00:24.690
And our job, right, or our task

9
00:00:24.690 --> 00:00:28.200
is to will actually add tests for the REST API.

10
00:00:28.200 --> 00:00:30.290
So we will learn how to create tests

11
00:00:30.290 --> 00:00:32.420
for a Spring Boot REST API.

12
00:00:32.420 --> 00:00:33.253
Good stuff.

13
00:00:37.670 --> 00:00:40.380
Here's the technical stack of the existing application.

14
00:00:40.380 --> 00:00:41.890
It's based on Spring Boot.

15
00:00:41.890 --> 00:00:43.870
They make use of Spring Data JPA.

16
00:00:43.870 --> 00:00:46.413
And there's also a Spring RestController.

17
00:00:49.040 --> 00:00:51.020
And here's an overview of the existing code.

18
00:00:51.020 --> 00:00:52.560
Just a partial overview.

19
00:00:52.560 --> 00:00:54.067
We have our GradeBookController.

20
00:00:54.067 --> 00:00:55.530
It's a RestController.

21
00:00:55.530 --> 00:00:57.227
And then we also have a model,

22
00:00:57.227 --> 00:00:59.500
CollegeStudent, Grade, Gradebook, et cetera.

23
00:00:59.500 --> 00:01:01.460
The model is the same set of classes

24
00:01:01.460 --> 00:01:03.530
that we've seen in the previous set of videos.

25
00:01:03.530 --> 00:01:04.769
So nothing's changed.

26
00:01:04.769 --> 00:01:06.490
We're simply putting a REST API

27
00:01:06.490 --> 00:01:08.223
onto the existing application.

28
00:01:11.580 --> 00:01:14.430
And here's our existing application architecture.

29
00:01:14.430 --> 00:01:17.530
We have our GradeBookController, which is a RestController,

30
00:01:17.530 --> 00:01:19.660
communicates to the StudentAndGradeService.

31
00:01:19.660 --> 00:01:22.760
We have our DAOs talking to the backend database.

32
00:01:22.760 --> 00:01:24.900
So you've seen a lot of this stuff before.

33
00:01:24.900 --> 00:01:25.980
The only thing that's different now

34
00:01:25.980 --> 00:01:29.010
is the actual GradeBookController or the RestController

35
00:01:29.010 --> 00:01:30.110
on the left hand side.

36
00:01:31.110 --> 00:01:33.310
And as usual, we have Unit Tests, Integration Test,

37
00:01:33.310 --> 00:01:36.573
and we'll create more tests here for the REST API.

38
00:01:38.170 --> 00:01:40.050
All righty. So this all looks really exciting.

39
00:01:40.050 --> 00:01:41.540
Let's go ahead and swing into our IDE,

40
00:01:41.540 --> 00:01:43.240
and let's get this project set up.

41
00:01:46.400 --> 00:01:48.300
All righty. So we're in our IDE right now.

42
00:01:48.300 --> 00:01:50.723
Let's go ahead and open up some starter files.

43
00:01:54.360 --> 00:01:55.193
I'll move in here,

44
00:01:55.193 --> 00:01:58.083
and I'll select the directory spring-boot-unit-testing-main.

45
00:02:02.620 --> 00:02:06.193
And then I'll select the directory 4.0-starting-project.

46
00:02:10.210 --> 00:02:13.010
And then I'll go ahead and open up this given directory.

47
00:02:20.290 --> 00:02:22.752
All right. So this should load up our project here,

48
00:02:22.752 --> 00:02:24.613
4.0-starting-project.

49
00:02:27.740 --> 00:02:28.670
I'll move into the directories here

50
00:02:28.670 --> 00:02:30.523
on the source, main, java.

51
00:02:32.870 --> 00:02:36.910
We see our package, com luv2code springmvc.

52
00:02:36.910 --> 00:02:39.170
I'll expand the package here for controller,

53
00:02:39.170 --> 00:02:41.410
and this is our GradeBookController.

54
00:02:41.410 --> 00:02:43.260
We'll go ahead and open up this file.

55
00:02:46.390 --> 00:02:48.000
And we'll notice the here at the top

56
00:02:48.000 --> 00:02:50.030
that it's a RestController.

57
00:02:50.030 --> 00:02:52.150
All right. That's for our REST API.

58
00:02:52.150 --> 00:02:55.100
And this is code that was created by the previous employee.

59
00:02:59.930 --> 00:03:02.600
Let me expand the window here for a second

60
00:03:02.600 --> 00:03:03.610
with our normal code here

61
00:03:03.610 --> 00:03:05.903
of Autowiring in the different dependencies.

62
00:03:11.130 --> 00:03:14.700
And then we set up a RequestMapping here for a get request,

63
00:03:14.700 --> 00:03:17.280
and this simply returns a list of students.

64
00:03:17.280 --> 00:03:19.000
Notice here, we're not returning a view.

65
00:03:19.000 --> 00:03:20.550
We're simply returning the list directly,

66
00:03:20.550 --> 00:03:22.773
and it'll send it back as JSON.

67
00:03:24.580 --> 00:03:26.070
We also have another GetMapping here

68
00:03:26.070 --> 00:03:29.063
to gets student information for a specific student ID.

69
00:03:34.950 --> 00:03:37.500
We have a PostMapping here to create a new student.

70
00:03:39.640 --> 00:03:43.510
We have coding there for DeleteMapping to delete a student.

71
00:03:43.510 --> 00:03:46.563
Also another PostMapping here for creating a grade.

72
00:03:48.180 --> 00:03:50.220
And a couple of things that are different here

73
00:03:50.220 --> 00:03:53.550
in the REST API that in the event that we have an error

74
00:03:53.550 --> 00:03:56.550
will actually throw a custom exception,

75
00:03:56.550 --> 00:03:58.920
a StudentOrGradeNotFoundException.

76
00:03:58.920 --> 00:04:01.260
I'll show you the coding for that in a second.

77
00:04:01.260 --> 00:04:03.320
But effectively here, once we throw an exception,

78
00:04:03.320 --> 00:04:04.780
we can handle that exception,

79
00:04:04.780 --> 00:04:07.460
send that data back as JSON.

80
00:04:07.460 --> 00:04:10.263
And here's a bit more here on the ExceptionHandlers.

81
00:04:11.700 --> 00:04:13.860
So we can handle an exception.

82
00:04:13.860 --> 00:04:15.500
We create that error response.

83
00:04:15.500 --> 00:04:18.600
We set the status message and timestamp accordingly.

84
00:04:18.600 --> 00:04:21.329
And we can handle different types of exceptions here

85
00:04:21.329 --> 00:04:22.420
in this example.

86
00:04:22.420 --> 00:04:25.853
So that's kind of the basic coding here for the REST API.

87
00:04:29.060 --> 00:04:31.700
Now let's take a look at the exceptionhandling package,

88
00:04:31.700 --> 00:04:34.160
those new items that I showed you.

89
00:04:34.160 --> 00:04:37.395
We have a normal data transfer object here,

90
00:04:37.395 --> 00:04:39.690
StudentOrGradeErrorResponse,

91
00:04:39.690 --> 00:04:43.560
that simply has three fields, status, message and timestamp.

92
00:04:43.560 --> 00:04:44.720
And we have a constructor here

93
00:04:44.720 --> 00:04:46.010
in the normal getter and setters

94
00:04:46.010 --> 00:04:47.993
for this data transfer object.

95
00:04:49.560 --> 00:04:51.550
Then the actual exception itself

96
00:04:51.550 --> 00:04:54.810
is a StudentOrGradeNotFoundException.

97
00:04:56.730 --> 00:04:59.290
It extends runtime exception,

98
00:04:59.290 --> 00:05:01.463
and again, the normal constructors here.

99
00:05:07.300 --> 00:05:09.190
All right, so that's kind of the basic coding there

100
00:05:09.190 --> 00:05:11.310
for the controller and the exception handling.

101
00:05:11.310 --> 00:05:13.160
Now, a lot of the other stuff is the same.

102
00:05:13.160 --> 00:05:15.730
So models, all of these model classes here

103
00:05:15.730 --> 00:05:17.670
for CollegeStudent, Grade and Gradebook,

104
00:05:17.670 --> 00:05:19.920
all the same stuff that we saw in the previous videos.

105
00:05:19.920 --> 00:05:21.420
And the similar thing here for repository,

106
00:05:21.420 --> 00:05:24.090
HistoryGrades, MathGradeDao, so on.

107
00:05:24.090 --> 00:05:25.610
The same that we saw earlier.

108
00:05:25.610 --> 00:05:27.100
And also the StudentAndGradeService,

109
00:05:27.100 --> 00:05:28.350
this is all the same coding

110
00:05:28.350 --> 00:05:30.763
that we had in the previous videos.

111
00:05:37.180 --> 00:05:39.600
Now moving down to resources,

112
00:05:39.600 --> 00:05:42.123
we have our props, our test properties.

113
00:05:43.670 --> 00:05:45.186
The three items that are new here,

114
00:05:45.186 --> 00:05:48.060
insertData, insertGrade, overRideData,

115
00:05:48.060 --> 00:05:50.140
these are files that are used by our test.

116
00:05:50.140 --> 00:05:51.130
And then moving down here,

117
00:05:51.130 --> 00:05:54.040
we can take a look at our StudentAndGradeService test.

118
00:05:54.040 --> 00:05:56.240
That's the only test that's in this project.

119
00:06:01.440 --> 00:06:02.950
And this is very similar

120
00:06:02.950 --> 00:06:04.510
to the test that we created earlier.

121
00:06:04.510 --> 00:06:06.960
So we created our, injected our DAOs.

122
00:06:06.960 --> 00:06:08.880
We edit the different SQL scripts,

123
00:06:08.880 --> 00:06:11.060
all the BeforeEach and AfterEach, and so on.

124
00:06:11.060 --> 00:06:12.700
So this code is very similar

125
00:06:12.700 --> 00:06:15.433
to what we had in the previous set of videos.

126
00:06:19.760 --> 00:06:21.080
Let's go ahead and run this test

127
00:06:21.080 --> 00:06:23.803
just to make sure it runs and works properly.

128
00:06:29.770 --> 00:06:30.850
All righty, this looks really good.

129
00:06:30.850 --> 00:06:31.910
I see all green here,

130
00:06:31.910 --> 00:06:33.140
so that means that the test passed.

131
00:06:33.140 --> 00:06:34.320
So this is really good.

132
00:06:34.320 --> 00:06:36.280
Now our task is to actually go ahead

133
00:06:36.280 --> 00:06:39.330
and create a test for the REST API,

134
00:06:39.330 --> 00:06:41.360
because we don't have that test right now.

135
00:06:41.360 --> 00:06:42.940
And we'll actually build that test

136
00:06:42.940 --> 00:06:44.410
over the next set of videos.

137
00:06:44.410 --> 00:06:46.660
All righty. So this looks really good so far.

