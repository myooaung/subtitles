WEBVTT
1
00:00:00.845 --> 00:00:01.730
And this video,

2
00:00:01.730 --> 00:00:04.133
we'll cover JUnit custom display names.

3
00:00:08.090 --> 00:00:09.540
Now currently the method names

4
00:00:09.540 --> 00:00:11.780
are listed in the test results.

5
00:00:11.780 --> 00:00:13.480
That's good for Java developers,

6
00:00:13.480 --> 00:00:16.990
but we'd like to maybe give custom display names,

7
00:00:16.990 --> 00:00:19.516
provide a more descriptive name for the test.

8
00:00:19.516 --> 00:00:22.170
We can include spaces, special characters.

9
00:00:22.170 --> 00:00:24.050
So in this example here,

10
00:00:24.050 --> 00:00:28.390
Test for Equalities to support JIRA issue number 123,

11
00:00:28.390 --> 00:00:29.892
and we'd also like more descriptive names

12
00:00:29.892 --> 00:00:33.320
if we're going to share test reports with project managers,

13
00:00:33.320 --> 00:00:35.050
non-techies and so on.

14
00:00:35.050 --> 00:00:38.170
Non-techies may not understand all these method names,

15
00:00:38.170 --> 00:00:41.340
but they'll understand like a normal plain text description.

16
00:00:41.340 --> 00:00:42.610
So that's kind of the use case here

17
00:00:42.610 --> 00:00:44.373
for custom display names.

18
00:00:48.130 --> 00:00:50.690
Now, let's take a look at the annotation.

19
00:00:50.690 --> 00:00:51.910
So we have display name.

20
00:00:51.910 --> 00:00:53.340
We can give a custom display name

21
00:00:53.340 --> 00:00:56.350
that has spaces, special characters and emojis.

22
00:00:56.350 --> 00:00:59.760
Like I mentioned earlier, useful for test reports and IDE

23
00:00:59.760 --> 00:01:01.580
and also external test runner,

24
00:01:01.580 --> 00:01:04.080
and also for sharing reports with project management

25
00:01:04.080 --> 00:01:05.363
and non-techies.

26
00:01:08.970 --> 00:01:11.520
Looking at a code example, so on our DemoUtilsTest,

27
00:01:12.510 --> 00:01:16.370
we can import this annotation here, display name

28
00:01:16.370 --> 00:01:18.400
and then we can apply it to a given method,

29
00:01:18.400 --> 00:01:21.440
so display name and we give the descriptive name,

30
00:01:21.440 --> 00:01:22.460
null and not null.

31
00:01:22.460 --> 00:01:24.120
You can give any name that you want here,

32
00:01:24.120 --> 00:01:27.010
any string that you want for the actual display name.

33
00:01:27.010 --> 00:01:28.080
We could do a similar thing here

34
00:01:28.080 --> 00:01:29.630
for our testEqualsAndNotEquals.

35
00:01:32.211 --> 00:01:34.860
Now, when we run it, then we'll see the output here.

36
00:01:34.860 --> 00:01:37.100
Those are actual display names

37
00:01:37.100 --> 00:01:39.423
as opposed to the actual method names.

38
00:01:43.030 --> 00:01:44.970
And that code example works fine,

39
00:01:44.970 --> 00:01:46.407
but you're probably thinking,

40
00:01:46.407 --> 00:01:50.620
"I don't want to have to manually define each display name.

41
00:01:50.620 --> 00:01:54.160
I wish JUnit could simply just generate a name for me."

42
00:01:54.160 --> 00:01:56.620
And you're right on track here.

43
00:01:56.620 --> 00:02:00.053
JUnit can generate display names for you using generators.

44
00:02:02.530 --> 00:02:04.690
So one of the generators is called Simple.

45
00:02:04.690 --> 00:02:06.670
It simply removes the trailing parentheses

46
00:02:06.670 --> 00:02:08.669
from the test method name.

47
00:02:08.669 --> 00:02:10.610
There's also ReplaceUnderscores.

48
00:02:10.610 --> 00:02:12.440
So if a method name has underscores in it,

49
00:02:12.440 --> 00:02:15.750
it'll simply replace those underscores with spaces

50
00:02:15.750 --> 00:02:17.720
and then there's also IndicativeSentences.

51
00:02:17.720 --> 00:02:19.930
So it'll basically generate a sentence

52
00:02:19.930 --> 00:02:23.260
based on the test class name and the test method name

53
00:02:23.260 --> 00:02:25.530
and we'll see examples of all of these generators

54
00:02:25.530 --> 00:02:26.913
here in this video.

55
00:02:32.340 --> 00:02:33.770
Now, when we use generators,

56
00:02:33.770 --> 00:02:36.861
there's no need to use the at display name annotation

57
00:02:36.861 --> 00:02:38.680
for every method.

58
00:02:38.680 --> 00:02:40.630
Instead, you can simply remove the annotations

59
00:02:40.630 --> 00:02:44.260
from the method and simply give one main annotation

60
00:02:44.260 --> 00:02:45.683
at the class level.

61
00:02:47.770 --> 00:02:49.590
So in this example, we'll perform some imports

62
00:02:49.590 --> 00:02:51.720
on DisplayNameGeneration

63
00:02:51.720 --> 00:02:54.070
and also DisplayNameGenerator,

64
00:02:54.070 --> 00:02:55.740
and at the class level we make use

65
00:02:55.740 --> 00:02:58.510
of the DisplayNameGeneration annotation

66
00:02:58.510 --> 00:03:02.900
and then we give DisplayNameGenerator.simple.class.

67
00:03:02.900 --> 00:03:06.440
So we're telling it, hey, generate display names for me

68
00:03:06.440 --> 00:03:08.210
using the simple approach

69
00:03:08.210 --> 00:03:09.310
and with the simple generator,

70
00:03:09.310 --> 00:03:11.440
it simply removes the trailing parenthesis

71
00:03:11.440 --> 00:03:13.120
from the test method name.

72
00:03:13.120 --> 00:03:14.050
But the nice thing here,

73
00:03:14.050 --> 00:03:16.480
is that there's no need to manually write

74
00:03:16.480 --> 00:03:19.800
the at display name annotation for each individual method.

75
00:03:19.800 --> 00:03:21.850
It'll generate the display names for you.

76
00:03:22.750 --> 00:03:24.730
And so now when we run this unit test,

77
00:03:24.730 --> 00:03:26.730
then we'll see the actual display name.

78
00:03:26.730 --> 00:03:29.700
So testNullAndNotNull, simply the method name

79
00:03:29.700 --> 00:03:32.864
without parens and then testEqualsAndNotEqual,

80
00:03:32.864 --> 00:03:35.520
again, method name without the parens.

81
00:03:35.520 --> 00:03:37.333
Very simple, very straightforward.

82
00:03:40.940 --> 00:03:44.880
Now, if our method names have underscores,

83
00:03:44.880 --> 00:03:49.670
then we can make use of the Replace Underscores generator.

84
00:03:49.670 --> 00:03:52.373
It'll replace the underscores with spaces.

85
00:03:53.730 --> 00:03:56.060
So here's our test_Equals_And_Not__Equals again.

86
00:03:56.060 --> 00:03:58.540
Note the method name, it uses underscores

87
00:03:58.540 --> 00:04:01.081
and a similar thing here for test_Null_And_Not_Null.

88
00:04:01.081 --> 00:04:02.600
When we run this test,

89
00:04:02.600 --> 00:04:05.080
then we'll see how this maps out accordingly.

90
00:04:05.080 --> 00:04:06.137
So it takes the underscores

91
00:04:06.137 --> 00:04:08.763
and it replaces them with spaces.

92
00:04:12.960 --> 00:04:13.920
Another approach is using

93
00:04:13.920 --> 00:04:16.649
the Indicative Sentences generator.

94
00:04:16.649 --> 00:04:19.550
So it'll generate a sentence based on the test class name

95
00:04:19.550 --> 00:04:21.163
and the test method name.

96
00:04:22.210 --> 00:04:24.605
So here we have testNullAndNotNull

97
00:04:24.605 --> 00:04:27.370
and then also testEqualsAndNotEquals.

98
00:04:27.370 --> 00:04:31.150
When we run this test, then we'll have the output here,

99
00:04:31.150 --> 00:04:32.973
DemoUtils, testNullAndNotNull.

100
00:04:34.630 --> 00:04:37.800
The format here is basically the test class name

101
00:04:37.800 --> 00:04:39.473
and the method name.

102
00:04:42.020 --> 00:04:43.470
All righty, so this looks really good.

103
00:04:43.470 --> 00:04:44.890
Let's go ahead and move into the next video

104
00:04:44.890 --> 00:04:46.613
and let's write some code.

