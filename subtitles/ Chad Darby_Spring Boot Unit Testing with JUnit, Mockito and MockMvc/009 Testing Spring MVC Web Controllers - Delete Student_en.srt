1
00:00:01,092 --> 00:00:03,692
In this video we'll learn how to delete a student.

2
00:00:07,030 --> 00:00:08,830
All right. So we have some work to do.

3
00:00:08,830 --> 00:00:10,680
And this is for deleting a student.

4
00:00:10,680 --> 00:00:13,550
What we'll do is we'll apply test-driven development.

5
00:00:13,550 --> 00:00:15,730
We'll start by creating a failing test

6
00:00:15,730 --> 00:00:18,240
and then we'll add code to the grade book controller

7
00:00:18,240 --> 00:00:21,200
to delete the student and make the test pass.

8
00:00:21,200 --> 00:00:23,210
We'll also add code to the grade book controller

9
00:00:23,210 --> 00:00:26,860
to check for the error page and also make that test pass.

10
00:00:26,860 --> 00:00:27,770
Now, taking a look here

11
00:00:27,770 --> 00:00:29,930
we see that we have our grade book application.

12
00:00:29,930 --> 00:00:31,870
We have our backend controllers.

13
00:00:31,870 --> 00:00:34,790
We'll click on the X icon to actually delete the student.

14
00:00:34,790 --> 00:00:38,300
Now, the UI HTML code is already in place

15
00:00:38,300 --> 00:00:40,410
and we'll focus on the backend functionality.

16
00:00:40,410 --> 00:00:42,320
So we'll write a failing test first

17
00:00:42,320 --> 00:00:44,400
and then we'll update our controller code

18
00:00:44,400 --> 00:00:45,793
to make the test as pass.

19
00:00:49,470 --> 00:00:52,410
Okay, so we're in a IDE and what I'd like to do is

20
00:00:52,410 --> 00:00:54,090
write the code for deleting a student

21
00:00:54,090 --> 00:00:55,970
and we'll make use of test-driven development.

22
00:00:55,970 --> 00:00:58,003
We'll write a failing test first.

23
00:00:59,160 --> 00:01:02,060
Let's go ahead and open up our grade book controller test.

24
00:01:05,250 --> 00:01:07,900
And we'll add a new test here for deleting a student.

25
00:01:22,570 --> 00:01:23,810
We'll set up the assert true

26
00:01:23,810 --> 00:01:26,063
and we'll make sure the student exists first.

27
00:01:33,970 --> 00:01:37,580
Here, I'll make use of studentDao.findById of one.

28
00:01:37,580 --> 00:01:40,430
And I'll see if this given item is present.

29
00:01:40,430 --> 00:01:41,683
Making sure this is true.

30
00:01:42,670 --> 00:01:46,000
Now, again here, we're making sure the student exists first.

31
00:01:46,000 --> 00:01:48,500
Now you may wonder, well, what about a student ID one?

32
00:01:48,500 --> 00:01:49,700
How did it get there?

33
00:01:49,700 --> 00:01:51,545
Well, remember from our before each,

34
00:01:51,545 --> 00:01:54,160
that's the piece of code that runs before each test.

35
00:01:54,160 --> 00:01:56,760
We do a little set at work and we actually insert

36
00:01:56,760 --> 00:01:58,170
the student into the database.

37
00:01:58,170 --> 00:02:00,170
And so we insert the student Eric Roby

38
00:02:00,170 --> 00:02:01,690
that has the ID of one.

39
00:02:01,690 --> 00:02:04,070
So that we know that by the time this test runs

40
00:02:04,070 --> 00:02:07,160
in this portion of code, we have a student in our database

41
00:02:07,160 --> 00:02:08,759
with the ID of one.

42
00:02:08,759 --> 00:02:11,360
So right now, simply just using a sanity check here.

43
00:02:15,640 --> 00:02:17,750
And now what I like to do is make a call

44
00:02:17,750 --> 00:02:20,723
to that given endpoint to actually delete the student.

45
00:02:24,980 --> 00:02:27,250
So I'll make use of this MVC result

46
00:02:27,250 --> 00:02:29,593
equals mockMvc.perform.

47
00:02:31,100 --> 00:02:33,540
I'll make use of this mock MVC request builders

48
00:02:33,540 --> 00:02:37,483
and I'll perform a get request, to a given endpoint.

49
00:02:42,280 --> 00:02:45,420
And the endpoint that we'll use is delete, slash student,

50
00:02:45,420 --> 00:02:47,400
slash a given ID.

51
00:02:47,400 --> 00:02:49,980
And then we'll pass in the idea as a parameter here,

52
00:02:49,980 --> 00:02:51,570
the student ID one.

53
00:02:51,570 --> 00:02:52,530
Effectively, right now,

54
00:02:52,530 --> 00:02:54,220
this code will actually do a get request

55
00:02:54,220 --> 00:02:56,133
to delete the student ID of one.

56
00:02:57,700 --> 00:02:59,800
And I'll also set up my expectations here.

57
00:03:08,650 --> 00:03:10,423
I'll make sure the status is okay.

58
00:03:14,320 --> 00:03:16,370
And then I'll make use of the end return.

59
00:03:17,770 --> 00:03:20,490
Excellent. So now we have this MVC result.

60
00:03:20,490 --> 00:03:23,490
We can actually get the model and view from this MVC result.

61
00:03:33,980 --> 00:03:36,913
Next we can actually go through and assert the view name.

62
00:03:39,490 --> 00:03:41,913
And we'll assert that the view name is index.

63
00:03:43,060 --> 00:03:45,340
And then one last we'll do is we'll assert

64
00:03:45,340 --> 00:03:49,090
to make sure that the student was actually deleted.

65
00:03:49,090 --> 00:03:51,230
Here I'll make use of assert false

66
00:03:51,230 --> 00:03:54,773
and I'll attempt to get that student from the database.

67
00:03:54,773 --> 00:03:58,500
studentDao.findById of one, is present

68
00:03:58,500 --> 00:03:59,790
and this should come back as false.

69
00:03:59,790 --> 00:04:02,320
That means that the actual student was deleted

70
00:04:02,320 --> 00:04:03,513
from the database.

71
00:04:09,000 --> 00:04:11,350
All right. So let's go ahead and run this test.

72
00:04:19,910 --> 00:04:22,350
And the test failed but that is expected, right?

73
00:04:22,350 --> 00:04:24,010
Because we're doing test-driven development.

74
00:04:24,010 --> 00:04:25,530
We wrote a failing test first

75
00:04:25,530 --> 00:04:27,710
and then we'll modify our code or refactor our code

76
00:04:27,710 --> 00:04:29,830
to make the test pass, so no problem.

77
00:04:29,830 --> 00:04:32,250
We just have our work cut out for us right now.

78
00:04:32,250 --> 00:04:33,500
All right. Let's dive in.

79
00:04:35,670 --> 00:04:39,000
So diving in here, I'll move up to my grade book controller

80
00:04:41,810 --> 00:04:45,403
and I need to add a new mapping for deleting the student.

81
00:04:46,770 --> 00:04:48,470
Here I'll make use of get mapping.

82
00:04:53,840 --> 00:04:57,933
And this is for a delete student ID.

83
00:05:00,240 --> 00:05:02,993
And ID's going to come in as a path variable.

84
00:05:07,380 --> 00:05:09,340
I make use of the annotation for path variable

85
00:05:09,340 --> 00:05:12,160
to map ID to a given method parameter

86
00:05:13,170 --> 00:05:14,773
and also pass in the model.

87
00:05:17,110 --> 00:05:19,610
And then I'll make use of studentService.deleteStudent

88
00:05:21,310 --> 00:05:22,943
and I pass in the ID.

89
00:05:25,380 --> 00:05:26,640
And just like we did last time,

90
00:05:26,640 --> 00:05:29,483
I'll get a list of students from the service.

91
00:05:31,130 --> 00:05:32,910
Basically the updated list

92
00:05:32,910 --> 00:05:34,800
and I'll add it as a model attribute.

93
00:05:34,800 --> 00:05:35,633
Here I'll say,

94
00:05:35,633 --> 00:05:37,890
college students equal studentService.getGradebook

95
00:05:37,890 --> 00:05:41,970
and then m.addattribute, students comma college students.

96
00:05:41,970 --> 00:05:44,530
Again, just like the code that we wrote earlier.

97
00:05:44,530 --> 00:05:46,623
Just getting an updated list of students.

98
00:05:48,480 --> 00:05:51,423
And then I simply return the view name index.

99
00:05:56,700 --> 00:05:57,740
Okay. This looks pretty good.

100
00:05:57,740 --> 00:05:59,540
So let's go ahead and run this test.

101
00:06:06,090 --> 00:06:07,610
Awesome. So this test passed.

102
00:06:07,610 --> 00:06:09,540
So we have the functionality in place.

103
00:06:09,540 --> 00:06:11,610
We initially had a failing test up front.

104
00:06:11,610 --> 00:06:13,600
We added some code in our controller

105
00:06:13,600 --> 00:06:16,200
and now our test passed, so good example of TDD.

106
00:06:16,200 --> 00:06:17,903
I like it. Good job.

