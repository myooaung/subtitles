1
00:00:01,330 --> 00:00:02,640
Alright, so we're moving right along.

2
00:00:02,640 --> 00:00:04,670
So, let's go ahead and fix our failing test

3
00:00:04,670 --> 00:00:06,350
and we're going to implement the POST mapping

4
00:00:06,350 --> 00:00:07,540
in our GradebookController.

5
00:00:07,540 --> 00:00:11,640
And it'll make our failing tests go from red to green.

6
00:00:11,640 --> 00:00:12,890
All right, let's dive in.

7
00:00:18,150 --> 00:00:20,870
Let's move over here to our GradebookController.

8
00:00:23,319 --> 00:00:25,900
And we're going to add a new POST mapping.

9
00:00:25,900 --> 00:00:27,380
So let me zoom in here.

10
00:00:27,380 --> 00:00:28,830
So I'll add this POST mapping

11
00:00:30,170 --> 00:00:31,153
forward slash.

12
00:00:39,990 --> 00:00:44,907
And then we'll set up our method here to create the student

13
00:00:49,480 --> 00:00:51,810
and we'll read the data that's being passed across

14
00:00:51,810 --> 00:00:54,473
and so we'll read this data as a model attribute.

15
00:01:05,269 --> 00:01:07,620
And then we give a reference here to the model.

16
00:01:10,120 --> 00:01:12,270
And what spring will do in the background is that

17
00:01:12,270 --> 00:01:14,120
when those parameters come over

18
00:01:14,120 --> 00:01:16,850
then it'll actually map those parameters

19
00:01:16,850 --> 00:01:18,930
to a given college student.

20
00:01:18,930 --> 00:01:20,520
So the college student will be populated

21
00:01:20,520 --> 00:01:22,423
with those parameters coming across.

22
00:01:37,250 --> 00:01:39,260
All right, so let's swing back over into our test

23
00:01:39,260 --> 00:01:40,713
and let's run our test.

24
00:01:46,900 --> 00:01:49,760
And then we'll see that the test is running

25
00:01:49,760 --> 00:01:53,070
and that we have the assertion that we get the view index,

26
00:01:53,070 --> 00:01:54,070
the view name.

27
00:01:54,070 --> 00:01:56,080
But, that's not really a full test

28
00:01:56,080 --> 00:01:57,490
because we really haven't done anything

29
00:01:57,490 --> 00:01:58,763
with the database yet.

30
00:01:59,610 --> 00:02:01,740
Let's go ahead and write some code

31
00:02:01,740 --> 00:02:04,970
to kind of verify the student was added to the database

32
00:02:04,970 --> 00:02:08,803
and we can use the DAO to actually query the database.

33
00:02:11,570 --> 00:02:13,550
So I'll add a bit more here to this test

34
00:02:13,550 --> 00:02:15,200
cuz right now it's very basic.

35
00:02:15,200 --> 00:02:16,300
It's only checking the view name

36
00:02:16,300 --> 00:02:17,793
not checking any real data.

37
00:02:18,750 --> 00:02:20,656
I'll set up this CollegeStudent,

38
00:02:20,656 --> 00:02:24,743
verifyStudent = studentDao.findbyEmailAddress.

39
00:02:26,536 --> 00:02:28,686
And I give the email address of the student

40
00:02:39,130 --> 00:02:41,490
And I need the student DAO

41
00:02:41,490 --> 00:02:43,530
I don't have it in this test.

42
00:02:43,530 --> 00:02:46,050
So let me move up a bit to the top

43
00:02:46,050 --> 00:02:49,187
and let me simply auto wire in the student DAO.

44
00:02:50,340 --> 00:02:52,660
So this effectively gives me access to the database

45
00:02:52,660 --> 00:02:55,933
and I can querry the database for given students.

46
00:02:59,440 --> 00:03:00,823
I'll just make this private.

47
00:03:02,040 --> 00:03:02,873
Okay, great.

48
00:03:02,873 --> 00:03:04,260
So our DAO is auto wired.

49
00:03:04,260 --> 00:03:07,120
And so that takes care of that issue in the test.

50
00:03:07,120 --> 00:03:11,550
Now, let's perform an assertion, assertNotNull.

51
00:03:11,550 --> 00:03:13,960
So we'll check that verifystudent to make sure

52
00:03:13,960 --> 00:03:15,900
that this person is not null.

53
00:03:15,900 --> 00:03:17,410
If that data is in the database

54
00:03:17,410 --> 00:03:20,700
then we should get a valid object or a not null object.

55
00:03:20,700 --> 00:03:22,480
But it, in this case, if they couldn't find it

56
00:03:22,480 --> 00:03:23,720
then we'll get a null object.

57
00:03:23,720 --> 00:03:26,263
So we're simply asserting for not null.

58
00:03:39,050 --> 00:03:40,613
Now let's run our test again.

59
00:03:45,200 --> 00:03:47,390
And now this test failed.

60
00:03:47,390 --> 00:03:48,800
Okay, interesting.

61
00:03:48,800 --> 00:03:50,310
So we can scroll down a bit

62
00:03:50,310 --> 00:03:52,080
to the bottom and see why the test failed

63
00:03:52,080 --> 00:03:54,640
It said the student should be found,

64
00:03:54,640 --> 00:03:57,300
expected not null but effectively

65
00:03:57,300 --> 00:03:59,100
that object was null.

66
00:03:59,100 --> 00:04:00,270
And the reason that it fails

67
00:04:00,270 --> 00:04:02,850
is because our controller method doesn't really do anything.

68
00:04:02,850 --> 00:04:04,780
I mean, look at the code, our controller method

69
00:04:04,780 --> 00:04:06,820
all it does is simply return index.

70
00:04:06,820 --> 00:04:08,500
It does nothing with the service,

71
00:04:08,500 --> 00:04:11,010
does nothing with that student that's being passed in.

72
00:04:11,010 --> 00:04:12,560
Alright, well, we can fix that.

73
00:04:17,630 --> 00:04:18,860
So let's use our student service

74
00:04:18,860 --> 00:04:20,959
and let's call this method create student.

75
00:04:28,800 --> 00:04:31,200
And then we pass in the information for that student

76
00:04:31,200 --> 00:04:33,540
three parameters, the first name, last name and email.

77
00:04:33,540 --> 00:04:34,940
And we can retrieve all of that

78
00:04:34,940 --> 00:04:37,640
from this college student para that's being passed in.

79
00:04:45,710 --> 00:04:46,880
Alright so this looks pretty good.

80
00:04:46,880 --> 00:04:49,143
First name, last name, email.

81
00:04:56,430 --> 00:04:57,640
Alright, so now that's in place

82
00:04:57,640 --> 00:04:59,510
now let's kind of swing back over

83
00:04:59,510 --> 00:05:01,360
and let's run our test one more time.

84
00:05:04,010 --> 00:05:06,000
And now yes, we have some success

85
00:05:06,000 --> 00:05:08,110
so we can see that this test passed.

86
00:05:08,110 --> 00:05:09,820
So now we've verified

87
00:05:09,820 --> 00:05:12,020
that we can actually create the student

88
00:05:12,020 --> 00:05:14,220
put them in the database and then verify that

89
00:05:14,220 --> 00:05:16,240
hey, we actually have that student

90
00:05:16,240 --> 00:05:18,020
in the database with our test.

91
00:05:18,020 --> 00:05:18,880
So this is really good.

92
00:05:18,880 --> 00:05:19,890
I like it.

93
00:05:19,890 --> 00:05:20,800
Good job.

94
00:05:20,800 --> 00:05:21,633
My friend.

