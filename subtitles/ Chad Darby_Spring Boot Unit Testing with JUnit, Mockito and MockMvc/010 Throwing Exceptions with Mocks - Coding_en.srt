1
00:00:01,410 --> 00:00:03,790
Okay, so let's go ahead and move in here

2
00:00:03,790 --> 00:00:06,303
and let's go ahead and add a new test.

3
00:00:10,130 --> 00:00:11,330
And I'll set up a new test

4
00:00:11,330 --> 00:00:13,953
for throw runtime exception.

5
00:00:32,658 --> 00:00:33,810
In the first line, I'll go ahead

6
00:00:33,810 --> 00:00:35,740
and retrieve a college student

7
00:00:35,740 --> 00:00:37,393
from the application context,

8
00:00:45,930 --> 00:00:49,033
and I'll set up the expectation to throw an exception.

9
00:01:01,910 --> 00:01:04,970
And this line of code means that we're going to an exception

10
00:01:04,970 --> 00:01:06,239
when a given method is called.

11
00:01:06,239 --> 00:01:09,260
When we make a call to check, no,

12
00:01:09,260 --> 00:01:11,893
we'll actually throw a new runtime exception.

13
00:01:14,700 --> 00:01:16,500
And then we'll perform an assertion.

14
00:01:36,950 --> 00:01:38,200
And here's where we assert

15
00:01:38,200 --> 00:01:39,910
that the exception was actually thrown

16
00:01:39,910 --> 00:01:43,430
for that given method, call app service check no,

17
00:01:43,430 --> 00:01:44,790
and remember the application service

18
00:01:44,790 --> 00:01:47,000
has a dependency on the application DAO,

19
00:01:47,000 --> 00:01:49,900
and the app service simply delegates the calls to the DAO.

20
00:01:52,000 --> 00:01:53,290
All right, let's zoom out a bit

21
00:01:53,290 --> 00:01:55,140
and let's go ahead and run this test,

22
00:01:57,190 --> 00:02:01,130
and oops I have a syntax era, semicolon expected.

23
00:02:01,130 --> 00:02:04,453
Let me go ahead and add that semicolon at the end of line 93.

24
00:02:06,820 --> 00:02:09,669
Save that and now let's run it again and okay, great.

25
00:02:09,669 --> 00:02:11,440
We pass the syntax error,

26
00:02:11,440 --> 00:02:14,450
and the actual unit test passed also.

27
00:02:14,450 --> 00:02:15,810
So good job.

28
00:02:15,810 --> 00:02:16,833
Woo, scary.

29
00:02:18,420 --> 00:02:20,140
Now let's go ahead and do one more thing here.

30
00:02:20,140 --> 00:02:21,430
I'd like to verify

31
00:02:21,430 --> 00:02:25,180
that a given method was called X number of times.

32
00:02:25,180 --> 00:02:27,720
So I want to verify on the application DAO

33
00:02:27,720 --> 00:02:30,093
that the check no method was called one time.

34
00:02:33,260 --> 00:02:35,060
All right, go ahead and run this test,

35
00:02:35,060 --> 00:02:37,680
and then we see that this test passes as desired.

36
00:02:37,680 --> 00:02:38,513
Good job.

37
00:02:46,460 --> 00:02:49,460
Let's go ahead and move forward and let's add one more test.

38
00:02:50,550 --> 00:02:52,930
And this will be a test for making multiple calls

39
00:02:52,930 --> 00:02:55,653
or making consecutive calls to a given method.

40
00:03:25,460 --> 00:03:27,810
Let's go ahead and set up our expectation here.

41
00:03:30,210 --> 00:03:33,390
When we make a call to application DAO check null,

42
00:03:33,390 --> 00:03:35,480
then throw exception.

43
00:03:35,480 --> 00:03:38,080
So this is for the first call for that given method,

44
00:03:41,340 --> 00:03:46,340
then return a given string here, do not throw exception.

45
00:03:50,990 --> 00:03:52,480
Now again, for the first call,

46
00:03:52,480 --> 00:03:53,510
we're going to throw an exception,

47
00:03:53,510 --> 00:03:54,820
for the consecutive calls,

48
00:03:54,820 --> 00:03:56,700
do not throw an and just return a string.

49
00:03:56,700 --> 00:03:58,430
This could be a string in the object,

50
00:03:58,430 --> 00:04:01,210
whatever that given method can return.

51
00:04:01,210 --> 00:04:02,043
Okay, that looks good.

52
00:04:02,043 --> 00:04:03,110
That's our expectation.

53
00:04:04,800 --> 00:04:07,490
Now let's go ahead and do our assertion.

54
00:04:07,490 --> 00:04:09,480
Let's make our first method call

55
00:04:11,100 --> 00:04:12,630
and we know that the first method call

56
00:04:12,630 --> 00:04:14,250
should return an exception.

57
00:04:14,250 --> 00:04:15,750
So we say assert throws

58
00:04:18,880 --> 00:04:20,890
and we place this code inside of lambda,

59
00:04:20,890 --> 00:04:22,440
application service check null.

60
00:04:24,850 --> 00:04:29,000
That's the first call and now we'll do another assertion,

61
00:04:31,930 --> 00:04:33,983
actually making another method call here.

62
00:04:38,390 --> 00:04:40,320
We assert equals that string

63
00:04:41,600 --> 00:04:43,890
and then we make that second method call,

64
00:04:43,890 --> 00:04:46,130
application service check null,

65
00:04:46,130 --> 00:04:47,383
and pass in the value.

66
00:04:49,270 --> 00:04:51,870
For the second call, it should return just a string.

67
00:04:53,260 --> 00:04:56,763
And we'll also verify method was called two times.

68
00:05:04,850 --> 00:05:05,810
Okay, this looks pretty good.

69
00:05:05,810 --> 00:05:09,670
Let's go ahead and run the test and excellent.

70
00:05:09,670 --> 00:05:12,310
So we see that this test passed as desired.

71
00:05:12,310 --> 00:05:13,610
So this is a really good example.

72
00:05:13,610 --> 00:05:16,220
So we showed one example of simply making a call,

73
00:05:16,220 --> 00:05:18,157
a single call for a given exception,

74
00:05:18,157 --> 00:05:20,670
and we also saw an example of making consecutive calls

75
00:05:20,670 --> 00:05:22,770
where the first call will throw an exception

76
00:05:22,770 --> 00:05:25,040
and the remaining calls will not throw exceptions.

77
00:05:25,040 --> 00:05:28,233
So I like to say good job, my friend.

