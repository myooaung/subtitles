WEBVTT
1
00:00:01.100 --> 00:00:03.160
We're making some really good progress.

2
00:00:03.160 --> 00:00:05.100
I'd like to update our test.

3
00:00:05.100 --> 00:00:07.310
For student grades, I'd like to verify

4
00:00:07.310 --> 00:00:09.830
that we have a specific number of grades.

5
00:00:09.830 --> 00:00:10.890
Currently in our test,

6
00:00:10.890 --> 00:00:13.110
we simply check that grades are available,

7
00:00:13.110 --> 00:00:15.100
but I'd like to see if we have a specific number,

8
00:00:15.100 --> 00:00:17.230
like one, two, or three, or four.

9
00:00:17.230 --> 00:00:19.200
Now, let's go ahead and swing into our IDE,

10
00:00:19.200 --> 00:00:20.550
and let's make this update.

11
00:00:22.980 --> 00:00:25.563
Now, this is in our student and grade service test,

12
00:00:28.780 --> 00:00:30.340
and we had this test method,

13
00:00:30.340 --> 00:00:31.173
down here at the bottom,

14
00:00:31.173 --> 00:00:33.110
called, "Create grade service".

15
00:00:33.110 --> 00:00:34.770
Currently, now, like I said earlier,

16
00:00:34.770 --> 00:00:37.320
we simply verified the grades exist,

17
00:00:37.320 --> 00:00:39.680
but we don't really know how many grades that we have.

18
00:00:39.680 --> 00:00:41.980
So, I'd like to go ahead and make this update.

19
00:00:46.090 --> 00:00:50.300
And, what I can do, is I can simply cast the iterable

20
00:00:50.300 --> 00:00:51.753
to a collection.

21
00:01:06.970 --> 00:01:08.410
Currently math grades is an iterable,

22
00:01:08.410 --> 00:01:10.090
we'll cast it to a collection.

23
00:01:10.090 --> 00:01:11.780
Once we cast it to a collection,

24
00:01:11.780 --> 00:01:13.860
then I can make use of the dot size method

25
00:01:13.860 --> 00:01:16.880
to find out how many items are in that collection.

26
00:01:16.880 --> 00:01:18.360
Here I can check for size of two,

27
00:01:18.360 --> 00:01:20.443
so, I'm checking for two math grades.

28
00:01:23.740 --> 00:01:25.297
Now, you may wonder,

29
00:01:25.297 --> 00:01:28.470
"Well, why did we check for size of two?"

30
00:01:28.470 --> 00:01:31.100
Because, in this example here, for this test,

31
00:01:31.100 --> 00:01:34.010
we only see ourselves entering one grade.

32
00:01:34.010 --> 00:01:36.250
Remember, earlier, we made use of that

33
00:01:36.250 --> 00:01:39.140
before each to insert sample data.

34
00:01:39.140 --> 00:01:42.230
So, the before each already added one grade

35
00:01:42.230 --> 00:01:43.570
for a given subject,

36
00:01:43.570 --> 00:01:45.390
and then in this method here,

37
00:01:45.390 --> 00:01:47.240
we're also adding another grade.

38
00:01:47.240 --> 00:01:49.710
So, that's how we make it to two grades.

39
00:01:49.710 --> 00:01:51.370
All right, so don't let that confuse you.

40
00:01:51.370 --> 00:01:53.863
That's the main reason for checking for two.

41
00:01:57.420 --> 00:01:58.780
Now, I can do a similar thing here

42
00:01:58.780 --> 00:02:01.053
for science grades and history grades.

43
00:02:48.087 --> 00:02:49.110
Okay, this code looks pretty good.

44
00:02:49.110 --> 00:02:50.713
Let's go ahead and run our test.

45
00:02:59.440 --> 00:03:02.203
And, excellent. Our test passed successfully.

