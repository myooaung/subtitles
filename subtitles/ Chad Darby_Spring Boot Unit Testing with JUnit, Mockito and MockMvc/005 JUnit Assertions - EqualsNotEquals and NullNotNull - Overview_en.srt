1
00:00:01,210 --> 00:00:02,570
All right, so just moving along

2
00:00:02,570 --> 00:00:03,870
with our development process.

3
00:00:03,870 --> 00:00:06,240
In this video, we'll cover steps two, three, and four.

4
00:00:06,240 --> 00:00:08,840
Creating the test package, creating the unit test,

5
00:00:08,840 --> 00:00:10,543
and also running the unit test.

6
00:00:21,820 --> 00:00:23,560
I go ahead and create my test package here.

7
00:00:23,560 --> 00:00:25,150
And first off, I'll just take a look

8
00:00:25,150 --> 00:00:27,580
at what our main package name is,

9
00:00:27,580 --> 00:00:30,240
and that's com.luv2code.junitdemo.

10
00:00:30,240 --> 00:00:34,930
So for my test package, I'll move underneath test, java,

11
00:00:34,930 --> 00:00:36,903
and then I'll create a new package.

12
00:00:39,480 --> 00:00:40,590
And the new package name,

13
00:00:40,590 --> 00:00:43,900
I'll call it com.luv2code.junitdemo.

14
00:00:43,900 --> 00:00:45,360
Again, we're following the convention

15
00:00:45,360 --> 00:00:48,810
where our test packages are the same as our main packages.

16
00:00:48,810 --> 00:00:49,940
Not a hard requirement,

17
00:00:49,940 --> 00:00:52,523
but that's the normal convention that you'll see.

18
00:00:54,780 --> 00:00:57,080
Now in step three, we'll create our unit test.

19
00:01:06,920 --> 00:01:08,911
So on our test package that we have here

20
00:01:08,911 --> 00:01:13,911
we'll create this new class, called DemoUtilsTest.

21
00:01:22,030 --> 00:01:24,170
And if they prompt you about adding something to Git,

22
00:01:24,170 --> 00:01:25,623
you can simply hit Cancel.

23
00:01:32,253 --> 00:01:34,930
And with our test classes, they don't have to be public.

24
00:01:34,930 --> 00:01:36,470
So you can simply remove the public.

25
00:01:36,470 --> 00:01:37,480
You can leave it there if you'd like,

26
00:01:37,480 --> 00:01:41,623
but in general, your test classes are not public.

27
00:01:46,760 --> 00:01:50,170
So let's take a quick look at the DemoUtils class.

28
00:01:50,170 --> 00:01:52,280
That's the code that we're going to test.

29
00:01:52,280 --> 00:01:57,023
And let's move down to this add method.

30
00:02:02,810 --> 00:02:04,290
And we currently have this add method,

31
00:02:04,290 --> 00:02:08,470
takes two numbers that returns the sum of those numbers.

32
00:02:08,470 --> 00:02:10,620
And this is very basic, very simple,

33
00:02:10,620 --> 00:02:12,830
but what I'd like to do is to make this thing really works

34
00:02:12,830 --> 00:02:15,940
is that I want to kind of break it on purpose, all right?

35
00:02:15,940 --> 00:02:19,730
So I'll say, the sum is a plus b plus b.

36
00:02:19,730 --> 00:02:21,360
Again, I'm breaking it on purpose,

37
00:02:21,360 --> 00:02:24,300
because when I run my test I want to see a failing test

38
00:02:24,300 --> 00:02:26,700
and then I'll come back and fix the actual code.

39
00:02:28,350 --> 00:02:32,193
So I simply made this update here to break it on purpose.

40
00:02:35,800 --> 00:02:38,937
Now let's swing over to our test, DemoUtilsTest,

41
00:02:38,937 --> 00:02:41,650
and I'll create a new method here.

42
00:02:52,768 --> 00:02:54,880
I'll call the method testEqualsAndNotEquals,

43
00:02:54,880 --> 00:02:57,963
I'll annotate the @Test annotation.

44
00:03:07,070 --> 00:03:10,400
And remember, the test method can have any name.

45
00:03:10,400 --> 00:03:13,513
As long as we have the test annotation, then we're A-okay.

46
00:03:21,090 --> 00:03:22,910
I'll go through and perform the setup here,

47
00:03:22,910 --> 00:03:25,810
so I'll create an instance of the class that I want to test.

48
00:03:29,320 --> 00:03:31,507
And then I'll perform an assertEquals.

49
00:03:32,740 --> 00:03:34,973
I'll pass in the expected value of six.

50
00:03:36,910 --> 00:03:40,860
And I'll call the method that we're testing,

51
00:03:40,860 --> 00:03:44,570
demoUtils.add, two, comma, four.

52
00:03:44,570 --> 00:03:47,560
And I'll also give a failure message

53
00:03:47,560 --> 00:03:49,253
in the event that the test fails.

54
00:03:51,310 --> 00:03:53,360
Just swing over here and fix the imports.

55
00:04:00,150 --> 00:04:02,670
And there we go. So that's for the assertequals.

56
00:04:02,670 --> 00:04:05,207
And I can do a similar thing here for notEquals.

57
00:04:06,150 --> 00:04:09,370
So just a quick copy-paste here, assertNotEquals.

58
00:04:11,630 --> 00:04:16,630
And then I'll say six, and then I'll add one, comma, nine.

59
00:04:24,890 --> 00:04:27,713
So one plus nine must not be six.

60
00:04:36,210 --> 00:04:38,510
All righty, so this code looks pretty good

61
00:04:38,510 --> 00:04:40,260
and it's ready to go.

62
00:04:40,260 --> 00:04:41,453
I'm ready to test it.

63
00:04:48,050 --> 00:04:50,453
So here's step four, running our unit test.

64
00:05:07,350 --> 00:05:10,010
And our test failed.

65
00:05:10,010 --> 00:05:11,420
And we know why it failed, right?

66
00:05:11,420 --> 00:05:13,630
Because we broke the code on purpose.

67
00:05:13,630 --> 00:05:16,580
But it failed here, two plus four must be six.

68
00:05:16,580 --> 00:05:19,483
Expected, six. The actual was 10.

69
00:05:21,060 --> 00:05:22,670
And the reason is because of the code

70
00:05:22,670 --> 00:05:24,210
that we broke earlier, right?

71
00:05:24,210 --> 00:05:28,010
We added the a plus b plus b. That's why this failed.

72
00:05:28,010 --> 00:05:29,310
Let's go ahead and fix it.

73
00:05:32,830 --> 00:05:34,483
And it's just a plus b.

74
00:05:39,370 --> 00:05:41,450
Excellent, excellent. This looks good.

75
00:05:41,450 --> 00:05:44,573
So now when I swing back over, I can run the test again.

76
00:05:45,490 --> 00:05:47,643
So I can rerun DemoUtils.

77
00:05:50,550 --> 00:05:53,240
Test. And there we go, all green.

78
00:05:53,240 --> 00:05:56,193
So everything worked out as desired. Great.

79
00:06:12,430 --> 00:06:16,150
Now I'd also like to test another one of my methods here.

80
00:06:16,150 --> 00:06:19,690
And I want to test this method here called checkNull.

81
00:06:19,690 --> 00:06:21,620
So they pass in an object.

82
00:06:21,620 --> 00:06:24,550
If it's notNull, we return the object.

83
00:06:24,550 --> 00:06:27,173
If it is null we simply return null.

84
00:06:30,580 --> 00:06:32,150
But just like we did earlier,

85
00:06:32,150 --> 00:06:34,480
let's go ahead and break it on purpose.

86
00:06:34,480 --> 00:06:38,223
So this method's going to return null all the time.

87
00:06:39,160 --> 00:06:40,830
I'll simply just do a return null.

88
00:06:40,830 --> 00:06:42,720
So regardless of whatever you pass in,

89
00:06:42,720 --> 00:06:43,920
I'll simply return null.

90
00:06:49,610 --> 00:06:52,200
And now let's go ahead and write some tests

91
00:06:52,200 --> 00:06:54,123
for testing null and notNull.

92
00:07:19,026 --> 00:07:22,443
And I'll just copy some code from up top.

93
00:07:42,940 --> 00:07:44,480
And then I'll set up some variables here

94
00:07:44,480 --> 00:07:46,763
for string one and string two.

95
00:07:52,229 --> 00:07:54,130
And I'd like to do is set up some setups and assertions here

96
00:07:54,130 --> 00:07:58,843
to check to see if string one's null, string two notNull.

97
00:08:00,960 --> 00:08:02,360
So I'll have a certain null.

98
00:08:10,362 --> 00:08:12,560
And I'll call the appropriate method.

99
00:08:12,560 --> 00:08:14,513
So demoUtils.checkNull.

100
00:08:16,600 --> 00:08:17,673
Pass in string one.

101
00:08:21,870 --> 00:08:24,543
And my error message in case the test fails.

102
00:08:26,270 --> 00:08:28,340
I'll do a quick fix here on the imports

103
00:08:28,340 --> 00:08:31,530
and then I'll do a similar thing here for checking notNull.

104
00:08:39,780 --> 00:08:41,393
So I'll pass in string two.

105
00:08:43,508 --> 00:08:45,483
And then the object should not be null.

106
00:08:51,610 --> 00:08:53,423
Let's go ahead and run this test.

107
00:09:01,100 --> 00:09:03,530
And one of the tests passed, but one failed.

108
00:09:03,530 --> 00:09:07,743
So this testNullAndNotNull, that test failed.

109
00:09:12,630 --> 00:09:14,580
So here, the object should not be null.

110
00:09:15,700 --> 00:09:20,623
We expected a notNull, but we didn't get it.

111
00:09:26,220 --> 00:09:27,730
So we looked at the code.

112
00:09:27,730 --> 00:09:30,040
Remember, we broke it on purpose, so let's fix it.

113
00:09:30,040 --> 00:09:33,220
Let's remove the return null for everything.

114
00:09:33,220 --> 00:09:36,320
And let's add our conditional logic back in place.

115
00:09:36,320 --> 00:09:37,480
There are a number of different ways

116
00:09:37,480 --> 00:09:39,760
you can write this method to make it simpler and easier,

117
00:09:39,760 --> 00:09:41,600
but that's not the real point here.

118
00:09:41,600 --> 00:09:43,100
We're simply just going through the mechanics

119
00:09:43,100 --> 00:09:44,173
of unit testing.

120
00:09:45,360 --> 00:09:46,600
But we've made that change here

121
00:09:46,600 --> 00:09:48,313
and we can run the test again.

122
00:09:53,970 --> 00:09:55,390
Okay, this looks really good.

123
00:09:55,390 --> 00:09:57,873
So we have our test up and running. Good job.

