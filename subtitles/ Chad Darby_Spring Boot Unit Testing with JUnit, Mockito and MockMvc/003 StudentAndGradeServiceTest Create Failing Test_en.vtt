WEBVTT
1
00:00:01.399 --> 00:00:02.232
In this video,

2
00:00:02.232 --> 00:00:04.150
we'll cover the TDD for the service and the DAO.

3
00:00:07.380 --> 00:00:09.530
Here's our final architecture as far as the application

4
00:00:09.530 --> 00:00:10.590
that we're going to build.

5
00:00:10.590 --> 00:00:11.423
And what we'll do is,

6
00:00:11.423 --> 00:00:14.500
we'll make use of TDD to build out the service and the DAOs.

7
00:00:14.500 --> 00:00:16.040
So for our student grade service

8
00:00:16.040 --> 00:00:18.390
we'll build this out using test driven development,

9
00:00:18.390 --> 00:00:19.730
and also for the DAOs,

10
00:00:19.730 --> 00:00:20.570
we'll build those out,

11
00:00:20.570 --> 00:00:22.143
using test driven development.

12
00:00:25.410 --> 00:00:28.480
Now for our DAOs, we'll make you so Spring Data JPA,

13
00:00:28.480 --> 00:00:30.790
basically a collection of Crud repositories.

14
00:00:30.790 --> 00:00:31.750
And then for our database,

15
00:00:31.750 --> 00:00:33.320
we'll make use of the H Two Database,

16
00:00:33.320 --> 00:00:36.040
it's an in-memory, embedded database.

17
00:00:36.040 --> 00:00:38.740
The in-memory, embedded databases are good for testing

18
00:00:38.740 --> 00:00:40.140
because you can quickly set them up

19
00:00:40.140 --> 00:00:41.310
and tear them down.

20
00:00:41.310 --> 00:00:42.950
Also, there's no network latency

21
00:00:42.950 --> 00:00:44.610
so the test will run faster

22
00:00:44.610 --> 00:00:47.410
and it minimizes any leftover data that's in the database.

23
00:00:47.410 --> 00:00:50.810
So just a small little embedded database that we can use,

24
00:00:50.810 --> 00:00:51.643
set it up,

25
00:00:51.643 --> 00:00:52.862
use it,

26
00:00:52.862 --> 00:00:53.695
throw it away and so on.

27
00:00:53.695 --> 00:00:56.010
And this is a common practice for integration testing,

28
00:00:56.010 --> 00:00:57.980
is by making use of these H Two,

29
00:00:57.980 --> 00:00:59.983
in-memory, embedded databases.

30
00:01:01.310 --> 00:01:02.300
All righty, this looks pretty good.

31
00:01:02.300 --> 00:01:05.250
Let's go ahead and move into our IDE and let's get started.

32
00:01:08.800 --> 00:01:11.650
Okay, so let's go ahead and move in here.

33
00:01:11.650 --> 00:01:15.500
And what I like to do is create the new test directory.

34
00:01:15.500 --> 00:01:17.770
So under source, choose directory

35
00:01:22.280 --> 00:01:26.280
and we'll select the test/Java directory.

36
00:01:26.280 --> 00:01:29.313
It's a Maven source directory for all of our test classes.

37
00:01:33.590 --> 00:01:36.690
And for test Java, we'll create a new package

38
00:01:42.540 --> 00:01:45.923
and we'll name the package com.luv2code.springmvc.

39
00:01:55.752 --> 00:01:57.160
And this matches with the actual package name

40
00:01:57.160 --> 00:01:58.523
we have for our main code.

41
00:02:00.520 --> 00:02:01.560
And outside of this package,

42
00:02:01.560 --> 00:02:03.810
let's go ahead and create our new test class.

43
00:02:06.950 --> 00:02:08.541
And the name of this class will be

44
00:02:08.541 --> 00:02:10.791
StudentAndGradeServiceTest.

45
00:02:19.730 --> 00:02:21.990
I may expand the window here for a second

46
00:02:21.990 --> 00:02:24.233
and up top I want to add some annotations.

47
00:02:29.060 --> 00:02:32.550
The first annotation I use is a TestPropertySource.

48
00:02:32.550 --> 00:02:35.950
So this will allowed me to load properties during testing

49
00:02:35.950 --> 00:02:39.040
and I'll reference application.properties.

50
00:02:39.040 --> 00:02:40.520
So right now I'm just going to use my regular

51
00:02:40.520 --> 00:02:41.720
application.properties

52
00:02:41.720 --> 00:02:43.740
and then in future videos we'll change it up

53
00:02:43.740 --> 00:02:45.460
and we'll use different files for this

54
00:02:45.460 --> 00:02:47.320
but we'll just kind of start here for now.

55
00:02:47.320 --> 00:02:48.700
And then I'll also make use of the annotation

56
00:02:48.700 --> 00:02:50.233
for SpringBootTest.

57
00:02:52.370 --> 00:02:55.263
And now let's move in here and let's just add a basic test.

58
00:02:56.572 --> 00:02:58.772
And this will be for creating studentService

59
00:03:00.700 --> 00:03:02.340
and at the moment, I'll just kind of leave it blank.

60
00:03:02.340 --> 00:03:03.610
I'll just run this test,

61
00:03:03.610 --> 00:03:06.454
just to make sure I have everything set up properly

62
00:03:06.454 --> 00:03:07.553
and all the configs in place.

63
00:03:17.560 --> 00:03:19.510
All righty, so that test ran successfully.

64
00:03:19.510 --> 00:03:20.610
Again, there's nothing in here,

65
00:03:20.610 --> 00:03:21.670
I just wanted to make sure I have

66
00:03:21.670 --> 00:03:25.040
all of my items lined up accordingly.

67
00:03:25.040 --> 00:03:26.390
All right, so this is good.

68
00:03:29.246 --> 00:03:30.530
And now let's go ahead and start writing this in the code,

69
00:03:30.530 --> 00:03:31.750
this whole test driven development.

70
00:03:31.750 --> 00:03:34.360
So I'll allow the test to kind of drive my design

71
00:03:34.360 --> 00:03:36.793
or the methods in classes that I'll use here.

72
00:03:38.540 --> 00:03:40.070
So I'd like to use the studentService

73
00:03:40.070 --> 00:03:41.333
and create a new student.

74
00:03:47.670 --> 00:03:49.883
So give first name and last name and email.

75
00:04:02.895 --> 00:04:03.890
And then once I've created a student,

76
00:04:03.890 --> 00:04:06.440
then I'd like to retrieve the student from the DAO.

77
00:04:10.550 --> 00:04:13.398
I'll say, studentDAO.findByEmailAddress,

78
00:04:13.398 --> 00:04:16.565
and I'd give the actual email address.

79
00:04:35.326 --> 00:04:36.900
And then as far as my test or assertion here

80
00:04:36.900 --> 00:04:40.840
I'll assert, the expected is the email address,

81
00:04:40.840 --> 00:04:42.623
student.getEmailAddress

82
00:04:44.030 --> 00:04:45.530
make sure those two are equal.

83
00:04:52.040 --> 00:04:54.240
If that works out, then this test will pass.

84
00:04:56.100 --> 00:04:58.863
But now notice here, I have a lot of red in place,

85
00:04:59.810 --> 00:05:03.640
mainly because the two items, studentService and studentDAO

86
00:05:03.640 --> 00:05:06.390
we actually, we haven't even created that code yet.

87
00:05:06.390 --> 00:05:08.070
And so this is the whole test driven approach,

88
00:05:08.070 --> 00:05:10.430
we'll allow the test to kind of drive our development.

89
00:05:10.430 --> 00:05:11.410
So what I'll do for now is,

90
00:05:11.410 --> 00:05:13.200
I'll kind of comment out those two lines

91
00:05:13.200 --> 00:05:14.290
and I'll just do it one at a time.

92
00:05:14.290 --> 00:05:16.230
I'll just start here with studentService first

93
00:05:16.230 --> 00:05:19.240
and then I'll work through trying to get this resolved.

94
00:05:19.240 --> 00:05:22.020
But if I were to run the test here, as is,

95
00:05:22.020 --> 00:05:23.970
now this will fail because I have a compilation error

96
00:05:23.970 --> 00:05:25.780
because it can't find studentService.

97
00:05:25.780 --> 00:05:28.530
So we'll actually need to create a studentService class

98
00:05:28.530 --> 00:05:30.570
and then autowire it into this test and then use it.

99
00:05:30.570 --> 00:05:32.340
But this is kind of the first approach, right?

100
00:05:32.340 --> 00:05:33.690
Write a failing test first,

101
00:05:33.690 --> 00:05:34.680
and then we write code

102
00:05:34.680 --> 00:05:37.373
or refactor code to make the test pass.

