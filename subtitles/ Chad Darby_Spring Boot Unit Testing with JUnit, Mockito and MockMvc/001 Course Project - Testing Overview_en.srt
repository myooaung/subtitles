1
00:00:00,935 --> 00:00:02,250
In this video, we'll look

2
00:00:02,250 --> 00:00:04,763
at our course project and a testing overview.

3
00:00:08,050 --> 00:00:11,550
We'll start with an existing student grade book application.

4
00:00:11,550 --> 00:00:13,470
The app was created by a previous employee

5
00:00:13,470 --> 00:00:16,530
but it is unfinished. Yikes.

6
00:00:16,530 --> 00:00:19,390
Our job is to add remaining functionality to save data

7
00:00:19,390 --> 00:00:23,433
in the database and also add unit test and integration test.

8
00:00:26,920 --> 00:00:30,080
Now, let's talk about the student grade book application.

9
00:00:30,080 --> 00:00:31,180
This application will be used

10
00:00:31,180 --> 00:00:33,960
by an instructor to keep track of grades for a student.

11
00:00:33,960 --> 00:00:35,610
The grades are tracked for the subjects

12
00:00:35,610 --> 00:00:37,620
history, science and math.

13
00:00:37,620 --> 00:00:39,050
And the instructor can add grades

14
00:00:39,050 --> 00:00:40,900
for a student for a specific subject.

15
00:00:41,750 --> 00:00:43,240
And here's a little screenshot of the app

16
00:00:43,240 --> 00:00:45,863
and I'll show you a demo of the app in a second.

17
00:00:48,950 --> 00:00:51,570
Now here's the technical stack for the application.

18
00:00:51,570 --> 00:00:55,156
Spring Boot, Spring Data JPA, Spring MVC,

19
00:00:55,156 --> 00:00:59,010
Thymeleaf views, CSS and JavaScript.

20
00:00:59,010 --> 00:01:01,780
Now the Spring Data JPA portion it's listed

21
00:01:01,780 --> 00:01:03,140
in the Maven pom file.

22
00:01:03,140 --> 00:01:04,236
However, the previous developer

23
00:01:04,236 --> 00:01:06,560
didn't actually do any of the database work.

24
00:01:06,560 --> 00:01:08,547
We'll actually focus on doing database work

25
00:01:08,547 --> 00:01:10,460
and we'll also add additional functionality

26
00:01:10,460 --> 00:01:12,110
as we go through the application.

27
00:01:17,710 --> 00:01:19,680
Now here's a quick demo of the application.

28
00:01:19,680 --> 00:01:22,000
This is the final version of the application.

29
00:01:22,000 --> 00:01:24,421
So we have all the database stuff working behind the scenes

30
00:01:24,421 --> 00:01:26,586
but I want to simply show you the app real quick

31
00:01:26,586 --> 00:01:30,270
just so you can understand how the application works.

32
00:01:30,270 --> 00:01:32,970
And we can go ahead and add some sample students here.

33
00:01:35,780 --> 00:01:37,240
So I'll add something for myself.

34
00:01:37,240 --> 00:01:38,683
Also add something for Eric.

35
00:01:44,180 --> 00:01:47,160
We can select a student and then we can go in

36
00:01:47,160 --> 00:01:50,650
and we can actually add some grades for a given subject.

37
00:01:50,650 --> 00:01:53,940
So here I'm adding grades for a math assignment for myself

38
00:01:56,870 --> 00:01:58,130
and then we can do a similar thing here

39
00:01:58,130 --> 00:02:00,010
for science assignments.

40
00:02:00,010 --> 00:02:02,070
So we're just adding grades and then notice here

41
00:02:02,070 --> 00:02:04,530
it'll kind of, it keeps track of the average

42
00:02:04,530 --> 00:02:07,470
the overall average for the grades for a given subject.

43
00:02:07,470 --> 00:02:09,320
Then a similar thing here for history assignments.

44
00:02:09,320 --> 00:02:11,290
So effectively here for a given student

45
00:02:11,290 --> 00:02:14,283
we can track grades for a given subject.

46
00:02:20,520 --> 00:02:23,183
We can also go through and remove grades if we needed to.

47
00:02:29,490 --> 00:02:30,830
We can go into home and we can just drill

48
00:02:30,830 --> 00:02:33,020
down on a given student and check their grades and so on.

49
00:02:33,020 --> 00:02:35,800
So my previous grades are still there and we can go through

50
00:02:35,800 --> 00:02:38,053
and we can add some grades here for Eric.

51
00:02:49,020 --> 00:02:50,890
All right. So that's kind of the basic layout here

52
00:02:50,890 --> 00:02:53,030
for this application for our GradeBook app.

53
00:02:53,030 --> 00:02:54,802
And so we have some of the functionality in place

54
00:02:54,802 --> 00:02:57,530
but we'll have to add additional functionality to

55
00:02:57,530 --> 00:02:58,750
allow it to save to the database.

56
00:02:58,750 --> 00:02:59,984
So this is kind of like a demo of the

57
00:02:59,984 --> 00:03:02,110
of the actual end result.

58
00:03:02,110 --> 00:03:03,260
All righty, good stuff.

59
00:03:06,070 --> 00:03:06,903
Okay, great.

60
00:03:06,903 --> 00:03:08,450
So that was a good demo of the application.

61
00:03:08,450 --> 00:03:11,313
Now let's look at the existing code behind the scenes.

62
00:03:12,400 --> 00:03:14,280
We have controller, model and a view.

63
00:03:14,280 --> 00:03:16,780
So this kind of follows the standard Spring MVC approach

64
00:03:16,780 --> 00:03:18,760
spring model view controller.

65
00:03:18,760 --> 00:03:20,363
Taking a look at the controller, we have this

66
00:03:20,363 --> 00:03:21,770
GradeBookController.java.

67
00:03:21,770 --> 00:03:23,890
At the moment it's a very simple class.

68
00:03:23,890 --> 00:03:25,840
We'll see the code for it in a second.

69
00:03:25,840 --> 00:03:27,370
And then we also have the model.

70
00:03:27,370 --> 00:03:29,070
So the models of collection of classes

71
00:03:29,070 --> 00:03:31,980
that we'll make use of, CollegeStudentGrade, so on.

72
00:03:31,980 --> 00:03:33,970
I'll talk about those in a bit.

73
00:03:33,970 --> 00:03:35,740
And then we also have our Thymeleaf views.

74
00:03:35,740 --> 00:03:37,889
So we have the main index.html page

75
00:03:37,889 --> 00:03:39,421
a student information page

76
00:03:39,421 --> 00:03:42,463
and also supporting CSS and JavaScript code.

77
00:03:46,150 --> 00:03:46,983
Now let's take a look at the

78
00:03:46,983 --> 00:03:49,197
existing code for the model classes.

79
00:03:49,197 --> 00:03:52,360
We'll have this interface for grade, we'll have an ID

80
00:03:52,360 --> 00:03:54,530
a student ID and a grade.

81
00:03:54,530 --> 00:03:55,990
Then for that, given interface

82
00:03:55,990 --> 00:03:57,730
we'll have classes to implement that interface.

83
00:03:57,730 --> 00:03:59,266
So we'll have a class for a history grade,

84
00:03:59,266 --> 00:04:01,410
math grade and science grade.

85
00:04:01,410 --> 00:04:03,743
So they all implement the grade interface.

86
00:04:05,090 --> 00:04:06,780
Then we also have this interface for a student.

87
00:04:06,780 --> 00:04:08,860
So we have this field for student information

88
00:04:08,860 --> 00:04:09,837
and also full name.

89
00:04:09,837 --> 00:04:12,010
We have a class that implements the interface

90
00:04:12,010 --> 00:04:14,420
called CollegeStudent, and then we extend

91
00:04:14,420 --> 00:04:15,260
off of that CollegeStudent.

92
00:04:15,260 --> 00:04:17,880
We have a subclass called GradeBookCollegeStudent

93
00:04:17,880 --> 00:04:20,230
and this has a reference to the student grades.

94
00:04:22,050 --> 00:04:23,430
And then over on the far right, we have a GradeBook.

95
00:04:23,430 --> 00:04:26,820
So a GradeBook is basically a collection of students.

96
00:04:26,820 --> 00:04:31,180
So here we have students, list, GradeBookCollegeStudent.

97
00:04:31,180 --> 00:04:32,450
And then we have this class StudentGrades.

98
00:04:32,450 --> 00:04:34,930
So this actually contains the list of history grades,

99
00:04:34,930 --> 00:04:37,730
math grades, and also science grades.

100
00:04:37,730 --> 00:04:38,912
Now notice the relationship between the

101
00:04:38,912 --> 00:04:40,940
GradeBookCollegeStudent and StudentGrades.

102
00:04:40,940 --> 00:04:45,070
So a GradeBookCollegeStudent has StudentGrades.

103
00:04:45,070 --> 00:04:46,300
And then if we look at the top right

104
00:04:46,300 --> 00:04:48,600
a GradeBook has a collection of students.

105
00:04:48,600 --> 00:04:50,842
So think of it like in the old days in the classroom, right?

106
00:04:50,842 --> 00:04:53,530
A teacher had a grade book that had a list

107
00:04:53,530 --> 00:04:54,760
of all the students.

108
00:04:54,760 --> 00:04:56,430
And then for each student, you had grades

109
00:04:56,430 --> 00:05:00,050
for each subject, history, math, science, and so on.

110
00:05:00,050 --> 00:05:01,680
And we'll see all the source code for this in a bit.

111
00:05:01,680 --> 00:05:04,083
And when we go through and explore the project.

112
00:05:08,860 --> 00:05:10,780
Now as far as the code that we will develop currently

113
00:05:10,780 --> 00:05:12,860
the app does not store information in the database.

114
00:05:12,860 --> 00:05:14,693
And so we'll add DAO database support.

115
00:05:14,693 --> 00:05:16,880
We'll also add a service class.

116
00:05:16,880 --> 00:05:18,436
And also during the development process

117
00:05:18,436 --> 00:05:21,423
we'll add unit test and integration test.

118
00:05:25,790 --> 00:05:29,610
And once we're done, our final architecture looks like this.

119
00:05:29,610 --> 00:05:32,050
So we'll have a GradeBookController that communicates

120
00:05:32,050 --> 00:05:33,760
with a StudentAndGradeService.

121
00:05:33,760 --> 00:05:36,900
And then we'll also have DAO's for students, history, grades

122
00:05:36,900 --> 00:05:38,860
math grades, and also science grades.

123
00:05:38,860 --> 00:05:42,440
And that basically is our interface to our backend database.

124
00:05:42,440 --> 00:05:44,270
And as we go through the whole process

125
00:05:44,270 --> 00:05:46,900
we'll actually write unit test and integration test.

126
00:05:46,900 --> 00:05:49,263
So we'll test our code as we're developing it.

