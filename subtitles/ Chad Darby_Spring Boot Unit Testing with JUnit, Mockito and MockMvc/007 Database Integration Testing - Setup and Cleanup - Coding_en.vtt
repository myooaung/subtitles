WEBVTT
1
00:00:01.520 --> 00:00:02.352
Alrighty, so let's go ahead

2
00:00:02.352 --> 00:00:03.380
and move into our IDE

3
00:00:09.210 --> 00:00:11.373
and we'll add a new test method here.

4
00:00:14.760 --> 00:00:17.073
And this is for the, is student null check.

5
00:00:31.470 --> 00:00:34.780
Check if student is null and I pass in a given ID.

6
00:00:34.780 --> 00:00:36.980
So in this case, I'll pass in the ID of one.

7
00:00:40.720 --> 00:00:42.520
Now notice here, we don't have this method,

8
00:00:42.520 --> 00:00:46.250
so we actually have to create this method in our service.

9
00:00:46.250 --> 00:00:48.750
So I'll swing over to my student in grade service,

10
00:00:49.930 --> 00:00:51.780
stretch out a bit here at the bottom,

11
00:00:54.740 --> 00:00:56.253
and I'll create that method.

12
00:01:03.580 --> 00:01:05.010
In this given method they'll pass

13
00:01:05.010 --> 00:01:07.183
in a parameter for the ID.

14
00:01:16.790 --> 00:01:19.070
Then I'll set up an optional for the college student

15
00:01:19.070 --> 00:01:21.273
and I have student=studentdao.findbyID.

16
00:01:24.750 --> 00:01:27.923
So I'll retrieve that given item from the database.

17
00:01:35.400 --> 00:01:38.393
And if the student is present, then I'll return true.

18
00:01:39.750 --> 00:01:42.083
If not present, then I simply return false.

19
00:01:45.560 --> 00:01:47.240
All right, so we have this method in place,

20
00:01:47.240 --> 00:01:49.780
so now our tests should be in better shape now,

21
00:01:49.780 --> 00:01:51.430
and great, so that red moves away

22
00:01:51.430 --> 00:01:53.390
and this method here is available.

23
00:01:53.390 --> 00:01:54.513
All right, I like it.

24
00:01:59.520 --> 00:02:02.090
Now, let's also do an assert false

25
00:02:03.610 --> 00:02:07.683
and let's perform a check for the ID of zero.

26
00:02:13.660 --> 00:02:15.610
And the first line will return true

27
00:02:15.610 --> 00:02:18.200
if ID one exists in the database

28
00:02:18.200 --> 00:02:20.210
and for the second line will return false

29
00:02:20.210 --> 00:02:23.553
if ID zero does not exist in the database.

30
00:02:26.020 --> 00:02:26.853
Okay, great.

31
00:02:26.853 --> 00:02:28.200
Let's go ahead and run this test

32
00:02:28.200 --> 00:02:29.650
and see what the results are.

33
00:02:37.300 --> 00:02:39.870
And the test failed.

34
00:02:39.870 --> 00:02:43.530
It failed as there's no data in the database.

35
00:02:43.530 --> 00:02:44.363
All right,

36
00:02:44.363 --> 00:02:46.120
so when we tried to see if ID one

37
00:02:46.120 --> 00:02:48.990
existed in the database, that, that failed

38
00:02:48.990 --> 00:02:52.030
and because we haven't really inserted any data

39
00:02:52.030 --> 00:02:53.450
in our database, really.

40
00:02:53.450 --> 00:02:54.620
So let's go ahead and fix that.

41
00:02:54.620 --> 00:02:55.770
So let's go ahead and write some code

42
00:02:55.770 --> 00:02:57.660
to insert sample data

43
00:02:57.660 --> 00:03:00.900
so we can make use of that before each annotation.

44
00:03:00.900 --> 00:03:04.223
And we'll simply add code here to insert sample data.

45
00:03:12.010 --> 00:03:14.600
Now, in order to insert data into the database,

46
00:03:14.600 --> 00:03:16.590
we can make use of that JDBC template

47
00:03:16.590 --> 00:03:18.170
that we learned about earlier.

48
00:03:18.170 --> 00:03:21.243
So let me just go ahead and auto wire in that JDBC template.

49
00:03:35.410 --> 00:03:37.960
And remember this JDBC template is a helper class

50
00:03:37.960 --> 00:03:39.660
provided by the spring framework

51
00:03:39.660 --> 00:03:42.913
that will allow us to execute JDBC operations.

52
00:03:47.640 --> 00:03:48.473
All righty.

53
00:03:48.473 --> 00:03:50.250
So I have my JDBC template auto wired,

54
00:03:50.250 --> 00:03:51.810
now I can use it.

55
00:03:51.810 --> 00:03:56.243
I can say JDBC.execute, and I can pass in an SQL string.

56
00:04:11.920 --> 00:04:14.523
And then I also specify the values.

57
00:04:15.920 --> 00:04:18.950
I'll insert a student with the ID of one

58
00:04:18.950 --> 00:04:20.560
and the student's name is Eric Roby,

59
00:04:20.560 --> 00:04:22.110
along with their email address.

60
00:04:34.009 --> 00:04:34.842
Great, so this looks really good.

61
00:04:34.842 --> 00:04:36.660
So before each one of the tests are executed

62
00:04:36.660 --> 00:04:38.933
we'll do an insert here for this data.

63
00:04:50.830 --> 00:04:52.390
All right, so this returns true

64
00:04:52.390 --> 00:04:54.800
since ID one exists in the database.

65
00:04:54.800 --> 00:04:57.320
That's good, excellent.

66
00:04:57.320 --> 00:04:59.040
And then here returns false

67
00:04:59.040 --> 00:05:02.403
since ID zero does not exist in the database.

68
00:05:07.470 --> 00:05:08.610
Excellent, so this is really good,

69
00:05:08.610 --> 00:05:10.710
I like the way this part is set up for us.

70
00:05:16.690 --> 00:05:18.190
Now, another thing I'd like to do

71
00:05:18.190 --> 00:05:21.680
is add one more piece of code here

72
00:05:21.680 --> 00:05:23.700
for deleting the sample data

73
00:05:23.700 --> 00:05:26.283
or doing some cleanup on the actual database.

74
00:05:35.410 --> 00:05:37.190
So here I'll say JDBC execute

75
00:05:37.190 --> 00:05:38.690
and I pass in the SQL string

76
00:05:38.690 --> 00:05:41.360
and I'll actually delete the sample data.

77
00:05:41.360 --> 00:05:44.653
So delete from student.

78
00:05:50.360 --> 00:05:51.780
Now we can go ahead and run our tests

79
00:05:51.780 --> 00:05:53.083
and check the results.

80
00:05:57.640 --> 00:05:58.473
And excellent.

81
00:05:58.473 --> 00:06:01.310
So both of those tests passed and were a-okay.

82
00:06:01.310 --> 00:06:02.193
Good Job!

