1
00:00:01,170 --> 00:00:02,003
In this video,

2
00:00:02,003 --> 00:00:04,103
we'll cover database integration testing.

3
00:00:07,570 --> 00:00:09,330
When we are performing integration testing

4
00:00:09,330 --> 00:00:13,000
with the database, each test should run from a known state.

5
00:00:13,000 --> 00:00:15,920
Before each test, we want to perform initialization

6
00:00:15,920 --> 00:00:19,420
like inserting sample data and then also after each test,

7
00:00:19,420 --> 00:00:23,093
we want to perform a cleanup such as deleting the sample data.

8
00:00:25,820 --> 00:00:27,380
Now in terms of our testing approach,

9
00:00:27,380 --> 00:00:29,610
we want each test to run from a known state,

10
00:00:29,610 --> 00:00:31,800
so we know what's in the database.

11
00:00:31,800 --> 00:00:32,633
To help us accomplish this,

12
00:00:32,633 --> 00:00:34,390
we can make use of the annotations

13
00:00:34,390 --> 00:00:36,600
before each and after each.

14
00:00:36,600 --> 00:00:39,320
Before each test, we want to insert sample data,

15
00:00:39,320 --> 00:00:43,050
then we run the actual test method and then after each test,

16
00:00:43,050 --> 00:00:44,800
we want to delete the sample data.

17
00:00:44,800 --> 00:00:47,000
And we'll apply this for each one of the tests

18
00:00:47,000 --> 00:00:48,760
by making use of those before each

19
00:00:48,760 --> 00:00:51,380
and after each annotations.

20
00:00:51,380 --> 00:00:53,240
And so again, this will basically make sure

21
00:00:53,240 --> 00:00:54,630
that we know what's in the database

22
00:00:54,630 --> 00:00:57,533
and we also clean up the database after each test.

23
00:01:01,130 --> 00:01:03,133
Now here's a coding example for this.

24
00:01:05,940 --> 00:01:08,590
We'll make use of our Student And Grade Service Test,

25
00:01:09,440 --> 00:01:12,180
we'll add a new entry here for the JDBC template.

26
00:01:12,180 --> 00:01:15,090
Now, the JDBC template is from the Spring framework

27
00:01:15,090 --> 00:01:18,083
and allows us to execute JDBC operations.

28
00:01:19,850 --> 00:01:22,310
As an example here for this before each,

29
00:01:22,310 --> 00:01:24,340
we'll have this method set up database.

30
00:01:24,340 --> 00:01:27,563
This is where we can insert data before the test is run.

31
00:01:28,470 --> 00:01:30,480
Here I'll make use of JDBC execute

32
00:01:30,480 --> 00:01:34,120
and then I do an insert, enter student and values one,

33
00:01:34,120 --> 00:01:36,610
Eric Roby, and then Eric Roby's email address.

34
00:01:36,610 --> 00:01:39,893
So we're adding this one student to the actual database.

35
00:01:40,990 --> 00:01:43,880
And then we can do our work and then after each test,

36
00:01:43,880 --> 00:01:45,440
then we have delete from students.

37
00:01:45,440 --> 00:01:48,380
So we have work that'll run before each test,

38
00:01:48,380 --> 00:01:50,580
we insert sample data, and then we have work

39
00:01:50,580 --> 00:01:53,970
that'll run after each test where we delete the sample data.

40
00:01:53,970 --> 00:01:55,810
Again, making sure that our database

41
00:01:55,810 --> 00:01:58,923
is in a known state when we actually execute our test.

42
00:02:03,210 --> 00:02:05,260
Now let's kind of fill in the blank here.

43
00:02:06,490 --> 00:02:08,440
We have our Students And Grade Service Test,

44
00:02:08,440 --> 00:02:09,620
we have the before each,

45
00:02:09,620 --> 00:02:11,630
we have the after each already set up,

46
00:02:11,630 --> 00:02:14,860
now we can put in a real test that will actually execute

47
00:02:14,860 --> 00:02:18,310
and in this test will say is student no check,

48
00:02:18,310 --> 00:02:20,290
and we'll make a call to the student service,

49
00:02:20,290 --> 00:02:23,133
we pass in a value and we can assert true or false.

50
00:02:24,298 --> 00:02:26,880
Based on the initialization work that we've set up,

51
00:02:26,880 --> 00:02:29,060
this first statement here, assert true,

52
00:02:29,060 --> 00:02:32,863
this will return true since id one exists in the database.

53
00:02:33,990 --> 00:02:36,520
And the other item here will return false since id zero

54
00:02:36,520 --> 00:02:38,760
does not exist in the database.

55
00:02:38,760 --> 00:02:41,310
Again, you can see how we can initialize the database

56
00:02:41,310 --> 00:02:43,350
with some data, run our tests

57
00:02:43,350 --> 00:02:44,660
and then once everything's done,

58
00:02:44,660 --> 00:02:46,113
we can clean up the database.

59
00:02:47,470 --> 00:02:48,590
All right, this looks really good.

60
00:02:48,590 --> 00:02:49,990
Let's go ahead and move into the next video

61
00:02:49,990 --> 00:02:51,763
and let's write some code.

