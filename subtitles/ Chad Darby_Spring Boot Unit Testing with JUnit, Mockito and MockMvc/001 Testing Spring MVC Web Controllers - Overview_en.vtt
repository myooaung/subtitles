WEBVTT
1
00:00:00.950 --> 00:00:01.950
In this video,

2
00:00:01.950 --> 00:00:04.683
we'll cover testing Spring MVC Web Controllers.

3
00:00:08.150 --> 00:00:09.850
Here's the problem.

4
00:00:09.850 --> 00:00:12.620
How can we test Spring MVC Web Controllers?

5
00:00:12.620 --> 00:00:14.880
Like, how can we create HTTP requests

6
00:00:14.880 --> 00:00:17.150
and send those to the controller?

7
00:00:17.150 --> 00:00:19.019
And how can we verify the HTTP response?

8
00:00:19.019 --> 00:00:21.230
Such as the status code, the view name

9
00:00:21.230 --> 00:00:22.490
and the model attributes.

10
00:00:22.490 --> 00:00:23.853
How can we accomplish this?

11
00:00:26.900 --> 00:00:29.480
Well, spring has testing support for this scenario.

12
00:00:29.480 --> 00:00:31.825
So, Spring provides mock object support for web,

13
00:00:31.825 --> 00:00:33.713
REST APIs and so on.

14
00:00:34.590 --> 00:00:35.880
And for testing the controllers,

15
00:00:35.880 --> 00:00:38.020
you can make use of MockMvc.

16
00:00:38.020 --> 00:00:40.500
It provides Spring MVC processing of the request

17
00:00:40.500 --> 00:00:41.790
and the response.

18
00:00:41.790 --> 00:00:42.930
And the nice thing about it is that,

19
00:00:42.930 --> 00:00:45.723
there's no need to run a server, embedded or external.

20
00:00:45.723 --> 00:00:48.443
They actually mark the container for you.

21
00:00:51.960 --> 00:00:54.390
Here's the development process.

22
00:00:54.390 --> 00:00:56.500
In the first step, we're going to add the annotation,

23
00:00:56.500 --> 00:00:59.150
AutoConfigureMockMvc.

24
00:00:59.150 --> 00:01:02.730
Then, we'll inject the MockMvc into our controller test.

25
00:01:02.730 --> 00:01:04.479
Next, we'll perform the web request

26
00:01:04.479 --> 00:01:06.958
and then we'll define the expectations.

27
00:01:06.958 --> 00:01:09.603
And then, finally, we'll assert the results.

28
00:01:13.150 --> 00:01:14.120
Now, for this example,

29
00:01:14.120 --> 00:01:16.300
we'll make use of a very basic controller,

30
00:01:16.300 --> 00:01:17.650
called the grade book controller.

31
00:01:17.650 --> 00:01:18.630
It's very simple.

32
00:01:18.630 --> 00:01:19.810
It has one request mapping

33
00:01:19.810 --> 00:01:22.920
for slash and it handles a get request.

34
00:01:22.920 --> 00:01:23.910
As a method here

35
00:01:23.910 --> 00:01:26.540
and we simply return the view name of index.

36
00:01:26.540 --> 00:01:29.570
Very simple, very straightforward.

37
00:01:29.570 --> 00:01:31.350
And what we'd like to do, is write an actual test

38
00:01:31.350 --> 00:01:32.473
for this controller.

39
00:01:36.354 --> 00:01:38.230
Here's the coding for our test,

40
00:01:38.230 --> 00:01:40.283
our grade book controller test.

41
00:01:41.410 --> 00:01:43.220
Now, in step one, we're going to autoconfigure

42
00:01:43.220 --> 00:01:46.493
by making use the annotation, AutoconfigureMockMvc.

43
00:01:47.500 --> 00:01:48.333
And then, in step two,

44
00:01:48.333 --> 00:01:51.323
we'll inject the MockMvc into our controller test.

45
00:01:52.820 --> 00:01:55.400
And then, in step three, we'll perform the web request.

46
00:01:55.400 --> 00:01:56.410
So, up in the top right,

47
00:01:56.410 --> 00:01:58.400
we have that very simple controller that we looked

48
00:01:58.400 --> 00:01:59.650
at on the previous slide.

49
00:02:00.740 --> 00:02:04.260
And now, here, we'll say mockMvc.perform.

50
00:02:04.260 --> 00:02:06.220
So, I'll make some type of web request.

51
00:02:06.220 --> 00:02:09.310
I'll use this, MockMvcRequestBuilders.get.

52
00:02:09.310 --> 00:02:11.690
So, I'm making a get request to slash,

53
00:02:11.690 --> 00:02:13.290
that's for that controller up top.

54
00:02:13.290 --> 00:02:15.880
Then, in step four, we'll define the expectations

55
00:02:15.880 --> 00:02:18.800
and expect status are okay and return.

56
00:02:18.800 --> 00:02:20.420
Effectively, here, we're making use of the mock

57
00:02:20.420 --> 00:02:22.630
to perform web request.

58
00:02:22.630 --> 00:02:24.310
It returns at MvcResult.

59
00:02:24.310 --> 00:02:27.203
So, we can use that MvcResult and get the model and view.

60
00:02:28.649 --> 00:02:31.660
And then, in step five, we can assert the results.

61
00:02:31.660 --> 00:02:35.570
So here, I'll say, "ModelAndViewAssert.assertViewName."

62
00:02:35.570 --> 00:02:38.510
I pass under model and view and I say, "index."

63
00:02:38.510 --> 00:02:41.040
So, what I'm doing here, is I'm basically saying, "Hey,

64
00:02:41.040 --> 00:02:42.940
we made a call to this controller.

65
00:02:42.940 --> 00:02:45.410
Did it return the view name of index?"

66
00:02:45.410 --> 00:02:47.200
And, we can look at the code in the top right.

67
00:02:47.200 --> 00:02:48.160
And, we can verify that,

68
00:02:48.160 --> 00:02:50.953
that's what the actual controller code should return.

69
00:02:53.070 --> 00:02:55.350
And there's more advanced features that we can make use of.

70
00:02:55.350 --> 00:02:57.350
We can also assert model attributes.

71
00:02:57.350 --> 00:02:59.610
So, we can retrieve the model attribute objects

72
00:02:59.610 --> 00:03:01.370
and then perform some fine-grained asserts

73
00:03:01.370 --> 00:03:03.090
on those given objects.

74
00:03:03.090 --> 00:03:04.440
We'll get to that later in the course

75
00:03:04.440 --> 00:03:06.990
but for now we just kind of cover this basic example.

76
00:03:07.970 --> 00:03:09.650
Okay. So this covers the basic coding.

77
00:03:09.650 --> 00:03:10.483
Let's go ahead and move

78
00:03:10.483 --> 00:03:13.070
into the next video and let's start writing some code.

