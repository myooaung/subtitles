WEBVTT
1
00:00:01.240 --> 00:00:02.350
Okay, so let's go ahead

2
00:00:02.350 --> 00:00:04.873
and write some code for Custom Display Names.

3
00:00:07.100 --> 00:00:09.380
First off, I simply want to run my unit test

4
00:00:09.380 --> 00:00:10.810
just to see what the output here.

5
00:00:10.810 --> 00:00:12.670
So this is before any changes,

6
00:00:12.670 --> 00:00:15.520
it's simply using the method names here, and that's fine.

7
00:00:23.080 --> 00:00:26.423
Now let's go ahead and move into our DemoUtilsTest.Java.

8
00:00:33.270 --> 00:00:34.620
Just some housekeeping work.

9
00:00:34.620 --> 00:00:37.780
Let me grab these methods here

10
00:00:37.780 --> 00:00:41.250
and move this code to the bottom and comment it out.

11
00:00:41.250 --> 00:00:44.070
This is for the AfterEach, BeforeAll, and AfterAll.

12
00:00:44.070 --> 00:00:45.380
We really don't need it now,

13
00:00:45.380 --> 00:00:47.950
so let's just go ahead and move it down.

14
00:00:47.950 --> 00:00:50.273
So I just do a little cut on this,

15
00:00:53.530 --> 00:00:54.750
move it down, I'll paste it,

16
00:00:54.750 --> 00:00:56.300
and just comment out this code.

17
00:01:16.140 --> 00:01:18.180
Now, let's go ahead and add a display name here

18
00:01:18.180 --> 00:01:20.960
for this method testEqualsAndNotEquals.

19
00:01:30.019 --> 00:01:31.630
You can give any name that you want here.

20
00:01:31.630 --> 00:01:34.500
You can use spaces, special characters, whatever.

21
00:01:34.500 --> 00:01:35.980
Here I'll just kind of keep it simple

22
00:01:35.980 --> 00:01:38.580
and I'll call it Equals and Not Equals.

23
00:01:38.580 --> 00:01:41.810
I'll do a similar thing here for the other method,

24
00:01:41.810 --> 00:01:43.833
testing for Null and Not Null.

25
00:01:50.874 --> 00:01:52.640
And then also some more housekeeping work.

26
00:01:52.640 --> 00:01:56.230
I'll remove the diagnostic messages here.

27
00:01:56.230 --> 00:01:59.300
We don't need those anymore, so you can

28
00:01:59.300 --> 00:02:02.000
either remove them or comment them, totally up to you.

29
00:02:08.030 --> 00:02:10.502
One last one here in the BeforeEach.

30
00:02:13.120 --> 00:02:15.800
Okay, great, so all the housekeeping stuff's done.

31
00:02:15.800 --> 00:02:17.850
Now we can go ahead and run our unit test

32
00:02:24.130 --> 00:02:25.310
and then we'll see the output

33
00:02:25.310 --> 00:02:27.550
and so notice here the actual display names.

34
00:02:27.550 --> 00:02:29.800
Null and Not Null, Equals and not Equals.

35
00:02:29.800 --> 00:02:31.420
We can give any name that we want here

36
00:02:31.420 --> 00:02:32.873
for those display names.

37
00:02:37.620 --> 00:02:39.030
Now, let's go ahead and play around

38
00:02:39.030 --> 00:02:40.703
with some of the generators.

39
00:02:44.549 --> 00:02:47.000
And so I'll comment out the display name

40
00:02:47.000 --> 00:02:48.480
for each one of the methods

41
00:02:48.480 --> 00:02:50.340
because the generators will do it for everything,

42
00:02:50.340 --> 00:02:53.003
no need to manually reference it here.

43
00:03:00.970 --> 00:03:04.530
And at the class level, I'll give DisplayNameGeneration

44
00:03:04.530 --> 00:03:08.060
and then I'll specify the actual DisplayNameGenerator

45
00:03:08.060 --> 00:03:09.143
that I want to use.

46
00:03:10.270 --> 00:03:11.316
I'll start off with this one called

47
00:03:11.316 --> 00:03:13.399
ReplaceUnderscores.class.

48
00:03:25.880 --> 00:03:30.880
Now, if I run my test again, then I'll see nothing yet

49
00:03:33.250 --> 00:03:36.910
because we need to rename our methods to use underscores.

50
00:03:36.910 --> 00:03:38.830
There was nothing for it to really replace

51
00:03:38.830 --> 00:03:41.540
'cause we weren't following a certain convention.

52
00:03:41.540 --> 00:03:42.410
So here I have to go through

53
00:03:42.410 --> 00:03:45.903
and manually change my method names to use underscores.

54
00:03:48.720 --> 00:03:51.060
And me, I personally don't like using this

55
00:03:51.060 --> 00:03:54.570
because I hate using underscores in my method names.

56
00:03:54.570 --> 00:03:57.573
I only use camel case, but anyways.

57
00:04:05.330 --> 00:04:08.600
So now we have underscores here for the method names

58
00:04:10.280 --> 00:04:11.753
and now if I run it,

59
00:04:14.080 --> 00:04:15.480
now we'll have success.

60
00:04:15.480 --> 00:04:19.632
So test Equals And Not Equals, test Null And Not Null.

61
00:04:29.700 --> 00:04:31.810
I'll go ahead and undo that previous work.

62
00:04:31.810 --> 00:04:34.150
I'm basically just removing those underscores

63
00:04:34.150 --> 00:04:35.253
from my method name.

64
00:04:42.320 --> 00:04:45.030
And then I'll simply use the regular DisplayName

65
00:04:45.030 --> 00:04:46.373
that I had before.

66
00:04:54.707 --> 00:04:56.060
And here's a challenge for you.

67
00:04:56.060 --> 00:04:58.180
On your own, I want you to experiment

68
00:04:58.180 --> 00:05:00.500
with other Display Name Generators.

69
00:05:00.500 --> 00:05:03.380
So make use of the Simple name generator

70
00:05:03.380 --> 00:05:05.970
and also the IndicativeSentences generator

71
00:05:05.970 --> 00:05:07.970
just to see the output in your computer.

72
00:05:11.570 --> 00:05:13.250
And then one thing that you may notice

73
00:05:13.250 --> 00:05:17.830
is that junit does not provide a built-in generator

74
00:05:17.830 --> 00:05:20.690
for camel case, which is a bit interesting.

75
00:05:20.690 --> 00:05:22.910
However, you can find a number of

76
00:05:22.910 --> 00:05:25.120
online blog posts for this.

77
00:05:25.120 --> 00:05:29.700
Simply do a search for junit display name camel case

78
00:05:29.700 --> 00:05:31.940
and you'll find some blog solutions.

79
00:05:31.940 --> 00:05:34.090
The really nice thing about this is that

80
00:05:34.090 --> 00:05:36.930
it's a custom solution that makes use

81
00:05:36.930 --> 00:05:40.510
of this display name API, where you can actually extend it

82
00:05:40.510 --> 00:05:43.280
and provide your own custom naming solution

83
00:05:43.280 --> 00:05:44.580
or generator solution.

84
00:05:44.580 --> 00:05:46.043
And you'll see the actual code for it

85
00:05:46.043 --> 00:05:48.340
in those online blog posts.

86
00:05:48.340 --> 00:05:50.310
All right, well, good stuff for now

87
00:05:50.310 --> 00:05:53.063
and I'll see ya in the next video.

