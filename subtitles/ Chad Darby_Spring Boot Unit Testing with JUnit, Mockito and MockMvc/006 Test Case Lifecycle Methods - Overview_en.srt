1
00:00:01,158 --> 00:00:01,991
In this video,

2
00:00:01,991 --> 00:00:04,223
we'll cover JUnit lifecycle methods.

3
00:00:07,960 --> 00:00:10,290
When you're developing tests, you may need to perform

4
00:00:10,290 --> 00:00:12,240
some common operations.

5
00:00:12,240 --> 00:00:14,820
Such as before each test, you like to create objects

6
00:00:14,820 --> 00:00:16,760
and also set up test data.

7
00:00:16,760 --> 00:00:20,120
And also after each test, you may need to release resources

8
00:00:20,120 --> 00:00:21,443
and clean up test data.

9
00:00:25,050 --> 00:00:27,950
JUnit provides lifecycle method annotations.

10
00:00:27,950 --> 00:00:30,070
We can make use of @BeforeEach.

11
00:00:30,070 --> 00:00:33,180
So this method is executed before each test method.

12
00:00:33,180 --> 00:00:35,760
Again, it's useful for common setup code

13
00:00:35,760 --> 00:00:39,100
like creating objects and also setting up test data.

14
00:00:39,100 --> 00:00:41,210
You can also use the annotation @AfterEach.

15
00:00:41,210 --> 00:00:44,580
So this method is executed after each test method.

16
00:00:44,580 --> 00:00:46,820
And this is useful for common cleanup code,

17
00:00:46,820 --> 00:00:49,843
such as releasing resources and cleaning up test data.

18
00:00:53,580 --> 00:00:55,200
Now let's kind of look at the big picture here

19
00:00:55,200 --> 00:00:57,283
as far as the execution sequence.

20
00:00:59,240 --> 00:01:02,000
So, the @BeforeEach annotation will be executed

21
00:01:02,000 --> 00:01:03,760
before each test method.

22
00:01:03,760 --> 00:01:07,320
And the @AfterEach is executed after each test method.

23
00:01:07,320 --> 00:01:09,840
So if you have multiple test methods,

24
00:01:09,840 --> 00:01:11,290
then the @BeforeEach will execute

25
00:01:11,290 --> 00:01:13,140
before each one of those methods,

26
00:01:13,140 --> 00:01:16,073
and @AfterEach after each one of those methods.

27
00:01:20,880 --> 00:01:22,320
Let's look at a coding example,

28
00:01:22,320 --> 00:01:24,130
and we'll look at the before code

29
00:01:24,130 --> 00:01:26,950
that we had previously in the videos.

30
00:01:26,950 --> 00:01:28,970
In the setup, we create a new instance

31
00:01:28,970 --> 00:01:31,823
of the DemoUtils for each one of the methods.

32
00:01:34,520 --> 00:01:36,710
But now the revised version here

33
00:01:36,710 --> 00:01:40,180
is that we'll simply define DemoUtils as a field

34
00:01:40,180 --> 00:01:41,960
in the test class.

35
00:01:41,960 --> 00:01:45,380
And then with this annotated method @BeforeEach,

36
00:01:45,380 --> 00:01:49,790
then we'll actually create the object before each test,

37
00:01:49,790 --> 00:01:52,230
and then we can use it in a given test.

38
00:01:52,230 --> 00:01:54,420
The key thing here is that this will be executed

39
00:01:54,420 --> 00:01:56,890
before each one of the test methods.

40
00:01:56,890 --> 00:01:58,920
And this is really good, because you want your object

41
00:01:58,920 --> 00:02:01,500
to start from scratch with no previous state

42
00:02:01,500 --> 00:02:02,783
or no previous data.

43
00:02:03,870 --> 00:02:06,040
And then later on in our test methods here,

44
00:02:06,040 --> 00:02:07,750
there's no need to create the object,

45
00:02:07,750 --> 00:02:12,410
it's handled automatically by the @BeforeEach annotation.

46
00:02:12,410 --> 00:02:14,140
And this applies for both of the methods here,

47
00:02:14,140 --> 00:02:17,420
test equals and not equals, and also test null, not null.

48
00:02:17,420 --> 00:02:18,720
No need to create the object,

49
00:02:18,720 --> 00:02:20,760
because it's already been created.

50
00:02:20,760 --> 00:02:22,160
And the key here is that this object

51
00:02:22,160 --> 00:02:24,223
is created before each test.

52
00:02:28,320 --> 00:02:30,830
And we can also take a look at the @AfterEach annotation.

53
00:02:30,830 --> 00:02:33,920
So here, this is where you do any comment and cleanup code.

54
00:02:33,920 --> 00:02:36,210
In this example, there's nothing to really clean up,

55
00:02:36,210 --> 00:02:38,517
so I'll just put a print line here, just to say,

56
00:02:38,517 --> 00:02:42,120
"Hey, we're running the @AfterEach method."

57
00:02:42,120 --> 00:02:43,350
And so again, remember,

58
00:02:43,350 --> 00:02:45,543
this runs after each one of the tests.

59
00:02:49,330 --> 00:02:50,580
And then also in this example,

60
00:02:50,580 --> 00:02:52,520
I'm going to add in some print line statements,

61
00:02:52,520 --> 00:02:54,730
just for diagnostics, so we can see

62
00:02:54,730 --> 00:02:56,570
each one of the test methods running,

63
00:02:56,570 --> 00:02:57,870
and we'll see a print line,

64
00:02:57,870 --> 00:02:59,610
and we can then look at the logs

65
00:02:59,610 --> 00:03:02,130
and verify that hey, the execution sequence

66
00:03:02,130 --> 00:03:03,583
is working as desired.

67
00:03:08,700 --> 00:03:11,130
All righty, so remember, @BeforeEach, @AfterEach

68
00:03:11,130 --> 00:03:13,820
executes for each one of the test methods.

69
00:03:13,820 --> 00:03:15,060
So we can run the unit test,

70
00:03:15,060 --> 00:03:16,260
and we can see the output here.

71
00:03:16,260 --> 00:03:19,890
So it says, @BeforeEach executes before each method.

72
00:03:19,890 --> 00:03:22,290
We run the test, test null or not null,

73
00:03:22,290 --> 00:03:23,690
and then running @AfterEach.

74
00:03:23,690 --> 00:03:26,210
And then a similar thing here for the other tests here,

75
00:03:26,210 --> 00:03:28,073
test equals and not equals.

76
00:03:31,420 --> 00:03:33,250
This is all based on the code that we created

77
00:03:33,250 --> 00:03:35,920
with those annotations @BeforeEach and @AfterEach,

78
00:03:35,920 --> 00:03:38,270
and also the print lines that we have in place.

79
00:03:39,850 --> 00:03:41,590
And then also, one thing that you may notice here

80
00:03:41,590 --> 00:03:42,850
as far as the order.

81
00:03:42,850 --> 00:03:45,552
So we have one test that appears before the other.

82
00:03:45,552 --> 00:03:47,220
Don't really worry about the order

83
00:03:47,220 --> 00:03:48,790
of the test methods right now.

84
00:03:48,790 --> 00:03:50,580
We have separate videos coming up later

85
00:03:50,580 --> 00:03:51,830
where we'll get into all the details

86
00:03:51,830 --> 00:03:53,650
on how to order tests explicitly.

87
00:03:53,650 --> 00:03:55,473
So don't worry about it for now.

88
00:03:58,230 --> 00:04:01,000
There's also some additional lifecycle methods you can use.

89
00:04:01,000 --> 00:04:05,040
So you may need to perform some one-time operations,

90
00:04:05,040 --> 00:04:06,310
such as one-time set up

91
00:04:06,310 --> 00:04:08,310
that you like to run before all tests,

92
00:04:08,310 --> 00:04:10,620
such as maybe getting a database connection,

93
00:04:10,620 --> 00:04:12,520
connecting to remote servers.

94
00:04:12,520 --> 00:04:14,630
And then also you may have some one-time clean up

95
00:04:14,630 --> 00:04:16,100
after all tests.

96
00:04:16,100 --> 00:04:18,600
So maybe releasing database connections,

97
00:04:18,600 --> 00:04:20,663
disconnecting from servers, and so on.

98
00:04:23,290 --> 00:04:25,560
So JUnit provides annotations for this.

99
00:04:25,560 --> 00:04:27,020
You can use @BeforeAll.

100
00:04:27,020 --> 00:04:29,440
So with this annotation, the method is executed

101
00:04:29,440 --> 00:04:32,343
only once before all test methods.

102
00:04:33,870 --> 00:04:36,420
And then the @AfterAll, the method is executed

103
00:04:36,420 --> 00:04:39,233
only once after all test methods.

104
00:04:41,756 --> 00:04:45,323
And here's a diagram here of the execution sequence.

105
00:04:46,400 --> 00:04:49,360
So we have the @BeforeAll and then we have

106
00:04:49,360 --> 00:04:51,820
all the test methods that'll execute.

107
00:04:51,820 --> 00:04:53,150
And then we have @AfterAll.

108
00:04:53,150 --> 00:04:55,100
So notice here @BeforeEach, @AfterEach.

109
00:04:55,100 --> 00:04:57,037
Those execute for each method.

110
00:04:57,037 --> 00:04:59,087
@BeforeAll is for all tests,

111
00:04:59,087 --> 00:05:01,333
@AfterAll executes after all tests.

112
00:05:04,500 --> 00:05:07,100
And we can pull this together with a coding example.

113
00:05:08,450 --> 00:05:11,260
Here we have @BeforeAll, it's executed only once

114
00:05:11,260 --> 00:05:13,720
before all test methods.

115
00:05:13,720 --> 00:05:15,710
And then @AfterAll, executed only once

116
00:05:15,710 --> 00:05:17,850
after all test methods.

117
00:05:17,850 --> 00:05:19,110
And I have the little print lines in there

118
00:05:19,110 --> 00:05:21,340
for diagnostics for us.

119
00:05:21,340 --> 00:05:24,923
And then also by default, these methods must be static.

120
00:05:28,720 --> 00:05:30,600
Now if we actually go through and run this,

121
00:05:30,600 --> 00:05:33,440
we can verify the execution sequence.

122
00:05:33,440 --> 00:05:34,910
And so notice here over on the right,

123
00:05:34,910 --> 00:05:36,800
we have the @BeforeAll message

124
00:05:36,800 --> 00:05:39,700
and then we have each one of the @BeforeEach, @AfterEach.

125
00:05:39,700 --> 00:05:42,610
And then finally at the end we have the @AfterAll message

126
00:05:42,610 --> 00:05:43,930
that's being displayed.

127
00:05:43,930 --> 00:05:45,940
And again, this is all based on the information

128
00:05:45,940 --> 00:05:48,573
that we had in our system out print line statements.

129
00:05:49,930 --> 00:05:51,270
All righty, so this looks really good.

130
00:05:51,270 --> 00:05:52,870
Let's go ahead and dive into the next video

131
00:05:52,870 --> 00:05:55,693
and let's write some code using these annotations.

