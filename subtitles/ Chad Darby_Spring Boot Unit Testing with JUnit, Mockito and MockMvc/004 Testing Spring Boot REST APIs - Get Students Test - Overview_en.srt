1
00:00:01,040 --> 00:00:01,873
In this video,

2
00:00:01,873 --> 00:00:03,993
we're going to test the Get Students Endpoint.

3
00:00:07,850 --> 00:00:09,270
Now the Get Students Endpoint

4
00:00:09,270 --> 00:00:12,070
will get a list of students as a JSON array.

5
00:00:12,070 --> 00:00:15,170
We simply visit our app at localhost:1500/

6
00:00:15,170 --> 00:00:17,600
The web browser will send over a GET request

7
00:00:17,600 --> 00:00:19,990
and it'll return this JSON array.

8
00:00:19,990 --> 00:00:22,760
So note here, the square brackets means that's an array.

9
00:00:22,760 --> 00:00:25,120
And then we have an array of these JSON objects

10
00:00:25,120 --> 00:00:26,130
here for a student.

11
00:00:26,130 --> 00:00:29,063
ID first name, email address, student grades, and so on.

12
00:00:32,259 --> 00:00:34,140
And here's the actual Gradebook Controller

13
00:00:34,140 --> 00:00:35,870
that'll generate that output.

14
00:00:35,870 --> 00:00:37,130
So we have this rest controller.

15
00:00:37,130 --> 00:00:38,540
We have our dependencies

16
00:00:38,540 --> 00:00:41,360
we have this request mapping for our value = "/"

17
00:00:41,360 --> 00:00:42,860
and method = RequestMethod.GET

18
00:00:43,750 --> 00:00:45,070
so a GET request.

19
00:00:45,070 --> 00:00:46,690
We basically use the student service.

20
00:00:46,690 --> 00:00:48,900
We get the grade book and in using a grade book

21
00:00:48,900 --> 00:00:50,513
we get a list of the students.

22
00:00:51,710 --> 00:00:54,703
And this will return to JSON array of those students.

23
00:00:58,310 --> 00:01:00,510
Now, what we'd like to do is write a test here.

24
00:01:00,510 --> 00:01:03,420
We want to verify the HTTP response, but we have a question.

25
00:01:03,420 --> 00:01:05,540
How can we verify the response such as

26
00:01:05,540 --> 00:01:08,280
how can I verify the status code, the content type

27
00:01:08,280 --> 00:01:11,433
and also information about the JSON response body?

28
00:01:15,120 --> 00:01:17,600
Well, for verifying the status and content type

29
00:01:17,600 --> 00:01:20,800
we can make use of this little code snippet that I have.

30
00:01:20,800 --> 00:01:23,220
And to verify this information inside of our test

31
00:01:23,220 --> 00:01:26,113
we can make use of this andExpect(status)

32
00:01:26,113 --> 00:01:27,850
And it's a static import from above

33
00:01:27,850 --> 00:01:30,887
and here we can check the status of 200 (OK).

34
00:01:32,210 --> 00:01:34,305
And then for the actual content type here we can say

35
00:01:34,305 --> 00:01:35,916
andExpect(content)

36
00:01:35,916 --> 00:01:39,960
and we can check the content type against application JSON.

37
00:01:39,960 --> 00:01:42,210
And this allows us to verify the HTTP status

38
00:01:42,210 --> 00:01:43,473
and content type.

39
00:01:47,930 --> 00:01:50,293
Now what about verifying the response body?

40
00:01:51,580 --> 00:01:54,560
So maybe we want to access a specific JSON element

41
00:01:54,560 --> 00:01:55,720
or some nested elements

42
00:01:55,720 --> 00:01:58,283
or we'd like to verify the size of the JSON array.

43
00:02:01,590 --> 00:02:04,280
One solution we can use is JsonPath.

44
00:02:04,280 --> 00:02:07,430
JsonPath allows you to access elements of JSON.

45
00:02:07,430 --> 00:02:10,130
And this JsonPath is an actual open-source project

46
00:02:10,130 --> 00:02:12,233
that's available at this GitHub link.

47
00:02:16,080 --> 00:02:17,970
Now the really nice thing about JSON path

48
00:02:17,970 --> 00:02:19,700
and Spring Boot is that there's a lot of synergy.

49
00:02:19,700 --> 00:02:24,200
So Spring Boot test starter includes support for JsonPath.

50
00:02:24,200 --> 00:02:26,310
Normally you would have to add the maven dependency

51
00:02:26,310 --> 00:02:28,440
for JsonPath manually,

52
00:02:28,440 --> 00:02:29,470
but in this case since we're using

53
00:02:29,470 --> 00:02:30,940
the Spring Boot test starter,

54
00:02:30,940 --> 00:02:32,840
it already has built in support for it.

55
00:02:32,840 --> 00:02:34,493
So that's really, really nice.

56
00:02:35,820 --> 00:02:37,760
And we can verify this in our IDE.

57
00:02:37,760 --> 00:02:40,510
We can simply look at our project, look at our dependencies.

58
00:02:40,510 --> 00:02:42,970
We see the Spring Boot Starter test dependency

59
00:02:42,970 --> 00:02:45,130
and we can see that it has a transitive dependency here

60
00:02:45,130 --> 00:02:46,083
for JsonPath.

61
00:02:47,260 --> 00:02:48,660
So this is great, I like it.

62
00:02:51,630 --> 00:02:52,720
Now let's go ahead and take a look

63
00:02:52,720 --> 00:02:54,513
at some JSONPath examples.

64
00:02:55,850 --> 00:02:57,000
And for the JsonPath

65
00:02:57,000 --> 00:02:58,160
we can give the $.

66
00:02:58,160 --> 00:03:01,110
This basically references the root element to query

67
00:03:01,110 --> 00:03:03,440
and this actually the start of all path expressions.

68
00:03:03,440 --> 00:03:05,670
And so here, this is the root element here

69
00:03:05,670 --> 00:03:07,750
of this actual JSON object.

70
00:03:07,750 --> 00:03:10,250
Next we can make use of the $.id

71
00:03:10,250 --> 00:03:12,460
allows us to access the ID element

72
00:03:12,460 --> 00:03:13,493
of the JSON.

73
00:03:15,660 --> 00:03:16,493
And then likewise

74
00:03:16,493 --> 00:03:18,210
if we want to access another element here

75
00:03:18,210 --> 00:03:20,460
we can still use $.first name to access

76
00:03:20,460 --> 00:03:22,660
the first name element of the JSON

77
00:03:22,660 --> 00:03:23,790
and so on and so forth.

78
00:03:23,790 --> 00:03:25,350
And so whatever name you have here,

79
00:03:25,350 --> 00:03:28,423
dot email address dot student grades, and so forth.

80
00:03:29,330 --> 00:03:30,640
If you'd like to see more examples,

81
00:03:30,640 --> 00:03:32,400
go to the GitHub link to have the full docs

82
00:03:32,400 --> 00:03:35,393
on all the various JsonPath options out there.

83
00:03:38,035 --> 00:03:41,970
And we can also use JsonPath to verify the array size.

84
00:03:41,970 --> 00:03:44,070
All right, so here's our test.

85
00:03:44,070 --> 00:03:45,220
And then over on the right hand side

86
00:03:45,220 --> 00:03:48,390
here's the JSON output, and this is actually a JSON array

87
00:03:48,390 --> 00:03:51,290
so note the square brackets here, the notes on array.

88
00:03:51,290 --> 00:03:54,020
And then we have these JSON objects here

89
00:03:54,020 --> 00:03:56,490
and then down in our test, the line that's in bold

90
00:03:56,490 --> 00:03:58,713
that's a new line here and expect JsonPath.

91
00:03:59,688 --> 00:04:01,523
So going to make use of JsonPath here.

92
00:04:02,980 --> 00:04:06,060
We reference the dollar sign, the root element.

93
00:04:06,060 --> 00:04:07,720
And then we use hasSize.

94
00:04:07,720 --> 00:04:09,490
to actually check the size of the array.

95
00:04:09,490 --> 00:04:13,100
So we're going to verify the JSON array size is two.

96
00:04:13,100 --> 00:04:15,600
In this example, we have two elements of the array

97
00:04:15,600 --> 00:04:17,890
and this given test will pass accordingly.

98
00:04:17,890 --> 00:04:20,920
So just some quick examples here on using JsonPath.

99
00:04:20,920 --> 00:04:22,660
You'll see more examples of JsonPath

100
00:04:22,660 --> 00:04:24,210
as we work through the videos,

101
00:04:24,210 --> 00:04:26,290
but at least this is enough to kind of get us started

102
00:04:26,290 --> 00:04:28,090
and help us out with the fundamentals.

103
00:04:28,090 --> 00:04:30,230
Alrighty, so I'm getting pretty excited about this.

104
00:04:30,230 --> 00:04:31,550
Let's go ahead and move to the next video

105
00:04:31,550 --> 00:04:33,623
and let's go ahead and write a test.

