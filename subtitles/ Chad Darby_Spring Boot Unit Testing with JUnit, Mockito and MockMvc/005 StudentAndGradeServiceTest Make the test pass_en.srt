1
00:00:01,300 --> 00:00:02,133
Now we can go through

2
00:00:02,133 --> 00:00:05,590
and we can uncomment that previous code that we had.

3
00:00:05,590 --> 00:00:09,713
So uncomment the code for the college student = studentDao.

4
00:00:13,470 --> 00:00:16,470
Now I need to simply auto wire in the studentDao.

5
00:00:35,279 --> 00:00:37,240
And then notice here, findByEmailAddress,

6
00:00:37,240 --> 00:00:40,100
that method is not defined.

7
00:00:40,100 --> 00:00:41,880
That's a custom finder method

8
00:00:41,880 --> 00:00:43,890
so we need to go ahead and this method

9
00:00:43,890 --> 00:00:45,830
inside of our studentDao.

10
00:00:45,830 --> 00:00:47,530
So let's go ahead and do that now.

11
00:00:48,980 --> 00:00:51,363
So I'll simply create this public method,

12
00:00:54,927 --> 00:00:57,580
findByEmailAddress, and then we pass in

13
00:00:57,580 --> 00:00:59,513
the email address as a string.

14
00:01:07,150 --> 00:01:09,160
Excellent, and so remember behind the scenes,

15
00:01:09,160 --> 00:01:12,360
Spring Data JPA will automatically perform the query

16
00:01:12,360 --> 00:01:13,673
on the database for us.

17
00:01:23,580 --> 00:01:24,790
And then we have our asserts.

18
00:01:24,790 --> 00:01:27,243
We can uncomment this code for asserts.

19
00:01:30,360 --> 00:01:33,430
And we basically want to check to see if the email address,

20
00:01:33,430 --> 00:01:35,640
the expected email address matches with

21
00:01:35,640 --> 00:01:38,390
the actual student that we retrieved from the database.

22
00:01:40,880 --> 00:01:43,060
All right, let's go ahead and run this test,

23
00:01:43,060 --> 00:01:46,390
and we'll see that this test passed,

24
00:01:46,390 --> 00:01:48,920
which is really good, I'm happy about that.

25
00:01:48,920 --> 00:01:51,410
And this part is working so far.

26
00:01:51,410 --> 00:01:53,160
Now, one thing you may wonder,

27
00:01:53,160 --> 00:01:55,230
well, what about the database connection?

28
00:01:55,230 --> 00:01:57,740
Because in our application properties,

29
00:01:57,740 --> 00:01:59,840
the DB information is still commented out.

30
00:01:59,840 --> 00:02:02,320
I never really said, "Here's the database URL

31
00:02:02,320 --> 00:02:03,840
the user ID or the password."

32
00:02:03,840 --> 00:02:05,000
That's all commented out

33
00:02:05,000 --> 00:02:06,970
in our application at properties file.

34
00:02:06,970 --> 00:02:08,580
Well, here's some fun stuff.

35
00:02:08,580 --> 00:02:11,320
In Spring Boot, if an embedded database is

36
00:02:11,320 --> 00:02:14,330
listed as a dependency in your POM file,

37
00:02:14,330 --> 00:02:17,060
then Spring Boot will auto configure

38
00:02:17,060 --> 00:02:19,030
the database connection.

39
00:02:19,030 --> 00:02:21,140
Our project has H2 as a dependency,

40
00:02:21,140 --> 00:02:23,540
So Spring Boot will auto configure a connection

41
00:02:23,540 --> 00:02:25,580
to the embedded H2 database.

42
00:02:25,580 --> 00:02:27,910
So remember this H2 database is an embedded database

43
00:02:27,910 --> 00:02:30,780
that's in memory and Spring Boot can connect to it,

44
00:02:30,780 --> 00:02:33,100
use it just like a normal database that you would have

45
00:02:33,100 --> 00:02:35,920
doing selects, updates and so forth, inserts,

46
00:02:35,920 --> 00:02:36,980
and getting the data back.

47
00:02:36,980 --> 00:02:38,910
So we have a database that we're using.

48
00:02:38,910 --> 00:02:41,390
It's simply an in-memory temporary database.

49
00:02:41,390 --> 00:02:42,640
And like I mentioned earlier,

50
00:02:42,640 --> 00:02:46,010
these embedded H2 databases are very useful for testing

51
00:02:46,010 --> 00:02:47,870
because there's no network latency,

52
00:02:47,870 --> 00:02:50,560
minimizes the setup and so on.

53
00:02:50,560 --> 00:02:51,880
So that kind of explains

54
00:02:51,880 --> 00:02:54,330
the magic behind this auto configure

55
00:02:54,330 --> 00:02:56,723
with Spring Boot and embedded databases.

