WEBVTT
1
00:00:01.569 --> 00:00:02.950
Now that our setup code is in place,

2
00:00:02.950 --> 00:00:04.823
let's go ahead and add a new test.

3
00:00:10.530 --> 00:00:13.430
And this test will actually get data from a private field.

4
00:00:21.840 --> 00:00:24.820
And I actually want to read the data from the ID field

5
00:00:24.820 --> 00:00:25.973
for this given student.

6
00:00:26.860 --> 00:00:29.720
So I make use of reflection test UTS. Get field

7
00:00:29.720 --> 00:00:31.403
and give the object student one.

8
00:00:35.350 --> 00:00:37.243
The actual name of the field ID.

9
00:00:39.180 --> 00:00:42.083
And then I assert that, that value equal to one.

10
00:00:42.950 --> 00:00:43.783
So again

11
00:00:43.783 --> 00:00:46.253
we're actually accessing that private field directly.

12
00:00:48.520 --> 00:00:50.320
Now let's go ahead and run this test

13
00:00:52.640 --> 00:00:55.320
and we see that this test passes as desired.

14
00:00:55.320 --> 00:00:56.960
So this is really good.

15
00:00:56.960 --> 00:00:59.130
Now you may wonder, well, what's the big deal here

16
00:00:59.130 --> 00:01:02.320
'cuz we already have getters and setters for that ID field.

17
00:01:02.320 --> 00:01:03.153
Well imagine that,

18
00:01:03.153 --> 00:01:05.540
we could actually remove those getters and setters

19
00:01:05.540 --> 00:01:06.910
and this code will still work

20
00:01:06.910 --> 00:01:08.810
because we're not using those methods.

21
00:01:08.810 --> 00:01:10.650
We're actually accessing those fields directly

22
00:01:10.650 --> 00:01:12.640
using this reflection test details.

23
00:01:12.640 --> 00:01:14.210
Now remember the whole idea here

24
00:01:14.210 --> 00:01:15.410
with this reflection test tells is

25
00:01:15.410 --> 00:01:17.710
that you can access private fields

26
00:01:17.710 --> 00:01:18.920
in the event that they don't have

27
00:01:18.920 --> 00:01:20.240
public getters and settlements,

28
00:01:20.240 --> 00:01:22.510
We can still access those fields directly.

29
00:01:22.510 --> 00:01:24.323
And that's the main use case here.

30
00:01:30.120 --> 00:01:31.720
Let's go ahead and add another test here.

31
00:01:31.720 --> 00:01:33.710
And this is for invoking a private method

32
00:01:33.710 --> 00:01:35.343
or calling a private method.

33
00:01:43.060 --> 00:01:45.240
And we know that student class has a private method

34
00:01:45.240 --> 00:01:47.650
called get first name and ID.

35
00:01:47.650 --> 00:01:49.680
And I want to verify that I can actually call it

36
00:01:49.680 --> 00:01:51.730
and also verify the results of that call.

37
00:02:11.490 --> 00:02:13.790
I make use of ReflectionUtils that invoke method.

38
00:02:13.790 --> 00:02:16.780
I give the object, comma, the method name

39
00:02:16.780 --> 00:02:18.373
get first name and ID.

40
00:02:21.980 --> 00:02:24.030
And then I simply give a failure message.

41
00:02:29.007 --> 00:02:31.237
But I seem to have a small typo here.

42
00:02:31.237 --> 00:02:32.070
Okay, yeah.

43
00:02:32.070 --> 00:02:32.903
Let me fix that.

44
00:02:32.903 --> 00:02:35.750
Paran remove that and okay, now we're all good.

45
00:02:35.750 --> 00:02:36.780
Good to go here.

46
00:02:36.780 --> 00:02:37.940
I don't want any syntax errors

47
00:02:37.940 --> 00:02:40.340
like I had in a previous video.

48
00:02:40.340 --> 00:02:41.830
Let's go ahead and run the test

49
00:02:45.900 --> 00:02:47.280
and we see that this test passes.

50
00:02:47.280 --> 00:02:48.270
So this is excellent.

51
00:02:48.270 --> 00:02:50.150
We're able to invoke a private method

52
00:02:50.150 --> 00:02:50.983
on that class.

53
00:02:50.983 --> 00:02:53.100
Which is really, really cool.

54
00:02:53.100 --> 00:02:54.120
So good job.

55
00:02:54.120 --> 00:02:55.133
My friend.

