1
00:00:01,210 --> 00:00:03,610
All righty, so again, rinse and repeat.

2
00:00:03,610 --> 00:00:05,540
We have some of the work in place.

3
00:00:05,540 --> 00:00:07,190
Let's work on this next one here.

4
00:00:10,420 --> 00:00:12,813
So divisible by three and five.

5
00:00:22,619 --> 00:00:25,869
Or just copy one of our previous tests.

6
00:00:30,560 --> 00:00:34,083
And then we'll zoom in here and update the names.

7
00:00:36,560 --> 00:00:39,333
So divisible by three and five.

8
00:00:42,290 --> 00:00:44,520
And we'll also update the order.

9
00:00:44,520 --> 00:00:45,773
It's our third test.

10
00:00:46,860 --> 00:00:50,120
And now based on this logic, here are the rules.

11
00:00:50,120 --> 00:00:52,680
This should print FizzBuzz.

12
00:00:52,680 --> 00:00:56,040
So we expect FizzBuzz and we'll enter a number

13
00:00:56,040 --> 00:00:58,010
that's divisible by three and five.

14
00:00:58,010 --> 00:01:00,830
One example is 15 and we'll update the message

15
00:01:00,830 --> 00:01:02,813
should return FizzBuzz.

16
00:01:16,000 --> 00:01:17,380
Now, when we run this application

17
00:01:17,380 --> 00:01:20,333
our first two tests pass, but our last one fails.

18
00:01:22,490 --> 00:01:26,420
We expected FizzBuzz, but it returned Fizz.

19
00:01:26,420 --> 00:01:28,873
Okay, that's our failing test.

20
00:01:31,810 --> 00:01:34,623
Let's go back and modify our code to make the test pass.

21
00:01:38,529 --> 00:01:42,110
In this scenario we need to check the comparison earlier

22
00:01:42,110 --> 00:01:44,929
for three and five.

23
00:01:44,929 --> 00:01:47,690
So just one possible solution here, but I'll say

24
00:01:47,690 --> 00:01:49,650
if "i" is divisible by three

25
00:01:50,710 --> 00:01:54,603
and "i" is divisible by five,

26
00:02:04,994 --> 00:02:06,853
then we'll return FizzBuzz.

27
00:02:13,518 --> 00:02:14,740
All right, so we're just kind of using the logic

28
00:02:14,740 --> 00:02:19,530
that we have here to return FizzBuzz, Fizz, or Buzz.

29
00:02:23,210 --> 00:02:25,710
And let's test this out again by running our test.

30
00:02:29,420 --> 00:02:32,650
And excellent, great, so our first two test pass

31
00:02:32,650 --> 00:02:36,060
and also this new one here divisible by three and five,

32
00:02:36,060 --> 00:02:40,280
that one passed, it gave us FizzBuzz as expected.

33
00:02:40,280 --> 00:02:42,473
All right, good stuff here, good stuff.

34
00:02:48,150 --> 00:02:50,410
And now let's handle this last case here.

35
00:02:50,410 --> 00:02:53,250
If the number is not divisible by three or five.

36
00:02:53,250 --> 00:02:57,173
So we'll move down here, drop in our comment.

37
00:03:00,820 --> 00:03:02,953
We'll copy that previous test again.

38
00:03:38,181 --> 00:03:41,213
Alrighty, so in this case, not divisible by three or five

39
00:03:41,213 --> 00:03:44,100
then we simply want to return the number.

40
00:03:44,100 --> 00:03:46,447
So in this example here expected of "1".

41
00:03:48,070 --> 00:03:49,720
I do FizzBuzz compute of "1".

42
00:03:49,720 --> 00:03:52,587
It should simply return the number in this case "1".

43
00:04:05,137 --> 00:04:05,970
We'll run our test, of course,

44
00:04:05,970 --> 00:04:07,923
this is a failing test, right?

45
00:04:11,730 --> 00:04:13,980
So we expected one in this scenario

46
00:04:13,980 --> 00:04:15,940
and the actual value was no.

47
00:04:15,940 --> 00:04:17,113
Okay, no problem.

48
00:04:18,120 --> 00:04:19,779
So hopefully you're kind of getting a feel here

49
00:04:19,779 --> 00:04:21,560
for this whole test driven development

50
00:04:21,560 --> 00:04:23,090
writing a failing test, first,

51
00:04:23,090 --> 00:04:24,950
then we go back in and we modify our code

52
00:04:24,950 --> 00:04:27,070
to make the test pass.

53
00:04:27,070 --> 00:04:29,060
I'll zoom in here for a second.

54
00:04:29,060 --> 00:04:31,400
And this is basically the last case here.

55
00:04:31,400 --> 00:04:34,670
So I'll just say else return the number.

56
00:04:34,670 --> 00:04:37,270
So whatever the number came in as "i" I simply return that.

57
00:04:37,270 --> 00:04:38,980
But since we're returning strings

58
00:04:38,980 --> 00:04:40,490
I need to wrap this as a string

59
00:04:40,490 --> 00:04:44,260
and I'll say integer dot two string, the value of "i"

60
00:04:44,260 --> 00:04:46,963
and then also at the bottom, I remove the return, No.

61
00:04:47,880 --> 00:04:51,390
And so this is the code here that should work

62
00:04:51,390 --> 00:04:53,853
for this FizzBuzz scenario.

63
00:05:03,810 --> 00:05:05,810
And there we go, everything's green,

64
00:05:05,810 --> 00:05:07,390
all green, everything passed.

65
00:05:07,390 --> 00:05:09,680
So not divisible at three or five

66
00:05:09,680 --> 00:05:12,110
that test case worked out for us as desired.

67
00:05:12,110 --> 00:05:16,290
So, a sense of accomplishment, excitement

68
00:05:16,290 --> 00:05:18,940
and I'm happy over here, doing my little happy dance

69
00:05:18,940 --> 00:05:22,760
because we did some test driven development with FizzBuzz.

70
00:05:22,760 --> 00:05:25,873
So I'd like to say good job, my friend.

