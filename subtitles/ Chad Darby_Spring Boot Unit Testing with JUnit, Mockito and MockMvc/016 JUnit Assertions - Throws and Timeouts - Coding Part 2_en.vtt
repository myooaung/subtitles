WEBVTT
1
00:00:00.821 --> 00:00:02.780
Now let's look at a coding example

2
00:00:02.780 --> 00:00:04.883
for the assertion for Timeout.

3
00:00:11.420 --> 00:00:13.560
Moving over into our demo details class,

4
00:00:13.560 --> 00:00:16.149
here's the code that we want to test, check timeout.

5
00:00:16.149 --> 00:00:19.520
I want to make sure that this method doesn't over sleep.

6
00:00:19.520 --> 00:00:22.210
Right now it has a thread sleep for two seconds,

7
00:00:22.210 --> 00:00:24.113
make sure it doesn't go past that.

8
00:00:26.840 --> 00:00:28.500
I'll move back over to my test class

9
00:00:28.500 --> 00:00:30.000
and I'll set up a test method.

10
00:00:53.770 --> 00:00:56.923
Then I'll make use of our assert timeout preemptively.

11
00:00:59.930 --> 00:01:02.750
I'll give the duration of three seconds.

12
00:01:02.750 --> 00:01:04.200
You can feel free to experiment

13
00:01:04.200 --> 00:01:05.340
with these numbers if you'd like,

14
00:01:05.340 --> 00:01:08.413
you can set it to two to one to 100.

15
00:01:09.290 --> 00:01:11.563
I give the actual Lambda expression here.

16
00:01:16.140 --> 00:01:19.747
So in the curly braces demoUtils.checktimeout.

17
00:01:31.300 --> 00:01:33.540
And here I say the method should execute

18
00:01:33.540 --> 00:01:35.593
within three seconds.

19
00:01:42.770 --> 00:01:44.850
So the coding for this check timeout is set

20
00:01:44.850 --> 00:01:46.563
to sleep for two seconds.

21
00:01:52.090 --> 00:01:53.993
Now go ahead and run the test,

22
00:02:02.430 --> 00:02:06.560
and we see that this test pass as desired.

23
00:02:06.560 --> 00:02:09.639
So the actual code slept for two seconds

24
00:02:09.639 --> 00:02:11.820
and our tests we were asserting the time out

25
00:02:11.820 --> 00:02:14.453
of three seconds so that works out just fine.

26
00:02:23.620 --> 00:02:25.750
Now let's go ahead and play around with the code a bit.

27
00:02:25.750 --> 00:02:27.990
So instead of sleeping for two seconds,

28
00:02:27.990 --> 00:02:30.540
we'll sleep for five seconds

29
00:02:31.500 --> 00:02:33.533
or 5,000 milliseconds.

30
00:02:40.110 --> 00:02:41.873
Let's run this test one more time,

31
00:02:53.957 --> 00:02:57.874
and then we'll see that this given test failed.

32
00:02:58.986 --> 00:03:00.840
The method should execute it in three seconds

33
00:03:00.840 --> 00:03:03.883
but it went beyond three seconds so it failed.

34
00:03:09.453 --> 00:03:11.360
And then we can simply swing back into the code,

35
00:03:11.360 --> 00:03:12.910
set it back to two seconds

36
00:03:12.910 --> 00:03:15.660
and everything will work out just fine and pass for us.

37
00:03:22.398 --> 00:03:25.898
And we see that this test pass as desired.

38
00:03:26.900 --> 00:03:28.130
Alrighty, this looks really good.

39
00:03:28.130 --> 00:03:29.683
I'm happy with the work so far.

