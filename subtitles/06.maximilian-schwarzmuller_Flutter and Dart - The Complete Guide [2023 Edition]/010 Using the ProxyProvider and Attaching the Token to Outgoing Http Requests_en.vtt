WEBVTT
1
00:00:02.570 --> 00:00:08.360
So we have the token here in our auth class or in the concrete object based on that class here in the

2
00:00:08.360 --> 00:00:13.100
main.dart file and we use that token to find out that we're authenticated.

3
00:00:13.100 --> 00:00:19.600
Now that's nice but we also need that token for all the requests we're sending to the back-end, for example

4
00:00:19.870 --> 00:00:21.210
to fetch our products

5
00:00:21.220 --> 00:00:24.190
because right now, this doesn't work.

6
00:00:24.190 --> 00:00:27.210
So we need to attach the token to outgoing requests,

7
00:00:27.220 --> 00:00:30.010
the good thing is that Firebase supports that,

8
00:00:30.010 --> 00:00:32.800
it makes it pretty easy to attach the token.

9
00:00:32.800 --> 00:00:38.170
All we have to do for example in the products.dart file where we have our fetch and set products method

10
00:00:38.410 --> 00:00:40.550
which is the method failing here,

11
00:00:40.660 --> 00:00:43.360
there all we have to do is at the end of the

12
00:00:43.390 --> 00:00:51.520
URL, we have to add ?auth= and then add our token here as an argument.

13
00:00:51.520 --> 00:00:57.100
Now on other APIs, you might have to add a certain header which contains your token, that would of course

14
00:00:57.100 --> 00:01:03.670
always be possible on the HTTP method you're calling down there, please always remember you can set your

15
00:01:03.670 --> 00:01:11.050
own headers, so with the headers extra arguments here, you could provide a headers map basically to add

16
00:01:11.050 --> 00:01:16.840
extra headers to that outgoing request but Firebase does not want the token in a special header but in

17
00:01:16.840 --> 00:01:22.690
that so-called query parameter here at the end of the URL. So after that question mark which is required,

18
00:01:22.900 --> 00:01:29.620
you can have an arbitrary amount of key-value pairs and Firebase will look for an auth key and then the

19
00:01:29.620 --> 00:01:31.560
value should be your token.

20
00:01:31.570 --> 00:01:36.220
Now of course, we can't hardcode the token here because the token will be different for every user and

21
00:01:36.250 --> 00:01:37.150
every login,

22
00:01:37.180 --> 00:01:39.040
it's never the same token as before,

23
00:01:39.400 --> 00:01:46.450
so we obviously can't write it here into our code, that would render the whole login idea, pretty redundant.

24
00:01:46.450 --> 00:01:48.720
So we can't add it here, we need to fetch it

25
00:01:48.730 --> 00:01:52.660
but the problem is the token is in the auth.dart file.

26
00:01:52.660 --> 00:01:57.020
How do we get it into our products.dart file?

27
00:01:57.040 --> 00:02:03.530
Well, there is something we can do which we haven't done before. Products here is a normal class,

28
00:02:03.700 --> 00:02:12.970
so of course we could say that in there, we actually want to have a property which is final maybe, which

29
00:02:12.970 --> 00:02:14.080
is our token.

30
00:02:14.110 --> 00:02:22.560
So in there, we could have a string property which is the token or the authToken. Now to set this,

31
00:02:22.570 --> 00:02:24.520
we can add the constructor.

32
00:02:24.520 --> 00:02:30.110
We haven't had a constructor here yet because we always created products and actually all our provider

33
00:02:30.130 --> 00:02:32.310
classes here without any arguments

34
00:02:32.320 --> 00:02:34.030
but of course these are normal classes,

35
00:02:34.030 --> 00:02:40.780
so of course you can parse arguments to their constructors. So we can go to the products.dart file, add

36
00:02:40.780 --> 00:02:45.850
our constructor and expect the authToken as the only value here for example

37
00:02:45.850 --> 00:02:52.060
and of course you could expect more values. So if we take it for granted that we receive the token here,

38
00:02:52.560 --> 00:02:54.430
well then of course it's pretty easy to add it,

39
00:02:54.430 --> 00:02:56.350
it's now a property of this class,

40
00:02:56.350 --> 00:03:02.530
so here we can add ?auth, set this equal to and then use string interpolation to point at our

41
00:03:02.530 --> 00:03:03.610
authToken,

42
00:03:03.610 --> 00:03:09.010
the only adjustment we need besides adding this is that this is now of course no longer a compile time

43
00:03:09.010 --> 00:03:13.840
constant but runtime constant because that value, the token here is dynamic,

44
00:03:13.840 --> 00:03:18.310
so we have to change this to final URL instead of const.

45
00:03:18.310 --> 00:03:24.610
The question just is, how do we actually get the concrete token into our class? Because we're creating

46
00:03:24.610 --> 00:03:29.170
products here and this now expects the token but the token is inside of auth,

47
00:03:29.170 --> 00:03:36.100
so how do we get the token out of auth into here? You could find complex solutions where you actually

48
00:03:36.100 --> 00:03:43.390
manage the token outside of the auth class here in the widget and then you pass it to all your objects

49
00:03:43.390 --> 00:03:47.310
here and also pass it to the auth constructor to use it in there

50
00:03:47.500 --> 00:03:49.300
and that would be horrible.

51
00:03:49.300 --> 00:03:56.950
Thankfully, the provider package has an easy solution for this. Instead of using ChangeNotifierProvider

52
00:03:56.950 --> 00:04:07.360
here like this, you can use a different version of that, you can use the ChangeNotifierProxyProvider.

53
00:04:07.360 --> 00:04:09.850
Now this doesn't have a value constructor,

54
00:04:09.850 --> 00:04:15.040
so instead you have to use that normal constructor with a builder which I showed you earlier and it

55
00:04:15.040 --> 00:04:21.130
forces you into that builder for a good reason because that builder actually gives you a context and

56
00:04:21.130 --> 00:04:26.940
then it gives you a dynamic value and that dynamic value is the interesting part here. The context is

57
00:04:26.940 --> 00:04:32.640
simply a new context it generates for you, you can also use an underscore here but we can also just

58
00:04:32.640 --> 00:04:33.880
give it a name,

59
00:04:33.900 --> 00:04:39.510
the dynamic part is the interesting part because ChangeNotifierProxyProvider actually is a generic

60
00:04:39.510 --> 00:04:44.730
class and you should add the angled brackets here to give it an extra piece of information which it needs

61
00:04:44.730 --> 00:04:46.290
to work correctly.

62
00:04:46.290 --> 00:04:54.180
This allows you to set up a provider which itself depends on another provider which was defined before

63
00:04:54.180 --> 00:04:54.720
this one.

64
00:04:55.050 --> 00:04:59.730
So you have to make sure that your auth provider is the first one in the list and then the other providers

65
00:04:59.730 --> 00:05:02.000
can depend on it.

66
00:05:02.010 --> 00:05:08.880
So here you can pass in auth, this auth class and what the provider package will now do is it will have a

67
00:05:08.880 --> 00:05:16.530
look at your provider tree here basically and will see if it finds a provider that provides an auth

68
00:05:16.560 --> 00:05:23.880
object before that provider, which it does here, and then it will take that auth object and give that to

69
00:05:23.880 --> 00:05:24.660
you here.

70
00:05:24.660 --> 00:05:33.270
So now that builder here actually will receive that auth object and whenever auth changes, this provider

71
00:05:33.270 --> 00:05:39.180
here will also be rebuilt, only this one, not the entire widget, not the other providers but this provider

72
00:05:39.240 --> 00:05:46.100
will be rebuilt when this changes because this here, this auth object is now a dependency of this provider,

73
00:05:46.110 --> 00:05:48.620
so it makes sense that this provider rebuilds,

74
00:05:48.690 --> 00:05:57.390
so a new products object here would be built when auth changes. Now actually, you need to provide a second

75
00:05:57.630 --> 00:05:58.410
argument here - 

76
00:05:58.410 --> 00:06:03.410
the first is the class, the type of data you depend on,

77
00:06:03.420 --> 00:06:09.780
the second is the type of data you will provide here and that will of course be products. Previously for

78
00:06:09.780 --> 00:06:12.770
the value constructor, we didn't have to do that

79
00:06:12.840 --> 00:06:17.080
but for this ProxyProvider, you do have to do that.

80
00:06:17.460 --> 00:06:22.950
Now the builder here also gives you a third argument and that's your previous state,

81
00:06:22.950 --> 00:06:27.820
so your old products object, so previous product so to say

82
00:06:28.080 --> 00:06:31.900
and that is of course useful for maintaining our state.

83
00:06:31.920 --> 00:06:39.060
So here, we return a new object of type products and we pass in auth.token here.

84
00:06:39.060 --> 00:06:44.670
Now we have the token but now we have to make sure that when this gets rebuilt and we create a new instance

85
00:06:44.670 --> 00:06:51.680
of products, we of course don't lose all the data we had in there before because in products, you must not

86
00:06:51.720 --> 00:06:54.820
forget that you had a list of your products.

87
00:06:54.810 --> 00:06:57.240
That was the key thing we were managing in there,

88
00:06:57.270 --> 00:07:02.710
the list of our items. Now of course, it would be pretty bad if we would lose that list.

89
00:07:02.730 --> 00:07:12.960
So actually, what we want to do here is you want to make sure that we initialize these items as well as

90
00:07:12.960 --> 00:07:18.850
a second value and now back in the main.dart file, you simply pass in

91
00:07:21.770 --> 00:07:29.620
previousProducts.items here. Though please keep in mind that when this first is loaded, we don't

92
00:07:29.620 --> 00:07:35.230
have that, we have no items and previous products is null when this is first initiated,

93
00:07:35.710 --> 00:07:40.760
so therefore we want to check if previous products is set and if it is equal to null,

94
00:07:40.780 --> 00:07:46.390
so if it's not available, then I actually want to initialize this with an empty array and only if it's

95
00:07:46.390 --> 00:07:52.560
not equal to null, I will access the previousProducts.items here.

96
00:07:52.570 --> 00:07:57.940
So now this will create the products object with my token and then either with an empty list of products

97
00:07:58.060 --> 00:08:04.480
or with the previous items we had. Now in case by the way you have more than one dependency, here we

98
00:08:04.480 --> 00:08:05.160
only have one

99
00:08:05.170 --> 00:08:10.190
but if you had more than one, there are other versions of that constructor too. You have

100
00:08:10.190 --> 00:08:16.240
ChangeNotifierProxyProvider2, 3, 4 all the way to 6 for up to six dependencies you can specify

101
00:08:16.240 --> 00:08:21.610
but here we only have one dependency, so we can use the base version. With that, if we save that and do

102
00:08:21.610 --> 00:08:29.840
a hot refresh, we should now be able to login and then hopefully use that token when we fetch our products.

103
00:08:29.860 --> 00:08:32.530
So let's enter that, login,

104
00:08:32.799 --> 00:08:38.760
take into that screen and we successfully load our products and we see the products here again.

105
00:08:38.799 --> 00:08:43.870
So that's pretty nice, with that we can use the token. Of course we don't testing that for fetching

106
00:08:43.870 --> 00:08:46.770
the products but that's an important first step.

107
00:08:47.110 --> 00:08:53.080
Definitely feel free to add the token to all other HTTP requests we're making from inside products.dart and

108
00:08:53.080 --> 00:08:59.220
if you're really fancy, fix all the other providers where we need the token as well.

109
00:08:59.350 --> 00:09:01.030
In the next video, we'll do that together.

