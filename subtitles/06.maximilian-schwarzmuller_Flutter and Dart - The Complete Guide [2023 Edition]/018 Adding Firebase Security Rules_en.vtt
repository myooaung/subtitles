WEBVTT
1
00:00:02.480 --> 00:00:06.470
Let's talk about fire base fire store rules.

2
00:00:06.890 --> 00:00:14.660
You probably didn't think about it yet, but wasn't it strange that we were able to read and write to

3
00:00:14.660 --> 00:00:22.100
this chat's collection earlier in this module, before we added authentication and users put in our

4
00:00:22.100 --> 00:00:29.030
words, our Flutter app was able to communicate with this database without an authenticated user.

5
00:00:29.060 --> 00:00:35.270
Now, sure, we did connect our app to Firebase, so there is some connection there.

6
00:00:35.390 --> 00:00:43.040
But what if I would tell you that technically anyone who knew your project ID, let's say, would be

7
00:00:43.040 --> 00:00:45.030
able to talk to your database.

8
00:00:45.050 --> 00:00:51.710
Now, of course, knowing your ID is not something that's that easy, but it's definitely not advisable

9
00:00:51.710 --> 00:00:57.250
to leave your database open like this, even if it's hard to find the exact address.

10
00:00:57.260 --> 00:00:59.060
It would be possible technically.

11
00:00:59.780 --> 00:01:07.310
So instead, you typically want to lock your database down to only your authenticated users because

12
00:01:07.310 --> 00:01:13.730
then only users who were authenticated with your project, which happens through the Firebase SDK only

13
00:01:13.730 --> 00:01:19.820
such authenticated users are able to write to your database and as an extra side effect, you then also

14
00:01:19.820 --> 00:01:21.020
have a clear trace.

15
00:01:21.020 --> 00:01:22.550
Who wrote what?

16
00:01:23.330 --> 00:01:29.330
Now you can configure something like this through that rules tab here in the database area.

17
00:01:29.380 --> 00:01:37.650
Now, Firestone rules are pretty flexible and also pretty not complex, but got a lot of features.

18
00:01:37.670 --> 00:01:44.270
You can view the official docs to learn all about Firebase Rules, and I would strongly recommend that

19
00:01:44.270 --> 00:01:49.940
you do so if you plan on using Firebase in your app because there's a lot you can configure.

20
00:01:50.030 --> 00:01:52.550
Basically every use case is possible.

21
00:01:52.550 --> 00:01:59.000
You can configure that some collection is locked down to a specific user whilst other collections are

22
00:01:59.000 --> 00:02:00.140
open to everyone.

23
00:02:00.140 --> 00:02:06.080
So there's a lot you can configure and therefore the official docs are the place to go if you want to

24
00:02:06.080 --> 00:02:07.070
use Firebase.

25
00:02:07.070 --> 00:02:11.750
This is not a Firebase course, so I will only scratch the surface here.

26
00:02:12.170 --> 00:02:19.490
Generally the rules here are set up here in this rules tab and there is an extra little programming

27
00:02:19.490 --> 00:02:24.710
language you could say the Firebase team invented, which allows you to configure those rules.

28
00:02:24.830 --> 00:02:26.810
In the end, rules work like this.

29
00:02:26.900 --> 00:02:34.310
You have a match string here and you can also have nested match strings like this one which describe

30
00:02:34.310 --> 00:02:40.550
the path to which a request was sent and then the rules that apply for such a request.

31
00:02:40.640 --> 00:02:47.090
Now this is the general request to your database, so you typically leave that unless you know what

32
00:02:47.090 --> 00:02:47.780
you want to do.

33
00:02:47.780 --> 00:02:54.860
But then you have these nested matches here which match individual paths inside of your project.

34
00:02:54.860 --> 00:03:03.260
So for example, if we would want to lock down access to this chat collection and for that I'll open

35
00:03:03.260 --> 00:03:04.190
it in a new tab.

36
00:03:04.190 --> 00:03:10.880
If I would want to lock down access to this chat collection, I could add a new match here.

37
00:03:11.870 --> 00:03:13.310
Let me delete all of that.

38
00:03:14.070 --> 00:03:22.110
I could add a new match here where I say, if we target Chet's and let me add this here in front of

39
00:03:22.110 --> 00:03:29.040
the other match, if we target Chet's, then a new set of rules should apply.

40
00:03:29.070 --> 00:03:32.370
You put your rules for this match between curly braces.

41
00:03:32.370 --> 00:03:34.020
Then and then.

42
00:03:34.020 --> 00:03:35.760
A rule is written like this.

43
00:03:35.760 --> 00:03:39.870
Here you can allow certain kinds of excess.

44
00:03:40.080 --> 00:03:44.870
If you don't match a certain path by default, nothing is allowed.

45
00:03:44.880 --> 00:03:50.430
So if I would remove this match which grants access to all documents in any collection, that's what

46
00:03:50.430 --> 00:03:51.300
this means here.

47
00:03:51.540 --> 00:03:57.120
If I would delete this and I would delete this, then everything would be locked down as a default.

48
00:03:57.120 --> 00:04:02.820
But of course, then even we with authenticated users wouldn't be able to communicate because by default

49
00:04:02.820 --> 00:04:06.240
it's locked down for everyone, including authenticated users.

50
00:04:06.420 --> 00:04:09.570
So I'll bring this back so that we can set the step by step.

51
00:04:10.200 --> 00:04:16.649
So here we now have a new match for chats and after allow you can define what you want to allow.

52
00:04:16.649 --> 00:04:19.829
For example, read and write seperated with commas.

53
00:04:19.950 --> 00:04:25.740
You could also be more specific and say, I want to allow read and I want to allow creating documents.

54
00:04:25.740 --> 00:04:28.650
But deleting and updating would not be allowed.

55
00:04:28.740 --> 00:04:29.360
Right.

56
00:04:29.370 --> 00:04:34.440
On the other hand, is basically allowing, create, update and delete.

57
00:04:34.680 --> 00:04:37.220
So you can really be very granular here.

58
00:04:37.230 --> 00:04:41.610
And then after a colon, you have your condition when this is allowed.

59
00:04:41.850 --> 00:04:47.250
And here, for example, you can access a special request object which is available here in the rules

60
00:04:47.250 --> 00:04:49.770
where you can access the auth information.

61
00:04:49.770 --> 00:04:55.920
And for example, if you say auth unequal to null, you would say if there is some auth information

62
00:04:55.920 --> 00:04:56.970
on the request.

63
00:04:56.970 --> 00:05:03.180
So if the user is authenticated, if this comes from an authenticated user only then such auth information

64
00:05:03.180 --> 00:05:04.470
will be on the request.

65
00:05:04.470 --> 00:05:06.780
Then I want to allow read and write.

66
00:05:06.780 --> 00:05:07.220
So put.

67
00:05:07.260 --> 00:05:12.120
In other words, unauthenticated users would now not be allowed to read and write.

68
00:05:12.300 --> 00:05:15.870
And that's, for example, what I'll now do down there, I will say.

69
00:05:16.940 --> 00:05:22.100
Access to my documents is by default only possible for authenticated users.

70
00:05:22.190 --> 00:05:27.920
And as I just said, this here is a special syntax, which means all documents in all collections.

71
00:05:27.920 --> 00:05:30.950
It's a wild card placeholder, so to say.

72
00:05:30.980 --> 00:05:36.230
Now, of course, I can delete this extra rule because now we got this more general rule down there.

73
00:05:36.770 --> 00:05:39.960
And that is a change that makes sense here.

74
00:05:39.990 --> 00:05:40.820
My opinion.

75
00:05:41.560 --> 00:05:45.330
But actually I don't want to give this general access to everything.

76
00:05:45.340 --> 00:05:47.290
I want to be a bit more granular here.

77
00:05:47.710 --> 00:05:55.090
And for example, I would say it makes sense that we grant access to users, to the user who owns a

78
00:05:55.090 --> 00:06:00.610
document so that not every authenticated user can manipulate any user that's being stored.

79
00:06:00.610 --> 00:06:04.070
And users know you should only be able to edit yourself.

80
00:06:04.090 --> 00:06:12.040
So I only want to grant access to users, or let's say I want to grant right access to users if you

81
00:06:12.040 --> 00:06:13.660
are the user with this ID.

82
00:06:13.660 --> 00:06:17.390
So you can only edit your specific user document.

83
00:06:17.410 --> 00:06:19.270
And that's possible with rules.

84
00:06:19.690 --> 00:06:26.770
You can add a new match and say for the user's collection for user ID, which is of course flexible.

85
00:06:26.980 --> 00:06:28.480
There are multiple IDs.

86
00:06:28.480 --> 00:06:30.010
You can use such a placeholder.

87
00:06:30.010 --> 00:06:32.830
Therefore that basically means for any ID.

88
00:06:33.520 --> 00:06:40.450
We now want to have a rule and there I want to allow writing if request of.

89
00:06:41.220 --> 00:06:42.180
Unequal now.

90
00:06:42.180 --> 00:06:50.070
So if the request comes from an authenticated user and with the double ampersand symbol here, if request

91
00:06:50.550 --> 00:06:57.990
of UUID, which is a field that is available on the off object on the incoming request, is equal to

92
00:06:57.990 --> 00:07:00.510
the UID we have here in the path.

93
00:07:00.510 --> 00:07:06.810
So you can specify placeholders like this in a path and you can then reference them in your condition

94
00:07:06.810 --> 00:07:07.740
if you want to.

95
00:07:07.770 --> 00:07:14.910
And with that, I'm saying only if the incoming request is authenticated and it's authenticated by the

96
00:07:14.910 --> 00:07:20.010
user with the user ID of the document I'm trying to edit only then.

97
00:07:20.010 --> 00:07:20.580
Right.

98
00:07:20.580 --> 00:07:22.170
Access is granted.

99
00:07:23.510 --> 00:07:31.970
On the other hand, I'll say users for any user ID, I want to allow remote access for any authenticated

100
00:07:31.970 --> 00:07:35.510
user, so I'll just check if off is unequal to now.

101
00:07:35.540 --> 00:07:41.630
I don't care if it's the user with the same ID, so the user data can be read by anyone but only written

102
00:07:41.630 --> 00:07:44.060
by the user to whom the ID belongs.

103
00:07:44.090 --> 00:07:47.180
That is one possible rule you could set up here.

104
00:07:47.210 --> 00:07:52.190
Now again, the official docs dive way deeper than that, but this hopefully gives you a feeling for

105
00:07:52.190 --> 00:07:53.210
how this works.

106
00:07:54.250 --> 00:08:01.450
And with that, we can also add an extra a new match here where we target the chess collection and then

107
00:08:01.450 --> 00:08:03.160
any document in there.

108
00:08:03.160 --> 00:08:08.130
And for that, I'll again use this special syntax here with the double asterisk.

109
00:08:08.140 --> 00:08:14.380
This means any nested collection and or any nested document for any such document.

110
00:08:14.380 --> 00:08:19.030
I want to add a new rule and allow reading.

111
00:08:19.890 --> 00:08:21.960
By any authenticated user.

112
00:08:21.960 --> 00:08:29.550
So if request off is unequal to null, anyone should be able to read my chats or any authenticated user

113
00:08:29.550 --> 00:08:32.400
should be able to read everything in chats.

114
00:08:32.820 --> 00:08:36.570
And in addition, every user should be able to create data in there.

115
00:08:36.570 --> 00:08:40.950
For example, new messages that should be possible for every user here.

116
00:08:41.429 --> 00:08:44.910
Now, we can always find you in this later, but this should be a good start.

117
00:08:44.940 --> 00:08:45.210
Now.

118
00:08:45.210 --> 00:08:50.430
You always need to publish your rules after you edit the them and you can also check if they're right

119
00:08:50.430 --> 00:08:52.440
with the rules playground there.

120
00:08:52.440 --> 00:08:59.460
You can send dummy requests which don't really edit the database but basically simulate such an incoming

121
00:08:59.460 --> 00:09:04.290
request and you can simulate, get, create, update and delete requests.

122
00:09:04.290 --> 00:09:10.980
You can also simulate that this comes from an authenticated user and you can also, for example, add

123
00:09:10.980 --> 00:09:14.310
extra authentication data like the user ID.

124
00:09:14.340 --> 00:09:16.350
That's part of the incoming request.

125
00:09:16.350 --> 00:09:17.820
So you can play around with that.

126
00:09:17.820 --> 00:09:22.950
You see what will be part of the incoming request that's being simulated and that should allow you to

127
00:09:22.950 --> 00:09:25.320
validate your rules now.

128
00:09:25.320 --> 00:09:30.510
Well, of course, also see if those rules fail, if we then try to interact with the database, which

129
00:09:30.510 --> 00:09:36.300
we're going to do now with the rules set up, we can now finally continue working on our chat screen

130
00:09:36.300 --> 00:09:42.720
here and make sure that we're able to really send chat messages and read them here as well.

