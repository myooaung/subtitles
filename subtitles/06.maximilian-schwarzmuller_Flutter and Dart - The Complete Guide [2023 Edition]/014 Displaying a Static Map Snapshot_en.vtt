WEBVTT
1
00:00:02.630 --> 00:00:07.780
Now we'll use the Google Maps platform, the Google Maps API for that and the important part here is that

2
00:00:07.780 --> 00:00:12.040
you unfortunately need a credit card to use that.

3
00:00:12.310 --> 00:00:18.190
With that, you get $200 of free usage, at the moment at least and that will very likely stay

4
00:00:18.190 --> 00:00:24.790
around, you get that for all these APIs we're about to use and that's so much that you won't pay anything

5
00:00:24.940 --> 00:00:27.190
for the things we do in this course.

6
00:00:27.190 --> 00:00:31.120
So the usage will be free for the things we do

7
00:00:31.210 --> 00:00:32.890
but you need that credit card

8
00:00:32.890 --> 00:00:36.160
unfortunately, there is no way around that when using the Google Maps API.

9
00:00:36.970 --> 00:00:42.430
So once you set up your Google account with a credit card in there and you enable billing, you should

10
00:00:42.430 --> 00:00:50.140
be able to get started and I'll start there with maps because I want to generate a static map

11
00:00:50.140 --> 00:00:55.660
as it's called, such an image snapshot of a map and click get started there

12
00:00:55.660 --> 00:00:58.900
and now the first step is to pick the products you want to use and that will be maps

13
00:00:58.900 --> 00:01:05.349
but it also will be places, which helps us with later converting our coordinates to a human readable

14
00:01:05.440 --> 00:01:06.530
address,

15
00:01:06.670 --> 00:01:12.150
we don't need routes because we won't add any navigation here. Continue announced like the project

16
00:01:12.160 --> 00:01:16.140
and here you can create a new project if you want to,

17
00:01:16.150 --> 00:01:21.910
alternatively you could also pick your Firebase project used earlier because Firebase belongs to Google,

18
00:01:21.940 --> 00:01:24.450
so you can use that project as well,

19
00:01:25.000 --> 00:01:31.240
I'll turn a new project here though, add this and now this enables the Google Maps platform for

20
00:01:31.240 --> 00:01:32.450
this project,

21
00:01:32.530 --> 00:01:40.320
again billing account and credit card is required and once this is done, you're asked whether you want to

22
00:01:40.320 --> 00:01:50.160
use your current account with which you logged in for the billing and I'll use that, click next here

23
00:01:53.300 --> 00:01:56.910
and this enables the Google Maps platform now for this account

24
00:01:57.140 --> 00:02:03.670
and once this is done, you're presented with an API key here. You can simply copy that API key because

25
00:02:03.670 --> 00:02:06.860
you'll need that to make your requests

26
00:02:07.030 --> 00:02:11.800
and now here, I actually want to create a new helper file which I'll name location_helper

27
00:02:12.160 --> 00:02:19.180
which should then be responsible for making all these requests to Google APIs. So in there,

28
00:02:19.210 --> 00:02:26.200
I'll store a const, a global const, not in a class but a const like this which I'll name

29
00:02:26.320 --> 00:02:31.310
GOOGLE_API_KEY and that's just the API key that was generated for me here

30
00:02:32.890 --> 00:02:36.390
and now I'll add a class, the location helper class

31
00:02:36.400 --> 00:02:41.320
and again, this will have a couple of static methods which we can use without instantiating that class

32
00:02:41.650 --> 00:02:43.110
from outside of this file

33
00:02:43.110 --> 00:02:50.950
later. Now in there, I want to have a method, a static method which returns a string which I'll call 

34
00:02:51.400 --> 00:02:54.040
generate location preview image

35
00:02:54.130 --> 00:02:59.140
and of course you can also pick a different name if you find this one a little bit too long.

36
00:02:59.290 --> 00:03:04.750
Now in there, I want to get two arguments and I'll turn them into named arguments by wrapping them in

37
00:03:04.780 --> 00:03:06.260
curly braces,

38
00:03:06.340 --> 00:03:11.760
one is the latitude which is a double and the other is the longitude which is a double,

39
00:03:11.860 --> 00:03:17.200
so that coordinate pair which either allows us to identify any place on the world.

40
00:03:17.200 --> 00:03:25.090
Now here, I now want to return a URL to such an image which is dynamically generated by Google

41
00:03:25.090 --> 00:03:30.660
based on that pair of coordinates and that's really easy to do.

42
00:03:30.910 --> 00:03:37.630
You can search for Google Maps static API to find the official docs for this API

43
00:03:37.840 --> 00:03:39.510
and there, you can learn more about this feature

44
00:03:39.520 --> 00:03:45.910
but in the end, it's this URL what you want to use to build such a static snapshot image of your

45
00:03:46.420 --> 00:03:53.500
selected place. So you can just copy in this string here between quotes and now of course adjust it

46
00:03:53.500 --> 00:03:56.260
a little bit. For one here, center

47
00:03:56.270 --> 00:04:03.780
here is an address, for us, it should actually be a pair of latitude and longitude but that's no problem,

48
00:04:03.790 --> 00:04:07.030
you can simply replace that Brooklyn Bridge part here,

49
00:04:07.030 --> 00:04:13.480
so everything between the center equals sign and the ampersand, you can replace that with a latitude and

50
00:04:13.510 --> 00:04:23.060
longitude pair, so you simply enter, with string interpolation, latitude here and then a comma and then

51
00:04:23.750 --> 00:04:26.990
longitude using the latitude and longitude we're getting here,

52
00:04:30.240 --> 00:04:34.710
then have that ampersand thereafter to go back to the normal string.

53
00:04:34.710 --> 00:04:37.440
Zoom is how far you want to be zoomed in,

54
00:04:37.440 --> 00:04:42.650
maybe you zoom 16, you can play around with these values. The size you want to use,

55
00:04:42.660 --> 00:04:47.220
so the size which you want to generate and I'll leave that size but you can also change this,

56
00:04:47.220 --> 00:04:52.140
that's width times height. The map type you want to have, route type is that

57
00:04:52.140 --> 00:04:54.070
default Google map you're used to, so I'll

58
00:04:54.090 --> 00:04:58.720
keep that and then here, you could add markers.

59
00:04:58.720 --> 00:05:05.680
I want to add one marker indeed, so I'll actually remove this line here though because I don't need that

60
00:05:05.680 --> 00:05:06.390
many markers,

61
00:05:06.400 --> 00:05:11.630
I want to have one marker and bring that in the same line so that we have no line breaks in there,

62
00:05:11.710 --> 00:05:18.550
so we have Ampersand markers color red where you can change the color of the marker and then here,

63
00:05:21.310 --> 00:05:28.800
our latitude again with string interpolation and our longitude,

64
00:05:28.820 --> 00:05:35.290
so again entering these coordinates here where this marker should be placed.

65
00:05:35.310 --> 00:05:41.550
Now this here also needs to be added to that first line, so that we have in the line breaks here and

66
00:05:41.550 --> 00:05:48.960
that's our API key and therefore this is this Google API key constant I set up, again added with string interpolation.

67
00:05:50.260 --> 00:05:55.450
So that's the finished URL and I just returned this URL here in this method and this

68
00:05:55.450 --> 00:06:01.990
URL will give us an image of the map location we chose on the fly.

69
00:06:01.990 --> 00:06:09.340
So now we can work with that here in location input, in our location input widget when we have get current

70
00:06:09.340 --> 00:06:12.800
location and we have that location data here,

71
00:06:12.850 --> 00:06:21.490
well now we just want to import our helper from the helpers folder, the location_helper.dart file and

72
00:06:21.490 --> 00:06:32.330
then here, simply call locationHelper.generateLocationPreviewImage and pass in locData.latitude

73
00:06:32.870 --> 00:06:35.660
and locData.longitude, that's the data

74
00:06:35.660 --> 00:06:43.000
this method requires and I use the named arguments in there so we should assign this as named arguments

75
00:06:43.000 --> 00:06:53.330
of course to the longitude and a latitude named arguments and we get back that URL so that preview

76
00:06:53.340 --> 00:07:00.980
URL or that static map imageUrl if you want to be very precise and that's now what

77
00:07:00.980 --> 00:07:06.740
I want to store here in this property, of course with set state so that this widget is rebuilt and

78
00:07:06.740 --> 00:07:11.480
we actually see that change when we actually do render that image.

79
00:07:11.480 --> 00:07:17.540
So inside of set state, I'll now set my preview imageUrl equal to that static map imageUrl

80
00:07:17.560 --> 00:07:25.080
we're generating here. And with that, if we save that and do a restart, we should be able to select

81
00:07:25.140 --> 00:07:31.930
our current location, again as simulated by the emulator here and see a preview.

82
00:07:31.950 --> 00:07:38.420
So let me click current location and here is a preview as you can tell,

83
00:07:38.480 --> 00:07:44.660
as I said, the default location is here on Googleplex. Now one side note here, on the Android emulator if

84
00:07:44.660 --> 00:07:52.640
you click these three dots, you can also adjust settings and there, you can also adjust the location where

85
00:07:52.640 --> 00:07:53.030
you're at,

86
00:07:53.030 --> 00:07:57.590
here you can edit these coordinates if you want to test this with a different location than this one

87
00:07:58.400 --> 00:08:05.840
and also one tiny thing. The label for that marker by default here is c, you can of course change

88
00:08:05.840 --> 00:08:06.510
this

89
00:08:06.800 --> 00:08:13.220
and this should be one character but I'll simply change this to a now because it is the only

90
00:08:13.220 --> 00:08:14.450
location we basically have,

91
00:08:14.510 --> 00:08:18.690
so if you click current location again, you now have a in there.

92
00:08:18.710 --> 00:08:20.460
So this is now working,

93
00:08:20.510 --> 00:08:26.940
now it would of course be nice if we could as an alternative then also select a place on the map.

94
00:08:27.050 --> 00:08:29.000
So that's the next thing we'll work on.

