1
00:00:02,230 --> 00:00:06,520
So that was Android emulator and the real device.

2
00:00:06,550 --> 00:00:08,109
Now what about iOS?

3
00:00:08,140 --> 00:00:12,730
Now important to build an iOS app, you need the Mac OS operating system.

4
00:00:12,730 --> 00:00:15,220
That is a restriction applied by Apple.

5
00:00:15,640 --> 00:00:19,440
You can't build your Flutter app for iOS on Windows or Linux.

6
00:00:19,450 --> 00:00:21,040
You need Mac OS.

7
00:00:21,340 --> 00:00:29,920
If you are on Mac OS, then you can of course also test the app on a simulator or also on a real device.

8
00:00:30,220 --> 00:00:36,580
Now for that you need Xcode and I showed you how to install Xcode in the first module of this course.

9
00:00:36,580 --> 00:00:40,540
So you should be able to launch Xcode and see that welcome screen there.

10
00:00:40,900 --> 00:00:43,960
Now in there, open another project.

11
00:00:43,960 --> 00:00:45,160
Click that button.

12
00:00:45,940 --> 00:00:52,480
And then navigate to your Flutter project folder and there to the iOS folder and choose that runner

13
00:00:52,480 --> 00:00:54,080
Xcode Project file.

14
00:00:54,100 --> 00:00:57,310
Open that as a project in Xcode.

15
00:00:57,340 --> 00:01:01,180
Now here you could write code, but that's not what we'll do.

16
00:01:01,210 --> 00:01:03,750
We'll stick to Visual Studio code for that.

17
00:01:03,760 --> 00:01:08,830
But here we can also configure this so that we can run it on a simulator.

18
00:01:08,920 --> 00:01:11,530
And there's one important thing you need to set up.

19
00:01:11,680 --> 00:01:18,280
Click on this project icon here on this route, icon here, this route element in the left bar here

20
00:01:18,280 --> 00:01:20,820
where you can get by clicking this folder icon here.

21
00:01:20,830 --> 00:01:23,440
So click on that so that you have this view.

22
00:01:23,560 --> 00:01:28,930
And then here you might see that signing for Runner requires a development team for that.

23
00:01:28,930 --> 00:01:33,340
Here in this dropdown, you should choose a team and normally you should have one.

24
00:01:33,340 --> 00:01:40,210
If you don't have a team here, click on add an account and add your Apple account with your apple ID

25
00:01:40,240 --> 00:01:41,770
here to Xcode.

26
00:01:42,070 --> 00:01:47,500
So here you can either create a new one if you don't have one, or you log in with an existing account.

27
00:01:47,800 --> 00:01:55,480
Now important for developing iOS apps, you need an Apple developer account and you can activate one

28
00:01:55,480 --> 00:02:01,870
for your Apple ID, which you probably already have by going to developer Apple.com.

29
00:02:03,150 --> 00:02:05,040
And their click on account.

30
00:02:05,670 --> 00:02:12,390
Now here you now have to log in with your apple ID and the process should start, which turns you into

31
00:02:12,390 --> 00:02:13,530
an apple developer.

32
00:02:13,530 --> 00:02:19,620
Whilst you need to agree to some terms, what you don't need to do to develop apps is pay.

33
00:02:19,650 --> 00:02:25,200
You will have to pay a fee to really publish your app to the Apple App Store.

34
00:02:25,200 --> 00:02:30,920
But for developing and testing your app, you don't need a paid account, so no need to pay.

35
00:02:30,930 --> 00:02:33,780
You just need a normal apple developer account.

36
00:02:33,810 --> 00:02:40,680
Once you have that, you should be able to select your team here in Xcode and use that for this project.

37
00:02:40,800 --> 00:02:43,110
Now, once you did this, once, you should be fine.

38
00:02:43,110 --> 00:02:49,470
And now you can run your project either through Xcode by selecting a simulator here and clicking the

39
00:02:49,470 --> 00:02:53,160
run button or select a real connected device if you have one.

40
00:02:53,340 --> 00:03:00,720
But you can also do it here from within which due to code, by going to the terminal and there in your

41
00:03:00,720 --> 00:03:01,810
normal system terminal.

42
00:03:01,830 --> 00:03:03,390
You can run open.

43
00:03:04,330 --> 00:03:06,910
Dash a simulator app.

44
00:03:06,910 --> 00:03:10,930
And what this will do is it will bring up an iOS simulator.

45
00:03:12,410 --> 00:03:13,610
Here it is.

46
00:03:14,000 --> 00:03:14,610
Let me close.

47
00:03:14,630 --> 00:03:15,080
Xcode.

48
00:03:15,080 --> 00:03:16,460
We don't need that anymore.

49
00:03:16,490 --> 00:03:19,420
Let me move the Android simulator over there.

50
00:03:19,430 --> 00:03:20,570
And now here.

51
00:03:21,840 --> 00:03:24,710
And now here is the ice simulator.

52
00:03:24,720 --> 00:03:28,740
And again, you could have launched that through Xcode as well if you wanted to.

53
00:03:29,220 --> 00:03:35,970
Now, this is booting up and as soon as this simulator is done booting up, we can select it down here.

54
00:03:36,120 --> 00:03:37,500
Well, actually, I can already do that.

55
00:03:37,500 --> 00:03:42,780
So you can select your simulator here in the bottom right corner of Visual Studio code by clicking on

56
00:03:42,780 --> 00:03:44,220
that bar here.

57
00:03:44,220 --> 00:03:51,780
Then select the iOS device or as before, shut down all our simulators, disconnect all our devices

58
00:03:51,780 --> 00:03:54,840
from your machine, and it should automatically pick this one.

59
00:03:55,110 --> 00:04:00,720
And once you did all of that, just as before, you can again run your app there with the flutter run

60
00:04:00,720 --> 00:04:07,380
command or through the debug menu here in Visual Studio code and start without debugging, for example.

61
00:04:07,380 --> 00:04:13,080
And now this will also build the app, but it will now build it with the help of Xcode because now in

62
00:04:13,080 --> 00:04:18,630
iOS app is built and once it's done building the app, it will ship it onto the simulator.

63
00:04:18,630 --> 00:04:20,640
So let's wait for Dad to finish.

64
00:04:21,510 --> 00:04:28,110
Here's the app running on iOS now, and one thing you might notice is that it looks exactly the same

65
00:04:28,110 --> 00:04:30,930
as it looks on an Android device.

66
00:04:31,230 --> 00:04:37,530
The reason for that is that Flutter does not automatically adjust the styles to the iOS.

67
00:04:37,530 --> 00:04:40,740
Look, it does not automatically give you that iOS look.

68
00:04:40,980 --> 00:04:45,930
Remember that with flutter you in the end use a framework that controls every pixel.

69
00:04:45,990 --> 00:04:52,620
It's not using native device or native platform user interface elements.

70
00:04:52,620 --> 00:04:59,490
So a button here is not compiled to an iOS button for iOS and to an Android button for Android instead

71
00:04:59,490 --> 00:05:03,150
of button always looks the same because Flutter draws it onto the screen.

72
00:05:03,150 --> 00:05:10,500
It's not using some platform primitive, not a built in UI element, and therefore these apps look similar.

73
00:05:10,500 --> 00:05:16,590
Now, later in the course you will indeed learn how to adjust your look though other than the font,

74
00:05:16,590 --> 00:05:21,510
the font family is actually different automatically, but you will learn how you can adjust your app

75
00:05:21,510 --> 00:05:25,530
to look like an Android app on Android and an iOS app on iOS.

76
00:05:25,530 --> 00:05:31,260
If you want that or you create your own, look for all platforms, whatever you need.

77
00:05:31,290 --> 00:05:35,850
All that is possible with Flutter and well of course, have a look at all these options throughout the

78
00:05:35,850 --> 00:05:36,420
course.

79
00:05:36,630 --> 00:05:41,880
Now, more important than the look is, of course, that it works correctly and that is the case here.

80
00:05:41,880 --> 00:05:46,620
So now we can also test the app here on the iOS simulator and we're just fine.

81
00:05:46,620 --> 00:05:49,140
Everything is working correctly now.

82
00:05:49,140 --> 00:05:52,080
What about a real iOS device then?

