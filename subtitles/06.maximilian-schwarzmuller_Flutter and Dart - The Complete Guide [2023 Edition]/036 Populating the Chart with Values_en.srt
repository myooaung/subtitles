1
00:00:02,466 --> 00:00:11,166
Let's use our chart bar. Back in a chart widget here where I currently return some text, I of course instead

2
00:00:11,166 --> 00:00:14,933
want to return my chart bar widget. For that

3
00:00:14,966 --> 00:00:19,400
as always, you need to import it by pointing at the

4
00:00:22,333 --> 00:00:26,633
chart_bar.dart file. With that imported here,

5
00:00:26,633 --> 00:00:32,866
I return my chart bar and now we need to pass in three things - the label, which is not hard, in our data

6
00:00:32,866 --> 00:00:33,600
object here,

7
00:00:33,600 --> 00:00:38,200
we're referring of course to this map here and there,

8
00:00:38,200 --> 00:00:44,100
the day is our label, should be wrapped in quotes.

9
00:00:44,133 --> 00:00:46,366
The second argument also is not hard,

10
00:00:46,400 --> 00:00:55,966
it's our spending amount and that's data and then amount but the third part is more difficult,

11
00:00:55,966 --> 00:01:05,166
we need the total spendings for that week. Let's calculate those with another getter which will return

12
00:01:05,166 --> 00:01:08,266
a double and I'll name it Max

13
00:01:08,300 --> 00:01:16,666
spending and here, I want to return a value based on my grouped transaction values because there in

14
00:01:16,666 --> 00:01:22,166
end, we want to sum up all the amounts, the sum of all the total sums for each day gives us the total

15
00:01:22,166 --> 00:01:27,833
sum for the entire week. Now grouped transaction values of course is a list and now here, I just need

16
00:01:27,833 --> 00:01:29,233
a double.

17
00:01:29,300 --> 00:01:35,366
There is another helpful method we can use in Dart on lists and that's the fold method. Fold allows

18
00:01:35,366 --> 00:01:42,066
us to change a list to another type, with a certain logic we define in the function we pass to fold.

19
00:01:43,100 --> 00:01:48,933
So here to fold, we pass an anonymous function and besides that as a first argument, we pass a starting

20
00:01:48,933 --> 00:01:49,433
value, in

21
00:01:49,433 --> 00:01:55,466
this case, that's 0.0. So that's our starting value and now in this function, our second argument we pass to

22
00:01:55,466 --> 00:01:56,266
fold,

23
00:01:56,266 --> 00:02:00,700
we have to return a new value which will be added to this starting value,

24
00:02:00,833 --> 00:02:05,166
we have to return a new value now for every run on every item in groups.

25
00:02:05,200 --> 00:02:06,500
transaction values.

26
00:02:06,733 --> 00:02:08,800
Therefore in is anonymous function,

27
00:02:08,966 --> 00:02:15,766
we received two arguments - the first argument is the currently calculated sum,

28
00:02:15,766 --> 00:02:22,766
so our starting value for the first element and thereafter, the current sum or the current value we calculated

29
00:02:22,800 --> 00:02:24,000
based on this function,

30
00:02:24,700 --> 00:02:26,500
so our sum

31
00:02:26,900 --> 00:02:29,766
and the second argument we get here is the element we're looking at,

32
00:02:29,766 --> 00:02:35,800
so our item or whatever you want to call it. These names are up to you because you get the values passed

33
00:02:35,800 --> 00:02:41,000
by Dart but you are writing this code here which is triggered by Dart,

34
00:02:41,033 --> 00:02:43,566
so you can name these things here as you want.

35
00:02:43,633 --> 00:02:48,566
Now in here, you have to return a new sum which will then be passed as an input to this function for the

36
00:02:48,566 --> 00:02:49,833
next element in line

37
00:02:49,933 --> 00:02:55,500
in this list. If you're having a Javascript background, this is basically your equivalent to the reduce

38
00:02:55,500 --> 00:02:56,166
function,

39
00:02:56,200 --> 00:02:59,200
this also exists in many other programming languages.

40
00:02:59,233 --> 00:03:06,100
Now in here, I now simply return sum plus item amount and this should give us all the totals for each

41
00:03:06,100 --> 00:03:10,666
day and therefore sum up the total for the week and therefore I'll name this total spending here. So now

42
00:03:11,933 --> 00:03:12,533
Now, if you are

43
00:03:12,533 --> 00:03:16,533
getting
an error here regarding this item["amount"] thing,

44
00:03:16,933 --> 00:03:21,500
then you're getting
this because Flutter or, to be precise, Dart

45
00:03:21,866 --> 00:03:24,933
doesn't fully understand which kind of value

46
00:03:25,233 --> 00:03:29,033
will be extracted from item here in this line.

47
00:03:29,266 --> 00:03:33,966
It doesn't know
that it will be a number, a double, to be precise.

48
00:03:34,900 --> 00:03:37,766
To let Dart know that this will be fine,

49
00:03:37,933 --> 00:03:42,166
we have to explicitly typecast this value

50
00:03:42,433 --> 00:03:45,200
by adding "as double" here.

51
00:03:45,200 --> 00:03:49,900
To be precise, you should
actually wrap this into parentheses like this

52
00:03:50,166 --> 00:03:54,033
so that this value is cast to a double.

53
00:03:54,033 --> 00:03:59,200
Which simply
means we tell Dart that we know that this value here

54
00:03:59,333 --> 00:04:03,600
will be of
type double. And then this extracted value, which

55
00:04:03,600 --> 00:04:08,333
will be of type double, will
be added to the sum, which also is of type double.

56
00:04:08,500 --> 00:04:13,566
And therefore we add
two doubles, so two numbers with decimal places.

57
00:04:13,833 --> 00:04:15,900
And therefore dart will be happy.

58
00:04:16,466 --> 00:04:18,000
day and therefore sum up the total for the week and therefore I'll name this total spending here. So now

59
00:04:18,000 --> 00:04:21,100
with that, we have a getter for the total spending.

60
00:04:21,100 --> 00:04:26,266
Now here we could pass the total spending in but actually in the chart bar, I'm not interested in my

61
00:04:26,266 --> 00:04:29,633
total spending but in the percentage of the total.

62
00:04:29,633 --> 00:04:35,700
So actually what we should do here before passing this in, we have to take the amount for any given weekday

63
00:04:35,700 --> 00:04:42,933
we're looking at and we have to divide this by our total spending, so that we get the ratio of how much

64
00:04:43,100 --> 00:04:46,700
of our total week spending did we spend on this day.

65
00:04:46,700 --> 00:04:52,433
Now here we are getting an error that we can't use that operator on the type object because Dart is

66
00:04:52,433 --> 00:04:58,133
not able to find out that the amount is a double and we can fix this by wrapping this in parentheses and

67
00:04:58,133 --> 00:05:06,900
using as double here. And now with that, we should have everything to draw our chart with some bars onto

68
00:05:06,900 --> 00:05:10,400
the screen and that's looking good.

69
00:05:10,400 --> 00:05:12,600
Of course we're not using the space very efficiently,

70
00:05:12,600 --> 00:05:16,633
that's something we should work on but other than that, I'm liking this.

71
00:05:16,633 --> 00:05:26,700
If I add a new transaction now, more shoes for let's say $120.99, you see this updates,

72
00:05:26,700 --> 00:05:33,066
this number updates and always the the first bar is of course fully occupied because we have no

73
00:05:33,066 --> 00:05:34,933
way of targeting different days.

74
00:05:35,200 --> 00:05:41,666
Now we actually do get an error though, if we restart the app and therefore we lose all our transactions

75
00:05:41,700 --> 00:05:46,266
which are stored in memory of our application because right now, we're not saving them anywhere, not on

76
00:05:46,266 --> 00:05:48,166
a server or anything like that

77
00:05:48,300 --> 00:05:52,933
and of course later in the course, you will learn how to save data on a server and load it from there

78
00:05:53,066 --> 00:05:57,433
but right now, our data is lost whenever we restart the app and for this app, this is fine,

79
00:05:57,433 --> 00:06:01,633
it's just our next step in our journey to master Flutter.

80
00:06:01,633 --> 00:06:06,766
The problem nonetheless is that if we have no transactions, our chart here breaks and we get an error.

81
00:06:07,400 --> 00:06:14,566
Reason for that of course is that here, the fraction we're passing to our chart bar, which defines

82
00:06:14,666 --> 00:06:16,333
how much it should be filled,

83
00:06:16,366 --> 00:06:22,266
that of course is an invalid value if we have no transactions because then total spending is zero,

84
00:06:22,266 --> 00:06:26,900
we haven't spent anything, we have no transactions and dividing by zero,

85
00:06:27,066 --> 00:06:31,100
never a great idea. This actually yields an invalid value

86
00:06:31,100 --> 00:06:37,000
and what I actually would want to do is of course check whether total spending is zero and if it is

87
00:06:37,000 --> 00:06:37,366
zero,

88
00:06:37,366 --> 00:06:43,800
if we have no total spending, then I want to pass zero to all my chart bars because then each chart bar

89
00:06:43,800 --> 00:06:48,333
should be empty and therefore the fraction by which it should be filled should be zero.

90
00:06:48,333 --> 00:06:52,666
So in the end, we can simply add a ternary expression here and check whether total spending is equal

91
00:06:52,666 --> 00:06:54,000
to 0.0

92
00:06:54,000 --> 00:07:01,033
and if that's the case, pass 0.0 to the chart bar as our percentage of total because the bar should be

93
00:07:01,033 --> 00:07:07,966
empty then and only if we have a non-zero value, I want to calculate my share of the total spending.

94
00:07:07,966 --> 00:07:13,800
So with this simple change here, now this renders again and now we have an application that also works with

95
00:07:13,800 --> 00:07:18,666
no transactions. So next steps will of course be that we target different days

96
00:07:18,666 --> 00:07:22,533
but first of all, I want to make sure that we use this space a bit more efficiently.

