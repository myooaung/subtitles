WEBVTT
1
00:00:02.340 --> 00:00:09.460
And as you might have guessed, this tool is a key. Keys are really useful in situations like this.

2
00:00:09.470 --> 00:00:15.280
So typically when you have a list and in a list, you have stateful widgets.

3
00:00:15.290 --> 00:00:20.780
Now unfortunately, there currently is a bug with ListView.builder where even with a key, you can't fix this

4
00:00:20.780 --> 00:00:21.870
issue.

5
00:00:21.890 --> 00:00:28.580
So for the moment, for this video here, I'll actually change this here from ListView.builder which of

6
00:00:28.580 --> 00:00:32.189
course has the advantage of being very good for very long lists,

7
00:00:32.210 --> 00:00:40.780
I'll change this to a ListView with the children property and delete that part down there.

8
00:00:40.800 --> 00:00:46.770
We're now in children, of course I want to map my list of transactions into a list of transaction items

9
00:00:46.770 --> 00:00:49.230
and that's something we also did earlier already.

10
00:00:49.410 --> 00:00:55.200
We take our transactions and there, we call map.

11
00:00:55.200 --> 00:01:00.900
We pass a function to map where we get access to every single transaction and for every transaction

12
00:01:00.900 --> 00:01:08.730
which is just a data object, we return a new transaction item widget to which we pass tx as a

13
00:01:08.730 --> 00:01:16.100
value for the transaction. Now we also have to call to list on this to turn this into a real list

14
00:01:16.100 --> 00:01:20.290
and now children needs a list of widgets, not a list of lists,

15
00:01:20.360 --> 00:01:26.410
so either we add the spread operator here or since there are no other elements in that children list,

16
00:01:26.420 --> 00:01:33.050
we simply remove these square brackets and assign our new list of widgets we generate here as a value

17
00:01:33.050 --> 00:01:35.000
to children in the ListView.

18
00:01:35.120 --> 00:01:38.130
So this still gives us a list of transactions

19
00:01:38.240 --> 00:01:45.320
but now in a way where we have no bug in Flutter so that I can show what keys do for us.

20
00:01:45.320 --> 00:01:53.720
Now we need that key argument on our custom item, so now we need to accept a key here in the constructor

21
00:01:53.720 --> 00:02:00.710
of our own widget and every widget that's built into Flutter also has such a key, like here the card.

22
00:02:01.550 --> 00:02:02.440
On that card,

23
00:02:02.450 --> 00:02:09.050
we could set a key if that would be our root level widget in our ListView

24
00:02:09.289 --> 00:02:16.060
but in our ListView here, the root level widget for each item is our custom transaction item widget

25
00:02:16.160 --> 00:02:20.390
and therefore we need to add a key to our custom transaction item and therefore, we need to accept a

26
00:02:20.390 --> 00:02:21.420
key argument.

27
00:02:21.440 --> 00:02:27.410
So you really only need to accept that when your own widget needs to have a key and you only need to

28
00:02:27.410 --> 00:02:28.730
have a key on your widget

29
00:02:28.730 --> 00:02:36.470
if it's the topmost item, a stateful widget and the topmost item in a list or in situations where

30
00:02:36.470 --> 00:02:41.950
you have this strange behavior that you get the wrong state attached to your element.

31
00:02:41.960 --> 00:02:48.410
So here, we then set the key argument and now set it to what? Flutter has a couple of built-in keys and

32
00:02:48.410 --> 00:02:54.850
attached, you find a video that also explains that key idea and different kinds of keys.

33
00:02:55.130 --> 00:03:01.460
One key you could use is the unique key here. The unique key class here is built into Flutter and it

34
00:03:01.490 --> 00:03:05.700
automatically creates a unique key for every item,

35
00:03:05.720 --> 00:03:09.070
so every new item gets its own unique key attached.

36
00:03:09.140 --> 00:03:16.760
We pass this here to key and now this part here comes into play, in our transaction item after the

37
00:03:16.760 --> 00:03:24.740
constructor, this :super thing. You learned that super refers to the parent class. By calling super

38
00:03:24.740 --> 00:03:28.370
like a function, you're instantiating the parent class.

39
00:03:28.370 --> 00:03:32.630
Now normally you don't need to do that because Flutter does it for you automatically.

40
00:03:32.630 --> 00:03:37.940
You only need to do it on your own if you want to pass some extra data to the parent class

41
00:03:38.000 --> 00:03:43.550
and typically that one piece of data you might want to pass to your parent class which always is stateful

42
00:03:43.550 --> 00:03:50.390
or stateless widget for your own widget classes is a possible key you're accepting because that

43
00:03:50.630 --> 00:03:54.950
keying functionality is of course managed by Flutter behind the scenes.

44
00:03:54.950 --> 00:04:01.010
So if you get a key on your widget, you need to forward it to the Flutter base widget so that Flutter knows

45
00:04:01.010 --> 00:04:05.530
what to do with that key, your widget alone doesn't do anything with that argument, right?

46
00:04:05.540 --> 00:04:09.260
We're not using that argument anywhere in our class here,

47
00:04:09.440 --> 00:04:12.380
so we need to forward this to the parent widget.

48
00:04:12.380 --> 00:04:14.230
Now what's this strange syntax?

49
00:04:14.270 --> 00:04:20.480
It's just a a short notation Dart offers for calling the super constructor,

50
00:04:20.510 --> 00:04:23.630
it's called a constructor initializer list.

51
00:04:23.810 --> 00:04:26.690
We need to be honest rarely need it for our own classes here,

52
00:04:26.690 --> 00:04:31.180
if you want to learn more about it, you find a link attached where you can learn more about initializer

53
00:04:31.180 --> 00:04:32.240
lists.

54
00:04:32.340 --> 00:04:39.380
In short, here it also allows you to initialize the parent widget or the parent class by calling its

55
00:04:39.380 --> 00:04:42.280
constructor and forwarding data to the parent class

56
00:04:42.380 --> 00:04:47.580
and here as I said, we need to forward the key, so that Flutter knows what to do with the key.

57
00:04:47.600 --> 00:04:54.530
Long story short, with all of that, we forward the key, we accept the key and we set a key here on our

58
00:04:54.530 --> 00:05:01.010
transaction item and we need to set the key here and not on the card in our transaction item or on the

59
00:05:01.010 --> 00:05:08.330
ListTile in our transaction item because you need to add the key on the direct child of your ListView

60
00:05:08.330 --> 00:05:10.260
or of your list you're creating.

61
00:05:10.280 --> 00:05:16.940
So not at some nested widget but the topmost widget you have in your list of elements and that is our

62
00:05:16.940 --> 00:05:20.170
transaction item widget and therefore here, we set the key.

63
00:05:20.210 --> 00:05:24.610
Now let's refresh the app and let's see if that fixes the issue.

64
00:05:24.830 --> 00:05:29.660
If we go back and we add a new transaction here,

65
00:05:33.760 --> 00:05:40.210
Test, 11, for today it has a blue background and

66
00:05:40.370 --> 00:05:42.560
then we add Test2, 22,

67
00:05:46.120 --> 00:05:48.090
maybe on that day,

68
00:05:48.100 --> 00:05:57.660
also has a blue background and add Test3 and you can already see something in the background here.

69
00:06:02.040 --> 00:06:04.740
These colors are randomly changing,

70
00:06:04.740 --> 00:06:10.200
basically whenever the state of her application changes and the reason for that is that this unique key

71
00:06:10.200 --> 00:06:15.000
is indeed added to every list item and is truly unique

72
00:06:15.000 --> 00:06:21.240
but of course this is just the constructor of a class and therefore this is called whenever our ListView

73
00:06:21.240 --> 00:06:27.030
updates and that happens whenever set state is called and when our build method reruns. So unique key

74
00:06:27.030 --> 00:06:28.970
is not really that great

75
00:06:29.010 --> 00:06:36.120
if this rebuilds constantly because then with every rebuild of the entire list, even if nothing inside

76
00:06:36.120 --> 00:06:38.520
of the list changes but the parent widget changed,

77
00:06:38.670 --> 00:06:45.060
you get a new unique key assigned and therefore, Flutter is not able to match up the items and it loses

78
00:06:45.180 --> 00:06:46.500
your data.

79
00:06:46.500 --> 00:06:53.460
So instead, you should use a value key, that is a key where you pass your own identifier and that of course

80
00:06:53.460 --> 00:06:58.380
should be a value that is unique to every list item you have.

81
00:06:58.380 --> 00:07:04.010
Now here for our transactions, we have an ID and therefore, the ID is the perfect key here.

82
00:07:04.140 --> 00:07:13.670
So we use tx.id here as a value key and now with that if we refresh this, you will see that this

83
00:07:13.670 --> 00:07:15.950
now will work correctly.

84
00:07:15.970 --> 00:07:18.440
If I now start adding a transaction again

85
00:07:23.650 --> 00:07:26.020
for today let's say and I

86
00:07:26.060 --> 00:07:28.420
then add another transaction,

87
00:07:28.460 --> 00:07:32.630
now you can already see it's not changing in the background all the time

88
00:07:35.390 --> 00:07:37.010
and now we have different colors here

89
00:07:37.010 --> 00:07:38.900
and now if I delete the first one,

90
00:07:38.930 --> 00:07:43.100
so the red one, of course we should only have Test2 with a black background

91
00:07:43.100 --> 00:07:44.740
and indeed that's what's happening.

92
00:07:44.880 --> 00:07:46.850
So now, the key fixed it for us

93
00:07:46.850 --> 00:07:48.430
and how is that now working?

94
00:07:48.470 --> 00:07:50.180
If I go back to drawing here,

95
00:07:50.270 --> 00:07:57.320
this works because we have our widget tree and we have our element tree

96
00:07:57.530 --> 00:08:05.090
and you learned, there we have the ListView with the list items and in the element tree, we have our

97
00:08:05.480 --> 00:08:08.750
elements that belong to these widgets, right,

98
00:08:08.750 --> 00:08:13.170
like this.

99
00:08:13.380 --> 00:08:21.270
Now you learned that identification happens because this knows about the type of widget and this knows about the

100
00:08:21.270 --> 00:08:26.520
type of its connected widget and this element knows about the type and the elements also know about

101
00:08:26.550 --> 00:08:27.840
each other.

102
00:08:27.840 --> 00:08:30.300
And of course our widgets have certain types,

103
00:08:30.300 --> 00:08:32.990
this is the ListView,

104
00:08:33.000 --> 00:08:40.770
this is the item and this is the item but as you learned, matching by item only is not enough because we

105
00:08:40.770 --> 00:08:47.100
have similar types here in the list and hence when we removed one item, matching by type only led to

106
00:08:47.100 --> 00:08:48.000
a problem.

107
00:08:48.270 --> 00:08:51.260
Now with a key added to the list item here,

108
00:08:51.360 --> 00:08:55.430
this key is also stored as an identification criteria.

109
00:08:55.650 --> 00:09:02.520
So if the first item has an ID of 1 and the second item here has an ID of 2, then this key is also

110
00:09:02.520 --> 00:09:03.270
stored in the element.

111
00:09:03.300 --> 00:09:10.480
So besides checking for the type, this now also knows that the first item here, the first element here,

112
00:09:10.660 --> 00:09:13.930
belongs to a widget which is of type item and has an ID of 1

113
00:09:13.930 --> 00:09:19.130
and that's true for this widget but not for the second widget. Hence

114
00:09:19.180 --> 00:09:28.930
now if the first widget gets removed and of course keep in mind that our state here is also attached

115
00:09:28.930 --> 00:09:30.010
to our elements.

116
00:09:30.040 --> 00:09:37.150
If that first widget gets removed, now Flutter when it checks the element tree finds out that this element

117
00:09:37.150 --> 00:09:42.790
here has no matching widget anymore because yes, it does find another widget which is of type item

118
00:09:43.120 --> 00:09:46.610
but not with a key of 1,

119
00:09:46.610 --> 00:09:53.090
this has a key of 2 and therefore Flutter goes ahead and destroys this element in this state and

120
00:09:53.090 --> 00:09:58.070
does not try to reattach this state to this widget.

121
00:09:58.070 --> 00:10:02.870
This does not happen because we now have a key as an additional identification criteria,

122
00:10:02.870 --> 00:10:04.150
this is what keys do,

123
00:10:04.280 --> 00:10:09.260
they simply make it easier for Flutter to identify the connected widget.

124
00:10:09.260 --> 00:10:12.010
Now you should really only use keys when you need them though,

125
00:10:12.020 --> 00:10:16.880
don't start using them everywhere on every widget because Flutter by default doesn't need them.

126
00:10:16.880 --> 00:10:23.030
The default mechanism of identifying what type works perfect in 99% of all use cases,

127
00:10:23.030 --> 00:10:29.280
it's really mostly that ListView with stateful children scenario where you need keys.

128
00:10:29.300 --> 00:10:35.770
If we had a transaction item as a stateless widget as we had at the beginning, we also had no problem,

129
00:10:35.780 --> 00:10:42.170
we only have a problem if it's a stateful widget that manages its own data internally and that data

130
00:10:42.200 --> 00:10:49.310
can change of course and then Flutter might end up in a situation where it can't match up items correctly

131
00:10:49.430 --> 00:10:55.490
and attaches state incorrectly and that is when you need a key and definitely use a value key with your

132
00:10:55.490 --> 00:11:01.820
own custom identifier instead of an automatically calculated unique key which has problems when your

133
00:11:01.820 --> 00:11:08.180
list is rebuilt because then new unique keys are calculated as well and therefore matching up doesn't

134
00:11:08.180 --> 00:11:11.080
work anymore because the keys are not found,

135
00:11:11.090 --> 00:11:13.550
you have new keys for the next build method run.

