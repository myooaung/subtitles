1
00:00:02,130 --> 00:00:06,600
Of course, we need to be able to send new messages and therefore I'll add a new widget in the chat

2
00:00:06,600 --> 00:00:07,140
folder.

3
00:00:07,140 --> 00:00:08,970
New message to start.

4
00:00:09,240 --> 00:00:16,770
Now this can also be a state less widget, but it should be a stateful widget because I actually want

5
00:00:16,770 --> 00:00:25,440
to be able to validate the user input and disable the send button if nothing was entered.

6
00:00:25,800 --> 00:00:32,369
So here I'll name this new message and then of course import material.

7
00:00:32,619 --> 00:00:34,500
Start from the flutter package.

8
00:00:34,830 --> 00:00:37,230
And what should we return here?

9
00:00:37,350 --> 00:00:45,300
Well, we can return a container actually should work fine with a little bit of margin, which I only

10
00:00:45,300 --> 00:00:49,170
want to have on the top, though.

11
00:00:49,290 --> 00:00:55,440
So we'll add some top margin here on this container so that there is some spacing between our text field

12
00:00:55,440 --> 00:00:56,940
and the message list.

13
00:00:57,630 --> 00:01:05,970
And I'll also add some padding with edge insets, all of eight as well, so that we also have some space

14
00:01:05,970 --> 00:01:09,090
inside of this text input box widget.

15
00:01:09,810 --> 00:01:14,220
And then the child here is a row because I actually want to have two items next to each other, the

16
00:01:14,220 --> 00:01:18,270
actual text input field and the button to send the message.

17
00:01:19,050 --> 00:01:20,640
So here we need children.

18
00:01:20,640 --> 00:01:23,760
And the first child is a text field.

19
00:01:23,790 --> 00:01:30,030
Now here, a regular text field, because I'm not wrapping this in a form, I'll just validate it on

20
00:01:30,030 --> 00:01:34,620
the go, so to say, without a big forum, because we don't need this here for this very basic input

21
00:01:34,620 --> 00:01:35,130
field.

22
00:01:36,840 --> 00:01:38,460
Now you would get an error like this.

23
00:01:38,460 --> 00:01:41,220
You actually need to wrap this into expand it as well.

24
00:01:41,250 --> 00:01:47,190
Otherwise, a text field in a row will cause an error because it tries to take up too much space with

25
00:01:47,190 --> 00:01:48,240
expanded around it.

26
00:01:48,270 --> 00:01:49,530
This will work, however.

27
00:01:50,280 --> 00:01:52,920
Now on the text field I'll add a declaration.

28
00:01:53,340 --> 00:01:56,130
Input declaration where I set a label of.

29
00:01:59,360 --> 00:02:00,410
Send.

30
00:02:01,750 --> 00:02:02,710
Message.

31
00:02:04,170 --> 00:02:07,800
To make it clear what this text field does in case it wasn't clear.

32
00:02:08,220 --> 00:02:13,620
And I want to listen on every keystroke with the unchanged event here, with the unchanged function

33
00:02:13,620 --> 00:02:19,590
where we get the user input and where we then can do something, for example, validate it and unlock

34
00:02:19,590 --> 00:02:26,670
the button to send it, which is the item I'll add next to the expanded widget here I can button and

35
00:02:26,670 --> 00:02:28,110
this should be the send icon.

36
00:02:28,110 --> 00:02:32,460
So here I'll add a color of theme of context.

37
00:02:32,460 --> 00:02:33,970
Primary color pops.

38
00:02:33,990 --> 00:02:35,340
Primary color.

39
00:02:36,050 --> 00:02:42,290
And I'll add an icon, which should be the send icon here.

40
00:02:44,100 --> 00:02:49,230
Now, of course, this button also needs an own press handler so that something happens or can happen

41
00:02:49,230 --> 00:02:50,190
when we click it.

42
00:02:52,080 --> 00:02:55,290
The button should also only be enabled if a message was entered.

43
00:02:55,290 --> 00:02:57,030
They offer a new message state.

44
00:02:57,030 --> 00:02:59,310
We can manage that state.

45
00:02:59,610 --> 00:03:04,830
We can have a variable entered message, which initially is an empty string.

46
00:03:05,790 --> 00:03:13,550
And here in on changed we call set state and set entered message equal to the value we got here.

47
00:03:13,560 --> 00:03:19,710
Now this will run on every keystroke so we update the stored entered message with every keystroke and

48
00:03:19,710 --> 00:03:26,430
now we can use entered message to lock or unlock the icon button by only conditionally adding this function.

49
00:03:26,850 --> 00:03:31,170
So on the icon button on pressed here we can check if entered.

50
00:03:31,170 --> 00:03:35,970
Message trimmed is empty.

51
00:03:36,120 --> 00:03:42,870
If it is empty, we know we have no valid message even after removing all x's whitespace with trim.

52
00:03:42,960 --> 00:03:48,870
And if that's the case all set on pressed to null, which means it has no function attached and this

53
00:03:48,870 --> 00:03:50,640
will automatically disable the button.

54
00:03:50,640 --> 00:03:52,020
That's how Flutter works.

55
00:03:52,530 --> 00:03:58,710
If the message is not empty, I will set this function here as a value for on pressed.

56
00:03:58,710 --> 00:04:03,690
So now there is a function to execute when the button is pressed and therefore the button will be enabled.

57
00:04:05,390 --> 00:04:05,690
Now.

58
00:04:05,690 --> 00:04:08,750
Right now, we're not sending any message, but this should work already.

59
00:04:08,750 --> 00:04:16,640
So let's go to the chat screen and there we have a column with our messages now below the messages here.

60
00:04:17,839 --> 00:04:22,280
We can therefore now simply add our new message widget.

61
00:04:22,490 --> 00:04:25,250
And of course, you need to import new message.

62
00:04:25,250 --> 00:04:28,040
Start from the respective path here.

63
00:04:30,380 --> 00:04:36,650
So if you save this, we have this message here at the bottom and this annoying floating action button,

64
00:04:36,800 --> 00:04:38,920
we can entirely delete this.

65
00:04:38,930 --> 00:04:41,130
We don't need the floating action button anymore.

66
00:04:41,150 --> 00:04:42,650
So let's get rid of it.

67
00:04:44,190 --> 00:04:45,000
Like that.

68
00:04:45,240 --> 00:04:46,020
And now here.

69
00:04:46,020 --> 00:04:47,450
Here is the sent message button.

70
00:04:47,460 --> 00:04:48,120
It's disabled.

71
00:04:48,120 --> 00:04:51,840
But if I enter a valid message, it's enabled and I can press it.

72
00:04:51,840 --> 00:04:54,000
But of course, nothing happens right now.

73
00:04:54,000 --> 00:04:55,260
So we need to change this.

74
00:04:55,260 --> 00:05:02,250
We need to make sure that when we press this, we may be also unfocused this field so that the keyboard

75
00:05:02,250 --> 00:05:05,940
goes away automatically, but then also that this message is being sent.

76
00:05:07,450 --> 00:05:10,060
Now we'll start with focusing here.

77
00:05:10,060 --> 00:05:14,800
Dysfunction should be triggered and I don't want to write everything here in this anonymous function.

78
00:05:14,800 --> 00:05:15,610
So instead I'll.

79
00:05:15,610 --> 00:05:17,320
Robert add a function up here.

80
00:05:18,670 --> 00:05:20,500
Send a message.

81
00:05:22,230 --> 00:05:29,580
And in there I'll first of all, use focus, scope of context and call unfocused to close the keyboard,

82
00:05:29,580 --> 00:05:30,840
which might be open.

83
00:05:31,520 --> 00:05:38,120
And it's sent a message which therefore is connected here like this, without parentheses, just pointing

84
00:05:38,120 --> 00:05:38,630
at it.

85
00:05:39,790 --> 00:05:44,890
And instead of sent message, we now want to use our store to create this new message.

86
00:05:45,250 --> 00:05:52,170
So for this, we import package cloud, fire store, cloud, fire store, dart.

87
00:05:52,420 --> 00:05:59,440
And then here we can use far store dot instance and target the chat collection.

88
00:05:59,590 --> 00:06:04,180
And here we now want to add a new document, which we do with the ADD method.

89
00:06:05,070 --> 00:06:11,580
Now this takes a map which describes the new document, and we want to have a text field here because

90
00:06:11,580 --> 00:06:14,160
every chat message should have a text field.

91
00:06:14,190 --> 00:06:16,140
Our dummy message has one to.

92
00:06:16,980 --> 00:06:21,240
So here text and the value should of course be the entered message.

93
00:06:21,240 --> 00:06:23,490
So what's stored in this variable?

94
00:06:24,410 --> 00:06:27,650
And that should be all we need to do to send a new message.

95
00:06:28,130 --> 00:06:31,780
Now, this gives us a future, and we could wait for it to complete.

96
00:06:31,790 --> 00:06:33,350
We could show a loading spinner.

97
00:06:33,350 --> 00:06:36,350
But I think in a chat application we don't really need this.

98
00:06:36,350 --> 00:06:38,450
So that should really be all we need.

99
00:06:38,450 --> 00:06:44,320
And please note that we also don't need to add any authentication token or anything like that.

100
00:06:44,330 --> 00:06:47,960
This is all managed behind the scenes by Firebase here.

101
00:06:48,440 --> 00:06:51,980
So if we simply save this, we should be able to send a new message.

102
00:06:52,870 --> 00:06:59,590
If I enter a one, does this work and I click send you see, here's my message.

103
00:06:59,710 --> 00:07:03,100
Now, of course, the formatting is not final, but this is my message.

104
00:07:03,640 --> 00:07:04,910
So that works.

105
00:07:04,930 --> 00:07:06,610
Now two improvements.

106
00:07:06,610 --> 00:07:11,230
I think it would be nice if the message input field would be cleared thereafter.

107
00:07:11,230 --> 00:07:17,860
And I also want to make sure that the messages are ordered in the opposite direction so that the most

108
00:07:17,860 --> 00:07:21,550
recent message is here at the bottom and not at the top.

109
00:07:22,370 --> 00:07:25,880
To make sure that this happens, to make sure that the ordering is correct.

110
00:07:25,880 --> 00:07:32,510
We can go to message start and there on the list view there is a little extra field you can set.

111
00:07:32,750 --> 00:07:34,580
You can set reverse to true.

112
00:07:34,580 --> 00:07:36,850
And this will do just what the name implies.

113
00:07:36,860 --> 00:07:39,790
It will order the messages or the fields differently.

114
00:07:39,800 --> 00:07:42,020
It will scroll from the bottom to the top.

115
00:07:42,590 --> 00:07:45,920
Now you see how low still is ordered below.

116
00:07:45,920 --> 00:07:52,550
Does this work simply because of how the auto ID was created when I manually edit this document?

117
00:07:53,160 --> 00:07:55,860
But if I delete this document with hello.

118
00:07:55,860 --> 00:07:57,300
So if I enter.

119
00:07:57,960 --> 00:07:59,070
Hello here.

120
00:07:59,780 --> 00:08:02,480
You see now this is at the bottom, so that's nice.

121
00:08:02,600 --> 00:08:09,320
Now for clearing the input here in new message, I want to clear the message or the input whenever we

122
00:08:09,350 --> 00:08:10,880
send a new message.

123
00:08:11,360 --> 00:08:19,070
And to do that, we can add a controller to the text field here and create a new controller in our state

124
00:08:19,070 --> 00:08:19,580
here.

125
00:08:21,620 --> 00:08:22,730
A final.

126
00:08:23,450 --> 00:08:24,770
Controller.

127
00:08:26,300 --> 00:08:30,380
New text editing controller like this.

128
00:08:33,000 --> 00:08:37,049
And use this controller here and send a message.

129
00:08:38,010 --> 00:08:45,870
To call controller clear and now bind this controller to the text field simply by pointing at it here

130
00:08:45,870 --> 00:08:47,760
on the controller argument.

131
00:08:48,720 --> 00:08:53,040
We now safeties and I type does this clear.

132
00:08:53,770 --> 00:08:57,670
You see, it clears and this is also closed.

133
00:08:58,590 --> 00:09:04,530
Now, one thing you also see, however, is the ordering here is still is not working entirely as it

134
00:09:04,530 --> 00:09:05,070
should.

135
00:09:05,850 --> 00:09:12,870
And you see that also here in Firebase by default, the oldest document is the topmost one and the most

136
00:09:12,870 --> 00:09:14,340
recent one is the bottom most one.

137
00:09:14,340 --> 00:09:17,010
And since we reverse this here, it's the opposite.

138
00:09:18,630 --> 00:09:26,130
Now, one way of ordering this correctly and making sure that we have a consistent order is that we

139
00:09:26,130 --> 00:09:33,330
also store timestamp along with the text when a document is being created and we then order by that

140
00:09:33,330 --> 00:09:34,170
timestamp.

141
00:09:34,470 --> 00:09:42,060
So here on New Message, we can then go to the place where we add a new document and besides text,

142
00:09:42,060 --> 00:09:44,840
we can also add a created add field.

143
00:09:44,850 --> 00:09:51,900
The name is up to you doesn't have to be created at and you can then use stamped now to create a new

144
00:09:51,900 --> 00:09:52,500
timestamp.

145
00:09:52,500 --> 00:09:58,020
Now Timestamp is a class that is available, made available by the Cloud File Store package.

146
00:09:59,560 --> 00:10:04,390
Now with this, we create a time stamp which will be part of the document that's being stored and it's

147
00:10:04,390 --> 00:10:06,570
stored in a created add field.

148
00:10:06,580 --> 00:10:12,880
So now when we retrieve the messages here before we actually set up that listener or that stream, before

149
00:10:12,880 --> 00:10:17,450
we get access to the stream on the collection we can actually call order by.

150
00:10:17,470 --> 00:10:22,200
And this allows us to order the documents we're about to fetch by a certain field.

151
00:10:22,210 --> 00:10:26,560
And we can order by created at so by that new field, I just add it.

152
00:10:26,860 --> 00:10:32,680
Now, of course, my existing messages don't have that field, so I will quickly delete all those messages.

153
00:10:32,770 --> 00:10:36,550
If you have a lot of messages, you can also delete the entire chat collection.

154
00:10:36,550 --> 00:10:41,380
Instead, it will be recreated automatically as soon as you start adding messages again.

155
00:10:41,740 --> 00:10:44,590
But once it's empty, I'll save this.

156
00:10:44,980 --> 00:10:47,470
Go back and send a new message.

157
00:10:47,470 --> 00:10:48,160
Hello.

158
00:10:49,420 --> 00:10:50,770
Does this work?

159
00:10:53,910 --> 00:10:59,160
And you see it's still ordered correctly, but simply because we have to specify how we want to order

160
00:10:59,160 --> 00:10:59,610
this.

161
00:10:59,760 --> 00:11:03,660
And by default, it's ordered in ascending way.

162
00:11:03,690 --> 00:11:08,490
I want to order in a descending way, though, so I'll set descending to true here.

163
00:11:08,730 --> 00:11:11,730
That's the second argument you can pass to order by.

164
00:11:12,330 --> 00:11:14,550
And if you set descending to Drew, you'll see.

165
00:11:14,550 --> 00:11:17,040
Now that's this work is the second message here.

166
00:11:18,550 --> 00:11:21,970
So this message, which I submitted a little bit later and in the first one.

167
00:11:23,140 --> 00:11:28,850
And if I add another new message, another new message, you will see that now this is the bottom of

168
00:11:28,870 --> 00:11:29,610
that message.

169
00:11:29,620 --> 00:11:34,700
And even if I restart the app here, if I completely reload it, you see, this order is kept.

170
00:11:34,720 --> 00:11:40,600
So now we finally have the correct order here, which is of course super important and which is what

171
00:11:40,600 --> 00:11:42,340
we ultimately want here.

172
00:11:42,940 --> 00:11:46,870
With that out of the way, let's work on those chat messages.

173
00:11:46,870 --> 00:11:48,610
They look a bit ugly like this.

174
00:11:48,610 --> 00:11:53,590
And of course, we also want to make sure that we can quickly tell whether this message is by us or

175
00:11:53,590 --> 00:11:54,790
by a number of user.

