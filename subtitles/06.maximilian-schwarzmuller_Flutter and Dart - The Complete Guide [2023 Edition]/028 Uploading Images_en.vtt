WEBVTT
1
00:00:02.130 --> 00:00:07.020
So we added this image validation and we show an error if we don't have an image.

2
00:00:07.170 --> 00:00:14.730
We also added the Firebase Storage package already, so let's now make sure we can also upload an image.

3
00:00:15.640 --> 00:00:17.350
For that back in the off for him.

4
00:00:17.350 --> 00:00:25.330
We do collect that user image file and we validate it here and if we make it past this validation and

5
00:00:25.330 --> 00:00:31.750
everything is valid, we want to make sure that we do actually also provide that image file to the off

6
00:00:31.750 --> 00:00:37.420
screen because in the off screen we send all that data to Firebase and uploading the image will now

7
00:00:37.420 --> 00:00:40.090
simply be an extra step we should perform here.

8
00:00:40.830 --> 00:00:46.470
We can, of course, pass the image to the off screen just as we pass the other data here.

9
00:00:46.470 --> 00:00:51.960
When we call that submit function, which we get from the off screen, besides passing in user email,

10
00:00:51.960 --> 00:00:58.410
password and user name, we can also pass in our user image file and this might be null if we are logging

11
00:00:58.410 --> 00:01:03.780
in, but we can simply make sure that we don't care about the file in the off screen in the login case.

12
00:01:04.230 --> 00:01:09.090
Now of course this currently doesn't meet or doesn't fit our function signature.

13
00:01:09.090 --> 00:01:16.110
We should make it clear here when we define the submit FN that after the username we expect to get an

14
00:01:16.110 --> 00:01:17.940
image file.

15
00:01:18.450 --> 00:01:20.730
But now we also need to adjust this in the off screen.

16
00:01:20.730 --> 00:01:26.670
Of course there we also need to add this on the submit off form method.

17
00:01:26.670 --> 00:01:34.110
Here we should expect an image file and file, as you learned, is of course imported from Dart.

18
00:01:34.810 --> 00:01:36.510
I io like this.

19
00:01:38.180 --> 00:01:42.980
So now we get this image file and yes, it might be null in the log in case, but we don't care about

20
00:01:42.980 --> 00:01:43.190
this.

21
00:01:43.220 --> 00:01:45.110
We won't use the image there anyways.

22
00:01:45.350 --> 00:01:50.960
But with that provided here, it should be available if we are signing up and therefore here in the

23
00:01:50.960 --> 00:01:57.050
sign up process, we now want to upload the image and I want to upload the image before we write all

24
00:01:57.050 --> 00:02:03.920
that extra data to our users collection because a path to the uploaded image should also be something.

25
00:02:03.920 --> 00:02:06.770
We also write to that user's collection in the future.

26
00:02:06.770 --> 00:02:14.180
So we want to start or perform the image upload here before we write our extra user data to the user's

27
00:02:14.180 --> 00:02:14.870
collection.

28
00:02:15.500 --> 00:02:19.070
Now for that, we need this extra package.

29
00:02:20.210 --> 00:02:25.850
The Firebase Storage package and from there the Firebase Storage Dart file.

30
00:02:26.510 --> 00:02:30.440
And that Firebase Storage package can now be used here.

31
00:02:30.830 --> 00:02:37.190
We use Firebase Storage and again, we've got an instance property here just as we have it on fire store

32
00:02:37.190 --> 00:02:38.510
and firebase off.

33
00:02:38.540 --> 00:02:43.910
And this gives us access to this one Global Firebase Storage instance, which is preconfigured with

34
00:02:43.910 --> 00:02:45.470
the token and with everything.

35
00:02:45.920 --> 00:02:49.590
And there we now can call ref.

36
00:02:50.680 --> 00:02:54.910
Rest gives us access to our route cloud storage bucket.

37
00:02:54.910 --> 00:03:00.190
And to fully understand this, let's actually have a look at the Firebase Cloud Storage in the Firebase

38
00:03:00.190 --> 00:03:01.660
Web console first.

39
00:03:01.960 --> 00:03:04.790
There we had a look at authentication and database.

40
00:03:04.810 --> 00:03:07.120
Now we're going to work with the storage.

41
00:03:07.270 --> 00:03:09.910
So let's click on storage to see how that looks like.

42
00:03:10.150 --> 00:03:15.370
Now, as always, here you can learn more about it through the docs and so on, but we can just click

43
00:03:15.370 --> 00:03:16.570
on Get Started.

44
00:03:16.810 --> 00:03:22.720
And first of all, just as with the Firebase database, just as with Fire Store, we need to set up

45
00:03:22.720 --> 00:03:25.660
some rules and we can simply click next here.

46
00:03:25.690 --> 00:03:28.780
This will be the default rules and they will be fine for us.

47
00:03:28.990 --> 00:03:30.490
And click on done thereafter.

48
00:03:30.490 --> 00:03:34.060
And this does something which is called create a bucket.

49
00:03:34.450 --> 00:03:39.430
In Firebase Storage, you can upload any kind of files, not just images.

50
00:03:39.430 --> 00:03:42.580
And those files will be organized in so called buckets.

51
00:03:42.580 --> 00:03:45.820
And your Firebase Project comes with one bucket.

52
00:03:45.850 --> 00:03:51.610
Now in that bucket you can have subfolders and so on, but you will have this one main bucket.

53
00:03:51.970 --> 00:03:54.870
And this main bucket is what ref will refer to.

54
00:03:54.880 --> 00:03:59.230
If you call it like this, it will basically point at this root bucket.

55
00:04:01.580 --> 00:04:04.520
Now in here, you can store your files.

56
00:04:04.520 --> 00:04:06.140
You can also upload the manually.

57
00:04:06.140 --> 00:04:09.650
You can create a folder here, as you can see, and you can do more things.

58
00:04:09.650 --> 00:04:13.220
You can also add a new bucket, but that would cost you extra money.

59
00:04:13.220 --> 00:04:17.779
So I wouldn't recommend doing it here, especially since you can create subfolders.

60
00:04:17.779 --> 00:04:21.500
One bucket should be fine for many kinds of projects.

61
00:04:21.800 --> 00:04:27.560
Now, just as your database, your storage also can be protected with rules, and the rules generally

62
00:04:27.560 --> 00:04:31.130
work in a similar way as they do on fire store.

63
00:04:31.160 --> 00:04:37.070
You can dive into the docs to learn all about them, but you can see it looks pretty much the same here.

64
00:04:37.070 --> 00:04:43.940
However, we don't operate on collections and documents, but instead on our buckets and we only have

65
00:04:43.940 --> 00:04:48.170
one bucket here, but you could have more than one, and then our paths in the buckets.

66
00:04:48.170 --> 00:04:50.060
So our folders and files.

67
00:04:50.180 --> 00:04:52.550
But besides that, the rules are very similar.

68
00:04:52.550 --> 00:04:55.370
And here, for example, we're saying read and write.

69
00:04:55.370 --> 00:05:00.290
Access to any file is granted if you are authenticated.

70
00:05:00.290 --> 00:05:05.510
So unauthenticated requests which are not coming from logged and users are denied.

71
00:05:05.510 --> 00:05:11.150
And that's of course great because we don't want anyone to upload files or to look at our files.

72
00:05:11.150 --> 00:05:16.430
Only authenticated users should be able to do so, and I will go one step further.

73
00:05:16.430 --> 00:05:20.120
I will not grant write access here, but only create access.

74
00:05:20.960 --> 00:05:27.230
So that deleting and changing files is actually not possible for anyone because in this app, let's

75
00:05:27.230 --> 00:05:33.620
say we want to allow users to upload files and to view images, but we don't want them to be able to

76
00:05:33.620 --> 00:05:34.580
delete files.

77
00:05:34.580 --> 00:05:39.980
We can always do this manually here from the console if we want to clean up storage, but users won't

78
00:05:39.980 --> 00:05:41.780
be able to do this in this app.

79
00:05:41.780 --> 00:05:47.240
But of course you can have a very granular control and you can fine tune this to your needs and to your

80
00:05:47.240 --> 00:05:51.710
application needs with help of the official docs if you need a different setup.

81
00:05:52.040 --> 00:05:58.010
So with that, however, upload and viewing of files should be enabled for authenticated users.

82
00:05:58.010 --> 00:06:00.950
And now let's go back to our code with Ref.

83
00:06:00.950 --> 00:06:05.750
We got access to this root bucket and on the ref we can now call child.

84
00:06:06.020 --> 00:06:12.410
Child simply allows us to set up a new path and that allows us to control where we want to store our

85
00:06:12.410 --> 00:06:15.740
file or from where we want to read a file.

86
00:06:16.010 --> 00:06:17.750
And here that should be a string.

87
00:06:17.750 --> 00:06:21.470
I will point at a user images path.

88
00:06:21.770 --> 00:06:26.120
Now this does not exist yet, but it should then automatically create such a path.

89
00:06:26.120 --> 00:06:31.940
So that will create a user images folder in the end in which the image should be stored.

90
00:06:32.450 --> 00:06:36.920
And for that I'll chain another child call because this here.

91
00:06:37.680 --> 00:06:39.840
Should be the folder where the image is stored.

92
00:06:39.870 --> 00:06:42.480
Now we need to give the image a name.

93
00:06:42.750 --> 00:06:50.040
So here, if I then store this as image PNG, it would create an image PNG file in that folder.

94
00:06:50.670 --> 00:06:55.560
Now, of course, I don't want to hardcoded the image name here though, because otherwise we would

95
00:06:55.560 --> 00:06:59.590
quickly run into name clashes where we have multiple images with the same name.

96
00:06:59.610 --> 00:07:05.130
Instead, I want a unique name per image and I of course also want to make it easy to map this image

97
00:07:05.130 --> 00:07:05.840
to a user.

98
00:07:05.850 --> 00:07:09.090
Hence we can simply use the user ID as an image name.

99
00:07:09.450 --> 00:07:12.220
Now we get that ID from all the result here.

100
00:07:12.240 --> 00:07:19.680
There we have that user field with the UUID field and UID is just a string.

101
00:07:19.680 --> 00:07:25.800
And all we need to do now is we need to append the file extension and that should be JPEG because by

102
00:07:25.800 --> 00:07:29.910
default image is taken with the device, camera will be of type JPEG.

103
00:07:31.820 --> 00:07:37.460
So what this does now is it sets up a pointer at this path on our storage.

104
00:07:37.730 --> 00:07:40.430
But right now, of course, this path does not exist.

105
00:07:40.430 --> 00:07:44.640
We neither have that folder nor do we have that file there yet.

106
00:07:44.660 --> 00:07:46.890
And this alone won't start the upload.

107
00:07:46.910 --> 00:07:52.970
Instead, this returns a so called storage reference, which is a pointer at a certain path.

108
00:07:53.830 --> 00:08:02.230
So we can store this in a ref constant and now starts the actual upload to that path which we now configured

109
00:08:02.410 --> 00:08:03.790
by calling ref.

110
00:08:04.680 --> 00:08:08.100
Put file and this will do what the name implies.

111
00:08:08.100 --> 00:08:15.360
It will put a file to that path and it will use this last segment of the path as the file name.

112
00:08:15.980 --> 00:08:19.100
So in this case, the user ID with JPAC at the end.

113
00:08:20.090 --> 00:08:25.430
Now the argument we need to provide to put file is the file we want to put there.

114
00:08:26.480 --> 00:08:30.260
And that's, of course, this image we're getting here.

115
00:08:33.940 --> 00:08:36.100
So I'll just pass image here.

116
00:08:36.580 --> 00:08:42.669
Now, you also can provide a second argument, which is storage metadata, which you could send where

117
00:08:42.669 --> 00:08:47.040
you, for example, can add custom metadata, set the language of the file.

118
00:08:47.050 --> 00:08:48.900
But at the moment I don't want to do that.

119
00:08:48.910 --> 00:08:51.250
Instead, I just want to upload the file like this.

120
00:08:51.400 --> 00:08:56.950
And of course, putting a file takes a bit longer, which is why this returns a storage upload task.

121
00:08:56.980 --> 00:09:02.580
This is not the same as a future, but it has the same idea basically.

122
00:09:02.590 --> 00:09:06.370
Unfortunately, we can't await it because it isn't a future.

123
00:09:06.730 --> 00:09:08.650
But we can actually.

124
00:09:09.950 --> 00:09:16.170
Use the on complete property on it, which will give us a future and we can await this.

125
00:09:16.190 --> 00:09:19.910
Now the task itself without on complete also has more.

126
00:09:19.910 --> 00:09:22.630
We can check if it's currently in progress.

127
00:09:22.640 --> 00:09:27.890
If it's cancelled, we can listen to various events which are emitted, which for example, allows us

128
00:09:27.890 --> 00:09:29.840
to track the upload progress.

129
00:09:29.840 --> 00:09:36.530
But here I just care about the general completion, which is why I will listen to this on Complete Future.

130
00:09:37.540 --> 00:09:43.420
Well, and with this, before we do anything else, let's save that and let's see whether this works.

131
00:09:43.420 --> 00:09:46.360
So let's create a new account with test for it.

132
00:09:46.360 --> 00:09:47.800
Test dot com, maybe.

133
00:09:50.290 --> 00:09:51.400
Some password.

134
00:09:51.400 --> 00:09:53.320
And with an image, of course.

135
00:09:58.870 --> 00:09:59.800
Like this.

136
00:09:59.920 --> 00:10:00.610
And let's click.

137
00:10:00.610 --> 00:10:01.450
Sign up.

138
00:10:01.960 --> 00:10:02.740
Whoops.

139
00:10:02.740 --> 00:10:03.970
Provide a valid username.

140
00:10:03.970 --> 00:10:05.140
Let's click sign up.

141
00:10:06.500 --> 00:10:07.580
And we continue.

142
00:10:08.500 --> 00:10:10.810
I don't see an error here, so that's looking good.

143
00:10:11.200 --> 00:10:17.350
And now let's reload our Firebase Storage View here in the Web console, and you should now see a user

144
00:10:17.350 --> 00:10:20.860
image folder and in there this JPEG file.

145
00:10:20.890 --> 00:10:24.790
And if you click on it, you should also see a preview here on the right.

146
00:10:25.730 --> 00:10:29.750
And this is the file we just uploaded from our device.

147
00:10:30.050 --> 00:10:35.180
And that's great because this now is the user image we just picked.

148
00:10:35.180 --> 00:10:39.710
So the file upload is working, but of course now we want to do more.

149
00:10:39.710 --> 00:10:46.640
We want to make sure that we also get a link to this image which we can use to load it, for example,

150
00:10:46.640 --> 00:10:50.420
in our chat screen to show an image next to every message.

151
00:10:50.570 --> 00:10:53.000
So that is what I want to work on next.

