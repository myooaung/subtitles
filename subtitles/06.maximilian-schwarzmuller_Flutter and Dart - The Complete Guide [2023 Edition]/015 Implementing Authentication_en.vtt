WEBVTT
1
00:00:02.140 --> 00:00:05.320
So time to add Firebase Authentication.

2
00:00:05.320 --> 00:00:11.650
Now, we do already have an authentication module in the course, but again there I showed you the more

3
00:00:11.650 --> 00:00:13.750
generic way of authenticating.

4
00:00:13.750 --> 00:00:20.680
Yes, we did use firebase there, but only as a dummy back and we used the Firebase Rest API to send

5
00:00:20.680 --> 00:00:23.980
a regular HTTP request to Firebase.

6
00:00:23.980 --> 00:00:30.040
And then for example, we had to manage that token that identifies the user on our own.

7
00:00:30.040 --> 00:00:33.670
We manually had to attach it to outgoing HTTP requests.

8
00:00:33.670 --> 00:00:37.660
We had to manage its lifetime, we had to validate the token.

9
00:00:37.750 --> 00:00:40.150
All of that had to be done by us.

10
00:00:40.180 --> 00:00:45.820
Now, I did use that approach because I find it super important that, you know, this generic way of

11
00:00:45.820 --> 00:00:51.310
doing it, because you might not always be using Firebase, you might be working with any rest API that

12
00:00:51.310 --> 00:00:54.850
exposes such a sign up or log in endpoint.

13
00:00:54.850 --> 00:00:57.550
And therefore that was crucial information.

14
00:00:57.700 --> 00:01:04.629
However, if you are using Firebase, you can have an easier life by simply using the Firebase Authentication

15
00:01:04.629 --> 00:01:11.980
SDK, an extra package that helps us with creating users, with signing users up, and most importantly,

16
00:01:11.980 --> 00:01:14.050
with managing that token.

17
00:01:15.230 --> 00:01:23.030
You can search for Flutter Firebase off to find that Firebase Auth package and you can simply go to

18
00:01:23.030 --> 00:01:24.710
the installation instructions here.

19
00:01:24.830 --> 00:01:32.660
Grab that dependency and go back to our spec yaml file and added there below cloud fire store.

20
00:01:32.660 --> 00:01:39.950
And now this will download and add this firebase off package to the Flutter project and this package

21
00:01:39.950 --> 00:01:42.500
will make our lives much easier.

22
00:01:42.620 --> 00:01:48.320
Now, for that to work, we first of all need to go back to our Flutter project here in the Web console

23
00:01:48.320 --> 00:01:55.850
and go to authentication there and here under authentication, click on setup, sign and method because

24
00:01:55.850 --> 00:02:02.450
we need to configure this Firebase Project to support authentication before we can use authentication

25
00:02:02.450 --> 00:02:03.590
in our app.

26
00:02:03.860 --> 00:02:09.530
So click on setup sign in method and you've got plenty of signing methods to choose from.

27
00:02:09.530 --> 00:02:12.770
The official Firebase Docs help you with them.

28
00:02:12.770 --> 00:02:18.080
I will go for the traditional email password sign up so click enable here.

29
00:02:18.770 --> 00:02:22.010
Leave the defaults then as they are and click on Save.

30
00:02:22.860 --> 00:02:32.430
And with that enabled we can go back to our application and here in submit off form, I now want to

31
00:02:32.430 --> 00:02:39.450
use the Firebase Auth package which we just added to either create a new user or to log a user in.

32
00:02:39.810 --> 00:02:45.660
So for that, we can check if is log in is true, in which case you want to log a user in or if it's

33
00:02:45.660 --> 00:02:48.030
false, in which case we want to create a new user.

34
00:02:48.980 --> 00:02:56.720
Now for that, we first of all need to import this package, the fiber base off package.

35
00:02:56.720 --> 00:02:59.900
And from that firebase auth dot dot.

36
00:03:00.860 --> 00:03:02.030
And then here.

37
00:03:04.270 --> 00:03:12.760
In the entire screen state class, we can create a new final variable, which I'll name off.

38
00:03:13.260 --> 00:03:19.170
Which is fire bass off dot instance like this.

39
00:03:19.200 --> 00:03:25.470
This will give us an instance to the Firebase Off object, which is automatically set up and managed

40
00:03:25.470 --> 00:03:27.810
by the fire based off package.

41
00:03:27.810 --> 00:03:29.790
We don't need to do anything for that.

42
00:03:29.790 --> 00:03:35.820
It's all managed behind the scenes because of that fire based configuration and linking we did earlier

43
00:03:35.820 --> 00:03:36.840
in this module.

44
00:03:38.000 --> 00:03:40.910
So now we get this off object here.

45
00:03:41.460 --> 00:03:50.660
We can now use this here in the is log in case, for example, to call sign in with email and password.

46
00:03:50.840 --> 00:03:57.200
And this one's two arguments, surprisingly, the email and password so we can forward these two values,

47
00:03:57.200 --> 00:04:00.800
these two variables, email and password, which we're receiving here.

48
00:04:01.400 --> 00:04:05.390
Now, this will log a user in or it will try to do so.

49
00:04:05.990 --> 00:04:08.840
Now sign in with email and password.

50
00:04:08.840 --> 00:04:11.870
Actually returns a future.

51
00:04:13.730 --> 00:04:14.060
Here.

52
00:04:14.060 --> 00:04:19.820
You can tell that it returns a future which will then unwrap itself to an off result in the end.

53
00:04:21.640 --> 00:04:29.170
Now for that, I will add a new variable here which will be of type of result and I'll name it off result.

54
00:04:30.390 --> 00:04:32.760
Which will simply hold that future here.

55
00:04:33.790 --> 00:04:38.930
And now the important thing is, as I just said, this gives us a future, not directly the result.

56
00:04:38.950 --> 00:04:46.480
So to get the off result, I will turn this into a async function by adding async here between the argument

57
00:04:46.480 --> 00:04:48.160
list and the function body.

58
00:04:48.160 --> 00:04:49.900
And then we can await here.

59
00:04:49.900 --> 00:04:55.450
And as you all learned in the course, this will basically wait for this future to complete and then

60
00:04:55.450 --> 00:04:58.180
store the result in the off result variable.

61
00:04:58.690 --> 00:05:06.490
And we can do something similar here in the case, which is the sign up case there we call off and now

62
00:05:06.490 --> 00:05:13.990
it's create user with email and password and we still pass the email and password as arguments to this

63
00:05:13.990 --> 00:05:14.680
function.

64
00:05:15.740 --> 00:05:18.680
So that's pretty straightforward, not too difficult.

65
00:05:18.680 --> 00:05:19.820
We have these two options.

66
00:05:19.820 --> 00:05:21.020
We send these requests.

67
00:05:21.020 --> 00:05:28.010
And again, behind the scenes, Firebase will go ahead, send the request and automatically store the

68
00:05:28.010 --> 00:05:32.150
token if the request succeeds and manage the token lifetime for us.

69
00:05:32.150 --> 00:05:34.040
That's all taken care of.

70
00:05:34.430 --> 00:05:35.540
Now for the username.

71
00:05:35.540 --> 00:05:37.040
We're not doing anything with that yet.

72
00:05:37.040 --> 00:05:42.020
We'll soon do so and we're also not doing something with the auth result here.

73
00:05:42.970 --> 00:05:45.070
Will do so soon to.

74
00:05:45.940 --> 00:05:49.360
One thing I want to do immediately is I want to add error.

75
00:05:49.360 --> 00:05:57.010
Handling this here can fail and when you're using async await you can use try catch to try something

76
00:05:57.010 --> 00:05:58.990
and potentially catch errors.

77
00:05:58.990 --> 00:06:06.540
So here, I'll wrap all of that in a try block and then down there catch any error.

78
00:06:06.550 --> 00:06:08.110
However, not any error.

79
00:06:08.110 --> 00:06:13.080
I want to catch a specific type of error and we can do this with the on keyword.

80
00:06:13.090 --> 00:06:17.350
I want to catch any error of type platform exception.

81
00:06:18.180 --> 00:06:24.540
That should essentially be errors that are thrown by Firebase because we, for example, entered an

82
00:06:24.540 --> 00:06:27.900
invalid email or a invalid password or anything like that.

83
00:06:29.730 --> 00:06:31.950
In that case, I'll set up a message.

84
00:06:32.670 --> 00:06:34.740
An error occurred.

85
00:06:35.580 --> 00:06:37.740
Please check your credentials.

86
00:06:37.740 --> 00:06:43.800
That's the general error message, but we'll also look into the error object we're getting and see if

87
00:06:43.800 --> 00:06:49.260
we have a more specific message there so we can check if error message is unlike null.

88
00:06:49.350 --> 00:06:54.450
So if it's not equal to null, so if we have an error message, in which case I'll override message

89
00:06:54.450 --> 00:06:56.640
and set it equal to error message.

90
00:06:57.670 --> 00:07:03.940
And then if we do have such a message, it would be nice to show, for example, a little message to

91
00:07:03.940 --> 00:07:04.720
the user.

92
00:07:04.990 --> 00:07:11.740
And for this, we can use scaffold off context to show a snack bar.

93
00:07:11.770 --> 00:07:17.440
Now the snack bar is this little message thing that comes up from the bottom of the screen and shows

94
00:07:17.440 --> 00:07:18.640
an error to the user.

95
00:07:18.940 --> 00:07:25.420
And here we create a snack bar by instantiating the snack bar widget which ships with Flutter.

96
00:07:25.630 --> 00:07:32.380
And to snack bar, we can pass the content argument and set up a text widget which shows the message

97
00:07:32.380 --> 00:07:33.380
we want to show.

98
00:07:33.400 --> 00:07:36.190
So it value which is stored in the message variable.

99
00:07:36.790 --> 00:07:40.210
And you can also set the background color of this snack bar.

100
00:07:40.210 --> 00:07:44.590
And here I'll use theme of context dot error color.

101
00:07:44.590 --> 00:07:48.490
And this should be a nice red color for this snack bar.

102
00:07:50.130 --> 00:07:51.930
Now after this.

103
00:07:51.930 --> 00:07:59.010
So after this on platform exception catch block, I'll add another catch block which catches any other

104
00:07:59.010 --> 00:08:00.390
errors we might have.

105
00:08:00.420 --> 00:08:06.360
There shouldn't be many, but in case there are errors, I'll print them here so that we during development

106
00:08:06.360 --> 00:08:07.500
can see them at least.

107
00:08:09.870 --> 00:08:10.250
Okay.

108
00:08:10.260 --> 00:08:12.030
That was a lot of work.

109
00:08:12.030 --> 00:08:12.810
We're not done.

110
00:08:12.810 --> 00:08:15.750
But let's see whether this works thus far.

111
00:08:15.840 --> 00:08:24.450
If I save this and I try to sign up and I enter test the test outcome and I enter a valid password and

112
00:08:24.450 --> 00:08:29.190
enter some username, the username is not getting stored anyways right now so it doesn't matter.

113
00:08:29.190 --> 00:08:31.740
But if I enter some username and I click sign up.

114
00:08:33.010 --> 00:08:34.990
I see no error at least.

115
00:08:35.559 --> 00:08:42.280
I do see an error here regarding the missing plugin exception and a simple app restart should fix this.

116
00:08:42.280 --> 00:08:46.870
So let's close this running process and again restart in general.

117
00:08:46.870 --> 00:08:52.120
If you get such a missing plug in error, simply restart the app entirely and try again.

118
00:08:52.240 --> 00:08:55.780
So let's wait for that to come up again.

119
00:08:57.400 --> 00:09:01.360
And if we now go back and try to create a new account again.

120
00:09:02.260 --> 00:09:04.810
Enter all those credentials.

121
00:09:07.680 --> 00:09:09.090
Click sign up again.

122
00:09:09.090 --> 00:09:12.060
No error here, but an error here.

123
00:09:13.020 --> 00:09:14.550
So let's see what's wrong.

124
00:09:15.780 --> 00:09:21.960
And we see that we have a problem with the scaffold off function.

125
00:09:24.070 --> 00:09:26.920
No scaffold ancestor could be found.

126
00:09:27.430 --> 00:09:31.000
That's essentially the problem we we have here.

127
00:09:32.400 --> 00:09:34.170
Now before we tackle this.

128
00:09:35.170 --> 00:09:40.810
Let's switch to Firebase and go to users there under authentication and you shouldn't see a user there

129
00:09:40.810 --> 00:09:42.610
because something went wrong.

130
00:09:42.610 --> 00:09:49.420
That's the reason why we tried to show that snack bar, but there also something went wrong, so we

131
00:09:49.420 --> 00:09:50.590
got a couple of errors.

132
00:09:50.980 --> 00:09:53.860
The problem here is that on this scaffold.

133
00:09:54.900 --> 00:10:00.660
I'm using a context here to basically tell flutter in which context to render the scaffold.

134
00:10:00.690 --> 00:10:08.430
The problem is here I'm using the context of this off screen and this is actually the wrong context

135
00:10:08.430 --> 00:10:08.940
here.

136
00:10:09.150 --> 00:10:17.460
Instead, we should accept the build context here as an extra argument in submit off form and use this

137
00:10:17.460 --> 00:10:18.780
context instead.

138
00:10:18.960 --> 00:10:22.620
So here, use this argument also for the theme.

139
00:10:22.980 --> 00:10:26.280
Now, you might be wondering where is this build context coming from?

140
00:10:26.550 --> 00:10:32.490
Currently from nowhere, we have to pass it so we have to go to the auth form and for one, make it

141
00:10:32.490 --> 00:10:39.960
clear here on this submit function property that we need to pass the context here because we want it

142
00:10:39.960 --> 00:10:42.750
in that upper screen and therefore we need to pass it here.

143
00:10:42.750 --> 00:10:48.480
So when we call submit function as a last argument, I'll forward my context because this here from

144
00:10:48.480 --> 00:10:55.830
the auth form is the context that actually has access to the surrounding scaffold, which in turn is

145
00:10:55.830 --> 00:11:02.100
the context where the snack bar should be mounted on because offscreen context does not have access

146
00:11:02.100 --> 00:11:06.930
to this scaffold because this scaffold here is rendered by the offscreen.

147
00:11:06.960 --> 00:11:10.350
Now the context of the off screen is one level above that.

148
00:11:10.440 --> 00:11:15.870
So in order to have access to this scaffold on which the snack bar should be rendered, we have to dive

149
00:11:15.870 --> 00:11:21.390
into a widget which is inside that scaffold, and the context of that widget is then the right one.

150
00:11:21.390 --> 00:11:24.090
And that's just the case for all forum.

151
00:11:24.900 --> 00:11:27.150
So with that, we should now at least see an error message.

152
00:11:27.150 --> 00:11:28.620
If I click sign up and I do.

153
00:11:28.650 --> 00:11:31.080
The email address is badly formatted.

154
00:11:31.380 --> 00:11:36.210
Now it looks like a valid email address to me, but it is this extra wide space at the end here which

155
00:11:36.210 --> 00:11:37.530
is causing problems.

156
00:11:37.650 --> 00:11:43.290
Now, this is a bad user experience that we are not able to authenticate because of this.

157
00:11:43.290 --> 00:11:49.560
So therefore I'll go back to the forum widget and when a forward user email ends on, I will actually

158
00:11:49.560 --> 00:11:56.310
call trim on those values to remove any excess whitespace at the beginning and end.

159
00:11:56.310 --> 00:12:02.280
So this will remove any access whitespace on email, password and username and therefore will not get

160
00:12:02.280 --> 00:12:06.130
this error because will not send this white space as part of the email.

161
00:12:06.150 --> 00:12:10.310
So if you now click sign up, this closes and now we get no error.

162
00:12:10.320 --> 00:12:17.100
And now if we go back to the web console and you refresh this users list, you should see your user

163
00:12:17.100 --> 00:12:18.690
here with your email address.

164
00:12:18.690 --> 00:12:23.220
And this was now created by this Firebase off SDK.

165
00:12:23.730 --> 00:12:25.270
So that's pretty, pretty sweet.

166
00:12:25.290 --> 00:12:28.710
We also saw the error handling in action, so that's great too.

167
00:12:29.220 --> 00:12:32.070
And with that, we can create users.

168
00:12:32.220 --> 00:12:33.660
That's a nice first step.

169
00:12:33.660 --> 00:12:40.050
They are now stored and this token, which is sent back by Firebase, is already managed by the Firebase

170
00:12:40.050 --> 00:12:40.500
package.

171
00:12:40.500 --> 00:12:42.030
We don't need to do anything there.

172
00:12:42.030 --> 00:12:47.330
It will even be automatically added to outgoing requests which were later going to send.

173
00:12:47.340 --> 00:12:52.710
So that's entirely happening behind the scenes, which is super, super awesome and takes a lot of work

174
00:12:52.710 --> 00:12:53.580
away from us.

175
00:12:53.880 --> 00:12:57.630
However, the authentication process is not fully finished.

176
00:12:57.870 --> 00:13:01.560
We will later also add image upload, but that will follow.

177
00:13:01.560 --> 00:13:02.640
Well, later.

178
00:13:02.640 --> 00:13:08.130
But one thing I want to do immediately is store the user name and that's currently not happening.

179
00:13:08.130 --> 00:13:12.900
We're getting the username but we're not doing anything with it, so let's make sure we also store the

180
00:13:12.900 --> 00:13:13.620
username.

