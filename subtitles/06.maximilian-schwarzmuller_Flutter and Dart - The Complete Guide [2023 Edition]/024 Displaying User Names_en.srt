1
00:00:02,120 --> 00:00:08,840
So it's username time and for that back in the message bubble, we can make sure that besides outputting

2
00:00:08,840 --> 00:00:13,940
the main message, we also output the user name of the user who wrote the message.

3
00:00:15,280 --> 00:00:15,940
For this.

4
00:00:15,940 --> 00:00:22,150
I'll actually wrap text here into a column because I now want to have another text above it.

5
00:00:22,360 --> 00:00:25,840
So let's add this text and this should now be the username.

6
00:00:26,680 --> 00:00:28,660
So here.

7
00:00:29,420 --> 00:00:38,240
I expect a new property, a string, which is the username, and that should also be passed to the message

8
00:00:38,240 --> 00:00:39,920
bubble as an argument.

9
00:00:41,180 --> 00:00:47,510
So this username should be output here and we can also set some text style here.

10
00:00:47,810 --> 00:00:49,250
And for a start.

11
00:00:50,040 --> 00:00:53,250
Let's simply set the font weight here to font weight.

12
00:00:53,550 --> 00:00:54,300
Bold.

13
00:00:55,560 --> 00:01:00,540
So very simple style that should show the username above the main text.

14
00:01:00,570 --> 00:01:05,330
Now the problem is that at the moment we're not getting this username in messages.

15
00:01:05,340 --> 00:01:11,190
Here we are forwarding the text and the check, whether it's us or not, but we're not forwarding the

16
00:01:11,190 --> 00:01:16,260
username because we don't have the username of the user who created a message.

17
00:01:16,410 --> 00:01:21,900
The only thing we have on Firebase for a given message is the idea of the user.

18
00:01:22,760 --> 00:01:25,010
We got the dummy IDs and we got the real IDs.

19
00:01:25,070 --> 00:01:31,370
Now, actually, to avoid any problems, let's delete all documents with that dummy user ID of a.

20
00:01:31,400 --> 00:01:36,290
So quickly delete those free documents so that they only have documents.

21
00:01:36,290 --> 00:01:38,900
Only have messages by real users.

22
00:01:39,170 --> 00:01:40,850
So that's the second one.

23
00:01:41,270 --> 00:01:44,150
And here's the third one.

24
00:01:44,360 --> 00:01:48,470
Still, we only have two user IDs here, not the user names.

25
00:01:48,470 --> 00:01:51,920
And of course I want to output the real user name here and not the ID.

26
00:01:51,950 --> 00:01:56,360
Having this here in the chat app would probably not be that useful.

27
00:01:57,010 --> 00:02:01,840
Now of course we can use the ID to get the username that belongs to it.

28
00:02:02,290 --> 00:02:05,530
This is certainly something we can do.

29
00:02:06,200 --> 00:02:09,710
And for that, we can forward.

30
00:02:10,710 --> 00:02:17,910
Let's say the user ID here to message bubble as a second argument and in message bubble change that

31
00:02:17,910 --> 00:02:22,800
name to user ID to make it clear that we're actually not getting the user name route right now, but

32
00:02:22,800 --> 00:02:23,790
the user ID.

33
00:02:24,420 --> 00:02:30,360
So now we have the user ID here and in the message bubble, we could now utilize this user ID to fetch

34
00:02:30,360 --> 00:02:31,680
the actual user name.

35
00:02:31,950 --> 00:02:39,150
We could say that we wrap this text here where we want to output the username with a stream builder.

36
00:02:41,210 --> 00:02:47,630
And then we reach out to the users collection and look for the document with that ID.

37
00:02:48,980 --> 00:02:54,620
Now I'll do that, but I'll actually replace Stream Builder here with Future Builder because I don't

38
00:02:54,620 --> 00:02:56,420
want to set up an ongoing stream.

39
00:02:56,420 --> 00:02:59,600
Instead, I'll just want to fetch that username once.

40
00:02:59,600 --> 00:03:02,090
There is no need to set up a live listener.

41
00:03:02,090 --> 00:03:06,980
It's not going to change because we don't even have a functionality to change our username here.

42
00:03:07,550 --> 00:03:14,450
Now, the future here is that we reach out to fire store and for that you need to add the import to

43
00:03:14,450 --> 00:03:15,770
cloud file store.

44
00:03:16,640 --> 00:03:24,320
So we reach out to fires, the word dot incense, and then we reach out to the users collection for

45
00:03:24,350 --> 00:03:26,450
a certain user ID.

46
00:03:26,990 --> 00:03:33,350
So on that collection, I now use document to point at a certain document and I want to point at the

47
00:03:33,350 --> 00:03:35,060
document with that user ID.

48
00:03:35,570 --> 00:03:41,540
Keep in mind that in Firebase we have a user's collection and we have documents where the names or the

49
00:03:41,540 --> 00:03:43,850
IDs indeed are our user IDs.

50
00:03:45,030 --> 00:03:50,430
So we can look for such a document and document on its own does not give us a future yet.

51
00:03:50,430 --> 00:03:56,970
But we can call, get on this and get we'll simply get the data off this document and it will do this

52
00:03:56,970 --> 00:03:58,140
through a future.

53
00:03:59,230 --> 00:03:59,470
Now.

54
00:03:59,470 --> 00:04:05,830
Then we have our builder where we have our data snapshot here, and that snapshot will eventually hold

55
00:04:05,830 --> 00:04:07,840
data about that user.

56
00:04:08,560 --> 00:04:11,890
So here we can, of course, check the snapshot connection state.

57
00:04:12,190 --> 00:04:19,000
And if we're still waiting, so if our connection status waiting, we could return some dummy text where

58
00:04:19,000 --> 00:04:21,700
we say loading something like this.

59
00:04:22,120 --> 00:04:29,530
And once we get the actual data here, we output snapshot data and that will give us access to this

60
00:04:29,530 --> 00:04:30,160
document.

61
00:04:30,160 --> 00:04:31,840
And there it's the username field.

62
00:04:31,840 --> 00:04:32,670
We're interested.

63
00:04:32,680 --> 00:04:40,540
So snapshot data and then this is a map where we access username like this if we do this and we saved

64
00:04:40,540 --> 00:04:42,580
as indeed we see the username here.

65
00:04:43,120 --> 00:04:47,890
Now let's make sure we can also read the text if it's on the x and color background.

66
00:04:48,740 --> 00:04:56,300
So for that I'll set the colour of the user name to the same colour as the message text.

67
00:04:57,890 --> 00:04:58,730
Like this.

68
00:05:00,200 --> 00:05:01,550
And now it is this readable.

69
00:05:02,990 --> 00:05:09,950
And now maybe all the for some alignment to make sure this is not centered like it currently seems to

70
00:05:09,950 --> 00:05:10,370
be.

71
00:05:12,260 --> 00:05:15,770
We can control this on the column with the cross axis alignment.

72
00:05:15,770 --> 00:05:19,050
And the alignment actually should depend on whether it's by us or not.

73
00:05:19,070 --> 00:05:20,780
If it's by us, it should be on the right.

74
00:05:20,780 --> 00:05:22,100
So alignment.

75
00:05:22,100 --> 00:05:25,400
And if it's by the other user, it should be on the left.

76
00:05:25,400 --> 00:05:27,080
So alignment start.

77
00:05:27,750 --> 00:05:31,680
So here on the cross axis alignment of the column, we can check if it's us.

78
00:05:31,680 --> 00:05:38,010
And if it is us, I'll set cross axis alignment and to move it to the right and otherwise cross axis

79
00:05:38,010 --> 00:05:38,370
alignment.

80
00:05:38,370 --> 00:05:40,110
Start to move it to the left.

81
00:05:41,080 --> 00:05:43,700
We now save that this looks pretty good.

82
00:05:43,720 --> 00:05:46,330
Now the text should also be aligned to the right.

83
00:05:46,720 --> 00:05:50,710
So on the message text we can add, text, align and all.

84
00:05:50,830 --> 00:05:59,380
Check if it's me and if it's me, I'll set text align here to end and otherwise text align to start.

85
00:06:00,270 --> 00:06:04,160
And now the message text itself also should be aligned correctly.

86
00:06:04,830 --> 00:06:05,590
So that's good.

87
00:06:05,610 --> 00:06:08,750
Now we see the username, but this approach has a flaw.

88
00:06:08,760 --> 00:06:13,350
And by the way, you don't see it on the left because this is not connected to our development server.

89
00:06:13,350 --> 00:06:18,750
This is an old snapshot of the app which is still running here, but this approach has a flaw here.

90
00:06:18,750 --> 00:06:20,850
And do you know which flaw that is?

91
00:06:22,240 --> 00:06:27,400
The flaw is that I'm fetching that username here in the message bubble.

92
00:06:27,610 --> 00:06:32,920
I'm fetching it with my future builder, which I added here this one.

93
00:06:32,920 --> 00:06:38,440
And that means that for every new message bubble that's being rendered, I reach out to Firebase and

94
00:06:38,440 --> 00:06:39,730
I fetch that data.

95
00:06:39,760 --> 00:06:41,260
This can be good or bad.

96
00:06:41,290 --> 00:06:44,560
This can hammer this API quite a bit.

97
00:06:44,980 --> 00:06:49,930
Now, the good news is, since this isn't a list, it should only fetch the username for the messages

98
00:06:49,930 --> 00:06:51,780
that are actually being rendered.

99
00:06:51,790 --> 00:06:56,140
And in addition, fire store also caches data locally.

100
00:06:56,140 --> 00:07:00,160
So it's not going to make a million requests here probably.

101
00:07:00,160 --> 00:07:04,390
Instead, it should cache data and not send too many requests.

102
00:07:04,570 --> 00:07:07,470
Still, this is not something you might want here.

103
00:07:07,480 --> 00:07:13,360
You maybe don't want to send a new request for every message bubble that's being rendered.

104
00:07:14,460 --> 00:07:21,600
Therefore we could argue that we don't want to fetch this here, but that instead when we create a message.

105
00:07:21,600 --> 00:07:27,930
So when we create a new message here in a new message widget, we want to store the username next to

106
00:07:27,930 --> 00:07:32,970
the user ID so that we already have the username here and we don't need to fetch it again.

107
00:07:33,120 --> 00:07:39,210
This would mean that we only need to fetch it once when we send this message instead of every time when

108
00:07:39,210 --> 00:07:43,290
we render a message and we could even simplify this more.

109
00:07:43,320 --> 00:07:48,990
Theoretically, we could also fetch it once when our application starts up and then store this in some

110
00:07:48,990 --> 00:07:51,750
app wide state or anywhere else, wherever you want.

111
00:07:51,750 --> 00:07:55,590
So you can really optimize this quite a bit if you want to.

112
00:07:56,780 --> 00:07:57,350
Here.

113
00:07:57,350 --> 00:07:59,950
I will fetch it whenever we create a new message.

114
00:07:59,960 --> 00:08:01,700
So for that, I'll.

115
00:08:02,900 --> 00:08:08,780
Get my user data by a waiting for fire store instance.

116
00:08:09,480 --> 00:08:17,490
And then reaching out to the users collection for the document with my user ID here, which I get from

117
00:08:17,490 --> 00:08:18,780
the user I fetched.

118
00:08:19,630 --> 00:08:23,380
And then get and that's the same I did here in the message bubble.

119
00:08:24,920 --> 00:08:26,450
It's the same future.

120
00:08:26,840 --> 00:08:32,690
But now I get this here for the user who is sending a message and all the user data I resolve for which

121
00:08:32,690 --> 00:08:34,850
I wait, I'll be able to get.

122
00:08:35,650 --> 00:08:40,299
That user name because that is that user document in the user's collection.

123
00:08:40,299 --> 00:08:46,090
And now the username is also being stored in every new message which we store in our store.

124
00:08:46,510 --> 00:08:52,960
Now that means that when we fetch all messages here in the messages widget with the Stream Builder,

125
00:08:52,960 --> 00:08:59,260
those messages will already include the user names which are fetched because they will be part of the

126
00:08:59,260 --> 00:09:00,730
messages themselves.

127
00:09:01,150 --> 00:09:05,020
So that means that now we can just forward username here.

128
00:09:06,050 --> 00:09:12,410
To our message bubble because we add such a username field here when we send a message and therefore

129
00:09:12,410 --> 00:09:21,020
in the message bubble I can rename this back to username also here and we can assume that this already

130
00:09:21,020 --> 00:09:22,670
is the final username.

131
00:09:22,880 --> 00:09:26,990
So now in the message bubble we can get rid of that future builder here.

132
00:09:27,290 --> 00:09:29,690
Can get rid of all of that.

133
00:09:32,200 --> 00:09:34,570
And instead we just have our text here.

134
00:09:39,640 --> 00:09:42,880
Just like this and we don't have snapshot data.

135
00:09:42,910 --> 00:09:43,660
Username.

136
00:09:43,780 --> 00:09:47,650
But we use the username property which we now have in the message bubble.

137
00:09:50,510 --> 00:09:55,070
Now, of course, this won't work with our existing messages, which is why I'm getting an error here,

138
00:09:55,070 --> 00:09:59,120
because all those existing chat messages don't have the username field.

139
00:09:59,360 --> 00:10:05,450
That's well, delete this entire chat collection so that it's going to be recreated.

140
00:10:05,840 --> 00:10:07,310
Let's restart the app now.

141
00:10:08,040 --> 00:10:10,800
And let's now send a message test.

142
00:10:12,680 --> 00:10:14,390
And also send one here.

143
00:10:15,740 --> 00:10:20,960
And of course, from the left device, I'm still getting an error because I'm running an old version

144
00:10:20,960 --> 00:10:25,070
of the app here, so that version doesn't attach the username yet.

145
00:10:25,310 --> 00:10:27,470
So I'm quickly going to do this manually.

146
00:10:34,400 --> 00:10:36,080
Here in the chat collection.

147
00:10:37,700 --> 00:10:40,700
On that document which doesn't have the username field.

148
00:10:40,700 --> 00:10:47,300
I will manually add this field for now to fix this error and set this to Maximilian.

149
00:10:47,300 --> 00:10:48,230
For example.

150
00:10:48,230 --> 00:10:54,530
Added Reload the app and you see that this now works correctly.

151
00:10:55,720 --> 00:10:57,510
So that works.

152
00:10:57,520 --> 00:11:01,160
We're going to run a more recent version of the app on Android soon, too.

153
00:11:01,180 --> 00:11:06,790
And with that, we should have a relatively efficient way of storing and fetching the username and displaying

154
00:11:06,790 --> 00:11:07,630
the username.

155
00:11:07,660 --> 00:11:12,340
Now later we'll all show an image of the user, but for the moment, this is good enough.

156
00:11:12,340 --> 00:11:14,050
This is fine like that.

157
00:11:15,070 --> 00:11:19,450
So with all of that, we got that finished chat functionality.

158
00:11:19,450 --> 00:11:22,570
We can send messages, we can receive messages.

159
00:11:22,570 --> 00:11:24,010
This list is updating.

160
00:11:24,010 --> 00:11:28,000
Whenever we get a new message, we got our authentication in place.

161
00:11:28,090 --> 00:11:34,450
I would say it is now time to move on to image upload with the Firebase Cloud Storage.

