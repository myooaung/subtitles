WEBVTT
1
00:00:02.850 --> 00:00:08.310
Now the remaining thing is that we maybe want to adjust our chart and we can adjust it in two different

2
00:00:08.400 --> 00:00:08.810
ways,

3
00:00:08.820 --> 00:00:14.580
we can either make sure that our bars here take the full available height or that we shrink the height

4
00:00:14.610 --> 00:00:15.720
a little bit

5
00:00:15.720 --> 00:00:17.830
and in reality, we might want to do both. 

6
00:00:18.240 --> 00:00:19.970
I think that's too much height here

7
00:00:20.100 --> 00:00:25.940
but I also want to make sure that if we have it on a slightly bigger device, we never have an empty white

8
00:00:25.940 --> 00:00:27.750
space at the bottom.

9
00:00:27.750 --> 00:00:34.110
So therefore first of all in the main.dart file, let's maybe give this only 30% and assign 70%

10
00:00:34.110 --> 00:00:41.910
to our transaction list and now let's still make sure that our chart bars are positioned properly

11
00:00:42.110 --> 00:00:45.850
and now to also make sure that our bars are sized dynamically,

12
00:00:45.860 --> 00:00:53.210
let's go to our chart bar and there, I have a fixed height for my text above the bar, that might be fine

13
00:00:53.630 --> 00:01:00.260
but the bar itself, we can probably size that dynamically. To size this chart bar dynamically, we need

14
00:01:00.260 --> 00:01:02.780
to find out which available height we have

15
00:01:02.780 --> 00:01:06.530
and now we're not really interested in the full device height for that.

16
00:01:06.680 --> 00:01:09.640
Of course, we could simply go to the main.dart file,

17
00:01:09.830 --> 00:01:16.040
take our calculation here which calculates how much height we assign to our container and copy that

18
00:01:16.040 --> 00:01:24.020
here into our chart bar to then take a fraction of that available chart height for our chart bar itself,

19
00:01:24.020 --> 00:01:29.900
so for the container between the labels. But that would mean that whenever we adjust this fraction here,

20
00:01:30.020 --> 00:01:32.700
we also have to adjust it here in the chart bar.

21
00:01:32.780 --> 00:01:38.240
So it would be nicer if we could get the information about how much space is available for this chart bar

22
00:01:38.240 --> 00:01:46.430
in general in here because if we take the Dart DevTools which I opened up here which you can open through

23
00:01:46.730 --> 00:01:52.820
Visual Studio Code by using the command panel and then just typing Dart DevTools and you should

24
00:01:52.820 --> 00:01:59.270
find that command where you can hit enter, if you have these opened and you select a widget here with

25
00:01:59.270 --> 00:02:04.550
select widget mode and you click on any bar, you actually see that this is in a column here,

26
00:02:07.530 --> 00:02:17.640
which in the end if you scroll up in that tree, is all in a row and that row already takes the available

27
00:02:17.640 --> 00:02:21.560
height of our chart minus some padding which we assigned.

28
00:02:21.780 --> 00:02:26.640
So the row already has the height but now inside of the chart bar widget, we'd be interested in getting

29
00:02:26.640 --> 00:02:31.790
that height and sizing our bar here appropriately based on that height

30
00:02:31.950 --> 00:02:35.280
and for that, there is another widget we can use in Flutter

31
00:02:35.400 --> 00:02:42.690
and that's the LayoutBuilder widget. The LayoutBuilder widget takes one named argument which you have

32
00:02:42.690 --> 00:02:47.400
to provide and that's the builder argument which gives you two arguments then,

33
00:02:47.400 --> 00:02:48.900
the first is a context,

34
00:02:48.900 --> 00:02:51.080
so that is given to you by Flutter,

35
00:02:51.090 --> 00:02:54.570
you don't call that function, Flutter calls that function for you

36
00:02:54.570 --> 00:03:02.000
and the second is an object with some information about the constraints which are applied to this widget

37
00:03:02.000 --> 00:03:08.130
you're in, so to the chart bar widget and constraints are a feature which Flutter offers which defines

38
00:03:08.130 --> 00:03:16.640
how much space a certain widget may take. Indeed, constraints are an important concept in Flutter. Constraints

39
00:03:16.740 --> 00:03:22.650
define how a widget is rendered on the screen and you set constraints by, for example, assigning a

40
00:03:22.650 --> 00:03:29.070
height or a width or otherwise if you don't set this, all built-in Flutter widgets have their own default

41
00:03:29.070 --> 00:03:34.550
constraints, like for example a ListView has an infinite amount of height,

42
00:03:34.860 --> 00:03:42.000
a column also has that but is not scrollable and so on. Constraints always refer to height and width

43
00:03:42.360 --> 00:03:45.980
and are expressed as a minimum and a maximum height

44
00:03:45.990 --> 00:03:51.000
and width you might have on a given widget and you can set them on your own as I just said or there

45
00:03:51.000 --> 00:03:57.300
are some sensible defaults in Flutter. Now thus far, we implicitly always use these constraints when we

46
00:03:57.300 --> 00:04:03.840
assign different heights or width or when we used expanded to make sure that a widget takes all the

47
00:04:03.840 --> 00:04:06.580
space it can get in a column or in a row.

48
00:04:06.840 --> 00:04:12.890
Now the LayoutBuilder gives us information about the constraints that are applied to this widget we're

49
00:04:12.890 --> 00:04:13.050
in,

50
00:04:13.050 --> 00:04:19.380
so to the chart bar, no matter if we explicitly set these constraints by assigning a size on some parent

51
00:04:19.380 --> 00:04:25.770
widget or if these are the default constraints of the built-in widget we're placing our widget in.

52
00:04:25.770 --> 00:04:26.260
No matter what

53
00:04:26.260 --> 00:04:32.490
it is, constraint is or constraints is actually an object with some information about the constraints

54
00:04:32.490 --> 00:04:33.750
that apply

55
00:04:34.050 --> 00:04:39.180
and in here, in that builder, we should now return the widget tree for our custom widget.

56
00:04:39.180 --> 00:04:44.250
So basically what we had in there before, the column in this case, I return this inside of the builder

57
00:04:44.250 --> 00:04:45.200
function

58
00:04:45.390 --> 00:04:51.480
but now we have the constraints object available and we can use that to dynamically calculate the height

59
00:04:51.570 --> 00:04:56.720
and width, if we need it, of elements inside of that widget based on the constraints,

60
00:04:56.720 --> 00:05:04.360
so of the sizing, that is applied to our custom widget from outside. So here we could take the constraints

61
00:05:04.780 --> 00:05:11.130
on that height here by accessing constraints.maxHeight.

62
00:05:11.160 --> 00:05:12.790
So that's the maximum height

63
00:05:12.840 --> 00:05:21.690
this may take or our entire chart bar may take and maybe give the bar itself 70% of it.

64
00:05:22.020 --> 00:05:27.870
Now as we can see, this is a bit too big here and actually clear that select mode here.

65
00:05:27.890 --> 00:05:33.980
So this is a bit too big because of course here, we also like a fixed height label, then a fixed

66
00:05:33.980 --> 00:05:38.270
height spacing, more fixed height spacing and another text.

67
00:05:38.270 --> 00:05:44.660
So the best solution here might be to assign dynamically calculated heights to all these elements so

68
00:05:44.660 --> 00:05:46.620
that they add up to 1.

69
00:05:46.700 --> 00:05:50.740
So we could say this should maybe be 60% of the available height,

70
00:05:50.840 --> 00:05:55.900
this first text here maybe gets 15%,

71
00:05:55.900 --> 00:06:04.460
then here this height gets only 0.5, so 5%, same down here for this spacing,

72
00:06:04.470 --> 00:06:08.070
gets also 5% and then this text at the bottom,

73
00:06:08.070 --> 00:06:17.880
I'll also wrap this in a container just as I did it for my text up there and also give this a height

74
00:06:18.000 --> 00:06:29.960
of let's say 15%. Now with that, I have 30% for the two texts together, 10% for the

75
00:06:29.960 --> 00:06:35.120
spacing here and the remaining 60% for my appBar container.

76
00:06:35.120 --> 00:06:38.640
Now one last thing I want to do, the text at the bottom here,

77
00:06:38.690 --> 00:06:44.930
I'll also wrap this in a FittedBox now to ensure that, if for some reason, we should be on a very small

78
00:06:44.930 --> 00:06:47.500
device or we should have only very little height available,

79
00:06:47.540 --> 00:06:55.560
the text is automatically resized to still fit into that box. And with that, now we have a chart

80
00:06:55.550 --> 00:07:02.170
that fills that space perfectly, dynamically calculated on the chart size where the chart size,

81
00:07:02.170 --> 00:07:09.260
so the overall box is also dynamically calculated based on the screen height. And therefore now if

82
00:07:09.260 --> 00:07:13.530
you rotate this, this looks ugly.

83
00:07:13.530 --> 00:07:20.640
We will fix that but now we ensure that this is all squeezed onto one screen here as well, which right

84
00:07:20.640 --> 00:07:27.090
now is broken but at least we fixed that problem that we have fixed heights that might or might not

85
00:07:27.090 --> 00:07:27.960
look good.

86
00:07:27.960 --> 00:07:33.000
Now here we're working with relative heights, which as you can see is still not perfect here but which

87
00:07:33.000 --> 00:07:38.790
is a great step forward to make sure that at least on portrait mode, stuff is working correctly and we'll

88
00:07:38.790 --> 00:07:41.550
also of course make sure that it works on landscape mode.

