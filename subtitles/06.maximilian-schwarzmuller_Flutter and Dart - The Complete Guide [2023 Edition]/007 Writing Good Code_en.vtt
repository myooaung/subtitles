WEBVTT
1
00:00:02.190 --> 00:00:08.130
So this was a very thorough look at how Flutter builds its widget tree, how it renders content on the

2
00:00:08.130 --> 00:00:13.260
screen, how it updates and what you can do to make sure that it updates efficiently

3
00:00:13.260 --> 00:00:16.100
and that brings us to writing good code.

4
00:00:16.110 --> 00:00:23.930
Now what is good code? I'd say there are two important pieces that make up good code,

5
00:00:23.960 --> 00:00:26.090
two possible definitions.

6
00:00:26.450 --> 00:00:32.630
When we speak about writing good code, we could be speaking about writing readable, understandable or

7
00:00:32.630 --> 00:00:34.270
maintainable code.

8
00:00:34.520 --> 00:00:42.350
So code which doesn't really impact the performance, neither negatively or positively but which is easier

9
00:00:42.350 --> 00:00:44.930
to manage for you as a developer

10
00:00:44.930 --> 00:00:51.680
or we speak about good code that follows certain practices which can help with performance, such as using

11
00:00:51.680 --> 00:00:58.940
the const keyword in front of classes or class constructors which give you constant objects to avoid

12
00:00:59.060 --> 00:01:02.630
unnecessary rebuilds of these widgets in the Flutter widget tree,

13
00:01:02.660 --> 00:01:05.370
what I showed you in the last lecture.

14
00:01:05.370 --> 00:01:07.790
Now let's go to the readability point.

15
00:01:07.790 --> 00:01:13.610
It might sound unimportant because performance is the most important thing but actually, it's not because

16
00:01:13.610 --> 00:01:19.220
the more readable your code is, the easier it is for you to work on it, to improve your app and the easier

17
00:01:19.220 --> 00:01:25.650
it is for you to write code with little to no errors. Your code should of course be understandable to

18
00:01:25.650 --> 00:01:25.970
you,

19
00:01:25.980 --> 00:01:27.280
that's most important.

20
00:01:27.300 --> 00:01:31.800
You will have to be able to understand your code so that you can maintain and change it

21
00:01:31.830 --> 00:01:37.440
and when I say understand your code, I mean you should also be able to understand your code in a month

22
00:01:37.470 --> 00:01:39.040
or half a year from though,

23
00:01:39.060 --> 00:01:41.230
so think about your future self.

24
00:01:41.310 --> 00:01:43.980
Your code might be super clear to you right now

25
00:01:44.070 --> 00:01:49.860
but if you have an app and you want to change or add or edit something in half a year, if you need a

26
00:01:49.860 --> 00:01:56.730
day to understand your app code structure again, that's a day lost. So you'll want to write code which

27
00:01:56.730 --> 00:02:04.020
you can quickly get into and quickly understand and understand how pieces are working together. Also

28
00:02:04.120 --> 00:02:08.800
if you're working in a team or if you're sharing your code with others, you should of course also make

29
00:02:08.800 --> 00:02:11.560
sure that your code is understandable by others.

30
00:02:11.560 --> 00:02:17.450
So you should follow certain common practices and in general, write clean and clear code.

31
00:02:17.950 --> 00:02:19.750
Now for performance,

32
00:02:19.750 --> 00:02:26.020
there are certain practices, like using const which can help with app performance and you should of course

33
00:02:26.020 --> 00:02:29.890
try to implement these features or these practices.

34
00:02:29.920 --> 00:02:37.330
Now it's important to know though or important to keep in mind that you will always miss certain possible

35
00:02:37.330 --> 00:02:43.060
improvements and that's not automatically resulting in a bad or laggy app.

36
00:02:43.060 --> 00:02:50.350
We have very fast mobile devices and the apps you're building might not be very performance hungry,

37
00:02:50.350 --> 00:02:56.560
so even if you can improve the performance, it might simply not make a difference to your users because

38
00:02:56.560 --> 00:02:58.210
your app is already pretty quick,

39
00:02:58.450 --> 00:03:05.650
even though you're not following every single best practice because you will always overlook some optimization

40
00:03:05.680 --> 00:03:06.820
opportunity.

41
00:03:06.910 --> 00:03:11.860
So checking your app thoroughly is definitely something you should do and you should be open minded

42
00:03:11.860 --> 00:03:15.160
for new practices and see how you can improve your code

43
00:03:15.250 --> 00:03:22.120
but if you spend days only looking at your code and seeing where you can squeeze out another millisecond,

44
00:03:22.510 --> 00:03:24.160
then it might not be worth it

45
00:03:24.220 --> 00:03:30.250
if that delays the overall development of your app. Still of course, it is an important part to keep common

46
00:03:30.250 --> 00:03:37.720
patterns in mind and try to build or to write code which also helps with performance. Hence you should

47
00:03:37.810 --> 00:03:41.240
always re-evaluate your code and explore new best practices,

48
00:03:41.320 --> 00:03:46.870
even if you have your app already published and you might thereafter have learned about a new pattern

49
00:03:46.870 --> 00:03:53.230
which can help with rebuilding or avoiding rebuilding of widgets and then you might go back and improve

50
00:03:53.230 --> 00:03:55.390
your code in places where you can use that.

