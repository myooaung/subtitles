WEBVTT
1
00:00:02.150 --> 00:00:04.600
Time for some alternative syntax.

2
00:00:04.610 --> 00:00:11.090
There's nothing wrong with the way we provided our packages or our data thus far, but I'm always a

3
00:00:11.090 --> 00:00:14.270
fan of showing you alternative ways of doing something.

4
00:00:14.660 --> 00:00:19.760
For example, here in the main dart file, we're having our change notify our provider where we need

5
00:00:19.760 --> 00:00:21.410
to provide a builder method.

6
00:00:21.410 --> 00:00:23.450
And this then actually.

7
00:00:24.350 --> 00:00:28.940
Runs this function, gets a context, returns the data we want to provide.

8
00:00:29.270 --> 00:00:35.780
If that data does not depend on the context as we do here, it's kind of redundant to get that.

9
00:00:35.960 --> 00:00:41.510
Of course, you can then use an underscore to signal that you're not interested in it, but actually

10
00:00:41.510 --> 00:00:47.330
you're also seen as a shortcut or an alternative constructor for a change notifier provider, which

11
00:00:47.330 --> 00:00:52.460
you could use, and that is the dot value constructor instead of a builder.

12
00:00:52.730 --> 00:00:56.990
This simply takes a value argument and that is the value you want to provide.

13
00:00:56.990 --> 00:01:02.600
And if your value doesn't depend on the context, you can absolutely use this instead of the builder

14
00:01:02.600 --> 00:01:03.150
method.

15
00:01:03.170 --> 00:01:07.430
And of course, it's the same here in product script where I have the.

16
00:01:08.150 --> 00:01:11.060
Change notifier provider with the builder function.

17
00:01:11.090 --> 00:01:17.450
You can use that, but you can also use the value constructor of change notifier provider and simply

18
00:01:17.450 --> 00:01:22.460
provide a value which in our case here is that single product.

19
00:01:22.730 --> 00:01:25.610
And if you do that and you do a full refresh here.

20
00:01:26.600 --> 00:01:32.300
Of course, you see, it still works as before, but now it's a bit shorter.

21
00:01:32.300 --> 00:01:36.740
So that's option number one, which makes sense if you are not really using the context.

22
00:01:37.460 --> 00:01:45.080
Now there actually is an important difference between change notifier provider dot value and the approach

23
00:01:45.080 --> 00:01:49.040
we had before with the builder function distort value approach.

24
00:01:49.050 --> 00:01:55.580
Here is the right approach you should use if you for example, use a provider on something that's part

25
00:01:55.580 --> 00:01:57.100
of a list or of a grid.

26
00:01:57.110 --> 00:02:02.000
Because of the issue I described in the last lecture where widgets are recycled by flutter.

27
00:02:02.000 --> 00:02:09.470
But the data that's attached to the widget changes when using change notifier provider value, you actually

28
00:02:09.470 --> 00:02:15.040
make sure that the provider works, even if data changes for the widget.

29
00:02:15.050 --> 00:02:20.990
If you had a builder function that would not work correctly here it will work correctly because now

30
00:02:20.990 --> 00:02:29.180
the provider is tied to its data and is attached and detached to and from the widget instead of changing

31
00:02:29.180 --> 00:02:31.280
data being attached to the same provider.

32
00:02:31.280 --> 00:02:37.130
So this dot value constructor syntax is the approach you should use in this scenario here.

33
00:02:37.130 --> 00:02:45.380
And in all scenarios where you have the provider package and you're providing your data on single list

34
00:02:45.380 --> 00:02:52.820
or grid items where Flutter then actually will recycle the widgets you're attaching your provider to.

35
00:02:52.820 --> 00:03:00.170
With this dot value constructor approach that will work without issues with the builder function we

36
00:03:00.170 --> 00:03:02.870
used before that would cause bugs.

37
00:03:02.870 --> 00:03:08.510
As soon as you have more items that do actually go beyond the screen boundaries because of the way widgets

38
00:03:08.510 --> 00:03:14.810
are recycled and your data changes and your provider wouldn't keep up with that, the dot value constructor

39
00:03:14.810 --> 00:03:16.100
will keep up with that.

40
00:03:16.100 --> 00:03:17.750
That's just a little side note.

41
00:03:18.320 --> 00:03:24.620
Now, one other important note about change notifier provider, also with the dot value approach here

42
00:03:24.620 --> 00:03:27.470
in main DART where I'm also using this.

43
00:03:28.860 --> 00:03:29.580
Here.

44
00:03:29.940 --> 00:03:36.810
There, it's actually the better approach to not use this way of providing this products value.

45
00:03:36.810 --> 00:03:43.080
But instead here you should use that old approach of having the create or the builder method where you

46
00:03:43.080 --> 00:03:48.100
then get your context and create products like this.

47
00:03:48.120 --> 00:03:49.020
Why?

48
00:03:49.050 --> 00:03:52.620
Because whenever you instantiate a class.

49
00:03:52.620 --> 00:03:59.370
So whenever you create a new object based on a class, as we're doing it here, if you do that to provide

50
00:03:59.370 --> 00:04:06.180
data, object to the change notifier provider, you should use the create method for efficiency and

51
00:04:06.180 --> 00:04:07.470
to avoid bugs.

52
00:04:07.590 --> 00:04:13.860
Whenever you reuse an existing object like we're doing it in the grid where we cycle through a list

53
00:04:13.860 --> 00:04:15.940
of products which already all exist.

54
00:04:15.960 --> 00:04:19.050
It's recommended that you use that value approach.

55
00:04:19.050 --> 00:04:26.160
So if the dot value constructor now, it would also work if we would use the dot value constructor here

56
00:04:26.160 --> 00:04:27.260
in main art.

57
00:04:27.540 --> 00:04:34.350
It just might be a little bit less efficient and maybe lead to unnecessary renders or in some apps that

58
00:04:34.350 --> 00:04:35.430
might be buggy.

59
00:04:35.520 --> 00:04:41.790
Therefore, when you create a new instance of object and you want to provide this, use the create or

60
00:04:41.790 --> 00:04:44.400
the builder method as I'm doing it here in main art.

61
00:04:44.400 --> 00:04:50.490
Now if you reuse an existing object like we're doing it in the product script, you should use the dot

62
00:04:50.490 --> 00:04:54.660
value provider with the value you're providing as we're doing it here.

63
00:04:55.140 --> 00:05:01.440
Now over the next lectures, you actually see that I, in the main art file, still use the dot value

64
00:05:01.440 --> 00:05:02.040
provider.

65
00:05:02.040 --> 00:05:08.160
So the one I told you is not the best possible way of doing it because it won't hurt this application.

66
00:05:08.160 --> 00:05:13.110
Just because it's not the best possible way does not mean that it doesn't work, that it crashes your

67
00:05:13.110 --> 00:05:15.480
app or that it's super inefficient.

68
00:05:15.510 --> 00:05:21.510
I just want to tell you this best practice which emerged since I recorded the course so that you're

69
00:05:21.510 --> 00:05:26.250
aware of it, you could also use the other approach, which I'm going to use over the next lectures.

70
00:05:26.250 --> 00:05:30.600
But using create if you are creating a new instance is recommended.

71
00:05:32.850 --> 00:05:34.560
There's another important thing.

72
00:05:34.710 --> 00:05:39.840
If we navigate to a totally different screen and with that, I don't mean the detailed screen which

73
00:05:39.840 --> 00:05:46.440
is pushed on top of the red screen, but if we had tabs or if we used push replacement and we had a

74
00:05:46.440 --> 00:05:54.300
screen that replaces the old screen, then it's important that we clean up our provided data flatter

75
00:05:54.300 --> 00:05:59.700
automatically for you, cleans up all the widgets it built so that they don't take up space in memory

76
00:05:59.700 --> 00:06:00.300
anymore.

77
00:06:00.300 --> 00:06:03.480
But your provided data would still end up in memory.

78
00:06:03.480 --> 00:06:10.320
And that would be bad because the more often you then visit and leave that page, the more data is stored

79
00:06:10.320 --> 00:06:16.020
in memory, and that leads to memory leaks where your memory will at some point overflow.

80
00:06:16.590 --> 00:06:21.570
So it's important that you dispose of the data you are storing here and here.

81
00:06:21.570 --> 00:06:27.510
The good thing is change notifier provider, no matter if you use it with the value constructor or not,

82
00:06:27.510 --> 00:06:32.100
automatically cleans up that data for you when it's not required anymore.

83
00:06:32.190 --> 00:06:34.080
So you don't have to worry about that.

84
00:06:34.080 --> 00:06:38.220
It's just important to be aware of that because maybe you didn't think about that.

85
00:06:38.340 --> 00:06:42.390
And actually that would be pretty normal at this point that you don't think about this.

86
00:06:42.600 --> 00:06:47.510
But if you ever come to that point, you think, Well, what's happening to my old data?

87
00:06:47.520 --> 00:06:48.270
No worries.

88
00:06:48.270 --> 00:06:51.000
Changed notifier provider cleans it up for you.

