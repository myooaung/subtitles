WEBVTT
1
00:00:02.000 --> 00:00:07.010
So let's make sure we can add our user ID to outgoing chat messages here.

2
00:00:07.310 --> 00:00:13.020
It's not too hard because thankfully we got that Firebase Auth object.

3
00:00:13.040 --> 00:00:19.730
Now to utilize it, you need to make sure that you are importing the firebase off dart file from the

4
00:00:19.730 --> 00:00:21.740
Firebase Off package.

5
00:00:22.100 --> 00:00:27.680
And with that you can tap into Firebase also so you can use this object here.

6
00:00:27.950 --> 00:00:34.760
There, access the active instance and on that instance you'll find a current user method.

7
00:00:34.850 --> 00:00:40.340
This gives you access to the currently logged in user and that will then include data like the user

8
00:00:40.340 --> 00:00:40.880
ID.

9
00:00:41.540 --> 00:00:48.500
Now current user actually gives us a future which will eventually resolve to our current Firebase user.

10
00:00:48.620 --> 00:00:57.740
So therefore here I'll add async so that I can await here and get access to the user like this.

11
00:00:57.740 --> 00:01:01.370
So then this line will only execute once we get the user.

12
00:01:03.390 --> 00:01:10.920
Now we can utilize that user and set user ID equal to user uid.

13
00:01:10.950 --> 00:01:17.430
There is a UI ID field on that user object which holds our current ID, and with that we can clearly

14
00:01:17.430 --> 00:01:19.890
map this chat message to this user.

15
00:01:20.840 --> 00:01:24.200
Now, of course, the existing chat messages here don't have that.

16
00:01:24.230 --> 00:01:31.850
So I'll manually go there and add a new field to each message where I basically set.

17
00:01:32.610 --> 00:01:33.930
The user ID.

18
00:01:36.050 --> 00:01:41.020
Equal to some dummy id like a, which of course is not my user ID, but that's fine.

19
00:01:41.030 --> 00:01:43.190
These messages simply aren't by me.

20
00:01:43.640 --> 00:01:49.430
So let's make sure we add all those fields here.

21
00:01:51.780 --> 00:01:56.580
And once we did that, we can go back and make sure that we render the message differently depending

22
00:01:56.580 --> 00:01:58.830
on whether this is us or not.

23
00:01:59.070 --> 00:02:03.510
So in the message bubble widget, we can add a second property.

24
00:02:03.540 --> 00:02:10.800
A boolean maybe is me, which I also want to get from outside, so I also expect to get a value for

25
00:02:10.800 --> 00:02:13.680
is me through the constructor of message bubble.

26
00:02:13.980 --> 00:02:19.170
Hence we can go to the place where we create message bubble, which is the message to start file.

27
00:02:19.170 --> 00:02:26.940
And besides passing the text, we now also have to pass chat docs for the current index and then access

28
00:02:26.940 --> 00:02:28.320
user ID.

29
00:02:28.470 --> 00:02:32.310
User ID now is a field we have in every message.

30
00:02:32.310 --> 00:02:36.900
We have the ID of the user who wrote this message so we can access it here.

31
00:02:37.410 --> 00:02:40.170
Now, of course we don't want to forward the user ID though.

32
00:02:40.200 --> 00:02:46.140
Message bubble instead wants to know whether this is us or not and this is just a string, not a boolean.

33
00:02:46.620 --> 00:02:52.830
So to find out whether that's us or not, we also need to current ID of the logged in user here in this

34
00:02:52.830 --> 00:02:58.830
line so that we can compare the idea of the current locked in user with the idea of this message.

35
00:02:59.870 --> 00:03:02.630
Now there are various ways of retrieving that.

36
00:03:02.660 --> 00:03:08.510
A very elegant way, in my opinion, is that we actually wrap list View Builder.

37
00:03:09.150 --> 00:03:15.000
With another widget, which is now the Future Builder widget.

38
00:03:15.000 --> 00:03:18.240
Now the future builder is a bit like the Stream Builder.

39
00:03:18.270 --> 00:03:23.970
The difference is that a future builder wants a future and it calls its builder method as soon as the

40
00:03:23.970 --> 00:03:27.030
future resolves, as soon as the future is done.

41
00:03:27.210 --> 00:03:32.640
Hence we add a future argument and then a builder argument.

42
00:03:32.790 --> 00:03:40.880
And the builder argument wants a function which receives the context and then also the future snapshot.

43
00:03:40.890 --> 00:03:42.870
And then we should return a widget.

44
00:03:43.230 --> 00:03:46.770
Now, at a future I want to set up here is Firebase off.

45
00:03:47.010 --> 00:03:52.800
And for that you need to make sure that you do import the firebase off package and firebase off dart

46
00:03:52.800 --> 00:03:58.560
file here, firebase off dot instance and then call current user.

47
00:03:58.650 --> 00:04:01.530
As I explained a second ago, this gives us a future.

48
00:04:01.620 --> 00:04:07.650
Now, when this future resolves, this builder will execute and it will well build this list view.

49
00:04:08.370 --> 00:04:13.710
Now actually I don't always want to build a list view, so I'll wrap the list view builder here with

50
00:04:13.710 --> 00:04:19.140
curly braces and add a semicolon here because I want to check what's in the future snapshot.

51
00:04:19.140 --> 00:04:25.440
If future if future snapshot connection state is equal to connection state waiting.

52
00:04:25.770 --> 00:04:28.350
We don't have information about the user yet.

53
00:04:28.470 --> 00:04:34.590
In this case, I'll return a center widget where I have a circular progress indicator.

54
00:04:36.490 --> 00:04:37.990
A bit like I have it up there.

55
00:04:37.990 --> 00:04:43.780
And yes, you could therefore of course create one widget which you re-use here or a builder method.

56
00:04:45.730 --> 00:04:47.480
I'll simply repeat some code here.

57
00:04:47.500 --> 00:04:48.720
So that's one check.

58
00:04:48.730 --> 00:04:50.110
We could also check.

59
00:04:50.900 --> 00:04:54.140
If we maybe don't have data.

60
00:04:54.140 --> 00:04:59.780
So if that is wrong, but if that is the case, if we don't have a current user, we shouldn't be on

61
00:04:59.780 --> 00:05:03.290
the chat screen anyways because of the logic in the main dart file.

62
00:05:03.290 --> 00:05:09.170
We should be seeing the off screen in that case, so there shouldn't be a need to really check for that.

63
00:05:10.140 --> 00:05:17.400
Hence here at this point we should indeed have a user and we can then return to list view builder here

64
00:05:17.520 --> 00:05:18.180
and there.

65
00:05:18.180 --> 00:05:24.000
We now get access to the future snapshot, which since we are basing this on the current user future

66
00:05:24.000 --> 00:05:27.120
in the end just gives us access to the data of the current user.

67
00:05:27.390 --> 00:05:31.710
So then here we can compare if the user ID of that.

68
00:05:32.400 --> 00:05:40.230
Data we got from our messages collection is that is equal to future snapshot.

69
00:05:40.590 --> 00:05:50.520
Dot data dot UUID Future Snapshot data is the current user object and that has a UID property as you

70
00:05:50.520 --> 00:05:53.940
saw in the new message widget there.

71
00:05:53.940 --> 00:06:00.630
We also access user UID on the data returned by current user and we're doing the same here.

72
00:06:03.090 --> 00:06:05.520
Now there's one thing I'm not too happy about.

73
00:06:05.760 --> 00:06:11.550
I have my future builder here instead of that stream builder, which means for every new message we

74
00:06:11.550 --> 00:06:17.280
got on the back end, I would fetch my data for the current user again and again, and that is a bit

75
00:06:17.280 --> 00:06:24.090
redundant, creating that new future and waiting for it to resolve on every new message that is sent.

76
00:06:24.120 --> 00:06:25.800
Doesn't sound that great.

77
00:06:26.100 --> 00:06:27.810
That's well restructured is a bit.

78
00:06:27.810 --> 00:06:34.890
And I'll grab this code here, the future builder code and move that up and actually return this here

79
00:06:34.890 --> 00:06:36.150
at the very beginning.

80
00:06:37.670 --> 00:06:38.780
And then.

81
00:06:39.610 --> 00:06:43.330
Here instead of the builder method of the future builder.

82
00:06:43.810 --> 00:06:45.010
I will.

83
00:06:46.470 --> 00:06:50.070
Check if the future snapshot connection state is waiting.

84
00:06:50.640 --> 00:06:52.350
So let's add this here.

85
00:06:53.060 --> 00:06:56.060
And if it's not waiting, I'll return the stream builder.

86
00:06:58.910 --> 00:07:00.110
And down there.

87
00:07:01.510 --> 00:07:05.640
We returned a list, view a builder again, but now that's instead of the stream builder.

88
00:07:05.650 --> 00:07:11.500
So I simply swapped Stream Builder and Future Builder to make sure that we don't create a new future

89
00:07:11.500 --> 00:07:17.050
just because something changed in our stream of data which is coming from the fire store collection.

90
00:07:18.190 --> 00:07:21.610
With that, we should be fine though, and the rest works as it should.

91
00:07:21.880 --> 00:07:27.610
And now we're forwarding the information whenever that message is from us to the chat or to the message

92
00:07:27.610 --> 00:07:28.480
bubble widget.

93
00:07:28.750 --> 00:07:34.930
So in the message bubble widget, we can now use this information which is stored in This is me property.

94
00:07:35.910 --> 00:07:41.070
For example, on the color of this container, we can check if Asmi is true.

95
00:07:41.250 --> 00:07:47.670
And if it is, I don't want to use the accent color, but instead let's say then I just want to use

96
00:07:47.670 --> 00:07:50.160
colors gray.

97
00:07:50.160 --> 00:07:55.740
And there we can actually use this notation to use a specific shade of gray.

98
00:07:58.110 --> 00:08:04.320
So our own messages will be great and the messages of other users will be purple, or will use that

99
00:08:04.320 --> 00:08:05.700
accent color simply.

100
00:08:07.080 --> 00:08:09.860
And for the text color, we should do something similar.

101
00:08:09.870 --> 00:08:16.290
If it's us, I don't want to use the color that stands out against the accent color, but instead I'll

102
00:08:16.290 --> 00:08:21.420
use colors black which stands out against the gray, and otherwise I'll use the accent.

103
00:08:21.420 --> 00:08:21.750
Color.

104
00:08:21.750 --> 00:08:22.890
Contrast color.

105
00:08:25.380 --> 00:08:29.100
We can also work on the border radius a bit.

106
00:08:30.030 --> 00:08:36.630
And not set all boarders to be rounded corners but instead with border radius.

107
00:08:36.690 --> 00:08:45.120
Only we can target specific borders and let's say we always want the top left border to be circular,

108
00:08:45.120 --> 00:08:46.440
so to be rounded.

109
00:08:46.590 --> 00:08:55.590
We can target top left then and use radius circular to set the radius of the top left corner to 12.

110
00:08:55.950 --> 00:08:59.520
And I'll do the same for the top right corner.

111
00:08:59.580 --> 00:09:01.180
But that's not important.

112
00:09:01.200 --> 00:09:03.990
I will do different things for the bottom corners.

113
00:09:04.350 --> 00:09:09.120
Let's say the bottom left corner should only be rounded if it's not us.

114
00:09:09.120 --> 00:09:14.070
Because I also want to move messages to the left and to the right based on whether they are from us

115
00:09:14.070 --> 00:09:14.820
or not.

116
00:09:15.440 --> 00:09:17.630
So I'll set bottom left.

117
00:09:18.610 --> 00:09:20.530
Equal to a check where?

118
00:09:20.530 --> 00:09:21.970
A check if it's not us.

119
00:09:21.970 --> 00:09:24.100
So the exclamation mark matters.

120
00:09:24.100 --> 00:09:29.560
If it's not me and if it's not me, then I'll set the.

121
00:09:30.190 --> 00:09:31.660
Radius to zero.

122
00:09:31.840 --> 00:09:34.120
And otherwise, I'll set the radius here.

123
00:09:34.990 --> 00:09:35.670
To 12.

124
00:09:35.680 --> 00:09:37.410
So only if it's us.

125
00:09:37.420 --> 00:09:40.000
The bottom left corner will be rounded.

126
00:09:41.250 --> 00:09:43.770
And I'll do the opposite for the bottom right corner.

127
00:09:44.070 --> 00:09:45.240
If it's us.

128
00:09:45.270 --> 00:09:47.490
I'll set the radius here.

129
00:09:49.070 --> 00:09:50.390
Two zero.

130
00:09:51.160 --> 00:09:52.630
And otherwise.

131
00:09:54.110 --> 00:09:55.100
To 12.

132
00:09:57.040 --> 00:10:01.960
Now, as a result, the corners of this container will be rounded differently based on whether it's

133
00:10:01.960 --> 00:10:03.700
a message from us or not.

134
00:10:04.520 --> 00:10:11.150
And this matters because on the road we can now set the main access alignment to control where the message

135
00:10:11.150 --> 00:10:11.870
is rendered.

136
00:10:12.050 --> 00:10:16.430
If it's on the left or on the right by all the checking for is me.

137
00:10:16.430 --> 00:10:20.300
And if it's us, let's say we want to move the message to the right.

138
00:10:20.420 --> 00:10:24.290
We can do this by setting the main access alignment to end then.

139
00:10:24.890 --> 00:10:28.790
Or if it's not us, we set the main access alignment to start.

140
00:10:29.060 --> 00:10:33.950
And therefore, messages should now be rendered on different sides of the chat list.

141
00:10:34.700 --> 00:10:36.320
If we save all of that.

142
00:10:38.450 --> 00:10:39.470
And reload.

143
00:10:41.390 --> 00:10:44.510
This looks good because these are messages not sent by us.

144
00:10:45.190 --> 00:10:48.010
But if I now send a message by me.

145
00:10:48.010 --> 00:10:51.460
So if I now send a new message, you see, it's on the right, it's gray.

146
00:10:51.460 --> 00:10:54.330
And we also have these different rounded corners.

147
00:10:54.340 --> 00:10:56.170
So that looks pretty neat.

148
00:10:56.380 --> 00:11:02.590
Now, there is one thing I want to improve to ensure that this always is rendered in an efficient way.

149
00:11:03.160 --> 00:11:04.900
Let's use some keys.

150
00:11:06.110 --> 00:11:11.510
You learned that when you're working with lists of data, there can be issues with Flutter, updating

151
00:11:11.510 --> 00:11:18.140
your widgets and to ensure that Flutter is always able to efficiently update data in lists or widgets

152
00:11:18.140 --> 00:11:19.010
and lists.

153
00:11:19.490 --> 00:11:24.140
Let's go to the message bubble widget, which is the widget we repeat in our list here.

154
00:11:24.920 --> 00:11:26.440
And let's add a key there.

155
00:11:26.450 --> 00:11:28.070
Let's accept a key there.

156
00:11:28.220 --> 00:11:29.540
Accepting a key is easy.

157
00:11:29.540 --> 00:11:36.980
We add a new property which is of type key and we name it key and we simply then have a named argument

158
00:11:36.980 --> 00:11:39.500
here in the constructor where we point at the key.

159
00:11:40.620 --> 00:11:47.040
Now in message to start, we can now simply set this key here by targeting this newly added named argument.

160
00:11:47.250 --> 00:11:49.070
And now we need a unique key.

161
00:11:49.080 --> 00:11:53.550
We can create it with the value key and use some unique value.

162
00:11:53.550 --> 00:11:56.460
And every message here has a unique value.

163
00:11:56.460 --> 00:12:03.750
It has a unique document ID so we can reach out to chat docs and four to give an index access document

164
00:12:04.050 --> 00:12:05.790
ID written like this.

165
00:12:05.790 --> 00:12:10.980
On this document, every document will have an ID which can be accessed through this field.

166
00:12:11.520 --> 00:12:16.980
Now we won't see a difference here, but behind the scenes this ensures that Flutter will always be

167
00:12:16.980 --> 00:12:20.130
able to efficiently re render and update this list.

168
00:12:20.160 --> 00:12:21.420
It might not need that.

169
00:12:21.420 --> 00:12:24.720
It might be able to efficiently update this list even without the key.

170
00:12:24.720 --> 00:12:26.730
But it certainly also won't hurt.

