1
00:00:02,366 --> 00:00:07,133
We had a look at some of the widgets we can use and at the widget catalog and of course throughout the course,

2
00:00:07,133 --> 00:00:10,166
we'll use loads of the widgets you saw there,

3
00:00:10,200 --> 00:00:17,766
so no need to learn it by heart right now. For the moment however, I want to move on by now also moving

4
00:00:17,766 --> 00:00:23,500
my buttons here, my answer buttons into a separate widget, into a custom widget.

5
00:00:23,500 --> 00:00:30,466
Maybe change the styling a little bit, maybe to give them a blue background and make them take the full

6
00:00:30,500 --> 00:00:34,500
available width but that won't be the the focus here,

7
00:00:34,500 --> 00:00:36,733
instead what I want to make sure is that

8
00:00:36,733 --> 00:00:44,466
we have real text on these buttons, so that we have text that fits to the question we have here,

9
00:00:44,466 --> 00:00:50,900
so that we continue working on this first basic application. And for this, let's create a new answer.dart

10
00:00:50,933 --> 00:00:54,133
file which should hold the answer widget

11
00:00:54,133 --> 00:00:56,133
and there we need to create a widget now.

12
00:00:56,200 --> 00:00:59,800
Now you could think that you need to create a stateful widget now,

13
00:00:59,866 --> 00:01:00,366
right

14
00:01:00,400 --> 00:01:07,233
because here in main.dart, on a button we of course have that onPressed argument to which we pass a

15
00:01:07,233 --> 00:01:10,266
pointer to the answer question function.

16
00:01:10,266 --> 00:01:18,533
Now just because we register a function here for an event does not mean that the RaisedButton has to

17
00:01:18,533 --> 00:01:20,200
be in a stateful widget.

18
00:01:20,200 --> 00:01:26,200
Of course we want to change some data when this event fires, when the user presses the button

19
00:01:26,200 --> 00:01:34,433
but as it turns out, we can also trigger a function in another place of the app even if this button lives

20
00:01:34,433 --> 00:01:35,900
in a separate widget

21
00:01:35,900 --> 00:01:41,966
and that is a core concept and a core pattern which you will use a lot in Flutter and therefore it's exactly

22
00:01:41,966 --> 00:01:44,400
the pattern we'll dive in right now.

23
00:01:44,400 --> 00:01:50,500
So here in the answer.dart file, I'll create a new stateless widget here actually and I will name

24
00:01:50,500 --> 00:01:51,466
it answer

25
00:01:51,800 --> 00:01:59,700
and just as in the question widget, we need to import the material file from the Flutter package because

26
00:01:59,700 --> 00:02:02,700
that unlocks stateless widget and so on.

27
00:02:02,733 --> 00:02:07,800
Now in here, I will leave the container because as a child of that container, I want to have my button

28
00:02:08,100 --> 00:02:12,000
and I keep the container because that will allow me to control the width.

29
00:02:12,100 --> 00:02:15,766
So here, the child is the RaisedButton here,

30
00:02:15,900 --> 00:02:18,966
the text will soon be received from outside

31
00:02:19,000 --> 00:02:26,366
and I'll come back to that and onPressed as I said should change something but will also make that

32
00:02:26,366 --> 00:02:32,200
change in another widget and how that works is also something I'll show you in a second.

33
00:02:32,200 --> 00:02:38,633
First of all, let's adjust the width and I'll set it to double infinity again, which is a helper property

34
00:02:38,633 --> 00:02:40,400
on the double object.

35
00:02:40,466 --> 00:02:43,166
Remember, everything in Dart is an object,

36
00:02:43,166 --> 00:02:49,466
so are doubles and that is the core double type which at the same time is basically the class

37
00:02:49,700 --> 00:02:52,066
for the double value you could say

38
00:02:52,533 --> 00:02:58,900
and on this class we have an infinity property which basically gives us a value which tells the container

39
00:02:58,900 --> 00:03:03,433
to take as much width as it can get, which is the width of our device.

40
00:03:03,433 --> 00:03:05,166
So that's the width of the container,

41
00:03:05,166 --> 00:03:11,800
now for onPressed I'll temporarily use null again so that we don't get an error and that we now can

42
00:03:11,800 --> 00:03:13,833
use this button as it is.

43
00:03:13,833 --> 00:03:21,766
I also want to set the color of the button here and I will set it to a color by accessing colors and

44
00:03:21,766 --> 00:03:28,300
colors actually is a class which also has some so-called static properties,

45
00:03:28,400 --> 00:03:34,733
these are properties which you can directly use on the class itself without instantiating it first

46
00:03:34,800 --> 00:03:40,000
and there you have various preconfigured colors and I will simply use blue.

47
00:03:40,000 --> 00:03:45,600
Now this can look strange because we haven't used that before, a static property in the end simply as

48
00:03:45,600 --> 00:03:50,066
I said is a property which you can use without instantiating class.

49
00:03:50,066 --> 00:03:58,300
If we have a look at the source code here, we see that the class here has these static const values, const

50
00:03:58,333 --> 00:03:59,833
is something we haven't seen before,

51
00:03:59,833 --> 00:04:06,700
let's ignore it for now, these static const values here, like black and then a different shade of black

52
00:04:06,733 --> 00:04:07,800
and so on

53
00:04:08,033 --> 00:04:11,600
and then if we scroll down, also different shades of white.

54
00:04:11,600 --> 00:04:15,600
So these are simply properties, normal properties on the class,

55
00:04:15,600 --> 00:04:20,966
the only difference is that you can access them without creating an instance of the class first and

56
00:04:21,000 --> 00:04:26,166
such properties exist because we need that value here, right

57
00:04:26,200 --> 00:04:28,500
and therefore, this is like a utility feature of Dart

58
00:04:28,533 --> 00:04:35,100
you could say, that we can get easy access to such a value without having to create a new instance. Instances

59
00:04:35,100 --> 00:04:40,066
of classes typically makes sense if you want to create multiple different objects based on one and the

60
00:04:40,066 --> 00:04:41,200
same class.

61
00:04:41,300 --> 00:04:46,600
Here of course we want to have multiple different colors but each color is just a value, like a

62
00:04:46,600 --> 00:04:51,466
simple text or so on and therefore of course technically, it's also an object but we don't need

63
00:04:51,466 --> 00:04:54,500
the complex colors object for that. Colors in

64
00:04:54,500 --> 00:04:58,200
the end is just like a group of predefined single colors

65
00:04:58,233 --> 00:05:05,666
you could say, so this colors class here exists not to be instantiated because colors itself, this object,

66
00:05:05,666 --> 00:05:12,433
that doesn't do anything, it just exists as a grouping mechanism around preconfigured values. A little

67
00:05:12,433 --> 00:05:19,633
bit like an enum but an enum simply gives numbers 0, 1, 2, a label, a human readable label. Here, the idea

68
00:05:19,633 --> 00:05:25,766
is to have a human readable label for a more complex value you could say because the value here is not

69
00:05:25,766 --> 00:05:34,066
just a number but actually the hex code or the binary representation of a color.

70
00:05:34,066 --> 00:05:39,733
So that is what we're doing here, we're getting access to this static property here on the colors class

71
00:05:40,166 --> 00:05:47,000
and this will give us the internal color value which Dart and Flutter can use to color this button

72
00:05:47,200 --> 00:05:51,400
and with all of that, we can use the answer widget here in the main.dart file. For that,

73
00:05:51,400 --> 00:05:52,900
let's first of all add an import,

74
00:05:52,900 --> 00:05:57,666
you always need to import what you want to use in a file because since the answer widget lives in a

75
00:05:57,666 --> 00:06:02,933
different file, in order to use it in the main.dart file, we have to import it there

76
00:06:02,966 --> 00:06:08,233
and then with it imported, we can replace our RaisedButton here with answer

77
00:06:08,233 --> 00:06:15,066
and now here of course we create concrete instances of our answer widget class because we want to create

78
00:06:15,300 --> 00:06:20,900
widget objects, multiple different widget objects, which we can use here

79
00:06:20,900 --> 00:06:24,400
and that should be an answer not answers here.

80
00:06:24,433 --> 00:06:29,333
Now with that if we save this, we now have our buttons there. Now

81
00:06:29,366 --> 00:06:36,266
they are greyed out because at the moment, they're all locked, disabled because I haven't assigned a real

82
00:06:36,266 --> 00:06:39,966
function to onPressed and that will be the next step and here,

83
00:06:40,000 --> 00:06:46,400
the tricky thing will be that this function which I want to assign here actually lives in the main.dart

84
00:06:46,400 --> 00:06:52,733
file because that is where I manage my question index and I have to manage the question index there because

85
00:06:52,733 --> 00:06:57,600
I also have my questions in here and I need to have my questions in here because I want to pass them

86
00:06:57,600 --> 00:07:04,000
down to the question widget which has no direct connection to the answer widget. So we can't manage the

87
00:07:04,000 --> 00:07:09,966
question index in the answer widget because if we would do that, then we would have the value in here

88
00:07:09,966 --> 00:07:14,966
but then again we couldn't use it to select a question here which we want to forward to the question

89
00:07:14,966 --> 00:07:15,866
widget.

90
00:07:15,900 --> 00:07:22,933
So our main.dart file is the common denominator you could say, the shared widget between the answer and

91
00:07:22,933 --> 00:07:28,500
the question widget because our main.dart file and the widget in there, the MyApp widget, that is the

92
00:07:28,500 --> 00:07:35,966
parent widget of question and answer, it is the widget that instantiates and uses question and answer

93
00:07:36,300 --> 00:07:42,266
and therefore we want to manage our state which both components need or which both widgets need, we want

94
00:07:42,266 --> 00:07:48,766
to manage that state here in the MyApp component or in MyApp widget and therefore also in MyAppState

95
00:07:48,866 --> 00:07:50,633
which is connected to that widget.

96
00:07:50,700 --> 00:07:58,066
This concept is called lifting the state up, you manage the state on the shared, on the common denominator

97
00:07:58,333 --> 00:08:05,100
of the different widgets that need this state and that is the direct parent of these widgets that need

98
00:08:05,100 --> 00:08:06,366
the state.

99
00:08:06,400 --> 00:08:12,133
So since we manage the state in here, we also have the function to change the state in here, in the MyAppState

100
00:08:12,166 --> 00:08:12,900
class

101
00:08:13,000 --> 00:08:20,000
but how do we now get access to the answer question function in our answer widgets here?

102
00:08:20,133 --> 00:08:27,866
The answer is pretty simple. Just as we can pass text to a widget, we can also pass a pointer at a

103
00:08:27,866 --> 00:08:28,866
function to a widget.

104
00:08:29,466 --> 00:08:31,500
So answer question,

105
00:08:31,500 --> 00:08:38,166
my function here can be forwarded to the answer widgets, without parentheses because I don't want to

106
00:08:38,166 --> 00:08:42,533
execute my answer question function immediately when Dart reads this,

107
00:08:42,633 --> 00:08:49,833
instead I want to forward the pointer at this function to my answer widget. And now in the answer widget,

108
00:08:49,900 --> 00:08:55,333
we of course need to accept this as our argument to the constructor because the answer widget here, that

109
00:08:55,333 --> 00:08:56,933
in the end is just a class right and

110
00:08:56,966 --> 00:08:59,200
therefore it can have a constructor.

111
00:08:59,233 --> 00:09:05,100
So here, we can add a constructor by repeating the class name and I'll use that shortcut for the constructor

112
00:09:05,700 --> 00:09:08,733
and I will also add a property here,

113
00:09:08,900 --> 00:09:15,400
a final property, the type now is function which is built into Dart and as the name suggests,

114
00:09:15,433 --> 00:09:21,133
this means that the values stored in this property has to be a function or a pointer at a function

115
00:09:21,133 --> 00:09:22,333
to be precise

116
00:09:22,433 --> 00:09:29,933
and therefore here now, you can give this any name you want, I'll name this selectHandler, whatever you

117
00:09:29,933 --> 00:09:31,033
want to name it

118
00:09:31,933 --> 00:09:36,033
And in case this gives you an error now or later,

119
00:09:36,433 --> 00:09:40,866
you can also
change the Function type here to VoidCallback.

120
00:09:41,666 --> 00:09:46,500
The idea simply
is that "Function" tells Flutter and Dart, in the end,

121
00:09:46,833 --> 00:09:50,400
that what we store in this property, what we

122
00:09:50,400 --> 00:09:55,066
will soon store in this property, will be a function.

123
00:09:55,400 --> 00:09:58,733
And we'll need a function down there for our button.

124
00:09:58,933 --> 00:10:01,766
This button should trigger a function

125
00:10:01,933 --> 00:10:04,833
when it is pressed.

126
00:10:04,833 --> 00:10:09,233
But if you get
an error you should use VoidCallback because that

127
00:10:09,233 --> 00:10:13,433
type also
tells Flutter and Dart that we get a function,

128
00:10:13,666 --> 00:10:16,433
but it's a bit more specific than Function.

129
00:10:17,166 --> 00:10:20,000
VoidCallback tells Flutter

130
00:10:20,366 --> 00:10:23,900
that will get a function here that does not accept

131
00:10:23,900 --> 00:10:27,800
any arguments, so that receives no input

132
00:10:28,000 --> 00:10:31,166
and also won't return anything.

133
00:10:31,166 --> 00:10:37,133
And indeed
onPressed actually needs such a VoidCallback.

134
00:10:37,133 --> 00:10:41,066
It needs
a function that does not receive any arguments.

135
00:10:41,200 --> 00:10:46,733
So nothing will be passed between these
parentheses and it does not return anything.

136
00:10:48,000 --> 00:10:51,533
And that's
exactly what VoidCallback represents.

137
00:10:51,666 --> 00:10:55,000
So it's a more specific type of Function.

138
00:10:55,166 --> 00:10:57,166
It's a function that doesn't take anything.

139
00:10:57,166 --> 00:10:59,366
It doesn't return anything.

140
00:10:59,366 --> 00:11:02,133
And you can and, if you're getting errors,

141
00:11:02,133 --> 00:11:08,066
should use VoidCallback
whenever you get an error related to Function

142
00:11:08,133 --> 00:11:13,333
and whenever you know that you have a function
that takes no input and doesn't return anything.

143
00:11:13,733 --> 00:11:19,166
In other cases,
and especially in cases where you have a function

144
00:11:19,333 --> 00:11:24,400
that does
receive some input or that does return something

145
00:11:24,566 --> 00:11:28,866
you should
use Function instead of VoidCallback.

146
00:11:28,900 --> 00:11:32,433
Here, however, you
could use VoidCallback but, for the rest of this

147
00:11:32,433 --> 00:11:36,333
video, I'll use
Function since this won't give me an error here.

148
00:11:39,366 --> 00:11:44,300
and in my answer constructor, I now store whatever I get here in selectHandler.

149
00:11:44,366 --> 00:11:45,700
Now what I do get in here

150
00:11:45,733 --> 00:11:52,133
in my answer constructor is a pointer at the answer question and this pointer is stored in this property.

151
00:11:52,133 --> 00:11:58,566
in my answer class and function simply means that what is stored here has to be a pointer at a function.

152
00:11:58,566 --> 00:12:04,533
And now since we have that pointer at a function, which is exactly what I need down there, I can use select

153
00:12:04,533 --> 00:12:10,900
handler here. Again, without parentheses because the same thing as explained earlier still applies,

154
00:12:10,900 --> 00:12:15,900
we don't want to execute this immediately and hence now we should have a setup where we can trigger

155
00:12:15,900 --> 00:12:22,333
a function that's actually defined in a different widget from inside our answer widget because we pass

156
00:12:22,333 --> 00:12:30,966
a reference to that function down to the answer widget here in our MyAppState. So with this set up,

157
00:12:31,933 --> 00:12:33,766
we should be able to save this

158
00:12:33,966 --> 00:12:39,233
and now if I press a button here, indeed our text here changes, which means that this communication

159
00:12:39,500 --> 00:12:41,333
between parent and child works.

