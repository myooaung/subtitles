1
00:00:02,300 --> 00:00:07,790
Now that we animate this overall container here, I think it would also be nice that if this increases

2
00:00:07,790 --> 00:00:15,050
in size, this confirm password text field also wouldn't just pop in but also slowly animate and

3
00:00:15,050 --> 00:00:20,720
maybe slide down and fade in, so that it looks like it's coming from behind the password field so to

4
00:00:20,720 --> 00:00:22,100
say

5
00:00:22,100 --> 00:00:25,050
and for that, Flutter has us covered.

6
00:00:25,190 --> 00:00:30,380
We have another built-in widget we can use to get that look and feel,

7
00:00:30,380 --> 00:00:36,080
actually we'll have two widgets that help us with that. Here's the text form field which I want to

8
00:00:36,080 --> 00:00:41,750
animate when we're entering sign up mode and currently, we use that if condition to let pop in or instantly

9
00:00:41,750 --> 00:00:45,080
remove it. Instead of doing that,

10
00:00:45,320 --> 00:00:50,930
so I remove that if statement, I want to wrap that with a new widget and there, to fade it in, we can

11
00:00:50,930 --> 00:00:53,300
use the fade transition widget.

12
00:00:53,300 --> 00:00:57,800
I think that's also good point of time to let you know where you'll find all these built-in animation

13
00:00:57,800 --> 00:00:58,360
widgets,

14
00:00:58,370 --> 00:01:02,370
it's of course in the Flutter widget catalog in case you forgot about that.

15
00:01:02,390 --> 00:01:09,500
There you have that animation and motion part and if you click on that, you find all these widgets that

16
00:01:09,500 --> 00:01:13,210
are built into a Flutter that help you with animating something,

17
00:01:13,220 --> 00:01:20,090
so definitely feel free to play around with these and dive into the docs about these to learn more about

18
00:01:20,090 --> 00:01:21,020
how to use them,

19
00:01:21,080 --> 00:01:26,390
you can also dive into the animations documentation here in the official docs if you want to learn way

20
00:01:26,390 --> 00:01:28,640
more about animations there as well.

21
00:01:28,730 --> 00:01:31,670
So fade transition is such a built-in widget,

22
00:01:31,670 --> 00:01:38,390
it takes a child which it will fade in but fade transition then, unlike the animated container, does not

23
00:01:38,390 --> 00:01:41,310
take a duration and a curve, instead

24
00:01:41,750 --> 00:01:50,060
this needs an opacity and you need to change that opacity dynamically with the help of an animation

25
00:01:50,060 --> 00:01:55,400
or an animation controller. With that, we're of course back to where we were before,

26
00:01:55,520 --> 00:02:02,300
we need a controller, we need an animation. We have an animation controller and I'm fine with that duration,

27
00:02:02,300 --> 00:02:09,560
I just want to add a new animation, an animation where I animate the opacity and in the end, the opacity

28
00:02:09,560 --> 00:02:11,000
is just a double right,

29
00:02:11,030 --> 00:02:16,790
it's a value between 0 and 1, so 0.1, 0.2, 0.3 and so on,

30
00:02:16,790 --> 00:02:18,200
that's a double.

31
00:02:18,200 --> 00:02:24,900
So here, we can have our opacity animation or whatever you want to name that and set that animation up

32
00:02:24,900 --> 00:02:31,170
here in initState. Opacity animation is again set up with the tween class because I want to animate

33
00:02:31,170 --> 00:02:38,550
between two values and I want to start at zero which is fully invisible, 0.0 and I want to end

34
00:02:38,640 --> 00:02:42,360
at 1.0 which is fully visible.

35
00:02:42,360 --> 00:02:49,380
Now here, I call animate and pass in my curved animation to basically configure how that should look and

36
00:02:49,380 --> 00:03:01,070
feel, the parent of the curved animation is my controller, _controller and the curve here is

37
00:03:01,100 --> 00:03:07,910
let's say curves ease in and as I mentioned, feel free to play around with these different values.

38
00:03:08,060 --> 00:03:13,370
So with that, the opacity animation is set up, we can now use that down there and fade transition will

39
00:03:13,400 --> 00:03:16,530
automatically register a listener and so on for us.

40
00:03:16,610 --> 00:03:22,580
So all we have to do here is we have to use opacity animation as an argument for opacity because

41
00:03:22,590 --> 00:03:29,030
opacity actually wants an animation object, it doesn't want the double, it wants animation object because

42
00:03:29,180 --> 00:03:34,860
as I just said, fade transition will then take this animation object and add a listener and adjust the

43
00:03:34,860 --> 00:03:42,650
opacity of the child widget for us. All we need to do is we need to make sure that we do start the controller

44
00:03:42,650 --> 00:03:48,460
or the animation with controller forward and then we also do control playing it back and with that, we

45
00:03:48,460 --> 00:03:52,030
should have everything we need. If we go back to our application here

46
00:03:58,040 --> 00:04:01,640
and I do go to sign up, you see this fades in.

47
00:04:01,640 --> 00:04:07,970
Now we have a problem however, as you can see the space for this text form field is now always reserved

48
00:04:07,970 --> 00:04:14,310
and hence we have these empty ugly space and need to scroll when we're in login mode.

49
00:04:14,430 --> 00:04:19,019
The good thing is that our fade animation works but of course, it makes sense that this space is reserved

50
00:04:19,470 --> 00:04:25,050
because if you have a look at your widget tree where we just changed our fade transition in the text form

51
00:04:25,050 --> 00:04:29,340
field, this is now always part of the widget tree, it's never added or removed.

52
00:04:30,240 --> 00:04:39,570
So a solution here would be to also wrap the fade transition here into another animated container

53
00:04:40,500 --> 00:04:45,210
which we actually shrink to a height of zero when it should not be visible, so when the space should

54
00:04:45,210 --> 00:04:50,730
not be reserved and give it a more appropriate height that leaves enough space for the text form field

55
00:04:50,940 --> 00:04:58,970
when it should be visible. So here on the animate container, the fade transition is the child and I want

56
00:04:58,970 --> 00:05:05,310
to have a duration of let's say 300 milliseconds, just as on the fade transition

57
00:05:06,010 --> 00:05:13,120
and now I want to control my constraints and set up some box constraints there to control the min height

58
00:05:13,510 --> 00:05:19,660
and the max height of this container because it should have some room for change.

59
00:05:20,820 --> 00:05:25,390
Now the min height of course depends on the auth mode,

60
00:05:25,630 --> 00:05:32,770
if the auth mode is equal to AuthMode.signUp, then that should be let's say 60 pixels and you can

61
00:05:32,770 --> 00:05:37,000
experiment with that value to see when it looks good and otherwise, it's zero.

62
00:05:37,060 --> 00:05:41,830
So if we are in login mode, I don't want to have some space reserved here and so I set the height of this

63
00:05:41,830 --> 00:05:44,580
container to zero. The max height

64
00:05:44,620 --> 00:05:53,470
also of course depends on the auth mode and if the auth mode is sign up, then I'll set this to 120, otherwise

65
00:05:53,470 --> 00:05:54,190
to zero.

66
00:05:54,850 --> 00:06:00,370
So in the end, this container can be anything between 60 and 120 pixels high

67
00:06:00,490 --> 00:06:03,400
if we're in sign up mode and it is always zero

68
00:06:03,430 --> 00:06:14,940
if we're in login mode. With that changed, we also can of course give this a curve here with

69
00:06:14,940 --> 00:06:23,160
curves easeIn and then do a full restart here to see that animation in practice.

70
00:06:23,180 --> 00:06:24,970
So now you see the space is not reserved,

71
00:06:24,980 --> 00:06:32,800
then it fades nicely and smoothly in as we animate this and this I'd say is a much nicer look.

72
00:06:32,840 --> 00:06:40,190
Now if you also want a more detailed sliding animation for the confirm password text field, you can also

73
00:06:40,400 --> 00:06:47,300
go into the fade transition and add yet another transition here by wrapping the text form field with another

74
00:06:47,310 --> 00:06:48,150
widget,

75
00:06:48,150 --> 00:06:53,750
the slide transition which just like the fade transition is also built into Flutter. We can use that

76
00:06:53,750 --> 00:06:56,080
to let that widget slide and for that again,

77
00:06:56,100 --> 00:07:03,390
I crawl up to initState and above that and I'll recycle the old height animation and name it slide

78
00:07:03,420 --> 00:07:05,860
animation because we don't need the height animation anymore,

79
00:07:05,880 --> 00:07:11,940
we're using animated container for that and the slide animation here will actually get an offset value,

80
00:07:12,030 --> 00:07:16,970
not a size value, offset is also a class provided by Flutter and then here,

81
00:07:16,980 --> 00:07:27,280
we set up slide animation with a tween that controls offsets and we start at an offset where we can

82
00:07:27,280 --> 00:07:34,270
to set different values and offset, if you have a look at it, takes an offset on the x and on the y-xis,

83
00:07:34,280 --> 00:07:38,570
I never want to offset this on the x-axis so I'll set that to zero

84
00:07:38,990 --> 00:07:45,590
but on the y-axis to have it slide in from the top, I'll offset this by 1.5 pixels here in the

85
00:07:45,590 --> 00:07:48,470
end, -1.5

86
00:07:48,650 --> 00:07:57,190
and I want to end, add an offset of 0.0, so add the position it should have in the end. That's an offset

87
00:07:57,190 --> 00:08:03,040
tween and we can now use that on the slide transition because slide transition wants an animation

88
00:08:03,280 --> 00:08:08,200
that uses an offset tween and of course that's also something you simply find in the official docs

89
00:08:08,380 --> 00:08:14,920
in case you're wondering how I know this. So on slide transition, you add a position and here you see this

90
00:08:14,920 --> 00:08:21,730
wants an animation which gives us an offset in the end, so here, I point at slide animation and we should be

91
00:08:21,730 --> 00:08:25,570
good to go. If we now do a full restart again,

92
00:08:26,610 --> 00:08:27,760
we have a look at that,

93
00:08:27,840 --> 00:08:31,340
now you see that slides in from above.

94
00:08:31,380 --> 00:08:38,159
Now of course be aware that the more animations you nest into each other, the more inefficient this gets

95
00:08:38,159 --> 00:08:43,070
or the more performance heavy your app gets. This here should be absolutely fine

96
00:08:43,080 --> 00:08:48,870
but if you start animating everything on the screen all the time, your app will slow down.

97
00:08:48,990 --> 00:08:54,460
So use these widgets, no matter if they're built-in or if you're building your own animation from scratch,

98
00:08:54,540 --> 00:08:58,330
use that with care and do careful testing

99
00:08:58,360 --> 00:09:05,130
also on older devices to make sure that your app runs smooth because the best application with the best

100
00:09:05,160 --> 00:09:09,870
animations isn't worth much if it's just slow and people can't use it.

