1
00:00:02,550 --> 00:00:09,370
Besides the lifecycle of a widget and the state of a widget, the overall app also has a lifecycle.

2
00:00:09,420 --> 00:00:15,330
There's a couple of different lifecycle states and of course, the important question then always is when

3
00:00:15,330 --> 00:00:17,200
is this state reached,

4
00:00:17,220 --> 00:00:21,320
when can you execute code based on that state,

5
00:00:21,450 --> 00:00:28,440
for example you have the inactive state. Inactive means that your app is not even running in background,

6
00:00:28,460 --> 00:00:32,670
it's inactive, the user can't see it, it can't receive user input,

7
00:00:32,670 --> 00:00:41,100
it's not fully cleared from memory yet but it's definitely not too active. A state that can be reached

8
00:00:41,100 --> 00:00:43,290
on both operating systems is paused

9
00:00:43,290 --> 00:00:47,200
however, this is when the app is not visible and when it's running in background,

10
00:00:47,280 --> 00:00:52,500
so when you can reach it through the task manager of your application for example. This is available on

11
00:00:52,500 --> 00:00:59,040
both Android and iOS and you can react to the app transitioning into that mode in your code, for example

12
00:00:59,040 --> 00:01:00,880
to do some last minute cleanup,

13
00:01:01,110 --> 00:01:04,980
clear some connection to a server or anything like that.

14
00:01:05,040 --> 00:01:08,240
Now of course, since you have paused, you also have resumed.

15
00:01:08,370 --> 00:01:13,500
This state is reached when your app is coming back from the background mode

16
00:01:13,500 --> 00:01:16,590
if it's again visible and again responding to user input

17
00:01:16,590 --> 00:01:20,040
and this is also available both on Android and iOS.

18
00:01:20,130 --> 00:01:26,430
So this would be a good place to then again set up a live connection to a server, check whether you want

19
00:01:26,430 --> 00:01:32,880
to change something in your app, fetch new data, anything like that and there also is a suspending

20
00:01:32,880 --> 00:01:40,650
state which is reached when the app is about to be suspended, so when it's almost gone but still there

21
00:01:40,680 --> 00:01:46,040
but when it's about to be cleared by the operating system, when it's about to be removed from memory.

22
00:01:46,050 --> 00:01:51,230
Now for all these states, it's important that you never have a 100% guarantee that

23
00:01:51,840 --> 00:01:56,560
your listeners to these states are executed, especially for suspending and so on,

24
00:01:56,580 --> 00:02:03,810
for example if a battery suddenly goes off or a user removes the battery from the phone, then your app

25
00:02:03,810 --> 00:02:09,210
might not reach that state because it's not a clean exit as initialized by the operating system but

26
00:02:09,210 --> 00:02:10,289
a hard exit

27
00:02:10,289 --> 00:02:13,570
due to some external factor, that's something to keep in mind.

28
00:02:13,710 --> 00:02:19,780
Now in most cases however, you can listen to these lifecycles and therefore let's do just that.

29
00:02:19,830 --> 00:02:23,690
So how can we listen to these app lifecycle events?

30
00:02:23,810 --> 00:02:27,890
Let's do it here in the main.dart file on our

31
00:02:31,240 --> 00:02:32,020
MyHomePageState,

32
00:02:32,020 --> 00:02:36,600
there you can add a so-called mix in.

33
00:02:36,640 --> 00:02:38,310
We haven't used that before,

34
00:02:38,380 --> 00:02:44,200
it's a bit like a class and it's a bit like extending a class but your class is now not

35
00:02:44,200 --> 00:02:50,710
based on that class but it adds a certain feature from that class you're mixing into your class, so you're

36
00:02:50,770 --> 00:02:53,120
adding certain properties, certain methods

37
00:02:53,130 --> 00:02:59,410
this other class has without fully inheriting this other class. It has some technical differences

38
00:02:59,410 --> 00:03:05,170
you also only can inherit from one class, so if you want to bring in features from multiple classes, you

39
00:03:05,170 --> 00:03:11,590
would use a mix in. You use a mix in by adding a with keyword after your class and after all your

40
00:03:11,950 --> 00:03:17,160
extensions or the one class you're extending from possibly and then the name of the class you want to extend

41
00:03:17,370 --> 00:03:17,760
and here,

42
00:03:17,760 --> 00:03:25,810
that's that WidgetsBindingObserver class. WidgetsBindingObserver is something you import here and

43
00:03:25,810 --> 00:03:30,080
or you add here as a mix in and once you did that, you can add a new method,

44
00:03:30,130 --> 00:03:34,360
maybe here after our properties. The new method you can add

45
00:03:34,360 --> 00:03:44,500
now is didChangeAppLifecycleState, that actually is a method added by the mix in and therefore we

46
00:03:44,500 --> 00:03:50,560
add @Override here to make clear that we deliberately override this. You return nothing here, hence

47
00:03:50,560 --> 00:03:58,630
you have to add void and this method receives an argument of type AppLifeCycleState which you can

48
00:03:58,630 --> 00:03:59,910
give any name you want

49
00:04:00,070 --> 00:04:02,430
and this is the state the app now transition too.

50
00:04:02,440 --> 00:04:08,590
So this method will be called whenever your lifecycles state changes, whenever the app reaches a new

51
00:04:08,680 --> 00:04:10,880
state in lifecycle.

52
00:04:11,140 --> 00:04:16,959
Now here already important and hence you should always add this mix in on a state object, on a class

53
00:04:16,959 --> 00:04:23,410
extending state, you also want to clear that listener to lifecycle changes when that widget, when

54
00:04:23,410 --> 00:04:26,050
that state object is not required anymore.

55
00:04:26,290 --> 00:04:37,790
So let's add dispose here with @Override and in there, call super.dispose and clear listeners to

56
00:04:37,790 --> 00:04:38,850
lifecycle changes,

57
00:04:38,870 --> 00:04:44,630
otherwise you keep that listener up and running even if that state class, that state object should be

58
00:04:45,080 --> 00:04:45,830
deleted.

59
00:04:45,830 --> 00:04:50,330
Of course here for our main state, that can't happen because when that gets removed, the entire app is

60
00:04:50,330 --> 00:04:51,210
shut down

61
00:04:51,230 --> 00:04:57,560
but if you have a bigger app and you add your app lifecycle listeners in just one child widget somewhere

62
00:04:57,560 --> 00:05:03,200
down the widget tree of your app because in that child widget you're interested in changes to the lifecycle

63
00:05:03,380 --> 00:05:04,370
of the app,

64
00:05:04,370 --> 00:05:09,320
well then when that child widget gets removed, you certainly also want to clear your lifecycle listeners

65
00:05:09,410 --> 00:05:11,320
to avoid memory leaks.

66
00:05:11,420 --> 00:05:19,130
So here in dispose, you clear all listeners you have to the app lifecycle by referring to widgets binding

67
00:05:21,240 --> 00:05:26,290
and then there, the instance property and there you call remove observer

68
00:05:26,430 --> 00:05:34,400
this. Now before you can remove it however, you also need to set up a listener, so for this method to be

69
00:05:34,400 --> 00:05:35,080
triggered,

70
00:05:35,150 --> 00:05:39,630
you need to add a listener and you do this by adding initState

71
00:05:39,920 --> 00:05:45,680
and there you now use widgets binding instance add observer this.

72
00:05:45,710 --> 00:05:52,910
So with this line, you're saying or you're telling Flutter hey whenever my lifecycle state changes, I

73
00:05:52,910 --> 00:05:59,720
want you to go to a certain observer and call the didChangeAppLifeCycleState method,

74
00:05:59,720 --> 00:06:05,200
that's what widgets binding tells Flutter. We then tell Flutter that the observer is this,

75
00:06:05,210 --> 00:06:11,300
so this class itself and therefore this class of course needs to have a didChangeAppLifeCycleState.

76
00:06:12,080 --> 00:06:18,140
With that now available, this will get triggered whenever the app lifecycle changes and as explained,

77
00:06:18,140 --> 00:06:19,790
we have to clear our listener,

78
00:06:19,790 --> 00:06:23,260
we have to clear our observer here to avoid memory leaks

79
00:06:23,270 --> 00:06:25,970
when this state object should be removed.

80
00:06:25,970 --> 00:06:29,570
And now in this method here, didChangeAppLifecycleState,

81
00:06:29,570 --> 00:06:36,320
you can react to changes in your app lifecycle and for now, I'll simply print state here so that we can

82
00:06:36,320 --> 00:06:38,900
see what the new state is.

83
00:06:40,520 --> 00:06:48,200
For that, let's restart the app, let's maybe even do a full rebuild here. So close the running emulator and

84
00:06:48,200 --> 00:06:54,440
restart without debugging so that this gets rebuilt and launched on the emulator or on the real device

85
00:06:54,620 --> 00:06:59,390
and let's see what's happening there, which logs we see. The app restarted

86
00:06:59,460 --> 00:07:06,150
and if we go back to the debug console now, we see no lifecycle states here,

87
00:07:06,190 --> 00:07:06,460
right,

88
00:07:06,460 --> 00:07:13,360
we see just the build methods running, constructors running and so on, we see no lifecycle, app lifecycle

89
00:07:13,370 --> 00:07:20,540
methods here. That will change if we go back and we press that home screen button here on Android.

90
00:07:20,550 --> 00:07:23,150
So we're back on the home screen but our app is still running,

91
00:07:23,150 --> 00:07:26,170
we could access it here through the task manager.

92
00:07:26,300 --> 00:07:31,270
Now what you see is that here, we entered inactive,

93
00:07:31,290 --> 00:07:37,420
so this was briefly entered on Android but then immediately after that, we actually entered paused.

94
00:07:37,430 --> 00:07:43,860
So it first gets inactive but then Android kind of detects hey this is actually just paused, it's running

95
00:07:43,860 --> 00:07:44,730
in background

96
00:07:47,370 --> 00:07:51,900
and now if I open the task manager and I go back into this application,

97
00:07:54,680 --> 00:07:56,090
we see that there,

98
00:07:56,120 --> 00:07:59,960
here is where we were, it briefly goes back into inactive,

99
00:07:59,960 --> 00:08:06,980
so basically during this switch, it goes into inactive but then it enters resume because now it's getting

100
00:08:06,980 --> 00:08:11,280
back from paused to running again.

101
00:08:11,290 --> 00:08:19,910
Now if I kill the app now by swiping up here in the task manager, we see it enters inactive and paused and

102
00:08:19,920 --> 00:08:22,830
what we don't see here is suspended,

103
00:08:22,860 --> 00:08:28,040
so this is not getting printed here. In theory, suspended should be reached here

104
00:08:28,110 --> 00:08:36,000
but since we clear the app here, also the connection, the debugging connection here is cleared and hence

105
00:08:36,000 --> 00:08:42,929
the suspended state whilst reached might not make it into our console here because we already cleared

106
00:08:42,960 --> 00:08:45,030
our listener here to our app.

107
00:08:45,270 --> 00:08:52,180
So this all happens in a very short amount of time and therefore, suspended should run,

108
00:08:52,500 --> 00:08:56,280
as I mentioned on the slide, you can't always rely on it but it should run

109
00:08:56,280 --> 00:09:01,890
but here for example, we don't get our log being printed because we already cleared the connection,

110
00:09:01,890 --> 00:09:05,330
the debugging connection to that app

111
00:09:05,520 --> 00:09:11,160
basically at the same point of time suspended would run. But we can clearly see inactive and paused and

112
00:09:11,160 --> 00:09:17,070
resumed which are the most important lifecycle hooks because you would use that to, as I said, for example

113
00:09:17,070 --> 00:09:23,010
a refetch data when it's coming back into foreground or to clear listeners when the app is getting

114
00:09:23,010 --> 00:09:23,520
paused.

