WEBVTT
1
00:00:02.310 --> 00:00:08.220
So time to work on the add place screen which is of course where we will fetch all the user data and

2
00:00:08.360 --> 00:00:10.520
set up that new place that we want add.

3
00:00:10.730 --> 00:00:15.810
Therefore this will actually be a stateful widget because we'll have text inputs there or a form in there,

4
00:00:15.880 --> 00:00:18.880
we'll have inputs for the image and for the map in here,

5
00:00:18.930 --> 00:00:25.050
so we'll definitely need to manage some temporary data here before we then use our great places model

6
00:00:25.050 --> 00:00:30.090
to add a place here and therefore here, we'll have some local state and hence we need a stateful widget.

7
00:00:30.930 --> 00:00:34.900
So let's name that add place screen

8
00:00:35.220 --> 00:00:39.050
and as always, of course import material.dart

9
00:00:39.060 --> 00:00:46.920
and now in here, I'll first of all give this a static const route name so that we can add this to the

10
00:00:46.920 --> 00:00:52.620
routes table later, maybe /add-place, name is of course totally up to you

11
00:00:52.650 --> 00:00:59.430
and now here in our state object in the build method, I want to return my form

12
00:00:59.440 --> 00:01:02.420
so to say or the page which includes the form.

13
00:01:02.610 --> 00:01:09.780
So we certainly need a scaffold widget here to have a nice page look, also add an appBar where we

14
00:01:09.780 --> 00:01:18.830
can add a title, where we for example say add a new place, like this and then let's define a body and to

15
00:01:18.830 --> 00:01:20.320
mix things up here,

16
00:01:20.330 --> 00:01:27.080
I actually want to have the submit button below the form. So I'll start with a column here, to have two

17
00:01:27.080 --> 00:01:34.190
widgets sit on top or above each other, not in the 3D space but from top to bottom on the device screen

18
00:01:34.190 --> 00:01:44.260
and here, I for one want my form widget in the end or actually we can use a form for sure,

19
00:01:44.260 --> 00:01:48.490
feel free to do so but we'll only have one text input, so I'll manage this manually.

20
00:01:48.490 --> 00:01:54.550
So for now, I'll just render text here where I say user inputs because we'll add the different kind of

21
00:01:54.550 --> 00:02:01.330
inputs we have for the image for the map and for the title later. Below that collection of user inputs

22
00:02:01.330 --> 00:02:08.000
which we'll add in this place here, below that, I want to have a RaisedButton which we can use to submit

23
00:02:08.000 --> 00:02:14.740
the form. So this will be a RaisedButton which should actually also include an icon and therefore, we

24
00:02:14.740 --> 00:02:20.530
can use the special RaisedButton icon constructor which also gives us the RaisedButton but a RaisedButton

25
00:02:20.530 --> 00:02:24.700
that contains both a label and an icon. The icon

26
00:02:24.760 --> 00:02:28.990
I want to use here with the icon widget is the add icon,

27
00:02:28.990 --> 00:02:37.870
so this plus icon, the label which has to be a widget can simply be add place and in addition, of course

28
00:02:37.870 --> 00:02:45.040
we also need onPressed here which then triggers our submit function or our logic to submit to this place.

29
00:02:47.020 --> 00:02:52.810
Now with this, let's make sure we can reach this screen by going to the main.dart file and there,

30
00:02:52.810 --> 00:03:02.470
let's add a routes table, a map therefore and import our screen from add_place_screen.dart in the screens

31
00:03:02.470 --> 00:03:10.060
folder and now in the route table, we can add an entry, AddPlaceScreen.routeName is the key and the

32
00:03:10.060 --> 00:03:15.190
builder function which Flutter will automatically execute gets this context which Flutter provides

33
00:03:15.460 --> 00:03:20.530
and there of course, I want to create a new add places screen widget, that is the widget that will then

34
00:03:20.530 --> 00:03:22.510
be presented as the screen.

35
00:03:22.630 --> 00:03:28.600
Now with that out of the way, we have a way of loading that, at least theoretically, now we need

36
00:03:28.600 --> 00:03:33.500
to connect that to the plus button in the appBar of the places list screen.

37
00:03:33.670 --> 00:03:41.580
So here when this gets pressed, I want to use the navigator of course, of context to then push a named

38
00:03:41.580 --> 00:03:44.870
route, not push replace, I want to be able to go back.

39
00:03:44.920 --> 00:03:50.450
So just push named and the route I want to push there is of course the add place route.

40
00:03:50.560 --> 00:03:57.610
So we need to import that here as well to get access to the identifier, so import the add place screen

41
00:03:58.030 --> 00:04:01.700
and then here we use AddPlaceScreen.routeName,

42
00:04:01.710 --> 00:04:11.370
that's the name of the route I want I push. So with that, let's save all of that and start the app with

43
00:04:11.370 --> 00:04:16.649
that set up on an emulator, I'll again use Android here but of course you can also test this on iOS.

44
00:04:17.670 --> 00:04:22.680
Now on the main screen, we of course have our spinner but then we have this plus icon here in the app

45
00:04:22.680 --> 00:04:28.140
bar and if we tap that, indeed we go to the add a new place screen and there, we have user inputs and the

46
00:04:28.140 --> 00:04:29.270
button.

47
00:04:29.280 --> 00:04:35.360
Now I actually want to have this button sit at the very end of the screen always.

48
00:04:35.640 --> 00:04:43.140
So to achieve this we can go to add place and there on column, I want to add a main axis alignment because

49
00:04:43.140 --> 00:04:48.570
the main axis of a column is from top to bottom which is set to spaceBetween.

50
00:04:51.170 --> 00:04:55.040
Now this ensures that the button here is on the end of the screen.

51
00:04:55.040 --> 00:05:00.590
In addition, I want to make sure that all items take the full width of the screen, so they're not

52
00:05:00.920 --> 00:05:07.440
centered horizontally but they take the full width. We can do this with the cross axis alignment and

53
00:05:07.440 --> 00:05:14.490
there with CrossAxisAlignment.stretch, this stretches the items along the cross axis which

54
00:05:14.490 --> 00:05:16.190
for a column is from left to right.

55
00:05:16.200 --> 00:05:20.180
So now the button here takes the full width, the text input would do that as well

56
00:05:20.190 --> 00:05:25.620
but since I haven't set up any text alignment, it still has the alignment of being all the way on

57
00:05:25.620 --> 00:05:26.180
the left,

58
00:05:26.250 --> 00:05:32.100
which is fine because this is only a placeholder. So the button is now always and on the end here

59
00:05:32.280 --> 00:05:34.760
but I want to have it set really on the end

60
00:05:34.770 --> 00:05:41.730
and for this, we have to remove the drop shadow and this extra margin around it so to say and for this,

61
00:05:41.730 --> 00:05:47.040
we can go to the RaisedButton and give it an elevation of 0 which removes the drop shadow

62
00:05:47.040 --> 00:05:53.640
and if we do this and we save this, it loses its shadow which is good but there still is some margin around

63
00:05:53.640 --> 00:05:58.830
it and to get rid of that, we can add another argument, the material tab target size,

64
00:05:59.070 --> 00:06:03.960
it's basically a feature that ensures that you have a big space you can hit with your finger

65
00:06:04.170 --> 00:06:09.630
and if we shrink that by setting it to MaterialTabTargetSize.shrinkWrap,

66
00:06:09.630 --> 00:06:12.280
you get rid of that extra margin around the button.

67
00:06:12.450 --> 00:06:17.340
So by setting this here, the button now really sits on the end of the screen which is the look I want

68
00:06:17.580 --> 00:06:23.330
because I want to have all the inputs above that and have the button at the bottom here at all times.

69
00:06:23.340 --> 00:06:31.110
So now with that, only remaining thing is that I want to give this button a color of theme of context accent

70
00:06:31.110 --> 00:06:31.750
color,

71
00:06:31.830 --> 00:06:36.750
so using the accent color I set up, with that we have the nice yellow button.

72
00:06:37.080 --> 00:06:38.070
So that's the button,

73
00:06:38.070 --> 00:06:39.570
what about the inputs?

74
00:06:39.600 --> 00:06:47.370
Let's work on these next. For the inputs here, we want to replace this placeholder,

75
00:06:47.370 --> 00:06:54.630
user inputs here with a list of all the inputs we have. For this, we could now add all the inputs

76
00:06:54.630 --> 00:07:00.180
here, like a text field which allows the user to enter something and then inputs for the image and so on

77
00:07:00.900 --> 00:07:03.270
but that would actually lead to a look

78
00:07:03.400 --> 00:07:10.230
if I do that where this is all distributed across the entire screen because we have spaceBetween as

79
00:07:10.230 --> 00:07:16.410
a main axis alignment on the overall column. You might want this but I actually want to have a look where

80
00:07:16.410 --> 00:07:22.980
the button here always is at the end but the form above it or the inputs above it are not distributed

81
00:07:23.010 --> 00:07:28.450
across the entire main axis but sit at the top and are simply distributed from top to bottom there.

82
00:07:28.470 --> 00:07:33.210
So I don't want to take all the screen height at all cost,

83
00:07:33.210 --> 00:07:40.920
I think that doesn't look that nice. So therefore, I'll actually create nested column in here and now

84
00:07:40.920 --> 00:07:43.500
I'll follow a slightly different approach.

85
00:07:43.560 --> 00:07:51.930
This column here can be wrapped by an expanded widget, so this column here is wrapped by expanded in

86
00:07:51.930 --> 00:07:57.360
this outer column and therefore we can actually get rid of the main axis alignment because now thanks

87
00:07:57.360 --> 00:08:05.190
to expanded, this first child in this column will take all the height it can get and only leave this

88
00:08:05.190 --> 00:08:10.860
button as much height as it absolutely needs and therefore we'll automatically have the look where the

89
00:08:10.860 --> 00:08:13.430
button is all the way at the end of the screen

90
00:08:13.470 --> 00:08:18.060
and please keep in mind that this column is not scrollable, we didn't add a SingleChildScrollView, 

91
00:08:18.060 --> 00:08:21.100
so this button will always be on the screen

92
00:08:21.210 --> 00:08:26.760
and this here will take all the remaining space on the screen, so screen height minus the button so to

93
00:08:26.760 --> 00:08:31.120
say and therefore now, we'll have a nicer look where we have the same look as before

94
00:08:31.140 --> 00:08:37.830
but any inputs we add now in this inner column will be nicely positioned from top to bottom and not

95
00:08:37.830 --> 00:08:41.030
distributed across the entire height.

96
00:08:41.330 --> 00:08:44.430
So here, this column however should be scrollable,

97
00:08:44.480 --> 00:08:49.580
so let's wrap it with a widget and that should be a SingleChildScrollView because we might be on

98
00:08:49.580 --> 00:08:55.220
a screen where this doesn't fit onto or into this expanded container because the expanded container

99
00:08:55.250 --> 00:08:57.890
can only reserve that much space,

100
00:08:57.890 --> 00:09:03.110
it can only reserve the space between appBar and button and that might not suffice for all the inputs,

101
00:09:03.200 --> 00:09:04.830
especially in landscape mode.

102
00:09:04.970 --> 00:09:10.090
So this should be scrollable and now in this inner column, we can add all the inputs we want to have.

103
00:09:11.520 --> 00:09:17.880
I'll actually even wrap one more widget around that column and that will be the padding widget to

104
00:09:17.880 --> 00:09:23.850
add some padding. Padding is again added with EdgeInsets and there, I'll add a padding in all directions

105
00:09:24.060 --> 00:09:30.090
of 10, simply so that all the inputs don't directly sit on the edges of the device.

106
00:09:30.090 --> 00:09:35.220
And now with this, we can add a text field and because I'm not using a form, I don't use a text form field

107
00:09:35.220 --> 00:09:40.800
but a normal text field and we'll therefore have to manage the input manually of course and I'll give

108
00:09:40.800 --> 00:09:48.420
this a decoration of input decoration where we can set a label text of title because this should

109
00:09:48.420 --> 00:09:51.360
be the text input for entering a title.

110
00:09:51.630 --> 00:10:01.990
Now since we have to manage this manually, I'll add my title controller which is a new text editing controller

111
00:10:01.990 --> 00:10:06.130
here and I'll assign this of course to this text field.

112
00:10:06.310 --> 00:10:12.480
So here to the controller argument, there I'll point at the title controller.

113
00:10:12.490 --> 00:10:18.340
Now please note, since we don't have a form field here, we can't add a validator, so we can't leverage

114
00:10:18.340 --> 00:10:23.400
this built-in validation. You can of course alter this to use a form instead,

115
00:10:23.440 --> 00:10:27.480
you learned how that works in the forms module. In order to save some time,

116
00:10:27.490 --> 00:10:29.290
I'll not add all that stuff here,

117
00:10:29.320 --> 00:10:36.410
I'll just have a text field like this and leave out validation for this demo app. So we have the text

118
00:10:36.410 --> 00:10:37.490
field here,

119
00:10:37.490 --> 00:10:43.640
besides the text field, we of course also need inputs for the map and for the image.

120
00:10:43.690 --> 00:10:45.080
Now I want start with the image,

121
00:10:45.440 --> 00:10:51.680
so I'll first of all add a SizedBox here with a height of 10 let's say, to have some spacing between the

122
00:10:51.680 --> 00:10:59.080
text field and the image input and now for the image input, I want to have a container which shows a preview

123
00:10:59.380 --> 00:11:01.540
of the image we picked

124
00:11:01.540 --> 00:11:03.510
and of course then I want to have a button,

125
00:11:03.550 --> 00:11:07.980
let's say a FlatButton

126
00:11:08.000 --> 00:11:16.700
which we can press to open the image picker or to open the device camera and I'll actually move

127
00:11:16.730 --> 00:11:18.320
that into a separate widget

128
00:11:18.320 --> 00:11:22.440
and for that, I'll add a widgets folder and in that widgets folder,

129
00:11:22.490 --> 00:11:27.860
I'll add an image_input.dart file and of course you can name this input or this file whatever

130
00:11:27.860 --> 00:11:29.330
you want.

131
00:11:29.330 --> 00:11:36.080
Now this will also be a stateful widget here because we'll manage that preview in this widget here.

132
00:11:36.660 --> 00:11:38.810
So I'll name this image

133
00:11:38.810 --> 00:11:44.850
input and then simply import material.dart of course

134
00:11:44.850 --> 00:11:52.320
and now in here, in the build method of this state, I want to output that preview and then next to

135
00:11:52.320 --> 00:11:53.050
it, the button.

136
00:11:53.050 --> 00:11:59.130
So I'll add a row here to have it sit next to each other horizontally and then my first child is a container

137
00:11:59.130 --> 00:12:00.910
that should render this preview,

138
00:12:00.930 --> 00:12:08.140
second child is that FlatButton here which we tap to open the image picker or the camera. Let's

139
00:12:08.140 --> 00:12:10.390
start with the preview container,

140
00:12:10.870 --> 00:12:13.590
I'll give it a width of 100 and the height of 100

141
00:12:13.630 --> 00:12:19.260
and you can play around with these values to find values that fit your needs and that you like.

142
00:12:19.270 --> 00:12:26.470
I'll give it a decoration, a BoxDecoration object therefore to set a border with border.all, give

143
00:12:26.470 --> 00:12:34.420
it a width of 1 and a color of Colors.grey to have a nice border around that preview and then in there,

144
00:12:34.420 --> 00:12:40.810
of course I need a child and that child should either be some text if we have no image yet or the

145
00:12:40.810 --> 00:12:53.210
image. Therefore let's manage this image here in our state object, we can simply add a stored image and

146
00:12:53.210 --> 00:12:59.330
that should be a file of course because now we're not working with network images but with real image

147
00:12:59.330 --> 00:13:06.350
files, so we need to import dart:io to use the file type because we'll have an image which is of

148
00:13:06.350 --> 00:13:08.750
type file in here.

149
00:13:08.750 --> 00:13:16.070
So now we can check whether stored image is set, if stored image is not equal to null, then I want to render

150
00:13:16.070 --> 00:13:25.070
my image preview, otherwise I'll render a text widget where we could say no image taken or anything like

151
00:13:25.070 --> 00:13:25.340
that.

152
00:13:28.190 --> 00:13:34.190
Now before I come back to rendering that image, I also want to add an alignment to the container to align

153
00:13:34.190 --> 00:13:40.250
the child inside of the container and I'll want to align that directly in the center with alignment.center,

154
00:13:40.290 --> 00:13:45.020
so it will be in the center both vertically and horizontally.

155
00:13:45.020 --> 00:13:51.350
Now for the case that we have a file, then I want to create an image widget in there as a child

156
00:13:51.830 --> 00:13:55.460
and we used image.network before and image.asset,

157
00:13:55.460 --> 00:14:01.910
now we need image.file which allows us to create an image based on a file on our device, so that's exactly

158
00:14:01.910 --> 00:14:07.370
what we'll have and Flutter will do all the heavy lifting of finding that file, parsing it and rendering

159
00:14:07.370 --> 00:14:15.000
it as an image. So here, of course I want to point at my stored image that holds the file after all

160
00:14:15.000 --> 00:14:18.290
and I'll set up a fit of 

161
00:14:18.300 --> 00:14:18.930
BoxFit.cover

162
00:14:19.170 --> 00:14:25.510
and also make sure that we set a width here of let's say double infinity,

163
00:14:25.680 --> 00:14:32.460
so that this widget here or this image here which is rendered actually takes the full width of the surrounding

164
00:14:32.460 --> 00:14:35.880
container.

165
00:14:35.890 --> 00:14:37.160
So this is now the

166
00:14:37.190 --> 00:14:40.190
preview, now for the button.

167
00:14:40.240 --> 00:14:47.260
Now actually, let's add a SizedBox in there with a width of let's say 10 to have some spacing between

168
00:14:47.260 --> 00:14:52.300
the preview and the button and then the button should take all the remaining space in the row, so we can

169
00:14:52.300 --> 00:14:54.910
wrap this with an expanded widget

170
00:14:54.910 --> 00:15:00.790
and as you learned expanded, make sure that the child takes all the remaining space in that row

171
00:15:00.820 --> 00:15:06.280
or column, in this case it's a row. I'll actually use FlatButton.icon,

172
00:15:06.280 --> 00:15:12.670
so this special constructor to have a FlatButton which has both an icon and a label and the icon here

173
00:15:14.080 --> 00:15:17.310
can be the camera icon because we'll open the camera,

174
00:15:17.320 --> 00:15:18.970
so I guess that makes sense

175
00:15:18.970 --> 00:15:23.920
and the label here will be a text widget where I say take picture.

176
00:15:27.830 --> 00:15:32.600
The text color which I want to use will be taken from the theme and there, I want to use the primary

177
00:15:32.600 --> 00:15:39.740
color and onPressed, the goal of course is to open the device camera.

178
00:15:39.740 --> 00:15:46.670
Now before we do that, let's make sure we use our image input widget here in the add place screen widget,

179
00:15:46.670 --> 00:15:53.120
So here instead of that container in FlatButton, I want to use that widget which we just created.

180
00:15:53.120 --> 00:15:54.800
So let's add an import up there,

181
00:15:54.890 --> 00:15:59.340
go to the widgets folder and import the image_input.dart file

182
00:15:59.360 --> 00:16:07.040
and now with that import added there, down here below the SizedBox, I'll add image input as a widget.

183
00:16:08.240 --> 00:16:09.680
Let's save this

184
00:16:09.740 --> 00:16:15.550
and now we see this here and I actually also want to center this text here now that I see that.

185
00:16:15.940 --> 00:16:24.700
So here in my no image taken dummy text, I want to add text align, textAlign.center because yes,

186
00:16:24.700 --> 00:16:29.740
we do center the text widget here vertically and horizontally in the container but I always want

187
00:16:29.740 --> 00:16:37.540
to center the text inside of its own container, its own box so to say. So let's add this centering here

188
00:16:37.990 --> 00:16:44.200
so that we have this text here centered in all directions and we have this button here and now of course,

189
00:16:44.230 --> 00:16:52.930
we need to make sure that this button can be pressed and you can of course also ramp up that width here

190
00:16:53.350 --> 00:16:58.180
of the container if you wanted to, to have a bigger preview, whatever suits your needs,

191
00:16:58.300 --> 00:17:00.390
maybe I'll go with 150 there,

192
00:17:00.400 --> 00:17:01.230
yes.

193
00:17:01.240 --> 00:17:08.349
So now the next goal is to make that button work, so that it actually does open the device camera and

194
00:17:08.349 --> 00:17:13.630
allows us to take a picture and that of course is one of the core things of this module.

