1
00:00:02,180 --> 00:00:10,490
So for iOS setup, we can go back to the Firebase messaging package page and there you got the iOS integration

2
00:00:10,490 --> 00:00:11,150
steps.

3
00:00:11,180 --> 00:00:15,980
Now it looks short, but actually you've got a few steps that you need to perform here.

4
00:00:16,129 --> 00:00:21,500
For example, you need to generate certificates required by Apple for receiving push notifications.

5
00:00:21,530 --> 00:00:28,640
Again, for that ID part where you're basically telling Apple, Hey, that's me, I am the creator of

6
00:00:28,640 --> 00:00:30,230
the app and here is my proof.

7
00:00:30,770 --> 00:00:34,400
Now you can follow this guide, as you can see, to configure that.

8
00:00:35,000 --> 00:00:38,510
And that takes us to the official Firebase Cloud Messaging Docs.

9
00:00:38,780 --> 00:00:44,630
Now here you should go through the first two steps, but you can skip the create the provisioning profile

10
00:00:44,630 --> 00:00:47,690
step, as is also mentioned here.

11
00:00:48,710 --> 00:00:51,110
So let's go through the obvious steps then.

12
00:00:51,290 --> 00:00:56,000
And the first step is that we create an authentication key.

13
00:00:56,330 --> 00:01:02,510
For that, we need to have an Apple developer account and log into that so you can search for apple

14
00:01:02,510 --> 00:01:08,540
developer or apple developer account and find their apple developer page and log in there with your

15
00:01:08,540 --> 00:01:09,560
apple ID.

16
00:01:09,860 --> 00:01:11,480
Now, once you did, log in.

17
00:01:12,800 --> 00:01:18,290
You should go to certificates, identifiers and profiles and under the keys, select all.

18
00:01:18,320 --> 00:01:19,370
As you can tell.

19
00:01:19,500 --> 00:01:20,480
Let's go there.

20
00:01:23,940 --> 00:01:29,850
Go to keys and there's simply click on plus that all part is not required for me.

21
00:01:29,850 --> 00:01:32,850
At least here I can just click on plus to create a new key.

22
00:01:33,600 --> 00:01:35,640
Now I did that, therefore.

23
00:01:36,740 --> 00:01:41,150
And now we should enter a description for the aprns off key.

24
00:01:42,360 --> 00:01:46,950
And under a key services, select the APN checkbox and click continue.

25
00:01:47,490 --> 00:01:54,840
So here in the end we want to check this Apms checkbox, which basically says that we want to generate

26
00:01:54,840 --> 00:02:02,490
a key which we can use to send push notifications and we should give this a name like flutter chat example,

27
00:02:02,970 --> 00:02:03,990
something like this.

28
00:02:06,750 --> 00:02:11,550
And once you did all of that, you can click, confirm and then download and then save this key in a

29
00:02:11,550 --> 00:02:18,180
secure place because that will be a key which we will soon provide through Firebase Cloud messaging

30
00:02:18,180 --> 00:02:22,710
to Apple for every message we want to send to send that message.

31
00:02:22,710 --> 00:02:27,870
So anyone with that key could cause harm to your application and could abuse it.

32
00:02:27,870 --> 00:02:30,210
So store it in a secure place.

33
00:02:30,210 --> 00:02:36,420
Don't just put it onto your desktop, don't upload it to a GitHub repository, store it in a place where

34
00:02:36,420 --> 00:02:37,950
only you have access to.

35
00:02:37,980 --> 00:02:43,350
Also note that it's a one time download and you can't retrieve the key later, so make sure you don't

36
00:02:43,350 --> 00:02:44,040
lose it.

37
00:02:44,340 --> 00:02:48,210
So let's click on Continue Here Register.

38
00:02:49,860 --> 00:02:53,840
And here we get the same warning that we can only download in once.

39
00:02:53,850 --> 00:03:00,720
So let me now download this key and I'm storing this in some folder on my system now where no one else

40
00:03:00,720 --> 00:03:01,610
has access to.

41
00:03:02,670 --> 00:03:04,320
So that's the key download it.

42
00:03:04,320 --> 00:03:10,950
The next step now is that we create an app ID, so that is basically an identifier that uniquely identifies

43
00:03:10,950 --> 00:03:12,030
our application.

44
00:03:12,030 --> 00:03:18,000
And there we use this reverse domain notation here, which we also use for our bundle identifier.

45
00:03:18,830 --> 00:03:22,680
For that, go to the Apple Developer Member Center and login.

46
00:03:22,700 --> 00:03:27,900
You should already be logged in by now and then click on certificates, identifiers and profiles.

47
00:03:27,920 --> 00:03:30,440
So where we just were essentially.

48
00:03:31,440 --> 00:03:32,580
And in their.

49
00:03:33,330 --> 00:03:36,150
Navigate to identifiers, app IDs.

50
00:03:36,150 --> 00:03:37,590
So identifiers.

51
00:03:38,040 --> 00:03:42,090
And then here we got app IDs, as you can tell.

52
00:03:42,300 --> 00:03:44,520
And we want to add a new identifier here.

53
00:03:45,170 --> 00:03:47,150
So the plus button was clicked.

54
00:03:47,980 --> 00:03:50,350
Now that new app ID has a name.

55
00:03:51,130 --> 00:03:55,240
Which is basically a human readable name and a team ID.

56
00:03:55,900 --> 00:03:58,780
So let's generate this app ID here.

57
00:04:01,080 --> 00:04:01,920
Continue.

58
00:04:04,100 --> 00:04:05,720
Give it your description.

59
00:04:06,020 --> 00:04:07,310
Like flutter.

60
00:04:08,460 --> 00:04:16,410
Chat example your team ID should already be selected here and now choose a bundle ID here and choose

61
00:04:16,410 --> 00:04:23,310
explicit as it also says here and then input your bundle ID which you also have in your application.

62
00:04:23,310 --> 00:04:24,090
And that's important.

63
00:04:24,090 --> 00:04:25,410
It has to be the same one.

64
00:04:25,410 --> 00:04:32,580
So in your iOS runner folder you have the info list file, and in there that bundle ID is inserted by

65
00:04:32,600 --> 00:04:33,630
flutter in the end.

66
00:04:34,490 --> 00:04:40,520
Now, if you're not sure what your actual ID is, therefore you can simply open your project in Xcode.

67
00:04:40,670 --> 00:04:46,100
So that iOS folder of your Flutter project in Xcode and they are under general.

68
00:04:46,100 --> 00:04:48,750
It's this bundle identifier I'm talking about.

69
00:04:48,770 --> 00:04:50,990
Grab this bundle identifier.

70
00:04:52,740 --> 00:04:54,810
Now important before you continue.

71
00:04:57,140 --> 00:05:03,920
You should scroll down here and check push notifications to make it clear that this app intends to use

72
00:05:03,920 --> 00:05:05,090
push notifications.

73
00:05:05,090 --> 00:05:10,400
That's also what you find here in the docs that you should check push notifications.

74
00:05:11,950 --> 00:05:14,980
Thereafter, we can continue and verify our inputs.

75
00:05:16,070 --> 00:05:17,600
And Click Register.

76
00:05:18,700 --> 00:05:22,780
Now as mentioned, you can skip the create provisioning profile part here.

77
00:05:24,070 --> 00:05:25,120
All the worth a note.

78
00:05:25,120 --> 00:05:29,230
Of course, your bundle identifier should be one that's not already taken.

79
00:05:29,230 --> 00:05:34,840
For example, I changed mine to calm academy in the latter complete guide academy and is my company

80
00:05:34,840 --> 00:05:38,530
because com example flatter complete guide was already taken.

81
00:05:38,530 --> 00:05:42,520
If that happens for you, you have to change it here to something unique.

82
00:05:42,520 --> 00:05:48,460
So to your company name and then sub identifier for example, and then all the re add your project on

83
00:05:48,460 --> 00:05:49,330
firebase.

84
00:05:49,330 --> 00:05:54,400
So remove your existing iOS project here and read it as shown at the beginning of the module.

85
00:05:54,400 --> 00:05:59,650
It's super simple and not the end of the world, so once all of that is done, we can skip that, create

86
00:05:59,650 --> 00:06:05,560
the provisioning profile step, and therefore now we're done with step one here in the iOS integration.

87
00:06:05,590 --> 00:06:06,160
No worries.

88
00:06:06,160 --> 00:06:07,750
The other steps will be faster.

89
00:06:07,750 --> 00:06:10,240
For example, we already finished.

90
00:06:10,240 --> 00:06:15,370
Step two, we linked our project to Firebase already, so we don't need to do this again.

91
00:06:15,970 --> 00:06:19,690
Now, here in Xcode, we now need to configure something though.

92
00:06:19,690 --> 00:06:24,310
We need to select Runner in the project navigator and then in the Capabilities tab.

93
00:06:24,310 --> 00:06:31,300
We should turn on push notifications and background modes and enable background fetch and remote notifications.

94
00:06:32,360 --> 00:06:41,690
So here in Xcode, click on Runner and under signing and capabilities, click on plus capability and

95
00:06:41,690 --> 00:06:44,720
choose push notifications here.

96
00:06:45,470 --> 00:06:46,670
Double click on it.

97
00:06:48,650 --> 00:06:50,510
Now all to click on that again.

98
00:06:52,450 --> 00:06:54,460
And choose background modes and.

99
00:06:54,490 --> 00:06:55,840
On background modes.

100
00:06:55,840 --> 00:06:59,590
Then enable remote notifications and background fetch.

101
00:07:00,850 --> 00:07:03,550
These are the two things you should enable here.

102
00:07:06,250 --> 00:07:12,960
Next, let's follow the steps here under upload your app and certificate in the Firebase Docs.

103
00:07:12,970 --> 00:07:18,640
This is required because the Firebase Cloud Messaging Service in the end just talks to Apple's push

104
00:07:18,640 --> 00:07:20,110
notification service.

105
00:07:20,110 --> 00:07:27,280
And therefore, we need to make sure that FCM Firebase Cloud Messaging is able to talk to those servers

106
00:07:27,280 --> 00:07:30,760
and is able to provide our ID criteria.

107
00:07:30,760 --> 00:07:33,610
So our key to those servers.

108
00:07:35,990 --> 00:07:38,860
So we already set up our iOS client.

109
00:07:38,870 --> 00:07:42,030
We already added Firebase to our iOS project.

110
00:07:42,050 --> 00:07:46,330
We registered our app with Firebase, so that all happened.

111
00:07:46,340 --> 00:07:53,030
Hence now our next step is that we upload our API and S authentication key.

112
00:07:53,030 --> 00:07:55,700
So that key we generated a few minutes ago.

113
00:07:56,570 --> 00:08:02,450
And for that, go to your Firebase console and under project settings, go to cloud messaging.

114
00:08:03,380 --> 00:08:04,310
So here.

115
00:08:05,020 --> 00:08:10,720
Click on project settings on that gear icon and then project settings and then go to the cloud messaging

116
00:08:10,720 --> 00:08:14,620
tab and scroll down to your iOS app configuration.

117
00:08:14,950 --> 00:08:17,140
And there you need that app.

118
00:08:17,140 --> 00:08:20,110
And as off key click on upload here.

119
00:08:20,110 --> 00:08:24,790
Well to upload it and browse for that key file you downloaded a few minutes ago.

120
00:08:25,210 --> 00:08:28,420
So here is my key and I will open it here.

121
00:08:28,420 --> 00:08:34,210
And then in order to upload it, you need to enter your key ID and your team ID.

122
00:08:35,100 --> 00:08:39,059
Now you'll find both under certificates, identifiers and profiles.

123
00:08:40,580 --> 00:08:46,120
Here is the key ID, which of course is different for you, but you can grab it from that page.

124
00:08:46,130 --> 00:08:52,220
This was not deleted after your download, so you can still access this and your team ID.

125
00:08:53,060 --> 00:08:55,880
This is the ID you'll find here in the top right corner.

126
00:08:59,740 --> 00:09:04,570
So insert both here and click on upload and it should store your key here.

127
00:09:05,900 --> 00:09:11,300
So that were the steps two and three here in that documentation we're currently going through.

128
00:09:12,020 --> 00:09:16,370
Now we need to initialize Firebase in our app, but that's something we can skip because we're using

129
00:09:16,370 --> 00:09:17,750
the Firebase Flutter sticks.

130
00:09:17,750 --> 00:09:24,320
We can skip all of that, and we can also skip that entire part for handling the messages because we're

131
00:09:24,320 --> 00:09:28,780
going to do all of that with help of that flutter package here.

132
00:09:28,790 --> 00:09:33,020
Indeed, as it says here, we just needed to upload our APIs certificate.

133
00:09:33,020 --> 00:09:38,180
Only that part need to be completed and that is that part we just had a look at.

134
00:09:39,370 --> 00:09:41,290
So therefore we're done with step four.

135
00:09:41,620 --> 00:09:43,480
We can ignore step five here.

136
00:09:43,960 --> 00:09:51,280
And with that, we're therefore done with the iOS setup here, though now we also need to do something

137
00:09:51,280 --> 00:10:00,010
in our flutter code because whilst we are able to just start sending messages on Android and we didn't

138
00:10:00,010 --> 00:10:04,000
need any flutter code, that's not the case here for iOS.

139
00:10:04,000 --> 00:10:10,840
We need to request permissions first and therefore we need to write some code to do that before we'll

140
00:10:10,840 --> 00:10:15,280
be able to send notifications to our iOS device and see them there.

141
00:10:15,700 --> 00:10:22,660
So to do that, let's pick a good place and I will just go for, let's say, the chat screen.

142
00:10:22,660 --> 00:10:28,630
I could ask on the main dart file, but if a user hasn't even logged in, it doesn't make much sense

143
00:10:28,630 --> 00:10:31,030
to start sending messages to that user.

144
00:10:31,180 --> 00:10:38,410
So instead here in the chat screen, I want to ask the user whether he's fine with me sending push notifications

145
00:10:38,410 --> 00:10:39,550
to him or her.

146
00:10:40,150 --> 00:10:48,700
Now to ask for permissions, I will convert chat screen here to a state full widget simply because now

147
00:10:48,700 --> 00:10:54,790
I have this extra lifecycle hook which I can use here the init state function.

148
00:10:55,300 --> 00:11:00,430
So here we can now write our own extra code and that's where I want to ask for permission.

149
00:11:00,430 --> 00:11:04,480
So that will ask whenever this comes up, whenever that opens up.

150
00:11:05,200 --> 00:11:12,790
For that, let's import this package, which we added earlier, the Firebase messaging package, and

151
00:11:12,790 --> 00:11:15,220
there the Firebase messaging dart file.

152
00:11:15,550 --> 00:11:21,190
And in in its state here we can now access firebase messaging.

153
00:11:22,420 --> 00:11:24,310
And instantiated like this.

154
00:11:24,310 --> 00:11:30,430
There is no instance property as on the other firebase flutter packages here we have to instantiate

155
00:11:30,430 --> 00:11:31,390
it like this.

156
00:11:32,390 --> 00:11:37,090
And we can store this in a variable or in a constant to be precise.

157
00:11:37,120 --> 00:11:44,600
I'll name it FPM for firebase messaging and on FPM we can now call request notification permissions.

158
00:11:44,620 --> 00:11:49,450
Now on Android, this will do nothing, but on iOS it will well ask for permission.

159
00:11:50,950 --> 00:11:55,510
And thereafter in the next line I call FPM configure.

160
00:11:56,500 --> 00:12:03,280
Now let's save this and let's rerun this updated app here on the real iOS device, because as mentioned

161
00:12:03,280 --> 00:12:07,860
earlier, you need a real iOS device to test and use push notifications.

162
00:12:07,870 --> 00:12:14,080
So here is the app running on my real iOS device, and I will now switch to a different app so that

163
00:12:14,080 --> 00:12:17,410
the main app is not in the foreground anymore.

164
00:12:17,530 --> 00:12:22,480
And now let's try sending a message for that here in the cloud messaging area.

165
00:12:22,480 --> 00:12:28,990
All duplicate my last notification here this test notification and under target.

166
00:12:28,990 --> 00:12:31,450
I will now also target another app.

167
00:12:31,450 --> 00:12:34,240
I will also target that iOS app here.

168
00:12:34,780 --> 00:12:39,370
Click on next, click on next and click on review.

169
00:12:39,370 --> 00:12:43,150
Now don't publish it yet because at the moment this would not work.

170
00:12:43,150 --> 00:12:44,290
I could send it.

171
00:12:44,290 --> 00:12:47,680
But actually keep in mind that we need to grant our permission first.

172
00:12:47,830 --> 00:12:53,710
That's while actually switched back to my Flutter app and instead log in real quick so that I reach

173
00:12:53,710 --> 00:12:57,040
this chat screen where I am being asked for permission.

174
00:12:58,800 --> 00:12:59,460
Here I am.

175
00:12:59,460 --> 00:13:05,100
Now I will grant this permission and now I will switch away to a different app.

176
00:13:05,490 --> 00:13:08,730
So now with the permission grant that we can click publish here.

177
00:13:11,280 --> 00:13:14,220
And I do get this push notification here.

178
00:13:14,880 --> 00:13:16,200
Does this work?

179
00:13:17,840 --> 00:13:23,660
This now is one of the notifications I have here, and if I tap on it, it opens up the Flutter chat

180
00:13:23,660 --> 00:13:24,070
app.

181
00:13:24,080 --> 00:13:31,340
So this is how we can send push notifications with help of the Firebase Cloud Messaging SDK and Service

182
00:13:31,580 --> 00:13:35,300
to flutter apps both on Android and iOS.

183
00:13:35,480 --> 00:13:39,530
Now let's see how we can handle those messages inside of the app.

