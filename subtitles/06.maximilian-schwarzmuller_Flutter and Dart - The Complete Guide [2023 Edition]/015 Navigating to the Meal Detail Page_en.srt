1
00:00:02,550 --> 00:00:04,470
So back to navigation,

2
00:00:04,470 --> 00:00:06,490
we now need a new screen.

3
00:00:06,540 --> 00:00:09,690
We need the screen that shows the details about a single recipe.

4
00:00:10,170 --> 00:00:17,340
So in the screens folder, we can add a new file and that could be the meal_detail_screen.dart

5
00:00:17,370 --> 00:00:18,350
file.

6
00:00:18,540 --> 00:00:23,490
The meal_detail_screen.dart file will unsurprisingly display the details about a single meal

7
00:00:23,700 --> 00:00:30,060
and just as before, I'll create a stateless widget in here which I'll name meal detail screen

8
00:00:30,150 --> 00:00:34,900
and as always, you know the game, we import material.dart from the Flutter package

9
00:00:35,130 --> 00:00:37,100
and just to see something on the screen,

10
00:00:37,140 --> 00:00:44,960
I'll again use a center text here where I say the meal, just to see whether we can navigate to that.

11
00:00:45,090 --> 00:00:49,350
So the MealDetailScreen should now be loaded when we tap on a meal item.

12
00:00:49,350 --> 00:00:57,540
So here in the select meal method, I want to go to that other screen and you learned that for going there,

13
00:00:57,550 --> 00:01:08,610
we can use navigator of context and then push our new screen on top of the stack.

14
00:01:08,610 --> 00:01:13,980
Now it's up to you whether you want to use a named route and register it in the main.dart file or if

15
00:01:13,980 --> 00:01:18,300
you want to use a route that you create here on the fly,

16
00:01:18,300 --> 00:01:22,730
I will go for a named route, so I will use pushNamed here

17
00:01:22,830 --> 00:01:29,570
but of course for that, we need to give this route a path and I'll do this here with a static const property.

18
00:01:29,610 --> 00:01:31,320
I explained this earlier in the module,

19
00:01:31,320 --> 00:01:38,160
this is an approach that makes sure that we don't accidentally mistype our route identifier in one part

20
00:01:38,160 --> 00:01:43,080
of our application and I'll give this a name of, what did I choose here,

21
00:01:44,590 --> 00:01:50,110
routeName, so I'll use routeName as a name for this constant here too, just to be consistent regarding

22
00:01:50,110 --> 00:01:56,980
that naming and then you can use any identifier you want, should be a string and I'll use meal-detail

23
00:01:56,980 --> 00:02:05,980
here as an identifier, /meal-detail. Let's now register this in main.dart by referring to the meal

24
00:02:06,460 --> 00:02:12,910
detail screen here and there to the routeName, for MealDetailScreen, for this class to be available

25
00:02:12,910 --> 00:02:13,140
here,

26
00:02:13,150 --> 00:02:20,230
you also need to import it and my IDE added the import but not in the format I want to have it in,

27
00:02:20,770 --> 00:02:25,570
so I'll use the relative import here pointing at the screens folder and the meal_detail_screen.dart

28
00:02:25,570 --> 00:02:32,300
file and now here, I use the routeName as a key in this map of routes and the value is this builder which

29
00:02:32,300 --> 00:02:40,760
gets the context and which should build the MealDetailScreen, like this. So with the meal detail

30
00:02:40,760 --> 00:02:47,150
screen registered as a route here, in meal item, we should be able to go there. Now first of all, we need

31
00:02:47,150 --> 00:02:52,490
the context here, so select meal should actually receive our build context.

32
00:02:52,700 --> 00:02:59,270
So when we register it here for onTap, we should actually use an anonymous function so that we can pass

33
00:02:59,270 --> 00:03:01,920
context as an argument to select meal

34
00:03:02,060 --> 00:03:05,310
and then here for pushNamed, we need to refer to the routeName,

35
00:03:05,330 --> 00:03:12,950
so here we use the meal detail screen class and for that, you need to import it into this

36
00:03:12,950 --> 00:03:18,270
meal_item.dart file too, again with the right

37
00:03:18,270 --> 00:03:27,550
import going to the screens folder and then the meal_detail_screen.dart file and with that import added,

38
00:03:27,550 --> 00:03:34,910
here I am pushing to MealDetailScreen.routeName because that's the identifier of this route.

39
00:03:34,990 --> 00:03:40,780
Of course, it would also be good to pass some data along, data about which meal was selected, so that we

40
00:03:40,780 --> 00:03:43,830
know which meal to display on the MealDetailScreen

41
00:03:44,290 --> 00:03:49,900
and for that, you learned that you can set the arguments key or argument parameter here on pushNamed

42
00:03:50,590 --> 00:03:54,190
and the argument here can be anything, can be a map, can be a string.

43
00:03:54,220 --> 00:03:59,170
Here I think it's enough if we forward the ID of the selected meal because we can then fetch all the

44
00:03:59,170 --> 00:04:03,160
data for that meal on the MealDetailScreen.

45
00:04:03,610 --> 00:04:09,130
So we should expect to get these ID here in meal item,

46
00:04:09,250 --> 00:04:13,300
so ID is another property I want to get,

47
00:04:13,390 --> 00:04:19,959
I also add it as a required property in the constructor therefore and now in the place where we use meal

48
00:04:19,990 --> 00:04:26,920
item, which is of course in the CategoryMealsScreen widget, we also have to provide the ID by accessing

49
00:04:26,920 --> 00:04:33,320
category meals for the given index and then ID and setting this as a value for the ID argument.

50
00:04:33,340 --> 00:04:38,230
Now the ID is available in the meal item and therefore now, we can use it as an argument here

51
00:04:38,350 --> 00:04:44,320
and simply forward that with pushNamed. Inside of the meal detail screen,

52
00:04:44,320 --> 00:04:51,690
we can then get this argument just as you learned it before, here in the build method, there you can

53
00:04:51,690 --> 00:04:58,980
get your arguments or your meal ID because this is the only argument we get here with modal route

54
00:04:59,580 --> 00:05:00,720
of context,

55
00:05:00,780 --> 00:05:08,200
so connecting this to the context, settings arguments and again, this gives you the arguments object which

56
00:05:08,200 --> 00:05:15,250
is attached to the incoming route, to the incoming navigation and in our case since we set it here, that's

57
00:05:15,310 --> 00:05:16,420
only the ID,

58
00:05:16,450 --> 00:05:24,420
so that's only this string here. Hence in the MealDetailScreen, we can tell Dart that this will be

59
00:05:24,420 --> 00:05:25,250
a string in the end

60
00:05:25,290 --> 00:05:31,920
with the help of as string and then maybe, also output this down there with string interpolation so

61
00:05:32,010 --> 00:05:37,730
we can see that this differs from meal to meal which we select. Let's give it a try,

62
00:05:37,740 --> 00:05:42,360
let's click on the classic hamburger now and we load that, we display this

63
00:05:42,360 --> 00:05:51,150
but what is missing on this screen, why do we have the output we have here? Because we are missing a scaffold.

64
00:05:51,150 --> 00:05:57,810
You learned that every widget which you use as a standalone page, which occupies the entire content

65
00:05:57,810 --> 00:06:03,630
of the page, so which you don't include just into other widgets, every standalone widget which you load

66
00:06:03,630 --> 00:06:10,710
through routing, which you navigate to with the navigator needs a scaffold widget because that adds the background,

67
00:06:10,950 --> 00:06:17,100
the appBar and also in general, connects the widget to our material app and to the theme set up there,

68
00:06:17,220 --> 00:06:19,480
to the fonts and so on.

69
00:06:19,530 --> 00:06:28,260
So we should return scaffold here and our body will be this centered item and besides the body, of course

70
00:06:28,260 --> 00:06:34,540
I want to have an appBar where we can set a title and for now, the title will just be the meal ID,

71
00:06:34,990 --> 00:06:41,100
we can later of course, should be a text widget though, we can later of course use the meal title there

72
00:06:41,490 --> 00:06:44,890
instead of the ID which is not that great for us humans.

73
00:06:44,910 --> 00:06:51,850
Now if we go back, that looks way better and if I select the salad, it has a different ID than the hamburgers,

74
00:06:51,930 --> 00:06:58,650
so passing the data also seems to work. And now we have a really nice navigation across multiple layers

75
00:06:58,980 --> 00:07:05,400
where we can go forth multiple times and back multiple times and where we're passing data around. The next

76
00:07:05,400 --> 00:07:10,590
step of course is to display more information about a selected meal. Before we do that however, let's

77
00:07:10,590 --> 00:07:14,900
have a look at another feature Flutter offers you when it comes to loading pages.

