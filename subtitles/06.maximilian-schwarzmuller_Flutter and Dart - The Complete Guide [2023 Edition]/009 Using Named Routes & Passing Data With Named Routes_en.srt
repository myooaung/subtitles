1
00:00:02,450 --> 00:00:08,660
Besides using navigator push like this and creating our MaterialPageRoute here, we can also set up

2
00:00:08,660 --> 00:00:10,910
so-called named routes.

3
00:00:10,920 --> 00:00:18,830
Now what's the idea behind named routes though? The bigger your app gets, the more difficult it can get

4
00:00:18,830 --> 00:00:25,180
to manage all these manual route transitions where you then create your own widgets and so on.

5
00:00:25,190 --> 00:00:31,190
This can be very cumbersome and it can be hard to see where in your app people can navigate to which

6
00:00:31,400 --> 00:00:37,010
page and most importantly, it can be difficult to see which routes and which screens your page generally

7
00:00:37,010 --> 00:00:40,000
supports and for that in the main.dart file,

8
00:00:40,070 --> 00:00:44,700
you also have more options than just setting home and then taking it from there.

9
00:00:45,020 --> 00:00:51,530
Instead, you can set up a so-called routes table with the help of the routes argument. The routes table

10
00:00:51,530 --> 00:00:59,210
takes a map and therefore, you need curly braces to create that map, where you have string keys which

11
00:00:59,270 --> 00:01:07,400
identify a route and a route is really just a screen and then the value after the colon is in the end

12
00:01:07,640 --> 00:01:16,330
your creation function for that screen. So in there, you could for example say that you want to have an

13
00:01:16,330 --> 00:01:21,830
identifier of /categories and you could have any text here,

14
00:01:21,850 --> 00:01:27,400
it's just a convention which also is taken from web development, that you have paths with slash at the

15
00:01:27,400 --> 00:01:33,090
beginning, because in web development, you would have yourpage.com/categories

16
00:01:33,100 --> 00:01:39,040
as a URL and we kind of took this and borrowed this for mobile apps but in the end, this path here

17
00:01:39,130 --> 00:01:40,290
is totally up to you,

18
00:01:40,300 --> 00:01:44,970
you could also name this ABC. But I'll go with /categories

19
00:01:45,100 --> 00:01:50,980
and now on the right side, you have your builder method where you get some context created automatically

20
00:01:50,980 --> 00:01:53,250
by Flutter as an argument,

21
00:01:53,260 --> 00:01:59,230
the context of this builder function and on the right side for example, you create your category meals

22
00:01:59,290 --> 00:02:06,190
screen and therefore maybe here as an identifier category meals, category-meals is a better identifier. So then

23
00:02:06,190 --> 00:02:12,150
we create the CategoryMealsScreen here and that means that we also should import it here of course,

24
00:02:12,160 --> 00:02:18,900
so make sure you add your relative import at the top of the main.dart file and with that, you can quickly

25
00:02:18,900 --> 00:02:25,380
see that you seem to have that route available in your app besides that default categories route. The problem

26
00:02:25,380 --> 00:02:32,070
of course is that CategoryMealsScreen wants some data. There we want to get the ID and the title of the

27
00:02:32,070 --> 00:02:33,840
category we're loading

28
00:02:33,840 --> 00:02:40,460
and this isn't really available anymore now because we expected to get this through the constructor, the

29
00:02:40,470 --> 00:02:46,350
constructor now however is called in the main.dart file and here where it's called, we have no idea about

30
00:02:46,350 --> 00:02:49,350
which ID or title the element we selected has.

31
00:02:52,170 --> 00:02:58,470
Thankfully though, Flutter also has a different mechanism of passing data between routes. Besides using

32
00:02:58,470 --> 00:03:00,310
the constructor of the screen we're loading,

33
00:03:00,390 --> 00:03:06,190
it also has its own messaging system you could say, its own system for passing data.

34
00:03:06,510 --> 00:03:11,400
So in the CategoryMealsScreen here, we can actually comment out this part,

35
00:03:11,400 --> 00:03:12,360
you could also remove it,

36
00:03:12,360 --> 00:03:17,100
I'll just leave it here for reference and instead when we load this page,

37
00:03:17,130 --> 00:03:22,360
so here in the category item, we now do two things.

38
00:03:22,480 --> 00:03:30,070
We now will not push but pushNamed instead and pushNamed does not take a MaterialPageRoute

39
00:03:30,280 --> 00:03:31,930
but it takes the path, 

40
00:03:31,960 --> 00:03:34,750
so this string identifier to which you want to push

41
00:03:35,230 --> 00:03:43,650
and that would be /category-meals and hence we should use that here inside of pushNamed but push

42
00:03:43,650 --> 00:03:46,640
named also takes 

43
00:03:46,710 --> 00:03:52,920
arguments. We can provide some arguments here which we want to pass along. Arguments here can be anything,

44
00:03:53,160 --> 00:03:59,950
it could be some text, it could be a number, it could be a map, it could be an object. In our case here,

45
00:04:01,170 --> 00:04:14,480
we could pass a map with maybe ID and that will hold as a value our ID here and then also our title, like

46
00:04:14,480 --> 00:04:15,910
this.

47
00:04:16,019 --> 00:04:23,700
So now we pass this map as arguments to the new route, to the new screen which is loaded for this route

48
00:04:23,730 --> 00:04:27,390
identifier which is leading to the CategoryMealsScreen.

49
00:04:27,390 --> 00:04:32,670
The question is, how could we now extract the data in a CategoryMealsScreen? Well in there, in the build

50
00:04:32,670 --> 00:04:40,470
method, you can extract your route arguments and store them in a variable, maybe routeArgs, by using modal

51
00:04:40,470 --> 00:04:47,560
route, another class provided by Flutter material which you also connect to your context with of

52
00:04:47,580 --> 00:04:48,560
context

53
00:04:48,580 --> 00:04:51,520
and then there, you can get information about the route

54
00:04:51,640 --> 00:04:58,200
that was loaded to display this widget so to say. You have a settings object there and there, you have

55
00:04:58,200 --> 00:05:06,770
an arguments object or your arguments key and that gives you the arguments as you pass them here

56
00:05:06,940 --> 00:05:09,480
when you pushed that named route.

57
00:05:09,550 --> 00:05:14,470
So in this case, we pushed arguments which are a map of strings.

58
00:05:14,470 --> 00:05:20,950
So here, we can also inform Flutter and Dart that whatever we get here as arguments will be of type map

59
00:05:21,220 --> 00:05:25,680
where we have string keys and string values.

60
00:05:25,720 --> 00:05:30,730
So this is how we extract the route arguments,

61
00:05:30,740 --> 00:05:38,510
now we can also get our category title here by accessing routeArgs and then as you always do it on

62
00:05:38,510 --> 00:05:47,080
maps, by using the key here in square brackets, that however should be the title of course since I

63
00:05:47,080 --> 00:05:48,970
name that category title

64
00:05:48,970 --> 00:05:54,430
and here I have the category ID, which I get with routeArgs ID, like this.

65
00:05:55,510 --> 00:06:00,010
So this is also how we can pass data around and therefore now if we do a full refresh with the green

66
00:06:00,070 --> 00:06:07,930
arrow, we should again be able to navigate and we are and we see the right title. Now of course, you might

67
00:06:07,930 --> 00:06:13,990
be wondering why you would use this more complex approach of passing data around and why you would use

68
00:06:13,990 --> 00:06:15,100
these named routes

69
00:06:15,940 --> 00:06:21,220
and the answer simply is that for bigger apps, this can be easier to manage because you have your clear

70
00:06:21,490 --> 00:06:28,560
list of available routes here in the main.dart file and it's easy to see which different areas your app

71
00:06:28,560 --> 00:06:33,890
has, which different screens can be loaded and how you may get there.

72
00:06:33,910 --> 00:06:39,430
So it's really just one option you can use to have a cleaner app which is easier to understand and to

73
00:06:39,430 --> 00:06:40,120
get into.

