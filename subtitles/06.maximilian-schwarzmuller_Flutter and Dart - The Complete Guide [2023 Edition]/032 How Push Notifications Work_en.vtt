WEBVTT
1
00:00:02.130 --> 00:00:05.670
So finally we reached push notifications.

2
00:00:05.670 --> 00:00:12.060
So those little notifications and messages that show up on your device and prompt you to go to a certain

3
00:00:12.060 --> 00:00:18.810
app in the next lectures, I'll show you how you can integrate push notifications in flutter apps and

4
00:00:18.810 --> 00:00:23.580
how we can, for example, do that in the Flutter app we built over this module.

5
00:00:23.820 --> 00:00:29.670
Now for that, let's first of all understand how push notifications actually work behind the scenes.

6
00:00:30.180 --> 00:00:34.770
We got our application and this application is running on a bunch of devices.

7
00:00:34.770 --> 00:00:42.180
So on the devices of the users who installed our app, now some event occurs, something happens.

8
00:00:42.180 --> 00:00:49.350
For example, a user sends a chat message to another user, or you as the owner of the app maybe wants

9
00:00:49.350 --> 00:00:55.680
to send out a marketing message to all your users or you have a news app and something important happened

10
00:00:55.680 --> 00:00:58.320
and you want to let your users know about that.

11
00:00:58.320 --> 00:01:04.920
These are typical reasons for why you might want to send a push notification, and these are probably

12
00:01:04.920 --> 00:01:09.000
the push notification types, you know, from the apps you're using.

13
00:01:09.630 --> 00:01:15.750
So the natural thing would be that you come up with the message you want to send, the short text you

14
00:01:15.750 --> 00:01:21.600
want to send, for example, and you then send this message somehow to a device.

15
00:01:22.050 --> 00:01:23.910
Yeah, that's roughly how it works.

16
00:01:23.910 --> 00:01:26.460
But the somehow part is important.

17
00:01:26.490 --> 00:01:33.690
You as the app developer or as any developer, can't just directly send a message to a device.

18
00:01:33.690 --> 00:01:38.430
You can't directly send messages to devices that is really important.

19
00:01:38.700 --> 00:01:42.450
Instead, of course, Apple and Google.

20
00:01:42.450 --> 00:01:52.110
So the owners of iOS and Android want to control who's able to send notifications to devices to avoid

21
00:01:52.110 --> 00:01:54.450
abuse and security issues.

22
00:01:54.600 --> 00:02:01.200
And therefore you have to use official push notifications, servers and or protocols.

23
00:02:01.200 --> 00:02:07.920
That means that you can't just go ahead and write your own server side code that directly targets devices.

24
00:02:07.920 --> 00:02:14.790
Instead, you have to use official servers and protocols, and this is required by Google and by Apple

25
00:02:14.790 --> 00:02:23.550
to ensure that only you as the developer of an app can send notifications to users who got your app

26
00:02:23.550 --> 00:02:29.430
installed so that you can't target any other users with any other device that don't even have your app

27
00:02:29.430 --> 00:02:33.330
and that no one else can send messages to your users.

28
00:02:33.420 --> 00:02:40.980
Therefore, these push notification servers or these protocols which you have to use require ID.

29
00:02:40.980 --> 00:02:49.380
So a used app developer needs to kind of link your app to those notification servers and let Google

30
00:02:49.380 --> 00:02:53.400
and Apple know that you plan on using push notifications.

31
00:02:53.400 --> 00:02:55.500
So you have to be very clear here.

32
00:02:56.390 --> 00:03:03.020
Now once all of that is set up and of course, I will show you how that set up works for both Android

33
00:03:03.020 --> 00:03:04.840
and iOS in this module.

34
00:03:04.850 --> 00:03:12.350
So once that is all set up, you can now point your event at such an official push notification server

35
00:03:12.500 --> 00:03:19.250
and draft your message in conjunction with that and let the server know which message should be sent

36
00:03:19.250 --> 00:03:20.750
out to which devices.

37
00:03:20.750 --> 00:03:27.710
And then the server will go ahead and do that for you, and it will then send that message and deliver

38
00:03:27.710 --> 00:03:31.440
that message to the devices you told it to send it to.

39
00:03:31.460 --> 00:03:35.030
This is how push notifications work behind the scenes.

40
00:03:35.480 --> 00:03:41.540
Now, how does this now translate to our Firebase setup, which we have thus far, where we're using

41
00:03:41.540 --> 00:03:47.660
authentication, firestorm, cloud storage, security rules and all those beautiful things we added

42
00:03:47.660 --> 00:03:49.010
over the last lectures.

43
00:03:49.800 --> 00:03:51.180
Well there.

44
00:03:51.180 --> 00:03:59.760
The great thing is that Firebase also has a cloud messaging service which you can use for both Android

45
00:03:59.760 --> 00:04:01.290
and iOS apps.

46
00:04:01.290 --> 00:04:04.490
And for Android apps, you actually have to use it.

47
00:04:04.500 --> 00:04:05.430
There it is.

48
00:04:05.430 --> 00:04:09.930
The official push notification service for Android and for iOS.

49
00:04:09.930 --> 00:04:15.510
You can also use it and it then behind the scenes uses Apple's push notification service.

50
00:04:15.510 --> 00:04:16.260
You could say.

51
00:04:16.260 --> 00:04:23.070
So therefore the Firebase Cloud Messaging Service is a great choice, even if you're otherwise not using

52
00:04:23.070 --> 00:04:23.850
Firebase.

53
00:04:23.850 --> 00:04:30.420
And you don't need to use any other Firebase service to still use Firebase Cloud messaging.

54
00:04:30.420 --> 00:04:37.500
So you can always use the Firebase Push Notification Service for iOS and Android, even if you use no

55
00:04:37.500 --> 00:04:40.380
other Firebase Service, that's really important.

56
00:04:40.860 --> 00:04:46.740
So this Firebase Cloud Messaging Service is an important piece and it nicely works together with the

57
00:04:46.740 --> 00:04:52.320
Firebase Messaging Flutter SDK, which you install in your app, which you use in your app code.

58
00:04:52.320 --> 00:04:58.650
It works together with that to exchange push notifications and they offer Firebase Cloud messaging as

59
00:04:58.650 --> 00:05:05.790
an official push notification server or service integrates nicely into that entire Flutter Firebase

60
00:05:05.790 --> 00:05:06.900
ecosystem.

61
00:05:07.050 --> 00:05:12.690
But again, let me make it clear that you don't need to use any other Firebase Service and that you

62
00:05:12.690 --> 00:05:17.040
also don't need to use Flutter just to use Firebase Cloud Messaging.

63
00:05:17.040 --> 00:05:22.500
You can also use it with other native libraries for Android or iOS apps that don't use Flutter.

64
00:05:22.500 --> 00:05:27.000
But since this is a Flutter course, of course I'll focus on the Flutter integration.

65
00:05:27.510 --> 00:05:30.540
So this is how this will work behind the scenes.

66
00:05:30.540 --> 00:05:36.120
This is what we will use to deliver push notifications to our Flutter app.

67
00:05:36.270 --> 00:05:39.810
And with that, let's see how we get started with that.

