WEBVTT
1
00:00:02.200 --> 00:00:04.730
So we're fetching products here on our shop page.

2
00:00:04.750 --> 00:00:06.910
And what about managed products now?

3
00:00:06.939 --> 00:00:12.550
The good thing is in this app, we technically can't really get to manage products without having been

4
00:00:12.550 --> 00:00:18.820
to the shop page first since we fetch our products here and we then store them in items in our products

5
00:00:18.820 --> 00:00:19.840
class here.

6
00:00:20.290 --> 00:00:25.690
When we reach manage products, which uses the same items, we are guaranteed to have products.

7
00:00:25.690 --> 00:00:28.960
So we don't really need to fetch products when we reach this page, though.

8
00:00:28.990 --> 00:00:32.490
Of course, theoretically you could do that here on the user product page.

9
00:00:32.500 --> 00:00:34.870
You could turn this into a stateful widget as well.

10
00:00:34.870 --> 00:00:41.180
And then also use did change dependencies here or the init state hack to load products here as well.

11
00:00:41.200 --> 00:00:42.970
But as I said, I don't need it here.

12
00:00:43.120 --> 00:00:46.450
But there is one other thing which we could add here.

13
00:00:46.780 --> 00:00:52.450
It would be nice to have a pull to refresh logic here where we can pull the screen down to fetch the

14
00:00:52.450 --> 00:00:56.380
latest set of products or the latest values from the web.

15
00:00:56.380 --> 00:01:02.260
And such a pull to refresh pattern is relatively easy to implement in flutter.

16
00:01:02.960 --> 00:01:07.880
All you have to do is you have to go to the widget where you want to have that pattern, then to your

17
00:01:07.880 --> 00:01:09.500
body there in the scaffold.

18
00:01:09.500 --> 00:01:15.080
And then here in this case around the padding, you wrap this with a new widget and that new widget

19
00:01:15.080 --> 00:01:17.630
here is a refresh indicator.

20
00:01:17.630 --> 00:01:23.090
And now for widget that's built into flutter, the refresh indicator takes a child around which you

21
00:01:23.090 --> 00:01:27.830
wrap it and then you need to define on refresh function.

22
00:01:27.830 --> 00:01:33.140
So this takes a function of function which gets no arguments but which has to return a future.

23
00:01:33.140 --> 00:01:34.190
And that's important.

24
00:01:34.190 --> 00:01:41.030
And this function has to return a future so that the refresh indicator widget knows when you're done

25
00:01:41.030 --> 00:01:46.010
fetching data because it will show a spinner automatically the mean time and it needs to know when to

26
00:01:46.010 --> 00:01:47.000
dismiss this.

27
00:01:47.360 --> 00:01:52.820
So here you can either use a named function and point at that, and actually I'll do that or use an

28
00:01:52.820 --> 00:01:53.960
anonymous function.

29
00:01:53.960 --> 00:01:59.300
But here I'll use a named function which has to return a future which yields nothing in the end.

30
00:01:59.300 --> 00:02:04.850
That's important, and I'll turn this into a private function which is only available inside of this

31
00:02:04.850 --> 00:02:10.160
class, and I'll name this refresh products.

32
00:02:10.160 --> 00:02:11.900
The name is totally up to you, of course.

33
00:02:12.110 --> 00:02:15.140
And in there you now have to return a future.

34
00:02:16.060 --> 00:02:18.760
Now that can be done by turning it into a async function.

35
00:02:18.760 --> 00:02:21.060
Then you'll learn this will always return a future.

36
00:02:21.070 --> 00:02:24.430
But of course I want to return a meaningful future that really does something.

37
00:02:24.430 --> 00:02:26.620
And for that we can use provider.

38
00:02:27.510 --> 00:02:34.650
For which you need to have to provider package imported off and then connect it to products of context

39
00:02:34.650 --> 00:02:36.810
and then also call fetch and set products.

40
00:02:36.810 --> 00:02:37.500
Of course.

41
00:02:38.070 --> 00:02:44.370
Now to have the context here, since I'm not in a state class here, I don't have it available everywhere.

42
00:02:44.370 --> 00:02:50.520
So here I need to now get this as an input, as an argument here in refresh products.

43
00:02:50.910 --> 00:02:56.370
So now here I can call, fetch and set products and then we simply await for this to finish.

44
00:02:56.400 --> 00:03:02.070
Therefore, this overall method will only be done once this is done, and only then this future which

45
00:03:02.070 --> 00:03:04.170
is automatically returned, will yield.

46
00:03:04.170 --> 00:03:05.250
Will resolve.

47
00:03:07.160 --> 00:03:09.750
And with that, we're fetching our new products here.

48
00:03:09.770 --> 00:03:14.180
So now down there, we could now point at refresh.

49
00:03:14.570 --> 00:03:16.670
Whoops, products lost the name.

50
00:03:16.670 --> 00:03:23.000
But actually, since I need my contacts there, I need to pass that in and therefore I will wrap this

51
00:03:23.000 --> 00:03:28.640
in a non in an anonymous function which reference is now stored in on refresh.

52
00:03:28.640 --> 00:03:35.720
And inside of that anonymous function, I return a call to refresh products where I can now forward

53
00:03:35.720 --> 00:03:39.680
the context, the context I'm getting here in the build method automatically.

54
00:03:41.180 --> 00:03:45.220
Now, one additional note about the way we're fetching our products here.

55
00:03:45.230 --> 00:03:54.740
We should actually add lesson falls here in the refresh products method to ensure that this method which

56
00:03:54.740 --> 00:03:57.860
we're calling on our provider is being called.

57
00:03:57.860 --> 00:04:03.920
But we're not setting up a listener here because we don't really want to listen to updates in products

58
00:04:03.920 --> 00:04:05.270
here in this method.

59
00:04:05.270 --> 00:04:09.140
We just want to trigger the fetch and set products method.

60
00:04:09.290 --> 00:04:15.620
Therefore, I'm calling it here and I'm adding lists and falls here to avoid any problems with that.

61
00:04:15.650 --> 00:04:21.140
This is something we didn't add thus far, but something you should add in your code in this refresh

62
00:04:21.140 --> 00:04:25.160
products method to avoid unnecessary widget rebuilds.

63
00:04:25.670 --> 00:04:26.930
That should already be everything.

64
00:04:26.930 --> 00:04:32.480
If I save this here, our products are lost because due to this hot reload our state gets cleared.

65
00:04:32.480 --> 00:04:37.580
But that's good actually, because that allows me to demonstrate that fetching here I can now pull down

66
00:04:37.580 --> 00:04:39.980
and you see that indicator up here here.

67
00:04:39.980 --> 00:04:46.010
And if you pull down long enough or far enough, you see that starts loading and as soon as the data

68
00:04:46.010 --> 00:04:48.230
is there, that spinner disappears.

69
00:04:48.230 --> 00:04:53.900
So that's the refresh indicator and that pull to refresh pattern, which as you see is pretty easy to

70
00:04:53.900 --> 00:04:54.560
implement.

