1
00:00:02,090 --> 00:00:06,920
So having the button is good, but of course we want to actually add a new transaction when we press

2
00:00:06,920 --> 00:00:07,310
it.

3
00:00:07,400 --> 00:00:10,400
And for that we first of all need to collect the user input.

4
00:00:10,430 --> 00:00:15,410
It's good that we have these text fields, but how can we get access to what the user entered?

5
00:00:16,010 --> 00:00:18,330
There are two ways of getting access.

6
00:00:18,350 --> 00:00:19,940
It's up to you which one you choose.

7
00:00:19,940 --> 00:00:23,120
It all depends on the complexity of the form you're building.

8
00:00:23,540 --> 00:00:29,390
The first way of getting access is that you simply save the user input with every keystroke that you

9
00:00:29,390 --> 00:00:31,910
save it in a property.

10
00:00:32,360 --> 00:00:38,660
Now for that, we need a property in which we can save it and we can add it here to our widget.

11
00:00:38,660 --> 00:00:41,630
But keep in mind that this is a stateless widget.

12
00:00:41,630 --> 00:00:42,860
And what does this mean?

13
00:00:43,460 --> 00:00:49,280
It means that any data we have in there, like the Transaction's property, is immutable.

14
00:00:49,280 --> 00:00:50,470
We can't change it.

15
00:00:50,480 --> 00:00:57,740
Well, technically we can change it, but our changes will never be reflected on the user interface.

16
00:00:58,220 --> 00:01:04,280
Now, actually, here that wouldn't be a problem because with every keystroke we could save the data

17
00:01:04,280 --> 00:01:09,290
the user entered and then only do something once we hit a button.

18
00:01:09,290 --> 00:01:15,860
So it's actually okay if we just save these changes without updating the user interface because there

19
00:01:15,860 --> 00:01:16,730
is no update.

20
00:01:16,730 --> 00:01:18,500
We want to perform with every keystroke.

21
00:01:18,500 --> 00:01:20,780
We just want to save the data behind the scenes.

22
00:01:20,780 --> 00:01:26,090
And we can't do that because a stateless widget is still an object, still a normal class.

23
00:01:26,090 --> 00:01:28,520
So we can have properties in there which we can change.

24
00:01:28,520 --> 00:01:30,710
We just can't rerun the build method.

25
00:01:30,710 --> 00:01:32,570
We can't use set state here.

26
00:01:32,570 --> 00:01:34,220
But again, that won't be needed.

27
00:01:34,990 --> 00:01:43,540
So what you can do, therefore, is you can add new properties here to your class, maybe.

28
00:01:45,440 --> 00:01:51,200
A string title input and another string amount input.

29
00:01:51,200 --> 00:01:52,570
That's, by the way, important.

30
00:01:52,580 --> 00:01:57,230
The input values are always strings by default.

31
00:01:57,230 --> 00:02:02,840
If you need a different value, like a number here for the amount, then you need to convert it manually.

32
00:02:03,990 --> 00:02:05,820
So we have these two strings.

33
00:02:06,060 --> 00:02:11,460
And now if we go down to our text fields there, you can add the on changed listener.

34
00:02:11,820 --> 00:02:15,120
Now on change will fire with every keystroke.

35
00:02:15,330 --> 00:02:15,990
As you see.

36
00:02:15,990 --> 00:02:21,390
You have a couple of other listeners too on editing complete as far as when the user presses the done

37
00:02:21,390 --> 00:02:24,990
go or next or whatever it is button in the soft keyboard.

38
00:02:24,990 --> 00:02:29,520
So that would basically be that button in the bottom right corner that can have a different look and

39
00:02:29,670 --> 00:02:30,270
meaning.

40
00:02:30,270 --> 00:02:35,700
And you can configure that actually, by the way, you can ignore this here for now, this strange yellow

41
00:02:35,700 --> 00:02:36,330
thing here.

42
00:02:36,690 --> 00:02:39,180
So that is on editing complete.

43
00:02:39,270 --> 00:02:42,660
It's fired when that button is pressed on submitted, it's kind of related.

44
00:02:42,660 --> 00:02:49,740
But this virus, whenever the done button is pressed, so not on every button in the bottom right corner

45
00:02:49,740 --> 00:02:51,870
basically, but only for that done button.

46
00:02:51,870 --> 00:02:56,430
And if you configured your text field to show a different button there, then it would not fire and

47
00:02:56,460 --> 00:02:59,400
on tap is fired whenever you tap into the text field.

48
00:02:59,790 --> 00:03:06,990
Now here we need unchanged because unchanged fires for every keystroke on change then requires us to

49
00:03:06,990 --> 00:03:11,850
pass a reference, a pointer at a function which takes a string value.

50
00:03:11,850 --> 00:03:17,340
So not a function that has no arguments, but a function that accepts exactly one argument which is

51
00:03:17,340 --> 00:03:20,280
of type string and that then returns nothing.

52
00:03:20,580 --> 00:03:25,410
You can use a named function here or you define an anonymous function.

53
00:03:25,410 --> 00:03:30,930
However, as it just explained, it needs to be a function which takes a value.

54
00:03:31,200 --> 00:03:37,500
You don't need to add the type here because DART is smart enough to infer this because Unchanged expects

55
00:03:37,500 --> 00:03:39,900
a function that takes a string argument.

56
00:03:40,170 --> 00:03:44,130
Dart automatically understands that value here will be of type string.

57
00:03:44,130 --> 00:03:45,780
You also don't have to name this value.

58
00:03:45,780 --> 00:03:47,460
You can name it value whatever you want.

59
00:03:47,940 --> 00:03:49,500
So now we get this.

60
00:03:49,510 --> 00:03:50,610
We have this function.

61
00:03:50,610 --> 00:03:52,590
It will be triggered for every keystroke.

62
00:03:52,590 --> 00:03:58,980
And then in here, since we're editing the title here, we can set title input equal to Val.

63
00:03:58,980 --> 00:04:05,700
So that means we override the current value of title input with the input the user chose here.

64
00:04:05,700 --> 00:04:09,900
So with the current input of that text input of the text field.

65
00:04:10,490 --> 00:04:17,750
We can do the same for the amount add on changed here gets the value and then we can also use that shorter

66
00:04:17,750 --> 00:04:24,860
notation with the arrow because we have only one expression there, we can set amount input equal to

67
00:04:24,860 --> 00:04:25,400
Val.

68
00:04:26,460 --> 00:04:33,960
With that, we have a setup where we register every keystroke and now we save that in our title input

69
00:04:33,960 --> 00:04:35,760
and in the amount input.

70
00:04:36,270 --> 00:04:41,670
Again, the UI won't be updated because we're not calling set state and we couldn't call it because

71
00:04:41,670 --> 00:04:42,780
we're in a stateless widget.

72
00:04:42,780 --> 00:04:44,670
But that's not required here.

73
00:04:45,530 --> 00:04:47,060
To prove that it worked here.

74
00:04:47,060 --> 00:04:54,020
When we pressed that ADD transaction button, I will print the title input so the value is stored in

75
00:04:54,020 --> 00:04:56,870
there and also the amount input.

76
00:04:57,380 --> 00:04:58,850
Let's save all of that.

77
00:04:59,520 --> 00:05:04,680
And again, you can't ignore this yellow black thing here at the bottom.

78
00:05:04,680 --> 00:05:07,110
I will explain what's up with that later.

79
00:05:07,140 --> 00:05:16,290
And for the moment, we can enter some amount here like 12.99 and here we can enter a title like.

80
00:05:17,300 --> 00:05:20,600
Test and you could use your physical keyboard for this too.

81
00:05:20,720 --> 00:05:28,250
If you then hit add transaction, you see test and 1299 output here because these values were saved

82
00:05:28,250 --> 00:05:31,620
with every keystroke and therefore we can also use them.

83
00:05:31,640 --> 00:05:36,320
The only thing we can't do right now is update our user interface based on that.

84
00:05:37,680 --> 00:05:40,890
Registering the input on every keystroke is perfectly fine.

85
00:05:41,040 --> 00:05:47,850
However, here, Flutter actually complains or gives us a warning that this my home page class which

86
00:05:47,850 --> 00:05:55,230
is marked as immutable that's basically a flag to stateless widget sets, has a field, a property which

87
00:05:55,230 --> 00:05:56,820
changes or which is not final.

88
00:05:56,820 --> 00:05:57,390
And that's true.

89
00:05:57,390 --> 00:05:59,490
Title input and amount input are not final.

90
00:05:59,490 --> 00:06:00,810
They can change.

91
00:06:00,840 --> 00:06:04,050
And actually the case we have here is a pretty niche case.

92
00:06:04,080 --> 00:06:09,720
Normally you don't have changeable properties in a stateless widget because you can't update the UI

93
00:06:09,750 --> 00:06:11,460
based on these changes anyways.

94
00:06:11,640 --> 00:06:16,620
This is one of the rare cases where we save some data and where we are perfectly fine with that having

95
00:06:16,620 --> 00:06:19,110
no direct impact on the user interface.

96
00:06:19,380 --> 00:06:25,350
Still, you might want to consider turning this entire widget into a stateful widget to get rid of that

97
00:06:25,350 --> 00:06:32,940
warning and also to avoid an error which will run into later, or a little issue which will run into

98
00:06:32,940 --> 00:06:34,950
later, which I will fix later though.

99
00:06:34,950 --> 00:06:37,320
So we'll then see how to work around that.

100
00:06:37,650 --> 00:06:42,540
Nonetheless, for the moment, this will work and we can leave it like this for the moment.

101
00:06:43,560 --> 00:06:45,630
Now we'll have a problem anyways.

102
00:06:45,660 --> 00:06:48,430
I of course, don't just want to print my results here.

103
00:06:48,450 --> 00:06:56,040
I want to create a new element or a new transaction, and that in the end should then also lead to some

104
00:06:56,040 --> 00:07:01,920
output on the screen, because transactions our list here should then actually change and hold that

105
00:07:01,920 --> 00:07:03,090
new transaction.

106
00:07:03,210 --> 00:07:04,170
So.

107
00:07:05,490 --> 00:07:08,370
We'll have to switch to a stateful widget at some point.

108
00:07:08,370 --> 00:07:09,270
Anyways.

109
00:07:09,600 --> 00:07:15,630
Before we do so, however, let me first of all show you an alternative to registering this manually

110
00:07:15,630 --> 00:07:16,750
on every keystroke.

111
00:07:16,770 --> 00:07:21,900
Whilst you can do this, and whilst this is especially useful, if you have more complex logic that

112
00:07:21,900 --> 00:07:26,700
you maybe want to run on, every keystroke flutter actually has a built in mechanism that allows you

113
00:07:26,700 --> 00:07:31,290
to listen to every keystroke and then get the finished value once you're done.

114
00:07:31,440 --> 00:07:36,810
For that, I'll comment out the title input and amount input and I'll add two new properties which now

115
00:07:36,810 --> 00:07:46,530
are final, and that is the title controller, which is created with a value of text editing controller

116
00:07:46,650 --> 00:07:51,870
and it's the amount controller, which is also a text editing controller.

117
00:07:51,990 --> 00:07:59,100
Text editing controller is a class provided by Flutter and you can assign such a controller to your

118
00:07:59,100 --> 00:08:02,520
text fields with the help of the controller argument.

119
00:08:02,580 --> 00:08:09,660
So now to the title text field, I add my title controller and to the amount text field.

120
00:08:09,660 --> 00:08:13,290
Here I'll add my amount controller.

121
00:08:13,680 --> 00:08:15,990
Now what do these controllers do?

122
00:08:17,280 --> 00:08:22,920
Flutter automatically connects to controllers with our text field and these controllers listen to the

123
00:08:22,920 --> 00:08:25,140
user input and save the user input.

124
00:08:25,200 --> 00:08:31,920
And therefore here in on pressed we can then print title controller dot text to get access to that saved

125
00:08:31,920 --> 00:08:32,520
text.

126
00:08:33,059 --> 00:08:41,159
Hence now if I go back and I type something here and I had done and I then add transaction, I see test

127
00:08:41,159 --> 00:08:41,700
here.

128
00:08:41,850 --> 00:08:46,800
So this is of course a more convenient way because you don't have to manually write a function that

129
00:08:46,800 --> 00:08:49,260
takes a value and just saves it in a property.

130
00:08:49,260 --> 00:08:55,230
And in addition, as an extra benefit, this is now also a solution because these properties are final

131
00:08:55,230 --> 00:08:58,110
and the heavy lifting of saving stuff is done by flutter.

132
00:08:58,110 --> 00:09:01,770
This is now a solution flutter all the likes in a stateless widget.

133
00:09:05,250 --> 00:09:10,950
Nonetheless, the days of us using a stateless widget, or at least of only using stateless widgets

134
00:09:11,070 --> 00:09:12,870
are coming to an end.

135
00:09:12,870 --> 00:09:18,510
Because we will have to change this to a stateful widget in order to update our list of transactions

136
00:09:18,510 --> 00:09:24,630
and reflect that change on the user interface, where of course, for every new transaction, a new

137
00:09:24,630 --> 00:09:27,000
transaction card should be output down there.

