WEBVTT
1
00:00:02.190 --> 00:00:03.600
So time to finish this up.

2
00:00:03.600 --> 00:00:09.330
Now that we got an up and running function, let's make sure we actually utilize the Firebase Admin

3
00:00:09.330 --> 00:00:15.600
package, which we can use in our function to send a push notification for that, we first of all need

4
00:00:15.600 --> 00:00:17.130
to import it.

5
00:00:17.130 --> 00:00:23.580
And in JavaScript we do this by adding a constant so a variable that can't be changed with any name

6
00:00:23.580 --> 00:00:24.270
of your choice.

7
00:00:24.270 --> 00:00:30.420
And then we use require to in this case, import firebase admin.

8
00:00:31.200 --> 00:00:36.780
So here I repeat the package name which you all find here in the package dot json file.

9
00:00:37.050 --> 00:00:43.290
Now this is in the end a package that gives us administration privileges in our function, and we need

10
00:00:43.290 --> 00:00:47.250
those to send a message or to send push notifications.

11
00:00:47.820 --> 00:00:51.140
Now you can send push notifications in different ways.

12
00:00:51.150 --> 00:00:54.570
You can target individual devices, for example.

13
00:00:55.290 --> 00:00:55.860
For that.

14
00:00:55.860 --> 00:00:57.330
And your flutter code.

15
00:00:58.390 --> 00:01:04.360
With help of that Firebase messaging object, which we used to get the permissions and to configure

16
00:01:04.360 --> 00:01:07.960
our handlers, you can get the device token.

17
00:01:10.210 --> 00:01:11.800
With Get token.

18
00:01:12.070 --> 00:01:18.580
This is a token which you would have to send to a server to store it in some database and anyone who

19
00:01:18.580 --> 00:01:19.660
has that token.

20
00:01:19.660 --> 00:01:25.870
So if that is stored in your server side database, can use that token to send a notification to it.

21
00:01:25.990 --> 00:01:32.380
So you can send notifications to a specific devices with help of those device tokens.

22
00:01:32.920 --> 00:01:39.040
So you can get this token and use that to send messages to specific devices, for example, that might

23
00:01:39.040 --> 00:01:44.320
be useful if two people are chatting with each other, then you would store the device token of every

24
00:01:44.320 --> 00:01:46.240
participant in your database.

25
00:01:46.240 --> 00:01:53.470
And whenever Participant A sends a message to Participant B, you would grab the token of participant

26
00:01:53.470 --> 00:01:56.650
B and send a push notification to him or her.

27
00:01:56.680 --> 00:01:58.120
So that is one option.

28
00:01:58.270 --> 00:02:02.860
But you also can do something else with the Firebase package here.

29
00:02:02.860 --> 00:02:08.710
With the Firebase messaging package in Flutter, you can also subscribe to a topic.

30
00:02:09.490 --> 00:02:14.320
And that topic is simply a string identifier and it can be anything of your choice.

31
00:02:14.320 --> 00:02:15.850
For example, chat.

32
00:02:16.330 --> 00:02:18.360
And this will do what the name implies.

33
00:02:18.370 --> 00:02:21.040
This will subscribe to such a topic.

34
00:02:21.040 --> 00:02:25.870
And now any notification sent to such a topic will reach this device.

35
00:02:25.870 --> 00:02:30.830
And you can target topics with the Firebase Admin SDK too.

36
00:02:30.850 --> 00:02:35.440
So I will subscribe to this topic here to the chat topic here.

37
00:02:36.310 --> 00:02:42.070
And with that, we should receive any push notifications sent to this topic on this device.

38
00:02:42.610 --> 00:02:44.860
So now back in our index case file.

39
00:02:44.860 --> 00:02:52.690
So in that cloud function, we want to send a new notification to this topic, and we do this by calling

40
00:02:52.690 --> 00:02:53.530
admin.

41
00:02:54.350 --> 00:02:57.020
That's our admin and SDK object here.

42
00:02:57.140 --> 00:03:04.520
And then their messaging, which you execute as a function and then they're send and you get a send

43
00:03:04.520 --> 00:03:08.360
to topic function assigned to topic method here which you can use.

44
00:03:08.570 --> 00:03:10.490
And this does just what the name implies.

45
00:03:10.490 --> 00:03:13.490
It sends a message to a specific topic.

46
00:03:14.220 --> 00:03:15.540
So here you.

47
00:03:15.540 --> 00:03:20.370
Then first enter your topic identifier, which of course should be the same one as in the Flutter app.

48
00:03:20.370 --> 00:03:21.990
So here it will use chat.

49
00:03:22.260 --> 00:03:24.960
And then the second argument is your payload.

50
00:03:25.410 --> 00:03:31.590
So basically the data you want to send that should be a JavaScript object which you create with such

51
00:03:31.590 --> 00:03:32.730
curly braces.

52
00:03:32.850 --> 00:03:37.050
And in there you can choose whether it's a data message or a notification.

53
00:03:37.380 --> 00:03:42.300
Now, I mentioned earlier that the notification is what we want here, so I'll choose notification,

54
00:03:42.300 --> 00:03:45.270
and that itself uses an object as a value.

55
00:03:45.570 --> 00:03:50.670
So you have notification and then a colon, and then you assign the value for that notification.

56
00:03:50.670 --> 00:03:59.250
So the object that describes this notification and in there we can add a title and I want to use the

57
00:03:59.250 --> 00:04:03.420
name of the user who sent the message as a title.

58
00:04:03.420 --> 00:04:11.940
So I will access snapshot data and then there we saw in our log if I go back to that.

59
00:04:12.680 --> 00:04:15.980
That we can access the username field to get that username.

60
00:04:16.730 --> 00:04:19.850
So I will access username here as my title.

61
00:04:21.459 --> 00:04:25.930
And we can also set up a body, which is the main message, and that should be the message the users

62
00:04:25.930 --> 00:04:26.290
send.

63
00:04:26.290 --> 00:04:28.180
So here I will use the text.

64
00:04:29.550 --> 00:04:30.920
So therefore here it's now.

65
00:04:30.930 --> 00:04:31.890
Snapshot.

66
00:04:31.890 --> 00:04:32.710
Data.

67
00:04:32.730 --> 00:04:33.660
Text.

68
00:04:36.000 --> 00:04:37.760
So this should be my notification.

69
00:04:37.770 --> 00:04:41.400
There is more you can set and you can again.

70
00:04:41.400 --> 00:04:44.550
As always, check out the official docs to learn all about that.

71
00:04:44.760 --> 00:04:52.410
I will just set the click action here and set this to this flutter notification thing, which we did

72
00:04:52.410 --> 00:04:54.140
have to set up earlier as well.

73
00:04:54.150 --> 00:04:59.340
So to this flutter notification click identifier here as a string.

74
00:05:00.920 --> 00:05:07.130
So that should send a message and this returns a promise, and that makes this entire process the ideal

75
00:05:07.130 --> 00:05:09.320
return value of our function.

76
00:05:09.320 --> 00:05:13.910
This ensures that the function will keep on running until this message here.

77
00:05:13.910 --> 00:05:16.280
This notification has been scheduled.

78
00:05:16.910 --> 00:05:24.680
So with that, if we now save this, we can redeploy our Firebase function with Firebase Deploy and

79
00:05:24.680 --> 00:05:30.230
we can also kill the Running Flutter app and restart that Flutter app now that we made sure that we

80
00:05:30.230 --> 00:05:35.750
subscribe to the chat topic there to see whether that all works the way it should.

81
00:05:36.960 --> 00:05:37.530
For that.

82
00:05:37.530 --> 00:05:43.530
I'll not just launch the app here on Android, but I'll also stop this again and now select my real

83
00:05:43.530 --> 00:05:48.990
iPhone device again so that I also run the latest version on that device and launch the app there as

84
00:05:48.990 --> 00:05:49.530
well.

85
00:05:51.020 --> 00:05:52.660
And here's the app running there.

86
00:05:52.670 --> 00:05:58.160
I'm already getting asked whether I want to allow getting push notifications, so I will confirm this

87
00:05:58.160 --> 00:05:58.700
here.

88
00:05:59.610 --> 00:06:01.830
So here's the app up and running.

89
00:06:02.710 --> 00:06:08.020
And now that both apps are up and running, let's verify whether that all works.

90
00:06:08.560 --> 00:06:14.200
For that, I'll put the Android app in background and send a message from my iOS device.

91
00:06:17.630 --> 00:06:21.200
And see whether that triggers a push notification on Android.

92
00:06:22.660 --> 00:06:24.760
And that's not happening.

93
00:06:24.790 --> 00:06:28.120
And in the Firebase Cloud Function Console here we see why.

94
00:06:28.570 --> 00:06:30.610
Because the default Firebase app does not exist.

95
00:06:30.610 --> 00:06:34.690
Make sure to call initialize app before using the Firebase services.

96
00:06:35.290 --> 00:06:38.140
Little mistake from my side here in index JS.

97
00:06:38.530 --> 00:06:43.720
Before we use the admin SDK, we should call initialize app on it just like this.

98
00:06:43.750 --> 00:06:46.510
That's one tiny extra line that makes a huge difference.

99
00:06:46.510 --> 00:06:50.860
You should add it and thereafter just redeploy with Firebase Deploy again.

100
00:06:50.860 --> 00:06:53.200
Now you don't need to rebuild your flutter apps.

101
00:06:53.200 --> 00:06:54.580
It has nothing to do with that.

102
00:06:54.580 --> 00:06:59.410
You just need to add this line to the cloud function and redeploy it.

103
00:06:59.410 --> 00:07:03.760
And once the deployment process is finished, let's test this again.

104
00:07:04.410 --> 00:07:06.230
So the function redeployed.

105
00:07:06.240 --> 00:07:09.990
So if I'm back here, let's try another.

106
00:07:12.620 --> 00:07:13.550
Test your.

107
00:07:14.860 --> 00:07:16.300
And send that.

108
00:07:19.790 --> 00:07:21.470
And now it looks much better.

109
00:07:21.680 --> 00:07:24.890
Here you see Maximillian and never tested.

110
00:07:24.890 --> 00:07:28.840
If I click on that, I'm of course taken to the chat app, so that's great.

111
00:07:28.850 --> 00:07:31.310
Now let's try the other direction.

112
00:07:32.980 --> 00:07:39.700
And for that I am switching to another app here on the iPhone so that again, the main app is running

113
00:07:39.700 --> 00:07:40.630
in the background.

114
00:07:42.450 --> 00:07:44.460
And now I'll send a notification here.

115
00:07:44.790 --> 00:07:46.920
Notification or.

116
00:07:47.760 --> 00:07:49.980
Message from Android.

117
00:07:53.090 --> 00:07:57.230
And let's see if we get this message coming up here on the iPhone.

118
00:07:57.410 --> 00:07:58.330
Here it is.

119
00:07:58.340 --> 00:08:01.370
So here we see the sender and the message.

120
00:08:03.300 --> 00:08:08.190
And of course, here, if I expand this and tap on it, the app here is also reopened.

121
00:08:08.280 --> 00:08:12.240
So that works on both devices, as you can tell.

122
00:08:12.240 --> 00:08:18.450
And that is how push notifications work and how you can trigger them both manually through the cloud

123
00:08:18.450 --> 00:08:24.720
messaging console here in the web, as well as programmatically through some server side code, for

124
00:08:24.720 --> 00:08:31.080
example, here with the Firebase Cloud Function Code and especially if you're using all the other Firebase

125
00:08:31.080 --> 00:08:37.710
services, you see that they're nicely integrating into each other, that they're very easy to connect,

126
00:08:37.710 --> 00:08:43.650
and that you can build quite amazing apps with little effort and not that much code.

