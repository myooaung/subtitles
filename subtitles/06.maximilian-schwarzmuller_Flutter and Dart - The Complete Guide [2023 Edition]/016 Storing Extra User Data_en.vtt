WEBVTT
1
00:00:02.310 --> 00:00:08.430
And to restore the username, we need to do something after the user was created here because that's

2
00:00:08.430 --> 00:00:11.730
important for creating a user with email and password.

3
00:00:11.730 --> 00:00:14.640
We really can just store that data.

4
00:00:14.970 --> 00:00:21.390
But of course once we got a user created, we can reach out to the fire store database and store extra

5
00:00:21.420 --> 00:00:23.280
user data there if we want to.

6
00:00:23.980 --> 00:00:31.640
So we can simply go here after the full statement, but still inside of the tribe.

7
00:00:31.640 --> 00:00:38.050
BLOCK Because the code I'm about to execute should only run if this was successful, not if we had an

8
00:00:38.050 --> 00:00:38.540
error.

9
00:00:38.560 --> 00:00:44.590
So here, inside of the tribe block, I will now use fire store.

10
00:00:44.740 --> 00:00:47.530
Not fire based off, but fire store.

11
00:00:49.090 --> 00:00:53.290
So for that, let me import package.

12
00:00:55.360 --> 00:00:58.960
Cloud fires store cloud fires stalked dart.

13
00:00:58.990 --> 00:01:02.080
The package I showed you a few minutes ago already.

14
00:01:03.070 --> 00:01:06.430
And then after logging in or after signing up.

15
00:01:07.640 --> 00:01:18.080
I want to use fire store dot instance to store extra user data and actually not after logging in or

16
00:01:18.080 --> 00:01:20.680
signing up, but only after signing up.

17
00:01:20.690 --> 00:01:22.310
So let's move this into the else.

18
00:01:22.310 --> 00:01:25.610
BLOCK This should only run if we signed up, not if we did log in.

19
00:01:26.360 --> 00:01:32.860
So here we can now call collection to reach out to a collection and reach out to the users collection.

20
00:01:32.870 --> 00:01:38.120
This collection doesn't exist yet, but it will be created on the fly so we don't have to create it

21
00:01:38.120 --> 00:01:39.020
ahead of time.

22
00:01:39.680 --> 00:01:42.470
And there we can target a specific document.

23
00:01:42.470 --> 00:01:47.690
And I want to create a document which uses the ID of my user as an ID.

24
00:01:47.870 --> 00:01:54.530
Normally, if you add a document with the ADD method, a new ID is generated dynamically.

25
00:01:54.560 --> 00:01:55.940
I don't want that here.

26
00:01:55.940 --> 00:01:57.590
I want to use an existing ID.

27
00:01:57.590 --> 00:02:02.750
I want to use my existing user ID as a ID in this user's collection.

28
00:02:03.050 --> 00:02:08.180
And you can do that by using the document method and then by passing the ID you want to use as an argument

29
00:02:08.180 --> 00:02:09.190
to this method.

30
00:02:09.199 --> 00:02:11.330
And here that's all the result.

31
00:02:11.330 --> 00:02:14.330
Dot user dot uid.

32
00:02:14.870 --> 00:02:22.910
So this auth result object here has a user object which then has a UUID field, which is that user ID

33
00:02:22.910 --> 00:02:25.850
that was generated for the user by firebase.

34
00:02:26.770 --> 00:02:33.100
And on this document we can then call set data to store extra data for that document.

35
00:02:33.130 --> 00:02:35.290
This is just the identifier of the document.

36
00:02:35.320 --> 00:02:36.970
Here comes the extra data.

37
00:02:37.210 --> 00:02:43.450
Now, as mentioned before, the extra data you store in a document is a map here in Flutter, and you

38
00:02:43.450 --> 00:02:45.450
can have any key value pairs you want.

39
00:02:45.460 --> 00:02:49.810
So I'll add the username key and the value is username.

40
00:02:49.810 --> 00:02:57.400
So the value stored here and this argument and I will also store the email again just to have it there

41
00:02:57.400 --> 00:02:58.900
in this document as well.

42
00:02:59.620 --> 00:03:05.530
And with that, we're adding a new user to the new user's collection when we sign up a new user.

43
00:03:05.680 --> 00:03:09.520
So we simply manage this extra user data here on our own.

44
00:03:10.120 --> 00:03:13.150
Now set data, returns a future.

45
00:03:13.330 --> 00:03:21.130
So we can also await this year to then, for example, clear some loading indicator if we had one or

46
00:03:21.130 --> 00:03:23.950
do whatever we want to do once we're done with that.

47
00:03:25.910 --> 00:03:31.970
Before we manage any loading indicator, let me, however, save this and actually delete this user

48
00:03:32.420 --> 00:03:33.860
this user account here.

49
00:03:33.890 --> 00:03:38.750
Just so that I can re-use this email address and then I'll click sign up again here.

50
00:03:40.770 --> 00:03:43.830
Now if we refresh, this user will be recreated.

51
00:03:43.830 --> 00:03:45.990
But now if we go to database.

52
00:03:47.450 --> 00:03:50.870
We'll see a new users collection here and in there.

53
00:03:50.870 --> 00:03:55.040
We see one document with this ID and in there we have the email and the username.

54
00:03:55.040 --> 00:03:57.800
So that's this extra data which was stored.

55
00:03:59.600 --> 00:04:05.090
And now with that, just to finish up this authentication process, I think it would be a bit nicer

56
00:04:05.090 --> 00:04:11.780
if this sign up button would be replaced with a loading spinner, or maybe both buttons would be replaced

57
00:04:11.780 --> 00:04:15.110
with a loading spinner whilst we're waiting for a result.

58
00:04:15.350 --> 00:04:22.370
And we can easily add such a functionality by going to the off screen and we have a stateful widget

59
00:04:22.370 --> 00:04:26.750
here so we can manage some state here in off screen state.

60
00:04:28.990 --> 00:04:30.280
Bar is.

61
00:04:31.250 --> 00:04:39.080
Is loading could be false initially and we want to set this to true whenever we start logging in or

62
00:04:39.080 --> 00:04:41.460
whenever we start signing up.

63
00:04:41.480 --> 00:04:50.030
So I'll set state here at the beginning of the try block and set is loading equal to true.

64
00:04:50.680 --> 00:04:56.050
And is loading should be set back to false if we have an error.

65
00:04:56.590 --> 00:05:02.200
So here at the end of both catch blocks I'll call set state and set is loading back to false.

66
00:05:02.620 --> 00:05:08.830
So let's grab this in all the edit here and it should also be set to false here in the success case

67
00:05:08.830 --> 00:05:12.040
that we actually added this extra user data.

68
00:05:12.040 --> 00:05:18.850
But we don't need to do this here because we'll soon navigate the user somewhere else anyways, so we

69
00:05:19.000 --> 00:05:20.410
don't have to do that here.

70
00:05:20.800 --> 00:05:25.660
Now, one thing we of course do have to do is we have to utilize this is loading state.

71
00:05:26.410 --> 00:05:29.830
So here to offer form I'll actually pass is loading.

72
00:05:30.860 --> 00:05:33.850
And instead of off for him, we now need to accept this.

73
00:05:33.860 --> 00:05:39.620
So here in off form I add a second property which I want to get here.

74
00:05:39.980 --> 00:05:43.100
A boolean is loading.

75
00:05:43.750 --> 00:05:45.800
Which is set through the constructor.

76
00:05:45.820 --> 00:05:46.750
Like this.

77
00:05:48.070 --> 00:05:52.090
And then in our widget tree, which is being rendered.

78
00:05:52.940 --> 00:05:59.690
Here we can replace the raised button and the flat and the flat button with a loading indicator.

79
00:06:00.140 --> 00:06:05.240
For Dad we could check if is if widget is loading is true.

80
00:06:05.240 --> 00:06:10.340
And if that is the case, I will render a circular progress indicator.

81
00:06:11.250 --> 00:06:13.110
And the race button should be removed.

82
00:06:13.110 --> 00:06:20.280
So if not, which it is loading, this button should show up and therefore it's removed if we are loading

83
00:06:20.280 --> 00:06:23.160
and I apply the same logic to the flat button here.

84
00:06:23.160 --> 00:06:25.830
So the two buttons are only showing if we're not loading.

85
00:06:25.830 --> 00:06:29.820
If we are loading, I show the circular progress indicator instead.

86
00:06:30.270 --> 00:06:33.300
So if I save this and click on sign up, you'll see the loading spinner.

87
00:06:33.300 --> 00:06:37.560
And then here I get an error because I already use this email address, but you see that the loading

88
00:06:37.560 --> 00:06:39.750
spinner works and that's great.

89
00:06:41.610 --> 00:06:44.040
So with that, out of the way.

90
00:06:45.230 --> 00:06:47.840
We got that working, we got the extra data stored.

91
00:06:47.870 --> 00:06:54.680
Now let's make sure that we actually move the user to the chat screen if we are authenticated.

