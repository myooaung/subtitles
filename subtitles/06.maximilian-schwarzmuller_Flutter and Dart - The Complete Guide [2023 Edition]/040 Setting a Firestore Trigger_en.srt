1
00:00:02,100 --> 00:00:07,680
So we get the Firebase Admin and the Firebase Functions package available here in this Functions folder

2
00:00:07,680 --> 00:00:10,170
for our JavaScript code to interact with.

3
00:00:10,200 --> 00:00:16,410
So this is now really all just JavaScript world has nothing to do with Flutter because this function's

4
00:00:16,410 --> 00:00:22,890
code will later run on one of Firebase servers so that in the end we can run some code there when something

5
00:00:22,890 --> 00:00:24,750
changes in the database, for example.

6
00:00:25,550 --> 00:00:32,030
So how could this function now look like if we dive into the official Firebase stocks, which is always

7
00:00:32,030 --> 00:00:33,230
a great idea for that.

8
00:00:33,900 --> 00:00:36,630
So if you search for Firebase Cloud functions.

9
00:00:38,000 --> 00:00:40,370
You find, of course, plenty of documentation.

10
00:00:40,760 --> 00:00:46,730
And what you will find here under trigger background functions is that you can use cloud fire store

11
00:00:46,760 --> 00:00:52,510
triggers so that you can basically run a function as a response to some event that happened in your

12
00:00:52,520 --> 00:00:54,290
cloud file store database.

13
00:00:54,290 --> 00:00:56,810
And as you can see, there are other triggers as well.

14
00:00:56,810 --> 00:01:02,300
You could also run a function because some file was uploaded, for example, with cloud storage triggers.

15
00:01:02,390 --> 00:01:07,580
But I care about a function that I want to run because something changed in the database and here we

16
00:01:07,580 --> 00:01:14,960
got four triggers on create an update on delete and on right on right runs whenever on create on update

17
00:01:14,960 --> 00:01:21,350
or delete is triggered well, and our trigger is only run for the respective operation since I want

18
00:01:21,350 --> 00:01:24,020
to run some code whenever a new message is stored.

19
00:01:24,020 --> 00:01:31,100
So whenever a new message was sent, I'm interested in the on create trigger and you can see how that

20
00:01:31,100 --> 00:01:33,410
works in the examples below.

21
00:01:33,860 --> 00:01:40,130
In the end, we need to import this Firebase functions package into our code file with this line of

22
00:01:40,130 --> 00:01:40,640
code.

23
00:01:40,820 --> 00:01:47,570
This is already happening here at the very top and there after we need to export such a function here

24
00:01:47,840 --> 00:01:50,510
which is set up with functions dot fire store.

25
00:01:52,010 --> 00:01:56,450
Then dot document and then a path to the document to which you want to listen.

26
00:01:56,450 --> 00:02:02,270
So where you want to listen to the creative end and then on write or in our case on create.

27
00:02:02,270 --> 00:02:07,070
So I will copy this code here and move it here into my function code.

28
00:02:07,930 --> 00:02:11,380
Like this and replace this with on create.

29
00:02:11,380 --> 00:02:13,800
And here the path is a different one.

30
00:02:13,810 --> 00:02:20,770
I'm interested in the chat collection, but there in any message now you can name this however you want,

31
00:02:20,770 --> 00:02:26,710
but you need the curly braces to signal to Firebase that this is a placeholder, that you don't know

32
00:02:26,710 --> 00:02:31,720
the exact document ID, but that instead you care about any document in there.

33
00:02:31,720 --> 00:02:37,480
So whenever a new document is added, no matter which I did, has this on create function should run.

34
00:02:37,480 --> 00:02:38,920
That is what we're writing here.

35
00:02:39,430 --> 00:02:46,330
And that means that, well, whenever something new is added in our chat collection, whenever a new

36
00:02:46,330 --> 00:02:50,560
document is added here, so whenever a new message is added, our function will run.

37
00:02:51,440 --> 00:02:58,850
So maybe to see how that works, let's just console.log, which is the JavaScript equivalent to print

38
00:02:58,850 --> 00:02:59,630
in flutter.

39
00:02:59,990 --> 00:03:07,340
Let's just console.log the data we're getting upon this event and the data we are getting.

40
00:03:08,860 --> 00:03:10,420
Is the scribe down there.

41
00:03:10,930 --> 00:03:14,560
You can get the data after the operation completed.

42
00:03:14,560 --> 00:03:19,520
So after the creation of the document finished with change after data.

43
00:03:19,540 --> 00:03:20,740
As you can learn here.

44
00:03:22,150 --> 00:03:24,250
And this is all just JavaScript code.

45
00:03:24,250 --> 00:03:25,740
In case you're wondering what it is.

46
00:03:25,750 --> 00:03:31,240
As you can see, it's not too far away from flutter, but for example, const works differently, so

47
00:03:31,240 --> 00:03:32,530
don't be confused about that.

48
00:03:32,530 --> 00:03:34,420
It's all JavaScript code here.

49
00:03:35,300 --> 00:03:38,840
So I'm interested in the data after the write finished.

50
00:03:38,840 --> 00:03:43,250
So I will copy this change that after dot data function call here.

51
00:03:44,300 --> 00:03:47,060
And log the result here with console log.

52
00:03:47,060 --> 00:03:53,570
So I have passed a value that is returned by calling data to console log so that we can output it here.

53
00:03:54,280 --> 00:03:58,960
So now that we finished writing this function, we have to deploy it, which means we have to upload

54
00:03:58,960 --> 00:04:02,950
it to Firebase servers because it's not going to run on our local machine.

55
00:04:02,950 --> 00:04:05,200
It's going to run on Firebase servers.

56
00:04:05,440 --> 00:04:12,220
So here in your project where you previously ran Firebase in it, now run, Firebase, deploy, and

57
00:04:12,220 --> 00:04:18,130
this will take your function and upload it and initialize it to and on Firebase servers.

58
00:04:20,760 --> 00:04:22,830
So you can see this process here.

59
00:04:23,190 --> 00:04:25,020
It can take a couple of seconds.

60
00:04:25,720 --> 00:04:27,970
And it will let you know once it's finished.

61
00:04:28,390 --> 00:04:33,730
Now, what you actually see is that I'm getting an error here of 403 unknown error.

62
00:04:33,760 --> 00:04:35,040
Now, 403.

63
00:04:35,050 --> 00:04:37,810
Looks like I was denied access.

64
00:04:38,950 --> 00:04:42,040
So you can try running firebase log in if you're getting this.

65
00:04:43,720 --> 00:04:46,750
And thereafter I reran firebase deploy.

66
00:04:46,810 --> 00:04:48,640
And now this looks better.

67
00:04:48,640 --> 00:04:50,260
Looks like it's being uploaded.

68
00:04:51,870 --> 00:04:56,430
And with the deploy complete message, it gets what completed.

69
00:04:56,730 --> 00:05:00,000
So now our function is running on Firebase servers.

70
00:05:00,000 --> 00:05:04,290
And now whenever we have a new message in the database, the function should trigger there.

71
00:05:04,470 --> 00:05:11,190
Now, to monitor our function and its output in our Firebase Web console, we can go back to functions.

72
00:05:12,140 --> 00:05:13,580
And reload this page.

73
00:05:14,350 --> 00:05:16,420
And you should see your function here.

74
00:05:16,420 --> 00:05:19,960
If you don't see it immediately, wait a few minutes and then try reloading.

75
00:05:19,960 --> 00:05:21,760
So that should be your function.

76
00:05:21,850 --> 00:05:27,570
And you can also view the logs of this function to see what's going on there.

77
00:05:27,580 --> 00:05:32,770
Now, as always, by the way, when you're working with Firebase Features, check their pricing.

78
00:05:33,680 --> 00:05:39,230
For example, here in the case of cloud functions, you got a certain free tier, a certain free usage

79
00:05:39,230 --> 00:05:42,530
amount, and if you exceed that, you would be charged.

80
00:05:42,560 --> 00:05:44,300
So make sure you check that.

81
00:05:44,780 --> 00:05:48,680
So here we see some logs from this function now and now let's see if something changes there.

82
00:05:48,680 --> 00:05:51,980
If I send a new message, does this work?

83
00:05:52,520 --> 00:06:00,440
If I send this message, it shows up here, of course, and it should show up in our database there.

84
00:06:00,440 --> 00:06:05,960
If we have a look at the chat collection, we should see this does this work message here?

85
00:06:06,730 --> 00:06:08,230
And what about our function?

86
00:06:08,770 --> 00:06:12,060
Now the logs can always take some time until they update.

87
00:06:12,070 --> 00:06:17,110
So you might want to reload, wait a bit and come back at a later point of time.

88
00:06:17,290 --> 00:06:20,080
But eventually you should see something here.

89
00:06:20,860 --> 00:06:28,060
And I actually do see something I see an error cannot read property data of undefined so our function

90
00:06:28,060 --> 00:06:31,300
executed but something went wrong there.

91
00:06:31,300 --> 00:06:39,130
We were not able to retrieve some data here, so it looks like calling data on change after did not

92
00:06:39,130 --> 00:06:39,730
work.

93
00:06:40,500 --> 00:06:40,710
Now.

94
00:06:40,710 --> 00:06:45,930
This was simply a little mistake from my side in the on create case.

95
00:06:45,930 --> 00:06:49,860
We actually don't have to do this change after thing.

96
00:06:49,860 --> 00:06:55,110
Instead we get a snapshot of the data anyways so we can just call snapshot.

97
00:06:56,470 --> 00:06:57,370
DOT data.

98
00:06:57,400 --> 00:07:03,640
As you can see here, I was in the on update case where you, of course have two states before and after

99
00:07:03,640 --> 00:07:04,300
the update.

100
00:07:04,300 --> 00:07:08,410
But if you create something, you just have to snapshot.

101
00:07:08,590 --> 00:07:12,100
So I decided to leave this in because this is easy to overlook.

102
00:07:12,100 --> 00:07:18,370
And therefore now if we access the snapshot here, we should be able to really get the data we're interested

103
00:07:18,370 --> 00:07:18,760
in.

104
00:07:19,030 --> 00:07:22,720
So just to double check this, let's redeploy this.

105
00:07:22,720 --> 00:07:25,930
Whenever you make a change locally, you have to redeploy.

106
00:07:25,960 --> 00:07:29,640
So let's redeploy this and let's now validate this again.

107
00:07:29,650 --> 00:07:32,410
So let's wait for the redeployment to finish.

108
00:07:33,580 --> 00:07:36,640
And now that it finished, let me send another message.

109
00:07:38,300 --> 00:07:38,990
Like that.

110
00:07:39,940 --> 00:07:42,760
And let's then go back to our logs here.

111
00:07:43,300 --> 00:07:46,660
And again, you might want to reload here, wait a little bit.

112
00:07:46,660 --> 00:07:49,930
Reload again until the new log shows up here.

113
00:07:50,500 --> 00:07:53,080
And eventually you should get your data.

114
00:07:53,110 --> 00:07:55,570
Now, we still have a warning here or an error.

115
00:07:55,570 --> 00:07:56,950
We'll take care about this later.

116
00:07:56,950 --> 00:08:00,640
But what we see here is this piece of data.

117
00:08:01,280 --> 00:08:06,020
So we see that's the data we got and that's exactly the data that was stored in the database.

118
00:08:06,020 --> 00:08:09,980
So we get our username here, we get the text that is pretty cool.

119
00:08:09,980 --> 00:08:13,790
And that's the data which I now want to send as part of my notification.

120
00:08:14,240 --> 00:08:15,350
Now one extra note.

121
00:08:15,350 --> 00:08:21,140
We also see that we got an error that the function returned undefined and that it should return a value

122
00:08:21,140 --> 00:08:21,890
or a promise.

123
00:08:21,890 --> 00:08:25,910
Instead, a promise is essentially the same as a future in Dart.

124
00:08:25,910 --> 00:08:30,170
So in JavaScript that's called a promise and our function does never.

125
00:08:30,470 --> 00:08:32,059
Now that's not a huge problem.

126
00:08:32,059 --> 00:08:34,730
We can simply return anything here at the moment.

127
00:08:34,730 --> 00:08:39,640
This will soon change anyways, because now of course I don't want to return anything.

128
00:08:39,650 --> 00:08:47,360
Instead now I want to send my message and for this we'll use that Firebase Admin SDK, which we also

129
00:08:47,360 --> 00:08:47,840
have.

