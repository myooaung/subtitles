1
00:00:02,250 --> 00:00:04,800
Let's now work on the orders and there,

2
00:00:04,800 --> 00:00:07,670
let's start with the logic for adding an order.

3
00:00:07,670 --> 00:00:12,850
Obviously, when you add an order, that should also be stored on the server.

4
00:00:12,900 --> 00:00:18,120
Now the logic for that will be pretty similar to what we used for adding a product, so you can definitely

5
00:00:18,120 --> 00:00:21,740
have a look at the add product method to learn how to add an order

6
00:00:22,170 --> 00:00:29,270
and actually, I'll copy a bit of that, so I'll copy that URL for example, go to the orders.dart

7
00:00:29,290 --> 00:00:31,540
file and add it here.

8
00:00:31,620 --> 00:00:36,810
Also, I'll turn this into an async function which will therefore return a future which yields void in the

9
00:00:36,810 --> 00:00:37,690
end

10
00:00:37,740 --> 00:00:40,120
and now I want to use the HTTP package in here,

11
00:00:40,140 --> 00:00:42,150
so we should import it of course.

12
00:00:42,150 --> 00:00:49,530
So let's import package:http and there http.dart and again, I'll bundle this all with the HTTP prefix to

13
00:00:49,530 --> 00:00:56,100
access all the features from that package with http. With that, here

14
00:00:56,290 --> 00:01:01,570
I want to send the request and that should be a post request because I want to add a new order on the

15
00:01:01,570 --> 00:01:02,590
server.

16
00:01:02,590 --> 00:01:08,590
Send it to that URL and of course, we need to append a body here. Now that body needs to be in JSON

17
00:01:08,590 --> 00:01:16,990
format, so let's also import dart:convert here to create some JSON, to convert our map to JSON.

18
00:01:16,990 --> 00:01:23,190
So here, we can then call json.encode, pass in a map and in that map, I want to store all the data which

19
00:01:23,200 --> 00:01:26,620
should be stored on the server in the end.

20
00:01:26,620 --> 00:01:32,140
So what makes up an order? An order looks like this.

21
00:01:32,140 --> 00:01:38,710
We have an ID, well that will be generated by Firebase so we don't need to store that but we'll have

22
00:01:38,950 --> 00:01:46,060
an amount, a datetime and then also, we'll have some products and the products in turn are cart products.

23
00:01:46,360 --> 00:01:52,960
Now we find the definition for that in the cart.dart file, a cart item in turn has an ID, a title, a quantity

24
00:01:52,960 --> 00:01:53,970
and a price.

25
00:01:54,100 --> 00:01:56,620
So we'll need to convert all of that into maps,

26
00:01:56,620 --> 00:02:01,960
So actually here we'll have a map with then a list of nested maps inside of it.

27
00:02:02,020 --> 00:02:04,790
So let's start working on that,

28
00:02:04,930 --> 00:02:09,720
We'll have our amount and the amount is simply the total we get here,

29
00:02:09,729 --> 00:02:11,350
That's simple.

30
00:02:11,350 --> 00:02:20,380
Now for the datetime, for the timestamp, we can use DateTime.now and convert this to an Iso8601String

31
00:02:20,440 --> 00:02:27,690
which is simply a uniform string representation of dates, which we can later easily convert back into

32
00:02:27,700 --> 00:02:34,880
a datetime object when we load this into Dart again because we can't just send a datetime object like this,

33
00:02:35,050 --> 00:02:38,540
We don't want to send its normal string representation,

34
00:02:38,560 --> 00:02:46,540
instead we want to send this special string representation which is easily recreatable as a datetime

35
00:02:46,600 --> 00:02:48,480
later then.

36
00:02:48,490 --> 00:02:52,420
So that's fine but actually, that's already the first thing which you could mess up.

37
00:02:52,420 --> 00:02:59,080
We're using that timestamp also down there in the order item which we create for our local memory.

38
00:02:59,080 --> 00:03:05,260
That of course should be exactly the same timestamp as up there but if we execute a HTTP request in between,

39
00:03:05,500 --> 00:03:07,960
there will be some difference in the timestamps.

40
00:03:07,990 --> 00:03:16,390
So actually, I'll first create my timestamp here with DateTime.now and then use that timestamp that

41
00:03:16,390 --> 00:03:20,970
is created at the beginning of this function execution here to send it to a server

42
00:03:21,220 --> 00:03:28,270
and here, to then use it locally, so that we have exactly the same timestamp. And then here for the data we

43
00:03:28,270 --> 00:03:33,760
do send to a server, we of course also have our products and now products is actually a list that can

44
00:03:33,760 --> 00:03:36,210
be encoded to JSON just like a map

45
00:03:36,730 --> 00:03:42,350
but that list here now needs to have our cartProducts.

46
00:03:42,350 --> 00:03:48,760
Now cartProducts is a list but a list of cart items and we need to map these cart items into maps and

47
00:03:48,760 --> 00:03:50,590
not have objects.

48
00:03:50,590 --> 00:03:58,420
So here, I will use cartProducts.map and then you call to list to get a list again and in map, we get

49
00:03:58,420 --> 00:04:04,870
a function which runs on every cp, on every cart product and there, I want to now return a new map, so

50
00:04:05,020 --> 00:04:11,940
convert my objects here based on cart item into maps. And there, every map will have an ID,

51
00:04:12,670 --> 00:04:18,040
so basically the same fields I have here for the cart item - ID, title, quantity and price, so I will

52
00:04:18,040 --> 00:04:27,370
have an ID here which is cp.id and I'll have a title which is cp.title and I'll have a quantity

53
00:04:27,430 --> 00:04:30,100
which is cp.quantity here

54
00:04:30,100 --> 00:04:38,790
and I'll have a price, which is cp.price. So that's how the product should look like here in that

55
00:04:38,790 --> 00:04:44,340
map and with that, we now have an order representation, a representation of an order item which we can

56
00:04:44,340 --> 00:04:46,300
send to the server.

57
00:04:46,320 --> 00:04:51,750
Now we already added async, so we can now use await here to wait for a response

58
00:04:51,810 --> 00:04:58,550
and indeed, I will use the response then. We could add error handling by the way, wrap try catch around

59
00:04:58,550 --> 00:05:04,950
that or wrap try catch around the place where you call add order later if you want to,

60
00:05:04,970 --> 00:05:10,580
again I will leave out error handling here to save some time but I still want to use the response here

61
00:05:10,820 --> 00:05:16,880
because that response will hold an ID which is generated by Firebase, which I want to use here instead

62
00:05:16,880 --> 00:05:18,290
of this dummy ID.

63
00:05:18,290 --> 00:05:26,180
So here, I want to decode my response body and that will be that map which has that name key which is

64
00:05:26,180 --> 00:05:32,360
that autogenerated ID. It's the same pattern we used in products, here in add product, we also got the

65
00:05:32,360 --> 00:05:37,730
autogenerated ID like this and I'm using the same pattern now to get that autogenerated ID for

66
00:05:37,730 --> 00:05:42,160
the order and that should be all. We add our order locally 

67
00:05:42,170 --> 00:05:47,600
once this is done, with await, we're waiting for this to be done before this executes and again, always

68
00:05:47,600 --> 00:05:50,540
remember, technically this gets wrapped into a then block,

69
00:05:50,540 --> 00:05:56,390
we're not really stopping code execution but now with that, we can go to the place where we call add order

70
00:05:56,810 --> 00:06:02,960
and see if everything is good there and maybe show a loading spinner because we call add order

71
00:06:03,140 --> 00:06:11,720
in our cart screen. There we have that FlatButton, order now and there, I call add order. Now there, I of

72
00:06:11,720 --> 00:06:14,030
course want to show a loading spinner

73
00:06:14,030 --> 00:06:17,700
instead of that text and also disable the button whilst we're loading

74
00:06:17,860 --> 00:06:21,900
and I also by the way want to disable the button if we have nothing to order.

75
00:06:22,310 --> 00:06:24,680
So we have nothing to order

76
00:06:24,890 --> 00:06:30,020
if cart here has a total amount that is equal to or smaller than zero.

77
00:06:30,050 --> 00:06:31,920
So the first thing we can do here actually

78
00:06:31,970 --> 00:06:33,490
and we could have done that before

79
00:06:33,650 --> 00:06:38,670
is that we check cart total amount and if that's smaller or equal than zero,

80
00:06:38,870 --> 00:06:41,550
then onPressed should point at null

81
00:06:41,600 --> 00:06:43,590
instead of that function

82
00:06:43,700 --> 00:06:49,820
and if onPressed points at null instead of a function, Flutter automatically disables the button,

83
00:06:49,820 --> 00:06:51,090
that's a nice feature.

84
00:06:51,110 --> 00:06:55,420
So the button is automatically disabled if onPressed has no function to point at

85
00:06:55,490 --> 00:06:59,860
and that's the case if the total amount is smaller or equal to zero.

86
00:06:59,930 --> 00:07:04,910
But now I also want to manage some loading state to show a spinner and also disable the button there

87
00:07:05,480 --> 00:07:12,500
and for that, we can turn this into a stateful widget or to avoid rebuilding everything just because

88
00:07:12,860 --> 00:07:16,670
we're switching this here to show a loading spinner,

89
00:07:16,670 --> 00:07:21,950
we can of course also extract that FlatButton into a separate widget which might be more elegant here.

90
00:07:22,640 --> 00:07:30,590
So we can use the refactoring tool to extract the widget here and I'll name this order button and by

91
00:07:30,590 --> 00:07:34,100
default, that's placed in the same file

92
00:07:34,100 --> 00:07:39,560
and here I'll actually leave it in that file because the order button is really only used by that widget,

93
00:07:39,560 --> 00:07:41,500
by that cart screen widget,

94
00:07:41,540 --> 00:07:46,430
so whilst you could absolutely move the order button into a separate file and it would not be wrong, 

95
00:07:46,860 --> 00:07:48,250
whilst you could do that,

96
00:07:48,320 --> 00:07:54,500
you can also leave it here because we'll never use it anywhere else. Now order button is already configured

97
00:07:54,500 --> 00:07:59,410
to receive the cart which is good because we need the cart

98
00:07:59,420 --> 00:08:06,460
total amount here, however we now need to convert this into a stateful widget, which you again can do

99
00:08:06,460 --> 00:08:14,480
with the refactoring tool because now here, we can add the isLoading property which initially is false

100
00:08:14,740 --> 00:08:22,710
and I want to set this to true in here and inside of set state of course to update this UI when we

101
00:08:22,710 --> 00:08:24,120
start loading.

102
00:08:24,120 --> 00:08:28,480
So I'll set this to true and now that's why I put this into a separate widget,

103
00:08:28,500 --> 00:08:35,159
with set state, we now only re-execute this build method instead of that entire build method up there.

104
00:08:35,159 --> 00:08:39,480
So we rebuild less which is of course not bad

105
00:08:39,480 --> 00:08:42,320
and here by the way, you can remove new which was added,

106
00:08:42,330 --> 00:08:45,760
this is not required as of Dart 2 anymore.

107
00:08:45,810 --> 00:08:50,830
So now here on the order button, we call set state when we start loading,

108
00:08:50,850 --> 00:08:53,520
now of course this here returns a future,

109
00:08:53,550 --> 00:09:00,780
so actually I'll add async here between the parameter list and the body of this anonymous function,

110
00:09:00,780 --> 00:09:06,680
you can use async on anonymous functions as well because of course I want to await this now,

111
00:09:06,870 --> 00:09:10,120
I don't care about the result because the result will be void anyways

112
00:09:10,140 --> 00:09:18,660
but I want to await this before I clear the cart and also before I reset my loading state of course.

113
00:09:18,660 --> 00:09:24,930
So here, I'll set loading back to false once we're done. So with that,

114
00:09:24,970 --> 00:09:28,330
the last thing is that I also want to disable the button whilst we're loading,

115
00:09:28,360 --> 00:09:33,220
so here I'll not just check for the cart amount but this should also be disabled.

116
00:09:33,220 --> 00:09:44,540
So I also want to set onPressed to null if we either have this condition or if isLoading is true and now

117
00:09:44,540 --> 00:09:50,080
with that, let's do a full restart and let's see whether that works.

118
00:09:50,120 --> 00:09:55,380
Let's add a couple of items to the cart here and now here if I click order now,

119
00:09:56,830 --> 00:10:03,680
it gets disabled and after a while, the items are gone, they end up here in orders and

120
00:10:07,710 --> 00:10:11,640
I also have my order here. Now incorrectly in products,

121
00:10:11,660 --> 00:10:13,590
so I'll actually clear that here,

122
00:10:13,590 --> 00:10:15,060
that's a mistake,

123
00:10:15,060 --> 00:10:20,550
in orders.dart, of course I don't want to target products.json but a new node like orders.json,

124
00:10:20,550 --> 00:10:25,440
the name is up to you because of course, this should be not stored in the same list as the products

125
00:10:25,470 --> 00:10:26,650
but in a separate list,

126
00:10:26,670 --> 00:10:27,990
that's a mistake.

127
00:10:27,990 --> 00:10:33,100
So make sure to clear that here on Firebase and remove the order from the products and update the URL

128
00:10:33,150 --> 00:10:40,620
and the other missing thing is that I'm not showing a spinner. I do disable the button,

129
00:10:40,620 --> 00:10:41,180
that's good

130
00:10:41,220 --> 00:10:44,160
but actually I want to show a spinner instead of order

131
00:10:44,160 --> 00:10:52,320
now if we're loading. So here, I'll check isLoading and if we are loading, then I'll show a 

132
00:10:52,380 --> 00:10:57,570
CircularProgressIndicator and only if we're not loading, I'll show that text here.

133
00:10:57,600 --> 00:11:03,150
So these are the two things which need to be changed and with that, let's do a hot refresh again to reload

134
00:11:03,150 --> 00:11:09,270
the app, add a couple of items here to the cart and now click order now and here's the spinner

135
00:11:09,430 --> 00:11:10,990
and after a while, it's gone

136
00:11:10,990 --> 00:11:15,500
and now on Firebase, we also see that this item was added to the orders node

137
00:11:15,610 --> 00:11:19,090
and there we have all the data we wanted to send.

138
00:11:19,090 --> 00:11:20,790
So this is looking good

139
00:11:20,800 --> 00:11:24,220
and with that, we're storing the orders, 

140
00:11:24,250 --> 00:11:27,040
let's next make sure that we can also fetch them.

