WEBVTT
1
00:00:02.020 --> 00:00:03.460
So what's missing now?

2
00:00:03.490 --> 00:00:08.920
Well, obviously, I want to make sure that when we have items in the cart, we can hit that order button

3
00:00:08.920 --> 00:00:12.070
here and add them to our orders screen.

4
00:00:12.970 --> 00:00:16.059
And for this, we need to manage orders.

5
00:00:16.270 --> 00:00:21.490
Now, in my opinion, it makes sense to add a new class, a new provided class for that, because it

6
00:00:21.490 --> 00:00:23.860
doesn't really fit into products there.

7
00:00:23.950 --> 00:00:28.990
Going to manage to products we can work with doesn't fit into CART because there I want to manage only

8
00:00:28.990 --> 00:00:31.390
my cart, not the orders and product.

9
00:00:31.390 --> 00:00:33.910
Here is just a single product we use in products.

10
00:00:33.910 --> 00:00:37.870
We could of course also move that product class into the product start file.

11
00:00:38.200 --> 00:00:45.460
So add a new file orders dot start where I want to manage the orders we have in there.

12
00:00:45.460 --> 00:00:52.240
We can create a new class orders and I'll use with change notifier imported from Flutter Foundation

13
00:00:52.460 --> 00:00:57.550
start because of course we will provide that and we might have places in the app where we want to listen

14
00:00:57.550 --> 00:00:58.450
to changes.

15
00:01:00.070 --> 00:01:05.980
Now in there I will want to manage some orders, unsurprisingly, and for that of course, we first

16
00:01:05.980 --> 00:01:08.620
of all need to define how our order should look like.

17
00:01:08.920 --> 00:01:15.640
Just as with the cart here, I'll create my order item right inside the same file.

18
00:01:15.640 --> 00:01:22.510
You could do it in a separate file and each order should have an ID should have an amount.

19
00:01:22.510 --> 00:01:23.860
So the total amount.

20
00:01:24.460 --> 00:01:27.520
So the quantity of items times the price, so to say.

21
00:01:28.270 --> 00:01:31.150
I also want to find out which products were ordered.

22
00:01:31.150 --> 00:01:37.990
So I want to get a list of my products and they're actually off the card items, to be precise, because

23
00:01:37.990 --> 00:01:41.380
I also want to find out which quantity was ordered and so on.

24
00:01:41.500 --> 00:01:50.080
So I'll import my cart start file here so that I can use the card item class here and then have my products

25
00:01:50.080 --> 00:01:54.490
here and also the time at which this order was placed.

26
00:01:54.490 --> 00:01:56.860
That's also something that's worth storing.

27
00:01:58.960 --> 00:02:04.450
Then let's add the constructor and I will go with named arguments here to assign values to all these

28
00:02:04.450 --> 00:02:05.410
properties.

29
00:02:09.810 --> 00:02:10.650
Like this.

30
00:02:12.260 --> 00:02:12.760
Whoops.

31
00:02:12.770 --> 00:02:14.690
And that should be order item, of course.

32
00:02:15.450 --> 00:02:22.560
And also just as we did it earlier, I'll mark all these arguments here as required.

33
00:02:23.460 --> 00:02:28.880
So that's the order item in the orders class will now have a list of such items.

34
00:02:28.890 --> 00:02:36.960
So down there we can add a list of type order item or which holds an order item orders which is empty

35
00:02:36.990 --> 00:02:38.160
initially, let's say.

36
00:02:38.860 --> 00:02:43.540
And then here we can already add a getter which returns our order items.

37
00:02:45.060 --> 00:02:52.140
Named Orders, which returns a copy again by using or by creating a new list with square brackets,

38
00:02:52.140 --> 00:02:56.540
and then using the spread operator to take some items and move them into this new list.

39
00:02:56.550 --> 00:02:58.860
So here are the items which are part of orders.

40
00:02:58.860 --> 00:03:02.880
And I'm doing this so that from outside this class we can't edit orders.

41
00:03:04.180 --> 00:03:11.350
Now what I need here is, of course, an add order method which returns nothing but which is executed

42
00:03:11.350 --> 00:03:15.250
when we click that order now button here on the card screen.

43
00:03:15.550 --> 00:03:20.020
The idea here is to then add all the content of the card into one order.

44
00:03:20.320 --> 00:03:30.550
So I should probably get a list of card items which only card products here as an argument, maybe already

45
00:03:30.550 --> 00:03:31.480
get the total.

46
00:03:31.480 --> 00:03:34.750
If I already have that calculated, I don't have to redo it.

47
00:03:35.830 --> 00:03:39.820
And then with that, we can add this as a new order.

48
00:03:41.380 --> 00:03:45.250
So here we can reach out to orders to the list and.

49
00:03:46.370 --> 00:03:54.110
Added as a new order or actually use insert with index zero to add it as the first element in the list

50
00:03:54.110 --> 00:03:54.560
add.

51
00:03:54.560 --> 00:03:57.740
We'll always add it at the end of the list with insert zero.

52
00:03:57.770 --> 00:04:02.780
We added at the beginning of the list so that more recent orders are at the beginning of the list.

53
00:04:02.780 --> 00:04:04.250
But that's totally up to you.

54
00:04:04.250 --> 00:04:09.560
So here I'll use insert zero to add the new order at the beginning of the order's list and move all

55
00:04:09.560 --> 00:04:10.460
existing orders.

56
00:04:10.460 --> 00:04:12.800
Well, one index ahead to the end.

57
00:04:13.850 --> 00:04:18.860
And then here the element which should be added is of course a new order item.

58
00:04:19.279 --> 00:04:29.000
And there we need to define an ID and for now I'll use state time now to string to get a pseudo unique

59
00:04:29.000 --> 00:04:29.600
ID.

60
00:04:30.440 --> 00:04:33.260
Then we also need to define our.

61
00:04:34.280 --> 00:04:35.170
Amount here.

62
00:04:35.180 --> 00:04:37.610
That's the total which I'm getting as an argument.

63
00:04:39.100 --> 00:04:44.200
Then we have the current time stamp, but there we can just use the same time daytime now.

64
00:04:44.620 --> 00:04:50.980
And we also need to pass in our products that are just the card products which I'm receiving.

65
00:04:52.540 --> 00:04:54.760
So with that, we're adding a new order.

66
00:04:54.760 --> 00:05:01.060
And now in case we got someone who's listening, we want to call notify listeners so that any places

67
00:05:01.060 --> 00:05:04.420
in the app which depend on orders are now updated.

68
00:05:06.740 --> 00:05:09.890
Placing an order also means that we want to clear the cart.

69
00:05:09.920 --> 00:05:13.600
Of course, because we ordered all elements, so the cart should be cleared.

70
00:05:13.610 --> 00:05:19.790
So in the cart dart file we can add a new method, clear cart or just clear whatever you want to name

71
00:05:19.790 --> 00:05:20.150
it.

72
00:05:20.750 --> 00:05:22.940
And there I will set items back.

73
00:05:23.530 --> 00:05:27.400
To an empty map and then call notify listeners.

74
00:05:30.310 --> 00:05:32.410
We can now start using that.

75
00:05:35.180 --> 00:05:38.600
First of all, we need to provide our orders class, right?

76
00:05:38.600 --> 00:05:44.450
Because I plan on using that in different places in the app, even to dispatch actions like add a new

77
00:05:44.450 --> 00:05:48.380
order or to listen to my orders or fetch my orders.

78
00:05:48.890 --> 00:05:50.450
So where should we provide it?

79
00:05:50.750 --> 00:05:56.240
If we have a look at the main dart file, we'll definitely need orders in the cart screen, or at least

80
00:05:56.240 --> 00:05:58.370
in a part of the card screen there.

81
00:05:58.370 --> 00:06:05.090
And we'll add a new screen soon which shows all orders, so therefore will register a brand new screen

82
00:06:05.090 --> 00:06:07.520
which definitely needs access to the orders.

83
00:06:07.520 --> 00:06:12.920
And therefore we also need to provide the orders here in the root app just because it's important.

84
00:06:12.920 --> 00:06:18.230
Keep in mind this does not mean that the entire app rebuilds when something changes there because it's

85
00:06:18.230 --> 00:06:23.690
not the provider which causes a rebuild, but the listener and the listeners are not here in the main

86
00:06:23.690 --> 00:06:24.170
widget.

87
00:06:24.170 --> 00:06:29.750
They are in different widgets, for example, in the card screen where we have our card provider and

88
00:06:29.750 --> 00:06:30.090
so on.

89
00:06:30.110 --> 00:06:32.690
These are the listeners which rebuild the UI.

90
00:06:33.090 --> 00:06:39.650
Therefore, in Main Dart, we can now add another provider here, our change notifier provider.

91
00:06:41.170 --> 00:06:46.630
With dot value where the value is actually a new instance of orders.

92
00:06:46.630 --> 00:06:48.880
And for that, of course, we need to import.

93
00:06:50.000 --> 00:06:50.780
Our.

94
00:06:51.610 --> 00:06:55.420
Order order start file from the providers folder.

95
00:06:55.420 --> 00:07:01.360
With that imported, we create a new instance here and provide that as a value and with that we can

96
00:07:01.360 --> 00:07:04.480
listen to orders from anywhere in our application.

97
00:07:04.750 --> 00:07:07.990
And of course you already know it just as recommended before.

98
00:07:07.990 --> 00:07:10.990
You shouldn't necessarily use the value constructor here.

99
00:07:10.990 --> 00:07:17.890
So just to reemphasize this, the recommended approach here again as before would be that you use the

100
00:07:17.890 --> 00:07:24.820
create function here in the normal constructor function of the change notifier provider for products

101
00:07:24.820 --> 00:07:32.440
for CART and also here for orders or of course the builder's function if you're using provider package

102
00:07:32.440 --> 00:07:33.280
version free.

103
00:07:33.280 --> 00:07:35.260
So that's the recommended approach.

104
00:07:35.260 --> 00:07:38.560
Again, I mentioned it before, it's just really important to me.

105
00:07:38.560 --> 00:07:42.220
The other approach, all the works, but that's a better approach.

