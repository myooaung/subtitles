1
00:00:02,110 --> 00:00:08,050
To let users sign up, we need to send a request to Firebase and I'll manage that through a new provider

2
00:00:08,840 --> 00:00:15,600
in the auth.dart file which should be there to manage all our user logic,

3
00:00:15,700 --> 00:00:21,310
signing up, logging in, logging out and also making sure that when the app restarts, we try logging in

4
00:00:21,310 --> 00:00:22,660
the user again.

5
00:00:22,960 --> 00:00:25,390
So let's create a new class in there, an auth class

6
00:00:25,450 --> 00:00:33,160
and here I will add the change notifier mixin from flutter/widgets.dart so that we can call notify

7
00:00:33,160 --> 00:00:40,410
listeners to make sure that all places in the UI that depend on our auth logic here are updated

8
00:00:40,480 --> 00:00:48,550
when that changes. So in here, what do we need?

9
00:00:48,590 --> 00:00:54,650
We will definitely manage a token in there later to attach it to requests

10
00:00:54,650 --> 00:00:58,640
that reach endpoints which do need authentication.

11
00:00:58,640 --> 00:01:02,560
This token, haven't mentioned this before but I'll mention it now,

12
00:01:02,570 --> 00:01:05,630
this token expires at some point of time,

13
00:01:05,630 --> 00:01:07,290
that's a security mechanism.

14
00:01:07,310 --> 00:01:09,360
This token doesn't live on forever,

15
00:01:09,440 --> 00:01:11,690
typically it expires after one hour,

16
00:01:11,690 --> 00:01:17,750
for example the token Firebase generates expires after one hour, so one hour after you got it, it will

17
00:01:17,750 --> 00:01:19,760
be treated as invalid.

18
00:01:19,760 --> 00:01:26,770
So therefore, I'll also store a datetime object here, the expiry date of that token

19
00:01:26,840 --> 00:01:34,050
essentially. Now an additional piece of information that will be helpful is the ID of the logged in

20
00:01:34,050 --> 00:01:34,590
user,

21
00:01:34,650 --> 00:01:38,110
so I'll also store the userId here which should be a string.

22
00:01:38,310 --> 00:01:39,630
None of that is final

23
00:01:39,630 --> 00:01:47,130
by the way because all of that will be able to change across the lifetime of our application, we can

24
00:01:47,130 --> 00:01:50,430
logout for example and then all these fields would be cleared.

25
00:01:53,560 --> 00:01:56,410
Now with these properties set up there,

26
00:01:56,410 --> 00:02:01,330
let's start simple and let's add a method that allows us to sign the user up.

27
00:02:01,690 --> 00:02:06,310
So for that, I'll add a new method and that will return a future which eventually will yield nothing

28
00:02:07,150 --> 00:02:14,080
which I'll call sign up and there, I use the async keyword so that we can work with async await.

29
00:02:14,080 --> 00:02:21,610
Now sign up will need two pieces of information - the e-mail and the password, the confirm password is not

30
00:02:21,610 --> 00:02:22,420
required here,

31
00:02:22,450 --> 00:02:26,960
I only use this in the AuthScreen in my form here in the validation already.

32
00:02:27,130 --> 00:02:30,890
It's just there to validate the input, I don't need to submit this to the server.

33
00:02:31,210 --> 00:02:35,140
So these are two pieces of information that do need to reach the server.

34
00:02:35,140 --> 00:02:44,280
Now the question is of course which URL is the right URL to send that data to? To get an answer

35
00:02:44,400 --> 00:02:45,150
to this question,

36
00:02:45,150 --> 00:02:50,890
you can simply google for Firebase Auth REST API and you should find an article from the official Firebase

37
00:02:50,910 --> 00:02:57,030
docs and there you can learn how to authenticate with the help of the Firebase or with a certain Firebase

38
00:02:57,030 --> 00:03:03,570
REST API, not the same API we used before but a different API also provided by Firebase. On the right,

39
00:03:03,570 --> 00:03:09,930
you have shortcuts to the different parts of the documentation and relevant for us is right now

40
00:03:09,930 --> 00:03:14,850
sign up with e-mail and password because that's exactly what we're trying to do.

41
00:03:15,060 --> 00:03:18,780
There, you learned that you'll need to send a post request with some JSON data

42
00:03:18,870 --> 00:03:26,400
to this endpoint, to this URL. So unlike before in the last course module, now you can't build any

43
00:03:26,400 --> 00:03:27,610
URL you want,

44
00:03:27,630 --> 00:03:31,830
instead you have a fixed URL to which you need to send your request

45
00:03:31,920 --> 00:03:37,820
and that's actually the default when working with APIs. Typically you don't construct your own path

46
00:03:37,860 --> 00:03:40,210
and that is then reflected back in a database,

47
00:03:40,230 --> 00:03:43,790
typically you have hardcoded endpoints to which you can send your data,

48
00:03:44,160 --> 00:03:49,760
so that's the case here. As a payload to the request, so as a body you attach,

49
00:03:49,760 --> 00:03:54,980
you need to send the e-mail, the password and then also an extra field which has that returnSecureToken

50
00:03:54,980 --> 00:03:59,590
name, written like this which holds a boolean and as you learned, this should always be true,

51
00:03:59,600 --> 00:04:05,750
so we just add that. And you'll get back a response which basically gives you the token,

52
00:04:05,750 --> 00:04:09,710
so here, you already get a token after signing up, you don't even need to login,

53
00:04:09,740 --> 00:04:14,080
we still need to implement a login because of a user comes back after the token expired,

54
00:04:14,240 --> 00:04:18,829
then that user can't sign up again because a user for that e-mail already exists,

55
00:04:18,829 --> 00:04:23,820
so then we'll need a login but for the first time sign up, you already get back such a token there

56
00:04:23,820 --> 00:04:25,790
You get back the e-mail,

57
00:04:25,820 --> 00:04:30,490
well you sent that there, so not really information you need but still, you get it back.

58
00:04:30,710 --> 00:04:35,960
You get a refresh token which is an advanced concept which we'll not use in this module,

59
00:04:35,960 --> 00:04:41,450
this would allow you to prolong that token which expires after an hour so that the user doesn't have

60
00:04:41,450 --> 00:04:44,240
to login again after an hour.

61
00:04:44,450 --> 00:04:49,880
I'll not cover using it here because if you really want to use Firebase, you can look into its SDK

62
00:04:49,910 --> 00:04:52,000
which manages this for you anyways

63
00:04:52,010 --> 00:04:57,680
and I just want to show the general flow for which the normal token and with the expiry date will suffice.

64
00:04:57,680 --> 00:05:00,500
You also get information when this will expire.

65
00:05:00,500 --> 00:05:05,050
It's a string but in there, you actually have the number of seconds until the ID token,

66
00:05:05,240 --> 00:05:11,000
so your main token here expires and local ID is the userId which Firebase automatically generates

67
00:05:11,060 --> 00:05:12,780
when you sign up a user.

68
00:05:12,890 --> 00:05:14,870
So that's the data you get back,

69
00:05:14,870 --> 00:05:17,200
this is the URL you need to send a request to.

70
00:05:17,330 --> 00:05:25,940
So back in the auth.dart file here in the providers folder, let's import the HTTP package because

71
00:05:25,990 --> 00:05:32,030
we'll of course send our request with that and again, I'll import it as HTTP to have it all bundled

72
00:05:32,030 --> 00:05:35,360
up in this HTTP prefix here.

73
00:05:35,360 --> 00:05:43,690
So in here, we need a URL and that URL is the URL I just copied from the docs

74
00:05:43,790 --> 00:05:46,490
and please note that it has one dynamic segment in there,

75
00:05:46,610 --> 00:05:54,290
the API key. That is a key you get from your Firebase project, there if you click on that gear icon under

76
00:05:54,290 --> 00:05:59,620
project settings, you find this Web API key and that's the key we use here

77
00:05:59,780 --> 00:06:06,860
even though we're not in a web project. So take that key here and enter it here instead of the square bracket

78
00:06:06,920 --> 00:06:09,380
API key thing.

79
00:06:09,380 --> 00:06:14,810
So with that, you have that URL with your API key at the end and that's the URL to which the request

80
00:06:14,810 --> 00:06:16,070
should be sent.

81
00:06:16,070 --> 00:06:24,050
So here we send a post request with the post method to that URL and for the body, you need to, as you learned,

82
00:06:24,590 --> 00:06:28,220
send JSON data which contains this information.

83
00:06:31,470 --> 00:06:33,540
So here, I'll again import

84
00:06:33,540 --> 00:06:44,400
my good old dart:convert package which is built into Dart to call json.encode here, pass in a map

85
00:06:44,430 --> 00:06:50,940
and in that map, we need to have these three key-value pairs. So we have e-mail, we have password and we

86
00:06:50,940 --> 00:06:51,790
have that

87
00:06:52,200 --> 00:06:54,700
let me copy it to not mistype it,

88
00:06:54,750 --> 00:06:56,630
returnSecureToken value.

89
00:06:56,760 --> 00:07:01,320
The value for that is true, for the password the value of course is the password we're getting here as

90
00:07:01,320 --> 00:07:06,830
an argument and for the e-mail, the value also is the e-mail we're getting here as an argument.

91
00:07:06,870 --> 00:07:11,060
So with that here, a couple of commas to reformat this,

92
00:07:11,340 --> 00:07:18,260
we have our map set up, now of course the key values here actually have to be between quotes, so

93
00:07:18,270 --> 00:07:20,400
let's make sure that's the case

94
00:07:20,400 --> 00:07:23,690
and now this can be sent as a post request.

95
00:07:23,700 --> 00:07:31,110
Right now, we're not waiting for the response though, so let's throw in an await here and actually store

96
00:07:31,110 --> 00:07:33,630
that in a variable.

97
00:07:33,630 --> 00:07:39,450
Now we should add error handling here and I'll do so in a second to make sure that we actually handle

98
00:07:39,450 --> 00:07:44,460
errors which could occur if you try to sign up for an e-mail address that already is signed up,

99
00:07:44,460 --> 00:07:47,100
so that's something I'll take care about in a second.

100
00:07:47,100 --> 00:07:56,390
For the moment, let's simply print json.decode response body to see what's in the body we get back,

101
00:07:56,430 --> 00:07:57,830
I mean we already see it here

102
00:07:57,900 --> 00:08:05,740
but to really see that this also works and that that we have that data here. Now we just have to call sign

103
00:08:05,740 --> 00:08:13,070
up and for that, we first of all have to provide this auth class or an object based on this auth class. The question

104
00:08:13,080 --> 00:08:15,470
as always is where and the

105
00:08:15,490 --> 00:08:22,480
AuthScreen would be the right place, if you really only want to send that request, then we could definitely

106
00:08:22,480 --> 00:08:26,470
just wrap our main widget here,

107
00:08:26,470 --> 00:08:33,220
let's say this stack here or the scaffold here, we could wrap this with a widget, with our change notifier

108
00:08:33,220 --> 00:08:40,240
provider widget, we could do that, that would be correct then but actually, we'll need AuthData in different

109
00:08:40,240 --> 00:08:45,880
parts of the app as well as it turns out, for example soon we'll have to decide what our home screen

110
00:08:45,880 --> 00:08:51,940
should be, should it be the AuthScreen or if the user is logged in, it should actually be our products overview

111
00:08:51,940 --> 00:08:52,350
screen.

112
00:08:52,720 --> 00:08:59,110
So we'll need information about the login status and also about the token and so on basically in our entire

113
00:08:59,110 --> 00:09:07,800
app and therefore, we will provide it as so often here in main.dart. There in the multi provider list here,

114
00:09:07,900 --> 00:09:15,400
I'll add another change notifier provider with a value and the value I provide here of course is my

115
00:09:15,410 --> 00:09:20,140
instantiated auth object. Now for this to work

116
00:09:20,150 --> 00:09:23,550
however, we need to import that auth object,

117
00:09:23,550 --> 00:09:28,080
so let me go here and import from the providers folder,

118
00:09:28,080 --> 00:09:35,460
the auth.dart file so that we can create such an object based on the auth class here and provide that.

119
00:09:35,550 --> 00:09:41,730
Now with that, we can tap into this to send our sign up request here in the 

120
00:09:41,730 --> 00:09:48,720
auth_screen.dart, there in the submit method, in our AuthCard state, I have login and sign up.

121
00:09:49,110 --> 00:09:54,220
So here in the sign up place, we want to use the provider package,  

122
00:09:54,370 --> 00:09:57,070
so let's import it, import

123
00:09:57,070 --> 00:10:04,380
package/provider and then provider.dart to use that auth object and send such a request.

124
00:10:04,380 --> 00:10:12,340
So now down there, we can use provider of for our auth object here of course, for our auth class and then

125
00:10:12,340 --> 00:10:13,900
pass in the context.

126
00:10:13,900 --> 00:10:19,450
Now obviously, we need to import the auth.dart file from the providers folder to unlock the auth class

127
00:10:19,450 --> 00:10:19,770
here,

128
00:10:20,410 --> 00:10:21,670
so let's do that too and

129
00:10:21,670 --> 00:10:27,130
let's add another import here at the top where we point at the providers folder and there, the auth.dart

130
00:10:27,130 --> 00:10:29,570
file and with that imported,

131
00:10:29,620 --> 00:10:32,100
let's go down again to that sign up logic,

132
00:10:32,110 --> 00:10:33,340
now this works

133
00:10:33,340 --> 00:10:42,500
and now here we can call sign up and forward e-mail and password which we can get from our form data

134
00:10:42,950 --> 00:10:49,460
because please remember that in the end all data is stored here in this AuthData map,

135
00:10:49,490 --> 00:10:52,470
that's where the data gets stored by our form fields

136
00:10:52,520 --> 00:10:53,970
when save is called.

137
00:10:54,140 --> 00:10:56,420
So here we can forward AuthData

138
00:10:56,510 --> 00:11:02,090
and then for the e-mail key and here, for the password key, these are the values we want to forward here.

139
00:11:02,090 --> 00:11:03,550
Now also important, here

140
00:11:03,560 --> 00:11:10,130
we can also set listen to false because I don't really want to set up a listener to the auth state here in

141
00:11:10,130 --> 00:11:10,690
this widget,

142
00:11:10,760 --> 00:11:13,130
I don't care about the concrete auth state in this widget,

143
00:11:13,250 --> 00:11:16,100
I just want to dispatch my sign up action here.

144
00:11:16,200 --> 00:11:21,910
The auth state will then be important in other widgets but not in this one actually because if I'm on the

145
00:11:21,910 --> 00:11:24,480
AuthScreen, I'm always unauthenticated.

146
00:11:24,490 --> 00:11:27,280
If that changes, I'll replace the entire screen,

147
00:11:27,310 --> 00:11:35,090
so inside of that screen, I don't care about changes. Also important, sign up of course returns a future

148
00:11:35,150 --> 00:11:39,420
because we're using async await in there and hence we can also await here,

149
00:11:39,470 --> 00:11:44,330
you just have to make sure that you add async here on the submit method and therefore this of course

150
00:11:44,330 --> 00:11:50,130
returns a future which eventually yields nothing and then we can call await here which is important

151
00:11:50,190 --> 00:11:54,280
to make sure that we also show the loading spinner in between.

152
00:11:54,400 --> 00:12:03,400
Now you can do a full refresh here and give this a try. For that, go to sign up mode and then enter an e-mail

153
00:12:03,400 --> 00:12:09,310
address and it should be a valid one because whilst you can trick our local validation here, the Firebase

154
00:12:09,370 --> 00:12:16,270
server also has its own validation and will deny invalid emails and also enter a password which is at

155
00:12:16,270 --> 00:12:22,240
least six characters long. Enter the same password here for confirming

156
00:12:22,240 --> 00:12:27,460
and with that, click sign up, you see the spinner and then for now nothing

157
00:12:27,460 --> 00:12:32,970
but here in your debug console, you should see the response by Firebase which looks pretty good. ID

158
00:12:33,010 --> 00:12:37,330
token is a pretty long string, that is this token string that is generated.

159
00:12:37,330 --> 00:12:42,500
You also see the e-mail you entered again, you see the refresh token and then the rest of the response

160
00:12:42,500 --> 00:12:44,680
is cut off because the token is so long

161
00:12:44,830 --> 00:12:48,170
but this clearly proves that it in general worked.

162
00:12:48,190 --> 00:12:49,930
So now we're sending a sign up request,

163
00:12:49,930 --> 00:12:55,630
we can also see that it worked in the Firebase web console, there if you go to the authentication area

164
00:12:55,630 --> 00:13:01,300
again under users, click refresh if you don't see your user yet and then you should see the user you

165
00:13:01,300 --> 00:13:07,330
just created. Here by the way, you always can delete the user in case you want to test that creation

166
00:13:07,330 --> 00:13:10,000
flow again with the same e-mail.

167
00:13:10,240 --> 00:13:18,220
This is how we sign a user up, the next step of course is that we also enable sign in before we then

168
00:13:18,220 --> 00:13:23,290
make sure that we change what we see on the screen based on the authentication flow and of course we

169
00:13:23,290 --> 00:13:25,090
also want to handle errors,

170
00:13:25,090 --> 00:13:30,280
that's also important because there is a lot that can go wrong when sending the sign up and login

171
00:13:30,280 --> 00:13:31,000
requests.

