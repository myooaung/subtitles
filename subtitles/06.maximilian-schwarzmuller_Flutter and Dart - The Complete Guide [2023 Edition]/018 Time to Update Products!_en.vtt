WEBVTT
1
00:00:02.190 --> 00:00:03.270
To edit products,

2
00:00:03.270 --> 00:00:07.330
we first of all need to change how this edit product screen is loaded right

3
00:00:07.380 --> 00:00:11.670
because right now we always load with the assumption that we're creating a new product,

4
00:00:11.670 --> 00:00:13.180
for example edited product,

5
00:00:13.230 --> 00:00:19.220
I initialize this to be an empty product or a product with a couple of empty values here.

6
00:00:19.220 --> 00:00:24.910
Now let's first of all think about how this page should open when we want to edit a product.

7
00:00:25.020 --> 00:00:32.100
Well for that, on the user product screen where we have this edit button, to be precise in the user product

8
00:00:32.460 --> 00:00:36.860
item widget there where we have this edit button, here in onPressed,

9
00:00:36.870 --> 00:00:47.350
I of course want to use my navigator and then simply push, not push replace but push my named route

10
00:00:47.380 --> 00:00:49.240
which of course should be that

11
00:00:49.240 --> 00:00:50.480
edit route.

12
00:00:50.500 --> 00:00:58.290
So here, I can import from the screens folder the edit product screen and that's what I want to push here.

13
00:00:58.290 --> 00:01:05.550
So here, I want to push the edit product screen routeName but here, I then went to forward an argument

14
00:01:05.580 --> 00:01:10.530
as well because I want to let this screen know about which product I want to edit,

15
00:01:10.620 --> 00:01:13.430
so I want to forward the ID of that product.

16
00:01:13.500 --> 00:01:21.000
So here in the user product item, I expect to also get that ID, so I'll add this as an argument which

17
00:01:21.000 --> 00:01:27.090
I need to receive which I then store in this property and then we can forward this ID as an argument

18
00:01:27.240 --> 00:01:34.530
so that indeed edit product screen, we can load the product or search the product with that ID. For

19
00:01:34.530 --> 00:01:39.930
that, we have to go to the user product screen where we use the user product item and now here we have

20
00:01:39.930 --> 00:01:41.940
to pass the ID of the product.

21
00:01:42.050 --> 00:01:43.470
Now that's not too hard,

22
00:01:43.470 --> 00:01:49.470
we can simply access the product where we're looking at when we're building this item here and there,

23
00:01:49.470 --> 00:01:53.670
we can pass the ID as a value to user product item.

24
00:01:53.670 --> 00:02:00.300
So with that, this ID is forwarded as an argument in our routing action here and therefore we can extract

25
00:02:00.300 --> 00:02:02.550
it in the edit product screen.

26
00:02:02.820 --> 00:02:10.810
Now a perfect place to extract it would be in initState but as you learned earlier in this course, modal

27
00:02:11.170 --> 00:02:18.790
route of context which we use to get the settings and then the arguments doesn't work here in that state,

28
00:02:19.300 --> 00:02:20.290
so we can't use it.

29
00:02:20.320 --> 00:02:21.850
Other than that, it would be perfect,

30
00:02:21.880 --> 00:02:27.070
so if you had the data from some other source instead from our routing action, you could definitely use

31
00:02:27.090 --> 00:02:28.360
initState

32
00:02:28.360 --> 00:02:35.960
but we can simply use didChangeDependencies which also runs before build is executed

33
00:02:36.230 --> 00:02:43.670
and I just want to make sure that I don't run this too often, so I'll add a new variable, isInit, which

34
00:02:43.700 --> 00:02:50.900
initially is true so that I only run the following logic if isInit is true

35
00:02:50.900 --> 00:02:56.750
and when we ran this for the first time because didChangeDependencies will run multiple times, I will

36
00:02:56.750 --> 00:02:59.540
simply set isInit to false

37
00:02:59.540 --> 00:03:06.050
so that for future executions of didChangeDependencies, we don't reinitialize our form. Now with that,

38
00:03:06.080 --> 00:03:15.600
we can extract our product ID here from the modal route by using of context there, tapping into

39
00:03:15.600 --> 00:03:20.250
the settings and there into the arguments and we know that this will be a string because the arguments

40
00:03:20.250 --> 00:03:29.070
we receive here is only one piece of data and that of course is the ID we're forwarding here. So that's

41
00:03:29.070 --> 00:03:35.760
what we extract here and with the product ID, we can of course use our provided products to find the

42
00:03:35.760 --> 00:03:36.860
product there.

43
00:03:37.230 --> 00:03:44.700
For that, we can use provider of context and of course, let it know that we are looking for the products

44
00:03:44.730 --> 00:03:50.760
class or for the products object and there, we already added a find by ID method earlier in the course.

45
00:03:51.330 --> 00:03:53.480
We can use that to get a product with that ID

46
00:03:53.550 --> 00:03:59.550
and of course, make sure you set listen to false here so that we only fetch this one time and we don't

47
00:03:59.550 --> 00:04:07.950
set up an ongoing listener. With that here, we get our product that we're looking for and this is now the

48
00:04:07.950 --> 00:04:10.500
product we want to use to initialize

49
00:04:10.500 --> 00:04:12.660
the edited product.

50
00:04:12.660 --> 00:04:13.440
So I'll set

51
00:04:13.530 --> 00:04:21.760
edited product equal to product or we immediately set edited product equal to what we retrieve here

52
00:04:21.930 --> 00:04:22.980
at this point.

53
00:04:23.930 --> 00:04:30.910
So with that, we're loading the product we need from our list of products for that given ID

54
00:04:31.130 --> 00:04:33.860
and we initialize the edited product with that data.

55
00:04:33.950 --> 00:04:41.390
The missing piece is that we now need to initialize all the form inputs with some default values.

56
00:04:41.390 --> 00:04:49.160
So down there in the build method, I want to make sure that this text form field has either an empty

57
00:04:49.220 --> 00:04:56.870
default value if we're adding a new product or the existing title of the product we're editing. Now an easy

58
00:04:56.870 --> 00:05:05.060
way of doing that is to add yet another variable here, initValues, that could just be a map but you

59
00:05:05.060 --> 00:05:11.030
could also use a new object or a new class which you create for that purpose, where I have a title key

60
00:05:11.420 --> 00:05:18.820
with an empty value map to it, a description key with an empty value, a price key with an empty string

61
00:05:18.830 --> 00:05:21.150
and that's important, a string, not a number

62
00:05:21.410 --> 00:05:27.690
and also the imageUrl which holds an empty string.

63
00:05:27.840 --> 00:05:34.230
These are my initValues which are set up for a new product and I will simply override them here in

64
00:05:34.230 --> 00:05:40.680
didChangeDependencies if we have an edited product which we clearly have at this point here.

65
00:05:40.680 --> 00:05:44.370
So here, we can now set the initValues

66
00:05:46.800 --> 00:06:01.230
equal to a new map, where I set the title equal to editedProduct.title, the description equal to

67
00:06:01.330 --> 00:06:12.390
editedProduct.description, the price equal to editedProduct.price.toString however, I want

68
00:06:12.390 --> 00:06:21.770
to store this as a string and output this as a string in the input and also the imageUrl is set

69
00:06:21.770 --> 00:06:25.030
to editedProduct.imageUrl.

70
00:06:25.040 --> 00:06:30.830
I use strings only here because the inputs, the text form fields only work with strings,

71
00:06:30.830 --> 00:06:35.690
you also might remember that for the validator, you always get back a string because the text inputs

72
00:06:35.720 --> 00:06:37.860
only work with strings, even if it's a number,

73
00:06:37.880 --> 00:06:42.860
you have to do that conversion and since they receive and work with strings, I convert my number to a

74
00:06:42.860 --> 00:06:45.960
string before I pass it into the text form fields.

75
00:06:46.190 --> 00:06:49.100
Before we do any passing, there's one important check

76
00:06:49.100 --> 00:06:54.620
I should add here though. When we're extracting the product ID, we might not have one of course,

77
00:06:54.650 --> 00:07:01.850
we only will have one if we indeed did load this route with an argument. didChangeDependencies will always run

78
00:07:01.850 --> 00:07:05.770
when this page is opened though, so also when we add a new product.

79
00:07:05.840 --> 00:07:12.100
Now when we add a new product, then we reached that route because on the user product screen, we pressed

80
00:07:12.110 --> 00:07:19.490
that plus, this add icon here in our action bar and here, I'm not passing any arguments to the route. So

81
00:07:19.490 --> 00:07:25.550
retrieving arguments actually may fail and therefore on the edit product screen, when we retrieve the

82
00:07:25.550 --> 00:07:26.420
product here,

83
00:07:26.570 --> 00:07:30.560
we absolutely have to check whether we do have a product before we continue.

84
00:07:33.300 --> 00:07:36.000
So I'll check if product ID

85
00:07:37.760 --> 00:07:44.360
is unequal to null which means we do have a product ID and only then I want to grab my edited product

86
00:07:44.420 --> 00:07:46.360
and override the initValues,

87
00:07:46.400 --> 00:07:52.960
otherwise I'll not do that. In all circumstances, isInit should be set to false thereafter though.

88
00:07:53.000 --> 00:07:55.690
So now with that, we're initializing the values differently

89
00:07:55.700 --> 00:08:02.060
if we did find an ID and if we did load a product therefore and now the initValues can be used here

90
00:08:02.390 --> 00:08:10.740
in our build method or in our widget tree. On every text form field, you can set an initial value and

91
00:08:10.740 --> 00:08:17.910
that should now be initValues title and so on for all your text form fields and this will be stored

92
00:08:17.970 --> 00:08:23.050
as an initial value in that field which you can then build up on.

93
00:08:23.070 --> 00:08:32.190
So we do the same here and access the price and do the same down here to also access the description

94
00:08:32.429 --> 00:08:38.299
and of course, do the same down there for the image to access our imageUrl.

95
00:08:38.309 --> 00:08:45.120
And now with that if we do a full restart here, maybe the full refresh I should say and we go

96
00:08:45.120 --> 00:08:52.710
to manage products and I added the red shirt, I get an error and this error, if we have a look at the

97
00:08:52.710 --> 00:09:00.930
error message, stems from the line here where I actually do set an initial value for my imageUrl

98
00:09:01.050 --> 00:09:06.000
and the problem here is that I also use a controller for the imageUrl. Now you can't use both,

99
00:09:06.000 --> 00:09:10.080
if you have a controller, you can't set the initial value, instead

100
00:09:10.100 --> 00:09:15.300
then you should set the controller to an initial value and that will be reflected back into the text

101
00:09:15.300 --> 00:09:18.510
form field and what you see on the screen automatically.

102
00:09:18.510 --> 00:09:25.110
So therefore here, we should go up to the place where we set all the initial values in didChangeDependencies

103
00:09:25.440 --> 00:09:27.640
and not do this for the imageUrl,

104
00:09:27.670 --> 00:09:34.970
instead simply set imageUrl here to an empty string or to null and rather,

105
00:09:34.980 --> 00:09:39.940
reach out to the imageUrl controller and set the text here equal to the editedProduct.imageUrl

106
00:09:39.980 --> 00:09:42.560
and this is how you should do that.

107
00:09:42.720 --> 00:09:49.810
If you do that and you do a hot refresh here and we now go to manage products and click edit,

108
00:09:50.210 --> 00:09:53.480
now this works and you see that's all prepopulated.

109
00:09:53.480 --> 00:09:55.880
The problem now would be if I hit save,

110
00:09:55.880 --> 00:09:58.230
this would be added as another new product

111
00:09:58.400 --> 00:09:59.830
and of course that's not what I want,

112
00:10:00.080 --> 00:10:07.770
I want to edit the existing product instead. To edit the existing product instead of to create a new

113
00:10:07.770 --> 00:10:14.580
product, we have of course this saveForm method where we do call add product in the end

114
00:10:14.610 --> 00:10:20.520
and that's the place where we need to step in and do something else because there, I want to check if

115
00:10:21.200 --> 00:10:27.210
edited product has an ID because that's a good criteria for finding out whether we're editing

116
00:10:27.210 --> 00:10:33.290
or not. Edited product ID is only set

117
00:10:33.290 --> 00:10:40.160
if we loaded a product because we received an ID as an argument because if we receive an ID as an argument,

118
00:10:40.430 --> 00:10:46.340
we kick off this whole logic here where we find a product by ID and that's our edited product then

119
00:10:46.460 --> 00:10:47.810
and this obviously has an ID,

120
00:10:47.820 --> 00:10:52.110
we're finding it by ID. Instead

121
00:10:52.120 --> 00:10:57.280
if you're adding a new product, edited product is set equal to a product where we set the ID to

122
00:10:57.280 --> 00:10:57.670
null,

123
00:10:57.700 --> 00:11:03.520
so where we don't have an ID and therefore this is a great check. If we have an ID, so if this is

124
00:11:03.520 --> 00:11:12.480
not equal to null, then I know that I'm editing. If we have an ID and it's not equal to null, then this

125
00:11:12.480 --> 00:11:14.900
product existed before,

126
00:11:14.910 --> 00:11:16.470
otherwise we're adding,

127
00:11:16.470 --> 00:11:24.240
so in the else case, I want to call add product, in the edit case I want to update an existing product.

128
00:11:26.010 --> 00:11:31.650
And for that, let's go to products and make sure we have a method that allows us to update.

129
00:11:31.810 --> 00:11:38.470
So a new method, update product, which certainly will need the ID of that product we want to update and

130
00:11:38.470 --> 00:11:44.360
then also the new product or whatever you want to name it.

131
00:11:44.440 --> 00:11:49.290
Now here, we can first of all look for that product with that ID in our items,

132
00:11:49.290 --> 00:11:55.510
so here in items, we can get the index where a certain condition is are met.

133
00:11:55.510 --> 00:12:00.250
Again this takes a function which runs for every item and I want to check if product ID is equal to

134
00:12:00.250 --> 00:12:07.500
the ID I'm getting here and this will give me the prodIndex in my list of items and I'll need that

135
00:12:07.510 --> 00:12:14.260
index again to then replace that item at that index with a new product because I then want to say items

136
00:12:14.500 --> 00:12:17.840
for that prodIndex I found, there

137
00:12:17.860 --> 00:12:23.500
the item which is currently stored at that index should be overridden by a new product here in the

138
00:12:23.500 --> 00:12:23.770
end,

139
00:12:23.800 --> 00:12:29.470
right, by the product I'm getting because this will then be the new product and therefore this is what

140
00:12:29.470 --> 00:12:35.590
I want to store here and thereafter of course call notify listeners. Now we could also add an if check

141
00:12:35.590 --> 00:12:39.570
to first of all check if we found a product with that index,

142
00:12:39.580 --> 00:12:46.060
so if prodIndex is greater than zero or greater equal than zero, it should be and that avoids that

143
00:12:46.060 --> 00:12:50.890
we try to update products which we don't have, though in this app, we shouldn't be able to get into

144
00:12:50.890 --> 00:12:56.140
a position where we try to update a product for which we don't have an ID.

145
00:12:56.140 --> 00:13:00.060
So this is a check which currently shouldn't really be required.

146
00:13:00.070 --> 00:13:06.240
Now one important note about setting our product at this index equal to the product we're getting here,

147
00:13:06.380 --> 00:13:14.210
where is this new product coming from? Well update product is the method which I call from inside edit

148
00:13:14.210 --> 00:13:14.740
product.

149
00:13:14.750 --> 00:13:20.840
So the idea here is that I have the same logic as down there where I add a product with provider

150
00:13:20.840 --> 00:13:22.430
of, listen to false

151
00:13:22.580 --> 00:13:29.030
but then I call update product here and I don't just forward the edited product but of course also the

152
00:13:29.390 --> 00:13:33.510
edited product ID as the identifier.

153
00:13:33.560 --> 00:13:39.250
Now the problem with the edited product is that I do initialize it here,

154
00:13:39.260 --> 00:13:46.430
I retrieve it from my store so to say, from my container, from my provider and that of course contains

155
00:13:46.430 --> 00:13:54.350
the ID and it also contains my favorite status of the user who's logged in, check this as a favorite

156
00:13:54.350 --> 00:13:55.280
or not.

157
00:13:55.280 --> 00:14:03.470
Now one problem we'll have is that I constantly override this edited product in all my onSaved methods

158
00:14:03.470 --> 00:14:09.410
with new products which always set the ID to null and say nothing about the favorite status which

159
00:14:09.410 --> 00:14:15.110
means that we'll use the default favorite status of false to recreate these products.

160
00:14:15.110 --> 00:14:22.220
Therefore, my ID gets lost and the previous favorite status gets lost. The solution is to set this equal

161
00:14:22.370 --> 00:14:31.030
to editedProduct.Id and also set isFavorite equal to editedProduct.isFavorite

162
00:14:31.210 --> 00:14:35.430
and do that for all the places where we create a new product,

163
00:14:35.560 --> 00:14:42.580
so also down there and for the description as well

164
00:14:42.740 --> 00:14:49.610
and of course also for the imageUrl, there at the bottom, here,

165
00:14:49.730 --> 00:14:52.140
I also want to store the correct data.

166
00:14:54.200 --> 00:15:01.590
With that, we make sure that we don't lose the ID and the favorite status which would be bad and with

167
00:15:01.650 --> 00:15:07.380
all of that, here we should be able to now submit that form and either update an existing product or

168
00:15:07.440 --> 00:15:13.880
add a new product. Let's try this and let's also see if our data is preserved correctly. For that

169
00:15:13.880 --> 00:15:16.480
first of all, I'll favorite the red shirt,

170
00:15:16.640 --> 00:15:22.610
then go to manage product and click edit here and add an exclamation mark and change the price to

171
00:15:22.610 --> 00:15:31.620
39, hit save, the exclamation mark is there and if I go back to my shop now, I have my favorite status

172
00:15:31.620 --> 00:15:37.740
still, the exclamation mark is here and we see the new price in the details page. So that all works, this

173
00:15:37.740 --> 00:15:43.980
is updated correctly and therefore, we can now edit this too. If we add a new product, just to confirm that

174
00:15:43.980 --> 00:15:45.990
this also still works,

175
00:15:46.260 --> 00:15:53.690
this is a test and I use this good old dummy image which I used before,

176
00:15:56.360 --> 00:16:01.640
then indeed this is added as a new product and no existing product got changed and of course, we see

177
00:16:01.640 --> 00:16:03.620
that new product here as well now

178
00:16:03.740 --> 00:16:10.490
and then of course we can also go ahead and edit this new product if we wanted to.

179
00:16:10.490 --> 00:16:12.790
So that's all working as it should,

180
00:16:12.800 --> 00:16:17.680
with that let's make sure that we can also delete our products with a click on the trash button here.

