WEBVTT
1
00:00:02.380 --> 00:00:09.700
To have some items below our summary card, I'll first of all add a SizedBox with a height of 10 to have

2
00:00:09.700 --> 00:00:18.530
some spacing and then add a ListView here, which should render all the items in our cart.

3
00:00:18.540 --> 00:00:22.180
Now you learned that a ListView directly inside of a column doesn't work

4
00:00:22.380 --> 00:00:27.660
but all we have to do is wrap it with an expanded widget which ensures that we take as much space as

5
00:00:27.660 --> 00:00:33.740
is left in this column, instead of as much space as you can get and then use our ListView in here.

6
00:00:33.750 --> 00:00:38.640
Now we could have an infinite amount of cart items, so I'll use ListView.builder here to build this

7
00:00:38.850 --> 00:00:41.250
for potential performance improvements

8
00:00:41.490 --> 00:00:47.140
and as you learned, that takes two important things - the item count and the itemBuilder.

9
00:00:47.290 --> 00:00:51.000
Now the item count needs to know how many items we have in our cart,

10
00:00:51.060 --> 00:00:54.770
conveniently I have access to the cart here, thanks to provider of,

11
00:00:55.290 --> 00:01:03.590
so down there, we just need cart.itemCount and the way I set this up,

12
00:01:03.600 --> 00:01:05.890
this simply gives us the amount of items.

13
00:01:05.940 --> 00:01:11.220
If you use the different logic here, where you summed up the quantities, then of course you can't use

14
00:01:11.220 --> 00:01:18.540
your item count getter and instead, here you would have to use items.length, right?

15
00:01:18.580 --> 00:01:22.870
So that is in the end the logic you want to have here, items.length.

16
00:01:23.220 --> 00:01:28.780
Now besides the item count, we need the itemBuilder which builds us the list entries here and there, we

17
00:01:28.780 --> 00:01:34.870
get context and we get the index and we need to return the widget that should be built for every item

18
00:01:34.870 --> 00:01:36.980
in the cart.

19
00:01:36.990 --> 00:01:42.360
Now we could do this in line but just as with the product item in the product grid, I'll add a

20
00:01:42.360 --> 00:01:48.240
cart_item.dart file in the widgets folder and in there, create a new stateless widget which is our cart item and

21
00:01:48.240 --> 00:01:50.660
that's the item I want I build. For that,

22
00:01:50.670 --> 00:01:55.920
let's import material.dart from the Flutter package and let's now define how such a cart item should

23
00:01:55.920 --> 00:02:00.690
look like. As always, your imagination is the limit here,

24
00:02:00.710 --> 00:02:02.630
you can build this however you want,

25
00:02:02.630 --> 00:02:09.440
I will simply create a couple of cards, so every cart item will be in a card, around that card I want

26
00:02:09.440 --> 00:02:10.979
to have some margin

27
00:02:11.150 --> 00:02:17.150
and now here I'll use symmetric margin distribution, which means I want to have different margins left

28
00:02:17.210 --> 00:02:23.810
and right and top and bottom. So horizontally, I want to have a margin of 15 which matches the margin

29
00:02:23.870 --> 00:02:27.980
I set up for my summary card up there in the cart

30
00:02:27.980 --> 00:02:35.360
screen and vertically, I want to have a margin of only 4,

31
00:02:35.380 --> 00:02:45.450
so between my different cart items now. Now the child in that cart will be a padding, so to set up some

32
00:02:45.450 --> 00:02:53.780
padding inside of the cart where I use EdgeInsets.all 8 and then the child of the padding is the

33
00:02:53.780 --> 00:02:56.110
actual content for each cart item

34
00:02:56.330 --> 00:02:58.060
and there, I'll simply use a ListTile

35
00:02:58.070 --> 00:03:01.990
but of course you can use any widget or any structure you want there,

36
00:03:01.990 --> 00:03:09.190
you can build your own row, column, container, whatever you need. Here in my ListTile, at the beginning,

37
00:03:09.210 --> 00:03:17.760
I want to have the sum for this cart item we're displaying and I want to display one list item for every

38
00:03:17.760 --> 00:03:25.830
product we have in the cart and then show its price and its quantity. So here, I'll use a CircleAvatar

39
00:03:26.070 --> 00:03:35.800
again to display the information about the price with an escaped dollar sign and then some interpolation

40
00:03:36.060 --> 00:03:40.500
and now that's simply some data which I expect to get in this cart item. There,

41
00:03:40.500 --> 00:03:49.830
we will need a couple of pieces of information, we'll need to get the ID of that cart item, we'll need

42
00:03:49.830 --> 00:04:00.860
to get the price, we'll need to get the quantity and we'll probably also need the title of the product.

43
00:04:01.160 --> 00:04:07.760
So cart item will of course have a constructor, again with named or positional arguments where all these

44
00:04:07.940 --> 00:04:11.490
things, all these pieces of information need to be provided

45
00:04:11.510 --> 00:04:17.709
and I'm going with a positional constructor here. Now with this configured down there, I of course simply

46
00:04:17.709 --> 00:04:25.000
want to refer to my price and therefore since it's only one word, we don't need the curly braces and to

47
00:04:25.000 --> 00:04:31.850
string is called automatically there. Now as a title, I want to show the title of the product,

48
00:04:31.940 --> 00:04:41.370
so another text widget where I simply refer to title and as sub-title, we could calculate a total price

49
00:04:41.670 --> 00:04:50.920
which automatically is quantity times the price. So we could have a text in here where we say total, then

50
00:04:50.920 --> 00:04:56.880
an escaped dollar sign to really print a dollar sign and then with string interpolation,

51
00:04:56.880 --> 00:05:06.290
calculate the total amount for this item and that will simply be the price times the quantity,

52
00:05:10.180 --> 00:05:11.130
right?

53
00:05:11.170 --> 00:05:20.780
Let's wrap this into parentheses here and last but not least, as a trailing element here, I'll just output

54
00:05:20.780 --> 00:05:28.910
the quantity we have so that we can also see that, another text widget where I simply want to output the

55
00:05:28.910 --> 00:05:36.600
quantity and then an x to show it as a multiplicator sign.

56
00:05:36.620 --> 00:05:41.150
So this is how a cart item could look like, how my cart item will look like. In a cart screen,

57
00:05:41.150 --> 00:05:48.650
we can now use that, so in cart screen, let's import from the widgets folder the cart_item.dart file

58
00:05:48.650 --> 00:05:53.680
and with that imported, it's the cart item I want to return in the builder down there.

59
00:05:53.690 --> 00:05:56.500
So in the itemBuilder here, we can return the cart item

60
00:05:56.600 --> 00:06:01.640
and of course, we now have to pass all that data into cart item which we are expecting there,

61
00:06:01.640 --> 00:06:04.100
so ID, price, quantity and title.

62
00:06:04.370 --> 00:06:05.720
That is what we expect here,

63
00:06:05.750 --> 00:06:07.570
that is what we need to pass in.

64
00:06:07.610 --> 00:06:15.410
Of course, you could now also set up a provider for every cart item if that would be a standalone listenable

65
00:06:15.460 --> 00:06:22.070
provided class in your app which it isn't for me, cart item here doesn't have a ChangeNotifier. We could

66
00:06:22.070 --> 00:06:26.350
of course provide it without that but do you really need to do that actually?

67
00:06:26.590 --> 00:06:31.850
I'm fine with having my cart item which simply receives the data I want to pass in here because

68
00:06:31.850 --> 00:06:39.080
here in cart screen of course, we do have our cart and there, we do have the cart items and therefore

69
00:06:39.080 --> 00:06:47.760
in here, I can simply pass in cart items for the given index.id and then repeat the same for the,

70
00:06:48.170 --> 00:06:51.900
what's the second thing cart item takes?

71
00:06:51.950 --> 00:06:55.120
The price, quantity and title, so price, quantity, title.

72
00:06:55.730 --> 00:07:01.100
So here, I can then access the price and then also cart items

73
00:07:04.560 --> 00:07:05.550
quantity

74
00:07:08.120 --> 00:07:11.770
and last but not least, the title.

75
00:07:11.900 --> 00:07:18.730
Now we have one issue here, cart item is now a name I use twice. Here in the cart.dart file, in providers,

76
00:07:18.740 --> 00:07:22.130
I have a cart item class and here, the cart_item.dart file,

77
00:07:22.130 --> 00:07:28.040
I also have a cart item class. Now in my cart screen, I'm importing both, I importing my providers

78
00:07:28.070 --> 00:07:34.000
cart.dart file which has one cart item and I'm importing my cart_item.dart file which has the other one.

79
00:07:34.130 --> 00:07:42.470
Now in such cases, there are a couple of solutions, you could add as here and name this ci for example

80
00:07:42.470 --> 00:07:45.170
and that would be a prefix which you could now use.

81
00:07:45.170 --> 00:07:46.540
So now you would use here

82
00:07:46.560 --> 00:07:52.210
ci.cartItem and now Dart would be able to know from which file you want to use cart item,

83
00:07:52.220 --> 00:07:54.710
so using a prefix is one option.

84
00:07:54.710 --> 00:07:59.710
Or maybe you only need one feature of a file in another file and that's the case here,

85
00:07:59.840 --> 00:08:04.880
from cart.dart, I'm not interested in the cart item in my cart screen,

86
00:08:04.880 --> 00:08:10.580
instead in the cart screen, I'm only interested in the cart class, which is part of the cart.dart file.

87
00:08:10.580 --> 00:08:16.160
Oh man, that are many cards but I'm only interested in this class here in my cart.dart file in the cart

88
00:08:16.160 --> 00:08:17.320
screen file.

89
00:08:17.360 --> 00:08:19.400
So here, we can use the show keyword

90
00:08:19.610 --> 00:08:20.520
and then let Dart

91
00:08:20.520 --> 00:08:27.080
know that we're only interested here in cart and it won't import the cart item from the cart.dart file

92
00:08:27.380 --> 00:08:31.010
and therefore, it will only import it from the cart_item.dart file

93
00:08:31.010 --> 00:08:40.360
and we avoid that name clash. With that, let's do a full refresh and let's see whether that works.

94
00:08:40.360 --> 00:08:43.809
Let's add the trousers and the red shirt to the cart,

95
00:08:43.900 --> 00:08:49.590
go to the cart screen and I get an error, the getter ID was called on null.

96
00:08:49.590 --> 00:08:56.580
Now the total seems to be good but what's wrong with the ID here which I execute on cart items?

97
00:08:56.640 --> 00:09:05.370
It's a subtle error and it's related to the fact that cart items here of course refers to our map, right?

98
00:09:05.670 --> 00:09:06.300
In the cart

99
00:09:06.300 --> 00:09:14.200
class items which we return here with the items getter is a map. Now here,

100
00:09:14.210 --> 00:09:20.900
I'm actually interested in the values which are stored in that map. Hence here on cart items, you can

101
00:09:20.900 --> 00:09:28.960
access a values property which gives you an iterable which you can convert to a list

102
00:09:29.090 --> 00:09:36.350
and now that's actually the list of values we need here on which we can then access the i'th element.

103
00:09:36.400 --> 00:09:38.340
So that's actually what I want to extract here,

104
00:09:38.390 --> 00:09:46.850
values to list on my cart items so that I operate on a list of values, so that I only work with

105
00:09:46.850 --> 00:09:49.700
the concrete values stored in a map

106
00:09:49.700 --> 00:09:53.070
and now there, I'll then have ID and so on available.

107
00:09:53.090 --> 00:09:58.550
So with that if we go back to the app and we now start adding items to the cart again, now we can see

108
00:09:58.550 --> 00:10:05.840
them here. Now to fit the labels or the prices here into our circle avatars,

109
00:10:05.840 --> 00:10:13.480
let's go to the cart item, to the widget there and then in CircleAvatar, we can of course wrap that text

110
00:10:13.480 --> 00:10:19.710
with FittedBox which should ensure that this actually fits in there.

111
00:10:19.740 --> 00:10:26.490
So now if I add a couple of items to the cart, this looks better and now we're squeezing this into our

112
00:10:26.490 --> 00:10:27.480
CircleAvatar.

113
00:10:27.480 --> 00:10:29.840
We can also see, here we see the individual price,

114
00:10:29.850 --> 00:10:30.880
here we see the sum,

115
00:10:30.900 --> 00:10:34.490
the title, the quantity. That looks decent to me,

116
00:10:34.560 --> 00:10:37.630
obviously you can always fine tune this to your likings.

117
00:10:37.740 --> 00:10:39.260
I'm happy with this,

118
00:10:39.300 --> 00:10:42.650
maybe we add some padding around this text here.

119
00:10:45.730 --> 00:10:56.590
So around that FittedBox, let's add a new widget padding here with padding set to EdgeInsets.all 10

120
00:10:56.590 --> 00:10:57.620
maybe,

121
00:10:57.830 --> 00:10:58.870
I think that's too much,

122
00:10:58.870 --> 00:11:04.090
let's go with 5 and now if we give that a try,

123
00:11:04.120 --> 00:11:04.590
yes

124
00:11:04.630 --> 00:11:06.120
now that looks even better.

125
00:11:06.160 --> 00:11:09.460
So now we have this setup here which works for me,

126
00:11:09.490 --> 00:11:14.770
let's next make sure that we can actually also swipe here to remove items from the cart.

