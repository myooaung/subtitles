1
00:00:02,170 --> 00:00:09,550
Sometimes you don't want to extract something into a new widget but maybe you want to clean up your

2
00:00:09,550 --> 00:00:13,040
widget tree down there and that can be shown in the main.dart file.

3
00:00:13,160 --> 00:00:16,050
There we have a relatively long widget tree,

4
00:00:16,219 --> 00:00:24,250
also because we have these checks for if is landscape, is not landscape, is not landscape, is landscape.

5
00:00:25,140 --> 00:00:34,460
So essentially, you could say the content of our widget tree here, of the MyHomePageState, basically only

6
00:00:34,460 --> 00:00:37,540
depends on the question whether we're in landscape mode or not.

7
00:00:37,610 --> 00:00:42,410
We always have the SingleChildScrollView and the column but what's inside of the column is totally different.

8
00:00:43,370 --> 00:00:49,310
In such a case, of course you could either put the landscape mode into a separate widget and the non-landscape

9
00:00:49,310 --> 00:00:55,100
mode in the separate widget but you could also argue that these are not really separate widgets,

10
00:00:55,100 --> 00:01:01,970
they're all part of one and the same widget, it's just a different alignment or a difference regarding how

11
00:01:01,970 --> 00:01:03,810
they are displayed.

12
00:01:03,860 --> 00:01:09,530
Still if you want to clean up your widget tree down there, you can add a so-called builder method.

13
00:01:09,530 --> 00:01:15,470
With that, I'm not meaning functions or arguments, like here on showModalBottomSheet which also are

14
00:01:15,470 --> 00:01:17,300
builder functions here

15
00:01:17,300 --> 00:01:23,600
but I mean a method you add to your own widget, which is only called internally, which returns a widget

16
00:01:23,600 --> 00:01:23,930
in the end,

17
00:01:23,960 --> 00:01:26,050
that's important, it does not return void,

18
00:01:26,120 --> 00:01:28,670
it returns a widget and you give it a name like

19
00:01:31,160 --> 00:01:45,260
buildLandscapeContent and maybe also a second widget, a widget which builds the portrait content

20
00:01:45,320 --> 00:01:46,660
like this.

21
00:01:46,820 --> 00:01:51,380
The idea with these methods is that you can simply call these methods from inside your build method

22
00:01:51,380 --> 00:01:58,070
down there and you simply outsource content you had in your build method down there into these methods,

23
00:01:58,160 --> 00:02:01,720
so that the widget tree that is created is exactly the same.

24
00:02:01,760 --> 00:02:10,150
It's exactly the same result but your code hopefully is a bit more readable. So what you can do here

25
00:02:10,690 --> 00:02:16,640
is you can grab this row for is landscape, cut it here

26
00:02:17,460 --> 00:02:25,380
so that we don't have it here in the build method and instead, return this here for build landscape

27
00:02:25,560 --> 00:02:30,960
content. So in buildLandscapeContent, I'm returning exactly the same thing I had in my build method

28
00:02:30,960 --> 00:02:38,040
down there but down there, now instead of having all the content here, I just call

29
00:02:38,040 --> 00:02:43,200
_buildLandscapeContent and important, you need to execute this by calling or by adding parentheses here because when

30
00:02:43,200 --> 00:02:45,770
Dart parses this, this should be executed,

31
00:02:45,840 --> 00:02:50,310
this then returns a widget and that's the widget which is inserted here into the widget tree.

32
00:02:50,340 --> 00:02:51,960
So same result as before

33
00:02:52,020 --> 00:02:56,730
but of course now, easier to read. The same here if we don't have landscape mode,

34
00:02:56,730 --> 00:02:58,030
so if we are in portrait mode.

35
00:02:58,150 --> 00:03:05,330
Let's grab that and return this here in buildPortraitContent.

36
00:03:07,970 --> 00:03:12,720
Now important, here we rely on the media query and on the appBar,

37
00:03:12,790 --> 00:03:15,900
so we should accept both here as input.

38
00:03:15,900 --> 00:03:19,570
Now media query here is actually of type MediaQueryData,

39
00:03:20,170 --> 00:03:29,360
so here we have MediaQueryData media query which we're getting and appBar is of type appBar, so here

40
00:03:29,450 --> 00:03:31,290
we should accept this argument too.

41
00:03:31,310 --> 00:03:34,850
So these are arguments which are now passed to buildPortraitContent

42
00:03:34,850 --> 00:03:44,580
and now again, you use this method to call it down there, like this and now forward media query and app

43
00:03:44,580 --> 00:03:47,650
bar.

44
00:03:47,880 --> 00:03:49,730
This is now way more readable.

45
00:03:49,800 --> 00:03:56,040
Now of course we have two other checks for not is landscape and is landscape and we might want to

46
00:03:56,040 --> 00:03:59,210
merge the content for this into our builder methods

47
00:03:59,220 --> 00:04:01,390
we just added. Before we do that,

48
00:04:01,410 --> 00:04:03,750
let me first of all point at txListWidget.

49
00:04:03,810 --> 00:04:05,070
This is another improvement

50
00:04:05,070 --> 00:04:07,190
we're already using, here

51
00:04:07,260 --> 00:04:10,720
we're outsourcing the content for a widget into a variable

52
00:04:10,770 --> 00:04:16,230
and this makes sense if you need to same widget, the exact same widget with the exact same configuration

53
00:04:16,680 --> 00:04:23,040
in different places of your widget tree, often in places which are rendered in an either or condition.

54
00:04:23,040 --> 00:04:27,420
That's something we're already doing to avoid code duplication and that's a good thing.

55
00:04:27,450 --> 00:04:34,890
But now back to merging the content we have for portrait mode here into this builder method here and

56
00:04:34,950 --> 00:04:40,350
our landscape content we have here into the builder method here for landscape content.

57
00:04:40,350 --> 00:04:46,600
Now you might think that you simply take that transaction list widget, which is for portrait mode

58
00:04:46,630 --> 00:04:52,150
and then you go to your build method for portrait content and there, we are returning the container,

59
00:04:52,160 --> 00:04:55,390
so let's add a comma after it and also return

60
00:04:55,480 --> 00:04:59,700
this widget here, this variable.

61
00:04:59,710 --> 00:05:04,780
Now this has two problems, for one, this variable isn't defined here.

62
00:05:04,780 --> 00:05:07,030
So we would have to accept it as an argument,

63
00:05:07,030 --> 00:05:09,110
that's certainly something we can do.

64
00:05:09,160 --> 00:05:13,370
The more important problem is that you can't return two values,

65
00:05:13,390 --> 00:05:17,890
you can always only return one value in a method, in Dart

66
00:05:17,890 --> 00:05:23,640
in general, in basically any programming language in general, so this does not work.

67
00:05:23,650 --> 00:05:28,960
Of course, you could return a list by wrapping this into square brackets because then you return one

68
00:05:29,020 --> 00:05:32,400
value, a list and the list then has multiple values

69
00:05:32,560 --> 00:05:34,660
but now a list is not a widget,

70
00:05:34,660 --> 00:05:36,540
so that would not work.

71
00:05:36,580 --> 00:05:40,920
However what you can do is of course here, you could return a list of widgets,

72
00:05:40,980 --> 00:05:42,460
now this would be correct

73
00:05:42,460 --> 00:05:50,960
and now if you also accept this argument here which is of course of type widget, then you can use your

74
00:05:50,960 --> 00:05:57,160
builder method down there, forward the txListWidget variable which we defined in the build method

75
00:05:57,400 --> 00:06:02,940
and pass this to buildPortraitContent which will then indeed return a list of widgets.

76
00:06:03,130 --> 00:06:10,140
But now we have a new problem, a list of widgets is not accepted as a widget by Flutter.

77
00:06:10,150 --> 00:06:17,230
Of course here in the children of our column, it wants a list of widgets, of single widgets, it does not

78
00:06:17,230 --> 00:06:21,270
want a list of list of widgets but that's what we're creating here.

79
00:06:21,310 --> 00:06:25,750
This builder method returns a list of widgets and not a single widget.

80
00:06:25,810 --> 00:06:31,360
Now when we call it here, it therefore enters or adds this list of widgets into this list of widgets

81
00:06:31,360 --> 00:06:34,500
and that's not what Flutter wants, it wants a single widget.

82
00:06:34,690 --> 00:06:41,470
Now a good solution here is another modern syntax Dart supports, the so-called spread operator, the

83
00:06:41,470 --> 00:06:48,230
spread operator is also available in JavaScript for example and it's simply three dots.

84
00:06:48,330 --> 00:06:49,670
Now this looks strange.

85
00:06:49,840 --> 00:06:53,230
You add these three dots in front of a list,

86
00:06:53,230 --> 00:06:59,960
so in front of square brackets or like here, in front of a function or a method that returns a list

87
00:06:59,980 --> 00:07:03,350
and of course, buildPortraitContent does return the list.

88
00:07:03,370 --> 00:07:10,300
Now what do these three dots do with the list in front of which you add it? These three dots

89
00:07:10,300 --> 00:07:17,320
tell Dart that you want to pull all the elements out of that list and merge them as single elements

90
00:07:17,350 --> 00:07:19,950
into that surrounding list which we have here,

91
00:07:19,960 --> 00:07:22,120
the children list for our column.

92
00:07:22,300 --> 00:07:28,840
So now instead of adding a list to a list, we're adding all the elements of this list as single items

93
00:07:28,990 --> 00:07:31,050
next to each other in this list,

94
00:07:31,090 --> 00:07:36,760
we're flattening the list so to say. Instead of creating a nested list, we pull out the items and add

95
00:07:36,760 --> 00:07:39,250
them as normal items to the outer list.

96
00:07:39,490 --> 00:07:45,190
So now we only have a list of widgets because this here, these three dots, transform our list of widgets

97
00:07:45,340 --> 00:07:49,080
into just widgets, into two widgets.

98
00:07:49,110 --> 00:07:54,450
Now of course, you can use the spread operator not just with lists of widgets,

99
00:07:54,450 --> 00:07:57,470
you can also use the spread operator with lists of numbers

100
00:07:57,480 --> 00:08:02,280
if you have another scenario where you want to add a list of numbers as single numbers into an outer

101
00:08:02,280 --> 00:08:10,080
list and so on. And with that pattern, we can also of course do the same down there for our ternary

102
00:08:10,080 --> 00:08:17,070
expression, where we show either our chart or the transaction list. We can simply go up to our builder method

103
00:08:17,190 --> 00:08:25,350
for the landscape content here and also wrap this into square brackets and return a list of widgets

104
00:08:25,350 --> 00:08:32,760
here as well, return square brackets here and add a comma after the closing row and then add our ternary

105
00:08:32,760 --> 00:08:33,650
expression.

106
00:08:33,720 --> 00:08:38,120
And here now, we also need the media query, the appBar and transaction list widget,

107
00:08:38,190 --> 00:08:41,730
so the same arguments we needed here for buildPortraitContent.

108
00:08:41,780 --> 00:08:49,350
Hence I'll copy the argument list from there and add it to buildLandscapeContent here.

109
00:08:49,410 --> 00:08:54,390
With that in the place where we call buildLandscapeContent, we have to parse the same arguments we

110
00:08:54,390 --> 00:09:02,530
passed to buildPortraitContent just like this and since this now also returns a list of widgets, add

111
00:09:02,620 --> 00:09:08,020
three dots in front of it to use the spread operator to convert the list of widgets into just widgets

112
00:09:08,020 --> 00:09:09,690
that are added to the outer list

113
00:09:09,740 --> 00:09:12,460
and now this if statement down there can be removed

114
00:09:15,770 --> 00:09:20,210
So with that, the advantage is not that we have less code in this file,

115
00:09:20,240 --> 00:09:25,790
we just moved the code into a different position but we have a more readable build method down there

116
00:09:25,790 --> 00:09:26,570
now.

117
00:09:26,810 --> 00:09:33,710
We have basically just a column down there and then we can clearly see that we seem to have two alternative

118
00:09:33,710 --> 00:09:37,910
conditions and that we call different methods for each condition.

119
00:09:38,090 --> 00:09:42,590
We can see that we seem to get back a list where we pull out elements and if we want to find out what's

120
00:09:42,590 --> 00:09:48,620
in a method, well then we can simply control or command click on it and then change our code for that

121
00:09:48,620 --> 00:09:50,830
content in this place here.

122
00:09:50,900 --> 00:09:54,530
So it's not helping performance, it's not making the file shorter,

123
00:09:54,530 --> 00:09:59,750
it even added a few lines but it makes our build method down there more readable.

124
00:09:59,750 --> 00:10:05,630
So that's why using builder methods, not build but builder methods that build you parts of your widget

125
00:10:05,630 --> 00:10:10,550
tree can be very helpful for improving code readability.

126
00:10:10,550 --> 00:10:14,960
They don't have to return lists of widgets, if you only need to return one widget, you can do that too

127
00:10:15,200 --> 00:10:18,970
but you can always return lists of widgets here with the help of the spread

128
00:10:18,960 --> 00:10:19,430
operator.

