WEBVTT
1
00:00:02.009 --> 00:00:04.560
Now let's see how we can connect Flutter to Firebase.

2
00:00:04.560 --> 00:00:06.689
And for that, here's one important note.

3
00:00:06.810 --> 00:00:13.170
Of course, we already used Flutter in conjunction with Firebase before, and we didn't have to go through

4
00:00:13.170 --> 00:00:15.540
all the setup steps I just showed you.

5
00:00:16.079 --> 00:00:24.600
This was possible because we only talked to Firebase in those earlier sections by using Firebase Rest

6
00:00:24.600 --> 00:00:25.530
APIs.

7
00:00:25.530 --> 00:00:33.000
So they're web APIs which are exposed by Firebase to which we could communicate through flutters HTTP

8
00:00:33.000 --> 00:00:33.900
package.

9
00:00:33.900 --> 00:00:40.440
And this is a fine way of communicating with Firebase and with any backend, but Firebase is such a

10
00:00:40.440 --> 00:00:49.260
powerful service that you can't use all its services efficiently through just their web APIs.

11
00:00:49.380 --> 00:00:54.270
Instead, they give you sticks, which are packages you can add to your project.

12
00:00:54.270 --> 00:00:58.620
So to your flutter project, I mean, so that you can execute flutter code.

13
00:00:58.620 --> 00:01:05.430
And behind the scenes, this communication with the Firebase backend will happen so that you don't have

14
00:01:05.430 --> 00:01:09.510
to write and handle all those outgoing HTTP requests on your own.

15
00:01:09.510 --> 00:01:10.950
That's the difference.

16
00:01:10.950 --> 00:01:16.140
That's what we're going to do here, and that's why we needed this different setup now, because we're

17
00:01:16.140 --> 00:01:23.580
going to use some packages which are provided by the Firebase team for Flutter apps that make our life

18
00:01:23.580 --> 00:01:24.420
easier.

19
00:01:24.420 --> 00:01:30.510
If we want to dive really deep into the Firebase ecosystem and if we want to use a lot of their services

20
00:01:30.870 --> 00:01:39.240
for the dummy back and part we had earlier for working with any rest APIs or any other Web APIs, you

21
00:01:39.240 --> 00:01:43.380
don't need such a setup and you don't need dedicated sticks.

22
00:01:43.470 --> 00:01:49.500
We use that here because we're going to go all in on Firebase in this module and we need access to all

23
00:01:49.500 --> 00:01:56.700
their features and we want that access through a convenient flutter package which exposes us some methods

24
00:01:56.700 --> 00:02:02.010
we can call, which exposes us a night code base we can use, where we don't have to wire up everything

25
00:02:02.010 --> 00:02:06.660
on our own and where we don't have to take care about all the nitty gritty details on our own.

26
00:02:06.660 --> 00:02:08.100
That's the difference.

27
00:02:08.370 --> 00:02:14.850
So to install those packages I'm talking about, you can Google for Flutter Firebase and you'll find

28
00:02:14.850 --> 00:02:17.580
an article in the official Firebase Docs.

29
00:02:18.030 --> 00:02:21.000
Now here you also can learn how to set everything up.

30
00:02:21.000 --> 00:02:22.410
We already did that.

31
00:02:22.590 --> 00:02:24.750
And you see some examples.

32
00:02:25.080 --> 00:02:28.260
Now, if you go back, you will also see that on Flutter Dev.

33
00:02:28.290 --> 00:02:30.780
You'll also find some Firebase documentation.

34
00:02:30.780 --> 00:02:38.160
So on the official Flutter page, on the official Flutter docs, you find some Firebase documentation.

35
00:02:39.050 --> 00:02:45.200
Now, if we go back again and we manipulate our search query a little bit and you search for Flutter

36
00:02:45.200 --> 00:02:52.640
Firebase Fire Store, we'll find the first SDK which will install to get started with Firebase.

37
00:02:53.090 --> 00:03:00.080
This SDK here Cloud Fire Store allows us to communicate with one Firebase feature, which is called

38
00:03:00.080 --> 00:03:02.430
Fire Store, which is their database.

39
00:03:02.450 --> 00:03:07.460
Now there are other features as well, and if we want to work with those, we have to add different

40
00:03:07.460 --> 00:03:08.690
flutter packages.

41
00:03:08.690 --> 00:03:11.000
But we're going to get started with this one.

42
00:03:11.600 --> 00:03:17.510
Now, here you see some setup steps and these are mainly the steps we already followed.

43
00:03:17.510 --> 00:03:20.900
So there's not much for us to do here.

44
00:03:20.900 --> 00:03:27.510
Instead, we can go right away to installing and just grab this link here and added an AR pop spec dot

45
00:03:27.530 --> 00:03:32.420
YAML file here, maybe below the Cupertino icons.

46
00:03:32.420 --> 00:03:36.290
And if you didn't save the file, this package should be automatically installed.

47
00:03:36.290 --> 00:03:42.800
If not, you can manually run flutter packages, get this installs, this flutter package into your

48
00:03:42.800 --> 00:03:46.880
project and now you can import it and use it in your code.

49
00:03:47.450 --> 00:03:52.880
Now to get started, let's go back to our Firebase console and there click on database.

50
00:03:53.570 --> 00:03:56.330
Here, you'll find two databases.

51
00:03:59.450 --> 00:04:03.430
Cloud Fires Store and also the real time database.

52
00:04:03.440 --> 00:04:09.260
And earlier in the course, we use the real time database because that was the one that was easier to

53
00:04:09.260 --> 00:04:14.240
use as a dummy backend that gave us a nice rest API which we could use.

54
00:04:14.510 --> 00:04:21.079
Now we're going to use Cloud Fire Store, which is the more modern solution by Firebase, which does

55
00:04:21.079 --> 00:04:26.630
not give us such a nice rest API, but which doesn't matter here because we're going to communicate

56
00:04:26.630 --> 00:04:29.750
with it through the Flutter Firebase SDK anyways.

57
00:04:30.260 --> 00:04:35.090
So you can click on create database and make sure you start in test mode here.

58
00:04:35.120 --> 00:04:39.740
That's important so that we can access this database without limitations.

59
00:04:40.590 --> 00:04:41.760
Click on next.

60
00:04:43.570 --> 00:04:46.300
And choose any location you want here.

61
00:04:46.300 --> 00:04:51.010
That's in the end the server that is going to be used, you can leave the default here and click on

62
00:04:51.010 --> 00:04:51.610
Done.

63
00:04:52.120 --> 00:04:57.520
Now this will set up this database and this is a database which will run in the cloud.

64
00:04:57.520 --> 00:05:04.030
And Firebase then has a layer between the database and between your app, which in the end is bridged

65
00:05:04.030 --> 00:05:10.450
by that Flutter Firebase SDK through which we can communicate to that database from within our Flutter

66
00:05:10.450 --> 00:05:10.960
app.

67
00:05:11.550 --> 00:05:16.380
Now with that fire store created here, with that database created here.

68
00:05:17.110 --> 00:05:22.180
Let's go back to our chat screen where we have our list view here.

69
00:05:22.480 --> 00:05:27.850
And let's, for example, pull in some data that resides in this database.

70
00:05:28.360 --> 00:05:32.350
For that, we can create a collection here, which is basically a table in your database.

71
00:05:32.350 --> 00:05:35.920
You could say, and I'm going to name my collection here chats.

72
00:05:36.400 --> 00:05:37.540
Click on next.

73
00:05:37.660 --> 00:05:40.010
And you can now also add a document here.

74
00:05:40.030 --> 00:05:46.960
A document is basically an entry in that table, and you're going to fetch documents and you're going

75
00:05:46.960 --> 00:05:51.460
to be able to write documents with help of the Flutter Firebase SDK.

76
00:05:51.700 --> 00:05:56.440
So a collection will basically be where you later store your data.

77
00:05:56.440 --> 00:05:59.140
And a document is one piece of data.

78
00:05:59.140 --> 00:06:06.850
So not a document in the sense of a word document where you write text, but a document instead is just

79
00:06:06.850 --> 00:06:08.140
a piece of data.

80
00:06:08.140 --> 00:06:14.320
For example, if you would be building an online shop, you could have a collection which is named products.

81
00:06:14.320 --> 00:06:22.120
And in there you have a list of products where every single product is a document in the product collection,

82
00:06:22.150 --> 00:06:27.220
or you have a collection named users with a bunch of user documents in there.

83
00:06:27.220 --> 00:06:31.810
And in Firebase, every document can also have sub collections.

84
00:06:31.810 --> 00:06:38.950
So you could have a chat collection with a bunch of chat room documents, and every chatroom document

85
00:06:38.950 --> 00:06:44.260
could then have a messages collection which contains individual message documents.

86
00:06:44.260 --> 00:06:49.000
That's how far store is structured, but we'll see that in action throughout this module.

87
00:06:50.170 --> 00:06:53.710
Now I'm going to generate an ID automatically here.

88
00:06:54.690 --> 00:06:57.060
And I'm not going to add any field here.

89
00:06:57.630 --> 00:06:59.700
I'll just save it like this instead.

90
00:07:00.840 --> 00:07:05.570
And now here we got this chess collection with this one chess document we created.

91
00:07:05.580 --> 00:07:08.010
And in there we can create a new collection.

92
00:07:08.010 --> 00:07:14.220
And you always have this pattern in Firebase Collection Document Collection document.

93
00:07:14.220 --> 00:07:19.620
So our collection always has documents and a document may have other collections.

94
00:07:19.620 --> 00:07:24.810
It may also have other fields, like, for example, some text you want to store it there, some numbers,

95
00:07:24.810 --> 00:07:25.440
whatever.

96
00:07:25.770 --> 00:07:32.040
Here in my chat's collection, I have one document and in that chat document I'm going to create a new

97
00:07:32.040 --> 00:07:38.970
collection, which I'll name messages, click next and create an ID automatically.

98
00:07:38.970 --> 00:07:42.030
And now I'm going to add a field here, which I'll name text.

99
00:07:42.060 --> 00:07:49.500
The type is string, which means it's well, some text and then the value here could just be Hi there

100
00:07:49.500 --> 00:07:54.600
like this, and if I now save this, this is stored.

101
00:07:54.600 --> 00:08:00.810
And now in the end I have a chat collection with one document which has a messages collection which

102
00:08:00.810 --> 00:08:06.450
then has my messages where I have one document which has a text of Hi there.

103
00:08:07.560 --> 00:08:12.150
And we can now utilize this here in our chat screen widget.

104
00:08:13.490 --> 00:08:15.920
Let's say, besides our body.

105
00:08:17.900 --> 00:08:20.480
We add a floating action button here.

106
00:08:20.690 --> 00:08:23.150
So our regular floating action button.

107
00:08:23.890 --> 00:08:26.200
Where the child is simply.

108
00:08:26.910 --> 00:08:27.930
An icon.

109
00:08:29.660 --> 00:08:33.140
Let's say the add item for now.

110
00:08:34.240 --> 00:08:35.919
And we're on pressed.

111
00:08:35.919 --> 00:08:37.870
We want to execute some function.

112
00:08:38.940 --> 00:08:44.370
Now the function I want to execute here is a function that should reach out to Firebase and for the

113
00:08:44.370 --> 00:08:46.290
moment not add anything.

114
00:08:46.290 --> 00:08:52.200
We'll add this later, but instead fetch the data from there so that we can see how we can communicate

115
00:08:52.200 --> 00:08:53.160
with Firebase.

116
00:08:53.190 --> 00:08:57.780
Eventually we'll output all the data here, but for the moment, let's just output the data we fetch

117
00:08:57.780 --> 00:09:00.420
in the console with a print statement.

118
00:09:00.600 --> 00:09:06.240
For that, we need to fetch it first, though, and we can do this with fire store.

119
00:09:06.270 --> 00:09:11.300
We installed this fire store package to cloud fire store package.

120
00:09:11.310 --> 00:09:16.680
So now in shared screen where I want to use it, I can import package.

121
00:09:16.680 --> 00:09:18.870
Cloud Fire store slash.

122
00:09:18.870 --> 00:09:21.260
Cloud fire store dart.

123
00:09:22.440 --> 00:09:27.960
And with this import added here in on pressed you can access via store.

124
00:09:28.620 --> 00:09:36.330
Dot instance, there always is one active instance which is managed on your behalf and on that instance

125
00:09:36.330 --> 00:09:37.770
you can execute methods.

126
00:09:37.770 --> 00:09:42.210
You can, for example, use collection to reach out to a collection.

127
00:09:42.720 --> 00:09:49.860
Now here you then specify the name of the collection, or you specify a full path to a specific sub

128
00:09:49.860 --> 00:09:50.700
collection.

129
00:09:50.880 --> 00:09:56.800
For example, here I want to get my chats and there is one chat which I created.

130
00:09:56.820 --> 00:10:01.080
It has this ID which was generated automatically.

131
00:10:01.930 --> 00:10:10.660
Let's quickly grab this ID here and add it here and add another slash and then reach out to messages.

132
00:10:11.670 --> 00:10:16.590
So with this, we're telling our story that we want to get access to the messages collection inside

133
00:10:16.590 --> 00:10:19.380
of this document instead of the chats collection.

134
00:10:20.150 --> 00:10:24.680
Now with this access to a collection, we can do more things.

135
00:10:25.070 --> 00:10:28.850
We can, for example, add a new document with this ADD method.

136
00:10:29.030 --> 00:10:33.350
We can get a specific document here with the document method.

137
00:10:33.350 --> 00:10:35.960
So get the data for a specific document.

138
00:10:35.960 --> 00:10:42.650
We can also query and search for documents that meet a certain condition, for example.

139
00:10:44.220 --> 00:10:47.340
And we also have snapshots here.

140
00:10:47.340 --> 00:10:51.880
And snapshots is an amazing method which we can call on a collection.

141
00:10:52.140 --> 00:10:55.530
Snapshots returns a stream.

142
00:10:56.330 --> 00:11:02.840
Now, since it is a stream that means it's going to emit new values whenever data changes.

143
00:11:02.840 --> 00:11:07.240
So that's the real time data aspect I mentioned earlier.

144
00:11:07.250 --> 00:11:15.980
It allows us to set up a listener through the Firebase Flutter SDK to our Firebase database, and whenever

145
00:11:15.980 --> 00:11:22.520
data changes in there, this listener will be notified automatically and we can re render our widget

146
00:11:22.520 --> 00:11:24.230
or do whatever we want to do.

147
00:11:24.680 --> 00:11:33.530
So here for the moment, I will just call, listen to set up a listener and pass in a function that

148
00:11:33.530 --> 00:11:36.020
will trigger for every piece of data we get.

149
00:11:36.260 --> 00:11:42.320
And I'll just print that data here inside of that function I passed to listen.

150
00:11:42.320 --> 00:11:46.850
Now this is just some dummy code will replace it later, but for the moment it's good like this.

151
00:11:46.850 --> 00:11:50.480
Now let's save this and let's restart this application.

152
00:11:52.590 --> 00:11:55.920
Here is our app and now click the plus button.

153
00:11:56.070 --> 00:11:59.550
If you click it, you will see an error.

154
00:12:00.510 --> 00:12:08.190
Now this can happen if you add it all your Firebase configuration and you didn't restart your app fully

155
00:12:08.190 --> 00:12:08.820
in between.

156
00:12:08.820 --> 00:12:13.820
So I'll actually close this running application and do a full restart and therefore rebuild.

157
00:12:13.830 --> 00:12:19.500
This makes sure that all those configuration settings and files which we added will be taken into account.

158
00:12:19.680 --> 00:12:22.800
So let's wait for it as full restart to finish.

159
00:12:24.150 --> 00:12:26.590
And you might now be getting a different era.

160
00:12:26.610 --> 00:12:28.390
You might also not be getting this.

161
00:12:28.410 --> 00:12:35.790
This really depends a bit on the point of time you are viewing this and the cloud store flutter package

162
00:12:35.790 --> 00:12:36.630
we're using.

163
00:12:37.430 --> 00:12:43.790
At the moment you might get such an error that points at DECS Archive Merger exception.

164
00:12:44.480 --> 00:12:48.110
Now this is simply a bug with the package, which is easy to fix.

165
00:12:48.230 --> 00:12:54.170
You can go to your android folder and then the build gradle file in the app folder.

166
00:12:55.890 --> 00:12:58.770
And they are in default config at the end.

167
00:12:58.800 --> 00:13:02.350
Add multi decks enabled.

168
00:13:02.370 --> 00:13:03.170
True.

169
00:13:03.180 --> 00:13:04.110
Written like this.

170
00:13:04.110 --> 00:13:09.240
Make sure the D and the E here is a capital case d and E.

171
00:13:11.400 --> 00:13:20.790
Also then scroll down and go to dependencies and here add implementation and then single quotes come

172
00:13:20.790 --> 00:13:26.070
dot android dot support colon multi dex.

173
00:13:27.330 --> 00:13:30.540
Colon 1.0.3.

174
00:13:31.080 --> 00:13:36.660
Now, if you do all of that, if you add these two things and you restart your application, it should

175
00:13:36.660 --> 00:13:40.560
now rebuild successfully and should restart successfully.

176
00:13:40.560 --> 00:13:42.960
So let's wait for that to finish.

177
00:13:45.320 --> 00:13:46.410
And that looks better.

178
00:13:46.430 --> 00:13:50.780
Here's the running application and now click the plus button once.

179
00:13:51.110 --> 00:13:58.090
If you do so, you should now see instance of query, snapshot or something similar here in the console.

180
00:13:58.160 --> 00:14:00.530
And that's coming from this print statement here.

181
00:14:00.890 --> 00:14:04.900
Indeed, on data, you can access different kinds of data.

182
00:14:04.910 --> 00:14:08.390
For example, you can access a documents key.

183
00:14:08.510 --> 00:14:15.920
And if you do that and you save and you click the plus button again, you see an instance of document

184
00:14:15.920 --> 00:14:22.520
snapshot like this in an array, and you can access the first document here because this is an array.

185
00:14:23.320 --> 00:14:27.520
With the square bracket notation and zero, which is the index of the first element.

186
00:14:27.520 --> 00:14:36.250
And then there add one extra pair of square brackets and x is text like this text because that's the.

187
00:14:37.890 --> 00:14:38.340
Key.

188
00:14:38.340 --> 00:14:42.730
I chose here in Massachusetts to store the text for a single message.

189
00:14:42.750 --> 00:14:47.070
If you chose a different key here, you need to access a different key here.

190
00:14:47.070 --> 00:14:52.560
So that's essentially just getting access to that one document we have right now in the messages collection

191
00:14:52.560 --> 00:14:56.970
and then retrieving the text field and the value stored in that field from there.

192
00:14:57.150 --> 00:15:02.430
And if you save that now and you click the plus again, you will see, hi there, here.

193
00:15:02.730 --> 00:15:06.660
So that shows us that it works and that we have access to this database.

194
00:15:06.900 --> 00:15:10.920
Now we can also access data documents.

195
00:15:12.700 --> 00:15:17.020
And call for each on that to execute a function on every document.

196
00:15:17.380 --> 00:15:20.500
And that function will get the document as a input.

197
00:15:20.770 --> 00:15:22.900
And we can then do something with the document in here.

198
00:15:22.900 --> 00:15:27.310
For example, print the document text as we did before.

199
00:15:27.340 --> 00:15:31.670
The difference is that we now do this for every document we have in messages.

200
00:15:31.690 --> 00:15:35.620
Now, at the moment, this still gives us just hi there.

201
00:15:35.770 --> 00:15:42.070
But now the nice thing is if we go back to Firebase and here in Messages, we add a new document.

202
00:15:42.070 --> 00:15:45.850
So not a new field here, but a new document in messages.

203
00:15:46.330 --> 00:15:50.560
And we give this an ID automatically and we add a text field here as well.

204
00:15:50.710 --> 00:15:55.870
And we add this is another entry and I save this.

205
00:15:56.350 --> 00:16:02.260
You will see it was added here, but without me doing anything here, without me restarting or clicking

206
00:16:02.260 --> 00:16:03.310
the plus again.

207
00:16:03.310 --> 00:16:09.940
So without any of that, you also see this is another entry here in the lock because this is a stream

208
00:16:09.940 --> 00:16:14.470
and therefore such a life listener to our collection.

209
00:16:14.800 --> 00:16:19.720
Now, this is, of course, not the final way of how we want to listen, but this is a nice start.

