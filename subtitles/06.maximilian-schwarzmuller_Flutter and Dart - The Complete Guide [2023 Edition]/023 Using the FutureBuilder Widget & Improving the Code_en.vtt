WEBVTT
1
00:00:02.140 --> 00:00:04.570
The app we built thus far works.

2
00:00:04.570 --> 00:00:11.110
But there is one thing which we can change, or which I at least want to have you think about.

3
00:00:11.530 --> 00:00:17.830
On the orders screen, we changed this to be a stateful widget simply because I wanted to use an ID

4
00:00:17.830 --> 00:00:18.490
state here.

5
00:00:18.490 --> 00:00:24.100
And by the way, as I mentioned in a couple of annotations at the top of the video during the videos,

6
00:00:24.100 --> 00:00:29.350
if you are using lists and falls as we're doing it here, you don't even need that hack.

7
00:00:29.350 --> 00:00:34.240
And you would be fine running that code without that future delayed around it.

8
00:00:34.240 --> 00:00:37.120
So you could actually get rid of all of that.

9
00:00:37.450 --> 00:00:42.400
Of course you then can't away use a weight here though because you're not in a async function and turning

10
00:00:42.400 --> 00:00:44.740
this into async function is not what you should do.

11
00:00:44.740 --> 00:00:51.910
But of course you could then use then here to run your code that should run once the future is complete.

12
00:00:51.910 --> 00:00:56.380
So you could move that set state call here into here.

13
00:00:56.380 --> 00:01:02.200
And this first set say said state call is obsolete because we don't need that.

14
00:01:02.650 --> 00:01:07.840
This will run before build runs without that future delayed workaround so we can just set its loading

15
00:01:07.840 --> 00:01:14.890
to true then have this here and this would work as well if you use listen false here that's also the

16
00:01:14.890 --> 00:01:21.220
difference to modal route off and so on which didn't work here in its state there we simply don't have

17
00:01:21.220 --> 00:01:22.570
such a listen option.

18
00:01:22.570 --> 00:01:28.150
The provider package simply internally gives you an option to opt out of certain functionalities that

19
00:01:28.150 --> 00:01:30.670
would normally be connected with the inherited widget.

20
00:01:30.670 --> 00:01:37.360
And this tunnel, which is established with the help of context and with these missing features which

21
00:01:37.360 --> 00:01:45.880
you deliberately opt out of with lists and false, you can use provider of context here because you

22
00:01:45.880 --> 00:01:51.310
basically use only a limited set of the features of that inherited widget thing behind the scenes.

23
00:01:51.460 --> 00:01:52.960
So you could do that here.

24
00:01:52.960 --> 00:01:55.150
You could do this in all places with provider off.

25
00:01:55.180 --> 00:01:58.870
You can't use lists and false on things like modal root and so on.

26
00:01:58.870 --> 00:02:02.890
That's not supported there, but that's not the main thing I wanted to focus on.

27
00:02:02.890 --> 00:02:05.200
It's just something I again wanted to mention here.

28
00:02:05.380 --> 00:02:11.170
The core thing I wanted to mention is that we're building a stateful widget here simply such that we

29
00:02:11.170 --> 00:02:13.960
can use an ID state to initialize our data.

30
00:02:13.960 --> 00:02:19.270
And I think that makes sense because we want to have a place in our app where we can make that call,

31
00:02:19.270 --> 00:02:22.420
which only runs once when this screen gets rendered.

32
00:02:22.420 --> 00:02:27.790
For example, making that fetch and a build method would be horrible because that method runs way too

33
00:02:27.790 --> 00:02:34.180
often and actually we would even enter an infinite loop if we start calling set state in there, or

34
00:02:34.180 --> 00:02:38.380
if we then fetched our orders and build runs again and we start fetching again and so on.

35
00:02:38.380 --> 00:02:41.500
So making the fetch and build certainly is not an option.

36
00:02:41.950 --> 00:02:48.550
There is, however, an alternative to turning this into a stateful widget and using in its state.

37
00:02:48.550 --> 00:02:51.970
And it's that alternative which I now want to show you.

38
00:02:52.210 --> 00:02:57.310
So let me comment this out here in its state and therefore we have an empty init state method which

39
00:02:57.310 --> 00:02:58.900
we of course could also remove.

40
00:02:59.080 --> 00:03:03.010
And let me show you that alternative here in that body.

41
00:03:03.010 --> 00:03:08.560
In the end, the content we render depends on the question whether we're still fetching data or whether

42
00:03:08.560 --> 00:03:10.570
we already got a response, right?

43
00:03:10.900 --> 00:03:17.080
So what we can do here is we can use a special widget which is built into Flutter, and that's the future

44
00:03:17.080 --> 00:03:18.250
builder widget.

45
00:03:18.580 --> 00:03:24.250
The future builder widget takes a future and it then automatically starts listening to that.

46
00:03:24.250 --> 00:03:31.390
So it adds to then and to catch error methods for you, you could say, and it takes a builder which

47
00:03:31.390 --> 00:03:38.260
will get the current snapshot, the current state of your future, so that you can build different content

48
00:03:38.260 --> 00:03:40.270
based on what your future returned.

49
00:03:40.870 --> 00:03:43.600
So here we can set up a future.

50
00:03:43.600 --> 00:03:50.920
And our future, of course, is the future return by provider of fetch and set orders.

51
00:03:52.170 --> 00:03:58.350
So we can copy that line here and then go down here and configure that as the future.

52
00:03:58.440 --> 00:04:01.890
Because fetch and set orders of course does return a future.

53
00:04:02.340 --> 00:04:04.990
So that's the future for our future builder.

54
00:04:05.010 --> 00:04:11.280
Now, with the future set up, we also have to define a builder, and that's a builder, as you generally

55
00:04:11.280 --> 00:04:11.960
already know it.

56
00:04:11.970 --> 00:04:14.730
It's a function which gets executed on your behalf.

57
00:04:15.270 --> 00:04:19.079
It receives a context and here you also receive an extra argument.

58
00:04:19.079 --> 00:04:23.190
And that's your current data currently returned by your futures.

59
00:04:23.190 --> 00:04:29.370
So a data snapshot, you could say this should then return the widget you want to build and now the

60
00:04:29.370 --> 00:04:35.730
widget you want to build, of course, simply depends on the state of that future.

61
00:04:35.940 --> 00:04:42.090
So let's actually use the more complex or the longer function definition without that arrow so that

62
00:04:42.090 --> 00:04:44.400
we can write a multi-line function body.

63
00:04:44.610 --> 00:04:50.580
And here we can, first of all, have a look at the data snapshot to find out what's in there.

64
00:04:51.830 --> 00:04:56.750
The data snapshot here is of type A sync snapshot.

65
00:04:56.900 --> 00:05:04.400
And if you add a dot after it, you see that there you can find out if you have an error object or the

66
00:05:04.400 --> 00:05:10.040
data which you retrieved and also what the current connection status and that tells you what the future

67
00:05:10.040 --> 00:05:11.060
is currently doing.

68
00:05:12.620 --> 00:05:18.320
You can compare this to Connection State and for example, there you can find out whether it's currently

69
00:05:18.320 --> 00:05:19.010
waiting.

70
00:05:19.010 --> 00:05:25.820
So whenever the future hasn't resolved yet or whether it's done and when it's done, you will have to

71
00:05:25.820 --> 00:05:28.100
check whether you got data or an error.

72
00:05:28.460 --> 00:05:34.670
So here we can check if data snapshot connection state is currently equal to connection state waiting,

73
00:05:34.670 --> 00:05:36.730
which means we're currently loading.

74
00:05:36.740 --> 00:05:44.030
So in that case, of course, I want to return this centered widget here, so I will return this here.

75
00:05:45.900 --> 00:05:47.910
Else I know we're done.

76
00:05:47.910 --> 00:05:55.200
And then you could check if data snapshot error is equal to null, in which case, you know, you have

77
00:05:55.200 --> 00:05:57.630
no error or the other way around.

78
00:05:57.630 --> 00:06:04.830
If it's not equal to null, in which case you have an error and then you want to do error handling stuff

79
00:06:04.830 --> 00:06:08.070
here, which I'll not do here, but what you could do.

80
00:06:08.640 --> 00:06:12.540
Alternatively else you know you have no error.

81
00:06:12.540 --> 00:06:17.040
And then here I want to return that list you.

82
00:06:17.490 --> 00:06:19.200
So let's get rid of that down there.

83
00:06:19.200 --> 00:06:21.270
Now, we don't need as loading anymore.

84
00:06:21.390 --> 00:06:25.080
So here, I'll just return the list, you builder.

85
00:06:25.590 --> 00:06:32.880
And in case we should have an error, I'll just return a standard widget with a child or essay text.

86
00:06:32.880 --> 00:06:39.420
An error occurred just to have something on the screen and return some widget in that case, but I focused

87
00:06:39.420 --> 00:06:45.090
on a success case and here we return our list view builder with the order data which should now be available

88
00:06:45.090 --> 00:06:47.670
because we're done fetching our orders.

89
00:06:48.180 --> 00:06:53.940
Now, one important note about this setup, though, right now, we would enter an infinite loop here,

90
00:06:54.030 --> 00:06:59.370
because when this is done fetching and setting the orders, it will notify listeners.

91
00:06:59.370 --> 00:07:03.900
And since we set up a listener to orders here, our whole build method would run again.

92
00:07:03.900 --> 00:07:09.330
We would build a new few future builder here and send a new request, and that would keep on going.

93
00:07:09.720 --> 00:07:15.030
So the solution here is to not set up the listener up here for the order data, because we don't need

94
00:07:15.030 --> 00:07:19.860
the order data up there, but simply use a consumer of the order data in here.

95
00:07:19.860 --> 00:07:24.090
In that case here, because only here I'm interested in order data.

96
00:07:24.090 --> 00:07:26.370
So here we can set up a consumer.

97
00:07:27.630 --> 00:07:29.820
Of our orders.

98
00:07:31.080 --> 00:07:37.200
Where we in the end to find a builder, where we get the context and our order data then and now here

99
00:07:37.200 --> 00:07:44.490
it is where I actually want to render that list view, because that's now the place where we actually

100
00:07:44.490 --> 00:07:48.840
need our orders and we want to where we want to set up a listener.

101
00:07:50.990 --> 00:07:55.730
And important, of course, here you have all the other third argument, that child, that static child,

102
00:07:55.730 --> 00:07:57.500
which never changes, which you could use.

103
00:07:57.950 --> 00:08:03.890
Now we should have a set up which actually works and fetches our orders without entering an infinite

104
00:08:03.890 --> 00:08:04.420
loop.

105
00:08:04.430 --> 00:08:10.520
And just to check this, I'll also add a print statement here in the build method building orders.

106
00:08:10.520 --> 00:08:15.940
So this should now not run all the time and let's now see whether that works.

107
00:08:15.950 --> 00:08:18.680
So here I'll go to my orders.

108
00:08:18.680 --> 00:08:23.840
We see the spinner, we see the orders, and back here we see that this was only executed once.

109
00:08:24.110 --> 00:08:31.340
And this is now the more elegant alternative to using a stateful widget just to fetch orders and show

110
00:08:31.340 --> 00:08:32.539
a loading spinner.

111
00:08:32.659 --> 00:08:39.080
And the advantage is also that we don't just save that useless transformation to a stateful widget.

112
00:08:39.080 --> 00:08:44.090
We also don't have to manage the loading state on our own because we're letting the future builder do

113
00:08:44.090 --> 00:08:46.520
that by checking the connection state.

114
00:08:47.060 --> 00:08:52.310
So now what we can do here, of course, is we can get rid of in it state and off.

115
00:08:52.310 --> 00:08:54.470
This is loading property.

116
00:08:54.500 --> 00:08:56.570
Get rid of our state class.

117
00:08:58.880 --> 00:09:00.560
And convert this year back.

118
00:09:01.180 --> 00:09:05.440
To a state less widget as it was before.

119
00:09:05.590 --> 00:09:07.520
And now this is a very lean widget.

120
00:09:07.540 --> 00:09:08.260
Of course.

121
00:09:09.420 --> 00:09:14.460
And we can do a lot to refresh, to have the same application as before.

122
00:09:14.460 --> 00:09:20.940
But now with a more elegant setup for our orders and obviously you could use such a future builder as

123
00:09:20.940 --> 00:09:26.820
we're using it here in your other widgets to either to turn them back into stateless widgets or if you

124
00:09:26.820 --> 00:09:29.070
had reasons for making them stateful widgets.

125
00:09:29.070 --> 00:09:35.310
Even in such cases to not manage the is loading variable on your own, but instead let the future builder

126
00:09:35.310 --> 00:09:35.830
do that.

127
00:09:35.850 --> 00:09:41.400
I'll leave that here and I'll also leave the other approaches in this app so that you can see and check

128
00:09:41.400 --> 00:09:41.970
both.

129
00:09:41.970 --> 00:09:47.230
But using the future builder is definitely the approach I would recommend because it's so elegant and

130
00:09:47.230 --> 00:09:49.650
it utilizes the tools Flutter gives you.

131
00:09:50.870 --> 00:09:51.740
As a side note.

132
00:09:51.740 --> 00:09:56.570
It, of course, also avoids rebuilding this entire widget tree here just because the loading state

133
00:09:56.570 --> 00:09:57.100
changed.

134
00:09:57.110 --> 00:10:01.700
Instead, it will really just rebuild the parts that do need rebuilding.

135
00:10:01.700 --> 00:10:03.650
So that's another benefit we get here.

136
00:10:04.370 --> 00:10:06.920
So we added future builder here and here.

137
00:10:06.920 --> 00:10:08.690
Everything works as intended.

138
00:10:08.720 --> 00:10:18.080
However, I want to highlight one potential issue you could be facing in other applications and therefore

139
00:10:18.080 --> 00:10:20.720
a better way of using Future Builder.

140
00:10:21.080 --> 00:10:28.340
The way we use it here works absolutely fine in this app and in this widget, but if you had something

141
00:10:28.340 --> 00:10:34.520
in this widget which causes the build method to run again, some overstate your managing or anything

142
00:10:34.520 --> 00:10:35.280
like that.

143
00:10:35.300 --> 00:10:40.280
Then fetch and set orders would of course also be re executed.

144
00:10:40.280 --> 00:10:40.700
Right?

145
00:10:40.700 --> 00:10:46.700
Because if build runs again, this entire code here runs again and therefore this method would run again.

146
00:10:47.180 --> 00:10:51.080
This, of course, means that a new future would be obtained here.

147
00:10:51.080 --> 00:10:56.420
And that, of course, in turn means that a new future would be obtained.

148
00:10:57.420 --> 00:11:05.250
And that, of course, in turn means that this HTTP request is sent again and so on, and that is something

149
00:11:05.250 --> 00:11:09.780
we might want to avoid if just something else changed in this widget.

150
00:11:09.780 --> 00:11:16.800
If there is no reason to fetch new orders, let's say you were presenting an overlay, a dialog to the

151
00:11:16.800 --> 00:11:19.950
user and hence the build method executes again.

152
00:11:19.950 --> 00:11:26.070
You definitely don't want to fetch new orders just because something else changed in this widget, which

153
00:11:26.070 --> 00:11:27.660
doesn't affect the orders.

154
00:11:27.990 --> 00:11:34.680
Therefore, it is considered a better practice to obtain this future differently.

155
00:11:34.680 --> 00:11:41.190
Even though I will emphasize it again, this approach will not cause any problems here, since we have

156
00:11:41.190 --> 00:11:45.060
no other state changing logic in this widget here.

157
00:11:45.060 --> 00:11:52.050
But if you had that, a better way of getting and using that future would be to convert your orders

158
00:11:52.050 --> 00:11:57.870
screen to a state full widget, which I quickly do here with refactoring.

159
00:11:58.290 --> 00:12:06.630
And with that converted in your state class, you should add a property of type future for example named.

160
00:12:07.410 --> 00:12:09.180
Orders future.

161
00:12:10.120 --> 00:12:14.980
Then you add a new method which returns a future which you could name.

162
00:12:15.920 --> 00:12:18.170
Obtain orders.

163
00:12:19.560 --> 00:12:21.720
Future like this.

164
00:12:21.810 --> 00:12:30.810
And in this method, you then return the result of this call to fetch and set orders, which of course,

165
00:12:30.810 --> 00:12:32.220
will give you a future.

166
00:12:32.430 --> 00:12:34.980
So you return this future here.

167
00:12:35.310 --> 00:12:39.750
Now, as a last step, you should add in its state here.

168
00:12:40.260 --> 00:12:46.050
And before you call super in its state, you set orders future.

169
00:12:46.050 --> 00:12:51.720
So this property equal to the result of calling obtain orders future.

170
00:12:53.730 --> 00:12:59.790
So with that, we just have a clean way of getting our future and storing it in a property when this

171
00:12:59.790 --> 00:13:08.430
widget is created and then you use this order's future property in your build method as a future here

172
00:13:08.430 --> 00:13:09.720
for the future builder.

173
00:13:10.640 --> 00:13:18.610
By using this approach, you ensure that no new future is created just because your widget rebuilds.

174
00:13:18.620 --> 00:13:21.310
Again, this is not a scenario we have here.

175
00:13:21.320 --> 00:13:28.250
This widget won't rebuild unintended, but if you had the scenario that a widget could be rebuilt and

176
00:13:28.250 --> 00:13:35.120
you don't want to fetch new orders just because something else changed, then using this approach is

177
00:13:35.120 --> 00:13:39.980
better and ensures that no unnecessary HTTP requests are sent.

178
00:13:39.980 --> 00:13:44.990
And therefore this is considered to be a good practice, which I also wanted to show you.

