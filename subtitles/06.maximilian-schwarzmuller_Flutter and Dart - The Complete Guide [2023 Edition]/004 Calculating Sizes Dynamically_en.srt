1
00:00:02,350 --> 00:00:08,460
So let's start with this and let's now actually calculate the height of this list container and therefore

2
00:00:08,530 --> 00:00:14,110
also of the chart container dynamically. To calculate that height dynamically, we need to know how much

3
00:00:14,110 --> 00:00:15,620
height we have available

4
00:00:15,820 --> 00:00:19,940
and for that let's go into the transaction list where we have that fixed height

5
00:00:20,080 --> 00:00:24,220
and let's find out which tool Flutter gives us to calculate the height dynamically.

6
00:00:24,220 --> 00:00:27,280
How can we find out how much height we have available,

7
00:00:27,280 --> 00:00:34,440
what the general device height is? For this, there is a specific class we can use, the media query class.

8
00:00:34,660 --> 00:00:40,090
If you have a web development background and specifically you know some CSS there, which is the styling

9
00:00:40,090 --> 00:00:45,040
language in web development, then you know that there you also have a feature called media query which

10
00:00:45,100 --> 00:00:51,490
also allows you to write styles that behave differently on different device sizes or on different screen

11
00:00:51,490 --> 00:00:52,510
sizes.

12
00:00:52,600 --> 00:00:56,970
The media query class here is exposed by the Flutter material package,

13
00:00:57,010 --> 00:00:58,970
so we need to have that imported

14
00:00:59,260 --> 00:01:06,580
and then here, just as with the theme, we have to connect it to our context with .of context because

15
00:01:06,580 --> 00:01:12,190
the context, as you know, is this metadata object with some information about our widget and its position

16
00:01:12,190 --> 00:01:13,270
in the tree

17
00:01:13,270 --> 00:01:19,600
and as it turns out, this connection also allows us to find out which general device size we have available

18
00:01:19,630 --> 00:01:23,170
because that's something which Flutter managers behind the scenes for us

19
00:01:23,260 --> 00:01:26,580
and with media query of context, we can tap into that.

20
00:01:26,710 --> 00:01:28,930
Now that alone however doesn't help us

21
00:01:28,930 --> 00:01:35,650
but with that now, we get an object where we can get all kinds of interesting information about our device.

22
00:01:35,890 --> 00:01:41,200
We can get the device pixel ratio, if we would be interested in that, to find out which screen density

23
00:01:41,200 --> 00:01:41,610
we have

24
00:01:41,620 --> 00:01:48,190
there, more modern devices have higher screen densities, that could maybe be useful for loading images

25
00:01:48,190 --> 00:01:50,220
or whatever you would want to do.

26
00:01:50,320 --> 00:01:56,110
You can find out whether the user opted that animations should be disabled, which you might want to respect

27
00:01:56,110 --> 00:02:00,200
in your application to not play a certain animation if that's disabled

28
00:02:00,250 --> 00:02:03,400
but we haven't had a look at animations yet, so let's ignore that.

29
00:02:03,640 --> 00:02:10,090
We can find a couple of other pieces of information, about settings the user setup but most importantly

30
00:02:10,090 --> 00:02:16,840
here, you have a size property and the size property gives you access to an object where you have a height

31
00:02:17,140 --> 00:02:22,650
and a width property and that gives you the device height and width you have available.

32
00:02:22,660 --> 00:02:25,920
So here we could take the device height like this

33
00:02:26,030 --> 00:02:31,180
and now this would of course be the full device height we have available, obviously in this case here,

34
00:02:31,330 --> 00:02:36,340
our container with the transactions should only take a fraction of that height which is why we can simply

35
00:02:36,340 --> 00:02:43,810
multiply this height with a value between 0 and 1, 1 to take the full height, 0 to take 0 height.

36
00:02:43,840 --> 00:02:49,720
So here we could say we want to take let's say 60% of the available height of the screen. So

37
00:02:49,720 --> 00:02:59,520
we can multiply the available height with 60% and if we do that, then you see I can no longer scroll

38
00:02:59,520 --> 00:03:01,640
this and you see here the boundaries,

39
00:03:01,680 --> 00:03:09,320
this indeed only takes 60% of the available height which is why now this container of transactions

40
00:03:09,320 --> 00:03:14,110
does no longer overflow our screen at the bottom.

41
00:03:14,160 --> 00:03:19,740
And if I shrink this further to let's say 0.2, well then we see we get problems with our

42
00:03:19,740 --> 00:03:25,500
image here because this image isn't resized, we could configure that but right now it's not resized and

43
00:03:25,500 --> 00:03:28,940
therefore here, we're running out of space for that image.

44
00:03:29,280 --> 00:03:35,120
But 0.2 is a bit too small anyway, so for now, let's bring this back to 0.6.

45
00:03:35,340 --> 00:03:36,990
So this is not too bad,

46
00:03:36,990 --> 00:03:43,060
now at least this bottom container has a fixed height of only 60%.

47
00:03:43,140 --> 00:03:48,840
We haven't restricted the height of this container at the top here though and obviously, that is something

48
00:03:48,840 --> 00:03:53,700
we could also do. If we go to our chart.dart file here,

49
00:03:53,880 --> 00:04:00,600
we can wrap this card here let's say with another container with the help of the refactoring tool and

50
00:04:00,600 --> 00:04:06,960
assign a height here which is also calculated based on the available height with media query of context

51
00:04:07,350 --> 00:04:14,160
size height and then we had 60% on the list with the transactions, here we could assign the remaining

52
00:04:14,160 --> 00:04:15,140
40%.

53
00:04:15,240 --> 00:04:22,610
Of course you don't have to make sure that the amounts add up to 1 if you want to leave some space unoccupied

54
00:04:22,800 --> 00:04:28,320
but here if we do match them, we see 40% seems to be a bit too much for the chart here,

55
00:04:28,320 --> 00:04:34,920
we have some empty space here at the bottom but now we have that a line up and yet we can scroll that

56
00:04:34,920 --> 00:04:41,290
page and that is really strange because if you think about it, we have 40% here on the chart,

57
00:04:41,460 --> 00:04:43,620
we have 60% here on the list

58
00:04:43,620 --> 00:04:48,480
and if we have a look at the main.dart file, then these are the only two widgets we have here, chart

59
00:04:48,510 --> 00:04:49,190
and list.

60
00:04:49,620 --> 00:04:51,880
So why can we still scroll here,

61
00:04:51,900 --> 00:04:53,700
shouldn't they add up to

62
00:04:53,760 --> 00:05:00,750
the entire height and therefore this should not be scrollable? Well that's not the case because

63
00:05:00,750 --> 00:05:08,160
we also have the appBar here and we're not considering the appBar in our calculations here. To do so,

64
00:05:08,730 --> 00:05:14,730
we can go to the main.dart file which is where we create that appBar and we can create that appBar

65
00:05:14,820 --> 00:05:21,600
in a variable, in a final variable because I don't plan on changing it and there, I simply store my appBar

66
00:05:21,600 --> 00:05:29,420
widget. With that stored in a variable, we can simply assign that variable here to the appBar argument

67
00:05:29,420 --> 00:05:36,130
so that we still create the appBar. Now why am I storing it in a variable? Because the appBar object, which

68
00:05:36,130 --> 00:05:41,710
I can now access anywhere since it's stored in that variable, has information about the height of the

69
00:05:41,710 --> 00:05:43,110
appBar.

70
00:05:43,180 --> 00:05:47,530
So now here in main.dart, we can go down to the places where we create the chart and the transaction

71
00:05:47,530 --> 00:05:48,400
list

72
00:05:48,400 --> 00:05:52,600
and now let's wrap both with a container here inside of the main.dart file.

73
00:05:52,900 --> 00:06:04,720
So I wrap my chart and I assign a height here of MediaQuery.of(context) size height times let's

74
00:06:04,720 --> 00:06:15,150
say 40% just as before but I want to deduct the appBar height from that. So I'll actually wrap

75
00:06:15,150 --> 00:06:16,680
my height here,

76
00:06:16,680 --> 00:06:22,410
the height calculation into parentheses and deduct 

77
00:06:25,230 --> 00:06:32,670
appBar.preferredSize.height. preferredSize is a property we can access on the appBar to get the height

78
00:06:32,700 --> 00:06:35,940
that is reserved there or the dimensions that are reserved.

79
00:06:36,330 --> 00:06:42,060
So now here, we have an adjusted height where we deduct the appBar and then we calculate 40%

80
00:06:42,060 --> 00:06:47,490
of that adjusted height and we should now do exactly the same down there on the transaction list.

81
00:06:47,580 --> 00:06:55,050
So I'll wrap it here with a container, still in the main.dart file and then I will copy that height calculation,

82
00:06:55,170 --> 00:06:58,230
add it down there but here, I'll use 60%.

83
00:06:58,320 --> 00:07:04,590
Now important, you have to deduct the height of the appBar on both calculations because we then use a

84
00:07:04,590 --> 00:07:10,800
fraction of that and we want to use a fraction of the available space and the available space is always

85
00:07:11,040 --> 00:07:13,590
full height minus appBar height

86
00:07:13,590 --> 00:07:20,310
in both cases. Now since we calculate the height here in the main.dart file, we should not do it here

87
00:07:20,310 --> 00:07:23,400
in the chart and in the transaction list widget anymore.

88
00:07:23,670 --> 00:07:33,090
So let's remove our container here in the chart widget file and remove the closing parentheses and the

89
00:07:33,090 --> 00:07:35,670
same down here in transaction list.

90
00:07:35,800 --> 00:07:44,760
I'll not do that here, instead I'll just return my ternary expression here without the container because

91
00:07:44,760 --> 00:07:47,030
we have the container in the main.dart file.

92
00:07:47,110 --> 00:07:52,200
Now if we save this and maybe do a full restart with the green arrow here to make sure that this really

93
00:07:52,200 --> 00:07:59,460
is all taken into account, we can see that here, I still have a little bit of scrolling available and

94
00:07:59,460 --> 00:08:03,490
this now comes from the status bar which is another element we have

95
00:08:03,510 --> 00:08:09,960
here that takes up some space. So we should also take that into account in our calculations.

96
00:08:10,200 --> 00:08:16,240
To do that, let's go back to the main.dart file and in here, let's deduct something else, that's now a

97
00:08:16,250 --> 00:08:22,120
piece of information we can again get from the media query with of(context) and there access

98
00:08:22,290 --> 00:08:29,130
the padding. This, as the information here also tells us, gives us the padding which Flutter automatically

99
00:08:29,220 --> 00:08:39,720
adds around a wrap for typical UI interfaces or typical UI elements, like the system status bar.

100
00:08:39,780 --> 00:08:44,940
So here we can get the padding and we want to get the padding from the top which is for the status

101
00:08:44,940 --> 00:08:53,580
bar. Let's deduct it here from the available height for our chart and also for the available height of our

102
00:08:53,580 --> 00:08:54,430
list

103
00:08:54,630 --> 00:09:01,660
and if we saved this and do a full restart with the green arrow here again and we go back, now

104
00:09:01,810 --> 00:09:08,050
this really isn't scrollable anymore because now, we have the full height of the device minus the

105
00:09:08,050 --> 00:09:11,750
appBar minus the status bar and then we split that available space.

