1
00:00:02,240 --> 00:00:07,880
So with this quick look at onGenerateRoute and onUnknownRoute which can be useful depending

2
00:00:07,880 --> 00:00:09,380
on which app you're building,

3
00:00:09,380 --> 00:00:12,060
let's go back to this app we're building here and

4
00:00:12,060 --> 00:00:15,750
let's make sure that for a selected meal, we show more details.

5
00:00:15,770 --> 00:00:22,190
This of course again has no direct connection to navigation but practicing to combine widgets with each

6
00:00:22,190 --> 00:00:27,040
other and build nice user interfaces certainly also isn't too bad I guess.

7
00:00:27,080 --> 00:00:33,810
So let's go to the MealDetailScreen and now work on that. In there, instead of the centered widget,

8
00:00:34,340 --> 00:00:39,410
I want to have a column because we'll have a couple of pieces of information or a couple of different elements

9
00:00:39,440 --> 00:00:41,420
on top of each other. At the very top

10
00:00:41,420 --> 00:00:44,360
for example, I want to display the image of the recipe,

11
00:00:44,360 --> 00:00:53,180
then I also want to show the ingredients and then the steps it takes to build this or to make this

12
00:00:53,180 --> 00:00:59,670
dish. Hence at the very top, I'll first of all add a container which should hold the image, where I'll give

13
00:00:59,670 --> 00:01:06,730
this a height of 300 and a width of double infinity to be as broad as possible, to basically

14
00:01:06,730 --> 00:01:13,430
span the full width of the device screen and the child of that container will be the image.

15
00:01:13,440 --> 00:01:16,560
So here, we can use Image.network

16
00:01:19,710 --> 00:01:24,490
and now we need to find out which meal the user selected.

17
00:01:24,510 --> 00:01:27,450
Keep in mind that we do extract the meal ID here,

18
00:01:27,660 --> 00:01:33,750
we can of course now use the meal ID to find the full meal here in our dummy data source.

19
00:01:33,750 --> 00:01:42,180
So in the MealDetailScreen, we can now import from that dummy_data.dart file

20
00:01:42,200 --> 00:01:44,480
so that we have access to the dummy meals

21
00:01:44,810 --> 00:01:53,360
and now we can get the selected meal here by having a look at all our meals, all our dummy meals stored

22
00:01:53,360 --> 00:01:55,150
in this dummy meals constant

23
00:01:55,460 --> 00:01:59,970
and before we used where to filter a couple of fitting elements,

24
00:01:59,990 --> 00:02:02,570
now we want to have only one fitting element

25
00:02:02,600 --> 00:02:09,560
and for that, we can use first where. This gives us one meal for which the condition in this function

26
00:02:09,560 --> 00:02:10,759
returns true.

27
00:02:10,759 --> 00:02:13,260
So again, this runs on every meal in the list

28
00:02:13,370 --> 00:02:19,340
and when this function, this anonymous function returns true, it stops looking for more and gives us that

29
00:02:19,370 --> 00:02:20,770
item, that meal.

30
00:02:20,900 --> 00:02:26,210
And of course the condition I want to check here, here with this shortcut syntax where I use the arrow

31
00:02:26,210 --> 00:02:32,300
function, where I don't need curly braces here and the value of my expression here is immediately

32
00:02:32,300 --> 00:02:33,260
returned,

33
00:02:33,260 --> 00:02:38,530
I will compare meal ID to my meal ID up here.

34
00:02:38,540 --> 00:02:44,840
So meal.id, the ID for the meal we're looking at in dummy meals, compared to meal ID, this variable

35
00:02:44,840 --> 00:02:50,780
name here, which is the meal ID we got from our route arguments. Again as I mentioned, this expression

36
00:02:50,780 --> 00:02:52,010
here, the value of that,

37
00:02:52,070 --> 00:02:57,830
so true or false is immediately returned thanks to this shortcut here with the arrow function and therefore

38
00:02:57,830 --> 00:02:59,900
we return true if the IDs match

39
00:02:59,900 --> 00:03:01,460
and then we found our meal.

40
00:03:01,610 --> 00:03:08,210
So selected meal is the meal which the user picked and therefore for the image down there, we can use

41
00:03:08,210 --> 00:03:11,420
selectedMeal.imageUrl down there.

42
00:03:11,750 --> 00:03:18,290
Now on the image, I'll also set a fit to again fit it nicely into the surrounding container with

43
00:03:18,290 --> 00:03:19,430
BoxFit.cover,

44
00:03:19,430 --> 00:03:24,980
of course you can also play around with different values here to see how the image is sized and cropped

45
00:03:24,980 --> 00:03:28,860
and squeezed differently based on the setting you choose here.

46
00:03:29,090 --> 00:03:32,900
With that if you save it, you should see the image here already.

47
00:03:32,900 --> 00:03:38,120
Now by the way since we now have the selected meal, we can also show the title of the recipe here in the

48
00:03:38,120 --> 00:03:38,690
appBar,

49
00:03:38,960 --> 00:03:46,190
so instead of saying meal ID like this, let's add curly braces and use selectedMeal.title, the

50
00:03:46,190 --> 00:03:51,800
curly braces are required because we don't just refer to a single variable but we have a little

51
00:03:51,800 --> 00:03:57,560
bit more complex expression, we use a dot notation here and that only works with curly braces around it

52
00:03:57,650 --> 00:03:59,570
after the dollar sign.

53
00:03:59,570 --> 00:04:03,530
So now we're outputting the title and the image of the meal, of course

54
00:04:03,530 --> 00:04:07,520
that's by no means all. Besides the title and the image,

55
00:04:07,550 --> 00:04:10,700
I also want to show the ingredients of a meal.

56
00:04:10,790 --> 00:04:18,730
So after this container with the image, I'll add another container and that container should hold

57
00:04:19,209 --> 00:04:26,620
some text where I simply say ingredients, basically as a caption for this or as a title for the next

58
00:04:26,710 --> 00:04:30,400
list which is a list of the available ingredients.

59
00:04:30,400 --> 00:04:36,730
Now that text should have a certain style and that's a style we can probably set up globally in our

60
00:04:36,730 --> 00:04:37,510
theme. If

61
00:04:37,510 --> 00:04:39,030
we have a look at the theme,

62
00:04:39,160 --> 00:04:40,840
we have a title style already

63
00:04:40,990 --> 00:04:42,790
and actually that is the style I want to use.

64
00:04:43,270 --> 00:04:52,170
So we can use that theme title style by referring to the theme here with of context and then text

65
00:04:52,220 --> 00:05:01,690
theme title, just like that. This will style this text nicely, if we save this, we see ingredients here.

66
00:05:01,740 --> 00:05:05,710
Now it would be nice to have some margin between the image and the text,

67
00:05:05,850 --> 00:05:11,250
so therefore here on the container, I'll add margin and set this to 

68
00:05:14,070 --> 00:05:18,540
EdgeInsets.symmetric and only target the vertical margin, so top and bottom

69
00:05:18,540 --> 00:05:19,970
and set this to 10 maybe.

70
00:05:20,100 --> 00:05:25,650
Now we have some spacing between the title and the image and this looks better in my opinion. Below that

71
00:05:25,650 --> 00:05:31,580
container which really is just there so that we have a text, just a title for the upcoming list,

72
00:05:31,620 --> 00:05:40,360
so below that container here, I want to have a list of the various steps you have to execute.

73
00:05:40,430 --> 00:05:43,270
Now if I would add a ListView like this here,

74
00:05:43,460 --> 00:05:50,060
we would run into a problem because adding a ListView which by default has an infinite height in

75
00:05:50,060 --> 00:05:55,940
a column which also tries to get as much height as possible would throw an error.

76
00:05:55,940 --> 00:06:02,540
So instead we have to use a container here which has a fixed height and then add a ListView as a child

77
00:06:02,570 --> 00:06:04,370
of that container.

78
00:06:04,370 --> 00:06:07,130
The fixed height here is of course totally up to you,

79
00:06:07,250 --> 00:06:17,230
I'll use a height of let's say 200 here and maybe also only a width of 300 here and you could use a media

80
00:06:17,230 --> 00:06:20,470
query to adjust this to different device sizes,

81
00:06:20,530 --> 00:06:21,560
I'll not do it here,

82
00:06:21,580 --> 00:06:23,130
also to save some time

83
00:06:23,140 --> 00:06:25,360
because that's not the main focus of this app

84
00:06:25,450 --> 00:06:31,000
but of course you can refine these values by using a media query as you learned it in the responsive

85
00:06:31,030 --> 00:06:34,110
and adaptive apps module in this course.

86
00:06:34,120 --> 00:06:40,120
Here, I'll just use 300 and if that doesn't really work on small, very small devices, it's okay for me

87
00:06:40,120 --> 00:06:40,720
here,

88
00:06:40,720 --> 00:06:43,180
obviously you can fine tune it with media query.

89
00:06:43,510 --> 00:06:51,130
So we have a height and a width, let's now add the ListView as the child here and that ListView can

90
00:06:51,130 --> 00:06:55,960
be created with a builder or with this constructor in children,

91
00:06:55,960 --> 00:06:58,300
ultimately it's totally up to you.

92
00:06:58,330 --> 00:07:02,920
Theoretically we don't know how many ingredients we have and it could be very many,

93
00:07:02,950 --> 00:07:09,130
so I will use builder which gives us better performance for very long lists. Here for builder as you

94
00:07:09,120 --> 00:07:09,950
learned it,

95
00:07:09,970 --> 00:07:17,830
you need the item count and the item count of course is selectedMeal.ingredient.length

96
00:07:17,860 --> 00:07:24,120
because we want output all the ingredients here. Besides the item count, we also need the item builder

97
00:07:24,120 --> 00:07:31,050
of course and that gets the context created dynamically here for every list item and then also the index

98
00:07:31,050 --> 00:07:32,150
of that list item

99
00:07:32,250 --> 00:07:39,930
and we should return a widget here and that widget for me will be a card which I'll give a background

100
00:07:39,930 --> 00:07:44,770
color of our accent color

101
00:07:44,780 --> 00:07:46,360
and that's just the style I want to use,

102
00:07:46,370 --> 00:07:51,620
as always you can fine tune this to your requirements and play around with different values.

103
00:07:51,620 --> 00:07:55,360
And the child and the card will be a text

104
00:07:55,370 --> 00:08:04,800
let's say and that text of course should, for the ingredient with that index, output the name of that

105
00:08:04,800 --> 00:08:05,430
ingredient

106
00:08:05,490 --> 00:08:11,100
and since ingredients for us is just a list of strings, the ingredient for a specific index is already

107
00:08:11,190 --> 00:08:18,720
the name of that ingredient. Let's save that and this doesn't look too bad,

108
00:08:18,800 --> 00:08:24,950
looks nice but the problem I have with that is that if this would be smaller, let's say it has a height

109
00:08:24,950 --> 00:08:29,440
of 100, it would be not that obvious that you can scroll it, right?

110
00:08:29,480 --> 00:08:35,179
So the overall box here, the container which holds the ListView should probably have some decoration

111
00:08:35,179 --> 00:08:41,210
that clearly shows its boundaries and makes it more likely for the user to guess that you can scroll.

112
00:08:41,330 --> 00:08:48,160
So there, I'll add a BoxDecoration and give this a color of white,

113
00:08:48,170 --> 00:08:58,250
so a white background color and a border with border.all in all directions which should be grey

114
00:08:58,250 --> 00:08:59,310
with colors grey.

115
00:08:59,720 --> 00:09:05,720
So this adds a border around the container with the border argument and the BoxDecoration object we

116
00:09:05,720 --> 00:09:11,870
pass to the decoration argument of the container and maybe also give that box rounded corners with

117
00:09:11,870 --> 00:09:25,810
border radius and then BorderRadius.circular 10. Now let's also add some margin here with EdgeInsets.all

118
00:09:26,380 --> 00:09:37,370
of 10 around the entire container and also some padding of EdgeInsets.all of 10, that should

119
00:09:37,370 --> 00:09:38,880
be insets.

120
00:09:39,170 --> 00:09:40,750
And now every item here,

121
00:09:40,760 --> 00:09:46,520
so every card in the ListView builder also should have a little bit of padding inside of it I'd say.

122
00:09:46,520 --> 00:09:52,610
So let's wrap the text which is the content of the card in another widget and here we can just use

123
00:09:52,610 --> 00:09:59,120
the padding widget because I only want to add some padding and the padding here can be EdgeInsets.symmetric

124
00:10:01,870 --> 00:10:08,950
to have different padding for left and right and top and bottom of let's say vertical 5

125
00:10:09,070 --> 00:10:12,990
and horizontal 10 and

126
00:10:12,990 --> 00:10:17,340
now we have some padding around the text inside of the ingredient as well.

127
00:10:18,450 --> 00:10:25,080
If we save that and we go back, this now looks better and I think it's way clearer that you can scroll

128
00:10:25,080 --> 00:10:30,900
this and I'll now increase the height to 150, that looks like a good solution.

129
00:10:31,800 --> 00:10:34,180
So now these are my ingredients here,

130
00:10:34,200 --> 00:10:40,260
the next part which I want to output of course are the steps you need to follow to make this dish with

131
00:10:40,260 --> 00:10:42,250
these ingredients here.

132
00:10:42,510 --> 00:10:46,020
For that, I will repeat this title here

133
00:10:46,020 --> 00:10:51,600
and since I will repeat it, we could move that into a separate widget or at least move it into a builder

134
00:10:51,600 --> 00:10:51,950
method

135
00:10:51,960 --> 00:10:53,280
and that's what I will do.

136
00:10:53,430 --> 00:11:01,580
I'll add a new method here to the MealDetailScreen widget which I'll name buildSectionTitle,

137
00:11:01,580 --> 00:11:02,750
the name is up to you

138
00:11:02,900 --> 00:11:09,380
and I expect to get the text, you can name it title, text, whatever you want, as an input, as an argument and

139
00:11:09,380 --> 00:11:18,320
I return this container, which in the end outputs this text here which will now be dynamic and which

140
00:11:18,320 --> 00:11:19,640
also needs the context,

141
00:11:19,640 --> 00:11:30,850
so let's also accept BuildContext context here and now we can call buildSectionTitle down there and

142
00:11:30,850 --> 00:11:38,600
pass in the context and the title which here was ingredients and do the very same below our container

143
00:11:38,630 --> 00:11:45,620
there and do the same for steps because then I also want to output the steps and now we avoided code

144
00:11:45,680 --> 00:11:51,800
duplication and have also a leaner widget tree down there,

145
00:11:51,860 --> 00:11:55,500
thanks to that avoided code duplication.

146
00:11:55,530 --> 00:12:01,140
Now another piece which I want to replicate is this container with the ListView, the ListView itself

147
00:12:01,170 --> 00:12:02,940
will then work differently, there

148
00:12:02,940 --> 00:12:08,520
I will use different list items for the steps but that surrounding container should be the same.

149
00:12:08,640 --> 00:12:14,520
So we can also move that into a builder method and again creating a separate widget, maybe one which

150
00:12:14,520 --> 00:12:18,680
you store in the same file if you only use it here would also be fine

151
00:12:18,840 --> 00:12:24,960
but I will add a builder method again, name this build container

152
00:12:28,660 --> 00:12:35,320
and in there, create my container with a certain child. That child is some input I expect to get,

153
00:12:35,320 --> 00:12:41,260
so that should be of type widget and that's what I pass on to the container here and then I can return

154
00:12:41,260 --> 00:12:41,950
it

155
00:12:42,100 --> 00:12:47,020
and now the child is something we can pass in dynamically, so that we can now use the build container

156
00:12:47,020 --> 00:12:50,320
method down there to build this container

157
00:12:54,600 --> 00:13:00,700
and pass child here as an argument, not a named argument though but just like this

158
00:13:00,720 --> 00:13:04,020
and of course you could turn it into a named argument as well.

159
00:13:04,020 --> 00:13:05,470
And now we have build container,

160
00:13:05,490 --> 00:13:09,750
we can now also use build container down there

161
00:13:09,750 --> 00:13:13,990
and now my child which I want to pass down there will also still be a ListView,

162
00:13:13,990 --> 00:13:20,460
also still be a ListView with the builder method but with a different list item in there,

163
00:13:20,490 --> 00:13:25,490
so it's not a perfect copy. Just as before,

164
00:13:25,490 --> 00:13:27,380
builder method takes an item count

165
00:13:27,440 --> 00:13:31,090
and now we're talking about the steps it takes to create that meal.

166
00:13:31,100 --> 00:13:38,060
So for the selected meal, I now will have the steps length that defined the count for this ListView builder

167
00:13:38,270 --> 00:13:43,820
because I want to output all the steps here and therefore the item builder as before receives the context

168
00:13:43,850 --> 00:13:46,010
and the index

169
00:13:46,250 --> 00:13:52,190
and again we can use the arrow function shortcut here, we return the widget we want to build for every

170
00:13:52,190 --> 00:13:57,320
list item. And here I'll use ListTile, not card but ListTile

171
00:13:57,320 --> 00:14:03,560
and in that ListTile, I'll set leading to a CircleAvatar and

172
00:14:03,700 --> 00:14:11,610
we saw that before if you remember in our personal expenses app and CircleAvatar will have a child

173
00:14:11,610 --> 00:14:18,720
and that should be text which is the number of this step and we can derive that number based on the index because

174
00:14:18,720 --> 00:14:24,600
the index starts at zero and then counts up all the way to the length of the steps -1 because

175
00:14:24,600 --> 00:14:26,070
it starts at zero.

176
00:14:26,070 --> 00:14:36,440
So here, we can output maybe # and then string interpolation, use index plus 1 because it starts at

177
00:14:36,440 --> 00:14:36,860
zero

178
00:14:36,860 --> 00:14:40,150
but we want to start at step one of course, to us humans

179
00:14:40,160 --> 00:14:46,360
step one makes more sense than step zero and output that here.

180
00:14:46,390 --> 00:14:50,250
So now, we output the number of the steps in a CircleAvatar

181
00:14:50,260 --> 00:14:56,770
at the beginning of our ListTile. The title then is the step text,

182
00:14:56,770 --> 00:15:06,980
so here we have a text widget which can be selectedMeal.steps for the given index. And steps

183
00:15:06,980 --> 00:15:08,720
again is just a list of strings,

184
00:15:08,750 --> 00:15:12,460
so this already is the text I want to output.

185
00:15:12,700 --> 00:15:24,980
And with that if we save this and reload and we go to Italian, click on that, I'm getting an error which

186
00:15:24,980 --> 00:15:30,140
has a cryptic error message unfortunately but which in the end is related to me not returning my container

187
00:15:30,140 --> 00:15:33,420
here in build container. Of course we have to return it here,

188
00:15:33,450 --> 00:15:40,460
even state it here, otherwise build container here will not render or not return a widget that

189
00:15:40,460 --> 00:15:42,850
can be rendered.

190
00:15:43,010 --> 00:15:49,090
So now this works and now we have a different problem though, we go beyond the boundaries of our device

191
00:15:49,370 --> 00:15:51,830
and you learned what we can do about that earlier.

192
00:15:53,460 --> 00:16:00,390
We can wrap our column which we have here in the end into a SingleChildScrollView. So can wrap this

193
00:16:00,390 --> 00:16:08,050
with a new widget and that's the SingleChildScrollView which ensures that this column now is scrollable

194
00:16:08,050 --> 00:16:10,430
and that's already it.

195
00:16:10,440 --> 00:16:16,020
Now we have that and down there, we have our steps which are pretty nice to read and hopefully pretty

196
00:16:16,020 --> 00:16:18,960
clear. Now as a tiny tweak,

197
00:16:18,960 --> 00:16:24,810
I also want to add a divider between these steps and that can be acheived down there where we

198
00:16:24,810 --> 00:16:30,960
create these list tiles by not returning just a ListTile but actually a column because I want I have two

199
00:16:30,960 --> 00:16:40,880
items on top of each other, where the ListTile is the topmost item but then besides the ListTile or below

200
00:16:40,880 --> 00:16:41,940
the ListTile,

201
00:16:41,990 --> 00:16:48,870
I use the divider widget which is also built into Flutter, should be here

202
00:16:48,880 --> 00:16:55,700
however and the divider widget will simply draw a horizontal line. So divider is provided by the Flutter

203
00:16:55,700 --> 00:17:03,130
framework and it's added below the ListTile, it's this tiny grey horizontal line you see here.

204
00:17:03,280 --> 00:17:07,750
So with that, I'd say this doesn't look too bad, it is a nice detail page.

205
00:17:07,750 --> 00:17:12,970
Of course you can tweak this to your likings, change the look if you want a different look,

206
00:17:12,970 --> 00:17:17,270
I think for this app, this is more than fine but now with that, I of course

207
00:17:17,280 --> 00:17:22,990
also want to go back to more navigation features because whilst we can go forth and back which is

208
00:17:22,990 --> 00:17:23,819
nice,

209
00:17:23,859 --> 00:17:30,370
what we haven't really learned is how we can also use tabs or a side drawer for example

210
00:17:30,370 --> 00:17:32,020
and that's what we'll focus on next.

