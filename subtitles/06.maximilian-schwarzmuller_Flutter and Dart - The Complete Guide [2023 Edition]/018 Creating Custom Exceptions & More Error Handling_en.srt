1
00:00:02,150 --> 00:00:07,590
Now to throw your own error, you can use the throw keyword and there is a class in Dart,

2
00:00:07,600 --> 00:00:11,050
the exception class which you can use to build your own exception.

3
00:00:11,050 --> 00:00:14,200
However, the Dart team discourages that you directly use that,

4
00:00:14,230 --> 00:00:18,850
instead you should build your own exception based on that exception class here.

5
00:00:19,030 --> 00:00:22,140
For that, let me add a new folder, the models folder,

6
00:00:22,150 --> 00:00:28,300
we saw that before in this course and in there, I'll add a http_exception.dart file and you can

7
00:00:28,300 --> 00:00:30,110
name this however you want of course.

8
00:00:30,310 --> 00:00:36,520
I'll add a class here and I want to name it HTTP exception because in the end, I'll throw that exception when

9
00:00:36,820 --> 00:00:40,110
we have some problems with our HTTP request.

10
00:00:40,120 --> 00:00:46,270
Now this is a class and exception classes which you plan on throwing should do something which we haven't

11
00:00:46,270 --> 00:00:47,260
done before,

12
00:00:47,260 --> 00:00:50,660
they should implement exception.

13
00:00:50,710 --> 00:01:00,070
Now what does implements mean? We saw with, we saw extends, what's implements? Implements uses a class, exception

14
00:01:00,070 --> 00:01:01,500
here is a class,

15
00:01:01,560 --> 00:01:07,330
it's an abstract class though. Abstract means we can't directly instantiate this and in the end when we

16
00:01:07,330 --> 00:01:14,180
implement a class, we are signing a contract, we're forced to implement all functions

17
00:01:14,200 --> 00:01:20,850
this class has. Now exception itself has no class but in the end, this is just some complex syntax for saying

18
00:01:20,980 --> 00:01:25,900
the exception class essentially looks like this and there, we have a to string method.

19
00:01:25,960 --> 00:01:33,640
Now actually, every class in Dart has a to string method automatically because every class invisibly

20
00:01:33,760 --> 00:01:40,480
extends object, object is the base class in Dart which every object is based on.

21
00:01:40,510 --> 00:01:44,350
So to string is a method you can always call on any object,

22
00:01:44,470 --> 00:01:51,910
for example here, on this exception here, we can call to string on our own product here, on the existing

23
00:01:51,910 --> 00:01:53,240
product I have here,

24
00:01:53,320 --> 00:01:55,130
I can call to string

25
00:01:55,180 --> 00:01:59,550
even though we never added that because to string is available on every class.

26
00:01:59,800 --> 00:02:05,920
But now we're signing a contract that will override this because normally to string for your own

27
00:02:05,920 --> 00:02:14,290
classes just for instance of HTTP exception thing, so it just tells you of which type of class

28
00:02:14,290 --> 00:02:15,640
your object is.

29
00:02:15,790 --> 00:02:22,000
Here however, we want to instead print the error message because exceptions typically store a message.

30
00:02:22,030 --> 00:02:28,120
So here, I'll add a final string message and a constructor to set this error message

31
00:02:28,120 --> 00:02:34,420
and then here, I'll override to string with @Override to make it really clear that I'm adding this

32
00:02:34,420 --> 00:02:43,010
deliberately and instead of returning super to string, which would yield us this instance of HTTP exception

33
00:02:43,010 --> 00:02:50,660
thing, instead of doing this, I will return my custom string and here, I want to return message.

34
00:02:50,900 --> 00:02:59,000
So my own HTTP exception class is now configured to always print the message here when we call our

35
00:02:59,060 --> 00:03:05,840
exception which would be a concrete instance of this class to string or when we do print our exception,

36
00:03:06,050 --> 00:03:09,380
in all these cases, it will trigger to string

37
00:03:09,380 --> 00:03:11,290
and now it will simply print that message.

38
00:03:12,630 --> 00:03:15,760
So with that, we have our own exception class added, back in products,

39
00:03:15,780 --> 00:03:22,170
we can now throw our own exception class. So let's use HTTP exception here and for that of course,

40
00:03:22,230 --> 00:03:29,490
add an import to our own class here from the models folder, from the http_exception.dart file. With that import

41
00:03:29,520 --> 00:03:29,990
added,

42
00:03:30,030 --> 00:03:32,050
I'm throwing my own HTTP exception,

43
00:03:32,130 --> 00:03:40,230
add a message here, could not delete product, something like this. I'm never using that message here in

44
00:03:40,230 --> 00:03:44,050
this program but you could use it anywhere if you want to

45
00:03:44,190 --> 00:03:47,930
and now with that, we're throwing that, since I'm throwing

46
00:03:47,940 --> 00:03:52,630
then, we should now make it into catch error and therefore now we should restore that.

47
00:03:52,740 --> 00:03:58,980
So if we try that again and I delete this, it's gone and it's back, it's gone and it's back because now,

48
00:03:59,010 --> 00:04:04,890
we're really using that optimistic updating here. Now we can also take this to the next level and even

49
00:04:04,980 --> 00:04:09,900
add some error handling and actually to always use the same syntax,

50
00:04:09,900 --> 00:04:14,640
I will now add async await, we wouldn't have to do that here but I don't want to makes the different

51
00:04:14,640 --> 00:04:16,010
future syntaxes.

52
00:04:16,110 --> 00:04:21,630
So here, I use async, hence we get back a future and therefore now I await here

53
00:04:24,570 --> 00:04:32,860
and hence I get my response here and store this in this final constant. In the next line,

54
00:04:32,860 --> 00:04:35,390
I then check this and I throw an error

55
00:04:35,410 --> 00:04:36,670
if we have a problem

56
00:04:43,110 --> 00:04:45,990
Now let's just clean this all up correctly,

57
00:04:45,990 --> 00:04:48,930
so here I check if we have a problem with the status code,

58
00:04:48,990 --> 00:04:55,080
if we do, I can already do the roll back in here of course because that's in the end what I had in catch

59
00:04:55,080 --> 00:04:57,990
before, else

60
00:04:57,990 --> 00:05:03,810
if we have no problem and actually, we will only reach it if we're not making it in here because if we

61
00:05:03,810 --> 00:05:08,670
make it in here, throw is basically like return and it cancels the function execution,

62
00:05:08,670 --> 00:05:10,470
the other code will not execute.

63
00:05:10,830 --> 00:05:16,290
So if we don't make it in here, then this code will run and we do reset the product.

64
00:05:16,320 --> 00:05:22,920
Now since I'm not using a promise with then and catch anymore however, I should execute this of course

65
00:05:23,400 --> 00:05:29,090
to have optimistic updating before we actually start sending the request before we wait, so

66
00:05:29,190 --> 00:05:32,600
otherwise we would wait for the request to finish before we delete this,

67
00:05:32,610 --> 00:05:37,790
I want to delete it before the response is there and now, we have a setup where we immediately delete,

68
00:05:37,830 --> 00:05:39,500
then we wait for the response,

69
00:05:39,540 --> 00:05:44,970
then we check the response and possibly roll back and throw an error if it is an error response and

70
00:05:44,970 --> 00:05:48,130
otherwise, we just reset that existing product which we cached.

71
00:05:50,490 --> 00:05:56,140
And now we can actually handle that error in the user products screen, there in the user product item.

72
00:05:56,650 --> 00:05:59,480
When we delete here,

73
00:05:59,620 --> 00:06:08,350
this now may fail so we can now wrap this with try catch here and catch a potential error we might

74
00:06:08,350 --> 00:06:10,120
be getting. For that,

75
00:06:10,120 --> 00:06:16,780
let's just turn this into an async function here, so that this can work with this future which this is

76
00:06:16,840 --> 00:06:18,310
behind the scenes

77
00:06:18,310 --> 00:06:23,890
and then here in catch, we could show a snack bar for example if we wanted to.

78
00:06:23,890 --> 00:06:27,140
So there, we could use scaffold of context,

79
00:06:27,220 --> 00:06:35,360
show snack bar, you learned about that in the user interaction module, to create and use snack bar and there,

80
00:06:35,370 --> 00:06:44,560
show a content of deleting failed for example and content of course takes a widget,

81
00:06:44,580 --> 00:06:47,530
so let's use a text widget there.

82
00:06:47,540 --> 00:06:51,510
So with that, I'm just showing that extra information, besides restoring the data,

83
00:06:51,540 --> 00:06:56,240
I now also give the user some visual feedback that this failed

84
00:06:56,240 --> 00:06:59,140
and of course now we also have the await here,

85
00:06:59,180 --> 00:07:05,600
otherwise we'll not handle this appropriately. So now with async await and try catch here in user product

86
00:07:05,660 --> 00:07:08,510
item, we should now see a scaffold

87
00:07:11,530 --> 00:07:13,340
if we reload here,

88
00:07:13,390 --> 00:07:21,360
if we delete this and it's re-added. However, there is no snack bar and we got an error here that's

89
00:07:21,360 --> 00:07:24,360
causing this or that's explaining this behavior.

90
00:07:24,360 --> 00:07:30,600
Basically, the problem here is with scaffold of, I'm doing this here inside of a future right, I'm doing

91
00:07:30,600 --> 00:07:34,890
this here inside of a future because async is used here and therefore everything in there is wrapped

92
00:07:34,890 --> 00:07:42,840
into a future and therefore of context can't actually be resolved anymore due to how Flutter works internally.

93
00:07:43,080 --> 00:07:47,820
It's already updating the widget tree at this point of time and therefore it's not sure whether a context

94
00:07:47,820 --> 00:07:55,170
still refers to the same context it did before. Solution for that is to go to the build method and

95
00:07:55,170 --> 00:08:05,230
get our scaffold here, store that in a constant variable with scaffold of context and then down there, I just

96
00:08:05,230 --> 00:08:12,950
use this scaffold variable instead of refetching access. If I do that and I now delete this,

97
00:08:13,090 --> 00:08:18,190
now you see this works and now we have deleting failed here at the bottom. So now showing that scaffold

98
00:08:18,190 --> 00:08:22,230
works because now we're getting access to that scaffold outside of our future here

99
00:08:22,330 --> 00:08:27,590
earlier when we built this already and therefore, we already have access to our scaffold no matter if

100
00:08:27,590 --> 00:08:32,340
this rebuilds or not and hence we can now use that down there.

101
00:08:32,350 --> 00:08:38,260
Now let me also align the text here with textAlign.center, just a tiny improvement which I'll

102
00:08:38,260 --> 00:08:43,870
like to have here but with that, we have a decent setup I'd say and we give the user some feedback and

103
00:08:43,870 --> 00:08:49,180
we have some optimistic updating in place and of course, we're also now able to delete our products if

104
00:08:49,180 --> 00:08:52,780
I fix this error and I add JSON again.

105
00:08:52,840 --> 00:08:57,830
So let me demonstrate this as well because of course, that is also not that unimportant,

106
00:08:57,970 --> 00:08:58,470
yes

107
00:08:58,600 --> 00:09:00,460
now it's gone and it stays gone

108
00:09:00,460 --> 00:09:02,680
and even if I reload, it's still gone.

