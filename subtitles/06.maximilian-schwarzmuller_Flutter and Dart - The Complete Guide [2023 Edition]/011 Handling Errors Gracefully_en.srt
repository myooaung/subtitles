1
00:00:02,120 --> 00:00:03,750
So we added a loading spinner.

2
00:00:03,770 --> 00:00:06,530
That's nice and certainly helpful to our users.

3
00:00:06,530 --> 00:00:08,900
But what if things go wrong?

4
00:00:09,260 --> 00:00:14,750
If things go wrong, for example, when adding a product, then currently we're not doing anything.

5
00:00:15,540 --> 00:00:18,480
Now here in this application, there is little that could go wrong.

6
00:00:18,510 --> 00:00:20,880
To be honest, I have a good internet connection here.

7
00:00:20,910 --> 00:00:22,860
Firebase is a stable service.

8
00:00:22,950 --> 00:00:26,700
Errors are unlikely, but of course, in reality, errors will happen.

9
00:00:26,730 --> 00:00:29,190
Your users lose the internet connection.

10
00:00:29,190 --> 00:00:35,790
There is an error on the server or invalid data is sent somehow and here I can simulate an error by

11
00:00:35,790 --> 00:00:37,500
removing dot jason at the end.

12
00:00:37,500 --> 00:00:40,550
Firebase will not like this and will actually throw an error.

13
00:00:40,560 --> 00:00:43,050
Now let me demonstrate this.

14
00:00:43,050 --> 00:00:53,010
If I now go to manage products and I try to add a new product, a book for 1299, this is an awesome.

15
00:00:53,950 --> 00:00:54,620
Book.

16
00:00:54,940 --> 00:00:58,540
If I now try to add this with my.

17
00:00:59,520 --> 00:01:00,720
Dummy image here.

18
00:01:00,870 --> 00:01:06,390
And I should say, if we see the spinner and now the spinner will not go away, simply because if we

19
00:01:06,390 --> 00:01:09,230
go back, we see that there is an error.

20
00:01:09,240 --> 00:01:14,940
There is an error thrown by firebase or returned by firebase, and that then is automatically caught

21
00:01:14,940 --> 00:01:19,860
by the HTTP package we're using and thrown as an error in our app.

22
00:01:20,010 --> 00:01:26,850
And the error we're getting here in the end is giving us an error message which is quite helpful, which

23
00:01:26,850 --> 00:01:32,640
is actually nice and would help us fix that error since this of course is an error I introduced as a

24
00:01:32,640 --> 00:01:33,480
developer.

25
00:01:33,480 --> 00:01:39,660
We see it's of type format exception in DART there are different exception base classes which are built

26
00:01:39,660 --> 00:01:42,570
into DART which describe errors that can happen.

27
00:01:42,570 --> 00:01:45,180
And here we're having such an error.

28
00:01:45,180 --> 00:01:51,840
So this request here is in the end now following an error and it's bubbling up and becomes a real error

29
00:01:51,840 --> 00:01:57,600
in our app which is thrown here in the debug console and crashes our app because we're not handling

30
00:01:57,600 --> 00:01:58,590
that error.

31
00:01:58,620 --> 00:02:05,850
We should handle such errors not only because we then avoid the app crashing, but also because this

32
00:02:05,850 --> 00:02:11,070
of course, is not a great user experience showing that spinner and not telling the user anything.

33
00:02:11,070 --> 00:02:12,330
That's not that great.

34
00:02:12,720 --> 00:02:15,090
How can you handle errors?

35
00:02:15,450 --> 00:02:21,810
Well, we use them here on our future to define the function, the code that should run when this future

36
00:02:21,810 --> 00:02:22,800
succeeds.

37
00:02:23,190 --> 00:02:29,280
Now, similarly, you can also define a method that should run when that fails, and you can simply

38
00:02:29,280 --> 00:02:30,720
add this after.

39
00:02:30,720 --> 00:02:35,880
Then here you can add it after then, because then itself returns a new future.

40
00:02:35,880 --> 00:02:38,160
And therefore whatever I call after dat.

41
00:02:38,160 --> 00:02:43,680
So with a dot on the result of then is effectively called on the future return by then.

42
00:02:43,680 --> 00:02:44,010
Right.

43
00:02:44,010 --> 00:02:47,580
So I'm calling this on that future object then returns.

44
00:02:47,700 --> 00:02:54,810
I could also call catch error here in front of then and then I would also handle errors thrown by this

45
00:02:54,810 --> 00:02:58,710
post method, which is the method that yields these this error here in the end.

46
00:02:58,710 --> 00:03:06,210
But if I call catch error here before I have my then block, then the logic in this then block will

47
00:03:06,210 --> 00:03:10,290
also execute once my logic and catch error is done.

48
00:03:10,290 --> 00:03:11,460
I don't want that.

49
00:03:11,460 --> 00:03:19,500
Instead, by adding catch error here, I can now define a function which will be called whenever an

50
00:03:19,500 --> 00:03:22,710
error is thrown either here or here.

51
00:03:22,740 --> 00:03:27,990
And if an error is thrown here while sending the post request, the then block will be skipped and we

52
00:03:27,990 --> 00:03:31,740
immediately reach this function here in catch error.

53
00:03:31,830 --> 00:03:37,590
So here in catch error you do indeed the final function which receives the error data, the error object

54
00:03:37,590 --> 00:03:43,710
which was thrown, which describes the error, which here in this case, as I mentioned, is an object

55
00:03:43,710 --> 00:03:50,070
based on the built in format exception class and it contains an error message which is automatically

56
00:03:50,070 --> 00:03:50,880
printed here.

57
00:03:50,880 --> 00:03:52,680
And we can now interact with that error.

58
00:03:52,680 --> 00:03:57,120
For example, with print error here, I can also print that error message.

59
00:03:57,180 --> 00:04:00,840
And now here we could do all kinds of things with that error that you want to do.

60
00:04:00,870 --> 00:04:06,750
The core thing is that now our app will not crash anymore because with this we're already handling the

61
00:04:06,750 --> 00:04:07,080
error.

62
00:04:07,080 --> 00:04:12,120
So we're telling Dart, it's fine, I got you covered, I'm doing something on that error and that's

63
00:04:12,120 --> 00:04:16,709
already an improvement because the app does not crash technically anymore.

64
00:04:17,880 --> 00:04:23,730
Again, as I mentioned, the code in here in the then block will be skipped if the error is thrown instead

65
00:04:23,730 --> 00:04:29,220
of our post method there, which is the case for this error I added here and therefore we make it straight

66
00:04:29,220 --> 00:04:30,240
to catch error.

67
00:04:30,540 --> 00:04:36,510
Now of course here we could do all kinds of error handling, for example, also send this to our custom

68
00:04:36,510 --> 00:04:42,300
analytics server to store this error message there and get notified about that error in one of our apps

69
00:04:42,300 --> 00:04:46,980
or just log it here, which isn't too useful because the user will not see that.

70
00:04:47,160 --> 00:04:54,150
So what we might want to do here is either not use catch error here at all or simply use the flow keyword

71
00:04:54,150 --> 00:04:58,380
which is built into dart to throw that error we're getting here again.

72
00:04:58,380 --> 00:05:04,770
So fro takes an error object and we're getting an error object here and it will now create a new error.

73
00:05:04,770 --> 00:05:07,650
So we're handling the error here and now I'm creating a new one.

74
00:05:07,650 --> 00:05:12,690
I'm only doing this because I have catch error here and I want to be able to add a never catch error

75
00:05:12,690 --> 00:05:15,240
clause in another place.

76
00:05:15,240 --> 00:05:18,150
And that I replace is the edit product screen.

77
00:05:18,360 --> 00:05:25,110
That's of course the screen where we send that request right here we call ad product there we handle

78
00:05:25,110 --> 00:05:30,450
the success case and there we now have the problem that we have no success case but that we have an

79
00:05:30,450 --> 00:05:30,990
error.

80
00:05:31,410 --> 00:05:35,670
So what we can do here is we can add catch error here as well.

81
00:05:35,670 --> 00:05:39,090
And now this will be reached because I'm throwing my error here again.

82
00:05:39,120 --> 00:05:44,160
Alternatively, if we would leave out catch error here altogether, we would also reach catch error

83
00:05:44,160 --> 00:05:44,610
here.

84
00:05:44,610 --> 00:05:50,280
So catch error is reached if there is an error, but only the first catch error in line will execute

85
00:05:50,280 --> 00:05:52,350
then and that will then handle the error.

86
00:05:52,650 --> 00:05:58,860
So here we now also get that error object and here we can now also do with what we want.

87
00:05:58,860 --> 00:05:59,130
But.

88
00:05:59,200 --> 00:05:59,320
Here.

89
00:05:59,320 --> 00:06:04,660
Of course, the great thing is we're now in the widget, so here we can now do something which the user

90
00:06:04,660 --> 00:06:06,970
sees to inform the user about the error.

91
00:06:07,120 --> 00:06:11,440
So here we could send or show a dialogue with show dialogue.

92
00:06:11,710 --> 00:06:15,490
And show dialogue takes a context.

93
00:06:15,490 --> 00:06:22,270
And there we can use the context property which is available everywhere in your state object when and

94
00:06:22,270 --> 00:06:23,110
your state class.

95
00:06:23,110 --> 00:06:24,820
And we're in the state class here, of course.

96
00:06:25,300 --> 00:06:31,200
And besides the context, show dialogue also takes a builder which is used to build this dialogue.

97
00:06:31,240 --> 00:06:35,110
It takes a function which gets its own context generated by Flutter.

98
00:06:35,110 --> 00:06:41,890
And then here we typically return an alert dialog which allows us to configure such a dialog box which

99
00:06:41,890 --> 00:06:45,430
is presented to the user in that dialog box.

100
00:06:45,430 --> 00:06:48,990
Here I'll set a title and error occurred.

101
00:06:49,000 --> 00:06:50,470
Sounds like a fitting title.

102
00:06:50,620 --> 00:06:52,690
Whoops, that should be a text widget though.

103
00:06:52,690 --> 00:06:54,040
Not just plain text.

104
00:06:56,020 --> 00:06:58,930
And besides the title, we also want to have a content here and there.

105
00:06:58,930 --> 00:07:02,770
I'll have another text widget where I say something.

106
00:07:03,860 --> 00:07:06,380
Went wrong, though, if we wanted to.

107
00:07:06,500 --> 00:07:11,010
Instead of having our generic text here, we could also simply use the error here.

108
00:07:11,030 --> 00:07:18,980
Error is an object which will have a message inside of it and it's configured all exception.

109
00:07:18,980 --> 00:07:22,820
Classes in DART are configured to have a two string method.

110
00:07:22,820 --> 00:07:26,300
That's actually a method which every object in DART has.

111
00:07:26,300 --> 00:07:33,380
So every custom object has to string as well because DART basically gives you this object based class

112
00:07:33,380 --> 00:07:37,190
on which every class in Dart invisibly depends.

113
00:07:37,190 --> 00:07:44,900
So to string is available on every value in DART, but to string on error objects is specifically configured

114
00:07:44,900 --> 00:07:47,510
to simply print a readable error message.

115
00:07:47,510 --> 00:07:53,420
And that's why here in our error log, for example, you see this nice message that's coming from two

116
00:07:53,420 --> 00:07:58,940
string being called on the error and then gives us the error message, which in this case Firebase gave

117
00:07:58,940 --> 00:07:59,330
us.

118
00:07:59,690 --> 00:08:04,820
Now we could print this, but often these error messages are really technical, or you don't even want

119
00:08:04,820 --> 00:08:08,870
to show them to your users because they might contain confidential information.

120
00:08:08,870 --> 00:08:12,830
So here I'll go with something went wrong for the moment.

121
00:08:12,830 --> 00:08:18,590
Later in the authentication section, we'll see more fine grained error handling in action.

122
00:08:18,800 --> 00:08:21,230
With that, I'm building that dialogue now.

123
00:08:21,230 --> 00:08:23,480
I also want to add an action to close it.

124
00:08:23,480 --> 00:08:30,170
For that I add a flat button here where the child is a text widget, where I say, okay, and upon pressing,

125
00:08:30,170 --> 00:08:32,510
I just want to close this dialog.

126
00:08:32,510 --> 00:08:40,010
And we can close a dialog simply by calling navigator off context pop as you learned.

127
00:08:40,010 --> 00:08:47,780
So we close overlays of any kind and dialogues are such overlays with pop and just like removing the

128
00:08:47,780 --> 00:08:53,150
current screen of the stack, this removes the current overlay which is on that same stack, so to say.

129
00:08:53,860 --> 00:08:56,560
And here we can actually use the context we're getting here.

130
00:08:57,460 --> 00:08:59,260
So with that, I'm closing that.

131
00:08:59,740 --> 00:09:01,690
I'm showing my dialogue when I get an error.

132
00:09:01,720 --> 00:09:06,310
The missing thing, though, is that I actually do want to remove the loading spinner and maybe all

133
00:09:06,310 --> 00:09:11,380
the close to page if we are done, no matter if we got an error or not.

134
00:09:11,380 --> 00:09:16,000
Because even with an error, we're downloading and I want to give control back to the user.

135
00:09:16,000 --> 00:09:18,400
I just want to let the user know about that error.

136
00:09:18,580 --> 00:09:21,880
Now that let the user know part is finished here.

137
00:09:22,120 --> 00:09:24,890
We now also want to ensure that we reach then.

138
00:09:24,910 --> 00:09:27,970
And the good thing is, that's what I mentioned earlier already.

139
00:09:28,150 --> 00:09:34,810
Catch error catches the error, but then you see catch error actually returns a new future.

140
00:09:35,230 --> 00:09:42,880
So then after catch error will also execute because we're calling this on a future which is automatically

141
00:09:42,880 --> 00:09:46,420
created by catch error and therefore here we're actually fine.

142
00:09:46,420 --> 00:09:53,410
Here we actually will trigger this code in there automatically because since then comes after catch

143
00:09:53,410 --> 00:09:56,970
error, it will be triggered once that error is handled.

144
00:09:56,980 --> 00:10:05,230
I just want to wait until the user made his choice and right now we would immediately pop and actually

145
00:10:05,230 --> 00:10:09,700
change that state here instead of want to wait until the user answered the dialog.

146
00:10:09,700 --> 00:10:13,840
And the good thing is that the dialog also returns a future out of the box.

147
00:10:13,840 --> 00:10:15,730
That's how Flutter configure instead.

148
00:10:15,940 --> 00:10:20,830
So here we can actually return to result of show dialog, which is just that future.

149
00:10:20,830 --> 00:10:25,840
And that future will be resolved with the value we chose here for popping the dialog.

150
00:10:25,840 --> 00:10:26,140
Right.

151
00:10:26,140 --> 00:10:28,350
That's also something we did earlier in the course.

152
00:10:28,360 --> 00:10:33,280
So only as soon as the user click the button and this is popped, this future will be resolved.

153
00:10:33,280 --> 00:10:38,350
Since I returned the future here in this function, that will be the future return by catch error and

154
00:10:38,350 --> 00:10:40,720
therefore it is then block will only execute.

155
00:10:40,720 --> 00:10:46,600
Once this dialog was closed to once this button was pressed and we popped the dialog.

156
00:10:47,020 --> 00:10:53,320
So with that we now have an error handling logic in place which should allow us to successfully handle

157
00:10:53,320 --> 00:10:53,870
that error.

158
00:10:53,890 --> 00:10:57,550
So now if I try this again with some dummy data here, maybe.

159
00:10:58,510 --> 00:11:00,460
This is some test.

160
00:11:01,920 --> 00:11:03,330
And I add my image here.

161
00:11:04,130 --> 00:11:05,540
Now you see that spinner.

162
00:11:05,570 --> 00:11:07,970
Now we get that overlay, that dialog.

163
00:11:07,970 --> 00:11:14,690
But if I press, okay, we actually close that page still and here we only see that shorter output instead

164
00:11:14,690 --> 00:11:18,290
of that crashing error message because our app now didn't crash.

165
00:11:18,290 --> 00:11:23,570
And that output here is only printed because I'm printing the error here and that prints the error message,

166
00:11:23,570 --> 00:11:25,040
which happens to be that.

167
00:11:25,490 --> 00:11:29,330
So this is how that works and how we can handle errors in DART.

168
00:11:29,870 --> 00:11:35,270
A very useful tool of course, because that helps us ensure that we provide a pleasant user experience.

169
00:11:35,450 --> 00:11:42,500
And with that back in product start, I'll re ad dot JSON here because of course here I want to make

170
00:11:42,500 --> 00:11:46,360
sure that we have a successful request again.

171
00:11:46,370 --> 00:11:52,430
Now in the off section, by the way, I will also show you a different way or a way of throwing your

172
00:11:52,430 --> 00:11:55,640
own custom exceptions in case you don't have a technical error.

173
00:11:55,640 --> 00:12:01,700
In case Firebase doesn't report back an error with an error status code and you are still not happy

174
00:12:01,700 --> 00:12:03,440
with the result in the off section.

175
00:12:03,440 --> 00:12:04,820
I'll have a good example for that.

176
00:12:04,820 --> 00:12:06,770
So there will also come back to this.

177
00:12:06,770 --> 00:12:09,380
For now we have all the error handling in place that we need.

