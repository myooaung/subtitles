WEBVTT
1
00:00:02.150 --> 00:00:03.700
So we have the image picker.

2
00:00:03.710 --> 00:00:05.570
Let's make sure we can upload it.

3
00:00:05.990 --> 00:00:12.350
And for this, if you Google for Firebase Flutter Storage, you should find the Firebase Storage flatter

4
00:00:12.350 --> 00:00:13.100
package.

5
00:00:13.250 --> 00:00:17.630
And we already saw some Flutter Firebase packages.

6
00:00:17.630 --> 00:00:22.130
We saw the cloud firestorm package and the firebase off package.

7
00:00:22.520 --> 00:00:26.060
Cloud Firestorm helped us with the Firestorm database.

8
00:00:26.060 --> 00:00:33.290
Firebase Off helped us with Firebase Authentication and Firebase Storage will help us with the Firebase

9
00:00:33.290 --> 00:00:34.700
Cloud Storage.

10
00:00:35.480 --> 00:00:38.000
Now, installing it again is fairly trivial.

11
00:00:38.000 --> 00:00:45.380
We just copied this dependency here and then go to our perspective YAML file and add it.

12
00:00:46.170 --> 00:00:46.350
Now.

13
00:00:46.350 --> 00:00:52.350
We already saw in the past that adding new projects typically doesn't work on the already running application.

14
00:00:52.350 --> 00:00:58.770
So we'll go ahead and close it and restart it at this point already so that later it hopefully works.

15
00:00:59.810 --> 00:01:04.370
Now with that, we added Firebase Storage and I want to upload the image.

16
00:01:04.370 --> 00:01:11.960
Whenever the user picked an image filled out the rest of the off form and pressed this submit button

17
00:01:11.960 --> 00:01:13.490
we have in the off form.

18
00:01:14.030 --> 00:01:16.610
So therefore we need to do one main thing.

19
00:01:16.610 --> 00:01:22.730
We need to make sure that the PICT user image which we're managing in this user image picker widget

20
00:01:22.760 --> 00:01:30.860
is forwarded, is passed to the off forum because that's where we ultimately collect all entered data

21
00:01:30.860 --> 00:01:34.490
and then again forwarded to the off screen.

22
00:01:34.490 --> 00:01:40.400
In the end, with help of that submit fan property, which we manage in the forum, that's how we get

23
00:01:40.400 --> 00:01:43.250
all our auth data to the off screen in the end.

24
00:01:43.760 --> 00:01:49.790
So we need to get the image to the auth form so that from thereon we can forward it to the off screen.

25
00:01:50.030 --> 00:01:55.820
Now to get the PICT image to the auth form, we can use the same approach we've used over and over.

26
00:01:55.820 --> 00:01:56.960
Throughout this course.

27
00:01:56.960 --> 00:02:03.890
We add a property to the user image picker widget and that property will be a function which we can

28
00:02:03.890 --> 00:02:08.960
call from inside this widget, which we will get passed from outside the widget though.

29
00:02:09.900 --> 00:02:15.330
So here we add a new property, a new final property, which will be of type function, which I'll name.

30
00:02:16.220 --> 00:02:17.000
Image.

31
00:02:18.190 --> 00:02:19.210
Pic fn.

32
00:02:19.240 --> 00:02:20.620
The name is up to you though.

33
00:02:20.980 --> 00:02:25.510
This function will not return anything but from an argument.

34
00:02:25.510 --> 00:02:27.370
From a parameter perspective.

35
00:02:27.400 --> 00:02:30.130
It will actually receive that pict image.

36
00:02:30.130 --> 00:02:31.660
It will receive a file.

37
00:02:32.410 --> 00:02:34.720
Pict image as an argument.

38
00:02:34.960 --> 00:02:38.050
And now we add the constructor of the user image picker.

39
00:02:38.050 --> 00:02:43.900
And there we make it clear that we expect to get a pointer at such a function as an argument, and we

40
00:02:43.900 --> 00:02:47.620
then bind this function we get as an argument to this image.

41
00:02:47.620 --> 00:02:49.390
Pick FN property.

42
00:02:49.390 --> 00:02:55.480
And since this is bound and since we now have this property, we can call this function whenever an

43
00:02:55.480 --> 00:02:59.770
image was picked to let the surrounding forum know about the image.

44
00:02:59.770 --> 00:03:05.740
So here, besides setting our state to preview the image, I will also call widget.

45
00:03:06.850 --> 00:03:11.020
Image pic fn and forward that picked image file.

46
00:03:11.380 --> 00:03:17.410
And now we need to go to the auth forum, which is where we in the end use our user image picker and

47
00:03:17.410 --> 00:03:19.930
pass such a function into that widget.

48
00:03:20.320 --> 00:03:25.000
So for that, we first of all need to define a new function here which doesn't return anything, which

49
00:03:25.000 --> 00:03:25.750
I'll name.

50
00:03:27.270 --> 00:03:33.960
Pict image or whatever you want to name it, which gets that image, which is of type file.

51
00:03:33.960 --> 00:03:39.360
And that file type, as you learned, needs to be imported from Dart IO.

52
00:03:39.360 --> 00:03:42.690
So make sure you add this dart io import here.

53
00:03:44.220 --> 00:03:45.540
And then here.

54
00:03:46.290 --> 00:03:51.330
We will receive that file and I want to store it in a variable here.

55
00:03:51.330 --> 00:03:54.300
So a user image file.

56
00:03:56.030 --> 00:03:59.090
That's my variable and that will be off type file.

57
00:03:59.570 --> 00:04:05.780
And I simply set user image file equal to the image argument we're receiving here.

58
00:04:05.780 --> 00:04:12.980
So that stores the image that is picked in the user image picker in that property of the off form state

59
00:04:12.980 --> 00:04:16.310
so that we have it available once we try to submit this form.

60
00:04:16.459 --> 00:04:23.900
Because when we do try to submit here, I want to check if the form is valid and if we have a user image

61
00:04:23.900 --> 00:04:24.380
file.

62
00:04:24.380 --> 00:04:29.960
So if that is unequal to null because if it would be equal to null, no image was picked yet.

63
00:04:30.980 --> 00:04:33.290
And actually, I will not do this here in this step.

64
00:04:33.320 --> 00:04:36.830
Instead, I'll add another step here where I check if.

65
00:04:37.720 --> 00:04:42.580
User image file is equal to null maybe, which means the user did not pick an image.

66
00:04:42.610 --> 00:04:45.610
In this case, we can return here to avoid that.

67
00:04:45.610 --> 00:04:49.300
The other part here gets executed because I don't want to submit the form.

68
00:04:49.300 --> 00:04:54.790
I don't want to continue if no image was picked, and instead we might want to show an error to the

69
00:04:54.790 --> 00:04:55.090
user.

70
00:04:55.090 --> 00:05:00.400
We might want to let the user know about the fact that we didn't find a valid image.

71
00:05:01.520 --> 00:05:07.310
And we could use the good old snack bar for this with scaffold off context.

72
00:05:07.310 --> 00:05:13.730
And here we can use this context, show snack bar and create a snack bar.

73
00:05:14.540 --> 00:05:15.380
In here.

74
00:05:17.060 --> 00:05:22.880
Where the content is simply a text widget where we say, Please pick an image.

75
00:05:25.070 --> 00:05:29.870
All to note that we of course only care about the image if we are in sign up mode.

76
00:05:29.870 --> 00:05:31.670
So we should add something to the effect.

77
00:05:31.670 --> 00:05:38.060
We should make sure whether we have image or not, and if we're not in log in mode because if we would

78
00:05:38.060 --> 00:05:42.890
be in log in mode, we don't care about the image, we only care about it if we're not in log in mode,

79
00:05:42.890 --> 00:05:46.940
if we are signing up, but if we are signing up, we should validate this.

80
00:05:46.940 --> 00:05:50.450
We should check if we have an image and then we should show an error.

81
00:05:50.450 --> 00:05:57.680
If we have no image, we can also set the background color here to theme off context error color to

82
00:05:57.680 --> 00:06:04.100
color that snack bar appropriately so with that, we should avoid that an invalid form gets submitted.

83
00:06:04.370 --> 00:06:10.820
Now of course, one missing piece is still that we wire up this pict image function to our user image

84
00:06:10.820 --> 00:06:11.390
picker.

85
00:06:11.390 --> 00:06:15.920
So we should forward that pict image function to that user image picker.

86
00:06:15.920 --> 00:06:22.640
So pass it as a argument to that constructor here and don't add parentheses here because indeed we just

87
00:06:22.640 --> 00:06:26.240
want to pass a pointer to that function to use our image picker.

88
00:06:28.170 --> 00:06:31.920
So with that we don't have the upload yet, but the rest should be wired up.

89
00:06:31.920 --> 00:06:34.770
And if I try to create a new account.

90
00:06:35.470 --> 00:06:38.320
And I enter, let's say, a valid email address.

91
00:06:41.120 --> 00:06:45.290
And everything is valid here and I press sign up.

92
00:06:45.290 --> 00:06:46.340
I do get that.

93
00:06:46.340 --> 00:06:53.540
Please pick an image error here because I indeed have no image and only if I do pick an image I should

94
00:06:53.540 --> 00:06:55.160
be able to submit this.

95
00:06:55.640 --> 00:06:56.990
So let's give this a try.

96
00:06:57.020 --> 00:06:58.490
Now you'll see that works.

97
00:06:58.490 --> 00:07:02.210
But of course it works without actually uploading that image.

98
00:07:02.210 --> 00:07:04.100
And that's not our goal here.

99
00:07:04.100 --> 00:07:05.730
The image should be uploaded.

100
00:07:05.750 --> 00:07:09.110
So let's now work on the actual upload functionality.

