WEBVTT
1
00:00:02.450 --> 00:00:05.130
Let's start with submitting.

2
00:00:05.210 --> 00:00:10.600
How can we submit our form and get all the values the user entered?

3
00:00:10.820 --> 00:00:17.420
As mentioned before, this form widget helps us with that but first of all, we need a trigger that actually

4
00:00:17.420 --> 00:00:21.710
leads to that form being submitted and I will actually go with two triggers - 

5
00:00:21.710 --> 00:00:26.840
one of them is the done button on the imageUrl because that's the last input here,

6
00:00:26.870 --> 00:00:33.200
so I think it makes sense that hitting enter here would try to submit the entire form and I also want

7
00:00:33.200 --> 00:00:38.620
to have a save button here in the action bar that should also try to submit the form.

8
00:00:38.690 --> 00:00:43.060
Of course, you could also have a button below these inputs here if you wanted that.

9
00:00:43.100 --> 00:00:52.460
So let me first of all add this button here in the appBar, a simple icon button where I use an icon which

10
00:00:52.460 --> 00:00:55.880
is the save icon,

11
00:00:55.900 --> 00:01:03.100
is this icon here and when this gets pressed, then I want to try to save the form and the same for the

12
00:01:03.130 --> 00:01:10.370
soft keyboard, the done button here on the image input here.

13
00:01:10.430 --> 00:01:16.780
Let's add a new method and I'll call that method which doesn't return anything _saveForm,

14
00:01:16.850 --> 00:01:18.550
the name is totally up to you.

15
00:01:18.650 --> 00:01:19.790
saveForm is the method

16
00:01:19.790 --> 00:01:21.640
I want to trigger here

17
00:01:21.680 --> 00:01:23.450
when we press that IconButton,

18
00:01:23.600 --> 00:01:30.850
so I point at saveForm here for onPressed and I want to trigger to _saveForm for my image

19
00:01:30.850 --> 00:01:32.270
input down there

20
00:01:32.390 --> 00:01:39.440
and here, I in the end want to listen to the onFieldSubmitted event which is triggered when the done

21
00:01:39.440 --> 00:01:42.110
button is pressed on the soft keyboard.

22
00:01:42.110 --> 00:01:43.240
There we get the value

23
00:01:43.250 --> 00:01:44.630
though I don't care about that,

24
00:01:44.660 --> 00:01:47.090
so I don't really need to do anything with it

25
00:01:47.420 --> 00:01:50.510
and I then want to trigger saveForm,

26
00:01:53.180 --> 00:01:57.750
without the arrow, _saveForm

27
00:01:57.750 --> 00:01:58.990
of course. Now important,

28
00:01:59.050 --> 00:02:06.930
I'm using an anonymous function here to wrap my _saveForm call instead of just pointing at _saveForm

29
00:02:07.410 --> 00:02:14.610
because onFieldSubmitted expects a function that takes a string value, _saveForm, my function here doesn't

30
00:02:14.610 --> 00:02:18.630
take a string value so I can't point at it, it's the wrong format,

31
00:02:18.710 --> 00:02:21.650
it isn't the kind of function Flutter expects here.

32
00:02:21.650 --> 00:02:25.690
Instead I need a function and hence the anonymous function which takes that input

33
00:02:25.710 --> 00:02:26.970
even if I don't use it

34
00:02:27.120 --> 00:02:32.430
and then in there, I can call _saveForm and now a reference to this anonymous function is passed to

35
00:02:32.430 --> 00:02:35.760
onFieldSubmitted and then Flutter will execute this anonymous function

36
00:02:35.760 --> 00:02:41.280
when we press the done button in the soft keyboard. Then we call saveForm and now of course the

37
00:02:41.280 --> 00:02:45.330
big question is, what happens in _saveForm? Here, 

38
00:02:45.330 --> 00:02:51.910
I want to submit my form with the help of the form widget to then get access to all the values.

39
00:02:51.910 --> 00:02:57.390
Now for that, you need a way to interact with the form widget from inside this method,

40
00:02:57.390 --> 00:03:03.650
you want to do something like form.submit or form.save or anything like that.

41
00:03:03.720 --> 00:03:09.300
So how can you get a direct access to that form widget from inside your code?

42
00:03:09.630 --> 00:03:12.450
For that, you can use a global key.

43
00:03:12.570 --> 00:03:15.240
We haven't used a global key before because you need it

44
00:03:15.240 --> 00:03:17.610
very rarely.

45
00:03:17.610 --> 00:03:21.410
You typically need it when you need to interact with a widget from inside your code

46
00:03:21.480 --> 00:03:24.110
as we now need to and that's about it

47
00:03:24.120 --> 00:03:30.650
and mostly, you do that with form widgets and not really that much with other widgets. So hence here, we

48
00:03:30.650 --> 00:03:40.600
add a new property in our state, a property that should hold that global key and I'll name this 

49
00:03:40.610 --> 00:03:41.160
_form,

50
00:03:41.190 --> 00:03:48.570
you can name it however you want and you create a global key here by instantiating global key and global

51
00:03:48.570 --> 00:03:54.720
key actually is a generic type where you can add angled brackets to make it clear which kind of data

52
00:03:54.720 --> 00:03:56.060
it will refer to.

53
00:03:56.190 --> 00:04:02.560
It will refer to our form widget and to be precise, global keys can then hook into the state of widgets,

54
00:04:02.670 --> 00:04:08.520
so it will in the end refer to form state, form state is a class which is available because we import

55
00:04:08.520 --> 00:04:09.770
material.dart.

56
00:04:10.110 --> 00:04:14.150
So the global key will allow us to interact with the state behind the form widget

57
00:04:14.190 --> 00:04:21.810
so to say and therefore now we can assign that form key to the form to establish that connection simply

58
00:04:21.810 --> 00:04:27.020
by setting the key argument here to form which is our global key.

59
00:04:27.060 --> 00:04:33.510
Now we can use the form property to interact with the state managed by that form widget and form

60
00:04:33.570 --> 00:04:35.180
is a stateful widget,

61
00:04:35.340 --> 00:04:41.930
it's invisible but behind the scenes, it does indeed work with your form elements here and gives

62
00:04:41.930 --> 00:04:44.670
you easy access to all your form values.

63
00:04:44.670 --> 00:04:51.120
By the way on the form, you can also set other things like auto validation so that after every keystroke,

64
00:04:51.150 --> 00:04:52.790
your validation logic runs,

65
00:04:52.860 --> 00:04:57.050
we haven't added validation logic yet so we can't see that yet but that's something you could set up

66
00:04:57.060 --> 00:04:58.340
as soon as we do add it.

67
00:04:58.470 --> 00:05:04.080
Here you can set up a global onChanged listener which will fire whenever you type something into any

68
00:05:04.080 --> 00:05:12.270
of the inputs in the form and onWillPop is basically a function that will allow you to stop dismissing

69
00:05:12.270 --> 00:05:12.940
this page

70
00:05:12.990 --> 00:05:19.770
if the user is still editing this form. Here, the keys you're setting was important for us and now with

71
00:05:19.770 --> 00:05:25.770
that key, with that form property which has access to this form widget or to the state of the form

72
00:05:25.770 --> 00:05:37.250
widget now, we can reach out to that property, to the form property and call CurrentState.save. Save

73
00:05:37.260 --> 00:05:41.240
is simply a method provided by the state object of the form widget,

74
00:05:41.250 --> 00:05:46.320
so that's basically a method provided by Flutter for you for the form widget which will save that

75
00:05:46.320 --> 00:05:47.460
form

76
00:05:47.640 --> 00:05:51.210
and now what does _saveForm do?

77
00:05:51.220 --> 00:05:58.620
_saveForm will now trigger a method on every text form field which allows you to take the value entered

78
00:05:58.620 --> 00:06:04.470
into the text form field and do with it whatever you want, for example store it into a global map that

79
00:06:04.470 --> 00:06:11.110
collects all text inputs. For that, let's go up to the beginning of our state object again and let's

80
00:06:11.110 --> 00:06:12.500
add another property,

81
00:06:12.510 --> 00:06:20.640
not a final one though which should describe a product and for that, we need to import our product

82
00:06:20.640 --> 00:06:29.870
class from the providers folder and there, the product.dart file because I want to create a new variable,

83
00:06:29.870 --> 00:06:34.910
a new property here and actually I can use the var keyword for that because I will initialize it with

84
00:06:34.910 --> 00:06:43.250
a value which holds my edited product and there I create a new product which initially has an ID

85
00:06:43.870 --> 00:06:53.470
that is null let's say, it has no ID, it has a title which is empty, it has a price which is 0,

86
00:06:53.720 --> 00:06:57.240
it has a description which is empty and it has an imageUrl

87
00:06:57.260 --> 00:07:03.230
which is an empty string. So it's basically an empty product you could say, not technically it's

88
00:07:03.230 --> 00:07:07.480
an object which is totally there but it has empty values.

89
00:07:07.490 --> 00:07:14.990
Now my plan is to update this edited product when saveForm is executed and therefore we call save

90
00:07:14.990 --> 00:07:19.850
on the overall form widget because as I mentioned, this will now execute a function on every text form

91
00:07:19.850 --> 00:07:27.770
field, it will execute the onSaved function and that executes a function then which takes the value

92
00:07:27.800 --> 00:07:32.600
that's currently entered into this input field and then you can do whatever you want with that value

93
00:07:32.660 --> 00:07:39.560
and here for example, you can reach out to your edited product and set this equal to a new product because

94
00:07:39.680 --> 00:07:46.370
you might remember that in the product, all these properties are final, so we can't reassign the value

95
00:07:46.400 --> 00:07:48.700
after a product has been created,

96
00:07:48.740 --> 00:07:53.870
so instead we have to create a new product and override the existing edited product with it and with

97
00:07:53.870 --> 00:08:00.170
that here, we can create a product which takes all the old values of the existing added product and overrides

98
00:08:00.170 --> 00:08:03.920
the one value for which this text form field was responsible.

99
00:08:03.920 --> 00:08:10.100
So here we could set the title is now equal to value right, because that is what was entered into this

100
00:08:10.100 --> 00:08:18.280
text form field. For the other fields like the price, we take the existing editedProduct.price

101
00:08:18.520 --> 00:08:25.900
and for description, the existing editedProduct.description and for the imageUrl, the existing

102
00:08:25.900 --> 00:08:32.789
editedProduct.imageUrl and for ID, well we keep that set to null.

103
00:08:32.990 --> 00:08:36.260
Now of course instead of constantly recreating such a product,

104
00:08:36.260 --> 00:08:42.289
alternatively you could create a new class which you only use for submitting your form data which you

105
00:08:42.289 --> 00:08:48.650
could also name product or name differently which has mutable, so editable properties so that you

106
00:08:48.650 --> 00:08:53.210
don't have to recreate this all over again but you can simply edit the properties in the existing

107
00:08:53.210 --> 00:08:53.920
object.

108
00:08:53.960 --> 00:08:55.540
That would be an alternative, here

109
00:08:55.640 --> 00:09:01.160
I'll go with the product we have which is immutable and therefore I'm also fine with recreating this.

110
00:09:02.220 --> 00:09:04.500
So back to the edit product screen.

111
00:09:04.530 --> 00:09:07.440
This is my onSaved method for the title,

112
00:09:07.440 --> 00:09:09.530
we can now simply copy that

113
00:09:09.650 --> 00:09:16.620
to also add it for the price and there of course, we don't initialize the title with the value but instead

114
00:09:16.620 --> 00:09:24.330
we keep that to editedProduct.title but the price here is now set to value and now the problem

115
00:09:24.330 --> 00:09:28.020
is price expects a number but value is always a string,

116
00:09:28.020 --> 00:09:39.430
well we simply have to parse that to a number simply by calling double.parse value and add a comma here,

117
00:09:39.490 --> 00:09:43.600
this will convert this to a double.

118
00:09:43.600 --> 00:09:46.060
Now with that, we can move on to the description,

119
00:09:46.060 --> 00:09:52.840
also add onSaved there, for the title we keep the editedProduct.title of course, for the price

120
00:09:52.840 --> 00:09:58.390
we keep the editedProduct.price but for the description, we now take the value that was entered and

121
00:09:58.390 --> 00:09:58.740
with that,

122
00:09:58.750 --> 00:10:00.550
let's move on to our

123
00:10:04.360 --> 00:10:05.630
imageUrl down there.

124
00:10:05.650 --> 00:10:12.190
Here we also add onSaved, we keep editedProduct.title here, we keep the price, we keep the description

125
00:10:12.400 --> 00:10:17.560
but for the imageUrl we use that value and please keep in mind right now we're not validating the

126
00:10:17.560 --> 00:10:23.290
user input, so we could totally submit invalid input but that will soon change.

127
00:10:23.290 --> 00:10:27.850
So with that, we're constantly creating a new product where we keep the data from the other inputs and

128
00:10:27.850 --> 00:10:31.150
simply add the data of this input, so that by the end,

129
00:10:31.210 --> 00:10:36.430
we have editedProduct which holds a product where all the properties should be filled with the inputs

130
00:10:36.490 --> 00:10:39.970
from our various inputs here in our widget tree.

131
00:10:40.420 --> 00:10:47.050
So after calling save here, in the end at some point, edited product here should have the title we entered,

132
00:10:47.230 --> 00:10:48.880
should have the description and so on

133
00:10:52.070 --> 00:11:00.590
so let's check this here real quick by printing the description, price and also the imageUrl.

134
00:11:00.800 --> 00:11:10.110
And with that I'd say let's save this, reload that page and enter test, maybe a price of 

135
00:11:10.110 --> 00:11:11.240
12.99,

136
00:11:11.280 --> 00:11:13.680
this is a test and then here,

137
00:11:13.710 --> 00:11:16.470
time for a URL again.

138
00:11:16.470 --> 00:11:22.070
So simply paste it in again, like this

139
00:11:22.080 --> 00:11:28.920
and now we can submit either by pressing the done button here on the imageUrl or by pressing the save

140
00:11:28.920 --> 00:11:29.880
button up there.

141
00:11:29.960 --> 00:11:33.320
If I press save here, you indeed see in the log test,

142
00:11:33.330 --> 00:11:39.900
this is a test, the price and the URL. So submitting and saving the data worked, if I try that checkmark here,

143
00:11:41.080 --> 00:11:43.620
well we have the same output, so this also worked.

144
00:11:43.630 --> 00:11:50.070
So with that, we can submit our form but of course as I mentioned, we're not validating the input at all

145
00:11:50.070 --> 00:11:55.420
and that's of course something we want to do to avoid that users can also submit the form without having

146
00:11:55.420 --> 00:11:58.690
entered a title for example, which at the moment is possible.

