1
00:00:02,050 --> 00:00:08,320
Now storing that image in a variable is a nice first step, but of course doesn't help us that much.

2
00:00:08,320 --> 00:00:08,580
Right.

3
00:00:08,590 --> 00:00:14,500
So the first thing we can do, though, is, of course, we can call set state here because we're in

4
00:00:14,500 --> 00:00:17,260
a stateful widget and set our stored image.

5
00:00:17,260 --> 00:00:22,900
So this property up there, which is a file equal to the image file we took from the camera.

6
00:00:23,170 --> 00:00:28,480
Now, again, a little addition here at this point, if you are using that newer version of the image

7
00:00:28,480 --> 00:00:34,300
picker and you're using that alternative approach of picking the image, which is optional, as I mentioned.

8
00:00:34,300 --> 00:00:41,020
But if you are doing that, so if your code looks like this here with get image.

9
00:00:42,110 --> 00:00:47,880
Then what you're getting back here from the get image method is not a file you can use like this.

10
00:00:47,900 --> 00:00:50,750
It's not a file as you get it from dart io.

11
00:00:50,930 --> 00:00:57,980
It's instead pict file, which is a specific type provided by the image picker package.

12
00:00:58,130 --> 00:01:05,870
And in order to use that and convert it to a regular file, you should simply wrap the image file here

13
00:01:05,870 --> 00:01:09,510
with the file constructor and access the path on it.

14
00:01:09,530 --> 00:01:15,830
So this converts depict file to a regular file, and with that you get the update syntax with the latest

15
00:01:15,830 --> 00:01:16,290
version.

16
00:01:16,310 --> 00:01:20,630
Alternatively, as mentioned multiple times, you can stick to the code shown in the video.

17
00:01:20,660 --> 00:01:26,060
This is simply the more futureproof code which will work with future versions of image picker as well.

18
00:01:26,570 --> 00:01:30,070
This should at least allow us to see it here in our preview.

19
00:01:30,080 --> 00:01:30,380
Right?

20
00:01:30,380 --> 00:01:35,990
Because once stored image is set, we're trying to display that file here with the image widget, which

21
00:01:35,990 --> 00:01:38,000
has a file provider basically.

22
00:01:38,780 --> 00:01:42,330
Let's give that a try before we continue with saving the image on the device.

23
00:01:42,350 --> 00:01:49,310
So if I save this and I go back to take picture, let's take a picture here with that emulator camera

24
00:01:49,310 --> 00:01:49,970
preview.

25
00:01:51,970 --> 00:01:54,280
And indeed, here is my picture.

26
00:01:54,280 --> 00:01:55,510
So that is looking good.

27
00:01:55,510 --> 00:01:56,680
That is working.

28
00:01:57,490 --> 00:02:04,600
But still, it's of course not that useful if we can only manage our image here in a variable and in

29
00:02:04,600 --> 00:02:09,520
memory, basically, because that means that we're not adding a place here.

30
00:02:09,520 --> 00:02:10,900
When we go back, it's lost.

31
00:02:10,900 --> 00:02:13,120
And when we restart the app, it's all the lost.

32
00:02:13,120 --> 00:02:15,160
And that's of course not the idea.

33
00:02:15,190 --> 00:02:22,720
Instead, we want to store that file somewhere permanently on our device harddrive, so that we can

34
00:02:22,720 --> 00:02:26,950
then work with this image whenever we restart the app and so on.

35
00:02:27,490 --> 00:02:34,510
Now to store it on our hard drive, we need more packages that help us with that because interacting

36
00:02:34,510 --> 00:02:38,970
with the hard drive can be challenging, to be precise.

37
00:02:38,980 --> 00:02:43,120
Actually, it starts in a pretty straightforward way.

38
00:02:43,420 --> 00:02:44,110
Maybe here.

39
00:02:44,110 --> 00:02:50,590
After updating our preview image, you can use the image file which you got up there, which is a file.

40
00:02:51,280 --> 00:02:56,380
And on that you can call copy to copy this file in a new location.

41
00:02:56,380 --> 00:02:57,310
So that's great.

42
00:02:57,340 --> 00:03:01,330
Now we need to enter a path on our device where we want to copy this to.

43
00:03:01,330 --> 00:03:08,470
And this is the very tricky part because of course, as you can imagine on iOS and Android, you can't

44
00:03:08,470 --> 00:03:12,520
write files to any place on the hard drive.

45
00:03:12,520 --> 00:03:18,040
Instead, there are a lot of restrictions regarding where you can write data to so that you don't clutter

46
00:03:18,040 --> 00:03:24,370
up the hard drive of the mobile device or start writing files into folders where you really shouldn't

47
00:03:24,370 --> 00:03:25,330
have access.

48
00:03:25,660 --> 00:03:32,140
So down for both iOS and Android typically gave you a certain path where you can store your app related

49
00:03:32,140 --> 00:03:32,560
data.

50
00:03:33,160 --> 00:03:38,920
And that's a good thing because since such a path is clearly defined by both operating systems, that

51
00:03:38,920 --> 00:03:44,800
means that whenever you delete your app, these operating systems can erase all the data from that path.

52
00:03:44,800 --> 00:03:51,430
And they know that all your app specific data is gone to gather with the app, and that keeps your device

53
00:03:51,430 --> 00:03:57,040
hard, drive clean, and avoids that you save files anywhere, and when you uninstall the app, these

54
00:03:57,040 --> 00:04:02,950
files are still there, and therefore your hard drive would well reach its capacity at some point of

55
00:04:02,950 --> 00:04:03,430
time.

56
00:04:03,550 --> 00:04:09,820
So it's good that you have clearly defined paths where you can store your data, but of course that

57
00:04:09,820 --> 00:04:12,280
also means that you need to find out which paths that are.

58
00:04:12,700 --> 00:04:19,810
And for that we can use a certain package which we can search for on pop def and its path underscore

59
00:04:19,810 --> 00:04:23,050
provider has nothing to do with the provider package.

60
00:04:23,050 --> 00:04:30,280
Instead, this is a package which helps you get access to the paths iOS and Android give you to store

61
00:04:30,280 --> 00:04:31,060
data in.

62
00:04:31,600 --> 00:04:36,400
So as always, let's go to the installing tab here and add this entry to the pops.

63
00:04:36,400 --> 00:04:40,570
Back to the YAML file below our image picker here like this.

64
00:04:40,660 --> 00:04:44,110
And before I hit save I need yet another package.

65
00:04:44,110 --> 00:04:45,040
And that's the path.

66
00:04:45,040 --> 00:04:46,840
Package, just path.

67
00:04:47,110 --> 00:04:49,690
This helps us with constructing paths.

68
00:04:49,690 --> 00:04:52,690
So one package helps us with finding paths.

69
00:04:52,690 --> 00:04:57,160
This package helps us with combining paths basically.

70
00:04:57,160 --> 00:04:59,440
And you'll see why we need this in a second.

71
00:04:59,620 --> 00:05:06,010
So let's also install this at this entry here to the pop spectral YAML file and now save this.

72
00:05:06,010 --> 00:05:09,940
And again if it doesn't work run flutter packages get.

73
00:05:10,820 --> 00:05:16,880
So now with these two packages back in the image input widget here, we can import them both.

74
00:05:16,910 --> 00:05:20,410
We can import our package path.

75
00:05:21,170 --> 00:05:29,570
A dare to puff dart fowl and maybe gift us a puff prefix so that we can use all the methods it provides

76
00:05:29,750 --> 00:05:37,040
on the path thing here with path dot and then the method name and lets all the import a package, the

77
00:05:37,040 --> 00:05:40,640
path provider package and data path provider dart file.

78
00:05:41,180 --> 00:05:48,680
And I'll give this a prefix of source paths for system paths, but you don't need to assign these prefixes.

79
00:05:48,680 --> 00:05:53,360
I just do this so that it's really clear which functionality is coming from which package.

80
00:05:53,810 --> 00:06:00,370
So now down there where I want to copy this, we need to find out where we're allowed to copy it to

81
00:06:00,440 --> 00:06:07,880
and therefore we first of all need to find our app dir, our app directory where we can store data and

82
00:06:07,880 --> 00:06:11,000
we can do this with the help of the SIS paths.

83
00:06:12,000 --> 00:06:13,020
Object here.

84
00:06:13,050 --> 00:06:16,440
So in the end, with the help of the POV provider package.

85
00:06:17,450 --> 00:06:25,430
A deer, we can use lobsters, puffs and there we can use the get application documents directory method.

86
00:06:25,430 --> 00:06:31,130
You see you have a couple of methods there for example also for getting access to the external storage

87
00:06:31,130 --> 00:06:33,020
which only works on Android though.

88
00:06:33,020 --> 00:06:37,850
So not really an option if you build an app that should work for iOS two, this would give you access

89
00:06:37,850 --> 00:06:42,410
to an external SD card if available or the temporary directory.

90
00:06:42,410 --> 00:06:48,920
But as the name suggests, this is a temporary directory and it will regularly be cleaned up by the

91
00:06:48,920 --> 00:06:49,970
operating system.

92
00:06:49,970 --> 00:06:55,490
So don't store anything in there which should be living a bit longer, at least as long as your app.

93
00:06:55,700 --> 00:07:01,670
The images we're taking right now with the camera, for example, also are stored in a temporary directory

94
00:07:01,670 --> 00:07:04,400
and therefore they get deleted at some point of time.

95
00:07:04,400 --> 00:07:07,610
So we need access to the applications documents directory.

96
00:07:07,610 --> 00:07:13,010
That's a directory on the device which is reserved for app data.

97
00:07:13,010 --> 00:07:16,130
And that sounds just about right now.

98
00:07:16,130 --> 00:07:20,000
This here actually gives us a future which then yields the directory.

99
00:07:20,000 --> 00:07:27,380
So I will wait for this and therefore now we'll have a handle to this directory stored in after.

100
00:07:27,590 --> 00:07:28,520
So that's one thing.

101
00:07:28,520 --> 00:07:35,240
But here for copy we need a path which is actually just a string, not a directory handle.

102
00:07:35,630 --> 00:07:43,370
But the good thing is that our app directory has a path property which gives us the path as a string,

103
00:07:43,640 --> 00:07:46,790
but I don't want to copy my image like this.

104
00:07:46,790 --> 00:07:51,950
Instead you also have to provide the name of the image it should have.

105
00:07:52,310 --> 00:07:57,320
And for that I'm fine with the name that was automatically assigned by the camera, by the image picker.

106
00:07:57,320 --> 00:08:00,020
And to get that, we can use.

107
00:08:00,680 --> 00:08:06,290
Poff And that's now using this prefix and therefore referring to the path package.

108
00:08:06,950 --> 00:08:10,640
POF dot based name which gives you.

109
00:08:12,330 --> 00:08:18,840
The part of a path after the last separator, which is a complex name for saying the file name.

110
00:08:19,320 --> 00:08:21,240
So here we can enter.

111
00:08:22,810 --> 00:08:25,630
Image file dot path.

112
00:08:25,630 --> 00:08:26,830
That's the file.

113
00:08:26,830 --> 00:08:30,220
That's the path to where our image file is currently stored.

114
00:08:30,220 --> 00:08:37,150
So this temporary directory I just mentioned and there the path does not just contain the folders where

115
00:08:37,150 --> 00:08:40,809
it's stored in, but also it includes the name of the file.

116
00:08:40,809 --> 00:08:45,700
And with base name we get that file name, including the file extension.

117
00:08:45,700 --> 00:08:50,200
So I'll store this in a file name, variable or constant here.

118
00:08:51,940 --> 00:08:57,880
And therefore now we can copy this into this path and then also add the file name.

119
00:08:57,880 --> 00:09:03,820
And therefore here I'll enter a string and then use string interpolation to get my.

120
00:09:04,580 --> 00:09:12,980
After a pause here and then a slash to basically tell flutter or dart that you want to navigate into

121
00:09:12,980 --> 00:09:15,650
this path, so to say into the folder here.

122
00:09:15,650 --> 00:09:22,190
And then I'll use more string interpolation and output my file name here.

123
00:09:22,190 --> 00:09:27,050
So that means I basically copy the file into this path and I keep the file name.

124
00:09:27,050 --> 00:09:28,340
That's what we're doing here.

125
00:09:28,940 --> 00:09:33,110
Now copy also is returning a future because this can take a while.

126
00:09:33,110 --> 00:09:37,100
Not too long, of course, but still you don't want to block your other code.

127
00:09:37,340 --> 00:09:43,950
So here I will await for this because we're using async await to work with these futures and here I

128
00:09:43,970 --> 00:09:51,410
therefore have my saved image in the end and this is now the image as it's saved in its final destination.

129
00:09:52,310 --> 00:09:59,960
Now it's this safe image which we then can work with in other parts of our application, for example,

130
00:09:59,960 --> 00:10:08,180
to store it to on device database so that we can combine it with a title and have a permanent entry

131
00:10:08,180 --> 00:10:08,960
on our device.

132
00:10:08,960 --> 00:10:13,700
But before we do that, let's make sure we work with this in memory first.

