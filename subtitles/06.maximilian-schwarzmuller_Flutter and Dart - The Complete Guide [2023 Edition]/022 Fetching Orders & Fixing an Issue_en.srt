1
00:00:02,290 --> 00:00:08,760
With the orders getting stored, now it's time to fetch them when we visit the order screen and for that,

2
00:00:08,760 --> 00:00:12,120
let's go to the orders.dart file because here, I want to add,

3
00:00:12,150 --> 00:00:18,270
just as I had in the products.dart file, I want to add a fetch and set method here to fetch and

4
00:00:18,270 --> 00:00:19,890
set the orders.

5
00:00:19,890 --> 00:00:23,570
It will eventually yield a future which will then yield nothing,

6
00:00:23,610 --> 00:00:26,090
I'll call it fetch and set orders

7
00:00:26,100 --> 00:00:31,590
but the name is up to you and of course, I want to use the async keyword here so that we can work with

8
00:00:31,650 --> 00:00:33,190
async await.

9
00:00:33,570 --> 00:00:40,710
Now for the URL, the URL of course is that URL where we stored our orders and now we

10
00:00:40,710 --> 00:00:48,300
can use a get request here to send it to that URL to get these orders. So that gets us a response

11
00:00:48,720 --> 00:00:55,590
and for the moment, I simply print the decoded version of the response body so that we can see what's

12
00:00:55,590 --> 00:01:02,880
in there and here we should await to wait for that to resolve to really have the response object in

13
00:01:02,880 --> 00:01:09,940
there. So that's a basic setup and we'll of course fine tune this to really extract and store the data,

14
00:01:10,330 --> 00:01:17,600
let's now fire this fetch and set orders method from inside the orders screen. Now this is a stateless widget,

15
00:01:17,690 --> 00:01:21,690
so we can't use initState or didChangeDependencies,

16
00:01:21,920 --> 00:01:28,010
so the first thing I'll actually have to do here is we have to convert this to a stateful widget. With

17
00:01:28,010 --> 00:01:29,430
a stateful widget,

18
00:01:29,450 --> 00:01:34,680
now we can go ahead and either use initState with that future delayed

19
00:01:34,710 --> 00:01:40,610
hack if you remember, I showed it earlier or use that didChangeDependencies.

20
00:01:40,700 --> 00:01:45,080
Now I'll use the future delayed hack here because in the past, I used the different approach and I want

21
00:01:45,080 --> 00:01:51,800
to show both and in there, we use future delayed which is a constructor that gives us a new future and

22
00:01:51,800 --> 00:01:57,340
we pass in a duration that should pass until this future automatically resolves and here, duration

23
00:01:57,350 --> 00:02:04,400
zero is a special value which instantly resolves this but the way Dart works, this still only executes

24
00:02:04,610 --> 00:02:10,699
after this initialization is done here because that all happened simultaneously but this is queued at

25
00:02:10,699 --> 00:02:15,970
the end so to say. So now here, we can add then and we should add

26
00:02:15,980 --> 00:02:19,470
then, don't turn this into an async function here.

27
00:02:19,550 --> 00:02:24,590
It's not something you should do because by default it's not async, by default it doesn't return a future,

28
00:02:24,770 --> 00:02:31,760
you shouldn't turn it into a function that does. So instead use then here, you get a value which is void

29
00:02:31,790 --> 00:02:38,550
but you still need to accept it and then in here, you can go ahead and send that request to fetch orders.

30
00:02:38,710 --> 00:02:43,930
So for that, you need the provider and you need your orders from the orders.dart file,

31
00:02:44,000 --> 00:02:54,210
so that here, we can say provider of orders context and listen: false because I only want to dispatch this

32
00:02:54,300 --> 00:02:59,250
fetching action, I don't want to listen to updates here because of that.

33
00:02:59,250 --> 00:03:02,890
So here, I just want to call fetch and set orders and be done with it

34
00:03:03,060 --> 00:03:07,920
and then down there of course, we do set up a listener to orders and that is all fine but here, I don't

35
00:03:07,920 --> 00:03:14,880
want to set up another one so to say. If we now do a full refresh and we visit this orders page, we should

36
00:03:14,880 --> 00:03:19,820
actually make that request and that's looking good,

37
00:03:19,840 --> 00:03:26,500
here's the output and again, you see we get a map where we have that autogenerated ID as a key and

38
00:03:26,500 --> 00:03:32,950
then a nested map with our order data and that data also then happens to have a nested list with our

39
00:03:33,040 --> 00:03:34,870
cart item maps.

40
00:03:34,870 --> 00:03:42,700
So a couple of nested elements and now we'll have to extract this to then rebuild an order item that

41
00:03:42,700 --> 00:03:48,190
looks like this which has a list of nested cart items and all these values so that in the end, we have

42
00:03:48,190 --> 00:03:52,970
a list of these order items which we can use to override this list with it.

43
00:03:53,050 --> 00:03:55,740
So let's get started with that. Here,

44
00:03:55,750 --> 00:04:02,380
I'll create a little helper list which will be full of order items which I'll name loaded orders which

45
00:04:02,380 --> 00:04:03,290
initially is empty

46
00:04:04,180 --> 00:04:09,880
and then I want to go through my extracted response body.

47
00:04:09,880 --> 00:04:17,459
So here, I'll have my extracted data and that's in the end josn.decode response body,

48
00:04:17,470 --> 00:04:19,880
so what we just printed.

49
00:04:20,050 --> 00:04:25,660
Now we should let Dart know that this will be of type map with string keys and dynamic values, just

50
00:04:25,690 --> 00:04:28,430
as we did it the products.dart file

51
00:04:28,480 --> 00:04:34,270
and with that, we can use the extracted data with forEach to go through all our keys and values in

52
00:04:34,270 --> 00:04:41,980
that map or we of course know that the keys are the order IDs and the values, that's our order

53
00:04:41,980 --> 00:04:49,790
data in the end and now we add items to our loaded orders with add and now in there,

54
00:04:49,790 --> 00:04:56,450
let's create an order item and that order item will have an ID which is our order ID we're getting

55
00:04:56,450 --> 00:04:56,680
here,

56
00:04:56,690 --> 00:04:57,100
so

57
00:04:57,110 --> 00:04:59,230
that key in that map

58
00:04:59,450 --> 00:05:04,640
and besides that, we of course have an amount and we get that from the order data which is a map as we

59
00:05:04,640 --> 00:05:07,630
know which will have an amount key, we can see it here.

60
00:05:08,670 --> 00:05:10,950
We'll also need the datetime

61
00:05:10,950 --> 00:05:18,390
and here we want to create a new datetime, we can do that with DateTime.parse and parse now takes a string

62
00:05:18,840 --> 00:05:22,960
which has to have that ISO 8601 format,

63
00:05:22,980 --> 00:05:26,490
that's why I save that as such a string here before we sent it to the web.

64
00:05:26,790 --> 00:05:36,600
Now we're retrieving such a string and therefore here, we can parse order data and then here, datetime,

65
00:05:36,630 --> 00:05:41,180
so this key and this value and this can now be passed into a datetime object again,

66
00:05:44,730 --> 00:05:46,500
let me restructure this

67
00:05:46,500 --> 00:05:48,180
and now of course, the products.

68
00:05:48,310 --> 00:05:52,510
Now for the products, we know that we have a list in here,

69
00:05:52,990 --> 00:05:54,760
so order data

70
00:05:57,850 --> 00:05:58,530
product,

71
00:05:58,540 --> 00:06:01,000
so for the products key, for this key is a list,

72
00:06:01,000 --> 00:06:02,030
we know that,

73
00:06:02,080 --> 00:06:10,260
so that's a list of dynamic values in the end. So let's wrap this into parentheses because now we can

74
00:06:10,260 --> 00:06:14,310
call map on this to convert it into a list of cart items.

75
00:06:14,310 --> 00:06:18,110
As always, you need to call to list here at the end to convert it into a list

76
00:06:18,390 --> 00:06:23,230
but now in the map function here, you get your items or whatever you want to name that

77
00:06:23,280 --> 00:06:33,590
and here I'll return my new cart items, like this and now every cart item has an ID but item here is the

78
00:06:33,590 --> 00:06:34,610
end just a map,

79
00:06:34,640 --> 00:06:34,880
right,

80
00:06:34,880 --> 00:06:36,320
we know that it is a map

81
00:06:36,320 --> 00:06:38,120
and it has an ID here.

82
00:06:38,120 --> 00:06:40,080
So we can use that ID

83
00:06:40,380 --> 00:06:45,380
and that's still my custom dummy ID because we never save cart items to the server, hence we have only

84
00:06:45,380 --> 00:06:49,670
these IDs, doesn't matter too much though because we never work with these IDs,

85
00:06:49,730 --> 00:06:58,110
so here, I access item ID. Besides that, our cart items also have a price and we get that from item for

86
00:06:58,110 --> 00:06:59,080
the price key,

87
00:06:59,100 --> 00:06:59,310
right,

88
00:06:59,310 --> 00:07:04,530
because we have that price key in there. We also of course have a quantity,

89
00:07:04,530 --> 00:07:09,450
hence here I access item for the quantity key,

90
00:07:09,480 --> 00:07:21,210
so this key and last but not least, we also have the title in there, so let's add title here and access item

91
00:07:21,390 --> 00:07:22,850
for the title key.

92
00:07:22,860 --> 00:07:28,800
So this now creates cart items, to be precise, a list of cart items based on the items we find here

93
00:07:28,800 --> 00:07:36,240
and then we use this as a value for the products here and this recreates in the end our loaded orders.

94
00:07:38,380 --> 00:07:39,570
So down here,

95
00:07:39,580 --> 00:07:45,190
we're done with that and we can now set our orders here equal to the loaded orders

96
00:07:45,340 --> 00:07:52,630
and then of course call NotifyListeners to make sure that our UI updates in all places and this

97
00:07:52,630 --> 00:07:53,940
should be all.

98
00:07:54,010 --> 00:08:01,150
If we now save that, if we revisit this orders page, it should actually load our orders from the web and

99
00:08:01,150 --> 00:08:03,510
display them and it does.

100
00:08:03,530 --> 00:08:05,570
Now what if we have no orders,

101
00:08:05,570 --> 00:08:15,340
so if I delete that orders node here on Firebase? What if I now go back and I revisit this page? Still has

102
00:08:15,340 --> 00:08:21,160
the old orders in memory but we now also have an error here and the error is that forEach was called

103
00:08:21,160 --> 00:08:22,240
on null.

104
00:08:22,240 --> 00:08:28,100
The problem is that I'm calling forEach here on the extracted data, even though we got no extracted

105
00:08:28,100 --> 00:08:33,159
data because we didn't return anything from the back and from the server because no orders were

106
00:08:33,159 --> 00:08:34,350
stored there.

107
00:08:34,390 --> 00:08:42,700
So actually as an improvement, you should check if extracted data is equal to null and if it is, return

108
00:08:42,700 --> 00:08:43,150
here

109
00:08:43,150 --> 00:08:46,400
so that this code does not run if extracted data is null

110
00:08:46,510 --> 00:08:51,850
and by the way, you want to do the same for products if we have no products. There, before we call extracted

111
00:08:51,850 --> 00:08:53,500
data forEach,

112
00:08:53,500 --> 00:08:57,680
we should check if extracted data is equal to null

113
00:08:57,930 --> 00:09:04,720
and if it is return and don't execute any other code, so return here to avoid that you run code which

114
00:09:04,720 --> 00:09:07,630
would fail if you have no data.

115
00:09:07,630 --> 00:09:13,120
So do that in the products.dart file and also in the orders.dart file and with that if we now do a full

116
00:09:13,120 --> 00:09:14,080
refresh,

117
00:09:14,080 --> 00:09:19,840
now we should be able to revisit the orders screen here without errors.

118
00:09:19,840 --> 00:09:28,130
Now let's actually place another order here by ordering that maybe, let's go here to the order screen

119
00:09:28,130 --> 00:09:29,230
and see it

120
00:09:29,690 --> 00:09:35,750
and let's now actually add a loading spinner because of course when we're in the app, the data is immediately

121
00:09:35,750 --> 00:09:40,400
there because it's then already stored here in our orders.dart file

122
00:09:40,400 --> 00:09:42,330
but let's make sure we show a loading spinner

123
00:09:42,350 --> 00:09:53,320
when we first load that page. For that in the orders screen here, we have a stateful widget, I'll add the

124
00:09:53,380 --> 00:10:04,540
isLoading property and set this to false initially. Here, I'll call set state and set isLoading to true,

125
00:10:04,950 --> 00:10:11,440
set state to update the UI because this will actually run after build was called, even though it's delayed

126
00:10:11,470 --> 00:10:13,060
by nothing,

127
00:10:13,060 --> 00:10:18,670
the whole other flow of initState finishing up and build being called will have finished when this runs.

128
00:10:18,670 --> 00:10:21,190
So we need to run set state here to

129
00:10:21,220 --> 00:10:29,320
do this, then also turn this into an async method here and await fetch and set orders

130
00:10:29,500 --> 00:10:36,400
This now maybe async because it's just a function we pass to then, not initState, setting this to

131
00:10:36,400 --> 00:10:38,780
async is not something I would recommend

132
00:10:38,950 --> 00:10:45,770
and then also of course after you waited for the response, set this back to false here.

133
00:10:45,980 --> 00:10:53,270
So now with that, we can display a loading spinner here instead of the list by checking isLoading and

134
00:10:53,270 --> 00:11:01,100
if we are loading, again I'll have that centered CircularProgressIndicator all built into Flutter and

135
00:11:01,130 --> 00:11:03,690
only show the ListView if we're not loading.

136
00:11:03,770 --> 00:11:07,160
So now if we do a full refresh, let's visit the orders page

137
00:11:10,660 --> 00:11:15,820
and we see the loading spinner. If we now revisit this, it again gets loaded again and we see the loading

138
00:11:15,820 --> 00:11:16,410
spinner again

139
00:11:16,420 --> 00:11:20,360
therefore. So with that, we're also fetching our orders,

140
00:11:20,390 --> 00:11:27,770
let's now place one other order maybe for this here for the book to see whether that also works, we

141
00:11:28,580 --> 00:11:29,930
should have two orders now

142
00:11:30,620 --> 00:11:36,910
and one thing you'll see now however is that the order is wrong, it's now ordered with the oldest order

143
00:11:36,910 --> 00:11:37,770
on top.

144
00:11:37,810 --> 00:11:42,010
Now previously, we had a different order and that can easily be fixed by going through the orders.dart

145
00:11:42,010 --> 00:11:45,930
file and here where we set orders equal to loaded orders,

146
00:11:45,970 --> 00:11:53,200
you can call reversed and then to list and this will reverse the list and simply store the reversed

147
00:11:53,200 --> 00:11:53,890
list here.

148
00:11:53,890 --> 00:11:58,470
So now this is also up to date and shows the newest order first,

149
00:11:58,510 --> 00:12:07,150
that's just a tiny thing. But with that, I'd say we have a decent application here which has all the features

150
00:12:07,180 --> 00:12:16,540
we would want of it and we're able to add items, edit items, view items, change the favorite status,

151
00:12:16,570 --> 00:12:19,570
place orders and view our orders now.

