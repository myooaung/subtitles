1
00:00:02,200 --> 00:00:06,220
With our cart provider set up here as well, we can start using it

2
00:00:06,460 --> 00:00:14,660
and a good way to start using it is to add items, here in product item.

3
00:00:14,660 --> 00:00:22,280
That means I want to get access to my cart containers so to say and I can do this by using provider

4
00:00:22,370 --> 00:00:22,720
of

5
00:00:22,730 --> 00:00:27,230
and now of course with the angled brackets, I refer to cart and not products 

6
00:00:27,230 --> 00:00:33,890
and this gives us access to the nearest provided object of type cart, which is this one here in the

7
00:00:33,890 --> 00:00:37,340
main.dart file. Now to use the cart

8
00:00:37,340 --> 00:00:38,440
class here in products

9
00:00:38,450 --> 00:00:41,050
item, we need to import it as always,

10
00:00:41,270 --> 00:00:50,190
so we import from providers cart.dart and with that import added, here

11
00:00:50,200 --> 00:00:55,240
we just have to add the context argument and now we get access to the cart container.

12
00:00:55,300 --> 00:00:59,610
Now in the product item here, I'm not interested in changes to the cart,

13
00:00:59,650 --> 00:01:04,690
so here I'll said listen to false so that this widget does not rebuild if the cart changes

14
00:01:04,690 --> 00:01:09,910
because here I only want to dispatch actions so to say, I only want to tell the cart that I added a new

15
00:01:09,910 --> 00:01:19,730
item, I'm not interested in changes to the cart. So down there on our button, we can now call cart add

16
00:01:19,760 --> 00:01:25,340
item and we need to forward some information about the product which we thankfully have here, product.id,

17
00:01:25,340 --> 00:01:31,910
product.price and product.title. All of that is available here

18
00:01:32,210 --> 00:01:38,160
and so we can forward it. Now to see whether that works, it would be nice to output some information about

19
00:01:38,160 --> 00:01:39,240
the cart somewhere

20
00:01:39,330 --> 00:01:46,570
and as I mentioned, I want to do that in the ProductsOverviewScreen. There next to my PopUpMenuButton,

21
00:01:46,620 --> 00:01:53,790
I want to have an icon button which shows the cart icon, takes us to the cart screen and also shows a small

22
00:01:53,790 --> 00:01:58,250
label that tells us how many items are in the cart.

23
00:01:58,260 --> 00:02:02,970
So here, I want to add an icon button with that cart icon and an extra badge.

24
00:02:02,970 --> 00:02:08,400
Now this badge on the icon button is not a widget that would be built into Flutter.

25
00:02:08,570 --> 00:02:13,380
Now to save some time, I'm providing you with one. You find it attached, it's a badge.dart file and

26
00:02:13,380 --> 00:02:18,720
you can simply drag and drop it into your widgets folder. The badge.dart file creates a stateless

27
00:02:18,720 --> 00:02:19,170
widget

28
00:02:19,800 --> 00:02:27,510
and in this stateless widget here, let me add a comma here so that this is structured a bit nicer. There

29
00:02:27,520 --> 00:02:38,680
in the end, we get three things we can configure - child, a value and a color which you can set and then

30
00:02:38,680 --> 00:02:44,640
down there, I have a stack widget which is built into Flutter where I have a couple of children and essentially

31
00:02:44,640 --> 00:02:49,910
there, I render a container with a little box decoration, some rounded corners,

32
00:02:49,920 --> 00:02:52,010
then if a color is set, I use that color

33
00:02:52,050 --> 00:02:58,440
otherwise I use the default accent color of the theme. Some box constraints to make sure that this

34
00:02:58,440 --> 00:03:04,320
label, this badge doesn't grow too big if you have a large value in it

35
00:03:04,440 --> 00:03:09,900
and then here I have my child which is simply text where I output the value which is received as an

36
00:03:09,930 --> 00:03:10,590
argument,

37
00:03:10,590 --> 00:03:17,380
right? So this is passed in from outside, align this in the center, set a certain font size and

38
00:03:17,570 --> 00:03:17,940
yes,

39
00:03:18,060 --> 00:03:24,810
so that's essentially my badge and please note that in this stack here, it does not just have this positioned

40
00:03:25,460 --> 00:03:26,190
label,

41
00:03:26,250 --> 00:03:31,350
it also adds child in here which also is a required argument.

42
00:03:31,350 --> 00:03:37,110
So it basically is wrapped around some other child which you define and we can now use this badge widget

43
00:03:37,110 --> 00:03:44,760
here in ProductsOverview by simply importing it from the widgets folder, there from badge.dart.

44
00:03:46,020 --> 00:03:57,810
Here in the place where you want to have that cart IconButton, we can use our badge and as a child,

45
00:03:58,690 --> 00:04:05,030
I define what this label should be placed on and that's my IconButton which receives an icon widget

46
00:04:06,220 --> 00:04:17,740
of type icons shopping cart, then we also need to define which value we want to output on the badge and

47
00:04:17,740 --> 00:04:22,540
that of course should be the amount of items we have in the cart and that's

48
00:04:22,540 --> 00:04:27,070
now some information which we need to derive from our cart provider, from this cart

49
00:04:27,070 --> 00:04:30,390
class. In the cart class,

50
00:04:30,400 --> 00:04:35,680
we of course have our list of items, now we can also add another getter which returns us an integer which

51
00:04:35,680 --> 00:04:37,420
tells us how many items are in there,

52
00:04:37,420 --> 00:04:44,400
again to move the logic of counting that into our cart class here and not into our widgets.

53
00:04:44,410 --> 00:04:54,740
So here, I get item count and now here, you have two different ways, two different approaches of counting.

54
00:04:54,920 --> 00:05:00,560
You can either count the amount of entries in this map, then that means if you have one product with

55
00:05:00,560 --> 00:05:07,640
quantity five in there, you still only return a count of one or you count the sum of all quantities,

56
00:05:07,640 --> 00:05:12,620
so if you have one product in the cart but that has a quantity of five, you return five.

57
00:05:12,620 --> 00:05:17,150
Now I want to return the amount of products, not the sum of quantities but of course, you can tweak this

58
00:05:17,150 --> 00:05:18,760
to your likings. Here

59
00:05:18,770 --> 00:05:27,940
however, I will simply return _items.length and that's all

60
00:05:28,100 --> 00:05:30,830
and don't add parentheses here for getters.

61
00:05:30,830 --> 00:05:34,280
So this gives us the item count. Back in the ProductsOverview,

62
00:05:34,310 --> 00:05:42,920
this means that here in badge, to provide my value, I need to get access to my provided cart class.

63
00:05:42,920 --> 00:05:44,960
Now we do provide in the main.dart file,

64
00:05:44,960 --> 00:05:46,880
now we need to set up a listener.

65
00:05:46,940 --> 00:05:53,450
We could set up the listener up here at the beginning of build, here in ProductsOverview, we could

66
00:05:53,450 --> 00:05:58,510
get access to the cart with provider of cart and so on right

67
00:05:58,550 --> 00:06:03,450
but that means the entire build method here would rerun whenever something changes in the cart.

68
00:06:03,500 --> 00:06:07,370
Now most parts of this ProductsOverviewScreen don't care about that,

69
00:06:07,610 --> 00:06:10,750
it's only this little button that cares about it.

70
00:06:10,940 --> 00:06:16,880
So the better approach here is to use consumer and for that, you need to import provider.dart from the

71
00:06:16,880 --> 00:06:25,840
provider package into this file and with consumer, you now define the class you want to listen to,

72
00:06:25,840 --> 00:06:32,260
so here we're looking for the next provided object of type cart and for that, to use this class

73
00:06:32,260 --> 00:06:35,660
here, we need to import from the providers folder

74
00:06:35,860 --> 00:06:41,180
the cart.dart file and now we're setting up a listener to cart here

75
00:06:41,360 --> 00:06:45,910
and in consumer, you now get your builder with your context if you should need it

76
00:06:45,920 --> 00:06:49,130
which I don't, with your cart

77
00:06:51,040 --> 00:06:52,750
object or data then

78
00:06:52,960 --> 00:06:56,660
and also with that extra child.

79
00:06:56,830 --> 00:07:06,970
Now it's here where I return this badge, so let's add this here and value, since I'm now in that builder,

80
00:07:07,210 --> 00:07:13,060
can now be retrieved from the cart data or maybe name it just cart because that is what it is

81
00:07:13,180 --> 00:07:18,330
and then on that cart, we simply can get the item count.

82
00:07:18,330 --> 00:07:19,910
Now that's an integer, value

83
00:07:19,920 --> 00:07:27,160
however wants a string, so we can simply call to string here. Now on the IconButton, we also should

84
00:07:27,160 --> 00:07:33,150
add onPressed and for now, I'll not do anything in here and up there since I already used the underscore

85
00:07:33,150 --> 00:07:33,990
for the context,

86
00:07:33,990 --> 00:07:37,220
you could name this _2 or anything like that.

87
00:07:37,260 --> 00:07:41,850
However, I want to use the child here because if you watch closely, what do I do?

88
00:07:42,270 --> 00:07:45,350
I change the value here, that depends on the cart,

89
00:07:45,480 --> 00:07:49,400
the icon button itself and the icon does not depend on it,

90
00:07:49,410 --> 00:07:56,010
so rebuilding this just because the cart changed is actually a bit of a waste. So I can cut this out

91
00:07:56,010 --> 00:08:03,810
of my badge here and on consumer, so next to that builder argument, I now add the child argument there

92
00:08:03,810 --> 00:08:11,420
and provide my icon button as a child. This is then passed in here as a child in the builder and to avoid

93
00:08:11,430 --> 00:08:14,400
naming confusion, I'll just name this ch

94
00:08:14,400 --> 00:08:17,610
and now this is what I forward to the child of my badge.

95
00:08:17,630 --> 00:08:19,600
Now these are a lot of child elements right

96
00:08:19,740 --> 00:08:27,000
but child here on the consumer is my IconButton. This automatically gets passed into the builder by

97
00:08:27,000 --> 00:08:30,500
Flutter and the provider package as the ch argument,

98
00:08:30,510 --> 00:08:32,190
so this is the end what I defined here.

99
00:08:32,309 --> 00:08:37,530
The important thing is that it won't be rebuilt when my cart changes because it's defined outside of

100
00:08:37,530 --> 00:08:38,020
cart.

101
00:08:38,460 --> 00:08:43,020
I then receive it in here in the builder and I can refer to it here and badge

102
00:08:43,039 --> 00:08:50,170
also as a child argument to which I then pass this static child I defined out here which simply is done

103
00:08:50,170 --> 00:08:55,520
this way so that it doesn't rebuild when the cart changes.

104
00:08:55,530 --> 00:09:01,050
Now if we do a full restart here, I actually get an error and

105
00:09:01,100 --> 00:09:06,730
if we have a look at that error by scrolling up to the beginning, we see that the problem is that the

106
00:09:06,730 --> 00:09:14,550
getter length was called on null. So that can only come from one place and that's in the cart.dart file

107
00:09:14,550 --> 00:09:19,720
where I return items length. Of course the problem is items here initially is undefined and therefore

108
00:09:19,720 --> 00:09:23,600
it has no length property. The solution is simple,

109
00:09:23,730 --> 00:09:29,910
you can check whether items is equal to null and if that's the case, you return 0 here and otherwise, you

110
00:09:29,910 --> 00:09:35,160
return items length. That is one simple solution here around this problem.

111
00:09:35,220 --> 00:09:36,780
Now this rebuilds,

112
00:09:36,780 --> 00:09:40,380
now you see here the debug badge is slightly above it

113
00:09:40,410 --> 00:09:47,170
but you see that icon here or the cart icon with that badge and if I click on Add to Cart here, 

114
00:09:47,220 --> 00:09:52,090
nothing changes, why is that? Because we forgot something important.

115
00:09:52,180 --> 00:09:58,690
You always need to call notifyListeners when you change something in your provided classes to which

116
00:09:58,690 --> 00:10:00,880
your listeners should react.

117
00:10:00,880 --> 00:10:09,940
So here if I update my cart, of course at the end of this add item function here, I have to call

118
00:10:10,630 --> 00:10:15,720
notifyListeners, otherwise my changes won't be reflected in user interface.

119
00:10:15,730 --> 00:10:19,710
So now if I save this, if I tap this shopping cart

120
00:10:19,710 --> 00:10:23,190
icon here, still nothing.

121
00:10:23,250 --> 00:10:25,380
Well we see that we have an error here and

122
00:10:25,380 --> 00:10:29,540
the error is that contains key was called on null.

123
00:10:29,540 --> 00:10:34,090
The problem here simply is that all my nice methods here on items don't work

124
00:10:34,250 --> 00:10:39,980
if items is uninitialized as it is here. Simple workaround is to simply initialize this as an empty

125
00:10:39,980 --> 00:10:46,580
map which of course also means that this work around here isn't really needed anymore. So make sure that

126
00:10:46,640 --> 00:10:52,690
items is an empty map here initially and now if you reload with that and with notifyListeners added,

127
00:10:52,690 --> 00:10:53,330
now

128
00:10:53,390 --> 00:10:59,450
if I click on my cart icons, you see the number in the badge now changes. If I click on the same

129
00:10:59,450 --> 00:11:04,940
icon multiple times, it doesn't change because in my implementation here, I'm counting the amount of products

130
00:11:04,940 --> 00:11:07,580
in the cart, not the sum of quantities

131
00:11:07,580 --> 00:11:11,180
but if I click on different products, then it increases.

132
00:11:11,180 --> 00:11:16,140
So this shows how we can now manage the cart in our provided class here,

133
00:11:16,280 --> 00:11:21,590
how we do this efficiently and how we can use that information in different widgets. Now as a next step,

134
00:11:21,800 --> 00:11:24,120
let's actually make sure we can click that cart

135
00:11:24,140 --> 00:11:29,390
icon here and go to a separate screen where we can see all the content of our cart.

