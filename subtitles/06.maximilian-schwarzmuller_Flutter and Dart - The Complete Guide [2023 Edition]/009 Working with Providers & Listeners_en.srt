1
00:00:02,380 --> 00:00:10,570
If you search for flutter provider, you should end up on this page here on pop dot death with the provider

2
00:00:10,570 --> 00:00:14,500
package and there you find some documentation about how to use it.

3
00:00:14,500 --> 00:00:15,760
Definitely interesting.

4
00:00:15,760 --> 00:00:18,100
But of course there's now also what I will do together with you.

5
00:00:18,100 --> 00:00:19,450
We will start using it.

6
00:00:19,960 --> 00:00:25,960
And for that you first of all have to install it, which you do by simply copying this entry here and

7
00:00:25,980 --> 00:00:28,090
installing tap on the package page.

8
00:00:28,860 --> 00:00:35,130
Now go back to your project and they're in the pop spectral YAML file at this entry below your flutter

9
00:00:35,130 --> 00:00:39,300
dependency here and make sure the annotation is correct because indentation matters.

10
00:00:39,750 --> 00:00:44,070
Once you save that file, flutter should automatically go ahead and fetch these packages.

11
00:00:44,100 --> 00:00:50,820
If it doesn't do that, you can run flutter packages, get in your terminal, navigate it into this

12
00:00:50,820 --> 00:00:51,870
project folder.

13
00:00:52,380 --> 00:00:54,720
With that the provider package is installed.

14
00:00:54,720 --> 00:00:57,630
And of course the question is now how do we use it?

15
00:00:58,360 --> 00:01:04,959
Now a provider in the end needs to be defined with the help of a class, and you then build a new provider

16
00:01:04,959 --> 00:01:07,180
based on that class definition.

17
00:01:07,570 --> 00:01:14,290
Now, a provider or this class you create is also often referred to as a model because you all the kind

18
00:01:14,290 --> 00:01:18,460
of model, your data, they're the data in your app, which then changes.

19
00:01:18,730 --> 00:01:26,350
Now I'm already using the term model here though, and I'm using it here to define my my data classes,

20
00:01:26,350 --> 00:01:29,110
my data types, which I have like a product here.

21
00:01:29,110 --> 00:01:35,620
And that is not really something I want to provide because a single product is just a single object

22
00:01:35,620 --> 00:01:36,340
I use.

23
00:01:36,340 --> 00:01:41,140
What I want to manage here with this state management solution is something bigger.

24
00:01:41,170 --> 00:01:44,860
A list of all my products, not just a single product.

25
00:01:45,160 --> 00:01:50,110
Now, therefore, I will create a new subfolder here and name it providers to set up my classes that

26
00:01:50,110 --> 00:01:57,700
define these bigger state management definitions, these bigger data definitions for my app.

27
00:01:57,700 --> 00:02:02,320
So to say the data, which also changes over time and which I want to reflect.

28
00:02:03,140 --> 00:02:06,170
So here in providers, I'll add a new file.

29
00:02:08,720 --> 00:02:09,889
And named at.

30
00:02:10,630 --> 00:02:17,680
Products Dot Dart you can also name it products underscore provider if you want to make that differentiation

31
00:02:17,680 --> 00:02:21,940
really clear now in the products dot dart file.

32
00:02:23,340 --> 00:02:27,310
You to find a new class and I'll name that class products.

33
00:02:27,330 --> 00:02:31,120
However, now here you don't just have a class like this.

34
00:02:31,140 --> 00:02:33,230
Instead, you need to add a mix in.

35
00:02:33,240 --> 00:02:39,090
I mentioned mix ins earlier in the course already you add make sense by adding the width keyword and

36
00:02:39,090 --> 00:02:45,330
then the name of the mix in a mix in is a bit like extending never class.

37
00:02:45,360 --> 00:02:52,110
The core difference is that you simply merge some properties or it's a methods into your existing class,

38
00:02:52,110 --> 00:02:57,870
but you don't really turn your class into an instance of that inherited class.

39
00:02:57,900 --> 00:03:01,440
It's a bit like inheritance lite, so to say.

40
00:03:01,890 --> 00:03:08,910
And class we need to mix in here is to change notifier class, which is built into flutter and which

41
00:03:08,910 --> 00:03:12,990
you enable by importing the flutter material dart package here.

42
00:03:13,500 --> 00:03:20,310
Change Notifier is basically kind of related to the inherited widget which the provider package uses

43
00:03:20,310 --> 00:03:25,890
behind the scenes and inherited widget, whilst we won't work with it directly is simply a widget in

44
00:03:25,890 --> 00:03:31,500
Flutter which allows us to establish behind the scenes communication tunnels with the help of the context

45
00:03:31,500 --> 00:03:33,600
object, which we're getting in every widget.

46
00:03:34,200 --> 00:03:42,450
So this product class now mixes in the change notifier here and you'll see why we add this mix in in

47
00:03:42,450 --> 00:03:43,260
a second.

48
00:03:44,010 --> 00:03:47,100
Now, you can define whatever you want at this class.

49
00:03:47,100 --> 00:03:51,840
And here I want to define a list of products.

50
00:03:52,320 --> 00:03:55,470
So I'll, first of all, import.

51
00:03:56,580 --> 00:04:05,370
My product model loops only with one slash here and I'll store a list of products here in the product

52
00:04:05,370 --> 00:04:06,060
class.

53
00:04:07,200 --> 00:04:13,700
So I'll have a list which will hold product data in the end and I'll name this underscore items.

54
00:04:13,710 --> 00:04:15,870
You could also just name it items.

55
00:04:15,870 --> 00:04:21,779
I just want to make it really clear that this property here should never be directly accessible from

56
00:04:21,779 --> 00:04:22,410
outside.

57
00:04:22,410 --> 00:04:25,050
And I'll also show why I do this in a second.

58
00:04:25,230 --> 00:04:32,160
So I have my underscore items in there, and that's not a final list because it will change over time.

59
00:04:32,550 --> 00:04:37,620
And with that, I mean the value here in the items property, not just the items in the list, because

60
00:04:37,620 --> 00:04:40,800
as you learned, you can also change items in the list that is final.

61
00:04:40,800 --> 00:04:44,730
But here I really want to change the value that's stored in the property itself.

62
00:04:45,120 --> 00:04:50,580
Before we change anything, however, let's actually make sure we can fetch these items.

63
00:04:50,580 --> 00:04:56,070
And since I turned this into a private property by adding the underscore, which means it can't be accessed

64
00:04:56,070 --> 00:05:03,180
from outside, I'll add a getter here which will return a list of products, and then it's a getter

65
00:05:03,180 --> 00:05:07,350
by adding to get keyword, which is named items without the underscore.

66
00:05:07,380 --> 00:05:10,920
And in there I return my items, but not like this.

67
00:05:10,920 --> 00:05:17,520
Instead I return a copy of them, which I do by wrapping items here into square brackets and then by

68
00:05:17,520 --> 00:05:19,020
using the spread operator.

69
00:05:19,140 --> 00:05:21,120
Now, why am I doing this?

70
00:05:21,540 --> 00:05:27,270
You have to remember that all these objects in flutter were entered are reference types.

71
00:05:27,270 --> 00:05:34,980
If I would return my items list here, then I would return a pointer at this object and memory.

72
00:05:34,980 --> 00:05:35,370
Right.

73
00:05:35,370 --> 00:05:37,500
That's what you learned earlier in the course.

74
00:05:37,620 --> 00:05:43,410
And that means that anywhere in the code where I get access to my product class here and where I then

75
00:05:43,410 --> 00:05:50,010
get access to the items, I get that address and therefore I get direct access to this list of items

76
00:05:50,010 --> 00:05:51,660
itself in memory.

77
00:05:51,660 --> 00:05:57,240
And hence I could start editing this list of items from anywhere else in the app where I tap into this

78
00:05:57,240 --> 00:05:58,320
product class.

79
00:05:58,920 --> 00:06:06,900
I don't want to do that and I don't want to do that because when my products change, I actually have

80
00:06:06,900 --> 00:06:08,880
to call a certain method.

81
00:06:09,830 --> 00:06:14,210
To tell all the listeners of this provider, remember the slide.

82
00:06:14,210 --> 00:06:17,700
You have the provider and you have listeners that new data is available.

83
00:06:17,720 --> 00:06:24,020
So let's say we had an add product method here which returns nothing and which for the moment doesn't

84
00:06:24,020 --> 00:06:25,100
take an argument.

85
00:06:25,490 --> 00:06:30,110
And then here we would simply add something to our items.

86
00:06:30,410 --> 00:06:35,810
Then, of course, we typically would have the problem that if we change data here in this class, how

87
00:06:35,810 --> 00:06:40,070
would we let all our widgets or the widgets that are interested know about this?

88
00:06:40,070 --> 00:06:47,050
And that's why we add this change notifier because that gives us access to a notify listeners method,

89
00:06:47,060 --> 00:06:52,820
because always keep in mind this class will soon be used by the provider package which uses inherited

90
00:06:52,820 --> 00:06:58,760
widget behind the scenes and therefore it will establish a communication channel between this class

91
00:06:58,760 --> 00:07:00,860
and widgets that are interested for us.

92
00:07:00,950 --> 00:07:06,590
And we need to let those widgets know about updates that we did with not notify listeners.

93
00:07:06,590 --> 00:07:12,800
So that in these widgets which are listening to this class and to changes in this class are then rebuilt

94
00:07:12,800 --> 00:07:15,530
and do actually get the latest data we have in there.

95
00:07:15,680 --> 00:07:21,500
And that's why I return a copy so that we can't directly edit our items here from anywhere else in the

96
00:07:21,500 --> 00:07:21,770
app.

97
00:07:21,770 --> 00:07:27,530
Because if we would do that, we could not call notify listeners because we can only do this from inside

98
00:07:27,530 --> 00:07:33,650
this class because there we added this mix in and hence our widgets that depend on the data in here

99
00:07:33,650 --> 00:07:37,220
would not rebuild correctly because they wouldn't know about the change.

100
00:07:37,340 --> 00:07:42,620
So we have to make sure that we only change data from inside the class because then we can trigger notify

101
00:07:42,620 --> 00:07:50,270
listeners and all the other parts of the app that are listening to this class will then get rebuilt.

102
00:07:50,510 --> 00:07:55,310
Now, this might not be entirely clear yet because we're not listening yet, but that's the general

103
00:07:55,310 --> 00:07:58,130
idea here of why I do it like this.

104
00:07:58,130 --> 00:08:02,870
And for the moment, I'll comment this out because for the moment we don't really know how to add products,

105
00:08:03,110 --> 00:08:08,000
but that's the idea why we have change notifier and why we need this set up and why I return a copy

106
00:08:08,000 --> 00:08:08,420
here.

107
00:08:08,600 --> 00:08:10,640
But we've said, let's start listening.

108
00:08:10,640 --> 00:08:14,240
And before we can start listening, we first of all need to provide this.

109
00:08:14,240 --> 00:08:20,870
Thus far we have the class, but now we need to turn this class here into a data container, into a

110
00:08:20,870 --> 00:08:25,010
provider which we can use in our app and in the different parts of our app.

111
00:08:25,460 --> 00:08:28,900
And there the products are important.

112
00:08:28,910 --> 00:08:32,840
A couple of places of this app, of course they are important.

113
00:08:33,909 --> 00:08:37,720
In the product detail and the product overview screen for the moment.

114
00:08:38,230 --> 00:08:43,000
That means that I want to provide this in the main dart file because that's important and that's something

115
00:08:43,000 --> 00:08:44,990
you have to know with the provider package.

116
00:08:45,010 --> 00:08:52,090
You need to provide a class which you then want to use from different widgets in your app at the highest

117
00:08:52,090 --> 00:08:57,700
possible point of all these widgets which will be interested, which means that if the product overview

118
00:08:57,700 --> 00:09:03,100
and the product detail screen are interested in the data, I have to provide the class in a widget that

119
00:09:03,100 --> 00:09:07,390
is above them, which in my case is this my app widget, my root widget.

120
00:09:07,840 --> 00:09:14,170
If I had data which is only important to the product item widget, then I could provide that data in

121
00:09:14,170 --> 00:09:18,060
the products overview widget because that is where I create the product item.

122
00:09:18,070 --> 00:09:20,920
No need to then manage it in the main dart file.

123
00:09:21,430 --> 00:09:27,100
But here, since I have widgets which are registered on the root level, I need to also provide my data

124
00:09:27,100 --> 00:09:27,960
on the root level.

125
00:09:27,970 --> 00:09:33,550
By the way, that will not mean that the entire app will rebuild whenever something changes in the data

126
00:09:33,550 --> 00:09:35,230
though, but more on that in a second.

127
00:09:35,710 --> 00:09:42,370
So I want to provide my data here and therefore let's import our provider or this class we just worked

128
00:09:42,370 --> 00:09:46,960
on from providers and they are from the products dot dart file.

129
00:09:47,320 --> 00:09:49,510
And now we can set up a provider here.

130
00:09:49,540 --> 00:09:53,380
Now how do we register a provider in our app then?

131
00:09:54,050 --> 00:09:59,750
To register a provider, you need to import something from that provider package because there is a

132
00:09:59,750 --> 00:10:01,370
reason why we added it after all.

133
00:10:01,370 --> 00:10:08,600
Right, so import provider start from the provider package and now here in your my app widget.

134
00:10:08,630 --> 00:10:14,150
Instead of returning material app, we'll actually wrap this into another widget.

135
00:10:14,980 --> 00:10:18,190
So wrap with new widget and that new widget.

136
00:10:18,890 --> 00:10:20,600
Is now a provider.

137
00:10:21,080 --> 00:10:23,870
And there you've got a couple of providers available.

138
00:10:23,900 --> 00:10:30,110
The most common provider, which I would recommend using, is to change notifier.

139
00:10:30,900 --> 00:10:31,890
Provider.

140
00:10:32,010 --> 00:10:35,970
And that's a clause provided by that provider package which we installed.

141
00:10:36,570 --> 00:10:41,790
It allows us to register a class to which you can then listen in child widgets.

142
00:10:41,790 --> 00:10:48,840
And whenever that class updates the widgets which are listening and only these not all child widgets.

143
00:10:48,870 --> 00:10:51,810
Only child widgets which are listening will rebuild.

144
00:10:52,410 --> 00:10:53,910
So here.

145
00:10:55,640 --> 00:10:59,690
You then have to provide a builder method.

146
00:11:00,430 --> 00:11:09,340
That builder method will receive a build context and it should return a new instance of your provided

147
00:11:09,340 --> 00:11:09,760
class.

148
00:11:09,760 --> 00:11:11,000
So not a widget.

149
00:11:11,020 --> 00:11:12,880
A new instance of your provider class.

150
00:11:12,880 --> 00:11:15,370
So in our case of the products class here.

151
00:11:15,370 --> 00:11:18,490
So here I simply return products like this.

152
00:11:18,790 --> 00:11:25,500
Now, one important note at this point, though, the builder method here is the right method to choose

153
00:11:25,510 --> 00:11:29,980
if you are using version free of the provider package.

154
00:11:29,980 --> 00:11:36,520
So if you have, for example, this dependency in your pop backdoored YAML file, if you are using the

155
00:11:36,520 --> 00:11:41,280
latest version or specifically a version greater than or equal to four.

156
00:11:41,290 --> 00:11:47,950
So if you for example, have this entry in your perspective YAML file, then this will not work with

157
00:11:47,950 --> 00:11:50,800
builder instead then it's create.

158
00:11:50,950 --> 00:11:55,510
And just like that you simply have create instead of builder in that case.

159
00:11:56,130 --> 00:12:02,790
Now, I did record this course with version three, which is why you will see Bilder in this video and

160
00:12:02,790 --> 00:12:07,650
the next videos, and you can absolutely use version free of the provider package.

161
00:12:07,680 --> 00:12:13,710
All you need to do is have this entry here in your perspective YAML file, for example.

162
00:12:13,710 --> 00:12:19,680
If you have this, you can just follow along with builder, but if you want to use the latest version,

163
00:12:19,680 --> 00:12:21,360
then you have to use create here.

164
00:12:21,360 --> 00:12:25,560
So if you have version four or higher, then you need to create here.

165
00:12:25,560 --> 00:12:30,270
So don't be confused if you see something different in the next lectures, that's just because I use

166
00:12:30,270 --> 00:12:31,220
the different version.

167
00:12:31,230 --> 00:12:37,260
Now, one thing that does not change is how the provider package works, what it does, and so on.

168
00:12:37,260 --> 00:12:38,820
So that's all the same.

169
00:12:38,820 --> 00:12:41,330
Only this part here needs adjustment.

170
00:12:41,340 --> 00:12:43,350
Just wanted to point this out here.

171
00:12:44,800 --> 00:12:51,190
Now we set up a provider which provides an instance and one at the same instance of this product class

172
00:12:51,190 --> 00:12:53,170
to all child widgets.

173
00:12:53,170 --> 00:12:57,640
So material app and all its children which are interested.

174
00:12:57,640 --> 00:13:03,040
So all child widgets can now set up a listener to this instance of this class, to this same instance,

175
00:13:03,040 --> 00:13:05,470
the same object of this class.

176
00:13:05,470 --> 00:13:10,780
And whenever we change something in the class and we then call notify listeners, the widgets which

177
00:13:10,780 --> 00:13:13,000
are listening will be rebuilt.

178
00:13:14,280 --> 00:13:18,690
And that's really important only to widgets which are listening, not behold material app.

179
00:13:18,690 --> 00:13:24,210
So just because something changes in here will not rebuild material app, it will only rebuild widgets

180
00:13:24,210 --> 00:13:25,530
which are listening.

181
00:13:26,690 --> 00:13:29,070
Nowhere is a place where we could be interested.

182
00:13:29,090 --> 00:13:31,220
Well, the products overview there.

183
00:13:31,890 --> 00:13:34,260
Here in the products overview.

184
00:13:34,350 --> 00:13:38,880
I have my great view builder, so I need my product here now.

185
00:13:38,880 --> 00:13:44,250
Actually, you could even argue to not unnecessarily rebuild the app bar which doesn't need any products

186
00:13:44,250 --> 00:13:52,020
data that we outsource this great you builder into a separate widget so we can wrap this use the refactoring

187
00:13:52,050 --> 00:13:57,240
tool and use extract widget here and gives us a name of products grid.

188
00:13:57,240 --> 00:14:01,080
Maybe now we have that new widget which is created for us.

189
00:14:01,770 --> 00:14:07,980
And that should actually not receive the product as an argument, but get it itself by actually using

190
00:14:07,980 --> 00:14:09,090
our provider.

191
00:14:10,030 --> 00:14:14,350
Now, first of all, I'll move my products right here into a new file.

192
00:14:14,380 --> 00:14:19,060
Technically, you don't need to do that, but I rather follow that convention.

193
00:14:19,650 --> 00:14:22,980
So my products grid dot dart file in there.

194
00:14:22,990 --> 00:14:30,900
Of course you need to import your material dart file from Flutter and also import the product model

195
00:14:30,900 --> 00:14:33,030
because we're referring to it here.

196
00:14:34,300 --> 00:14:36,310
And that's important, the product model.

197
00:14:36,310 --> 00:14:41,680
So our normal model in the models folder, not the products file we just worked on, but the normal

198
00:14:41,680 --> 00:14:42,580
model here.

199
00:14:44,080 --> 00:14:47,670
I also need to reference product item in here because I'm using it.

200
00:14:47,680 --> 00:14:49,660
So let's import.

201
00:14:51,220 --> 00:14:52,840
Product item.

202
00:14:53,740 --> 00:14:56,230
In the products overview screen.

203
00:14:56,230 --> 00:14:59,470
We now don't need that product item import anymore.

204
00:14:59,950 --> 00:15:07,360
I also want to grab the dummy product we have in here and move them away out of that widget into the

205
00:15:07,360 --> 00:15:07,930
product.

206
00:15:07,930 --> 00:15:14,170
Start file in the providers folder because there we have these products and I want to start with some

207
00:15:14,170 --> 00:15:19,780
dummy products for now so that in the product's overview screen, we don't need that anymore.

208
00:15:19,810 --> 00:15:25,960
We don't need the product model import anymore, therefore we just need to import that new.

209
00:15:27,610 --> 00:15:30,130
Products grid from the widgets folder.

210
00:15:30,520 --> 00:15:32,680
So products grid start.

211
00:15:34,730 --> 00:15:36,440
And we don't need a new keyword.

212
00:15:36,500 --> 00:15:38,120
So products grid.

213
00:15:39,760 --> 00:15:41,080
Products.

214
00:15:41,290 --> 00:15:43,090
Great is what I should import.

215
00:15:43,450 --> 00:15:48,250
And now product create is created here in the products grid widget.

216
00:15:48,790 --> 00:15:51,670
Don't need that constructor or anything of that.

217
00:15:51,700 --> 00:15:55,480
I want to fetch all my data in here instead by setting up such a listener.

218
00:15:56,140 --> 00:16:02,890
And for that in the build method, we can now use another feature from the provider package and hence

219
00:16:02,890 --> 00:16:04,900
let's import package.

220
00:16:06,090 --> 00:16:13,700
Provider provider dart here and that our feature is provider of context.

221
00:16:13,710 --> 00:16:18,870
Now we've seen that off context thing a couple of times throughout the course already with the theme

222
00:16:18,870 --> 00:16:20,970
with the navigator and so on.

223
00:16:21,240 --> 00:16:26,490
I'll already explain there that this sets up a direct communication channel behind the scenes.

224
00:16:26,670 --> 00:16:33,750
And this here, the provider package, allows us to set up a connection to one of the provided classes

225
00:16:33,750 --> 00:16:40,980
and therefore you can only use provider off in a widget which has some direct or indirect parent widget

226
00:16:40,980 --> 00:16:43,530
which set up a provider, which we did here.

227
00:16:43,530 --> 00:16:49,110
So that needs to be set up first, that provider, but then we can listen with provider off to changes

228
00:16:49,110 --> 00:16:53,700
in that provided class or in that provided object to be precise.

229
00:16:53,820 --> 00:16:59,250
And this build method of this widget where I'm using provider off and only this build method and of

230
00:16:59,250 --> 00:17:07,770
course all the child widgets will rebuild whenever the object I'm listening to changes the build method

231
00:17:07,770 --> 00:17:13,470
of a parent widget of products grid like the products overview here will not rerun because we're not

232
00:17:13,470 --> 00:17:14,730
setting up a listener here.

233
00:17:14,730 --> 00:17:20,220
And that's of course important not the entire widget tree does rebuild of data changes only the widget

234
00:17:20,220 --> 00:17:25,530
where I'm listening and of course then because this build method runs all the child widgets are rebuilt

235
00:17:25,530 --> 00:17:25,770
too.

236
00:17:25,770 --> 00:17:27,240
That's the normal behavior.

237
00:17:27,930 --> 00:17:34,260
The question now is how do we set up a connection between this widget and then this specific provider?

238
00:17:34,260 --> 00:17:39,330
Right now we only have one provider, but actually, as you will later also see, you can have more

239
00:17:39,330 --> 00:17:41,100
than one provider in your app.

240
00:17:41,340 --> 00:17:47,100
So I want to set up a listener to my provider, which actually provides me an instance of my product

241
00:17:47,100 --> 00:17:47,790
class.

242
00:17:50,310 --> 00:17:56,910
You tell Flutter or the provider package that you're interested in an instance of that product class

243
00:17:57,000 --> 00:18:03,450
by taking advantage of the fact that the off method here on the provider class provided by the provider

244
00:18:03,450 --> 00:18:09,930
package is a generic method, which means you can add these angle brackets to let it know to which type

245
00:18:09,930 --> 00:18:12,480
of data you actually want to listen to.

246
00:18:12,900 --> 00:18:16,950
So here I want to listen to changes in products and now that's important.

247
00:18:16,950 --> 00:18:19,050
That now has to be products.

248
00:18:19,050 --> 00:18:20,940
So here we import.

249
00:18:24,020 --> 00:18:27,590
From the providers folder and there from the product start file.

250
00:18:28,390 --> 00:18:30,130
With this piece of information.

251
00:18:30,130 --> 00:18:36,820
We're telling the provider package that we want to establish a direct communication channel to the provided

252
00:18:36,820 --> 00:18:39,340
instance of the product class.

253
00:18:39,340 --> 00:18:44,650
And now the provider package goes ahead and looks at the parent of products grid, the products overview

254
00:18:44,650 --> 00:18:47,290
screen, and there it finds no provider.

255
00:18:47,380 --> 00:18:51,280
So it goes ahead and has a look at the parent of the products overview screen.

256
00:18:51,280 --> 00:18:56,080
And that's of course our my app widget because that's where I'm instantiating the products overview

257
00:18:56,080 --> 00:19:03,490
screen and there if it goes up the widget tree it indeed it finds a provider and in that provider thankfully

258
00:19:03,490 --> 00:19:07,960
it finds a provider which thankfully provides an instance of type products.

259
00:19:08,140 --> 00:19:12,910
If we would create a different class here, then setting up this listener, of course would fail.

260
00:19:13,150 --> 00:19:21,160
But since we do provide a new product object here, we can tap into it and listen to it here with provider

261
00:19:21,160 --> 00:19:22,840
of products context.

262
00:19:23,530 --> 00:19:27,190
So this here gives us access to this products object.

263
00:19:27,900 --> 00:19:33,840
So name this product data and that's not our list of products, but to the object based on this class.

264
00:19:33,840 --> 00:19:37,800
And this will then have a items getter because we added it here.

265
00:19:38,280 --> 00:19:42,330
So the products we actually work with are then.

266
00:19:44,520 --> 00:19:47,340
Simply fetched from product data.

267
00:19:49,050 --> 00:19:51,840
By accessing items like this.

268
00:19:52,230 --> 00:19:54,720
And this now gives us a list of products.

269
00:19:54,720 --> 00:20:00,600
And since type inference works here, we actually don't need the product model import because we don't

270
00:20:00,600 --> 00:20:02,400
need the product class itself.

271
00:20:02,400 --> 00:20:08,520
Here in the product grid with dad, we now get our products here and we can now use the products here

272
00:20:08,520 --> 00:20:13,050
to determine the length and then forward that data to the product item.

273
00:20:13,050 --> 00:20:18,030
In the product item, as I explained earlier in this module, I'm fine with getting this data as an

274
00:20:18,030 --> 00:20:23,100
argument because this is data which this widget itself needs, which we don't just get to forwarded,

275
00:20:23,100 --> 00:20:25,140
but which we want to output in that widget.

276
00:20:25,140 --> 00:20:27,240
And therefore it's fine to accept it like this.

277
00:20:27,240 --> 00:20:33,180
It's actually recommended to get it like it is because then it's very clear to see which configuration

278
00:20:33,180 --> 00:20:35,190
this widget needs to work correctly.

279
00:20:35,190 --> 00:20:40,860
And you can drop this widget anywhere into your app where you know you get this data no matter if you

280
00:20:40,860 --> 00:20:42,720
have a provider above it or not.

281
00:20:43,290 --> 00:20:47,400
So with that was a lot of talking but very important.

282
00:20:47,430 --> 00:20:55,710
Let's do a full restart now and in our app we now still see our items here, but now we're actually

283
00:20:55,710 --> 00:21:02,850
loading them with the help of our provider class and the advantage, if not already evident, will become

284
00:21:02,850 --> 00:21:06,930
more and more clear the more complex our application gets.

