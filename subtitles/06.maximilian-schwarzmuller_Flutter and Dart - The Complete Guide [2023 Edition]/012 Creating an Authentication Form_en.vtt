WEBVTT
1
00:00:02.190 --> 00:00:05.830
So time to continue with our off form here.

2
00:00:05.850 --> 00:00:08.160
There are a couple of places where you could start.

3
00:00:08.460 --> 00:00:14.130
I'll start with the validation and with collecting all the user inputs.

4
00:00:14.670 --> 00:00:17.940
And for that, let's start with the very first text form field here.

5
00:00:17.940 --> 00:00:27.780
For the email address there, I will add the validator argument, which is a function that validates

6
00:00:27.780 --> 00:00:30.060
the user input when prompted to.

7
00:00:30.630 --> 00:00:36.870
So we get the value here, which is the value entered by the user and we can return a string which will

8
00:00:36.870 --> 00:00:41.160
then be shown as an error message if we detect an error or return.

9
00:00:41.160 --> 00:00:43.140
NULL if we have no error.

10
00:00:43.750 --> 00:00:47.040
So the validation logic of what I apply here is very simple.

11
00:00:47.050 --> 00:00:49.780
I'll check if value is empty.

12
00:00:52.070 --> 00:00:56.870
And a very, very, very naive email address validation.

13
00:00:57.020 --> 00:01:01.190
I'll check if the value does not contain.

14
00:01:01.190 --> 00:01:08.720
Hence the exclamation mark at the beginning does not contain an ad symbol if either of the two is true.

15
00:01:08.720 --> 00:01:15.560
So if it is empty or if we don't have an ad in the value, then I'll return an error text where I say

16
00:01:15.560 --> 00:01:18.440
Please enter a valid email.

17
00:01:19.680 --> 00:01:21.300
Address like this.

18
00:01:22.960 --> 00:01:29.320
LS If we make it past this if statement here, I will return null because then everything is all right.

19
00:01:31.300 --> 00:01:34.120
Now for the password there.

20
00:01:34.120 --> 00:01:37.390
Of course, on the password we also should add some validation.

21
00:01:38.190 --> 00:01:42.240
So let's add this validator function here and here.

22
00:01:42.240 --> 00:01:44.460
I'll check if the value is empty.

23
00:01:44.490 --> 00:01:48.180
Same check as before, and I'll also check the length.

24
00:01:48.480 --> 00:01:54.750
If the length of the password is, let's say, smaller than six or smaller than seven.

25
00:01:54.780 --> 00:01:58.530
That, by the way, is also the minimum length of Firebase ones.

26
00:01:58.530 --> 00:02:03.540
So if it's smaller, if it's shorter than seven, then I'll return.

27
00:02:04.400 --> 00:02:06.810
And sorry, that's the username.

28
00:02:06.830 --> 00:02:10.520
I want to check this on the password so I'll cut it and add it on the password.

29
00:02:10.520 --> 00:02:14.360
So here, if we're shorter than seven, I'll say.

30
00:02:15.190 --> 00:02:21.520
Password must be at least seven characters long and only otherwise.

31
00:02:21.520 --> 00:02:23.170
I'll return null here.

32
00:02:26.230 --> 00:02:28.300
And here we need a semicolon.

33
00:02:29.010 --> 00:02:35.400
So now with that, back to the username field here we have a validator where we also get the value and

34
00:02:35.400 --> 00:02:37.480
it's up to you which validation logic you want.

35
00:02:37.500 --> 00:02:43.250
I'll check for emptiness or also if the value length is, let's say, shorter than four.

36
00:02:43.260 --> 00:02:51.390
So if we have a very short username, then I will say please enter at least four characters.

37
00:02:52.110 --> 00:02:55.680
And otherwise justice and the other validators will return null.

38
00:02:56.280 --> 00:03:00.360
So we get these validators, but right now they're never going to get triggered.

39
00:03:00.390 --> 00:03:06.570
Now they should be triggered when the user presses this submit button here, this race button.

40
00:03:07.740 --> 00:03:11.580
And we can trigger them all simultaneously through that forum.

41
00:03:11.580 --> 00:03:14.280
That's what you also learned earlier in the course.

42
00:03:14.580 --> 00:03:16.950
For that, we need such a global key.

43
00:03:16.980 --> 00:03:19.650
You might remember this from the Forums module.

44
00:03:20.070 --> 00:03:27.090
We create a form key for that by instantiating a global key which will contain some form state in the

45
00:03:27.090 --> 00:03:27.570
end.

46
00:03:27.570 --> 00:03:33.510
And with this generic type we can signal to dart that eventually some form state will be managed with

47
00:03:33.510 --> 00:03:37.020
this key and we need to connect this key to the form.

48
00:03:37.020 --> 00:03:43.770
So for that we go to the form widget and set the key argument of the form to our form key.

49
00:03:44.690 --> 00:03:48.530
And with that form key added, we can also add a submit function.

50
00:03:49.700 --> 00:03:50.240
I'll name it.

51
00:03:50.240 --> 00:03:56.600
Try, submit, underscore, try, submit to mark that it's private and should only be called from inside

52
00:03:56.600 --> 00:03:59.390
this class and then try submit.

53
00:03:59.390 --> 00:04:01.220
We'll use that form key.

54
00:04:02.270 --> 00:04:03.890
To validate the forum.

55
00:04:03.890 --> 00:04:09.290
We get access to the forum through the current state property and then we can call validate.

56
00:04:09.290 --> 00:04:13.940
And this will trigger all the validators of all the text forum fields in the forum.

57
00:04:15.150 --> 00:04:17.430
This will return a result.

58
00:04:17.430 --> 00:04:19.970
It will tell us whether the form is valid or not.

59
00:04:19.980 --> 00:04:22.050
So I'll store this in a final.

60
00:04:22.900 --> 00:04:25.150
Variable or constant, therefore.

61
00:04:26.320 --> 00:04:30.190
We can then check if the form is valid and only if it is valid.

62
00:04:30.190 --> 00:04:37.540
So if all validators return, null will continue and actually get the values and submit the form.

63
00:04:38.580 --> 00:04:45.390
Now to get the values we can again use the form key current state and call save.

64
00:04:45.390 --> 00:04:52.110
And what this will do is it will go to all the text form fields and on every text form field it will

65
00:04:52.110 --> 00:04:54.330
trigger the on saved.

66
00:04:55.350 --> 00:04:56.280
Function here.

67
00:04:56.550 --> 00:05:01.440
So we need to add this to every text form field to set up the logic that should run.

68
00:05:01.440 --> 00:05:07.920
When the entire form is being saved, the function that is triggered gets a value, which is the value

69
00:05:07.920 --> 00:05:08.940
the user entered.

70
00:05:09.270 --> 00:05:17.070
And then in there we need to do something with that value and that something I will do is I will store

71
00:05:17.100 --> 00:05:22.350
the entered value in a global or a class wide property.

72
00:05:22.770 --> 00:05:28.080
So for that, besides the final form key, I will add a string here, which is a true variable.

73
00:05:28.080 --> 00:05:31.950
So which is not constant but variable user email.

74
00:05:32.760 --> 00:05:34.890
Which initially is an empty string, let's say.

75
00:05:35.730 --> 00:05:42.360
And I also get my user name here and also the user password.

76
00:05:42.750 --> 00:05:45.420
So we got these free properties to find here.

77
00:05:45.510 --> 00:05:49.220
And these are the properties will now update in the on safe methods.

78
00:05:49.230 --> 00:05:51.700
So for example, I'll set user email to value.

79
00:05:51.720 --> 00:05:53.200
Here we know it's valid.

80
00:05:53.220 --> 00:05:59.550
Otherwise this wouldn't have executed because we only save the form if we do have valid inputs and therefore

81
00:05:59.550 --> 00:06:01.470
we can save the entry value.

82
00:06:01.710 --> 00:06:07.350
We don't need set state here because set state would only make one important difference.

83
00:06:07.350 --> 00:06:11.720
It would reevaluate the widget and possibly render the UI.

84
00:06:11.730 --> 00:06:18.120
But this is just some behind the scenes data which we need internally, and changing that data has no

85
00:06:18.120 --> 00:06:23.220
impact on the UI, so there is no need to reevaluate and re render the UI.

86
00:06:23.250 --> 00:06:25.110
Hence I'll just save it like this.

87
00:06:27.040 --> 00:06:27.670
Now.

88
00:06:27.670 --> 00:06:34.540
That's the logic we also need on all the other text form fields here for the username all set username

89
00:06:34.570 --> 00:06:38.170
equal to the entered value and here on the password.

90
00:06:38.170 --> 00:06:42.130
Unsurprisingly, we set user password equal to the entered value.

91
00:06:44.000 --> 00:06:49.220
So all these properties are updated when safe is being called here.

92
00:06:49.730 --> 00:06:56.090
And therefore after safe what's called, we can use those values to.

93
00:06:56.780 --> 00:07:01.040
Send our auth requests to Firebase or anything like that.

94
00:07:01.070 --> 00:07:03.380
We'll take care about this in a next step.

95
00:07:03.920 --> 00:07:10.550
Now, one other thing I want to do after validating before we actually save everything.

96
00:07:11.060 --> 00:07:18.230
I will use Focus Scope the focus scope class provided by Flutter, which needs a context which we have

97
00:07:18.230 --> 00:07:22.190
available here in the state class to call unfocused.

98
00:07:22.400 --> 00:07:27.800
This will essentially just close the soft keyboard, which might still be open as soon as we submit

99
00:07:27.800 --> 00:07:33.410
the form so that the keyboard always closes because this will move the focus away from any input field

100
00:07:33.410 --> 00:07:35.720
to nothing, basically.

101
00:07:37.410 --> 00:07:45.000
And with all of that for the moment, I'll just print user email here and also repeat this for user

102
00:07:45.360 --> 00:07:52.860
name and here for user password so that we at least see the values and try submit is now the method

103
00:07:52.860 --> 00:07:55.800
that should be connected to this raised button here.

104
00:07:55.800 --> 00:08:03.060
So on pressed will now point at try submit and we added like this without parentheses because we just

105
00:08:03.060 --> 00:08:08.880
want to point at it so that it's executed on our behalf when the button is pressed by the user.

106
00:08:10.710 --> 00:08:18.060
If we save that and we go back and I enter some email address here and I leave out the username, but

107
00:08:18.060 --> 00:08:20.930
I do enter a password which is too short and a click login.

108
00:08:20.940 --> 00:08:22.610
You see these error messages.

109
00:08:22.620 --> 00:08:23.790
So that works.

110
00:08:24.360 --> 00:08:30.090
And if I then fix all these errors here and I click log in.

111
00:08:31.170 --> 00:08:34.740
This looks better and I clicked it twice, which is I see the outputs twice.

112
00:08:34.740 --> 00:08:38.370
So submitting and getting these inputs works and that's great.

113
00:08:39.230 --> 00:08:43.130
Now, of course, we don't just want to get and validate all these inputs.

114
00:08:43.130 --> 00:08:46.670
We also want to switch between log in and sign up mode.

115
00:08:47.030 --> 00:08:54.460
The mode we're in will change the labels on the buttons, but it will also change the text form fields.

116
00:08:54.470 --> 00:08:59.960
We only want to fetch the username if we are signing up, not if we're logging in.

117
00:09:00.580 --> 00:09:04.930
So therefore in the off form we should also manage some state.

118
00:09:05.230 --> 00:09:07.030
Hence I'll add a new variable here.

119
00:09:08.700 --> 00:09:16.560
A bull or actually a bar here because we can infer the type as we can down there since I set an initial

120
00:09:16.560 --> 00:09:17.070
type.

121
00:09:17.070 --> 00:09:23.190
So a VAR, which I'll name is log in, which initially, let's say is true and this controls whether

122
00:09:23.190 --> 00:09:26.250
we currently are in log in mode or in sign up mode.

123
00:09:27.120 --> 00:09:31.010
And this should be changed whenever this flat button at the bottom is pressed.

124
00:09:31.020 --> 00:09:34.080
So whenever this flat button here is pressed, I want to switch.

125
00:09:34.320 --> 00:09:42.600
So here in this anonymous function here we can set is log in equal to what it's currently.

126
00:09:42.600 --> 00:09:50.460
Not to reverse it, but that should now be wrapped in a set state call so that the UI is also updated.

127
00:09:50.460 --> 00:09:54.770
Because when we change the is log in mode, this does affect the UI.

128
00:09:54.780 --> 00:09:57.960
So this needs to go into a set state call.

129
00:09:59.740 --> 00:10:03.610
Now log in, for example, has an impact on this text here.

130
00:10:04.710 --> 00:10:05.220
There.

131
00:10:05.220 --> 00:10:12.630
We can check if is log in is true and with a ternary expression we can return a different value for

132
00:10:12.630 --> 00:10:15.150
when it's true, then for when it's not true.

133
00:10:15.150 --> 00:10:18.510
Because when it's true we can switch to the sign up mode.

134
00:10:18.510 --> 00:10:23.400
So then we want to show create new account because that's the alternative to logging in.

135
00:10:23.670 --> 00:10:29.610
Otherwise if it's false, we are in sign up mode and we want to allow the user to switch to log in mode.

136
00:10:29.610 --> 00:10:34.800
So maybe a text like I already have an account is appropriate then.

137
00:10:35.800 --> 00:10:37.740
And also here for the race button.

138
00:10:37.750 --> 00:10:42.100
If we are in log and mode, I want to show the log in text.

139
00:10:42.100 --> 00:10:47.710
But otherwise, if we are in sign up mode, I want to show sign up or sign up like this.

140
00:10:50.490 --> 00:10:55.110
And if we now save this, we can click this button and these labels update.

141
00:10:55.590 --> 00:11:01.050
Now, the username field, as I mentioned, is all the only required if we are signing up.

142
00:11:01.170 --> 00:11:05.970
So this entire text form field here should only be added conditionally.

143
00:11:06.090 --> 00:11:13.260
And we can do this with this pretty nice dart syntax where we add a if statement in disarray in this

144
00:11:13.290 --> 00:11:20.490
widget array for the column and this item is then added and removed dynamically to and from the list

145
00:11:20.490 --> 00:11:23.010
based on the condition in our if statement.

146
00:11:23.130 --> 00:11:27.450
So here I can check if we're not in log in mode.

147
00:11:27.670 --> 00:11:28.170
Whoops.

148
00:11:28.170 --> 00:11:29.460
Log in.

149
00:11:30.480 --> 00:11:32.280
And only if we are not.

150
00:11:32.280 --> 00:11:38.250
The filter after will be added to the array, so the value thereafter will be added to the array.

151
00:11:38.250 --> 00:11:43.620
So only if this is not true, this text form field will be part of the columns array.

152
00:11:43.650 --> 00:11:45.300
If this is true.

153
00:11:45.420 --> 00:11:49.890
So if is log in is true and therefore this is false, this will not be added.

154
00:11:50.460 --> 00:11:55.260
Now you see some blue squiggly lines here because this is a dart feature which is only available since

155
00:11:55.260 --> 00:11:56.460
version 2.3.

156
00:11:56.460 --> 00:11:58.320
You might not have those lines.

157
00:11:58.320 --> 00:12:03.990
If you do have them, you can go to pub spec, dot yaml and simply increase that minimum SDK version.

158
00:12:03.990 --> 00:12:09.120
You want here to 2.3 and with that this goes away, it rebuilds.

159
00:12:09.120 --> 00:12:16.650
And now you will see that if I click here, you see also that this input here appears and disappears.

160
00:12:16.650 --> 00:12:17.820
So that's pretty nice.

161
00:12:18.060 --> 00:12:20.010
But you will also notice a bug.

162
00:12:20.040 --> 00:12:25.860
You see, if I'm in logging mode, we got a password entered, but if I click on create new account

163
00:12:25.860 --> 00:12:27.630
that moves to username.

164
00:12:27.900 --> 00:12:33.750
So actually the value in username now switches between the username field and the password field.

165
00:12:34.110 --> 00:12:40.440
And that happens because we dynamically add and remove a text from field and inside of this array ladder

166
00:12:40.440 --> 00:12:46.320
is not able to efficiently differentiate between these fields which are always the same widget.

167
00:12:47.160 --> 00:12:52.890
I all discovered this earlier in the course, and you might remember that keys are a solution here.

168
00:12:52.920 --> 00:12:59.220
Keys allow Flutter to uniquely identify an element if you have similar elements next to each other.

169
00:12:59.640 --> 00:13:05.280
So we can add a key here to all these text firm fields, and we can create a value key which basically

170
00:13:05.280 --> 00:13:08.250
allows us to hardcoded our own identifier.

171
00:13:08.580 --> 00:13:14.280
And here we could add email on the email text firm field and on the username text from field we add

172
00:13:14.280 --> 00:13:20.310
a username value key and on the password field we add a password key.

173
00:13:20.880 --> 00:13:24.360
And with that, you'll see that this bug is no longer there.

174
00:13:24.360 --> 00:13:31.470
If I now add Maximillian here in the username, if I now switch, you see it's gone in login mode and

175
00:13:31.470 --> 00:13:36.780
it's also gone here because we remove the widget in the meantime, but it doesn't jump between password

176
00:13:36.780 --> 00:13:37.470
and username.

177
00:13:37.470 --> 00:13:39.570
So this bug is fixed.

178
00:13:40.310 --> 00:13:47.560
And with that fixed side node, you will also see that, for example, the password and so on persists.

179
00:13:47.570 --> 00:13:51.100
So if I enter this, you will see I can switch and we keep it.

180
00:13:51.110 --> 00:13:59.330
So with that fixed, we now can work on really submitting that data and creating an actual user with

181
00:13:59.330 --> 00:14:00.350
Firebase.

