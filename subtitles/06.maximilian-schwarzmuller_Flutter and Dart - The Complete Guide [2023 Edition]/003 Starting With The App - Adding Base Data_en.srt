1
00:00:02,230 --> 00:00:07,720
Obviously before we can start using the various tools for passing data around and so on, we need to build

2
00:00:07,720 --> 00:00:10,370
a couple of these screens which we need.

3
00:00:10,390 --> 00:00:18,880
So here I am in a blank project again and you'll find this blank setup attached to this lecture here,

4
00:00:19,090 --> 00:00:25,300
it's an empty Flutter project just as the default main.dart file, slightly edited, I changed the text in

5
00:00:25,300 --> 00:00:32,350
the appBar here and right now if I start this application here on my Android emulator again, it will

6
00:00:32,350 --> 00:00:39,680
only have a center text where I say navigation time. I also haven't added any specific theme here,

7
00:00:39,690 --> 00:00:44,460
I'm just going with the default settings of having a blue theme here, though these are all things which

8
00:00:44,460 --> 00:00:45,580
we'll adjust throughout

9
00:00:45,600 --> 00:00:53,540
this module, so we'll primarily of course work on making sure that we have navigation and so on but we'll

10
00:00:53,550 --> 00:00:56,830
also of course make sure that we build a pretty application.

11
00:00:57,390 --> 00:00:59,730
So here's the dummy application,

12
00:00:59,730 --> 00:01:01,070
pretty empty right now

13
00:01:01,260 --> 00:01:08,010
and the thing I want to start with is that starting page which shows us various categories of meals

14
00:01:08,160 --> 00:01:14,520
like Italian, veggie and so on and then the detail page for each category, which then in turn shows us

15
00:01:14,550 --> 00:01:16,620
the recipes for that category,

16
00:01:16,620 --> 00:01:17,730
that's the idea here.

17
00:01:18,770 --> 00:01:25,370
So in the code, I think it makes sense to start with that categories page where we see all the available

18
00:01:25,430 --> 00:01:32,570
categories, where we then can tap on one to see the meals, the dishes for that category.

19
00:01:32,570 --> 00:01:38,620
So it would make sense that this is our first new widget we add and this will not only be a widget,

20
00:01:38,630 --> 00:01:42,020
it will also be a screen of our app.

21
00:01:42,020 --> 00:01:45,850
Now technically, there is absolutely no difference between a screen and a widget,

22
00:01:45,980 --> 00:01:48,260
every widget can be used as a screen,

23
00:01:48,290 --> 00:01:54,490
it only is a term that describes a widget which we use to control an entire page on our app,

24
00:01:54,570 --> 00:01:59,410
like my home page widget which we get out of the box, it controls the entire page

25
00:01:59,420 --> 00:02:07,910
we have here. Typically, any widget that uses scaffold is a page, is a screen widget.

26
00:02:07,940 --> 00:02:14,450
Again, not technically or as a hard rule but since scaffold sets up the configuration for the entire

27
00:02:14,450 --> 00:02:18,140
screen, for the entire page, by adding an appBar and setting a body,

28
00:02:18,140 --> 00:02:21,620
this typically is a widget used in a screen widget.

29
00:02:22,070 --> 00:02:29,630
So let's add a new file which should hold this new widget and I'll name this 

30
00:02:29,660 --> 00:02:30,860
categories_screen.dart.

31
00:02:30,860 --> 00:02:34,430
The _screen part is absolutely not required,

32
00:02:34,430 --> 00:02:39,980
it's a personal preference so that we can quickly see that in this file, we have a widget which we use

33
00:02:39,980 --> 00:02:40,940
as a screen.

34
00:02:40,940 --> 00:02:44,360
It's not a must use but I personally like it a lot.

35
00:02:45,590 --> 00:02:52,670
Now what should go into these categories screen then? Well I'll create a stateless widget in here because

36
00:02:52,670 --> 00:02:59,480
right now, the plan is to only output a list of categories and I'll name this categories screen.

37
00:02:59,510 --> 00:03:04,670
So that's the name of my widget here, again to make it really clear that this widget is not getting used

38
00:03:04,730 --> 00:03:09,920
as part of another widget but really to control the entire content of a screen,

39
00:03:09,920 --> 00:03:15,710
so the entire content on our device here in this app.

40
00:03:15,800 --> 00:03:21,680
Now as always when we create a widget, we have to import flutter/material.dart to get access to the stateless

41
00:03:21,690 --> 00:03:25,430
widget, the BuildContext, the container widget class and so on

42
00:03:25,610 --> 00:03:33,620
and now the question of course is what do we return in this CategoriesScreen widget. Well the idea here

43
00:03:33,620 --> 00:03:38,250
is to return a grid with all our categories.

44
00:03:38,390 --> 00:03:45,020
So a grid is basically like a list but the difference is that in a grid, we have multiple items sit

45
00:03:45,230 --> 00:03:46,180
next to each other,

46
00:03:46,180 --> 00:03:53,840
so side by side instead of just from top to bottom above each other. We can simply build a grid in Flutter

47
00:03:53,930 --> 00:03:55,680
with the GridView.

48
00:03:55,850 --> 00:04:03,190
So we have the ListView for a simple list where we have no items side by side and the GridView

49
00:04:03,240 --> 00:04:08,300
if we want to have items side by side. Now just as to the ListView,

50
00:04:08,310 --> 00:04:09,210
you can pass

51
00:04:09,210 --> 00:04:10,020
children

52
00:04:10,110 --> 00:04:12,110
and by the way just as the ListView,

53
00:04:12,150 --> 00:04:19,010
the GridView also has a builder mode which you can use if you want to build a dynamic amount of items,

54
00:04:19,019 --> 00:04:25,020
if you don't know in advance how many items you'll have or if it's a very long grid and therefore, you

55
00:04:25,020 --> 00:04:31,320
want that performance optimization where only items that are on the screen are getting rendered.

56
00:04:31,320 --> 00:04:37,170
For our purposes here however, we can definitely use the GridView with a fixed amount of children because

57
00:04:37,170 --> 00:04:39,100
we'll not have that many categories,

58
00:04:39,160 --> 00:04:45,080
they'll also not change dynamically and hence we also should have no performance problems.

59
00:04:45,230 --> 00:04:52,280
Now I'll take care about the children here and the category items we're going to render in a second,

60
00:04:52,280 --> 00:04:57,170
let's first focus on setting up the general look and structure of this grid and we do that with another

61
00:04:57,230 --> 00:05:04,310
argument we have to pass, which also is mentioned here in this warning, we have to pass the gridDelegate

62
00:05:04,550 --> 00:05:11,510
argument or parameter. So gridDelegate is another named argument we have to provide and the value for this

63
00:05:11,630 --> 00:05:13,120
looks really strange,

64
00:05:13,160 --> 00:05:14,510
it's a

65
00:05:14,510 --> 00:05:24,610
SliverGridDelegateWithMaxCrossAxisExtent. That is a horribly long name,

66
00:05:24,800 --> 00:05:32,150
what does that do however? Now slivers in Flutter are really just scrollable areas on the screen and

67
00:05:32,150 --> 00:05:37,130
of course, our grid just like the ListView, is scrollable as a default.

68
00:05:37,130 --> 00:05:40,310
Grid delegate, that simply means that for the grid,

69
00:05:40,310 --> 00:05:47,240
this takes care about structuring, layouting the grid, so this task of providing a layout is delegated away

70
00:05:47,360 --> 00:05:53,720
to this class here so to say. Well and WithMaxCrossAxisExtent simply means that this is a

71
00:05:53,720 --> 00:06:00,980
preconfigured class which allows us to define a maximum width for each grid item and then it will automatically

72
00:06:00,980 --> 00:06:07,200
create as many columns as we can fit items with that provided width next to each other.

73
00:06:07,250 --> 00:06:13,940
So therefore here, we pass a MaxCrossAxisExtent, so the maximum extent or width of the tiles, so of

74
00:06:13,940 --> 00:06:14,900
the grid items

75
00:06:14,900 --> 00:06:21,020
and here I'll use 200 pixels and now it really depends on the device size how many columns we'll get

76
00:06:21,020 --> 00:06:24,880
in that grid. If we have a device with 300 pixels width,

77
00:06:24,950 --> 00:06:31,940
then we'll only have one item per row and hence it will look like a list. If we have a device with 500

78
00:06:31,970 --> 00:06:32,780
pixels width,

79
00:06:33,020 --> 00:06:35,630
well then we'll have two items sit side by side.

80
00:06:36,740 --> 00:06:39,460
Besides this MaxCrossAxisExtent,

81
00:06:39,470 --> 00:06:47,000
we can also define a child aspect ratio to define how the items should be sized regarding their height

82
00:06:47,030 --> 00:06:48,560
and width relation

83
00:06:48,590 --> 00:06:51,860
and here I want to have a 3 by 2 relation,

84
00:06:51,860 --> 00:06:57,650
so of course you could just pass 1.5 but this expresses my extent way clearer.

85
00:06:57,650 --> 00:07:04,970
So for 200 width, I want to have 300 height in the end and you can add some spacing, some

86
00:07:05,060 --> 00:07:11,270
crossAxisSpacing of 20 and some mainAxisSpacing of 20 which simply means how much distance is between

87
00:07:11,270 --> 00:07:14,300
our columns and rows in that grid.

88
00:07:14,330 --> 00:07:19,350
So with that, we are designing the look of our grid,

89
00:07:19,380 --> 00:07:25,490
now we have to provide some children here and that of course will be our categories. For that,

90
00:07:25,500 --> 00:07:30,450
I'll give you some dummy data but first of all, I want to define how a category should look like.

91
00:07:30,510 --> 00:07:35,500
So now, we'll add a definition of how the data we work with in this app will look like

92
00:07:35,520 --> 00:07:37,010
and we did this earlier,

93
00:07:37,110 --> 00:07:42,960
if you remember in an earlier course section, for the transaction. There we provided a so-called model

94
00:07:43,020 --> 00:07:44,910
and we'll do the exact same here.

95
00:07:44,940 --> 00:07:50,880
I'll add a new folder, models and in there, I'll add my category.dart file,

96
00:07:50,940 --> 00:07:58,600
so there I will define how a category looks like in this application. In the category.dart file,

97
00:07:58,600 --> 00:08:03,850
I'll create a class named category and this will now not be a widget, so I don't extend stateless or

98
00:08:03,850 --> 00:08:04,670
stateful widget,

99
00:08:04,780 --> 00:08:08,430
it'll just be a normal Dart class which I can instantiate.

100
00:08:08,560 --> 00:08:16,060
Now how should a category look like? Each category, each category item should have an ID which is a

101
00:08:16,060 --> 00:08:18,670
string, so a unique identifier.

102
00:08:18,670 --> 00:08:25,540
I want to have a title, so the name of the category like Asian or Italian and then also a color which

103
00:08:25,540 --> 00:08:32,929
will be used as a background color. Now just as we did it before in this course as well, I'll provide a

104
00:08:32,929 --> 00:08:34,700
constructor, category

105
00:08:34,700 --> 00:08:35,000
here,

106
00:08:37,809 --> 00:08:45,340
where we can pass data for all these different properties and color is a type that's not baked into

107
00:08:45,340 --> 00:08:46,240
Dart, instead

108
00:08:46,240 --> 00:08:47,710
this is provided by Flutter,

109
00:08:47,830 --> 00:08:51,370
so we have to import material.dart from Flutter.

110
00:08:51,370 --> 00:08:56,230
Now in the constructor here, I'll use named arguments but of course you could use positional arguments

111
00:08:56,260 --> 00:08:57,430
as well

112
00:08:57,430 --> 00:09:00,170
and then here, I'll expect an ID,

113
00:09:00,610 --> 00:09:08,740
I'll expect a title and I also expect to get a color, though for the color, I'll provide a default of colors

114
00:09:08,830 --> 00:09:09,440
orange,

115
00:09:09,490 --> 00:09:15,400
also to practice this again, this is how you would provide default values for named arguments in case

116
00:09:15,430 --> 00:09:18,520
no value is provided for this named argument.

117
00:09:18,520 --> 00:09:23,320
I want to make sure that we always get an ID and a title though and we can do this by adding @required

118
00:09:23,560 --> 00:09:28,810
which is a decorator provided by Flutter and it is for example included in the material.dart file.

119
00:09:28,930 --> 00:09:34,300
So since we have that import, we get access to this decorator and now we would get a warning or an error

120
00:09:34,540 --> 00:09:38,220
if we tried to create a category without an ID or title.

121
00:09:38,350 --> 00:09:40,890
So this is how a category should look like

122
00:09:40,960 --> 00:09:51,160
and with that defined, I'll add a new file, dummy_data.dart, which you find attached

123
00:09:52,400 --> 00:09:54,850
which you can simply add to your project

124
00:09:54,950 --> 00:10:04,310
and this contains a const variable here, which holds a const and therefore unchangeable list with some

125
00:10:04,310 --> 00:10:07,850
default categories following our model.

126
00:10:07,910 --> 00:10:14,360
Now one thing which I need to do here, I need to import material.dart from the Flutter package so that

127
00:10:14,360 --> 00:10:20,060
colors is available here, should already be part of the attached file though so you will not have to

128
00:10:20,060 --> 00:10:22,880
add this. And now also important,

129
00:10:22,880 --> 00:10:28,130
we're getting an error here because I'm actually creating a const list here which means this can't

130
00:10:28,130 --> 00:10:30,320
change, the values in the list can't change

131
00:10:30,380 --> 00:10:35,050
and this is only accepted if each category object is also immutable.

132
00:10:35,090 --> 00:10:41,060
So if we can't go to a created object and after its creation, change its color to a different value

133
00:10:41,600 --> 00:10:47,380
and therefore we should go back to the model and add const in front of the constructor here and now

134
00:10:47,390 --> 00:10:53,600
this means since all these properties are final, the properties of an object can't be changed after the

135
00:10:53,600 --> 00:11:00,280
object has been created and therefore, we now really have a list where the values will never change.

136
00:11:00,410 --> 00:11:05,840
So that's just some dummy data which I provide right now since we have no server or database where

137
00:11:05,840 --> 00:11:11,870
we could get that data from and you'll find this finished file attached. This file has all the data I

138
00:11:11,870 --> 00:11:15,640
want to load into this categories screen now to render the categories.

