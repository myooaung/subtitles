WEBVTT
1
00:00:02.150 --> 00:00:09.050
So now that we finished that setup, now that we're able to talk to Firebase and we saw that real time

2
00:00:09.050 --> 00:00:15.770
data in action, let's utilize what we learned to not set up this weird listener when we click the add

3
00:00:15.770 --> 00:00:22.310
button, but to instead output our messages here with help of the list view builder.

4
00:00:22.850 --> 00:00:25.830
And that will be super, super easy.

5
00:00:25.850 --> 00:00:33.110
Snapshots gives us a stream, as I mentioned, and a stream is simply a dart object which emits a new

6
00:00:33.110 --> 00:00:38.540
value whenever some data source changes, whenever a data source gives us a new value in the end.

7
00:00:38.960 --> 00:00:46.340
Now that entire stream thing is set up and managed automatically by firebase by that fire store package,

8
00:00:46.340 --> 00:00:48.590
by the Cloud Fire Store package we added.

9
00:00:48.590 --> 00:00:49.850
So that's very convenient.

10
00:00:49.850 --> 00:00:51.620
We don't need to do anything there.

11
00:00:52.520 --> 00:00:53.720
Even better than that.

12
00:00:53.720 --> 00:00:59.270
Flutter has a nice little widget which we can utilize, and that's the stream builder widget here in

13
00:00:59.270 --> 00:01:00.020
the body.

14
00:01:00.020 --> 00:01:05.239
Instead of directly outputting the list you I will output a stream builder widget.

15
00:01:05.450 --> 00:01:08.300
Now again, this comes with Flutter.

16
00:01:08.300 --> 00:01:11.690
It's not part of Firebase and you don't have to add it on your own.

17
00:01:11.690 --> 00:01:21.410
It comes with Flutter to stream builder widget takes two key arguments here on its constructor, a stream

18
00:01:21.410 --> 00:01:24.950
named argument and a builder named argument.

19
00:01:25.280 --> 00:01:29.870
The stream argument, as the name suggests, wants a stream.

20
00:01:30.490 --> 00:01:38.680
So we can grab this code here all the way up to snapshots, including snapshots, but excluding the

21
00:01:38.680 --> 00:01:43.630
listing call, because that listening will be handled by flutter with the stream builder.

22
00:01:43.630 --> 00:01:50.050
So we take that code and cut it from down there and add this as a value for stream.

23
00:01:51.410 --> 00:01:51.890
Now.

24
00:01:51.890 --> 00:01:59.930
The builder then wants a function which takes to build context and which gets that latest snapshot we

25
00:01:59.930 --> 00:02:00.890
get from the stream.

26
00:02:00.890 --> 00:02:04.130
So that latest data snapshot we get from the stream.

27
00:02:04.700 --> 00:02:10.970
So here we have a function that gets the context and this stream snapshot.

28
00:02:13.280 --> 00:02:16.340
And we get a new snapshot whenever the stream changes.

29
00:02:16.340 --> 00:02:24.110
So this builder function is re executed whenever the stream gives us a new value, whenever we get a

30
00:02:24.110 --> 00:02:30.560
new value, this function is re executed and therefore I'll put my list view builder inside of this

31
00:02:30.560 --> 00:02:35.330
function so that the list view is regenerated when I get a new value.

32
00:02:35.480 --> 00:02:40.730
Now with regenerated, I still mean that flutter will not go ahead and update the entire UI.

33
00:02:40.760 --> 00:02:46.670
I just mean that flutter will go ahead and reevaluate the UI and check if something needs to update

34
00:02:46.670 --> 00:02:47.000
there.

35
00:02:47.000 --> 00:02:48.920
So this will be very efficient.

36
00:02:49.220 --> 00:02:56.630
So let's grab this list view builder and return it here inside of this builder function like that.

37
00:02:57.610 --> 00:02:59.050
Now here.

38
00:02:59.230 --> 00:03:03.310
Let's actually close it like this here.

39
00:03:03.580 --> 00:03:08.380
So add this extra parenthesis here, remove it there, however.

40
00:03:08.650 --> 00:03:15.190
And we can also get rid of that code down there and get rid of these two closing parentheses here and

41
00:03:15.220 --> 00:03:16.480
of the semicolon.

42
00:03:17.050 --> 00:03:21.460
Use a comma instead also here and save everything and reformat.

43
00:03:21.460 --> 00:03:23.650
And you should have this code.

44
00:03:26.320 --> 00:03:33.130
So essentially we now add the stream builder connected it to our stream and to find which function should

45
00:03:33.130 --> 00:03:35.740
run whenever this stream gives us a new value.

46
00:03:35.770 --> 00:03:43.780
Now here Streams Snapshot will be our object to get access to that received data and we can now replace

47
00:03:43.780 --> 00:03:50.200
the hardcoded item count here with stream snapshot data, which gives us access to the concrete data

48
00:03:50.200 --> 00:03:51.490
we got from the stream.

49
00:03:51.880 --> 00:03:55.000
Dot documents, dot length.

50
00:03:55.300 --> 00:04:00.970
The data field will have some documents because the data we're working with is our collection.

51
00:04:00.970 --> 00:04:04.570
So we'll have documents and those documents will have a certain length.

52
00:04:05.910 --> 00:04:10.950
And now it is will render as many this works texts as we have documents.

53
00:04:10.950 --> 00:04:17.459
So if we save this now, we see an error down there but nonetheless you see to this works items here

54
00:04:17.459 --> 00:04:24.810
which makes sense because we got two messages now we get an error because that data isn't there right

55
00:04:24.810 --> 00:04:25.890
from the start.

56
00:04:26.070 --> 00:04:32.250
Initially, when the request is sent behind the scenes at the data as received, no data is there.

57
00:04:32.850 --> 00:04:40.230
So actually here we should check on the stream snapshot if our connection state is equal to connection

58
00:04:40.230 --> 00:04:41.730
state waiting.

59
00:04:42.520 --> 00:04:49.390
And Connection State is an object that also comes with Flutter and it has this waiting property or to

60
00:04:49.390 --> 00:04:54.490
be precise, it's a enum, but it has this weighting value which basically tells us that currently we're

61
00:04:54.490 --> 00:05:01.690
still waiting for some data here and we could return a center widget with, let's say, a circular progress

62
00:05:01.690 --> 00:05:02.320
indicator.

63
00:05:02.320 --> 00:05:07.180
Here to show this, whilst we're waiting for data now, we don't get an error.

64
00:05:07.180 --> 00:05:12.760
If we reload this application, we won't really see the indicator because it loads super fast.

65
00:05:12.760 --> 00:05:17.080
But now we do handle that millisecond where no data is there as well.

66
00:05:18.240 --> 00:05:23.100
Now, besides outputting this works, it would of course, be nicer to output the actual data we have

67
00:05:23.100 --> 00:05:23.640
here.

68
00:05:24.400 --> 00:05:26.200
We can get access to that.

69
00:05:26.900 --> 00:05:27.560
Here.

70
00:05:27.560 --> 00:05:30.080
We know how to get access to all documents.

71
00:05:30.080 --> 00:05:36.260
So we'll actually grab that and store that in a new variable here documents.

72
00:05:36.710 --> 00:05:41.840
So that's the documents I get from my stream snapshot and I can use that here.

73
00:05:44.660 --> 00:05:48.560
But I can also use it here to get the actual data that's in that document.

74
00:05:48.590 --> 00:05:53.480
We can access documents for the given index.

75
00:05:53.510 --> 00:06:00.770
Index is provided here by the item builder and then access the text field to get access to the text

76
00:06:00.770 --> 00:06:03.230
that's stored inside of a message.

77
00:06:03.590 --> 00:06:09.170
And if we do that and save that, and you now see the real messages being output here, and that's,

78
00:06:09.170 --> 00:06:16.010
of course, pretty, pretty nice because this now shows us the data we have here on the back end in

79
00:06:16.010 --> 00:06:17.300
our Firebase app.

80
00:06:17.600 --> 00:06:23.720
Let's next see how we can add a new entry, a new document by clicking the plus button.

