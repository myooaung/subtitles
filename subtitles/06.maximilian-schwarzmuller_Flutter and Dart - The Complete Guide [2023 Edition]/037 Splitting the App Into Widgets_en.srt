1
00:00:02,633 --> 00:00:08,766
Now what have we added this ternary expression, we covered a lot of the core fundamentals of both Dart

2
00:00:08,866 --> 00:00:09,766
and Flutter.

3
00:00:09,800 --> 00:00:11,400
Now obviously there's way more to learn,

4
00:00:11,533 --> 00:00:14,766
otherwise there wouldn't be more course content left

5
00:00:14,766 --> 00:00:18,033
but it's an important first step.

6
00:00:18,066 --> 00:00:23,700
This ternary expression down there however could be kind of difficult to read. If you will have a look

7
00:00:23,700 --> 00:00:28,233
at this, it might not be obvious on first side what's going on here,

8
00:00:28,333 --> 00:00:34,300
especially because we have this quite complex column in between and to be honest, it isn't even that

9
00:00:34,300 --> 00:00:35,166
complex.

10
00:00:35,233 --> 00:00:41,466
You can and you will throughout this course have way more complex widget structures than this column here

11
00:00:41,733 --> 00:00:50,766
and what could we do about that to make that more readable? If you want to make your widget tree more

12
00:00:50,833 --> 00:00:52,933
readable and more manageable,

13
00:00:52,966 --> 00:00:59,333
one thing that should always come to your mind is splitting that. You can of course split your widgets

14
00:00:59,333 --> 00:01:00,366
into sub-widgets,

15
00:01:00,366 --> 00:01:03,633
the question always is, should you split it?

16
00:01:03,666 --> 00:01:11,000
Well, let's assume you have a bigger widget with a lot of different nested widgets which you pass in

17
00:01:11,000 --> 00:01:17,133
to each other and so on. Then of course you can always split this into a separate sub-widgets which take

18
00:01:17,133 --> 00:01:20,700
these individual tasks and the question is, should you do that?

19
00:01:20,866 --> 00:01:22,000
Now in general

20
00:01:22,000 --> 00:01:25,233
and that's really something you can memorize, in Flutter,

21
00:01:25,233 --> 00:01:30,500
it's always encouraged to create more than less widgets.

22
00:01:30,500 --> 00:01:36,400
Of course you should not wrap every single built-in widget into your own custom widget and you will

23
00:01:36,400 --> 00:01:40,700
get a feeling for when the right point to split your widgets is there

24
00:01:41,033 --> 00:01:46,866
but overall, it's better to have smaller widgets than large widgets.

25
00:01:46,866 --> 00:01:54,933
It's better to have a readable code than unreadable, really entangled code It's better because it makes

26
00:01:54,933 --> 00:01:58,366
your code easier to manage for you and your fellow developers

27
00:01:58,366 --> 00:02:00,900
but it's also better for performance,

28
00:02:01,000 --> 00:02:03,633
that is something I'll dive in later though.

29
00:02:03,733 --> 00:02:11,200
So in our application which we have here, it might be worth considering putting the column here but also

30
00:02:11,233 --> 00:02:14,166
the center widget into a separate widget.

31
00:02:14,166 --> 00:02:19,100
Now of course, the center widget is not really complex at all and it would be fine to leave it here

32
00:02:19,266 --> 00:02:22,733
but I do plan on adding more content to it.

33
00:02:22,933 --> 00:02:33,166
So therefore, I will add two new widgets here - quiz.dart and result.dart. Now in my

34
00:02:33,200 --> 00:02:43,000
quiz.dart file, I'll create a stateless widget, quiz, where I import the Flutter material.dart file as always

35
00:02:43,700 --> 00:02:50,300
and then we can take this column which we have in the main.dart file, grab it and add it here instead

36
00:02:50,300 --> 00:02:54,200
of that container as a return value for the build method.

37
00:02:54,200 --> 00:02:59,166
Now of course in here, we're referring to the question and to the answer widgets,

38
00:02:59,200 --> 00:03:06,800
so what we should do here is we should import both, we should import question.dart and we should import

39
00:03:06,966 --> 00:03:14,466
./answer.dart to unlock these widgets here in this file and I'm referring to the questions list

40
00:03:14,700 --> 00:03:17,666
and also to the answer question function.

41
00:03:17,700 --> 00:03:22,866
Now of course you could now think that you want to turn quiz into a stateful widget now because

42
00:03:22,866 --> 00:03:26,066
now we have both the question and the answers in here,

43
00:03:26,266 --> 00:03:29,200
so we could manage everything for that in this widget

44
00:03:29,433 --> 00:03:35,233
but please keep in mind that in order to show the result which we want to do in the main.dart file and

45
00:03:35,233 --> 00:03:40,900
not in the quiz.dart file, otherwise we would basically transfer the ternary expression also into the

46
00:03:40,900 --> 00:03:45,900
quiz.dart file, because we need to manage that condition in the main.dart file,

47
00:03:45,966 --> 00:03:48,800
we want to keep our state in here.

48
00:03:48,900 --> 00:03:55,500
So instead what I want to do is here in the main.dart file, instead of importing the question, I import

49
00:03:55,500 --> 00:04:01,933
the quiz.dart file and that allows me to use the quiz widget here if this condition is met,

50
00:04:01,933 --> 00:04:09,000
so often the question mark here in the body and to the quiz widget, we should pass both our questions

51
00:04:09,000 --> 00:04:17,866
list and our answer question function and that of course means that we forward this answer question

52
00:04:17,866 --> 00:04:24,633
function through two levels of widget. We pass it from the MyApp widget in the main.dart file to the

53
00:04:24,633 --> 00:04:30,833
quiz widget and in the quiz widget, we forward it to the answer widget. But it is what it is, it still

54
00:04:30,833 --> 00:04:36,600
is a leaner setup where we manage the state on the highest level that makes sense, where we then also

55
00:04:36,600 --> 00:04:42,766
can still control whether to show the quiz or our result which we'll soon show here.

56
00:04:42,766 --> 00:04:51,033
So that means I want to forward a pointer at answer question to quiz and I also want to forward questions

57
00:04:51,633 --> 00:04:57,966
and as a side note because I forgot this earlier, since questions is now a property of the entire class,

58
00:04:58,333 --> 00:05:05,000
it should of course be _questions to be in line with for example the question index here because

59
00:05:05,000 --> 00:05:08,866
it is a private property that's only available in MyAppState.

60
00:05:08,966 --> 00:05:16,333
So change questions to _questions, change it in all the places where you use it, like here in

61
00:05:16,333 --> 00:05:23,400
the condition and here where you pass it down and now in the quiz widget here, we want to accept

62
00:05:23,500 --> 00:05:31,600
both that function, that answer question function and our questions list here. For that let's add two

63
00:05:31,600 --> 00:05:38,800
final properties here as you learned it, runtime constant values which are initialized when our app starts

64
00:05:38,833 --> 00:05:50,700
but thereafter they don't change and here, we have our list of maps, where each map also has different

65
00:05:50,700 --> 00:05:58,000
values, it holds string keys and object values, so we have these nested generic assignments here. So we

66
00:05:58,000 --> 00:06:04,800
have our list of questions and we also have a function which I'll name

67
00:06:04,833 --> 00:06:09,866
answerQuestion, without an underscore here because this widget is not private,

68
00:06:09,900 --> 00:06:12,600
it should be used from inside other files.

69
00:06:12,600 --> 00:06:15,933
Now, a quick side-note: If you are getting an error

70
00:06:15,966 --> 00:06:19,966
related to "Function" being used here, now or later

71
00:06:20,433 --> 00:06:24,366
simply replace this with "VoidCallback" as I mentioned before

72
00:06:24,400 --> 00:06:27,333
before in the course already.

73
00:06:27,333 --> 00:06:32,333
Here, I'm still using "Function" but if you are getting an error, use "VoidCallback" instead.

74
00:06:32,333 --> 00:06:32,966
it should be used from inside other files.

75
00:06:33,033 --> 00:06:39,000
So here, I then also add a constructor and to mix it up, not because it's required but to mix it up,

76
00:06:39,000 --> 00:06:44,600
I'll use named arguments here, so I'll have my questions list and I have my answer

77
00:06:44,633 --> 00:06:45,733
question

78
00:06:45,800 --> 00:06:47,466
function here.

79
00:06:47,466 --> 00:06:51,000
Now the problem is I also need to know which question we're looking at,

80
00:06:51,300 --> 00:06:56,033
so let's also accept our question index here

81
00:06:56,033 --> 00:07:01,800
which should be an integer and also add this as a named argument here to the quiz widget

82
00:07:01,933 --> 00:07:08,466
and then here I use question index, without the underscore and here, answer question without the underscore

83
00:07:08,500 --> 00:07:10,233
and therefore this should all work

84
00:07:10,333 --> 00:07:17,500
and now in main.dart where we use this quiz widget, we now have to pass these values as named arguments.

85
00:07:17,500 --> 00:07:24,866
I also want to add, before I pass it, I want to add required, @required in front of all these arguments,

86
00:07:25,333 --> 00:07:33,200
@required is a decorator provided by material.dart and it basically tells Flutter that all these

87
00:07:33,200 --> 00:07:37,566
values are required, that we must not omit a single one of them.

88
00:07:37,566 --> 00:07:45,700
So if you tried to create this quiz widget with only one or two or none of these arguments here, we would

89
00:07:45,700 --> 00:07:46,366
get an error.

90
00:07:46,633 --> 00:07:51,300
Now speaking of errors - if you are getting an error with "@required"

91
00:07:51,433 --> 00:07:55,200
as you might be getting it in newer versions of Dart and Flutter

92
00:07:55,200 --> 00:07:58,966
depending on which version you are using when following along here,

93
00:07:59,233 --> 00:08:03,000
simply use just "required" - without the "@".

94
00:08:03,233 --> 00:08:07,000
Then this will work and you'll not get an error with that.

95
00:08:07,466 --> 00:08:09,966
So now of course we have to create that quiz widget,

96
00:08:09,966 --> 00:08:13,100
we do that in MyAppState class in the main.dart file.

97
00:08:13,400 --> 00:08:14,833
Here's the quiz widget

98
00:08:15,000 --> 00:08:18,133
and now let's assign values to our named arguments.

99
00:08:18,133 --> 00:08:25,000
If we place the cursor between the parentheses and we hit control space, we get some IDE support and

100
00:08:25,000 --> 00:08:33,200
for answer question which is my function pointer here, I want to point at _answerQuestion,

101
00:08:33,299 --> 00:08:40,633
so my function I have here in the MyAppState class. At question index, there I want to pass

102
00:08:40,633 --> 00:08:49,233
_questionIndex which is the property managed here in my MyAppState class and at questions, I will

103
00:08:49,233 --> 00:08:52,066
pass _questions.

104
00:08:52,066 --> 00:08:57,700
So now we're creating that quiz widget with that data forwarded to it, might look a bit redundant but

105
00:08:57,700 --> 00:09:02,333
still, I'd say that is now cleaner here than having the column in here.

106
00:09:02,466 --> 00:09:04,900
Let's now also outsource of course our result,

107
00:09:04,966 --> 00:09:12,133
so that center widget. Here in result.dart, I again create a stateless widget which I'll name result and

108
00:09:12,200 --> 00:09:23,100
in there, I import package:flutter/material.dart like before and instead of returning a container, i return

109
00:09:23,233 --> 00:09:25,500
center.

110
00:09:25,533 --> 00:09:28,066
Now we just need to use that result widget here,

111
00:09:28,100 --> 00:09:36,966
so after the colon, we can use result, like that. For that to be available of course, we need to import it

112
00:09:36,966 --> 00:09:39,566
though, you always need to import what you use,

113
00:09:39,566 --> 00:09:45,466
so let's import result.dart. With all of that out of the way, let's restart

114
00:09:45,466 --> 00:09:45,800
the app

115
00:09:45,800 --> 00:09:52,133
by pressing the green refresh button here and let's see whether that works as it should. We see the

116
00:09:52,133 --> 00:09:58,433
questions and answers and I can tap them and if I tap my buttons three times, I see you did it.

117
00:09:58,433 --> 00:10:04,933
Of course that was a lot of work for the same result as before but Flutter is also all about writing

118
00:10:04,933 --> 00:10:07,466
clean code and clean widget trees

119
00:10:07,566 --> 00:10:14,500
and I would argue that this is now easier to read than having that column here in our main.dart file,

120
00:10:14,666 --> 00:10:20,766
especially of course if you add more and more logic in here and splitting your app into widgets is a

121
00:10:20,766 --> 00:10:22,033
good practice.

122
00:10:22,033 --> 00:10:27,766
As I mentioned, don't wrap every single text into your own custom widget but as soon as it gets a bit

123
00:10:27,766 --> 00:10:28,933
more complex,

124
00:10:28,966 --> 00:10:34,800
couple of lines, more logic, then you should strongly consider creating a new widget for that.

