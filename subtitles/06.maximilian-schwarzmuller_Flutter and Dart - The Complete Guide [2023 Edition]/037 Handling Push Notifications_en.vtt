WEBVTT
1
00:00:01.970 --> 00:00:07.880
So we had a look at push notifications and we're able to send these text messages to Android and iOS,

2
00:00:07.880 --> 00:00:09.290
which is, of course, great.

3
00:00:09.530 --> 00:00:12.230
Now let's see what we can do with those messages.

4
00:00:12.260 --> 00:00:20.230
In the last lecture, I added In it's state here in the chat screen to request for notification permissions

5
00:00:20.240 --> 00:00:23.260
with help of that Firebase messaging package.

6
00:00:23.270 --> 00:00:25.060
We need that on iOS.

7
00:00:25.070 --> 00:00:30.540
We don't need it on Android, but we need that on iOS in order to receive and work with messages.

8
00:00:30.560 --> 00:00:34.880
I also called configure on that Firebase messaging object.

9
00:00:35.300 --> 00:00:41.360
Now, of course, we're not limited to just getting messages, tapping on them and opening our app,

10
00:00:41.360 --> 00:00:44.150
even though that already is not too bad.

11
00:00:44.480 --> 00:00:51.740
But configure here actually has a couple of arguments we can pass to it and those will be triggered

12
00:00:51.740 --> 00:00:52.910
upon different events.

13
00:00:52.910 --> 00:00:59.510
And you find more information in the Firebase messaging, flatter package documentation here under receiving

14
00:00:59.510 --> 00:01:02.630
messages, you'll learn when which method is triggered.

15
00:01:03.110 --> 00:01:09.530
You see that on message, which is another argument you can pass in, is always triggered whenever you

16
00:01:09.530 --> 00:01:12.800
receive a message and the app is running in the foreground.

17
00:01:12.800 --> 00:01:17.960
So whenever the app is currently open, for example, if you have an app with different areas, you

18
00:01:17.960 --> 00:01:23.960
could use that to navigate the user from the profile part to the chat part or anything like that.

19
00:01:24.380 --> 00:01:31.340
Now, if the app is in the background or a terminated on resume or on launch is fired now for Android,

20
00:01:31.340 --> 00:01:38.270
it is worth noting that this will only fire if you did add this extra metadata to your outgoing message.

21
00:01:38.270 --> 00:01:40.160
And I will come back to that in a second.

22
00:01:41.300 --> 00:01:42.470
So let's configure that.

23
00:01:42.470 --> 00:01:47.900
Let's add on message to handle messages which we get whilst the app is running in the foreground.

24
00:01:48.020 --> 00:01:49.700
And here we'll get our message.

25
00:01:49.700 --> 00:01:52.220
So let's just print message here.

26
00:01:52.910 --> 00:01:56.600
This message will be a map, by the way, full of different data.

27
00:01:58.330 --> 00:02:04.510
And it actually wants me to add a return statement here because it expects to get back a future.

28
00:02:05.300 --> 00:02:06.800
I can't just return like this.

29
00:02:07.800 --> 00:02:14.790
I will also specify on launch, which should be triggered if the app was terminated and we got a message.

30
00:02:14.970 --> 00:02:18.420
So I'll all to print my message here and return.

31
00:02:19.200 --> 00:02:21.060
And we also got.

32
00:02:21.750 --> 00:02:26.610
On resume where we get our message, which we can print.

33
00:02:27.520 --> 00:02:29.110
And which we can return here.

34
00:02:29.140 --> 00:02:35.500
So these are these three handlers, these free functions you can define that will trigger upon different

35
00:02:35.500 --> 00:02:36.250
events.

36
00:02:36.730 --> 00:02:38.170
Now, let me save this.

37
00:02:39.080 --> 00:02:44.990
And kill the app and restart and rebuild it entirely for my iPhone here so that I have the latest version

38
00:02:44.990 --> 00:02:45.770
on the iPhone.

39
00:02:45.770 --> 00:02:51.230
I want that so that I can also kill it there and still see if that all works correctly.

40
00:02:51.770 --> 00:02:54.500
So let's wait for that rebuild process to finish.

41
00:02:55.790 --> 00:02:57.950
And now with the app running again on iOS.

42
00:02:57.980 --> 00:03:01.340
Here on the right, let's test those different handlers now.

43
00:03:01.340 --> 00:03:06.710
The app is running in the foreground here, so I'll now send another message through this test console,

44
00:03:06.740 --> 00:03:08.930
duplicate this last notification.

45
00:03:09.620 --> 00:03:11.750
Review it and publish it.

46
00:03:12.640 --> 00:03:15.870
And you won't see anything here because the app is in the foreground.

47
00:03:15.880 --> 00:03:18.520
Because of that, I also get no notification here.

48
00:03:19.940 --> 00:03:22.310
But you see information being printed here.

49
00:03:22.310 --> 00:03:24.770
You see that is in the end, my message data.

50
00:03:24.920 --> 00:03:29.180
We get a sender ID and then here we get some information, we get the title.

51
00:03:29.180 --> 00:03:32.120
For example, we got the body here.

52
00:03:33.200 --> 00:03:34.730
Body does this work?

53
00:03:34.730 --> 00:03:37.220
And we could have added more metadata, though.

54
00:03:37.220 --> 00:03:43.070
Which data exactly you can add depends on the platform you're targeting and you find more information

55
00:03:43.070 --> 00:03:48.230
on that and which fields you can set where in the Firebase Cloud Messaging Docs.

56
00:03:48.470 --> 00:03:55.400
But you see, we're getting information about our message here and therefore here and on message, which

57
00:03:55.400 --> 00:03:57.050
was the function being triggered.

58
00:03:57.050 --> 00:04:02.900
You can now do whatever you want to do upon this message, navigate somewhere else and your application,

59
00:04:02.900 --> 00:04:04.940
show some dialogue to the user.

60
00:04:04.940 --> 00:04:08.450
Do whatever you want to do with that incoming message.

61
00:04:09.440 --> 00:04:11.840
So next I will switch to a different app.

62
00:04:12.480 --> 00:04:14.910
I'm switching to the browser here again.

63
00:04:15.480 --> 00:04:21.690
So the app is now not terminated, but it's running in the background and I will do this again, duplicate

64
00:04:21.690 --> 00:04:22.380
this.

65
00:04:23.860 --> 00:04:26.170
Review this and publish.

66
00:04:27.470 --> 00:04:31.280
And back here we see the message coming in here at the top.

67
00:04:31.580 --> 00:04:32.840
So this is all the works.

68
00:04:32.840 --> 00:04:34.400
And if I now.

69
00:04:35.090 --> 00:04:36.090
Tap on it.

70
00:04:36.110 --> 00:04:37.130
It opens my app.

71
00:04:37.130 --> 00:04:42.770
But now and that's the difference to before we again see that data being logged here the same data as

72
00:04:42.770 --> 00:04:43.220
before.

73
00:04:43.220 --> 00:04:48.320
But this is now coming from on resume from this function because that's getting triggered.

74
00:04:48.320 --> 00:04:53.900
If your app is running in the background and the user then taps on an incoming notification and again,

75
00:04:53.900 --> 00:04:58.640
you can now do whatever you want to do in there, navigate the user somewhere else and so on.

76
00:04:58.940 --> 00:05:06.350
Now let's see on launch, which according to the docs here, will run whenever the app was terminated.

77
00:05:07.150 --> 00:05:07.960
So.

78
00:05:09.210 --> 00:05:10.360
Let me do that.

79
00:05:10.380 --> 00:05:12.820
So I killed the application offscreen.

80
00:05:12.840 --> 00:05:14.610
Now I'll duplicate this.

81
00:05:15.400 --> 00:05:18.250
Review this and publish it again.

82
00:05:18.580 --> 00:05:20.710
And we see the message coming in.

83
00:05:20.710 --> 00:05:24.310
And if I tap on it, I restart the app.

84
00:05:25.400 --> 00:05:30.830
And we don't see the console.log here, unfortunately, because by killing the app I well lost the connection.

85
00:05:30.830 --> 00:05:33.140
But you would see it if we still had the connection.

86
00:05:33.140 --> 00:05:35.810
And of course this code executed on the device.

87
00:05:35.810 --> 00:05:40.760
So again, you can do here whatever you want to do, show the user a message, do whatever you want

88
00:05:40.760 --> 00:05:41.240
to do.

89
00:05:41.420 --> 00:05:43.490
So that is iOS.

90
00:05:43.520 --> 00:05:46.040
Now let's test this on Android.

91
00:05:47.630 --> 00:05:53.700
And for this, I'll switch back to the pixel emulator here and now let's restart the app there.

92
00:05:53.720 --> 00:06:00.200
Now, one important note, as mentioned in the Firebase Messaging Docs, so in the docs for our flutter

93
00:06:00.200 --> 00:06:06.560
package we're using, you have to add this extra data to the notification in order to make sure that

94
00:06:06.560 --> 00:06:13.090
your code in, on resume and on launch executes and you get your message information there.

95
00:06:13.100 --> 00:06:18.350
If a user taps the notification with your app being terminated or in background.

96
00:06:18.350 --> 00:06:20.000
So that's something we'll have to do.

97
00:06:20.630 --> 00:06:23.720
Now before we do that, let's see the foreground mode, though.

98
00:06:23.720 --> 00:06:29.270
Here is the app running and I'll clear that so that we can see everything new that's coming in.

99
00:06:29.510 --> 00:06:37.520
And now again, I will go back here and actually it's now enough to just duplicate the Android only

100
00:06:37.520 --> 00:06:42.020
notification because I only want to test it there and I'll publish this.

101
00:06:42.750 --> 00:06:45.720
And I don't see anything here because it's running in the foreground.

102
00:06:45.720 --> 00:06:47.670
That's why we don't get the message here.

103
00:06:48.300 --> 00:06:52.510
But in the log, you see notification data here.

104
00:06:52.530 --> 00:06:59.730
Now, we still get that fatal fail to find callback error, but we clearly did receive this notification

105
00:06:59.730 --> 00:07:02.480
object or this notification map here.

106
00:07:02.490 --> 00:07:09.090
So this on message code clearly executed and you could do whatever you want to do there.

107
00:07:09.090 --> 00:07:10.620
So this would work.

108
00:07:11.100 --> 00:07:18.030
So this most likely is not an error with your code, but some internal problem which still doesn't cause

109
00:07:18.030 --> 00:07:19.170
any problems here.

110
00:07:19.170 --> 00:07:19.950
It still works.

111
00:07:19.950 --> 00:07:25.530
As you can tell, this data here is visible so the code and on message clearly executed.

112
00:07:26.250 --> 00:07:32.310
Now if I would put this app into background mode, so it's still open in the task manager, but it's

113
00:07:32.310 --> 00:07:33.270
in the background.

114
00:07:33.330 --> 00:07:36.090
And I tried sending this again.

115
00:07:39.030 --> 00:07:40.260
If I publish this.

116
00:07:42.480 --> 00:07:45.000
You will see that the message arrived here.

117
00:07:45.540 --> 00:07:47.250
But if I tap it, the app opens.

118
00:07:47.250 --> 00:07:48.900
But we don't see any output here.

119
00:07:49.470 --> 00:07:52.910
So now our code in on resume did not execute.

120
00:07:52.920 --> 00:07:57.840
And that makes sense because we need to add this extra data to our outgoing message.

121
00:07:58.440 --> 00:08:01.430
So let's send another message by duplicating it again.

122
00:08:01.440 --> 00:08:06.030
But now, before reviewing and publishing, let's go to additional options.

123
00:08:06.030 --> 00:08:10.260
And under a key here, add click action.

124
00:08:12.910 --> 00:08:17.470
And as a value add flutter notification click written like this.

125
00:08:18.590 --> 00:08:21.800
And now review this before you publish.

126
00:08:21.800 --> 00:08:23.720
Make sure you're running in the background.

127
00:08:23.720 --> 00:08:25.910
So now publish.

128
00:08:27.090 --> 00:08:28.590
Notification is there.

129
00:08:28.800 --> 00:08:29.880
Click on it.

130
00:08:30.030 --> 00:08:31.410
App opens.

131
00:08:33.510 --> 00:08:40.890
And now if I scroll up a bit, this here is the notification information we got the notification information

132
00:08:40.890 --> 00:08:43.230
we're printing here in on resume.

133
00:08:44.260 --> 00:08:47.290
Now, let's also see what happens if I killed this application.

134
00:08:49.250 --> 00:08:53.750
Of course we won't see anything in the log here, but we should still get the notification and clicking

135
00:08:53.750 --> 00:08:55.880
it should at least open the app.

136
00:08:56.300 --> 00:09:01.610
And I can also tell you just this before of course on launch will execute in that case.

137
00:09:01.610 --> 00:09:05.950
So the notification is here, we click on it, the app restarts.

138
00:09:05.960 --> 00:09:11.750
Now again, as I mentioned, we don't see anything in the log here because our app is disconnected,

139
00:09:11.750 --> 00:09:17.660
but the code in on launch would run and you could do whatever you want to do upon this notification.

140
00:09:18.410 --> 00:09:22.010
So that is push notifications in a nutshell.

141
00:09:22.010 --> 00:09:24.080
That is what you can do with them.

142
00:09:24.170 --> 00:09:26.720
This shows your options as a developer.

143
00:09:26.720 --> 00:09:28.520
This shows you how to set them up.

144
00:09:28.520 --> 00:09:33.980
And of course, there are a lot of details which you can configure, a lot of things you can find,

145
00:09:33.980 --> 00:09:36.950
tune to your likings and to your requirements.

146
00:09:36.950 --> 00:09:42.650
And for that, check out the Firebase Messaging Flutter package documentation here to learn more about

147
00:09:42.650 --> 00:09:43.040
it.

148
00:09:43.460 --> 00:09:50.240
But also make sure you dive, for example, in the Firebase Cloud Messaging documentation here to learn

149
00:09:50.240 --> 00:09:56.570
all about that, because that also shares many useful details about what you can configure, which kind

150
00:09:56.570 --> 00:10:02.270
of messages you can send, which kind of data you can put into messages and much more.

