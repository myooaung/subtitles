1
00:00:02,240 --> 00:00:09,980
So in our application, we want to send HTTP requests and I think a good place to start with that

2
00:00:10,400 --> 00:00:16,760
is actually to allow us to add new products and actually store products where we then click on that

3
00:00:16,760 --> 00:00:17,180
save

4
00:00:17,180 --> 00:00:23,480
icon here, not just locally in memory but actually on a server, so that in the next steps thereafter,

5
00:00:23,720 --> 00:00:27,570
we can start fetching the data from the server, for example for this list

6
00:00:27,590 --> 00:00:32,659
but of course also for our shop, that we can then store the favorite status on the server when we change

7
00:00:32,659 --> 00:00:35,960
it, that we can store our orders on the server

8
00:00:35,960 --> 00:00:42,380
and of course, we also store edits or updates to our products on the server and that when we delete a

9
00:00:42,380 --> 00:00:46,000
product here, we obviously delete it on a server, that would be the plan.

10
00:00:46,010 --> 00:00:53,640
So it all starts with enabling us to add new products and to send HTTP requests in Flutter,

11
00:00:53,690 --> 00:00:59,180
we need a specific package, the HTTP package which you can easily find if you search for Flutter

12
00:00:59,210 --> 00:01:01,690
HTTP or on pub.dev,

13
00:01:01,700 --> 00:01:04,730
you simply search for HTTP there,

14
00:01:04,730 --> 00:01:10,060
this is a package which makes it easy for you to send HTTP requests from inside your Flutter app.

15
00:01:10,400 --> 00:01:14,210
You install it like all other packages, under the installing tab,

16
00:01:14,210 --> 00:01:20,240
you copy that dependencies entry you find here and you add that to your pupspec.yaml file below

17
00:01:20,240 --> 00:01:21,560
your other dependencies

18
00:01:21,690 --> 00:01:26,780
and once you save that file, Flutter should automatically go ahead or the Flutter extension in Visual Studio Code

19
00:01:27,140 --> 00:01:32,600
should automatically go ahead and fetch that package. If it doesn't, then you can go into a terminal and

20
00:01:32,620 --> 00:01:40,180
there, run Flutter packages get. So with the package added to the project and installed,

21
00:01:40,250 --> 00:01:46,280
we can now start sending HTTP requests and with the Firebase back and we want to send them to this

22
00:01:46,280 --> 00:01:53,420
URL or to a URL that's based on that URL and for that, let's first of all understand how we actually

23
00:01:53,420 --> 00:02:00,680
send HTTP requests to such a back-end like this one and I say like this one because it's really representative

24
00:02:00,890 --> 00:02:07,880
of any back-end you could be using. When sending HTTP requests from inside your Flutter app, you

25
00:02:07,880 --> 00:02:14,420
have various options and typically, it always depends on the server you're talking to, the server you're

26
00:02:14,420 --> 00:02:21,170
talking to decides which kind of requests it's able to handle, so you always need to check out the documentation

27
00:02:21,200 --> 00:02:23,150
of the back-end you're working with,

28
00:02:23,150 --> 00:02:27,260
unless you're of course the developer who wrote the code for the back-end, then you should know how it

29
00:02:27,260 --> 00:02:28,180
works.

30
00:02:28,310 --> 00:02:34,300
Typically, you will communicate with a so-called REST API when working with a back-end from your Flutter

31
00:02:34,310 --> 00:02:34,520
app,

32
00:02:34,520 --> 00:02:41,450
that's the most common web server you use for front-end or for front-end applications, so for user

33
00:02:41,450 --> 00:02:47,960
interfaces like Flutter app. It's the most common scenario you'll talk to and for such REST APIs, the

34
00:02:47,970 --> 00:02:54,650
idea is that you send a HTTP request that's made up of an endpoint which in the end is the 

35
00:02:54,650 --> 00:02:56,180
URL and a HTTP

36
00:02:56,180 --> 00:03:02,600
verb to a server and on that server, depending on that combination of URL and verb you

37
00:03:02,600 --> 00:03:05,040
chose, a certain action is executed.

38
00:03:05,150 --> 00:03:08,300
Now you can only use combinations the server knows of course,

39
00:03:08,300 --> 00:03:13,990
that's why you have to read the docs or you write your own web server which accepts certain combinations.

40
00:03:14,180 --> 00:03:17,370
You'll of course see concrete examples throughout this course.

41
00:03:17,450 --> 00:03:22,280
Now as I said, the endpoint is really just the URL you target and for different URLs, different

42
00:03:22,280 --> 00:03:26,590
things could happen, for example with myserver.com/posts,

43
00:03:26,720 --> 00:03:32,750
if you send a request to that, you might want to load all posts or add a new post to the list of posts

44
00:03:33,230 --> 00:03:36,790
and that action is also determined by the HTTP verb

45
00:03:36,860 --> 00:03:42,140
you choose therefore because you can send different kinds of HTTP requests,

46
00:03:42,140 --> 00:03:47,510
the most common request which we all know when we open a page in a browser is a get request. When you

47
00:03:47,510 --> 00:03:48,890
open a page in a browser,

48
00:03:48,890 --> 00:03:53,580
a get request is sent to get the data that should be displayed in the browser.

49
00:03:53,600 --> 00:04:00,110
You can also send such get requests to such RESTful APIs or REST APIs which is a short form and

50
00:04:00,230 --> 00:04:03,020
the idea here always is that this should get you some data,

51
00:04:03,080 --> 00:04:08,450
a single piece of data a list of data, really depends on the server you're working with and the app you're

52
00:04:08,450 --> 00:04:13,240
building but get this not the only HTTP verb you can use.

53
00:04:13,250 --> 00:04:19,100
You can also post data, you can send post requests to a server. If you send a post request,

54
00:04:19,100 --> 00:04:23,670
you typically want to store data, append some data to an existing list of data.

55
00:04:23,720 --> 00:04:27,410
Again, what actually happens is always decided by the server,

56
00:04:27,410 --> 00:04:33,080
it's the server-side code that runs but the convention is when writing such a server, that post requests

57
00:04:33,080 --> 00:04:40,940
to a certain URL are handled in a way that adds data to an existing list or whatever your server, your

58
00:04:40,940 --> 00:04:42,040
application does.

59
00:04:42,080 --> 00:04:47,960
So this adds data and of course with that, I typically mean that this also at some point gets added, gets

60
00:04:47,960 --> 00:04:56,270
written into a database, get on the other hand returns data from a database typically. Now besides adding new

61
00:04:56,270 --> 00:04:56,560
data,

62
00:04:56,560 --> 00:05:01,670
you might also want to update existing data and this can be done with the patch requests which updates

63
00:05:01,670 --> 00:05:03,380
data or as alternative,

64
00:05:03,380 --> 00:05:06,330
you can send a put request which replaces data.

65
00:05:06,350 --> 00:05:12,620
The difference is that patch typically just edits the fields or the pieces of data that changed whereas

66
00:05:12,620 --> 00:05:16,520
put take some new data block and replaces an existing one with it,

67
00:05:16,520 --> 00:05:21,800
again it depends on your web server which type of requests it accepts and what it does in detail then,

68
00:05:21,800 --> 00:05:28,220
the official documentation is always the place to go of course, the official documentation of your

69
00:05:28,220 --> 00:05:28,940
web service

70
00:05:28,940 --> 00:05:34,550
I mean. Delete requests can also be sent and as the name suggests, you typically would choose those

71
00:05:34,550 --> 00:05:36,230
if you want to delete some data,

72
00:05:36,230 --> 00:05:38,470
some resource on the server.

73
00:05:38,630 --> 00:05:41,700
So these are the different kinds of HTTP requests you can send

74
00:05:41,760 --> 00:05:48,200
if your server supports them for the URL, for the endpoint you are sending them to and we'll now work

75
00:05:48,200 --> 00:05:53,630
with these HTTP verbs and also with different endpoints throughout this module.

