1
00:00:02,640 --> 00:00:09,900
So let's work on adding and editing products and for that, we need a new screen which presents all the

2
00:00:09,930 --> 00:00:16,020
text inputs where the user can enter the title, the price, the description and of course then also an imageUrl

3
00:00:16,050 --> 00:00:17,530
and so on.

4
00:00:19,340 --> 00:00:21,890
Hence let's create a new file in the screens folder

5
00:00:21,890 --> 00:00:24,290
and as always, you can name this however you want,

6
00:00:24,470 --> 00:00:31,880
I'll name it edit_product_screen.dart and I'll use that same screen for both editing a product

7
00:00:31,940 --> 00:00:36,230
and for adding a new product because the inputs will be the same

8
00:00:36,440 --> 00:00:42,650
and the only difference will be the data we load and how we load the data to prepopulate these inputs.

9
00:00:42,650 --> 00:00:47,360
So in here, in the edit product screen, we have to create a new widget

10
00:00:47,360 --> 00:00:53,150
and now this will actually be a stateful widget here. Stateful because we'll have to manage all that

11
00:00:53,150 --> 00:00:59,060
user input and that also if you remember that earlier slide I showed you in the course, in the bottom right

12
00:00:59,060 --> 00:00:59,530
corner,

13
00:00:59,630 --> 00:01:04,890
I mentioned form input as a good candidate for a widget only or a local state

14
00:01:04,970 --> 00:01:09,590
and the reason for that of course is that what the user entered is important for this widget because

15
00:01:09,590 --> 00:01:15,590
you want to validate it, you want to temporarily store it there and once the user submits that, presses

16
00:01:15,650 --> 00:01:16,910
some submit button,

17
00:01:17,030 --> 00:01:21,070
you typically want to save that into your app-wide state,

18
00:01:21,110 --> 00:01:28,010
create a new product, sign up a user, whatever you're doing but until that submit button pressing, you

19
00:01:28,010 --> 00:01:34,190
want to only manage that data in your widget because the user might cancel adding this, might close the

20
00:01:34,190 --> 00:01:36,230
app or do anything like that,

21
00:01:36,260 --> 00:01:41,420
so your general app is not affected by the user input until it is really submitted.

22
00:01:41,450 --> 00:01:46,850
So therefore, we want to manage the user input and validate it and so on locally in this widget and hence

23
00:01:46,940 --> 00:01:52,610
a stateful widget is the right solution, instead of using the provider package and a more globally

24
00:01:52,610 --> 00:02:03,980
configured object. The name I'll use here is edit product screen and this, automatically thanks to this

25
00:02:04,310 --> 00:02:08,610
shortcut, got added here as a name for the state object and so on as well

26
00:02:08,720 --> 00:02:14,880
and of course, you know that we then have to import material.dart from the Flutter package.

27
00:02:14,900 --> 00:02:20,210
So now this sets up a stateful widget and now the question is, what do we want to render here in the

28
00:02:20,210 --> 00:02:20,960
build method?

29
00:02:23,170 --> 00:02:30,610
Well, it will still be a standalone page, so it makes sense to then render a scaffold widget here and

30
00:02:30,610 --> 00:02:39,580
on the scaffold widget, we can add an appBar and there, present a title where we say edit product.

31
00:02:39,580 --> 00:02:43,570
You could also show a different title depending on whether you are editing or adding,

32
00:02:43,570 --> 00:02:46,740
you'll soon learn how to find out what's the case

33
00:02:46,960 --> 00:02:51,430
but I think edit product is also a title we could keep for all circumstances.

34
00:02:51,430 --> 00:02:56,500
I don't want to add a drawer or anything like this because my goal is to go to this page by pushing it

35
00:02:56,530 --> 00:03:00,190
so that we have a back button and can simply go back to the previous page,

36
00:03:00,730 --> 00:03:08,160
so the next thing I'll add here is a body and that body should display all the text inputs that allow

37
00:03:08,160 --> 00:03:12,600
the user to enter a title, enter a description and so on.

38
00:03:14,260 --> 00:03:19,990
Now earlier in the course when we worked on that personal expenses planner, we already work with inputs

39
00:03:19,990 --> 00:03:23,440
if you remember. You were able to add new transactions,

40
00:03:23,440 --> 00:03:29,740
we used the text editing controllers and in the end, we rendered some text fields, widgets built into

41
00:03:29,800 --> 00:03:36,100
Flutter which you connect it to our text editing controllers and then these text editing controllers

42
00:03:36,190 --> 00:03:42,850
saved the user input automatically and we could then call submit data, either when a button was pressed

43
00:03:42,910 --> 00:03:46,460
or when the keyboard, the soft keyboard was closed,

44
00:03:46,470 --> 00:03:53,740
to then basically read the values from our controllers here with title controller text. So put in other

45
00:03:53,740 --> 00:03:58,240
words, what we did here is we handled all the user input manually,

46
00:03:58,360 --> 00:04:04,240
we manually created the controllers, connected them to our inputs, got the values from there when the

47
00:04:04,240 --> 00:04:10,630
data was submitted and then we added some basic validation here by simply throwing in an if check where

48
00:04:10,630 --> 00:04:14,650
we checked all the inputs the user entered. For

49
00:04:14,650 --> 00:04:19,540
simple forms, for simple inputs that is fine but it misses a couple of convenience features

50
00:04:19,600 --> 00:04:26,170
you might want to have in more complex forms. Handling the input would be nice if that would be done automatically

51
00:04:26,170 --> 00:04:30,430
and you don't have to assign text editing controllers to all your inputs,

52
00:04:30,430 --> 00:04:33,480
that would definitely be a nice thing.

53
00:04:33,610 --> 00:04:37,300
In addition, this kind of validation is not too good,

54
00:04:37,300 --> 00:04:43,780
it allows us to prevent the submission of this but the downside simply is that we don't really show

55
00:04:43,840 --> 00:04:44,800
error messages.

56
00:04:44,800 --> 00:04:50,980
It would be nice if we could color the text fields which do have problems read, maybe show some error

57
00:04:50,980 --> 00:04:57,310
message as well that gives the user some hints on how to improve the input to make it through the validation,

58
00:04:57,310 --> 00:05:03,040
so in short, this is not the best way of handling more complex input data and we'll now dive into the

59
00:05:03,040 --> 00:05:03,810
best way though.

