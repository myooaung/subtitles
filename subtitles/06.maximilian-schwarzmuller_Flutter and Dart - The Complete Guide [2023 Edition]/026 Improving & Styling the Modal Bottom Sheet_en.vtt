WEBVTT
1
00:00:02.340 --> 00:00:05.040
Our application at the moment has one problem.

2
00:00:05.190 --> 00:00:10.800
When I open that modal sheet and I try to enter something here, you see that this gets cleared, the

3
00:00:10.800 --> 00:00:15.810
title gets cleared as soon as I click into the amount, and if I click into the amount into the title

4
00:00:15.810 --> 00:00:17.190
now the amount gets cleared.

5
00:00:17.460 --> 00:00:19.510
So something's wrong here, by the way.

6
00:00:19.530 --> 00:00:22.680
Of course, our amount is also a bit overlapped by the keyboard.

7
00:00:22.680 --> 00:00:26.550
If we enter something into the title and that's something we'll fix later.

8
00:00:26.580 --> 00:00:30.810
Also, if you would rotate the device into landscape, you wouldn't really be able to work with that.

9
00:00:30.810 --> 00:00:35.370
But let's take care about this later once we learn how to build more responsive user interfaces.

10
00:00:35.490 --> 00:00:41.790
For the moment, let's fix that issue of our data getting lost when we well click into the other fields.

11
00:00:42.150 --> 00:00:43.500
The fix is simple.

12
00:00:43.650 --> 00:00:46.140
You need to change new transaction.

13
00:00:46.140 --> 00:00:51.030
So this widget which renders these inputs from a stateless into a state full widget.

14
00:00:51.060 --> 00:00:56.610
Even though we're not calling that state in here, that internally changes something for Flutter because

15
00:00:56.610 --> 00:01:01.020
the state object in the end is treated differently than a widget object.

16
00:01:01.320 --> 00:01:07.440
It's basically maintained and not rebuilt as often easily, and therefore you should convert new transaction

17
00:01:07.440 --> 00:01:09.180
here to a stateful widget.

18
00:01:09.300 --> 00:01:13.620
And thanks to the refactoring syntax that all is done automatically.

19
00:01:13.620 --> 00:01:22.800
And now if you reload your application with that saved, if you now open that again, now here we can

20
00:01:22.800 --> 00:01:28.800
enter something and now the data is kept and we can add this and see our new transaction here, which

21
00:01:28.800 --> 00:01:30.300
is of course pretty convenient.

22
00:01:30.960 --> 00:01:38.040
Now, just to clarify and make it clear why we need to make this change to a stateful widget, it is

23
00:01:38.040 --> 00:01:40.770
related to what Flutter does internally.

24
00:01:40.800 --> 00:01:44.070
It reevaluates widgets from time to time.

25
00:01:44.070 --> 00:01:50.700
For example, if a parent widget changes and I'll dive deeper into how Flutter evaluates your app and

26
00:01:50.700 --> 00:01:55.010
when something is re-evaluated later in the course, no worries.

27
00:01:55.020 --> 00:01:57.090
But from time to time, Flutter does that.

28
00:01:57.090 --> 00:02:05.760
And for a state less widget, a widget being re-evaluated means that any internally stored data is reset,

29
00:02:05.790 --> 00:02:06.720
is lost.

30
00:02:06.720 --> 00:02:12.960
That's why we lose our user input in a stateless widget because whenever it is re-evaluated by flutter,

31
00:02:12.960 --> 00:02:17.040
for whatever reason we lose the state that is currently stored in there.

32
00:02:17.040 --> 00:02:19.080
We lose our data that's stored in there.

33
00:02:19.080 --> 00:02:26.640
And for a state full widget that's different there we have that separate state object, that state class,

34
00:02:26.640 --> 00:02:32.940
and whilst the widget they are also would be reevaluated by flutter, the state kind of is detached

35
00:02:32.940 --> 00:02:39.420
from this and data stored in that state will not be lost if the widget that belongs to it is reevaluated

36
00:02:39.420 --> 00:02:40.140
by flutter.

37
00:02:40.140 --> 00:02:45.780
So we have a separation of data and the UI you could say, and therefore we can persist data.

38
00:02:45.780 --> 00:02:51.840
And it's not lost when something changes on the screen or when Flutter decides that it wants to reevaluate

39
00:02:51.840 --> 00:02:52.650
that widget.

40
00:02:52.680 --> 00:02:57.510
That's why our data is then persistent, and that's why we need a stateful widget here.

41
00:02:58.230 --> 00:03:04.650
Now internally here in new transaction, there's also one important change we still get at transaction

42
00:03:04.650 --> 00:03:07.530
as an argument here and that's inside of our widget.

43
00:03:07.530 --> 00:03:12.870
Right at transaction is a property in our widget, not in the state object but in the widget.

44
00:03:12.870 --> 00:03:18.060
And it needs to be there because we need to define it or we need to accept it on the constructor of

45
00:03:18.060 --> 00:03:22.650
the widget, not on the constructor of the state, because the state is constructed here with the help

46
00:03:22.650 --> 00:03:25.290
of create state and that's inside of the widget.

47
00:03:25.290 --> 00:03:30.900
So to receive something, some data in the widget from outside, which is the case here, we receive

48
00:03:30.900 --> 00:03:33.810
a pointer at the add new transaction function.

49
00:03:34.200 --> 00:03:36.690
We need to accept it on the constructor of the widget.

50
00:03:36.720 --> 00:03:41.850
The problem is that I want to use this function from inside the state object thereafter and not inside

51
00:03:41.850 --> 00:03:42.420
my widget.

52
00:03:42.420 --> 00:03:44.040
And these are two different classes.

53
00:03:44.040 --> 00:03:44.850
Technically.

54
00:03:45.150 --> 00:03:51.930
Thankfully, Flutter establishes a connection and gives us a special property inside of our state class.

55
00:03:51.960 --> 00:03:57.210
It gives us this widget property and this refactoring step automatically added it.

56
00:03:57.630 --> 00:04:06.330
With Widget Dot, you can access the properties and methods of your widget class inside of your state

57
00:04:06.330 --> 00:04:06.840
class.

58
00:04:06.840 --> 00:04:13.470
So with widget dot add x, I can access to add htc's property, which is this function reference I get

59
00:04:13.470 --> 00:04:15.870
even though I'm technically in a different class.

60
00:04:16.170 --> 00:04:18.060
That's important widget.

61
00:04:18.060 --> 00:04:20.550
That is a special property we haven't seen before.

62
00:04:20.550 --> 00:04:25.140
It has to be named widget and it's only available in your state classes.

63
00:04:25.320 --> 00:04:27.720
It gives you access to the connected widget.

64
00:04:27.720 --> 00:04:34.230
And with that we now also fix that issue of the bottom seed clearing our inputs when we type in there.

65
00:04:34.800 --> 00:04:42.530
Now, when everything we can do is that when we enter a new transaction here, that we actually also

66
00:04:42.540 --> 00:04:47.310
close the bottom sheet as soon as we confirm it, and we don't have to close it manually.

67
00:04:47.430 --> 00:04:55.170
And doing that is pretty straightforward here in submit data, after calling add tax, you can call

68
00:04:55.170 --> 00:05:00.240
navigator off context pop.

69
00:05:00.720 --> 00:05:02.130
Now that's something we haven't seen before.

70
00:05:02.160 --> 00:05:07.350
The navigator is also something I'll have a way closer look at in the navigation section of this course.

71
00:05:07.350 --> 00:05:11.430
It's built into Flutter and it can do a lot of awesome stuff here.

72
00:05:11.430 --> 00:05:18.600
We simply use its pop method to basically close the topmost screen that is displayed, and that is that

73
00:05:18.600 --> 00:05:20.160
modal sheet if it's opened.

74
00:05:20.160 --> 00:05:23.160
So that closes that modal sheet by popping it off.

75
00:05:23.160 --> 00:05:29.910
And more on that and what it does in detail in a later section of context here is required to get access

76
00:05:29.910 --> 00:05:35.130
to the right navigator or to give the navigator some metadata and context here.

77
00:05:35.130 --> 00:05:42.330
Just like widget is a special property which is available class white in your state class here.

78
00:05:42.330 --> 00:05:47.940
Even though you never defined a property named context, it's made available because we extend state.

79
00:05:47.940 --> 00:05:49.470
So it's basically like widget.

80
00:05:49.470 --> 00:05:54.330
It's a special property that is available and that in this case gives you access to the context of your

81
00:05:54.330 --> 00:05:58.500
widget widget, gives you access to the class itself, to its properties and so on.

82
00:05:58.500 --> 00:06:02.100
Context gives you access to the context related to your widget.

83
00:06:02.220 --> 00:06:03.660
More on all of that later.

84
00:06:03.660 --> 00:06:10.800
With that, however, we now add the functionality that we can automatically oops, that we can automatically

85
00:06:10.800 --> 00:06:14.160
close our bottom modal sheet once we're done.

86
00:06:14.340 --> 00:06:22.890
So if I now add my new shoes here, which let's say cost 99.99, now you see that all the clothes demolished

87
00:06:23.190 --> 00:06:24.120
with that.

88
00:06:24.120 --> 00:06:28.710
Let's continue with our app and let's again turn our heads towards styling.

