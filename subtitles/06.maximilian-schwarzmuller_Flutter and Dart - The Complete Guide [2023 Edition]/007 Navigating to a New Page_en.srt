1
00:00:02,200 --> 00:00:07,300
Well as a first step, it would probably make sense to have a new widget and new screen to which we can

2
00:00:07,300 --> 00:00:12,820
navigate because the idea of course is to fully replace the content on this screen with the content

3
00:00:12,820 --> 00:00:17,750
of a brand new screen, the screen that shows us the recipes for that category.

4
00:00:18,130 --> 00:00:23,810
Hence, it's time for a new widget and therefore, a new file and you can name this however you want,

5
00:00:23,890 --> 00:00:32,530
I'll name it category_meals.dart or category_meals_screen to be consistent with my other

6
00:00:32,530 --> 00:00:34,420
file here, the category screen.

7
00:00:34,420 --> 00:00:39,410
So this will be the screen which shows us the meals for a chosen category. In there,

8
00:00:39,420 --> 00:00:46,110
let's add a stateless widget which should have a name of CategoryMealsScreen to basically fit our

9
00:00:46,110 --> 00:00:53,660
file name and as always, import material.dart in there. Now for the moment, to simply see something

10
00:00:53,660 --> 00:01:03,230
and work on that transition, let's just output a centered text here which should display the recipes

11
00:01:03,770 --> 00:01:05,170
for the category 

12
00:01:05,209 --> 00:01:11,570
and we'll learn how to go there and how to pass data like the title of the selected category in a second.

13
00:01:11,570 --> 00:01:13,350
So now we've got this new screen,

14
00:01:13,370 --> 00:01:16,570
how can we reach it from our categories screen?

15
00:01:17,630 --> 00:01:20,060
Well actually there's one more thing we should do here,

16
00:01:20,120 --> 00:01:26,010
we should of course use a scaffold and put the centered widget into the body of the scaffold and also

17
00:01:26,020 --> 00:01:34,830
maybe add an appBar where we can show a title and that title here will be the recipes

18
00:01:34,830 --> 00:01:42,180
but of course maybe, we want to actually soon show the category name here instead of the recipes.

19
00:01:42,330 --> 00:01:46,460
So how can we now go to that category meal screen? In the end,

20
00:01:46,460 --> 00:01:51,600
we want to make sure that in the categories screen, we can tap a category item.

21
00:01:51,600 --> 00:01:57,570
So inside of the category item, we need to be able to tap these items, that I guess makes sense.

22
00:01:58,590 --> 00:02:03,830
To make them tappable, container doesn't have an onTap argument or anything like that

23
00:02:03,840 --> 00:02:10,780
but we can wrap container with a new widget, so let's use the refactoring tool to wrap it with a new widget

24
00:02:10,919 --> 00:02:17,100
and there we could use a GestureDetector because a GestureDetector allows us to add onTap, 

25
00:02:17,100 --> 00:02:22,980
onDoubleTap and many other listeners so that we can execute functions when a user taps or double taps or whatever,

26
00:02:23,280 --> 00:02:24,630
our elements.

27
00:02:24,630 --> 00:02:27,150
But it would be nice to also have some visual feedback,

28
00:02:27,270 --> 00:02:33,540
so instead of a GestureDetector, I'll use an InkWell. InkWell is a widget which I briefly mentioned

29
00:02:33,570 --> 00:02:39,490
earlier in the course, it's basically a GestureDetector which also fires off a ripple effect,

30
00:02:39,570 --> 00:02:44,670
so this Material Design effect you have when you tap something, where you have these waves coming out

31
00:02:44,910 --> 00:02:46,870
of the point where you tapped it.

32
00:02:47,010 --> 00:02:51,740
You can also add onTap here but now you can also configure the ripple effect,

33
00:02:51,840 --> 00:02:55,800
for example you can set the splash color, so the color of these waves

34
00:02:55,800 --> 00:03:00,780
and for that, I'll use my theme color and there, the primary color theme simply by tapping into the

35
00:03:00,780 --> 00:03:10,440
theme with theme of context and also set a border radius, maybe of BorderRadius.circular 15, actually

36
00:03:10,440 --> 00:03:17,490
not maybe but it should match the border radius of your card, of your container, so that these waves nicely

37
00:03:17,670 --> 00:03:19,710
follow the shape of the container.

38
00:03:19,770 --> 00:03:25,500
So the border radius up here for the InkWell should match the border radius down there for the container

39
00:03:25,800 --> 00:03:30,630
and you can simply set a different border radius to see the difference and why you might want to align

40
00:03:30,630 --> 00:03:37,410
them. Well and with that, we just have to make sure that something happens onTap and that something is

41
00:03:37,410 --> 00:03:43,410
of course that we want to go to a different page. How can we do this?

42
00:03:44,280 --> 00:03:47,660
Well we can add a method here, which you can give any name you want,

43
00:03:47,670 --> 00:03:55,490
I'll name it select category and in there, we can now use a tool Flutter gives us to change the page.

44
00:03:55,890 --> 00:04:01,130
So let's hook up onTap here to select category, without parentheses, 

45
00:04:01,140 --> 00:04:06,930
we don't want to call this when this gets parsed but when the user taps here and in select category, we

46
00:04:06,930 --> 00:04:12,570
now use a feature which I also mentioned earlier before but which we only have briefly used and that's

47
00:04:12,570 --> 00:04:19,310
the navigator. The navigator is a class or a navigator

48
00:04:19,320 --> 00:04:25,180
here is a class built into Flutter which helps you with navigating between your screens,

49
00:04:25,180 --> 00:04:30,390
that's the core idea. Like theme or media query,

50
00:04:30,400 --> 00:04:35,380
it needs to be connected to the context because you might remember that context is this object which

51
00:04:35,380 --> 00:04:39,460
has information about this widget and its position in the widget tree

52
00:04:39,460 --> 00:04:43,930
and of course something like that is super important for the navigator to know because it needs to know

53
00:04:43,930 --> 00:04:50,260
what the current screen is so that it can add this page you want to go to as a screen on top of it.

54
00:04:50,410 --> 00:04:57,640
And what do I mean with as a screen on top of it though? In mobile apps and therefore also in Flutter

55
00:04:57,640 --> 00:05:03,190
apps but not just there, when we navigate between pages, like a product and a product page,

56
00:05:03,190 --> 00:05:11,730
we typically do this by managing these pages as a stack of pages. Now what's a stack? A stack basically is

57
00:05:11,730 --> 00:05:12,180
a list

58
00:05:12,180 --> 00:05:18,840
you could say. The idea here simply is that when we go to the product page, we actually add this product

59
00:05:18,840 --> 00:05:20,310
page to the list

60
00:05:20,460 --> 00:05:24,040
and when we go back from it, we remove it from the list

61
00:05:24,240 --> 00:05:31,140
and you can imagine this list as being in a three-dimensional space where you always see the last or

62
00:05:31,140 --> 00:05:33,660
the topmost item of that stack,

63
00:05:33,680 --> 00:05:35,980
so the topmost page is visible.

64
00:05:36,000 --> 00:05:41,700
So if we add the product page on the stack and the products page was already there, the product page

65
00:05:41,700 --> 00:05:46,440
is now visible because it's the latest and therefore the topmost page.

66
00:05:46,590 --> 00:05:50,430
Therefore we also speak of pushing and popping pages,

67
00:05:50,430 --> 00:05:55,020
we push a new page onto the stack so that it's the topmost page

68
00:05:55,020 --> 00:05:59,290
and if we want to go back, we pop it off there. So in our code,

69
00:05:59,290 --> 00:06:04,630
this means that we now use the navigator here to push a new page.

70
00:06:04,630 --> 00:06:08,530
Now before we do that, we need to make sure that we have context available here,

71
00:06:08,530 --> 00:06:14,860
so we should accept it here as an argument and I'll name it ctx here to avoid confusion with

72
00:06:14,860 --> 00:06:16,070
this context.

73
00:06:16,090 --> 00:06:17,500
You wouldn't have to rename it,

74
00:06:17,560 --> 00:06:20,220
it's only there to, as I said, avoid confusion

75
00:06:20,560 --> 00:06:25,710
and since I need the context here, we need to bind onTap to an anonymous function

76
00:06:25,810 --> 00:06:31,660
and now forward the context we get here by Flutter to select category when this anonymous function

77
00:06:31,660 --> 00:06:33,520
is triggered.

78
00:06:33,530 --> 00:06:35,270
So now back to the navigator,

79
00:06:35,300 --> 00:06:41,880
now with the navigator set up and connected to the context, we can use push and pop on it.

80
00:06:41,900 --> 00:06:46,880
Now pop doesn't make sense here because we don't want to remove a page from the stack, instead we want

81
00:06:46,880 --> 00:06:48,460
to add a new one.

82
00:06:48,470 --> 00:06:52,490
Now you have various versions of pushing, you can pushNamed pages,

83
00:06:52,490 --> 00:06:54,920
that's a feature I'll come back to later.

84
00:06:54,920 --> 00:06:57,520
You can also push and replace pages,

85
00:06:57,520 --> 00:07:04,580
that means that instead of adding a page on the stack or on top of the stack, you add it but you remove

86
00:07:04,590 --> 00:07:06,190
the page below it,

87
00:07:06,230 --> 00:07:11,660
so you still only have one page in your list then instead of two and that means that you won't be able

88
00:07:11,660 --> 00:07:18,110
to go back from that new page because you deleted the page you were coming from. We'll see use cases for

89
00:07:18,110 --> 00:07:19,470
this later too.

90
00:07:19,480 --> 00:07:21,950
Here however, I'll push and keep the page

91
00:07:21,950 --> 00:07:23,190
we were on

92
00:07:23,390 --> 00:07:25,600
and now what do we push here though?

93
00:07:25,940 --> 00:07:32,770
You don't push your widget you want to go to, so you don't add your CategoryMealsScreen here,

94
00:07:32,780 --> 00:07:34,880
that's not what you add here,

95
00:07:34,880 --> 00:07:43,670
instead you add a MaterialPageRoute and yes, there also is a CupertinoPageRoute if you want to handle

96
00:07:43,670 --> 00:07:44,210
both.

97
00:07:44,240 --> 00:07:50,710
For now, I'll focus on the MaterialPageRoute, though the Cupertino route will work in the same way. The

98
00:07:50,720 --> 00:07:55,100
MaterialPageRoute is a class but you have to instantiate by adding parentheses,

99
00:07:55,100 --> 00:08:00,170
so by calling its constructor and of course it's available because we have that flutter/material.dart

100
00:08:00,200 --> 00:08:01,910
import at the top.

101
00:08:01,910 --> 00:08:08,330
Now as you see, we can configure four things here, important for us is the builder which defines which

102
00:08:08,480 --> 00:08:12,570
widget should be built with the help of MaterialPageRoute.

103
00:08:12,740 --> 00:08:18,560
We need MaterialPageRoute as a wrapper so to say, to handle things like the animation from the old

104
00:08:18,560 --> 00:08:25,250
page to the new page and so on. Full screen dialog is a boolean which you can set to control whether

105
00:08:25,250 --> 00:08:31,940
you want to have that default animation where the new page kind of slides in or if it should basically

106
00:08:31,940 --> 00:08:38,740
be a full screen overlay rather and settings will become important later, we can ignore it for now,

107
00:08:38,750 --> 00:08:41,980
same is true for maintain state, we don't need that at the moment.

108
00:08:42,200 --> 00:08:47,780
So let's add a builder and the builder here gets a context passed in automatically because again the

109
00:08:47,780 --> 00:08:55,030
function you would provide for builder here is now executed by Flutter and here, I'll name the context

110
00:08:55,030 --> 00:08:59,620
just c or actually use an underscore since I won't need it

111
00:08:59,620 --> 00:09:04,340
and now in here, we have to return the widget which should be used as a new page now

112
00:09:04,660 --> 00:09:09,820
and here, the idea of course is to return our CategoryMealsScreen.

113
00:09:09,820 --> 00:09:16,120
So for that, we now need to import it with a relative import path here from our 

114
00:09:16,150 --> 00:09:18,100
category_meals_screen.dart file

115
00:09:18,250 --> 00:09:28,480
and of course we instantiate it here. So with this, we are creating our new screen as part of this

116
00:09:28,480 --> 00:09:29,240
MaterialPageRoute

117
00:09:29,260 --> 00:09:33,010
and with the help of push on a navigator, we should be able to go there.

118
00:09:33,010 --> 00:09:38,320
So with that, let's do a full refresh here with the green arrow and go back to our application,

119
00:09:38,320 --> 00:09:41,850
back here in our application, click a category.

120
00:09:42,280 --> 00:09:47,860
Now what you see is that you now get this transition to this recipes page, of course to the same page

121
00:09:47,860 --> 00:09:49,960
for all categories but still

122
00:09:49,960 --> 00:09:52,390
and you automatically get a back button up there

123
00:09:52,510 --> 00:09:56,260
and of course on Android devices, you can always use this back button.

124
00:09:56,260 --> 00:10:01,540
So that's now of course really nice because now we can switch to a brand new page and we automatically

125
00:10:01,540 --> 00:10:07,810
got this back functionality managed by Flutter so that we can also go back to the categories page here.

