1
00:00:01,983 --> 00:00:04,837
There can be times when there are many different paths through a

2
00:00:04,837 --> 00:00:07,193
section of code that need to be covered; however,

3
00:00:07,193 --> 00:00:11,056
the setup for running through each of those paths is largely similar.

4
00:00:11,056 --> 00:00:15,222
In this case, using parameterized tests can be very beneficial.

5
00:00:15,222 --> 00:00:19,368
Without using parameterized tests, a test file could quickly become unwieldy,

6
00:00:19,368 --> 00:00:22,671
copying and pasting test cases over and over again to

7
00:00:22,671 --> 00:00:24,346
run essentially the same scenario.

8
00:00:24,346 --> 00:00:27,980
If there are enough scenarios, the class can become difficult to read.

9
00:00:27,980 --> 00:00:29,659
And if the code is refactored,

10
00:00:29,659 --> 00:00:33,359
you might have to spend a lot of time updating all the tests.

11
00:00:33,359 --> 00:00:35,285
Parameterized tests improve upon this process by

12
00:00:35,285 --> 00:00:40,981
being able to use the same test case, but using different test data each time.

13
00:00:40,981 --> 00:00:45,864
JUnit 5 has made some updates from JUnit 4 as to how parameterized tests work.

14
00:00:45,864 --> 00:00:48,458
In this example, the method source is being used,

15
00:00:48,458 --> 00:00:52,400
though there are several other options as well,

16
00:00:52,400 --> 00:00:54,863
like ValueSource, EnumSource, CvsSource,

17
00:00:54,863 --> 00:00:55,641
among many others.

18
00:00:55,641 --> 00:00:56,419
In our demo,

19
00:00:56,419 --> 00:01:05,000
we're going to use a parameterized test for checking code that handles the check-in and check-out date for a booking.

