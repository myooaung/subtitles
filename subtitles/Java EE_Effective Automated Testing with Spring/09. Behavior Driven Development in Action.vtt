WEBVTT
1
00:00:02.614 --> 00:00:03.318
In this demo,

2
00:00:03.318 --> 00:00:05.429
we're going to take a quick look at behavior-driven

3
00:00:05.429 --> 00:00:08.586
development in action by walking through the scenario I

4
00:00:08.586 --> 00:00:11.455
mentioned in the previous section.

5
00:00:11.455 --> 00:00:13.262
Unlike all the other tests we have written,

6
00:00:13.262 --> 00:00:16.391
which are located within the application they are testing,

7
00:00:16.391 --> 00:00:17.727
for acceptance tests,

8
00:00:17.727 --> 00:00:22.018
we will actually locate them in their own separate

9
00:00:22.018 --> 00:00:23.448
project called acceptance-tests.

10
00:00:23.448 --> 00:00:26.931
This is because these tests will span multiple applications,

11
00:00:26.931 --> 00:00:32.003
so it wouldn't make sense to locate these tests in any individual application.

12
00:00:32.003 --> 00:00:38.866
In a POM file, we must add the dependencies cucumber-spring and cucumber-junit.

13
00:00:38.866 --> 00:00:42.088
Next, we need to write out the feature file.

14
00:00:42.088 --> 00:00:45.440
I created one already called Room_Booking.

15
00:00:45.440 --> 00:00:47.107
feature, which, as mentioned,

16
00:00:47.107 --> 00:00:49.582
covers the scenario I talked about in a previous

17
00:00:49.582 --> 00:00:52.309
section of a user booking a room.

18
00:00:52.309 --> 00:00:56.473
To have Cucumber generate code based off this feature file,

19
00:00:56.473 --> 00:01:00.720
we simply need to add the create RunCukesTest class,

20
00:01:00.720 --> 00:01:07.647
and add the RunWith Cucumber annotation and CucumberOptions annotation.

21
00:01:07.647 --> 00:01:09.592
As we have not implemented this feature,

22
00:01:09.592 --> 00:01:10.981
when we run this test,

23
00:01:10.981 --> 00:01:14.305
cucumber will print the stubs of these tests in the console.

24
00:01:14.305 --> 00:01:20.074
In ExistingCustomerBooksRoom, I've already begun implementing these tests.

25
00:01:20.074 --> 00:01:26.294
If I run the RunCukesTest class again, it will instead execute these tests.

26
00:01:26.294 --> 00:01:30.378
These tests fail because the services currently are not running.

27
00:01:30.378 --> 00:01:35.036
Starting up the services and running the tests again, the tests begin to pass.

28
00:01:35.036 --> 00:01:38.552
Adding in the code for the When test will start to exercise

29
00:01:38.552 --> 00:01:41.088
the room and booking services as well.

30
00:01:41.088 --> 00:01:44.985
One big difference from acceptance testing from other types of

31
00:01:44.985 --> 00:01:48.982
automated testing is whereas other automated tests seek to be

32
00:01:48.982 --> 00:01:51.032
highly isolated from other tests,

33
00:01:51.032 --> 00:01:55.138
allowing them to be run in any order and over and over again without issue,

34
00:01:55.138 --> 00:01:59.554
acceptance tests can and often will share state between tests.

35
00:01:59.554 --> 00:02:02.991
In the Given, I am retrieving an existing user.

36
00:02:02.991 --> 00:02:06.894
In the When, I am using that user when I'm creating a new booking.

37
00:02:06.894 --> 00:02:12.602
Finally here in the Then, I'm looking up the booking to confirm it was created.

38
00:02:12.602 --> 00:02:14.844
Great, all these tests are passing.

39
00:02:14.844 --> 00:02:18.635
Acceptance testing often goes hand in hand with end-to-end testing.

40
00:02:18.635 --> 00:02:22.088
While when used in BDD acceptance testing can make up an

41
00:02:22.088 --> 00:02:23.801
intimate part of the development process,

42
00:02:23.801 --> 00:02:26.821
acceptance testing appropriately sits as the capstone

43
00:02:26.821 --> 00:02:29.165
of the automated testing pyramid,

44
00:02:29.165 --> 00:02:33.609
as acceptance tests may be covering the entire system.

45
00:02:33.609 --> 00:02:37.472
In this example, we have completed just one scenario in our room booking feature,

46
00:02:37.472 --> 00:02:39.803
but there are many more such scenarios,

47
00:02:39.803 --> 00:02:43.609
such as a customer attempting to book an already occupied room,

48
00:02:43.609 --> 00:02:46.297
or a customer wanting to cancel a booking.

49
00:02:46.297 --> 00:02:48.585
There are of course others as well.

50
00:02:48.585 --> 00:02:52.868
BDD can be a very useful practice when developing an application.

51
00:02:52.868 --> 00:02:56.539
It serves as a guide for driving the development of an application,

52
00:02:56.539 --> 00:02:59.951
also having all the features in scenarios written out in an easy-to-read

53
00:02:59.951 --> 00:03:03.042
format provides useful documentation for future developers,

54
00:03:03.042 --> 00:03:10.000
as well as reminders of features that still need to be written and scenarios that need to be covered.

