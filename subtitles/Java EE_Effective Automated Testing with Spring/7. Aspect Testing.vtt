WEBVTT
1
00:00:02.382 --> 00:00:05.423
As mentioned when defining component integration testing and its goals,

2
00:00:05.423 --> 00:00:08.209
aspects are a great way of addressing cross-cutting

3
00:00:08.209 --> 00:00:10.453
concerns like logging and security; however,

4
00:00:10.453 --> 00:00:14.497
testing aspects isn't as straightforward as normal unit testing.

5
00:00:14.497 --> 00:00:19.800
In the customer service, I added the logging aspect ControllerLoggingAspect.

6
00:00:19.800 --> 00:00:21.940
The aspect is, as its name suggests,

7
00:00:21.940 --> 00:00:24.079
is for handling logging with the controllers.

8
00:00:24.079 --> 00:00:27.686
We will want to log all the request parameters sent to endpoint,

9
00:00:27.686 --> 00:00:30.831
and the response that endpoint is sending back to the client.

10
00:00:30.831 --> 00:00:32.838
This can provide valuable information when attempting

11
00:00:32.838 --> 00:00:34.656
to debug an issue in production.

12
00:00:34.656 --> 00:00:37.967
And by using the aspect, we keep our controllers neat,

13
00:00:37.967 --> 00:00:41.903
tidy, and focused on display concerns, not logging concerns.

14
00:00:41.903 --> 00:00:46.046
To validate the logging messages being written, I've create a custom appender.

15
00:00:46.046 --> 00:00:49.918
The appender will simply add all logging events to a static list.

16
00:00:49.918 --> 00:00:53.443
I also added the clearEvents method to clear out all

17
00:00:53.443 --> 00:00:55.043
logging statements between tests.

18
00:00:55.043 --> 00:00:55.875
In logback-test,

19
00:00:55.875 --> 00:00:59.798
I've configured a logback to use the TestAppender I just created.

20
00:00:59.798 --> 00:01:05.879
I've created yet another test class for the customer controller,

21
00:01:05.879 --> 00:01:06.772
TestControllerAspectLoggingWeaving.

22
00:01:06.772 --> 00:01:09.500
This class appropriately will be focusing on how

23
00:01:09.500 --> 00:01:11.205
the logging aspect is operating.

24
00:01:11.205 --> 00:01:13.259
We have three concerns we want to test for.

25
00:01:13.259 --> 00:01:17.509
The first is, does aspect properly log a successful request?

26
00:01:17.509 --> 00:01:20.746
However, for these tests, we are primarily going to be concerned with,

27
00:01:20.746 --> 00:01:23.719
at a high level, if logging statements are being written.

28
00:01:23.719 --> 00:01:26.795
This comes back again to the point I've been stressing in this course,

29
00:01:26.795 --> 00:01:30.814
which is, make sure each test class is testing on the thing it is concerned with.

30
00:01:30.814 --> 00:01:33.148
This test class is specifically concerned with,

31
00:01:33.148 --> 00:01:36.374
is the aspect being woven around the controller endpoints,

32
00:01:36.374 --> 00:01:39.264
not if the correct information if being logged.

33
00:01:39.264 --> 00:01:40.594
Like any other class,

34
00:01:40.594 --> 00:01:44.409
ControllerLoggingAspect should have unit tests written for it,

35
00:01:44.409 --> 00:01:47.757
and those tests will verify the content of the logging statement is

36
00:01:47.757 --> 00:01:50.963
correct and will verify edge cases are being covered.

37
00:01:50.963 --> 00:01:53.676
Segregating these responsibilities helps to reduce

38
00:01:53.676 --> 00:01:55.422
maintenance costs for our test.

39
00:01:55.422 --> 00:01:58.095
To make the process of testing this functionality easier,

40
00:01:58.095 --> 00:02:01.529
I will also be using the AssertJ library.

41
00:02:01.529 --> 00:02:03.922
In the module, Documenting Code with Tests,

42
00:02:03.922 --> 00:02:06.998
I go into more depth on the AssertJ library.

43
00:02:06.998 --> 00:02:09.962
Running our happy path test case, testLoggingAspectForSuccessfulRequest,

44
00:02:09.962 --> 00:02:13.376
we get back a green result,

45
00:02:13.376 --> 00:02:16.578
telling us that the logging aspect is logging incoming

46
00:02:16.578 --> 00:02:18.593
requests and successful outgoing responses.

47
00:02:18.593 --> 00:02:20.332
The second concern is,

48
00:02:20.332 --> 00:02:24.342
does the aspect log when an exception is thrown from the controller?

49
00:02:24.342 --> 00:02:28.703
TestLoggingAspectWhenExceptionIsThrown will verify that behavior.

50
00:02:28.703 --> 00:02:31.264
And green being returned tells us that is working.

51
00:02:31.264 --> 00:02:33.556
The final concern is we want to make sure that aspect

52
00:02:33.556 --> 00:02:36.989
is fully covering all the endpoints.

53
00:02:36.989 --> 00:02:38.497
In verifyAllEndPointsAreBeingWeaved,

54
00:02:38.497 --> 00:02:42.043
we will simply call both the endpoints implemented in CustomerController.

55
00:02:42.043 --> 00:02:46.000
And once again, we get green results. Great!

