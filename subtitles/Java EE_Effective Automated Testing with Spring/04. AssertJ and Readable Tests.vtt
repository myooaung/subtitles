WEBVTT
1
00:00:02.405 --> 00:00:07.860
One of my favorite tools, after Mockito, for when running tests is AssertJ.

2
00:00:07.860 --> 00:00:10.592
A colleague introduced me to AssertJ a couple of years ago,

3
00:00:10.592 --> 00:00:13.064
and I have been hooked on it ever since.

4
00:00:13.064 --> 00:00:17.093
I briefly used AssertJ in a couple of other modules in this course,

5
00:00:17.093 --> 00:00:19.855
either directly or through a Spring testing tool.

6
00:00:19.855 --> 00:00:23.241
In this section, I will more formally introduce the tool.

7
00:00:23.241 --> 00:00:26.998
AssertJ seeks to improve on the process of asserting in JUnit tests by

8
00:00:26.998 --> 00:00:30.534
making several readability and usability enhancements.

9
00:00:30.534 --> 00:00:33.260
Let's take a look at how JUnit handles asserting to

10
00:00:33.260 --> 00:00:35.570
understand the difficulties it presents.

11
00:00:35.570 --> 00:00:40.072
Probably the most frequently used JUnit assertion is assertEquals.

12
00:00:40.072 --> 00:00:43.699
I have always found assertEquals a little confusing to work with.

13
00:00:43.699 --> 00:00:44.015
Personally,

14
00:00:44.015 --> 00:00:47.496
I feel it's more intuitive to have the actual value first

15
00:00:47.496 --> 00:00:49.815
and the expected value second; however,

16
00:00:49.815 --> 00:00:53.074
assertEquals actually works by having the expected value

17
00:00:53.074 --> 00:00:54.901
first and the actual value second.

18
00:00:54.901 --> 00:01:00.009
This has caused me much confusion in the past when a test fails and

19
00:01:00.009 --> 00:01:02.880
it gives a backwards assertion failure message.

20
00:01:02.880 --> 00:01:03.203
Unfortunately,

21
00:01:03.203 --> 00:01:06.753
with assertEquals simply taking in a couple of objects as arguments,

22
00:01:06.753 --> 00:01:11.366
there's no easy way to declare which way the comparison is taking place.

23
00:01:11.366 --> 00:01:13.909
Another frustration when using native JUnit

24
00:01:13.909 --> 00:01:16.451
assertions is they have multiple roots.

25
00:01:16.451 --> 00:01:20.971
There is of course assertEquals, but also assertNull,

26
00:01:20.971 --> 00:01:23.133
assertNotNull, assertTrue, and many others.

27
00:01:23.133 --> 00:01:26.909
Since I typically have Eclipse organize my imports on save,

28
00:01:26.909 --> 00:01:30.013
when I wanted to use a different assertion type,

29
00:01:30.013 --> 00:01:34.030
I would often have to update my or JUnit static import.

30
00:01:34.030 --> 00:01:37.049
It's not a major impediment, but it can be annoying.

31
00:01:37.049 --> 00:01:40.475
AssertJ, however, improves upon both of these weaknesses.

32
00:01:40.475 --> 00:01:44.429
In AssertJ, all assertions begin with assertThat.

33
00:01:44.429 --> 00:01:48.989
Immediately, it becomes clear where the actual value we're asserting belongs.

34
00:01:48.989 --> 00:01:53.057
From there, AssertJ provides many different options for testing the actual value.

35
00:01:53.057 --> 00:01:55.561
Of course, there is isEqualTo EXPECTED,

36
00:01:55.561 --> 00:02:00.211
but all the usual JUnit options are provided as well,

37
00:02:00.211 --> 00:02:02.853
such as isNotNull, isEmpty, isNotEqualTo,

38
00:02:02.853 --> 00:02:05.215
isTrue, and many others.

39
00:02:05.215 --> 00:02:10.650
AssertJ also makes the process of validating it against lists easier as well,

40
00:02:10.650 --> 00:02:13.666
which we will take a look at in the demo.

41
00:02:13.666 --> 00:02:14.839
Since learning about AssertJ,

42
00:02:14.839 --> 00:02:17.715
I pretty much use it exclusively when writing tests.

43
00:02:17.715 --> 00:02:27.000
In the following demo, we're going to look at using JUnit 5 and AssertJ, along with some other practices, to make tests that are more readable.

