1
00:00:02,404 --> 00:00:05,818
Most any web application at some point interacts with a database.

2
00:00:05,818 --> 00:00:07,666
Information about a customer, order,

3
00:00:07,666 --> 00:00:11,212
or something else of business value is persisted to the

4
00:00:11,212 --> 00:00:13,590
database so it can be retrieved later.

5
00:00:13,590 --> 00:00:16,858
A company's data is among its most valuable of assets,

6
00:00:16,858 --> 00:00:18,003
and so like anything else,

7
00:00:18,003 --> 00:00:21,889
it is critical to ensure data is being stored and retrieved properly.

8
00:00:21,889 --> 00:00:23,172
As of Spring Boot 1.

9
00:00:23,172 --> 00:00:26,704
4, it's gotten a lot easier with the addition of some new test utilities.

10
00:00:26,704 --> 00:00:27,428
During this demo,

11
00:00:27,428 --> 00:00:32,036
we will take a look at Spring Boot test tools to test the data layer.

12
00:00:32,036 --> 00:00:35,687
We will also verify Spring Data's query builder functionality.

13
00:00:35,687 --> 00:00:36,733
In the Customer class,

14
00:00:36,733 --> 00:00:39,927
we have added some JPA annotations to handle the persistence and

15
00:00:39,927 --> 00:00:42,499
retrieval of customer entities from the database.

16
00:00:42,499 --> 00:00:45,325
We also added an annotation telling the data store to handle

17
00:00:45,325 --> 00:00:48,132
the generation of IDs for the ID field.

18
00:00:48,132 --> 00:00:50,681
This is a very standard JPA implementation.

19
00:00:50,681 --> 00:00:54,855
Over in our repo, we are using Spring Data to handle all the JPA work.

20
00:00:54,855 --> 00:00:57,022
We are extending a standard CrudRepository,

21
00:00:57,022 --> 00:01:01,125
which as the name implies, stands up a repository with create,

22
00:01:01,125 --> 00:01:03,040
read, update, and delete functionality.

23
00:01:03,040 --> 00:01:06,232
We will test some of the read functionality in our test class.

24
00:01:06,232 --> 00:01:08,524
We have also added a look-up call.

25
00:01:08,524 --> 00:01:10,573
Spring Data has a domain-specific language,

26
00:01:10,573 --> 00:01:13,991
so based on this method's signature, findCustomersByFirstNameAndLastName,

27
00:01:13,991 --> 00:01:19,021
Spring Data will automatically build a method that

28
00:01:19,021 --> 00:01:21,181
implements a call to the customers table,

29
00:01:21,181 --> 00:01:24,038
looking up a customer by first name and last name.

30
00:01:24,038 --> 00:01:25,701
In our test class,

31
00:01:25,701 --> 00:01:30,745
we will add the RunWith SpringRunner annotation and the DataJpaTest annotation.

32
00:01:30,745 --> 00:01:34,898
The DataJpaTest annotation was added in Spring Boot 1.

33
00:01:34,898 --> 00:01:36,013
4 as well.

34
00:01:36,013 --> 00:01:40,302
DataJpaTest stands up the data layer of your Spring Boot application.

35
00:01:40,302 --> 00:01:42,832
It also provides a test entityManager,

36
00:01:42,832 --> 00:01:46,436
which makes testing the JPA layer of your application much easier.

37
00:01:46,436 --> 00:01:49,115
Our first test, testFindAllCustomers,

38
00:01:49,115 --> 00:01:54,811
will test Spring Data's findAll functionality of the customer repo.

39
00:01:54,811 --> 00:01:56,011
In the test,

40
00:01:56,011 --> 00:02:00,391
we will use Test entityManager to simulate any customer to a database.

41
00:02:00,391 --> 00:02:04,539
Next, we will actually make a call to the customer repo to find all customers.

42
00:02:04,539 --> 00:02:05,157
For asserting,

43
00:02:05,157 --> 00:02:08,461
we want to ensure the customer we just added is

44
00:02:08,461 --> 00:02:10,221
faithfully returned from the repo.

45
00:02:10,221 --> 00:02:13,496
We also want to make sure an ID is being generated.

46
00:02:13,496 --> 00:02:16,971
Finally, we will want to ensure only one customer is being returned.

47
00:02:16,971 --> 00:02:18,493
Running this test returns green,

48
00:02:18,493 --> 00:02:23,343
so it looks like everything here is behaving as intended.

49
00:02:23,343 --> 00:02:25,155
In testFindCustomersByFNameAndLName,

50
00:02:25,155 --> 00:02:28,618
we will be testing the look-up call we added to customer repo.

51
00:02:28,618 --> 00:02:31,335
This time we will want to add several items to make sure only the

52
00:02:31,335 --> 00:02:34,107
item that matches the look-up value is returned.

53
00:02:34,107 --> 00:02:35,833
The asserting for this test is pretty similar to what

54
00:02:35,833 --> 00:02:37,697
we did with the findAll test case.

55
00:02:37,697 --> 00:02:40,045
Running this test also returns green.

56
00:02:40,045 --> 00:02:42,569
This is only scratching the surface of database testing,

57
00:02:42,569 --> 00:02:49,000
but this should give a good start to some of the tools Spring Boot provides for database testing.

