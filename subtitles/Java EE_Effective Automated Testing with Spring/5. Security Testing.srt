1
00:00:02,475 --> 00:00:06,828
Security testing is a critical aspect to get right in any application.

2
00:00:06,828 --> 00:00:09,496
Even if your application is not handling sensitive

3
00:00:09,496 --> 00:00:11,451
information or is behind a firewall,

4
00:00:11,451 --> 00:00:15,451
you want to ensure that only authorized users are accessing your application,

5
00:00:15,451 --> 00:00:19,399
as this helps add layers to your security infrastructure or

6
00:00:19,399 --> 00:00:22,295
helps protect your applications against denial-of-service

7
00:00:22,295 --> 00:00:25,417
attacks and other malicious behavior.

8
00:00:25,417 --> 00:00:27,931
Spring Security is a fantastic library for implementing

9
00:00:27,931 --> 00:00:30,052
security in your Spring application; however,

10
00:00:30,052 --> 00:00:32,524
security testing isn't the easiest thing to do.

11
00:00:32,524 --> 00:00:33,132
In this section,

12
00:00:33,132 --> 00:00:35,774
we're going to take a look at some of the utilities Spring

13
00:00:35,774 --> 00:00:38,735
provides to make the process of testing your application's

14
00:00:38,735 --> 00:00:41,085
security infrastructure easier.

15
00:00:41,085 --> 00:00:42,340
In the SecurityConfig class,

16
00:00:42,340 --> 00:00:45,782
I more set up a test configuration than anything you would

17
00:00:45,782 --> 00:00:47,649
see in a real production application.

18
00:00:47,649 --> 00:00:52,107
But because of how widely varying and complex security configuration can be,

19
00:00:52,107 --> 00:00:54,865
trying to create a security configuration that mimics

20
00:00:54,865 --> 00:00:57,284
something that would be seen in production wouldn't really

21
00:00:57,284 --> 00:00:59,338
mess with the goals of this course.

22
00:00:59,338 --> 00:01:00,247
In the SecurityConfig,

23
00:01:00,247 --> 00:01:04,255
I have simply set it up to make sure the users hitting the

24
00:01:04,255 --> 00:01:06,124
different endpoints have their proper roles.

25
00:01:06,124 --> 00:01:07,106
In TestCustomerControllerSecurity,

26
00:01:07,106 --> 00:01:11,970
we will verify if our security configuration is behaving as intended,

27
00:01:11,970 --> 00:01:15,377
and verify some of Spring Security's default behaviors

28
00:01:15,377 --> 00:01:17,861
for when security violations occur.

29
00:01:17,861 --> 00:01:21,417
TestCustomerControllerSecurity is set up pretty

30
00:01:21,417 --> 00:01:23,550
similarly to TestCustomerController.

31
00:01:23,550 --> 00:01:26,606
Here, however, we are obviously keeping security turned on,

32
00:01:26,606 --> 00:01:30,357
and we are pulling in the SecurityConfig class.

33
00:01:30,357 --> 00:01:31,783
In FindAllCustomersWithNoUser,

34
00:01:31,783 --> 00:01:39,071
we will validate that Spring Security will return a 401 if no authentication

35
00:01:39,071 --> 00:01:43,035
information is sent in a request to a secured endpoint.

36
00:01:43,035 --> 00:01:45,937
Running the test gives us the expected green.

37
00:01:45,937 --> 00:01:51,022
In testFindAllCustomersWithInvalidUser, a user is being sent,

38
00:01:51,022 --> 00:01:52,677
but does not have any roles.

39
00:01:52,677 --> 00:01:56,594
In this situation, Spring Security should return a 403 forbidden,

40
00:01:56,594 --> 00:01:58,359
instead of a 401.

41
00:01:58,359 --> 00:02:01,028
Again, running this test returns the expected green.

42
00:02:01,028 --> 00:02:02,668
In testFindAllCustomersWithUserWhoDoesntHaveRightRole,

43
00:02:02,668 --> 00:02:08,592
we have a valid user and a valid role in the system; however,

44
00:02:08,592 --> 00:02:12,627
the role being passed in doesn't match the role required for the endpoint.

45
00:02:12,627 --> 00:02:13,479
At this point,

46
00:02:13,479 --> 00:02:15,752
this test is more about validating if security

47
00:02:15,752 --> 00:02:17,004
configuration is set up correctly,

48
00:02:17,004 --> 00:02:20,644
which is important as the only way to test this effectively is by

49
00:02:20,644 --> 00:02:23,477
standing up at least part of the Spring container.

50
00:02:23,477 --> 00:02:24,918
Again, we get a green result.

51
00:02:24,918 --> 00:02:28,645
Finally, we will want to do the happy path and testFindAllCustomersWithValidUser,

52
00:02:28,645 --> 00:02:32,733
passing in a valid user with a valid role,

53
00:02:32,733 --> 00:02:34,625
and we get green here as well.

54
00:02:34,625 --> 00:02:38,504
Like other areas of testing, this only scratches the surface of security testing,

55
00:02:38,504 --> 00:02:45,000
but serves as an introduction of the tools Spring Boot provides for testing in this area.

