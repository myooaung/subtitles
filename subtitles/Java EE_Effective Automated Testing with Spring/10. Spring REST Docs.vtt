WEBVTT
1
00:00:02.379 --> 00:00:06.089
Spring REST Docs is a tool developed by the Spring Pivotal team for

2
00:00:06.089 --> 00:00:09.988
generating REST documentation directly from your automated tests.

3
00:00:09.988 --> 00:00:13.533
Like mentioned in the section on test as documentation,

4
00:00:13.533 --> 00:00:17.354
the advantage of generating documentation from tests is that when a test fails,

5
00:00:17.354 --> 00:00:19.836
so does the documentation generation.

6
00:00:19.836 --> 00:00:23.665
So you can be confident that documentation generated is accurate.

7
00:00:23.665 --> 00:00:24.340
During this demo,

8
00:00:24.340 --> 00:00:27.068
we're going to look at using Spring REST Docs to generate

9
00:00:27.068 --> 00:00:29.465
documentation from an automated test.

10
00:00:29.465 --> 00:00:34.424
As is often the case, our first step is updating our Maven POM file.

11
00:00:34.424 --> 00:00:35.731
In this case,

12
00:00:35.731 --> 00:00:38.345
we need to add the dependencies

13
00:00:38.345 --> 00:00:40.225
spring-restdocs-core and spring-restdocs-mockmvc.

14
00:00:40.225 --> 00:00:44.716
In the TestCustomerController class we wrote in the

15
00:00:44.716 --> 00:00:46.185
module on component integration testing,

16
00:00:46.185 --> 00:00:49.353
we're going to update it to produce some documentation.

17
00:00:49.353 --> 00:00:53.230
The first step is to add the AutoConfigureRestDocs annotation,

18
00:00:53.230 --> 00:00:58.478
and give first docs a directory it's generated documentation to.

19
00:00:58.478 --> 00:00:58.883
Next,

20
00:00:58.883 --> 00:01:02.669
we're going to add some markup to

21
00:01:02.669 --> 00:01:06.185
testSuccessfulFindAllCustomers to produce documentation.

22
00:01:06.185 --> 00:01:10.126
To save some time, I will just copy in a completed example.

23
00:01:10.126 --> 00:01:11.744
Looking through the added code,

24
00:01:11.744 --> 00:01:15.305
the first piece to take note of is the document customers.

25
00:01:15.305 --> 00:01:18.138
Spring REST Docs generates a lot of snippets,

26
00:01:18.138 --> 00:01:20.490
and the identifier, in this case customers,

27
00:01:20.490 --> 00:01:25.373
tells REST Docs where to send the snippet under target generated docs.

28
00:01:25.373 --> 00:01:28.250
Next, I'm declaring the responseFields.

29
00:01:28.250 --> 00:01:29.678
As I'm returning a list,

30
00:01:29.678 --> 00:01:33.072
I am using a square brackets notation followed by the field name.

31
00:01:33.072 --> 00:01:35.025
If I was returning a single element,

32
00:01:35.025 --> 00:01:37.592
I would simple use the name of the field itself.

33
00:01:37.592 --> 00:01:40.623
I can then give a description of the field.

34
00:01:40.623 --> 00:01:44.067
I went ahead and did this for all the fields being returned.

35
00:01:44.067 --> 00:01:47.333
If I run a test, it should pass.

36
00:01:47.333 --> 00:01:48.150
Hmm, failure.

37
00:01:48.150 --> 00:01:50.002
Let's look at what happened.

38
00:01:50.002 --> 00:01:53.707
So this again is showing why REST Docs is helpful.

39
00:01:53.707 --> 00:01:56.617
It will actually validate to make sure that output

40
00:01:56.617 --> 00:01:57.911
matches what you're documenting.

41
00:01:57.911 --> 00:01:58.944
In this case,

42
00:01:58.944 --> 00:02:02.386
I used dateOfLastStay instead of what is actually to be

43
00:02:02.386 --> 00:02:07.354
printed out in the actual JSON of lastStayDate.

44
00:02:07.354 --> 00:02:11.139
If I update that, I run, and my test passes.

45
00:02:11.139 --> 00:02:13.785
If I go check the target generated docs folder,

46
00:02:13.785 --> 00:02:16.876
I can see what REST Docs is producing.

47
00:02:16.876 --> 00:02:20.117
REST Docs produces several different files.

48
00:02:20.117 --> 00:02:24.508
Example request in different notations, the request being sent,

49
00:02:24.508 --> 00:02:26.819
and the response being returned.

50
00:02:26.819 --> 00:02:30.054
REST Docs uses the AsciiDoc markup notation.

51
00:02:30.054 --> 00:02:32.191
Going through how the notation works is beyond the

52
00:02:32.191 --> 00:02:33.521
scope of this module; however,

53
00:02:33.521 --> 00:02:38.350
I provided a link to the AsciiDoc home page at the end of this demo.

54
00:02:38.350 --> 00:02:42.082
These docs aren't in a very useful state right now.

55
00:02:42.082 --> 00:02:43.371
Let's change that.

56
00:02:43.371 --> 00:02:45.948
First, a bit of a sidebar.

57
00:02:45.948 --> 00:02:51.411
Because I am using JUnit 5 in this demo, I must update the surefire plugin.

58
00:02:51.411 --> 00:02:55.957
I need to update the version of the surefire plugin to 2.

59
00:02:55.957 --> 00:02:57.093
19 or later.

60
00:02:57.093 --> 00:03:00.814
I will also need to add some JUnit 5 dependencies.

61
00:03:00.814 --> 00:03:03.404
Also, as of the recording of this module,

62
00:03:03.404 --> 00:03:06.803
the Maven failsafe plugin isn't compatible with JUnit5,

63
00:03:06.803 --> 00:03:09.434
so I've commented that out.

64
00:03:09.434 --> 00:03:11.325
Back to Spring REST Docs,

65
00:03:11.325 --> 00:03:15.818
I have added the asciidoctor plugin and configured it to read the

66
00:03:15.818 --> 00:03:19.932
generated-docs directory where REST docs is sending all of its output.

67
00:03:19.932 --> 00:03:22.974
I'm also telling it to use the index.

68
00:03:22.974 --> 00:03:25.169
adoc for the source document.

69
00:03:25.169 --> 00:03:30.458
By default, the asciidoctor plugin will look under the folder src/main/asciidoc.

70
00:03:30.458 --> 00:03:36.135
Under that directory in the project, I have added the index.

71
00:03:36.135 --> 00:03:37.146
adoc file.

72
00:03:37.146 --> 00:03:37.895
In this file,

73
00:03:37.895 --> 00:03:41.533
I am telling it to display some of the files REST Docs is generating,

74
00:03:41.533 --> 00:03:44.984
specifically the fields being returned from the customer's endpoint,

75
00:03:44.984 --> 00:03:48.602
and an example request and response.

76
00:03:48.602 --> 00:03:52.042
We can see the output if we run the Maven install.

77
00:03:52.042 --> 00:03:53.728
Under target there is index.

78
00:03:53.728 --> 00:03:54.065
html.

79
00:03:54.065 --> 00:03:59.497
If we open it up, we get some nice-looking output from REST Docs.

80
00:03:59.497 --> 00:04:02.777
Let's add another request in response.

81
00:04:02.777 --> 00:04:10.185
Under testSuccessSearchCustomersByFNameLName, I'll again add Rest Docs mockup.

82
00:04:10.185 --> 00:04:15.414
Note I am also now including request parameters, as I'm running a search query.

83
00:04:15.414 --> 00:04:16.081
In index.

84
00:04:16.081 --> 00:04:21.087
adoc, I will tell it to look for the new files REST Docs will generate.

85
00:04:21.087 --> 00:04:23.889
If we run the Maven install and refresh in index.

86
00:04:23.889 --> 00:04:26.285
html, it gives us the updated documentation.

87
00:04:26.285 --> 00:04:30.589
REST Docs is a great way of getting additional value

88
00:04:30.589 --> 00:04:33.303
from the automated tests we write.

89
00:04:33.303 --> 00:04:34.866
Instead of just validating our code,

90
00:04:34.866 --> 00:04:37.856
now there is accurate documentation you can give business

91
00:04:37.856 --> 00:04:47.000
analysts or potential consumers of your service. For additional reading on the AsciiDoc notation, please visit this page.

