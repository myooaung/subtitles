WEBVTT
1
00:00:02.496 --> 00:00:06.497
I've been using the term mock frequently throughout this course,

2
00:00:06.497 --> 00:00:09.107
and will continue to use it later; however,

3
00:00:09.107 --> 00:00:11.064
it's a bit of a misnomer.

4
00:00:11.064 --> 00:00:12.937
The proper term would be test double,

5
00:00:12.937 --> 00:00:15.786
and there are actually several different types of them.

6
00:00:15.786 --> 00:00:20.455
Learning about the different types of test doubles and when to use each of

7
00:00:20.455 --> 00:00:23.959
them can be helpful in making tests easier to write,

8
00:00:23.959 --> 00:00:26.918
maintain, and provide more useful feedback.

9
00:00:26.918 --> 00:00:30.892
The first and simplest type of test double is a dummy.

10
00:00:30.892 --> 00:00:35.044
The primary purpose of a dummy is simply to fulfill a dependency.

11
00:00:35.044 --> 00:00:37.635
Dummies should be used when a dependency they are doubling

12
00:00:37.635 --> 00:00:40.318
for will not be checked for return value,

13
00:00:40.318 --> 00:00:41.401
perform any behavior,

14
00:00:41.401 --> 00:00:45.832
and you do not need to validate the dependency has been called.

15
00:00:45.832 --> 00:00:49.271
Dummies are the KISS, or keep it simple stupid,

16
00:00:49.271 --> 00:00:52.338
principle, exemplified of the test double's world,

17
00:00:52.338 --> 00:00:55.022
though they are not often used.

18
00:00:55.022 --> 00:00:57.957
The next type of test double is the stub.

19
00:00:57.957 --> 00:01:01.950
Stubs return a value that fulfills a condition of the test case.

20
00:01:01.950 --> 00:01:05.600
Stubs are likely going to make up the bulk of your test double experience.

21
00:01:05.600 --> 00:01:08.484
Typically when a test is written for code that interacts with a dependency,

22
00:01:08.484 --> 00:01:11.440
you want to see how that calling code responds to

23
00:01:11.440 --> 00:01:13.772
various return values from the dependency.

24
00:01:13.772 --> 00:01:17.740
Rather, it's a valid value, a null, or an exception.

25
00:01:17.740 --> 00:01:21.218
A stub will return a value regardless of input.

26
00:01:21.218 --> 00:01:22.699
Next, we have spies.

27
00:01:22.699 --> 00:01:26.900
Spies are used for verifying how a dependency is being interacted with.

28
00:01:26.900 --> 00:01:31.175
A common use case for a spy would be to verify that a dependency

29
00:01:31.175 --> 00:01:34.455
that has a void return type has been called,

30
00:01:34.455 --> 00:01:38.420
such as when writing to the database or another service.

31
00:01:38.420 --> 00:01:41.089
So now we have a true mock.

32
00:01:41.089 --> 00:01:44.901
Mock is a bit more advanced form of a spy.

33
00:01:44.901 --> 00:01:48.427
What separates a mock from a spy is the mock itself is asserting

34
00:01:48.427 --> 00:01:50.733
the behavior of if it's been called or not,

35
00:01:50.733 --> 00:01:54.847
and it might go into more depth into validating values passed into it,

36
00:01:54.847 --> 00:01:57.804
or how many times it has been called.

37
00:01:57.804 --> 00:02:01.574
The final type of test double is a fake.

38
00:02:01.574 --> 00:02:03.668
Fakes actually simulate business behavior.

39
00:02:03.668 --> 00:02:07.763
Whereas a stub would always return the same value when called,

40
00:02:07.763 --> 00:02:09.252
a fake simulates behavior.

41
00:02:09.252 --> 00:02:17.000
For example, only retuning a customer when a specific customer ID is passed in. Like dummies, fakes are not often used.

