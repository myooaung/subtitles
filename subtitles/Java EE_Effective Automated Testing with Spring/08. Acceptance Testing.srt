1
00:00:01,972 --> 00:00:04,094
Returning again to the testing pyramid,

2
00:00:04,094 --> 00:00:07,396
acceptance testing sits at the peak of the pyramid.

3
00:00:07,396 --> 00:00:11,435
Acceptance tests are very high-level tests that will typically test your system

4
00:00:11,435 --> 00:00:14,380
from end to end to ensure it meets business requirements,

5
00:00:14,380 --> 00:00:19,495
and even possibly run many of the tests written in the below layers.

6
00:00:19,495 --> 00:00:22,719
So how do we write automated acceptance tests?

7
00:00:22,719 --> 00:00:24,974
Again, let's look at the status quo.

8
00:00:24,974 --> 00:00:29,221
A common pain point when developing a new system or feature is the

9
00:00:29,221 --> 00:00:32,022
communication between a developer and a business analyst.

10
00:00:32,022 --> 00:00:36,535
A developer asks a business analyst a question on how the system should behave.

11
00:00:36,535 --> 00:00:37,528
The business analyst responds,

12
00:00:37,528 --> 00:00:40,075
but it can be difficult to know if the developer

13
00:00:40,075 --> 00:00:43,593
asked a question in the correct way, or understood the response,

14
00:00:43,593 --> 00:00:47,118
or properly coded the business requirements into the system.

15
00:00:47,118 --> 00:00:50,537
The Gherkin syntax is an attempt at addressing this problem by

16
00:00:50,537 --> 00:00:52,959
creating a common language that developers and business

17
00:00:52,959 --> 00:00:55,109
analysts can share to develop a system.

18
00:00:55,109 --> 00:00:59,083
This gives confidence to both the developer and business analyst that the

19
00:00:59,083 --> 00:01:01,891
system being developed is meeting business requirements.

20
00:01:01,891 --> 00:01:06,675
The cornerstone of the Gherkin syntax is the given, when, then.

21
00:01:06,675 --> 00:01:09,070
Given these preconditions to a scenario,

22
00:01:09,070 --> 00:01:11,501
when these actions occur during a scenario,

23
00:01:11,501 --> 00:01:13,858
then the system should produce this result.

24
00:01:13,858 --> 00:01:15,149
We covered given, when,

25
00:01:15,149 --> 00:01:19,485
thens a bit in the previous sections on writing readable tests as a

26
00:01:19,485 --> 00:01:22,331
way of clarifying what is happening within a test.

27
00:01:22,331 --> 00:01:25,419
While these descriptions are accurate within individual tests,

28
00:01:25,419 --> 00:01:28,319
when writing an acceptance test, these given,

29
00:01:28,319 --> 00:01:33,084
when, thens are at a higher level, often covering one or more tests themselves.

30
00:01:33,084 --> 00:01:37,123
A way of utilizing acceptance testing in a development cycle is

31
00:01:37,123 --> 00:01:40,856
through the application of behavior-driven development,

32
00:01:40,856 --> 00:01:42,100
or BDD.

33
00:01:42,100 --> 00:01:45,552
If behavior-driven development sounds like test-driven development,

34
00:01:45,552 --> 00:01:48,086
that's because it follows a very similar pattern,

35
00:01:48,086 --> 00:01:49,670
just at a higher level.

36
00:01:49,670 --> 00:01:53,791
In behavior-driven development, we start with a failing acceptance test.

37
00:01:53,791 --> 00:01:57,430
We then move into a test-driven development phase and begin

38
00:01:57,430 --> 00:02:00,557
writing tests and production code that fulfills the

39
00:02:00,557 --> 00:02:02,530
requirements of the acceptance test.

40
00:02:02,530 --> 00:02:05,407
Once we fulfill all the requirements of the acceptance test,

41
00:02:05,407 --> 00:02:09,819
we start the process over again by writing another failing acceptance test.

42
00:02:09,819 --> 00:02:13,480
This process continues until a feature or system is complete.

43
00:02:13,480 --> 00:02:18,130
To get a more concrete idea of how this process works, let's look at an example.

44
00:02:18,130 --> 00:02:20,389
On the left side, we have our acceptance test.

45
00:02:20,389 --> 00:02:23,167
This acceptance test is going through a scenario of

46
00:02:23,167 --> 00:02:25,487
an existing user booking a room.

47
00:02:25,487 --> 00:02:28,740
Given this user is an existing customer,

48
00:02:28,740 --> 00:02:32,763
Joe User, the user books room 123 for 5 nights.

49
00:02:32,763 --> 00:02:36,365
Then the user should receive a message confirming that

50
00:02:36,365 --> 00:02:39,785
they have booked room 123 for 5 nights.

51
00:02:39,785 --> 00:02:40,463
In BDD,

52
00:02:40,463 --> 00:02:44,194
we would take this acceptance test into the TDD phase and

53
00:02:44,194 --> 00:02:46,367
start writing out tests for each step,

54
00:02:46,367 --> 00:02:49,534
creating tests for looking up a customer by username,

55
00:02:49,534 --> 00:02:53,632
looking up a room by room number, creating a booking,

56
00:02:53,632 --> 00:02:56,448
and then looking up a booking by ID.

57
00:02:56,448 --> 00:03:00,257
If BDD is followed rigorously when developing an application,

58
00:03:00,257 --> 00:03:04,037
then the resulting application should not only be well tested,

59
00:03:04,037 --> 00:03:05,171
but well documented.

60
00:03:05,171 --> 00:03:09,655
Cucumber is a popular polyglot tool for reading in Gherkin syntax,

61
00:03:09,655 --> 00:03:14,549
creating tests, also called glue code, and then running those tests.

62
00:03:14,549 --> 00:03:17,091
And we will explore using Cucumber to write acceptance

63
00:03:17,091 --> 00:03:19,553
tests in the demo following this section.

64
00:03:19,553 --> 00:03:22,256
There are a few things to keep in mind with BDD.

65
00:03:22,256 --> 00:03:25,796
Writing effective acceptance tests, like any type of tests,

66
00:03:25,796 --> 00:03:26,786
is a skill; however,

67
00:03:26,786 --> 00:03:29,980
it is a skill that both developers and business analysts must learn.

68
00:03:29,980 --> 00:03:33,594
And like any skill, it takes training and practice to learn it.

69
00:03:33,594 --> 00:03:34,887
And when writing acceptance tests,

70
00:03:34,887 --> 00:03:38,657
it takes a lot of up-front understanding of a feature being written.

71
00:03:38,657 --> 00:03:41,511
Having a poor understanding might mean a lot of wasted

72
00:03:41,511 --> 00:03:44,735
time writing code and tests that do not actually represent

73
00:03:44,735 --> 00:03:46,393
how the system should behave.

74
00:03:46,393 --> 00:03:49,633
All this is to say, you're not going to get it right the first time; however,

75
00:03:49,633 --> 00:03:53,234
as mentioned before, if BDD is closely followed,

76
00:03:53,234 --> 00:03:55,436
the end result is a system that not only should

77
00:03:55,436 --> 00:03:56,955
follow closely what business expects,

78
00:03:56,955 --> 00:04:05,000
but also a system that has extensive living documentation. Let's take a look at BDD in action.

