WEBVTT
1
00:00:02.326 --> 00:00:04.336
SOLID design principles cover a good portion of not

2
00:00:04.336 --> 00:00:09.159
only how to write well-designed code, but how to write code that's easy to test.

3
00:00:09.159 --> 00:00:12.323
There are, however, a few other design considerations to take in account,

4
00:00:12.323 --> 00:00:15.862
some of which are endemic to Spring.

5
00:00:15.862 --> 00:00:16.900
A common smell I have seen,

6
00:00:16.900 --> 00:00:19.833
and one that I have been guilty of plenty times in the past,

7
00:00:19.833 --> 00:00:21.899
is the usage of field injection.

8
00:00:21.899 --> 00:00:23.473
It's very tempting to use field injection,

9
00:00:23.473 --> 00:00:27.250
as you don't have to gum up your code with constructors; however,

10
00:00:27.250 --> 00:00:30.424
relying upon a field injection is a significant

11
00:00:30.424 --> 00:00:32.045
impediment in writing unit tests.

12
00:00:32.045 --> 00:00:35.402
Field injection means those tests must now rely on the Spring container,

13
00:00:35.402 --> 00:00:36.864
which increases test complexity,

14
00:00:36.864 --> 00:00:39.708
and also significantly slows down test execution speed.

15
00:00:39.708 --> 00:00:43.826
Indeed, Pivotal team members say it best with a quote of theirs,

16
00:00:43.826 --> 00:00:47.387
field injection causes a unit test to break every time.

17
00:00:47.387 --> 00:00:51.377
So if field injection is bad, what should we use instead?

18
00:00:51.377 --> 00:00:55.472
The most common and preferred answer would be to use constructor injection.

19
00:00:55.472 --> 00:00:57.101
Typically outside of model objects,

20
00:00:57.101 --> 00:01:01.013
all of a class's dependencies are required in order for it to function properly,

21
00:01:01.013 --> 00:01:04.343
so writing a constructor that takes in as arguments all the

22
00:01:04.343 --> 00:01:06.299
class's dependencies is a good design choice.

23
00:01:06.299 --> 00:01:09.288
If you're concerned that a class is a large number of arguments,

24
00:01:09.288 --> 00:01:12.023
you might want to review that class and ensure it's

25
00:01:12.023 --> 00:01:14.362
following the single responsibility principle.

26
00:01:14.362 --> 00:01:16.092
Finally, as of Spring 4.

27
00:01:16.092 --> 00:01:16.438
3,

28
00:01:16.438 --> 00:01:19.496
Spring will automatically detect an auto log constructor with

29
00:01:19.496 --> 00:01:22.441
arguments if it's the only constructor in the class.

30
00:01:22.441 --> 00:01:27.150
This is Pivotal's way of subtly nudging you towards making good design choices.

31
00:01:27.150 --> 00:01:28.950
Setter injection is also an option.

32
00:01:28.950 --> 00:01:32.540
I would recommend going this route only when a dependency is optional.

33
00:01:32.540 --> 00:01:35.515
This is likely a rarity if you're writing an application,

34
00:01:35.515 --> 00:01:38.972
but if you're writing a library that'll be used by others,

35
00:01:38.972 --> 00:01:41.521
this might happen from time to time.

36
00:01:41.521 --> 00:01:45.025
For mono classes, it can be good to provide a default constructor.

37
00:01:45.025 --> 00:01:47.455
If you only need an instance of a class to exist,

38
00:01:47.455 --> 00:01:50.145
but will not be expecting its contents within a test,

39
00:01:50.145 --> 00:01:53.494
being able to simply new an instance of the class

40
00:01:53.494 --> 00:01:56.195
decreases the burden of writing a test.

41
00:01:56.195 --> 00:01:58.601
The builder pattern is useful if you want to enforce

42
00:01:58.601 --> 00:02:00.852
constraints at the creation time for a class.

43
00:02:00.852 --> 00:02:02.622
Here we have a name class.

44
00:02:02.622 --> 00:02:05.741
Oftentimes first name and last name would be required,

45
00:02:05.741 --> 00:02:08.053
but middle name typically will not be,

46
00:02:08.053 --> 00:02:12.861
as well as other items common to the name domain like title and suffix.

47
00:02:12.861 --> 00:02:13.067
Additionally,

48
00:02:13.067 --> 00:02:14.925
builders are helpful when a constructor might have a

49
00:02:14.925 --> 00:02:17.032
lot of arguments of the same type.

50
00:02:17.032 --> 00:02:19.249
Again, going back to our name example,

51
00:02:19.249 --> 00:02:22.684
all five fields mentioned would likely be typed as strings.

52
00:02:22.684 --> 00:02:26.520
It could be confusing to the developer to know which argument goes where.

53
00:02:26.520 --> 00:02:32.122
Reading it out it would go title, first name, middle name, last name, suffix.

54
00:02:32.122 --> 00:02:37.851
But by importance it could be last name, first name, middle name, suffix, title.

55
00:02:37.851 --> 00:02:39.772
There could also be issues in which the argument

56
00:02:39.772 --> 00:02:43.530
order of the constructor is changed, which would not cause a compile error,

57
00:02:43.530 --> 00:02:47.145
but could cause subtle and confusing bugs.

58
00:02:47.145 --> 00:02:50.876
A final design consideration is to be wary of the use of static.

59
00:02:50.876 --> 00:02:54.303
It can be tempting at times when a method's behavior does not depend upon state,

60
00:02:54.303 --> 00:02:57.822
like for example when validating an object to declare it static; however,

61
00:02:57.822 --> 00:03:01.264
this should be avoided as the use of static methods can

62
00:03:01.264 --> 00:03:03.428
increase the complexity of your test.

63
00:03:03.428 --> 00:03:06.348
Tests either have to be set up to account for the static method's behavior,

64
00:03:06.348 --> 00:03:16.000
or a tool needs to be used to mock out the static method's behavior, both of which increase the time it takes to write a test and its complexity.

