1
00:00:01,942 --> 00:00:04,455
One testing practice we will be exploring in this

2
00:00:04,455 --> 00:00:07,017
course is test-driven development, or TDD.

3
00:00:07,017 --> 00:00:11,861
TDD is the practice of writing tests to guide development.

4
00:00:11,861 --> 00:00:16,384
When developing a new feature, or when making change to existing code,

5
00:00:16,384 --> 00:00:20,442
the first step in TDD is to design a test that

6
00:00:20,442 --> 00:00:22,652
asserts against a desired outcome.

7
00:00:22,652 --> 00:00:26,271
For example, if you're writing a method to look up a room,

8
00:00:26,271 --> 00:00:30,420
an assertion would be that a room object is returned.

9
00:00:30,420 --> 00:00:33,997
As a code that actually executes this behavior has not yet been written,

10
00:00:33,997 --> 00:00:37,658
the test will fail, or so read.

11
00:00:37,658 --> 00:00:41,794
At this point we would implement the code that would return a room,

12
00:00:41,794 --> 00:00:43,108
and as you're implementing the code,

13
00:00:43,108 --> 00:00:47,243
you will continue the run to test until it turns green.

14
00:00:47,243 --> 00:00:52,325
This is the fundamental tenant of TDD called red/green development.

15
00:00:52,325 --> 00:00:57,896
Write a failing test, implement the feature, get the test to pass.

16
00:00:57,896 --> 00:01:00,841
As new features are added, so are new tests.

17
00:01:00,841 --> 00:01:03,143
When changes are made that causes a break,

18
00:01:03,143 --> 00:01:06,339
the unit tests are there to detect that regression.

19
00:01:06,339 --> 00:01:08,809
The large suite of tests would then allow a

20
00:01:08,809 --> 00:01:12,099
developer to refactor with confidence, knowing regressions will be,

21
00:01:12,099 --> 00:01:14,566
or at least should be, caught.

22
00:01:14,566 --> 00:01:18,190
TDD provides a lot of good guidance when developing a project,

23
00:01:18,190 --> 00:01:21,697
and as tests are being written as the code is being developed,

24
00:01:21,697 --> 00:01:23,624
the application being written should be following many of

25
00:01:23,624 --> 00:01:26,283
the principles of single responsibility,

26
00:01:26,283 --> 00:01:30,855
dependency abstraction, and dependency injection covered in the previous module.

27
00:01:30,855 --> 00:01:33,036
While there are many benefits of the TDD process,

28
00:01:33,036 --> 00:01:34,952
there are a few drawbacks as well,

29
00:01:34,952 --> 00:01:38,778
or at least difficulties that I've experienced when trying to follow it.

30
00:01:38,778 --> 00:01:42,068
Some features might be complex or require patterns that a

31
00:01:42,068 --> 00:01:44,084
developer might not be familiar with.

32
00:01:44,084 --> 00:01:47,624
At that point, it can be difficult to determine what the test should look like.

33
00:01:47,624 --> 00:01:51,609
Arguably, this can mean a developer shouldn't be writing the feature yet.

34
00:01:51,609 --> 00:01:54,381
They could also increase a mental burden on a developer.

35
00:01:54,381 --> 00:01:57,785
Having to think both about the design of a feature and how to

36
00:01:57,785 --> 00:02:00,400
test it could lead to mental fatigue or burnout.

37
00:02:00,400 --> 00:02:03,750
Tests in TDD also have a tendency to be more tightly

38
00:02:03,750 --> 00:02:05,929
coupled to the code they are testing.

39
00:02:05,929 --> 00:02:09,548
While this shouldn't be much of an issue in doing minor refactoring,

40
00:02:09,548 --> 00:02:13,151
significant refactoring could be more difficult as it could require a

41
00:02:13,151 --> 00:02:16,063
large number of tests to be rewritten or thrown out.

42
00:02:16,063 --> 00:02:20,115
Whereas tests written after a feature, or at least its public API has stabilized,

43
00:02:20,115 --> 00:02:24,357
could be designed to be more resilient to changes in the design of the feature.

44
00:02:24,357 --> 00:02:28,001
TDD is a great process whose strengths far outweigh its weaknesses,

45
00:02:28,001 --> 00:02:31,107
which is why I'm highlighting it in this course; however,

46
00:02:31,107 --> 00:02:33,765
it's not without its difficulties as well,

47
00:02:33,765 --> 00:02:37,383
and these often seem to be glossed over when TDD is discussed,

48
00:02:37,383 --> 00:02:43,000
which can lead to frustration when developers new to TDD attempt to put it into practice.

