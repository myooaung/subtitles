WEBVTT
1
00:00:01.937 --> 00:00:06.964
The main tool for testing RESTful APIs in Spring is the MockMvc tool.

2
00:00:06.964 --> 00:00:09.719
MockMvc was introduced back in Spring 3.

3
00:00:09.719 --> 00:00:10.112
2,

4
00:00:10.112 --> 00:00:14.839
and is an easy-to-use tool for standing up your application's RESTful endpoints,

5
00:00:14.839 --> 00:00:18.086
sending in requests, and then expecting a response.

6
00:00:18.086 --> 00:00:19.006
In this demo,

7
00:00:19.006 --> 00:00:22.992
we will utilize a MockMvc tool to exercise a RESTful controller and

8
00:00:22.992 --> 00:00:26.214
validate behaviors within the Spring MVC library.

9
00:00:26.214 --> 00:00:27.981
Looking at the controller for CustomerService,

10
00:00:27.981 --> 00:00:30.009
there are already two endpoints written,

11
00:00:30.009 --> 00:00:32.560
an endpoint for retrieving all customers,

12
00:00:32.560 --> 00:00:36.330
and a second endpoint for looking up customers by first name and last name.

13
00:00:36.330 --> 00:00:39.199
At the top of the test class TestCustomerController,

14
00:00:39.199 --> 00:00:44.857
I have added the RunWith annotation and the WebMvcTest annotation.

15
00:00:44.857 --> 00:00:47.446
WebMvcTest was added in Spring Boot 1.

16
00:00:47.446 --> 00:00:51.670
4 and makes the process of testing the web layer easier.

17
00:00:51.670 --> 00:00:55.672
WebMvcTest stands up just the web layer of your boot application,

18
00:00:55.672 --> 00:01:00.047
and also configures and puts in the application context a mockMvc object,

19
00:01:00.047 --> 00:01:04.950
along with just simply autowiring it into our test class.

20
00:01:04.950 --> 00:01:07.572
In the WebMvcTest annotation declaration,

21
00:01:07.572 --> 00:01:11.303
we will tell it we will be testing the CustomerController class,

22
00:01:11.303 --> 00:01:12.658
and also turning off security.

23
00:01:12.658 --> 00:01:15.464
We will be testing security in a separate test class.

24
00:01:15.464 --> 00:01:18.499
I have went ahead and created a few test cases.

25
00:01:18.499 --> 00:01:22.536
The first two test cases will be simulating successful calls to the endpoints.

26
00:01:22.536 --> 00:01:23.720
In testSuccessfulFindAllCustomers,

27
00:01:23.720 --> 00:01:28.707
using MockMvc we can configure it to make a get

28
00:01:28.707 --> 00:01:30.501
request to the customer's endpoint.

29
00:01:30.501 --> 00:01:32.360
The point of component integration testing,

30
00:01:32.360 --> 00:01:34.540
which I'll be reinforcing throughout this module,

31
00:01:34.540 --> 00:01:38.302
is to validate the behaviors of the libraries our code depends upon.

32
00:01:38.302 --> 00:01:43.300
And the controller we are telling Spring MVC to return an HTTP status

33
00:01:43.300 --> 00:01:47.788
of 200 Ok on the successful execution of customers.

34
00:01:47.788 --> 00:01:51.920
By default, Spring MVC sets the response content type as APPLICATION_JSON_UTF8,

35
00:01:51.920 --> 00:01:55.922
and we will just want to do some high-level

36
00:01:55.922 --> 00:01:57.357
verification of the response returned.

37
00:01:57.357 --> 00:02:02.445
These tests are here to let us know if the behavior of Spring MVC changes.

38
00:02:02.445 --> 00:02:04.540
Tests that validate the correct payload is being returned

39
00:02:04.540 --> 00:02:08.032
for a given input should be handled separately as unit

40
00:02:08.032 --> 00:02:09.230
tests for CustomerController.

41
00:02:09.230 --> 00:02:11.457
Running our test, we get a green result.

42
00:02:11.457 --> 00:02:12.832
In testSuccessSearchCustomersByFNameLName,

43
00:02:12.832 --> 00:02:20.558
we will follow a similar pattern with a call to customers/search/byFNameLName,

44
00:02:20.558 --> 00:02:22.901
and similar checks on the response.

45
00:02:22.901 --> 00:02:24.854
This test also returns green.

46
00:02:24.854 --> 00:02:29.649
Another default behavior of Spring MVC is it requires all request parameters.

47
00:02:29.649 --> 00:02:31.785
We will validate this behavior in

48
00:02:31.785 --> 00:02:36.637
testMissingParamSearchCustomersByFNameLName by calling search/byFNameLName

49
00:02:36.637 --> 00:02:39.862
again, but only with the fName parameter.

50
00:02:39.862 --> 00:02:41.880
When a required parameter is missing,

51
00:02:41.880 --> 00:02:45.607
Spring MVC by default returns a 400 bad request error code.

52
00:02:45.607 --> 00:02:50.508
So in the test case, we will tell MockMvc to look for this response code.

53
00:02:50.508 --> 00:02:51.746
And running the test,

54
00:02:51.746 --> 00:02:54.847
that is what we confirm is happening by getting a green return.

55
00:02:54.847 --> 00:02:56.127
Finally within our service class,

56
00:02:56.127 --> 00:03:00.787
we will test to make sure the parameters passed in follow a valid format.

57
00:03:00.787 --> 00:03:02.229
The specific format doesn't matter.

58
00:03:02.229 --> 00:03:06.178
What does matter is that when the service class returns an exception,

59
00:03:06.178 --> 00:03:08.110
our controller properly handles it.

60
00:03:08.110 --> 00:03:12.404
Updating our MockMvc, we will be looking for a text/plain content type,

61
00:03:12.404 --> 00:03:15.387
as well as a message from the thrown exception.

62
00:03:15.387 --> 00:03:17.968
And this test returns green as well.

63
00:03:17.968 --> 00:03:18.337
Great!

64
00:03:18.337 --> 00:03:21.287
MockMvc is a powerful and easy-to-use tool for validating

65
00:03:21.287 --> 00:03:28.000
the behavior of your RESTful endpoints. We will use it a bit more in a couple of the other demos in this module.

