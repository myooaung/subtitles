1
00:00:01,897 --> 00:00:05,113
JSON has quickly become the defacto standard for

2
00:00:05,113 --> 00:00:08,027
communicating between client and server over HTTP.

3
00:00:08,027 --> 00:00:11,301
JSON is a lightweight and human readable standard,

4
00:00:11,301 --> 00:00:14,192
which is why it has become so popular; however,

5
00:00:14,192 --> 00:00:17,086
ensuring that a JSON message is properly formed for

6
00:00:17,086 --> 00:00:18,419
consuming in our application,

7
00:00:18,419 --> 00:00:21,764
or our application is properly producing a JSON message,

8
00:00:21,764 --> 00:00:24,355
raises some interesting challenges.

9
00:00:24,355 --> 00:00:25,510
Within the Spring framework,

10
00:00:25,510 --> 00:00:28,034
the default library used for handling the marshalling

11
00:00:28,034 --> 00:00:31,049
and unmarshalling of JSON is Jackson.

12
00:00:31,049 --> 00:00:33,364
Like with other areas of testing covered in this module,

13
00:00:33,364 --> 00:00:36,413
we want to ensure that as we upgrade the version of

14
00:00:36,413 --> 00:00:38,071
Jackson our project depends upon,

15
00:00:38,071 --> 00:00:42,393
we are not inadvertently introducing bugs or behavior changes.

16
00:00:42,393 --> 00:00:44,981
Let's take a look at how some of the utilities Spring

17
00:00:44,981 --> 00:00:48,321
provides to aid in JSON testing.

18
00:00:48,321 --> 00:00:52,445
In this demo, we will be testing parsing a JSON string to an object,

19
00:00:52,445 --> 00:00:55,559
converting an object to a JSON string,

20
00:00:55,559 --> 00:00:58,603
test that JSON enforces required fields properly,

21
00:00:58,603 --> 00:01:04,240
and finally test that Jackson ignores extra fields in a JSON string.

22
00:01:04,240 --> 00:01:06,180
Let's look again at the customer class.

23
00:01:06,180 --> 00:01:11,625
At the top of the class, we have the JsonIgnoreProperties set to true.

24
00:01:11,625 --> 00:01:14,557
This annotation tells Jackson to ignore any fields it doesn't

25
00:01:14,557 --> 00:01:18,332
recognize when deserializing a JSON string.

26
00:01:18,332 --> 00:01:20,825
A little further down, the dateOfLastStay field,

27
00:01:20,825 --> 00:01:23,906
as can be seen, is a date field.

28
00:01:23,906 --> 00:01:26,392
By default, when serializing this field,

29
00:01:26,392 --> 00:01:29,915
JSON will convert the date to milliseconds from epoch; however,

30
00:01:29,915 --> 00:01:33,145
such a format isn't very human readable.

31
00:01:33,145 --> 00:01:35,257
So to make it easier to read,

32
00:01:35,257 --> 00:01:38,841
I added the JsonFormat field to print out a prettier date.

33
00:01:38,841 --> 00:01:41,785
In the all argument constructor for the class,

34
00:01:41,785 --> 00:01:44,321
I annotate it with the JsonCreator annotation,

35
00:01:44,321 --> 00:01:49,228
telling Jackson to use this constructor when deserializing a JSON string.

36
00:01:49,228 --> 00:01:52,088
I also annotated the arguments of the constructor to claim

37
00:01:52,088 --> 00:01:55,868
required fields and the name of the field in JSON.

38
00:01:55,868 --> 00:01:59,788
Note that simulating a legacy issue, the dateOfLastStay,

39
00:01:59,788 --> 00:02:03,798
is actually represented lastStayDate in JSON.

40
00:02:03,798 --> 00:02:05,387
Following up with that,

41
00:02:05,387 --> 00:02:09,127
the get for dateOfLastStay must also annotated so that when

42
00:02:09,127 --> 00:02:11,683
serializing a customer class to a JSON string,

43
00:02:11,683 --> 00:02:16,878
it also prints the dateOfLastStay field as lastStayDate.

44
00:02:16,878 --> 00:02:20,550
Alright, so our customer class is exercising a good bit of Jackson functionality,

45
00:02:20,550 --> 00:02:23,776
let's write some tests to make sure if any of this

46
00:02:23,776 --> 00:02:26,061
behavior changes between versions of Jackson,

47
00:02:26,061 --> 00:02:27,204
we catch it.

48
00:02:27,204 --> 00:02:31,079
In TestCustomerJsonSerializing, yet another Spring Boot 1.

49
00:02:31,079 --> 00:02:34,338
4 feature is adding the JacksonTester tool.

50
00:02:34,338 --> 00:02:35,936
As its name suggests,

51
00:02:35,936 --> 00:02:39,557
it makes testing Jackson easier by providing convenient

52
00:02:39,557 --> 00:02:42,463
shorthand for marshalling and unmarshalling JSON.

53
00:02:42,463 --> 00:02:44,959
Our first test, testValidFullCustomerParseJson,

54
00:02:44,959 --> 00:02:50,617
is going to serialize a JSON customer message to a customer object.

55
00:02:50,617 --> 00:02:51,564
In the test method,

56
00:02:51,564 --> 00:02:53,766
we will create a customer object that is equivalent

57
00:02:53,766 --> 00:02:55,916
to what is in the JSON string.

58
00:02:55,916 --> 00:03:00,101
We will then use JacksonTester to verify the values are equivalent,

59
00:03:00,101 --> 00:03:02,258
and we get back green.

60
00:03:02,258 --> 00:03:04,521
The next test, testValidFullCustomerMarshallObjectToJson,

61
00:03:04,521 --> 00:03:09,327
is essentially just the inverse of this,

62
00:03:09,327 --> 00:03:12,751
verifying that we can take an object and convert it to

63
00:03:12,751 --> 00:03:14,674
the JSON string we've just used.

64
00:03:14,674 --> 00:03:15,955
This might seem redundant,

65
00:03:15,955 --> 00:03:18,768
but it's how I knew I needed to add the annotations of the

66
00:03:18,768 --> 00:03:22,789
dateOfLastStay field to the constructor and the getter.

67
00:03:22,789 --> 00:03:25,272
So once again, this test returns green.

68
00:03:25,272 --> 00:03:26,860
The next test, testCustomerMissingRequiredField,

69
00:03:26,860 --> 00:03:32,382
is verifying that if a JSON message is missing a required field,

70
00:03:32,382 --> 00:03:33,866
Jackson throws an exception.

71
00:03:33,866 --> 00:03:37,002
In the test, the JSON message is missing the first name field,

72
00:03:37,002 --> 00:03:40,718
which is required, and we get green when we run the test.

73
00:03:40,718 --> 00:03:43,730
Note it's important to include the fail on this test as well.

74
00:03:43,730 --> 00:03:46,887
If Jackson stops throwing an exception, we want to know it.

75
00:03:46,887 --> 00:03:50,229
If the fail wasn't there, the test would still return it as green.

76
00:03:50,229 --> 00:03:52,824
The last test, testCustomerIgnoreExtraField,

77
00:03:52,824 --> 00:03:55,821
is verifying Jackson ignores extra fields.

78
00:03:55,821 --> 00:04:00,212
Pretty similar to above, just with the fail moved into the catch block.

79
00:04:00,212 --> 00:04:01,803
Once again, we get green.

80
00:04:01,803 --> 00:04:04,154
So now these tests should give us good confidence that as

81
00:04:04,154 --> 00:04:12,000
we upgrade our Jackson dependencies, we are not introducing any new or unexpected behaviors.

