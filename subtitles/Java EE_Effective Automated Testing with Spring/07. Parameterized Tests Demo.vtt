WEBVTT
1
00:00:02.440 --> 00:00:05.472
As mentioned in a previous section on parameterized tests,

2
00:00:05.472 --> 00:00:08.483
we will be validating check-in and check-out dates.

3
00:00:08.483 --> 00:00:09.327
In this demo,

4
00:00:09.327 --> 00:00:12.002
we'll be verifying that several rules around check-in and

5
00:00:12.002 --> 00:00:14.135
check-out dates are being enforced.

6
00:00:14.135 --> 00:00:18.658
The rules are, verify dates are in the month,

7
00:00:18.658 --> 00:00:22.442
day, year format, verify dates are valid.

8
00:00:22.442 --> 00:00:27.378
For example, we do not want to accept a date of February 30th.

9
00:00:27.378 --> 00:00:29.818
Verify both dates are in the future,

10
00:00:29.818 --> 00:00:34.257
verify that check-out date is at least one day after the check-in date.

11
00:00:34.257 --> 00:00:34.592
Finally,

12
00:00:34.592 --> 00:00:40.590
we want to send as many valid error responses back to the user as possible.

13
00:00:40.590 --> 00:00:43.236
That is, if the check-in date is in the past,

14
00:00:43.236 --> 00:00:44.884
and the check-out date is missing,

15
00:00:44.884 --> 00:00:48.423
we want to send it back an error message for both issues,

16
00:00:48.423 --> 00:00:49.792
not just one or the other.

17
00:00:49.792 --> 00:00:55.177
This will make the process of using our service less frustrating to users.

18
00:00:55.177 --> 00:00:58.578
The first step to writing parameterized tests in JUnit 5 is to

19
00:00:58.578 --> 00:01:00.432
include the junit-jupiter-params library.

20
00:01:00.432 --> 00:01:07.546
This is an example of how JUnit 5 is extensible rather than implemented.

21
00:01:07.546 --> 00:01:12.365
Instead of parameterized tests being part of the core JUnit 5 library,

22
00:01:12.365 --> 00:01:16.607
it's an additional library so it can evolve independently,

23
00:01:16.607 --> 00:01:20.117
or possibly, better implementations to be written.

24
00:01:20.117 --> 00:01:21.579
In the BookingService,

25
00:01:21.579 --> 00:01:24.601
I went ahead and did a basic implementation of the code to check

26
00:01:24.601 --> 00:01:28.170
if the check-in and check-out dates are valid.

27
00:01:28.170 --> 00:01:31.415
If the dates are not valid, a list of errors is returned.

28
00:01:31.415 --> 00:01:34.847
If the dates are valid, then an empty list is returned.

29
00:01:34.847 --> 00:01:36.062
Improvements probably could be made,

30
00:01:36.062 --> 00:01:38.722
and if we wanted to go back and improve this code,

31
00:01:38.722 --> 00:01:40.873
the tests we are about to write will give

32
00:01:40.873 --> 00:01:43.460
confidence that we don't introduce bugs.

33
00:01:43.460 --> 00:01:45.616
Over in our test class,

34
00:01:45.616 --> 00:01:48.531
a parameterized test is appropriately declared with

35
00:01:48.531 --> 00:01:50.005
the ParameterizedTest annotation.

36
00:01:50.005 --> 00:01:55.474
Next, we need to add the data source for our test.

37
00:01:55.474 --> 00:01:58.769
In this example, I am using a MethodSource,

38
00:01:58.769 --> 00:02:02.200
but as mentioned, other options exist.

39
00:02:02.200 --> 00:02:05.360
MethodSource works appropriately by looking for a

40
00:02:05.360 --> 00:02:07.617
matching name within the class.

41
00:02:07.617 --> 00:02:11.013
The return type for the method must be a stream typed to the

42
00:02:11.013 --> 00:02:13.844
same argument type of the parameterized test.

43
00:02:13.844 --> 00:02:19.482
Below, I created a simple class to handle the arguments I will be passing in.

44
00:02:19.482 --> 00:02:20.824
In the constructor of the class,

45
00:02:20.824 --> 00:02:24.571
I am accepting the check-in and check-out date as the first two elements,

46
00:02:24.571 --> 00:02:30.285
and a variable number of error messages using the Java ellipsis operator.

47
00:02:30.285 --> 00:02:34.453
The first test is a simple happy path of two valid dates.

48
00:02:34.453 --> 00:02:36.361
Running the test, we get green.

49
00:02:36.361 --> 00:02:40.078
Next example I am passing in a null check-in date.

50
00:02:40.078 --> 00:02:43.595
Running the test again returns green.

51
00:02:43.595 --> 00:02:47.851
If we look at a test run, it's not very informative of what is happening.

52
00:02:47.851 --> 00:02:51.118
We are told the name of the parameterized test we are running,

53
00:02:51.118 --> 00:02:53.927
but each iteration is simply given a number followed

54
00:02:53.927 --> 00:02:56.466
by the qualified path to the test.

55
00:02:56.466 --> 00:02:58.069
We can do better.

56
00:02:58.069 --> 00:03:02.300
In the parameterized test declaration, we will tell it to print out the first,

57
00:03:02.300 --> 00:03:06.220
and in our case only, argument being passed in.

58
00:03:06.220 --> 00:03:08.515
In our DateValidationBean class,

59
00:03:08.515 --> 00:03:11.427
we will update it to take in an additional string,

60
00:03:11.427 --> 00:03:17.258
we will call that testName, and also implement toString to return testName.

61
00:03:17.258 --> 00:03:21.398
Rerunning the test, we get much better output.

62
00:03:21.398 --> 00:03:24.358
Again, let's add a couple more test cases,

63
00:03:24.358 --> 00:03:31.478
one where both dates are null, and another with an invalid date of February 30th.

64
00:03:31.478 --> 00:03:33.536
Rerunning the test, hmm, a failure.

65
00:03:33.536 --> 00:03:37.610
We didn't get any errors for the invalid check-in date test.

66
00:03:37.610 --> 00:03:39.701
So the problem by default,

67
00:03:39.701 --> 00:03:44.928
the SimpleDateFormat class will simply read February 30th as March 2nd.

68
00:03:44.928 --> 00:03:46.412
We don't want that.

69
00:03:46.412 --> 00:03:48.639
We want simpleDateFormat to be stricter,

70
00:03:48.639 --> 00:03:52.904
which can be done by simply setting setLenient to be false.

71
00:03:52.904 --> 00:03:55.029
Running the test again, it passes.

72
00:03:55.029 --> 00:03:57.514
Parameterized testing is great for scenarios like this.

73
00:03:57.514 --> 00:04:00.507
There are a lot of different paths through the code that

74
00:04:00.507 --> 00:04:02.913
validates check-in and check-out dates; however,

75
00:04:02.913 --> 00:04:05.738
the setup for each of the tests is very similar.

76
00:04:05.738 --> 00:04:13.000
Using parameterized tests makes the cost of adding new tests and maintaining existing tests much less.

