1
00:00:02,140 --> 00:00:05,620
So the best way, perhaps, to see this in action is to use

2
00:00:05,620 --> 00:00:08,380
our own security manager. And we'll see why this makes life

3
00:00:08,380 --> 00:00:10,640
slightly easier in a moment.

4
00:00:10,640 --> 00:00:12,190
So here I've defined a class called

5
00:00:12,190 --> 00:00:15,390
MySecurityManager that extends SecurityManager.

6
00:00:15,390 --> 00:00:17,220
And that has a method called listPermissions,

7
00:00:17,220 --> 00:00:18,950
just something we can call to list out all the

8
00:00:18,950 --> 00:00:21,840
permissions at a given point in time.

9
00:00:21,840 --> 00:00:23,270
To use the security manager,

10
00:00:23,270 --> 00:00:26,850
we have to add it into the application and tell the application we

11
00:00:26,850 --> 00:00:30,640
want to use our security manager. And we've seen previously we do

12
00:00:30,640 --> 00:00:36,280
that by calling System.setSecurityManager.

13
00:00:36,280 --> 00:00:39,380
I just passed this new MySecurityManager.

14
00:00:39,380 --> 00:00:42,080
There's a mirror call to this called getSecurityManager.

15
00:00:42,080 --> 00:00:43,740
So, just to see this in action,

16
00:00:43,740 --> 00:00:51,540
I can say MySecurityManager securityManager = System.getSecurityManager.

17
00:00:51,540 --> 00:00:57,020
On this I need the cast to be a MySecurityManager. And then once we have

18
00:00:57,020 --> 00:01:03,930
that I can call securityManager.listPermissions. So it's listPermissions

19
00:01:03,930 --> 00:01:05,700
where we'll do all the work.

20
00:01:05,700 --> 00:01:09,830
So in here the first thing I want to do is to get ahold of the

21
00:01:09,830 --> 00:01:20,420
default Policy class. So I can say Policy policy = Policy.getPolicy.

22
00:01:20,420 --> 00:01:22,280
And this returns me the policy singleton.

23
00:01:22,280 --> 00:01:27,440
So I can say Policy.getPolicy and get back the policy singleton.

24
00:01:27,440 --> 00:01:31,200
Now the reason I want to create my own security manager is that the

25
00:01:31,200 --> 00:01:36,240
security manager has a helper class called getClassContext.

26
00:01:36,240 --> 00:01:40,130
getClassContext returns a list of classes that are currently

27
00:01:40,130 --> 00:01:44,040
involved in security for this application.

28
00:01:44,040 --> 00:01:46,250
I'm being slightly hazy here. We'll explain exactly

29
00:01:46,250 --> 00:01:48,780
what that means in a few moments time.

30
00:01:48,780 --> 00:01:53,050
So what getClassContext returns is an array of classes. So I

31
00:01:53,050 --> 00:01:59,150
can say Class [] classes = getClassContext.

32
00:01:59,150 --> 00:02:05,340
Once I have that I can iterate over all these classes. So I can say for(Class

33
00:02:05,340 --> 00:02:13,550
cls : classes). Then inside here I can get the ProtectionDomain for each class

34
00:02:13,550 --> 00:02:18,700
in this iteration. So cls.getProtectionDomain.

35
00:02:18,700 --> 00:02:23,330
And then from the ProtectionDomain I can get the CodeSource for, again,

36
00:02:23,330 --> 00:02:28,120
each class. So I can say CodeSource cs = pd.getCodeSource.

37
00:02:28,120 --> 00:02:32,580
So once I have the CodeSource I can use the policy to get permissions.

38
00:02:32,580 --> 00:02:38,140
So I can say policy.getPermissions and I can pass it the CodeSource.

39
00:02:38,140 --> 00:02:41,050
And what this returns is a PermissionCollection.

40
00:02:41,050 --> 00:02:51,440
So I can say PermissionCollection permissionCollection = policy.getPermissions.

41
00:02:51,440 --> 00:02:55,540
So once I have the PermissionCollection I want to enumerate them.

42
00:02:55,540 --> 00:02:58,480
The PermissionCollection has an elements method which returns

43
00:02:58,480 --> 00:03:01,140
me an enumeration of Permission objects.

44
00:03:01,140 --> 00:03:06,170
And once I have that I can iterate over these. So, permissions.hasMoreElements

45
00:03:06,170 --> 00:03:09,750
and then just simply print out permissions.nextElement. And I will call

46
00:03:09,750 --> 00:03:13,910
toString on the permission and print out the permission.

47
00:03:13,910 --> 00:03:16,140
I have one last thing to point out. I'm going to

48
00:03:16,140 --> 00:03:17,770
run this with a security manager.

49
00:03:17,770 --> 00:03:20,640
DB set that security manager here.

50
00:03:20,640 --> 00:03:24,190
So I need to make sure the permissions for this application are correct.

51
00:03:24,190 --> 00:03:25,700
So I have a policy file here,

52
00:03:25,700 --> 00:03:29,250
and in this policy file we grant ourselves two further permissions.

53
00:03:29,250 --> 00:03:33,640
We need the permission to allow us to read the policy and we need the

54
00:03:33,640 --> 00:03:36,560
permission to allow us to read the protection domains.

55
00:03:36,560 --> 00:03:40,780
And if we don't grant ourselves these then the code will simply fail to run.

56
00:03:40,780 --> 00:03:47,810
So if I jump to the command prompt here and from here run java,

57
00:03:47,810 --> 00:03:51,040
pointing out that policy file, and then com.pluralsight.Main

58
00:03:51,040 --> 00:03:53,140
is just the main class of the application.

59
00:03:53,140 --> 00:03:55,500
And if I run this it will print out all of our

60
00:03:55,500 --> 00:04:00,130
permissions. We know it's essential that we get here all

61
00:04:00,130 --> 00:04:01,540
the permissions from the policy files.

62
00:04:01,540 --> 00:04:05,270
So we get various property permissions, we can read the specification,

63
00:04:05,270 --> 00:04:07,520
we get the extra permissions we've added, like

64
00:04:07,520 --> 00:04:10,190
getProtectionDomain and getPolicy.

65
00:04:10,190 --> 00:04:11,720
So this is how our code internally,

66
00:04:11,720 --> 00:04:14,300
if we need to, can read and check these permissions

67
00:04:14,300 --> 00:04:16,570
directly. As we'll see later,

68
00:04:16,570 --> 00:04:20,410
this is not actually how permission checks are done, but we can see here this

69
00:04:20,410 --> 00:04:25,440
gives us one way to access all the given permissions if we ever need to do that.

70
00:04:25,440 --> 00:04:27,570
Now that we've seen how to get these permissions,

71
00:04:27,570 --> 00:04:30,850
we need to take a look at one extra thing for the check

72
00:04:30,850 --> 00:04:37,000
and that is something called a code stack walk. And we'll see that in the next module.

