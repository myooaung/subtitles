1
00:00:03,940 --> 00:00:06,150
Hi. My name is Kevin Jones,

2
00:00:06,150 --> 00:00:09,700
and this is the Running Code Securely chapter of the Java Virtual

3
00:00:09,700 --> 00:00:14,330
Machine: Security class from Pluralsight. In this chapter,

4
00:00:14,330 --> 00:00:19,030
we'll delve more into how we manage the security of code and how we

5
00:00:19,030 --> 00:00:24,140
define the permissions the code has and requires to run.

6
00:00:24,140 --> 00:00:27,390
So we'll take a look at Java platform security and, in particular,

7
00:00:27,390 --> 00:00:33,440
the architecture and syntax of the policies that we need to use to execute code.

8
00:00:33,440 --> 00:00:35,760
We'll also look at how we can sign code.

9
00:00:35,760 --> 00:00:39,930
So we saw in the previous module that we can specify

10
00:00:39,930 --> 00:00:43,080
permissions based on where code is loaded from.

11
00:00:43,080 --> 00:00:47,300
We can also specify permissions based on who created the code and

12
00:00:47,300 --> 00:00:49,670
who signed the code. So we'll see how we do that,

13
00:00:49,670 --> 00:00:53,740
how we can sign the code, and how we can specify those permissions.

14
00:00:53,740 --> 00:00:58,360
And we'll also take a look at custom permissions. So the JDK comes

15
00:00:58,360 --> 00:01:00,770
with a set of built‑in permissions that we can use.

16
00:01:00,770 --> 00:01:02,980
But suppose we need other permissions for our own

17
00:01:02,980 --> 00:01:05,440
code. So we'll see how we can do that.

18
00:01:05,440 --> 00:01:05,700
So,

19
00:01:05,700 --> 00:01:09,500
just to recap, in the first module, we saw that Java security

20
00:01:09,500 --> 00:01:11,570
was built on these three things‑‑permissions,

21
00:01:11,570 --> 00:01:13,540
policy, and enforcement.

22
00:01:13,540 --> 00:01:18,160
We also saw that we can specify SecurityManager in one of two ways.

23
00:01:18,160 --> 00:01:20,460
So if you require security to be used,

24
00:01:20,460 --> 00:01:23,440
we have to load our application with a SecurityManager.

25
00:01:23,440 --> 00:01:26,410
We can either specify the SecurityManager on the command line,

26
00:01:26,410 --> 00:01:29,780
or we can load a SecurityManager in code.

27
00:01:29,780 --> 00:01:32,870
So one thing we touched on briefly in the first module, and

28
00:01:32,870 --> 00:01:36,040
we just covered it in a little more depth here, is where the

29
00:01:36,040 --> 00:01:38,440
security checks actually happen.

30
00:01:38,440 --> 00:01:42,440
Something has to say, Is this code allowed to execute?

31
00:01:42,440 --> 00:01:43,840
Typically,

32
00:01:43,840 --> 00:01:47,040
this happens in some library code, so we could call the security

33
00:01:47,040 --> 00:01:52,280
check or often libraries that we use make the security checks, and

34
00:01:52,280 --> 00:01:54,850
the JDK is full of these sorts of checks.

35
00:01:54,850 --> 00:01:55,390
For example,

36
00:01:55,390 --> 00:01:59,360
if we take a look at the sources that we can download now from the JDK,

37
00:01:59,360 --> 00:02:03,340
this is from the FileInputStream.java class as part of the Open JDK,

38
00:02:03,340 --> 00:02:08,530
and we can see here the construct of a FileInputStream tries to get a

39
00:02:08,530 --> 00:02:10,020
reference to the SecurityManager.

40
00:02:10,020 --> 00:02:13,790
So it calls System.getSecurityManager.

41
00:02:13,790 --> 00:02:15,670
If a SecurityManager's been loaded,

42
00:02:15,670 --> 00:02:17,600
so we've either specified on the command line we

43
00:02:17,600 --> 00:02:19,160
want a SecurityManager, or, indeed,

44
00:02:19,160 --> 00:02:24,730
we've created one inside of our application, then this returns a non‑null value.

45
00:02:24,730 --> 00:02:26,540
So we have a SecurityManager,

46
00:02:26,540 --> 00:02:31,520
and at that point we call checkRead. And it's this checkRead call

47
00:02:31,520 --> 00:02:35,730
that checks if this code has permission in this case to read from a

48
00:02:35,730 --> 00:02:38,410
file. If it doesn't have that permission,

49
00:02:38,410 --> 00:02:41,700
it throws an exception. In the next module, we'll take a look

50
00:02:41,700 --> 00:02:52,000
at policy, how the policy file is implemented, and the details that go into the policy file.

