WEBVTT
1
00:00:01.840 --> 00:00:06.860
Hi. My name is Kevin Jones, and this is the Privileged Scopes chapter of the

2
00:00:06.860 --> 00:00:11.140
Java Virtual Machine: Security class from Pluralsight.

3
00:00:11.140 --> 00:00:15.260
So, we've seen already in this class that we use

4
00:00:15.260 --> 00:00:19.080
policy to make security decisions.

5
00:00:19.080 --> 00:00:24.770
So the security manager via the access controller uses policy, in the

6
00:00:24.770 --> 00:00:28.260
default case that will be a policy file, and will use that policy to make

7
00:00:28.260 --> 00:00:32.240
some decision based on the current security context.

8
00:00:32.240 --> 00:00:36.150
So that kind of security context is typically all of

9
00:00:36.150 --> 00:00:38.670
the callers on the current stack.

10
00:00:38.670 --> 00:00:42.110
So we've seen that the default behavior is to walk the stack frame

11
00:00:42.110 --> 00:00:45.420
and use all the information on the stack frame to determine whether

12
00:00:45.420 --> 00:00:49.870
or not a call should take place. There are occasions where we might

13
00:00:49.870 --> 00:00:51.640
want to change this behavior.

14
00:00:51.640 --> 00:00:52.790
So, for example,

15
00:00:52.790 --> 00:00:56.290
it may be that our main application is spinning up threads. And

16
00:00:56.290 --> 00:00:59.630
it might be that we'd like these security decisions made on

17
00:00:59.630 --> 00:01:04.230
those threads based on the same context that was in use when the

18
00:01:04.230 --> 00:01:06.040
thread was first created.

19
00:01:06.040 --> 00:01:10.750
So it's possible we'd like to capture the current security context and

20
00:01:10.750 --> 00:01:14.440
then use that at a later stage to check security.

21
00:01:14.440 --> 00:01:19.090
It's also possible that we'd like to capture a security context and

22
00:01:19.090 --> 00:01:23.380
then at a later stage augment it or change it and then use that

23
00:01:23.380 --> 00:01:27.410
changed security context to check the security.

24
00:01:27.410 --> 00:01:30.920
And the idea here is that when we spin up a new thread we

25
00:01:30.920 --> 00:01:35.170
can use the current thread's security context to do

26
00:01:35.170 --> 00:01:37.440
security checks on the new thread.

27
00:01:37.440 --> 00:01:40.870
But if the current thread security context changes we might want to

28
00:01:40.870 --> 00:01:43.380
change the new thread security context as well.

29
00:01:43.380 --> 00:01:44.150
And then finally,

30
00:01:44.150 --> 00:01:47.540
it's possible that a developer might want to create

31
00:01:47.540 --> 00:01:49.630
a security context themselves.

32
00:01:49.630 --> 00:01:52.440
So I should create a clean security context.

33
00:01:52.440 --> 00:01:56.870
So in this case, we can sort of take over the security management ourselves.

34
00:01:56.870 --> 00:02:07.000
So rather than relying on what the JRE gives us we can create our own security context and run our own security checks.

