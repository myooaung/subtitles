1
00:00:02,580 --> 00:00:06,640
Before we go delving into the details of code‑level security,

2
00:00:06,640 --> 00:00:09,340
the first question we should ask is what is it?

3
00:00:09,340 --> 00:00:12,660
The question that code‑level security asks is, can a piece

4
00:00:12,660 --> 00:00:15,870
of loaded code execute a specific action?

5
00:00:15,870 --> 00:00:17,200
So, for example,

6
00:00:17,200 --> 00:00:23,190
is a specific piece of code allowed to read from or write to a file?

7
00:00:23,190 --> 00:00:25,280
And does it matter where that file is located?

8
00:00:25,280 --> 00:00:28,850
So it might be the code has rights to read from or write

9
00:00:28,850 --> 00:00:31,240
to a file in the user's home directory.

10
00:00:31,240 --> 00:00:34,830
But it doesn't have rights to read or write a file in the system directory,

11
00:00:34,830 --> 00:00:39,840
let's say. Also, should a piece of code be allowed access to the network?

12
00:00:39,840 --> 00:00:43,660
Traditionally in the UNIX world, code is allowed access to

13
00:00:43,660 --> 00:00:47,920
sockets with a port number above 1024 but not to ports

14
00:00:47,920 --> 00:00:49,320
that are numbered below that.

15
00:00:49,320 --> 00:00:50,720
So what about Java code?

16
00:00:50,720 --> 00:00:51,950
Should we give it the same access?

17
00:00:51,950 --> 00:00:56,160
Should we change the access? And should that access depend on which

18
00:00:56,160 --> 00:00:59,640
directory or which network location the code was loaded from?

19
00:00:59,640 --> 00:01:00,720
Why do we care about this?

20
00:01:00,720 --> 00:01:02,640
Why is this important?

21
00:01:02,640 --> 00:01:04,850
So Java code is mobile. Originally,

22
00:01:04,850 --> 00:01:09,180
Java was meant as a language that allowed us to write mobile

23
00:01:09,180 --> 00:01:12,810
applications, applications that were loaded inside a web browser, these

24
00:01:12,810 --> 00:01:15,570
things called applets that nobody ever uses these days.

25
00:01:15,570 --> 00:01:19,820
But that's why this came around. Applet code was loaded across the network

26
00:01:19,820 --> 00:01:23,360
by definition. We were loading code from a remote server.

27
00:01:23,360 --> 00:01:26,430
But even now we can load Java code from anywhere, so Java

28
00:01:26,430 --> 00:01:29,120
code can be loaded across the network.

29
00:01:29,120 --> 00:01:31,000
And as we're loading different pieces of code,

30
00:01:31,000 --> 00:01:33,550
different libraries from different locations,

31
00:01:33,550 --> 00:01:37,710
we might want to prevent some of those libraries doing certain things.

32
00:01:37,710 --> 00:01:43,030
We don't necessarily trust all the locations code could be loaded from.

33
00:01:43,030 --> 00:01:45,360
So we'd like to limit what code could do,

34
00:01:45,360 --> 00:01:49,240
depending on where it gets loaded from.

35
00:01:49,240 --> 00:01:53,730
It's also possible that we might just trust certain libraries less than others.

36
00:01:53,730 --> 00:01:57,420
So for specific libraries, we want to lower our trust level.

37
00:01:57,420 --> 00:02:00,170
So you can say for library A it can do anything we want to. For

38
00:02:00,170 --> 00:02:02,870
library B, it can only do certain things.

39
00:02:02,870 --> 00:02:03,900
By doing this,

40
00:02:03,900 --> 00:02:09,150
we reduce the surface area for any attack. By restricting what

41
00:02:09,150 --> 00:02:12,140
code can do, we restrict what attackers can do,

42
00:02:12,140 --> 00:02:13,270
at least in theory.

43
00:02:13,270 --> 00:02:16,540
This is known as the principle of least privilege.

44
00:02:16,540 --> 00:02:18,960
So any piece of code should only be allowed to do the

45
00:02:18,960 --> 00:02:20,650
things that we think it should do.

46
00:02:20,650 --> 00:02:23,080
It shouldn't be allowed to do anything within the framework.

47
00:02:23,080 --> 00:02:26,840
Now security within Java has a long history.

48
00:02:26,840 --> 00:02:28,900
We just said Java was designed to be mobile,

49
00:02:28,900 --> 00:02:32,540
so security was built in from day one.

50
00:02:32,540 --> 00:02:32,940
However,

51
00:02:32,940 --> 00:02:36,830
initially the way security was implemented was by running

52
00:02:36,830 --> 00:02:39,520
code inside this thing called a sandbox.

53
00:02:39,520 --> 00:02:40,260
So essentially,

54
00:02:40,260 --> 00:02:43,370
any application running inside that sandbox was restricted to

55
00:02:43,370 --> 00:02:45,840
the things the sandbox would let it do.

56
00:02:45,840 --> 00:02:48,800
So we couldn't decide if a piece of code was loaded from one location,

57
00:02:48,800 --> 00:02:49,950
it could read files.

58
00:02:49,950 --> 00:02:53,100
If it was loaded from another location that it could read or maybe right files.

59
00:02:53,100 --> 00:02:56,140
It was purely down to the way the sandbox was written.

60
00:02:56,140 --> 00:02:59,180
And as you can imagine, this was very inflexible.

61
00:02:59,180 --> 00:03:00,810
So when Java 2 came out,

62
00:03:00,810 --> 00:03:03,730
we changed the model, and we changed the model to allow us

63
00:03:03,730 --> 00:03:07,310
to determine which code could do what, depending on location,

64
00:03:07,310 --> 00:03:10,630
i.e., depending on where that code was loaded from. In Java security,

65
00:03:10,630 --> 00:03:15,100
there are three principal players. Permissions.

66
00:03:15,100 --> 00:03:19,250
So is code allowed to perform some operation? So code may have

67
00:03:19,250 --> 00:03:22,760
permission to read to file, write to file.

68
00:03:22,760 --> 00:03:25,650
It may have permission to write to a socket.

69
00:03:25,650 --> 00:03:28,370
It may have permission to do many things within the framework.

70
00:03:28,370 --> 00:03:31,520
We have a permission for each of the things we might want

71
00:03:31,520 --> 00:03:36,140
code to be able to do. Then there's policy.

72
00:03:36,140 --> 00:03:42,040
So we need a way of configuring externally to the application the permissions.

73
00:03:42,040 --> 00:03:44,050
If I know there's a read file permission,

74
00:03:44,050 --> 00:03:47,710
how do I configure that for my particular application? And that's

75
00:03:47,710 --> 00:03:50,970
all done through a policy file. And then finally,

76
00:03:50,970 --> 00:03:52,740
how do we enforce this?

77
00:03:52,740 --> 00:03:55,650
So if a piece of code violates some policy,

78
00:03:55,650 --> 00:03:59,170
then we should not be able to ignore that violation.

79
00:03:59,170 --> 00:04:01,880
And Java does this by throwing security exceptions.

80
00:04:01,880 --> 00:04:04,710
If according to policy I don't have a permission for a

81
00:04:04,710 --> 00:04:06,900
certain action that I try and perform,

82
00:04:06,900 --> 00:04:16,000
then there'll be an exception thrown by the runtime. In the next module, we'll take a look at these three pieces in slightly more detail.

