1
00:00:03,640 --> 00:00:05,790
So how does the policy file get loaded?

2
00:00:05,790 --> 00:00:10,080
When the JVM starts up, a policy singleton is created,

3
00:00:10,080 --> 00:00:13,880
and the location of the class for the singleton is defined

4
00:00:13,880 --> 00:00:17,580
here in jre/lib/security/java.security.

5
00:00:17,580 --> 00:00:20,160
So another text file similar to java.policy.

6
00:00:20,160 --> 00:00:23,800
In here is a policy.provider entry,

7
00:00:23,800 --> 00:00:28,590
and that defaults to send security.provider.PolicyFile.

8
00:00:28,590 --> 00:00:31,070
So this is the policy file‑based policy,

9
00:00:31,070 --> 00:00:34,340
and this is the text‑based file that we've seen.

10
00:00:34,340 --> 00:00:36,810
This class, if it's specified this way,

11
00:00:36,810 --> 00:00:41,160
must be present either on the boot class path or in the extensions

12
00:00:41,160 --> 00:00:45,640
directory such that the Java virtual machine can load it.

13
00:00:45,640 --> 00:00:47,430
You can, however, change this later.

14
00:00:47,430 --> 00:00:49,930
So you can call Policy.setPolicy.

15
00:00:49,930 --> 00:00:53,640
Now, of course, you'll need permission to do this.

16
00:00:53,640 --> 00:00:59,770
And as we've seen, the default implementation is a text file configuration.

17
00:00:59,770 --> 00:01:02,480
So we've already seen the default policy file,

18
00:01:02,480 --> 00:01:04,920
but here we're going to put a little more meat on the

19
00:01:04,920 --> 00:01:08,740
bones of the syntax of the policy file.

20
00:01:08,740 --> 00:01:11,760
So we use this grant syntax and it looks something like this.

21
00:01:11,760 --> 00:01:15,960
We say grant and specify a code base or maybe a signedBy. and that

22
00:01:15,960 --> 00:01:20,600
code base could be a file location or it could be a network location.

23
00:01:20,600 --> 00:01:23,240
And notice here, we have some extra syntax.

24
00:01:23,240 --> 00:01:26,240
We have a dash, we have an asterisk here.

25
00:01:26,240 --> 00:01:28,220
So the specific format is this.

26
00:01:28,220 --> 00:01:32,660
We can say grant and then signedBy with a list of signer_names or

27
00:01:32,660 --> 00:01:37,760
codeBase, and codeBase then is a URL. If we have signed code, the

28
00:01:37,760 --> 00:01:43,530
signer_names is an alias into the Java key store, and we'll see more on

29
00:01:43,530 --> 00:01:48,760
how that works a little later in this module. The URL is obviously a

30
00:01:48,760 --> 00:01:53,270
location, and it could be a file location or a network location. The way

31
00:01:53,270 --> 00:01:55,540
the URL works is this.

32
00:01:55,540 --> 00:01:59,460
If the URL ends in a forward slash, that matches all the

33
00:01:59,460 --> 00:02:02,840
classes in the specified directory.

34
00:02:02,840 --> 00:02:07,990
If it ends in a star, an asterisk, it matches all the files in that directory.

35
00:02:07,990 --> 00:02:13,220
So .class files on .jar files. And if it ends with a hyphen,

36
00:02:13,220 --> 00:02:17,650
it matches all files in that directory recursively. So it'll recurse down

37
00:02:17,650 --> 00:02:22,120
through any sub directories that we have. If the URL is for the file system,

38
00:02:22,120 --> 00:02:29,260
then it must start with file:/. And notice that because this is a URL, then it

39
00:02:29,260 --> 00:02:33,200
must be a a forward slash, even on Windows machines; it's not a backslash, it's

40
00:02:33,200 --> 00:02:38,960
a forward slash inside the URL. The policy file also comes with a property

41
00:02:38,960 --> 00:02:45,480
expansion mechanism. So we can use any system properties the Java recognizes

42
00:02:45,480 --> 00:02:48,910
inside the policy file, and it is of this form. So we can say $ and then

43
00:02:48,910 --> 00:02:54,140
property.name. So we can say user.home or java. home or version information or

44
00:02:54,140 --> 00:03:00,790
anything else we need inside the policy file. The Java security file has an

45
00:03:00,790 --> 00:03:06,530
expandProperties property, and if that must be set to true,

46
00:03:06,530 --> 00:03:12,340
which is the default value, to allow the property file to expand its properties.

47
00:03:12,340 --> 00:03:17,200
There's also a special property, which is $/ that expands to the

48
00:03:17,200 --> 00:03:21,050
file separator on whatever system we're running on.

49
00:03:21,050 --> 00:03:21,790
So for Windows,

50
00:03:21,790 --> 00:03:24,720
it would be the backslash for UNIX‑based systems, it would

51
00:03:24,720 --> 00:03:27,990
be the forward slash. That allows us to write somewhat

52
00:03:27,990 --> 00:03:30,160
platform‑agnostic policy files.

53
00:03:30,160 --> 00:03:31,700
So, as an example, so here,

54
00:03:31,700 --> 00:03:34,600
we have a permission, which a java.io.FilePermission, and

55
00:03:34,600 --> 00:03:41,290
we're saying ${user.home}${/}, and this expands on UNIX

56
00:03:41,290 --> 00:03:44,020
to /home/cathy/, let's say,

57
00:03:44,020 --> 00:03:47,410
assuming the user is called Cathy, or on Windows to whatever

58
00:03:47,410 --> 00:03:48,830
the user's location is, so in this case,

59
00:03:48,830 --> 00:03:53,910
d:\\users\\cathy, and again, notice at the end of both of

60
00:03:53,910 --> 00:03:57,970
these, user.home expands to /home/cathy,

61
00:03:57,970 --> 00:04:02,540
and then $/ either expands to / or \,

62
00:04:02,540 --> 00:04:07,840
depending on whether it's a UNIX‑based system or a Windows‑based system.

63
00:04:07,840 --> 00:04:14,000
So let's take a look at how we can edit the policy file and how that affects our code.

