1
00:00:01,640 --> 00:00:05,010
We're going to write some simple demo code just to show

2
00:00:05,010 --> 00:00:06,760
some aspects of the security manager,

3
00:00:06,760 --> 00:00:09,980
and we'll get into far more details later in the class.

4
00:00:09,980 --> 00:00:14,070
So the first thing I want to do here is to get a system property,

5
00:00:14,070 --> 00:00:17,380
so I'm going to say, String version equals,

6
00:00:17,380 --> 00:00:24,880
and I'm going to use System.getProperty. And the key we're going to pass to this

7
00:00:24,880 --> 00:00:29,500
is java.version, and this should return the current version of Java, and then

8
00:00:29,500 --> 00:00:32,540
I'm going to simply print that out to the console.

9
00:00:32,540 --> 00:00:36,090
So if I build this from inside IDEA and then go to my

10
00:00:36,090 --> 00:00:38,630
command prompt, and then from here,

11
00:00:38,630 --> 00:00:41,940
I can run the application. And that prints out the

12
00:00:41,940 --> 00:00:43,380
current Java version I'm using,

13
00:00:43,380 --> 00:00:47,820
which at the time of recording, is 1.8.0_45, and you can read that here.

14
00:00:47,820 --> 00:00:51,810
Now, suppose I want to run this under a security manager.

15
00:00:51,810 --> 00:00:58,540
So we've seen to do that, we use java â€‘Djava.security.manager.

16
00:00:58,540 --> 00:01:00,270
When I execute the code now,

17
00:01:00,270 --> 00:01:04,440
it will tell the runtime to use the security manager and

18
00:01:04,440 --> 00:01:09,240
access to the property will be checked.

19
00:01:09,240 --> 00:01:11,150
And in this case, the access still works.

20
00:01:11,150 --> 00:01:14,020
We're still allowed to read system properties.

21
00:01:14,020 --> 00:01:16,460
So let me go and change this code, and what I want to

22
00:01:16,460 --> 00:01:19,180
do now is to try and access a file.

23
00:01:19,180 --> 00:01:24,120
So here, we're going to use Java 8, and we're using the new try with resources.

24
00:01:24,120 --> 00:01:34,040
I'm going to say, try FileWriter writer = new FileWriter.

25
00:01:34,040 --> 00:01:38,570
I'm going to try to access a file in the temp folder, and let's just call this

26
00:01:38,570 --> 00:01:45,120
out.txt. And to this, I'll simply do writer.write Hello,

27
00:01:45,120 --> 00:01:45,680
World.

28
00:01:45,680 --> 00:01:48,190
This throws my IOException, so we need to handle that

29
00:01:48,190 --> 00:01:49,120
in some way, so I'm going to say,

30
00:01:49,120 --> 00:01:54,730
throws IOException here and then build the code. So back on the console,

31
00:01:54,730 --> 00:01:59,470
if I try and run this code without a security manager,

32
00:01:59,470 --> 00:02:03,740
then the code works okay, and if I go to the directory,

33
00:02:03,740 --> 00:02:06,920
the file is there, and it's got out.txt, so let me delete that,

34
00:02:06,920 --> 00:02:10,610
go back to the console, and run the code again, but this time,

35
00:02:10,610 --> 00:02:12,740
I'm going to use a security manager.

36
00:02:12,740 --> 00:02:15,890
And what happens now is that we get an exception, and

37
00:02:15,890 --> 00:02:18,490
we got an access denied exception.

38
00:02:18,490 --> 00:02:20,360
I notice the exception is quite specific.

39
00:02:20,360 --> 00:02:25,390
It's a java.io.FilePermission, and it tells me exactly what it's trying to do.

40
00:02:25,390 --> 00:02:30,270
It's trying to write to the c:\tempout.txt directory.

41
00:02:30,270 --> 00:02:32,440
So how does it know that's not allowed?

42
00:02:32,440 --> 00:02:35,640
Well, that's part of the policy file that I've listed here.

43
00:02:35,640 --> 00:02:41,740
So notice in the policy file, we have permission to read the java.version.

44
00:02:41,740 --> 00:02:45,550
So when I access the java.version for inside my code, that permission is

45
00:02:45,550 --> 00:02:50,570
granted. I've been allowed to access this permission; however,

46
00:02:50,570 --> 00:02:56,040
we don't have permission to write to the file, but we can add that here.

47
00:02:56,040 --> 00:03:00,840
So if I go back to the console, and grab the text,

48
00:03:00,840 --> 00:03:05,960
and copy it to the clipboard, so if I edit the policy file

49
00:03:05,960 --> 00:03:10,440
and add that permission, so I need to say,

50
00:03:10,440 --> 00:03:11,640
permission,

51
00:03:11,640 --> 00:03:16,340
get rid of these quotes, so a java.io.FilePermission, and

52
00:03:16,340 --> 00:03:18,060
permission is to access this directory.

53
00:03:18,060 --> 00:03:20,920
I need to make sure these are forward slashes. This is a URL, and

54
00:03:20,920 --> 00:03:26,050
it'll be read as forward slashes and then use comma write, and then

55
00:03:26,050 --> 00:03:28,240
at the end of this, place a semicolon.

56
00:03:28,240 --> 00:03:32,640
So that's given me file permission to write to that file.

57
00:03:32,640 --> 00:03:37,080
So if I save this, go back to the console, and then run the code again,

58
00:03:37,080 --> 00:03:40,930
the code now works. And just to prove that, back to the

59
00:03:40,930 --> 00:03:44,620
permissions, if I comment that out, save it,

60
00:03:44,620 --> 00:03:47,210
go back to the console, and run it again,

61
00:03:47,210 --> 00:03:49,090
it fails.

62
00:03:49,090 --> 00:03:53,170
So through the policy file, we can specify which permissions

63
00:03:53,170 --> 00:03:57,740
a given piece of code is allowed to use.

64
00:03:57,740 --> 00:04:02,580
In the next chapter, we'll get into a lot more detail of how these policies work,

65
00:04:02,580 --> 00:04:04,080
where the file is loaded from,

66
00:04:04,080 --> 00:04:10,000
and where the code is loaded from, and how we can tie all of these things together.

