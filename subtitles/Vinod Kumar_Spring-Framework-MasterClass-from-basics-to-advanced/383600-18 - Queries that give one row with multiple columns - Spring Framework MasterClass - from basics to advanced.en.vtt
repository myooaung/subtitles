WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.260
Let's execute this query.

00:00:01.260 --> 00:00:03.270
That's a select star from products we had.

00:00:03.270 --> 00:00:04.130
Product underscore.

00:00:04.130 --> 00:00:05.930
Eddie is equals to 33.

00:00:05.930 --> 00:00:08.620
Product on disk already is the primary key.

00:00:08.620 --> 00:00:09.370
Obviously,

00:00:09.370 --> 00:00:11.730
if it a later records for this highly,

00:00:11.730 --> 00:00:12.960
there's going to be only one.

00:00:12.960 --> 00:00:16.040
So when I run this selected quality,

00:00:16.040 --> 00:00:17.950
this is all the output looks like,

00:00:17.950 --> 00:00:24.090
and you can see that the output is nothing but a bunch off key value pairs were key is the

00:00:24.090 --> 00:00:25.740
string column names,

00:00:25.740 --> 00:00:27.270
and for each key,

00:00:27.270 --> 00:00:28.450
there is a value off.

00:00:28.450 --> 00:00:30.670
Different types of this can be an individual.

00:00:30.670 --> 00:00:31.680
This is a string.

00:00:31.680 --> 00:00:35.790
Here is a double that could be a did our bullion.

00:00:35.790 --> 00:00:39.510
When we execute this query using the jelly busy template,

00:00:39.510 --> 00:00:43.720
a jelly busy template can worse the result in tow a map.

00:00:43.720 --> 00:00:46.120
Because map is also a key value.

00:00:46.120 --> 00:00:49.570
Pierre basically spring collects the results set,

00:00:49.570 --> 00:00:53.760
which has exactly one draw with multiple columns and constructs.

00:00:53.760 --> 00:01:00.060
A map object puts all these column names as keys and the corresponding values as the values

00:01:00.060 --> 00:01:00.900
off the keys.

00:01:00.900 --> 00:01:01.950
So does the same.

00:01:01.950 --> 00:01:07.500
Let's go back to our core Onda comment this line and then create a new function here and

00:01:07.500 --> 00:01:15.330
Let's call it as print product details on Let's Supply the any 33 just like the SQL Select

00:01:15.330 --> 00:01:16.080
Statement Day.

00:01:16.080 --> 00:01:20.350
And let's clear a new function with the name called Print Product Details,

00:01:20.350 --> 00:01:21.680
which takes an end.

00:01:21.680 --> 00:01:24.430
We can say that this is a package level function.

00:01:24.430 --> 00:01:27.640
Variable name is going to be called product i d.

00:01:27.640 --> 00:01:29.580
Let's get it off this particular to do.

00:01:29.580 --> 00:01:32.420
Let's read a string variable called a Secure,

00:01:32.420 --> 00:01:38.900
which is equals toe Select star from products were product Underscore reports to question

00:01:38.900 --> 00:01:39.190
Mark.

00:01:39.190 --> 00:01:45.060
And this time I cannot use quietly for object because Spring doesn't know how to treat this

00:01:45.060 --> 00:01:47.850
as an object because this is a bunch of values,

00:01:47.850 --> 00:01:50.180
so we use a different function this time.

00:01:50.180 --> 00:01:51.970
So that's called template Dark,

00:01:51.970 --> 00:01:53.750
Quiet for map.

00:01:53.750 --> 00:01:56.430
We can supply the string itself,

00:01:56.430 --> 00:01:58.870
or we can supply the string SQL,

00:01:58.870 --> 00:02:01.000
followed by the parameter values,

00:02:01.000 --> 00:02:04.230
which is a garage which is an array off values.

00:02:04.230 --> 00:02:07.120
So let's like that SQL we have here.

00:02:07.120 --> 00:02:10.670
The arguments are nothing but one single argument here,

00:02:10.670 --> 00:02:13.920
which is the product i D and lets us end this toe Available,

00:02:13.920 --> 00:02:16.970
called Data and data has not been created.

00:02:16.970 --> 00:02:18.300
Let's create that variable,

00:02:18.300 --> 00:02:22.430
called data spring knows what is the return data type of this function,

00:02:22.430 --> 00:02:23.320
and accordingly,

00:02:23.320 --> 00:02:24.760
it creates that variable.

00:02:24.760 --> 00:02:31.860
Now that we have a map we can straightaway printed like this are we can say data don't get

00:02:31.860 --> 00:02:38.040
and get the appropriate column names or we can look over the keys and then get the

00:02:38.040 --> 00:02:39.770
individual values first.

00:02:39.770 --> 00:02:40.790
Let's give it a try,

00:02:40.790 --> 00:02:43.630
and you should see a result off man,

00:02:43.630 --> 00:02:47.840
and you can see it is product really close to 33 so on and so forth.

00:02:47.840 --> 00:02:50.130
So let's remove this on,

00:02:50.130 --> 00:02:52.160
then print it in a different way.

00:02:52.160 --> 00:02:56.350
So let's use a for loop where we can say for key,

00:02:56.350 --> 00:03:00.660
which happens to be a string in data dark key set.

00:03:00.660 --> 00:03:03.800
So that's gonna be a set off case that we're looking over.

00:03:03.800 --> 00:03:05.450
And for each key,

00:03:05.450 --> 00:03:07.910
I want to print the key along with the value.

00:03:07.910 --> 00:03:11.410
Let's give a system that out that Wendelin key,

00:03:11.410 --> 00:03:12.220
plus,

00:03:12.220 --> 00:03:16.720
whatever the value corresponding to that is data dot get.

00:03:16.720 --> 00:03:19.680
And then we had the key as the perimeter,

00:03:19.680 --> 00:03:23.780
and they should give me a bunch of key value pairs in a different style.

00:03:23.780 --> 00:03:27.060
It's execute and see the result in a different way

