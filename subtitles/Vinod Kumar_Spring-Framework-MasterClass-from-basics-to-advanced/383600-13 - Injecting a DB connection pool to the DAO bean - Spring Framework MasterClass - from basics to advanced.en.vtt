WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:04.270
while you were able to successfully get there isn't there is one problem.

00:00:04.270 --> 00:00:10.600
Let's go door court here and then call this particular function once again and you'll see

00:00:10.600 --> 00:00:11.860
that there will be an editor.

00:00:11.860 --> 00:00:17.270
So I'm copying and pasting and let's run the court here now.

00:00:17.270 --> 00:00:18.190
When I run this,

00:00:18.190 --> 00:00:20.060
you'll see first time we get an output.

00:00:20.060 --> 00:00:21.370
There are 77 products.

00:00:21.370 --> 00:00:26.620
The second time we're getting another saying that there is a one point or exception in the

00:00:26.620 --> 00:00:28.990
create connection function off our jewelry.

00:00:28.990 --> 00:00:32.450
Bc product dio So if I go over there,

00:00:32.450 --> 00:00:33.630
you can see that it is strange.

00:00:33.630 --> 00:00:39.930
Toe lowered the driver class them while we never injected the driver class name we injected

00:00:39.930 --> 00:00:40.600
a connection.

00:00:40.600 --> 00:00:44.750
The reason for this is so first time and we call this particular function deal.

00:00:44.750 --> 00:00:45.650
Would that count?

00:00:45.650 --> 00:00:48.430
It goes to the jelly busy product Diego count,

00:00:48.430 --> 00:00:55.020
function and cause the create connection where the collection is an object that we caught

00:00:55.020 --> 00:01:00.300
dependency injected and since we're using that inside the try MIT resources block,

00:01:00.300 --> 00:01:01.960
as soon as they come out of this strike,

00:01:01.960 --> 00:01:02.820
catch block,

00:01:02.820 --> 00:01:04.330
the connection gets closed.

00:01:04.330 --> 00:01:08.840
So the next time when you're calling this function dear would not count again.

00:01:08.840 --> 00:01:09.120
Again,

00:01:09.120 --> 00:01:10.290
the control comes here.

00:01:10.290 --> 00:01:13.880
And when the connection is being obtained using cleared connection,

00:01:13.880 --> 00:01:18.050
you'll see that the if condition fates because connection is not know.

00:01:18.050 --> 00:01:20.300
But connection has been closed.

00:01:20.300 --> 00:01:25.250
So because off this now the if condition is failed and it's trained to load the driver

00:01:25.250 --> 00:01:28.220
class name where we didn't supply the driver class name.

00:01:28.220 --> 00:01:30.150
If you look at the at conflict to,

00:01:30.150 --> 00:01:35.350
we don't have the driver class name Injected Tau over Chile BC product you at all.

00:01:35.350 --> 00:01:42.400
So the GBC product deal is automatically wired with a connection object because of the art

00:01:42.400 --> 00:01:46.590
aware annotation and hence we're getting the null point exception over here.

00:01:46.590 --> 00:01:51.340
So if you wanna pictorially represent the same first time when we called the rewards dot

00:01:51.340 --> 00:01:51.940
count,

00:01:51.940 --> 00:01:56.380
the count function was called over here and that can used the connection,

00:01:56.380 --> 00:01:57.650
which is open,

00:01:57.650 --> 00:01:58.910
and there was no problem.

00:01:58.910 --> 00:02:02.590
But as soon as we hit the database and got the crowd account,

00:02:02.590 --> 00:02:06.130
the connection got closed so the connection objects still exist,

00:02:06.130 --> 00:02:07.250
but it is closed,

00:02:07.250 --> 00:02:09.430
and next time and I called the convention again,

00:02:09.430 --> 00:02:13.920
it is trying to use a connection which is now stale because the connection has been closed

00:02:13.920 --> 00:02:13.920
.

00:02:13.920 --> 00:02:17.190
So there a couple of solutions that you can come across with every time you want a

00:02:17.190 --> 00:02:17.780
connection.

00:02:17.780 --> 00:02:21.220
You manufactured a new connection like this,

00:02:21.220 --> 00:02:22.750
so make it a prototype.

00:02:22.750 --> 00:02:24.040
But unfortunately,

00:02:24.040 --> 00:02:25.920
auto wearing is done only once,

00:02:25.920 --> 00:02:29.870
and you would only get a single prototype object.

00:02:29.870 --> 00:02:33.670
So this will not help safer Goto up conflict over here.

00:02:33.670 --> 00:02:41.330
And then a noted this as a prototype be by typing attended scope off prototype on important

00:02:41.330 --> 00:02:41.890
the same.

00:02:41.890 --> 00:02:44.000
This is a prototype bean,

00:02:44.000 --> 00:02:45.440
but this is a singleton.

00:02:45.440 --> 00:02:46.920
When we got the deal Optic,

00:02:46.920 --> 00:02:48.680
we gotta singleton over here.

00:02:48.680 --> 00:02:49.050
So,

00:02:49.050 --> 00:02:51.590
do you want to also corresponds to the same thing?

00:02:51.590 --> 00:02:53.560
When I said dia would not count,

00:02:53.560 --> 00:02:56.750
it uses a new connection object.

00:02:56.750 --> 00:03:01.010
But the same collection object is also there in D or two.

00:03:01.010 --> 00:03:01.570
For example,

00:03:01.570 --> 00:03:03.280
if you make this as do you do now,

00:03:03.280 --> 00:03:09.290
both deal Andy ableto reference variables refer to the same deal object because there was a

00:03:09.290 --> 00:03:12.970
single done when that singleton object was constructed.

00:03:12.970 --> 00:03:15.570
A new connection waas injected.

00:03:15.570 --> 00:03:17.000
It's the same collection.

00:03:17.000 --> 00:03:17.460
Still,

00:03:17.460 --> 00:03:18.950
you will have the same problem.

00:03:18.950 --> 00:03:20.800
The other solution would be,

00:03:20.800 --> 00:03:21.680
for example,

00:03:21.680 --> 00:03:27.610
if I goto at conflict to and then annotate even the deal Bean.

00:03:27.610 --> 00:03:29.320
Also as a prototype,

00:03:29.320 --> 00:03:31.880
this may solve the problem temporarily.

00:03:31.880 --> 00:03:33.530
Let's go and around the same.

00:03:33.530 --> 00:03:34.630
You'll see that now.

00:03:34.630 --> 00:03:36.260
I do not have that problem.

00:03:36.260 --> 00:03:37.050
I got it.

00:03:37.050 --> 00:03:40.710
But if I make use off the same deal,

00:03:40.710 --> 00:03:43.320
object and call this another time,

00:03:43.320 --> 00:03:45.050
I might run into a problem.

00:03:45.050 --> 00:03:49.520
And that's because now here we're using the same deal object.

00:03:49.520 --> 00:03:51.340
The connection is not recreated,

00:03:51.340 --> 00:03:56.240
so even making the objects as for other types,

00:03:56.240 --> 00:03:57.940
also is not a solution.

00:03:57.940 --> 00:04:02.810
There is also another issue when you're using the common connection object.

00:04:02.810 --> 00:04:06.730
If there are multiple clients trying to make use of the same collection,

00:04:06.730 --> 00:04:10.850
then all of them will be working under the same transactions,

00:04:10.850 --> 00:04:15.390
which means that if one of the client commits the transaction defects,

00:04:15.390 --> 00:04:16.750
the other claims also.

00:04:16.750 --> 00:04:22.720
So the solution is to use a connection pool where an application creates a bunch of

00:04:22.720 --> 00:04:27.230
connection objects that can be reused instead of destroying those connection objects.

00:04:27.230 --> 00:04:29.950
A connection object is used by the client,

00:04:29.950 --> 00:04:32.060
and then connection is closed,

00:04:32.060 --> 00:04:34.180
but the connection gets recycled.

00:04:34.180 --> 00:04:36.970
Andi will be available in the pool once again,

00:04:36.970 --> 00:04:40.340
so that a lot of advantages off using the connection.

00:04:40.340 --> 00:04:44.330
Pool number one Every claim gets its own connection object,

00:04:44.330 --> 00:04:46.670
which means that there will be a separate transaction.

00:04:46.670 --> 00:04:49.880
There won't be any transaction conflicts Number two.

00:04:49.880 --> 00:04:53.090
Creating a connection object is a background process.

00:04:53.090 --> 00:04:55.960
That means it won't affect the applications.

00:04:55.960 --> 00:04:57.900
Performance number three.

00:04:57.900 --> 00:05:00.050
Each time a connection is closed,

00:05:00.050 --> 00:05:02.170
the connection gets recycled.

00:05:02.170 --> 00:05:02.620
Onda.

00:05:02.620 --> 00:05:05.800
No new object has to be constructed,

00:05:05.800 --> 00:05:09.500
are no connection off that gets destroyed and got it collected.

00:05:09.500 --> 00:05:11.440
So this improves the performance.

00:05:11.440 --> 00:05:12.190
Plus,

00:05:12.190 --> 00:05:18.670
a client doesn't have toe spend any time in opening a new collection because on average it

00:05:18.670 --> 00:05:24.240
takes almost a second to open a new connection as well as if you close the connection and

00:05:24.240 --> 00:05:25.700
destroy that connection object,

00:05:25.700 --> 00:05:28.510
there will be an impact on garbage collection.

00:05:28.510 --> 00:05:29.780
Also in Java,

00:05:29.780 --> 00:05:36.300
a connection pool is represented using an interface called Data Source from Java Extra

00:05:36.300 --> 00:05:37.440
Eskil package,

00:05:37.440 --> 00:05:40.270
which has function called as get connection.

00:05:40.270 --> 00:05:46.750
So all we need to do is find an implementation for a connection pool on Make yourself that

00:05:46.750 --> 00:05:49.680
While there are many collection pool implementations,

00:05:49.680 --> 00:05:52.580
the most popular one is one from Apache,

00:05:52.580 --> 00:05:54.590
which is called basic data source.

00:05:54.590 --> 00:05:58.330
So first let's at the 11th like released to our bomb.

00:05:58.330 --> 00:05:59.070
That example.

00:05:59.070 --> 00:06:01.490
So let's go toe mbl deposited outcome.

00:06:01.490 --> 00:06:03.600
Look for DBCP,

00:06:03.600 --> 00:06:05.600
which stand for database connection pool.

00:06:05.600 --> 00:06:14.150
On the most common one is the Apache Commons DBCP on the artifact alias Commons DBCP to

00:06:14.150 --> 00:06:18.670
click on the Sea and let's take the latest Washington to about $7 0 cure.

00:06:18.670 --> 00:06:20.520
We have a XML.

00:06:20.520 --> 00:06:22.230
We copy the dependency.

00:06:22.230 --> 00:06:27.120
Come back toe are ponder XML and scroll down somewhere here,

00:06:27.120 --> 00:06:34.890
based off to the long book formatted and save it as when I see the judge will be downloaded

00:06:34.890 --> 00:06:35.600
from the net.

00:06:35.600 --> 00:06:38.380
So now if I goto may when dependencies,

00:06:38.380 --> 00:06:44.340
you'll see that there's a Commons DBCP to it's dependency the common school to under

00:06:44.340 --> 00:06:45.550
locking chart.

00:06:45.550 --> 00:06:46.890
Now that it is done,

00:06:46.890 --> 00:06:47.990
let's do one thing.

00:06:47.990 --> 00:06:54.180
Let's create a new app conflict by copying at conflict to and pasting it as at Conflict

00:06:54.180 --> 00:06:54.570
three.

00:06:54.570 --> 00:06:58.480
Let's open the same while we need the Devi information.

00:06:58.480 --> 00:07:00.750
We don't need the connection anymore,

00:07:00.750 --> 00:07:04.260
but instead we will clear a new being here,

00:07:04.260 --> 00:07:06.900
which returns something called data Source,

00:07:06.900 --> 00:07:10.260
which is from Java Extra SQL package.

00:07:10.260 --> 00:07:18.360
Let's call it as data source and create a variable off type basic data sourced from Apache

00:07:18.360 --> 00:07:19.150
package.

00:07:19.150 --> 00:07:25.140
Let's college as Billy s equals toe new basically the source on really toe written this

00:07:25.140 --> 00:07:26.260
particular object.

00:07:26.260 --> 00:07:29.440
But in between we have toe initialize this object on.

00:07:29.440 --> 00:07:35.220
So let's not forget toe mark this as being there are two secs off properties you want to

00:07:35.220 --> 00:07:37.810
initialize for the basic data source.

00:07:37.810 --> 00:07:41.390
The number one is the DB connectivity information,

00:07:41.390 --> 00:07:43.600
which is a bunch off these values.

00:07:43.600 --> 00:07:45.970
The 2nd 1 is about the pool configuration.

00:07:45.970 --> 00:07:46.680
So first,

00:07:46.680 --> 00:07:49.430
let us set the DB connectivity information.

00:07:49.430 --> 00:07:51.450
So if a type of media start set,

00:07:51.450 --> 00:07:53.840
you'll see that you get a lot of setters on day.

00:07:53.840 --> 00:07:56.930
One of them is set driver class.

00:07:56.930 --> 00:07:59.760
Name is the variable that we have here.

00:07:59.760 --> 00:08:02.020
Billy is dot set you're in.

00:08:02.020 --> 00:08:05.830
We have the Ural Video store set user name,

00:08:05.830 --> 00:08:08.370
and the video will be have is called user.

00:08:08.370 --> 00:08:12.990
Then we have a media star said password and we have the variable called password.

00:08:12.990 --> 00:08:17.820
We also want to specify harmony connections you want in ad wants.

00:08:17.820 --> 00:08:18.600
For example,

00:08:18.600 --> 00:08:21.750
I can see when the connection pool is constructed.

00:08:21.750 --> 00:08:24.650
What is the number off connections to be present initially,

00:08:24.650 --> 00:08:28.370
so I can say your media start set initial size.

00:08:28.370 --> 00:08:31.960
Let's say I want initially 10 connections to be really,

00:08:31.960 --> 00:08:32.890
as in Vanek,

00:08:32.890 --> 00:08:34.840
Klein is asking for a connection.

00:08:34.840 --> 00:08:37.760
A connection is given from the pool on DE,

00:08:37.760 --> 00:08:40.470
so the number off active connections starts,

00:08:40.470 --> 00:08:41.210
read using.

00:08:41.210 --> 00:08:44.270
And once it becomes zero,

00:08:44.270 --> 00:08:47.350
then new connections are added automatically.

00:08:47.350 --> 00:08:51.540
This means that there will be more number of connections in the connection pool,

00:08:51.540 --> 00:08:58.470
But you can also set a cap to this by typing video start set max total and then supply.

00:08:58.470 --> 00:08:58.830
Let's say,

00:08:58.830 --> 00:08:59.460
for example,

00:08:59.460 --> 00:09:01.710
I want a maximum off 100 connections.

00:09:01.710 --> 00:09:02.660
Not more than that.

00:09:02.660 --> 00:09:08.250
That means that there are at that time 100 climbs that are consuming the connections.

00:09:08.250 --> 00:09:10.770
The 101st client will have to wait.

00:09:10.770 --> 00:09:13.510
You can also specify how long that has to wait.

00:09:13.510 --> 00:09:17.480
You have something called Max weight in milliseconds.

00:09:17.480 --> 00:09:20.960
Let's say the max wait period is 500 millisecond.

00:09:20.960 --> 00:09:25.650
That means how physical and a client will have to wait before getting an exception.

00:09:25.650 --> 00:09:27.450
But we didn't that half a second.

00:09:27.450 --> 00:09:29.750
If there is a connection being released,

00:09:29.750 --> 00:09:33.570
that connection can be reused by the new plant now,

00:09:33.570 --> 00:09:38.010
once all the clients that are consuming the connection starts closing the connection,

00:09:38.010 --> 00:09:44.830
they all come back toe the connection pool as idle because initially there was 10 but now

00:09:44.830 --> 00:09:47.150
maximum off 100 have been reached.

00:09:47.150 --> 00:09:51.410
Now the connections being closed will become idol,

00:09:51.410 --> 00:09:55.560
and they can always say how many idle connections you want to keep so I can save media

00:09:55.560 --> 00:09:57.590
start set max item,

00:09:57.590 --> 00:10:00.160
and then I can say 50 for example now.

00:10:00.160 --> 00:10:00.690
Likewise,

00:10:00.690 --> 00:10:05.300
you also have few other options such as Billy is to accept men item,

00:10:05.300 --> 00:10:06.010
for example.

00:10:06.010 --> 00:10:07.840
I can say at any given point in time,

00:10:07.840 --> 00:10:13.410
I always wanted to connections to be idle so that in a background process,

00:10:13.410 --> 00:10:15.830
connection pull creates new connection optics.

00:10:15.830 --> 00:10:20.490
Depending on which implementation off a connection pool you're using these properties may

00:10:20.490 --> 00:10:21.240
change.

00:10:21.240 --> 00:10:21.630
So,

00:10:21.630 --> 00:10:27.520
for the most common basic data source is the most popular settings that you may want to do

00:10:27.520 --> 00:10:27.520
.

00:10:27.520 --> 00:10:29.650
Now that we have a connection pool ready,

00:10:29.650 --> 00:10:34.470
we do have your object off a very busy probable,

00:10:34.470 --> 00:10:39.500
but the GBC product Dior has no dependency on this particular being.

00:10:39.500 --> 00:10:41.230
Let's get off this cope also,

00:10:41.230 --> 00:10:42.840
we don't want this to be a prototype.

00:10:42.840 --> 00:10:44.850
Both of these are singleton beans,

00:10:44.850 --> 00:10:46.170
but everything,

00:10:46.170 --> 00:10:50.550
Jerry busy product deal will function is called such as count Function is card.

00:10:50.550 --> 00:10:53.000
I want the count function toe.

00:10:53.000 --> 00:10:56.870
Use a new connection from this particular pool to do that.

00:10:56.870 --> 00:10:57.650
Let's go to the jury.

00:10:57.650 --> 00:10:58.870
Busy product deal.

00:10:58.870 --> 00:11:03.000
We probably may not use this particular valuable at all,

00:11:03.000 --> 00:11:05.830
but just to make sure that our previous programs work,

00:11:05.830 --> 00:11:06.810
let us keep this.

00:11:06.810 --> 00:11:14.110
We also will say this time a private data source on Let's call it US data source itself as

00:11:14.110 --> 00:11:14.810
the variable.

00:11:14.810 --> 00:11:19.130
We have to import it on with a press command shift for toe import.

00:11:19.130 --> 00:11:22.840
The same from Java extort SQL package on.

00:11:22.840 --> 00:11:25.000
We want this to be automatically wired.

00:11:25.000 --> 00:11:30.750
So I'm gonna copy this on based over here while the dinosaurs gets injected because of my

00:11:30.750 --> 00:11:31.010
app.

00:11:31.010 --> 00:11:31.730
Conflict three.

00:11:31.730 --> 00:11:32.050
Here.

00:11:32.050 --> 00:11:33.670
So there is a bean.

00:11:33.670 --> 00:11:34.880
There is a B.

00:11:34.880 --> 00:11:37.420
And when spring collects this particular being object,

00:11:37.420 --> 00:11:40.680
it realizes that there is an auto well dependency.

00:11:40.680 --> 00:11:46.950
This qualifies for the dependency and this object gets injected automatically over here.

00:11:46.950 --> 00:11:51.240
The other wearing also first is done based on the name,

00:11:51.240 --> 00:11:51.970
for example,

00:11:51.970 --> 00:11:56.970
spring will look in the container whether do we have a bean whose name is data source And

00:11:56.970 --> 00:11:57.640
look at this.

00:11:57.640 --> 00:11:59.890
We have the exact same name here,

00:11:59.890 --> 00:12:04.950
but in getting the function name here is different than it's gonna check.

00:12:04.950 --> 00:12:10.640
Is there an object off this data type and the object data type?

00:12:10.640 --> 00:12:12.120
Here is a data source.

00:12:12.120 --> 00:12:13.540
Even if you have little basically,

00:12:13.540 --> 00:12:16.510
Dassault's basically the source implements data source.

00:12:16.510 --> 00:12:20.790
It qualifies as an instance after the source that gets injected.

00:12:20.790 --> 00:12:22.670
So it's always a good practice toe.

00:12:22.670 --> 00:12:29.300
Maintain the same name for both the bean as well as the variable here we made on in tow.

00:12:29.300 --> 00:12:31.290
One problem with this one.

00:12:31.290 --> 00:12:32.950
We will come back to that in a minute.

00:12:32.950 --> 00:12:33.590
Well,

00:12:33.590 --> 00:12:33.890
first,

00:12:33.890 --> 00:12:39.510
modify our clear connection functions such that if there is a leader source and it is not

00:12:39.510 --> 00:12:40.990
equal to know so it's a hurt.

00:12:40.990 --> 00:12:43.970
If Gator source not equals TUNEL,

00:12:43.970 --> 00:12:48.800
then we will see later it on data source dot get connection.

00:12:48.800 --> 00:12:54.880
So that is a function that we would be using to true and I little connection and that

00:12:54.880 --> 00:13:00.620
connection object is going to be written on that is going to be used over here at the end

00:13:00.620 --> 00:13:01.560
of this strike edge,

00:13:01.560 --> 00:13:03.200
the connection gets closed,

00:13:03.200 --> 00:13:08.050
which means the connection is returned back to the pool pool will automatically clear its

00:13:08.050 --> 00:13:09.820
resources and then reset.

00:13:09.820 --> 00:13:12.390
And it's ready for new client as well.

00:13:12.390 --> 00:13:13.000
Let's go.

00:13:13.000 --> 00:13:18.860
So all our files one last thing we have to do is to make sure that our program uses a

00:13:18.860 --> 00:13:19.330
contract.

00:13:19.330 --> 00:13:19.610
Three.

00:13:19.610 --> 00:13:22.270
Now no import the same.

00:13:22.270 --> 00:13:23.690
When we run this score,

00:13:23.690 --> 00:13:26.050
we may come across an unusual error.

00:13:26.050 --> 00:13:27.140
Let's give it a try.

00:13:27.140 --> 00:13:28.420
When I run this Korea,

00:13:28.420 --> 00:13:30.470
you'd see that we have an exception.

00:13:30.470 --> 00:13:32.470
Let's figure out what is the problem on?

00:13:32.470 --> 00:13:34.290
The problem is in the line here.

00:13:34.290 --> 00:13:37.240
It is ever creating being with name Jerry BCD,

00:13:37.240 --> 00:13:39.350
a well defined in a conflict tree,

00:13:39.350 --> 00:13:44.830
unsatisfied dependency expressed through the method to leave the city of all parameters.

00:13:44.830 --> 00:13:51.500
Zero Nestle exception is it's going to say you're no qualifying being off type connection

00:13:51.500 --> 00:13:52.190
available,

00:13:52.190 --> 00:13:56.500
and it is expected at least one B now the meaning off.

00:13:56.500 --> 00:14:00.600
This is when Spring is trying to resolve the dependencies off days.

00:14:00.600 --> 00:14:05.050
It finds that it has dependency on two off this particular variables.

00:14:05.050 --> 00:14:06.500
But as it finds,

00:14:06.500 --> 00:14:09.600
imagine being only for this particular auto wiring,

00:14:09.600 --> 00:14:12.440
not for this and hence it is giving an exception,

00:14:12.440 --> 00:14:15.620
saying auto world dependency injection is failing.

00:14:15.620 --> 00:14:19.990
I can just get out of this debate about the wild on the problem would be solved.

00:14:19.990 --> 00:14:23.030
But in case if I go back to the program on,

00:14:23.030 --> 00:14:28.140
then change here toe a conflict to then it will fail because then outerwear is not present

00:14:28.140 --> 00:14:28.650
for this.

00:14:28.650 --> 00:14:30.500
So in practice,

00:14:30.500 --> 00:14:33.600
we don't come across with this problem because if it all,

00:14:33.600 --> 00:14:36.210
we have declared a variable and it needs to be wild.

00:14:36.210 --> 00:14:40.770
We need to have connections so somewhere we would be having a connection object also,

00:14:40.770 --> 00:14:41.860
However,

00:14:41.860 --> 00:14:42.610
in this case,

00:14:42.610 --> 00:14:46.850
I want to maintain this for my compatibility with other programs.

00:14:46.850 --> 00:14:51.440
But I really don't need a connection in case of connection is not available.

00:14:51.440 --> 00:14:56.250
So what I can do that can go ahead and I can given Element here called required,

00:14:56.250 --> 00:14:59.330
equals Two falls indicating that hey,

00:14:59.330 --> 00:15:02.660
if you find a connection inject if you don't find a connection,

00:15:02.660 --> 00:15:04.920
don't throw me another now the same thing.

00:15:04.920 --> 00:15:06.990
I also like to give it to this one,

00:15:06.990 --> 00:15:12.630
because if I'm running the previous program with that conflict to this is what is used and

00:15:12.630 --> 00:15:16.550
there is no connection pool with that conflict to and this would cause the problem.

00:15:16.550 --> 00:15:21.080
So I'm gonna copy this required constant funds ongoing paste Over here.

00:15:21.080 --> 00:15:21.700
Now,

00:15:21.700 --> 00:15:22.650
in practice,

00:15:22.650 --> 00:15:24.550
we don't use this,

00:15:24.550 --> 00:15:28.970
but this is a particular situation because we're learning with different configurations and

00:15:28.970 --> 00:15:30.800
I don't want to really delete this court.

00:15:30.800 --> 00:15:36.290
So let's go back here now and then under court and I should be getting an output without a

00:15:36.290 --> 00:15:36.850
problem.

00:15:36.850 --> 00:15:39.130
But I think I still see another,

00:15:39.130 --> 00:15:43.250
probably because when I copy pasted the country to toe at Con victory,

00:15:43.250 --> 00:15:44.860
I forgot toe village,

00:15:44.860 --> 00:15:48.150
this one where it was tryingto inject the dependency.

00:15:48.150 --> 00:15:48.600
Now,

00:15:48.600 --> 00:15:50.690
I don't have any dependency over here,

00:15:50.690 --> 00:15:54.060
so obviously this is an independent being.

00:15:54.060 --> 00:15:56.200
This is another independent being,

00:15:56.200 --> 00:15:59.110
but spring collect this being object,

00:15:59.110 --> 00:16:04.840
Andi finds that it has a dependency on a data source and it automatically injects that are

00:16:04.840 --> 00:16:06.360
automatically wires the same.

00:16:06.360 --> 00:16:12.860
So let's say on the court and then run our program and see that we get an output without a

00:16:12.860 --> 00:16:13.490
problem.

00:16:13.490 --> 00:16:14.790
Of course,

00:16:14.790 --> 00:16:17.110
if I uncommon days,

00:16:17.110 --> 00:16:19.090
I should still be able to get the result,

00:16:19.090 --> 00:16:21.990
because this time I have a dependency here.

00:16:21.990 --> 00:16:23.390
But It's really not required.

00:16:23.390 --> 00:16:25.890
And spring will not cause any problem at all.

00:16:25.890 --> 00:16:27.300
So one last time,

00:16:27.300 --> 00:16:29.070
I'm gonna run the court on,

00:16:29.070 --> 00:16:32.200
See that I get the result without any problem.

