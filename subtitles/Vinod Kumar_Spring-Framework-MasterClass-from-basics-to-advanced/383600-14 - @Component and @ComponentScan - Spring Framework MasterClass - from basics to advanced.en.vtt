WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.500
in our up con victory.

00:00:01.500 --> 00:00:03.310
If you look at this particular being,

00:00:03.310 --> 00:00:07.170
the only thing that we have done is that we created a being object.

00:00:07.170 --> 00:00:08.950
Onda returned the same.

00:00:08.950 --> 00:00:12.380
There's no dependency injection done here as a less.

00:00:12.380 --> 00:00:14.050
There's no wiring done here.

00:00:14.050 --> 00:00:17.490
Spring is smart enoughto automatically do all these things.

00:00:17.490 --> 00:00:18.060
Also.

00:00:18.060 --> 00:00:18.730
For example,

00:00:18.730 --> 00:00:22.690
if I get off days and if I try to run the program off course,

00:00:22.690 --> 00:00:23.980
the application is gonna fail.

00:00:23.980 --> 00:00:26.100
Because at this point in time,

00:00:26.100 --> 00:00:27.140
our program,

00:00:27.140 --> 00:00:29.010
which is using up con victory,

00:00:29.010 --> 00:00:32.850
is trying to look for a being whose name is Jerry B C D E O.

00:00:32.850 --> 00:00:34.480
On in this afcon victory.

00:00:34.480 --> 00:00:38.720
We don't have any being matching that particular name or stereotype.

00:00:38.720 --> 00:00:42.230
This is where we have no Della spring that hey,

00:00:42.230 --> 00:00:48.820
go and look in a package such as this quarter in order Diego and load all the beans from

00:00:48.820 --> 00:00:49.190
there.

00:00:49.190 --> 00:00:52.370
How does the spring know which class to lure from here?

00:00:52.370 --> 00:00:53.130
For that,

00:00:53.130 --> 00:00:58.450
we have to go to this particular class and annotate the same with that component,

00:00:58.450 --> 00:01:01.990
and we can optionally give a name center,

00:01:01.990 --> 00:01:02.580
for example.

00:01:02.580 --> 00:01:03.500
I can say Julie,

00:01:03.500 --> 00:01:05.200
BC deal like this.

00:01:05.200 --> 00:01:07.640
If I don't give the name over here.

00:01:07.640 --> 00:01:10.630
It will take the same name as the class name,

00:01:10.630 --> 00:01:16.070
but starting with a lower case that are so since we are looking for a specific name here,

00:01:16.070 --> 00:01:21.990
let's give this name as Jerry busy dio and in orderto tell spring that you have to scan on

00:01:21.990 --> 00:01:23.580
the component from this package.

00:01:23.580 --> 00:01:30.570
We goto our up Conflict three and I had an annotation here at Component Scan and then stay

00:01:30.570 --> 00:01:31.100
here.

00:01:31.100 --> 00:01:35.490
Based packages equals two and ari off strengths,

00:01:35.490 --> 00:01:37.180
representing different packages.

00:01:37.180 --> 00:01:37.710
Now,

00:01:37.710 --> 00:01:39.110
since it is based package,

00:01:39.110 --> 00:01:40.650
I can simply say quarter,

00:01:40.650 --> 00:01:41.170
we know,

00:01:41.170 --> 00:01:43.600
but the little start scanning everywhere,

00:01:43.600 --> 00:01:48.650
including CMG Deol programs and other places.

00:01:48.650 --> 00:01:50.700
It is always a good practice toe matter.

00:01:50.700 --> 00:01:52.370
It don't know specific packages,

00:01:52.370 --> 00:01:53.600
so I'm gonna get cold out.

00:01:53.600 --> 00:01:53.790
You know,

00:01:53.790 --> 00:01:55.410
Don Diego on.

00:01:55.410 --> 00:01:56.110
Now,

00:01:56.110 --> 00:02:00.920
spring looking at this particular components can goes to this particular package.

00:02:00.920 --> 00:02:04.950
Quarter been ordered DeVault and any other sub packages if exists,

00:02:04.950 --> 00:02:08.010
and then try to load all the components.

00:02:08.010 --> 00:02:12.820
Another components are nothing but the classes that are annotated as at components or dummy

00:02:12.820 --> 00:02:13.190
product.

00:02:13.190 --> 00:02:16.750
Dio is not a component because it's not been marked over here,

00:02:16.750 --> 00:02:18.480
but the GBC product.

00:02:18.480 --> 00:02:21.020
Diablo is marked with that component,

00:02:21.020 --> 00:02:22.830
so this qualifies on.

00:02:22.830 --> 00:02:23.300
Also,

00:02:23.300 --> 00:02:25.550
it has got a couple of other weddings done,

00:02:25.550 --> 00:02:30.260
which means that one of the bean like data source is automatically wired toe.

00:02:30.260 --> 00:02:32.720
This on connection is not form,

00:02:32.720 --> 00:02:35.250
so there is no dependency injection than over here.

00:02:35.250 --> 00:02:42.550
And now I should be able tow run the court access this being jerry BC deol While we did not

00:02:42.550 --> 00:02:43.140
instance,

00:02:43.140 --> 00:02:45.660
she ate spring automatically created the same.

00:02:45.660 --> 00:02:46.930
So let's say,

00:02:46.930 --> 00:02:47.410
the court.

00:02:47.410 --> 00:02:47.910
Andi,

00:02:47.910 --> 00:02:52.730
go back to our application around the application to see the result.

00:02:52.730 --> 00:02:55.400
Let's go back to the chili busy product deal.

00:02:55.400 --> 00:02:58.350
A component is a very generic name,

00:02:58.350 --> 00:03:01.320
depending on what kind of class this is.

00:03:01.320 --> 00:03:02.050
For example,

00:03:02.050 --> 00:03:05.350
is this a clause that belongs to the service here,

00:03:05.350 --> 00:03:07.100
which contains business logic?

00:03:07.100 --> 00:03:09.800
Or does it contain data access logic?

00:03:09.800 --> 00:03:13.980
So that means it belongs to a repository or deal earlier,

00:03:13.980 --> 00:03:17.800
Or is it a controller based on that,

00:03:17.800 --> 00:03:20.780
you have specific type of component annotations.

00:03:20.780 --> 00:03:22.720
So instead of giving this,

00:03:22.720 --> 00:03:25.540
I can also give at the rate controller,

00:03:25.540 --> 00:03:29.050
though it doesn't make any sense yet because it's not a controller.

00:03:29.050 --> 00:03:34.540
But this would still work so it's going to get out by running the court and notice it works

00:03:34.540 --> 00:03:34.540
.

00:03:34.540 --> 00:03:35.990
So instead of controller,

00:03:35.990 --> 00:03:41.200
I can also give as a repository which is nothing but the Diego.

00:03:41.200 --> 00:03:42.920
So I'm gonna run the court.

00:03:42.920 --> 00:03:44.010
It still works.

00:03:44.010 --> 00:03:46.570
I can also give here service.

00:03:46.570 --> 00:03:47.160
Typically,

00:03:47.160 --> 00:03:49.650
services are nothing but business logic classes,

00:03:49.650 --> 00:03:51.780
and this is not a business logic class,

00:03:51.780 --> 00:03:52.600
but that,

00:03:52.600 --> 00:03:52.790
sir,

00:03:52.790 --> 00:03:59.910
is also qualified for components can you can also give a at configuration and absolutely,

00:03:59.910 --> 00:04:01.770
this is not a configuration plants,

00:04:01.770 --> 00:04:02.220
but still,

00:04:02.220 --> 00:04:03.240
this is gonna work.

00:04:03.240 --> 00:04:06.340
And if you are working with a Web application,

00:04:06.340 --> 00:04:11.900
you also have another annotation called rest controller and that also would work but the

00:04:11.900 --> 00:04:14.200
best suited for this particular class.

00:04:14.200 --> 00:04:17.270
Because this being a deal which is nothing but a repository,

00:04:17.270 --> 00:04:21.560
the in addition that you should be using is reported to be now,

00:04:21.560 --> 00:04:22.990
as we saw earlier.

00:04:22.990 --> 00:04:25.840
It does not matter what annotation you used.

00:04:25.840 --> 00:04:28.660
It still is qualified for components can.

00:04:28.660 --> 00:04:29.350
However,

00:04:29.350 --> 00:04:32.250
depending on the environment that your application is running,

00:04:32.250 --> 00:04:36.330
a specific annotation that you use may have a specific impact.

00:04:36.330 --> 00:04:37.380
For example,

00:04:37.380 --> 00:04:39.410
in an NBC application that,

00:04:39.410 --> 00:04:41.690
plus annotated as at controller,

00:04:41.690 --> 00:04:43.670
has some special privileges.

00:04:43.670 --> 00:04:44.940
So it's a good practice toe.

00:04:44.940 --> 00:04:49.730
Identify what kind of class that you have and then on a treat them accordingly,

00:04:49.730 --> 00:04:51.160
as at controller,

00:04:51.160 --> 00:04:53.350
at service or at repository.

