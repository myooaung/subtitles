1
00:00:01,010 --> 00:00:03,840
[Autogenerated] Now let's do a quick review of Kubernetes.

2
00:00:03,840 --> 00:00:06,960
So we know that Kubernetes is an open source system and it

3
00:00:06,960 --> 00:00:09,720
really is all about automating deployments,

4
00:00:09,720 --> 00:00:13,580
scaling and then managing your containers.

5
00:00:13,580 --> 00:00:16,140
They're running within your pots.

6
00:00:16,140 --> 00:00:20,070
So Kubernetes itself has a master node and that kind

7
00:00:20,070 --> 00:00:23,340
of access the main command center, if you will.

8
00:00:23,340 --> 00:00:27,530
That communicates out to the worker nodes that you see down here below.

9
00:00:27,530 --> 00:00:31,240
And they, of course, run the pods, which run the containers.

10
00:00:31,240 --> 00:00:34,820
Now the way we can send commands into the Master Control center or

11
00:00:34,820 --> 00:00:38,100
the master node is through the kubectl command,

12
00:00:38,100 --> 00:00:40,430
and we'll be talking about just a few of those basic

13
00:00:40,430 --> 00:00:43,140
commands as a quick review here.

14
00:00:43,140 --> 00:00:43,320
Now,

15
00:00:43,320 --> 00:00:46,760
where Kubernetes provides a ton of value is in the

16
00:00:46,760 --> 00:00:49,240
different resource types that it has.

17
00:00:49,240 --> 00:00:52,170
So the lowest level resource is a pod,

18
00:00:52,170 --> 00:00:55,240
and we know that that's where our containers run.

19
00:00:55,240 --> 00:00:58,200
And then, of course, we have different ways to deploy these pods.

20
00:00:58,200 --> 00:01:01,380
We can do blue green deployments and canary deployments and

21
00:01:01,380 --> 00:01:04,740
rolling update deployments and all kinds of fun stuff

22
00:01:04,740 --> 00:01:07,040
through the deployment resource.

23
00:01:07,040 --> 00:01:10,680
Then that relies on replica sets to ensure that the desired

24
00:01:10,680 --> 00:01:14,970
number of pods and the current number of pods match up when it

25
00:01:14,970 --> 00:01:16,750
comes to network communication.

26
00:01:16,750 --> 00:01:21,050
We have services that handles knowing the IP address of the different

27
00:01:21,050 --> 00:01:24,120
pots so that if they get removed and a new one comes up,

28
00:01:24,120 --> 00:01:26,920
we don't have to change anything in our application.

29
00:01:26,920 --> 00:01:30,340
It just knows about what's called the Cluster IP.

30
00:01:30,340 --> 00:01:33,550
And then, of course, we can also work with storage,

31
00:01:33,550 --> 00:01:36,190
we can, store, key value pairs and CONFIG.

32
00:01:36,190 --> 00:01:38,830
Maps and we can even store secrets.

33
00:01:38,830 --> 00:01:40,540
Sensitive data.

34
00:01:40,540 --> 00:01:43,130
Now that's a quick review of the main resource is that

35
00:01:43,130 --> 00:01:46,380
we've covered in the prior courses in this learning path

36
00:01:46,380 --> 00:01:49,140
on Kubernetes for developers.

37
00:01:49,140 --> 00:01:51,060
When it comes to the Yamil in Kubernetes,

38
00:01:51,060 --> 00:01:53,510
there's quite a bit because each of these resource

39
00:01:53,510 --> 00:01:56,440
is could have its own YAML file.

40
00:01:56,440 --> 00:01:59,370
But the main one will typically work with is Deployments.

41
00:01:59,370 --> 00:02:04,040
Here's an example of a deployment for an engine X front end server.

42
00:02:04,040 --> 00:02:06,500
So we have our API and our type.

43
00:02:06,500 --> 00:02:08,440
We have our metadata.

44
00:02:08,440 --> 00:02:09,750
Our labels, of course,

45
00:02:09,750 --> 00:02:13,800
are how we can hook different Kubernetes Resource is together,

46
00:02:13,800 --> 00:02:16,670
so because this has a label of my engine X,

47
00:02:16,670 --> 00:02:21,460
a service could target that label And that app My engine

48
00:02:21,460 --> 00:02:24,140
X would now be part of that service.

49
00:02:24,140 --> 00:02:24,490
That way,

50
00:02:24,490 --> 00:02:29,460
the cluster IP s of the different pods deployed here would be known Now.

51
00:02:29,460 --> 00:02:31,870
The selector, of course, is how we say,

52
00:02:31,870 --> 00:02:35,740
here's our specifications are spec for our deployment.

53
00:02:35,740 --> 00:02:38,910
That, of course, jumps down into the pod template.

54
00:02:38,910 --> 00:02:41,640
Select the tear front end in this case.

55
00:02:41,640 --> 00:02:44,280
And then we've already talked about how we have the internet,

56
00:02:44,280 --> 00:02:49,020
Alpine as the image, and that's the type of gamble that will be seen.

57
00:02:49,020 --> 00:02:51,170
So whether you've worked a lot with kubernetes or

58
00:02:51,170 --> 00:02:53,140
you're a little bit newer to it,

59
00:02:53,140 --> 00:02:57,940
we'll see quite a bit of this as we move along throughout the course,

60
00:02:57,940 --> 00:03:00,280
a quick review of the commands would give us these.

61
00:03:00,280 --> 00:03:04,980
We'd have our kubectl get and the get could get pods,

62
00:03:04,980 --> 00:03:07,290
get deployments, get replica sets services,

63
00:03:07,290 --> 00:03:10,920
or we could just get everything get all we can create.

64
00:03:10,920 --> 00:03:12,940
Resource is from scratch.

65
00:03:12,940 --> 00:03:13,750
And then, in this case,

66
00:03:13,750 --> 00:03:18,740
we're using the dash F switch to to find a YAML file to create that resource.

67
00:03:18,740 --> 00:03:19,480
And then, of course,

68
00:03:19,480 --> 00:03:24,740
we could update a resource or create it using the kubectl apply command.

69
00:03:24,740 --> 00:03:25,580
Same scenario.

70
00:03:25,580 --> 00:03:29,630
Here we have the dash F that we're capturing now.

71
00:03:29,630 --> 00:03:32,570
From there we can also do things like port forward.

72
00:03:32,570 --> 00:03:35,910
We know that in Kubernetes our pods get cluster IP s and

73
00:03:35,910 --> 00:03:38,930
those are internal by default to the cluster.

74
00:03:38,930 --> 00:03:42,640
So outside of the cluster, we can't get to those by default.

75
00:03:42,640 --> 00:03:46,440
But we can use the kubectl Port forward Command to handle

76
00:03:46,440 --> 00:03:48,840
that type of scenario if we'd like.

77
00:03:48,840 --> 00:03:49,600
And then, of course,

78
00:03:49,600 --> 00:03:53,370
we could even set up load balancer services and other types of

79
00:03:53,370 --> 00:03:57,240
services to get into our different pods as well.

80
00:03:57,240 --> 00:03:59,960
So the different resource is that we just talked about are

81
00:03:59,960 --> 00:04:03,310
gonna be pretty critical when we talk about moving from

82
00:04:03,310 --> 00:04:05,970
Docker Compose to Kubernetes.

83
00:04:05,970 --> 00:04:08,680
That's why earlier I mentioned that having some background

84
00:04:08,680 --> 00:04:12,150
knowledge on these resource is will really help you out because

85
00:04:12,150 --> 00:04:16,790
now we'll start diving into the map VPNs between Docker Compose

86
00:04:16,790 --> 00:04:21,000
and Kubernetes resources. Let's go ahead and look at that next

