1
00:00:01,140 --> 00:00:02,940
[Autogenerated] So what is scaffold?

2
00:00:02,940 --> 00:00:04,700
Well, based on what you've heard so far,

3
00:00:04,700 --> 00:00:07,190
you probably know that it could be used to convert

4
00:00:07,190 --> 00:00:08,930
from Docker Compose to Kubernetes.

5
00:00:08,930 --> 00:00:11,640
Otherwise, it probably wouldn't be in this course,

6
00:00:11,640 --> 00:00:13,510
but it could do some other things as well.

7
00:00:13,510 --> 00:00:14,930
I like to think of it this way.

8
00:00:14,930 --> 00:00:18,740
Scaffold equals local kubernetes development.

9
00:00:18,740 --> 00:00:23,280
Now, what I mean by that is when you use Docker Compose on its own,

10
00:00:23,280 --> 00:00:27,370
it just runs containers locally and handles orchestrating those containers.

11
00:00:27,370 --> 00:00:30,080
But it has nothing to do with kubernetes now.

12
00:00:30,080 --> 00:00:33,430
What's nice about it, though, is it can automatically build the images,

13
00:00:33,430 --> 00:00:37,140
run the containers and help you out that way,

14
00:00:37,140 --> 00:00:39,770
what scaffold does is very similar.

15
00:00:39,770 --> 00:00:43,840
It can also build your images and deploy your containers.

16
00:00:43,840 --> 00:00:46,620
But it will deploy those containers to the Kubernetes

17
00:00:46,620 --> 00:00:49,910
cluster that you choose now by default if you're running

18
00:00:49,910 --> 00:00:51,260
something like Docker desktop,

19
00:00:51,260 --> 00:00:54,210
which I'll be doing or mini cube and it's just going to

20
00:00:54,210 --> 00:00:56,520
use your local Kubernetes cluster.

21
00:00:56,520 --> 00:01:00,100
But there are additional configuration options for running in a

22
00:01:00,100 --> 00:01:02,780
different cluster that might be located somewhere off Prem,

23
00:01:02,780 --> 00:01:05,930
for example, here's how they officially define it.

24
00:01:05,930 --> 00:01:08,560
Scaffold handles the workflow for building,

25
00:01:08,560 --> 00:01:10,770
pushing and deploying your application,

26
00:01:10,770 --> 00:01:15,140
allowing you to focus on what matters most riding code.

27
00:01:15,140 --> 00:01:17,140
And that's what this is all about.

28
00:01:17,140 --> 00:01:18,250
If you, for instance,

29
00:01:18,250 --> 00:01:21,680
had a micro service type scenario and you want to run a

30
00:01:21,680 --> 00:01:25,050
bunch of containers simultaneously but maybe only develop

31
00:01:25,050 --> 00:01:26,910
against one or two of those,

32
00:01:26,910 --> 00:01:29,610
then scaffold would make it where you could still run everything in

33
00:01:29,610 --> 00:01:33,140
kubernetes as it would be more a production scenario.

34
00:01:33,140 --> 00:01:38,390
But as you change your code, it can redeploy those change containers,

35
00:01:38,390 --> 00:01:41,310
and it even has some sinking features to speed that up.

36
00:01:41,310 --> 00:01:43,760
If you just need to redeploy some files and I'll

37
00:01:43,760 --> 00:01:49,040
walk you through some of that now, when it comes to Docker Compose and scaffold,

38
00:01:49,040 --> 00:01:52,230
Scaffold actually uses the composed tool,

39
00:01:52,230 --> 00:01:53,630
the one that we covered previously.

40
00:01:53,630 --> 00:01:55,350
The starts with the K,

41
00:01:55,350 --> 00:01:58,510
and we know that that composed tool could be used to convert from

42
00:01:58,510 --> 00:02:01,740
Docker Compose to kubernetes manifest files.

43
00:02:01,740 --> 00:02:06,240
Well, to do that, there's a command we're gonna cover called Scaffold in it.

44
00:02:06,240 --> 00:02:09,460
And it has a command line flag where we can defined the

45
00:02:09,460 --> 00:02:12,130
Docker Compose file under the covers.

46
00:02:12,130 --> 00:02:13,950
It will then run a process,

47
00:02:13,950 --> 00:02:17,610
which is gonna be the composed process we covered earlier and then

48
00:02:17,610 --> 00:02:21,640
there going to output those Yamil files for kubernetes.

49
00:02:21,640 --> 00:02:25,570
Now it's also going to generate a type of build artifact file.

50
00:02:25,570 --> 00:02:28,140
We call it scaffold dot YAML file.

51
00:02:28,140 --> 00:02:33,240
And this is gonna be the file that will monitor your local code for changes,

52
00:02:33,240 --> 00:02:37,260
automatically rerun the Docker bill process and then even handle

53
00:02:37,260 --> 00:02:40,890
the deployment of that updated image to get that container for the

54
00:02:40,890 --> 00:02:43,540
image running in a pot in kubernetes.

55
00:02:43,540 --> 00:02:46,390
So you can think of this as someone analogous to the

56
00:02:46,390 --> 00:02:48,840
YAML file you'll see in kubernetes.

57
00:02:48,840 --> 00:02:54,840
But it's very specific to building your scaffolding artifacts.

58
00:02:54,840 --> 00:02:57,770
So here's what a scaffold IT YAML file might look like.

59
00:02:57,770 --> 00:02:58,340
First off,

60
00:02:58,340 --> 00:03:02,200
you'll notice it has an API version a kind and metadata much

61
00:03:02,200 --> 00:03:04,940
like you'd see with Kubernetes manifest.

62
00:03:04,940 --> 00:03:07,630
And we're gonna define whatever the latest version is

63
00:03:07,630 --> 00:03:10,740
of scaffold in the API versioning.

64
00:03:10,740 --> 00:03:15,100
Now moving on down to the build section, you'll notice that we have artifacts.

65
00:03:15,100 --> 00:03:15,870
In this case,

66
00:03:15,870 --> 00:03:20,350
we're gonna have an image called engine NICs jumpstart the context

67
00:03:20,350 --> 00:03:22,750
of where it's gonna be watching for changes to,

68
00:03:22,750 --> 00:03:23,240
for instance,

69
00:03:23,240 --> 00:03:26,160
source code files is gonna be the local folder

70
00:03:26,160 --> 00:03:29,340
wherever the scaffold that YAML file is,

71
00:03:29,340 --> 00:03:33,370
and then our Docker file is also located in that location,

72
00:03:33,370 --> 00:03:35,940
at least in this example.

73
00:03:35,940 --> 00:03:38,600
Now what will happen there is as we change our code,

74
00:03:38,600 --> 00:03:41,740
it will detect that and then automatically rebuild the

75
00:03:41,740 --> 00:03:45,140
image and deploy that to kubernetes.

76
00:03:45,140 --> 00:03:48,340
Now, how does it know how to deploy the kubernetes, though?

77
00:03:48,340 --> 00:03:50,560
Well, as I mentioned earlier, under the covers,

78
00:03:50,560 --> 00:03:52,100
these scaffolding Nick cmdlet,

79
00:03:52,100 --> 00:03:56,570
are going to Learn more about uses these composed tool to convert your

80
00:03:56,570 --> 00:04:00,940
Docker Compose file to kubernetes manifest files.

81
00:04:00,940 --> 00:04:04,380
So by running that it will generate the files and then we can

82
00:04:04,380 --> 00:04:07,620
point it to those with the manifest property that you see at the

83
00:04:07,620 --> 00:04:10,120
bottom here and now under the covers,

84
00:04:10,120 --> 00:04:15,340
it will run a kubectl command against the K S folder and all

85
00:04:15,340 --> 00:04:17,840
the Yamil files that are inside of it.

86
00:04:17,840 --> 00:04:22,140
So here's how this whole process kind of breaks down more visually.

87
00:04:22,140 --> 00:04:25,440
First off, it can detect source code changes,

88
00:04:25,440 --> 00:04:28,940
and it has a built in file sync to monitor those changes.

89
00:04:28,940 --> 00:04:31,310
Then we'll go ahead and build your artifacts,

90
00:04:31,310 --> 00:04:32,930
make sure they're working properly,

91
00:04:32,930 --> 00:04:36,610
even tagged them and then render the manifest that are

92
00:04:36,610 --> 00:04:39,440
needed so that they could be deployed.

93
00:04:39,440 --> 00:04:40,640
Once that happens,

94
00:04:40,640 --> 00:04:45,340
then we would have an actual pod with containers in kubernetes.

95
00:04:45,340 --> 00:04:49,140
And then it can even tell the logs and even do port 40.

96
00:04:49,140 --> 00:04:51,330
Now telling the logs, if you're not familiar with that,

97
00:04:51,330 --> 00:04:55,920
it basically exposes the logs to us so that we can see those directly,

98
00:04:55,920 --> 00:04:59,040
for example, in a console if we wanted.

99
00:04:59,040 --> 00:05:03,840
Now, once we're done with this, if you just hit control C to stop the console,

100
00:05:03,840 --> 00:05:09,230
then it will automatically do a kubectl delete type process and clean

101
00:05:09,230 --> 00:05:12,420
up all the different resource is that we might have.

102
00:05:12,420 --> 00:05:14,740
And that's actually really, really nice.

103
00:05:14,740 --> 00:05:18,290
So you can get more information about this at the pipeline stages

104
00:05:18,290 --> 00:05:20,540
link that you're going to see towards the bottom.

105
00:05:20,540 --> 00:05:24,290
But everything I'm gonna be showing you is gonna go through this process,

106
00:05:24,290 --> 00:05:35,000
and it happens kind of automatically again just by running a single command. So before we look at those commands, let's see how we can get scaffold installed

