WEBVTT
1
00:00:00.940 --> 00:00:01.680
[Autogenerated] All right.

2
00:00:01.680 --> 00:00:04.280
So let's take a look at some of the different Docker stat

3
00:00:04.280 --> 00:00:07.490
commands that we looked at earlier and see how we can actually

4
00:00:07.490 --> 00:00:11.240
take a Docker Compose file and deploy it.

5
00:00:11.240 --> 00:00:13.650
List the stacks that we've deployed,

6
00:00:13.650 --> 00:00:17.890
remove it and even look at some kubectl commands along the way.

7
00:00:17.890 --> 00:00:23.640
The sample I'm gonna run here can be found at this GitHub URL Angular jumpstart.

8
00:00:23.640 --> 00:00:28.640
Now, this sample has a Node.js back in, has an Angular front end,

9
00:00:28.640 --> 00:00:31.410
and then optionally can use something called C adviser.

10
00:00:31.410 --> 00:00:34.440
It's a container monitoring type tool.

11
00:00:34.440 --> 00:00:37.040
Let's go ahead and dive in here.

12
00:00:37.040 --> 00:00:39.750
So I've already loaded this Angular jumpstart project.

13
00:00:39.750 --> 00:00:41.220
I just wanna walk you through the basics.

14
00:00:41.220 --> 00:00:44.100
So it has a pretty simple Node.js back end.

15
00:00:44.100 --> 00:00:46.540
Here's the API for that.

16
00:00:46.540 --> 00:00:50.390
And then it has an Angular application that calls into that back end and that

17
00:00:50.390 --> 00:00:54.340
could be found in the source folder that you'll see here.

18
00:00:54.340 --> 00:00:56.350
So everything has already been installed.

19
00:00:56.350 --> 00:00:58.310
I could run it locally if I wanted.

20
00:00:58.310 --> 00:01:01.940
And you can find instructions on that in the Read me if you'd like,

21
00:01:01.940 --> 00:01:06.360
but I'm going to go to the Docker Compose file and at the top,

22
00:01:06.360 --> 00:01:09.200
you're gonna notice that I have some pretty basic and standard

23
00:01:09.200 --> 00:01:12.790
instructions for doing a Docker Compose bill to get the image is

24
00:01:12.790 --> 00:01:15.110
ready and then a Docker Compose up.

25
00:01:15.110 --> 00:01:18.500
If you want to run it locally and then we can visit local host

26
00:01:18.500 --> 00:01:20.840
and then you know you live long and prosper.

27
00:01:20.840 --> 00:01:24.280
So let's go ahead and get that going first just to kind of prove that,

28
00:01:24.280 --> 00:01:26.810
Yeah, this is just a normal Docker Compose.

29
00:01:26.810 --> 00:01:30.080
So I've already done the build, so I won't do that again.

30
00:01:30.080 --> 00:01:33.480
But you would need to run that It does have a multi stage

31
00:01:33.480 --> 00:01:37.050
build for the Angular app to actually build it and then

32
00:01:37.050 --> 00:01:40.240
deploy it as an engine ex container.

33
00:01:40.240 --> 00:01:44.140
So once you've done that, you can then do the up.

34
00:01:44.140 --> 00:01:48.830
I'm gonna do it in detached mode so we can get back the command prompt here.

35
00:01:48.830 --> 00:01:52.140
And then we'll give it just a ____ for everything to fire up.

36
00:01:52.140 --> 00:01:54.040
While it's doing that.

37
00:01:54.040 --> 00:01:55.400
Let me scroll to the bottom.

38
00:01:55.400 --> 00:01:59.540
And if you're on macro Linux, you can do uncommon Tse adviser.

39
00:01:59.540 --> 00:02:00.960
I'm not going to do that here,

40
00:02:00.960 --> 00:02:06.140
But what that will do is allow you to get to local host 9000,

41
00:02:06.140 --> 00:02:10.440
and that would show you information about the running containers if you want it.

42
00:02:10.440 --> 00:02:13.440
Now, that won't work on Windows at least as of today.

43
00:02:13.440 --> 00:02:18.040
So just kind of be aware that this would be a Mac or Linux type thing.

44
00:02:18.040 --> 00:02:21.070
If I go back to the top, you'll notice that I have to services.

45
00:02:21.070 --> 00:02:22.880
We have one for Engine X,

46
00:02:22.880 --> 00:02:25.940
and this is gonna have the build information for building.

47
00:02:25.940 --> 00:02:31.260
Angular has our ports that we're gonna call when we run this and the

48
00:02:31.260 --> 00:02:34.440
Angular app will actually be right there on the front end.

49
00:02:34.440 --> 00:02:38.940
And then that service depends on as you'll see here, node.

50
00:02:38.940 --> 00:02:41.430
And this is our second service and you'll see it's

51
00:02:41.430 --> 00:02:44.560
pretty standard has our build context, couple environment,

52
00:02:44.560 --> 00:02:46.040
variables, ports.

53
00:02:46.040 --> 00:02:51.240
And they're both using this bridge network called app Network to communicate.

54
00:02:51.240 --> 00:02:53.030
All right, so everything should be up by now.

55
00:02:53.030 --> 00:02:55.540
Let me go ahead and open up a browser.

56
00:02:55.540 --> 00:02:57.660
So I'm gonna go ahead and just go to local host,

57
00:02:57.660 --> 00:03:00.870
because that's what the engine NICs container is listening on.

58
00:03:00.870 --> 00:03:02.340
Port 80.

59
00:03:02.340 --> 00:03:02.960
And this will,

60
00:03:02.960 --> 00:03:06.170
though the Angular front end from Engine X that then calls

61
00:03:06.170 --> 00:03:09.710
into the node service that's running and that gets the data

62
00:03:09.710 --> 00:03:11.590
that you see here and then from here,

63
00:03:11.590 --> 00:03:14.740
you can drill down and get orders and things like that.

64
00:03:14.740 --> 00:03:16.770
Now let's go back into the command Prompt,

65
00:03:16.770 --> 00:03:19.140
though, and let's see the running containers.

66
00:03:19.140 --> 00:03:22.040
And then we'll get these running in kubernetes.

67
00:03:22.040 --> 00:03:25.640
So we'll do a standard Docker PS,

68
00:03:25.640 --> 00:03:28.190
and you'll notice that we have our two services running.

69
00:03:28.190 --> 00:03:32.640
Now there's our engine X Angular jumpstart and our nodes services jump start.

70
00:03:32.640 --> 00:03:36.140
So we have our front end and that calls into RBAC in the.

71
00:03:36.140 --> 00:03:39.160
Now that's all good, but that's just Docker Compose.

72
00:03:39.160 --> 00:03:41.400
That's nothing special with Cooper Nettie.

73
00:03:41.400 --> 00:03:45.540
So let's go ahead and do a Docker Compose down.

74
00:03:45.540 --> 00:03:46.960
And now that's gone well,

75
00:03:46.960 --> 00:03:50.410
kind of prove it by doing API s dash A to list everything and

76
00:03:50.410 --> 00:03:53.640
you'll see we don't have anything left, which would be expected.

77
00:03:53.640 --> 00:03:57.840
So now let's say we want to deploy this to kubernetes.

78
00:03:57.840 --> 00:03:58.080
Well,

79
00:03:58.080 --> 00:04:01.260
the first thing is I'd have to make sure that in Docker desktop

80
00:04:01.260 --> 00:04:04.290
settings or preferences that we have Kubernetes enabled,

81
00:04:04.290 --> 00:04:08.660
which I do, and we have to make sure that the Docker stacks is enabled,

82
00:04:08.660 --> 00:04:13.340
which I also have done that we covered that a little bit earlier in this module.

83
00:04:13.340 --> 00:04:14.660
So the next thing is I can.

84
00:04:14.660 --> 00:04:20.520
Simply run Docker stack, deploy And then I say Dash.

85
00:04:20.520 --> 00:04:23.640
See, this is the path to the composed file.

86
00:04:23.640 --> 00:04:24.250
In this case,

87
00:04:24.250 --> 00:04:28.520
it's just standard Docker Compose YAML file and then I can give it a name.

88
00:04:28.520 --> 00:04:33.440
Let's call this n g jumpstart, Angular jumpstart.

89
00:04:33.440 --> 00:04:35.620
I'm gonna hit Enter and there we go,

90
00:04:35.620 --> 00:04:38.500
so you'll notice it's now creating everything we need.

91
00:04:38.500 --> 00:04:41.850
Our services are deployments are replica sets and I'll show you that

92
00:04:41.850 --> 00:04:45.120
in a moment to run this application in kubernetes.

93
00:04:45.120 --> 00:04:49.840
But yet we didn't write a single line of YAML file for Kubernetes,

94
00:04:49.840 --> 00:04:52.740
so it's a really easy way to get that going.

95
00:04:52.740 --> 00:04:54.330
All right, so let's see what's happening here.

96
00:04:54.330 --> 00:04:57.940
Let's do Docker stack ls.

97
00:04:57.940 --> 00:04:58.880
And there we go.

98
00:04:58.880 --> 00:05:04.270
We have to services now that have been deployed to the orchestrator of

99
00:05:04.270 --> 00:05:08.940
Kubernetes into the standard default name space.

100
00:05:08.940 --> 00:05:10.190
Is it working?

101
00:05:10.190 --> 00:05:12.340
Let's go back to the browser now.

102
00:05:12.340 --> 00:05:14.240
This is the old page.

103
00:05:14.240 --> 00:05:17.520
So just to kind of prove that, let's go ahead and we'll go to some port.

104
00:05:17.520 --> 00:05:19.740
I don't have 500.

105
00:05:19.740 --> 00:05:21.040
Okay, side unreachable.

106
00:05:21.040 --> 00:05:23.540
So let's go back to local host.

107
00:05:23.540 --> 00:05:25.840
That's refresh.

108
00:05:25.840 --> 00:05:27.040
And there we do.

109
00:05:27.040 --> 00:05:30.870
So now we're working and you'll see I can navigate to other aspects.

110
00:05:30.870 --> 00:05:33.640
And this is all hitting kubernetes.

111
00:05:33.640 --> 00:05:37.740
Now let's prove that by going and writing some kubectl commands,

112
00:05:37.740 --> 00:05:44.680
so we'll come on back in and do kubectl get all and

113
00:05:44.680 --> 00:05:45.900
you'll notice right up the top.

114
00:05:45.900 --> 00:05:50.140
There's are two pots, so there's our engine X that's serving up Angular.

115
00:05:50.140 --> 00:05:54.140
Here's RBAC end RESTful API, which is Node.js.

116
00:05:54.140 --> 00:05:56.760
It also created some different types of services.

117
00:05:56.760 --> 00:05:59.240
Notice I have a load balancer for the front end.

118
00:05:59.240 --> 00:06:00.940
That's the Port 80.

119
00:06:00.940 --> 00:06:04.270
And for the API, that's the 80 80.

120
00:06:04.270 --> 00:06:07.980
That's actually what the Angular JavaScript is calling into.

121
00:06:07.980 --> 00:06:10.040
That's the RESTful API.

122
00:06:10.040 --> 00:06:15.230
We also have deployments for both, and we have replica sets for both,

123
00:06:15.230 --> 00:06:18.160
and it just kind of does that automatically now.

124
00:06:18.160 --> 00:06:21.660
If we wanted, we could even do something like kubectl get pot,

125
00:06:21.660 --> 00:06:23.940
and then we could go up and grab a pod name.

126
00:06:23.940 --> 00:06:29.140
Here, let's grab the engine x one.

127
00:06:29.140 --> 00:06:33.140
And of course, we could do Dash Oh, YAML file.

128
00:06:33.140 --> 00:06:34.510
And that would output it.

129
00:06:34.510 --> 00:06:37.220
Now this is going to include things that you really

130
00:06:37.220 --> 00:06:39.090
wouldn't want if you did this by hand,

131
00:06:39.090 --> 00:06:43.030
but at least it gives you some Yamil that you could literally copy and paste.

132
00:06:43.030 --> 00:06:48.640
Or better yet, I could do this and I could go to some output YAML file,

133
00:06:48.640 --> 00:06:52.040
and we could actually output that to that file if we wanted.

134
00:06:52.040 --> 00:06:53.460
And we could do that for these.

135
00:06:53.460 --> 00:06:54.940
Various resource is now.

136
00:06:54.940 --> 00:06:56.420
If you're going with this approach,

137
00:06:56.420 --> 00:06:59.330
I would argue you're probably doing it because you don't

138
00:06:59.330 --> 00:07:02.640
want to deal with the Kubernetes XAML and you just want to

139
00:07:02.640 --> 00:07:04.750
get it running in kubernetes.

140
00:07:04.750 --> 00:07:08.360
So that's how easy it is to do now.

141
00:07:08.360 --> 00:07:12.160
If we want to stop this we can, go ahead and run the Docker stack,

142
00:07:12.160 --> 00:07:15.200
remove and then give it the name of the stack well,

143
00:07:15.200 --> 00:07:15.860
as a reminder.

144
00:07:15.860 --> 00:07:19.640
If we do ls, it's and jumpstart.

145
00:07:19.640 --> 00:07:21.570
So let's go back to here.

146
00:07:21.570 --> 00:07:26.140
We'll do our M and then n g jump start.

147
00:07:26.140 --> 00:07:27.200
Okay, says removing.

148
00:07:27.200 --> 00:07:31.840
Let's quickly do a kubectl get all.

149
00:07:31.840 --> 00:07:32.960
And there we go.

150
00:07:32.960 --> 00:07:34.690
The engine X is already terminated.

151
00:07:34.690 --> 00:07:36.610
Now it's terminating node.

152
00:07:36.610 --> 00:07:38.530
The services have already been wiped out.

153
00:07:38.530 --> 00:07:42.090
You can see both those load balancers are gone and

154
00:07:42.090 --> 00:07:43.670
notice it's still working here.

155
00:07:43.670 --> 00:07:48.450
But if we give it a little bit of time, everything will be gone momentarily.

156
00:07:48.450 --> 00:07:51.140
Kid it's still terminating the note pod.

157
00:07:51.140 --> 00:07:53.990
We could even do cache, cache, watch If we wanted,

158
00:07:53.990 --> 00:07:58.800
we could say get pod CloudWatch and just kind of let it sit

159
00:07:58.800 --> 00:08:00.520
there until it finally terminates it.

160
00:08:00.520 --> 00:08:04.400
Eventually, this will go away, but in the interest of time,

161
00:08:04.400 --> 00:08:07.040
we will move onward and upward here.

162
00:08:07.040 --> 00:08:11.640
Well, that's how easy it is to actually taken existing Docker Compose filing.

163
00:08:11.640 --> 00:08:16.240
You'll notice this is pretty standard stuff here and not only use that to

164
00:08:16.240 --> 00:08:20.140
build our Docker images and run it locally if we want,

165
00:08:20.140 --> 00:08:23.140
but also try it out in kubernetes.

166
00:08:23.140 --> 00:08:27.080
That actually offers some really nice abilities to see how

167
00:08:27.080 --> 00:08:29.540
this is going to run in that environment,

168
00:08:29.540 --> 00:08:32.250
because it's always good to run it where it might run in

169
00:08:32.250 --> 00:08:35.000
your staging production type environments,

170
00:08:35.000 --> 00:08:38.440
even if it's not an identical kubernetes cluster.

171
00:08:38.440 --> 00:08:42.140
So I hope that gives you an idea of the power of the Docker stat command.

172
00:08:42.140 --> 00:08:43.910
Now, is this the way to go?

173
00:08:43.910 --> 00:08:45.050
Not necessarily.

174
00:08:45.050 --> 00:08:46.120
It really depends.

175
00:08:46.120 --> 00:08:52.000
We're gonna look at another option in the next module. This is one option that you could certainly choose

