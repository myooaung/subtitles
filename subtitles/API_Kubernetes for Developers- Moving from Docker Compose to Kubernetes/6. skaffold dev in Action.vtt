WEBVTT
1
00:00:01.540 --> 00:00:04.070
[Autogenerated] So now let's come on in and you'll notice it

2
00:00:04.070 --> 00:00:06.010
tells us down below here that we can run,

3
00:00:06.010 --> 00:00:06.490
scaffold,

4
00:00:06.490 --> 00:00:09.660
run or scaffold deaf if we do scaffold running to run

5
00:00:09.660 --> 00:00:12.040
it one time and deploy at one time.

6
00:00:12.040 --> 00:00:17.940
If we do Dev, it'll actually auto redeploy as our source code changes.

7
00:00:17.940 --> 00:00:20.950
Let's go ahead and try this out so we can come in and say

8
00:00:20.950 --> 00:00:23.450
Scaffold and then we can give it to command.

9
00:00:23.450 --> 00:00:24.940
In this case, Dev,

10
00:00:24.940 --> 00:00:28.800
I'm gonna say Dash f and we want to do scaffold test

11
00:00:28.800 --> 00:00:32.240
.NET XAML the one I just generated.

12
00:00:32.240 --> 00:00:37.200
Let's go ahead and run that all right now you notice it's

13
00:00:37.200 --> 00:00:39.600
building my images much like Docker Compose does.

14
00:00:39.600 --> 00:00:43.310
And that's what's kind of cool about this is not only will it build the images,

15
00:00:43.310 --> 00:00:46.840
but you're going to see at the end here it's gonna deploy those.

16
00:00:46.840 --> 00:00:49.030
Currently, it's building the Angular image,

17
00:00:49.030 --> 00:00:51.530
and because this is doing in npm install,

18
00:00:51.530 --> 00:00:55.220
then it's actually doing the translation of the TypeScript 2D JavaScript

19
00:00:55.220 --> 00:00:59.180
generating our bundles and you're gonna find this type of process for

20
00:00:59.180 --> 00:01:02.540
react and Angular and view and others out there.

21
00:01:02.540 --> 00:01:06.290
This might take a little longer than you'd want to wait for?

22
00:01:06.290 --> 00:01:09.240
Because every time you change your code, this is going to run.

23
00:01:09.240 --> 00:01:10.730
So I'm gonna show you how we can fix that.

24
00:01:10.730 --> 00:01:12.170
But through the magic of video,

25
00:01:12.170 --> 00:01:18.540
let me speed this up and then we'll go ahead and show this working.

26
00:01:18.540 --> 00:01:20.350
Okay, so it's deployed everything.

27
00:01:20.350 --> 00:01:23.510
Notice it started our deployment over Yamil files.

28
00:01:23.510 --> 00:01:26.150
It waits for those deployments to actually stabilize to

29
00:01:26.150 --> 00:01:31.440
make it so that the pods are available, and then it washes for changes.

30
00:01:31.440 --> 00:01:35.840
Okay, so let's come on into the browser and let's see if this is working.

31
00:01:35.840 --> 00:01:36.210
Alright.

32
00:01:36.210 --> 00:01:40.180
So I've gone to local host and then it redirected to a clients ID route of

33
00:01:40.180 --> 00:01:43.920
slash customers and noticed that the app is up and running.

34
00:01:43.920 --> 00:01:48.240
Everything is good, but this is now running up in Kubernetes.

35
00:01:48.240 --> 00:01:50.230
So now what happens if we make a code change?

36
00:01:50.230 --> 00:01:54.140
Maybe we change the service ID API, we change the Angular code.

37
00:01:54.140 --> 00:01:55.390
What's gonna happen here?

38
00:01:55.390 --> 00:01:57.440
Well, let's try it out.

39
00:01:57.440 --> 00:01:59.430
So, coming back into the editor,

40
00:01:59.430 --> 00:02:01.730
let me go ahead and shrink this down just a little bit.

41
00:02:01.730 --> 00:02:04.140
Notice down at the bottom, we have a log.

42
00:02:04.140 --> 00:02:05.940
This is our tail.

43
00:02:05.940 --> 00:02:09.290
And what that does is basically pipes logs from the different

44
00:02:09.290 --> 00:02:12.680
containers running in kubernetes back into our console,

45
00:02:12.680 --> 00:02:16.040
which is really, really nice when you wanna live develop.

46
00:02:16.040 --> 00:02:18.650
But now I want to go in and maybe change some code.

47
00:02:18.650 --> 00:02:22.530
So, for example, let's say we want to go into the TypeScript code.

48
00:02:22.530 --> 00:02:25.040
Going to go into source app.

49
00:02:25.040 --> 00:02:27.690
Let's just go to our what's called route component.

50
00:02:27.690 --> 00:02:31.850
I'm gonna change the home page that shows the navbar and things like that.

51
00:02:31.850 --> 00:02:34.100
Let's just say hello right here.

52
00:02:34.100 --> 00:02:35.340
Real basic.

53
00:02:35.340 --> 00:02:38.040
Now watch when I save.

54
00:02:38.040 --> 00:02:40.890
Now it's gonna catch that change and now it's gonna

55
00:02:40.890 --> 00:02:43.640
rebuild that Angular container.

56
00:02:43.640 --> 00:02:45.920
But the problem here is we've got to go through that whole

57
00:02:45.920 --> 00:02:49.210
process again because this is a multi stage built.

58
00:02:49.210 --> 00:02:50.840
It's going to first, build our code,

59
00:02:50.840 --> 00:02:54.140
generate our bundles and all that stuff you saw earlier.

60
00:02:54.140 --> 00:02:58.140
It's all speed this up again and then we'll come back.

61
00:02:58.140 --> 00:02:59.600
All right, so it's finished.

62
00:02:59.600 --> 00:03:01.840
Let's go back to the browser again.

63
00:03:01.840 --> 00:03:03.140
I'm gonna go ahead and refresh.

64
00:03:03.140 --> 00:03:04.750
We don't see hello up here anywhere.

65
00:03:04.750 --> 00:03:06.180
So let's refresh And there we go.

66
00:03:06.180 --> 00:03:08.490
So it worked it redeployed,

67
00:03:08.490 --> 00:03:13.270
but I waited a couple minutes for that redeploy and

68
00:03:13.270 --> 00:03:14.880
from a development standpoint,

69
00:03:14.880 --> 00:03:18.080
that's just not gonna work right too long of sitting there waiting

70
00:03:18.080 --> 00:03:23.010
for it to rebuild this production version of the Angular image that's

71
00:03:23.010 --> 00:03:25.440
gonna run within genetics in this case.

72
00:03:25.440 --> 00:03:28.840
So let me show you a few things we can due to speed this up.

73
00:03:28.840 --> 00:03:32.940
So first, let me go ahead and hit control C and watch what it does.

74
00:03:32.940 --> 00:03:34.600
So it just cleaned up everything.

75
00:03:34.600 --> 00:03:39.290
So if we do kubectl get all, it's probably still terminating our pods.

76
00:03:39.290 --> 00:03:40.440
But let's see what we have.

77
00:03:40.440 --> 00:03:41.790
Okay, well, there's one left.

78
00:03:41.790 --> 00:03:44.340
Looks like it's terminating a node pod.

79
00:03:44.340 --> 00:03:47.130
All the services that deployments, the replica sets,

80
00:03:47.130 --> 00:03:48.090
they've all been cleaned up.

81
00:03:48.090 --> 00:03:48.820
So that's nice.

82
00:03:48.820 --> 00:03:54.840
It does that automatically when you stop this Scaffold dev Process.

83
00:03:54.840 --> 00:03:57.390
Now, what I'm gonna do is run the same thing.

84
00:03:57.390 --> 00:03:59.650
But I'm not gonna run the scaffold test.

85
00:03:59.650 --> 00:04:02.000
I'm gonna run a scaffold, Yamil.

86
00:04:02.000 --> 00:04:03.410
They already have.

87
00:04:03.410 --> 00:04:06.500
Now you notice that the bottom it's going to point to the same manifest files.

88
00:04:06.500 --> 00:04:12.830
But here's the changes up on the engine x-axis URL er jump start image.

89
00:04:12.830 --> 00:04:14.110
I have my context,

90
00:04:14.110 --> 00:04:17.940
but I added something called a sync property and what this

91
00:04:17.940 --> 00:04:21.450
will do is instead of trying to sync up all the code and

92
00:04:21.450 --> 00:04:24.630
rebuilding the production image, it's instead,

93
00:04:24.630 --> 00:04:26.930
first off, going to use a dev image.

94
00:04:26.930 --> 00:04:33.040
Now, let's go look at that really quick and go into our dot Docker folder.

95
00:04:33.040 --> 00:04:38.000
Now all I'm doing here is I'm copying the dist output the build output

96
00:04:38.000 --> 00:04:43.830
from a local build into a particular folder in engine X.

97
00:04:43.830 --> 00:04:45.210
Now, why am I doing that?

98
00:04:45.210 --> 00:04:45.470
Well,

99
00:04:45.470 --> 00:04:51.510
because that way we can build locally sync this disc folder up to the

100
00:04:51.510 --> 00:04:54.700
container that we ultimately are going to running kubernetes.

101
00:04:54.700 --> 00:04:57.350
And this is gonna be super fast you're going to see,

102
00:04:57.350 --> 00:05:01.020
so it does mean I'm gonna have to start up a local build process,

103
00:05:01.020 --> 00:05:02.310
which is super easy to do.

104
00:05:02.310 --> 00:05:07.280
I'll show you, but it's gonna make the process of deploying the kubernetes much,

105
00:05:07.280 --> 00:05:11.080
much faster because now I don't have to run a multi stage

106
00:05:11.080 --> 00:05:14.840
Bill Docker file to generate the image.

107
00:05:14.840 --> 00:05:18.450
All right, so the first thing I'm gonna do is because this is an Angular app.

108
00:05:18.450 --> 00:05:21.070
I'm gonna run the build in kind of a watch mode,

109
00:05:21.070 --> 00:05:23.290
and you could do the same with react and other types of

110
00:05:23.290 --> 00:05:26.120
frameworks out there in libraries But in this case,

111
00:05:26.120 --> 00:05:27.950
I'm gonna do an energy bill Dash, cache,

112
00:05:27.950 --> 00:05:28.370
watch.

113
00:05:28.370 --> 00:05:30.840
And if you don't know Angular, don't worry about that.

114
00:05:30.840 --> 00:05:35.040
All you need to know is this is gonna watch for any changes

115
00:05:35.040 --> 00:05:39.500
to the Angular coat a czar HTML change, for example.

116
00:05:39.500 --> 00:05:40.550
Let me go ahead and do that.

117
00:05:40.550 --> 00:05:43.540
Now that's going to generate a disk folder.

118
00:05:43.540 --> 00:05:45.940
You'll see this disc folder right here.

119
00:05:45.940 --> 00:05:47.880
It'll take a second to get going, but then,

120
00:05:47.880 --> 00:05:53.340
once it's done, is really, really fast after that.

121
00:05:53.340 --> 00:05:56.350
Okay, so now, anytime I make any changes,

122
00:05:56.350 --> 00:06:00.640
its going to sync our local disk folder that you see here

123
00:06:00.640 --> 00:06:03.540
up to the destination in the container.

124
00:06:03.540 --> 00:06:06.090
So instead of having to rebuild the whole image,

125
00:06:06.090 --> 00:06:10.590
it can actually just sync the files from our local machine up to that

126
00:06:10.590 --> 00:06:13.640
running container that's in the kubernetes pot.

127
00:06:13.640 --> 00:06:19.230
Let me come on in and let's come back to one of these other shells we have.

128
00:06:19.230 --> 00:06:23.240
And instead of using the file that we had before,

129
00:06:23.240 --> 00:06:31.240
let's go ahead and use the scaffold YAML file that you see right here.

130
00:06:31.240 --> 00:06:34.500
All right, Now you notice it's already deploying and it's ready now.

131
00:06:34.500 --> 00:06:37.140
Part of that's because it's already cashed.

132
00:06:37.140 --> 00:06:40.350
But now let's go into that same file that I change.

133
00:06:40.350 --> 00:06:45.040
That causes a rebuild normally and let's see what happens here.

134
00:06:45.040 --> 00:06:48.300
So let's take out Hello Now Normally,

135
00:06:48.300 --> 00:06:52.290
this would take probably a a mentor to for sure to

136
00:06:52.290 --> 00:06:54.250
build more of our production image,

137
00:06:54.250 --> 00:06:57.750
because again it would convert my TypeScript into JavaScript,

138
00:06:57.750 --> 00:07:00.050
generate my bundles and do a bunch of other things that

139
00:07:00.050 --> 00:07:03.240
needs to do for more of a production build.

140
00:07:03.240 --> 00:07:04.730
Now I'm gonna go ahead and save, though,

141
00:07:04.730 --> 00:07:07.770
and watch down below how fast this is this time.

142
00:07:07.770 --> 00:07:10.360
So we'll save it now.

143
00:07:10.360 --> 00:07:12.640
Caught it and it's already done.

144
00:07:12.640 --> 00:07:15.640
It's already deployed, so let's go back to the browser now.

145
00:07:15.640 --> 00:07:17.290
There's our hello that I took out.

146
00:07:17.290 --> 00:07:19.900
Let's refresh and there we do.

147
00:07:19.900 --> 00:07:21.840
So it's already update.

148
00:07:21.840 --> 00:07:25.450
Now we could do real code changes, not just HTML,

149
00:07:25.450 --> 00:07:29.620
and it would be this fast because we're now doing a local build

150
00:07:29.620 --> 00:07:32.540
with that energy build command that you saw.

151
00:07:32.540 --> 00:07:37.440
Then Scaffold syncs up the disk folder into the running container,

152
00:07:37.440 --> 00:07:40.140
so it's really, really fast.

153
00:07:40.140 --> 00:07:44.640
Now we can also come in and make changes to things like our note.

154
00:07:44.640 --> 00:07:46.470
So let's come in to server JSLint.

155
00:07:46.470 --> 00:07:49.770
I'm just gonna add a space and save and watch down below.

156
00:07:49.770 --> 00:07:50.000
Here.

157
00:07:50.000 --> 00:07:52.520
Now.

158
00:07:52.520 --> 00:07:56.760
Now, In this case, I didn't sync any file, so it rebuilt the image from scratch.

159
00:07:56.760 --> 00:07:59.660
But it's already done because most of those layers

160
00:07:59.660 --> 00:08:02.080
were cashed very little changed.

161
00:08:02.080 --> 00:08:05.000
So it just had to copy in the appropriate folder.

162
00:08:05.000 --> 00:08:06.940
I could even sync that.

163
00:08:06.940 --> 00:08:10.170
Now sinking it in this case isn't quite enough because nodes

164
00:08:10.170 --> 00:08:13.110
already running kubernetes so you might actually use,

165
00:08:13.110 --> 00:08:17.930
like, nodemon PM two or some type of monitor to say,

166
00:08:17.930 --> 00:08:21.040
Hey, when this file changes, restart the notes server.

167
00:08:21.040 --> 00:08:23.960
But in this case, it's so fast you don't even have to worry about it.

168
00:08:23.960 --> 00:08:24.870
I can just go in.

169
00:08:24.870 --> 00:08:26.050
Let's take that back out.

170
00:08:26.050 --> 00:08:29.630
We'll save and watch how fast this is and there we go.

171
00:08:29.630 --> 00:08:32.840
It's already redeployed that to Kubernetes.

172
00:08:32.840 --> 00:08:35.220
So that's what scaffold is all about.

173
00:08:35.220 --> 00:08:36.640
And there's a lot more you could do.

174
00:08:36.640 --> 00:08:37.110
The miss.

175
00:08:37.110 --> 00:08:39.440
You can even do scaffold debug,

176
00:08:39.440 --> 00:08:42.780
and that has all kinds of possibilities for debugging against the

177
00:08:42.780 --> 00:08:47.040
containers running in the pods with different editors out there.

178
00:08:47.040 --> 00:08:48.570
I hope this gives you an idea.

179
00:08:48.570 --> 00:08:51.960
First off the scaffolding Nick Command but also The

180
00:08:51.960 --> 00:08:54.840
power of this is in the scaffold, Dev,

181
00:08:54.840 --> 00:08:58.490
because now I can do live development against containers

182
00:08:58.490 --> 00:09:00.850
actually running up in Kubernetes.

183
00:09:00.850 --> 00:09:02.650
In this case, it's on Docker desktop.

184
00:09:02.650 --> 00:09:06.240
But again, it could be mini kubectl remote cluster,

185
00:09:06.240 --> 00:09:08.840
if that's what you prefer to use.

186
00:09:08.840 --> 00:09:11.620
So that's an example of some of the scaffold commands,

187
00:09:11.620 --> 00:09:15.630
and I hope it gets you thinking about how we can actually do development,

188
00:09:15.630 --> 00:09:17.140
especially in larger apps.

189
00:09:17.140 --> 00:09:19.020
Where you might have a bunch of micros, Irv is,

190
00:09:19.020 --> 00:09:21.690
is you're only working on one or two of those,

191
00:09:21.690 --> 00:09:25.030
but they need to communicate with other micro services,

192
00:09:25.030 --> 00:09:29.840
and the only easy way to get that going will assume is in a Kubernetes cluster.

193
00:09:29.840 --> 00:09:31.630
We're using something like Scaffold.

194
00:09:31.630 --> 00:09:34.010
You could certainly do that.

195
00:09:34.010 --> 00:09:37.010
It's important to note that there are other tools out there as well,

196
00:09:37.010 --> 00:09:40.840
such as Draft Till Garden and others.

197
00:09:40.840 --> 00:09:49.000
But this is how you can get started with scaffold and what it can do for you. Let's go ahead and do a final wrap up on this module

