1
00:00:01,040 --> 00:00:03,270
[Autogenerated] Now that we've seen how we can move from Docker Compose

2
00:00:03,270 --> 00:00:06,870
to Kubernetes with Docker stacks or the composed tool,

3
00:00:06,870 --> 00:00:09,640
let's take a look at another example of using the scaffold

4
00:00:09,640 --> 00:00:12,640
tool that we covered earlier in the course.

5
00:00:12,640 --> 00:00:16,840
So coming on into the same project code with Dan Docker services,

6
00:00:16,840 --> 00:00:20,660
we have the similar suspects here in the Docker Compose file.

7
00:00:20,660 --> 00:00:22,970
I have several different services available.

8
00:00:22,970 --> 00:00:25,220
We've already seen these, but we have engine next.

9
00:00:25,220 --> 00:00:28,980
We have knowed we have mongo we have read is and that's all available.

10
00:00:28,980 --> 00:00:33,540
But I would like to run this using the scaffold tool.

11
00:00:33,540 --> 00:00:37,040
Well, the first thing I did was run scaffold in it,

12
00:00:37,040 --> 00:00:40,360
and I gave it a few of the command line parameters such as dash,

13
00:00:40,360 --> 00:00:42,440
dash, composed file,

14
00:00:42,440 --> 00:00:46,580
and that actually was used to generate the initial scaffold .NET XAML

15
00:00:46,580 --> 00:00:50,380
that you'll see here now that will output using the composed tool

16
00:00:50,380 --> 00:00:53,730
again the initial Kubernetes manifest files,

17
00:00:53,730 --> 00:00:57,650
but already had some up here in the .NET V8 s folder that

18
00:00:57,650 --> 00:01:00,140
you see here and we've seen these earlier.

19
00:01:00,140 --> 00:01:03,750
So what I did is I went into the scaffold file it generated and just

20
00:01:03,750 --> 00:01:10,130
changed the manifest to move to this .NET V8 s star .NET XAML versus it

21
00:01:10,130 --> 00:01:13,100
before just listed all the individual manifest file.

22
00:01:13,100 --> 00:01:15,040
So I took that out.

23
00:01:15,040 --> 00:01:18,240
Now the next thing I did is I could have typed the artifact

24
00:01:18,240 --> 00:01:21,340
cmdlet switched cache A that we covered earlier.

25
00:01:21,340 --> 00:01:24,550
But it was just a ZZ to do that here in the Yamil.

26
00:01:24,550 --> 00:01:27,280
So I have four different images I need built.

27
00:01:27,280 --> 00:01:33,640
I have this code with that ninja NICs Notepad with Dan Mongo and read us.

28
00:01:33,640 --> 00:01:35,350
So, as we covered earlier,

29
00:01:35,350 --> 00:01:38,750
all I did was set the context to my current folder because

30
00:01:38,750 --> 00:01:40,940
that's where it's gonna watch for changes.

31
00:01:40,940 --> 00:01:43,830
And then I gave it the path to the individual Docker files

32
00:01:43,830 --> 00:01:46,830
that you'll see up top here Now that took,

33
00:01:46,830 --> 00:01:50,040
you know, a few minutes to just type that and all I did again.

34
00:01:50,040 --> 00:01:53,100
It was just point that up to this Docker folder that

35
00:01:53,100 --> 00:01:57,690
has my different build scripts Now, once that was done,

36
00:01:57,690 --> 00:01:59,150
it's pretty much ready to go.

37
00:01:59,150 --> 00:02:00,690
There is one more step.

38
00:02:00,690 --> 00:02:03,740
There is a secret that's used by Mongo.

39
00:02:03,740 --> 00:02:05,810
It's a very simple secret for this demo,

40
00:02:05,810 --> 00:02:07,740
but in a real world scenario, you would,

41
00:02:07,740 --> 00:02:13,070
of course, give a better password but we need to run this kubectl create secret,

42
00:02:13,070 --> 00:02:16,790
and then give it the password here that you see now I've already run this,

43
00:02:16,790 --> 00:02:19,430
so we'll probably get in are when I paste and then hit.

44
00:02:19,430 --> 00:02:20,640
Enter.

45
00:02:20,640 --> 00:02:22,400
And yes says it already exists.

46
00:02:22,400 --> 00:02:26,040
But if you're doing this for the first time, you would need to run that.

47
00:02:26,040 --> 00:02:30,930
Okay, so now that we have that ready and we have the scaffold YAML file ready,

48
00:02:30,930 --> 00:02:31,490
Really?

49
00:02:31,490 --> 00:02:35,240
All I have to do is the Scaffold Dev Command.

50
00:02:35,240 --> 00:02:37,800
I've already pre built the images to speed it up,

51
00:02:37,800 --> 00:02:41,410
but normally the first time you run it, If your images aren't there,

52
00:02:41,410 --> 00:02:43,220
it's gonna go into your scaffold.

53
00:02:43,220 --> 00:02:43,820
XAML.

54
00:02:43,820 --> 00:02:46,300
It's gonna find those Docker files and do the build,

55
00:02:46,300 --> 00:02:48,990
of course, But in this case, it should be pretty quick.

56
00:02:48,990 --> 00:02:54,240
So let's start it up.

57
00:02:54,240 --> 00:02:54,920
And there we go.

58
00:02:54,920 --> 00:02:56,600
It's already starting to deploy.

59
00:02:56,600 --> 00:03:00,240
So now it's gonna deploy my replicas Here.

60
00:03:00,240 --> 00:03:00,810
There we go.

61
00:03:00,810 --> 00:03:03,240
There's are logging.

62
00:03:03,240 --> 00:03:06,890
And once this is all booted up for the first time and mongo DB is

63
00:03:06,890 --> 00:03:10,440
ready to go we can run off to the browser and hit it.

64
00:03:10,440 --> 00:03:10,870
All right,

65
00:03:10,870 --> 00:03:14,090
so it looks like the database has been seated and we're all good to go.

66
00:03:14,090 --> 00:03:15,270
So let me run off to the browser.

67
00:03:15,270 --> 00:03:18,140
Now let's go ahead and refresh.

68
00:03:18,140 --> 00:03:21,360
And there we do, just like you've already seen up to this point.

69
00:03:21,360 --> 00:03:23,640
It's now running in Kubernetes.

70
00:03:23,640 --> 00:03:25,930
Now there's really nothing special with that,

71
00:03:25,930 --> 00:03:28,240
because we've already seen how to get this writing in

72
00:03:28,240 --> 00:03:33,640
kubernetes using other techniques, I could have just done kubectl apply.

73
00:03:33,640 --> 00:03:38,540
And given that the path to that .NET a s folder, we would have been good to go.

74
00:03:38,540 --> 00:03:41,500
But of course, Scaffold gives us more functionality,

75
00:03:41,500 --> 00:03:44,240
so let's go back to the editor and take a look at that.

76
00:03:44,240 --> 00:03:47,370
So let's say that I am doing some development on this project.

77
00:03:47,370 --> 00:03:50,630
And in the view that shows on the home page,

78
00:03:50,630 --> 00:03:52,700
this happens to be something called handlebars.

79
00:03:52,700 --> 00:03:54,440
But it could be anything.

80
00:03:54,440 --> 00:03:56,760
Let's say we want to change it currently.

81
00:03:56,760 --> 00:04:01,160
If I scroll on down, you'll see kind of a little slogan down here.

82
00:04:01,160 --> 00:04:04,810
See it, learn it, code it, notice to see it.

83
00:04:04,810 --> 00:04:06,040
Well, let's say I don't know.

84
00:04:06,040 --> 00:04:10,580
We want to change our slogan to don't see it and let me save.

85
00:04:10,580 --> 00:04:15,940
And now watch what happens down here at the bottom, so we'll save.

86
00:04:15,940 --> 00:04:16,730
All right, there we go.

87
00:04:16,730 --> 00:04:20,410
Now it's rebuilding that note container, and it's already redeployed.

88
00:04:20,410 --> 00:04:24,570
It was that fast because it's able to leverage the caching that's going on.

89
00:04:24,570 --> 00:04:27,610
And then this will fire back up, which will take just a second.

90
00:04:27,610 --> 00:04:29,830
And we should be ready to do so.

91
00:04:29,830 --> 00:04:32,540
Now let's go back to the browser Here.

92
00:04:32,540 --> 00:04:35,540
You go ahead and refresh here.

93
00:04:35,540 --> 00:04:37,190
Now, if I scroll on down, we should see.

94
00:04:37,190 --> 00:04:38,510
Don't see it.

95
00:04:38,510 --> 00:04:40,040
Learn it, coded.

96
00:04:40,040 --> 00:04:41,300
Okay, so it works.

97
00:04:41,300 --> 00:04:45,640
So let's go back and fix that, cause I probably don't want that is my slogan.

98
00:04:45,640 --> 00:04:48,040
So we'll take that back out.

99
00:04:48,040 --> 00:04:50,980
And as I save, watch down the bottom again.

100
00:04:50,980 --> 00:04:53,130
You're going to see that it triggers that we're gonna get a

101
00:04:53,130 --> 00:04:56,940
rebuild and then it's going to redeploy.

102
00:04:56,940 --> 00:04:58,050
All right, there we do in the notes.

103
00:04:58,050 --> 00:04:59,800
Server started back up in the containers,

104
00:04:59,800 --> 00:05:03,040
and you could see it's almost like using Docker Compose.

105
00:05:03,040 --> 00:05:08,540
But we're actually going and building and running against Kubernetes.

106
00:05:08,540 --> 00:05:10,200
Let's go back one more time.

107
00:05:10,200 --> 00:05:13,620
We'll refresh and there we go.

108
00:05:13,620 --> 00:05:17,540
Now let's see it learning coded so RBAC to normal hair.

109
00:05:17,540 --> 00:05:21,740
So that's an example of what we can do with Scaffold.

110
00:05:21,740 --> 00:05:23,380
You've already seen how to get started with

111
00:05:23,380 --> 00:05:25,430
scaffold in it earlier in the course.

112
00:05:25,430 --> 00:05:29,050
But it's definitely something that if you have a lot of services,

113
00:05:29,050 --> 00:05:33,440
for example, that you're building maybe APIs or something like that,

114
00:05:33,440 --> 00:05:37,510
then this works great because now I can work on that individual API,

115
00:05:37,510 --> 00:05:38,420
save it,

116
00:05:38,420 --> 00:05:42,940
have that image rebuilt and then automatically redeployed to Cooper Netease.

117
00:05:42,940 --> 00:05:46,170
Now, if there's a bunch of services I need to run in pods,

118
00:05:46,170 --> 00:05:47,390
I don't have to worry about those.

119
00:05:47,390 --> 00:05:48,680
It will deploy those,

120
00:05:48,680 --> 00:05:53,140
and I could just individually work on the ones that I'm interested in.

121
00:05:53,140 --> 00:05:57,170
So that's another look at Scaffold and, as mentioned earlier in the course,

122
00:05:57,170 --> 00:06:02,000
there are other tools out there that you could take a look at that will do similar things.

