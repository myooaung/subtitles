1
00:00:00,000 --> 00:00:04,000
Hello and welcome to this tutorial.

2
00:00:04,000 --> 00:00:10,000
This is will be the final one in the series of SSL strip, so let's wrap it up.

3
00:00:10,000 --> 00:00:15,300
Anyway, I'm going to arf spoof basically twice.

4
00:00:15,300 --> 00:00:19,600
I will convince the router that I am Windows 8.1 machine

5
00:00:19,600 --> 00:00:25,900
and I will also convince the Windows 8.1 machine that I am the router as well.

6
00:00:25,900 --> 00:00:30,570
Now this is the case that I have a virtual machine here, but it doesn't really matter.

7
00:00:30,570 --> 00:00:33,520
It would work just the same with pretty much any other device

8
00:00:33,520 --> 00:00:37,230
that is connected to this particular wireless network.

9
00:00:37,230 --> 00:00:39,000
The procedure is exactly the same.

10
00:00:39,000 --> 00:00:42,530
There are literally no differences whatsoever.

11
00:00:42,530 --> 00:00:44,800
Anyway, this is the default gateway

12
00:00:44,800 --> 00:00:49,500
Meaning that is my router and this is the IP address of my Windows machine.

13
00:00:49,500 --> 00:00:56,000
I know what it is now, but I've shown you can use nmap to see the live hosts on the network

14
00:00:56,000 --> 00:01:00,600
and you can use -O argument to perform operating system detection

15
00:01:00,600 --> 00:01:06,000
and you can see which sort of devices are on the network.

16
00:01:06,000 --> 00:01:12,000
Anyway, let's go ahead and issue this command

17
00:01:12,000 --> 00:01:15,300
and later on, I have one more thing to show you with IP tables.

18
00:01:15,300 --> 00:01:17,500
I've been struggling around with that.

19
00:01:17,500 --> 00:01:20,400
It didn't wanna work for a while for some strange reason

20
00:01:20,400 --> 00:01:22,700
but then I really figured it out what it was.

21
00:01:22,700 --> 00:01:27,240
Let me just see what I actually typed in here.

22
00:01:27,240 --> 00:01:29,400
There is a command that you need to run.

23
00:01:29,400 --> 00:01:33,000
You need to open up a port manually in the IP tables

24
00:01:33,000 --> 00:01:36,000
and that would be port 8080.

25
00:01:36,000 --> 00:01:38,800
Okay, so router is first here.

26
00:01:38,800 --> 00:01:39,479
Excellent

27
00:01:39,479 --> 00:01:43,800
and Windows 8.1 machine is first here.

28
00:01:43,800 --> 00:01:49,600
So now I am effectively performing the arf spoofing action.

29
00:01:49,600 --> 00:01:53,000
I need to do it twice

30
00:01:53,000 --> 00:01:56,200
and I guarantee you it's going to be effective this way

31
00:01:56,200 --> 00:01:57,549
but here's what I wanted to show you.

32
00:01:57,549 --> 00:02:00,000
Here's what I've been struggling with.

33
00:02:00,000 --> 00:02:03,000
The thing that I've been having problems with.

34
00:02:03,000 --> 00:02:09,500
The port on my machine from which I'm performing the attack, port 8080, was not open.

35
00:02:09,500 --> 00:02:17,500
Even though an application was listening, it was not permitted by IP tables to receive any sort of traffic on it

36
00:02:17,500 --> 00:02:19,500
and that presented a pretty big problem

37
00:02:19,500 --> 00:02:24,000
because now my arf poisoning effectively DoS'd a wireless network.

38
00:02:24,000 --> 00:02:31,500
By poisoning the arf, I have effectively rendered the host that I am messing around with...

39
00:02:31,500 --> 00:02:35,500
not the host, the victim machine that I am messing around with, connectionless.

40
00:02:35,500 --> 00:02:42,900
It could no longer function properly, it could no longer interact with that wifi in a proper way

41
00:02:42,900 --> 00:02:47,000
and it no longer had an exit point onto the internet.

42
00:02:47,000 --> 00:02:50,600
So what I did was manually correct the problem.

43
00:02:50,600 --> 00:03:01,800
I typed in "iptables -I INPUT"

44
00:03:01,800 --> 00:03:04,000
and I'm going to insert to the first position

45
00:03:04,000 --> 00:03:10,000
because it's very important with these rules, the positions themselves

46
00:03:10,000 --> 00:03:16,400
the Linux will start interpreting the rules from the first to the last.

47
00:03:16,400 --> 00:03:18,370
If they contradict each other or something like that

48
00:03:18,370 --> 00:03:24,000
the first one in the order will take precedence always.

49
00:03:24,000 --> 00:03:33,600
Input 1, and I need the protocol. It's going to be "tcp -- dport" -- This is a shortcut

50
00:03:33,600 --> 00:03:36,800
and the dport will be 8080, the one that we specified.

51
00:03:36,800 --> 00:03:43,500
You also specify different ports here, depending on what you specified on the redirect rule.

52
00:03:43,500 --> 00:03:46,500
So you can use pretty much use any port there as well

53
00:03:46,500 --> 00:03:49,280
that is not being used for anything else.

54
00:03:49,280 --> 00:03:51,800
Anyway, let's just go ahead and type in dport there

55
00:03:51,800 --> 00:03:57,000
"-j ACCEPT"

56
00:03:57,000 --> 00:04:02,100
and this is the command which you need to run for IP tables as well

57
00:04:02,100 --> 00:04:08,000
in order to open up this port here, so that the SSL strip could be listening.

58
00:04:08,000 --> 00:04:10,000
I'm not going to do it now because I already have it.

59
00:04:10,000 --> 00:04:18,000
Let me just show it to you -- "iptables -L INPUT"

60
00:04:18,000 --> 00:04:23,000
Well, what do you know. It's not actually there.

61
00:04:23,000 --> 00:04:28,000
No problems, we'll just go through it again.

62
00:04:28,000 --> 00:04:36,200
I must have performed reset quite recently, but it doesn't really matter.

63
00:04:36,200 --> 00:04:39,000
I can just do it really fast.

64
00:04:39,000 --> 00:04:55,000
"...INPUT 1 -p tcp --dport 8080 -j ACCEPT"

65
00:04:55,000 --> 00:04:56,200
Excellent. There we go

66
00:04:56,200 --> 00:05:01,000
and now I can do the listing.

67
00:05:01,000 --> 00:05:06,030
ACCEPT, tcp, source -- anywhere, destination -- anywhere

68
00:05:06,030 --> 00:05:10,200
It says here webcache, but it's 80

69
00:05:10,200 --> 00:05:12,700
Anyway, let's just go ahead and clear the screen.

70
00:05:12,700 --> 00:05:22,600
Now I need to type in "sslstrip -l 8080"

71
00:05:22,600 --> 00:05:28,000
Now keep in mind any that changes that you make in this fashion to the IP tables, to the firewall

72
00:05:28,000 --> 00:05:29,300
are not permanent.

73
00:05:29,300 --> 00:05:35,500
The first reset of the firewall, or the first reset of the machine as well

74
00:05:35,500 --> 00:05:38,500
will pretty much restore the default settings.

75
00:05:38,500 --> 00:05:42,590
They are not permanent changes, so I must have reset it or something like that

76
00:05:42,590 --> 00:05:48,300
reset the service itself, the firewall service, and I've lost a rule

77
00:05:48,300 --> 00:05:49,500
but it doesn't really matter.

78
00:05:49,500 --> 00:05:54,700
Let me just go ahead and start the ssl strip and listen on port 8080

79
00:05:54,700 --> 00:05:56,800
press ENTER, and there we go.

80
00:05:56,800 --> 00:05:59,700
It is now effectively listening.

81
00:05:59,700 --> 00:06:01,900
Now I'm not going to monitor this

82
00:06:01,900 --> 00:06:07,100
because this is going to share some sort of information anyway that I'm not gonna be that interested in.

83
00:06:07,100 --> 00:06:16,400
What I want is to type in "tail - sslstrip.log"

84
00:06:16,400 --> 00:06:18,210
Press ENTER

85
00:06:18,210 --> 00:06:26,100
tail -f will provide a live feed of any changes done to this file and sslstrip

86
00:06:26,100 --> 00:06:33,000
Pretty much whatever passwords or usernames it manages to grab, it puts into this log file

87
00:06:33,000 --> 00:06:36,190
and I want to monitor it, I want to see when things pop there.

88
00:06:36,190 --> 00:06:40,000
Let's go over to my virtual machine -- Windows 8.1

89
00:06:40,000 --> 00:06:58,500
I have it right here

90
00:06:58,500 --> 00:07:01,900
Anyway, let's just go ahead and open up Firefox

91
00:07:01,900 --> 00:07:06,000
and I'm gonna open Internet Explorer as well.

92
00:07:06,000 --> 00:07:08,000
I will show you the difference between the two.

93
00:07:08,000 --> 00:07:10,400
Some of the things will work on Internet Explorer

94
00:07:10,400 --> 00:07:17,000
while those same things will not work on Firefox

95
00:07:17,000 --> 00:07:20,000
primarily because they have different safeguards in place

96
00:07:20,000 --> 00:07:23,600
and I'm not usually overly critical of Microsoft

97
00:07:23,600 --> 00:07:26,900
because they've done a wonderful job with the security in Windows 8

98
00:07:26,900 --> 00:07:29,400
but they've done a terrible job with design there.

99
00:07:29,400 --> 00:07:36,700
However, Internet Explorer still remains one of the most vulnerable browsers out there.

100
00:07:36,700 --> 00:07:39,000
I do not understand why.

101
00:07:39,000 --> 00:07:41,000
There you go

102
00:07:41,000 --> 00:07:45,800
This is actually a tailing part.

103
00:07:45,800 --> 00:07:50,200
You can see what sort of information is being passed here.

104
00:07:50,200 --> 00:07:55,000
This is kinda difficult to read. It doesn't really make that much sense.

105
00:07:55,000 --> 00:07:57,300
I mean, I couldn't read this.

106
00:07:57,300 --> 00:08:00,500
Maybe I could, but only portions of it

107
00:08:00,500 --> 00:08:05,360
and it would take me a very long time to figure out what all of it actually means and represents

108
00:08:05,360 --> 00:08:10,500
but you are only looking for certain types of fields that have very specific names.

109
00:08:10,500 --> 00:08:13,200
So let's go over to Google

110
00:08:13,200 --> 00:08:17,000
I am wondering will it actually open Google

111
00:08:17,000 --> 00:08:22,500
Surely enough, it actually opens it up

112
00:08:22,500 --> 00:08:25,100
So Google search engine actually works with this.

113
00:08:25,100 --> 00:08:28,000
Let's try Gmail

114
00:08:28,000 --> 00:08:33,000
Will it be able to open up Gmail?

115
00:08:33,000 --> 00:08:37,000
and yes it will, but it will be encrypted.

116
00:08:37,000 --> 00:08:40,000
Let's see, will I manage to take the credentials?

117
00:08:40,000 --> 00:08:48,000
I'm going say FAKE, fake

118
00:08:48,000 --> 00:08:50,670
Okay, it says incorrect

119
00:08:50,670 --> 00:08:57,100
but since I am still going over the encrypted protocols, this is not gonna work.

120
00:08:57,100 --> 00:09:02,000
Okay, no problems. Let's give it a shot here

121
00:09:02,000 --> 00:09:08,000
and let's see if this is gonna work on Internet Explorer.

122
00:09:08,000 --> 00:09:21,900
Yes it will, because immediately here you see that it's HTTP protocol

123
00:09:21,900 --> 00:09:24,370
and let's see if this is gonna catch it

124
00:09:24,370 --> 00:09:30,200
SO FAKE, fake, sign in, and there we go.

125
00:09:30,200 --> 00:09:39,000
It actually did catch it.

126
00:09:39,000 --> 00:09:44,200
So the user name is actually "email", which is correct.

127
00:09:44,200 --> 00:09:52,500
So email equals FAKE, and password equals fake.

128
00:09:52,500 --> 00:09:55,700
Surprisingly enough, it doesn't work on Firefox

129
00:09:55,700 --> 00:09:58,900
and usually if it doesn't work for Firefox, it's not gonna work with Chrome

130
00:09:58,900 --> 00:10:02,000
but there is always a chance, a slight chance

131
00:10:02,000 --> 00:10:03,900
With Explorer, it does work

132
00:10:03,900 --> 00:10:10,200
and let me tell you this, 30% of the world's population still uses Internet Explorer.

133
00:10:10,200 --> 00:10:16,200
Out of that 30%, a good amount of them does not perform regular updates

134
00:10:16,200 --> 00:10:25,800
and even better, vast majority of that 30% are actually people in the corporate world

135
00:10:25,800 --> 00:10:29,500
in the companies were you have a computer from the company

136
00:10:29,500 --> 00:10:36,200
and you are forced to use certain programs, certain browsers, and operate under certain settings

137
00:10:36,200 --> 00:10:41,500
and those are usually the kind of targets that pen testers go for

138
00:10:41,500 --> 00:10:45,000
when they get the permission to do something of a kind

139
00:10:45,000 --> 00:10:46,880
which is fantastic

140
00:10:46,880 --> 00:10:53,000
primarily because they are using Internet Explorer, as it is extremely vulnerable.

141
00:10:53,000 --> 00:10:57,300
So let's just try a few more pages and see how this works out.

142
00:10:57,300 --> 00:11:01,500
Let's see if we can get to Facebook.

143
00:11:01,500 --> 00:11:10,000
Okay, I'm gonna try Facebook on Explorer and I'm gonna try Facebook on Firefox.

144
00:11:10,000 --> 00:11:15,000
I didn't install the Chrome here because pretty much the same rules apply with Firefox.

145
00:11:15,000 --> 00:11:17,300
They're state of the art browsers

146
00:11:17,300 --> 00:11:19,700
and you see, it doesn't work with Facebook.

147
00:11:19,700 --> 00:11:23,900
I'm not even going to try because...ah, I might as well try since I'm here.

148
00:11:23,900 --> 00:11:28,200
It's still HTTPS, but down here with the Explorer

149
00:11:28,200 --> 00:11:31,210
it's HTTP, and you'll be able to take it.

150
00:11:31,210 --> 00:11:34,639
So let's give it a shot. Why not?

151
00:11:34,639 --> 00:11:41,500
Facebook

152
00:11:41,500 --> 00:11:44,500
and surely enough...

153
00:11:44,500 --> 00:11:47,400
I should have it here somewhere, let me just see...

154
00:11:47,400 --> 00:11:49,700
It's fairly difficult to see

155
00:11:49,700 --> 00:11:52,700
Oh, I just had it...I had it

156
00:11:52,700 --> 00:11:53,300
There we go

157
00:11:53,300 --> 00:12:00,000
So "email=FACEBOOK",  and "pass=FACEBOOK"

158
00:12:00,000 --> 00:12:03,300
So over on Internet Explorer, I have managed to steal the credentials.

159
00:12:03,300 --> 00:12:06,209
Let's go ahead and see whether or not I'm going to be able to do it in Firefox

160
00:12:06,209 --> 00:12:15,000
No, but let's try anyway.

161
00:12:15,000 --> 00:12:21,500
Um no, this is definitely not going to work.

162
00:12:21,500 --> 00:12:28,000
Let's just try it one more time.

163
00:12:28,000 --> 00:12:40,000
Um, what am I going to type in here?

164
00:12:40,000 --> 00:12:43,700
Nothing has changed here, so it didn't actually managed to capture it.

165
00:12:43,700 --> 00:12:51,500
There was no stripping of this S, and the traffic unfortunately is still encrypted here.

166
00:12:51,500 --> 00:12:55,000
So we can't actually use Facebook for that, but let's try some different sites.

167
00:12:55,000 --> 00:12:57,000
Let's try PayPal

168
00:12:57,000 --> 00:13:18,440
That's one of the most common sites to receive attacks.

169
00:13:18,440 --> 00:13:24,500
No, I don't want Bing. I want PayPal.

170
00:13:24,500 --> 00:13:28,500
Amazing...amazing

171
00:13:28,500 --> 00:13:38,000
Why are you doing this to me?

172
00:13:38,000 --> 00:13:43,000
Will it open? Well, what do you know! It actually does!

173
00:13:43,000 --> 00:13:51,500
and it's running under HTTP protocol, which means username and password is in clear text

174
00:13:51,500 --> 00:13:53,500
which is fantastic.

175
00:13:53,500 --> 00:13:58,200
I do believe that I have this version of Windows updated to the max.

176
00:13:58,200 --> 00:14:03,500
Do I? Yup, there are no notifications regarding updates.

177
00:14:03,500 --> 00:14:09,500
So it is updated to the final version, along with the Internet Explorer

178
00:14:09,500 --> 00:14:13,800
and let's see if it actually works on Firefox.

179
00:14:13,800 --> 00:14:19,000
Purely doubt it, but I'm going to give it a shot anyway because I like trying things out.

180
00:14:19,000 --> 00:14:20,500
No, no it doesn't.

181
00:14:20,500 --> 00:14:30,000
Actually there is an S there, and this will not work.

182
00:14:30,000 --> 00:14:42,000
So let's try Firefox.

183
00:14:42,000 --> 00:14:44,500
Will it gives me anything? No, it will not.

184
00:14:44,500 --> 00:14:54,330
Let's see Explorer

185
00:14:54,330 --> 00:14:55,500
Yup, there we go.

186
00:14:55,500 --> 00:15:03,000
It's definitely somewhere in here.

187
00:15:03,000 --> 00:15:06,500
Okay, so let's go over to some less protected sites.

188
00:15:06,500 --> 00:15:07,800
Let's just give it a shot

189
00:15:07,800 --> 00:15:16,490
I'm gonna go over to Linux.org

190
00:15:16,490 --> 00:15:24,000
Wait, not Linux.org

191
00:15:24,000 --> 00:15:29,500
Linuxquestions.org

192
00:15:29,500 --> 00:15:33,800
This is a fantastic website to get pretty much any answers out there

193
00:15:33,800 --> 00:15:43,500
and let's do the same here.

194
00:15:43,500 --> 00:15:45,500
Let's go over to the official site

195
00:15:45,500 --> 00:15:48,000
and no

196
00:15:48,000 --> 00:15:51,500
This is in clear text anyway

197
00:15:51,500 --> 00:15:56,600
but anyway, they don't really need to add any extra security there

198
00:15:56,600 --> 00:16:00,420
because, I don't know, nobody's gonna steal these passwords.

199
00:16:00,420 --> 00:16:01,700
There's no money here.

200
00:16:01,700 --> 00:16:06,600
This is purely for educational purposes and people trade knowledge here

201
00:16:06,600 --> 00:16:09,600
but anyway, it is a good site to actually visit.

202
00:16:09,600 --> 00:16:14,200
If you have any problems, you can ask people there pretty much anything related to Linux

203
00:16:14,200 --> 00:16:18,500
and more often than not, you'll find people willing to help you out.

204
00:16:18,500 --> 00:16:24,000
Anyway, I hope I've given you a few clear demonstrations of what you can do here

205
00:16:24,000 --> 00:16:28,500
and just in case you are thinking that you cannot do anything with Firefox or Chrome

206
00:16:28,500 --> 00:16:33,200
well, you're badly mistaken, primarily because yes you can.

207
00:16:33,200 --> 00:16:40,100
Chrome and Firefox are both susceptible to sslstrip, but not on all sites.

208
00:16:40,100 --> 00:16:41,200
It won't work, for example

209
00:16:41,200 --> 00:16:45,400
it won't work on PayPal, it won't work on Google, it won't work on Facebook

210
00:16:45,400 --> 00:16:50,000
but as you have seen on Explorer, it will work on pretty much anything.

211
00:16:50,000 --> 00:16:54,200
So if you're lucky enough, your victim is using Internet Explorer

212
00:16:54,200 --> 00:17:00,400
and you have a 30% that they are, which is there not bad odds at all.

213
00:17:00,400 --> 00:17:05,200
You will be able to pretty much steal all the credentials.

214
00:17:05,200 --> 00:17:12,800
Especially important with the rise of the Windows phone, who also uses Internet Explorer.

215
00:17:12,800 --> 00:17:16,500
However, Firefox and Chrome will be vulnerable

216
00:17:16,500 --> 00:17:23,000
if people try to log in into some less secure sites somewhere else

217
00:17:23,000 --> 00:17:29,100
that are also functioning under HTTPS protocol, where the S gets stripped

218
00:17:29,100 --> 00:17:30,800
the SSL encryption.

219
00:17:30,800 --> 00:17:34,700
However, there are no extra safeguards

220
00:17:34,700 --> 00:17:38,700
and you can actually steal the log in credentials there

221
00:17:38,700 --> 00:17:42,500
and as I said before, people usually tend to recycle them and reuse them

222
00:17:42,500 --> 00:17:47,200
so you have a very good chance that they are the same.

223
00:17:47,200 --> 00:17:52,300
In any case,  I bid you all farewell.

224
00:17:52,300 --> 00:17:55,500
I hope that you have enjoyed this tutorial

225
00:17:55,500 --> 00:17:58,500
and with this, I will conclude this chapter

226
00:17:58,500 --> 00:18:03,200
and of course, I really do hope to see you in the next tutorial

227
00:18:03,200 --> 00:18:07,580
but until then, I urge you to experiment on your own, of course

228
00:18:07,580 --> 00:18:09,300
within the limits of the law.

229
00:18:09,300 --> 00:18:13,000
Anyway, I hope to see you next time.

