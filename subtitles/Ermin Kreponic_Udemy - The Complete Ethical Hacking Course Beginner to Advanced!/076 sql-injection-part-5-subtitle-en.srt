1
00:00:00,020 --> 00:00:05,000
Hello and welcome back to this tutorial.

2
00:00:05,000 --> 00:00:07,650
Now this thing has finished.

3
00:00:07,650 --> 00:00:10,800
As you can see, it says "no column(s) found"

4
00:00:10,800 --> 00:00:14,000
This can happen. Perfectly legit thing to happen.

5
00:00:14,000 --> 00:00:17,500
Let's try something else.

6
00:00:17,500 --> 00:00:22,100
You see there is a table user, but there are no columns in it

7
00:00:22,100 --> 00:00:24,600
so nothing has been placed within it

8
00:00:24,600 --> 00:00:29,300
and that can be a pain, but oh well.

9
00:00:29,300 --> 00:00:30,900
It does happen from time to time.

10
00:00:30,900 --> 00:00:33,500
I deliberately left it here just so I can show it to you.

11
00:00:33,500 --> 00:00:34,829
Let's try a different one.

12
00:00:34,829 --> 00:00:38,000
Let's try the one that I know that there's useful stuff in.

13
00:00:38,000 --> 00:00:44,000
So "dvwa --tables"

14
00:00:44,000 --> 00:00:46,500
Excellent

15
00:00:46,500 --> 00:00:49,000
It immediately fetches it.

16
00:00:49,000 --> 00:00:54,300
Now keep in mind that I am doing this locally.

17
00:00:54,300 --> 00:01:00,500
So the web server is on the same machine from which the attack is being generated

18
00:01:00,500 --> 00:01:02,200
and that gives me a speed advantage.

19
00:01:02,200 --> 00:01:05,000
That gives me a tremendous speed advantage

20
00:01:05,000 --> 00:01:07,800
that enables me to do something really fast.

21
00:01:07,800 --> 00:01:11,800
However if you are out there on the net and if you have a slow connection

22
00:01:11,800 --> 00:01:13,800
if the database is far away

23
00:01:13,800 --> 00:01:17,759
and even worse, if the connection is bad on the other end

24
00:01:17,759 --> 00:01:19,000
this can take a while.

25
00:01:19,000 --> 00:01:22,740
So these things tend to take good amount of time

26
00:01:22,740 --> 00:01:25,500
and don't be surprised if it runs for a while

27
00:01:25,500 --> 00:01:30,000
because that's just the reality that we have to accept and live with.

28
00:01:30,000 --> 00:01:32,600
Anyway, we got users, we got guestbook

29
00:01:32,600 --> 00:01:36,400
so let's have a look at users

30
00:01:36,400 --> 00:01:38,800
because I noted there was something useful there

31
00:01:38,800 --> 00:01:40,300
but you won't know

32
00:01:40,300 --> 00:01:43,100
so go through all of them.

33
00:01:43,100 --> 00:01:48,000
If you're doing a genuine pen test, go through everything that you can get.

34
00:01:48,000 --> 00:01:51,600
Go through every single day table, go through every single column

35
00:01:51,600 --> 00:01:53,300
go through every single database

36
00:01:53,300 --> 00:01:54,600
and see what is in there.

37
00:01:54,600 --> 00:01:59,500
I cannot emphasize this enough how many times that people suffer needlessly

38
00:01:59,500 --> 00:02:05,500
primarily because they were just too lazy to go through the stuff that they already had.

39
00:02:05,500 --> 00:02:12,500
So let's just go ahead and type in "-T users"

40
00:02:12,500 --> 00:02:14,400
and you cannot tabify anything here.

41
00:02:14,400 --> 00:02:16,700
You gotta type in everything pretty much manually

42
00:02:16,700 --> 00:02:20,500
which is a drag, but that's the way it is.

43
00:02:20,500 --> 00:02:22,000
Press ENTER

44
00:02:22,000 --> 00:02:24,000
Excellent! So there we go.

45
00:02:24,000 --> 00:02:26,200
This finished really fast.

46
00:02:26,200 --> 00:02:29,200
As I said, this is not going to be the case in the real world

47
00:02:29,200 --> 00:02:32,800
or maybe it will, but it is very unlikely

48
00:02:32,800 --> 00:02:36,000
primarily because of the speed limitations.

49
00:02:36,000 --> 00:02:37,800
Anyway, we got a column here.

50
00:02:37,800 --> 00:02:38,800
We have a type

51
00:02:38,800 --> 00:02:43,720
Type tells us what sort of information is stored within this column.

52
00:02:43,720 --> 00:02:47,900
For example, "int" is number.

53
00:02:47,900 --> 00:02:49,500
So, an integer

54
00:02:49,500 --> 00:02:51,000
That's the English word for it.

55
00:02:51,000 --> 00:02:53,000
Integer is a whole number

56
00:02:53,000 --> 00:02:57,150
So 123456, or 0

57
00:02:57,150 --> 00:03:04,600
If by any chance it says "unsigned int", then it doesn't have any negative numbers

58
00:03:04,600 --> 00:03:05,520
but if it just "int"

59
00:03:05,520 --> 00:03:07,900
It can be, I don't know, minus 12345

60
00:03:07,900 --> 00:03:08,800
Whatever

61
00:03:08,800 --> 00:03:12,500
Now 1.26 is not an integer.

62
00:03:12,500 --> 00:03:16,000
It is a floating point number.

63
00:03:16,000 --> 00:03:18,840
So if you have "int",  basically just means numbers.

64
00:03:18,840 --> 00:03:19,340
That's it

65
00:03:19,340 --> 00:03:22,720
"varchar" I'm pretty sure that's just characters, strings.

66
00:03:22,720 --> 00:03:25,500
Some sort of strings placed in there

67
00:03:25,500 --> 00:03:30,000
It could be like complex strings, where you...

68
00:03:30,000 --> 00:03:31,200
Sorry, not complex strings

69
00:03:31,200 --> 00:03:34,000
just regular strings, where you can have spaces.

70
00:03:34,000 --> 00:03:35,930
It could be these strings

71
00:03:35,930 --> 00:03:40,500
where you have like every individual characters or something like that.

72
00:03:40,500 --> 00:03:42,800
I'm not exactly sure how that works.

73
00:03:42,800 --> 00:03:48,200
I would have to revise some of my programs because I'm not really good with theory

74
00:03:48,200 --> 00:03:51,000
but I can make it work in practice.

75
00:03:51,000 --> 00:03:55,200
Anyway, soon enough you will see what is contained within those columns

76
00:03:55,200 --> 00:03:58,400
and then you'll be able to judge for yourselves.

77
00:03:58,400 --> 00:04:02,000
If I've made some mistakes here, please
forgive me.

78
00:04:02,000 --> 00:04:03,900
So just go ahead and delete this

79
00:04:03,900 --> 00:04:07,500
and type in "-C user"

80
00:04:07,500 --> 00:04:09,700
and this is basically column

81
00:04:09,700 --> 00:04:15,100
So C for column, T for table, D for database

82
00:04:15,100 --> 00:04:16,200
Really simple

83
00:04:16,200 --> 00:04:17,300
Plain English language

84
00:04:17,300 --> 00:04:23,400
There aren't any complicated sets of commands that you need to type in here.

85
00:04:23,400 --> 00:04:26,400
For example, here the only thing that you need to pay attention at

86
00:04:26,400 --> 00:04:28,000
is the limiter for cookies.

87
00:04:28,000 --> 00:04:33,900
So, semicolon basically takes apart two types of cookies

88
00:04:33,900 --> 00:04:36,250
and you it specify here.

89
00:04:36,250 --> 00:04:37,600
The cookie, and you specify it here

90
00:04:37,600 --> 00:04:40,300
and just say equals, equals, and this.

91
00:04:40,300 --> 00:04:43,000
So no big deal there.

92
00:04:43,000 --> 00:04:47,870
Mainly just equal signs, slashes, colons, semicolons, etc.

93
00:04:47,870 --> 00:04:54,400
dashes, but when you're passing arguments to a program

94
00:04:54,400 --> 00:05:01,800
usually those arguments will reflect their purpose.

95
00:05:01,800 --> 00:05:03,760
For example, you want to list columns

96
00:05:03,760 --> 00:05:06,500
What are you gonna do? Type  -C for colons.

97
00:05:06,500 --> 00:05:08,800
You want tables? -T for tables

98
00:05:08,800 --> 00:05:11,500
Databases? -D for databases

99
00:05:11,500 --> 00:05:12,400
Very simple

100
00:05:12,400 --> 00:05:15,700
You don't teach through invest much thought into it.

101
00:05:15,700 --> 00:05:19,000
It's plain and simple English language

102
00:05:19,000 --> 00:05:21,400
and if I want more than one column

103
00:05:21,400 --> 00:05:25,000
I can just type in comma and specify another one.

104
00:05:25,000 --> 00:05:26,500
It's pretty easy

105
00:05:26,500 --> 00:05:27,800
so no big deal there.

106
00:05:27,800 --> 00:05:32,900
I can say "password", and I'm gonna go ahead...

107
00:05:32,900 --> 00:05:37,500
Sure, let's take the first name and last name as well.

108
00:05:37,500 --> 00:05:46,200
"first_name, last_name"

109
00:05:46,200 --> 00:05:47,600
Excellent

110
00:05:47,600 --> 00:05:52,000
These things can be pretty long and you don't want to type all of them

111
00:05:52,000 --> 00:05:57,479
So, why not? Well you don't have the screen for it basically.

112
00:05:57,479 --> 00:06:01,000
If you have too many of these things, they will crowd your screen

113
00:06:01,000 --> 00:06:03,400
and you won't be able to see anything.

114
00:06:03,400 --> 00:06:06,200
You won't be able to make heads or tails out of it.

115
00:06:06,200 --> 00:06:11,300
So just take a smaller amount of columns at a time

116
00:06:11,300 --> 00:06:13,200
like take two or three, maybe four.

117
00:06:13,200 --> 00:06:19,000
I have pretty big screen here -- Let's see if it's going to fit or not.

118
00:06:19,000 --> 00:06:21,400
Okay, so shutting down.

119
00:06:21,400 --> 00:06:35,000
What happened here?

120
00:06:35,000 --> 00:06:42,600
Okay, I probably misspelled something.

121
00:06:42,600 --> 00:06:45,200
Okay, let's just take user and password

122
00:06:45,200 --> 00:06:53,000
and then take first name and last name separately.

123
00:06:53,000 --> 00:06:57,500
Ugh, come on, what are you doing to me?

124
00:06:57,500 --> 00:07:00,000
Let's check the command out once more

125
00:07:00,000 --> 00:07:07,000
Ugh, of course. I've been taking it all but I didn't dump it anywhere

126
00:07:07,000 --> 00:07:09,500
I'm a brilliant person

127
00:07:09,500 --> 00:07:14,200
"do you want to store hashes to a temporary fie for eventual further processing with other tools"

128
00:07:14,200 --> 00:07:17,300
Now, what just happened to me...

129
00:07:17,300 --> 00:07:21,900
These things tend to happen to anyone, no matter at what level

130
00:07:21,900 --> 00:07:23,000
so don't worry about it.

131
00:07:23,000 --> 00:07:24,900
Just don't lose your nerves over it.

132
00:07:24,900 --> 00:07:28,100
I cannot emphasize enough how important it is to stay calm.

133
00:07:28,100 --> 00:07:30,500
If you can stay calm

134
00:07:30,500 --> 00:07:33,959
leave the machine as it is, lock it

135
00:07:33,959 --> 00:07:38,199
go have a walk or something or take a glass of water

136
00:07:38,199 --> 00:07:40,200
or tea, whatever

137
00:07:40,200 --> 00:07:43,000
Come back after 15 minutes and continue working.

138
00:07:43,000 --> 00:07:47,600
Believe me, you will figure out a solution far faster than just smashing against your keyboard

139
00:07:47,600 --> 00:07:49,400
or something of a kind.

140
00:07:49,400 --> 00:07:57,700
Anyway, it says "1337", "Hack", "Me", and then we have some sort of hash here.

141
00:07:57,700 --> 00:08:00,199
That's probably a password

142
00:08:00,199 --> 00:08:03,400
depending on how we actually use this.

143
00:08:03,400 --> 00:08:13,000
So it says "fetching columns 'user, first_name, last_name, password"

144
00:08:13,000 --> 00:08:17,600
What do we got here?

145
00:08:17,600 --> 00:08:18,600
Ah, there we go

146
00:08:18,600 --> 00:08:22,500
So apparently these are "admin", "admin",  "admin"

147
00:08:22,500 --> 00:08:24,000
"gordonb"

148
00:08:24,000 --> 00:08:27,000
So this is the first name, this is the last name

149
00:08:27,000 --> 00:08:30,000
and what on earth have I requested here?

150
00:08:30,000 --> 00:08:35,000
Let's just have a look.

151
00:08:35,000 --> 00:08:38,000
Apparently this is the user.

152
00:08:38,000 --> 00:08:41,900
So that would be the username, I'm guessing

153
00:08:41,900 --> 00:08:44,200
but we will see this very shortly

154
00:08:44,200 --> 00:08:48,200
but just by looking at this, you can conclude a lot.

155
00:08:48,200 --> 00:08:52,000
So I'm guessing this is the first name, this is the last name

156
00:08:52,000 --> 00:08:59,800
this is the password, and this is what you type in as a user.

157
00:08:59,800 --> 00:09:02,000
Yup, gordonb

158
00:09:02,000 --> 00:09:04,300
and it says "Gordon", and then "Brown", and then a hash.

159
00:09:04,300 --> 00:09:07,400
Yup, I do believe that I am correct

160
00:09:07,400 --> 00:09:11,000
Next up, as I said, there's this question it's asking you.

161
00:09:11,000 --> 00:09:13,800
So you can store these hashes, and then individually crack them

162
00:09:13,800 --> 00:09:15,860
because you cannot use them as they are.

163
00:09:15,860 --> 00:09:20,500
You need to actually figure out a password from this.

164
00:09:20,500 --> 00:09:24,800
If the password is shorter

165
00:09:24,800 --> 00:09:28,900
if it's some sort of a word from an English dictionary or something like that

166
00:09:28,900 --> 00:09:31,800
combined with some numbers or something of a kind

167
00:09:31,800 --> 00:09:36,200
yes sure, it can be cracked within a reasonable amount of time.

168
00:09:36,200 --> 00:09:40,500
If you have some sort of a password like me on my main machine...

169
00:09:40,500 --> 00:09:45,000
No, you're just not gonna be able to crack it.

170
00:09:45,000 --> 00:09:53,000
Even if you were able to crack eight million pass attempts per second

171
00:09:53,000 --> 00:09:55,600
attempt to crack it eight million times per second

172
00:09:55,600 --> 00:09:57,180
it would take you more than a decade

173
00:09:57,180 --> 00:09:58,800
Far more than a decade

174
00:09:58,800 --> 00:10:00,800
I can't calculate that

175
00:10:00,800 --> 00:10:06,500
but usually that means that the password is longer than, I don't know, eight characters

176
00:10:06,500 --> 00:10:09,200
and that it has all sorts of things it it

177
00:10:09,200 --> 00:10:17,700
I don't know, like numbers, signs, capital letters, lower case letters, etc

178
00:10:17,700 --> 00:10:21,300
This can be problematic, especially in the realm of 12 or 13

179
00:10:21,300 --> 00:10:23,800
then goodbye.

180
00:10:23,800 --> 00:10:26,000
You're not going to be able to crack this hash.

181
00:10:26,000 --> 00:10:30,200
You're better off at attempting to do something else

182
00:10:30,200 --> 00:10:33,900
but anyway, for this for this tutorial

183
00:10:33,900 --> 00:10:37,200
we're going to try to crack it with a default dictionary that is here

184
00:10:37,200 --> 00:10:41,800
but you could also at implement other dictionaries and you can use other tools as well

185
00:10:41,800 --> 00:10:43,630
to crack these hashes.

186
00:10:43,630 --> 00:10:47,850
You can implement customized dictionaries, you can implement custom ranges

187
00:10:47,850 --> 00:10:51,800
and then generate passwords from those ranges to attempt to crack this

188
00:10:51,800 --> 00:10:53,370
and stuff of a kind.

189
00:10:53,370 --> 00:10:57,180
There are a good amount of options out there for you but

190
00:10:57,180 --> 00:11:01,000
but just a reminder

191
00:11:01,000 --> 00:11:08,500
You would not believe, I mean you literally would not believe the sort of passwords people use

192
00:11:08,500 --> 00:11:14,500
on their main servers, on their gateway routers

193
00:11:14,500 --> 00:11:20,500
which are the entry points to their networks  and the building or something like that.

194
00:11:20,500 --> 00:11:24,900
I don't know, I have seen passwords literally on a router

195
00:11:24,900 --> 00:11:29,460
which is used to exit onto the internet for a company

196
00:11:29,460 --> 00:11:32,200
Username "admin", password "admin"

197
00:11:32,200 --> 00:11:35,510
How fascinating can that be?

198
00:11:35,510 --> 00:11:40,700
I don't know, people actually sometimes don't pay attention to these things

199
00:11:40,700 --> 00:11:45,000
but there are a large amount of passwords out there

200
00:11:45,000 --> 00:11:50,000
which simply are not of any use.

201
00:11:50,000 --> 00:11:53,000
If you can get the hash, you will crack it for sure

202
00:11:53,000 --> 00:11:56,000
So be optimistic as far as that part is concerned

203
00:11:56,000 --> 00:12:01,000
but from time to time, you will encounter somebody that actually uses proper passwords

204
00:12:01,000 --> 00:12:04,220
and you simply won't be able to do anything but the hash there

205
00:12:04,220 --> 00:12:06,200
but there are always other methods, as I said

206
00:12:06,200 --> 00:12:10,580
Anyway, you can store them,  but I don't want store them.

207
00:12:10,580 --> 00:12:19,800
Let's give SQL map to actually crack them with a default dictionary.

208
00:12:19,800 --> 00:12:25,600
There is a dictionary based attack, so you can type in yes

209
00:12:25,600 --> 00:12:29,700
"default dictionary file"

210
00:12:29,700 --> 00:12:35,000
Okay, so you can use as default and you can specify a custom file.

211
00:12:35,000 --> 00:12:37,500
Custom dictionary file you can download from the net.

212
00:12:37,500 --> 00:12:42,000
Just type in dictionary files for password brute force or something like that.

213
00:12:42,000 --> 00:12:45,400
You can get them pretty much on a lot of places on the net.

214
00:12:45,400 --> 00:12:49,130
Try to find the ones that is most suited to your purpose.

215
00:12:49,130 --> 00:12:56,500
In your search queries on the net, type
in what sort of a password are you trying to crack.

216
00:12:56,500 --> 00:13:02,500
Perhaps what type of site is it or something of a kind.

217
00:13:02,500 --> 00:13:10,000
You can also have "file with a list of the directory files", which is very interesting as well.

218
00:13:10,000 --> 00:13:14,000
So you can have a list of the directory files within a file

219
00:13:14,000 --> 00:13:18,000
and you can try multiple dictionaries from websites.

220
00:13:18,000 --> 00:13:24,000
The good thing with this is that you don't need necessarily store all the dictionaries on your computer

221
00:13:24,000 --> 00:13:25,800
because they can be pretty large.

222
00:13:25,800 --> 00:13:31,900
You can store a couple, try them out, delete them, download a couple of others

223
00:13:31,900 --> 00:13:34,400
try them out and so on and so forth.

224
00:13:34,400 --> 00:13:38,200
Anyway, I'm just gonna use the default one, which is press ENTER

225
00:13:38,200 --> 00:13:42,000
"do you want to use common password suffixes?"

226
00:13:42,000 --> 00:13:45,200
No, I don't want them.

227
00:13:45,200 --> 00:13:47,800
Let's see what you're gonna do, how you're gonna crack it.

228
00:13:47,800 --> 00:13:52,400
It says "multiprocessing hash cracking is currently not supported on this platform"

229
00:13:52,400 --> 00:13:58,000
I am on a virtual machine, so give me
give me a break here.

230
00:13:58,000 --> 00:14:02,000
This is working as fast as it possibly can.

231
00:14:02,000 --> 00:14:07,000
It only has one processor core assigned to it if I didn't actually do anything

232
00:14:07,000 --> 00:14:10,200
So you see there is stuff happening here

233
00:14:10,200 --> 00:14:13,700
It's doing some of the things

234
00:14:13,700 --> 00:14:16,300
"do you want to crack them via a dictionary-based attack?"

235
00:14:16,300 --> 00:14:21,800
Okay, I think this is asking me for my current username and password that I am using.

236
00:14:21,800 --> 00:14:23,000
Sure, why not?

237
00:14:23,000 --> 00:14:25,000
You see it says admin admin admin

238
00:14:25,000 --> 00:14:26,900
That's what I've been using.

239
00:14:26,900 --> 00:14:28,800
It says "password"

240
00:14:28,800 --> 00:14:35,000
and there is the hash for a password and then there is the actual password

241
00:14:35,000 --> 00:14:38,500
last_name, first_name, user

242
00:14:38,500 --> 00:14:44,000
If we go back up, you can see that we have actually retrieved pretty much everything

243
00:14:44,000 --> 00:14:47,000
for other users on the site.

244
00:14:47,000 --> 00:14:52,600
So we've cracked this one, we've cracked this, cracked this one, this one as well

245
00:14:52,600 --> 00:14:58,700
and okay, I do admit this is generally not the type of a password people will use

246
00:14:58,700 --> 00:15:03,500
but they will probably use something relatively similar.

247
00:15:03,500 --> 00:15:06,000
Maybe they'll be a couple of numbers or something like that

248
00:15:06,000 --> 00:15:12,000
which is nothing too difficult to crack, especially if it's a dictionary word or an English name.

249
00:15:12,000 --> 00:15:14,500
That's gonna fly for sure

250
00:15:14,500 --> 00:15:25,500
Anyway, you can use these credentials to log into a website and basically obtain access

251
00:15:25,500 --> 00:15:27,200
especially if you can log in as admin.

252
00:15:27,200 --> 00:15:30,200
That's kind of ridiculous, but yeah

253
00:15:30,200 --> 00:15:33,200
Anyway, what I want to say here is...

254
00:15:33,200 --> 00:15:35,700
I don't know, sometimes people have asked me

255
00:15:35,700 --> 00:15:38,300
"Well, you have the hash. Like why can't you do that?"

256
00:15:38,300 --> 00:15:42,200
"Why can't you pass it as a password? Isn't that the same thing?"

257
00:15:42,200 --> 00:15:46,000
No, not really because the website on the other end

258
00:15:46,000 --> 00:15:49,200
it takes this word as a password

259
00:15:49,200 --> 00:15:52,100
it runs it through some sort of mathematical algorithm

260
00:15:52,100 --> 00:15:55,300
which converts it into this.

261
00:15:55,300 --> 00:16:01,600
It encrypts it in essence, and then it compares what has encrypted here

262
00:16:01,600 --> 00:16:04,000
and compares the encrypted form of this.

263
00:16:04,000 --> 00:16:11,800
So it compares the encrypted form of "Charley"  to the encryption

264
00:16:11,800 --> 00:16:20,500
which is stored within its own tables somewhere on the server disks

265
00:16:20,500 --> 00:16:25,700
If you were to pass this in, this would get encrypted

266
00:16:25,700 --> 00:16:31,800
and it wouldn't be the same as the encrypted version of Charley.

267
00:16:31,800 --> 00:16:34,000
So you can't actually pass this.

268
00:16:34,000 --> 00:16:38,000
There is a method called "Pass the hash" for Windows password cracking

269
00:16:38,000 --> 00:16:40,800
but that is a subject for another time.

270
00:16:40,800 --> 00:16:44,700
If you wish, feel free to take a look at it on the net.

271
00:16:44,700 --> 00:16:51,200
Anyway, I bid you farewell and I hope to continue this in the follow-up tutorial.

272
00:16:51,200 --> 00:16:53,000
We'll see what we will do there.

273
00:16:53,000 --> 00:16:56,000
Until then, I bid you farewell.

