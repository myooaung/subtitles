1
00:00:00,390 --> 00:00:01,980
Let's choose generic button.

2
00:00:03,090 --> 00:00:06,120
So then you can just start typing, click me right away.

3
00:00:06,120 --> 00:00:09,460
I'm noticing that the button background color is transparent.

4
00:00:09,480 --> 00:00:10,500
That's not what we want.

5
00:00:10,680 --> 00:00:14,910
We would want it to be the fictional university blue or fictional university orange.

6
00:00:15,360 --> 00:00:20,730
Now, in our next lesson, we can actually build the dynamic color picker tool for this lesson.

7
00:00:20,730 --> 00:00:24,900
Let's just hard code it to be blue by default and we can circle back to that later.

8
00:00:25,500 --> 00:00:33,330
So in other words, in the edit component, right on the rich text in the class name after the button

9
00:00:33,330 --> 00:00:37,770
dash, dash, curly bracket, but before the back tick closing curly brackets are right here.

10
00:00:37,770 --> 00:00:42,390
You could just say BTN dashed dashed blue and then do the same thing.

11
00:00:42,390 --> 00:00:48,690
If you scroll down just a tiny bit on the opening tag here we see class name again right before the

12
00:00:48,690 --> 00:00:50,370
closing back tick and curly bracket.

13
00:00:50,370 --> 00:00:52,650
You can just say BTN dashed, dashed blue.

14
00:00:53,010 --> 00:00:58,080
So we'll hollow this out and make it actually dynamic and choose a bowl a bit later on.

15
00:00:58,080 --> 00:00:59,430
But for now we can save that.

16
00:01:00,000 --> 00:01:02,220
And let's go ahead and refresh the template editor.

17
00:01:04,910 --> 00:01:05,750
Insert that again.

18
00:01:05,750 --> 00:01:07,700
Click the plus symbol generic button.

19
00:01:09,400 --> 00:01:10,390
Learn more.

20
00:01:10,420 --> 00:01:10,810
Cool.

21
00:01:10,810 --> 00:01:12,190
And it's actually blue now.

22
00:01:12,610 --> 00:01:17,770
In our next lesson, we'll set up the color choosing ability for the remainder of this lesson, let's

23
00:01:17,770 --> 00:01:21,520
work on the actual link value, the ref value, right?

24
00:01:21,520 --> 00:01:25,000
So when someone clicks on this button, where should they go?

25
00:01:25,600 --> 00:01:26,890
So here's what I have in mind.

26
00:01:27,250 --> 00:01:32,890
Once you click on this in the editor admin screen, this toolbar appears right and you can use this

27
00:01:32,890 --> 00:01:35,350
to change if it's large, medium or small.

28
00:01:35,770 --> 00:01:36,160
Cool.

29
00:01:36,520 --> 00:01:40,900
Well, I think maybe just right about here, we can have the link icon.

30
00:01:41,140 --> 00:01:47,080
When you click that a little pop up window will appear and you can start searching for any pages or

31
00:01:47,080 --> 00:01:50,080
posts on your website or just a you are URL in general.

32
00:01:50,680 --> 00:01:50,950
Right?

33
00:01:50,950 --> 00:01:54,100
And then that URL will be used for the ref value.

34
00:01:54,520 --> 00:01:56,050
So how would we set that up?

35
00:01:56,560 --> 00:01:58,510
Well, let's go look at our edit component.

36
00:01:59,500 --> 00:02:02,140
So up here there's the rich text for the edit component.

37
00:02:02,350 --> 00:02:08,710
But notice we already have block controls and a toolbar group for the large, medium and small buttons.

38
00:02:09,250 --> 00:02:15,220
So what I would do right above this toolbar group, I would just create another toolbar group, toolbar

39
00:02:15,220 --> 00:02:16,630
group opening and closing.

40
00:02:16,840 --> 00:02:22,930
So this toolbar group will be for the small, medium and large, but this group can have the link icon

41
00:02:22,930 --> 00:02:23,680
that you click.

42
00:02:24,220 --> 00:02:31,750
So inside this group we just need one tool bar button can be self-closing.

43
00:02:32,200 --> 00:02:39,610
Let's give it a prop of on click equals curly brackets and another prop of icon equals curly brackets.

44
00:02:40,120 --> 00:02:40,900
Four on click.

45
00:02:40,900 --> 00:02:42,460
Let's just point towards a function.

46
00:02:42,670 --> 00:02:46,270
We can name it maybe button handler.

47
00:02:47,140 --> 00:02:49,360
Let's go actually create a function with this name.

48
00:02:49,360 --> 00:02:56,830
So within our edit component function, but above our return line, I can just say function button handler,

49
00:02:56,830 --> 00:03:00,850
parentheses, curly brackets in terms of what we actually do in this function.

50
00:03:00,850 --> 00:03:02,770
We can circle back to that in just a moment.

51
00:03:03,100 --> 00:03:07,720
First, let's just make sure that the button is actually appearing on screen.

52
00:03:08,230 --> 00:03:13,840
So let's fill in this icon value, just point towards a variable called link.

53
00:03:14,350 --> 00:03:20,980
Now up at the very top of our file, let's import the official WordPress link icon and make it available

54
00:03:20,980 --> 00:03:21,730
from this name.

55
00:03:21,730 --> 00:03:29,620
So up at the very top, a brand new line of code will say import curly brackets link and we're importing

56
00:03:29,620 --> 00:03:34,720
it from a package called at symbol WordPress slash icons.

57
00:03:35,050 --> 00:03:37,840
Now this appears to be an exception to the rule.

58
00:03:38,080 --> 00:03:44,260
For whatever reason, the official WordPress Scripts package will not be able to locate this and alias

59
00:03:44,260 --> 00:03:45,370
this for us.

60
00:03:45,730 --> 00:03:51,100
So even though we didn't need to manually install, you know, components or block editor or blocks

61
00:03:51,100 --> 00:03:55,900
from NPM, we do need to go at least as of today, as of this recording.

62
00:03:56,020 --> 00:03:58,990
We do need to go to NPM and install this package.

63
00:03:59,500 --> 00:04:02,710
So hit save on your keyboard, open up your command line.

64
00:04:02,860 --> 00:04:08,290
We can press control C to stop the current task and then just run this with me.

65
00:04:08,710 --> 00:04:14,860
NPM install at symbol WordPress slash icons.

66
00:04:15,700 --> 00:04:16,840
Go ahead and press enter.

67
00:04:17,350 --> 00:04:21,400
As soon as that installation finishes, we're just going to restart up our script.

68
00:04:21,550 --> 00:04:22,990
So let me run clear.

69
00:04:22,990 --> 00:04:24,100
I'm only running clear.

70
00:04:24,100 --> 00:04:27,910
So it's not falling off the bottom of the screen so you can actually see it in the recording.

71
00:04:28,150 --> 00:04:32,410
You don't need to worry about ever typing clear if you see me do that anyways.

72
00:04:32,410 --> 00:04:34,060
Now we just start up our task again.

73
00:04:34,060 --> 00:04:36,220
So npm run start.

74
00:04:37,750 --> 00:04:38,110
Okay.

75
00:04:38,110 --> 00:04:42,910
And then back in the browser if we've refreshed the template editor and again, just a reminder, you

76
00:04:42,910 --> 00:04:47,650
might want to save your template editor before refreshing so you don't have to keep inserting the button

77
00:04:47,650 --> 00:04:49,030
block again and again and again.

78
00:04:49,030 --> 00:04:51,040
But with that saved if I refresh.

79
00:04:53,120 --> 00:04:54,320
And click on the block.

80
00:04:55,070 --> 00:04:55,690
Perfect.

81
00:04:55,700 --> 00:04:57,950
There is the link icon.

82
00:04:58,520 --> 00:05:02,780
So now it's just a matter of when you click on that, something should actually happen.

83
00:05:03,440 --> 00:05:05,450
What specifically do we think should happen?

84
00:05:05,630 --> 00:05:11,720
Well, let's set things up so that when you click this, it toggles whether the link chooser tool is

85
00:05:11,720 --> 00:05:12,680
visible or not.

86
00:05:13,070 --> 00:05:16,640
So we're going to have a piece of data that will just be true or false.

87
00:05:16,640 --> 00:05:19,860
And it's essentially saying, is the link chooser visible?

88
00:05:19,880 --> 00:05:20,900
True or false?

89
00:05:21,260 --> 00:05:23,450
Now, where should we save that data?

90
00:05:23,930 --> 00:05:27,500
Well, I'm actually not going to store it in attributes.

91
00:05:28,010 --> 00:05:30,830
I'm going to use React State itself.

92
00:05:31,250 --> 00:05:36,860
My reasoning for this is because we don't ever, ever need to store something like that in the database.

93
00:05:37,280 --> 00:05:37,520
Right.

94
00:05:37,530 --> 00:05:43,040
It's just a super temporary UI detail of whether you've toggled it to be visible or not.

95
00:05:43,580 --> 00:05:43,820
Right.

96
00:05:43,820 --> 00:05:47,630
So there's no sense in treating it like a meaningful block attribute.

97
00:05:48,140 --> 00:05:51,950
So how do you use React State within the context of WordPress?

98
00:05:52,310 --> 00:05:58,160
Well, up at the top here, let's say import curly brackets, import something called use state.

99
00:05:58,730 --> 00:06:02,990
From now outside of the WordPress world, you would import React.

100
00:06:03,350 --> 00:06:10,790
But in WordPress we would import this from at some more quotes, WordPress slash element.

101
00:06:11,330 --> 00:06:16,310
So WordPress makes React available sort of as an alias on element.

102
00:06:16,910 --> 00:06:18,350
I believe WordPress does this.

103
00:06:18,350 --> 00:06:23,990
So if in the future they ever wanted to get rid of React and replace it with another JavaScript library,

104
00:06:24,260 --> 00:06:30,020
they have this abstraction layer right instead of having you and I as the developer directly depend

105
00:06:30,020 --> 00:06:31,910
on and call react directly.

106
00:06:32,360 --> 00:06:36,920
Anyways, now that we have use state, let's go use it in our edit component.

107
00:06:37,430 --> 00:06:43,010
So at the very start of the body of our edit component function right here, let's say const square

108
00:06:43,010 --> 00:06:43,730
brackets.

109
00:06:44,330 --> 00:06:48,380
So have a comma B for the first value we get to make up a name for our piece of state.

110
00:06:48,380 --> 00:06:55,430
We can name it anything, but why don't we call it is link picker visible?

111
00:06:56,360 --> 00:06:59,240
And then for B it would be set.

112
00:06:59,450 --> 00:07:02,270
Is link picker visible?

113
00:07:03,530 --> 00:07:08,990
All of that should equal use state and give it a default value of false.

114
00:07:09,350 --> 00:07:14,780
In other words, when you first load the block of the page, we wouldn't want the link chooser to already

115
00:07:14,780 --> 00:07:15,440
be visible.

116
00:07:15,440 --> 00:07:16,250
So false.

117
00:07:16,820 --> 00:07:22,490
Now we can just set things up so that when you click on this link icon, we manipulate that value to

118
00:07:22,490 --> 00:07:23,120
be true.

119
00:07:23,540 --> 00:07:32,060
So let's do this in our button handler function within the curly brackets we would just call set is

120
00:07:32,390 --> 00:07:38,840
link picker visible and instead of just setting it to always be true, let's set it to the opposite

121
00:07:38,840 --> 00:07:40,460
of whatever it currently is.

122
00:07:40,940 --> 00:07:43,970
So that way this button can actually act as a toggle, right?

123
00:07:43,970 --> 00:07:48,230
If the link picker tool is visible and you click this link again, it should hide it.

124
00:07:48,920 --> 00:07:53,050
So to do that, we would just say start with the previous value pass.

125
00:07:53,060 --> 00:07:54,440
I didn't do an arrow function.

126
00:07:54,860 --> 00:07:56,090
And what do we want to return?

127
00:07:56,090 --> 00:07:58,490
Just the opposite of the previous value.

128
00:07:58,490 --> 00:08:00,350
So exclamation prev.

129
00:08:00,950 --> 00:08:01,280
Cool.

130
00:08:01,460 --> 00:08:05,870
Now before we go use that value is link picker visible in our gsx.

131
00:08:06,140 --> 00:08:12,740
Let's first import a component from WordPress that makes it very easy to display sort of an inline pop

132
00:08:12,740 --> 00:08:13,970
up bit of content.

133
00:08:14,480 --> 00:08:21,350
So up at the very top of our file on this line where we're importing from WordPress components, let's

134
00:08:21,350 --> 00:08:22,430
import something else.

135
00:08:22,430 --> 00:08:26,960
So comma, the thing we're interested in is pop over.

136
00:08:27,680 --> 00:08:31,310
This makes it really easy to create sort of pop ups or popovers.

137
00:08:31,760 --> 00:08:38,720
So here's what I would do down in our edit component gsx maybe right below our rich text field.

138
00:08:38,960 --> 00:08:45,200
So right before the closing of the fragment right about here, let's have curly brackets and let's say

139
00:08:45,680 --> 00:08:49,160
is link picker visible?

140
00:08:49,160 --> 00:08:56,990
So that's going to be true or false and ingest X, we can just say and end parentheses, you can drop

141
00:08:56,990 --> 00:09:03,440
down in the parentheses and now whatever we include here will only be included if this is true.

142
00:09:04,100 --> 00:09:05,870
So what do we want to include in here?

143
00:09:06,200 --> 00:09:10,220
Let's just have a pop over for now.

144
00:09:10,220 --> 00:09:13,280
In the pop over, let's just have the word hello.

145
00:09:13,790 --> 00:09:15,410
And then three exclamations.

146
00:09:15,800 --> 00:09:20,570
In a minute we can have the actual link picker live here, but let's give this a test.

147
00:09:20,570 --> 00:09:21,470
So save that.

148
00:09:21,870 --> 00:09:23,510
So refresh our template editor.

149
00:09:24,320 --> 00:09:27,590
So if we click on our button and then click on the link icon.

150
00:09:28,880 --> 00:09:29,270
Cool.

151
00:09:29,300 --> 00:09:32,300
Notice this just popped up sort of animated in The View.

152
00:09:32,300 --> 00:09:35,480
And if we click on the link icon again, it goes away.

153
00:09:36,630 --> 00:09:37,440
Perfect.

154
00:09:37,890 --> 00:09:43,770
So now, instead of just the word hello and three exclamations, let's have an actual link chooser tool.

155
00:09:44,340 --> 00:09:46,470
Luckily we don't need to reinvent the wheel.

156
00:09:46,650 --> 00:09:50,430
WordPress already has a link chooser that we can just leverage.

157
00:09:50,880 --> 00:09:58,800
So back up at the very top of our code when we are importing items from WordPress slash block editor,

158
00:09:59,160 --> 00:10:00,390
let's add a comma.

159
00:10:01,020 --> 00:10:06,450
And trust me, I realize the name of this looks really weird, but as of today, this is what it is.

160
00:10:06,720 --> 00:10:14,190
It's underscore, underscore, experimental, uppercase link, uppercase control.

161
00:10:14,530 --> 00:10:19,940
Now, I don't know about you, but I don't want to have to type that in down below in our gsx.

162
00:10:19,950 --> 00:10:25,770
So what we can do is say import that as just link control.

163
00:10:26,130 --> 00:10:28,830
So then this is sort of an alias or a shortcut.

164
00:10:29,070 --> 00:10:35,220
This is what we can actually use down below before we go down into our JS acts and actually leverage

165
00:10:35,220 --> 00:10:36,210
link control.

166
00:10:36,450 --> 00:10:38,190
Let's update our attributes.

167
00:10:39,000 --> 00:10:41,270
So we have the text that you type in that you click on.

168
00:10:41,280 --> 00:10:47,100
We have the size without a comma and let's have something called I mean, we can make up any name we

169
00:10:47,100 --> 00:10:49,470
want, but just so you and I are on the same page.

170
00:10:49,800 --> 00:10:52,590
Let's call it maybe link object.

171
00:10:53,610 --> 00:10:55,070
Call in curly brackets.

172
00:10:55,080 --> 00:10:58,170
It's a type of object.

173
00:10:58,890 --> 00:11:05,340
So in the WordPress link control link picker tool, when you select a link, it's going to store multiple

174
00:11:05,340 --> 00:11:07,080
pieces of data about that link.

175
00:11:07,090 --> 00:11:11,880
So for example, if you clicked on a blog post that you wanted to link towards, it's going to store

176
00:11:12,030 --> 00:11:18,720
the ID number of that blog post in addition to the title of the blog post and then the actual URL for

177
00:11:18,720 --> 00:11:19,500
the blog post.

178
00:11:19,530 --> 00:11:24,780
So we've got multiple pieces of information that will live inside of link object.

179
00:11:25,210 --> 00:11:25,520
Cool.

180
00:11:25,530 --> 00:11:30,930
So now that that's in place, there's just one more detail before we set up the actual gsx on the line

181
00:11:30,930 --> 00:11:32,670
where we're importing from components.

182
00:11:32,910 --> 00:11:37,260
In addition to pop over, let's say comma, let's also import something called button.

183
00:11:38,010 --> 00:11:38,370
Cool.

184
00:11:38,610 --> 00:11:41,880
Now we should have all the pieces we need to build something meaningful.

185
00:11:41,910 --> 00:11:47,390
So if we scroll down into the pop over Gsx area, let's get the parentheses back.

186
00:11:47,400 --> 00:11:49,740
So opening parentheses before pop over.

187
00:11:50,010 --> 00:11:51,450
Closing parentheses there.

188
00:11:51,750 --> 00:11:54,810
So now we can drop down to multiple lines like this.

189
00:11:55,380 --> 00:11:58,200
And now we don't just want the word hello inside the pop over.

190
00:11:58,380 --> 00:12:03,060
What we truly want is a link control.

191
00:12:04,020 --> 00:12:05,820
Oops, I didn't mean to have the closing tag.

192
00:12:05,820 --> 00:12:09,090
We want a self-closing link control tag just like this.

193
00:12:09,600 --> 00:12:14,480
Let's give it a few props so we can have one called settings and let's just set that to an empty array.

194
00:12:14,490 --> 00:12:19,490
We don't need any custom settings for its value, so value equals curly brackets.

195
00:12:19,500 --> 00:12:22,730
That would just be that link object that we set up a moment ago.

196
00:12:22,740 --> 00:12:27,220
So props dot attributes dot link object.

197
00:12:27,900 --> 00:12:34,500
Okay, finally, let's give it a prop of on change equals curly brackets and let's make up a function

198
00:12:34,500 --> 00:12:34,860
name.

199
00:12:34,860 --> 00:12:36,720
We can create it in 10 seconds from now.

200
00:12:36,960 --> 00:12:40,560
How about handle link change.

201
00:12:41,250 --> 00:12:44,880
Finally below that link control but still within our popover.

202
00:12:45,180 --> 00:12:48,870
Let's add a button that you can click that will close the popover.

203
00:12:49,170 --> 00:12:52,710
So button upper case button component.

204
00:12:53,220 --> 00:12:56,670
The actual text that you would click on says maybe confirmed link.

205
00:12:56,670 --> 00:12:57,930
So I'm just making this up.

206
00:12:58,620 --> 00:13:00,810
Let's give the opening tag a few props.

207
00:13:00,810 --> 00:13:03,720
So variant equals primary.

208
00:13:04,440 --> 00:13:06,330
Let's say what should happen if you click the button.

209
00:13:06,330 --> 00:13:08,280
So on click equals curly brackets.

210
00:13:08,580 --> 00:13:15,330
Let's just write an anonymous function or an arrow function that just sets the popover to be invisible

211
00:13:15,330 --> 00:13:15,690
again.

212
00:13:16,200 --> 00:13:19,740
Or in other words, we can just set this piece of state to be false.

213
00:13:20,040 --> 00:13:22,080
So just empty parentheses.

214
00:13:22,080 --> 00:13:28,920
Arrow symbol set is link picker visible.

215
00:13:30,380 --> 00:13:32,210
And just set it to false.

216
00:13:33,200 --> 00:13:36,350
Finally, on this opening button tag, let's give it a style.

217
00:13:36,350 --> 00:13:36,800
Props.

218
00:13:36,800 --> 00:13:38,930
A style equals curly brackets.

219
00:13:39,200 --> 00:13:46,940
Another set of curly brackets for a style object and let's say display should be block comma and width

220
00:13:46,940 --> 00:13:49,580
should be quotes 100%.

221
00:13:50,180 --> 00:13:50,480
Cool.

222
00:13:50,480 --> 00:13:55,100
Now, before we save this, let's go create the function named handle link change.

223
00:13:55,670 --> 00:14:00,080
So if we scroll up right above all of our jazz acts, we already have these functions, maybe right

224
00:14:00,080 --> 00:14:00,650
below those.

225
00:14:00,920 --> 00:14:07,100
So right before the return line we can just say function, handle, length, change, parentheses,

226
00:14:07,100 --> 00:14:08,000
curly brackets.

227
00:14:08,330 --> 00:14:10,910
In these parentheses be sure to include a parameter.

228
00:14:11,360 --> 00:14:14,390
You can name it X or let's name it maybe new link.

229
00:14:14,630 --> 00:14:20,180
The idea is that that component is going to pass into this function, the new link object, whatever

230
00:14:20,180 --> 00:14:21,860
link the user has chosen.

231
00:14:22,340 --> 00:14:28,010
So what we would want to do is call props dot set attributes.

232
00:14:29,240 --> 00:14:33,680
Remember, we give that an object and then we would just want to change the attribute, the block attribute

233
00:14:33,680 --> 00:14:40,010
that we named the link object and set it to be whatever was passed into this function.

234
00:14:40,550 --> 00:14:42,620
Let's give this a save and test it out.

235
00:14:42,830 --> 00:14:43,130
So.

236
00:14:44,160 --> 00:14:45,690
Can the editor if we refresh.

237
00:14:47,900 --> 00:14:50,930
If I click on the button, click the link icon.

238
00:14:51,530 --> 00:14:52,010
Cool.

239
00:14:52,190 --> 00:14:56,690
However, I think it would look better if it was centered horizontally below our button.

240
00:14:56,960 --> 00:15:03,620
So let me show you what we can do down when we use the Popover component on the opening pop tag.

241
00:15:04,190 --> 00:15:10,850
You can just say position equals and let's say middle center just like this.

242
00:15:11,330 --> 00:15:11,590
Cool.

243
00:15:11,600 --> 00:15:13,460
Let's give that a save and test it out again.

244
00:15:13,460 --> 00:15:17,540
So if we refresh, click on the button, click the link icon.

245
00:15:17,780 --> 00:15:18,230
Cool.

246
00:15:18,770 --> 00:15:21,780
So imagine we wanted to link this to our About US page.

247
00:15:21,800 --> 00:15:27,230
So if I just start to search for the word about perfect, there is our about us page.

248
00:15:27,230 --> 00:15:28,250
I can click on that.

249
00:15:28,700 --> 00:15:30,230
I can click confirm link.

250
00:15:31,620 --> 00:15:33,840
We can go ahead and save this template.

251
00:15:35,010 --> 00:15:40,320
And now to really understand what sort of data that saved, let's go look at our database and then we

252
00:15:40,320 --> 00:15:43,200
can talk about how we're going to use that link object.

253
00:15:43,800 --> 00:15:49,200
So if we dig in to the post table, click select data, go to the last page, scroll down to the bottom

254
00:15:49,200 --> 00:15:51,210
and click edit on the very last item.

255
00:15:51,720 --> 00:15:52,030
Cool.

256
00:15:52,050 --> 00:15:57,270
This is the page template we just saved and if you scroll down towards the bottom of this banner block

257
00:15:57,270 --> 00:15:57,810
code.

258
00:15:59,000 --> 00:16:00,080
We're looking for this.

259
00:16:00,410 --> 00:16:02,180
So this is our generic button.

260
00:16:02,840 --> 00:16:04,780
So there's the text attribute, right?

261
00:16:04,790 --> 00:16:05,990
That's what we typed in.

262
00:16:06,230 --> 00:16:07,070
Learn more.

263
00:16:07,280 --> 00:16:09,770
And then we had the attribute called Link Object.

264
00:16:09,770 --> 00:16:11,860
And now this is what I'm trying to draw attention to.

265
00:16:11,870 --> 00:16:17,870
So this is the object that WordPress created for us that represents the link that we chose.

266
00:16:18,170 --> 00:16:24,890
So you can see it includes, you know, the I.D. of that post, the URL for the post, the title, the

267
00:16:24,890 --> 00:16:27,080
post type, so on and so forth.

268
00:16:27,470 --> 00:16:30,740
So there are a million different ways that you could leverage this.

269
00:16:31,220 --> 00:16:36,410
For example, if you wanted to build something really resilient, you could use the post ID.

270
00:16:36,560 --> 00:16:41,870
So that way, even if the permalink was ever changed in the future, you could write a bit of code using

271
00:16:41,870 --> 00:16:49,010
the rest API or a callback to use the post ID to look up the current URL on the fly.

272
00:16:49,490 --> 00:16:54,140
In this moment right now, I don't think we need to build something that resilient or that custom.

273
00:16:54,470 --> 00:17:01,010
So realistically, the only property were truly interested in right now is the URL value, right?

274
00:17:01,040 --> 00:17:05,570
The actual HTTP value that we want to use for our ref value.

275
00:17:05,900 --> 00:17:08,360
So here's what I would do in our code.

276
00:17:08,390 --> 00:17:10,580
Let's go find our save component.

277
00:17:11,120 --> 00:17:13,910
So down towards the bottom or save component.

278
00:17:14,720 --> 00:17:19,820
All we really need to do is set the ref to equal instead of quotes and hash tag.

279
00:17:19,820 --> 00:17:28,760
It would be equals curly brackets and then just say props dot attributes, dot link, object, dot URL.

280
00:17:29,900 --> 00:17:30,980
Let's give this a save.

281
00:17:31,220 --> 00:17:36,950
And now unfortunately, because this is a JavaScript function for the save output, you know, the actual

282
00:17:37,190 --> 00:17:42,200
HTML value, we do need to go back into the template editor refresh.

283
00:17:43,950 --> 00:17:47,040
Klick attempt block recovery just to be safe.

284
00:17:47,280 --> 00:17:49,140
Click on the link option again.

285
00:17:49,650 --> 00:17:52,380
Click Confirm Link and click Save.

286
00:17:55,130 --> 00:18:00,260
Now in the future, when we finish the ban or block an ad, the ability to upload a new image for the

287
00:18:00,260 --> 00:18:07,370
background image, we will learn how to have a dynamic render callback function instead of a JavaScript

288
00:18:07,370 --> 00:18:14,600
save function, and that will alleviate a lot of this sort of static, manually clicking update behavior

289
00:18:14,810 --> 00:18:16,860
that I am not a fan of at all.

290
00:18:17,300 --> 00:18:22,400
But I didn't want to dogmatically force that render callback opinion on you.

291
00:18:22,610 --> 00:18:27,350
So that's why for these first few blocks that we've been building, we're using this JavaScript save

292
00:18:27,350 --> 00:18:29,180
approach anyways.

293
00:18:29,450 --> 00:18:32,970
Now that we've saved our template, let's go to the front end of our website.

294
00:18:32,970 --> 00:18:36,050
So just visit the home page URL and refresh.

295
00:18:36,770 --> 00:18:38,000
Cool, there's our button.

296
00:18:38,000 --> 00:18:44,150
But more importantly, if you hover over it and actually click on it, perfect.

297
00:18:44,690 --> 00:18:47,450
The page didn't change because we haven't built out our templates yet.

298
00:18:47,450 --> 00:18:53,630
But the important thing is if you look in the URL of address bar of your browser, it successfully took

299
00:18:53,630 --> 00:18:55,820
us to slash about us.

300
00:18:56,390 --> 00:18:58,250
That's going to bring this video to a close.

301
00:18:58,430 --> 00:19:04,490
In our next lesson, we're going to add the ability to choose whether you want this button to be blue,

302
00:19:04,640 --> 00:19:08,390
orange or dark orange should be a lot of fun to set up.

303
00:19:08,390 --> 00:19:11,090
Let's keep our momentum rolling and I'll see you then.
