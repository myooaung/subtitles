WEBVTT
1
00:00:00.490 --> 00:00:07.450
No, we would not want that, we only need to load that HTML for this specific one that you choose or

2
00:00:07.450 --> 00:00:08.030
click on.

3
00:00:08.560 --> 00:00:15.570
So what I'm going to do is just create my own totally new custom rest API endpoint.

4
00:00:16.060 --> 00:00:17.970
Let me show you how we can set that up.

5
00:00:17.980 --> 00:00:25.150
So in our text editor jump into featured Professor P and within our construct function, let's add a

6
00:00:25.150 --> 00:00:26.170
new action.

7
00:00:26.170 --> 00:00:29.560
So add action semicolon.

8
00:00:30.280 --> 00:00:35.140
The action hook name is reste API init.

9
00:00:35.980 --> 00:00:37.770
The second argument is a function.

10
00:00:37.780 --> 00:00:42.910
So let's use the array callable syntax, square brackets, dollar sign.

11
00:00:42.910 --> 00:00:47.110
This second argument is just a method name that will create in a minute from now.

12
00:00:47.740 --> 00:00:50.410
Let's call it Proff HTML.

13
00:00:50.800 --> 00:00:53.250
OK, now let's just go create a function with that name.

14
00:00:53.260 --> 00:01:00.400
So right below the construct function we could say function proff, html parentheses, curly brackets.

15
00:01:00.880 --> 00:01:06.490
Inside the body of this function we would use the word press function, call the register, rest, root,

16
00:01:07.090 --> 00:01:10.210
parentheses, semicolon in the parentheses.

17
00:01:10.210 --> 00:01:12.100
We're going to give it three arguments.

18
00:01:12.460 --> 00:01:16.840
The first argument is sort of the namespace inversion portion of the euro.

19
00:01:16.840 --> 00:01:23.230
So let's say string, let's call it featured Professor Slash V1.

20
00:01:23.470 --> 00:01:28.210
And then for the second argument, this is the actual specific name for this one root.

21
00:01:28.210 --> 00:01:34.630
So let's say get HTML, OK, and then the third argument is just an array of options.

22
00:01:34.630 --> 00:01:40.990
So array parentheses, we can dropdown quotes, let's give it a property called Method's Arrow Symbol.

23
00:01:41.470 --> 00:01:46.510
And this is our way of saying that you can't send a post request to this endpoint, but you can send

24
00:01:46.510 --> 00:01:47.920
a gett request.

25
00:01:48.310 --> 00:01:56.560
So all uppercase WP underscore reste underscore server colon colon readable comma.

26
00:01:56.560 --> 00:01:58.060
Let's have one more option.

27
00:01:58.060 --> 00:02:05.380
So quotes callback error symbol and then we just give it a function that we want to run when someone

28
00:02:05.380 --> 00:02:06.730
actually visits the endpoint.

29
00:02:06.910 --> 00:02:08.290
So let's use the array.

30
00:02:08.290 --> 00:02:10.270
Colleyville Syntax dollar sign this.

31
00:02:10.270 --> 00:02:11.650
Let's make up a method name.

32
00:02:12.160 --> 00:02:15.010
How about Get Proff html.

33
00:02:15.430 --> 00:02:21.970
Now let's just go create a function with this names right below that we can say function, get proff,

34
00:02:21.970 --> 00:02:28.870
html parentheses, curly brackets and inside this function we just return something that will be sent

35
00:02:28.870 --> 00:02:35.140
along as JSON and believe it or not, but just a single string of text is valid JSON.

36
00:02:35.530 --> 00:02:41.830
So just for a quick test, while we're connecting the dots, let's just return string a text, semicolon

37
00:02:41.830 --> 00:02:46.300
and let's just say maybe heading level for close that out.

38
00:02:46.300 --> 00:02:47.590
And just for a quick test.

39
00:02:47.740 --> 00:02:48.520
Hello.

40
00:02:48.520 --> 00:02:56.710
From our End Point, let's give this a save and now let's practice actually visiting our endpoint.

41
00:02:57.070 --> 00:03:02.800
So maybe in a new tab or just on a tab where you're viewing the front end of your website, you've got

42
00:03:02.800 --> 00:03:07.810
the base part of your local dev domain, and then we don't want anything after that.

43
00:03:07.810 --> 00:03:15.460
So basically, just your homepage, you orell at the very end of that, add on slash, WP Dash, JSON

44
00:03:15.910 --> 00:03:16.810
slash.

45
00:03:17.200 --> 00:03:28.240
And just a moment ago we chose the name of a featured professor slash v one slash git html.

46
00:03:29.320 --> 00:03:32.800
Now Google Chrome might get confused, but it will offer you this option.

47
00:03:32.800 --> 00:03:38.620
Did you mean to go to and then you can just click that link and you should see just this.

48
00:03:38.620 --> 00:03:42.190
Right, a string of text with that heading level for cool.

49
00:03:42.220 --> 00:03:46.480
Now you might notice that we didn't manually type this back slash here.

50
00:03:46.990 --> 00:03:47.650
That's OK.

51
00:03:47.710 --> 00:03:54.540
This is just another example of WordPress making our lives easier so you can give WordPress HTML and

52
00:03:54.550 --> 00:03:57.250
it will automatically backslash for you.

53
00:03:57.610 --> 00:04:03.640
So, for example, on the opening heading level for TAG, you could even say class equals test.

54
00:04:04.030 --> 00:04:11.620
And if you refresh, WordPress is smart enough that when it's converting that into JSON, it automatically

55
00:04:11.620 --> 00:04:15.040
adds the backslash before the quotes inside.

56
00:04:15.310 --> 00:04:16.150
This is great.

57
00:04:16.570 --> 00:04:17.530
Let's move forward.

58
00:04:17.620 --> 00:04:22.900
So we need a way to have this endpoint be for one specific professor.

59
00:04:23.350 --> 00:04:26.020
So check this out at the very end of this.

60
00:04:26.020 --> 00:04:32.110
You are I want you to add on questionmark and now we could make up any name, but let's call it Prof.

61
00:04:32.110 --> 00:04:37.090
I d equals and I'm going to say forty three just as a quick example.

62
00:04:37.690 --> 00:04:39.760
So we push enter and nothing happens.

63
00:04:39.760 --> 00:04:44.830
But now I want to show you how to access that value from within our P.

64
00:04:45.400 --> 00:04:51.670
So back in our code within our profe html function in these parentheses, if we include a parameter

65
00:04:51.670 --> 00:04:54.520
you can call it anything but I'll call it data.

66
00:04:54.520 --> 00:04:55.900
So dollar sign data.

67
00:04:56.380 --> 00:04:59.200
Well now we can look inside that for any.

68
00:04:59.560 --> 00:05:03.180
Neutral variables, and so, for example, we would look for Prof.

69
00:05:03.180 --> 00:05:10.110
I.D. and now within our function, check this out, we can access that incoming number with just dollar

70
00:05:10.110 --> 00:05:13.650
sign data, look inside it, square brackets because it's an array.

71
00:05:13.650 --> 00:05:15.360
But then we could just say quotes, Prof.

72
00:05:15.630 --> 00:05:16.280
ID.

73
00:05:16.680 --> 00:05:23.490
So now that we know how to access this numeric number for a specific professor post, we can just feed

74
00:05:23.490 --> 00:05:27.280
that into our generate professor HTML function.

75
00:05:27.660 --> 00:05:28.620
Let me show you what I mean.

76
00:05:28.630 --> 00:05:30.080
So let's give ourselves a clean slate.

77
00:05:30.090 --> 00:05:36.360
You can completely empty out the body of this function and just type this in with me return and then

78
00:05:36.360 --> 00:05:42.450
we're going to call that generate professor HTML function that we built in our last lesson.

79
00:05:43.170 --> 00:05:45.960
So my colon and then you just give it an ID.

80
00:05:45.960 --> 00:05:48.630
Right, just like we did previously for the front end.

81
00:05:49.290 --> 00:05:53.880
Now instead of hard coding this to forty three, we just pull in the same data, look inside it for

82
00:05:53.880 --> 00:05:54.600
proff.

83
00:05:55.290 --> 00:06:00.570
I said if I save this and test it out, cool.

84
00:06:00.570 --> 00:06:04.320
So I knew that number 43 was my ID for bark's a lot.

85
00:06:04.440 --> 00:06:10.950
If you want to test this out for yourself, you can just go find the ID for one of your professor posts.

86
00:06:10.950 --> 00:06:15.990
So for example, click into professors and then if you actually click on one.

87
00:06:15.990 --> 00:06:22.170
So I'll click on Bachs a lot up in your address bar, you can see that it says post equals forty three.

88
00:06:22.170 --> 00:06:27.810
Now your number will be different, but whatever that number is, just test that number out for this

89
00:06:27.810 --> 00:06:28.350
endpoint.

90
00:06:28.350 --> 00:06:34.640
You rl when you use the right number here you should see the correct HTML for that professor.

91
00:06:35.190 --> 00:06:42.690
So now all we need to do is call this endpoint you neutral from within our react component.

92
00:06:43.140 --> 00:06:43.500
Right.

93
00:06:43.500 --> 00:06:45.060
Let's get back to the task at hand.

94
00:06:45.270 --> 00:06:49.800
If I edit a blog post and scroll down to this block type.

95
00:06:50.640 --> 00:06:50.940
Right.

96
00:06:50.940 --> 00:06:55.440
We just want to display and render that HTML right here.

97
00:06:56.070 --> 00:06:58.770
So let's jump into our REACT component.

98
00:06:59.100 --> 00:07:05.880
So in our plugin folder, in the Sarsae folder, indexed JS up at the very top, the first thing I want

99
00:07:05.880 --> 00:07:13.890
to do is import a few things after these to import lines, let's say import curly brackets from and

100
00:07:13.890 --> 00:07:23.430
just the official react package in the curly brackets, let's say use state comma use effect.

101
00:07:23.970 --> 00:07:27.720
OK, I do want to import one more things on a new line say import.

102
00:07:28.290 --> 00:07:30.150
We don't need any curly brackets this time.

103
00:07:30.150 --> 00:07:39.630
Just API fetch from string urtext at symbol WordPress slash api Dasch fetch.

104
00:07:40.140 --> 00:07:42.870
OK, now let's go use these three tools that we imported.

105
00:07:43.140 --> 00:07:49.650
So down in our edit component, the first thing I want to do is create a piece of state that will keep

106
00:07:49.650 --> 00:07:53.580
track of our each HTML preview value.

107
00:07:53.910 --> 00:07:58.920
So when you very first come to this page and there hasn't been enough time to actually perform the network

108
00:07:58.920 --> 00:08:04.140
request that loads the HTML, well, first the piece of state would be empty.

109
00:08:04.440 --> 00:08:11.280
And then once we actually fetch that HTML, we can update the piece of state and then our can just react

110
00:08:11.280 --> 00:08:12.870
to that piece of state changing.

111
00:08:13.230 --> 00:08:17.400
So let's do this up at the very top of our edit component body.

112
00:08:17.400 --> 00:08:21.750
Let's say new line const square brackets.

113
00:08:21.960 --> 00:08:22.860
The preview.

114
00:08:22.860 --> 00:08:28.320
I'm just making these names up, but the preview comma set the preview.

115
00:08:29.100 --> 00:08:37.050
So I'm just calling the HTML area a preview and then that will equal use state and just give it an initial

116
00:08:37.050 --> 00:08:39.390
or default value of just an empty string.

117
00:08:39.900 --> 00:08:44.810
OK, from here now we need to think of an event that we want to react to.

118
00:08:45.060 --> 00:08:51.450
So, for example, I'm going to say any time that this value of your ID number changes.

119
00:08:52.020 --> 00:08:56.850
So when I change it to this item, we would want to respond to that event.

120
00:08:56.850 --> 00:09:04.170
Or if you change it again, we would respond to that event by fetching new, fresh HTML for that particular

121
00:09:04.170 --> 00:09:04.770
ID.

122
00:09:05.280 --> 00:09:12.300
So in react a nice way to do something any time a specific piece of data changes is to use something

123
00:09:12.300 --> 00:09:13.820
called a use effect.

124
00:09:14.340 --> 00:09:20.040
So right below this used state line we just set up, I would say use effect, we're going to call it,

125
00:09:20.040 --> 00:09:21.660
we're going to give it to arguments.

126
00:09:22.140 --> 00:09:26.910
The first argument is a function that you want to run, so let's give it an ESX arrow function.

127
00:09:27.090 --> 00:09:31.110
We don't need any parameters such as parentheses, arrow symbol, curly brackets.

128
00:09:31.560 --> 00:09:38.580
The second argument is an array, or we should say it's a list of things that you're watching for changes.

129
00:09:38.940 --> 00:09:42.960
So whatever we include in this list, if it changes, then react.

130
00:09:42.960 --> 00:09:46.950
We'll call our function and it will do that every time it changes.

131
00:09:47.250 --> 00:09:54.750
So the only thing that we need to watch for changes in this case would be props, dot attributes, dot

132
00:09:54.750 --> 00:09:55.470
proff.

133
00:09:55.470 --> 00:09:59.430
I'd say anytime the professor id that you're interested in changes.

134
00:09:59.720 --> 00:10:02.970
We want to fetch a new version of the HTML.

135
00:10:03.440 --> 00:10:08.270
So from here, it's as simple as just performing an HTTP or network request.

136
00:10:08.600 --> 00:10:09.590
Now, here's the cool part.

137
00:10:09.800 --> 00:10:17.600
We don't even need axios or query, nor do we need to use the browsers, fetch tool manually ourselves,

138
00:10:17.900 --> 00:10:22.010
where you have to have an extra promise chain and you have to pass the JSON yourself.

139
00:10:22.430 --> 00:10:27.820
Instead of any of that, we can just use a WordPress tool called API Fetch.

140
00:10:28.490 --> 00:10:35.180
Now it is going to return a promise and instead of using the DOT then syntax, I like to use the async

141
00:10:35.180 --> 00:10:35.780
awaked.

142
00:10:36.320 --> 00:10:42.230
We do need a little bit of a workaround though, because you cannot give use effect an asynchronous

143
00:10:42.230 --> 00:10:43.400
function directly.

144
00:10:43.670 --> 00:10:45.710
However, the workaround is very simple.

145
00:10:45.920 --> 00:10:52.100
Inside our aero function here we can just define or create an async function and then just immediately

146
00:10:52.100 --> 00:10:55.580
call it so we could say async function.

147
00:10:55.580 --> 00:11:01.580
You can name it whatever you want, I'll just name it, go or start parentheses, curly brackets.

148
00:11:02.030 --> 00:11:06.380
And now inside this function, we can use the await syntax.

149
00:11:06.600 --> 00:11:10.940
So let's say const response equals a wait.

150
00:11:10.940 --> 00:11:16.800
And then I'm just going to await the results of the WordPress tool that's called API Fetch.

151
00:11:17.720 --> 00:11:22.880
So in these parentheses, you just give it an object inside there you can dropdown, we just give it

152
00:11:22.880 --> 00:11:23.600
to properties.

153
00:11:23.600 --> 00:11:30.070
So Path Colon instead of quotes, let's use back ticks so we can do something dynamic.

154
00:11:30.590 --> 00:11:38.000
Now we don't need to spell out the entire https and then our domain WordPress will assume the beginning

155
00:11:38.000 --> 00:11:39.290
portion of the URL.

156
00:11:39.440 --> 00:11:46.100
So if we look at this tab, WordPress will assume our domain as well as JSON.

157
00:11:46.400 --> 00:11:51.140
So we would just begin with the slash featured professor all the way to the end.

158
00:11:51.470 --> 00:11:53.800
So to save typing, you can just copy and paste this.

159
00:11:53.810 --> 00:11:58.650
So you start with the slash, go to the end, we can paste that in here.

160
00:11:58.910 --> 00:12:02.960
Now, the reason we used back tactics is we would want this number to be dynamic.

161
00:12:03.290 --> 00:12:09.200
So get rid of this hardcoded number instead, say dollar sign curly brackets and then just use whatever

162
00:12:09.200 --> 00:12:10.900
ID they've currently selected.

163
00:12:10.910 --> 00:12:18.680
So that's props, dot attributes, dot proff ID at the end of this line, let's say comma, we want

164
00:12:18.680 --> 00:12:23.060
one other property, let's say method and just give it a value of git.

165
00:12:23.690 --> 00:12:23.960
Right.

166
00:12:23.960 --> 00:12:30.590
We want to send a get request now because we included the word a here JavaScript will not move on to

167
00:12:30.590 --> 00:12:34.250
the next line of code until this is actually had a chance to complete.

168
00:12:34.550 --> 00:12:40.940
However, right after this line still in the async function, once it does complete, we would just

169
00:12:40.940 --> 00:12:43.190
want to update our piece of state.

170
00:12:43.220 --> 00:12:49.730
So I would just say set the preview parentheses to call it and just give it response.

171
00:12:50.030 --> 00:12:50.330
Right.

172
00:12:50.330 --> 00:12:52.340
The JSON that our endpoint returned.

173
00:12:52.760 --> 00:12:58.730
OK, before I forget, we've defined our asynchronous function now, right below that, we would actually

174
00:12:58.730 --> 00:13:01.130
want to be sure to actually call it or execute it.

175
00:13:01.490 --> 00:13:04.420
So right here, just actually call go.

176
00:13:05.690 --> 00:13:12.110
OK, now all that's left to do is actually use the preview down in our X.

177
00:13:12.410 --> 00:13:19.430
So if we scroll down at the very bottom of our X, we have this Div with just this placeholder text.

178
00:13:19.790 --> 00:13:23.920
Let's get rid of the placeholder text and then you can have the div sit on a single line.

179
00:13:24.410 --> 00:13:30.100
Now our first instinct would be to go inside the div, have curly brackets and say the preview.

180
00:13:30.170 --> 00:13:32.240
However, this will not work.

181
00:13:32.720 --> 00:13:39.080
React would just display the string of text instead of actually rendering it and displaying it as real

182
00:13:39.080 --> 00:13:40.940
html react.

183
00:13:40.940 --> 00:13:43.700
Does this for our own safety, for our own good.

184
00:13:44.090 --> 00:13:48.500
But in this situation I do trust the incoming HTML.

185
00:13:48.650 --> 00:13:49.850
So here's what we can do.

186
00:13:50.000 --> 00:13:52.490
Let's have the div be truly empty once again.

187
00:13:52.700 --> 00:13:59.810
And then on the opening div tag we can say and this is a very specific and odd looking prop name, but

188
00:13:59.810 --> 00:14:03.050
it's dangerously set.

189
00:14:03.680 --> 00:14:11.240
Inner HTML equals curly brackets to do something dynamic, then another set of curly brackets because

190
00:14:11.240 --> 00:14:19.850
we give it an object with a property with the precise name of underscore, underscore, HTML and then

191
00:14:19.850 --> 00:14:21.530
Colen, we just give it a value.

192
00:14:21.530 --> 00:14:25.070
So our value that we're giving it is the preview.

193
00:14:25.610 --> 00:14:32.330
So as you can guess by this prop name that react makes us use ninety nine times out of 100 react really

194
00:14:32.330 --> 00:14:35.570
truly does not want us rendering HTML this way.

195
00:14:35.960 --> 00:14:41.390
Write react, wants to escape things for you, keep things safe and it wants you to build the template

196
00:14:41.390 --> 00:14:46.160
with James X and insert dynamic values with curly brackets.

197
00:14:46.640 --> 00:14:53.270
And this sort of circles back to the topic at the start of this video of why I was defensive of using

198
00:14:54.260 --> 00:14:58.790
HTML templates, because you do need to do something a bit awkward like this.

199
00:14:59.110 --> 00:15:05.870
Inside of react, however, at the end of the day, I don't mind because I do trust the incoming HTML.

200
00:15:06.190 --> 00:15:11.260
Obviously, you would never do this with user generated code that could be malicious.

201
00:15:11.650 --> 00:15:14.830
Anyways, let's go ahead and save this and give it a test.

202
00:15:14.990 --> 00:15:20.230
So if we refresh and if I scroll back down to that blacktip cool.

203
00:15:20.230 --> 00:15:21.240
There is the preview.

204
00:15:21.250 --> 00:15:22.260
Let me zoom out a little bit.

205
00:15:22.390 --> 00:15:29.830
Dr. Musella, if I change it to Bachs a lot on the fly, it performs that new request for Rogerson.

206
00:15:29.980 --> 00:15:30.730
Perfect.

207
00:15:31.570 --> 00:15:33.310
Really quick, unrelated detail.

208
00:15:33.310 --> 00:15:37.990
I'm noticing that this says name teaches instead of the actual professor name here.

209
00:15:38.350 --> 00:15:45.760
If you wanted to fix that, you could just go into our file in the ANC folder named Generate Professor

210
00:15:45.760 --> 00:15:46.700
HTML.

211
00:15:47.230 --> 00:15:50.230
For me, it's down around line number twenty one.

212
00:15:50.230 --> 00:15:54.490
So the word name here, you could just substitute that out with their actual name.

213
00:15:54.490 --> 00:16:02.440
So just going to be say the title, give that a save if I refresh.

214
00:16:06.540 --> 00:16:13.800
Cool, Dr. Miaows A lot teaches blank blank, however, that does indirectly bring us to a topic of

215
00:16:13.800 --> 00:16:14.510
security.

216
00:16:15.030 --> 00:16:20.720
For example, what if the title for this post contained malicious code?

217
00:16:21.090 --> 00:16:21.980
Let me explain.

218
00:16:21.990 --> 00:16:23.010
You can do this with me.

219
00:16:23.310 --> 00:16:25.710
Go edit one of your professor posts.

220
00:16:25.950 --> 00:16:31.250
So, for example, I'll edit Dr. Miaows a lot and up on the main title field.

221
00:16:31.290 --> 00:16:37.410
What if at the end of the name you say script tag, closing script tag inside you say alert.

222
00:16:38.160 --> 00:16:43.100
Hello, close out the quotes, close out the parentheses, semicolon.

223
00:16:43.290 --> 00:16:50.670
Now if I update this and go view the front end for a blog post that has a featured professor of Dr.

224
00:16:50.670 --> 00:16:51.390
Miaows a lot.

225
00:16:51.750 --> 00:16:57.240
Watch what happens when I refresh that JavaScript code actually executed.

226
00:16:58.020 --> 00:17:00.390
Now, this is and isn't a big deal.

227
00:17:00.810 --> 00:17:04.560
If a malicious user had written that, we'd be in huge trouble.

228
00:17:04.950 --> 00:17:09.210
However, the admin or editor of the site wrote it, so we're not worried.

229
00:17:09.570 --> 00:17:14.790
This is actually a tricky situation with no right answer, though, because it is a best practice to

230
00:17:14.790 --> 00:17:19.440
have your front end escape content, even if it's from a trusted user.

231
00:17:19.770 --> 00:17:25.800
And while it's true that your title would really never have a legitimate reason to include HTML in it,

232
00:17:26.220 --> 00:17:32.820
well, your actual body content, we do absolutely want to let the owner of the website have maybe a

233
00:17:32.820 --> 00:17:35.460
strong or M tag in there.

234
00:17:35.970 --> 00:17:40.560
So really it's up to you whether you would want to escape that HTML.

235
00:17:41.070 --> 00:17:46.740
Personally, I want to allow HTML in this content, but I do want to show you what you could do as an

236
00:17:46.740 --> 00:17:47.340
option.

237
00:17:47.760 --> 00:17:55.500
Instead of just using the title, you could instead say echo escape HTML and give that instead of that

238
00:17:55.500 --> 00:17:58.260
title, get the title.

239
00:17:59.630 --> 00:18:07.430
So if I save that and refresh, well, we still see the alert because we're using the title here and

240
00:18:07.430 --> 00:18:13.100
here, but that middle copy now notice that JavaScript is not actually executing.

241
00:18:13.100 --> 00:18:14.080
It's been escaped.

242
00:18:14.390 --> 00:18:17.380
So while you can see it visually, it's not a threat.

243
00:18:18.050 --> 00:18:19.400
So that's one option.

244
00:18:19.400 --> 00:18:27.470
Or you could use a function instead called WP strip all tags if I try that and refresh.

245
00:18:30.370 --> 00:18:35.770
Cool, you can see it just removes any code inside of tags whatsoever, so it's up to you.

246
00:18:35.770 --> 00:18:42.430
But that is something I wanted you to be aware of because we were using the dangerously set inner HTML

247
00:18:42.430 --> 00:18:43.450
within REACT.

248
00:18:43.690 --> 00:18:49.810
And you really don't want to be doing that in react unless you trust the incoming code, which in this

249
00:18:49.810 --> 00:18:53.140
case we do, that is going to bring this lesson to a close.

250
00:18:53.320 --> 00:18:59.320
In our very next lesson, we're going to work on creating the metadata that sets up the relationship

251
00:18:59.320 --> 00:19:06.670
between a blog post and a professor setting up that metadata is the key to being able to show the relationship

252
00:19:06.670 --> 00:19:08.010
from the professor screen.

253
00:19:08.500 --> 00:19:08.690
Right.

254
00:19:08.780 --> 00:19:14.290
So if I click this link to view the miaows a lot permalink page down at the bottom, we would want to

255
00:19:14.290 --> 00:19:18.260
display a list of any blog posts that have featured this professor.

256
00:19:18.760 --> 00:19:21.940
Let's keep things rolling and I'll see you in the next lesson.
