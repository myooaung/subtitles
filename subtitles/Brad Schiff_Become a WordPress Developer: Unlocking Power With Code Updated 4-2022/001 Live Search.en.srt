1
00:00:01,920 --> 00:00:02,880
Hello, everyone.

2
00:00:03,390 --> 00:00:10,860
In this lesson, we will begin implementing live search results, so, for example, if someone comes

3
00:00:10,860 --> 00:00:16,620
to our website and they know exactly what they're looking for, instead of clicking on one of our links,

4
00:00:16,620 --> 00:00:22,100
we want them to be able to use the search icon up in the top right corner of our header.

5
00:00:22,530 --> 00:00:22,850
Right.

6
00:00:22,870 --> 00:00:28,170
So if someone was interested in biology, they should be able to click this icon and then just type

7
00:00:28,170 --> 00:00:29,450
in the word biology.

8
00:00:29,880 --> 00:00:31,080
So that makes sense.

9
00:00:31,080 --> 00:00:35,340
But you might be wondering, what does Leive search results mean?

10
00:00:35,490 --> 00:00:38,250
What is the word live mean in this context?

11
00:00:38,580 --> 00:00:44,240
Well, to answer that, let me show you an example of the opposite of live search results.

12
00:00:44,610 --> 00:00:52,730
So in this tab, this is an empty demo, separate WordPress site using the default 2017 theme.

13
00:00:53,250 --> 00:00:55,770
And here we see the default search box.

14
00:00:56,160 --> 00:01:03,330
And if I click onto that and begin typing in biology, absolutely nothing will happen until I either

15
00:01:03,330 --> 00:01:07,380
press enter on my keyboard or click the submit button.

16
00:01:07,890 --> 00:01:12,270
Now, the opposite of this behavior is live search results.

17
00:01:12,570 --> 00:01:18,150
Live is just another way of saying real time or on the fly or in the moment.

18
00:01:18,480 --> 00:01:24,780
Live search results would be as soon as I'm typing in biology and maybe just a couple hundred milliseconds

19
00:01:24,780 --> 00:01:30,180
after I type in the final letter and then pause for a second, we would then immediately be presented

20
00:01:30,180 --> 00:01:33,000
with the results for that search query right about here.

21
00:01:33,360 --> 00:01:40,320
Or if I backspace and typed in math just a couple hundred milliseconds after I stopped typing, we could

22
00:01:40,320 --> 00:01:45,720
see the results for that search query right here without having to press, enter or submit the form.

23
00:01:45,960 --> 00:01:46,260
Right.

24
00:01:46,260 --> 00:01:51,510
Because with this traditional way of searching, if I want to search for math, I actually have to submit

25
00:01:51,510 --> 00:01:52,200
this form.

26
00:01:53,010 --> 00:01:59,280
It refreshes my browser, takes me to an entirely different URL, and only then can I finally see the

27
00:01:59,280 --> 00:02:00,800
results for that search.

28
00:02:01,140 --> 00:02:06,000
Now, I don't think that traditional search results like this is terrible and we will learn how to set

29
00:02:06,000 --> 00:02:08,760
this up as a fallback later on in the course.

30
00:02:09,150 --> 00:02:16,220
But I do think that live real time on the fly search results can create a more engaging user experience.

31
00:02:16,500 --> 00:02:19,380
So that's what we're going to set up as our first preference.

32
00:02:19,620 --> 00:02:19,920
Right.

33
00:02:19,920 --> 00:02:25,830
When someone clicks this search icon in the top right header of our website, what I want to do is open

34
00:02:25,830 --> 00:02:34,020
up a full screen, semi transparent overlay or lightbox with a text input field that the user can begin

35
00:02:34,020 --> 00:02:35,640
immediately typing into.

36
00:02:35,880 --> 00:02:41,100
And then a couple hundred milliseconds after they stop typing, we can present them with the search

37
00:02:41,100 --> 00:02:42,750
results in real time.

38
00:02:43,380 --> 00:02:44,970
So how can we make this happen?

39
00:02:45,390 --> 00:02:48,060
Well, let's talk about programming languages.

40
00:02:48,390 --> 00:02:52,950
So in this case, P p cannot help us, right?

41
00:02:52,950 --> 00:02:57,420
P P is great at initially outputting the page that we want to load.

42
00:02:57,750 --> 00:03:04,140
But once the Web browser has loaded the page, if we want to make any changes without completely refreshing

43
00:03:04,140 --> 00:03:08,250
the page, we need to use the JavaScript language.

44
00:03:08,550 --> 00:03:08,940
Right.

45
00:03:08,940 --> 00:03:13,300
JavaScript is how we can manipulate the page in real time.

46
00:03:13,710 --> 00:03:20,100
So right now, why don't you and I begin writing a bit of JavaScript, so let's open up our text editor

47
00:03:20,100 --> 00:03:30,060
and in our theme folder, let's look within the SIRC folder and I want you to open up Index JS now.

48
00:03:30,060 --> 00:03:37,020
This main recipe file is already importing several modules, so mobile menu is for small devices.

49
00:03:37,020 --> 00:03:43,020
So if you resized your browser to be very small and very narrow, you would see a menu icon in the top

50
00:03:43,020 --> 00:03:46,580
right corner that you could click on to view the navigation menu.

51
00:03:47,070 --> 00:03:54,030
Next, we see Hero Slider and that's the JavaScript that powers the slideshow at the bottom of our homepage.

52
00:03:55,340 --> 00:04:01,610
Finally, we also have Google map, and we just added that a couple of lessons ago, so with the idea

53
00:04:01,610 --> 00:04:09,380
of staying organized in mind right now, why don't we create a new separate file that is dedicated to

54
00:04:09,380 --> 00:04:12,340
powering our live search results feature?

55
00:04:13,040 --> 00:04:19,390
So let's create a new file in this module subfolder that lives inside our Sarsae folder.

56
00:04:20,360 --> 00:04:24,140
So inside this modules folder, let me create a new file.

57
00:04:25,580 --> 00:04:30,040
The name of this file does not matter, but just to make sense, why don't I name it?

58
00:04:30,050 --> 00:04:32,060
Search J.S..

59
00:04:33,620 --> 00:04:38,810
And in this course we are going to be writing object oriented JavaScript.

60
00:04:39,080 --> 00:04:40,420
Again, this is optional.

61
00:04:40,430 --> 00:04:42,920
You don't have to write object oriented code.

62
00:04:43,130 --> 00:04:45,110
This has nothing to do with WordPress.

63
00:04:45,110 --> 00:04:47,210
It's just my own personal preference.

64
00:04:47,360 --> 00:04:51,170
But it's a very popular way of doing things in the professional dev world.

65
00:04:51,350 --> 00:04:57,860
And I think that you learning how to write object oriented modular code is only going to help your career.

66
00:04:58,190 --> 00:05:06,470
OK, so let's begin by creating a class named Search So class and then the name of our class, you could

67
00:05:06,470 --> 00:05:07,820
name it whatever you want.

68
00:05:08,060 --> 00:05:09,860
Let's go with search, OK?

69
00:05:09,860 --> 00:05:11,930
And then we add in some curly brackets.

70
00:05:12,410 --> 00:05:19,550
And then in JavaScript, whenever we create a class, we want to be sure to include a constructor function.

71
00:05:19,880 --> 00:05:22,750
So we just type out constructor.

72
00:05:22,760 --> 00:05:30,740
It's a special reserved word in JavaScript and then parentheses curly brackets, OK, and then any code

73
00:05:30,740 --> 00:05:37,070
that we place within the constructor function will be executed as soon as we create an object using

74
00:05:37,070 --> 00:05:38,680
our class or blueprint.

75
00:05:39,140 --> 00:05:46,130
Remember, a class is just a recyclable blueprint that we can use to create multiple objects using this

76
00:05:46,130 --> 00:05:46,760
recipe.

77
00:05:47,270 --> 00:05:52,850
Now, instead of worrying about actually building the live search results functionality right in this

78
00:05:52,850 --> 00:05:53,390
moment.

79
00:05:53,750 --> 00:06:00,260
Instead, just as a quick example and test within our constructor function, why don't we alert a pop

80
00:06:00,260 --> 00:06:05,720
up message that says, hello, I am a search.

81
00:06:07,310 --> 00:06:07,880
All right.

82
00:06:07,880 --> 00:06:14,690
And let's pretend that we are now done creating our class and now we want to be able to import and use

83
00:06:14,690 --> 00:06:16,820
it within our main scripts file.

84
00:06:17,210 --> 00:06:26,120
So back in our search JS file, down at the very bottom of this file, we can just say export default

85
00:06:26,120 --> 00:06:29,030
and then the name of the class search.

86
00:06:29,480 --> 00:06:35,460
And this line of code will allow us to import this file into our main scripts file.

87
00:06:35,900 --> 00:06:36,650
So check this out.

88
00:06:36,650 --> 00:06:38,660
Let's go ahead and save this file.

89
00:06:38,810 --> 00:06:46,820
And then back in our main index JS file in this section of code, why don't we import in that new search

90
00:06:46,820 --> 00:06:47,450
module?

91
00:06:47,900 --> 00:06:55,760
So new line, let's say, import search from and then we just provide a path that points towards the

92
00:06:55,760 --> 00:07:01,880
new search file and will say dot forward slash to look inside the current folder.

93
00:07:02,180 --> 00:07:08,270
And then we just want to look inside this sub folder named modules, look inside that folder.

94
00:07:08,630 --> 00:07:10,820
And the name of the file is Search.

95
00:07:11,300 --> 00:07:13,580
You don't need to include the dot js.

96
00:07:13,670 --> 00:07:16,420
We just need the actual file name search.

97
00:07:17,180 --> 00:07:17,800
All right.

98
00:07:17,810 --> 00:07:24,650
And now that we've imported that file in class, we can actually use it to create a new object.

99
00:07:24,980 --> 00:07:31,910
So down here, let's add a new line and let's create a variable and name it magical search.

100
00:07:31,910 --> 00:07:32,900
The name doesn't matter.

101
00:07:32,900 --> 00:07:40,790
I'm just making up a temporary name and let's set it to equal a new instance of our search class.

102
00:07:41,210 --> 00:07:41,470
Right.

103
00:07:41,480 --> 00:07:47,710
A class is just a blueprint that you can use to create new instances or new objects.

104
00:07:48,050 --> 00:07:54,440
Now, as soon as I save this file, our command line will automatically rebundle up our JavaScript.

105
00:07:54,740 --> 00:07:54,980
Click.

106
00:07:54,980 --> 00:08:00,890
OK, now back in our text editor, we created one object named Magical Search.

107
00:08:00,890 --> 00:08:07,880
But remember, classes can be reused so we could create another variable or another object and name

108
00:08:07,880 --> 00:08:14,300
it amazing search and also tell it to equal a new instance of the search class.

109
00:08:15,110 --> 00:08:18,290
And if we save this, I think you can imagine what will happen.

110
00:08:19,100 --> 00:08:20,360
We see one pop up.

111
00:08:20,360 --> 00:08:24,140
Hello, I am a search and if I click OK, we see a second pop up.

112
00:08:24,380 --> 00:08:24,860
Hello.

113
00:08:24,860 --> 00:08:25,820
I am a search.

114
00:08:27,280 --> 00:08:34,150
So the idea here is that we create a reusable blueprint or class, and it gets to live in its own neat,

115
00:08:34,150 --> 00:08:40,630
organized, separate file, and then once we import that file, we can use it as many times as we want

116
00:08:40,630 --> 00:08:43,120
to create different objects or variables.

117
00:08:43,390 --> 00:08:49,720
Now, in reality, in this instance for our website, we don't need multiple search objects.

118
00:08:50,170 --> 00:08:53,520
We are only going to have one single search object.

119
00:08:53,800 --> 00:08:57,090
I only did this to remind you what a class is, right?

120
00:08:57,100 --> 00:09:00,130
A class is a potentially reusable blueprint.

121
00:09:00,490 --> 00:09:08,050
The code that lives within a class doesn't actually get executed until you create an object that uses

122
00:09:08,050 --> 00:09:09,700
that class as a blueprint.

123
00:09:10,360 --> 00:09:16,570
OK, so let me go ahead and delete the second search and then let me rename the first search to just

124
00:09:16,570 --> 00:09:19,060
simply search the naming.

125
00:09:19,060 --> 00:09:21,710
Doesn't matter, but this will look a bit cleaner for us.

126
00:09:22,180 --> 00:09:23,620
Let's go ahead and save that.

127
00:09:25,180 --> 00:09:31,390
OK, so now we're just back to the one pop up now that's actually going to bring this lesson to a close

128
00:09:31,630 --> 00:09:37,210
now that we are all on the same page and we've got our JavaScript rolling in our next lesson, we will

129
00:09:37,210 --> 00:09:42,810
actually begin writing out the code to power live search results.

130
00:09:43,090 --> 00:09:44,550
This should be a lot of fun.

131
00:09:44,770 --> 00:09:47,770
There's the potential to learn a lot about JavaScript.

132
00:09:48,070 --> 00:09:52,330
So let's keep things rolling and I will see you in the next lesson.
