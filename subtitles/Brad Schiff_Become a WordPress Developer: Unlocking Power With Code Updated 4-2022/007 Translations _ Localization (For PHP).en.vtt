WEBVTT
1
00:00:02.100 --> 00:00:03.060
Hello, everyone.

2
00:00:03.390 --> 00:00:09.780
In this lesson, we're going to learn how to make a plug in or theme easy to translate into another

3
00:00:09.780 --> 00:00:13.290
language, there are two main steps involved here.

4
00:00:13.320 --> 00:00:18.480
Number one is sort of hollowing out the code of our plug in so that it's flexible.

5
00:00:18.750 --> 00:00:25.440
And step number two is just using software that can automatically create sort of a template file so

6
00:00:25.440 --> 00:00:30.650
that it's simple for just about anyone to contribute a translated version of our plug in.

7
00:00:31.110 --> 00:00:36.300
Let's go ahead and get started with step number one, which is us sort of hollowing out our code.

8
00:00:36.690 --> 00:00:41.940
Now, we're not going to hollow out the entirety of our plug in because that would be super repetitive.

9
00:00:42.120 --> 00:00:48.210
Instead, I'm just going to pick two little pieces of text that will make flexible or translatable.

10
00:00:48.600 --> 00:00:52.770
It's something that when you do once, you'll know how to do it anywhere and everywhere that you need

11
00:00:52.770 --> 00:00:53.090
to.

12
00:00:53.400 --> 00:00:58.800
So, for example, one string of text in our plug in that I'm going to make translatable in the admin

13
00:00:58.800 --> 00:01:01.570
dashboard if you look in the settings menu.

14
00:01:01.590 --> 00:01:06.810
Remember, we have this link called word count that points towards our setting page.

15
00:01:07.110 --> 00:01:10.650
Well, let's make this actual text right here translatable.

16
00:01:10.830 --> 00:01:16.230
So, for example, if someone was using our plug in and their installation of WordPress is using the

17
00:01:16.230 --> 00:01:22.800
Spanish language, well, assuming our plug in has been translated into Spanish, it should output Spanish

18
00:01:22.800 --> 00:01:23.240
right here.

19
00:01:23.820 --> 00:01:30.180
OK, and then on the front end, just for another quick example, in our post info or word count statistics,

20
00:01:30.420 --> 00:01:36.090
let's just translate this first sentence that says this post has X number of words.

21
00:01:36.600 --> 00:01:42.600
So just hollowing out those two pieces of text will show you everything you need to know to make your

22
00:01:42.600 --> 00:01:45.390
entire plug in our theme translatable.

23
00:01:45.870 --> 00:01:47.490
OK, so at this point, let's get started.

24
00:01:47.490 --> 00:01:49.170
Let's jump into our text editor.

25
00:01:49.710 --> 00:01:55.520
And our very first step is to add a new couple of lines up at the very top within these comments.

26
00:01:55.890 --> 00:01:59.550
So we currently have these properties like plug in name and description.

27
00:01:59.880 --> 00:02:06.810
Let's just add a new property and it needs to be named text domain Colen.

28
00:02:07.200 --> 00:02:09.900
And now you can make up your own name.

29
00:02:09.900 --> 00:02:13.530
But I'm going to call it WCP Domain.

30
00:02:13.980 --> 00:02:14.910
I'm just making this up.

31
00:02:14.910 --> 00:02:17.790
It's short for word count, plugin domain.

32
00:02:18.090 --> 00:02:21.880
So just choose something that's unique to your plugin or theme.

33
00:02:22.350 --> 00:02:25.110
OK, and then we want one other property.

34
00:02:25.620 --> 00:02:33.630
It is Domain Path column and let's give it a value of slash languages.

35
00:02:33.990 --> 00:02:39.090
So this is just going to point towards a folder in our plugin folder and it will be a new folder called

36
00:02:39.090 --> 00:02:40.050
Languages.

37
00:02:40.470 --> 00:02:45.720
This will contain sort of the overall translation template and then any and all translated versions

38
00:02:45.720 --> 00:02:46.470
that we create.

39
00:02:46.480 --> 00:02:48.450
So maybe Spanish or German.

40
00:02:48.840 --> 00:02:49.230
Cool.

41
00:02:49.500 --> 00:02:51.210
So it just these two comments in place.

42
00:02:51.210 --> 00:02:52.290
We're ready to get started.

43
00:02:52.500 --> 00:02:56.520
Let's begin hollowing out a few strings of text in our plugin.

44
00:02:56.850 --> 00:03:00.980
So remember, let's begin with the admin link under the Settings menu.

45
00:03:01.200 --> 00:03:03.480
This text right here that says word count.

46
00:03:04.230 --> 00:03:11.460
So in our plugin code down towards the bottom, I'm just looking for our function that we named admin

47
00:03:11.460 --> 00:03:12.180
page.

48
00:03:12.510 --> 00:03:15.880
And when we're adding an options page here, the second argument.

49
00:03:16.320 --> 00:03:17.280
So here's what we do.

50
00:03:17.460 --> 00:03:20.820
Let's remove this string of text that just says word count.

51
00:03:21.360 --> 00:03:27.690
And instead we're going to use a function that's just underscore, underscore, so to underscores and

52
00:03:27.690 --> 00:03:30.930
then we just call it and now we give it to arguments.

53
00:03:30.930 --> 00:03:32.850
So A comma, B is placeholders.

54
00:03:33.270 --> 00:03:35.760
The first argument is the original text.

55
00:03:35.760 --> 00:03:38.970
So we're creating this plugin originally in English.

56
00:03:38.970 --> 00:03:44.310
So we would just say that text we had just a moment ago, word count.

57
00:03:44.910 --> 00:03:49.190
And then the second argument is your plug or theme's text domain.

58
00:03:49.470 --> 00:03:53.730
So remember, I named mine WCP Domain.

59
00:03:54.600 --> 00:03:55.050
Cool.

60
00:03:55.410 --> 00:03:56.190
That's it.

61
00:03:56.580 --> 00:04:01.530
We just made that little piece of text or that string dynamic and easily translatable.

62
00:04:01.890 --> 00:04:03.510
Let's move on to the second example.

63
00:04:03.510 --> 00:04:09.740
Remember, we want to make this text that says this post has blank words, easy to translate.

64
00:04:10.230 --> 00:04:15.140
So back in our code, let's look in our function that we named create HTML.

65
00:04:15.600 --> 00:04:16.320
Here it is.

66
00:04:16.320 --> 00:04:18.630
And then we're looking for the word count.

67
00:04:18.630 --> 00:04:20.340
For me, it's around line number forty.

68
00:04:20.340 --> 00:04:26.910
It will be a little bit different for you, but we see this post has and now you'll notice that we sort

69
00:04:26.910 --> 00:04:30.720
of hardcoded the empty space within this string.

70
00:04:31.230 --> 00:04:36.780
Now, when people are providing translations for our code, we don't want them to have to unintuitive.

71
00:04:36.780 --> 00:04:40.380
We have an empty space at the end of their translation.

72
00:04:40.920 --> 00:04:42.450
So let's adjust this a little bit.

73
00:04:42.840 --> 00:04:48.300
So let's get rid of that space here and then let's just add on an empty space like this.

74
00:04:49.620 --> 00:04:55.860
So now this can just be sort of the hollowed out placeholder, so let's get rid of this very first string

75
00:04:57.480 --> 00:05:01.080
and we'll use underscore, underscore, just call the function.

76
00:05:01.410 --> 00:05:03.870
So we'll say this post has.

77
00:05:04.260 --> 00:05:07.230
And then the second argument is our text domain.

78
00:05:07.650 --> 00:05:09.940
WCP domain.

79
00:05:10.800 --> 00:05:11.190
Cool.

80
00:05:11.400 --> 00:05:12.390
Let's do the same thing.

81
00:05:12.390 --> 00:05:13.740
Four words at the end.

82
00:05:13.770 --> 00:05:16.650
So again, we want to begin with an empty space.

83
00:05:16.720 --> 00:05:17.880
The words don't run together.

84
00:05:17.880 --> 00:05:23.820
So let's just cabinet on an empty space and then concatenate on this so we don't need the space there

85
00:05:23.820 --> 00:05:24.270
anymore.

86
00:05:24.840 --> 00:05:30.060
Now, we don't need to translate the period at the end of the sentence or the HTML B.R. tag.

87
00:05:31.050 --> 00:05:37.620
So let's just end the quote here and then concatenate on just an opening quote like this.

88
00:05:38.800 --> 00:05:44.370
So that way, when people are providing translations for our code, they're only translating this little

89
00:05:44.370 --> 00:05:47.230
piece of text right here, just the word words.

90
00:05:47.700 --> 00:05:54.180
So now we can get rid of that and instead say underscore, underscore, call it words.

91
00:05:54.190 --> 00:05:57.510
Second argument is our WCP domain.

92
00:05:58.590 --> 00:06:04.530
OK, so we've hollowed out those two examples now before we save this file and I show you how to actually

93
00:06:04.710 --> 00:06:08.940
begin providing a translation in whatever language you want to experiment with.

94
00:06:08.970 --> 00:06:10.470
I'm going to choose Spanish.

95
00:06:10.860 --> 00:06:11.790
Before we get to that.

96
00:06:11.790 --> 00:06:13.040
There's just one more step.

97
00:06:13.530 --> 00:06:15.620
So let's go back up to the top of this file.

98
00:06:16.680 --> 00:06:23.000
We just need to add a little bit of code to tell WordPress to actually load our text domain files.

99
00:06:23.400 --> 00:06:25.410
We don't have any language files yet.

100
00:06:25.410 --> 00:06:31.470
But in just a moment when we actually go create a translation, we'll want to make sure that WordPress

101
00:06:31.710 --> 00:06:33.240
loads those files.

102
00:06:33.600 --> 00:06:33.830
Right.

103
00:06:33.840 --> 00:06:39.240
So that way, when you go into the settings of your WordPress installation and if you switch the WordPress

104
00:06:39.240 --> 00:06:45.750
system language to Spanish, ah, plug ins should know to just be automatically loading our translated

105
00:06:45.750 --> 00:06:46.350
files.

106
00:06:46.530 --> 00:06:49.910
So here's how we do that within our constructor function.

107
00:06:50.190 --> 00:06:52.650
Let's just add a new top level action.

108
00:06:52.950 --> 00:07:02.250
So I'm going to say add action, semicolon the name, let's just use the init action hook, OK, and

109
00:07:02.250 --> 00:07:04.200
then let's use the callable syntax.

110
00:07:04.200 --> 00:07:06.900
So Arae dollar sign this comma.

111
00:07:07.020 --> 00:07:08.370
Let's make up a method name.

112
00:07:08.370 --> 00:07:10.740
I'll just call it languages.

113
00:07:10.740 --> 00:07:12.650
You could call it anything you want to.

114
00:07:13.050 --> 00:07:15.230
And now let's create a function with that name.

115
00:07:15.240 --> 00:07:19.980
So function, languages, parentheses, curly brackets.

116
00:07:20.340 --> 00:07:27.570
And here we're just going to use a WordPress function called lowed, underscore plugin, underscore

117
00:07:27.570 --> 00:07:31.650
text domain parentheses to call it semicolon.

118
00:07:32.160 --> 00:07:34.050
And we're going to give it three arguments.

119
00:07:34.050 --> 00:07:36.480
So a comma be Comikaze placeholders.

120
00:07:36.810 --> 00:07:39.600
The first argument is our text domain.

121
00:07:39.600 --> 00:07:44.300
So again, I chose a value of WCP domain.

122
00:07:44.760 --> 00:07:49.740
The second argument, I'm actually not one hundred percent sure what this is in the WordPress documentation.

123
00:07:49.740 --> 00:07:53.760
It just says deprecated and it instructs you to use a value of false.

124
00:07:54.150 --> 00:07:55.350
So that's what I'm going to go with.

125
00:07:55.350 --> 00:08:00.960
If you're super curious about this, you can just perform a Google search for this function name to

126
00:08:00.960 --> 00:08:03.210
find the official WordPress documentation.

127
00:08:03.600 --> 00:08:09.510
OK, and then the third argument is just a path that points towards our languages folder.

128
00:08:09.900 --> 00:08:17.140
So instead of C, we can say Dürer name call that function inside these parentheses, we can say plug

129
00:08:17.190 --> 00:08:20.700
in underscore based name, which is a function itself.

130
00:08:20.700 --> 00:08:27.900
So call that inside these parentheses, let's say underscore, underscore, phial, underscore, underscore,

131
00:08:28.350 --> 00:08:28.790
OK.

132
00:08:28.800 --> 00:08:34.860
And then after these two parentheses, but before the final third closing parentheses, let's add on

133
00:08:35.100 --> 00:08:38.070
a string of text slash languages.

134
00:08:38.580 --> 00:08:40.830
If this was hard to type out with me, that's OK.

135
00:08:40.830 --> 00:08:46.800
You can always download the zip file for this video lesson to just copy and paste the code from my code.

136
00:08:47.170 --> 00:08:52.200
OK, now I believe the translation software will create this folder for us if it doesn't exist.

137
00:08:52.200 --> 00:08:57.330
But just to play it safe in our plugin folder, why don't we go ahead and create it right now?

138
00:08:57.450 --> 00:09:03.960
So go ahead and create a brand new folder in your plugin folder and let's call it languages.

139
00:09:05.010 --> 00:09:12.120
OK, at this point, we're ready to save our file and learn how to actually create a translation.

140
00:09:12.600 --> 00:09:18.510
Now, there are many, many different ways to create a translation, but I'd say the two most common

141
00:09:18.540 --> 00:09:22.380
are, number one, a piece of software named PO.

142
00:09:22.380 --> 00:09:26.220
Edit it's available for Windows, Mac and Linux.

143
00:09:26.490 --> 00:09:28.950
So that's one way to create a translation.

144
00:09:29.250 --> 00:09:35.670
The second way, which is the way I'm going to show you in this video lesson is to use a WordPress plugin

145
00:09:35.670 --> 00:09:37.980
called Logo Translate.

146
00:09:38.370 --> 00:09:40.380
Now, there's nothing wrong with PO edit.

147
00:09:40.410 --> 00:09:44.190
I'm just a huge fan of this logo translate plugin.

148
00:09:44.490 --> 00:09:47.220
I feel like it's really optimized for WordPress.

149
00:09:47.370 --> 00:09:49.590
It's attention to detail is excellent.

150
00:09:49.770 --> 00:09:56.910
And as will even see in our next chapter, this plugin makes it easy to even translate for our JavaScript

151
00:09:56.910 --> 00:09:57.390
code.

152
00:09:57.690 --> 00:09:59.580
So I'm a big fan of this plugin.

153
00:09:59.580 --> 00:10:02.010
I strongly recommend that you use it.

154
00:10:02.400 --> 00:10:04.950
So let's go install this plug in right now.

155
00:10:04.950 --> 00:10:12.810
So in the admin dashboard, I'll go under plug ins, add new, I will search for logo translate.

156
00:10:13.380 --> 00:10:16.440
It should be the first result as of today.

157
00:10:16.440 --> 00:10:21.270
It's by Tim Whitlock and you can see it has over one million active installation.

158
00:10:21.270 --> 00:10:26.310
So let's go ahead and install, OK, and then be sure to activate the plug in.

159
00:10:26.940 --> 00:10:34.320
OK, now in the admin dashboard down towards the very bottom, you'll see a new option called logo translate.

160
00:10:34.620 --> 00:10:36.060
Let's go ahead and click on that.

161
00:10:37.070 --> 00:10:42.230
So, yes, you can also use this plug in to translate a theme, but right now we're interested in translating

162
00:10:42.230 --> 00:10:42.920
a plug in.

163
00:10:42.930 --> 00:10:48.710
So if you scroll down towards the bottom here, running plug ins here, we see our test plug in and

164
00:10:48.710 --> 00:10:53.210
we know it's the plug in that we were just recently working on because we see that it's text domain.

165
00:10:53.210 --> 00:10:56.230
Is that familiar WCP domain.

166
00:10:56.240 --> 00:10:59.430
So let's just go ahead and click on our test plug in.

167
00:11:00.320 --> 00:11:05.150
OK, now, before we actually create a translation, let's first create a template.

168
00:11:05.600 --> 00:11:11.420
So Local Translate will look through our code for whenever we used the underscore underscore function,

169
00:11:11.900 --> 00:11:15.500
it will do a lot of the hard work for us so we can just click create template.

170
00:11:16.160 --> 00:11:16.490
Cool.

171
00:11:16.490 --> 00:11:19.790
You can see it's going to create the template file in our plugins folder.

172
00:11:19.790 --> 00:11:21.980
In the languages folder.

173
00:11:22.430 --> 00:11:24.050
Let's click create template.

174
00:11:25.460 --> 00:11:31.490
OK, now, with that template created, we can actually create a translation again, I'm going to use

175
00:11:31.490 --> 00:11:32.260
Spanish.

176
00:11:32.570 --> 00:11:36.410
So if you want to follow along with me, let's just click new language.

177
00:11:37.430 --> 00:11:39.590
So option number one, choose a language.

178
00:11:39.590 --> 00:11:40.600
I'm going to click here.

179
00:11:41.330 --> 00:11:46.850
The list of languages is very long, but if you just start to type all type Spanish, it's a very long

180
00:11:46.850 --> 00:11:47.120
list.

181
00:11:47.150 --> 00:11:50.510
It's actually falling off the bottom edge of my screen right now.

182
00:11:50.510 --> 00:11:54.710
But if I click it, you can see that I chose Spanish Mexico.

183
00:11:55.010 --> 00:12:01.640
OK, then for option number two, I like to use this author option so you can see it's going to output

184
00:12:01.640 --> 00:12:07.730
the file into our plugins folder, our actual plug in folder and then in the languages subfolder.

185
00:12:08.000 --> 00:12:09.680
This is the option we want, right?

186
00:12:09.680 --> 00:12:12.580
As a plug in author this is excellent.

187
00:12:12.680 --> 00:12:15.230
So let's click start translating.

188
00:12:16.720 --> 00:12:22.660
And this is the moment we've been waiting for, so this area down here has all of the different strings

189
00:12:22.660 --> 00:12:24.250
of text that detected.

190
00:12:24.610 --> 00:12:30.100
And if we want to translate one, let's go with, for example, this post has.

191
00:12:30.220 --> 00:12:31.970
So you just click on that.

192
00:12:33.010 --> 00:12:34.510
So here is the source text.

193
00:12:34.510 --> 00:12:37.480
But then down here, this is where we can enter the translation.

194
00:12:37.480 --> 00:12:42.290
So I will just type HESTA in Trona DNA.

195
00:12:42.760 --> 00:12:42.920
Right.

196
00:12:43.000 --> 00:12:45.480
So just this post has in Spanish.

197
00:12:45.880 --> 00:12:50.940
OK, let's also be sure to translate the word words, so I'll click on words right here.

198
00:12:51.580 --> 00:12:56.680
So down here, the Spanish translation of that is puzzle for us.

199
00:12:57.460 --> 00:13:00.650
OK, and then finally, let's translate the word count.

200
00:13:00.670 --> 00:13:06.940
Remember, this is the admin dashboard setting link text so we can just click on that for the translation.

201
00:13:06.940 --> 00:13:12.280
I will say El Quinto de la.

202
00:13:13.960 --> 00:13:15.400
OK, for now I'm done.

203
00:13:15.400 --> 00:13:18.070
So just scroll up and click save.

204
00:13:18.370 --> 00:13:23.230
Obviously in the real world, if you were truly translating a theme or plug in, you would probably

205
00:13:23.230 --> 00:13:26.770
fill in 10, 20, 30 or even 50 translations.

206
00:13:26.770 --> 00:13:29.500
But we're just setting up a few as a quick example.

207
00:13:29.830 --> 00:13:36.400
OK, so once you save your changes now let's pretend that we actually are using WordPress with this

208
00:13:36.400 --> 00:13:37.090
language.

209
00:13:37.330 --> 00:13:42.430
So instead of English, let's go in to the WordPress settings screen.

210
00:13:42.820 --> 00:13:48.490
You don't even need to go into the submenu links, just the general main overview settings screen of

211
00:13:48.490 --> 00:13:50.860
WordPress, if you scroll down a little bit.

212
00:13:52.130 --> 00:13:58.610
Maybe about halfway down the page, we see an option named site language, so minus that to English.

213
00:13:58.610 --> 00:14:05.780
But let's click on this and then I'm just going to search for Spanish of Mexico and now be ready to

214
00:14:05.780 --> 00:14:07.430
see WordPress in a different language.

215
00:14:07.430 --> 00:14:09.880
So maybe try to memorize where certain things are.

216
00:14:10.160 --> 00:14:12.170
But let's click save changes.

217
00:14:12.800 --> 00:14:13.040
Right.

218
00:14:13.080 --> 00:14:18.380
So we're simulating that someone is using our plugin and their WordPress is in a different language.

219
00:14:18.770 --> 00:14:24.230
So you can see the entire admin dashboard is now in that language.

220
00:14:24.410 --> 00:14:29.300
Well, aside from my custom post types, because I didn't actually translate that code, but all of

221
00:14:29.300 --> 00:14:31.940
the default options in WordPress have been translated.

222
00:14:32.450 --> 00:14:34.780
And let's look for our word count translation.

223
00:14:34.790 --> 00:14:39.560
So under the settings menu, remember the very last link?

224
00:14:39.560 --> 00:14:40.200
Perfect.

225
00:14:40.220 --> 00:14:40.910
There it is.

226
00:14:41.300 --> 00:14:44.220
So this is word count translated into Spanish.

227
00:14:44.750 --> 00:14:46.500
Let's look on the front end of our website.

228
00:14:46.520 --> 00:14:51.460
So if you refresh a single blog post detail screen perfect.

229
00:14:51.950 --> 00:14:55.880
So this post has X number of words.

230
00:14:56.480 --> 00:14:56.900
Cool.

231
00:14:56.900 --> 00:15:03.850
And if we look in our plugin folder in the languages subfolder, here is our overall template file.

232
00:15:04.190 --> 00:15:09.650
So people who are used to translating software, you can just give them this file and they will know

233
00:15:09.650 --> 00:15:10.660
what to do with it.

234
00:15:11.030 --> 00:15:14.570
And then oftentimes they will supply you with this sort of file.

235
00:15:14.930 --> 00:15:18.320
Right, these files ending in Dortmunder or Doppio.

236
00:15:18.680 --> 00:15:23.870
So if you have your plug in or theme translated into 10 or 20 different languages, then you would want

237
00:15:23.870 --> 00:15:24.650
to include.

238
00:15:24.740 --> 00:15:25.010
Right.

239
00:15:25.040 --> 00:15:29.790
10 or 20 different versions of these files in your plugin code like we have here.

240
00:15:30.140 --> 00:15:35.790
This way, no matter which language the user's WordPress installation is set to, you have them covered.

241
00:15:36.140 --> 00:15:36.540
Cool.

242
00:15:36.740 --> 00:15:42.410
Now, before we bring this lesson to a close, there is one security related issue that I want to bring

243
00:15:42.410 --> 00:15:43.270
to your attention.

244
00:15:43.550 --> 00:15:49.880
So let's say that somehow, some way, one of the translated files that you're using has been compromised

245
00:15:49.880 --> 00:15:51.610
or has malicious code in it.

246
00:15:52.070 --> 00:15:56.540
In this case, maybe just a bit of HTML like a stronger Balde tag.

247
00:15:56.750 --> 00:15:57.830
That's not very malicious.

248
00:15:57.830 --> 00:16:00.310
But imagine it could be a script tag.

249
00:16:00.620 --> 00:16:02.930
The possibilities are endless, but really quick.

250
00:16:02.930 --> 00:16:09.590
I just want to show you how and why you would maybe escape text that's coming from a translation when

251
00:16:09.590 --> 00:16:11.810
you're actually outputting it as HTML.

252
00:16:11.820 --> 00:16:18.250
So for a quick example, let's go edit the translation for this astar and try to TNA.

253
00:16:18.620 --> 00:16:21.320
So if we go back into logo translate.

254
00:16:22.740 --> 00:16:26.760
And we click on our test plug in and we click on the Espanol.

255
00:16:28.160 --> 00:16:35.690
So let's find that this post has now imagine if we just wrapped the word and Trada in a strong tag,

256
00:16:36.980 --> 00:16:39.800
obviously that in and of itself isn't malicious.

257
00:16:39.800 --> 00:16:44.650
But imagine if someone used a script tag and tried to include actual code.

258
00:16:44.660 --> 00:16:47.150
So this is just an example of proof of concept.

259
00:16:47.150 --> 00:16:56.120
But if we save this and then if we refresh, oh, notice that that actually did make the text bold,

260
00:16:56.390 --> 00:17:04.040
implying that text from the translation file is actually rendering as HTML, which is a potential security

261
00:17:04.040 --> 00:17:04.460
issue.

262
00:17:04.480 --> 00:17:07.150
So we just want to make sure that we escape this.

263
00:17:07.160 --> 00:17:12.200
So back in our code, let's look for our create HTML method.

264
00:17:12.680 --> 00:17:14.290
Right in here is the word count.

265
00:17:14.300 --> 00:17:20.840
You can see we're using this translation function to underscore, underscore, instead of just underscore,

266
00:17:20.840 --> 00:17:21.350
underscore.

267
00:17:21.350 --> 00:17:29.170
There's actually a function called E for escape, underscore, html and then underscore, underscore.

268
00:17:29.780 --> 00:17:32.160
So just by changing which function we use here.

269
00:17:32.180 --> 00:17:37.390
Now if we save and refresh, we're getting that same translation factor right.

270
00:17:37.400 --> 00:17:43.610
It's pulling from the Spanish translation, but now it's not letting any actual HTML be rendered.

271
00:17:43.610 --> 00:17:46.850
It's escaping this into similar characters.

272
00:17:46.850 --> 00:17:51.880
So we're a bit more secure now and that is going to bring this lesson to a close.

273
00:17:51.890 --> 00:17:58.280
So feel free to set your WordPress installation back to whatever language you were using before we started

274
00:17:58.280 --> 00:17:58.880
this lesson.

275
00:17:58.880 --> 00:18:06.380
So I will go back into general settings and just set my language back to English.

276
00:18:08.540 --> 00:18:14.450
Cool, let's talk about where we go from here, so into our very next lesson, because practice makes

277
00:18:14.450 --> 00:18:20.180
perfect, we're going to start on a new plug in and we're still going to be focusing on for just this

278
00:18:20.180 --> 00:18:25.320
one more plug in before we jump into the next chapter, which is about JavaScript.

279
00:18:25.640 --> 00:18:29.030
So let me give you a sneak peak preview in our next lesson.

280
00:18:29.210 --> 00:18:34.160
The based plug in that we're going to create is this word filter.

281
00:18:34.820 --> 00:18:39.820
There are two big things that make this plugin unique or different from the plug in we just built.

282
00:18:40.220 --> 00:18:40.910
So No.

283
00:18:40.910 --> 00:18:48.290
One, if I click onto the settings page, this settings page is not using the WordPress generated form

284
00:18:48.290 --> 00:18:48.800
builder.

285
00:18:49.070 --> 00:18:56.030
So remember all of those confusing functions like section and field and having WordPress automatically

286
00:18:56.030 --> 00:18:57.110
loop through them.

287
00:18:57.530 --> 00:19:01.580
Now there are pros and cons to the auto generated WordPress form pages.

288
00:19:01.850 --> 00:19:07.490
WordPress will automatically handle things for you, like the nonce, different security issues, the

289
00:19:07.490 --> 00:19:08.570
form submission.

290
00:19:08.960 --> 00:19:13.970
However, there are times where you want to have full control over things.

291
00:19:13.970 --> 00:19:20.390
So we're going to learn how to have a completely custom settings page with all of our own code, both

292
00:19:20.390 --> 00:19:23.950
the HTML and the that's processing the data.

293
00:19:24.350 --> 00:19:30.230
OK, the other thing that's unique about this plug in is we're actually getting a top level menu in

294
00:19:30.230 --> 00:19:37.010
the admin dashboard sidebar and we're actually going to learn how to have our own SPG icon instead of

295
00:19:37.010 --> 00:19:38.390
a generic dash icon.

296
00:19:39.110 --> 00:19:40.670
This should be a lot of fun to set up.

297
00:19:40.700 --> 00:19:43.340
Let's keep things rolling and I will see you then.
