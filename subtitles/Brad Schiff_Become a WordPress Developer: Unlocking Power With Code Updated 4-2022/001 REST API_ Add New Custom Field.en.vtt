WEBVTT
1
00:00:01.110 --> 00:00:02.170
Hello, everyone.

2
00:00:02.580 --> 00:00:10.840
In this lesson, we will learn how to customize the raw JSON data that the WordPress rest API outputs.

3
00:00:11.220 --> 00:00:17.670
So, for example, we know that if we go to this, you Ã³rale our route and then we add on WP, JSON,

4
00:00:17.670 --> 00:00:19.800
WP, V to posts.

5
00:00:20.160 --> 00:00:25.770
WordPress responds with all of this raw data for the 10 most recent blog posts.

6
00:00:26.070 --> 00:00:33.500
And actually let me open this same Eurail in the Postman app so we can actually make sense of the data

7
00:00:33.510 --> 00:00:35.430
so it's not all smooshed together.

8
00:00:35.820 --> 00:00:42.900
So WordPress sends us back an array of objects in this first object obviously represents a blog post.

9
00:00:43.140 --> 00:00:47.070
Now, this is the data that WordPress gives us by default, right?

10
00:00:47.130 --> 00:00:54.470
WordPress gives us the ID, the date, the slug, the post type, the permalink, the title.

11
00:00:54.810 --> 00:00:55.740
You get the idea.

12
00:00:55.890 --> 00:01:01.950
But the question that we want to answer in this lesson is what if we don't see everything in this data

13
00:01:01.950 --> 00:01:08.520
that we want or what if we want to add a new custom field to this raw JSON data?

14
00:01:08.910 --> 00:01:11.750
Let me give you an example of why you might want to do that.

15
00:01:12.240 --> 00:01:19.110
So back on our website, if someone searches for something and the results contain a link to a blog

16
00:01:19.110 --> 00:01:19.750
post.

17
00:01:19.890 --> 00:01:26.110
Let's imagine that as the designers of this site, we want it to say the title and then by the author.

18
00:01:26.430 --> 00:01:30.240
So this would say Buyology is cool by Brad.

19
00:01:30.660 --> 00:01:36.360
Well, by default, the WordPress rest API does not give you the author's name.

20
00:01:36.600 --> 00:01:42.060
So if I scroll down a little bit, yes, there is indeed a property named author, but it only gives

21
00:01:42.060 --> 00:01:46.230
you the ID number of the user account that created the post.

22
00:01:46.650 --> 00:01:48.020
And that's not what we want.

23
00:01:48.150 --> 00:01:50.660
We want the human readable nickname.

24
00:01:51.060 --> 00:01:56.730
Now, I will point out that if we scroll down a bit further, each post does contain a property named

25
00:01:56.730 --> 00:02:04.230
underscore links and that does contain a sub property named author, which does indeed contain a link

26
00:02:04.230 --> 00:02:08.280
to arrest apicultural for this posts author.

27
00:02:08.490 --> 00:02:15.900
And if you visit that you URL, this API URL will indeed give you the human readable nickname.

28
00:02:16.020 --> 00:02:22.260
Right here we see a value of Brad, but in a perfect world, we don't want to have to send out an additional

29
00:02:22.260 --> 00:02:22.560
U.

30
00:02:22.560 --> 00:02:25.680
RL request for each post in the results.

31
00:02:26.010 --> 00:02:30.420
At the end of the day, that's just going to slow down the user experience for our visitors.

32
00:02:30.420 --> 00:02:34.010
And also it sort of misses the entire point of this lesson.

33
00:02:34.260 --> 00:02:39.540
This lesson's topic doesn't actually have anything to do with authors and author names.

34
00:02:39.840 --> 00:02:43.740
We just want to learn how to add a new custom field, right.

35
00:02:43.740 --> 00:02:48.630
A property and value pair to the rest API JSON response.

36
00:02:48.990 --> 00:02:56.880
So just as a practice exercise, let's go ahead and add a new value named author name that will sit

37
00:02:56.880 --> 00:02:59.250
side by side all of these other properties.

38
00:02:59.490 --> 00:03:06.400
And that way we can use it in our JavaScript to say the title of the blog post by the author.

39
00:03:06.810 --> 00:03:07.230
All right.

40
00:03:07.260 --> 00:03:10.830
So the question right now is how in the world do we do this?

41
00:03:11.040 --> 00:03:14.610
How can we customize the JSON that WordPress responds with?

42
00:03:15.120 --> 00:03:22.980
The answer is that we want to jump in to our theme folder and open up the file named functions, BHP

43
00:03:24.150 --> 00:03:27.870
and right at the top here, right after the opening P tag.

44
00:03:28.350 --> 00:03:32.850
Let's just add a new line and say add action.

45
00:03:33.780 --> 00:03:37.170
And this is a WordPress function that takes two arguments.

46
00:03:37.500 --> 00:03:42.450
Remember, the first argument is the WordPress event that you want to hook on to.

47
00:03:42.660 --> 00:03:47.400
In this case, that is reste API net.

48
00:03:48.090 --> 00:03:54.360
And then the second argument is the function that you want to call during this event hook so we could

49
00:03:54.360 --> 00:03:56.730
make up any name we want for a function.

50
00:03:56.730 --> 00:04:04.430
But why don't we just say quotes and then call it university custom breast?

51
00:04:04.890 --> 00:04:05.430
All right.

52
00:04:05.430 --> 00:04:11.430
Now, if we are telling WordPress to run a function with this name during this event, we better make

53
00:04:11.430 --> 00:04:15.280
sure that a function with this exact name actually exists.

54
00:04:15.570 --> 00:04:19.110
So right now, maybe up here, let's just create a brand new function.

55
00:04:19.620 --> 00:04:24.420
So we just say function and then we want to match this name that we just made up.

56
00:04:24.420 --> 00:04:31.680
So university custom rest, parentheses, curly brackets.

57
00:04:32.310 --> 00:04:39.300
And now within the body of this function here, we can begin customizing the rest API and remember that

58
00:04:39.300 --> 00:04:44.790
in our case, what we want to do is add a new property named author name.

59
00:04:45.270 --> 00:04:52.670
So luckily there's a WordPress function named Register Rest Field.

60
00:04:53.970 --> 00:04:56.600
This function takes three arguments.

61
00:04:56.820 --> 00:04:59.910
So just as a placeholder, let's say a b.

62
00:05:00.090 --> 00:05:02.800
See, now let's go through these one by one.

63
00:05:02.820 --> 00:05:07.730
So the first argument is the post type that you want to customize.

64
00:05:08.250 --> 00:05:15.720
So, for example, you could say post or page, but obviously in this case, we just want the generic

65
00:05:15.720 --> 00:05:17.690
blog post post type.

66
00:05:18.240 --> 00:05:19.850
So let's just say post.

67
00:05:20.190 --> 00:05:20.720
All right.

68
00:05:20.730 --> 00:05:25.240
And the second argument is whatever you want to name the new field.

69
00:05:25.620 --> 00:05:33.210
So remember, I want to add a new property named author name in our code for the second argument.

70
00:05:33.210 --> 00:05:37.840
Let's just say quotes of their name.

71
00:05:38.310 --> 00:05:38.750
All right.

72
00:05:38.760 --> 00:05:45.090
And finally, the third argument is an array that describes how we want to manage this field.

73
00:05:45.370 --> 00:05:47.730
I will explain what that means in just a moment.

74
00:05:47.730 --> 00:05:50.280
But for now, let's go ahead and create the array.

75
00:05:50.640 --> 00:05:57.930
So when you just say the word array and then give it its own set of parentheses just to stay organized

76
00:05:57.930 --> 00:06:05.690
within the array parentheses, I like to dropdown and now we just build an associative array.

77
00:06:05.910 --> 00:06:09.440
In this case, our array actually only needs one item.

78
00:06:09.660 --> 00:06:17.580
This function is going to look for an argument named git callback and we just want to set that to equal

79
00:06:17.580 --> 00:06:18.450
a function.

80
00:06:18.690 --> 00:06:25.510
And whatever the function returns is what will be used as the value for the new field named author name.

81
00:06:26.010 --> 00:06:32.490
So down here where my cursor is, you could provide a name that points towards an already existing function

82
00:06:32.490 --> 00:06:33.570
that you want to use.

83
00:06:34.200 --> 00:06:34.560
Right.

84
00:06:34.980 --> 00:06:40.830
But instead of that, what you can also do is just spell out an anonymous inline function right here.

85
00:06:41.430 --> 00:06:45.210
So you could say function, parentheses, curly brackets.

86
00:06:45.570 --> 00:06:50.070
And again, whatever this function returns will be used as the value for this new field.

87
00:06:50.310 --> 00:06:59.070
So as an example, let's just return a string that says super amazing author name just as a test.

88
00:06:59.070 --> 00:06:59.400
Right.

89
00:06:59.640 --> 00:07:03.930
And just to be safe, right after this closing quote, let's add a semicolon.

90
00:07:04.230 --> 00:07:10.740
OK, now, if we go ahead and save this and then refresh the postman rest API, you are Al.

91
00:07:13.030 --> 00:07:19.810
And then down in the results area, if I scroll down a bit, cool, we see this brand new property named

92
00:07:19.810 --> 00:07:22.600
author name and check out its value.

93
00:07:22.870 --> 00:07:24.440
Super amazing author name.

94
00:07:24.730 --> 00:07:28.410
Now, obviously, we don't want a hard code, a fake value like that.

95
00:07:29.080 --> 00:07:30.820
So let's go ahead and delete that.

96
00:07:31.120 --> 00:07:38.920
And instead, let's just return the results of a WordPress function named Get the Author.

97
00:07:39.730 --> 00:07:45.870
And that will be the dynamic, true author name that could potentially be different for each blog post.

98
00:07:46.240 --> 00:07:53.670
So if we save that and refresh the postman request, perfect author name equals Brad.

99
00:07:53.980 --> 00:07:59.470
Now, before we go ahead and actually use this new value on the front end of our website, right to

100
00:07:59.470 --> 00:08:02.860
say Buyology is cool by Brad.

101
00:08:03.250 --> 00:08:09.340
Before we set that up, I just want to let you know that you can create as many new fields or properties

102
00:08:09.340 --> 00:08:14.290
as you want right below this register rest field function call.

103
00:08:14.530 --> 00:08:21.400
So right after this line, you could just create another call, just say register, rest, field again,

104
00:08:21.910 --> 00:08:23.770
target, whatever post type you want.

105
00:08:23.770 --> 00:08:30.690
Poster, page, choose a property name, maybe perfectly cropped image you url.

106
00:08:30.910 --> 00:08:35.710
I don't know, you can make up whatever you want but the cool part is then you just provide an array.

107
00:08:37.780 --> 00:08:45.790
They get callback equals an anonymous function and now this is where you can really start connecting

108
00:08:45.790 --> 00:08:51.970
the dots between the rest API and everything that we learned during the first portion of this course.

109
00:08:52.390 --> 00:08:57.440
So you're just free to return anything that you can cook up using HP.

110
00:08:57.910 --> 00:09:01.840
So that means you're free to access advanced custom field values.

111
00:09:02.020 --> 00:09:05.680
You're free to grab certain cropped versions of certain images.

112
00:09:05.800 --> 00:09:13.000
You're even free to use custom queries and loops if you want to retrieve data from a related post.

113
00:09:13.360 --> 00:09:19.570
Anyways, the idea here is that if you can achieve it with HP, you can return it as a value here,

114
00:09:19.900 --> 00:09:23.320
which ultimately means you can use it in your JavaScript.

115
00:09:23.770 --> 00:09:28.870
Now, having said that, in this case, I don't actually need to create another field or property at

116
00:09:28.870 --> 00:09:29.470
the moment.

117
00:09:29.470 --> 00:09:32.660
So let me delete that, OK?

118
00:09:32.890 --> 00:09:39.670
And at this point, let's work towards writing new JavaScript that actually uses and displays this new

119
00:09:39.670 --> 00:09:42.870
value on the front end of our website.

120
00:09:43.270 --> 00:09:49.900
So to do that, let's jump back into our text editor and within our JavaScript modules folder, let's

121
00:09:49.900 --> 00:09:58.870
open search J.S. and let's just scroll down to our method named Get Results, since this is what's responsible

122
00:09:58.870 --> 00:10:01.720
for outputting the HTML onto the page.

123
00:10:02.200 --> 00:10:05.410
So try to find the line that begins with the heading level to.

124
00:10:05.410 --> 00:10:07.950
And then just a couple lines below that.

125
00:10:08.230 --> 00:10:14.260
We have this line where we are looping through the array of results and this is the line where we create

126
00:10:14.260 --> 00:10:16.720
a bulleted list item for each result.

127
00:10:17.530 --> 00:10:22.750
Now, within this, a tag is the actual text that the user clicks on, right.

128
00:10:22.760 --> 00:10:25.340
That's what's creating this biologies cooling.

129
00:10:26.080 --> 00:10:29.140
So how about right after that link closes?

130
00:10:29.500 --> 00:10:36.010
But still before the closing list item tag, we output a little bit of text here that says by and then

131
00:10:36.010 --> 00:10:38.550
the author name would go here instead of this gibberish.

132
00:10:38.920 --> 00:10:40.150
So let me delete that.

133
00:10:40.390 --> 00:10:47.170
And since we are within a template literal, it's very easy to switch between simple string text and

134
00:10:47.170 --> 00:10:48.580
a JavaScript expression.

135
00:10:48.850 --> 00:10:55.570
We just say dollar sign curly brackets and then within the curly brackets we can say idam to begin looking

136
00:10:55.570 --> 00:10:56.710
at the current result.

137
00:10:57.010 --> 00:11:02.380
And then remember back in Postman, we can see that the new property was named author name.

138
00:11:02.920 --> 00:11:06.930
So we just say Eitam dot author name.

139
00:11:07.150 --> 00:11:07.470
Cool.

140
00:11:07.510 --> 00:11:13.840
Now if I go ahead and save this and make sure that over in your command line you either run golpe scripts

141
00:11:13.870 --> 00:11:16.360
or you've got your gold watch task running.

142
00:11:16.750 --> 00:11:23.140
But now back in the browser, if I search for Buyology, perfect.

143
00:11:23.140 --> 00:11:25.120
Here's the title by Brad.

144
00:11:25.450 --> 00:11:31.720
However, if I search for something more generic like Lorem as in Lorem Ipsum, we see that for blog

145
00:11:31.720 --> 00:11:32.440
posts.

146
00:11:32.440 --> 00:11:37.780
This works perfectly by the author's name, but for pages.

147
00:11:38.140 --> 00:11:41.900
Right for the post type of page we see by undefined.

148
00:11:42.190 --> 00:11:49.810
Now the reason for this is because back in functions HP remember that the first argument for this register,

149
00:11:49.810 --> 00:11:54.160
Westfield is the post type that you want to add the new field to.

150
00:11:54.580 --> 00:11:58.440
And we chose the post post type as in blog posts.

151
00:11:58.870 --> 00:12:05.500
So this means that our page post types do not have a field named author name, which explains why we

152
00:12:05.500 --> 00:12:06.760
see undefined.

153
00:12:07.120 --> 00:12:10.120
So why don't we do this in our JavaScript?

154
00:12:10.270 --> 00:12:11.440
Let's use a bit of.

155
00:12:11.620 --> 00:12:19.330
Additional logic and say only if a resulting item is a blog post, only then do we want to display this

156
00:12:19.330 --> 00:12:20.940
by author text.

157
00:12:21.310 --> 00:12:22.840
So back in our JavaScript.

158
00:12:24.040 --> 00:12:30.970
Search J.S., Here's that new buy and then the author name that we just added, let's actually go ahead

159
00:12:30.970 --> 00:12:36.580
and cut this into our clipboard so we can wrap it within a bit of conditional logic.

160
00:12:38.350 --> 00:12:44.350
So right now, my cursor is in the middle of a JavaScript template, literal and as we learned in a

161
00:12:44.350 --> 00:12:49.490
previous lesson, you cannot use an if statement in a template literal.

162
00:12:49.810 --> 00:12:55.440
However, we can use the ternary operator to basically create an if statement.

163
00:12:55.780 --> 00:12:58.180
So to do that, let's open up an expression.

164
00:12:58.180 --> 00:13:04.860
So dollar sign curly brackets and then within the brackets, let's spell out our ternary operator.

165
00:13:05.260 --> 00:13:10.930
So to refresh your memory, you begin with a condition, then a question mark, then you say what you

166
00:13:10.930 --> 00:13:11.350
want to do.

167
00:13:11.350 --> 00:13:17.450
If the condition is true, then a colon, then you say what you want to do, if the condition is false.

168
00:13:17.830 --> 00:13:25.570
So for our condition, let's just say Eitam dot type equals post.

169
00:13:25.930 --> 00:13:30.770
And in case you're wondering how I knew that each object would have a property named type.

170
00:13:31.180 --> 00:13:37.270
Well, you can always just look back in postman and see that in the resulting JSON there's a property

171
00:13:37.270 --> 00:13:38.230
named type.

172
00:13:38.590 --> 00:13:42.080
So that way you can always check what kind of post typed you're working with.

173
00:13:42.370 --> 00:13:49.240
So back in our code, if this is true, if the type equals post, then let's get rid of the placeholder.

174
00:13:49.240 --> 00:13:49.830
Yay!

175
00:13:50.530 --> 00:13:52.900
And let's just open up a template literal.

176
00:13:52.900 --> 00:13:54.580
So back, tick, back, tick.

177
00:13:55.270 --> 00:13:58.570
And in between those we can just paste back in our clipboard.

178
00:13:59.530 --> 00:14:02.140
So that will give us the by author name text.

179
00:14:02.410 --> 00:14:09.760
And if this condition is false instead of the placeholder name, let's just include a completely blank

180
00:14:09.760 --> 00:14:10.870
set of quotes.

181
00:14:11.320 --> 00:14:12.910
OK, let's give this a save.

182
00:14:14.110 --> 00:14:19.990
And now if I search for something that will return both posts and pages perfect.

183
00:14:19.990 --> 00:14:24.580
We see the blog posts, say, by the author name and the pages don't.

184
00:14:25.060 --> 00:14:28.920
And that's going to bring this lesson to a close to review.

185
00:14:28.960 --> 00:14:35.480
We learned how to add new properties to the raw JSON data that WordPress sends back to us.

186
00:14:35.830 --> 00:14:40.960
So at this rest API posts you URL by search for author name.

187
00:14:42.430 --> 00:14:43.150
There we see it.

188
00:14:43.510 --> 00:14:50.860
The take away idea for this lesson is that being able to customize this resulting JSON data opens up

189
00:14:50.860 --> 00:14:52.750
all sorts of possibilities.

190
00:14:53.110 --> 00:14:59.050
And in our next lesson, we're going to take things a step further, actually more like 20 steps further

191
00:14:59.350 --> 00:15:00.550
in the next lesson.

192
00:15:00.700 --> 00:15:07.540
Instead of learning how to modify one of these existing rest API URLs, we are going to learn how to

193
00:15:07.540 --> 00:15:13.080
create our own brand new completely custom rest API url.

194
00:15:13.450 --> 00:15:23.800
So, for example, instead of WP JSON to posts, we could have something like Jason University, the

195
00:15:23.800 --> 00:15:25.600
one search.

196
00:15:26.500 --> 00:15:29.170
And then since we're creating our own brand new U.

197
00:15:29.170 --> 00:15:36.730
RL, instead of modifying an existing WordPress one, this means we are in 100 percent control over

198
00:15:36.730 --> 00:15:39.040
the JSON data that gets sent back.

199
00:15:39.430 --> 00:15:45.520
Being able to take matters into our own hands like this opens up the door to so many possibilities.

200
00:15:45.790 --> 00:15:50.050
So let's keep rolling along and I will see you in the next lesson.
