WEBVTT
1
00:00:00.330 --> 00:00:05.610
Now that we have sort of the big picture spelled out, let's just start building these methods one by

2
00:00:05.610 --> 00:00:05.930
one.

3
00:00:05.940 --> 00:00:08.180
So let's start with get ARC's.

4
00:00:08.670 --> 00:00:11.100
So the construct function ends down here.

5
00:00:11.370 --> 00:00:12.930
I'll just create a new method.

6
00:00:13.200 --> 00:00:20.660
So function Namee, get ARGs in this function, I'm going to start building a temporary array.

7
00:00:21.180 --> 00:00:26.850
So I just made up this name of temp but set that to equal an array and now I'm going to drop down in

8
00:00:26.850 --> 00:00:31.350
one by one, pulling the specific values from the Eurail that I want.

9
00:00:31.770 --> 00:00:38.310
Because for example, if someone types in a made up parameter of just random characters and set that

10
00:00:38.310 --> 00:00:40.620
to a value, we don't care about that.

11
00:00:40.620 --> 00:00:40.850
Right.

12
00:00:40.860 --> 00:00:44.160
There's only specific names that we're going to care about.

13
00:00:44.580 --> 00:00:47.580
So let's spell out the first one together.

14
00:00:47.730 --> 00:00:53.250
So quotes, let's say we're looking for fav color and I'll just set that to equal.

15
00:00:53.550 --> 00:00:59.280
And now, before I use the tool to pull a value from the GIT request, let's first start by wrapping

16
00:00:59.280 --> 00:01:00.030
it inside.

17
00:01:00.180 --> 00:01:02.820
Sanitize TextField.

18
00:01:03.270 --> 00:01:05.850
Let's be sure to add a comma at the end of this line while we're at it.

19
00:01:05.850 --> 00:01:11.910
Now, in these parentheses, this is where you would say dollar sign, underscore all uppercase, get

20
00:01:12.270 --> 00:01:16.050
square brackets, quotes and then just the name of the parameter.

21
00:01:16.050 --> 00:01:17.700
So fav color.

22
00:01:18.130 --> 00:01:20.580
Now we just do this for each property we want.

23
00:01:20.860 --> 00:01:24.510
I'll do this off camera and then you can just pause the video to follow along.

24
00:01:24.510 --> 00:01:30.150
But essentially I'm just going to copy and paste this line and just change this value and this value.

25
00:01:30.810 --> 00:01:34.110
OK, so these are the eight parameters I want to look for.

26
00:01:34.890 --> 00:01:37.940
Again, feel free to pause the video and spell these out with me.

27
00:01:38.460 --> 00:01:43.950
Let's be sure to end this line with the closing parentheses, with a semicolon, and then I'm going

28
00:01:43.950 --> 00:01:44.750
to drop down.

29
00:01:45.060 --> 00:01:48.990
Now, we have no guarantee that each of these will have a value.

30
00:01:49.410 --> 00:01:55.920
For example, if the euro only specifies species and favorite color, all of these values will be blank.

31
00:01:56.280 --> 00:02:01.650
So what I'm going to do now is filter through this array and only keep the items that actually have

32
00:02:01.650 --> 00:02:02.340
a value.

33
00:02:02.550 --> 00:02:06.170
And then that's what this overall Guitar ARGs function will return.

34
00:02:06.510 --> 00:02:13.650
So down here, I'm just going to say return array filter, which is a function semicolon.

35
00:02:13.650 --> 00:02:15.870
We give array filter to arguments.

36
00:02:16.380 --> 00:02:19.530
The first is the original array that you want to work with.

37
00:02:19.530 --> 00:02:22.290
So we named temp, so temp.

38
00:02:22.620 --> 00:02:27.600
The second argument is a function that you're going to run once for each item, so I'll just provide

39
00:02:27.600 --> 00:02:28.860
an inline function here.

40
00:02:28.860 --> 00:02:32.610
So function parentheses, curly brackets in the parentheses.

41
00:02:32.610 --> 00:02:39.060
Let's have a parameter, just call a dollar sign X and then in the body of our function, just return

42
00:02:39.450 --> 00:02:43.110
dollar sign X filter works just like it does in JavaScript.

43
00:02:43.350 --> 00:02:48.510
So if you return a value of true here, that item will be included in the new array we're building.

44
00:02:48.750 --> 00:02:54.450
So essentially, as long as it has a value and isn't empty, well, it'll be included in the new array

45
00:02:54.450 --> 00:02:55.400
that we're returning.

46
00:02:55.950 --> 00:03:00.640
OK, so back up at the top of our file, we've taken care of our args.

47
00:03:01.200 --> 00:03:04.380
Now let's worry about this create placeholders method.

48
00:03:04.830 --> 00:03:08.670
So I'll scroll back down maybe below our git args functions right here.

49
00:03:08.670 --> 00:03:13.320
You'll know you're in the right place if you're still within that one final curly bracket for the class

50
00:03:13.320 --> 00:03:14.040
overall.

51
00:03:14.430 --> 00:03:21.930
But right here I would just say function create placeholders, parentheses, curly brackets and all

52
00:03:21.930 --> 00:03:25.670
we need to do in this function is slightly modify this array.

53
00:03:25.770 --> 00:03:32.580
So in this argument array we do want sort of the property name because we need this name for our school

54
00:03:32.580 --> 00:03:33.120
query.

55
00:03:33.150 --> 00:03:33.420
Right.

56
00:03:33.420 --> 00:03:36.840
We need to say species' equals whatever the value is.

57
00:03:37.260 --> 00:03:44.000
However, in our placeholders array, we don't need the property name, we only need the actual value.

58
00:03:44.730 --> 00:03:49.620
So in this function I would just return array map.

59
00:03:49.620 --> 00:03:51.120
Map takes two arguments.

60
00:03:51.120 --> 00:03:52.430
It's a little bit different though.

61
00:03:52.560 --> 00:03:56.190
So the second argument is the array that you want to work with.

62
00:03:56.190 --> 00:03:58.140
So that would be dollar sign this.

63
00:03:58.140 --> 00:04:00.000
Look inside it for args.

64
00:04:00.690 --> 00:04:04.610
The first argument is your function that you want to run once for each item.

65
00:04:04.620 --> 00:04:09.600
So again I'll just give it an inline function, function, parentheses, curly brackets, let's give

66
00:04:09.600 --> 00:04:16.320
it a parameter of dollar sign X and then inside our function I literally just want to return the value.

67
00:04:16.920 --> 00:04:17.330
Cool.

68
00:04:17.340 --> 00:04:23.760
So now we'll have this array in placeholders that doesn't have the property name, it just has the actual

69
00:04:23.760 --> 00:04:24.390
value.

70
00:04:24.900 --> 00:04:26.400
So we've created these two methods.

71
00:04:26.400 --> 00:04:30.690
Now we just need to go build a method called create where text.

72
00:04:31.440 --> 00:04:35.100
So let's go back down towards the bottom right about here.

73
00:04:35.130 --> 00:04:42.210
I will create a new function with a name of create where text, parentheses, curly brackets.

74
00:04:42.720 --> 00:04:45.330
Inside this function I'll make up a variable name.

75
00:04:45.330 --> 00:04:46.740
So maybe just dollar sign.

76
00:04:47.130 --> 00:04:50.850
I'll make up a name of where query equals four.

77
00:04:50.850 --> 00:04:54.030
Now just add it to an empty string and then on a new line.

78
00:04:54.030 --> 00:04:56.880
That's what we want to return right is our where query.

79
00:04:57.120 --> 00:04:59.610
And now in between those two lines, this is where we.

80
00:04:59.670 --> 00:05:07.410
And just build out the actual dynamic text, so first of all, if there are no incoming arguments,

81
00:05:07.410 --> 00:05:14.520
for example, if someone just visits the base URL for our page without any neutral parameters, in that

82
00:05:14.520 --> 00:05:18.080
case, we don't need the upper case where at all in our SQL statement.

83
00:05:18.510 --> 00:05:24.050
So the first thing I would do is have an if statement where the condition is if and I would use the

84
00:05:24.060 --> 00:05:28.340
count function and I'm just going to count this look inside it for ARGs.

85
00:05:28.740 --> 00:05:32.670
So as long as that's greater than zero that will evaluate to true.

86
00:05:33.210 --> 00:05:40.500
If that is true, then I just want to say where query should now equal all uppercase where and then

87
00:05:40.500 --> 00:05:44.280
a space semicolon below this.

88
00:05:44.430 --> 00:05:50.700
Now I just want to loop through the args array and just start adding on to this string of text where

89
00:05:50.700 --> 00:06:00.540
we say species' equals percent, X mean weight equals percent D so we'll just have a for each parentheses

90
00:06:00.540 --> 00:06:01.530
currently brackets.

91
00:06:01.770 --> 00:06:05.680
Before we go any further, do make sure you have a space after all.

92
00:06:05.720 --> 00:06:11.310
Upper case where before you end the quote, that would be a very frustrating mistake to try to troubleshoot

93
00:06:11.820 --> 00:06:16.880
anyways for the parentheses of foreach we just tell it which array we want to loop through.

94
00:06:16.890 --> 00:06:24.390
So that's dollar sign this look inside it for args as dollar sign index equals greater then.

95
00:06:24.390 --> 00:06:26.490
So Arrow symbol dollar sign item.

96
00:06:26.790 --> 00:06:32.310
I'm doing this because I'm not actually interested in the value, I'm just trying to get access to the

97
00:06:32.310 --> 00:06:35.220
property name or the key name for each item.

98
00:06:35.580 --> 00:06:35.750
Right.

99
00:06:35.800 --> 00:06:39.710
We've already dealt with the actual values in our placeholder array.

100
00:06:39.960 --> 00:06:44.600
Now we're just interested in the actual parameter names like species, fav color.

101
00:06:44.940 --> 00:06:47.390
So now in the curly brackets, four for each.

102
00:06:47.400 --> 00:06:51.240
This is where I would say where query I want to add on to it.

103
00:06:51.540 --> 00:06:57.450
Currently it's just where and then a space and then we can say dot equals to add on to it.

104
00:06:57.840 --> 00:07:02.010
And now for certain properties, this is going to be very simple for Species'.

105
00:07:02.010 --> 00:07:08.790
It would just be dollar sign index and then we would concatenate on a string of text and say where that

106
00:07:08.790 --> 00:07:10.380
equals percent.

107
00:07:10.380 --> 00:07:10.950
S right.

108
00:07:10.950 --> 00:07:11.710
The placeholder.

109
00:07:11.880 --> 00:07:18.060
However, remember, we're trying to take care of arguments like Year and Max here and Min wait and

110
00:07:18.060 --> 00:07:18.900
Max wait.

111
00:07:19.230 --> 00:07:26.280
And those don't correspond one to one with an exact SQL column name like something like Species' would.

112
00:07:26.820 --> 00:07:32.730
So to make this flexible and easy to list out all of our different details, I would actually create

113
00:07:32.730 --> 00:07:36.120
a separate function that uses a switch statement.

114
00:07:36.690 --> 00:07:39.360
So let's point towards a method that doesn't even exist yet.

115
00:07:39.360 --> 00:07:47.310
But this and we'll call it maybe a specific query, call it semicolon in the parentheses, just give

116
00:07:47.310 --> 00:07:48.750
it dollar sign index.

117
00:07:48.750 --> 00:07:52.530
And then this function can be responsible for all of the details.

118
00:07:53.040 --> 00:07:57.990
Before we go create this function, we need to remember that in between each of these statements in

119
00:07:58.010 --> 00:08:00.060
school, you want the all uppercase.

120
00:08:00.060 --> 00:08:06.630
And so we need an uppercase and after each item, except for the very last final item.

121
00:08:07.020 --> 00:08:13.230
And because our key is a word instead of a no, I'm not sure of a super elegant way to check to make

122
00:08:13.230 --> 00:08:15.030
sure you're not on the last item.

123
00:08:15.300 --> 00:08:18.180
So here's what I would do right before the foreach.

124
00:08:18.180 --> 00:08:22.680
I would just create a variable call it current position it to equals zero.

125
00:08:23.040 --> 00:08:24.420
Inside are for each loop.

126
00:08:24.420 --> 00:08:26.820
At the very end of it, I would just increment that.

127
00:08:26.820 --> 00:08:30.300
So current position plus plus.

128
00:08:30.690 --> 00:08:33.630
And then right before that line I would just write an if statement.

129
00:08:33.630 --> 00:08:39.330
So I'd say if parentheses curly brackets if current position.

130
00:08:39.810 --> 00:08:44.670
And I essentially want this to be true for every item except the very last item in the array.

131
00:08:44.670 --> 00:08:51.300
So I would just say if that does not equal and then I would count dollar sign this, look inside it

132
00:08:51.300 --> 00:08:55.680
for ARGs after that parentheses before the final one minus one.

133
00:08:56.130 --> 00:08:56.340
Right.

134
00:08:56.370 --> 00:08:57.930
Because arrays are zero based.

135
00:08:57.930 --> 00:09:01.620
So essentially for every item except the very last item.

136
00:09:01.890 --> 00:09:09.420
Let's just add on to our web query and say dollar sign where query equal to add onto it, string a text,

137
00:09:09.720 --> 00:09:15.210
let's have a space all uppercase and and then another space semicolon.

138
00:09:15.640 --> 00:09:21.150
OK, now we just need to go create the method with this made up name we chose of specific query.

139
00:09:21.570 --> 00:09:25.610
It's job is to return different text depending on the index that we give it.

140
00:09:25.980 --> 00:09:26.700
Let me explain.

141
00:09:26.710 --> 00:09:28.740
So let's just go create a function with that name.

142
00:09:28.740 --> 00:09:34.680
So function specific query parentheses, curly brackets in the parentheses.

143
00:09:34.680 --> 00:09:37.410
We want to receive that incoming index value.

144
00:09:37.710 --> 00:09:40.530
And now in this function, let's use a switch statement.

145
00:09:40.530 --> 00:09:43.770
Sources switch parentheses, curly brackets.

146
00:09:44.130 --> 00:09:49.080
What are we switching based on while that incoming index in these curly brackets?

147
00:09:49.080 --> 00:09:54.270
Now we just spell out different cases depending on what the incoming value is.

148
00:09:54.300 --> 00:09:59.490
So let's say the first case will check for is if it is min wage.

149
00:09:59.690 --> 00:10:05.600
Right, the minimum weight you want to query for so colon on a new line, we can indent and say return

150
00:10:06.410 --> 00:10:11.750
string text and now there is no column in our database called min weight.

151
00:10:12.170 --> 00:10:15.560
But we do have a column in our database called Pet Weight.

152
00:10:15.980 --> 00:10:22.820
So the actual SQL query would just be pet weight and then we're checking for a minimum weight.

153
00:10:22.850 --> 00:10:29.480
So that would just be if it's greater than or equal to the placeholder value percent d remember it's

154
00:10:29.720 --> 00:10:33.110
s for a string of text, it's D for a digit or number.

155
00:10:33.500 --> 00:10:36.410
At the end of this line, let's include a semicolon drop down.

156
00:10:36.410 --> 00:10:39.340
We can unindexed one and just spell out another case.

157
00:10:39.830 --> 00:10:44.630
So let's say max weight column, we would return a string of text.

158
00:10:44.930 --> 00:10:51.380
Pet weight is less than or equal to the value semicolon.

159
00:10:51.410 --> 00:10:58.490
Next up, let's spell out maybe year in max year or so case where it's colon.

160
00:10:58.490 --> 00:11:00.710
We would return a string of text.

161
00:11:01.280 --> 00:11:06.680
And again, there is no column in our database called Minear or Max Year, but there is a column called

162
00:11:06.680 --> 00:11:07.520
Birth Year.

163
00:11:07.700 --> 00:11:16.010
So we would say return where birth year is greater than or equal two percent D semicolon.

164
00:11:16.010 --> 00:11:21.470
Let's have another case for max year colon return string of text.

165
00:11:21.470 --> 00:11:27.470
Birth year is less than or equal two percent D and that with a semicolon.

166
00:11:27.470 --> 00:11:31.040
And now finally those are all of the unique examples.

167
00:11:31.280 --> 00:11:35.180
And then at the very end of our switch statement, we can have a default option.

168
00:11:35.180 --> 00:11:36.650
So we'll just say default.

169
00:11:36.680 --> 00:11:45.920
This name needs to be exactly this default colon and then we would just return dollar sign index, concatenate

170
00:11:45.920 --> 00:11:52.010
on a string of text equals and then placeholder s semicolon.

171
00:11:52.520 --> 00:11:54.530
You could have a space here too if you wanted to.

172
00:11:54.770 --> 00:12:00.230
But the idea here is for all of the other things like species, favorite color, favorite hobby.

173
00:12:00.800 --> 00:12:02.870
This will work for all of those cases.

174
00:12:03.050 --> 00:12:07.340
So as long as the index doesn't match one of these, then this will be used.

175
00:12:07.820 --> 00:12:10.490
Let's go ahead and save this and test it out.

176
00:12:10.580 --> 00:12:16.280
So on the front end, if I refresh, I don't have any parameters up in the euro, so I just get the

177
00:12:16.280 --> 00:12:17.750
first one hundred pets.

178
00:12:18.080 --> 00:12:22.670
But if I say question, species equals dog.

179
00:12:24.690 --> 00:12:30.090
Perfect, I only see dogs let me check for only dogs whose favorite color is green.

180
00:12:30.330 --> 00:12:34.240
So and fav color equals green.

181
00:12:35.940 --> 00:12:36.510
Perfect.

182
00:12:36.690 --> 00:12:39.160
Let's try to use the min wait and Max wait.

183
00:12:39.210 --> 00:12:48.330
So at the very end here and min wait equals 20 and max weight equals 50.

184
00:12:50.040 --> 00:12:50.510
Perfect.

185
00:12:50.520 --> 00:12:53.290
So now all of the weights fall within that range.

186
00:12:53.670 --> 00:12:56.700
Finally, let's pay attention to these count results.

187
00:12:56.700 --> 00:12:56.950
Right.

188
00:12:56.970 --> 00:13:02.480
So it should say found maybe 500 results showing the first 100.

189
00:13:02.940 --> 00:13:09.660
So back in our code, in order to return the overall count, we'll need to perform another query against

190
00:13:09.660 --> 00:13:10.460
the database.

191
00:13:10.770 --> 00:13:16.770
Technically, there is a way to just send one request to the database and get back the results and the

192
00:13:16.770 --> 00:13:17.730
overall count.

193
00:13:18.060 --> 00:13:23.610
But I've seen a few threads on Stack Overflow where that's actually perhaps less performant than just

194
00:13:23.610 --> 00:13:25.620
sending two separate requests.

195
00:13:25.890 --> 00:13:26.910
So here's what I would do.

196
00:13:27.180 --> 00:13:28.680
Maybe right above this line.

197
00:13:29.040 --> 00:13:37.320
I would just say dollar sign this, create a new property called Count and set that to equal dollar

198
00:13:37.320 --> 00:13:39.200
sign WP DB.

199
00:13:39.750 --> 00:13:47.100
Look inside that for a function called git var semicolon and then we'll just give that a prepared statement.

200
00:13:47.100 --> 00:13:51.300
So dollar sign db look inside it for prepare.

201
00:13:51.540 --> 00:13:53.220
We prepare gets two arguments.

202
00:13:53.370 --> 00:13:56.700
The placeholders will be exactly the same, just like we did on this line.

203
00:13:56.700 --> 00:14:00.210
So dollar sign this look inside it for placeholders.

204
00:14:00.720 --> 00:14:05.700
The query will be a little bit different though because we definitely don't want to write limit one

205
00:14:05.700 --> 00:14:10.760
hundred at the end and the very beginning query will also be a little bit different.

206
00:14:11.160 --> 00:14:12.300
So here's what I would do.

207
00:14:12.660 --> 00:14:14.040
Maybe right below this line.

208
00:14:14.190 --> 00:14:18.240
I would just create a different variable and call it count.

209
00:14:18.450 --> 00:14:28.320
Query equals string the text select and then instead of asterisk, I would say count parentheses, asterisk

210
00:14:29.790 --> 00:14:35.040
from and then table name and then a space semicolon.

211
00:14:35.040 --> 00:14:37.500
So it's similar to this, but it is different.

212
00:14:37.980 --> 00:14:41.100
And then I would just reuse my create where text function.

213
00:14:41.100 --> 00:14:47.910
So I would just duplicate this line of code but change the variable name to count query and then we

214
00:14:47.910 --> 00:14:50.430
don't need to add a limit to the count query.

215
00:14:50.940 --> 00:14:56.670
So then down here instead of the a placeholder, it would just be dollar sign, count query, let's

216
00:14:56.670 --> 00:14:57.510
give that a save.

217
00:14:57.510 --> 00:15:02.340
And then back in our HTML template we can actually use this county property.

218
00:15:02.880 --> 00:15:08.610
So back in our template we're just looking for the paragraph element right above the table.

219
00:15:09.030 --> 00:15:17.480
So where it says found and then the number, I would just hollow this out, go into P and Echo, dollar

220
00:15:17.490 --> 00:15:22.290
sign, get pets, look inside it for the count property.

221
00:15:23.190 --> 00:15:25.080
Let's give that a save if we refresh.

222
00:15:25.860 --> 00:15:26.300
Cool.

223
00:15:26.310 --> 00:15:32.940
So in my case I found a hundred and sixty two dogs that like the color green and are in this weight

224
00:15:32.940 --> 00:15:33.540
range.

225
00:15:34.050 --> 00:15:38.850
And then right here we, we just want to display how many results were actually displaying currently.

226
00:15:38.850 --> 00:15:40.620
So we know that's one hundred.

227
00:15:40.620 --> 00:15:44.670
But if we ever change that in our query, we want this to be dynamic.

228
00:15:45.000 --> 00:15:48.180
So in our template, what you can do, let's find that.

229
00:15:48.180 --> 00:15:49.650
Here's the hardcoded X.

230
00:15:50.580 --> 00:15:56.610
I would replace that and then go into P and echo out and then I would just count.

231
00:15:56.910 --> 00:15:57.930
And what do I want to count?

232
00:15:57.930 --> 00:15:59.340
Well, our array of pets.

233
00:15:59.340 --> 00:16:00.390
So that's dollar sign.

234
00:16:00.390 --> 00:16:04.110
Get pets, look inside it for the pets property.

235
00:16:04.710 --> 00:16:05.880
Let's give that to save.

236
00:16:05.880 --> 00:16:08.250
And if I reload, perfect.

237
00:16:08.730 --> 00:16:11.670
And that is going to bring this lesson to a close now.

238
00:16:11.670 --> 00:16:12.120
Yes.

239
00:16:12.150 --> 00:16:17.220
You wouldn't expect the visitors of your site to actually type in Eurail parameters like this.

240
00:16:17.610 --> 00:16:25.380
You would instead have an HTML form with checkboxes or select elements, but then in HTML form, when

241
00:16:25.380 --> 00:16:29.880
you submit the page it will generate, you are URLs identical to this.

242
00:16:30.180 --> 00:16:36.810
So the point of this chapter is not how to build an HTML form, it's how to actually work with values

243
00:16:36.810 --> 00:16:39.210
and feed those into our database queries.

244
00:16:39.600 --> 00:16:45.810
So perhaps that would be a fun extra credit challenge for you to build a front end that actually generates

245
00:16:45.810 --> 00:16:46.740
these URLs.

246
00:16:46.740 --> 00:16:50.010
But for now, that's really beyond the scope of this chapter.

247
00:16:50.430 --> 00:16:51.770
So where do we go from here?

248
00:16:51.930 --> 00:16:55.020
Well, now we're familiar with building queries.

249
00:16:55.290 --> 00:17:01.050
In our very next lesson, I want to show you how we could actually modify the database from the front

250
00:17:01.050 --> 00:17:01.590
end here.

251
00:17:01.920 --> 00:17:09.090
So, for example, only for logged in admin users, wouldn't it be cool if down at the very bottom of

252
00:17:09.090 --> 00:17:14.910
this table there was a form where you could type in the name of a pet click submit and it would actually

253
00:17:14.910 --> 00:17:16.920
add that pet into the database?

254
00:17:17.280 --> 00:17:23.460
Also, wouldn't it be neat if there again only for admin logged in users if there was an extra.

255
00:17:23.500 --> 00:17:28.630
Column at the edge here with a delete button so that you could delete any row that you wanted to.

256
00:17:29.140 --> 00:17:31.280
Well, that's what we're going to work on moving forward.

257
00:17:31.600 --> 00:17:33.900
Let's keep things rolling and I'll see you then.
