1
00:00:02,090 --> 00:00:03,050
Hello, everyone.

2
00:00:03,380 --> 00:00:09,320
In this lesson, we're going to continue building the settings form for our plug in, let's jump into

3
00:00:09,320 --> 00:00:09,980
the action.

4
00:00:10,610 --> 00:00:17,300
So in our previous lesson, we successfully set things up so that we were able to save this value of

5
00:00:17,570 --> 00:00:21,050
display location, end of post into the database.

6
00:00:21,050 --> 00:00:21,330
Right.

7
00:00:21,350 --> 00:00:26,580
That's what this WCP location with a value of one instead of zero.

8
00:00:26,870 --> 00:00:28,330
That's what that signifies.

9
00:00:28,550 --> 00:00:36,200
However, it would be nice if when you refresh this admin page, if that was actually the selected option.

10
00:00:37,890 --> 00:00:43,230
Right, instead of it just always selecting the first option when you reload the page, so essentially

11
00:00:43,230 --> 00:00:48,920
let me show you how to make this HTML select element actually come to life.

12
00:00:49,320 --> 00:00:55,950
So back in our code, we're looking for our function that we named location HTML.

13
00:00:56,190 --> 00:00:58,020
Right, with the select element.

14
00:00:58,440 --> 00:01:02,380
And we just need to add a little bit of P on each of these options.

15
00:01:02,790 --> 00:01:10,050
So on this first one, maybe after the value attribute, let's enter into P and close it out right here

16
00:01:10,050 --> 00:01:11,570
as well inside.

17
00:01:12,630 --> 00:01:21,120
We just want to output the selected attribute if the value in the database matches this current value.

18
00:01:21,120 --> 00:01:21,330
Right.

19
00:01:21,330 --> 00:01:23,250
And then we do the same thing for this one as well.

20
00:01:23,880 --> 00:01:30,990
Now, you could write your own code to output that, but luckily, WordPress has a function named selected.

21
00:01:32,220 --> 00:01:34,170
We're going to call that in these parentheses.

22
00:01:34,170 --> 00:01:39,720
We're going to give it to arguments and use give it to values and it will compare the two.

23
00:01:39,720 --> 00:01:45,180
And if they're a match, it will output the word selected into the HTML.

24
00:01:45,300 --> 00:01:49,890
So for the first value, let's load that option from the database.

25
00:01:50,160 --> 00:01:56,750
To do that, we just say git underscore option and then you tell it the name of your setting.

26
00:01:56,770 --> 00:02:01,590
So remember, we named ours WCP underscore location.

27
00:02:02,610 --> 00:02:02,890
Right?

28
00:02:02,910 --> 00:02:07,220
So that's this value in the database and it's going to be either zero or one.

29
00:02:08,370 --> 00:02:14,490
So for the second argument, we would just check for this first option, which would be zero.

30
00:02:14,820 --> 00:02:17,340
So string of text zero.

31
00:02:18,120 --> 00:02:25,200
OK, now let's just copy and paste this entire block of P here and then just add it for this option

32
00:02:25,320 --> 00:02:29,040
and just change the value that we're checking for from zero to one.

33
00:02:29,580 --> 00:02:34,620
Now, before we save this and test it out, because this is the first time we've seen this git option

34
00:02:34,620 --> 00:02:41,270
function, I want to let you know that there is no performance hit by using it several times.

35
00:02:41,610 --> 00:02:47,880
So, yes, this value that we're loading is coming from the database, but it's not like WordPress needs

36
00:02:47,880 --> 00:02:50,580
to access the database again and again.

37
00:02:50,580 --> 00:02:57,030
Each time we use this function, essentially, WordPress will load any and all options from the database

38
00:02:57,030 --> 00:02:58,050
in one trip.

39
00:02:58,500 --> 00:03:00,210
I'll let you know that in the database.

40
00:03:00,360 --> 00:03:03,210
Notice this third column called Auto Load.

41
00:03:03,660 --> 00:03:09,420
Now, these other rows on the screen, they're set to know because they're sort of temporary transient

42
00:03:09,420 --> 00:03:10,230
cache data.

43
00:03:10,230 --> 00:03:11,760
They're not actual options.

44
00:03:12,120 --> 00:03:17,760
But if you go back to maybe the first page of your options table, you will see that almost all of them

45
00:03:18,210 --> 00:03:20,190
are set to yes for auto load.

46
00:03:20,460 --> 00:03:26,010
And that just means that if it's an option, a user preference, WordPress is going to load that into

47
00:03:26,010 --> 00:03:26,520
memory.

48
00:03:26,670 --> 00:03:31,400
So we're not making round trips to the database over and over again anyway.

49
00:03:31,440 --> 00:03:33,830
Anyways, let's give this a save and test it out.

50
00:03:33,870 --> 00:03:41,430
So back in the admin panel, if we refresh perfect, it selected that option that we have currently

51
00:03:41,430 --> 00:03:43,110
set it to in the database.

52
00:03:43,530 --> 00:03:45,630
OK, so this field is looking good.

53
00:03:45,840 --> 00:03:47,520
Let's move on to the next field.

54
00:03:47,520 --> 00:03:52,740
So if we look at the finished product, the next field would be the headline text.

55
00:03:53,160 --> 00:03:53,520
Right.

56
00:03:53,520 --> 00:03:58,010
That lets the user type in whatever they want for the post statistics headline.

57
00:03:58,470 --> 00:04:04,080
So to set that up, let's just jump back into our text editor in setting up our first field with a lot

58
00:04:04,080 --> 00:04:08,830
of work, but now adding subsequent fields and settings is going to be very easy.

59
00:04:09,240 --> 00:04:15,360
So, for example, in our settings method, let's actually just add a space here just for our own organization

60
00:04:15,360 --> 00:04:16,470
in between these lines.

61
00:04:16,770 --> 00:04:19,050
So notice these two lines are grouped together.

62
00:04:19,380 --> 00:04:21,990
Add setting field and register setting.

63
00:04:22,440 --> 00:04:24,600
Let's just duplicate these two lines.

64
00:04:24,600 --> 00:04:27,140
Right, because these two lines are for that first field.

65
00:04:27,150 --> 00:04:30,760
So just select the two lines, copy right below paste.

66
00:04:31,260 --> 00:04:33,870
So now you can add comments if you want to.

67
00:04:33,870 --> 00:04:36,530
You can add a comment, say this one is for location.

68
00:04:36,930 --> 00:04:39,540
This one is for the headline text.

69
00:04:39,540 --> 00:04:43,680
But essentially now we just make very minimal changes to these new two lines.

70
00:04:44,100 --> 00:04:49,020
Why don't we name the option WCP underscore headline.

71
00:04:50,130 --> 00:04:51,060
Change the label.

72
00:04:53,880 --> 00:04:59,700
Maybe headline text, OK, then we'll need to create a method that is responsible for outputting the

73
00:04:59,700 --> 00:05:00,520
HTML.

74
00:05:00,540 --> 00:05:04,440
Let's just name that method headline HTML.

75
00:05:04,440 --> 00:05:06,010
We can create that in just a moment.

76
00:05:06,540 --> 00:05:07,590
These settings look good.

77
00:05:07,590 --> 00:05:08,850
We don't need to change those.

78
00:05:09,030 --> 00:05:13,910
OK, let's look at this line register setting so the group for the setting would stay the same.

79
00:05:13,920 --> 00:05:17,880
We do want to change this to WCP headline.

80
00:05:18,660 --> 00:05:26,160
We can use the same generic sanitized text field, but why don't we give it a default value of post

81
00:05:26,460 --> 00:05:28,200
statistics?

82
00:05:29,130 --> 00:05:36,330
OK, now before we save this, let's create a method with this name headline HTML that actually outputs

83
00:05:36,330 --> 00:05:38,730
a bit of HTML for the form element.

84
00:05:39,180 --> 00:05:40,920
So Rapallo our settings function.

85
00:05:40,920 --> 00:05:46,710
I would just say function headline html parentheses curly brackets.

86
00:05:46,920 --> 00:05:52,530
I would drop out of here, go back, end up down here, right here.

87
00:05:52,530 --> 00:05:58,720
I would just want to output a little bit of HTML so you can type input in vs code and then hit tab.

88
00:05:59,370 --> 00:06:05,490
OK, let's be sure to give it a name of WCP underscore headline.

89
00:06:06,150 --> 00:06:10,230
And before we save this, let's just go ahead and pre populate the field.

90
00:06:10,830 --> 00:06:17,760
So if there's a previous value in the database, let's display that here so we can say value equals

91
00:06:18,390 --> 00:06:25,620
and then let's drop in to inside these quotes and let's just echo and then we can use that git option

92
00:06:25,620 --> 00:06:29,340
function again to load the value, get option.

93
00:06:29,910 --> 00:06:33,110
And we named it WCP headline.

94
00:06:34,020 --> 00:06:40,620
OK, and just for one extra layer of security, even though only admin users will be able to get to

95
00:06:40,620 --> 00:06:47,730
this page for best practices, we do want to escape our output any time we're taking a dynamic value

96
00:06:47,730 --> 00:06:49,580
and trying to put it into HTML.

97
00:06:49,590 --> 00:06:50,730
So here's what I would do.

98
00:06:50,940 --> 00:06:54,180
Just take this git option, cut that into your clipboard.

99
00:06:54,180 --> 00:07:03,030
We're just going to wrap it in a WordPress function called SC for escape, underscore ETR or for attribute.

100
00:07:03,780 --> 00:07:08,100
Call that function and then inside that, just paste back in your clipboard.

101
00:07:09,390 --> 00:07:17,910
Cool, but save this and test it out so you refresh your plugin settings, page headline text, lets

102
00:07:17,910 --> 00:07:26,430
enter something really custom here, maybe let's change it to word count info and click save.

103
00:07:27,240 --> 00:07:27,510
Cool.

104
00:07:27,510 --> 00:07:28,770
You can see the page reloaded.

105
00:07:28,770 --> 00:07:32,670
We get this confirmation and that value is sticking in that field.

106
00:07:32,670 --> 00:07:34,260
Even if you reload, it's still there.

107
00:07:34,500 --> 00:07:36,570
You can go look in the database if you want to.

108
00:07:37,140 --> 00:07:40,590
WCP headline with our value.

109
00:07:42,070 --> 00:07:47,230
So that field is now done, let's move on to the next field, so if we look at the finished product,

110
00:07:48,070 --> 00:07:51,760
that would be a checkbox for if you want to display the word count.

111
00:07:51,760 --> 00:07:55,900
And then the same thing for if you want to display character, count or read time.

112
00:07:56,350 --> 00:07:59,050
So three checkboxes, they're going to be identical.

113
00:07:59,050 --> 00:08:02,170
So let's just work through this one, the first one together.

114
00:08:02,620 --> 00:08:07,660
And then to avoid repetition, you can pause the video and I'll have you set up these next two on your

115
00:08:07,660 --> 00:08:07,930
own.

116
00:08:07,930 --> 00:08:11,160
But let's be sure to set up this first checkbox together.

117
00:08:11,710 --> 00:08:17,380
So back in our code within our settings function, let's just duplicate these two lines again.

118
00:08:18,770 --> 00:08:20,910
So this next one will be for the new field.

119
00:08:21,400 --> 00:08:26,710
Let's change the option name to maybe WCP word count.

120
00:08:26,740 --> 00:08:27,000
Right.

121
00:08:27,010 --> 00:08:32,050
And then it will be zero or one or true or false if you want to display it for the label.

122
00:08:32,050 --> 00:08:38,350
Let's just say word count for the HTML callback function.

123
00:08:38,350 --> 00:08:43,590
Let's just change this to word count HTML.

124
00:08:44,410 --> 00:08:46,500
The next two options can stay the same.

125
00:08:46,510 --> 00:08:47,680
Let's look at the next line.

126
00:08:49,090 --> 00:08:56,050
The group can stay the same, let's just change this to WCP word count, everything else can stay the

127
00:08:56,050 --> 00:08:58,030
same except for the default value.

128
00:08:58,040 --> 00:09:01,210
Let's give it a default value of one, right.

129
00:09:01,210 --> 00:09:04,960
By default, we want it to be true or we want that box to be checked.

130
00:09:04,970 --> 00:09:07,570
We probably do want to display the board count.

131
00:09:07,990 --> 00:09:15,400
OK, now let's just go create the HTML method so below our settings function, say function.

132
00:09:15,550 --> 00:09:16,360
Scroll down a little bit.

133
00:09:17,440 --> 00:09:23,800
Function word, count, html parentheses, curly brackets exit.

134
00:09:24,460 --> 00:09:32,400
Here, enter here inside, let's type input and then hit tab in vs code for the type.

135
00:09:32,410 --> 00:09:35,340
Let's change this to check box.

136
00:09:36,310 --> 00:09:39,940
OK, let's be sure to give this a name that matches the setting.

137
00:09:39,940 --> 00:09:44,410
So that's WCP underscore word count.

138
00:09:45,310 --> 00:09:51,510
Let's give it a value of one which is just a shorthand way of saying yes or true.

139
00:09:51,850 --> 00:09:57,220
OK, and then let's write a little bit of conditional code so that it looks at the existing database

140
00:09:57,220 --> 00:10:03,330
value when you reload this page and it will check this box or not check it depending on the database.

141
00:10:03,730 --> 00:10:10,060
So just like WordPress had that function called selected, it has a similar function called checked.

142
00:10:10,390 --> 00:10:13,210
So let's just enter and exit it here.

143
00:10:13,450 --> 00:10:17,680
Inside we can use the WordPress function called checked.

144
00:10:18,220 --> 00:10:19,630
You just give it to values.

145
00:10:19,630 --> 00:10:21,520
It's going to compare for the first value.

146
00:10:21,520 --> 00:10:29,530
Let's use the git option and our field or settings named WCP underscore word count.

147
00:10:30,280 --> 00:10:34,510
And for the second value to compare it against, let's just compare it to the value of one.

148
00:10:35,050 --> 00:10:37,460
OK, let's save this and test it out.

149
00:10:37,720 --> 00:10:41,260
So back in the browser, if we reload word count.

150
00:10:41,260 --> 00:10:43,540
Yes, we told it to be true by default.

151
00:10:44,140 --> 00:10:47,650
Let's uncheck it and then try to save perfect.

152
00:10:48,100 --> 00:10:52,330
We get confirmation and even if you reload, it remembers to stay unchecked.

153
00:10:52,720 --> 00:10:56,180
But if we test it out and check it, click save again.

154
00:10:56,200 --> 00:10:56,740
Perfect.

155
00:10:56,740 --> 00:10:58,150
It remembers that preference.

156
00:10:58,450 --> 00:10:59,980
We can go look in the database.

157
00:11:00,580 --> 00:11:05,770
There it is now at this point to avoid a super repetitive video.

158
00:11:06,100 --> 00:11:09,130
There is nothing new for the next two fields, right?

159
00:11:09,130 --> 00:11:15,280
If we look at the finished product, these two checkboxes are exactly the same as this checkbox.

160
00:11:15,550 --> 00:11:20,890
The only thing you would need to change is the variable names or the option names that you choose.

161
00:11:21,520 --> 00:11:28,300
So right now, I want you to pause the lesson video and everything that we just did for this word count

162
00:11:28,300 --> 00:11:29,680
field, this checkbox.

163
00:11:29,920 --> 00:11:36,010
I want you to do the same thing and just add these new fields called character count and read time.

164
00:11:36,700 --> 00:11:37,450
Welcome back.

165
00:11:37,450 --> 00:11:42,190
So if you're resuming the video, I'll assume that you've added the two other checkbox fields.

166
00:11:42,580 --> 00:11:49,300
I will talk for just a minute about how I added the next two checkboxes so you would want to register

167
00:11:49,300 --> 00:11:52,000
the new setting and add the setting field.

168
00:11:52,450 --> 00:11:59,200
However, when it comes to the HTML callback functions, yes, you could have just created two additional

169
00:11:59,200 --> 00:12:00,730
copies, right?

170
00:12:00,730 --> 00:12:04,780
Just literally copied and pasted the checkbox HTML function.

171
00:12:05,080 --> 00:12:11,560
However, it might have felt dirty to create three copies of essentially the exact same function because

172
00:12:11,560 --> 00:12:17,080
the only thing that's different here is the actual variable name for the option.

173
00:12:17,410 --> 00:12:21,400
So while you could have just duplicated the functions, here's what I did.

174
00:12:21,790 --> 00:12:30,430
I created a single reuseable function called checkbox HTML and I made sure that can receive an incoming

175
00:12:30,430 --> 00:12:31,120
parameter.

176
00:12:31,600 --> 00:12:34,660
We'll talk about what the incoming parameter is in just a moment.

177
00:12:34,660 --> 00:12:36,550
But here you can see it's an array.

178
00:12:36,550 --> 00:12:39,400
I'm looking inside the array for something called the name.

179
00:12:39,640 --> 00:12:45,820
I made up this property of the name, but essentially I hollowed out the only part of the function that

180
00:12:45,820 --> 00:12:46,480
is unique.

181
00:12:46,480 --> 00:12:46,840
Right.

182
00:12:46,840 --> 00:12:53,080
So the variable name and then over towards the right, the variable name again when we're checking it

183
00:12:53,080 --> 00:12:54,000
with git option.

184
00:12:54,430 --> 00:12:56,070
So this way the function is reusable.

185
00:12:56,290 --> 00:12:59,430
Now, let's talk a little bit about where this ARGs is coming from.

186
00:12:59,830 --> 00:13:06,880
So if we look at ad settings, field, whenever you use ad settings, field for the three checkboxes,

187
00:13:06,880 --> 00:13:12,160
if you scroll over to the right, this section used to be our final argument.

188
00:13:12,490 --> 00:13:17,410
I just added a comma and included one more argument, and it's an array.

189
00:13:18,160 --> 00:13:25,120
WordPress is expecting this to be an array and it's going to pass this in to your HTML callback function.

190
00:13:25,480 --> 00:13:30,400
Now, yes, there are specific property names that WordPress will know what to do with, but you can

191
00:13:30,400 --> 00:13:33,640
also just give it your own made up properties.

192
00:13:34,330 --> 00:13:41,560
So I just made up the name and then gave it a value for each one of these specific variable name.

193
00:13:41,980 --> 00:13:43,420
So that's just how I handled it.

194
00:13:43,660 --> 00:13:48,310
So you don't have to have these comments about, you know, three copies of the function, but it's

195
00:13:48,310 --> 00:13:50,370
totally up to you anyways.

196
00:13:50,380 --> 00:13:51,100
Let's move on.

197
00:13:51,110 --> 00:13:58,690
So the final thing that I want to cover in this video lesson has to do with custom validation logic.

198
00:13:59,170 --> 00:14:02,830
So let's take the display location field as an example.

199
00:14:02,830 --> 00:14:06,940
So, yes, we programmed the select to only have two options.

200
00:14:06,940 --> 00:14:07,210
Right.

201
00:14:07,450 --> 00:14:09,510
This first option has a value of zero.

202
00:14:09,790 --> 00:14:16,270
This option has a value of one now, even though only trusted admin users are going to get access to

203
00:14:16,270 --> 00:14:16,870
this page.

204
00:14:17,230 --> 00:14:24,700
What if one of them is weird and uses their chrome dev tools, so if I inspect that select right, there's

205
00:14:24,700 --> 00:14:31,270
the select element and what if I just click on this and change this to have a value of one hundred?

206
00:14:32,140 --> 00:14:32,320
Right.

207
00:14:32,430 --> 00:14:36,730
And then I go back and I make sure that I click beginning of post, click save.

208
00:14:37,090 --> 00:14:42,180
Well, if we look in the database, WCP location now has a value of one hundred.

209
00:14:42,550 --> 00:14:49,600
So this final topic of custom validation is what if we really want to make sure that this is only allowed

210
00:14:49,600 --> 00:14:52,090
to have a value of either zero or one?

211
00:14:52,330 --> 00:14:57,830
If you give it any other value, it should fail or it should just reset back to its previous value.

212
00:14:58,210 --> 00:15:03,330
So back in our code, we want to find the sanity's callback for that field.

213
00:15:03,370 --> 00:15:08,950
So here is the display location when we're actually using the register setting.

214
00:15:08,950 --> 00:15:16,060
Remember, the third argument is an array and one of the properties is sanitized callback.

215
00:15:16,060 --> 00:15:22,980
Now, up until now, we've just been using the WordPress provided generic sanitized text field function.

216
00:15:23,380 --> 00:15:29,330
So instead we can just point this towards one of our own functions and WordPress will use that instead.

217
00:15:29,860 --> 00:15:35,580
So let's get rid of the quotes in this sanitized text field and instead give it an array.

218
00:15:35,590 --> 00:15:41,360
Remember, this is the callable syntax when you want to have a reference to a method from your class.

219
00:15:41,710 --> 00:15:45,100
So the first argument is sign this comma.

220
00:15:45,370 --> 00:15:48,400
Second argument, we just get to make up our own method name.

221
00:15:48,730 --> 00:15:53,830
So quotes and let's make up a name of sanitize location.

222
00:15:54,820 --> 00:15:57,270
OK, now let's just go create a method with that name.

223
00:15:57,280 --> 00:15:59,290
So scroll down a little bit.

224
00:15:59,800 --> 00:16:06,610
Just below that function settings create a new function, sanitize location, parentheses, curly brackets.

225
00:16:06,610 --> 00:16:11,340
Now in the parentheses, we do want to receive a parameter let's call a dollar sign input.

226
00:16:11,920 --> 00:16:18,820
So when WordPress calls are sanitized function, it's going to pass into it the value that the user

227
00:16:18,820 --> 00:16:19,940
is trying to save.

228
00:16:20,440 --> 00:16:24,900
So now in this function, the first step doesn't have anything to do with WordPress.

229
00:16:25,270 --> 00:16:28,270
This is just basic programming logic.

230
00:16:28,270 --> 00:16:32,090
We just want to check to see, you know, whatever logic we're checking.

231
00:16:32,200 --> 00:16:39,910
So in this case, for this field, I want to check to see if the value is not zero and it's not one

232
00:16:40,270 --> 00:16:41,490
when we have a problem.

233
00:16:41,890 --> 00:16:43,780
So let's set up that conditional logic.

234
00:16:43,780 --> 00:16:52,360
I'll say if parentheses curly brackets for the condition, if input does not equal, so exclamation

235
00:16:52,360 --> 00:17:02,620
equal, if it does not equal zero and if input does not equal one, if that's the case, then in this

236
00:17:02,620 --> 00:17:05,020
if body, I want to do two things.

237
00:17:05,020 --> 00:17:08,860
I want to add a red error message up here.

238
00:17:09,190 --> 00:17:13,660
And then number two, I also want to return the old value.

239
00:17:14,020 --> 00:17:18,520
So not with the user, just input, but the previous value that was stored in the database.

240
00:17:19,250 --> 00:17:24,780
So ultimately this function needs to return something that is going to get saved into the database.

241
00:17:24,790 --> 00:17:26,620
So let's start out with the error.

242
00:17:26,620 --> 00:17:34,840
So we'd say add settings, error, semicolon, and we're going to give this three arguments.

243
00:17:35,680 --> 00:17:39,960
The first argument is the name of the option that the error is related to.

244
00:17:39,970 --> 00:17:43,210
So this would be WCP underscore location.

245
00:17:43,750 --> 00:17:49,120
The second argument is sort of a slug or identifier for this particular error.

246
00:17:49,420 --> 00:17:56,380
Essentially, WordPress will add into our HTML ID equals and then whatever name we give it here so you

247
00:17:56,380 --> 00:17:57,490
can make up a name.

248
00:17:57,800 --> 00:18:03,490
I'll just say WCP location underscore error, but any name would do.

249
00:18:03,880 --> 00:18:09,190
And then the final argument, this is the actual message that you want to display to the user.

250
00:18:09,190 --> 00:18:19,300
So let's say display location must be either beginning or end, OK, after that line, but still within

251
00:18:19,300 --> 00:18:20,500
the if block.

252
00:18:21,130 --> 00:18:24,330
We now want to return the old value from the database.

253
00:18:24,340 --> 00:18:24,550
Right.

254
00:18:24,550 --> 00:18:29,550
We definitely don't want to return whatever incorrect value the user tried to submit.

255
00:18:29,560 --> 00:18:33,070
So let's return and then just use git option.

256
00:18:33,520 --> 00:18:38,260
So McCallan, the one we're looking for is WCP underscore location.

257
00:18:38,740 --> 00:18:45,220
OK, now if this is not the case, meaning if the user did enter a value that is correct or that we

258
00:18:45,220 --> 00:18:51,910
want to allow, then just below the if so, right here we can just return dollar sign input, write

259
00:18:51,910 --> 00:18:53,320
whatever they tried to send along.

260
00:18:53,800 --> 00:18:56,360
Let's go ahead and save this and test it out.

261
00:18:56,980 --> 00:19:00,640
So if I refresh, if I choose one of the normal values, it should work.

262
00:19:00,640 --> 00:19:01,350
No problem.

263
00:19:01,360 --> 00:19:01,750
Cool.

264
00:19:01,750 --> 00:19:09,790
But if I refresh and if I use my dev tools and I try to set the value of this first option to five hundred

265
00:19:10,450 --> 00:19:16,690
and then select that and save perfect, we see this red error message and the.

266
00:19:16,770 --> 00:19:22,860
Save did not go through, so if you look in the database, it still has that previous value of one,

267
00:19:23,310 --> 00:19:23,570
right?

268
00:19:23,580 --> 00:19:24,590
Not five hundred.

269
00:19:24,960 --> 00:19:25,460
All right.

270
00:19:25,470 --> 00:19:29,880
And that is going to bring this lesson to a close in our next lesson.

271
00:19:30,120 --> 00:19:37,050
Now that our form is complete, now that we're saving the user's preferences, it's time to actually

272
00:19:37,050 --> 00:19:38,730
build the plug in itself.

273
00:19:38,940 --> 00:19:39,200
Right.

274
00:19:39,230 --> 00:19:45,570
So if we look at the finished product, it's time to actually write the code that assembles the text

275
00:19:45,570 --> 00:19:48,950
that gets added in to a blog post detail screen.

276
00:19:49,300 --> 00:19:53,670
It should be fun to sort of connect the dots and get our plug in truly up and running.

277
00:19:54,020 --> 00:19:58,200
So let's keep our momentum rolling and I will see you in the next lesson.
