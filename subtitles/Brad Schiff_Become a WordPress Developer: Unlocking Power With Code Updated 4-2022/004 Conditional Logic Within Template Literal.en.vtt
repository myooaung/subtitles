WEBVTT
1
00:00:01.960 --> 00:00:02.920
Hello, everyone.

2
00:00:03.340 --> 00:00:09.730
In this lesson, we will answer the question, what if a search has zero results?

3
00:00:10.240 --> 00:00:16.150
So, for example, if I searched for just a random gibberish phrase that I know won't have any matching

4
00:00:16.150 --> 00:00:18.700
content, here's our heading level two.

5
00:00:18.700 --> 00:00:22.620
But as expected, we don't see any actual content down here.

6
00:00:22.960 --> 00:00:28.960
However, instead of just an empty area, we'd probably want to take it one step further and output

7
00:00:28.960 --> 00:00:34.230
a bit of text that reads no general information matches that search.

8
00:00:34.630 --> 00:00:39.320
So without further ado, let's dive into the action and learn how to accomplish that.

9
00:00:39.550 --> 00:00:47.440
So over in our text, Ed, let's jump in to the JavaScript modules folder and open search J.S. and let's

10
00:00:47.440 --> 00:00:50.920
scroll down to our method named Get Results.

11
00:00:51.790 --> 00:00:52.450
Here it is.

12
00:00:53.080 --> 00:00:59.110
So this is the template literal that we wrote in our previous lesson to generate the resulting HTML.

13
00:00:59.560 --> 00:01:05.350
Now, as we can already see back in the browser, if there are no results, then no list items will

14
00:01:05.350 --> 00:01:06.160
be generated.

15
00:01:06.790 --> 00:01:13.300
So we don't even need to wrap this line in any conditional logic, because if our posts parameter is

16
00:01:13.300 --> 00:01:18.150
empty, remember, any incoming JSON data will live inside this parameter.

17
00:01:18.370 --> 00:01:24.220
If this is empty, then obviously the map method won't have any items inside the array to loop through.

18
00:01:24.520 --> 00:01:27.520
So we don't need to worry about this line of code.

19
00:01:27.760 --> 00:01:32.650
Let's shift our focus to this opening will unordered list tag.

20
00:01:33.040 --> 00:01:39.460
Let's try to write a bit of conditional logic code so that if there are indeed results, we can output

21
00:01:39.490 --> 00:01:40.270
this code.

22
00:01:40.570 --> 00:01:47.920
But if there are no results, then not only will we not output this, but instead we can output a paragraph

23
00:01:47.920 --> 00:01:52.370
tag that reads no general information matches that search.

24
00:01:52.660 --> 00:01:59.620
So if we want to set up a bit of conditional logic, our first instinct might be to use an if statement.

25
00:01:59.800 --> 00:02:06.120
However, in JavaScript you are not allowed to use if statements within a template literal.

26
00:02:06.460 --> 00:02:11.530
Remember, a template literal is created by these Bachtiar symbols here and here.

27
00:02:11.920 --> 00:02:17.740
And we did this so that we could break our code up into multiple lines and also so we can easily mix

28
00:02:17.740 --> 00:02:22.720
and match and switch back and forth between plain text and expressions.

29
00:02:23.170 --> 00:02:25.300
OK, but back to the topic at hand.

30
00:02:25.570 --> 00:02:30.790
If we are not allowed to use an if statement within a template literal, what can we do?

31
00:02:31.180 --> 00:02:39.280
Well, luckily there's a tool in JavaScript named the ternary operator that we can use within a template

32
00:02:39.280 --> 00:02:39.770
literal.

33
00:02:40.120 --> 00:02:40.930
So check this out.

34
00:02:40.930 --> 00:02:45.820
Let's select this opening up line and let's cut this into our clipboard.

35
00:02:47.570 --> 00:02:54.560
And in its place on that line, let's write our first ternary operator now, because we are currently

36
00:02:54.560 --> 00:02:58.340
within a template literal, we want to begin by creating an expression.

37
00:02:58.590 --> 00:03:01.770
So to do that, remember its dollar sign curly brackets.

38
00:03:02.090 --> 00:03:05.570
Now, in some text editors, you need to be careful because watch this.

39
00:03:05.570 --> 00:03:09.620
If I type in the dollar symbol and then try to enter a curly bracket.

40
00:03:10.580 --> 00:03:16.100
Notice how I got an opening curly bracket here, but my text editor automatically tried to insert a

41
00:03:16.100 --> 00:03:21.290
bogus closing curly bracket right here, two lines below where my cursor was.

42
00:03:21.710 --> 00:03:23.060
Now, that's not what I wanted.

43
00:03:23.060 --> 00:03:27.740
And I wanted to point that out to you because if you're not really paying attention, you might miss

44
00:03:27.740 --> 00:03:33.140
the fact that your text editor does this and then hunting down this error can be very frustrating.

45
00:03:33.260 --> 00:03:38.360
So I'm going to delete this closing curly bracket down here and say, no, thank you, text editor.

46
00:03:38.360 --> 00:03:39.410
I do not want that.

47
00:03:42.340 --> 00:03:47.140
OK, and then back up on this line that I was trying to right now, I can just add in the closing curly

48
00:03:47.140 --> 00:03:50.470
bracket manually, OK, so not everything's back to normal.

49
00:03:50.710 --> 00:03:52.570
We've got this new empty expression.

50
00:03:52.780 --> 00:03:55.620
And now let's write our first ternary operator.

51
00:03:55.930 --> 00:04:00.160
So first, the question is, what is a ternary operator for now?

52
00:04:00.160 --> 00:04:04.900
Just think of it as a shorthand or shortcut way of writing an if statement.

53
00:04:05.170 --> 00:04:05.440
Right.

54
00:04:05.450 --> 00:04:09.830
It's a very short and compact way of setting up conditional logic.

55
00:04:10.210 --> 00:04:15.700
So first we spell out a condition that we will check to see if it evaluates to true or false, just

56
00:04:15.700 --> 00:04:17.880
like we would with a traditional if statement.

57
00:04:18.220 --> 00:04:19.450
This isn't the real code.

58
00:04:19.450 --> 00:04:21.490
I'm just typing this out as an example.

59
00:04:21.790 --> 00:04:27.310
OK, but right after your condition, then you add in a question mark and then after that you write

60
00:04:27.310 --> 00:04:28.900
out whatever code you want to run.

61
00:04:29.200 --> 00:04:31.270
If this evaluates to true.

62
00:04:31.960 --> 00:04:38.020
And then right after that you add a colon, not a semicolon, but a colon, and then you just write

63
00:04:38.020 --> 00:04:41.770
out whatever code you want to run if this evaluates to false.

64
00:04:42.190 --> 00:04:44.230
So it's very similar to an if statement.

65
00:04:44.230 --> 00:04:44.470
Right.

66
00:04:44.470 --> 00:04:50.370
We're saying if this condition is true, do this or else otherwise do this.

67
00:04:50.650 --> 00:04:53.590
So for now, the question is what should our condition be?

68
00:04:53.980 --> 00:04:59.750
Well, why don't we just check to see if the incoming JSON data has any items in the array?

69
00:05:00.130 --> 00:05:01.370
Let me show you what I mean.

70
00:05:01.570 --> 00:05:07.170
So back in the Web browser, if I open up a WordPress rest API neutral like this.

71
00:05:07.420 --> 00:05:15.160
So here's the root of my URL and then if I add on WP, JSON, WP, V, two posts and then if I search

72
00:05:15.160 --> 00:05:18.570
for just random gibberish that won't have any results.

73
00:05:19.120 --> 00:05:25.960
Notice that WordPress only responds with a completely empty array, whereas on the other hand, if the

74
00:05:25.960 --> 00:05:30.090
search actually did have results, we'd see a bunch of JSON data here.

75
00:05:30.820 --> 00:05:37.990
So back in our code, all we need to do for the condition is just say remember our parameter name posts

76
00:05:37.990 --> 00:05:41.980
that will contain any JSON data that WordPress responds with.

77
00:05:42.250 --> 00:05:50.170
And then in JavaScript, every array has a property named length and length will tell you how many items

78
00:05:50.170 --> 00:05:51.640
live inside the array.

79
00:05:51.970 --> 00:05:58.480
So if this is zero, if there are no items in the array, well, the number zero always evaluates to

80
00:05:58.480 --> 00:05:59.170
false.

81
00:05:59.620 --> 00:06:05.680
And in just about every programming language in the world, any number larger than zero evaluates to

82
00:06:05.680 --> 00:06:06.170
true.

83
00:06:06.610 --> 00:06:08.800
So this is all we need for the condition check.

84
00:06:08.830 --> 00:06:12.890
Now, let's just spell out what we want to do, if it's true or if it's false.

85
00:06:13.420 --> 00:06:16.210
So if the condition is true, let's delete the placeholder.

86
00:06:16.210 --> 00:06:16.810
Yay!

87
00:06:17.350 --> 00:06:20.410
And instead let's just output a pair of single quotes.

88
00:06:20.410 --> 00:06:26.920
And within the quotes we can just paste in our clipboard, write, we want to output that opening unordered

89
00:06:26.920 --> 00:06:27.780
list tag.

90
00:06:28.180 --> 00:06:34.930
However, if our condition is false, let's delete this placeholder name and open up a pair of single

91
00:06:34.930 --> 00:06:45.500
quotes and let's just output an HTML paragraph that reads No general information matches that search.

92
00:06:46.630 --> 00:06:52.360
OK, now before we save this, let's deal with the closing unordered list tag.

93
00:06:53.580 --> 00:06:56.920
So down here, let's just delete this line and sort of do the same thing.

94
00:06:57.180 --> 00:07:03.180
So let's open up an expression within our overall template, literal, and let's set up another quick

95
00:07:03.180 --> 00:07:04.470
ternary operator.

96
00:07:04.470 --> 00:07:04.740
Right.

97
00:07:04.740 --> 00:07:06.110
A bit of conditional logic.

98
00:07:06.390 --> 00:07:13.380
So for the condition, we'll say if our posts array has a length of greater than zero, if that's the

99
00:07:13.380 --> 00:07:16.620
case, do something, otherwise do something else.

100
00:07:16.860 --> 00:07:22.370
So if that's true, let's just output a closing unordered list.

101
00:07:22.890 --> 00:07:26.080
But if it's not true, let's just output nothing.

102
00:07:26.130 --> 00:07:28.350
So just an empty pair of quotations.

103
00:07:28.950 --> 00:07:31.890
OK, so let's give this a save and test it out.

104
00:07:33.730 --> 00:07:39.320
So if I search for lorem, as in lorem ipsum, I know that should have plenty of results.

105
00:07:40.000 --> 00:07:40.480
Perfect.

106
00:07:40.510 --> 00:07:41.170
Here they are.

107
00:07:41.180 --> 00:07:47.350
But if I search for something that doesn't make any sense, we see no general information matches that

108
00:07:47.350 --> 00:07:49.020
search perfect.

109
00:07:49.030 --> 00:07:53.330
And at this point, that means we've answered the main question for this lesson.

110
00:07:53.650 --> 00:07:56.270
What if a search has zero results?

111
00:07:56.800 --> 00:08:02.890
Now let's spend the remainder of this lesson making a few miscellaneous improvements to our search.

112
00:08:03.370 --> 00:08:08.440
So, for example, the first thing that I want to fix is you'll notice that if I try to perform another

113
00:08:08.440 --> 00:08:15.820
search after I've already performed, one noticed that the loader spinner icon does not immediately

114
00:08:15.820 --> 00:08:16.620
reappear.

115
00:08:16.930 --> 00:08:21.610
We would expect it to appear the millisecond I push a new key for a new search.

116
00:08:22.330 --> 00:08:28.570
So to fix this issue, all we need to do is back in our JavaScript right after this section of code

117
00:08:28.570 --> 00:08:32.970
where we are using the HTML method to modify the results div.

118
00:08:33.280 --> 00:08:37.200
So right after the back tick and then the parentheses in the semicolon.

119
00:08:37.660 --> 00:08:42.400
But notice my cursor is still within the Jason method right here.

120
00:08:42.410 --> 00:08:48.460
Let's just set the is Spiner visible property to false.

121
00:08:48.940 --> 00:08:53.850
Right, because as soon as this code runs that will replace or hide the Spiner.

122
00:08:54.280 --> 00:08:59.530
So let's save this and give it a try by search for Lorem.

123
00:09:02.250 --> 00:09:08.970
Here's the results, but now the millisecond I start searching for something else, we see the loader

124
00:09:08.970 --> 00:09:09.890
spinner icon.

125
00:09:09.960 --> 00:09:10.640
Perfect.

126
00:09:11.220 --> 00:09:12.810
All right, changing gears.

127
00:09:12.840 --> 00:09:19.740
The next thing I want to work on is making sure that the rest epicentral that we are using to actually

128
00:09:19.740 --> 00:09:20.780
perform the search.

129
00:09:21.180 --> 00:09:25.660
I want to make sure that this Eurail is relative instead of absolute.

130
00:09:26.100 --> 00:09:27.390
Now, what do I mean by that?

131
00:09:27.660 --> 00:09:34.260
Well, this you, Earl, is only going to work if I'm using my local prevue proxy server that begins

132
00:09:34.260 --> 00:09:36.440
with localhost three thousand.

133
00:09:36.900 --> 00:09:42.450
What if instead I was using my DEVE domain of fictional university dev?

134
00:09:42.840 --> 00:09:48.990
Or better yet, what will happen when I try to deploy these files to a real live server with a real

135
00:09:48.990 --> 00:09:49.800
dot com?

136
00:09:50.160 --> 00:09:55.350
Well, the answer is that this uttara will fail miserably, right, because this Uttara won't really

137
00:09:55.350 --> 00:09:57.090
exist in that context.

138
00:09:57.330 --> 00:10:04.470
So the question becomes, how can we make the beginning part of this URL flexible so that it works regardless

139
00:10:04.470 --> 00:10:10.890
of the current environment or so that it works if we want to distribute this theme to many, many websites

140
00:10:10.890 --> 00:10:11.680
and users.

141
00:10:11.970 --> 00:10:18.990
Now, your first instinct might be to just delete the beginning http route, part of the euro like this,

142
00:10:18.990 --> 00:10:22.130
just beginning with the forward slash of what you want to add on.

143
00:10:22.350 --> 00:10:26.670
And this will indeed work for certain situations and certain websites.

144
00:10:27.060 --> 00:10:32.550
However, not all WordPress installations are located at the root of a domain.

145
00:10:32.910 --> 00:10:37.330
So this is not very flexible and it won't work for everyone in every situation.

146
00:10:37.650 --> 00:10:39.990
So instead, let me show you what I recommend.

147
00:10:40.290 --> 00:10:45.870
So right now within our theme folder, let's jump into the file named functions

148
00:10:48.450 --> 00:10:52.800
and let's scroll down to our function named university files.

149
00:10:53.250 --> 00:10:58.710
Remember, this is the function where we load CSC in JavaScript files within WordPress.

150
00:10:59.080 --> 00:11:02.630
And right now I just want to add a new line to this function.

151
00:11:02.880 --> 00:11:06.070
Let's add the new line down towards the bottom of this function.

152
00:11:06.570 --> 00:11:13.080
So just for visual separation down here and also because I want to be able to reference the nickname

153
00:11:13.080 --> 00:11:14.870
of our main JavaScript file.

154
00:11:15.180 --> 00:11:18.650
So I want the new line of code to come after all of that right about here.

155
00:11:19.080 --> 00:11:24.430
But notice, I'm still within the overall university files function that doesn't end until right here.

156
00:11:25.350 --> 00:11:29.040
So right where my cursor is down here, let's say let me scroll down a bit.

157
00:11:29.160 --> 00:11:37.280
Let's say WP underscore, localize, underscore script.

158
00:11:38.220 --> 00:11:45.210
So this is a WordPress function that will let us output a little bit of JavaScript data into the source,

159
00:11:45.210 --> 00:11:49.350
the HTML source of the Web page within the parentheses.

160
00:11:49.380 --> 00:11:52.340
This function takes three arguments.

161
00:11:52.740 --> 00:11:56.130
So just as a placeholder, let's say one, two, three.

162
00:11:56.470 --> 00:11:58.030
OK, now let's review each one.

163
00:11:58.050 --> 00:12:05.490
So for the first argument, we want to include the name or handle of our main JavaScript file, or I

164
00:12:05.490 --> 00:12:09.210
should say the JavaScript file that you are trying to make flexible.

165
00:12:09.600 --> 00:12:14.070
So the name or handle of the file is Main Dasch University.

166
00:12:14.350 --> 00:12:17.280
James, your name might be slightly different.

167
00:12:17.280 --> 00:12:18.260
The name doesn't matter.

168
00:12:18.270 --> 00:12:19.860
We just want the name to match.

169
00:12:20.070 --> 00:12:25.290
So down here within localized script for the first argument, let's type in a matching name.

170
00:12:25.290 --> 00:12:28.700
So main university jass.

171
00:12:29.310 --> 00:12:29.940
All right.

172
00:12:29.940 --> 00:12:31.620
Now for the second argument.

173
00:12:31.860 --> 00:12:34.490
We just want to make up a variable name.

174
00:12:34.860 --> 00:12:36.150
The name does not matter.

175
00:12:36.160 --> 00:12:40.930
So I'm just going to call it maybe university data.

176
00:12:40.950 --> 00:12:42.360
Again, the name does not matter.

177
00:12:42.360 --> 00:12:43.530
Just make up a name.

178
00:12:43.830 --> 00:12:50.280
And then for the third argument, we just create an array of data that we want to be available in JavaScript.

179
00:12:50.670 --> 00:12:59.310
So let's say array and remember and you include parentheses right after the word array to actually create

180
00:12:59.310 --> 00:12:59.730
one.

181
00:13:00.120 --> 00:13:03.780
And then we just spell out what data we want to live in this array.

182
00:13:04.230 --> 00:13:09.540
So I like to drop down to a new line in between the parentheses of array just to stay organized.

183
00:13:11.910 --> 00:13:15.050
And now let's just build an associative array.

184
00:13:15.450 --> 00:13:25.680
Now, just to refresh your memory, an example of an associative array would be cat equals MÃ, right.

185
00:13:25.680 --> 00:13:30.360
And then you could have a comma and another property dog equals Barch.

186
00:13:31.170 --> 00:13:33.140
But obviously that's not what we really want.

187
00:13:33.750 --> 00:13:36.120
Now back to the actual task at hand.

188
00:13:36.390 --> 00:13:38.070
Back in our search JS file.

189
00:13:38.220 --> 00:13:44.630
Remember, our goal is that we want to make the first part of the Ural flexible so back and functions.

190
00:13:45.510 --> 00:13:50.040
What I'm going to do within this array is first you get to make up a property name.

191
00:13:50.040 --> 00:13:56.760
Could be whatever you want, but I'm going to call it route underscore URL and then I'm going to set

192
00:13:56.760 --> 00:14:01.320
that to equal the results of a WordPress function named Git.

193
00:14:02.010 --> 00:14:09.660
Site you around this function will return the euro for the current WordPress installation, and before

194
00:14:09.660 --> 00:14:14.850
we save this file, let's be sure to add a semicolon after these two closing parentheses right here.

195
00:14:14.850 --> 00:14:17.980
Just include semicolon and let's save the file.

196
00:14:19.020 --> 00:14:24.720
So now we can test it out by going into our Web page and refreshing.

197
00:14:25.110 --> 00:14:29.090
And then let's view the HTML source for this page.

198
00:14:29.130 --> 00:14:30.600
So in Chrome, you can just right.

199
00:14:30.600 --> 00:14:33.240
Click and choose view page source.

200
00:14:34.620 --> 00:14:40.890
And if we scroll down all the way to the bottom here, we see a little bit of JavaScript that WordPress

201
00:14:40.890 --> 00:14:42.390
is outputting for us.

202
00:14:42.840 --> 00:14:50.280
So you can see WordPress created a variable named university data and it's an object and it has a property

203
00:14:50.280 --> 00:14:54.830
named Route You URL with a value of exactly what we would expect.

204
00:14:55.140 --> 00:15:00.440
Now, in about 20 seconds from now, we will learn how to use this value in our JavaScript.

205
00:15:00.450 --> 00:15:05.790
But first, I want to show you how useful this object is, because you can really build that out to

206
00:15:05.790 --> 00:15:08.270
contain as many properties as you want.

207
00:15:08.820 --> 00:15:12.660
So back and functions right after this route.

208
00:15:12.660 --> 00:15:18.390
You, Earline, we could add a comma and then since it's an array, we could just create as many other

209
00:15:18.390 --> 00:15:19.770
properties as we want.

210
00:15:19.950 --> 00:15:27.290
So we could say sky equals blue and grass equals green.

211
00:15:27.930 --> 00:15:34.020
And if I save that and then refresh the view source, you can see we still have this one convenient

212
00:15:34.020 --> 00:15:39.900
object or variable university data and the different properties just get added on to that object.

213
00:15:40.170 --> 00:15:42.060
Sky blue, grass green.

214
00:15:42.390 --> 00:15:46.320
OK, so this is a very, very useful function that we've got here now.

215
00:15:46.320 --> 00:15:50.040
We don't actually need the skya grass, so let's delete that.

216
00:15:50.370 --> 00:15:57.090
And now let's jump back to our JavaScript file search J.S. and all we need to do to make our Eurail

217
00:15:57.090 --> 00:16:02.890
flexible now is delete this hardcoded beginning root part of the URL.

218
00:16:03.450 --> 00:16:09.750
So now we've got a string that begins with slash WP, JSON and right before this, right before the

219
00:16:09.750 --> 00:16:19.110
quotes, even, let's just say university data, because this is the name of that variable in our view,

220
00:16:19.110 --> 00:16:19.740
source.

221
00:16:19.740 --> 00:16:20.130
Right.

222
00:16:20.520 --> 00:16:24.450
VAR University data and then it's an object.

223
00:16:24.450 --> 00:16:31.380
So to look inside it we can just say dot route you URL and that will give us this flexible, neutral

224
00:16:31.380 --> 00:16:31.840
value.

225
00:16:32.700 --> 00:16:41.460
So back in the JavaScript University data dot route, you URL and then let's just say plus and then

226
00:16:41.460 --> 00:16:43.350
the rest of our you URL string here.

227
00:16:43.620 --> 00:16:51.630
OK, so if I go ahead and save this and then back in the browser, if I refresh my fictional university

228
00:16:51.630 --> 00:16:58.320
dot dev website and now if I try to perform a search, perfect.

229
00:16:58.470 --> 00:17:01.390
We've successfully made that URL relative.

230
00:17:01.620 --> 00:17:07.290
So now our code will work on a live public server or we can even share this theme with others.

231
00:17:07.740 --> 00:17:10.580
And that's going to bring this lesson to a close.

232
00:17:10.890 --> 00:17:14.040
Our next lesson is going to be super short and quick.

233
00:17:14.310 --> 00:17:19.020
We're just going to make a few minor user experience improvements to our search overlay.

234
00:17:19.530 --> 00:17:25.110
But looking ahead, beyond that, you might be wondering, how can we search for content that isn't

235
00:17:25.110 --> 00:17:26.410
a post, right?

236
00:17:26.430 --> 00:17:28.830
How can we search for other post types?

237
00:17:29.310 --> 00:17:34.810
So instead of posts, what about pages or professors or campuses or events?

238
00:17:35.160 --> 00:17:40.160
Well, that's exactly what we're going to learn how to do right after our next really quick lesson.

239
00:17:40.500 --> 00:17:42.750
Let's keep it rolling and I will see you then.
