WEBVTT
1
00:00:02.300 --> 00:00:03.210
Hello, everyone.

2
00:00:03.560 --> 00:00:08.580
In this lesson, we're going to set up the correct answer feature for our block type.

3
00:00:09.110 --> 00:00:09.990
Let me explain.

4
00:00:10.010 --> 00:00:13.490
So right now, there's a star next to each answer.

5
00:00:13.490 --> 00:00:19.560
And the whole point of this is you click on one to mark or designated as the correct answer.

6
00:00:19.970 --> 00:00:24.170
I think the correct answer should have its star filled in with a solid color.

7
00:00:24.380 --> 00:00:29.150
And then also, we obviously need to keep track of the correct answer for when we build out the front

8
00:00:29.150 --> 00:00:34.500
end version of this block, right where the user can see a sorry, that's the wrong answer message or

9
00:00:34.820 --> 00:00:35.440
congrats.

10
00:00:35.450 --> 00:00:36.680
That's the correct answer.

11
00:00:37.160 --> 00:00:38.910
So how do we start building this feature?

12
00:00:39.260 --> 00:00:45.380
Well, let's just give ourselves a new attribute that points towards the correct index or item in our

13
00:00:45.380 --> 00:00:45.890
array.

14
00:00:46.520 --> 00:00:53.420
So back in our text editor, up towards the top of our index, not just file within our attributes object.

15
00:00:53.420 --> 00:00:54.770
Let's just add a comma here.

16
00:00:55.040 --> 00:00:57.350
Make up a new property or attribute name.

17
00:00:57.950 --> 00:01:03.270
I'll call it correct answer, call and give it an object.

18
00:01:03.290 --> 00:01:06.100
Let's say that it should be a type of number.

19
00:01:06.410 --> 00:01:06.620
Right.

20
00:01:06.660 --> 00:01:10.130
It's just going to be the index of the correct answer in the array.

21
00:01:10.520 --> 00:01:13.850
So if Red was the correct answer, this would have a value of zero.

22
00:01:13.850 --> 00:01:15.950
If it was blue, it would have a value of one.

23
00:01:16.550 --> 00:01:23.480
While we're up here, let's give this another property of default and set it to undefined.

24
00:01:23.990 --> 00:01:28.100
A bit later in the lesson, we'll discuss why I'm setting this to undefined.

25
00:01:28.100 --> 00:01:33.980
But for now, I'll just say that if the correct answer was the first item, then this would have a value

26
00:01:33.980 --> 00:01:34.810
of zero.

27
00:01:35.600 --> 00:01:40.980
And as you can imagine, the true or false nature of zero, it gets interpreted as false.

28
00:01:41.540 --> 00:01:46.610
So when I'm trying to check to see if the user has set an answer or not, you can see how there would

29
00:01:46.610 --> 00:01:47.940
be room for confusion.

30
00:01:47.960 --> 00:01:52.880
So by being able to check against the value of undefined, it's just going to make our code a bit easier

31
00:01:52.880 --> 00:01:54.650
to work with, in my opinion.

32
00:01:54.980 --> 00:01:59.270
Anyways, let's go down into our JSM and use this attribute.

33
00:01:59.690 --> 00:02:04.340
So let's find the map code that's looping through all of our answers.

34
00:02:05.060 --> 00:02:07.960
And we're looking for the button with the star icon.

35
00:02:07.970 --> 00:02:10.720
Here it is on the opening button tag.

36
00:02:10.730 --> 00:02:15.440
Let's give it an on click prop equals curly brackets.

37
00:02:15.450 --> 00:02:20.510
And now, just like we did with the delete button, we gave it an Essex arrow function.

38
00:02:20.780 --> 00:02:22.700
And then that just calls a function.

39
00:02:22.700 --> 00:02:25.670
And most importantly, we can pass an argument into it.

40
00:02:26.120 --> 00:02:32.100
So index points towards the correct item in the array and we're just handing that off to delete answer.

41
00:02:32.270 --> 00:02:33.800
Let's do the same thing here.

42
00:02:33.830 --> 00:02:38.940
Only will create a function maybe called Mark as correct instead of delete answer.

43
00:02:39.650 --> 00:02:49.940
So in these curly brackets we'll just have parentheses, arrow symbol, let's say Mark as correct parentheses

44
00:02:49.940 --> 00:02:52.970
to call it, and we'll just pass into it index.

45
00:02:53.450 --> 00:02:57.070
OK, then let's just go create a function with this name Mark as correct.

46
00:02:57.080 --> 00:03:04.520
So if we scroll up maybe right below our delete answer function, we can have function mark as correct

47
00:03:04.520 --> 00:03:06.200
parentheses, curly brackets.

48
00:03:06.240 --> 00:03:07.580
I spelled that wrong.

49
00:03:07.610 --> 00:03:08.120
There we go.

50
00:03:08.780 --> 00:03:11.840
Let's have a parameter to receive that incoming index.

51
00:03:12.440 --> 00:03:16.940
We can just call it index or whatever name you want to use inside the body.

52
00:03:16.940 --> 00:03:24.200
We would just say props, dot set attributes, give it an object and we would just set correct answer

53
00:03:24.200 --> 00:03:26.900
to be whatever was passed into the function.

54
00:03:27.620 --> 00:03:33.170
Before we save this and test it out, let's add one more detail that will make it obvious if things

55
00:03:33.170 --> 00:03:34.560
are working correctly or not.

56
00:03:35.420 --> 00:03:42.440
So what I want to do is make the class for the star icon dynamic, meaning if the current item is the

57
00:03:42.440 --> 00:03:44.960
correct answer, the star should be filled in.

58
00:03:45.500 --> 00:03:47.330
If it's not, it can remain empty.

59
00:03:47.660 --> 00:03:48.920
So here's how we can do that.

60
00:03:49.400 --> 00:03:51.530
Let's find that star icon again.

61
00:03:52.070 --> 00:03:56.090
And right now it has an icon value of star empty.

62
00:03:56.600 --> 00:03:58.820
So this is a WordPress icon value.

63
00:03:58.940 --> 00:04:03.860
If you changed this to star dash filled, well, it would have a solid color.

64
00:04:04.250 --> 00:04:08.450
So let's just make this dynamic depending on the value of the correct answer.

65
00:04:09.170 --> 00:04:15.170
So let's change this icon equals curly brackets to do something dynamic.

66
00:04:15.470 --> 00:04:19.580
And now in JSM right here, we can't have an if statement.

67
00:04:19.610 --> 00:04:24.800
So statements are not allowed, only expressions or another way of phrasing.

68
00:04:24.800 --> 00:04:28.190
That is, it needs to be something that boils down to a value.

69
00:04:28.310 --> 00:04:28.670
Right.

70
00:04:28.820 --> 00:04:33.260
And an if statement or an else statement doesn't boil down to a value.

71
00:04:33.260 --> 00:04:35.150
It just controls the flow of code.

72
00:04:35.600 --> 00:04:42.920
So what we can do instead is use a ternary operator, which is very similar to an if else statement,

73
00:04:43.100 --> 00:04:45.200
but it boils down to a value.

74
00:04:45.680 --> 00:04:49.640
So to write a ternary operator, you just start with a condition that you're checking.

75
00:04:50.030 --> 00:04:54.830
So let's compare the correct answer to the index of the current item.

76
00:04:54.830 --> 00:05:01.760
So we'll say props dot attributes dot correct answer double equals sign to check.

77
00:05:01.790 --> 00:05:04.850
For equality or comparing that against index.

78
00:05:05.240 --> 00:05:09.400
Now, if that's a match, that means the current item is the correct item.

79
00:05:10.130 --> 00:05:15.560
So in a ternary operator, you then say questionmark and you include what you want to happen, if that's

80
00:05:15.560 --> 00:05:16.110
true.

81
00:05:16.160 --> 00:05:20.360
So we would say quotes star Dasch filled after that.

82
00:05:20.360 --> 00:05:25.160
You say colon and then what you want to output if your condition was not true.

83
00:05:25.190 --> 00:05:28.210
So that would be quotes star Dasch empty.

84
00:05:29.150 --> 00:05:31.560
Let's give this a save and go test it out.

85
00:05:31.760 --> 00:05:38.450
So if we refresh and I set blue to be the correct answer, perfect.

86
00:05:38.450 --> 00:05:42.690
You can see that icon stays lit up or it's a solid color if I change it to purple.

87
00:05:43.370 --> 00:05:44.110
Perfect.

88
00:05:44.330 --> 00:05:48.270
Let's go ahead and save this post and then perform a hard or full refresh.

89
00:05:49.310 --> 00:05:49.700
Cool.

90
00:05:49.700 --> 00:05:52.020
You can see that was successfully saved and stored.

91
00:05:52.730 --> 00:05:59.210
Next, let's work on handling the situation where you delete the item that is currently marked as the

92
00:05:59.210 --> 00:06:00.260
correct answer.

93
00:06:00.770 --> 00:06:06.680
If that happens, we would want to change the correct answer, attribute value to just be undefined

94
00:06:06.680 --> 00:06:07.270
once again.

95
00:06:07.700 --> 00:06:13.610
So, for example, right now, correct answer has a value of zero because the first item in the array

96
00:06:13.820 --> 00:06:15.050
is the correct answer.

97
00:06:15.440 --> 00:06:20.810
If I deleted this first answer, we wouldn't want correct answer to be zero or one or two.

98
00:06:20.810 --> 00:06:22.730
We would want it to be undefined once again.

99
00:06:22.730 --> 00:06:27.450
So all we need to do to fix that is find our delete answer function.

100
00:06:28.100 --> 00:06:28.820
Here it is.

101
00:06:28.820 --> 00:06:32.080
And within the body of this function, let's just add a new line.

102
00:06:32.480 --> 00:06:33.730
Let's have an if statement.

103
00:06:33.740 --> 00:06:39.790
So if parentheses curly brackets, the condition will be if indexed to delete.

104
00:06:40.190 --> 00:06:46.160
So if the one we're trying to delete or we just did delete, if that equals the one that is currently

105
00:06:46.160 --> 00:06:47.510
marked as the correct answer.

106
00:06:47.540 --> 00:06:52.070
So if that equals attributes dot correct answer.

107
00:06:52.310 --> 00:06:55.970
If that's true, then let's just set it back to undefined.

108
00:06:55.970 --> 00:07:03.800
So props dot set attributes, give it an object and just set correct answer back to undefined.

109
00:07:04.640 --> 00:07:06.790
Let's save this and give it a test.

110
00:07:07.160 --> 00:07:13.730
So if I reload, let me add a few extra answers just so we have additional rows to experiment with.

111
00:07:14.210 --> 00:07:16.310
Green, yellow.

112
00:07:16.790 --> 00:07:19.700
OK, so the first answer is marked as the correct one.

113
00:07:19.700 --> 00:07:25.370
But if I delete that, notice that the correct answer is no longer just zero or the first item in the

114
00:07:25.370 --> 00:07:25.780
array.

115
00:07:26.060 --> 00:07:30.290
Instead, we've successfully set correct answer back to undefined.

116
00:07:30.830 --> 00:07:33.510
Let's change gears and work on a different detail.

117
00:07:34.070 --> 00:07:39.290
This is just my opinion, but I think that if you haven't marked any answer as the correct answer,

118
00:07:39.680 --> 00:07:43.280
I think we should disable the WordPress save button.

119
00:07:44.000 --> 00:07:49.370
WordPress has a function called lock post saving that makes that very easy to do.

120
00:07:49.790 --> 00:07:51.470
So right now it would be disabled.

121
00:07:51.470 --> 00:07:55.880
But then as soon as you marked one of these as the correct answer, the buttons should light up again

122
00:07:55.880 --> 00:07:57.830
and be available to save or update.

123
00:07:58.280 --> 00:08:04.010
However, before we immediately start writing the code to make that happen, we need to stop and think

124
00:08:04.010 --> 00:08:10.160
about this for a moment because it's not as simple as just checking to see if correct answer is undefined

125
00:08:10.340 --> 00:08:11.960
and then locking the save button.

126
00:08:12.140 --> 00:08:17.900
And what I mean by this is we can have multiple instances of this quiz block.

127
00:08:18.260 --> 00:08:25.000
So, for example, right below this, if I added another instance of are you paying attention and said,

128
00:08:25.010 --> 00:08:27.300
what color is the sky?

129
00:08:28.220 --> 00:08:28.490
Right.

130
00:08:28.500 --> 00:08:31.220
And now I haven't marked any answers to the correct answer.

131
00:08:31.220 --> 00:08:35.510
So it would make sense that the updater save button could be locked or disabled.

132
00:08:35.510 --> 00:08:41.780
But then if I chose a correct answer on this instance of the block, we wouldn't just want to immediately

133
00:08:41.780 --> 00:08:47.870
enable the save button, because what if another instance of the block on the page didn't have a correct

134
00:08:47.870 --> 00:08:49.660
answer marked anyways?

135
00:08:49.670 --> 00:08:56.360
What I'm getting at here is instead of solving this problem from an individual block perspective, we

136
00:08:56.360 --> 00:09:02.270
should solve the problem from a WordPress block editor as a whole perspective.

137
00:09:03.020 --> 00:09:07.150
Luckily for us, WordPress gives us all the tools we need to do this.

138
00:09:07.640 --> 00:09:11.510
So right now, I want you to open up your dev tools just right.

139
00:09:11.510 --> 00:09:18.140
Click anywhere, choose inspect element and then switch to the console tab before I even begin to explain

140
00:09:18.140 --> 00:09:21.080
what we're going to type here, let's just type it out.

141
00:09:21.080 --> 00:09:26.120
I think you'll see that the method names are fairly intuitively named and I think you'll be pleasantly

142
00:09:26.120 --> 00:09:28.430
surprised when you see what it gives to us.

143
00:09:28.850 --> 00:09:35.990
So type this in WP dot data, dot select and that's a method.

144
00:09:35.990 --> 00:09:38.360
So parentheses to call it inside that.

145
00:09:38.360 --> 00:09:46.430
Let's give it a string of text core slash block dash editor, close out that string of text after the

146
00:09:46.430 --> 00:09:55.370
parentheses tack on dot get blocks and parentheses to call that when we push enter WordPress gives us

147
00:09:55.370 --> 00:09:56.330
an array.

148
00:09:56.600 --> 00:09:59.840
That's all of the blocks on the current page.

149
00:10:00.190 --> 00:10:00.310
Right.

150
00:10:00.500 --> 00:10:01.400
You can see the first one is.

151
00:10:01.480 --> 00:10:07.120
Just a core standard paragraph, and then there's two instances of are you paying attention quiz block,

152
00:10:07.120 --> 00:10:11.350
and then there's, in my case, four more standard default paragraphs.

153
00:10:11.860 --> 00:10:16.630
So it gives us an array of objects and go ahead and expand one for you.

154
00:10:16.630 --> 00:10:19.240
That is the are you paying attention type.

155
00:10:19.490 --> 00:10:27.070
So if we expand it, you can see we have the attributes right here, the question, the array of answers,

156
00:10:27.070 --> 00:10:28.210
the correct answer.

157
00:10:28.720 --> 00:10:35.440
So what this means is that any time we want to access sort of the block ed as a whole, well, we can

158
00:10:35.440 --> 00:10:40.020
access it right here and then we can dig into those and check their values.

159
00:10:40.480 --> 00:10:47.260
So all we would need to do is set up code that any time a piece of data on the block, ed as a whole

160
00:10:47.260 --> 00:10:54.220
changes, we would just check to make sure that none of the blocks that have a type of are you paying

161
00:10:54.220 --> 00:10:58.210
attention that none of them have a correct answer of undefined.

162
00:10:58.660 --> 00:11:01.580
If this isn't making perfect sense yet, that's OK.

163
00:11:01.810 --> 00:11:06.590
I think the picture will come into focus when we actually start writing the code to make this happen.

164
00:11:06.910 --> 00:11:11.800
So right now, let's jump back into our text editor and scroll up to the very top.

165
00:11:12.310 --> 00:11:17.590
So because we're not going to approach things from an individual component or block level any longer,

166
00:11:17.770 --> 00:11:21.180
we're not going to write the code within our edit component function.

167
00:11:21.520 --> 00:11:27.210
Instead, we're approaching it from a sort of screen as a whole or block ed as a whole perspective.

168
00:11:27.490 --> 00:11:30.550
So let's just write a function up towards the very top here.

169
00:11:30.760 --> 00:11:35.710
So, for example, right above our register block type line, I'm just going to say function and name

170
00:11:35.710 --> 00:11:38.290
it our start function.

171
00:11:38.320 --> 00:11:42.610
Just give it a somewhat unique name that no other function and WordPress is using.

172
00:11:43.090 --> 00:11:44.260
A bit later on the video.

173
00:11:44.260 --> 00:11:48.910
We can circle back to this and I'll show you how to avoid the issue of having to choose a unique name

174
00:11:48.910 --> 00:11:49.660
entirely.

175
00:11:49.930 --> 00:11:52.390
But for now, let's just create a function.

176
00:11:52.390 --> 00:11:55.590
And then right after the definition, just be sure to call that function.

177
00:11:55.600 --> 00:12:02.800
So our start function, OK, really, we're just creating a function so that we can write code and have

178
00:12:02.800 --> 00:12:09.430
our variables encapsulated so we're not polluting or accidentally changing any of the global scope variables

179
00:12:09.730 --> 00:12:11.260
in WordPress, JavaScript.

180
00:12:11.770 --> 00:12:15.640
Anyways, inside this function, we're going to use the following tool.

181
00:12:15.770 --> 00:12:24.730
So WP dot data dot subscribe parentheses to call it in these parentheses we give it a function, so

182
00:12:24.820 --> 00:12:26.830
function parentheses, curly brackets.

183
00:12:27.100 --> 00:12:28.390
And now here's the cool part.

184
00:12:28.630 --> 00:12:36.130
WordPress is going to call our function each and every time any of the data on the block Ed as a whole

185
00:12:36.130 --> 00:12:37.000
changes.

186
00:12:37.570 --> 00:12:44.140
Just for a quick example, it's console that log the word hello, give this a save and now watch this

187
00:12:44.140 --> 00:12:44.410
back.

188
00:12:44.410 --> 00:12:49.150
And WordPress, if you refresh and then check your console, you can already see that it's output.

189
00:12:49.150 --> 00:12:51.430
HARLOW Many, many times.

190
00:12:51.910 --> 00:12:57.340
But if you select maybe the last few just to prove a point and then make any sort of change at all to

191
00:12:57.340 --> 00:13:02.290
any of the blocks content on your page and switch back to your console, you can see that it called

192
00:13:02.290 --> 00:13:04.930
your function another many, many times.

193
00:13:04.930 --> 00:13:10.240
So the point is, by subscribing, we know that we are always going to be working with the very latest

194
00:13:10.240 --> 00:13:12.050
version of the data read.

195
00:13:12.130 --> 00:13:18.040
The data inside here is always going to be fresh because WordPress is calling this function any time

196
00:13:18.040 --> 00:13:19.640
that anything changes.

197
00:13:20.110 --> 00:13:26.200
So now, instead of just logging that to the console here, let's instead start looking within all of

198
00:13:26.200 --> 00:13:32.230
the blocks on the page and checking for any that have correct answer as undefined.

199
00:13:32.770 --> 00:13:34.060
Let's save this to a variable.

200
00:13:34.060 --> 00:13:39.340
So let's say const, you can name it anything, but I'll name it results equals and then we're going

201
00:13:39.340 --> 00:13:42.130
to reuse that same code we saw in the console a minute ago.

202
00:13:42.130 --> 00:13:46.150
So that's WP data dot select call that.

203
00:13:46.450 --> 00:13:53.620
Give it a string of text of course slash block dash editor at the end of that call get blocks.

204
00:13:54.320 --> 00:13:59.020
OK, now we know that this is going to return an array in a JavaScript.

205
00:13:59.020 --> 00:14:04.750
Every array has access to the filter method, so we give filter a function.

206
00:14:04.750 --> 00:14:10.210
So in these parentheses, function, parentheses, curly brackets within our function parentheses,

207
00:14:10.210 --> 00:14:11.620
let's make up a parameter name.

208
00:14:11.620 --> 00:14:14.760
You could call it X or block, OK.

209
00:14:14.770 --> 00:14:20.470
And now remember, inside our filter function, if you return true, that item will be included in the

210
00:14:20.470 --> 00:14:22.060
new array that filter builds.

211
00:14:22.240 --> 00:14:25.420
If you return false, the current item will not be included.

212
00:14:25.840 --> 00:14:27.610
So I'm going to return.

213
00:14:28.060 --> 00:14:34.810
And then for the condition that I'm checking if block name E double equals time to check for equality,

214
00:14:34.810 --> 00:14:37.650
if that equals our plugins.

215
00:14:38.230 --> 00:14:40.930
Are you paying attention?

216
00:14:41.830 --> 00:14:52.690
If it equals that and double ampersand and block attributes correct answer equals undefined double equals

217
00:14:52.690 --> 00:14:53.020
sign.

218
00:14:53.680 --> 00:14:59.920
If we put this all together, the new array that filter is going to return is going to be empty unless

219
00:14:59.920 --> 00:15:00.850
there's a problem.

220
00:15:01.140 --> 00:15:01.260
Right.

221
00:15:01.450 --> 00:15:06.850
Unless there's a quiz block that has not marked a correct answer yet, so here's where we can get back

222
00:15:06.850 --> 00:15:08.170
to the actual task at hand.

223
00:15:08.200 --> 00:15:14.460
Remember, we want to disable the updater save button if you have not marked a correct answer.

224
00:15:14.920 --> 00:15:18.930
So let's do this within our function before our subscribe.

225
00:15:19.090 --> 00:15:20.440
Let's create a variable.

226
00:15:20.920 --> 00:15:25.990
You can name it anything, but I'll name it locked and set it to false by default.

227
00:15:26.320 --> 00:15:30.760
I'm using let instead of const because I want to be able to change this as we go.

228
00:15:31.180 --> 00:15:35.280
OK, now within our subscribe function, but after the contact results line.

229
00:15:35.290 --> 00:15:45.340
So right here let's say if parentheses curly brackets if results length meaning if this array exists,

230
00:15:45.340 --> 00:15:54.190
if it has items in it and if locked is currently false, meaning the page isn't already locked, well

231
00:15:54.220 --> 00:15:55.510
then I do want to lock it.

232
00:15:55.540 --> 00:15:57.520
So let's update locked to equal.

233
00:15:57.520 --> 00:16:02.530
True and most importantly, we can use the WordPress function to actually lock that button.

234
00:16:02.530 --> 00:16:09.910
So it's WP Data Dispatch, which is a function that we're going to call the type of action that we want

235
00:16:09.910 --> 00:16:17.140
to dispatch is in core course editor at the end of this, look inside it for a method called lock post

236
00:16:17.140 --> 00:16:17.860
saving.

237
00:16:18.280 --> 00:16:22.720
And now you make up a name for this certain criteria that you're locking it for.

238
00:16:23.200 --> 00:16:26.160
Let's make up a name of no answer.

239
00:16:26.530 --> 00:16:31.240
Now let's do the opposite and describe when you should unlock it to save typing.

240
00:16:31.240 --> 00:16:37.630
You can just duplicate these four lines of the if statement right below that pasted in for the condition.

241
00:16:37.630 --> 00:16:39.450
Just add an exclamation here.

242
00:16:39.970 --> 00:16:45.790
So essentially if our array of problem blocks is empty and and then get rid of the equals false and

243
00:16:45.790 --> 00:16:49.390
if the save button is currently locked, then let's just do the opposite.

244
00:16:49.390 --> 00:16:55.630
So we would set locked to false and instead of calling lock posts saving, we would call a WordPress

245
00:16:55.630 --> 00:16:58.390
function called unlock post saving.

246
00:16:58.810 --> 00:17:00.640
I know that was a lot to follow along with.

247
00:17:00.640 --> 00:17:06.520
Remember, you can always download the zip file for each lesson to compare your code against the finished

248
00:17:06.520 --> 00:17:07.000
product.

249
00:17:07.000 --> 00:17:09.700
But let's go ahead and save this and test it out.

250
00:17:10.120 --> 00:17:15.640
So if I reload, oops, I never saved my post previously, so I'm back to just having one instance of

251
00:17:15.640 --> 00:17:16.330
the block.

252
00:17:16.960 --> 00:17:18.340
Let me add a new instance.

253
00:17:19.530 --> 00:17:24.120
Cool, so as soon as I added the new instance, you can see the save button gets great out because this

254
00:17:24.120 --> 00:17:26.130
new instance doesn't have a correct answer.

255
00:17:26.430 --> 00:17:29.850
But as soon as I mark one cool, the button is good to go.

256
00:17:30.060 --> 00:17:34.600
So if we go back up to our first instance and delete that answer so it doesn't have a correct one.

257
00:17:34.860 --> 00:17:35.580
Perfect.

258
00:17:36.180 --> 00:17:37.070
I set that back.

259
00:17:37.080 --> 00:17:38.190
We're back in business.

260
00:17:38.580 --> 00:17:42.520
Before we bring this lesson to a close, let's take care of two tiny details.

261
00:17:42.540 --> 00:17:47.580
So back in our code, up at the top, I told you I would show you a way to avoid having to come up with

262
00:17:47.580 --> 00:17:53.730
a really unique function name here so we could actually get rid of the name here so that it's just function,

263
00:17:53.730 --> 00:17:55.380
parentheses, curly brackets.

264
00:17:55.920 --> 00:18:01.680
And then at the very start of that line, add an opening parentheses before the word function and then

265
00:18:01.680 --> 00:18:05.040
at the very end of our function, add a closing parentheses.

266
00:18:05.400 --> 00:18:10.020
So the parentheses sort of group, the function as a whole, and then right after that you can just

267
00:18:10.020 --> 00:18:14.760
include another set of parentheses to call or execute whatever came before it.

268
00:18:15.420 --> 00:18:19.530
With that in place, we obviously no longer need to call a function that doesn't exist.

269
00:18:19.530 --> 00:18:22.770
So be sure to get rid of this our start function call.

270
00:18:23.590 --> 00:18:30.120
Now, this approach or syntax that we just set up is called and immediately invoked function expression.

271
00:18:30.540 --> 00:18:35.370
You might have seen the acronym I f e before, and that's what this is referring to.

272
00:18:35.580 --> 00:18:41.230
The upside or advantage of this is now we can have scoped variables, right?

273
00:18:41.280 --> 00:18:43.230
So we created this variable called Locked.

274
00:18:43.470 --> 00:18:46.500
It's limited to live only within our function.

275
00:18:46.830 --> 00:18:52.800
So we're not going to accidentally mess up a globally scoped WordPress variable with the same name.

276
00:18:53.220 --> 00:18:53.580
Cool.

277
00:18:53.760 --> 00:18:58.890
The one other detail that I wanted to take care of, if we scroll down, is the default value for our

278
00:18:58.890 --> 00:19:00.150
answers attribute.

279
00:19:00.150 --> 00:19:03.240
So we don't really want three items of red, blue, green.

280
00:19:03.540 --> 00:19:09.540
We just want an array so square brackets with a single item of just an empty string of text.

281
00:19:10.230 --> 00:19:12.970
Let's give this a save and test it out one more time.

282
00:19:13.530 --> 00:19:18.990
Let me actually delete this instance of the block and insert a fresh copy just to see that red, blue,

283
00:19:18.990 --> 00:19:21.290
green isn't being pre populated perfect.

284
00:19:21.330 --> 00:19:22.280
This is what we want, right?

285
00:19:22.290 --> 00:19:22.980
Just a question.

286
00:19:22.980 --> 00:19:24.090
Feel one answer.

287
00:19:24.090 --> 00:19:26.070
Feel to start off camera.

288
00:19:26.070 --> 00:19:31.860
I just typed in a few values and as soon as I click Kat to market as the correct answer, our update

289
00:19:31.860 --> 00:19:33.120
button is enabled.

290
00:19:33.390 --> 00:19:37.020
But if I delete that item perfect, it's locked again.

291
00:19:37.680 --> 00:19:39.930
That is going to bring this lesson to a close.

292
00:19:40.080 --> 00:19:44.640
In our next lesson, we're going to start working on the front end for our block.

293
00:19:45.090 --> 00:19:45.360
Right.

294
00:19:45.360 --> 00:19:49.380
Or what the actual visitors of our website should see should be a lot of fun.

295
00:19:49.500 --> 00:19:51.930
Let's keep things rolling and I'll see you then.
