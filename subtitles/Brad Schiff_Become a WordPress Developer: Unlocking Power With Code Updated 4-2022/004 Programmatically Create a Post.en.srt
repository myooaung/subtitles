1
00:00:01,980 --> 00:00:03,040
Hello, everyone.

2
00:00:03,390 --> 00:00:11,190
In this lesson, we will learn how to programmatically create and delete posts right from within our

3
00:00:12,150 --> 00:00:12,690
code.

4
00:00:13,080 --> 00:00:16,390
Without further ado, let's jump right into the action.

5
00:00:16,770 --> 00:00:17,370
All right.

6
00:00:17,370 --> 00:00:22,050
So I'm on a professor detailed screen, and I have not liked this professor yet.

7
00:00:22,410 --> 00:00:29,460
So if I click on this like box and then check my console, we can see that our JavaScript sends a request

8
00:00:29,460 --> 00:00:30,990
to our custom end point.

9
00:00:31,350 --> 00:00:35,220
And at the moment, that custom endpoint doesn't actually do anything.

10
00:00:35,430 --> 00:00:38,420
It just responds back with this little bit of text.

11
00:00:38,790 --> 00:00:46,350
So our goal for this lesson is to write a bit of P that actually does create a new like post.

12
00:00:46,860 --> 00:00:48,830
So let's get started with that right now.

13
00:00:49,230 --> 00:00:56,190
Jump over to your text editor and within your theme folder, let's look inside the ANC subfolder and

14
00:00:56,190 --> 00:01:00,570
open up like Dasch Routt towards the bottom of this file.

15
00:01:00,580 --> 00:01:03,720
We see our create like and delete like functions.

16
00:01:04,110 --> 00:01:10,500
Let's go ahead and begin with the create like let's delete this sample text message return line.

17
00:01:11,580 --> 00:01:20,460
And instead, I want to introduce you to a WordPress function named WP Insert Post.

18
00:01:21,870 --> 00:01:28,530
This WordPress function will let us programmatically create a new post right from within our code.

19
00:01:29,230 --> 00:01:30,090
So check this out.

20
00:01:30,090 --> 00:01:37,320
Within its parentheses, we just provide an array, OK, and then within this array we just describe

21
00:01:37,320 --> 00:01:39,570
a new post that we want to create.

22
00:01:40,020 --> 00:01:45,420
So within the array parentheses, I will drop down just to stay organized and then just start describing

23
00:01:45,420 --> 00:01:54,030
a post so I could say post type equals like obviously you could set this to whatever you want.

24
00:01:54,030 --> 00:01:57,750
Post page, professor campus note.

25
00:01:57,990 --> 00:02:01,200
In our case we want to create a like at this moment.

26
00:02:01,620 --> 00:02:03,270
OK, then let's include a comma.

27
00:02:03,300 --> 00:02:11,460
We can provide another property, let's say post status and this default to a value of draft.

28
00:02:11,640 --> 00:02:12,780
But we don't want that.

29
00:02:13,110 --> 00:02:17,520
So we want to specify that the status should be published.

30
00:02:18,060 --> 00:02:22,380
So that way, WordPress considers it a complete finalized post.

31
00:02:22,890 --> 00:02:24,540
OK, let's create a new line.

32
00:02:24,630 --> 00:02:27,210
Let's target post title.

33
00:02:28,020 --> 00:02:30,390
You don't actually need to include a title.

34
00:02:30,600 --> 00:02:33,540
WordPress will let you create a post without a title.

35
00:02:33,540 --> 00:02:40,320
But just for fun, why don't we say our p p create post test.

36
00:02:40,980 --> 00:02:42,960
OK, and then let's include one more property.

37
00:02:43,320 --> 00:02:50,760
Let's say post content and just for fun, let's say hello world one, two, three.

38
00:02:51,330 --> 00:02:56,150
OK, now let's go ahead and save this and then test it out on the front end.

39
00:02:56,790 --> 00:03:03,030
So now if I go ahead and click the like box and check my console, we no longer see that.

40
00:03:03,030 --> 00:03:07,170
Thanks for trying to create a post because we deleted that return message.

41
00:03:07,380 --> 00:03:10,830
So at the moment our endpoint function is not returning anything.

42
00:03:10,830 --> 00:03:12,240
That's why we see null here.

43
00:03:12,510 --> 00:03:17,880
We can fix this in just a moment so that our function does indeed return a response of some sort.

44
00:03:18,420 --> 00:03:24,720
But for now, let's jump over to the admin dashboard and in the sidebar, let's click on Likes.

45
00:03:25,690 --> 00:03:31,570
And perfect, there we can see our brand new post that we created from within our peacoat.

46
00:03:32,080 --> 00:03:33,250
So if we click on it.

47
00:03:35,170 --> 00:03:39,250
Obviously, it's post type is a like here's the title we entered.

48
00:03:39,610 --> 00:03:45,170
You can see the status is published and you might be wondering where the main content field is.

49
00:03:45,490 --> 00:03:51,310
Well, you might remember that when we first registered the like post type, we said that it doesn't

50
00:03:51,310 --> 00:03:53,200
need the main editor field.

51
00:03:53,500 --> 00:03:55,960
So this has nothing to do with the task at hand.

52
00:03:55,960 --> 00:04:01,930
But if you really want to prove to yourself that our content text of Hello World One to three made it

53
00:04:01,930 --> 00:04:08,680
through, you can jump over into your text editor and instead of our theme folder, jump into our Ammu

54
00:04:08,680 --> 00:04:15,430
Plugins folder and within the file where we registered the like post type within the supports array

55
00:04:15,910 --> 00:04:18,960
after title, just include editor.

56
00:04:20,110 --> 00:04:21,430
So if I save that.

57
00:04:22,550 --> 00:04:28,160
And then jump back into the edit screen for the lightpost, cool, here's the main body content and

58
00:04:28,160 --> 00:04:30,130
you can see our text that we entered.

59
00:04:30,560 --> 00:04:32,240
We don't actually need that field.

60
00:04:32,240 --> 00:04:34,850
So I'm going to get rid of Ed once again.

61
00:04:35,330 --> 00:04:41,290
I just wanted to prove to you that our post content line successfully made it through OK?

62
00:04:41,300 --> 00:04:47,960
And now that we've learned the basics of creating a post from within our HP, let's move on to something

63
00:04:47,960 --> 00:04:49,320
a tiny bit trickier.

64
00:04:49,730 --> 00:04:54,050
Next, we need to learn how to assign a value to this custom field.

65
00:04:54,440 --> 00:04:54,840
Right.

66
00:04:54,860 --> 00:04:59,660
This should contain the I.D. number of the professor that you want to like.

67
00:05:00,110 --> 00:05:06,370
So let's jump back into our HP and learn how to assign a value to a custom field.

68
00:05:06,930 --> 00:05:10,230
First, why don't we go ahead and get rid of the post content line?

69
00:05:10,250 --> 00:05:13,980
We don't actually need that Oken for this next test.

70
00:05:14,000 --> 00:05:19,400
Why don't we change the title to second HP Test?

71
00:05:19,680 --> 00:05:21,080
Again, the title doesn't matter.

72
00:05:21,110 --> 00:05:26,240
This is just for fun and so we can differentiate the different posts within the admin.

73
00:05:26,690 --> 00:05:33,530
OK, but to get back to the task at hand on a new line, so comma, new line, let's add a new property

74
00:05:33,620 --> 00:05:45,260
named Meta Input and we want to set this to an array and you know me within the parentheses for an array.

75
00:05:45,260 --> 00:05:52,180
I like to dropdown and now we can create as many key value pairs as we want.

76
00:05:52,910 --> 00:06:01,910
So we could say sky color equals blue and grass color equals green.

77
00:06:02,690 --> 00:06:09,380
And this will create WordPress native custom fields or sometimes WordPress officially refers to them

78
00:06:09,380 --> 00:06:11,060
as meta fields.

79
00:06:11,450 --> 00:06:15,860
So this is the key, the key name, and this is the value.

80
00:06:16,770 --> 00:06:21,990
Key name value, but we don't actually want sky color blue and grass color green.

81
00:06:22,560 --> 00:06:33,270
Instead, we want Leicht Professor I.D., right, because that's the name of this custom field.

82
00:06:34,160 --> 00:06:40,700
And the advanced custom fields plugin is really just an abstraction layer between the WordPress native

83
00:06:40,700 --> 00:06:45,590
meta fields and giving us a luxurious, intuitive user interface.

84
00:06:45,800 --> 00:06:50,510
So luckily for us, the advanced custom fields plug in matches.

85
00:06:50,510 --> 00:06:57,170
Whatever you used for the custom field name, it also uses that exact name for the key name, meaning

86
00:06:57,170 --> 00:07:01,130
we can use this WordPress native way of adding a meta field.

87
00:07:01,370 --> 00:07:07,790
And if we use the exact custom field name for our key, well, we can just give it a value of whatever

88
00:07:07,790 --> 00:07:09,410
we want in the future.

89
00:07:09,410 --> 00:07:14,930
Obviously, we would want this to be a dynamic number that is actually the current professor ID.

90
00:07:15,260 --> 00:07:20,590
But for now, just as a test, why don't we set it to one, two, three, four, five.

91
00:07:21,140 --> 00:07:26,000
OK, now let's go ahead and save this and test it out on the front end.

92
00:07:26,950 --> 00:07:33,550
So if I click the light box once again and then jump back into my admin dashboard and refreshed the

93
00:07:33,550 --> 00:07:40,060
all likes page, cool, there we see our brand new post with the title of Second Test.

94
00:07:40,540 --> 00:07:47,110
And if I click on it beautiful, we can see that that custom field received the value of one, two,

95
00:07:47,110 --> 00:07:48,130
three, four, five.

96
00:07:48,490 --> 00:07:52,660
Now, obviously, we don't actually want this to be a fake hardcoded.

97
00:07:52,660 --> 00:07:59,530
No, we want this to be the actual ID number of whatever professor you're viewing when you click on

98
00:07:59,530 --> 00:08:00,610
the lightbox.

99
00:08:00,970 --> 00:08:07,030
And the first step towards making that happen is learning how to send along a bit of data within our

100
00:08:07,030 --> 00:08:10,370
JavaScript request that we send off to WordPress.

101
00:08:10,720 --> 00:08:11,850
Let me show you what I mean.

102
00:08:11,860 --> 00:08:17,800
So right now, let's jump into our text editor and within our JavaScript modules folder.

103
00:08:18,160 --> 00:08:21,190
Let's jump into our like Dot J.S..

104
00:08:22,160 --> 00:08:30,050
Let's look for our method that has a name of create, like here it is, so we are using the Ajax tool

105
00:08:30,050 --> 00:08:37,010
to send off a request to this you RL and now we just want to modify this request that we're sending

106
00:08:37,280 --> 00:08:39,080
to send along a bit of data.

107
00:08:39,560 --> 00:08:45,410
So it doesn't matter where you could add a new line above the line or below the type line.

108
00:08:45,410 --> 00:08:53,030
Doesn't matter where, but we just want a new property named Data and let's send along a JavaScript

109
00:08:53,030 --> 00:08:53,890
object.

110
00:08:54,230 --> 00:08:59,180
So in JavaScript, in this context, a pair of curly brackets creates an object.

111
00:08:59,450 --> 00:09:02,500
Let's be sure to include a comma after this, OK?

112
00:09:02,660 --> 00:09:07,780
And within the object we can send along as many different properties as we want.

113
00:09:08,420 --> 00:09:11,570
So we could say sky, colon.

114
00:09:11,900 --> 00:09:18,650
So sky equals blue and then you could have another comma and say grass.

115
00:09:18,770 --> 00:09:21,820
Colon could say that it equals green.

116
00:09:22,190 --> 00:09:22,520
Right.

117
00:09:22,540 --> 00:09:27,800
The idea is you could send along as many properties as you want, but in our case we only need to send

118
00:09:27,800 --> 00:09:30,770
along one property within this data object.

119
00:09:31,010 --> 00:09:33,370
We can name the property whatever we want.

120
00:09:33,500 --> 00:09:39,850
Why don't we call it Professor I.D. and let's say Colon.

121
00:09:39,860 --> 00:09:41,240
Let's set it to equal.

122
00:09:41,450 --> 00:09:47,830
And in just a moment, we can learn how to set it to the actual ID number of the current professor.

123
00:09:48,320 --> 00:09:55,130
But first, for now, just as a quick test, why don't we set it to seven, eight, nine, just as a

124
00:09:55,130 --> 00:09:59,720
quick test so that we can learn how to receive this data on the server side.

125
00:10:00,170 --> 00:10:05,840
OK, so let's go ahead and save this and make sure that your JavaScript is getting rebundled.

126
00:10:06,230 --> 00:10:08,750
And just a quick note before we move on.

127
00:10:09,080 --> 00:10:15,920
As far as WordPress is concerned, this way of sending data is the same thing as adding on to the end

128
00:10:15,920 --> 00:10:24,480
of the euro and saying, questionmark, professor idee equals seven, eight, nine.

129
00:10:25,010 --> 00:10:32,450
So after WordPress processes and parses the incoming request, this is basically the equivalent of this.

130
00:10:33,080 --> 00:10:36,980
So it's up to you of how you want to include data within your request.

131
00:10:36,980 --> 00:10:43,310
But I feel like the data property is a bit cleaner, a bit more organized instead of just tacking stuff

132
00:10:43,310 --> 00:10:44,920
on to the end of the euro.

133
00:10:44,930 --> 00:10:47,220
So let me remove this from the euro.

134
00:10:47,690 --> 00:10:54,650
OK, let's keep this data property in place and now let's go learn how to access this from within our

135
00:10:54,650 --> 00:10:56,060
custom end point.

136
00:10:56,330 --> 00:10:56,670
Right.

137
00:10:56,690 --> 00:10:59,540
How can we access this from the server side?

138
00:11:00,230 --> 00:11:04,450
So let's jump back into our, like, root file.

139
00:11:04,880 --> 00:11:11,430
Here's our create like function that we've been working on and the beauty of the rest API and this register,

140
00:11:11,430 --> 00:11:18,260
a restaurant function, is that it passes along any incoming data from the request into this callback

141
00:11:18,260 --> 00:11:18,830
function.

142
00:11:19,100 --> 00:11:24,470
So all we need to do to access that information is within the parentheses of the function definition.

143
00:11:24,800 --> 00:11:28,760
Just include a parameter, let's say dollar sign data.

144
00:11:29,090 --> 00:11:34,970
And now within this function, right up at the top of the function, we can access that professor ID

145
00:11:34,970 --> 00:11:41,540
number that our JavaScript is sending by just saying dollar sign data and then look inside the array

146
00:11:41,930 --> 00:11:48,680
because WordPress mushes together all of the incoming data, whether it's in a JavaScript object or

147
00:11:48,680 --> 00:11:54,330
appended to the end of the euro, WordPress mushes all of that together into an array.

148
00:11:54,590 --> 00:12:01,790
So if we look inside that array for a property named Professor IDE, right.

149
00:12:01,790 --> 00:12:07,880
We want this to exactly match whatever we used back in our JavaScript file when we said data and the

150
00:12:07,880 --> 00:12:12,670
property name is Professor Uppercase ie lowercase D..

151
00:12:13,640 --> 00:12:20,900
So back in our FTP, this code right here will allow us to access that value and just to be extra secure

152
00:12:21,110 --> 00:12:23,780
and safeguard ourselves from malicious users.

153
00:12:24,080 --> 00:12:28,740
Why don't we sanitize this value before we actually use it down here?

154
00:12:29,180 --> 00:12:40,520
So up here, I'm going to wrap this within a WordPress function named sanitize text, field parentheses

155
00:12:40,520 --> 00:12:46,270
and then just cut and paste this to live within these parentheses, OK?

156
00:12:46,320 --> 00:12:49,840
And right now, this value is just sort of floating in space here.

157
00:12:50,180 --> 00:12:53,390
So instead, at the beginning of this line, let's create a variable.

158
00:12:53,510 --> 00:12:54,980
You can name it whatever you want.

159
00:12:54,980 --> 00:12:58,640
I'm just going to name it Professor equals.

160
00:12:58,850 --> 00:13:03,260
OK, so now we've got this variable that equals the incoming professor ID.

161
00:13:03,560 --> 00:13:09,770
So down here when we are creating a brand new post instead of hard coding this two, one, two, three,

162
00:13:09,770 --> 00:13:10,610
four, five.

163
00:13:11,000 --> 00:13:13,300
Let's just say our professor variable.

164
00:13:13,940 --> 00:13:17,960
OK, let's go ahead and save that and test it out on the front end.

165
00:13:18,540 --> 00:13:18,920
Oops.

166
00:13:18,920 --> 00:13:20,410
Looks like we've got an error here.

167
00:13:20,420 --> 00:13:21,620
I think I know what the problem is.

168
00:13:22,140 --> 00:13:29,820
I forgot to include a semicolon at the end of this line, so be sure to include semicolon, save that

169
00:13:29,820 --> 00:13:30,180
again.

170
00:13:30,360 --> 00:13:35,700
And actually you might want to perform a hard refresh just to make sure that your browser has received

171
00:13:35,700 --> 00:13:40,350
the updated JavaScript so you can just hold down the shift key on your keyboard and click the refresh

172
00:13:40,350 --> 00:13:40,880
icon.

173
00:13:41,850 --> 00:13:48,930
OK, and now if we click on the like box and then jump over to the WordPress admin and refresh the all

174
00:13:48,930 --> 00:13:52,020
likes page pool, we see a brand new post.

175
00:13:52,170 --> 00:13:53,550
It's using the same title.

176
00:13:53,550 --> 00:13:56,160
But that's just because we didn't choose a new title value.

177
00:13:56,430 --> 00:13:57,360
That's not important.

178
00:13:57,360 --> 00:14:04,050
But if we click on it to view its details, cool, we can see that we successfully retrieved that value

179
00:14:04,050 --> 00:14:10,320
from the JavaScript request, except we don't actually want our JavaScript to hard code the value to

180
00:14:10,320 --> 00:14:11,480
seven, eight, nine.

181
00:14:11,730 --> 00:14:18,030
Instead, we want our JavaScript to dynamically use the ID number of whatever professor you're currently

182
00:14:18,030 --> 00:14:20,270
viewing when you click on the like box.

183
00:14:20,520 --> 00:14:26,760
So the first step towards making that happen is why don't we adjust the HTML that gets generated for

184
00:14:26,760 --> 00:14:33,930
the lightbox and let's set it up so that it includes a data attribute that equals the ID of the current

185
00:14:33,930 --> 00:14:34,620
professor.

186
00:14:34,860 --> 00:14:35,010
Okay.

187
00:14:35,070 --> 00:14:41,300
And then once we've output that into the HTML, then it's no problem for our JavaScript to access that.

188
00:14:41,610 --> 00:14:46,800
So if I want to customize the Lightbox HTML, we want to jump in to a template.

189
00:14:47,280 --> 00:14:50,700
So in our theme folder, let's open up a single dash.

190
00:14:50,700 --> 00:14:56,960
Professor Dot P, let's scroll down until we find the lightbox span.

191
00:14:57,630 --> 00:14:58,350
Here it is.

192
00:14:58,620 --> 00:15:02,490
We've already got one data attribute named data exists.

193
00:15:02,820 --> 00:15:06,480
So maybe right before that let's set up another data attribute.

194
00:15:06,780 --> 00:15:14,250
It doesn't matter what you name it, but I will call it data dash professor and I'm going to set it

195
00:15:14,250 --> 00:15:15,060
to equal.

196
00:15:15,060 --> 00:15:23,380
And then within the quotes, let's drop in to BHP and just call the WordPress function the IDE.

197
00:15:24,060 --> 00:15:25,830
OK, so if I save that.

198
00:15:26,980 --> 00:15:35,350
Then back on the front end, if I refresh and inspect the lightbox, perfect, we see that data attribute

199
00:15:35,350 --> 00:15:37,780
equals and yours will be a different number.

200
00:15:37,780 --> 00:15:42,770
But in my case, 103 is the ID for Dr. Miaows a lot.

201
00:15:43,180 --> 00:15:50,470
So now let's just go update our JavaScript to be able to access this value back in our text editor within

202
00:15:50,470 --> 00:15:56,970
like J.S. Let's scroll up a little bit and focus on our events area.

203
00:15:56,980 --> 00:16:03,880
So when the lightbox gets clicked on or any of the sub elements that live within the like box, that's

204
00:16:03,880 --> 00:16:07,210
going to fire off our method named our click despatcher.

205
00:16:07,570 --> 00:16:12,070
And then it's going to decide whether it should run, delete, like or create like.

206
00:16:12,370 --> 00:16:18,490
Now, remember, in this function, we created a variable named current like box and we can trust that

207
00:16:18,490 --> 00:16:24,090
this will always point towards the overall span parent that has a class of lightbox.

208
00:16:24,250 --> 00:16:31,090
So why don't we do this down here when we run or execute the create like method within the parentheses,

209
00:16:31,090 --> 00:16:35,500
let's pass it current like box.

210
00:16:35,890 --> 00:16:39,210
And while we're at it, why don't we do the same thing for the delete like method.

211
00:16:39,220 --> 00:16:44,060
So in these parentheses current like box.

212
00:16:44,680 --> 00:16:51,520
OK, so now if we're passing that along to our create like method within the function definition parentheses,

213
00:16:51,790 --> 00:16:56,570
let's include that as a parameter current like box.

214
00:16:57,100 --> 00:17:03,590
OK, so now we've got this easy to use reference that points towards the element with the data attribute.

215
00:17:04,030 --> 00:17:12,550
So in our Ajax request for our data property, let's say Professor IDE should equal and then instead

216
00:17:12,550 --> 00:17:20,980
of seven, eight, nine, we can just say current like box dot data to look for a data attribute.

217
00:17:21,430 --> 00:17:24,430
And we gave it attribute name of data dash professor.

218
00:17:24,670 --> 00:17:28,390
So since we're using the data method, we don't need to include the data dash.

219
00:17:28,390 --> 00:17:30,790
We can just say, Professor.

220
00:17:31,630 --> 00:17:33,360
OK, let's go ahead and save that.

221
00:17:33,760 --> 00:17:36,760
And back on the front end, perform a hard refresh.

222
00:17:37,860 --> 00:17:44,880
And now if I click the like box and then jump over to the admin dashboard and refresh the all likes

223
00:17:44,880 --> 00:17:47,320
page, here we see a new post.

224
00:17:47,340 --> 00:17:48,290
Let's check it out.

225
00:17:49,720 --> 00:17:57,430
Perfect, we see a real ID value that matches Dr. Miaows a lot, or if I jump to the Rogerson professor

226
00:17:57,430 --> 00:17:58,090
page.

227
00:18:00,840 --> 00:18:08,100
And click the like box here and then jump back into the Admon, refreshed the likes screen, click on

228
00:18:08,100 --> 00:18:09,090
the newest post.

229
00:18:10,260 --> 00:18:14,200
Perfect, it's got a different ID value that matches Dr. Rogerson.

230
00:18:14,670 --> 00:18:22,260
So at this point, we have now successfully used HP to programmatically create a new post and we've

231
00:18:22,260 --> 00:18:25,620
used JavaScript to send over the relevant correct.

232
00:18:25,620 --> 00:18:26,740
Professor Idem.

233
00:18:27,150 --> 00:18:28,160
This is excellent.

234
00:18:28,380 --> 00:18:35,580
However, what we have still yet to do is implement our custom, logic and restrictions for our API

235
00:18:35,580 --> 00:18:36,180
endpoint.

236
00:18:36,420 --> 00:18:36,620
Right.

237
00:18:36,690 --> 00:18:42,840
We want to set things up so that you need to be logged in with a user account in order to create a like.

238
00:18:43,080 --> 00:18:44,280
We haven't set that up yet.

239
00:18:44,290 --> 00:18:49,080
So at the moment, a random stranger could come here, click the like box and it would create a like.

240
00:18:49,350 --> 00:18:50,310
We don't want that.

241
00:18:50,580 --> 00:18:57,660
And we also need to set up the logic so that each user account can only create one like per professor,

242
00:18:57,990 --> 00:19:03,870
because right now I could go to the front end and click this like box a hundred times to create a hundred

243
00:19:03,870 --> 00:19:05,640
likes for Dr. Rogerson.

244
00:19:05,910 --> 00:19:11,700
OK, now, setting up all of that custom logic and those restrictions is exactly what we are going to

245
00:19:11,700 --> 00:19:14,730
work on in the next part of this lesson.

246
00:19:15,090 --> 00:19:17,580
So let's keep things rolling and I will see you then.
