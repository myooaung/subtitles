1
00:00:02,230 --> 00:00:03,040
Hello, everyone.

2
00:00:03,580 --> 00:00:06,940
This is a quick note that I'm filming in June of 2020.

3
00:00:07,360 --> 00:00:11,740
So we just completed the JavaScript for the My Notes feature.

4
00:00:12,010 --> 00:00:13,780
However, we used J.

5
00:00:13,930 --> 00:00:15,730
Query to accomplish this.

6
00:00:16,360 --> 00:00:22,120
And right now, I want to provide you with an alternative or G query free version of our code.

7
00:00:22,540 --> 00:00:28,510
I didn't think it made sense to re film the entire previous chapter for just minor syntax differences

8
00:00:28,510 --> 00:00:30,820
and slightly different approaches here and there.

9
00:00:31,210 --> 00:00:35,350
So all of the same overall big picture concepts stay the same.

10
00:00:35,680 --> 00:00:38,170
I'm just approaching things slightly differently.

11
00:00:38,380 --> 00:00:41,140
So in this window, this is the code that we wrote together.

12
00:00:41,440 --> 00:00:47,710
But in this window, this is the same my notes module, but I coded it without using J.

13
00:00:47,740 --> 00:00:48,160
Query.

14
00:00:48,430 --> 00:00:54,160
So you can find this file available for download in the associated resources for this lesson.

15
00:00:54,490 --> 00:01:01,210
And this is a completely compatible drop in replacement for our existing my notes J.

16
00:01:01,210 --> 00:01:02,020
S file.

17
00:01:02,230 --> 00:01:07,930
So I can just copy the entire contents into my clipboard back in our existing file, delete everything

18
00:01:08,440 --> 00:01:10,540
pasted in, hit save.

19
00:01:11,050 --> 00:01:16,420
And if you have your npm run dev task running in the command line, that will rebundle everything up.

20
00:01:16,900 --> 00:01:20,620
I will refresh in the browser to make sure that my event handlers aren't doubling up.

21
00:01:20,740 --> 00:01:24,320
But if I try to create a new note, I already have five notes.

22
00:01:24,340 --> 00:01:26,080
So we see the note limit reached.

23
00:01:26,440 --> 00:01:30,190
If I delete one of my existing notes, the message goes away.

24
00:01:30,220 --> 00:01:33,820
And now I can successfully create another note.

25
00:01:34,270 --> 00:01:35,620
So it works exactly the same.

26
00:01:35,650 --> 00:01:37,630
Now, right now, I want to jump through the code.

27
00:01:37,870 --> 00:01:43,030
Sort of from a bird's eye view and walk through the different approaches that I took without having

28
00:01:43,030 --> 00:01:44,860
J query in my tool box.

29
00:01:45,400 --> 00:01:48,710
So up at the top, I'm using Axios once again to make H.

30
00:01:48,740 --> 00:01:53,950
TTP requests to our WordPress rest API in the constructor.

31
00:01:53,980 --> 00:01:59,830
I wrapped things within an IF statement because I only want to run basic code for this module.

32
00:02:00,220 --> 00:02:04,300
If the my notes parent div exists on the current page.

33
00:02:04,660 --> 00:02:04,840
Right.

34
00:02:04,870 --> 00:02:09,310
Because it's not like every page on our Web site needs to run this JavaScript.

35
00:02:09,730 --> 00:02:15,160
Also when it comes to the nonce code that WordPress provides so that it can trust, we are who we say

36
00:02:15,160 --> 00:02:15,730
we are.

37
00:02:16,210 --> 00:02:22,810
Well, instead of including that in each individual request, I'm just setting it once globally up here.

38
00:02:23,410 --> 00:02:23,790
OK.

39
00:02:23,830 --> 00:02:26,770
Everything's fairly standard here for my event listening.

40
00:02:27,460 --> 00:02:31,550
I do have a function named Find Nearest Parent Ally.

41
00:02:32,170 --> 00:02:39,190
Essentially I coded this because the user can click on the delete or edit button the button itself.

42
00:02:39,190 --> 00:02:39,510
Right.

43
00:02:39,970 --> 00:02:43,120
Or they can click on the little icon.

44
00:02:43,860 --> 00:02:45,880
And those are separate DOM elements.

45
00:02:46,240 --> 00:02:50,980
So the whole point of this function is regardless of which specific element you click on.

46
00:02:51,490 --> 00:02:56,500
It just loops up the parent dom tree to find the nearest list item element.

47
00:02:56,980 --> 00:02:57,130
Right.

48
00:02:57,160 --> 00:03:03,220
Because that's what contains information about the current note, like the note I.D. scrolling down.

49
00:03:03,580 --> 00:03:09,400
Everything else is fairly standard instead of J query methods to remove attributes or add attributes

50
00:03:09,400 --> 00:03:10,000
to an element.

51
00:03:10,030 --> 00:03:16,750
I'm just using web browser native methods like remove attribute and to add or remove CSF classes.

52
00:03:16,750 --> 00:03:20,580
I'm just using class list, dot, add or class list at all remove.

53
00:03:21,430 --> 00:03:23,290
Here you can see I'm setting an attribute.

54
00:03:23,350 --> 00:03:24,540
This is how you do it without J.

55
00:03:24,640 --> 00:03:25,090
Query.

56
00:03:25,570 --> 00:03:26,590
If we scroll down a bit.

57
00:03:27,130 --> 00:03:29,470
A lot of the same things going on in this function.

58
00:03:30,100 --> 00:03:31,300
Scroll down even further.

59
00:03:31,990 --> 00:03:35,530
Here you can see I'm using axios to send a request to the WordPress.

60
00:03:35,530 --> 00:03:38,880
Rest API Axios is going to return a promise.

61
00:03:38,910 --> 00:03:40,660
So then I'm awaiting that promise.

62
00:03:40,930 --> 00:03:46,610
So JavaScript will not move on to the next line of code until this promise actually completes or returns.

63
00:03:47,020 --> 00:03:50,830
If I keep scrolling down, there's really not a whole lot else to review here.

64
00:03:50,830 --> 00:03:54,640
We can see when I'm adding a bit of HDMI oil instead of using the J.

65
00:03:54,670 --> 00:03:56,490
Query HTC Malfunction.

66
00:03:56,890 --> 00:04:01,080
I'm using the Web browser native insert adjacent HDMI oil.

67
00:04:01,420 --> 00:04:05,800
The first argument is where in relation to that element do you want to insert this?

68
00:04:05,850 --> 00:04:11,650
So after the beginning div tag and then the second argument is just the string of HDMI MLT.

69
00:04:11,710 --> 00:04:12,460
You want to add.

70
00:04:12,790 --> 00:04:17,860
If I scroll down, the only other interesting thing going on in this file is this code down here.

71
00:04:18,310 --> 00:04:23,170
So J Query has really convenient methods named slide down and slide up.

72
00:04:23,620 --> 00:04:26,500
So for example, if I delete one of my notes.

73
00:04:26,530 --> 00:04:28,210
Notice how it animates up.

74
00:04:28,570 --> 00:04:34,840
Well, since I coded this without using J query, I needed to sort of code my own slide up or slide

75
00:04:34,840 --> 00:04:36,330
down functionality.

76
00:04:36,700 --> 00:04:40,060
So I'm using CSF for the transition or the animation.

77
00:04:40,390 --> 00:04:45,610
But I do need to use JavaScript to sort of babysit the hight values in the classes.

78
00:04:46,150 --> 00:04:53,620
Essentially, this is because in CSX, you can't intimate to a height of auto in CSX if you want to

79
00:04:53,680 --> 00:04:55,690
animate or transition to height value.

80
00:04:55,990 --> 00:04:58,540
You need to actually provide a real value.

81
00:04:58,570 --> 00:04:59,920
You can't just say auto.

82
00:05:00,250 --> 00:05:01,270
You can't let an element.

83
00:05:01,390 --> 00:05:02,340
It's natural height.

84
00:05:02,370 --> 00:05:05,150
So behind the scenes, I'm doing a bit of trickery here.

85
00:05:05,520 --> 00:05:06,780
I'm inserting an element.

86
00:05:06,810 --> 00:05:11,490
But having it be invisible for just a split second, I'm measuring its height.

87
00:05:11,760 --> 00:05:12,990
I'm keeping track of that.

88
00:05:13,080 --> 00:05:18,280
And then I'm sort of babysitting the process of adding it or removing it to the DOM.

89
00:05:18,390 --> 00:05:24,390
So you'll notice that if I add an element or a note, I should say it also gradually fades or animates

90
00:05:24,390 --> 00:05:24,600
in.

91
00:05:25,380 --> 00:05:25,620
OK.

92
00:05:25,680 --> 00:05:27,810
That about does it for this new JavaScript file.

93
00:05:28,110 --> 00:05:32,960
I encourage you to use this drop in replacement for my notes dot j.

94
00:05:32,990 --> 00:05:33,510
Yes.

95
00:05:33,930 --> 00:05:35,340
One other thing I do want to cover.

96
00:05:35,610 --> 00:05:43,740
If you jump into the CSX folder and then modules and then the my notes dot CSX file down at the bottom,

97
00:05:43,740 --> 00:05:46,860
you'll see this comment reveal and hide fade transition.

98
00:05:46,890 --> 00:05:51,030
So just make sure that this code exists and that it's not commented out.

99
00:05:51,450 --> 00:05:56,910
I believe in an earlier lesson, the course I instructed you to comment out this code if you wanted

100
00:05:56,910 --> 00:05:59,890
your J query animations to look smooth.

101
00:06:00,150 --> 00:06:01,650
But now that we're not using J.

102
00:06:01,700 --> 00:06:07,110
Query, you do definitely want to have these custom CSX rules here in place.

103
00:06:07,720 --> 00:06:09,600
OK, that brings this video to a close.

104
00:06:09,990 --> 00:06:12,600
Let's keep things rolling and I'll see in the next one.
