1
00:00:01,110 --> 00:00:02,170
Hello, everyone.

2
00:00:02,460 --> 00:00:10,220
In this lesson, we will learn how to create our own raw JSON data that represents WordPress content.

3
00:00:10,650 --> 00:00:16,590
So, for example, in our previous lesson, we created this new custom rest API, U.

4
00:00:16,590 --> 00:00:21,330
RL, WP, JSON, University, V1 Search.

5
00:00:21,960 --> 00:00:25,380
Now, at the moment, it only returns a bit of sample text.

6
00:00:25,380 --> 00:00:26,790
Right, congratulations.

7
00:00:26,790 --> 00:00:27,990
You created a route.

8
00:00:28,380 --> 00:00:33,770
And now our goal for this lesson is to learn how to actually output useful data.

9
00:00:34,020 --> 00:00:34,260
Right?

10
00:00:34,300 --> 00:00:39,230
We want to output raw JSON that represents WordPress posts and pages.

11
00:00:39,660 --> 00:00:42,720
Now, right away I have some good news, actually.

12
00:00:42,720 --> 00:00:43,910
Amazing news.

13
00:00:44,250 --> 00:00:48,270
We do not need to stress about the JSON syntax.

14
00:00:48,660 --> 00:00:55,020
We can simply return THP data and WordPress will do all of the hard work for us.

15
00:00:55,410 --> 00:01:02,120
WordPress will automatically convert data structures into valid JSON for us.

16
00:01:02,700 --> 00:01:08,520
Now, if everything I just said makes zero sense, that's OK, because right now we're going to jump

17
00:01:08,520 --> 00:01:13,240
into a hands on exercise so you can see first hand what I'm talking about.

18
00:01:13,530 --> 00:01:15,930
So right now, let's jump into our text editor.

19
00:01:16,290 --> 00:01:23,310
And within my theme folder, I'm going to look within my ANC folder, which is just a popular abbreviation

20
00:01:23,310 --> 00:01:24,390
for includes.

21
00:01:24,660 --> 00:01:30,900
And let's open up our search route file that we created in the previous lesson.

22
00:01:31,950 --> 00:01:37,770
Now, we know that whatever this function down here returns, that's what we will receive when we send

23
00:01:37,770 --> 00:01:39,000
a request to this.

24
00:01:39,000 --> 00:01:40,430
You are around.

25
00:01:40,920 --> 00:01:47,190
So with that in mind, let's get rid of this temporary placeholder sample text of congratulations.

26
00:01:47,700 --> 00:01:52,350
And instead, just as a test, let's return a array.

27
00:01:52,710 --> 00:01:59,400
So return and then let's just say the word array with its own parentheses, semicolon at the end and

28
00:01:59,400 --> 00:02:05,410
then in between the parentheses, maybe say red, comma, orange, comma, yellow.

29
00:02:06,300 --> 00:02:13,800
Now, before I save this, I just want to point out that this is valid code, but this is not valid

30
00:02:13,800 --> 00:02:19,790
JavaScript, which consequently means that this is not valid JSON in the slightest.

31
00:02:20,310 --> 00:02:21,150
But check this out.

32
00:02:21,150 --> 00:02:25,920
If I save this and refresh my custom API URL.

33
00:02:27,340 --> 00:02:28,910
We see that it works just fine.

34
00:02:28,960 --> 00:02:36,720
This is valid, Jason, and that's because WordPress automatically converted data into JSON data.

35
00:02:37,120 --> 00:02:40,960
So this means we don't need to stress about JSON syntax.

36
00:02:41,290 --> 00:02:46,540
We can just continue to write code like we've been doing throughout the entire course.

37
00:02:46,720 --> 00:02:51,530
And WordPress will take care of the conversion from the JSON for us.

38
00:02:51,970 --> 00:02:58,020
So for another quick example, instead of just a simple array, let's try to create an associative array.

39
00:02:58,720 --> 00:03:02,650
So let's delete this and instead return a new array.

40
00:03:03,550 --> 00:03:07,180
And for associative arrays, I always like to drop down to a new line.

41
00:03:07,600 --> 00:03:16,660
And the example I always use for an associative ray is cat equals meow, dog equals bark.

42
00:03:17,260 --> 00:03:24,610
Now again, this is normal standard PHP code, but if you tried to run this same code, this same syntax

43
00:03:24,610 --> 00:03:28,010
in JavaScript, the world might come to an end, right?

44
00:03:28,090 --> 00:03:30,700
This is not valid JavaScript code at all.

45
00:03:31,210 --> 00:03:39,310
But if we go ahead and save it and refresh our new URL, we see a JavaScript object with a property

46
00:03:39,310 --> 00:03:42,020
named cat with a value of MÃƒ.

47
00:03:42,280 --> 00:03:45,540
Now you might be thinking big deal, who cares?

48
00:03:45,880 --> 00:03:48,820
So it converts into JSON.

49
00:03:49,030 --> 00:03:50,560
Why is that such a big deal?

50
00:03:50,830 --> 00:03:56,860
Well, the reason it's a big deal is this means we can continue to use all of WordPress is built in

51
00:03:56,860 --> 00:04:00,460
functions that we've been learning about throughout this entire course.

52
00:04:00,820 --> 00:04:07,930
What I mean by this is you and I already know how to write custom queries to get the exact WordPress

53
00:04:07,930 --> 00:04:13,960
content out of the database that we want so we can continue to write the code that does that.

54
00:04:14,170 --> 00:04:19,820
And then WordPress will do the hard work of converting that data into JSON syntax.

55
00:04:20,110 --> 00:04:21,550
So let me show you what I mean.

56
00:04:21,550 --> 00:04:22,930
Let's give ourselves a goal.

57
00:04:23,320 --> 00:04:29,500
Let's imagine we want to return raw JSON data for a few of the professor posts.

58
00:04:29,830 --> 00:04:33,370
So let me show you how we can do that back in our code.

59
00:04:33,670 --> 00:04:37,690
Let's delete this associative array and also the word return here.

60
00:04:38,320 --> 00:04:41,640
So now we've just got a completely blank function down here.

61
00:04:42,040 --> 00:04:50,500
And if we want to return JSON for professor posts, let's go ahead and create a new variable named Prof's.

62
00:04:51,340 --> 00:04:52,510
This name does not matter.

63
00:04:52,510 --> 00:04:54,820
I'm just choosing it because I think it makes sense.

64
00:04:55,180 --> 00:05:03,160
And let's set this variable to equal a new instance of the WP query class.

65
00:05:04,210 --> 00:05:08,170
So we've used the WP query class many times throughout the course.

66
00:05:08,410 --> 00:05:14,290
You might remember that within its parentheses, you just give it an array of options that describe

67
00:05:14,290 --> 00:05:16,020
which posts you're looking for.

68
00:05:16,360 --> 00:05:21,030
So let's give it an array with its own set of parentheses within those parentheses.

69
00:05:21,040 --> 00:05:22,080
Let's drop down.

70
00:05:22,780 --> 00:05:28,380
And in this case, we only need to target one property, which is post type.

71
00:05:29,440 --> 00:05:32,350
And let's go ahead and set that to equal Professor.

72
00:05:33,160 --> 00:05:33,700
All right.

73
00:05:33,710 --> 00:05:41,470
So now the data for the ten most recently created professors will live within this variable now throughout

74
00:05:41,470 --> 00:05:42,590
this entire course.

75
00:05:42,820 --> 00:05:47,920
Our next step would usually be to loop through this collection of posts.

76
00:05:48,220 --> 00:05:48,450
Right.

77
00:05:48,500 --> 00:05:55,980
So maybe down here we would say while and just use a while loop to do something once for each post that

78
00:05:56,020 --> 00:05:57,520
lives within this collection.

79
00:05:57,880 --> 00:06:00,090
However, in this case, we don't need to do that.

80
00:06:00,100 --> 00:06:01,630
We don't need a while loop.

81
00:06:02,470 --> 00:06:07,180
We normally loop through a collection in order to generate HTML.

82
00:06:07,420 --> 00:06:10,900
But in this case, we don't need to generate HTML.

83
00:06:11,140 --> 00:06:14,810
We just need to pass on a bit of data to the rest API.

84
00:06:15,310 --> 00:06:16,170
So check this out.

85
00:06:16,180 --> 00:06:24,220
We can literally just return our Prof's variable, but instead of returning this object as a whole,

86
00:06:24,370 --> 00:06:25,900
let's look inside it.

87
00:06:25,900 --> 00:06:30,320
So Dasch greater than for a property named posts.

88
00:06:31,030 --> 00:06:34,490
This is where all of the data for the resulting posts lives.

89
00:06:34,720 --> 00:06:39,310
This is the data that we would usually be looping through and a bit of a spoiler.

90
00:06:39,310 --> 00:06:41,710
It's just an array of objects.

91
00:06:42,130 --> 00:06:43,750
Each object is a post.

92
00:06:44,230 --> 00:06:47,310
So if we go ahead and return that, let's save this file.

93
00:06:47,980 --> 00:06:54,510
And then if we go and refresh our API URL here we see data for the professor posts.

94
00:06:54,730 --> 00:06:59,040
It's hard to make sense of the data when it's all smushed together like this.

95
00:06:59,440 --> 00:07:06,700
So if we view this same Eurail over in the Postman app, we can see that we're working with a JavaScript

96
00:07:06,700 --> 00:07:10,540
array of objects and each object is a post.

97
00:07:10,840 --> 00:07:16,810
Each one has properties like an IED, an author, the body content, the title.

98
00:07:17,170 --> 00:07:18,160
You get the idea.

99
00:07:18,460 --> 00:07:25,300
Now, this is great, but we don't need all of these properties when it comes to our search overlay.

100
00:07:25,450 --> 00:07:26,650
We really only need the.

101
00:07:26,870 --> 00:07:32,630
Idle the permalink and maybe just one or two other properties, which means there's no sense in forcing

102
00:07:32,630 --> 00:07:39,110
the visitors of our website to download all of this JSON data, considering we won't ever use 90 percent

103
00:07:39,110 --> 00:07:40,110
of these properties.

104
00:07:40,490 --> 00:07:48,740
So back in our code, instead of returning the posts array that gets generated by our WP query, instead

105
00:07:48,740 --> 00:07:54,410
of returning that as a whole, which gives us all of this information we don't necessarily need, why

106
00:07:54,410 --> 00:08:01,040
don't we instead return an array that we build ourselves piece by piece that only contains the data

107
00:08:01,040 --> 00:08:01,840
that we want?

108
00:08:02,240 --> 00:08:05,770
So to do that, why don't we create a brand new empty array?

109
00:08:06,080 --> 00:08:14,480
We could name it whatever we want, but I'm going to name it Professor Results and let's set that to

110
00:08:14,480 --> 00:08:16,560
equal an empty array.

111
00:08:17,090 --> 00:08:23,150
We will work on populating the array in just a moment, but then down here on the return line, let's

112
00:08:23,150 --> 00:08:25,850
just return that array.

113
00:08:25,880 --> 00:08:28,400
So Professor results.

114
00:08:29,060 --> 00:08:33,470
OK, so we've created a brand new empty array and then that's what we are returning.

115
00:08:33,740 --> 00:08:40,000
So now all we need to do is populate this array with only the exact data that we want.

116
00:08:40,340 --> 00:08:46,790
And in order to do that, we are going to use our good old friend, the WordPress loop, because we've

117
00:08:46,790 --> 00:08:51,980
already got this collection of posts thanks to using WP query.

118
00:08:52,310 --> 00:08:55,400
So now let's just loop through this collection.

119
00:08:55,820 --> 00:09:02,660
But instead of outputting a bit of HTML for each item in the collection, let's instead push a little

120
00:09:02,660 --> 00:09:05,030
bit of data onto this empty array.

121
00:09:05,330 --> 00:09:06,500
Let me show you what I mean.

122
00:09:06,530 --> 00:09:10,030
So right below this line, let's begin a loop.

123
00:09:10,250 --> 00:09:11,900
Let's use a while loop.

124
00:09:11,900 --> 00:09:18,380
So while parentheses curly brackets, the condition for the while loop or how many times we want to

125
00:09:18,380 --> 00:09:24,680
loop is just prof's the name of our WP query object.

126
00:09:25,010 --> 00:09:32,380
And you might remember from earlier in the course that this object contains a method named have posts.

127
00:09:32,930 --> 00:09:39,380
So however many posts live within this collection is how many times this loop should run or repeat itself.

128
00:09:39,920 --> 00:09:43,820
OK, then within the body of our while loop within the curly brackets.

129
00:09:43,820 --> 00:09:51,440
Remember, you always want to begin the loop by saying prof's your query object and then calling the

130
00:09:51,530 --> 00:09:52,250
post.

131
00:09:53,150 --> 00:09:58,340
We remember that this gets all of the relevant data for the current post ready and accessible.

132
00:09:58,550 --> 00:10:01,160
So now we can do whatever we want.

133
00:10:01,490 --> 00:10:09,200
And what I want to do is introduce you to a tool in P named Array Push.

134
00:10:10,460 --> 00:10:12,880
This function takes two arguments.

135
00:10:13,160 --> 00:10:19,460
So just as a placeholder we could say A and B, and the first argument is the array that you want to

136
00:10:19,460 --> 00:10:25,080
add on to, which in our case is this empty array that we created up on this line.

137
00:10:25,580 --> 00:10:30,620
So for the first argument, let's just say professor results, OK?

138
00:10:30,650 --> 00:10:34,690
And then the second argument is what you want to add on to the array.

139
00:10:34,970 --> 00:10:40,580
So just as an example, let's delete that placeholder and let's just add a string of text that says

140
00:10:40,580 --> 00:10:41,130
hello.

141
00:10:41,480 --> 00:10:42,170
So quotes.

142
00:10:42,170 --> 00:10:42,650
Hello.

143
00:10:43,100 --> 00:10:46,340
Now, if I save this and then refresh postman.

144
00:10:48,960 --> 00:10:55,680
We see an array with Halo three times, and that's because we've got three professor posts in our collection,

145
00:10:56,100 --> 00:11:01,350
so this loop is just going to add a new item to this empty array each time it runs.

146
00:11:01,770 --> 00:11:06,990
So now all we need to do is add something that's actually useful instead of just hello.

147
00:11:07,500 --> 00:11:15,450
So, for example, we could try to add the title of each post so we could delete that and say get the

148
00:11:15,840 --> 00:11:17,720
title right.

149
00:11:17,730 --> 00:11:21,090
That's a built in WordPress function so we could go ahead and call that here.

150
00:11:21,810 --> 00:11:23,790
Save that refresh postman.

151
00:11:25,380 --> 00:11:29,110
Cool, so we see the title for each one of the three professor posts.

152
00:11:29,580 --> 00:11:35,550
However, if we stop and think about it, we don't just want a single value to represent each post.

153
00:11:35,910 --> 00:11:42,570
We probably want multiple properties for each post, write the title and the permalink and maybe the

154
00:11:42,570 --> 00:11:43,160
ID.

155
00:11:43,470 --> 00:11:47,400
So back in our code for this second argument, let's do this.

156
00:11:47,400 --> 00:11:49,200
Let's get rid of get the title.

157
00:11:49,950 --> 00:11:55,210
And instead of just adding a single simple value here, let's add an array.

158
00:11:55,650 --> 00:11:57,780
So this is sort of Arae inception.

159
00:11:58,110 --> 00:12:03,670
Each time our loop code runs, we want to add a new array within the overall empty array.

160
00:12:04,020 --> 00:12:09,660
Now, within this array that we want to add, let's drop down within the parentheses and let's just

161
00:12:09,660 --> 00:12:11,820
build out an associative array.

162
00:12:12,360 --> 00:12:15,150
Now we can make up whatever property names we want.

163
00:12:15,150 --> 00:12:19,490
But just as an example, let's say we want there to be a property named title.

164
00:12:20,040 --> 00:12:21,750
So we just set that's equal.

165
00:12:22,080 --> 00:12:23,920
Get the title.

166
00:12:24,570 --> 00:12:26,010
Then we could add another property.

167
00:12:26,010 --> 00:12:29,700
So comma, and then we could make up whatever property name we want.

168
00:12:30,030 --> 00:12:36,960
Let's say we want to output the permalink so we could call the property bureau or link or permalink.

169
00:12:37,170 --> 00:12:37,860
Doesn't matter.

170
00:12:37,870 --> 00:12:39,330
You can make up whatever you want.

171
00:12:39,790 --> 00:12:46,650
But what does matter is we want to set it to equal the results of a WordPress function named Get the

172
00:12:47,340 --> 00:12:48,090
Permalink.

173
00:12:48,750 --> 00:12:49,210
All right.

174
00:12:49,230 --> 00:12:56,310
So now the array that we are returning to the rest API within that array will be three mini arrays that

175
00:12:56,310 --> 00:12:58,790
each contain a title and a permalink.

176
00:12:59,130 --> 00:13:02,130
So if we save this and then refresh postman.

177
00:13:03,690 --> 00:13:10,560
Perfect, we've now got an array of three objects, and each object contains a title and a permalink,

178
00:13:11,070 --> 00:13:17,340
so this means that we now have a general idea of how to build our own custom array that contains only

179
00:13:17,340 --> 00:13:20,530
the exact data that we want now at this point.

180
00:13:20,550 --> 00:13:21,930
Let's change gears a bit.

181
00:13:22,230 --> 00:13:28,260
Let's focus on the entire reason we are building this new Eurail in the first place, and that is to

182
00:13:28,260 --> 00:13:30,440
power our live search overlay.

183
00:13:30,810 --> 00:13:36,510
Now, at the moment, we are just returning the ten most recent professors, or in my case, since I

184
00:13:36,510 --> 00:13:40,230
don't even have a full 10, I'm just returning all of my professors.

185
00:13:40,560 --> 00:13:44,430
So Dr. Rogerson, Dr. Bachs Lott and Dr. Miaows a lot.

186
00:13:44,730 --> 00:13:49,650
But what if someone used our search overlay to search for Bachs a lot?

187
00:13:50,100 --> 00:13:53,970
Well, in that case, we wouldn't want to return all professor posts.

188
00:13:54,390 --> 00:13:59,340
We would only want to return this one post that contains the phrase barks a lot.

189
00:13:59,760 --> 00:14:04,440
And as you might have guessed, that's exactly what we're going to learn, how to set up and code in

190
00:14:04,440 --> 00:14:05,550
our next lesson.

191
00:14:06,030 --> 00:14:08,460
Let's keep things rolling and I will see you then.
