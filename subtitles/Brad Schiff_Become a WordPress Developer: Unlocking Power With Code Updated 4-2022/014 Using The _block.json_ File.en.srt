1
00:00:02,760 --> 00:00:03,660
Hello, everyone.

2
00:00:03,990 --> 00:00:11,040
In this lesson, I want to talk about a file named BLOCK JSON which can make loading our blocks, JavaScript

3
00:00:11,040 --> 00:00:13,680
and CC files a little bit simpler.

4
00:00:14,190 --> 00:00:15,570
Let's jump into the action.

5
00:00:15,840 --> 00:00:18,990
So here I am in our Are You paying attention folder?

6
00:00:19,290 --> 00:00:27,690
And just in the route of this plugins folder, let's create a brand new file and name it block dot JSON.

7
00:00:27,690 --> 00:00:30,030
It needs to be this exact name, block dot.

8
00:00:30,070 --> 00:00:32,430
Jason okay.

9
00:00:32,430 --> 00:00:35,130
Now the question becomes, what do we do inside this file?

10
00:00:35,460 --> 00:00:39,810
Well, first, let's talk a little bit about what in the world this file is supposed to be.

11
00:00:40,380 --> 00:00:45,240
So if we look at the official WordPress documentation, you can find this, by the way, by Googling

12
00:00:45,240 --> 00:00:46,730
for WordPress block dot.

13
00:00:46,770 --> 00:00:48,720
Jason, this should be the first result.

14
00:00:49,320 --> 00:00:56,700
But here we can see that starting in WordPress version 5.8, which was the summer of 2021, WordPress

15
00:00:56,700 --> 00:01:02,340
officially started recommending using this file as the canonical way to register block types.

16
00:01:02,970 --> 00:01:07,590
And then right here you'll see a bit of example code that we're just going to copy and paste.

17
00:01:08,130 --> 00:01:12,930
If you don't want to visit this WordPress documentation page in your browser, you can always find the

18
00:01:12,930 --> 00:01:19,470
completed files as a downloadable zip associated with this lesson, but I'm just going to select everything

19
00:01:19,470 --> 00:01:20,190
in this example.

20
00:01:20,220 --> 00:01:26,070
Bit of code, copy that into my clipboard and then back in our empty block JSON pasted in.

21
00:01:26,250 --> 00:01:28,470
Now we don't need every single property here.

22
00:01:29,070 --> 00:01:31,440
Let's start at the top and we can sort of work our way through.

23
00:01:31,440 --> 00:01:38,610
So this dollar sign schema, this just defines which properties this file should and should not contain.

24
00:01:39,210 --> 00:01:42,930
API version two that will come into play a little bit later on in the video.

25
00:01:43,110 --> 00:01:44,610
For now, we can skip over that.

26
00:01:44,940 --> 00:01:48,420
Let's definitely change the name value, right?

27
00:01:48,420 --> 00:01:51,030
So it has the namespace and then the name of our block.

28
00:01:51,690 --> 00:01:56,550
So if you jump into index dot B and for me it's around line number 21.

29
00:01:56,550 --> 00:02:01,470
But you might remember that this is the name of our block type, our plug in slash.

30
00:02:01,470 --> 00:02:02,670
Are you paying attention?

31
00:02:02,670 --> 00:02:05,640
So I would just use that as my name value here.

32
00:02:07,140 --> 00:02:11,760
The human readable title is Are You Paying Attention?

33
00:02:12,540 --> 00:02:18,120
And now the idea here is that if you define one of these properties in this blocked out JSON file,

34
00:02:18,270 --> 00:02:21,030
you don't need to define it in your JavaScript file.

35
00:02:21,150 --> 00:02:26,310
So in other words, you could now go into your JavaScript file and remove the title property.

36
00:02:26,910 --> 00:02:31,920
I won't bore you with most of these properties because they're the exact same thing that you would include

37
00:02:31,920 --> 00:02:33,180
in your JavaScript file.

38
00:02:33,450 --> 00:02:35,490
So there's really nothing too exciting here.

39
00:02:36,030 --> 00:02:40,200
I would actually just delete category parent icon description.

40
00:02:40,210 --> 00:02:42,000
I'm going to delete all of these.

41
00:02:44,000 --> 00:02:49,640
All the way down to these lines, down at the bottom of editor, script, script, view, script, editor,

42
00:02:49,640 --> 00:02:50,990
style and style.

43
00:02:51,680 --> 00:02:55,370
These properties are the entire reason I wanted to make this video.

44
00:02:55,820 --> 00:02:58,040
So as you saw all those properties we deleted.

45
00:02:58,190 --> 00:02:58,600
Yes.

46
00:02:58,610 --> 00:03:01,490
BLOCK dot JSON can be used for many different things.

47
00:03:01,730 --> 00:03:07,700
But ultimately the thing I find most interesting is that we can point towards our assets, our JavaScript

48
00:03:07,700 --> 00:03:10,520
and CC files from within this file.

49
00:03:10,520 --> 00:03:15,320
And then you and I don't need to manually load in and queue them within PHP.

50
00:03:15,860 --> 00:03:18,440
We can cover all five of these properties in the video.

51
00:03:18,440 --> 00:03:23,300
But first let's begin with editor, script and editor style.

52
00:03:23,810 --> 00:03:27,290
So I'll actually move Ed style up so that they're sitting together.

53
00:03:27,920 --> 00:03:34,820
So these are the JavaScript and CC assets that will only be loaded in the admin editor screen, not

54
00:03:34,820 --> 00:03:36,290
the front end of our website.

55
00:03:36,800 --> 00:03:38,480
So let's go ahead and save this file.

56
00:03:38,480 --> 00:03:44,120
And just to prove that it's actually working and going to load our assets, let's go into our index

57
00:03:44,120 --> 00:03:49,560
dot AP file because actually before WordPress will truly make use of block dot.

58
00:03:49,580 --> 00:03:54,890
Jason, we need to adjust something in PHP when we're calling register block type.

59
00:03:55,580 --> 00:04:02,240
So previously, remember when we used register block type, the first argument is the name of our block.

60
00:04:02,720 --> 00:04:09,080
Well, if you're using block dot JSON, you instead want this first argument to just point towards the

61
00:04:09,080 --> 00:04:12,890
folder or directory that contains the block dot JSON file.

62
00:04:13,580 --> 00:04:16,130
So that's the current folder that we're in right now.

63
00:04:16,140 --> 00:04:23,420
So really this first argument would instead just be underscore, underscore, die, r underscore, underscore.

64
00:04:24,140 --> 00:04:24,560
Cool.

65
00:04:24,890 --> 00:04:27,230
Also because we're using block dot Jason.

66
00:04:27,230 --> 00:04:34,640
Now, we don't need to manually spell out our editor script or our editor style so we can get rid of

67
00:04:34,640 --> 00:04:35,870
that within this array.

68
00:04:36,230 --> 00:04:43,070
And also, we don't need to register them as files on these two lines so we can get rid of this line

69
00:04:43,070 --> 00:04:44,870
of code and get rid of this line of code.

70
00:04:46,190 --> 00:04:51,410
So now literally all we're doing is just saying, hey, use this directory that has a blocked JSON file

71
00:04:51,710 --> 00:04:55,140
and we are still pointing towards our PHP render callback.

72
00:04:55,850 --> 00:05:00,980
But with this in place, we can save this file, make sure you have your block dot JSON file saved.

73
00:05:01,370 --> 00:05:04,160
And to test it out, let's just go edit a post.

74
00:05:05,240 --> 00:05:10,300
So I'll edit this yet another post which contains a copy of our quiz block.

75
00:05:10,310 --> 00:05:11,060
There it is.

76
00:05:11,810 --> 00:05:14,150
You can even perform a hard refresh if you want to.

77
00:05:14,150 --> 00:05:14,990
Just to prove the point.

78
00:05:14,990 --> 00:05:17,570
You can hold down the shift key and click the reload icon.

79
00:05:19,790 --> 00:05:20,120
Cool.

80
00:05:20,120 --> 00:05:22,610
So it's actually loading our assets.

81
00:05:23,210 --> 00:05:30,110
However, if I zoom out a little bit, you'll notice that the quiz block is taking up the full available

82
00:05:30,110 --> 00:05:31,910
width instead of previously.

83
00:05:31,910 --> 00:05:35,210
It knew that it should only take up about this much horizontal space.

84
00:05:35,780 --> 00:05:42,710
Also, currently, I can't just click on the block and have it change the right hand sidebar so that

85
00:05:42,710 --> 00:05:44,870
you can change the color of the block.

86
00:05:45,200 --> 00:05:51,650
In other words, if I use this list view icon right about here, then yes, I can click on Are You Paying

87
00:05:51,650 --> 00:05:52,130
Attention?

88
00:05:52,130 --> 00:05:57,350
And notice as soon as I click on that you can indeed have the block menu on the right hand sidebar.

89
00:05:57,410 --> 00:06:03,200
So in other words, why are we not able to see that any more by just actually clicking on the block

90
00:06:03,200 --> 00:06:03,530
here?

91
00:06:04,370 --> 00:06:10,280
Well, this is where if we go back in the block that JSON, this is where this API version two comes

92
00:06:10,280 --> 00:06:10,970
into play.

93
00:06:11,690 --> 00:06:17,750
Essentially, if you opt into this newest version, version two, that means that you now need to micro-manage

94
00:06:17,750 --> 00:06:22,880
or babysit the wrapper element for the block itself in the editor.

95
00:06:23,330 --> 00:06:30,110
So previously, when we had not yet opted in to this version two, WordPress would add its own generic

96
00:06:30,110 --> 00:06:36,350
wrapper element around our block here in the editor, and it would handle all the programming and logic

97
00:06:36,350 --> 00:06:42,500
so that when you click on that area, it knows to treat it as selected in the editor screen as a whole.

98
00:06:43,130 --> 00:06:48,080
So the question becomes, well, how do we take that into our own hands, or how do we make that happen

99
00:06:48,080 --> 00:06:49,670
now that we're using this new version?

100
00:06:50,090 --> 00:06:56,420
Well, luckily, it's not too difficult, so we just need to jump into our JavaScript file for our block.

101
00:06:56,420 --> 00:06:59,960
So in the sassy folder, jump in to index dot.

102
00:06:59,960 --> 00:07:06,800
Jess Up at the top of this file, we're looking for the line where we're importing items from slash

103
00:07:06,800 --> 00:07:07,940
block editor.

104
00:07:08,510 --> 00:07:13,160
So then in the curly brackets where we're importing or structuring from block editor, we would just

105
00:07:13,160 --> 00:07:18,890
add a comma, pull in one more item called use block props.

106
00:07:19,730 --> 00:07:20,750
So we just use this.

107
00:07:20,750 --> 00:07:25,940
And then you and I don't need to program any of the logic that WordPress uses to know that a block is

108
00:07:25,940 --> 00:07:28,190
selected, so on and so forth.

109
00:07:28,220 --> 00:07:31,010
So we just need to go use this on our wrapper element.

110
00:07:31,340 --> 00:07:32,480
Let me show you how we use it.

111
00:07:32,960 --> 00:07:36,320
So let's scroll down and find our edit component function.

112
00:07:36,950 --> 00:07:40,520
Here it is now, right within the body of this function.

113
00:07:40,520 --> 00:07:46,440
So as soon as it starts right here, let's add a brand new line and let's just create a constant called

114
00:07:46,460 --> 00:07:47,300
block props.

115
00:07:47,300 --> 00:07:48,350
You could name it anything.

116
00:07:48,350 --> 00:07:50,270
So there's nothing special about this name.

117
00:07:50,270 --> 00:07:57,110
I just made it up but set that to equal and then use block props parentheses to actually call that.

118
00:07:57,890 --> 00:08:02,840
And now you would just make sure that you give this to your wrapper element and then WordPress will

119
00:08:02,840 --> 00:08:05,000
take care of the rest, right?

120
00:08:05,000 --> 00:08:10,640
So it will have the on click events, any sort of subtle styling to show that the block is selected,

121
00:08:10,640 --> 00:08:11,750
so on and so forth.

122
00:08:12,080 --> 00:08:15,230
So then we would just go down into the sex that we're returning.

123
00:08:16,010 --> 00:08:22,790
So for us, it's this div and right after the V and div, but before class name, I would just say curly

124
00:08:22,790 --> 00:08:26,510
brackets, dot, dot, dot, block props.

125
00:08:27,140 --> 00:08:31,370
So the three dots like this, we would refer to this as the spread syntax.

126
00:08:31,880 --> 00:08:34,970
Essentially whatever properties live inside of block props.

127
00:08:35,450 --> 00:08:38,630
Each one will be applied to this wrapper element.

128
00:08:38,900 --> 00:08:42,260
So this way we don't need to spell each property out one by one.

129
00:08:42,860 --> 00:08:49,400
Now, if you and I were not already parsing class name and style onto this div, we'd be done.

130
00:08:49,700 --> 00:08:55,340
But because we do have these props of class, name and style, let me show you what we need to do.

131
00:08:56,030 --> 00:09:02,720
Let's actually cut these into our clipboard so I would begin selecting from class name and just select

132
00:09:02,720 --> 00:09:06,770
all the way to these closing two curly brackets for the style prop as well.

133
00:09:06,770 --> 00:09:08,930
So just cut that into your clipboard.

134
00:09:09,140 --> 00:09:13,880
So now literally the only thing on this opening wrapper element is just block props.

135
00:09:14,900 --> 00:09:15,290
Okay.

136
00:09:15,290 --> 00:09:22,190
And now I want you to scroll back up to when we called use block props essentially in these parentheses.

137
00:09:22,190 --> 00:09:28,070
When we're calling use block props, we can give it an object and now anything we give it, WordPress

138
00:09:28,070 --> 00:09:31,640
will know to sort of merge that into any of its properties.

139
00:09:31,880 --> 00:09:32,150
Right.

140
00:09:32,150 --> 00:09:36,170
That it's using for basic behaviors like knowing when the element is selected or not.

141
00:09:36,650 --> 00:09:38,780
So this is where we would just paste in our clipboard.

142
00:09:39,080 --> 00:09:41,750
Only these shouldn't be phrased as props.

143
00:09:41,750 --> 00:09:44,330
This should be phrased it just properties and values.

144
00:09:44,660 --> 00:09:50,570
So instead of class name equals, it would be class name, colon, and then a string of text.

145
00:09:50,900 --> 00:09:53,720
After the string we add a comma we could drop down.

146
00:09:53,720 --> 00:09:57,020
It wouldn't be style equals, it would be style colon.

147
00:09:57,620 --> 00:10:00,020
And then we don't need the double opening curly brackets.

148
00:10:00,020 --> 00:10:00,770
We just need one.

149
00:10:00,770 --> 00:10:02,870
We don't need double closing curly brackets.

150
00:10:02,870 --> 00:10:03,530
Just one.

151
00:10:04,250 --> 00:10:04,610
Cool.

152
00:10:04,610 --> 00:10:10,190
So just like this, we can give that a save and actually make sure that your NPM task is running.

153
00:10:10,190 --> 00:10:12,170
So NPM run start.

154
00:10:13,350 --> 00:10:13,740
Cool.

155
00:10:13,740 --> 00:10:15,300
And let's go test this out.

156
00:10:16,290 --> 00:10:21,990
So back in the editor screen, when I refresh, we're hoping that we can actually click on that block

157
00:10:21,990 --> 00:10:22,320
now.

158
00:10:22,560 --> 00:10:22,980
Cool.

159
00:10:22,980 --> 00:10:25,320
So now it knows to not take up the full width.

160
00:10:25,710 --> 00:10:32,100
Also, as soon as I click on it perfect, it actually shows the appropriate menu in the right hand side.

161
00:10:32,460 --> 00:10:37,590
Also notice that WordPress knew to give it the slight blue border because it's selected or active.

162
00:10:38,550 --> 00:10:41,910
So that takes care of our editor success in JavaScript.

163
00:10:41,940 --> 00:10:45,840
Now let's change gears and talk about the front end assets.

164
00:10:46,230 --> 00:10:48,900
So really quick, let me just change this color click update.

165
00:10:48,900 --> 00:10:51,780
So that gives me this link to view the post on the front end.

166
00:10:52,560 --> 00:10:52,950
Perfect.

167
00:10:52,980 --> 00:10:58,050
Now let's talk about making sure we're loading the access and JavaScript for our block on the front

168
00:10:58,050 --> 00:10:58,470
end.

169
00:10:59,010 --> 00:11:02,850
Let's start with the CCed because it's a lot simpler than the JavaScript.

170
00:11:03,330 --> 00:11:06,420
So essentially back in our blocked JSON file.

171
00:11:07,080 --> 00:11:11,160
So you'll notice there's style, but there is no view style.

172
00:11:11,640 --> 00:11:12,970
Let me explain what's going on here.

173
00:11:12,990 --> 00:11:19,080
So when you see editor and then scripter style, that means it will only be loaded in the editor if

174
00:11:19,080 --> 00:11:20,290
there's no word in front of it.

175
00:11:20,300 --> 00:11:26,100
So if it's just script or just style, it's going to be loaded on both the editor and the front end.

176
00:11:26,310 --> 00:11:29,550
And if you see the word view, that means it's only for the front end.

177
00:11:30,060 --> 00:11:36,870
Unfortunately, there is no view style, so there is no way to load a CSV file just for the front end.

178
00:11:37,170 --> 00:11:40,250
Well, there is a way if you take matters into your own hands.

179
00:11:40,260 --> 00:11:46,530
We already did that in our index dot ap file but using blocked dot Jason, you would just provide your

180
00:11:46,530 --> 00:11:49,560
front end CSV file here and hopefully.

181
00:11:49,560 --> 00:11:54,060
Right, see selectors that don't select anything on the admin side.

182
00:11:54,720 --> 00:11:56,670
So in other words, here's what I would do.

183
00:11:57,210 --> 00:12:00,900
Our file is not named style boxes if you look in the build folder.

184
00:12:00,900 --> 00:12:01,200
Right.

185
00:12:01,410 --> 00:12:04,740
Ours is named front end dot CST.

186
00:12:04,770 --> 00:12:10,560
So for this style property I would just change this file name to front end next.

187
00:12:10,560 --> 00:12:11,940
Go ahead and give that a save.

188
00:12:12,270 --> 00:12:18,570
To prove that it's working, we need to go remove our manual CST that we load it index dot up.

189
00:12:19,080 --> 00:12:24,780
So in our AP file around line number 24, we have our HTML render callback function.

190
00:12:25,200 --> 00:12:29,520
And remember we wrote this if statement, we said if you are not in the admin.

191
00:12:29,520 --> 00:12:35,460
So in other words, if you're on the front end load our CSC in JavaScript assets.

192
00:12:36,030 --> 00:12:41,280
So we would just delete this on queue style line, completely delete that line.

193
00:12:41,550 --> 00:12:44,580
So this way we can prove that our access is being loaded.

194
00:12:44,580 --> 00:12:45,720
So I'll give that a save.

195
00:12:45,930 --> 00:12:48,000
Make sure you're blocked out, JSON is saved.

196
00:12:48,240 --> 00:12:51,200
And now if we refresh the front end, perfect.

197
00:12:51,210 --> 00:12:53,010
We still have these styles.

198
00:12:53,250 --> 00:12:59,100
You can really prove that it's working by, you know, getting an answer wrong or correct or to really

199
00:12:59,100 --> 00:12:59,940
prove that it's working.

200
00:12:59,940 --> 00:13:02,280
You could just provide a wrong path here on purpose.

201
00:13:02,670 --> 00:13:05,820
So if I point towards a file that doesn't exist, refresh.

202
00:13:06,300 --> 00:13:07,230
You get the idea.

203
00:13:08,130 --> 00:13:09,030
We put that back.

204
00:13:09,420 --> 00:13:09,950
Perfect.

205
00:13:11,220 --> 00:13:12,650
So that takes care of the cost.

206
00:13:12,660 --> 00:13:18,240
At this point, the only detail remaining is the client side JavaScript for the front end.

207
00:13:18,870 --> 00:13:23,010
The reason I saved this for last is because it's not perfect in my opinion.

208
00:13:23,640 --> 00:13:27,360
So WordPress gives us editors script, which is just for the editor.

209
00:13:28,080 --> 00:13:32,340
It gives us a script which would load in both environments, the editor and the front end.

210
00:13:32,610 --> 00:13:35,850
And finally, it gives us Vue script, which is just for the front end.

211
00:13:36,540 --> 00:13:38,080
So you would think this is perfect.

212
00:13:38,100 --> 00:13:46,260
However, WordPress will not load the view script for you if your block uses a PHP render callback function.

213
00:13:46,590 --> 00:13:52,470
And because every block that I ever create is most likely going to use a b render callback function.

214
00:13:52,890 --> 00:13:54,720
That means we can't rely on this.

215
00:13:55,380 --> 00:14:00,990
So to be clear, if our block type did not use a pre render callback, then this would work.

216
00:14:00,990 --> 00:14:07,170
WordPress would indeed load this for us just on the front end because we are using a callback function.

217
00:14:07,170 --> 00:14:09,360
The question becomes what are our options?

218
00:14:09,840 --> 00:14:13,170
Well, let me go ahead and delete view script because it's not going to work for us.

219
00:14:13,680 --> 00:14:14,990
So you have two options.

220
00:14:15,000 --> 00:14:18,630
A, you could just leave this code that we've already written in place.

221
00:14:18,930 --> 00:14:23,790
The WordPress documentation will tell you that you're going to have to load the file yourself like this

222
00:14:24,090 --> 00:14:26,160
if you're using a render callback function.

223
00:14:26,790 --> 00:14:28,050
So that's option number one.

224
00:14:28,050 --> 00:14:33,000
Just continue to load the JavaScript yourself or let me show you what another option is.

225
00:14:33,000 --> 00:14:37,590
You could get rid of this, you could delete this if statement where we're loading JavaScript.

226
00:14:37,980 --> 00:14:42,060
So now literally all our callback function is doing is just rendering this HD HTML.

227
00:14:42,060 --> 00:14:43,580
You could save that, right?

228
00:14:43,590 --> 00:14:50,340
Obviously now no client side JavaScript will load and what you could do is just take advantage of this

229
00:14:50,340 --> 00:14:51,360
script property.

230
00:14:51,660 --> 00:14:57,120
So this file will load for both environments, both the editor and the front end.

231
00:14:57,990 --> 00:15:01,590
So I can just point towards my front end js file.

232
00:15:01,590 --> 00:15:01,830
Oops.

233
00:15:01,830 --> 00:15:02,880
I mean spell it correctly.

234
00:15:03,180 --> 00:15:05,040
Give that a save as soon as I refresh.

235
00:15:05,910 --> 00:15:06,240
Woops.

236
00:15:06,240 --> 00:15:07,620
You can see it doesn't work.

237
00:15:07,830 --> 00:15:12,870
And this is because WordPress is loading it in the head instead of down in the foot.

238
00:15:13,680 --> 00:15:19,140
So in other words, the dorm hasn't loaded in been processed by the time our JavaScript runs, so it

239
00:15:19,140 --> 00:15:21,300
can't see the content that is looking for.

240
00:15:21,750 --> 00:15:26,910
This is a bit frustrating because when you load a JavaScript asset and PHP in WordPress you can tell

241
00:15:26,910 --> 00:15:28,480
it to be true or false, right?

242
00:15:28,510 --> 00:15:30,420
Whether you want it to load in the footer or not.

243
00:15:30,810 --> 00:15:36,390
As of today, there doesn't appear to be a way to do that when you're loading a file from JavaScript

244
00:15:36,390 --> 00:15:37,950
like this or JSON.

245
00:15:38,640 --> 00:15:42,570
So what you could do is go into our front end JavaScript.

246
00:15:42,570 --> 00:15:44,490
So in the CRC folder, front end.

247
00:15:44,850 --> 00:15:45,360
Yes.

248
00:15:45,930 --> 00:15:51,210
And you could just wrap all of our code so that it only runs after the DOM has been passed.

249
00:15:51,810 --> 00:15:56,550
So in other words, you would select everything in this file except for these three import lines at

250
00:15:56,550 --> 00:15:57,060
the top.

251
00:15:57,060 --> 00:16:02,060
So just select from this constant divs line down to the very, very bottom.

252
00:16:02,070 --> 00:16:08,010
Cut that into your clipboard, wrap it inside document dot add event listener.

253
00:16:09,180 --> 00:16:11,310
That takes two arguments for the first argument.

254
00:16:11,310 --> 00:16:15,090
The event we're listening for is Dom content loaded.

255
00:16:15,660 --> 00:16:18,990
Second argument is just a function in that function.

256
00:16:18,990 --> 00:16:22,170
Just paste back in your clipboard so you can give that a save.

257
00:16:22,380 --> 00:16:24,480
Now when you refresh perfect.

258
00:16:25,110 --> 00:16:26,610
The DOM has actually been passed.

259
00:16:26,850 --> 00:16:30,930
It's almost as if we're loading the JavaScript in the footer instead of in the header.

260
00:16:31,500 --> 00:16:33,060
So that is an option.

261
00:16:33,270 --> 00:16:35,430
Personally, I probably wouldn't want to do that.

262
00:16:35,670 --> 00:16:40,350
Also, this JavaScript is now going to be loaded on the editor side as well.

263
00:16:40,860 --> 00:16:45,390
Now, if you wrote your JavaScript in a flexible way so that it's not going to throw any errors if it

264
00:16:45,390 --> 00:16:46,020
loads here.

265
00:16:46,260 --> 00:16:46,740
Cool.

266
00:16:47,250 --> 00:16:52,020
But remember, you can always use the option that we already had previous to this lesson, right?

267
00:16:52,140 --> 00:16:58,080
Where you load the JavaScript, file yourself, you on, queue it yourself from within your PHP render

268
00:16:58,080 --> 00:17:01,500
callback that is going to bring this lesson to a close.

269
00:17:01,710 --> 00:17:08,490
To summarize, the block dart JSON file is the official way that WordPress recommends we register our

270
00:17:08,490 --> 00:17:14,190
block types and in my opinion, it can make loading our assets a lot simpler.

271
00:17:14,700 --> 00:17:16,750
For a working example that you can reference.

272
00:17:16,770 --> 00:17:22,260
Remember, you can always download the associated zip file for this lesson with my finished product

273
00:17:22,260 --> 00:17:22,650
code.

274
00:17:23,190 --> 00:17:27,090
Let's keep our momentum rolling and I will see you in the next lesson.
