1
00:00:01,110 --> 00:00:02,170
Hello, everyone.

2
00:00:02,400 --> 00:00:08,430
In this lesson, we are going to continue working on our live search results, JavaScript.

3
00:00:08,760 --> 00:00:15,360
OK, so the first thing that I want to work on is if someone opens up the search overlay and after they

4
00:00:15,360 --> 00:00:21,300
type something in and then pause for a second or two, instead of waiting 2000 milliseconds to output

5
00:00:21,300 --> 00:00:28,140
this test message to the console instead, why don't we practice outputting real HTML content into this

6
00:00:28,140 --> 00:00:29,570
area of the overlay?

7
00:00:29,880 --> 00:00:30,180
Right.

8
00:00:30,180 --> 00:00:33,540
Because that's where we want the real search results to be displayed.

9
00:00:34,050 --> 00:00:40,710
Now, before we worry about JavaScript, why don't we first make sure that we have an empty HTML div

10
00:00:40,800 --> 00:00:43,130
that's positioned to sit right about here.

11
00:00:43,680 --> 00:00:50,940
So in order to edit the HTML for the search overlay, let's jump into our text editor and open up footer

12
00:00:50,940 --> 00:00:52,260
dot BHP.

13
00:00:52,590 --> 00:00:59,940
And down at the very bottom of this file, remember we added this search overlay div OK, now right

14
00:00:59,940 --> 00:01:06,420
below this inner search overlay top div, so right below this, but still within the overall search

15
00:01:06,420 --> 00:01:07,830
overlay, outer div.

16
00:01:08,160 --> 00:01:16,620
Let's dropdown and create a brand new div and give it a class of container and then within this div

17
00:01:16,620 --> 00:01:23,490
let's create another give and give it an idea of search overlay.

18
00:01:24,180 --> 00:01:27,080
Underscore, underscore results.

19
00:01:28,440 --> 00:01:29,520
The name doesn't matter.

20
00:01:29,530 --> 00:01:35,250
I'm just making this up so that it's something unique we can target in our JavaScript for now.

21
00:01:35,250 --> 00:01:42,810
Just as a quick test, if you typed hello one, two, three and go and refresh the page and there we

22
00:01:42,810 --> 00:01:43,200
see it.

23
00:01:43,800 --> 00:01:44,130
Cool.

24
00:01:44,130 --> 00:01:45,210
So let's delete that.

25
00:01:45,210 --> 00:01:53,670
Hello text message from the HTML so that this div is completely empty and instead let's use JavaScript

26
00:01:53,670 --> 00:01:58,730
to add content to this div after the two thousand millisecond delay has passed.

27
00:01:59,190 --> 00:02:06,210
So right now let's jump in to our JavaScript folder and then modules and into the search JS file.

28
00:02:06,480 --> 00:02:13,050
And let's begin by creating a new property in our constructor that selects that new empty div that we

29
00:02:13,050 --> 00:02:13,940
just created.

30
00:02:14,310 --> 00:02:19,710
So in the constructor function, maybe at the very top of it we can just say this dot and then we can

31
00:02:19,710 --> 00:02:21,630
make up whatever name we want.

32
00:02:21,960 --> 00:02:27,090
I'm going to call it results div and set it to equal.

33
00:02:27,150 --> 00:02:33,900
So dollar sign parentheses to use J query and then for the selector we use hash tag to select by the

34
00:02:33,900 --> 00:02:41,280
IDE and remember we gave it an ID of search overlay, underscore underscore results.

35
00:02:42,450 --> 00:02:46,890
OK, now next, let's scroll down to our Taiping Logic method.

36
00:02:47,250 --> 00:02:53,490
Remember this is where we created the set time outer timer that's going to wait two thousand milliseconds

37
00:02:53,730 --> 00:02:56,760
after a keystroke before running this code.

38
00:02:57,390 --> 00:02:57,690
Right.

39
00:02:57,690 --> 00:02:59,660
This is what's logging out to the console.

40
00:02:59,670 --> 00:03:01,410
This is a time out test.

41
00:03:01,590 --> 00:03:08,490
So now instead of logging out a message to the console, we want to output content into that empty results

42
00:03:08,490 --> 00:03:14,610
div so we could write code right within this anonymous function to add content to that div.

43
00:03:14,610 --> 00:03:14,820
Right.

44
00:03:14,820 --> 00:03:21,270
We could delete this console log line, but in the name of staying organized and writing clean code

45
00:03:21,450 --> 00:03:26,580
instead of using an anonymous inline function like this, why don't we delete that.

46
00:03:26,580 --> 00:03:29,070
Remember a set time out takes two arguments.

47
00:03:29,520 --> 00:03:33,360
The first is a function that you want to run and then how long you want to wait.

48
00:03:33,570 --> 00:03:36,390
So instead of spelling out the function, write in place here.

49
00:03:36,660 --> 00:03:40,080
Why don't we create a brand new method right below this?

50
00:03:41,070 --> 00:03:42,780
And let's name this new method.

51
00:03:43,260 --> 00:03:51,570
Get results, parentheses, curly brackets, OK, and then let's tell our time out to call that method

52
00:03:51,810 --> 00:03:53,340
once the time has passed.

53
00:03:53,580 --> 00:04:00,180
So for the first argument, we can just say this dot get results and then while we're at it, why don't

54
00:04:00,180 --> 00:04:07,330
we tack on dot find this so that we can access our object properties and methods from within the git

55
00:04:07,380 --> 00:04:08,400
results method.

56
00:04:08,730 --> 00:04:14,460
Now, a bit later on within this method is where we will actually make a request to the WordPress server.

57
00:04:14,640 --> 00:04:20,190
But for now, let's just try to output some sample text into that empty results div.

58
00:04:20,520 --> 00:04:25,770
So remember, we can access that empty div with this new property we created up in the constructor.

59
00:04:26,070 --> 00:04:27,720
The name is results div.

60
00:04:28,260 --> 00:04:37,320
So down in our new method we can say this dot results div and then we can edit the HTML for that div

61
00:04:37,320 --> 00:04:45,150
by using the query method named for each HTML and then within the parentheses, let's just say quotes.

62
00:04:45,630 --> 00:04:50,460
Imagine real search results here.

63
00:04:51,180 --> 00:04:57,240
OK, let's go ahead and save that and test it out, open up the search overlay, type in a bit of text

64
00:04:57,240 --> 00:04:59,610
and then two thousand milliseconds later we see.

65
00:04:59,980 --> 00:05:05,880
Imagine real search results here, so that works, but in my opinion, the user experience is quite

66
00:05:05,880 --> 00:05:12,690
bad because there's this big gap in time from when the user starts typing until they finally see some

67
00:05:12,690 --> 00:05:14,110
sort of feedback here.

68
00:05:14,490 --> 00:05:21,450
So what I propose instead is the millisecond that someone types in even the very first letter, we should

69
00:05:21,450 --> 00:05:27,180
display a spinning loader icon animation right here in that empty results div.

70
00:05:27,190 --> 00:05:33,690
And then once our results method finally runs, this text can replace the spinning load or animation.

71
00:05:34,020 --> 00:05:35,280
So let me show you what I mean.

72
00:05:35,580 --> 00:05:42,090
Back in our code, within our typing logic method, right above this line where we create the time out

73
00:05:42,630 --> 00:05:48,780
and right below this clear time outline, let's add a new line and let's just target that empty results

74
00:05:48,780 --> 00:05:58,470
div so this dot results div and let's just set its HTML single quotes so that way we can use double

75
00:05:58,470 --> 00:06:01,170
quotes within the HTML that we want to add.

76
00:06:01,320 --> 00:06:05,550
And let's just add an empty div and the important part.

77
00:06:05,550 --> 00:06:12,690
Let's give the opening div tag a class of Spiner Dash Loader.

78
00:06:13,380 --> 00:06:17,120
I've already written the CSFs for us that corresponds with this name.

79
00:06:17,580 --> 00:06:23,460
So if we go ahead and save this and jump back to the browser, let's open up the search overlay and

80
00:06:23,460 --> 00:06:25,620
as soon as I press even one letter.

81
00:06:27,050 --> 00:06:33,230
Perfect, so that way, as soon as someone types a letter, they get immediate feedback with that spinner

82
00:06:33,230 --> 00:06:39,740
loader icon, but we are still waiting for a pause in their typing to actually create or send off a

83
00:06:39,740 --> 00:06:40,520
request.

84
00:06:40,820 --> 00:06:41,040
Right.

85
00:06:41,090 --> 00:06:43,790
Or in this case, display this sample text.

86
00:06:44,090 --> 00:06:46,540
So we're sort of getting the best of both worlds.

87
00:06:47,000 --> 00:06:53,120
However, you will notice that if I type in something like a full word, you'll notice that after each

88
00:06:53,120 --> 00:06:56,540
keystroke, the spinner animation is resetting.

89
00:06:59,180 --> 00:07:00,510
So that looks pretty choppy.

90
00:07:01,820 --> 00:07:08,780
So what we should do instead is write our code in a way that we only apply this code that adds the spinner

91
00:07:08,780 --> 00:07:09,230
div.

92
00:07:09,590 --> 00:07:13,390
We only do that if it's not already being displayed.

93
00:07:13,850 --> 00:07:18,860
So that way we don't constantly overwrite it on each new keystroke like this.

94
00:07:19,580 --> 00:07:20,840
So let me show you what I mean.

95
00:07:20,840 --> 00:07:25,120
The way that I would achieve this is up in our constructor function.

96
00:07:25,460 --> 00:07:31,520
I'm going to create a new property that keeps track of the state that the spinner is currently in.

97
00:07:31,910 --> 00:07:37,160
Now, it doesn't matter where in the constructor, but maybe right underneath this line, let's just

98
00:07:37,160 --> 00:07:47,090
say this dot and then we can make up a property name, let's call it is Spiner visible and by default,

99
00:07:47,090 --> 00:07:48,390
let's set it defaults.

100
00:07:49,190 --> 00:07:52,570
OK, now down within our Taiping logic method.

101
00:07:52,970 --> 00:07:57,980
Remember, this is the line of code we wrote just a moment ago that adds the Spiner Llodra div.

102
00:07:57,990 --> 00:08:01,420
So let's just wrap this within an if statement.

103
00:08:01,760 --> 00:08:09,560
So I'm going to cut this line into my clipboard and then in its place I will say if parentheses curly

104
00:08:09,560 --> 00:08:20,090
brackets and the condition that I want to check for is if this dot is biner visible only if that is

105
00:08:20,090 --> 00:08:24,530
false, meaning if it's not already visible do I want to make it visible.

106
00:08:24,980 --> 00:08:28,010
So you could say if this equals false.

107
00:08:28,010 --> 00:08:34,250
But remember a shorter way of checking if an item is false, as you can just place an exclamation mark

108
00:08:34,250 --> 00:08:35,060
right before it.

109
00:08:35,510 --> 00:08:40,430
OK, so only if that is false do we want to and then just paste in your clipboard.

110
00:08:40,980 --> 00:08:46,760
OK, now if this line of code is going to make the Spiner visible, then right after that still within

111
00:08:46,760 --> 00:08:50,380
the statement, we should probably set that property to true.

112
00:08:50,780 --> 00:08:57,720
So let's say this dot is biner visible and just set it to true.

113
00:08:58,220 --> 00:09:02,480
OK, now before we save this, remember that this get results function.

114
00:09:02,690 --> 00:09:08,570
This is what's going to hide the Spiner once it's ready and it's going to override the div with this

115
00:09:08,570 --> 00:09:09,730
little bit of text.

116
00:09:09,980 --> 00:09:15,550
So in other words, as soon as this line of code runs, then the spinner will no longer be visible.

117
00:09:15,920 --> 00:09:25,150
So right after this line of code, let's just say this dot is Spiner visible and set it to false.

118
00:09:25,760 --> 00:09:31,920
OK, so this way we are managing that property so we can truly trust its value in this if statement.

119
00:09:32,360 --> 00:09:38,860
So let's go ahead and save this and test out Taiping to open up the overlay.

120
00:09:38,870 --> 00:09:45,500
And if I type in biology, notice that after every keystroke the Spiner icon is not resetting.

121
00:09:45,950 --> 00:09:47,390
So it's no longer copy.

122
00:09:47,390 --> 00:09:49,400
And this is now a great experience.

123
00:09:50,030 --> 00:09:55,640
And once I stop typing for a second there we see our immagine search results here message.

124
00:09:56,120 --> 00:10:02,330
However, you might notice that in this TextField, if I even use the arrow keys on my keyboard to move

125
00:10:02,330 --> 00:10:05,540
my cursor around, that counts as a keystroke.

126
00:10:05,720 --> 00:10:11,120
That will trigger the loading spinner and also try to send out another search request potentially.

127
00:10:11,450 --> 00:10:16,810
And the same is true with the control key or the shift or windows or command keys.

128
00:10:17,180 --> 00:10:22,790
So why don't we change our JavaScript so that if you press a key that doesn't actually change the search

129
00:10:22,790 --> 00:10:27,630
string in any way, then there's no need to trigger the lotus spinner or do anything at all.

130
00:10:27,980 --> 00:10:33,710
Now, there are a lot of different ways to code this, but what I'm going to do is up in the constructor

131
00:10:33,710 --> 00:10:34,250
function.

132
00:10:34,610 --> 00:10:39,970
I'm going to create a property that keeps track of the previous search value.

133
00:10:40,340 --> 00:10:41,230
So check this out.

134
00:10:41,240 --> 00:10:43,820
Up in the constructor, let's create a new line.

135
00:10:44,150 --> 00:10:45,410
Let's create a new property.

136
00:10:45,410 --> 00:10:53,780
So this dot and we could name it whatever we want, but I'm going to call it previous value and we do

137
00:10:53,780 --> 00:10:56,030
not need to set it to equal anything yet.

138
00:10:56,030 --> 00:11:03,770
We can just declare it as a property and then down in our typing logic method right before this method

139
00:11:03,770 --> 00:11:04,300
ends.

140
00:11:04,310 --> 00:11:09,080
So down here at the very bottom of this method, let's just update that property.

141
00:11:09,320 --> 00:11:17,600
So let's say this dot previous value equals and then let's just fetch the value of the search field

142
00:11:17,990 --> 00:11:23,960
so we can access our search field by saying this dot search field, because remember, we created a

143
00:11:23,960 --> 00:11:26,150
property that points towards that element.

144
00:11:26,550 --> 00:11:31,290
And then we can just use the vow method in January, and that will give us the value.

145
00:11:31,590 --> 00:11:37,350
OK, so this method is going to run after every keystroke and we aren't updating the previous value

146
00:11:37,350 --> 00:11:40,060
property until the very end of this method.

147
00:11:40,560 --> 00:11:45,630
So up here at the very beginning of this method, why don't we write an if statement?

148
00:11:45,930 --> 00:11:53,550
So if parentheses, curly brackets and for the condition, let's say only if the current value does

149
00:11:53,550 --> 00:11:55,860
not equal the previous value.

150
00:11:56,070 --> 00:11:59,340
Only if that's the case do we want to run all of this other code.

151
00:11:59,550 --> 00:12:08,520
So for the condition, let's say if the current value so this search field dot, Val and Val is a function,

152
00:12:08,520 --> 00:12:10,000
so it gets its own parentheses.

153
00:12:10,020 --> 00:12:19,590
So if that value does not equal the previous value of this dot previous value, so only if the keystroke

154
00:12:19,590 --> 00:12:23,320
that they just pressed actually changed the search string in some way.

155
00:12:23,490 --> 00:12:25,360
Do we want to run any of this code?

156
00:12:25,470 --> 00:12:30,330
So now we can just cut and paste or drag and drop this code to live within this if statement.

157
00:12:30,600 --> 00:12:36,150
So I'm going to select from clear time out all the way down to our set time outline.

158
00:12:36,330 --> 00:12:40,710
So basically everything except that previous value line that we wrote just a moment ago.

159
00:12:41,010 --> 00:12:45,900
Let's cut that into our clipboard and then let's just paste it into this if statement.

160
00:12:48,010 --> 00:12:54,190
OK, let's go ahead and save that and test it out in the browser, open up the search, search for by

161
00:12:54,190 --> 00:12:56,030
all gee, OK.

162
00:12:56,050 --> 00:13:01,090
And then if I press an arrow key on my keyboard, woops, we still see the loading icon.

163
00:13:01,090 --> 00:13:02,730
So something's going wrong here.

164
00:13:03,400 --> 00:13:03,880
Aha.

165
00:13:03,910 --> 00:13:05,130
I know what the issue is.

166
00:13:05,500 --> 00:13:08,230
So it comes down to key down versus key up.

167
00:13:08,530 --> 00:13:11,970
In this case we want to use key up instead of key down.

168
00:13:11,980 --> 00:13:15,010
So let's change this and then I will explain why.

169
00:13:15,760 --> 00:13:19,210
The reason for this is because the key down event fires.

170
00:13:19,210 --> 00:13:25,870
So immediately after a key press that it doesn't even give the search field a true chance to update

171
00:13:25,870 --> 00:13:26,880
its own value.

172
00:13:27,100 --> 00:13:32,230
In other words, when this was set to key down and then we were trying to update the previous value

173
00:13:32,230 --> 00:13:38,320
property with the current value, the key down event was being fired before the Web browser had truly

174
00:13:38,320 --> 00:13:41,590
even updated the internal value for that field.

175
00:13:41,800 --> 00:13:47,410
So by changing the event to keep up instead of key down, the Web browser will have enough time, an

176
00:13:47,410 --> 00:13:51,760
extra couple of milliseconds to actually register the input value.

177
00:13:52,100 --> 00:13:58,090
OK, so with this change in place, let's go ahead and save tested out one more time, open this up,

178
00:13:58,210 --> 00:13:59,290
search for a term.

179
00:13:59,650 --> 00:14:05,020
And now if I pressed the arrow key or the shift gear control key or any other key that doesn't actually

180
00:14:05,020 --> 00:14:10,480
manipulate the search string, our code is working as intended and it doesn't trigger any changes.

181
00:14:10,780 --> 00:14:11,420
Perfect.

182
00:14:11,650 --> 00:14:16,570
Now, the next thing I want to work on is if someone completely deletes the search string so that the

183
00:14:16,570 --> 00:14:17,950
search field is empty.

184
00:14:18,220 --> 00:14:21,760
In that case, there's no need to show the spinning loader animation.

185
00:14:22,040 --> 00:14:23,650
So let me put it back to biology.

186
00:14:23,800 --> 00:14:24,820
If someone deletes it.

187
00:14:24,820 --> 00:14:30,820
So there's nothing there, I think we should just immediately completely empty out the results div and

188
00:14:30,820 --> 00:14:34,440
reset or clear any timeouts that are currently counting down.

189
00:14:34,720 --> 00:14:39,830
So that way we don't potentially send a search request to WordPress for literally nothing.

190
00:14:40,180 --> 00:14:46,120
So in order to make that change, back in our text editor, if the keystroke in some way changed the

191
00:14:46,120 --> 00:14:51,370
search string in this case, hitting the backspace key on your keyboard would indeed do that, then

192
00:14:51,370 --> 00:14:53,710
we still want to run the clear time out.

193
00:14:53,950 --> 00:14:59,350
Right, because if someone empties out the search field, we definitely do want to cancel that countdown

194
00:14:59,350 --> 00:14:59,860
timer.

195
00:15:00,040 --> 00:15:02,680
So we want this line of code to run no matter what.

196
00:15:02,680 --> 00:15:09,250
But right below this clear time outline, let's drop down and write a new line of code and let's create

197
00:15:09,250 --> 00:15:10,450
a new if statement.

198
00:15:10,460 --> 00:15:18,160
So if parentheses, curly brackets and for the condition, let's say only if the search field value

199
00:15:18,160 --> 00:15:19,090
is not blank.

200
00:15:19,660 --> 00:15:26,560
So we can say this dot search field and then we can get its value or whatever the user has currently

201
00:15:26,560 --> 00:15:28,810
typed in by running the vowel method.

202
00:15:29,290 --> 00:15:33,900
And as long as the field is not completely blank, this will evaluate to true.

203
00:15:34,300 --> 00:15:38,910
So if that's true, then within the curly brackets, we will do something here very shortly.

204
00:15:39,130 --> 00:15:44,990
But if this is false and if the field is completely blank, we want to do something different.

205
00:15:45,430 --> 00:15:52,090
So right after the closing curly brackets for this if statement, we can say else curly brackets as

206
00:15:52,090 --> 00:15:54,610
a backup plan, do this instead.

207
00:15:54,970 --> 00:16:02,200
So if the field is empty in this else code runs, let's just completely empty out the results div so

208
00:16:02,200 --> 00:16:11,860
we can just say this dot results div and we can change its HTML by running the bakery method html and

209
00:16:11,860 --> 00:16:15,000
then let's just set it to equal an empty pair of quotes.

210
00:16:15,460 --> 00:16:21,640
Now after this line of code runs, there's a zero percent chance that the spinner loader icon will be

211
00:16:21,640 --> 00:16:22,180
visible.

212
00:16:22,600 --> 00:16:26,650
So right after that line, let's be sure to set this dot.

213
00:16:27,010 --> 00:16:29,670
Is Spiner visible.

214
00:16:30,130 --> 00:16:31,810
Let's set it to equal false.

215
00:16:32,860 --> 00:16:38,860
OK, and now before we save this, let's not forget about the do something comment instead of that comment.

216
00:16:38,860 --> 00:16:43,660
We just want to move this code that we were running before to live where this is.

217
00:16:44,140 --> 00:16:46,000
So let's cut and paste or move this.

218
00:16:46,000 --> 00:16:51,910
I'm going to begin by selecting from this if statement checks to see if the Spiner icon is currently

219
00:16:51,910 --> 00:16:52,780
visible or not.

220
00:16:53,110 --> 00:16:57,640
So select that if statement and then let's also select our set time outline.

221
00:16:58,480 --> 00:17:00,640
So let's cut that into our clipboard.

222
00:17:01,360 --> 00:17:05,860
And then up here, let's replace the do something comment by pasting in your clipboard.

223
00:17:06,340 --> 00:17:08,740
Let's go ahead and save that and test it out.

224
00:17:10,220 --> 00:17:16,430
Let's search for something, and then if I delete or empty the text field, perfect, our results area

225
00:17:16,430 --> 00:17:20,630
is immediately cleared and we don't see an unnecessary loader icon.

226
00:17:20,870 --> 00:17:25,360
Now, there's only one final remaining thing I want to take care of in this lesson.

227
00:17:25,580 --> 00:17:31,760
So if I closed the search overlay, we can see that behind the scenes right here, I've temporarily

228
00:17:31,760 --> 00:17:33,920
added a test input field.

229
00:17:34,140 --> 00:17:37,380
Now, this placement doesn't make much sense, but that's not the point.

230
00:17:37,760 --> 00:17:43,610
The point is, is that you're probably going to have a text input or a text area field somewhere else

231
00:17:43,610 --> 00:17:47,090
on your website, maybe on a contact us page, for example.

232
00:17:47,300 --> 00:17:52,150
And I want to make sure that our search module doesn't negatively affect other inputs.

233
00:17:52,430 --> 00:17:56,270
So, for example, if I click into this field, I can start typing.

234
00:17:56,270 --> 00:17:56,570
Right.

235
00:17:56,570 --> 00:18:03,440
But if I press the esky, remember that the ASCII is going to trigger our overlay to open.

236
00:18:03,800 --> 00:18:05,030
So that's really awkward.

237
00:18:05,030 --> 00:18:06,950
And it could be frustrating for users.

238
00:18:07,130 --> 00:18:12,890
They think they're typing in a field, but then if they hit the esky, they accidentally open something

239
00:18:12,890 --> 00:18:14,000
that they weren't intending.

240
00:18:14,600 --> 00:18:23,330
So what I propose here to fix this is if a text area or input field currently has focus, then in that

241
00:18:23,330 --> 00:18:27,120
case we do not want the keystroke to open our overlay.

242
00:18:27,470 --> 00:18:33,110
So what we can do back in our code is scroll down to our key press despatcher method.

243
00:18:33,740 --> 00:18:38,810
And remember, this block of code is saying if the key that was just pressed has a key code of eighty

244
00:18:38,810 --> 00:18:44,640
three, which is the key, and if the overlay is not already open, then open it.

245
00:18:44,960 --> 00:18:48,050
So let's just add a third condition right here.

246
00:18:48,050 --> 00:18:53,930
We can say ampersand, ampersand and let's check to see if any text fields on the page are currently

247
00:18:53,930 --> 00:19:02,110
focused so we can use J query and we can select any inputs or comma any text areas.

248
00:19:02,780 --> 00:19:09,350
And then once we've selected those, we can use the query method named IS and provide it in argument

249
00:19:09,380 --> 00:19:12,100
of quotes, call in focus.

250
00:19:12,380 --> 00:19:16,340
So if any field is currently focused, this will evaluate to true.

251
00:19:16,340 --> 00:19:21,260
But if we want to check for the opposite of that, we can just put an exclamation mark right before

252
00:19:21,260 --> 00:19:21,440
it.

253
00:19:21,740 --> 00:19:23,540
OK, and this is the perfect condition.

254
00:19:23,540 --> 00:19:28,490
Check now all of these stars have to align in order for the overlay to be opened.

255
00:19:28,880 --> 00:19:31,100
So let's save this and test it out.

256
00:19:31,370 --> 00:19:35,930
If I click on to this TextField here and type the ASCII, nothing happens.

257
00:19:36,500 --> 00:19:41,720
But as soon as I click out of that text field and press the ASCII, there's the overlay.

258
00:19:41,960 --> 00:19:42,710
Perfect.

259
00:19:42,710 --> 00:19:45,620
And that's going to bring this lesson to a close.

260
00:19:46,010 --> 00:19:49,700
Now, here's the exciting part in our very next lesson.

261
00:19:49,700 --> 00:19:56,000
We are finally going to learn how to actually send a request to the WordPress server or database.

262
00:19:56,270 --> 00:19:58,610
Let's keep it rolling and I will see you then.
