WEBVTT
1
00:00:02.000 --> 00:00:03.030
Hello, everyone.

2
00:00:03.530 --> 00:00:08.750
This is going to be a fairly quick listen, I just want to make a few minor adjustments to our search

3
00:00:08.750 --> 00:00:14.170
overlay before we move on and continue to learn more about the rest API.

4
00:00:14.780 --> 00:00:20.990
The first change I want to make in this lesson has to do with the starter HTML of our overlay.

5
00:00:21.350 --> 00:00:26.560
So I'm referring to just this main overlay div and the actual text input field here.

6
00:00:27.050 --> 00:00:32.750
Now at the moment this HTML lives in our footer dot file.

7
00:00:33.080 --> 00:00:38.570
However, now that we know a bit more about JavaScript, I think it would make more sense to move this

8
00:00:38.570 --> 00:00:42.050
HTML into our search JS file.

9
00:00:42.290 --> 00:00:43.970
It will help us stay organized.

10
00:00:43.970 --> 00:00:49.760
And also if someone comes to the website and they have JavaScript disabled in that case, it doesn't

11
00:00:49.760 --> 00:00:55.850
make sense to send them the extra few bytes for this HTML because they will never even see it or be

12
00:00:55.850 --> 00:00:58.480
able to open up the overlay in the first place.

13
00:00:58.850 --> 00:01:05.900
So long story short, let's jump into our text editor and in our theme folder, let's jump in to footer

14
00:01:06.210 --> 00:01:07.220
BHP.

15
00:01:08.000 --> 00:01:13.640
And if we scroll down to the very bottom here, we see the search overlay div.

16
00:01:14.090 --> 00:01:22.370
So why don't we go ahead and move this HTML out of this footer file and into our search JS file.

17
00:01:22.670 --> 00:01:27.530
So I'm just going to select this entire search overlay div and cut it into my clipboard.

18
00:01:29.020 --> 00:01:37.180
Go ahead and save this file and then let's jump in to our JavaScript modules folder and open up search

19
00:01:37.180 --> 00:01:38.080
J.S..

20
00:01:39.110 --> 00:01:46.480
So the question now is, how can we use JavaScript to add that HTML to the very bottom of the page?

21
00:01:46.910 --> 00:01:47.180
Right.

22
00:01:47.190 --> 00:01:50.540
We want to add it on to the end of the body element.

23
00:01:50.930 --> 00:01:52.540
Well, here's how I would do that.

24
00:01:52.790 --> 00:01:58.940
I would just create a new method in this search JS file, so I would just scroll down to the very bottom.

25
00:02:00.430 --> 00:02:05.470
At the moment, this is the last method I've got listed, so this is the curly bracket for this method

26
00:02:05.680 --> 00:02:09.340
and this is the closing curly bracket for the entire class.

27
00:02:09.670 --> 00:02:11.140
So how about in between those?

28
00:02:11.140 --> 00:02:13.150
We can just create a brand new method.

29
00:02:13.390 --> 00:02:15.060
We can name it whatever we want.

30
00:02:15.400 --> 00:02:22.750
Why don't we call it and search each HTML parentheses, curly brackets?

31
00:02:23.140 --> 00:02:30.640
And within the body of this method, I would just use query to select the overall body element and then

32
00:02:30.640 --> 00:02:33.460
I would use the J query append method.

33
00:02:33.790 --> 00:02:40.960
Append is how you can add HTML to the very end of an element semicolon at the end here and then within

34
00:02:40.960 --> 00:02:46.690
the parentheses for append instead of quotes to create a string instead of quotes.

35
00:02:46.690 --> 00:02:53.500
I would use back Tick's because then we can break down to new lines just like regular HTML.

36
00:02:53.770 --> 00:03:01.030
So just to stay organized in between the back ticks, I would drop down and now it's just as simple

37
00:03:01.030 --> 00:03:02.920
as pasting in our clipboard.

38
00:03:04.670 --> 00:03:10.670
OK, at this point, this method is good to go, but remember that the code within a function isn't

39
00:03:10.670 --> 00:03:13.950
actually executed until you call the function.

40
00:03:14.330 --> 00:03:18.650
So now that we've created this method, let's go back up to the very top of this file.

41
00:03:19.340 --> 00:03:23.650
And in the constructor function, we need to actually call and run the method.

42
00:03:23.960 --> 00:03:26.520
Now, in this case, the ordering does matter.

43
00:03:26.870 --> 00:03:35.210
So let's call that new method up at the very top of our constructor so we can just say this dot and

44
00:03:35.450 --> 00:03:37.800
search each HTML.

45
00:03:38.360 --> 00:03:44.240
The reason we need to do this at the very beginning of our constructor is because otherwise these elements

46
00:03:44.240 --> 00:03:47.270
that we're looking for here won't even exist yet.

47
00:03:47.600 --> 00:03:47.900
Right.

48
00:03:47.920 --> 00:03:54.170
So, for example, this search field property is looking for an element that has an idea of search term,

49
00:03:54.470 --> 00:04:00.110
but that element won't even exist in the browsers, Dom, until this code has had a chance to run.

50
00:04:00.480 --> 00:04:03.830
OK, so at this point, we can go ahead and save this file.

51
00:04:04.470 --> 00:04:10.730
And if I jump over to the browser and open up the overlay, it still works and I can still search for

52
00:04:10.880 --> 00:04:11.810
Buyology.

53
00:04:14.060 --> 00:04:16.170
And the results still make sense.

54
00:04:16.220 --> 00:04:16.970
Perfect.

55
00:04:17.300 --> 00:04:19.010
All right, let's change gears.

56
00:04:19.280 --> 00:04:23.930
And we actually just saw an example of the next thing I want to change.

57
00:04:24.260 --> 00:04:32.060
So, for example, if I now search for Lorem in terms of lorem ipsum, we saw that the loader spinner

58
00:04:32.060 --> 00:04:38.180
icon displays for quite a long time, and that's because I never adjusted it lower from its initial

59
00:04:38.180 --> 00:04:40.190
two thousand millisecond value.

60
00:04:40.530 --> 00:04:42.050
So let's do that right now.

61
00:04:42.530 --> 00:04:48.320
So back in our code in Search Jass, if we scroll down to our typing logic method.

62
00:04:49.650 --> 00:04:56.010
On this line of code where we are saying this typing timer equals we see that I'm still using a value

63
00:04:56.010 --> 00:05:00.060
of 2000 milliseconds and I think that's a bit too long.

64
00:05:00.480 --> 00:05:04.410
So I'm going to change this to seven hundred and fifty milliseconds.

65
00:05:04.410 --> 00:05:04.660
Right.

66
00:05:04.680 --> 00:05:06.300
Just three quarters of a second.

67
00:05:06.900 --> 00:05:09.790
And let's see, I think that should feel a lot better.

68
00:05:10.170 --> 00:05:16.980
So now when I search, you can see as soon as I start typing, it's a much shorter wait.

69
00:05:17.310 --> 00:05:20.250
And I think that feels a lot nicer for end users.

70
00:05:21.330 --> 00:05:22.950
OK, let's change gears again.

71
00:05:23.160 --> 00:05:28.200
The next thing I want to work on now is when someone opens up the search overlay.

72
00:05:28.620 --> 00:05:35.010
I think the TextField should be automatically focused, meaning my cursor should already be placed in

73
00:05:35.010 --> 00:05:40.950
that field automatically so I can start typing instead of having to actually manually click onto the

74
00:05:40.950 --> 00:05:41.850
TextField.

75
00:05:42.330 --> 00:05:50.010
So to make that happen, back in our Search Jass file, let's scroll down to our open overlay method.

76
00:05:50.310 --> 00:05:50.630
Right.

77
00:05:50.640 --> 00:05:54.990
This is responsible for adding the class that makes the overlay div visible.

78
00:05:55.380 --> 00:06:01.140
So as soon as these two lines of code that are responsible for adding classes run right after those

79
00:06:01.140 --> 00:06:03.360
lines on a new line here.

80
00:06:03.360 --> 00:06:08.070
Let's just say this dot search field, right.

81
00:06:08.070 --> 00:06:12.420
This is a property we created up in the constructor that points towards the TextField.

82
00:06:12.420 --> 00:06:19.350
And then on that element, we can just use the query method named Focus, and that will place the user's

83
00:06:19.350 --> 00:06:22.940
cursor within that field and they can immediately begin typing.

84
00:06:23.310 --> 00:06:29.400
However, if I go ahead and say this and test it out in the browser, you'll notice that if I open the

85
00:06:29.400 --> 00:06:33.090
overlay, the text field is not successfully focused.

86
00:06:33.630 --> 00:06:39.030
I'm typing and nothing's happening and I still have to manually click on to that field.

87
00:06:39.960 --> 00:06:45.960
Now, this might not be the case in all Web browsers, but for a lot of browsers, including this version

88
00:06:45.960 --> 00:06:52.410
of Google Chrome, the text field is not being successfully focused because when this new line of code

89
00:06:52.410 --> 00:06:59.280
ran where we are trying to focus the field, the overlay as a whole was not even visible yet because

90
00:06:59.280 --> 00:07:02.940
you'll notice that the overlay does not appear or disappear immediately.

91
00:07:03.220 --> 00:07:07.450
It takes about 300 milliseconds to fade in and fade out.

92
00:07:07.860 --> 00:07:13.980
So back in our code, instead of trying to focus the text field immediately, as soon as the open overlay

93
00:07:13.980 --> 00:07:22.500
method fires instead, why don't we wait 301 milliseconds so that CFS transition is complete?

94
00:07:22.920 --> 00:07:29.040
Or in other words, let's wait until the Web browser actually considers this element visible before

95
00:07:29.040 --> 00:07:30.220
we try to focus it.

96
00:07:30.450 --> 00:07:31.560
So here's what I would do.

97
00:07:31.560 --> 00:07:36.120
Let's cut this new line into our clipboard, this line with the DOT focus.

98
00:07:38.550 --> 00:07:47.480
And in its place, let's just set up a set time out and remember, set time out takes two arguments.

99
00:07:47.820 --> 00:07:53.370
The first is a function that you want to run, and the second argument is how many milliseconds you

100
00:07:53.370 --> 00:07:55.610
want to wait before actually running that.

101
00:07:56.220 --> 00:07:59.250
So why don't we wait 300 in one milliseconds?

102
00:07:59.430 --> 00:08:04.260
That will be just enough time for that success, fade in and fade out to be complete.

103
00:08:04.440 --> 00:08:08.340
And then instead of the X, let's just create an anonymous function.

104
00:08:08.850 --> 00:08:16.800
So function parentheses, curly brackets, and then within the curly brackets you can just paste in

105
00:08:16.800 --> 00:08:17.500
your clipboard.

106
00:08:18.330 --> 00:08:23.970
Now this code will indeed work, but I want to show you how we can save a bit of extra typing here.

107
00:08:24.120 --> 00:08:30.960
Instead of actually spelling out the word function, we can use the S6 Arrow function syntax.

108
00:08:31.140 --> 00:08:35.730
So to do that, we can just delete the word function, but keep the parentheses right after it.

109
00:08:35.820 --> 00:08:37.050
So delete function.

110
00:08:37.620 --> 00:08:40.920
We don't need any parameter so we can leave the parentheses empty.

111
00:08:41.460 --> 00:08:47.490
But right after the parentheses we can just say equal sign greater than to create an arrow symbol.

112
00:08:47.850 --> 00:08:53.430
And then if we're going to write all of the code on a single line like this, we do not need the curly

113
00:08:53.430 --> 00:08:56.010
brackets to indicate the body of the function.

114
00:08:56.340 --> 00:08:59.550
So since we're on a single line, let's just delete these curly brackets here.

115
00:09:01.080 --> 00:09:04.990
And in that case, we also don't need the ending semicolon right here.

116
00:09:06.090 --> 00:09:08.170
OK, so now the code is a bit cleaner.

117
00:09:08.190 --> 00:09:10.670
Let's go ahead and save this and test it out.

118
00:09:10.980 --> 00:09:12.450
If I click on to the overlay.

119
00:09:12.960 --> 00:09:13.530
Perfect.

120
00:09:13.530 --> 00:09:18.170
You can see the text cursor is already blinking and I can just immediately start typing.

121
00:09:19.170 --> 00:09:25.710
This is especially nice because now if someone uses the ASCII shortcut to open up the overlay, they

122
00:09:25.710 --> 00:09:27.150
don't even need to touch their mouse.

123
00:09:27.150 --> 00:09:29.410
They can just immediately begin typing.

124
00:09:30.450 --> 00:09:30.840
All right.

125
00:09:30.840 --> 00:09:35.730
Now, let's change gears again and let's work on the final edit for this lesson.

126
00:09:36.060 --> 00:09:42.780
I want to set things up so that if you perform a search and then close the overlay and then reopened

127
00:09:42.780 --> 00:09:48.870
the overlay, I think it would be nice if the text field was emptied out for you so you can just immediately

128
00:09:48.870 --> 00:09:53.940
begin searching for something else instead of having to manually select it all and delete it.

129
00:09:54.420 --> 00:10:00.750
So to make that happen back in our code right before the set time outline, let's just add a new line

130
00:10:00.750 --> 00:10:03.570
of code and we can just target the search field.

131
00:10:03.590 --> 00:10:11.790
So this dot search field and then let's use queries, Val, which stands for value, let's use the VAL

132
00:10:11.790 --> 00:10:15.960
method and then we can just set it to an empty pair of single quotes.

133
00:10:16.440 --> 00:10:20.410
Let's add a semicolon at the end of the line and then go ahead and save that.

134
00:10:20.970 --> 00:10:25.050
So now I can open up the overlay search for biology.

135
00:10:25.980 --> 00:10:31.650
Maybe I'm not happy with the results so I can close the overlay, keep browsing the site and then if

136
00:10:31.650 --> 00:10:38.130
I open up the overlay again, the field is automatically emptied for me and I can just perform another

137
00:10:38.130 --> 00:10:38.700
search.

138
00:10:39.210 --> 00:10:39.930
Perfect.

139
00:10:40.260 --> 00:10:43.050
And that's going to bring this lesson to a close.

140
00:10:43.440 --> 00:10:48.600
In our next lesson, we will learn more about the WordPress rest API.

141
00:10:48.840 --> 00:10:51.420
Let's keep things rolling and I will see you then.
