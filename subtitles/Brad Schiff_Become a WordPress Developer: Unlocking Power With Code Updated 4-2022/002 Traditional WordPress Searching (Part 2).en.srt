1
00:00:01,320 --> 00:00:02,430
Hello, everyone.

2
00:00:02,880 --> 00:00:09,990
In this video, we are going to pick up right where we left off in the previous one, so up in my address

3
00:00:09,990 --> 00:00:18,090
bar, if I visit slash search and if a visitor types in a search phrase and then click on the submit

4
00:00:18,090 --> 00:00:22,430
button, that takes them to this screen with all of the search results.

5
00:00:22,890 --> 00:00:31,740
However, at the moment, this search results screen is being powered by index dot p p and that explains

6
00:00:31,740 --> 00:00:38,790
why the headline reads Welcome to our blog and all of the content looks like a blog post, even if it

7
00:00:38,790 --> 00:00:42,250
is a professor or program or event post type.

8
00:00:42,570 --> 00:00:50,970
Now, luckily, if your theme folder contains a file named Search Dot p, WordPress will use that to

9
00:00:50,970 --> 00:00:54,230
power this result screen instead of index.

10
00:00:54,660 --> 00:00:59,820
So let's make our first goal for this lesson to customize this headline text.

11
00:01:00,060 --> 00:01:06,870
OK, so the first step to making this happen is to jump over to our text editor and within our theme

12
00:01:06,870 --> 00:01:14,070
folder, let's create a brand new file and let's name it Search dot p p.

13
00:01:14,820 --> 00:01:21,600
Now, in order to save a ton of typing, why don't we copy and paste over everything from index dot

14
00:01:21,640 --> 00:01:25,020
BHP and then just modify what we need to.

15
00:01:25,410 --> 00:01:32,820
So I'm going to hop in index, copy everything into my clipboard and then back in search, paste it

16
00:01:32,820 --> 00:01:33,060
in.

17
00:01:33,570 --> 00:01:35,100
Let's scroll up to the top.

18
00:01:35,130 --> 00:01:41,490
So the first thing I'm going to change is the page banner title instead of welcome to our blog.

19
00:01:41,490 --> 00:01:44,520
Let's just say search results.

20
00:01:45,210 --> 00:01:54,270
OK, and then for the subtitle, let's say this pair of quotes and say you searched for and then I'm

21
00:01:54,270 --> 00:01:57,360
going to wrap their search phrase in double quotes.

22
00:01:57,360 --> 00:02:08,040
So the HTML code for left angled double quotes is ampersand l d q you Yuto semicolon and then I'm just

23
00:02:08,040 --> 00:02:13,770
going to place X as a placeholder, but the actual search phrase will go there in just a moment, but

24
00:02:13,770 --> 00:02:17,790
then right after it, let's add a right angled pair of double quotes.

25
00:02:17,790 --> 00:02:22,740
So ampersand r d q you o semicolon.

26
00:02:23,130 --> 00:02:29,460
OK, and if I save that and refresh the biology search query u rl cool.

27
00:02:29,460 --> 00:02:36,210
So there's our updated header text and now instead of the placeholder X, let's work on outputting the

28
00:02:36,210 --> 00:02:38,810
actual phrase that a user searched for.

29
00:02:39,060 --> 00:02:46,230
So back in our code where the placeholder X is, I don't want to write simple string text.

30
00:02:46,410 --> 00:02:50,490
I want to run a P expression or a function.

31
00:02:50,670 --> 00:02:53,430
So what I'm going to do is write before the X.

32
00:02:53,430 --> 00:03:00,480
We can add in a quote to close out this string of text and then right after that we can add a period

33
00:03:00,780 --> 00:03:02,280
to add on something new.

34
00:03:02,730 --> 00:03:08,730
And then right after the acts we could add on a period and then add an opening quote for the final part

35
00:03:08,730 --> 00:03:09,360
of the string.

36
00:03:09,360 --> 00:03:11,640
That is the double right angled quote.

37
00:03:11,850 --> 00:03:21,360
OK, so now instead of the X, what we want to do is call a WordPress function named get search query.

38
00:03:21,810 --> 00:03:26,550
And if we go ahead and save that and refresh, cool.

39
00:03:26,550 --> 00:03:33,300
We see you searched for biology and if we go up into the address bar and change it to a search for math,

40
00:03:34,410 --> 00:03:36,500
obviously we see that that gets updated.

41
00:03:36,750 --> 00:03:37,230
Cool.

42
00:03:37,230 --> 00:03:43,620
But before we move on and address formatting for the actual result posts, I first want to touch on

43
00:03:43,620 --> 00:03:48,400
a bit of security when it comes to outputting something that is user input.

44
00:03:48,990 --> 00:03:54,090
Let me give you a quick example of why security in this context is so important.

45
00:03:54,330 --> 00:04:02,430
What if someone malicious went up to the address bar and said that they wanted to search for opening

46
00:04:02,430 --> 00:04:09,600
script tag, closing script tag and then in the middle, maybe they tried to run a bit of JavaScript,

47
00:04:10,170 --> 00:04:18,060
so maybe an annoying alert pop up that says, hey, well, luckily by default, WordPress has got us

48
00:04:18,060 --> 00:04:18,600
covered.

49
00:04:18,900 --> 00:04:26,040
We see that that string of text was not executed as JavaScript and instead it just gets output as plain

50
00:04:26,040 --> 00:04:26,850
text here.

51
00:04:27,180 --> 00:04:34,140
This is because the git search query function by default provides a bit of escaping, right.

52
00:04:34,140 --> 00:04:40,350
It escapes code into simple text instead of HTML or JavaScript that can be executed.

53
00:04:40,590 --> 00:04:41,550
If we want to.

54
00:04:41,550 --> 00:04:47,640
We can override that default behavior by going inside the parentheses and saying false.

55
00:04:48,430 --> 00:04:56,220
So if I save that and still leave this malicious code up in the address, bar and refresh, we see that

56
00:04:56,220 --> 00:05:00,810
luckily Google Chrome is smart enough and safe enough to go on not to.

57
00:05:01,610 --> 00:05:06,650
I'm not even going to let you load the page because something very fishy is going on.

58
00:05:06,980 --> 00:05:13,120
Someone probably sent this address to you in an e-mail or spam message hoping that you would see that

59
00:05:13,130 --> 00:05:19,700
the beginning of the Eurail looks safe and then you would just blindly click on the you are not noticing

60
00:05:19,700 --> 00:05:22,560
that the end of it contains malicious JavaScript.

61
00:05:22,880 --> 00:05:28,350
This is probably the most popular and basic example of a cross site scripting attack.

62
00:05:28,700 --> 00:05:32,750
Now, you might be thinking to yourself, big deal, Brad, that's not important, right?

63
00:05:32,750 --> 00:05:36,440
Because it's as simple as just not specifying false here.

64
00:05:36,860 --> 00:05:37,730
Well, that's true.

65
00:05:37,760 --> 00:05:41,370
WordPress does provide security against this by default.

66
00:05:41,630 --> 00:05:45,680
So here's the reason I went into this whole security topic in the first place.

67
00:05:46,040 --> 00:05:49,530
This function works perfectly in the following instance.

68
00:05:49,790 --> 00:05:54,800
So just as an example, I'm going to delete this code in about ten seconds from now, but maybe right

69
00:05:54,800 --> 00:06:04,190
above this container did if I had an input field type of text and I wanted to give it a default value

70
00:06:04,190 --> 00:06:06,200
of whatever the user had searched for.

71
00:06:06,410 --> 00:06:15,390
Well, within the quotes, I'm perfectly safe to just echo out the results of git search query.

72
00:06:16,250 --> 00:06:20,330
So if I save that and refresh, here's that example.

73
00:06:20,330 --> 00:06:25,890
Input field and WordPress escaped it and converted the text into a safe string.

74
00:06:26,030 --> 00:06:33,230
So long story short, if you just want to use the value that someone typed in as a value for an HTML

75
00:06:33,230 --> 00:06:39,610
attribute, you can use this function on its own just like this without any problem, however.

76
00:06:39,620 --> 00:06:41,940
And let me delete this sample input here.

77
00:06:42,530 --> 00:06:49,460
However, if you just want to output it within a string of HTML, maybe within a headline or a paragraph,

78
00:06:49,700 --> 00:06:58,550
the way that WordPress recommends we do that is we call a scale each HTML and then place get search

79
00:06:58,550 --> 00:07:06,470
query within that so that it gets escaped as HTML instead of as a value for an HTML attribute.

80
00:07:06,770 --> 00:07:13,160
And then since this function is taken care of, escaping or converting the text within the inner parentheses

81
00:07:13,160 --> 00:07:15,610
for this function, we can just say false.

82
00:07:15,950 --> 00:07:19,860
Don't worry about escaping it because this function is going to take care of that.

83
00:07:20,030 --> 00:07:21,200
OK, now moving on.

84
00:07:21,200 --> 00:07:24,520
If we save that and refresh perfect.

85
00:07:24,530 --> 00:07:28,780
So we've got this malicious code up here and it is not being executed.

86
00:07:28,790 --> 00:07:29,840
So we are safe.

87
00:07:30,170 --> 00:07:35,780
So now we can go back to pretending that someone is performing a normal search like biology.

88
00:07:36,380 --> 00:07:41,780
And our next goal is to control how the resulting posts are getting formatted.

89
00:07:42,050 --> 00:07:48,590
So back in our code within Search P, here is the beginning of our while loop.

90
00:07:48,920 --> 00:07:56,180
Then we are calling the post and then this div named post item is going to be generated once for each

91
00:07:56,180 --> 00:07:56,780
result.

92
00:07:57,080 --> 00:08:03,950
So basically what we want to do is output different HTML depending on the current post time.

93
00:08:04,280 --> 00:08:07,040
Now there are a lot of different ways we could do this.

94
00:08:07,400 --> 00:08:12,850
The first and most obvious way would just be to write an if statement.

95
00:08:12,860 --> 00:08:24,050
So say if parentheses curly bracket and say if I get a post type equals professor only if that's the

96
00:08:24,050 --> 00:08:25,550
case then do something.

97
00:08:25,910 --> 00:08:33,310
So for example, we could echo an output, maybe a heading level one that says I am a professor.

98
00:08:35,000 --> 00:08:38,410
OK, so if I save that cool.

99
00:08:38,420 --> 00:08:41,780
So there we see it and that's only displaying for the doctor.

100
00:08:41,780 --> 00:08:45,770
Barks a lot post because it's the only result that is a professor.

101
00:08:45,770 --> 00:08:46,080
Right.

102
00:08:46,310 --> 00:08:50,240
So the if statement only evaluates to true in this case.

103
00:08:50,870 --> 00:08:58,760
So we could just set up a bunch of these if blocks and say if post type is post, if post type is program

104
00:08:58,760 --> 00:09:02,060
or event or campus, and that would work just fine.

105
00:09:02,060 --> 00:09:05,850
But it's not the cleanest, most concise way of coding things.

106
00:09:06,200 --> 00:09:10,170
So instead, let me delete that and let me show you what I propose.

107
00:09:10,550 --> 00:09:17,990
So right after this, the post line, let's say this, let's say git template part.

108
00:09:18,620 --> 00:09:22,370
You might remember this WordPress function from many lessons ago.

109
00:09:22,590 --> 00:09:28,760
So for the first argument, you point towards another file that you want to pull in and use.

110
00:09:29,090 --> 00:09:37,160
And many lessons ago we created a sub folder named Template Parts, and inside it we have one file named

111
00:09:37,160 --> 00:09:39,350
Content Dash event.

112
00:09:39,740 --> 00:09:42,140
So let me show you how I'm going to handle things.

113
00:09:42,680 --> 00:09:50,030
For the first argument, I will say go inside the template parts folder and then look for a file that

114
00:09:50,030 --> 00:09:53,120
begins with the word content only.

115
00:09:53,120 --> 00:09:59,090
I'm not going to spell it out and say slash event because I don't want to hardcoded to the event post

116
00:09:59,900 --> 00:10:00,710
instead.

117
00:10:00,790 --> 00:10:10,570
For our second argument within these parentheses, so comma and now if I said events or professor WordPress

118
00:10:10,570 --> 00:10:16,350
would try to find a file in that folder named Content Dasch Professor.

119
00:10:16,720 --> 00:10:23,530
So all we need to do to make this dynamic is instead of a string here with quotes for the second argument,

120
00:10:23,530 --> 00:10:26,490
just say get posted.

121
00:10:26,980 --> 00:10:32,860
So now, depending on each result, WordPress will know where to look as an example for this first result.

122
00:10:32,860 --> 00:10:39,610
Since it's a blog post, WordPress would try to pull in a template file named Content Dasch Post.

123
00:10:39,910 --> 00:10:41,790
So let me show you what I'm going to do.

124
00:10:41,980 --> 00:10:45,460
This code down here, this div with a class of post diatom.

125
00:10:45,880 --> 00:10:50,650
That's basically the template for a generic post, a blog post.

126
00:10:51,280 --> 00:10:58,180
So what I'm going to do is copy this entire div, copy that into my clipboard or actually cut it into

127
00:10:58,180 --> 00:11:05,680
my clipboard and then within our subfolder of template parts, let's create a brand new file and paste

128
00:11:05,680 --> 00:11:06,250
that in.

129
00:11:07,660 --> 00:11:10,120
And then the naming of this file is important.

130
00:11:10,270 --> 00:11:14,440
Let's name it content dash post.

131
00:11:15,400 --> 00:11:18,550
OK, and then let's create another file for the Professor Post.

132
00:11:19,240 --> 00:11:22,720
So within the template parts folder, just create another new file.

133
00:11:23,230 --> 00:11:28,870
Let's save it and name it content dash Professor P.

134
00:11:29,740 --> 00:11:34,630
And the question is what should the HTML code be for, Professor?

135
00:11:34,840 --> 00:11:37,150
Well, there's no sense in reinventing the wheel.

136
00:11:37,150 --> 00:11:45,520
So on the front end in a new tab if we visit the programs page and then Buyology, this is the formatting

137
00:11:45,520 --> 00:11:48,000
that we can use for Professor Post type.

138
00:11:48,280 --> 00:11:56,290
So if I want to find the P in HTML that creates this format, I can just look within single dash program.

139
00:11:56,900 --> 00:12:03,580
So in my text editor single program and then if we scroll down a bit, here's the custom query to pull

140
00:12:03,580 --> 00:12:04,930
in related professors.

141
00:12:04,930 --> 00:12:11,440
And right below that, here's another while loop and here is a list item that will generate that professor

142
00:12:11,440 --> 00:12:12,010
card.

143
00:12:12,310 --> 00:12:15,160
So I can just copy and paste this list item.

144
00:12:15,850 --> 00:12:16,510
Copy that.

145
00:12:16,510 --> 00:12:20,860
And then back in our brand new content dash professor file.

146
00:12:21,100 --> 00:12:22,270
Just paste that in.

147
00:12:22,840 --> 00:12:26,940
OK, next, let's create a new file for the program post type.

148
00:12:27,700 --> 00:12:35,170
So within the template parts, let's just create a new file, let's name it content dash program dot

149
00:12:35,170 --> 00:12:43,900
p p and for program I'm thinking we can pretty much just copy but adjust and modify the blog post formatting

150
00:12:43,900 --> 00:12:44,320
a bit.

151
00:12:44,650 --> 00:12:51,550
So to save typing if we go back into content post, let's copy that, paste it into content program

152
00:12:51,880 --> 00:12:58,630
and we can just get rid of the metabolics, we can keep the excerpt and maybe instead of continue reading

153
00:12:58,630 --> 00:13:01,620
we could say Vue program.

154
00:13:03,060 --> 00:13:10,750
OK, so if I save that and then be sure to save my overall search file and then on the front end, if

155
00:13:10,750 --> 00:13:16,920
I refresh the search results for Buyology, this is using content dash post.

156
00:13:17,410 --> 00:13:19,510
This is using content dash program.

157
00:13:19,510 --> 00:13:23,770
We can see the button has different text and this is using content.

158
00:13:23,770 --> 00:13:24,810
Dash Professor.

159
00:13:25,150 --> 00:13:30,070
Now I'm noticing there's not much of a vertical gap between these two and we also don't see a nice,

160
00:13:30,070 --> 00:13:32,440
subtle border like we do between these two.

161
00:13:32,620 --> 00:13:34,750
And this has nothing to do with WordPress.

162
00:13:34,750 --> 00:13:36,460
It's just the CFS detail.

163
00:13:36,460 --> 00:13:43,630
But to fix that, I'm just going to go into content dash professor and maybe wrap this entire list item

164
00:13:43,630 --> 00:13:51,580
within an outer div that has a class of post item that maybe indent this and then down at the bottom

165
00:13:52,150 --> 00:13:55,240
closing div cool.

166
00:13:55,240 --> 00:13:56,620
That looks a lot better.

167
00:13:56,950 --> 00:14:00,640
So that takes care of four of our six post types.

168
00:14:00,970 --> 00:14:07,300
Why don't we go ahead and create a file for pages and four campuses, so create a new file.

169
00:14:07,750 --> 00:14:15,630
Let's name this one content dash page dot p and let's use content post as our example.

170
00:14:15,640 --> 00:14:24,280
So copy everything from content post pasted in content page except pages probably don't need the metabolics

171
00:14:24,280 --> 00:14:27,490
so we can get rid of the metabolics div save that.

172
00:14:27,520 --> 00:14:30,850
OK, and finally, let's create a file for campuses.

173
00:14:31,240 --> 00:14:36,130
So within our template parts folder, new file paste in our clipboard.

174
00:14:36,610 --> 00:14:43,390
Campuses don't need a metabolics, so let's delete that and for The View more button instead of continue

175
00:14:43,390 --> 00:14:46,900
reading let's say View Campus.

176
00:14:47,410 --> 00:14:52,720
OK, and then let's save this file and name it content dash campus.

177
00:14:53,680 --> 00:14:54,040
Cool.

178
00:14:54,040 --> 00:14:58,300
So now if we perform a search for maybe math instead of biology.

179
00:15:00,670 --> 00:15:07,030
Here's the math program, we can see the button reads view program and cool, the event is styled as

180
00:15:07,030 --> 00:15:07,660
an event.

181
00:15:07,960 --> 00:15:12,350
Now, at this point, we are almost complete with our traditional search.

182
00:15:12,730 --> 00:15:14,960
There are just two more things I want to cover.

183
00:15:15,160 --> 00:15:21,340
So first, what happens if someone searches for something obscure and there are zero results?

184
00:15:21,710 --> 00:15:27,340
OK, and then once we address that, the other thing I want to do is down at the very bottom of a search

185
00:15:27,340 --> 00:15:28,360
results screen.

186
00:15:28,660 --> 00:15:34,330
So maybe down here, I think it would be nice to include a search form so you could perform a follow

187
00:15:34,330 --> 00:15:35,990
up search if you wanted to.

188
00:15:36,220 --> 00:15:41,050
So back in our code, let's jump in to our search file.

189
00:15:41,320 --> 00:15:48,100
And if a search has zero results, we just want to output a message that says no results match that

190
00:15:48,100 --> 00:15:48,730
search.

191
00:15:48,910 --> 00:15:51,990
And we can make this happen with a simple if statement.

192
00:15:52,270 --> 00:15:57,820
So let's do this in search right before this wild blue line.

193
00:15:58,210 --> 00:16:04,840
Let's add an if statement for the condition we can just say have posts.

194
00:16:05,350 --> 00:16:11,200
So only if the search query has posts do we want to do something which we will do here.

195
00:16:11,770 --> 00:16:17,040
And then right after the closing curly bracket, we can say else otherwise do this.

196
00:16:17,350 --> 00:16:21,820
So if the search does have results, then we just want to run our while loop.

197
00:16:21,830 --> 00:16:25,510
So I'm just going to move the while loop as well as the pageant links.

198
00:16:25,990 --> 00:16:30,720
Just going to cut that into the curly brackets for if this condition is true.

199
00:16:30,730 --> 00:16:37,360
So instead of x paste that in and since we are no longer mingling HTML with PHP, we don't need to exit

200
00:16:37,360 --> 00:16:42,220
out of here, which means we don't need to reopen here.

201
00:16:44,690 --> 00:16:54,350
OK, and then for the else, we can just echo out a maybe a heading level two that reads no results

202
00:16:54,350 --> 00:16:56,060
match that search.

203
00:16:56,810 --> 00:17:04,580
And just for styling, let's give the edge to a class of headline and headline, dash, dash, small

204
00:17:04,580 --> 00:17:05,820
dash plus.

205
00:17:06,080 --> 00:17:06,530
All right.

206
00:17:06,530 --> 00:17:12,200
So if I save that and refreshed the math results screen, we still see our results.

207
00:17:12,200 --> 00:17:18,380
But if I search for something super obscure, perfect, no results match that search.

208
00:17:18,720 --> 00:17:24,560
OK, and then the last thing I want to do is add in the search form to perform a new search down here.

209
00:17:24,830 --> 00:17:28,210
And I want it to display whether there are results or not.

210
00:17:28,550 --> 00:17:36,770
So back in search, right after this block of PHP, instead of typing out a bunch of HTML to create

211
00:17:36,770 --> 00:17:41,190
a form, we can just copy and paste the form that we wrote in our previous lesson.

212
00:17:41,420 --> 00:17:48,980
So if I jump into Page Dasch, search and scroll to the bottom, let's just copy this form element.

213
00:17:50,700 --> 00:17:57,810
And then back in search, you could technically just paste that in here, but that would be duplicating

214
00:17:57,810 --> 00:17:59,980
your code, which I'm not a fan of.

215
00:18:00,180 --> 00:18:04,440
Instead, let me show you what we can do within the root of our theme folder.

216
00:18:04,680 --> 00:18:10,800
If we create a brand new file and paste in our clipboard there and then name this file.

217
00:18:10,920 --> 00:18:12,450
And the name is super important.

218
00:18:12,720 --> 00:18:17,500
Search form, no spaces, all lowercase.

219
00:18:18,660 --> 00:18:26,190
OK, now back in search of WordPress has a special function designed to look for that exact file name

220
00:18:26,190 --> 00:18:27,240
of search form.

221
00:18:27,510 --> 00:18:34,920
So maybe right below the curly brackets for the elves we can just say get search for.

222
00:18:35,850 --> 00:18:39,890
So if I save that and refresh the search results, perfect.

223
00:18:40,170 --> 00:18:44,040
So now I could search for biology and we're in business.

224
00:18:44,430 --> 00:18:51,480
And just to reduce duplicate code, let's be sure to go back into page dash search where we just copied

225
00:18:51,480 --> 00:19:00,840
the form from and let's delete the HTML for the form and in its place used to say get search form.

226
00:19:01,530 --> 00:19:01,890
Cool.

227
00:19:01,890 --> 00:19:07,620
So then the code only needs to live in that one location and that's going to bring this lesson to a

228
00:19:07,620 --> 00:19:08,300
close.

229
00:19:08,610 --> 00:19:14,910
You might have noticed that this traditional search doesn't pull in results based on relationships like

230
00:19:14,910 --> 00:19:16,690
our overlay search does.

231
00:19:17,010 --> 00:19:22,860
Now, we are not going to take the time to modify this traditional search because I feel like that would

232
00:19:22,860 --> 00:19:29,070
be ultra repetitive and way too similar to what we just did in the last chapter where we searched by

233
00:19:29,070 --> 00:19:31,550
relationship for our overlay search.

234
00:19:31,560 --> 00:19:37,920
But don't worry if you are indeed curious about how to set up custom search logic using traditional

235
00:19:37,920 --> 00:19:44,040
non JavaScript searches that rely on you URL queries, you'll be happy to know that at the very end

236
00:19:44,040 --> 00:19:49,680
of the course, in an extra credit section, I point you in the right direction to make that happen.

237
00:19:49,980 --> 00:19:51,630
But let's not get ahead of ourselves.

238
00:19:51,750 --> 00:19:54,030
We will cross that bridge as we come to it.

239
00:19:54,160 --> 00:19:58,320
So let's keep things rolling and I will see you in the next lesson.
