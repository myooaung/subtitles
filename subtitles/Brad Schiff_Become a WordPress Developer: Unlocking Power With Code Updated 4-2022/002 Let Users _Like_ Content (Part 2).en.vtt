WEBVTT
1
00:00:02.190 --> 00:00:03.240
Hello, everyone.

2
00:00:03.630 --> 00:00:11.370
In this lesson, we're going to set up custom rest API endpoints for our two like actions.

3
00:00:11.700 --> 00:00:19.420
One action is the ability to add alike, and the other action is the ability to remove or delete alike.

4
00:00:19.800 --> 00:00:20.280
All right.

5
00:00:20.280 --> 00:00:27.570
Now, before we write the OP to set up those custom rest API endpoints, let's begin by writing front

6
00:00:27.570 --> 00:00:31.510
end JavaScript to power our user interface.

7
00:00:31.890 --> 00:00:38.760
What I mean by this is if you come to a professor page and you have already liked that current professor

8
00:00:39.090 --> 00:00:45.660
in that case, let's interpret a click on the lightbox to mean that you want to delete or remove your

9
00:00:45.660 --> 00:00:47.030
like for that professor.

10
00:00:47.250 --> 00:00:51.800
On the other hand, if you visit a professor page that you have not already liked.

11
00:00:52.080 --> 00:00:56.730
So for example, if I visit the miaows a lot, Professor Page.

12
00:00:58.320 --> 00:01:03.780
Since I have not already liked this professor, let's interpret a click on the lightbox to mean that

13
00:01:03.780 --> 00:01:05.720
I want to add a like.

14
00:01:06.150 --> 00:01:08.310
All right, so let's go ahead and get started.

15
00:01:08.550 --> 00:01:14.340
So in order to respond to click events on the lightbox, we need to set up some new JavaScript.

16
00:01:14.670 --> 00:01:20.640
So over in our text editor within our theme folder, why don't we create a brand new JavaScript file

17
00:01:20.820 --> 00:01:22.030
just for this feature?

18
00:01:22.080 --> 00:01:27.840
So in our SIRC folder and then within the modules folder, let's set up a new file.

19
00:01:28.230 --> 00:01:32.790
The name doesn't matter, but I'm going to name it like jazz.

20
00:01:33.570 --> 00:01:34.020
All right.

21
00:01:34.050 --> 00:01:41.130
And within this brand new file, let's say class with the name of like and remember, I like to have

22
00:01:41.130 --> 00:01:43.060
three sections in my class.

23
00:01:43.440 --> 00:01:46.050
So first, let's begin with the constructor.

24
00:01:47.430 --> 00:01:51.210
OK, and then right below the constructor, I like to have an events method.

25
00:01:51.210 --> 00:01:52.260
So events.

26
00:01:53.390 --> 00:01:57.020
And then right below that, I like to include any methods that I create.

27
00:01:57.710 --> 00:01:58.130
All right.

28
00:01:58.140 --> 00:02:03.980
And then at the very bottom of this file, even below the closing curly bracket for the class, let's

29
00:02:03.980 --> 00:02:13.280
say export default and then the name of the class, this will make it so we can import this file within

30
00:02:13.280 --> 00:02:19.880
our main JavaScript file and just so we can test and make sure that things are working within our constructor

31
00:02:19.880 --> 00:02:20.450
function.

32
00:02:20.690 --> 00:02:26.290
Why don't we create an alert pop up that says testing from like J.

33
00:02:26.480 --> 00:02:26.900
Yes.

34
00:02:27.710 --> 00:02:33.370
OK, now let's go ahead and save this file and then jump into our main script file.

35
00:02:33.530 --> 00:02:38.670
So just sitting in the root of our Sarsae folder, there's a file named index.

36
00:02:39.020 --> 00:02:40.760
Jess, let's jump into that.

37
00:02:41.360 --> 00:02:45.250
OK, first, let's go ahead and import that new file that we just created.

38
00:02:45.620 --> 00:02:50.780
So in this area, I will say import like from.

39
00:02:51.690 --> 00:02:58.380
And then just point towards that file, so look within the modules folder for like you don't need to

40
00:02:58.380 --> 00:03:04.710
include the DOT JSC here again with that imported, let's create a new instance using that class.

41
00:03:05.040 --> 00:03:12.000
So down here I'll say a variable and I will name it lowercase like so it's different from this variable

42
00:03:12.000 --> 00:03:12.390
name.

43
00:03:13.530 --> 00:03:17.080
So it's equal a new instance of the like class.

44
00:03:17.970 --> 00:03:21.780
OK, now with this in place, if we go ahead and save this file.

45
00:03:23.530 --> 00:03:30.820
Perfect, we see that alert message saying test from like jazz, so everything's working as expected.

46
00:03:31.120 --> 00:03:33.770
Let's go ahead and actually build out this class.

47
00:03:34.090 --> 00:03:38.940
So first, I know that I'm going to want to use Jake query within my class.

48
00:03:39.460 --> 00:03:48.220
So up at the very, very top of this file, let's say import dollar sign from quotes, Jake query.

49
00:03:48.880 --> 00:03:49.240
Cool.

50
00:03:49.240 --> 00:03:52.360
So that gives us access to use the query library.

51
00:03:52.750 --> 00:03:55.270
Now let's go ahead and set up a click event.

52
00:03:55.600 --> 00:03:55.850
Right.

53
00:03:55.900 --> 00:04:00.000
So when you click on the like box, we want to do something in response.

54
00:04:00.400 --> 00:04:08.230
So within our event's method, let's say gee query to select the element that has a class of like box

55
00:04:08.740 --> 00:04:15.910
and then let's say on and within the on parentheses, let's say we are looking for the click event,

56
00:04:16.330 --> 00:04:20.740
comma, and then the next argument is what function we want to run in response.

57
00:04:21.160 --> 00:04:26.410
So you could imagine that maybe down here in our methods area we could create a brand new method.

58
00:04:26.770 --> 00:04:34.810
We could name it whatever we want, but why don't we call it our click despatcher parentheses, curly

59
00:04:34.810 --> 00:04:35.610
brackets?

60
00:04:36.040 --> 00:04:43.870
OK, and then on this line for the second argument, we just point towards this dot our click despatcher.

61
00:04:44.740 --> 00:04:49.450
And while we're at it, why don't we also say dot bind this?

62
00:04:50.290 --> 00:04:56.040
So that way within this method, we have an easy way of pointing towards our overall class or object.

63
00:04:56.500 --> 00:04:57.040
All right.

64
00:04:57.050 --> 00:05:03.610
Now, the only thing that this method our click dispatcher needs to be responsible for is determining

65
00:05:03.610 --> 00:05:09.160
whether we should send out a request to add a like or delete alike.

66
00:05:09.490 --> 00:05:09.820
Right.

67
00:05:09.820 --> 00:05:13.240
Depending on whether they've already liked the current professor or not.

68
00:05:13.630 --> 00:05:17.770
So let me show you what I mean back in our code right below this hour.

69
00:05:17.770 --> 00:05:19.150
Click Despatcher Method.

70
00:05:19.390 --> 00:05:21.310
Why don't we create other methods?

71
00:05:21.610 --> 00:05:29.530
First one can be named create like parentheses, curly brackets, and then right below that we can create

72
00:05:29.530 --> 00:05:34.960
another method named delete, like parentheses, curly brackets.

73
00:05:35.410 --> 00:05:42.100
OK, so the entire point of this method is just to decide whether it should fire off this or this.

74
00:05:42.550 --> 00:05:44.770
So within our hour, click despatcher.

75
00:05:44.770 --> 00:05:49.870
Let's set up an if statement if parentheses curly brackets.

76
00:05:50.200 --> 00:05:52.570
And the question is what should our condition be?

77
00:05:53.170 --> 00:05:58.630
Well, when it comes to the lightbox, if I write, click and choose, inspect, remember that in our

78
00:05:58.630 --> 00:06:06.640
previous lesson we set up the data attribute named data exists and then it either equals yes or no,

79
00:06:06.640 --> 00:06:10.830
depending on whether the current user has already liked the current professor.

80
00:06:11.290 --> 00:06:21.010
So within our IF statement, let's say if and select the element that has a class of lightbox and say

81
00:06:21.010 --> 00:06:33.070
if it has a data attribute that is named exists and if that value equals yes, then that means the current

82
00:06:33.070 --> 00:06:35.640
user has already liked the current professor.

83
00:06:35.830 --> 00:06:41.380
So then we should interpret a click to mean they want to remove their like so within the curly brackets

84
00:06:41.380 --> 00:06:42.310
for the if statement.

85
00:06:42.310 --> 00:06:46.120
Let's say this dot delete line.

86
00:06:47.200 --> 00:06:47.520
Right.

87
00:06:47.530 --> 00:06:50.070
We want to go ahead and call that method OK.

88
00:06:50.080 --> 00:06:57.850
And then right after the closing curly bracket for the if statement, let's say else otherwise new set

89
00:06:57.850 --> 00:06:58.960
of curly brackets.

90
00:06:59.440 --> 00:07:05.620
If this is not the case, if this evaluates to false, that means the current user has not already like

91
00:07:05.620 --> 00:07:06.670
the current professor.

92
00:07:06.850 --> 00:07:08.950
So they probably want to create a light.

93
00:07:09.470 --> 00:07:18.040
So this dot create like, OK, now before we actually build out the create and delete like methods and

94
00:07:18.040 --> 00:07:24.970
include the code that sends off and Ajax request, why don't we first just add test alert messages so

95
00:07:24.970 --> 00:07:33.340
we then create like we can say, alert, create test message and for delete like we can say alert.

96
00:07:35.040 --> 00:07:37.120
Delete text message.

97
00:07:38.070 --> 00:07:43.740
OK, now, before we save this, let's be sure to scroll all the way up and within our constructor function,

98
00:07:44.010 --> 00:07:51.270
we can get rid of this test alert and in its place, let's be sure to call this DOT events.

99
00:07:52.410 --> 00:07:56.510
So that way our event listeners get added as soon as the page loads.

100
00:07:57.300 --> 00:08:02.020
OK, let's go ahead and say this and then back on the front end, let's test it out.

101
00:08:02.040 --> 00:08:05.630
So on this page, I have not liked this professor yet.

102
00:08:05.640 --> 00:08:13.230
So if I click this cool we see create test message, which makes sense, I would want to create a new

103
00:08:13.230 --> 00:08:13.720
like.

104
00:08:14.370 --> 00:08:18.600
But if I go to Professor Bahts a lot, which I have already liked.

105
00:08:19.540 --> 00:08:21.400
In this case, if I click the button.

106
00:08:22.930 --> 00:08:29.440
Cool, we see delete text message, so this means we are firing the right methods at the right time

107
00:08:30.040 --> 00:08:35.590
and this will allow users to click this button to toggle whatever their current status for the current

108
00:08:35.590 --> 00:08:36.610
professor is.

109
00:08:36.970 --> 00:08:43.390
Now, even though this JavaScript that we just wrote technically works whenever possible, I like to

110
00:08:43.390 --> 00:08:50.500
set up my JavaScript to be flexible enough that it would work even if we had multiple, like, boxes

111
00:08:50.500 --> 00:08:53.840
and multiple professors on a single page.

112
00:08:54.160 --> 00:09:00.130
So what I'm referring to is within our hour click despatcher when it comes to the element that we're

113
00:09:00.130 --> 00:09:03.670
checking to see if it has that data attribute of exists.

114
00:09:03.670 --> 00:09:04.510
Yes or no.

115
00:09:04.870 --> 00:09:08.980
I don't want a hard code that to point towards an element with this class.

116
00:09:09.160 --> 00:09:15.730
Instead, I want it to look at the specific like box that got clicked on in case there are multiple

117
00:09:15.730 --> 00:09:17.860
like boxes on the page at once.

118
00:09:18.280 --> 00:09:25.150
Now, luckily, remember that our event handler passes along information on which element got clicked

119
00:09:25.150 --> 00:09:25.450
on.

120
00:09:25.870 --> 00:09:32.980
So within the parentheses for our despatcher, let's just say E short for event and then right above

121
00:09:32.980 --> 00:09:37.930
this if line at the very beginning of this despatcher let's create a variable.

122
00:09:38.260 --> 00:09:45.700
We could name it whatever we like, but I'm going to name it current like box to indicate which box

123
00:09:45.700 --> 00:09:49.270
got clicked on, even though I know we only have one at the moment.

124
00:09:49.510 --> 00:09:54.580
And really in this course, we're only ever going to have one lightbox on the page at a time.

125
00:09:54.850 --> 00:10:00.130
But I really want to show you how to set things up in a flexible way so you could take these concepts

126
00:10:00.130 --> 00:10:03.250
and really run with it and build whatever you could imagine.

127
00:10:03.610 --> 00:10:11.620
Anyways, let's set this new variable to equal a query selector that looks for e dot target and then

128
00:10:11.620 --> 00:10:17.530
let's say dot closest and look for a selector of lightbox.

129
00:10:17.920 --> 00:10:19.930
Now, let me explain what this code is doing.

130
00:10:20.230 --> 00:10:27.160
When someone clicks on the lightbox, they might not actually click on the overall gray box itself.

131
00:10:27.640 --> 00:10:32.000
They might actually click on the heart icon or the little number.

132
00:10:32.320 --> 00:10:35.940
So, for example, let's say they clicked on the heart icon itself.

133
00:10:36.850 --> 00:10:42.100
Well, in that case, e dot target would be the eye icon element.

134
00:10:42.370 --> 00:10:47.750
And the icon element is never going to contain a data attribute of exists.

135
00:10:48.100 --> 00:10:55.540
So what we're saying is whatever element got clicked on find its closest ancestor, meaning parent or

136
00:10:55.540 --> 00:10:58.600
grandparent element that matches this selector.

137
00:10:58.940 --> 00:11:05.650
OK, so this line of code guarantees that this variable will always be pointing towards the relevant

138
00:11:05.650 --> 00:11:06.750
lightbox.

139
00:11:07.030 --> 00:11:12.490
So now down within this code, when we are looking for the data attribute, let's get rid of this query

140
00:11:12.490 --> 00:11:16.990
selector like box and just replace it with our variable.

141
00:11:16.990 --> 00:11:19.450
So current like box.

142
00:11:19.900 --> 00:11:25.450
I know this might seem like a lot of extra work, but trust me, in the long run it's worth it to make

143
00:11:25.450 --> 00:11:27.010
your JavaScript flexible.

144
00:11:27.340 --> 00:11:33.730
So if you ever want to change your UI or HTML layout and have multiple elements on the same page, it

145
00:11:33.730 --> 00:11:35.610
will just automatically work for you.

146
00:11:35.950 --> 00:11:40.990
So if I save this new setup and test it out, I've already liked this professor.

147
00:11:40.990 --> 00:11:45.790
So if I click the box, cool, we still see our delete test message.

148
00:11:47.020 --> 00:11:52.600
And if I go back to miaows a lot, I have not like this professor, so this click should be interpreted

149
00:11:52.600 --> 00:11:54.750
as a create request.

150
00:11:55.210 --> 00:11:55.900
Perfect.

151
00:11:57.100 --> 00:12:02.220
So at this point, we've got the basics of our front end user interface up and running.

152
00:12:02.710 --> 00:12:09.760
Now, our next step is to adjust our create like and delete like methods so that they actually do something

153
00:12:09.760 --> 00:12:10.330
useful.

154
00:12:10.360 --> 00:12:10.690
Right.

155
00:12:10.690 --> 00:12:12.260
Instead of just these pop ups.

156
00:12:12.520 --> 00:12:20.830
So what we want each method to do is send out a request to the WordPress rest API, except unlike our

157
00:12:20.830 --> 00:12:27.400
my notes feature, when it comes to adding and deleting likes, I don't want to use the default rest

158
00:12:27.400 --> 00:12:28.990
API behaviors.

159
00:12:29.290 --> 00:12:35.500
Instead, I want to set up my own completely custom rest API endpoints.

160
00:12:35.830 --> 00:12:41.680
So that way we are in complete control and we can implement whatever custom logic we want.

161
00:12:42.400 --> 00:12:49.810
And learning how to set up custom API endpoint URLs is exactly what we're going to cover in part two

162
00:12:50.020 --> 00:12:51.100
of this lesson.

163
00:12:51.490 --> 00:12:54.100
So let's keep things rolling and I will see you then.
