WEBVTT
1
00:00:02.120 --> 00:00:08.330
Hello, everyone, in this video we are going to pick up right where we left off in the previous part

2
00:00:08.900 --> 00:00:15.740
and click on the delete button, could we get an alert that says you clicked delete and I can try the

3
00:00:15.740 --> 00:00:18.020
button down here and it does the same thing.

4
00:00:18.630 --> 00:00:19.340
Excellent.

5
00:00:19.370 --> 00:00:26.690
So now we can finally get to the entire point of this lesson, which is how can we communicate with

6
00:00:26.690 --> 00:00:30.330
WordPress from the front end when we click this button?

7
00:00:30.470 --> 00:00:34.410
How can we tell WordPress to delete a specific post?

8
00:00:34.730 --> 00:00:38.150
Well, the answer has to do with the rest API.

9
00:00:38.420 --> 00:00:39.750
Let me show you what I mean.

10
00:00:39.770 --> 00:00:43.880
So right now, follow along with me in a new browser tab.

11
00:00:44.090 --> 00:00:47.990
Go ahead and visit your home page or the root of your URL.

12
00:00:48.950 --> 00:00:52.130
So in my case, fictional university dot deve.

13
00:00:52.970 --> 00:01:03.280
And then remember, at the end of the you are l we can add on slash wp json, slash WP, slash V2.

14
00:01:03.530 --> 00:01:08.780
And then if we wanted to get the 10 most recent blog posts we can just say posts.

15
00:01:10.280 --> 00:01:10.610
Right.

16
00:01:10.610 --> 00:01:17.240
And that's going to give us the raw JSON data for those blog posts or at the end of the euro we could

17
00:01:17.240 --> 00:01:21.490
say pages to get that post type instead.

18
00:01:22.010 --> 00:01:28.580
Or better yet, instead of pages we could say note, not notes, but just note.

19
00:01:29.120 --> 00:01:33.160
And that's going to give us the ten most recent note posts.

20
00:01:33.440 --> 00:01:39.560
The reason we are able to do this is because in our previous lesson back in our New Plugins folder,

21
00:01:40.340 --> 00:01:47.510
remember that when we registered the note post type, we included show in rest equals true.

22
00:01:47.970 --> 00:01:55.360
So this means that all of the default rest API RL behaviors are in place for the no post type.

23
00:01:55.820 --> 00:01:59.420
So this you URL is going to give me the ten most recent notes.

24
00:01:59.750 --> 00:02:07.050
Or if I wanted to retrieve just one specific note, I just need to know the ID number of that post.

25
00:02:07.070 --> 00:02:14.390
So for example, this is JSON data for two note posts, write math lecture and biology lecture.

26
00:02:14.660 --> 00:02:19.970
But you can see that the first property is IDE one thirty seven on your website.

27
00:02:19.970 --> 00:02:26.180
It will have a different ID number, but if you just take note of that number and then up in your address

28
00:02:26.180 --> 00:02:29.820
bar add on a slash and then type in that number.

29
00:02:30.350 --> 00:02:37.760
Well now you're only going to get raw JSON data for that one specific post with that IDE now you might

30
00:02:37.760 --> 00:02:43.190
be scratching your head and saying, Brad, what does this have to do with being able to delete a post?

31
00:02:43.460 --> 00:02:48.710
And that's a fair question, but I think everything's going to make sense when I let you know that there

32
00:02:48.710 --> 00:02:51.440
are different types of requests.

33
00:02:51.830 --> 00:02:58.250
So, for example, when our Web browser visits this you that we see in the address bar, when you type

34
00:02:58.250 --> 00:03:04.520
in an address and then push enter your Web browser is sending out a gett request.

35
00:03:04.880 --> 00:03:09.940
We're telling the WordPress server, hey, we want to get or receive information.

36
00:03:10.280 --> 00:03:13.490
However, there are other types of requests.

37
00:03:13.910 --> 00:03:21.050
So, for example, if instead of wanting to retrieve information about the post with this ID, if instead

38
00:03:21.050 --> 00:03:27.830
we wanted to update this post with new content and send that to the server, well, we can send a request

39
00:03:27.830 --> 00:03:35.000
to this exact same Nual only instead of a request, we would send a post request.

40
00:03:35.300 --> 00:03:41.390
Or better yet, if we wanted to delete the post with this ID number, we would send a request to the

41
00:03:41.390 --> 00:03:48.030
same exact URL only instead of a gett or post request, we would send a delete request.

42
00:03:48.530 --> 00:03:53.690
Now there are several other types of requests, but when it comes to working with the WordPress rest

43
00:03:53.690 --> 00:04:00.750
API, those are the big three get request, a post request and a delete request.

44
00:04:01.130 --> 00:04:06.170
Now, while it's true that if you just type in a u r l in your address bar and push enter, that's going

45
00:04:06.170 --> 00:04:09.740
to send out a get request and there's not much we can do about that.

46
00:04:10.100 --> 00:04:17.030
The beauty is that you and I are programmers and back in our JavaScript, it is very easy to send out

47
00:04:17.030 --> 00:04:18.920
different types of requests.

48
00:04:19.190 --> 00:04:26.360
So right now all we need to do within our delete note method is learn how to send a delete request to

49
00:04:26.360 --> 00:04:28.280
the right API you URL.

50
00:04:28.700 --> 00:04:31.550
So let's delete the test alert message.

51
00:04:32.120 --> 00:04:37.190
And up until this point in the course, whenever we want it to send a request to a U.

52
00:04:37.190 --> 00:04:43.760
RL from within our JavaScript, we use the query tool named Git Jason.

53
00:04:44.210 --> 00:04:50.570
However, as you can see from the very name of that method, that only makes sense if you want to send

54
00:04:50.570 --> 00:04:52.370
a gett request.

55
00:04:52.550 --> 00:04:54.980
And right now we don't want to send a request.

56
00:04:54.980 --> 00:04:57.320
We want to send a delete request.

57
00:04:57.470 --> 00:05:00.890
So let's delete this and instead let's use.

58
00:05:01.000 --> 00:05:10.450
A query tool named Ajax, the Ajax method is a great option when you want to be able to control what

59
00:05:10.450 --> 00:05:16.810
type of request you're sending within its parentheses, let's include a pair of curly brackets to create

60
00:05:16.810 --> 00:05:18.730
a JavaScript object.

61
00:05:18.970 --> 00:05:24.220
And then within the curly brackets, I like to drop down to a new line and we just want to give this

62
00:05:24.220 --> 00:05:26.200
Ajax method a few things.

63
00:05:26.500 --> 00:05:28.780
So first we give it a property named U.

64
00:05:28.780 --> 00:05:33.120
RL and let's just set it to X as a temporary placeholder.

65
00:05:33.580 --> 00:05:39.270
OK, then we also give it a type and this would be what type of request you want to send.

66
00:05:39.490 --> 00:05:42.310
Is it a get post or delete request?

67
00:05:42.730 --> 00:05:49.270
In our case, we know that we want a delete request, so just single quotes and then all caps delete

68
00:05:49.900 --> 00:05:51.740
include a comma and dropdown again.

69
00:05:51.940 --> 00:05:59.350
We also want to provide a property named success and this is where we provide a function that we want

70
00:05:59.350 --> 00:06:01.810
to run if the request is successful.

71
00:06:02.620 --> 00:06:08.340
For now, let's just include a placeholder X and then we also give it a property named error.

72
00:06:08.650 --> 00:06:12.760
And again, that's just a function that will run if the request fails.

73
00:06:13.450 --> 00:06:18.330
OK, now let's go through these one by one and start replacing the X placeholders.

74
00:06:18.700 --> 00:06:23.020
So first, what is the Eurail that we want to send a request to?

75
00:06:23.170 --> 00:06:26.560
And that would just be a RL, very similar to this.

76
00:06:26.950 --> 00:06:33.490
Now, in order to avoid having to type out your full root domain back in our code, we can delete this

77
00:06:33.490 --> 00:06:41.640
placeholder X and just say university data dot root, you are L.

78
00:06:42.040 --> 00:06:44.860
This is a property that we set up many lessons.

79
00:06:44.860 --> 00:06:50.140
Go if you're scratching your head and you can't remember when we created this, go ahead and view the

80
00:06:50.140 --> 00:06:57.430
source for the front end of your website and then press control F or command F to perform a search and

81
00:06:57.430 --> 00:06:59.740
just search for university data.

82
00:06:59.980 --> 00:07:01.880
And I think that will jog your memory.

83
00:07:02.140 --> 00:07:04.840
Basically, this just contains the root part of our U.

84
00:07:04.850 --> 00:07:07.660
RL so that our code can be flexible here.

85
00:07:08.020 --> 00:07:16.990
And after that root part of our domain, let's add on and then quotes and let's say slash WP, JSON,

86
00:07:17.320 --> 00:07:22.660
slash WP, slash V two slash note.

87
00:07:23.230 --> 00:07:27.160
And then eventually we want the number that comes here to be dynamic.

88
00:07:27.370 --> 00:07:29.770
But let's not get ahead of ourselves for now.

89
00:07:29.770 --> 00:07:32.950
We can go ahead and hard code a number just to test things out.

90
00:07:33.280 --> 00:07:40.750
Now in my case, I'm going to hard code this to one thirty seven because I know that's my ID for math

91
00:07:40.750 --> 00:07:41.980
lecture number one.

92
00:07:42.190 --> 00:07:47.620
But in your case you're going to need to use a different number in your WordPress installation.

93
00:07:47.620 --> 00:07:51.460
Your first note post almost certainly has a different ID.

94
00:07:51.610 --> 00:07:59.050
So in order to find the number of your first note post, just go to this rest API, you, R-AL, JSON,

95
00:07:59.050 --> 00:08:04.960
WP, V to note and then just grab the first ID number that you see right here.

96
00:08:05.260 --> 00:08:05.620
Cool.

97
00:08:06.310 --> 00:08:08.260
So for now, let's just hard code this.

98
00:08:08.260 --> 00:08:10.060
I will say one thirty seven.

99
00:08:10.420 --> 00:08:13.840
OK, we've already specified that this is a delete request.

100
00:08:13.840 --> 00:08:21.160
Now let's fill out the success and error functions, so let's get rid of this X and just create an anonymous

101
00:08:21.160 --> 00:08:22.420
in line function.

102
00:08:22.810 --> 00:08:31.330
We can actually create an X six arrow function with parentheses, equal sign greater than curly brackets

103
00:08:31.750 --> 00:08:33.010
within the curly brackets.

104
00:08:33.010 --> 00:08:38.830
I like to dropdown and if the request is successful, let's just log out to the console.

105
00:08:38.830 --> 00:08:43.030
So console dot log and let's say congrats.

106
00:08:43.540 --> 00:08:49.180
And also right below that, let's also log out the WordPress server response.

107
00:08:49.540 --> 00:08:51.700
So console log response.

108
00:08:52.120 --> 00:08:57.760
And in order to log out the server response, we need to pass this function that as a parameter.

109
00:08:57.880 --> 00:09:01.350
So within these parentheses, just say a response, OK?

110
00:09:01.420 --> 00:09:04.960
And let's do something very similar for our error function.

111
00:09:05.350 --> 00:09:12.670
So if the request fails, let's get rid of the X and include in S6 Arrow function, then the curly brackets

112
00:09:12.670 --> 00:09:13.420
dropdown.

113
00:09:13.420 --> 00:09:18.730
And I'm just going to paste these two lines, copy and paste instead of congrats.

114
00:09:18.730 --> 00:09:20.170
I will say sorry.

115
00:09:20.740 --> 00:09:24.130
And within these parentheses, be sure to include a parameter name.

116
00:09:24.550 --> 00:09:31.390
OK, so now whether our request succeeds or fails, either way in the developer console, we should

117
00:09:31.390 --> 00:09:35.440
see a custom message and then the official response from WordPress.

118
00:09:35.740 --> 00:09:37.840
So let's go ahead and save this.

119
00:09:37.840 --> 00:09:42.520
And then over on the front end, let's be sure to open up our developer console.

120
00:09:42.790 --> 00:09:48.030
So click anywhere and choose, inspect and then click on the console tab.

121
00:09:48.430 --> 00:09:54.750
OK, now if I click the delete button and check the console, we see several things.

122
00:09:54.760 --> 00:10:00.820
So first of all, a big red error message that says unauthorized then Arkush.

123
00:10:00.930 --> 00:10:06.960
I'm sorry, message, and then this is the official response from WordPress, so you can click on that

124
00:10:06.960 --> 00:10:11.510
to expand it so we can see these different messages.

125
00:10:11.520 --> 00:10:14.550
Sorry you are not allowed to delete this post.

126
00:10:15.930 --> 00:10:18.330
And down here we just see unauthorized.

127
00:10:18.600 --> 00:10:24.300
Now, even though our request clearly failed and we see all of these different error messages, we should

128
00:10:24.300 --> 00:10:31.470
actually be happy because if what we just attempted actually worked, that would mean WordPress is incredibly

129
00:10:31.470 --> 00:10:37.290
insecure and it would mean that anyone with an Internet connection could delete any piece of content

130
00:10:37.500 --> 00:10:39.320
on any WordPress website.

131
00:10:39.630 --> 00:10:46.620
So if we want to be able to delete a post, we need to prove to WordPress that we are actually logged

132
00:10:46.620 --> 00:10:49.040
in and that we have permission to do that.

133
00:10:49.230 --> 00:10:55.200
And the way that we do that, if we jump back to our JavaScript, is when we send out the oral request,

134
00:10:55.350 --> 00:11:03.780
we want to include with it a little piece of secret data called a n n stands for a number used once

135
00:11:03.780 --> 00:11:05.160
or no once.

136
00:11:05.520 --> 00:11:11.820
Now, whenever you successfully log in to your WordPress account, WordPress can generate a knot's for

137
00:11:11.820 --> 00:11:12.120
you.

138
00:11:12.270 --> 00:11:14.030
So let me show you how to set this up.

139
00:11:14.310 --> 00:11:23.250
Let's dive into our functions, BHP file and let's scroll down until we find our function that is named

140
00:11:23.250 --> 00:11:24.930
university files.

141
00:11:25.200 --> 00:11:31.620
And towards the bottom of this function, we've used something named WP Localize Script.

142
00:11:32.010 --> 00:11:38.370
Now, we've already used this once to generate our root you rl that you can find if you view the source

143
00:11:38.370 --> 00:11:39.210
for the page.

144
00:11:39.420 --> 00:11:40.280
So check this out.

145
00:11:40.290 --> 00:11:42.410
I just want to generate another property.

146
00:11:42.630 --> 00:11:48.390
So at the end of this line, let's include a comma and we could make up whatever name we want, but

147
00:11:48.390 --> 00:11:52.460
let's just say N and set it to equal.

148
00:11:53.460 --> 00:12:02.250
And then there's a WordPress function named WP create Norns and within the parentheses let's just say

149
00:12:02.730 --> 00:12:05.010
WP rest.

150
00:12:05.490 --> 00:12:12.210
So with this in place now, whenever we successfully log in to WordPress, if we check the view source

151
00:12:12.210 --> 00:12:19.380
of the page, there will be a secret property named Norns that equals a randomly generated number that

152
00:12:19.380 --> 00:12:22.530
WordPress creates just for our user session.

153
00:12:22.870 --> 00:12:24.300
So let's save this.

154
00:12:24.300 --> 00:12:30.870
And if we jump back to the front end and if you refresh and then view the page source, if you search

155
00:12:30.870 --> 00:12:37.560
for university data now, in addition to Route You URL, we also have this property named Norns and

156
00:12:37.560 --> 00:12:39.660
there's my randomly generated number.

157
00:12:40.020 --> 00:12:45.880
So we just need to pass this number along within our JavaScript and then WordPress can trust us.

158
00:12:46.290 --> 00:12:53.280
So back in our JavaScript, within the Ajax method, maybe right before the Eurail property, let's

159
00:12:53.280 --> 00:13:00.690
add a new line and say before send and let's set this to equal an arrow function.

160
00:13:01.080 --> 00:13:05.280
So parentheses equal greater than curly brackets.

161
00:13:05.880 --> 00:13:09.440
OK, now within the parentheses, we can make up a parameter name.

162
00:13:09.690 --> 00:13:17.580
I'm going to say x H bar and then within the function we can target that parameter to modify the request

163
00:13:17.580 --> 00:13:19.440
that J query is going to send out.

164
00:13:19.740 --> 00:13:27.750
All modern browsers have a method named set request header and this is how you can pass along a little

165
00:13:27.750 --> 00:13:30.310
bit of extra information with your request.

166
00:13:30.720 --> 00:13:37.140
Now the first argument needs to perfectly match what WordPress is going to be on the lookout for, and

167
00:13:37.140 --> 00:13:47.820
that is x dash WP Dash n WordPress will be looking for this exact name and then we just say comma and

168
00:13:47.820 --> 00:13:48.870
then we just pass it.

169
00:13:48.870 --> 00:13:49.950
The secret number.

170
00:13:50.700 --> 00:13:55.620
So university data dot n right.

171
00:13:55.620 --> 00:13:59.460
That's the property that we just added to the HTML of our page.

172
00:13:59.940 --> 00:14:06.210
OK, and before I save this, I just noticed a typo after the closing curly bracket for before send

173
00:14:06.210 --> 00:14:06.870
right here.

174
00:14:06.870 --> 00:14:09.000
You want to be sure to include a comma.

175
00:14:09.490 --> 00:14:14.340
OK, so if I save that and then refresh and try to click delete again.

176
00:14:15.000 --> 00:14:18.330
Now if I check the console we see congratulations.

177
00:14:18.510 --> 00:14:22.560
And then WordPress responds with information about the post that we deleted.

178
00:14:22.920 --> 00:14:26.850
Now obviously we didn't tell our JavaScript to remove that from the page.

179
00:14:26.850 --> 00:14:32.370
But if you refresh the page manually, we see that my math lecture note is gone.

180
00:14:32.610 --> 00:14:33.090
Cool.

181
00:14:33.210 --> 00:14:35.580
Now, that's going to bring this lesson to a close.

182
00:14:35.850 --> 00:14:41.670
In our next lesson, we will adjust our UI so that it actually makes sense, right.

183
00:14:41.670 --> 00:14:48.060
So that if you successfully delete a post, it should visually remove that from the page in real time,

184
00:14:48.240 --> 00:14:50.790
like a nice single page application.

185
00:14:51.090 --> 00:14:54.990
So let's keep things rolling and I will see you in the next lesson.
