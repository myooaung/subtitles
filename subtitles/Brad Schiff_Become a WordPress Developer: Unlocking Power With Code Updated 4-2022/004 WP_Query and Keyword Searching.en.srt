1
00:00:01,260 --> 00:00:02,250
Hello, everyone.

2
00:00:02,670 --> 00:00:10,410
In this lesson, we will learn how to search for a keyword phrase within our custom query that is powering

3
00:00:10,410 --> 00:00:12,390
our new epidural.

4
00:00:12,810 --> 00:00:14,240
Let me show you what I mean.

5
00:00:14,610 --> 00:00:22,500
So in our previous lesson, we worked on this new custom, you, R-AL, WP, JSON, University, V1,

6
00:00:22,500 --> 00:00:23,190
one search.

7
00:00:23,520 --> 00:00:28,530
And at the moment, just as a test, we are returning all profesor post types.

8
00:00:28,890 --> 00:00:31,010
But that's not what we actually want.

9
00:00:31,290 --> 00:00:33,720
We want to be able to search for a phrase.

10
00:00:34,200 --> 00:00:40,710
So for example, if someone comes to our website and searches for Bachs a lot, well then we would only

11
00:00:40,710 --> 00:00:41,760
want to return.

12
00:00:42,000 --> 00:00:44,010
The doctor barks a lot post.

13
00:00:44,400 --> 00:00:44,910
All right.

14
00:00:44,910 --> 00:00:51,210
In the first step towards making that happen is for us to revisit the custom query that we wrote that

15
00:00:51,210 --> 00:00:53,280
is responsible for getting this data.

16
00:00:53,610 --> 00:00:54,870
Let me show you what I mean.

17
00:00:54,990 --> 00:01:00,180
So right now, let's jump into our text editor and within our theme folders I.

18
00:01:00,390 --> 00:01:09,630
C or includes folder, let's open up search routes up and down here we see our WP query object named

19
00:01:09,630 --> 00:01:10,680
professors.

20
00:01:10,920 --> 00:01:14,850
And at the moment we haven't been very specific with this query.

21
00:01:15,270 --> 00:01:20,970
We're just saying give us any posts where the post type equals, Professor, but why don't we go ahead

22
00:01:20,970 --> 00:01:23,460
and get a bit more specific with this query?

23
00:01:23,850 --> 00:01:29,880
So at the end of this line, we can add a comma and then we are free to add on another argument you

24
00:01:29,880 --> 00:01:37,800
might remember from previous lessons, arguments like posts per page and order by or meta query.

25
00:01:38,130 --> 00:01:44,550
Well, right now, I want to introduce you to a new argument that we can pass on to the WP query class.

26
00:01:44,820 --> 00:01:48,990
So on this line, let's give it a new argument of simply S.

27
00:01:49,470 --> 00:01:54,740
S stands for search and we can set this to equal whatever we want.

28
00:01:54,750 --> 00:01:58,950
So just as a test, let's set it to barks a lot.

29
00:01:59,460 --> 00:02:04,890
Or if you named your professor something else, just choose a professor name that you know exists in

30
00:02:04,890 --> 00:02:05,900
your WordPress.

31
00:02:06,240 --> 00:02:06,650
All right.

32
00:02:06,660 --> 00:02:10,320
And if I go ahead and save this and then refresh postman.

33
00:02:12,150 --> 00:02:19,380
Perfect, we see that that s argument s research is doing its job, except we don't actually want a

34
00:02:19,380 --> 00:02:20,040
hard code.

35
00:02:20,040 --> 00:02:27,120
The key word here in this file, right, because you and I, as the developers of this site, we are

36
00:02:27,120 --> 00:02:30,530
the only ones that have access to type in a new phrase here.

37
00:02:30,960 --> 00:02:38,490
So instead of hard coding a value here, what we want to do instead is we want to make our API URL flexible.

38
00:02:38,760 --> 00:02:45,160
And what I mean by that is we want to be able to add on parameters at the very end of the euro.

39
00:02:45,450 --> 00:02:50,810
So, for example, at the end of this euro, we should be able to add on a question mark and then say

40
00:02:51,030 --> 00:02:54,540
term equals barks a lot.

41
00:02:55,210 --> 00:02:57,120
There's nothing special about the word term.

42
00:02:57,120 --> 00:02:58,020
I just made it up.

43
00:02:58,020 --> 00:03:04,520
You could instead say keyword equals barks a lot or phrase equals barks a lot.

44
00:03:04,950 --> 00:03:06,910
The name of the parameter doesn't matter.

45
00:03:07,200 --> 00:03:11,310
The key point here is that we want to be able to use this value.

46
00:03:11,550 --> 00:03:17,010
Whatever gets passed at the end of the Eurail here, we want to be able to use that within our custom

47
00:03:17,010 --> 00:03:17,490
query.

48
00:03:17,910 --> 00:03:21,930
We want to set it as the value for the S or search argument.

49
00:03:22,380 --> 00:03:28,440
Now, luckily, WordPress makes it very simple for us to access this data or these parameters.

50
00:03:28,740 --> 00:03:30,900
So check this out back in our code.

51
00:03:30,900 --> 00:03:34,800
Remember when we ran this function named Register Resprout?

52
00:03:35,190 --> 00:03:39,120
This is where we chose the namespace for our URL and the root name.

53
00:03:39,390 --> 00:03:45,480
And perhaps most importantly, this is where we chose which function we want to use to return relevant

54
00:03:45,480 --> 00:03:45,990
data.

55
00:03:46,260 --> 00:03:52,530
Well, when WordPress runs this callback function that we list here, it passes along a bit of data

56
00:03:52,530 --> 00:03:55,200
about the current request that someone is sending.

57
00:03:55,320 --> 00:04:01,440
And we can access that data that WordPress is sending along by simply adding a parameter name within

58
00:04:01,440 --> 00:04:04,920
the definition of this function down here within these parentheses.

59
00:04:04,930 --> 00:04:06,420
Let's just add a parameter.

60
00:04:06,660 --> 00:04:09,960
Let's call it data, but you could call it whatever you want.

61
00:04:10,290 --> 00:04:15,440
The idea, though, is that now we can use this parameter anywhere within the body of this function.

62
00:04:15,780 --> 00:04:22,490
So down here, instead of hard coding the search value to Bachs a lot, instead let's just say data.

63
00:04:22,980 --> 00:04:26,640
And what this is, is an array that WordPress puts together.

64
00:04:26,880 --> 00:04:32,700
And within this array, we can access any parameter that someone adds on to this new URL.

65
00:04:32,940 --> 00:04:37,610
So, for example, in this case, we said term equals Bachs a lot.

66
00:04:37,890 --> 00:04:42,580
So you could think of this as a term is the property and barks a lot is the value.

67
00:04:42,840 --> 00:04:49,080
So back in our code, in order to access that term property, we could just say data and then look inside

68
00:04:49,080 --> 00:04:54,080
the array with square brackets and then just quotes and the name of the property.

69
00:04:54,450 --> 00:04:59,910
So look inside the array for term, which will obviously give us a value of barks a lot.

70
00:05:00,150 --> 00:05:09,830
Or instead, if someone said sky color equals blue and grass color equals green.

71
00:05:10,410 --> 00:05:15,720
Well, in that case you could access the value of blue by saying sky color.

72
00:05:15,990 --> 00:05:17,250
Just look inside the array.

73
00:05:17,250 --> 00:05:20,220
Or you could access green by saying grass color.

74
00:05:20,960 --> 00:05:26,000
The point that I'm trying to drive home here is we are in complete control of the naming scheme here.

75
00:05:26,430 --> 00:05:28,160
So let's set this back to term.

76
00:05:28,680 --> 00:05:37,430
And now if I save this and then back in postmen, if at the end of our Eurail right, JSON University

77
00:05:37,440 --> 00:05:46,530
V1, one search, if I add on and say questionmark term equals miaows a lot, or the name of another

78
00:05:46,530 --> 00:05:49,800
professor that you have as soon as I send that off.

79
00:05:50,510 --> 00:05:50,930
Oops.

80
00:05:50,940 --> 00:05:52,420
Looks like we've got an error here.

81
00:05:52,580 --> 00:05:55,470
I think I know what the problem is back in our code.

82
00:05:55,710 --> 00:05:59,990
We definitely do not want a semicolon here at the end of this line.

83
00:06:00,000 --> 00:06:01,140
So that was my mistake.

84
00:06:01,140 --> 00:06:06,540
Let's get rid of that semicolon, because when you're creating an array, you just add a comma in between

85
00:06:06,540 --> 00:06:08,430
each item, not a semicolon.

86
00:06:08,640 --> 00:06:12,050
And you don't need anything after the final item in an array.

87
00:06:12,480 --> 00:06:14,310
So let's go ahead and save this again.

88
00:06:14,760 --> 00:06:17,040
And if we give Postman another try.

89
00:06:18,740 --> 00:06:25,190
Perfect, we only see the doctor miaows a lot post because we passed along a search term value of miaows

90
00:06:25,190 --> 00:06:25,590
a lot.

91
00:06:26,120 --> 00:06:30,290
Now, before we move on any further, I want to cover a quick security note.

92
00:06:30,590 --> 00:06:37,530
So back in our code, WordPress already performs its own security checks when you run a search.

93
00:06:37,910 --> 00:06:43,700
That's why you can't just visit any WordPress website in the world and immediately hack it with a sequel

94
00:06:43,700 --> 00:06:46,250
injection just by searching the Web site.

95
00:06:46,520 --> 00:06:50,330
However, having said that, it never hurts to be extra careful.

96
00:06:50,720 --> 00:06:56,720
So whenever you're writing your own custom code and you need to work with input that a random visitor

97
00:06:56,720 --> 00:07:01,720
from the Web is typing in, you always want to be sure to sanitize that input.

98
00:07:02,060 --> 00:07:08,120
So if, for example, someone tried to pass along in this URL, they said term equals and then instead

99
00:07:08,120 --> 00:07:10,910
of miaows a lot, they typed in some malicious code.

100
00:07:11,450 --> 00:07:22,470
Well, back in our code, let's just wrap this within a WordPress function named Sanitize Text Field.

101
00:07:23,090 --> 00:07:28,660
OK, so this is a WordPress function, so let's just cut and paste the term that we are looking for.

102
00:07:28,700 --> 00:07:33,350
Let's just move it to live within the parentheses of this sanitize function.

103
00:07:33,650 --> 00:07:41,750
OK, so if I save this and then test it out again, maybe if I search for Rogerson, cool things still

104
00:07:41,750 --> 00:07:42,050
work.

105
00:07:42,050 --> 00:07:46,040
We see Dr. Rogerson and now we are just a little bit more secure.

106
00:07:46,580 --> 00:07:49,310
And that's going to bring this lesson to a close.

107
00:07:49,670 --> 00:07:56,630
In our next lesson, we will learn how to return data for all post types instead of only the professor

108
00:07:56,630 --> 00:07:57,380
post type.

109
00:07:57,710 --> 00:08:02,990
And once we have that up and running, then everything will really come full circle and we can start

110
00:08:02,990 --> 00:08:09,590
working on the display for our search overlay, where we output general information from posts and pages

111
00:08:09,980 --> 00:08:15,400
and then programs and professors and then finally campuses and events.

112
00:08:15,890 --> 00:08:20,190
This is where things really start to come together and it should be a lot of fun to build out.

113
00:08:20,480 --> 00:08:24,560
So let's keep things rolling and I will see you in the next lesson.
