1
00:00:02,220 --> 00:00:06,810
Hello, everyone, in this lesson, we're going to bring our blacktip to life.

2
00:00:07,200 --> 00:00:08,100
Let me explain.

3
00:00:08,640 --> 00:00:13,450
So at this point, we've completed the basics, styling and interface for the block.

4
00:00:13,950 --> 00:00:20,370
Now we need to start thinking about how to actually store the data that users type into the fields and

5
00:00:20,370 --> 00:00:22,660
actually have our joysticks start changing.

6
00:00:22,680 --> 00:00:28,620
For example, if the user tries to add a second or third or fourth answer, so where do we begin?

7
00:00:29,190 --> 00:00:33,270
Well, let's start by adjusting the attributes for our block.

8
00:00:33,750 --> 00:00:34,900
Let me show you what I mean.

9
00:00:34,920 --> 00:00:42,210
So within our Sarsae folder, make sure you have the index JS file open and towards the top when we're

10
00:00:42,210 --> 00:00:46,980
calling the register block type method, remember, we outlined our attributes.

11
00:00:47,010 --> 00:00:52,290
Now they are still the example sky color and grass color from a previous lesson.

12
00:00:52,560 --> 00:00:58,750
So right now, let's adjust the attributes so that they make sense for a multiple choice block.

13
00:00:59,160 --> 00:01:03,660
Let's change the first attribute instead of sky color will change it to question.

14
00:01:04,020 --> 00:01:06,870
And yes, that can indeed be a string of text.

15
00:01:06,870 --> 00:01:12,450
Still, let's get rid of the grass color and then we can come back and add additional attributes here

16
00:01:12,750 --> 00:01:14,980
once we've finished the question field.

17
00:01:15,450 --> 00:01:21,600
For now, though, let's go down into the J.C. Watts and hook up the question field to this piece of

18
00:01:21,600 --> 00:01:22,590
attribute data.

19
00:01:23,520 --> 00:01:27,210
So if we scroll down, we're looking for this text control.

20
00:01:27,720 --> 00:01:31,070
You know, it's the right one because it should have a label of question.

21
00:01:31,650 --> 00:01:38,370
So let's just give this component a prop of value and set it to equal curly brackets to do something

22
00:01:38,370 --> 00:01:44,400
dynamic and then just say props, dot attributes, dot question.

23
00:01:45,120 --> 00:01:50,670
OK, so when the page first loads, this will pull in the current value from the database if one exists

24
00:01:51,060 --> 00:01:56,880
next after every keystroke while the user's typing into this field, well, we would want to update

25
00:01:56,880 --> 00:01:59,670
the value of this attribute that's being stored in memory.

26
00:01:59,940 --> 00:02:05,760
And to be clear here, nothing new actually gets saved into the database until the user actually clicks

27
00:02:05,760 --> 00:02:07,990
update or saves the post.

28
00:02:08,340 --> 00:02:14,280
Nevertheless, we do want to update the value that's being stored in JavaScript memory in real time

29
00:02:14,280 --> 00:02:19,200
after every keystroke, so that when the user does click the save button, it's working with the newest

30
00:02:19,200 --> 00:02:19,630
data.

31
00:02:20,100 --> 00:02:27,150
So on this component, we just give it in on change prop and set it to equal curly brackets and then

32
00:02:27,150 --> 00:02:29,400
just point towards a function that we want to run.

33
00:02:29,670 --> 00:02:33,070
You could name it anything, but let's name an update question.

34
00:02:33,840 --> 00:02:36,530
OK, now let's go create a function with this matching name.

35
00:02:36,540 --> 00:02:43,620
So right above the return parentheses for the ASX, right above that we can just add a new functions,

36
00:02:43,710 --> 00:02:47,460
function, update, question, parentheses, curly brackets.

37
00:02:47,760 --> 00:02:50,520
And this function is going to be a little bit different.

38
00:02:50,790 --> 00:02:57,420
Then the update sky color and grass color functions that we've already created because these were tied

39
00:02:57,420 --> 00:03:05,670
to traditional HTML input fields, whereas our new function, it's tied to a WordPress text control

40
00:03:05,670 --> 00:03:06,370
component.

41
00:03:07,080 --> 00:03:12,180
Now the WordPress component here actually makes things a little bit easier for us instead of having

42
00:03:12,180 --> 00:03:18,090
to receive the event and then look inside the event for the element that fired the event and then grab

43
00:03:18,090 --> 00:03:18,810
its value.

44
00:03:19,230 --> 00:03:25,560
Instead of all of that, the text control component just passes into your function, the actual new

45
00:03:25,560 --> 00:03:26,290
value.

46
00:03:26,730 --> 00:03:30,300
So for our parameter here, you could just say X or value.

47
00:03:30,840 --> 00:03:36,210
And then in the body of the function, that will be very similar to the sky color and grass color function.

48
00:03:36,220 --> 00:03:42,330
So we'll look inside props for the WordPress method called set attributes.

49
00:03:42,690 --> 00:03:48,090
We give that an object that will sort of get merged into all of the other attributes that WordPress

50
00:03:48,090 --> 00:03:49,590
is storing in memory for us.

51
00:03:49,620 --> 00:03:55,620
So in this case, we just want to update the property called Question Colen and just give it a value

52
00:03:55,860 --> 00:04:00,090
of whatever we named our parameter here just to stay organized.

53
00:04:00,090 --> 00:04:04,110
Let's delete the update, sky color and update grass color functions.

54
00:04:04,110 --> 00:04:05,520
We no longer need those.

55
00:04:06,000 --> 00:04:09,330
Let's go ahead and save this and test it out in the browser.

56
00:04:09,660 --> 00:04:12,390
Do be sure to have your task running in the command line.

57
00:04:12,390 --> 00:04:14,580
Remember, that's NPM run.

58
00:04:14,580 --> 00:04:16,800
Start back in the browser.

59
00:04:16,800 --> 00:04:21,300
If we refresh, let's practice typing something into the question field.

60
00:04:21,900 --> 00:04:24,300
What is two plus two.

61
00:04:24,630 --> 00:04:29,400
Let's click update or save and then let's try a hard page refresh.

62
00:04:30,620 --> 00:04:36,530
Cool, so you can see that that data was successfully stored at this point, let's start working on

63
00:04:36,530 --> 00:04:38,200
the answers area.

64
00:04:38,900 --> 00:04:42,500
So I think we should begin by giving ourselves a new attribute to work with.

65
00:04:42,530 --> 00:04:47,930
So up towards the very top of our code right now in our attributes, we just have questions.

66
00:04:47,990 --> 00:04:55,490
At the end of that line, we can say comma and then let's have a new attribute named Answers Colen give

67
00:04:55,490 --> 00:04:57,950
it an object instead of string.

68
00:04:57,950 --> 00:05:03,860
It should have a type of array because instead of just one string of text, the user could type in three

69
00:05:03,860 --> 00:05:05,120
or four answers.

70
00:05:05,480 --> 00:05:08,120
So type should be array.

71
00:05:08,930 --> 00:05:10,850
Let's also give it a default value.

72
00:05:10,850 --> 00:05:16,130
So say comma default colon and let's give it an array.

73
00:05:16,130 --> 00:05:19,990
So square brackets with just one empty string of text in it.

74
00:05:20,420 --> 00:05:24,200
So the reason I want its initial value in the block is first empty.

75
00:05:24,200 --> 00:05:30,080
To just be an array with one item in it is because when the page first loads, we do want there to be

76
00:05:30,320 --> 00:05:32,090
one textfield row.

77
00:05:32,570 --> 00:05:37,880
And if we think about how we're going to output this area, really we just want to loop through the

78
00:05:37,880 --> 00:05:38,810
array of answers.

79
00:05:38,810 --> 00:05:39,020
Right.

80
00:05:39,020 --> 00:05:44,420
If there was four answers, we would want to loop through this code that I'm selecting right now four

81
00:05:44,420 --> 00:05:45,160
times.

82
00:05:45,500 --> 00:05:50,570
So when the page first loads and the user hasn't typed anything in yet, well, we would want there

83
00:05:50,570 --> 00:05:54,500
to be at least one item in the array instead of zero items in it.

84
00:05:54,710 --> 00:05:56,660
Right that way there's something to loop through.

85
00:05:57,050 --> 00:05:57,980
Just to make this clear.

86
00:05:57,980 --> 00:05:58,910
Here's a quick example.

87
00:05:58,910 --> 00:06:07,280
And you do not need to type this, but eventually its actual value would be red, comma, orange, comma,

88
00:06:07,280 --> 00:06:09,140
third answer here.

89
00:06:10,250 --> 00:06:13,520
So we're not having an array of the JSC that builds the rows.

90
00:06:13,670 --> 00:06:17,540
It's just an array with the actual answer text strings.

91
00:06:18,020 --> 00:06:23,060
But the idea is, however many items are here in this array, we want to loop through the array that

92
00:06:23,060 --> 00:06:27,290
many times to output the appropriate gests for each row.

93
00:06:27,720 --> 00:06:29,280
So hopefully that makes things clear.

94
00:06:29,390 --> 00:06:33,920
Let's set this back, though, to just an empty string of text and only one of them.

95
00:06:34,580 --> 00:06:39,510
OK, at this point, let's go down into our X and make that area come to life.

96
00:06:40,190 --> 00:06:44,510
OK, so here's the label or paragraph of text that says answers colon.

97
00:06:45,110 --> 00:06:49,170
So we want to keep that, however, this entire Fleck's area.

98
00:06:49,340 --> 00:06:55,130
So from this opening Fleck's tag to the closing Fleck's tag, that's what we would want to duplicate

99
00:06:55,160 --> 00:06:58,000
once for each one of the answers.

100
00:06:58,580 --> 00:06:59,600
So do this with me.

101
00:06:59,610 --> 00:07:05,450
I want you to cut this entire Fleck's area into your clipboard, because we're going to want this code

102
00:07:05,450 --> 00:07:07,280
in just another 30 seconds from now.

103
00:07:07,280 --> 00:07:08,960
But for now, let's get rid of it.

104
00:07:08,960 --> 00:07:09,680
Let's cut it.

105
00:07:10,250 --> 00:07:14,120
And in its place, let's have curly brackets to do something dynamic.

106
00:07:14,600 --> 00:07:18,550
And we're just going to start working with our answers, attribute and loop through it.

107
00:07:18,560 --> 00:07:23,660
So let's say props, dot attributes, dot answers.

108
00:07:24,170 --> 00:07:29,660
And then in JavaScript, every array has access to a method called map.

109
00:07:30,020 --> 00:07:33,230
So we're going to call map in these parentheses.

110
00:07:33,230 --> 00:07:38,440
You just give it a function and it will run that function once for each item in the array.

111
00:07:38,960 --> 00:07:42,050
You could give it an S6 Arrow function if you want to.

112
00:07:42,050 --> 00:07:46,100
But just to make this lesson is easy to follow and make it obvious what I'm doing here.

113
00:07:46,100 --> 00:07:52,490
I am going to spell out function parentheses, curly brackets, this dropdown inside those curly brackets,

114
00:07:52,490 --> 00:07:53,990
not for the parameters.

115
00:07:54,470 --> 00:07:56,060
For now we only need one.

116
00:07:56,240 --> 00:07:57,920
So you could call it anything.

117
00:07:58,580 --> 00:08:02,900
You could call it X or pizza, but let's call it answer.

118
00:08:03,290 --> 00:08:09,050
So each time map calls our function, it's going to pass into it the current string of text from the

119
00:08:09,050 --> 00:08:09,950
answers array.

120
00:08:10,490 --> 00:08:12,650
We'll see where this comes into play in just a moment.

121
00:08:12,650 --> 00:08:19,670
But now, inside the body of our function, we would just want to return a bit of JSM X, so return

122
00:08:19,670 --> 00:08:21,050
and then parentheses, remember?

123
00:08:21,050 --> 00:08:27,560
And if you want to have multiple lines of gests, you need parentheses inside the parentheses.

124
00:08:27,740 --> 00:08:33,950
You can just paste in your clipboard, OK, and then to pre populate the text input with the existing

125
00:08:33,950 --> 00:08:35,450
value on the text control.

126
00:08:35,450 --> 00:08:40,220
Let's just say value should equal curly brackets and just say answer.

127
00:08:40,610 --> 00:08:47,570
So if your answers array had two values, strings of text that said Red and blue map will call our function

128
00:08:47,570 --> 00:08:49,160
twice the first time.

129
00:08:49,160 --> 00:08:51,290
It'll pass this as a value of red.

130
00:08:51,440 --> 00:08:53,750
The second time it'll pass this value of blue.

131
00:08:54,110 --> 00:08:59,030
I think the best way to test this out, to make sure we understand what's going on would be to actually

132
00:08:59,030 --> 00:09:05,150
change the default value up here so that it has a couple values so that we can see it looping.

133
00:09:05,150 --> 00:09:08,600
So maybe give it a value of red comma, give it a value of blue.

134
00:09:09,080 --> 00:09:11,030
Let's give this a save and test it out.

135
00:09:11,030 --> 00:09:12,410
So if we refresh.

136
00:09:14,150 --> 00:09:24,320
Perfect, red, blue, and if you gave it a third value, so green, give that a save refresh, you

137
00:09:24,320 --> 00:09:25,040
get the idea.

138
00:09:25,520 --> 00:09:26,450
So this is great.

139
00:09:26,480 --> 00:09:31,400
However, you'll notice that if you try to click on a field and type, nothing happens.

140
00:09:31,880 --> 00:09:38,690
This is because in react, if an input has a dynamic value or I should say a value that's being pulled

141
00:09:38,690 --> 00:09:44,210
from state or an attribute, well, that state or attribute is our single source of truth.

142
00:09:44,570 --> 00:09:48,440
The DOM elements are not a source of truth in react.

143
00:09:48,890 --> 00:09:52,960
What I mean is react isn't going to let us change the value of this DOM element.

144
00:09:52,970 --> 00:09:59,750
Instead, we need to give each one of these and on change prop right where you give it a function that

145
00:09:59,750 --> 00:10:02,580
manipulates the attribute or state data.

146
00:10:02,960 --> 00:10:06,380
So let's go do that down in the ASX.

147
00:10:07,070 --> 00:10:08,990
Here's the code that's looping with map.

148
00:10:09,440 --> 00:10:12,100
Here's our text control with value equals answer.

149
00:10:12,110 --> 00:10:17,600
We need to give it a prop of on change equals curly brackets.

150
00:10:17,600 --> 00:10:22,820
And now instead of creating a separate named function somewhere else, I am actually going to use an

151
00:10:22,820 --> 00:10:24,980
Essex arrow function right here.

152
00:10:25,410 --> 00:10:27,320
Our function only needs one parameter.

153
00:10:27,320 --> 00:10:29,960
You could call it X or maybe new value.

154
00:10:30,530 --> 00:10:34,580
But just remember that text controlled doesn't pass the event that just happened.

155
00:10:34,940 --> 00:10:37,330
It passes the actual new value.

156
00:10:37,370 --> 00:10:39,910
So that's all we're receiving right here with our parameter.

157
00:10:40,250 --> 00:10:45,050
Then let's have the arrow symbol, curly brackets within these curly brackets.

158
00:10:45,050 --> 00:10:46,100
Let's drop down.

159
00:10:46,340 --> 00:10:52,490
And now we might think that we just call props, dot set attributes, parentheses.

160
00:10:53,240 --> 00:10:58,940
However, things are a little bit more complicated this time around because instead of just completely

161
00:10:58,940 --> 00:11:04,970
updating the entire value like we did with question, right, you could just use the entirety of the

162
00:11:04,970 --> 00:11:06,950
new value in this case.

163
00:11:07,190 --> 00:11:10,970
We don't want to update the entirety of the array.

164
00:11:11,360 --> 00:11:11,630
Right.

165
00:11:11,630 --> 00:11:15,920
When you're typing into one of these fields, for example, if you were typing into that third row that

166
00:11:15,920 --> 00:11:23,480
contained Green as the user types, we only want to be manipulating perhaps that one item in our array.

167
00:11:24,200 --> 00:11:25,220
So we need to be careful.

168
00:11:25,220 --> 00:11:28,010
We can't just completely wipe out this value.

169
00:11:28,250 --> 00:11:31,880
We want to be precise and just update a portion of the value.

170
00:11:33,470 --> 00:11:40,490
Things are also a little bit complicated because in react, you don't want to directly mutate the state.

171
00:11:41,090 --> 00:11:46,120
What I mean is we don't just want to directly mutate the array with the three answers in it.

172
00:11:46,640 --> 00:11:53,690
So, for example, you do not need to type this, but we might be tempted to just say props, attributes,

173
00:11:53,690 --> 00:12:00,410
dot answers and look for the third item in the array and just change that and say that it should now

174
00:12:00,410 --> 00:12:02,990
be whatever the user is typed in in react.

175
00:12:02,990 --> 00:12:08,060
You do not do this, you do not directly change an existing value in state.

176
00:12:08,390 --> 00:12:14,450
Instead you just give react your new value and it handles performing that update.

177
00:12:14,990 --> 00:12:18,980
So I know we're getting a bit off track and this is not a course about react.

178
00:12:18,980 --> 00:12:20,720
This is, of course, about WordPress.

179
00:12:21,050 --> 00:12:23,390
So we can't go too deep into this topic.

180
00:12:23,600 --> 00:12:26,420
But let me show you how I would handle this situation.

181
00:12:27,020 --> 00:12:31,820
I would just create a new copy of our array that we are free to mutate.

182
00:12:31,940 --> 00:12:38,090
So I would say const you can name it anything you want, I'll name new answers equals.

183
00:12:38,360 --> 00:12:41,510
And then I just want to create a copy of our array.

184
00:12:41,840 --> 00:12:45,470
So Prof's attributes, dot answers.

185
00:12:45,710 --> 00:12:49,880
And then in JavaScript, every array has access to a method called concat.

186
00:12:50,240 --> 00:12:55,130
And if you just give that an empty array, it's not going to actually add anything onto it, but it

187
00:12:55,130 --> 00:12:58,680
is going to return a brand new copy of this array.

188
00:12:58,970 --> 00:13:02,480
So now on this separate copy, we are free to mutate it.

189
00:13:03,080 --> 00:13:05,840
So now on a new line, I would say new answers.

190
00:13:05,840 --> 00:13:06,680
Look inside it.

191
00:13:07,280 --> 00:13:09,440
We can use hard code, a number for a quick example.

192
00:13:09,440 --> 00:13:13,550
So that would be the third item in the array and then just assign a new value.

193
00:13:13,550 --> 00:13:14,810
So that should equal.

194
00:13:15,230 --> 00:13:19,880
And then we named our parameter new value write whatever the user is currently typed into this field.

195
00:13:20,480 --> 00:13:23,420
Now, we wouldn't actually want a hard code, this number to be two.

196
00:13:23,690 --> 00:13:26,780
This should be whatever item you've currently looped through.

197
00:13:27,590 --> 00:13:27,860
Right.

198
00:13:27,860 --> 00:13:31,850
Whichever specific input the user is actually trying to type into.

199
00:13:32,450 --> 00:13:34,240
So how would we get that dynamic number?

200
00:13:34,520 --> 00:13:41,060
Well, luckily for us, the map function in JavaScript, in addition to passing in the current value,

201
00:13:41,270 --> 00:13:47,180
if we give ourselves a second parameter here, so after answer, we can say comma and you can make up

202
00:13:47,180 --> 00:13:50,500
a name, but we'll call it index because that's what makes sense.

203
00:13:50,990 --> 00:13:56,000
So now Map is going to give us the current index of the item that's been looped too.

204
00:13:56,090 --> 00:13:59,000
So then that's what we would use here instead of the hardcoded two.

205
00:14:00,230 --> 00:14:03,860
OK, and then finally putting it all together on this line set attributes.

206
00:14:03,860 --> 00:14:08,150
You just give that an object that you want to get merged into the attributes.

207
00:14:08,390 --> 00:14:13,700
So we just want to change the answers value to have this new and.

208
00:14:14,100 --> 00:14:17,160
As its value, so new answers.

209
00:14:18,340 --> 00:14:25,430
Let's give this a save and test it out, so if we reload, let me try to change red to be purple.

210
00:14:25,870 --> 00:14:26,500
Awesome.

211
00:14:26,510 --> 00:14:29,440
Let's go ahead and save this to really test it out.

212
00:14:29,450 --> 00:14:36,610
So if we reload to make sure that we're actually pulling that value from the database, perfect at this

213
00:14:36,610 --> 00:14:36,880
point.

214
00:14:36,880 --> 00:14:40,330
Let's change gears and make this add another answer button.

215
00:14:40,330 --> 00:14:47,110
Come to life to all we need to do is find that button in the J.C. Watts down towards the bottom.

216
00:14:47,140 --> 00:14:55,420
Add another answer and we'll just give the opening button tag and on click prop set that to equal curly

217
00:14:55,420 --> 00:14:58,600
brackets and now you could create a separate named function.

218
00:14:58,600 --> 00:15:02,450
But why don't we just write an arrow function right here?

219
00:15:03,010 --> 00:15:08,620
We don't need any parameters whatsoever, so we'll just have an empty set of parentheses arrow symbol.

220
00:15:09,460 --> 00:15:13,390
And you don't even need curly brackets if you're just going to have one statement.

221
00:15:13,630 --> 00:15:18,040
But I am going to add curly brackets just because it's going to be a long line of code.

222
00:15:18,370 --> 00:15:21,310
And just for readability, I want it to be on its own line.

223
00:15:22,180 --> 00:15:27,370
But let's just call props, dot set attributes, give that an object.

224
00:15:27,370 --> 00:15:31,330
And the attribute that we want to change is answers Colon.

225
00:15:31,960 --> 00:15:36,680
And then we just want to add a new empty string onto the end of our answers array.

226
00:15:36,940 --> 00:15:43,900
However, remember, we don't want to directly mutate the existing array in state, so we don't want

227
00:15:43,900 --> 00:15:48,910
to use the array method called push that adds an item to the end because that would directly mutated.

228
00:15:49,270 --> 00:15:54,960
So instead, again, we can just use the concat method because that returns a new copy of the array.

229
00:15:55,300 --> 00:16:03,400
So I would just say props, dot attributes, dot answers and then every array has access to the concat

230
00:16:03,400 --> 00:16:03,910
method.

231
00:16:04,540 --> 00:16:09,220
So you give this an array, so square brackets and then it's going to add this array onto the end of

232
00:16:09,220 --> 00:16:10,170
the original array.

233
00:16:10,570 --> 00:16:14,350
So just have one item in this new array, just an empty string of text.

234
00:16:14,740 --> 00:16:16,490
Let's give this a save and test it out.

235
00:16:16,510 --> 00:16:20,730
So if we reload and if I click the blue, add another answer button.

236
00:16:21,160 --> 00:16:21,820
Awesome.

237
00:16:22,720 --> 00:16:27,810
Before we close out this video, let's learn how to make the delete buttons come to life.

238
00:16:28,540 --> 00:16:32,740
So back in our let's just find the delete button on this delete button.

239
00:16:32,740 --> 00:16:34,990
Let's just give it in on click.

240
00:16:34,990 --> 00:16:37,690
Prop said it's equal curly brackets.

241
00:16:38,050 --> 00:16:42,400
This function will have enough complexity that I want to write it as a separate function.

242
00:16:42,760 --> 00:16:49,330
But right here, let's use an E6 six arrow function to call a function while giving it an argument.

243
00:16:49,810 --> 00:16:50,770
Let me show you what I mean.

244
00:16:51,220 --> 00:16:56,380
We don't need any parameters such as parentheses, arrow symbol, no curly brackets, because it's just

245
00:16:56,380 --> 00:17:01,420
one single statement and the function that we're going to create in just a minute from now will be called

246
00:17:01,420 --> 00:17:03,340
delete answer.

247
00:17:03,340 --> 00:17:10,270
So parentheses to actually call it in in these parentheses, let's give it the index number of the current

248
00:17:10,270 --> 00:17:14,660
answer that we're trying to delete so we can access that from just index.

249
00:17:15,220 --> 00:17:19,120
Now let's go create a function with this matching name delete answer.

250
00:17:19,720 --> 00:17:26,470
So right up above our overall JSM will just say function, delete, answer, parentheses, curly brackets.

251
00:17:26,740 --> 00:17:32,470
Now in the parentheses we do want to have a parameter called index to delete.

252
00:17:33,130 --> 00:17:33,430
Right.

253
00:17:33,430 --> 00:17:37,810
That's what's getting passed into the function when we call it inside the body of our function.

254
00:17:37,810 --> 00:17:43,570
We just want to update our attributes of props, set attributes, give it an object.

255
00:17:43,570 --> 00:17:46,510
We want to update our answers, attribute only.

256
00:17:46,510 --> 00:17:48,220
We don't know what to make this value yet.

257
00:17:48,220 --> 00:17:51,670
So just for a quick placeholder, you can just have a dash or an X.

258
00:17:52,000 --> 00:17:55,480
So just like before, when we're modifying an array, it's a little bit tricky.

259
00:17:55,480 --> 00:17:57,460
We don't want to mutate it directly.

260
00:17:57,700 --> 00:18:01,270
So instead we need to create a separate copy of the array first.

261
00:18:01,270 --> 00:18:08,890
So right here I'd say const new answers equals props, attributes, answers only.

262
00:18:08,890 --> 00:18:13,030
Instead of using concat, we're going to use something called filter.

263
00:18:13,060 --> 00:18:15,820
So every array has access to the filter method.

264
00:18:16,090 --> 00:18:19,180
In these parentheses, we give it a function as a function in parentheses.

265
00:18:19,180 --> 00:18:25,150
Curly brackets and filter will call our function once for each item in the array now within the body

266
00:18:25,150 --> 00:18:25,870
of our function.

267
00:18:26,140 --> 00:18:32,170
If we return a value of true, the current item that's been looped through will be included in the new

268
00:18:32,170 --> 00:18:33,100
array we're building.

269
00:18:33,400 --> 00:18:37,420
If we return a value of false, that item will not be included.

270
00:18:37,840 --> 00:18:43,600
So we just need to be able to compare the index that we want to delete to the index that's currently

271
00:18:43,600 --> 00:18:45,220
been looped through within filter.

272
00:18:45,400 --> 00:18:48,370
So in our function parentheses here, let's have two parameters.

273
00:18:48,820 --> 00:18:49,990
We don't need the first one.

274
00:18:49,990 --> 00:18:52,000
So you can just call it X comma.

275
00:18:52,390 --> 00:18:53,800
We do need the second parameter.

276
00:18:53,800 --> 00:18:55,180
Let's call it index.

277
00:18:55,600 --> 00:19:00,910
Now, in the body of our function, we'll just say return of value and this is going to be either true

278
00:19:00,910 --> 00:19:01,570
or false.

279
00:19:01,570 --> 00:19:04,420
So let's say return if the index.

280
00:19:04,420 --> 00:19:06,220
So the number that you've currently looped through.

281
00:19:06,220 --> 00:19:08,410
So that'll be zero one, two, three.

282
00:19:09,010 --> 00:19:12,970
If that does not equal the index that we want to delete.

283
00:19:13,600 --> 00:19:17,680
In other words, return true for every single item in the array.

284
00:19:17,800 --> 00:19:22,660
Except for the one that we're getting rid of, OK, so Filter's going to return that new array that's

285
00:19:22,660 --> 00:19:24,060
going to live in this new answers.

286
00:19:24,070 --> 00:19:26,410
So that's what we want to set this to on our attributes.

287
00:19:26,560 --> 00:19:31,180
So answers equals or Colen new answers.

288
00:19:31,660 --> 00:19:33,550
Let's give this a save and test it out.

289
00:19:34,160 --> 00:19:38,130
If I refresh, let me add a new answer and then I can click the delete button.

290
00:19:38,140 --> 00:19:38,770
Perfect.

291
00:19:38,770 --> 00:19:40,080
Or if I want to get rid of green.

292
00:19:40,360 --> 00:19:40,990
Perfect.

293
00:19:41,080 --> 00:19:44,200
Let me click update to actually save that I reload.

294
00:19:45,260 --> 00:19:51,700
Perfect WordPress remembers, and that is going to bring this lesson to a close in our next lesson,

295
00:19:51,710 --> 00:19:56,060
we'll work on the ability to mark which answer is the correct answer.

296
00:19:56,390 --> 00:19:58,820
Let's keep our momentum rolling and I'll see you then.
