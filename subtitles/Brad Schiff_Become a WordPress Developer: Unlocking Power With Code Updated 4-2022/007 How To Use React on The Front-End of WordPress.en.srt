1
00:00:02,240 --> 00:00:03,180
Hello, everyone.

2
00:00:03,500 --> 00:00:10,100
In this lesson, we're going to start working on the front end JavaScript for our BLACKTIP to put things

3
00:00:10,100 --> 00:00:15,010
into perspective, let's preview the finished product of what we're going to build together.

4
00:00:15,440 --> 00:00:21,590
So when you're viewing the public front, end of our website in a post, uses the are you paying attention,

5
00:00:21,590 --> 00:00:22,330
Blacktip?

6
00:00:22,760 --> 00:00:27,610
Well, this is how we're going to present the question in the answers to the user.

7
00:00:28,070 --> 00:00:34,490
So if I click on one of the wrong answers, real time with client side, JavaScript will show that sorry

8
00:00:34,490 --> 00:00:34,970
message.

9
00:00:34,970 --> 00:00:40,460
But if you click on the correct answer, we can show them this message and then after it fades away,

10
00:00:40,460 --> 00:00:44,320
you can see we've sort of indicated the correct answer as a review.

11
00:00:44,330 --> 00:00:48,890
So then as they're scrolling through the article, if they come back to that piece, they can see which

12
00:00:48,890 --> 00:00:50,510
answers were correct and incorrect.

13
00:00:51,050 --> 00:00:57,350
So right now, let me switch back to this tab where I have not written the front end JavaScript and

14
00:00:57,350 --> 00:00:58,550
let's set it up together.

15
00:00:59,150 --> 00:01:04,850
So if I open a blog post in this version of WordPress, you'll see that all that's getting output for

16
00:01:04,850 --> 00:01:07,190
that type is today.

17
00:01:07,190 --> 00:01:09,860
The sky is blank and the grass is blank.

18
00:01:09,950 --> 00:01:12,530
So let's move forward from this point together.

19
00:01:12,860 --> 00:01:18,500
Let's begin by jumping into our text editor and in our source or SIRC folder.

20
00:01:18,800 --> 00:01:25,370
Right now, we just have the one index Morgus file and this represents the edit version for our block

21
00:01:25,370 --> 00:01:25,720
type.

22
00:01:26,210 --> 00:01:31,880
Let's create an entirely separate JavaScript file for the front end output of the block.

23
00:01:32,270 --> 00:01:34,850
So in the Sarsae folder, all click new file.

24
00:01:35,060 --> 00:01:43,790
You can name it anything, I'll name it front and dot js in our new file, just as a quick test to make

25
00:01:43,790 --> 00:01:46,550
sure that it's actually loading, let's say alert.

26
00:01:47,210 --> 00:01:49,310
This is the front end.

27
00:01:49,310 --> 00:01:51,860
J.S. Let's give this a save.

28
00:01:52,040 --> 00:01:58,850
And before we move on, we do need to slightly adjust the WordPress automated JavaScript package so

29
00:01:58,850 --> 00:02:00,770
that it's aware of our new file.

30
00:02:01,160 --> 00:02:05,870
To explain what I mean, I need you to jump in to our package JSON file.

31
00:02:06,970 --> 00:02:13,840
Right now, we're interested in the build and start task, so by default, without us configuring anything,

32
00:02:14,230 --> 00:02:21,580
these two tasks, no to look in a folder called SAAC specifically for a file named index DOT.

33
00:02:22,630 --> 00:02:28,690
In other words, these tasks have no idea that our new front end JavaScript file even exists.

34
00:02:28,960 --> 00:02:31,770
So we just need to modify these two scripts a little bit.

35
00:02:32,320 --> 00:02:38,290
So do this with me within the quotes here, right after WP scripts build, let's say, space, and we

36
00:02:38,290 --> 00:02:40,330
just list out the files we want to work with.

37
00:02:40,330 --> 00:02:50,680
So SIRC indexed JS space for another file, S.A.C. slash front end JS and then just do the exact same

38
00:02:50,680 --> 00:02:56,320
thing for the start task so you can even just copy and paste those two values, add them on right after,

39
00:02:56,320 --> 00:02:58,160
start inside the string.

40
00:02:58,990 --> 00:03:01,030
Let's give this a save and test it out.

41
00:03:01,270 --> 00:03:02,980
We'll know that it's working properly.

42
00:03:02,980 --> 00:03:07,840
If in the build folder we see a new front end JS file.

43
00:03:08,410 --> 00:03:13,540
So let's fire it up, open up your command line and run npm run start.

44
00:03:14,690 --> 00:03:19,730
If yours was already running, just quit and restart it perfect, you can see that generated in the

45
00:03:19,730 --> 00:03:22,230
build folder, front end jazz.

46
00:03:22,730 --> 00:03:29,270
OK, now before we go ahead and use HP to tell WordPress to load this file on the front end of our Web

47
00:03:29,270 --> 00:03:32,900
site, let's first set up a little bit of success.

48
00:03:33,500 --> 00:03:39,260
But because this is a course about WordPress and not writing hundreds of lines of success together,

49
00:03:39,470 --> 00:03:43,790
I actually want you to download an CSC file right now.

50
00:03:44,090 --> 00:03:52,360
So in the downloadable resources for this lesson, you'll find a file named Front End Dot, SPSS.

51
00:03:53,000 --> 00:03:55,220
I want you to pause the video lesson right now.

52
00:03:55,430 --> 00:03:59,450
Download this file and move it into your SIRC folder.

53
00:04:00,170 --> 00:04:03,460
So this is my WordPress plugin folder we've been working on together.

54
00:04:03,470 --> 00:04:10,080
I'm just going to move the front end access to live inside the S.A.C. folder, right.

55
00:04:10,190 --> 00:04:13,790
So that it's side by side with our index access file.

56
00:04:15,680 --> 00:04:16,080
Cool.

57
00:04:16,370 --> 00:04:23,540
Now, let's tell our front end jobs file to use or load or import that CSC file.

58
00:04:23,810 --> 00:04:30,230
So up at the very top we can say import, string, urtext, dot slash for the current directory and

59
00:04:30,230 --> 00:04:34,040
then front end dot s success.

60
00:04:34,740 --> 00:04:40,600
As soon as you save that, you'll know if it was successful or not because you should see a front end

61
00:04:40,610 --> 00:04:43,870
dot CSC file appear in your build folder.

62
00:04:44,480 --> 00:04:51,890
So now that we have our new front end JavaScript and access ready, let's go right the IP so that WordPress

63
00:04:51,890 --> 00:04:53,850
actually loads those files.

64
00:04:54,350 --> 00:04:57,470
So let's jump in to our index file.

65
00:04:58,070 --> 00:05:03,170
And just like almost everything else in WordPress, there are many, many different ways to achieve

66
00:05:03,170 --> 00:05:03,980
the same thing.

67
00:05:04,460 --> 00:05:11,000
So, for example, within our admin assets function, when we register our block type, we have these

68
00:05:11,000 --> 00:05:13,950
properties like editor script and editor style.

69
00:05:14,450 --> 00:05:20,360
Well, you can include properties simply called script and another one called style.

70
00:05:20,630 --> 00:05:25,850
And you just point towards an asset, even though that's very easy and intuitive to set up.

71
00:05:26,060 --> 00:05:33,350
I do not use this approach because it loads your files, even if a poster page isn't currently using

72
00:05:33,350 --> 00:05:34,340
that block type.

73
00:05:34,880 --> 00:05:41,090
So, for example, on our blog listing page, if I go to a post, for example, example, blog post,

74
00:05:41,510 --> 00:05:46,190
this post isn't using our quiz or are you paying attention block time.

75
00:05:46,460 --> 00:05:51,410
So I don't want to even load the front end JavaScript or success in that case.

76
00:05:52,100 --> 00:05:58,160
I only want to bother wasting the user's bandwidth and loading those files if the current page actually

77
00:05:58,160 --> 00:05:58,980
needs them.

78
00:05:59,570 --> 00:06:05,630
So while that approach would have been very intuitive, instead, let me show you an approach that might

79
00:06:05,630 --> 00:06:08,950
seem weird at first, but has worked perfectly for me.

80
00:06:09,440 --> 00:06:14,810
So we actually want to look for our HTML render callback function right now.

81
00:06:14,810 --> 00:06:20,300
It's just responsible for outputting the HTML that says today this guy is blank and the grass is blank.

82
00:06:20,610 --> 00:06:26,120
I like to load the files within this function because we know that this will only run if the current

83
00:06:26,120 --> 00:06:29,350
page or post actually uses our block type.

84
00:06:29,840 --> 00:06:34,480
So here's what I'll do within the body of this function right before this Obbie start.

85
00:06:34,700 --> 00:06:35,870
Let's add a new line.

86
00:06:36,290 --> 00:06:41,240
Let's say WP on Q script, parentheses, semicolon.

87
00:06:41,720 --> 00:06:43,790
We're going to give this three arguments.

88
00:06:43,940 --> 00:06:46,460
The first is a short name that we make up.

89
00:06:46,850 --> 00:06:49,520
Let's call it a tension front end.

90
00:06:50,180 --> 00:06:53,180
The second argument is just a path pointing towards our file.

91
00:06:53,180 --> 00:07:03,770
So let's say plug in DÃ¼rer, you rl after that, concatenate on quotes, build slash front end js within

92
00:07:03,770 --> 00:07:05,120
the parentheses for this plug.

93
00:07:05,270 --> 00:07:09,920
WRAL, let's say underscore, underscore, firehole, underscore, underscore.

94
00:07:10,340 --> 00:07:13,970
And then for the third and final argument, it's just an array of dependencies.

95
00:07:14,660 --> 00:07:22,550
So array parentheses and we only need one dependency substring a text called WP Dash Element.

96
00:07:23,090 --> 00:07:28,190
We will explain in detail what exactly WP element is in just a moment.

97
00:07:28,670 --> 00:07:31,940
OK, right after this line, let's add our CFS file.

98
00:07:32,450 --> 00:07:36,350
So WP on Q style semicolon.

99
00:07:36,350 --> 00:07:41,600
Let's make up a name, maybe a tension front end styles.

100
00:07:42,560 --> 00:07:49,610
The second argument is just a path so you can even just copy and paste from plugging you RL to the end

101
00:07:49,610 --> 00:07:50,420
of this string.

102
00:07:50,420 --> 00:07:57,170
Just copy and paste that and just change the file that we're looking for to dot CSC instead of Jase.

103
00:07:57,680 --> 00:07:59,630
Let's give this a save and test it out.

104
00:07:59,630 --> 00:08:02,450
So the first thing I want to show you is on the admin screen.

105
00:08:02,990 --> 00:08:08,870
If you go into the editor for a post that uses our block type, you can see that it's loading our JavaScript

106
00:08:08,870 --> 00:08:09,920
and we don't want this.

107
00:08:09,920 --> 00:08:14,270
We only want to load it on the front end public portion of the website.

108
00:08:14,510 --> 00:08:16,430
Now, the fix for this is very simple.

109
00:08:16,430 --> 00:08:22,070
Just wrap these two lines that we just wrote that load the assets, just wrap them in an IF statement.

110
00:08:22,460 --> 00:08:25,460
So I'll just cut those two on queue lines.

111
00:08:25,460 --> 00:08:31,280
We just wrote into my clipboard and then I'll say if parentheses curly brackets for the condition if

112
00:08:31,700 --> 00:08:33,800
exclamation to check for the opposite.

113
00:08:34,100 --> 00:08:40,400
If is admin, it's right if we're on the admin dashboard backend opposite of that.

114
00:08:40,400 --> 00:08:46,340
So only if on the public front end and then just paste back in those two lines if we give that a save.

115
00:08:46,610 --> 00:08:51,110
Now the editor screen doesn't load the JavaScript perfect.

116
00:08:51,410 --> 00:08:53,090
But if we go to the front end.

117
00:08:53,470 --> 00:08:58,370
But let me go back to the blog page that actually uses that block type perfect.

118
00:08:58,400 --> 00:09:00,170
Our JavaScript is loading.

119
00:09:00,830 --> 00:09:05,720
I really like this approach because even if you're on a blog or category listing page that's going to

120
00:09:05,720 --> 00:09:11,840
show five or ten blog posts and maybe they're all using our block type, WordPress is smart enough that

121
00:09:11,960 --> 00:09:15,110
if it sees this line of code again using the exact same.

122
00:09:15,180 --> 00:09:20,640
Short name for that asset, WordPress, is smart enough to not try to load the file again, it's only

123
00:09:20,640 --> 00:09:22,470
going to load the file once.

124
00:09:23,070 --> 00:09:27,090
So I'm sure there's 10 or 20 different other ways that you could load these front end files.

125
00:09:27,090 --> 00:09:29,610
But I've had very good luck with this approach.

126
00:09:30,210 --> 00:09:32,660
Let's talk about what our next step should be.

127
00:09:33,060 --> 00:09:39,840
So I think we should write a bit of actual front end JavaScript to render a react component here.

128
00:09:39,840 --> 00:09:40,110
Right.

129
00:09:40,110 --> 00:09:42,330
Instead of this today, the sky is blank.

130
00:09:42,630 --> 00:09:46,820
We want JavaScript generated content right here.

131
00:09:47,640 --> 00:09:50,210
So let me show you what I would do back in our FTP.

132
00:09:50,550 --> 00:09:53,640
Let's find the code that's currently outputting today.

133
00:09:53,640 --> 00:09:54,900
The sky is blank.

134
00:09:54,930 --> 00:09:57,050
So right now it's an H3.

135
00:09:57,330 --> 00:09:58,740
We don't want this line at all.

136
00:09:59,670 --> 00:10:01,530
So I'm going to get rid of that entire line.

137
00:10:01,830 --> 00:10:05,700
And instead, let's have a div an empty div for now.

138
00:10:05,940 --> 00:10:09,660
But let's be sure to give it a class that we can reference in our JavaScript.

139
00:10:09,790 --> 00:10:16,650
So I'm going to say div class equals just so you and I are on the same page, let's name it paying dash

140
00:10:16,650 --> 00:10:20,330
attention dash update dash me.

141
00:10:20,760 --> 00:10:24,900
And while we're here, let's just copy that name into our clipboard so we don't have to remember it

142
00:10:24,900 --> 00:10:25,900
in our JavaScript.

143
00:10:25,920 --> 00:10:27,930
So just be sure to select and copy that.

144
00:10:28,410 --> 00:10:29,580
Let's give this a save.

145
00:10:29,730 --> 00:10:36,090
And now I want you to jump in to our brand new front end JS file that we created at the start of this

146
00:10:36,090 --> 00:10:36,540
video.

147
00:10:37,490 --> 00:10:40,730
OK, so we no longer need this alert test message.

148
00:10:41,460 --> 00:10:47,120
Instead, let's create a variable that stores any and all elements with that paying attention.

149
00:10:47,130 --> 00:10:48,360
Update me class.

150
00:10:48,630 --> 00:10:58,530
So let's say const you could name it anything I'll call it divs to update equals document query selector

151
00:10:58,590 --> 00:11:01,680
all I spelled that wrong one is right there.

152
00:11:02,780 --> 00:11:04,410
OK, that's a method inside it.

153
00:11:04,410 --> 00:11:11,010
You give it a string of text and then this is where you would say a dot for a RCSC like class selector

154
00:11:11,370 --> 00:11:13,050
and then just paste in your clipboard.

155
00:11:13,680 --> 00:11:17,670
And actually before I go any further, I do want to explain my thought process here.

156
00:11:17,970 --> 00:11:22,620
But I think to make things clear of why I'm doing things this way, we need to make sure that our blog

157
00:11:22,620 --> 00:11:26,100
post page is using more than one instance of our block type.

158
00:11:26,520 --> 00:11:27,280
Let me explain.

159
00:11:27,300 --> 00:11:31,050
So let's make sure we have more than just one instance of the block type.

160
00:11:31,080 --> 00:11:37,650
So if you edit your blog post, we have one quiz question here, maybe one or two paragraphs down below

161
00:11:37,650 --> 00:11:37,820
it.

162
00:11:38,160 --> 00:11:40,310
I'm just going to add in another instance.

163
00:11:40,350 --> 00:11:41,760
So are you paying attention?

164
00:11:41,760 --> 00:11:46,620
Phrenologists say what species is barks a lot.

165
00:11:46,920 --> 00:11:53,640
Fish, hamster or dog they dog is the correct answer and click update.

166
00:11:53,970 --> 00:11:58,650
So the idea here, let me jump back to the JavaScript is from a JavaScript perspective, we don't know

167
00:11:58,650 --> 00:12:02,820
if there's one instance of the block on the page or if there's twenty instances.

168
00:12:02,820 --> 00:12:07,290
So we're just selecting all of them and then let's loop through that collection.

169
00:12:08,400 --> 00:12:16,800
So Divs to update DOT for each parentheses, we give it a function, function in parentheses, curly

170
00:12:16,800 --> 00:12:17,270
brackets.

171
00:12:17,280 --> 00:12:18,930
Let's make sure to have a parameter.

172
00:12:19,230 --> 00:12:20,670
I'll just call it div.

173
00:12:20,850 --> 00:12:25,860
So now right here inside the body of our function, div will represent the current element that's been

174
00:12:25,860 --> 00:12:26,630
looped to.

175
00:12:27,360 --> 00:12:35,190
And just for a quick test before we get in to react, let's say div dot inner html equals hello, just

176
00:12:35,190 --> 00:12:38,430
for a proof of concept to make sure your code is working so far.

177
00:12:38,430 --> 00:12:45,600
So if we save that and then go refresh the front end, you'll see one instance of hello right here.

178
00:12:45,780 --> 00:12:48,500
And if I scroll down a little bit there it is a second time.

179
00:12:48,930 --> 00:12:49,530
Perfect.

180
00:12:49,720 --> 00:12:55,980
So from this point now we just want to use a react component instead of just using this built in inner

181
00:12:56,170 --> 00:12:57,510
HTML approach.

182
00:12:58,080 --> 00:13:04,200
So let's delete this line and let's talk about how we use react from the front end of our website.

183
00:13:04,680 --> 00:13:10,020
First of all, let's create an entirely separate function down here that will be our react component.

184
00:13:10,440 --> 00:13:16,170
This will be very similar to the edit component with our JSM from the admin side of things.

185
00:13:16,440 --> 00:13:19,920
So let's say function and we want to start it with a capital letter.

186
00:13:20,460 --> 00:13:25,350
The name doesn't matter, but let's call it maybe just Cui's parentheses, curly brackets.

187
00:13:25,950 --> 00:13:32,940
Let's return a little bit of JSM so parentheses so we can have multiple lines of James X, let's have

188
00:13:32,940 --> 00:13:41,820
a div with a specific class so type div dot paying attention front end and then hit tab on your keyboard

189
00:13:42,720 --> 00:13:44,190
for now inside the div.

190
00:13:44,190 --> 00:13:48,270
Let's just have a string of text that says hello from react.

191
00:13:48,870 --> 00:13:55,260
For now the question becomes how do we actually render or display this react component onto the page.

192
00:13:55,740 --> 00:13:59,460
Well do this with me up at the very top of our file.

193
00:13:59,730 --> 00:14:01,080
Let's import a few things.

194
00:14:01,080 --> 00:14:07,890
So import, let's say uppercase react from quotes, the react package.

195
00:14:08,010 --> 00:14:12,660
Now you might be thinking to yourself, Brad, we've never said npm install react.

196
00:14:13,230 --> 00:14:13,980
That's OK.

197
00:14:14,280 --> 00:14:14,640
We'll see.

198
00:14:14,680 --> 00:14:22,030
Where this comes into play in just a moment, let's also import react, Dom, so that's uppercase R

199
00:14:22,030 --> 00:14:27,950
and then all uppercase dom from quotes the React Dom package.

200
00:14:27,970 --> 00:14:29,980
Now, again, we didn't even install this package.

201
00:14:30,220 --> 00:14:32,280
I'll explain what's going on very shortly.

202
00:14:32,830 --> 00:14:35,110
For now, let's go leverage react, Don.

203
00:14:35,860 --> 00:14:42,820
So within our for each function, we're just going to say, react, dom, dot render.

204
00:14:43,000 --> 00:14:44,490
So we're calling its render method.

205
00:14:44,500 --> 00:14:45,940
We're going to give it to arguments.

206
00:14:45,940 --> 00:14:49,370
The first is the react component that we want to display.

207
00:14:50,230 --> 00:14:53,620
So you type it out as if it's in HTML or element.

208
00:14:53,620 --> 00:15:00,050
So less than Cui's self-closing tag just like this, right.

209
00:15:00,070 --> 00:15:01,380
That's what we named our component.

210
00:15:01,600 --> 00:15:08,660
The second argument is the actual HTML dom element on the page that you want to render this into.

211
00:15:09,070 --> 00:15:11,280
So that's why we have that empty div.

212
00:15:11,440 --> 00:15:13,840
So the second argument is just div.

213
00:15:14,310 --> 00:15:19,480
And while we're at it now that we've actually updated or rendered something into that div, why don't

214
00:15:19,480 --> 00:15:24,730
we remove the update me placeholder class doing so is not necessary.

215
00:15:24,880 --> 00:15:31,120
But this way in the future, if you ever want to adapt this code so that it runs on the fly, perhaps

216
00:15:31,120 --> 00:15:34,190
as new posts are getting added to the page via lazy loading.

217
00:15:34,480 --> 00:15:37,210
Well, this should be a step in the right direction, right?

218
00:15:37,230 --> 00:15:41,680
You can at least keep track of which elements have already been hydrated with JavaScript.

219
00:15:41,980 --> 00:15:48,550
So I would just say div dot class list, dot remove and then you just give it the name of the class

220
00:15:48,550 --> 00:15:49,440
you want to get rid of.

221
00:15:49,450 --> 00:15:52,310
So it would be paying attention.

222
00:15:52,330 --> 00:15:53,260
Update me.

223
00:15:54,220 --> 00:15:56,630
Let's give this a save and see how it works.

224
00:15:56,650 --> 00:16:00,040
So on the front end, if we refresh awesome.

225
00:16:00,040 --> 00:16:05,800
We have two instances and they're using a little bit of that success that we imported at the start of

226
00:16:05,800 --> 00:16:06,500
this video.

227
00:16:07,120 --> 00:16:08,270
So things are working.

228
00:16:08,380 --> 00:16:14,590
Now, I want to talk about how the react and react DOM packages are working because we never installed

229
00:16:14,590 --> 00:16:17,020
those with NPM to explain this.

230
00:16:17,020 --> 00:16:22,870
We can actually look at our again when we loaded our front end JavaScript, remember, we gave it and

231
00:16:22,870 --> 00:16:25,950
dependency of WP dash element.

232
00:16:26,470 --> 00:16:32,470
Now I can tell you that WP dash element is really just WordPress version of react.

233
00:16:32,650 --> 00:16:37,270
They've essentially abstracted react into their own script.

234
00:16:37,840 --> 00:16:38,590
Let me explain.

235
00:16:38,620 --> 00:16:46,900
So in your browser, if you open up your dev tools in the console, if we type WP dot element press

236
00:16:46,900 --> 00:16:51,160
enter, if you check this out, this is essentially just react.

237
00:16:51,680 --> 00:16:57,130
So it has the core functions of react, but it also has react Dom sort of built into it because you'll

238
00:16:57,130 --> 00:17:00,060
notice there's a method named render.

239
00:17:00,670 --> 00:17:06,550
So the cool thing here is the official WordPress JavaScript package that we're using when it sees that

240
00:17:06,550 --> 00:17:09,040
we're trying to import, react or react.

241
00:17:09,040 --> 00:17:16,150
Dom, it's smart enough that in its Web configuration, it just looks in the global browser scope for

242
00:17:16,330 --> 00:17:18,010
WP dash element.

243
00:17:18,220 --> 00:17:21,790
So we're not even loading react and react dom ourselves.

244
00:17:22,330 --> 00:17:26,020
WordPress will just load its own version of React for US.

245
00:17:26,170 --> 00:17:32,760
And you can prove this to yourself, because if you look at the file size of our built front end JavaScript,

246
00:17:32,770 --> 00:17:38,610
so if I go into the build folder, here's the front end JS file that our task is building.

247
00:17:38,740 --> 00:17:42,670
If you inspect that, you can see that it's only seven kilobits.

248
00:17:43,210 --> 00:17:46,600
So what I'm proving here is that this does not have react and react.

249
00:17:46,600 --> 00:17:49,630
Dom bundled up in it here in my downloads folder.

250
00:17:49,630 --> 00:17:55,630
I have react and react, Dom, and you can see that there are a hundred and twenty one plus eleven kilobytes

251
00:17:55,630 --> 00:17:56,260
large.

252
00:17:56,800 --> 00:18:03,760
The reason this is so cool is because it makes it so effortless and seamless to use react across multiple

253
00:18:03,760 --> 00:18:04,480
plug ins.

254
00:18:04,930 --> 00:18:05,060
Right.

255
00:18:05,170 --> 00:18:11,590
So you and I could create 20 different plug ins that all leverage react and we have 100 percent confidence

256
00:18:11,590 --> 00:18:15,190
that we're not making users download unnecessary code.

257
00:18:15,700 --> 00:18:20,890
We're always just pointing towards this one copy of React that WordPress loads for us.

258
00:18:21,370 --> 00:18:23,800
Now, this is going to bring this video to a close.

259
00:18:23,800 --> 00:18:30,940
But in our very next lesson, we're going to talk about how to bridge the gap between PHP and JavaScript.

260
00:18:31,060 --> 00:18:37,630
In other words, how can we access the actual attributes within our react component?

261
00:18:38,080 --> 00:18:43,480
Write the attributes are the actual question and answer values and the correct answer property.

262
00:18:43,990 --> 00:18:47,800
This should be fun, and I also think it'll be a real aha moment.

263
00:18:48,220 --> 00:18:50,740
Let's keep the momentum rolling and I'll see you then.
