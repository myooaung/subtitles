WEBVTT
1
00:00:02.080 --> 00:00:03.240
Hello, everyone.

2
00:00:03.580 --> 00:00:12.280
In this lesson, we will connect our my notes front end with the WordPress rest API as the back end

3
00:00:12.580 --> 00:00:16.900
and the JavaScript code that we write will be the glue that holds the two together.

4
00:00:17.350 --> 00:00:18.680
Let me show you what I mean.

5
00:00:19.090 --> 00:00:24.940
So from the home page, while you were logged in as your admin account, let's click on to the My Notes

6
00:00:24.940 --> 00:00:25.600
page.

7
00:00:26.320 --> 00:00:32.650
Here we see the two note posts that we created in the previous lesson from the back end of WordPress.

8
00:00:33.010 --> 00:00:40.180
And now our goal in this lesson is to be able to make edits to these posts as well as completely delete

9
00:00:40.180 --> 00:00:46.670
them right from the front end of our website, directly from this page and UI that we've got right here.

10
00:00:47.320 --> 00:00:50.890
Why don't we begin with the delete action now?

11
00:00:50.890 --> 00:00:55.810
At first, let's not even worry about making this actually delete a post.

12
00:00:56.020 --> 00:01:01.900
And instead, let's just begin by writing JavaScript that responds to this click event.

13
00:01:02.290 --> 00:01:07.720
So, for example, when you click this delete button, maybe we just output a test alert message that

14
00:01:07.720 --> 00:01:09.850
says you clicked delete.

15
00:01:10.210 --> 00:01:16.090
OK, then once we've got that up and running, we can focus on actually communicating with WordPress.

16
00:01:16.690 --> 00:01:23.650
So right now, let's go right a bit of JavaScript that responds to this delete click event over in your

17
00:01:23.650 --> 00:01:26.220
text editor within our theme folder.

18
00:01:26.230 --> 00:01:33.970
Let's look in the SIRC C folder and then within the modules folder, let's create a brand new file to

19
00:01:33.970 --> 00:01:35.260
stay organized.

20
00:01:35.740 --> 00:01:44.260
The name of the file does not matter, but I'm going to name it my notes dot J.S. and I'm going to code

21
00:01:44.260 --> 00:01:49.390
things from an object oriented perspective, which is just personal preference.

22
00:01:49.390 --> 00:01:54.440
It doesn't have anything to do with WordPress, but I encourage you to follow along with me.

23
00:01:54.460 --> 00:01:57.120
So first, let's create a new class.

24
00:01:57.700 --> 00:02:02.840
The name doesn't matter, but I'm going to name it my notes, OK?

25
00:02:02.860 --> 00:02:06.520
And within the class, I always like to have three sections.

26
00:02:06.820 --> 00:02:17.170
The first is the constructor function and then right below that I like to have an events method and

27
00:02:17.170 --> 00:02:21.470
then right below that is where I like to create any of my own custom methods.

28
00:02:23.560 --> 00:02:24.130
All right.

29
00:02:24.130 --> 00:02:31.510
And because I want to be able to import this module within my main scripts file down at the very, very

30
00:02:31.510 --> 00:02:38.560
bottom of this file, let's say export default and then the name of our class.

31
00:02:38.560 --> 00:02:46.800
So my notes, OK, and before we save this file and then go import it within our main scripts file,

32
00:02:47.110 --> 00:02:52.420
why don't we include a little text message up in the constructor just to make sure that everything's

33
00:02:52.450 --> 00:02:52.820
working?

34
00:02:52.840 --> 00:03:00.820
OK, let's alert out a text message that says hello from my notes, J.S..

35
00:03:01.330 --> 00:03:03.430
OK, let's go ahead and save this.

36
00:03:03.430 --> 00:03:07.890
And now we want to be sure to import it within our main JavaScript file.

37
00:03:08.140 --> 00:03:14.580
So within our SIRC folder, let's find the index JS file and jump into that.

38
00:03:14.740 --> 00:03:18.520
Here's the area where we import all of our individual modules.

39
00:03:18.520 --> 00:03:26.380
So let's add a new line here and say import and we can make up a name, let's say my notes from.

40
00:03:26.380 --> 00:03:29.680
And then you just point towards that new file that we just created.

41
00:03:30.430 --> 00:03:37.630
So quotes period to look within the current folder and then let's look within the modules subfolder

42
00:03:38.080 --> 00:03:42.220
and then we named the file my notes, OK?

43
00:03:42.220 --> 00:03:48.210
And now that we've imported that class in file, we can use it to create a new object down here.

44
00:03:48.610 --> 00:03:55.660
So on a new line, let's just create a variable lowercase my notes just so it's different from the class

45
00:03:55.660 --> 00:04:01.330
name and we can just set to equal a new instance of my notes.

46
00:04:02.290 --> 00:04:05.790
So make sure that this matches whatever name you used here.

47
00:04:06.670 --> 00:04:12.700
OK, now if I save this file, if I go back to the front end of my website and refresh.

48
00:04:13.180 --> 00:04:15.160
Cool, we can see that text message.

49
00:04:15.340 --> 00:04:21.040
Hello from my notes J.S., which means our new module is working correctly.

50
00:04:21.040 --> 00:04:26.980
So now let's just go ahead and actually respond to the click event for this delete button.

51
00:04:27.730 --> 00:04:35.320
So back in our text editor within our my notes JavaScript module, let's delete the test alert message

52
00:04:35.320 --> 00:04:39.100
within the constructor and then within our events method.

53
00:04:39.100 --> 00:04:44.770
Let's tell the Web browser that we want to be on the lookout for that delete button getting clicked

54
00:04:44.770 --> 00:04:45.070
on.

55
00:04:45.310 --> 00:04:48.250
I want to use query to select that element.

56
00:04:48.520 --> 00:04:55.570
But if I'm going to use J query within this file, I need to be sure to include or import J query up

57
00:04:55.570 --> 00:04:56.830
at the very top here.

58
00:04:57.220 --> 00:05:01.450
So to do that we can just say import and then we get to make up our own.

59
00:05:01.470 --> 00:05:02.540
Name for query.

60
00:05:02.590 --> 00:05:11.650
Let's just say dollar sign, import that from quotes, Jake query, and thanks to the magic of NPM and

61
00:05:11.650 --> 00:05:15.670
Westpac and our automations set up, this will give us what we need.

62
00:05:16.000 --> 00:05:17.800
OK, now back to the task at hand.

63
00:05:17.800 --> 00:05:27.100
Within our event's method, let's use Jake Query to select any element that has a class of delete note

64
00:05:28.030 --> 00:05:33.900
and then let's say on and then we just give the on method to arguments.

65
00:05:34.480 --> 00:05:40.750
So the first is the type of event we want to be on the lookout for, which in this case is the click

66
00:05:40.750 --> 00:05:41.350
event.

67
00:05:41.710 --> 00:05:46.700
And then the second argument is just a function that we want to run in response.

68
00:05:47.080 --> 00:05:52.900
Now we could include an anonymous inline function here, but just to stay organized, why don't we do

69
00:05:52.900 --> 00:05:54.870
this instead down here?

70
00:05:54.880 --> 00:05:56.980
Why don't we create a brand new method?

71
00:05:57.310 --> 00:06:03.680
We could name it whatever we want, but I'm going to call it delete note, OK?

72
00:06:03.760 --> 00:06:06.700
And then back up on this line for the second argument.

73
00:06:06.700 --> 00:06:12.670
Let's just point towards this function or this method so we can just say this to look within the current

74
00:06:12.670 --> 00:06:19.690
object or class and then type out that name, delete note, OK, and just as a test, so we can make

75
00:06:19.690 --> 00:06:26.800
sure that this method is actually running down here, why don't we alert a test message that says you

76
00:06:27.280 --> 00:06:28.900
clicked delete.

77
00:06:29.830 --> 00:06:36.430
OK, now before I save this and test it out in the browser, I want to be sure to call my event's method

78
00:06:36.430 --> 00:06:37.780
up in the constructor.

79
00:06:38.020 --> 00:06:42.580
So that way this code actually gets executed as soon as the page loads.

80
00:06:42.910 --> 00:06:44.350
So write up in the constructor.

81
00:06:44.350 --> 00:06:45.250
Just say this.

82
00:06:45.250 --> 00:06:50.140
DOT events include parentheses to actually execute it.

83
00:06:50.710 --> 00:06:58.060
OK, now if I save this and click on the delete button, cool, we get an alert that says you clicked

84
00:06:58.060 --> 00:07:02.210
delete and I can try the button down here and it does the same thing.

85
00:07:03.100 --> 00:07:03.860
Excellent.

86
00:07:03.880 --> 00:07:11.170
So now we can finally get to the entire point of this lesson, which is how can we communicate with

87
00:07:11.170 --> 00:07:18.250
WordPress from the front end when we click this button, how can we tell WordPress to delete a specific

88
00:07:18.250 --> 00:07:18.910
post?

89
00:07:19.240 --> 00:07:25.510
Well, the answer has to do with the rest API, and that's exactly what we're going to learn more about

90
00:07:25.630 --> 00:07:27.880
in part two of this lesson.

91
00:07:28.330 --> 00:07:30.580
Let's keep things rolling and I will see you then.
