1
00:00:02,380 --> 00:00:03,400
Hello, everyone.

2
00:00:03,790 --> 00:00:10,990
In this lesson, we're going to set up the post metadata that will allow us to truly create a relationship

3
00:00:11,200 --> 00:00:14,910
between the blog post and any of its featured professors.

4
00:00:15,370 --> 00:00:22,420
So currently we're storing the idea of a featured professor simply in a blog type attribute.

5
00:00:22,810 --> 00:00:28,150
So if we look in the database for this blog post that I'm currently viewing, we're just storing the

6
00:00:28,150 --> 00:00:32,410
ID number of that professor right here as an attribute.

7
00:00:32,590 --> 00:00:38,190
Now, this works perfectly for querying for that professor post within the blog post.

8
00:00:38,560 --> 00:00:46,090
However, just this alone leaves us no way of querying and finding this blog post from the professor

9
00:00:46,090 --> 00:00:47,190
detailed screen.

10
00:00:47,620 --> 00:00:50,020
In other words, right now it's a one way street.

11
00:00:50,230 --> 00:00:54,690
Our blog post can find the professor, but the professor can't find the blog post.

12
00:00:55,030 --> 00:01:01,660
So this is where something called post metadata can save the day in my database.

13
00:01:01,660 --> 00:01:09,700
If I go back just to the home of the database and jump in to the table called Post Medda and then click

14
00:01:09,700 --> 00:01:12,700
select data and I'll just jump to the final page.

15
00:01:12,700 --> 00:01:18,030
But you'll see there is an entire table in WordPress for storing metadata for posts.

16
00:01:18,430 --> 00:01:21,460
So let me explain how we're going to use this in this lesson.

17
00:01:21,880 --> 00:01:28,210
We're going to create a new post meta and you can see this column key is sort of the name of the meta.

18
00:01:28,480 --> 00:01:31,240
We could name it something like Featured Professor.

19
00:01:31,690 --> 00:01:34,270
And then this column posted.

20
00:01:34,480 --> 00:01:38,530
This will have a value of the blog post that is featuring the professor.

21
00:01:38,920 --> 00:01:44,210
And then this column, the actual value that can just be the ID of the professor.

22
00:01:44,740 --> 00:01:50,440
Now, once we have an item, a record like that in the database, it'll be a piece of cake to search

23
00:01:50,440 --> 00:01:54,100
for this relationship from within the professor detail screen.

24
00:01:54,530 --> 00:01:58,900
So here's what we're going to do in our edit screen block component.

25
00:01:59,410 --> 00:02:06,640
We already have a use effect that will run any time the professor posted an attribute changes.

26
00:02:07,150 --> 00:02:08,200
So let's just do this.

27
00:02:08,200 --> 00:02:10,620
Any time that changes on that same event.

28
00:02:10,900 --> 00:02:14,470
We can also just update the meta for this blog post.

29
00:02:14,860 --> 00:02:16,300
Let me show you what I have in mind.

30
00:02:16,480 --> 00:02:21,190
So in our text editor jump into the Sarsae folder index JS.

31
00:02:21,490 --> 00:02:26,800
So down within our edit component, we already have this use effect.

32
00:02:26,800 --> 00:02:31,720
And remember, we're watching for any changes to the Proff ID attribute.

33
00:02:31,960 --> 00:02:35,860
So this function is going to run whenever that changes.

34
00:02:36,170 --> 00:02:41,990
So let's just do this, not inside our async function, but just right above that async function line.

35
00:02:42,490 --> 00:02:49,510
Let's make up a new function that we can create in 10 seconds from now, but let's call it update the

36
00:02:49,660 --> 00:02:50,200
meta.

37
00:02:50,200 --> 00:02:51,850
There's nothing special about this name.

38
00:02:51,850 --> 00:02:54,520
I just made it up but parentheses to call it.

39
00:02:54,760 --> 00:02:56,860
Now let's go actually create this function.

40
00:02:57,520 --> 00:03:05,740
So maybe right below our use effect and right above this all prof's we can just say new function with

41
00:03:05,740 --> 00:03:10,900
the name of update the meta parentheses curly brackets.

42
00:03:11,230 --> 00:03:17,770
To update the meta, we can use a WordPress JavaScript tool that will be available on the global scope.

43
00:03:17,980 --> 00:03:28,450
So we can just say WP dot data dot dispatch in these parentheses let's say quotes core slash editor

44
00:03:28,870 --> 00:03:35,770
at the very end after the parentheses will say dot edit post parentheses to call that we give that an

45
00:03:35,770 --> 00:03:43,540
object, just say Medda Colon and then we set that to be an object, OK, and now we just make up a

46
00:03:43,540 --> 00:03:45,390
name for a piece of meta.

47
00:03:45,760 --> 00:03:51,550
So remember back in the database, the Medicare column, that's sort of the name or label for your piece

48
00:03:51,550 --> 00:03:52,090
of meta.

49
00:03:53,050 --> 00:03:54,700
So that's what we're selecting here.

50
00:03:55,060 --> 00:04:03,320
Let's just give it a property of featured Professor Colon and then you just give it the actual value.

51
00:04:03,670 --> 00:04:12,070
Now, at first we might be tempted to just say props, dot attributes provide and that would work perfectly

52
00:04:12,310 --> 00:04:18,790
if we were only ever going to have one instance of the Professor Block type in a blog post.

53
00:04:19,180 --> 00:04:20,740
However, that's not the case.

54
00:04:20,740 --> 00:04:25,660
You can have as many instances of this block type as you want, so let's get rid of that for right now.

55
00:04:25,660 --> 00:04:29,770
We're not exactly sure what we should set this to equal to for now.

56
00:04:29,770 --> 00:04:32,680
I'll just put a question mark so we know to circle back to this.

57
00:04:32,680 --> 00:04:34,900
But let me explain what I'm referring to.

58
00:04:35,290 --> 00:04:36,970
So back in the edit screen.

59
00:04:37,510 --> 00:04:44,140
Yes, right now I only have one instance of the block type, but I could insert another Professor Call-out.

60
00:04:44,590 --> 00:04:52,420
And if I set it to Rogerson, well, we wouldn't just want the ID for Frog Person to overwrite the value

61
00:04:52,420 --> 00:04:53,770
for Dr. Bachs a lot.

62
00:04:54,190 --> 00:04:59,860
We don't want a situation where just the most recent one that you've set is the only ID being saved.

63
00:05:00,220 --> 00:05:01,870
So what I'm getting at here is we need.

64
00:05:01,910 --> 00:05:07,880
To zoom out a little bit, instead of thinking about this from just the current block component that

65
00:05:07,880 --> 00:05:13,540
we're writing code for, we want to think about this from the block ed screen as a whole.

66
00:05:14,300 --> 00:05:17,720
I'm going to update or save this post just so when I refresh.

67
00:05:17,720 --> 00:05:20,540
I already have multiple professors to test with.

68
00:05:21,020 --> 00:05:27,590
But right now, let me show you what I have in mind back in our text editor within the update meta function

69
00:05:27,590 --> 00:05:28,550
at the very start of it.

70
00:05:28,550 --> 00:05:29,720
Let's have a new line.

71
00:05:30,260 --> 00:05:38,630
Let's create a variable so const you can make up a name, but I'll call it Prof's for Medda equals.

72
00:05:38,810 --> 00:05:45,350
And then I just want to select any and all block types on the edit screen and then from there we can

73
00:05:45,350 --> 00:05:49,160
filter through them just for the featured professor block types.

74
00:05:49,340 --> 00:06:00,020
So I'll say wp dot data dot select call that give it quotes core slash block dash editor at the end

75
00:06:00,020 --> 00:06:02,630
of that call, get blocks.

76
00:06:03,260 --> 00:06:07,100
OK, this is going to return an array of all of the blocks.

77
00:06:07,100 --> 00:06:10,580
So basic default paragraphs, unordered lists.

78
00:06:11,000 --> 00:06:19,490
So I just want to filter that array to only include blocks where their name is our plug in slash featured

79
00:06:19,490 --> 00:06:20,140
professor.

80
00:06:20,600 --> 00:06:22,910
So let's do that back down in the code we were writing.

81
00:06:22,910 --> 00:06:24,860
We have get blocks at the end of that.

82
00:06:24,860 --> 00:06:27,070
We just say dot filter.

83
00:06:27,620 --> 00:06:30,700
Now you can see this line of code is already getting quite long.

84
00:06:30,710 --> 00:06:35,540
So what you can do is just drop down before each dot, just personal preference.

85
00:06:35,540 --> 00:06:40,850
But for example, right before dot get blocks here, you could drop down and then you could even indent

86
00:06:40,850 --> 00:06:45,170
to just show to yourself that this line of code is still part of this line.

87
00:06:45,710 --> 00:06:47,330
And then you could also do that right here.

88
00:06:47,330 --> 00:06:48,380
So dot filter.

89
00:06:48,830 --> 00:06:53,300
OK, but in the parentheses for filter, we give it a function, let's give it an arrow function.

90
00:06:53,300 --> 00:06:59,540
We'll just have X as our parameter arrow symbol and we don't even need the word return if we stay in

91
00:06:59,540 --> 00:07:00,800
a single line here.

92
00:07:01,550 --> 00:07:06,230
So I'll just say if x dot name equals double equals signs.

93
00:07:07,360 --> 00:07:12,710
Quotes our plug in slash featured Dasch professor.

94
00:07:13,240 --> 00:07:15,310
OK, so what is this going to return?

95
00:07:15,340 --> 00:07:21,460
Well, it's going to be an array with just those block types, but each item in the array is going to

96
00:07:21,460 --> 00:07:25,120
contain all sorts of different properties about that block type.

97
00:07:25,450 --> 00:07:30,630
And really the only property I care about is its provide value.

98
00:07:31,090 --> 00:07:37,700
And at the end of the day, what we're really trying to get here is just a simple array of post ID numbers.

99
00:07:38,080 --> 00:07:43,120
So what I'm going to do is take this filtered result and then at the end of this, just drop down and

100
00:07:43,120 --> 00:07:44,020
use map.

101
00:07:45,220 --> 00:07:47,710
So you give map a function will give it an arrow function.

102
00:07:47,710 --> 00:07:49,210
So X arrow symbol.

103
00:07:49,720 --> 00:07:56,650
Again, we don't need the word return if we stay on a single line and I'm just going to return X attributes

104
00:07:56,650 --> 00:07:58,720
dot proff, I'd.

105
00:08:00,090 --> 00:08:05,270
So this way, it's not going to be an array of complicated objects, it's just going to be an array

106
00:08:05,390 --> 00:08:07,670
of simple post ID numbers.

107
00:08:08,210 --> 00:08:11,440
OK, for now, this line of code is done, but right below it.

108
00:08:11,450 --> 00:08:13,450
So we don't need to be indented any longer.

109
00:08:13,670 --> 00:08:17,840
Let's log it to the console just so we can see it visually.

110
00:08:18,290 --> 00:08:27,170
So console log Prof's for Medda and also we would want to use it here for the value that we're setting

111
00:08:27,170 --> 00:08:27,770
for the Medha.

112
00:08:27,770 --> 00:08:32,430
So instead of the question mark, it would just be Prof's for Medda.

113
00:08:33,050 --> 00:08:35,070
Let's give this a save and test it out.

114
00:08:35,760 --> 00:08:42,830
So if I refresh and open up my console, well there are other things being logged to the console, but

115
00:08:42,830 --> 00:08:43,210
cool.

116
00:08:43,220 --> 00:08:44,360
There is an array.

117
00:08:44,370 --> 00:08:50,720
I have two instances of that block type and so I have an array with two items and it's just two numbers.

118
00:08:50,720 --> 00:08:53,060
The post IDs for barks a lot.

119
00:08:53,060 --> 00:08:54,080
And from Grishin.

120
00:08:54,530 --> 00:08:59,360
Now, before we take the last couple of steps to make sure that that Medda is actually being saved into

121
00:08:59,360 --> 00:09:03,470
the database, let's first make sure that we aren't storing duplicates.

122
00:09:03,770 --> 00:09:09,680
And what I mean is if I add another instance of that block for the exact same professor.

123
00:09:09,680 --> 00:09:09,950
Right.

124
00:09:09,970 --> 00:09:11,120
So for fraud person.

125
00:09:12,190 --> 00:09:18,640
There's no need to store the ID for frog person twice in Medda, but maybe the author of this post would

126
00:09:18,640 --> 00:09:23,920
want to include this block once at the very top of the blog post and then once again at the very bottom

127
00:09:23,920 --> 00:09:24,840
just for review.

128
00:09:25,540 --> 00:09:31,270
So while visually there's a reason to store it twice, there's no need to store the meta twice in.

129
00:09:31,270 --> 00:09:37,240
What I'm getting at is if we look at the console, well, now the array has three items in it and you

130
00:09:37,240 --> 00:09:39,670
can see it has a duplicate of forty one.

131
00:09:40,210 --> 00:09:42,550
So we don't need to store Rogerson twice like that.

132
00:09:42,670 --> 00:09:48,820
So let's just adjust our code a little bit to remove any duplicates or make sure that it only includes

133
00:09:48,820 --> 00:09:50,100
unique values.

134
00:09:50,140 --> 00:09:58,450
So at the end of dot map I would just dropdown be indented because it's part of this overall line but

135
00:09:58,450 --> 00:10:03,550
I would just say dot filter once again, call that, give it an arrow function.

136
00:10:03,550 --> 00:10:09,010
But this time we do want parentheses because we're going to have three parameters, let's say X for

137
00:10:09,010 --> 00:10:16,000
the value comma index for the index that it is in the array and I said the first one zero, the next

138
00:10:16,000 --> 00:10:23,770
one's one and then comma, let's just say a R and this is the array itself that we're working on in

139
00:10:23,770 --> 00:10:29,140
between the parentheses here we have the arrow symbol, curly brackets, let's drop down and now we

140
00:10:29,140 --> 00:10:30,460
only want to return.

141
00:10:30,460 --> 00:10:36,540
True, if the current item that's been looped to doesn't already exist in the array.

142
00:10:36,820 --> 00:10:38,920
So in JavaScript, every array.

143
00:10:39,190 --> 00:10:41,110
So this is the array that we're working with.

144
00:10:41,380 --> 00:10:48,460
Every array has access to a method called index of so parentheses to call that and let's just give it

145
00:10:48,460 --> 00:10:49,540
the actual value.

146
00:10:49,540 --> 00:10:53,320
So X so what in the world is index of do?

147
00:10:53,830 --> 00:11:00,100
Well, we're essentially asking the array, do any of your items have this as their value?

148
00:11:00,520 --> 00:11:08,440
If the array does contain an item with this matching value index of will return the index of the first

149
00:11:08,440 --> 00:11:10,060
instance of that value.

150
00:11:10,450 --> 00:11:14,470
If the array doesn't contain that value, it will return negative one.

151
00:11:14,890 --> 00:11:19,270
So we can really use this to our advantage to make sure that we only have unique items.

152
00:11:19,660 --> 00:11:26,320
Let me explain so we can just say if that equals double equals sign index, the current index that we've

153
00:11:26,320 --> 00:11:31,000
looped to, if you're anything like me, this is not the most intuitive code in the world.

154
00:11:31,000 --> 00:11:36,400
I had to read through it several times for it to really click and have an aha moment of how this only

155
00:11:36,400 --> 00:11:37,540
leaves unique items.

156
00:11:37,540 --> 00:11:43,510
But essentially for every item we're looping through it and we're saying, is this current index the

157
00:11:43,510 --> 00:11:45,790
first example of a value?

158
00:11:46,030 --> 00:11:50,350
If it's not the first example, then that means it's not unique anyways.

159
00:11:50,350 --> 00:11:56,890
If we save this in refresh, I don't believe I saved the post with the double Rogerson's.

160
00:11:56,890 --> 00:11:59,980
So you can just add the instance again.

161
00:11:59,980 --> 00:12:06,370
Professor Call-out, let me have two Rogerson's and if we check the console, perfect.

162
00:12:06,370 --> 00:12:09,880
So now our array only has unique values.

163
00:12:10,180 --> 00:12:17,320
In other words, now we can just really work on making sure that that value or this array of values

164
00:12:17,530 --> 00:12:20,350
is actually being saved into the database.

165
00:12:20,860 --> 00:12:27,120
So first of all, when we're dispatching this action that doesn't directly save anything into the database,

166
00:12:27,460 --> 00:12:31,510
this just updates the WordPress datastore in JavaScript memory.

167
00:12:31,840 --> 00:12:36,460
In order to actually save anything to the database, you would actually have to click the update or

168
00:12:36,460 --> 00:12:38,070
save button for the post.

169
00:12:38,590 --> 00:12:42,250
However, currently even doing that wouldn't work yet.

170
00:12:42,250 --> 00:12:46,810
It wouldn't save it to the database because we need to do something in first.

171
00:12:47,200 --> 00:12:51,640
We need to use to register our new custom made a name.

172
00:12:52,120 --> 00:12:55,330
So do this with me in our text editor in our folder.

173
00:12:55,330 --> 00:12:57,580
Jump in to our file.

174
00:12:57,580 --> 00:13:03,400
So featured Professor P, and we're looking for our on init method.

175
00:13:03,400 --> 00:13:06,730
So if you just scroll down a bit, here it is.

176
00:13:06,730 --> 00:13:10,990
This is the same area where we registered script style and our block type.

177
00:13:11,590 --> 00:13:16,360
So just anywhere in this function, maybe right here, we're going to use the WordPress function called

178
00:13:16,360 --> 00:13:20,920
Register Medda semicolon in the parentheses.

179
00:13:20,920 --> 00:13:22,750
We're going to give it three arguments.

180
00:13:23,200 --> 00:13:25,750
The first argument is the type of metadata.

181
00:13:25,750 --> 00:13:32,740
So this would just be post, right, as opposed to comment metadata or user metadata, a post.

182
00:13:32,740 --> 00:13:36,400
The second argument is the name for this meta.

183
00:13:36,400 --> 00:13:37,690
So that would just be quotes.

184
00:13:37,690 --> 00:13:40,960
And we want to call it featured professor.

185
00:13:41,440 --> 00:13:46,720
So just make sure this perfectly matches whatever you set back in your JavaScript as the meta name.

186
00:13:47,200 --> 00:13:50,170
And then the third argument is just an array of options.

187
00:13:50,170 --> 00:13:51,910
So array parentheses.

188
00:13:52,360 --> 00:13:57,820
Let's have one option called the show in rest and set that to true comma.

189
00:13:58,270 --> 00:14:03,610
Let's have another option called type and set that to no comma.

190
00:14:03,610 --> 00:14:07,570
Let's have another option called single and set that to false.

191
00:14:08,110 --> 00:14:10,450
Let me explain what single false means.

192
00:14:10,450 --> 00:14:11,560
So if you set that to.

193
00:14:11,670 --> 00:14:19,550
True, well, in the database, WordPress would try to store an array of data for the value, but I've

194
00:14:19,550 --> 00:14:25,460
seen that in certain situations that could serialize the data and then database lookup performance is

195
00:14:25,460 --> 00:14:26,290
a bit slower.

196
00:14:26,300 --> 00:14:32,660
So by setting single to false, we're just saying you don't need to try to save all of the professor

197
00:14:32,660 --> 00:14:36,350
yds in one row or one entry instead.

198
00:14:36,560 --> 00:14:42,740
If we had three featured professors in one blog post, we would have three rows or three entries in

199
00:14:42,740 --> 00:14:43,670
the database.

200
00:14:44,180 --> 00:14:44,450
Right.

201
00:14:44,450 --> 00:14:47,510
And the posted would all be to the same blog post.

202
00:14:47,930 --> 00:14:53,630
The key name would be the same, but the value each one of these would just be one professor post here,

203
00:14:53,630 --> 00:14:55,400
one professor post here and one here.

204
00:14:56,090 --> 00:14:57,530
We'll see this in just a moment.

205
00:14:57,980 --> 00:15:02,320
But let's go ahead and save this up, OK?

206
00:15:02,480 --> 00:15:09,230
And with that saved, now back on the edit screen, just to be safe, I will reload or refresh.

207
00:15:11,160 --> 00:15:17,640
OK, but now with the two featured professors in place, if I actually click update or save for this

208
00:15:17,640 --> 00:15:20,700
blog post, we can go look in our database.

209
00:15:21,540 --> 00:15:24,330
So just click on the post metastable.

210
00:15:24,330 --> 00:15:30,180
You can click, select data, click the very final page, and then if you go down to the very bottom,

211
00:15:30,810 --> 00:15:31,560
perfect.

212
00:15:31,920 --> 00:15:34,650
I have two pieces of medical featured, Professor.

213
00:15:35,040 --> 00:15:40,860
They are from the same blog posted, but each professor has their own entry.

214
00:15:41,400 --> 00:15:49,260
This makes it super easy to look up this relationship from a professor detail screen, and that's exactly

215
00:15:49,260 --> 00:15:51,990
what we're going to work on in our next lesson.

216
00:15:52,230 --> 00:15:57,420
But before we bring this video to a close, there are two details I want to take care of.

217
00:15:57,850 --> 00:16:03,960
So first of all, if I was to click on one of these featured professors and delete that instance of

218
00:16:03,960 --> 00:16:10,170
the block from my post, well, we want to make sure that that would delete the appropriate item from

219
00:16:10,170 --> 00:16:11,230
our post meta.

220
00:16:11,670 --> 00:16:16,030
So let me show you how I would handle that within our REACT component.

221
00:16:16,560 --> 00:16:24,180
So back in our indexed JS file, essentially we need somewhere where we can respond to the event of

222
00:16:24,180 --> 00:16:27,230
our component on mounting or getting deleted.

223
00:16:27,690 --> 00:16:31,200
I'm sure there's more than one way to do this, but here's how I would handle it.

224
00:16:31,620 --> 00:16:35,450
So we already have one use effect right below it.

225
00:16:35,460 --> 00:16:40,640
I would just create a brand new use effect, so use effect parentheses to call it.

226
00:16:40,830 --> 00:16:42,560
Remember, you give it to things.

227
00:16:42,870 --> 00:16:46,430
So the first is a function, so just give it an arrow function.

228
00:16:46,500 --> 00:16:52,440
The second argument is what you're watching for changes now if you just give it an empty array.

229
00:16:52,800 --> 00:16:53,970
This is super useful.

230
00:16:54,210 --> 00:16:54,810
React.

231
00:16:54,810 --> 00:17:00,300
We'll only call our function the very first time that this component renders.

232
00:17:00,570 --> 00:17:03,240
However, inside our function.

233
00:17:03,540 --> 00:17:08,850
If you return something, well, what you can return is called a clean up function.

234
00:17:09,150 --> 00:17:15,750
So we return a function right here and then react will call that function when this block gets deleted

235
00:17:15,750 --> 00:17:16,770
or unmounted.

236
00:17:17,070 --> 00:17:19,260
Right, if it's no longer being rendered to the DOM.

237
00:17:19,710 --> 00:17:22,220
So let's just return an arrow function here.

238
00:17:22,230 --> 00:17:28,020
So and now if you really wanted to test this out, you could have an annoying alert pop up.

239
00:17:28,260 --> 00:17:31,740
But I'm very confident that this is going to work just the way we want it to.

240
00:17:32,100 --> 00:17:37,350
So instead of testing it out, I'm just going to do what I actually want to do, which is simply call

241
00:17:37,530 --> 00:17:38,700
update the meta.

242
00:17:39,060 --> 00:17:39,360
Right.

243
00:17:39,480 --> 00:17:41,160
Once that block has been deleted.

244
00:17:41,370 --> 00:17:46,740
I just want to run this again so it gets a fresh copy of the existing professor post IDs.

245
00:17:46,770 --> 00:17:50,640
So inside here, I would just say update the MEDDER.

246
00:17:51,720 --> 00:17:53,310
Let's give that a save and test it out.

247
00:17:53,580 --> 00:18:02,130
So if I refresh and if I go down and delete Dr. Frogh person and update or save the post, and then

248
00:18:02,130 --> 00:18:06,690
if I go into my database and refresh, you might have to look around a bit.

249
00:18:06,690 --> 00:18:09,680
You can see the ordering changed a little bit, but perfect.

250
00:18:09,690 --> 00:18:11,970
Now there's only one featured.

251
00:18:11,970 --> 00:18:13,680
Professor Cool.

252
00:18:13,710 --> 00:18:17,190
There is one more tiny detail I want to take care of in this video.

253
00:18:18,000 --> 00:18:22,110
You might have already noticed this in our previous lesson, but here's what I want to fix.

254
00:18:22,350 --> 00:18:29,580
So you'll notice that if I insert a new instance of Professor Call-out, it's showing your first professor

255
00:18:29,580 --> 00:18:33,350
in my case miaows a lot before I even selected a value.

256
00:18:33,690 --> 00:18:39,990
So when you first insert this block type, this area should be blank until you actually select a real

257
00:18:39,990 --> 00:18:40,640
value.

258
00:18:41,100 --> 00:18:45,900
Let me show you how I would fix this within our first use effect.

259
00:18:45,900 --> 00:18:49,770
That's watching the Proff ID attribute for changes.

260
00:18:50,250 --> 00:18:54,180
I would just wrap everything inside here in an if statement.

261
00:18:54,630 --> 00:18:55,380
So do this with me.

262
00:18:55,380 --> 00:18:59,310
I'm going to select from update the meta all the way to when we call our go function.

263
00:18:59,520 --> 00:19:01,800
Just cut that into your clipboard temporarily.

264
00:19:02,280 --> 00:19:05,370
Wrap it in an if statement for the condition.

265
00:19:05,370 --> 00:19:13,290
I would just say if props dot attributes proff id if that evaluates to true meaning, if it's not empty

266
00:19:13,290 --> 00:19:17,370
or undefined, only then do we actually want to perform these actions.

267
00:19:17,370 --> 00:19:19,920
So then you can just paste back in your clipboard.

268
00:19:20,350 --> 00:19:23,460
OK, now if we save that, go test it out.

269
00:19:24,300 --> 00:19:29,700
If I scroll down and insert a new block type of Professor Call-out perfect.

270
00:19:29,850 --> 00:19:32,880
It's empty the preview, but as soon as I select something.

271
00:19:34,220 --> 00:19:39,950
Excellent, and just in case you're curious, I am going to go at it off camera, my doctor miaows a

272
00:19:39,950 --> 00:19:45,950
lot post so that it doesn't have the script code here because I'm not trying to cross site script attack

273
00:19:45,950 --> 00:19:46,580
myself.

274
00:19:46,970 --> 00:19:51,470
OK, just so you and I are on the same page anyways, that's going to bring this video to a close.

275
00:19:51,830 --> 00:19:54,800
I'm excited to connect all the dots in our next lesson.

276
00:19:55,040 --> 00:19:57,230
Let's keep things rolling and I'll see you then.
