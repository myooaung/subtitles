1
00:00:02,320 --> 00:00:03,250
Hello, everyone.

2
00:00:03,610 --> 00:00:09,100
In this lesson, we're going to build dynamic queries, let's jump into the action.

3
00:00:09,110 --> 00:00:14,590
So in our previous lesson, we set up this template that pulls in the first 100 pets.

4
00:00:14,890 --> 00:00:22,420
However, now we want to be able to go up into the address bar and say maybe questionmark species equals

5
00:00:22,570 --> 00:00:23,260
dog.

6
00:00:23,770 --> 00:00:30,120
And we want our template to react to this data and then only show dogs in the table.

7
00:00:30,580 --> 00:00:36,210
Now, setting this up for the most part, has nothing to do with WordPress or sequel.

8
00:00:36,550 --> 00:00:42,940
This is really just an exercise in dynamically building a string or concatenating together a string,

9
00:00:43,330 --> 00:00:49,750
because essentially we're just taking values from the incoming Eurail and then pasting together a string

10
00:00:49,750 --> 00:00:50,340
of text.

11
00:00:50,350 --> 00:00:51,690
That's a skill statement.

12
00:00:51,970 --> 00:00:57,520
In other words, because we're not truly learning anything about WordPress or sequel, I'm going to

13
00:00:57,520 --> 00:00:59,710
move very quickly in this lesson.

14
00:01:00,040 --> 00:01:04,270
But this should be a good example of how you could set something like this up.

15
00:01:04,570 --> 00:01:06,630
Having said that, let's get started.

16
00:01:06,970 --> 00:01:13,330
So within our IAC folder, in our template pets' file, we've already written the IP that loads the

17
00:01:13,360 --> 00:01:14,990
first 100 pets.

18
00:01:15,340 --> 00:01:20,770
Now, this only took five or six lines of code, so I didn't mind including that right here within the

19
00:01:20,770 --> 00:01:21,820
HTML.

20
00:01:22,060 --> 00:01:29,170
But now that we need to dynamically generate a much more complex query where we say where species' equals

21
00:01:29,170 --> 00:01:31,300
blank and favourite colour equals this.

22
00:01:31,570 --> 00:01:36,760
And we'll also need to build the array of placeholder values for prepare, so on and so forth, because

23
00:01:36,790 --> 00:01:38,620
this is going to require more code.

24
00:01:38,860 --> 00:01:44,350
You don't need to do this, but I actually want to keep it in a separate file so that this file can

25
00:01:44,350 --> 00:01:46,680
really just be about the HTML.

26
00:01:47,140 --> 00:01:48,300
So here's what I would do.

27
00:01:48,400 --> 00:01:53,200
Select these four lines of code and the here and just cut that into your clipboard.

28
00:01:53,650 --> 00:02:00,400
We can get rid of this block and then maybe up at the very top of this file, when we first drop into

29
00:02:00,760 --> 00:02:10,330
PHP, I would just say require once plug in DÃ¼rer path, use the file constant and then concatenate

30
00:02:10,330 --> 00:02:13,480
on and I'll call the file, maybe get pets.

31
00:02:15,100 --> 00:02:16,630
We haven't created this file yet.

32
00:02:16,630 --> 00:02:17,950
We'll create it in just a moment.

33
00:02:17,950 --> 00:02:20,590
But in that file I'll have a class.

34
00:02:20,740 --> 00:02:26,380
So that way inside the class I can use whatever simple function names I want without worrying about

35
00:02:26,560 --> 00:02:28,690
those names, conflicting with anything.

36
00:02:29,110 --> 00:02:35,680
So then on the next line I would just say lowercase git pets' equals a new instance of our pets class.

37
00:02:36,230 --> 00:02:38,950
OK, then before we go, create this new file really quick.

38
00:02:38,950 --> 00:02:45,040
If we go down into our table HTML where we're looping through each pet, well, we would just change

39
00:02:45,040 --> 00:02:50,950
the array that we're looping through to B get pets and look inside that get rid of that dollar sign

40
00:02:51,220 --> 00:02:52,630
for a property called Pets'.

41
00:02:52,960 --> 00:02:57,790
So when we go create that class, we'll just make sure that it has a property named Pets'.

42
00:02:57,790 --> 00:02:59,420
That is the array of results.

43
00:02:59,890 --> 00:03:02,010
OK, but everything else here can stay the same.

44
00:03:02,260 --> 00:03:03,760
So let's save this.

45
00:03:04,030 --> 00:03:12,400
And now within our I n c folder, I'll just create a brand new file and name it get pets' p in this

46
00:03:12,400 --> 00:03:13,360
way, this new file.

47
00:03:13,570 --> 00:03:19,840
This is responsible for building the query and talking to the database and this file can just be our

48
00:03:19,840 --> 00:03:21,700
overall HTML template.

49
00:03:22,060 --> 00:03:25,600
So in our new empty file I would go into PHP.

50
00:03:26,020 --> 00:03:31,810
I'll create a class and get pets' curly brackets inside.

51
00:03:31,810 --> 00:03:38,680
There I'll have a function with the exact name of underscore, underscore, construct, parentheses,

52
00:03:38,680 --> 00:03:41,920
curly brackets just to get started within the function.

53
00:03:41,920 --> 00:03:47,050
Let's paste in our clipboard and for now all we would need to change is this line.

54
00:03:47,050 --> 00:03:53,830
So instead of creating a variable called Pets', we can just say sign this Dasch greater than to create

55
00:03:53,830 --> 00:03:56,410
a property and name it pets.

56
00:03:56,680 --> 00:04:01,510
And now the template that's including this file should have everything it needs, right?

57
00:04:01,510 --> 00:04:05,170
Just this pets' property so we can save this and test it out.

58
00:04:05,170 --> 00:04:07,180
Make sure you save your template file as well.

59
00:04:07,570 --> 00:04:10,270
And if we refresh the front end, perfect.

60
00:04:10,330 --> 00:04:11,380
Nothing's changed.

61
00:04:11,800 --> 00:04:17,500
Now, before we worry about making our query builder truly dynamic so that it could handle things like

62
00:04:17,620 --> 00:04:27,700
species' equals dog and fav color equals green and min wait equals twenty and max weight equals fifty.

63
00:04:27,850 --> 00:04:34,120
Before we worry about how to handle all of these things, let's first just sort of hard code things

64
00:04:34,120 --> 00:04:37,180
where we do pull in the dynamic value for Species'.

65
00:04:37,420 --> 00:04:41,050
Once we have that up and running, then it will be clear what we need to do.

66
00:04:41,440 --> 00:04:44,100
So here's what we can do back in our pets.

67
00:04:44,740 --> 00:04:52,180
P We would just adjust this statement to be select all columns from our table name after table name.

68
00:04:52,180 --> 00:05:00,040
We'd say where species' equals percent string or two percent s as a placeholder.

69
00:05:00,460 --> 00:05:01,570
And then remember how the.

70
00:05:01,740 --> 00:05:08,260
Repair function works, you give it a second argument, so after our quotes, there exists a comma and

71
00:05:08,260 --> 00:05:12,850
then you give it an array with your actual placeholder values that you want to substitute in.

72
00:05:13,240 --> 00:05:19,420
So right here, we would want this to be dog or cat or whatever value the visitor has specified four

73
00:05:19,420 --> 00:05:20,770
species equals.

74
00:05:20,980 --> 00:05:29,140
So to access that in and it's just dollar sign, underscore gett because it is a request, not a post

75
00:05:29,140 --> 00:05:34,330
request, and then square brackets and then just look inside it for species.

76
00:05:35,020 --> 00:05:38,950
Now the proper function will escape our code from a school perspective.

77
00:05:39,190 --> 00:05:44,090
But in the real world, I would probably run this through a generic sanitized function as well.

78
00:05:44,680 --> 00:05:46,000
We'll get to that in just a moment.

79
00:05:46,000 --> 00:05:47,770
But for now, this is a quick example.

80
00:05:48,070 --> 00:05:49,630
We can go ahead and save that.

81
00:05:50,080 --> 00:05:56,260
And if we refresh, cool, now we're only getting dogs or you can change this to hampster.

82
00:05:58,150 --> 00:05:58,710
Perfect.

83
00:05:58,720 --> 00:05:59,610
You get the idea.

84
00:06:00,040 --> 00:06:05,260
So now that we have things sort of up and running and you see the general idea of you give prepare a

85
00:06:05,260 --> 00:06:08,460
second argument with the actual values from the euro.

86
00:06:08,890 --> 00:06:14,950
Now we need to take a step back and think about how to make our query builder truly dynamic.

87
00:06:15,340 --> 00:06:15,610
Right.

88
00:06:15,610 --> 00:06:22,360
So that it could handle something like Species' equals Hampster and Minne weight equals twenty and max

89
00:06:22,360 --> 00:06:24,120
weight equals 70.

90
00:06:24,370 --> 00:06:29,400
We need some way to loop through all of the available arguments and then build a string of text.

91
00:06:29,710 --> 00:06:34,530
Also, in addition to this one SQL statement, we'll also want to send off another.

92
00:06:34,540 --> 00:06:39,910
That is just the overall count because we're displaying the first 100 matching results.

93
00:06:39,910 --> 00:06:43,060
But what if our query finds 500 results?

94
00:06:43,060 --> 00:06:45,910
We would want to display that right here on the website.

95
00:06:45,970 --> 00:06:49,240
Found X number of results showing the first X.

96
00:06:49,510 --> 00:06:55,720
So to get started, let's write sort of a skeleton or pseudo code of the overall big picture steps.

97
00:06:56,020 --> 00:07:01,320
Then we can go through and sort of actually build the methods that take care of each responsibility.

98
00:07:01,630 --> 00:07:04,710
Let's actually get rid of this line entirely.

99
00:07:05,110 --> 00:07:08,530
So this line where we're calling prepare, I will just delete that entirely.

100
00:07:09,310 --> 00:07:14,530
Instead on this line when we're calling, get results inside these parentheses instead of our query,

101
00:07:14,530 --> 00:07:15,610
I would just feed it.

102
00:07:16,330 --> 00:07:21,760
Well, whatever the prepare returns for dollar sign wp db look inside it.

103
00:07:21,780 --> 00:07:22,750
Call prepare.

104
00:07:22,990 --> 00:07:25,530
We know we're going to give prepare to arguments.

105
00:07:25,990 --> 00:07:29,440
The first is the query string text that we need to build.

106
00:07:29,710 --> 00:07:32,110
The second is our placeholder values.

107
00:07:32,410 --> 00:07:36,340
Let's actually start with the placeholder values because that's super simple, right?

108
00:07:36,340 --> 00:07:39,250
It's just an array of the incoming values.

109
00:07:39,280 --> 00:07:41,470
So here's what I would do above that line.

110
00:07:41,770 --> 00:07:48,250
First, I would probably create a property on this class or object that just stores and sanitizes all

111
00:07:48,250 --> 00:07:50,440
of the incoming you oral arguments.

112
00:07:50,470 --> 00:07:56,140
So I would say dollar sign this, create a property named ARGs, you could name it anything and say

113
00:07:56,140 --> 00:07:57,370
that that equals.

114
00:07:57,760 --> 00:08:02,860
And then I want to keep this area just big picture, this sort of the steps that I'm taking.

115
00:08:02,860 --> 00:08:05,260
I don't want any actual complex code here.

116
00:08:05,530 --> 00:08:11,050
So I'll create a method that's responsible for creating this and we can write that method in just a

117
00:08:11,050 --> 00:08:11,620
moment.

118
00:08:11,920 --> 00:08:16,390
For now, though, let's just point towards a method that doesn't even exist and we can call it git

119
00:08:16,780 --> 00:08:17,620
args.

120
00:08:17,980 --> 00:08:24,100
So in this method we will just pull everything from the Eurail, sanitize it, so on and so forth.

121
00:08:24,580 --> 00:08:29,890
Once we have those sanitized arguments, then on a new line, I'd probably just have another property

122
00:08:29,890 --> 00:08:34,780
on my class called placeholders and I would just set that to equal.

123
00:08:34,780 --> 00:08:38,320
And then again, we can have a method that's responsible for building that array.

124
00:08:38,320 --> 00:08:43,720
So I would just say this call a method, maybe create placeholders.

125
00:08:44,230 --> 00:08:50,080
OK, so now down on this line, we know that this second argument that would just pull in are placeholders.

126
00:08:50,080 --> 00:08:55,960
So instead of the B, I would just say sign this, look inside it for placeholders.

127
00:08:56,440 --> 00:08:59,020
OK, and now let's talk about this first arguments.

128
00:08:59,020 --> 00:09:01,090
And this is the actual string of text.

129
00:09:01,090 --> 00:09:03,340
That is the school statement we're trying to build.

130
00:09:03,610 --> 00:09:06,880
So right about here, I would just create a new variable.

131
00:09:07,090 --> 00:09:12,040
It doesn't need to be a property on our class because I know I'm not going to need to access it from

132
00:09:12,040 --> 00:09:13,360
with any of our methods.

133
00:09:13,990 --> 00:09:21,100
So for just a simple variable, just dollar sign and only query equals a string of text semicolon.

134
00:09:21,250 --> 00:09:24,670
And now this is the one part of the string that we can hard code.

135
00:09:24,670 --> 00:09:25,060
Right.

136
00:09:25,060 --> 00:09:32,470
Which is select all columns from dollar sign table name.

137
00:09:32,890 --> 00:09:35,260
And then we know that there should be a space after that.

138
00:09:35,260 --> 00:09:36,040
But that's it.

139
00:09:36,340 --> 00:09:37,870
That's all we can hard code.

140
00:09:37,870 --> 00:09:40,590
Everything else in our query needs to be dynamic.

141
00:09:40,900 --> 00:09:42,550
Now what comes next in the query?

142
00:09:42,730 --> 00:09:47,170
This is where you would normally say upper case, where blank equals blank.

143
00:09:47,410 --> 00:09:49,900
So here's what I would do on a new line.

144
00:09:49,900 --> 00:09:56,470
I would just say dollar sign query dot equals this is how you can add on to an existing value.

145
00:09:56,470 --> 00:10:01,390
So I want to add on to the end of this string and then I'll just have a separate.

146
00:10:01,440 --> 00:10:09,570
Method, whose only job is to generate the where species equals this, where favorite color equals percent

147
00:10:09,570 --> 00:10:11,220
s, so on and so forth.

148
00:10:11,580 --> 00:10:14,730
So I'll look inside the class and we can name that method.

149
00:10:14,730 --> 00:10:17,820
Maybe create where texts.

150
00:10:18,160 --> 00:10:20,800
OK, after that I will add on something else.

151
00:10:20,800 --> 00:10:29,770
So query dot equals and what I'll add on is a space and then limit 100 semicolon and that's it.

152
00:10:29,790 --> 00:10:34,730
So all of that together will create a string that we can use right here.

153
00:10:34,740 --> 00:10:38,610
So instead of the a placeholder we would just a dollar sign query.

154
00:10:39,150 --> 00:10:44,490
Now that we have sort of the big picture spelled out, let's just start building these methods one by

155
00:10:44,490 --> 00:10:44,820
one.

156
00:10:44,830 --> 00:10:47,100
So let's start with get args.
