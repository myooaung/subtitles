WEBVTT
1
00:00:00.300 --> 00:00:05.280
And just give it a render function that's responsible for the output.

2
00:00:06.160 --> 00:00:15.460
So in our plugin folder, let's jump into our index file and let's make a few adjustments so we no longer

3
00:00:15.460 --> 00:00:22.990
just need to load a JavaScript file with this exact action hook instead of just loading a file, we

4
00:00:22.990 --> 00:00:25.900
now want to actually register a block type from within.

5
00:00:26.920 --> 00:00:29.690
So we do want to use a different action hook.

6
00:00:29.980 --> 00:00:36.340
Let's change this instead of on Q Block Ed assets to just init.

7
00:00:36.910 --> 00:00:43.330
OK, so that's going to call admin assets now in our admin assets function instead of actually loading

8
00:00:43.330 --> 00:00:50.530
the JavaScript file directly, let's just register a script with this short name and then we can reference

9
00:00:50.530 --> 00:00:51.470
it in just a moment.

10
00:00:51.700 --> 00:00:59.860
So what I mean by this, instead of calling the function WP on Q script, let's change this to WP Register

11
00:00:59.890 --> 00:01:03.130
script so this won't load a file anywhere.

12
00:01:03.130 --> 00:01:06.120
But now we have this name that we can reference.

13
00:01:06.250 --> 00:01:12.610
So now still in this function, but just right below this line right about here, let's do this, let's

14
00:01:12.610 --> 00:01:19.540
leverage a WordPress function called register underscore block, underscore type parentheses to call

15
00:01:19.540 --> 00:01:21.880
it, and we're going to give it to arguments.

16
00:01:22.300 --> 00:01:30.010
The first argument needs to be so strong a text that exact matching namespace and block type name that

17
00:01:30.010 --> 00:01:32.130
we already used back in our JavaScript.

18
00:01:32.590 --> 00:01:39.250
So to be sure, you could actually just back in JavaScript, copy this exact namespace slash block type

19
00:01:39.250 --> 00:01:45.780
name, just copy that into your clipboard back and be that is our value for the first argument.

20
00:01:46.300 --> 00:01:51.430
OK, this second argument, instead of the placeholder B is an array of options.

21
00:01:51.430 --> 00:01:55.260
So array parentheses inside there we can drop down.

22
00:01:55.990 --> 00:01:57.780
Let's give this array two items.

23
00:01:57.790 --> 00:02:03.600
So the first is a property with this exact name of Ed Underscore script.

24
00:02:04.360 --> 00:02:10.190
So this is just our way of telling WordPress which JavaScript file to load for this block type.

25
00:02:10.240 --> 00:02:15.190
So this is the name of the array item and then equal greater than squished together.

26
00:02:15.340 --> 00:02:16.430
This will be the value.

27
00:02:16.780 --> 00:02:18.970
So this would just be a string of text.

28
00:02:19.570 --> 00:02:24.490
You can see my short name for that script that we've registered is our new block type.

29
00:02:24.580 --> 00:02:28.180
So that's what we want here at the end of that line, comma.

30
00:02:28.180 --> 00:02:30.850
We want one more item in this array of options.

31
00:02:31.180 --> 00:02:32.890
And this is the really interesting one.

32
00:02:32.920 --> 00:02:36.910
It needs to be named render underscore callback.

33
00:02:37.360 --> 00:02:43.450
And now we just give it a function that's responsible for returning a bit of HTML.

34
00:02:43.960 --> 00:02:47.020
Right, that the general public will see on the front end of our website.

35
00:02:47.470 --> 00:02:48.970
So let's say Arae.

36
00:02:49.690 --> 00:02:50.730
The first item is dollar.

37
00:02:50.740 --> 00:02:51.250
Sign this.

38
00:02:51.250 --> 00:02:51.400
Right.

39
00:02:51.400 --> 00:02:55.390
We're just using the array callable syntax and now let's make up a method name.

40
00:02:55.990 --> 00:02:59.000
How about we just call it the HTML?

41
00:02:59.410 --> 00:03:04.390
OK, now let's just go create a function with that name still within our class, but below this function,

42
00:03:04.810 --> 00:03:13.690
let's say function, the HTML parentheses, curly brackets inside the body of this new function, we

43
00:03:13.690 --> 00:03:15.550
would just want to return.

44
00:03:16.300 --> 00:03:21.250
Let's have a string of text, be sure to have a semicolon there and let's just have a paragraph.

45
00:03:21.400 --> 00:03:30.730
So HTML opening and closing and let's say today the sky is blank and the grass is blank only we want

46
00:03:30.730 --> 00:03:32.440
these to be real values.

47
00:03:32.980 --> 00:03:38.110
So when WordPress calls our function, it's going to pass into it everything we need.

48
00:03:38.350 --> 00:03:42.220
In other words, the attributes from that instance of the block.

49
00:03:42.430 --> 00:03:42.690
Right.

50
00:03:42.700 --> 00:03:44.470
Whatever values the user typed in.

51
00:03:44.710 --> 00:03:47.230
So we want to have a parameter here to receive that.

52
00:03:47.560 --> 00:03:50.260
You can name it anything, but let's name it attributes.

53
00:03:50.260 --> 00:03:53.140
So dollar sign attributes.

54
00:03:53.440 --> 00:03:54.970
And now we can just use that.

55
00:03:55.390 --> 00:04:00.940
Now it's just a matter of making these values dynamic by looking inside the attributes.

56
00:04:01.150 --> 00:04:01.960
So let's do this.

57
00:04:01.960 --> 00:04:06.040
Let's close out the string of text here and then concatenate on something.

58
00:04:06.040 --> 00:04:11.800
And then after the placeholder we would concatenate on another string of text like this instead of X.

59
00:04:11.800 --> 00:04:15.940
What we would actually want here is just dollar sign attributes.

60
00:04:16.150 --> 00:04:18.940
It's an array, so square brackets to look inside it.

61
00:04:19.180 --> 00:04:24.540
And we're interested in the item that's named quotes sky color.

62
00:04:25.180 --> 00:04:30.700
OK, let's do the same thing for this, the grass color so we can close out that string of text here,

63
00:04:30.700 --> 00:04:38.440
concatenate on something after the X, we would concatenate on another string of text the period for

64
00:04:38.440 --> 00:04:42.250
the end of the sentence and the closing HTML tag instead of the actual X.

65
00:04:42.250 --> 00:04:45.490
What we would want is dollar sign attributes.

66
00:04:45.790 --> 00:04:50.140
It's an array and we want grass color.

67
00:04:50.980 --> 00:04:55.780
And before we save this, just so we can make sure that it's actually working coming from our new code,

68
00:04:56.110 --> 00:05:00.040
why don't we end it with three exclamations just so it's obvious.

69
00:05:00.430 --> 00:05:02.500
Let's go ahead and save it and test it out.

70
00:05:02.920 --> 00:05:05.590
So back in the admin area, we will.

71
00:05:05.630 --> 00:05:12.020
We need to delete that old instance of the block because it was using the old JavaScript way now that

72
00:05:12.020 --> 00:05:12.350
we're using.

73
00:05:12.920 --> 00:05:15.110
We will never run into that problem again, though.

74
00:05:15.110 --> 00:05:17.780
So let's insert a new instance of it.

75
00:05:18.620 --> 00:05:23.300
Let's say the sky is light gray and the grass is green.

76
00:05:24.020 --> 00:05:25.220
Let's save that.

77
00:05:25.220 --> 00:05:27.770
And if we go view it on the front end.

78
00:05:30.280 --> 00:05:33.350
Perfect, we see the three exclamations at the end.

79
00:05:33.880 --> 00:05:35.830
Now, here's why this is so cool.

80
00:05:36.160 --> 00:05:45.010
If we make changes to this function so we could say today the sky is completely blank and maybe instead

81
00:05:45.010 --> 00:05:51.670
of a paragraph, if we make it a heading level one and we save that, we don't even need to go back

82
00:05:51.670 --> 00:05:57.100
into the admin ed screen and receive the post if we just refresh our front end.

83
00:05:58.290 --> 00:06:05.440
Awesome, it's just immediately updated because WordPress is using our function on the fly.

84
00:06:05.730 --> 00:06:09.900
I think the easiest way to understand what's going on is to look at the database again.

85
00:06:10.230 --> 00:06:15.150
If your WordPress is using post revisions, you will need to go back a page, make sure you're on the

86
00:06:15.150 --> 00:06:18.090
last page and click the very last item.

87
00:06:18.540 --> 00:06:22.100
So now this is all this getting saved into the database.

88
00:06:22.290 --> 00:06:25.050
There is no string of text or content.

89
00:06:25.050 --> 00:06:29.180
It's just a comment saying which type of block type we're using.

90
00:06:29.550 --> 00:06:32.220
And then the object with our attribute values.

91
00:06:32.520 --> 00:06:33.190
That's it.

92
00:06:33.630 --> 00:06:35.630
Now there's pros and cons to everything.

93
00:06:35.640 --> 00:06:37.770
So what's the drawback of this approach?

94
00:06:38.190 --> 00:06:45.450
Well, perhaps it takes an extra two milliseconds for WordPress to run our function instead of just

95
00:06:45.450 --> 00:06:48.240
loading a static string of text from the database.

96
00:06:48.630 --> 00:06:54.470
But I would argue that if you're being smart about caching on your site, that's not an issue.

97
00:06:54.870 --> 00:06:58.490
So long story short, I'm a huge fan of this approach.

98
00:06:58.920 --> 00:07:01.440
Just a few quick notes before we close out this lesson.

99
00:07:01.830 --> 00:07:08.230
You could use the escape underscore HTML function to escape these dynamic values.

100
00:07:08.460 --> 00:07:15.390
However, it's not uncommon in the history of WordPress to give the admin owner of the site the ability

101
00:07:15.390 --> 00:07:18.660
to type in HTML into their edit screen.

102
00:07:18.660 --> 00:07:21.480
So that's your own judgment call in this case?

103
00:07:21.480 --> 00:07:27.300
We don't really need the admin to be able to enter HTML into those fields, so I probably would wrap

104
00:07:27.300 --> 00:07:29.770
this in escape underscore HTML.

105
00:07:30.090 --> 00:07:36.810
OK, next, I find that writing and concatenating like this is super awkward.

106
00:07:37.140 --> 00:07:38.880
So what we can do instead is this.

107
00:07:39.210 --> 00:07:40.170
You can do this with me.

108
00:07:40.170 --> 00:07:40.530
Go ahead.

109
00:07:40.530 --> 00:07:47.790
And completely empty out the body of this function and instead let's say Obbie underscore start and

110
00:07:47.790 --> 00:07:49.080
then we're going to exit.

111
00:07:50.430 --> 00:07:52.860
And then right here we can have some HTML.

112
00:07:53.310 --> 00:07:57.930
And then on a new line, let's go back into PHP and return.

113
00:07:58.230 --> 00:08:02.370
Obbie underscore git underscore clean semicolon.

114
00:08:02.670 --> 00:08:08.610
So Obbie stands for output buffer and essentially anything that comes after this.

115
00:08:08.610 --> 00:08:12.880
But before this, well that's what's going to get returned in our function.

116
00:08:12.900 --> 00:08:17.130
So where the X is, we can just type regular old HTML now.

117
00:08:17.130 --> 00:08:21.000
So maybe we want to head in level three and to save time.

118
00:08:21.000 --> 00:08:23.700
Let me type this out and you can pause the video if you want to.

119
00:08:24.120 --> 00:08:28.320
The point is, is that now instead of concatenating a long string together, we're just writing out

120
00:08:28.320 --> 00:08:29.250
HTML.

121
00:08:29.370 --> 00:08:33.050
When we want to do something dynamic, we're just dropping in to be.

122
00:08:33.450 --> 00:08:36.930
So it's up to you to use the attributes however you see fit.

123
00:08:36.930 --> 00:08:42.090
But if I save that and refresh the front end, it still works perfectly.

124
00:08:42.480 --> 00:08:45.330
And that is going to bring this lesson to a close.

125
00:08:45.870 --> 00:08:51.330
Now that we understand the very basics of setting up a block type and we know how to connect the dots

126
00:08:51.330 --> 00:08:58.350
between JavaScript and P, I think we're ready to actually start building interesting block types.

127
00:08:58.860 --> 00:09:04.230
So let's look at a sneak peek preview of what we're going to build together in our very next lesson.

128
00:09:04.230 --> 00:09:07.140
We're going to begin working on these real block types.

129
00:09:07.410 --> 00:09:12.480
So this is a quiz or multiple choice type of block type where you give a question answers.

130
00:09:12.750 --> 00:09:14.130
That's the editor version.

131
00:09:14.160 --> 00:09:15.990
This is what it looks like on the front end.

132
00:09:15.990 --> 00:09:20.460
The user can get an answer wrong or get an answer correct.

133
00:09:21.750 --> 00:09:27.630
OK, once we build that together, then we're going to work on this block type together called the featured

134
00:09:27.630 --> 00:09:28.340
professor.

135
00:09:28.860 --> 00:09:30.810
So this is what the editor version looks like.

136
00:09:30.810 --> 00:09:33.000
You can choose any professor post type.

137
00:09:33.240 --> 00:09:35.100
It's going to give you a live preview.

138
00:09:35.670 --> 00:09:40.530
This is what it looks like on the Ed side, and this is what it looks like on the front end.

139
00:09:40.530 --> 00:09:44.340
So it gives you a link that takes you to that professor's permalink.

140
00:09:44.580 --> 00:09:51.960
And then on the Professor Permalink are plugin is going to look for any and all posts that are pointing

141
00:09:51.960 --> 00:09:53.010
towards this professor.

142
00:09:53.010 --> 00:09:58.650
So it's sort of a two way example, working with metadata, creating relationships, and we're tying

143
00:09:58.650 --> 00:10:01.320
it all back in to the WordPress block.

144
00:10:01.320 --> 00:10:03.720
Ed, I think this is going to be a lot of fun.

145
00:10:03.960 --> 00:10:07.380
Let's keep things rolling and I'll see you in the next lesson.
