1
00:00:02,300 --> 00:00:07,440
Hello, everyone, in this lesson, we're going to learn how to query our table for data.

2
00:00:07,970 --> 00:00:09,750
Let's jump right into the action.

3
00:00:10,130 --> 00:00:18,290
So back in the custom post type example lesson, we set up this page that has a slug of pet dash adoption.

4
00:00:18,620 --> 00:00:20,720
Now our new custom table plug in.

5
00:00:20,960 --> 00:00:27,260
It's also making sure that when you visit this Eurail, a custom template is being used and currently

6
00:00:27,260 --> 00:00:30,380
the template just outputs an empty table.

7
00:00:30,470 --> 00:00:30,740
Right.

8
00:00:30,740 --> 00:00:32,580
There's just dashes in each column.

9
00:00:32,960 --> 00:00:39,260
So our goal in this video is to actually query our database, our pet table, and display the records

10
00:00:39,260 --> 00:00:39,580
here.

11
00:00:40,040 --> 00:00:47,570
However, before we worry about WordPress or templates or HTTP, let's first just focus a little bit

12
00:00:47,570 --> 00:00:48,650
on sequel.

13
00:00:48,960 --> 00:00:56,480
So open up, add manner and then let's jump in to our pets table, then click select data.

14
00:00:56,750 --> 00:01:01,570
And a really cool feature that I want to draw your attention to is this area right here.

15
00:01:02,060 --> 00:01:07,220
This is a great spot to practice writing your first sequel statements.

16
00:01:07,610 --> 00:01:13,400
So this sort of default query, this is what's controlling the data that we're actually seeing here.

17
00:01:13,430 --> 00:01:20,180
So it's saying select all columns from this table and limit it to just the first 50.

18
00:01:20,540 --> 00:01:26,960
However, what if you and I want to query only for the pets where species equals cat?

19
00:01:27,470 --> 00:01:32,970
Well, we can just click this edit button and we can just practice writing a sequel statement.

20
00:01:33,500 --> 00:01:41,960
So after this from line, we can add a new line and say where all uppercase where species equals and

21
00:01:41,960 --> 00:01:43,850
then just quotes cat.

22
00:01:44,560 --> 00:01:47,910
Okay, then if we scroll down and click the execute button.

23
00:01:49,400 --> 00:01:49,810
Cool.

24
00:01:49,820 --> 00:01:54,850
So now it only returns items where the speciesist cat we can get even more specific.

25
00:01:54,860 --> 00:02:00,530
What if we only want cats whose birth year is 2017 or greater?

26
00:02:00,890 --> 00:02:05,150
Well from the screen we can just scroll down towards the bottom and just adjust our query again.

27
00:02:05,480 --> 00:02:14,180
So at the end of the where line we can just say uppercase and birth year, let's use the greater than

28
00:02:14,180 --> 00:02:16,420
symbol and just say twenty, seventeen.

29
00:02:16,880 --> 00:02:23,180
And what if instead of returning 50, we want a hundred to limit it to the first hundred click execute.

30
00:02:23,600 --> 00:02:24,110
Perfect.

31
00:02:24,110 --> 00:02:25,310
So you get the idea.

32
00:02:25,520 --> 00:02:28,010
We can also control what we're ordering by.

33
00:02:28,490 --> 00:02:33,860
So for example, if we wanted to order by birth year, we could just go back down into our query, add

34
00:02:33,860 --> 00:02:39,650
a new line after where and say order by birth year.

35
00:02:39,650 --> 00:02:44,300
And then you can say whether you want it to be ascending or descending.

36
00:02:44,930 --> 00:02:46,070
Let's run that query.

37
00:02:46,490 --> 00:02:46,850
Cool.

38
00:02:46,850 --> 00:02:49,430
So now they're sorted, are ordered by the birth year.

39
00:02:49,830 --> 00:02:53,480
Finally, just one last little bit of school practice that I want to run by you.

40
00:02:53,600 --> 00:02:56,600
You don't need to select all columns.

41
00:02:56,930 --> 00:03:04,870
So instead of saying select asterisk for all columns, you could just say select pet name Berthier year.

42
00:03:05,620 --> 00:03:08,050
You list out the specific columns you want.

43
00:03:08,060 --> 00:03:12,020
So if I only want maybe the name and their birth year, you can click execute.

44
00:03:12,650 --> 00:03:12,950
Cool.

45
00:03:12,950 --> 00:03:15,730
So then the results only include those two columns.

46
00:03:16,250 --> 00:03:21,950
Now, while there's much, much more complexity to sequel than this, we've at least seen that the very

47
00:03:21,950 --> 00:03:24,100
basics are not rocket science.

48
00:03:24,530 --> 00:03:31,910
So now at this point, our goal becomes running sequel statements like this from within our template.

49
00:03:32,390 --> 00:03:35,900
We just want to populate the table with the results from our query.

50
00:03:36,350 --> 00:03:38,900
So to do that, let's jump in to voice code.

51
00:03:39,410 --> 00:03:44,900
And before we jump into the template file directly, let's first go into our main file.

52
00:03:45,170 --> 00:03:46,580
So new database table.

53
00:03:47,030 --> 00:03:51,590
And while this has nothing to do with databases, I do want to run it by you because it's code that

54
00:03:51,590 --> 00:03:53,060
we've never written together.

55
00:03:53,360 --> 00:03:58,460
But essentially, if you scroll down in the construct function, you'll notice there's an add filter

56
00:03:58,460 --> 00:04:01,370
where the hook is template include.

57
00:04:01,940 --> 00:04:06,950
And then I'm calling a method that I named load template and then we can go look at that function.

58
00:04:07,610 --> 00:04:08,960
Here it is load template.

59
00:04:09,110 --> 00:04:13,700
So I'm just saying if and then I'm checking for a page slug.

60
00:04:13,710 --> 00:04:21,140
So I'm saying if the page slug is exactly this then return and then I'm just pointing towards my own

61
00:04:21,740 --> 00:04:23,570
file that will be used as a template.

62
00:04:24,410 --> 00:04:30,110
If this is not true, then just return the default template that WordPress would use for the current

63
00:04:30,110 --> 00:04:30,320
U.

64
00:04:30,320 --> 00:04:30,830
RL.

65
00:04:31,280 --> 00:04:35,210
So this is similar to when we use the content filter, right.

66
00:04:35,210 --> 00:04:40,730
You have a parameter that's sort of the incoming default or standard value and then you can return something

67
00:04:40,730 --> 00:04:45,170
new to override that or customize it, or you can just return the default value.

68
00:04:45,530 --> 00:04:52,040
So that's all this going on in terms of how I'm loading this custom template file for this particular

69
00:04:52,040 --> 00:04:53,360
Eurail or slug.

70
00:04:53,750 --> 00:04:54,110
Cool.

71
00:04:54,110 --> 00:04:59,090
So that had nothing to do with databases, but it is a good strategy for loading templates that I want

72
00:04:59,090 --> 00:05:01,520
you to be aware of anyways at this point.

73
00:05:01,880 --> 00:05:07,970
Now, let's actually jump into our template file, so it's in the ANC folder and it's called Template

74
00:05:07,970 --> 00:05:09,080
Dash Pets'.

75
00:05:10,100 --> 00:05:12,460
OK, now how about right above the table?

76
00:05:12,470 --> 00:05:16,420
So for me, that's around line number 19, right above the table.

77
00:05:16,610 --> 00:05:18,680
Let's practice writing a query.

78
00:05:19,070 --> 00:05:24,020
So right above the table, let's just drop into PHP within PHP.

79
00:05:24,260 --> 00:05:31,190
Let's make sure that we have the Global Dollar Sign, WP, DB, make sure we have that available and

80
00:05:31,190 --> 00:05:32,930
then I'll make up a variable name.

81
00:05:32,930 --> 00:05:37,400
You can name it anything, but I'll just call it pets and set that to equal.

82
00:05:37,640 --> 00:05:45,770
And then we're going to use dollar sign wp db look inside it for a function called git underscore results

83
00:05:46,130 --> 00:05:47,060
semicolon.

84
00:05:47,640 --> 00:05:50,930
Now in these parentheses we just give it a sequel statement.

85
00:05:51,110 --> 00:05:55,440
So string of text and then it's exactly what we were just typing in admin.

86
00:05:55,560 --> 00:06:00,830
So it would be select and that's all uppercase select, maybe all columns.

87
00:06:00,830 --> 00:06:08,360
So asterisk from for now just to keep things simple, that's hard code the table name to underscore

88
00:06:08,360 --> 00:06:14,330
Pets', but we can make this dynamic in just a little bit and then we'd say where and then do this with

89
00:06:14,330 --> 00:06:15,260
me just for fun.

90
00:06:15,260 --> 00:06:20,600
Let's say where species' equals single quote dog.

91
00:06:21,080 --> 00:06:26,150
Finally, let's end it with limit all uppercase, just the first one hundred.

92
00:06:26,630 --> 00:06:31,370
So the results of this query will then live in our pets variable.

93
00:06:31,730 --> 00:06:37,400
So just to see that on the screen, then right below this, let's just use the P function called var

94
00:06:37,400 --> 00:06:41,540
dump and just dump the results of dollar sign pets'.

95
00:06:42,230 --> 00:06:43,100
Let's save that.

96
00:06:43,100 --> 00:06:44,840
And if we refresh our template.

97
00:06:46,190 --> 00:06:48,980
Cool, so I have an array with 100 items in it.

98
00:06:49,370 --> 00:06:52,340
This first item has all the properties you would expect.

99
00:06:52,340 --> 00:06:55,550
And if we look at the species dog, if we look at the next one.

100
00:06:55,910 --> 00:06:56,220
Yep.

101
00:06:56,240 --> 00:06:57,290
So our query ran.

102
00:06:57,290 --> 00:06:59,500
We got the first one hundred dogs.

103
00:06:59,840 --> 00:07:06,320
Now, before we go any further, we need to talk about security since we're writing our own SQL statements

104
00:07:06,320 --> 00:07:13,010
now, instead of letting WordPress do its own querying through the WP query class, this means that

105
00:07:13,010 --> 00:07:15,210
you and I need to be extra careful.

106
00:07:15,560 --> 00:07:20,660
Maybe you've heard of things like sequel injection or just sequel attacks in general.

107
00:07:20,930 --> 00:07:22,880
We want to be sure to avoid those.

108
00:07:22,880 --> 00:07:26,670
And let's go back into our code so I can explain how this all works.

109
00:07:27,080 --> 00:07:33,620
So this query or statement that we just wrote, this is obviously safe and not malicious because you

110
00:07:33,620 --> 00:07:39,980
and I are not malicious and we wrote or hard coded every single character in this string.

111
00:07:40,490 --> 00:07:41,630
So this is safe.

112
00:07:41,780 --> 00:07:49,220
However, if we think about how we'd actually come up with queries in the real world, usually some

113
00:07:49,220 --> 00:07:51,110
part of it is going to be dynamic.

114
00:07:51,380 --> 00:07:55,850
So you and I just randomly decided that the species should be dog.

115
00:07:56,060 --> 00:08:02,030
But in the real world, how would this choice or preference, how would that get from the website to

116
00:08:02,030 --> 00:08:02,900
our database?

117
00:08:03,170 --> 00:08:09,740
Well, it would usually be communicated through a JSON object, or probably most common is just to communicate

118
00:08:09,740 --> 00:08:12,260
it through the user or address.

119
00:08:12,800 --> 00:08:13,130
Right.

120
00:08:13,160 --> 00:08:17,910
Something like at the end of this and be questionmark species equals dog.

121
00:08:18,410 --> 00:08:24,030
The point is we want to build the query based specifically on what the user or visitor is looking for.

122
00:08:24,290 --> 00:08:27,460
So we need to pull this value and use it.

123
00:08:27,800 --> 00:08:32,930
And this is where the danger comes from because a malicious person could type something super malicious

124
00:08:32,930 --> 00:08:33,460
right there.

125
00:08:33,860 --> 00:08:39,890
So if we're going to potentially use that value dynamically in our query or in this statement string,

126
00:08:40,040 --> 00:08:41,780
we need to be super careful.

127
00:08:42,110 --> 00:08:47,710
And luckily for us, WordPress gives us a tool specifically for this in mind.

128
00:08:48,140 --> 00:08:53,720
So whenever you're coming up with a skill statement and any part of it is going to be dynamic or from

129
00:08:53,720 --> 00:08:59,360
a user generated or user input piece of text, well, we use a different WordPress function that will

130
00:08:59,360 --> 00:09:03,820
generate the string and then we can pass that into get results.

131
00:09:04,430 --> 00:09:08,330
So do this with Millet's Hollow out the parentheses for git results.

132
00:09:09,020 --> 00:09:11,390
We'll fill in a value here in about 30 seconds.

133
00:09:11,390 --> 00:09:19,130
But right above that line, let's create a new variable and make up a name of our query and set that

134
00:09:19,130 --> 00:09:24,530
to equal dollar sign WP DB and we're going to use the function called Prepare.

135
00:09:25,070 --> 00:09:27,650
This function won't actually go out to the database.

136
00:09:27,890 --> 00:09:34,620
It's simply going to return a string of text and then we can feed that string of text into git results.

137
00:09:35,000 --> 00:09:36,920
So let me show you how this function works.

138
00:09:36,920 --> 00:09:38,300
We give it two arguments.

139
00:09:39,230 --> 00:09:46,340
The first argument is your SQL statement, so let's give it a string of text and say select all columns

140
00:09:47,240 --> 00:09:55,630
from WP Pets' where Species' equals, and then this is where it gets different.

141
00:09:55,640 --> 00:10:02,780
So instead of single quotes dog, we just use a placeholder which is percent sine s four string.

142
00:10:03,260 --> 00:10:06,170
And then let's close out the query with limit to the first.

143
00:10:06,170 --> 00:10:07,760
Let's just try and maybe the first 10.

144
00:10:08,240 --> 00:10:13,850
OK, and then for the second argument, instead of this placeholder B, we give it an array with the

145
00:10:13,850 --> 00:10:16,040
actual values for the placeholders.

146
00:10:16,460 --> 00:10:22,460
So instead of B, I'll say array parentheses and we'll just give it a value of, let's say, hampster.

147
00:10:23,210 --> 00:10:28,190
So the idea here is that all of this text is perfectly, completely safe.

148
00:10:28,190 --> 00:10:30,050
We can trust it because we wrote it.

149
00:10:30,260 --> 00:10:35,840
And then anything that is potentially dangerous will live in this array of placeholder values that get

150
00:10:36,050 --> 00:10:38,090
actually inserted into the text.

151
00:10:38,420 --> 00:10:42,720
So altogether that will generate the string and then that's what we can use for git results.

152
00:10:42,740 --> 00:10:49,390
So in these get results parentheses, we just say dollar sign our query, give this is save and test

153
00:10:49,400 --> 00:10:49,730
it out.

154
00:10:49,760 --> 00:10:57,200
So if I refresh, I should see ten hamster's so an array as a size of ten and the species is hampster

155
00:10:57,200 --> 00:10:57,830
perfect.

156
00:10:58,310 --> 00:11:03,980
And what if we only wanted hamster's where their birth year is greater than twenty eighteen.

157
00:11:04,370 --> 00:11:07,100
Well back in our code instead of percent.

158
00:11:07,100 --> 00:11:14,650
S as a placeholder for a string of text you can use percent D for a placeholder for a digit or number.

159
00:11:15,290 --> 00:11:23,180
So right after that we could say we're species' equals that and where birth year is greater than percent

160
00:11:23,180 --> 00:11:27,220
D and then in our array of actual values.

161
00:11:27,350 --> 00:11:31,730
So Hampster comes first because that's the first placeholder and then the second value would just be

162
00:11:31,730 --> 00:11:35,780
comma twenty eighteen if we give that a save and reload.

163
00:11:36,500 --> 00:11:37,040
Perfect.

164
00:11:37,040 --> 00:11:39,440
So hamster's with only a particular birth year.

165
00:11:39,810 --> 00:11:45,380
OK, at this point let's change gears and let's actually try to begin using this data.

166
00:11:45,690 --> 00:11:51,120
To populate the table down at the very bottom, right, we would just want to loop through the array

167
00:11:51,120 --> 00:11:54,270
of results and output, one row in the table for each pet.

168
00:11:54,750 --> 00:12:00,170
So back in our code, we don't actually need to query for the species in birth year.

169
00:12:00,420 --> 00:12:01,380
I only brought that up.

170
00:12:01,380 --> 00:12:07,110
So we had an example so I could show you the proper function as early as possible, because I want you

171
00:12:07,110 --> 00:12:11,370
to get in the practice of being careful with the skill statements you're creating.

172
00:12:11,760 --> 00:12:18,180
But for now, let's just put this back to pulling in the first 100 pets, regardless of species or any

173
00:12:18,180 --> 00:12:22,560
other attribute, so we can get rid of this where blank and blank.

174
00:12:23,130 --> 00:12:27,060
So just from this table and let's limit it to the first hundred.

175
00:12:27,600 --> 00:12:31,860
And because we don't have any placeholder values, we don't even need the second argument with the array

176
00:12:31,860 --> 00:12:32,660
of values.

177
00:12:33,000 --> 00:12:36,090
But don't worry, in our next lesson, we will start using this again.

178
00:12:36,090 --> 00:12:42,660
But for now, let's just pull in the first one hundred pets and let's also make the table name dynamic

179
00:12:42,690 --> 00:12:45,300
because you don't want a hard code, the table prefix.

180
00:12:45,870 --> 00:12:54,800
So maybe right above this line we can just say dollar sign table name equals and then dollar sign wp

181
00:12:54,820 --> 00:13:03,000
db look inside that for prefix and then concatenate on pets and then we can just use this variable here.

182
00:13:03,360 --> 00:13:07,800
So instead of WP pets it would be a dollar sign table name.

183
00:13:08,220 --> 00:13:13,650
OK, in order to use a variable like this in the middle of a string, you do need to be using double

184
00:13:13,650 --> 00:13:16,740
quotes instead of single quotes around our text.

185
00:13:17,320 --> 00:13:19,350
OK, let's give this to save and test it out.

186
00:13:19,350 --> 00:13:22,230
So hopefully that just loads an array with the hundred items.

187
00:13:22,440 --> 00:13:22,770
Yep.

188
00:13:22,920 --> 00:13:23,550
Perfect.

189
00:13:23,950 --> 00:13:25,080
OK, so let's do this.

190
00:13:25,080 --> 00:13:26,940
We can stop using var dump.

191
00:13:26,940 --> 00:13:29,040
We don't need to output the raw data.

192
00:13:29,400 --> 00:13:35,940
Instead we want to use this array of pets to actually populate our HTML table.

193
00:13:36,360 --> 00:13:39,330
So let's keep this very first TR or table row.

194
00:13:39,960 --> 00:13:43,620
It contains all of the labels but below that this next TR.

195
00:13:44,100 --> 00:13:50,370
Well this is what we would want to loop through an output once for each pet so you can just temporarily

196
00:13:50,370 --> 00:13:53,820
cut this table row into your clipboard and in its place.

197
00:13:53,820 --> 00:14:03,210
Let's go into P inside of let's use A for each parentheses curly brackets in the parentheses, let's

198
00:14:03,210 --> 00:14:05,070
say a dollar sign pets'.

199
00:14:05,070 --> 00:14:05,250
Right.

200
00:14:05,250 --> 00:14:10,470
We want to loop through our pets variable as dollar signs singular pet.

201
00:14:11,040 --> 00:14:14,430
Now inside our curly brackets we would want to output HTML.

202
00:14:14,430 --> 00:14:21,750
So what you can do is exit here, go back into here inside the curly brackets on this line.

203
00:14:21,750 --> 00:14:28,080
Now we can just paste in our clipboard and now we would just use real dynamic values instead of these

204
00:14:28,080 --> 00:14:28,950
dashes.

205
00:14:29,340 --> 00:14:38,310
So for the first one I would go into PHP and echo dollar sign Pett look inside it for pet name and then

206
00:14:38,310 --> 00:14:44,160
to save a lot of typing, I'm just going to copy this and paste it into these table cells or TDRS.

207
00:14:49,600 --> 00:14:57,250
OK, and then the second one, instead of pet name would be species and then pet weight and then birth

208
00:14:57,250 --> 00:15:10,600
year fave hobbit, fave color and fave food, if we give that a save and refresh, perfect.

209
00:15:11,080 --> 00:15:16,960
And just to be clear, I do want to point out that because our statement is perfectly safe, we don't

210
00:15:16,960 --> 00:15:18,730
even need to be using prepare.

211
00:15:19,030 --> 00:15:22,000
We could literally just have this inside of our get results.

212
00:15:22,450 --> 00:15:26,910
Right, because we're not using any dynamic or user generated values in our string.

213
00:15:27,220 --> 00:15:33,790
However, I went ahead and left prepared in place because in our very next lesson, we're going to learn

214
00:15:33,880 --> 00:15:37,210
how to take you RL parameters or arguments.

215
00:15:37,570 --> 00:15:45,070
For example, if someone said question fave color equals green, well, we're going to learn how to

216
00:15:45,070 --> 00:15:49,870
use these Eurail values to build out a dynamic query.

217
00:15:50,020 --> 00:15:53,730
And in that case, we absolutely do want to use prepare.

218
00:15:54,190 --> 00:15:59,830
I think it'll be an interesting lesson because it's fun to see our table sort of come to life and actually

219
00:15:59,830 --> 00:16:03,370
start responding to different neutrals or parameters.

220
00:16:03,740 --> 00:16:06,100
Let's keep things rolling and I'll see you then.
