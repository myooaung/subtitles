WEBVTT
1
00:00:02.100 --> 00:00:03.180
Hello, everyone.

2
00:00:03.450 --> 00:00:11.760
In this lesson, we are going to write P p to create custom API end points so that users can create

3
00:00:11.760 --> 00:00:14.340
a like or delete a like.

4
00:00:14.850 --> 00:00:20.850
If you're wondering why we're going to create new custom end points instead of using the default rest

5
00:00:20.850 --> 00:00:22.120
API endpoints.

6
00:00:22.470 --> 00:00:26.130
Don't worry, we will cover the Y a bit later on in the video.

7
00:00:26.480 --> 00:00:33.120
OK, so I'm on a professor detailed screen and in our previous lesson we set things up so that if you

8
00:00:33.120 --> 00:00:38.340
click on the lightbox, that's going to fire off one of two methods.

9
00:00:38.640 --> 00:00:41.360
So here we are in our like just module.

10
00:00:41.550 --> 00:00:47.670
And when you click the like box, it's either going to fire off, create like or delete like.

11
00:00:48.180 --> 00:00:55.590
And instead of these test alert messages, what we really want to do is send off a request to a custom

12
00:00:55.590 --> 00:00:57.110
API Eurail.

13
00:00:57.390 --> 00:01:05.310
So right now, on the side of things, let's go create or register new custom API funerals.

14
00:01:05.580 --> 00:01:13.410
So to do that, let's jump into functions dot BHP and we could just start coding this new feature anywhere

15
00:01:13.410 --> 00:01:14.190
in this file.

16
00:01:14.200 --> 00:01:21.010
But in order to stay super organized, why don't we write our new HP in a separate file?

17
00:01:21.300 --> 00:01:25.770
You might remember that we've already done this for our custom search roud.

18
00:01:26.070 --> 00:01:33.420
For example, in the root of our theme folder, we have a sub folder named C, which stands for INCLUDE,

19
00:01:34.500 --> 00:01:37.860
and it contains a file named Search Dash Routt.

20
00:01:38.190 --> 00:01:45.810
And remember, that's where we wrote all of the code that powers the custom search rest API you URL.

21
00:01:46.080 --> 00:01:50.700
So why don't we do this just to stay organized within this C folder?

22
00:01:50.940 --> 00:01:53.130
Why don't we create a brand new file?

23
00:01:53.640 --> 00:02:00.840
The name of this file does not matter, but why don't we call it like Dash Rao, dot BHP.

24
00:02:02.560 --> 00:02:05.380
Within this file, let's open up tag.

25
00:02:05.800 --> 00:02:13.810
You actually do not need a closing tag if your file is just pure IP and doesn't contain any HTML.

26
00:02:14.140 --> 00:02:16.060
OK, let's go ahead and save that again.

27
00:02:16.060 --> 00:02:24.880
And then back in our functions file, let's import or require in that brand new file that we just created

28
00:02:25.180 --> 00:02:27.490
now up at the top of my functions file.

29
00:02:27.760 --> 00:02:29.980
I've got this existing require line.

30
00:02:30.160 --> 00:02:32.620
You could just copy and paste and adjust that.

31
00:02:32.620 --> 00:02:37.770
But if that's not up at the top for you, I'll just type it out again to give you a reference.

32
00:02:38.020 --> 00:02:42.100
So we say require and then we just point towards a file.

33
00:02:42.490 --> 00:02:49.090
Now, WordPress makes this easy because it has a function named get the file part.

34
00:02:50.540 --> 00:02:52.390
Let's end this line with a semicolon.

35
00:02:52.390 --> 00:02:57.820
And then within these parentheses, we just provide a path that's relative to our theme folder.

36
00:02:58.400 --> 00:03:01.630
So let's say go inside that I n c subfolder.

37
00:03:01.870 --> 00:03:08.230
And we just named that brand new file like Dash throughout dot HP.

38
00:03:09.460 --> 00:03:15.470
OK, let's go ahead and save that and then let's jump in to our brand new like root file.

39
00:03:15.880 --> 00:03:18.070
Let's begin by adding an action.

40
00:03:18.070 --> 00:03:20.710
So add action.

41
00:03:21.520 --> 00:03:28.660
And the name of the WordPress event that we want to hook onto is Rest API.

42
00:03:28.810 --> 00:03:32.470
Annet, you might remember that we've used this before.

43
00:03:32.620 --> 00:03:37.410
Whenever we want to add a new custom route or add a new field to a route.

44
00:03:38.000 --> 00:03:41.380
OK, then for the second argument, let's make up a function name.

45
00:03:41.890 --> 00:03:48.450
We could call it whatever we want, but let's say university like rabbits.

46
00:03:48.970 --> 00:03:52.860
Next, let's create a function with this exact matching name.

47
00:03:53.650 --> 00:04:03.160
So function university like route's parentheses, curly brackets, OK, and within this function, what

48
00:04:03.160 --> 00:04:06.940
we want to do is register two new rabbits.

49
00:04:07.270 --> 00:04:10.620
A root is basically just a rest api u rl.

50
00:04:10.840 --> 00:04:16.630
Now if you wanted to save some typing, you could just jump into the search route file that lives in

51
00:04:16.630 --> 00:04:18.190
our agency folder.

52
00:04:18.550 --> 00:04:22.630
So if I do that here, we can see the register rest route method.

53
00:04:23.110 --> 00:04:26.920
So you could just copy and paste this and adjust it to meet your needs.

54
00:04:27.220 --> 00:04:29.710
But I think practice makes perfect.

55
00:04:29.710 --> 00:04:33.830
So why don't we type it out by hand and analyze how it works.

56
00:04:34.120 --> 00:04:42.380
So within this brand new function that we just set up, let's say register, reste Routt, OK, and

57
00:04:42.400 --> 00:04:45.280
within the parentheses, we want to give it three arguments.

58
00:04:45.550 --> 00:04:48.130
You could say A, B, C is placeholders.

59
00:04:48.460 --> 00:04:54.070
The first argument is the beginning part of the you are well known as the namespace.

60
00:04:54.580 --> 00:04:59.830
So why don't we say university slash V one.

61
00:05:00.310 --> 00:05:01.120
This doesn't matter.

62
00:05:01.120 --> 00:05:02.850
It could be whatever you please.

63
00:05:03.160 --> 00:05:07.870
Then the second argument is the name for this specific route or U.

64
00:05:07.870 --> 00:05:14.980
RL so why don't we say Manege like again, the name does not matter.

65
00:05:14.980 --> 00:05:16.750
We can make up whatever we want.

66
00:05:17.020 --> 00:05:23.320
And the final and third argument is an array within the array parentheses.

67
00:05:23.320 --> 00:05:24.520
I like to dropdown.

68
00:05:26.580 --> 00:05:29.380
And in the array, we want to provide two things.

69
00:05:29.670 --> 00:05:39.240
So first is Method's I will set that to a temporary X placeholder and the other property is called back.

70
00:05:41.130 --> 00:05:41.670
All right.

71
00:05:41.670 --> 00:05:47.790
Now, before we fill in these placeholder X values and before we even review the terms, callback and

72
00:05:47.790 --> 00:05:54.300
methods, what I first want to do is duplicate this entire register restroom block of code.

73
00:05:54.870 --> 00:05:56.340
So I'm just going to copy this.

74
00:05:57.680 --> 00:06:04.550
Right below it pasted in, and the reason I want two of these is because I want the first one to be

75
00:06:05.000 --> 00:06:10.720
for the post method and I want the second one to be for the delete method.

76
00:06:11.150 --> 00:06:19.460
So the word methods in this context just means the type of HTP request that this route is responsible

77
00:06:19.460 --> 00:06:19.880
for.

78
00:06:20.090 --> 00:06:25.760
So that's why we are setting up two different routes, even though they are targeting the same Eurail

79
00:06:25.760 --> 00:06:26.990
that you would type in.

80
00:06:27.170 --> 00:06:27.390
Right.

81
00:06:27.500 --> 00:06:35.510
University V1 managed like they are unique because this one will respond to a post request and this

82
00:06:35.510 --> 00:06:38.320
one will respond to a delete request.

83
00:06:38.720 --> 00:06:39.200
All right.

84
00:06:39.200 --> 00:06:45.350
And then callback is just a function that we want to run when a request is sent to one of these routes.

85
00:06:45.650 --> 00:06:51.680
Now, we could type out an inline anonymous function here, but instead to stay organized.

86
00:06:51.680 --> 00:06:55.060
Why don't we do this down at the very bottom of this file?

87
00:06:55.220 --> 00:06:58.100
Let's create two brand new functions.

88
00:06:58.280 --> 00:07:06.320
You could name these functions, whatever you please, but I'm going to name them, create like parentheses,

89
00:07:06.320 --> 00:07:09.440
curly brackets and I will name the other function.

90
00:07:09.980 --> 00:07:12.830
You might have guessed it delete like.

91
00:07:14.780 --> 00:07:22.790
OK, so now if someone sends a post request I want to respond with or I want my callback to be the create

92
00:07:22.790 --> 00:07:23.660
like function.

93
00:07:26.480 --> 00:07:35.530
And if someone sends a delete request, I want to respond by calling the deadly like function, OK,

94
00:07:35.540 --> 00:07:40.790
and then within these functions, we are free to do absolutely whatever we want.

95
00:07:41.120 --> 00:07:45.470
So this is where we will programmatically create a new like post.

96
00:07:45.650 --> 00:07:51.530
And this is where we will programmatically delete a like post and we can implement our own custom,

97
00:07:51.530 --> 00:07:53.210
logic and restrictions.

98
00:07:53.390 --> 00:07:53.720
Right.

99
00:07:53.720 --> 00:07:57.600
Things like each user can only like each professor once.

100
00:07:57.830 --> 00:08:02.030
Now, before we get into that, why don't we just return a sample message here?

101
00:08:02.300 --> 00:08:07.880
Because whatever these functions return is the data that will be available to our JavaScript.

102
00:08:08.240 --> 00:08:09.510
Let me show you what I mean.

103
00:08:09.560 --> 00:08:18.800
So within this create like function, let's just return a string of text that says thanks for trying

104
00:08:18.800 --> 00:08:25.520
to create a like and underline with a semicolon and within the delete like function.

105
00:08:25.520 --> 00:08:27.290
Let's return a string of text.

106
00:08:27.830 --> 00:08:33.410
Thanks for trying to delete a like semicolon at the end.

107
00:08:34.250 --> 00:08:36.440
OK, let's go ahead and save this.

108
00:08:36.620 --> 00:08:43.490
And now let's write a bit of JavaScript so that when you click the like box, JavaScript will send out

109
00:08:43.490 --> 00:08:47.060
a request to either this route or this route.

110
00:08:47.600 --> 00:08:54.500
OK, so let's jump back into our like JS module and let's start with our create like method.

111
00:08:55.250 --> 00:09:03.010
So let's delete this alert test message, pop up and instead let's use J queries Ajax Tool.

112
00:09:03.350 --> 00:09:06.310
So Dollar Sign Dot Ajax.

113
00:09:06.680 --> 00:09:07.700
OK, that's a method.

114
00:09:08.000 --> 00:09:14.660
Now within the parentheses, we want to provide it an object, a javascript object with different properties.

115
00:09:15.020 --> 00:09:20.640
So I like to dropdown within the curly brackets and let's give this object a few different properties.

116
00:09:20.990 --> 00:09:22.160
The first is U.

117
00:09:22.160 --> 00:09:24.980
RL, we can fill this in in just a moment.

118
00:09:24.980 --> 00:09:26.300
Let's add a placeholder.

119
00:09:27.400 --> 00:09:29.750
We also want a property named type.

120
00:09:30.040 --> 00:09:37.500
This is the type of HTP request that we want to send, I will say quotes all capital post.

121
00:09:37.780 --> 00:09:40.960
That's the traditional type when you want to create something.

122
00:09:42.130 --> 00:09:45.200
OK, then let's add another property named Success.

123
00:09:46.330 --> 00:09:49.780
This is a function that will run if our request is successful.

124
00:09:50.050 --> 00:09:51.580
Let's just add a placeholder.

125
00:09:51.790 --> 00:09:57.010
And then there's also a property named error, which is also a function that will run if the request

126
00:09:57.010 --> 00:09:57.730
fails.

127
00:09:57.880 --> 00:10:01.450
OK, now let's go through and fill out the X placeholders.

128
00:10:01.570 --> 00:10:09.070
So for the you are l we want that to be university data dot route.

129
00:10:09.430 --> 00:10:10.030
You are.

130
00:10:10.070 --> 00:10:16.060
Well that's the property that we set up a long time ago that gives us the flexible route part of the

131
00:10:16.060 --> 00:10:16.750
domain.

132
00:10:17.290 --> 00:10:22.810
And then we want to add on slash WP Dash Jason.

133
00:10:23.110 --> 00:10:29.470
And if we were using the default rest API endpoints points for a post type, then we would type slash

134
00:10:29.470 --> 00:10:34.480
WP, slash V2 and then whatever post type we wanted to work with.

135
00:10:34.480 --> 00:10:34.750
Right.

136
00:10:34.760 --> 00:10:38.050
So either posts or pages or note.

137
00:10:38.680 --> 00:10:48.640
However, in this case, since we set up custom endpoints, let's say WP, JSON, slash university slash

138
00:10:48.640 --> 00:10:49.420
V1.

139
00:10:49.810 --> 00:10:50.080
Right.

140
00:10:50.080 --> 00:10:55.960
Because that's the namespace that we used when we just registered the new rounds and then we named our

141
00:10:55.960 --> 00:11:03.970
roots Manege like, OK, so just make sure that this part that I'm highlighting matches the name that

142
00:11:03.970 --> 00:11:06.880
you used back in our new AP file.

143
00:11:07.360 --> 00:11:07.660
Right.

144
00:11:07.660 --> 00:11:09.400
You wanted to match this.

145
00:11:11.680 --> 00:11:19.540
OK, so back in our JavaScript, let's provide success and error functions, so if our request is successful,

146
00:11:19.540 --> 00:11:26.170
let's just provide an S6 Arrow function and within the curly brackets or body of the function, let's

147
00:11:26.170 --> 00:11:32.350
just say console dot, log response, whatever the word press server responds with.

148
00:11:32.620 --> 00:11:38.610
In order to do that, though, we want to be sure to pass response as a parameter within these parentheses.

149
00:11:39.790 --> 00:11:43.910
OK, and for now, let's just do the exact same thing if the request fails.

150
00:11:44.230 --> 00:11:47.410
So for the error function parentheses.

151
00:11:48.810 --> 00:11:57.420
Arrow symbol, curly brackets, console, dot, log response and be sure to pass that as a parameter.

152
00:11:58.830 --> 00:12:02.800
OK, so we've got this test code in place for the create like method.

153
00:12:03.150 --> 00:12:06.330
Now let's do the same thing for our delete like method.

154
00:12:06.850 --> 00:12:10.770
Let's save a ton of typing by just duplicating this Ajax call.

155
00:12:11.250 --> 00:12:13.150
So copy from here to here.

156
00:12:13.590 --> 00:12:19.650
Copy that into my clipboard then within the delete like method, just get rid of the alert and paste

157
00:12:19.650 --> 00:12:20.490
in your clipboard.

158
00:12:20.880 --> 00:12:21.600
For now.

159
00:12:21.600 --> 00:12:25.890
The only thing we need to change is the type of request that we're sending.

160
00:12:26.220 --> 00:12:30.500
Instead of a post request, let's send a delete request.

161
00:12:30.960 --> 00:12:33.300
Everything else can stay exactly the same.

162
00:12:33.480 --> 00:12:36.100
We can target the exact same Eurail.

163
00:12:36.690 --> 00:12:42.570
OK, let's go ahead and save this and make sure that your JavaScript gets rebundled and then let's hop

164
00:12:42.570 --> 00:12:43.710
over to the front end.

165
00:12:44.010 --> 00:12:46.320
And I have not liked this professor yet.

166
00:12:46.320 --> 00:12:50.550
So if I click on the like box and then check my console.

167
00:12:51.570 --> 00:12:52.240
Cool, we see.

168
00:12:52.290 --> 00:12:58.610
Thanks for trying to create a like this means that our custom API endpoints are doing their job.

169
00:12:58.890 --> 00:13:05.210
We successfully registered those new neutrals and they are returning the desired data just as a test.

170
00:13:05.220 --> 00:13:09.420
If I go back to Dr. Bachs a lot, I've already like this professor.

171
00:13:09.420 --> 00:13:15.950
So if I click on the lightbox and then check my console, thanks for trying to delete a like cool.

172
00:13:15.960 --> 00:13:21.710
So at this point our front end JavaScript is successfully communicating with our back end up.

173
00:13:22.110 --> 00:13:24.390
Now that's going to bring this video to a close.

174
00:13:24.390 --> 00:13:31.860
But in the next part of this lesson, we are going to write the IP to actually programmatically create

175
00:13:31.890 --> 00:13:33.690
or delete a like post.

176
00:13:34.030 --> 00:13:40.770
So if I jump back into that new like group file within these two functions, we are going to write the

177
00:13:40.770 --> 00:13:48.180
necessary code to not only create or delete a like post, but also enforce all of our custom, logic

178
00:13:48.180 --> 00:13:49.430
and restrictions.

179
00:13:49.620 --> 00:13:52.200
And this is where things really start to get fun.

180
00:13:52.560 --> 00:13:59.490
We're starting to put all of the pieces together, the front end, the back end HTTP requests and making

181
00:13:59.490 --> 00:14:01.530
queries to the WordPress database.

182
00:14:01.800 --> 00:14:06.780
And once you're comfortable with smushing all of those things together, you can build pretty much whatever

183
00:14:06.780 --> 00:14:07.760
you can think up.

184
00:14:08.070 --> 00:14:12.600
So let's keep things rolling and I will see you in the next part of this lesson.
