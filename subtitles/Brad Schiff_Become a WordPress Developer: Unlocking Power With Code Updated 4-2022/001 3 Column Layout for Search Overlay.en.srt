1
00:00:01,410 --> 00:00:02,370
Hello, everyone.

2
00:00:02,820 --> 00:00:11,100
In this lesson, we're going to update our front end overlay JavaScript to use our new custom API URL

3
00:00:11,100 --> 00:00:12,070
that we've been building.

4
00:00:12,600 --> 00:00:18,660
So let's jump right into the action and in our text editor within our theme folder, let's look inside

5
00:00:18,660 --> 00:00:26,460
our Jass or JavaScript folder and then inside our modules folder, let's hop into our search JS file.

6
00:00:27,420 --> 00:00:32,310
And if we scroll down to our method that is named Get Results, we see that.

7
00:00:32,310 --> 00:00:39,180
Here's the code we wrote when we were using the built in WordPress API URLs and because the default

8
00:00:39,180 --> 00:00:42,990
API URLs only work with one post type at a time.

9
00:00:43,200 --> 00:00:49,650
Back when we wrote this code, we had to make two separate JSON requests, write one for posts and one

10
00:00:49,650 --> 00:00:53,920
for pages, and then we manually smooshed together the results.

11
00:00:54,390 --> 00:00:56,370
Well, a lot has changed since then.

12
00:00:56,580 --> 00:01:03,570
We've now created our own custom API URL that returns data for all six post types.

13
00:01:03,990 --> 00:01:07,390
So that means we really don't need this old setup any longer.

14
00:01:07,740 --> 00:01:13,080
However, I don't want to just outright delete this code immediately right now because there's still

15
00:01:13,080 --> 00:01:17,960
little bits and pieces from it that we can copy and paste to save additional typing.

16
00:01:18,300 --> 00:01:21,270
So here's what I'm going to do right above this line.

17
00:01:21,270 --> 00:01:27,930
So right at the beginning of our results method, I'm going to add a comment and I'm just going to say

18
00:01:28,560 --> 00:01:31,950
delete this code a bit later on.

19
00:01:32,400 --> 00:01:36,870
OK, so by the end of this lesson, we can go ahead and delete all of this old code.

20
00:01:37,200 --> 00:01:39,360
But for now, we can leave it here for reference.

21
00:01:39,360 --> 00:01:46,170
And now right above this, let's just write it the new way that uses our new custom, Aperol.

22
00:01:46,710 --> 00:01:53,100
So we no longer need to worry about the synchronous versus asynchronous topic because we no longer need

23
00:01:53,100 --> 00:01:55,980
to make multiple JSON requests.

24
00:01:56,160 --> 00:02:01,350
So up on our new line of code, we no longer need to use the when then combo.

25
00:02:01,620 --> 00:02:04,400
Instead of that, we can simply just make one request.

26
00:02:04,410 --> 00:02:10,620
So let's say dollar sign to use J query and then let's use the JSON method.

27
00:02:11,340 --> 00:02:12,750
It takes two arguments.

28
00:02:12,750 --> 00:02:18,210
The first is the Eurail that you want to send a request to, let's just say X as a placeholder.

29
00:02:18,540 --> 00:02:24,030
And the second argument is a function that you want to run once the server or you URL response.

30
00:02:24,420 --> 00:02:27,120
So let's just apply an anonymous function here.

31
00:02:27,810 --> 00:02:33,060
And whatever JSON data this you URL responds with will be passed into this function.

32
00:02:33,450 --> 00:02:38,580
So within these parentheses, we want to be sure to include a parameter that can receive the incoming

33
00:02:38,580 --> 00:02:39,000
data.

34
00:02:39,270 --> 00:02:42,000
So you could call it data or response.

35
00:02:42,000 --> 00:02:45,750
You can make up whatever parameter name you want just to make sense.

36
00:02:45,750 --> 00:02:47,790
I'm going to call it results.

37
00:02:48,510 --> 00:02:51,570
OK, now we can use that within the body of this function.

38
00:02:51,930 --> 00:02:57,060
Before we move on, though, I do want to be sure to use an S6 Arrow function.

39
00:02:57,360 --> 00:03:02,330
So that way the value of this keyword will not be modified within this function.

40
00:03:02,550 --> 00:03:09,240
So remember to use an S six arrow function, you can just get rid of the word function, keep your parentheses

41
00:03:09,240 --> 00:03:15,060
in your parameter, and then right after it you include equal sign greater than OK.

42
00:03:15,060 --> 00:03:18,210
Now within the function, what do we actually want to do?

43
00:03:18,540 --> 00:03:26,220
We want to modify the HTML of our search overlays results div so we know that we've got a property that

44
00:03:26,220 --> 00:03:35,070
we can access by saying this dot results div and right after this we can just target its HTML and remember

45
00:03:35,070 --> 00:03:42,120
that instead of supplying a simple string of text, if we use back text instead of single quotes, then

46
00:03:42,120 --> 00:03:48,480
we can create a template literal, which means we are free to dropdown to multiple lines just like we

47
00:03:48,480 --> 00:03:52,620
would in normal HTML in this time around.

48
00:03:52,830 --> 00:03:59,190
I don't want to begin just by outputting a heading level to instead I want to create a three column

49
00:03:59,190 --> 00:03:59,910
layout.

50
00:04:00,300 --> 00:04:02,640
So let's do this within our template, literal.

51
00:04:03,000 --> 00:04:12,030
Let's create an overall div and let's give this a class of Roe, OK, and then within this div let's

52
00:04:12,030 --> 00:04:20,650
create three children div where each one is a column so we can say div and let's give this inner div

53
00:04:20,650 --> 00:04:28,680
a class of one third to represent a column that takes up one third of the available width and then you

54
00:04:28,680 --> 00:04:33,660
can just copy and paste that so that you've got three of them within our first column.

55
00:04:33,660 --> 00:04:41,010
Let's drop down within the opening and closing days and within that div let's add a heading level two

56
00:04:41,520 --> 00:04:44,310
that reads general information.

57
00:04:45,480 --> 00:04:45,870
All right.

58
00:04:45,870 --> 00:04:52,440
And then in our second column, let's drop dropdown and let's add heading level two that reads programs.

59
00:04:54,030 --> 00:04:58,110
And then right below that, we can have another heading level two that reads Prof's.

60
00:04:59,070 --> 00:05:00,840
In just a moment, we can output the.

61
00:05:00,900 --> 00:05:07,380
The actual list of results, so the resulting programs can go right underneath this headline and the

62
00:05:07,380 --> 00:05:10,380
resulting professors can go right underneath this one, OK?

63
00:05:10,440 --> 00:05:16,770
And then finally in our third column, let's drop down in between the opening and closing div tags and

64
00:05:16,770 --> 00:05:20,430
let's output a heading level to four campuses.

65
00:05:21,870 --> 00:05:25,710
And then below that, we can have another heading that reads events.

66
00:05:27,660 --> 00:05:33,090
Now, in terms of success and styling, I want to make sure that these headlines use the appropriate

67
00:05:33,090 --> 00:05:34,650
font size and color.

68
00:05:35,200 --> 00:05:40,770
So if we scroll down just a bit within our old code, we can see that we were giving this heading level

69
00:05:40,770 --> 00:05:44,480
to a class of search overlay section title.

70
00:05:44,790 --> 00:05:49,230
So in order to save a bit of typing, why don't we just copy and paste this class name?

71
00:05:49,650 --> 00:05:52,460
Copy that and then back up in our new code.

72
00:05:52,800 --> 00:05:57,000
I'm just going to paste that in is the class for all of our heading level twos.

73
00:05:57,390 --> 00:06:03,540
So on this first general information, one class equals and then paste it in and you could actually

74
00:06:03,540 --> 00:06:07,310
just copy and paste the entire class attribute equals that.

75
00:06:08,160 --> 00:06:11,400
Copy that and then you can just paste it in for all of the others.

76
00:06:14,150 --> 00:06:19,910
All right, and before we save this and test it out in the browser, let's first not forget about our

77
00:06:19,910 --> 00:06:25,100
X placeholder that needs to be a Eurail, right, that we want to send a request to.

78
00:06:25,400 --> 00:06:31,250
So to avoid a ton of typing, if we scroll down to our old code here, we are using the jasen method

79
00:06:31,250 --> 00:06:34,100
so we can just copy and paste this first argument.

80
00:06:34,520 --> 00:06:36,830
So it begins with university data.

81
00:06:37,130 --> 00:06:42,620
And if you scroll to the right, we want to select all the way up until Vall and then the closing set

82
00:06:42,620 --> 00:06:43,700
of parentheses.

83
00:06:44,070 --> 00:06:47,000
So let's copy that and then back up in our new code.

84
00:06:47,000 --> 00:06:50,630
We can paste it in to get rid of this placeholder X here.

85
00:06:52,930 --> 00:07:00,760
And now, before we save this, we do need to modify the namespace and the Routt, so WP, JSON is still

86
00:07:00,760 --> 00:07:08,200
correct, but then instead of WP V2, we want to use our namespace, so let's delete that.

87
00:07:08,440 --> 00:07:13,360
And instead, ours is University Igwe one.

88
00:07:13,760 --> 00:07:22,000
OK, and then finally for the root instead of posts, we created a root named search and then the Eurail

89
00:07:22,000 --> 00:07:25,450
parameter that we used is term instead of search.

90
00:07:27,790 --> 00:07:32,580
OK, and then we're just setting that to equal whatever the user has typed in, all right.

91
00:07:32,590 --> 00:07:38,380
And now we are actually just one step away from being able to delete our old code.

92
00:07:38,770 --> 00:07:44,920
So how about we do this within our new code in the first column, right underneath this heading level

93
00:07:44,920 --> 00:07:51,520
to let's output a little bit of code that loops through the general information results, which are

94
00:07:51,520 --> 00:07:54,200
any resulting blog posts or pages.

95
00:07:54,610 --> 00:07:56,790
Now, we've already written the code that does that.

96
00:07:56,800 --> 00:08:03,730
So if we just scroll down to our old code and we see that here is our old heading level two and right

97
00:08:03,730 --> 00:08:08,020
below it are the lines that will generate HTML for each result.

98
00:08:08,350 --> 00:08:15,310
So why don't we just copy and paste these three lines of code into our clipboard and then back up in

99
00:08:15,310 --> 00:08:19,560
our new code in our first column right underneath the H2.

100
00:08:19,570 --> 00:08:20,920
Let's just paste that in.

101
00:08:21,700 --> 00:08:29,620
And now instead of checking to see if an array named combined results exists or I should say has a length

102
00:08:29,620 --> 00:08:36,040
that is larger than zero, instead of checking for this, let's delete combined results and instead

103
00:08:36,040 --> 00:08:37,630
look for results.

104
00:08:38,080 --> 00:08:40,690
Dot general info.

105
00:08:41,290 --> 00:08:44,890
If you're wondering how I came up with this name, let me refresh your memory.

106
00:08:45,310 --> 00:08:49,510
So it results is the name of the parameter that our function is using.

107
00:08:49,900 --> 00:08:54,790
It contains all of the JSON that the server or Eurail is going to send back.

108
00:08:55,240 --> 00:08:59,890
And then I'm looking inside results for an array named General Info.

109
00:09:00,310 --> 00:09:03,380
And this is just a name that I made up in our previous lesson.

110
00:09:03,730 --> 00:09:11,440
So, for example, within our theme folders I n c folder, if you jump in to search Routt HP, remember,

111
00:09:11,440 --> 00:09:18,160
we created an array named Results and within it we have our sub arrays and the array that's going to

112
00:09:18,160 --> 00:09:22,450
contain blog posts and pages is named general info.

113
00:09:22,750 --> 00:09:24,530
So that's what I'm looking for here.

114
00:09:25,360 --> 00:09:27,600
Let's do the same thing on this next line of code.

115
00:09:27,880 --> 00:09:34,900
So instead of combined results, we're looking for results, dot, general info and the same thing on

116
00:09:34,900 --> 00:09:35,500
this line.

117
00:09:36,280 --> 00:09:38,670
Results, dot general info.

118
00:09:39,250 --> 00:09:39,620
Cool.

119
00:09:39,790 --> 00:09:43,240
Now at this point we can go ahead and delete our old code.

120
00:09:43,390 --> 00:09:45,390
We no longer need it as a reference.

121
00:09:45,730 --> 00:09:48,100
So if I scroll down, here's that comment.

122
00:09:48,610 --> 00:09:54,040
Delete this code a bit later on and I'm just going to select from the beginning of that all the way

123
00:09:54,040 --> 00:10:01,150
down until this closing curly bracket parentheses and semicolon that comes right after this line where

124
00:10:01,150 --> 00:10:03,160
we're outputting our error message.

125
00:10:04,030 --> 00:10:05,980
So with this selected, let's delete that.

126
00:10:08,290 --> 00:10:11,890
And at this point, let's save this and test it out in the browser.

127
00:10:12,700 --> 00:10:18,040
You'll want to be sure that in your command line you either run golpe scripts for a one time compile

128
00:10:18,340 --> 00:10:24,160
or run golpe watch, which will automatically trigger any time you save a change to this file.

129
00:10:24,360 --> 00:10:30,670
OK, so over on the front end, if I open the overlay and search for Buyology, woops, we actually

130
00:10:30,670 --> 00:10:32,200
see undefined here.

131
00:10:32,500 --> 00:10:39,160
And that's just because in our code for that link text, we are currently looking for a sub property

132
00:10:39,160 --> 00:10:42,970
named Rendered that belongs to a property named title.

133
00:10:43,630 --> 00:10:48,850
Now this is the structure that a default rest API Eurail uses.

134
00:10:49,090 --> 00:10:56,110
But if we check out Postman on our custom URL, you'll remember that our title simply lives in a property

135
00:10:56,110 --> 00:10:57,010
named title.

136
00:10:57,220 --> 00:11:00,340
It isn't nested in a sub property named rendered.

137
00:11:00,610 --> 00:11:05,410
So back in our code, let's just delete this dot rendered.

138
00:11:05,980 --> 00:11:13,000
And while we're at it, let's also address the link, the RF value, because a default rest API URL

139
00:11:13,240 --> 00:11:15,340
uses a property named Lync.

140
00:11:15,610 --> 00:11:21,670
But in our custom URL and JSON, we made up a custom property named Permalink.

141
00:11:22,030 --> 00:11:25,910
So in our code, let's change this from link to permalink.

142
00:11:26,560 --> 00:11:28,260
OK, let's go ahead and save that.

143
00:11:28,570 --> 00:11:33,610
And then back in the browser, if I search for Buyology again, cool.

144
00:11:33,610 --> 00:11:34,630
There's biologies.

145
00:11:34,630 --> 00:11:38,680
Cool and the link successfully takes me to that blog post.

146
00:11:39,010 --> 00:11:45,870
However, you might remember that we wanted blog posts to say the title by and then the author name.

147
00:11:46,180 --> 00:11:51,970
Now the reason we are no longer seeing this is because in our code we are checking to see if the current

148
00:11:51,970 --> 00:11:56,260
result has a property named type and if it equals post.

149
00:11:56,680 --> 00:11:59,690
And only then do we want to output by the author name.

150
00:11:59,890 --> 00:12:05,620
However, if we look at the custom JSON that our new Eurail is outputting, we don't have a property

151
00:12:05,620 --> 00:12:06,730
named post type.

152
00:12:06,940 --> 00:12:09,370
We only have title and permalink.

153
00:12:09,610 --> 00:12:15,610
So right now why don't we go ahead and adjust the JSON that our custom URL outputs?

154
00:12:15,880 --> 00:12:18,520
Let's add a property here named post type.

155
00:12:19,450 --> 00:12:26,790
So to do that, back in our text editor within our agency folder, let's jump into search route BHP.

156
00:12:27,560 --> 00:12:34,460
And if you scroll down a bit down to where we begin our while loop within this first if block, we are

157
00:12:34,460 --> 00:12:42,110
saying if the current result is a blog post or page, then do this, generate a new array that gets

158
00:12:42,110 --> 00:12:44,240
pushed on to the end of this array.

159
00:12:44,750 --> 00:12:48,740
So within this associative array that we're building, let's just include another property.

160
00:12:48,920 --> 00:12:54,740
So right after this permalink line, let's say comma, and then we could make up whatever property name

161
00:12:54,740 --> 00:12:55,340
we want.

162
00:12:55,880 --> 00:13:02,300
Why don't we call it post type and let's set that to equal get post type.

163
00:13:02,900 --> 00:13:07,700
OK, now if I save that and refresh postman cool.

164
00:13:07,700 --> 00:13:14,550
Now we can see that any results that live inside the general info array will contain a post type property.

165
00:13:15,080 --> 00:13:20,600
So now back in our JavaScript, this code that checks for a property named type, let's just change

166
00:13:20,600 --> 00:13:27,020
that to look for a property named post type or whatever name you just made up in the file.

167
00:13:27,260 --> 00:13:32,000
Now, if this is the case and if it's a blog post, then we're going to want to output the author's

168
00:13:32,000 --> 00:13:32,360
name.

169
00:13:32,720 --> 00:13:34,880
And obviously we just looked at our JSON.

170
00:13:34,880 --> 00:13:37,520
It does not include a property named author name.

171
00:13:37,790 --> 00:13:39,780
So let's just add one really quick.

172
00:13:40,310 --> 00:13:46,970
So back in our search route, right after this post type property that we just added, let's say comma,

173
00:13:47,990 --> 00:13:56,060
and let's create a property named author name and let's set it to equal get the author.

174
00:13:56,490 --> 00:14:01,160
And then if we save that and refresh postman perfect.

175
00:14:01,160 --> 00:14:03,090
We've got a new property author name.

176
00:14:03,620 --> 00:14:09,410
So now back in our front end JavaScript, this will successfully find the data that it's looking for.

177
00:14:09,800 --> 00:14:11,500
So let's go ahead and save this.

178
00:14:12,260 --> 00:14:14,690
And then on the front end, let's test it out again.

179
00:14:15,740 --> 00:14:18,560
Perfect Biology's Cool by Brad.

180
00:14:19,070 --> 00:14:23,540
And now we can just start working on outputting the results for these different headlines with these

181
00:14:23,540 --> 00:14:27,830
different content types for programs and campuses.

182
00:14:28,010 --> 00:14:32,390
Those can use the generic text styling like posts and pages.

183
00:14:32,720 --> 00:14:38,870
But for professors, I want to show a little photograph of the professor and then I want to overlay

184
00:14:38,870 --> 00:14:42,590
their name on top of that image and for events.

185
00:14:42,590 --> 00:14:48,320
I want to use the same styling that we see on the homepage, right with the circle, with the date,

186
00:14:48,560 --> 00:14:54,470
and then a brief description to the side of that so we can work on that custom formatting for professors

187
00:14:54,470 --> 00:14:56,270
and events in the next lesson.

188
00:14:56,480 --> 00:15:02,380
But while we are still in this lesson, let's go ahead and set up the results for programs and campuses.

189
00:15:02,750 --> 00:15:09,440
So back in our code, in our front end JavaScript, before we output the results for programs, why

190
00:15:09,440 --> 00:15:16,910
don't we actually scroll down to the bottom of this template, literal HTML and right after this line

191
00:15:16,910 --> 00:15:20,150
where the template literal closes right after that.

192
00:15:20,150 --> 00:15:25,270
Let's not forget to say this dot is Spiner visible.

193
00:15:25,580 --> 00:15:26,810
Instead, it defaults.

194
00:15:27,380 --> 00:15:32,600
So that way if someone wants to perform another search, as soon as they start typing, they will see

195
00:15:32,600 --> 00:15:33,740
the Spiner icon.

196
00:15:34,040 --> 00:15:35,960
OK, now back to the task at hand.

197
00:15:36,230 --> 00:15:43,010
Let's output any results that are of the programs post type so there's no need to reinvent the wheel.

198
00:15:43,430 --> 00:15:46,550
We can just reuse this template literal loop code.

199
00:15:46,670 --> 00:15:52,910
So I'm just going to copy these three lines of code and then write underneath the programs, heading

200
00:15:52,910 --> 00:15:54,230
little to pasted in.

201
00:15:54,620 --> 00:16:00,920
Only this time, instead of looking within results for a sub array named General Info, I'm going to

202
00:16:00,920 --> 00:16:08,320
look for an array named programs and be sure to do the same thing on this line and this third line.

203
00:16:09,590 --> 00:16:15,710
Also, this time around, when it comes to programs, we do not want the text that says by the author

204
00:16:15,710 --> 00:16:16,150
name.

205
00:16:16,550 --> 00:16:23,330
So right after the title and write after the closing tag, I'm just going to delete this ternary operator

206
00:16:23,510 --> 00:16:27,140
that checks for the post type and then tries to output the author name.

207
00:16:29,650 --> 00:16:36,160
Now, if I go ahead and save this and then back on the front end, if I search for biology again, we

208
00:16:36,160 --> 00:16:37,410
should see a program.

209
00:16:37,540 --> 00:16:38,990
Yep, there it is.

210
00:16:39,220 --> 00:16:41,530
Now, let's do the same thing for campuses.

211
00:16:42,070 --> 00:16:48,480
So back in our front end JavaScript, let me just copy these three lines again, OK?

212
00:16:48,520 --> 00:16:52,930
And then right underneath the heading level to four campuses, we can just paste that in.

213
00:16:53,380 --> 00:16:56,440
Let's be sure to update which Southbury we are looking within.

214
00:16:56,450 --> 00:17:02,260
So instead of programs, campuses do the same thing for these two references as well.

215
00:17:03,850 --> 00:17:04,840
Give that to save.

216
00:17:05,200 --> 00:17:10,270
And now if I search for one of the campus names that I know I have, which is downtown West.

217
00:17:10,660 --> 00:17:11,740
Cool, there we have it.

218
00:17:11,980 --> 00:17:17,380
Now, before we bring this lesson to a close, let's not forget about the little message we see if nothing

219
00:17:17,380 --> 00:17:19,050
matches for that post type.

220
00:17:19,240 --> 00:17:24,250
So this message makes sense under general information, but under programs, we forgot to update the

221
00:17:24,250 --> 00:17:24,880
message.

222
00:17:25,150 --> 00:17:28,180
So it still says no general info matches that search.

223
00:17:28,600 --> 00:17:34,300
So back in our text editor underneath the program section, if we scroll to the right here, we see

224
00:17:34,300 --> 00:17:36,330
no general info matches that search.

225
00:17:36,340 --> 00:17:39,220
Let's change this instead of general info.

226
00:17:39,220 --> 00:17:44,050
Let's say no programs match that search.

227
00:17:44,350 --> 00:17:51,550
And then even after that sentence, we could say view all programs and then make that a link to the

228
00:17:51,550 --> 00:17:59,920
programs page so we could wrap this text in an HTML, a tag, and then give the opening tag an attribute

229
00:17:59,920 --> 00:18:03,370
attribute and set it to slash programs.

230
00:18:03,640 --> 00:18:05,350
And that would work in most cases.

231
00:18:05,350 --> 00:18:10,270
But again, not all WordPress installs are located at the root of a domain.

232
00:18:10,420 --> 00:18:15,640
So to make this flexible, what we can do is instead of outputting a quote here, see how this begins

233
00:18:15,640 --> 00:18:21,100
with single quotes, let's change that to a back tick so we can create a template literal.

234
00:18:21,520 --> 00:18:27,530
So at the very end of this line, let's also change this single quote into a back to just a single back

235
00:18:27,530 --> 00:18:27,910
take.

236
00:18:28,330 --> 00:18:34,630
And now right before the slash programs, right before the slash, let's open up a JavaScript expression.

237
00:18:34,960 --> 00:18:41,620
And within the curly brackets, let's say university data dot route, you are RL.

238
00:18:42,190 --> 00:18:48,130
So if I save that and then search for the downtown west campus again, perfect.

239
00:18:48,460 --> 00:18:52,960
No programs match that search and then a link to view all programs.

240
00:18:53,300 --> 00:18:55,660
Now let's do the same thing for campuses.

241
00:18:55,900 --> 00:18:59,470
If there are no campus results, we want a custom message.

242
00:18:59,650 --> 00:19:05,650
So back in our code, I'm just going to copy and paste this, a tag that we just set up to avoid a lot

243
00:19:05,650 --> 00:19:06,640
of extra typing.

244
00:19:06,970 --> 00:19:12,190
So copy that and then if we scroll down to the campus area.

245
00:19:14,810 --> 00:19:23,000
Let's just update this, so instead of general info, let's say no campuses match that search and then

246
00:19:23,000 --> 00:19:28,580
before I paste in my clipboard here, that contains a template literal, I'm going to update these single

247
00:19:28,580 --> 00:19:30,270
quotes to back ticks.

248
00:19:32,120 --> 00:19:38,840
OK, then right here I can paste in my clipboard and change the end of the euro from programs to campuses

249
00:19:39,410 --> 00:19:41,870
and save you all campuses.

250
00:19:42,470 --> 00:19:43,730
Give that a save.

251
00:19:43,730 --> 00:19:47,660
And now if I search for Buyology, perfect.

252
00:19:47,750 --> 00:19:52,640
No campus match that search with a convenient link to view all campuses.

253
00:19:52,940 --> 00:19:54,920
That's going to bring this lesson to a close.

254
00:19:55,100 --> 00:19:58,340
Let's keep things rolling and I will see you in the next one.
