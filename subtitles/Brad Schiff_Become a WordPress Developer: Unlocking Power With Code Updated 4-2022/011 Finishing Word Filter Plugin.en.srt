1
00:00:02,210 --> 00:00:03,150
Hello, everyone.

2
00:00:03,470 --> 00:00:08,060
In this lesson, we're going to finish this second plug in that we've been working on.

3
00:00:08,510 --> 00:00:09,980
Let's jump into the action.

4
00:00:09,990 --> 00:00:15,400
So at this point, we are successfully saving the user's preference into the database.

5
00:00:15,800 --> 00:00:22,910
So now it's just a matter of writing the actual code that uses that comma separated list of words to

6
00:00:22,910 --> 00:00:24,900
actually start filtering the content.

7
00:00:25,280 --> 00:00:30,410
Now, before we start writing the IP to make that happen, why don't we make sure that we're actually

8
00:00:30,410 --> 00:00:35,690
looking for words that exist in our blog post so we can see if our code is working or not.

9
00:00:36,170 --> 00:00:40,820
So, for example, let me enter a couple of words that are actually in this lorem ipsum placeholders,

10
00:00:40,970 --> 00:00:46,200
lorem comma, SSD, comma Tempur.

11
00:00:46,490 --> 00:00:48,070
OK, let me save that value.

12
00:00:48,560 --> 00:00:48,970
Cool.

13
00:00:49,010 --> 00:00:52,240
Now let's write the P to actually filter our content.

14
00:00:52,760 --> 00:00:58,670
So in our code up in our construct function, let's add a filter for our content.

15
00:00:58,670 --> 00:01:03,440
So just newline add filter semicolon.

16
00:01:03,620 --> 00:01:06,380
The filter name is the content.

17
00:01:06,920 --> 00:01:08,630
Let's use the callable syntax.

18
00:01:08,630 --> 00:01:10,880
So an array with a dollar sign.

19
00:01:10,880 --> 00:01:15,290
This lets make up a name, let's call it filter logic.

20
00:01:15,860 --> 00:01:21,890
OK, and actually we would only need to apply this filter if the user has entered something into this

21
00:01:21,890 --> 00:01:22,390
field.

22
00:01:22,670 --> 00:01:26,980
If this field is completely blank, we don't need to run the filter at all.

23
00:01:27,410 --> 00:01:28,250
So it's up to you.

24
00:01:28,250 --> 00:01:35,050
You can include the F check inside your method or you could just wrap this line of code in an IF statement.

25
00:01:35,420 --> 00:01:40,880
So, for example, you can just cut this line temporarily, say if parentheses curly brackets.

26
00:01:41,300 --> 00:01:45,080
Actually, if you just have one single statement, you don't even need the curly brackets.

27
00:01:45,080 --> 00:01:53,640
So just if parentheses for the condition would just be if get option call that we named that option

28
00:01:53,660 --> 00:01:58,430
the database, plug in words to filter.

29
00:01:59,330 --> 00:02:02,490
So only if that exists then just paste in that code again.

30
00:02:03,680 --> 00:02:04,070
Cool.

31
00:02:04,310 --> 00:02:06,710
Let's go create our method with this name.

32
00:02:06,710 --> 00:02:13,220
So filter logic function filter logic.

33
00:02:14,600 --> 00:02:19,150
Let's be sure to include a parameter to receive the incoming starter contents.

34
00:02:19,170 --> 00:02:22,490
You could call it whatever you want, but how about dollar sign content.

35
00:02:23,060 --> 00:02:28,550
OK, in the first thing I want to do is convert that string of comma separated text.

36
00:02:28,790 --> 00:02:30,830
I want to convert it into an array.

37
00:02:31,310 --> 00:02:39,140
So why don't we make up a variable name, I'll call it bad words and set it to equal and then there's

38
00:02:39,140 --> 00:02:40,910
a function named explode.

39
00:02:41,360 --> 00:02:43,040
So we give it to arguments.

40
00:02:43,490 --> 00:02:45,530
Let's actually start with the second argument.

41
00:02:45,770 --> 00:02:48,500
So it's the string of text that you want to work with.

42
00:02:49,040 --> 00:02:51,080
So we would just say get option.

43
00:02:51,230 --> 00:02:54,950
Remember, the name is plug in words to filter.

44
00:02:55,550 --> 00:02:58,880
The first argument is the separator.

45
00:02:59,240 --> 00:03:04,520
So what in the string of text do you want to be the divider of where it should be split into different

46
00:03:04,520 --> 00:03:05,750
pieces in an array?

47
00:03:06,200 --> 00:03:10,280
So for us that would just be a comma, right?

48
00:03:10,280 --> 00:03:12,170
We're working with a comma separated list.

49
00:03:12,710 --> 00:03:18,950
OK, so now we have this array of the words that we want to filter out or replace.

50
00:03:19,340 --> 00:03:25,130
However, they might have all sorts of space around them because remember, someone might add a comma

51
00:03:25,130 --> 00:03:33,170
and then add three or four spaces and then a new word and then they might have a space on accident before

52
00:03:33,170 --> 00:03:34,100
they have a comma.

53
00:03:34,760 --> 00:03:39,950
So we just want consistency in terms of the empty space before and after each word.

54
00:03:40,670 --> 00:03:42,590
So we want to trim the white space.

55
00:03:43,010 --> 00:03:45,050
So let's create a new variable.

56
00:03:45,050 --> 00:03:48,230
I'll call it bad words trimmed.

57
00:03:48,350 --> 00:03:51,830
You could make up any name and let's set it to equal.

58
00:03:52,160 --> 00:03:55,880
And then we're going to use a function called Array Map.

59
00:03:56,600 --> 00:03:57,800
Let's give it to arguments.

60
00:03:57,800 --> 00:03:59,810
The first argument will just be Trem.

61
00:03:59,810 --> 00:04:04,310
We're telling it what to do to each item in the array and then it's going to return a new array.

62
00:04:04,700 --> 00:04:08,630
And then the second argument is just the original array that you want to work with.

63
00:04:08,630 --> 00:04:10,280
So bad words.

64
00:04:10,520 --> 00:04:17,630
OK, now we simply want to look through our content and replace any instance of a word that exists in

65
00:04:17,630 --> 00:04:18,250
this array.

66
00:04:18,860 --> 00:04:22,790
So in B, there's a function called estar underscore.

67
00:04:23,330 --> 00:04:29,360
I replace semicolon and we're going to give this three arguments.

68
00:04:29,960 --> 00:04:33,620
The first argument is an array of words that you want to replace.

69
00:04:33,620 --> 00:04:36,800
So that's just bad words trimmed.

70
00:04:37,400 --> 00:04:40,820
The second argument is what you want to replace them with.

71
00:04:41,240 --> 00:04:46,190
So for now, just as a quick test, let's replace them with maybe three or four asterisks.

72
00:04:47,300 --> 00:04:53,180
OK, and then the final argument is the text that you're performing this replacement operation on.

73
00:04:53,960 --> 00:04:57,080
So that would just be dollar sign content, right?

74
00:04:57,080 --> 00:04:59,750
The WordPress blog post or page content.

75
00:05:00,200 --> 00:05:01,700
Let's go ahead and save this.

76
00:05:01,820 --> 00:05:08,280
And test it out, so if I refresh my front end blog, woops, you can see the content totally went away.

77
00:05:08,660 --> 00:05:10,800
This is because I forgot to return anything.

78
00:05:11,180 --> 00:05:14,860
So right now, this line is just sort of floating in outer space.

79
00:05:15,110 --> 00:05:16,670
We didn't save it to a variable.

80
00:05:16,670 --> 00:05:17,570
We didn't return it.

81
00:05:17,930 --> 00:05:23,510
But really the ultimate job of a filter function, we just want to return the new content.

82
00:05:23,520 --> 00:05:28,190
So the start of this line, we just want to be sure to return this value that we worked on.

83
00:05:28,670 --> 00:05:30,910
Let's give that save reload.

84
00:05:31,400 --> 00:05:31,820
Cool.

85
00:05:32,060 --> 00:05:34,310
You can see Lorem is being filtered out.

86
00:05:34,610 --> 00:05:36,940
Tempur said perfect.

87
00:05:37,370 --> 00:05:44,450
Now we temporarily set the replacement text to just four asterisks, but ultimately we want to give

88
00:05:44,450 --> 00:05:49,620
the site owner control so that they can type in whatever they want the replacement to be.

89
00:05:50,150 --> 00:05:55,070
Now, we absolutely could just add a second TextField to this page.

90
00:05:55,280 --> 00:06:01,550
However, remember, we already set up a sub page in our menu called Options.

91
00:06:01,880 --> 00:06:03,230
So let's visit options.

92
00:06:03,590 --> 00:06:10,040
And just to practice having multiple pages, why don't we have a form on this page with a field where

93
00:06:10,040 --> 00:06:12,250
they can type in the replacement text?

94
00:06:12,740 --> 00:06:18,260
Now, at this point in the course, you have learned two different ways of how to create an admin form

95
00:06:18,260 --> 00:06:18,770
page.

96
00:06:19,010 --> 00:06:21,260
So it's up to you which approach you want to use.

97
00:06:21,260 --> 00:06:24,840
But right now I want to show you that you can mix and match.

98
00:06:25,220 --> 00:06:28,520
So, yes, we created that first page, this page.

99
00:06:28,730 --> 00:06:35,660
We created this using our own custom PHP handling, but we don't have to use that same approach for

100
00:06:35,660 --> 00:06:37,280
the options sub page.

101
00:06:37,730 --> 00:06:44,120
So just for an example, I'm going to use the WordPress form builder for the options page.

102
00:06:44,690 --> 00:06:50,540
So to get started, let's go find the function that's outputting this hello world from the options page

103
00:06:50,540 --> 00:06:51,170
text.

104
00:06:52,010 --> 00:06:53,630
So down towards the bottom.

105
00:06:54,970 --> 00:07:02,190
Here we see options, sub page, let's get rid of this placeholder text and instead have a div with

106
00:07:02,200 --> 00:07:10,480
a class of wrap inside that, let's have a heading level, one that says word filter options.

107
00:07:11,170 --> 00:07:14,980
After that, let's have a form to just hit tab after form.

108
00:07:15,790 --> 00:07:21,220
Now, if I'm going to create a WordPress generated form where it sort of outputs the fields for me,

109
00:07:21,550 --> 00:07:25,630
we want to be sure that the action is pointing towards options.

110
00:07:25,630 --> 00:07:26,980
Dot BHP.

111
00:07:27,400 --> 00:07:32,330
Let's also go ahead and set the method to equal post inside the form.

112
00:07:33,130 --> 00:07:39,210
We just want to drop in to be Miklós out of it right here inside the P.

113
00:07:39,300 --> 00:07:45,310
This is where we would output our sections and our setting fields, but we haven't registered any of

114
00:07:45,340 --> 00:07:45,880
those yet.

115
00:07:45,880 --> 00:07:51,610
So for now, let's just output the submit button and then we can circle back to this area a little bit

116
00:07:51,610 --> 00:07:52,020
later.

117
00:07:52,030 --> 00:07:55,320
So submit button, that's a WordPress function.

118
00:07:55,600 --> 00:08:01,120
Let's go ahead and save this and see what it looks like perfect at this point.

119
00:08:01,330 --> 00:08:08,320
Let's just register a new setting that WordPress can save for us that will be responsible for letting

120
00:08:08,320 --> 00:08:14,190
the user type a replacement text, and then that's what we'll get stored in the database.

121
00:08:14,740 --> 00:08:22,390
So to set that up back up at the very top of our file, we want to add an action in our constructor

122
00:08:22,690 --> 00:08:26,460
that is added to the admin init action hook.

123
00:08:26,860 --> 00:08:29,260
So I'm just going to create a new line in the constructor.

124
00:08:29,260 --> 00:08:32,620
Let's say add action semicolon.

125
00:08:32,800 --> 00:08:37,420
The hook name is admin underscore init comma.

126
00:08:37,420 --> 00:08:38,290
Let's give it a method.

127
00:08:38,290 --> 00:08:41,530
So every dollar sign this lets make up a method name.

128
00:08:41,530 --> 00:08:42,640
You could call it anything.

129
00:08:42,880 --> 00:08:45,970
I'll call it our settings.

130
00:08:46,330 --> 00:08:49,270
Let's go create a method with this name of our settings.

131
00:08:50,470 --> 00:08:53,410
So function our settings.

132
00:08:54,070 --> 00:08:56,590
First, let's register a section.

133
00:08:56,950 --> 00:09:02,530
We only need one section on our page so we don't need multiple sections, but we do need one section

134
00:09:02,530 --> 00:09:04,420
that we can assign fields to.

135
00:09:04,960 --> 00:09:11,410
So inside our new function we'll just say add settings section.

136
00:09:12,130 --> 00:09:14,920
So my colon, we're going to give this for arguments.

137
00:09:15,730 --> 00:09:17,830
The first is the name of our section.

138
00:09:17,890 --> 00:09:26,170
We get to make up a name, let's call it replacement text section for the second and third arguments.

139
00:09:26,170 --> 00:09:30,850
I don't want any labeled text or description text for this section.

140
00:09:31,120 --> 00:09:35,080
I just want it to be blank other than the actual field that we're outputting.

141
00:09:35,410 --> 00:09:39,100
So for the second and third arguments, I'm just going to say null.

142
00:09:40,750 --> 00:09:47,650
OK, and then the fourth argument is the slug name of the admin page that you want to display this section

143
00:09:47,650 --> 00:09:50,860
on so you can just look in your Eurail address bar.

144
00:09:51,280 --> 00:09:55,900
You can see we chose word filter options, so I'll just copy that.

145
00:09:56,170 --> 00:09:58,750
And that will be the value for this fourth argument.

146
00:09:59,380 --> 00:09:59,800
Cool.

147
00:09:59,950 --> 00:10:05,260
Now that we have a section, we can actually register and add a setting in field.

148
00:10:05,710 --> 00:10:11,800
So let's register our setting first register setting call that we give it to arguments.

149
00:10:13,120 --> 00:10:15,820
The first argument is the option group.

150
00:10:15,820 --> 00:10:19,330
We only have one field here, but we just need to make up a name.

151
00:10:20,320 --> 00:10:22,780
How about replacement fields?

152
00:10:23,020 --> 00:10:28,270
And then the second argument is the option name for this specific option that we're creating.

153
00:10:28,720 --> 00:10:31,960
How about replacement text?

154
00:10:32,570 --> 00:10:37,420
OK, now that we've registered the setting, let's just add a field to our section.

155
00:10:37,930 --> 00:10:41,980
So we just use the ADD settings, field function.

156
00:10:42,640 --> 00:10:44,620
We give this five arguments.

157
00:10:45,880 --> 00:10:50,890
The first argument will be used as the IDE attribute for the actual element.

158
00:10:51,430 --> 00:10:54,970
So why don't we just say replacement dash text?

159
00:10:55,330 --> 00:11:01,900
The second argument is the text that the user will actually see on the form as the label for the field.

160
00:11:02,380 --> 00:11:05,950
So why don't we say filtered text?

161
00:11:06,820 --> 00:11:11,380
The third argument is a function that will output the HTML for our field.

162
00:11:11,380 --> 00:11:14,650
So array for argument is dollar.

163
00:11:14,650 --> 00:11:15,430
Sign this.

164
00:11:15,790 --> 00:11:17,320
Let's just make up a method name.

165
00:11:17,680 --> 00:11:22,330
How about replacement field HTML?

166
00:11:22,840 --> 00:11:24,610
We'll create that method in just a moment.

167
00:11:25,000 --> 00:11:29,800
The fourth argument is the slug of the page that you want to show this on.

168
00:11:29,800 --> 00:11:33,460
So again, that's word filter options.

169
00:11:33,910 --> 00:11:38,170
And then the fifth argument is the section that you want to output the field too.

170
00:11:38,470 --> 00:11:43,810
We only created the one section and we named it replacement text section.

171
00:11:43,810 --> 00:11:46,960
So we can use that as our fifth argument value.

172
00:11:48,890 --> 00:11:54,070
OK, now let's go create the method that we named replacement field HTML.

173
00:11:54,450 --> 00:12:01,180
I'll just say new function, replacement field HTML.

174
00:12:02,250 --> 00:12:09,120
Now I want to include HTML right here inside the body of the function, so let's exit here and then

175
00:12:09,120 --> 00:12:13,890
we can enter back into PHP here inside the function.

176
00:12:13,900 --> 00:12:16,480
Let's just type input and then hit tab.

177
00:12:17,010 --> 00:12:18,820
We do want it to be a type of text.

178
00:12:18,840 --> 00:12:25,290
Let's also give it an attribute of name and set that to the name that we chose for the actual option.

179
00:12:25,980 --> 00:12:28,800
So this is the option name that will get saved in the database.

180
00:12:29,010 --> 00:12:32,250
So we want that to match perfectly replacement text.

181
00:12:32,830 --> 00:12:37,350
And while we're here, let's go ahead and also give it a value attribute.

182
00:12:37,710 --> 00:12:41,070
And we would just want to load the existing value from the database.

183
00:12:41,220 --> 00:12:46,910
So that way, when you refresh this page, the field is already populated with your previous value.

184
00:12:47,490 --> 00:12:51,300
So inside these value quotes, we would just go into HTTP.

185
00:12:53,070 --> 00:12:54,890
We want to echo something.

186
00:12:55,110 --> 00:12:58,850
Let's begin by escaping an attribute, right?

187
00:12:58,920 --> 00:13:04,050
Any time a value is dynamically coming from the database, we want our front end to escape it.

188
00:13:04,870 --> 00:13:06,920
OK, and then what do we actually want to work with?

189
00:13:06,930 --> 00:13:15,150
We just want to get an option that has this name of replacement text so it quotes replacement text.

190
00:13:15,570 --> 00:13:20,190
If a value doesn't already exist in the database, we can provide a fallback options.

191
00:13:20,190 --> 00:13:24,180
We could say comma and then we could just give it maybe three asterisks.

192
00:13:24,750 --> 00:13:33,930
OK, right below this line, why don't we include a paragraph and say leave blank to simply remove the

193
00:13:33,930 --> 00:13:37,590
filtered words for a bit of WordPress styling.

194
00:13:37,590 --> 00:13:41,100
We can give that paragraph a class of description.

195
00:13:41,730 --> 00:13:48,510
OK, and at this point, before we save, be sure to go down to the very bottom and within the HTML

196
00:13:48,510 --> 00:13:52,020
for the new form we're building right above submit button.

197
00:13:52,200 --> 00:13:55,710
We just now want to output our section in our fields.

198
00:13:56,280 --> 00:13:57,630
Let's start with our fields.

199
00:13:57,630 --> 00:14:02,490
So we use a function called Settings, Fields, semicolon.

200
00:14:02,640 --> 00:14:04,470
We give it the group name.

201
00:14:04,980 --> 00:14:10,530
If you can't remember what you chose a little bit ago when we registered our setting, remember, the

202
00:14:10,530 --> 00:14:13,710
first argument was the group name that we chose.

203
00:14:13,710 --> 00:14:15,360
So replacement fields.

204
00:14:17,790 --> 00:14:23,580
OK, next, we also want to output our sections, we only have one section, what we call a function,

205
00:14:24,000 --> 00:14:32,400
do settings, sections, parentheses, semicolon, and this is the slug name for the page that we're

206
00:14:32,400 --> 00:14:32,730
on.

207
00:14:32,730 --> 00:14:36,340
So that's word filter options.

208
00:14:36,690 --> 00:14:39,260
Let's give this a save and test it out.

209
00:14:39,300 --> 00:14:44,700
So if we reload, cool, let's provide a custom value instead of the placeholder.

210
00:14:44,700 --> 00:14:50,370
Three asterisks, maybe hashtag hash tag to exclamations.

211
00:14:50,370 --> 00:14:52,500
Let's try to save that cool.

212
00:14:52,500 --> 00:14:56,370
You can see, even if we reload, that value is saved in the database.

213
00:14:56,760 --> 00:14:57,780
It's persisting.

214
00:14:58,260 --> 00:15:03,870
If you open up your ATM and go to the options table and click on to the final page, you should see

215
00:15:04,260 --> 00:15:07,860
replacement text with whatever value you just entered.

216
00:15:08,490 --> 00:15:14,490
So now that we're actually saving this in the database, we can just go adjust the function that actually

217
00:15:14,850 --> 00:15:20,430
performs the replacement's to use this instead of the four asterisks.

218
00:15:20,850 --> 00:15:21,840
Let me show you what I mean.

219
00:15:21,850 --> 00:15:23,340
So back on our blog, right.

220
00:15:23,340 --> 00:15:28,650
Instead of this default for asterisks, let's just go adjust that back in our code.

221
00:15:28,650 --> 00:15:30,060
We just want to find our function.

222
00:15:30,270 --> 00:15:32,490
We gave it a name of filter logic.

223
00:15:33,180 --> 00:15:37,480
Here it is now where we have the four asterisks.

224
00:15:37,860 --> 00:15:40,860
Well, let's just get rid of that instead.

225
00:15:41,040 --> 00:15:43,500
Let's use Escape HTML.

226
00:15:43,500 --> 00:15:43,740
Right.

227
00:15:43,740 --> 00:15:45,780
We're pulling something dynamic from the database.

228
00:15:45,780 --> 00:15:48,000
We want to escape it inside here.

229
00:15:48,000 --> 00:15:49,710
We would just want to say get option.

230
00:15:49,710 --> 00:15:49,920
Right.

231
00:15:49,920 --> 00:15:51,720
We want to load that from the database.

232
00:15:52,470 --> 00:16:01,140
It had a name of replacement text and then if you wanted to, you can use the four asterisks as a fallback

233
00:16:01,140 --> 00:16:03,480
if we can't find anything in the database.

234
00:16:03,480 --> 00:16:07,620
So you could say string and then four asterisks.

235
00:16:08,010 --> 00:16:10,060
Let's save this and give it a try.

236
00:16:10,170 --> 00:16:12,870
So if we refresh the front end, perfect.

237
00:16:12,870 --> 00:16:16,860
It's using the user's preference for the replacement.

238
00:16:17,550 --> 00:16:21,680
Before we bring this lesson to a close, there's one more detail I want to take care of.

239
00:16:22,050 --> 00:16:28,830
So back on this options page, I noticed that when you save a change to the form, we don't receive

240
00:16:28,830 --> 00:16:34,680
any sort of green success message right about here to make sure we have that in place.

241
00:16:34,680 --> 00:16:41,600
All you need to do back down towards the bottom in our options sub page function within this area.

242
00:16:41,790 --> 00:16:47,550
Let's just add a new line and say settings underscore errors.

243
00:16:47,760 --> 00:16:49,300
Call that semicolon.

244
00:16:49,620 --> 00:16:53,760
Now, back when we were creating our first plug in, we did not need this line.

245
00:16:54,000 --> 00:17:01,080
And that's because the WordPress Settings API will call this for you when you're on a settings page.

246
00:17:01,350 --> 00:17:08,160
And remember our first plug in, it was registered as a settings page under the WordPress settings menu,

247
00:17:08,820 --> 00:17:14,070
whereas this page that we're building right now, this is just a generic admin page.

248
00:17:14,370 --> 00:17:17,910
So it's not officially part of the Settings or Options API.

249
00:17:17,910 --> 00:17:25,350
So we do need to call this function if we save that reload now, if we make a change to this and save

250
00:17:25,350 --> 00:17:28,650
it, perfect settings saved.

251
00:17:29,070 --> 00:17:34,440
And that's going to bring not only this lesson, but also this chapter to a close.

252
00:17:34,890 --> 00:17:37,850
In our very next lesson, we're going to start a new chapter.

253
00:17:38,100 --> 00:17:45,870
It's still all about plugin development, but now the focus is going to be on JavaScript, in particular,

254
00:17:45,900 --> 00:17:50,310
how we can use JavaScript to work with the WordPress block editor.

255
00:17:50,700 --> 00:17:56,880
In my opinion, out of the three plugin development chapters, the JavaScript chapter should definitely

256
00:17:56,880 --> 00:17:58,140
be the most exciting.

257
00:17:58,470 --> 00:18:02,880
So let's keep our momentum rolling and I will see you in the next lesson.
