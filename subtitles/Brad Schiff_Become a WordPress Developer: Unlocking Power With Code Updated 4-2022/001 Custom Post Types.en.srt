1
00:00:01,700 --> 00:00:02,690
Hello, everyone.

2
00:00:03,080 --> 00:00:11,010
In this lesson, we will learn about one of the most powerful aspects of WordPress custom post types.

3
00:00:11,450 --> 00:00:18,020
Now, before we learn about custom post types, let's first answer the question, what is a post type?

4
00:00:18,230 --> 00:00:25,130
So I'm in the WordPress admin and I want to show you that by default, out of the box, WordPress websites

5
00:00:25,130 --> 00:00:30,470
only come with two post types, posts and pages.

6
00:00:30,860 --> 00:00:37,340
A page is actually just a post with a special post type of page to illustrate what I mean.

7
00:00:37,340 --> 00:00:43,160
If you click on pages in the sidebar, take a look at the address up in the euro bar.

8
00:00:43,320 --> 00:00:50,440
It ends with edit P and then the parameter is post type equals page.

9
00:00:50,930 --> 00:00:57,650
This means that all items or entries of content in WordPress are really just posts with different labels,

10
00:00:57,830 --> 00:00:59,430
different post type labels.

11
00:00:59,930 --> 00:01:01,610
Now, yes, out of the box.

12
00:01:01,610 --> 00:01:07,550
We are limited to just posts and pages, but since we are developers, we can write a little bit of

13
00:01:07,550 --> 00:01:12,510
code and we can create as many new custom post types as we want.

14
00:01:12,830 --> 00:01:18,530
So by the end of this course, instead of just having posts and pages, we will have other items here

15
00:01:18,530 --> 00:01:25,260
in our sidebar named events and programs and professors and campuses in this lesson.

16
00:01:25,280 --> 00:01:27,020
Let's begin with events.

17
00:01:27,320 --> 00:01:33,290
So let's give ourselves a goal on the homepage of our website we see and upcoming events area.

18
00:01:33,740 --> 00:01:39,200
And we want to create an item or an entry or I should say a post for each event.

19
00:01:39,470 --> 00:01:44,480
But we don't want to create a generic post because then that would show up in the blog feed.

20
00:01:44,870 --> 00:01:51,240
So what we're going to do is create a brand new custom post type named events, OK?

21
00:01:51,260 --> 00:01:56,850
And then it will show up in the admin sidebar and we can begin creating new event posts.

22
00:01:57,170 --> 00:02:03,410
So right now, let's jump into our text editors and write the code to make that happen within your theme

23
00:02:03,410 --> 00:02:09,700
folder that we've been working on throughout the course, I want you to jump in to the Functions PDF

24
00:02:09,920 --> 00:02:10,430
file.

25
00:02:10,970 --> 00:02:14,960
Our goal is to register or create a new post type.

26
00:02:15,170 --> 00:02:19,280
So maybe down at the very bottom of this file, let's write a bit of code.

27
00:02:19,640 --> 00:02:26,570
Let's begin with add action, because when you want to tell WordPress to create a new post type, we

28
00:02:26,570 --> 00:02:32,090
cannot use the event hook of after setup theme or WP on Q scripts.

29
00:02:32,480 --> 00:02:35,510
In this case, we need to tack on to a different event hook.

30
00:02:35,720 --> 00:02:40,640
So down here on this new line of code, we are interested in the hook named init.

31
00:02:41,090 --> 00:02:42,530
OK, so that's the first argument.

32
00:02:42,530 --> 00:02:47,720
And then the second argument is the name of a function that we will create in just a moment from now.

33
00:02:47,810 --> 00:02:52,220
So again, we get to make this function up so it could be pizza or unicorn.

34
00:02:52,380 --> 00:02:53,750
The name does not matter.

35
00:02:54,350 --> 00:03:02,900
But just to make a little bit of sense, why don't we call it university underscore post types and then

36
00:03:02,900 --> 00:03:05,310
let's add a semicolon at the end of that line.

37
00:03:06,110 --> 00:03:11,900
OK, so now WordPress will call a function with this name at precisely the right moment.

38
00:03:12,260 --> 00:03:15,590
So we better make sure that a function with this name exists.

39
00:03:15,920 --> 00:03:19,290
So maybe right above that line, let's go ahead and create it.

40
00:03:19,670 --> 00:03:25,460
So the word function and then the name of the function that we want to create, again, the name doesn't

41
00:03:25,460 --> 00:03:27,980
matter, but I feel like this name makes sense.

42
00:03:28,200 --> 00:03:36,740
So university post types, parentheses, curly brackets, OK, and now within the body of this function,

43
00:03:36,890 --> 00:03:39,020
we can get back to our actual goal.

44
00:03:39,230 --> 00:03:45,860
Remember that we wanted to create or register a new post type we can call a function that is aptly named

45
00:03:46,340 --> 00:03:49,510
register post type.

46
00:03:50,360 --> 00:03:54,290
This is a WordPress function that will take care of the heavy lifting for us.

47
00:03:54,710 --> 00:03:57,020
We just need to pass it to arguments.

48
00:03:57,410 --> 00:04:01,810
The first argument is the name of the custom post types that we want to create.

49
00:04:02,210 --> 00:04:04,490
So let's say event, right.

50
00:04:04,490 --> 00:04:06,220
You could make up any name you want.

51
00:04:06,650 --> 00:04:07,970
We're going with event.

52
00:04:08,450 --> 00:04:14,650
And then the second argument is an array of different options that describe your custom post type.

53
00:04:14,930 --> 00:04:20,360
So remember, to create an array, you just type out the word array and then give it its own set of

54
00:04:20,360 --> 00:04:21,290
parentheses.

55
00:04:21,500 --> 00:04:27,140
And then within those new parentheses, why don't we drop down to a new line just to stay organized?

56
00:04:27,260 --> 00:04:33,050
And now we just create an associative array that describes what kind of post type we want.

57
00:04:33,500 --> 00:04:42,290
Remember, an associative array was the example where we might say cat equals meow or dog equals bark.

58
00:04:42,860 --> 00:04:46,430
OK, in this case, let's just start with one simple parameter.

59
00:04:46,820 --> 00:04:50,300
Let's say that public equals true.

60
00:04:51,020 --> 00:04:55,100
This will make the Post type visible to editors and viewers of the website.

61
00:04:55,340 --> 00:05:01,010
OK, so with that line of code in place, if I save this file and jump back into the WordPress admin.

62
00:05:01,370 --> 00:05:08,180
And refresh the page, but you'll notice that we have a new item in the sidebar here now it says posts,

63
00:05:08,570 --> 00:05:10,960
even though we already have a posts up here.

64
00:05:11,210 --> 00:05:15,920
But if I go ahead and click on this newly created posts, that's closer to the bottom.

65
00:05:17,240 --> 00:05:23,120
If you look up in the address bar, you can see that it ends with post type equals event.

66
00:05:23,510 --> 00:05:23,930
Cool.

67
00:05:23,930 --> 00:05:30,760
So we've created a new post type, but obviously we don't want the sidebar label to still be posts.

68
00:05:31,040 --> 00:05:33,070
We want this to say events.

69
00:05:33,620 --> 00:05:40,100
So back in our code, within our associative array, we just need to give it a little bit more information

70
00:05:40,100 --> 00:05:41,410
about this post type.

71
00:05:41,780 --> 00:05:47,620
So at the end of this public equals true line, let's add a comma so then we can add another line.

72
00:05:47,960 --> 00:05:50,900
Let's target the parameter named labels.

73
00:05:51,710 --> 00:05:53,060
And what should it equal?

74
00:05:53,430 --> 00:05:56,750
Well, instead of just typing the word events here, we don't want to do that.

75
00:05:56,940 --> 00:06:03,140
Instead, what we want to do is give this labels, parameter an array of its own to type out the word

76
00:06:03,140 --> 00:06:06,320
array and then parentheses and then you know me.

77
00:06:06,350 --> 00:06:12,530
I like to drop down to a new line for each array so that each item in the array can be on its own line.

78
00:06:12,740 --> 00:06:19,790
OK, and the first sub parameter that belongs to the labels parameter is named name, and let's set

79
00:06:19,790 --> 00:06:21,860
that to equal events.

80
00:06:22,310 --> 00:06:28,880
Now there are tons of other label parameters aside from name and we will cover those later in the lesson.

81
00:06:28,880 --> 00:06:31,410
But for the time being, this is all we need.

82
00:06:31,700 --> 00:06:38,470
So if I save that cool now we can see in the sidebar that it's using a proper name of events.

83
00:06:39,050 --> 00:06:45,830
However, it's still using the same thumbtack icon that our generic blog posts post type is using.

84
00:06:46,040 --> 00:06:51,570
And you'll notice that each item in the sidebar from top to bottom has its own unique icon.

85
00:06:51,920 --> 00:06:58,060
So let me show you how we can give our events post type its own custom icon back in our text editor.

86
00:06:58,400 --> 00:07:02,180
Let's just add another parameter within this top level array, right?

87
00:07:02,180 --> 00:07:04,640
Not within the labels Sabari.

88
00:07:04,910 --> 00:07:10,970
So you can either add a new line here, right in between this item, in this item, or after the labels

89
00:07:10,970 --> 00:07:12,800
parameter and its value.

90
00:07:13,160 --> 00:07:18,610
We could just add a comma here and then we can add another item to our top level associative array.

91
00:07:18,770 --> 00:07:23,680
So the parameter we want to target is called menu underscore icon.

92
00:07:24,050 --> 00:07:26,240
And what do we want to set this to equal?

93
00:07:26,570 --> 00:07:30,560
Well, right now I want you to Google for WordPress.

94
00:07:30,560 --> 00:07:31,910
Dasch icons.

95
00:07:32,600 --> 00:07:37,520
The top official result should take you to developer DOT WordPress, dawg.

96
00:07:37,760 --> 00:07:43,550
And from this page, you can see as I scroll down, there are all sorts of different icons to choose

97
00:07:43,550 --> 00:07:43,970
from.

98
00:07:44,600 --> 00:07:48,130
When you see an icon that catches your attention, just go ahead and click on it.

99
00:07:48,320 --> 00:07:54,230
Now, in this case, I'm creating a post type called events, so I think a calendar would make sense.

100
00:07:54,230 --> 00:07:54,560
Right.

101
00:07:54,840 --> 00:08:01,640
So if I click on this icon here, it shows me a larger or high resolution copy of it, but more importantly,

102
00:08:01,820 --> 00:08:04,190
directly to the right of the large icon.

103
00:08:04,310 --> 00:08:07,310
It tells me the code name for that icon.

104
00:08:07,550 --> 00:08:10,820
So you can either copy and paste or just remember that code name.

105
00:08:11,000 --> 00:08:19,280
But back in the text editor, let's say menu icon equals dash at Icons calendar.

106
00:08:19,640 --> 00:08:26,420
And as soon as I save that back in our admin cool, our custom post types of events now uses that calendar

107
00:08:26,420 --> 00:08:27,020
icon.

108
00:08:27,410 --> 00:08:34,040
At this point, why don't we go ahead and try to create a few new event items or event posts so we can

109
00:08:34,040 --> 00:08:38,150
either use the add new link in the sidebar or click add new right here.

110
00:08:39,410 --> 00:08:48,110
Plus title the first one math meetup include a bit of dummy content, click publish and why don't we

111
00:08:48,110 --> 00:08:49,190
create a couple more.

112
00:08:49,190 --> 00:08:57,650
So click add new again title this one The Science of Cats Dummy Content publish.

113
00:08:58,190 --> 00:09:05,030
Let's create one more so add new title it poetry de dummy content publish.

114
00:09:05,720 --> 00:09:12,740
OK, so we can create new events and if I click events in the sidebar that shows me a list of all of

115
00:09:12,740 --> 00:09:14,870
the currently existing events.

116
00:09:15,200 --> 00:09:21,800
However, the code that is making this custom post type possible lives within our theme folder.

117
00:09:22,040 --> 00:09:27,380
And we all know that in WordPress it's very easy to switch between different themes.

118
00:09:27,560 --> 00:09:33,730
So what if tomorrow someone switched off of our fictional university theme and picked a different theme?

119
00:09:34,130 --> 00:09:39,650
My question is what would happen to our events post it and what would happen to these three events that

120
00:09:39,650 --> 00:09:40,820
we've already created?

121
00:09:41,090 --> 00:09:46,820
Well, we can simulate what it would be like to switch to a different theme by simply jumping into our

122
00:09:46,820 --> 00:09:48,770
functions PHP file.

123
00:09:49,070 --> 00:09:54,080
And let's just temporarily delete the custom post type code that we wrote in this lesson.

124
00:09:54,680 --> 00:09:59,270
Don't worry, we can't control zie or commands and undo that and just a minute from now.

125
00:09:59,390 --> 00:10:06,380
But if I delete it and save now, when I try to access the view all events screen in the admin, I see

126
00:10:06,380 --> 00:10:07,790
invalid post type.

127
00:10:08,540 --> 00:10:14,450
And if I just go back to the home page of the WordPress admin, we no longer see events anywhere in

128
00:10:14,450 --> 00:10:15,260
the sidebar.

129
00:10:15,470 --> 00:10:16,580
Now, it's not like those.

130
00:10:16,740 --> 00:10:20,320
Resample events that I created got deleted from the database.

131
00:10:20,580 --> 00:10:23,790
Our content is safe, it still exists in the database.

132
00:10:24,030 --> 00:10:27,210
It's just that now we don't have any way to really access it.

133
00:10:27,550 --> 00:10:33,660
So we've essentially been locked out from editing and accessing our own content, and that is never

134
00:10:33,660 --> 00:10:34,080
good.

135
00:10:34,410 --> 00:10:40,050
So I guess the point that I'm trying to make here is that let me go back into functions and add that

136
00:10:40,050 --> 00:10:40,890
code back in.

137
00:10:41,130 --> 00:10:48,570
The point that I'm trying to make here is that functions B is not the absolute best place to keep this

138
00:10:48,720 --> 00:10:50,370
custom post type code.

139
00:10:50,730 --> 00:10:57,150
Right, because we don't want access to our data to be reliant on a certain theme being activated instead

140
00:10:57,150 --> 00:10:57,850
of a theme.

141
00:10:57,870 --> 00:11:01,050
This is probably a better use case for a plug in.

142
00:11:01,320 --> 00:11:08,970
However, as you know, when it comes to WordPress plug ins, they can easily be activated and deactivated.

143
00:11:09,150 --> 00:11:14,670
And again, if someone deactivated our custom post type plug in, well, then they'd be in the same

144
00:11:14,670 --> 00:11:18,680
situation where they're locked out from accessing their custom post types.

145
00:11:19,020 --> 00:11:25,590
So in my opinion, the best way of handling custom post types is by leveraging something in WordPress

146
00:11:25,590 --> 00:11:33,540
called must use plug ins, must use plug ins, live in their own special dedicated folder, and you

147
00:11:33,540 --> 00:11:39,990
cannot deactivate them as long as the file exists in the must use plugins folder.

148
00:11:40,110 --> 00:11:41,910
WordPress will indeed use it.

149
00:11:42,210 --> 00:11:43,880
Let me show you what I'm referring to.

150
00:11:44,070 --> 00:11:49,110
So right now I want you to find the folder where your WordPress system files live.

151
00:11:49,590 --> 00:11:54,570
So from within local, you can always just right click on your project, choose, reveal and find finder

152
00:11:54,570 --> 00:12:02,340
or show and explore, dig into the project, going to app and then public and then WP content.

153
00:12:03,210 --> 00:12:06,750
And then this is where we see folders like plug ins and themes.

154
00:12:07,110 --> 00:12:11,040
So normal plug ins obviously live in this plug ins folder.

155
00:12:11,190 --> 00:12:21,150
But what I want you to do right now is create a brand new folder and name it M you dash plug ins so

156
00:12:21,150 --> 00:12:23,640
M stands for must use.

157
00:12:23,940 --> 00:12:31,470
OK, now any files that we include within this must use plug ins folder will be automatically and always

158
00:12:31,470 --> 00:12:33,740
loaded and activated by WordPress.

159
00:12:34,080 --> 00:12:38,280
So this is a perfect place to include our custom post type code.

160
00:12:38,490 --> 00:12:44,280
So that way the owner of the website will never accidentally get locked out from accessing their content

161
00:12:44,550 --> 00:12:45,840
or I should say the content.

162
00:12:45,840 --> 00:12:47,370
That's of a custom post type.

163
00:12:47,670 --> 00:12:52,530
So right now, let's go ahead and create a new PDF file that lives within this folder.

164
00:12:53,100 --> 00:12:59,490
So if I go back a folder, I can just open this new plugins folder in my text editor and then let's

165
00:12:59,490 --> 00:13:01,630
create a new file within that folder.

166
00:13:02,160 --> 00:13:06,870
It does not matter what you name the file, so you could name it pizza or unicorn.

167
00:13:06,990 --> 00:13:16,380
But just to make sense, why don't we name it university post types dot p again, you can name it whatever

168
00:13:16,380 --> 00:13:16,910
you want.

169
00:13:18,150 --> 00:13:25,860
So we've got this new empty file now we just want to cut and paste the code back and functions that

170
00:13:25,860 --> 00:13:27,360
we wrote throughout this lesson.

171
00:13:27,690 --> 00:13:27,840
Right.

172
00:13:27,930 --> 00:13:32,190
So that includes the new function that we created as well as the add action line.

173
00:13:32,580 --> 00:13:38,310
So copy all of that into your clipboard or actually cut it into your clipboard because we want to remove

174
00:13:38,310 --> 00:13:39,270
it from functions.

175
00:13:40,740 --> 00:13:45,240
So as soon as I save that, we no longer see events in our sidebar.

176
00:13:45,600 --> 00:13:50,130
But let's just go ahead and paste it into that new plugin file that we were working on.

177
00:13:51,000 --> 00:13:54,960
So back in the must use plugins folder within our brand new empty file.

178
00:13:54,960 --> 00:14:01,200
Just begin with P tag and then go ahead and paste in your clipboard.

179
00:14:02,250 --> 00:14:02,580
Cool.

180
00:14:02,580 --> 00:14:04,980
So here's the code we've been working on in the lesson so far.

181
00:14:04,980 --> 00:14:06,120
Let's save that.

182
00:14:06,600 --> 00:14:10,440
And now when I jump back to the admin, we are back in business.

183
00:14:10,440 --> 00:14:11,370
There's events.

184
00:14:11,640 --> 00:14:17,400
And even if the owner of the website switches to a new theme or deactivates, all of their plug ins

185
00:14:17,550 --> 00:14:22,410
are code that makes the events post type possible, will still be loaded by WordPress.

186
00:14:22,680 --> 00:14:28,170
Now, before we bring this lesson to a close, I want to circle back to this label's array.

187
00:14:28,440 --> 00:14:32,340
So far, we've only addressed the parameter named name.

188
00:14:32,730 --> 00:14:33,090
Right.

189
00:14:33,090 --> 00:14:35,550
And that's what controls the name in the sidebar.

190
00:14:35,550 --> 00:14:36,750
So we see events.

191
00:14:37,080 --> 00:14:42,480
But when I try to create a new event, you might have noticed that up here towards the top it reads

192
00:14:42,810 --> 00:14:47,790
add new post, but I would prefer it say add new event.

193
00:14:48,150 --> 00:14:55,080
So back in our text editor within this label's array, right after this name events line, let's add

194
00:14:55,080 --> 00:15:06,240
a comma new line and let's target a parameter named add new item and let's set that to equal add new

195
00:15:06,270 --> 00:15:06,930
event.

196
00:15:07,170 --> 00:15:07,380
Right.

197
00:15:07,470 --> 00:15:09,390
Or you could type whatever you want here.

198
00:15:09,960 --> 00:15:12,690
But as soon as I save that cool.

199
00:15:12,690 --> 00:15:16,590
So that makes a lot more sense to me on a similar note if I go back.

200
00:15:16,690 --> 00:15:23,410
To the screen and try to edit one of my existing events, the headline reads edit post, but it would

201
00:15:23,410 --> 00:15:25,990
make sense if it said edit event instead.

202
00:15:26,260 --> 00:15:30,720
So back in our text editor, let's add another item to that labels array.

203
00:15:31,060 --> 00:15:40,240
So comma, new line, let's say edit item and let's set it to equal edit event.

204
00:15:40,810 --> 00:15:41,590
Save that.

205
00:15:42,860 --> 00:15:49,100
Cool, a smaller detail that you might have noticed is if you hover over posts or pages in the sidebar,

206
00:15:49,400 --> 00:15:56,060
the first main option, so you can see a list of all of the items to edit them, reads all posts or

207
00:15:56,090 --> 00:15:57,200
all pages.

208
00:15:57,410 --> 00:16:01,870
But for events, it doesn't say all events, it just reads events.

209
00:16:02,240 --> 00:16:08,450
So if you want to customize what that reads back in the text editor, let's add a comma and a new line

210
00:16:08,840 --> 00:16:14,420
parameter is all items and then just set it to equal whatever you want.

211
00:16:14,990 --> 00:16:18,880
So we could say all events instead of just events.

212
00:16:19,490 --> 00:16:20,240
Save that.

213
00:16:20,540 --> 00:16:23,330
And now we see that it behaves just like posts and pages.

214
00:16:23,330 --> 00:16:24,830
We see all events.

215
00:16:25,100 --> 00:16:32,660
And just for good measure, another parameter that I like to add here, comma, new line is singular

216
00:16:32,660 --> 00:16:33,330
name.

217
00:16:34,400 --> 00:16:37,220
So let's set that to equal event, right?

218
00:16:37,290 --> 00:16:37,520
No.

219
00:16:37,520 --> 00:16:39,250
S on the end, just single.

220
00:16:39,560 --> 00:16:45,200
Now there are tons and tons of other label parameters that you can customize, but I feel that these

221
00:16:45,200 --> 00:16:48,470
four or five usually get the job done for me quite well.

222
00:16:48,800 --> 00:16:54,800
If you want to see a comprehensive list of all the parameters that you can customize, just Google for

223
00:16:54,800 --> 00:16:55,970
the name of this function.

224
00:16:56,330 --> 00:17:02,720
Register post type one of the top official results will take you to Codex Dot WordPress, dawg.

225
00:17:02,930 --> 00:17:06,260
And this page has all sorts of information about that function.

226
00:17:06,590 --> 00:17:14,270
And if you scroll down just a bit to parameters here we see the labels parameter and this list shows

227
00:17:14,270 --> 00:17:17,200
you every single parameter that you can customize.

228
00:17:17,540 --> 00:17:21,620
I don't feel like it's necessary to fill out every one of them, but maybe you do.

229
00:17:21,650 --> 00:17:22,490
It's up to you.

230
00:17:22,880 --> 00:17:25,490
And that's going to bring this lesson to a close.

231
00:17:25,850 --> 00:17:33,200
In our next lesson, we will learn how to actually pull in event items into the home page or into any

232
00:17:33,200 --> 00:17:34,450
of our template files.

233
00:17:34,700 --> 00:17:41,090
So, for example, instead of this fake hardcoded, static HTML that we see here, we would want to

234
00:17:41,090 --> 00:17:45,380
load in real dynamic posts that are from the events post type.

235
00:17:45,740 --> 00:17:47,270
It should be a lot of fun.

236
00:17:47,270 --> 00:17:49,460
Let's keep it rolling and I will see you then.
