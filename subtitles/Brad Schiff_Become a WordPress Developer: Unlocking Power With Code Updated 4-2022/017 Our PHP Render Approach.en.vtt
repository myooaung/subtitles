WEBVTT
1
00:00:02.480 --> 00:00:03.350
Hello, everyone.

2
00:00:03.770 --> 00:00:09.650
In this lesson, we're going to start working on the background image choosing ability for our banner

3
00:00:09.650 --> 00:00:10.070
block.

4
00:00:10.370 --> 00:00:16.820
So actually right away, before we add that background image feature, I do want to adjust our banner

5
00:00:16.820 --> 00:00:20.630
block so that it uses a P render callback.

6
00:00:21.110 --> 00:00:26.210
Now before we set that up, I want to explain why I want to use that approach.

7
00:00:26.450 --> 00:00:33.200
And to do that, all we need to do is look in the our blocks folder and open up banner dot.

8
00:00:33.200 --> 00:00:39.110
J.S. Scroll down to the very bottom and let's look at our save component function.

9
00:00:39.590 --> 00:00:44.900
So to answer the question with a question, essentially, why do I want to use the PHP render callback

10
00:00:44.900 --> 00:00:45.440
approach?

11
00:00:45.850 --> 00:00:46.910
Let me ask you this.

12
00:00:47.240 --> 00:00:51.980
What if we need to make a change to this each HTML structure in the future?

13
00:00:52.580 --> 00:00:58.430
And what if we've used this block in ten different templates in 500 blog posts?

14
00:00:58.820 --> 00:01:05.570
So yes, we could add a deprecated property to our JavaScript file and store, you know, the historical

15
00:01:05.570 --> 00:01:08.660
all the different historical versions of our save component.

16
00:01:08.930 --> 00:01:14.810
So that way WordPress wouldn't ask us to click the attempt block recovery button and it could actually

17
00:01:14.810 --> 00:01:16.040
just use the new code.

18
00:01:16.220 --> 00:01:24.130
But even that approach would still require you to manually click in to all 500 blog posts and at least

19
00:01:24.130 --> 00:01:28.340
still click the overall update post button, you know, in the top right corner.

20
00:01:28.880 --> 00:01:35.570
This is because the save function in our JavaScript block, this just returns a string of text and then

21
00:01:35.570 --> 00:01:38.180
that string is stored in the WordPress database.

22
00:01:38.660 --> 00:01:40.460
So there's nothing dynamic about it.

23
00:01:40.760 --> 00:01:46.280
And I don't know about you, but that is not a workflow that I want to build a large and complex website

24
00:01:46.280 --> 00:01:46.760
around.

25
00:01:47.240 --> 00:01:53.870
If I need to make a change to this HTML, I want to be able to change it in one file and I want all

26
00:01:53.870 --> 00:02:01.520
500 posts and pages and templates that use it to now use my newest code immediately, automatically,

27
00:02:01.520 --> 00:02:02.420
dynamically.

28
00:02:02.840 --> 00:02:06.800
And that's exactly what PHP render callbacks allow us to have.

29
00:02:07.220 --> 00:02:13.070
Now, we've already learned about render callbacks in our Plug in development chapter, right when we

30
00:02:13.070 --> 00:02:15.170
built a couple of custom block types.

31
00:02:15.530 --> 00:02:23.090
However, this time around, because our banner block has nested blocks inside it, we need to use our

32
00:02:23.570 --> 00:02:29.720
PHP to access not only the block attributes but also the block content.

33
00:02:30.260 --> 00:02:32.210
If that doesn't make sense right now, that's okay.

34
00:02:32.480 --> 00:02:38.720
Essentially in this video lesson, we're going to set up our new approach and I'll explain what all

35
00:02:38.720 --> 00:02:39.590
of this means.

36
00:02:40.040 --> 00:02:44.390
But right now, to give you a sneak peek, I'll just say that it means we can have our cake and eat

37
00:02:44.390 --> 00:02:44.900
it, too.

38
00:02:45.320 --> 00:02:46.220
Let's get to work.

39
00:02:46.790 --> 00:02:50.370
So in our text editor, I need you to open up our functions.

40
00:02:50.370 --> 00:02:51.890
TCP IP file.

41
00:02:54.060 --> 00:03:00.300
If you scroll down to the very, very bottom, you'll remember we have this class called JSF X BLOCK

42
00:03:00.750 --> 00:03:01.350
right now.

43
00:03:01.350 --> 00:03:07.050
Let's adjust it so that down here, when we're actually creating instances from it, here's our banner

44
00:03:07.050 --> 00:03:07.470
block.

45
00:03:07.770 --> 00:03:10.230
I want to be able to add a second argument here.

46
00:03:10.230 --> 00:03:17.730
So after the quotes banner and say true, and I want that to mean that I want to use a render callback

47
00:03:18.120 --> 00:03:20.400
essentially in the on init function.

48
00:03:20.400 --> 00:03:25.410
When we're registering our block type, we have this property of editor script and we would just add

49
00:03:25.410 --> 00:03:31.830
another property to this array of arguments that is called render underscore callback, and then you

50
00:03:31.830 --> 00:03:34.380
just give it a value of a function.

51
00:03:34.710 --> 00:03:40.770
However, I don't want a hard code that here because many of your blocks on your website that use this

52
00:03:40.770 --> 00:03:44.280
class may not want a PHP render callback.

53
00:03:44.370 --> 00:03:50.700
So essentially I'm just trying to make it an opt in or an optional feature, right where I'm trying

54
00:03:50.700 --> 00:03:53.340
to make our class nice and flexible.

55
00:03:53.700 --> 00:03:57.960
So there is a million different ways you can organize the AP to power this.

56
00:03:58.260 --> 00:03:59.340
But here's what I would do.

57
00:03:59.790 --> 00:04:06.690
First of all, in our class of JS X block, in the construct function, let's add a parameter in addition

58
00:04:06.690 --> 00:04:10.080
to dollar sign name, comma, let's call it.

59
00:04:10.200 --> 00:04:11.490
And we could make up any name.

60
00:04:11.490 --> 00:04:17.820
Let's call it dollar sign, render callback and let's set that to equal null.

61
00:04:18.120 --> 00:04:24.780
That way, even if you don't provide a value, a second argument, we won't run into an error, right?

62
00:04:24.780 --> 00:04:29.940
Because for these blocks where we're not using a pre render callback, we don't want to have to add

63
00:04:29.940 --> 00:04:32.130
a second argument and say false.

64
00:04:32.430 --> 00:04:34.680
We just don't want to have to add anything extra at all.

65
00:04:35.130 --> 00:04:35.550
Cool.

66
00:04:35.910 --> 00:04:39.660
Now in the construct function, let's go ahead and hold on to that value.

67
00:04:40.170 --> 00:04:46.140
So after this line where we're holding on to the name value, we can say dollar sign this dash greater

68
00:04:46.140 --> 00:04:51.840
than render callback equals dollar sign render callback.

69
00:04:52.350 --> 00:04:52.710
Cool.

70
00:04:52.890 --> 00:04:56.130
So now we can access this from any of our class methods.

71
00:04:56.700 --> 00:05:01.260
Now here's what I'm going to do to make this array of arguments dynamic.

72
00:05:01.620 --> 00:05:09.480
Do this with me, select from the word array here and just select to the closing single closing parentheses.

73
00:05:09.480 --> 00:05:11.940
So not both of these parentheses, just the first one.

74
00:05:12.390 --> 00:05:16.560
Cut that into your clipboard and in its place.

75
00:05:16.560 --> 00:05:21.270
Let's point towards a variable that doesn't exist yet, but we can create it in 5 seconds from now.

76
00:05:21.270 --> 00:05:24.840
So just say dollar sign our args, right?

77
00:05:24.840 --> 00:05:27.390
Our arguments cool.

78
00:05:27.930 --> 00:05:31.080
Now right above that register block type line of code.

79
00:05:31.080 --> 00:05:34.530
So right about here, let's just make up that variable.

80
00:05:34.530 --> 00:05:39.990
So dollar sign our args equals and now I want you to just paste in your clipboard.

81
00:05:40.890 --> 00:05:41.250
Cool.

82
00:05:41.340 --> 00:05:44.250
Let's be sure to end this line with a semicolon right here.

83
00:05:44.940 --> 00:05:45.390
Okay.

84
00:05:45.540 --> 00:05:51.090
And now right below this line of code, let's just write an if statement and we're just going to check

85
00:05:51.390 --> 00:05:57.360
does render callback or I should highlight this, does our render callback property, does it equal

86
00:05:57.360 --> 00:05:57.900
true?

87
00:05:58.560 --> 00:06:04.440
If it does equal true, then we can just push another property onto our array of arguments.

88
00:06:05.370 --> 00:06:08.670
So if parentheses curly brackets, the condition is if.

89
00:06:09.950 --> 00:06:11.150
Dollar sign this.

90
00:06:11.960 --> 00:06:15.490
Dash greater than render callback.

91
00:06:15.500 --> 00:06:20.660
So if that evaluates to true then in the curly brackets for if what do we want to do?

92
00:06:21.320 --> 00:06:24.410
Well dollar sign our args.

93
00:06:24.680 --> 00:06:25.640
Square brackets.

94
00:06:25.940 --> 00:06:28.640
We want to set a property in that array called.

95
00:06:28.850 --> 00:06:30.710
And this name is not made up.

96
00:06:30.710 --> 00:06:35.390
It needs to be exactly this name render underscore callback.

97
00:06:35.990 --> 00:06:36.230
Right.

98
00:06:36.230 --> 00:06:40.970
So just like WordPress has this official name of editor script, this is a WordPress property name,

99
00:06:40.970 --> 00:06:45.920
render callback and just set it to equal and now we give it a p function.

100
00:06:46.490 --> 00:06:50.750
We haven't created it yet, but you can imagine we'll have a method in our overall class.

101
00:06:51.050 --> 00:06:52.790
So let's just point towards that method.

102
00:06:53.180 --> 00:06:59.510
So we use the array syntax dollar sign this comma quotes and now we just make up a method name.

103
00:07:00.260 --> 00:07:03.260
How about our render callback?

104
00:07:03.590 --> 00:07:06.200
Now let's just go create a method with this matching name.

105
00:07:06.620 --> 00:07:09.860
So maybe above our on init function we're still in our class.

106
00:07:09.860 --> 00:07:15.950
We can just say function our render callback parentheses curly brackets.

107
00:07:16.520 --> 00:07:22.070
Now in these parentheses and you might remember this from our plug in development chapter, we would

108
00:07:22.070 --> 00:07:25.370
include a parameter of attributes, right?

109
00:07:25.370 --> 00:07:31.880
That way, when WordPress calls this function for us, it's going to pass into it any of the block attributes.

110
00:07:32.660 --> 00:07:34.880
However, and this is where things get interesting.

111
00:07:35.180 --> 00:07:39.950
Let's add a comma and have another attribute of dollar sign content.

112
00:07:40.370 --> 00:07:46.280
Because not only do we need to access the attributes, but if we have a block that has nested content

113
00:07:46.280 --> 00:07:50.720
right other blocks nested inside it, we need to access that content.

114
00:07:51.530 --> 00:07:54.020
Don't worry, we'll see this in action in just a little bit.

115
00:07:54.470 --> 00:07:59.300
For now, within the body of this function, we need to answer the question of, well, what should

116
00:07:59.300 --> 00:08:00.350
this function return?

117
00:08:00.800 --> 00:08:03.410
Well, it just needs to return a string of text.

118
00:08:03.410 --> 00:08:04.700
That's HTML.

119
00:08:04.970 --> 00:08:10.550
And that HTML is what's going to actually be used on the front end of your website.

120
00:08:11.090 --> 00:08:19.130
So in our function, I don't know about you, but I don't like having to manually concatenate a long

121
00:08:19.130 --> 00:08:20.750
string of text with PHP.

122
00:08:21.290 --> 00:08:23.990
This type of syntax is very unintuitive for me.

123
00:08:24.200 --> 00:08:25.640
I find it really awkward.

124
00:08:25.640 --> 00:08:30.050
I'm not good at writing code like that, so what I want to be able to do in this function?

125
00:08:30.380 --> 00:08:36.650
Yes, it needs to return a string, but I want to be able to write just regular PHP where you're free

126
00:08:36.650 --> 00:08:43.520
to drop in and out of PHP and when you're not in PHP, you're just adding plain HTML, right?

127
00:08:43.520 --> 00:08:44.420
You're outputting it.

128
00:08:44.750 --> 00:08:50.420
But I want to be able to write that type of code even though we need to return one big value here.

129
00:08:50.900 --> 00:08:52.520
So this is what I like to do.

130
00:08:52.520 --> 00:08:53.720
It's just personal preference.

131
00:08:53.930 --> 00:08:59.960
But in this function we're going to say, oh, underscore, start semicolon, then let's just have a

132
00:08:59.960 --> 00:09:04.730
placeholder line where we say ABC, one, two, three, then we'll have a final line where we do return

133
00:09:04.730 --> 00:09:11.420
one big string value and we're just going to say return oh be get clean semicolon.

134
00:09:12.080 --> 00:09:14.840
So we're using PHP to create an output buffer.

135
00:09:14.840 --> 00:09:18.920
We're starting that, we're ending it and returning that here.

136
00:09:19.280 --> 00:09:22.160
So essentially anything we do in between those lines.

137
00:09:22.160 --> 00:09:27.530
So where this placeholder line is that will just be treated as a big string of text that gets returned.

138
00:09:28.070 --> 00:09:31.400
Now from here, there's a million different ways you could stay organized.

139
00:09:31.640 --> 00:09:38.540
But on this placeholder line here, I think we should just require in a P file with the matching name

140
00:09:38.540 --> 00:09:39.560
for your block type.

141
00:09:39.950 --> 00:09:46.310
In other words, if you call our class or if you instantiate a new object using our class and you give

142
00:09:46.310 --> 00:09:49.970
it a name of banner, right, your JavaScript file would be banner.

143
00:09:50.150 --> 00:09:50.630
JS.

144
00:09:51.080 --> 00:09:56.360
I would just want to load a p file here called Banner dot p.

145
00:09:57.050 --> 00:09:57.980
So let's do this.

146
00:09:57.980 --> 00:10:09.560
Let's say require get beam file path semicolon in the parentheses, just double quotes slash our blocks.

147
00:10:10.010 --> 00:10:10.220
Right?

148
00:10:10.220 --> 00:10:12.080
That's where we're storing our JavaScript files.

149
00:10:12.080 --> 00:10:14.450
Well, we can also store IP files in there.

150
00:10:14.450 --> 00:10:21.500
So slash and then blanks, AP only we don't actually want to hard code the word blank so this would

151
00:10:21.500 --> 00:10:31.550
be curly brackets dollar sign this dash greater than name cool so let's go ahead and save this and now

152
00:10:31.550 --> 00:10:37.700
because down here when we created this instance of it for Banner, we said true, it's going to use

153
00:10:37.700 --> 00:10:39.860
a PHP render callback function.

154
00:10:40.310 --> 00:10:43.670
So we just need to go create a p file with this name.

155
00:10:43.700 --> 00:10:44.540
Right banner.

156
00:10:44.570 --> 00:10:54.590
So in the our blocks folder, new file name it banner dot p just for a super quick test in this file.

157
00:10:54.770 --> 00:11:03.080
How about we just say this is from P, give that a save and refresh the front end of your website.

158
00:11:03.710 --> 00:11:04.730
And I knew this would happen.

159
00:11:04.730 --> 00:11:08.570
I'm so used to writing JavaScript that I leave out semicolons.

160
00:11:08.570 --> 00:11:08.900
And you.

161
00:11:09.080 --> 00:11:10.370
Absolutely cannot do that.

162
00:11:10.370 --> 00:11:18.500
And B, so it right here, it tells us what line number, line 181 So back in functions dot b me show

163
00:11:18.500 --> 00:11:21.860
you where I led you astray on line 180.

164
00:11:22.130 --> 00:11:25.190
This line of code needs to end with a semicolon.

165
00:11:25.820 --> 00:11:26.630
Give that a save.

166
00:11:26.630 --> 00:11:27.830
Refresh the front end.

167
00:11:28.640 --> 00:11:28.940
Oops.

168
00:11:28.940 --> 00:11:30.560
Looks like we've got another error around.

169
00:11:30.560 --> 00:11:32.360
Line number 199.

170
00:11:32.360 --> 00:11:33.320
Let's scroll down.

171
00:11:34.900 --> 00:11:37.810
As you might have guessed, on line 198.

172
00:11:37.810 --> 00:11:40.840
At the end of that line, I also forgot a semicolon.

173
00:11:41.350 --> 00:11:42.060
Give that a save.

174
00:11:42.070 --> 00:11:43.120
Try it one more time.

175
00:11:43.780 --> 00:11:44.350
Perfect.

176
00:11:44.650 --> 00:11:46.960
So now we don't see our banner block.

177
00:11:46.960 --> 00:11:47.980
But we do see.

178
00:11:48.100 --> 00:11:49.060
In its place.

179
00:11:49.480 --> 00:11:51.250
This is from HP.

180
00:11:51.940 --> 00:11:58.270
Now, before we go any further, let's actually look at the database entry for this full site editing

181
00:11:58.300 --> 00:11:58.900
template.

182
00:11:59.470 --> 00:12:00.640
You know the drill by now.

183
00:12:00.640 --> 00:12:02.800
You know how I locate this in the database.

184
00:12:02.800 --> 00:12:06.370
But essentially here we see our block theme banner.

185
00:12:06.820 --> 00:12:12.340
Now, the reason I'm having us look at this is because none of this HTML that we see here.

186
00:12:12.610 --> 00:12:18.490
So the two opening wrapper, divs, none of this HTML needs to live in the database.

187
00:12:19.060 --> 00:12:20.680
Or at least that's my opinion.

188
00:12:20.680 --> 00:12:21.940
That's my philosophy.

189
00:12:22.480 --> 00:12:27.160
Instead, the HTML can just live in our PHP render callback.

190
00:12:27.760 --> 00:12:30.190
However, this type of content.

191
00:12:30.790 --> 00:12:37.750
So the comments that explain which block type to nest and then any block attributes that absolutely

192
00:12:37.750 --> 00:12:39.690
does need to live in the database.

193
00:12:39.700 --> 00:12:45.730
So we 100% need to save this from within our JavaScript component.

194
00:12:46.360 --> 00:12:47.740
Now for extra credit.

195
00:12:47.740 --> 00:12:54.280
After this chapter, you could go back and adjust our generic heading and generic button blocks to use

196
00:12:54.280 --> 00:13:00.970
this same approach, right, so that they only have block attributes instead of actual each HTML being

197
00:13:00.970 --> 00:13:01.460
saved.

198
00:13:01.480 --> 00:13:05.290
But in this lesson, we're not going to worry about generic heading in generic button.

199
00:13:05.530 --> 00:13:08.150
We're just going to worry about our banner block.

200
00:13:08.740 --> 00:13:09.040
Okay.

201
00:13:09.040 --> 00:13:13.600
But the big picture idea is, if you wanted to for extra credit, you can use this approach that we're

202
00:13:13.600 --> 00:13:20.290
going to set up so that you never really have any HTML when you're working with your own custom block

203
00:13:20.290 --> 00:13:20.800
types.

204
00:13:21.310 --> 00:13:22.450
That's just my philosophy.

205
00:13:22.450 --> 00:13:25.660
I don't want to hard code each HTML.

206
00:13:25.660 --> 00:13:30.970
I would rather it live dynamically on the fly inside a AP file.

207
00:13:31.600 --> 00:13:35.320
Anyways, back to the actual task at hand for our banner block.

208
00:13:35.590 --> 00:13:42.730
Let's adjust the value that we're returning in our save component to not return any HTML and to only

209
00:13:42.730 --> 00:13:45.400
return the actual nested content.

210
00:13:45.760 --> 00:13:52.090
So to do that back in banner dot Jess down at the very bottom in our save component.

211
00:13:52.630 --> 00:13:56.440
Just go ahead and cut all of this HTML or I should say this.

212
00:13:56.440 --> 00:14:00.970
Jess X, go ahead and cut this into your clipboard.

213
00:14:01.150 --> 00:14:06.250
We're going to want it in another minute or two, so make sure it's safe and ready in your clipboard

214
00:14:06.250 --> 00:14:07.360
to use elsewhere.

215
00:14:07.810 --> 00:14:12.490
But now, in this function, the only thing we need to return so I'll get rid of the parentheses is

216
00:14:12.490 --> 00:14:16.900
literally just inner blocks dot content.

217
00:14:16.900 --> 00:14:18.670
And that's a self-closing component.

218
00:14:19.300 --> 00:14:23.890
So whatever string of text this function returns, that's what's going to get saved into the database.

219
00:14:24.460 --> 00:14:29.200
You might remember this approach from back in the Plug in development chapter when we would return NULL

220
00:14:29.200 --> 00:14:29.650
here.

221
00:14:29.980 --> 00:14:32.050
That's very similar to what we're doing now.

222
00:14:32.050 --> 00:14:37.600
It's just that because the banner block can have blocks nested inside of it, we do need to return at

223
00:14:37.600 --> 00:14:38.980
least this content.

224
00:14:39.490 --> 00:14:41.710
Anyways, let's go ahead and save this file.

225
00:14:42.190 --> 00:14:48.010
And before we move on to the aspect, don't forget to have your NPM run start task up and running.

226
00:14:48.010 --> 00:14:50.080
So NPM run start.

227
00:14:50.350 --> 00:14:54.070
Right, because we just made a change to our JavaScript file anyways.

228
00:14:54.070 --> 00:15:00.760
At this point with that code still in your clipboard, I want you to jump into banner TCP IP, get rid

229
00:15:00.760 --> 00:15:01.210
of this.

230
00:15:01.210 --> 00:15:04.390
This is from copy and paste in your clipboard.

231
00:15:05.020 --> 00:15:08.900
Now we do need to adjust this so it's no longer JSE acts.

232
00:15:08.920 --> 00:15:14.320
We wanted to just be regular HTML, so instead of class name there's three instances.

233
00:15:14.320 --> 00:15:18.510
Just change it to class equals next in speed.

234
00:15:18.540 --> 00:15:19.570
This doesn't make sense.

235
00:15:19.570 --> 00:15:21.220
This inner block stock content.

236
00:15:21.490 --> 00:15:30.070
So just replace that line with instead drop into B, drop out of B call echo dollar sign content that

237
00:15:30.070 --> 00:15:32.260
will accomplish exactly the same thing.

238
00:15:32.620 --> 00:15:37.540
Finally, we do need to adjust this style property in PHP.

239
00:15:37.540 --> 00:15:40.480
You can't just give it curly brackets object like this.

240
00:15:40.840 --> 00:15:42.430
So let's give ourselves a clean slate.

241
00:15:42.550 --> 00:15:49.120
Leave the style equals, but start deleting everything after style equals all the way to the closing

242
00:15:49.120 --> 00:15:50.200
double curly bracket.

243
00:15:50.200 --> 00:15:58.660
So like this right style equals and then let's say quotes and just spell out regular HTML in access.

244
00:15:58.660 --> 00:16:06.310
So background dash, image, colon URL, parentheses, a pair of single quotes inside there.

245
00:16:06.310 --> 00:16:09.790
That's where you include the actual, you know, HTTP address.

246
00:16:10.180 --> 00:16:17.410
So inside there, let's drop into B and echo out git theme file.

247
00:16:17.410 --> 00:16:25.090
You try parentheses to call that give it a string value of slash images slash library dash here dot

248
00:16:25.090 --> 00:16:25.720
jpeg.

249
00:16:26.590 --> 00:16:32.080
In our very next video, we're going to make this actually dynamic so the end user can upload a new

250
00:16:32.080 --> 00:16:32.620
photo.

251
00:16:32.980 --> 00:16:34.270
But for now, we're just.

252
00:16:34.450 --> 00:16:35.980
Testing our approach.

253
00:16:36.490 --> 00:16:38.710
So let's go ahead and save this.

254
00:16:38.980 --> 00:16:44.710
And now we absolutely need to go insert a fresh copy of our block into our template.

255
00:16:45.100 --> 00:16:45.400
Right?

256
00:16:45.400 --> 00:16:52.150
Because our old copy of the block, it had that banner wrapper div in the actual value that would be

257
00:16:52.150 --> 00:16:53.470
saved in the database.

258
00:16:53.950 --> 00:16:57.880
So if we refresh right now on the front end, we'd see a doubling up.

259
00:16:58.420 --> 00:16:58.840
Yes.

260
00:16:59.080 --> 00:17:00.430
See how the image starts here.

261
00:17:00.430 --> 00:17:05.110
And then we've got sort of a banner nested inside a banner that's to be expected.

262
00:17:05.110 --> 00:17:07.300
Right, because we've doubled up that HTML.

263
00:17:07.510 --> 00:17:11.450
However, in the template editor, go ahead and refresh.

264
00:17:12.670 --> 00:17:14.210
We're going to see an error message.

265
00:17:14.230 --> 00:17:15.250
Absolutely.

266
00:17:15.400 --> 00:17:17.080
We don't even need to attempt the recovery.

267
00:17:17.080 --> 00:17:22.510
Just click on the block itself and push, delete or backspace on your keyboard and let's just insert

268
00:17:22.510 --> 00:17:23.660
a fresh copy.

269
00:17:23.680 --> 00:17:29.040
So ad block banner, let's add a large headline and a button.

270
00:17:29.050 --> 00:17:31.480
So say generic heading.

271
00:17:32.920 --> 00:17:33.730
Welcome.

272
00:17:34.140 --> 00:17:35.440
We click on the background image.

273
00:17:35.440 --> 00:17:36.610
You can click the plus symbol.

274
00:17:36.610 --> 00:17:38.110
Let's add a small headline.

275
00:17:38.830 --> 00:17:40.570
The sky is blue.

276
00:17:41.230 --> 00:17:43.210
Finally, let's add a generic button.

277
00:17:43.990 --> 00:17:45.190
Learn more.

278
00:17:45.440 --> 00:17:46.540
Make it dark orange.

279
00:17:47.200 --> 00:17:48.610
Let's go ahead and click Save.

280
00:17:49.180 --> 00:17:52.630
And now, if we refresh the front end, perfect.

281
00:17:52.930 --> 00:17:54.580
And let's go look at our database.

282
00:17:55.120 --> 00:17:57.250
So here we see our banner block.

283
00:17:57.670 --> 00:17:58.960
Notice this is perfect.

284
00:17:59.140 --> 00:18:00.730
There's no HTML.

285
00:18:00.940 --> 00:18:06.640
The only thing that lives inside this comment in our template is literally just the other nested blocks

286
00:18:06.640 --> 00:18:07.660
that live inside it.

287
00:18:08.260 --> 00:18:13.630
Now you do see this HTML, but that's not directly a child of the banner block.

288
00:18:13.840 --> 00:18:16.150
That's part of the generic heading block.

289
00:18:16.330 --> 00:18:21.340
And like I said, again, for extra credit at the end of this chapter, you can use this approach that

290
00:18:21.340 --> 00:18:27.820
we're taking for the banner block, and you could apply this same approach to generic heading and generic

291
00:18:27.820 --> 00:18:28.210
button.

292
00:18:28.870 --> 00:18:30.410
That's not our focus right now, though.

293
00:18:30.430 --> 00:18:33.010
We're just working on generic banner anyways.

294
00:18:33.190 --> 00:18:35.560
At this point, I'm very happy with this setup.

295
00:18:35.800 --> 00:18:42.550
And in our very next lesson now we're in a great position to actually add the background image choosing

296
00:18:42.550 --> 00:18:44.170
and uploading functionality.

297
00:18:44.350 --> 00:18:46.510
I think that'll be a fun detail to work on.

298
00:18:46.660 --> 00:18:49.570
So let's keep our momentum rolling and I'll see you then.
