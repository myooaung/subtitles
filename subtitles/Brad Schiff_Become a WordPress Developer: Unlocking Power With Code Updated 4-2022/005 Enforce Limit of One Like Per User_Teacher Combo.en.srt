1
00:00:01,980 --> 00:00:03,040
Hello, everyone.

2
00:00:03,390 --> 00:00:11,800
In this lesson, we will implement permissions and logic and restrictions for our custom API endpoint.

3
00:00:12,180 --> 00:00:16,410
We're going to pick up right where we left off in the previous part of this lesson.

4
00:00:16,620 --> 00:00:21,170
The very first thing that I'm going to do is give myself a clean slate.

5
00:00:21,630 --> 00:00:27,660
What I mean by this is in the admin dashboard, I'm going to click on likes in the sidebar, and I'm

6
00:00:27,660 --> 00:00:34,620
just going to delete all of my existing like posts because several of these were just weird tests and

7
00:00:34,620 --> 00:00:36,690
experiments with fake data.

8
00:00:37,080 --> 00:00:44,220
So just click this checkbox up here to select all of them and then choose Bulc actions, move to trash,

9
00:00:44,520 --> 00:00:51,750
click, apply, and then we can even empty our trash by clicking on trash here and then click empty

10
00:00:51,750 --> 00:00:52,370
trash.

11
00:00:53,640 --> 00:00:54,040
Cool.

12
00:00:54,060 --> 00:00:59,470
So at this point, we've deleted all of our like posts and now we have a clean slate.

13
00:00:59,790 --> 00:01:02,590
Now let's work on our first goal for this video.

14
00:01:02,940 --> 00:01:08,880
Let's set things up so that you need to be logged in with the user account in order to create a like

15
00:01:08,880 --> 00:01:09,480
post.

16
00:01:09,720 --> 00:01:14,070
If you're not logged in, we just want to completely ignore your request.

17
00:01:14,400 --> 00:01:20,190
So to set that up, let's jump into our text editor and within our theme folder, let's look inside

18
00:01:20,190 --> 00:01:28,260
the ANC subfolder and jump into like Dasch route and let's find our create like function.

19
00:01:28,590 --> 00:01:32,160
And let's do this right up at the very top of this function.

20
00:01:32,160 --> 00:01:34,020
Let's write an if statement.

21
00:01:34,620 --> 00:01:41,640
So if parentheses, curly brackets and for the condition check in certain situations, you would want

22
00:01:41,640 --> 00:01:45,050
to see if the current user can perform a certain capability.

23
00:01:45,300 --> 00:01:49,860
So in that case, you could say current user can.

24
00:01:50,460 --> 00:01:54,630
And then within those parentheses you can include the name of some capability.

25
00:01:54,930 --> 00:01:55,190
Right.

26
00:01:55,220 --> 00:02:00,360
So remember, with our note post type, we set up custom capabilities and they would have names like

27
00:02:00,810 --> 00:02:03,840
published note or something along that line.

28
00:02:04,080 --> 00:02:04,340
Right.

29
00:02:04,350 --> 00:02:09,010
And then that would either evaluate to true or false based on the current user and their role.

30
00:02:09,270 --> 00:02:12,300
So that's one way of doing it that I want you to be aware of.

31
00:02:12,300 --> 00:02:14,490
But we don't need to use that for now.

32
00:02:14,490 --> 00:02:17,640
So let's delete that and for our condition check.

33
00:02:17,880 --> 00:02:21,900
I don't care which role you have or which specific capabilities you have.

34
00:02:22,050 --> 00:02:26,780
If you have a user account whatsoever, that's good enough for me, for you to create a like.

35
00:02:27,060 --> 00:02:32,990
So for my check, I'm just going to say is user logged in.

36
00:02:33,840 --> 00:02:36,420
OK, so this will evaluate to true or false.

37
00:02:36,630 --> 00:02:42,090
If it's true, we can just copy and paste all of this code to live within these curly brackets.

38
00:02:42,420 --> 00:02:44,640
We can do that in about ten seconds from now.

39
00:02:44,640 --> 00:02:52,200
But if this is false, if someone is not logged in, then after the curly bracket, let's say else curly

40
00:02:52,200 --> 00:02:57,870
brackets, if you're not logged in, let's cancel the current request by saying DAI.

41
00:02:58,830 --> 00:03:07,830
And then within the parentheses, let's say only logged in users can create a like.

42
00:03:08,640 --> 00:03:14,730
OK, but if you are logged in, then let's move all of this code to live within the if statement curly

43
00:03:14,730 --> 00:03:15,450
brackets.

44
00:03:16,320 --> 00:03:21,600
So I'm going to select this line and our entire WP insert post chunk.

45
00:03:21,960 --> 00:03:27,150
So with all of that select and just cut it into the clipboard and then paste it within these if curly

46
00:03:27,150 --> 00:03:27,840
brackets.

47
00:03:28,170 --> 00:03:33,060
OK, and before we save this, let's review what this function is going to return.

48
00:03:33,240 --> 00:03:38,760
In either case, if you are not logged in, the server will respond with this message.

49
00:03:39,300 --> 00:03:45,840
But if you are logged in and this code runs, we also want to be sure to return something so that the

50
00:03:45,840 --> 00:03:50,340
server sends back a response so that we have something to see within our JavaScript.

51
00:03:50,700 --> 00:03:58,830
Now, luckily, this WP insert post function, if it is successful, it returns the ID number of the

52
00:03:58,830 --> 00:04:00,750
new post that it just created.

53
00:04:01,170 --> 00:04:06,240
So right before this WP insert post function, we can just say return.

54
00:04:06,870 --> 00:04:11,460
OK, now let's go ahead and save this and test it out on the front end.

55
00:04:11,880 --> 00:04:15,210
So go ahead and navigate to a professor detail screen.

56
00:04:15,510 --> 00:04:23,040
And if I click the like box and then check my console, if I expand this object and scroll down to the

57
00:04:23,040 --> 00:04:27,840
response text we see only logged in users can create a like.

58
00:04:28,380 --> 00:04:34,740
Now at first this could be very confusing because we are indeed logged in with our admin account.

59
00:04:35,040 --> 00:04:37,710
So why in the world are we seeing this message?

60
00:04:38,190 --> 00:04:44,430
Or in other words, why is the is user logged in condition check evaluating to false?

61
00:04:44,790 --> 00:04:53,160
Well, in one word, the answer is n even though we are creating our own custom API endpoint, the overall

62
00:04:53,190 --> 00:04:56,400
WordPress rest API has still got our back.

63
00:04:56,640 --> 00:05:01,350
In other words, within the context of a rest API callback function like.

64
00:05:01,420 --> 00:05:08,500
This this condition is never going to evaluate to true and WordPress can never trust that we are who

65
00:05:08,500 --> 00:05:15,410
we say we are unless we send along a nonce code with our JavaScript request.

66
00:05:15,940 --> 00:05:19,070
So let's go update our JavaScript to do just that.

67
00:05:19,420 --> 00:05:26,980
So within our theme folder in the Jass Modules folder, let's open up like jazz and let's scroll down

68
00:05:26,980 --> 00:05:29,410
and find our create like method.

69
00:05:29,770 --> 00:05:30,490
Here it is.

70
00:05:30,820 --> 00:05:35,630
And within the Ajax call, we just need to pass along our nonce code.

71
00:05:35,920 --> 00:05:42,070
Now, we've already set this up in a previous JavaScript module, so in order to save a ton of typing,

72
00:05:42,250 --> 00:05:47,670
let's just copy and paste and borrow from within our mind notes JS file.

73
00:05:48,820 --> 00:05:55,960
So within the my notes jass, if you scroll down and find our delete note method within the Ajax call,

74
00:05:55,960 --> 00:06:02,380
remember that we set up this before send property and this is where we wrote the code to send along

75
00:06:02,380 --> 00:06:06,740
a secret Norns value so that WordPress can trust our request.

76
00:06:06,940 --> 00:06:09,460
This proves that we are who we say we are.

77
00:06:10,030 --> 00:06:17,200
So let's just copy this entire before and chunk from here down to the closing curly bracket and comma.

78
00:06:17,770 --> 00:06:24,820
Let's copy that into our clipboard and then back in our like jazz file within the create like Ajax call,

79
00:06:25,960 --> 00:06:27,850
maybe right above the line.

80
00:06:27,970 --> 00:06:30,610
Add a new line paste in your clipboard.

81
00:06:31,360 --> 00:06:35,070
OK, let's go ahead and save that and let's go test it out.

82
00:06:35,080 --> 00:06:39,130
So back on the front end, be sure to perform a hard refresh.

83
00:06:40,450 --> 00:06:45,990
And now if I click the hard box and check my console, cool.

84
00:06:46,000 --> 00:06:49,870
The post was successfully created because we see an ID number.

85
00:06:50,170 --> 00:06:55,180
Remember that we are returning the results of our WP insert post function.

86
00:06:55,570 --> 00:07:02,140
Now, a bit later on, we will set things up so that the heart box updates on the fly in real time,

87
00:07:02,590 --> 00:07:04,300
but we have not set that up yet.

88
00:07:04,300 --> 00:07:08,560
So if I want lightbox to update, I can just perform a refresh.

89
00:07:09,430 --> 00:07:15,520
Cool's of the count increased from zero to one and now the heart is solid and filled in to represent

90
00:07:15,520 --> 00:07:15,670
that.

91
00:07:15,670 --> 00:07:20,110
The current user account I'm signed in with has already liked this professor.

92
00:07:20,650 --> 00:07:26,890
And just to test out our code, why don't we try to visit this same professor page in a private window

93
00:07:27,040 --> 00:07:29,710
where I am not logged in to any account?

94
00:07:30,100 --> 00:07:34,810
So programs, biology doctor barks a lot.

95
00:07:35,380 --> 00:07:37,180
Oh, so I see a problem.

96
00:07:37,870 --> 00:07:42,100
If this browser window is not logged in, then why would the heart be filled in?

97
00:07:42,490 --> 00:07:48,160
This doesn't make any sense and it's actually a problem that's being created from a tiny mistake I made

98
00:07:48,160 --> 00:07:49,360
in a previous lesson.

99
00:07:49,720 --> 00:07:55,150
Right, because we would expect a logged out user to see an empty outline of a heart.

100
00:07:55,450 --> 00:08:01,450
So in order to fix this, let's jump into our text editor and I want you to open up a single dash,

101
00:08:01,450 --> 00:08:03,620
Professor Dot p p.

102
00:08:04,750 --> 00:08:09,460
OK, let's scroll down until we find the main span that has a class of lightbox.

103
00:08:09,820 --> 00:08:14,380
And the problem here is that data dash exists is being set to.

104
00:08:14,380 --> 00:08:14,920
Yes.

105
00:08:14,920 --> 00:08:15,670
When it should be.

106
00:08:15,670 --> 00:08:16,200
No.

107
00:08:16,570 --> 00:08:20,890
Now, the cause of this problem has to do with our existing query that we wrote.

108
00:08:21,200 --> 00:08:27,070
Remember, this is where we checked to see if there are any light posts that, like the current professor

109
00:08:27,070 --> 00:08:30,880
you're viewing that were created by the currently signed in user.

110
00:08:31,060 --> 00:08:36,430
Now, the problem and confusion here is being created by this git current user ID function.

111
00:08:36,760 --> 00:08:42,100
If the current visitor is logged out, this function returns a value of zero.

112
00:08:42,340 --> 00:08:50,350
However, within the context of a WP query, if you say author equals zero, well, that's the equivalent

113
00:08:50,350 --> 00:08:52,810
of just not having this line at all.

114
00:08:53,230 --> 00:08:53,530
Right.

115
00:08:53,530 --> 00:08:57,080
And it's going to query for posts regardless of the author.

116
00:08:57,700 --> 00:08:59,320
So let me put that line back.

117
00:08:59,590 --> 00:09:04,990
And the way around this issue is right above this query line and right below this exists.

118
00:09:04,990 --> 00:09:06,280
Status equals no.

119
00:09:06,280 --> 00:09:13,930
Let's set up an if statement if parentheses curly brackets for the condition check, let's say, is

120
00:09:14,260 --> 00:09:17,070
user logged in.

121
00:09:17,710 --> 00:09:21,970
OK, and then let's just move this entire query as well as this.

122
00:09:21,970 --> 00:09:23,560
If checked to set the status to.

123
00:09:23,560 --> 00:09:27,820
Yes, let's move all of this to live within this if statement.

124
00:09:28,240 --> 00:09:33,450
So that way we can entirely avoid the situation where the author would equal zero.

125
00:09:33,670 --> 00:09:39,730
So I'm just going to select from here down to here and cut that into my clipboard.

126
00:09:40,570 --> 00:09:44,140
And then within this if statement, just paste it in.

127
00:09:45,400 --> 00:09:52,180
OK, so if I save that and then refresh the window where I'm not logged in, perfect.

128
00:09:52,180 --> 00:09:56,410
You can see the heart is no longer filled in and that's what we would expect to see.

129
00:09:56,890 --> 00:10:00,790
But it does remain filled in in the window where I am logged in.

130
00:10:01,170 --> 00:10:04,330
Specifically with the user account that did the liking.

131
00:10:04,710 --> 00:10:05,140
Cool.

132
00:10:05,180 --> 00:10:12,390
Now let's move on to the next restriction or piece of custom logic that we want to enforce, which is

133
00:10:12,570 --> 00:10:18,520
we only want each user account to be able to create one like per professor.

134
00:10:18,840 --> 00:10:22,670
So let me show you how I would set that up over in the text editor.

135
00:10:22,860 --> 00:10:30,780
Let's jump in to our like dash route file, which lives in our ANC folder and within our create like

136
00:10:30,780 --> 00:10:36,690
function right below this line where we create our professor variable and write above this line where

137
00:10:36,690 --> 00:10:39,420
we return WP insert post.

138
00:10:40,170 --> 00:10:42,120
Let's set up a new if statement.

139
00:10:42,630 --> 00:10:49,590
So if parentheses curly brackets for the time being, when it comes to the condition, let's just write

140
00:10:49,590 --> 00:10:55,440
a bit of fake code or pseudo code that we can fill in with real P a bit later on.

141
00:10:55,710 --> 00:11:04,770
So let's say if like does not already exist, obviously this is not valid code, but this is just a

142
00:11:04,770 --> 00:11:06,260
note for ourselves.

143
00:11:06,540 --> 00:11:12,660
So if a like for this professor does not already exist, then within this if statement we would create

144
00:11:12,660 --> 00:11:13,810
the new like post.

145
00:11:14,160 --> 00:11:18,180
So just add a comment, create new like post.

146
00:11:18,510 --> 00:11:24,930
But on the other hand, if a like does already exist for this professor, then down here, let's say

147
00:11:25,080 --> 00:11:27,550
else do something different.

148
00:11:27,960 --> 00:11:35,160
So if all else runs, let's cancel the current request and say die and let's pass along a message that

149
00:11:35,160 --> 00:11:37,710
says invalid.

150
00:11:37,830 --> 00:11:43,890
Professor, I'd write because you are trying to like a professor that you've already liked.

151
00:11:44,220 --> 00:11:46,640
OK, next, let's replace this comment.

152
00:11:46,650 --> 00:11:50,220
So this is where we actually want to create the new like post.

153
00:11:50,610 --> 00:11:55,380
So let's just move this code to live right here instead within the IF statement.

154
00:11:55,650 --> 00:12:02,820
So I will select from return down to the two closing parentheses semicolon, cut that into my clipboard.

155
00:12:03,180 --> 00:12:08,490
OK, and then if our condition check here is true, let's remove the comment and paste in our clipboard.

156
00:12:09,000 --> 00:12:09,570
All right.

157
00:12:09,570 --> 00:12:12,690
And now let's actually work on our condition.

158
00:12:13,110 --> 00:12:19,650
Now, believe it or not, you and I have already written code that can determine if a specific user

159
00:12:19,680 --> 00:12:21,880
has liked a specific professor.

160
00:12:22,260 --> 00:12:23,040
So check this out.

161
00:12:23,040 --> 00:12:28,170
Let's jump back into our single dash professor dot file.

162
00:12:28,620 --> 00:12:32,580
And the good news is that we can just recycle this exist query.

163
00:12:32,850 --> 00:12:33,240
Right?

164
00:12:33,240 --> 00:12:39,870
Because if this query finds any results, that means the relevant user has already liked the relevant

165
00:12:39,870 --> 00:12:40,560
professor.

166
00:12:40,830 --> 00:12:45,930
So let's just copy this into our clipboard from the beginning of exist query.

167
00:12:46,940 --> 00:12:49,890
Down to its two closing parentheses semicolon.

168
00:12:50,270 --> 00:12:58,790
Copy that and then back in our, like, dash route file right above our new if statement that still

169
00:12:58,790 --> 00:13:05,480
currently has the pseudocode, right above that if let's add a new line and paste in our clipboard and

170
00:13:05,480 --> 00:13:08,320
we only need to make one adjustment to this query.

171
00:13:08,630 --> 00:13:14,600
So within the meta query, when it comes to the value that we are looking for, for the light Professor

172
00:13:14,600 --> 00:13:21,440
ID field, within this context, we can no longer just say get the current ID instead.

173
00:13:21,440 --> 00:13:22,640
Let's delete that.

174
00:13:22,910 --> 00:13:26,300
And what we are looking for is our professor variable.

175
00:13:26,690 --> 00:13:32,910
Right, because that's where we've stored the professor ID that our JavaScript request has sent along.

176
00:13:33,920 --> 00:13:40,400
So down here within our meta query, let's just say value equals our professor variable.

177
00:13:40,800 --> 00:13:45,920
OK, and now that we have this query in place, we can actually set up our if check.

178
00:13:46,220 --> 00:13:55,700
So let's delete this fake pseudo code and let's say if our exist query and let's look inside it for

179
00:13:55,700 --> 00:14:03,090
a property named found posts and let's say if that equals zero.

180
00:14:03,500 --> 00:14:09,320
So if the current user has not already liked the requested professor, then go ahead and create that

181
00:14:09,320 --> 00:14:11,390
lightpost else.

182
00:14:11,390 --> 00:14:13,730
Otherwise return this error message.

183
00:14:14,060 --> 00:14:16,800
OK, let's go ahead and save this and test it out.

184
00:14:17,120 --> 00:14:23,540
So back on the front end, let me jump to a professor that I have not already liked with this user account.

185
00:14:24,910 --> 00:14:32,740
OK, so if I try to like Dr. Miaows a lot and check my console, cool, so my initial request is successful.

186
00:14:33,190 --> 00:14:39,850
But if I try to click the light box again now in my console, I see this message and if I expand it,

187
00:14:40,750 --> 00:14:42,660
the response is invalid.

188
00:14:42,670 --> 00:14:48,440
Professor, I'd perfect so each user account can only like a professor once.

189
00:14:48,850 --> 00:14:55,370
Now, before we bring this particular video to a close, let's implement one more check within our HP

190
00:14:55,660 --> 00:14:59,860
before we actually go ahead and create a new like post.

191
00:15:00,140 --> 00:15:06,130
Let's first make sure that the I.D. number they're sending over actually belongs to a professor.

192
00:15:06,340 --> 00:15:11,500
And that is not just a bogus made up number that either doesn't exist or that actually belongs to a

193
00:15:11,500 --> 00:15:15,130
blog post or a campus or an event or program.

194
00:15:15,340 --> 00:15:20,500
So to set that up, all we need to do is add a second condition within our IF statement.

195
00:15:20,890 --> 00:15:25,360
So right after our if exist query found post equals zero.

196
00:15:25,720 --> 00:15:35,080
Still within those parentheses, let's just say and get post type and let's try to find the post type

197
00:15:35,080 --> 00:15:38,620
for whatever IDE JavaScript is sending over.

198
00:15:38,860 --> 00:15:44,620
So within the parentheses for gatepost type, just say Professor, that's the name of our IDE variable

199
00:15:45,070 --> 00:15:49,390
and then let's say if that equals professor.

200
00:15:50,320 --> 00:15:50,620
Right.

201
00:15:50,620 --> 00:15:58,480
Because if this equals post or page or campus or if it equals nothing, if it's just a made up ID number,

202
00:15:58,720 --> 00:16:00,550
we don't want to create the like post.

203
00:16:00,550 --> 00:16:05,550
So only if that equals Professor do we want to run our code.

204
00:16:05,890 --> 00:16:11,130
So let's go ahead and save that and then I'll show you how we can test this out on the front end.

205
00:16:11,350 --> 00:16:14,490
So let me visit another professor that I have not liked yet.

206
00:16:15,280 --> 00:16:17,050
So go into math for me.

207
00:16:17,050 --> 00:16:18,190
That's Rogosin.

208
00:16:18,190 --> 00:16:19,930
I haven't liked that professor yet.

209
00:16:20,350 --> 00:16:21,310
And if you right.

210
00:16:21,310 --> 00:16:23,800
Click on the like box to inspect it.

211
00:16:24,190 --> 00:16:30,280
And then for the data attribute named data professor, you can double click on the number and just enter

212
00:16:30,280 --> 00:16:34,210
something totally random and then push enter to confirm that.

213
00:16:34,210 --> 00:16:38,320
OK, and now if I click on the lightbox and check my console.

214
00:16:39,190 --> 00:16:39,700
Perfect.

215
00:16:39,700 --> 00:16:44,530
It looks like that request failed and the response is invalid.

216
00:16:44,530 --> 00:16:46,550
Professor, I'd cool.

217
00:16:46,720 --> 00:16:52,210
So in this video we set things up so that first of all, you need to be logged in to create a like.

218
00:16:52,450 --> 00:16:58,000
And then we also enforced that each user account can only like a professor once and finally that the

219
00:16:58,000 --> 00:17:02,650
ID number that you're sending over actually needs to belong to a professor.

220
00:17:02,920 --> 00:17:09,190
Now, in the next and final part of this lesson, we will update our JavaScript so that when you do

221
00:17:09,190 --> 00:17:17,080
successfully add a like post the lightbox count and heart update in real time on the fly so that you

222
00:17:17,080 --> 00:17:19,330
don't need to manually refresh the page.

223
00:17:19,660 --> 00:17:25,600
And we will also create a function on the server side that allows users to delete or remove a like.

224
00:17:25,990 --> 00:17:28,360
Let's keep things rolling and I will see you then.
