1
00:00:00,360 --> 00:00:01,690
So just a fair warning.

2
00:00:01,710 --> 00:00:07,440
The remainder of this video lesson is now just all of my own personal preference and my own personal

3
00:00:07,440 --> 00:00:08,250
philosophy.

4
00:00:08,490 --> 00:00:12,690
Essentially, I don't want to store the hexadecimal color code.

5
00:00:13,110 --> 00:00:15,240
I want an extra layer of abstraction.

6
00:00:15,330 --> 00:00:16,500
Let me explain what I mean.

7
00:00:17,100 --> 00:00:23,760
So if we go look at the edges for our button, right, we've hardcoded down our save component, BTN

8
00:00:23,760 --> 00:00:24,990
dash, dash blue.

9
00:00:25,200 --> 00:00:30,300
So I only have 60 classes for blue, orange and dark orange.

10
00:00:30,480 --> 00:00:31,050
That's it.

11
00:00:31,230 --> 00:00:34,500
And those are the only classes and colors that I want to use.

12
00:00:35,160 --> 00:00:38,760
In other words, I don't care about the hexadecimal color codes.

13
00:00:39,030 --> 00:00:41,340
The only reason let me scroll up a little bit.

14
00:00:41,760 --> 00:00:48,780
The only reason we've even listed our colors here with these color code values is so the user can visually

15
00:00:48,780 --> 00:00:52,380
see a little circle of what color they're choosing.

16
00:00:52,590 --> 00:00:52,920
Right?

17
00:00:53,130 --> 00:00:58,890
In other words, the only reason these codes even exist in this JavaScript file is just to provide a

18
00:00:58,890 --> 00:01:02,850
preview to the end user, to have something to see and click on.

19
00:01:03,450 --> 00:01:09,030
In terms of the data we're storing and the system that we're going to output, I don't want to rely

20
00:01:09,030 --> 00:01:10,980
on these color code values.

21
00:01:11,430 --> 00:01:13,230
I want an abstraction layer.

22
00:01:13,440 --> 00:01:18,420
So I would want the data in the database to actually say color, name, colon, and then literally a

23
00:01:18,420 --> 00:01:21,450
string of text that says blue or orange.

24
00:01:21,630 --> 00:01:28,470
Or if you wanted to use more abstract names like, you know, primary color or secondary color, that's

25
00:01:28,470 --> 00:01:29,910
the approach I would want to take.

26
00:01:30,120 --> 00:01:36,090
So then it's up to me, you know, let's say a year from now, the fictional University Blue, the design

27
00:01:36,090 --> 00:01:38,820
team decides that it should be a different shade of blue.

28
00:01:39,180 --> 00:01:44,100
Well, in that case, I don't want to have to worry that hexadecimal color codes spread out through

29
00:01:44,100 --> 00:01:45,660
my data like this are outdated.

30
00:01:45,960 --> 00:01:49,080
I would just want to be able to update my CC class.

31
00:01:49,710 --> 00:01:51,720
So let me show you how I would set this up.

32
00:01:51,720 --> 00:01:56,730
And remember, the end goal here is that I want this data to just literally say, you know, a string

33
00:01:56,730 --> 00:01:57,810
of text of blue.

34
00:01:58,500 --> 00:02:03,450
So back in our code, let's begin up at the top in our attributes.

35
00:02:03,870 --> 00:02:08,730
So on color name, let's just go ahead and give it a default value of blue.

36
00:02:09,480 --> 00:02:09,750
Okay.

37
00:02:09,960 --> 00:02:16,050
Next, let's go find the function that we created called handle color change within the body of this

38
00:02:16,050 --> 00:02:16,380
function.

39
00:02:16,380 --> 00:02:18,090
You can even write a comment to ourselves.

40
00:02:18,090 --> 00:02:27,690
We can say from the hex value that the color palette gives us, we need to find its color name.

41
00:02:28,140 --> 00:02:34,080
So in other words, if the palette component gives us this hexadecimal color code, when the user clicks

42
00:02:34,080 --> 00:02:40,110
on it, we need to write a little bit of code that looks in our colors array for that value, and then

43
00:02:40,110 --> 00:02:43,970
we want to return the name that matches that value.

44
00:02:44,460 --> 00:02:46,740
There are multiple ways to do that in JavaScript.

45
00:02:46,740 --> 00:02:49,140
Every array has access to a filter method.

46
00:02:49,140 --> 00:02:50,040
You could use that.

47
00:02:50,340 --> 00:02:56,070
However, WordPress actually has a function specifically for this use case.

48
00:02:56,760 --> 00:02:57,540
So check this out.

49
00:02:57,540 --> 00:03:04,620
Up at the very top on the line where we're importing items from block editor, we can just add a comma.

50
00:03:05,640 --> 00:03:15,780
And there is an official WordPress tool name to get color object by color value get color object by

51
00:03:15,780 --> 00:03:16,420
color value.

52
00:03:16,440 --> 00:03:17,250
Let's go use it.

53
00:03:17,400 --> 00:03:19,140
So down in our function.

54
00:03:20,260 --> 00:03:22,090
Right handle color change.

55
00:03:22,690 --> 00:03:25,450
Right above this line where we say props, stat set attributes.

56
00:03:25,450 --> 00:03:33,490
Let's write a new line and say get color object by color value.

57
00:03:33,760 --> 00:03:34,780
We give it two things.

58
00:03:34,780 --> 00:03:37,870
A acorn would be the first thing we give it is the array of colors.

59
00:03:37,870 --> 00:03:41,620
So our colors, the second thing we give it is the color code.

60
00:03:41,620 --> 00:03:43,120
So color code.

61
00:03:43,810 --> 00:03:48,520
So this function, when we're calling it, it's going to return this object, right?

62
00:03:48,520 --> 00:03:50,740
It's going to see that this is the value we provided.

63
00:03:50,980 --> 00:03:54,190
So it's going to return this entire blue object.

64
00:03:54,550 --> 00:04:00,430
So at the start of this line, let's just de structure things we can say contrast curly brackets to

65
00:04:00,430 --> 00:04:01,960
de structure equals.

66
00:04:02,290 --> 00:04:06,610
And then in the curly brackets we just want to pull out the property of name.

67
00:04:07,030 --> 00:04:10,660
So in other words, this line of code will now give us blue.

68
00:04:10,840 --> 00:04:15,880
Or if the color code you passed into it was something else, it would give us orange or dark orange.

69
00:04:16,450 --> 00:04:16,900
Cool.

70
00:04:16,900 --> 00:04:19,960
So then that's what we want to use on this line when we're setting our attribute.

71
00:04:20,320 --> 00:04:24,520
So instead of color code, this would just be this name variable that we made up.

72
00:04:25,210 --> 00:04:25,510
Cool.

73
00:04:25,510 --> 00:04:29,380
So that's step one to working with the color name instead of the color code value.

74
00:04:29,830 --> 00:04:33,400
Finally, we need to go back down to our color palette component.

75
00:04:33,400 --> 00:04:34,060
Here it is.

76
00:04:34,390 --> 00:04:41,050
And when we're saying value equals, we do indeed need to give this component a color code value.

77
00:04:41,500 --> 00:04:47,200
So we can't say value equals blue, so it doesn't make sense to give it the color name.

78
00:04:47,470 --> 00:04:48,730
So let's hollow this out.

79
00:04:49,000 --> 00:04:50,560
Value equals curly brackets.

80
00:04:50,800 --> 00:04:52,210
Let's make up a variable name.

81
00:04:52,210 --> 00:04:56,410
Let's call it maybe current color value.

82
00:04:56,770 --> 00:04:59,860
Now let's just go create a variable with this matching name.

83
00:04:59,860 --> 00:05:05,830
So back up if you scroll up a little bit, maybe right above our handle color change function, we can

84
00:05:05,830 --> 00:05:06,340
just say.

85
00:05:06,610 --> 00:05:11,110
Konst Current color value equals.

86
00:05:11,650 --> 00:05:17,050
Now we are starting with the color name and we need to retrieve the actual color code.

87
00:05:17,650 --> 00:05:19,900
Now I've looked through the WordPress documentation.

88
00:05:20,080 --> 00:05:22,960
I don't believe they have the opposite of this function.

89
00:05:23,230 --> 00:05:25,900
So we can just get creative and write the code ourselves.

90
00:05:26,140 --> 00:05:32,770
So this should equal and then let's just start working with our array of colors so our colors and we'll

91
00:05:32,770 --> 00:05:34,810
use the array method called filter.

92
00:05:35,230 --> 00:05:36,520
Let's write an arrow function.

93
00:05:36,520 --> 00:05:40,120
So color arrow function, curly brackets.

94
00:05:40,510 --> 00:05:44,290
So filter is going to build a new array in the body of this function.

95
00:05:44,290 --> 00:05:46,450
Here you just return true or false.

96
00:05:46,660 --> 00:05:51,670
So each item in the array that gets looped through, if you say true, it'll be included in the new

97
00:05:51,670 --> 00:05:52,120
array.

98
00:05:52,630 --> 00:05:57,370
So I'm just going to say return and then you know, it would be true or false, but the condition would

99
00:05:57,370 --> 00:06:00,700
be if color dot name.

100
00:06:00,700 --> 00:06:08,410
So the current color we've looped to if it's name, if that equals whatever color name we've stored

101
00:06:08,410 --> 00:06:13,150
in our block attributes or props, dot attributes, dot color name.

102
00:06:13,690 --> 00:06:16,510
So if that's true, include that in the new array.

103
00:06:16,510 --> 00:06:19,030
So now this new array will only have one item in it.

104
00:06:19,690 --> 00:06:25,090
So at the end of this code we can just say square brackets, the first item in the array and then at

105
00:06:25,090 --> 00:06:30,730
the end dot color, right, which will give us the actual color property value.

106
00:06:31,090 --> 00:06:31,420
Cool.

107
00:06:31,420 --> 00:06:35,590
So when you have a fresh, empty block, we've said that the default color should be blue.

108
00:06:35,770 --> 00:06:41,320
And just from that string of text now our color palette and all of our code will realize that this is

109
00:06:41,320 --> 00:06:43,000
the color that should be selected.

110
00:06:43,660 --> 00:06:44,500
Let's give it a test.

111
00:06:44,500 --> 00:06:49,390
So if we save that and we go refresh, we'll probably get an error.

112
00:06:49,390 --> 00:06:49,660
Yep.

113
00:06:49,990 --> 00:06:54,100
That's just because what was already in the database is a hexadecimal color code.

114
00:06:54,460 --> 00:06:59,980
So obviously we can't look it up based on the color name because we don't have a color name right here.

115
00:07:00,400 --> 00:07:05,190
So to really test this out with our new code in mind, just delete this block instance.

116
00:07:05,290 --> 00:07:08,830
So remove generic button and insert a fresh copy.

117
00:07:08,830 --> 00:07:16,510
So generic button, say learn more, offset the color to light orange, I'll click save.

118
00:07:17,170 --> 00:07:20,230
I can refresh to prove that it's remembering that choice.

119
00:07:21,570 --> 00:07:22,560
If I click on the button.

120
00:07:23,010 --> 00:07:23,550
Perfect.

121
00:07:23,700 --> 00:07:25,710
It remembered that that's the selected choice.

122
00:07:25,710 --> 00:07:27,660
And now if we go back to our database.

123
00:07:28,080 --> 00:07:33,060
So if we just go back to our post table, go to the last item, click on the last item.

124
00:07:34,470 --> 00:07:35,900
Perfect generic button.

125
00:07:35,910 --> 00:07:40,530
The color name is actually just a string of text that says Orange.

126
00:07:41,010 --> 00:07:41,700
Beautiful.

127
00:07:41,910 --> 00:07:46,200
So now we can just go use that in our success classes that we're outputting.

128
00:07:47,190 --> 00:07:48,540
Let me show you what I have in mind.

129
00:07:48,960 --> 00:07:54,810
Let's start with our edit component so that as you're clicking these choices, this button is actually

130
00:07:54,810 --> 00:07:56,010
changing its color.

131
00:07:56,520 --> 00:08:02,550
So in our edit component X, we are looking for the rich text component.

132
00:08:02,970 --> 00:08:06,510
We already have class name and the size is dynamic.

133
00:08:06,690 --> 00:08:10,420
Now we just want to make the color part dynamic to save a bit of typing.

134
00:08:10,440 --> 00:08:14,490
I'm just going to copy this dollar sign prop stock attribute size.

135
00:08:14,490 --> 00:08:15,300
Just copy that.

136
00:08:15,540 --> 00:08:17,430
Hollow out the hardcoded blue.

137
00:08:17,880 --> 00:08:22,050
Paste that in and just change dot size to dot color name.

138
00:08:23,040 --> 00:08:23,340
Cool.

139
00:08:23,340 --> 00:08:26,160
And then just go do the same thing as well in our save component.

140
00:08:26,160 --> 00:08:28,950
So save component we already have the class name.

141
00:08:29,070 --> 00:08:30,390
The size part is dynamic.

142
00:08:30,390 --> 00:08:34,500
So just again, get rid of the hardcoded blue paste in your clipboard.

143
00:08:34,500 --> 00:08:37,440
Change dot size to dark color name.

144
00:08:38,230 --> 00:08:39,710
Let's give that a save and test it out.

145
00:08:39,720 --> 00:08:44,760
Now, I have to warn you, when we refresh, we're going to have to click the, you know, update block

146
00:08:44,760 --> 00:08:46,800
because we modified the save value.

147
00:08:46,830 --> 00:08:48,510
So attempt block recovery.

148
00:08:49,850 --> 00:08:56,210
But now as I'm clicking these different colors, notice our button is actually getting updated.

149
00:08:57,050 --> 00:09:02,690
More importantly, if I choose this dark orange click save and we actually go refresh the front end,

150
00:09:03,440 --> 00:09:04,640
whoops, it's still blue.

151
00:09:04,670 --> 00:09:06,920
If you look at your inspector, you can see that.

152
00:09:06,920 --> 00:09:11,180
Oddly enough, it has beaten dark orange and beaten blue.

153
00:09:11,630 --> 00:09:18,350
I think this is just a weird side effect of us modifying the save value while we've already had an instance

154
00:09:18,350 --> 00:09:19,520
of the block inserted.

155
00:09:19,790 --> 00:09:25,280
For example, if you click on to the block and click Advanced here, you can see WordPress for whatever

156
00:09:25,280 --> 00:09:29,600
reason has tried to manually add BTN Dash Dash blue.

157
00:09:29,960 --> 00:09:35,660
So now that our JavaScript save output code is actually complete right now that we've actually set this

158
00:09:35,660 --> 00:09:38,030
up so that this part is dynamic.

159
00:09:38,360 --> 00:09:40,220
Let's give ourselves a fresh slate.

160
00:09:40,550 --> 00:09:47,280
Delete this instance of the block and insert a totally fresh new copy now that our JavaScript is finalized.

161
00:09:47,300 --> 00:09:50,350
So generic button learn more.

162
00:09:50,360 --> 00:09:52,010
Let's tell it to be light orange.

163
00:09:52,490 --> 00:09:53,360
Click Save.

164
00:09:53,570 --> 00:09:55,370
Now if we refresh the front end.

165
00:09:55,730 --> 00:09:56,390
Perfect.

166
00:09:57,020 --> 00:10:02,810
So that example we just ran into where you have to click that awkward attempt block recovery button.

167
00:10:03,530 --> 00:10:08,990
As you can see throughout this chapter, I'm not a fan of that behavior in any way, shape or form.

168
00:10:09,560 --> 00:10:10,130
Don't worry.

169
00:10:10,130 --> 00:10:16,430
We are getting very, very close to showing you my preferred render callback approach, and that can

170
00:10:16,430 --> 00:10:18,770
solve all of those awkward issues.

171
00:10:19,340 --> 00:10:24,440
The reason I didn't build this in chapter entirely using that personal approach of mine is because I

172
00:10:24,440 --> 00:10:26,840
really don't want to force that opinion on you.

173
00:10:27,290 --> 00:10:30,170
Anyways, back to the task at hand of our color picker.

174
00:10:30,380 --> 00:10:32,420
Let's finish things up in this lesson.

175
00:10:32,840 --> 00:10:37,570
So, number one, I want to show you how you can restrict a few of these custom options here.

176
00:10:37,580 --> 00:10:40,730
So I don't want the user to be able to click clear.

177
00:10:40,970 --> 00:10:49,010
And I absolutely 100% do not want the user to be able to click on the color preview here and provide

178
00:10:49,010 --> 00:10:50,630
a totally custom color value.

179
00:10:51,110 --> 00:10:56,900
In fact, being able to disable the custom color chooser here is the entire reason why I built this

180
00:10:56,900 --> 00:11:02,360
custom color approach instead of just using a theme palette from themed JSON.

181
00:11:02,840 --> 00:11:09,260
From my experience, any value you provide in themed JSON can be overridden by the end user, and I

182
00:11:09,260 --> 00:11:15,200
don't like that if I'm using WordPress as a content management system, I only want to give the user

183
00:11:15,440 --> 00:11:21,110
a few choices that they can pick from a few curated and wisely chosen choices.

184
00:11:21,530 --> 00:11:26,420
So to finish things off, to disable this ability to pick a totally custom color.

185
00:11:26,810 --> 00:11:31,970
All we need to do in our edit component is find the color palette.

186
00:11:32,720 --> 00:11:35,480
Here it is and just give it a few additional props.

187
00:11:36,200 --> 00:11:41,690
So number one, let's say disable custom colors equals curly brackets.

188
00:11:41,690 --> 00:11:42,110
True.

189
00:11:42,110 --> 00:11:43,250
We want to enable that.

190
00:11:43,250 --> 00:11:46,730
And then let's say colorable equals curly brackets.

191
00:11:46,910 --> 00:11:47,630
False.

192
00:11:48,230 --> 00:11:50,930
If we give that a save and we refresh.

193
00:11:53,030 --> 00:11:54,290
Now when we click on the button.

194
00:11:54,440 --> 00:11:55,050
Perfect.

195
00:11:55,190 --> 00:11:59,120
The end user doesn't have any ability to choose a custom value.

196
00:11:59,300 --> 00:12:05,600
They literally can just pick between our branded, highly curated selection of colors.

197
00:12:06,230 --> 00:12:07,760
This is exactly what I want.

198
00:12:08,660 --> 00:12:09,050
Cool.

199
00:12:09,170 --> 00:12:11,870
Now, one last detail before we bring this lesson to a close.

200
00:12:12,080 --> 00:12:17,150
You might have been screaming at the screen saying, Brad, do we really want a hard code, our list

201
00:12:17,150 --> 00:12:19,490
of colors in one single file like this?

202
00:12:19,820 --> 00:12:24,830
What if you want to use this array of colors across ten different custom blocks?

203
00:12:25,460 --> 00:12:26,300
Well, that's easy.

204
00:12:26,310 --> 00:12:32,360
I would just split this array into a separate file and then just import it anywhere I need to use it.

205
00:12:32,930 --> 00:12:38,540
So let's do that together really quick in our themes in C or includes folder or really you could do

206
00:12:38,540 --> 00:12:39,470
this anywhere.

207
00:12:39,500 --> 00:12:40,850
I just think this would make sense.

208
00:12:41,240 --> 00:12:45,860
In the includes folder, you could create a new file and maybe name it colors.

209
00:12:46,160 --> 00:12:48,620
Or better yet, let's call it our colors.

210
00:12:48,620 --> 00:12:49,610
Dot JS.

211
00:12:50,480 --> 00:12:50,790
Okay.

212
00:12:51,080 --> 00:12:56,810
In that brand new empty file, just cut and paste our constant variable of our colors.

213
00:12:56,810 --> 00:12:57,020
Right.

214
00:12:57,020 --> 00:12:57,860
Our array.

215
00:12:58,400 --> 00:13:02,000
Just copy that pasted into here at the very bottom.

216
00:13:02,000 --> 00:13:04,360
Say export default.

217
00:13:04,370 --> 00:13:07,100
Our colors give that a save.

218
00:13:07,340 --> 00:13:11,240
And now back in the file we've been working on, you can delete that array of colors.

219
00:13:13,010 --> 00:13:13,350
Cool.

220
00:13:13,400 --> 00:13:21,170
And then up at the very top you can just say import our colors from quotes, dot, dot, slash to go

221
00:13:21,440 --> 00:13:28,400
up out of the our blocks folder and then dig into the iron folder and grab the file called Our Colors.

222
00:13:28,880 --> 00:13:32,000
If you wanted to, you could say yes, but you don't need to.

223
00:13:32,660 --> 00:13:35,270
You can give that file to save refresh.

224
00:13:37,870 --> 00:13:41,320
And as you can see, everything still works perfectly.

225
00:13:42,560 --> 00:13:44,590
That's going to bring this lesson to a close.

226
00:13:44,870 --> 00:13:49,040
In our very next lesson, we're going to work on our banner block.

227
00:13:49,050 --> 00:13:54,110
We're going to revisit the banner block and set things up so that you can actually upload and choose

228
00:13:54,350 --> 00:13:56,240
a different background image.

229
00:13:56,810 --> 00:14:02,720
We're also going to learn about my preferred way of handling things with PHP render callbacks.

230
00:14:02,990 --> 00:14:04,520
I think there's going to be a ton of fun.

231
00:14:04,730 --> 00:14:06,980
I think it should be an aha moment.

232
00:14:07,340 --> 00:14:09,680
So let's keep things rolling and I'll see you then.
