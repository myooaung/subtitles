WEBVTT
1
00:00:02.320 --> 00:00:03.280
Hello, everyone.

2
00:00:03.640 --> 00:00:10.360
In this lesson, we're going to learn more about what our blog output's or saves, let's jump right

3
00:00:10.360 --> 00:00:11.260
into the action.

4
00:00:11.410 --> 00:00:18.340
So in the last couple of lessons, we've seen that if you change the HTML structure for the save function

5
00:00:18.340 --> 00:00:19.420
for our block type.

6
00:00:19.810 --> 00:00:20.150
Right.

7
00:00:20.170 --> 00:00:25.810
So if we go down to our save function and if we change the HTML, that gets output.

8
00:00:26.320 --> 00:00:32.740
So if I say today the sky is completely blank, if I save that and then refresh, we've seen that that

9
00:00:32.740 --> 00:00:33.840
causes a problem.

10
00:00:34.330 --> 00:00:34.550
Right.

11
00:00:34.600 --> 00:00:37.460
And then you need to delete the block and then insert a fresh copy.

12
00:00:37.480 --> 00:00:45.610
So in this lesson, I want to explain why this is happening and how we can adjust our code so that we

13
00:00:45.610 --> 00:00:48.420
can make changes without this happening.

14
00:00:48.850 --> 00:00:56.410
However, even once we do that, we'll see that this approach of just saving a static string of text

15
00:00:56.410 --> 00:00:58.100
as the output for our block type.

16
00:00:58.360 --> 00:00:59.140
We'll see why.

17
00:00:59.140 --> 00:01:01.310
Perhaps this isn't what we want at all.

18
00:01:01.660 --> 00:01:07.650
So towards the end of this lesson, we'll learn how to make the output of our block truly dynamic.

19
00:01:08.470 --> 00:01:14.710
First, though, to start off the lesson, let's talk about why we are seeing this error message.

20
00:01:15.190 --> 00:01:19.300
To explain this, let's look at the database entry for this post.

21
00:01:19.840 --> 00:01:23.320
So here is that instance of our block type in the database.

22
00:01:23.890 --> 00:01:30.940
And remember, towards the end of our last lesson, we learned that if you let the saved string of text

23
00:01:30.940 --> 00:01:37.540
act as your source of truth, then WordPress doesn't even need to save your attributes in a comment

24
00:01:37.540 --> 00:01:38.260
like this.

25
00:01:38.830 --> 00:01:45.040
Well, even though we aren't using that approach and we do have our attributes in the comment, WordPress

26
00:01:45.040 --> 00:01:53.590
wants to keep that option open to us, meaning it needs to be able to trust the saved text because remember,

27
00:01:53.590 --> 00:02:00.940
if we're using the source and selector properties to extract the values out of this string of text,

28
00:02:01.360 --> 00:02:04.630
well, WordPress needs to be able to trust this text.

29
00:02:04.630 --> 00:02:11.170
And if we're changing the structure of this, then there's no guarantee that your selector is going

30
00:02:11.170 --> 00:02:13.210
to select the same value.

31
00:02:13.780 --> 00:02:15.700
Now, there is a way around this problem.

32
00:02:15.850 --> 00:02:22.390
It is possible to change your HTML structure and then have WordPress figure things out on its own.

33
00:02:22.930 --> 00:02:25.090
Let me show you how this would work with our code.

34
00:02:25.360 --> 00:02:29.560
But first, before we get into that, let's make sure we're all on the same page.

35
00:02:29.830 --> 00:02:34.580
Let's make sure we're working with a block that hasn't already ran into an error.

36
00:02:34.840 --> 00:02:38.350
So what I mean by that is I'm going to go into the edit screen for this post.

37
00:02:39.040 --> 00:02:39.910
Let's delete that.

38
00:02:39.910 --> 00:02:43.570
And I'm just going to make sure I have a new instance that is working's.

39
00:02:43.570 --> 00:02:46.240
Also a blue green and save it.

40
00:02:46.960 --> 00:02:55.420
OK, so now from this example, how would we be able to change the saved HTML structure without running

41
00:02:55.420 --> 00:02:56.300
into that error?

42
00:02:56.740 --> 00:03:03.610
Well, all we need to do is provide WordPress sort of a history of how this is going to change.

43
00:03:03.850 --> 00:03:05.920
What I mean by that is up at the top.

44
00:03:06.280 --> 00:03:11.380
Well, it doesn't even need to be up at the top, but we just want to provide another top level property.

45
00:03:11.650 --> 00:03:19.330
So just like we have title and icon and category and attributes, edit and save, we want a new top

46
00:03:19.330 --> 00:03:25.350
level property called deprecated so we could, for example, add it at the very bottom.

47
00:03:25.360 --> 00:03:30.370
So after our save function, which is the last property, got a comma here, let's add a new top level

48
00:03:30.370 --> 00:03:32.950
property, call it deprecated.

49
00:03:32.950 --> 00:03:39.850
It needs to be this exact name, Colon, and then you give it an array and what do you give it an array

50
00:03:39.850 --> 00:03:42.250
of well, objects.

51
00:03:42.250 --> 00:03:44.500
So for now, let's just give it one object.

52
00:03:44.860 --> 00:03:47.530
You can drop down inside this object.

53
00:03:47.680 --> 00:03:54.420
You just need to give it the attributes and save values and functions from the previous version.

54
00:03:54.820 --> 00:04:00.490
So, for example, imagine I want to remove the word completely that change alone would create the error.

55
00:04:00.670 --> 00:04:05.430
And imagine I also want to change it from a paragraph to maybe a heading level three.

56
00:04:05.890 --> 00:04:11.620
So before we make any of those changes, we want to provide sort of a backup copy of the current working

57
00:04:11.620 --> 00:04:14.200
version in our deprecated object.

58
00:04:14.860 --> 00:04:17.880
So just take the entire save property and its value here.

59
00:04:18.100 --> 00:04:19.940
So just write up before the comma.

60
00:04:20.290 --> 00:04:24.700
Copy that in your clipboard and paste it into your deprecated object.

61
00:04:25.270 --> 00:04:31.780
OK, and then in the deprecated object, we also want to give it the attributes that we have now to

62
00:04:31.780 --> 00:04:35.710
avoid duplicating and having the attributes spelled out in multiple places.

63
00:04:35.950 --> 00:04:41.710
You could create a variable up at the very top of this file, call it attributes and have it equal this

64
00:04:41.710 --> 00:04:43.540
object and then just reference that.

65
00:04:43.540 --> 00:04:45.220
But for a quick solution.

66
00:04:45.220 --> 00:04:47.170
We don't care if there's a little bit of duplicate code.

67
00:04:47.170 --> 00:04:48.280
This is just an example.

68
00:04:48.280 --> 00:04:52.090
So you can just select the property attributes, colon, the value.

69
00:04:52.090 --> 00:04:53.140
We don't need the comma.

70
00:04:53.560 --> 00:04:59.770
Just copy that into your clipboard down in the deprecated object maybe right before save.

71
00:04:59.770 --> 00:05:01.240
Let's paste that in.

72
00:05:01.790 --> 00:05:04.220
And then we actually did want a comma after that.

73
00:05:05.030 --> 00:05:07.090
Let me fix the indentation here, but.

74
00:05:09.550 --> 00:05:15.730
OK, so now that we have this sort of backed up or deprecated copy of the way things were and WordPress

75
00:05:15.730 --> 00:05:21.860
can compare against this, we are free to make changes to the actual save a version of our function.

76
00:05:22.480 --> 00:05:27.370
So now I can remove the word completely and I could change this from a paragraph to a heading level

77
00:05:27.370 --> 00:05:27.970
three.

78
00:05:29.280 --> 00:05:35.080
OK, and if we go ahead and save this and then refresh in the admin edit screen.

79
00:05:36.410 --> 00:05:43.970
Perfect, we did not receive any sort of error message and we can even change these values and if we

80
00:05:43.970 --> 00:05:49.550
save or update our post and go view it on the front end notice, cool.

81
00:05:49.670 --> 00:05:50.570
It's not a paragraph.

82
00:05:50.570 --> 00:05:51.800
It's a heading level three.

83
00:05:51.980 --> 00:05:53.810
The word completely is missing.

84
00:05:54.050 --> 00:05:56.680
Perfect, because practice makes perfect.

85
00:05:56.690 --> 00:06:03.770
Let's try having another new version, which will really illustrate why we had to give this an array.

86
00:06:04.760 --> 00:06:07.370
Right when we said deprecated is an array of objects.

87
00:06:07.740 --> 00:06:10.220
Well, you could just have another object in there.

88
00:06:10.220 --> 00:06:14.630
So before that first one, curly brackets for an object, comma, before the new one.

89
00:06:14.870 --> 00:06:18.300
Inside this first one, you could just do the exact same thing.

90
00:06:18.980 --> 00:06:24.320
So if we wanted to change this again, you would just take the old copy of it and put it in this deprecated

91
00:06:24.320 --> 00:06:28.010
object so you would just grab the same function pasted in there.

92
00:06:28.010 --> 00:06:29.900
You would also grab your attributes.

93
00:06:30.980 --> 00:06:34.370
Copy that in the newest deprecated copy right above that.

94
00:06:34.370 --> 00:06:35.370
Just paste it in.

95
00:06:35.390 --> 00:06:36.590
Be sure to have a comma.

96
00:06:37.010 --> 00:06:39.980
Let me fix the indentation a bit, OK?

97
00:06:40.000 --> 00:06:48.050
Now imagine if I wanted to say today the sky is absolutely blank and maybe I want this to be a heading

98
00:06:48.050 --> 00:06:49.160
level six.

99
00:06:50.840 --> 00:06:53.900
Give that a save back in the admin edit screen.

100
00:06:56.170 --> 00:07:00.850
We can refresh as many times as we want to, there's no problem, there's no error, I can set this

101
00:07:00.850 --> 00:07:03.280
back to blue and green.

102
00:07:03.640 --> 00:07:06.160
We can save it if we view it on the front end.

103
00:07:06.550 --> 00:07:09.250
Perfect is an H six with the word.

104
00:07:09.250 --> 00:07:10.090
Absolutely.

105
00:07:10.340 --> 00:07:11.050
This is great.

106
00:07:11.050 --> 00:07:13.660
So we can make changes to the HTML structure.

107
00:07:14.110 --> 00:07:22.870
However, even with this in place, there's still one huge reason why I personally never create block

108
00:07:22.870 --> 00:07:23.920
types like this.

109
00:07:24.550 --> 00:07:30.730
When I say block types like this, what I mean is the official WordPress documentation considers this

110
00:07:30.730 --> 00:07:34.390
type of a save function that returns just a static string of text.

111
00:07:34.630 --> 00:07:39.370
It considers that to be sort of the default or standard way that a block type should be.

112
00:07:39.790 --> 00:07:45.610
And while, yes, the documentation does provide an alternative that we're going to learn about in a

113
00:07:45.610 --> 00:07:51.940
minute or two, the fact remains that they consider this sort of the standard de facto way that a block

114
00:07:51.940 --> 00:07:52.570
should work.

115
00:07:52.900 --> 00:07:56.820
And in my personal opinion, this is borderline useless.

116
00:07:57.220 --> 00:07:58.450
Let me explain why.

117
00:07:58.810 --> 00:08:04.600
So, yes, with the power of the deprecated property, we can freely make changes to the HTML structure.

118
00:08:04.990 --> 00:08:12.790
However, we still need to actively open the post in the admin edit screen and then actually receive

119
00:08:12.790 --> 00:08:13.870
or update it.

120
00:08:14.440 --> 00:08:20.530
What I mean is just creating a new version of our JavaScript file, just that action of us changing

121
00:08:20.530 --> 00:08:27.490
that doesn't do anything in order for our content to actually get updated, someone needs to go edit

122
00:08:27.490 --> 00:08:29.260
that post and receive it.

123
00:08:29.710 --> 00:08:35.710
And while that might not seem like a problem, hypothetically in the real world, it is because in the

124
00:08:35.710 --> 00:08:40.600
real world you might have hundreds of posts or thousands of posts.

125
00:08:40.900 --> 00:08:48.400
And if you've used a blog type on all thousands of your posts, no one wants to have to manually receive

126
00:08:48.400 --> 00:08:50.650
and update those posts in the editor.

127
00:08:51.070 --> 00:08:54.910
So with a few exceptions, I do not like this type of a block.

128
00:08:55.480 --> 00:09:02.980
The exceptions would be if maybe you had a really simple block type and you had near 100 percent certainty

129
00:09:03.160 --> 00:09:08.980
that you would never need to change its HTML whatsoever, then this approach would be OK.

130
00:09:09.280 --> 00:09:14.980
Or if your website is never going to have more than 10 or 20 posts and you wouldn't care if you had

131
00:09:14.980 --> 00:09:20.020
to manually receive a post, then again, this approach could work for you.

132
00:09:20.500 --> 00:09:27.760
But personally, the big reason I use WordPress in the first place is because it makes it easy to automatically

133
00:09:27.760 --> 00:09:33.900
and programmatically manage huge amounts of content, write hundreds or thousands of posts.

134
00:09:34.390 --> 00:09:42.220
So having said all of that, I am not a big fan at all of this type of a block where what you're outputting

135
00:09:42.220 --> 00:09:47.160
or saving is just a static string of text that's going to get saved into the database.

136
00:09:47.530 --> 00:09:53.290
I only showed this to you because, again, I don't want to be totally dogmatic and force all of my

137
00:09:53.290 --> 00:09:58.870
opinions on you without at least first showing you sort of the standard way that WordPress works.

138
00:09:59.260 --> 00:10:05.140
But at this point, now that we've covered this, I do want to show you my preferred way of creating

139
00:10:05.140 --> 00:10:06.010
block types.

140
00:10:06.250 --> 00:10:08.740
It's something called a dynamic block.

141
00:10:08.950 --> 00:10:17.850
And really the only difference is our save function is simply going to return null or basically nothing.

142
00:10:18.430 --> 00:10:19.280
So do this with me.

143
00:10:19.280 --> 00:10:23.680
Your save property should just be a function that returns null.

144
00:10:24.220 --> 00:10:29.230
And what we're doing is removing the responsibility from JavaScript to HTTP.

145
00:10:29.830 --> 00:10:35.050
This means we don't have to save some static text into the database.

146
00:10:35.470 --> 00:10:44.860
We can let P determine this value on the fly and this will open up the door to truly powerful and flexible

147
00:10:44.860 --> 00:10:52.300
block types where even if you've used them in 10000 posts, you're still free to change them and they

148
00:10:52.300 --> 00:10:54.340
will all be updated immediately.

149
00:10:54.940 --> 00:11:01.420
Now, before we jump into our file, we no longer need this deprecated property, right?

150
00:11:01.420 --> 00:11:06.760
If we're transferring the responsibility of the output to be, then our JavaScript definitely doesn't

151
00:11:06.760 --> 00:11:10.240
need this big deprecated object or array of objects.

152
00:11:10.240 --> 00:11:11.710
So let's get rid of deprecated.

153
00:11:12.490 --> 00:11:13.750
Let's save that file.

154
00:11:14.140 --> 00:11:16.330
And our next step, we scroll up to the top.

155
00:11:16.540 --> 00:11:22.690
Remember how we registered this block type with JavaScript, with this namespace and this exact name?

156
00:11:23.440 --> 00:11:30.310
Well, now we just want to go into our P and register a block type with this exact same matching name

157
00:11:30.730 --> 00:11:35.710
and just give it a render function that's responsible for the output.

158
00:11:36.610 --> 00:11:45.550
So in our plugin folder, let's jump into our index file and let's make a few adjustments so we know.
