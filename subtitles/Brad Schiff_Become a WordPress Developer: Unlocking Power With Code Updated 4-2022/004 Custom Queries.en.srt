1
00:00:01,280 --> 00:00:02,300
Hello, everyone.

2
00:00:02,600 --> 00:00:08,190
In this lesson, we will answer the question, what is a custom query?

3
00:00:08,810 --> 00:00:13,450
Now, I think the best way to answer that question is to begin with its opposite first.

4
00:00:13,820 --> 00:00:19,100
So what is a normal WordPress query or what is a default query?

5
00:00:19,460 --> 00:00:27,080
Well, so far in the course, you and I have not had to manually query any content or data ourselves.

6
00:00:27,440 --> 00:00:34,550
WordPress automatically queries the appropriate content for us based on the particular URL that we are

7
00:00:34,550 --> 00:00:35,060
visiting.

8
00:00:35,450 --> 00:00:41,930
So, for example, up in the header, if I click on the about US page, WordPress will look at that

9
00:00:41,930 --> 00:00:50,210
you url and see the about US slug and then WordPress knows to only query the database for that one page

10
00:00:50,210 --> 00:00:54,360
named about us, things like the title and the content.

11
00:00:54,920 --> 00:00:58,870
Let me show you another example of a standard or default query.

12
00:00:59,180 --> 00:01:05,780
So up in the address bar, if I visit slash blog, remember in the WordPress settings we designated

13
00:01:05,780 --> 00:01:09,320
this page named blog to be our posts page.

14
00:01:09,650 --> 00:01:15,520
So WordPress knows to query the most recent 10 posts when we visit this URL.

15
00:01:15,830 --> 00:01:16,970
So you get the idea.

16
00:01:17,150 --> 00:01:23,720
So far in the course we've been able to rely on the default queries that WordPress makes for us automatically

17
00:01:23,960 --> 00:01:25,520
based on the current U.S. URL.

18
00:01:25,760 --> 00:01:27,620
So back to the question of the hour.

19
00:01:27,920 --> 00:01:29,790
What is a custom query?

20
00:01:30,140 --> 00:01:36,800
Well, a custom query is you and I saying, hey, WordPress, I don't care what you URL we are currently

21
00:01:36,800 --> 00:01:37,130
on.

22
00:01:37,430 --> 00:01:44,330
I'm going to tell you the exact content that I want to query, meaning custom queries allow us to load

23
00:01:44,510 --> 00:01:47,390
whatever we want, wherever we want.

24
00:01:47,690 --> 00:01:50,850
And this is where WordPress starts to get truly powerful.

25
00:01:51,200 --> 00:01:56,920
So right now, let's give ourselves a goal and then use custom queries to achieve that goal.

26
00:01:57,230 --> 00:01:59,990
So let's jump back to our Web site's homepage.

27
00:02:00,260 --> 00:02:02,900
I can click this logo in the top left to go there.

28
00:02:03,470 --> 00:02:04,060
All right.

29
00:02:04,070 --> 00:02:11,320
And in this beige column, we are going to need to load in the two most recent blog posts at this point.

30
00:02:11,330 --> 00:02:14,120
Let's jump into our text editor and make it happen.

31
00:02:14,430 --> 00:02:21,980
So within our theme folder, remember that our home page is no longer powered by indexed PHP, but instead

32
00:02:22,220 --> 00:02:24,580
front page dot p.

33
00:02:25,280 --> 00:02:31,040
So go ahead and open up front page and then let's just scroll down a bit until we see a headline that

34
00:02:31,040 --> 00:02:33,500
reads from our blogs.

35
00:02:38,630 --> 00:02:44,450
All right, here I see a heading level two that reads from our blogs and remember, the front end is

36
00:02:44,450 --> 00:02:46,030
showing two blog posts.

37
00:02:46,040 --> 00:02:47,780
So one, two.

38
00:02:48,560 --> 00:02:54,680
And if we look in the code, this div with a class of events summary that begins here and ends here.

39
00:02:54,860 --> 00:02:56,300
That's the first post.

40
00:02:56,540 --> 00:03:00,740
And then right below it is another div with that same class event summary.

41
00:03:01,070 --> 00:03:08,330
So ultimately what we want to do is hollow out all of this hard coded HTML and instead create a while

42
00:03:08,330 --> 00:03:13,840
loop that loops through the blog posts and uses this HTML structure as a template.

43
00:03:14,090 --> 00:03:15,410
So that's the ultimate goal.

44
00:03:15,530 --> 00:03:22,370
But before we get there, let's scroll back up to that heading level two that reads from our blogs and

45
00:03:22,370 --> 00:03:23,780
right below this line.

46
00:03:23,780 --> 00:03:28,670
Let's just add a little bit of code that says Hello, world testing, one, two, three.

47
00:03:29,270 --> 00:03:33,800
OK, so if I say that here we can see that text message.

48
00:03:34,040 --> 00:03:39,800
And before we worry about pulling in dynamic data into this exact template that we see here, let's

49
00:03:39,800 --> 00:03:45,040
just write a few practice while loops and custom queries up here where this custom messages.

50
00:03:45,260 --> 00:03:50,330
So back in the text editor instead of this hello world testing, one, two, three line.

51
00:03:50,630 --> 00:03:52,700
Let's drop in to P.

52
00:03:53,030 --> 00:03:58,830
And first, let's see what happens if we create a while loop without running our own custom query.

53
00:03:59,030 --> 00:03:59,390
Right.

54
00:03:59,390 --> 00:04:05,360
Let's see what WordPress automatically queries for us by default so I could drop down to a new line

55
00:04:05,360 --> 00:04:08,000
in between the opening and closing tags.

56
00:04:08,000 --> 00:04:11,540
You don't have to, but let's just write out a while loop.

57
00:04:11,540 --> 00:04:18,920
So while parentheses curly brackets within the parentheses in the condition for the while loop, this

58
00:04:18,920 --> 00:04:21,470
is where we say how many times it should repeat itself.

59
00:04:21,860 --> 00:04:25,760
So we just say as long as you still have posts.

60
00:04:26,420 --> 00:04:31,730
OK, so as long as this function returns true, our while loop will continue looping until all of the

61
00:04:31,730 --> 00:04:33,620
blog posts have been accounted for.

62
00:04:33,780 --> 00:04:39,470
Now within our curly brackets, the first thing we always want to do, each pass through the loop is

63
00:04:39,470 --> 00:04:44,990
called the function the post because that gets all of the appropriate data ready.

64
00:04:45,290 --> 00:04:50,990
Now, at this point, we are free to actually do something with the post, so I want to output a bit

65
00:04:50,990 --> 00:04:52,220
of HTML.

66
00:04:52,490 --> 00:04:58,490
So why don't I drop out of P on this line and then on the ending curly bracket line, we can go back

67
00:04:58,490 --> 00:05:03,280
into P, so then on this line in between we can write HTML.

68
00:05:03,920 --> 00:05:11,840
So let's just output a list item just as a test and within it let's output the title of whatever blog,

69
00:05:11,840 --> 00:05:16,220
post or page is being queried so we can just say the title.

70
00:05:17,120 --> 00:05:17,540
All right.

71
00:05:17,540 --> 00:05:24,470
Now if I save that and refresh the home page, we only see one list item and it reads home.

72
00:05:24,890 --> 00:05:28,360
And that's because the post or page associated with this U.

73
00:05:28,400 --> 00:05:33,920
URL, the root of our domain is a page that just happens to have the title of home.

74
00:05:34,160 --> 00:05:39,260
So that's the only thing that WordPress is going to query for by default on this homepage.

75
00:05:39,260 --> 00:05:43,100
You URL if you're wondering why that's the case, let me refresh your memory.

76
00:05:43,250 --> 00:05:49,580
If we jump into the WordPress admin and hover over settings towards the bottom of the sidebar and then

77
00:05:49,580 --> 00:05:56,450
we can click on the reading option, remember that several lessons ago, we customize this option front

78
00:05:56,450 --> 00:06:00,500
page displays and then we set it to a static page.

79
00:06:01,010 --> 00:06:06,050
So front page is your home page and you can set it to any of your WordPress pages.

80
00:06:06,440 --> 00:06:09,950
And it just so happens that we set it to a page named Home.

81
00:06:10,370 --> 00:06:14,840
And on a similar note, we set our posts page to be a page named blog.

82
00:06:15,110 --> 00:06:21,050
So that's why when we visit blog, WordPress automatically queries the most recent blog posts.

83
00:06:21,230 --> 00:06:28,040
And when we visit the home page, WordPress is only querying this one single page in order to make it

84
00:06:28,040 --> 00:06:33,380
super clear what's going on, we could actually go ahead and edit the title of that page.

85
00:06:33,800 --> 00:06:40,340
So, for example, click on pages in the sidebar and then find the page that has a name of home and

86
00:06:40,340 --> 00:06:41,540
click on it to edit it.

87
00:06:42,020 --> 00:06:45,260
And we can change the title from home to testing.

88
00:06:45,260 --> 00:06:46,190
One, two, three.

89
00:06:46,670 --> 00:06:52,670
And if I update that and then refresh the front end of the homepage, we see that reflected.

90
00:06:52,950 --> 00:06:59,330
OK, so if that's the only page that WordPress is going to query by default on the home page, we obviously

91
00:06:59,330 --> 00:07:04,940
need to take matters into our own hands and manually query the content that we want.

92
00:07:05,090 --> 00:07:05,450
Right.

93
00:07:05,450 --> 00:07:08,150
We want the two most recent blog posts.

94
00:07:08,480 --> 00:07:12,800
So let's jump back to the text editor and create our first custom query.

95
00:07:13,100 --> 00:07:16,370
Let's create a new line right above the while loop line.

96
00:07:16,820 --> 00:07:23,000
And whenever you want to create a new custom query, you begin by creating a variable so we could name

97
00:07:23,000 --> 00:07:25,010
our query, whatever we want to.

98
00:07:25,160 --> 00:07:28,100
Let's call it home page posts.

99
00:07:28,610 --> 00:07:30,650
Name doesn't matter, but that's what I'm going with.

100
00:07:30,890 --> 00:07:37,250
And then let's say that it equals a new instance of the WP.

101
00:07:38,070 --> 00:07:45,000
Query class, if you're familiar with object oriented programming, this line of code makes complete

102
00:07:45,000 --> 00:07:45,600
sense.

103
00:07:45,900 --> 00:07:48,990
But I want the code to make sense to anyone and everyone.

104
00:07:49,140 --> 00:07:55,200
Now, luckily, you don't need any object oriented programming experience in order to create your own

105
00:07:55,200 --> 00:07:56,250
custom queries.

106
00:07:56,430 --> 00:08:02,130
Having said that, I don't think it would hurt for me to give you a quick one to two minute introduction

107
00:08:02,130 --> 00:08:07,080
to object oriented programming so you don't have to type out these lines that I'm going to type right

108
00:08:07,080 --> 00:08:07,330
now.

109
00:08:07,350 --> 00:08:09,150
This is just for a quick demo.

110
00:08:09,300 --> 00:08:17,160
But let's imagine I had another variable named Dog and I would set it to equal a new instance of a class

111
00:08:17,160 --> 00:08:21,510
named animal, or maybe I would have a variable named cat.

112
00:08:21,900 --> 00:08:25,320
And it would also be a new instance of a class named animal.

113
00:08:25,830 --> 00:08:28,950
So the first question here is, what is a class?

114
00:08:29,250 --> 00:08:35,790
Well, think of a class as a blueprint or a recipe that you can use again and again to create different

115
00:08:35,790 --> 00:08:36,710
objects.

116
00:08:37,140 --> 00:08:43,890
So in these examples, dog and cat are objects and obviously animal is the class or the blueprint or

117
00:08:43,890 --> 00:08:44,430
recipe.

118
00:08:44,700 --> 00:08:49,530
Now, there's a lot of differences between a dog and a cat, but there's also a ton of similarities

119
00:08:49,530 --> 00:08:51,170
right there, both animals.

120
00:08:51,450 --> 00:08:57,570
So the idea here is instead of creating a dog from scratch and a cat from scratch, let's create them

121
00:08:57,570 --> 00:08:58,980
from a handy blueprint.

122
00:08:59,160 --> 00:09:05,110
And we could imagine that this class of animal will give these objects access to useful functions.

123
00:09:05,310 --> 00:09:08,040
So, for example, what's something that all animals do?

124
00:09:08,250 --> 00:09:09,660
I'm going to say drink water.

125
00:09:09,900 --> 00:09:10,170
Right.

126
00:09:10,180 --> 00:09:16,500
So maybe this class gives these objects access to a function or method named drink water.

127
00:09:16,770 --> 00:09:23,250
So if I wanted my dog to drink water, now that I've created an object with this class as the blueprint

128
00:09:23,550 --> 00:09:30,840
down here, I could just take that dog object, look inside the object with dash greater than symbol.

129
00:09:31,110 --> 00:09:33,350
And then I could just call the function or method name.

130
00:09:33,360 --> 00:09:34,710
So drink water.

131
00:09:35,430 --> 00:09:41,250
And the idea is that the code for the animal class could be tucked away nice and neatly in some other

132
00:09:41,250 --> 00:09:41,820
file.

133
00:09:42,000 --> 00:09:44,220
And once it's created, you can just forget about it.

134
00:09:44,220 --> 00:09:44,880
Out of sight.

135
00:09:44,880 --> 00:09:45,690
Out of mind.

136
00:09:45,870 --> 00:09:47,990
So this can keep your code really clean.

137
00:09:48,210 --> 00:09:53,760
You just create an object based on a class and the hundreds of lines of code that create the animal

138
00:09:53,760 --> 00:09:57,390
and all of its functions, like, for example, the drink water function.

139
00:09:57,660 --> 00:10:01,230
That code isn't cluttering up this file that we're in right now.

140
00:10:01,230 --> 00:10:01,530
Right.

141
00:10:01,560 --> 00:10:02,840
That code is tucked away.

142
00:10:03,030 --> 00:10:04,350
We don't have to worry about it.

143
00:10:04,560 --> 00:10:07,530
We don't care how the drink water function is created.

144
00:10:07,680 --> 00:10:10,350
We just know that it exists and we can leverage it.

145
00:10:10,520 --> 00:10:12,420
OK, so let me delete these animal lines.

146
00:10:12,840 --> 00:10:15,600
But that's exactly what's going on with this line of code.

147
00:10:15,930 --> 00:10:22,070
WordPress out of the box comes with a class named WP query that we can leverage.

148
00:10:22,320 --> 00:10:25,830
So we are creating a new object with that as our blueprint.

149
00:10:26,160 --> 00:10:32,130
And the beauty of this is that you and I don't have to know or care how this class really works.

150
00:10:32,460 --> 00:10:38,280
The creators of WordPress maintain this class and it will do all of the heavy lifting for us.

151
00:10:38,520 --> 00:10:44,460
It'll do the tricky stuff like connecting to the database and writing SQL statements to query the database.

152
00:10:44,700 --> 00:10:46,220
So we don't have to do any of that.

153
00:10:46,530 --> 00:10:53,610
All we need to do within these parentheses is tell this class what type of content we're looking for

154
00:10:53,730 --> 00:10:59,100
or what do we want to query now, we don't just want to include a simple parameter like this.

155
00:10:59,340 --> 00:11:04,110
Instead, we need to supply this class with an array of arguments.

156
00:11:04,380 --> 00:11:10,200
So within the parentheses, type out the word array and then give it its own set of parentheses.

157
00:11:10,560 --> 00:11:16,050
And then within the array parentheses, I like to drop down to a new line just to stay organized.

158
00:11:16,260 --> 00:11:21,450
And now we just create an associative array to tell this class what we're looking for.

159
00:11:21,640 --> 00:11:28,410
So to refresh your memory on associative arrays, that's where we would say something like CCAC equals

160
00:11:28,410 --> 00:11:29,940
MÃ right.

161
00:11:29,940 --> 00:11:32,070
Or Dog equals bark.

162
00:11:32,490 --> 00:11:34,770
So what do we actually want to type here?

163
00:11:35,040 --> 00:11:41,150
Well, let's begin with a parameter named posts per page.

164
00:11:41,670 --> 00:11:47,730
So if I jump back to the home page, remember that we only want to output the two most recent posts.

165
00:11:47,970 --> 00:11:51,380
Now, by default, queries will return 10 posts.

166
00:11:51,600 --> 00:11:59,910
So if we want our custom query to only return to, we can just say posts per page equals two.

167
00:12:00,420 --> 00:12:06,450
Now, there are all sorts of other parameters that we can string together here to build the exact custom

168
00:12:06,450 --> 00:12:07,470
query that we want.

169
00:12:07,470 --> 00:12:09,870
But for the moment, this is all we need.

170
00:12:10,120 --> 00:12:18,090
OK, so at this point we have an object named homepage posts and all sorts of useful stuff lives inside

171
00:12:18,090 --> 00:12:21,960
this object, namely the two most recent blog posts.

172
00:12:21,960 --> 00:12:28,260
But even beyond that, this object also contains functions or methods that can help us loop through

173
00:12:28,260 --> 00:12:29,080
the content.

174
00:12:29,370 --> 00:12:31,080
So check this out, watch out easy.

175
00:12:31,080 --> 00:12:33,390
It is to use this custom query.

176
00:12:33,870 --> 00:12:37,110
So down within our while loop the functions have.

177
00:12:37,270 --> 00:12:44,650
Posts and the post, these functions are tied to the default automatic query that WordPress makes on

178
00:12:44,650 --> 00:12:45,620
its own right.

179
00:12:45,640 --> 00:12:48,330
The default query that's tied to the current You URL.

180
00:12:48,520 --> 00:12:54,490
So instead of using these functions, we want to use functions or methods that belong to our new custom

181
00:12:54,490 --> 00:12:55,660
query object.

182
00:12:55,990 --> 00:13:00,880
Now think back to a few minutes ago when we had the example dog and cat objects.

183
00:13:01,150 --> 00:13:05,220
Remember that example, function of drink water to use it.

184
00:13:05,230 --> 00:13:11,560
I just began with the dog object and then I looked inside the object with dash greater than and then

185
00:13:11,560 --> 00:13:13,020
I just called the function.

186
00:13:13,300 --> 00:13:18,540
Well, that's exactly what we're going to do for the have posts and the post functions.

187
00:13:18,760 --> 00:13:19,510
So check this out.

188
00:13:19,510 --> 00:13:26,140
Let me delete this example dog line and within the while loop condition, we don't want to use just

189
00:13:26,140 --> 00:13:29,440
have posts because that's tied to the default query.

190
00:13:29,590 --> 00:13:33,400
But right before it, we can just look within our custom object.

191
00:13:33,820 --> 00:13:41,950
So homepage posts and then look inside it for a method or function named have posts and then let's do

192
00:13:41,950 --> 00:13:43,060
the same thing for this.

193
00:13:43,090 --> 00:13:49,960
The post function, just this on its own is tied to the default query, but right before it we can take

194
00:13:49,960 --> 00:13:56,830
our object home page posts and look within it for the function named the Post.

195
00:13:57,100 --> 00:13:57,510
Cool.

196
00:13:57,520 --> 00:14:01,050
So now our loop code is referencing our custom query.

197
00:14:01,420 --> 00:14:08,850
So if I save that and refresh perfect, we see the titles for the two most recent blog posts.

198
00:14:09,250 --> 00:14:12,070
Now back to that associative array we were creating.

199
00:14:12,250 --> 00:14:16,150
Posts per page is just one of many parameters you can use.

200
00:14:16,300 --> 00:14:19,000
We could add a comma here and add another parameter.

201
00:14:19,000 --> 00:14:27,310
We could say category name only give us posts that are categorized under the awards category.

202
00:14:27,610 --> 00:14:32,650
So if I save that, I only have one post under that category.

203
00:14:32,650 --> 00:14:34,150
But you get the idea.

204
00:14:34,330 --> 00:14:40,930
Or we could also say, I mean, delete these, we could add a parameter called post type.

205
00:14:41,320 --> 00:14:46,240
And this defaults to post write blog posts are of the post type of post.

206
00:14:46,510 --> 00:14:50,890
But if you say page, well that will query all of your pages.

207
00:14:51,340 --> 00:14:55,270
So we see about US privacy policy, our history, our goals.

208
00:14:55,540 --> 00:15:00,700
Anyways, long story short, there are tons of different parameters that we can experiment with here.

209
00:15:00,910 --> 00:15:06,130
We are going to be writing a ton of custom queries before this course is over, but for now, all we

210
00:15:06,130 --> 00:15:09,190
really need is posts per page equals to.

211
00:15:09,490 --> 00:15:15,550
Now, let's spend the remainder of this lesson using this styling and template for the two posts that

212
00:15:15,550 --> 00:15:16,440
we are outputting.

213
00:15:16,690 --> 00:15:19,660
So back in the text editor, here's our While Loop.

214
00:15:19,840 --> 00:15:26,440
And instead of just outputting a list item HTML element with the title instead of just this one line

215
00:15:26,440 --> 00:15:33,850
of HTML, let's output this entire event summary div because this has the styling and structure that

216
00:15:33,850 --> 00:15:35,860
will give us this visual appearance.

217
00:15:36,430 --> 00:15:37,480
So here's what I do.

218
00:15:37,780 --> 00:15:44,200
I would just copy one of these events, summary divs into my clipboard and then I would go ahead and

219
00:15:44,200 --> 00:15:46,030
delete that one that I have highlighted.

220
00:15:46,360 --> 00:15:55,330
And the second event summary div OK, but then within r while loop let's just delete this list item

221
00:15:55,330 --> 00:15:58,060
line and then paste in our clipboard.

222
00:15:58,450 --> 00:15:58,780
Cool.

223
00:15:58,780 --> 00:16:05,680
So if I save that we see two of the exact same thing, but now all we need to do is hollow out this

224
00:16:05,680 --> 00:16:09,250
hard coded fake data with real dynamic data.

225
00:16:09,280 --> 00:16:10,810
So let's do that bit by bit.

226
00:16:11,110 --> 00:16:15,130
The first thing I see is the month that the post was created on.

227
00:16:15,460 --> 00:16:23,560
So let's delete this fake hardcoded Jan for January and instead will drop into P and called the function

228
00:16:23,560 --> 00:16:25,000
named the time.

229
00:16:25,630 --> 00:16:30,550
And then the code for a three letter abbreviation of a month is just uppercase M.

230
00:16:30,820 --> 00:16:37,600
OK, and then for this fake hardcoded 20th day of the month, let's just copy and paste this code we

231
00:16:37,600 --> 00:16:43,930
just wrote and delete the twenty and then paste in your clipboard and the code for the day of the month

232
00:16:43,930 --> 00:16:44,890
instead of uppercase.

233
00:16:44,890 --> 00:16:47,650
M is just lowercase d ok.

234
00:16:47,650 --> 00:16:50,380
The next thing we want to hollow out is this headline.

235
00:16:50,530 --> 00:16:57,610
So instead of this fake hardcoded title, let's delete that and instead just drop into P and call the

236
00:16:57,850 --> 00:17:01,660
title and let's also provide a real H ref link value.

237
00:17:02,110 --> 00:17:10,900
So when you click on this link, let's delete this hash tag and instead drop into P and called the permalink.

238
00:17:11,410 --> 00:17:17,890
Now this short excerpt or description text is a bit tricky, so let's delete this fake hardcoded content.

239
00:17:18,160 --> 00:17:25,600
But it's not as simple as just using the P function named the content because that will output way too

240
00:17:25,600 --> 00:17:26,590
much content.

241
00:17:27,010 --> 00:17:27,380
Right.

242
00:17:27,430 --> 00:17:28,750
That looks terrible.

243
00:17:28,960 --> 00:17:34,900
So instead we only want to output maybe one or two lines worth of text, just a brief snippet so we

244
00:17:34,900 --> 00:17:37,000
could say the excerpt instead.

245
00:17:37,060 --> 00:17:42,910
Of the content, but let me show you something even better, so let me delete this, the content function

246
00:17:42,910 --> 00:17:52,630
call and instead let's echo out the results of a WordPress function named WP Trem words, and then you

247
00:17:52,630 --> 00:17:54,580
give this function to arguments.

248
00:17:54,940 --> 00:17:57,850
The first argument is the content that you want to limit.

249
00:17:58,150 --> 00:18:01,600
And then the second argument is how many words you want to limit it to.

250
00:18:01,780 --> 00:18:08,290
So for the first argument, let's just say get the content and then comma and the second argument,

251
00:18:08,290 --> 00:18:13,180
let's limit it to maybe the first eighteen words only saved that.

252
00:18:13,180 --> 00:18:13,920
Test it out.

253
00:18:14,410 --> 00:18:14,710
Cool.

254
00:18:14,740 --> 00:18:15,700
That looks pretty good.

255
00:18:16,090 --> 00:18:17,250
Let's not forget about this.

256
00:18:17,260 --> 00:18:18,300
Read more link.

257
00:18:18,610 --> 00:18:22,330
So back in our text editor, here's the read more link in the graph.

258
00:18:22,540 --> 00:18:27,210
Instead of typing out the permalink again, let's just copy and paste it from right here.

259
00:18:27,490 --> 00:18:29,830
So the permalink, copy it.

260
00:18:30,220 --> 00:18:33,520
And then right here, delete the hash tag paste in your clipboard.

261
00:18:33,700 --> 00:18:38,530
And while we're at it, why don't we make it so that if you click on the date, that also takes you

262
00:18:38,530 --> 00:18:39,490
to the permalink.

263
00:18:39,790 --> 00:18:42,610
So the date is already wrapped in an element.

264
00:18:42,760 --> 00:18:43,960
And here's the atrip.

265
00:18:43,960 --> 00:18:46,540
Let's just delete that paste in your clipboard.

266
00:18:46,780 --> 00:18:47,180
Cool.

267
00:18:47,350 --> 00:18:52,990
Now, before we bring this lesson to a close, there's one habit that I want to instill in you whenever

268
00:18:52,990 --> 00:18:54,700
you use a custom query.

269
00:18:54,970 --> 00:19:01,870
And that habit is once you've created your custom query and used it in a while loop right after that

270
00:19:01,870 --> 00:19:03,090
while loop ends.

271
00:19:03,100 --> 00:19:05,800
So here's the ending curly bracket for the while loop.

272
00:19:06,220 --> 00:19:15,160
Right after that, I want you to get in the habit of calling a function named WP Reset Post Data.

273
00:19:15,520 --> 00:19:19,900
And really this is just our way of cleaning up after we run our custom query.

274
00:19:20,140 --> 00:19:26,260
This will reset different WordPress data and global variables back to the state that it was in when

275
00:19:26,260 --> 00:19:27,460
it made its default.

276
00:19:27,460 --> 00:19:34,030
Automatic query based on the current URL right before we came along and made a custom query calling

277
00:19:34,030 --> 00:19:39,550
this function isn't always 100 percent necessary, especially if you're towards the bottom of a template

278
00:19:39,550 --> 00:19:42,700
file, but it's a really good habit to get into.

279
00:19:42,880 --> 00:19:48,880
OK, so if I save that and refresh, we've got our two most recent posts and we can click on the date

280
00:19:48,880 --> 00:19:54,910
the title or read more to go to that individual post that's going to bring this lesson to a close.

281
00:19:55,150 --> 00:19:57,910
Let's keep things rolling and I'll see in the next one.
