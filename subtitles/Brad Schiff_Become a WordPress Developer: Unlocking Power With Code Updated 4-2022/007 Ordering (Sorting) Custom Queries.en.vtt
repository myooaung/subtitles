WEBVTT
1
00:00:00.870 --> 00:00:08.580
Blow everyone in this lesson, we will learn more about custom queries, in particular, we will learn

2
00:00:08.580 --> 00:00:14.180
how to control the way that the retrieved are queried, posts get ordered or sorted.

3
00:00:14.610 --> 00:00:17.920
The topic will make more sense once we dive into an example.

4
00:00:18.180 --> 00:00:21.330
So let's do that right now on our homepage.

5
00:00:21.330 --> 00:00:23.790
Let's focus on the upcoming events.

6
00:00:24.210 --> 00:00:29.700
At the moment, the ordering of these two posts is controlled by their published date.

7
00:00:30.150 --> 00:00:34.140
The ones that I authored and created the most recently show up on top.

8
00:00:34.350 --> 00:00:41.130
But what if instead we wanted to sort the posts alphabetically by their title or we wanted them to be

9
00:00:41.130 --> 00:00:47.650
ordered randomly on every page refresh or better yet, we wanted to order them by their event date?

10
00:00:48.150 --> 00:00:50.640
Well, all of that and more is possible.

11
00:00:50.970 --> 00:00:53.280
Custom queries are super flexible.

12
00:00:53.460 --> 00:00:56.910
So to learn more about this, let's jump in to our text editor.

13
00:00:58.170 --> 00:01:02.280
And within your theme folder, I want you to jump in to front page.

14
00:01:04.850 --> 00:01:11.570
And the first real bit of hope we see in this file is right here, and this is our custom query at the

15
00:01:11.570 --> 00:01:14.120
moment, we only have two arguments.

16
00:01:14.490 --> 00:01:20.840
So we're saying give us two posts and only give us posts that are of the post type event.

17
00:01:21.260 --> 00:01:23.240
But we can add another argument.

18
00:01:23.240 --> 00:01:32.480
So maybe add a comma here and the new line and we can use the parameter named order by and now we can

19
00:01:32.480 --> 00:01:36.110
control the ordering of the posts by default.

20
00:01:36.170 --> 00:01:42.530
This is set to post date, meaning the date that the post was created or published.

21
00:01:42.890 --> 00:01:47.900
So if we saved this, we wouldn't see any difference because this is already the default behavior of

22
00:01:47.900 --> 00:01:48.740
WordPress.

23
00:01:49.100 --> 00:01:56.540
But we could change this to title and then WordPress will order the posts alphabetically by their title.

24
00:01:56.810 --> 00:02:03.320
Now, before we save this, why don't we change posts per page from two to negative one?

25
00:02:03.560 --> 00:02:10.340
Negative one is our way of telling WordPress, just give us all posts that meet these conditions.

26
00:02:10.580 --> 00:02:10.880
Right.

27
00:02:10.890 --> 00:02:17.510
So instead of sending this to five or 10 or 100, if you just send it to negative one, that will return

28
00:02:17.510 --> 00:02:20.060
everything that meets your query all at once.

29
00:02:20.360 --> 00:02:26.300
In just a few minutes, we can switch this back to two so our homepage design falls back into place.

30
00:02:26.300 --> 00:02:29.000
But I think this will be fun to experiment with.

31
00:02:29.420 --> 00:02:34.940
So if we save that, you can see that I've only created three total event posts.

32
00:02:35.300 --> 00:02:38.090
But more importantly, notice the ordering of them.

33
00:02:38.480 --> 00:02:44.910
They are now in reverse alphabetical ordering, and that's because we set order by two title.

34
00:02:45.440 --> 00:02:50.180
Now, you might be wondering why are they in reverse alphabetical instead of just alphabetical?

35
00:02:50.360 --> 00:02:57.500
Well, to answer that, let's add on another argument here and let's use the parameter named order by

36
00:02:57.500 --> 00:02:58.160
default.

37
00:02:58.190 --> 00:03:01.190
This is set to descending, right?

38
00:03:01.190 --> 00:03:07.640
Because if we think of WordPress as default behavior of showing the most recently published posts first,

39
00:03:07.850 --> 00:03:09.200
really what's going on there?

40
00:03:09.200 --> 00:03:12.860
Is it showing the post with the largest date number?

41
00:03:13.190 --> 00:03:18.170
But if we want to sort by title alphabetically, we don't want descending order.

42
00:03:18.380 --> 00:03:20.780
We want ascending order.

43
00:03:21.110 --> 00:03:22.370
So if we save that.

44
00:03:24.420 --> 00:03:24.900
Cool.

45
00:03:24.930 --> 00:03:31.470
Now they are in true alphabetical order, and if instead you wanted them to be in a random order, every

46
00:03:31.470 --> 00:03:38.430
time you refresh the page, we could just change order by two Rande for random.

47
00:03:39.720 --> 00:03:39.950
Cool.

48
00:03:39.960 --> 00:03:41.070
So now they switch.

49
00:03:41.070 --> 00:03:44.690
Every time you reload the page, you get the idea.

50
00:03:45.120 --> 00:03:49.760
Except that's not what we want, nor do we want to sort them alphabetically.

51
00:03:50.040 --> 00:03:53.520
What we really want is to sort them by their event day.

52
00:03:53.760 --> 00:03:54.080
Right.

53
00:03:54.090 --> 00:04:00.870
If you think about it, upcoming events really just means the events with an event date that is closest

54
00:04:00.870 --> 00:04:01.930
to today's date.

55
00:04:02.280 --> 00:04:08.040
Now, before we go ahead and learn how to sort by a custom field value, I first want to make sure that

56
00:04:08.040 --> 00:04:10.900
our test data and experiment makes sense.

57
00:04:11.280 --> 00:04:12.470
Let me show you what I mean.

58
00:04:12.870 --> 00:04:21.540
So if we set autobio back to its default value of post underscored date, I didn't do this intentionally.

59
00:04:21.540 --> 00:04:27.510
But when I set the event dates for my three example posts, they already sort of look like they are

60
00:04:27.510 --> 00:04:28.140
in order.

61
00:04:28.140 --> 00:04:31.800
Right, June 29th, June 30th, July 20th.

62
00:04:32.040 --> 00:04:33.360
And that wasn't by design.

63
00:04:33.360 --> 00:04:34.800
That was just random luck.

64
00:04:34.860 --> 00:04:40.080
So right now, what I'm going to do and feel free to follow along, I'm going to go in and edit the

65
00:04:40.080 --> 00:04:45.990
event date for this Science of Cats event and set its event date way farther in the future.

66
00:04:46.170 --> 00:04:50.930
So that way we can clearly see that these are not in any sort of event date ordering yet.

67
00:04:51.240 --> 00:04:52.470
So in my admin.

68
00:04:54.370 --> 00:05:01.900
Go into events, the science of cats, and I'll set its event date to sometime in September, way out

69
00:05:01.900 --> 00:05:02.670
in the future.

70
00:05:05.630 --> 00:05:12.590
OK, so now if I refresh, cool, so now we can clearly see that these are not being ordered by their

71
00:05:12.590 --> 00:05:17.730
event date at the moment, they're being ordered by their published or created on date.

72
00:05:17.930 --> 00:05:21.850
And remember, we set the order to ascending instead of descending.

73
00:05:22.400 --> 00:05:25.980
So that's why we see the most recently created post down at the bottom.

74
00:05:26.330 --> 00:05:28.210
But let's get back to our real goal.

75
00:05:28.490 --> 00:05:35.210
If this is truly upcoming events, we want to order things by the event date, our custom field.

76
00:05:35.360 --> 00:05:43.520
So let me show you how to do that for our order by value instead of post date or title or Rande for

77
00:05:43.520 --> 00:05:44.970
random instead.

78
00:05:44.990 --> 00:05:47.840
Let's set this to Medda.

79
00:05:48.230 --> 00:05:50.240
Underscore value.

80
00:05:50.720 --> 00:05:58.160
You're probably wondering what Medda means in WordPress metadata is all of the extra or custom additional

81
00:05:58.160 --> 00:06:00.590
data associated with the Post.

82
00:06:00.890 --> 00:06:07.340
So we're saying we want to order things by the value of a piece of metadata, in this case, a meta

83
00:06:07.340 --> 00:06:08.810
or custom field.

84
00:06:09.200 --> 00:06:15.920
Now, if you set the order by to measure value, you need to be sure to add on another parameter named

85
00:06:16.190 --> 00:06:18.250
Medda Key.

86
00:06:18.830 --> 00:06:23.700
And this is where we spell out specifically the name of the custom field that we're interested in.

87
00:06:24.140 --> 00:06:28.910
So obviously, remember, the name of the field is event underscore date.

88
00:06:30.020 --> 00:06:36.360
Now, I do want to point out that Medda value is how we tell WordPress that we want to order by a meta

89
00:06:36.380 --> 00:06:41.930
key and meta value is well suited if you're sorting letters and words.

90
00:06:42.200 --> 00:06:47.750
But in this case, since we're going to be sorting numbers, right, a date is just a set of numbers

91
00:06:47.990 --> 00:06:49.550
instead of meta value.

92
00:06:49.550 --> 00:06:53.820
Let's use meta value, underscore num as in number.

93
00:06:54.350 --> 00:06:54.750
OK.

94
00:06:54.770 --> 00:07:00.610
So with this new custom query in place, let's go ahead and save this and check out the website.

95
00:07:00.920 --> 00:07:01.340
Cool.

96
00:07:01.340 --> 00:07:02.780
So we can see the September one.

97
00:07:02.780 --> 00:07:08.630
That's way in the future gets moved down to the bottom and all three events are now correctly ordered

98
00:07:08.630 --> 00:07:09.840
by their event date.

99
00:07:10.190 --> 00:07:12.940
However, our job here is not yet complete.

100
00:07:13.100 --> 00:07:18.970
While it's true that we are ordering from the oldest event date to the most futuristic event date,

101
00:07:19.370 --> 00:07:22.600
what would happen once an event date is in the past?

102
00:07:22.850 --> 00:07:28.070
So, for example, as I'm filming this, what if the current date today was July 1st?

103
00:07:28.310 --> 00:07:31.530
Well, in that case, we wouldn't want to show this event, right.

104
00:07:31.910 --> 00:07:33.770
This is upcoming events.

105
00:07:33.920 --> 00:07:39.650
So we want to hide or not even query in the first place, events that took place in the past.

106
00:07:39.980 --> 00:07:45.800
Now, before we learn how to write the code to filter out event dates from the past, let's first make

107
00:07:45.800 --> 00:07:48.240
sure that we have at least one test item.

108
00:07:48.590 --> 00:07:55.250
So right now, I'm going to go edit math, meet up and set its event date back to sometime in 2016 just

109
00:07:55.250 --> 00:07:56.080
to prove my point.

110
00:07:56.720 --> 00:08:04.070
So math, meet up and let's set the event date back to 2016, June 1st.

111
00:08:07.480 --> 00:08:14.860
OK, so clearly, this event has no business showing up under upcoming events, so how can we write

112
00:08:14.860 --> 00:08:19.840
code in our custom query to filter out past events?

113
00:08:20.290 --> 00:08:24.620
The answer is that we need to use something called a meta query.

114
00:08:24.970 --> 00:08:25.870
So check this out.

115
00:08:25.870 --> 00:08:27.430
Let's add another argument.

116
00:08:27.670 --> 00:08:34.270
So comma, new line and the parameter is Medda underscore query.

117
00:08:34.720 --> 00:08:40.060
And then we're going to set that to equal an array within the array parentheses.

118
00:08:40.060 --> 00:08:46.660
I like to drop down to a new line and the reason we give Medda query an array is because we are allowed

119
00:08:46.660 --> 00:08:50.440
to give it multiple conditions or things to check for.

120
00:08:50.590 --> 00:08:52.510
So what I'm about to type is gibberish.

121
00:08:52.510 --> 00:08:59.770
You do not need to type this, but for example, we could say only retrieve posts where the day is the

122
00:08:59.770 --> 00:09:03.780
fifth day of the month and we could combine that with another filter.

123
00:09:03.790 --> 00:09:10.030
We could say only show us posts where it's the fourth month of the year and we could filter on another

124
00:09:10.030 --> 00:09:11.890
filter only in a certain year.

125
00:09:12.190 --> 00:09:17.560
So you get the idea you can string together multiple filters or things that you're checking for.

126
00:09:17.740 --> 00:09:20.860
So that's our top level array that we're giving meta query.

127
00:09:21.160 --> 00:09:25.880
But then each one of those things that we're checking for should be an array of its own.

128
00:09:26.140 --> 00:09:28.590
I know this is getting confusing, but stick with me.

129
00:09:28.840 --> 00:09:35.160
Basically what I'm asking you to do is nest one array inside another array.

130
00:09:35.500 --> 00:09:35.680
Right.

131
00:09:35.750 --> 00:09:39.820
So maybe in this one we say only show us events from the fifth day of the month.

132
00:09:40.090 --> 00:09:44.150
And then we have another array that says only from a certain month or a certain year.

133
00:09:44.440 --> 00:09:47.370
Now, in our case, we only need one our array.

134
00:09:47.770 --> 00:09:55.120
Right, because we only need to check for one thing we want to say only return posts if the event date

135
00:09:55.270 --> 00:09:58.230
is greater than or equal to today's date.

136
00:09:58.570 --> 00:09:58.820
Right.

137
00:09:58.840 --> 00:10:02.040
Because that would mean the event is on today or in the future.

138
00:10:02.260 --> 00:10:04.620
We don't want to show any past events.

139
00:10:04.810 --> 00:10:10.840
So within our inner array, you know me, I like to drop down to a new line in between the parentheses.

140
00:10:13.180 --> 00:10:20.110
And we just need to give this inner array a few key parameters, so the first one is key and let's set

141
00:10:20.110 --> 00:10:23.310
that to equal just acts as a temporary placeholder.

142
00:10:23.740 --> 00:10:26.120
We will circle back to that in just a few seconds.

143
00:10:26.620 --> 00:10:31.210
Let's also give it another parameter named Compar Set.

144
00:10:31.210 --> 00:10:33.720
That's equal, a temporary placeholder as well.

145
00:10:34.030 --> 00:10:36.730
And for now, the final parameter is value.

146
00:10:39.010 --> 00:10:44.470
So now we just use these three parameters to basically create a sentence in plain English.

147
00:10:44.470 --> 00:10:45.500
That makes sense.

148
00:10:45.760 --> 00:10:51.090
So let's say only give us posts if the key the key is the custom field.

149
00:10:51.190 --> 00:10:56.230
So only if event date is greater than or equal to.

150
00:10:56.800 --> 00:10:57.110
Right.

151
00:10:57.130 --> 00:10:59.680
That's our comparison operator for compare.

152
00:11:00.130 --> 00:11:06.930
So on this line will say greater than or equal to today's date.

153
00:11:07.150 --> 00:11:07.450
Right.

154
00:11:07.480 --> 00:11:13.930
So today is the value that we are looking for now in a very easy way to get today's date.

155
00:11:13.930 --> 00:11:20.380
The current date is just to call a function named D, and then you tell it what kind of format you want

156
00:11:20.380 --> 00:11:27.700
to return to uppercase Y for year and then lowercase MMD for the month and day representations.

157
00:11:28.060 --> 00:11:34.780
Now this line of code will work, but I think it would be cool if we could literally say value equals

158
00:11:35.830 --> 00:11:36.450
today.

159
00:11:36.940 --> 00:11:37.200
Right.

160
00:11:37.210 --> 00:11:40.670
Then anyone can look at that line of code and understand what it means.

161
00:11:41.020 --> 00:11:46.780
So let's go ahead and set the value parameter to look for the value of a variable named today.

162
00:11:47.110 --> 00:11:50.780
And then maybe up here on a new line right above our custom query.

163
00:11:51.250 --> 00:11:59.200
Let's just create that variable named today and set it to equal the date function of P and tell it to

164
00:11:59.200 --> 00:12:02.140
return uppercase Y lowercase MMD.

165
00:12:02.500 --> 00:12:10.660
As I'm filming this, it's the 28th of June of 2017, so this would return 2017, 06.

166
00:12:10.660 --> 00:12:11.430
Twenty eight.

167
00:12:11.680 --> 00:12:16.450
And that's the same date format that our custom field stores the date as cool.

168
00:12:16.450 --> 00:12:22.540
So all altogether in plain English only show us posts where the event date is greater than or equal

169
00:12:22.540 --> 00:12:23.800
to today's date.

170
00:12:24.160 --> 00:12:30.250
Now this code will work, but it never hurts to tell WordPress what type of values you're going to be

171
00:12:30.250 --> 00:12:30.980
comparing.

172
00:12:31.210 --> 00:12:39.730
So why don't we go ahead and add one more parameter here named type and let's set that equal numeric.

173
00:12:40.030 --> 00:12:42.730
Right, because we are comparing numbers.

174
00:12:43.060 --> 00:12:47.890
OK, now, before I save this, we will know if it works as soon as I save it.

175
00:12:48.130 --> 00:12:50.530
This June 1st item should disappear.

176
00:12:50.530 --> 00:12:52.420
Right, because it's in the past.

177
00:12:53.140 --> 00:12:55.240
So let's save this code.

178
00:12:56.170 --> 00:12:57.510
Jump back to the website.

179
00:12:57.850 --> 00:12:58.470
Perfect.

180
00:12:58.570 --> 00:13:03.630
That event is gone and that's actually going to bring this lesson to a close.

181
00:13:03.940 --> 00:13:07.000
I know this example was oddly specific, right?

182
00:13:07.000 --> 00:13:09.400
Dealing with the past, present and future.

183
00:13:09.610 --> 00:13:14.640
And if you didn't understand this specific example 100 percent, that's OK.

184
00:13:14.950 --> 00:13:21.760
I primarily just wanted to introduce you to this idea of ordering by something other than the published

185
00:13:21.760 --> 00:13:22.410
on date.

186
00:13:22.780 --> 00:13:23.110
Right.

187
00:13:23.110 --> 00:13:25.270
We are ordering by a custom field.

188
00:13:25.480 --> 00:13:31.300
And then the other takeaway point for this lesson is that we can use meta queries to really have fine

189
00:13:31.300 --> 00:13:35.250
grained control over searching for particular values.

190
00:13:35.560 --> 00:13:41.950
These are big concepts that we are going to practice and use again and again as we build out the programs,

191
00:13:41.950 --> 00:13:45.820
professors and campuses, portions of the website.

192
00:13:46.120 --> 00:13:52.900
In our next lesson, we will take a look at the events, view all archives screen and we will make sure

193
00:13:52.900 --> 00:13:56.070
that this screen also doesn't show events from the past.

194
00:13:56.350 --> 00:14:04.120
We will also learn how to create a separate page entirely named Past Events that only shows events from

195
00:14:04.120 --> 00:14:06.340
the past should be a lot of fun.

196
00:14:06.370 --> 00:14:08.800
Let's keep things rolling and I will see you then.
