WEBVTT
1
00:00:01.340 --> 00:00:02.270
Hello, everyone.

2
00:00:02.660 --> 00:00:07.500
In this lesson, we will learn how to work with multiple post types.

3
00:00:07.970 --> 00:00:11.830
Let's dive right into the action and jump in to our text editor.

4
00:00:12.200 --> 00:00:18.770
So here we are within our search routine file that we've been working on for the last couple of lessons.

5
00:00:19.070 --> 00:00:25.610
And at the moment, the WP query that we're putting together only looks for posts that are of the post

6
00:00:25.610 --> 00:00:26.770
type professor.

7
00:00:27.050 --> 00:00:31.400
And clearly, we don't want our search overlay to be limited to only professors.

8
00:00:31.400 --> 00:00:31.640
Right.

9
00:00:31.640 --> 00:00:33.900
We want to search everything on the site.

10
00:00:34.310 --> 00:00:39.590
Now, luckily, WordPress makes it very easy to query for multiple post types.

11
00:00:40.010 --> 00:00:40.770
Check this out.

12
00:00:40.790 --> 00:00:47.630
All we have to do is delete this quotes, professor, and in its place, provide an array.

13
00:00:48.380 --> 00:00:56.570
And then within the array we can just say quotes post, comma, page, comma, professor.

14
00:00:57.230 --> 00:00:57.430
Right.

15
00:00:57.470 --> 00:01:02.720
So we just built an array and list all of the different post types that we want to include.

16
00:01:03.140 --> 00:01:09.770
So if I go ahead and save this and then over in Postman at the end of our new API URL, if I search

17
00:01:09.770 --> 00:01:14.480
for Bachs a lot, we still successfully pull in that professor post.

18
00:01:14.480 --> 00:01:23.960
But if instead I search for about as in the about US page, well, we successfully pull in those results

19
00:01:23.960 --> 00:01:24.440
as well.

20
00:01:24.860 --> 00:01:26.690
Or I could search for a blog post.

21
00:01:26.690 --> 00:01:29.650
So I know I have a post named we won an award.

22
00:01:29.660 --> 00:01:37.940
So if I search for a ward because we included post in our array of post types, we successfully pull

23
00:01:37.940 --> 00:01:39.550
in a blog post result.

24
00:01:40.010 --> 00:01:42.740
So this is great and it was very easy to set up.

25
00:01:42.980 --> 00:01:46.990
We just set post time to equal an array and list out the post types.

26
00:01:47.360 --> 00:01:50.330
However, let me show you something that's less than ideal.

27
00:01:50.930 --> 00:01:55.190
So if I search for something like lorem as in lorem ipsum.

28
00:01:57.090 --> 00:02:03.480
Just as an example, that's going to return posts from just about every post type, but I don't want

29
00:02:03.480 --> 00:02:10.260
all of the JSON for these results to be mixed together like this, because on our front end over in

30
00:02:10.260 --> 00:02:16.680
the search overlay, I don't want all of the results to just be mixed together in a single list.

31
00:02:16.950 --> 00:02:23.400
Instead, I have a vision for a three column layout for the results where the first column will be just

32
00:02:23.400 --> 00:02:25.700
posts and pages mixed together.

33
00:02:25.950 --> 00:02:28.500
So that will be the general information results.

34
00:02:29.130 --> 00:02:36.600
And then the second column will have programs and professors and then the third column will have campuses

35
00:02:36.720 --> 00:02:37.740
and events.

36
00:02:38.340 --> 00:02:45.840
So back in our code, instead of placing all of the results posts into this one array, right into this

37
00:02:45.840 --> 00:02:50.460
one big single array, which at the moment is named Professor Results.

38
00:02:50.820 --> 00:02:51.040
Right.

39
00:02:51.070 --> 00:02:57.720
That's the array that within our while loop we use array push to push each resulting post onto the end

40
00:02:57.720 --> 00:02:58.440
of the array.

41
00:02:58.800 --> 00:03:05.670
So what I'm suggesting is instead of just having this one big single array in order to stay organized,

42
00:03:05.670 --> 00:03:13.410
why don't we create multiple sub arrays or in other words, one array for posts and pages and the general

43
00:03:13.410 --> 00:03:20.400
information and then another array for programs, another array for professors, another array for campuses

44
00:03:20.400 --> 00:03:22.000
and an array for events.

45
00:03:22.410 --> 00:03:24.640
So let me show you how I would set that up.

46
00:03:25.140 --> 00:03:27.480
First of all, let's do a bit of renaming.

47
00:03:27.870 --> 00:03:35.120
This query is no longer just for professors, so let's rename this query object from professors to maybe

48
00:03:35.730 --> 00:03:37.230
main query.

49
00:03:37.650 --> 00:03:38.880
I just made this name up.

50
00:03:38.880 --> 00:03:44.310
You could choose whatever you want, but we do want to match that name down here when we are looping

51
00:03:44.310 --> 00:03:44.810
through it.

52
00:03:45.090 --> 00:03:50.460
So within our while loop instead of professors, let's change that to main query.

53
00:03:50.820 --> 00:03:56.820
And then on this line, when we call the post, let's change that from professors to main query.

54
00:03:57.210 --> 00:04:02.370
And then on a similar note, when it comes to this empty array that we are populating, it doesn't make

55
00:04:02.370 --> 00:04:07.190
sense to name it professor results since it's going to contain all sorts of data.

56
00:04:07.380 --> 00:04:12.290
So why don't we rename this empty array to just be named results?

57
00:04:12.810 --> 00:04:17.850
OK, and then down at the very bottom of this file, when we are returning something, instead of trying

58
00:04:17.850 --> 00:04:22.690
to return an array that no longer exists, let's return results.

59
00:04:23.370 --> 00:04:28.230
Now, I realize that the last minute or two might have been difficult to follow, but I think our next

60
00:04:28.230 --> 00:04:30.270
step is going to help clear things up a bit.

61
00:04:30.510 --> 00:04:34.500
So check this out within this empty array named results.

62
00:04:35.100 --> 00:04:40.500
This is the array that we're going to populate as we loop through the results within this empty array.

63
00:04:40.510 --> 00:04:43.710
Let's actually drop down in between the parentheses.

64
00:04:44.640 --> 00:04:50.640
And what I want to do is build out an associative array where each item contains a different type of

65
00:04:50.640 --> 00:04:51.330
content.

66
00:04:51.690 --> 00:04:58.500
So, for example, we could make up whatever name we want, but let's say general info and this is where

67
00:04:58.500 --> 00:05:01.380
we will place the blog posts and pages.

68
00:05:01.800 --> 00:05:06.770
For now, let's send it to equal a temporary X placeholder new line.

69
00:05:07.110 --> 00:05:14.520
Let's create another item in this array named professors and just set it to equal an X, OK, and then

70
00:05:14.520 --> 00:05:16.380
what other types of content do we have?

71
00:05:16.380 --> 00:05:21.090
We have programs and we have events.

72
00:05:23.540 --> 00:05:25.040
And we have campuses.

73
00:05:27.790 --> 00:05:34.120
Now, instead of just placeholder exes, I want each one of these exes to be an array, an empty array

74
00:05:34.120 --> 00:05:37.150
that we can push on to and populate within our loop.

75
00:05:37.580 --> 00:05:44.630
So instead of this ex placeholder, just say array and then do the same thing for these other four exes

76
00:05:45.120 --> 00:05:46.750
so you can just copy and paste.

77
00:05:49.560 --> 00:05:53.460
OK, at this point, I think my game plan is starting to shift into focus.

78
00:05:53.880 --> 00:05:58.370
We've got this query that's going to contain results from all different sorts of post types.

79
00:05:58.620 --> 00:06:04.110
And then when we loop through it, depending on the type of the current result, we will just push it

80
00:06:04.110 --> 00:06:06.200
into the appropriate empty array.

81
00:06:06.870 --> 00:06:11.860
Before we update our loop code, let's be sure to include all post types up in this array.

82
00:06:12.300 --> 00:06:15.300
So at the moment I've got post page professor.

83
00:06:15.690 --> 00:06:20.790
Let's not forget about program, campus and event.

84
00:06:22.470 --> 00:06:22.970
All right.

85
00:06:22.980 --> 00:06:26.660
Now, the final piece of our puzzle is to update our loop code.

86
00:06:27.300 --> 00:06:33.540
So within this while loop down here, this selected code will run once for each post and the results

87
00:06:33.810 --> 00:06:40.230
only now, instead of pushing on to the end of an array named Professor Results, let's change this

88
00:06:40.230 --> 00:06:48.090
first argument to the results and then you can look inside the array with square brackets and let's

89
00:06:48.090 --> 00:06:50.830
say general info.

90
00:06:51.300 --> 00:06:55.890
So this is our way of saying that the array we want to add on to is this one.

91
00:06:57.310 --> 00:07:03.850
This empty submarine that lives within the overall results array, cool, but there's one thing missing

92
00:07:04.240 --> 00:07:05.650
this array, Pushilin.

93
00:07:05.680 --> 00:07:11.770
We actually want to wrap this within conditional logic because we only want to add something to the

94
00:07:11.770 --> 00:07:15.970
general info array if it's a blog post or a page.

95
00:07:16.300 --> 00:07:16.600
Right.

96
00:07:16.600 --> 00:07:21.070
We want to funnel all of the other content types into their appropriate arrays.

97
00:07:21.460 --> 00:07:24.370
So let's do this right above this array push line.

98
00:07:24.670 --> 00:07:26.550
Let's just write an if statement.

99
00:07:26.860 --> 00:07:35.950
So if parentheses, curly brackets and for the condition, we can just say if I get post type, which

100
00:07:35.950 --> 00:07:47.170
is a WordPress function, so it gets its own set of parentheses if that equals post or if you post type

101
00:07:47.920 --> 00:07:49.520
equals page.

102
00:07:49.840 --> 00:07:55.150
So if the current result is a post or a page, then within the curly brackets for the if statement,

103
00:07:55.150 --> 00:08:03.280
let's just cut and paste this array, push code cut that pasted in here, OK, and then we can just

104
00:08:03.280 --> 00:08:09.470
duplicate this block of code for each of the other types like Prof's programs, events and campuses.

105
00:08:09.880 --> 00:08:15.340
So I'm just going to copy and paste and duplicate this if statement block of code that we just set up.

106
00:08:16.930 --> 00:08:19.780
Copy that and then right below it, just paste it in again.

107
00:08:20.410 --> 00:08:27.190
So in this time, let's say if gatepost type equals professor, and then in this case we don't need

108
00:08:27.190 --> 00:08:28.470
the other or condition.

109
00:08:29.800 --> 00:08:36.610
And if that's the case, then the array that we want to push it onto is results and then the summary

110
00:08:36.640 --> 00:08:38.320
of professors.

111
00:08:39.610 --> 00:08:39.910
Right.

112
00:08:39.910 --> 00:08:45.610
So big picture this while loop is going to loop through all of the results and then with these different

113
00:08:45.610 --> 00:08:50.800
if statements, we're just trying to funnel the results into their appropriate locations.

114
00:08:51.550 --> 00:08:58.000
So that way the data that we feed to the rest API is already organized and it will be super easy to

115
00:08:58.000 --> 00:09:00.460
work with within our front end JavaScript.

116
00:09:00.760 --> 00:09:05.680
So let's just finish up and set up a couple additional if statements for the other post types.

117
00:09:06.400 --> 00:09:09.460
So I'm just going to copy this right below it, duplicate it.

118
00:09:09.910 --> 00:09:20.320
Let's say if gatepost type equals program, then let's push it onto the array programs pasted again.

119
00:09:20.620 --> 00:09:30.040
If gatepost type equals campus, then add it to the results campuses summary and then finally blow this

120
00:09:30.370 --> 00:09:31.120
one more time.

121
00:09:31.120 --> 00:09:36.260
If gatepost type equals event, add it to the events array.

122
00:09:36.820 --> 00:09:42.250
OK, now that we've taken care of all of the different possibilities, let's go ahead and save this

123
00:09:42.760 --> 00:09:44.560
and then test it out over and post.

124
00:09:44.560 --> 00:09:44.940
Man.

125
00:09:45.250 --> 00:09:50.740
So if I search for Bachs a lot, perfect.

126
00:09:50.740 --> 00:09:52.540
This is exactly what I would want to see.

127
00:09:52.870 --> 00:09:57.700
The only post on our website that matches a search of Bachs a lot is a professor post.

128
00:09:58.000 --> 00:10:01.000
So here we see it and then all of our other arrays are empty.

129
00:10:01.480 --> 00:10:09.490
So if instead I searched for about as in the about US page, we see a few results in the general info

130
00:10:09.490 --> 00:10:11.730
array, but all of the others are empty.

131
00:10:12.160 --> 00:10:12.510
Cool.

132
00:10:12.520 --> 00:10:18.460
So this is going to make it very easy to build out our three column layout where we separate the different

133
00:10:18.460 --> 00:10:19.570
types of content.

134
00:10:19.930 --> 00:10:23.500
And that's exactly what we are going to work on in the next lesson.

135
00:10:23.710 --> 00:10:30.340
In the next video, we are going to connect the dots between our front end overlay JavaScript and the

136
00:10:30.340 --> 00:10:33.190
new custom API u RL that we've been building.

137
00:10:33.580 --> 00:10:36.160
It should be a lot of fun to put everything together.

138
00:10:36.310 --> 00:10:40.180
So let's keep rolling and I will see you in the next lesson.
