WEBVTT
1
00:00:01.470 --> 00:00:02.430
Hello, everyone.

2
00:00:02.760 --> 00:00:11.100
In this lesson, we will create a new page that only lists events that took place in the past because

3
00:00:11.100 --> 00:00:16.980
as of this moment on our homepage, we have upcoming events and that won't show any events from the

4
00:00:16.980 --> 00:00:17.550
past.

5
00:00:17.550 --> 00:00:23.990
And even if we click on view all events, this archive also will not show events from the past.

6
00:00:24.270 --> 00:00:29.460
However, you could imagine a situation where someone comes to our website and maybe they want to review

7
00:00:29.460 --> 00:00:33.060
a recap of the events that we've done in prior years.

8
00:00:33.270 --> 00:00:38.930
So let's go ahead and create a brand new page entirely and name it past events.

9
00:00:39.330 --> 00:00:44.100
So the first step is just to simply go into the admin and you might have guessed it.

10
00:00:44.100 --> 00:00:48.420
Let's hover over pages in the sidebar and click on Add New.

11
00:00:49.380 --> 00:00:57.480
Let's give it a title of past events and we can leave the main content field completely blank.

12
00:00:58.110 --> 00:01:00.240
And then let's click, publish or save.

13
00:01:00.700 --> 00:01:04.950
OK, now we can use this link here to preview that page that we just created.

14
00:01:06.470 --> 00:01:12.770
OK, so this is what we would expect to see right we left the main content field blank and we know that

15
00:01:12.770 --> 00:01:19.010
at this moment, the template file in our theme folder that's powering this screen is page dot.

16
00:01:20.210 --> 00:01:26.690
However, if we want to write custom code here to pull in a list of events that took place in the past,

17
00:01:27.020 --> 00:01:31.940
we are going to need a new unique special template file for this past events.

18
00:01:33.110 --> 00:01:38.910
So let me show you what we can do in our text editor within the root of our theme folder.

19
00:01:39.110 --> 00:01:45.100
I want you to create a brand new file, and the name of this new file is very important.

20
00:01:45.320 --> 00:01:52.610
I want you to name it Page and then a dash and then the name of the slug for that page that we just

21
00:01:52.610 --> 00:01:53.240
created.

22
00:01:53.600 --> 00:02:00.260
If you can't remember what a slug is right here on the edit screen, see this permalink, the bold part

23
00:02:00.260 --> 00:02:03.840
that's at the end is the slug for that page.

24
00:02:04.040 --> 00:02:07.600
So in this case, the slug is passed dash events.

25
00:02:08.330 --> 00:02:18.040
So back in our text editor, let's name this new file page, dash past dash events, dot HP.

26
00:02:19.730 --> 00:02:23.000
And then just as a test, I want you to type out hello.

27
00:02:23.000 --> 00:02:26.510
One, two, three, or just any test sentence, save it.

28
00:02:26.750 --> 00:02:31.820
And then if we go back to that past events URL and refresh, cool.

29
00:02:31.820 --> 00:02:36.140
We can see that that brand new template file is controlling this you URL.

30
00:02:36.560 --> 00:02:38.960
Now we don't actually want to say hello.

31
00:02:38.960 --> 00:02:39.950
One, two, three.

32
00:02:40.280 --> 00:02:41.690
So let's delete that.

33
00:02:41.690 --> 00:02:49.370
And instead let's just copy and paste the contents from archive event into this file and use it as a

34
00:02:49.370 --> 00:02:50.930
template or starting place.

35
00:02:51.380 --> 00:02:58.340
So within my archive event file, I'm just going to select the entire page and copy it into my clipboard

36
00:02:58.700 --> 00:03:03.890
and then back in that brand new file, just paste it in and up at the very top.

37
00:03:04.160 --> 00:03:06.350
Let's change the heading level one title.

38
00:03:06.680 --> 00:03:15.740
So instead of reading all events, but set it to say past events and let's change the subtitle to a

39
00:03:15.740 --> 00:03:19.550
recap of our past events.

40
00:03:20.510 --> 00:03:21.790
So let's save that.

41
00:03:23.780 --> 00:03:25.560
And this is fairly interesting.

42
00:03:25.790 --> 00:03:31.550
So this is the while loop part of the template that loops through any and all posts that are getting

43
00:03:31.550 --> 00:03:39.590
queried now, because the euro that we are on is tied to a page that one single past events page is

44
00:03:39.590 --> 00:03:41.540
the only item being queried.

45
00:03:41.840 --> 00:03:42.180
Right.

46
00:03:42.200 --> 00:03:43.580
This is the default U.

47
00:03:43.580 --> 00:03:44.860
RL based query.

48
00:03:45.140 --> 00:03:52.520
So back in our code, if we scroll down right above this while loop, we just need to create a custom

49
00:03:52.520 --> 00:03:58.520
query that will load any event posts where the date is less than today's date.

50
00:03:58.970 --> 00:04:04.760
So you know the drill by now when you want to create a custom query, the first step is to create a

51
00:04:04.760 --> 00:04:05.570
variable.

52
00:04:05.750 --> 00:04:07.400
We can name it whatever we want.

53
00:04:07.400 --> 00:04:17.060
Let's call it past events, and let's set it to equal a new instance of the WordPress class that's named

54
00:04:17.240 --> 00:04:18.260
WP.

55
00:04:18.590 --> 00:04:20.270
Underscore query.

56
00:04:21.370 --> 00:04:27.740
OK, then, remember, within these parentheses here, we provide WordPress with an array of options.

57
00:04:28.490 --> 00:04:34.210
Let's drop down to a new line in between those parentheses and what do we want to query for?

58
00:04:34.430 --> 00:04:41.300
Well, for our first parameter, let's say post type should equal event.

59
00:04:41.790 --> 00:04:47.900
OK, now before we save this and take it for a spin right away, let's remember that our loop code should

60
00:04:47.900 --> 00:04:50.750
reference this object that we just created.

61
00:04:51.020 --> 00:04:51.320
Right.

62
00:04:51.320 --> 00:04:57.110
Because at the moment this loop code is going to look at the current default Eurail based query.

63
00:04:57.380 --> 00:05:00.680
But we want to use our past events object query.

64
00:05:00.980 --> 00:05:05.180
So let's modify this loop code right before have posts.

65
00:05:05.180 --> 00:05:07.700
We just want to look within this object.

66
00:05:08.150 --> 00:05:15.680
So right here, let's just say past events and then to look inside an object and it's just Dasch greater

67
00:05:15.680 --> 00:05:19.310
than and then let's do the same thing for the post.

68
00:05:19.610 --> 00:05:26.660
So right before that, just begin with our object, our query object past events, look inside it and

69
00:05:26.660 --> 00:05:28.250
then call the post.

70
00:05:28.640 --> 00:05:28.970
Cool.

71
00:05:28.970 --> 00:05:31.370
So let's save that and refresh.

72
00:05:32.630 --> 00:05:39.890
So that loaded all event posts, but we only want the ones where the event date is in the past, so

73
00:05:39.890 --> 00:05:41.150
let's go back to our code.

74
00:05:41.420 --> 00:05:47.840
And instead of manually typing out the perfect query here, I think we can save ourselves a lot of typing

75
00:05:48.020 --> 00:05:51.120
by just recycling the query from our home page.

76
00:05:51.410 --> 00:05:58.190
So right now, I want you to open up front page dot p and you'll remember that we wrote this custom

77
00:05:58.190 --> 00:06:02.860
query on the home page that only pulls in the two most recent events.

78
00:06:03.260 --> 00:06:08.090
So instead of typing all of this out again, let's just copy it all into our clipboard.

79
00:06:08.390 --> 00:06:11.780
Let's even be sure to grab the today variable up here at the top.

80
00:06:12.560 --> 00:06:18.350
And let's select all the way down to this semicolon right before the while loop begins.

81
00:06:19.730 --> 00:06:25.760
OK, so with that in my clipboard, back in our brand new page dash past events template, let's just

82
00:06:25.760 --> 00:06:32.840
delete this past events variable we created a moment ago and instead paste in our clipboard and let's

83
00:06:32.840 --> 00:06:37.100
just rename the query to past events.

84
00:06:37.380 --> 00:06:44.000
Right equals a new instance of WP query and now it's much faster to just modify this instead of typing

85
00:06:44.000 --> 00:06:48.380
it out again so we can delete this first parameter posts per page.

86
00:06:49.010 --> 00:06:51.140
We don't need to limit it to just two.

87
00:06:51.320 --> 00:06:52.760
We are happy with the WordPress.

88
00:06:52.760 --> 00:07:00.290
Default of ten post type looks good medically in order by look good, so does order ascending.

89
00:07:00.680 --> 00:07:03.590
Really all we need to change is the meta query.

90
00:07:04.190 --> 00:07:11.000
So let's just say only posts where the event date and then instead of greater than or equal to let's

91
00:07:11.000 --> 00:07:14.540
just say are less than today's date.

92
00:07:15.150 --> 00:07:20.390
OK, so if I save that and refresh cool.

93
00:07:20.570 --> 00:07:23.840
We only see the one event that took place in the past.

94
00:07:24.050 --> 00:07:25.360
So that was simple enough.

95
00:07:25.670 --> 00:07:30.280
The real challenge of this lesson is getting pagination to work.

96
00:07:30.680 --> 00:07:35.290
Now, we can't test pagination links unless we have multiple posts.

97
00:07:35.600 --> 00:07:40.190
So right now, let's go create another event where the event date is in the past.

98
00:07:41.060 --> 00:07:44.090
It's back in our admin click on ADD new event.

99
00:07:45.290 --> 00:07:52.220
Let's give it a title of New Year twenty sixteen pasting some dummy content and most importantly for

100
00:07:52.220 --> 00:07:53.210
the event date.

101
00:07:53.600 --> 00:08:00.620
Let's set it all the way back to 2015, December thirty first.

102
00:08:01.340 --> 00:08:01.610
Right.

103
00:08:01.610 --> 00:08:03.320
So it's clearly in the past.

104
00:08:03.690 --> 00:08:08.540
OK, so now if we go back and refresh this past event screen, there it is.

105
00:08:09.230 --> 00:08:12.590
Now let's go ahead and try to test out our pagination links.

106
00:08:13.130 --> 00:08:18.170
So in order to do that, you could imagine that we could set posts per page to one.

107
00:08:18.530 --> 00:08:18.830
Right.

108
00:08:18.830 --> 00:08:21.350
That would force pagination links down at the bottom.

109
00:08:21.680 --> 00:08:27.980
So let's add a new parameter and say posts per page equals one.

110
00:08:28.680 --> 00:08:30.560
Be sure to include a comma at the end there.

111
00:08:31.130 --> 00:08:32.120
Let's save that.

112
00:08:33.950 --> 00:08:40.490
OK, so we only see one post now, but we still don't see any pagination links to go to the next page

113
00:08:40.490 --> 00:08:47.750
of results, even though in our template file down at the bottom we do have echo pazhani links.

114
00:08:48.110 --> 00:08:55.940
And this is because in general, WordPress pagination only works out of the box with the default queries

115
00:08:55.940 --> 00:08:59.510
that WordPress makes on its own that are tied to the current U.

116
00:08:59.510 --> 00:09:00.020
RL.

117
00:09:00.230 --> 00:09:00.560
Right.

118
00:09:00.560 --> 00:09:06.230
So that's why the pagination links worked on the generic events archive screen, because in that case

119
00:09:06.230 --> 00:09:08.600
we just manipulated the default query.

120
00:09:08.750 --> 00:09:15.440
But in this case, since we are on a slash past events page URL and we're relying on our own custom

121
00:09:15.440 --> 00:09:20.450
query, we're going to have to jump through a few hoops in order to get pagination working.

122
00:09:20.840 --> 00:09:27.110
So back in our text editor down here towards the very bottom of our brand new template file, this pagination

123
00:09:27.110 --> 00:09:31.910
links function is trying to work with the default Eurail based query.

124
00:09:32.210 --> 00:09:34.530
So in that case, there's nothing to pagination right.

125
00:09:34.550 --> 00:09:39.050
WordPress thinks that we're just trying to pull in the one past events page.

126
00:09:39.230 --> 00:09:42.650
Remember that page where we left the main content field blank?

127
00:09:42.920 --> 00:09:48.710
So what we need to do is within these parentheses, we need to give this function information about

128
00:09:48.710 --> 00:09:50.000
our custom query.

129
00:09:50.210 --> 00:09:56.960
So let's give it an array and then dropdown in between the parentheses and we need to tell it how many

130
00:09:56.960 --> 00:09:59.180
pages of results there's going to be.

131
00:09:59.390 --> 00:09:59.690
Right.

132
00:09:59.690 --> 00:10:06.200
So, for example, if we had thirty total events and we had ten per page, well, there would be three

133
00:10:06.200 --> 00:10:07.520
pages of results.

134
00:10:07.790 --> 00:10:13.010
So let's target the parameter named total and let's set it to equal.

135
00:10:13.340 --> 00:10:17.810
Now, we don't just want a hard code, a number here and guess right to make it dynamic.

136
00:10:17.810 --> 00:10:24.020
What we can do is dig in to our query object that we created up towards the top of this file.

137
00:10:24.020 --> 00:10:27.110
Remember, we named it past events.

138
00:10:27.500 --> 00:10:32.060
We just want to look within that object dash greater than.

139
00:10:32.270 --> 00:10:41.390
For a property named Max Knowm pages, at this point, we've given this pageant links function all of

140
00:10:41.390 --> 00:10:42.800
the information that it needs.

141
00:10:43.040 --> 00:10:45.950
So now if we save this and refresh.

142
00:10:47.490 --> 00:10:47.860
Cool.

143
00:10:47.880 --> 00:10:51.820
We do indeed see pagination links, but we are not done yet.

144
00:10:52.080 --> 00:10:57.210
Before I click on Next noticed that the current event we see is New Year 2016.

145
00:10:57.480 --> 00:11:03.540
So when I click on next to go to page two of results, you would expect to see a different post.

146
00:11:03.540 --> 00:11:04.110
But we don't.

147
00:11:04.410 --> 00:11:10.160
We still see the same one, even though up in the address bar we see page two.

148
00:11:10.440 --> 00:11:11.720
That's not working yet.

149
00:11:11.940 --> 00:11:17.880
And that's because our custom query that we wrote is not paying attention to page results yet.

150
00:11:18.090 --> 00:11:24.480
So to fix this, let's go back up to the top of our new template file up here when we are creating our

151
00:11:24.480 --> 00:11:30.660
custom query and we just need to add on a new parameter named page.

152
00:11:31.260 --> 00:11:36.300
So this tells the custom query which page number of results it should be on.

153
00:11:36.600 --> 00:11:43.200
So, again, for example, if we had 30 total posts and we were using 10 posts per page, there would

154
00:11:43.200 --> 00:11:45.270
be three pages worth of results.

155
00:11:45.300 --> 00:11:45.650
Right.

156
00:11:45.930 --> 00:11:48.350
So we could hard code a value here.

157
00:11:48.660 --> 00:11:53.340
So, for example, it's just hard code, a value of two and save that.

158
00:11:53.550 --> 00:11:59.820
And when we refresh now, instead of New Year 2016, we do indeed see math up.

159
00:12:00.090 --> 00:12:05.820
But we don't want to hard code a number here, because now, even if I go back to the first page of

160
00:12:05.820 --> 00:12:10.480
results, instead of seeing New Year twenty sixteen again, we see math meet up.

161
00:12:10.800 --> 00:12:16.440
So the question becomes instead of hard coding, which page number of results this should be, the question

162
00:12:16.440 --> 00:12:20.550
is how do we get the number that is up in the euro bar?

163
00:12:20.850 --> 00:12:21.140
Right.

164
00:12:21.150 --> 00:12:26.940
If we see the number two at the end of the URL here, that's the number we want to use in our query.

165
00:12:27.210 --> 00:12:33.390
Well, to make things dynamic, back in our text editor, let's delete that hardcoded two and instead

166
00:12:33.390 --> 00:12:42.840
we can run a function named get query var in this function can be used to get all sorts of information

167
00:12:42.840 --> 00:12:44.460
about the current RL.

168
00:12:44.670 --> 00:12:47.670
In our case, we are interested in that number at the end.

169
00:12:47.700 --> 00:12:49.350
Write the page result.

170
00:12:49.470 --> 00:12:56.460
So the property name that we want is just paged and then just to play it safe we can add on a comma

171
00:12:56.460 --> 00:12:59.520
and then a second argument and we can say number one.

172
00:12:59.820 --> 00:13:05.670
And what that's going to do is even if you go back to the first result, the first page CIA, it doesn't

173
00:13:05.670 --> 00:13:09.950
have a page slash one like we saw from page two.

174
00:13:10.320 --> 00:13:15.990
Well, this second argument is sort of the fallback or default number that will be used if WordPress

175
00:13:15.990 --> 00:13:18.450
can't find the page number dynamically.

176
00:13:18.750 --> 00:13:25.410
OK, so this highlighted code is saying go out and get that number at the end of the page DRL and if

177
00:13:25.410 --> 00:13:30.060
there isn't one to get, that probably just means we're on the first page of results.

178
00:13:30.060 --> 00:13:31.270
So you number one.

179
00:13:31.950 --> 00:13:33.180
So if we save that.

180
00:13:35.420 --> 00:13:41.690
I'm on page two of results and we see math meet up, and if I use these pagination links to go back

181
00:13:41.690 --> 00:13:46.000
to page one, perfect, we see New Year twenty sixteen.

182
00:13:46.400 --> 00:13:49.820
So that means pagination at this point in time is working.

183
00:13:50.090 --> 00:13:55.790
The moral of the story is that when you're using custom queries instead of relying on the default you

184
00:13:56.120 --> 00:13:59.840
based queries, there are a few hoops that you have to jump through.

185
00:14:00.050 --> 00:14:03.410
But it is possible to get pagination up and running.

186
00:14:03.710 --> 00:14:09.950
Now that we've tested out our pagination, we can safely go into our custom query and delete this posts

187
00:14:09.950 --> 00:14:11.540
per page equals one.

188
00:14:15.010 --> 00:14:15.400
Cool.

189
00:14:15.580 --> 00:14:21.550
So now we can rest assured that once there are more than 10 past events, pagination will kick in and

190
00:14:21.550 --> 00:14:22.340
do its job.

191
00:14:22.570 --> 00:14:27.910
Now, before we bring this lesson to a close, we should probably create a link that points towards

192
00:14:27.910 --> 00:14:31.080
this past events page somewhere else on our website.

193
00:14:31.540 --> 00:14:31.760
Right.

194
00:14:31.870 --> 00:14:34.730
How are the visitors supposed to navigate to this page?

195
00:14:35.050 --> 00:14:39.340
So up in the header, let's click on events to go to the events archive.

196
00:14:39.700 --> 00:14:45.730
And I'm thinking down here at the bottom of this archive, we add a bit of text that reads, looking

197
00:14:45.730 --> 00:14:48.780
for a recap of past events, click here.

198
00:14:49.120 --> 00:14:55.690
So to add that, let's jump into our text editor and open up the archive event file.

199
00:14:56.110 --> 00:14:59.410
We can scroll down to the very bottom right after this.

200
00:14:59.410 --> 00:15:03.040
Echo pagination links and the closing tag.

201
00:15:03.610 --> 00:15:15.570
Let's just add a paragraph and say looking for a recap of past events, check out our Past Events archive

202
00:15:16.270 --> 00:15:19.770
and then we probably want to wrap these words within an HTML link.

203
00:15:19.930 --> 00:15:21.760
So open up in a tag.

204
00:15:22.900 --> 00:15:24.210
Close the tag.

205
00:15:24.760 --> 00:15:26.780
Let's give it an address attribute.

206
00:15:27.220 --> 00:15:35.080
Now, if your sandbox development website lives at the root of a domain, you could just say slash past

207
00:15:35.080 --> 00:15:35.760
events.

208
00:15:35.950 --> 00:15:41.530
But if you're using man, for example, sometimes your WordPress site lives within a subdirectory of

209
00:15:41.530 --> 00:15:42.110
a domain.

210
00:15:42.400 --> 00:15:50.530
So for the ref, what I like to do just to be safe is drop into P and echo out the results of a function

211
00:15:50.530 --> 00:15:52.500
named site U.

212
00:15:52.510 --> 00:16:00.580
RL, and then within those parentheses we can just say slash past events and this function will generate

213
00:16:00.580 --> 00:16:01.800
an absolute U.

214
00:16:01.810 --> 00:16:04.830
RL based on the ending portion that we provided.

215
00:16:05.020 --> 00:16:06.410
So let's save that.

216
00:16:07.930 --> 00:16:08.580
Here it is.

217
00:16:08.800 --> 00:16:13.120
Now, this will get the job done, but we can improve the visual styling, right?

218
00:16:13.120 --> 00:16:15.570
There should probably be more of a vertical gap here.

219
00:16:16.090 --> 00:16:23.170
So back in our code, right above that new paragraph, let's create an HTML horizontal rule element

220
00:16:23.590 --> 00:16:29.770
and let's give it a class of section break just for a bit of CSFs styling.

221
00:16:31.930 --> 00:16:35.070
Cool, so that creates a subtle border and more vertical spacing.

222
00:16:35.110 --> 00:16:39.370
And now if we actually click on this link to test it out, perfect.

223
00:16:39.580 --> 00:16:43.480
But I do notice one thing we can fix up in the header navigation.

224
00:16:43.700 --> 00:16:48.850
The events link should be lit up as yellow because we are on the past events page.

225
00:16:49.060 --> 00:16:55.450
So to fix that header detail, let's jump into our text editor and open header up.

226
00:16:56.050 --> 00:16:57.510
Here's our navigation menu.

227
00:16:57.880 --> 00:17:00.520
Let's scroll down a bit to find the events link.

228
00:17:00.670 --> 00:17:03.100
So here's the list, item and link for events.

229
00:17:03.310 --> 00:17:06.150
You can see we've already got one conditional check.

230
00:17:06.430 --> 00:17:13.480
So we're saying if the post type of the default you are all based query is event, then echo out a class

231
00:17:13.480 --> 00:17:14.950
that will make the link yellow.

232
00:17:15.140 --> 00:17:21.730
So on the past events page, this will not evaluate to true because the default query on this URL is

233
00:17:21.730 --> 00:17:25.690
just this one single page named Past Events.

234
00:17:26.230 --> 00:17:33.790
So back in our code, what we can do right after this equal equal event, let's just say or and then

235
00:17:33.790 --> 00:17:40.750
call a function name is Page and for the argument past events.

236
00:17:40.930 --> 00:17:48.550
OK, so if this evaluates to true or if this evaluates to true, go ahead and light the link up as yellow.

237
00:17:48.910 --> 00:17:51.940
So we're on the past events page and it lights up perfect.

238
00:17:51.940 --> 00:17:55.750
And if we go back to the main events archive, it's still lights up.

239
00:17:56.110 --> 00:17:58.300
That's going to bring this lesson to a close.

240
00:17:58.480 --> 00:18:05.680
In our next lesson, we will completely change gears and create a brand new post Type four programs.

241
00:18:06.010 --> 00:18:11.080
Each program post will be a major like math or biology or history.

242
00:18:11.200 --> 00:18:17.860
And the fun part is that we're going to learn how to create relationships between events and programs.

243
00:18:18.220 --> 00:18:24.520
Learning how to create relationships from one post to another is one of the most powerful components

244
00:18:24.520 --> 00:18:25.470
of WordPress.

245
00:18:25.750 --> 00:18:27.670
This is where things are going to speed up a bit.

246
00:18:27.670 --> 00:18:28.720
It's going to be a lot of fun.

247
00:18:29.020 --> 00:18:31.150
Let's keep it rolling and I will see you then.
