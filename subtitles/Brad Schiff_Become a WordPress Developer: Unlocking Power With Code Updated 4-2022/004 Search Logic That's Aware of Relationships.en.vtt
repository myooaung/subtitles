WEBVTT
1
00:00:01.490 --> 00:00:02.580
Hello, everyone.

2
00:00:03.050 --> 00:00:10.370
In this lesson, we will learn how to implement custom search logic that is capable of searching by

3
00:00:10.370 --> 00:00:11.450
relationship.

4
00:00:11.870 --> 00:00:13.830
Let me show you what our goal is.

5
00:00:14.210 --> 00:00:20.990
So at the moment, if someone searches for biology, that's only going to pull in results that contain

6
00:00:20.990 --> 00:00:28.010
the word biology, either in the title or the main body content field, which means it's going to ignore

7
00:00:28.010 --> 00:00:31.880
professors that have their subject set to biology.

8
00:00:32.030 --> 00:00:34.300
And that's obviously not what we want.

9
00:00:34.580 --> 00:00:38.690
We would want our biology professors to appear right here in the results.

10
00:00:38.930 --> 00:00:40.220
Same thing with events.

11
00:00:40.220 --> 00:00:43.130
Any biology related events should display here.

12
00:00:43.490 --> 00:00:50.280
Way back earlier in the course, we learned how to set up relationships between one post and another.

13
00:00:50.600 --> 00:00:57.410
Well, now, in this lesson, our goal is to write custom code that makes our search aware of those

14
00:00:57.410 --> 00:00:58.470
relationships.

15
00:00:58.850 --> 00:01:01.310
So right now, let's work on making that happen.

16
00:01:01.850 --> 00:01:08.870
Now, I want to begin by saying that we do not need to learn any new code or functions in this lesson

17
00:01:08.870 --> 00:01:10.370
in order to achieve our goal.

18
00:01:10.700 --> 00:01:14.330
We've already learned all of the technical tools and code.

19
00:01:14.630 --> 00:01:20.270
And now the challenge at this point has very little to do with coding, and the challenge has more to

20
00:01:20.270 --> 00:01:23.630
do with thinking critically and mapping out a solution.

21
00:01:23.930 --> 00:01:29.590
So before we write any code, let's first create a plan in plain English.

22
00:01:29.900 --> 00:01:36.050
That way we're not stressing about semicolons and parentheses and code syntax, and we can use all of

23
00:01:36.050 --> 00:01:39.470
our brainpower on mapping out steps to a solution.

24
00:01:39.740 --> 00:01:41.810
Now, I know this is easier said than done.

25
00:01:41.970 --> 00:01:44.930
It's still really challenging to decide what you need to do.

26
00:01:45.140 --> 00:01:49.900
But a little trick that a mentor of mine taught me is to work backwards.

27
00:01:50.210 --> 00:01:56.400
What I mean by work backwards is don't try to map out your code solution from beginning to end.

28
00:01:56.750 --> 00:02:03.860
Instead, focus first on your end goal and then sort of reverse engineer or work backwards from there.

29
00:02:04.160 --> 00:02:07.040
Now, I know that everything I just said was super generic.

30
00:02:07.040 --> 00:02:10.330
So now let's apply this to the actual task at hand.

31
00:02:10.580 --> 00:02:16.160
So if I'm going to work backwards, that means that at first I'm not even going to worry about the phrase

32
00:02:16.190 --> 00:02:18.380
or the search term that the user typed in.

33
00:02:18.680 --> 00:02:23.450
Instead, I'm going to focus all of my energy on the thing that we want to pull in.

34
00:02:23.630 --> 00:02:23.950
Right.

35
00:02:23.960 --> 00:02:24.740
Which is related.

36
00:02:24.740 --> 00:02:32.090
Prof's So right now, why don't we go look at an example of a professor post over in the WordPress admin

37
00:02:32.090 --> 00:02:34.790
back and so over in my dashboard.

38
00:02:35.120 --> 00:02:37.640
I'm going to click on Prof's in the sidebar.

39
00:02:38.700 --> 00:02:44.580
And let me click on a professor that I know teaches biology in my case, that's Dr. Bachs a lot.

40
00:02:45.570 --> 00:02:53.010
And if I scroll down to the related programs field, we see that this post does indeed have a relationship

41
00:02:53.010 --> 00:02:54.850
with the biology program.

42
00:02:55.140 --> 00:03:02.340
Now, even though you and I see the word biology here, WordPress does not store the word biology in

43
00:03:02.340 --> 00:03:05.600
the database for this field for professor barks a lot.

44
00:03:05.820 --> 00:03:14.460
Instead, it only stores the numeric I.D. for the biology program post, which on my website is number

45
00:03:14.460 --> 00:03:15.360
97.

46
00:03:15.570 --> 00:03:18.510
But it's almost definitely a different number on your site.

47
00:03:18.870 --> 00:03:24.990
Now, before I move on and explain why this matters so much, I first want to show you how you can find

48
00:03:24.990 --> 00:03:27.790
the ID number of a related program.

49
00:03:28.050 --> 00:03:33.570
So, for example, if I wanted to find the ID of the biology program, I could just click programs in

50
00:03:33.570 --> 00:03:36.920
my sidebar and then click on Biology.

51
00:03:37.530 --> 00:03:42.690
And then up in my address bar I can see post equals and then a number.

52
00:03:42.960 --> 00:03:47.420
So throughout the next part of this lesson, I'm going to be using the number ninety seven.

53
00:03:47.640 --> 00:03:50.780
But for you it's almost definitely a different number.

54
00:03:50.970 --> 00:03:55.200
So take note of whatever number you see here on your WordPress website.

55
00:03:55.560 --> 00:04:02.280
The key point is that I just want you to have an ID number of a program post that, you know, professors

56
00:04:02.280 --> 00:04:03.630
have been assigned to.

57
00:04:03.840 --> 00:04:08.580
OK, so with your ID number in mind, let me go back to Professor Bachs lot.

58
00:04:08.850 --> 00:04:14.700
And the reason I bring up all of these issues regarding the ID number is because we can't search the

59
00:04:14.700 --> 00:04:19.940
database for professors where the related program equals the word biology.

60
00:04:20.520 --> 00:04:27.450
Instead, we need to search the database for instances where this field equals 97 or whatever your number

61
00:04:27.450 --> 00:04:27.900
is.

62
00:04:28.200 --> 00:04:30.840
Now, luckily, we already know how to do that.

63
00:04:31.020 --> 00:04:31.340
Right.

64
00:04:31.370 --> 00:04:36.570
For example, if we go to our website and up in the header, if we click on programs.

65
00:04:37.750 --> 00:04:39.550
And then if I click on Buyology.

66
00:04:40.780 --> 00:04:44.150
We've already learned how to write that exact query.

67
00:04:44.410 --> 00:04:50.800
We've already learned how to query for professors that have a relationship to a specific ID number.

68
00:04:51.100 --> 00:04:57.250
So our first task in terms of working backwards is let's just implement a query like this and we can

69
00:04:57.250 --> 00:05:02.890
use a hard coded value of ID number 97 or whatever your number is.

70
00:05:03.110 --> 00:05:08.320
And let's just work on integrating that query into our custom API URL.

71
00:05:08.530 --> 00:05:09.770
Jason results.

72
00:05:10.060 --> 00:05:11.460
That was a lot of buzzwords.

73
00:05:11.470 --> 00:05:18.580
So what I really mean is if you jump over to the Postman app and if you target our new custom, APU

74
00:05:18.580 --> 00:05:22.720
Ã³rale and say questionmark term equals biology.

75
00:05:23.050 --> 00:05:28.950
At the moment we don't see any prof's because obviously we haven't written that custom logic yet.

76
00:05:28.960 --> 00:05:35.950
And what I'm proposing for our first step in terms of working backwards is let's just hard code a query

77
00:05:36.100 --> 00:05:42.900
that pulls in any prof's based on an ID number of 97 or whatever your number is.

78
00:05:43.060 --> 00:05:49.750
But the idea is let's just hard and fake it to always look for biology at first.

79
00:05:50.080 --> 00:05:56.530
And then once we have that up and running, then we can hollow it out and make it dynamic and actually

80
00:05:56.530 --> 00:06:00.910
look for the correct ID number based on whatever someone is searching for.

81
00:06:01.060 --> 00:06:05.170
OK, but for now, let's not get ahead of ourselves for now.

82
00:06:05.200 --> 00:06:08.560
Let's just fake our query to always be for biology.

83
00:06:08.830 --> 00:06:11.440
So right now, let's finally go write some code.

84
00:06:11.620 --> 00:06:17.320
We know that if we want to modify the JSON that this Eurail returns, we just need to jump into our

85
00:06:17.320 --> 00:06:24.610
text editor and within our theme folder, look within the ANC folder and jump in to search dash root

86
00:06:25.030 --> 00:06:27.010
around line number 13.

87
00:06:27.040 --> 00:06:32.440
You can see we've already created one custom query by using the WP query class.

88
00:06:32.620 --> 00:06:38.050
And all we are doing here is searching through all of our post types based on a keyword.

89
00:06:38.170 --> 00:06:41.320
So this is our basic first layer of the search.

90
00:06:41.320 --> 00:06:43.240
But now we want to go deeper.

91
00:06:43.270 --> 00:06:45.870
We want to search based on relationships.

92
00:06:46.240 --> 00:06:52.900
So I'm actually going to create another separate query so we can scroll all the way down to the bottom

93
00:06:52.900 --> 00:06:53.770
of this file.

94
00:06:54.160 --> 00:07:00.520
And right before we return, the results right above that, let's just add a new line and notice my

95
00:07:00.520 --> 00:07:05.000
cursor is below this closing curly bracket for the while loop that's up above.

96
00:07:05.440 --> 00:07:08.820
So right here, let's just create a brand new query.

97
00:07:09.010 --> 00:07:10.300
So I'm going to create a variable.

98
00:07:10.300 --> 00:07:11.980
I could name it whatever I want.

99
00:07:11.980 --> 00:07:13.380
The name does not matter.

100
00:07:13.540 --> 00:07:24.610
I will call it program relationship query and set it to equal a new instance of the WP query class.

101
00:07:25.570 --> 00:07:28.570
And then within those parentheses, let's pass it in array.

102
00:07:29.740 --> 00:07:31.720
Within that array, let's dropdown.

103
00:07:32.620 --> 00:07:37.240
And first, let's say that post type should be professor.

104
00:07:37.510 --> 00:07:38.830
That's what we're looking for.

105
00:07:39.130 --> 00:07:43.900
A bit later on in the lesson we can update this to also look for events.

106
00:07:44.170 --> 00:07:51.700
But for now, let's just say Professor comma and then let's also provide a meta query, because that's

107
00:07:51.700 --> 00:07:55.000
how we can search based on the value of a custom field.

108
00:07:55.300 --> 00:07:57.820
So we want to set that to be an array.

109
00:07:58.300 --> 00:08:04.180
And then you might remember from earlier in the course within this array, we actually provide another

110
00:08:04.180 --> 00:08:04.740
array.

111
00:08:05.050 --> 00:08:11.680
The reason we do this is because WordPress lets you string together multiple filters, meaning you could

112
00:08:11.680 --> 00:08:17.410
have multiple inner arrays, each one being a filter, and they are nested within the outer array.

113
00:08:17.560 --> 00:08:18.040
All right.

114
00:08:18.040 --> 00:08:20.520
Now let's focus on building this inner array.

115
00:08:20.680 --> 00:08:25.150
We want to code a filter that looks within the related programs, custom field.

116
00:08:25.300 --> 00:08:31.270
So just to keep my sanity, I'm going to drop down onto a new line right before the A of this inner

117
00:08:31.270 --> 00:08:31.810
array.

118
00:08:32.650 --> 00:08:38.240
And then I will drop down again in between the two closing parentheses of the inner and outer array.

119
00:08:39.400 --> 00:08:39.850
Cool.

120
00:08:40.100 --> 00:08:42.060
So now let's just build out this filter.

121
00:08:42.070 --> 00:08:48.430
So within the inner array, when a dropdown again and I'm going to give it three properties or three

122
00:08:48.430 --> 00:08:51.120
arguments, the first one is key.

123
00:08:51.880 --> 00:08:54.250
So just set that to be a temporary X.

124
00:08:54.770 --> 00:08:56.530
Second one is Compar.

125
00:08:59.040 --> 00:09:01.350
And the third and final is value.

126
00:09:03.120 --> 00:09:05.110
OK, let's go through these one by one.

127
00:09:05.430 --> 00:09:10.530
The key is just the name of the advanced custom field that we want to look within.

128
00:09:10.800 --> 00:09:16.350
So back in the WordPress admin, it would just be whatever the short name, variable name for this custom

129
00:09:16.350 --> 00:09:18.680
field of related programs is.

130
00:09:19.380 --> 00:09:27.720
So instead of the placeholder X, I will say related underscore programs for compare, there are different

131
00:09:27.720 --> 00:09:29.700
ways of comparing values.

132
00:09:29.700 --> 00:09:35.330
In this case, we are not looking for an exact match, nor are we comparing actual numbers.

133
00:09:35.550 --> 00:09:41.130
We are actually searching for numbers disguised as strings nested inside an array.

134
00:09:41.400 --> 00:09:48.210
So long story short, the COMPAR method that we are going to use is like and then finally for value.

135
00:09:48.390 --> 00:09:52.800
Remember, we're just going to hard code this to always be looking for biology.

136
00:09:53.010 --> 00:09:58.320
And in my case that's an ID number of 97, but it might be a different number for you.

137
00:09:58.770 --> 00:10:05.280
So instead of X, let's say single quotes, and then within the single quotes, let's say double quotes

138
00:10:05.610 --> 00:10:10.620
and then our number, if you're wondering what's going on with the double quotes and single quotes here,

139
00:10:10.950 --> 00:10:16.020
you might just want to jump back to earlier in the course when we created our first made a query.

140
00:10:16.290 --> 00:10:20.160
Back then, we went over the details and reasoning for this in-depth.

141
00:10:20.500 --> 00:10:24.450
OK, now, at this point, we've got our new custom query next.

142
00:10:24.450 --> 00:10:30.720
We just want to loop through it and push each of the results onto the relevant empty array from way

143
00:10:30.720 --> 00:10:31.230
up here.

144
00:10:32.170 --> 00:10:37.540
Remember, we've got these different arrays for each post type, so just like we did with our main query,

145
00:10:37.840 --> 00:10:41.170
we looped through the results and put them in the appropriate location.

146
00:10:41.200 --> 00:10:43.440
Now, we just want to do that for our new query.

147
00:10:43.930 --> 00:10:48.870
So back down at the bottom of this file, right below our new custom query.

148
00:10:48.880 --> 00:10:55.360
Let's just set up a while, loop parentheses, curly brackets for the while condition.

149
00:10:55.360 --> 00:10:58.210
We just type in the name of this query variable.

150
00:10:58.510 --> 00:11:07.290
So program relation, ship query, look inside it for a method named have posts.

151
00:11:07.750 --> 00:11:12.850
OK then within the wire loop, you always want to begin by calling the method named the Post.

152
00:11:13.120 --> 00:11:16.120
So let me type out my annoyingly long query name again.

153
00:11:16.630 --> 00:11:18.880
Program relationship query.

154
00:11:19.300 --> 00:11:23.410
Look inside it and call the method the post OK.

155
00:11:23.440 --> 00:11:29.020
And now we can do whatever we want, but there's no sense in reinventing the wheel because if we scroll

156
00:11:29.020 --> 00:11:29.800
up just a bit.

157
00:11:31.330 --> 00:11:37.990
We've already got this if block that says if the post type is a professor, then create an array and

158
00:11:37.990 --> 00:11:39.560
push it onto the results.

159
00:11:39.580 --> 00:11:44.640
Professor Southbury, now this is exactly what we want to do down in our new wire loop.

160
00:11:44.950 --> 00:11:49.480
So I'm just going to copy this if block for the professor post type.

161
00:11:50.110 --> 00:11:51.090
Let's copy that.

162
00:11:51.490 --> 00:11:57.700
And then down towards the very bottom of the file in our new wire loop right after this.

163
00:11:57.700 --> 00:11:58.780
The post line.

164
00:11:58.780 --> 00:12:02.080
Let's create a little bit of space and then just paste in the clipboard.

165
00:12:02.450 --> 00:12:05.950
And now if we save this and refresh postman.

166
00:12:08.910 --> 00:12:15.630
Perfect within the professor's Arae, we now see the two professors that teach biology barks a lot and

167
00:12:15.630 --> 00:12:16.300
meows a lot.

168
00:12:16.830 --> 00:12:17.270
Cool.

169
00:12:17.280 --> 00:12:19.020
So we've got this working now.

170
00:12:19.020 --> 00:12:24.990
We just need to continue working backwards because remember that we faked this and we hardcoded it to

171
00:12:24.990 --> 00:12:26.930
always look for biology.

172
00:12:27.240 --> 00:12:33.060
Now, before we move on to the next step and learn how to search for the appropriate ID number based

173
00:12:33.060 --> 00:12:36.510
on the search phrase that the user is actually looking for.

174
00:12:36.900 --> 00:12:43.500
Before we address that, I first want to cover the possible issue of duplicate results, because now

175
00:12:43.500 --> 00:12:49.790
that we are running two queries, it's possible for a post to show up in both of the queries.

176
00:12:50.190 --> 00:12:51.480
Let me give you an example.

177
00:12:51.490 --> 00:12:58.800
So what if the doctor barks a lot post contained the word biology in its main body content field.

178
00:12:59.070 --> 00:13:04.830
Well, then it would show up once in our generic keyword query and then it would show up again in our

179
00:13:04.830 --> 00:13:06.140
relationship query.

180
00:13:06.690 --> 00:13:08.290
Let's test that out really quick.

181
00:13:08.310 --> 00:13:13.380
So over in the admin dashboard, here I am and the doctor barks a lot post.

182
00:13:13.380 --> 00:13:21.030
And if I updated the content field to say I love biology and go ahead and save.

183
00:13:22.260 --> 00:13:28.830
Now, if I go back to Postman and refresh within the professor's array, we see two instances of doctor

184
00:13:28.830 --> 00:13:29.580
barks a lot.

185
00:13:29.880 --> 00:13:37.020
And the reason for this we jump back to our code is because barks a lot will now show up in this main

186
00:13:37.020 --> 00:13:43.710
query that searches the title and body field for a keyword and barks a lot, is also going to show up

187
00:13:43.710 --> 00:13:45.180
in our custom query.

188
00:13:45.600 --> 00:13:48.240
So all we need to do to fix this is right.

189
00:13:48.240 --> 00:13:54.330
Before we return the results to the API, we just want to run a function that will remove duplicates

190
00:13:54.330 --> 00:13:55.370
from our array.

191
00:13:55.800 --> 00:14:06.210
So to do that, let's target our results, Prof's Southbury and let's set this to equal the results

192
00:14:06.210 --> 00:14:10.710
of a P function named Array Unique.

193
00:14:12.000 --> 00:14:17.910
And we want to give this function to things so we could say A and B, the first thing we give it is

194
00:14:17.910 --> 00:14:19.740
an array that we want to work with.

195
00:14:20.010 --> 00:14:22.320
So let's just give it our Prof's array.

196
00:14:22.530 --> 00:14:27.180
So results square brackets, professors.

197
00:14:27.870 --> 00:14:34.200
And for the second argument, we just want to tell this function to play nicely with associative arrays,

198
00:14:34.620 --> 00:14:40.710
meaning please look within each sub item of an array when you're trying to determine if they are a duplicate

199
00:14:40.710 --> 00:14:41.270
or not.

200
00:14:41.640 --> 00:14:46.800
So instead of B here, let's say sort of underscore regular.

201
00:14:47.310 --> 00:14:54.420
OK, now if we go ahead and save this, we should see that array unique removes any and all duplicates.

202
00:14:54.750 --> 00:14:58.230
So over in Posman, if we refresh, cool.

203
00:14:58.230 --> 00:14:59.340
Now we've only got one.

204
00:14:59.340 --> 00:15:00.870
Dr. Barks a lot again.

205
00:15:01.230 --> 00:15:07.710
However, we do see that that array unique function provides a numerical key for each item.

206
00:15:07.980 --> 00:15:08.280
Right.

207
00:15:08.280 --> 00:15:11.880
We didn't have this zero and two just a moment ago.

208
00:15:12.180 --> 00:15:15.570
And in order to stay super neat and organized, I don't want this.

209
00:15:15.810 --> 00:15:23.490
So to get rid of those, what we can do is wrap this array unique within something called array values.

210
00:15:23.790 --> 00:15:29.430
So check this out right before array unique, say, array, underscore values.

211
00:15:29.850 --> 00:15:34.980
And then I'm just going to place an opening parentheses here and then this needs a matching closing

212
00:15:34.980 --> 00:15:36.720
parentheses right down here.

213
00:15:37.590 --> 00:15:37.890
Cool.

214
00:15:37.890 --> 00:15:39.000
So let's give that a try.

215
00:15:39.000 --> 00:15:39.540
Save it.

216
00:15:39.540 --> 00:15:40.920
Refresh postman.

217
00:15:41.760 --> 00:15:42.420
Perfect.

218
00:15:42.870 --> 00:15:46.440
And that's going to bring part one of this lesson to a close.

219
00:15:46.770 --> 00:15:48.030
In our next video.

220
00:15:48.030 --> 00:15:55.470
We will adjust our solution so that it's not hard coded to always look for biology and instead actually

221
00:15:55.470 --> 00:15:59.130
pay attention to whatever phrase the user has searched for.

222
00:15:59.460 --> 00:16:01.800
Let's keep things rolling and I will see you then.
