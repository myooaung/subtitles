WEBVTT
1
00:00:01.130 --> 00:00:02.190
Hello, everyone.

2
00:00:02.660 --> 00:00:11.220
In this lesson, we will learn how to create our own brand new completely custom rest API you are now.

3
00:00:11.720 --> 00:00:17.990
Now, before we learn how to do this, let's first go over why we would do this.

4
00:00:18.350 --> 00:00:22.370
So we know that there are these rest API URLs like this.

5
00:00:22.670 --> 00:00:28.490
For example, this one will display JSON data for the ten most recent blog posts.

6
00:00:28.880 --> 00:00:36.620
Or we could go to slash pages or we could go to media or users.

7
00:00:36.800 --> 00:00:37.760
You get the idea.

8
00:00:37.910 --> 00:00:44.600
There are all sorts of built in WordPress, rest API you URLs that will let you fetch just about any

9
00:00:44.600 --> 00:00:46.130
data that you're looking for.

10
00:00:46.430 --> 00:00:52.870
And also, instead of just posts and pages, we could also try to visit a custom post type.

11
00:00:53.240 --> 00:00:55.370
So, for example, Professor.

12
00:00:57.490 --> 00:01:04.420
Now, by default, a custom post type will not be included in the rest API, so that's why we see an

13
00:01:04.420 --> 00:01:05.560
error message here.

14
00:01:05.860 --> 00:01:11.980
However, in order to get the professor post type to show up in the rest API, we are just one simple

15
00:01:11.980 --> 00:01:12.860
change away.

16
00:01:13.150 --> 00:01:19.330
So check this out right now in your text editor instead of your theme folder, I want you to open up

17
00:01:19.330 --> 00:01:20.050
the M.

18
00:01:20.050 --> 00:01:24.160
You must use plugins folder and within AMMU plug ins.

19
00:01:24.160 --> 00:01:27.190
Let's jump into our university post type's file.

20
00:01:27.640 --> 00:01:28.050
Right.

21
00:01:28.090 --> 00:01:31.060
This is the file where we register different post types.

22
00:01:31.480 --> 00:01:38.980
Let's scroll down to professors or I should say singular professor without an S and all we need to do

23
00:01:38.980 --> 00:01:42.130
is add a property within this associative array.

24
00:01:42.430 --> 00:01:51.970
So maybe right before the supports line, the ordering doesn't matter, but let's say show in rest and

25
00:01:51.970 --> 00:01:53.200
just set it to equal.

26
00:01:53.200 --> 00:01:53.740
True.

27
00:01:54.830 --> 00:02:03.800
OK, now, as soon as we save this now, we can indeed receive Rodgerson data for the ten most recently

28
00:02:03.800 --> 00:02:05.170
created professors.

29
00:02:05.660 --> 00:02:11.900
Now, at this point, you might be wondering if it's that easy to include custom post types in the rest

30
00:02:11.900 --> 00:02:12.680
API.

31
00:02:13.010 --> 00:02:19.250
If that's all it took, then why would we bother creating our own brand new API URLs?

32
00:02:19.730 --> 00:02:20.130
Right.

33
00:02:20.150 --> 00:02:22.670
Why don't we just use this Appu URL?

34
00:02:22.940 --> 00:02:25.510
Well, let me give you a real world example.

35
00:02:26.270 --> 00:02:31.670
So in our search overlay, we don't only want to search for posts and pages.

36
00:02:32.150 --> 00:02:37.520
So if I search for Buyology, I also want to see a link to the biology program.

37
00:02:37.820 --> 00:02:41.990
And also I want to see professors that teach biology.

38
00:02:42.320 --> 00:02:46.250
And I also want to see any campuses where biology is taught.

39
00:02:46.670 --> 00:02:51.880
And finally, I also want to see any upcoming events that are related to biology.

40
00:02:52.160 --> 00:02:55.010
However, WordPress is built in search.

41
00:02:55.010 --> 00:02:57.440
Logic is not very advanced.

42
00:02:57.800 --> 00:03:01.340
And so sometimes we need to take matters into our own hands.

43
00:03:01.760 --> 00:03:07.580
Let me show you what I mean back at this rest API URL for the professor post type.

44
00:03:07.940 --> 00:03:16.460
If we add on at the very end, questionmark search equals then we can enter any keyword that we want

45
00:03:16.460 --> 00:03:17.270
to search for.

46
00:03:17.600 --> 00:03:21.740
So for example, I know that I have a professor named Dr. Bachs a lot.

47
00:03:21.740 --> 00:03:30.890
So if I say search equals Bachs a lot, the search is successful and now we only see the JSON data for

48
00:03:30.890 --> 00:03:31.130
that.

49
00:03:31.130 --> 00:03:34.730
One post for the doctor barks a lot, Professor.

50
00:03:35.180 --> 00:03:43.520
However, if instead of barks a lot, I search for biology, then we see zero results.

51
00:03:44.000 --> 00:03:49.760
And this can be confusing at first because we know that we have professors that teach biology.

52
00:03:50.300 --> 00:03:50.570
Right?

53
00:03:50.570 --> 00:03:58.130
If I go on to my website and click on programs and then biology, we know that we have two biology professors,

54
00:03:58.130 --> 00:03:58.400
right?

55
00:03:58.520 --> 00:03:59.610
Dr. Bachs lot.

56
00:03:59.750 --> 00:04:00.870
Dr. Miaows a lot.

57
00:04:01.130 --> 00:04:07.610
Now, the reason those professors are not showing up when I run this search is because the native WordPress

58
00:04:07.610 --> 00:04:15.380
search logic only searches within really obvious fields like the title field and the main body content

59
00:04:15.380 --> 00:04:15.920
field.

60
00:04:16.160 --> 00:04:22.160
WordPress doesn't know to search within our custom fields, and even if it did, it wouldn't know how

61
00:04:22.160 --> 00:04:27.020
to interpret the relationships that we set up between different post types.

62
00:04:27.380 --> 00:04:32.350
Right, like between a program and a professor or a program and a campus.

63
00:04:32.690 --> 00:04:34.280
So that's the bad news.

64
00:04:34.400 --> 00:04:42.200
But the good news is that if we create our own brand new completely custom API neutral, well, then

65
00:04:42.200 --> 00:04:49.790
we can do whatever we want and we can code our own new custom search logic, logic that will indeed

66
00:04:49.790 --> 00:04:54.490
be aware of relationships between different posts and post types.

67
00:04:54.900 --> 00:05:01.790
OK, now, before we get started and begin coding our new custom API u RL, before we get into that,

68
00:05:01.790 --> 00:05:06.230
I want to go over the four main reasons of why we're doing this.

69
00:05:06.500 --> 00:05:09.320
So number one out of four is what we just talked about.

70
00:05:09.530 --> 00:05:12.380
We need our own custom search logic.

71
00:05:12.740 --> 00:05:20.660
Reason number two is so we can customize things to send back way less raw JSON data because the default

72
00:05:20.660 --> 00:05:27.110
WordPress, API URLs, they send back literally everything about a post.

73
00:05:27.650 --> 00:05:28.880
It gives us the date.

74
00:05:28.880 --> 00:05:34.790
It gives us the actual body content field, just a whole bunch of stuff when really in terms of our

75
00:05:34.790 --> 00:05:39.830
search overlay, all we really need is the title A Permalink.

76
00:05:40.190 --> 00:05:44.180
And in the case of Prof's, maybe a Eurail to a thumbnail image.

77
00:05:44.540 --> 00:05:51.020
Now that would be way less data to send back, which means the search would load faster for our visitors,

78
00:05:51.230 --> 00:05:54.380
especially if someone was on a slow mobile connection.

79
00:05:54.710 --> 00:06:02.480
Reason number three is so that our front end JavaScript can just send one single get JSON request instead

80
00:06:02.480 --> 00:06:03.350
of six.

81
00:06:03.680 --> 00:06:10.010
Right, because the default API URLs, they only return a single post type at a time.

82
00:06:10.250 --> 00:06:10.520
Right.

83
00:06:10.520 --> 00:06:15.590
You've got one you URL for posts, another four pages, another for Prof's.

84
00:06:15.860 --> 00:06:24.050
Whereas if we code our own new API URL, we can search and work with all six post types at once so that

85
00:06:24.050 --> 00:06:25.940
can speed things up a bit as well.

86
00:06:26.390 --> 00:06:34.160
And finally, reason number four is that this is quite literally the perfect exercise to sharpen our

87
00:06:34.820 --> 00:06:41.840
skills, the act of trying to search for just the right data and then needing to format the data into

88
00:06:41.840 --> 00:06:43.820
just the right structure.

89
00:06:44.150 --> 00:06:48.050
That's the perfect recipe for strengthening your skills.

90
00:06:48.350 --> 00:06:50.750
It's going to be a tremendous learning experience.

91
00:06:51.140 --> 00:06:54.290
So without further ado, let's get started the.

92
00:06:54.330 --> 00:07:00.450
First step is to jump into your text editor and for the time being, we can forget about the Mew Plugins

93
00:07:00.450 --> 00:07:00.960
folder.

94
00:07:01.320 --> 00:07:07.800
And let's jump back to our theme folder, OK, within the theme folder, open up functions.

95
00:07:09.570 --> 00:07:15.600
Now, we could just start writing all of the new code right here within this file, but a bit of a spoiler

96
00:07:15.600 --> 00:07:15.990
alert.

97
00:07:16.200 --> 00:07:23.280
We are going to be writing a good amount of code and I don't want our functions file to become huge

98
00:07:23.280 --> 00:07:24.510
and unmaintainable.

99
00:07:24.990 --> 00:07:29.880
So a good way to stay organized is to create a brand new separate file.

100
00:07:30.120 --> 00:07:33.920
And then we can just include or require in that file right here.

101
00:07:34.410 --> 00:07:38.510
Technically, you could create the new file anywhere within your theme folder.

102
00:07:38.790 --> 00:07:46.410
But just to stay organized, why don't we create a new subfolder named includes or we can even just

103
00:07:46.410 --> 00:07:48.300
name it I n c for sure.

104
00:07:48.600 --> 00:07:52.080
The name of the folder does not matter, just personal preference.

105
00:07:52.440 --> 00:07:59.550
So if I write, click on the theme folder and choose a new folder and give it a name of I n c four includes,

106
00:08:00.390 --> 00:08:02.220
feel free to name it, whatever you want.

107
00:08:02.220 --> 00:08:06.300
But then within that new subfolder, let's create a new file.

108
00:08:07.110 --> 00:08:08.700
And for now, let's just open up.

109
00:08:10.020 --> 00:08:11.040
That's all we need for now.

110
00:08:11.040 --> 00:08:12.390
Let's save this file.

111
00:08:12.630 --> 00:08:15.690
And the name of this file definitely does not matter.

112
00:08:16.020 --> 00:08:18.570
But just to make sense, I'm going to name it.

113
00:08:18.570 --> 00:08:23.280
Search Dash Routt dot p p.

114
00:08:25.370 --> 00:08:31.220
Cool, so now we've got our new subfolder, and that's where the new fire lives now back and functions

115
00:08:32.030 --> 00:08:33.680
pop up at the top here.

116
00:08:33.700 --> 00:08:38.840
Let's just write a new line of code that pulls in or requires in that separate file.

117
00:08:38.990 --> 00:08:42.350
So to do that, we can just say require and then a space.

118
00:08:42.710 --> 00:08:48.530
And then there's a WordPress function named Get the file path.

119
00:08:50.480 --> 00:08:57.950
And for the argument, we can just say quotes forward slash and then look inside the ANC subfolder and

120
00:08:57.950 --> 00:09:00.570
then just type out the name of your brand new separate file.

121
00:09:00.590 --> 00:09:02.870
So for me, that search dash route.

122
00:09:04.910 --> 00:09:07.940
OK, let's go ahead and save this function's file.

123
00:09:08.270 --> 00:09:13.880
And really quick, I just want to stress the fact that you do not need to do this in order to create

124
00:09:13.880 --> 00:09:15.800
a custom rest API you.

125
00:09:16.520 --> 00:09:18.820
This has nothing to do with the task at hand.

126
00:09:18.860 --> 00:09:21.770
This is just a general tip for staying organized.

127
00:09:21.950 --> 00:09:25.490
If you wanted to, you could break down each one of these current functions.

128
00:09:25.490 --> 00:09:28.160
We've written into its own separate file.

129
00:09:28.610 --> 00:09:33.410
You could have one for this, another one for our page banner function, and then you could just have

130
00:09:33.410 --> 00:09:35.900
several of these require in lines.

131
00:09:36.260 --> 00:09:37.280
It's totally up to you.

132
00:09:37.400 --> 00:09:39.480
But let's get back to the task at hand.

133
00:09:39.890 --> 00:09:45.830
So now let's jump into that brand new separate file that we just created, search dash route.

134
00:09:46.160 --> 00:09:53.570
And the first thing we want to do is add an action so the WordPress function, add action for the first

135
00:09:53.570 --> 00:09:54.080
argument.

136
00:09:54.080 --> 00:09:57.500
We just list the WordPress event we want to hook on to.

137
00:09:57.800 --> 00:10:03.020
We've already used this once and that is reste API init.

138
00:10:03.710 --> 00:10:08.150
And then the second argument is a function that we want to run at that moment.

139
00:10:08.420 --> 00:10:10.550
We can make up any function name we want.

140
00:10:11.060 --> 00:10:17.000
But why don't we go with university register search?

141
00:10:17.420 --> 00:10:18.830
I just made up this name.

142
00:10:18.980 --> 00:10:20.510
There's nothing magical about it.

143
00:10:21.170 --> 00:10:28.580
Now let's go ahead and create a function with this exact name so we can say function and then match

144
00:10:28.580 --> 00:10:29.090
that name.

145
00:10:29.090 --> 00:10:35.300
So university register, search parentheses, curly brackets.

146
00:10:35.660 --> 00:10:40.880
And now within the body of this function, this is where the naming does need to be specific.

147
00:10:41.120 --> 00:10:51.560
There is a WordPress function named Register Reste wrapped in this function takes three arguments.

148
00:10:51.560 --> 00:10:58.880
So just as a placeholder, let's say A, B, C, the first argument is the namespace that you want to

149
00:10:58.880 --> 00:10:59.510
use.

150
00:10:59.750 --> 00:11:00.710
But what does that mean?

151
00:11:00.710 --> 00:11:02.790
What in the world is a namespace?

152
00:11:03.140 --> 00:11:08.330
Well, remember, our goal is that we want to create a new rest API you URL.

153
00:11:09.230 --> 00:11:16.550
Now, if we look at this default epidural for the professor post type, the namespace of this you URL

154
00:11:16.550 --> 00:11:23.630
is WP and WP indicates that this is a default part of the core of WordPress.

155
00:11:23.960 --> 00:11:30.170
So when we are coding, we don't want to use the WP namespace because we are likely not working on the

156
00:11:30.170 --> 00:11:31.760
core of WordPress.

157
00:11:32.030 --> 00:11:34.250
We are working on our own custom features.

158
00:11:34.250 --> 00:11:36.970
Right, probably either a theme or a plug in.

159
00:11:37.400 --> 00:11:41.930
So back in our code for our namespace, why don't we just say university?

160
00:11:42.530 --> 00:11:48.080
You want to choose a name that's fairly unique so that you won't run into any conflicts with plug ins.

161
00:11:48.540 --> 00:11:51.650
OK, now the second argument is the root.

162
00:11:52.220 --> 00:11:53.260
So what is a root?

163
00:11:53.270 --> 00:12:00.080
Well, in this case of this API URL for the professor post type, in this instance, the word professor

164
00:12:00.080 --> 00:12:01.010
is the root.

165
00:12:01.430 --> 00:12:06.920
Or if we go back to posts now, the word posts is the root root.

166
00:12:06.920 --> 00:12:09.740
So the root is the ending part of the euro.

167
00:12:09.920 --> 00:12:12.230
It's the specific thing that you want to do.

168
00:12:12.260 --> 00:12:15.650
So for our root, why don't we say search?

169
00:12:16.310 --> 00:12:21.650
OK, now, before we move on and talk about the third argument, I want to answer a question you might

170
00:12:21.650 --> 00:12:27.110
have right now, because back in the address bar, you might be wondering, well, what is the V two?

171
00:12:27.410 --> 00:12:32.330
If this is the namespace and this is the root, where does version two come into play?

172
00:12:32.900 --> 00:12:35.570
Well, technically, that's just part of the namespace.

173
00:12:35.810 --> 00:12:38.870
It's always a good idea to include V one or V two.

174
00:12:39.200 --> 00:12:45.110
So that way, if anyone else was using your API and you make huge changes to it, instead of pulling

175
00:12:45.110 --> 00:12:50.090
the rug out from underneath someone's feet, if you need to make huge changes, you can just bump this

176
00:12:50.090 --> 00:12:52.130
up to V three or four.

177
00:12:52.580 --> 00:12:58.190
So that way, once other people start depending on and using your API, you never really change any

178
00:12:58.190 --> 00:12:59.840
of the existing URLs.

179
00:13:00.080 --> 00:13:02.330
You can just add a new version if necessary.

180
00:13:02.570 --> 00:13:06.470
So long story short, the version number is just part of the namespace.

181
00:13:06.470 --> 00:13:13.130
So as a good practice within our name of university, within these quotes, we could just add on a slash

182
00:13:13.430 --> 00:13:14.240
V1.

183
00:13:14.630 --> 00:13:17.810
Right, because this is the first version of what we are building.

184
00:13:18.200 --> 00:13:18.620
All right.

185
00:13:18.620 --> 00:13:20.720
Now, let's talk about the third argument.

186
00:13:21.230 --> 00:13:24.410
This is where we simply supply an array, the.

187
00:13:24.480 --> 00:13:30.710
Describes what should happen when someone visits this euro, so within the parentheses for this array,

188
00:13:30.710 --> 00:13:36.230
let's drop down, just stay organized and now we just build out an associative array.

189
00:13:36.410 --> 00:13:39.800
The first name that we want to target is Method's.

190
00:13:40.640 --> 00:13:44.090
So let's just set that to a temporary X placeholder.

191
00:13:44.480 --> 00:13:48.200
And the other name that we want to target is callback.

192
00:13:50.330 --> 00:13:56.990
So when we see the word methods, I want you to think of the CRUD acronym, remember S.R. U.D., which

193
00:13:56.990 --> 00:14:03.680
stood for Create, Read, Update and delete, or in other words, when someone visits this, you URL,

194
00:14:03.980 --> 00:14:05.390
what are they trying to do?

195
00:14:05.630 --> 00:14:08.780
Well, in our case, they're just trying to load or read data.

196
00:14:09.050 --> 00:14:13.060
And the technical way of doing that is by sending a get request.

197
00:14:13.340 --> 00:14:20.810
So instead of this placeholder, let's say quotes gipped, now this value of git will almost always

198
00:14:20.810 --> 00:14:21.260
work.

199
00:14:21.470 --> 00:14:27.290
But if you want to go the extra mile and make sure that your code will work on every Web host out there

200
00:14:27.470 --> 00:14:36.800
instead of quotes git, we can say WPE rest server, colon, colon readable.

201
00:14:37.550 --> 00:14:39.830
And this is just a WordPress constant.

202
00:14:40.160 --> 00:14:43.430
That's basically just going to substitute it for a value of git.

203
00:14:43.790 --> 00:14:48.620
But depending on the type of web host you're using, it might use a slightly different value instead

204
00:14:48.620 --> 00:14:49.040
of git.

205
00:14:49.040 --> 00:14:51.770
So this is the safest way of doing things.

206
00:14:52.130 --> 00:14:54.770
OK, and then finally, let's address callback.

207
00:14:55.010 --> 00:15:02.270
We want to set this to a function and then whatever this function returns is the JSON data that will

208
00:15:02.270 --> 00:15:03.140
be displayed.

209
00:15:03.470 --> 00:15:08.570
So instead of this placeholder, let's just make up a function name could be anything.

210
00:15:08.930 --> 00:15:13.820
Why don't we call it university search results?

211
00:15:14.480 --> 00:15:18.980
OK, and now our final step is to just create a function with this exact name.

212
00:15:19.610 --> 00:15:24.500
So down at the very bottom, let's just say function, then match that name.

213
00:15:24.500 --> 00:15:29.990
So university search results, parentheses, curly brackets.

214
00:15:30.350 --> 00:15:40.790
And now just as a test, let's return a string of text that says congratulations, you created a root

215
00:15:42.080 --> 00:15:44.510
and then at the very end include a semicolon.

216
00:15:44.840 --> 00:15:45.230
All right.

217
00:15:45.230 --> 00:15:51.230
Now let's go ahead and save this file and jump over to the browser and test out our New York URL.

218
00:15:51.470 --> 00:16:00.020
So up in the address bar after the root of your WordPress install, let's add on slash WP, JSON, and

219
00:16:00.020 --> 00:16:05.690
then instead of WP, we use our new namespace, which was university.

220
00:16:06.470 --> 00:16:13.010
And remember, we said university slash V1, then a slash and then just the name of our route, which

221
00:16:13.010 --> 00:16:14.450
we named search.

222
00:16:16.150 --> 00:16:23.170
Perfect congratulations, you created a rout and that's going to bring this lesson to a close in our

223
00:16:23.170 --> 00:16:27.040
next lesson, we will learn how to do something actually useful here.

224
00:16:27.370 --> 00:16:27.670
Right.

225
00:16:27.670 --> 00:16:34.180
And return real WordPress content and raw JSON data instead of this placeholder message should be a

226
00:16:34.180 --> 00:16:34.810
lot of fun.

227
00:16:35.050 --> 00:16:37.180
Let's keep it rolling and I'll see you then.
