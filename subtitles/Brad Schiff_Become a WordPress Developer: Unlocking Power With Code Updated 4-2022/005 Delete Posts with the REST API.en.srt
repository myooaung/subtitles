1
00:00:01,910 --> 00:00:03,030
Hello, everyone.

2
00:00:03,170 --> 00:00:10,900
In this lesson, we will continue to work on the edit and delete features for our my notes user interface.

3
00:00:11,390 --> 00:00:13,940
So here I am on the my notes page.

4
00:00:14,120 --> 00:00:18,230
And in our previous lesson, we worked on this delete button.

5
00:00:18,650 --> 00:00:24,380
And now the first thing I want to do in this lesson is make this delete button flexible, because you

6
00:00:24,380 --> 00:00:31,340
might remember that in the previous lesson we hard coded ID number to always point towards a specific

7
00:00:31,340 --> 00:00:32,060
post.

8
00:00:32,400 --> 00:00:33,580
Let me show you what I mean.

9
00:00:33,590 --> 00:00:39,710
So jump into your text editor and within the theme folder, let's look within the jazz folder and then

10
00:00:39,710 --> 00:00:48,080
the modules folder and open up are my notes J.S. and within our delete note method for the Eurail.

11
00:00:48,110 --> 00:00:55,610
Remember, we hardcoded a specific ID number at the end here and we only did this as a quick test.

12
00:00:55,740 --> 00:01:02,180
We don't actually want this because as it stands, no matter which delete button you click on, it's

13
00:01:02,180 --> 00:01:05,960
always going to try to delete that one post with this ID.

14
00:01:06,380 --> 00:01:12,350
So instead of hard coding and ID number here, let's set things up so that when you click the delete

15
00:01:12,350 --> 00:01:19,850
button, our JavaScript detects which post it's sitting next to and grabbed the ID for that specific

16
00:01:19,850 --> 00:01:20,490
post.

17
00:01:20,840 --> 00:01:22,320
Now before we set that up.

18
00:01:22,550 --> 00:01:29,090
Why don't we first go in to the admin dashboard and dig into the trash and restore the note post that

19
00:01:29,090 --> 00:01:32,150
we deleted at the very end of the previous lesson.

20
00:01:32,510 --> 00:01:35,650
So that way we have multiple posts to work with once again.

21
00:01:36,080 --> 00:01:40,310
So over in my dashboard, if I click on notes in the sidebar.

22
00:01:41,420 --> 00:01:44,120
And then right here, if I click on trash.

23
00:01:45,560 --> 00:01:49,350
Here's the note post the matches, the ID number that we hardcoded.

24
00:01:49,700 --> 00:01:53,930
So it was successfully deleted, but just as a test, let's restore it.

25
00:01:56,020 --> 00:01:58,720
OK, and now back on the front end, if I refresh.

26
00:01:59,910 --> 00:02:06,140
Cool, we've got two posts again, so now let's work to make the delete button flexible and use the

27
00:02:06,150 --> 00:02:09,520
ID of whatever post it's sitting right next to.

28
00:02:10,080 --> 00:02:16,860
So back in our text editor, if we want our JavaScript to find the actual ID number for the relevant

29
00:02:16,860 --> 00:02:24,450
post, we need to make sure that that ID number lives somewhere in our HTML so that our JavaScript can

30
00:02:24,450 --> 00:02:25,020
find it.

31
00:02:25,410 --> 00:02:27,560
So let me show you what I mean right now.

32
00:02:27,570 --> 00:02:32,460
Let's jump in to page dash my notes P.

33
00:02:34,130 --> 00:02:41,300
And let's scroll down to the list item that's getting output once for each note post, right.

34
00:02:41,310 --> 00:02:42,970
This is the input for the title.

35
00:02:42,980 --> 00:02:45,050
This is the text area for the body.

36
00:02:45,410 --> 00:02:51,290
And what I want to do on the opening elai tag is add a data attribute.

37
00:02:51,390 --> 00:02:55,640
So let's say data, and then we can make up whatever name we want.

38
00:02:55,830 --> 00:02:57,530
Let's just call it ID.

39
00:02:58,490 --> 00:03:00,800
So data ID equals.

40
00:03:00,800 --> 00:03:09,560
And then within the quotes we can just drop in to BHP and call a WordPress function named the Underscore

41
00:03:09,890 --> 00:03:10,620
ID.

42
00:03:11,330 --> 00:03:11,660
Cool.

43
00:03:11,690 --> 00:03:17,780
Now if we save that and then jump back into our browser and be sure to refresh if you're not using the

44
00:03:17,780 --> 00:03:19,190
preview proxy server.

45
00:03:19,370 --> 00:03:22,790
But now, if I may be right, click on the edit button and choose.

46
00:03:22,790 --> 00:03:23,660
Inspect.

47
00:03:24,800 --> 00:03:25,160
Cool.

48
00:03:25,160 --> 00:03:31,730
So you can see that here is the overall bulleted list, the you out and then each note is a list item

49
00:03:32,240 --> 00:03:36,810
and now the ID for that matching post lives in our HTML.

50
00:03:37,190 --> 00:03:44,180
So now in our JavaScript we can access the relevant ID number depending on which delete button you click

51
00:03:44,180 --> 00:03:44,480
on.

52
00:03:44,960 --> 00:03:47,480
So let's go update our JavaScript right now.

53
00:03:48,080 --> 00:03:54,650
Back in the text editor over in our JavaScript, within our delete note method, we need to know which

54
00:03:54,650 --> 00:03:56,310
element got clicked on.

55
00:03:56,660 --> 00:04:02,300
Now, luckily, when we set up this event, listener up here, when it detects a click and then fires

56
00:04:02,300 --> 00:04:09,490
off this function in response, it's going to pass along information about the event into that function.

57
00:04:09,830 --> 00:04:14,270
So within the parentheses for this function definition, we can include a parameter.

58
00:04:15,140 --> 00:04:18,200
You could call it event or you could name it whatever you want.

59
00:04:18,200 --> 00:04:23,900
But a lot of times people just say E, which is a lot quicker to type than event.

60
00:04:24,360 --> 00:04:30,980
OK, but with that in place now within the body of this function, we can access this specific element

61
00:04:30,980 --> 00:04:32,030
that got clicked on.

62
00:04:32,270 --> 00:04:36,020
So check this out maybe right before the beginning of this Ajax line.

63
00:04:36,020 --> 00:04:41,690
Let's add a new line and let's create a variable and we can name it whatever we want.

64
00:04:41,930 --> 00:04:44,480
Let's call it this note.

65
00:04:45,140 --> 00:04:51,650
And I want this variable to point towards the list item that contains the delete button that just got

66
00:04:51,650 --> 00:04:52,340
clicked on.

67
00:04:52,670 --> 00:04:54,590
So I'm going to use J query.

68
00:04:54,590 --> 00:04:58,430
And what I want to select is e dot target.

69
00:04:58,880 --> 00:05:03,740
We can look within that parameter that contains information about what got clicked on.

70
00:05:04,070 --> 00:05:06,200
We can look inside it for the target.

71
00:05:06,440 --> 00:05:10,190
OK, so this will be the particular delete button that got clicked on.

72
00:05:10,520 --> 00:05:18,560
And then right after that we can say dot parents to look for one of its ancestor elements and then let's

73
00:05:18,560 --> 00:05:25,760
just look for Anelli tag, because that's the overall element that contains the data attribute with

74
00:05:25,760 --> 00:05:27,000
the ID number.

75
00:05:27,350 --> 00:05:27,670
Cool.

76
00:05:27,680 --> 00:05:31,360
So now we've got this variable that we can use down on this line.

77
00:05:31,520 --> 00:05:32,330
So check this out.

78
00:05:32,330 --> 00:05:37,100
Let's delete the hardcoded number here and keep the forward slash.

79
00:05:37,100 --> 00:05:44,450
And then right after the quotes, let's just add on something new and then say this note, which is

80
00:05:44,450 --> 00:05:52,340
this new variable that we created, and then we can access its data attributes by saying DOT data and

81
00:05:52,340 --> 00:05:57,440
then just include whatever attribute you're looking for, which in our case is ID.

82
00:05:57,650 --> 00:06:04,340
And even though we named the data attribute data dash ID, when you use the query data method, you

83
00:06:04,340 --> 00:06:06,580
don't need to include the data dash.

84
00:06:07,070 --> 00:06:13,580
So we can just say ID cool and this will get us the ID number for the relevant post.

85
00:06:14,000 --> 00:06:15,950
So let's go ahead and save this.

86
00:06:16,340 --> 00:06:21,830
And then back in the browser before we click on one of the delete buttons, I recommend performing a

87
00:06:21,830 --> 00:06:27,740
hard refresh because sometimes the browser will use a cached copy of our JavaScript.

88
00:06:28,010 --> 00:06:33,530
So to do that you can hold down control or shift and click the browsers reload button.

89
00:06:35,500 --> 00:06:42,870
OK, and then if I try to delete biology, lecture, click, delete, check the console, we see congrats.

90
00:06:42,880 --> 00:06:44,800
And if I refresh the page.

91
00:06:45,930 --> 00:06:51,090
Biologies gone, and then if I try to delete math, lecture, refresh.

92
00:06:52,550 --> 00:06:53,910
Cool, now they're both gone.

93
00:06:54,230 --> 00:07:01,640
However, we shouldn't have to manually refresh the page if our JavaScript detects that the delete request

94
00:07:01,640 --> 00:07:02,610
was successful.

95
00:07:02,900 --> 00:07:06,740
I think we should remove the note from the page on the fly.

96
00:07:07,040 --> 00:07:11,770
So to practice doing that, let's go restore those trashed or deleted posts.

97
00:07:12,500 --> 00:07:19,340
So back in the admin dashboard, refresh your notes screen and then if we click on trash.

98
00:07:20,390 --> 00:07:22,190
Let's just restore both of them.

99
00:07:23,120 --> 00:07:27,110
Go back into trash, restore the other one, cool.

100
00:07:29,250 --> 00:07:35,940
Now, let's go update our JavaScript so that if a delete request is successful, we just fade out and

101
00:07:35,940 --> 00:07:39,840
delete that post from the page in real time on the fly.

102
00:07:40,050 --> 00:07:46,410
So back in our JavaScript, within our delete note method, let's focus on the success property.

103
00:07:46,770 --> 00:07:47,050
Right.

104
00:07:47,070 --> 00:07:51,440
This is the function that's going to run if the delete request is successful.

105
00:07:51,840 --> 00:07:55,110
So maybe right above this console log line.

106
00:07:55,110 --> 00:07:58,920
Let's add a new line and let's just say this note.

107
00:07:59,100 --> 00:08:04,440
Remember, that's the variable that we just created that points towards the parent list item.

108
00:08:04,800 --> 00:08:08,430
And that list item contains everything related to that post.

109
00:08:08,670 --> 00:08:11,730
So we can just basically delete that from the page.

110
00:08:12,000 --> 00:08:19,680
So this note and then just say Dot and J query has a method named slide up which basically removes the

111
00:08:19,680 --> 00:08:23,420
element from the page using a nice slide up animation.

112
00:08:23,880 --> 00:08:28,050
So let's go ahead and save that tested out on the front end.

113
00:08:29,250 --> 00:08:31,350
So if I try to delete math lecture.

114
00:08:33,040 --> 00:08:35,230
Cool, let's try biology.

115
00:08:36,070 --> 00:08:36,770
Perfect.

116
00:08:37,240 --> 00:08:40,450
So that takes care of the ability to delete notes.

117
00:08:40,780 --> 00:08:44,520
Now let's change gears and learn how to edit notes.

118
00:08:44,890 --> 00:08:51,070
But first, why don't we jump in to our admin dashboard and restore those two deleted or trashed notes

119
00:08:51,370 --> 00:08:53,600
so that we have dummy data to work with.

120
00:08:53,890 --> 00:09:01,840
So back in the admin, refresh the notes screen, click on trash, and if I check the box for both of

121
00:09:01,840 --> 00:09:06,220
them and then choose restor apply cool.

122
00:09:06,220 --> 00:09:07,630
They are both restored.

123
00:09:08,590 --> 00:09:13,480
OK, and now let's learn how to send updates back to the WordPress server.

124
00:09:13,780 --> 00:09:21,610
So for example, if you clicked on math lecture and you could change the title to math notes number

125
00:09:21,610 --> 00:09:28,020
twenty, well then the question becomes how do we send this new data to the WordPress server?

126
00:09:28,300 --> 00:09:32,740
How can we update an existing post from the front end of our site?

127
00:09:33,100 --> 00:09:40,720
Well, the answer is we would send a request to this exact same you URL only instead of a delete request,

128
00:09:40,720 --> 00:09:48,670
we would send a post request and also send along a bit of data that contains the new title and the new

129
00:09:48,670 --> 00:09:49,810
body content.

130
00:09:50,170 --> 00:09:56,710
Now, before we go ahead and set up that new Ajax post request, why don't we first improve the user

131
00:09:56,710 --> 00:09:58,750
experience of this layout?

132
00:09:58,990 --> 00:10:04,260
So the next few minutes are not going to have anything to do with WordPress specifically.

133
00:10:04,630 --> 00:10:10,840
This is just going to be about JavaScript and creating an easy to understand user experience, because

134
00:10:10,840 --> 00:10:13,090
at the moment this can be a bit confusing.

135
00:10:13,390 --> 00:10:19,210
Before clicking on this text, you might not even realize that this is an editable field, right?

136
00:10:19,210 --> 00:10:22,810
Because when you first load the page, it just looks like normal text.

137
00:10:23,080 --> 00:10:26,350
Visually, it does not look like a text input field.

138
00:10:26,650 --> 00:10:28,210
Same thing with the body text.

139
00:10:29,470 --> 00:10:36,460
So why don't we adjust things so that when you first load the page, these fields are set to be read

140
00:10:36,460 --> 00:10:41,500
only so that your Web browser literally will not let you make changes to them.

141
00:10:41,770 --> 00:10:47,830
And then we can set things up so that when you click the edit button, it removes the read only attribute

142
00:10:47,830 --> 00:10:50,310
so then you can modify the field again.

143
00:10:50,650 --> 00:10:57,340
And also we can add borders around the fields so that they look like a text field and we can even focus

144
00:10:57,340 --> 00:11:01,300
the user's cursor to automatically appear within this title field.

145
00:11:01,550 --> 00:11:07,540
OK, and while you are in this edit mode, we can also have a button down here that says Save.

146
00:11:07,960 --> 00:11:15,130
And then once you click that save button, that is what will trigger our post request to a rest API.

147
00:11:15,130 --> 00:11:19,030
You well, I know that was a bit of rambling and a lot to sink in.

148
00:11:19,030 --> 00:11:23,890
So now let's just code it together bit by bit at a nice pace.

149
00:11:24,190 --> 00:11:27,520
Our first goal is to make these inputs read only.

150
00:11:27,880 --> 00:11:35,980
So to do that, back in our editor, let's jump into our page, dash my notes file and within our list

151
00:11:35,980 --> 00:11:39,040
item, here's the input field for the title.

152
00:11:39,430 --> 00:11:42,640
All we need to do is say read only.

153
00:11:43,270 --> 00:11:48,820
OK, let's do the same thing for the text area, which is the body field right on the opening text area

154
00:11:48,820 --> 00:11:49,270
tag.

155
00:11:49,270 --> 00:11:51,610
Just say read only.

156
00:11:52,330 --> 00:11:58,600
OK then if I save that now, if I try to click on those fields, I cannot make any changes.

157
00:11:59,000 --> 00:12:06,220
OK, so next let's set things up so that when you click the edit button it removes those read only attributes

158
00:12:06,460 --> 00:12:09,340
and we also add a little save button down here.

159
00:12:09,850 --> 00:12:15,580
So to do that, let's jump back into our JavaScript file are my notes JS module.

160
00:12:16,000 --> 00:12:21,280
Let's scroll up to the very top and within our events area, let's add a new line.

161
00:12:21,670 --> 00:12:29,410
Actually, let's just copy and paste this existing line for delete note, copy it, duplicate it and

162
00:12:29,410 --> 00:12:34,300
let's change the selector to look for a class of edit note.

163
00:12:34,750 --> 00:12:39,660
And when it gets clicked, let's trigger a method named you might have guessed it.

164
00:12:40,270 --> 00:12:41,350
Edit note.

165
00:12:42,040 --> 00:12:46,150
All right, now let's go ahead and create a method with that exact matching name.

166
00:12:46,510 --> 00:12:52,450
So down here, edit no parentheses, curly brackets.

167
00:12:53,140 --> 00:12:59,800
OK, and because there might be multiple edit buttons on the screen when one of them gets clicked on,

168
00:12:59,980 --> 00:13:04,240
we need to know which set of fields it's associated with.

169
00:13:04,480 --> 00:13:11,360
And the common denominator amongst all the elements that I'm selecting now is the overall parent list

170
00:13:11,380 --> 00:13:11,800
item.

171
00:13:12,130 --> 00:13:18,670
So just like we did in our delete note method, why don't we just copy and paste this line where we

172
00:13:18,670 --> 00:13:21,340
set up a variable named this note?

173
00:13:22,030 --> 00:13:26,050
So I'm just going to copy that and paste it into my edit note function.

174
00:13:26,500 --> 00:13:32,440
OK, and then right below that, let's write a bit of code that removes the read only attribute.

175
00:13:32,820 --> 00:13:40,950
From the relevant fields, so we can say this note to select the relevant overall list item, and then

176
00:13:40,950 --> 00:13:47,910
we can just look inside the list item with the query method named Find and what do we want to look for?

177
00:13:48,240 --> 00:13:56,700
How about an element with a class of note titled Field Karma, as well as an element with a class of

178
00:13:56,700 --> 00:13:59,090
note body field?

179
00:13:59,940 --> 00:14:06,790
And while we have those elements selected at the end here, let's remove an attribute.

180
00:14:06,810 --> 00:14:13,520
This is a handy query method and the attribute that we want to remove is read only.

181
00:14:14,010 --> 00:14:18,210
And while we're at it at the end of this line, let's chain on one more action.

182
00:14:18,210 --> 00:14:30,420
So DOT and let's say add class and let's give those inputs a class of note active field and that will

183
00:14:30,420 --> 00:14:32,280
give them an animated border.

184
00:14:32,430 --> 00:14:35,910
So it makes it a bit more obvious that they are editable fields.

185
00:14:36,540 --> 00:14:39,960
OK, let's be sure to end this line with a semicolon, OK?

186
00:14:40,050 --> 00:14:41,550
And then let's give that a save.

187
00:14:41,700 --> 00:14:46,260
And now on the front end, if I try to edit this first post, oops, it didn't work.

188
00:14:46,260 --> 00:14:48,120
So let's check our console.

189
00:14:48,570 --> 00:14:52,020
And the error message says that E is not defined.

190
00:14:52,260 --> 00:14:52,770
Aha.

191
00:14:53,100 --> 00:14:54,720
I know exactly what I did wrong.

192
00:14:54,960 --> 00:14:59,850
You might have noticed this and you might have been yelling at the screen within our edit note function.

193
00:14:59,850 --> 00:15:07,080
If we want to be able to access e dot target, we need to be sure to pass E as a parameter within the

194
00:15:07,080 --> 00:15:09,840
parentheses for this function definition.

195
00:15:10,140 --> 00:15:13,500
OK, so with that E parameter in place, let's save it again.

196
00:15:14,250 --> 00:15:21,150
And now when I click edit cool, we can see an animated border around the fields and if I click on them

197
00:15:21,150 --> 00:15:23,060
I can actually make edits.

198
00:15:23,700 --> 00:15:29,970
OK, next let's set things up so that while you are in this edit mode, a little blue button appears

199
00:15:29,970 --> 00:15:32,280
down here that says save.

200
00:15:32,670 --> 00:15:40,860
So let's go add that button in our file over and page my notes right below the text area.

201
00:15:41,070 --> 00:15:43,320
Let's add a new button or a new span.

202
00:15:43,620 --> 00:15:49,230
Actually, in order to save a bunch of typing, we can just copy and paste the existing edit button

203
00:15:49,230 --> 00:15:49,860
right here.

204
00:15:50,220 --> 00:15:55,320
Copy that, paste it down below the text area and let's change this text.

205
00:15:55,320 --> 00:15:58,620
So instead of saying edit, it says save.

206
00:15:58,920 --> 00:16:02,190
And on the opening span tag, let's change the class.

207
00:16:02,190 --> 00:16:12,120
So instead of edit note, let's say update node and just for styling reasons, let's also say B10 and

208
00:16:12,150 --> 00:16:17,790
ETN, Dash, Dash, Balou and beaten dash dash small.

209
00:16:18,330 --> 00:16:25,080
OK, and then finally instead of the pencil edit icon, let's delete the word pencil and replace it

210
00:16:25,080 --> 00:16:27,600
with arrow dash.

211
00:16:27,600 --> 00:16:28,320
Right.

212
00:16:29,340 --> 00:16:36,360
OK, so let's go ahead and save that and the blue button is going to be hidden by default and then once

213
00:16:36,360 --> 00:16:39,810
someone clicks on the edit button we can display the blue button.

214
00:16:40,410 --> 00:16:48,450
So back in our JavaScript within our edit note method, let's add a new line and say this note, which

215
00:16:48,450 --> 00:16:49,950
is the overall list item.

216
00:16:50,250 --> 00:16:58,770
Let's look inside it and find an element that has a class of update note and let's just give that a

217
00:16:58,770 --> 00:16:59,550
new class.

218
00:16:59,550 --> 00:17:09,510
So add class of update, no dash dash visible, which will make it so the button is no longer hidden.

219
00:17:10,350 --> 00:17:11,520
So let's save that.

220
00:17:11,850 --> 00:17:15,660
And now when I click edit cooled a little save button appears.

221
00:17:16,230 --> 00:17:20,880
However, I don't want users to feel like clicking save is their only option.

222
00:17:21,240 --> 00:17:27,630
So I think it would be nice if once you click edit then this edit button turns into a cancel button

223
00:17:27,960 --> 00:17:33,750
and instead of a pencil icon, maybe it has a little X and if you click on the cancel button then that

224
00:17:33,750 --> 00:17:35,430
takes you out of the edit mode.

225
00:17:35,670 --> 00:17:41,370
So then the animated borders would go away, the fields would become read-only again and the blue button

226
00:17:41,370 --> 00:17:42,120
would disappear.

227
00:17:42,540 --> 00:17:47,700
And as you might have guessed, that's exactly what we're going to learn how to do in the next lesson.

228
00:17:48,060 --> 00:17:50,640
So let's keep things rolling and I will see you then.
