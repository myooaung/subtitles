1
00:00:01,680 --> 00:00:02,670
Hello, everyone.

2
00:00:03,210 --> 00:00:08,820
This should be a fairly quick lesson, I just want to cover another big tool that can help us reduce

3
00:00:08,820 --> 00:00:11,060
duplicate code in our project.

4
00:00:11,460 --> 00:00:15,360
So let's learn about a function named git template part.

5
00:00:15,720 --> 00:00:16,260
All right.

6
00:00:16,260 --> 00:00:19,110
Now, let's begin by giving ourselves a goal.

7
00:00:19,410 --> 00:00:25,260
When it comes to duplicate code, you might have noticed that we are displaying events like this in

8
00:00:25,260 --> 00:00:28,170
four different places throughout our website.

9
00:00:28,440 --> 00:00:28,700
Right.

10
00:00:28,750 --> 00:00:30,630
So here on the home page is one.

11
00:00:31,260 --> 00:00:34,470
And then if we go to the All Events archive, that's two.

12
00:00:34,950 --> 00:00:38,690
And then if we go to the past events page, that's three.

13
00:00:39,720 --> 00:00:46,070
And then if we go to a program page and check out the related upcoming events, that's four.

14
00:00:46,410 --> 00:00:53,220
So that means we've duplicated this exact same event block code four times and we can do better than

15
00:00:53,220 --> 00:00:53,490
that.

16
00:00:53,760 --> 00:00:55,950
We can write cleaner code than that.

17
00:00:56,340 --> 00:01:03,420
So our goal for this lesson is to move or consolidate this code into its own individual file, and then

18
00:01:03,420 --> 00:01:06,840
we can just call and recycle that file wherever we need to.

19
00:01:07,200 --> 00:01:12,020
So right now, let's jump in to our text editor and why don't we start with our home page.

20
00:01:12,330 --> 00:01:19,560
So let's jump in to front page dot p if we scroll down a bit, here's the custom query that pulls in

21
00:01:19,560 --> 00:01:23,910
the two most rapidly approaching events and down a bit further.

22
00:01:23,910 --> 00:01:27,960
Here's the while loop and this div with a class of event summary.

23
00:01:28,170 --> 00:01:31,460
This is the duplicate code that I'm referring to, right?

24
00:01:31,470 --> 00:01:35,130
This is what controls how each event gets displayed on the front end.

25
00:01:35,820 --> 00:01:42,750
So from this opening div tag down to this closing div, this is identical in all of those four locations

26
00:01:42,750 --> 00:01:44,560
that we just looked at on our website.

27
00:01:44,820 --> 00:01:45,780
So why don't we do this?

28
00:01:45,780 --> 00:01:52,440
Let's go ahead and highlight and select this div and let's copy it into our clipboard, or actually

29
00:01:52,440 --> 00:01:58,740
why don't we cut it into our clipboard and then in its place, let's just add a temporary X as a placeholder.

30
00:01:59,130 --> 00:02:01,350
We will circle back to this in just a moment.

31
00:02:01,560 --> 00:02:06,170
But for right now, I want to go and create a brand new file for that code.

32
00:02:06,540 --> 00:02:10,620
Now, we could go ahead and create the new file in the root of our theme folder.

33
00:02:10,950 --> 00:02:14,880
But to stay organized, why don't we create a new subfolder?

34
00:02:15,060 --> 00:02:21,210
So in our theme folder, new folder and we could name the folder, whatever we want doesn't matter.

35
00:02:21,210 --> 00:02:25,650
But just to make sense, I'm going to name it template parts.

36
00:02:27,000 --> 00:02:30,870
OK, so in the theme folder I've got this new subfolder template parts.

37
00:02:31,230 --> 00:02:35,550
Let's create a new file in that folder and in the new file.

38
00:02:35,550 --> 00:02:37,470
Go ahead and paste in your clipboard.

39
00:02:37,950 --> 00:02:39,510
OK, let's go ahead and save.

40
00:02:40,140 --> 00:02:43,990
We could name the file whatever we want, but why don't we call it a vent.

41
00:02:46,440 --> 00:02:52,650
OK, and now if we jump back to our front page file, the question becomes, how do we import in the

42
00:02:52,650 --> 00:02:56,220
contents of that new file where it used to live right here?

43
00:02:56,670 --> 00:02:57,760
Well, let me show you.

44
00:02:58,170 --> 00:03:00,660
So this used to be HTML, right?

45
00:03:00,660 --> 00:03:05,490
That's why we were dropping out of here and then entering back into HP here.

46
00:03:05,790 --> 00:03:10,380
But now that we're just going to import in that other file, we don't need HTML at all.

47
00:03:10,540 --> 00:03:18,420
So we can delete this placeholder X and then we can also get rid of this closing tag and get rid of

48
00:03:18,420 --> 00:03:20,520
this opening tag here.

49
00:03:21,300 --> 00:03:24,510
OK, and then right below this line, let's drop down.

50
00:03:24,660 --> 00:03:33,060
This is where our HTML used to live and instead let's just call a function named git template part.

51
00:03:34,890 --> 00:03:40,830
And this function takes two arguments, although the second one is optional for the first argument that

52
00:03:40,830 --> 00:03:45,630
is required, we basically just point towards that new event file that we just created.

53
00:03:45,840 --> 00:03:50,040
So quotes and then we want to point within the new folder that we created.

54
00:03:50,400 --> 00:03:58,320
So the folder name was Template Parts Forwards to look inside the folder and then we named the file

55
00:03:58,320 --> 00:03:58,950
event.

56
00:03:59,730 --> 00:04:02,490
Now I want to point out that you do not say event.

57
00:04:03,900 --> 00:04:05,730
You don't need the full file name.

58
00:04:05,910 --> 00:04:08,400
You just need the slug name of the file.

59
00:04:08,820 --> 00:04:10,680
OK, let's go ahead and save this.

60
00:04:10,680 --> 00:04:14,880
And if we jump back to our home page on the website, cool.

61
00:04:14,880 --> 00:04:17,700
We see that our events look exactly the same.

62
00:04:18,180 --> 00:04:23,850
Now, before we move on and update the other three duplicate locations, I first want to let you know

63
00:04:23,850 --> 00:04:29,100
about the second argument that we can pass along to the template part function.

64
00:04:29,520 --> 00:04:34,050
So we learned that the first argument points towards the file that you want to include.

65
00:04:34,260 --> 00:04:36,990
But we can also pass this function a second argument.

66
00:04:36,990 --> 00:04:43,470
So comma, and then I can include any word here that I want so I could say pizza or unicorn.

67
00:04:43,950 --> 00:04:50,100
But for an example, if I say excerpt, so with this in place now, this function is going to try to

68
00:04:50,100 --> 00:04:58,770
include in a file that lives in the template parts folder that is named Event and then dash excerpt.

69
00:04:59,220 --> 00:05:01,110
So WordPress adds a dash.

70
00:05:01,210 --> 00:05:06,400
At the end of this base slug name, and then it just depends on this specialty name.

71
00:05:06,700 --> 00:05:12,760
So just as a quick example, with this code in place, let's rename our event file that we created just

72
00:05:12,760 --> 00:05:13,520
a moment ago.

73
00:05:13,870 --> 00:05:24,180
So in our template parts folder, let me rename Event P and let me rename it to Event Dash excerpt.

74
00:05:25,030 --> 00:05:29,490
So if we go ahead and save this, see, nothing changes on the front end.

75
00:05:30,010 --> 00:05:36,400
Now, at first glance, this specialty name might seem pointless and you definitely don't need to include

76
00:05:36,400 --> 00:05:38,040
a second argument like this.

77
00:05:38,290 --> 00:05:40,960
However, it does allow for some pretty cool setups.

78
00:05:41,170 --> 00:05:42,070
So check this out.

79
00:05:42,230 --> 00:05:47,740
What if instead of the base name being event, what if we say the base name is content?

80
00:05:47,980 --> 00:05:52,750
And then for the second argument, the specialty name, what if instead of a string of text, what if

81
00:05:52,750 --> 00:05:56,070
we pass along, get posted.

82
00:05:57,040 --> 00:05:57,340
Right.

83
00:05:57,340 --> 00:06:02,140
And this function will return event or professor or post or page.

84
00:06:02,320 --> 00:06:07,360
So the idea is if we use a function for the argument now, the file name that this is going to search

85
00:06:07,360 --> 00:06:08,830
for is dynamic.

86
00:06:09,100 --> 00:06:09,430
Right.

87
00:06:09,430 --> 00:06:16,780
In this context, this will try to pull in a file named Content Dash event, and that can be a nice

88
00:06:16,780 --> 00:06:22,300
way to set things up, for example, on an all search results screen, because then in your template

89
00:06:22,300 --> 00:06:30,190
parts folder, you could create different files named content, dash event content, dash post content,

90
00:06:30,190 --> 00:06:36,480
dash professor, write for all of your different post types in each file can use its own unique and

91
00:06:36,490 --> 00:06:41,740
formatting and styling and WordPress will know which file to use depending on the post type.

92
00:06:41,860 --> 00:06:43,150
So that's a bit of a tangent.

93
00:06:43,150 --> 00:06:45,250
You don't need to use the second argument here.

94
00:06:45,400 --> 00:06:49,450
I just wanted you to be aware of it because you can get fairly creative with it.

95
00:06:49,660 --> 00:06:54,970
In this particular instance on the homepage, we know that we are always going to be working with event

96
00:06:54,970 --> 00:06:56,200
post type right here.

97
00:06:56,500 --> 00:07:00,160
So there's no need to call a function we could just say event.

98
00:07:00,910 --> 00:07:06,520
But maybe later on when we work with global search results, that dynamic way of doing things will be

99
00:07:06,520 --> 00:07:08,740
a great benefit to us anyways.

100
00:07:08,740 --> 00:07:13,750
Long story short, this is going to look for a file named Content Dash event.

101
00:07:14,110 --> 00:07:17,440
So why don't we rename our template part file to match.

102
00:07:17,890 --> 00:07:28,360
So within template parts, let's rename our file to Content Dash Event Gain if we refresh our homepage.

103
00:07:29,740 --> 00:07:35,190
Cool, there's our events at this point, let's just work through the three other duplicate locations,

104
00:07:35,560 --> 00:07:41,410
so if we go to The View, all events, archives, screen, let's update this to use our new template

105
00:07:41,410 --> 00:07:42,230
part file.

106
00:07:42,730 --> 00:07:45,640
So this screen is powered by archive event.

107
00:07:46,840 --> 00:07:51,990
So in that file, we can just scroll down to where we see the div with a class of event summary.

108
00:07:52,550 --> 00:07:54,750
Let's go ahead and delete that entire div.

109
00:07:56,200 --> 00:08:02,560
And then again, since we don't need to be in HTML, we can get rid of the closing tag here and this

110
00:08:02,560 --> 00:08:04,080
opening tag.

111
00:08:05,170 --> 00:08:10,090
And let's just call git template part for the argument.

112
00:08:10,090 --> 00:08:13,330
Let's look inside that new folder template parts.

113
00:08:13,780 --> 00:08:18,880
And since we're not using a function to dynamically decide which file to look for, we can just type

114
00:08:18,880 --> 00:08:20,710
the entire file slug right here.

115
00:08:20,720 --> 00:08:23,680
We can say content dash event.

116
00:08:24,670 --> 00:08:25,750
Let's save that.

117
00:08:26,770 --> 00:08:27,130
Cool.

118
00:08:27,130 --> 00:08:30,490
We're still in business and we just removed a bunch of duplicate code.

119
00:08:31,000 --> 00:08:35,100
Next, let's move on to the past events archives green down here.

120
00:08:36,250 --> 00:08:40,750
So this screen in neutral is being powered by page dash past events.

121
00:08:41,620 --> 00:08:47,130
So let's jump into that file page past events, but scroll down a little bit.

122
00:08:47,740 --> 00:08:49,960
Here's the div with a class of event summary.

123
00:08:50,170 --> 00:08:51,400
All that duplicate code.

124
00:08:51,400 --> 00:08:52,840
Let's just delete that.

125
00:08:55,910 --> 00:09:05,690
Get rid of the extra tags that we don't need and then let's call get template part and go inside our

126
00:09:05,690 --> 00:09:09,890
folder and grab that file.

127
00:09:12,290 --> 00:09:13,760
Perfect, still looks good.

128
00:09:13,910 --> 00:09:21,380
And finally, let's go to a program detail screen like biology, and down here we see upcoming events.

129
00:09:22,010 --> 00:09:24,060
So let's remove this duplicate code.

130
00:09:25,130 --> 00:09:28,700
The screen is powered by a single dash program.

131
00:09:31,160 --> 00:09:37,900
You know the drill, let's scroll down until we find that event summary div, here it is.

132
00:09:37,910 --> 00:09:47,720
So let's just go ahead and delete all of this duplicate code, get rid of the tags called git template

133
00:09:47,720 --> 00:09:48,170
part.

134
00:09:49,700 --> 00:09:52,700
Go inside our folder and grab the file.

135
00:09:56,340 --> 00:09:56,970
Perfect.

136
00:09:57,570 --> 00:10:02,310
Now, before we bring this lesson to a close, I want to address a question that you might have.

137
00:10:02,670 --> 00:10:08,280
You might be thinking, hey, in our last lesson, we learned how to create recyclable functions to

138
00:10:08,280 --> 00:10:09,690
reduce duplicate code.

139
00:10:09,960 --> 00:10:12,990
And now in this lesson, we just learned about git template part.

140
00:10:13,350 --> 00:10:15,970
So how am I supposed to know which route to choose?

141
00:10:16,290 --> 00:10:21,810
I know that most of the time duplicate code is bad, but how do I know which tool is right for the job

142
00:10:21,810 --> 00:10:23,370
to remove the duplicate code?

143
00:10:23,520 --> 00:10:28,740
Well, there's not necessarily a right or wrong answer to that question, but I can tell you how I make

144
00:10:28,740 --> 00:10:29,570
my choices.

145
00:10:29,910 --> 00:10:33,900
So if I want the duplicate code in question to be flexible, right.

146
00:10:33,930 --> 00:10:40,500
If I want to be able to pass it arguments to make it do different things like we did for our page banner,

147
00:10:40,770 --> 00:10:44,910
then that's when I create a recyclable function that lives and functions.

148
00:10:46,290 --> 00:10:52,260
On the other hand, if I have a bunch of duplicate code that doesn't need any custom arguments or parameters

149
00:10:52,530 --> 00:10:57,450
and it's literally just a blob of HTML, and that's always going to be the same.

150
00:10:57,810 --> 00:11:00,830
Those are the times when I reach for git template part.

151
00:11:01,230 --> 00:11:02,250
That's just how I do it.

152
00:11:02,250 --> 00:11:05,790
Personally, you're free to use whichever option you feel is right.

153
00:11:06,000 --> 00:11:09,960
What's important, though, is that either way we are getting rid of duplicate code.

154
00:11:10,240 --> 00:11:10,680
All right.

155
00:11:10,710 --> 00:11:12,060
That's it for this task.

156
00:11:12,240 --> 00:11:16,760
In our next lesson, we will create the campuses post type.

157
00:11:17,040 --> 00:11:23,520
It should be a lot of fun because we are going to create an interactive Google map with pins to all

158
00:11:23,520 --> 00:11:25,150
of our campus locations.

159
00:11:25,470 --> 00:11:27,870
Let's keep things rolling and I will see you then.
