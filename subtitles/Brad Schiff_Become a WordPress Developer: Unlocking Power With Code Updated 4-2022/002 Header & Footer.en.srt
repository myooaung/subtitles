1
00:00:02,390 --> 00:00:03,420
Hello, everyone.

2
00:00:03,770 --> 00:00:09,260
In this lesson, we will learn how to set up a global header and footer.

3
00:00:09,680 --> 00:00:12,360
If you don't know what I'm referring to, let me show you.

4
00:00:12,890 --> 00:00:16,250
So here's the homepage that we set up in our previous lesson.

5
00:00:16,640 --> 00:00:22,910
And on most websites, you're going to want some sort of header area that appears on every page of the

6
00:00:22,910 --> 00:00:23,510
website.

7
00:00:24,140 --> 00:00:25,660
Same thing with the footer area.

8
00:00:26,090 --> 00:00:31,940
So if you want to add content at the very top and bottom of your pages, your first instinct might be

9
00:00:31,940 --> 00:00:38,610
to go into your index file in your theme folder and just add something up at the very top.

10
00:00:38,630 --> 00:00:47,090
So even before the opening tag, you could include an HTML headline that says this is the header area.

11
00:00:48,590 --> 00:00:56,360
And for the footer down at the very bottom after the closing tag, we could say HTML paragraph.

12
00:00:56,780 --> 00:01:05,090
This is the footer area and if I save this and refresh the home page, cool, we have a header and footer

13
00:01:05,450 --> 00:01:06,350
so that works.

14
00:01:06,350 --> 00:01:12,790
But it's not ideal because we want this same identical header on every single page of the site.

15
00:01:13,010 --> 00:01:19,640
But we know from last lesson that Index P doesn't power every page on our website.

16
00:01:20,030 --> 00:01:25,910
So for example, if we click on one of the blog posts, we lose our header and footer because this screen

17
00:01:25,910 --> 00:01:28,130
is powered by a single dot.

18
00:01:29,240 --> 00:01:35,140
And don't forget about Page Dot, which powers individual pages instead of posts.

19
00:01:35,480 --> 00:01:41,660
So long story short, if we wanted this header and footer on every page, we would have to duplicate

20
00:01:41,660 --> 00:01:46,190
or copy and paste this code into multiple different template files.

21
00:01:46,490 --> 00:01:52,490
Now, duplicating code like that is almost always a bad practice because then if in the future, maybe

22
00:01:52,490 --> 00:01:57,920
a week from now, we want to change something in the header, we don't want to have to make that change

23
00:01:57,920 --> 00:02:01,020
in five or 10 or 20 different template files.

24
00:02:01,040 --> 00:02:04,960
Instead, we want our header code to live in just one file.

25
00:02:05,300 --> 00:02:05,590
Right.

26
00:02:05,600 --> 00:02:08,060
We want a single source of truth.

27
00:02:08,330 --> 00:02:09,280
So check this out.

28
00:02:09,290 --> 00:02:13,760
Right now, I want you to create a new file in your theme folder.

29
00:02:14,510 --> 00:02:15,530
So new file.

30
00:02:15,860 --> 00:02:21,470
And let's name this new file header dot p HP.

31
00:02:23,180 --> 00:02:32,240
And in this new file, let's write out a bit of dummy text, so maybe an HTML headline that says Greetings

32
00:02:32,240 --> 00:02:34,070
from heterodoxy.

33
00:02:35,420 --> 00:02:42,890
All right, let's save this and then jump back into index P and let's delete this headline that we set

34
00:02:42,890 --> 00:02:44,210
up a couple of minutes ago.

35
00:02:44,540 --> 00:02:51,770
And instead, let's write a bit of code that will pull in the contents of header P, so let's enter

36
00:02:51,770 --> 00:02:59,570
into P mode and then call a WordPress function named Gett Underscore header.

37
00:02:59,840 --> 00:03:04,610
And remember to call a function you include parentheses right after it semicolon.

38
00:03:04,940 --> 00:03:11,480
And we could close out of here, but because we were just going to drop right back into PHP for all

39
00:03:11,480 --> 00:03:17,300
of this code, why don't we just get rid of this closing tag and also get rid of this opening tag.

40
00:03:17,900 --> 00:03:20,750
So that way we just stay in P mode.

41
00:03:21,080 --> 00:03:23,210
Anyways, back to the task at hand.

42
00:03:23,570 --> 00:03:31,310
This git header function will pull in the contents of header B, so if we save this and refresh the

43
00:03:31,310 --> 00:03:32,990
homepage, cool.

44
00:03:32,990 --> 00:03:36,680
We see greetings from header P next.

45
00:03:36,680 --> 00:03:38,950
Let's do the same thing for our footer.

46
00:03:39,650 --> 00:03:44,000
So back in our text editor, let's create a new file in the theme folder.

47
00:03:44,720 --> 00:03:49,030
Let's name this new file Footer Dot P.

48
00:03:50,030 --> 00:03:56,960
In this file, let's write out a bit of dummy text, so maybe a paragraph that says Greetings from footrot

49
00:03:57,500 --> 00:03:59,000
P save this.

50
00:03:59,000 --> 00:04:06,140
And then back in our home page indexed file, let's replace this down here with code that will dynamically

51
00:04:06,140 --> 00:04:14,420
pull in the contents of the footer file so we could drop into mode down here or we could just write

52
00:04:14,420 --> 00:04:18,380
this code up here while we are still in PHP.

53
00:04:18,560 --> 00:04:24,950
You can probably guess the name of the WordPress function we want to use git underscore footer.

54
00:04:25,970 --> 00:04:28,250
OK, with that in place if we save.

55
00:04:30,130 --> 00:04:32,110
Cool greetings from footrot.

56
00:04:33,670 --> 00:04:36,460
And if we click on one of the blog post links.

57
00:04:37,370 --> 00:04:45,350
We do not see the header or footer, but all we need to do is go into single dot p and call those get

58
00:04:45,350 --> 00:04:47,490
header and get footer functions.

59
00:04:47,810 --> 00:04:55,610
So back in the text editor, let's jump in to our single file and right before the while loop, let's

60
00:04:55,610 --> 00:04:57,950
say get header.

61
00:04:58,910 --> 00:04:59,450
All right.

62
00:04:59,450 --> 00:05:08,690
And then right after the curly bracket that closes the while loop, lets say get footer, let's save

63
00:05:08,690 --> 00:05:09,010
that.

64
00:05:09,560 --> 00:05:15,560
And now our single post screen is in business, so that takes care of individual posts.

65
00:05:15,830 --> 00:05:18,520
Let's not forget about individual pages.

66
00:05:18,890 --> 00:05:25,130
Remember in our WordPress admin dashboard, if we click on pages in the sidebar, in our previous lesson,

67
00:05:25,130 --> 00:05:28,700
we created this dummy page test page one, two, three.

68
00:05:29,150 --> 00:05:35,840
And if I use this view link here to preview it, this screen is powered by Page Dot.

69
00:05:37,040 --> 00:05:45,470
So let's go ahead and jump into our text editor and hop in to page P and let's pull in our global header

70
00:05:45,470 --> 00:05:46,010
and footer.

71
00:05:46,460 --> 00:05:48,110
So get header.

72
00:05:49,410 --> 00:05:53,130
And down here, below the curly bracket, get footer.

73
00:05:56,280 --> 00:06:05,880
Cool, so now whenever we update Hedera or footrot, we can rest assured that our entire website globally

74
00:06:05,880 --> 00:06:06,890
will be updated.

75
00:06:07,200 --> 00:06:09,630
Now, before we bring this lesson to a close.

76
00:06:09,840 --> 00:06:14,980
I have two more tasks for us that are directly related to the header and footer.

77
00:06:15,300 --> 00:06:20,750
First, let's learn how to load our CFS file on the front end of our website.

78
00:06:21,300 --> 00:06:27,720
And secondly, let's learn how to add the black admin menubar that's supposed to sit at the top of our

79
00:06:27,720 --> 00:06:28,260
website.

80
00:06:28,270 --> 00:06:34,050
Globally, you can see the menu bar I'm referring to if you jump over to the WordPress admin screens.

81
00:06:34,470 --> 00:06:38,760
But that bar should also be on the front end of our website while we are signed in.

82
00:06:39,030 --> 00:06:46,330
OK, but let's start with our first task of actually loading our CSC file on the front end of our website.

83
00:06:46,680 --> 00:06:52,680
If you've worked with HTML in the past, you probably already know how to load text file, right?

84
00:06:52,680 --> 00:06:56,720
You include it towards the top of your HTML file in the head section.

85
00:06:57,090 --> 00:07:04,890
So to get started, let's jump into our text editor and open header up and let's delete this dummy text

86
00:07:04,890 --> 00:07:05,890
and start fresh.

87
00:07:06,240 --> 00:07:10,260
Let's begin with the basic skeleton of an HTML document.

88
00:07:10,900 --> 00:07:19,260
So you always begin with the DOCTYPE and then right below that you create an HTML sandwich and then

89
00:07:19,260 --> 00:07:26,140
within that you have two sandwiches, the head sandwich and the body sandwich.

90
00:07:26,880 --> 00:07:30,960
So within the body section is where you include your actual content.

91
00:07:31,200 --> 00:07:31,550
Right?

92
00:07:31,560 --> 00:07:36,060
So maybe you'd have a headline that says Fictional University.

93
00:07:36,660 --> 00:07:37,110
All right.

94
00:07:37,110 --> 00:07:38,670
But back to the task at hand.

95
00:07:38,910 --> 00:07:47,220
The head section is usually where you load your txt file only in WordPress instead of manually including

96
00:07:47,220 --> 00:07:49,350
our CSFs file using link.

97
00:07:49,740 --> 00:07:58,800
Instead of doing that in WordPress, we just call a P function named WP Underscore Head.

98
00:08:00,210 --> 00:08:03,940
And this lets WordPress be in control of our head section.

99
00:08:04,140 --> 00:08:10,920
So imagine down the road we install a few WordPress plug ins and maybe those plug ins need to load CSFs

100
00:08:10,920 --> 00:08:12,050
files of their own.

101
00:08:12,330 --> 00:08:18,330
So this function lets WordPress have the final say and load whatever it needs to load in our head.

102
00:08:18,690 --> 00:08:19,290
All right.

103
00:08:19,290 --> 00:08:25,680
Now, with this line of code in place, all we need to do is programmatically tell WordPress to load

104
00:08:25,680 --> 00:08:26,850
RSS file.

105
00:08:27,180 --> 00:08:32,310
And the way that we do that is by creating a brand new file in our theme folder.

106
00:08:33,170 --> 00:08:39,410
And let's name this new file functions dot p HP.

107
00:08:41,270 --> 00:08:46,280
Now, this new functions file is a bit different from all of the other files we've been creating so

108
00:08:46,280 --> 00:08:46,650
far.

109
00:08:46,850 --> 00:08:51,440
All of our other files are what we might call template files, right.

110
00:08:51,460 --> 00:08:55,490
They control the HTML that the general public will see on our website.

111
00:08:55,850 --> 00:09:00,180
Well, think of this function file as a bit more private.

112
00:09:00,440 --> 00:09:02,700
This is our behind the scenes file.

113
00:09:02,960 --> 00:09:07,680
This is where we can have a conversation with the WordPress system itself.

114
00:09:08,120 --> 00:09:08,600
All right.

115
00:09:08,600 --> 00:09:10,190
But back to the task at hand.

116
00:09:10,490 --> 00:09:14,230
We want to tell WordPress to load our CFS file.

117
00:09:14,570 --> 00:09:25,100
So within this function file, let's open up PHP and then call a WordPress function named ADD underscore

118
00:09:25,130 --> 00:09:25,910
action.

119
00:09:27,860 --> 00:09:33,860
This is a super useful WordPress function that we will use again and again throughout the course, within

120
00:09:33,860 --> 00:09:38,110
these parentheses, this function wants us to give it to arguments.

121
00:09:38,360 --> 00:09:44,870
So, for example, quotes and then A quotes, B, now, obviously, we're not going to pass it in argument

122
00:09:44,870 --> 00:09:48,150
of A and B, I'm just including these as placeholders.

123
00:09:48,220 --> 00:09:51,730
OK, now let me explain what this function actually does.

124
00:09:52,070 --> 00:09:58,390
So WordPress lets us give it instructions and tell it what to do by using this add action function.

125
00:09:58,700 --> 00:10:03,650
The first argument is where we tell WordPress what type of instructions we are giving it.

126
00:10:03,860 --> 00:10:05,780
Depending on what we are trying to do.

127
00:10:05,780 --> 00:10:08,750
WordPress will run this code at different times.

128
00:10:09,110 --> 00:10:11,540
In this case, we want to load a file.

129
00:10:11,810 --> 00:10:22,940
So the special WordPress hook name that we want to hook on to is WP underscore on cue, underscore scripts

130
00:10:24,170 --> 00:10:26,450
and the name here definitely matters.

131
00:10:26,720 --> 00:10:30,790
You need to spell it exactly right or WordPress won't know what you're trying to do.

132
00:10:31,040 --> 00:10:31,490
All right.

133
00:10:31,500 --> 00:10:37,400
So this is our way of saying, hey, WordPress, I want to load some success or JavaScript files.

134
00:10:37,700 --> 00:10:41,450
And then the second argument instead of B, let's delete that.

135
00:10:41,690 --> 00:10:46,550
And what we do here is give WordPress the name of A function that we want to run.

136
00:10:46,850 --> 00:10:51,890
And it's important to point out that this is going to be a function that we create and define in about

137
00:10:51,890 --> 00:10:53,300
10 seconds from now.

138
00:10:53,360 --> 00:10:55,810
So in this case, we need to make up a name.

139
00:10:56,060 --> 00:11:02,480
Why don't we name our function fictional university resources or fictional university files?

140
00:11:02,730 --> 00:11:07,510
How about university underscore files?

141
00:11:07,820 --> 00:11:10,220
OK, for this argument, the name doesn't matter.

142
00:11:10,470 --> 00:11:14,630
It just needs to be something that makes sense to you personally and that you can remember.

143
00:11:14,900 --> 00:11:15,290
All right.

144
00:11:15,290 --> 00:11:20,810
Now, right above this line, why don't we create a function with this exact name?

145
00:11:21,440 --> 00:11:31,400
So we will say function and then spell out that name university underscore files, parentheses, and

146
00:11:31,400 --> 00:11:33,970
then we are defining or creating the function.

147
00:11:33,980 --> 00:11:41,390
So then curly brackets and now within these curly brackets, within the body of this function, we can

148
00:11:41,390 --> 00:11:44,890
load as many sixths or JavaScript files as we want.

149
00:11:45,170 --> 00:11:49,480
For now, though, we just want to load one txt file right.

150
00:11:49,490 --> 00:12:01,160
Our main style DOCSIS So we will call a WordPress function named WP underscore on Q Style.

151
00:12:03,080 --> 00:12:08,810
And within the parentheses, this function is looking for two arguments for the first, we just need

152
00:12:08,810 --> 00:12:11,960
to make up a nickname for our main stylesheet.

153
00:12:12,320 --> 00:12:13,890
This name does not matter.

154
00:12:13,910 --> 00:12:15,610
It just needs to make sense to us.

155
00:12:15,920 --> 00:12:22,070
Why don't we call it university main styles?

156
00:12:22,490 --> 00:12:28,790
OK, and then the second argument is just a location that points towards the file later on.

157
00:12:28,790 --> 00:12:34,040
In this course, we will learn how to point towards a custom folder directories and look up specific

158
00:12:34,040 --> 00:12:34,880
file names.

159
00:12:35,390 --> 00:12:41,270
But in this case, since we just want to work with the main style access file and that's sort of the

160
00:12:41,270 --> 00:12:46,420
default style sheet in WordPress, we don't need to manually spell out a location here.

161
00:12:46,790 --> 00:12:56,710
We can just call a WordPress function named Gett underscore stylesheet underscore you are I OK?

162
00:12:56,840 --> 00:12:58,940
And that's a WordPress function that we are calling.

163
00:12:58,940 --> 00:13:01,040
So include parentheses right after it.

164
00:13:01,640 --> 00:13:02,000
Cool.

165
00:13:02,390 --> 00:13:07,880
And if we wanted to include a second or third txt file, you could just duplicate this line here.

166
00:13:08,090 --> 00:13:13,310
And if you wanted to load a JavaScript file instead of success, you would just change this word from

167
00:13:13,310 --> 00:13:18,380
style to script, singular script, not plural scripts.

168
00:13:18,740 --> 00:13:23,150
But I wouldn't worry about that because I will show you how to load JavaScript file very soon.

169
00:13:23,420 --> 00:13:29,390
OK, but for now, if we go ahead and save this file and let's also be sure to save the recent changes

170
00:13:29,390 --> 00:13:37,310
to header PHP and then if we refresh in the browser, cool, we see that all of the text is orange.

171
00:13:38,270 --> 00:13:44,800
And that's because in our style docs US file, remember, we wrote this as a test in an earlier lesson,

172
00:13:45,290 --> 00:13:47,510
so if I change orange to green.

173
00:13:49,330 --> 00:13:52,480
You get the idea or txt file is loading.

174
00:13:52,900 --> 00:13:59,110
Now, before we move on to our final task for this lesson, which is loading the black admin menubar

175
00:13:59,110 --> 00:14:00,100
up at the top here.

176
00:14:00,460 --> 00:14:06,310
Before we get to that, I want to take a minute to review all of that code we just wrote in our functions

177
00:14:07,240 --> 00:14:11,320
file because this can definitely feel confusing or overwhelming.

178
00:14:11,470 --> 00:14:12,640
So let's break it down.

179
00:14:12,910 --> 00:14:18,340
Really, all we did was create or define a brand new function that we chose the name of.

180
00:14:18,550 --> 00:14:20,140
We got to make this name up.

181
00:14:20,140 --> 00:14:21,310
The name doesn't matter.

182
00:14:21,460 --> 00:14:27,940
Within that function, we called a WordPress function and pointed towards the CSFs file that we wanted

183
00:14:27,940 --> 00:14:28,570
to load.

184
00:14:28,790 --> 00:14:34,660
OK, but remember that when you create and define a function, the function doesn't actually run.

185
00:14:34,960 --> 00:14:38,710
Someone or something needs to call that function later on.

186
00:14:38,980 --> 00:14:42,400
And that's exactly what we are doing in this line of code.

187
00:14:42,820 --> 00:14:47,440
WordPress has a function named Add Action and you give it to arguments.

188
00:14:47,600 --> 00:14:49,320
Let's begin with the second argument.

189
00:14:49,540 --> 00:14:54,610
This is just the name of a function that you want WordPress to call at a specific moment.

190
00:14:54,850 --> 00:14:57,610
And this is how you say which moment that should be.

191
00:14:57,910 --> 00:15:02,360
So WordPress has tons of different hooks or moments that we can hook on to.

192
00:15:02,770 --> 00:15:08,890
So altogether, this line of code is basically saying, hey, WordPress, right before you get ready

193
00:15:08,890 --> 00:15:11,770
to output your code, that's going to go in the header.

194
00:15:11,980 --> 00:15:16,780
That's going to go in this WP head area right before you're getting ready to output that.

195
00:15:16,960 --> 00:15:22,060
We want to tack on to that moment and we want you to run our custom function.

196
00:15:22,360 --> 00:15:26,200
Now, before we move on, I want to go over one last topic.

197
00:15:26,350 --> 00:15:28,660
That is a common point of confusion for people.

198
00:15:29,050 --> 00:15:34,870
You might be thinking, hey, I thought whenever we call or run a function, we have to put parentheses

199
00:15:34,870 --> 00:15:35,580
right after it.

200
00:15:35,920 --> 00:15:36,210
Right.

201
00:15:36,220 --> 00:15:40,210
We did that here and we've been doing that throughout all of our template files.

202
00:15:40,480 --> 00:15:43,770
So why don't we include parentheses after this name here?

203
00:15:44,110 --> 00:15:44,440
Right.

204
00:15:44,440 --> 00:15:47,360
If we want to call this function, why don't we add parentheses here?

205
00:15:48,040 --> 00:15:53,380
Well, we don't add the parentheses because we don't want to literally call this function right now,

206
00:15:53,560 --> 00:15:59,170
which means instead of you and I immediately calling the function right here and now, what we're doing

207
00:15:59,170 --> 00:16:05,260
is just telling WordPress, hey, here's the name of the function, it's up to you WordPress to actually

208
00:16:05,260 --> 00:16:07,720
run it at the precisely right moment.

209
00:16:08,070 --> 00:16:13,740
OK, now let's move on to our final task of adding the black admin bar up at the top here.

210
00:16:14,140 --> 00:16:17,790
So to begin, let's jump in to head HP.

211
00:16:18,280 --> 00:16:26,440
And what I want to do is move the closing body in closing HTML tags out of this file and into footrot

212
00:16:26,850 --> 00:16:27,310
HP.

213
00:16:27,610 --> 00:16:29,880
If that doesn't make sense to you right now, that's OK.

214
00:16:29,890 --> 00:16:31,240
Just follow along with me.

215
00:16:31,480 --> 00:16:35,650
So delete the closing HTML and delete the closing body tag.

216
00:16:35,960 --> 00:16:43,300
All right, let's save this and then jump in to maybe index P just for a frame of reference from a bird's

217
00:16:43,300 --> 00:16:43,750
eye view.

218
00:16:43,750 --> 00:16:45,540
How is our page getting created?

219
00:16:45,790 --> 00:16:52,600
So first we include our header P, then we output the main content, meat and potatoes of the page,

220
00:16:52,840 --> 00:16:56,590
and then we have footrot p so back to header.

221
00:16:56,800 --> 00:17:02,110
We don't want to close out the body in HTML sandwiches within this file.

222
00:17:02,290 --> 00:17:06,160
We want to do that at the very end of the HTML that gets generated.

223
00:17:06,190 --> 00:17:15,340
So in footer P underneath our dummy text, let's close out the body tag and close out the HTML tag.

224
00:17:15,580 --> 00:17:20,830
And now here's the important part right before the closing body tag.

225
00:17:20,830 --> 00:17:28,900
I want you to drop into B and call a function named WP Underscore Footer.

226
00:17:29,830 --> 00:17:35,380
If you've ever worked with JavaScript before, you know that a lot of times you don't want to load JavaScript

227
00:17:35,380 --> 00:17:37,150
files up in the head section.

228
00:17:37,420 --> 00:17:41,320
Instead you want to load them right before the closing body tag.

229
00:17:41,560 --> 00:17:48,100
So this is just our way of giving WordPress the final say before we close out the body tag so WordPress

230
00:17:48,100 --> 00:17:53,830
can use this for all sorts of things like loading JavaScript files or in this case, for adding the

231
00:17:53,830 --> 00:17:57,070
black admin menubar up at the top of the page.

232
00:17:57,460 --> 00:18:01,300
OK, so with this in place, if we save this file and refresh.

233
00:18:02,410 --> 00:18:03,080
Awesome.

234
00:18:03,130 --> 00:18:09,700
There's the admin bar, and that's actually going to bring this lesson to a close at this point in the

235
00:18:09,700 --> 00:18:14,350
course, you might be thinking to yourself, hey, when is the website going to start looking like it

236
00:18:14,350 --> 00:18:16,000
was built in the last decade?

237
00:18:16,210 --> 00:18:21,130
Because right now, this plain white background and the text and the full width of it, it looks like

238
00:18:21,130 --> 00:18:23,040
it was built in nineteen ninety five.

239
00:18:23,380 --> 00:18:29,670
Well, in our very next lesson, we will address the visual or graphic design of our theme.

240
00:18:30,070 --> 00:18:32,890
Let's keep our progress rolling and I will see you then.
