WEBVTT
1
00:00:01.870 --> 00:00:02.830
Hello, everyone.

2
00:00:03.280 --> 00:00:07.630
This is a quick update, video that I'm filming in June of 2020.

3
00:00:08.050 --> 00:00:13.720
So in our previous lesson, you and I finally completed our live search overlay feature.

4
00:00:14.020 --> 00:00:17.020
However, we wrote the code using J query.

5
00:00:17.560 --> 00:00:21.400
Now, in my opinion, there's nothing inherently wrong with using J.

6
00:00:21.430 --> 00:00:21.970
Query.

7
00:00:22.330 --> 00:00:28.930
But in today's Web development industry, there's definitely a demand for developers who can write JavaScript

8
00:00:29.080 --> 00:00:30.070
without J.

9
00:00:30.100 --> 00:00:36.430
Query, because doing this allows our final bundled JavaScript file to be a good bit smaller than if

10
00:00:36.430 --> 00:00:37.300
we did use J.

11
00:00:37.330 --> 00:00:37.780
Query.

12
00:00:38.050 --> 00:00:40.720
This means faster download times for our visitors.

13
00:00:41.140 --> 00:00:43.240
So in this lesson I want to show you a J.

14
00:00:43.270 --> 00:00:46.930
Query free version of our search overlay file.

15
00:00:47.440 --> 00:00:49.000
So this is our search.

16
00:00:49.090 --> 00:00:49.350
J.

17
00:00:49.380 --> 00:00:51.520
S file that we've been working on together.

18
00:00:51.880 --> 00:00:54.370
And this absolutely does use J.

19
00:00:54.400 --> 00:00:54.910
Query.

20
00:00:55.450 --> 00:00:57.820
However, if I switch to this window.

21
00:00:58.570 --> 00:01:01.810
This is a version of the search code that I've written off camera.

22
00:01:02.140 --> 00:01:03.740
And this does not use J.

23
00:01:03.760 --> 00:01:04.240
Query.

24
00:01:04.630 --> 00:01:09.550
You can find this file to download in the associated resources for this lesson.

25
00:01:10.030 --> 00:01:15.400
We're not going to walk through this character by character line by line, but I am going to walk through

26
00:01:15.400 --> 00:01:17.590
the big differences in just a moment with you.

27
00:01:18.040 --> 00:01:23.710
For now, though, right away, I want to let you know that this file is a direct drop in replacement

28
00:01:23.710 --> 00:01:24.940
for our other search J.

29
00:01:24.940 --> 00:01:25.750
S file.

30
00:01:26.140 --> 00:01:31.450
So, for example, I can just copy this entire file and then back in the file that we've been working

31
00:01:31.450 --> 00:01:31.810
on.

32
00:01:31.870 --> 00:01:39.880
I can just delete everything in there, paste in my clipboard, hit, save and with my NPM run dev command

33
00:01:39.880 --> 00:01:41.140
running in the command line.

34
00:01:41.440 --> 00:01:45.190
That's going to automatically bundle everything up and back in the browser.

35
00:01:45.880 --> 00:01:52.060
I will manually refresh just to make sure that the event handlers for the search icon click are not

36
00:01:52.060 --> 00:01:52.840
doubling up.

37
00:01:52.900 --> 00:01:59.470
But if I open the search and search for biology, you can see that it works exactly the same.

38
00:02:00.340 --> 00:02:02.860
Only now my code is not relying on J.

39
00:02:02.890 --> 00:02:03.400
Query.

40
00:02:03.910 --> 00:02:09.280
So at this point, let's jump into the file and I want to walk through from a bird's eye view.

41
00:02:09.550 --> 00:02:12.880
The big difference is that I made to the code right away.

42
00:02:12.880 --> 00:02:17.110
On line number one, we see that I'm importing something named Axios.

43
00:02:17.500 --> 00:02:19.780
We will talk about Axios in just a moment.

44
00:02:20.080 --> 00:02:25.840
For now, though, if we look inside the constructor, you can see that to select an element instead

45
00:02:25.840 --> 00:02:33.850
of using the J query dollar sign and then including a CSF like selector, I'm instead just saying document

46
00:02:33.880 --> 00:02:35.350
dot, query selector.

47
00:02:35.440 --> 00:02:38.650
And then again, you can use a CSF like selector.

48
00:02:39.310 --> 00:02:43.090
So all modern Web browsers offer this to us natively.

49
00:02:43.270 --> 00:02:45.940
We don't need the extra library or framework like J.

50
00:02:45.970 --> 00:02:46.390
Query.

51
00:02:46.930 --> 00:02:54.100
In addition to query selector, which will select the first instance of this element, we also have

52
00:02:54.460 --> 00:03:02.140
query selector all which will return an array or a node list of all elements that match this selector.

53
00:03:02.680 --> 00:03:06.940
I used this because in our H t Amelle there are two different J.

54
00:03:06.940 --> 00:03:08.680
S search trigger elements.

55
00:03:08.980 --> 00:03:13.030
There is one designed for desktops and then one designed for mobile devices.

56
00:03:13.510 --> 00:03:19.690
So this means that our property of open button is a collection or an array that contains multiple elements.

57
00:03:20.140 --> 00:03:25.540
So then down a bit in the events, you can see that here is that open button, which contains multiple

58
00:03:25.570 --> 00:03:26.200
elements.

59
00:03:26.590 --> 00:03:34.270
I do need to manually loop through that array and for each element in that collection, I am manually

60
00:03:34.270 --> 00:03:35.740
adding an event listener.

61
00:03:36.750 --> 00:03:40.200
So that's one nice thing that Jake Query does for us in Jake Query.

62
00:03:40.470 --> 00:03:46.110
You can select multiple elements and then you can sort of act on that variable as if it's just one element.

63
00:03:46.470 --> 00:03:50.820
And Jake Query will do something to all of the elements in that collection for you.

64
00:03:51.390 --> 00:03:53.550
But as you can see, this is not a big deal.

65
00:03:53.790 --> 00:03:56.250
Doing this manually is not the end of the world.

66
00:03:56.760 --> 00:04:02.700
Next up, instead of using Jake queries on method for event listening, you can see I'm just using the

67
00:04:02.940 --> 00:04:07.140
JavaScript native add event listener moving on.

68
00:04:07.170 --> 00:04:10.140
For the most part, all of the code stayed exactly the same.

69
00:04:10.620 --> 00:04:12.780
We continue to scroll down here.

70
00:04:12.780 --> 00:04:13.860
We see a big difference.

71
00:04:13.890 --> 00:04:20.610
So instead of using the J query method to send a request to a server, I'm now using something called

72
00:04:20.700 --> 00:04:21.690
Axios.

73
00:04:22.080 --> 00:04:27.990
So Axios is a popular package that has nothing to do with WordPress or J Query or anything.

74
00:04:27.990 --> 00:04:30.600
It's just its own independent entity.

75
00:04:30.930 --> 00:04:35.040
But it's the industry standard for sending off HTP requests.

76
00:04:35.430 --> 00:04:40.770
Technically, we could take things one step further and instead of using axios, you could just use

77
00:04:40.770 --> 00:04:43.380
the Web browsers, fetch API.

78
00:04:43.710 --> 00:04:47.280
But in my opinion, Axios makes our lives a lot easier.

79
00:04:47.940 --> 00:04:55.050
So with Axios you just say Axios dot get you give it a U RL and then it's going to return a promise.

80
00:04:55.380 --> 00:05:00.960
So that's why I have the word a wait here that's going to make sure that JavaScript doesn't move on

81
00:05:00.960 --> 00:05:07.020
to the next line of code until this promise has completed, because we don't know how long it's going

82
00:05:07.020 --> 00:05:10.590
to take for the server to actually give us this result back.

83
00:05:11.070 --> 00:05:13.800
So I'm saving that in a variable named response.

84
00:05:14.100 --> 00:05:19.410
Once this actually finishes, then JavaScript will continue running the rest of our code instead of

85
00:05:19.410 --> 00:05:19.980
using a J.

86
00:05:20.010 --> 00:05:22.630
Query method to set the H.T. Amelle for Element.

87
00:05:22.710 --> 00:05:28.070
You can just use the JavaScript or Web browser native function of DOT inner HDMI.

88
00:05:28.680 --> 00:05:30.300
Well, actually, it's not a function or method.

89
00:05:30.330 --> 00:05:31.410
It's just a property.

90
00:05:31.650 --> 00:05:33.720
And we can manipulate its value here.

91
00:05:34.950 --> 00:05:39.300
OK, moving on, if we scroll down, there's really not any other huge changes.

92
00:05:39.600 --> 00:05:45.660
I will point out that instead of using J query to add or remove a CSX class from an element.

93
00:05:46.110 --> 00:05:52.440
Well, every modern Web browser has something called class list that belongs to any HDMI oil element.

94
00:05:52.890 --> 00:05:58.050
And then you can just say class list, dot add or class list dot remove.

95
00:05:58.590 --> 00:06:00.180
So we don't need J query for that.

96
00:06:00.780 --> 00:06:03.270
And honestly, that's basically it for the whole file.

97
00:06:04.200 --> 00:06:09.230
Now, again, I encourage you to download this file and drop it in and replace your existing search

98
00:06:09.240 --> 00:06:10.050
J.S. file.

99
00:06:10.050 --> 00:06:14.820
And if you're curious how I accomplished any of this without J query, just go ahead and dig through

100
00:06:14.820 --> 00:06:15.300
the code.

101
00:06:15.840 --> 00:06:22.320
I didn't refilled this entire previous chapter to use this Jake re free version because all of the concepts

102
00:06:22.320 --> 00:06:24.480
and principles stay exactly the same.

103
00:06:24.900 --> 00:06:30.990
It's just minor syntax differences here and there to utilize the Web browsers native functionality.

104
00:06:31.350 --> 00:06:32.310
Right, instead of the J.

105
00:06:32.350 --> 00:06:33.720
Query specific version.

106
00:06:34.150 --> 00:06:39.870
Anyways, I strongly encourage you to use this drop in J query free replacement for our search J.

107
00:06:39.870 --> 00:06:40.770
S module.

108
00:06:40.980 --> 00:06:43.980
It should make our overall JavaScript a bit more lightweight.

109
00:06:44.400 --> 00:06:47.520
And with that in mind, we're going to move on to the next chapter.

110
00:06:47.970 --> 00:06:50.400
Let's keep things rolling and I'll see you then.
