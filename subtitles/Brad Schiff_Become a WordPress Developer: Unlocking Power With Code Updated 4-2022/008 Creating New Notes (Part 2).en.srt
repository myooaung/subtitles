1
00:00:02,120 --> 00:00:08,930
Hello, everyone, in this video we are going to pick up right where we left off in part one, here's

2
00:00:08,930 --> 00:00:12,380
a quick 20 or 30 second refresher on where we left off.

3
00:00:12,740 --> 00:00:17,750
Now, at this point, let's change gears and focus on that imagined real data here.

4
00:00:17,750 --> 00:00:18,890
Text, right.

5
00:00:18,900 --> 00:00:21,170
So if I create another sample post.

6
00:00:23,340 --> 00:00:24,780
Hi, hey, hello.

7
00:00:25,680 --> 00:00:31,710
Go ahead and create let's adjust things so that there's content that gets added to the page in real

8
00:00:31,710 --> 00:00:37,360
time on the fly perfectly matches the formatting for the other note posts.

9
00:00:37,530 --> 00:00:41,970
Now, there are a lot of different ways of achieving that, but let me show you how I would do it.

10
00:00:42,300 --> 00:00:49,530
So back in our JavaScript, within our create note method, down within our success function, here's

11
00:00:49,530 --> 00:00:52,200
the sample test code that we're using at the moment.

12
00:00:52,200 --> 00:00:52,570
Right.

13
00:00:52,590 --> 00:00:54,140
Imagine real data here.

14
00:00:54,480 --> 00:00:57,030
Why don't we go ahead and delete that list item?

15
00:00:57,300 --> 00:01:04,080
And actually, instead of having quotes here to indicate a regular string, let's delete those and use

16
00:01:04,080 --> 00:01:09,170
back ticks to indicate that we want to use a JavaScript template literal.

17
00:01:09,600 --> 00:01:15,780
And remember, one of the many advantages of a template literal is that you can drop down to a new line.

18
00:01:16,140 --> 00:01:24,060
And on this new line, let's just include HTML that perfectly matches the formatting for a note post

19
00:01:24,060 --> 00:01:24,930
interface.

20
00:01:25,320 --> 00:01:27,570
Now, there's no sense in reinventing the wheel.

21
00:01:27,840 --> 00:01:30,540
We don't need to type out that HTML again.

22
00:01:30,900 --> 00:01:38,460
Instead, let's just jump into our page, my notes, dot file and write underneath the create new note

23
00:01:38,460 --> 00:01:38,990
form.

24
00:01:39,000 --> 00:01:46,710
Remember, we've got the unordered list with the list item for each note post user interface so we can

25
00:01:46,710 --> 00:01:49,680
literally just copy and paste the list item.

26
00:01:50,010 --> 00:01:50,340
Right.

27
00:01:50,340 --> 00:01:56,160
And that will give us the title and body field as well as the edit and delete buttons to copy the whole

28
00:01:56,160 --> 00:01:56,850
line.

29
00:01:57,180 --> 00:02:02,190
And then back in our JavaScript within our template, literal on the new line, I'm just going to paste

30
00:02:02,190 --> 00:02:02,580
it in.

31
00:02:03,360 --> 00:02:10,730
And now all we need to do is replace any of the P blocks with JavaScript expressions instead.

32
00:02:11,130 --> 00:02:18,840
So let's delete this first block of HTTP that is responsible for outputting the I.D. number of the post

33
00:02:18,840 --> 00:02:20,130
that was just created.

34
00:02:20,400 --> 00:02:25,710
And if you're scratching your head and wondering how are we supposed to fetch the ID of a post that

35
00:02:25,710 --> 00:02:27,590
was just created on the fly?

36
00:02:27,870 --> 00:02:35,400
Well, luckily, when you make a successful request to the WordPress rest API, it responds back with

37
00:02:35,400 --> 00:02:37,530
relevant data for that post.

38
00:02:37,830 --> 00:02:43,350
For example, back in the browser, remember, I just filled out the form which created the post and

39
00:02:43,350 --> 00:02:44,610
then we see this here.

40
00:02:44,790 --> 00:02:49,830
But if I check my browsers console, we see our congrats success message.

41
00:02:49,830 --> 00:02:55,520
But way more importantly, we see the official response from the rest API.

42
00:02:55,890 --> 00:03:01,200
The reason we see this is because back in our code, within our success function, remember, we are

43
00:03:01,200 --> 00:03:05,790
saying console, dot, log, whatever the server responds with.

44
00:03:06,270 --> 00:03:12,300
And luckily for us, the server responds with every little bit of data about the post that we could

45
00:03:12,300 --> 00:03:12,960
wish for.

46
00:03:13,470 --> 00:03:15,290
So here's the ID number.

47
00:03:15,480 --> 00:03:16,680
Here's the title.

48
00:03:17,280 --> 00:03:18,660
Here's the content.

49
00:03:19,380 --> 00:03:25,080
So check this out back in our code within our template, literal when we want to output the idea of

50
00:03:25,080 --> 00:03:31,650
the post, let's just open up a JavaScript, expressions of dollar, sign curly brackets and then just

51
00:03:31,650 --> 00:03:38,070
response to work with the data that WordPress sends back to us and then dot whatever we're interested

52
00:03:38,070 --> 00:03:38,220
in.

53
00:03:38,220 --> 00:03:40,310
So Dot, I'd call.

54
00:03:40,320 --> 00:03:43,050
So let's just do the same thing for all of the other values.

55
00:03:43,470 --> 00:03:48,300
So for example, on this first input, that would need to be the title, right.

56
00:03:48,300 --> 00:03:57,150
We want to output the title of the post in this large blue font, so let's get rid of this block and

57
00:03:57,150 --> 00:04:02,040
instead JavaScript expression, let's say response dot.

58
00:04:02,310 --> 00:04:04,590
And you never need to memorize what to type.

59
00:04:04,590 --> 00:04:06,150
Just go back into your console.

60
00:04:06,930 --> 00:04:13,380
We can see that there's a title property with sub properties named Raw and Rendered.

61
00:04:13,740 --> 00:04:17,310
We can dig into the difference between these two a bit more in the future.

62
00:04:17,310 --> 00:04:19,650
But for now, let's just go with the raw.

63
00:04:19,980 --> 00:04:23,760
So response dot title dot raw.

64
00:04:24,400 --> 00:04:29,070
OK, next up is the text area that should have the body content.

65
00:04:30,030 --> 00:04:39,630
So scroll over, let's delete this block and instead open up a JavaScript expression and say response

66
00:04:39,750 --> 00:04:42,900
dot content, dot raw.

67
00:04:43,170 --> 00:04:48,870
OK, now at this point we can go ahead and save this file and test it out on the front end.

68
00:04:49,140 --> 00:04:51,630
So hello world five thousand.

69
00:04:52,560 --> 00:04:53,160
Hi there.

70
00:04:53,760 --> 00:04:54,810
Go ahead and create it.

71
00:04:56,130 --> 00:04:56,550
Perfect.

72
00:04:56,550 --> 00:05:01,890
And it slides down with the actual real data on the fly in real time.

73
00:05:02,310 --> 00:05:07,350
However, if you click on the edit or delete button, you'll notice that nothing happens.

74
00:05:07,680 --> 00:05:13,170
But if we click on the edit or delete button for a post that already existed a moment ago, that still

75
00:05:13,170 --> 00:05:13,830
works.

76
00:05:14,250 --> 00:05:20,160
Now, the reason for this is because these edit and delete buttons did not exist when the page first

77
00:05:20,160 --> 00:05:22,680
loaded, which means our JavaScript never.

78
00:05:22,740 --> 00:05:25,720
Or set up event listeners for these buttons.

79
00:05:26,190 --> 00:05:28,040
Let me show you how we can fix this.

80
00:05:28,290 --> 00:05:33,300
So back in our JavaScript, up towards the top with the NA events area.

81
00:05:33,630 --> 00:05:36,450
Let's take this delete note event as an example.

82
00:05:36,870 --> 00:05:43,500
Now, when the page first loads, there might only be one or two notes and only those one or two notes

83
00:05:43,500 --> 00:05:49,650
would actually be watching for this event, meaning this is not going to be on the lookout for future

84
00:05:49,650 --> 00:05:51,820
elements that match this selector.

85
00:05:52,170 --> 00:05:59,910
So instead, let's do this, let's change the selector to look for an element with an idea of my notes,

86
00:06:00,300 --> 00:06:04,890
which is the unordered list which contains any present or future notes.

87
00:06:05,190 --> 00:06:06,080
Now, check this out.

88
00:06:06,090 --> 00:06:09,780
We can add a third argument in between this and this.

89
00:06:10,150 --> 00:06:14,400
So right after click comma, I can add an X and another comma.

90
00:06:14,400 --> 00:06:21,450
And instead of an actual X, I can say quotes and then look for a class of delete note.

91
00:06:21,900 --> 00:06:28,140
So now what this line is saying is whenever you click anywhere within the parent unordered list, which

92
00:06:28,140 --> 00:06:34,950
will always exist when the page first loads, if the actual interior element that you clicked on matches

93
00:06:34,950 --> 00:06:38,820
this selector, well, then fire off our callback method.

94
00:06:39,420 --> 00:06:42,960
OK, let's do the same thing for edit note an update note.

95
00:06:43,470 --> 00:06:49,190
So let's change the initial selector to the overall list with an idea of my notes.

96
00:06:49,410 --> 00:06:57,630
Then let's add an additional argument of a selector with a class of edit note and finally for update

97
00:06:57,630 --> 00:07:01,740
note, let's change this initial selector to my notes.

98
00:07:02,340 --> 00:07:08,880
Add an additional argument of a selector or a class update note.

99
00:07:09,600 --> 00:07:13,950
OK, let's go ahead and save this and test it out.

100
00:07:14,620 --> 00:07:20,160
So maybe a title of cats love math lorem ipsum.

101
00:07:20,490 --> 00:07:21,630
Go ahead and create it.

102
00:07:22,700 --> 00:07:25,140
OK, it's added to the page in real time.

103
00:07:25,150 --> 00:07:26,940
And now let's try out the buttons.

104
00:07:28,350 --> 00:07:30,150
OK, that brings up the edit interface.

105
00:07:30,150 --> 00:07:32,010
Let's change this to dogs.

106
00:07:32,010 --> 00:07:32,850
Love math.

107
00:07:33,120 --> 00:07:34,190
Click the save button.

108
00:07:36,300 --> 00:07:36,780
Cool.

109
00:07:36,780 --> 00:07:43,020
And just for proof that it's working, if I refresh the back end note screen they receive dogs love

110
00:07:43,020 --> 00:07:46,830
math and why don't we test out the on the fly delete button.

111
00:07:48,270 --> 00:07:51,600
So in real time it was removed from the page visually.

112
00:07:51,990 --> 00:08:00,030
And also if we check the back end and refresh dogs love math disappears and we can see one item in the

113
00:08:00,030 --> 00:08:00,630
trash.

114
00:08:01,110 --> 00:08:01,740
Beautiful.

115
00:08:02,130 --> 00:08:08,580
And this means that we have successfully learned how to create brand new posts from the front end of

116
00:08:08,580 --> 00:08:12,690
a website, which is going to bring this lesson to a close.

117
00:08:13,140 --> 00:08:19,920
Keep in mind, though, that at the moment only administrator or editor accounts are able to actually

118
00:08:19,920 --> 00:08:21,090
create notes.

119
00:08:21,510 --> 00:08:27,630
And our entire goal was to let users of the subscriber roll create and manage their notes.

120
00:08:27,900 --> 00:08:34,530
So in our next lesson, we are going to give the subscriber Rolle permission to create, edit and delete

121
00:08:34,530 --> 00:08:35,760
private notes.

122
00:08:36,180 --> 00:08:41,820
And we are going to learn how to do this in a way that doesn't hurt the security or speed performance

123
00:08:42,000 --> 00:08:43,050
of our website.

124
00:08:43,500 --> 00:08:47,580
So let's keep things rolling and I will see you in the next lesson.
