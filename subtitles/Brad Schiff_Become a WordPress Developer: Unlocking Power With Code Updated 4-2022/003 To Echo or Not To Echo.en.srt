1
00:00:00,750 --> 00:00:01,800
Hello, everyone.

2
00:00:02,250 --> 00:00:09,390
Let's take a quick break from our project to answer one of the most common questions, and that is,

3
00:00:09,630 --> 00:00:14,430
why do certain functions need to be echoed while other functions don't?

4
00:00:14,790 --> 00:00:20,490
In order to understand the answer to this, let's write a couple of functions together right now.

5
00:00:20,730 --> 00:00:24,870
So jump into your text editor and within your theme folder.

6
00:00:24,900 --> 00:00:26,780
Let's open up index.

7
00:00:28,530 --> 00:00:34,020
We're just going to write a bit of test code for educational purposes that we will delete in about five

8
00:00:34,020 --> 00:00:34,830
minutes from now.

9
00:00:35,130 --> 00:00:41,310
So it doesn't really matter where we type this, but I'm just going to open up a new area right below

10
00:00:41,310 --> 00:00:44,300
the header, OK?

11
00:00:44,430 --> 00:00:45,870
And now we can experiment.

12
00:00:46,260 --> 00:00:47,670
So type this out with me.

13
00:00:48,010 --> 00:00:56,010
Let's imagine we want to create our own brand new function, so function and let's call it double me

14
00:00:56,670 --> 00:00:59,370
parentheses curly brackets.

15
00:00:59,640 --> 00:01:04,410
And let's imagine that the purpose of this function that we are creating is that when you call it,

16
00:01:04,410 --> 00:01:09,260
you give it a number and this function will double that number and give you the result.

17
00:01:09,660 --> 00:01:16,200
So for example, below the function definition, when it's time for us to actually run and call the

18
00:01:16,200 --> 00:01:20,640
function, we might say double MI five.

19
00:01:21,600 --> 00:01:21,890
Right.

20
00:01:21,900 --> 00:01:24,360
And we would expect that to generate 10.

21
00:01:24,870 --> 00:01:28,080
Or if we said eight, we would expect it to generate sixteen.

22
00:01:28,470 --> 00:01:32,210
OK, so let's go ahead and make that happen within the function definition.

23
00:01:32,550 --> 00:01:37,140
So within these parentheses, we want a parameter that can receive the incoming number.

24
00:01:37,410 --> 00:01:42,070
Doesn't matter what we call it, let's just call it dollar symbol X as a placeholder variable.

25
00:01:42,540 --> 00:01:48,120
OK, and then in the curly brackets, in the body of the function, we can just echo out whatever number

26
00:01:48,120 --> 00:01:50,040
that someone passes into this function.

27
00:01:50,520 --> 00:01:55,510
Times two or asterisk to cool.

28
00:01:55,650 --> 00:02:01,890
So now down below this function definition, we could say double me for right.

29
00:02:01,890 --> 00:02:05,780
And we would expect that to echo out eight onto the page.

30
00:02:06,300 --> 00:02:12,090
So if we save this and refresh the home page of our website, if I zoom in a bit there you can see the

31
00:02:12,090 --> 00:02:12,870
number eight.

32
00:02:13,470 --> 00:02:13,920
Cool.

33
00:02:13,920 --> 00:02:19,320
And if we change this to twenty five save, we see the number fifty.

34
00:02:19,830 --> 00:02:23,580
So that's an example of a function that we don't need to echo.

35
00:02:23,700 --> 00:02:28,320
We just call the function and it echoes something out onto the page for us.

36
00:02:28,650 --> 00:02:31,230
However, not all functions are like this.

37
00:02:31,590 --> 00:02:40,110
Most functions, or I should say a lot of functions instead of echoing out there result, they return

38
00:02:40,140 --> 00:02:41,040
their result.

39
00:02:41,530 --> 00:02:42,540
So what does that mean?

40
00:02:42,540 --> 00:02:43,680
What does return do?

41
00:02:44,160 --> 00:02:48,120
It's basically a functions way of saying my work here is done.

42
00:02:48,360 --> 00:02:52,940
I've done my job and now I'm returning this result or I'm returning this value.

43
00:02:53,250 --> 00:02:59,130
So then down here, when we call or run the function and say double me twenty five, this will still

44
00:02:59,130 --> 00:03:02,790
equal fifty P will evaluate this to be fifty.

45
00:03:03,060 --> 00:03:06,870
However, we are not doing anything with that value of fifty.

46
00:03:07,170 --> 00:03:11,670
In this case, it's just going to sit in memory and we aren't doing anything useful with it.

47
00:03:12,000 --> 00:03:17,360
So if we save this and refresh, you'll notice that that value of fifty disappears up here.

48
00:03:17,700 --> 00:03:23,150
So now it's up to us to actually do something with the value that this function returns.

49
00:03:23,430 --> 00:03:26,430
Now there are a million different things we could do with the value.

50
00:03:26,700 --> 00:03:30,270
Probably the most obvious example would be that we could echo it out.

51
00:03:30,450 --> 00:03:33,480
So echo the results of double, maybe twenty five.

52
00:03:33,900 --> 00:03:37,230
So now that will indeed show fifty again.

53
00:03:37,770 --> 00:03:43,800
Now functions that return values like this are really nice because they're so flexible.

54
00:03:44,130 --> 00:03:44,460
Right.

55
00:03:44,460 --> 00:03:49,230
Because in the world of programming, there's a lot of things we need to do other than just echoing

56
00:03:49,230 --> 00:03:50,610
out simple values.

57
00:03:50,940 --> 00:03:58,980
So for example, we could create a variable magical number and tell it to equal double me ten.

58
00:03:59,340 --> 00:03:59,700
Right.

59
00:03:59,700 --> 00:04:01,980
So we aren't trying to echo anything on to the page.

60
00:04:01,980 --> 00:04:04,680
We're just setting a variable to equal this value.

61
00:04:04,980 --> 00:04:10,710
Or for another example, maybe we want to use that function as an if statement condition.

62
00:04:10,890 --> 00:04:20,700
So, for example, we could say if double the twelve equals twenty four, then echo out onto the page.

63
00:04:21,570 --> 00:04:26,940
The function is performing the math correctly.

64
00:04:30,550 --> 00:04:36,340
Cool, so you get the idea this is not a real world example, you'd probably never do this, but the

65
00:04:36,340 --> 00:04:40,060
idea is that you can use the value that a function returns anywhere.

66
00:04:40,510 --> 00:04:46,120
Now, before we bring everything full circle and tie this back into the topic of WordPress specifically,

67
00:04:46,300 --> 00:04:48,040
let's have a bit of fun first.

68
00:04:48,250 --> 00:04:50,500
So right now, let's delete this if statement.

69
00:04:51,370 --> 00:04:53,910
So we've still got our double function definition.

70
00:04:54,190 --> 00:04:59,770
And right now, below this, let's create another brand new function named Tripple Me.

71
00:05:00,070 --> 00:05:03,670
Instead of typing it out, we can just copy and paste this function.

72
00:05:04,150 --> 00:05:04,990
So copy.

73
00:05:07,260 --> 00:05:15,840
Paiste, let's change the name to triple me and then on this line, change this from times to two times

74
00:05:15,840 --> 00:05:16,230
three.

75
00:05:16,650 --> 00:05:22,320
OK, now below this, let's actually call and run these two functions together, because I think this

76
00:05:22,320 --> 00:05:25,980
will really illustrate the power of functions that return values.

77
00:05:26,340 --> 00:05:29,020
They're so flexible that they can fit together nicely.

78
00:05:29,400 --> 00:05:33,350
So let's begin by saying Double MI five.

79
00:05:33,630 --> 00:05:37,640
So that would be 10, but then we can wrap that within the triple MI function.

80
00:05:38,070 --> 00:05:43,950
So then right before that we could say triple MI parentheses and the parentheses here.

81
00:05:44,220 --> 00:05:49,860
So instead of just saying Triple MI 10, I'm trying to show you that you can use the value that a function

82
00:05:49,860 --> 00:05:53,210
returns as an argument for another function.

83
00:05:53,550 --> 00:05:58,250
So let's test this out by echoing it or outputting it onto the page.

84
00:05:58,620 --> 00:06:01,590
If you triple 10, we would expect to see 30.

85
00:06:02,040 --> 00:06:04,110
So save this refresh.

86
00:06:04,500 --> 00:06:04,850
Cool.

87
00:06:04,860 --> 00:06:07,500
And if I zoom in, you can see a value of thirty.

88
00:06:07,890 --> 00:06:09,120
OK, now that's enough.

89
00:06:09,870 --> 00:06:13,880
For the sake of P, let's tie this back in to WordPress.

90
00:06:14,130 --> 00:06:19,260
So when it comes to the WordPress functions that we don't have to create, that we just get to leverage,

91
00:06:19,410 --> 00:06:24,600
it can be a bit confusing whether a function is going to echo something for us or if it's just going

92
00:06:24,600 --> 00:06:25,430
to return a value.

93
00:06:25,440 --> 00:06:26,770
And so we need to echo it.

94
00:06:27,120 --> 00:06:30,210
So let me show you a tip that can save you tons of confusion.

95
00:06:30,570 --> 00:06:35,700
Back in the text editor, I will delete all of this sample code so that we can talk about WordPress

96
00:06:35,700 --> 00:06:36,460
functions.

97
00:06:36,660 --> 00:06:45,000
So, for example, WordPress has a function named the title, but it also has a function named Get the

98
00:06:45,000 --> 00:06:45,590
title.

99
00:06:45,990 --> 00:06:54,270
Also, there's a WordPress function named the IDE, but WordPress has another function named Get the

100
00:06:54,270 --> 00:06:55,000
Idea.

101
00:06:55,590 --> 00:06:57,360
So how do we make sense of this?

102
00:06:57,870 --> 00:07:03,660
Well, there's a rule of thumb that if a WordPress function begins with the word git, that means it's

103
00:07:03,660 --> 00:07:05,490
not going to echo anything for you.

104
00:07:05,490 --> 00:07:10,470
It's just going to return a value and it's up to you to use that value however you see fit.

105
00:07:10,710 --> 00:07:14,110
On the other hand, if a function begins with the word the.

106
00:07:14,400 --> 00:07:19,350
That means WordPress will indeed handle echoing and outputting it onto the page for you.

107
00:07:19,620 --> 00:07:22,580
Now, at this point in the course, I say we just leave it at that.

108
00:07:22,890 --> 00:07:25,890
So I'm going to delete all of this test code from this lesson.

109
00:07:26,220 --> 00:07:31,710
So I'm putting my index file back to the state that it was in before this lesson even began.

110
00:07:31,950 --> 00:07:38,250
And moving forward, I wouldn't worry about preemptively memorizing every function and knowing exactly

111
00:07:38,250 --> 00:07:41,790
what it does, because that's not how people work in the real world.

112
00:07:41,940 --> 00:07:47,280
In the real world, you will Google in plain English terms, whatever you're trying to accomplish,

113
00:07:47,280 --> 00:07:48,540
and WordPress with code.

114
00:07:48,780 --> 00:07:55,530
And in the search results, you'll want to look for two main websites, codecs and developer, WordPress,

115
00:07:55,530 --> 00:07:56,340
dot org.

116
00:07:56,730 --> 00:08:00,420
These are the official WordPress websites and they have a wealth of information.

117
00:08:00,690 --> 00:08:05,700
They will tell you exactly what a function does, how to use it, what arguments you can pass it.

118
00:08:05,820 --> 00:08:11,760
And most importantly, it will tell you if the function returns something or outputs something for you.

119
00:08:12,000 --> 00:08:16,710
Now, having said all of that, you don't need to go and do any of your own research at this point.

120
00:08:17,040 --> 00:08:18,570
Relax, take a deep breath.

121
00:08:18,570 --> 00:08:20,120
You're in this course for a reason.

122
00:08:20,280 --> 00:08:24,690
It's my job to gradually introduce you to more and more WordPress functions.

123
00:08:24,930 --> 00:08:29,700
And by the end of this course, with a little bit of repetition thrown in there for good practice,

124
00:08:29,700 --> 00:08:35,010
you will have a rock solid understanding of what WordPress functions are at your disposal and what they

125
00:08:35,010 --> 00:08:35,370
do.

126
00:08:35,580 --> 00:08:38,160
I'm never a fan of preemptive memorization.

127
00:08:38,400 --> 00:08:43,320
I'm big on practicing, experimenting and organically building up your understanding.

128
00:08:43,620 --> 00:08:48,660
So long story short, even if you didn't understand everything in this lesson, one hundred percent,

129
00:08:48,840 --> 00:08:53,940
I wouldn't worry about it because we're going to keep practicing these same concepts several more times.

130
00:08:54,150 --> 00:08:56,760
Hopefully this lesson cleared up a bit of confusion.

131
00:08:56,970 --> 00:09:00,810
Let's keep things rolling and I will see you in the next lesson.
