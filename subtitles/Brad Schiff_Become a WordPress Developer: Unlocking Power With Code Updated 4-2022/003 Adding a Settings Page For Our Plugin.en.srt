1
00:00:02,090 --> 00:00:03,130
Hello, everyone.

2
00:00:03,500 --> 00:00:10,210
In this lesson, we're going to create an admin settings page, let's jump right into the action.

3
00:00:11,030 --> 00:00:17,090
So this is a preview of the finished product of what we're trying to build right now.

4
00:00:17,390 --> 00:00:24,830
We want to create a plug in that shows the word count, character count and the approximate read time

5
00:00:25,130 --> 00:00:26,060
for a post.

6
00:00:26,510 --> 00:00:33,830
However, a big part of what plugins do isn't just the feature that they bring to the table, but it's

7
00:00:33,830 --> 00:00:37,900
also letting the user adjust settings and preferences.

8
00:00:38,480 --> 00:00:44,210
So, for example, what if the owner of this site, they wanted the word count and they wanted to read

9
00:00:44,210 --> 00:00:47,090
time, but maybe they did not want the character count?

10
00:00:47,630 --> 00:00:53,820
Well, this is where a plug in setting screen or an admin setting screen comes into play.

11
00:00:54,080 --> 00:00:57,610
So, again, this is a preview of the finished product that we're going to build together.

12
00:00:57,620 --> 00:01:03,470
But if I jump into the admin dashboard and look under settings, there's something called word count

13
00:01:04,070 --> 00:01:05,600
with various settings in the site.

14
00:01:05,600 --> 00:01:10,070
Owner could just uncheck this box for character, count it, save changes.

15
00:01:10,070 --> 00:01:14,250
And if you refresh on the front end, we no longer see the character count.

16
00:01:14,750 --> 00:01:20,930
So all of that is to say that before we worry about actually counting the words and how long it would

17
00:01:20,930 --> 00:01:26,720
take to read in the character count, and even before we learn how to save the user's preferences into

18
00:01:26,720 --> 00:01:33,860
a database, let's first just worry about adding a settings or admin page at all.

19
00:01:34,640 --> 00:01:35,010
Right.

20
00:01:35,030 --> 00:01:43,190
So our very first task is simply to learn how to add a link in the admin settings menu to a new custom

21
00:01:43,190 --> 00:01:45,290
page that we are creating.

22
00:01:45,590 --> 00:01:52,700
So right now, let me switch over to this tab where I do not have the finished product and we can start

23
00:01:52,700 --> 00:01:54,090
to move forward together.

24
00:01:54,530 --> 00:01:57,200
Let's pick up where we left off in the previous lesson.

25
00:01:57,200 --> 00:02:04,840
So we already had a new plugin folder opened up in VST code and inside our only file.

26
00:02:04,850 --> 00:02:08,420
Let's keep the comment in the opening tag.

27
00:02:08,420 --> 00:02:15,090
But everything below the comments, let's delete all of this and give ourselves a clean slate.

28
00:02:15,770 --> 00:02:17,930
Let's begin by adding an action.

29
00:02:17,930 --> 00:02:19,250
So add action.

30
00:02:19,250 --> 00:02:20,210
Semicolon.

31
00:02:20,690 --> 00:02:26,450
The name of the action that we want to hook on to is admin underscore menu.

32
00:02:27,150 --> 00:02:30,130
Then the second argument is just a function that we give it.

33
00:02:30,710 --> 00:02:38,090
So we need to create a unique function name that hasn't been used by any other plugin or by WordPress

34
00:02:38,090 --> 00:02:38,830
itself.

35
00:02:39,170 --> 00:02:45,530
Now, a bit later in this video, once we've actually set up the Settings page link, we can talk about

36
00:02:45,950 --> 00:02:52,610
AP classes and that will allow us to avoid this coming up with unique function names challenge.

37
00:02:53,060 --> 00:02:55,300
But for now, let's just come up with a unique name.

38
00:02:55,310 --> 00:02:59,270
Let's name it our plugin settings link.

39
00:02:59,870 --> 00:03:03,260
OK, now let's create a function with that exact matching name.

40
00:03:03,260 --> 00:03:12,080
So function our plug in settings, link parentheses, curly brackets, OK, and now inside the body

41
00:03:12,080 --> 00:03:13,970
of this function, what do we want to do?

42
00:03:14,270 --> 00:03:22,640
Well, remember, our goal right now is to add a new page or link inside the WordPress admin settings

43
00:03:22,640 --> 00:03:23,210
menu.

44
00:03:23,630 --> 00:03:23,870
Right.

45
00:03:23,870 --> 00:03:26,030
We want a new option to appear somewhere in here.

46
00:03:26,570 --> 00:03:36,260
So within our new function we would just say add underscore options, underscore page, be sure to include

47
00:03:36,260 --> 00:03:37,130
a semicolon.

48
00:03:37,610 --> 00:03:42,590
OK, and now inside these parentheses, we need to give this five arguments.

49
00:03:42,860 --> 00:03:46,130
So I'll just include one, two, three, four, five as placeholders.

50
00:03:46,400 --> 00:03:48,800
And now let's talk about what we need to include here.

51
00:03:49,490 --> 00:03:53,690
The first argument is the title of the page that we want to create.

52
00:03:54,170 --> 00:04:01,040
So, for example, this would be used in the actual tab in your browser, just the overall document

53
00:04:01,040 --> 00:04:01,520
title.

54
00:04:01,520 --> 00:04:07,460
So why don't we say quotes, word count settings?

55
00:04:07,880 --> 00:04:15,410
OK, the second argument is the text or title for the page that will be used in the settings menu.

56
00:04:16,070 --> 00:04:20,660
Now you'll notice there's not very much horizontal space here to fit too many words.

57
00:04:20,960 --> 00:04:28,610
So maybe instead of word count settings for this, let's just say word count, OK?

58
00:04:28,610 --> 00:04:33,050
The third argument has to do with permissions or capabilities.

59
00:04:33,050 --> 00:04:41,210
So this is basically saying what capability does the user need to have in order to see this page?

60
00:04:41,750 --> 00:04:44,480
So this gets into user roles and permissions.

61
00:04:44,690 --> 00:04:48,290
Do you want only your admins to be able to see this page?

62
00:04:48,290 --> 00:04:50,900
Do you want your editors, your average users?

63
00:04:51,170 --> 00:04:56,690
It's up to you, but I just want sort of administrative users to see this page.

64
00:04:57,110 --> 00:05:01,400
So for this third argument, I'm going to say quotes manage.

65
00:05:01,730 --> 00:05:09,170
Underscore options, so only if the current user has permissions to change options and WordPress, should

66
00:05:09,170 --> 00:05:10,880
they be able to see this page?

67
00:05:11,400 --> 00:05:17,090
OK, the fourth argument is sort of the slug or short name for this new page.

68
00:05:17,690 --> 00:05:24,320
And even if we're going to be using AP classes a bit later in this video, we still need this short

69
00:05:24,320 --> 00:05:26,420
namer slug to be unique.

70
00:05:26,810 --> 00:05:33,210
Essentially, this is what will be used at the end of the Eurail for our new settings page.

71
00:05:33,650 --> 00:05:40,220
So why don't we just say maybe word count settings page.

72
00:05:41,140 --> 00:05:48,550
OK, and then the fifth and final argument is just a function that we give it and it will be that functions

73
00:05:48,550 --> 00:05:54,650
job to actually output the HTML content that we want on the new page.

74
00:05:55,450 --> 00:05:59,050
So for now, let's just make up a unique new function name.

75
00:05:59,600 --> 00:06:05,040
I will call it our settings page HTML.

76
00:06:06,240 --> 00:06:09,250
OK, and then let's just go create a function with that matching name.

77
00:06:09,250 --> 00:06:18,270
So function our settings page, html parentheses, curly brackets, OK.

78
00:06:18,280 --> 00:06:24,190
And then in this function instead of actually returning with the keyword return and then a string of

79
00:06:24,190 --> 00:06:30,060
text instead of that, here's what we're going to do right after this opening curly bracket here.

80
00:06:30,310 --> 00:06:39,190
Let's drop out of PHP and then right before this closing curly bracket here, let's drop back into HTTP.

81
00:06:39,460 --> 00:06:44,280
So then right here we can just include regular traditional HTML.

82
00:06:44,860 --> 00:06:47,710
Now a bit later, we can set up real HTML.

83
00:06:47,710 --> 00:06:48,850
That will look nice.

84
00:06:48,850 --> 00:06:55,180
But for now, just as a quick test, let's say hello world from our new plug in.

85
00:06:55,960 --> 00:06:58,160
Let's give this a save and test it out.

86
00:06:59,050 --> 00:07:06,070
So within our admin dashboard, just hit reload to refresh and then let's scroll down, look in the

87
00:07:06,070 --> 00:07:09,970
settings menu and there we see word count.

88
00:07:10,240 --> 00:07:16,810
And if we click on it, there we see that HTML Hello World from our new plug in and also notice up in

89
00:07:16,810 --> 00:07:18,820
the tab for your browser.

90
00:07:18,820 --> 00:07:20,740
You see the full title, right?

91
00:07:20,740 --> 00:07:22,490
Word count settings.

92
00:07:23,380 --> 00:07:30,250
Now before we start to add a bit of real HTML here, let's first address the challenge of having to

93
00:07:30,250 --> 00:07:36,400
come up with super unique function names, because I don't know about you, but having to come up with

94
00:07:36,400 --> 00:07:42,490
names like our plug ins settings link and our Settings Page HTML.

95
00:07:42,820 --> 00:07:45,890
That's not an enjoyable process for me, right?

96
00:07:45,910 --> 00:07:51,010
Having to come up with these really long names to make sure that they're unique and that no other plug

97
00:07:51,010 --> 00:07:53,710
in and that WordPress itself isn't already using it.

98
00:07:54,100 --> 00:07:55,720
That can be a time waster.

99
00:07:55,900 --> 00:07:59,860
And also it's just difficult to keep typing these names out throughout your code.

100
00:08:00,220 --> 00:08:04,910
It would be nice if we could use names for our functions that are a lot simpler.

101
00:08:05,320 --> 00:08:08,860
So this is where classes can help us out.

102
00:08:09,340 --> 00:08:13,480
So let me show you what I would do right above this first add action line.

103
00:08:13,480 --> 00:08:21,190
So just right below the comments, let's add a new line and say class that's lowercase and then we make

104
00:08:21,190 --> 00:08:21,860
up a name.

105
00:08:22,150 --> 00:08:28,480
Now, the class name does need to be unique itself, but the nice thing is that inside the class, none

106
00:08:28,480 --> 00:08:31,480
of the properties or methods need to have unique names.

107
00:08:31,930 --> 00:08:33,070
We'll see this in just a moment.

108
00:08:33,070 --> 00:08:34,670
But let's come up with a class name.

109
00:08:35,140 --> 00:08:41,600
How about word count and time plug in, OK?

110
00:08:41,620 --> 00:08:45,910
Now, when you're creating a class, you do not have parentheses right after this like you would with

111
00:08:45,910 --> 00:08:46,570
a function.

112
00:08:46,820 --> 00:08:49,560
Instead, we just begin with curly brackets.

113
00:08:50,170 --> 00:08:51,160
Let's drop down.

114
00:08:51,190 --> 00:08:57,580
OK, now, inside here, this is where we sort of create a blueprint for an object, OK?

115
00:08:57,580 --> 00:09:03,540
But then below this, we would want to instantiate or create a new instance of this class.

116
00:09:04,390 --> 00:09:13,810
So just right here below the curly brackets, let's say new instance of word count and time, plug in

117
00:09:14,020 --> 00:09:18,970
and parentheses to actually use the class semicolon as well.

118
00:09:19,180 --> 00:09:23,080
Now, this would work with the new object just sort of floating in outer space.

119
00:09:23,080 --> 00:09:26,590
But let me show you what I like to do at the very beginning of this line.

120
00:09:26,920 --> 00:09:32,110
Let's create a new variable and let's just name it this exact same thing, but start it with a lowercase

121
00:09:32,110 --> 00:09:32,500
letter.

122
00:09:33,130 --> 00:09:39,990
So word count and time plugin equals so dollar sign for a variable.

123
00:09:40,300 --> 00:09:48,490
This way, if any other plugins need to remove one of our actions or filters, they can actually get

124
00:09:48,490 --> 00:09:52,450
access to our functions or methods that live inside our class.

125
00:09:52,990 --> 00:09:53,210
Right.

126
00:09:53,260 --> 00:09:56,200
They could use this variable and then look inside it.

127
00:09:56,650 --> 00:10:01,020
At this point, let's circle back to what should go inside our actual class right here.

128
00:10:01,510 --> 00:10:09,520
So in any time you create a new instance from a class, you will automatically call the function inside

129
00:10:09,520 --> 00:10:13,420
the class that is named underscore, underscore, construct.

130
00:10:13,870 --> 00:10:15,550
So let's create that function right now.

131
00:10:15,550 --> 00:10:23,050
So inside this class function, underscore, underscore, construct, parentheses, curly brackets.

132
00:10:23,590 --> 00:10:27,160
And now there's no one right or wrong way to set up a class.

133
00:10:27,160 --> 00:10:33,520
But what I like to do is include any of sort of the top level actions or filters that we're adding.

134
00:10:33,850 --> 00:10:40,210
I like to include those in the constructor, so let's just cut and paste this add action line.

135
00:10:40,680 --> 00:10:46,500
Let's cut this to live inside our new construct function, so right here.

136
00:10:47,580 --> 00:10:53,970
OK, so now when we create our new instance from this blueprint, this code will automatically run.

137
00:10:54,470 --> 00:10:58,960
So now it's just a matter of moving our other functions to live inside our class.

138
00:10:59,190 --> 00:11:06,390
So just select or cut and paste these two functions, cut those and now just add them right after the

139
00:11:06,390 --> 00:11:07,170
constructor.

140
00:11:07,620 --> 00:11:10,530
So right after this function, but still in the class.

141
00:11:10,740 --> 00:11:11,850
So Paiste right here.

142
00:11:13,030 --> 00:11:17,550
OK, and now we can sort of circle back to the whole reason we're even setting up a class in the first

143
00:11:17,550 --> 00:11:17,980
place.

144
00:11:18,400 --> 00:11:21,960
Now, we can have a very simple name for this.

145
00:11:21,990 --> 00:11:27,930
So instead of this really long name of our plugins settings link, imagine if instead we just wanted

146
00:11:27,930 --> 00:11:34,200
this function to be named admin page so we can just change that here.

147
00:11:34,650 --> 00:11:36,030
Admin page.

148
00:11:36,780 --> 00:11:37,240
OK.

149
00:11:37,260 --> 00:11:41,180
And now the question is, how do you reference that up here?

150
00:11:41,730 --> 00:11:45,800
It's not as simple as just changing this to admin page.

151
00:11:46,140 --> 00:11:49,860
Instead, we need to use the callable syntax in PHP.

152
00:11:50,160 --> 00:11:51,060
So here's what we do.

153
00:11:51,450 --> 00:11:55,020
Get rid of this second argument here entirely.

154
00:11:55,470 --> 00:11:57,810
And in its place we give it an array.

155
00:11:57,840 --> 00:12:02,580
So array parentheses and we're going to give the array to arguments.

156
00:12:02,580 --> 00:12:04,350
So ACN be as a placeholder.

157
00:12:05,010 --> 00:12:07,890
The first argument is an object.

158
00:12:07,920 --> 00:12:13,050
So in this case, we just want to point towards this class itself or this current instance of the class.

159
00:12:13,360 --> 00:12:15,720
So we'd say dollar, sign this.

160
00:12:16,830 --> 00:12:20,910
OK, and then the second argument is just the actual name of your method.

161
00:12:20,940 --> 00:12:25,560
So that would be quotes, admin page.

162
00:12:25,830 --> 00:12:29,640
And the whole idea here is that you can name this something very generic.

163
00:12:29,820 --> 00:12:35,190
You don't need to worry about this creating a conflict with other plugins or with WordPress so we can

164
00:12:35,190 --> 00:12:37,770
name this something short, generic, easy to type.

165
00:12:38,010 --> 00:12:40,400
We don't need to worry about that conflict issue.

166
00:12:40,770 --> 00:12:42,620
Let's do the same thing with this function.

167
00:12:43,170 --> 00:12:47,370
Why don't we change its name to just be our HTML?

168
00:12:48,220 --> 00:12:54,120
OK, so we change the actual function name then on this line towards the end of it where we are referencing

169
00:12:54,120 --> 00:12:57,840
that function again, we would just get rid of this argument.

170
00:12:57,840 --> 00:13:03,640
Instead of a string of text, we would give it an array, give it to arguments inside the array.

171
00:13:03,660 --> 00:13:06,900
The first is just dollar sign this.

172
00:13:07,470 --> 00:13:07,630
Right?

173
00:13:07,680 --> 00:13:09,300
We're just sort of working with our class.

174
00:13:09,300 --> 00:13:14,410
And then the second argument would be quotes our HTML.

175
00:13:15,240 --> 00:13:18,760
OK, let's go ahead and save this and test it out.

176
00:13:19,560 --> 00:13:24,150
So if I refresh, cool, everything works exactly the same.

177
00:13:24,510 --> 00:13:29,560
Only now we don't need to come up with these really long, unique names for our functions or methods.

178
00:13:30,180 --> 00:13:30,570
Cool.

179
00:13:30,600 --> 00:13:36,300
Now, before we bring this lesson to a close, let's adjust the actual HTML really quick just so that

180
00:13:36,300 --> 00:13:38,580
it sort of looks like a real settings page.

181
00:13:39,330 --> 00:13:41,370
So let's get rid of this hello world.

182
00:13:41,370 --> 00:13:48,540
And instead I would begin with a div sort of a wrapper div and give it a class of rap.

183
00:13:49,290 --> 00:13:51,330
We don't need to write any success for this.

184
00:13:51,330 --> 00:13:53,970
WordPress will already take care of that on its own.

185
00:13:54,270 --> 00:13:59,460
Now inside this wrapper div, let's just create maybe a heading level one again.

186
00:13:59,460 --> 00:14:06,810
WordPress will sort of already have styling for that H1 and let's say word count settings.

187
00:14:07,840 --> 00:14:09,710
OK, for now that's all we really need.

188
00:14:09,720 --> 00:14:11,250
Let's go ahead and give that a save.

189
00:14:11,250 --> 00:14:17,550
And if we refresh cool, you can see that gives us a bit of standardised spacing, a bit of standardised

190
00:14:17,550 --> 00:14:21,020
typography and this is starting to look like a real settings page.

191
00:14:21,420 --> 00:14:24,120
Now, let's circle back to what we're going to cover in the next video.

192
00:14:24,360 --> 00:14:30,750
Remember, the whole point of this page is to let the site owner customize their settings and preferences

193
00:14:31,170 --> 00:14:33,900
with regards to the word count statistics.

194
00:14:34,230 --> 00:14:35,880
So look at the finished product.

195
00:14:36,060 --> 00:14:39,360
We want to create a form that looks like this.

196
00:14:40,350 --> 00:14:45,960
This looks identical to a default WordPress setting screen with sort of the two columns and then the

197
00:14:45,960 --> 00:14:48,090
signature blue save changes button.

198
00:14:48,630 --> 00:14:54,210
So that's what we're going to begin doing in the next lesson, adding a form right here together.

199
00:14:54,810 --> 00:14:58,860
Let's keep the momentum rolling and I will see you in the next lesson.
