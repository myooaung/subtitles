WEBVTT
1
00:00:01.910 --> 00:00:03.000
Hello, everyone.

2
00:00:03.410 --> 00:00:08.720
In this lesson, we are going to continue working on our search overlay JavaScript.

3
00:00:09.110 --> 00:00:11.080
Let's dive right into the action.

4
00:00:11.600 --> 00:00:17.870
So the first thing that I want to work on or address is when someone opens up the search overlay, you'll

5
00:00:17.870 --> 00:00:24.170
notice that just barely behind this transparent layer, you can see the main Web page in the background

6
00:00:24.530 --> 00:00:30.200
and notice that I'm still allowed to scroll up and down and you can see the page in the background reflecting

7
00:00:30.200 --> 00:00:30.490
that.

8
00:00:30.710 --> 00:00:35.240
Now, I think that's potentially very awkward or confusing for visitors of the Web site.

9
00:00:35.510 --> 00:00:41.630
So what I want to do is as soon as you open up the search overlay, I want to remove the ability to

10
00:00:41.630 --> 00:00:43.370
scroll the main page.

11
00:00:43.760 --> 00:00:50.480
Now, I've already written a 6th class that we can add to the main body element to achieve just that.

12
00:00:50.900 --> 00:00:57.090
So let's go ahead and use JavaScript to add and remove that class to the body element at the right times.

13
00:00:57.470 --> 00:01:04.490
So over in our text editor and our theme folder, let's jump in to our JavaScript and then modules folder

14
00:01:05.210 --> 00:01:07.490
and let's open up search jass.

15
00:01:08.180 --> 00:01:13.610
And if we want to do something, as soon as the overlay is opened, we can just write a bit of code

16
00:01:13.610 --> 00:01:15.960
within our open overlay method.

17
00:01:16.190 --> 00:01:22.640
So right after this line of code where we add a class to the overlay div, let's just use query to target

18
00:01:22.640 --> 00:01:29.960
the main body element, write the element that all HTML content lives within and then let's give it

19
00:01:29.960 --> 00:01:30.640
a class.

20
00:01:30.650 --> 00:01:38.310
So add class and the class name is Body Dash, no scroll.

21
00:01:38.840 --> 00:01:45.200
So I've already written a CSC class with this name that will tell the element to use overflow hidden,

22
00:01:45.560 --> 00:01:47.790
which will remove the ability to scroll.

23
00:01:48.230 --> 00:01:49.570
So let's save that.

24
00:01:50.180 --> 00:01:56.330
And then over in the browser you'll notice as soon as I open up the search overlay, I'm scrolling my

25
00:01:56.330 --> 00:01:58.230
mouse wheel, but nothing happens.

26
00:01:58.510 --> 00:01:59.110
Perfect.

27
00:01:59.510 --> 00:02:05.630
However, once I closed the search overlay, now I'm still unable to scroll and that doesn't make much

28
00:02:05.630 --> 00:02:06.080
sense.

29
00:02:06.080 --> 00:02:06.440
Right.

30
00:02:06.620 --> 00:02:12.860
So as soon as someone closes the overlay, let's just go ahead and remove that class that we just added

31
00:02:13.010 --> 00:02:14.190
to the body element.

32
00:02:14.810 --> 00:02:22.370
So within our close overlay method, let's add a new line, target the body element and let's just remove

33
00:02:22.370 --> 00:02:28.130
a class instead of adding one with the same name body, no scroll.

34
00:02:29.930 --> 00:02:35.660
OK, so now when you first load the page, you can scroll, open up the search overlay, you can no

35
00:02:35.660 --> 00:02:39.500
longer scroll, but as soon as you close it, it's back to normal.

36
00:02:40.010 --> 00:02:41.890
OK, now let's change gears.

37
00:02:42.170 --> 00:02:47.770
The next thing I want to work on is keyboard shortcuts to open and close the overlay.

38
00:02:47.990 --> 00:02:54.470
So I think it would be cool if you could press the esky on your keyboard s for search and that would

39
00:02:54.470 --> 00:02:56.000
open up the overlay.

40
00:02:56.330 --> 00:03:01.890
And then it would be nice if you could press the escape key on your keyboard to close the overlay.

41
00:03:02.300 --> 00:03:05.730
So let's jump back into our JavaScript and make that happen.

42
00:03:06.230 --> 00:03:09.710
Let's begin by focusing on our events area.

43
00:03:10.070 --> 00:03:16.460
Right, because we want to respond to the event of a key being pressed now with our previous events,

44
00:03:16.460 --> 00:03:18.400
these on click events.

45
00:03:18.740 --> 00:03:24.440
We were only interested in the click event if a very particular element was getting clicked on.

46
00:03:24.680 --> 00:03:30.950
But in this case of a key being pressed on a keyboard, it's not like we want a particular element to

47
00:03:30.950 --> 00:03:31.760
be aware of it.

48
00:03:32.060 --> 00:03:37.810
We want the entire page or browser in general to be on the lookout for key presses.

49
00:03:38.270 --> 00:03:41.660
So here's what we can do on a new line within our events method.

50
00:03:42.320 --> 00:03:47.120
Let's use G query to select the main document object.

51
00:03:47.630 --> 00:03:51.760
And this is the Web browsers model of the entire current page.

52
00:03:52.010 --> 00:03:52.430
All right.

53
00:03:52.430 --> 00:03:56.620
And then that is what we can use the query on method with.

54
00:03:56.870 --> 00:04:01.760
So just like we did up on these two lines, the on method takes two arguments.

55
00:04:02.060 --> 00:04:05.510
The first is the event that you want to be on the lookout for.

56
00:04:05.570 --> 00:04:10.090
So in this case, instead of click, let's go with KIYA.

57
00:04:10.730 --> 00:04:15.610
And that's when a user releases or lifts up off a key that they just press down.

58
00:04:15.950 --> 00:04:18.830
We will learn about Key down a bit later on.

59
00:04:18.830 --> 00:04:21.080
But for now, let's go with key up.

60
00:04:21.500 --> 00:04:26.990
OK, and then the second argument is the function or method that we want to call in response.

61
00:04:27.260 --> 00:04:33.710
So just like on these two lines, we begin with this to look at the current object and then we can look

62
00:04:33.710 --> 00:04:36.200
inside it for the name of one of our methods.

63
00:04:36.560 --> 00:04:36.830
Right.

64
00:04:36.830 --> 00:04:39.410
The methods are the actions that live down here.

65
00:04:39.830 --> 00:04:45.770
So down here, let's say this dot, and then we get to make up a name for a method that we are going

66
00:04:45.770 --> 00:04:48.140
to create in about ten seconds from now.

67
00:04:48.500 --> 00:04:49.760
So the name doesn't matter.

68
00:04:49.760 --> 00:04:51.080
I'm just going to make something up.

69
00:04:51.080 --> 00:04:55.550
Why don't we call it key press despatcher.

70
00:04:56.300 --> 00:05:00.830
And then while we're at it, why don't we use binde this so that within this.

71
00:05:01.010 --> 00:05:07.940
I think the key word of this refers back to our main object, so right after this key press dispatcher,

72
00:05:07.940 --> 00:05:15.380
let's say Dot, find this, OK, now we said that this is the name of the method that we want to call

73
00:05:15.380 --> 00:05:16.490
when this happens.

74
00:05:16.790 --> 00:05:20.170
So we better actually go and create a method with this name.

75
00:05:21.020 --> 00:05:23.120
So down here in our methods area.

76
00:05:24.150 --> 00:05:34.230
Let's just create a brand new method named Key Press, despatcher parentheses, curly brackets, and

77
00:05:34.230 --> 00:05:39.810
before we worry about doing anything truly useful, why don't we add a bit of a test here just to make

78
00:05:39.810 --> 00:05:40.900
sure things are working?

79
00:05:40.920 --> 00:05:44.790
Why don't we say console, dot log?

80
00:05:45.120 --> 00:05:51.900
This is how we can output a text message into the browser console log and within the parentheses, let's

81
00:05:51.900 --> 00:05:55.140
say this is a test.

82
00:05:55.750 --> 00:05:57.890
OK, so let's go ahead and save this.

83
00:05:57.900 --> 00:06:03.150
And then over in the browser, I want you to open up the JavaScript console.

84
00:06:03.450 --> 00:06:07.440
If you're using Google Chrome, you can always just click view up in the top menu.

85
00:06:07.890 --> 00:06:11.860
And then under the developer menu, you can choose JavaScript console.

86
00:06:12.330 --> 00:06:17.340
Another way to open the console, and this works in almost every browser, not just Google Chrome.

87
00:06:17.700 --> 00:06:18.360
You can right.

88
00:06:18.360 --> 00:06:20.610
Click anywhere on the page and choose.

89
00:06:20.610 --> 00:06:21.510
Inspect.

90
00:06:22.640 --> 00:06:27.530
And then within the pop up developer tools window just used the console tap.

91
00:06:28.730 --> 00:06:34.340
OK, so here's my JavaScript console, and I'm going to resize my Web browser window so we can see the

92
00:06:34.340 --> 00:06:35.870
console in the background.

93
00:06:36.260 --> 00:06:43.310
And if I click back anywhere on to the main browser window and press a key on my keyboard, oh, looks

94
00:06:43.310 --> 00:06:44.220
like it's not working.

95
00:06:45.050 --> 00:06:45.590
Aha.

96
00:06:45.590 --> 00:06:46.590
I see the problem.

97
00:06:47.000 --> 00:06:54.740
So when we say on the key up event, the U in the word up should be lowercase instead of uppercase.

98
00:06:55.220 --> 00:06:56.000
Sorry about that.

99
00:06:56.030 --> 00:06:58.670
So keep up all lowercase case.

100
00:06:58.670 --> 00:07:00.050
Let's save that again.

101
00:07:01.500 --> 00:07:06.520
And now if I press a key on my keyboard, cool, we see our console dialogue.

102
00:07:06.540 --> 00:07:08.110
This is a test message.

103
00:07:08.640 --> 00:07:09.060
All right.

104
00:07:09.060 --> 00:07:15.180
So now that we are successfully responding to the event of a key being pressed now, we need to get

105
00:07:15.180 --> 00:07:18.900
more specific within our key press despatcher method.

106
00:07:19.410 --> 00:07:19.650
Right.

107
00:07:19.650 --> 00:07:23.090
Because we are not interested in just any key being pressed.

108
00:07:23.340 --> 00:07:27.180
We are only interested in the esky and the escape key.

109
00:07:27.490 --> 00:07:27.880
Right.

110
00:07:27.900 --> 00:07:33.760
As for search, should open the search overlay and then the escape key should close the overlay.

111
00:07:34.050 --> 00:07:39.840
So the question becomes, how do we differentiate between different key presses in JavaScript?

112
00:07:40.020 --> 00:07:43.130
Well, the answer is something called a key code.

113
00:07:43.350 --> 00:07:48.740
So in JavaScript, every key on your keyboard has a unique numerical key code.

114
00:07:49.050 --> 00:07:54.510
So the question is, what is the numerical key code for the key on our keyboard?

115
00:07:54.690 --> 00:07:59.340
Well, we could just go Google it, or I could tell you that it's the number 83.

116
00:07:59.340 --> 00:08:04.690
But I want to show you a practical way that you can find out any key code number for yourself.

117
00:08:05.040 --> 00:08:11.250
So in JavaScript, when we're looking out for the key or key down event, when JavaScript calls this

118
00:08:11.250 --> 00:08:17.580
function in response, it's going to pass along a bit of information about the key press event into

119
00:08:17.580 --> 00:08:18.420
this function.

120
00:08:18.750 --> 00:08:24.810
So down here within the signature for that function, within the parentheses, we can make up a parameter

121
00:08:24.810 --> 00:08:26.920
name so the name doesn't matter.

122
00:08:26.940 --> 00:08:31.320
We could say event or we could even just save the letter E, so it's easy to type.

123
00:08:31.590 --> 00:08:38.010
But now within the body of this method, we can look inside this parameter to find the information that

124
00:08:38.010 --> 00:08:41.250
got passed along about the specific key press event.

125
00:08:41.550 --> 00:08:47.340
So, for example, we can look inside that parameter and it has a properly named key code.

126
00:08:47.790 --> 00:08:52.050
And this is the numerical code for whichever key on your keyboard was pressed.

127
00:08:52.320 --> 00:08:54.870
So just as a test, let's delete this.

128
00:08:54.870 --> 00:09:02.160
But inside our console log test message, instead of outputting a string of text, why don't we output

129
00:09:02.700 --> 00:09:05.010
e dot key code?

130
00:09:06.420 --> 00:09:13.440
So now if I save this and go back to the browser, if I press the key, we can see eighty three.

131
00:09:14.310 --> 00:09:17.460
If I press the escape key we see twenty seven.

132
00:09:17.850 --> 00:09:24.030
And you could press any other key on your keyboard to find out the key code for whatever you're interested

133
00:09:24.030 --> 00:09:24.230
in.

134
00:09:24.600 --> 00:09:24.890
Right.

135
00:09:24.960 --> 00:09:30.660
So if you want to find the key code for the letter B, just press B you can see it's sixty six.

136
00:09:30.660 --> 00:09:34.350
If you're interested in the letter Z press it can see it's 90.

137
00:09:34.800 --> 00:09:37.050
OK, but back to our specific task.

138
00:09:37.320 --> 00:09:40.300
We are interested in the S and the escape key.

139
00:09:40.740 --> 00:09:43.750
So again, the letter S is eighty three.

140
00:09:44.010 --> 00:09:50.940
So back within our key despatcher method, let's do this underneath this test line, let's use an if

141
00:09:50.940 --> 00:09:51.600
statement.

142
00:09:52.200 --> 00:10:00.120
So let's say only if parentheses curly brackets and let's say only if the key that was just pressed

143
00:10:00.150 --> 00:10:03.500
has a key code of eighty three, which is the key.

144
00:10:03.750 --> 00:10:08.420
Only then do we want to fire the open overlay method in response.

145
00:10:08.670 --> 00:10:17.160
So for the if condition we can just say if e key code equals 83, remember that when you're checking

146
00:10:17.160 --> 00:10:22.680
for equality it's equal, equal sign two of them instead of just a single equal sign that we use when

147
00:10:22.680 --> 00:10:24.510
we are asserting equality.

148
00:10:24.780 --> 00:10:25.130
Right.

149
00:10:25.140 --> 00:10:27.370
Like when you assign a value to a variable.

150
00:10:27.690 --> 00:10:33.450
So if the key that was pressed is the key, then inside of the body for this if statement, let's just

151
00:10:33.450 --> 00:10:42.420
call and run our open overlay method so we can just say this dot open overlay and parentheses to actually

152
00:10:42.420 --> 00:10:43.440
call the function.

153
00:10:43.710 --> 00:10:49.590
OK, let's go ahead and save that and give it a test so I will press the key on my keyboard.

154
00:10:50.880 --> 00:10:52.660
Perfect, it opened up the overlay.

155
00:10:53.010 --> 00:10:56.760
Now let's do the same thing for the escape key and closing the overlay.

156
00:10:57.150 --> 00:11:02.290
So right now, if you press the escape key, you can see that it has a numerical code of 27.

157
00:11:02.910 --> 00:11:08.760
So back in our function right below this if statement, let's just create another if statement and say

158
00:11:09.000 --> 00:11:21.270
if parentheses curly brackets for the condition will say if e docky code equals 27, then fire the closed

159
00:11:21.270 --> 00:11:21.700
method.

160
00:11:21.720 --> 00:11:25.350
So this dot close overlay.

161
00:11:27.300 --> 00:11:35.280
Let's give that a save aski to open it, escape key to close it, perfect, except you might notice

162
00:11:35.280 --> 00:11:41.700
that if you press down the esky and hold it down without letting go of it, you'll notice that our overlay

163
00:11:41.700 --> 00:11:45.300
doesn't open until you actually let go of the key.

164
00:11:45.840 --> 00:11:51.030
Now, that's not a big deal, but it can create a little bit of a lagi feeling because the event doesn't

165
00:11:51.030 --> 00:11:57.150
fire as soon as you press the key, but instead a few milliseconds later when you let go of the key.

166
00:11:57.600 --> 00:12:04.350
Now, the reason we are seeing this behavior is because we chose to use the Web browsers key up event.

167
00:12:04.770 --> 00:12:12.990
The key up event is the moment when a key is released or let go of, whereas the key down event happens

168
00:12:12.990 --> 00:12:16.000
the millisecond that you first press down on a key.

169
00:12:16.320 --> 00:12:20.040
However, there's another key difference between key up and key down.

170
00:12:20.490 --> 00:12:29.340
Key up will only fire once, but key down will fire again and again and again as long as you hold down

171
00:12:29.340 --> 00:12:29.790
the key.

172
00:12:30.150 --> 00:12:31.590
Now every browser is different.

173
00:12:31.770 --> 00:12:37.290
Some might fire the event every five milliseconds or every five hundred milliseconds.

174
00:12:37.290 --> 00:12:39.470
But let me show you what I'm talking about.

175
00:12:39.480 --> 00:12:44.430
So if we set this to key down, save it and give it another try.

176
00:12:44.970 --> 00:12:50.670
If I hold down on the key without letting go of it, you'll notice that the overlay opens immediately.

177
00:12:50.670 --> 00:12:57.210
But as I'm holding down the key noticed that that event just keeps firing again and again and again.

178
00:12:57.210 --> 00:12:58.650
You can see the count going up.

179
00:12:58.980 --> 00:13:04.080
And if I press down the escape key and keep holding it down, you can see the same thing, right?

180
00:13:04.100 --> 00:13:10.200
So it looks like a key down is firing multiple times per second if you just keep holding down on the

181
00:13:10.200 --> 00:13:10.570
key.

182
00:13:10.830 --> 00:13:16.350
Now, in this particular example, nothing bad is happening by running that event again and again and

183
00:13:16.350 --> 00:13:16.770
again.

184
00:13:17.010 --> 00:13:19.260
It's not a very costly event to run.

185
00:13:19.260 --> 00:13:22.150
So it's not like it's going to freeze someone's Web browser.

186
00:13:22.560 --> 00:13:27.750
However, I don't want us to get in the bad habit of writing code that could potentially lock up the

187
00:13:27.750 --> 00:13:28.320
browser.

188
00:13:28.620 --> 00:13:28.830
Right.

189
00:13:28.860 --> 00:13:33.150
There's no need to run the same method again and again and again like this.

190
00:13:33.600 --> 00:13:39.570
So why don't we write a bit of code so that you can only close the overlay if it's currently open and

191
00:13:39.570 --> 00:13:42.900
you can only open the overlay if it's currently closed.

192
00:13:43.500 --> 00:13:49.530
So that way, even if someone holds down a key and fires the key down event again and again and again,

193
00:13:49.650 --> 00:13:54.840
we won't actually be calling our opening closed methods needlessly.

194
00:13:55.200 --> 00:13:58.020
The appropriate method will be called once as needed.

195
00:13:58.230 --> 00:14:02.330
In this way, we never risk overloading or freezing a Web browser.

196
00:14:02.550 --> 00:14:05.220
Now, in order to test this out, why don't we do this?

197
00:14:05.520 --> 00:14:10.980
Why don't we go ahead and delete this console log message where we output the key code of what's being

198
00:14:10.980 --> 00:14:11.430
pressed?

199
00:14:11.430 --> 00:14:15.720
We no longer need that now that we know the codes for the S and escape key.

200
00:14:16.290 --> 00:14:17.700
So let's delete that line.

201
00:14:20.070 --> 00:14:26.460
And then just as a test within our opened and closed methods, why don't we output a message so that

202
00:14:26.460 --> 00:14:29.050
we can see each time the method is being ran?

203
00:14:29.460 --> 00:14:38.160
So within our open overlay method, let's console the log and say our open method just ran and then

204
00:14:38.160 --> 00:14:40.710
we can do the same thing in our close overlay.

205
00:14:41.280 --> 00:14:48.660
So at the end of this method, just run console, dot log and let's say our closed method just ran.

206
00:14:49.500 --> 00:14:56.880
So now if we save that and I hold down the key without letting go of it, we can see that that method

207
00:14:56.880 --> 00:14:59.130
just keeps getting fired again and again and again.

208
00:14:59.410 --> 00:15:02.280
So now we can clearly see what we are trying to avoid.

209
00:15:02.790 --> 00:15:10.020
So all we need to do now is up within our key press despatcher method when we say only if the key code

210
00:15:10.020 --> 00:15:14.570
that's being pressed is eighty-three, only then should you fire this method.

211
00:15:14.940 --> 00:15:21.210
We just want to add on another condition within these parentheses to say only if the key is eighty-three

212
00:15:21.450 --> 00:15:25.050
and if the overlay is not already open.

213
00:15:25.260 --> 00:15:27.140
So we could technically use Jake.

214
00:15:27.150 --> 00:15:33.780
We're here to check to see if the main overlay div has a class of search overlay active.

215
00:15:34.050 --> 00:15:40.890
But reading from the DOM is very, very slow in comparison to just reading from a JavaScript variable

216
00:15:40.890 --> 00:15:41.630
or property.

217
00:15:41.940 --> 00:15:47.940
So in order to keep your code as fast as possible, you should always avoid dealing with the DOM, if

218
00:15:47.940 --> 00:15:48.950
at all possible.

219
00:15:49.260 --> 00:15:56.160
So instead of using query here to check if a div has a certain class, why don't we go up into our constructor

220
00:15:56.160 --> 00:16:03.300
function and let's create a new property that stores a little bit of information about the state of

221
00:16:03.330 --> 00:16:04.100
the overlay.

222
00:16:04.740 --> 00:16:12.260
So this dot, let's create a new property and let's name it is overlay open.

223
00:16:12.780 --> 00:16:13.980
I just made up this name.

224
00:16:13.980 --> 00:16:20.520
You could choose whatever you want, but let's set its default or starting value to false, right?

225
00:16:20.520 --> 00:16:26.490
Because when you first come to the page, the overlay is not open and now we can just change the value

226
00:16:26.490 --> 00:16:33.630
of this property any time are open or closed methods run so down within our open overlay method at the

227
00:16:33.630 --> 00:16:36.660
end of this method, let's just adjust that property.

228
00:16:36.660 --> 00:16:42.000
So this dot is overlay open.

229
00:16:42.300 --> 00:16:43.620
Let's set it to true.

230
00:16:44.010 --> 00:16:47.310
Right, because after this method runs, the overlay will be open.

231
00:16:47.790 --> 00:16:48.660
Said it's true.

232
00:16:48.660 --> 00:16:52.650
And then in our closed function or closed method, let's set it to false.

233
00:16:53.100 --> 00:16:58.650
This dot is overlay open equals false.

234
00:16:59.280 --> 00:16:59.670
Cool.

235
00:16:59.670 --> 00:17:06.120
So now within our key press, despatcher within our if statements, instead of looking at the DOM to

236
00:17:06.120 --> 00:17:11.670
see if that div has a class, we can just check our property, which is lightning fast.

237
00:17:12.030 --> 00:17:15.630
So we only want to open the overlay if it's currently closed.

238
00:17:15.630 --> 00:17:23.730
So we can just say if the key code that was pressed is eighty-three and just to ampersands symbols and

239
00:17:23.730 --> 00:17:28.850
if this dot is overlay open, if that is false.

240
00:17:29.220 --> 00:17:31.920
So you could say equals false.

241
00:17:31.920 --> 00:17:38.400
But another way of doing it is you can just place an exclamation point or exclamation mark right before

242
00:17:38.400 --> 00:17:38.520
it.

243
00:17:38.850 --> 00:17:43.080
So altogether, together, only if the key that was just pressed is eighty-three.

244
00:17:43.110 --> 00:17:49.110
And if the overlay is not currently open, then run open overlay and let's do the same thing for the

245
00:17:49.110 --> 00:17:49.830
escape key.

246
00:17:49.830 --> 00:17:57.180
So only if the escape key was pressed and if the overlay is currently open do we want to be able to

247
00:17:57.180 --> 00:18:00.840
close it so we can say this dot is overlayed open.

248
00:18:01.260 --> 00:18:01.560
Right.

249
00:18:01.560 --> 00:18:04.780
And if that property is set to true, this will evaluate to true.

250
00:18:05.640 --> 00:18:13.260
So now if we save this and go back to the browser, if I press the key and keep holding it down, you'll

251
00:18:13.260 --> 00:18:16.620
notice that that method does not get ran again and again.

252
00:18:16.620 --> 00:18:17.940
It just runs once.

253
00:18:18.360 --> 00:18:18.660
Cool.

254
00:18:18.660 --> 00:18:22.710
And if I press and hold the escape key, it also only runs once.

255
00:18:23.070 --> 00:18:26.520
And that's actually going to bring this lesson to a close.

256
00:18:26.880 --> 00:18:31.650
In our next lesson, we will learn how to manage time in JavaScript.

257
00:18:32.070 --> 00:18:38.580
So, for example, when someone starts searching for Buyology, we don't want to send a search request

258
00:18:38.580 --> 00:18:44.340
when all they've typed in is the letter B, so we don't want to send a search request as soon as someone

259
00:18:44.340 --> 00:18:46.800
starts or stops typing instead.

260
00:18:46.800 --> 00:18:53.830
Why don't we wait until they've paused or stopped typing for maybe 800 milliseconds or a full second?

261
00:18:54.210 --> 00:18:59.040
So, for example, when they type in B, that would start a timer, but then if they type in another

262
00:18:59.040 --> 00:19:04.920
letter, it would reset the timer and would just continue on like that until they indeed finish typing

263
00:19:04.920 --> 00:19:05.720
and pause.

264
00:19:06.270 --> 00:19:11.340
This way, we avoid flooding the WordPress server with requests that don't even make sense.

265
00:19:11.580 --> 00:19:11.820
Right.

266
00:19:11.820 --> 00:19:17.280
We don't actually want to search the WordPress database for B or below.

267
00:19:17.700 --> 00:19:18.570
You get the idea.

268
00:19:18.980 --> 00:19:24.440
So we will learn how to manage time, how to work with timers, and then in the lesson after that,

269
00:19:24.560 --> 00:19:31.880
we will learn how to talk to the WordPress database and retrieve real content in real time on the fly.

270
00:19:32.390 --> 00:19:33.840
This is going to be a ton of fun.

271
00:19:34.040 --> 00:19:38.180
Let's keep things rolling and I will see you in the next lesson.
