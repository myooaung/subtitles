1
00:00:01,850 --> 00:00:02,900
Hello, everyone.

2
00:00:03,230 --> 00:00:10,670
In this lesson, we will finally learn how to load WordPress content with JavaScript into our page in

3
00:00:10,670 --> 00:00:11,590
real time.

4
00:00:11,990 --> 00:00:17,780
So, for example, if a visitor opens up the search overlay and searches for Buyology.

5
00:00:19,400 --> 00:00:27,260
Down here in this results area, we want to load in any posts or pages or programs or professors that

6
00:00:27,260 --> 00:00:28,670
have to do with biology.

7
00:00:29,180 --> 00:00:35,330
Now, believe it or not, the first step in learning how to do this has nothing to do with JavaScript

8
00:00:35,330 --> 00:00:36,220
in particular.

9
00:00:36,560 --> 00:00:37,830
Let me show you what I mean.

10
00:00:37,850 --> 00:00:44,630
So right now for our first step, here's what I want you to do up in the address bar at the very end

11
00:00:44,630 --> 00:00:51,170
of the root of our WordPress, you Ã³rale add on a slash WP dash.

12
00:00:51,170 --> 00:00:53,830
Jason, Jason.

13
00:00:54,490 --> 00:01:00,110
So just like you would normally say, WP dash admin to go to the dashboard, instead of that we're saying

14
00:01:00,110 --> 00:01:12,190
WP Dash, JSON slash, WP slash, V2 slash posts and then let's press enter.

15
00:01:13,610 --> 00:01:14,160
Whoa.

16
00:01:14,180 --> 00:01:18,060
So the question is, what in the world are we looking at right here?

17
00:01:18,470 --> 00:01:24,920
Now this might look like pure and utter chaos, but believe me when I say that by learning and understanding

18
00:01:24,920 --> 00:01:31,220
what we are seeing here, we are going to be able to jump up to the next level in our WordPress developer

19
00:01:31,220 --> 00:01:32,030
careers.

20
00:01:32,420 --> 00:01:40,400
So what we are looking at right now is completely raw data for the 10 most recent blog posts on our

21
00:01:40,400 --> 00:01:40,980
website.

22
00:01:41,480 --> 00:01:48,950
And if we go up to the address bar and at the very end of the euro, if we change this from posts to

23
00:01:49,160 --> 00:01:57,380
pages and then press enter, well, we are now looking at completely raw data for the 10 most recent

24
00:01:57,380 --> 00:01:58,240
pages.

25
00:01:58,760 --> 00:02:00,200
But what does that really mean?

26
00:02:00,560 --> 00:02:06,590
Well, this text that describes the ten most recent pages is structured in a very particular way.

27
00:02:06,740 --> 00:02:09,680
It's structured using the JSON format.

28
00:02:09,680 --> 00:02:12,500
Hence why this Eurail begins with WP.

29
00:02:12,650 --> 00:02:22,340
Jason Jason is an acronym that stands for JavaScript Object Notation, which is just a super popular

30
00:02:22,340 --> 00:02:24,320
format for structuring data.

31
00:02:24,680 --> 00:02:30,680
Now, this code is not JavaScript in the sense that it's not going to actually do anything or execute

32
00:02:30,680 --> 00:02:31,840
any actions.

33
00:02:32,180 --> 00:02:37,160
It's only JavaScript in the sense that it's describing an array of objects.

34
00:02:37,640 --> 00:02:41,240
Now, if we look at all of this at once, it looks like pure chaos.

35
00:02:41,240 --> 00:02:45,450
But if we break it down bit by bit, it's actually super simple.

36
00:02:45,650 --> 00:02:49,130
Notice that the first character is an opening square bracket.

37
00:02:49,490 --> 00:02:51,860
A square bracket is how you create an array.

38
00:02:52,040 --> 00:02:57,830
And remember that an array is just a collection of multiple values separated by commas.

39
00:02:58,130 --> 00:03:03,860
So in this case, it's an array of objects where each object is a WordPress page.

40
00:03:04,280 --> 00:03:10,160
So the square brackets starts the array and then this curly bracket is how you begin an object in JavaScript.

41
00:03:10,460 --> 00:03:16,550
So, for example, maybe this first chunk of code is the about US page and then this next chunk of code

42
00:03:16,550 --> 00:03:18,470
is the privacy policy page.

43
00:03:18,800 --> 00:03:23,990
In order for this to make more sense, I'm actually going to jump in to my text editor and you do not

44
00:03:23,990 --> 00:03:26,450
need to type out what I'm about to type out.

45
00:03:26,780 --> 00:03:29,060
This is just a quick demo or explanation.

46
00:03:29,310 --> 00:03:33,230
So we look at this huge chunk of code and it looks super intimidating.

47
00:03:33,410 --> 00:03:37,070
But really all that WordPress is doing is it's giving us an array.

48
00:03:37,490 --> 00:03:43,900
So square brackets and an array can contain multiple values separated by commas.

49
00:03:43,910 --> 00:03:44,220
Right.

50
00:03:44,270 --> 00:03:45,200
Something like this.

51
00:03:45,530 --> 00:03:50,770
Except instead of simple values for each item, it's an array of objects.

52
00:03:51,020 --> 00:03:55,220
Now, in JavaScript, an object is just a pair of curly brackets like this.

53
00:03:56,030 --> 00:04:00,740
So really it's just an array separated by commas of objects.

54
00:04:01,250 --> 00:04:05,810
Now let me space this out onto different lines so it can really start to make sense.

55
00:04:09,300 --> 00:04:15,150
So let me place each object on its own line, and if each one of these objects is a WordPress post or

56
00:04:15,150 --> 00:04:21,350
page, we could imagine that maybe in this first object it would have a properly named I.D..

57
00:04:21,390 --> 00:04:27,810
Right, because every post in WordPress has a numerical I.D. and then in JavaScript within an object,

58
00:04:27,810 --> 00:04:33,420
you can just add a comma to add another property and every poster page and WordPress probably has a

59
00:04:33,420 --> 00:04:34,030
title.

60
00:04:34,380 --> 00:04:39,000
So maybe this is the about us page and every post has a date.

61
00:04:39,550 --> 00:04:39,780
Right.

62
00:04:39,840 --> 00:04:41,980
So then this would have a date of some sort.

63
00:04:42,420 --> 00:04:42,720
Right.

64
00:04:42,730 --> 00:04:49,740
So this first object is the about us page and then maybe the second object has an I.D. of four and the

65
00:04:49,740 --> 00:04:54,990
title of privacy policy and it has a different date.

66
00:04:56,940 --> 00:04:57,210
Right.

67
00:04:57,220 --> 00:04:59,670
You get the idea, the big picture.

68
00:04:59,670 --> 00:05:06,060
The big point is that this is nothing more than an array of objects and each object is a post or page.

69
00:05:06,420 --> 00:05:12,600
Now, if you're anything like me or just if you're a human being instead of a robot, this way of spacing

70
00:05:12,600 --> 00:05:19,080
out the data is a lot easier to read than this, where everything is just completely smooshed together.

71
00:05:19,440 --> 00:05:24,600
And if we're going to try to work with this WordPress data, it would be nice if we could view it in

72
00:05:24,600 --> 00:05:26,850
a way that actually made a little bit of sense.

73
00:05:27,180 --> 00:05:32,330
Well, luckily, there's this super popular and free tool named Postman.

74
00:05:32,550 --> 00:05:36,030
It doesn't cost a penny, so I encourage you to go download it right now.

75
00:05:36,030 --> 00:05:37,620
Go ahead and pause this lesson.

76
00:05:37,830 --> 00:05:42,600
As of this moment, the official Eurail is get postman dot com.

77
00:05:42,870 --> 00:05:45,000
That domain could change in the future.

78
00:05:45,000 --> 00:05:50,800
But if you just Google for Postman program, this should show up as the number one result.

79
00:05:51,120 --> 00:05:54,450
Again, it doesn't cost even a penny, so go ahead and download it.

80
00:05:54,660 --> 00:05:58,740
Although I guess before you paused this lesson and download it, you might want to first see what it

81
00:05:58,740 --> 00:06:00,040
is and what it does.

82
00:06:00,390 --> 00:06:07,550
So if I go back to my WordPress JSON tab up in the address bar, let me actually go back to the Post's

83
00:06:07,590 --> 00:06:11,070
URL instead of the pages you are now, OK?

84
00:06:11,100 --> 00:06:16,320
So all of this data is smooshed together and it's super hard to look at and understand at all.

85
00:06:16,710 --> 00:06:22,380
But what I can do up in the address bar is select this URL and copy it into my clipboard.

86
00:06:23,040 --> 00:06:26,750
And then I already have the Postman app installed on my computer.

87
00:06:27,120 --> 00:06:30,210
So if I jump into Postman, here's that app.

88
00:06:30,360 --> 00:06:35,070
In this main text field here, I can just paste in my clipboard.

89
00:06:36,080 --> 00:06:41,120
Make sure that it's set to a get request, which it should be by default, and then you can either just

90
00:06:41,120 --> 00:06:44,420
press enter on your keyboard or hit the big blue send button.

91
00:06:46,780 --> 00:06:52,570
Cool, so now instead of the Jason being all smooshed together and impossible to read, the Postman

92
00:06:52,570 --> 00:06:58,390
app separates it out one property per line and the human eye can actually start to see what's going

93
00:06:58,390 --> 00:06:58,670
on.

94
00:06:58,690 --> 00:07:02,320
So the first post has an idea of sixty five.

95
00:07:02,570 --> 00:07:05,680
It's got a slug of we won an award.

96
00:07:05,860 --> 00:07:07,330
Here's the link or permalink.

97
00:07:07,330 --> 00:07:08,500
Here's the title.

98
00:07:08,500 --> 00:07:09,820
Here's the content.

99
00:07:10,090 --> 00:07:11,080
You get the idea.

100
00:07:11,350 --> 00:07:14,850
Now I want to say that you do not need to use Postman.

101
00:07:15,040 --> 00:07:19,710
It's just a nice optional tool to help you visualize the data that we're working with.

102
00:07:20,020 --> 00:07:26,470
OK, now at this point, the question becomes, how does this JSON data and these URLs that WordPress

103
00:07:26,470 --> 00:07:31,090
provides to us, how does this help us with our live search results?

104
00:07:31,390 --> 00:07:31,690
Right.

105
00:07:31,700 --> 00:07:38,200
If someone opens the overlay and searches for biology, how can we leverage these WordPress, Jason,

106
00:07:38,200 --> 00:07:40,180
you URLs to give us what we want?

107
00:07:40,600 --> 00:07:41,800
Well, check this out.

108
00:07:42,070 --> 00:07:48,790
At the end of this URL, we can add on extra info to tell WordPress what we are looking for.

109
00:07:49,030 --> 00:07:52,900
So by default, this is going to give us the ten most recent posts.

110
00:07:53,260 --> 00:08:00,670
But if I only want the two most recent posts at the very end of the euro, I can add on a question mark

111
00:08:00,670 --> 00:08:05,500
and say per underscore page equals two.

112
00:08:07,150 --> 00:08:10,900
And now there's only JSON for two posts where I could set it to one.

113
00:08:11,650 --> 00:08:18,970
Or if I was looking for a specific post and I knew the numerical ID number of the post, I could go

114
00:08:18,970 --> 00:08:27,280
to this URL, so WP, JSON, WP, V, two posts and then add a slash and then just include the IDE.

115
00:08:27,520 --> 00:08:31,990
So maybe seven for example, and that will give me that one specific post.

116
00:08:32,440 --> 00:08:38,380
OK, so the idea is that there's things we can add to the end of this URL to customize what WordPress

117
00:08:38,380 --> 00:08:39,620
sends back to us.

118
00:08:39,880 --> 00:08:41,530
Now back to the task at hand.

119
00:08:41,680 --> 00:08:43,670
We want to power a search.

120
00:08:43,960 --> 00:08:46,130
So what we are really interested in is this.

121
00:08:46,150 --> 00:08:46,920
Check this out.

122
00:08:47,260 --> 00:08:50,070
Let's get rid of the number and the slash, OK?

123
00:08:50,170 --> 00:08:59,170
And right after posts, let's just add questionmark search equals and then any word or phrase that you

124
00:08:59,170 --> 00:09:00,070
want to search for.

125
00:09:00,260 --> 00:09:03,490
So I know that I have a blog post named We want an award.

126
00:09:03,490 --> 00:09:08,200
So if I search for a ward, it returns the blog post.

127
00:09:08,200 --> 00:09:11,920
And here we can see the title is We Won an award.

128
00:09:12,670 --> 00:09:18,730
Right now might actually be a good time to go create a few new test sample posts just so we have something

129
00:09:18,730 --> 00:09:19,580
to search for.

130
00:09:20,080 --> 00:09:23,590
So in my admin dashboard, I'm going to create a new blog post.

131
00:09:26,360 --> 00:09:35,460
Maybe I will title this one, biology is cool paste in some dummy text, go ahead and save that, OK?

132
00:09:35,480 --> 00:09:42,860
And then back in our JSON tab, if we just change the URL to search equals and then instead of a board

133
00:09:43,550 --> 00:09:51,320
search for biology and this is the JSON for that post that we just created here we can see the title

134
00:09:51,320 --> 00:09:53,220
is Biology is Cool.

135
00:09:53,630 --> 00:09:58,700
Now at this point, the gears in our head are really starting to spin because this search parameter

136
00:09:58,700 --> 00:10:03,370
will work perfectly with the live search results that we want to build.

137
00:10:03,620 --> 00:10:09,560
However, you might be thinking to yourself, what good does it do us to visit this RL in a browser

138
00:10:09,560 --> 00:10:10,310
like this?

139
00:10:10,580 --> 00:10:10,880
Right.

140
00:10:10,880 --> 00:10:15,800
The visitors of our website won't know to do this, and even if they did, they wouldn't know what to

141
00:10:15,800 --> 00:10:16,700
do with this data.

142
00:10:17,210 --> 00:10:18,560
Well, that's a fair point.

143
00:10:18,560 --> 00:10:25,130
But what if I told you that we can use JavaScript to programmatically send a request to this U.

144
00:10:25,140 --> 00:10:32,250
RL in the background in real time, and then we can use this data however we see fit in our code.

145
00:10:32,450 --> 00:10:36,450
So right now, let me show you how that works and how we can get started.

146
00:10:36,770 --> 00:10:42,620
So let's begin by jumping into our text editor and within our JavaScript modules folder.

147
00:10:42,620 --> 00:10:48,700
Let's jump in to search J.S. and let's scroll down to our Get Results method.

148
00:10:49,310 --> 00:10:55,580
Remember, this is the method that will run after the 2000 millisecond gap in between keystrokes.

149
00:10:55,910 --> 00:11:02,300
As of this moment, all this method is doing is updating the results div to say imagine real search

150
00:11:02,300 --> 00:11:03,200
results here.

151
00:11:03,680 --> 00:11:06,800
Now, this is not what we actually want to do, right?

152
00:11:06,810 --> 00:11:08,240
This was just a placeholder.

153
00:11:08,540 --> 00:11:14,420
So why don't we go ahead and delete that line of code and within the git results meant that let's also

154
00:11:14,420 --> 00:11:17,990
delete this line that updates that is Spiner visible property.

155
00:11:18,460 --> 00:11:24,740
OK, so at this point our get results method is completely empty and at this point the question becomes

156
00:11:25,130 --> 00:11:29,890
how can we use JavaScript to send out a request to a user?

157
00:11:29,990 --> 00:11:30,800
All right.

158
00:11:30,800 --> 00:11:34,110
We want to visit this JSON based WordPress you URL.

159
00:11:34,550 --> 00:11:36,430
Well, check this out, Jake.

160
00:11:36,430 --> 00:11:38,620
Query makes this very, very easy.

161
00:11:38,900 --> 00:11:45,350
So in our method, let's just say dollar sign to begin using query and then period to look inside the

162
00:11:45,590 --> 00:11:50,990
query, object and query has a method named get JSON.

163
00:11:51,470 --> 00:11:55,190
Now within the parentheses, this method takes two arguments.

164
00:11:55,520 --> 00:11:59,300
The first argument is the you are that you want to send a request to.

165
00:11:59,480 --> 00:12:04,130
And the second argument is a function where you can say what you want to do.

166
00:12:04,130 --> 00:12:06,200
After that, you are our response.

167
00:12:06,560 --> 00:12:12,410
In our example, this JSON based Uttara responds by sending back all of this data.

168
00:12:12,830 --> 00:12:14,540
So let me show you what we can do.

169
00:12:14,690 --> 00:12:16,760
Let's just fill in these two arguments.

170
00:12:17,030 --> 00:12:19,130
So the euro is simple enough.

171
00:12:19,130 --> 00:12:24,920
Let's just go back to our browser and let's just copy this full you URL that returns this JSON.

172
00:12:25,130 --> 00:12:27,830
Let's copy the euro into our clipboard.

173
00:12:28,670 --> 00:12:35,090
And then for this first euro argument, let's get rid of that placeholder and add in quotations and

174
00:12:35,090 --> 00:12:38,180
then just paste in our clipboard for the moment.

175
00:12:38,180 --> 00:12:42,260
We can go ahead and leave this hardcoded to search equals Buyology.

176
00:12:42,470 --> 00:12:46,820
We will learn how to actually search for what the user types in a bit later on.

177
00:12:47,150 --> 00:12:51,080
For now, let's focus on the function that we want to run after this.

178
00:12:51,260 --> 00:12:57,590
RL responds with the JSON data, so instead of this placeholder X, you could type in the name of a

179
00:12:57,590 --> 00:12:59,630
method or function that you want to run.

180
00:13:00,080 --> 00:13:04,400
Or we could just create an anonymous function in line right here.

181
00:13:04,820 --> 00:13:06,590
And that's actually what I'm going to do.

182
00:13:06,950 --> 00:13:15,380
So let's get rid of the X and say function parentheses, curly brackets and then just to stay organized

183
00:13:15,380 --> 00:13:16,990
in between the curly brackets.

184
00:13:17,000 --> 00:13:18,920
Why don't we drop down to a new line?

185
00:13:20,000 --> 00:13:27,080
And now within the body of this function here, we want to be able to access all of the JSON data that

186
00:13:27,080 --> 00:13:27,530
this U.

187
00:13:27,530 --> 00:13:29,060
RL responds with.

188
00:13:29,330 --> 00:13:36,290
Now, luckily, when this JSON method fires, the callback function is going to pass whatever data this

189
00:13:36,300 --> 00:13:39,290
URL responds with into the function.

190
00:13:39,650 --> 00:13:44,990
So within the parentheses for this function, we just want to be sure to include a parameter so that

191
00:13:44,990 --> 00:13:48,820
we're basically giving that data a name so we can reference it later on.

192
00:13:49,130 --> 00:13:51,050
Now, the name here does not matter.

193
00:13:51,260 --> 00:13:59,660
We can make up whatever parameter name we want, so we could call it data or results or I'm actually

194
00:13:59,660 --> 00:14:01,400
going to call it posts.

195
00:14:01,910 --> 00:14:02,420
All right.

196
00:14:02,420 --> 00:14:09,920
And now within the body of this function, we can use that name posts to access all of this JSON data.

197
00:14:10,280 --> 00:14:13,070
So just as a test, let's give ourselves a goal.

198
00:14:13,340 --> 00:14:17,720
Let's try to create an annoying alert pop up message just as a test.

199
00:14:18,200 --> 00:14:24,650
But let's try to display the title of the WordPress post that this Jasen code is describing.

200
00:14:25,010 --> 00:14:25,820
So remember the.

201
00:14:25,890 --> 00:14:31,260
This is really just an array now in this case, there's only one object in the array.

202
00:14:31,600 --> 00:14:38,090
There's only that one blog post named Buyology is cool, but it's still an array nonetheless.

203
00:14:38,340 --> 00:14:42,120
So we can work with this just like any other array in JavaScript.

204
00:14:42,330 --> 00:14:48,410
So we gave it a name of posts and then to look inside an array, remember, it's square brackets.

205
00:14:48,720 --> 00:14:51,450
In this case, there's only one item in the array.

206
00:14:51,690 --> 00:14:53,940
So we want to access the first item.

207
00:14:54,300 --> 00:14:55,940
Arrays are zero based.

208
00:14:55,950 --> 00:14:59,730
So if we want to access the first item instead of a one, we use a zero.

209
00:15:00,070 --> 00:15:03,670
OK, and then let's look inside that object for the title.

210
00:15:04,020 --> 00:15:09,690
Now, in situations like this where I need to find out the name of a property, instead of looking at

211
00:15:09,690 --> 00:15:15,510
this squished together, pure chaos, this is where I feel like the Postman app is really valuable.

212
00:15:15,720 --> 00:15:21,660
So I'm just going to copy this Eurail into my clipboard and then in the Postman app that we paste in

213
00:15:21,660 --> 00:15:23,730
that you URL and send out a request.

214
00:15:23,970 --> 00:15:28,200
So this way I can see the JSON spaced out in a way that makes sense.

215
00:15:28,590 --> 00:15:35,400
So I can see that this object has a property named title and that is really just an object itself that

216
00:15:35,400 --> 00:15:37,720
contains a property named rendered.

217
00:15:38,220 --> 00:15:44,280
So back in our code, we want to look inside that object for a property named title and then we want

218
00:15:44,280 --> 00:15:47,430
to look inside that for a property named rendered.

219
00:15:48,000 --> 00:15:51,540
OK, at this point, let's go ahead and save this and test it out.

220
00:15:52,440 --> 00:15:58,770
So back in our actual website tab, if I open up the search overlay and search for anything.

221
00:16:00,910 --> 00:16:07,810
Perfect, we see this annoying alert pop up message biology is cool, which is the name of that WordPress

222
00:16:07,810 --> 00:16:08,410
post.

223
00:16:09,130 --> 00:16:14,250
OK, now let's take things one step further and actually make the search dynamic.

224
00:16:14,530 --> 00:16:21,280
What I mean by that is instead of hard coding this search parameter to always be biology, let's actually

225
00:16:21,280 --> 00:16:24,620
search for whatever the user types in here in the text field.

226
00:16:24,790 --> 00:16:31,540
So back in our code at the end of that, you URL that we are sending a request to let's delete the hardcoded

227
00:16:31,540 --> 00:16:38,740
biology so it ends in search equals and then the quote ends and then right after the quote, we can

228
00:16:38,740 --> 00:16:43,450
just add on whatever the visitor has typed in into the search field.

229
00:16:43,600 --> 00:16:50,890
So we know that we have a property named this dot search field and we can access whatever the visitor

230
00:16:50,890 --> 00:16:53,680
has typed into it by running the vowel method.

231
00:16:54,130 --> 00:16:58,510
So that way are you URL is search equals whatever the user types in.

232
00:16:58,840 --> 00:16:59,170
Cool.

233
00:16:59,170 --> 00:17:01,500
So let's save this and give it a test.

234
00:17:01,840 --> 00:17:04,540
So if I search for a word.

235
00:17:06,700 --> 00:17:13,660
Perfect, we see a blog post with a title of we won an award, but if I actually do search for biology,

236
00:17:15,310 --> 00:17:18,400
then the search results are different and we see biology as cool.

237
00:17:18,820 --> 00:17:24,760
Now, take a moment to give yourself a pat on the back because you just created your first real time

238
00:17:24,760 --> 00:17:26,410
JavaScript application.

239
00:17:26,710 --> 00:17:31,090
Now, obviously, we don't actually want to create these annoying pop ups.

240
00:17:31,510 --> 00:17:31,800
Right.

241
00:17:31,810 --> 00:17:36,000
Instead, we want to display results down here in the results div area.

242
00:17:36,220 --> 00:17:38,800
And that's exactly what we're going to learn how to do.

243
00:17:38,800 --> 00:17:45,730
In the next lesson, we will learn how to generate beautifully formatted HTML based on incoming JSON

244
00:17:45,730 --> 00:17:46,160
data.

245
00:17:46,360 --> 00:17:47,440
It's going to be a lot of fun.

246
00:17:47,470 --> 00:17:49,960
Let's keep things rolling and I will see you then.
