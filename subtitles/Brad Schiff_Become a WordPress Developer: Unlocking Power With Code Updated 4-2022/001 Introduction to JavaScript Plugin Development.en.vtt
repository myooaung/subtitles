WEBVTT
1
00:00:02.230 --> 00:00:03.170
Hello, everyone.

2
00:00:03.460 --> 00:00:06.100
In this lesson, we're starting a new chapter.

3
00:00:06.520 --> 00:00:13.030
Now we're still within the three chapter plug in development section, but now our focus is going to

4
00:00:13.030 --> 00:00:15.870
be on JavaScript in particular.

5
00:00:15.880 --> 00:00:21.220
I want to show you how we can use JavaScript to create new custom block types.

6
00:00:21.640 --> 00:00:24.380
Let's jump right into the action and let me explain.

7
00:00:24.760 --> 00:00:27.700
So if I begin to edit one of my posts.

8
00:00:29.310 --> 00:00:36.090
Right, the screen is the modern block, Ed, and we know that by default, WordPress ships with a few

9
00:00:36.090 --> 00:00:37.590
basic block types.

10
00:00:38.070 --> 00:00:40.440
Each one of these is a paragraph block.

11
00:00:40.470 --> 00:00:47.910
I can try to insert a new block that perhaps is an image or headline gallery list quote.

12
00:00:48.090 --> 00:00:56.040
However, what if we as a developer want to create our own brand new completely custom block type and

13
00:00:56.040 --> 00:00:59.010
then we want to share it with the world as a plugin?

14
00:00:59.490 --> 00:01:04.800
Well, in order to do that, we need to dig into JavaScript, because as you might have guessed, these

15
00:01:04.800 --> 00:01:08.550
block types are fairly interactive in real time.

16
00:01:08.550 --> 00:01:12.960
You are changing the text or choosing different options and customizing them.

17
00:01:13.260 --> 00:01:18.630
And in order to have things happen in real time like that, we need to use JavaScript.

18
00:01:18.930 --> 00:01:24.300
So in this chapter, we're going to use JavaScript and learn a little bit about the framework called

19
00:01:24.300 --> 00:01:28.770
REACT in order to build our own custom block types.

20
00:01:29.250 --> 00:01:29.480
Right.

21
00:01:29.510 --> 00:01:37.150
So our goal is when you try to insert a new block, we want a brand new type that we ourselves created.

22
00:01:37.740 --> 00:01:44.790
So without further ado, right now, let's go create a new empty plugin folder and begin moving forward

23
00:01:44.790 --> 00:01:45.410
together.

24
00:01:45.930 --> 00:01:53.340
So do this with me in your WordPress installation, look for the WP content folder and then go into

25
00:01:53.340 --> 00:01:54.870
the plugins folder.

26
00:01:55.290 --> 00:01:58.890
And then we just want to create a brand new empty folder.

27
00:01:59.050 --> 00:01:59.320
Right.

28
00:01:59.340 --> 00:02:03.660
We're creating a new plugin together so you can name the new folder, whatever you want.

29
00:02:03.930 --> 00:02:05.690
Try to name it something unique.

30
00:02:05.730 --> 00:02:08.550
So a name that no other plugin has ever used before.

31
00:02:09.000 --> 00:02:10.410
Several lessons from now.

32
00:02:10.410 --> 00:02:16.950
Once we're actually up and running, we're going to start building a multiple choice quiz type of block

33
00:02:16.950 --> 00:02:17.340
type.

34
00:02:17.520 --> 00:02:19.710
So I'm going to name my new folder.

35
00:02:20.140 --> 00:02:23.330
Are you paying attention?

36
00:02:24.760 --> 00:02:26.490
Okay, but you can choose whatever name you want.

37
00:02:26.640 --> 00:02:30.420
Then just go ahead and open up your new folder in your text editor.

38
00:02:30.930 --> 00:02:34.110
Inside our folder, let's create a new JavaScript file.

39
00:02:34.110 --> 00:02:35.250
So new file.

40
00:02:35.850 --> 00:02:38.430
This will just be a quick test to see how things work.

41
00:02:38.440 --> 00:02:45.840
So why don't we name the file test J.S. inside the file just so we can make sure that it's actually

42
00:02:45.840 --> 00:02:46.400
loading?

43
00:02:46.710 --> 00:02:54.090
Let's begin with an annoying alert pop up to just call the alert function and let's say hello from our

44
00:02:54.420 --> 00:02:55.830
new JS file.

45
00:02:56.520 --> 00:02:57.750
Let's give that a save.

46
00:02:57.870 --> 00:03:04.560
And now, even though most of our work in this chapter is going to be in JavaScript, we still need

47
00:03:04.560 --> 00:03:13.350
to use P to register a new plug in and then tell WordPress to load our JavaScript file when you're on

48
00:03:13.350 --> 00:03:14.930
the Post editor screen.

49
00:03:15.510 --> 00:03:24.540
So in our new folder, let's create a PDF file, a new file, let's name it, indexed dot http to save

50
00:03:24.540 --> 00:03:26.400
a bit of time in our new file.

51
00:03:26.410 --> 00:03:28.200
I'm just going to paste in my clipboard.

52
00:03:28.410 --> 00:03:35.280
You can either pause the video and type this out or really I'm just recycling the code from our previous

53
00:03:35.280 --> 00:03:35.820
plugin.

54
00:03:36.180 --> 00:03:43.020
So we're entering into the generic plugin attributes, write the name, the description, the version,

55
00:03:43.020 --> 00:03:49.320
the author, and then this line of code that prevents people from triggering our code by visiting the

56
00:03:49.320 --> 00:03:51.720
euro for this file.

57
00:03:52.090 --> 00:03:58.350
OK, with this boilerplate code out of the way, let's go ahead and create a class.

58
00:03:58.650 --> 00:04:05.190
And then once we have our class up and running, we just want to in queue or load our JavaScript file.

59
00:04:05.490 --> 00:04:09.750
So let's make up a new class class and then we can make up a name, I'll call it.

60
00:04:09.990 --> 00:04:13.040
Are you paying attention?

61
00:04:13.650 --> 00:04:15.840
No parentheses, just curly brackets.

62
00:04:16.080 --> 00:04:19.800
Below this, let's create a new instance of our class.

63
00:04:20.130 --> 00:04:23.130
So let's make up a variable name, dollar sign.

64
00:04:23.130 --> 00:04:25.050
Let's call it maybe just lowercase.

65
00:04:25.050 --> 00:04:32.460
Are you paying attention and set that to equal a new instance of our class?

66
00:04:32.970 --> 00:04:39.870
Are you paying attention parentheses to actually use it or call it and then end with a semicolon?

67
00:04:40.230 --> 00:04:43.020
Now in our class, let's create the constructor function.

68
00:04:43.020 --> 00:04:49.620
So that's just function, underscore, underscore, construct, parentheses, curly brackets.

69
00:04:50.190 --> 00:04:56.880
Now giving back to the actual task at hand, we just want to tell WordPress to load our JavaScript file

70
00:04:57.240 --> 00:04:59.700
when you're on the block ed screen.

71
00:05:00.090 --> 00:05:03.330
So inside the construct function we want to add an action.

72
00:05:03.330 --> 00:05:05.370
So add action semicolon.

73
00:05:05.610 --> 00:05:06.900
We give it to arguments.

74
00:05:07.260 --> 00:05:13.950
The action hook name that we're interested in is on cue, which is a very easy word to misspell.

75
00:05:13.960 --> 00:05:21.870
But on Q Block Ed assets, the second argument is a function that we want to run.

76
00:05:21.870 --> 00:05:24.360
Let's use the array callable syntax.

77
00:05:24.690 --> 00:05:28.620
So the first argument is dollar sign this, then we make up a method name.

78
00:05:28.890 --> 00:05:32.280
How about admin assets?

79
00:05:32.850 --> 00:05:38.400
OK, then let's go create a method with this name, so still in our class, but just below the construct

80
00:05:38.400 --> 00:05:40.410
function will say function.

81
00:05:40.730 --> 00:05:41.640
We scroll down a bit.

82
00:05:43.410 --> 00:05:50.370
Function, admin assets, parentheses, curly brackets, and then we're just going to on cue a JavaScript

83
00:05:50.370 --> 00:05:50.720
file.

84
00:05:50.730 --> 00:05:56.370
So we've already seen this back during the theme development chapters, but it's a function that WordPress

85
00:05:56.370 --> 00:06:02.690
offers to us named WP on Q script Semicolon.

86
00:06:03.240 --> 00:06:05.240
We're going to give it three arguments for now.

87
00:06:05.250 --> 00:06:11.180
So ABC, the first argument is just a name that we're sort of giving this JavaScript file, right?

88
00:06:11.250 --> 00:06:14.790
Sort of a short name or variable names of WordPress can identify it.

89
00:06:15.120 --> 00:06:16.950
You can make up anything you want.

90
00:06:16.950 --> 00:06:20.270
I'll call it our new block type.

91
00:06:20.760 --> 00:06:24.980
The second argument is just a neutral that points towards our JavaScript file.

92
00:06:25.410 --> 00:06:31.770
So let's use the word press function called plug in WRAL parentheses to call it inside there.

93
00:06:31.770 --> 00:06:36.880
Let's use the constant of underscore, underscore, phial, underscore, underscore.

94
00:06:37.320 --> 00:06:41.340
So this will give us the Eurail of the folder that the current file is in.

95
00:06:41.640 --> 00:06:46.620
And then after that, so after the parentheses, but before the comma, we're going to concatenate on

96
00:06:47.430 --> 00:06:50.760
a string of text and just point towards our JavaScript file.

97
00:06:50.780 --> 00:06:52.290
So we named it test.

98
00:06:52.780 --> 00:06:53.990
Yes, OK.

99
00:06:54.300 --> 00:07:00.420
The third argument is a list of dependencies, so let's give this an array.

100
00:07:00.420 --> 00:07:05.250
And for now, the only thing we really, truly need to load is something called.

101
00:07:05.430 --> 00:07:09.010
So a string of text WP dash blocks.

102
00:07:09.690 --> 00:07:13.650
Now, don't worry, in a few minutes we will learn what WP blocks is.

103
00:07:14.010 --> 00:07:18.750
So we'll learn why we're loading it here as a dependency and actually how to begin leveraging and using

104
00:07:18.750 --> 00:07:18.920
it.

105
00:07:19.290 --> 00:07:23.730
But for now, why don't we go ahead and save this and test it out?

106
00:07:24.690 --> 00:07:29.030
So back in WordPress, the first thing we need to do is go activate our new plugin.

107
00:07:29.400 --> 00:07:35.820
So back on the generic admin dashboard screen in the sidebar, let's Gondar plug ins.

108
00:07:36.240 --> 00:07:37.910
Let's find the new one that we just created.

109
00:07:37.920 --> 00:07:39.390
So remember, I named mine.

110
00:07:39.690 --> 00:07:41.700
Are you paying attention, Cui's?

111
00:07:42.030 --> 00:07:45.330
So just go ahead and activate your plugin, OK?

112
00:07:45.370 --> 00:07:51.120
And what we want to do now is test to make sure that the editors screen is loading our JavaScript file.

113
00:07:51.390 --> 00:07:54.810
So if we just go into posts and begin editing a post.

114
00:07:56.190 --> 00:08:01.960
Perfect, we see that annoying alert pop up hello from our new JavaScript file, this is great.

115
00:08:01.980 --> 00:08:07.950
So that means our own custom JavaScript file is loading on this screen from here.

116
00:08:08.100 --> 00:08:11.600
It's very easy to register a new custom block type.

117
00:08:12.180 --> 00:08:14.970
So let's just write a little bit of JavaScript code together.

118
00:08:15.420 --> 00:08:25.440
So back in our test JS file, let's get rid of the annoying alert pop up and instead let's say WP dot.

119
00:08:25.800 --> 00:08:26.180
Oops.

120
00:08:26.190 --> 00:08:31.500
Well if you're using voice code as your text editor like I am, you might have just got this exact same

121
00:08:31.500 --> 00:08:32.450
annoying feature.

122
00:08:32.790 --> 00:08:39.540
So when I typed WP and then attempted to type DOT, it just sort of auto filled that in for me.

123
00:08:39.550 --> 00:08:40.960
Now this is not what I want.

124
00:08:40.980 --> 00:08:53.220
So what you can do is type WP and then hit the escape key and now I can type dot dot blocks, dot register,

125
00:08:53.550 --> 00:08:54.840
block type.

126
00:08:55.060 --> 00:08:56.190
And this is a method.

127
00:08:56.190 --> 00:09:01.920
So we want to call it before we give it any arguments, let's first talk about where this is coming

128
00:09:01.920 --> 00:09:02.320
from.

129
00:09:02.700 --> 00:09:09.150
So WordPress itself is going to add something called WP to the browsers global scope.

130
00:09:09.570 --> 00:09:14.310
Inside that object, there's going to be something called blocks and inside that there's something called

131
00:09:14.550 --> 00:09:15.770
register block type.

132
00:09:16.320 --> 00:09:22.620
So remember, back in our file when we listed WP dash blocks as a dependency?

133
00:09:23.160 --> 00:09:30.270
Well, this is why, because we want to make sure that it has already been loaded before WordPress loads

134
00:09:30.450 --> 00:09:31.950
our JavaScript file.

135
00:09:32.280 --> 00:09:36.450
So that way we have no problems just accessing this from the global scope.

136
00:09:36.870 --> 00:09:42.390
So we're just using a function that WordPress gives to us and now we want to give it to arguments.

137
00:09:42.390 --> 00:09:48.480
So Akama, be the first argument is the short name or variable name for our block type.

138
00:09:49.020 --> 00:09:54.180
So instead of a let's give it quotes and we actually want to begin with a namespace that is unique to

139
00:09:54.180 --> 00:09:54.990
our plugin.

140
00:09:55.200 --> 00:10:03.060
So why don't we call it our plug in slash and now you get to the actual short name for our block type,

141
00:10:03.300 --> 00:10:04.020
I'll call it.

142
00:10:04.210 --> 00:10:07.540
Are you paying attention?

143
00:10:08.240 --> 00:10:13.920
OK, the second argument is a configuration object, so that just means we're going to give it curly

144
00:10:13.920 --> 00:10:19.950
brackets for a object in JavaScript inside the curly brackets we can dropdown and now we're just going

145
00:10:19.950 --> 00:10:21.690
to spell out a few properties.

146
00:10:22.170 --> 00:10:27.540
So we need to use very precise or exact property names that WordPress knows to look for.

147
00:10:27.960 --> 00:10:29.480
The first one will be title.

148
00:10:29.490 --> 00:10:30.690
So title Colon.

149
00:10:30.690 --> 00:10:32.040
We give it a string of text.

150
00:10:32.350 --> 00:10:34.710
Now, this is what people will actually see.

151
00:10:34.710 --> 00:10:37.800
So we are free to have spaces and uppercase letters.

152
00:10:37.800 --> 00:10:42.390
So let's say, are you paying attention?

153
00:10:42.390 --> 00:10:44.310
Questionmark after that.

154
00:10:44.310 --> 00:10:45.000
Let's have a comma.

155
00:10:45.000 --> 00:10:46.170
We want another property.

156
00:10:46.170 --> 00:10:47.670
Let's call it icon.

157
00:10:48.000 --> 00:10:50.160
And for now we can just use a dash Hakone.

158
00:10:50.160 --> 00:10:52.770
So let's just say smiley comma.

159
00:10:52.770 --> 00:10:56.100
Let's have another property called category.

160
00:10:56.790 --> 00:10:59.220
Let's just place it in the common category.

161
00:10:59.220 --> 00:11:03.420
There's also layout, I believe there's one called typography or text.

162
00:11:04.050 --> 00:11:05.490
For now, let's just go with common.

163
00:11:05.850 --> 00:11:08.220
OK, now we want to more properties of comma.

164
00:11:08.490 --> 00:11:10.250
We want property named.

165
00:11:10.320 --> 00:11:12.840
Edit now for its value.

166
00:11:13.020 --> 00:11:17.970
Instead of giving it a string of text, we want to give it a function, a JavaScript function.

167
00:11:17.970 --> 00:11:21.900
So now we will learn more about code organization later on.

168
00:11:21.900 --> 00:11:25.650
But for now, let's just give it an anonymous or inline function.

169
00:11:25.860 --> 00:11:29.130
You could even give it an S6 Arrow function if you wanted to.

170
00:11:29.130 --> 00:11:32.130
But I'll just say function parentheses, curly brackets.

171
00:11:32.580 --> 00:11:35.760
We will circle back to the body of the function in just a moment.

172
00:11:36.540 --> 00:11:42.600
But after this closing curly bracket, let's have a comma and we want our configuration object to have

173
00:11:42.600 --> 00:11:46.800
one more property named Save Colon.

174
00:11:46.950 --> 00:11:49.650
And again, for its value, this should be a function.

175
00:11:49.650 --> 00:11:53.000
So function parentheses curly brackets.

176
00:11:53.460 --> 00:11:57.960
Now let's talk a little bit about what the edit and save functions are used for.

177
00:11:58.380 --> 00:12:05.700
The edit function controls what you'll see in the admin post editor screen, whereas the save function

178
00:12:05.700 --> 00:12:10.230
controls what the actual public will see in your content.

179
00:12:10.740 --> 00:12:17.070
So in both functions will want to return a value, but we can't just return a traditional string of

180
00:12:17.070 --> 00:12:17.760
text.

181
00:12:18.120 --> 00:12:24.120
Instead, WordPress has its own way of describing and rendering HTML through JavaScript.

182
00:12:24.360 --> 00:12:28.350
And so we need to do things the way that WordPress is expecting us to.

183
00:12:28.860 --> 00:12:30.000
Let me explain what I mean.

184
00:12:30.000 --> 00:12:35.940
So in the edit function, what we want to do is return something and what do we want to return?

185
00:12:36.540 --> 00:12:41.310
Well, we're going to start out by looking in the global or window scope of JavaScript for something

186
00:12:41.310 --> 00:12:51.630
called WP dot element, dot create element, which is a method, so parentheses to call it.

187
00:12:52.110 --> 00:12:55.350
So we're just leveraging this function that WordPress adds.

188
00:12:55.670 --> 00:13:03.560
The global scope of the browser, and this is the official WordPress way of creating an HTML element

189
00:13:03.710 --> 00:13:09.080
from within JavaScript, so within these parentheses we're going to give it three arguments.

190
00:13:09.350 --> 00:13:11.540
So you could say a comma be comma C.

191
00:13:11.900 --> 00:13:16.590
The first argument is the type of HTML element you want to create.

192
00:13:16.980 --> 00:13:22.820
So a string of text, maybe this would be a P four paragraph element or an unordered list or a list

193
00:13:22.820 --> 00:13:24.590
item or heading level one.

194
00:13:25.100 --> 00:13:28.680
Just for a quick example, why don't we add a heading level three?

195
00:13:29.180 --> 00:13:35.130
OK, the second argument is any attributes or properties that describe this element.

196
00:13:35.480 --> 00:13:41.960
So, for example, if you wanted to give it an HTML class or if you wanted to give it an inline style

197
00:13:41.960 --> 00:13:44.930
attribute, for now, we're just going to leave that blank.

198
00:13:44.930 --> 00:13:46.670
So we'll just give it a value of null.

199
00:13:47.210 --> 00:13:51.900
And then the third argument is the children are content for this element.

200
00:13:52.070 --> 00:13:56.830
So this is where we would include the actual text that would live inside the heading level three.

201
00:13:56.840 --> 00:13:58.420
So let's say quotes.

202
00:13:59.000 --> 00:14:04.970
Hello, this is from the admin ed screen.

203
00:14:06.360 --> 00:14:12.770
OK, now, in terms of our safe function, let's just use this exact same code, but slightly edited

204
00:14:12.770 --> 00:14:19.920
it, so I'm not going to copy this entire line into my clipboard, paste it into the save function only.

205
00:14:19.920 --> 00:14:26.520
Let's change the third argument to instead say this is the front end.

206
00:14:27.090 --> 00:14:31.890
OK, and just to make the difference crystal clear, you could even change the element to a heading

207
00:14:31.890 --> 00:14:32.610
level one.

208
00:14:33.210 --> 00:14:35.130
Let's go ahead and save this.

209
00:14:35.370 --> 00:14:41.850
Now, technically, WordPress will always load WP element on the Post editor screen.

210
00:14:41.850 --> 00:14:43.380
That's a very safe bet.

211
00:14:43.530 --> 00:14:51.810
However, it is a best practice to describe and tell WordPress what our plugin needs or what it depends

212
00:14:51.810 --> 00:14:52.130
on.

213
00:14:52.470 --> 00:14:57.810
So if we wanted to follow a best practice and really play it safe, we could go back into our file.

214
00:14:58.290 --> 00:15:04.620
And when we're loading our JavaScript file, remember our array of dependencies, you could go ahead

215
00:15:04.620 --> 00:15:14.520
and say Kharma quotes WP dash element just to be 100 percent sure that that will already be loaded and

216
00:15:14.520 --> 00:15:17.730
exist before WordPress loads our file.

217
00:15:18.240 --> 00:15:20.880
So let's save that and give it a test.

218
00:15:21.180 --> 00:15:24.840
So on the Post editor screen, be sure to reload or refresh.

219
00:15:26.010 --> 00:15:33.270
OK, now imagine in between these two paragraphs, I want to insert a new block, so cool, you should

220
00:15:33.270 --> 00:15:35.310
see it as the very first option.

221
00:15:35.700 --> 00:15:37.140
Are you paying attention?

222
00:15:37.590 --> 00:15:42.030
If you don't see it, you could also always use the search menu to search for.

223
00:15:42.030 --> 00:15:44.040
Are you paying attention?

224
00:15:44.070 --> 00:15:47.300
Either way, let's just click it to actually inserted into our post.

225
00:15:47.610 --> 00:15:48.590
Cool there.

226
00:15:48.600 --> 00:15:50.130
Is that heading level three.

227
00:15:50.140 --> 00:15:52.920
Hello, this is from the admin ed screen.

228
00:15:53.490 --> 00:16:00.780
Now, if we actually click save or update and then view this blog post on the front end of our website,

229
00:16:01.290 --> 00:16:05.070
if we scroll down a little bit there we see the heading level one.

230
00:16:05.310 --> 00:16:07.980
This is the front end now right away.

231
00:16:07.980 --> 00:16:12.030
The first thing I want to do is demystify what's going on here on the front end.

232
00:16:12.210 --> 00:16:20.010
What I mean by that is WordPress is absolutely not loading JavaScript right here on the front end now.

233
00:16:20.010 --> 00:16:28.830
Yes, on the admin screen, WordPress is actually calling our JavaScript function to generate this element

234
00:16:28.830 --> 00:16:30.270
that we see on the edit screen.

235
00:16:30.540 --> 00:16:38.580
But once you actually click update or save, well, whatever our save method returns, that's just going

236
00:16:38.580 --> 00:16:42.920
to get saved into the database as a traditional piece of text.

237
00:16:43.200 --> 00:16:49.920
So if you open up admin error or look at your database and go into the posts table and then click select

238
00:16:49.920 --> 00:16:57.240
data, if I go to the very last page and click edit on my most recent post and then look for the post

239
00:16:57.240 --> 00:16:59.820
content field so you can see.

240
00:16:59.850 --> 00:17:00.900
Let me zoom in a little bit.

241
00:17:01.470 --> 00:17:04.260
You can see WP Colon paragraph.

242
00:17:04.260 --> 00:17:10.320
That's the in default block type that WordPress gives to us for just a standard paragraph.

243
00:17:11.490 --> 00:17:13.350
But if we scroll down a little bit.

244
00:17:14.730 --> 00:17:18.970
Here we can see WP Colen, our plug ins.

245
00:17:19.470 --> 00:17:26.250
Are you paying attention and literally the only thing getting saved into the database is just a simple

246
00:17:26.250 --> 00:17:27.260
piece of text.

247
00:17:27.630 --> 00:17:33.270
So as far as our front end is concerned, this has nothing to do with JavaScript.

248
00:17:33.720 --> 00:17:34.530
Now, don't worry.

249
00:17:34.680 --> 00:17:40.230
Later in this chapter, we will learn how to include JavaScript on the front end of our website.

250
00:17:40.470 --> 00:17:43.790
But I think it's important to see this as early as possible.

251
00:17:44.220 --> 00:17:51.120
Ultimately, WordPress is just going to take whatever value our save method returns, and that's just

252
00:17:51.120 --> 00:17:53.410
getting added into the database like this.

253
00:17:54.360 --> 00:17:57.230
Now let's get back on track and talk about where we go from here.

254
00:17:57.240 --> 00:18:04.380
So back on the edit screen, we don't actually want the editor content to just be a heading level three

255
00:18:04.380 --> 00:18:06.090
with hard coded text.

256
00:18:06.510 --> 00:18:12.180
Instead, we would want this to be dynamic and interactive, someplace where the user can type into

257
00:18:12.180 --> 00:18:14.370
a field or customize an option.

258
00:18:14.790 --> 00:18:22.350
However, in order to do that, we would need to be able to write fairly complex HTML or at least HTML.

259
00:18:22.350 --> 00:18:28.670
That's more complex than a single element with a single piece of content or children.

260
00:18:29.070 --> 00:18:35.790
And even though this create element method is the way that WordPress creates HTML from within JavaScript,

261
00:18:36.300 --> 00:18:42.230
no one or practically no one actually directly leverages it like this.

262
00:18:42.900 --> 00:18:52.140
Instead, in the real world, there's a syntax called JS X that looks almost identical to HTML and it

263
00:18:52.140 --> 00:19:02.140
makes it very easy to spell out complex HTML interfaces from within JavaScript right here now is amazing.

264
00:19:02.310 --> 00:19:08.790
However, in order to use it, it does require a little bit of configuration or installation of development

265
00:19:08.790 --> 00:19:11.090
workflow tools on your computer.

266
00:19:11.610 --> 00:19:15.360
Now, while that can typically be complex or difficult to set up.

267
00:19:15.720 --> 00:19:23.220
Luckily for us, the WordPress team has created an official JavaScript package called WordPress Scripts

268
00:19:23.400 --> 00:19:28.930
that makes the entire process a hundred and fifty million percent easier and simpler.

269
00:19:29.400 --> 00:19:37.920
So in our very next lesson, we're going to learn how to use JSM here so that we can easily and elegantly

270
00:19:37.920 --> 00:19:41.550
spell out complex HTML interfaces.

271
00:19:41.910 --> 00:19:44.490
Let's keep the momentum rolling and I'll see you then.
