WEBVTT
1
00:00:02.090 --> 00:00:03.110
Hello, everyone.

2
00:00:03.440 --> 00:00:10.310
In this lesson, we will learn about archives, so, for example, if someone wanted to view only blog

3
00:00:10.310 --> 00:00:17.090
posts from a certain category or by a certain author or from a certain date, let me show you what I'm

4
00:00:17.090 --> 00:00:17.890
referring to.

5
00:00:18.260 --> 00:00:25.490
So if I go up in the address bar and visit slash blog, this screen has multiple blog posts.

6
00:00:25.970 --> 00:00:31.370
But you'll notice that this first post is categorized in the awards category.

7
00:00:31.760 --> 00:00:37.880
And if I click on that category, link up in the address bar, we can see that that takes me to slash

8
00:00:37.880 --> 00:00:40.270
category slash awards.

9
00:00:40.640 --> 00:00:46.640
So this is an archive screen, meaning it will only show posts from that one category.

10
00:00:46.940 --> 00:00:52.700
We would call this a category archive or for another example, if I click on this author link.

11
00:00:53.980 --> 00:01:01.060
Now up in the address bar that takes us to slash author Slash Brad, so this URL and this screen is

12
00:01:01.060 --> 00:01:03.330
an example of an author archive.

13
00:01:03.550 --> 00:01:11.380
Now, at the moment, these author and category archive screens are being powered by index, part of

14
00:01:11.380 --> 00:01:12.430
our theme folder.

15
00:01:12.520 --> 00:01:20.020
But really, at the end of the day, that's not the job of the index file index is really just supposed

16
00:01:20.020 --> 00:01:22.600
to be a generic fallback.

17
00:01:22.840 --> 00:01:28.810
Last line of defense insurance policy index is never WordPress is first choice.

18
00:01:28.960 --> 00:01:34.260
WordPress would rather use an appropriate theme file depending on the you are really you're visiting

19
00:01:34.570 --> 00:01:37.870
in this case, the file would be archived.

20
00:01:39.400 --> 00:01:47.590
So right now, let's go ahead and create an archive file and use it to set up relevant archive title

21
00:01:47.590 --> 00:01:53.470
headlines here like authored by Brad or Category Awards instead of this generic.

22
00:01:53.470 --> 00:01:55.350
Welcome to our blog text.

23
00:01:55.750 --> 00:02:00.850
So in your text editor within our theme folder, let's create a brand new file.

24
00:02:01.880 --> 00:02:13.970
And let's name this new file archive, dot HP, OK, so we have an empty archived file, and if we refresh

25
00:02:13.970 --> 00:02:18.660
an archive screen, I'm on the author archive for the Brad user.

26
00:02:18.800 --> 00:02:21.230
You can see that the screen is completely blank.

27
00:02:21.470 --> 00:02:27.890
And if I say hello world in my template, that's all we see for that screen.

28
00:02:28.160 --> 00:02:33.890
So in order to get this template up and running, why don't we just copy and paste the entire contents

29
00:02:33.890 --> 00:02:35.300
of index dot?

30
00:02:36.650 --> 00:02:43.460
So I'm going to jump in index, highlight everything on the page and copy it into my clipboard and then

31
00:02:43.460 --> 00:02:46.250
back in archive, paste that in.

32
00:02:46.730 --> 00:02:53.600
And then if I scroll up to the very top, let's begin by focusing on this heading level one that reads

33
00:02:53.840 --> 00:02:55.530
welcome to our blog.

34
00:02:55.850 --> 00:03:00.020
So on this archive template, we don't want this text here to be hard coded.

35
00:03:00.290 --> 00:03:06.230
So let's delete that message and instead let's use it output a dynamic title.

36
00:03:06.590 --> 00:03:12.410
Now we're going to want different titles depending on whether we're on a category archive or an author

37
00:03:12.410 --> 00:03:14.520
archive or a date archive.

38
00:03:14.780 --> 00:03:23.390
So one way we can handle this would be to drop into PHP and we could say if and then our condition goes

39
00:03:23.390 --> 00:03:30.890
within the parentheses, we could say if and then we can call a function named is category and this

40
00:03:30.890 --> 00:03:32.180
function will return.

41
00:03:32.180 --> 00:03:37.370
True, if you are on a category archive screen, otherwise it will return false.

42
00:03:37.640 --> 00:03:42.110
So then after the if condition, we could open up curly brackets dropdown.

43
00:03:42.530 --> 00:03:50.090
So if this evaluates to true, we could just echo out a message that says category name will go here

44
00:03:50.480 --> 00:03:52.760
and we can fill that in in just a moment for now.

45
00:03:52.760 --> 00:03:54.650
But this will be a nice placeholder.

46
00:03:55.070 --> 00:04:00.310
And then right after this closing curly bracket for the IF statement, let's just write another if statement

47
00:04:00.740 --> 00:04:03.500
so you could type here or you could drop down to a new line.

48
00:04:03.500 --> 00:04:05.120
And let's say if.

49
00:04:06.480 --> 00:04:14.100
Parentheses, we can say if this is an author archive, so you just say is author and this function

50
00:04:14.100 --> 00:04:17.090
will return true if you're on an author archive scream.

51
00:04:17.580 --> 00:04:24.210
So if that's the case, curly brackets, let's just echo out a message that says author name will go

52
00:04:24.210 --> 00:04:26.880
here and we can fill that in with real data.

53
00:04:26.880 --> 00:04:27.690
And just a moment.

54
00:04:28.290 --> 00:04:30.870
But if we save this and refresh.

55
00:04:32.190 --> 00:04:34.570
Cool, I'm on to author archive you, Earl.

56
00:04:34.590 --> 00:04:39.600
So we see author name will go here, but if I click on this awards category link.

57
00:04:40.750 --> 00:04:45.280
I'm on a category archive and now I see category name will go here, cool.

58
00:04:45.280 --> 00:04:51.340
So now we just need to hollow out these placeholders with the actual category name and the actual author

59
00:04:51.340 --> 00:04:51.760
name.

60
00:04:52.180 --> 00:04:58.210
So within this first if statement, within the curly brackets, let's delete this echo line and to get

61
00:04:58.210 --> 00:05:04.930
the dynamic name of the category that you're currently viewing, we can call a function named Single

62
00:05:05.410 --> 00:05:10.300
Cat as in category title and we do not need to it.

63
00:05:10.330 --> 00:05:12.700
WordPress will handle outputting it for us.

64
00:05:13.610 --> 00:05:16.600
So if we save that and refresh perfect.

65
00:05:16.600 --> 00:05:19.360
So we are on the awards category archive.

66
00:05:19.390 --> 00:05:20.860
So this title makes sense.

67
00:05:21.280 --> 00:05:26.700
And if I click on the author name to go to the author archive, let's work on that one next.

68
00:05:27.430 --> 00:05:29.980
So instead of echoing out, the author will go here.

69
00:05:29.980 --> 00:05:36.370
Let's delete that line and we can just call a WordPress function named the author.

70
00:05:39.660 --> 00:05:46.020
Cool, but maybe you don't just want the nickname, maybe you want to preface it by saying posts by

71
00:05:46.020 --> 00:05:49.710
Brad, well, back in our code we could do just that.

72
00:05:50.010 --> 00:05:58.110
So right before we call that the author function, we could echo out our own text that reads posts by

73
00:05:58.380 --> 00:05:59.520
and then space.

74
00:05:59.850 --> 00:06:04.410
Then we could include a semicolon and then call this author function.

75
00:06:04.890 --> 00:06:08.040
So if I save that now we see posts by Brad.

76
00:06:08.460 --> 00:06:08.820
Cool.

77
00:06:08.820 --> 00:06:13.640
So you can use that strategy to phrase the archive titles however you see fit.

78
00:06:13.890 --> 00:06:17.130
So that takes care of category in author archives.

79
00:06:17.340 --> 00:06:19.960
But what about based archives?

80
00:06:20.520 --> 00:06:23.150
Let me show you an example of a date archive.

81
00:06:23.550 --> 00:06:30.000
So if I click on one of the individual blog posts to go to the single view up in the address bar, you

82
00:06:30.000 --> 00:06:33.960
can see it begins with the year and then the month and then the day.

83
00:06:34.320 --> 00:06:37.880
And then finally the slug name for that particular post.

84
00:06:38.100 --> 00:06:42.270
However, you can delete the slug from the end of the URL.

85
00:06:42.510 --> 00:06:45.460
And this is a day based archive, right?

86
00:06:45.500 --> 00:06:49.560
This screen will show you all of the blog posts from the 8th of June.

87
00:06:50.520 --> 00:06:55.570
Or you could even delete the 08 and then this would be a month based archive.

88
00:06:55.620 --> 00:06:57.770
This would show you all posts from June.

89
00:06:58.080 --> 00:07:03.900
And obviously, if you get rid of the month, this would be a year based archive that only shows posts

90
00:07:03.900 --> 00:07:05.050
for twenty seventeen.

91
00:07:05.250 --> 00:07:11.160
Now, as you can imagine, setting up different if statements for every one of those situations could

92
00:07:11.160 --> 00:07:12.030
be exhausting.

93
00:07:12.030 --> 00:07:12.330
Right.

94
00:07:12.330 --> 00:07:16.900
Setting up an if statement for the year check and then another one for the month check and another if

95
00:07:16.920 --> 00:07:21.870
statement for the day check that could get really old really quickly and it would result in a ton of

96
00:07:21.870 --> 00:07:22.320
work.

97
00:07:22.530 --> 00:07:30.030
Well, luckily for us, towards the very end of 2014, WordPress introduced a new function that can

98
00:07:30.030 --> 00:07:34.100
save us a ton of work when it comes to archive titles.

99
00:07:34.320 --> 00:07:35.350
So check this out.

100
00:07:35.580 --> 00:07:40.110
I know this is sort of undoing everything we've been working on for the last three to four minutes,

101
00:07:40.110 --> 00:07:43.410
but let's actually hollow out this heading level one.

102
00:07:43.770 --> 00:07:46.510
So let's delete all of this that we just wrote.

103
00:07:47.010 --> 00:07:49.830
So now I'm back to just an empty heading level one.

104
00:07:50.160 --> 00:07:58.290
And in between the H1 tags, let's drop into P and let's call a WordPress function that is only a few

105
00:07:58.290 --> 00:07:59.010
years old.

106
00:07:59.160 --> 00:08:05.330
It's named the archive title, and that's it.

107
00:08:05.340 --> 00:08:08.270
There's one function will take care of everything for us.

108
00:08:08.580 --> 00:08:13.650
So if I save that, I'm on a year based archive and it has the appropriate title.

109
00:08:13.950 --> 00:08:17.430
If I go back to the month archive, we're in business.

110
00:08:17.430 --> 00:08:19.050
Go back to the day archive.

111
00:08:19.500 --> 00:08:20.180
Perfect.

112
00:08:20.490 --> 00:08:24.990
If I click on awards to go to a category archive makes sense.

113
00:08:24.990 --> 00:08:29.070
And if I click on Brad to go to an author archive, looking good.

114
00:08:29.490 --> 00:08:30.420
So it's up to you.

115
00:08:30.570 --> 00:08:37.200
If you want to have fine grained control over the exact phrasing of your titles, you can set up your

116
00:08:37.200 --> 00:08:43.050
own if statements like we were doing a few minutes ago or if good is good enough, I encourage you to

117
00:08:43.050 --> 00:08:47.040
just use this the archive title function and call it a day.

118
00:08:47.400 --> 00:08:51.690
OK, now let's change gears and let's focus on this subtitle.

119
00:08:51.990 --> 00:08:52.260
Right.

120
00:08:52.260 --> 00:08:58.110
We probably don't want to output keep up with our latest news on every single archive screen.

121
00:08:58.440 --> 00:08:59.790
So let's delete that.

122
00:08:59.790 --> 00:09:08.070
And within that paragraph tag, let's drop in to P and let's call the brother or sister to this function,

123
00:09:08.520 --> 00:09:13.400
which is named the archive description.

124
00:09:15.180 --> 00:09:21.270
Now, if I say this at first glance, you might think that it does nothing right, because we don't

125
00:09:21.270 --> 00:09:22.290
see any text here.

126
00:09:22.650 --> 00:09:26.970
But what's really going on is because we are on an author archive screen.

127
00:09:27.390 --> 00:09:32.610
That new description function is trying to pull in the biography text for this current author.

128
00:09:32.970 --> 00:09:34.170
So try this out with me.

129
00:09:34.170 --> 00:09:41.070
If you jump into your WordPress admin and hover over users in the sidebar, go ahead and click your

130
00:09:41.070 --> 00:09:41.910
profile.

131
00:09:42.930 --> 00:09:48.960
And if you scroll down to the bottom of this page, you'll notice a field here named Biographical Info.

132
00:09:49.350 --> 00:09:54.060
Now, whatever you type here will be considered the description for your author archive screen.

133
00:09:54.450 --> 00:10:00.720
So if I just say testing hello world one, two, three as my biography and then click update.

134
00:10:01.530 --> 00:10:04.140
Well, that will show up as the description.

135
00:10:04.740 --> 00:10:05.190
Cool.

136
00:10:05.200 --> 00:10:08.460
Now let's work on the description text for category archives.

137
00:10:08.850 --> 00:10:14.790
So if I click on awards to go to the awards category archive, we notice that there's no description

138
00:10:14.790 --> 00:10:19.470
text and that's because I never assigned a description for the category.

139
00:10:19.650 --> 00:10:20.760
Let me show you what I mean.

140
00:10:20.910 --> 00:10:27.270
Back in the WordPress admin, if you hover over posts towards the top of your sidebar, then you can

141
00:10:27.270 --> 00:10:28.890
click on categories.

142
00:10:30.030 --> 00:10:35.100
Now, you might have all sorts of categories, but in my case, I'm going to click on the awards category

143
00:10:35.100 --> 00:10:38.760
here and here we see a field named.

144
00:10:38.870 --> 00:10:50.000
Description, so I can say we love to blog about our awards and save that or update it, and there we

145
00:10:50.000 --> 00:10:50.350
see it.

146
00:10:50.630 --> 00:10:54.290
Now, that's going to bring this lesson on archives to a close.

147
00:10:54.710 --> 00:10:58.630
But bigger picture, we are now more or less done with our blog section.

148
00:10:58.880 --> 00:11:02.260
Now we just need to integrate our blog with our custom home page.

149
00:11:02.570 --> 00:11:08.870
So, for example, if I click this logo in the top left header to go back to the home page in this beige

150
00:11:08.870 --> 00:11:15.180
column here, you'll notice that we need to dynamically pull in the two most recent blog posts.

151
00:11:15.440 --> 00:11:21.440
Now, these examples that we see here, we were voted best school and professors in the national spotlight.

152
00:11:21.710 --> 00:11:23.440
Those are not real blog posts.

153
00:11:23.480 --> 00:11:26.330
That's just hard coded fake HTML.

154
00:11:26.660 --> 00:11:33.320
In order to actually pull in the real dynamic two most recent blog posts, we are going to need to learn

155
00:11:33.320 --> 00:11:36.200
about something called custom queries.

156
00:11:36.470 --> 00:11:39.640
And that's exactly what we're going to cover in our next lesson.

157
00:11:39.950 --> 00:11:46.430
I know that personally for me, when I first learned about custom queries, it was an aha moment for

158
00:11:46.430 --> 00:11:48.290
me in terms of learning WordPress.

159
00:11:48.590 --> 00:11:51.530
Once you understand custom queries, you'll go from.

160
00:11:51.770 --> 00:11:55.130
Hmm, I kind of understand how WordPress works, too.

161
00:11:55.370 --> 00:11:58.580
I can make WordPress do whatever I need it to do.

162
00:11:58.880 --> 00:12:00.860
It's a really fun leap to make.

163
00:12:00.860 --> 00:12:04.420
And your understanding and I'm going to do everything I can to get you there.

164
00:12:04.700 --> 00:12:08.510
Let's keep things rolling and I will see you in the next lesson.
