1
00:00:02,310 --> 00:00:03,120
Hello, everyone.

2
00:00:03,570 --> 00:00:07,200
In this lesson, we're going to bring our generic heading block to life.

3
00:00:07,710 --> 00:00:09,120
Let's jump into the action.

4
00:00:09,600 --> 00:00:11,760
So here I am in the template editor.

5
00:00:11,970 --> 00:00:13,920
Overall, this is our banner block.

6
00:00:13,920 --> 00:00:17,700
But in this lesson, we're interested in this heading block.

7
00:00:18,060 --> 00:00:21,030
Currently, it's hardcoded to just say the word hello.

8
00:00:21,360 --> 00:00:24,900
We want to make it so that you can actually click on it and edit it.

9
00:00:25,440 --> 00:00:32,130
Also beyond that, we're going to set things up so that this hover toolbar here has options such as

10
00:00:32,130 --> 00:00:36,900
small, medium and large that you can use to control the size of the heading.

11
00:00:37,470 --> 00:00:38,340
Let's get started.

12
00:00:38,700 --> 00:00:45,840
So in verse code inside your our blocks folder jumping to generic heading JS.

13
00:00:47,160 --> 00:00:53,460
Before we worry about actually building the edit interface, let's first set up our data or our attributes

14
00:00:53,460 --> 00:00:55,080
that will need, right?

15
00:00:55,080 --> 00:01:00,750
So we know we need to keep track of the text that you type into the heading and we need to keep track

16
00:01:00,750 --> 00:01:04,060
of what size you want it to be, small, medium or large.

17
00:01:04,590 --> 00:01:05,340
So let's do this.

18
00:01:05,640 --> 00:01:10,470
When we register our block type, maybe right after the title property, let's have a property named

19
00:01:10,890 --> 00:01:13,620
attributes colon curly brackets.

20
00:01:13,620 --> 00:01:19,470
Be sure to include a comma here in the curly brackets we get to just start making up names.

21
00:01:19,920 --> 00:01:27,300
So let's make up a name of text for one attribute colon, curly brackets, comma, let's make up another

22
00:01:27,300 --> 00:01:30,690
one called size colon curly brackets.

23
00:01:31,080 --> 00:01:34,140
For both of these, the data type will be string, right?

24
00:01:34,140 --> 00:01:36,090
It's not a number, it's not a boolean.

25
00:01:36,090 --> 00:01:37,470
It's just a string of text.

26
00:01:37,680 --> 00:01:44,310
So type colon string, let's do the same thing for size type colon string.

27
00:01:44,850 --> 00:01:48,270
And let's say that for size, the default value should be large.

28
00:01:48,270 --> 00:01:52,050
So comma default, colon large.

29
00:01:52,500 --> 00:01:52,860
Cool.

30
00:01:53,250 --> 00:01:54,960
So this is the shape of our data.

31
00:01:55,290 --> 00:01:58,290
Now let's actually start building the edit interface.

32
00:01:58,860 --> 00:02:04,980
We're actually going to use a component that WordPress provides to us called Rich Text, and it's a

33
00:02:04,980 --> 00:02:05,640
great component.

34
00:02:05,640 --> 00:02:07,050
It does a lot of the heavy lifting.

35
00:02:07,410 --> 00:02:11,940
So up at the very, very top we just say import curly brackets.

36
00:02:12,240 --> 00:02:13,290
What do we want to import?

37
00:02:13,650 --> 00:02:22,110
Well, something called the rich text and that's uppercase are in T and we import it from quotes at

38
00:02:22,110 --> 00:02:26,610
symbol WordPress slash block dash editor.

39
00:02:27,240 --> 00:02:27,630
Cool.

40
00:02:27,870 --> 00:02:30,150
Now how do we actually use rich text?

41
00:02:30,780 --> 00:02:32,970
Well, we just include it in our JS acts.

42
00:02:33,270 --> 00:02:38,100
So down in our edit component, instead of returning a div, let's get rid of the div.

43
00:02:38,100 --> 00:02:43,800
Let's return parentheses so we can have multiple lines of JS acts in the parentheses.

44
00:02:43,800 --> 00:02:45,510
Let's start with a react fragment.

45
00:02:45,780 --> 00:02:48,660
So just an empty opening tag and empty closing tag.

46
00:02:49,200 --> 00:02:50,400
In the next 10 seconds.

47
00:02:50,400 --> 00:02:53,190
It might look like we don't need the React fragment.

48
00:02:53,370 --> 00:03:00,210
For example, inside the React fragment, we just want to include the self-closing rich text components

49
00:03:00,210 --> 00:03:00,900
like this.

50
00:03:01,500 --> 00:03:01,770
Right?

51
00:03:01,770 --> 00:03:04,800
And you might be wondering, why don't we just include the rich text directly?

52
00:03:04,800 --> 00:03:06,180
Why do we have the React fragment?

53
00:03:06,540 --> 00:03:09,850
Well, you can only have one top level element in Gsx.

54
00:03:10,200 --> 00:03:16,020
And later in this video, when we add the small, medium and large clickable buttons, well, they can

55
00:03:16,020 --> 00:03:19,320
live inside the React fragment right alongside rich text.

56
00:03:19,320 --> 00:03:21,750
But for now this is all we need anyways.

57
00:03:22,050 --> 00:03:24,780
On Rich text, we start giving it props.

58
00:03:25,380 --> 00:03:27,180
So first of all, let's give it a value.

59
00:03:27,180 --> 00:03:32,430
So value equals curly brackets and we would just pull in our text attribute.

60
00:03:32,850 --> 00:03:36,660
Now in order to access that, we would look inside of props.

61
00:03:36,660 --> 00:03:41,280
However, we can't access props unless we pass it in as a parameter here.

62
00:03:41,730 --> 00:03:44,910
So in these parentheses be sure to include props.

63
00:03:45,420 --> 00:03:51,030
So now when WordPress calls this function for us, it's going to pass in our attributes through the

64
00:03:51,030 --> 00:03:52,350
overall props object.

65
00:03:52,350 --> 00:03:58,560
So now we can just say value equals props, dot attributes, dot text.

66
00:03:59,280 --> 00:04:00,840
Okay, let's give rich text.

67
00:04:00,840 --> 00:04:05,280
Another prop of on change equals curly brackets.

68
00:04:05,670 --> 00:04:10,380
And now we just provide a function that will update the text value.

69
00:04:10,740 --> 00:04:11,910
And it's going to run.

70
00:04:11,910 --> 00:04:17,400
Every time someone types in a new character or deletes a character, we can either type out an anonymous

71
00:04:17,400 --> 00:04:22,950
function right here in these curly brackets, or we can just point towards a function totally personal

72
00:04:22,950 --> 00:04:28,140
preference, but just to make the code easier to look at and immediately understand, why don't we point

73
00:04:28,140 --> 00:04:30,450
towards a function so we can make up a name?

74
00:04:30,450 --> 00:04:34,770
Let's call it maybe handle text change.

75
00:04:35,190 --> 00:04:37,020
Now let's go create a function with this name.

76
00:04:37,020 --> 00:04:44,820
So within our edit component function, right above the return line, we can say function handle, text,

77
00:04:44,820 --> 00:04:46,890
change, parentheses, curly brackets.

78
00:04:47,250 --> 00:04:55,440
We want to include a parameter just name an x and x is going to be whatever the current value is in

79
00:04:55,440 --> 00:04:56,670
the rich text field.

80
00:04:57,330 --> 00:04:59,460
So whatever the user is currently typed into it.

81
00:04:59,910 --> 00:05:01,470
So within the body of our function.

82
00:05:01,510 --> 00:05:08,470
We would just want to say props, dot set, attributes, parentheses, give it a curly bracket for an

83
00:05:08,470 --> 00:05:09,160
object.

84
00:05:09,490 --> 00:05:13,870
And now in this object we are free to modify the attributes.

85
00:05:14,320 --> 00:05:16,390
So we just want to change the text properties.

86
00:05:16,390 --> 00:05:19,330
So text colon should now be x.

87
00:05:19,930 --> 00:05:20,290
Cool.

88
00:05:20,290 --> 00:05:22,660
Let's go ahead and save this and test it out.

89
00:05:23,050 --> 00:05:28,840
You do need to have your in the command line, the NPM run start task up and running.

90
00:05:29,650 --> 00:05:34,780
But with that running, if we go back into the browser and refresh the template editor screen.

91
00:05:37,380 --> 00:05:38,730
It might look like there's nothing there.

92
00:05:38,730 --> 00:05:44,430
But if you hover over right about here, you can see there's that one instance of our generic heading

93
00:05:44,430 --> 00:05:45,840
block that already exists.

94
00:05:46,080 --> 00:05:49,410
And we can say, you know, the sky is blue.

95
00:05:50,040 --> 00:05:54,690
And then if we want to create a second instance of that same block type, if I just click off this,

96
00:05:55,260 --> 00:05:58,680
notice the plus symbol right here so we can just add another one.

97
00:05:59,250 --> 00:06:01,000
Grass is green.

98
00:06:02,140 --> 00:06:05,280
We go ahead and save this template with these two instances of our block.

99
00:06:05,520 --> 00:06:05,910
Cool.

100
00:06:06,090 --> 00:06:11,100
So it's working and you can prove that it's working by just refreshing to see that.

101
00:06:11,100 --> 00:06:15,540
Yes, it's loading and saving those values into and from the database.

102
00:06:15,540 --> 00:06:15,990
Cool.

103
00:06:16,380 --> 00:06:19,360
Now let's work on the visual design or the CC.

104
00:06:19,410 --> 00:06:19,650
Right.

105
00:06:19,650 --> 00:06:23,610
These headlines should use a certain font and should be a certain size.

106
00:06:24,450 --> 00:06:29,880
So really to make that happen back on rich text, we're just going to give it a few more props.

107
00:06:30,210 --> 00:06:33,570
Number one, let's say tag name should equal.

108
00:06:34,380 --> 00:06:40,080
Let's just make them a heading level one element and then let's say class name as a prop equals.

109
00:06:40,740 --> 00:06:46,800
Now instead of just giving a string of text with quotes, let's say class name equals curly brackets,

110
00:06:47,400 --> 00:06:48,930
because we want this to be dynamic.

111
00:06:48,930 --> 00:06:53,850
We want the class name to change depending on whether you want it to be small, medium or large.

112
00:06:54,210 --> 00:07:00,300
So let's do this in the curly brackets include a back tick or a pair of back ticks and it would just

113
00:07:00,300 --> 00:07:02,550
be headline, right?

114
00:07:02,550 --> 00:07:03,150
That's the class.

115
00:07:03,150 --> 00:07:04,080
We want space.

116
00:07:04,080 --> 00:07:10,380
We want another class name of headline, dash, dash large only.

117
00:07:10,380 --> 00:07:12,570
We don't want a hard code this too large.

118
00:07:12,810 --> 00:07:14,790
So let's just hollow out the large part.

119
00:07:15,830 --> 00:07:21,470
So headlined Dash, Dash, and then it would be dollar sign curly brackets to do something dynamic within

120
00:07:21,470 --> 00:07:22,250
the back decks.

121
00:07:22,610 --> 00:07:27,260
And now this would just be props, dot attributes, dot size.

122
00:07:28,630 --> 00:07:28,930
Right.

123
00:07:29,080 --> 00:07:30,850
So it'll be small, medium or large.

124
00:07:31,450 --> 00:07:33,340
Let's give this a save and test it out.

125
00:07:33,400 --> 00:07:34,630
So if we refresh.

126
00:07:37,830 --> 00:07:38,190
Cool.

127
00:07:38,200 --> 00:07:43,110
Now, in a minute or two we can start working on the feature so that when you click on one, this toolbar

128
00:07:43,110 --> 00:07:46,350
would include icons that say small, medium or large.

129
00:07:46,770 --> 00:07:50,370
However, before we get to that, let's adjust this toolbar a bit.

130
00:07:51,150 --> 00:07:53,820
What if we do want to allow the bold in italic?

131
00:07:54,120 --> 00:07:59,820
But what if we don't want to allow a link or this other more of tools option?

132
00:08:00,390 --> 00:08:06,720
Or what if you didn't want to include the bold and italic icons essentially on our rich text component?

133
00:08:06,930 --> 00:08:13,770
You just give it a prop of allowed formats equals curly brackets.

134
00:08:13,890 --> 00:08:17,430
Now, if you didn't want anything, you can just set it to an empty array.

135
00:08:17,760 --> 00:08:18,770
So let's test that out.

136
00:08:18,780 --> 00:08:20,700
Empty array if we refresh.

137
00:08:22,400 --> 00:08:25,370
Now when you click on one, all of those options are gone.

138
00:08:25,400 --> 00:08:29,660
There's no bold, there's no italic, there's no length, there's no button to see more options.

139
00:08:29,960 --> 00:08:31,730
What if you only wanted the bold?

140
00:08:32,690 --> 00:08:37,190
Well, you can just say allowed formats, quotes, core slash bold.

141
00:08:39,020 --> 00:08:40,730
Give that a save refresh.

142
00:08:42,440 --> 00:08:43,220
You can imagine that.

143
00:08:43,220 --> 00:08:45,710
Now you click on that and you just have the bold option.

144
00:08:46,220 --> 00:08:48,140
So what if I want the word sky to be bold?

145
00:08:48,140 --> 00:08:48,890
You select it.

146
00:08:49,100 --> 00:08:49,550
Cool.

147
00:08:49,850 --> 00:08:53,150
This is why the rich text component is so powerful.

148
00:08:53,570 --> 00:08:55,990
We didn't have to program this from scratch.

149
00:08:56,000 --> 00:08:58,520
It's just instantly available to us.

150
00:08:59,300 --> 00:09:02,530
As you might have guessed, if you wanted the italic option, it would just be comma.

151
00:09:02,540 --> 00:09:05,900
Add an array item of core slash italic.

152
00:09:06,560 --> 00:09:06,980
Cool.

153
00:09:07,460 --> 00:09:08,710
At this point, let's move forward.

154
00:09:08,720 --> 00:09:09,530
Let me refresh.

155
00:09:10,370 --> 00:09:11,550
There's the italic option.

156
00:09:11,570 --> 00:09:12,470
Now let's move on.

157
00:09:12,710 --> 00:09:18,980
Let's add buttons to this toolbar that say small, medium and large so that you can control the size

158
00:09:18,980 --> 00:09:20,940
of your heading to set that up.

159
00:09:20,960 --> 00:09:24,350
We really just need to import a few more things from WordPress.

160
00:09:24,950 --> 00:09:30,770
First of all, when we're importing things from the block editor line, let's add a comma after rich

161
00:09:30,770 --> 00:09:36,050
text and let's also import something called block controls.

162
00:09:36,890 --> 00:09:42,050
Then let's create a new line of code right above this and just say import curly brackets and we want

163
00:09:42,050 --> 00:09:44,310
to import something called toolbar.

164
00:09:44,840 --> 00:09:46,430
Group comma.

165
00:09:46,430 --> 00:09:52,370
We also want toolbar button and we import those from quotes.

166
00:09:52,940 --> 00:09:55,970
At symbol WordPress slash components.

167
00:09:56,630 --> 00:10:01,280
Now let me show you how we leverage these things back down in our edit component.

168
00:10:01,940 --> 00:10:06,080
Well, when we're returning JSF X now, you'll see why we wanted the React fragment.

169
00:10:06,680 --> 00:10:08,540
So inside the fragment.

170
00:10:08,540 --> 00:10:18,350
So a sibling to the rich text, we would just add block controls, not self-closing, but actual opening

171
00:10:18,350 --> 00:10:19,460
and closing tags.

172
00:10:19,790 --> 00:10:24,080
In between there we would drop down and let's add a toolbar group.

173
00:10:24,350 --> 00:10:26,810
So toolbar group.

174
00:10:27,800 --> 00:10:31,790
Inside there we start adding toolbar buttons.

175
00:10:31,970 --> 00:10:34,820
So opening toolbar button.

176
00:10:36,260 --> 00:10:39,830
So we're going to have three of these large, medium and small.

177
00:10:40,490 --> 00:10:41,540
Let's have large first.

178
00:10:41,540 --> 00:10:44,030
So the text would just be large, right?

179
00:10:44,030 --> 00:10:46,040
That's the icon or button that you click on.

180
00:10:46,460 --> 00:10:49,490
Now on the opening tag, we're going to give it to props.

181
00:10:49,700 --> 00:10:57,260
So one is called is pressed equals curly brackets and the other prop is going to be called on click

182
00:10:57,380 --> 00:10:58,670
equals curly brackets.

183
00:10:59,330 --> 00:11:01,760
Let's start with on click because it's more intuitive.

184
00:11:01,970 --> 00:11:04,700
So this is just what you want to happen when you click on the button.

185
00:11:05,180 --> 00:11:09,350
As you might have guessed, we would just want to manipulate our size attribute.

186
00:11:09,770 --> 00:11:16,310
So in the long curly brackets, let's just write an anonymous function right here in the curly brackets.

187
00:11:16,730 --> 00:11:19,340
So for an arrow function, we don't need any parentheses.

188
00:11:19,340 --> 00:11:23,030
So empty parentheses, arrow symbol don't need curly brackets.

189
00:11:23,030 --> 00:11:24,330
Just props.

190
00:11:24,350 --> 00:11:29,450
Dot set attributes, parentheses to call it, give it an object.

191
00:11:29,630 --> 00:11:32,060
The property we want to change is named size.

192
00:11:32,210 --> 00:11:34,700
So set it to equal large.

193
00:11:35,420 --> 00:11:35,780
Cool.

194
00:11:35,990 --> 00:11:38,330
Now let's talk about this is pressed prop.

195
00:11:38,900 --> 00:11:45,680
You give this value of true or false and that decides whether the buttons should look selected or highlighted

196
00:11:45,680 --> 00:11:46,730
or pressed.

197
00:11:47,270 --> 00:11:52,580
So in these curly brackets, let's just write a little bit of code that checks for the equality of the

198
00:11:52,580 --> 00:11:53,270
size.

199
00:11:53,270 --> 00:11:55,430
And is it equaling the word large?

200
00:11:55,970 --> 00:11:56,210
Right.

201
00:11:56,220 --> 00:12:03,590
If it is, we want this button to look pressed so it would just be prop stock attributes, dot size,

202
00:12:03,980 --> 00:12:05,570
double or triple equal sign.

203
00:12:06,200 --> 00:12:07,940
That's a topic in debate for another day.

204
00:12:07,940 --> 00:12:11,330
But if that equals the word large, cool.

205
00:12:11,540 --> 00:12:15,110
Now let's just duplicate this for medium and small.

206
00:12:15,440 --> 00:12:22,370
So I'm going to select this entire toolbar button line and just duplicate it, and then right below

207
00:12:22,370 --> 00:12:24,110
that, duplicate it one more times.

208
00:12:24,130 --> 00:12:25,250
Now there's three of them.

209
00:12:25,550 --> 00:12:27,380
And just change these from medium and small.

210
00:12:27,380 --> 00:12:30,230
So the text you click on should be medium.

211
00:12:32,160 --> 00:12:38,630
The conditional we're checking for this would be medium and the size that we're setting would be medium.

212
00:12:38,630 --> 00:12:40,260
We'll do the same thing for the small button.

213
00:12:40,740 --> 00:12:43,290
So the thing we're checking for is small.

214
00:12:44,610 --> 00:12:49,950
The value we want to sell it to is small and the length that you click on would read small.

215
00:12:50,580 --> 00:12:52,380
Let's give this a save and test it out.

216
00:12:52,860 --> 00:12:55,530
So back in the browser if we refresh.

217
00:12:57,190 --> 00:13:00,700
We click on the first generic heading, let's set it to large cool.

218
00:13:00,700 --> 00:13:05,740
But then if we click on the second one, so it's a medium or small perfect.

219
00:13:06,610 --> 00:13:12,100
At this point, the edit functionality of our block is complete, but we do need to still set up the

220
00:13:12,100 --> 00:13:13,930
save functionality.

221
00:13:14,500 --> 00:13:15,220
Let me explain.

222
00:13:15,220 --> 00:13:22,690
So yes, if you click save and then refresh, yes, we're saving loading those attributes, but we're

223
00:13:22,690 --> 00:13:24,610
not doing anything useful with the output.

224
00:13:24,910 --> 00:13:26,500
HTML, Right.

225
00:13:26,500 --> 00:13:32,470
If you look at our code and if you scroll down to our save component, this is all that's really going

226
00:13:32,470 --> 00:13:33,400
to show up, right?

227
00:13:33,400 --> 00:13:37,420
If you go to the front end of your website and refresh, that's all you see, right?

228
00:13:37,420 --> 00:13:38,650
This is our heading block.

229
00:13:38,860 --> 00:13:45,820
So what we need to do now is write a bit of gsx that gives us the desired h html here.

230
00:13:46,510 --> 00:13:47,500
So here's what I would do.

231
00:13:47,500 --> 00:13:54,010
First of all, in the save component in these parentheses, let's be sure to include props then in terms

232
00:13:54,010 --> 00:13:55,300
of what we want to return.

233
00:13:55,540 --> 00:14:00,220
We don't need all of the gsx like we had in our edit component, right?

234
00:14:00,400 --> 00:14:05,410
In the save component, we don't need the block controls in the toolbar and the small, medium, large

235
00:14:05,410 --> 00:14:05,920
buttons.

236
00:14:06,190 --> 00:14:12,190
We literally just want the either H1, H2 or H3 element with the text.

237
00:14:12,880 --> 00:14:18,610
So in this case we can simply just return rich text self-closing.

238
00:14:19,150 --> 00:14:25,840
However, we do want to say rich text dot uppercase content because this doesn't need to be editable

239
00:14:25,840 --> 00:14:26,560
in any way.

240
00:14:26,770 --> 00:14:30,700
This now is about outputting the content, the string of text.

241
00:14:31,270 --> 00:14:31,600
Cool.

242
00:14:31,810 --> 00:14:33,430
So now we just give it a couple of props.

243
00:14:33,970 --> 00:14:36,130
So value equals curly brackets.

244
00:14:36,130 --> 00:14:39,520
This would just be props dot attribute text.

245
00:14:40,240 --> 00:14:43,240
We'd also want to give it a class name to save a bit of typing.

246
00:14:43,240 --> 00:14:46,690
I would actually just borrow what we already wrote up above.

247
00:14:47,830 --> 00:14:52,120
Right on the other instance of rich text, we wrote class name equals, you know, and then the curly

248
00:14:52,120 --> 00:14:54,970
brackets with the template literal.

249
00:14:55,150 --> 00:14:58,210
I would just copy that and use that directly here.

250
00:14:58,210 --> 00:14:58,900
So paste.

251
00:14:59,590 --> 00:15:01,450
So now we've got rich text content.

252
00:15:01,460 --> 00:15:03,040
We've given it a proper value.

253
00:15:03,040 --> 00:15:04,720
We've given it a pop of class name.

254
00:15:05,140 --> 00:15:07,180
Now let's give it a Prop two right here.

255
00:15:07,180 --> 00:15:10,930
Let's say tag name equals quotes.

256
00:15:10,930 --> 00:15:14,020
And this is where you would say either H1, H2 or H3.

257
00:15:14,530 --> 00:15:18,970
Now, we would want that to be dynamic depending on whether you chose large, medium or small.

258
00:15:18,970 --> 00:15:19,240
Right.

259
00:15:19,240 --> 00:15:20,620
Large should be H1.

260
00:15:20,860 --> 00:15:22,030
Medium should be H2.

261
00:15:22,030 --> 00:15:23,320
Small should be H3.

262
00:15:24,070 --> 00:15:27,580
There are a hundred different ways you could set up the JavaScript logic for that.

263
00:15:27,850 --> 00:15:32,260
But what I'm going to do, instead of setting this to equal quotes, I'm going to set it to equal curly

264
00:15:32,260 --> 00:15:32,980
brackets.

265
00:15:33,490 --> 00:15:35,260
And then right above this line.

266
00:15:36,070 --> 00:15:40,660
So still in the body of our function, but just above the return line, I would just create a function

267
00:15:40,870 --> 00:15:41,680
and name it.

268
00:15:42,460 --> 00:15:46,570
The name doesn't matter, but let's go with create tag name.

269
00:15:47,170 --> 00:15:48,010
Parentheses.

270
00:15:48,010 --> 00:15:48,970
Curly brackets.

271
00:15:49,300 --> 00:15:51,100
I would use a switch.

272
00:15:51,790 --> 00:15:53,620
So switch parentheses.

273
00:15:53,620 --> 00:15:54,310
Curly brackets.

274
00:15:54,310 --> 00:15:58,270
The value that I want to switch based on would be props.

275
00:15:58,660 --> 00:15:59,920
Dot attributes.

276
00:16:00,070 --> 00:16:01,360
Dot size.

277
00:16:02,080 --> 00:16:02,860
In the switch.

278
00:16:02,860 --> 00:16:10,480
I would just say, you know, for the first case in the case that it is large colon, not semicolon

279
00:16:10,480 --> 00:16:17,380
colon, then you would just return a value of each one and then just do the same thing for medium and

280
00:16:17,380 --> 00:16:17,740
small.

281
00:16:17,740 --> 00:16:23,830
So case when it's medium colon return H2.

282
00:16:24,970 --> 00:16:30,010
Finally, case where it's small colon return h3.

283
00:16:30,670 --> 00:16:31,000
Okay.

284
00:16:31,000 --> 00:16:33,640
So whatever this function returns is what I want to use here.

285
00:16:33,640 --> 00:16:36,100
So tag name equals in these curly brackets.

286
00:16:36,100 --> 00:16:42,910
Just call create tag name parentheses to actually call it right then and there was give this a save

287
00:16:43,120 --> 00:16:43,990
and test it out.

288
00:16:45,250 --> 00:16:49,180
So remember just a moment ago, this was all we were seeing on our front end.

289
00:16:49,720 --> 00:16:52,320
Now you can sit here and refresh this a billion times.

290
00:16:52,350 --> 00:16:53,920
Nothing is ever going to change.

291
00:16:54,130 --> 00:16:59,110
And that's because at the moment our block is still powered by JavaScript and it doesn't have any sort

292
00:16:59,110 --> 00:17:01,060
of AP component to it.

293
00:17:01,420 --> 00:17:08,170
So in order for this to actually change, someone needs to manually go into the edit screen.

294
00:17:08,710 --> 00:17:09,490
Refresh.

295
00:17:09,490 --> 00:17:12,070
We're probably going to see a conflict message.

296
00:17:13,150 --> 00:17:13,450
Yep.

297
00:17:13,810 --> 00:17:16,300
So you can just click attempt block recovery.

298
00:17:16,690 --> 00:17:22,060
Basically, any time the saved output of a block changes, you can expect that to happen.

299
00:17:22,210 --> 00:17:24,520
It doesn't mean there's anything wrong with your code.

300
00:17:24,730 --> 00:17:27,430
That's just the way the WordPress block editor works.

301
00:17:27,880 --> 00:17:33,370
Don't worry, we'll learn more about that issue in an upcoming lesson where we do implement a bit of

302
00:17:33,520 --> 00:17:36,910
server side IP to combat that exact issue.

303
00:17:37,210 --> 00:17:41,500
But in certain websites, for certain cases, it's not a problem or an issue in the first place.

304
00:17:41,800 --> 00:17:43,990
Anyways, let's stick to the task at hand.

305
00:17:43,990 --> 00:17:48,190
So we're just trying to see if this saved output actually works now.

306
00:17:48,730 --> 00:17:55,990
So we've got one large, one medium if we save it using our newest code and now we go refresh, right?

307
00:17:55,990 --> 00:17:58,120
So those newest values get pulled from the database.

308
00:17:58,480 --> 00:17:59,380
Perfect.

309
00:17:59,920 --> 00:18:03,250
And at this point, our generic heading block is complete.

310
00:18:03,640 --> 00:18:04,870
So where do we go from here?

311
00:18:05,170 --> 00:18:09,100
Well, instead of jumping directly into the button block.

312
00:18:09,550 --> 00:18:09,790
Right.

313
00:18:09,790 --> 00:18:14,110
That you would probably add right about here where you can type in the text, say if you want the button

314
00:18:14,110 --> 00:18:17,260
to be orange or blue where you want it to link towards.

315
00:18:17,440 --> 00:18:23,890
Before we jump directly into that, let's take a break and talk about a big picture block theme concept.

316
00:18:24,400 --> 00:18:31,360
So back in the editor screen, notice how our banner block doesn't take up the full available horizontal

317
00:18:31,360 --> 00:18:38,530
space, even though on the front end it does well that, as well as countless other block theme settings

318
00:18:38,770 --> 00:18:42,320
are all defined in a file named theme dot.

319
00:18:42,340 --> 00:18:46,570
Jason And that's exactly what we're going to learn about in our next lesson.

320
00:18:46,960 --> 00:18:49,240
Let's keep things rolling and I'll see you then.
