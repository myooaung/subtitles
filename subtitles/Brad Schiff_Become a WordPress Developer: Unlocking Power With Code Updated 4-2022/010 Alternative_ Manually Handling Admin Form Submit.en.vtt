WEBVTT
1
00:00:02.190 --> 00:00:09.300
Hello, everyone, in this lesson, we're going to learn how to manually handle an admin form being

2
00:00:09.300 --> 00:00:09.970
submitted.

3
00:00:10.470 --> 00:00:15.360
Let's jump right into the action and talk about what our first step should be.

4
00:00:15.840 --> 00:00:19.200
So if I navigate to our new word filter, plug in.

5
00:00:20.400 --> 00:00:26.850
The content on this page is being powered by a function that we created, however, we need a way to

6
00:00:26.850 --> 00:00:31.440
run a bit of different code when this form actually gets submitted.

7
00:00:31.770 --> 00:00:37.530
At the moment, if you try to submit the form, you can see that literally nothing happens.

8
00:00:38.040 --> 00:00:44.670
So I think our first step or goal should be to output a little message here that says thank you for

9
00:00:44.670 --> 00:00:49.320
submitting the form whenever a user clicks the save changes button.

10
00:00:49.680 --> 00:00:54.030
Now, there are several ways to make this happen, but let me show you what I would do.

11
00:00:54.420 --> 00:01:00.540
Let's jump into our code and let's find the function that's outputting the HTML for that page.

12
00:01:00.690 --> 00:01:08.940
So I named my function word filter page and inside our form element, I want you to create a new input,

13
00:01:09.240 --> 00:01:10.530
a hidden input.

14
00:01:10.680 --> 00:01:19.030
So let's say input and then hit tab change the type to hidden and then we can give it any name we want.

15
00:01:19.050 --> 00:01:20.160
So just make up a name.

16
00:01:20.160 --> 00:01:23.350
But if you want to be on the same page as me, I'll name it.

17
00:01:23.670 --> 00:01:29.160
How about just submitted and let's give it a value of true.

18
00:01:29.910 --> 00:01:34.110
OK, now let me show you why we just added this and how we're going to leverage it.

19
00:01:34.620 --> 00:01:37.080
How about right below the heading level one?

20
00:01:37.410 --> 00:01:39.780
Let's output a bit of conditional logic.

21
00:01:39.780 --> 00:01:47.070
So let's going to be we can close it right here inside, let's say, if and then for the condition,

22
00:01:47.070 --> 00:01:53.640
type this in with me, dollar sign, underscore post and then square brackets.

23
00:01:54.390 --> 00:01:56.270
So this isn't WordPress specific.

24
00:01:56.280 --> 00:01:58.110
This is just code.

25
00:01:58.530 --> 00:02:03.990
This lets us look at whatever the browser just posted to the server.

26
00:02:04.410 --> 00:02:10.410
So it's an array and inside the square brackets, we want to look for the item in the array called well

27
00:02:10.410 --> 00:02:12.240
we named it just submitted.

28
00:02:12.240 --> 00:02:18.060
So it was just submitted still in the parentheses, but outside the square brackets.

29
00:02:18.060 --> 00:02:20.900
Just say if that equals true.

30
00:02:21.510 --> 00:02:24.700
Now, next, I think this is where things will start to make sense.

31
00:02:24.900 --> 00:02:30.660
So if this is true, we actually don't need curly brackets if you're only going to have one single statement.

32
00:02:30.970 --> 00:02:36.980
So right here we can just say, let's echo out a bit of text that says thank you.

33
00:02:37.980 --> 00:02:38.200
Right.

34
00:02:38.230 --> 00:02:41.610
Just for a quick test, let's save this and test it out.

35
00:02:41.640 --> 00:02:44.460
So if you refresh, we don't see.

36
00:02:44.460 --> 00:02:45.210
Thank you.

37
00:02:45.420 --> 00:02:50.430
But as soon as we try to save or submit the form, we do indeed see.

38
00:02:50.430 --> 00:02:51.030
Thank you.

39
00:02:51.540 --> 00:02:54.010
But as soon as we refresh, it goes away.

40
00:02:54.510 --> 00:03:02.040
So the idea here is we've now created this conditional logic that will only be true if you just submitted

41
00:03:02.040 --> 00:03:02.730
the page.

42
00:03:03.240 --> 00:03:09.810
And perhaps I should have mentioned this is all made possible because our form is simply posting to

43
00:03:09.810 --> 00:03:10.650
itself.

44
00:03:11.010 --> 00:03:11.300
Right.

45
00:03:11.310 --> 00:03:15.330
We didn't even give it an attribute called action with a different U.

46
00:03:15.330 --> 00:03:15.970
RL.

47
00:03:16.410 --> 00:03:21.120
So without that attribute, by default, a form just posts to the same U.

48
00:03:21.120 --> 00:03:27.170
RL that you're already on, which means this exact same file is just going to run again.

49
00:03:27.450 --> 00:03:31.740
So then we're able to look in the servers post object or postering.

50
00:03:32.280 --> 00:03:37.350
OK, now moving on, we don't actually just want to output the words thank you.

51
00:03:37.650 --> 00:03:42.390
Instead, we want to process whatever the user typed into this field.

52
00:03:42.990 --> 00:03:45.450
So instead of Echo, thank you.

53
00:03:45.450 --> 00:03:51.990
Let's get rid of this here and let's create an entirely separate method to handle all of the details

54
00:03:51.990 --> 00:03:59.190
and logic so we can just say dollar sign this dash greater than to look inside it.

55
00:03:59.850 --> 00:04:07.440
And then let's just make up a method name that will create how about Handal form parentheses to actually

56
00:04:07.440 --> 00:04:07.890
call it.

57
00:04:08.010 --> 00:04:14.400
And again, instead of using the array callable syntax, we can use this syntax where we look inside

58
00:04:14.400 --> 00:04:21.240
our class or this instance of the object because we do want to call and execute this method right here,

59
00:04:21.270 --> 00:04:22.080
right now.

60
00:04:22.910 --> 00:04:26.400
OK, let's go create this method names of right above this function.

61
00:04:26.400 --> 00:04:30.450
We can just say function, handle, form.

62
00:04:31.680 --> 00:04:33.960
Now, inside this function, let's do this.

63
00:04:34.290 --> 00:04:40.500
Let's first pretend that there are no malicious people in the world so we can quickly save and load

64
00:04:40.500 --> 00:04:42.210
data to and from our database.

65
00:04:42.660 --> 00:04:48.200
Then once we see that it's up and running, we can go back and add in our security checks.

66
00:04:48.570 --> 00:04:51.210
So just to get started, let's do this inside the function.

67
00:04:51.480 --> 00:04:55.380
We can just use the WordPress function named update option.

68
00:04:55.740 --> 00:05:03.300
Remember, our goal is to save whatever they entered here into the WordPress options table in the database.

69
00:05:03.870 --> 00:05:08.100
So that's what this update option will do with a semicolon here.

70
00:05:08.640 --> 00:05:10.320
So we just give this two arguments.

71
00:05:10.320 --> 00:05:15.900
A comma, B, the first argument is the name of the option in the database that we want to store this

72
00:05:15.900 --> 00:05:18.750
value as so we can make up a name.

73
00:05:18.750 --> 00:05:19.710
Why don't we just call it.

74
00:05:20.330 --> 00:05:28.280
Plug in words to filter, so that's the option name, the second argument is the value that we want

75
00:05:28.280 --> 00:05:29.590
to store in the database.

76
00:05:30.080 --> 00:05:33.650
So we just want to take whatever the user entered into that text field.

77
00:05:34.160 --> 00:05:40.880
So to access that, we can just say dollar sign, underscore post, look inside the array for.

78
00:05:41.750 --> 00:05:45.440
And remember, we named that text area the same thing.

79
00:05:45.770 --> 00:05:50.900
We named it plug in words to filter so you could even just copy and paste that here.

80
00:05:51.770 --> 00:05:57.650
OK, now after this line, but still within the function, let's output a bit of HTML that tells the

81
00:05:57.650 --> 00:05:59.560
user that we've saved their option.

82
00:06:00.350 --> 00:06:07.550
So I would actually just drop out of at the end of this line and then you could enter back into PHP

83
00:06:07.550 --> 00:06:09.350
before our function closes out.

84
00:06:09.350 --> 00:06:13.440
But that means right here where the cursor is now, we can write HTML.

85
00:06:13.760 --> 00:06:17.280
So let's say div dot updated hit tab.

86
00:06:17.630 --> 00:06:25.130
This is a class that WordPress offers to us which will create a bit of green success styling inside

87
00:06:25.130 --> 00:06:25.820
this div.

88
00:06:25.820 --> 00:06:35.580
Let's have a paragraph that says your filtered words were saved with save our code and test it out.

89
00:06:35.780 --> 00:06:40.880
So if we refresh, actually you don't even need to refresh because this page is going to reload as soon

90
00:06:40.880 --> 00:06:41.930
as we submit the form.

91
00:06:41.930 --> 00:06:52.610
But if we enter a few test words and then click save changes, cool, your filtered words were saved

92
00:06:52.940 --> 00:06:55.010
and let's go look in our database.

93
00:06:55.730 --> 00:06:57.470
Remember to look in your database.

94
00:06:57.470 --> 00:07:03.890
If you're using the local app, you can just click on the database tab and then click open admin or

95
00:07:04.370 --> 00:07:07.940
make sure you only have one WordPress site running out of time.

96
00:07:07.940 --> 00:07:13.610
Because I have seen a bug where if you have multiple sites running the admin or will not be for the

97
00:07:13.610 --> 00:07:19.580
site that you think it is that you clicked on anyways within our WordPress database, if we look in

98
00:07:19.580 --> 00:07:23.630
the options table and then click select data.

99
00:07:24.750 --> 00:07:28.380
And then we do need to click on the very last page.

100
00:07:29.710 --> 00:07:35.230
Down at the bottom, plug in words to filter Kool, and there's the value that I entered.

101
00:07:35.890 --> 00:07:40.140
Let's take care of one more detail before we add in a bit of basic security.

102
00:07:40.600 --> 00:07:47.230
So when you reload this page, we should actually load that value from the database, right.

103
00:07:47.230 --> 00:07:49.300
Instead of just this generic placeholder.

104
00:07:49.630 --> 00:07:57.550
So to make that happen, just find the overall function for the page and then find the text area field

105
00:07:57.550 --> 00:07:58.120
element.

106
00:07:58.570 --> 00:08:04.780
And we just want to include a bit of text in between the opening and closing text area fields.

107
00:08:05.350 --> 00:08:05.520
Right.

108
00:08:05.660 --> 00:08:09.210
So this will appear when the user first loads the page.

109
00:08:09.610 --> 00:08:13.830
Now, instead of that example text, we would want to pull the value from the database.

110
00:08:14.320 --> 00:08:20.700
So right here we can just go into HTTP and we can use the git option function.

111
00:08:21.370 --> 00:08:25.960
We named it plug in words to filter.

112
00:08:26.530 --> 00:08:31.930
Now, speaking of adding a bit of security, again, whenever you're pulling a dynamic value from a

113
00:08:31.930 --> 00:08:38.020
database, you want to escape it, because even if there somehow is malicious data in your database,

114
00:08:38.320 --> 00:08:42.690
your front end doesn't need to actively render or distribute it.

115
00:08:43.450 --> 00:08:45.910
So we can just wrap this git option.

116
00:08:45.970 --> 00:08:47.590
I'm going to cut it into my clipboard.

117
00:08:47.740 --> 00:08:55.690
We can wrap it inside of escape text area, call that in these parentheses, paste in your clipboard,

118
00:08:55.690 --> 00:08:58.030
and then we do want to echo that.

119
00:08:58.950 --> 00:09:01.690
Let's give this save if we try this again.

120
00:09:02.260 --> 00:09:02.640
Cool.

121
00:09:02.650 --> 00:09:04.480
It's pulling that value from the database.

122
00:09:04.480 --> 00:09:12.610
And if I change this to red, orange, yellow and save perfect, it's still being saved and loaded from

123
00:09:12.610 --> 00:09:13.360
the database.

124
00:09:13.870 --> 00:09:17.190
Now that it's up and running, let's go back and add a bit of security.

125
00:09:17.590 --> 00:09:25.090
So first of all, within our handle form function, you never want to just immediately save or truly

126
00:09:25.090 --> 00:09:28.570
use or trust a value coming from post.

127
00:09:28.930 --> 00:09:29.170
Right.

128
00:09:29.200 --> 00:09:34.030
It's one thing to use an if statement to check what the value is, but it's a totally different thing

129
00:09:34.030 --> 00:09:37.840
to actually trust that value and inserted into your database.

130
00:09:38.410 --> 00:09:44.710
So I would just take this and cut it from the dollar sign to the closing square bracket and I'm going

131
00:09:44.710 --> 00:09:51.790
to wrap it in a function we can just call sanitize text field in those parentheses, just paste it back

132
00:09:51.790 --> 00:09:52.030
in.

133
00:09:52.720 --> 00:10:00.400
OK, now, next, we want to use something called a nonce in order to protect from cross site request

134
00:10:00.400 --> 00:10:01.110
forgery.

135
00:10:01.600 --> 00:10:06.940
What I mean is if someone's browser sends a post request to this U.

136
00:10:06.940 --> 00:10:14.230
RL, we want to make sure that the user was actually directly on this Web page when they submitted the

137
00:10:14.230 --> 00:10:14.700
form.

138
00:10:15.190 --> 00:10:20.230
If you're curious about how this sort of attack would work, you can just perform a bit of Google research

139
00:10:20.230 --> 00:10:21.500
on a C.

140
00:10:21.520 --> 00:10:23.310
S RF attack.

141
00:10:23.860 --> 00:10:28.060
The good news is that WordPress makes it easy to protect against this type of attack.

142
00:10:28.210 --> 00:10:33.510
So all we need to do in our form may be right below our hidden input.

143
00:10:33.520 --> 00:10:34.690
Just add a new line.

144
00:10:35.110 --> 00:10:36.760
Let's go into PHP.

145
00:10:37.210 --> 00:10:42.550
And WordPress has a function named WP Naans Field.

146
00:10:43.330 --> 00:10:44.530
So we're going to call that.

147
00:10:45.100 --> 00:10:48.880
We're going to give it to arguments so we get to make up both of them.

148
00:10:48.880 --> 00:10:51.190
So first we make up an action name.

149
00:10:51.640 --> 00:10:55.450
Why don't we call this save filter words?

150
00:10:55.780 --> 00:11:00.580
And then the second argument is the name for this nonce value that it's going to create.

151
00:11:00.580 --> 00:11:01.960
Again, we get to make this up.

152
00:11:01.960 --> 00:11:04.810
Let's call it our Norns.

153
00:11:05.470 --> 00:11:11.050
Let's go ahead and save this just so you can inspect in the browser and see what this is going to output.

154
00:11:11.230 --> 00:11:18.250
So if we save that refresh and then use your dev tools to inspect this element, well, right above

155
00:11:18.250 --> 00:11:21.400
the text area, we see our hidden input just submitted.

156
00:11:21.400 --> 00:11:26.500
But right below that, we see another hidden input with the name of our nonce.

157
00:11:26.500 --> 00:11:29.730
And you can see WordPress generated this value for us.

158
00:11:30.220 --> 00:11:36.700
So now in our handle submit function, we just want to check to see if this is a valid nonce value so

159
00:11:36.700 --> 00:11:42.280
WordPress can confirm that this Web page is in fact what submitted things.

160
00:11:42.820 --> 00:11:50.560
So back in our Handal form function, let's take everything inside the body of the function and temporarily

161
00:11:50.560 --> 00:11:52.120
cut it into our clipboard.

162
00:11:52.300 --> 00:11:55.240
We will want this back in just a moment, but let's cut it for now.

163
00:11:56.080 --> 00:11:59.500
Let me get rid of this unnecessary opening tag now.

164
00:11:59.650 --> 00:12:01.990
So we just have an empty handle form function.

165
00:12:02.170 --> 00:12:05.260
And what we want to do is wrap it in an if else statement.

166
00:12:05.260 --> 00:12:13.300
So if parentheses curly brackets, be sure to add the ls curly brackets in the if block curly brackets,

167
00:12:13.300 --> 00:12:15.280
you can go ahead and paste in your clipboard.

168
00:12:15.940 --> 00:12:21.290
Let me fix the indentation and remember that at the end of the update option we were dropping out.

169
00:12:22.030 --> 00:12:25.330
So then I would just enter back into PPY here.

170
00:12:25.810 --> 00:12:29.200
OK, now in the condition for our statement we just want to value.

171
00:12:29.260 --> 00:12:38.620
A date or verify or check that Knoxfield so WordPress gives us a function called WP Verify Naans parentheses

172
00:12:38.620 --> 00:12:40.890
to call it, we give it to arguments.

173
00:12:40.900 --> 00:12:45.760
So A comma B the first is just that nonce value that we saw in our browser.

174
00:12:45.760 --> 00:12:46.060
Right.

175
00:12:46.090 --> 00:12:53.620
So this actual string of text, we can access that from the servers, post object or post array.

176
00:12:53.630 --> 00:12:53.830
Right.

177
00:12:53.870 --> 00:13:01.960
And we named it our N, so we would just say instead of a placeholder dollar sign, underscore post,

178
00:13:02.290 --> 00:13:04.930
look inside that array for something called our.

179
00:13:06.310 --> 00:13:12.610
OK, the second argument instead of B is the action name that we made up now down in our code.

180
00:13:12.610 --> 00:13:16.870
And remember I chose the Made-Up name of save filter words.

181
00:13:16.960 --> 00:13:19.960
So that's what we would use instead of the B placeholder.

182
00:13:20.290 --> 00:13:25.720
OK, and while we're at it, it's better to be safe than sorry in our if check in between these two

183
00:13:25.720 --> 00:13:26.890
closing parentheses.

184
00:13:27.010 --> 00:13:32.800
Let's add another condition that we're checking for so we can just say and we want to make sure that

185
00:13:32.800 --> 00:13:38.800
the current user can parentheses to call that and let's just say manage options.

186
00:13:39.340 --> 00:13:43.660
So all together, we're checking the nonce and we want to make sure that the current user has sort of

187
00:13:43.660 --> 00:13:45.100
admin privileges.

188
00:13:45.460 --> 00:13:50.650
If that's the case, then we can actually process and use their data otherwise.

189
00:13:50.650 --> 00:13:53.400
Else, let's show an error message.

190
00:13:53.800 --> 00:13:56.260
So I just want to show a bit of HTML here.

191
00:13:56.260 --> 00:14:09.220
So let's exit here, go back into PHP here and then let's have a div with a class of error set tab inside

192
00:14:09.220 --> 00:14:09.670
the div.

193
00:14:09.670 --> 00:14:18.790
Let's have a paragraph that reads, sorry you do not have permission to perform that action.

194
00:14:20.260 --> 00:14:27.160
Let's give this to save and test it out, so if we refresh and we try to save this blue, green, yellow

195
00:14:28.750 --> 00:14:29.980
cool, it works.

196
00:14:30.010 --> 00:14:37.750
However, if I reload and go into my dev tools, if I delete that nonce input, so just click on it,

197
00:14:37.750 --> 00:14:38.350
push, delete.

198
00:14:39.250 --> 00:14:42.610
Now, if I try to submit the form, we change the value first.

199
00:14:42.610 --> 00:14:44.440
Orange, purple, green.

200
00:14:45.130 --> 00:14:47.350
If I submit cool we see.

201
00:14:47.350 --> 00:14:52.210
Sorry you do not have permission and those values are not actually saved.

202
00:14:52.600 --> 00:14:53.200
Perfect.

203
00:14:53.530 --> 00:14:59.170
And that's going to bring this lesson to a close now that our form is actually up and running and we

204
00:14:59.170 --> 00:15:05.450
are successfully saving and loading data to and from the database and we've added a bit of basic security.

205
00:15:05.830 --> 00:15:11.320
Well, now in our next lesson, we can actually build the true feature of this plug in.

206
00:15:11.770 --> 00:15:18.670
So we'll filter our blog post content to look for any of these comma separated words and replace them

207
00:15:18.670 --> 00:15:19.810
or filter them out.

208
00:15:20.220 --> 00:15:23.080
Let's keep the momentum rolling and I will see you then.
