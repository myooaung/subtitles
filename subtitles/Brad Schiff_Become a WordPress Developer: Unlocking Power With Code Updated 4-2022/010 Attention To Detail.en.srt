1
00:00:02,300 --> 00:00:03,260
Hello, everyone.

2
00:00:03,590 --> 00:00:09,710
In this lesson, we're going to work on a bit of attention to detail for our blacktip, let's jump into

3
00:00:09,710 --> 00:00:10,400
the action.

4
00:00:10,400 --> 00:00:18,620
So currently, if you get a question wrong, our message displays, but then if you get it wrong again,

5
00:00:18,860 --> 00:00:19,910
nothing happens.

6
00:00:19,910 --> 00:00:23,690
And we would want to see that error message or sorry message again.

7
00:00:24,140 --> 00:00:30,440
As I mentioned at the end of the previous lesson, the reason this is happening is because it is correct,

8
00:00:30,440 --> 00:00:36,860
that piece of state that we're storing, it's already set to false from when you got the answer wrong

9
00:00:36,860 --> 00:00:37,630
the first time.

10
00:00:37,790 --> 00:00:41,450
So when we set it to false again, it was already false.

11
00:00:41,450 --> 00:00:42,830
There was no change.

12
00:00:43,040 --> 00:00:46,400
So there's no difference for react to react to.

13
00:00:46,950 --> 00:00:52,940
Now, I do want to say that there are an infinite number of ways that you could code this quiz front

14
00:00:52,940 --> 00:00:54,290
end with react.

15
00:00:54,680 --> 00:00:59,540
If you asked 100 developers, you'd get 100 different answers on how to set this up.

16
00:00:59,840 --> 00:01:04,910
And I definitely do not claim to have the most elegant react solutions in the world.

17
00:01:05,120 --> 00:01:07,040
But here's how I would do it.

18
00:01:07,520 --> 00:01:09,830
Let me refresh so we get a clean slate.

19
00:01:09,980 --> 00:01:16,970
So when you get the answer wrong, as soon as that is correct is set to false, I would just wait maybe

20
00:01:16,970 --> 00:01:21,710
twenty six hundred milliseconds so that it sort of lines up with the speed of our animation.

21
00:01:21,710 --> 00:01:26,200
But if I refresh again, so as soon as this happens it gets set to false.

22
00:01:26,870 --> 00:01:31,370
And then after twenty six hundred milliseconds I would just set it back to undefined.

23
00:01:31,670 --> 00:01:37,460
So that way once the animation goes away, if you get it wrong again, you'd be changing it from undefined

24
00:01:37,460 --> 00:01:42,510
to false so that it actually would render and reapply that animation.

25
00:01:42,830 --> 00:01:45,080
So let me show you how I would set that up.

26
00:01:45,320 --> 00:01:49,520
Up at the very top, we've already imported something called use state.

27
00:01:49,820 --> 00:01:54,380
And right now I want to import another react function called use effect.

28
00:01:54,710 --> 00:01:59,380
So in these curly brackets, after you state, let's say comma use effect.

29
00:02:00,020 --> 00:02:06,650
OK, now let me explain how we use use effect down in our quiz component function, maybe below this

30
00:02:06,650 --> 00:02:07,790
const line.

31
00:02:09,020 --> 00:02:14,990
Let's use the use affect function in these parentheses we give it to arguments.

32
00:02:14,990 --> 00:02:20,330
So A comma B the first argument is a function that we want to run at a certain time.

33
00:02:20,690 --> 00:02:23,240
So let's just give it an E six arrow function.

34
00:02:23,240 --> 00:02:26,170
So empty parentheses, arrow symbol, curly brackets.

35
00:02:26,630 --> 00:02:34,310
The second argument is where we get to explain when we want this function to run, or in other words,

36
00:02:34,610 --> 00:02:39,740
what properties or pieces of state are we watching for changes.

37
00:02:39,950 --> 00:02:44,840
And then any time they change, we want to run this function in response.

38
00:02:45,470 --> 00:02:50,030
So instead of the placeholder B, you give it an array of things that you're watching for changes.

39
00:02:50,030 --> 00:02:53,990
And I just want to watch the is correct piece of state.

40
00:02:54,710 --> 00:03:01,130
OK, so now any time it changes inside the body of this function, let's set up an if statement.

41
00:03:01,140 --> 00:03:08,320
So if parentheses curly brackets, I'm going to say only if is correct is now false.

42
00:03:08,330 --> 00:03:13,490
So if that will equal signs false, then what do I want to do.

43
00:03:13,730 --> 00:03:20,720
I want to set a time out and wait a little bit of time and then just set is correct back to undefined.

44
00:03:21,380 --> 00:03:23,330
So set time out.

45
00:03:24,230 --> 00:03:26,120
We give this to arguments as well.

46
00:03:26,750 --> 00:03:32,270
The first argument is a function that you want to run so we can just give it an E6 arrow function and

47
00:03:32,270 --> 00:03:38,950
let's just say set is correct and put it back to undefined.

48
00:03:39,260 --> 00:03:44,930
Now, the second argument for this be placeholder, this is how long you want to wait before running

49
00:03:44,930 --> 00:03:46,190
your function that you provided.

50
00:03:46,190 --> 00:03:49,850
So let's just wait twenty six hundred milliseconds.

51
00:03:50,840 --> 00:03:51,170
Cool.

52
00:03:51,170 --> 00:03:53,150
Let's give this a save and test it out.

53
00:03:53,150 --> 00:03:56,090
So if we refresh I get an answer wrong.

54
00:03:57,620 --> 00:04:01,160
OK, but then if I get it wrong again, perfect.

55
00:04:02,900 --> 00:04:06,740
Next let's talk about what should happen if you get the answer right.

56
00:04:07,250 --> 00:04:10,490
So if I click Cat and we see that is correct.

57
00:04:10,970 --> 00:04:15,230
Well once that message goes away, I shouldn't be able to click a wrong answer.

58
00:04:15,560 --> 00:04:21,470
So instead, let's look at the finished product of how it handles what happens when you get it right.

59
00:04:22,530 --> 00:04:28,580
So if I get it correct, as soon as that message fades away, notice I can no longer click on any of

60
00:04:28,580 --> 00:04:29,330
the answers.

61
00:04:29,720 --> 00:04:35,300
And by the styling, it's clear that this was the correct answer and these were incorrect.

62
00:04:35,300 --> 00:04:37,310
So then it's sort of a review, right?

63
00:04:37,310 --> 00:04:43,310
As the user scrolls up and down the page again, if they see that, it's immediately clear the correct

64
00:04:43,310 --> 00:04:43,750
answer.

65
00:04:44,330 --> 00:04:50,480
Now, before we work on these sort of post answer styles like this, let's first just prevent any further

66
00:04:50,480 --> 00:04:53,060
clicks once you get the answer right.

67
00:04:53,780 --> 00:05:00,350
So back in the tab that we're working on together, jump into our code and let's find the elai list

68
00:05:00,350 --> 00:05:01,130
item element.

69
00:05:01,370 --> 00:05:08,630
You click on so here it is inside the unordered list and on the unclick prop, I actually want you to

70
00:05:08,630 --> 00:05:12,200
cut the S6 Arrow function into your clipboard.

71
00:05:12,690 --> 00:05:14,190
So I'm going to cut this value.

72
00:05:14,510 --> 00:05:17,480
So now it's just equals empty curly brackets.

73
00:05:17,900 --> 00:05:23,310
And I'm just going to use a ternary operator to say if is correct is true.

74
00:05:23,780 --> 00:05:24,710
Don't do anything.

75
00:05:24,710 --> 00:05:26,120
I don't want to pass on a function.

76
00:05:26,360 --> 00:05:29,790
If it's not true, then we can pass along that function.

77
00:05:30,140 --> 00:05:33,940
So for the condition of the ternary operator is correct.

78
00:05:34,430 --> 00:05:37,940
If that equals true, then questionmark.

79
00:05:37,940 --> 00:05:38,780
What do we want to do.

80
00:05:39,230 --> 00:05:40,200
Undefined.

81
00:05:40,220 --> 00:05:42,230
Just don't pass along anything.

82
00:05:42,230 --> 00:05:43,670
Don't pass along a function.

83
00:05:44,300 --> 00:05:46,340
Colen, what do we want to do otherwise.

84
00:05:46,490 --> 00:05:48,620
Well then we can just paste in our clipboard.

85
00:05:49,620 --> 00:05:51,360
Let's give that to save and test it out.

86
00:05:51,380 --> 00:05:54,800
So if I refresh now and I get the answer correct.

87
00:05:55,580 --> 00:05:58,310
OK, but if I try to click on another answer after that.

88
00:05:58,940 --> 00:06:00,550
Perfect, nothing happens.

89
00:06:01,070 --> 00:06:06,710
Now let's focus on the change in styling that should take place after you answer the question correctly

90
00:06:07,190 --> 00:06:08,180
to refresh your memory.

91
00:06:08,180 --> 00:06:14,420
If we look at the finished product, I'm referring to the green checkmark and the red Xs, as well as

92
00:06:14,420 --> 00:06:18,360
making the wrong answers sort of semi transparent or see through.

93
00:06:18,860 --> 00:06:24,470
Now, in terms of exactly when this style change should take place, it's maybe not as simple as you

94
00:06:24,470 --> 00:06:25,190
might think.

95
00:06:25,550 --> 00:06:27,560
Let me refresh and explain what I mean.

96
00:06:27,570 --> 00:06:33,350
So if we started to animate and change the style of the answers, the millisecond that you answered

97
00:06:33,350 --> 00:06:39,920
the question correctly, well, you'd be able to see the answers changing while that green success message

98
00:06:39,920 --> 00:06:41,510
is slowly fading in.

99
00:06:42,260 --> 00:06:47,120
And it's just me and my design opinion that I think that would look jarring or distracting.

100
00:06:47,120 --> 00:06:47,300
Right.

101
00:06:47,330 --> 00:06:50,500
I don't think there should be multiple things animating at the same time.

102
00:06:50,810 --> 00:06:56,840
So instead, what I want to do, I want to wait maybe one second into the animation.

103
00:06:56,840 --> 00:07:03,620
So when I get the answer right, maybe one one thousand and now animate and change the way the answers

104
00:07:03,620 --> 00:07:09,740
look just in time, so that when that green screen starts to fade away to reveal them again, they've

105
00:07:09,740 --> 00:07:11,000
already changed.

106
00:07:11,210 --> 00:07:13,420
And you are using the new styling.

107
00:07:13,850 --> 00:07:16,640
So the approach I'm going to take is not necessary.

108
00:07:16,820 --> 00:07:20,620
It's just something I'm doing because I think the animations will look nicer this way.

109
00:07:20,960 --> 00:07:26,240
In other words, if I jump back to the version we're working on, if you don't mind if multiple things

110
00:07:26,240 --> 00:07:31,520
are changing or animating at the same time, then you absolutely could just build your condition around.

111
00:07:31,760 --> 00:07:33,470
If is correct is true.

112
00:07:34,220 --> 00:07:40,550
However, since I want a bit more of a custom timing, here's what I'm going to do up in our use effect,

113
00:07:41,060 --> 00:07:45,710
maybe right below this if statement, but still within the overall use affect function.

114
00:07:45,710 --> 00:07:51,320
So right here where my cursor is blinking, I'll say if parentheses curly brackets the condition is

115
00:07:51,320 --> 00:07:57,080
if is correct equals true, what do I want to do.

116
00:07:57,660 --> 00:08:00,860
Well I want to set a time out so set time out.

117
00:08:01,070 --> 00:08:02,360
We give that to arguments.

118
00:08:02,360 --> 00:08:07,610
So A comma B the first argument is a function, so let's use an E6 arrow function.

119
00:08:08,900 --> 00:08:11,300
We'll circle back to what we want to do here in just a moment.

120
00:08:11,300 --> 00:08:14,390
But the second argument is how long you want to wait.

121
00:08:14,390 --> 00:08:15,950
Let's just wait one second.

122
00:08:15,950 --> 00:08:22,460
So sort of in the middle of that green screen success fading in and out and then instead of setting

123
00:08:22,460 --> 00:08:28,430
the is correct piece of state, let's create a new piece of state that keeps track of sort of the in

124
00:08:28,430 --> 00:08:29,450
between timer.

125
00:08:29,840 --> 00:08:34,670
So I would just copy and paste and duplicate this line of code where we're creating our piece of state.

126
00:08:34,970 --> 00:08:42,050
And then on the new copy, let's change it to is correct delayed and then change this one to set is

127
00:08:42,050 --> 00:08:42,680
correct.

128
00:08:42,680 --> 00:08:43,280
Delayed.

129
00:08:43,730 --> 00:08:53,600
OK then in our new set time out we would just set is correct delayed and give it a value of true.

130
00:08:54,170 --> 00:08:58,520
In other words, as soon as you get the question right one second after that.

131
00:08:58,730 --> 00:09:04,550
Well we can watch that piece of state change at that exact moment and then change the way the answers

132
00:09:04,550 --> 00:09:05,000
look.

133
00:09:05,420 --> 00:09:11,480
Now in terms of changing their appearance, why don't we begin by showing a green checkmark on the correct

134
00:09:11,480 --> 00:09:11,990
answer?

135
00:09:12,590 --> 00:09:18,500
So if we scroll down a bit into our JSM, we're looking for the list item that we loop once for each

136
00:09:18,500 --> 00:09:19,030
answer.

137
00:09:19,460 --> 00:09:24,080
Now, while this currently fits on a single line, so we don't need parentheses around the JSA that

138
00:09:24,080 --> 00:09:28,280
we're returning, I actually want to start using multiple lines for the list item now.

139
00:09:28,280 --> 00:09:31,760
So let's wrap the list item in an opening parentheses here.

140
00:09:31,760 --> 00:09:35,480
And then at the very end of that line, you can add a closing parentheses.

141
00:09:35,870 --> 00:09:37,010
So just like this.

142
00:09:37,220 --> 00:09:42,350
And then also inside the list item, I'm going to drop down onto a different line so that the opening

143
00:09:42,350 --> 00:09:46,640
and closing tags are each on their own line and the content sits here.

144
00:09:47,180 --> 00:09:52,460
OK, and then right above that answer text, this is where the green check mark would go.

145
00:09:52,820 --> 00:09:57,320
So let's have curly brackets to do something dynamic here and say is correct.

146
00:09:57,320 --> 00:10:01,070
Delayed if that equals true and.

147
00:10:01,490 --> 00:10:06,110
If this is the correct answer, right, we only want to add the green checkmark to the correct answer,

148
00:10:06,110 --> 00:10:11,770
so and if index equals props, correct answer.

149
00:10:12,290 --> 00:10:17,000
Now, again, in case we can't have an if statement, but we can have sort of this cool trick here,

150
00:10:17,120 --> 00:10:24,160
we can say and and once again and then pair of parentheses and then we can drop down inside the parentheses.

151
00:10:24,470 --> 00:10:28,280
And now this will only be included if our condition is true.

152
00:10:28,970 --> 00:10:33,010
So now let's just paste in the SVG for a check mark icon.

153
00:10:33,560 --> 00:10:36,650
So I will once again use the Bootstrap Icons website.

154
00:10:36,650 --> 00:10:38,450
You can search for checkmark.

155
00:10:39,210 --> 00:10:41,110
I'll use this first basic check.

156
00:10:41,690 --> 00:10:46,810
Just select the SVG contents here back in our code, just paste that in.

157
00:10:47,450 --> 00:10:51,460
Let's change the width and height to twenty pixels instead of sixteen.

158
00:10:52,670 --> 00:10:57,150
We don't need the fill and let's also change class to be class name.

159
00:10:57,920 --> 00:10:59,850
Let's give this a save and see what it looks like.

160
00:10:59,870 --> 00:11:02,750
So if I refresh and get the answer right.

161
00:11:05,820 --> 00:11:06,480
Perfect.

162
00:11:06,510 --> 00:11:12,960
You and I never actually saw the checkmark appear, it came into play during the middle of the overlay

163
00:11:12,960 --> 00:11:13,690
animation.

164
00:11:14,040 --> 00:11:18,180
Let's do the same thing, but have a red X for the incorrect answers.

165
00:11:18,690 --> 00:11:24,500
So back in our code, we can actually just duplicate this entire area that I'm selecting right now.

166
00:11:24,960 --> 00:11:28,230
So just sort of the overall curly brackets that's right above answer.

167
00:11:28,230 --> 00:11:30,820
Just duplicate that on the new copy.

168
00:11:31,230 --> 00:11:32,750
Let's just check for the opposite.

169
00:11:32,760 --> 00:11:38,310
So only if the index does not so exclamation equal the correct answer.

170
00:11:38,700 --> 00:11:42,470
And then let's just go find an SVG icon for an X.

171
00:11:42,510 --> 00:11:49,230
So if we go back and search for the word close, I'm just looking for this X icon.

172
00:11:50,130 --> 00:11:50,910
Click on that.

173
00:11:51,090 --> 00:11:57,540
Copy the SVG paste that in instead of this one with change the height and width to twenty.

174
00:11:57,540 --> 00:12:03,810
Once again, let's remove the fill and change class to class name.

175
00:12:04,290 --> 00:12:06,240
Skip the save and test it out.

176
00:12:07,290 --> 00:12:09,830
If I get it correct, as soon as that goes away.

177
00:12:10,410 --> 00:12:14,460
Now the X's are green instead of red, but we're going to fix that right now.

178
00:12:14,580 --> 00:12:18,270
So what we're going to do is give each a list item a class.

179
00:12:18,720 --> 00:12:23,910
So we'll give the incorrect answers, a class that makes them transparent or see through something like

180
00:12:23,910 --> 00:12:24,570
this.

181
00:12:25,410 --> 00:12:29,520
And then we'll give the correct answer a class just so that when you hover over it, it doesn't look

182
00:12:29,520 --> 00:12:30,900
clickable any longer.

183
00:12:31,320 --> 00:12:34,880
So to set that up, let's find the opening list item tag.

184
00:12:34,890 --> 00:12:35,580
Here it is.

185
00:12:36,060 --> 00:12:38,100
And right before the end, click prop here.

186
00:12:38,100 --> 00:12:43,500
Let's give it a class name equals instead of quotes, let's have curly brackets because we're going

187
00:12:43,500 --> 00:12:45,120
to make dynamic decisions.

188
00:12:45,510 --> 00:12:48,930
So let's have a grouping pair of parentheses and use a ternary operator.

189
00:12:48,930 --> 00:12:51,600
So I'll say is correct.

190
00:12:51,600 --> 00:12:54,000
Delayed if that equals true.

191
00:12:54,630 --> 00:12:57,060
And this is the correct answer.

192
00:12:57,240 --> 00:13:01,800
So if index equals props, dot correct answer.

193
00:13:02,340 --> 00:13:03,000
Questionmark.

194
00:13:03,000 --> 00:13:10,740
If that's the case, let's just output a string of text or a class of no dash click if that's not the

195
00:13:10,740 --> 00:13:11,040
case.

196
00:13:11,050 --> 00:13:16,620
So colon just output nothing after the closing parentheses but still in the curly brackets let's say,

197
00:13:16,620 --> 00:13:21,450
plus another grouping pair of parentheses and just have another ternary operator.

198
00:13:21,460 --> 00:13:29,010
So if is correct, delayed equals true and if it's the incorrect answer.

199
00:13:29,020 --> 00:13:33,750
So if index does not equal props, correct answer.

200
00:13:34,530 --> 00:13:35,160
Questionmark.

201
00:13:35,160 --> 00:13:35,620
What do we want.

202
00:13:35,640 --> 00:13:41,130
Output string of text of Faid Dasch incorrect Colen.

203
00:13:41,130 --> 00:13:43,020
If that's not the case, just do nothing.

204
00:13:43,020 --> 00:13:44,580
Just an empty string of text.

205
00:13:45,030 --> 00:13:49,770
Remember, you can always download the reference code at the end of a lesson if you want to copy and

206
00:13:49,770 --> 00:13:51,300
paste or reference my code.

207
00:13:51,300 --> 00:13:52,770
But let's save that.

208
00:13:52,770 --> 00:13:53,570
Give it a try.

209
00:13:53,940 --> 00:13:58,410
So if I get it correct, as soon as that green message fades away, perfect.

210
00:13:58,770 --> 00:14:04,470
The icons are red, the incorrect answers are sort of faded away and when we hover over the correct

211
00:14:04,470 --> 00:14:06,600
answer, it no longer looks clickable.

212
00:14:07,080 --> 00:14:09,840
And that is going to bring this video to a close.

213
00:14:10,290 --> 00:14:16,200
In our next lesson, we're going to add a few finishing details before we close out this block type.

214
00:14:16,710 --> 00:14:22,530
We're actually going to be jumping back into the admin side of things and letting the owner of the site

215
00:14:22,710 --> 00:14:28,860
change the background color for each instance of the block as well as control the text alignment.

216
00:14:28,860 --> 00:14:33,540
So whether it's left, center or right should be a lot of fun to set up.

217
00:14:33,540 --> 00:14:35,940
Let's keep things rolling and I'll see you then.
