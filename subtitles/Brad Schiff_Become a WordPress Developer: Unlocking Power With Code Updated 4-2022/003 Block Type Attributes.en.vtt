WEBVTT
1
00:00:02.300 --> 00:00:03.230
Hello, everyone.

2
00:00:03.470 --> 00:00:10.220
In this lesson, we're going to learn about something we can add to our block type called an attribute,

3
00:00:10.640 --> 00:00:16.610
I think the easiest way to really understand what an attribute is, is to begin by trying to make our

4
00:00:16.610 --> 00:00:18.380
block type interactive.

5
00:00:18.680 --> 00:00:19.560
Let me explain.

6
00:00:20.060 --> 00:00:26.120
So right now, this is what our block type currently looks like on the post at its screen, you cannot

7
00:00:26.120 --> 00:00:28.010
click and begin typing.

8
00:00:28.250 --> 00:00:32.510
It's just a hard coded paragraph in a hard coded heading level three.

9
00:00:32.840 --> 00:00:39.230
So instead of that, what we really want is a text input field where the user can actually click and

10
00:00:39.230 --> 00:00:40.240
then begin typing.

11
00:00:40.550 --> 00:00:45.850
Not only that, we want to be sure that we save and store the value that they enter.

12
00:00:46.160 --> 00:00:51.770
So throughout this video lesson, we're going to learn how attributes make this possible.

13
00:00:52.310 --> 00:00:56.790
Without further ado, let's jump into the code and change what we're outputting here.

14
00:00:57.260 --> 00:01:01.780
So within your source folder, jump in to the index JS file.

15
00:01:02.750 --> 00:01:06.380
Right now, we're interested in the JSC within our edit function.

16
00:01:06.800 --> 00:01:13.160
And just for a hypothetical example, let's imagine we want to input text fields, so let's get rid

17
00:01:13.160 --> 00:01:18.400
of the paragraph and heading level for let's have one input textfield.

18
00:01:19.010 --> 00:01:24.590
I'll say placeholder equals sky color below that.

19
00:01:24.590 --> 00:01:30.880
Let's have a second input and it can be so placeholder for grass color.

20
00:01:31.700 --> 00:01:39.380
Just a quick note about X elements must either have a matching closing tag or a self-closing tag like

21
00:01:39.380 --> 00:01:39.750
this.

22
00:01:39.770 --> 00:01:44.960
So notice at the end of our input there's a forward slash to make this a self-closing element.

23
00:01:44.960 --> 00:01:50.600
If you got rid of that, this is no longer valid JS X, so just keep that in mind.

24
00:01:50.600 --> 00:01:53.450
Every element needs to be closed in one way or another.

25
00:01:54.020 --> 00:01:59.030
Anyways, let's imagine we have these two input fields, sky color and grass color.

26
00:01:59.480 --> 00:02:04.970
And then in terms of the HTML that we would actually want to save into the database and output on the

27
00:02:04.970 --> 00:02:07.680
front end of our website to the general public.

28
00:02:08.060 --> 00:02:13.040
Well, let's imagine we just want a paragraph of text so we no longer need the wrapper if we just have

29
00:02:13.040 --> 00:02:13.830
a single element.

30
00:02:13.850 --> 00:02:21.710
So just to have a single P tag and inside it, let's say today the sky is and then it would be blank,

31
00:02:21.710 --> 00:02:29.810
whatever color the user types into this field and the grass is another blank, whatever the user types

32
00:02:29.810 --> 00:02:31.270
in to the second field.

33
00:02:32.090 --> 00:02:35.800
So back to the entire point of this lesson, what is an attribute?

34
00:02:36.200 --> 00:02:38.360
Well, perhaps it's already starting to make sense.

35
00:02:38.600 --> 00:02:47.420
Essentially, we just need a way to bridge the gap between our admin ed code and our saved public output

36
00:02:47.420 --> 00:02:47.920
code.

37
00:02:48.290 --> 00:02:48.580
Right.

38
00:02:48.590 --> 00:02:51.590
We need a way to fill in these blank values.

39
00:02:52.100 --> 00:02:53.030
So here's what we do.

40
00:02:53.030 --> 00:02:53.940
Let's scroll up.

41
00:02:54.260 --> 00:02:59.600
So remember when we registered our blacktip, we gave it a configuration object and it has these different

42
00:02:59.600 --> 00:03:02.300
properties of title icon category.

43
00:03:02.450 --> 00:03:03.670
Edit save.

44
00:03:04.040 --> 00:03:05.870
Well, let's just give it another property.

45
00:03:05.870 --> 00:03:11.090
The ordering doesn't matter, but maybe let's just add it after categories right here on dropdown.

46
00:03:11.570 --> 00:03:17.150
The new property name is attributes Colon and then we give it an object.

47
00:03:17.150 --> 00:03:18.890
Be sure to end this line with a comma.

48
00:03:19.640 --> 00:03:22.600
OK, inside this object you can drop down if you want to.

49
00:03:22.610 --> 00:03:28.280
I'm going to add we just get to make up property names that will be our blocks attributes.

50
00:03:28.640 --> 00:03:32.990
So I'm going to make up a name called Sky Color Colon.

51
00:03:33.260 --> 00:03:36.410
Let's give it an object that describes this attribute.

52
00:03:36.410 --> 00:03:39.590
So I'm going to say that type is a string.

53
00:03:39.800 --> 00:03:45.050
You could also set this to be an array or a number or a boolean.

54
00:03:45.470 --> 00:03:48.500
But for now, let's just go with a string of text, OK?

55
00:03:48.500 --> 00:03:51.920
And there are other properties that you can use to describe your attribute.

56
00:03:51.920 --> 00:03:54.020
But for now, this is all we need.

57
00:03:54.320 --> 00:03:59.210
The type attribute is the only required property at the end of this line.

58
00:03:59.210 --> 00:04:02.900
Let's add a comma and then let's just do the same thing for grass color.

59
00:04:02.900 --> 00:04:07.700
So we'll create a property, grass color, colon, curly brackets.

60
00:04:07.700 --> 00:04:10.760
It has a type as well of string.

61
00:04:11.420 --> 00:04:11.810
Cool.

62
00:04:11.810 --> 00:04:18.770
So now we have this common ground that both the edit and save function can work with.

63
00:04:19.250 --> 00:04:24.830
From this point, we need to start thinking about how the react framework actually works.

64
00:04:25.130 --> 00:04:32.960
In other words, because we're not dealing with a traditional HTML form that fires on submit, we're

65
00:04:32.960 --> 00:04:35.720
instead working with real time JavaScript.

66
00:04:36.080 --> 00:04:41.660
What I mean by this is in terms of the event that we're going to listen for, we're not interested in

67
00:04:41.660 --> 00:04:43.460
any form being submitted.

68
00:04:43.790 --> 00:04:51.050
Instead, we're interested in each one of these inputs having their value changed right after every

69
00:04:51.050 --> 00:04:51.830
keystroke.

70
00:04:51.830 --> 00:04:59.080
As the user is typing into this field, we want to update the value of that property in our attribute.

71
00:04:59.630 --> 00:05:01.670
So if the user types in the word blue that.

72
00:05:01.800 --> 00:05:08.970
Four characters, we would update the value of our sky color attribute four times after each keystroke.

73
00:05:09.180 --> 00:05:11.910
So here's how we do that on this first field.

74
00:05:12.520 --> 00:05:14.430
Let me hide the sidebar so we have more space.

75
00:05:14.700 --> 00:05:25.620
We give it an attribute of en change equals and then we don't say quotes instead in JS X, when you

76
00:05:25.620 --> 00:05:29.420
want to do something dynamic, it's a pair of curly brackets.

77
00:05:30.000 --> 00:05:36.570
In this case, since it's on change, we want to give it a function and then the REACT framework will

78
00:05:36.570 --> 00:05:41.270
call our function every single time the value of this field changes.

79
00:05:41.490 --> 00:05:47.280
Now, in the real world, I would probably just spell out in S6 Arrow function or an anonymous function

80
00:05:47.280 --> 00:05:49.170
right inside these curly brackets.

81
00:05:49.170 --> 00:05:55.080
But in terms of actually learning and having the code be easily readable, why don't we create a separate

82
00:05:55.080 --> 00:05:55.650
function?

83
00:05:56.130 --> 00:06:01.680
So do this with me still inside our edit function, but just above the word return here.

84
00:06:01.680 --> 00:06:06.120
Let's add a new line and let's make up a function name, let's say function.

85
00:06:06.600 --> 00:06:13.830
You could call it anything, but I'm going to call it update sky color, parentheses, curly brackets.

86
00:06:13.950 --> 00:06:17.430
Now that we have this function, that's what we would want to use for the on change.

87
00:06:17.430 --> 00:06:20.400
So just say update sky color.

88
00:06:20.760 --> 00:06:25.710
We don't need parentheses after the name because you and I are not trying to call the function right

89
00:06:25.710 --> 00:06:25.920
here.

90
00:06:25.920 --> 00:06:26.610
Right now.

91
00:06:26.970 --> 00:06:31.940
We're just giving a reference to the function and then react, we'll call it at the appropriate time.

92
00:06:32.310 --> 00:06:37.410
Now in terms of what we actually do inside the body of this function, this is where things get a bit

93
00:06:37.410 --> 00:06:38.400
complex.

94
00:06:38.700 --> 00:06:42.930
So if what we do in the next minute or two doesn't make perfect sense, that's OK.

95
00:06:42.930 --> 00:06:44.100
That's to be expected.

96
00:06:44.340 --> 00:06:48.570
React is definitely not the most intuitive framework in the world.

97
00:06:48.900 --> 00:06:51.270
But here's what we're going to do in this function.

98
00:06:51.270 --> 00:06:56.370
We need a way to update the attributes that WordPress is keeping track of.

99
00:06:56.790 --> 00:07:03.450
Luckily for us, when WordPress calls our edit function, it's going to give it everything we need.

100
00:07:03.870 --> 00:07:06.840
It's going to pass something into our function.

101
00:07:07.170 --> 00:07:11.790
So on this top level edit function right here, we want to have a parameter.

102
00:07:12.330 --> 00:07:17.790
You can name it anything, but the industry standard is to name it props short for properties.

103
00:07:18.030 --> 00:07:23.490
So WordPress will pass this into our function and now we can use that inside our function.

104
00:07:23.490 --> 00:07:26.340
So inside our update, sky color function.

105
00:07:26.340 --> 00:07:27.090
Here's what we're going to do.

106
00:07:27.090 --> 00:07:36.420
We're going to say props and we're going to look inside it for a WordPress function called Set Attributes

107
00:07:36.690 --> 00:07:40.080
parentheses to actually call it inside the parentheses.

108
00:07:40.080 --> 00:07:46.050
We give it an object that WordPress will sort of merge into the attributes object.

109
00:07:46.440 --> 00:07:51.060
So in the curly brackets here, we would want to change the sky color attribute.

110
00:07:51.600 --> 00:07:52.380
So Colan.

111
00:07:52.380 --> 00:07:55.230
And then you just give it the value that you want to set it to.

112
00:07:55.290 --> 00:08:00.030
So for example, blue only, we don't want to set a hard coded string of text here.

113
00:08:00.360 --> 00:08:05.220
We want to pull in or use whatever the user has typed into this text field.

114
00:08:05.520 --> 00:08:09.870
So this gets into the way that react and really just Web browsers in general work.

115
00:08:10.170 --> 00:08:16.290
But essentially when an HTML element has an event listener, well, when it runs the function that you

116
00:08:16.290 --> 00:08:22.140
told it to run, it's going to pass into it an argument that has all sorts of information about the

117
00:08:22.140 --> 00:08:23.700
event that just happened.

118
00:08:24.120 --> 00:08:31.080
So let me show you how we can pull in whatever the user is typed into the field right here within this

119
00:08:31.080 --> 00:08:31.770
function.

120
00:08:31.950 --> 00:08:33.390
Update sky color.

121
00:08:33.570 --> 00:08:38.280
We want to be sure to include a parameter you can name it anything, but it's common practice to name

122
00:08:38.280 --> 00:08:40.560
it E it's short for event.

123
00:08:40.560 --> 00:08:42.330
Or you could actually just type in event.

124
00:08:42.750 --> 00:08:50.520
And then instead of a hardcoded value of blue here, we would say event dot target, dot value.

125
00:08:50.820 --> 00:08:54.180
So event contains all sorts of information about what just occurred.

126
00:08:54.390 --> 00:09:00.390
We can look inside it for Target, which is the element that is firing the event, and then we can look

127
00:09:00.390 --> 00:09:02.460
inside that for the actual value.

128
00:09:02.880 --> 00:09:08.640
Let's go ahead and set up the same behavior for our second input field for grass color.

129
00:09:09.150 --> 00:09:16.080
So on that second input element, let's say on change equals curly brackets.

130
00:09:16.380 --> 00:09:18.420
We're going to make up a function name in just a minute.

131
00:09:18.420 --> 00:09:21.660
Let's call it maybe update grass color.

132
00:09:22.170 --> 00:09:23.910
Let's go create a function with that name.

133
00:09:23.940 --> 00:09:28.860
You can actually just copy and paste and duplicate these three lines for the update sky color functions

134
00:09:28.860 --> 00:09:33.420
or just paste that and change the name to update grass color.

135
00:09:33.960 --> 00:09:36.870
The only difference is the attribute that we want to change.

136
00:09:36.870 --> 00:09:39.780
So instead of sky color, this would be grass color.

137
00:09:40.260 --> 00:09:45.900
OK, we just need to take care of one more thing before we save and test this out, and that is our

138
00:09:46.050 --> 00:09:47.460
save function.

139
00:09:47.850 --> 00:09:52.530
So in terms of what we would actually want to show the public, how do we fill in these blanks?

140
00:09:52.530 --> 00:09:58.860
So instead of X here, this should pull in the sky color value and this the grass color value.

141
00:09:59.100 --> 00:10:01.470
Well, luckily for us, when WordPress.

142
00:10:01.570 --> 00:10:08.560
Actually calls or executes our function, just like the edit function above WordPress is going to pass

143
00:10:08.560 --> 00:10:09.780
into it an argument.

144
00:10:10.090 --> 00:10:13.050
So we want to receive that argument with a parameter here.

145
00:10:13.300 --> 00:10:16.920
Again, remember, the industry standard name is props, OK?

146
00:10:16.940 --> 00:10:18.720
And then we can just use that down here.

147
00:10:18.730 --> 00:10:23.980
So instead of the X, what we would really want is curly brackets, right?

148
00:10:23.990 --> 00:10:27.090
That's how you do something dynamic within X.

149
00:10:27.430 --> 00:10:33.760
So we would just use the props and then look inside it for something called attributes and then look

150
00:10:33.760 --> 00:10:38.380
inside that for the specific one we want, which is sky color.

151
00:10:38.830 --> 00:10:40.310
And we would just do the same thing here.

152
00:10:40.330 --> 00:10:41.740
So this would be grass color.

153
00:10:41.740 --> 00:10:48.210
So curly brackets, props, dot attributes, dot grass color.

154
00:10:49.180 --> 00:10:51.390
Let's save this file and test it out.

155
00:10:51.730 --> 00:10:57.120
But let me remind you, you do need to have your workflow running that we set up in the previous lesson.

156
00:10:57.610 --> 00:11:02.980
So in your command line, remember to open up your command line or terminal its control J on Windows

157
00:11:02.980 --> 00:11:03.790
or command.

158
00:11:03.790 --> 00:11:09.010
John Mac, we want to make sure that we have the WordPress scripts start TASC running.

159
00:11:09.020 --> 00:11:12.850
So again, that's NPM Run start.

160
00:11:16.200 --> 00:11:20.190
Cool, so that will perform a fresh build, we don't need to save the file again right now.

161
00:11:20.220 --> 00:11:22.050
Let's go test it out in the browser.

162
00:11:22.500 --> 00:11:27.030
Now, as soon as I refresh, we're going to see an error message here, and that's because the saved

163
00:11:27.030 --> 00:11:28.320
value has changed.

164
00:11:28.620 --> 00:11:35.090
So if we reload, don't be surprised when we see this block contains unexpected or invalid content.

165
00:11:35.340 --> 00:11:41.010
Again, we will learn about why this error message exists and how to get around this problem in our

166
00:11:41.010 --> 00:11:42.050
next lesson.

167
00:11:42.240 --> 00:11:47.940
But for this lesson, let's just go ahead and delete this instance of the block and then go ahead and

168
00:11:47.940 --> 00:11:49.320
insert a fresh new copy.

169
00:11:49.320 --> 00:11:53.330
So, Adblock, are you paying attention for sky color?

170
00:11:53.340 --> 00:12:01.350
Let's say blue for grass color, let's say green, and then let's go ahead and update or save our post

171
00:12:01.710 --> 00:12:03.530
and then view it on the front end.

172
00:12:04.800 --> 00:12:10.530
So if we scroll down, perfect today, the sky is blue and the grass is green.

173
00:12:11.160 --> 00:12:13.290
So our front end is working perfectly.

174
00:12:13.530 --> 00:12:18.690
However, if we go back to the edit screen and reload or refresh.

175
00:12:19.790 --> 00:12:26.750
Oh, notice the actual values that we just entered are not actually showing up or pre populating the

176
00:12:26.750 --> 00:12:27.450
inputs.

177
00:12:27.950 --> 00:12:30.980
Well, don't worry, the data is still there in the database.

178
00:12:31.010 --> 00:12:33.510
We'll actually look at the database in just a minute or two.

179
00:12:33.830 --> 00:12:39.440
For now, though, we just need to tell our JavaScript to actually use those as the values here.

180
00:12:40.040 --> 00:12:41.050
Let me show you what I mean.

181
00:12:41.060 --> 00:12:48.260
So if we go back into our edit function for the edit property on these same inputs where we added the

182
00:12:48.260 --> 00:12:53.360
on change attribute, we just need to add a value attribute.

183
00:12:53.360 --> 00:12:56.390
So value equals curly brackets.

184
00:12:56.830 --> 00:13:01.070
And then remember the props that WordPress is going to pass into our function.

185
00:13:01.400 --> 00:13:02.720
We just leverage that here.

186
00:13:02.720 --> 00:13:12.560
So its props dot attributes dot sky color and we'd want to do the same thing for the second input.

187
00:13:12.560 --> 00:13:19.910
So you could just take this selected all copy that, paste it here and just change the attribute name

188
00:13:19.910 --> 00:13:21.090
to grass color.

189
00:13:21.620 --> 00:13:22.850
Let's give that a save.

190
00:13:22.850 --> 00:13:26.660
And then if we refresh the admin screen, perfect.

191
00:13:26.660 --> 00:13:29.640
It's pre populating with the real values, we can test this out.

192
00:13:29.660 --> 00:13:37.010
So if we change the sky color to gray and click update or save, you can see if I refresh the front

193
00:13:37.010 --> 00:13:37.370
end.

194
00:13:37.940 --> 00:13:38.270
Yep.

195
00:13:38.270 --> 00:13:40.190
That change is actually taking place.

196
00:13:40.190 --> 00:13:42.260
And if we refresh the admin screen.

197
00:13:42.770 --> 00:13:43.190
Yep.

198
00:13:43.190 --> 00:13:44.720
It's loading from the database.

199
00:13:45.180 --> 00:13:51.080
Speaking of the database, I think it's very important for you to see as early as possible how this

200
00:13:51.080 --> 00:13:52.180
is being stored.

201
00:13:52.490 --> 00:13:55.670
I'm referring to the user's values in the database.

202
00:13:55.680 --> 00:14:01.490
So let's go look right now, if you're using the local app to run WordPress locally, just click on

203
00:14:01.490 --> 00:14:07.460
the database tab and then click open, add mynor in your new browser tab on the left hand side, lets

204
00:14:07.460 --> 00:14:09.620
go into the posts table.

205
00:14:10.520 --> 00:14:11.930
Click select data.

206
00:14:13.070 --> 00:14:18.260
Make sure you click the very last page of results, if you scroll down to the bottom click edit on the

207
00:14:18.260 --> 00:14:23.180
very final post that you see and we're interested in this post content field.

208
00:14:23.180 --> 00:14:24.170
So let me zoom in here.

209
00:14:24.560 --> 00:14:27.050
OK, so we've got a standard WordPress paragraph.

210
00:14:27.050 --> 00:14:30.620
If we scroll down, here is our custom block type.

211
00:14:30.620 --> 00:14:32.720
So WP our plug ins.

212
00:14:33.230 --> 00:14:34.450
Are you paying attention?

213
00:14:34.610 --> 00:14:36.410
And now here's the interesting part.

214
00:14:36.920 --> 00:14:44.180
WordPress is storing our attributes object right here in this HTML comment.

215
00:14:44.480 --> 00:14:44.760
Right.

216
00:14:44.790 --> 00:14:46.760
This is the beginning of an HTML comment.

217
00:14:46.790 --> 00:14:47.750
This is the end.

218
00:14:48.260 --> 00:14:53.270
So all of our dynamic data for this instance of the block just lives right here in the comment.

219
00:14:53.600 --> 00:14:56.130
I'm always perfectly happy with this approach.

220
00:14:56.150 --> 00:15:03.350
However, the official WordPress documentation does show you how to use something called source, which

221
00:15:03.350 --> 00:15:08.480
lets your saved HTML string of text be your source of truth.

222
00:15:08.810 --> 00:15:10.520
If you set things up like that.

223
00:15:10.760 --> 00:15:15.740
WordPress doesn't even need to store the object of attributes in the comment.

224
00:15:15.980 --> 00:15:19.220
It will just extract the values from the saved text.

225
00:15:19.460 --> 00:15:24.500
Now, even though we're not going to use that approach in our real examples that we build out, I do

226
00:15:24.500 --> 00:15:25.700
want you to be aware of it.

227
00:15:25.880 --> 00:15:27.390
So let me show you how this would work.

228
00:15:28.010 --> 00:15:33.560
So first of all, if we want the saved HTML to be our source of truth, we need to make sure that the

229
00:15:33.560 --> 00:15:37.490
values are wrapped in unique elements that we can target.

230
00:15:38.030 --> 00:15:39.120
Let me show you what I mean.

231
00:15:39.140 --> 00:15:44.020
So back in our code, down in our save function, we would want to wrap this.

232
00:15:44.030 --> 00:15:45.470
So this first one, sky color.

233
00:15:45.680 --> 00:15:47.570
Let's wrap that in a span.

234
00:15:47.630 --> 00:15:52.610
So opening span tag here you can see LVS code trying to close the spanton here.

235
00:15:52.610 --> 00:15:53.270
We don't want that.

236
00:15:53.270 --> 00:15:55.070
We would want the closing tag here.

237
00:15:55.730 --> 00:15:58.670
And let's give it a unique class that we can target.

238
00:15:58.970 --> 00:16:06.830
Now, in JSM, you don't just say class equals you say class name, uppercase N equals.

239
00:16:07.370 --> 00:16:10.340
This is because class is a reserved word in JavaScript.

240
00:16:10.340 --> 00:16:11.900
So it's always class name.

241
00:16:12.380 --> 00:16:17.900
You can name it anything, but let's just call it sky color and then let's do the same thing for grass

242
00:16:17.900 --> 00:16:18.310
colors.

243
00:16:18.320 --> 00:16:21.590
I'm going to wrap this opening span tag here.

244
00:16:21.800 --> 00:16:23.480
We don't want the closing one here.

245
00:16:23.480 --> 00:16:25.430
We want it after this.

246
00:16:26.540 --> 00:16:31.670
Let's give it a class name equals grass color.

247
00:16:32.210 --> 00:16:33.440
OK, now check this out.

248
00:16:33.650 --> 00:16:36.380
Back up in our attributes definition.

249
00:16:36.710 --> 00:16:42.740
So up at the very top when we're using register block type, when we're describing sky color after type

250
00:16:42.740 --> 00:16:44.030
string, let's add a comma.

251
00:16:44.030 --> 00:16:50.270
We want another property and say that source should equal text comma.

252
00:16:50.270 --> 00:16:56.540
We want another property called Selecter Colon and now you just give it a success.

253
00:16:56.540 --> 00:16:57.770
Ask Selecter.

254
00:16:57.890 --> 00:17:04.190
So just dot sky color because we gave that span element sky color as a class.

255
00:17:04.190 --> 00:17:10.670
And in case you begin with a dot for a class selector, OK, and then do the same thing for grass color.

256
00:17:10.670 --> 00:17:18.680
So give it another property comma source should be text in the selector is just a sixth like selector

257
00:17:18.680 --> 00:17:21.380
of dot grass color.

258
00:17:21.710 --> 00:17:26.210
If this doesn't make sense right now, I think it will in about 30 seconds from now when we see it in

259
00:17:26.210 --> 00:17:26.840
the database.

260
00:17:26.840 --> 00:17:32.660
And I can explain things, but let's go ahead and save our file and we will need to reinsert a new instance

261
00:17:32.660 --> 00:17:33.560
back in the editor.

262
00:17:33.560 --> 00:17:39.900
Because if we refresh because we changed the HTML structure of the saved content, it's no longer valid.

263
00:17:39.900 --> 00:17:41.270
So just delete this block.

264
00:17:41.480 --> 00:17:43.580
But let's insert a new instance of the block.

265
00:17:43.580 --> 00:17:44.840
Are you paying attention?

266
00:17:45.470 --> 00:17:49.760
Let's say the sky color is teal and the grass color is yellow.

267
00:17:50.000 --> 00:17:51.470
Let's go ahead and update that.

268
00:17:51.680 --> 00:17:54.260
And now let's go look at that in the database.

269
00:17:54.860 --> 00:18:00.560
So in admin or you'll need to go back a page refresh and just make sure that you are indeed editing

270
00:18:00.560 --> 00:18:03.590
the very last or final post notice.

271
00:18:03.590 --> 00:18:06.650
There is no comment with those attributes.

272
00:18:06.830 --> 00:18:10.550
Instead, it's just this HTML string of text.

273
00:18:10.910 --> 00:18:13.400
So this still works perfectly in the admin area.

274
00:18:13.400 --> 00:18:16.250
If I refresh the front end, it still works perfectly there.

275
00:18:16.550 --> 00:18:22.340
The only difference is WordPress doesn't need to save a copy of our attributes in the comment.

276
00:18:22.760 --> 00:18:28.700
Instead, we're using this string of text as our source of truth and we're extracting or pulling values

277
00:18:28.700 --> 00:18:29.270
out of it.

278
00:18:29.690 --> 00:18:31.430
Now, there's nothing wrong with this approach.

279
00:18:31.430 --> 00:18:35.750
I'm sure it's the correct option for certain types of plug ins and block types.

280
00:18:35.750 --> 00:18:44.480
But personally, in my opinion, I never use this approach will get into Y in the very next lesson.

281
00:18:44.840 --> 00:18:51.170
But for now, I'm actually going to remove source and selector from my attributes definition because

282
00:18:51.500 --> 00:18:55.040
I don't want my string of text to be my source of truth.

283
00:18:55.250 --> 00:18:58.070
I want to store my data in the comment.

284
00:18:58.550 --> 00:19:02.480
So I only showed you how to use source like this because I don't want to be dogmatic.

285
00:19:02.480 --> 00:19:07.070
I don't want to totally force my opinions on you, but I am going to remove that for now.

286
00:19:07.070 --> 00:19:11.510
So I'm going back to just having type as the only property for my attributes.

287
00:19:12.280 --> 00:19:16.120
Just so we're on the same page, I'm going to save and then let you know that you will have to insert

288
00:19:16.120 --> 00:19:22.300
a new copy, so if you refresh, you'll need to delete that old instant's insert a new one, let's say

289
00:19:22.300 --> 00:19:25.270
blue and green click update.

290
00:19:25.480 --> 00:19:25.920
Cool.

291
00:19:26.260 --> 00:19:30.340
Now, trust me, right now, I know that there's a lot of different moving pieces involved and there's

292
00:19:30.340 --> 00:19:32.110
plenty of room for confusion.

293
00:19:32.260 --> 00:19:37.630
But I think in our very next lesson, we're going to tie up a lot of loose ends and connect the dots

294
00:19:37.630 --> 00:19:41.090
between several different topics to give you a bit of a hint.

295
00:19:41.470 --> 00:19:46.720
What if we don't want just a static string of text to be the result for our block type?

296
00:19:47.050 --> 00:19:51.070
What if we want to do something truly dynamic, something that needs to happen?

297
00:19:51.070 --> 00:19:53.200
Server side with HTTP.

298
00:19:53.920 --> 00:19:55.500
That's what we're going to cover in the next video.

299
00:19:55.510 --> 00:19:56.500
It should be a lot of fun.

300
00:19:56.770 --> 00:19:58.930
Let's keep things rolling and I'll see you then.
