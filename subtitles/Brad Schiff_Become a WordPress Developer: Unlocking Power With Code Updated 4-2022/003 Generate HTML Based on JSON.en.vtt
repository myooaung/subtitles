WEBVTT
1
00:00:01.880 --> 00:00:03.030
Hello, everyone.

2
00:00:03.440 --> 00:00:10.710
In this lesson, we will learn how to generate each HTML based on JSON data on the fly.

3
00:00:11.150 --> 00:00:16.910
However, before we get into that, I first want to take just a minute or two to congratulate you,

4
00:00:17.450 --> 00:00:23.810
because since you've completed the previous lesson, you can now say that you've worked with the WordPress

5
00:00:24.140 --> 00:00:25.690
rest API.

6
00:00:26.030 --> 00:00:28.700
So the question becomes, what in the world does that mean?

7
00:00:28.700 --> 00:00:31.470
What is the WordPress rest API?

8
00:00:31.790 --> 00:00:37.340
It's a term that we did not hear in the previous lesson because there were already enough buzz words

9
00:00:37.340 --> 00:00:38.750
and phrases floating around.

10
00:00:38.750 --> 00:00:41.270
And I didn't want to bombard you with yet another one.

11
00:00:41.600 --> 00:00:47.810
But now that we're in a new lesson, I want you to know what the WordPress rest API is.

12
00:00:48.170 --> 00:00:54.530
The simplest answer is that these different URLs that we've been learning about that return JSON write

13
00:00:54.530 --> 00:01:00.650
these URLs where at the end of the root of the WordPress you are URL, you add on slash, WP, dash,

14
00:01:00.650 --> 00:01:05.990
JSON, WP, V2 and then posts or pages or something else.

15
00:01:06.380 --> 00:01:14.330
These new URLs make up what is known as the WordPress rest API and the entire point of the rest API

16
00:01:14.330 --> 00:01:22.940
is that it makes it possible to work with WordPress data and content outside of the context of the programming

17
00:01:22.940 --> 00:01:31.220
language, because basically every modern programming language today can send HTTP requests to use URLs

18
00:01:31.220 --> 00:01:31.940
like this.

19
00:01:32.330 --> 00:01:36.840
And also every modern programming language can interpret JSON data.

20
00:01:37.280 --> 00:01:43.220
Now in our case, in this course we are using JavaScript, but you could technically create a native

21
00:01:43.220 --> 00:01:50.450
Android or iOS application that communicates with a WordPress website through the rest API.

22
00:01:50.720 --> 00:01:56.900
Or you could create a Ruby or Python or no JS app that communicates with WordPress.

23
00:01:57.140 --> 00:02:04.820
So the rest API really opens up what's possible with WordPress because it makes the four CRUD operations

24
00:02:04.820 --> 00:02:06.950
available from just about anywhere.

25
00:02:07.160 --> 00:02:08.290
But what does that mean?

26
00:02:08.330 --> 00:02:09.460
What is CRUD?

27
00:02:09.940 --> 00:02:16.960
KRudd is an acronym that stands for Create, Read, Update and Delete.

28
00:02:17.420 --> 00:02:22.910
Now, at this point in the course, we've only learned about the R in crud when it comes to the rest

29
00:02:22.910 --> 00:02:27.970
API R stands for read, which is just another way of saying load.

30
00:02:28.280 --> 00:02:34.670
So for example, in our previous lesson we learned how to use query to send off a request to this U.

31
00:02:34.670 --> 00:02:39.500
URL, and our goal was to read or load JSON data.

32
00:02:39.800 --> 00:02:40.130
Right.

33
00:02:40.130 --> 00:02:44.240
We wanted to read in information about existing posts.

34
00:02:44.570 --> 00:02:54.380
However, believe it or not, the rest API Urals can actually be used to create brand new posts or update

35
00:02:54.380 --> 00:02:55.640
existing posts.

36
00:02:55.640 --> 00:03:01.580
For example, if you wanted to change the title of an existing post, or we can even use these URLs

37
00:03:01.580 --> 00:03:03.790
to delete an existing post.

38
00:03:04.070 --> 00:03:09.830
Now, again, in the case of a search, which is what we are currently building, we only need the R

39
00:03:09.830 --> 00:03:11.060
in crud, right?

40
00:03:11.060 --> 00:03:13.730
We only need to read or lodin content.

41
00:03:14.000 --> 00:03:21.800
But don't worry, a bit later on in the course, we will indeed learn how to create new posts and update

42
00:03:21.800 --> 00:03:25.550
or delete existing posts through the rest API.

43
00:03:26.150 --> 00:03:32.510
By the end of this course, we will cover all four bases of the CRUD acronym, but let's not get ahead

44
00:03:32.510 --> 00:03:33.260
of ourselves.

45
00:03:33.530 --> 00:03:39.290
So right now, let's stay focused on building our live search results feature.

46
00:03:39.560 --> 00:03:45.260
Now, before we get started and jump into the action for this lesson, I just have one final note for

47
00:03:45.260 --> 00:03:45.530
you.

48
00:03:45.680 --> 00:03:50.330
So, yes, we are going to learn a lot about the rest API throughout this course.

49
00:03:50.630 --> 00:03:57.110
But I do want you to be aware of the official WordPress documentation on the rest API.

50
00:03:57.470 --> 00:04:02.090
Now, of course, the luxury of the video, of course, that you're watching right now is that you don't

51
00:04:02.090 --> 00:04:05.060
need to come to this documentation and study everything.

52
00:04:05.480 --> 00:04:05.750
Right.

53
00:04:05.760 --> 00:04:08.240
My job is to make this easy to understand.

54
00:04:08.240 --> 00:04:13.520
But I do want this to be on your radar, because this is from the official source, right?

55
00:04:13.520 --> 00:04:15.410
This is WordPress dot org.

56
00:04:15.770 --> 00:04:21.080
This resource contains everything you could ever want to know about the rest API.

57
00:04:21.260 --> 00:04:27.710
OK, now, having said all of this, let's jump right back into the action and let's learn how to generate

58
00:04:27.950 --> 00:04:33.370
each HTML based on the incoming JSON data for our search results.

59
00:04:33.890 --> 00:04:40.040
So right now, let's jump into our text editor and in our theme folder, let's go into the JavaScript

60
00:04:40.040 --> 00:04:49.580
modules folder and open up search JS and let's scroll down to our method that is named Get Results.

61
00:04:49.940 --> 00:04:55.880
Remember, this is the method we created in the previous lesson that sends out a request to this you

62
00:04:55.900 --> 00:05:00.830
URL that is powered by the WordPress rest API and then once this.

63
00:05:01.020 --> 00:05:04.210
URL or the WordPress server has a chance to respond.

64
00:05:04.500 --> 00:05:10.890
Then this line of code will run and remember, just as a test, we were creating an annoying alert pop

65
00:05:10.890 --> 00:05:17.720
up message that looked inside the array of the incoming JSON data and then output the title property.

66
00:05:17.940 --> 00:05:25.350
So as of right now, if I open up the overlay and search for Buyology, we see a pop up with the title

67
00:05:25.350 --> 00:05:27.290
of a post from the search results.

68
00:05:27.630 --> 00:05:29.550
But that's not what we actually want.

69
00:05:29.730 --> 00:05:31.260
We don't want to create a pop up.

70
00:05:31.530 --> 00:05:34.950
We want to display the results as HTML.

71
00:05:35.250 --> 00:05:35.550
Right.

72
00:05:35.550 --> 00:05:40.480
We want to replace the div with this spinner loader icon to contain the results.

73
00:05:40.920 --> 00:05:47.910
So back in our code, let's delete this alert line that creates that pop up message and instead let's

74
00:05:47.910 --> 00:05:50.910
try to edit the HTML of this results.

75
00:05:50.910 --> 00:05:51.450
Div.

76
00:05:51.870 --> 00:05:58.080
You might remember that we have a property that belongs to our object named results div so we can say

77
00:05:58.080 --> 00:06:06.540
this dot results div and then we can use the query method named HTML to adjust its markup.

78
00:06:06.810 --> 00:06:10.460
So just as a test we could say immagine results here.

79
00:06:11.070 --> 00:06:17.430
But before I go ahead and save this, I need to take care of an issue that has to do with this keyword

80
00:06:17.670 --> 00:06:23.250
because within the body of this anonymous function, remember, if I scroll over to the right, this

81
00:06:23.250 --> 00:06:29.370
is the callback function that will run once the euro and server has had a chance to respond anyways,

82
00:06:29.370 --> 00:06:36.210
within that function, that anonymous function, the this keyword is going to point towards the JSON

83
00:06:36.210 --> 00:06:39.160
method because that's what executed the function.

84
00:06:39.390 --> 00:06:45.960
So the question becomes, what can we do so that on this line of code, the this keyword still points

85
00:06:45.960 --> 00:06:48.390
towards our main search object?

86
00:06:48.720 --> 00:06:51.030
Well, there are two main ways of achieving that.

87
00:06:51.510 --> 00:06:55.380
The first is to just use binde like we've been doing all along.

88
00:06:55.650 --> 00:06:55.890
Right.

89
00:06:55.920 --> 00:07:02.820
So if I scroll to the right, this anonymous inline function definition begins right here and it ends

90
00:07:02.820 --> 00:07:04.700
down here with this curly bracket.

91
00:07:04.980 --> 00:07:12.870
So just like we've done before, right after the mention of a function, we can just say dot bind this.

92
00:07:13.350 --> 00:07:14.970
So that's our first option.

93
00:07:14.970 --> 00:07:18.000
But let me actually delete this behind this.

94
00:07:18.360 --> 00:07:24.300
So I'm just deleting from the period that we just added to the end of the bind this parentheses.

95
00:07:24.720 --> 00:07:26.340
So let me put that back in place.

96
00:07:26.670 --> 00:07:29.480
And I want to show you a second way of handling this.

97
00:07:29.790 --> 00:07:35.730
So if I scroll over to the right, whenever you create an anonymous inline function like this, write

98
00:07:35.730 --> 00:07:37.650
a function that doesn't have a name.

99
00:07:37.890 --> 00:07:45.240
We can use an alternative JavaScript syntax, which is commonly called an E six arrow function.

100
00:07:45.500 --> 00:07:50.280
So let me show you what we can do instead of saying function and then parentheses with our parameter,

101
00:07:50.490 --> 00:07:56.220
we can delete that and instead just type out the name of a parameter that you want.

102
00:07:56.610 --> 00:08:02.190
And then instead of spelling out the word function, we can just say equal sign greater than smooshed

103
00:08:02.190 --> 00:08:03.890
together to create this symbol.

104
00:08:04.170 --> 00:08:06.690
And this is what we call an arrow function.

105
00:08:07.020 --> 00:08:12.210
And the nice thing about this is that it does not change the value of this key word.

106
00:08:12.450 --> 00:08:16.890
So when this code runs, this will still be pointing towards our main object.

107
00:08:16.890 --> 00:08:18.210
So we are in business.

108
00:08:18.600 --> 00:08:22.470
So if I go ahead and save that, give it a test.

109
00:08:22.770 --> 00:08:25.860
If I search for award, perfect.

110
00:08:25.860 --> 00:08:27.720
We see immagine results here.

111
00:08:28.070 --> 00:08:32.150
So now instead of this placeholder text, let's output the real deal.

112
00:08:32.580 --> 00:08:39.120
So when we are modifying the HTML of that div, let's delete this placeholder text and instead let's

113
00:08:39.120 --> 00:08:48.480
imagine we want to output a heading level to that reads general information and then right after the

114
00:08:48.480 --> 00:08:53.180
heading level to maybe we would want a bulleted list of the different results.

115
00:08:53.700 --> 00:09:00.690
So an unordered list opening and closing and then within there we would have a list item for each post

116
00:09:00.690 --> 00:09:01.620
in the results.

117
00:09:01.980 --> 00:09:07.800
But right away you'll notice that writing HTML on one line like this is miserable.

118
00:09:08.130 --> 00:09:13.920
When HTML is smooshed together on a single line, it's really hard to look at and work with.

119
00:09:14.190 --> 00:09:19.830
Now, in the past we were forced to do this with JavaScript because there was no easy way of breaking

120
00:09:19.830 --> 00:09:21.150
down to a new line.

121
00:09:21.360 --> 00:09:26.880
For example, in traditional JavaScript, when you open up a string of text, if I wanted to drop down

122
00:09:26.880 --> 00:09:33.540
to a new line, maybe after the age to notice, my text editor immediately throws the color red to show

123
00:09:33.540 --> 00:09:34.800
me that something's wrong.

124
00:09:35.010 --> 00:09:41.340
So in traditional JavaScript, to get around this at the end of a line, you could add a backslash and

125
00:09:41.340 --> 00:09:42.220
that's OK, right?

126
00:09:42.250 --> 00:09:45.360
So then you could just break down a new line whenever you want to.

127
00:09:47.540 --> 00:09:51.150
So this is starting to look like normal HTML on different lines.

128
00:09:51.150 --> 00:09:56.510
But who wants to go through the trouble of adding a backslash at the end of every line?

129
00:09:56.760 --> 00:09:58.130
That's not very convenient.

130
00:09:58.170 --> 00:10:00.630
So let me control Z to undo.

131
00:10:01.110 --> 00:10:07.710
Now, luckily, in modern JavaScript, there's something named a template literal that will solve a

132
00:10:07.710 --> 00:10:08.910
lot of our problems.

133
00:10:09.240 --> 00:10:10.070
So check this out.

134
00:10:10.080 --> 00:10:14.360
Let's completely empty out the parentheses for the HTML method.

135
00:10:14.910 --> 00:10:17.220
So let's go back to just this, right?

136
00:10:17.220 --> 00:10:19.680
We want to modify the HTML of this div.

137
00:10:20.040 --> 00:10:26.820
And now instead of creating a traditional string of text using single quotes or double quotes, instead

138
00:10:26.820 --> 00:10:29.710
of that, let's use a back tick.

139
00:10:30.240 --> 00:10:34.620
So this is the key on your keyboard that's directly to the left of the one key.

140
00:10:34.830 --> 00:10:37.590
And I'm not referring to the one key on your number pad.

141
00:10:37.770 --> 00:10:40.290
I'm referring towards the left side of your keyboard.

142
00:10:40.560 --> 00:10:41.940
So just get a back tick.

143
00:10:41.940 --> 00:10:43.050
Two of them actually.

144
00:10:43.260 --> 00:10:47.490
And in between them, we can now do basically whatever we want.

145
00:10:47.880 --> 00:10:51.690
So let me show you what I like to do in between our two back decks.

146
00:10:51.690 --> 00:10:57.420
I actually like to drop down to a new line and let me get the indentation to line up.

147
00:10:58.110 --> 00:11:03.750
And now that we've created a template literal with the back text, we can just write good old fashioned

148
00:11:03.750 --> 00:11:07.640
HTML in dropdown to new lines without any problems.

149
00:11:08.220 --> 00:11:14.430
So let's create a heading level to and have it say, general information.

150
00:11:15.480 --> 00:11:18.870
And then below that, let's create an unordered list.

151
00:11:20.100 --> 00:11:22.740
And within that let's create a list item.

152
00:11:23.490 --> 00:11:26.070
And within the list item, let's create a link.

153
00:11:26.080 --> 00:11:27.990
Right so you can click on the result.

154
00:11:28.350 --> 00:11:34.800
For now, let's just set the aircraft to be a hash tag as a placeholder and let's close out the link,

155
00:11:34.920 --> 00:11:35.260
OK?

156
00:11:35.280 --> 00:11:40.230
And then within the tag, this is what the user will actually click on so we can say click me just as

157
00:11:40.230 --> 00:11:40.890
a test.

158
00:11:41.190 --> 00:11:47.460
And before we save this, why don't we add a few classes to our elements just so styling is in place

159
00:11:47.460 --> 00:11:48.710
and things will look nice.

160
00:11:49.080 --> 00:11:58.350
So on the heading level too, I'm going to give it a class of search dash overlay, underscore, underscore

161
00:11:58.350 --> 00:12:03.360
section title that will control the color and the font size.

162
00:12:03.630 --> 00:12:11.130
And then on the unordered list, let's give that a class of link list and min list.

163
00:12:12.640 --> 00:12:15.300
OK, let's go ahead and say this and test it out.

164
00:12:15.630 --> 00:12:18.720
Open up the search and look for Buyology.

165
00:12:19.920 --> 00:12:20.340
Cool.

166
00:12:20.340 --> 00:12:21.000
Looks good.

167
00:12:21.030 --> 00:12:26.790
So now let's just actually use our real JSON data for this result item.

168
00:12:27.510 --> 00:12:34.170
So back in the code, instead of this placeholder title of Click Me, let's use the actual title of

169
00:12:34.170 --> 00:12:35.330
the results post.

170
00:12:35.730 --> 00:12:41.610
So remember that this anonymous function of ours has a parameter named posts and this is where we can

171
00:12:41.610 --> 00:12:44.400
access all of the incoming JSON data.

172
00:12:44.790 --> 00:12:50.640
So back in our Clixby area, since we are in the middle of a template literal, which was created by

173
00:12:50.640 --> 00:12:57.480
our back ticks by default, any text that we type is not going to be evaluated as JavaScript code.

174
00:12:57.750 --> 00:13:01.470
It's just going to be output onto the page as plain text.

175
00:13:01.740 --> 00:13:06.020
However, if we do want to run a JavaScript expression right.

176
00:13:06.030 --> 00:13:11.760
Or access a piece of dynamic data that lives within our posts parameter, all we need to do is this.

177
00:13:12.090 --> 00:13:18.480
So if we delete this hardcoded, click me and in its place, let's type out dollar sign and then curly

178
00:13:18.480 --> 00:13:19.270
brackets.

179
00:13:20.190 --> 00:13:26.100
Now in this context, the dollar sign has nothing to do with J query within a template literal.

180
00:13:26.100 --> 00:13:31.230
The dollar sign in combination with curly brackets is a native part of JavaScript.

181
00:13:31.620 --> 00:13:37.140
This combination of characters tells JavaScript that what we are about to include within the curly brackets

182
00:13:37.410 --> 00:13:43.740
should be evaluated as real JavaScript code instead of just plain text or string text like the rest

183
00:13:43.740 --> 00:13:44.250
of this.

184
00:13:44.670 --> 00:13:50.040
So within this expression, within the curly brackets, we can just say posts to start working with

185
00:13:50.040 --> 00:13:51.690
that incoming JSON data.

186
00:13:52.020 --> 00:13:53.340
And remember, it's an array.

187
00:13:53.340 --> 00:13:58.860
So let's look within the first item in the array and then we are interested in the title of the post.

188
00:13:59.220 --> 00:14:00.630
So DOT title.

189
00:14:00.990 --> 00:14:04.400
And then let me open post man just to refresh our memory.

190
00:14:04.650 --> 00:14:09.930
So for example, if someone searches for Buyology, this JSON data will be the result.

191
00:14:09.930 --> 00:14:16.050
And notice that the title property is an object itself that contains an inappropriately property named

192
00:14:16.050 --> 00:14:18.650
rendered, and that's where the title lives.

193
00:14:18.990 --> 00:14:24.690
So back in our code, let's look inside the title property for rendered.

194
00:14:25.140 --> 00:14:28.600
OK, let's go ahead and save this and test it out.

195
00:14:29.820 --> 00:14:32.730
So if I search for biology, perfect.

196
00:14:32.730 --> 00:14:35.040
There we see the title of the resulting post.

197
00:14:35.580 --> 00:14:38.040
But if I click on this link, nothing happens.

198
00:14:38.400 --> 00:14:41.370
And that's because we did not fill in the address value.

199
00:14:41.910 --> 00:14:43.020
So let's do that now.

200
00:14:43.020 --> 00:14:45.390
Let's just delete that placeholder hash tag.

201
00:14:45.840 --> 00:14:50.160
And then instead of just plain text, we want to evaluate a little bit of JavaScript.

202
00:14:50.550 --> 00:14:57.090
So dollar sign curly brackets, OK, and then let's just look inside our JSON data for the first item

203
00:14:57.090 --> 00:15:00.680
in the array and then in postmen, you'll notice that there's.

204
00:15:00.740 --> 00:15:07.220
A property named Linc and that contains the permalink, so within our code, once we are looking at

205
00:15:07.220 --> 00:15:12.710
that first item in the array, let's just say dot link and that will grab the Eurail property.

206
00:15:13.190 --> 00:15:14.440
So let's save that.

207
00:15:15.140 --> 00:15:20.300
And now if I search for Buyology again, there's the link.

208
00:15:20.300 --> 00:15:24.140
And if I click on it, it actually takes me to that post.

209
00:15:24.500 --> 00:15:25.430
And that's great.

210
00:15:25.430 --> 00:15:30.010
But what about search terms that we know will return multiple results?

211
00:15:30.470 --> 00:15:38.390
So, for example, if I search for lorem as in lorem ipsum, I have at least four or five blog posts

212
00:15:38.390 --> 00:15:39.860
that contain this word.

213
00:15:40.020 --> 00:15:47.330
However, we only see one result item here because our code is hard coded to only work with the first

214
00:15:47.330 --> 00:15:49.550
item in the resulting array.

215
00:15:49.850 --> 00:15:57.260
So for example, in Postman, if I perform a search for Borum in the results, you can see that there

216
00:15:57.260 --> 00:16:00.860
are four objects, right, for blog posts.

217
00:16:01.190 --> 00:16:05.360
So let's learn how to write code in the JavaScript of our template.

218
00:16:05.360 --> 00:16:08.010
Literal to loop through an array.

219
00:16:08.300 --> 00:16:08.620
Right.

220
00:16:08.630 --> 00:16:12.800
We want to do something once for each item in the array.

221
00:16:13.070 --> 00:16:18.110
Now before we worry about working with the actual post objects, why don't we do this?

222
00:16:18.110 --> 00:16:23.930
So follow along and type this out with me right above this line where we are editing the HTML for the

223
00:16:23.930 --> 00:16:24.290
div.

224
00:16:24.290 --> 00:16:25.070
Right above that.

225
00:16:25.430 --> 00:16:32.240
Let's create a test array so far for variable and we could name it whatever, but let's name it test

226
00:16:32.240 --> 00:16:38.630
array and let's set it to an array that just contains red, orange, yellow.

227
00:16:39.260 --> 00:16:45.710
OK, and let's imagine that within our bulleted list we want to create a list item for each one of these

228
00:16:45.710 --> 00:16:46.390
items.

229
00:16:46.820 --> 00:16:49.860
So down here, let's actually delete this list item.

230
00:16:50.750 --> 00:16:53.420
So now we've just got an empty unordered list.

231
00:16:53.420 --> 00:16:58.760
And let me show you a neat way that we can loop through an array within a template literal.

232
00:16:59.030 --> 00:17:04.730
So to begin an expression, we use dollar sign curly brackets and then let's just type out the name

233
00:17:04.730 --> 00:17:05.440
of the array.

234
00:17:05.450 --> 00:17:08.980
So the name of the variable is test array.

235
00:17:09.410 --> 00:17:17.510
And in JavaScript, every array has access to a method named map and map can be used to create a new

236
00:17:17.510 --> 00:17:19.000
version of the array.

237
00:17:19.280 --> 00:17:25.760
Now within the parentheses for MAP, it wants us to give it a function that it will run once for each

238
00:17:25.760 --> 00:17:27.060
item in the array.

239
00:17:27.350 --> 00:17:32.270
Now, instead of referencing another function, why don't we just create an anonymous inline function

240
00:17:32.270 --> 00:17:37.030
right here and let's actually use the shorthand arrow function syntax.

241
00:17:37.250 --> 00:17:39.910
So let's give ourselves a parameter named item.

242
00:17:39.920 --> 00:17:45.500
You could choose any parameter name you want and then the arrow symbol and then normally you would create

243
00:17:45.500 --> 00:17:48.140
curly brackets to create a body of the function.

244
00:17:48.140 --> 00:17:52.610
But if you write it all on one line, you don't even need the curly brackets.

245
00:17:52.850 --> 00:17:55.730
So for each item in this array, let's just do this.

246
00:17:55.760 --> 00:18:01.730
Let's create a template literal within the context of our map method and we just want to create a list

247
00:18:01.730 --> 00:18:02.780
item for each one.

248
00:18:03.020 --> 00:18:08.710
And inside the list item, let's use this expression combo, the item.

249
00:18:09.140 --> 00:18:13.760
So this would be a list item and then this would get substituted with the value of red and then the

250
00:18:13.760 --> 00:18:15.230
value of orange and yellow.

251
00:18:15.620 --> 00:18:20.630
So with the map method, here we are creating a new version of the array that uses list items.

252
00:18:21.140 --> 00:18:26.870
But when the template literal tries to output the array, it's still going to include commas in between

253
00:18:26.870 --> 00:18:27.680
each item.

254
00:18:28.010 --> 00:18:34.310
So what we can do is right after the map method is right after this closing parentheses here, you can

255
00:18:34.310 --> 00:18:41.020
say DOT join and in JavaScript join is how you can convert an array to a simple string.

256
00:18:41.390 --> 00:18:48.470
Now, within the parentheses, if we said Dasch or X, that will be placed in between each item.

257
00:18:48.680 --> 00:18:54.650
But if we just include a blank quotation, there won't be anything placed in between each item when

258
00:18:54.650 --> 00:18:56.200
they get converted to a string.

259
00:18:56.420 --> 00:19:02.540
So if we go ahead and save this perfect, we see a list item for each one of the values in the array.

260
00:19:02.810 --> 00:19:07.520
So now all we need to do is forget about this test array of red, orange and yellow.

261
00:19:08.250 --> 00:19:09.500
Let's delete that line.

262
00:19:09.830 --> 00:19:14.900
And down here, instead of working with test array, let's delete that and let's work with our posts

263
00:19:14.900 --> 00:19:18.320
parameter that contains the JSON search results.

264
00:19:18.590 --> 00:19:18.790
Right.

265
00:19:18.860 --> 00:19:21.710
So each item in this array is a blog post.

266
00:19:21.950 --> 00:19:22.940
So let's do this.

267
00:19:22.940 --> 00:19:27.620
Let's output a list item and within it let's create a link.

268
00:19:28.940 --> 00:19:31.700
OK, now the text that someone should click on is the title.

269
00:19:31.700 --> 00:19:38.870
So let's use an expression and we can just say item dot title dot rendered.

270
00:19:39.590 --> 00:19:45.770
And then for the RF value we can just create an expression and say item, dot link.

271
00:19:46.190 --> 00:19:52.850
OK, if I go ahead and save that and perform a search for lorem beautiful, we see all of the search

272
00:19:52.850 --> 00:19:55.930
results that's going to bring this lesson to a close.

273
00:19:55.970 --> 00:19:58.340
Let's keep it rolling and I'll see in the next one.
