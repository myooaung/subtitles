1
00:00:02,180 --> 00:00:03,080
Hello, everyone.

2
00:00:03,590 --> 00:00:10,610
In this lesson, we will learn how to set up a menu of children page links for the current page that

3
00:00:10,610 --> 00:00:11,360
you are viewing.

4
00:00:11,720 --> 00:00:15,500
So, for example, if I navigate to our About US page.

5
00:00:16,480 --> 00:00:23,710
We know that this page has two children pages named our history and our goals, but we don't see links

6
00:00:23,710 --> 00:00:24,610
to those anywhere.

7
00:00:24,910 --> 00:00:30,940
So our goal for this lesson is to add a menu right about here that has links to the applicable children

8
00:00:30,940 --> 00:00:31,630
pages.

9
00:00:32,020 --> 00:00:37,780
If you think back to several lessons ago, you will remember that we actually commented out that menu.

10
00:00:38,260 --> 00:00:44,470
So over in your text editor within your theme folder, jump into page dot p HP.

11
00:00:45,010 --> 00:00:48,130
And if you scroll down about halfway or a little bit further.

12
00:00:48,460 --> 00:00:50,770
Remember this div that we commented out?

13
00:00:51,400 --> 00:00:56,860
So at this point we can just remove these comments and then remove this closing comment down here.

14
00:00:57,820 --> 00:00:58,020
OK.

15
00:00:58,090 --> 00:01:01,090
So we've got this div with the class of page links.

16
00:01:01,480 --> 00:01:06,460
And if I save this and refresh the page, here's the menu that I'm referring to.

17
00:01:06,490 --> 00:01:10,180
But right now it's hard coded, which means it's not dynamic.

18
00:01:10,570 --> 00:01:17,380
What I mean is the hard coded data of about us, our history and our goals only makes sense because

19
00:01:17,380 --> 00:01:18,850
that's a contrived example.

20
00:01:19,420 --> 00:01:25,870
But if we scroll down to the foder and click on the privacy policy page now, it becomes painfully obvious

21
00:01:25,900 --> 00:01:27,730
that the menu is not dynamic.

22
00:01:27,970 --> 00:01:28,150
Right.

23
00:01:28,180 --> 00:01:32,920
Instead of about us, this should say privacy policy, which is the current parent page.

24
00:01:33,430 --> 00:01:38,110
And then down here we should see links to any privacy policy children pages.

25
00:01:38,560 --> 00:01:42,670
So right now, let's begin writing the code to make this menu dynamic.

26
00:01:43,060 --> 00:01:48,760
Let's focus on this list of children links first and then after that, we'll work on this parent page

27
00:01:48,760 --> 00:01:49,540
header link.

28
00:01:49,990 --> 00:01:54,400
So back in the code, here is the unordered list of links.

29
00:01:54,880 --> 00:01:55,120
Right.

30
00:01:55,150 --> 00:01:57,140
There is a list item for each link.

31
00:01:57,640 --> 00:02:00,410
So we don't want these list items to be hard coded.

32
00:02:00,550 --> 00:02:02,290
So let's just delete these.

33
00:02:03,430 --> 00:02:05,970
So now we have an empty fuel element.

34
00:02:06,310 --> 00:02:15,330
And within that element, let's drop in to P HP and let's call a WordPress function named WP.

35
00:02:15,880 --> 00:02:18,010
List pages.

36
00:02:19,180 --> 00:02:25,530
Now, before we even worry about providing any arguments inside the parentheses, let's just save this

37
00:02:25,600 --> 00:02:26,860
and see what it does.

38
00:02:28,230 --> 00:02:35,100
So that function created links to every single page on our Web site, which is obviously not what we

39
00:02:35,100 --> 00:02:35,580
want.

40
00:02:35,910 --> 00:02:39,540
We only want children pages of the current page being viewed.

41
00:02:39,960 --> 00:02:46,600
Also up here, we can see that this function output's this odd little title named pages.

42
00:02:46,980 --> 00:02:48,150
And we don't want this.

43
00:02:48,540 --> 00:02:55,050
So the question becomes, how do we tell this function WP list pages to do what we want it to do?

44
00:02:55,410 --> 00:03:00,180
Well, obviously, that's the job of arguments that we can pass it within the parentheses.

45
00:03:00,450 --> 00:03:05,880
However, this function needs us to provide it arguments in a very specific format.

46
00:03:06,090 --> 00:03:12,320
So, for example, we can't just include one argument and then a comma and then another argument instead.

47
00:03:12,600 --> 00:03:17,170
This function wants us to pass it an array and not just any array.

48
00:03:17,250 --> 00:03:19,920
It needs an associative array.

49
00:03:20,310 --> 00:03:26,010
So right now, let's take a quick time out and forget about this function and instead answer the question,

50
00:03:26,280 --> 00:03:29,040
what in the world is an associated array?

51
00:03:29,640 --> 00:03:34,710
So several lessons ago, we saw an example of a very basic array.

52
00:03:35,430 --> 00:03:39,120
So to refresh your memory, let me create a very basic array.

53
00:03:39,570 --> 00:03:46,650
Maybe I'll create a variable named animals and set it to equal an array.

54
00:03:47,460 --> 00:03:50,580
So then within that array, I can say cat.

55
00:03:51,930 --> 00:03:52,590
Dog.

56
00:03:52,620 --> 00:03:53,610
Karma pig.

57
00:03:54,420 --> 00:04:00,120
So an array lets us have multiple pieces of data that live within a larger collection.

58
00:04:00,480 --> 00:04:05,070
However, what if I wanted to associate a value with each animal?

59
00:04:05,460 --> 00:04:10,830
So for example, what if I wanted to list the sound that each animal makes?

60
00:04:11,040 --> 00:04:14,200
So for cat it would be meow for dog.

61
00:04:14,220 --> 00:04:15,210
It would be bark.

62
00:04:15,570 --> 00:04:17,130
And for pig it would be oink.

63
00:04:17,460 --> 00:04:21,930
Well, in order to do that, I would need to create an associative array.

64
00:04:22,320 --> 00:04:23,100
So check this out.

65
00:04:23,190 --> 00:04:24,420
Let me delete this line.

66
00:04:24,720 --> 00:04:32,880
And let's imagine I want to create a variable named Animal Sounds, and I set it to equal an array.

67
00:04:33,330 --> 00:04:36,030
And then within the array, the first item is Cat.

68
00:04:36,540 --> 00:04:41,700
And then right after cat, I say equal symbol, greater than meow.

69
00:04:42,180 --> 00:04:45,090
And then include a comma and do the same thing for dog.

70
00:04:45,660 --> 00:04:48,720
Now I could list all the items on a single line.

71
00:04:48,990 --> 00:04:54,600
But when I'm working with associates of arrays just to stay organized, I like to put each one on its

72
00:04:54,690 --> 00:04:55,470
own line.

73
00:04:56,550 --> 00:04:59,080
So you've got cat equals meow.

74
00:04:59,400 --> 00:05:09,410
Then comma dog equal symbol greater than dog equals bark, comma pig equals point.

75
00:05:10,500 --> 00:05:13,830
And this is an example of an associated array.

76
00:05:14,220 --> 00:05:17,040
We've associated a value with each item.

77
00:05:18,030 --> 00:05:25,350
And now maybe later on in my code, if I want to access the sound that a dog makes and maybe I want

78
00:05:25,350 --> 00:05:31,020
to echo it out onto the page, I can just say, Echo, look inside my variable.

79
00:05:31,050 --> 00:05:34,050
So echo the animal sounds.

80
00:05:34,620 --> 00:05:40,290
And then to look inside an array, you use square brackets and then instead of looking for a zero based

81
00:05:40,350 --> 00:05:41,640
numerical key.

82
00:05:41,970 --> 00:05:47,490
Since we are working with an associative array, we can just reference this label or t name.

83
00:05:47,810 --> 00:05:50,460
So within the square brackets, I could just say dog.

84
00:05:50,940 --> 00:05:53,400
And be sure to end that line with a semicolon.

85
00:05:53,910 --> 00:05:58,920
And if we save and refresh there, we see the value of bark.

86
00:05:59,400 --> 00:05:59,820
Cool.

87
00:06:00,060 --> 00:06:05,820
So now that we are at least a little bit familiar with an associative array, let's get back to the

88
00:06:05,820 --> 00:06:10,370
task at hand, which is working with this WP list pages function.

89
00:06:11,040 --> 00:06:13,050
So let me delete this example code.

90
00:06:15,610 --> 00:06:21,730
And now let's get down to business of providing this function with an associate of Ray that tells it

91
00:06:21,820 --> 00:06:23,530
exactly what we want it to do.

92
00:06:24,310 --> 00:06:32,110
So within the parentheses, let's say, of Ray and then give the word Ray its own pair of parentheses.

93
00:06:32,440 --> 00:06:32,680
Right.

94
00:06:32,710 --> 00:06:35,440
This is how you create an array in BHP.

95
00:06:35,980 --> 00:06:39,400
Now, we could begin typing here, but just to stay organized.

96
00:06:39,490 --> 00:06:44,080
I'd like to drop down in between these array parentheses onto a new line.

97
00:06:45,790 --> 00:06:51,310
And the first thing I want to do is tell the function that it doesn't need to output this odd little

98
00:06:51,310 --> 00:06:52,450
pages title.

99
00:06:52,840 --> 00:07:01,120
So if we don't want that title, this function has a parameter named title underscore alive for list

100
00:07:01,120 --> 00:07:04,750
item and we can just set that to equal no.

101
00:07:05,320 --> 00:07:14,020
So just like earlier when we said cat equals meow or dog equals bark, we are saying the title equals

102
00:07:14,110 --> 00:07:15,400
empty or nothing.

103
00:07:16,030 --> 00:07:20,950
So if we save that and refresh cool, that awkward title went away.

104
00:07:21,280 --> 00:07:26,040
Now we just need to tell the function that we don't want every single page on our website.

105
00:07:26,500 --> 00:07:29,920
We only want links to children pages of the current page.

106
00:07:30,280 --> 00:07:37,000
So back in our code, let's add a comma at the end of this line so we can add another item to the array.

107
00:07:37,480 --> 00:07:43,080
And this function has a parameter named child underscore of.

108
00:07:43,690 --> 00:07:49,480
And we just want to set that to equal the numerical I.D. of a certain page or post.

109
00:07:49,840 --> 00:07:55,090
Now, before we make this dynamic, let's hard code a number just to see how it works.

110
00:07:55,360 --> 00:08:02,620
So, for example, if I want children pages of the privacy policy page, I can find the numerical idea

111
00:08:02,620 --> 00:08:08,740
of the privacy policy page by going into my admin dashboard, looking under pages.

112
00:08:09,190 --> 00:08:13,840
And if I click on that privacy policy page to begin editing it up in the U.

113
00:08:13,850 --> 00:08:17,400
RL address bar, I can see it as an idea of 18.

114
00:08:18,160 --> 00:08:26,200
So back in the code, if I say child of equals 18, save it and refresh.

115
00:08:26,770 --> 00:08:27,070
Cool.

116
00:08:27,100 --> 00:08:31,720
There we see cookie policy, which is the only child page of privacy policy.

117
00:08:32,110 --> 00:08:35,590
And if I use this link in the header to visit the about us page.

118
00:08:36,280 --> 00:08:43,090
If we want to display the two about US child pages, we can just go into our Admon dashboard, find

119
00:08:43,090 --> 00:08:46,480
the I.D. for about us, which is 16.

120
00:08:47,500 --> 00:08:50,890
So if I say child of equals 16.

121
00:08:52,890 --> 00:08:53,280
Cool.

122
00:08:53,490 --> 00:08:55,650
We see the applicable child pages.

123
00:08:56,160 --> 00:08:59,580
Now, obviously, we don't really want to hard code a number here.

124
00:09:00,000 --> 00:09:02,130
We want this menu to be dynamic, right.

125
00:09:02,160 --> 00:09:07,440
Because if I go back to the privacy policy page, it should just automatically pull in the correct current

126
00:09:07,440 --> 00:09:08,430
child pages.

127
00:09:08,790 --> 00:09:14,910
So in order to make this dynamic, your first instinct might be to get rid of the hardcoded number and

128
00:09:14,910 --> 00:09:19,620
use the word press function, get the I.D. right.

129
00:09:19,830 --> 00:09:22,260
This will return the idea of the current page.

130
00:09:22,680 --> 00:09:23,820
So let's try that.

131
00:09:24,510 --> 00:09:27,960
So that works perfectly when you are on a parent page.

132
00:09:28,260 --> 00:09:34,290
But once we click onto the cookie policy child page, now that section is completely blank.

133
00:09:34,650 --> 00:09:37,260
And that's because once we are on a child page.

134
00:09:37,620 --> 00:09:43,920
Now our code is going to try to use that child I.D. and try to find children of it.

135
00:09:44,490 --> 00:09:45,720
And that's not what we want.

136
00:09:46,140 --> 00:09:50,790
So we need to provide a different I.D. number here depending on the situation.

137
00:09:51,180 --> 00:09:57,600
If we are on a parent page, we can indeed go ahead and just use the idea of the current page.

138
00:09:58,170 --> 00:10:02,610
But if we are on a child page, we can't just use the current I.D..

139
00:10:02,640 --> 00:10:05,670
We need to actively look up the parent page I.D..

140
00:10:05,940 --> 00:10:08,710
So here's how I would handle things up above.

141
00:10:08,730 --> 00:10:09,570
This function.

142
00:10:09,900 --> 00:10:14,350
So right when we're getting into P HP here, I would just create an if statement.

143
00:10:14,400 --> 00:10:18,480
So the word if parentheses and then curly brackets.

144
00:10:18,780 --> 00:10:25,380
And for my condition within the parentheses, I would say if the variable named the parent.

145
00:10:25,620 --> 00:10:28,830
Remember, we setup that variable in our previous lesson.

146
00:10:29,220 --> 00:10:31,740
We created a variable named the parent.

147
00:10:32,040 --> 00:10:35,910
And it will equal the I.D. of the current page's parent page.

148
00:10:36,120 --> 00:10:39,750
Or if the current page is a parent, it will just equals zero.

149
00:10:40,010 --> 00:10:40,150
OK.

150
00:10:40,260 --> 00:10:42,270
So let's leverage that variable again.

151
00:10:42,290 --> 00:10:42,960
Down here.

152
00:10:43,260 --> 00:10:49,470
So this code is saying only if that the parent variable does not equal zero.

153
00:10:49,830 --> 00:10:51,060
Only if that's the case.

154
00:10:51,090 --> 00:10:59,100
Run the code within these curly brackets or in plain English only if the current page has a parent do

155
00:10:59,100 --> 00:10:59,670
something.

156
00:11:00,000 --> 00:11:02,880
So let's just create a brand new variable and call it.

157
00:11:03,270 --> 00:11:06,690
Find children of the name.

158
00:11:06,690 --> 00:11:07,350
Doesn't matter.

159
00:11:07,380 --> 00:11:08,940
I'm just making up this name.

160
00:11:09,420 --> 00:11:15,630
But if you're currently on a child page, let's set this to equal the parent I.D..

161
00:11:16,290 --> 00:11:16,600
OK.

162
00:11:16,650 --> 00:11:18,900
And what if this evaluates to false?

163
00:11:19,200 --> 00:11:24,240
So if you're viewing a parent page, this will be zero, which will evaluate to false.

164
00:11:24,570 --> 00:11:26,190
So this code will not run.

165
00:11:26,820 --> 00:11:30,720
And then what we can do is right after this curly bracket, we can say else.

166
00:11:31,790 --> 00:11:34,290
And then open up a new pair of curly brackets.

167
00:11:34,620 --> 00:11:37,050
And this will only run if this is false.

168
00:11:37,350 --> 00:11:43,130
So if this is the case, do this otherwise else do whatever we say here.

169
00:11:43,470 --> 00:11:49,190
In this case, let's assign our find children of our made up variable.

170
00:11:49,440 --> 00:11:54,000
In that case, we can go ahead and get the current idea of whatever page you're viewing.

171
00:11:54,060 --> 00:11:56,790
So get the I.D..

172
00:11:57,210 --> 00:11:57,480
Cool.

173
00:11:57,510 --> 00:12:00,180
So now we've taken care of that conditional logic.

174
00:12:00,450 --> 00:12:06,420
Now, down here, when we are actually calling the important WP list pages function, we can just say

175
00:12:06,630 --> 00:12:11,700
child of equals and we can reference this variable of ours that we just made up.

176
00:12:12,270 --> 00:12:15,680
So find children of.

177
00:12:15,930 --> 00:12:18,720
So let's go ahead and save that and refresh.

178
00:12:19,440 --> 00:12:19,980
Perfect.

179
00:12:20,070 --> 00:12:26,130
So now, even though I'm on a child page of cookie policy, we still see links to children pages of

180
00:12:26,130 --> 00:12:27,060
the current section.

181
00:12:27,300 --> 00:12:32,340
So if I go up in the header and click on about us, we see the two sub pages.

182
00:12:32,430 --> 00:12:37,950
And even if I click on to our history, we still have the relevant child links.

183
00:12:38,310 --> 00:12:38,610
OK.

184
00:12:38,670 --> 00:12:42,750
Now, at this point, let's change gears and work on this blue header link.

185
00:12:43,080 --> 00:12:46,350
There should always point back to the current section's parent page.

186
00:12:46,560 --> 00:12:50,010
So back in our code here is that blue headline link.

187
00:12:50,070 --> 00:12:53,070
And we don't want it to be hard coded to about us.

188
00:12:53,430 --> 00:12:59,010
So first, let's make the title dynamic and then let's make the H ref link value dynamic.

189
00:12:59,310 --> 00:13:02,930
So delete about us and drop in BHP.

190
00:13:04,230 --> 00:13:10,450
And then let's echo out the results of a WordPress function, get the title.

191
00:13:11,160 --> 00:13:17,250
And within the parentheses, we can just pass an argument of our the parent variable.

192
00:13:17,590 --> 00:13:23,400
This will work really nicely with this function because if this returns a zero, which means the current

193
00:13:23,400 --> 00:13:30,600
page is apparent, page this get the title function interprets a zero as meaning the current page.

194
00:13:30,960 --> 00:13:31,200
Cool.

195
00:13:31,230 --> 00:13:34,530
Now let's do something very similar for the H RF value.

196
00:13:35,040 --> 00:13:44,130
Delete the hash tag drop in to BHP and let's echo out the results of get permalink.

197
00:13:45,930 --> 00:13:47,770
And within the parentheses, just pass it.

198
00:13:47,790 --> 00:13:52,050
An argument of our the parent variable called.

199
00:13:52,140 --> 00:13:54,330
Let's save that and refresh.

200
00:13:54,660 --> 00:13:55,770
So we're currently on the.

201
00:13:55,820 --> 00:13:57,510
Our history child page.

202
00:13:57,780 --> 00:14:02,160
But if I click this blue headline takes me to the parent page.

203
00:14:02,520 --> 00:14:08,250
And if I go down into the footer and click on privacy policy, I can click on this to navigate to a

204
00:14:08,250 --> 00:14:09,240
child page.

205
00:14:09,720 --> 00:14:13,230
And we can always use this header link to go back to the parent page.

206
00:14:14,010 --> 00:14:14,310
OK.

207
00:14:14,360 --> 00:14:17,070
So at this point, we've made the menu dynamic.

208
00:14:17,400 --> 00:14:24,600
But now we need to ask ourselves what happens if we go to a page that isn't a child's page but also

209
00:14:24,600 --> 00:14:27,930
isn't a parent page because it doesn't have any children of its own.

210
00:14:28,200 --> 00:14:33,840
So, for example, to show you what I'm talking about up in the address bar, if I visit my sample page

211
00:14:34,680 --> 00:14:36,810
named test page one, two, three.

212
00:14:37,140 --> 00:14:42,420
This page doesn't belong to any other pages, but it also doesn't have any of its own children.

213
00:14:42,960 --> 00:14:46,980
So in this case, we probably just don't want to display the side menu at all.

214
00:14:47,340 --> 00:14:47,640
Right.

215
00:14:47,670 --> 00:14:50,370
So we wouldn't even want this blue headline to appear.

216
00:14:50,760 --> 00:14:57,810
So back in our code, what I recommend doing is wrapping this page links div just wrapping that entire

217
00:14:57,810 --> 00:15:00,690
thing within a P HP if statement.

218
00:15:01,080 --> 00:15:09,960
So right before this begins, let's drop into BHP and say only if parentheses curly bracket.

219
00:15:10,500 --> 00:15:15,420
But let's only use the opening curly bracket and then drop out of p HP.

220
00:15:15,750 --> 00:15:17,730
So then we can have all of this HDMI.

221
00:15:18,060 --> 00:15:24,270
And then right when that div is going to end, right after that, it can drop into BHP, close out the

222
00:15:24,270 --> 00:15:28,110
curly bracket for the if statement and then close out of BHP.

223
00:15:28,410 --> 00:15:33,480
So now all we need to do is fill out the if statements condition within these parentheses.

224
00:15:33,900 --> 00:15:40,140
So we only want to display this menu if you are currently on a child page.

225
00:15:40,440 --> 00:15:44,970
So to check for that, we can just use our the parent variable.

226
00:15:45,330 --> 00:15:45,540
Right.

227
00:15:45,570 --> 00:15:50,040
Because on a child page, this variable will equal a number larger than zero.

228
00:15:50,220 --> 00:15:51,810
So this will evaluate to true.

229
00:15:52,140 --> 00:15:56,880
And then right after that, we can say or we also want to display this menu.

230
00:15:57,150 --> 00:15:58,830
If you're on a parent page.

231
00:15:59,100 --> 00:16:01,890
So the or operator here is very powerful.

232
00:16:02,190 --> 00:16:04,320
It lets us have multiple conditions.

233
00:16:04,380 --> 00:16:08,640
And if either one of them evaluates to true, then this will run.

234
00:16:08,970 --> 00:16:10,730
Now, believe it or not, in WordPress.

235
00:16:10,770 --> 00:16:13,640
There is no easy way to see if the page is a parent.

236
00:16:13,980 --> 00:16:17,040
But there is a slightly roundabout, tricky way of doing it.

237
00:16:17,280 --> 00:16:18,360
So here's what I would do.

238
00:16:18,570 --> 00:16:21,960
Let's add a line right above this current line that we're on.

239
00:16:23,850 --> 00:16:24,110
OK?

240
00:16:24,240 --> 00:16:26,100
And let's create a variable.

241
00:16:26,160 --> 00:16:27,690
We could name it whatever we want.

242
00:16:28,080 --> 00:16:30,510
I will call it test array.

243
00:16:31,020 --> 00:16:38,010
And let's set it to equal the results of a WordPress function named Gitte underscore pages.

244
00:16:39,000 --> 00:16:43,140
This get pages function is very similar to WP.

245
00:16:43,200 --> 00:16:44,340
List pages.

246
00:16:44,640 --> 00:16:49,770
Really, the only difference is that this function will handle outputting the pages onto the screen

247
00:16:49,770 --> 00:16:54,180
for you, whereas this function just returns the pages in memory.

248
00:16:54,480 --> 00:16:59,760
So if this function is almost identical to this function, that means we want to pass it in array of

249
00:16:59,760 --> 00:17:00,600
arguments.

250
00:17:00,810 --> 00:17:03,930
So within these parentheses, let's say array.

251
00:17:04,560 --> 00:17:07,200
And then I like to dropdown just to stay organized.

252
00:17:07,590 --> 00:17:13,590
And the only parameter we need to use here is child of equals.

253
00:17:14,070 --> 00:17:16,560
And let's just use the idea of the current page.

254
00:17:16,590 --> 00:17:18,710
So get the idea.

255
00:17:19,350 --> 00:17:26,010
And now, if the current page has children, this function will return a collection of any and all children

256
00:17:26,010 --> 00:17:26,700
pages.

257
00:17:26,970 --> 00:17:30,330
On the other hand, if the current page doesn't have any children.

258
00:17:30,660 --> 00:17:32,610
This function won't return anything.

259
00:17:33,060 --> 00:17:33,710
It will return.

260
00:17:33,720 --> 00:17:34,120
No.

261
00:17:34,230 --> 00:17:35,940
Or false or zero.

262
00:17:36,240 --> 00:17:43,110
And as we know within an if statement, if something is zero or empty, it will evaluate to false.

263
00:17:43,470 --> 00:17:47,670
So if the current page has a parent or if it is a parent.

264
00:17:48,060 --> 00:17:52,950
All we need to do to check for that is just type out our variable name test array.

265
00:17:53,970 --> 00:17:54,140
So.

266
00:17:54,210 --> 00:17:56,720
Or test array.

267
00:17:57,150 --> 00:17:57,480
Cool.

268
00:17:57,510 --> 00:18:04,380
So let's save this and refresh this test page, which is neither a child page or a parent page.

269
00:18:04,800 --> 00:18:07,360
And hopefully this menu should disappear completely.

270
00:18:07,830 --> 00:18:08,260
Cool.

271
00:18:08,430 --> 00:18:13,570
But if we go back to the about us page the menus back in business, we can go to a child page.

272
00:18:13,590 --> 00:18:15,780
We can go to the privacy policy page.

273
00:18:16,500 --> 00:18:17,550
Things are looking good.

274
00:18:18,120 --> 00:18:21,840
Now, before we bring this lesson to a close, I have one last tip for you.

275
00:18:22,320 --> 00:18:27,150
If I go back to the About US page, you'll notice that I have multiple children links.

276
00:18:27,450 --> 00:18:31,350
And you might be wondering how can you control the ordering of these?

277
00:18:31,560 --> 00:18:35,880
For example, what if I wanted our history to come before our goals?

278
00:18:36,180 --> 00:18:39,540
By default, WordPress will use alphabetical ordering.

279
00:18:39,720 --> 00:18:45,600
But if you want to use your own custom ordering all you need to do down here when we are calling this

280
00:18:45,780 --> 00:18:49,230
list, pages function within our array of arguments.

281
00:18:49,260 --> 00:18:51,840
Let's just add another item and let's use a.

282
00:18:51,920 --> 00:18:53,740
Parameter named sort.

283
00:18:54,240 --> 00:18:59,930
Call them and set it to equal menu, underscore order.

284
00:19:00,290 --> 00:19:04,820
Now, if we save this and then jump into our WordPress admon screen.

285
00:19:05,210 --> 00:19:10,550
If I jump into the page that I want to be first, our history over in the right hand column.

286
00:19:10,550 --> 00:19:13,820
In this page attributes area, you'll see an order box.

287
00:19:14,220 --> 00:19:21,920
Now if I give that page an order of one and then go give the other our goals, page an order of two.

288
00:19:24,170 --> 00:19:27,620
Well, those order values will determine which goes first.

289
00:19:28,010 --> 00:19:30,470
And that's going to bring this lesson to a close.

290
00:19:30,740 --> 00:19:33,740
That means we're done with relatively boring pages.

291
00:19:34,160 --> 00:19:38,720
And now we can move on to dynamic navigation menus and building out our blog.

292
00:19:39,020 --> 00:19:41,480
And after that, we'll get into the truly fun stuff.

293
00:19:41,780 --> 00:19:46,160
Probably the reason you signed up for the course in the first place, which is learning about custom

294
00:19:46,160 --> 00:19:52,430
post types, custom fields, creating relationships and pulling in information dynamically with JavaScript.

295
00:19:52,700 --> 00:19:55,130
We've come a long way, but we still have tons to learn.

296
00:19:55,230 --> 00:19:56,030
Let's keep it rolling.

297
00:19:56,180 --> 00:19:57,320
I'll see in the next one.
