WEBVTT
1
00:00:02.160 --> 00:00:08.520
Hello, everyone, and welcome to part two of this lesson in this video, we are going to make a few

2
00:00:08.520 --> 00:00:15.330
final privacy changes and then after that, we will learn about general security when you're letting

3
00:00:15.330 --> 00:00:18.060
users submit data into your database.

4
00:00:18.390 --> 00:00:21.610
Without further ado, let's jump right into the action.

5
00:00:22.020 --> 00:00:22.680
All right.

6
00:00:22.680 --> 00:00:27.660
So here I am on the my notes page, logged in with my subscriber account.

7
00:00:28.140 --> 00:00:34.890
And you might have noticed that if you refresh the page and then scroll down to see your existing notes,

8
00:00:35.580 --> 00:00:38.850
the titles are now prefaced with the word private.

9
00:00:39.330 --> 00:00:42.480
And we don't want this because I think it looks very odd.

10
00:00:42.810 --> 00:00:47.580
So let's make it our goal to remove the private colon before the titles.

11
00:00:47.940 --> 00:00:54.090
And it's worth pointing out that the titles do not actually contain the word private at the beginning,

12
00:00:54.360 --> 00:01:00.930
as we can see from our admin dashboard, but rather this is just how WordPress chooses to display the

13
00:01:00.930 --> 00:01:02.920
title on the front end.

14
00:01:03.180 --> 00:01:07.550
So we do not need to actually manipulate the title value itself.

15
00:01:07.920 --> 00:01:12.090
We just want to change the way that it gets displayed in our front end template.

16
00:01:12.360 --> 00:01:17.310
Now, there are many different ways of achieving this, but let me show you how I would do it.

17
00:01:17.640 --> 00:01:24.690
So right now, jump into your text editor and within your theme folder, I want you to open up page,

18
00:01:24.690 --> 00:01:34.080
dash my notes and let's scroll down until we see the list item that gets generated once for each note

19
00:01:34.080 --> 00:01:35.340
post in.

20
00:01:35.340 --> 00:01:40.730
This first input is for the title of the post and we want to change its value.

21
00:01:40.920 --> 00:01:47.940
So at the moment we are echoing out the results of get the title and we are running that through escape

22
00:01:47.940 --> 00:01:49.710
attribute just for security.

23
00:01:49.980 --> 00:01:54.190
And that's what's giving us the private colon and then the actual title.

24
00:01:54.570 --> 00:02:01.570
So what I'm going to do is run this text through a tool that will let me manipulate it.

25
00:02:01.890 --> 00:02:08.760
So right now, go ahead and select the escape attribute and to get the title select up until the closing

26
00:02:08.760 --> 00:02:13.110
parentheses, but before the semicolon and cut that into your clipboard.

27
00:02:14.410 --> 00:02:24.300
OK, and then in its place, let's call a tool named S TR, which stands for String and then underscore

28
00:02:24.570 --> 00:02:27.780
replace and that's a function.

29
00:02:27.780 --> 00:02:30.270
So open up a pair of parentheses.

30
00:02:30.540 --> 00:02:35.850
And on my screen right now, I know the line is breaking in a really awkward place, but within these

31
00:02:35.850 --> 00:02:38.780
parentheses we want to have three arguments.

32
00:02:39.360 --> 00:02:47.370
So just as a placeholder, I will say A, B and C, and this string replace function lets us manipulate

33
00:02:47.400 --> 00:02:48.630
a string of text.

34
00:02:48.810 --> 00:02:54.800
Now, the third and final argument is the text that you want to begin with or that you want to manipulate.

35
00:02:55.080 --> 00:02:59.190
So instead of the placeholder C, let's just paste in our clipboard.

36
00:02:59.970 --> 00:03:03.380
Right, because this is the text that we want to work with, OK?

37
00:03:03.420 --> 00:03:09.480
And then the first argument is a string of text that you want to search for within this text.

38
00:03:09.750 --> 00:03:13.390
And then the second argument is what you want to replace this with.

39
00:03:13.770 --> 00:03:20.670
So let me show you how we can leverage this instead of the placeholder, a let's say quotes and then

40
00:03:20.820 --> 00:03:28.480
private colon space, because that is the exact string of text that we want to get rid of.

41
00:03:29.030 --> 00:03:33.190
OK, now the second argument is what we want to replace this with.

42
00:03:33.540 --> 00:03:39.120
So instead of the placeholder B, let's say quotes and we could replace it with Unicorn or whatever

43
00:03:39.120 --> 00:03:44.990
we want, but instead let's just replace it with a completely empty pair of quotes.

44
00:03:45.360 --> 00:03:50.400
So replace this with absolutely nothing, which basically means just remove it.

45
00:03:50.700 --> 00:03:56.790
OK, so if we go ahead and save that and then refresh our front end, perfect.

46
00:03:57.270 --> 00:04:04.200
OK, now that we've taken care of that, we can change gears now before we learn about general security

47
00:04:04.200 --> 00:04:09.300
when it comes to letting visitors fill out form fields and save the data to your database.

48
00:04:09.630 --> 00:04:15.570
Before we get to that, there's one last thing I want to cover when it comes to our subscriber role

49
00:04:15.570 --> 00:04:16.530
permissions.

50
00:04:16.980 --> 00:04:22.680
So right now, I want you to jump back into the window where you are logged in as the admin and let's

51
00:04:22.680 --> 00:04:24.350
go edit the subscriber rule.

52
00:04:24.690 --> 00:04:31.200
So under the sidebar users menu, click on roles and then let's edit the subscriber roll.

53
00:04:32.190 --> 00:04:34.110
Let's click on the notes tab.

54
00:04:34.920 --> 00:04:43.740
And we no longer need to grant subscribers the ability to delete published notes or edit published notes,

55
00:04:44.190 --> 00:04:49.800
because now that we've set things up so that note posts will always be private, that means they will

56
00:04:49.800 --> 00:04:52.680
never actually be considered published.

57
00:04:53.100 --> 00:05:00.350
So we can actually go ahead and uncheck this, delete published notes and uncheck edit published notes.

58
00:05:00.990 --> 00:05:01.290
Cool.

59
00:05:01.350 --> 00:05:01.530
So.

60
00:05:01.550 --> 00:05:08.180
Now, you should only have these three capabilities checked, edit notes, published notes and delete

61
00:05:08.180 --> 00:05:16.070
notes, I only bring this up because I'm a big fan of only giving the absolute minimum number of capabilities

62
00:05:16.280 --> 00:05:18.350
to a role that you don't really trust.

63
00:05:18.740 --> 00:05:25.460
OK, so let's go ahead and update this and we can jump back to the window where we are logged in as

64
00:05:25.460 --> 00:05:29.930
a subscriber and just as a test, we could try to edit one of our posts.

65
00:05:30.410 --> 00:05:37.430
So change the title to edited new privacy test and edit text here.

66
00:05:38.390 --> 00:05:40.640
Click Save Cool.

67
00:05:40.760 --> 00:05:47.480
So that edit request was successful and then we could even try to delete the post and that's successful

68
00:05:47.480 --> 00:05:47.960
as well.

69
00:05:48.310 --> 00:05:55.070
OK, now let's finally move on and change topics and let's talk about general security, best practices.

70
00:05:55.400 --> 00:06:01.550
When you have a situation where you're letting strangers type in information and potentially save it

71
00:06:01.550 --> 00:06:02.810
into your database.

72
00:06:03.320 --> 00:06:09.740
So first, I want to show you an absolute worst case nightmare and then we can learn how to prevent

73
00:06:09.740 --> 00:06:15.380
it and even how to have backup protection and even backup for our backup protection.

74
00:06:15.500 --> 00:06:18.260
So we have multiple layers of security in place.

75
00:06:18.710 --> 00:06:25.340
OK, but first, let's start with the worst possible scenario, our worst nightmare, which is someone

76
00:06:25.340 --> 00:06:31.850
comes to your website and maybe in this body field, instead of actually taking notes in their class,

77
00:06:32.060 --> 00:06:36.890
if they are a malicious user, they might try to include a bit of JavaScript.

78
00:06:37.400 --> 00:06:43.460
So script tags and then in between the tags, they could say, alert, hello.

79
00:06:44.300 --> 00:06:48.050
Now, an alert pop up message in and of itself is not harmful.

80
00:06:48.320 --> 00:06:56.180
But the idea here is that if we are able to execute any JavaScript whatsoever, that is a huge security

81
00:06:56.180 --> 00:06:56.670
gap.

82
00:06:57.020 --> 00:07:02.690
So a lot of times when you see people testing the security of their own site, they will often use an

83
00:07:02.690 --> 00:07:08.870
alert Pop-Up message as a proof of concept, because if you're able to execute this, you'd also be

84
00:07:08.870 --> 00:07:11.330
able to execute malicious JavaScript.

85
00:07:11.660 --> 00:07:14.870
OK, anyway, let's go ahead and save this note.

86
00:07:16.040 --> 00:07:18.200
And right away we see good news.

87
00:07:18.440 --> 00:07:25.430
We see that those opening and closing script tags were deleted, which will prevent this code from actually

88
00:07:25.430 --> 00:07:27.730
being executed as JavaScript.

89
00:07:27.920 --> 00:07:29.180
And this is excellent.

90
00:07:29.450 --> 00:07:33.290
WordPress is actually very secure right out of the box.

91
00:07:33.560 --> 00:07:40.220
The reason that it removed those opening and closing script tags for us is because by default, only

92
00:07:40.220 --> 00:07:45.570
admin accounts are allowed to post unfiltered HTML.

93
00:07:46.010 --> 00:07:51.860
So back in the window where you're logged in as the admin in the users menu sidebar, if you click on

94
00:07:51.860 --> 00:07:59.120
roles and then click on Subscriber to begin editing or viewing it, you'll notice that in the general

95
00:07:59.120 --> 00:08:04.370
tab there is a capability named unfiltered HTML.

96
00:08:04.670 --> 00:08:10.910
And thankfully, because the creators of WordPress are very intelligent, this option is unchecked.

97
00:08:11.360 --> 00:08:19.550
The ability to post unfiltered HTML that can contain JavaScript is such a powerful capability that not

98
00:08:19.550 --> 00:08:23.510
even the editor role or the author role are allowed to have it.

99
00:08:23.870 --> 00:08:30.740
Only the administrator can ever post unfiltered HTML and that's the way that we want to keep things,

100
00:08:30.950 --> 00:08:35.480
because this feature alone gives our site a nice basis of security.

101
00:08:35.750 --> 00:08:42.830
However, what if one of your admins goes rogue or what if someone guesses your admin password or somehow

102
00:08:42.830 --> 00:08:45.120
gains access to your admin account?

103
00:08:45.380 --> 00:08:46.700
Well, let's test that out.

104
00:08:46.710 --> 00:08:51.290
So let's jump to the front end while we are logged in as our admin.

105
00:08:51.890 --> 00:08:58.370
And let's go over to my notes and let's create a note, give it a title of hack test.

106
00:08:58.880 --> 00:09:03.740
And for the body, let's create a script, tag and closing script in the middle.

107
00:09:04.040 --> 00:09:04.850
Say alert.

108
00:09:05.420 --> 00:09:07.010
Hi, close it.

109
00:09:07.490 --> 00:09:13.100
OK, and if we try to create that note, we see some good news and some bad news.

110
00:09:13.400 --> 00:09:20.300
The bad news is that WordPress did not automatically remove the opening and closing script tags, but

111
00:09:20.300 --> 00:09:24.980
the good news is that it still did not actually execute as JavaScript.

112
00:09:25.340 --> 00:09:28.130
And we can think Artscape functions for that.

113
00:09:28.760 --> 00:09:29.980
Let me show you what I mean.

114
00:09:29.990 --> 00:09:37.970
So back in our text editor within page my notes dot p p within the line list item that gets generated

115
00:09:37.970 --> 00:09:39.770
once for each note post.

116
00:09:40.100 --> 00:09:43.280
Here's the text area that represents the body content.

117
00:09:43.610 --> 00:09:51.680
And you'll remember that we wrapped get the content within escape 80 are now we are starting to see

118
00:09:51.680 --> 00:09:54.380
why these escape functions are so important.

119
00:09:54.590 --> 00:09:59.990
For example, follow along with me maybe up at the very top of this list item element.

120
00:10:00.530 --> 00:10:01.520
Let's drop in.

121
00:10:02.480 --> 00:10:11.690
Just as a quick test and go out, get the content noticed that we are not wrapping it within any escape

122
00:10:11.690 --> 00:10:12.580
functions.

123
00:10:12.950 --> 00:10:18.750
So if we say this and refresh our front end, oh, there is the alert pop up.

124
00:10:19.160 --> 00:10:25.370
This means that the JavaScript actually executed and instead of a pop up, it could have been malicious

125
00:10:25.370 --> 00:10:31.550
code that sends your private data to a third party server somewhere or that tries to force your computer

126
00:10:31.550 --> 00:10:34.610
to download a virus or malware or something terrible.

127
00:10:35.000 --> 00:10:42.880
So back in our code, this is why it's so important to wrap user generated content within escape functions.

128
00:10:43.220 --> 00:10:47.830
Now, WordPress has a whole bunch of different escape functions for different situations.

129
00:10:48.080 --> 00:10:54.560
So in just a general HTML sense, if we wanted to wrap this within a paragraph element, the escape

130
00:10:54.560 --> 00:10:57.860
function that we could use is a escape.

131
00:10:57.860 --> 00:10:59.640
Underscore H.T..

132
00:10:59.760 --> 00:11:06.890
Now open the parentheses, close the parentheses sandwich here and now if I save that and refresh cool.

133
00:11:06.890 --> 00:11:12.830
You can see that the JavaScript does not actually execute the code, gets converted or escaped into

134
00:11:12.830 --> 00:11:19.760
plain text so that the browser no longer recognizes it as actual HTML or JavaScript.

135
00:11:19.940 --> 00:11:24.250
Now, like I said, there are different escape functions for different scenarios.

136
00:11:24.560 --> 00:11:31.970
Let's go ahead and delete this entire test paragraph block up here and walk through a couple examples

137
00:11:31.970 --> 00:11:33.280
of escape functions.

138
00:11:33.470 --> 00:11:40.340
So on this input that's designed for our title, you can see that we are using escape attribute because

139
00:11:40.340 --> 00:11:46.820
within this context it's being used as the actual value for an HTML attribute.

140
00:11:47.090 --> 00:11:54.590
And down on our text area, we can actually improve things a little bit by instead of using escape ETR.

141
00:11:54.830 --> 00:11:59.800
Instead of that, we can use escape underscore text area.

142
00:12:00.140 --> 00:12:06.500
The idea is that WordPress will use slightly different strategies to convert the code into plain text.

143
00:12:06.740 --> 00:12:11.630
So there was escape html escape 8r escape text area.

144
00:12:12.110 --> 00:12:17.150
You just want to use the right one in the right context because hackers have all sorts of different

145
00:12:17.150 --> 00:12:18.500
tricks up their sleeves.

146
00:12:18.740 --> 00:12:24.500
For example, within our text area, body field, they might try to trick the web browser by beginning

147
00:12:24.500 --> 00:12:31.910
with a closing text area tag and then including malicious code or on a regular input like we have up

148
00:12:31.910 --> 00:12:32.270
here.

149
00:12:32.480 --> 00:12:38.240
They might try to begin with closing quotes to try and trick the browser into thinking that's the closing

150
00:12:38.240 --> 00:12:42.020
quote for the value attribute and then include malicious code.

151
00:12:42.290 --> 00:12:48.980
Anyways, the point here is that hackers have all sorts of tricks up their sleeves, but the superintelligent

152
00:12:48.980 --> 00:12:52.190
folks that created WordPress have already taken care of it.

153
00:12:52.400 --> 00:12:57.500
All we need to do is use the appropriate escape function at the appropriate time.

154
00:12:57.890 --> 00:13:02.510
However, some of you might be scratching your head right now and saying, well, what about our blog

155
00:13:02.510 --> 00:13:05.830
posts and our professor pages and our campus pages?

156
00:13:06.140 --> 00:13:10.250
Do we need to use the escape HTML function for that content?

157
00:13:10.700 --> 00:13:12.590
The answer is that it depends.

158
00:13:12.800 --> 00:13:19.130
Most of the time you will not want to do that because that will prevent you from using any sort of HTML

159
00:13:19.280 --> 00:13:21.220
within the body content field.

160
00:13:21.470 --> 00:13:27.200
It's really just up to you and how much you trust your admin users or how likely you think it is that

161
00:13:27.200 --> 00:13:29.030
one of your accounts would be breached.

162
00:13:29.270 --> 00:13:35.660
The big point for this lesson is that I just want you to be aware of the ability to escape Fields' if

163
00:13:35.660 --> 00:13:36.900
and when necessary.

164
00:13:37.310 --> 00:13:37.820
All right.

165
00:13:37.820 --> 00:13:43.460
Now, before we bring this lesson to a close, there's one more topic I want to cover where we even

166
00:13:43.460 --> 00:13:47.090
further restrict what subscriber accounts are allowed to do.

167
00:13:47.330 --> 00:13:52.850
So right now, let's jump back into the browser window where we are logged in with a subscriber account.

168
00:13:53.300 --> 00:14:01.220
And I want to point out that even though subscribers are not allowed to post unfiltered HTML by default,

169
00:14:01.220 --> 00:14:04.230
they are allowed to post basic HTML.

170
00:14:04.460 --> 00:14:12.950
So for the title I will say subscriber HTML test and for the body content, we can try a script again

171
00:14:14.420 --> 00:14:16.010
and we know that that will fail.

172
00:14:16.010 --> 00:14:18.170
WordPress will prevent that from working.

173
00:14:18.470 --> 00:14:25.550
But below that, maybe we want to include an unordered list and within that we would include a list

174
00:14:25.550 --> 00:14:27.980
item and say hello one.

175
00:14:28.340 --> 00:14:30.140
And then maybe we have a few of those.

176
00:14:30.140 --> 00:14:30.440
Right.

177
00:14:32.120 --> 00:14:32.840
Hello two.

178
00:14:32.840 --> 00:14:34.100
Hello, three, four.

179
00:14:34.100 --> 00:14:40.430
Maybe down here we would have a paragraph and say this text is bold, right?

180
00:14:40.490 --> 00:14:43.790
And the bold would be wrapped in a strong tag.

181
00:14:45.890 --> 00:14:46.880
You get the idea.

182
00:14:47.150 --> 00:14:55.070
So if we go ahead and create this note, you'll notice that the script tags surrounding this were removed.

183
00:14:55.070 --> 00:15:00.310
But WordPress did indeed allow us to post basic HTML.

184
00:15:00.740 --> 00:15:01.460
Now it's not.

185
00:15:01.530 --> 00:15:08.520
Actually rendering as HTML, but that's only because we've set this to be the value for a text area

186
00:15:08.520 --> 00:15:16.470
field, if we go into the WordPress admin area and check out that newly created note, I'm currently

187
00:15:16.470 --> 00:15:22.950
in text mode, but if I switch to visual mode, you can see that that subscriber user was successful

188
00:15:23.190 --> 00:15:26.620
in saving basic HTML into the database.

189
00:15:27.060 --> 00:15:33.540
Now, a lot of times that's going to be completely harmless, but I want to be very strict with my subscriber

190
00:15:33.540 --> 00:15:38.430
accounts and I don't even want to let them post basic HTML like this.

191
00:15:38.910 --> 00:15:41.220
So let's go ahead and delete this post.

192
00:15:41.520 --> 00:15:48.690
And I want to show you how we can enforce a really strict policy on the server side that strips out

193
00:15:48.690 --> 00:15:54.000
any and all HTML as well as any other potentially malicious code.

194
00:15:54.360 --> 00:16:02.640
So right now, jump back into your text editor and I want you to open up functions, HP, and we can

195
00:16:02.640 --> 00:16:04.120
scroll down to the very bottom.

196
00:16:06.000 --> 00:16:12.990
Remember, in our previous lesson, we set up this filter named Make Note private and within the body

197
00:16:12.990 --> 00:16:18.690
of this function, maybe right above this if statement, why don't we create another if statement?

198
00:16:19.080 --> 00:16:25.500
So if parentheses, curly brackets and this time around we only need one condition check.

199
00:16:25.890 --> 00:16:29.750
Let's just make sure that this post is of the note post type.

200
00:16:30.060 --> 00:16:42.300
So if data posts type equals note, if that's true, then within the if statement, let's manipulate

201
00:16:42.780 --> 00:16:52.680
Data's property named post content and I want to strip out any and all HTML from this value before we

202
00:16:52.680 --> 00:16:54.360
save it into the database.

203
00:16:54.630 --> 00:16:57.600
Remember that that's what this filter is allowing us to do.

204
00:16:57.810 --> 00:17:02.610
We're intercepting a request right before the data gets saved into the database.

205
00:17:02.910 --> 00:17:05.580
So I want to change the post content.

206
00:17:05.790 --> 00:17:08.250
So I'm going to set this to equal.

207
00:17:08.670 --> 00:17:19.950
And then there's a WordPress function named sanitize text area field semicolon at the end and within

208
00:17:19.950 --> 00:17:23.280
these parentheses you just tell it what you want to sanitize.

209
00:17:23.500 --> 00:17:28.410
So I'm literally just going to copy and paste this data post content value.

210
00:17:28.740 --> 00:17:32.580
So copy that into my clipboard pasted in these parentheses.

211
00:17:32.580 --> 00:17:37.050
So whatever the user is trying to submit, I just want to sanitize it.

212
00:17:37.320 --> 00:17:43.170
So we've modified the post content and then remember down at the bottom of this function, we return

213
00:17:43.170 --> 00:17:43.840
that data.

214
00:17:44.010 --> 00:17:46.440
This is the water that's exiting our filter.

215
00:17:46.710 --> 00:17:50.010
And before we save this, we can do the same thing with our title field.

216
00:17:50.310 --> 00:17:57.630
So we could just duplicate this line, copy and paste it and say we want post title.

217
00:17:58.020 --> 00:18:05.520
And then instead of sanitized text area field, WordPress has a function named sanitized text field.

218
00:18:05.790 --> 00:18:09.770
And let's also change post content here to post title.

219
00:18:10.110 --> 00:18:12.210
OK, let's go ahead and save this.

220
00:18:12.390 --> 00:18:17.760
And now back in the window where we are logged in as a subscriber, let's try to create another new

221
00:18:17.760 --> 00:18:18.240
node.

222
00:18:18.420 --> 00:18:24.930
So maybe this post is amazing and maybe I would try to wrap the word amazing in a strong tag.

223
00:18:27.550 --> 00:18:31.270
And then in the body content, this is a test.

224
00:18:31.300 --> 00:18:40.570
And then on a new line, maybe try to create a heading heading test, maybe a list item, get the idea.

225
00:18:40.570 --> 00:18:43.210
Let's go ahead and try to create that cool.

226
00:18:43.210 --> 00:18:48.400
And you can see that WordPress stripped out all of that basic HTML.

227
00:18:48.610 --> 00:18:51.310
And you can call me strict, but I like this.

228
00:18:51.670 --> 00:18:58.840
I don't want to let users that I don't really trust post anything even close to HTML on my Web site

229
00:18:58.990 --> 00:19:00.400
or into my database.

230
00:19:00.790 --> 00:19:03.530
And that's going to bring this lesson to a close.

231
00:19:03.910 --> 00:19:09.310
Now, some of you might be scratching your head saying, was all of this security talk really necessary,

232
00:19:09.520 --> 00:19:12.610
considering that the my notes page is private?

233
00:19:13.060 --> 00:19:13.360
Right.

234
00:19:13.360 --> 00:19:19.300
Because even if someone did enter a cross site scripting JavaScript attack, they would be the only

235
00:19:19.300 --> 00:19:21.420
ones that could view it because it's private.

236
00:19:21.610 --> 00:19:28.190
And while that might be true, when it comes to security, you can never have enough layers of protection.

237
00:19:28.450 --> 00:19:34.420
So now, even if something super weird happens and people can somehow view other people's private notes,

238
00:19:34.630 --> 00:19:36.010
I'm not sure how that would happen.

239
00:19:36.010 --> 00:19:40.360
But even if it did, somehow we have basic security in place.

240
00:19:40.670 --> 00:19:46.600
OK, now, in our next lesson, we are going to learn how to set up per user post limits.

241
00:19:46.960 --> 00:19:53.500
So that way someone can't come to our site and try to create 50 million notes in an attempt to fill

242
00:19:53.500 --> 00:19:56.450
up our database or make our website really slow.

243
00:19:56.770 --> 00:19:58.080
So let's keep things rolling.

244
00:19:58.090 --> 00:19:59.230
And I will see you then.
