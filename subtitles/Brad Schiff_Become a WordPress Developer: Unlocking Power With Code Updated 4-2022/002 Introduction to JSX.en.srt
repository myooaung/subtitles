1
00:00:02,230 --> 00:00:03,170
Hello, everyone.

2
00:00:03,490 --> 00:00:10,570
In this lesson, we're going to learn about Jason X. Let's begin by making sure that we understand the

3
00:00:10,570 --> 00:00:13,670
problem that Jason X solves.

4
00:00:14,080 --> 00:00:20,980
So in our previous lesson, we wrote this bit of JavaScript to create a heading level three with this

5
00:00:20,980 --> 00:00:22,070
as its content.

6
00:00:22,600 --> 00:00:28,480
Now, when you just need to create one single element, this code isn't too bad to type out.

7
00:00:28,480 --> 00:00:35,560
But in the real world, in HTML, we often need all sorts of container and wrapper divs and then you're

8
00:00:35,560 --> 00:00:40,720
going to have five or 10 different children, elements that might have nested contents of their own.

9
00:00:41,170 --> 00:00:48,300
In other words, spelling out a real world HTML structure with this type of code is not enjoyable.

10
00:00:48,730 --> 00:00:53,710
I'm about to paste in a bit of example code and you do not need to type this out.

11
00:00:54,100 --> 00:00:58,060
It's going to be an example of what we do not want to have to type out.

12
00:00:58,690 --> 00:01:05,890
I just want to show you we place this in that the create element function can indeed create complex

13
00:01:05,890 --> 00:01:08,140
nested HTML structures.

14
00:01:08,470 --> 00:01:12,660
It's just not enjoyable for you and I to have to manually type out.

15
00:01:13,150 --> 00:01:20,530
So remember, create element takes three arguments, the type of element you want to create any properties

16
00:01:20,530 --> 00:01:22,690
or attributes describing that element.

17
00:01:22,690 --> 00:01:26,520
And then the third argument is the content for that element.

18
00:01:26,860 --> 00:01:33,220
So in this example that I just paste it in, I have a div and then for its content, it's actually just

19
00:01:33,220 --> 00:01:36,570
an array of other elements.

20
00:01:37,180 --> 00:01:43,720
So I have a div with an H1 in an age for you can see the H four instead of null for the second argument,

21
00:01:43,720 --> 00:01:47,590
I give it a style object and I set the colour.

22
00:01:48,070 --> 00:01:51,340
So if I save this and reload.

23
00:01:53,500 --> 00:01:58,030
Cool, you can see that there's a rapper, you can't see the rapper, too, but there's Divx with two

24
00:01:58,030 --> 00:01:59,520
pieces of content inside it.

25
00:01:59,530 --> 00:02:01,480
The color is working perfect.

26
00:02:01,840 --> 00:02:06,370
Only no one wants to have to spell out HTML like this.

27
00:02:06,850 --> 00:02:07,960
It's not enjoyable.

28
00:02:07,960 --> 00:02:10,890
It's slow, inefficient, it's not intuitive.

29
00:02:11,140 --> 00:02:14,010
So if we can avoid this, we definitely want to.

30
00:02:14,350 --> 00:02:17,300
And this is where James X comes into play.

31
00:02:17,650 --> 00:02:20,710
Now again, what I'm about to paste in, you do not need to type this out.

32
00:02:20,720 --> 00:02:21,970
This is just a quick demo.

33
00:02:21,970 --> 00:02:30,370
But what if instead of all of this, we could express this same HTML structure with just this?

34
00:02:30,880 --> 00:02:34,410
This looks almost identical to HTML.

35
00:02:34,420 --> 00:02:40,560
There are subtle differences, but this is very intuitive and easy for you and I to type out.

36
00:02:41,170 --> 00:02:46,290
So this is just X and it's going to make our lives so much easier.

37
00:02:46,600 --> 00:02:52,150
However, we can't just feed the Web browser just directly like this.

38
00:02:52,510 --> 00:02:57,030
If I save this, we're going to run into all sorts of errors and problems, right?

39
00:02:57,070 --> 00:02:57,910
If I reload.

40
00:02:59,200 --> 00:03:01,840
WordPress has no idea what's going on.

41
00:03:01,870 --> 00:03:09,190
We see this error message, and this is because Jason X in this syntax right here, this doesn't make

42
00:03:09,190 --> 00:03:11,300
sense to the Web browser, right?

43
00:03:11,380 --> 00:03:13,500
The Web browser speaks JavaScript.

44
00:03:13,780 --> 00:03:15,430
It does not speak JSH.

45
00:03:15,970 --> 00:03:22,530
So what we need is a tool in the middle that will take our source code and then convert it.

46
00:03:22,960 --> 00:03:27,780
Let me command Z that will convert our JSA into this.

47
00:03:27,970 --> 00:03:31,000
And this is what will actually get fed to the Web browser.

48
00:03:31,560 --> 00:03:31,740
Right.

49
00:03:31,850 --> 00:03:36,160
So essentially you and I will get to write source code that looks like this.

50
00:03:36,520 --> 00:03:43,300
It can live in a folder named Source and then the automatic tool that converts this code myself.

51
00:03:43,300 --> 00:03:44,350
I put it back to this.

52
00:03:44,650 --> 00:03:50,530
This version of the file can live in a different folder called Build, and that's what we'll tell WordPress

53
00:03:50,530 --> 00:03:51,940
to actually load.

54
00:03:52,360 --> 00:03:57,670
So right now, let me put my edit function back to the exact same way that yours is from our previous

55
00:03:57,670 --> 00:03:58,200
lesson.

56
00:03:58,840 --> 00:04:03,050
OK, and now let's start to learn how we can use JSC.

57
00:04:03,850 --> 00:04:10,810
So first we need to make sure that our computer has something called Node JS installed on it.

58
00:04:11,320 --> 00:04:17,170
Now, if you've watched the entirety of this course, odds are you already have node installed on your

59
00:04:17,170 --> 00:04:17,740
computer.

60
00:04:18,130 --> 00:04:24,190
But if you've skipped ahead to this plug in development chapter or if you're watching this course years

61
00:04:24,190 --> 00:04:28,120
later and you're on a new computer, maybe you don't have node installed.

62
00:04:28,480 --> 00:04:31,840
Let me show you how you can check to see if you have node installed.

63
00:04:32,320 --> 00:04:40,120
So inverse code on windows, you can press control and J on your keyboard at the same time on Mac,

64
00:04:40,120 --> 00:04:42,380
you can press command and J.

65
00:04:43,180 --> 00:04:48,040
Either way, that's going to open up your terminal or command line down here towards the bottom.

66
00:04:48,490 --> 00:04:51,970
Now I want you to run this command with me to see if you have node installed.

67
00:04:51,970 --> 00:04:55,980
It's just node and then a space dash dash.

68
00:04:55,990 --> 00:05:00,150
So two dashes version hit enter.

69
00:05:00,340 --> 00:05:03,550
If you see any sort of version number here, cool.

70
00:05:03,550 --> 00:05:05,830
You already have node installed.

71
00:05:06,280 --> 00:05:13,270
If instead you see unknown command or command not found, you just need to go download and install node

72
00:05:13,570 --> 00:05:19,210
so you can pause the video less and go to the official node website node JÃ–RG.

73
00:05:19,210 --> 00:05:24,100
If you just Google for node, this should be one of the first results and then you can download either

74
00:05:24,100 --> 00:05:27,010
the long term support version or the current version.

75
00:05:27,220 --> 00:05:28,740
You can't go wrong either way.

76
00:05:29,260 --> 00:05:34,750
So pause the video while you're download completes, you should be able to just double click the downloaded

77
00:05:34,750 --> 00:05:37,680
file and then all of the default options are OK.

78
00:05:37,690 --> 00:05:40,270
So you can just click next, next, next.

79
00:05:40,780 --> 00:05:46,570
Once it finishes, you might need to restart your text editor or even your computer as a whole, but

80
00:05:46,570 --> 00:05:53,290
you'll know that everything was installed correctly if you try this command once again, node, dash,

81
00:05:53,290 --> 00:05:55,510
dash version and you see a version.

82
00:05:55,510 --> 00:06:03,040
No, again, remember to toggle your command line in VSG code, its control J on Windows and command

83
00:06:03,040 --> 00:06:05,920
John Mac or instead of a keyboard shortcut.

84
00:06:06,190 --> 00:06:12,970
If you look in the V code view menu up at the top, you'll see an option called terminal that will do

85
00:06:12,970 --> 00:06:13,620
the same thing.

86
00:06:14,230 --> 00:06:16,780
So go install no JS if you need to.

87
00:06:16,780 --> 00:06:22,840
But at this point in the video moving forward, I'm going to assume that everyone has node installed.

88
00:06:23,440 --> 00:06:29,380
Now that we have node, we can go ahead and set up the tool in the middle that will convert our JSC

89
00:06:29,440 --> 00:06:33,400
X into code that looks like this in the past.

90
00:06:33,430 --> 00:06:37,060
Setting up an automated tool like that might have been a bit complicated.

91
00:06:37,420 --> 00:06:44,260
But luckily for us, there is an official WordPress JavaScript package, so it's just the at symbol

92
00:06:44,260 --> 00:06:46,750
WordPress slash scripts.

93
00:06:47,350 --> 00:06:49,770
So how do we download and use this?

94
00:06:50,200 --> 00:06:58,600
Well, when we installed node on our computer, we also installed something called NPM short for node

95
00:06:58,600 --> 00:07:00,010
package manager.

96
00:07:00,340 --> 00:07:07,330
Now, before we use NPM to download that WordPress scripts package, let's first sort of create a grocery

97
00:07:07,330 --> 00:07:11,890
list in our folder that will keep track of any JavaScript dependencies.

98
00:07:11,890 --> 00:07:13,420
We need to do that.

99
00:07:13,420 --> 00:07:15,850
I want you to run the following command with me.

100
00:07:15,850 --> 00:07:21,970
So it's NPM space init space and then dash.

101
00:07:21,970 --> 00:07:24,160
Why press enter.

102
00:07:24,920 --> 00:07:30,910
OK, so that will create a package JSON file that keeps track of everything we're going to install with

103
00:07:30,910 --> 00:07:31,570
NPM.

104
00:07:32,080 --> 00:07:35,290
Really though, we only need to install one package right now.

105
00:07:35,860 --> 00:07:36,160
Right.

106
00:07:36,160 --> 00:07:40,270
We want the at WordPress scripts package.

107
00:07:40,540 --> 00:07:50,920
So type this command in with me now npm install and then the name of the package was at Simbel WordPress

108
00:07:51,400 --> 00:07:57,310
Forward Slash Scripts and in 2021 this isn't 100 percent necessary.

109
00:07:57,310 --> 00:07:58,420
But if you want to.

110
00:07:58,730 --> 00:08:06,410
You can say dash, dash, save, dash, dev to market as a dev dependency, go ahead and press enter

111
00:08:06,410 --> 00:08:10,580
and now depending on the speed of your Internet connection, this will take a minute or two.

112
00:08:11,030 --> 00:08:17,020
The official WordPress JavaScript package makes use of lots and lots of other smaller packages.

113
00:08:17,030 --> 00:08:18,520
So be patient.

114
00:08:18,530 --> 00:08:19,580
This will take a minute.

115
00:08:21,380 --> 00:08:24,680
Once it completes, the question becomes, how do we use it?

116
00:08:25,070 --> 00:08:30,620
Well, the nice thing about this package is that it requires almost zero configuration.

117
00:08:30,980 --> 00:08:35,570
In other words, it has a certain folder and file structure that it's going to look for.

118
00:08:36,050 --> 00:08:42,800
So in our plug in folder, I want you to create a new subfolder with this exact name.

119
00:08:42,800 --> 00:08:45,440
So new folder it needs to be exactly.

120
00:08:45,740 --> 00:08:48,650
S are C short for source.

121
00:08:48,990 --> 00:08:57,500
OK, inside that new source folder, I want you to create a new file and let's name it Index Dot JS

122
00:08:58,820 --> 00:09:02,730
now inside this brand new totally blank index args file.

123
00:09:03,200 --> 00:09:09,640
Why don't we just copy and paste over the contents from our test, Gorgias, to open up test.

124
00:09:09,800 --> 00:09:12,260
Just select everything in this entire file.

125
00:09:12,680 --> 00:09:17,000
Copy it back in our new index JS file, paste it in.

126
00:09:17,450 --> 00:09:18,470
We can save that.

127
00:09:18,740 --> 00:09:21,950
We can actually go ahead and delete our test JS file.

128
00:09:21,960 --> 00:09:23,030
We no longer need it.

129
00:09:26,380 --> 00:09:31,600
OK, now within our index dawgs file, let's try to use a bit of JSA.

130
00:09:32,710 --> 00:09:35,950
So within our edit function, what are we going to return?

131
00:09:36,280 --> 00:09:37,580
Let's get rid of all of this.

132
00:09:38,530 --> 00:09:40,000
So right now, I just have a function.

133
00:09:40,000 --> 00:09:41,130
I'm returning nothing.

134
00:09:41,410 --> 00:09:44,500
What I really want to return well is just a bit of JSM.

135
00:09:44,830 --> 00:09:53,070
So let's have a heading level three and say this is an H3 from Jeff Sachs.

136
00:09:53,690 --> 00:09:54,760
Let's give that to save.

137
00:09:55,460 --> 00:10:02,640
OK, so now we just need a way to tell that WordPress package to convert this file for us.

138
00:10:03,460 --> 00:10:04,500
Here's how we do that.

139
00:10:04,750 --> 00:10:08,380
I want you to jump into the package JSON file.

140
00:10:09,760 --> 00:10:12,930
We're looking for the area called Scripps right now.

141
00:10:12,940 --> 00:10:14,680
There's just this one test script.

142
00:10:14,690 --> 00:10:17,350
So maybe on a new line right above the test.

143
00:10:18,160 --> 00:10:27,670
Let's say quotes build Colen string of text, WP dash scripts build.

144
00:10:28,650 --> 00:10:34,000
So essentially, we're just creating a command that we can run in the command line called Build.

145
00:10:34,330 --> 00:10:36,820
We do want to set up one more script or command.

146
00:10:36,820 --> 00:10:44,350
So at the end of this line, let's add a comma and then on a new line, let's say quotes start Colen

147
00:10:44,800 --> 00:10:49,960
and then string a text WP dash scripts start.

148
00:10:50,440 --> 00:10:52,590
Be sure to end that line with a comma as well.

149
00:10:53,020 --> 00:10:57,500
Let's go ahead and save this and we now have everything we need.

150
00:10:57,970 --> 00:11:00,280
So check this out in our command line.

151
00:11:00,580 --> 00:11:05,050
We can now run one of these tasks, either build or start.

152
00:11:05,890 --> 00:11:09,280
Start is nice because it will watch us on going.

153
00:11:09,490 --> 00:11:16,870
And every single time we save a change to one of our files, it will automatically rebundle up the converted

154
00:11:16,870 --> 00:11:18,510
version on the fly.

155
00:11:19,390 --> 00:11:23,850
So the build command, on the other hand, that just performs a one time build.

156
00:11:24,370 --> 00:11:28,840
So when you're actively developing, though, START is a very, very useful command.

157
00:11:29,110 --> 00:11:30,130
So let's do this.

158
00:11:30,130 --> 00:11:38,080
We just say NPM run and then the name of the script or command that we're interested in, which is start.

159
00:11:38,080 --> 00:11:42,040
So npm run, start, go ahead and press enter.

160
00:11:44,160 --> 00:11:50,130
OK, and here's where things get interesting notice in our folder, we didn't create this folder named

161
00:11:50,130 --> 00:11:54,480
Build, so the WordPress JavaScript package did this for us.

162
00:11:54,900 --> 00:12:00,990
Inside of the build folder is a converted copy of our index JS file.

163
00:12:01,380 --> 00:12:06,990
Now, it's not meant to be human readable, so if you open it up, it's not the easiest thing to look

164
00:12:06,990 --> 00:12:07,350
through.

165
00:12:07,350 --> 00:12:10,500
It's optimized for a browser, not for a human to read.

166
00:12:10,500 --> 00:12:15,270
But if you scroll down for me, it's around line number one hundred and six.

167
00:12:15,270 --> 00:12:16,770
It'll probably be different for you.

168
00:12:17,160 --> 00:12:21,870
Or you can just press command F or control F and search for the text that you typed.

169
00:12:21,870 --> 00:12:28,950
But here you can see it automatically converted our X into create element.

170
00:12:29,130 --> 00:12:31,260
And then those are the three arguments again.

171
00:12:31,410 --> 00:12:35,850
So we don't have to ever write this unintuitive code again.

172
00:12:37,470 --> 00:12:40,910
We just write it the way that we want to write it in the source folder.

173
00:12:41,190 --> 00:12:44,100
And this automated script will do the rest for us.

174
00:12:44,430 --> 00:12:47,950
And because we used the start script, it's still watching us.

175
00:12:48,210 --> 00:12:54,000
So if I change this from a period to two exclamation marks and hit save, watch what happens in the

176
00:12:54,000 --> 00:12:54,740
command line.

177
00:12:55,940 --> 00:13:02,120
Well, it wasn't a huge change, but the point is it just ran again, so if you check the copy that

178
00:13:02,120 --> 00:13:07,180
lives in the built folder, look, it's automatically been updated.

179
00:13:07,190 --> 00:13:08,690
There are the two exclamations.

180
00:13:09,020 --> 00:13:12,350
So the point is we just now want to tell let me close this file.

181
00:13:12,650 --> 00:13:19,100
We just want to tell WordPress to load this version of the JavaScript file in the browser.

182
00:13:19,730 --> 00:13:27,320
So to do that, we would just go into our index file and we're looking for our function that we named

183
00:13:27,320 --> 00:13:29,020
admin assets.

184
00:13:29,390 --> 00:13:33,040
We're just looking for the path that points towards our JavaScript file.

185
00:13:33,440 --> 00:13:39,550
So instead of Test-tube, let's hollow out these quotes, we would instead just say go into the build

186
00:13:39,560 --> 00:13:44,210
folder, slash and load the file named index dot.

187
00:13:44,510 --> 00:13:47,240
Yes, let's give this a save.

188
00:13:47,450 --> 00:13:52,190
And now if we refresh the Post editor screen and WordPress.

189
00:13:53,560 --> 00:13:54,370
Awesome.

190
00:13:54,430 --> 00:13:58,730
This is a H3 from JSH now that it's up and running.

191
00:13:58,750 --> 00:14:03,320
Let's practice with more complex or nested HTML.

192
00:14:03,760 --> 00:14:11,200
So back in our source code, so in the source folder index J.S., if you only have one single element

193
00:14:11,200 --> 00:14:14,170
and a single line of code, you can use this syntax.

194
00:14:14,380 --> 00:14:20,920
However, if you want to have multiple lines and multiple elements, we do want to return a pair of

195
00:14:20,920 --> 00:14:24,080
parentheses and then inside those parentheses.

196
00:14:24,400 --> 00:14:27,110
Now we can have multiple lines html.

197
00:14:27,280 --> 00:14:32,380
Well, technically it's not HTML, it's X, but you get the point.

198
00:14:32,830 --> 00:14:37,990
So let's practice, let's have a div so I'll type div and then hit tab.

199
00:14:38,170 --> 00:14:44,050
Now your voice code might not give you the automatic tab triggers right away.

200
00:14:44,560 --> 00:14:50,800
If you want to make sure that your voice code is set up like mine and that each HTML tab triggers are

201
00:14:50,800 --> 00:14:52,920
recognized inside of JSM.

202
00:14:53,470 --> 00:14:54,520
Here's what you can do.

203
00:14:54,910 --> 00:15:00,460
There are multiple ways to set this up, but this is the simplest and I've yet to see a single drawback

204
00:15:00,460 --> 00:15:01,600
or downside to it.

205
00:15:02,020 --> 00:15:09,040
So open up your voice code settings on Windows that's control and comma on Mac, that's command and

206
00:15:09,040 --> 00:15:09,550
comma.

207
00:15:10,270 --> 00:15:14,470
OK, then I want you to click this icon right here towards the top, right.

208
00:15:16,360 --> 00:15:19,780
So you can control all sorts of different settings and options in this file.

209
00:15:19,960 --> 00:15:24,010
The one that I want to draw your attention to is the one that I'm highlighting right now.

210
00:15:24,340 --> 00:15:29,020
So I've just set a global and permanent file association.

211
00:15:29,020 --> 00:15:37,330
So I'm saying that any JavaScript files should not just use the JavaScript syntax reader or interpreter,

212
00:15:37,480 --> 00:15:40,100
they should use JavaScript react.

213
00:15:40,330 --> 00:15:41,470
Now, this is not a plug in.

214
00:15:41,470 --> 00:15:43,990
You don't need to install anything to make this work.

215
00:15:44,380 --> 00:15:49,060
Very code has JavaScript react or just syntax built in.

216
00:15:49,400 --> 00:15:53,820
You just need to tell it to actually use it for JavaScript files.

217
00:15:54,520 --> 00:15:54,790
Cool.

218
00:15:54,800 --> 00:16:00,780
So with this in place, your HTML tab triggers will work inside a block of joysticks.

219
00:16:01,370 --> 00:16:04,900
OK, so inside our div, let's practice having multiple elements.

220
00:16:04,900 --> 00:16:07,480
Maybe we'll have a paragraph and just say hello.

221
00:16:07,870 --> 00:16:14,740
This is a paragraph maybe below that will have a heading level for that says hi there.

222
00:16:14,950 --> 00:16:21,160
Now there's more to this than what we've seen here, but we don't need to learn too much about JSA right

223
00:16:21,160 --> 00:16:22,180
here, right now.

224
00:16:22,630 --> 00:16:27,220
We can organically and gradually learn more about jazz acts as we go.

225
00:16:27,430 --> 00:16:29,230
For now, let's go ahead and save that.

226
00:16:29,620 --> 00:16:30,850
And if we reload.

227
00:16:32,710 --> 00:16:39,340
Cool, you can see our blacktip type is using our nested or a little bit more complex structure of HTML

228
00:16:39,850 --> 00:16:40,490
really quick.

229
00:16:40,510 --> 00:16:49,180
I do want to show you that if you modify what our save function returns well, you can easily add a

230
00:16:49,180 --> 00:16:51,580
new instance of our block type.

231
00:16:51,580 --> 00:16:57,110
But watch what happens to an existing block type that's already embedded in a post.

232
00:16:57,670 --> 00:17:03,900
So if we make a change to our save function, so what do we want to return just a bit of X?

233
00:17:04,570 --> 00:17:08,410
So maybe parentheses drop down, let's have a div.

234
00:17:09,130 --> 00:17:14,920
Let's actually cover a very important rule in James X, and that is that you can only have one top level

235
00:17:14,920 --> 00:17:15,380
element.

236
00:17:15,390 --> 00:17:20,320
So if I try to have a heading level three here and then below that happening level five, this will

237
00:17:20,320 --> 00:17:21,010
not work.

238
00:17:21,250 --> 00:17:22,390
This is not valid.

239
00:17:22,390 --> 00:17:29,560
JS X in X, there can only be one sort of top level or root level element.

240
00:17:30,220 --> 00:17:35,050
Now, this doesn't mean that you have to have a semantically meaningless div wrapper.

241
00:17:35,410 --> 00:17:38,250
Instead, you can use something called a react fragment.

242
00:17:38,260 --> 00:17:44,590
So we could open this up with this symbol, just sort of an empty opening tag and then you can have

243
00:17:44,590 --> 00:17:47,750
a closing wrapping fragment tag.

244
00:17:48,460 --> 00:17:51,630
So this is indeed valid JSA X.

245
00:17:52,180 --> 00:17:54,220
Let me change what the actual text here is.

246
00:17:54,910 --> 00:18:00,670
If we save that now, because we already have this block, which is an instance of the block we're working

247
00:18:00,670 --> 00:18:08,680
on, if we refresh WordPress says, oh, no way, this block contains unexpected or invalid content.

248
00:18:09,130 --> 00:18:10,270
This is totally normal.

249
00:18:10,270 --> 00:18:16,990
And to be expected and we'll learn more about why this is happening and how to avoid this issue in a

250
00:18:16,990 --> 00:18:17,840
future lesson.

251
00:18:18,070 --> 00:18:24,760
For now, though, you can just click on that block and delete it, and then you can always just insert

252
00:18:24,760 --> 00:18:26,110
a new copy of the block.

253
00:18:26,770 --> 00:18:27,140
Cool.

254
00:18:27,910 --> 00:18:32,200
So if we click update and then if we view that post on the front end.

255
00:18:33,360 --> 00:18:39,450
Perfect, age three and five on the front end, and that is going to bring this lesson to a close.

256
00:18:39,870 --> 00:18:45,960
Let's talk about where we go from here, though, so we don't actually want to create these hard coded

257
00:18:45,960 --> 00:18:47,860
pieces of content in our blog type.

258
00:18:47,910 --> 00:18:48,250
Right.

259
00:18:48,390 --> 00:18:53,580
Instead, we would want something interactive, like a text field where the user can type into it.

260
00:18:53,760 --> 00:18:57,960
And more importantly, we would want to learn how to store the values that they enter.

261
00:18:58,200 --> 00:19:01,800
Well, that's exactly what we're going to cover in our next lesson.

262
00:19:02,160 --> 00:19:08,190
Really quick, though, before this video closes, I do want to show you how to stop the task that's

263
00:19:08,190 --> 00:19:09,570
running in your command line.

264
00:19:09,970 --> 00:19:16,650
So back in our terminal, remember that control or command to toggle your terminal or command line so

265
00:19:16,650 --> 00:19:22,170
that start command that we ran, it's going to keep running and watching you until you tell it to stop.

266
00:19:22,590 --> 00:19:25,140
So to tell it to stop, just click on your command line.

267
00:19:25,140 --> 00:19:28,080
So it's focused and then press control.

268
00:19:28,080 --> 00:19:31,830
See, doesn't matter if you're on Windows, Mac or Linux.

269
00:19:31,830 --> 00:19:33,300
That is the keyboard shortcut.

270
00:19:33,300 --> 00:19:35,100
Command, control, see.

271
00:19:35,550 --> 00:19:41,220
And if you want to start it up again before we jump into the next lesson, it's just npm run, start

272
00:19:41,880 --> 00:19:42,300
cool.

273
00:19:42,520 --> 00:19:45,870
Let's keep the momentum rolling and I will see you in the next lesson.
