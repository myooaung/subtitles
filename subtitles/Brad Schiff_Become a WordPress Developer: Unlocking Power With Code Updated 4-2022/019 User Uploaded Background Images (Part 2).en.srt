1
00:00:00,210 --> 00:00:04,650
Now before we actually go look up the aspect ratio based on this ID value.

2
00:00:04,890 --> 00:00:06,510
Let's take things one step at a time.

3
00:00:06,810 --> 00:00:12,930
First, let's just make sure that we're holding on to this ID value in a block attribute.

4
00:00:13,650 --> 00:00:16,530
So do this with me back in our banner.

5
00:00:16,530 --> 00:00:18,360
Gorgeous file up at the top.

6
00:00:18,780 --> 00:00:20,340
Let's work on our attributes.

7
00:00:20,760 --> 00:00:22,650
So we have this one attribute called the line.

8
00:00:22,650 --> 00:00:26,340
At the end of that, let's add a comma and let's have a brand new attribute.

9
00:00:27,060 --> 00:00:32,280
We could make up any name we want, but just so it makes sense, why don't we call it maybe image ID

10
00:00:32,460 --> 00:00:36,150
and I'm capitalizing the eye and the D colon.

11
00:00:36,660 --> 00:00:37,470
Curly brackets.

12
00:00:37,470 --> 00:00:40,020
It's type would be a number.

13
00:00:40,800 --> 00:00:46,290
Now, before we worry about looking up a specific aspect ratio version of an image, let's first just

14
00:00:46,290 --> 00:00:49,500
make sure that we're saving and loading the image ID.

15
00:00:50,070 --> 00:00:55,230
So essentially if we scroll down, we're looking for the function we created just a moment ago called

16
00:00:55,560 --> 00:00:57,060
On File Select.

17
00:00:57,570 --> 00:01:00,540
So in this function, we don't need to log it to the console anymore.

18
00:01:01,140 --> 00:01:04,200
Technically, you could leave this if you wanted to, but I'm going to get rid of that.

19
00:01:04,440 --> 00:01:08,670
And what we would actually want to do here is just update our block attribute.

20
00:01:09,150 --> 00:01:09,360
Right?

21
00:01:09,370 --> 00:01:11,100
We know that we can look on this parameter.

22
00:01:11,100 --> 00:01:12,720
So it would be export ID.

23
00:01:13,200 --> 00:01:17,400
We just want to set that and update our block attribute now to update our attributes.

24
00:01:17,400 --> 00:01:20,100
We want to say props dot set attributes.

25
00:01:20,430 --> 00:01:25,850
So within our edit component function, you need to be sure to include props in these parentheses.

26
00:01:25,850 --> 00:01:27,210
So props.

27
00:01:28,200 --> 00:01:34,230
Then back down in our function we can say props, dot set attributes, parentheses to call it, give

28
00:01:34,230 --> 00:01:35,010
it an object.

29
00:01:35,010 --> 00:01:39,480
We want to change the image idea and set it to x dot.

30
00:01:40,740 --> 00:01:41,150
Okay.

31
00:01:41,160 --> 00:01:48,060
Finally down in our JS acts when we added media upload, let's get rid of this hardcoded value of one.

32
00:01:48,390 --> 00:01:53,970
So instead of one it would be props dot attributes, dot image id.

33
00:01:54,540 --> 00:01:59,400
If you're wondering what this is used for, let's say you choose a custom background image and then

34
00:01:59,400 --> 00:02:02,550
a week later you refresh that editor screen.

35
00:02:02,910 --> 00:02:08,910
Well, this lets WordPress know which values should look preselected or highlighted to indicate that

36
00:02:08,910 --> 00:02:10,380
that's what you've already chosen.

37
00:02:11,100 --> 00:02:12,060
See this in action.

38
00:02:12,070 --> 00:02:16,740
So if we save this and then refresh the template editor screen.

39
00:02:18,340 --> 00:02:20,380
Click on the banner block as a hole.

40
00:02:20,680 --> 00:02:22,090
Click Choose Image.

41
00:02:22,330 --> 00:02:24,430
And also like this image of the dog.

42
00:02:24,430 --> 00:02:25,540
Click Select.

43
00:02:26,200 --> 00:02:27,130
Click Save.

44
00:02:27,310 --> 00:02:30,850
Now we haven't connected the dots to actually display the image yet.

45
00:02:31,060 --> 00:02:37,360
However, because I saved that, if I refresh the page just to prove that we're saving and loading that

46
00:02:37,360 --> 00:02:40,870
attribute, if I click on the banner again and click Choose Image.

47
00:02:41,140 --> 00:02:44,530
Notice that word knew to select the right image.

48
00:02:45,220 --> 00:02:48,550
So in the database it's saved that block attribute of image ID.

49
00:02:49,150 --> 00:02:51,550
So whatever the ID number is for this image.

50
00:02:51,910 --> 00:02:56,470
But that just means it being properly saved and loaded to and from the database.

51
00:02:56,710 --> 00:03:00,790
So now we just need to use that image ID number, whatever it may be.

52
00:03:01,120 --> 00:03:06,820
Use it to look up the exact aspect, ratio version, the URL for that.

53
00:03:07,450 --> 00:03:13,150
Then we can actually use that to display the image both in the back end and the front end.

54
00:03:13,450 --> 00:03:15,590
So there's a million ways you could handle that.

55
00:03:15,850 --> 00:03:17,230
But here's what I'm going to do.

56
00:03:17,740 --> 00:03:27,400
Up at the very, very top of our file, let's add a new import line and say import API fetch from quotes

57
00:03:27,400 --> 00:03:32,070
at symbol wordpress slash API dash fetch.

58
00:03:32,800 --> 00:03:37,480
We're going to use this API fetch tool to retrieve data from a you are that looks something like this

59
00:03:37,490 --> 00:03:42,610
and you do not need to type this in the next 30 seconds is just a demonstration, but it's going to

60
00:03:42,610 --> 00:03:49,840
be the base of our URL slash WP, dash JSON, WP slash v2, slash media.

61
00:03:50,110 --> 00:03:53,650
And then it would just be whatever the ID for your image in question is.

62
00:03:54,100 --> 00:03:58,030
So this is the URL for that dog image I uploaded just a moment ago.

63
00:03:58,510 --> 00:04:04,600
Anyways, this is going to give us back a lot of JSON, but if we search for something called page banner,

64
00:04:04,600 --> 00:04:05,170
there it is.

65
00:04:05,410 --> 00:04:13,330
You can see we're going to get a property nested in its source URL with the exact u URL for that aspect

66
00:04:13,330 --> 00:04:15,280
ratio for the correct image.

67
00:04:15,730 --> 00:04:17,920
So I can copy and paste that into a new tab.

68
00:04:18,130 --> 00:04:18,580
Perfect.

69
00:04:18,590 --> 00:04:21,640
Now obviously the vertical cropping is off a little bit.

70
00:04:21,820 --> 00:04:23,380
That's not the point of this lesson.

71
00:04:23,530 --> 00:04:28,750
We've already learned how you can crop the different aspect ratios with a plug in that we are a big

72
00:04:28,750 --> 00:04:30,850
fan of back in our theme chapter.

73
00:04:31,150 --> 00:04:37,150
For now, the idea is how do we want to find this URL from within our client side JavaScript in the

74
00:04:37,150 --> 00:04:38,140
admin editor.

75
00:04:38,530 --> 00:04:41,050
So let's put all of this together back in our code.

76
00:04:41,500 --> 00:04:45,490
We're going to use API fetch to find that you are URL.

77
00:04:45,730 --> 00:04:49,600
Any time that this image ID attribute changes.

78
00:04:50,080 --> 00:04:56,080
You might think, well, why don't we just perform the JSON lookup within our on file select function?

79
00:04:56,290 --> 00:05:02,770
My answer to that is because what if you reloaded the page right before you actually would trigger this

80
00:05:02,770 --> 00:05:03,340
function?

81
00:05:03,490 --> 00:05:05,620
We'd still want to perform that lookup.

82
00:05:06,160 --> 00:05:11,260
So as with almost anything we do in block development because it's so complex, there's 100 different

83
00:05:11,260 --> 00:05:12,370
ways you could set it up.

84
00:05:12,670 --> 00:05:13,750
But here's what I would do.

85
00:05:14,080 --> 00:05:17,500
I'm just going to use Reax feature called Use Effect.

86
00:05:18,310 --> 00:05:25,960
So to import that, we would say import curly brackets, use effect from and it's from React.

87
00:05:25,960 --> 00:05:30,880
But the WordPress way of doing that is at simple WordPress slash element.

88
00:05:31,540 --> 00:05:35,620
So WordPress has sort of this react abstraction layer that we can reference.

89
00:05:36,070 --> 00:05:37,960
Now let's go actually use that.

90
00:05:38,530 --> 00:05:44,050
So in our edit component function, let's go ahead and get rid of this constant called use me later.

91
00:05:44,590 --> 00:05:45,910
We don't need that any longer.

92
00:05:46,360 --> 00:05:51,090
So right at the beginning of our function, we would just say use a fact parentheses to call it.

93
00:05:51,100 --> 00:05:53,290
We're going to give it two things a comma b.

94
00:05:53,650 --> 00:05:55,510
Let's actually start with the B placeholder.

95
00:05:55,510 --> 00:05:59,590
So you give it an array of things that you're watching for changes.

96
00:05:59,950 --> 00:06:05,020
So we just want to watch props, dot attributes, image ID.

97
00:06:05,590 --> 00:06:12,370
So the idea is any time that this changes, react will call whatever function we give it here.

98
00:06:12,760 --> 00:06:17,320
So now instead of this a placeholder, let's just provide an anonymous function.

99
00:06:17,320 --> 00:06:19,690
So function parentheses, curly brackets.

100
00:06:20,290 --> 00:06:26,410
And now I want to use the async await syntax, but you can't directly give use effect in asynchronous

101
00:06:26,410 --> 00:06:26,830
function.

102
00:06:26,830 --> 00:06:28,840
So I have sort of this wrapper function.

103
00:06:29,140 --> 00:06:31,930
Now inside that function, let's make up a new function.

104
00:06:31,930 --> 00:06:33,970
So async function, let's name it.

105
00:06:34,120 --> 00:06:35,350
Just go or something.

106
00:06:35,350 --> 00:06:40,840
Generic parentheses, curly brackets right below the definition, just immediately call it.

107
00:06:41,110 --> 00:06:45,430
But the idea is that now in this function we can use the a weight keyword.

108
00:06:46,060 --> 00:06:47,260
So what do we want to do?

109
00:06:47,500 --> 00:06:53,660
Well, we want to use API fetch to look up the URL for a very specific image in size.

110
00:06:54,160 --> 00:06:57,570
So let's say Konst and I'm just making up a name of response.

111
00:06:57,580 --> 00:07:01,520
The idea is this is what the WordPress rest API will give back to us.

112
00:07:01,540 --> 00:07:06,850
So response equals a weight API fetch parentheses to call it.

113
00:07:07,450 --> 00:07:11,260
Before we worry about what should go in these parentheses, let's just drop down.

114
00:07:11,620 --> 00:07:17,770
And immediately after we have this new data, let's just set a new block attribute called and we.

115
00:07:17,890 --> 00:07:20,890
Make up any name, but let's call it image URL.

116
00:07:21,820 --> 00:07:28,570
So props, dot set attributes, parentheses, curly brackets and just to do things in a logical order.

117
00:07:28,570 --> 00:07:32,950
Why don't we actually go spell out that up at the very top in our attributes?

118
00:07:34,030 --> 00:07:35,710
So let's just add a new property.

119
00:07:36,700 --> 00:07:37,220
Let's name it.

120
00:07:37,250 --> 00:07:38,620
Image url l.

121
00:07:38,890 --> 00:07:42,160
I'm just making up this name, but it would be a type of a string.

122
00:07:42,730 --> 00:07:46,150
Technically, you could get away without storing this as a block attribute.

123
00:07:46,150 --> 00:07:48,580
You could just look it up on the fly with JavaScript.

124
00:07:48,850 --> 00:07:54,850
However, remember that we're going to need to sort of recreate things from a aspect as well.

125
00:07:55,570 --> 00:08:01,570
So we could get by with just the image ID and then use that image ID and P.

126
00:08:01,900 --> 00:08:05,600
But I don't want to have to write up the lookup code again in PHP.

127
00:08:05,800 --> 00:08:12,280
So if we just actually store the image URL as well, then we can just leverage this value instead of

128
00:08:12,280 --> 00:08:13,660
performing another lookup.

129
00:08:14,050 --> 00:08:16,240
But there's no right or wrong way of setting this up.

130
00:08:16,750 --> 00:08:20,110
Anyways, back down in that code we were just writing set attributes.

131
00:08:20,380 --> 00:08:26,080
We would just want to set image URL colon and now we would just use our response from the server.

132
00:08:26,440 --> 00:08:32,200
So I won't bore you with this, but if you looked through all of this JSON that this type of a URL is

133
00:08:32,200 --> 00:08:37,750
going to give back to you, essentially the way that you would dig down to the exact property that we're

134
00:08:37,750 --> 00:08:46,990
interested in would be this the response dot media underscore details, dot sizes, dot and then whatever

135
00:08:46,990 --> 00:08:49,300
the name of your aspect ratio is.

136
00:08:49,570 --> 00:08:52,330
So we named it Page Banner back in the theme chapter.

137
00:08:52,660 --> 00:08:56,890
Dot source underscore you are now cool.

138
00:08:57,130 --> 00:08:59,930
Now we just need to fill out what goes in these parentheses here.

139
00:09:00,490 --> 00:09:02,020
So we give it an object.

140
00:09:02,380 --> 00:09:06,790
Inside the curly brackets, you can drop down, let's say path.

141
00:09:07,270 --> 00:09:11,800
Just give it a placeholder string of x comma method.

142
00:09:12,490 --> 00:09:13,390
So this would be quotes.

143
00:09:13,390 --> 00:09:15,610
We're performing a request.

144
00:09:15,850 --> 00:09:17,440
Now let's actually fill out the path.

145
00:09:17,470 --> 00:09:21,510
So this is a string of text, but I'm going to want to do something dynamic.

146
00:09:21,520 --> 00:09:24,280
So let's actually give it to back text.

147
00:09:24,700 --> 00:09:31,000
And now the nice thing about using API fetch, you don't need to worry about providing the base part

148
00:09:31,000 --> 00:09:36,790
of your domain and you also don't have to manually include the WP dash JSON.

149
00:09:37,270 --> 00:09:40,420
You just have to include from this point forward.

150
00:09:40,430 --> 00:09:42,910
So the slash WP part forward.

151
00:09:43,660 --> 00:09:52,570
So essentially the path would be slash WP, slash, v2, slash, media slash and then whatever number

152
00:09:52,900 --> 00:09:54,860
only we don't want to hard code the number.

153
00:09:54,880 --> 00:10:00,880
So it would be dollar sign curly brackets and then just props, short attributes, dot image I.D..

154
00:10:01,660 --> 00:10:07,420
Now before we save this to make things come full circle, we would just want to actually use that desired

155
00:10:07,750 --> 00:10:09,550
HTP image URL.

156
00:10:09,760 --> 00:10:14,260
We just want to use that as the background image here in the template editor screen.

157
00:10:14,770 --> 00:10:20,530
So back down in our JS acts towards the very bottom of the G6 that we're returning.

158
00:10:20,530 --> 00:10:23,590
We have a deal with the class of page banner and we have this in a wrapper.

159
00:10:23,590 --> 00:10:29,770
Dave And its style is set to background image and then this hardcoded string value.

160
00:10:30,370 --> 00:10:35,890
So leave style equals background image URL open parentheses, even leave this single quote here, but

161
00:10:36,250 --> 00:10:39,170
everything inside the single quotes, let's get rid of that.

162
00:10:39,190 --> 00:10:43,000
So essentially from there to the end of dot jpeg.

163
00:10:44,050 --> 00:10:48,520
Okay, right there, I'm just going to put a placeholder X and then I'm going to swap out the overall

164
00:10:48,910 --> 00:10:52,300
double quotes here to instead be back ticks.

165
00:10:54,430 --> 00:10:58,060
So opening back, tick, closing back, tick, instead of the closing double quote.

166
00:10:58,930 --> 00:11:01,600
And then instead of the X, we can just say dollar sign.

167
00:11:01,600 --> 00:11:02,530
Curly Brackets.

168
00:11:03,250 --> 00:11:05,200
Props dot attributes.

169
00:11:05,200 --> 00:11:06,760
Dot Image URL.

170
00:11:07,840 --> 00:11:09,880
Let's give this a save and test it out.

171
00:11:09,910 --> 00:11:12,820
So back in the template editor screen if we refresh.

172
00:11:15,840 --> 00:11:16,080
Cool.

173
00:11:16,080 --> 00:11:21,150
Let me zoom out a little bit, but there you can see there is the dog image being used.

174
00:11:21,630 --> 00:11:24,960
And if I click on that overall area and choose a different image.

175
00:11:24,960 --> 00:11:29,430
So if I choose this frog, click select, you get the idea.

176
00:11:29,700 --> 00:11:31,620
Now for the very final step.

177
00:11:31,620 --> 00:11:32,910
We just need to set things up.

178
00:11:32,910 --> 00:11:37,380
If I save that so that on the actual front end, we use that image as well.

179
00:11:37,740 --> 00:11:41,430
Now remember, this is using P, so it's totally up to you.

180
00:11:41,580 --> 00:11:46,680
If you wanted to perform the image URL, look up and you could again.

181
00:11:46,680 --> 00:11:52,620
There's a million different ways you could set this up, but essentially let's just go use P and let's

182
00:11:52,620 --> 00:11:57,720
just look up the image URL value instead of using the ID inside of P.

183
00:11:58,110 --> 00:12:05,190
So in our our block folder just jump into banner p up at the very, very top.

184
00:12:05,190 --> 00:12:11,340
Let's drop into P, we can exit page B and let's write an if statement.

185
00:12:11,970 --> 00:12:17,010
And basically we're just going to check to see if there is an incoming image URL attribute.

186
00:12:17,250 --> 00:12:20,100
If there isn't, let's set a fallback.

187
00:12:20,670 --> 00:12:20,880
Right?

188
00:12:20,880 --> 00:12:23,790
We can just point towards the generic library here.

189
00:12:23,790 --> 00:12:24,160
Okay.

190
00:12:24,160 --> 00:12:29,370
JB So this is what I would do, let's say for the condition if the opposite.

191
00:12:29,370 --> 00:12:36,960
So if dollar sign attributes, square brackets, quotes, image URL and the exclamation means.

192
00:12:36,960 --> 00:12:43,290
So if this is false, if this is not true, well then let's just sort of override this value with the

193
00:12:43,290 --> 00:12:43,920
fallback.

194
00:12:43,920 --> 00:12:51,000
So it would be dollar sign attributes, square brackets, image url now it should equal get the m file

195
00:12:51,000 --> 00:12:51,240
u.

196
00:12:51,240 --> 00:12:51,960
R i.

197
00:12:52,950 --> 00:12:53,410
Quotes.

198
00:12:53,410 --> 00:12:54,390
Slash images.

199
00:12:54,390 --> 00:12:55,770
Slash library.

200
00:12:55,800 --> 00:12:57,360
Dash zero dot jpg.

201
00:12:57,990 --> 00:12:58,350
Cool.

202
00:12:58,530 --> 00:13:02,040
So now in our code, we know that this property of image URL.

203
00:13:02,190 --> 00:13:03,130
It's good to go.

204
00:13:03,150 --> 00:13:06,300
It's either going to be the fallback or the correct custom value.

205
00:13:07,260 --> 00:13:09,780
So now down in this code, this would just be echo.

206
00:13:10,870 --> 00:13:14,110
We can get rid of this git theme file, you'll recall.

207
00:13:14,130 --> 00:13:19,710
Instead it would just be echo dollar sign attributes, square brackets.

208
00:13:19,710 --> 00:13:21,960
Look inside it for quotes image URL.

209
00:13:22,400 --> 00:13:25,560
If we give that a save, refresh the front end.

210
00:13:26,790 --> 00:13:27,540
I'm not surprised.

211
00:13:27,540 --> 00:13:29,070
Looks like I forgot a semicolon.

212
00:13:29,280 --> 00:13:29,550
Yep.

213
00:13:29,700 --> 00:13:33,570
So on line number four, end your line with a semicolon, obviously.

214
00:13:34,110 --> 00:13:34,980
Refresh again.

215
00:13:35,190 --> 00:13:38,280
There's the frog that's going to bring this video to a close.

216
00:13:38,490 --> 00:13:44,010
In our next lesson, we're going to take care of a super small detail related to our banner block.

217
00:13:44,100 --> 00:13:50,580
Essentially, we want to set up a really resilient and robust way of setting the default placeholder

218
00:13:50,580 --> 00:13:56,800
value for the background image here on the admin editor side, because we don't want to have to hardcoded

219
00:13:56,800 --> 00:14:02,380
a value to a theme JPEG that makes any assumptions about where you've installed WordPress.

220
00:14:02,400 --> 00:14:02,730
Right.

221
00:14:02,850 --> 00:14:08,640
If someone installed WordPress in a subfolder on their domain, we don't want our path to break.

222
00:14:09,300 --> 00:14:10,820
So it should be a very quick lesson.

223
00:14:10,830 --> 00:14:13,290
I'll show you the way that I would handle that situation.

224
00:14:13,710 --> 00:14:15,810
Let's keep things rolling and I'll see you then.
