WEBVTT
1
00:00:01.810 --> 00:00:02.800
Hello, everyone.

2
00:00:03.190 --> 00:00:08.590
In this lesson, we will build out the front end for the new campus post type.

3
00:00:08.980 --> 00:00:15.890
Let's begin by editing the campus link up in the header to point towards the all campus archive screen.

4
00:00:16.090 --> 00:00:23.990
So in order to make that edit, let's jump into our text editor and open up header of our theme folder.

5
00:00:24.640 --> 00:00:26.230
Here's the header navigation.

6
00:00:26.590 --> 00:00:30.600
Here we see the campus link, so let's just adjust the HSF.

7
00:00:31.090 --> 00:00:42.100
So remove the placeholder hash tag and then drop into P and let's echo out, get post type archive link.

8
00:00:42.940 --> 00:00:45.670
And the name of the post type is campus.

9
00:00:46.480 --> 00:00:52.000
And then in terms of making the link light up yellow, when we are on a campus page, all we need to

10
00:00:52.000 --> 00:01:01.510
do is target the opening elai element, dropping BHP and say only if and then parentheses for the if

11
00:01:01.510 --> 00:01:06.400
condition, only if I get post type and that's a function.

12
00:01:06.400 --> 00:01:12.040
So it gets its own set of parentheses only if that returns value of campus.

13
00:01:12.430 --> 00:01:16.400
Only if that is the case do we want to add a sixth class.

14
00:01:16.780 --> 00:01:24.070
So we would echo out a bit of text, single quotes, and then within there we say class equals double

15
00:01:24.070 --> 00:01:28.040
quotes for the class name, current menu item.

16
00:01:28.600 --> 00:01:33.280
OK, let's go ahead and save that now if I test out that link up in the header.

17
00:01:34.400 --> 00:01:39.090
You'll notice that the screen is empty and up in the tab title bar, we see Page not found.

18
00:01:39.530 --> 00:01:41.030
Now, we've been through this before.

19
00:01:41.150 --> 00:01:46.970
You know that whenever you register a new post type, you're probably going to need to clear or rebuild.

20
00:01:47.000 --> 00:01:48.950
WordPress is permalink structure.

21
00:01:49.540 --> 00:01:57.500
So let's jump into the admin, go down into settings, permalink, click, save changes to rebuild the

22
00:01:57.500 --> 00:01:58.610
permalink structure.

23
00:01:59.240 --> 00:02:03.260
And then if we go back to the front end and now click on campuses up in the header.

24
00:02:03.950 --> 00:02:04.370
Cool.

25
00:02:04.850 --> 00:02:07.730
So we see downtown east and downtown west.

26
00:02:08.060 --> 00:02:13.910
So these are the posts that we would hope to see, except this is not the formatting that we want when

27
00:02:13.910 --> 00:02:14.930
it comes to campuses.

28
00:02:14.930 --> 00:02:19.620
We want to create an interactive Google map with pins for each location.

29
00:02:19.880 --> 00:02:23.660
So in other words, we need to use a custom template for this screen.

30
00:02:24.050 --> 00:02:27.560
Now, at the moment, this is being powered by archive.

31
00:02:29.000 --> 00:02:33.890
So if we want a unique template just for campuses, we can go into our text editor.

32
00:02:34.160 --> 00:02:37.640
And in the theme folder, let's create a brand new file.

33
00:02:38.920 --> 00:02:45.930
And let's name this new file archive, dash campus dot BHP.

34
00:02:47.790 --> 00:02:50.700
Just as a quick test, you can say hello, one, two, three.

35
00:02:52.490 --> 00:02:58.640
Just to confirm that, yes, we are editing the right file for this URL, and in order to save ourselves

36
00:02:58.640 --> 00:03:04.170
a lot of typing, why don't we use Archive Dasch program as a starting place?

37
00:03:04.340 --> 00:03:10.640
So let's jump in to archive program and just highlight the entire file and copy it into our clipboard.

38
00:03:11.240 --> 00:03:16.700
And then back in our brand new file piece that in let's scroll up to the top and let's just customize

39
00:03:16.700 --> 00:03:19.020
things to make sense for campuses.

40
00:03:19.550 --> 00:03:25.790
So for the page banner, the title should be maybe our campuses.

41
00:03:26.540 --> 00:03:35.390
And for the subtitle, Why don't we say we have several conveniently located campuses.

42
00:03:36.110 --> 00:03:37.160
Give that to save.

43
00:03:39.180 --> 00:03:44.730
And now we can work on customizing this template, right, because instead of just a simple text based

44
00:03:44.730 --> 00:03:51.030
list of the campuses, we want to create a map with pins for each post or location.

45
00:03:51.390 --> 00:03:56.850
Now, back in our text editor at the moment, you can see that we're outputting the permalink and title

46
00:03:56.850 --> 00:03:57.990
for each post.

47
00:03:58.170 --> 00:04:04.890
But now the question becomes, how can we access the latitude and longitude or the address of each post?

48
00:04:05.190 --> 00:04:09.440
Well, check this out right after the title and then a semicolon.

49
00:04:09.750 --> 00:04:14.010
Let's create a variable and we can name it whatever we want.

50
00:04:14.100 --> 00:04:23.520
Let's call it map location and let's set it to equal the results of a function named get field.

51
00:04:24.150 --> 00:04:28.740
And then within the parentheses, we just pass in the name of the custom field that we are interested

52
00:04:28.740 --> 00:04:28.890
in.

53
00:04:29.250 --> 00:04:34.950
Now, remember, in a previous lesson when we created this advanced custom fields for the map, you

54
00:04:34.950 --> 00:04:39.810
might not remember the field name that we gave it, but to refresh your memory, we gave it a name of

55
00:04:39.810 --> 00:04:42.930
map, underscore location.

56
00:04:43.680 --> 00:04:49.140
And just to make this code a bit more readable, why don't we drop down to a new line right before map

57
00:04:49.140 --> 00:04:50.120
location here?

58
00:04:51.510 --> 00:04:54.960
OK, so so far we haven't output anything onto the screen.

59
00:04:55.170 --> 00:04:59.980
We've just created a variable that stores the value of that custom field.

60
00:05:00.240 --> 00:05:05.640
Now, before we worry about accessing the latitude and longitude of this field, why don't we first

61
00:05:05.640 --> 00:05:10.590
just answer the question of what in the world lives inside the value for this field?

62
00:05:10.680 --> 00:05:11.070
Right.

63
00:05:11.080 --> 00:05:12.360
Is it a string of text?

64
00:05:12.360 --> 00:05:13.230
Is it numbers?

65
00:05:13.230 --> 00:05:14.100
Is it an array?

66
00:05:14.100 --> 00:05:15.240
Is it an object?

67
00:05:15.370 --> 00:05:16.010
What is it?

68
00:05:16.260 --> 00:05:18.840
What is the data so defined that out?

69
00:05:18.840 --> 00:05:26.310
What we can do is call the function named print underscore are and then let's just pass it the name

70
00:05:26.310 --> 00:05:27.270
of that variable.

71
00:05:27.360 --> 00:05:29.100
We named it map location.

72
00:05:32.160 --> 00:05:38.580
OK, let's go ahead and save this, and then on the front end, we can see that right after the title

73
00:05:38.580 --> 00:05:42.180
of each post, we have that information about the variable.

74
00:05:42.510 --> 00:05:43.740
So it's an array.

75
00:05:44.130 --> 00:05:50.940
The map custom fields is going to return an array to us and it stores things like the address, there's

76
00:05:50.940 --> 00:05:51.600
the address.

77
00:05:51.720 --> 00:05:55.300
And we see that it also has a property named Laerte for Latitude.

78
00:05:55.860 --> 00:05:59.430
Here's the latitude, value and LNG for longitude.

79
00:05:59.700 --> 00:06:00.120
Cool.

80
00:06:00.120 --> 00:06:06.720
So back in our text editor, if, for example, we wanted to output the latitude for each item, we

81
00:06:06.720 --> 00:06:13.320
could just look inside our variable map location and remember to look inside an array.

82
00:06:13.320 --> 00:06:15.060
It's just square brackets.

83
00:06:15.390 --> 00:06:19.350
And then we could say Laerte for latitude or LNG for longitude.

84
00:06:19.740 --> 00:06:25.230
So just as a test, we could echo this out and be sure to add a semicolon at the end of that statement.

85
00:06:27.790 --> 00:06:34.990
Cool, so we successfully access the longitude for each item, but we don't actually want to display

86
00:06:34.990 --> 00:06:38.830
it like this in plain text to the visitors of our website.

87
00:06:39.130 --> 00:06:46.000
Instead, we want to output the latitude and longitude in a structure that JavaScript can easily access.

88
00:06:46.420 --> 00:06:51.050
Right, because it's JavaScript that's going to communicate with the Google Maps service.

89
00:06:51.460 --> 00:06:55.270
So let's jump back into our text editor and let's clean this up a bit.

90
00:06:55.760 --> 00:06:59.390
In fact, let's just delete all of this and get a clean slate.

91
00:06:59.680 --> 00:07:04.570
So let's just delete from the opening line list item to the closing line list item.

92
00:07:05.860 --> 00:07:09.520
And instead let's create an opening and closing div tag.

93
00:07:09.850 --> 00:07:18.850
And on the opening div tag, let's give it a data attribute of data dash lat for latitude and let's

94
00:07:18.850 --> 00:07:22.180
set that to equal X just as a placeholder for now.

95
00:07:22.570 --> 00:07:27.340
And then let's give it another data attribute of data LNG for longitude.

96
00:07:27.340 --> 00:07:30.310
And let's also set that to a temporary placeholder.

97
00:07:30.700 --> 00:07:34.810
And let's also give this div a class of marker.

98
00:07:35.020 --> 00:07:37.900
This way our JavaScript can easily find this element.

99
00:07:38.200 --> 00:07:43.570
OK, so now we've structured things so that JavaScript can easily access the latitude and longitude

100
00:07:43.570 --> 00:07:44.320
properties.

101
00:07:44.650 --> 00:07:48.700
Now we just need to output the actual values here instead of X and X.

102
00:07:48.970 --> 00:07:57.220
So maybe up here while we are still in P mode right underneath the the post line, why don't we create

103
00:07:57.220 --> 00:08:03.370
a variable that stores the map field data just like we did a moment ago so we could name this whatever

104
00:08:03.370 --> 00:08:09.310
we want, but let's call it map location and set it to equal get field.

105
00:08:10.000 --> 00:08:13.510
And the name of the custom field was map location.

106
00:08:14.200 --> 00:08:19.720
So we've got this variable now let's just actually output the latitude and longitude values.

107
00:08:20.500 --> 00:08:28.440
So let's remove this placeholder X drop in to P and let's say echo out map location.

108
00:08:28.450 --> 00:08:29.760
That's the name of our variable.

109
00:08:29.980 --> 00:08:35.920
Let's look inside the array with square brackets and get the latitude value and then let's do the same

110
00:08:35.920 --> 00:08:36.990
thing for longitude.

111
00:08:37.840 --> 00:08:47.710
So get rid of the placeholder, go into P within the P tags, let's echo out map location, look inside

112
00:08:47.710 --> 00:08:49.120
it for longitude.

113
00:08:49.670 --> 00:08:54.430
OK, now just a moment ago we had a list item for each post instead of a div.

114
00:08:54.790 --> 00:09:00.610
So that would make sense that we wrapped all of that in unordered list, opening tag enclosing tag.

115
00:09:00.850 --> 00:09:05.250
But now that we've got a div why don't we change this instead of an unordered list.

116
00:09:05.260 --> 00:09:12.760
Let's open it up before the while loop with a div that has a class of Akef map.

117
00:09:13.240 --> 00:09:15.430
There's nothing magical about this name.

118
00:09:15.580 --> 00:09:21.160
It's just for a bit of txt styling and it also will give our JavaScript something to hook on to.

119
00:09:21.400 --> 00:09:23.230
And let's update the closing tag.

120
00:09:23.230 --> 00:09:27.390
So instead of an unordered list, let's change it to a closing div tag.

121
00:09:27.790 --> 00:09:29.320
OK, now let's save this.

122
00:09:29.320 --> 00:09:35.020
And if we check out the front end, we don't see it yet because we haven't implemented any JavaScript.

123
00:09:35.020 --> 00:09:36.190
But if you right.

124
00:09:36.190 --> 00:09:38.740
Click on this and choose inspect.

125
00:09:39.850 --> 00:09:45.700
Here's the wrapper div for the class of Akef map and if you inspect inside it, cool.

126
00:09:45.700 --> 00:09:52.690
We see it did for each campus post or in this case each map marker or pin and they each have data attributes

127
00:09:52.690 --> 00:09:56.980
with the exact latitude and longitude values go from here.

128
00:09:56.980 --> 00:10:03.190
Now we just need to implement a tiny bit of JavaScript to use all of that data to construct an interactive

129
00:10:03.190 --> 00:10:03.960
Google map.

130
00:10:04.390 --> 00:10:08.290
Now, luckily, Google will do most of the heavy lifting for us.

131
00:10:08.740 --> 00:10:12.280
So the first step is not for you and I to write a bunch of JavaScript.

132
00:10:12.580 --> 00:10:18.790
Our first step is to just load in or pull in a JavaScript file that lives on the Google servers that

133
00:10:18.820 --> 00:10:19.840
they created.

134
00:10:20.110 --> 00:10:25.660
So in WordPress, when you want to load a JavaScript file on the front end, what you want to do is

135
00:10:25.660 --> 00:10:29.710
go into your theme folders, functions, dot, p, p.

136
00:10:30.760 --> 00:10:36.820
And if we scroll down a bit, way back towards the beginning of the course, we created this function

137
00:10:36.820 --> 00:10:44.230
named university files and within it, this is where we loaded our success in JavaScript files.

138
00:10:44.620 --> 00:10:50.830
So on this line, WP on Q script, this was an example of how to load a JavaScript file.

139
00:10:51.040 --> 00:10:53.050
Now that's what we want to do again now.

140
00:10:53.050 --> 00:10:59.170
So to save ourselves a bit of typing, why don't we just copy and paste and duplicate this line, so

141
00:10:59.170 --> 00:11:05.260
copy it into our clipboard and then right above it, just paste it in again and then we can just edit

142
00:11:05.260 --> 00:11:09.340
this line of code to pull in the Google Maps script from the Google server.

143
00:11:09.490 --> 00:11:16.810
So WP on Q script, the first argument is the name that we get to make up to kind of label the script.

144
00:11:17.080 --> 00:11:20.980
So let's change this to maybe Google map.

145
00:11:21.460 --> 00:11:26.440
The next argument is the location that points towards the file so we can delete.

146
00:11:26.610 --> 00:11:32.520
All of this all the way to the comma, right, because that's the argument, and instead we want to

147
00:11:32.520 --> 00:11:35.990
point out onto the Internet out on the Google server.

148
00:11:36.150 --> 00:11:38.430
So let's begin with a pair of single quotes.

149
00:11:38.430 --> 00:11:42.030
And then within those we could begin with HTTP or.

150
00:11:42.840 --> 00:11:47.640
Yes, but certain Web hosts and certain browsers will throw an error message.

151
00:11:47.640 --> 00:11:52.820
If you're not on a secure connection and you try to load assets from a secure connection.

152
00:11:53.160 --> 00:11:59.730
So instead we can just begin the address with Eglash and then the you are able to point towards Google

153
00:11:59.730 --> 00:12:15.510
server is maps, dot Google APIs, dot com slash maps, slash, API slash just for JavaScript and then

154
00:12:15.510 --> 00:12:18.780
questionmark key equals.

155
00:12:18.960 --> 00:12:22.890
And then this is where you paste in your Google Maps API key.

156
00:12:23.490 --> 00:12:29.120
After you paste in your value, then we no longer need this array of dependencies to have any values.

157
00:12:29.430 --> 00:12:33.090
So instead of an actual array we can just have null meaning.

158
00:12:33.300 --> 00:12:37.140
This JavaScript doesn't depend on any other JavaScript files.

159
00:12:37.590 --> 00:12:38.640
Version 1.0.

160
00:12:38.640 --> 00:12:39.420
That's fine.

161
00:12:39.420 --> 00:12:41.040
We can just make up a version number.

162
00:12:41.310 --> 00:12:47.850
And true to indicate that we want to load this JavaScript file down towards the very bottom of our HTML

163
00:12:47.970 --> 00:12:49.980
instead of up in the head section.

164
00:12:50.520 --> 00:12:57.360
OK, so let's go ahead and save that and we can test things out to make sure that it's working by refreshing

165
00:12:57.360 --> 00:12:58.830
the front end of our website.

166
00:12:59.070 --> 00:13:01.380
And then if we view the page source.

167
00:13:02.870 --> 00:13:08.540
And then scroll down to the bottom, actually need to scroll up a little bit, but here we see a few

168
00:13:08.540 --> 00:13:12.350
script tags and here we see the Google Maps you URL.

169
00:13:12.360 --> 00:13:18.590
So if you click on it and it successfully opens a new tab with a bunch of code, that means that we're

170
00:13:18.590 --> 00:13:21.500
in business so we can go ahead and close that.

171
00:13:21.740 --> 00:13:25.320
Let's close this view source and move on to the next step.

172
00:13:25.670 --> 00:13:29.200
So we've loaded the JavaScript that lives on Google servers.

173
00:13:29.480 --> 00:13:35.960
Now we just need to write a little bit of JavaScript on our end to basically feed our latitude and longitude

174
00:13:35.960 --> 00:13:38.610
values into the Google Maps script.

175
00:13:39.110 --> 00:13:42.570
Now, I've actually already prepared the code for us.

176
00:13:42.980 --> 00:13:44.580
Let me show you where to look for it.

177
00:13:44.900 --> 00:13:50.670
So in our theme folder, let me close out of these open files in our theme folder.

178
00:13:51.230 --> 00:13:58.430
Let's look inside our S.R. see your source folder, and then let's look inside this sub folder named

179
00:13:58.430 --> 00:13:59.450
Modules.

180
00:14:00.290 --> 00:14:08.480
And let's jump into the file named Google Map J.S. So I've already created this file for us down here.

181
00:14:08.480 --> 00:14:12.830
We can see that the code is going to find any div that has a class of marker.

182
00:14:13.160 --> 00:14:13.510
Right.

183
00:14:13.520 --> 00:14:17.660
And those were the elements with the data attributes for latitude and longitude.

184
00:14:17.930 --> 00:14:22.400
So then all of this code, if we scroll down, it's just going to pass on the latitude and longitude

185
00:14:22.640 --> 00:14:23.960
onto the Google map.

186
00:14:24.380 --> 00:14:29.570
Now, if you're wondering where all of this code came from or how I knew to write this code, well,

187
00:14:29.570 --> 00:14:32.140
I actually did not write this code from scratch.

188
00:14:32.570 --> 00:14:37.040
You'll remember that we're using the plug in named Advanced Custom Fields.

189
00:14:37.370 --> 00:14:43.190
So I just Googled for the official advanced custom fields website there, documentation.

190
00:14:43.460 --> 00:14:47.600
And they have a page on how to work with the Google map custom field.

191
00:14:47.780 --> 00:14:50.140
And this plugin has great documentation.

192
00:14:50.150 --> 00:14:54.500
So this page basically describes the steps that we've been going through.

193
00:14:54.890 --> 00:15:00.830
And most importantly, if we keep scrolling down here, we can see a bunch of JavaScript code to look

194
00:15:00.830 --> 00:15:05.200
for elements with a class of marker and then work with their latitude and longitude.

195
00:15:05.210 --> 00:15:05.540
Right.

196
00:15:05.570 --> 00:15:08.300
So this is where I got the JavaScript from.

197
00:15:08.660 --> 00:15:13.880
But long story short, we're not going to go over this line by line and learn how it works, because

198
00:15:14.060 --> 00:15:17.150
I don't feel like that's a very great learning experience.

199
00:15:17.420 --> 00:15:22.400
This is really boring boilerplate code because we're just working with Google Maps API.

200
00:15:22.640 --> 00:15:27.820
But don't worry, we've got tons of educational JavaScript content remaining in the course.

201
00:15:27.860 --> 00:15:33.980
For example, when we create our live search results functionality, we will be going through that JavaScript

202
00:15:34.220 --> 00:15:37.120
line by line, concept by concept.

203
00:15:37.250 --> 00:15:43.040
It will be educational with plenty of learning experiences, hopefully a few aha moments.

204
00:15:43.220 --> 00:15:47.500
But when it comes to this boring Google Maps code, we're kind of just going to gloss right over it.

205
00:15:47.600 --> 00:15:51.290
So we've got this file named Google Map in our modules folder.

206
00:15:51.890 --> 00:15:53.090
Let me close out of that.

207
00:15:53.720 --> 00:16:01.610
But what we need to do now is if we jump into our index file that lives in our Sarsae folder.

208
00:16:02.330 --> 00:16:04.690
So open up index just with me.

209
00:16:05.030 --> 00:16:06.690
This is our main file.

210
00:16:06.710 --> 00:16:09.590
This is sort of the recipe file for our JavaScript.

211
00:16:09.740 --> 00:16:16.100
This pulls in all of the individual ingredients and then mixes them all together in one big bundled

212
00:16:16.100 --> 00:16:16.550
file.

213
00:16:16.730 --> 00:16:23.800
So what I want us to do now is import or include in the Google Maps module into this main file.

214
00:16:24.140 --> 00:16:28.460
So right here we've got this comment named our modules or classes.

215
00:16:28.670 --> 00:16:33.310
We're already loading in the mobile menu code and the slideshow code for the home page.

216
00:16:33.710 --> 00:16:38.540
So let's just go ahead and add a new line and let's import in the Google map code.

217
00:16:39.050 --> 00:16:40.550
We could name it whatever we want.

218
00:16:40.590 --> 00:16:49.310
Why don't we call it Google Map and then we import it from quotes to give it a string location period

219
00:16:49.310 --> 00:16:54.290
slash to look in the current folder and then let's dig into the modules folder.

220
00:16:54.560 --> 00:16:58.060
And then the file name was Google Map Gorgias.

221
00:16:58.310 --> 00:17:01.460
But in this case, we don't need to include the dot j.s..

222
00:17:01.700 --> 00:17:05.320
OK, so we just imported a class that we named Google Map.

223
00:17:05.510 --> 00:17:09.690
Now we just want to instantiate a new object using that class.

224
00:17:09.830 --> 00:17:15.530
So down here, let's say CONSED, let's create a Google map.

225
00:17:15.740 --> 00:17:20.990
Notice this time it's lowercase because this is just an object that's being created from this class

226
00:17:20.990 --> 00:17:21.800
or blueprint.

227
00:17:22.250 --> 00:17:27.800
So Google map equals a new instance of our Google Map class.

228
00:17:28.040 --> 00:17:30.710
If none of this makes sense right now, that's OK.

229
00:17:30.710 --> 00:17:35.720
Don't worry about it, because again, once we get to the live search results portion of the course,

230
00:17:36.020 --> 00:17:40.280
we can take the time to really understand in depth how all of this works.

231
00:17:40.610 --> 00:17:43.190
For now, though, let's go ahead and save this file.

232
00:17:43.400 --> 00:17:48.620
But when we save the file in order to have anything actually happen, remember, we need to have our

233
00:17:48.620 --> 00:17:53.870
command line running our NPM run start command.

234
00:17:54.290 --> 00:17:56.630
So be sure to have this command up and running.

235
00:17:57.080 --> 00:18:01.670
I'll press enter and remember, that's watching our JavaScript files for changes.

236
00:18:01.940 --> 00:18:02.350
So if.

237
00:18:02.430 --> 00:18:08.100
You save a change to this file now it's actually going to rebundle all of this up into the appropriate

238
00:18:08.100 --> 00:18:10.860
files that will live in the build folder.

239
00:18:11.410 --> 00:18:16.410
OK, so now if we go back to the front end of our website and refresh, you might need to perform a

240
00:18:16.410 --> 00:18:17.490
hard refresh.

241
00:18:18.150 --> 00:18:21.590
But here we have it, an interactive map with our two pins.

242
00:18:21.750 --> 00:18:24.450
Here's our West campus and here's our east campus.

243
00:18:24.570 --> 00:18:26.450
And visitors of the site can zoom in.

244
00:18:26.460 --> 00:18:28.740
They can zoom out, they can drag around.

245
00:18:29.130 --> 00:18:29.550
Cool.

246
00:18:29.740 --> 00:18:34.260
Now, in our next lesson, we're going to learn how to set things up so that you can click on one of

247
00:18:34.290 --> 00:18:40.890
the pins and see the name of our campus and even click on a link to go to the individual post for that

248
00:18:40.890 --> 00:18:41.580
campus.

249
00:18:41.820 --> 00:18:45.870
And then we will also set up the template file for single campus.

250
00:18:46.140 --> 00:18:47.240
Should be a lot of fun.

251
00:18:47.280 --> 00:18:51.120
Let's keep things rolling and I will see you in the next lesson.
