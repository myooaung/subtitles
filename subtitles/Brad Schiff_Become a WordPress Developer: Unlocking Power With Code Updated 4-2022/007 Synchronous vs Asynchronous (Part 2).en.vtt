WEBVTT
1
00:00:00.570 --> 00:00:06.310
Hello, everyone, in this video we are going to pick up right where we left off in the previous one.

2
00:00:06.570 --> 00:00:11.430
So if you didn't just finish the previous video in the last 30 seconds, you might want to go back and

3
00:00:11.430 --> 00:00:12.850
watch the very end of it.

4
00:00:13.170 --> 00:00:15.980
Having said that, let's jump right into the action.

5
00:00:16.350 --> 00:00:17.190
Here's what I mean.

6
00:00:17.460 --> 00:00:25.620
Why don't we adjust this so that the two get Jason requests can run together at the same time asynchronously

7
00:00:26.010 --> 00:00:28.770
and then only once they both complete.

8
00:00:28.800 --> 00:00:31.140
Do we want to run any of this code.

9
00:00:31.560 --> 00:00:34.440
So right now, let's begin coding this new setup.

10
00:00:34.740 --> 00:00:36.810
How about right above this current line?

11
00:00:37.230 --> 00:00:40.050
We just add a new line and start fresh.

12
00:00:40.410 --> 00:00:43.770
So this way we don't immediately need to delete all of our old code.

13
00:00:44.550 --> 00:00:51.060
So right inside the beginning of our get results method, let's say dollar sign to use J query, and

14
00:00:51.060 --> 00:00:52.890
it has a method named win.

15
00:00:53.850 --> 00:00:57.120
And then right after that we can change on then.

16
00:00:58.350 --> 00:01:05.490
Now the way that this works is within the parentheses of when we can include as many JSON requests as

17
00:01:05.490 --> 00:01:09.120
we want and they will all run asynchronously.

18
00:01:09.390 --> 00:01:13.260
They will run together at the same time instead of one waiting for the other.

19
00:01:13.440 --> 00:01:15.270
And this will speed things up a bit.

20
00:01:15.630 --> 00:01:21.060
Now, the beauty of the win method is that it's going to babysit all of these different requests and

21
00:01:21.060 --> 00:01:27.850
it's going to watch and wait for them to all complete before it moves on and calls the then method.

22
00:01:28.320 --> 00:01:34.440
So then within the parentheses for then we just say what we want to do once all of our requests have

23
00:01:34.440 --> 00:01:35.100
completed.

24
00:01:35.640 --> 00:01:39.860
So right now, let's just start building out the skeleton of what we want to do.

25
00:01:40.170 --> 00:01:47.340
So within the parentheses for when we are going to have to JSON requests and these just get separated

26
00:01:47.340 --> 00:01:48.260
by commas.

27
00:01:48.540 --> 00:01:55.290
So just as a temporary placeholder, we could say a comma, B, inreality each one of these will be

28
00:01:55.290 --> 00:02:02.340
a JSON request and then within the parentheses for then this is where we include an anonymous function

29
00:02:02.340 --> 00:02:05.330
that we want to run once all of our data is ready.

30
00:02:05.610 --> 00:02:11.670
So to create an anonymous function, we just say function, parentheses, curly brackets, and then

31
00:02:11.670 --> 00:02:13.920
you know me in between the curly brackets.

32
00:02:13.920 --> 00:02:16.020
I like to drop down to a new line.

33
00:02:16.710 --> 00:02:23.040
And actually, instead of spelling out the word function here, why don't we use an E six arrow function?

34
00:02:23.280 --> 00:02:27.480
So that way the function doesn't try to hijack the JavaScript keyword this.

35
00:02:27.900 --> 00:02:33.450
So to do that, we can just delete the word function here, but keep the parentheses right after it

36
00:02:34.440 --> 00:02:36.060
and right after the parentheses.

37
00:02:36.060 --> 00:02:39.120
Just include equal sign greater than now.

38
00:02:39.120 --> 00:02:46.800
The beauty of combining win with then is we can include parameter names within these new empty parentheses.

39
00:02:47.130 --> 00:02:50.130
You can make up whatever names you want just as a test.

40
00:02:50.130 --> 00:02:57.780
You could say one, comma, two, and the win then combo is going to automatically map the results of

41
00:02:57.780 --> 00:03:04.620
this git request to this parameter and it's going to map the results from this git request to this parameter.

42
00:03:04.890 --> 00:03:11.190
And if you had a third request or a fourth request, well, then you could just include matching parameters

43
00:03:11.190 --> 00:03:11.460
here.

44
00:03:12.510 --> 00:03:14.700
Now, again, these names do not matter.

45
00:03:15.240 --> 00:03:21.090
It's just as simple as this first item will be matched with this first parameter, the second item with

46
00:03:21.090 --> 00:03:22.080
this second parameter.

47
00:03:22.500 --> 00:03:24.390
Now, again, we're only going to have two.

48
00:03:24.390 --> 00:03:25.950
So let me delete those.

49
00:03:27.120 --> 00:03:31.380
So, for example, in just a minute from now, we are going to get rid of these placeholders, A and

50
00:03:31.380 --> 00:03:38.060
B, and we're going to replace them with the actual JSON requests to the posts and pages you URLs.

51
00:03:38.610 --> 00:03:44.250
So with that in mind, why don't we change our parameter names here instead of one we could say posts

52
00:03:44.760 --> 00:03:47.070
and instead of two, we could save pages.

53
00:03:47.490 --> 00:03:53.190
And now the raw JSON data that WordPress sends back will live within these parameter names.

54
00:03:53.480 --> 00:03:56.520
We can access them within the body of our function here.

55
00:03:56.880 --> 00:04:02.670
And then we would just want to go ahead and combine these two and then output them into HTML onto the

56
00:04:02.670 --> 00:04:03.220
page.

57
00:04:03.540 --> 00:04:09.180
Now, we've already done exactly that down here, so why don't we just cut and paste this code into

58
00:04:09.180 --> 00:04:10.400
our new section?

59
00:04:10.740 --> 00:04:15.960
So I'm going to begin selecting from this line where we create a variable named combined results.

60
00:04:16.380 --> 00:04:19.740
And let's select down to the is Spiner visible line.

61
00:04:20.700 --> 00:04:25.560
So let's just cut that and then paste it right here and now.

62
00:04:25.560 --> 00:04:32.280
All we need to do is include real get Jason requests here instead of the placeholder A and B. So instead

63
00:04:32.280 --> 00:04:41.340
of a, let's say, dollar sign dot, get JSON parentheses, then let's do the same thing for B dollar

64
00:04:41.340 --> 00:04:44.850
sign dot, get Jason parentheses.

65
00:04:45.300 --> 00:04:50.790
And in order to maintain some sanity, I like to break down each one of these onto their own line.

66
00:04:51.270 --> 00:04:56.460
So right after the opening when parentheses and right before this dollar sign here, why don't we just

67
00:04:56.460 --> 00:04:59.830
drop down and then in between the two get JSON request.

68
00:05:00.060 --> 00:05:05.730
We can also drop down and then after this final get Jason request and its parentheses, we can also

69
00:05:05.730 --> 00:05:06.660
drop down again.

70
00:05:07.500 --> 00:05:10.930
OK, now let's just go ahead and fill out to get Jason requests.

71
00:05:11.400 --> 00:05:16.890
Now, normally you would want to give the get Jason meant that at least two arguments, right?

72
00:05:16.890 --> 00:05:20.520
The first argument is the Eurail that you want to send a request to.

73
00:05:20.730 --> 00:05:26.040
And then the second argument is a function that you want to run once the server responds.

74
00:05:26.340 --> 00:05:32.670
However, in this case, since we've got the win method that's babysitting these requests and it's going

75
00:05:32.670 --> 00:05:39.060
to automatically pass on their results as parameters into our then method, since that's the case,

76
00:05:39.060 --> 00:05:44.250
we don't even need to provide a callback function for each JSON request.

77
00:05:45.210 --> 00:05:51.570
So we only need to pass them one argument, and that is the euro that we want to send a request to now

78
00:05:51.570 --> 00:05:56.060
instead of typing out that Eurail again, let's just go down here and copy and paste it.

79
00:05:56.280 --> 00:06:02.040
So I'm going to begin selecting from the beginning of this university data and scroll all the way to

80
00:06:02.040 --> 00:06:07.090
the right and include the this search field dot val and the parentheses.

81
00:06:07.110 --> 00:06:09.120
So just write up before this comma.

82
00:06:09.570 --> 00:06:13.080
Lets copy that and then back up in our new code.

83
00:06:13.530 --> 00:06:18.780
Let's get rid of the X placeholder and paste in our clipboard and then we can do the same thing for

84
00:06:18.780 --> 00:06:24.550
the second, get just on request and just change posts to pages.

85
00:06:24.990 --> 00:06:25.500
All right.

86
00:06:25.500 --> 00:06:31.170
Now before we save this, we just have one more thing we need to take care of down on this line of code

87
00:06:31.170 --> 00:06:33.330
where we are combining the results.

88
00:06:33.660 --> 00:06:39.510
When we first wrote this line of code, we were still using the callback function that the JSON method

89
00:06:39.510 --> 00:06:40.440
supplies.

90
00:06:40.710 --> 00:06:46.470
And in that case, the only thing that's going to live in these parameters of posts and pages is the

91
00:06:46.470 --> 00:06:48.730
actual WordPress JSON data.

92
00:06:48.930 --> 00:06:55.650
However, now that these parameters are coming from the win then combo, they contain a little bit more

93
00:06:55.650 --> 00:06:57.890
than just the WordPress JSON data.

94
00:06:58.140 --> 00:07:04.190
They also contain information about the JSON request itself, like whether it succeeded or failed.

95
00:07:04.560 --> 00:07:10.530
So down on this line where we are trying to combine posts with pages instead of just working with the

96
00:07:10.530 --> 00:07:16.610
posts parameter itself, let's tack on to it and say square brackets zero.

97
00:07:16.890 --> 00:07:20.370
So that way we are only working with the first item in its array.

98
00:07:20.550 --> 00:07:24.690
In this case, the first item is the actual JSON data itself.

99
00:07:25.020 --> 00:07:30.030
And the other items in the array are the information about whether it succeeded or failed.

100
00:07:30.840 --> 00:07:33.090
So then we can just do the same thing with pages.

101
00:07:33.120 --> 00:07:36.330
So right after pages, square brackets, zero.

102
00:07:36.660 --> 00:07:37.340
Perfect.

103
00:07:37.350 --> 00:07:42.040
Now at this point we can go ahead and delete our old code that we are no longer using.

104
00:07:42.300 --> 00:07:49.530
So that begins with the get JSON line and ends with curly bracket parentheses semicolon so we can delete

105
00:07:49.530 --> 00:07:52.140
that and then go ahead and give this a save.

106
00:07:52.620 --> 00:07:57.690
And if I try to search for lorem as in lorem ipsum again, perfect.

107
00:07:57.690 --> 00:08:03.330
Everything still works and now the experience should be a little bit faster for the visitors of the

108
00:08:03.330 --> 00:08:03.690
site.

109
00:08:03.930 --> 00:08:08.650
Now before we bring this lesson to a close, let's do a tiny bit of error handling.

110
00:08:08.970 --> 00:08:15.330
So for example, what if there's a network or Internet connection problem or one of our users is slightly

111
00:08:15.330 --> 00:08:16.200
misspelled?

112
00:08:16.710 --> 00:08:22.710
So maybe after JSON, if I add in some gibberish, that's obviously going to throw an error.

113
00:08:22.710 --> 00:08:25.710
But we don't want our script to just explode.

114
00:08:25.920 --> 00:08:31.680
We want to be able to detect that there's a problem and still output a little bit of text to the user

115
00:08:31.680 --> 00:08:33.910
that says unexpected error.

116
00:08:33.930 --> 00:08:35.180
Please try again.

117
00:08:35.430 --> 00:08:37.800
So to make that happen, here's what we can do.

118
00:08:37.980 --> 00:08:40.370
It all has to do with the then method.

119
00:08:40.650 --> 00:08:44.280
So here's the opening parentheses for then and down.

120
00:08:44.280 --> 00:08:46.920
Here is the closing parentheses for that.

121
00:08:47.220 --> 00:08:52.620
Now at the moment are then method only has a single argument, which is this anonymous function.

122
00:08:52.890 --> 00:08:58.170
However, we can give it a second argument which will be used if it detects an error.

123
00:08:58.560 --> 00:09:04.590
So down on this line, right after the closing curly bracket, we can just say comma and provide another

124
00:09:04.590 --> 00:09:05.310
argument.

125
00:09:05.460 --> 00:09:07.380
Let's just give it an anonymous function.

126
00:09:07.620 --> 00:09:12.660
So parentheses and then arrow symbol and then curly brackets.

127
00:09:13.470 --> 00:09:21.030
And if there's an error, why don't we just target the results div so this results div and adjust its

128
00:09:21.360 --> 00:09:28.890
HTML and we can just create a paragraph that says unexpected error.

129
00:09:29.740 --> 00:09:31.080
Please try again.

130
00:09:31.990 --> 00:09:38.550
OK, now if I save this and leave in this gibberish in the Urals, it's going to throw an error if I

131
00:09:38.550 --> 00:09:39.390
try to search.

132
00:09:41.850 --> 00:09:43.780
Perfect, unexpected error.

133
00:09:43.800 --> 00:09:44.860
Please try again.

134
00:09:45.090 --> 00:09:50.460
So at the very least, we can rest assured knowing that our script is never going to just outright explode

135
00:09:50.460 --> 00:09:51.310
and break down.

136
00:09:52.020 --> 00:09:54.390
So let's get rid of that and put it back to the correct you.

137
00:09:55.230 --> 00:09:56.510
And we are in business.

138
00:09:56.880 --> 00:09:58.890
We can search to our heart's content.

139
00:09:59.520 --> 00:10:01.560
That's going to bring this lesson to a close.

140
00:10:01.560 --> 00:10:07.550
In our next lesson, we will learn more about customizing the WordPress rest API.

141
00:10:08.070 --> 00:10:10.140
Let's keep it rolling and I will see you then.
