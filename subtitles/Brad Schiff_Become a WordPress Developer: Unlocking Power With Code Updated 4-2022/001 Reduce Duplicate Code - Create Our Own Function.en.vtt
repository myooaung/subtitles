WEBVTT
1
00:00:01.590 --> 00:00:02.610
Hello, everyone.

2
00:00:03.040 --> 00:00:10.110
In this lesson, we will learn how to reduce duplicate code in our project in particular, we are going

3
00:00:10.110 --> 00:00:12.930
to be focusing on our page banner area.

4
00:00:13.260 --> 00:00:19.680
At the moment, I'm viewing a professor detailed screen, and in our previous lesson we wrote code so

5
00:00:19.680 --> 00:00:25.670
that each professor can have its own unique background photo as well as subtitle text.

6
00:00:26.100 --> 00:00:30.060
Right now, let's go take a look at that code that we wrote to power the page banner.

7
00:00:30.690 --> 00:00:35.270
So in our theme folder, jump in to single Professor P..

8
00:00:35.820 --> 00:00:41.640
And here's the page banner code that displays the dynamic background image and subtitle text.

9
00:00:41.970 --> 00:00:45.450
So this takes care of the page banner for the professor post type.

10
00:00:45.450 --> 00:00:48.390
But what about all of our other post types?

11
00:00:48.750 --> 00:00:49.110
Right.

12
00:00:49.110 --> 00:00:54.630
Like events and programs and single blog posts and traditional pages.

13
00:00:54.990 --> 00:01:01.440
Now our first instinct might be to copy and paste and duplicate this code into those other four or five

14
00:01:01.440 --> 00:01:02.430
template files.

15
00:01:02.610 --> 00:01:07.980
But that's probably not the best idea, because then if in the future we ever need to make a change

16
00:01:07.980 --> 00:01:13.980
to any of this code, we would have to edit five or six files instead of just one single file.

17
00:01:14.410 --> 00:01:20.220
So in order to avoid duplicating this code into five different files, let me show you what we can do

18
00:01:20.550 --> 00:01:21.110
right now.

19
00:01:21.120 --> 00:01:24.720
Let's go ahead and highlight this div that has a class of page banner.

20
00:01:25.350 --> 00:01:32.640
So this entire chunk of code and let's copy it into our clipboard and then let's jump in to our functions

21
00:01:33.780 --> 00:01:34.270
file.

22
00:01:34.800 --> 00:01:39.630
So up at the very top here, we can create a reusable, recyclable function.

23
00:01:40.560 --> 00:01:43.590
So function and we could name it whatever we want.

24
00:01:44.160 --> 00:01:51.990
Just to make sense, I'm going to name it page, banner, parentheses, curly brackets and inside the

25
00:01:51.990 --> 00:01:52.980
body of the function.

26
00:01:52.980 --> 00:01:54.470
Let's begin with a comment.

27
00:01:54.480 --> 00:02:01.850
So slash, slash and let's say HP Logic will live here, OK?

28
00:02:01.890 --> 00:02:05.550
And we can replace this with real code a bit later on in the lesson.

29
00:02:05.850 --> 00:02:11.340
But for now, remember that our clipboard is full of HTML, not PHP.

30
00:02:11.880 --> 00:02:17.910
So maybe down on a new line, let's drop out of P and then right before this closing curly bracket that

31
00:02:17.910 --> 00:02:20.870
ends the function, we can go back into B..

32
00:02:21.270 --> 00:02:26.010
So now in between those two lines right here, we are free to paste in our clipboard.

33
00:02:28.500 --> 00:02:30.090
Let's go ahead and save that.

34
00:02:30.510 --> 00:02:36.600
OK, so now that we've created a function named Page Banner with the relevant code back in our single

35
00:02:36.600 --> 00:02:43.350
professor template file, we can go ahead and delete that div with the class of page banner and instead

36
00:02:43.350 --> 00:02:44.460
write in its place.

37
00:02:44.460 --> 00:02:46.410
Let's call the page banner function.

38
00:02:46.740 --> 00:02:48.210
So up on this line we're still in.

39
00:02:48.930 --> 00:02:56.730
So maybe just drop down to a new line and let's just say page banner parentheses to call the function.

40
00:02:57.240 --> 00:02:58.620
Let's go ahead and save that.

41
00:03:00.250 --> 00:03:06.250
And we see that the dynamic page banner on the front end is still working perfectly, OK, so that takes

42
00:03:06.250 --> 00:03:07.270
care of professors.

43
00:03:07.660 --> 00:03:09.550
What about a traditional page?

44
00:03:10.000 --> 00:03:17.380
So if I click about us up in the header, what if we edit the about US page to use a custom background

45
00:03:17.380 --> 00:03:19.140
image and a custom subtitle?

46
00:03:19.570 --> 00:03:24.190
So on the about US page, let's use this edit page link up in the menubar.

47
00:03:25.760 --> 00:03:34.070
And let's go ahead and give the about us page a subtitle, let's say we are a great school that has

48
00:03:34.070 --> 00:03:36.340
been around for a long time.

49
00:03:37.010 --> 00:03:41.210
And let's also go ahead and upload a custom background image for the page banner.

50
00:03:41.630 --> 00:03:44.420
To add image, let's upload a file.

51
00:03:45.910 --> 00:03:47.950
I will use this photo of a building.

52
00:03:50.310 --> 00:03:52.260
Select image down the bottom, right?

53
00:03:53.130 --> 00:03:59.610
OK, let's go ahead and update or save this and then let's use the permalink to go back to the front

54
00:03:59.610 --> 00:04:01.240
end, OK?

55
00:04:01.470 --> 00:04:07.330
And now we need to update the page template to actually use that dynamic data.

56
00:04:07.620 --> 00:04:12.420
So in our text editor, let's jump in to page up here.

57
00:04:12.420 --> 00:04:14.400
We can see that page banner content.

58
00:04:14.730 --> 00:04:20.280
And now, instead of trying to update this code to make it dynamic, let's just delete it entirely to

59
00:04:20.280 --> 00:04:25.640
delete the page banner div and instead in its place, let's call our page banner function.

60
00:04:26.010 --> 00:04:34.740
So up here, while we are still in P new line and let's just say page banner called the function, let's

61
00:04:34.740 --> 00:04:36.750
save that cool.

62
00:04:36.750 --> 00:04:40.140
And now our generic page template supports our page banner.

63
00:04:40.770 --> 00:04:47.550
Now next, let's work on making our function resilient and flexible, resilient in the sense that if

64
00:04:47.550 --> 00:04:54.150
I go to a page that doesn't have a custom uploaded background image like our history, instead of a

65
00:04:54.150 --> 00:05:01.020
blank black background here, we should instead see the default ocean or beach fallback photo that we

66
00:05:01.020 --> 00:05:02.080
were using before.

67
00:05:02.340 --> 00:05:08.340
And let's also make our function flexible for an example of what I mean in terms of flexibility.

68
00:05:08.640 --> 00:05:16.410
If we go to the All Events archive screen, the title and subtitle on this screen are not being pulled

69
00:05:16.410 --> 00:05:18.210
in from the WordPress database.

70
00:05:18.540 --> 00:05:22.740
Instead, this is just custom text that we typed out in the template for this screen.

71
00:05:23.040 --> 00:05:30.510
So, for example, in our text editor, if we go to Archive Dasch event, since this is an archive screen

72
00:05:30.510 --> 00:05:36.570
or post collection screen, we don't want to pull in the title and subtitle for a specific post that

73
00:05:36.570 --> 00:05:37.650
lives in the database.

74
00:05:37.950 --> 00:05:38.200
Right.

75
00:05:38.230 --> 00:05:40.940
So instead we just type out that text right in the template.

76
00:05:41.400 --> 00:05:48.420
So when I say I want our function to be flexible, if I close this and jump back into our page when

77
00:05:48.420 --> 00:05:54.120
we call this page banner function, it would be nice if within the parentheses we could pass it.

78
00:05:54.120 --> 00:05:59.520
Different arguments to control the title, subtitle and background photo.

79
00:05:59.760 --> 00:06:01.590
Well, we can do exactly that.

80
00:06:01.950 --> 00:06:04.200
So check this out within the parentheses.

81
00:06:04.200 --> 00:06:10.680
When we call our function, let's create an array so the word array and then its own set of parentheses

82
00:06:10.920 --> 00:06:16.110
and then in between those array parentheses, let's drop down to a new line to stay organized.

83
00:06:16.380 --> 00:06:21.180
And now we can create an associative array just like we've been doing throughout the course.

84
00:06:21.570 --> 00:06:27.420
Except this time we are the creators of the function, which means we get to make up the names of the

85
00:06:27.420 --> 00:06:28.320
parameters.

86
00:06:28.680 --> 00:06:29.910
Just as an example.

87
00:06:29.910 --> 00:06:35.340
Let's say that title equals hello there.

88
00:06:35.380 --> 00:06:37.110
This is the title.

89
00:06:37.680 --> 00:06:39.360
This parameter name could be anything.

90
00:06:39.360 --> 00:06:40.620
It doesn't have to be title.

91
00:06:40.770 --> 00:06:42.630
It could be pizza or unicorn.

92
00:06:42.870 --> 00:06:47.370
It can be anything we choose because we are the ones that are going to need to be on the lookout for

93
00:06:47.370 --> 00:06:50.370
this name in our function that lives in functions.

94
00:06:51.750 --> 00:06:57.000
Before we update our function to be on the lookout for this incoming array of arguments, let's add

95
00:06:57.000 --> 00:07:05.010
a comma at the end of this line and let's also create a parameter named subtitle and set it to equal

96
00:07:05.610 --> 00:07:06.070
pie.

97
00:07:06.570 --> 00:07:09.730
This is the subtitle, right?

98
00:07:09.780 --> 00:07:12.300
These are just quick test values at this point.

99
00:07:12.300 --> 00:07:19.890
Let's go ahead and save our progress and then let's jump in to functions and let's make our page banner

100
00:07:19.890 --> 00:07:20.580
function.

101
00:07:20.790 --> 00:07:24.230
Be on the lookout for that incoming array of arguments.

102
00:07:24.630 --> 00:07:29.810
So to achieve that within our functions parentheses, we can just create a parameter.

103
00:07:30.030 --> 00:07:34.260
So begin with a dollar sign and then you can make up whatever name you want.

104
00:07:34.740 --> 00:07:41.010
ARGs is a very common name to use here, short for arguments, but you could also call this data or

105
00:07:41.010 --> 00:07:43.560
unicorn or pizza or magic name.

106
00:07:43.560 --> 00:07:44.300
Doesn't matter.

107
00:07:44.310 --> 00:07:49.170
I'm going to go with ARGs because that's just sort of an industry standard and WordPress.

108
00:07:49.500 --> 00:07:55.470
But the idea here is that now within the body of our function, we can dig into this ARGS array and

109
00:07:55.470 --> 00:07:57.150
use whatever info we want.

110
00:07:57.430 --> 00:08:01.530
So for example, let's use the title within this main H1.

111
00:08:01.740 --> 00:08:07.500
Instead of outputting the WordPress title from the database, let's output the title argument that's

112
00:08:07.500 --> 00:08:09.060
getting passed into the function.

113
00:08:09.450 --> 00:08:09.780
Right.

114
00:08:09.790 --> 00:08:15.870
So back in page, when we call the function, remember we've got an array and then we set the title

115
00:08:15.870 --> 00:08:17.930
to Hello, this is the title.

116
00:08:18.450 --> 00:08:27.600
So check this out back in our functions be let's hollow out the H1 and let's drop into P and let's echo

117
00:08:27.600 --> 00:08:31.640
out and let's begin by looking inside our args array.

118
00:08:31.830 --> 00:08:32.030
Right.

119
00:08:32.130 --> 00:08:35.940
We have access to this because we've passed it into the signature of the function.

120
00:08:36.180 --> 00:08:43.410
So down here, look inside the args array to look inside an array, it's just square brackets and then

121
00:08:43.410 --> 00:08:46.380
it's just quotes in the name of the parameter that you're looking for.

122
00:08:46.680 --> 00:08:48.270
So in our case title.

123
00:08:48.990 --> 00:08:49.150
So.

124
00:08:49.210 --> 00:08:54.520
Now, if I go ahead and save this and then jump back to the about us page.

125
00:08:55.890 --> 00:08:56.320
Cool.

126
00:08:56.340 --> 00:09:02.220
Here we see the title that we passed into the function as an argument, but what happens if we call

127
00:09:02.220 --> 00:09:05.710
the function and do not provide a title argument?

128
00:09:06.150 --> 00:09:13.230
So back in our page, HP, what if we delete this title line so we just don't provide any sort of title?

129
00:09:14.820 --> 00:09:21.330
So this is obviously not what we want, so this is where the topic of intelligent defaults comes into

130
00:09:21.330 --> 00:09:21.800
play.

131
00:09:22.050 --> 00:09:26.670
If a title argument is not provided, we don't want it to default to nothing.

132
00:09:27.000 --> 00:09:32.720
Instead, why don't we default or fall back on the title of the current page or post?

133
00:09:33.030 --> 00:09:36.030
So let me show you how to set up a fallback or default value.

134
00:09:36.330 --> 00:09:43.980
Let's jump into functions and remember up here where we have this comment, p logic will live here.

135
00:09:44.430 --> 00:09:45.720
Let's delete that line.

136
00:09:45.720 --> 00:09:48.630
But in its place, let's create an if statement.

137
00:09:49.800 --> 00:09:57.540
So if parentheses curly brackets and for our condition, check in these parentheses, let's say only

138
00:09:57.540 --> 00:10:00.210
if a title was not provided.

139
00:10:00.480 --> 00:10:07.230
So first, let's just try to pull up the title property so we would look inside our args array and then

140
00:10:07.230 --> 00:10:09.300
to look inside its square brackets.

141
00:10:09.990 --> 00:10:10.960
Quotes title.

142
00:10:11.310 --> 00:10:14.400
So if a title gets passed, this is how we access it.

143
00:10:14.610 --> 00:10:20.310
And as long as the title exists or is not completely empty, this will evaluate to true.

144
00:10:20.580 --> 00:10:25.000
But if we want to check for the opposite of that, we can just begin this with an exclamation.

145
00:10:25.350 --> 00:10:31.410
So we're saying only if this function got called and a title was not passed into it.

146
00:10:32.100 --> 00:10:38.760
Only if that is the case, then let's just set the title to the WordPress title field for that post

147
00:10:38.760 --> 00:10:39.450
or page.

148
00:10:39.690 --> 00:10:40.070
Right.

149
00:10:40.080 --> 00:10:45.600
So in WordPress, we know that you can get the current title for a page or post by running a function

150
00:10:45.600 --> 00:10:48.300
named get the title.

151
00:10:49.080 --> 00:10:55.770
OK, now, right before this, at the beginning of this line, let's just set our args array and look

152
00:10:55.770 --> 00:11:01.480
inside it for the title property and then set that to equal get the title.

153
00:11:01.830 --> 00:11:07.260
So this way down in the actual template part of our code, we don't have to mix in any logic.

154
00:11:07.260 --> 00:11:13.890
We can just always output our args title property and we can handle all of the logic decision making

155
00:11:13.890 --> 00:11:15.570
up in this portion of the code.

156
00:11:15.910 --> 00:11:17.310
OK, so we've set up a fallback.

157
00:11:17.310 --> 00:11:21.330
If no title is provided, just pull in the WordPress post page title.

158
00:11:21.630 --> 00:11:22.740
Let's save that.

159
00:11:23.520 --> 00:11:25.140
And now if we jump back, cool.

160
00:11:25.140 --> 00:11:27.690
We see about us on the about us page.

161
00:11:28.620 --> 00:11:33.030
But if we go into page PHP and add title back in.

162
00:11:36.330 --> 00:11:39.060
We see that custom argument value cool.

163
00:11:39.240 --> 00:11:45.970
Now let's set up similar fallback or default behavior for the subtitle and the background photo.

164
00:11:46.500 --> 00:11:48.060
Let's begin with the subtitle.

165
00:11:48.540 --> 00:11:55.530
So back in functions, BHP right below this if statement, let's just create a new if statement.

166
00:11:56.250 --> 00:12:00.300
So if parentheses curly brackets for the condition check.

167
00:12:00.300 --> 00:12:08.800
Let's see if the args subtitle exists and to check for the opposite of that, just begin with an exclamation.

168
00:12:09.060 --> 00:12:18.750
So if no subtitle argument is passed into the function, then let's just set the args subtitle to equal

169
00:12:19.050 --> 00:12:23.550
the WordPress custom field subtitle value for the current post or page.

170
00:12:23.880 --> 00:12:26.340
Right the value that lives in the database.

171
00:12:26.670 --> 00:12:30.870
So to access that, let's call a function named git field.

172
00:12:31.230 --> 00:12:33.210
Let's end this line with a semicolon.

173
00:12:33.570 --> 00:12:39.030
But in the parentheses forget field, we just include the name of the advanced custom field that we're

174
00:12:39.030 --> 00:12:41.790
interested in, which in this case you can't remember.

175
00:12:41.790 --> 00:12:45.820
It was page underscore Baner underscore subtitle.

176
00:12:46.250 --> 00:12:49.500
OK, so this will take care of the logic or decision making.

177
00:12:49.830 --> 00:12:55.230
And then down here in the template part of our function, when it comes time to actually output the

178
00:12:55.230 --> 00:12:58.350
subtitle, let's delete this, the field code.

179
00:12:59.040 --> 00:13:07.630
So now we just have an empty area and instead let's just echo out our args subtitle value.

180
00:13:08.520 --> 00:13:12.090
OK, so if we save that and check out the front end, cool.

181
00:13:12.090 --> 00:13:17.900
We see the subtitle that we passed into the function as an argument, but if we delete that really quick

182
00:13:17.910 --> 00:13:22.140
so in page B if we remove that subtitle.

183
00:13:25.230 --> 00:13:31.430
Perfect, we see that our function defaults to the custom field subtitle for the current post or page.

184
00:13:31.800 --> 00:13:36.790
Now changing gears a bit, let's work on the fall-back behavior for the background photo.

185
00:13:37.470 --> 00:13:45.510
So back in page, when we are calling the function within this array instead of title or subtitle,

186
00:13:45.750 --> 00:13:52.590
you could imagine that maybe we would pass along something named photo and set that to equal a U.

187
00:13:52.590 --> 00:13:54.630
RL that points towards a JPEG.

188
00:13:54.880 --> 00:13:57.360
So, for example, let me paste in my clipboard.

189
00:13:57.540 --> 00:14:02.730
If you want to follow along with this example, you can pause the lesson and go on to the Internet or

190
00:14:02.730 --> 00:14:08.960
Google and just find an absolute neutral to any jpeg or image that you want to test out.

191
00:14:09.300 --> 00:14:09.490
Right.

192
00:14:09.530 --> 00:14:15.620
So in my example, the euro that I just used looks out onto the Internet to pull in this jpeg.

193
00:14:16.350 --> 00:14:22.500
So back in our code, let's adjust our function to actually work with this URL that we pass it.

194
00:14:22.840 --> 00:14:25.380
So let's save this and back in functions.

195
00:14:26.010 --> 00:14:28.950
HP right below our second if statement.

196
00:14:28.950 --> 00:14:31.790
Let's just create another if statement for the photo.

197
00:14:32.220 --> 00:14:39.990
So if parentheses curly brackets and for the condition, let's say only if a photo argument was not

198
00:14:39.990 --> 00:14:41.000
passed along.

199
00:14:41.250 --> 00:14:42.570
So defined that argument.

200
00:14:42.570 --> 00:14:49.780
We can look inside our args array for photo and to check for the opposite of that exclamation.

201
00:14:50.220 --> 00:14:53.380
So if no photo argument is passed along, what do we want to do?

202
00:14:53.700 --> 00:14:59.700
Well, let's check to see if an advanced custom field image was uploaded for the current post or page.

203
00:15:00.030 --> 00:15:07.410
So we will use another if statement and for the condition we want to check to see if an image was uploaded

204
00:15:07.410 --> 00:15:08.660
into the custom field.

205
00:15:09.000 --> 00:15:15.780
So let's say get field and the name of the advanced custom field where users can upload an image.

206
00:15:15.780 --> 00:15:22.830
If you forgot the name, it was page banner, background image.

207
00:15:23.130 --> 00:15:28.760
And this will only evaluate to true if there's actually an image for the current poster page.

208
00:15:29.010 --> 00:15:36.690
So if that's the case, let's just go ahead and set our args photo to equal the perfectly cropped version

209
00:15:36.690 --> 00:15:38.190
of the image that was uploaded.

210
00:15:38.670 --> 00:15:48.930
So we'll say get field, field name was Page Banner, Back Ground Image, but we don't want the original

211
00:15:48.930 --> 00:15:50.720
super high resolution copy.

212
00:15:51.060 --> 00:15:57.920
So right after that, let's look inside the array named sizes and then write inside that array.

213
00:15:57.960 --> 00:16:02.220
We are interested in the image that is cropped to the page banner size.

214
00:16:02.550 --> 00:16:07.410
If this code is a bit fuzzy to you, you might remember that we already used this similar code down

215
00:16:07.410 --> 00:16:13.080
here to pull in a specific sized version of the image, gave it back to the task at hand.

216
00:16:13.200 --> 00:16:19.290
Let's finish out this logic here, because we need one last level of insurance or one last fallback.

217
00:16:19.830 --> 00:16:26.430
So what happens if someone does not pass along a photo argument and the current page or post doesn't

218
00:16:26.430 --> 00:16:28.860
have a page banner, custom field photo?

219
00:16:29.040 --> 00:16:34.920
Well, to handle that right after this inter nested if statement, right after the closing curly bracket

220
00:16:34.920 --> 00:16:39.300
for it, we can say ls and then a pair of curly brackets.

221
00:16:39.780 --> 00:16:42.330
And this is our last line of defense.

222
00:16:42.660 --> 00:16:48.270
So now let's just pull in that beach or ocean photograph that we've been using throughout the entire

223
00:16:48.270 --> 00:16:48.870
course.

224
00:16:49.350 --> 00:16:54.210
So if it comes to it, let's set the args photo to equal.

225
00:16:54.390 --> 00:16:57.750
And then I just want to point towards a file that lives in our theme folder.

226
00:16:58.050 --> 00:17:01.680
So let's call a function named Get the File.

227
00:17:01.680 --> 00:17:07.740
You are I and this function will point towards our theme folder and then we can just tack on a slash

228
00:17:07.740 --> 00:17:11.190
image is slash ocean dot jpeg.

229
00:17:11.760 --> 00:17:17.490
OK, now at this point our logic and decision making for the photo is complete, but let's be sure to

230
00:17:17.490 --> 00:17:21.120
scroll down and update the actual template part of the code.

231
00:17:21.360 --> 00:17:25.950
So here is where we are actually using the you are URL that points towards an image.

232
00:17:26.160 --> 00:17:33.030
So right after background image, you RL and then right inside this opening block, let's just go ahead

233
00:17:33.030 --> 00:17:36.990
and delete everything that we see here inside the block.

234
00:17:37.140 --> 00:17:45.660
So now we just have opening and closing tags and let's just echo out our args photo value.

235
00:17:46.560 --> 00:17:50.160
This is a bit difficult to read because it's dropping down onto the next line.

236
00:17:50.490 --> 00:17:54.840
But you can see ARGs and then I'm opening up square brackets and then photo.

237
00:17:55.950 --> 00:17:57.840
OK, so let's give that a save.

238
00:17:59.490 --> 00:17:59.950
Cool.

239
00:17:59.970 --> 00:18:05.220
So we see that the background photo is that image that lives out on the Internet that we provided as

240
00:18:05.220 --> 00:18:06.110
an argument.

241
00:18:07.000 --> 00:18:12.680
So back in page HP, remember, we said photo equals this.

242
00:18:13.080 --> 00:18:20.010
Now, if we go ahead and delete that, so if we don't provide a photo argument, it falls back to the

243
00:18:20.010 --> 00:18:23.860
advanced custom fields image upload for the current page or post.

244
00:18:24.150 --> 00:18:31.020
And finally, if we visit a page that does not have an image uploaded for that custom field, for example,

245
00:18:31.020 --> 00:18:34.080
if we click on to our history or our goals.

246
00:18:35.120 --> 00:18:41.390
Perfect, we see the ocean or beach photo as our fallback now, in reality, when it comes to traditional

247
00:18:41.390 --> 00:18:46.820
pages like this, we don't actually want a hard code, a custom title as the argument.

248
00:18:46.850 --> 00:18:48.080
So back in page.

249
00:18:49.610 --> 00:18:53.200
Let's just not even provide an array of any arguments whatsoever.

250
00:18:53.480 --> 00:18:55.520
Let's just simply call page banner.

251
00:18:58.290 --> 00:19:00.570
Woops, we see a fatal error message here.

252
00:19:01.620 --> 00:19:02.380
I know what's wrong.

253
00:19:02.670 --> 00:19:07.080
So right now you can follow along with me in our functions file.

254
00:19:07.320 --> 00:19:10.450
We've listed ARGs as a necessary parameter.

255
00:19:10.620 --> 00:19:14.970
So if someone calls the function and doesn't provide it, that it's going to throw a tantrum.

256
00:19:15.300 --> 00:19:23.490
So what we can do instead in our function signature, we can say ARGs equals null and that will basically

257
00:19:23.490 --> 00:19:29.580
make the argument optional instead of required, because now, no matter what happens, ARGs will always

258
00:19:29.580 --> 00:19:30.780
equal something right.

259
00:19:30.790 --> 00:19:32.310
It will at least equal no.

260
00:19:32.670 --> 00:19:36.370
So let's go ahead and say that that gets rid of the error message.

261
00:19:36.390 --> 00:19:37.050
Perfect.

262
00:19:37.380 --> 00:19:40.500
And that's actually going to bring this lesson to a close.

263
00:19:40.860 --> 00:19:46.980
In our next lesson, we will go through all of our templates and actually make use of our new page banner

264
00:19:46.980 --> 00:19:47.550
function.

265
00:19:47.850 --> 00:19:49.950
Let's keep things rolling and I will see you then.
