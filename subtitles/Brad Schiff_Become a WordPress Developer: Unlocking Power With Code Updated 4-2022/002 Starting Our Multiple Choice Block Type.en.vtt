WEBVTT
1
00:00:02.260 --> 00:00:03.220
Hello, everyone.

2
00:00:03.610 --> 00:00:09.560
In this lesson, we're going to start on our first real block type that we're building together.

3
00:00:09.940 --> 00:00:15.010
Let's look at a preview of the finished product and talk about what we should start working on first

4
00:00:15.010 --> 00:00:15.830
in this lesson.

5
00:00:16.150 --> 00:00:21.000
So here on this example post, this is the block type that we're going to start building.

6
00:00:21.280 --> 00:00:26.250
You enter a question and then you can add as many answer rows as you want.

7
00:00:26.590 --> 00:00:29.770
So the question is in this lesson, where should we begin?

8
00:00:30.190 --> 00:00:32.020
And there's no right or wrong answer.

9
00:00:32.020 --> 00:00:37.950
But I think we should start with sort of the overall skeleton of the user interface.

10
00:00:38.110 --> 00:00:46.170
So maybe just a bit of the basic HTML or JSA and maybe just a tiny bit of styling or CSI.

11
00:00:46.450 --> 00:00:52.450
And then in our next lesson, we can write the JavaScript to actually bring it to life so that when

12
00:00:52.450 --> 00:00:55.210
you click on things, something actually happens.

13
00:00:55.420 --> 00:01:01.360
So let me jump over into the tab where you and I are in the same place and let's start moving forward

14
00:01:01.360 --> 00:01:01.980
together.

15
00:01:02.320 --> 00:01:04.020
So jump into your text editor.

16
00:01:04.330 --> 00:01:10.030
We're working in that same folder that we've been working in called Are You Paying Attention Inside

17
00:01:10.030 --> 00:01:11.850
the Sarsae or source folder?

18
00:01:11.860 --> 00:01:15.250
Let's jump into indexed JS right now.

19
00:01:15.280 --> 00:01:21.850
We're interested in the edit function, so whatever the edit function returns, that will be our user

20
00:01:21.850 --> 00:01:22.550
interface.

21
00:01:22.900 --> 00:01:28.510
Now, before we start customizing this, I want to show you a tip to stay organized, and that is,

22
00:01:28.510 --> 00:01:34.150
instead of spelling out our function right here within this code, we can actually create a separate

23
00:01:34.150 --> 00:01:38.200
function below all of this code and then just point towards the function here.

24
00:01:38.740 --> 00:01:45.340
I like to do this because if I can ever avoid having my code indented several layers deep, I usually

25
00:01:45.340 --> 00:01:46.120
try to do that.

26
00:01:46.600 --> 00:01:48.790
So let's do this right after edit call.

27
00:01:48.790 --> 00:01:55.060
And I want you to begin selecting from the start of the F for this function and just select all the

28
00:01:55.060 --> 00:02:00.000
way down after the closing parentheses and the closing curly bracket.

29
00:02:00.010 --> 00:02:03.380
So that's where the function ends right before this comma.

30
00:02:03.580 --> 00:02:07.090
So just cut that into your clipboard for now.

31
00:02:07.090 --> 00:02:10.000
We can leave this blank, will fill this value in in just a moment.

32
00:02:10.000 --> 00:02:15.330
But down at the very bottom now, just paste in your clipboard and let's give this function a name.

33
00:02:15.550 --> 00:02:21.190
Why don't we call it uppercase edit component or you could name it anything.

34
00:02:21.190 --> 00:02:22.210
I just made this up.

35
00:02:22.210 --> 00:02:27.490
But in fact, you do want to name your components with an uppercase letter like this.

36
00:02:28.270 --> 00:02:32.290
OK, but now that we chose this name, whatever you chose, just make sure it starts with a capital

37
00:02:32.290 --> 00:02:32.590
letter.

38
00:02:32.590 --> 00:02:34.050
Let's go use that name up here.

39
00:02:34.060 --> 00:02:37.180
So now edit Colon and you just point towards your function.

40
00:02:37.180 --> 00:02:39.760
So for me it's edit component.

41
00:02:40.480 --> 00:02:40.810
Cool.

42
00:02:40.810 --> 00:02:45.460
So now all of this code isn't indented an extra layer deep at this point.

43
00:02:45.460 --> 00:02:49.930
Let's start actually working on the HTML or that we're returning.

44
00:02:50.530 --> 00:02:52.570
Let's leave this overall wrapper div.

45
00:02:52.570 --> 00:02:58.510
We will absolutely want this, but let's hollow out the inside of it because what I want to show you

46
00:02:58.510 --> 00:03:04.240
is that as we've seen in the previous lesson, yes, we can use any HTML that we want.

47
00:03:04.600 --> 00:03:09.670
So yes, we can spell out the HTML ourselves to create an input field like this.

48
00:03:10.180 --> 00:03:17.320
However, WordPress has a bunch of existing components or elements that we can use.

49
00:03:17.740 --> 00:03:23.710
Now, we don't need to use the WordPress components, but it can go a long way towards making our plugin

50
00:03:23.710 --> 00:03:27.430
look like it's part of WordPress, like it's using the same styling.

51
00:03:28.010 --> 00:03:32.440
So again, I'll keep the overall wrapper div, but let me delete the inputs inside it.

52
00:03:33.340 --> 00:03:39.820
And now we can pretend that there's an HTML element called text control.

53
00:03:40.790 --> 00:03:46.610
And remember, in every element, you either have a closing tag or you should make it a self-closing

54
00:03:46.610 --> 00:03:47.670
tag like this.

55
00:03:47.990 --> 00:03:56.270
Now, you and I know that there is no text's control element in real HTML, but in JSM you can leverage

56
00:03:56.270 --> 00:03:57.830
other components like this.

57
00:03:57.980 --> 00:04:06.230
So WordPress has created sort of a pre-existing recipe for an element or component called text control.

58
00:04:06.620 --> 00:04:12.410
And all we need to do to be able to leverage or use it here like this is just make sure that we import

59
00:04:12.410 --> 00:04:14.020
it up at the top of our file.

60
00:04:14.780 --> 00:04:20.150
So do this with me up at the top, even above this register block line, way up at the top here.

61
00:04:20.150 --> 00:04:23.390
Let's say import for now.

62
00:04:23.390 --> 00:04:25.190
Let's just have an object.

63
00:04:25.190 --> 00:04:34.640
Import curly brackets from string of text at symbol WordPress slash components.

64
00:04:35.090 --> 00:04:39.200
Now, you might think, don't we need to go install this package from NPM?

65
00:04:39.590 --> 00:04:42.050
And normally the answer would be yes.

66
00:04:42.050 --> 00:04:48.980
But in this case, the WordPress automated solution that we're using from WordPress scripts, it's going

67
00:04:48.980 --> 00:04:54.530
to see this and know that it can find it within the global scope of WordPress.

68
00:04:55.100 --> 00:05:00.080
Essentially, when the WordPress team created the WordPress JavaScript package that we're using, they

69
00:05:00.080 --> 00:05:03.200
got creative with their Web pack configuration.

70
00:05:03.410 --> 00:05:09.980
And so when it sees certain names, it knows to actually convert that into a reference that just looks

71
00:05:09.980 --> 00:05:14.390
in the Web browsers global scope because it knows that WordPress can handle loading it.

72
00:05:14.600 --> 00:05:18.940
They've also configured Web page to do this with react and react, Dom.

73
00:05:19.250 --> 00:05:25.370
So even if you and I tried to say you don't need to type this, but even if we tried to say import react

74
00:05:25.370 --> 00:05:29.630
from the react package like this, like you would normally do in JavaScript?

75
00:05:30.050 --> 00:05:35.180
Well, the nice thing is that the WordPress automated JavaScript solution that we're using, it will

76
00:05:35.180 --> 00:05:38.810
see this and it will know that it doesn't need to bundle up.

77
00:05:38.810 --> 00:05:45.170
Another duplicate copy of REACT WordPress already loads a copy of React for US.

78
00:05:45.830 --> 00:05:51.080
So there's no sense in bundling up our own copy and then forcing the visitors of our site to download

79
00:05:51.440 --> 00:05:55.560
our copy and the copy that WordPress is already going to load.

80
00:05:55.580 --> 00:06:01.190
So long story short, the WordPress scripts package that we're using, it will know what to do when

81
00:06:01.190 --> 00:06:02.900
it sees this type of a package.

82
00:06:02.900 --> 00:06:06.680
Naem WordPress components now within the curly brackets.

83
00:06:06.680 --> 00:06:07.700
What do we want to import?

84
00:06:08.030 --> 00:06:12.770
Well, there are all sorts of useful components here, but for right now, we're just interested in

85
00:06:13.040 --> 00:06:14.810
text control.

86
00:06:15.270 --> 00:06:19.040
OK, now with this in place, our code Downbelow should work.

87
00:06:19.430 --> 00:06:21.650
Let's go ahead and save this and test it out.

88
00:06:21.650 --> 00:06:27.500
But remember, you need to in your command line, you need to have our start task running.

89
00:06:27.620 --> 00:06:31.520
So again, that's NPM run start.

90
00:06:31.790 --> 00:06:37.400
And that's going to convert RJ RSX into JavaScript that the browser can understand.

91
00:06:37.880 --> 00:06:44.210
So now let's go test it out back in the browser, let's go under posts, let's start editing a post

92
00:06:45.050 --> 00:06:47.540
loops and you can see we're running into an error here.

93
00:06:47.690 --> 00:06:49.490
I know exactly what the problem is.

94
00:06:49.980 --> 00:06:56.030
So, yes, the automated tool that we're using will know to look for this in the browsers global scope

95
00:06:56.030 --> 00:06:58.310
instead of in NPM package.

96
00:06:58.670 --> 00:07:03.170
But we need to make sure that it's going to exist in the global scope at all.

97
00:07:03.830 --> 00:07:09.830
What I mean by that is we need to tell WordPress to load the appropriate JavaScript file.

98
00:07:10.070 --> 00:07:16.670
So to do that in our HTTP, we just want to list a dependency for this JavaScript file.

99
00:07:16.670 --> 00:07:18.650
Evars, let me show you what I mean.

100
00:07:18.660 --> 00:07:23.420
So in our folder, jump into our index file.

101
00:07:24.350 --> 00:07:28.130
OK, we're looking for the WP Register script line.

102
00:07:28.130 --> 00:07:34.700
Remember, this is where we're loading our JavaScript file and then we have this array of dependencies.

103
00:07:35.300 --> 00:07:42.500
So far we've listed WP blocks and WP element in order to make sure that WordPress is loading all of

104
00:07:42.500 --> 00:07:44.810
its own JavaScript that we want it to.

105
00:07:44.930 --> 00:07:46.550
Let's add another dependancy here.

106
00:07:46.550 --> 00:07:50.690
So comma, string of text and it's WP Dash editor.

107
00:07:52.830 --> 00:07:56.430
Let's give this to save and now if we refresh on the edit screen.

108
00:07:58.500 --> 00:08:04.590
Cool, instead of the air message, we just see a text control element or component, so it looks like

109
00:08:04.590 --> 00:08:11.760
a TextField, you can type into it, only it's got a little bit of styling applied to it and it automatically

110
00:08:11.760 --> 00:08:14.330
knows to take up a good amount of horizontal space.

111
00:08:14.340 --> 00:08:18.030
Now, you can contrast this with just a regular input field.

112
00:08:18.220 --> 00:08:24.240
So right below that text control, we could just say input just for a quick test to see what a default

113
00:08:24.240 --> 00:08:25.890
one looks like compared to this.

114
00:08:26.580 --> 00:08:28.380
Give that save hit refresh.

115
00:08:29.970 --> 00:08:35.160
Now, this particular example of just an input field might not look super impressive, but this is a

116
00:08:35.160 --> 00:08:39.870
concept that we're going to practice again and again, not to show you another reason why it's nice

117
00:08:39.870 --> 00:08:41.330
to use an existing component.

118
00:08:41.640 --> 00:08:44.280
Let's try to give this field a label.

119
00:08:44.910 --> 00:08:51.750
So back in our code on the text control component, we can just give it a prop. or a prop or an attribute

120
00:08:51.750 --> 00:08:55.710
of label equals and then just give it a string of text.

121
00:08:55.710 --> 00:09:00.960
Let's say question, Colin, and then we don't need the example, basic input here.

122
00:09:01.440 --> 00:09:03.840
Let's give that to save the reload.

123
00:09:06.390 --> 00:09:14.250
Cool, so the point is, we didn't need to create any extra HTML for this label element and we didn't

124
00:09:14.250 --> 00:09:21.060
need to manually link it to the input, notice that if you click on the label, it automatically selects

125
00:09:21.060 --> 00:09:21.710
the input.

126
00:09:22.260 --> 00:09:26.000
So maybe you're starting to see the point of using someone else's component.

127
00:09:26.490 --> 00:09:33.510
Whoever created this text control component, they've abstracted away a bit of the monotony of writing

128
00:09:33.510 --> 00:09:40.260
out HTML and then we can just give it an elegant prop and value and everything is taken care of for

129
00:09:40.260 --> 00:09:40.670
us.

130
00:09:41.040 --> 00:09:47.550
OK, now before we move forward and add an area right below this called Answers, write something that'll

131
00:09:47.550 --> 00:09:49.410
look something like this area.

132
00:09:49.590 --> 00:09:54.920
Before we get to that, let's first add a little bit of styling around the block as a whole.

133
00:09:55.470 --> 00:10:00.000
So I'm thinking just a bit of padding all around it, maybe a very subtle border, a little bit of a

134
00:10:00.000 --> 00:10:05.900
background color, just so it sort of stands apart from the other blocks on the page.

135
00:10:06.570 --> 00:10:12.270
So before we start writing any success, let's first give ourselves a class name that we can hook on

136
00:10:12.270 --> 00:10:14.990
to on our overall wrap or div.

137
00:10:15.300 --> 00:10:24.720
So on this opening div tag, remember in JSM, it's not class equals, it's class uppercase name equals.

138
00:10:25.290 --> 00:10:31.320
We can make up any name we want, but let's say paying attention.

139
00:10:32.280 --> 00:10:37.770
Edit block, let's give this a save and now start writing success.

140
00:10:38.230 --> 00:10:44.530
This actually shows off another reason why I love the WordPress JavaScript package that we're using.

141
00:10:45.030 --> 00:10:45.750
Check this out.

142
00:10:45.750 --> 00:10:51.330
It requires zero configuration simply in our SIRC folder.

143
00:10:51.330 --> 00:10:53.040
We're going to create a new file.

144
00:10:53.820 --> 00:11:00.090
You can name it anything you want, but just to make it clear that it's associated with our index file,

145
00:11:00.090 --> 00:11:07.590
I'm going to name it Index DOT and then instead of CSC, we can even use sasy access.

146
00:11:07.590 --> 00:11:09.930
So DOT SPSS.

147
00:11:11.660 --> 00:11:17.180
Let's jump into this new file and write a bit of code so dot to select a class, we named that wrapper

148
00:11:17.180 --> 00:11:20.090
class paying attention.

149
00:11:20.520 --> 00:11:26.900
Edit Gloc, let's give it 20 pixel of padding so you can just type 20 and hit tab.

150
00:11:27.980 --> 00:11:29.720
Let's give it a slightly rounded corners.

151
00:11:29.720 --> 00:11:32.750
So maybe border radius, two or three pixels.

152
00:11:33.360 --> 00:11:35.090
Let's give it a very subtle border.

153
00:11:35.090 --> 00:11:43.820
So border one pixel solid hash tag F1, f1, F1 and let's give it a subtle background color so you can

154
00:11:43.820 --> 00:11:50.650
type Bjerk tab and then for the color let's say desex d6 desex.

155
00:11:51.300 --> 00:11:52.550
OK, let's give that a save.

156
00:11:52.700 --> 00:11:55.400
Now all we need to do is import this.

157
00:11:55.400 --> 00:12:00.710
TXT file from within our JavaScript file and then the automated system.

158
00:12:00.950 --> 00:12:06.740
It will extract it into its own file and place it in the build folder for us.

159
00:12:07.040 --> 00:12:07.900
So check this out.

160
00:12:08.360 --> 00:12:12.740
Let's jump into our JavaScript file up at the very, very top.

161
00:12:12.740 --> 00:12:19.550
Just say import string of text dot slash to look in the current folder that the JavaScript files in

162
00:12:19.880 --> 00:12:22.970
and then just index dot s success.

163
00:12:23.740 --> 00:12:24.770
Let's give that a save.

164
00:12:25.610 --> 00:12:30.470
And as long as your start task is running in your command line, notice we didn't need to do anything.

165
00:12:30.650 --> 00:12:34.880
Now in our build folder, there's this new index success.

166
00:12:35.210 --> 00:12:43.160
So with zero configuration on our part, we now have success getting converted into regular access that

167
00:12:43.160 --> 00:12:44.800
we can load in the browser.

168
00:12:45.260 --> 00:12:53.360
So now we just need to go into PHP and tell WordPress to load this CSFs file on the Post editor screen.

169
00:12:54.110 --> 00:13:02.930
So back in index, remember, in our admin assets function, we already have this register script line

170
00:13:03.650 --> 00:13:06.560
well right above it, still in that same function.

171
00:13:06.560 --> 00:13:11.840
Let's call WP register style semicolon.

172
00:13:11.840 --> 00:13:16.820
We're going to give it to arguments, but I'm realizing to save a good amount of typing, we can actually

173
00:13:16.820 --> 00:13:20.390
just duplicate this line and make a few subtle changes.

174
00:13:20.420 --> 00:13:21.080
So let me do that.

175
00:13:21.080 --> 00:13:25.850
Let's get rid of register style and just duplicate this register script line.

176
00:13:26.630 --> 00:13:28.640
Just select the entire line right above it.

177
00:13:28.640 --> 00:13:29.570
Just paste it in.

178
00:13:29.780 --> 00:13:35.330
OK, so let's change the function that we're calling to WP register style.

179
00:13:35.690 --> 00:13:40.460
So the first argument is sort of a short name that we're making up for our txt file.

180
00:13:40.460 --> 00:13:42.860
Let's just call it Cui's.

181
00:13:43.430 --> 00:13:45.080
Edit success.

182
00:13:45.590 --> 00:13:47.030
Feel free to make up a name here.

183
00:13:47.180 --> 00:13:50.000
The second argument is just pointing towards our file.

184
00:13:50.000 --> 00:13:59.630
So instead of build indexed JS, it would be dot CSX and then we no longer need this third argument.

185
00:14:00.050 --> 00:14:03.330
The array of dependencies are CSFs doesn't have any dependencies.

186
00:14:03.350 --> 00:14:05.450
You can just get rid of that like this.

187
00:14:06.020 --> 00:14:12.050
OK, so now that we've registered this name, now we just tell our block type that we're registering

188
00:14:12.050 --> 00:14:12.620
to use it.

189
00:14:13.310 --> 00:14:20.420
So maybe right below this editor script line, you can add in line and say during a text editor underscore

190
00:14:20.420 --> 00:14:26.390
style equals greater than the arrow and then just the name that you chose.

191
00:14:26.390 --> 00:14:30.110
So I chose the name of Cui's edit siestas.

192
00:14:30.740 --> 00:14:38.180
Be sure to end that with a comma and if we save and then refresh on our block edit screen.

193
00:14:39.530 --> 00:14:45.890
Perfect, we've got the background color in the padding at this point, let's start adding the answers

194
00:14:45.890 --> 00:14:47.260
area right about here.

195
00:14:47.750 --> 00:14:51.320
So if we look at the finished product, it should look something like this.

196
00:14:51.830 --> 00:15:00.710
So to do that, back in our JavaScript file, down in our just below the text control for now, let's

197
00:15:00.710 --> 00:15:04.940
just have a P four paragraph that says Answers Colon.

198
00:15:05.510 --> 00:15:12.890
And then right below this, let's have a row that has a TextField and then a star that you can click

199
00:15:12.890 --> 00:15:16.700
on to market as the correct answer and then also a delete button.

200
00:15:16.910 --> 00:15:17.200
Right.

201
00:15:17.240 --> 00:15:21.140
So if we look at the finished product, the point is that there are three items.

202
00:15:21.140 --> 00:15:28.070
Perreault So the question becomes, do we want to write our own success using Fleck's box or grid to

203
00:15:28.070 --> 00:15:29.810
create this three column layout?

204
00:15:30.260 --> 00:15:36.730
Or can we use WordPress components that will sort of take care of the work for us?

205
00:15:37.250 --> 00:15:38.360
There's no wrong answer.

206
00:15:38.360 --> 00:15:44.210
If you want to set up your own custom HTML and CSFs, you can, but I'm going to show you how to use

207
00:15:44.210 --> 00:15:45.680
WordPress components.

208
00:15:46.160 --> 00:15:51.130
So back in our copy, let's do this up at the very top of our file.

209
00:15:51.140 --> 00:15:54.520
Let's import a few extra components from this line.

210
00:15:54.590 --> 00:15:57.560
So as of right now, we're only importing text control.

211
00:15:57.830 --> 00:16:03.800
But I want you to click right after control still in the curly brackets, say comma and import these

212
00:16:03.800 --> 00:16:14.490
in with me flex, comma, flex block, comma, flex item, comma, button, comma and icon.

213
00:16:15.200 --> 00:16:20.780
So now, without writing any success or coming up with class names, watch how far we can get just by

214
00:16:20.780 --> 00:16:29.240
leveraging these existing components to back down in our JSA ex after the answers paragraph, let's

215
00:16:29.240 --> 00:16:38.150
have a flex element so just flex it tab inside that I want to have one that is a flex block and then

216
00:16:38.150 --> 00:16:41.720
after that I want to have two flex items of flex item.

217
00:16:41.900 --> 00:16:43.040
I want two of those.

218
00:16:43.040 --> 00:16:44.150
So flex item.

219
00:16:44.150 --> 00:16:52.070
Again, the idea here is that flex block will take up as much space as it possibly can, whereas flex

220
00:16:52.070 --> 00:16:56.090
items only take up the smallest amount of space that they need.

221
00:16:56.430 --> 00:16:59.450
So this large area that will be the TextField.

222
00:16:59.750 --> 00:17:07.020
So inside of Flex Block, let's have a self-closing text control element, OK?

223
00:17:07.040 --> 00:17:12.320
And then inside the first flex item, this would be the block that you click on with the star to mark

224
00:17:12.320 --> 00:17:13.910
it as the correct answer.

225
00:17:14.540 --> 00:17:15.440
So let's drop down.

226
00:17:15.440 --> 00:17:20.150
Let's have a button element or component inside the button component.

227
00:17:20.150 --> 00:17:22.940
Let's have a self-closing icon tag.

228
00:17:23.810 --> 00:17:30.920
We just give it a property of icon, equal string of text and then you can give it a dash icon type

229
00:17:30.920 --> 00:17:31.370
of name.

230
00:17:31.370 --> 00:17:35.930
So I'll just say star empty for the outline of a star.

231
00:17:36.530 --> 00:17:40.130
OK, and then in the second flex item, let's have the delete button.

232
00:17:40.130 --> 00:17:44.810
So dropdown will save button it tab for now inside the button.

233
00:17:44.810 --> 00:17:47.090
Let's just have text that says delete.

234
00:17:47.690 --> 00:17:49.730
Let's give this a save and see what it looks like.

235
00:17:50.270 --> 00:17:51.500
So if we reload.

236
00:17:55.360 --> 00:18:01.840
Cool, so it's not perfect, but we didn't write a single line of success and we already have a basic

237
00:18:01.840 --> 00:18:08.200
three column layout that's going to bring this video to a close in the next video, we'll continue to

238
00:18:08.200 --> 00:18:12.530
fine tune the styling so we can get it to look more like this.

239
00:18:13.270 --> 00:18:16.120
Don't worry, we don't have too much styling work left to go.

240
00:18:16.240 --> 00:18:21.400
And once we finish the styling, we'll start to write JavaScript to actually bring this to life.

241
00:18:21.880 --> 00:18:25.000
Let's keep things rolling and I'll see you in the next video.
