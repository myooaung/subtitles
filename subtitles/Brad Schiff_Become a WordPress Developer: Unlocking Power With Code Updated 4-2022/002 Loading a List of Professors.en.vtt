WEBVTT
1
00:00:02.340 --> 00:00:03.310
Hello, everyone.

2
00:00:03.690 --> 00:00:10.130
In this lesson, we're going to continue building our featured Professor Block type to be more specific,

3
00:00:10.380 --> 00:00:17.340
we want to work with this select element that we've set up and trade out the hardcoded one, two, three

4
00:00:17.340 --> 00:00:22.110
values with an actual list of all of our professor posts.

5
00:00:22.590 --> 00:00:25.260
And we need to achieve this with JavaScript.

6
00:00:25.560 --> 00:00:31.120
Now, in this course, we've already learned how to load data via JavaScript, right?

7
00:00:31.170 --> 00:00:38.160
So we know how to perform an asynchronous request with JavaScript to a rest API Eurail.

8
00:00:38.310 --> 00:00:45.360
So our first instinct might be to just send a request to this API endpoint and we could do that.

9
00:00:45.360 --> 00:00:46.130
It would work.

10
00:00:46.140 --> 00:00:48.480
There's nothing wrong with that approach.

11
00:00:48.930 --> 00:00:56.340
But right now, I do want to show you a new tool or a new way of loading data that is perfectly suited

12
00:00:56.610 --> 00:00:58.550
for loading data here in the block.

13
00:00:58.560 --> 00:01:00.870
Ed, let's jump right into the action.

14
00:01:00.870 --> 00:01:02.430
So I want you to follow along with me.

15
00:01:02.430 --> 00:01:05.670
I want you to open up your Web browsers console.

16
00:01:06.090 --> 00:01:11.790
So open up your inspector or dev tools and then just click to the console tab and type this in with

17
00:01:11.790 --> 00:01:12.030
me.

18
00:01:12.420 --> 00:01:17.010
WP dot data, dot select.

19
00:01:17.130 --> 00:01:18.030
And that's a function.

20
00:01:18.030 --> 00:01:19.410
So parentheses to call it.

21
00:01:19.410 --> 00:01:23.280
We'll give it a string of text called core that will return something.

22
00:01:23.280 --> 00:01:24.000
What it returns.

23
00:01:24.000 --> 00:01:31.260
We want to look inside that so dot git entity records and that's a function.

24
00:01:31.530 --> 00:01:32.880
So parentheses to call it.

25
00:01:32.880 --> 00:01:34.800
We're going to give it three arguments.

26
00:01:34.800 --> 00:01:38.430
The first argument is quotes post type.

27
00:01:38.970 --> 00:01:42.090
The second argument is the actual post type.

28
00:01:42.090 --> 00:01:45.780
So that would be the professor post type.

29
00:01:46.230 --> 00:01:49.740
And then the third argument is an object of different options.

30
00:01:50.010 --> 00:01:52.890
Let's just give it an option of per page.

31
00:01:53.130 --> 00:01:56.610
And if we set it to oops, I mean, zoom out so it fits on a single line.

32
00:01:56.760 --> 00:02:02.460
If we set it to negative one, that will give us all posts in one trip.

33
00:02:02.760 --> 00:02:02.900
Right.

34
00:02:03.000 --> 00:02:05.630
It won't limit it to the first five or ten posts.

35
00:02:05.970 --> 00:02:10.620
Now when we press enter, at first it looks like that returns nothing.

36
00:02:10.620 --> 00:02:15.930
So we just see, no, this has to do with the asynchronous nature of JavaScript, right?

37
00:02:15.930 --> 00:02:21.060
So when you run that code immediately, one millisecond later, there's no new data.

38
00:02:21.510 --> 00:02:21.740
Right.

39
00:02:21.750 --> 00:02:24.360
JavaScript does have to perform a network request.

40
00:02:24.360 --> 00:02:30.780
But if we run that again, so you can just push the up arrow key on your keyboard and run it, well,

41
00:02:30.780 --> 00:02:32.760
it had time to actually do its job now.

42
00:02:32.760 --> 00:02:34.350
And you can see it returns an array.

43
00:02:34.710 --> 00:02:40.710
I only have three professor posts, but it gave me an array with all of the posts.

44
00:02:41.220 --> 00:02:48.300
So the point here is that when we're on the edit screen, WordPress with its own JavaScript API already

45
00:02:48.300 --> 00:02:57.150
has the tools that we need to load data without us needing to manually send off our own HTTP requests.

46
00:02:57.420 --> 00:03:02.040
We can just use these built in tools to fetch data on the fly.

47
00:03:02.430 --> 00:03:04.290
And not only that, it gets even better.

48
00:03:04.590 --> 00:03:10.170
So remember this situation where one millisecond after running it, it just returns null because it

49
00:03:10.170 --> 00:03:12.300
takes a while to actually go fetch the data?

50
00:03:12.660 --> 00:03:19.530
Well, the WordPress team has even created a react solution that makes it super easy to deal with this

51
00:03:19.530 --> 00:03:23.040
asynchronous nature from within our react component.

52
00:03:23.430 --> 00:03:26.610
The WordPress team as of late is truly spoiling us.

53
00:03:26.610 --> 00:03:29.160
They're giving us amazing tools to work with.

54
00:03:29.550 --> 00:03:35.490
So for the remainder of this lesson, I want to show you how we can write code like this from within

55
00:03:35.490 --> 00:03:37.080
our REACT component.

56
00:03:37.620 --> 00:03:43.080
It's 95 percent, this exact same code that we're seeing here, but it's a little bit different.

57
00:03:43.530 --> 00:03:50.760
So right now, let's jump into our text editor within the S.A.C. folder, jump into Index JS up at the

58
00:03:50.760 --> 00:03:51.090
top.

59
00:03:51.090 --> 00:03:52.770
We want to import something new.

60
00:03:52.770 --> 00:04:02.280
So maybe right below this S-E line, we can say import curly brackets from quotes at symbol WordPress

61
00:04:02.280 --> 00:04:03.870
slash data.

62
00:04:04.170 --> 00:04:06.690
Now in the curly brackets, what do we want to import?

63
00:04:07.050 --> 00:04:10.800
Something called use select.

64
00:04:11.160 --> 00:04:13.230
So the essence select is uppercase.

65
00:04:13.710 --> 00:04:19.800
And let me show you how we're going to use this down in our edit component before we actually return

66
00:04:19.800 --> 00:04:20.500
any JSM.

67
00:04:20.670 --> 00:04:26.790
So just at the very start of the body of our function, let's say CONSED and you can make up any variable

68
00:04:26.790 --> 00:04:27.720
name you want.

69
00:04:28.230 --> 00:04:36.150
I'll choose a name of all Prof's, right, all professors and I'm going to set that to equal use select

70
00:04:36.150 --> 00:04:36.930
which is a function.

71
00:04:36.930 --> 00:04:39.480
So we're calling it in these parentheses.

72
00:04:39.480 --> 00:04:42.120
We give it a function that it will run when appropriate.

73
00:04:42.510 --> 00:04:46.080
Let's give it an S6 Arrow function with one parameter.

74
00:04:46.410 --> 00:04:48.450
What we named the parameter doesn't matter.

75
00:04:48.450 --> 00:04:50.430
But I'm going to name select.

76
00:04:50.580 --> 00:04:53.070
We'll see why I'm naming it that in just a moment.

77
00:04:53.070 --> 00:04:56.070
But then arrow symbol, curly brackets.

78
00:04:56.070 --> 00:04:58.770
Let's drop down in the body of this function.

79
00:04:58.770 --> 00:05:01.650
We want to return a value and whatever we.

80
00:05:01.820 --> 00:05:06.500
Turn well, that's what the value for all profits is going to get set to.

81
00:05:06.890 --> 00:05:12.530
Now, remember that code we wrote in the browser's console earlier in this video to refresh your memory

82
00:05:12.830 --> 00:05:16.270
back in your console, you can just press the up on your keyboard.

83
00:05:16.640 --> 00:05:23.000
So this code will now we're just going to write something very similar inside of our use select function.

84
00:05:23.360 --> 00:05:26.560
So return and let's start with select.

85
00:05:26.930 --> 00:05:32.630
This is the tool that you select is passing into our function, so it needs to perfectly match whatever

86
00:05:32.630 --> 00:05:34.010
you named your parameter.

87
00:05:34.160 --> 00:05:39.380
But we're just going to say select parentheses to call it say quotes core.

88
00:05:39.680 --> 00:05:42.470
And now after this, to save you a bunch of typing.

89
00:05:42.950 --> 00:05:46.640
If you go back into your console, you can just select the rest of this.

90
00:05:47.210 --> 00:05:47.480
Right.

91
00:05:47.490 --> 00:05:53.810
So essentially, instead of saying WP DataDot select, we're just using the select tool that the WordPress

92
00:05:53.810 --> 00:05:58.370
function is giving to us, but then everything that comes after it will be identical.

93
00:05:58.370 --> 00:06:02.810
So I'm just going to select from the dot git entity records until the end of that.

94
00:06:02.840 --> 00:06:04.310
Copy that right here.

95
00:06:04.310 --> 00:06:05.270
Just paste it in.

96
00:06:05.910 --> 00:06:11.840
OK, and now to test that this is working or doing something right below this bit of code, but still

97
00:06:11.840 --> 00:06:13.700
above our return.

98
00:06:13.970 --> 00:06:21.560
So right about here, let's just console log all prof's, let's give that a save and back in the browser,

99
00:06:21.560 --> 00:06:29.540
if we refresh, if we check the console first we see null and that's because that's what this is going

100
00:06:29.540 --> 00:06:33.600
to equal one millisecond after it runs the very first time.

101
00:06:33.600 --> 00:06:33.800
Right.

102
00:06:33.860 --> 00:06:36.380
A network request takes a little bit of time.

103
00:06:36.380 --> 00:06:40.370
So it's going to run once and return a value of null.

104
00:06:40.820 --> 00:06:43.130
But then you select is smart enough.

105
00:06:43.130 --> 00:06:49.090
It knows that any time that data store changes, it knows that our function needs to run again.

106
00:06:49.580 --> 00:06:53.120
So the second time it runs, it's going to return the actual value.

107
00:06:53.120 --> 00:06:56.120
And that's what we're console logging the second time.

108
00:06:56.120 --> 00:06:57.830
And that's what you see here in the console.

109
00:06:58.460 --> 00:07:03.950
So putting this all together, let's see how to use this for our actual react component.

110
00:07:04.640 --> 00:07:05.400
Let me explain.

111
00:07:05.420 --> 00:07:08.750
So if I scroll down to our component, here it is.

112
00:07:09.560 --> 00:07:09.890
Right.

113
00:07:09.890 --> 00:07:12.170
The select dropdown with the list of Prof's.

114
00:07:12.380 --> 00:07:13.460
Here's what I want to do.

115
00:07:13.820 --> 00:07:21.230
I want this block to just be nothing but a piece of text that says loading dot, dot, dot for that

116
00:07:21.230 --> 00:07:26.420
brief moment while we're waiting on the network request to actually fetch the real professor data.

117
00:07:26.690 --> 00:07:33.380
But then as soon as we actually have that data, then I would want to display the real content here.

118
00:07:33.800 --> 00:07:38.720
So let me show you what I would do back in our code right before we return.

119
00:07:38.720 --> 00:07:41.060
Our actual real jazz acts.

120
00:07:41.330 --> 00:07:46.130
Right before that, I'm going to have an if statement and I'm going to say if.

121
00:07:47.270 --> 00:07:56.130
For the condition, if all Prof's equals undefined, well, then I just want to return a bit of acts

122
00:07:56.210 --> 00:08:03.290
that says loading, dot, dot, dot and in JavaScript are really just programming in general when you

123
00:08:03.290 --> 00:08:07.940
return something in a function that stops the further execution of the function.

124
00:08:07.970 --> 00:08:12.710
So if we return loading, dot, dot, dot, this will never be returned.

125
00:08:13.160 --> 00:08:18.310
In other words, the first time that our component is rendered, we're going to see dot, dot, dot.

126
00:08:18.770 --> 00:08:23.780
But then as soon as this is false, right, as soon as all Prof's actually equals the data we want it

127
00:08:23.780 --> 00:08:26.300
to equal, well, then this will be used.

128
00:08:26.750 --> 00:08:27.440
So check this out.

129
00:08:27.440 --> 00:08:31.280
If we save and refresh, you'll have to move very quickly.

130
00:08:31.280 --> 00:08:33.080
But you'll see that for a split second.

131
00:08:33.620 --> 00:08:35.780
I don't even know if I can scroll down there fast enough.

132
00:08:36.170 --> 00:08:39.740
If I zoom out super zoomed out like this and I refresh.

133
00:08:41.050 --> 00:08:46.360
Yep, I'll do it again, notice that for a split second, you see loading dot, dot, dot down here

134
00:08:46.360 --> 00:08:51.700
where our block is, but then as soon as that data is ready, our block renders cool.

135
00:08:51.700 --> 00:08:52.460
Let me zoom back in.

136
00:08:52.490 --> 00:08:59.390
So now it's as simple as just using all Prof's to populate our select dropdown.

137
00:08:59.890 --> 00:09:02.940
So let's do that right now down in our select element.

138
00:09:03.160 --> 00:09:09.670
Let's keep the very first option that just says select a professor and then before we delete the hardcoded

139
00:09:09.670 --> 00:09:15.960
one, two, three, be sure you select one of them into your clipboard that we can use as a template.

140
00:09:16.480 --> 00:09:20.680
So I'm just going to make sure I've copied this number one instance into my clipboard and then we can

141
00:09:20.680 --> 00:09:24.310
delete the one, two, three, OK, in their place.

142
00:09:24.310 --> 00:09:30.040
So below the selected professor option, let's have curly brackets to do something dynamic and then

143
00:09:30.040 --> 00:09:33.150
I'm just going to loop through the array of professors.

144
00:09:33.160 --> 00:09:39.730
So remember, in our console, the all prof's variable is just an array with three objects and each

145
00:09:39.730 --> 00:09:41.860
one represents a professor post.

146
00:09:42.340 --> 00:09:50.110
So let's do this in our curly brackets here will say all prof's in JavaScript, every array has access

147
00:09:50.110 --> 00:09:51.670
to the map method.

148
00:09:51.880 --> 00:09:53.440
We give map a function.

149
00:09:53.980 --> 00:10:00.790
Let's have a S6 Arrow function where the parameter is proff for each individual professor that's currently

150
00:10:00.790 --> 00:10:06.580
been looped to so arrow symbol curly brackets inside there we can dropdown and then we're just going

151
00:10:06.580 --> 00:10:12.460
to return a bit of X just so I can drop down to multiple lines if I want to.

152
00:10:12.460 --> 00:10:17.610
I'll have parentheses here and then in the parentheses just paste in your clipboard.

153
00:10:18.430 --> 00:10:21.490
So now we just need to hollow this out or make it dynamic.

154
00:10:22.330 --> 00:10:29.020
So for the value it would be value equals curly brackets instead of quotes, and we would just work

155
00:10:29.020 --> 00:10:31.450
with the parameter for the current item that's been looped to.

156
00:10:31.450 --> 00:10:32.590
So Prof.

157
00:10:32.740 --> 00:10:38.050
Dot and then if you can't remember, you can always just look at the console and that shows you the

158
00:10:38.050 --> 00:10:39.670
actual data that we're getting.

159
00:10:40.120 --> 00:10:47.080
So each post is an object and you can see they have a property named IDE with that numeric post ID.

160
00:10:47.140 --> 00:10:50.260
So we would just say Proff dot ide.

161
00:10:50.710 --> 00:10:55.140
And then for the logic that decides whether the current item should be highlighted already.

162
00:10:55.690 --> 00:11:00.130
Well, we can keep this, but just the value we're checking against instead of hardcoded one that would

163
00:11:00.130 --> 00:11:06.850
again just be Proff I.D. And then if you want to, you can drop down to a new line so that the opening

164
00:11:06.850 --> 00:11:09.370
and closing HTML tags are like this.

165
00:11:09.710 --> 00:11:16.060
OK, and then for the actual readable text that you would click on, let's get rid of that curly brackets.

166
00:11:16.480 --> 00:11:20.230
It would just be Proff dot and then you can look at the console.

167
00:11:20.260 --> 00:11:25.990
So each object, if you expand it, you can see they have a property called title, which in itself

168
00:11:25.990 --> 00:11:26.830
is an object.

169
00:11:27.100 --> 00:11:29.860
And then inside of that there's a property called Rendered.

170
00:11:29.860 --> 00:11:31.210
So that's what I want here.

171
00:11:31.600 --> 00:11:33.370
Write the actual text value.

172
00:11:34.750 --> 00:11:38.590
So it would just be proform title dot rendered.

173
00:11:39.430 --> 00:11:41.520
Let's save this and test it out.

174
00:11:41.530 --> 00:11:46.210
So if I go back and refresh, let me scroll down and find our block type.

175
00:11:46.540 --> 00:11:48.430
Select a professor if I click on it.

176
00:11:48.850 --> 00:11:49.630
Perfect.

177
00:11:49.870 --> 00:11:58.210
So if I choose the second option, Dr barks a lot and then actually click update to save the post and

178
00:11:58.210 --> 00:11:58.930
then refresh.

179
00:11:58.930 --> 00:12:02.710
We're just trying to make sure that that value is actually stored and remembered.

180
00:12:02.710 --> 00:12:03.820
So if I scroll back down.

181
00:12:04.210 --> 00:12:07.630
Perfect, you can see it remembered my choice of doctor barks a lot.

182
00:12:08.200 --> 00:12:12.700
And then to really sort of visualize the data of what's being saved, you could always go into your

183
00:12:12.700 --> 00:12:19.990
database and we can go into the posts table, click select data, be sure to choose the very last or

184
00:12:19.990 --> 00:12:20.920
final page.

185
00:12:20.920 --> 00:12:22.930
Click on the very last entry.

186
00:12:23.560 --> 00:12:26.530
If I look in the post, underscore content field.

187
00:12:26.530 --> 00:12:28.540
If you scroll down, perfect.

188
00:12:28.540 --> 00:12:35.080
So our block is being represented by this comment that says the exact type of block and then the attribute

189
00:12:35.080 --> 00:12:38.350
is simply ID with that post ID.

190
00:12:39.100 --> 00:12:45.700
Now that we're successfully storing that post ID, we have everything we need to truly move forward.

191
00:12:46.210 --> 00:12:50.800
So in our very next lesson, let me show you a sneak preview of what we're going to build.

192
00:12:50.980 --> 00:12:57.220
We can start working on the actual front end code that displays the content for that professor.

193
00:12:57.820 --> 00:13:03.340
Really, now that we know the post ID, we're just going to query for that post and display the appropriate

194
00:13:03.340 --> 00:13:03.970
content.

195
00:13:04.360 --> 00:13:06.400
I think it should be fun to connect the dots.

196
00:13:06.670 --> 00:13:09.160
Let's keep things rolling and I'll see you then.
