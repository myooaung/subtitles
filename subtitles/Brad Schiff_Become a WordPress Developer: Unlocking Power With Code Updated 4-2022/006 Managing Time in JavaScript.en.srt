1
00:00:00,750 --> 00:00:01,800
Hello, everyone.

2
00:00:02,250 --> 00:00:09,300
In this lesson, we will continue to work on our live search results, JavaScript, to be more specific,

3
00:00:09,300 --> 00:00:16,380
when someone opens up the overlay and actually begins typing into this input field, we want to respond

4
00:00:16,380 --> 00:00:18,230
to that event of them typing.

5
00:00:18,630 --> 00:00:24,510
But as we discussed in our previous lesson, we don't want to send a search request off to the WordPress

6
00:00:24,510 --> 00:00:27,990
server the millisecond someone types in the letter here.

7
00:00:28,290 --> 00:00:28,530
Right.

8
00:00:28,550 --> 00:00:34,560
So, for example, if someone was going to search for math, well, when they very first press the key,

9
00:00:34,800 --> 00:00:36,910
we want our JavaScript to wait a second.

10
00:00:36,930 --> 00:00:37,220
Right.

11
00:00:37,230 --> 00:00:41,090
We don't actually want to search the WordPress database for M.

12
00:00:41,490 --> 00:00:47,130
So what we're going to do is every time a user types a letter in here, we can begin a countdown or

13
00:00:47,130 --> 00:00:51,920
a timer maybe to 800 milliseconds or three quarters of a second.

14
00:00:52,200 --> 00:00:56,580
And then as soon as they type in another letter, we can reset that clock.

15
00:00:56,580 --> 00:00:58,650
So the countdown starts over again.

16
00:00:59,010 --> 00:01:04,200
And then once they finally finished typing, whatever it is they're typing and they pause for a split

17
00:01:04,200 --> 00:01:11,040
second, then at that moment we can use our JavaScript to send off this search request to the WordPress

18
00:01:11,040 --> 00:01:14,340
server and then we can display the results right here.

19
00:01:14,370 --> 00:01:14,640
Right.

20
00:01:14,660 --> 00:01:19,620
So any programs or professors, campuses or events that have to do with math.

21
00:01:20,040 --> 00:01:26,880
But first things first, before we worry about managing time in JavaScript, let's first begin by just

22
00:01:26,880 --> 00:01:28,920
responding to this event at all.

23
00:01:29,220 --> 00:01:29,550
Right.

24
00:01:29,550 --> 00:01:34,660
The event of a key being pressed on a keyboard while this text field is focused.

25
00:01:35,040 --> 00:01:41,190
So right now, let's get started by jumping into our text editor and in our theme folder, let's go

26
00:01:41,190 --> 00:01:46,860
into the JavaScript folder and then modules and let's open up search jass.

27
00:01:47,820 --> 00:01:53,730
And if we want to be on the lookout for an event, we can just write a new bit of code within our events

28
00:01:53,730 --> 00:01:59,320
section, write each one of these lines represents a different event that we're on the lookout for.

29
00:01:59,610 --> 00:02:05,130
So why don't we just add a new line and we can look to the line right above it for inspiration?

30
00:02:05,550 --> 00:02:05,880
Right.

31
00:02:05,880 --> 00:02:10,380
Because the event of pressing down a key on your keyboard is still the event that we are looking for

32
00:02:10,380 --> 00:02:11,340
this time around.

33
00:02:11,970 --> 00:02:18,750
But the big difference here is the element that we want to attach this event listener to in this line

34
00:02:18,750 --> 00:02:19,110
of code.

35
00:02:19,120 --> 00:02:23,450
We chose the page as a whole or the document object.

36
00:02:23,850 --> 00:02:29,730
So no matter where you are on the page or what you've clicked on or given focus to, the key down event

37
00:02:29,730 --> 00:02:31,020
will still be registered.

38
00:02:31,320 --> 00:02:36,380
Well, in this new line of code that we're going to write, we don't want to target the page as a whole.

39
00:02:36,750 --> 00:02:42,360
Instead, we want to target just this one textfield element that users can type into.

40
00:02:42,510 --> 00:02:49,170
We want to add the key down event listener to this specific single element so we can begin this line

41
00:02:49,170 --> 00:02:52,970
of code by using query to select that element.

42
00:02:53,250 --> 00:02:59,070
I can't remember the class or idea of that element off the top of my head, but if we jump into our

43
00:02:59,070 --> 00:03:01,260
footer file.

44
00:03:02,420 --> 00:03:04,230
And scroll down to the very bottom.

45
00:03:04,430 --> 00:03:08,780
Remember, this is where we wrote that little bit of search overlay HTML.

46
00:03:09,110 --> 00:03:16,190
So here's the input element, the TextField, and you'll see that we gave it an idea of search dash

47
00:03:16,190 --> 00:03:16,860
term.

48
00:03:17,240 --> 00:03:24,290
So back in our JavaScript, we can select that element by saying hash tag to look for an ID and then

49
00:03:24,290 --> 00:03:25,120
just type it out.

50
00:03:25,640 --> 00:03:27,290
Search dash term.

51
00:03:27,890 --> 00:03:32,480
OK, so now that we've got that one element, we can just use the query on method.

52
00:03:33,230 --> 00:03:34,880
So this takes two arguments.

53
00:03:35,070 --> 00:03:37,030
The first is the name of the event.

54
00:03:37,040 --> 00:03:40,090
So instead of click, we're going to use key down again.

55
00:03:40,760 --> 00:03:45,040
And then the second argument is a function that you want to run in response.

56
00:03:45,380 --> 00:03:47,740
So the name of this function does not matter.

57
00:03:47,750 --> 00:03:49,280
We get to make a name up.

58
00:03:49,500 --> 00:03:52,220
We're actually just going to call one of our methods.

59
00:03:52,490 --> 00:03:57,980
So before we make up a name here down in the method section, why don't we create a brand new method

60
00:03:57,980 --> 00:03:59,210
where we make up a name?

61
00:03:59,690 --> 00:04:04,400
We could call it whatever we want, but why don't we call it typing logic?

62
00:04:05,330 --> 00:04:05,600
Right.

63
00:04:05,600 --> 00:04:12,110
Because this method is going to contain all of our logic for weighting 800 milliseconds before continuing

64
00:04:12,110 --> 00:04:12,470
on.

65
00:04:12,810 --> 00:04:15,590
OK, so we will build out this method a bit later on.

66
00:04:15,590 --> 00:04:21,980
But back up here on this new event line for the second argument now, we can just point towards that

67
00:04:21,980 --> 00:04:22,660
new method.

68
00:04:23,270 --> 00:04:30,040
So this to look inside our object and then dot and then the name of that method of typing logic.

69
00:04:30,410 --> 00:04:34,880
Now, before we save this and test it out in the browser, let's do a couple of things.

70
00:04:35,210 --> 00:04:41,510
So first, instead of selecting the search field element right here with G query, why don't we instead

71
00:04:41,510 --> 00:04:47,480
select the element up in our constructor and create a property just like we did for the open button

72
00:04:47,480 --> 00:04:50,290
and the close button and the overlay div itself?

73
00:04:50,690 --> 00:04:50,960
Right.

74
00:04:50,960 --> 00:04:54,040
Let's do that same thing for the search field element.

75
00:04:54,290 --> 00:04:59,690
My reasoning for wanting to do that is I know that we are going to need to access this element again

76
00:04:59,690 --> 00:05:00,290
and again.

77
00:05:00,590 --> 00:05:07,760
And remember that accessing the DOM, the Web browsers document object model is very slow compared to

78
00:05:07,760 --> 00:05:11,770
the lightning fast speed of JavaScript reading its own properties.

79
00:05:12,020 --> 00:05:17,090
So what I'm proposing is up here in the constructor, you could add a new line right below this at the

80
00:05:17,090 --> 00:05:20,990
very bottom or stay organized and keep all of the elements near each other.

81
00:05:21,260 --> 00:05:25,000
You could add a new line here and let's create a new property.

82
00:05:25,010 --> 00:05:33,230
So this dot and we could name it whatever we want, why don't we call it search field and then just

83
00:05:33,230 --> 00:05:37,370
set it to equal this query selector that we already wrote.

84
00:05:37,580 --> 00:05:43,790
So I'm just going to copy that into my clipboard and then in its place have X as a temporary placeholder

85
00:05:44,180 --> 00:05:51,380
and then up in the constructor, set this new property to equal based in our clipboard at a semicolon

86
00:05:51,380 --> 00:05:52,050
at the end.

87
00:05:52,490 --> 00:05:52,780
Cool.

88
00:05:52,800 --> 00:05:59,600
So now down here, instead of the temporary placeholder X, we can just reference this property so we

89
00:05:59,600 --> 00:06:07,350
can just say this dot search field and then we can call the on method on that property.

90
00:06:07,790 --> 00:06:13,130
So this way we have this reuseable variable that points towards that element instead of us needing to

91
00:06:13,130 --> 00:06:16,280
touch the dom again and again and again, which can be slow.

92
00:06:16,610 --> 00:06:16,990
Cool.

93
00:06:17,000 --> 00:06:22,220
Now, before we save this, one last thing I want to do is inside our typing logic method.

94
00:06:22,550 --> 00:06:29,780
Why don't we add just a quick test so we can alert maybe just a pop up message that says hello from

95
00:06:29,780 --> 00:06:31,640
typing logic.

96
00:06:33,170 --> 00:06:35,910
Right, just so we can test things out and make sure that it's working.

97
00:06:36,320 --> 00:06:42,020
So at this point, let's go ahead and save this and make sure that you have golpe watch running in the

98
00:06:42,020 --> 00:06:42,950
command line.

99
00:06:43,280 --> 00:06:43,450
Right.

100
00:06:43,550 --> 00:06:48,500
So your JavaScript will get rebundled up and then let's go over to the browser and test this.

101
00:06:48,510 --> 00:06:49,970
So open up the overlay.

102
00:06:49,970 --> 00:06:53,120
And as soon as I start typing in a letter, cool.

103
00:06:53,120 --> 00:06:55,040
We see that annoying alert message.

104
00:06:55,040 --> 00:06:56,690
Hello from typing logic.

105
00:06:57,950 --> 00:07:00,360
So that means our code is working properly.

106
00:07:00,740 --> 00:07:05,240
Now let's learn how to manage and work with time in JavaScript.

107
00:07:05,540 --> 00:07:11,720
Right, because we don't actually want to do something the millisecond a key is pressed down on that

108
00:07:11,720 --> 00:07:12,620
text field.

109
00:07:12,950 --> 00:07:17,510
So within our typing logic method, let's delete this alert test line.

110
00:07:18,560 --> 00:07:23,960
And instead I want to show you how we can wait a little while in JavaScript before doing something.

111
00:07:24,320 --> 00:07:31,040
So just as an extreme example, let's imagine we wanted to wait a full two seconds after the event happens

112
00:07:31,040 --> 00:07:32,360
and this method runs.

113
00:07:32,810 --> 00:07:39,020
So within the method we can use something in JavaScript called Set Timeout.

114
00:07:40,220 --> 00:07:42,530
Set timeout takes two arguments.

115
00:07:42,800 --> 00:07:45,950
The first argument is a function that you want to run.

116
00:07:46,310 --> 00:07:49,370
I'm just going to say X as a temporary placeholder.

117
00:07:49,670 --> 00:07:56,010
And then the second argument is how many milliseconds you want to wait before running that function.

118
00:07:56,330 --> 00:08:01,550
So if we wanted to wait two seconds, that's 2000 in terms of milliseconds.

119
00:08:02,140 --> 00:08:07,330
Now, back to the function that we want to run after this amount of time has passed, you're free to

120
00:08:07,330 --> 00:08:12,850
type out the name of a function here, write a function that has been defined somewhere else, like

121
00:08:12,850 --> 00:08:13,930
one of our methods.

122
00:08:14,170 --> 00:08:18,360
Or you can always just create an anonymous function right in place here.

123
00:08:18,730 --> 00:08:24,100
So to create an anonymous function, we can delete that temporary placeholder and you just type out

124
00:08:24,100 --> 00:08:28,420
the word function and then parentheses and then curly brackets.

125
00:08:28,810 --> 00:08:29,080
Right.

126
00:08:29,090 --> 00:08:33,460
So instead of including the name of a function that points somewhere else, you could just create a

127
00:08:33,460 --> 00:08:34,720
function right in place.

128
00:08:34,720 --> 00:08:40,840
And then within the curly brackets, let's log out a message to the console as a test so we could say

129
00:08:40,840 --> 00:08:42,580
console dialog.

130
00:08:44,180 --> 00:08:49,730
And for the message, we could say this is a time out test.

131
00:08:50,480 --> 00:08:52,510
OK, let's go ahead and save that.

132
00:08:52,520 --> 00:08:58,910
And now back in the browser, I'm going to open up the JavaScript console so I can see if that test

133
00:08:58,910 --> 00:09:00,110
message is coming through.

134
00:09:00,110 --> 00:09:05,930
So click on the console and I'm going to resize my main browser window so I can see the console window

135
00:09:05,930 --> 00:09:06,820
at the same time.

136
00:09:07,190 --> 00:09:07,530
Cool.

137
00:09:07,550 --> 00:09:09,890
OK, so let me open up the search overlay.

138
00:09:10,370 --> 00:09:15,770
Remember, we still have those open and closed text messages from our previous lesson whenever you open

139
00:09:15,770 --> 00:09:16,930
or closed the overlay.

140
00:09:17,510 --> 00:09:23,330
But as soon as I click onto the text field and press a letter on my keyboard, you'll notice that nothing

141
00:09:23,330 --> 00:09:24,550
happens immediately.

142
00:09:25,010 --> 00:09:30,950
Instead, the browser waits a full two seconds and then it shows us this text message so cool.

143
00:09:30,950 --> 00:09:34,610
That means our set time out is working as intended.

144
00:09:34,940 --> 00:09:40,570
However, let's not forget the entire reason we wanted to add a pause or a timer in the first place.

145
00:09:40,910 --> 00:09:47,320
Remember, we didn't want to flood the WordPress server with random or short, meaningless search strings.

146
00:09:47,360 --> 00:09:52,460
So pretend that where we are logging this text message out to the console, pretend that this is where

147
00:09:52,460 --> 00:09:56,120
we are actually going to send a request to the WordPress server.

148
00:09:56,510 --> 00:10:00,170
Now, what I mean by this is if I just press one letter, right.

149
00:10:00,180 --> 00:10:02,030
So if I type in the letter A now.

150
00:10:04,480 --> 00:10:10,090
We see the number two here to signify that that has been ran twice and if I type in another letter.

151
00:10:12,560 --> 00:10:18,110
We see this goes up to three, right, because this is brand three times, however, watch what happens,

152
00:10:18,110 --> 00:10:23,660
even if I type very rapidly, like you would normally do so if I come to the website and search for

153
00:10:23,660 --> 00:10:24,500
Buyology.

154
00:10:27,680 --> 00:10:32,930
Whoa, we see that it climbs all the way to 12, and this is because at the moment, the way our code

155
00:10:32,930 --> 00:10:36,740
is set up, every time we press a key, it's going to fire this method.

156
00:10:37,040 --> 00:10:41,240
And each time that's going to create a new unique time out.

157
00:10:41,570 --> 00:10:41,760
Right.

158
00:10:41,810 --> 00:10:45,370
Each one of those timers with each key press is its own entity.

159
00:10:45,710 --> 00:10:47,960
So if I go back and refresh the page.

160
00:10:49,330 --> 00:10:54,810
And open up the search, if I type in biology, that will take me seven keystrokes, right?

161
00:10:58,240 --> 00:11:01,820
And there we see seven, and this is not what we truly want.

162
00:11:02,200 --> 00:11:08,290
We wouldn't want to send seven different requests to the WordPress server or in other words, we don't

163
00:11:08,290 --> 00:11:14,650
want to create seven different timers or seven different time outs that are all independent of each

164
00:11:14,650 --> 00:11:14,980
other.

165
00:11:15,190 --> 00:11:22,480
Instead, why don't we work with just one single time out and then we can clear or reset that timer

166
00:11:22,480 --> 00:11:24,310
each time this method runs.

167
00:11:24,640 --> 00:11:25,900
So let me show you what I mean.

168
00:11:26,170 --> 00:11:32,950
Instead of just having this set time out floating in outer space, what we can do up in our constructor

169
00:11:33,250 --> 00:11:34,900
is create a new property.

170
00:11:35,290 --> 00:11:39,330
So we just say this dot and then we can make up whatever name we want.

171
00:11:39,610 --> 00:11:45,970
Why don't we go with typing timer and we don't even need to set it to equal a value.

172
00:11:45,970 --> 00:11:48,760
We can literally just declare this as a property.

173
00:11:49,060 --> 00:11:55,900
And now down in our typing logic method, instead of creating an unnamed set time out that's just sort

174
00:11:55,900 --> 00:11:57,500
of floating in outer space.

175
00:11:57,850 --> 00:12:05,650
Why don't we say this dot typing timer equals a set time out this way.

176
00:12:05,650 --> 00:12:10,030
We are giving this time outer timer a name that we can access.

177
00:12:10,210 --> 00:12:10,570
Right.

178
00:12:10,570 --> 00:12:13,270
We are assigning it to this property or variable.

179
00:12:13,480 --> 00:12:15,670
Now check this out right above this line.

180
00:12:15,670 --> 00:12:23,140
Still within the typing logic method, we can use another tool in JavaScript named Clear Time Out.

181
00:12:24,400 --> 00:12:27,450
And this is how you can reset a time out or timer.

182
00:12:27,670 --> 00:12:34,030
So now within the parentheses for clear time out, we can just use the name of our property, this dot

183
00:12:34,180 --> 00:12:35,420
typing timer.

184
00:12:36,160 --> 00:12:41,290
So this way, every time we press a key while we are in that search field, we know that this method

185
00:12:41,290 --> 00:12:45,770
is going to run and the first thing we do is clear or reset the timer.

186
00:12:46,030 --> 00:12:51,610
So, for example, maybe it had been one point five seconds since the last time we had pressed down

187
00:12:51,610 --> 00:12:51,990
a key.

188
00:12:52,270 --> 00:12:57,380
So that would mean that there was only 500 milliseconds left on this countdown of 2000.

189
00:12:57,730 --> 00:13:03,250
So this way we are resetting that or I should say we are basically getting rid of that time.

190
00:13:03,250 --> 00:13:09,190
Our timer, the timer that was going to expire or execute in five hundred milliseconds, we are saying,

191
00:13:09,190 --> 00:13:11,040
nope, forget about it, OK?

192
00:13:11,050 --> 00:13:16,570
And then right after that, we are just re-establishing a timeout that will execute this code in two

193
00:13:16,570 --> 00:13:18,080
thousand milliseconds from now.

194
00:13:18,400 --> 00:13:18,630
Cool.

195
00:13:18,660 --> 00:13:23,620
Now, before we save this and test it out in the browser, we do need to talk a little bit about the

196
00:13:23,620 --> 00:13:24,340
keyword.

197
00:13:24,370 --> 00:13:26,350
This, right.

198
00:13:26,350 --> 00:13:32,680
Because the this keyword is what's allowing us to reference this variable that lives within our constructor

199
00:13:32,860 --> 00:13:36,190
or I should say this property that lives within our constructor.

200
00:13:36,670 --> 00:13:42,910
So down within our typing logic method in order to access the properties and methods of this object,

201
00:13:43,240 --> 00:13:47,080
we are counting on the this keyword pointing towards our object.

202
00:13:47,320 --> 00:13:54,070
However, remember, this function is being called by this event handler and by default, the on method

203
00:13:54,190 --> 00:14:00,220
is going to set the value of this keyword to equal whatever element triggered the event.

204
00:14:00,520 --> 00:14:06,460
So in this case, at this very moment within this method, the this keyword is pointing towards the

205
00:14:06,460 --> 00:14:09,950
main text input field instead of our object.

206
00:14:10,150 --> 00:14:15,930
Now, to fix this, that's why we've been using DOT behind this on all of our function calls.

207
00:14:16,360 --> 00:14:22,030
So for this search field key down event, when we call this method, let's just be sure to add on DOT

208
00:14:22,030 --> 00:14:24,660
behind this cool.

209
00:14:24,670 --> 00:14:30,360
Now, at this point, let's save this and take our clear timeout reset functionality for a spin.

210
00:14:30,820 --> 00:14:36,250
What we are hoping to see is that this code will not be executed for every single key press.

211
00:14:36,550 --> 00:14:43,210
Instead, only when someone has truly waited 2000 milliseconds in between key presses would we hope

212
00:14:43,210 --> 00:14:44,280
to see this code.

213
00:14:44,950 --> 00:14:51,250
So back in the browser, let's open up the search overlay and if I start typing in biology at just a

214
00:14:51,250 --> 00:14:52,570
regular typing speed.

215
00:14:59,360 --> 00:15:05,990
Perfect, our code waited until there was a two second gap after a keystroke, and then our code ran

216
00:15:06,020 --> 00:15:08,870
only once and that's exactly what we want.

217
00:15:09,020 --> 00:15:12,680
And that's actually going to bring this lesson to a close.

218
00:15:12,980 --> 00:15:19,310
In our next lesson, we will continue working towards being able to pull in real data from the WordPress

219
00:15:19,310 --> 00:15:20,090
database.

220
00:15:20,540 --> 00:15:25,580
So instead of this text message, we will send a request to WordPress and then we will even display

221
00:15:25,580 --> 00:15:27,930
the results right here for the visitor.

222
00:15:28,250 --> 00:15:32,120
Let's keep things rolling and I will see you in the next lesson.
