1
00:00:01,950 --> 00:00:03,060
Hello, everyone.

2
00:00:03,450 --> 00:00:10,330
In this lesson, we will continue to work on the edit feature for our Mind Notes user interface.

3
00:00:10,830 --> 00:00:13,130
Let's dive right into the action.

4
00:00:13,410 --> 00:00:15,690
So here I am on the my notes page.

5
00:00:15,690 --> 00:00:22,560
And in our previous lesson, we set things up so that when you first come to the page, you cannot click

6
00:00:22,560 --> 00:00:26,520
or edit either of the fields, the title or the body.

7
00:00:26,820 --> 00:00:32,180
But then as soon as you click the edit button, well, now you can make changes to the fields.

8
00:00:32,910 --> 00:00:36,570
A clicking edit also made this blue save button appear.

9
00:00:36,900 --> 00:00:42,780
Now, a bit later on in the lesson, we will set things up so that when you click save, we send off

10
00:00:42,780 --> 00:00:46,230
a post request to arrest API, you RL.

11
00:00:46,500 --> 00:00:52,290
But before we get to that, let's make one last improvement to the user interface, because I don't

12
00:00:52,290 --> 00:00:56,090
want users to feel like their only option is to click save.

13
00:00:56,310 --> 00:01:02,520
So I think it would be nice if once you click the edit button, then it turns into a cancel button and

14
00:01:02,520 --> 00:01:07,590
if you click the cancel button, then that would remove the animated border and also make it so these

15
00:01:07,590 --> 00:01:09,920
fields are read only once again.

16
00:01:10,470 --> 00:01:14,880
So let's get started and begin writing JavaScript to make all of that happen.

17
00:01:15,300 --> 00:01:24,060
So over in our text editor within our theme folder, lets look within JS modules and jump into my notes.

18
00:01:24,060 --> 00:01:27,480
J.S. and within our edit note method.

19
00:01:27,630 --> 00:01:33,140
Lets set things up so that once you click on the edit button it turns into a cancel button.

20
00:01:33,450 --> 00:01:39,930
So back in our code, maybe right below this line where we create the this note variable, let's add

21
00:01:39,930 --> 00:01:47,460
a new line and let's say this note and then look inside the list item by using the query method named

22
00:01:47,460 --> 00:01:54,120
Find and we can find the edit button by targeting a class named edit note.

23
00:01:54,450 --> 00:01:59,550
OK, and then once we've selected that element, let's modify its HTML.

24
00:01:59,940 --> 00:02:02,580
So within these parentheses, add a pair of quotes.

25
00:02:02,910 --> 00:02:06,030
I'm going to use single quotes instead of double quotes.

26
00:02:06,030 --> 00:02:11,160
So that way I can use double quotes within this string of text that we're going to include here.

27
00:02:11,520 --> 00:02:18,060
And instead of typing out a bunch of HTML by hand, why don't we just copy and paste directly from our

28
00:02:18,810 --> 00:02:19,350
template?

29
00:02:19,680 --> 00:02:25,620
What I mean by that is let's jump in to page, dash my notes, dot HP.

30
00:02:26,850 --> 00:02:34,410
And if we scroll down to the list item for each note, here's the span that has a class of edit note.

31
00:02:34,860 --> 00:02:41,100
And why don't we just copy and paste the contents of this element so we don't need the opening or closing

32
00:02:41,100 --> 00:02:44,970
span tags, but everything in between in the middle.

33
00:02:45,420 --> 00:02:52,230
So basically the icon html in the word edit, let's copy that into our clipboard and then back in our

34
00:02:52,230 --> 00:02:56,370
JavaScript we want to modify the HTML for that element.

35
00:02:56,370 --> 00:02:59,180
So within these quotes, just paste in your clipboard.

36
00:02:59,970 --> 00:03:08,460
Only this time let's change the word edit to say cancel and let's change the icon from f a dash pencil

37
00:03:08,460 --> 00:03:11,670
to F a dash times.

38
00:03:12,030 --> 00:03:14,130
This will give us an X icon.

39
00:03:14,460 --> 00:03:16,740
OK, now let's go ahead and save that.

40
00:03:17,100 --> 00:03:21,090
OK, when you first load the page, you cannot make changes to the fields.

41
00:03:21,300 --> 00:03:24,000
But then as soon as you click edit cool.

42
00:03:24,000 --> 00:03:25,620
The fields become editable.

43
00:03:27,510 --> 00:03:30,720
But also we see that the edit button turned into a cancel button.

44
00:03:31,140 --> 00:03:31,860
Perfect.

45
00:03:32,130 --> 00:03:38,040
Now next, let's set things up so that if you click the button again, it should remove the animated

46
00:03:38,040 --> 00:03:45,150
border, make these text fields read only once again and switch the button from cancel back to edit

47
00:03:45,150 --> 00:03:45,810
once again.

48
00:03:46,170 --> 00:03:51,510
Now there are a lot of different ways you could code things to set that up, but let me show you how

49
00:03:51,510 --> 00:03:52,410
I would handle it.

50
00:03:52,770 --> 00:03:59,550
So back in our JavaScript, right below the edit note method, I would just create a brand new separate

51
00:03:59,550 --> 00:04:07,530
method named Make Note, edit tobel parentheses, curly brackets.

52
00:04:08,070 --> 00:04:17,370
And then right below that I would create another separate method named Make Note, read only parentheses,

53
00:04:17,370 --> 00:04:18,480
curly brackets.

54
00:04:18,900 --> 00:04:24,720
And then I would just move these three lines, these lines that are responsible for making the note

55
00:04:24,720 --> 00:04:25,530
editable.

56
00:04:25,950 --> 00:04:32,430
I would just cut those three lines and paste them into this brand new method and then down within the

57
00:04:32,430 --> 00:04:35,970
make note read only method, we can just paste it in again.

58
00:04:36,240 --> 00:04:39,990
Only now let's adjust it to make it the equal but opposite.

59
00:04:40,470 --> 00:04:44,070
So let's just go through these lines one by one from the first line.

60
00:04:44,400 --> 00:04:48,210
Let's edit HTML of the edit button and put it back.

61
00:04:48,210 --> 00:04:55,560
So instead of saying cancel instead of cancel, it should say edit once again and for the icon instead

62
00:04:55,560 --> 00:04:59,250
of f a dash times, let's say F a dash pencil.

63
00:04:59,970 --> 00:05:01,440
OK then let's fix the.

64
00:05:01,520 --> 00:05:04,770
Line to make it the opposite, to make it read only once again.

65
00:05:05,120 --> 00:05:10,850
So instead of removing the read only attribute, we would want to add a read only attribute.

66
00:05:11,060 --> 00:05:18,830
So to do that, instead of remove 8R, let's just say 8R as the method and then within the parentheses,

67
00:05:18,830 --> 00:05:22,050
instead of only one argument, we would want two arguments.

68
00:05:22,490 --> 00:05:28,820
So the first argument is the name of the attribute and then the second argument is the value that you

69
00:05:28,820 --> 00:05:29,940
want to assign to it.

70
00:05:30,830 --> 00:05:35,520
So basically we're setting a read only attribute to equal a value of read-only.

71
00:05:36,110 --> 00:05:38,150
It's weird, but trust me, it works.

72
00:05:38,620 --> 00:05:46,730
OK, and then instead of adding a class of note active field which adds the animated border, the opposite

73
00:05:46,730 --> 00:05:50,310
of that would be to remove that class.

74
00:05:51,050 --> 00:05:53,960
OK, and then finally, let's not forget about this third line.

75
00:05:54,300 --> 00:05:59,270
So this is the line of code that adds a class to the blue save button that makes it visible.

76
00:06:00,080 --> 00:06:04,490
So the opposite of this would just be to remove that class.

77
00:06:05,090 --> 00:06:09,320
OK, so now we've got these two equal but opposite methods.

78
00:06:09,650 --> 00:06:15,980
And now within our edit note method that fires every time you click on an edit button, we just need

79
00:06:15,980 --> 00:06:18,220
to alternate which one of these we call.

80
00:06:18,650 --> 00:06:20,630
So the first time edit note runs.

81
00:06:20,630 --> 00:06:27,080
Maybe we want to run, make the note editable and then the second time this runs we should run make

82
00:06:27,080 --> 00:06:27,830
read-only.

83
00:06:28,130 --> 00:06:32,720
So that way you can keep alternating between edit and cancel, edit and cancel.

84
00:06:33,500 --> 00:06:35,930
So back with another edit note method.

85
00:06:36,290 --> 00:06:38,530
I'm just going to write an if statement.

86
00:06:38,930 --> 00:06:43,640
So if parentheses curly brackets and for the condition check.

87
00:06:43,640 --> 00:06:56,090
Let's say if this note has a data attribute named State and if it equals editable, then right here

88
00:06:56,090 --> 00:06:57,980
we will make things read-only.

89
00:07:00,810 --> 00:07:08,460
Else otherwise, so right after this curly bracket will say, ls curly brackets, then we will make

90
00:07:08,460 --> 00:07:09,510
things editable.

91
00:07:12,350 --> 00:07:17,690
Now, there's nothing magical about the word state or editable, I made up both of those terms.

92
00:07:18,080 --> 00:07:25,040
The key point here is that I'm checking for a data attribute within the parent list item element and

93
00:07:25,040 --> 00:07:27,050
I'm checking for a specific value.

94
00:07:27,390 --> 00:07:29,510
OK, so now let's replace this comment.

95
00:07:29,810 --> 00:07:34,840
In order to make things read only, we can simply call our read-only method.

96
00:07:35,390 --> 00:07:44,000
So this dot make note, read only parentheses to actually execute it.

97
00:07:44,330 --> 00:07:47,660
And then to make things editable, we can just call our other method.

98
00:07:47,660 --> 00:07:47,970
Right.

99
00:07:48,020 --> 00:07:53,950
So this dot make note editable, OK?

100
00:07:54,050 --> 00:08:00,440
And in order to reference our methods by saying this dot and then the method name, we want to be sure

101
00:08:00,440 --> 00:08:04,940
that the keyword this is pointing towards our main class or object.

102
00:08:05,270 --> 00:08:09,490
And to make sure that that's the case, we need to look into our event handler.

103
00:08:09,740 --> 00:08:13,940
So when the edit note gets clicked, this is what we're going to call in response.

104
00:08:13,940 --> 00:08:23,150
We want to be sure to add on at the end here dot binde that's otherwise JavaScript will modify the value

105
00:08:23,150 --> 00:08:26,970
of this and set it to equal whatever element got clicked on.

106
00:08:27,300 --> 00:08:33,440
OK, now before we save this, we need to make a couple of changes to our methods are equal but opposite

107
00:08:33,440 --> 00:08:36,270
methods in order to make things actually work.

108
00:08:36,470 --> 00:08:42,050
So for example, when you first come to the page, none of the list items are going to contain the data

109
00:08:42,050 --> 00:08:46,310
attribute named data state with a value of editable.

110
00:08:46,610 --> 00:08:51,800
So that means the first time you click edit, this is always going to evaluate to false.

111
00:08:52,040 --> 00:08:58,550
So the elf's will run, which will make things editable and then after that has had a chance to run.

112
00:08:58,730 --> 00:09:03,170
We want to update that data attribute and actually set it to editable.

113
00:09:03,470 --> 00:09:09,530
So that way if you click the edit button again, then this would evaluate to true and then make Read-Only

114
00:09:09,530 --> 00:09:10,060
would run.

115
00:09:10,370 --> 00:09:17,870
So basically down here within our make note editable method, let's add a new line and say this note

116
00:09:18,290 --> 00:09:20,600
and let's give it a data attribute.

117
00:09:21,080 --> 00:09:25,700
The name of the attribute would be state or data Dasch state.

118
00:09:26,180 --> 00:09:26,380
Right.

119
00:09:26,450 --> 00:09:27,740
So it matches this.

120
00:09:28,160 --> 00:09:33,710
And then for the second argument, we just say, let's set it to editable, all right.

121
00:09:33,710 --> 00:09:38,240
And then let's do an equal but opposite action down in the Read-Only method.

122
00:09:38,990 --> 00:09:40,120
So add a new line.

123
00:09:40,370 --> 00:09:47,570
This note, we will add a data attribute or I should say we will update a data attribute that's named

124
00:09:47,570 --> 00:09:51,650
state and this time we will set it's equal cancel.

125
00:09:52,170 --> 00:09:55,970
Doesn't really matter what we set it to, as long as it's different than editable.

126
00:09:56,270 --> 00:10:02,450
As long as it's different, then that will affect the true or false nature of our if check and then

127
00:10:02,450 --> 00:10:07,010
our final edit before we save this and test it out is within these methods.

128
00:10:07,010 --> 00:10:12,950
If we are referencing something named this note, we need to make sure that that even exists within

129
00:10:12,950 --> 00:10:14,720
the context of the function.

130
00:10:15,050 --> 00:10:15,280
Right.

131
00:10:15,350 --> 00:10:19,330
How does this function even know which this note we are talking about?

132
00:10:19,670 --> 00:10:26,450
So up here, when we first create the variable named this note, it will exist within the context of

133
00:10:26,450 --> 00:10:27,920
this edit note method.

134
00:10:28,220 --> 00:10:33,860
So then on this line, in this line, when we are calling our other methods within the parentheses,

135
00:10:33,860 --> 00:10:37,240
let's just pass along this note.

136
00:10:38,210 --> 00:10:45,470
So here as well, this note, OK, and then down within the function definitions for those, let's include

137
00:10:45,500 --> 00:10:47,450
this note as a parameter.

138
00:10:47,780 --> 00:10:49,440
So let's do that down here as well.

139
00:10:49,880 --> 00:10:54,160
This note, OK, let's go ahead and save things now.

140
00:10:54,920 --> 00:11:01,040
So when I first come to the page, I can't make any edits as soon as I click edit cuz I can make whatever

141
00:11:01,040 --> 00:11:05,930
changes I want to and then if I click the cancel button, perfect.

142
00:11:05,930 --> 00:11:10,370
That removes the borders and once again I cannot make any changes to the fields.

143
00:11:10,880 --> 00:11:17,720
All right, so now that we've completed our edit cancel switching feature, let's change gears and set

144
00:11:17,720 --> 00:11:24,800
things up so that when you click the blue save button it actually sends off a request to the WordPress

145
00:11:25,070 --> 00:11:26,480
rest API.

146
00:11:26,780 --> 00:11:27,080
Right.

147
00:11:27,080 --> 00:11:33,380
Because as of this moment, if I make changes to these fields, this data is not actually getting saved

148
00:11:33,380 --> 00:11:33,890
anywhere.

149
00:11:33,890 --> 00:11:38,580
So as soon as I refresh the page, the values go back to normal.

150
00:11:39,020 --> 00:11:45,650
So right now, let's set up a bit of JavaScript so that if you edit one of these fields and change the

151
00:11:45,650 --> 00:11:52,060
title, then all you need to do is click the save button to send it to the WordPress database.

152
00:11:52,400 --> 00:11:59,360
So back in our text editor within our JavaScript, let's scroll up to the very top and within our events

153
00:11:59,360 --> 00:12:02,120
method, let's be on the lookout for something new.

154
00:12:02,480 --> 00:12:07,910
Actually, to save some typing, we can actually just copy and paste and duplicate this line.

155
00:12:09,750 --> 00:12:11,140
Copy paste.

156
00:12:11,310 --> 00:12:18,570
And on this new line, let's be on the lookout for an element that has a class of update, no getting

157
00:12:18,570 --> 00:12:23,260
clipped because this is the class for the blue save button.

158
00:12:23,640 --> 00:12:32,010
So when that gets clicked, then in response, let's fire off a function or method named update note.

159
00:12:32,640 --> 00:12:38,550
OK, and now let's just go and create a method with this exact matching name in order to save a ton

160
00:12:38,550 --> 00:12:39,230
of typing.

161
00:12:39,240 --> 00:12:42,510
Let's just copy and paste our delete note method.

162
00:12:42,840 --> 00:12:43,110
Right.

163
00:12:43,110 --> 00:12:49,710
Because that already contains the Ajax code with the secret nonce and the you are and the success and

164
00:12:49,710 --> 00:12:50,180
error.

165
00:12:50,580 --> 00:12:58,410
So let's just copy from here the beginning of delete note and down here is the end of the delete note

166
00:12:58,410 --> 00:12:58,920
method.

167
00:12:59,370 --> 00:13:04,140
So I'm just going to copy that and then right below it pasted in to duplicate it.

168
00:13:04,800 --> 00:13:09,470
Let's change the name from delete note to update note.

169
00:13:09,990 --> 00:13:16,740
OK, and the very first thing that I'm going to change is the type of request that I want to send out.

170
00:13:16,950 --> 00:13:17,400
The U.

171
00:13:17,400 --> 00:13:21,600
RL that we are sending a request to can stay exactly the same.

172
00:13:21,900 --> 00:13:27,650
But now, instead of a delete request, I want to send a post request.

173
00:13:28,080 --> 00:13:28,560
All right.

174
00:13:28,560 --> 00:13:31,710
Next, let's customize our success function.

175
00:13:32,070 --> 00:13:36,930
So back when we were deleting a post, this line of code made sense, right?

176
00:13:36,930 --> 00:13:39,660
We wanted to delete it from the page on the fly.

177
00:13:39,930 --> 00:13:43,920
But now, within the context of updating a post, we don't want that.

178
00:13:43,920 --> 00:13:44,940
So let's delete it.

179
00:13:45,630 --> 00:13:51,990
And instead, I think it would be cool if after you click save and the request is successful, I think

180
00:13:51,990 --> 00:13:56,970
that should just kick us out of edit mode and set things back to read only.

181
00:13:57,360 --> 00:14:01,250
So that way you have a little bit of feedback that your request was successful.

182
00:14:01,590 --> 00:14:12,880
So back in our code, within the success function, let's just say this dot make note read only and

183
00:14:12,990 --> 00:14:18,270
just like before, if we are running this function, we need to tell it which note in particular to

184
00:14:18,270 --> 00:14:19,170
operate on.

185
00:14:19,440 --> 00:14:25,280
Now, within the context of our update note method, we've already defined that this note variable.

186
00:14:25,710 --> 00:14:29,250
So when we call make note, read only within the parentheses.

187
00:14:29,250 --> 00:14:32,800
Let's just pass along this note, OK?

188
00:14:32,880 --> 00:14:38,970
And then finally, before we save this and test it out, we obviously need to send along a bit of data

189
00:14:38,970 --> 00:14:40,140
with our request.

190
00:14:40,440 --> 00:14:40,770
Right.

191
00:14:40,770 --> 00:14:48,180
We need to send along the new updated title and the new updated body field or I should say body content.

192
00:14:48,630 --> 00:14:55,230
So back in our JavaScript, the way that you can send data along with your request is to simply include

193
00:14:55,230 --> 00:14:56,930
a property named data.

194
00:14:57,240 --> 00:15:00,810
It doesn't matter where, but maybe right below this type line.

195
00:15:00,850 --> 00:15:04,290
Let's include a new line and say data colon.

196
00:15:04,680 --> 00:15:08,580
And for now, let's just set it to a temporary X placeholder.

197
00:15:08,850 --> 00:15:15,510
And then maybe up here above the Ajax line, let's add a new line and let's create a variable.

198
00:15:15,510 --> 00:15:17,160
We could name it whatever we want.

199
00:15:17,430 --> 00:15:24,560
I'm going to name it our updated post and I'm going to set it to equal an object.

200
00:15:25,080 --> 00:15:30,750
Now, the WordPress rest API is looking for very specific property names.

201
00:15:31,020 --> 00:15:35,190
If you want to update the title, you need to match that exact name.

202
00:15:35,850 --> 00:15:38,160
Let's set that to X just as a placeholder.

203
00:15:38,550 --> 00:15:45,660
And if you want to update the main body content field, the rest API is expecting a property named content.

204
00:15:46,870 --> 00:15:50,340
OK, now we don't actually want these placeholder X values.

205
00:15:50,640 --> 00:15:57,270
So for the title, we want to set that to equal whatever the value of this input field is.

206
00:15:57,660 --> 00:16:04,980
So to find that instead of the X, let's say this note and then look within that list item with the

207
00:16:04,980 --> 00:16:12,990
find method and we're looking for the input field that has a class of note title field, and then we

208
00:16:12,990 --> 00:16:19,590
can get the value of that field by saying dot val, OK, then let's do the same thing for content.

209
00:16:19,590 --> 00:16:22,920
We want to find the value of this text area field.

210
00:16:23,640 --> 00:16:31,350
So instead of X, let's say this note, find within the list item, the text area that has a class of

211
00:16:31,350 --> 00:16:36,720
note body field and then we want to grab the value of that element.

212
00:16:36,930 --> 00:16:44,130
OK, so we've constructed this object named our updated post and now that is the data that we want to

213
00:16:44,130 --> 00:16:45,990
send along with this request.

214
00:16:46,350 --> 00:16:54,060
So we just set data to equal the name of that variable, our updated post.

215
00:16:54,690 --> 00:16:58,340
OK, now let's go ahead and save this and test it out.

216
00:16:59,190 --> 00:17:08,230
So if I refresh the page and click, edit and say my new magical title and change the body to say mass.

217
00:17:08,400 --> 00:17:11,490
Is so fun and then click save.

218
00:17:13,650 --> 00:17:19,050
Cool, so it must have been successful because you can see that now the fields are read-only again and

219
00:17:19,050 --> 00:17:20,430
the save button disappeared.

220
00:17:20,850 --> 00:17:27,930
And just for confirmation, if I check my chrome console, we see congrats and WordPress responds with

221
00:17:27,930 --> 00:17:30,960
information about the post that you just updated.

222
00:17:31,350 --> 00:17:38,850
So now, even if I refresh the page, we still see those same updated values because now they've been

223
00:17:38,850 --> 00:17:40,680
saved into the database.

224
00:17:41,010 --> 00:17:48,090
So we just successfully modified a post from the front end of our website and we can jump into the admin

225
00:17:48,090 --> 00:17:50,490
dashboard and refresh our notes area.

226
00:17:51,060 --> 00:17:55,140
And we can see with our own eyes that, yes, that post was indeed updated.

227
00:17:55,570 --> 00:18:00,690
It's got the new title and it's got the new body content perfect.

228
00:18:00,810 --> 00:18:03,810
And that's going to bring this lesson to a close.

229
00:18:04,170 --> 00:18:11,310
In our next lesson, we will learn how to create brand new posts right from the front end, because

230
00:18:11,310 --> 00:18:15,780
if we think back to the CRUD acronym, we know how to read data.

231
00:18:16,000 --> 00:18:18,750
Now we know how to update and delete data.

232
00:18:19,080 --> 00:18:22,670
So all that remains is how to create brand new data.

233
00:18:22,980 --> 00:18:26,180
And once we learn how to do that, we will be unstoppable.

234
00:18:26,550 --> 00:18:30,570
So let's keep things rolling and I will see you in the next lesson.
