WEBVTT
1
00:00:00.870 --> 00:00:08.760
Hello, everyone, in this lesson, we will learn how to edit a default or existing query that phrase

2
00:00:08.760 --> 00:00:12.110
that I just said probably doesn't make a whole lot of sense at this point.

3
00:00:12.420 --> 00:00:18.660
So for now, let's put it on the back burner and just dive in to our event post type work and we will

4
00:00:18.660 --> 00:00:20.970
circle back to this topic organically.

5
00:00:21.300 --> 00:00:28.800
OK, so in our previous lesson, we customized this upcoming events query to not only order them by

6
00:00:28.800 --> 00:00:35.850
their event date instead of their published on date, but we also learned how to hide or exclude events

7
00:00:35.850 --> 00:00:37.710
that took place in the past.

8
00:00:37.930 --> 00:00:40.740
So this area on our homepage is looking good now.

9
00:00:40.740 --> 00:00:47.340
But you'll notice that if we click on this view, all events screen this archive screen, it could use

10
00:00:47.340 --> 00:00:48.510
a bit of our attention.

11
00:00:48.810 --> 00:00:56.130
Now, before we worry about the ordering of the events or excluding past events, let's first just begin

12
00:00:56.130 --> 00:00:59.760
by getting rid of this fake hardcoded, static date.

13
00:01:00.120 --> 00:01:00.380
Right.

14
00:01:00.400 --> 00:01:05.160
We already did that on the homepage, but now we need to be sure to do it in this archive template.

15
00:01:05.520 --> 00:01:10.560
So up in the address bar, we can see that this is the slash events archive screen.

16
00:01:10.890 --> 00:01:17.340
So if we want to make changes to this template, let's jump into our text editor and within our theme

17
00:01:17.340 --> 00:01:21.210
folder, let's jump into archive dash event.

18
00:01:22.950 --> 00:01:25.740
So here we can see the while loop begins.

19
00:01:26.220 --> 00:01:29.760
We've got a div with a class of events summary for each event.

20
00:01:30.000 --> 00:01:35.630
And right within that div there's an element or a link and that is the date circle.

21
00:01:35.760 --> 00:01:39.480
So here we can see it's got the fake hardcoded march in twenty five.

22
00:01:40.020 --> 00:01:45.480
So there's no point encoding the dynamic date again when we could just go and copy and paste it from

23
00:01:45.480 --> 00:01:46.810
our homepage template.

24
00:01:47.100 --> 00:01:51.760
So right now let's jump in to front dash page B.

25
00:01:52.990 --> 00:01:56.120
Let's scroll down a bit to the upcoming events area.

26
00:01:56.500 --> 00:02:00.880
Here's the while loop, and here we see that same element or link.

27
00:02:01.160 --> 00:02:04.900
So just copy from the beginning of the attack to the end of the attack.

28
00:02:05.500 --> 00:02:07.030
Copy that into your clipboard.

29
00:02:07.030 --> 00:02:13.540
And then back in archive event, let's just replace this element with our clipboard.

30
00:02:14.110 --> 00:02:15.610
OK, so if we save that.

31
00:02:17.740 --> 00:02:20.830
Cool, so now the archives screen has real dates.

32
00:02:21.130 --> 00:02:27.340
So now we can get to the actual point of this lesson on this archive screen, the posts are still ordered

33
00:02:27.340 --> 00:02:29.680
by they're published on or created date.

34
00:02:29.800 --> 00:02:30.130
Right.

35
00:02:30.130 --> 00:02:34.660
And instead of that, we want to order them by the most rapidly approaching event date.

36
00:02:35.080 --> 00:02:38.490
Also, we want to hide or exclude events from the past.

37
00:02:38.770 --> 00:02:44.740
So in order to make those things happen, our first instinct might be to go into the template file for

38
00:02:44.740 --> 00:02:45.460
this screen.

39
00:02:45.850 --> 00:02:47.530
Right, the archive event.

40
00:02:48.820 --> 00:02:54.820
And right before this, while loop begins, your instinct might be to create our own new custom query

41
00:02:54.820 --> 00:02:57.540
here, just like we did on the homepage.

42
00:02:57.760 --> 00:03:03.430
And while technically that could get the job done, it would create a bit of extra work for us and we'd

43
00:03:03.430 --> 00:03:07.220
have to jump through a few hoops in order to keep pagination working.

44
00:03:07.600 --> 00:03:13.240
So the main point for this lesson is I want to let you know that creating your own brand new custom

45
00:03:13.240 --> 00:03:15.880
queries is not always the right answer.

46
00:03:16.060 --> 00:03:19.390
What's the old saying about if the only tool you have is a hammer?

47
00:03:19.660 --> 00:03:21.490
Everything starts to look like a nail.

48
00:03:21.880 --> 00:03:28.450
What I'm getting at here is that on this archive screen, there's no need for us to completely destroy

49
00:03:28.660 --> 00:03:33.910
the default query that WordPress is going to make on its own based on the current URL.

50
00:03:34.240 --> 00:03:34.630
Right.

51
00:03:34.630 --> 00:03:39.560
This default query that WordPress is making is almost what we want.

52
00:03:39.820 --> 00:03:43.120
We do indeed want to archive for event posts.

53
00:03:43.450 --> 00:03:47.170
We just want to change and tweak that query in subtle ways.

54
00:03:47.650 --> 00:03:55.480
In contrast to that, back on our homepage, we did indeed need to write brand new separate custom queries

55
00:03:55.750 --> 00:04:02.050
to pull in the events and blog posts because WordPress by default was not going to query for those things

56
00:04:02.050 --> 00:04:02.600
at all.

57
00:04:03.040 --> 00:04:09.340
So custom queries are the right tool for the job when you want to do something that isn't related to

58
00:04:09.340 --> 00:04:11.410
the default behavior of the current U.

59
00:04:11.410 --> 00:04:15.660
RL, but that is not the case on our events archive screen.

60
00:04:16.600 --> 00:04:21.640
You and I can work with this default you URL based query that's happening on this screen.

61
00:04:22.060 --> 00:04:26.470
We just need to sculpt it into shape or make a few subtle adjustments to it.

62
00:04:27.130 --> 00:04:30.870
And that's exactly what we're going to learn how to do in this lesson.

63
00:04:31.300 --> 00:04:37.030
The reason we would do this is it can result in us not needing to write as much code and it also makes

64
00:04:37.030 --> 00:04:40.500
sure that pagination will work without any extra hassle.

65
00:04:40.750 --> 00:04:45.700
So in order to begin customizing this query, let's go back into our text editor.

66
00:04:45.970 --> 00:04:51.820
And we actually don't need to make any changes to this archive event file.

67
00:04:52.370 --> 00:04:56.020
So let me just delete these empty lines and close out that file.

68
00:04:56.500 --> 00:05:03.100
Instead, we want to jump in to our functions, p p file down at the very bottom.

69
00:05:03.100 --> 00:05:06.610
Let's add a new line and let's add a new action.

70
00:05:07.390 --> 00:05:09.860
So add action.

71
00:05:11.050 --> 00:05:19.240
The name of the WordPress event that we want to hook on to is pre get posts.

72
00:05:19.700 --> 00:05:21.580
OK, so that's the first argument.

73
00:05:22.000 --> 00:05:27.430
The second argument is the name of the function that we are going to create that we want to call or

74
00:05:27.430 --> 00:05:32.040
run during this moment so we can make up any name we want.

75
00:05:32.410 --> 00:05:35.080
Why don't we call it university?

76
00:05:35.910 --> 00:05:38.140
Just queries.

77
00:05:38.750 --> 00:05:44.080
OK, so now WordPress will call this function at precisely the right moment, so we better go ahead

78
00:05:44.080 --> 00:05:46.210
and create a function with this name.

79
00:05:46.420 --> 00:05:53.410
So maybe right above this line, let's say function and then the name of the function that we just made

80
00:05:53.410 --> 00:05:53.740
up.

81
00:05:54.130 --> 00:06:03.910
So university but just queries, OK, and right before WordPress sends its query off to the database,

82
00:06:04.150 --> 00:06:06.730
it will give our function the last word.

83
00:06:07.000 --> 00:06:14.470
It will give us a chance to adjust the query, hence the name of the event pre get posts right before

84
00:06:14.470 --> 00:06:16.170
we get the posts with the query.

85
00:06:16.510 --> 00:06:22.150
Now, the cool part here is when WordPress calls our function, it's going to give it a reference to

86
00:06:22.150 --> 00:06:24.130
the WordPress query object.

87
00:06:24.550 --> 00:06:25.810
So let me show you what I mean.

88
00:06:26.110 --> 00:06:32.560
On this line of code, when we are defining our function within these parentheses, let's add a parameter

89
00:06:32.560 --> 00:06:35.020
named dollar sign query.

90
00:06:35.420 --> 00:06:41.560
So this way, when WordPress calls our function and it passes along the WordPress query object, we

91
00:06:41.560 --> 00:06:45.520
can now manipulate that object within the body of our function.

92
00:06:45.820 --> 00:06:47.560
So check this out within our function.

93
00:06:47.560 --> 00:06:49.900
Let's just target that query object.

94
00:06:50.350 --> 00:06:53.800
Let's look inside the object with Dasch greater than.

95
00:06:54.190 --> 00:07:02.020
And I can tell you that it has a method or function named set and we need to give this set method to

96
00:07:02.020 --> 00:07:02.890
arguments.

97
00:07:03.250 --> 00:07:07.590
The first argument is the name of a query parameter that we want to change.

98
00:07:07.900 --> 00:07:11.560
So, for example, remember the good old posts per page.

99
00:07:12.370 --> 00:07:17.170
So if we say posts per page and then the second argument.

100
00:07:17.220 --> 00:07:24.270
Is the value that you want to use, so then if we say just one post per page, we wouldn't do this in

101
00:07:24.270 --> 00:07:27.720
the real world, but let's just save this as a quick experiment.

102
00:07:28.590 --> 00:07:34.860
And if I jump back to the website, you can see that now there's only one event per page and then we

103
00:07:34.860 --> 00:07:39.880
can use pagination to go to the next set of results and the next set.

104
00:07:40.320 --> 00:07:43.450
However, this is not limited to just the events.

105
00:07:43.470 --> 00:07:50.220
If I click blog up in the header, we can see that the code we wrote is being applied universally to

106
00:07:50.220 --> 00:07:51.660
all queries.

107
00:07:52.060 --> 00:07:56.340
So we're just seeing one individual blog post and then we have to use pagination.

108
00:07:56.940 --> 00:08:00.870
Right, because we said one per page and it goes even beyond that.

109
00:08:01.080 --> 00:08:08.080
The code that we just wrote is so powerful that it even affects the backend admin portion of our website.

110
00:08:08.280 --> 00:08:15.840
So if I click on posts, we only see one item per page or if I click on events, right.

111
00:08:15.840 --> 00:08:16.970
We only see one.

112
00:08:17.310 --> 00:08:19.500
So this is obviously not what we want.

113
00:08:19.680 --> 00:08:22.620
That code that we just wrote is too universal.

114
00:08:22.620 --> 00:08:23.670
It's too powerful.

115
00:08:24.000 --> 00:08:28.800
We don't want to manipulate or customize every single query on our website.

116
00:08:29.010 --> 00:08:35.520
In this case, we just want to customize the query for these events page, write the events archive

117
00:08:35.520 --> 00:08:36.020
screen.

118
00:08:36.270 --> 00:08:43.500
So back in our code, what we want to do is wrap this within an IF statement and then create a condition

119
00:08:43.500 --> 00:08:46.970
that will only be true on the events archive screen.

120
00:08:47.250 --> 00:08:51.360
So let's go ahead and cut and paste this line of code into our clipboard.

121
00:08:53.140 --> 00:09:00.010
OK, and let's write in if statement within the curly brackets or body of the statement, you can go

122
00:09:00.010 --> 00:09:05.410
ahead and paste back in your clipboard and now let's work on the condition within these parentheses.

123
00:09:05.740 --> 00:09:11.960
So first and foremost, we only want this code to run if we are on the front end of our website.

124
00:09:12.190 --> 00:09:12.460
Right.

125
00:09:12.510 --> 00:09:17.550
We don't want to manipulate the query on the backend admin portion of our website.

126
00:09:17.710 --> 00:09:24.970
So within our IF statement condition, we can just say if is admin right, this function will return

127
00:09:24.970 --> 00:09:25.540
true.

128
00:09:25.540 --> 00:09:32.170
If you're looking at the admin dashboard and then right before that we can say exclamation, which negates

129
00:09:32.170 --> 00:09:33.500
this or is the opposite.

130
00:09:33.880 --> 00:09:38.090
So only if you're not in the admin will this return true.

131
00:09:38.440 --> 00:09:40.870
OK, so that's a good start if we save that.

132
00:09:41.940 --> 00:09:48.240
We can see that now our admin is back to normal, all of our events are visible on one page and the

133
00:09:48.240 --> 00:09:51.270
front end of our website is still using that custom query.

134
00:09:51.720 --> 00:09:54.100
But it's still not just tied to events, right?

135
00:09:54.120 --> 00:09:57.160
If I click onto the blog section, it's still being applied.

136
00:09:57.480 --> 00:10:02.100
So back in our code, let's just add on another condition check.

137
00:10:02.340 --> 00:10:13.770
So after this is admin lets out of space and say and is post type archive and we're interested in the

138
00:10:13.770 --> 00:10:15.000
event archive.

139
00:10:15.690 --> 00:10:19.530
So only if we're on the front end and only if we're on the archive for event.

140
00:10:20.220 --> 00:10:23.400
So let's say that our blog is back to normal.

141
00:10:23.400 --> 00:10:23.690
Right.

142
00:10:23.700 --> 00:10:25.380
It's showing multiple posts.

143
00:10:26.870 --> 00:10:33.680
But our events archive is still listening to our query manipulation and just to play it safe, whenever

144
00:10:33.680 --> 00:10:38.870
I manipulate a default query, I always like to add on one more check in the IF statement.

145
00:10:38.990 --> 00:10:46.790
So I say, and if the query that is being passed into our function, so dollar sign query and then I

146
00:10:46.790 --> 00:10:53.070
can look within it for a method named is main query.

147
00:10:53.570 --> 00:10:57.460
So this way we never accidentally manipulate a custom query.

148
00:10:57.830 --> 00:11:04.400
This function will only evaluate to true if the query in question is the default Eurail based query

149
00:11:04.700 --> 00:11:05.160
cool.

150
00:11:05.180 --> 00:11:11.330
So we've strung together three different conditional checks and this is now a rock solid piece of code.

151
00:11:11.630 --> 00:11:17.270
We can sleep at night knowing that this query manipulation will only run on our intended you.

152
00:11:18.010 --> 00:11:21.200
OK, now at this point, let's get back to the task at hand.

153
00:11:21.560 --> 00:11:25.160
We don't actually want to set posts per page to one.

154
00:11:25.550 --> 00:11:27.890
I only did that as an extreme example.

155
00:11:28.130 --> 00:11:29.930
So let's remove those arguments.

156
00:11:30.710 --> 00:11:37.340
And now what we really want to do is order by the event date instead of the published or created on

157
00:11:37.340 --> 00:11:37.670
date.

158
00:11:37.940 --> 00:11:42.170
And after that, we also want to exclude any events in the past.

159
00:11:42.440 --> 00:11:47.030
Now, in our previous lesson, we already spent the time to create that custom logic.

160
00:11:47.030 --> 00:11:47.360
Right.

161
00:11:47.570 --> 00:11:50.110
So there's no sense in writing it from scratch again.

162
00:11:50.270 --> 00:11:54.710
So right now, let's go ahead and jump in to our front page file.

163
00:11:55.550 --> 00:11:58.390
And here's the first bit of real peacoat, right?

164
00:11:58.400 --> 00:11:59.930
This is our custom query.

165
00:12:00.230 --> 00:12:06.200
This is where we learned how to order by a custom field and then filter out events from the past so

166
00:12:06.200 --> 00:12:08.330
we can use this code as our guide.

167
00:12:08.480 --> 00:12:12.760
We just need to manually set each of these parameters one by one.

168
00:12:13.010 --> 00:12:16.420
So, for example, let's begin by sorting by the event date.

169
00:12:16.880 --> 00:12:21.340
So, for example, the first parameter that I want to target is named Migaki.

170
00:12:21.650 --> 00:12:28.310
So back in our functions dot p, we're beginning this line of code by looking inside the WordPress query

171
00:12:28.310 --> 00:12:31.190
object calling its method name to set.

172
00:12:31.520 --> 00:12:35.050
The first argument is the query parameter that we want to target.

173
00:12:35.360 --> 00:12:41.190
So remember, the first one is meta key and then the second argument is what you want to set it to.

174
00:12:41.660 --> 00:12:49.280
So back in our front page, remember, we set that to equal event date so back and functions not, say,

175
00:12:49.280 --> 00:12:50.020
event date.

176
00:12:50.360 --> 00:12:52.640
OK, so this line of code is now complete.

177
00:12:53.240 --> 00:12:56.420
So right below that, we're going to need to set another parameter.

178
00:12:56.540 --> 00:13:02.420
So we begin with our query object, look inside it and call the set method again and then you just rinse

179
00:13:02.420 --> 00:13:03.920
and repeat that process.

180
00:13:04.160 --> 00:13:04.340
Right.

181
00:13:04.430 --> 00:13:09.770
So back in front page, the next parameter that we want to target is order by.

182
00:13:11.120 --> 00:13:13.550
So set, order by.

183
00:13:13.910 --> 00:13:17.660
And then for the second argument, I can't remember the exact value.

184
00:13:17.660 --> 00:13:24.380
So you can just jump back in to front page and we set it to Medda value num so you can either remember

185
00:13:24.380 --> 00:13:26.030
that or just copy and paste it.

186
00:13:28.330 --> 00:13:29.450
OK, you get the idea.

187
00:13:29.590 --> 00:13:33.510
Let's go ahead and save our progress with just these two lines in place.

188
00:13:34.820 --> 00:13:42.080
And we can see that our events archive is now sorted by the event date, right, June, July, September,

189
00:13:42.530 --> 00:13:45.800
except we want them to be ordered in the opposite direction.

190
00:13:46.130 --> 00:13:48.920
We want the most rapidly approaching event first.

191
00:13:49.460 --> 00:13:52.520
So back in our code, let's add another line.

192
00:13:53.000 --> 00:13:54.530
Start with the query object.

193
00:13:54.680 --> 00:13:56.390
Call it set method again.

194
00:13:56.810 --> 00:14:03.830
And back in front page, you'll remember that we used order and set it to ascending instead of descending.

195
00:14:05.090 --> 00:14:10.490
So back and functions be that order to ascending.

196
00:14:13.830 --> 00:14:19.740
Cool, so now we've got the correct ordering now let's change gears a bit and filter out or exclude

197
00:14:19.740 --> 00:14:21.910
events that took place in the past.

198
00:14:22.230 --> 00:14:29.010
So back in our functions file within our IF statement, let's add another new line, beginning with

199
00:14:29.010 --> 00:14:31.800
our query object called the set method.

200
00:14:33.030 --> 00:14:37.320
And the name of the query parameter that we are interested in is Medda.

201
00:14:37.320 --> 00:14:38.640
Underscore query.

202
00:14:39.030 --> 00:14:41.330
If you forgot about this parameter, that's OK.

203
00:14:41.340 --> 00:14:44.590
You can always just jump back in to front page B..

204
00:14:44.880 --> 00:14:45.940
And here we can see.

205
00:14:45.960 --> 00:14:54.090
Remember we used meta query to only give us posts where the event date is greater than or equal to today.

206
00:14:54.510 --> 00:14:57.360
Now there is no need to type out all of this code again.

207
00:14:57.360 --> 00:14:59.010
We can just copy and paste it.

208
00:14:59.320 --> 00:15:02.460
So we want the value of what meta query has been set to.

209
00:15:02.820 --> 00:15:08.490
So let's place our cursor at the beginning of the word array here and then we're going to end with this

210
00:15:08.490 --> 00:15:09.650
outer parentheses.

211
00:15:09.930 --> 00:15:10.180
Right.

212
00:15:10.200 --> 00:15:15.490
We want to be sure to have the parentheses that closes this entire array and then this outer parentheses

213
00:15:15.490 --> 00:15:17.260
that closes the top level array.

214
00:15:17.550 --> 00:15:20.520
OK, so let's copy that into our clipboard then.

215
00:15:20.520 --> 00:15:26.610
Back in functions, we were just going to set Medda queries to equal whatever's in our clipboard.

216
00:15:26.970 --> 00:15:27.780
So comma.

217
00:15:27.780 --> 00:15:33.240
And then the second argument, we do not need quotes around it because it's an array, not a string

218
00:15:33.240 --> 00:15:34.080
of text.

219
00:15:34.290 --> 00:15:35.630
So go ahead and paste.

220
00:15:35.850 --> 00:15:41.840
And before we save this, we need to remember that we're referencing a variable named today, right?

221
00:15:41.850 --> 00:15:46.520
Only show us posts where the event date is greater than or equal to today's date.

222
00:15:46.770 --> 00:15:51.860
So if we're going to reference this variable, we need to define that variable within this function.

223
00:15:52.260 --> 00:15:58.800
So if we jump back into front page, up right above our custom query on this line, we see that we are

224
00:15:58.800 --> 00:16:00.570
creating that today variable.

225
00:16:00.840 --> 00:16:06.960
So let's just copy that into our clipboard and then back in functions maybe up here right before the

226
00:16:06.960 --> 00:16:10.980
first line where we are setting query parameters, you can just paste that in.

227
00:16:11.370 --> 00:16:11.660
Right.

228
00:16:11.700 --> 00:16:13.590
So now this code down here makes sense.

229
00:16:13.620 --> 00:16:19.140
This variable will reference this value today's date as soon as we save that.

230
00:16:20.120 --> 00:16:27.230
Now, our front end doesn't show past events cool now before we bring this lesson to a close, why don't

231
00:16:27.230 --> 00:16:33.440
we jump back to the home page and then let's go ahead and create another event just to make sure that

232
00:16:33.440 --> 00:16:36.110
our pages are working the way we want them to.

233
00:16:36.590 --> 00:16:40.220
So back in the admin, let me create a brand new event.

234
00:16:41.850 --> 00:16:47.460
Let's title it winter study night paste in a bit of dummy text.

235
00:16:47.790 --> 00:16:50.790
Let's set the event date way out into the future.

236
00:16:50.790 --> 00:16:53.700
So maybe December 10th.

237
00:16:54.850 --> 00:16:56.320
And let's go ahead and save it.

238
00:16:56.930 --> 00:17:03.670
OK, so back on our home page, oops, remember, we only want our home page to show the two most rapidly

239
00:17:03.670 --> 00:17:08.570
approaching events, so let's fix that so it doesn't show all events on the home page.

240
00:17:09.010 --> 00:17:16.450
So back in front page PPY, remember posts per page, we set it to negative one and that will show all

241
00:17:16.450 --> 00:17:17.140
items.

242
00:17:17.710 --> 00:17:19.180
But that was just an experiment.

243
00:17:19.210 --> 00:17:25.660
So now let's set that back to two to only pull in the two most rapidly approaching events.

244
00:17:26.680 --> 00:17:27.670
OK, perfect.

245
00:17:27.670 --> 00:17:28.770
July and September.

246
00:17:28.960 --> 00:17:35.530
But then if you click view all events to go to the archive, that screen does indeed show all upcoming

247
00:17:35.530 --> 00:17:37.210
events perfect.

248
00:17:37.210 --> 00:17:39.580
So everything is working just right now.

249
00:17:39.580 --> 00:17:46.630
In our next lesson, we will learn how to create a separate page entirely named past events.

250
00:17:47.050 --> 00:17:48.300
Should be a lot of fun.

251
00:17:48.340 --> 00:17:50.530
Let's keep it rolling and I will see you then.
