1
00:00:02,470 --> 00:00:06,500
Hello, everyone, welcome to part two of this lesson.

2
00:00:06,790 --> 00:00:09,030
Let's pick up right where we left off.

3
00:00:09,490 --> 00:00:18,010
So in part one, we added a new query to our search overlay results that will pull in professors based

4
00:00:18,010 --> 00:00:19,940
on their relationship to a program.

5
00:00:20,230 --> 00:00:27,460
The only problem is that we hard coded and faked a value of biology, which means at the moment it doesn't

6
00:00:27,460 --> 00:00:30,190
even matter what phrase someone searches for.

7
00:00:30,220 --> 00:00:37,090
So if I search for math, we still see the same two professors, and even if I just search for gibberish,

8
00:00:37,900 --> 00:00:39,080
they still get pulled in.

9
00:00:39,490 --> 00:00:44,910
So our goal for this lesson is to make this query actually dynamic and flexible.

10
00:00:45,250 --> 00:00:52,360
So let's get started by jumping into our text editor and let's look inside our theme folders, ANC subfolder

11
00:00:52,360 --> 00:00:55,290
and jump in to search RÃ¼big BHP.

12
00:00:55,660 --> 00:01:02,320
And if we scroll down to the very bottom of this file right above this while loop down, here is our

13
00:01:02,320 --> 00:01:03,640
new custom query.

14
00:01:04,000 --> 00:01:10,470
And this is where a hardcoded a value of ninety seven, which is my biology program post.

15
00:01:10,810 --> 00:01:17,440
So this query is saying, give us any professors where one of the related programs is biology.

16
00:01:17,740 --> 00:01:21,900
But obviously we don't want to hard code a specific program here.

17
00:01:22,390 --> 00:01:29,200
Instead, we need to find the ID number for any and all programs that match the current user search

18
00:01:29,200 --> 00:01:29,810
phrase.

19
00:01:30,160 --> 00:01:33,990
Now luckily we are already almost doing this on accident.

20
00:01:34,330 --> 00:01:35,530
Let me show you what I mean.

21
00:01:35,680 --> 00:01:43,630
So over in the Postman app, if I search for biology in the JSON that gets returned, there's an array

22
00:01:43,630 --> 00:01:45,110
named programs.

23
00:01:45,490 --> 00:01:48,350
Now, this result doesn't contain the ID number.

24
00:01:48,670 --> 00:01:51,100
It only contains a title and permalink.

25
00:01:51,100 --> 00:01:54,370
But we are the ones that control what gets output here.

26
00:01:54,790 --> 00:02:01,800
So right now, let's just go adjust this program, Southbury, so that each item also has an ID property.

27
00:02:02,230 --> 00:02:10,060
So back in the code, if we scroll up into our first while loop and find the if block for the program

28
00:02:10,060 --> 00:02:14,230
post type if post type equals program, do this.

29
00:02:14,620 --> 00:02:20,500
When we are building this array right after the permalink property, let's just say Kamma and we can

30
00:02:20,500 --> 00:02:22,450
make up whatever property name we want.

31
00:02:22,570 --> 00:02:30,520
I will just say ID and let's set it to equal get the ID, ok.

32
00:02:30,550 --> 00:02:35,410
Now if we save that and refresh postman perfect.

33
00:02:35,440 --> 00:02:40,470
Now any matching results for the program post type will include their ID number.

34
00:02:40,870 --> 00:02:47,110
Now 97 is the number that I faked and hardcoded and that's because I'm performing a search for biology.

35
00:02:47,110 --> 00:02:53,590
But up in the address bar, if I search for math, well, now within our program's array, we obviously

36
00:02:53,590 --> 00:02:55,310
see a different ID number.

37
00:02:55,630 --> 00:03:02,020
So now in that meta query that we are building, we have a real dynamic variable number that we can

38
00:03:02,020 --> 00:03:02,600
use.

39
00:03:02,950 --> 00:03:07,420
So back in the code, let's scroll down to find our new relationship query.

40
00:03:07,810 --> 00:03:14,260
And instead of hard coding this to ninety seven, let's delete this entirely and let's say a pair of

41
00:03:14,260 --> 00:03:22,600
single quotes with a double quote inside it and then add on the dynamic flexible ID number from our

42
00:03:22,600 --> 00:03:24,340
programs sub array.

43
00:03:24,820 --> 00:03:32,950
So let's look inside our results array for a summary named Programs and then let's look inside the first

44
00:03:32,950 --> 00:03:37,600
item in that array and then let's look for a property named ID.

45
00:03:38,080 --> 00:03:43,600
OK, now this will give us the value that we are looking for and then let's be sure to concatenate on

46
00:03:43,600 --> 00:03:48,070
or add on a pair of single quotes with a single double quote within them.

47
00:03:48,460 --> 00:03:56,140
Now if we save this and refresh postman, now when we search for math within the professor's array,

48
00:03:56,140 --> 00:04:00,190
perfect, we actually receive the one professor that teaches math.

49
00:04:00,520 --> 00:04:02,510
And this is exactly what we wanted.

50
00:04:02,800 --> 00:04:09,670
So this means our relationship query is now paying attention to whatever phrase a visitor searches for.

51
00:04:09,850 --> 00:04:14,770
So over on our front end, if we search for math, Dr. Rogerson.

52
00:04:15,040 --> 00:04:17,950
But if we search for biology, perfect.

53
00:04:18,580 --> 00:04:20,170
But we are not done just yet.

54
00:04:20,440 --> 00:04:23,410
We still want to make our code a little bit more flexible.

55
00:04:23,860 --> 00:04:25,040
Let me show you what I mean.

56
00:04:25,570 --> 00:04:33,040
So at the moment, this value that we are using is looking within the first item or the first post within

57
00:04:33,040 --> 00:04:34,330
the program's array.

58
00:04:34,420 --> 00:04:40,570
Now, this set up will work as intended in certain instances, but what happens if there are multiple

59
00:04:40,570 --> 00:04:42,340
programs in this array?

60
00:04:42,610 --> 00:04:49,090
So, for example, over in Postman, if someone searches for math right now, we've just got the one

61
00:04:49,090 --> 00:04:51,040
program named Math.

62
00:04:51,220 --> 00:04:58,630
But what if in the future, our university has one program named Basic Math and another program named

63
00:04:58,630 --> 00:04:59,800
Advanced Math?

64
00:05:00,130 --> 00:05:01,600
Or if someone searched for.

65
00:05:01,660 --> 00:05:08,500
Biology right now, we've just got the one program named biology, but what if in the future our university

66
00:05:08,500 --> 00:05:12,450
has marine biology and human biology?

67
00:05:12,730 --> 00:05:13,070
Right.

68
00:05:13,090 --> 00:05:19,580
So what I'm getting at here is what if the program's array contains multiple programs?

69
00:05:19,840 --> 00:05:25,780
Well, in that case, we wouldn't want to set this to only look within the first item or post in the

70
00:05:25,780 --> 00:05:26,210
array.

71
00:05:26,860 --> 00:05:33,760
So, for example, if someone searched for biology and we had both marine biology and human biology,

72
00:05:34,120 --> 00:05:38,490
maybe the first item in the array zero would be human biology.

73
00:05:38,500 --> 00:05:42,550
So this array as a whole, this filter would be looking for that.

74
00:05:42,790 --> 00:05:48,460
And then what we would want to do is just add on another array and filter so you could copy this entire

75
00:05:48,460 --> 00:05:52,720
array right after it, add a comma and then just paste it in again.

76
00:05:53,530 --> 00:05:58,780
And then instead of looking for zero, the first item we would look for the second item or the one or

77
00:05:58,780 --> 00:06:02,290
if we had a third biology program, we would add another filter.

78
00:06:02,290 --> 00:06:02,560
Right.

79
00:06:02,560 --> 00:06:07,640
So we'd say comma paste in the array again and change this to a two.

80
00:06:07,990 --> 00:06:14,680
So this way we are pulling in any professors that have a relationship to maybe human biology, marine

81
00:06:14,680 --> 00:06:17,960
biology and super duper advanced biology.

82
00:06:18,370 --> 00:06:25,000
Now it is important to point out that by default, when you have multiple arrays or filters like this,

83
00:06:25,150 --> 00:06:31,090
WordPress is default behavior is to try and make sure that all of these conditions are met.

84
00:06:31,420 --> 00:06:36,820
And in our case, we don't want to make sure that this and this and this is Matt.

85
00:06:36,850 --> 00:06:41,180
We're looking for this or this or this.

86
00:06:41,620 --> 00:06:48,160
So in order to tell WordPress that that's how we want to handle things right within our main Outr array

87
00:06:48,160 --> 00:06:48,510
here.

88
00:06:48,790 --> 00:07:01,240
So maybe right before the first inor array, we can just say relations equals or sure to include a comma

89
00:07:01,240 --> 00:07:01,490
here.

90
00:07:01,810 --> 00:07:06,470
Now, moving on, there's just one problem with our code, and it's a pretty big problem.

91
00:07:06,790 --> 00:07:12,000
This code only makes sense if there are exactly three programs.

92
00:07:12,310 --> 00:07:15,580
What if there were four or five or what if there was only one?

93
00:07:15,910 --> 00:07:18,100
Well, then this code wouldn't make any sense.

94
00:07:18,280 --> 00:07:24,460
And within the code here, we have no way of predicting how many programs there's going to be, which

95
00:07:24,460 --> 00:07:28,480
means we can't code in this ultra repetitive spelled out way.

96
00:07:28,840 --> 00:07:35,080
Instead, we need to create these arrays in a programmatic way that will work, whether there is one

97
00:07:35,080 --> 00:07:36,550
or 10 programs.

98
00:07:36,880 --> 00:07:42,820
So the way that I would do this is instead of spelling out the array manually right here, instead of

99
00:07:42,820 --> 00:07:49,420
that maybe right above this query, let's add a new line and let's create a variable that will be an

100
00:07:49,420 --> 00:07:52,990
array and then we can just pass that variable right here.

101
00:07:53,440 --> 00:07:56,250
So we could call this variable whatever we want.

102
00:07:56,470 --> 00:08:03,700
I'm going to call it programs meta query and set it to equal an array.

103
00:08:04,750 --> 00:08:07,390
Now, this array down here is basically our goal.

104
00:08:07,640 --> 00:08:10,000
We're just trying to create this programmatically.

105
00:08:10,360 --> 00:08:17,350
So we are still going to want the first thing in the array to be relation equals or so up within our

106
00:08:17,350 --> 00:08:18,180
new array.

107
00:08:18,550 --> 00:08:23,760
Let's say relation equals four.

108
00:08:24,160 --> 00:08:29,860
And for now, that's the only thing that I'm going to manually add on to the array when we are first

109
00:08:29,860 --> 00:08:30,610
creating it.

110
00:08:30,940 --> 00:08:35,890
Now our next step is to loop through the results program's array.

111
00:08:36,130 --> 00:08:42,360
And for each item in that array, we want to generate a filter array and added on to this array.

112
00:08:43,030 --> 00:08:48,280
I realized that sentence was probably impossible to follow because I said the word array 20 times,

113
00:08:48,880 --> 00:08:50,010
but let me show you what I mean.

114
00:08:50,380 --> 00:08:54,090
So right below this line, let's create a for each loop.

115
00:08:54,310 --> 00:09:01,000
So for each parentheses curly brackets within the parentheses, four for each.

116
00:09:01,030 --> 00:09:04,540
The first thing you give it is an array that you want to work with.

117
00:09:04,780 --> 00:09:13,630
In our case, that's the results program's SOUTHBURY and then still within the parentheses, right after

118
00:09:13,630 --> 00:09:19,180
that array that you select, you can say as and then you can make up a variable name.

119
00:09:19,180 --> 00:09:20,950
So I'm just going to say as item.

120
00:09:21,310 --> 00:09:21,760
All right.

121
00:09:21,760 --> 00:09:27,880
Now, within the curly brackets, as the foreach loop loops through this array, we can access the current

122
00:09:27,880 --> 00:09:30,280
item with this variable name.

123
00:09:30,640 --> 00:09:32,140
OK, so what do we want to do?

124
00:09:32,170 --> 00:09:35,250
We want to add on to this new array that we're building.

125
00:09:35,590 --> 00:09:39,830
So within our for each loop, let's say, array push.

126
00:09:40,930 --> 00:09:44,850
This is the function that lets you add on to an existing array.

127
00:09:45,100 --> 00:09:46,420
We give it to arguments.

128
00:09:46,420 --> 00:09:52,630
The first is the array that you want to add on to, which in our case is our brand new programs, meta

129
00:09:52,630 --> 00:09:56,410
query programs, meta query.

130
00:09:57,040 --> 00:10:01,510
And then the second argument is what you want to add on to the array, which.

131
00:10:01,550 --> 00:10:06,650
In our case, is just one of these three filter arrays, so it doesn't matter which one, just grab

132
00:10:06,650 --> 00:10:07,250
any of them.

133
00:10:07,850 --> 00:10:08,540
Copy that.

134
00:10:09,080 --> 00:10:12,590
Back up in our array, push for the second argument pasted in.

135
00:10:13,370 --> 00:10:17,090
And now the important part is the value that we want to search for.

136
00:10:17,270 --> 00:10:22,700
So let's leave the quotes and the period to add on and leave them at the end here as well.

137
00:10:22,700 --> 00:10:30,050
But let's delete this entire inner chunk and the value that we want to search for is item, which is

138
00:10:30,050 --> 00:10:33,050
the current post that's been looped to at this moment.

139
00:10:33,440 --> 00:10:37,070
And then we want to look inside that for the property of ID.

140
00:10:37,790 --> 00:10:38,270
All right.

141
00:10:38,270 --> 00:10:44,480
Now, at this point, we have successfully rebuilt this array and we've done so in a programmatic way

142
00:10:44,660 --> 00:10:48,080
that will work whether there's one or twenty programs.

143
00:10:48,560 --> 00:10:53,420
So down within our query, we can delete this entire Outr array.

144
00:10:55,870 --> 00:11:01,900
And instead, let's just say medical theory equals the name of that brand new array we just built,

145
00:11:02,470 --> 00:11:10,150
which is programs, medical query, and if we go ahead and save this and test out postman again.

146
00:11:12,490 --> 00:11:19,450
A search of biology still gives us what we would expect, and if I search for math, perfect, we just

147
00:11:19,450 --> 00:11:20,900
received Dr. Rogosin.

148
00:11:21,310 --> 00:11:26,650
So our code is working as expected, and now we can rest easily knowing that it will work even if we

149
00:11:26,650 --> 00:11:29,660
have more and more programmed names in the future.

150
00:11:29,980 --> 00:11:37,120
However, if I perform a search for just gibberish that shouldn't have any results, we see that that

151
00:11:37,120 --> 00:11:39,220
returns all professors.

152
00:11:39,490 --> 00:11:42,880
So clearly there's an issue with their code that we need to fix.

153
00:11:43,450 --> 00:11:48,840
And the issue has to do with our new query that we created using the WP query class.

154
00:11:49,150 --> 00:11:54,550
Basically, the issue is if the current search phrase doesn't return, any program results.

155
00:11:54,760 --> 00:12:00,940
That means that we are basically telling the meta query to be empty because this array is created by

156
00:12:00,940 --> 00:12:04,450
looping through any and all program results.

157
00:12:04,750 --> 00:12:11,440
And if meta query is empty, we're basically just saying with this query, give us all professor posts,

158
00:12:11,680 --> 00:12:13,870
which is obviously not what we want.

159
00:12:13,900 --> 00:12:20,800
So to fix this, here's what I'm going to do right above this line where we create our meta query array

160
00:12:21,130 --> 00:12:22,030
right above that.

161
00:12:22,030 --> 00:12:31,150
Let's write an if statement and for the condition, let's say only if results programs exists.

162
00:12:31,330 --> 00:12:35,960
So only if it's not empty do we want to do this and what do we want to do?

163
00:12:36,340 --> 00:12:39,580
Well, let's just cut and paste all of this code.

164
00:12:39,730 --> 00:12:45,820
So beginning with the array that we are creating and selecting all the way down right before the return

165
00:12:45,820 --> 00:12:50,670
line, I'm going to cut that and then just paste it to live within the if statement.

166
00:12:51,190 --> 00:12:51,600
Cool.

167
00:12:51,610 --> 00:12:58,360
So now all of the code that we wrote in this lesson will only be executed if there are indeed programs

168
00:12:58,360 --> 00:13:00,350
to try and find a relationship with.

169
00:13:00,670 --> 00:13:08,170
So if we save that and back in postmen, if I try this gibberish search again, perfect zero results.

170
00:13:08,500 --> 00:13:15,060
And if I search for math again, Dr. Furguson, which means our code is still working as expected.

171
00:13:15,340 --> 00:13:21,430
Now, before we bring this lesson to a close, I do want to point out a flaw with our search, logic

172
00:13:21,430 --> 00:13:22,000
and code.

173
00:13:22,270 --> 00:13:25,270
And then I will also show you a quick fix to the problem.

174
00:13:25,480 --> 00:13:31,540
It's actually easier to show you visually the problem instead of trying to explain it just with words.

175
00:13:31,750 --> 00:13:35,860
But check this out over in my WordPress admin dashboard.

176
00:13:36,670 --> 00:13:45,610
If I go into programs and if I go into biology, let's imagine I want to update the main body text.

177
00:13:46,240 --> 00:13:53,720
So maybe I would say the biology program works closely with the math program.

178
00:13:54,280 --> 00:14:00,360
The key here is that I mentioned the name of another program within this main content field.

179
00:14:00,370 --> 00:14:00,570
Right.

180
00:14:00,580 --> 00:14:02,340
We've got the word math in here now.

181
00:14:02,770 --> 00:14:11,140
So if I save that now, if anyone on the front end searches for math, well, unfortunately, it's going

182
00:14:11,140 --> 00:14:15,550
to pull in biology and anything that has a relationship to biology.

183
00:14:15,880 --> 00:14:17,470
And this is not what we want.

184
00:14:17,600 --> 00:14:23,440
If someone searches for math, there's no reason we should show them the biology program or biology

185
00:14:23,440 --> 00:14:24,250
professors.

186
00:14:24,250 --> 00:14:31,780
So we need to adjust things so that our search logic only searches the title field when it comes to

187
00:14:31,780 --> 00:14:32,710
programs.

188
00:14:32,980 --> 00:14:38,260
It's OK to search the main content field if it's a blog post or a page.

189
00:14:38,500 --> 00:14:44,110
But when it comes to programs, we don't need to search the main content field because it's going to

190
00:14:44,110 --> 00:14:48,420
pick up on any keywords in here and probably throw a bunch of false positives.

191
00:14:48,760 --> 00:14:53,410
Now, in order to customize our search logic like this, we have two main options.

192
00:14:53,680 --> 00:14:58,270
Option number one would be to write a bit of our own handcrafted sequel.

193
00:14:58,510 --> 00:14:58,710
Right.

194
00:14:58,780 --> 00:15:02,980
We could sort of hold WordPress as hand as it talks to our MySQL database.

195
00:15:03,250 --> 00:15:10,540
But I don't ever like to customize the default WordPress SQL statements unless I absolutely 100 percent

196
00:15:10,540 --> 00:15:11,350
need to.

197
00:15:11,710 --> 00:15:18,490
So our second option and the option that I'm going to use is we can create an advanced custom field

198
00:15:19,030 --> 00:15:25,870
that looks exactly like this main body content field and use that for programs instead of this default

199
00:15:25,870 --> 00:15:26,410
field.

200
00:15:26,680 --> 00:15:31,750
And this will work because WordPress will not search within that advanced custom field.

201
00:15:32,110 --> 00:15:36,880
So let me show you what I mean and how I would accomplish this over in the sidebar.

202
00:15:36,880 --> 00:15:40,060
Let's click on Custom Fields down here towards the bottom.

203
00:15:41,390 --> 00:15:47,660
And let's go ahead and create a brand new field group, so ad new, we could name it whatever we want,

204
00:15:47,660 --> 00:15:51,910
but I'm going to call it main body content.

205
00:15:52,310 --> 00:15:54,440
Then let's go ahead and create a new field.

206
00:15:54,450 --> 00:15:55,850
So click add field.

207
00:15:56,420 --> 00:16:00,500
I will title it main body content.

208
00:16:01,250 --> 00:16:07,070
As soon as you click out of that field, they will automatically generate this name for you all lowercase

209
00:16:07,070 --> 00:16:09,380
with underscores instead of spaces.

210
00:16:09,650 --> 00:16:12,320
And then the important part is for field type.

211
00:16:12,320 --> 00:16:16,760
Instead of just text, let's choose WYSIWYG editor.

212
00:16:17,060 --> 00:16:18,500
That abbreviation stands for.

213
00:16:18,500 --> 00:16:19,970
What you see is what you get.

214
00:16:21,800 --> 00:16:29,300
The rest of these default values are OK and we can scroll down until we see this location box and let's

215
00:16:29,300 --> 00:16:36,110
say only show this field group if post type is equal to and then let's choose program.

216
00:16:37,450 --> 00:16:43,930
OK, and before we save this, let's be sure to go down to the options box and for the position option

217
00:16:43,930 --> 00:16:50,080
instead of normal, let's choose high after title that will make sure that this field is positioned

218
00:16:50,080 --> 00:16:53,980
at the very top of the author's screen right below the title field.

219
00:16:54,190 --> 00:16:55,730
So that way it's up at the top.

220
00:16:55,750 --> 00:16:59,500
Very easy to find, just like the default content field.

221
00:16:59,800 --> 00:17:02,470
So now I'm going to scroll up and choose, publish.

222
00:17:03,880 --> 00:17:10,930
And now if I go back into programs and choose to edit the biology program, here is our brand new custom

223
00:17:10,930 --> 00:17:11,470
field.

224
00:17:11,770 --> 00:17:15,550
And this is the default WordPress content field.

225
00:17:15,880 --> 00:17:22,300
So I'm just going to cut and paste the content out of that field and into our new custom field.

226
00:17:22,510 --> 00:17:24,100
And then if I save that.

227
00:17:26,180 --> 00:17:33,560
The WordPress search logic will no longer be able to find the word math within this Buyology post because

228
00:17:33,560 --> 00:17:36,790
WordPress is only going to look within this default field.

229
00:17:37,070 --> 00:17:43,460
So, for example, back on the front end, if I search for math now, perfect, we're back to normal

230
00:17:43,460 --> 00:17:45,520
and we don't have any false positives.

231
00:17:45,830 --> 00:17:50,380
However, we do need to edit our template for individual program pages.

232
00:17:50,750 --> 00:17:53,510
We need to tell the template to use this new field.

233
00:17:53,510 --> 00:17:53,840
Right.

234
00:17:53,860 --> 00:18:02,000
So, for example, if I go to programs and then biology, we don't see the main body content here because

235
00:18:02,000 --> 00:18:04,910
it's still using that emptied out default field.

236
00:18:05,190 --> 00:18:13,460
So to fix that, all we need to do in our theme folder is jump into single program dot p and write where

237
00:18:13,460 --> 00:18:15,270
you see the content.

238
00:18:15,740 --> 00:18:17,810
This is what would get the default field.

239
00:18:17,810 --> 00:18:21,620
Let's replace that with the field.

240
00:18:21,890 --> 00:18:25,990
And we named it main body content.

241
00:18:26,600 --> 00:18:28,940
Give that a save refresh.

242
00:18:29,750 --> 00:18:30,440
Perfect.

243
00:18:30,800 --> 00:18:34,980
Now, the one other thing we need to take care of is back on the author screen.

244
00:18:35,390 --> 00:18:37,150
This is super confusing.

245
00:18:37,460 --> 00:18:39,770
We don't need to content fields.

246
00:18:39,770 --> 00:18:44,660
So if this is the one we're using, we should just entirely hide the default one.

247
00:18:44,990 --> 00:18:47,600
Now, luckily, it's very easy to do that.

248
00:18:47,810 --> 00:18:53,240
We just need to edit the code that we wrote when we first registered the program post type.

249
00:18:54,170 --> 00:19:01,400
So in our text editor, not within our theme folder, but within our You Must Use Plugins folder.

250
00:19:02,150 --> 00:19:08,840
If we jump into that file, if we scroll down a bit and find the register post type for the program,

251
00:19:08,840 --> 00:19:14,660
type within the supports equals array, we can just remove Ed.

252
00:19:14,810 --> 00:19:17,870
Ed is the main default content field.

253
00:19:18,080 --> 00:19:24,620
So if I just delete that and save this, then back in our admin perfect.

254
00:19:24,650 --> 00:19:30,560
That default content field is completely gone and that's going to bring this lesson to a close.

255
00:19:30,740 --> 00:19:35,030
In our next lesson, we will finally finish our search overlay.

256
00:19:35,450 --> 00:19:42,200
In the next video, we are going to work on displaying campuses and events based on a relationship they

257
00:19:42,200 --> 00:19:43,580
might have to a program.

258
00:19:43,820 --> 00:19:46,190
Let's keep things rolling and I will see you then.
