WEBVTT
1
00:00:02.240 --> 00:00:03.230
Hello, everyone.

2
00:00:03.620 --> 00:00:10.030
In this lesson, we're going to learn how to create a new database table, let's jump into the action.

3
00:00:10.550 --> 00:00:16.940
So in our previous lesson, we set up this pet adoption area and it's using custom post types.

4
00:00:17.630 --> 00:00:23.210
Now, I don't want us to delete this custom post type plugin because I want you to have it around and

5
00:00:23.210 --> 00:00:26.870
available for testing and comparing speeds against.

6
00:00:27.350 --> 00:00:28.550
So we don't need to delete it.

7
00:00:28.550 --> 00:00:31.160
But let's go deactivate this plugin.

8
00:00:31.490 --> 00:00:37.460
And that way we can start creating a brand new plug in that's recreating the same functionality but

9
00:00:37.460 --> 00:00:40.040
using a custom database table.

10
00:00:40.310 --> 00:00:41.420
So do this with me right now.

11
00:00:41.420 --> 00:00:43.400
Let's go deactivate that plugin.

12
00:00:43.400 --> 00:00:49.370
So in the admin sidebar under plug ins, I'm just going to scroll through the list and look for the

13
00:00:49.370 --> 00:00:53.870
one called Pet Adoption Custom Post Type and deactivated.

14
00:00:54.860 --> 00:00:55.160
Cool.

15
00:00:55.160 --> 00:00:58.100
So it's always available for you to reactivate later on.

16
00:00:58.100 --> 00:01:04.190
If you want to compare the speeds of the custom post type approach with the custom table approach.

17
00:01:04.610 --> 00:01:08.800
Before we start working on our new plug in, let's review our goal really quick.

18
00:01:09.290 --> 00:01:15.350
So if I look at my database, we've seen that the database has one table for posts, another for post

19
00:01:15.350 --> 00:01:15.890
meta.

20
00:01:16.220 --> 00:01:22.700
Well, in this video, we're going to learn how to create an entirely separate table called pets.

21
00:01:22.910 --> 00:01:29.120
And the structure of that database table is going to be optimized or designed with pets in mind.

22
00:01:29.540 --> 00:01:31.160
So let's go ahead and get started.

23
00:01:31.550 --> 00:01:36.080
However, at this point in the course, we've already created many plug ins together.

24
00:01:36.110 --> 00:01:41.630
So to save ourselves from a lot of boilerplate typing, that has nothing to do with databases.

25
00:01:41.930 --> 00:01:48.980
I actually want you to download a starter zip file for this lesson so you'll find a downloadable resource

26
00:01:48.980 --> 00:01:53.150
associated with the lesson called new database table dot zip.

27
00:01:53.450 --> 00:01:58.640
So you can pause the video if you need to, but go ahead and download this file and then extract it

28
00:01:59.060 --> 00:02:00.890
directly inside the new folder.

29
00:02:00.890 --> 00:02:05.630
There should be a text file, a PDF file and an ANC folder.

30
00:02:05.930 --> 00:02:09.950
OK, and we just want to move this into our WordPress installation folder.

31
00:02:10.340 --> 00:02:15.470
So you're looking for the WordPress folder where you see WP content inside there.

32
00:02:15.470 --> 00:02:22.160
We're looking in the plugins folder and then I'm just going to drag this new database table folder to

33
00:02:22.160 --> 00:02:25.520
sit alongside our other plugins while we're at it.

34
00:02:25.530 --> 00:02:31.000
Now that it's in the correct location, let's open this folder up in VST code, OK?

35
00:02:31.070 --> 00:02:33.170
And we'll dig into the code very shortly.

36
00:02:33.170 --> 00:02:35.830
But for now, let's go activate this new plugin.

37
00:02:36.230 --> 00:02:42.020
So back in the admin dashboard, you can refresh the plugin screen and now we're looking down towards

38
00:02:42.020 --> 00:02:42.470
the bottom.

39
00:02:42.470 --> 00:02:49.580
Maybe so now we have two pet adoption plug ins, but one is custom post type and one is new database

40
00:02:49.580 --> 00:02:50.030
table.

41
00:02:50.570 --> 00:02:56.030
This way you can activate and deactivate and sort of switch between them if you ever want to compare

42
00:02:56.030 --> 00:02:58.700
the speeds or do a speed test between the two.

43
00:02:59.180 --> 00:03:03.680
But let's go ahead and activate new DB table and are plug in.

44
00:03:03.680 --> 00:03:05.360
Doesn't really do anything yet.

45
00:03:05.630 --> 00:03:07.130
We need to bring it to life.

46
00:03:07.130 --> 00:03:08.600
So let's go look at the code.

47
00:03:08.960 --> 00:03:11.030
Let's jump into the main file.

48
00:03:11.030 --> 00:03:17.270
So new database table that for the most part, this is just boilerplate code that we've seen before.

49
00:03:17.600 --> 00:03:23.780
But one new detail that I do want to draw your attention to is this first add action line.

50
00:03:23.900 --> 00:03:26.330
And I want you to pay attention to this hook name.

51
00:03:26.720 --> 00:03:28.430
This hook is super useful.

52
00:03:28.580 --> 00:03:31.820
It will only run when the plugin gets activated.

53
00:03:32.090 --> 00:03:33.830
It'll just run that one time now.

54
00:03:33.830 --> 00:03:39.050
Yes, you can deactivate the plug in and then when you reactivate the plug in, this will run again.

55
00:03:39.290 --> 00:03:44.150
But the point is you can have code in here that isn't just going to keep running constantly.

56
00:03:44.480 --> 00:03:47.000
So it's simply activate, underscore.

57
00:03:47.180 --> 00:03:49.730
And then from this point forward, it's dynamic.

58
00:03:49.730 --> 00:03:55.700
So it's whatever the name of your plug in folder is and then the name of your main file.

59
00:03:56.030 --> 00:04:01.250
And then you can see I made up a method name of on activate that will run when this fires.

60
00:04:01.580 --> 00:04:05.090
So let's talk about why this is useful in our current situation.

61
00:04:05.330 --> 00:04:12.410
So sure, we might want to load data from our database table all the time or save new data to it all

62
00:04:12.410 --> 00:04:12.950
the time.

63
00:04:13.340 --> 00:04:19.310
But we only need to create the skeleton or structure or shape of that table once.

64
00:04:19.790 --> 00:04:25.100
So when we're saying how many columns there should be, what the name of each column is and what type

65
00:04:25.100 --> 00:04:30.650
of data at stores, we don't need to keep running that initial setup code over and over again.

66
00:04:30.830 --> 00:04:33.290
We can just run it when the plugin is activated.

67
00:04:33.590 --> 00:04:37.700
So within this empty on activate function, let's do that.

68
00:04:38.210 --> 00:04:46.730
So inside this function, let's use a WordPress function called DBI and then uppercase Delta semicolon

69
00:04:46.730 --> 00:04:47.360
at the end.

70
00:04:47.840 --> 00:04:53.030
Inside the parentheses, we just give it a string of text and we just give it a sequel statement to

71
00:04:53.030 --> 00:04:54.320
create a new table.

72
00:04:54.720 --> 00:05:00.440
This is a super useful function that WordPress gives to us because if it runs again in the future,

73
00:05:00.620 --> 00:05:01.720
it isn't going to wipe.

74
00:05:01.810 --> 00:05:07.330
About the table, we're not going to lose any data, it won't delete the table and then recreate it

75
00:05:07.330 --> 00:05:12.350
a second time instead, if we think about what the word delta means, right, it's the change.

76
00:05:12.730 --> 00:05:19.210
So if we ever deactivated our plug in and then reactivated again, WordPress is smart enough to compare

77
00:05:19.210 --> 00:05:25.060
the difference between the way that our table is currently in the actual database compared to what we're

78
00:05:25.060 --> 00:05:25.630
telling it.

79
00:05:25.630 --> 00:05:31.630
It should be here now before we actually write the sequel command to create a new table, I first need

80
00:05:31.630 --> 00:05:36.880
to let you know that unfortunately we can't just access DB Delta directly like this.

81
00:05:37.250 --> 00:05:42.070
So DB Delta is not just always available like this, but maybe on the line right before that.

82
00:05:42.070 --> 00:05:50.260
We can simply say require once parentheses, semicolon, and now we can just require a WordPress system

83
00:05:50.260 --> 00:05:53.770
file that will indeed make DB Delta available.

84
00:05:53.770 --> 00:06:08.080
So we can say ABB's path dot concatenate on a string WP dash admin slash includes slash upgrade dot

85
00:06:08.470 --> 00:06:08.950
HP.

86
00:06:09.730 --> 00:06:14.410
Before we go any further, I do want to let you know that the first time I saw this, I thought that

87
00:06:14.410 --> 00:06:19.840
it seemed like a gimmick or a hack or like a weird unofficial way of doing things.

88
00:06:19.840 --> 00:06:25.840
But trust me, in the official WordPress documentation, this is how they demonstrate how to create

89
00:06:25.840 --> 00:06:32.050
a custom table anyways inside the DB Delta parentheses inside the string here, let's actually start

90
00:06:32.050 --> 00:06:34.750
writing our sequel command to create a table.

91
00:06:35.050 --> 00:06:43.930
So we'll just say create an all uppercase table in all uppercase and let's Naimark table lowercase pets'

92
00:06:44.170 --> 00:06:46.960
will actually circle back to the table name in just a moment.

93
00:06:46.960 --> 00:06:50.020
But for now, to keep things simple, let's go with this.

94
00:06:50.470 --> 00:06:55.780
Let's have a space and then a pair of parentheses and then in between the parentheses we need to dropdown.

95
00:06:56.440 --> 00:07:00.160
OK, now we just start spelling out the columns for our table.

96
00:07:00.580 --> 00:07:07.510
Let's have the first column be called IDE and it will use the data type of big int parentheses will

97
00:07:07.510 --> 00:07:10.090
say twenty unsigned.

98
00:07:10.090 --> 00:07:17.680
Let's say that it cannot be left empty so not null and we want it to auto increment this way.

99
00:07:17.680 --> 00:07:24.070
You and I won't need to manually make up a numeric ID number for each part, let's say comma and then

100
00:07:24.070 --> 00:07:26.620
you do need to have a new line for each column.

101
00:07:26.620 --> 00:07:31.090
So let's have another column called Birth Year.

102
00:07:31.900 --> 00:07:35.530
It can be a small integers or small int five.

103
00:07:35.830 --> 00:07:41.770
It's required so not null and it can have a default value of zero comma.

104
00:07:41.950 --> 00:07:44.560
But I have another column called Pet Wait.

105
00:07:45.130 --> 00:07:48.280
It can be a small integer so small int five.

106
00:07:48.970 --> 00:07:54.370
We don't want it to be able to be left blank and it can have default of zero as well.

107
00:07:54.370 --> 00:07:57.340
Comma, let's have fav food.

108
00:07:58.030 --> 00:08:03.880
This will be of a type var car with the limit of 60 characters not.

109
00:08:05.200 --> 00:08:09.850
Let's have a default of just an empty string comma to save typing.

110
00:08:09.850 --> 00:08:15.190
Let's actually just copy and paste and duplicate this fav foodline because the next four are going to

111
00:08:15.190 --> 00:08:16.210
be almost identical.

112
00:08:16.210 --> 00:08:18.700
So let's just copy and paste that a few times.

113
00:08:19.060 --> 00:08:26.800
So after Fey food will have fav Hobbie after that will have fav color.

114
00:08:28.030 --> 00:08:36.610
After that let's have pet name and then finally let's have Species' at the end of this line after the

115
00:08:36.940 --> 00:08:43.270
let's drop down and have another line and say primary key and then this seems really unintuitive or

116
00:08:43.270 --> 00:08:47.920
weird but you need to have not one but two spaces after the word key here.

117
00:08:47.920 --> 00:08:52.210
So key and then one, two spaces parentheses.

118
00:08:52.420 --> 00:08:57.910
And we're just saying that the ID column is our main way of indexing or having a key for this table.

119
00:08:58.480 --> 00:09:02.560
Now, if you're anything like me, you might be wondering how in the world were we supposed to know

120
00:09:02.560 --> 00:09:07.570
to have two spaces here, or how are we supposed to know that each one of the columns needs to be on

121
00:09:07.570 --> 00:09:08.500
its own line?

122
00:09:08.920 --> 00:09:11.890
Well, we can look at the official WordPress documentation.

123
00:09:12.220 --> 00:09:15.760
So the codex of WordPress on creating or updating a table.

124
00:09:15.970 --> 00:09:18.580
And you can see they have all of these different rules here.

125
00:09:18.880 --> 00:09:23.770
So they're letting you know that the DB Delta function is very sensitive and very particular.

126
00:09:24.040 --> 00:09:25.720
So here are a review of the rules.

127
00:09:25.960 --> 00:09:28.300
Each field needs to be on its own line.

128
00:09:28.600 --> 00:09:33.970
You must have two spaces between the words primary key and the definition of your primary key.

129
00:09:34.270 --> 00:09:38.350
You must use the word key rather than its synonym index, so on and so forth.

130
00:09:38.800 --> 00:09:44.050
In other words, if you didn't type this out exactly like me and your code doesn't work in a couple

131
00:09:44.050 --> 00:09:49.360
of minutes here, when we test this out, you might need to go back with an extreme attention to detail.

132
00:09:49.540 --> 00:09:55.030
Or you can always download my files, my finished files at the end of this lesson.

133
00:09:55.450 --> 00:09:57.040
Anyways, let's keep moving forward.

134
00:09:57.040 --> 00:09:59.200
We're almost ready to test this code out.

135
00:09:59.620 --> 00:10:01.510
So right after the primary key line, we.

136
00:10:01.560 --> 00:10:09.480
Do not need a comma, however, after this closing parentheses, but before the closing quote, so space

137
00:10:09.480 --> 00:10:14.570
right here and we need to tell sequel which character set we're using now.

138
00:10:14.580 --> 00:10:16.680
This is not a value that we want to assume.

139
00:10:16.680 --> 00:10:18.180
And just hard code right here.

140
00:10:18.330 --> 00:10:21.420
It's a dynamic value that we want to pull from WordPress.

141
00:10:21.750 --> 00:10:27.420
But for now, just as a placeholder, let's say, charoset or just any placeholder text that we can

142
00:10:27.420 --> 00:10:33.160
circle back to, OK, and then finally end that with a semicolon right before the closing quotes.

143
00:10:33.180 --> 00:10:35.710
So we'll circle back to what this value should be.

144
00:10:36.150 --> 00:10:41.640
Right now, we're going to not only learn how to make this dynamic, but also the table name dynamic,

145
00:10:41.940 --> 00:10:50.400
because if we go look at our database in advance, notice that each table has a prefix of WP underscore

146
00:10:51.210 --> 00:10:51.450
now.

147
00:10:51.450 --> 00:10:58.410
Yes, WP underscore is the default or standard prefix, but each installation of WordPress can customize

148
00:10:58.410 --> 00:11:00.900
that when you set up WordPress the first time.

149
00:11:01.260 --> 00:11:07.260
So again, this value of WP underscore is not something that we want to assume in hard code.

150
00:11:07.500 --> 00:11:11.480
So we would not just want to say WP underscore Pets' here.

151
00:11:12.030 --> 00:11:14.430
So let me get rid of that underscore here.

152
00:11:14.550 --> 00:11:20.370
In order to find those dynamic values of the database prefix and the character set, we need to use

153
00:11:20.400 --> 00:11:23.990
the global object called WP DB.

154
00:11:25.110 --> 00:11:30.720
Now, we absolutely could access that here within this function, but I have a hunch that we're going

155
00:11:30.720 --> 00:11:34.170
to need values from it elsewhere in our class here.

156
00:11:34.170 --> 00:11:34.420
Right.

157
00:11:34.440 --> 00:11:36.220
Maybe in some of our other functions.

158
00:11:36.630 --> 00:11:44.250
So what I like to do is store those dynamic values up in our constructor function on this object of

159
00:11:44.250 --> 00:11:45.070
our class.

160
00:11:45.540 --> 00:11:46.610
Let me show you what I mean.

161
00:11:46.620 --> 00:11:52.470
So within our construct function, let's add a new line inside that and let's say we're going to use

162
00:11:52.470 --> 00:11:58.560
the global dollar sign, WP, DB semicolon, OK?

163
00:11:58.560 --> 00:12:03.720
And now we can look inside this for both the database prefix and the character set.

164
00:12:04.130 --> 00:12:05.430
So do this on a new line.

165
00:12:05.430 --> 00:12:12.180
Let's say dollar sign this, go inside it with dash greater than and let's just make up a property name.

166
00:12:12.180 --> 00:12:13.620
We can call it anything.

167
00:12:13.620 --> 00:12:21.840
I'll call it character center care set and set that to equal dollar sign wp db.

168
00:12:22.290 --> 00:12:29.630
Look inside that dash greater than get care set coalgate parentheses to call that semicolon.

169
00:12:29.940 --> 00:12:35.340
So now we can access this property from anywhere in any of the methods in our class.

170
00:12:35.700 --> 00:12:39.570
Let's do the same thing for the database table prefix so we can say this.

171
00:12:40.950 --> 00:12:47.520
Let's make up a property name, I'll call it a table name and right here I'll just combine the prefix

172
00:12:47.520 --> 00:12:50.340
with Pets' so we don't have to ever spell that out again.

173
00:12:50.340 --> 00:12:59.760
So I'll just say dollar sign wp db look inside it for prefix and then I'm going to concatenate on just

174
00:12:59.940 --> 00:13:03.990
string of text of pets semicolon at the end there.

175
00:13:04.320 --> 00:13:08.010
OK, now let's just go use these two new properties down in our code.

176
00:13:08.010 --> 00:13:12.720
So if we go back down into on activate let's hollow out the table name.

177
00:13:12.730 --> 00:13:21.210
So instead of pets this would now be dollar sign this look inside it for table name and then let's do

178
00:13:21.210 --> 00:13:23.160
the same thing for character set down here.

179
00:13:23.160 --> 00:13:26.280
So leave the semicolon but we'll say a dollar.

180
00:13:26.280 --> 00:13:27.300
Sign this.

181
00:13:27.300 --> 00:13:30.570
Look inside it for care set.

182
00:13:31.200 --> 00:13:34.110
Let's go ahead and save this and test it out.

183
00:13:34.410 --> 00:13:38.610
Now remember, this code is only going to run when you're plug in is activated.

184
00:13:38.940 --> 00:13:46.140
So to truly test this out, we need to go into the admin dashboard and deactivate our pet adoption new

185
00:13:46.140 --> 00:13:53.040
DB table deactivated and then go back down and just reactivate that exact same plugin so that action

186
00:13:53.040 --> 00:13:54.120
hook will fire.

187
00:13:54.660 --> 00:13:59.790
And now to see if that code was successful or not, just go into ATM and refresh.

188
00:13:59.790 --> 00:14:05.130
And you're looking in this left hand side bar for a new table named WP.

189
00:14:05.130 --> 00:14:06.540
Underscore Pets'.

190
00:14:07.020 --> 00:14:12.750
If you don't see this, you might just want to download my reference file at the end of this video and

191
00:14:12.750 --> 00:14:15.450
you can either use it or compare your code against it.

192
00:14:15.690 --> 00:14:18.030
But as you can see, it should be working now.

193
00:14:18.180 --> 00:14:20.520
And if we click on that table, perfect.

194
00:14:20.520 --> 00:14:22.710
It has all of the columns that we want.

195
00:14:23.100 --> 00:14:28.080
So now let's practice actually adding a pet into this table.

196
00:14:28.320 --> 00:14:32.580
Now, we don't currently have a form that admin users could fill out and submit.

197
00:14:32.970 --> 00:14:34.740
We'll add that in a future lesson.

198
00:14:34.740 --> 00:14:41.280
But for now, just as a test to add something into this table back in our code, let's just use this

199
00:14:41.580 --> 00:14:44.010
on admin refresh function.

200
00:14:44.370 --> 00:14:51.060
So up towards the top, we have this action admin head and we're calling that method on admin refresh.

201
00:14:51.060 --> 00:14:56.070
So this will run any time you reload or refresh the admin side of WordPress.

202
00:14:56.400 --> 00:15:01.320
So just as a test within this function, let's try to insert a record into our.

203
00:15:01.370 --> 00:15:09.260
Table, so in this function, I'll begin by saying Global Dollar Sign WPE Debe, OK, and now we can

204
00:15:09.260 --> 00:15:20.720
actually use WP DB so a dollar sign DB look inside it for a method named insert parentheses semicolon.

205
00:15:20.900 --> 00:15:22.990
And now we just give this to arguments.

206
00:15:23.000 --> 00:15:28.030
So the first argument is the table name that you want to insert a record into.

207
00:15:28.340 --> 00:15:34.310
So we know that that's WP underscore Pets', but we don't want a hard code that so we can just pull

208
00:15:34.310 --> 00:15:38.110
from that variable or property we set on our overall class.

209
00:15:38.120 --> 00:15:43.510
So that would just be dollar sign this look inside it for table name.

210
00:15:44.150 --> 00:15:49.940
OK, then the second argument, we just give it an array and this is the actual data that you'd want

211
00:15:49.940 --> 00:15:50.620
to save.

212
00:15:51.080 --> 00:15:55.310
Now, you could type this out if you want to, but I'm going to paste something in that you won't have

213
00:15:55.310 --> 00:15:56.300
in your clipboard.

214
00:15:56.630 --> 00:16:03.800
But essentially you just give it an array where each item has a matching name to each database column

215
00:16:03.800 --> 00:16:04.790
that we created.

216
00:16:05.180 --> 00:16:07.400
So you could spell this out manually.

217
00:16:07.400 --> 00:16:13.520
Let me control Z, your command Z undo, however, just for the purpose of populating our table.

218
00:16:13.640 --> 00:16:17.480
And so you don't have to type out a bunch of boilerplate example array code.

219
00:16:17.810 --> 00:16:21.140
This is the entire point of my Generate Pett function.

220
00:16:21.620 --> 00:16:25.040
So for the second argument, just call generate Pett.

221
00:16:25.370 --> 00:16:31.280
If you're curious what this function is doing, you can look inside the ANC folder, jump into the file

222
00:16:31.280 --> 00:16:32.420
called Generate Pett.

223
00:16:33.200 --> 00:16:39.950
And essentially all this function does, when you call it is it returns an array with randomly generated

224
00:16:40.430 --> 00:16:43.580
birthweight name species' color food and Hobbie.

225
00:16:44.060 --> 00:16:44.390
Cool.

226
00:16:44.420 --> 00:16:47.480
So this way we can just reuse that again and again as a test.

227
00:16:48.010 --> 00:16:53.690
OK, at this point let's go ahead and save this file and then to test it out, we just go into the admin

228
00:16:53.690 --> 00:16:57.460
dashboard and reload, OK?

229
00:16:57.530 --> 00:16:59.180
And then to check to see if it did anything.

230
00:16:59.180 --> 00:17:05.600
We can go back into administrator and click select data for our pets table and perfect.

231
00:17:05.600 --> 00:17:07.040
So its randomly generated.

232
00:17:07.040 --> 00:17:08.750
You and I will have a very different pet.

233
00:17:08.750 --> 00:17:16.940
But you can see mine is a hedgehog that was born in two thousand eight with a favorite hobby of chasing

234
00:17:16.940 --> 00:17:17.450
stuff.

235
00:17:17.660 --> 00:17:20.300
So to test that out again you can just keep refreshing.

236
00:17:20.300 --> 00:17:23.210
So I'll refresh a second time and a third time.

237
00:17:23.540 --> 00:17:24.980
Go back into administration now.

238
00:17:24.980 --> 00:17:25.820
I should have three.

239
00:17:26.000 --> 00:17:26.330
Yep.

240
00:17:26.840 --> 00:17:28.940
So I have two hedgehogs and one chicken.

241
00:17:29.270 --> 00:17:35.210
Now you might be thinking, what if we want to populate this table with 100000 pet records?

242
00:17:35.510 --> 00:17:39.890
Well, we definitely don't want to have to refresh the admin one hundred thousand times.

243
00:17:39.890 --> 00:17:41.750
So let me show you what we can do.

244
00:17:42.140 --> 00:17:48.110
If we look down towards the very bottom of this file, you'll notice that I've already created a function

245
00:17:48.110 --> 00:17:50.750
for us called Populate Fast.

246
00:17:51.110 --> 00:17:54.230
Now, this portion of the lesson is not meant to be educational.

247
00:17:54.440 --> 00:17:55.250
Do not worry.

248
00:17:55.250 --> 00:18:00.830
In a future lesson, we are going to learn how to write SQL statements ourselves.

249
00:18:01.130 --> 00:18:07.100
However, just for right now, just for the purposes of getting example data into the table, this function

250
00:18:07.100 --> 00:18:10.130
will create 100000 pets.

251
00:18:10.670 --> 00:18:15.110
So once we finish this chapter and we've learned a little bit about writing SQL statements, you can

252
00:18:15.110 --> 00:18:18.440
always circle back to this function if you're curious how it's working.

253
00:18:18.770 --> 00:18:25.850
But essentially, I'm just creating a really long SQL statement that's going to insert 100000 items

254
00:18:26.480 --> 00:18:27.050
anyways.

255
00:18:27.050 --> 00:18:29.870
To use this, we can just go back towards the top of this file.

256
00:18:30.320 --> 00:18:35.870
In our construct function, we're looking for the action of admin head and just change the method we're

257
00:18:35.870 --> 00:18:38.660
calling from on admin refresh.

258
00:18:38.660 --> 00:18:41.900
Just change it to populate fast.

259
00:18:42.770 --> 00:18:43.790
Let's give that a save.

260
00:18:44.060 --> 00:18:49.550
And now if I go to the admin dashboard and refresh, it'll take maybe two or three seconds or on a slow

261
00:18:49.550 --> 00:18:49.940
computer.

262
00:18:49.940 --> 00:18:51.860
It might take five or ten seconds.

263
00:18:52.250 --> 00:18:54.170
You can see almost immediately it finished.

264
00:18:54.170 --> 00:19:00.290
And if I go into admin and refresh, I now have a hundred well one hundred thousand and three from the

265
00:19:00.290 --> 00:19:01.760
original three we created.

266
00:19:02.120 --> 00:19:02.470
Cool.

267
00:19:02.480 --> 00:19:07.070
Now just to make sure you don't accidentally create even more, what you could do is just comment out

268
00:19:07.070 --> 00:19:11.870
this line entirely so that nothing is running on every admin refresh.

269
00:19:12.260 --> 00:19:13.190
Give that a save.

270
00:19:13.310 --> 00:19:17.570
And now we have plenty of data to sink our teeth into.

271
00:19:17.810 --> 00:19:22.670
And in our next lesson, we're just going to continue learning more and more about working with sequel

272
00:19:23.150 --> 00:19:25.220
to be more specific in our next lesson.

273
00:19:25.220 --> 00:19:31.130
If I go to the front end of my site and at the end of the homepage you if I visit Pet Dasch Adoption,

274
00:19:31.460 --> 00:19:37.490
well, we're going to learn how to make this template actually come to life and actually load in data

275
00:19:37.700 --> 00:19:39.140
from our custom table.

276
00:19:39.560 --> 00:19:41.810
Let's keep things rolling and I'll see you then.
