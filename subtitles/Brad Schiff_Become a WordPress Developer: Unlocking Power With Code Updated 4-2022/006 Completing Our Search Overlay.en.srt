1
00:00:01,790 --> 00:00:02,840
Hello, everyone.

2
00:00:03,230 --> 00:00:07,410
In this lesson, we will finally finish our search overlay.

3
00:00:07,790 --> 00:00:13,220
I know we've spent a lot of time on this section, but if you look back at everything we've learned

4
00:00:13,220 --> 00:00:17,650
while building the overlay, I think it was time well spent anyways.

5
00:00:17,660 --> 00:00:21,610
The course is not coming to a close yet, just this section on the overlay.

6
00:00:22,100 --> 00:00:26,240
But anyways, let's get more specific on what we need to do in this lesson.

7
00:00:26,510 --> 00:00:33,560
In our previous lesson, we updated our search logic to include professors based on their relationship

8
00:00:33,710 --> 00:00:36,050
to a program that you might have searched for.

9
00:00:36,440 --> 00:00:42,000
And now in this lesson, I want to do the same thing for events and campuses.

10
00:00:42,560 --> 00:00:48,160
Let's begin with events, because we almost set them up on accident in the previous lesson.

11
00:00:48,590 --> 00:00:49,880
Let me show you what I mean.

12
00:00:49,940 --> 00:00:58,820
So over in our text editor within our C folder, let's jump in to search Routt P and if we scroll down

13
00:00:58,820 --> 00:01:04,850
to the very bottom of this file and then scroll up just a tiny bit, we see that new query that we wrote

14
00:01:04,850 --> 00:01:08,780
in the previous lesson program, relationship query.

15
00:01:09,290 --> 00:01:14,310
And at the moment it only looks for posts that are of the post type professor.

16
00:01:14,690 --> 00:01:18,980
So the first thing that I want to do is update this to include events.

17
00:01:19,340 --> 00:01:24,800
So let's delete the quotes, Professor, and instead let's provide an array.

18
00:01:25,880 --> 00:01:33,040
And then within these array parentheses, we can just say professor comma quote event.

19
00:01:33,680 --> 00:01:34,070
Cool.

20
00:01:34,090 --> 00:01:41,150
So now this query will contain event posts and now all we need to do is update the while loop that loops

21
00:01:41,150 --> 00:01:43,170
through the results of this query.

22
00:01:43,370 --> 00:01:49,760
Now, within the while loop, we've already got an F block saying if the post type of a result is Professor,

23
00:01:49,760 --> 00:01:55,430
do this well, now we just need to create another if block for the event post type.

24
00:01:55,700 --> 00:02:02,240
Right, because it makes sense for a professor to have a property named image that gets a cropped jpeg,

25
00:02:02,480 --> 00:02:06,540
but we need different data and different properties for an event.

26
00:02:06,860 --> 00:02:09,170
Well, luckily, we don't need to reinvent the wheel.

27
00:02:09,170 --> 00:02:14,990
We don't need to write any new code, because if we just scroll up a bit to the wire loop that we wrote

28
00:02:14,990 --> 00:02:16,510
for our original query.

29
00:02:17,030 --> 00:02:23,240
So if you scroll up to the very top of this file, remember, we have our original main query and then

30
00:02:23,240 --> 00:02:25,580
right below that we've got a while loop.

31
00:02:26,210 --> 00:02:30,420
And we already wrote if Bloks or if statements for every post type.

32
00:02:30,920 --> 00:02:38,360
So just scroll down until you find the if for the event post type and then let's just go ahead and copy

33
00:02:38,360 --> 00:02:39,200
and paste that.

34
00:02:39,200 --> 00:02:45,800
So I'm going to select from the beginning of if down to the closing curly bracket that comes right after

35
00:02:46,280 --> 00:02:48,970
the two closing parentheses and a semicolon.

36
00:02:49,190 --> 00:02:53,300
So include this closing curly bracket here and then let's go ahead and copy that.

37
00:02:53,940 --> 00:03:00,500
Then down towards the bottom of this file within the while loop for our new program, relationship query,

38
00:03:01,460 --> 00:03:04,880
maybe right above the if block for the professor post type.

39
00:03:05,390 --> 00:03:08,510
We can just add a new line, just paste in your clipboard.

40
00:03:08,840 --> 00:03:09,250
Cool.

41
00:03:09,260 --> 00:03:15,050
Now, before we save this, I do want to scroll down to the very bottom and bring your attention to

42
00:03:15,050 --> 00:03:16,190
this line of code.

43
00:03:16,370 --> 00:03:22,730
We wrote this line of code to remove any potential duplicates in the array that we are going to return

44
00:03:22,730 --> 00:03:24,260
to the rest API.

45
00:03:24,410 --> 00:03:31,400
We did this because now that we have two queries, write one, that search is based on a keyword and

46
00:03:31,400 --> 00:03:32,300
a second query.

47
00:03:32,300 --> 00:03:34,720
That search is based on a relationship.

48
00:03:34,730 --> 00:03:40,400
Well, it's possible that a post would match both of those queries, thus creating a duplicate.

49
00:03:40,580 --> 00:03:43,270
So this line of code is super important.

50
00:03:43,280 --> 00:03:49,130
It will remove duplicates, but it's set up to only do that for the professor's summary.

51
00:03:49,250 --> 00:03:53,360
And now we also want to remove duplicates from the events sabari.

52
00:03:53,480 --> 00:03:56,270
So I'm just going to copy and duplicate this line.

53
00:03:56,450 --> 00:03:59,990
So select from here to the end of the semicolon.

54
00:04:00,620 --> 00:04:02,450
Let's copy that and write below it.

55
00:04:02,450 --> 00:04:09,200
Just duplicate it, paste it, let's change professors to events and then write within array.

56
00:04:09,200 --> 00:04:15,890
Unique again, let's change this mention of professors to events, OK?

57
00:04:15,900 --> 00:04:22,490
And now if I save this and then jump over to the Postman app, you can see that as of ten minutes ago,

58
00:04:22,490 --> 00:04:29,030
if I perform a search for biology that results in an events array, that's completely empty.

59
00:04:29,510 --> 00:04:36,380
But now if I refresh or send out another request with our new code in place now within the events array,

60
00:04:36,380 --> 00:04:39,260
we see the science of cats perfect.

61
00:04:39,650 --> 00:04:47,090
Or to show this from another angle, if we use our search overlay search for biology, we see the science

62
00:04:47,090 --> 00:04:50,930
of cats because it has a relationship to the biology program.

63
00:04:51,320 --> 00:04:56,750
And if we really wanted to test things to make sure everything's working properly, we could head over

64
00:04:56,750 --> 00:05:00,950
to our admin dashboard and in the sidebar, click.

65
00:05:01,010 --> 00:05:08,960
On events and here is that Science of Cats event that we just saw on the front end, and it shows up

66
00:05:08,960 --> 00:05:15,280
in our search because you can see that for related programs, it's related to both biology and math.

67
00:05:16,310 --> 00:05:18,380
So a search for biology will pull it up.

68
00:05:18,380 --> 00:05:25,670
But you could also search for math and that will also pull up the science of cats as well as math meetup.

69
00:05:26,030 --> 00:05:30,650
I think I only have one other major so far on my website named English.

70
00:05:30,980 --> 00:05:32,750
Not a whole lot matches that search.

71
00:05:32,750 --> 00:05:34,730
Looks like literally just the program.

72
00:05:35,390 --> 00:05:41,420
But I do know that I have an event named Poetry Day that I never said a relationship for, so I could

73
00:05:41,420 --> 00:05:43,410
do that right now just to test things out.

74
00:05:43,820 --> 00:05:52,520
So back in events, if I click on Poetry Day, if I scroll down to the related events field, I'm going

75
00:05:52,520 --> 00:05:53,990
to click on English.

76
00:05:54,000 --> 00:05:56,540
It would make sense that Poetry Day is related to that.

77
00:05:57,200 --> 00:05:58,690
Let's go ahead and update this.

78
00:05:59,570 --> 00:06:01,010
And now back on the front end.

79
00:06:01,310 --> 00:06:07,430
I don't even need to refresh this page if I just perform a search for English again, our JavaScript

80
00:06:07,430 --> 00:06:12,530
will send out a new request to the WordPress server and pull in the brand new JSON.

81
00:06:12,920 --> 00:06:15,870
So at this point, our events are working correctly.

82
00:06:16,130 --> 00:06:19,070
Now let's change gears and work on campuses.

83
00:06:19,310 --> 00:06:28,610
So, for example, if we close this and go to the programs page and if I click on math, I know that

84
00:06:28,610 --> 00:06:33,040
the math program is available at my downtown west campus.

85
00:06:33,440 --> 00:06:40,370
However, if I perform a search for math, as of right now, our search logic is not intelligent enough

86
00:06:40,370 --> 00:06:42,310
to pull in downtown West.

87
00:06:42,560 --> 00:06:44,980
So let's go ahead and fix that right now.

88
00:06:45,230 --> 00:06:52,040
I want to begin by pointing out that campuses are a bit different than events and professors, and I'm

89
00:06:52,040 --> 00:06:55,340
simply referring to the direction of the relationship.

90
00:06:55,610 --> 00:07:01,910
For example, if we think of a professor or an event post, so if I go back into the admin, here is

91
00:07:01,910 --> 00:07:08,750
the Poetry Day event, and the relationship to a program is flowing in the direction from this event

92
00:07:08,960 --> 00:07:10,310
to the program.

93
00:07:10,610 --> 00:07:14,480
But campuses are the opposite to see what I mean.

94
00:07:14,480 --> 00:07:23,270
If we click on campuses and then choose downtown West, what I'm trying to say is that this campus post

95
00:07:23,270 --> 00:07:27,320
doesn't contain a field where you can relate it to a program.

96
00:07:27,470 --> 00:07:31,900
Instead, each program post gets related to a campus.

97
00:07:32,120 --> 00:07:37,550
So the point here is just that you always want to be aware of which direction the relationship is flowing

98
00:07:37,550 --> 00:07:37,810
in.

99
00:07:38,120 --> 00:07:42,980
So to help us map out what type of code we need to write, let's click on programs.

100
00:07:44,300 --> 00:07:53,210
And if I click on math, I know that I've set the math program to be related to the downtown west campus.

101
00:07:53,570 --> 00:07:59,630
I set up the relationship to work in this direction because I figured that you might have 50 or 100

102
00:07:59,630 --> 00:08:04,480
programs, but you're probably only going to have maybe five or 10 campuses.

103
00:08:04,700 --> 00:08:08,930
So I felt that this direction made more sense and would be easier to maintain.

104
00:08:09,320 --> 00:08:15,620
So now, with the nature of this relationship in mind, if we jump back into our code, this is actually

105
00:08:15,620 --> 00:08:21,710
going to be fairly easy, because if we scroll up to the very top and we imagine someone comes to our

106
00:08:21,710 --> 00:08:29,150
website and searches for math, well, then our first main query is going to pull in the math program

107
00:08:29,150 --> 00:08:31,550
post and then down just a little bit.

108
00:08:32,390 --> 00:08:34,580
We are going to loop through that result.

109
00:08:34,910 --> 00:08:41,120
And if we scroll down just a little bit more, we've already got an F block saying if the result is

110
00:08:41,120 --> 00:08:41,840
a program.

111
00:08:42,110 --> 00:08:48,830
So all we need to do is just write a little bit of new code within this existing if block or to explain

112
00:08:48,830 --> 00:08:49,700
it visually.

113
00:08:49,940 --> 00:08:56,240
If someone searches for math, that's obviously going to pull in the main program post of math.

114
00:08:56,570 --> 00:09:03,500
And within that same exact post, we've already got direct access to any campuses that it's related

115
00:09:03,500 --> 00:09:03,870
to.

116
00:09:04,610 --> 00:09:11,630
So back in our code within this if block for program, let's just add a new line and the first thing

117
00:09:11,630 --> 00:09:21,890
I'm going to do is create a variable named related campuses and let's set it to equal get field.

118
00:09:22,610 --> 00:09:29,720
This is how you can retrieve the value of an advanced custom field in the name of that field is related.

119
00:09:29,870 --> 00:09:31,720
Underscore campus.

120
00:09:32,150 --> 00:09:38,060
Now, the way that I named this field way back in the course is a bit deceiving because this is singular,

121
00:09:38,060 --> 00:09:43,030
but it can actually contain multiple campuses, meaning this is an array.

122
00:09:43,640 --> 00:09:50,150
So what we need to do now is loop through this array and do something once for each related campus.

123
00:09:50,480 --> 00:09:58,910
So on a new line, let's just write A for each loop parentheses, curly brackets and actually before

124
00:09:58,910 --> 00:10:00,650
we build out this for each loop.

125
00:10:00,910 --> 00:10:07,690
I want to wrap it within an if statement, because I only want to run this code if there are indeed

126
00:10:07,690 --> 00:10:13,710
related campuses to work with, meaning I only want to run this code if this field is not empty.

127
00:10:13,990 --> 00:10:22,270
So right above this for each loop, we can say if parentheses curly brackets and then within this if

128
00:10:22,270 --> 00:10:27,460
statement, I'm just going to cut and paste our for each loop to live inside the if statement.

129
00:10:28,510 --> 00:10:29,680
Just paste it right here.

130
00:10:31,780 --> 00:10:39,970
OK, now for the condition for the if statement, let's say if and just the name of this variable related

131
00:10:40,240 --> 00:10:46,270
campuses, as long as this is not empty this will evaluate to true cool.

132
00:10:46,300 --> 00:10:50,140
Now let's build out these for each loop within the parentheses.

133
00:10:50,140 --> 00:10:55,990
You want to begin with the array that you want to loop through so related campuses.

134
00:10:56,410 --> 00:11:02,410
And then we say as and then you can make up a variable name that will represent the current item that's

135
00:11:02,410 --> 00:11:03,370
been looped to.

136
00:11:03,580 --> 00:11:05,980
So I'm just going to say dollars on campus.

137
00:11:06,300 --> 00:11:12,040
OK, and then within the curly brackets, what do we actually want to do once for each related campus?

138
00:11:12,340 --> 00:11:15,280
Well, we just want to push it onto our results.

139
00:11:15,280 --> 00:11:16,650
Campuses array.

140
00:11:17,020 --> 00:11:22,670
Remember, this is the array that we return to the rest API down at the very bottom of this file.

141
00:11:22,960 --> 00:11:28,010
So for now, our goal is to just push each related campus into this specific array.

142
00:11:28,420 --> 00:11:30,730
So back down to that code that we were just writing.

143
00:11:31,390 --> 00:11:33,630
Here's our if statement and the for each loop.

144
00:11:33,940 --> 00:11:37,660
So within the for each, let's say, array push.

145
00:11:38,470 --> 00:11:40,410
And remember, this takes two things.

146
00:11:40,630 --> 00:11:43,950
The first argument is the array that you want to add on to.

147
00:11:44,050 --> 00:11:48,790
So let's say results campuses.

148
00:11:49,330 --> 00:11:51,990
And the second argument is what you want to add on.

149
00:11:52,390 --> 00:11:53,910
So let's say array.

150
00:11:54,310 --> 00:12:01,530
And now we just want to build out an associative array that contains properties like title and permalink.

151
00:12:02,140 --> 00:12:08,290
So back in the code within these array parentheses, let's drop down and let's say that it should have

152
00:12:08,290 --> 00:12:09,930
a property named title.

153
00:12:10,090 --> 00:12:15,190
You could make up whatever property name you want, but this is what our front end JavaScript will be

154
00:12:15,190 --> 00:12:15,970
looking for.

155
00:12:16,270 --> 00:12:20,770
And let's set this to equal get the title.

156
00:12:22,210 --> 00:12:30,400
Let's also create a property named Permalink and set that to equal get the permalink cool.

157
00:12:30,400 --> 00:12:35,980
But before we save this, we do need to add something within the parentheses for this, get the title

158
00:12:35,980 --> 00:12:41,830
and get the permalink, because by default these functions will work with the current post.

159
00:12:42,040 --> 00:12:48,730
And as far as WordPress is concerned, within this context, WordPress would consider the current post

160
00:12:49,000 --> 00:12:55,900
the math program because that's the post that's being looped through in terms of the overall while loop

161
00:12:55,900 --> 00:12:57,850
that's working with the WordPress query.

162
00:12:58,120 --> 00:13:02,380
And we don't want to get the title and permalink for the math program.

163
00:13:02,650 --> 00:13:06,130
We want the title in Permalink for the current related campus.

164
00:13:06,340 --> 00:13:12,520
Well, luckily, due to the nature of a for each loop, we can access the post object of the current

165
00:13:12,520 --> 00:13:17,640
campus that's being looped through with this variable dollars on campus.

166
00:13:17,950 --> 00:13:23,440
So within the parentheses, forget the title, let's just say campus and do the same thing.

167
00:13:23,440 --> 00:13:25,980
Forget the permalink campus.

168
00:13:26,290 --> 00:13:26,650
Cool.

169
00:13:26,660 --> 00:13:32,680
Now if we save this and then back on the front end, if I perform another search for math.

170
00:13:34,390 --> 00:13:37,240
Perfect, we see the downtown west campus.

171
00:13:40,220 --> 00:13:46,400
And that's going to bring this lesson and this section on building out the search overlay to a close,

172
00:13:46,700 --> 00:13:52,460
we've still got a lot of good stuff to cover in the course, though, user permissions and rolls open

173
00:13:52,460 --> 00:13:55,690
registration so anyone can sign up for a basic account.

174
00:13:56,240 --> 00:14:01,430
We still need to learn about the other three letters in CRUD when it comes to working with the rest

175
00:14:01,430 --> 00:14:05,990
API, because so far we've only learned about the R for read.

176
00:14:06,290 --> 00:14:12,340
But the real fun comes in with the C for create, the You for update and the D for delete.

177
00:14:12,800 --> 00:14:18,200
So we've still got a lot of WordPress ground to cover and the funnest parts are still yet to come.

178
00:14:18,620 --> 00:14:20,000
So let's keep things rolling.

179
00:14:20,010 --> 00:14:23,990
Let's keep our momentum and I will see you in the next lesson.
