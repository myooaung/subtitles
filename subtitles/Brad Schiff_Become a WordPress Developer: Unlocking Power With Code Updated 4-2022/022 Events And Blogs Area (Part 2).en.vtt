WEBVTT
1
00:00:00.270 --> 00:00:01.830
So where do we get started?

2
00:00:02.040 --> 00:00:07.230
Well, let's actually begin in our functions dot AP file and I'll explain why.

3
00:00:07.320 --> 00:00:13.590
So functions dot B and we already have a class named JS block.

4
00:00:13.980 --> 00:00:19.140
Well, I just want to create a new but similar class in the new class.

5
00:00:19.350 --> 00:00:25.260
Our client side JavaScript is going to be super simple because it's just a static placeholder for the

6
00:00:25.260 --> 00:00:26.130
editor screen.

7
00:00:26.670 --> 00:00:33.420
So in this new class that we're going to create, we don't need any sort of JSF processing through packaged

8
00:00:33.570 --> 00:00:35.080
JSON workflow tools.

9
00:00:35.430 --> 00:00:42.180
And that would also mean that when we're loading the JavaScript file, we wouldn't need to look in the

10
00:00:42.180 --> 00:00:43.080
build folder.

11
00:00:43.080 --> 00:00:49.110
We could just look directly in the our blocks folder, right, for the super simple placeholder JavaScript

12
00:00:49.110 --> 00:00:49.530
file.

13
00:00:49.980 --> 00:00:57.270
And then finally in the new class that I want to create, the PHP render callback will be just assumed

14
00:00:57.270 --> 00:00:59.940
and mandatory instead of opt in.

15
00:01:00.510 --> 00:01:03.720
If my vision for this new class doesn't make sense yet, that's okay.

16
00:01:03.900 --> 00:01:07.500
I think it'll become clear once we actually have it set up and working.

17
00:01:08.100 --> 00:01:12.810
Also, just to be clear, you technically don't need to create a totally separate class.

18
00:01:13.050 --> 00:01:19.110
You could continue to build out your Gsx block class and just have, you know, a fourth and fifth argument

19
00:01:19.110 --> 00:01:21.090
that specifies these options.

20
00:01:21.090 --> 00:01:24.480
But I actually think it would be simpler just to create a new class.

21
00:01:24.690 --> 00:01:26.010
So this is what I'm going to do.

22
00:01:26.280 --> 00:01:30.120
Let's just duplicate our Gsx block class definition.

23
00:01:30.130 --> 00:01:36.150
So from the beginning of class, I'll just click at the start of that, scroll down to where class ends.

24
00:01:36.510 --> 00:01:39.590
So it's right here before we start finding our instances.

25
00:01:39.600 --> 00:01:45.240
So I'll just hold shift, click at the end of that and just copy and paste it, just completely duplicate

26
00:01:45.240 --> 00:01:45.360
it.

27
00:01:45.660 --> 00:01:50.850
So all include the new class, maybe above gsx block pasted in.

28
00:01:51.180 --> 00:01:51.540
Okay.

29
00:01:51.720 --> 00:01:55.290
So on this new duplicate copy, let's change the name to.

30
00:01:55.740 --> 00:02:03.570
We could pick any name, but how about place holder block in the construct parentheses, the only incoming

31
00:02:03.570 --> 00:02:05.070
argument would be name.

32
00:02:05.070 --> 00:02:06.750
So we can get rid of render callback.

33
00:02:06.750 --> 00:02:08.070
We can get rid of data.

34
00:02:09.170 --> 00:02:10.430
In the construct function.

35
00:02:10.730 --> 00:02:15.350
We would obviously want to keep and hold on to that name value, but we can get rid of this data line.

36
00:02:15.350 --> 00:02:17.090
We can get rid of the render callback.

37
00:02:18.440 --> 00:02:18.830
Cool.

38
00:02:19.490 --> 00:02:22.550
Definitely keep this function called our render callback.

39
00:02:22.550 --> 00:02:24.350
Let's scroll down to on init.

40
00:02:24.830 --> 00:02:28.400
So when we're registering our script, just change this.

41
00:02:28.550 --> 00:02:34.700
We don't want to look in the build folder, we just want to look in the our dash blocks folder.

42
00:02:35.180 --> 00:02:38.840
The reason for this is because we don't need to even write JSA x.

43
00:02:39.170 --> 00:02:42.140
The placeholder JavaScript is going to be so simple.

44
00:02:42.350 --> 00:02:48.980
We can just write basic react code without the convenience of the x syntax.

45
00:02:49.250 --> 00:02:54.650
That way we don't even need to worry about processing them and adding them to our package json file.

46
00:02:55.100 --> 00:02:55.550
Cool.

47
00:02:55.580 --> 00:02:57.410
Let's keep adjusting our new class.

48
00:02:57.950 --> 00:03:03.140
We can get rid of this if check for data in the our args.

49
00:03:03.320 --> 00:03:06.440
Let's just hard code it to always use the render callback.

50
00:03:06.890 --> 00:03:13.910
So in this array of arguments I would just add a comma here quotes with the exact name of render underscore

51
00:03:13.910 --> 00:03:16.100
callback arrow symbol.

52
00:03:16.490 --> 00:03:20.270
And then you can just copy and paste this or I'll type it out with you.

53
00:03:20.280 --> 00:03:24.650
So it's the array syntax dollar sign this comma, the name of the method.

54
00:03:24.650 --> 00:03:27.800
So our render callback.

55
00:03:28.280 --> 00:03:28.600
Cool.

56
00:03:28.610 --> 00:03:31.730
So now it's not opt in, it's just assumed and mandatory.

57
00:03:31.940 --> 00:03:37.910
We can get rid of this if check and then to clean things up further.

58
00:03:37.910 --> 00:03:40.610
We really don't need a separate property called our array.

59
00:03:40.620 --> 00:03:43.310
So if you wanted to, you could just take this array.

60
00:03:43.610 --> 00:03:48.740
So from the word array to the closing parentheses, you could just take that and then just include it

61
00:03:48.740 --> 00:03:49.670
here directly.

62
00:03:50.000 --> 00:03:54.200
So get rid of that, just paste it in, and then we could get rid of this line of code.

63
00:03:55.070 --> 00:03:55.490
Cool.

64
00:03:55.910 --> 00:03:57.200
So we have our new class.

65
00:03:57.200 --> 00:03:57.980
Let's use it.

66
00:03:58.130 --> 00:04:03.680
So right after its definition and before J asks block, let's just create a new instance.

67
00:04:03.860 --> 00:04:12.140
So let's say new place, holder, block, semicolon in the parentheses, let's make up a name.

68
00:04:12.140 --> 00:04:15.890
Let's call it events and blogs.

69
00:04:16.520 --> 00:04:17.630
Let's give that a save.

70
00:04:18.140 --> 00:04:23.240
And now we can just go into the our blocks folder and create a new file with that matching name.

71
00:04:23.240 --> 00:04:26.960
So events and blogs dot JS.

72
00:04:27.200 --> 00:04:30.890
Now in this file, we don't need to include basically anything.

73
00:04:31.130 --> 00:04:34.670
We really just need the very minimal code to register a block type.

74
00:04:34.880 --> 00:04:39.980
And then we can just have a placeholder message that says, you know, this is the placeholder for events

75
00:04:39.980 --> 00:04:40.760
and blogs.

76
00:04:41.330 --> 00:04:47.630
In other words, you can go into your banner tags block, scroll up to the very, very top end to save

77
00:04:47.630 --> 00:04:48.290
a bit of typing.

78
00:04:48.290 --> 00:04:52.730
We can just copy and paste and borrow this register block type, block of code.

79
00:04:53.880 --> 00:04:57.960
So I'll just copy those lines pasted into our new empty file.

80
00:04:58.470 --> 00:05:03.420
The first thing we need to change is the way that we're calling register block type, because this file

81
00:05:03.420 --> 00:05:07.290
is not going to be processed by our package dot JSON workflow.

82
00:05:07.680 --> 00:05:07.890
Right?

83
00:05:07.920 --> 00:05:13.500
In other words, to the official WordPress Scripts package isn't going to process and parse this JavaScript.

84
00:05:13.950 --> 00:05:19.020
So instead of trying to import register, block type, let's just call it directly from the browser's

85
00:05:19.020 --> 00:05:19.860
global scope.

86
00:05:19.890 --> 00:05:21.330
So this would instead be.

87
00:05:21.330 --> 00:05:25.380
WP Woops, let me controls your command Z to undo that.

88
00:05:25.380 --> 00:05:31.830
So this code gets confused if it doesn't recognize the variable you're trying to use and you type dot

89
00:05:31.830 --> 00:05:33.970
or tab for autocomplete.

90
00:05:34.050 --> 00:05:40.290
So after you type WP and then we want to hit the DOT or period before you hit the data period, just

91
00:05:40.290 --> 00:05:43.350
click escape out of this suggested menu.

92
00:05:43.710 --> 00:05:53.880
And now we can actually type the dot, so WP dot blocks, dot register block type, we can leave the

93
00:05:53.880 --> 00:05:56.250
namespace the same, but let's get rid of banner.

94
00:05:56.250 --> 00:06:00.960
So the name for this specific block would be events and blogs.

95
00:06:01.380 --> 00:06:03.540
Let's change the title to be human readable.

96
00:06:03.540 --> 00:06:09.840
So events and blogs, we don't need any attributes whatsoever.

97
00:06:10.050 --> 00:06:13.260
If you wanted to, you could leave the align attribute.

98
00:06:13.260 --> 00:06:19.170
If you wanted this to appear full width in a page or post editor instead of just the template editor.

99
00:06:19.680 --> 00:06:23.280
Right, so that would look like this, but I don't think that's necessary.

100
00:06:23.280 --> 00:06:27.480
It doesn't need to look full width, so I'm just going to get rid of attributes altogether.

101
00:06:27.870 --> 00:06:30.630
Now for the save value, let's just give it a function.

102
00:06:31.080 --> 00:06:35.730
So function, parentheses, curly brackets that literally just returns null.

103
00:06:36.480 --> 00:06:39.960
So we want 100% processing for this block.

104
00:06:40.290 --> 00:06:46.650
Now for the edit component, this is the placeholder that will actually show up in the block editor.

105
00:06:47.070 --> 00:06:48.390
So here's what I'm going to do.

106
00:06:48.540 --> 00:06:50.250
We don't even need JS X.

107
00:06:50.490 --> 00:06:52.620
We can literally just have a function here.

108
00:06:52.620 --> 00:06:57.150
So function parentheses, curly brackets and just return.

109
00:06:57.150 --> 00:07:05.730
Now instead of Jess X, you can actually just say WP dot element, dot create element.

110
00:07:06.480 --> 00:07:10.170
So this is just a WordPress alias for Reax create element.

111
00:07:10.590 --> 00:07:12.770
If you're not familiar with React, that's okay.

112
00:07:12.780 --> 00:07:15.810
Essentially this is the alternate way of doing things.

113
00:07:15.960 --> 00:07:19.410
So you don't even need JSF, you don't need any processing.

114
00:07:19.680 --> 00:07:24.540
You can create an element or a component by just giving this three arguments.

115
00:07:24.540 --> 00:07:29.370
So A comma, b, comma, C, the first is the type of element you want to create.

116
00:07:29.520 --> 00:07:31.380
So let's just have a div.

117
00:07:31.890 --> 00:07:37.320
The second argument is any props you want to give the component in a minute or two we can give it a

118
00:07:37.320 --> 00:07:42.440
class name, but for right now, just to get this up and running, let's just not give it any props.

119
00:07:42.450 --> 00:07:43.560
So let's say null.

120
00:07:43.950 --> 00:07:49.800
And then finally, the third argument is the content or children that should be nested inside it.

121
00:07:50.220 --> 00:07:55.830
So let's just have a string of text that says this is a placeholder.

122
00:07:57.320 --> 00:07:57.710
Cool.

123
00:07:58.070 --> 00:07:59.210
Let's give this a save.

124
00:07:59.480 --> 00:08:05.600
And before we test it out, let's not forget to have a matching AP file in the our blocks folder with

125
00:08:05.600 --> 00:08:06.410
the same name.

126
00:08:06.620 --> 00:08:14.750
So I'm just going to create a new file name it events and blogs dot AP in that file.

127
00:08:14.750 --> 00:08:21.710
For now, let's just say hello again from page B, give that a save and test it out.

128
00:08:22.460 --> 00:08:29.510
So in the template editor screen, if we refresh and maybe below my banner or in between the two banners,

129
00:08:29.510 --> 00:08:35.120
if I try to insert, well, let me search first for events.

130
00:08:35.270 --> 00:08:35.750
There it is.

131
00:08:35.750 --> 00:08:37.070
Events and blogs.

132
00:08:37.520 --> 00:08:38.150
Give it a click.

133
00:08:38.540 --> 00:08:38.930
Cool.

134
00:08:38.930 --> 00:08:40.850
So we see this is a placeholder.

135
00:08:41.930 --> 00:08:44.210
We didn't need any processing.

136
00:08:44.420 --> 00:08:49.610
We can go ahead and click save and if we go refresh the front end, perfect.

137
00:08:49.790 --> 00:08:51.680
Hello again from HP.

138
00:08:52.370 --> 00:08:56.300
In a couple of minutes, we can worry about the actual AP in HTML.

139
00:08:56.300 --> 00:08:57.440
That should be output here.

140
00:08:57.440 --> 00:09:03.140
But before we get to that, let's first improve the editor appearance at least a little bit.

141
00:09:03.770 --> 00:09:03.980
Right.

142
00:09:03.980 --> 00:09:05.240
We can do better than this.

143
00:09:05.420 --> 00:09:10.940
Why don't we at least add a tiny bit of success just to add a little bit of padding, maybe a background

144
00:09:10.940 --> 00:09:13.070
color, so on and so forth.

145
00:09:13.520 --> 00:09:19.040
So back in our JavaScript file events and blogs dot Jess instead of null.

146
00:09:19.040 --> 00:09:24.500
For this second argument, you give this an object and this is essentially any props that you want to

147
00:09:24.500 --> 00:09:25.520
give to the element.

148
00:09:26.090 --> 00:09:32.510
Now, you absolutely could give it a prop called style, and then its value would be an object, and

149
00:09:32.510 --> 00:09:36.620
then you give it the react named versions of CC properties.

150
00:09:36.980 --> 00:09:41.750
But personally, I like to write my success in an actual CSV file.

151
00:09:42.080 --> 00:09:43.280
So here's what I'm going to do.

152
00:09:43.610 --> 00:09:47.960
Let's give you an object where the only property is just class name.

153
00:09:48.380 --> 00:09:52.070
Call and give it a string of text and let's just make up a class name.

154
00:09:52.070 --> 00:09:55.940
How about our dash placeholder dash block?

155
00:09:56.840 --> 00:09:57.260
Cool.

156
00:09:57.560 --> 00:09:58.580
Let's give that a save.

157
00:09:58.790 --> 00:10:02.390
And now let's just go create a CAC class with that matching name.

158
00:10:02.750 --> 00:10:10.340
So in our CC folder, you could create a brand new module file and then import it in the main style

159
00:10:10.340 --> 00:10:11.510
that CSV file.

160
00:10:11.870 --> 00:10:16.100
But for this exact reason, for quick and dirty fixes or quick and dirty features.

161
00:10:16.400 --> 00:10:19.790
That's why I have this file called Shamed CC.

162
00:10:20.090 --> 00:10:24.470
You don't need to worry about staying super organized in this file, so I would just jump into that

163
00:10:24.470 --> 00:10:33.080
shame that CSV file up at the very, very top, let's say dot our placeholder block and let's just give

164
00:10:33.080 --> 00:10:34.730
it a few basic styles.

165
00:10:35.360 --> 00:10:43.250
So maybe padding 20 pixels, text a line center, let's bump up the font size a little bit.

166
00:10:43.250 --> 00:10:46.070
So font size 1.65 REM.

167
00:10:46.760 --> 00:10:52.580
And let's give it a background gradient from one shade of gray to a slightly lighter shade.

168
00:10:52.580 --> 00:10:54.290
So background.

169
00:10:55.210 --> 00:10:55.810
Give it a value.

170
00:10:55.840 --> 00:10:58.210
Linear gradient.

171
00:10:59.350 --> 00:10:59.890
Parentheses.

172
00:10:59.930 --> 00:11:01.030
Call it semicolon.

173
00:11:01.030 --> 00:11:02.800
We give it the degree.

174
00:11:02.810 --> 00:11:04.330
So 180 degrees.

175
00:11:04.690 --> 00:11:08.140
The first color, let's say didi tdd comma.

176
00:11:08.590 --> 00:11:11.230
For the second color, just add ADHD.

177
00:11:11.680 --> 00:11:12.700
Let's give that a save.

178
00:11:12.700 --> 00:11:16.360
And then I'm remembering back in our JavaScript file just to clean things up.

179
00:11:16.360 --> 00:11:21.220
We actually don't need this supports property so we could get rid of that entirely like this.

180
00:11:21.790 --> 00:11:22.150
Cool.

181
00:11:22.540 --> 00:11:29.140
Anyways, before we go refresh in the browser because we saved a change to one of our SPSS module files.

182
00:11:29.320 --> 00:11:32.770
You do want to have your NPM run start task up and running.

183
00:11:32.770 --> 00:11:37.300
So NPM run start that will bundle up the new access.

184
00:11:37.300 --> 00:11:42.970
And now if we refresh in the template editor, throw that out a little bit.

185
00:11:42.970 --> 00:11:43.600
Perfect.

186
00:11:43.600 --> 00:11:44.950
This is a placeholder.

187
00:11:45.130 --> 00:11:47.260
So now you can just give it a meaningful message.

188
00:11:47.560 --> 00:11:56.230
So back in that JavaScript file, maybe change it to maybe events in blog's placeholder, you get the

189
00:11:56.230 --> 00:11:56.680
idea.

190
00:11:56.980 --> 00:11:59.110
I'm happy with this editor experience.

191
00:11:59.110 --> 00:12:07.750
So now let's just work on the actual front, end up in HTML output, let's jump into our events and

192
00:12:07.750 --> 00:12:11.980
blogs dot PHP file and there's no sense in reinventing the wheel.

193
00:12:12.250 --> 00:12:17.920
We have already written back in our theme chapter the exact code to output if we look at the finished

194
00:12:17.920 --> 00:12:19.600
product, this area.

195
00:12:20.050 --> 00:12:22.750
So let's just go find that code so really quick.

196
00:12:22.750 --> 00:12:25.030
Let me switch back to this window.

197
00:12:25.960 --> 00:12:31.870
This is the fictional university theme folder and theme that we built together step by step back in

198
00:12:31.870 --> 00:12:33.040
that earlier chapter.

199
00:12:33.580 --> 00:12:39.880
So right now, if you just dig into the front page dot AP file and scroll down to about line number

200
00:12:39.880 --> 00:12:44.290
13, you'll see this div with a class of full width split.

201
00:12:45.070 --> 00:12:52.390
I'm just going to place my cursor at the start of that and then scroll down and I want everything right

202
00:12:52.390 --> 00:12:54.970
before this div with a class of hero slider.

203
00:12:54.970 --> 00:12:56.140
So I'm going to click right here.

204
00:12:56.410 --> 00:12:59.440
I'm just going to copy all of that into my clipboard.

205
00:12:59.890 --> 00:13:05.110
And then back in the new theme that we're building instead of this empty placeholder of Hello again

206
00:13:05.110 --> 00:13:08.770
from PHP, just get rid of that paste in your clipboard.

207
00:13:09.790 --> 00:13:11.740
Go ahead and save that and that's it.

208
00:13:11.740 --> 00:13:13.390
We don't need to do anything.

209
00:13:13.390 --> 00:13:18.910
We don't need to adjust anything or change anything at all if we go back and refresh.

210
00:13:20.570 --> 00:13:21.200
Perfect.

211
00:13:22.070 --> 00:13:27.770
Now, just to be clear here, if you really wanted to go the extra mile and go above and beyond, you

212
00:13:27.770 --> 00:13:34.280
could create double the work for yourself and essentially create a client side JavaScript file, right?

213
00:13:34.370 --> 00:13:40.880
For the editor experience that looked exactly like this and you could use the rest API to fetch the

214
00:13:40.880 --> 00:13:42.260
exact data you want.

215
00:13:42.800 --> 00:13:46.200
Well, actually, you can't fetch this data from the rest API.

216
00:13:46.220 --> 00:13:49.820
You'd have to create your own custom end point in the rest API.

217
00:13:50.660 --> 00:13:51.710
But you get my point.

218
00:13:51.920 --> 00:13:57.770
If you really, really wanted to, you could create sort of a JavaScript alternate version of that just

219
00:13:57.770 --> 00:14:00.410
for the whole what you see is what you get aspect.

220
00:14:00.860 --> 00:14:05.390
But personally, I'm more than happy with this placeholder appearance.

221
00:14:05.810 --> 00:14:11.600
In fact, I would actually prefer this overseeing this exact layout in the editor screen.

222
00:14:11.870 --> 00:14:16.970
My logic for that is because there's nothing to actually click on and edit and customize.

223
00:14:17.270 --> 00:14:22.940
I think it would be almost confusing to see that exact literal content appear right here.

224
00:14:23.240 --> 00:14:26.000
So I am perfectly happy with this approach.

225
00:14:26.300 --> 00:14:32.810
And in our next lesson, we're going to continue to build out the rest of the template using this new

226
00:14:33.320 --> 00:14:34.370
IP based approach.

227
00:14:34.910 --> 00:14:37.550
Let's keep our momentum rolling and I'll see you then.
