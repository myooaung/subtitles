WEBVTT
1
00:00:01.820 --> 00:00:02.810
Hello, everyone.

2
00:00:03.230 --> 00:00:10.550
In this lesson, we will learn how to display custom post type posts on the front end of our website.

3
00:00:10.880 --> 00:00:12.610
Let's begin with our home page.

4
00:00:12.890 --> 00:00:20.640
So in this section, we just want to load in two of our event items or event posts at the moment.

5
00:00:20.660 --> 00:00:24.330
This is just hard coded, fake static HTML.

6
00:00:24.710 --> 00:00:30.060
So right now, let's dive into the code and make this Polan dynamic WordPress data.

7
00:00:30.800 --> 00:00:36.360
So within our theme folder, let's jump in to front page dot BHP.

8
00:00:36.890 --> 00:00:43.380
So down here around line 16, we see the heading that reads upcoming events.

9
00:00:43.700 --> 00:00:49.730
So right below that line, we can just add a bit of test text and say testing, one, two, three.

10
00:00:50.310 --> 00:00:54.350
And that way we can see that we're coding in the right spot in the template file.

11
00:00:54.760 --> 00:01:02.600
OK, now on our homepage, WordPress is not going to automatically query for any posts for us, right?

12
00:01:02.600 --> 00:01:06.760
WordPress is just going to query that one individual page named home.

13
00:01:07.220 --> 00:01:13.220
So if we want to pull in two event items or two event posts, that means we are going to need to write

14
00:01:13.220 --> 00:01:15.020
our own custom query.

15
00:01:15.320 --> 00:01:21.170
So back in the code, let's delete testing one, two, three, and instead let's put together a custom

16
00:01:21.170 --> 00:01:21.650
query.

17
00:01:22.160 --> 00:01:29.720
So obviously we want to drop in to P and let's create a variable to store the custom query and we can

18
00:01:29.720 --> 00:01:31.820
make up any variable name we want.

19
00:01:32.390 --> 00:01:38.630
But just to make sense, why don't we call this home page events the names up to you.

20
00:01:38.630 --> 00:01:39.950
But that's what I'm going with.

21
00:01:40.160 --> 00:01:47.300
And we want that to equal a new instance of the WP query class.

22
00:01:47.820 --> 00:01:51.950
You might remember that we created a custom query three or four lessons ago.

23
00:01:52.370 --> 00:01:54.110
But let me refresh your memory a bit.

24
00:01:54.440 --> 00:02:00.260
WP query is a class that WordPress provides for us, and it is the blueprint.

25
00:02:00.260 --> 00:02:04.760
It's going to do all of the heavy lifting for us within these parentheses.

26
00:02:04.880 --> 00:02:09.340
We just tell the class what data we want to query from the database.

27
00:02:09.710 --> 00:02:16.310
The class will do its thing and then we will have this variable or this object named homepage events

28
00:02:16.550 --> 00:02:18.260
that will contain everything we need.

29
00:02:18.380 --> 00:02:22.790
And then we can just loop through this object to display the content on the front end.

30
00:02:23.030 --> 00:02:28.640
OK, so our first step within these parentheses right after the class name is we want to provide it

31
00:02:28.640 --> 00:02:30.710
with an array of arguments.

32
00:02:31.100 --> 00:02:37.340
So the word array and then parentheses and then I like to drop down to a new line just to stay organized.

33
00:02:37.580 --> 00:02:41.150
And now we just tell WordPress what we want to query from the database.

34
00:02:41.570 --> 00:02:46.280
So let's say how many posts we want write because we only want to.

35
00:02:47.310 --> 00:02:57.180
So let's use the parameter posts per page and let's set that to two and then let's add a comma so we

36
00:02:57.180 --> 00:02:58.990
can add another argument.

37
00:02:59.370 --> 00:03:00.780
Here's a very important one.

38
00:03:01.080 --> 00:03:07.590
Let's target the parameter named post time, and you might be able to guess what we want to set that

39
00:03:07.590 --> 00:03:09.600
to event.

40
00:03:09.750 --> 00:03:13.110
Right, because that's the custom post types that we're trying to load.

41
00:03:13.380 --> 00:03:18.150
And we will now have this variable or object that contains two event posts.

42
00:03:18.570 --> 00:03:22.950
So now we just need to loop through this variable to displayed on the front end.

43
00:03:23.460 --> 00:03:31.440
So right below this code, let's begin a while, loop to the word while in parentheses and then curly

44
00:03:31.440 --> 00:03:32.160
brackets.

45
00:03:32.790 --> 00:03:37.140
So remember, within these parentheses, you tell the code how many times it should loop.

46
00:03:37.350 --> 00:03:44.010
Now, luckily, this variable or object that we created is self aware of how many posts it contains.

47
00:03:44.460 --> 00:03:51.510
So within the wildly parentheses, we can just target that variable name, home page events and then

48
00:03:51.510 --> 00:03:59.700
we can look inside that object with Dasch greater than and then we can call its method named have posts.

49
00:04:00.160 --> 00:04:04.350
OK, so now the while loop will keep repeating as long as there are still posts to loop through.

50
00:04:04.770 --> 00:04:09.090
And then within the curly brackets, the body of the while loop, what do we want to do first?

51
00:04:09.330 --> 00:04:15.150
Well, we always want to begin by running the function, the post as that will get the data ready for

52
00:04:15.150 --> 00:04:18.450
each post, each time the loop repeats itself.

53
00:04:18.810 --> 00:04:23.640
Only we don't just want to call the global version of the post right before this.

54
00:04:23.640 --> 00:04:26.070
We want to begin by looking within our object.

55
00:04:26.070 --> 00:04:26.310
Right.

56
00:04:26.340 --> 00:04:30.660
So homepage events dash greater than OK.

57
00:04:30.750 --> 00:04:35.880
So now after that we are free to output a little bit of HTML onto the page.

58
00:04:36.390 --> 00:04:43.530
So why don't we just close out of here and then on this line, drop back into P to close out the while

59
00:04:43.530 --> 00:04:48.750
loop and now in between on this line we can add HTML for now.

60
00:04:48.750 --> 00:04:49.740
Let's keep it simple.

61
00:04:49.740 --> 00:04:57.840
Let's just output a bulleted list item and within it let's go into P and output the title.

62
00:04:58.310 --> 00:05:05.280
OK, so if we save that cool on the front end of our website, we see Poetry Day and the science of

63
00:05:05.280 --> 00:05:05.940
cats.

64
00:05:06.300 --> 00:05:12.210
And now instead of just a simple bulleted list item for each of these, let's go ahead and actually

65
00:05:12.210 --> 00:05:15.520
use this visually appealing structure in style.

66
00:05:15.690 --> 00:05:22.500
So back in our text editor, right underneath this code we've been writing, we see a div with a class

67
00:05:22.500 --> 00:05:26.520
of events summary starts there and ends right here.

68
00:05:26.730 --> 00:05:30.120
And then right below it, there's another event summary div.

69
00:05:30.510 --> 00:05:31.770
So we don't need two of them.

70
00:05:31.770 --> 00:05:33.840
We just want to use one of them as a template.

71
00:05:33.840 --> 00:05:40.650
So let's delete this bottom one and then why don't we just cut and paste this remaining event summary

72
00:05:40.650 --> 00:05:42.150
div into our clipboard.

73
00:05:43.100 --> 00:05:50.580
OK, so we've deleted that fake static HTML and then let's just paste it into our while loop and hollow

74
00:05:50.580 --> 00:05:51.700
out the fake data.

75
00:05:52.140 --> 00:05:58.620
So on this HTML line with the list item, just delete that and then paste in your clipboard and now

76
00:05:58.620 --> 00:06:00.400
let's just start hollowing things out.

77
00:06:00.720 --> 00:06:01.890
Let's start with the title.

78
00:06:02.190 --> 00:06:08.850
So instead of this fake title, let's drop in and call the title.

79
00:06:09.390 --> 00:06:15.270
And then instead of this fake excerpt, a short description, let's pull in the first sentence or two

80
00:06:15.270 --> 00:06:17.070
from the main content field.

81
00:06:17.460 --> 00:06:26.280
So let's delete this example text and instead dropping P and echo out the results of a function named

82
00:06:26.280 --> 00:06:29.070
WP Trem words.

83
00:06:29.430 --> 00:06:31.920
And then we give this function to arguments.

84
00:06:32.160 --> 00:06:37.620
The first argument is the content that you want to trim so we can access the content by just saying

85
00:06:37.620 --> 00:06:41.040
get the content and that's a function.

86
00:06:41.040 --> 00:06:42.720
So include parentheses after it.

87
00:06:43.350 --> 00:06:46.950
And then the second argument is how many words you want to trim it to.

88
00:06:47.560 --> 00:06:50.100
So let's just say the first eighteen words.

89
00:06:50.460 --> 00:06:52.760
So let's save that cool.

90
00:06:52.770 --> 00:06:55.680
So we see Poetry Day and The Science of Cats.

91
00:06:56.040 --> 00:07:02.640
Next, let's set things up so that if you click on either the title or the learn more link, it takes

92
00:07:02.640 --> 00:07:07.470
you to the permalink or a screen with just that one individual event post.

93
00:07:07.770 --> 00:07:13.680
So back in our code, here's the title headline and here we see the A tag for the link.

94
00:07:14.010 --> 00:07:22.230
So within the HCF attribute, let's just delete the hash tag sample value and instead go into P and

95
00:07:22.230 --> 00:07:26.090
call the the permalink function.

96
00:07:26.550 --> 00:07:29.190
Now we want to do the same thing for the learn more link.

97
00:07:29.190 --> 00:07:36.450
So to avoid some typing, let's just copy and paste that a little bit of P and then here's the learn

98
00:07:36.450 --> 00:07:37.170
more link.

99
00:07:37.170 --> 00:07:42.420
So within that HSF attribute to the hashtag paste in the clipboard.

100
00:07:42.690 --> 00:07:44.240
Cool, we're good to go.

101
00:07:44.520 --> 00:07:46.770
So now if I click on this title of.

102
00:07:46.840 --> 00:07:54.040
Poetry Day, we run into a bit of a problem, we can see that up in the address bar that takes us to

103
00:07:54.040 --> 00:08:01.090
slash event slash poetry day and we would expect that to be the permalink for that one post.

104
00:08:01.300 --> 00:08:05.560
But instead, we see a welcome to our blog with zero content.

105
00:08:05.950 --> 00:08:12.380
And the actual title attribute that we can see up in the tab for that page is Page Not Found.

106
00:08:12.670 --> 00:08:19.390
Now, don't worry, all we need to do to fix this is rebuild WordPress is rewrite or permalink structure.

107
00:08:19.720 --> 00:08:25.960
To do that, you can just head over to the WordPress admin and down in the settings menu, click on

108
00:08:25.960 --> 00:08:26.770
Permalink.

109
00:08:27.790 --> 00:08:30.360
Now, you don't even need to switch to a different option.

110
00:08:30.370 --> 00:08:36.070
You can leave whatever option you're currently using, but just come down here and click save changes.

111
00:08:36.550 --> 00:08:40.600
As soon as you save, you'll see this message permalink structure updated.

112
00:08:40.780 --> 00:08:47.740
And now if we go back to this page and refresh cool, we see that the Eurail of events, poetry day

113
00:08:48.010 --> 00:08:49.320
indeed works.

114
00:08:49.570 --> 00:08:55.630
The reason we had to rebuild our permalink structure is because up until our previous lesson, WordPress

115
00:08:55.630 --> 00:09:00.040
has no idea what this key word of event means up in our address bar.

116
00:09:00.160 --> 00:09:00.490
Right.

117
00:09:00.490 --> 00:09:04.240
You and I know that this is tied to our new custom post type.

118
00:09:04.450 --> 00:09:10.840
But WordPress doesn't rebuild its permalink structure on every saved change for performance reasons.

119
00:09:10.840 --> 00:09:14.310
It only updates the permalink structure at key moments.

120
00:09:14.650 --> 00:09:20.050
For now, let's focus on customizing this page template for our events.

121
00:09:20.350 --> 00:09:25.000
Right, because at the moment this is using the template for blog posts.

122
00:09:25.150 --> 00:09:31.180
We can see we have a link here to take you back to the blog home and it says Posted by Brad on the date

123
00:09:31.180 --> 00:09:33.580
in and then it would say a category here.

124
00:09:33.850 --> 00:09:39.610
So this template makes sense for a blog post, but it's not well suited for an event post.

125
00:09:39.880 --> 00:09:47.670
Now, at the moment, the theme file that is powering this screen and this new URL is single dot p p.

126
00:09:48.040 --> 00:09:54.050
But what if we want a brand new theme file that is only responsible for event posts?

127
00:09:54.520 --> 00:09:57.280
Well, luckily that's very easy to set up.

128
00:09:57.610 --> 00:10:04.750
So back in our text editor in our theme folder, I want you to create a brand new file and the name

129
00:10:04.750 --> 00:10:07.210
of this new file is very important.

130
00:10:07.750 --> 00:10:14.560
Let's name it single dash event dot p p.

131
00:10:15.220 --> 00:10:22.150
Whenever we register a custom post type, WordPress will automatically be on the lookout for a file

132
00:10:22.150 --> 00:10:25.150
in our theme folder named Single Dash.

133
00:10:25.360 --> 00:10:28.990
And then whatever your custom post type keyword is.

134
00:10:29.240 --> 00:10:36.340
OK, so in this new file, if I just say test one, two, three and save and then refresh, that theme

135
00:10:36.340 --> 00:10:40.580
file is indeed being used for individual event posts.

136
00:10:40.990 --> 00:10:48.010
Now, next, why don't we go ahead and use the code from single P as a starter template for this, and

137
00:10:48.010 --> 00:10:51.820
then we can just customize it in little ways that make sense for events.

138
00:10:52.150 --> 00:10:56.260
So back in our text editor, I will jump into single dot p.

139
00:10:56.950 --> 00:11:04.990
I'm just going to copy the entire thing into my clipboard and then back in single event, dot just paste

140
00:11:04.990 --> 00:11:10.720
in my clipboard and now let's just customize it so it makes more sense for an event instead of a blog

141
00:11:10.720 --> 00:11:11.350
post.

142
00:11:11.830 --> 00:11:17.410
So I think the first thing I will address is this beige area here in the metabolics.

143
00:11:17.650 --> 00:11:22.210
Blog posts are more personal, so it makes sense to care who the author is.

144
00:11:22.210 --> 00:11:26.040
But in the case of an event, I don't think we need this meta information.

145
00:11:26.080 --> 00:11:29.260
Instead, we could just output the title of the event again.

146
00:11:29.500 --> 00:11:33.040
So here's the metabolics we can see posted by.

147
00:11:33.550 --> 00:11:40.420
So let's just delete all of that, including on the date in the category, and instead let's just drop

148
00:11:40.420 --> 00:11:44.260
into P and say the title.

149
00:11:46.750 --> 00:11:47.190
Cool.

150
00:11:47.260 --> 00:11:52.870
Next, let's update this blue link here, so instead of blog home, it says Event Home.

151
00:11:53.080 --> 00:11:58.010
And when you click on it, it should take you to a screen that shows you all upcoming events.

152
00:11:58.390 --> 00:12:01.510
So back in the text editor here, we see blog home.

153
00:12:01.540 --> 00:12:04.720
Let's just change that to events home.

154
00:12:05.620 --> 00:12:10.690
And now in terms of the actual Eurail that we should use, when you click on that link, let's stop

155
00:12:10.690 --> 00:12:12.500
for a moment and I want to show you something.

156
00:12:12.790 --> 00:12:18.820
So up in the address bar for this individual post, it's event poetry day.

157
00:12:19.030 --> 00:12:25.180
But if I want to see a listing of all events, you can just get rid of the Poetry Day part and go to

158
00:12:25.180 --> 00:12:26.410
slash event.

159
00:12:27.400 --> 00:12:29.400
Now, we just ran into a bit of a problem.

160
00:12:29.590 --> 00:12:36.400
So again, in the Tabbaa for the title, we see Page not found and we can see that the page is blank.

161
00:12:36.640 --> 00:12:42.820
And this is because when we registered our new custom post type, we need to tell WordPress that that

162
00:12:42.820 --> 00:12:45.380
post type supports an archive.

163
00:12:45.520 --> 00:12:51.220
So right now, let's go edit the code that registers our custom post type to refresh your memory of

164
00:12:51.220 --> 00:12:54.700
that file that controls that lives within our WordPress folder.

165
00:12:57.190 --> 00:13:03.390
So the folder where all of your WordPress system files live and then within the WP content folder,

166
00:13:03.700 --> 00:13:08.860
remember, we created this must use plug ins or mbewe plugins folder.

167
00:13:09.130 --> 00:13:15.460
And within that folder, we created a PDF file with the code that registers our custom post type.

168
00:13:15.670 --> 00:13:19.420
Now, right now, go ahead and open up this file in your text editor.

169
00:13:20.320 --> 00:13:25.810
OK, remember, this is the code where we register our post type and to get back to the goal at hand,

170
00:13:26.020 --> 00:13:29.830
we want this post type to have an archive Eurail.

171
00:13:29.980 --> 00:13:33.210
So let's just add a parameter to the top level array.

172
00:13:33.460 --> 00:13:42.010
So maybe right before this public line, let's target the parameter named has archive and then just

173
00:13:42.010 --> 00:13:43.120
set it to equal.

174
00:13:43.270 --> 00:13:43.820
True.

175
00:13:44.760 --> 00:13:46.020
So let's save that.

176
00:13:46.330 --> 00:13:51.250
And then back in our browser, if I refresh this event screen, cool.

177
00:13:51.250 --> 00:13:53.590
It's no longer a page not found.

178
00:13:53.860 --> 00:13:57.880
Instead, it's a legitimate archive of all of the event posts.

179
00:13:58.570 --> 00:14:04.420
Now, if this is an archive with multiple events, you might want to look up in the address bar and

180
00:14:04.420 --> 00:14:12.550
think, would it make more sense if the euro was slash events, plural, instead of just event?

181
00:14:12.880 --> 00:14:18.230
Well, let me show you how you can control what key word gets used as the slug here.

182
00:14:18.520 --> 00:14:25.440
So back in our code, by default, whatever post type name we register when we first call this function,

183
00:14:25.840 --> 00:14:29.440
this will be the key word or slug for that post type.

184
00:14:29.770 --> 00:14:35.620
But in a perfect world, we might want to use a singular name for the post type, but then a plural

185
00:14:35.620 --> 00:14:39.340
name for the URL or sluggy word in our code.

186
00:14:39.340 --> 00:14:42.600
We can just add another item to this top level array.

187
00:14:42.910 --> 00:14:45.160
So right above this has archive line.

188
00:14:45.460 --> 00:14:51.970
Let's create a new line and the parameter name that we're interested in is rewrite and then we want

189
00:14:51.970 --> 00:14:55.050
to set that to equal its own array.

190
00:14:56.830 --> 00:15:03.100
And then within that array, we just want to set a property or parameter of slug and then we can set

191
00:15:03.100 --> 00:15:05.230
that to equal whatever we want.

192
00:15:05.560 --> 00:15:10.300
So you could say unicorn or pizza or whatever you want to show up in the euro.

193
00:15:10.480 --> 00:15:13.270
Let's just say events as in plural.

194
00:15:13.600 --> 00:15:22.270
OK, so if I save that and then refresh the old archive that is event WordPress says, hey, page not

195
00:15:22.270 --> 00:15:22.750
found.

196
00:15:22.750 --> 00:15:24.250
I don't know what you're talking about.

197
00:15:24.400 --> 00:15:27.970
And that's because we changed the URL to events, plural.

198
00:15:28.790 --> 00:15:33.910
OK, now changing gears on this event's archive screen that shows all events.

199
00:15:34.090 --> 00:15:40.390
You might notice that this formatting or styling makes sense for a blog post, but we probably want

200
00:15:40.420 --> 00:15:42.850
to display things differently for an event.

201
00:15:43.060 --> 00:15:50.110
Now, at the moment, the theme file that is powering this screen and you URL is archived p p.

202
00:15:50.380 --> 00:15:57.070
And if we want a new theme file that's only responsible for the event archive, all we need to do is

203
00:15:57.070 --> 00:15:58.450
go into our theme folder.

204
00:15:58.700 --> 00:15:59.380
Here it is.

205
00:15:59.560 --> 00:16:02.920
And let's create a brand new file in the theme folder.

206
00:16:03.280 --> 00:16:05.410
The name of this file is important.

207
00:16:05.410 --> 00:16:11.980
We want to call it archive dash and then whatever the name of our custom post type is.

208
00:16:12.160 --> 00:16:15.450
So in this case, event dot p p.

209
00:16:16.720 --> 00:16:22.600
So in this new file, if we just say one, two, three, four and refresh cool, we can see that that's

210
00:16:22.600 --> 00:16:25.180
the right theme file that's powering the archive.

211
00:16:25.480 --> 00:16:32.530
Why don't we just go ahead and use the regular archive as a starting place and then adjust it from there.

212
00:16:33.160 --> 00:16:40.900
So in regular archived copy all of this into our clipboard and then back in archive dash event, let's

213
00:16:40.900 --> 00:16:44.230
just paste in our clipboard and let's start from the top.

214
00:16:44.530 --> 00:16:47.680
We don't need the main large headline to be dynamic.

215
00:16:47.710 --> 00:16:55.000
So instead we could just hard code that to all events and we don't need the subtitle to be dynamic.

216
00:16:55.000 --> 00:17:01.810
We could probably hard code that to see what is going on in our world.

217
00:17:02.260 --> 00:17:03.250
Let's say that.

218
00:17:04.830 --> 00:17:05.640
OK, cool.

219
00:17:05.790 --> 00:17:12.420
Next, let's adjust how each individual post is displayed, so this styling makes sense for a blog post,

220
00:17:12.570 --> 00:17:17.760
but for an event, I think we can just recycle the home page styling for events.

221
00:17:18.150 --> 00:17:18.480
Right.

222
00:17:18.480 --> 00:17:23.100
Let's just reuse the styling with a little date circle and then the title and a blurb.

223
00:17:23.340 --> 00:17:29.940
So back in our text editor in Archives event, let's scroll down a little bit here.

224
00:17:29.940 --> 00:17:32.120
We can see the while loop begins.

225
00:17:32.520 --> 00:17:36.480
So anything after this curly bracket is going to run once for each post.

226
00:17:36.660 --> 00:17:40.380
And we can see here is where the HTML begins and down.

227
00:17:40.380 --> 00:17:41.640
Here's where it ends.

228
00:17:41.670 --> 00:17:47.610
So let's just delete that and hollow it out and then let's just copy and paste the HTML template for

229
00:17:47.610 --> 00:17:49.250
an event from our home page.

230
00:17:49.980 --> 00:17:51.330
So back in front page.

231
00:17:52.890 --> 00:17:56.310
This is the while loop that we wrote at the very beginning of this lesson.

232
00:17:56.310 --> 00:17:58.590
And remember this event summary div.

233
00:17:59.070 --> 00:18:03.540
Lets just copy that into our clipboard and then back an archive event.

234
00:18:03.550 --> 00:18:06.480
Let's just paste it in here, let's save that.

235
00:18:06.750 --> 00:18:10.410
And if I refresh the all events archive screen, cool.

236
00:18:10.860 --> 00:18:17.160
And if I click on one to bring things full circle, remember we wanted to update the euro when you click

237
00:18:17.160 --> 00:18:18.350
on events home.

238
00:18:18.780 --> 00:18:25.560
So if we want to edit this screen template in our text editor, we need to jump back into single dash

239
00:18:25.560 --> 00:18:26.250
event.

240
00:18:28.110 --> 00:18:29.280
Here's the meta box.

241
00:18:29.280 --> 00:18:31.950
And more importantly, here's the events home link.

242
00:18:32.070 --> 00:18:36.030
You can see that it's HSF is currently pointing towards site U.

243
00:18:36.030 --> 00:18:38.100
URL slash blog.

244
00:18:38.430 --> 00:18:42.390
Now, technically, we could just change that to slash events.

245
00:18:42.540 --> 00:18:45.720
But what if in the future we changed that slug?

246
00:18:45.840 --> 00:18:48.540
Well, then we would have to remember to change it here as well.

247
00:18:48.780 --> 00:18:54.900
So instead, what we can do is delete that and use a WordPress function that will automatically get

248
00:18:54.900 --> 00:18:57.330
the URL for a post type archive.

249
00:18:57.690 --> 00:19:07.350
So we just echo out, get post type archive link and that's quite a long function name, but within

250
00:19:07.350 --> 00:19:12.060
its parentheses, then you just say the post type that you're interested in so event.

251
00:19:12.390 --> 00:19:20.820
So if we save that refresh now, we can click on Events Home and it knows to take us back to events

252
00:19:21.120 --> 00:19:23.840
and that's going to bring this lesson to a close.

253
00:19:24.180 --> 00:19:30.120
Now, you might be yelling at the screen saying, Brad, you're still using fake hardcoded dates for

254
00:19:30.120 --> 00:19:30.960
every event.

255
00:19:31.200 --> 00:19:32.400
I'm well aware of that.

256
00:19:32.400 --> 00:19:35.280
And it's something that we're going to fix in our next lesson.

257
00:19:35.430 --> 00:19:40.950
In order to set up the perfect date system for events, we are going to need to learn about something

258
00:19:40.950 --> 00:19:43.080
called custom fields.

259
00:19:43.410 --> 00:19:45.090
It's a super powerful topic.

260
00:19:45.090 --> 00:19:46.140
It's going to be a lot of fun.

261
00:19:46.380 --> 00:19:48.510
Let's keep it rolling and I will see you then.
