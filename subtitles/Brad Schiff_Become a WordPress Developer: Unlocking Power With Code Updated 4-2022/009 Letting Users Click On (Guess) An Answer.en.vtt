WEBVTT
1
00:00:02.260 --> 00:00:03.230
Hello, everyone.

2
00:00:03.520 --> 00:00:09.400
In this lesson, we're going to continue working on the front end of our block type, let's begin by

3
00:00:09.400 --> 00:00:14.160
setting up a function that will run when you click on one of the answers.

4
00:00:14.770 --> 00:00:23.290
So back in our front end, just file towards the bottom down in our JSC X. We're looking for the list

5
00:00:23.290 --> 00:00:28.530
item that gets output once for each answer on the opening line tag.

6
00:00:28.540 --> 00:00:37.000
Let's just give it an on click prop and set it to equal curly brackets and let's give it an S6 Arrow

7
00:00:37.000 --> 00:00:37.410
function.

8
00:00:37.420 --> 00:00:39.190
We don't need to pass anything into it.

9
00:00:39.190 --> 00:00:44.920
So just empty parentheses, arrow symbol and then let's call a function that doesn't exist yet, but

10
00:00:44.920 --> 00:00:48.010
we'll make sure that it exists in about 10 seconds from now.

11
00:00:48.580 --> 00:00:56.680
Let's call it Handal answer parentheses to call it and let's pass it the current index of the current

12
00:00:56.680 --> 00:00:58.090
item that's been looped to.

13
00:00:58.420 --> 00:01:03.840
So, for example, if you clicked on the first answer, arrays are zero based, so that would be a zero,

14
00:01:04.000 --> 00:01:06.130
this would be one and this would be two.

15
00:01:06.700 --> 00:01:11.710
So to do that, when MAP calls our function, the first thing it's going to pass, it is the current

16
00:01:11.710 --> 00:01:12.940
item that's been looped to.

17
00:01:12.940 --> 00:01:17.830
But if you give it a comma and include a second parameter, we can call it anything, but maybe just

18
00:01:17.830 --> 00:01:18.730
index.

19
00:01:19.090 --> 00:01:21.700
Well, map is going to pass in the current index.

20
00:01:21.700 --> 00:01:27.850
So then when we're calling Hindle answer in these parentheses, let's just give it index.

21
00:01:28.600 --> 00:01:28.990
Cool.

22
00:01:29.230 --> 00:01:35.830
Now with this set up in mind, still within our quiz component function here, but just above the return

23
00:01:35.830 --> 00:01:42.880
line, let's say function Handal answer parentheses, curly brackets.

24
00:01:43.000 --> 00:01:49.300
Let's be sure to receive that incoming index and then let's just set up an if else to check to see if

25
00:01:49.300 --> 00:01:51.310
they got it correct or incorrect.

26
00:01:51.940 --> 00:01:55.960
So if parentheses curly brackets, let's also set up an Elvis block.

27
00:01:56.110 --> 00:02:05.890
The condition is just if the incoming index double equals signs, if that equals props dot correct answer.

28
00:02:05.890 --> 00:02:07.540
That means they got the answer correct.

29
00:02:07.540 --> 00:02:15.340
For now, let's just output an alert that says congrats or else let's output an alert that says sorry,

30
00:02:16.110 --> 00:02:20.050
let's give this to save and test it out very fresh.

31
00:02:20.650 --> 00:02:22.750
I say that miaows a lot is a hamster.

32
00:02:23.410 --> 00:02:23.890
Perfect.

33
00:02:23.890 --> 00:02:24.220
We see.

34
00:02:24.220 --> 00:02:27.700
Sorry, but if I click on Cat we see congrats.

35
00:02:28.270 --> 00:02:30.730
Only we don't want an alert pop up right here.

36
00:02:31.060 --> 00:02:34.540
We want this area to adapt on the fly.

37
00:02:34.900 --> 00:02:35.230
Right.

38
00:02:35.230 --> 00:02:36.790
And display the message there.

39
00:02:37.210 --> 00:02:43.300
Now before we set this up to happen at the correct moment, let's first just display the incorrect,

40
00:02:43.300 --> 00:02:45.000
incorrect message here at all.

41
00:02:45.430 --> 00:02:53.350
Let me show you what I mean back in our code in the just below the unordered list, but still within

42
00:02:53.350 --> 00:02:54.370
the overall div.

43
00:02:54.370 --> 00:03:03.010
So right here where my cursor is blinking, let's have a div dot with a class of correct Dasch message

44
00:03:03.340 --> 00:03:06.130
hit tab inside this div.

45
00:03:06.130 --> 00:03:10.780
Let's have a paragraph element that says that is correct.

46
00:03:11.000 --> 00:03:15.820
Now if we say this, just that on its own we see that it's not visible anywhere.

47
00:03:16.060 --> 00:03:25.510
And that's because I set things up so that it needs a secondary modifier class of correct message dash

48
00:03:25.510 --> 00:03:29.260
dash visible as soon as we add this class.

49
00:03:29.440 --> 00:03:30.550
Now if we save.

50
00:03:34.360 --> 00:03:34.660
Cool.

51
00:03:34.690 --> 00:03:39.850
Well, you saw that it appeared or animated or faded in and then it stayed there for about two and a

52
00:03:39.850 --> 00:03:42.130
half seconds and then it animated away.

53
00:03:42.670 --> 00:03:47.110
Now, obviously, we want to display it at the correct moment when the user actually gets the question

54
00:03:47.110 --> 00:03:47.490
right.

55
00:03:47.500 --> 00:03:54.430
But for now, before we get to that, I think it would be nice if we added a smiley face icon to that

56
00:03:54.430 --> 00:03:55.360
correct screen.

57
00:03:55.600 --> 00:03:58.100
We don't need to do this, but I think it's a nice detail.

58
00:03:58.510 --> 00:04:05.740
So in a new tab, if you visit, get bootstrap dotcom, we can then click on the icons link right here.

59
00:04:05.980 --> 00:04:10.540
And there are a bunch of free icons that we can use, right.

60
00:04:10.540 --> 00:04:13.420
Free, high quality, open source icons.

61
00:04:13.540 --> 00:04:17.140
And it's very easy to get access to the SVG code.

62
00:04:17.680 --> 00:04:24.670
So, for example, if we scroll down a bit in this filter, if you just type in smiley or I guess smile,

63
00:04:25.210 --> 00:04:28.030
I'll use this emoji dash smile icon.

64
00:04:28.030 --> 00:04:29.050
So just click on it.

65
00:04:29.380 --> 00:04:35.950
And then down towards the bottom right corner, we see copying HTML so we don't even need the actual

66
00:04:35.950 --> 00:04:36.460
file.

67
00:04:36.460 --> 00:04:43.390
We can just click this icon right here to copy the SPG html into our clipboard and then back in voice

68
00:04:43.390 --> 00:04:50.710
code just right above the paragraph, but still in that correct message div let's paste in our clipboard

69
00:04:51.340 --> 00:04:58.210
and on the opening svg tag let's get rid of the fill equals current color and let's also change class

70
00:04:58.210 --> 00:05:00.400
to be a class name.

71
00:05:01.000 --> 00:05:04.660
OK, if we give that a save and refresh our front end.

72
00:05:05.980 --> 00:05:06.610
Perfect.

73
00:05:08.050 --> 00:05:12.510
Well, actually, not perfect, I think the icon would look better if it was just a little bit larger.

74
00:05:13.000 --> 00:05:19.900
So back in our code on the opening SVG tag, let's just change the width and height from 16 and we can

75
00:05:19.900 --> 00:05:21.970
just turn that to 20 for.

76
00:05:24.480 --> 00:05:27.220
Test that out, cool, I like that.

77
00:05:28.140 --> 00:05:33.360
Now let's set up the message that should show if you get the answer incorrect so we can actually just

78
00:05:33.360 --> 00:05:40.980
copy and paste and duplicate this entire correct message div just copy that right below it, just duplicate

79
00:05:40.980 --> 00:05:45.370
it and change the class name to incorrect message.

80
00:05:45.840 --> 00:05:49.380
We actually don't even need to change the secondary visible class to incorrect.

81
00:05:49.380 --> 00:05:51.660
You can just leave that as correct if you want to.

82
00:05:52.870 --> 00:05:57.940
Just for a quick test to make sure that only this device is showing we can get rid of the visible class

83
00:05:57.940 --> 00:06:06.160
on the first correct answer, give down in this incorrect copy, let's change the message to sorry,

84
00:06:06.670 --> 00:06:11.940
try again and let's go grab the sad icon from the bootstrap Web site.

85
00:06:12.460 --> 00:06:15.160
So let's go back a page, then the filter.

86
00:06:15.160 --> 00:06:20.890
If you just search for frown or sad, let's use this emoji frown.

87
00:06:21.220 --> 00:06:24.070
Just select the SVG code.

88
00:06:25.970 --> 00:06:31.850
Back in our text editor, just change SVG here, paste it in, I'll change the height and width to twenty

89
00:06:31.850 --> 00:06:38.360
four, I'll get rid of the fill color and I'll change class to class name.

90
00:06:39.980 --> 00:06:44.450
OK, if we give that to save and refresh, perfect.

91
00:06:45.940 --> 00:06:51.970
So that's just CSI Animation's handling the fading in and fading out timing.

92
00:06:52.210 --> 00:06:55.300
It has nothing to do with reactor JavaScript at this point.

93
00:06:55.480 --> 00:07:04.290
But now at this point, let's use react to add this visible modifier class at just the right moment.

94
00:07:04.720 --> 00:07:08.480
So let's get rid of the hard coded, visible modifier class here.

95
00:07:08.770 --> 00:07:15.130
So now neither of our classes, the incorrect or correct, will be showing when you first load the page.

96
00:07:16.100 --> 00:07:23.420
So now let's revisit our Handal answer function, so if we scroll back up Handal answer, we don't actually

97
00:07:23.420 --> 00:07:26.080
want to alert congrats with the pop ups.

98
00:07:26.600 --> 00:07:32.240
Instead, we want to do something that triggers that visible modifier class giving added to one of the

99
00:07:32.240 --> 00:07:33.230
divs below.

100
00:07:33.770 --> 00:07:40.490
Now, if we were writing vanilla JavaScript or J query, we would just look in the Dom for the div with

101
00:07:40.490 --> 00:07:43.330
a class of correct message or incorrect message.

102
00:07:43.610 --> 00:07:46.940
However, in react, that's not how we do things.

103
00:07:47.300 --> 00:07:52.180
We try to never, ever directly search through the dom or directly mutate the DOM.

104
00:07:52.490 --> 00:07:56.540
Instead, our component can keep track of its own internal state.

105
00:07:56.690 --> 00:07:56.890
Right.

106
00:07:57.000 --> 00:07:59.450
A little bit of memory about the state that it's in.

107
00:07:59.780 --> 00:08:06.100
And then our JSM, hence the name of the REACT Library, can react to that app state.

108
00:08:06.650 --> 00:08:13.340
So for example, let's set things up so that our quiz component has a piece of state data called is

109
00:08:13.340 --> 00:08:14.090
correct.

110
00:08:14.660 --> 00:08:19.340
And it keeps track of whether you just got the question correct or incorrect.

111
00:08:19.880 --> 00:08:25.610
Then we can just adjust the GSTs down here to display the visible modifier class.

112
00:08:25.970 --> 00:08:30.970
If is correct, is set to true or in this case, if it's set to false.

113
00:08:31.640 --> 00:08:33.100
Let me show you how we would do this.

114
00:08:33.800 --> 00:08:37.660
So up towards the very top of our quiz function component.

115
00:08:37.910 --> 00:08:44.390
So even right before our Handal answer function, let's add a new line, let's say const.

116
00:08:44.600 --> 00:08:49.850
And now I know the syntax will seem weird at first, but let's just type it out and then I can explain

117
00:08:49.850 --> 00:08:55.220
from there, let's say const square brackets and now I'm just making up these names.

118
00:08:55.220 --> 00:09:01.070
But let's say is correct, comma set is correct.

119
00:09:01.550 --> 00:09:07.520
And then after the square brackets have that equal use state parentheses.

120
00:09:08.030 --> 00:09:12.950
OK, now before I explain what's going on here, let's make sure that we actually have access to the

121
00:09:12.950 --> 00:09:21.560
react function called use state so we could say uppercase react dot use state here, but that's not

122
00:09:21.560 --> 00:09:22.390
very elegant.

123
00:09:22.400 --> 00:09:29.000
So instead what we can do up at the very top of our code when we're importing the uppercase react library

124
00:09:29.000 --> 00:09:35.780
from the react package right after the uppercase react, we can say comma curly brackets inside those

125
00:09:35.780 --> 00:09:38.330
curly brackets just say use state.

126
00:09:38.600 --> 00:09:42.260
So now we actually can access it directly down here.

127
00:09:42.800 --> 00:09:45.310
Now let's talk about what in the world is going on here.

128
00:09:45.350 --> 00:09:48.650
So in REACT, there's something called state.

129
00:09:48.980 --> 00:09:56.250
It's aptly named because its job is to describe the current state of your component or application.

130
00:09:56.570 --> 00:10:01.250
Now, the idea with state is that you and I never directly mutated.

131
00:10:01.580 --> 00:10:06.020
We just give it a new value and react handle's keeping track of it.

132
00:10:06.200 --> 00:10:08.480
And then here's the beautiful part of react.

133
00:10:08.780 --> 00:10:16.060
Any time your state changes or updates react is going to re render and rerun your function.

134
00:10:16.490 --> 00:10:21.860
So when the page first loads react, we'll run our Jason and output it to the page.

135
00:10:22.190 --> 00:10:27.560
And then when the user gets the question correct or incorrect, we're going to change the value of the

136
00:10:27.560 --> 00:10:34.790
state called is correct to either be true or false when that value changes or when any piece of state

137
00:10:34.790 --> 00:10:36.380
in react changes.

138
00:10:36.860 --> 00:10:43.460
Well, REACT knows that we want to render the quiz component to this piece of the DOM and when state

139
00:10:43.460 --> 00:10:46.270
changes, it's just going to render it again.

140
00:10:46.790 --> 00:10:50.960
Let's get back to the topic at hand and discuss this square brackets syntax.

141
00:10:51.260 --> 00:10:53.270
So we're creating a piece of state.

142
00:10:53.390 --> 00:10:55.910
Let's actually give it an initial or default value.

143
00:10:55.920 --> 00:10:59.030
So within these parentheses, let's set it to undefined.

144
00:10:59.810 --> 00:11:04.490
OK, now the use state function is going to return an array.

145
00:11:05.150 --> 00:11:07.640
It returns an array with two items.

146
00:11:08.120 --> 00:11:13.550
The first item in the array is just a variable that gives you easy access to that piece of state in

147
00:11:13.550 --> 00:11:14.340
that value.

148
00:11:14.660 --> 00:11:20.780
The second thing in the array is a function that you can call to change or update that piece of state

149
00:11:20.780 --> 00:11:21.630
in the future.

150
00:11:22.010 --> 00:11:28.090
So this syntax is really just us d structuring the array that this returns, right?

151
00:11:28.110 --> 00:11:33.960
So now we have a variable called is correct and another variable called set is correct.

152
00:11:34.460 --> 00:11:41.330
So check this out within our handle answer function instead of alerting a congrats method, let's just

153
00:11:41.540 --> 00:11:48.770
set is correct parentheses to call it give it a value of true and then you can just copy and paste this

154
00:11:48.770 --> 00:11:49.640
in the else block.

155
00:11:49.640 --> 00:11:52.640
We would do the same thing but set it to false.

156
00:11:53.390 --> 00:11:55.320
So we just use the set is correct.

157
00:11:55.350 --> 00:11:57.230
Now let me show you where we would use this.

158
00:11:57.230 --> 00:11:59.090
Just the correct variable.

159
00:11:59.420 --> 00:12:07.580
We would use that down in our JSA X if we find our correct message div we would just want to conditionally

160
00:12:07.580 --> 00:12:14.140
and the is visible modifier class only if is correct is true.

161
00:12:14.750 --> 00:12:15.560
So do this with.

162
00:12:16.070 --> 00:12:23.300
Where it says class name equals instead of a string of text, let's actually have equals curly brackets

163
00:12:23.300 --> 00:12:28.100
to do something dynamic and now in the curly brackets, we can have quotes, correct?

164
00:12:28.100 --> 00:12:29.480
Dasch message.

165
00:12:30.570 --> 00:12:36.330
But after the quote still in the curly brackets, let's say plus and then let's have a grouping set

166
00:12:36.330 --> 00:12:42.520
of parentheses, and now we can just use a ternary operator to do something only if something is true.

167
00:12:42.570 --> 00:12:51.900
So our condition will be if is correct, if that equals true question mark, what do we want to do if

168
00:12:51.900 --> 00:12:52.440
it's true?

169
00:12:52.470 --> 00:12:54.420
Well, let's just have a string of text.

170
00:12:54.810 --> 00:12:56.400
We'll start with a space.

171
00:12:56.400 --> 00:13:00.240
Right, because in case you separate your classes with a space.

172
00:13:00.240 --> 00:13:02.700
So we're adding on to this string of text.

173
00:13:03.180 --> 00:13:11.400
So we'll start with the space and then correct message dash dash visible after that string of text in

174
00:13:11.400 --> 00:13:12.360
a ternary operator.

175
00:13:12.360 --> 00:13:13.170
It's Colen.

176
00:13:13.320 --> 00:13:16.480
And then you say what you want to do if your condition is not true.

177
00:13:17.010 --> 00:13:20.700
So for us, that would just be nothing, just an empty string of text.

178
00:13:21.640 --> 00:13:23.710
Let's give this a save and test it out.

179
00:13:23.970 --> 00:13:27.750
So if we refresh, if we get the answer wrong, nothing happens.

180
00:13:27.750 --> 00:13:29.370
But if we get the answer right.

181
00:13:30.270 --> 00:13:31.110
Perfect.

182
00:13:32.490 --> 00:13:35.580
Let's set up similar logic to show the sorry message.

183
00:13:35.580 --> 00:13:41.670
If you get an answer incorrect to save a bunch of typing, we can actually just copy and paste the entirety

184
00:13:41.670 --> 00:13:43.740
of this opening div tag line.

185
00:13:45.100 --> 00:13:50.730
So I just select that entire line down here on the incorrect message div.

186
00:13:50.730 --> 00:13:58.650
Just replace that opening div tag line, change the beginning class to incorrect message and then change

187
00:13:58.650 --> 00:14:00.900
the condition to if is correct.

188
00:14:01.320 --> 00:14:03.720
Equals equals false.

189
00:14:04.260 --> 00:14:07.010
And actually I'm going to use three equal signs here.

190
00:14:07.170 --> 00:14:12.690
You could use three equal signs almost everywhere I've used to throughout the entire JavaScript portion

191
00:14:12.690 --> 00:14:13.470
of this course.

192
00:14:13.930 --> 00:14:15.900
A lot of people consider that a best practice.

193
00:14:15.900 --> 00:14:22.620
But I am going to be sure to do that here because I don't want undefined to be interpreted as false.

194
00:14:23.160 --> 00:14:23.430
Right.

195
00:14:23.430 --> 00:14:25.500
That initial value of undefined.

196
00:14:25.680 --> 00:14:31.500
So only if it's literally the simple uninterpretable value of false do I want this to happen.

197
00:14:32.880 --> 00:14:37.870
Let's give this a save, and if we test it out, a refresh if I get an answer wrong.

198
00:14:38.520 --> 00:14:39.420
Perfect.

199
00:14:40.890 --> 00:14:46.520
Now, you'll notice that if I try to get another answer wrong, so if I click Dog, nothing happens,

200
00:14:47.040 --> 00:14:51.870
this is because is correct is already set to false from the first time we got to answer.

201
00:14:51.870 --> 00:14:52.650
Incorrect.

202
00:14:52.890 --> 00:14:58.800
So nothing is changing in state, so nothing is going to change in our react.

203
00:14:58.800 --> 00:15:00.800
Has nothing new to react to.

204
00:15:01.290 --> 00:15:06.060
Now, don't worry in our very next lesson will learn how to move forward from here and we'll spend a

205
00:15:06.060 --> 00:15:11.550
bit of time on attention to detail finishing up the front end for our blacktip.

206
00:15:12.090 --> 00:15:14.460
Let's keep things rolling and I'll see you then.
