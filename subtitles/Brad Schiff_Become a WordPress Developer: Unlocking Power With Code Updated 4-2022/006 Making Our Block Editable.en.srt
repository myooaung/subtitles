1
00:00:02,280 --> 00:00:03,210
Hello, everyone.

2
00:00:03,540 --> 00:00:08,250
In this lesson, we're going to work on our banner block so that you can actually edit the content.

3
00:00:08,760 --> 00:00:10,500
Let's jump right into the action.

4
00:00:10,830 --> 00:00:16,110
So in our previous lesson, I had actually jumped into a blog post just to get a quick instance of the

5
00:00:16,110 --> 00:00:17,850
WordPress block editor screen.

6
00:00:17,850 --> 00:00:23,550
But because this chapter is all about full site editing, why don't we dig in to the appearance menu?

7
00:00:23,550 --> 00:00:28,050
Click on editor and let's just begin editing the index template.

8
00:00:28,500 --> 00:00:31,920
So in a previous lesson, you and I had added the query loop block.

9
00:00:32,250 --> 00:00:34,560
It doesn't really matter what is in this template.

10
00:00:34,560 --> 00:00:39,120
We can fine tune that later for now, just anywhere in the template.

11
00:00:39,120 --> 00:00:39,930
It doesn't matter where.

12
00:00:39,930 --> 00:00:43,440
I just want you to insert an instance of our banner block.

13
00:00:44,160 --> 00:00:46,650
So I've added one here to my index template.

14
00:00:46,890 --> 00:00:53,220
Now our goal here is to make it so that you can actually type in different content here for these headlines,

15
00:00:53,460 --> 00:00:58,530
the different text for the button, upload a different background image, choose a different color for

16
00:00:58,530 --> 00:01:00,480
the button, so on and so forth.

17
00:01:01,140 --> 00:01:07,860
Now there are several different ways we could handle this, but I want to aim for maximum flexibility,

18
00:01:08,370 --> 00:01:09,750
and here's what I mean by that.

19
00:01:09,750 --> 00:01:16,740
So we could start shaping the attributes of our block to exactly match the content that we see here.

20
00:01:17,280 --> 00:01:23,040
In other words, we could have an attribute called large headline text value, you know, medium, small

21
00:01:23,040 --> 00:01:24,120
headline text values.

22
00:01:24,120 --> 00:01:28,500
We have an attribute named button, text button, color button, link address.

23
00:01:29,040 --> 00:01:34,830
But if we set things up like that, we'd be locking them in this exact order and this exact combination.

24
00:01:35,220 --> 00:01:41,640
What if in the future we wanted to create a banner that has two medium sized headlines and two buttons,

25
00:01:42,000 --> 00:01:49,260
or three small headlines, or just any possible combination and ordering other than this exact literal

26
00:01:49,260 --> 00:01:50,550
layout that we have here.

27
00:01:50,940 --> 00:01:54,810
So here's what I have in mind to take full advantage of the block editor.

28
00:01:55,080 --> 00:02:01,920
I think it would be cool if this overall banner block allows you to nest other blocks inside it.

29
00:02:02,370 --> 00:02:08,640
Better yet, we can set things up so that you can only add specific block types inside the banner block.

30
00:02:09,090 --> 00:02:15,810
We can create our own new custom block types, for example, called generic headline and generic button

31
00:02:16,140 --> 00:02:16,920
and then make it so.

32
00:02:16,920 --> 00:02:21,420
Those are the only block types allowed to be nested inside the banner block.

33
00:02:21,630 --> 00:02:27,510
But that would allow for all sorts of different combinations and ordering of this content.

34
00:02:27,930 --> 00:02:29,640
I realized that was a lot to absorb.

35
00:02:29,640 --> 00:02:33,120
So if my overall plan there didn't make perfect sense, that's okay.

36
00:02:33,300 --> 00:02:36,090
We're going to work through it together step by step.

37
00:02:36,510 --> 00:02:37,170
Right now.

38
00:02:37,500 --> 00:02:42,690
I think our first step should simply be to jump into that JavaScript file that's powering this block.

39
00:02:43,230 --> 00:02:48,930
So in your text editor with the fictional block theme folder opened up jump into the Our Blocks folder

40
00:02:49,200 --> 00:02:51,180
and open up banner dot js.

41
00:02:52,300 --> 00:02:52,630
Okay.

42
00:02:52,640 --> 00:02:58,270
Now the question becomes, how do we set up a block so that you can nest other blocks inside it?

43
00:02:58,660 --> 00:03:02,180
Well, there's something in WordPress called inner blocks.

44
00:03:02,500 --> 00:03:07,930
So up at the very top of our file and for the next 20 seconds, you don't need to type this in because

45
00:03:07,930 --> 00:03:12,100
I'm going to show you a more modern or quote unquote best practice way of importing it.

46
00:03:12,400 --> 00:03:18,100
But inner blocks lives in the JavaScript that WordPress itself loads into the global window scope of

47
00:03:18,100 --> 00:03:18,760
the browser.

48
00:03:19,030 --> 00:03:26,710
So technically, we can always access it by just saying WP Dot BLOCK Editor Dot inner blocks.

49
00:03:27,190 --> 00:03:33,580
However, since you and I are using the app WordPress Scripts NPM package, right, the official WordPress

50
00:03:33,580 --> 00:03:37,840
JavaScript package, we can just act like we're importing inner blocks.

51
00:03:38,320 --> 00:03:40,840
So now this is the code that you can actually type in with me.

52
00:03:40,850 --> 00:03:49,150
We can just say import and you know, de structures of curly brackets, inner blocks from quotes and

53
00:03:49,150 --> 00:03:54,700
then the NPM package would be at WordPress slash block dash editor.

54
00:03:54,910 --> 00:03:58,690
Now you and I did not even use NPM to install this package name.

55
00:03:58,810 --> 00:03:59,560
That's okay.

56
00:03:59,920 --> 00:04:06,850
The official WordPress Scripts package has web pack configuration and it sets up different aliases.

57
00:04:07,060 --> 00:04:11,740
So when it sees this, it will know to look in the browser global scope.

58
00:04:12,070 --> 00:04:14,320
So this is really just for the benefit of you and I.

59
00:04:14,350 --> 00:04:17,920
We get to write this elegant import code that we're used to writing.

60
00:04:18,310 --> 00:04:22,960
Anyways, the actual point here is, well, how in the world do we use inner blocks?

61
00:04:23,530 --> 00:04:24,550
Well, check this out.

62
00:04:25,000 --> 00:04:27,190
Within our edit component function.

63
00:04:27,490 --> 00:04:31,060
Let's just hollow out this HTML logistics a bit.

64
00:04:31,540 --> 00:04:36,610
Now we don't need to delete it because we're probably going to want this just as a reference in a future

65
00:04:36,610 --> 00:04:37,060
lesson.

66
00:04:37,060 --> 00:04:37,990
So why don't we do this?

67
00:04:38,320 --> 00:04:44,080
Start selecting from the heading level one and select all the way down to where the A or link element

68
00:04:44,080 --> 00:04:44,830
closes.

69
00:04:44,830 --> 00:04:47,230
And let's cut that into our clipboard.

70
00:04:48,220 --> 00:04:49,770
So let's keep that in our clipboard.

71
00:04:49,780 --> 00:04:52,130
We're going to use it in just a moment, but in its place.

72
00:04:52,150 --> 00:04:59,320
So now within this hollowed out HTML, we can just say, well, we're just using the inner blocks component.

73
00:05:00,100 --> 00:05:04,060
Really quick, let's empty our clipboard just so we don't lose that code as a reference.

74
00:05:04,060 --> 00:05:09,250
So maybe within edit component before the return line, let's create a variable.

75
00:05:09,430 --> 00:05:16,080
So contrast use mean later equals parentheses in the parentheses.

76
00:05:16,090 --> 00:05:20,170
Let's start with just a react fragment and then in that react fragment.

77
00:05:20,350 --> 00:05:22,240
So right here you can paste in your clipboard.

78
00:05:22,780 --> 00:05:25,540
So the idea is we're saving this code just as a reference.

79
00:05:25,540 --> 00:05:27,370
We're probably going to want to borrow it later on.

80
00:05:27,970 --> 00:05:32,410
But for now, let's focus on what this inner blocks is going to do.

81
00:05:32,740 --> 00:05:38,710
So this is going to let you click the plus symbol in the block editor to start adding new blocks inside

82
00:05:38,710 --> 00:05:39,430
of this block.

83
00:05:39,820 --> 00:05:42,550
So that takes care of the edit functionality.

84
00:05:42,760 --> 00:05:46,450
Now we need to take care of the saving functionality, right?

85
00:05:46,450 --> 00:05:52,180
So that when someone adds, you know, three headings and five paragraphs into this, we need to save

86
00:05:52,180 --> 00:05:53,680
that into the database somehow.

87
00:05:54,160 --> 00:05:57,730
So why don't we do this instead of this paragraph placeholder?

88
00:05:58,420 --> 00:05:59,150
Let's get rid of that.

89
00:05:59,170 --> 00:06:02,110
Why don't we return an actual bit of HTML?

90
00:06:02,110 --> 00:06:03,070
That makes sense.

91
00:06:03,430 --> 00:06:06,100
So parentheses in the parentheses.

92
00:06:06,100 --> 00:06:08,810
Let's just copy the entire edit code.

93
00:06:08,860 --> 00:06:11,410
So this entire bit of divs in html js.

94
00:06:11,610 --> 00:06:13,810
Just paste that into the return parentheses.

95
00:06:14,800 --> 00:06:15,130
Okay.

96
00:06:15,130 --> 00:06:19,840
And now in our save component function, instead of a component of just inner blocks, we're going to

97
00:06:19,840 --> 00:06:23,290
say inner blocks dot uppercase content.

98
00:06:23,830 --> 00:06:28,870
So this is what's actually going to be output for the block or, you know, get saved into the database.

99
00:06:29,230 --> 00:06:31,360
Let's give this a save and test it out.

100
00:06:32,020 --> 00:06:34,450
You need to make sure that your start task is running.

101
00:06:34,450 --> 00:06:39,280
So in the command line we can just run, NPM, run, start.

102
00:06:41,200 --> 00:06:41,530
Okay.

103
00:06:41,680 --> 00:06:42,760
Back in the browser.

104
00:06:43,090 --> 00:06:47,320
As soon as I refresh, this block is going to be gone because I didn't save this template.

105
00:06:47,350 --> 00:06:47,800
That's okay.

106
00:06:47,800 --> 00:06:50,110
We can just re add it so I'll refresh.

107
00:06:54,800 --> 00:06:58,970
Once again up here, I'll add in my banner block and there you have it.

108
00:06:58,970 --> 00:07:02,030
So you'll notice it says Type Backspace to choose a block.

109
00:07:02,960 --> 00:07:04,850
Or you could use this little plus symbol here.

110
00:07:05,390 --> 00:07:08,840
So right now, we haven't restricted which block types you can use.

111
00:07:09,050 --> 00:07:11,240
So every single block type is available.

112
00:07:11,660 --> 00:07:15,320
But just for a quick test, let's add a paragraph and say hello.

113
00:07:15,860 --> 00:07:19,130
This is a nested element.

114
00:07:20,120 --> 00:07:21,080
Now check this out.

115
00:07:21,080 --> 00:07:27,140
If we actually go ahead and click Save to save the template and then refresh the index on our homepage,

116
00:07:27,770 --> 00:07:29,690
there is the output HTML.

117
00:07:29,870 --> 00:07:33,920
So that's what the save function in our JavaScript file did for us.

118
00:07:34,400 --> 00:07:40,370
It actually saved that JS ax and then it saved any nested blocks into the database.

119
00:07:41,030 --> 00:07:43,900
I think it's helpful to really see what that looks like in the database.

120
00:07:43,910 --> 00:07:48,170
So in admin or if you go into your post table, click Select Data.

121
00:07:48,350 --> 00:07:54,530
Click on the very last page of results and then just scroll down and click edit on the very last post.

122
00:07:54,980 --> 00:07:57,860
You can look in post content and there you see it.

123
00:07:57,890 --> 00:08:00,050
So this is the template we just saved.

124
00:08:00,260 --> 00:08:07,430
WP Our block theme slash banner and there you see our JS acts, right with the classes that we're using

125
00:08:07,430 --> 00:08:11,630
for our success and then nested inside of that, right?

126
00:08:11,630 --> 00:08:12,860
So it starts right about here.

127
00:08:13,070 --> 00:08:17,240
You see a WP paragraph nested inside of our banner.

128
00:08:17,810 --> 00:08:23,850
Next, I want to show you how we can restrict which block types are allowed to be nested here.

129
00:08:24,350 --> 00:08:30,090
So back in our code within our edit component, not in the use me later JS Acts.

130
00:08:30,140 --> 00:08:36,020
Let me scroll down a bit when we're actually returning a bit of gsx and we have the inner blocks component.

131
00:08:36,320 --> 00:08:45,380
We can just give inner blocks a prop of allowed blocks, send it to equal curly brackets inside here,

132
00:08:45,380 --> 00:08:48,730
give it an array and let's give ourselves a goal.

133
00:08:48,740 --> 00:08:54,690
Let's say we only want to allow paragraphs, headings and lists and nothing else.

134
00:08:55,130 --> 00:08:56,570
So quotes.

135
00:08:56,840 --> 00:08:58,160
Core slash.

136
00:08:58,310 --> 00:08:59,150
Paragraph.

137
00:08:59,690 --> 00:09:00,740
Comma quotes.

138
00:09:00,740 --> 00:09:02,120
Core slash heading.

139
00:09:02,690 --> 00:09:03,860
Comma quotes.

140
00:09:04,280 --> 00:09:06,170
Core slash list.

141
00:09:06,980 --> 00:09:11,360
If we give that a save and then back in the edit screen if I refresh.

142
00:09:14,070 --> 00:09:19,500
If I click on to this text and then push enter to try to add a new block and then type forward slash,

143
00:09:19,830 --> 00:09:22,140
I can only choose between heading and list.

144
00:09:22,380 --> 00:09:27,060
It doesn't show paragraph because paragraph is just the default assumed block type.

145
00:09:27,450 --> 00:09:28,260
But there you have it.

146
00:09:28,260 --> 00:09:31,020
We can only use those blocks that we spelled out.

147
00:09:31,650 --> 00:09:32,610
That's pretty cool.

148
00:09:32,790 --> 00:09:36,270
However, I think you can see how this gets much cooler very quickly.

149
00:09:36,630 --> 00:09:41,970
What if we only allow custom block types that you and I create?

150
00:09:42,570 --> 00:09:44,610
Well, that's exactly what we're going to do.

151
00:09:44,880 --> 00:09:51,120
In our very next lesson, we're going to begin working on new custom block types called maybe generic

152
00:09:51,120 --> 00:09:53,130
heading and generic button.

153
00:09:53,820 --> 00:10:00,060
The idea is they're custom blocks and their job will be to output content that mimics this old template

154
00:10:00,060 --> 00:10:00,450
code.

155
00:10:01,410 --> 00:10:01,680
Right?

156
00:10:01,690 --> 00:10:08,220
And instead of core, we'll give them a namespace of our block theme slash and then their specific name.

157
00:10:08,520 --> 00:10:10,290
Just like we've done with this banner block.

158
00:10:10,650 --> 00:10:12,180
I think it'll be a lot of fun to set up.

159
00:10:12,450 --> 00:10:14,880
Let's keep things rolling and I'll see you then.
