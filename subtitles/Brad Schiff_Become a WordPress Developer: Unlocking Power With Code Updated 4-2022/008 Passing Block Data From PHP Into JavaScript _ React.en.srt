1
00:00:02,250 --> 00:00:08,280
Hello, everyone, in this lesson, we're going to learn how to take the attributes for a block type

2
00:00:08,550 --> 00:00:12,300
and pass that data into our client side JavaScript.

3
00:00:12,720 --> 00:00:18,170
Let's begin by assessing the situation so we have our instances of our block type.

4
00:00:18,180 --> 00:00:23,850
I have one instance here and another here, and these are being stored in the database along with the

5
00:00:23,850 --> 00:00:25,860
other content for this post.

6
00:00:25,870 --> 00:00:29,970
So if we look at it in the database, here's the content for that post.

7
00:00:29,980 --> 00:00:32,670
So it starts with a standard default paragraph.

8
00:00:32,820 --> 00:00:36,480
Then we have an instance of our are you paying attention, blacktip?

9
00:00:36,480 --> 00:00:36,690
Right.

10
00:00:36,720 --> 00:00:37,850
There's the attributes.

11
00:00:37,860 --> 00:00:41,490
So there's the question and then there's the array of answers.

12
00:00:41,910 --> 00:00:44,670
The correct answer is the third item in the array.

13
00:00:44,670 --> 00:00:50,180
And then we have another standard paragraph and then another instance of our block with the attributes.

14
00:00:50,190 --> 00:00:52,140
The question, answer, correct answer.

15
00:00:52,440 --> 00:00:59,350
So the challenge of this lesson is how do we get this data, these attributes into JavaScript?

16
00:00:59,730 --> 00:01:07,470
Well, if we jump back to P for a moment, so if you go into your index file within our render callback

17
00:01:07,470 --> 00:01:14,760
function that we named the HTML, we've already seen that you can access the data from this parameter

18
00:01:14,760 --> 00:01:17,010
that we set up dollar sign attributes.

19
00:01:17,280 --> 00:01:23,160
Remember in previous lesson within this function we output today the sky is blank color and then we

20
00:01:23,160 --> 00:01:25,290
dug into the attributes parameter.

21
00:01:25,470 --> 00:01:30,870
But now we don't just want to output traditional static text onto the page.

22
00:01:31,290 --> 00:01:37,140
We need a way to hand the data off to JavaScript and let JavaScript do the work.

23
00:01:37,530 --> 00:01:43,410
Now, here's the tricky part, though, as far as I can see, even after extensively researching this

24
00:01:43,410 --> 00:01:49,940
topic, I don't believe there is a, quote, official WordPress way of handling this.

25
00:01:50,400 --> 00:01:53,310
Now, don't get me wrong, it's not very difficult to set up.

26
00:01:53,550 --> 00:02:00,720
It's just that WordPress itself doesn't really offer any guidance or documentation or functions that

27
00:02:00,720 --> 00:02:01,750
we can use.

28
00:02:02,070 --> 00:02:03,810
So we need to get a little bit creative.

29
00:02:04,170 --> 00:02:10,110
And that means that if you ask a hundred different developers how to use JavaScript and react to render

30
00:02:10,110 --> 00:02:15,330
your block types on the front end, you'll likely get 100 completely different answers.

31
00:02:15,810 --> 00:02:19,790
Having said that, let me show you the approach that I like to use.

32
00:02:20,400 --> 00:02:24,110
So we already have this empty div, right, paying attention.

33
00:02:24,120 --> 00:02:25,020
Update me.

34
00:02:25,410 --> 00:02:28,830
Let's just add a little bit of content inside this div.

35
00:02:29,340 --> 00:02:39,360
So inside it, I'll go into AP and I'm going to echo the results of a function called WP JSON in code.

36
00:02:39,960 --> 00:02:44,850
In these parentheses, let's just give this function our dollar sign attributes.

37
00:02:45,300 --> 00:02:49,770
So dollar sign attributes, let's give this a save.

38
00:02:49,770 --> 00:02:57,600
But before we go test it out, let's update our front end JS file and just temporarily so we can actually

39
00:02:57,600 --> 00:02:59,760
see what the P is outputting.

40
00:03:00,030 --> 00:03:05,010
Let's comment out this line, this line where we're rendering our react components for the start of

41
00:03:05,010 --> 00:03:05,280
that.

42
00:03:05,520 --> 00:03:07,650
Just for a moment, let's comment that out.

43
00:03:07,920 --> 00:03:10,320
So slash, slash, give that a save.

44
00:03:10,560 --> 00:03:14,610
Be sure that your command line is running with NPM run, start.

45
00:03:16,270 --> 00:03:19,620
OK, if we go refresh on the front end, cool.

46
00:03:19,620 --> 00:03:22,650
There's the first instance and there's my second instance.

47
00:03:23,010 --> 00:03:28,020
So to follow what's going on, essentially p loaded that data from the database.

48
00:03:28,020 --> 00:03:35,160
Now in the database it's stored in the JavaScript or JSON syntax and then because we're using a dynamic

49
00:03:35,160 --> 00:03:35,940
block type.

50
00:03:36,330 --> 00:03:43,170
Well when we receive it in our function as attributes that's getting converted into a P array, but

51
00:03:43,170 --> 00:03:48,170
then we can convert it right back into actual JSON with this function.

52
00:03:48,720 --> 00:03:51,570
However, it isn't actually JSON, right.

53
00:03:51,660 --> 00:03:54,240
It's just text being output to a webpage.

54
00:03:54,720 --> 00:03:59,820
For example, these quotes around the properties you can see instead of a simple plain quote, they're

55
00:03:59,820 --> 00:04:03,420
angled quotes, which usually messes up the browsers.

56
00:04:03,420 --> 00:04:06,540
JSON interpreter So here's what I like to do.

57
00:04:06,540 --> 00:04:12,360
If we go back into our FTP, this code that we just wrote that outputs that, let's wrap it within a

58
00:04:12,360 --> 00:04:13,430
pre tag.

59
00:04:13,860 --> 00:04:19,950
So at the start of this we'll say pre for a pre tag and then just close out the pre tag right before

60
00:04:19,950 --> 00:04:24,100
the closing div tag like this if we save that and give that a try.

61
00:04:24,630 --> 00:04:25,010
Cool.

62
00:04:25,020 --> 00:04:28,380
So that puts out the actual true content for the text.

63
00:04:28,380 --> 00:04:34,890
So now that's just a plain quote and we should have no problem parsing this as true JSON.

64
00:04:35,340 --> 00:04:37,110
So let me show you what we're going to do.

65
00:04:37,530 --> 00:04:43,050
We don't need anyone to ever visually see this data, so why don't we just set it to display none,

66
00:04:43,320 --> 00:04:45,090
but it will still exist in the dorm.

67
00:04:45,390 --> 00:04:50,250
So let's do this in our HTML on that pre tag.

68
00:04:50,730 --> 00:04:57,960
Let's just give it an attribute of style and set it to equal display colon none.

69
00:04:58,950 --> 00:05:01,670
OK, so it's hidden now, but it's still a.

70
00:05:01,700 --> 00:05:05,760
Exists in the domme, meaning our JavaScript can very easily access it.

71
00:05:06,110 --> 00:05:07,330
So here's what I would do now.

72
00:05:07,340 --> 00:05:09,020
Let's jump into our front end.

73
00:05:09,260 --> 00:05:15,820
James file within our foreach function right before this comment, that outline, let's create a variable.

74
00:05:16,130 --> 00:05:21,620
So let's say const, you can name it anything, but let's name it data equals.

75
00:05:22,100 --> 00:05:28,190
And then every modern web browser has a function if we look inside all uppercase JSON for a method called

76
00:05:28,190 --> 00:05:28,950
pass.

77
00:05:29,690 --> 00:05:35,330
So you give this a string of text and it will pass it into real usable dynamic JSON.

78
00:05:35,870 --> 00:05:41,750
So in these parentheses I would just say div, which is the current element or the empty div while it's

79
00:05:41,750 --> 00:05:43,790
not empty anymore, but you know what I mean.

80
00:05:44,000 --> 00:05:50,060
The current placeholder div that's been looped to so div dot and then we'll look inside it with query

81
00:05:50,060 --> 00:05:57,950
selector and then give that just a string of text with a CFS like selector of pre then in between the

82
00:05:57,950 --> 00:05:59,240
two closing parentheses.

83
00:05:59,270 --> 00:06:01,760
So right here this is selecting that pre element.

84
00:06:01,760 --> 00:06:04,860
We would just say dot inor html.

85
00:06:05,660 --> 00:06:11,420
So now we have something called data that is all of that attribute data that we wanted.

86
00:06:11,780 --> 00:06:12,560
So check this out.

87
00:06:12,560 --> 00:06:17,930
Let's actually use it and react now so we can remove this comment, let react, actually render our

88
00:06:17,930 --> 00:06:18,650
component.

89
00:06:19,190 --> 00:06:24,040
And when we're rendering our quiz component, let's just give it a property or prop.

90
00:06:24,050 --> 00:06:30,330
So let's say question equals curly brackets and just say data dot question.

91
00:06:30,830 --> 00:06:33,440
So it's just data dot and then any of the attributes.

92
00:06:33,610 --> 00:06:37,250
You could also look for the array of answers or the correct answer property.

93
00:06:37,250 --> 00:06:39,890
But let's just start with question now.

94
00:06:39,890 --> 00:06:44,810
Down here within our actual component definition, within these parentheses, let's be sure to have

95
00:06:44,810 --> 00:06:45,530
a parameter.

96
00:06:45,650 --> 00:06:48,050
The industry standard is to name it props.

97
00:06:48,380 --> 00:06:51,600
And this is just anything that you're passing into the components.

98
00:06:51,600 --> 00:06:53,540
So we gave it something called question.

99
00:06:54,050 --> 00:06:59,570
So just as a test instead of hello from react, let's have curly brackets to do something dynamic and

100
00:06:59,570 --> 00:07:02,390
say props dot question.

101
00:07:03,290 --> 00:07:05,270
Let's give this to save and test it out.

102
00:07:06,320 --> 00:07:08,840
Refresh perfect.

103
00:07:09,940 --> 00:07:15,460
Now, before we start outputting the actual HTML interface for the questions and clickable answers,

104
00:07:15,790 --> 00:07:22,810
I first want to talk about an efficient way to give the data to our component because spelling out each

105
00:07:22,810 --> 00:07:24,700
individual property like this.

106
00:07:24,730 --> 00:07:29,620
Sure, this works, but it's not very efficient for us to type this out for each one.

107
00:07:29,830 --> 00:07:30,110
Right.

108
00:07:30,130 --> 00:07:36,100
We wouldn't want to also have to say answer equals curly brackets, data, not answer and then do the

109
00:07:36,100 --> 00:07:37,570
same thing with correct answer.

110
00:07:37,960 --> 00:07:39,520
So there are a few different options.

111
00:07:39,520 --> 00:07:41,620
You could just say quiz and give it something.

112
00:07:42,160 --> 00:07:49,360
Data equals our entire object and then down in the component, you would access that by saying props

113
00:07:49,360 --> 00:07:51,840
dot data dot question.

114
00:07:51,970 --> 00:07:52,270
Right.

115
00:07:52,270 --> 00:07:56,650
That would work if I save that and refresh it works just the same.

116
00:07:56,980 --> 00:08:03,640
But even that is sort of an extra layer nested DB It would be nice if you could just say props dot question

117
00:08:03,640 --> 00:08:08,860
like this down in the X but have an efficient way to pass it into your component.

118
00:08:09,460 --> 00:08:10,840
Well here's what we can do.

119
00:08:11,410 --> 00:08:12,250
So let's get rid of this.

120
00:08:12,250 --> 00:08:13,420
Data equals data.

121
00:08:14,440 --> 00:08:20,110
We can just say curly brackets, dot, dot, dot data.

122
00:08:20,950 --> 00:08:25,750
This is effectively the same thing as actually spelling out question equals data.

123
00:08:25,750 --> 00:08:29,170
Dot question answers equals data, dot answers.

124
00:08:29,350 --> 00:08:35,670
Now, if you've never seen this three dot syntax before, let me explain how it works in the browsers

125
00:08:35,680 --> 00:08:36,100
console.

126
00:08:36,100 --> 00:08:38,590
Just as an example, you do not need to type this out.

127
00:08:38,890 --> 00:08:45,880
But let's say I have two variables called A and B, and then let's also say I have something called

128
00:08:46,360 --> 00:08:50,200
other, which is an object and it contains two properties.

129
00:08:50,210 --> 00:08:59,800
Let's say it contains a property called C and a property called D, OK, and now imagine I want to create

130
00:08:59,800 --> 00:09:04,990
sort of a grouped object that contains A, B and C and D.

131
00:09:05,800 --> 00:09:08,890
Well, you could say let new combined.

132
00:09:08,890 --> 00:09:09,820
I'm just making up a name.

133
00:09:09,820 --> 00:09:11,830
But here's the syntax in question.

134
00:09:12,610 --> 00:09:13,960
Let that equal.

135
00:09:14,290 --> 00:09:21,010
And so I would create an object where I pull in A comma B and now I don't want to nest this object inside

136
00:09:21,010 --> 00:09:21,880
of this object.

137
00:09:22,150 --> 00:09:30,520
I want to d structure all of the items inside it so you can just say dot, dot, dot, other and JavaScript

138
00:09:30,520 --> 00:09:36,100
will see this and know that it's going to take one by one each property from inside that and add them

139
00:09:36,100 --> 00:09:36,330
here.

140
00:09:36,340 --> 00:09:43,030
So if we push enter and we actually look at what new combined is, it's just an object with A, B,

141
00:09:43,030 --> 00:09:44,110
C and D.

142
00:09:44,620 --> 00:09:49,270
So the dot, dot, dot is a very useful tool in JavaScript for situations like this.

143
00:09:49,850 --> 00:09:51,400
Anyways, the point is down.

144
00:09:51,400 --> 00:09:57,610
In our case, we can now access whatever we want just by saying props dot and then the attribute name.

145
00:09:58,300 --> 00:09:59,440
So why don't we do this?

146
00:09:59,440 --> 00:10:01,060
Let's spell out the basic structure.

147
00:10:01,060 --> 00:10:05,500
We'll have a paragraph tag so just P and then hit tab on your keyboard inside.

148
00:10:05,500 --> 00:10:07,900
It will do something dynamic will output the question.

149
00:10:07,900 --> 00:10:11,830
So props dot question right below that.

150
00:10:11,830 --> 00:10:15,040
Let's have a unordered list with all of the answers.

151
00:10:15,040 --> 00:10:19,360
So you'll hit tab inside the list.

152
00:10:19,360 --> 00:10:21,400
We want to loop through the answers.

153
00:10:21,400 --> 00:10:23,860
So curly brackets to do something dynamic.

154
00:10:24,160 --> 00:10:28,990
Let's start working with that array of answers so its props dot answers.

155
00:10:28,990 --> 00:10:33,070
And then in JavaScript, every array has access to the map method.

156
00:10:33,520 --> 00:10:38,620
We'll give this a function, a function parentheses, curly brackets in our parentheses.

157
00:10:38,620 --> 00:10:45,010
Let's be sure to have a parameter to receive the incoming answer that's currently been looped to and

158
00:10:45,010 --> 00:10:46,690
then inside the body of our function.

159
00:10:47,080 --> 00:10:50,230
We just want to return a little bit of JSA now.

160
00:10:50,230 --> 00:10:56,710
We don't even need parentheses because the parentheses are just for multiline JS X and we only need

161
00:10:56,710 --> 00:11:01,000
one line of JSON or HTML here, which is a list item.

162
00:11:01,000 --> 00:11:03,430
So L I had tab inside it.

163
00:11:03,760 --> 00:11:06,550
We're just going to dynamically output answer.

164
00:11:07,000 --> 00:11:07,300
Right.

165
00:11:07,300 --> 00:11:09,220
The current one that's been looped to.

166
00:11:09,760 --> 00:11:14,920
Let's go ahead and save this and if we refresh the front end, perfect.

167
00:11:15,190 --> 00:11:21,520
However, because we haven't yet let the admin choose the background color of each instance of our block,

168
00:11:21,850 --> 00:11:25,120
there's really nothing for these answers to shine through.

169
00:11:25,360 --> 00:11:30,940
So I want there to be a semi transparent layer around each answer so it looks like a clickable button.

170
00:11:31,330 --> 00:11:34,390
And actually I've already written that CSFs for us.

171
00:11:34,690 --> 00:11:40,360
It's just that we can't see any difference because it's a semi transparent white button on top of a

172
00:11:40,360 --> 00:11:41,410
white background.

173
00:11:41,830 --> 00:11:46,990
So for now, just so we can see what it's going to look like, you can do this with me in our source

174
00:11:46,990 --> 00:11:54,550
folder, jump to front end s success and up towards the very top, maybe right before this first line

175
00:11:54,550 --> 00:11:55,630
of overflow hidden.

176
00:11:55,630 --> 00:12:03,880
We can just say background dash color, Colen hash tag, EBR, semicolon.

177
00:12:04,480 --> 00:12:06,610
We give that a save refresh.

178
00:12:07,000 --> 00:12:07,420
Cool.

179
00:12:07,930 --> 00:12:09,270
So now they look like a.

180
00:12:09,630 --> 00:12:13,200
You can see when you hover over them, they look like they'd be clickable only.

181
00:12:13,230 --> 00:12:14,350
Nothing happens yet.

182
00:12:14,730 --> 00:12:17,310
Now, that is going to bring this video to a close.

183
00:12:17,310 --> 00:12:22,160
But in our very next lesson, we're going to begin to bring this to life.

184
00:12:22,890 --> 00:12:25,100
Let's keep things rolling and I'll see you then.
