WEBVTT
1
00:00:01.670 --> 00:00:02.630
Hello, everyone.

2
00:00:03.110 --> 00:00:08.150
Up until this point in the course, we've been writing code in the language.

3
00:00:08.390 --> 00:00:15.060
However, at this point we're ready to start writing code in an additional language called JavaScript.

4
00:00:15.410 --> 00:00:21.230
Now, while it's certainly possible to simply create a JavaScript file in your text editor, in the

5
00:00:21.230 --> 00:00:27.830
modern era of Web development, it's essentially a requirement to have some sort of build tool that

6
00:00:27.830 --> 00:00:34.400
will combine and compile our various JavaScript files and dependencies into a single file.

7
00:00:34.400 --> 00:00:37.160
That's easy to deliver to the viewers of our site.

8
00:00:37.520 --> 00:00:41.200
And you don't need to just take my word on that to prove it for yourself.

9
00:00:41.210 --> 00:00:45.350
You can simply open up the official twenty twenty one themed folder.

10
00:00:45.560 --> 00:00:47.270
Right, created by WordPress.

11
00:00:47.600 --> 00:00:52.500
In that folder you'll see a file called Packaged JSON Now.

12
00:00:52.520 --> 00:00:58.070
Don't worry, I don't expect you to know what this package JSON file means, but I'm just letting you

13
00:00:58.070 --> 00:01:04.970
know that this is proof that even the official WordPress themes themselves use some sort of build tool

14
00:01:04.970 --> 00:01:08.120
to sort of compile and combine their files.

15
00:01:08.420 --> 00:01:15.110
In other words, it isn't just my own personal preference to make things overly complicated by introducing

16
00:01:15.110 --> 00:01:15.960
a build tool.

17
00:01:16.220 --> 00:01:18.650
This is definitely the industry standard.

18
00:01:19.160 --> 00:01:26.540
Now, in the past, I personally maintained my own JavaScript automation workflow tool to perform those

19
00:01:26.720 --> 00:01:28.760
combining and compiling steps.

20
00:01:29.090 --> 00:01:37.520
But in recent years, the WordPress team has created an official JavaScript tool package called at Symbol

21
00:01:37.520 --> 00:01:39.640
WordPress Scripts.

22
00:01:40.220 --> 00:01:41.660
I love this package.

23
00:01:41.660 --> 00:01:47.180
It requires almost zero configuration on our part and it's super easy to set up.

24
00:01:47.360 --> 00:01:52.010
So this is what we're going to use in this course for all of our JavaScript needs.

25
00:01:52.430 --> 00:01:58.250
So at this point, the question becomes how in the world do we use this official WordPress JavaScript

26
00:01:58.250 --> 00:01:58.640
tool?

27
00:01:59.030 --> 00:02:05.810
Well, luckily, it's very easy, but we do need to make sure first that our personal computer has something

28
00:02:05.810 --> 00:02:09.220
called Node JS installed on it.

29
00:02:09.740 --> 00:02:15.620
If you don't remember ever manually installing no JS on your computer, there's a very good chance that

30
00:02:15.620 --> 00:02:17.780
you don't currently have it installed.

31
00:02:18.090 --> 00:02:24.140
So right now you can do this porres, this video lesson and in a new browser tab, visit the official

32
00:02:24.140 --> 00:02:24.530
site.

33
00:02:24.530 --> 00:02:29.360
It's Node Jast dot org from the homepage.

34
00:02:29.360 --> 00:02:31.790
Just click on one of these to download links.

35
00:02:32.060 --> 00:02:38.270
You can use either the ELTs or long term support version or the current newest version.

36
00:02:38.660 --> 00:02:42.050
It doesn't matter which one you choose, they will both work perfectly.

37
00:02:42.500 --> 00:02:48.170
OK, once you click on one of these and the download finishes, you should be able to just open up that

38
00:02:48.170 --> 00:02:51.640
downloaded file and all of the default options are OK.

39
00:02:51.740 --> 00:02:55.040
So you should be able to just click next, next, next.

40
00:02:55.430 --> 00:03:01.910
Once the installation finishes, we want to test and make sure that node is actually successfully installed

41
00:03:01.910 --> 00:03:02.930
on your computer.

42
00:03:03.170 --> 00:03:06.170
To do that, we're going to jump in to voice code.

43
00:03:06.350 --> 00:03:10.550
Now, if you've been using a different program as your text editor, that's OK.

44
00:03:10.550 --> 00:03:16.490
But I strongly encourage you to try out V code just for this JavaScript section.

45
00:03:16.850 --> 00:03:24.410
I say this because LVS code gives us very easy access to a command line that's already pointing towards

46
00:03:24.440 --> 00:03:25.940
the folder we're working with.

47
00:03:26.360 --> 00:03:31.190
Now, if you're more of a power user and you already understand what a command line is and how to work

48
00:03:31.190 --> 00:03:32.630
with it, then that's fine.

49
00:03:32.630 --> 00:03:34.940
You can use whatever text editor you prefer.

50
00:03:35.300 --> 00:03:41.180
But if you're more of a beginner, I strongly, strongly recommend Visual Studio code.

51
00:03:41.750 --> 00:03:42.620
And here's why.

52
00:03:42.630 --> 00:03:45.860
So right now we need to open up a command line or a terminal.

53
00:03:46.130 --> 00:03:54.620
And within voice code, it's as easy as pressing control J on Windows or command J on Mac.

54
00:03:55.160 --> 00:03:58.610
So you can see that opened up a command line down towards the bottom.

55
00:03:59.150 --> 00:04:05.030
You can also open up this command line by clicking the view menu up in the very top of V code.

56
00:04:05.210 --> 00:04:08.240
And then you should see an option called terminal.

57
00:04:09.080 --> 00:04:12.880
But the keyboard shortcut again is control on Windows Command.

58
00:04:12.890 --> 00:04:15.200
John Mac now in the command line.

59
00:04:15.200 --> 00:04:19.490
You can type this out to make sure that node is now installed on your computer.

60
00:04:19.490 --> 00:04:25.910
It's just node and then a space dash dash version hit enter.

61
00:04:26.090 --> 00:04:30.770
And as long as you see some sort of version number here, you're good to go.

62
00:04:30.770 --> 00:04:31.910
You're in business.

63
00:04:32.480 --> 00:04:38.060
If instead you see command not found or unknown command, you might just need to restart your computer

64
00:04:38.060 --> 00:04:40.580
or at least restart your text editor program.

65
00:04:40.850 --> 00:04:46.880
OK, but from this point forward in the video, I'm going to assume that everyone now has node installed

66
00:04:46.880 --> 00:04:47.720
on their computer.

67
00:04:48.020 --> 00:04:49.370
So where do we go from here?

68
00:04:49.640 --> 00:04:54.380
Or in other words, how do we start using the official WordPress JavaScript tool?

69
00:04:54.890 --> 00:05:01.040
Well, in an effort to make this as simple as possible, we really just need to move over one new file.

70
00:05:01.370 --> 00:05:08.810
Into our theme folder now, remember when we first set up the HTML and CCWs design for our theme, you

71
00:05:08.810 --> 00:05:13.730
might remember we borrowed files from my repo called University Statik.

72
00:05:14.210 --> 00:05:17.090
Remember, we didn't write any of the CFS ourselves.

73
00:05:17.090 --> 00:05:20.090
We just used the CFS from this repo.

74
00:05:20.390 --> 00:05:23.470
If you no longer have these files on your computer, that's OK.

75
00:05:23.480 --> 00:05:30.320
You can just visit this Uttara once again and then use this green code button here and choose download

76
00:05:30.320 --> 00:05:30.740
zip.

77
00:05:31.310 --> 00:05:35.180
The reason I want you to download this folder again, here it is on my desktop.

78
00:05:35.690 --> 00:05:38.390
So it should be a folder called University Static Master.

79
00:05:38.390 --> 00:05:48.170
If you download that zip inside that folder, there is a file named packaged JSON packaged JSON is essentially

80
00:05:48.320 --> 00:05:53.430
the ingredients list or the recipe for your note or JavaScript project.

81
00:05:53.780 --> 00:05:59.780
So right now I want you to move this package, JSON file to live inside your theme folder.

82
00:06:00.020 --> 00:06:05.330
So in your text editor, if you're using voice code and you already have the sidebar opened to your

83
00:06:05.330 --> 00:06:06.950
theme folder, you can just.

84
00:06:06.950 --> 00:06:07.250
Right.

85
00:06:07.250 --> 00:06:12.100
Click on a file and choose reveal in finder or show in Explorer.

86
00:06:13.070 --> 00:06:14.630
So that pulls up this window.

87
00:06:14.660 --> 00:06:16.070
This is my theme folder.

88
00:06:16.220 --> 00:06:23.450
So now I'm just going to move that package JSON file into my theme folder.

89
00:06:24.370 --> 00:06:31.190
OK, now in our text editor, you can go ahead and actually open up package DOT JSON and we can talk

90
00:06:31.190 --> 00:06:33.390
a little bit about what's included in this file.

91
00:06:33.890 --> 00:06:39.510
Let's actually begin down at the very bottom of this file with this dependencies area.

92
00:06:39.950 --> 00:06:45.530
So there it is, the official WordPress JavaScript package that we looked at earlier, I've already

93
00:06:45.530 --> 00:06:48.800
listed that are included that here as a dependency for us.

94
00:06:49.430 --> 00:06:55.090
Glide is the JavaScript that powers the slideshow animation on our homepage.

95
00:06:55.370 --> 00:07:01.820
Normalize is sort of just an overall success reset that sets all browsers to have a baseline padding

96
00:07:01.820 --> 00:07:03.620
and margin for basic elements.

97
00:07:03.890 --> 00:07:08.240
And then Axios is something we'll use later in the course for network requests.

98
00:07:08.690 --> 00:07:15.800
So big picture this package JSON file is really just a recipe or ingredients list, and these are the

99
00:07:15.800 --> 00:07:17.600
four ingredients that we're going to need.

100
00:07:18.140 --> 00:07:24.560
So now to actually download or install these four things, all we need to do down in the command line.

101
00:07:24.680 --> 00:07:27.710
And again, this is why I'm such a fan of VST code.

102
00:07:27.890 --> 00:07:31.760
So we need our command line to be pointing towards our theme folder.

103
00:07:32.120 --> 00:07:38.150
But instead of having to type code for change directory and then manually navigating into this folder

104
00:07:38.270 --> 00:07:44.540
with VTS code, as long as your sidebar project is pointing towards your desired folder, well, that's

105
00:07:44.540 --> 00:07:48.650
the same directory or folder your command line will automatically point towards.

106
00:07:49.190 --> 00:07:50.660
So run this command with me.

107
00:07:50.660 --> 00:07:54.010
It's just npm install.

108
00:07:54.470 --> 00:07:59.630
When we installed the node on our computer, it also gave us a tool called NPM, which stands for Node

109
00:07:59.630 --> 00:08:07.340
Package Manager, and then this installed command will just look at our packaged JSON file and automatically

110
00:08:07.340 --> 00:08:10.550
go download and install all of our dependencies.

111
00:08:11.300 --> 00:08:18.290
So let's just press enter on this NPM install command and now even on a very fast computer and Internet

112
00:08:18.290 --> 00:08:20.960
connection, this will take a minute or two.

113
00:08:22.250 --> 00:08:28.490
But when it finally does complete, we're now ready to actually use the official WordPress JavaScript

114
00:08:28.490 --> 00:08:29.210
package.

115
00:08:29.870 --> 00:08:35.810
If we scroll up just a little bit in the package JSON file, this is where the scripts area comes into

116
00:08:35.810 --> 00:08:36.230
play.

117
00:08:36.500 --> 00:08:40.910
In particular, these two tasks or scripts named Build and Start.

118
00:08:41.330 --> 00:08:46.010
Let's first learn how to use the START task and then after that we can cover build.

119
00:08:46.520 --> 00:08:52.730
So do this with me down in the command line type npm run start.

120
00:08:54.100 --> 00:09:00.010
Go ahead and press enter and now this start script will just continue to run in the background, so

121
00:09:00.010 --> 00:09:03.490
it's going to continue running until we explicitly tell it to stop.

122
00:09:03.760 --> 00:09:06.910
And what it's doing in the background is it's watching us.

123
00:09:07.120 --> 00:09:10.560
It's watching for when we save changes to our files.

124
00:09:11.200 --> 00:09:18.340
So to explain how this works does with me in your sidebar look for the S.R. See folder, go into it

125
00:09:18.340 --> 00:09:26.140
and look for the file named Index Jass within that file, maybe down at the very bottom here.

126
00:09:26.350 --> 00:09:33.400
Let's just add an annoying alert JavaScript pop up just as a test so we can say alert parentheses to

127
00:09:33.400 --> 00:09:38.650
call that, give it a string of text and say just a test.

128
00:09:39.130 --> 00:09:44.710
Now, as soon as I save that, you'll see that new text appeared down in the command line because the

129
00:09:44.740 --> 00:09:50.170
official WordPress JavaScript package is re bundling up our compiled JavaScript.

130
00:09:50.650 --> 00:09:57.270
And now if I go back to my website and refresh perfect, we see that alert message, just a test.

131
00:09:58.540 --> 00:10:00.490
So let's talk about what's going on here.

132
00:10:00.910 --> 00:10:06.670
And first of all, I do want to point out that this folder absolutely needs to be named SIRC.

133
00:10:06.970 --> 00:10:13.270
So the WordPress JavaScript tool is looking specifically for a folder with that exact name, and then

134
00:10:13.270 --> 00:10:18.550
it's specifically looking for a file with the exact name of Index Jass.

135
00:10:19.060 --> 00:10:22.270
So essentially the SC folder, this is our source code.

136
00:10:22.450 --> 00:10:25.600
This is optimized to be readable by you and I.

137
00:10:26.140 --> 00:10:32.950
Then the WordPress JavaScript tool bundles it all up, compiles it up into a single file and that all

138
00:10:32.950 --> 00:10:34.630
lives in the build folder.

139
00:10:35.140 --> 00:10:38.380
So if you look in the build folder, here's a file named index.

140
00:10:39.190 --> 00:10:45.280
And if you click on that notice, this file is not very easy to read for humans.

141
00:10:45.490 --> 00:10:48.280
So you and I never directly edit this file.

142
00:10:48.550 --> 00:10:54.520
All of the JavaScript that we will actually work with in type and code ourselves lives in the Essere

143
00:10:54.520 --> 00:10:55.540
source folder.

144
00:10:55.780 --> 00:11:02.950
And then any time we save a change to these files, well, that start task is in the background running

145
00:11:02.950 --> 00:11:08.610
and watching for our saved changes and it's going to rebundle it all up into the build folder.

146
00:11:08.920 --> 00:11:18.580
Now, what's cool is the official WordPress JavaScript package also handles CSC and even SAS or success.

147
00:11:18.940 --> 00:11:27.730
So you'll notice at the top of our index JS file I'm importing a success file and then the WordPress

148
00:11:27.760 --> 00:11:33.750
workflow tool is smart enough to split that out into its own separate CFS file.

149
00:11:34.360 --> 00:11:40.570
So, again, just to be clear, you and I never, ever directly edit a file in the build folder.

150
00:11:41.080 --> 00:11:46.690
These are simply Viksund JavaScript files that we load within our functions file.

151
00:11:47.260 --> 00:11:47.500
Right.

152
00:11:47.500 --> 00:11:51.340
These are optimized for Web browsers, not for you and dayas developers.

153
00:11:51.760 --> 00:11:58.120
Anyways, though, if we wanted to make an example, Xchange, you could dig into the CSC folder in

154
00:11:58.120 --> 00:12:05.860
the root of our theme, go into modules and just for a quick test, if you jump into headline success

155
00:12:06.160 --> 00:12:11.020
and for this large Ruel, maybe right inside the rule, I'll say colour should be yellow.

156
00:12:11.320 --> 00:12:14.860
And if I save that and then refresh the front end.

157
00:12:15.340 --> 00:12:17.860
Well, in just a moment we can get rid of that JavaScript alert.

158
00:12:17.860 --> 00:12:20.170
But notice this text is yellow.

159
00:12:20.800 --> 00:12:21.730
Let me get rid of that.

160
00:12:21.730 --> 00:12:23.770
I don't actually want that in place.

161
00:12:23.770 --> 00:12:29.050
And then also, once you've tested and confirmed that you've seen this alert pop up, we don't actually

162
00:12:29.050 --> 00:12:30.610
want that so you can get rid of it.

163
00:12:31.260 --> 00:12:37.150
OK, the point is, though, is the start task is going to continue watching until you tell it to stop.

164
00:12:37.740 --> 00:12:39.120
So how do we tell it to stop?

165
00:12:39.130 --> 00:12:45.580
Well, you just click onto the command line so it has your focus and then press control and see on your

166
00:12:45.580 --> 00:12:46.210
keyboard.

167
00:12:46.720 --> 00:12:47.770
Practice makes perfect.

168
00:12:47.770 --> 00:12:52.080
So if you wanted to start it up again, it's just npm run, start.

169
00:12:52.990 --> 00:12:57.430
Let's talk about this other task that we saw in packaged JSON called Build.

170
00:12:57.850 --> 00:13:02.260
It's essentially the exact same thing as start only it doesn't run in the background.

171
00:13:02.260 --> 00:13:10.120
It just runs once so you can run, npm, run, build and that's going to take all of your source code

172
00:13:10.120 --> 00:13:11.560
from the Sarsae folder.

173
00:13:11.710 --> 00:13:15.730
It's going to bundle up your JavaScript and CSFs out into the build folder.

174
00:13:16.060 --> 00:13:16.780
But that's it.

175
00:13:16.780 --> 00:13:18.730
It's just going to do it that one time.

176
00:13:19.210 --> 00:13:24.670
So it's useful to have in certain situations, but 99 percent of the time you're going to want to use

177
00:13:24.670 --> 00:13:28.060
the START task and just let it run in the background.

178
00:13:28.300 --> 00:13:30.970
That way you don't have to think about it and it's watching.

179
00:13:30.970 --> 00:13:36.300
And any time you save a change to your files, everything just gets automatically bundled up for you.

180
00:13:36.640 --> 00:13:42.550
So throughout the rest of this entire course, whenever we work on any sort of JavaScript code together,

181
00:13:42.700 --> 00:13:49.060
remember that in your command line you'll want to run the NPM run start command.

182
00:13:49.780 --> 00:13:53.380
Now, before we bring this lesson to a close, you might be wondering where my.

183
00:13:53.500 --> 00:13:59.490
Sarsae folder came from, for example, maybe you don't have the Sarsae folder in your theme folder,

184
00:13:59.950 --> 00:14:04.750
so if you're wondering how to get this folder in the files that it contains, just think back to when

185
00:14:04.750 --> 00:14:08.290
we first set up the HTML and success for this theme.

186
00:14:08.530 --> 00:14:12.280
Remember, we borrowed code from this repository.

187
00:14:12.760 --> 00:14:18.580
So in the exact same repo that we downloaded a zip of earlier in this video, remember, the university

188
00:14:18.600 --> 00:14:27.750
static master folder will remember that that folder contains build success images and SIRC folders.

189
00:14:28.090 --> 00:14:31.060
So this one repo has all of the files that you'll need.

190
00:14:31.360 --> 00:14:36.190
Also, if you're confused and you're looking for a working example of what we just set up in this lesson,

191
00:14:36.460 --> 00:14:42.370
remember that there's a downloadable zip at the end of each lesson and this lesson in particular, you

192
00:14:42.370 --> 00:14:48.300
can download that, extract it, and then you'll have the exact same files and setup that I have here.

193
00:14:48.700 --> 00:14:55.000
On that note, however, the zip files at the end of a lesson, they do not contain this node underscore

194
00:14:55.000 --> 00:14:59.790
modules folder because this folder can become very large and file size.

195
00:15:00.220 --> 00:15:01.960
So what in the world is this folder?

196
00:15:02.170 --> 00:15:08.740
Well, remember in the command line when we ran the NPM install command and that downloaded all of the

197
00:15:08.740 --> 00:15:09.730
dependencies.

198
00:15:10.150 --> 00:15:15.520
Well, this node modules folder, this is where it saves all of those downloaded files.

199
00:15:15.730 --> 00:15:18.640
So there's no need to back those up in a zip file.

200
00:15:18.940 --> 00:15:24.190
Or if you're familiar with GIT, there's no need to keep this folder inversion control because you can

201
00:15:24.190 --> 00:15:30.010
always recreate this folder perfectly by simply using the NPM install command.

202
00:15:30.460 --> 00:15:31.600
OK, but big picture.

203
00:15:31.600 --> 00:15:38.890
Before you move on to the next lesson, I want everyone to be able to run NPM run, start from their

204
00:15:38.890 --> 00:15:40.570
command line, OK?

205
00:15:40.570 --> 00:15:46.570
And when you run that and when you make your sample change into this file and add the alert test message

206
00:15:46.780 --> 00:15:52.270
that you should then see on your front end, well, not only should you see this alert pop up message,

207
00:15:52.270 --> 00:15:56.120
but your slide show down on the homepage that should still be working as well.

208
00:15:56.550 --> 00:15:56.940
Cool.

209
00:15:57.130 --> 00:16:02.440
Having said all of that, we're now ready to move on and write JavaScript when and where we need to.

210
00:16:02.680 --> 00:16:06.400
Let's keep things rolling and I'll see you in the next lesson.
