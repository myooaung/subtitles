WEBVTT
1
00:00:01.980 --> 00:00:03.040
Hello, everyone.

2
00:00:03.450 --> 00:00:11.130
In this lesson, we will give basic subscriber roll users permission to create and manage their own

3
00:00:11.130 --> 00:00:11.910
notes.

4
00:00:12.240 --> 00:00:19.020
And most importantly, we will learn how to do this in a way that does not hurt the security or performance

5
00:00:19.020 --> 00:00:20.070
of our website.

6
00:00:20.520 --> 00:00:23.790
So without further ado, let's dive right into the action.

7
00:00:24.220 --> 00:00:27.240
OK, so here we are on the my notes page.

8
00:00:27.510 --> 00:00:35.160
And throughout the last several lessons, we've set up the ability to create update and delete note

9
00:00:35.160 --> 00:00:35.930
posts.

10
00:00:36.300 --> 00:00:42.270
However, we've been logged in with our admin accounts for the last several lessons.

11
00:00:42.510 --> 00:00:48.930
And remember that our ultimate goal for the My Notes feature is that we want random subscriber accounts

12
00:00:48.930 --> 00:00:55.250
to be able to take notes, and we have yet to set up custom permissions for the note posted.

13
00:00:55.560 --> 00:01:01.810
And the default permissions say that only admins, editors and authors can create posts.

14
00:01:02.190 --> 00:01:05.640
So right now, follow along with me in this window.

15
00:01:05.640 --> 00:01:11.730
I'm currently logged in with my admin account, but over in this window there's private window.

16
00:01:11.970 --> 00:01:19.710
I'm going to log in with my subscriber account so we can use the top right login button and go ahead

17
00:01:19.710 --> 00:01:24.690
and log in with the test account that you created back in the open registration chapter.

18
00:01:24.960 --> 00:01:29.160
In my case, I named my test subscriber account, Kitty Doe.

19
00:01:29.700 --> 00:01:31.410
OK, so go ahead and log in.

20
00:01:31.800 --> 00:01:35.790
And now with this subscriber account, let's try to visit the my notes page.

21
00:01:36.570 --> 00:01:42.990
And just a quick tip before you actually fill out the form and try to create a note, I recommend not

22
00:01:42.990 --> 00:01:46.330
using the preview proxy server in your second browser.

23
00:01:46.800 --> 00:01:49.110
This has nothing to do with WordPress.

24
00:01:49.380 --> 00:01:53.400
It's just an issue related to our live reload workflow feature.

25
00:01:53.760 --> 00:01:58.680
Basically in any secondary windows where I want to log in as a different account.

26
00:01:58.830 --> 00:02:05.160
I recommend just visiting the actual dev domain that you've set up, whether that's fictional university

27
00:02:05.160 --> 00:02:14.610
dot dev or the Eurail that map Zamp or Wamp gives you, I'd use that instead of the localhost 3000 that

28
00:02:14.610 --> 00:02:16.710
are live reload feature gives us.

29
00:02:17.010 --> 00:02:23.750
Because in the past I've seen issues where if you send off an Ajax request in one browser where you

30
00:02:23.760 --> 00:02:30.060
are logged in as user A, it can potentially send out that request for all open browsers connected to

31
00:02:30.060 --> 00:02:34.880
localhost three thousand where you might be logged in as user B or user C.

32
00:02:35.160 --> 00:02:41.430
So long story short, I would only visit localhost three thousand for one user session.

33
00:02:41.610 --> 00:02:47.520
If you need to log in with other accounts and other browser windows, just be sure to visit the actual

34
00:02:47.520 --> 00:02:49.270
you are out of your site.

35
00:02:49.620 --> 00:02:55.230
OK, now with that out of the way, let's try to create a note with our subscriber account.

36
00:02:56.040 --> 00:02:58.110
So testing one, two, three.

37
00:02:58.140 --> 00:03:00.840
Hello, click create.

38
00:03:01.170 --> 00:03:03.810
And I'm noticing that it's not being added down here.

39
00:03:03.810 --> 00:03:09.390
So if I check the console, we see a forbidden error as well as sorry.

40
00:03:09.780 --> 00:03:12.120
And the official response from WordPress.

41
00:03:14.340 --> 00:03:21.450
Says, sorry, you are not allowed to create posts as this user, so to fix this, let's go give the

42
00:03:21.450 --> 00:03:25.350
subscriber Rolle permission to create note posts.

43
00:03:25.710 --> 00:03:27.960
To do this, jump into your text editor.

44
00:03:28.320 --> 00:03:34.440
And instead of your theme folder, I want you to look in your Mbewe or must use plugins folder.

45
00:03:34.770 --> 00:03:41.460
And if we jump within this file where we register our custom post types, let's scroll down to the note

46
00:03:41.460 --> 00:03:46.640
post type and we want to add a few new properties to this associative array.

47
00:03:47.310 --> 00:03:52.080
Doesn't matter where you could do it up at the top or down at the bottom, but let's just add a new

48
00:03:52.080 --> 00:03:59.940
line and say capability type equals and then make up a unique name.

49
00:04:00.360 --> 00:04:05.040
So I'm just going to say note, it doesn't need to match the custom post name.

50
00:04:05.490 --> 00:04:12.030
It just needs to be something unique because remember, by default, custom post types inherit their

51
00:04:12.030 --> 00:04:15.010
permissions from the blog post type.

52
00:04:15.270 --> 00:04:22.200
So by saying capability type equals something new and unique, we are setting up brand new permissions

53
00:04:22.410 --> 00:04:24.860
that only apply to this post type.

54
00:04:25.170 --> 00:04:34.440
OK, and then right below this, let's also include Matt Medda CAP, which stands for capability and

55
00:04:34.440 --> 00:04:35.970
let's set that to equal.

56
00:04:35.970 --> 00:04:43.620
True, this line of code will actually enforce and require the permissions at the right time and at

57
00:04:43.620 --> 00:04:44.640
the right place.

58
00:04:45.000 --> 00:04:46.980
OK, let's go ahead and save this.

59
00:04:46.980 --> 00:04:51.520
And then back in the window where we are logged in as the admin account.

60
00:04:51.960 --> 00:04:58.950
Let's jump over to the dashboard and let's hover over users in the sidebar and then click on roles,

61
00:05:00.000 --> 00:05:00.290
OK?

62
00:05:00.900 --> 00:05:03.120
And we need to do two things.

63
00:05:03.540 --> 00:05:03.960
No.

64
00:05:03.960 --> 00:05:09.930
One, obviously, is that we want to give the subscriber role permissions to work with the note post

65
00:05:09.930 --> 00:05:10.380
type.

66
00:05:10.620 --> 00:05:17.970
But we also want to be sure to give our administrator role full and complete access to those new permissions.

67
00:05:18.390 --> 00:05:22.740
Let's take care of our administrator role first, so click on administrator.

68
00:05:23.070 --> 00:05:28.230
And thanks to that new code that we wrote just a moment ago, we now see a notes tab.

69
00:05:28.230 --> 00:05:35.220
So click on notes and I'm just going to grant the administrator role full capabilities.

70
00:05:35.460 --> 00:05:38.280
So I'm going to select every single box here.

71
00:05:40.480 --> 00:05:49.060
And then click update and you might need to manually refresh, but now you can see that the admin once

72
00:05:49.060 --> 00:05:52.420
again has access to the notes post type.

73
00:05:52.840 --> 00:05:58.930
OK, now let's go take care of the real task at hand, which is giving the subscriber role the necessary

74
00:05:58.930 --> 00:05:59.830
permissions.

75
00:06:00.280 --> 00:06:07.030
So under the user sidebar menu, click on roles again and I'm going to edit the subscriber role.

76
00:06:09.130 --> 00:06:16.240
And we want to be very selective over what we give this role because we absolutely do not and cannot

77
00:06:16.240 --> 00:06:18.400
trust subscriber users.

78
00:06:18.800 --> 00:06:21.000
They could very well be malicious users.

79
00:06:21.340 --> 00:06:28.600
So the only capabilities that I'm going to grant live within the notes tab and we only need to grant

80
00:06:28.600 --> 00:06:32.560
a few of these, we definitely do not want to grant all of them.

81
00:06:33.130 --> 00:06:36.850
So first, let's grant the published notes ability.

82
00:06:37.630 --> 00:06:37.930
Right.

83
00:06:37.930 --> 00:06:44.110
We want them to be able to create a new note and then we want them to be able to edit or make changes

84
00:06:44.110 --> 00:06:45.150
to those notes.

85
00:06:45.160 --> 00:06:52.240
So I will grant edit notes and this edit notes ability will let them make edits to a draft.

86
00:06:52.240 --> 00:07:00.010
But if we want them to be able to edit finalized published notes, we want to be sure to grant edit

87
00:07:00.010 --> 00:07:02.020
published notes down here.

88
00:07:02.450 --> 00:07:06.940
OK, and finally, we also want them to be able to delete their own notes.

89
00:07:07.450 --> 00:07:14.500
So I will grant delete notes, but make sure that you absolutely do not grant delete others notes.

90
00:07:14.920 --> 00:07:15.250
Right.

91
00:07:15.250 --> 00:07:19.770
We only want them to be able to edit or delete notes that they are the author of.

92
00:07:20.170 --> 00:07:24.730
And again, this delete notes ability will let them delete rough drafts.

93
00:07:25.090 --> 00:07:30.970
But if we want them to be able to delete their finalized published notes, we want to be sure to grant

94
00:07:31.180 --> 00:07:33.230
delete published notes.

95
00:07:33.730 --> 00:07:40.330
OK, so make sure that you only grant those five capabilities and then lets click update.

96
00:07:42.770 --> 00:07:49.760
OK, and now with those capabilities in place, let's jump back to the other window where we are signed

97
00:07:49.760 --> 00:07:59.360
in with our subscriber account and let's try to create a note cat note number one, lorem ipsum test,

98
00:07:59.840 --> 00:08:02.440
click, create perfect.

99
00:08:02.450 --> 00:08:08.000
The note was successfully created and we can try to make an update or edit to the note.

100
00:08:09.530 --> 00:08:17.550
Modified cat note down here, up dated lorem ipsum click save.

101
00:08:18.060 --> 00:08:23.170
Cool, the fact that we got kicked out of edit mode tells us that the request was successful.

102
00:08:23.570 --> 00:08:26.650
And finally, let's test out the delete ability.

103
00:08:28.110 --> 00:08:28.800
Perfect.

104
00:08:29.250 --> 00:08:36.330
Now, let's change gears and talk about privacy, because we want these notes to be private, meaning

105
00:08:36.330 --> 00:08:43.360
only the author or creator of a post should be able to view it now in order to test out our privacy.

106
00:08:43.380 --> 00:08:47.490
Why don't we create another new note with our subscriber account?

107
00:08:48.630 --> 00:08:54.480
So new cat note lorem ipsum testing.

108
00:08:54.480 --> 00:08:56.460
One, two, three, click create.

109
00:08:57.950 --> 00:09:04.520
OK, and in a perfect world, only this user account would be able to view this new note.

110
00:09:04.800 --> 00:09:09.990
However, the rest API is creating a huge gap in our privacy.

111
00:09:10.410 --> 00:09:11.710
Let me show you what I mean.

112
00:09:11.730 --> 00:09:16.830
So as of right now, you don't even need to be logged in to our website at all.

113
00:09:17.220 --> 00:09:21.260
Just any random stranger can visit this rest API.

114
00:09:21.270 --> 00:09:26.310
You are so WP, JSON, WP, V to note.

115
00:09:26.700 --> 00:09:35.300
And if anyone visits that you are WordPress is going to send them back the raw JSON for all note posts.

116
00:09:35.670 --> 00:09:39.930
So someone that doesn't even have an account on our website can visit this.

117
00:09:39.930 --> 00:09:48.480
You are out and see that there is a note named New Cat Note and that there's a note named Hello World

118
00:09:48.480 --> 00:09:49.470
Five Thousand.

119
00:09:50.810 --> 00:09:58.100
And another sample post, you get the idea and they can even see the content for each note, right?

120
00:09:58.130 --> 00:10:01.010
So for this note, the content was, hi, hey, hello.

121
00:10:01.580 --> 00:10:04.730
So obviously, this is a huge gap in our privacy.

122
00:10:04.940 --> 00:10:07.490
And the question becomes, how do we fix this?

123
00:10:07.790 --> 00:10:13.540
Well, luckily, we can leverage a WordPress native feature of private content.

124
00:10:13.940 --> 00:10:15.210
Let me show you what I mean.

125
00:10:15.290 --> 00:10:21.770
So first, just as a test, let's take note of the first item that we see in the resulting JSON.

126
00:10:22.430 --> 00:10:22.690
Right.

127
00:10:22.700 --> 00:10:26.420
It's the note post that has a title of new cat note.

128
00:10:26.790 --> 00:10:30.880
OK, and let me show you how we can take advantage of private content.

129
00:10:31.610 --> 00:10:37.970
So back in the window where you are logged in with your admin account, I want you to click on notes

130
00:10:37.970 --> 00:10:44.250
in the sidebar and let's find that most recent note that was created by our subscriber role.

131
00:10:44.990 --> 00:10:46.100
Go ahead and click on it.

132
00:10:46.910 --> 00:10:53.440
And over in the right hand column under visibility, let's click, edit and choose private.

133
00:10:53.990 --> 00:10:55.530
OK, let's go ahead and update.

134
00:10:56.630 --> 00:11:04.430
OK, and now that this post is private, if we go back to Postman and send out another request to this,

135
00:11:04.430 --> 00:11:10.970
you r-al notice that the new cat post is no longer visible right now.

136
00:11:10.970 --> 00:11:15.560
The newest post that we see in this JSON is Hello World five thousand.

137
00:11:15.860 --> 00:11:22.520
Now, just as a test, why don't we go back into the admin dashboard and click on notes and let's just

138
00:11:22.520 --> 00:11:29.510
set all of these note posts to be private as well so you can just check the checkbox next to all of

139
00:11:29.510 --> 00:11:29.810
them.

140
00:11:30.950 --> 00:11:35.930
And then under Bulc actions, we can choose, edit and then click apply.

141
00:11:36.470 --> 00:11:44.570
And then within this bulk edit user interface under status, let's just choose private and then click

142
00:11:44.570 --> 00:11:45.230
update.

143
00:11:46.590 --> 00:11:53.510
OK, so now all of our posts are private and now if someone tries to visit the rest API, you are well

144
00:11:54.890 --> 00:11:56.900
they will literally see nothing.

145
00:11:57.320 --> 00:11:58.310
And that's perfect.

146
00:11:58.310 --> 00:12:00.030
That's exactly what we want.

147
00:12:00.470 --> 00:12:07.880
So now we have proper privacy, but obviously we can't manually go into the dashboard and edit every

148
00:12:07.880 --> 00:12:09.890
post by hand to be private.

149
00:12:10.250 --> 00:12:17.660
Instead, we need an automatic way or a programmatic way of setting all note posts to be private.

150
00:12:18.020 --> 00:12:22.080
And the first step towards setting that up has to do with our JavaScript.

151
00:12:22.520 --> 00:12:28.910
So back in the window where we are a subscriber account, when we fill out and submit this form, that's

152
00:12:28.910 --> 00:12:32.270
going to send off a request to the rest API.

153
00:12:32.510 --> 00:12:37.250
So our first step is to modify that request that gets sent off.

154
00:12:37.880 --> 00:12:40.520
So right now, let's jump into our text editor.

155
00:12:40.970 --> 00:12:48.050
And instead of our Mute Plugins folder, I want you to jump in to our theme folder and within the JSE

156
00:12:48.050 --> 00:12:49.720
and then the modules folder.

157
00:12:49.970 --> 00:12:57.200
Let's jump into my notes, Jass, and let's scroll down until we find our method that is named create

158
00:12:57.200 --> 00:12:57.800
note.

159
00:12:58.340 --> 00:12:59.090
Here it is.

160
00:12:59.240 --> 00:13:02.960
And I want to focus on this, our new post object.

161
00:13:03.290 --> 00:13:07.120
So this is where we are setting up the data that we want to send to the server.

162
00:13:07.400 --> 00:13:12.050
We are specifying the title, the body content and the status.

163
00:13:12.470 --> 00:13:20.520
So if we want this new post to be private, we can just change status, publish two status private.

164
00:13:21.050 --> 00:13:27.290
So if I go ahead and save that and then make sure that your JavaScript is getting bundled, but then

165
00:13:27.290 --> 00:13:36.020
if we jump back to the front end and refresh and if I try to create a brand new note, cat note number

166
00:13:36.020 --> 00:13:40.910
two, lorem ipsum two and click create note.

167
00:13:42.500 --> 00:13:48.080
Cool, we see that that note was created, but most importantly, if we jump back to the window where

168
00:13:48.080 --> 00:13:56.000
we are logged in with our admin account and refresh the note screen here, we see that brand new post

169
00:13:56.000 --> 00:13:58.640
that we just created and perfect.

170
00:13:58.640 --> 00:14:01.800
We can see that it was successfully set to private.

171
00:14:02.270 --> 00:14:07.970
Now, if we lived in a perfect world where we could trust everyone on the planet, our work here would

172
00:14:07.970 --> 00:14:08.540
be done.

173
00:14:09.230 --> 00:14:10.580
But that's not reality.

174
00:14:10.970 --> 00:14:12.300
Let me explain what I mean.

175
00:14:12.320 --> 00:14:20.150
So back in our JavaScript, we cannot trust this value of status because it's very easy for a malicious

176
00:14:20.150 --> 00:14:27.830
user to modify their client side JavaScript and change this to say status publish.

177
00:14:28.340 --> 00:14:34.250
Now, even though 99 percent of visitors will not do this, we need to protect ourselves from the one

178
00:14:34.250 --> 00:14:37.040
percent of malicious users that would do this.

179
00:14:37.490 --> 00:14:43.970
So just as a privacy and security test, I'm going to set this back to status, publish, go ahead and

180
00:14:43.970 --> 00:14:50.680
save, because we cannot rely on a client site feature to force a certain status.

181
00:14:51.080 --> 00:14:57.230
We need to set up something on the server side that enforces that the post must be private.

182
00:14:57.560 --> 00:15:01.810
So right now, let me show you how we could set that up within our theme folder.

183
00:15:01.820 --> 00:15:06.320
I want you to jump in to our functions dot p p file.

184
00:15:06.860 --> 00:15:13.960
Let's go ahead and scroll down to the very bottom and let's add a new line or a new comment and say

185
00:15:14.510 --> 00:15:19.460
false note posts to be private.

186
00:15:20.090 --> 00:15:25.370
OK, and then let's use the WordPress method named add filter.

187
00:15:27.200 --> 00:15:34.360
And what we want to do is write before a post gets saved into the database or updated in the database.

188
00:15:34.700 --> 00:15:41.750
We want to intercept that action and we want to filter or modify the data that's going to be put into

189
00:15:41.750 --> 00:15:42.700
the database.

190
00:15:43.130 --> 00:15:49.370
So within the parentheses for add filter, the name of the WordPress filter hook that we want to use

191
00:15:49.370 --> 00:16:01.400
is WP insert post data and this is one of the most powerful and flexible filter hooks in all of WordPress.

192
00:16:01.670 --> 00:16:05.660
OK, then for the second argument, we just get to make up a function name.

193
00:16:06.080 --> 00:16:12.770
Why don't we call it make note private, but you could name this whatever you want.

194
00:16:13.190 --> 00:16:18.100
And then on a new line, let's create a function with this exact matching name.

195
00:16:18.830 --> 00:16:25.640
So function make note, private parentheses, curly brackets.

196
00:16:26.300 --> 00:16:31.220
OK, and I want you to think of this function Evars as literally a filter.

197
00:16:31.530 --> 00:16:36.320
So in real life, if you had dirty water, you would run the water through a filter.

198
00:16:36.320 --> 00:16:36.650
Right.

199
00:16:36.650 --> 00:16:38.850
And then it would return clean water.

200
00:16:39.020 --> 00:16:43.330
So this filter hook is going to pass our function data.

201
00:16:43.610 --> 00:16:48.890
So within the parentheses for our function definition, let's add a parameter named data.

202
00:16:49.250 --> 00:16:51.860
This is the water that's entering our filter.

203
00:16:51.860 --> 00:16:58.550
And then within the body of our function, we just say return data and this is the water exiting our

204
00:16:58.550 --> 00:16:59.120
filter.

205
00:16:59.330 --> 00:17:05.960
And the water or data in this context is all of the data about the post that's about to be saved into

206
00:17:05.960 --> 00:17:06.920
the database.

207
00:17:07.280 --> 00:17:13.400
Now this function in its current state is completely useless because we are not modifying the water

208
00:17:13.400 --> 00:17:14.310
in any way.

209
00:17:14.600 --> 00:17:20.640
The idea is that before you return the data, you are free to manipulate it however you want.

210
00:17:21.080 --> 00:17:24.590
So we could look within the data and it's an array.

211
00:17:24.800 --> 00:17:26.600
Remember to look inside an array.

212
00:17:26.600 --> 00:17:32.720
You use square brackets and then we could modify whatever we want, whether it's the title or the body

213
00:17:32.720 --> 00:17:37.730
content or in our case, the post status.

214
00:17:38.150 --> 00:17:42.220
OK, and we could set this to equal private.

215
00:17:42.890 --> 00:17:49.520
However, before we save this, we need to remember that this is going to run for every single post,

216
00:17:49.850 --> 00:17:51.710
not just note posts.

217
00:17:51.890 --> 00:17:56.620
And we don't want a forced blog posts or professors or campuses to be private.

218
00:17:56.840 --> 00:18:03.980
So right above this line, why don't we write an if statement if parentheses curly brackets for the

219
00:18:03.980 --> 00:18:04.970
condition check.

220
00:18:04.970 --> 00:18:10.040
Let's say only if the post that's about to be saved is a note post.

221
00:18:10.320 --> 00:18:19.760
So if data let's look within it with square brackets, if it's post type equals note.

222
00:18:20.180 --> 00:18:23.000
OK, so only if that evaluates to true.

223
00:18:23.300 --> 00:18:26.830
And then we can just move this line to live within the IF statement.

224
00:18:27.590 --> 00:18:34.550
However, in order to delete a post, you need to set the post status to trash, which means there is

225
00:18:34.550 --> 00:18:35.510
one exception.

226
00:18:35.510 --> 00:18:41.900
When we don't want to override the post status to private, we do want to let users set the post status.

227
00:18:41.940 --> 00:18:48.740
To trash, just not publish or future or some other value, so within our IF statement, let's just

228
00:18:48.740 --> 00:18:50.980
add a secondary condition check.

229
00:18:51.230 --> 00:19:03.170
So we've got our first condition and if our data post status does not equal trash, so if it's a note

230
00:19:03.170 --> 00:19:10.070
post and if the post status is set to anything other than trash, then let's force the status to be

231
00:19:10.070 --> 00:19:10.670
private.

232
00:19:11.000 --> 00:19:13.090
OK, let's go ahead and save this.

233
00:19:13.100 --> 00:19:19.670
And even though our JavaScript has set the status to publish, we don't care because we have a server

234
00:19:19.670 --> 00:19:22.300
side policy enforcing the privacy.

235
00:19:22.580 --> 00:19:23.820
So let's go test it out.

236
00:19:23.840 --> 00:19:33.350
So back in the window where I'm logged in as a subscriber, new privacy test, lorem ipsum, click create.

237
00:19:33.820 --> 00:19:35.240
OK, there's the new post.

238
00:19:35.240 --> 00:19:41.540
But more importantly, if we go into the window where we are the admin and refreshed the notes list,

239
00:19:42.080 --> 00:19:42.500
cool.

240
00:19:42.510 --> 00:19:47.120
There's the brand new new privacy test and we can see that it is indeed private.

241
00:19:47.390 --> 00:19:52.400
And that's going to bring this video to a close in part two of this lesson.

242
00:19:52.610 --> 00:19:55.430
We will continue to learn more about security.

243
00:19:55.800 --> 00:19:58.250
Let's keep things rolling and I will see you then.
