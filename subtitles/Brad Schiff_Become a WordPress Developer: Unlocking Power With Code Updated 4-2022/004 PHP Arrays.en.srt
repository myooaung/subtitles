1
00:00:02,360 --> 00:00:08,310
Hello, everyone, in this lesson, we will answer the question, what is an array?

2
00:00:08,810 --> 00:00:15,620
So for starters, even outside the context of programming, we might hear a car dealership say that

3
00:00:15,620 --> 00:00:19,910
a car is available in a wide array of colors.

4
00:00:20,330 --> 00:00:23,700
OK, so let's think of an array as a collection.

5
00:00:24,020 --> 00:00:27,080
Now, with that in mind, let's jump right into the code.

6
00:00:28,100 --> 00:00:33,310
So here I am in the index file that lives in our theme folder.

7
00:00:33,680 --> 00:00:39,980
And why don't we go ahead and delete all of this test code from our previous lesson and let's try something

8
00:00:39,980 --> 00:00:40,340
new.

9
00:00:40,730 --> 00:00:46,910
So if we think back to that first taste of lesson, you'll remember that we learned how to create a

10
00:00:46,910 --> 00:00:47,630
variable.

11
00:00:47,900 --> 00:00:49,030
So let's try that again.

12
00:00:49,370 --> 00:00:52,490
So I will go into mode down here.

13
00:00:52,490 --> 00:00:54,350
I will close out of mode.

14
00:00:54,620 --> 00:00:57,650
And then to create a variable, you just use the dollar sign.

15
00:00:57,890 --> 00:01:03,860
And maybe I want to create a variable that stores my name so equals Brad.

16
00:01:04,910 --> 00:01:06,830
This variable name isn't special.

17
00:01:06,830 --> 00:01:07,760
I just made it up.

18
00:01:07,760 --> 00:01:09,390
It could be unicorn or pizza.

19
00:01:09,650 --> 00:01:16,220
OK, but the idea here is that I'm setting this variable to have a value of Brad and now I can use that

20
00:01:16,220 --> 00:01:18,140
variable anywhere else on the page.

21
00:01:18,380 --> 00:01:25,730
So maybe down here, once I am back in HTML mode, I could create a paragraph that says Hi, my name

22
00:01:25,730 --> 00:01:35,390
is and then maybe drop into mode so I can echo out that my name variable, OK, and then close out the

23
00:01:35,390 --> 00:01:39,260
sentence with a period and then close out the HTML paragraph tag.

24
00:01:39,830 --> 00:01:41,560
OK, so if I save that and test it.

25
00:01:41,630 --> 00:01:42,980
Hi my name is Brad.

26
00:01:43,310 --> 00:01:50,000
So this is an example of a very simple variable that only contains one single little bit of data.

27
00:01:50,250 --> 00:01:51,930
Right, just one single name.

28
00:01:52,250 --> 00:01:57,550
However, what if we wanted to store multiple names within a single variable?

29
00:01:57,830 --> 00:01:59,960
So that's where arrays come into the picture.

30
00:02:00,170 --> 00:02:00,920
So check this out.

31
00:02:00,920 --> 00:02:02,020
Let's start over again.

32
00:02:02,390 --> 00:02:11,170
So let's go into mode and let's imagine that I want to create a variable named names, right?

33
00:02:11,180 --> 00:02:11,880
Plural.

34
00:02:12,110 --> 00:02:13,910
Now, the name of the variable doesn't matter.

35
00:02:13,940 --> 00:02:15,500
So this could be pizzas.

36
00:02:15,710 --> 00:02:16,400
Doesn't matter.

37
00:02:16,400 --> 00:02:21,260
I just chose names to try to indicate that I want to store multiple values.

38
00:02:21,260 --> 00:02:21,560
Right.

39
00:02:21,710 --> 00:02:22,400
Plural.

40
00:02:22,670 --> 00:02:24,380
So what does our variable equal?

41
00:02:24,560 --> 00:02:26,450
Well, we can say array.

42
00:02:27,650 --> 00:02:34,220
OK, and now within these parentheses, right after the word array, we can store as many names as we

43
00:02:34,220 --> 00:02:34,700
want.

44
00:02:35,090 --> 00:02:35,930
So check this out.

45
00:02:36,110 --> 00:02:43,700
I could say Brad, comma John, comma Jane, comma.

46
00:02:44,060 --> 00:02:45,110
Miaows A lot.

47
00:02:45,740 --> 00:02:46,780
You get the idea.

48
00:02:46,790 --> 00:02:48,620
I can store as many names as I want.

49
00:02:48,770 --> 00:02:52,580
So in an array is a special type of data.

50
00:02:52,850 --> 00:02:56,300
An array is a collection of multiple values.

51
00:02:56,720 --> 00:03:02,810
OK, and let's imagine that down here in HTML mode, I want to access one of these names.

52
00:03:03,380 --> 00:03:10,550
So maybe I have an HTML paragraph tag and I want to say hi, my name is Blank.

53
00:03:10,760 --> 00:03:15,280
Right, so I would drop into B to access our variable.

54
00:03:15,830 --> 00:03:20,490
So I want to echo out something that lives in the names variable.

55
00:03:20,990 --> 00:03:28,160
OK, and then to look inside the array or look inside the collection right here we can use square brackets

56
00:03:29,240 --> 00:03:30,250
on your keyboard.

57
00:03:30,260 --> 00:03:32,740
This is directly right of the key.

58
00:03:33,050 --> 00:03:37,900
OK, now let's say, for example, that I want to access the first value in this array.

59
00:03:38,090 --> 00:03:42,370
So, Brad, I would just include a zero within the square brackets.

60
00:03:42,890 --> 00:03:49,550
You might think that it would be a one to access the first item, but it's actually a zero in most programming

61
00:03:49,550 --> 00:03:51,470
languages included.

62
00:03:51,680 --> 00:03:57,050
Arrays are zero based, meaning the first item is zero instead of one.

63
00:03:57,380 --> 00:04:02,360
So, for example, if I wanted to access the second value of John, I would include a one here.

64
00:04:02,720 --> 00:04:04,310
If I wanted Jane, a two.

65
00:04:04,310 --> 00:04:05,450
If I wanted miaows a lot.

66
00:04:05,450 --> 00:04:05,980
A three.

67
00:04:06,640 --> 00:04:09,800
OK, so if I save this and refresh cool.

68
00:04:09,800 --> 00:04:11,510
We say my name is miaows a lot.

69
00:04:11,810 --> 00:04:13,310
If I change it back to a two.

70
00:04:13,460 --> 00:04:13,810
Right.

71
00:04:13,850 --> 00:04:15,890
So zero one two.

72
00:04:16,100 --> 00:04:17,210
We should see Jane.

73
00:04:18,840 --> 00:04:23,740
Cool, but now the question is why, why would we do this?

74
00:04:24,000 --> 00:04:27,790
Why would we want to store multiple values in a single variable?

75
00:04:27,930 --> 00:04:29,160
What is the point of doing this?

76
00:04:29,170 --> 00:04:30,870
What is the advantage of doing this?

77
00:04:31,200 --> 00:04:36,790
Well, there are several reasons, but probably the biggest reason is for something called looping.

78
00:04:37,110 --> 00:04:38,730
So what in the world is looping?

79
00:04:38,730 --> 00:04:39,600
What is a loop?

80
00:04:39,900 --> 00:04:45,740
Well, let's imagine we want to do something once for each item in this collection.

81
00:04:46,290 --> 00:04:50,280
So let's imagine we want it to output this sentence of hi, my name is Blank.

82
00:04:50,520 --> 00:04:53,480
We wanted to do that once for each item in the collection.

83
00:04:53,700 --> 00:04:59,340
So technically we could just copy and paste this line and have it four times and then change this to

84
00:04:59,340 --> 00:05:00,000
zero.

85
00:05:00,090 --> 00:05:02,000
One, two, three.

86
00:05:02,430 --> 00:05:02,710
Right.

87
00:05:02,760 --> 00:05:06,150
So if I save this, that technically works.

88
00:05:06,270 --> 00:05:08,150
But this is terrible code.

89
00:05:08,160 --> 00:05:12,160
This is really repetitive and it's just not an efficient way of doing things.

90
00:05:12,450 --> 00:05:19,350
Instead, what we can do is leverage the power of an array and programmatically loop through the collection

91
00:05:19,590 --> 00:05:21,480
and do something once for each item.

92
00:05:21,810 --> 00:05:22,560
So check this out.

93
00:05:22,560 --> 00:05:23,570
Let me show you what I mean.

94
00:05:23,790 --> 00:05:29,280
But actually, before we worry about outputting these names, let's just practice a very basic loop

95
00:05:29,280 --> 00:05:30,000
first.

96
00:05:30,240 --> 00:05:33,090
So let's give ourselves a goal for whatever reason.

97
00:05:33,090 --> 00:05:38,250
Let's imagine we want to output a bulleted list on the page that counts to 100.

98
00:05:38,610 --> 00:05:38,830
Right.

99
00:05:38,900 --> 00:05:46,530
So imagine we want to create an HTML list item in a series of them, something like this that goes one,

100
00:05:46,530 --> 00:05:48,270
two, three, four, up to a hundred.

101
00:05:48,840 --> 00:05:51,720
So it would take a long time to type that out by hand.

102
00:05:51,960 --> 00:05:55,480
But programming and loops make that very easy to do.

103
00:05:55,770 --> 00:05:56,660
So check this out.

104
00:05:56,670 --> 00:05:57,480
Back up here.

105
00:05:57,480 --> 00:06:02,330
While we are still in P mode, let's use something called a while loop.

106
00:06:03,030 --> 00:06:06,720
So while parentheses and then right after that curly brackets.

107
00:06:07,140 --> 00:06:09,240
OK, so how does the while loop work?

108
00:06:09,480 --> 00:06:15,780
Well, whatever lives within the curly brackets will happen again and again and again until whatever

109
00:06:15,780 --> 00:06:18,900
we place in these parentheses evaluates to false.

110
00:06:19,140 --> 00:06:24,660
So let me show you what I mean right above this while loop, let's create a variable named count.

111
00:06:25,260 --> 00:06:26,190
The name doesn't matter.

112
00:06:26,190 --> 00:06:29,910
I'm just choosing count and let's set it to equal one.

113
00:06:30,980 --> 00:06:36,740
Now, remember, our goal is to output a bullet hit list that counts to 100, so within our parentheses,

114
00:06:36,740 --> 00:06:41,730
let's say that as long as the following thing is true, keep looping.

115
00:06:41,750 --> 00:06:49,310
So in the parentheses will say, as long as our count is less than 100.

116
00:06:50,240 --> 00:06:53,600
Keep doing whatever we tell it to do within these curly brackets.

117
00:06:54,080 --> 00:07:01,900
So then in the curly brackets, let's just echo out an HTML list item, OK?

118
00:07:01,940 --> 00:07:06,030
And in that list item, we don't want to hard code a value of one or two or three.

119
00:07:06,320 --> 00:07:08,900
Instead, let's output our count variable.

120
00:07:09,180 --> 00:07:12,610
OK, so we are saying that count begins with a value of one.

121
00:07:12,860 --> 00:07:17,060
So then the first time that the while loop runs, this will echo out a one.

122
00:07:17,390 --> 00:07:24,530
And then right after this line lets just increment or increase the count variable so we can say count

123
00:07:24,530 --> 00:07:27,230
plus plus and that will add one to it.

124
00:07:27,470 --> 00:07:29,540
So one plus one is two.

125
00:07:29,570 --> 00:07:31,420
So now count equals two.

126
00:07:31,730 --> 00:07:37,760
So then the while loop will run again and it will say, OK, now the count equals two, that's still

127
00:07:37,760 --> 00:07:39,230
less than 100.

128
00:07:39,590 --> 00:07:41,340
So this will evaluate to true.

129
00:07:42,020 --> 00:07:43,340
So then this will run again.

130
00:07:43,730 --> 00:07:47,630
So then it will output two, then it will add one to that.

131
00:07:47,630 --> 00:07:47,900
Right.

132
00:07:47,910 --> 00:07:51,070
So then count will equal three, so on and so forth.

133
00:07:51,080 --> 00:07:56,690
So this will just keep repeating until finally count will equal one hundred and then the while loop

134
00:07:56,690 --> 00:08:00,510
will say hey, 100 is not less than 100.

135
00:08:00,830 --> 00:08:05,680
So then this will evaluate to false and then the while loop will finally end.

136
00:08:05,960 --> 00:08:11,210
I know that's a lot to absorb, so you might need to watch this a few times or paused the lesson and

137
00:08:11,210 --> 00:08:12,380
experiment with a while.

138
00:08:12,380 --> 00:08:13,370
Loop yourself.

139
00:08:13,880 --> 00:08:17,990
But if I save this and refresh cool.

140
00:08:17,990 --> 00:08:23,090
We see a list that counts all the way o actually to ninety nine instead of 100.

141
00:08:23,560 --> 00:08:28,700
So back in our code, let's just change this to less than one hundred and one.

142
00:08:30,600 --> 00:08:33,270
Cool, so now it counts all the way up to 100.

143
00:08:33,810 --> 00:08:39,750
All right, so now that we've seen a relatively simple while loop in action, let's try something a

144
00:08:39,750 --> 00:08:40,940
tiny bit trickier.

145
00:08:41,190 --> 00:08:46,920
So let's delete the while loop and our count variable and let's get back to the task at hand.

146
00:08:47,220 --> 00:08:54,210
Remember, we want to loop through our array of names and do something once for each item in the collection.

147
00:08:54,600 --> 00:08:58,380
So maybe output a sentence that says, hi, my name is blank.

148
00:08:58,740 --> 00:08:59,280
All right.

149
00:08:59,280 --> 00:09:00,570
So here's how we can do that.

150
00:09:01,020 --> 00:09:02,720
Let's use a while loop again.

151
00:09:02,730 --> 00:09:09,270
So while parentheses and then curly brackets, OK, and we are going to need a count variable again,

152
00:09:09,630 --> 00:09:16,260
so let's create a variable and name it count and this time let's set it to equal zero instead of one.

153
00:09:16,530 --> 00:09:16,830
Right.

154
00:09:16,830 --> 00:09:22,740
Because arrays are zero based in order to access the first item in the array, we use a zero.

155
00:09:22,950 --> 00:09:28,980
OK, so down in our while loop within the curly brackets, what we want to do for each item in the collection

156
00:09:28,980 --> 00:09:38,160
is just echo out an HTML list item that says Hi, my name is blank.

157
00:09:38,460 --> 00:09:44,340
OK, so we remember from about five minutes ago in order to access one of these items, we just use

158
00:09:44,340 --> 00:09:45,940
the variable name, right?

159
00:09:45,990 --> 00:09:48,360
They all live in the variable of names.

160
00:09:48,480 --> 00:09:52,140
And then to look inside the array, you use square brackets.

161
00:09:52,500 --> 00:09:54,900
So to access the first item, it's a zero.

162
00:09:54,900 --> 00:09:57,000
To access the second item, it's a one.

163
00:09:57,460 --> 00:09:59,990
OK, so we don't want a hard code, a number here.

164
00:10:00,240 --> 00:10:03,100
Instead, we want to use our account variable.

165
00:10:03,720 --> 00:10:06,960
So in between the square brackets, let's just say count.

166
00:10:07,410 --> 00:10:13,100
OK, so the first time the loop runs, it will be a zero and then let's be sure to increment the count.

167
00:10:13,110 --> 00:10:16,770
So on the new line, let's say count plus plus.

168
00:10:17,070 --> 00:10:20,450
So then the next time the loop runs, count will equal one.

169
00:10:20,490 --> 00:10:25,290
So that will give us John, then it will increment again to two, which will give us Jane.

170
00:10:25,470 --> 00:10:26,440
You get the idea.

171
00:10:26,790 --> 00:10:30,810
So now we just need to tell the while loop how many times it should repeat itself.

172
00:10:31,060 --> 00:10:31,330
Right.

173
00:10:31,370 --> 00:10:36,380
So within these parentheses, we will say as long as the following thing is true.

174
00:10:36,900 --> 00:10:40,280
So let's say as long as count is less than.

175
00:10:40,650 --> 00:10:42,960
And now you might think that we would just say four.

176
00:10:42,960 --> 00:10:43,260
Right.

177
00:10:43,260 --> 00:10:45,510
Because there are four items in the array.

178
00:10:45,750 --> 00:10:50,430
But we don't want a hard code, a number here, because what if in the future we added a fifth name

179
00:10:50,430 --> 00:10:52,740
to the collection barks a lot.

180
00:10:53,070 --> 00:10:58,070
OK, so we don't want to have to babysit this code and keep updating this number here.

181
00:10:58,440 --> 00:11:04,010
So instead, what we can do is have we count the number of items in the array for us.

182
00:11:04,320 --> 00:11:11,070
So we'll say as long as count is less than and then we can use the P tool named Count and then open

183
00:11:11,070 --> 00:11:13,640
up a pair of parentheses, OK?

184
00:11:13,650 --> 00:11:19,920
And then in those parentheses we just give it the name of our variable names is the variable that contains

185
00:11:19,920 --> 00:11:20,510
the array.

186
00:11:20,880 --> 00:11:25,630
So we will automatically count it and say, yep, there are five items in the array.

187
00:11:26,040 --> 00:11:31,440
So as long as count is less than five, this will just keep happening again and again and again.

188
00:11:31,650 --> 00:11:33,950
So let's save this and refresh.

189
00:11:34,470 --> 00:11:35,130
Awesome.

190
00:11:35,910 --> 00:11:41,670
Now, if this is not your first time programming and you've worked with arrays before, you might be

191
00:11:41,670 --> 00:11:47,280
yelling at the screen right now saying, Brad, why on earth would you use a while loop here when you

192
00:11:47,280 --> 00:11:49,140
could have used a for each loop?

193
00:11:49,500 --> 00:11:52,580
Well, that's a great question with an even better answer.

194
00:11:53,010 --> 00:11:59,460
I want us to be familiar with the while loop, because that's what WordPress uses to loop over real

195
00:11:59,460 --> 00:12:01,880
content like posts and pages.

196
00:12:02,220 --> 00:12:02,620
Right.

197
00:12:02,640 --> 00:12:09,540
So instead of this hypothetical worthless list of names here, imagine if we had an array or a collection

198
00:12:09,540 --> 00:12:15,810
of blog posts and we wanted to loop through those blog posts and display them on the front end of our

199
00:12:15,810 --> 00:12:17,430
website for our visitors.

200
00:12:17,640 --> 00:12:21,710
Well, that is exactly what we are going to do in our very next lesson.

201
00:12:21,990 --> 00:12:25,210
It's probably going to be the most fun we've had in the course so far.

202
00:12:25,470 --> 00:12:27,720
Let's keep it rolling and I will see you then.
