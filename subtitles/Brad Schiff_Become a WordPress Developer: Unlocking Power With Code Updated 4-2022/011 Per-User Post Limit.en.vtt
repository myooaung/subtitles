WEBVTT
1
00:00:02.180 --> 00:00:03.320
Hello, everyone.

2
00:00:03.770 --> 00:00:11.450
In this lesson, we will learn how to set up a per user post limit so that each user account can only

3
00:00:11.450 --> 00:00:17.540
create so many posts, there are a lot of different reasons why you would want to set this up, maybe

4
00:00:17.540 --> 00:00:24.410
to prevent malicious users from creating 30 million posts just to try to slow down or break your website

5
00:00:24.770 --> 00:00:30.800
or even just to prevent innocent, non malicious users who are creating more posts than you would like.

6
00:00:31.250 --> 00:00:38.060
OK, so in this window I'm logged in with my subscriber account and if I visit the my notes page at

7
00:00:38.060 --> 00:00:44.420
the moment I have four existing note posts and let's imagine that we want to limit things so that each

8
00:00:44.420 --> 00:00:49.160
user account can only have a maximum of five note posts.

9
00:00:49.550 --> 00:00:52.700
You could use a different limit like 10 or 20 or 30.

10
00:00:52.760 --> 00:00:57.650
OK, but the question is, how can we implement a per user post limit?

11
00:00:58.100 --> 00:01:04.010
Well, the first step is to jump into our text editor and within our theme folder, I want you to jump

12
00:01:04.010 --> 00:01:12.680
into functions dot, p, p and let's scroll down to the very bottom of this file, because remember

13
00:01:12.680 --> 00:01:19.790
that we've already set up a filter that allows us to intercept requests right before data gets saved

14
00:01:19.790 --> 00:01:21.590
into the WordPress database.

15
00:01:21.950 --> 00:01:29.180
And we've already used our filter function to make sure that note posts must be private as well as sanitize

16
00:01:29.180 --> 00:01:31.010
the title and content fields.

17
00:01:31.400 --> 00:01:37.880
So now let's just use our filter function once again to make sure that a user account cannot create

18
00:01:37.880 --> 00:01:40.100
more than five note posts.

19
00:01:40.520 --> 00:01:47.420
Now, it's important to point out that this filter hook is going to run for every post time and we only

20
00:01:47.420 --> 00:01:51.640
want to implement a per user limit for the note posted.

21
00:01:52.010 --> 00:01:57.090
So we want to make sure that any code we're about to write lives within this basic if check.

22
00:01:57.410 --> 00:02:03.950
So right within this first if statement, let's add a new line and I'm actually going to write a brand

23
00:02:03.950 --> 00:02:05.020
new if statement.

24
00:02:05.030 --> 00:02:14.630
So if parentheses curly brackets and for the condition check, let's say if the current user already

25
00:02:14.630 --> 00:02:21.260
has more than four note posts, if that's true, then within the if statement we can just completely

26
00:02:21.260 --> 00:02:26.690
exit and quit the current request so that no new post gets created.

27
00:02:27.020 --> 00:02:28.900
Let me show you how I would set that up.

28
00:02:28.910 --> 00:02:38.480
So within the condition, let's say, if and WordPress has a function named count user posts and it's

29
00:02:38.480 --> 00:02:44.000
a function, so it gets its own set of parentheses and we want to give this function to things.

30
00:02:44.000 --> 00:02:45.860
So A B, right.

31
00:02:45.860 --> 00:02:46.910
Two arguments.

32
00:02:47.210 --> 00:02:52.110
The first argument is which user account you're trying to count the posts of.

33
00:02:52.490 --> 00:03:01.850
So instead of this placeholder, a, let's say, get current user ID, right, whichever user is sending

34
00:03:01.850 --> 00:03:07.900
off this request, OK, and then the second argument is which post type you want to count.

35
00:03:08.330 --> 00:03:13.280
So are we trying to count how many blog posts this user has created or how many professor posts they've

36
00:03:13.280 --> 00:03:13.840
created?

37
00:03:14.120 --> 00:03:17.630
No, we want to count how many note posts they've created.

38
00:03:18.050 --> 00:03:22.310
So instead of the placeholder B, let's just say note.

39
00:03:22.740 --> 00:03:28.460
OK, so this code that we've highlighted now will return a number of how many note posts they've already

40
00:03:28.460 --> 00:03:29.210
created.

41
00:03:29.210 --> 00:03:35.360
And then let's just say if that number is greater than four or whatever, you want to set the limit

42
00:03:35.360 --> 00:03:37.930
to just choose one less than OK.

43
00:03:37.940 --> 00:03:44.900
So if the user has already created more than four posts, then within the if statement, we just want

44
00:03:44.900 --> 00:03:48.230
to completely exit out or cancel the current request.

45
00:03:48.500 --> 00:03:53.120
And we can do that by simply calling a P function named DAI.

46
00:03:53.690 --> 00:03:59.680
And within the parentheses we can actually include a message that will be passed along to the user.

47
00:03:59.900 --> 00:04:09.560
So let's just say you have reached your no limit, OK, and die will prevent anything else from happening.

48
00:04:09.890 --> 00:04:15.890
So none of this code below it will even run the filter function will not return any data and no new

49
00:04:15.890 --> 00:04:18.170
posts or updates will be made.

50
00:04:18.560 --> 00:04:21.520
OK, let's go ahead and save this and test it out.

51
00:04:22.040 --> 00:04:28.370
So at the moment, my subscriber account currently has created four note posts, so I should be able

52
00:04:28.370 --> 00:04:29.930
to create at least one more.

53
00:04:29.930 --> 00:04:30.260
Right.

54
00:04:30.590 --> 00:04:32.830
Fifth post-test.

55
00:04:33.950 --> 00:04:36.110
Lauren Ipsum click create.

56
00:04:37.190 --> 00:04:42.710
OK, that was created successfully, but if I try to create another one, I should be over my limit.

57
00:04:43.580 --> 00:04:50.030
So limit test lamaism create so nothing happens.

58
00:04:50.030 --> 00:04:55.640
And if I check my console, there's the congrats message from the fifth post that we created a moment

59
00:04:55.640 --> 00:04:55.880
ago.

60
00:04:55.880 --> 00:04:59.120
But then when I tried to create the sixth post we see.

61
00:04:59.120 --> 00:04:59.840
Sorry.

62
00:05:00.020 --> 00:05:00.950
And if we expand.

63
00:05:01.090 --> 00:05:07.900
This and read the response text, we see you have reached your note limit, perfect, so our new code

64
00:05:07.900 --> 00:05:11.580
successfully prevented us from creating another post.

65
00:05:11.950 --> 00:05:18.970
However, before we move on, let's test out our edit and delete buttons for existing posts now that

66
00:05:18.970 --> 00:05:20.320
we've reached our limit.

67
00:05:20.620 --> 00:05:26.980
So, for example, if I try to delete this fifth post test that I just created, I click delete, but

68
00:05:26.980 --> 00:05:28.000
nothing happens.

69
00:05:28.420 --> 00:05:31.000
And if I check the console, we see sorry.

70
00:05:31.390 --> 00:05:36.680
And if I expand this message, the response text is you have reached your note limit.

71
00:05:37.120 --> 00:05:39.070
Now clearly this is not what we want.

72
00:05:39.070 --> 00:05:41.010
And this is a bit confusing, right?

73
00:05:41.020 --> 00:05:43.420
Because I wasn't trying to create a new post.

74
00:05:43.420 --> 00:05:46.660
I was just trying to delete one of my existing posts.

75
00:05:46.660 --> 00:05:51.440
And I should always be able to delete a post no matter how many posts I currently have.

76
00:05:51.760 --> 00:05:56.070
So let's jump back to our code and analyze what's going wrong.

77
00:05:56.350 --> 00:06:00.520
So in WordPress, when you move a post into the trash, right.

78
00:06:00.520 --> 00:06:06.970
Which is the first step towards deleting a post in order to move that post into the trash, WordPress

79
00:06:06.970 --> 00:06:11.400
has to edit its post status and set it to trash.

80
00:06:11.680 --> 00:06:13.000
Why am I telling you this?

81
00:06:13.310 --> 00:06:20.650
Well, it's because this WP insert post data filter hook not only runs when you try to create a new

82
00:06:20.650 --> 00:06:25.110
post, but it also runs any time you try to update a post.

83
00:06:25.420 --> 00:06:31.420
So the problem and why we were unable to delete a post is because we are currently at our limit, right?

84
00:06:31.430 --> 00:06:38.500
We've got five posts and when we sent that delete request, WordPress tried to edit the post and set

85
00:06:38.500 --> 00:06:39.910
it status to trash.

86
00:06:40.180 --> 00:06:45.820
But because this evaluated to true right, because we were over our limit, WordPress wasn't able to

87
00:06:45.820 --> 00:06:50.650
set the stage to trash because instead our dysfunction ran and cancelled everything.

88
00:06:50.860 --> 00:06:56.830
So all we need to do to fix things is make our if statement a bit less aggressive.

89
00:06:56.980 --> 00:07:03.610
So instead of only checking to see if the post count is greater than four, let's also check to see

90
00:07:03.610 --> 00:07:10.490
if the incoming request is to create a brand new post instead of just updating an existing post.

91
00:07:10.750 --> 00:07:16.570
So after this, is the count greater than four, but still within the parentheses, let's say, and

92
00:07:16.870 --> 00:07:18.940
to add on another condition check.

93
00:07:18.940 --> 00:07:23.040
And unfortunately, there is no super easy, intuitive way of doing this.

94
00:07:23.050 --> 00:07:24.010
We can't just say.

95
00:07:24.280 --> 00:07:28.450
And if the request equals create.

96
00:07:28.900 --> 00:07:30.650
Right, that doesn't exist in WordPress.

97
00:07:30.670 --> 00:07:31.980
That was wishful thinking.

98
00:07:32.410 --> 00:07:34.330
So instead, we need to get creative.

99
00:07:34.540 --> 00:07:42.190
We need to ask ourselves how can we differentiate between an existing post and a brand new post that

100
00:07:42.190 --> 00:07:44.410
has yet to actually be created?

101
00:07:44.590 --> 00:07:50.080
And after scratching our heads and thinking about this for a moment, we would realize that an existing

102
00:07:50.080 --> 00:07:57.040
post would have an I.D. number, whereas a brand new post that hasn't actually been created yet, it

103
00:07:57.040 --> 00:07:58.680
would not have an ID.

104
00:07:58.900 --> 00:08:04.720
Now, unfortunately, the data array that contains information about the requested post, right.

105
00:08:04.720 --> 00:08:10.150
This array that gets passed into our function, it does not contain the ID of the post.

106
00:08:10.360 --> 00:08:16.560
But luckily, this filter hook passes along a second array of data into our function.

107
00:08:16.930 --> 00:08:22.990
So within our function definition, within the parentheses, right after data, let's say comma and

108
00:08:22.990 --> 00:08:29.350
include a second parameter, let's name it post a R for post array.

109
00:08:29.980 --> 00:08:34.630
And this contains slightly different information about the requested post.

110
00:08:34.930 --> 00:08:38.530
Luckily for us, it does contain the ID number.

111
00:08:38.770 --> 00:08:47.080
So within our IF statement right after that and for our second condition check, let's say post a R

112
00:08:47.110 --> 00:08:50.980
look inside it with square brackets and capital ID.

113
00:08:51.400 --> 00:08:55.510
Now as long as an ID number exists, this will evaluate to true.

114
00:08:55.750 --> 00:09:00.580
But if we want to check for the opposite of that, we can just put an exclamation mark right before

115
00:09:00.580 --> 00:09:00.740
it.

116
00:09:00.940 --> 00:09:06.820
OK, now before we save this and test it out, we just need to do one more thing in order for our function

117
00:09:06.820 --> 00:09:13.450
to actually access to parameters instead of just one, we need to make a change to this line of code

118
00:09:13.450 --> 00:09:14.890
where we add the filter.

119
00:09:15.280 --> 00:09:20.320
So right after the second argument where we specify our callback function, let's add a comma.

120
00:09:20.800 --> 00:09:23.080
And first we need to provide a priority.

121
00:09:23.380 --> 00:09:25.600
Let's just say 10, which is the default.

122
00:09:25.790 --> 00:09:28.410
I will explain what this 10 means in just a moment.

123
00:09:28.750 --> 00:09:35.920
The important part is we also want to include another argument and say to this two represents that we

124
00:09:35.920 --> 00:09:41.290
want this function to be able to work with two parameters by default.

125
00:09:41.290 --> 00:09:42.580
It's only set to one.

126
00:09:42.970 --> 00:09:46.580
So this way we actually have access to the post array.

127
00:09:47.080 --> 00:09:52.720
OK, now back to this 10, because we didn't really explain that this is the priority of the callback

128
00:09:52.720 --> 00:09:53.890
function that you're setting.

129
00:09:54.100 --> 00:10:00.730
Really, this is only ever an issue if you're setting multiple functions to run on the same filter hook.

130
00:10:01.080 --> 00:10:05.280
So, for example, you don't need to do this, I'm only going to do this for demonstration reasons,

131
00:10:05.280 --> 00:10:11.730
but if we duplicated this line and said that we wanted to add another filter to that same hook and then

132
00:10:11.730 --> 00:10:17.400
change the name of the function that we want to call, well, then the priority number decides which

133
00:10:17.400 --> 00:10:19.010
function would run first.

134
00:10:19.380 --> 00:10:25.620
So the lower the number, the earlier it will run and the larger the number, the later it will run

135
00:10:25.980 --> 00:10:27.300
again for our purposes.

136
00:10:27.330 --> 00:10:28.440
This doesn't really matter.

137
00:10:28.690 --> 00:10:30.430
It's just something I want you to be aware of.

138
00:10:30.450 --> 00:10:31.560
So let me delete that.

139
00:10:31.890 --> 00:10:35.200
Now, let's go ahead and save this and test it out.

140
00:10:35.220 --> 00:10:37.920
So back on the front end, I'm at my limit.

141
00:10:37.920 --> 00:10:39.480
I've got five posts.

142
00:10:39.870 --> 00:10:41.460
Let me try to delete this one again.

143
00:10:42.740 --> 00:10:44.090
Cool, it was successful.

144
00:10:44.480 --> 00:10:50.030
Now let me add another post, so I'm at my limit again and then let's try to make an edit to an existing

145
00:10:50.030 --> 00:10:57.080
post limit test once again, Laura Ipsum created.

146
00:10:57.980 --> 00:10:59.780
OK, let's try to make an edit to it.

147
00:11:00.470 --> 00:11:04.040
So modified title click save.

148
00:11:05.870 --> 00:11:07.970
Perfect, that was successful as well.

149
00:11:08.390 --> 00:11:17.090
And if I try to create a sixth post, hopefully the server denies me so sixth post attempt testing,

150
00:11:17.270 --> 00:11:18.110
click create.

151
00:11:18.950 --> 00:11:20.840
Nothing happens if I check the console.

152
00:11:20.840 --> 00:11:21.400
We see.

153
00:11:21.410 --> 00:11:21.970
Sorry.

154
00:11:22.400 --> 00:11:22.730
Cool.

155
00:11:22.740 --> 00:11:25.610
So our limit policy is taking effect now.

156
00:11:25.610 --> 00:11:26.690
Just a quick warning.

157
00:11:26.870 --> 00:11:31.010
The remainder of this lesson has nothing to do with WordPress.

158
00:11:31.250 --> 00:11:36.680
Now, I just want to focus on creating a nicer user experience with a bit of JavaScript.

159
00:11:36.890 --> 00:11:43.010
And what I mean is if someone tries to create a post and it fails like this, they don't necessarily

160
00:11:43.010 --> 00:11:44.960
know that they are over the limit.

161
00:11:45.230 --> 00:11:46.730
So they might just click create.

162
00:11:46.730 --> 00:11:49.640
And when it doesn't work, they would be confused and frustrated.

163
00:11:49.820 --> 00:11:55.700
The average user doesn't know to check the console and check the error message and say, oh, you have

164
00:11:55.700 --> 00:11:56.900
reached your note limit.

165
00:11:57.260 --> 00:12:03.380
So why don't we use JavaScript so that if this message is received right, this exact you have reached

166
00:12:03.380 --> 00:12:04.100
your note limit.

167
00:12:04.400 --> 00:12:10.280
If that happens, then maybe we output a bit of text right here that reads, You have reached your limit,

168
00:12:10.550 --> 00:12:13.070
delete a note to make room for a new one.

169
00:12:13.520 --> 00:12:18.780
So right now, let's go edit the template that outputs this page in this form.

170
00:12:19.160 --> 00:12:28.700
So back in our text editor, let's jump in to page my notes P and here's the create a new note form.

171
00:12:29.000 --> 00:12:31.970
And down at the very bottom, below the last span.

172
00:12:31.970 --> 00:12:41.810
Let's create a new line and let's create a brand new span and say no limit reached delete an existing

173
00:12:41.810 --> 00:12:44.540
note to make room for a new one.

174
00:12:45.860 --> 00:12:54.700
OK, and let's be sure to give the opening span tag a class of note limit message.

175
00:12:55.280 --> 00:12:59.900
This will give it a bit of success that makes the text read, but also it will make it so.

176
00:12:59.900 --> 00:13:06.110
This element is hidden when the page first loads and then we will need to use JavaScript to actually

177
00:13:06.110 --> 00:13:07.700
reveal or display it.

178
00:13:08.010 --> 00:13:09.530
OK, so let's save that.

179
00:13:09.530 --> 00:13:15.890
And even if you refresh the my notes page, again, that text that we just added sits right here, but

180
00:13:15.890 --> 00:13:17.740
it is hidden by default.

181
00:13:18.080 --> 00:13:24.410
So now let's write a bit of JavaScript so that if we send out a request and the response text is you

182
00:13:24.410 --> 00:13:28.630
have reached your limit, then we reveal that error message right here.

183
00:13:28.850 --> 00:13:36.230
So in our text editor within our JavaScript modules folder, let's jump into my notes and let's scroll

184
00:13:36.230 --> 00:13:38.750
down and find our create note method.

185
00:13:40.830 --> 00:13:47.400
Here it is and within our Ajax request, let's look for our error property, which is a function that

186
00:13:47.400 --> 00:13:53.580
will run only if the request is not successful and within this error, function may be right above this

187
00:13:53.580 --> 00:13:54.850
console dot log.

188
00:13:54.870 --> 00:13:58.130
Let's add a new line and set up an if statement.

189
00:13:58.140 --> 00:14:06.930
So if parentheses curly brackets and let's say if response dot response text.

190
00:14:07.140 --> 00:14:11.970
If you're wondering how I know to check for this exact name, you can just jump back into your browser

191
00:14:12.330 --> 00:14:17.760
and send off a request that you know will fail because you're over the limit and then check your console

192
00:14:18.240 --> 00:14:25.080
if you expand the official response and then scroll down our message of you reached your note limit

193
00:14:25.290 --> 00:14:28.380
lives inside a property named response text.

194
00:14:28.650 --> 00:14:36.570
OK, so back in our code, let's say if response dot response text equals and then instead of typing

195
00:14:36.570 --> 00:14:39.690
it out, let's just copy and paste this exact value.

196
00:14:40.320 --> 00:14:43.710
So copy that into my clipboard, paste it in.

197
00:14:44.070 --> 00:14:50.820
OK, so if we receive this exact error message, then within the body of this if statement, let's use

198
00:14:50.820 --> 00:14:57.830
J query to select that hidden bit of text that sits right here and we just want to reveal it.

199
00:14:58.020 --> 00:15:07.670
So we use J Query to select an element that has a class of note limit message and let's give it a class.

200
00:15:07.680 --> 00:15:13.380
So add class of active which will reveal it or display it.

201
00:15:13.920 --> 00:15:19.230
OK, let's be sure to add a semicolon at the end of that line and let's save this and then back in the

202
00:15:19.230 --> 00:15:19.790
browser.

203
00:15:19.800 --> 00:15:23.130
Be sure to refresh or even perform a hard refresh.

204
00:15:23.340 --> 00:15:28.860
OK, and let's try to send off a request that we know should fail because we're over our limit.

205
00:15:28.860 --> 00:15:29.850
So create note.

206
00:15:30.600 --> 00:15:31.140
Perfect.

207
00:15:31.140 --> 00:15:34.470
We see that error message text right in the user interface.

208
00:15:34.830 --> 00:15:39.180
So we're telling users they've reached their limit and they should delete an existing note to make room

209
00:15:39.180 --> 00:15:39.930
for a new one.

210
00:15:40.320 --> 00:15:46.470
So finally, why don't we set things up so that if they actually delete one of their notes and that

211
00:15:46.470 --> 00:15:52.440
brings their note total to be less than five, then let's remove this error message on the fly.

212
00:15:52.920 --> 00:16:00.090
Now, you and I know that any time you successfully make a request to the rest API, it responds back

213
00:16:00.090 --> 00:16:03.120
with all sorts of data about that post.

214
00:16:03.390 --> 00:16:09.180
So if a user deletes one of their notes to make room for a new note, it would be nice if the response

215
00:16:09.180 --> 00:16:15.570
that the rest API sends back included a count of how many notes that user now has.

216
00:16:15.870 --> 00:16:18.280
Well, by default, WordPress doesn't do that right.

217
00:16:18.300 --> 00:16:23.700
It only sends back things like the title, the content, the permalink, the slug.

218
00:16:23.910 --> 00:16:29.250
But luckily it's very easy for us to customize what the rest API responds with.

219
00:16:29.460 --> 00:16:33.630
So let me show you what we're going to do in our text editor back and functions.

220
00:16:35.070 --> 00:16:39.690
I'm going to scroll up to the very top, but for you, it might be somewhere else in your file.

221
00:16:39.690 --> 00:16:46.290
But I want you to pause the video really quick and find your function that is named University Custom

222
00:16:46.290 --> 00:16:46.880
Rest.

223
00:16:47.310 --> 00:16:53.670
This is a function that we set up way back in the course when we wanted the rest API to give us the

224
00:16:53.670 --> 00:16:55.730
author name for each post.

225
00:16:55.950 --> 00:17:01.830
So you may not remember this, but we used something named Register Rest Field to add a new field or

226
00:17:01.830 --> 00:17:04.330
property to the rest API response.

227
00:17:04.560 --> 00:17:07.710
So right now, let's just duplicate these three lines.

228
00:17:07.980 --> 00:17:10.030
The register rest field lines.

229
00:17:10.710 --> 00:17:16.850
Copy that right below it, paste it to duplicate it and I'm going to modify this to fit my needs.

230
00:17:17.160 --> 00:17:19.730
So this first property is the post typed.

231
00:17:19.770 --> 00:17:21.330
You want to add something too.

232
00:17:21.960 --> 00:17:25.530
So instead of post, it's the note posted, right.

233
00:17:25.860 --> 00:17:29.490
Then we get to make up the name for the new property that gets returned.

234
00:17:29.830 --> 00:17:37.770
So instead of author name, let's say user note count, OK, and then it's callback is a function that

235
00:17:37.770 --> 00:17:39.670
returns whatever the value should be.

236
00:17:39.900 --> 00:17:48.350
So instead of returning, get the author, let's delete that and return count user posts.

237
00:17:48.600 --> 00:17:50.640
And remember, we give this two arguments.

238
00:17:50.640 --> 00:17:53.550
The first is which user you want to count for.

239
00:17:53.700 --> 00:18:01.230
So get current user I.D. and then the second argument is which post type you want to count.

240
00:18:01.240 --> 00:18:08.790
So let's say note, OK, now if we save this, that new property named user note account will be available

241
00:18:08.790 --> 00:18:09.460
to us.

242
00:18:09.480 --> 00:18:13.350
So just as a quick test, if you try to edit one of your existing posts.

243
00:18:15.870 --> 00:18:21.930
And then check the console well, within the WordPress response, there should now be a new property

244
00:18:22.260 --> 00:18:25.290
named user note account with a relevant value.

245
00:18:25.590 --> 00:18:29.900
OK, now let's go use this value within our delete note JavaScript method.

246
00:18:30.120 --> 00:18:35.220
Remember that if a user deletes a note and then they are below their limit, we want to remove this

247
00:18:35.220 --> 00:18:37.050
error message on the fly.

248
00:18:37.320 --> 00:18:40.500
So back in our JavaScript are my notes file.

249
00:18:40.500 --> 00:18:42.930
Let's look for our delete note method.

250
00:18:43.740 --> 00:18:44.460
Here it is.

251
00:18:44.700 --> 00:18:50.570
And within the success function, it doesn't really matter where, but maybe below this console log

252
00:18:50.580 --> 00:19:00.420
line let's set up and if statements of if parentheses curly brackets and let's say if response dot user

253
00:19:00.450 --> 00:19:06.270
note count is less than five, well then what do we want to do?

254
00:19:06.600 --> 00:19:13.590
We want to target the element with a class of note limit message and we want to get rid of the class

255
00:19:13.590 --> 00:19:14.600
that makes it visible.

256
00:19:14.610 --> 00:19:23.340
So remove class active K, let's go ahead and save this and then perform a hard refresh on the front

257
00:19:23.340 --> 00:19:23.700
end.

258
00:19:24.690 --> 00:19:28.230
OK, so I'm at my limit so if I try to create a new post.

259
00:19:29.240 --> 00:19:35.300
The error message appears, right, but then if I delete one of my existing posts to make room call,

260
00:19:35.300 --> 00:19:41.180
that error message disappears on the fly and now I successfully can create that new note.

261
00:19:41.450 --> 00:19:44.300
And that's going to bring this lesson to a close.

262
00:19:44.600 --> 00:19:50.090
In our next lesson, we are really going to change gears and work on a new feature where subscriber

263
00:19:50.090 --> 00:19:53.880
accounts can like or heart or favorite a professor.

264
00:19:54.170 --> 00:19:56.510
Let's keep things rolling and I will see you then.
