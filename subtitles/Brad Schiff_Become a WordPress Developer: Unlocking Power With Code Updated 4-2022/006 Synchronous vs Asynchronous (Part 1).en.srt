1
00:00:02,030 --> 00:00:03,050
Hello, everyone.

2
00:00:03,380 --> 00:00:10,640
In this lesson, we will learn how to work with multiple post types when it comes to the WordPress rest

3
00:00:10,640 --> 00:00:11,500
API.

4
00:00:11,840 --> 00:00:17,650
So, for example, at the moment our search overlay only works with a single post type.

5
00:00:18,020 --> 00:00:24,650
So, for example, I know that I have blog posts named Biologies is Cool and we won an award.

6
00:00:25,040 --> 00:00:34,130
So if I search for either of those titles, Buyology or Award, those results obviously come in successfully.

7
00:00:34,520 --> 00:00:37,360
But there's more to our website than just blog posts.

8
00:00:37,730 --> 00:00:47,180
For example, we have a page named about us, but if I try to search for about, we won't see any results.

9
00:00:47,720 --> 00:00:50,080
Now, the reason that this is happening is simple.

10
00:00:50,330 --> 00:00:53,880
This is quite literally the way that we programmed our JavaScript.

11
00:00:54,350 --> 00:00:57,000
So let me show you what I mean in our text editor.

12
00:00:57,710 --> 00:01:01,130
Let's open up our search JS module file.

13
00:01:01,850 --> 00:01:05,580
And if we scroll down to our method named get results.

14
00:01:06,170 --> 00:01:09,620
Remember, this is the Eurail that we are sending a request to.

15
00:01:09,920 --> 00:01:15,710
And towards the end of the euro, we have posts and then we add on our search string.

16
00:01:16,130 --> 00:01:21,680
So this is why at the moment it's only going to search through that one post type posts.

17
00:01:22,080 --> 00:01:26,420
So if we wanted to, we could change this from posts to pages.

18
00:01:26,810 --> 00:01:34,670
And then if I save that now, if I try to search for about, we do successfully see the about us page

19
00:01:34,670 --> 00:01:35,410
as a result.

20
00:01:35,810 --> 00:01:39,800
But now if I tried to search for a blog post, we'd be out of luck again.

21
00:01:39,800 --> 00:01:40,130
Right.

22
00:01:40,150 --> 00:01:44,870
So if I search for Buyology, we don't see the biology as cool blog post.

23
00:01:45,170 --> 00:01:46,580
So that didn't solve anything.

24
00:01:46,610 --> 00:01:48,490
Now we've just got the opposite problem.

25
00:01:48,710 --> 00:01:51,140
Now we are only searching through pages.

26
00:01:51,350 --> 00:01:54,360
So the question is how can we have our cake and eat it too?

27
00:01:54,530 --> 00:01:59,310
How can we search through both posts and pages?

28
00:01:59,570 --> 00:02:07,010
Well, the WordPress rest API does not have a native way of doing that, but it's not a problem because

29
00:02:07,160 --> 00:02:11,030
we can just send out another request to a second U.

30
00:02:11,030 --> 00:02:18,530
RL and then we can manually combine and smush together the two resulting sets of incoming JSON data.

31
00:02:18,890 --> 00:02:20,210
So let me show you what I mean.

32
00:02:20,570 --> 00:02:24,680
Let's set this current URL back to posts instead of pages.

33
00:02:25,340 --> 00:02:30,830
And then down here within this code that will not run until the server has had a chance to respond with

34
00:02:30,830 --> 00:02:31,890
the Jaison data.

35
00:02:32,210 --> 00:02:36,220
Let's actually cut all of this highlighted code into our clipboard.

36
00:02:36,560 --> 00:02:43,040
So let's begin selecting on this line and let's select all the way down to the is Spiner visible false

37
00:02:43,040 --> 00:02:43,470
line.

38
00:02:44,030 --> 00:02:46,070
OK, let's cut that into our clipboard.

39
00:02:46,850 --> 00:02:47,270
Cool.

40
00:02:47,630 --> 00:02:54,500
Now, right now where my cursor is blinking, any code we type is not going to run until the server

41
00:02:54,500 --> 00:02:56,530
has a chance to send back the data.

42
00:02:56,780 --> 00:03:02,420
So within this callback area, let's just set up another JSON request, right?

43
00:03:02,420 --> 00:03:04,400
Let's send out another request to a U.

44
00:03:04,400 --> 00:03:07,340
RL that uses pages instead of posts.

45
00:03:07,790 --> 00:03:14,180
So down on this line, let's just say dollar sign to use J query and then let's look inside it for the

46
00:03:14,180 --> 00:03:18,410
get JSON method semicolon at the end of that.

47
00:03:18,620 --> 00:03:21,680
And remember that get JSON takes two arguments.

48
00:03:22,010 --> 00:03:25,430
The first argument is the Eurail that you want to send a request to.

49
00:03:25,790 --> 00:03:31,190
And the second argument is what you want to do once that you URL has actually responded.

50
00:03:31,490 --> 00:03:34,870
So this is where we would typically create an anonymous function.

51
00:03:35,240 --> 00:03:38,230
Why don't we use the S6 Arrow syntax?

52
00:03:38,510 --> 00:03:41,840
So first you just type in the name of a parameter you want to use.

53
00:03:42,020 --> 00:03:46,700
You can make up whatever parameter name you want, like data or results.

54
00:03:46,940 --> 00:03:53,720
But in this context, I'm going to use pages and then we just say equal greater than to create the arrow

55
00:03:53,720 --> 00:03:54,290
symbol.

56
00:03:54,620 --> 00:03:59,720
And then right after that, let's just add a pair of curly brackets and then in between the brackets,

57
00:03:59,720 --> 00:04:02,120
I like to dropdown just to stay organized.

58
00:04:02,420 --> 00:04:08,270
And now within those curly brackets, let's just paste in our clipboard, OK?

59
00:04:08,300 --> 00:04:14,060
Now that we've got that pasted in code back in place, let's shift our attention back to this temporary

60
00:04:14,060 --> 00:04:15,980
X placeholder that I used.

61
00:04:16,190 --> 00:04:17,810
We don't actually want an X here.

62
00:04:17,810 --> 00:04:20,710
We want the Eurail that we want to send a request to.

63
00:04:21,140 --> 00:04:26,090
So in order to save a ton of typing, why don't we just copy and paste what we already wrote up on this

64
00:04:26,090 --> 00:04:26,510
line?

65
00:04:26,840 --> 00:04:33,050
So I'm going to begin selecting at the beginning of this university data and then just select all the

66
00:04:33,050 --> 00:04:38,270
way to the right up until the end of Dot vao parentheses.

67
00:04:38,510 --> 00:04:42,230
So right before this comma here, let's go ahead and copy that.

68
00:04:42,980 --> 00:04:48,080
And then down on this line, instead of this placeholder X, let's delete that and paste in our clipboard

69
00:04:48,770 --> 00:04:53,360
and then we can just change this from posts to pages.

70
00:04:55,670 --> 00:05:00,620
Now, I know that the last few minutes has just been a lot of me telling you what to do without really

71
00:05:00,620 --> 00:05:05,420
explaining what's going on, but trust me, in just a few minutes, we are going to break things down

72
00:05:05,420 --> 00:05:08,250
and analyze everything and actually check this out.

73
00:05:08,390 --> 00:05:11,710
I think after our next step, everything will start to make sense.

74
00:05:12,110 --> 00:05:18,410
So what I want to do now is right above this line, this line where we are targeting the HTML of the

75
00:05:18,410 --> 00:05:20,630
results div right above that.

76
00:05:20,630 --> 00:05:24,560
Let's add a new line and let's create a new variable.

77
00:05:25,190 --> 00:05:33,020
We could name it whatever we want, but I'm going to name it combined results and let's set it to equal

78
00:05:33,560 --> 00:05:34,730
posts.

79
00:05:35,120 --> 00:05:39,110
And let me refresh your memory of what posts is in this context.

80
00:05:39,110 --> 00:05:45,410
If we scroll to the right when our first request goes out, all of the JSON data that the server is

81
00:05:45,410 --> 00:05:50,900
going to send in response will temporarily live in our parameter here named posts.

82
00:05:52,620 --> 00:06:00,330
So back in this brand new line of code posts is the array of the incoming JSON data, and in JavaScript,

83
00:06:00,330 --> 00:06:04,830
every array has access to a method named Concat.

84
00:06:06,960 --> 00:06:13,470
This stands for concatenation, and this is how we can combine multiple arrays, so we're starting with

85
00:06:13,470 --> 00:06:17,610
the posts, resulting data, and then we're saying let's add on.

86
00:06:17,610 --> 00:06:21,360
And then within these parentheses, let's just say pages.

87
00:06:21,900 --> 00:06:22,200
Right.

88
00:06:22,200 --> 00:06:28,350
Because pages is the name of the parameter where all of the resulting JSON data from this you URL will

89
00:06:28,350 --> 00:06:29,620
temporarily live.

90
00:06:30,780 --> 00:06:36,420
So on this new line of code, altogether, we're creating this brand new variable that basically smashes

91
00:06:36,420 --> 00:06:39,750
together the two different sets of incoming results.

92
00:06:40,020 --> 00:06:45,870
So now all we need to do is down here within our template, literal when it comes to looping and displaying

93
00:06:45,870 --> 00:06:52,230
the results instead of looking within an array named posts, let's just look inside our new combined

94
00:06:52,230 --> 00:06:54,920
array and it's named combined results.

95
00:06:55,320 --> 00:06:56,730
So let's change this.

96
00:06:57,270 --> 00:07:03,060
And if you're using sublime text or atom, you can just highlight the word posts here and then either

97
00:07:03,060 --> 00:07:09,150
press control D or command D, and that will select the next instance in the next instance.

98
00:07:09,420 --> 00:07:16,940
And then you can just say combined results that will get added in in all three spots here.

99
00:07:17,310 --> 00:07:17,660
Cool.

100
00:07:17,670 --> 00:07:19,610
So let's go ahead and save this.

101
00:07:20,280 --> 00:07:26,310
And now if I search for history, I see our sub page named our history.

102
00:07:26,310 --> 00:07:31,830
And if I search for biology for that blog post, biology is cool, perfect.

103
00:07:31,830 --> 00:07:32,490
It's there.

104
00:07:32,520 --> 00:07:40,050
And if I search for lorem as in lorem ipsum, we see just about every page in post in my website, which

105
00:07:40,050 --> 00:07:41,170
is what I would expect.

106
00:07:41,430 --> 00:07:45,620
So this means that new JavaScript code we just wrote is working properly.

107
00:07:45,900 --> 00:07:47,730
However, we can do better.

108
00:07:47,850 --> 00:07:50,160
This is not the best way of coding things.

109
00:07:50,580 --> 00:07:55,410
What I'm referring to is the way that we nested one JSON request.

110
00:07:55,680 --> 00:07:59,670
We nested this inside another get JSON request.

111
00:08:00,060 --> 00:08:06,600
Now, this might be the simplest and most obvious setup, but in terms of creating the fastest user

112
00:08:06,600 --> 00:08:11,630
experience for our website visitors, this is not the best way of coding things.

113
00:08:11,970 --> 00:08:17,580
Now, in order to learn why this is less than ideal and what we can do better, instead, we are going

114
00:08:17,580 --> 00:08:25,920
to take a quick vocabulary break and learn about two terms, synchronous and asynchronous.

115
00:08:26,400 --> 00:08:31,730
Now, in order to explain these two terms, I've come up with an analogy or a diagram.

116
00:08:32,160 --> 00:08:37,410
So imagine you're standing in the very center of a grocery store and you're there with a group of three

117
00:08:37,410 --> 00:08:37,860
people.

118
00:08:37,860 --> 00:08:41,490
So there's yourself and two friends or family members.

119
00:08:42,000 --> 00:08:48,120
And imagine that there are three items spread out across the grocery store that you want to place in

120
00:08:48,120 --> 00:08:48,870
your basket.

121
00:08:49,320 --> 00:08:55,590
Now, the terms, synchronous and asynchronous, represent the different strategies for getting those

122
00:08:55,590 --> 00:08:57,050
items into your basket.

123
00:08:57,480 --> 00:08:58,860
So let's walk through both.

124
00:08:59,070 --> 00:09:00,960
But let's begin with Synchronoss.

125
00:09:01,260 --> 00:09:02,730
So here's what that would look like.

126
00:09:02,880 --> 00:09:08,850
The first person starts walking towards this item, but while that's going on, the other two people

127
00:09:09,030 --> 00:09:10,650
are completely frozen.

128
00:09:11,160 --> 00:09:15,810
They just have to sit and wait and watch until the first person completes their task.

129
00:09:16,110 --> 00:09:22,290
Now, once this first person successfully brings an item back to the cart, only then can the second

130
00:09:22,290 --> 00:09:24,030
person begin their task.

131
00:09:24,570 --> 00:09:29,850
And while that's going on, the third person is still completely frozen and cannot begin anything yet

132
00:09:29,850 --> 00:09:30,690
themselves.

133
00:09:31,320 --> 00:09:31,560
Right.

134
00:09:31,570 --> 00:09:38,050
So then once the second person completes their task, only then can the third person start their business.

135
00:09:39,120 --> 00:09:44,580
So clearly, this is not the fastest possible way of getting all the items into the basket.

136
00:09:44,910 --> 00:09:45,150
Right.

137
00:09:45,150 --> 00:09:50,310
Because there's a lot of just sitting around and waiting for other people to finish their tasks.

138
00:09:50,610 --> 00:09:52,920
But that's how synchronous code works.

139
00:09:53,280 --> 00:09:56,480
Now, the opposite of this is asynchronous.

140
00:09:56,880 --> 00:10:03,300
So in an asynchronous world, all three people could be simultaneously walking to get their item in

141
00:10:03,300 --> 00:10:04,140
the grocery store.

142
00:10:04,680 --> 00:10:04,850
Right.

143
00:10:04,920 --> 00:10:07,890
So this person starts walking, this person starts walking.

144
00:10:07,890 --> 00:10:08,910
So does this person.

145
00:10:09,300 --> 00:10:14,520
Now, there's no guarantee or predictability of who's going to finish first, but in this case, it

146
00:10:14,520 --> 00:10:15,280
doesn't matter.

147
00:10:15,630 --> 00:10:19,200
The idea is just that all three people are working at the same time.

148
00:10:21,380 --> 00:10:27,320
Right, so maybe they all finish very close to one another and it's clear that this is probably going

149
00:10:27,320 --> 00:10:32,780
to be a lot faster than the synchronous way the three people are not just sitting there idle waiting

150
00:10:32,780 --> 00:10:33,650
for each other.

151
00:10:34,040 --> 00:10:36,900
They can all simultaneously be getting work done.

152
00:10:37,430 --> 00:10:43,700
So this means that asynchronous code has the potential to be a lot faster, but it's not always the

153
00:10:43,700 --> 00:10:45,050
right tool for the job.

154
00:10:45,080 --> 00:10:46,970
It just depends on the situation.

155
00:10:47,360 --> 00:10:50,540
Now, having said all of that, let's get back to the task at hand.

156
00:10:50,840 --> 00:10:57,350
And that task is us wanting to send out multiple JSON requests to these different Yarl's.

157
00:10:57,800 --> 00:11:02,750
Now, at the moment, we have set things up in a rather synchronous way, right?

158
00:11:02,750 --> 00:11:11,240
Because this inner JSON request is not even going to begin until this first JSON request has completed.

159
00:11:11,660 --> 00:11:17,420
Now, there are a lot of different ways we could set this up, but in my opinion, our best bet is to

160
00:11:17,420 --> 00:11:21,180
sort of mix and match synchronous with asynchronous.

161
00:11:21,470 --> 00:11:22,310
Here's what I mean.

162
00:11:22,580 --> 00:11:30,740
Why don't we adjust this so that the two get Jason requests can run together at the same time asynchronously

163
00:11:31,160 --> 00:11:33,890
and then only once they both complete.

164
00:11:33,920 --> 00:11:36,260
Do we want to run any of this code.

165
00:11:36,770 --> 00:11:41,830
Now, that's exactly what we are going to set up together in part two of this lesson.

166
00:11:42,050 --> 00:11:45,740
So let's keep things rolling and I will see you in the next video.
