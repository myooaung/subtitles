1
00:00:01,890 --> 00:00:02,604
In this section,

2
00:00:02,604 --> 00:00:05,552
we'll briefly take a look at the features that the Spring

3
00:00:05,552 --> 00:00:07,831
Framework provides for integration.

4
00:00:07,831 --> 00:00:10,328
Now what exactly do I mean when I say integration?

5
00:00:10,328 --> 00:00:13,174
Well, applications don't live in isolation.

6
00:00:13,174 --> 00:00:18,561
Applications often need to share data or work with other applications,

7
00:00:18,561 --> 00:00:22,470
and integration is all about making different systems

8
00:00:22,470 --> 00:00:24,424
and applications work together.

9
00:00:24,424 --> 00:00:27,303
So how exactly does the Spring Framework help?

10
00:00:27,303 --> 00:00:33,441
Well, one problem you need to solve is how one application can talk to another,

11
00:00:33,441 --> 00:00:34,981
or communicate.

12
00:00:34,981 --> 00:00:36,542
And this is a multi-sided problem.

13
00:00:36,542 --> 00:00:41,338
So A) you have to figure out how do you expose operations to other systems,

14
00:00:41,338 --> 00:00:46,701
and B) how do you invoke, or run, operations on other systems?

15
00:00:46,701 --> 00:00:51,066
There's certainly many different ways to expose operations to other systems,

16
00:00:51,066 --> 00:00:54,392
such as RMI, or Remote Method Invocation,

17
00:00:54,392 --> 00:00:57,615
or another way is via a messaging system,

18
00:00:57,615 --> 00:01:00,372
and the Spring Framework supports both of these,

19
00:01:00,372 --> 00:01:06,176
but one such popular way to expose operations is something called web services.

20
00:01:06,176 --> 00:01:09,815
And web services are simply operations that are

21
00:01:09,815 --> 00:01:13,210
exposed and accessible via the web.

22
00:01:13,210 --> 00:01:18,225
And the Spring Framework makes it easy to both expose and invoke web services.

23
00:01:18,225 --> 00:01:20,659
Let's take a look at an example.

24
00:01:20,659 --> 00:01:23,896
On the left we have a very simple example of a web service,

25
00:01:23,896 --> 00:01:27,434
and this can be used to retrieve account information.

26
00:01:27,434 --> 00:01:30,788
So you might think of this as being used in a banking

27
00:01:30,788 --> 00:01:33,017
application to look up your bank account.

28
00:01:33,017 --> 00:01:36,692
And at the core of this web service are three annotations.

29
00:01:36,692 --> 00:01:40,773
Remember that annotations are just metadata that's added to the code.

30
00:01:40,773 --> 00:01:43,751
The first annotation is the @RestController annotation,

31
00:01:43,751 --> 00:01:47,771
and it denotes that this code is going to be exposing operations

32
00:01:47,771 --> 00:01:50,542
using a style of web services called REST,

33
00:01:50,542 --> 00:01:54,727
and the details of what REST is aren't really important,

34
00:01:54,727 --> 00:02:00,516
just know that rest is a way or style of implementing web services.

35
00:02:00,516 --> 00:02:02,775
The second annotation, the @GetMapping annotation,

36
00:02:02,775 --> 00:02:06,887
is used to denote the operation and the path that need

37
00:02:06,887 --> 00:02:09,493
to be used to invoke this operation.

38
00:02:09,493 --> 00:02:13,593
And we can see that the path is just like any regular URL that we're used to

39
00:02:13,593 --> 00:02:17,273
seeing on the web with some additional added curly syntax.

40
00:02:17,273 --> 00:02:21,587
And the curly braces are related to the third annotation,

41
00:02:21,587 --> 00:02:25,980
and they simply indicate that this part of the path is a placeholder.

42
00:02:25,980 --> 00:02:28,561
In our case, it's a placeholder for the account number,

43
00:02:28,561 --> 00:02:29,630
and in other words,

44
00:02:29,630 --> 00:02:32,289
it's the way that we tell the operation what

45
00:02:32,289 --> 00:02:34,254
account number we'd like to retrieve.

46
00:02:34,254 --> 00:02:37,001
So even if you don't understand the code,

47
00:02:37,001 --> 00:02:39,617
you can see that with these three simple annotations,

48
00:02:39,617 --> 00:02:42,908
we've exposed a service that can be used to look up

49
00:02:42,908 --> 00:02:44,722
an account by its account number.

50
00:02:44,722 --> 00:02:48,633
Now that we've seen how to expose an operation via a web service,

51
00:02:48,633 --> 00:02:52,217
let's look at the other side of the problem and how the Spring Framework helps

52
00:02:52,217 --> 00:02:56,392
us to invoke our service from within another application.

53
00:02:56,392 --> 00:02:59,658
Remember how we utilized REST to implement our web service?

54
00:02:59,658 --> 00:03:00,111
Well,

55
00:03:00,111 --> 00:03:02,826
the Spring Framework provides support for

56
00:03:02,826 --> 00:03:05,116
programmatically invoking our REST service,

57
00:03:05,116 --> 00:03:08,330
and you utilize something called a RestTemplate.

58
00:03:08,330 --> 00:03:12,176
And that RestTemplate abstracts away all the tedious

59
00:03:12,176 --> 00:03:14,415
details of interacting with a web service,

60
00:03:14,415 --> 00:03:16,596
like opening a connection to the web service,

61
00:03:16,596 --> 00:03:21,307
sending over the command, and handling the response from the web service.

62
00:03:21,307 --> 00:03:21,806
In fact,

63
00:03:21,806 --> 00:03:26,378
it's so easy to use that it'll only take us one line of code to call a web

64
00:03:26,378 --> 00:03:29,070
service that looks up an account by its account number.

65
00:03:29,070 --> 00:03:32,268
Using the RestTemplate, we can call the GetForObject method,

66
00:03:32,268 --> 00:03:33,352
pass a few parameters,

67
00:03:33,352 --> 00:03:36,616
one of which is the path to the web service with the

68
00:03:36,616 --> 00:03:38,833
account ID that we want to look up,

69
00:03:38,833 --> 00:03:45,000
and the RestTemplate will take care of the rest. No pun intended.

