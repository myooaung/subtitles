WEBVTT
1
00:00:01.953 --> 00:00:06.038
Everything has disadvantages, and Spring is no exception.

2
00:00:06.038 --> 00:00:09.910
Let's take a look at some of the disadvantages of using Spring.

3
00:00:09.910 --> 00:00:12.410
One of the most common disadvantages that you'll hear about

4
00:00:12.410 --> 00:00:14.706
Spring is that Spring is too magical.

5
00:00:14.706 --> 00:00:19.053
You sort of add an annotation here or there and all of a

6
00:00:19.053 --> 00:00:21.115
sudden you magically have a fully-working app,

7
00:00:21.115 --> 00:00:25.182
and this can certainly be a drawback because the reason that something happened,

8
00:00:25.182 --> 00:00:29.262
or the reason that something worked is not always intuitive.

9
00:00:29.262 --> 00:00:31.637
Spring can also have a steep learning curve,

10
00:00:31.637 --> 00:00:34.771
as Spring has been around for a very long time,

11
00:00:34.771 --> 00:00:38.599
learning everything there is to learn about it can be overwhelming.

12
00:00:38.599 --> 00:00:42.441
Spring can also increase the size of your final deliverable,

13
00:00:42.441 --> 00:00:45.790
and in most cases this isn't an issue to be concerned with,

14
00:00:45.790 --> 00:00:46.930
but when it matters,

15
00:00:46.930 --> 00:00:50.960
Spring can be considered to be a bit large and a bit bloated.

16
00:00:50.960 --> 00:00:53.525
Another common disadvantage that you'll hear about

17
00:00:53.525 --> 00:00:55.905
Spring is that it's hard to debug,

18
00:00:55.905 --> 00:01:00.978
and this is true in some senses as Spring hides a lot of details and it

19
00:01:00.978 --> 00:01:03.472
can be hard to troubleshoot when something goes wrong.

20
00:01:03.472 --> 00:01:07.421
You may not even know where to start, or even what went wrong.

21
00:01:07.421 --> 00:01:11.037
Spring also add some additional memory overhead to applications,

22
00:01:11.037 --> 00:01:14.268
meaning that it takes more memory to run.

23
00:01:14.268 --> 00:01:16.971
And in some cases, it's really quite minor,

24
00:01:16.971 --> 00:01:19.337
and in other case, it's more pronounced.

25
00:01:19.337 --> 00:01:23.575
And I should note though that this will be true of any framework.

26
00:01:23.575 --> 00:01:26.457
The complexity of Spring has grown over time.

27
00:01:26.457 --> 00:01:29.329
It started out as a way to reduce complexity,

28
00:01:29.329 --> 00:01:35.471
and it largely accomplishes that, but over time Spring has become complex itself,

29
00:01:35.471 --> 00:01:40.451
and in many ways this is why the Spring Boot project was born.

30
00:01:40.451 --> 00:01:42.834
Spring is sort of configurable to a fault,

31
00:01:42.834 --> 00:01:47.131
and this one falls in line with the complexity that we just talked about.

32
00:01:47.131 --> 00:01:50.199
In Spring there's many knobs and dials you can turn,

33
00:01:50.199 --> 00:01:56.204
and it's very configurable, and with this comes that additional added complexity.

34
00:01:56.204 --> 00:02:00.494
Spring is big, and by that I mean it's not a small framework,

35
00:02:00.494 --> 00:02:03.536
and it's not usually a good solution for problems where you

36
00:02:03.536 --> 00:02:06.312
need to write code to give you a quick result.

37
00:02:06.312 --> 00:02:12.450
Spring was meant to build long-running applications that solve complex problems.

38
00:02:12.450 --> 00:02:16.643
Some of the community projects from Spring can sort of be hit or miss.

39
00:02:16.643 --> 00:02:21.601
Sometimes they're really great and sometimes they just fall short on features.

40
00:02:21.601 --> 00:02:24.492
And just like I mentioned when we were talking about the advantages,

41
00:02:24.492 --> 00:02:30.036
this is by no means a comprehensive list of all of the disadvantages of Spring,

42
00:02:30.036 --> 00:02:38.000
but it should give you a good idea of what are some of the drawbacks, or disadvantages.

