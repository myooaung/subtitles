1
00:00:01,798 --> 00:00:04,092
Testing is an important part of developing software,

2
00:00:04,092 --> 00:00:06,611
so it's no surprise that the Spring Framework

3
00:00:06,611 --> 00:00:09,266
strives to help in this area as well.

4
00:00:09,266 --> 00:00:13,000
And there's many different levels at which software is tested,

5
00:00:13,000 --> 00:00:16,376
and the Spring Framework focuses on two different areas,

6
00:00:16,376 --> 00:00:19,304
on unit testing and integration testing.

7
00:00:19,304 --> 00:00:22,720
Let's start by talking about unit testing.

8
00:00:22,720 --> 00:00:26,414
Unit testing is a software development process in which the smallest

9
00:00:26,414 --> 00:00:30,876
testable parts of an application called units are individually and

10
00:00:30,876 --> 00:00:34,035
independently scrutinized for proper operation.

11
00:00:34,035 --> 00:00:37,778
And explicit support for unit testing in the Spring

12
00:00:37,778 --> 00:00:39,441
Framework is actually minimal.

13
00:00:39,441 --> 00:00:42,496
The Spring Framework support for testing largely comes as a

14
00:00:42,496 --> 00:00:45,913
side effect of using one of its key concepts,

15
00:00:45,913 --> 00:00:47,469
and that's dependency injection.

16
00:00:47,469 --> 00:00:51,136
And we talked about dependency injection in the section on Spring Core.

17
00:00:51,136 --> 00:00:53,878
So just to quickly refresh your memory,

18
00:00:53,878 --> 00:00:57,865
dependency injection is all about dealing with the way

19
00:00:57,865 --> 00:00:59,637
objects fulfill their dependencies.

20
00:00:59,637 --> 00:01:02,885
So you're probably wondering how exactly does dependency

21
00:01:02,885 --> 00:01:05,228
injection help make testing easier?

22
00:01:05,228 --> 00:01:07,086
Well, remember that with unit testing,

23
00:01:07,086 --> 00:01:10,373
the idea is to test the smallest unit of code possible,

24
00:01:10,373 --> 00:01:13,164
and when the code that's being tested has no dependencies,

25
00:01:13,164 --> 00:01:16,529
meaning that it doesn't depend on other code to do its work,

26
00:01:16,529 --> 00:01:19,179
this is a fairly easy process; however,

27
00:01:19,179 --> 00:01:21,811
when the code under test has dependencies,

28
00:01:21,811 --> 00:01:25,141
it's important to be able to control how those

29
00:01:25,141 --> 00:01:28,686
dependencies behave in order to restrict the testing to

30
00:01:28,686 --> 00:01:31,117
just the code and not the dependencies.

31
00:01:31,117 --> 00:01:34,362
If the code is written with dependency injection in mind,

32
00:01:34,362 --> 00:01:36,479
the testing becomes a lot easier.

33
00:01:36,479 --> 00:01:40,087
The developer is forced to declare what the code depends on,

34
00:01:40,087 --> 00:01:42,683
and the code expects to be given those dependencies,

35
00:01:42,683 --> 00:01:45,578
and the code doesn't necessarily care where they come from,

36
00:01:45,578 --> 00:01:48,064
just the fact that something fulfills them.

37
00:01:48,064 --> 00:01:49,389
So during testing,

38
00:01:49,389 --> 00:01:54,447
dependent code can be replaced with code that behaves a certain way,

39
00:01:54,447 --> 00:01:58,616
and this action of replacing pieces of code with

40
00:01:58,616 --> 00:02:01,140
controlled code is called mocking.

41
00:02:01,140 --> 00:02:03,674
Now just to be absolutely clear, in unit testing,

42
00:02:03,674 --> 00:02:06,960
we don't actually use dependency injection to inject

43
00:02:06,960 --> 00:02:09,401
dependencies into our unit tests,

44
00:02:09,401 --> 00:02:13,594
but the way that the code is set up for dependency injection,

45
00:02:13,594 --> 00:02:17,461
mainly that the code is forced to declare what it depends on,

46
00:02:17,461 --> 00:02:19,521
that helps to make testing easier.

47
00:02:19,521 --> 00:02:22,862
If you're confused or still not grasping the concept,

48
00:02:22,862 --> 00:02:25,850
hopefully it'll make sense with an example.

49
00:02:25,850 --> 00:02:28,381
Suppose you have a piece of code that grants people certain

50
00:02:28,381 --> 00:02:30,942
permissions based on their security clearance level,

51
00:02:30,942 --> 00:02:35,805
and suppose that there's three different types of security clearance,

52
00:02:35,805 --> 00:02:37,688
confidential, secret, and top secret.

53
00:02:37,688 --> 00:02:41,304
Now I don't expect that you'll understand this piece of code,

54
00:02:41,304 --> 00:02:43,198
so let's quickly walk through it.

55
00:02:43,198 --> 00:02:46,319
If you notice the method, the getPermissions method,

56
00:02:46,319 --> 00:02:49,296
is passed a parameter called the SecurityManager,

57
00:02:49,296 --> 00:02:54,741
and the SecurityManager is responsible for getting the security clearance level.

58
00:02:54,741 --> 00:02:59,835
And then we have a series of if/else if statements that just check what that

59
00:02:59,835 --> 00:03:04,149
level is and grant certain permissions based on that level.

60
00:03:04,149 --> 00:03:07,325
When testing this piece of code, you want to be able to test every condition,

61
00:03:07,325 --> 00:03:12,067
or what happens in every scenario, every if block,

62
00:03:12,067 --> 00:03:15,546
and luckily this code has been written with dependency injection in mind

63
00:03:15,546 --> 00:03:19,082
and declares that it depends on the SecurityManager.

64
00:03:19,082 --> 00:03:19,613
During testing,

65
00:03:19,613 --> 00:03:22,267
instead of using the real logic to determine what the

66
00:03:22,267 --> 00:03:24,323
user's current security clearance level is,

67
00:03:24,323 --> 00:03:29,646
we can mock this dependency and control the way the SecurityManager behaves,

68
00:03:29,646 --> 00:03:33,750
or in other words, we can control what security clearance level is returned.

69
00:03:33,750 --> 00:03:35,715
So for instance, if we were writing a test here,

70
00:03:35,715 --> 00:03:39,681
for our first test we could make it so that the SecurityManager

71
00:03:39,681 --> 00:03:42,199
that it uses always returns confidential,

72
00:03:42,199 --> 00:03:46,457
and that would ensure that we enter that first if block.

73
00:03:46,457 --> 00:03:48,558
And then for our second test,

74
00:03:48,558 --> 00:03:52,109
we could make it always return secret and it would make

75
00:03:52,109 --> 00:03:54,308
sure that it enters that second if block,

76
00:03:54,308 --> 00:03:55,132
and so on.

77
00:03:55,132 --> 00:03:58,149
If the SecurityManager had not been declared as a dependency,

78
00:03:58,149 --> 00:04:00,906
this code would have been much harder to test because we wouldn't

79
00:04:00,906 --> 00:04:04,726
be able to as easily control the logic of the SecurityManager to

80
00:04:04,726 --> 00:04:07,812
test all of the various conditions.

81
00:04:07,812 --> 00:04:10,324
As part of the support for unit testing,

82
00:04:10,324 --> 00:04:13,087
the Spring Framework includes a number of prewritten

83
00:04:13,087 --> 00:04:15,723
mocks that can be used in testing,

84
00:04:15,723 --> 00:04:19,800
and this ultimately makes testing easier and faster for a developer

85
00:04:19,800 --> 00:04:23,900
because it saves them from having to write their own mocks.

86
00:04:23,900 --> 00:04:26,378
The second area of focus for testing within the Spring

87
00:04:26,378 --> 00:04:27,719
Framework is integration testing,

88
00:04:27,719 --> 00:04:32,430
and integration testing is the phase in software testing in which

89
00:04:32,430 --> 00:04:36,413
individual modules are combined and tested as a group.

90
00:04:36,413 --> 00:04:37,989
It occurs after unit testing.

91
00:04:37,989 --> 00:04:39,565
And as the name suggests,

92
00:04:39,565 --> 00:04:43,076
integration testing is focused on how various parts of a

93
00:04:43,076 --> 00:04:44,756
software application integrate together.

94
00:04:44,756 --> 00:04:48,844
Integration tests allow you to run whole pieces of an

95
00:04:48,844 --> 00:04:52,855
application and test how they all work together and not just

96
00:04:52,855 --> 00:04:56,014
pieces of code in isolation like unit tests.

97
00:04:56,014 --> 00:04:59,463
Outside of explicit support for integration tests,

98
00:04:59,463 --> 00:05:03,136
the Spring Framework plays an important role in integration testing,

99
00:05:03,136 --> 00:05:06,522
as it could be used to piece together various parts

100
00:05:06,522 --> 00:05:08,215
of the application for testing.

101
00:05:08,215 --> 00:05:10,014
In terms of explicit support,

102
00:05:10,014 --> 00:05:13,917
the Spring Framework provides support for common integration testing scenarios,

103
00:05:13,917 --> 00:05:16,756
like setting up and testing data access,

104
00:05:16,756 --> 00:05:21,747
as well as other scenarios like setting up and testing whole parts of

105
00:05:21,747 --> 00:05:24,817
a web application to ensure they're functional.

106
00:05:24,817 --> 00:05:27,362
Another nice feature provided by the Spring Framework is

107
00:05:27,362 --> 00:05:29,453
the ability to clean up after tests.

108
00:05:29,453 --> 00:05:32,199
And let me explain what I mean by that.

109
00:05:32,199 --> 00:05:33,932
So when you're writing integration tests,

110
00:05:33,932 --> 00:05:37,443
it's very common that you'll be changing the state of the

111
00:05:37,443 --> 00:05:39,509
application just by running the test.

112
00:05:39,509 --> 00:05:40,171
For instance,

113
00:05:40,171 --> 00:05:43,484
maybe you do some data access tests and you insert

114
00:05:43,484 --> 00:05:45,272
some new data into a database.

115
00:05:45,272 --> 00:05:49,374
And if you leave that data in there after the test is complete,

116
00:05:49,374 --> 00:05:53,438
it could end up affecting how other tests run after it.

117
00:05:53,438 --> 00:06:01,000
So the Spring Framework provides support for helping you clean up those tests after they run.

