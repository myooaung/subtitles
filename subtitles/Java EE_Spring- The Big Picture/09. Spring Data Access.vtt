WEBVTT
1
00:00:01.760 --> 00:00:03.948
Whether it be storing it, retrieving it,

2
00:00:03.948 --> 00:00:07.721
or both, almost every application interacts with data these days.

3
00:00:07.721 --> 00:00:09.210
Data is super important.

4
00:00:09.210 --> 00:00:13.726
And the easier it is to develop applications that can interact with data,

5
00:00:13.726 --> 00:00:14.413
the better.

6
00:00:14.413 --> 00:00:18.191
And that's the job of the Spring Framework's Data Access module.

7
00:00:18.191 --> 00:00:21.188
To get started, let's start off with an example.

8
00:00:21.188 --> 00:00:25.534
On the left we have some example code that's used to fetch data from a

9
00:00:25.534 --> 00:00:28.739
database using the Java Database Connectivity API,

10
00:00:28.739 --> 00:00:31.783
or JDBC as it's commonly referred to.

11
00:00:31.783 --> 00:00:34.208
Now don't worry about the code.

12
00:00:34.208 --> 00:00:35.713
The specifics really aren't important.

13
00:00:35.713 --> 00:00:39.511
The important point to make here is that it requires a

14
00:00:39.511 --> 00:00:44.274
fair amount of code to retrieve data, and if you look a little bit closer,

15
00:00:44.274 --> 00:00:47.624
you'll realize that there's really only a small area of

16
00:00:47.624 --> 00:00:50.314
the code that's important to the logic.

17
00:00:50.314 --> 00:00:54.739
The rest of the surrounding code is required to use the API.

18
00:00:54.739 --> 00:00:57.634
This code that's necessary to use the API,

19
00:00:57.634 --> 00:01:03.340
but sort of causes clutter in our application is called boilerplate code.

20
00:01:03.340 --> 00:01:05.139
And as you can imagine,

21
00:01:05.139 --> 00:01:09.382
adding this same boilerplate code every time you needed to

22
00:01:09.382 --> 00:01:13.404
write or retrieve data becomes very tedious.

23
00:01:13.404 --> 00:01:16.115
Let's take a look at what this same code looks like,

24
00:01:16.115 --> 00:01:20.225
but using the Spring Framework's Data Access support.

25
00:01:20.225 --> 00:01:24.178
As you can see, the code on the left is significantly reduced,

26
00:01:24.178 --> 00:01:29.448
and not only is it reduced, it's much more clear as to the intent of this code.

27
00:01:29.448 --> 00:01:32.031
We don't have to weed through the boilerplate code

28
00:01:32.031 --> 00:01:34.777
just to understand the purpose of it.

29
00:01:34.777 --> 00:01:37.640
The Spring Framework's Data Access support also makes it

30
00:01:37.640 --> 00:01:39.561
super easy to use database transactions.

31
00:01:39.561 --> 00:01:44.070
Now, you may not be familiar with what a database transaction is,

32
00:01:44.070 --> 00:01:46.752
so let me quickly explain.

33
00:01:46.752 --> 00:01:50.516
A transaction is a general unit of work that must

34
00:01:50.516 --> 00:01:53.277
happen all together or not at all.

35
00:01:53.277 --> 00:01:56.949
So a database transaction is a series of database

36
00:01:56.949 --> 00:01:59.518
operations that must happen all together,

37
00:01:59.518 --> 00:02:01.231
or not at all.

38
00:02:01.231 --> 00:02:05.702
And just to be clear, that doesn't necessarily mean that they all happen at once,

39
00:02:05.702 --> 00:02:09.697
they just all happen or they don't happen at all.

40
00:02:09.697 --> 00:02:12.696
A classic real-life example of a transaction is

41
00:02:12.696 --> 00:02:14.841
transferring money between two bank accounts.

42
00:02:14.841 --> 00:02:18.708
You first have to subtract the amount from the first account,

43
00:02:18.708 --> 00:02:23.380
say it's $50, and then you add that amount to the second account.

44
00:02:23.380 --> 00:02:26.439
And if the subtraction of the money succeeds,

45
00:02:26.439 --> 00:02:29.793
but the addition fails, then the money's lost.

46
00:02:29.793 --> 00:02:34.231
And likewise, if the subtraction fails, but the addition succeeds,

47
00:02:34.231 --> 00:02:37.632
then somebody just got 50 bucks for free.

48
00:02:37.632 --> 00:02:42.725
So as you can see, transferring money between two accounts must be transactional.

49
00:02:42.725 --> 00:02:47.198
It must happen all together or not at all.

50
00:02:47.198 --> 00:02:49.970
Let's take a look at another example.

51
00:02:49.970 --> 00:02:51.950
Again using the JDBC API,

52
00:02:51.950 --> 00:02:56.647
the following code on the left is a pretty standard example of executing

53
00:02:56.647 --> 00:03:00.349
a series of statements within a database transaction.

54
00:03:00.349 --> 00:03:02.488
And just like with our previous example,

55
00:03:02.488 --> 00:03:06.729
you'll notice there's a lot of boilerplate code here that sort of draws

56
00:03:06.729 --> 00:03:10.108
focus away from the main core intent of the code.

57
00:03:10.108 --> 00:03:13.915
Let's see what this same code looks like using the

58
00:03:13.915 --> 00:03:17.251
transactional support in the Spring Framework.

59
00:03:17.251 --> 00:03:19.165
Wow, that's a lot simpler.

60
00:03:19.165 --> 00:03:21.889
You simply declare the method as transactional,

61
00:03:21.889 --> 00:03:26.613
meaning that you want this method to execute within a transaction,

62
00:03:26.613 --> 00:03:30.710
and the Spring Framework takes care of the rest.

63
00:03:30.710 --> 00:03:31.367
Another small,

64
00:03:31.367 --> 00:03:35.157
but interesting feature provided by the Data Access module is

65
00:03:35.157 --> 00:03:37.484
something called exception translation.

66
00:03:37.484 --> 00:03:42.553
And exceptions are events within a program that disrupt execution.

67
00:03:42.553 --> 00:03:46.969
So for instance, if you tried to read data from a database and you got an error,

68
00:03:46.969 --> 00:03:50.267
the Java code would throw an exception.

69
00:03:50.267 --> 00:03:51.698
And the problem is,

70
00:03:51.698 --> 00:03:54.842
different database vendors have different errors and different

71
00:03:54.842 --> 00:03:58.334
exceptions for the same class of errors.

72
00:03:58.334 --> 00:04:02.250
So for instance, consider an example where you had problems with the data,

73
00:04:02.250 --> 00:04:04.409
and when using MySQL,

74
00:04:04.409 --> 00:04:11.121
a data integrity violation could return any one of the following codes,

75
00:04:11.121 --> 00:04:15.174
such as 630, or 839, or 1557.

76
00:04:15.174 --> 00:04:18.877
And that same data integrity violation in Oracle

77
00:04:18.877 --> 00:04:22.298
would return something like 1400, or 2292,

78
00:04:22.298 --> 00:04:28.375
and the Data Access module of the Spring Framework helps by

79
00:04:28.375 --> 00:04:33.507
taking these database-specific error codes and translating them

80
00:04:33.507 --> 00:04:36.823
into a well-known set of exceptions.

81
00:04:36.823 --> 00:04:38.995
So just to make this a bit more concrete,

82
00:04:38.995 --> 00:04:42.018
looking at the different error codes from MySQL and Oracle,

83
00:04:42.018 --> 00:04:46.223
you can see that the Spring Framework would translate those into

84
00:04:46.223 --> 00:04:51.381
something called a DataIntegrityViolationException.

85
00:04:51.381 --> 00:04:52.900
Last, but certainly not least,

86
00:04:52.900 --> 00:04:57.289
Data Access support within the Spring Framework helps to make testing easier.

87
00:04:57.289 --> 00:05:01.367
Since the Spring Framework is managing the configuration and the

88
00:05:01.367 --> 00:05:05.102
set up of how an application accesses its data,

89
00:05:05.102 --> 00:05:09.794
it's very easy to switch out that configuration for testing.

90
00:05:09.794 --> 00:05:14.908
So for instance, during testing it's common to utilize an embedded test database.

91
00:05:14.908 --> 00:05:17.323
You certainly wouldn't want to be running your tests

92
00:05:17.323 --> 00:05:18.642
with important production data,

93
00:05:18.642 --> 00:05:22.553
and Spring's Data Access support helps to set up that

94
00:05:22.553 --> 00:05:31.000
embedded test database and ensure that your code is configured to point to that during tests.

