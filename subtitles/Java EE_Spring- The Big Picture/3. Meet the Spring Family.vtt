WEBVTT
1
00:00:01.876 --> 00:00:06.279
The Spring family all began with the creation of the Spring Framework,

2
00:00:06.279 --> 00:00:10.339
which was built largely in response to the complexity of developing

3
00:00:10.339 --> 00:00:15.699
applications using Java's enterprise framework called J2EE,

4
00:00:15.699 --> 00:00:17.745
it's now called Java EE,

5
00:00:17.745 --> 00:00:21.722
and the Spring Framework aimed at removing the complexity and

6
00:00:21.722 --> 00:00:25.576
helped to make things like web development and data access

7
00:00:25.576 --> 00:00:28.176
easier for developers to implement.

8
00:00:28.176 --> 00:00:30.634
It also aimed at reducing boilerplate code,

9
00:00:30.634 --> 00:00:33.753
and if you're not familiar with what that is,

10
00:00:33.753 --> 00:00:37.727
it's repetitive code that's often needed as part of the logic,

11
00:00:37.727 --> 00:00:43.551
but tends to clutter the application and draw focus away from the main logic.

12
00:00:43.551 --> 00:00:46.253
The Spring Framework is still heavily used today,

13
00:00:46.253 --> 00:00:50.573
and it's the foundation upon which everything else is built.

14
00:00:50.573 --> 00:00:54.771
The success of the Spring Framework led to the creation of several Spring

15
00:00:54.771 --> 00:00:58.703
projects that were built on top of the Spring Framework,

16
00:00:58.703 --> 00:01:02.095
but tailored to specific needs or domains.

17
00:01:02.095 --> 00:01:02.808
For example,

18
00:01:02.808 --> 00:01:06.507
the Spring Security project was created to remove the complexity

19
00:01:06.507 --> 00:01:09.951
and challenges with securing a Java application,

20
00:01:09.951 --> 00:01:13.179
and another project, like the Spring Data project,

21
00:01:13.179 --> 00:01:18.314
was created to further simplify data access in Java applications.

22
00:01:18.314 --> 00:01:22.986
The Spring Framework and Spring projects continued to evolve and thrive,

23
00:01:22.986 --> 00:01:26.377
eventually resulting in the creation of a particularly

24
00:01:26.377 --> 00:01:28.877
impactful project called Spring Boot.

25
00:01:28.877 --> 00:01:32.377
Spring Boot was a real game changer.

26
00:01:32.377 --> 00:01:36.064
It provided a new and drastically faster way of

27
00:01:36.064 --> 00:01:37.570
building Spring-based applications.

28
00:01:37.570 --> 00:01:39.763
Up until Spring Boot,

29
00:01:39.763 --> 00:01:44.872
building a Spring-based application had always involved a lot of choice making,

30
00:01:44.872 --> 00:01:48.836
configuration, and a cumbersome deployment model.

31
00:01:48.836 --> 00:01:52.749
Spring Boot removed all of that by taking an opinionated view of

32
00:01:52.749 --> 00:01:56.542
building Spring-based applications including sensible defaults for

33
00:01:56.542 --> 00:01:58.609
library choices and configuration,

34
00:01:58.609 --> 00:02:02.097
and adding smarts for auto-detecting and

35
00:02:02.097 --> 00:02:04.936
auto-configuring other common configurations.

36
00:02:04.936 --> 00:02:08.755
It also massively simplified the deployment process and made running a

37
00:02:08.755 --> 00:02:13.802
Spring-based application as simple as running a single command.

38
00:02:13.802 --> 00:02:15.842
Lastly came the Spring Cloud project.

39
00:02:15.842 --> 00:02:21.293
Spring Cloud was built on top of Spring Boot and simplified the development of

40
00:02:21.293 --> 00:02:24.519
applications that make use of distributed architectures,

41
00:02:24.519 --> 00:02:26.438
such as microservice architectures,

42
00:02:26.438 --> 00:02:30.389
and these type of architectures often have many

43
00:02:30.389 --> 00:02:32.556
common patterns that are implemented,

44
00:02:32.556 --> 00:02:35.546
such as service discovery and distributed configuration,

45
00:02:35.546 --> 00:02:40.679
and Spring Cloud helped to make it easier for developers to

46
00:02:40.679 --> 00:02:43.762
build applications that use those patterns.

47
00:02:43.762 --> 00:02:51.000
Now that we've been introduced to the Spring family, let's take a look at why we would want to use it.

