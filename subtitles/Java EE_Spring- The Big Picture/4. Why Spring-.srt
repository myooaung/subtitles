1
00:00:01,827 --> 00:00:03,040
So why Spring?

2
00:00:03,040 --> 00:00:07,957
And oftentimes you'll hear people asking, why would I want to use Spring?

3
00:00:07,957 --> 00:00:12,200
And that's probably something you may be even thinking for yourself right now.

4
00:00:12,200 --> 00:00:15,795
And one of the common answers you'll hear is that

5
00:00:15,795 --> 00:00:21,323
it's a good alternative to Java EE, and while that was true in the beginning,

6
00:00:21,323 --> 00:00:26,037
today Spring is so much more than just an alternative to Java EE.

7
00:00:26,037 --> 00:00:26,815
In fact,

8
00:00:26,815 --> 00:00:31,310
it's actually complimentary to Java EE and makes use of several of the

9
00:00:31,310 --> 00:00:35,814
standard specifications like the Java Persistence API.

10
00:00:35,814 --> 00:00:40,099
The question of why you would want to use Spring is a completely valid and

11
00:00:40,099 --> 00:00:44,500
reasonable question that actually has a very simple answer,

12
00:00:44,500 --> 00:00:48,420
and that's that creating software can be hard,

13
00:00:48,420 --> 00:00:50,775
seriously, and Spring helps make it easier.

14
00:00:50,775 --> 00:00:54,777
You'll notice that regardless of the project within the Spring family,

15
00:00:54,777 --> 00:00:57,342
they all share a common theme,

16
00:00:57,342 --> 00:01:00,893
and that's to make developing Java applications easier.

17
00:01:00,893 --> 00:01:04,689
Let's talk about some other reasons why Spring is a good choice.

18
00:01:04,689 --> 00:01:08,525
First, Spring is really great at being flexible,

19
00:01:08,525 --> 00:01:10,894
modular, and especially backwards compatible.

20
00:01:10,894 --> 00:01:14,997
So Spring is far from an all‑or‑nothing type of choice.

21
00:01:14,997 --> 00:01:15,632
In fact,

22
00:01:15,632 --> 00:01:19,263
you're given the freedom to pick and choose whichever parts of

23
00:01:19,263 --> 00:01:21,989
Spring make the most sense for your project.

24
00:01:21,989 --> 00:01:25,094
And what's really great about that is that you can be sure

25
00:01:25,094 --> 00:01:28,393
that the investment you're making with Spring won't be wasted

26
00:01:28,393 --> 00:01:30,637
when a new version is released.

27
00:01:30,637 --> 00:01:34,110
Spring also has a very large and active community,

28
00:01:34,110 --> 00:01:37,832
and in my opinion this is often one of the things that's overlooked

29
00:01:37,832 --> 00:01:41,139
and taken for granted when assessing technologies,

30
00:01:41,139 --> 00:01:42,913
but it makes a huge difference.

31
00:01:42,913 --> 00:01:43,505
With Spring,

32
00:01:43,505 --> 00:01:46,862
you can be sure that there's a wealth of knowledge

33
00:01:46,862 --> 00:01:50,664
that already exists out there, and if you run into a problem,

34
00:01:50,664 --> 00:01:54,117
it's likely that someone else has already ran into that same problem,

35
00:01:54,117 --> 00:01:56,524
and they can probably help you through it.

36
00:01:56,524 --> 00:01:57,238
And lastly,

37
00:01:57,238 --> 00:02:00,450
what makes Spring a good choice is that it's

38
00:02:00,450 --> 00:02:02,295
continually innovating and evolving.

39
00:02:02,295 --> 00:02:07,449
Being an open‑source project but fully backed by a company called

40
00:02:07,449 --> 00:02:10,941
Pivotal allows Spring to remain healthy and alive,

41
00:02:10,941 --> 00:02:16,240
while at the same time pushing the bounds of enterprise Java development.

42
00:02:16,240 --> 00:02:27,000
It's not uncommon for Java's standards or specifications to be influenced or based on ideas that originated within Spring.

