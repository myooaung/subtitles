WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.375
So this is the website that I'm trying to deploy.

00:00:03.375 --> 00:00:09.915
It is based on React and it's using Gatsby in order to easily make some things.

00:00:09.915 --> 00:00:11.340
I'm going to go very deep into that.

00:00:11.340 --> 00:00:14.790
But essentially what I have here is I have my source folder,

00:00:14.790 --> 00:00:17.535
which contains the pages and everything that I'm using here.

00:00:17.535 --> 00:00:22.080
There's also this public folder that is generated when are running a specific command.

00:00:22.080 --> 00:00:23.430
So let me show you what I mean by that.

00:00:23.430 --> 00:00:29.995
So for example, if I go ahead delete a public folder and run Gatsby build.

00:00:29.995 --> 00:00:33.620
Gatsby will start regenerating this public folder.

00:00:33.620 --> 00:00:38.300
And essentially, what I'm trying to deploy here is the contents of

00:00:38.300 --> 00:00:40.355
the public forum or be pulled contain

00:00:40.355 --> 00:00:44.195
JavaScript files that are just small enough so that the load fast.

00:00:44.195 --> 00:00:50.270
They compile and make everything good for a production environment, but put it like that.

00:00:50.270 --> 00:00:52.460
So this is essentially my build process.

00:00:52.460 --> 00:00:55.370
I'm using Gatsby to generate this public folder.

00:00:55.370 --> 00:00:59.420
And essentially many JavaScript application nowadays have this tab as well.

00:00:59.420 --> 00:01:02.510
If you're really just hosting HTML files,

00:01:02.510 --> 00:01:04.970
like you can see this one here, index.html.

00:01:04.970 --> 00:01:07.580
We have no compilation process to put it like that.

00:01:07.580 --> 00:01:09.365
You don't need this, builds them.

00:01:09.365 --> 00:01:11.765
But because I needed and I want to automate it,

00:01:11.765 --> 00:01:16.160
we're going to go ahead here and on the root part of the website,

00:01:16.160 --> 00:01:17.480
I'm going to create a new file.

00:01:17.480 --> 00:01:21.830
And you have to be careful to name this file exactly as I mentioned it here.

00:01:21.830 --> 00:01:24.890
So the name of the file, we'll start with dot git,

00:01:24.890 --> 00:01:27.920
lab, dash, ci, dot YAML.

00:01:27.920 --> 00:01:31.145
So if you don't name it exactly as you see it here,

00:01:31.145 --> 00:01:35.885
this file will not be detected and the pipeline itself for not run.

00:01:35.885 --> 00:01:39.845
In this pipeline, I have here two simple stages.

00:01:39.845 --> 00:01:42.740
There's this build websites stage.

00:01:42.740 --> 00:01:48.900
In the second state that I have is to deploy to AWS S3.

00:01:49.750 --> 00:01:51.860
Let's start with the first one.

00:01:51.860 --> 00:01:55.475
So essentially what's happening here is this stage.

00:01:55.475 --> 00:02:00.695
And I've indented here two spaces just to show that everything is below build website,

00:02:00.695 --> 00:02:03.800
There's going to be part of the build stage.

00:02:03.800 --> 00:02:08.390
Additionally, because this is a project that needs npm

00:02:08.390 --> 00:02:12.380
to install dependencies and needs no JS to run mpm.

00:02:12.380 --> 00:02:14.300
I'm going to also use a docker image.

00:02:14.300 --> 00:02:20.540
So I'm going to specify an image width image and the name of the image will be node.

00:02:20.540 --> 00:02:23.285
We're going to use node in version ten.

00:02:23.285 --> 00:02:25.190
Now, when I have this,

00:02:25.190 --> 00:02:26.750
I can use the script block.

00:02:26.750 --> 00:02:27.830
And inside the script, OK,

00:02:27.830 --> 00:02:29.870
I can add any comments that I want.

00:02:29.870 --> 00:02:33.230
So the main command that I'm interested in is npm install.

00:02:33.230 --> 00:02:36.080
This will install all the dependencies that I need.

00:02:36.080 --> 00:02:39.005
Additionally, what we're doing is we need a tool,

00:02:39.005 --> 00:02:41.390
it's called FASB CLI.

00:02:41.390 --> 00:02:44.255
So we're going to install that as well.

00:02:44.255 --> 00:02:47.930
It's always a good practice when you have any tools.

00:02:47.930 --> 00:02:50.225
Just to shorter version,

00:02:50.225 --> 00:02:52.280
just to have an idea like what we are installing,

00:02:52.280 --> 00:02:54.890
especially if you're not installing a specific version.

00:02:54.890 --> 00:02:57.665
And then I'm going to do Gatsby build.

00:02:57.665 --> 00:03:01.250
So this is exactly the same command that I've executed locally.

00:03:01.250 --> 00:03:03.950
So I'm trying to replicate in my CI,

00:03:03.950 --> 00:03:07.085
CD pipeline the exact same steps that I would locally.

00:03:07.085 --> 00:03:08.990
This is practically the key to automation.

00:03:08.990 --> 00:03:12.980
As, as soon as you know exactly which commands you need to execute,

00:03:12.980 --> 00:03:15.155
you can easily put them inside a pipeline.

00:03:15.155 --> 00:03:17.705
So this is the bills state essentially.

00:03:17.705 --> 00:03:22.700
And the stages are created inside Docker images that don't have,

00:03:22.700 --> 00:03:24.665
they don't share information with one another.

00:03:24.665 --> 00:03:27.530
We also need a way to exchange this information.

00:03:27.530 --> 00:03:31.789
So practically, what we didn't discuss is to create an artifact,

00:03:31.789 --> 00:03:34.610
or essentially our public folder is the artifacts.

00:03:34.610 --> 00:03:39.080
So I'm going to define it under artifacts paths.

00:03:39.080 --> 00:03:40.700
So we're gonna define a path,

00:03:40.700 --> 00:03:44.465
this artifact that the path will be public won't have this path.

00:03:44.465 --> 00:03:47.795
So we know that when Gatsby build will be executed,

00:03:47.795 --> 00:03:50.105
this public folder will be created.

00:03:50.105 --> 00:03:53.345
It's not part of our git repository, so it's never there.

00:03:53.345 --> 00:03:56.765
And because we want to save it after the job completes,

00:03:56.765 --> 00:03:59.180
we have to specify it as an artifact at the Weizmann,

00:03:59.180 --> 00:04:02.960
the job ends, the Docker image gets destroyed and all the information is lost.

00:04:02.960 --> 00:04:08.075
So we definitely don't want that because we want to use this to deploy to AWS S3.

00:04:08.075 --> 00:04:11.960
This new want to keep things as separated from one another,

00:04:11.960 --> 00:04:17.090
one to have like a big job that does everything on a keep things as clean as possible.

00:04:17.090 --> 00:04:19.670
Also, the deploy tool as three,

00:04:19.670 --> 00:04:22.530
this will be part of the deploy stage.

00:04:22.630 --> 00:04:24.830
Afford the deploy stage,

00:04:24.830 --> 00:04:28.250
we're going to use an official image from AWS.

00:04:28.250 --> 00:04:31.890
It's called Amazon AWS CLI.

00:04:32.220 --> 00:04:34.900
We have to do something a bit different.

00:04:34.900 --> 00:04:37.990
So this image has a weird thing.

00:04:37.990 --> 00:04:39.220
It's called an entry point.

00:04:39.220 --> 00:04:40.615
I don't want to get too much into that,

00:04:40.615 --> 00:04:44.260
but it conflicts a bit with a way GitLab CI works with images.

00:04:44.260 --> 00:04:46.570
So we'll have to override that entry points.

00:04:46.570 --> 00:04:50.395
So in order to do that, I'm going to specify here the name.

00:04:50.395 --> 00:04:54.790
And we're going to also specify an empty entry point.

00:04:54.790 --> 00:04:58.840
So make sure that this looks exactly as you see it here.

00:04:58.840 --> 00:05:02.470
Otherwise you will get some weird errors when you're trying to start this.

00:05:02.470 --> 00:05:04.240
At this point, what do we have?

00:05:04.240 --> 00:05:07.435
Well, we have this AWS CLI and the AWS CLI

00:05:07.435 --> 00:05:11.110
allows us to interact with the AWS Web Services.

00:05:11.110 --> 00:05:13.119
But this time we're not using the interface.

00:05:13.119 --> 00:05:15.450
This is something that will be due manually.

00:05:15.450 --> 00:05:20.630
We're using this command line interface to practically tell S3,

00:05:20.630 --> 00:05:22.340
Hey, here are some files,

00:05:22.340 --> 00:05:24.125
host them for us, okay?

00:05:24.125 --> 00:05:26.090
Just to make sure everything worked properly,

00:05:26.090 --> 00:05:29.390
going to output here the version of AWS,

00:05:29.390 --> 00:05:31.220
and this is the name of the program,

00:05:31.220 --> 00:05:33.290
so it's going to be simply AWS.

00:05:33.290 --> 00:05:38.555
And what we're doing here is I'm trying to copy all the files.

00:05:38.555 --> 00:05:42.290
So practically we have here AWS.

00:05:42.290 --> 00:05:45.470
S3 is a service that we are trying to use.

00:05:45.470 --> 00:05:48.275
Seeing here, copy public.

00:05:48.275 --> 00:05:53.405
And you can see here that we're referencing this artifact that we have published here.

00:05:53.405 --> 00:05:56.135
So when this Docker image will be started,

00:05:56.135 --> 00:05:58.535
this folder will be also available there.

00:05:58.535 --> 00:06:02.405
Otherwise, if I don't specify it here as an artifact is not available here either.

00:06:02.405 --> 00:06:04.400
In the entire thing will not work.

00:06:04.400 --> 00:06:07.655
What we're doing here is we have to specify the path.

00:06:07.655 --> 00:06:12.395
So the path in S3 start with S3 slash slash.

00:06:12.395 --> 00:06:15.590
And then we'll have to specify the name of the bucket.

00:06:15.590 --> 00:06:16.040
I.

00:06:16.040 --> 00:06:18.980
Typically we could enter here the name of the bucket as it is.

00:06:18.980 --> 00:06:21.740
I don't like to have like things

00:06:21.740 --> 00:06:25.940
that give any information about the environment itself in the pipeline.

00:06:25.940 --> 00:06:28.130
For that reason, I'm going to use here an environment variable.

00:06:28.130 --> 00:06:31.070
I'm going to simply name it as S3 bucket.

00:06:31.070 --> 00:06:33.275
Make sure you put a dollar sign in front obeyed.

00:06:33.275 --> 00:06:35.795
Otherwise it will not be recognized as variable.

00:06:35.795 --> 00:06:40.865
And we're also interested in copying all the files as you saw here in the public folder.

00:06:40.865 --> 00:06:43.070
There are a lot of file, so every day or

00:06:43.070 --> 00:06:46.670
subfolders and we don't want to copy or specify on file.

00:06:46.670 --> 00:06:50.430
So for that reason, I'm going to use here a flag called recursive.

00:06:50.560 --> 00:06:55.100
There's still another thing that I would like to do just to feel a bit more comfortable.

00:06:55.100 --> 00:06:56.405
Probably it's not required,

00:06:56.405 --> 00:07:00.440
but I just want to start every time with an empty state of the bucket.

00:07:00.440 --> 00:07:05.015
I want to make something like AWS as three.

00:07:05.015 --> 00:07:09.950
And I want to remove practically everything that is inside the bucket.

00:07:09.950 --> 00:07:11.810
Before I add new files.

00:07:11.810 --> 00:07:14.825
For that reason, I'm going to simply specify here remove,

00:07:14.825 --> 00:07:17.045
and I'm going to also use this recursive flat.

00:07:17.045 --> 00:07:19.520
So this is essentially what we're doing here.

00:07:19.520 --> 00:07:24.980
We are using this official Docker image from AWS, outputting the version,

00:07:24.980 --> 00:07:27.890
we are simply deleting everything that is

00:07:27.890 --> 00:07:31.055
inside the bucket just to make sure that we don't have any conflict.

00:07:31.055 --> 00:07:34.730
And then we're copying the entire contents of the public folder.

00:07:34.730 --> 00:07:36.500
This is how the pipeline looks like,

00:07:36.500 --> 00:07:39.510
but it doesn't mean that it will work.
