1
00:00:05,250 --> 00:00:06,110
Welcome back.

2
00:00:06,300 --> 00:00:11,070
Now that we understand the basics of using that interval core component and setting our interval times

3
00:00:11,550 --> 00:00:16,470
in this next example we're going to scrape a Web site that updates every eight seconds.

4
00:00:16,470 --> 00:00:21,930
That site is Flight Radar 24 dot com and basically it receives flight data from around the world and

5
00:00:21,930 --> 00:00:25,310
continually updates its page plotting real time flight data.

6
00:00:25,310 --> 00:00:30,660
On top of Google Maps for this particular project we're really only going to care about one number on

7
00:00:30,660 --> 00:00:33,920
that screen which is the total number of active flights worldwide.

8
00:00:34,000 --> 00:00:38,790
We're going do is every eight seconds we're going to grab that number and then use it to update our

9
00:00:38,970 --> 00:00:39,620
dashboard.

10
00:00:39,630 --> 00:00:43,090
We'll have a little continuous plot that updates in real time.

11
00:00:43,410 --> 00:00:43,950
OK.

12
00:00:44,010 --> 00:00:47,190
So as a quick note this does depend a little bit on web scraping.

13
00:00:47,190 --> 00:00:53,910
So if your workplace network or your network at home blocks that sort of activity make sure you either

14
00:00:54,030 --> 00:00:58,860
ask your administrator or you wait till you can use this on another computer because your Python will

15
00:00:58,860 --> 00:01:01,700
be accessing the internet for this particular example.

16
00:01:01,710 --> 00:01:02,810
Let's get started.

17
00:01:02,820 --> 00:01:06,450
All right before we actually head over to the text editor I just want to quickly give you a tour of

18
00:01:06,450 --> 00:01:08,880
the actual Web site we're going to be scraping for information.

19
00:01:08,880 --> 00:01:14,790
This is Flight Radar 24 dot com essentially shows you every major airline flight that's happening around

20
00:01:14,790 --> 00:01:16,050
the world all at once.

21
00:01:16,260 --> 00:01:18,760
You can see it has everything overlaid on Google Maps.

22
00:01:18,800 --> 00:01:23,090
What we're going to do is we're going to grab this total flight number appear in the left hand corner

23
00:01:23,490 --> 00:01:27,540
and we're going to use that for dashboard and do a line plot every eight seconds.

24
00:01:27,540 --> 00:01:33,360
Updates for the total number of flights still be cool to see that updating in real time.

25
00:01:33,360 --> 00:01:36,910
Let's go to our text editor and actually type this out.

26
00:01:38,930 --> 00:01:43,220
OK let's begin by doing our imports we import dash.

27
00:01:43,220 --> 00:01:49,940
We're also going to import H2 and all components as HMO as well as core components import dash core

28
00:01:49,940 --> 00:01:52,790
components as DCC.

29
00:01:52,790 --> 00:01:55,520
And then from dasht dependencies.

30
00:01:55,760 --> 00:02:01,070
Make sure you spell that right from dependencies.

31
00:02:01,130 --> 00:02:06,730
We will import input and output and actually grab data from the Web site.

32
00:02:06,740 --> 00:02:07,890
We're going to send the requests.

33
00:02:07,880 --> 00:02:09,280
So new import requests.

34
00:02:09,410 --> 00:02:14,260
If you don't have this library simply do Pitman's thought request although it should be in that requirements

35
00:02:14,260 --> 00:02:20,510
that textfile that we have at the beginning of the Course will create our application and we're going

36
00:02:20,510 --> 00:02:25,220
to do here is just set up our layout and then we'll set up our function which actually inserts things

37
00:02:25,220 --> 00:02:34,870
into the layout for every Interpol that's called so our app layout is going to be T.M. dif.

38
00:02:34,910 --> 00:02:40,620
And one of the things we can actually display with HCM L is the source itself of the Web site.

39
00:02:41,000 --> 00:02:45,770
So to show you how to do that you will probably not do this that often in a real dashboard as far as

40
00:02:45,770 --> 00:02:48,380
just grabbing data from a web site and displaying it.

41
00:02:48,500 --> 00:02:56,720
But this is just to show you that it's possible inside of the Stiv we're going to say T.M. dot I-frame

42
00:02:58,090 --> 00:03:07,270
and then say that the source is equal to HGT P.S. colon for Slash for Slash the libido w dots flight

43
00:03:07,360 --> 00:03:11,510
radar 24 dot com.

44
00:03:11,580 --> 00:03:16,440
OK so we're going to pass that in and then we can also set it to a certain height so it doesn't take

45
00:03:16,440 --> 00:03:22,080
up the whole screen and say height is five hundred and the width is twelve hundred.

46
00:03:22,080 --> 00:03:25,450
Try to keep the same aspect ratio as a normal screen so it doesn't look too weird.

47
00:03:26,880 --> 00:03:30,020
Once you've done that so that's an it's own div right here.

48
00:03:30,090 --> 00:03:38,280
We're going to create another div and this is going to have a pre-formed mounting block.

49
00:03:38,300 --> 00:03:45,630
HVM apre we're going to set this idea to be called counter text essentially counting how many times

50
00:03:45,720 --> 00:03:54,430
we've updated our dashboard and then the children parameter is just going to say active flights.

51
00:03:56,000 --> 00:03:59,180
World wide so that's our formatting.

52
00:03:59,190 --> 00:04:04,120
Also inside this div 1 I'm going to do is so notice we have the Stiv list.

53
00:04:04,170 --> 00:04:07,510
So right after prae put a comma.

54
00:04:07,770 --> 00:04:10,450
This is where interval components are going to go.

55
00:04:10,500 --> 00:04:13,980
We'll give an idea of interval Dasch component

56
00:04:17,170 --> 00:04:20,770
the interval we're going to update every six seconds.

57
00:04:21,880 --> 00:04:26,830
Keep in mind that may or may not be too fast because if the Web site itself only updates every eight

58
00:04:26,830 --> 00:04:29,630
seconds maybe on a certain update you don't see anything change.

59
00:04:29,680 --> 00:04:37,090
So just keep that in mind and we'll set our initial number of intervals as zero so we have our interval

60
00:04:37,090 --> 00:04:37,910
core component.

61
00:04:37,930 --> 00:04:39,760
We have this pre-formatted.

62
00:04:40,120 --> 00:04:45,730
And we have an I-frame which is actually going to display part of the Web site itself all of this is

63
00:04:45,730 --> 00:04:47,070
in our layout.

64
00:04:47,320 --> 00:04:57,940
Now it's time to set up our function here we will call up Leo takes on an and we're going to pass in

65
00:04:57,940 --> 00:04:58,790
a u r l.

66
00:04:58,870 --> 00:05:03,290
This is actually a specific Yoro that you can find by kind of messing around on the site and looking

67
00:05:03,320 --> 00:05:05,060
at the source code of the data.

68
00:05:05,060 --> 00:05:09,020
Again this has more to do with web scraping which is a little bit outside the scope of this course.

69
00:05:09,090 --> 00:05:14,450
So because that has to do with what script am is going to copy and paste this you are l this sort of

70
00:05:14,450 --> 00:05:16,340
you are all going to be different every time.

71
00:05:16,340 --> 00:05:19,220
So keep that in mind for your own web sites that you want to scrape.

72
00:05:19,220 --> 00:05:21,310
It's not going to be a one size fits all solution.

73
00:05:21,350 --> 00:05:22,600
So keep that in mind.

74
00:05:22,880 --> 00:05:33,460
After that we're going to say Ari S is equal to requests dot gets and when a pass that your L and the

75
00:05:33,460 --> 00:05:39,370
fake headers actually necessary to access this site you should be careful not to overdo it with scraping

76
00:05:39,370 --> 00:05:43,300
the site where we're going to do it for a few seconds so it shouldn't be any problem but when you say

77
00:05:43,300 --> 00:05:48,910
user agents and will pass in Mozilla forward slash 5.0

78
00:05:51,610 --> 00:05:55,160
and then we'll set data equal to reds that join.

79
00:05:55,390 --> 00:05:58,830
Excuse me ROSAT Jason.

80
00:05:59,060 --> 00:06:07,550
And then we'll our counter equal to zero and then we're going to do here is say four elements in data.

81
00:06:07,550 --> 00:06:15,680
Here we're just parsing in the data that was sent back save for data that's total.

82
00:06:15,680 --> 00:06:28,610
So that's the total number of flights will say that the counter plus equals data stats total and then

83
00:06:28,610 --> 00:06:30,930
grab the element there.

84
00:06:32,240 --> 00:06:41,210
Then after all of this we're going to return active flights worldwide and we're going to format that

85
00:06:41,210 --> 00:06:41,880
value.

86
00:06:42,200 --> 00:06:48,540
So just to counter OK save that let's do a quick rundown explanation of earth that is going on.

87
00:06:48,560 --> 00:06:56,520
But before we do our if Maine is equal to name as it will to main app run the server.

88
00:06:56,600 --> 00:07:00,640
Ok so we're going to zoom out a little bit here so we can get an idea of everything that we just did.

89
00:07:01,190 --> 00:07:05,360
So what we did is we created the ash application importer requests.

90
00:07:05,360 --> 00:07:09,590
We've set up an I-frame and that's actually going to grab that Web site directly and show it in our

91
00:07:09,590 --> 00:07:10,820
dashboard.

92
00:07:10,820 --> 00:07:12,300
Then we set this pre-formatted.

93
00:07:12,320 --> 00:07:18,410
With an idea context it's just going to show the string acts of flights worldwide and then every six

94
00:07:18,410 --> 00:07:22,340
seconds we're going to update this upon every time we update this.

95
00:07:22,400 --> 00:07:26,220
We have this your will then we're going to grab a request from that.

96
00:07:26,460 --> 00:07:27,880
That's going to return back some data.

97
00:07:27,890 --> 00:07:30,900
And from that data we're essentially grabbing the total number of flights.

98
00:07:30,950 --> 00:07:36,440
Now all that's left to do is connect these components to our function with an app callback.

99
00:07:36,620 --> 00:07:48,110
Back here we're going to say app call back and we'll say output counter text.

100
00:07:48,160 --> 00:07:50,310
Well let's make sure we match that correctly.

101
00:07:50,500 --> 00:07:58,880
Counter underscore text and we're just going to grab the children so we're sending our output there.

102
00:07:59,340 --> 00:08:09,860
And for the input she's going to be illest and put here is interval components and then we're going

103
00:08:09,860 --> 00:08:12,740
to grab the number of intervals.

104
00:08:13,060 --> 00:08:13,330
All right.

105
00:08:13,380 --> 00:08:19,100
So on every up there we're running this let's make sure that all works by running our dashboard Python

106
00:08:19,120 --> 00:08:21,690
basic the pie looks like or dashboards up and running.

107
00:08:21,700 --> 00:08:22,900
Let's check it out in the browser.

108
00:08:23,070 --> 00:08:23,330
OK.

109
00:08:23,340 --> 00:08:25,530
This is what your dashboard should look like right now.

110
00:08:25,590 --> 00:08:30,680
Essentially that I-frame is showing that entire web site within the height and width of that frame.

111
00:08:30,750 --> 00:08:33,970
And if you look down here you should see active flights worldwide.

112
00:08:34,200 --> 00:08:38,760
And that's going to update pretty much every six seconds depending on what the update is actually showing

113
00:08:39,210 --> 00:08:40,600
up here in the plot.

114
00:08:41,010 --> 00:08:41,550
OK.

115
00:08:41,820 --> 00:08:45,030
So what I want to do now is add a little bit of a tracker.

116
00:08:45,060 --> 00:08:49,840
It'd be nice to have a graph here that tracks the changes over time instead of just displaying this

117
00:08:49,950 --> 00:08:51,030
number changing.

118
00:08:51,030 --> 00:08:57,480
Let's go back to our text editor put in a core component graph and update the figure based off what

119
00:08:57,480 --> 00:08:59,390
information is being passed back in.

120
00:08:59,400 --> 00:08:59,670
OK.

121
00:08:59,670 --> 00:09:05,700
Back at the text editor we're going to do here is right above this interval components still inside

122
00:09:05,700 --> 00:09:06,600
the Stiv.

123
00:09:06,840 --> 00:09:12,660
Well I'm going to do is put on a graph object this graph core component.

124
00:09:12,660 --> 00:09:22,160
We're going to give an idea of live updates Grath and we'll give a style dictionary of

125
00:09:25,560 --> 00:09:30,630
tall hundred say that and then we're going to create another function.

126
00:09:30,640 --> 00:09:32,730
This one is just updating for information.

127
00:09:32,740 --> 00:09:34,520
Let's have one that updates that graph.

128
00:09:35,960 --> 00:09:42,830
We'll create an up graph function and it's going to take an end and the callback is going to be quite

129
00:09:42,830 --> 00:09:46,670
similar to what we have up here so it's just copy and paste as callback.

130
00:09:46,670 --> 00:09:50,650
So copy and paste is callback put it in here.

131
00:09:52,870 --> 00:09:57,930
And instead of the output being countered text with children we're still going to take the same input.

132
00:09:58,090 --> 00:10:01,080
However now we're going to send this information to that graph.

133
00:10:01,180 --> 00:10:06,380
So it's going to go to a live update graph and it's sort of children.

134
00:10:06,390 --> 00:10:07,950
We're going to update the figure in that graph.

135
00:10:09,930 --> 00:10:10,640
Figure.

136
00:10:10,660 --> 00:10:11,830
There we go.

137
00:10:11,910 --> 00:10:13,930
And now let's update that figure.

138
00:10:13,950 --> 00:10:20,830
So we do hear sort of the figure that's going to that graph go figure we're going to have this be a

139
00:10:20,830 --> 00:10:23,610
scatterplot with lines and markers.

140
00:10:23,980 --> 00:10:32,030
So the data parameter lips actually the yes the data parameter that's going to be a list with a go scatterplot

141
00:10:32,030 --> 00:10:37,630
And it go that scatter in or to use go that scurrilous sure with imported graph objects.

142
00:10:37,640 --> 00:10:48,390
So I'll come back up top here and we will say import plots the dots graph objects as go save that come

143
00:10:48,390 --> 00:10:48,750
back down.

144
00:10:48,750 --> 00:10:54,030
Here we have our go scatterplot ready to go and we'll do the following.

145
00:10:54,030 --> 00:11:02,160
We will say x is equal to a List Range length of counter list.

146
00:11:02,160 --> 00:11:07,770
So the X is just going to be from zero all the way to the length of how many points we've counted so

147
00:11:07,770 --> 00:11:08,530
far.

148
00:11:08,550 --> 00:11:11,010
Essentially how many times have we refreshed this page.

149
00:11:11,250 --> 00:11:15,030
So be careful of the number of Franciso there's lots of them.

150
00:11:15,300 --> 00:11:21,680
Then why is going to be equal to the counter list.

151
00:11:21,700 --> 00:11:30,050
That's the actual count for the flights and then the mode is going to be equal to lines and markers.

152
00:11:31,260 --> 00:11:36,340
And after all this is done we're just going to return that fig to the figure.

153
00:11:36,370 --> 00:11:41,840
OK so let's zoom out here and do a quick overview of everything we've done.

154
00:11:41,860 --> 00:11:45,630
We did our imports I-frame that's showing the Web site directly.

155
00:11:45,970 --> 00:11:50,740
This pre-formatted that's showing text depending on how many active flights worldwide there are.

156
00:11:50,860 --> 00:11:55,000
Then we have this graph that's going to be updating constantly or every six seconds and then we have

157
00:11:55,000 --> 00:11:58,610
this interval component which technically is hidden you don't actually see it in your dashboard.

158
00:11:58,690 --> 00:12:04,590
It's just keeping track of how many times they want you to refresh this dashboard than our first one

159
00:12:04,940 --> 00:12:09,370
is just going to update itself by returning back something to that children.

160
00:12:09,390 --> 00:12:13,950
So it's going to return back how many active flights worldwide there are pretty much all of this is

161
00:12:13,950 --> 00:12:15,790
just web scraping information.

162
00:12:16,020 --> 00:12:21,720
So it's grabbing that Jaison data from that web site and then grabbing the total number of flights and

163
00:12:21,720 --> 00:12:24,620
a lot of this is parsing Jaison and web scraping.

164
00:12:24,660 --> 00:12:29,120
And this is going to be unfortunately pretty much different for every single Web site you scrape.

165
00:12:29,160 --> 00:12:34,200
So there's no general approach here we can really say as far as which you are Elle's or what you're

166
00:12:34,200 --> 00:12:35,990
going to need to parse that Jaison.

167
00:12:36,180 --> 00:12:37,740
That's one of the unfortunate parts of scraping.

168
00:12:37,740 --> 00:12:39,760
It's pretty much a custom job every time.

169
00:12:39,780 --> 00:12:43,490
So keep that in mind for your own use cases down here.

170
00:12:43,720 --> 00:12:47,350
We're taking that same information and then we're going to update the figure with it.

171
00:12:47,380 --> 00:12:48,860
We're going to return that figure.

172
00:12:49,060 --> 00:12:53,650
And the last thing I want to do here is something I forgot to do is actually set our counter list.

173
00:12:53,650 --> 00:12:54,990
It's actually not the find anywhere.

174
00:12:55,090 --> 00:13:02,110
We want to set our counter lists to be defined just somewhere globally we'll say counter list is equal

175
00:13:02,110 --> 00:13:03,370
to an empty list.

176
00:13:03,520 --> 00:13:07,780
And that way we can keep appending to our counter list over in the update layout.

177
00:13:07,990 --> 00:13:14,260
So we have counters to zero counter and right after that for loops done we're going to grab counter

178
00:13:14,260 --> 00:13:14,720
list.

179
00:13:14,710 --> 00:13:15,030
Whoops.

180
00:13:15,040 --> 00:13:16,630
Let's make sure we type that right.

181
00:13:17,050 --> 00:13:21,490
And we're going to append the current count to it.

182
00:13:22,770 --> 00:13:28,170
OK let's say that now we should be able to use counter list inside of this update graph we'll be able

183
00:13:28,170 --> 00:13:29,320
to grab it globally.

184
00:13:29,560 --> 00:13:32,390
So let's try this again by some basic but pi.

185
00:13:32,640 --> 00:13:35,120
Enter And it looks like it's running.

186
00:13:35,130 --> 00:13:36,450
So let's check out the Web site.

187
00:13:36,480 --> 00:13:37,640
Make sure it's working.

188
00:13:37,650 --> 00:13:38,780
All right here's our dashboard.

189
00:13:38,780 --> 00:13:43,590
We can already see that first number of flights has been recorded and every six seconds.

190
00:13:43,620 --> 00:13:45,660
You should see things updated.

191
00:13:45,660 --> 00:13:47,790
You should see this Web site be updated.

192
00:13:47,790 --> 00:13:52,230
You can see this number be updated and you should see this plot be updated if you're to do any faster

193
00:13:52,290 --> 00:13:54,010
intervals than six seconds.

194
00:13:54,060 --> 00:13:59,460
You would probably see the same number over and over again because this Web site itself I believe only

195
00:13:59,460 --> 00:14:01,610
updates about every eight seconds or so.

196
00:14:01,770 --> 00:14:05,530
So keep that in mind if you're re updating this graph is faster than the rate.

197
00:14:05,550 --> 00:14:08,380
The web site itself updates you're going to see repeated points.

198
00:14:08,430 --> 00:14:10,320
You can see the flight seemed to be increasing.

199
00:14:10,500 --> 00:14:12,990
And we just created our first live update.

200
00:14:13,200 --> 00:14:17,640
Again something I really need to stress here is every web scraping job is going to be different.

201
00:14:17,670 --> 00:14:22,050
Keep that in mind as you're trying to implement your own ideas for how to connect your dashboards to

202
00:14:22,050 --> 00:14:23,310
the live web.

203
00:14:23,310 --> 00:14:28,260
I hope those useful to the main ideas here for live updating is really all has to do with that interval

204
00:14:28,260 --> 00:14:29,310
core component.

205
00:14:29,340 --> 00:14:32,130
You set the number of intervals as well as your interval time.

206
00:14:32,130 --> 00:14:35,330
And then you use that within your callbacks.

207
00:14:35,340 --> 00:14:37,510
Thanks everyone and we'll see you at the next lecture.

