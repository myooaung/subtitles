WEBVTT
ï»¿1
00:00:05.220 --> 00:00:10.750
Welcome back in this lecture we'll be showing you how to create scatter plots with plots the scatter

2
00:00:10.760 --> 00:00:14.690
plots allow the comparison of two variables for a set of data.

3
00:00:14.700 --> 00:00:19.950
Here we have an example scatterplot where one variable is on the y axis and another variable is on the

4
00:00:19.950 --> 00:00:23.160
x axis and where those two variables end up meeting.

5
00:00:23.250 --> 00:00:28.750
We have a little point and that's our scatterplot Now depending on the trend that the scatter points

6
00:00:28.760 --> 00:00:33.620
we can actually interpret some sort of correlation in our particular case here for this image.

7
00:00:33.650 --> 00:00:38.990
It doesn't seem like these two variables on the x axis and the y axis have any sort of correlation but

8
00:00:38.990 --> 00:00:45.410
you can imagine that if the points happen to go up on the y axis as the value of X got larger then we

9
00:00:45.410 --> 00:00:47.400
could see maybe there's some correlation there.

10
00:00:47.490 --> 00:00:49.420
Who would say that's positive correlation.

11
00:00:49.460 --> 00:00:53.780
If as one variable goes up the other variable also tends to increase.

12
00:00:53.780 --> 00:00:57.920
So we're going to do now is play around a little more scatter plots with plots.

13
00:00:58.070 --> 00:01:00.410
So let's jump to our text editor and get started.

14
00:01:00.650 --> 00:01:06.940
OK so here we have my PI script I kept the name basic that PI here an important number pi as well as

15
00:01:06.950 --> 00:01:10.570
plotted the off line and plotted thought graph objects as go.

16
00:01:10.850 --> 00:01:14.100
We're going to do first is actually create some random data.

17
00:01:14.190 --> 00:01:16.430
Now to make sure your random data is the same as mine.

18
00:01:16.550 --> 00:01:24.440
Well we're going to do is say P random seat and then we're going to set the seed to 42.

19
00:01:24.590 --> 00:01:29.570
This actual number choice is arbitrary as long as your number matches up and you're consistent with

20
00:01:29.570 --> 00:01:29.910
it.

21
00:01:30.020 --> 00:01:32.220
You'll generate the same random data each time.

22
00:01:32.240 --> 00:01:36.260
So to make sure that your random data is the same as mine we'll go ahead and provide the seed value

23
00:01:36.320 --> 00:01:37.580
of 42.

24
00:01:37.580 --> 00:01:41.940
Again no real reason for the number 42 besides just a reference to Hitchhiker's Guide.

25
00:01:41.960 --> 00:01:46.060
If you're familiar with that but the actual number itself has no real meaning.

26
00:01:46.100 --> 00:01:47.890
It just needs to be consistent.

27
00:01:48.200 --> 00:01:57.500
We're going to do say a random x and we'll say that's equal to any random Rand I.A..

28
00:01:57.520 --> 00:02:03.720
So remember that's random integer and we'll say from 1 to 101.

29
00:02:03.790 --> 00:02:06.470
Give me 100 random integers.

30
00:02:07.170 --> 00:02:11.970
And then we'll create a variable called random Y which is going to be basically the exact same thing

31
00:02:12.200 --> 00:02:20.970
we'll say random Rand Diante from one up to but not including 101 given 100 random integers.

32
00:02:20.970 --> 00:02:21.220
OK.

33
00:02:21.270 --> 00:02:24.870
So that's going to going to go ahead and be our data.

34
00:02:24.870 --> 00:02:30.930
Now all you want to do is plot our data and plot tends to follow a particular syntax where they end

35
00:02:30.930 --> 00:02:33.590
up sticking the plot inside of a variable called data.

36
00:02:33.750 --> 00:02:37.320
And then they pass that data variable into a plot call.

37
00:02:37.590 --> 00:02:43.170
So keep in mind the syntax is a little strange at first because it has to do some nesting of a plot

38
00:02:43.290 --> 00:02:44.240
inside of a list.

39
00:02:44.250 --> 00:02:46.740
And then you put that inside of another plot call.

40
00:02:46.920 --> 00:02:52.660
So just be patient with this and eventually you kind of catch on to plotless syntax.

41
00:02:52.680 --> 00:02:58.140
So going to say data and we're going to start off with an empty list and inside of this list we're going

42
00:02:58.140 --> 00:03:04.380
to go dots and then we're going to call scatter off this so you can see right now off of go off of these

43
00:03:04.380 --> 00:03:05.450
graph objects.

44
00:03:05.550 --> 00:03:12.660
I can see lots of different options of the different graphs that can do such as line scatter.

45
00:03:12.750 --> 00:03:16.990
Eventually you'll see a box or bar and right now we're just going to call scatter.

46
00:03:16.990 --> 00:03:22.560
So the main idea being the off of this go object you'll be calling specific plot types and then each

47
00:03:22.560 --> 00:03:26.520
of these is going to take in particular arguments into this function call.

48
00:03:26.580 --> 00:03:36.240
So we'll say x is equal to that random x array for scatter the scatter also needs a Y value.

49
00:03:36.240 --> 00:03:41.610
So I'll say that's equal to random Y and then we're also going to define.

50
00:03:41.610 --> 00:03:48.680
Here is a mode and we'll say that the mode is equal to markers and we'll see why we do that.

51
00:03:49.080 --> 00:03:49.790
Later on.

52
00:03:49.920 --> 00:03:54.280
But basically that allows us to specify that want little marker points for us scatterplot.

53
00:03:54.630 --> 00:03:55.070
OK.

54
00:03:55.290 --> 00:03:57.880
So that's all we need for our data.

55
00:03:58.290 --> 00:04:05.280
And then we're going to do now is called p y o plot and then we pass in our data and with something

56
00:04:05.280 --> 00:04:11.850
else we could do is if you don't want the file name that is automatic This temp Dasch plot.

57
00:04:12.000 --> 00:04:16.640
HVM L Well you could do is say file name as an argument here.

58
00:04:16.710 --> 00:04:18.060
By default it's temp.

59
00:04:18.090 --> 00:04:20.120
Plot that h tim l the recall.

60
00:04:20.130 --> 00:04:23.820
This is going to overwrite any other HTL files with the same name.

61
00:04:23.850 --> 00:04:28.020
So what you could do is maybe call this something like scatter the HTL.

62
00:04:28.050 --> 00:04:29.450
So I'm going to save that.

63
00:04:29.520 --> 00:04:33.060
Let's go ahead and run this and then explore in our browser.

64
00:04:33.060 --> 00:04:37.290
Again this should automatically open up in your browser but maybe if you have a firewall or something

65
00:04:37.430 --> 00:04:40.910
you will go ahead and just double click on that scatter HTL yourself.

66
00:04:41.030 --> 00:04:44.000
So bring over this scatter e-mail here.

67
00:04:44.160 --> 00:04:47.780
I can see that as I begin to hover over these points.

68
00:04:47.970 --> 00:04:54.390
I can see the actual point 62 here and I can see the value that corresponds to its x axis and then it

69
00:04:54.390 --> 00:04:55.620
can zoom in.

70
00:04:55.620 --> 00:05:00.970
And here we have a very basic scatterplot and the points are actually pretty small as you can see here.

71
00:05:01.110 --> 00:05:02.840
So we'll deal with that later on.

72
00:05:02.880 --> 00:05:05.240
But that's a very basic scatterplot.

73
00:05:05.280 --> 00:05:11.280
Now we're going to do is if we notice that scatterplot didn't actually have any labels on the x axis

74
00:05:11.340 --> 00:05:12.730
or the y axis.

75
00:05:12.780 --> 00:05:20.800
So let's see how we can add in label such as a Title X axis and a Y axis and also a hover mode.

76
00:05:20.910 --> 00:05:25.530
And the government is going to define what information is actually shown to the user when they hover

77
00:05:25.530 --> 00:05:27.240
over a particular point.

78
00:05:27.240 --> 00:05:33.050
So we're going to make a little more room here and we have our data.

79
00:05:33.290 --> 00:05:37.080
We're also going to do now is define what's known as a lay out.

80
00:05:37.220 --> 00:05:42.950
So as you may have guessed data is going to be referencing the actual data.

81
00:05:42.950 --> 00:05:49.050
In this case the actual plot that's being passed and the plot command and then we have a layout variable

82
00:05:49.940 --> 00:05:54.710
and that's going to be equal to go Dot lay out.

83
00:05:54.710 --> 00:05:59.420
And this is where we're going to define things such as what the title is going to be what the access

84
00:05:59.420 --> 00:06:03.640
titles are going to be and what's going to happen when you hover over a point.

85
00:06:03.650 --> 00:06:07.770
Keep in mind that here the syntax again it's going to be a little strange at first.

86
00:06:07.820 --> 00:06:12.580
So you just can't you're going to have to be patient with it as you begin to learn the syntax of Partly.

87
00:06:12.740 --> 00:06:17.340
So first off in our layout we're going to pass on a title and this is whatever you want.

88
00:06:17.330 --> 00:06:25.150
The title on top of the plot to be so you can see here it's Heidel hello first plot.

89
00:06:25.220 --> 00:06:30.390
So that's one thing we're going to pass in there we're also going to pasan let's say a parameter for

90
00:06:30.480 --> 00:06:35.130
x axis and this is what you want the x axis to be called.

91
00:06:35.130 --> 00:06:40.230
Now it's a little strange or funny here is that you pass this in as a dictionary.

92
00:06:40.320 --> 00:06:48.560
So we're going to pass and here is title and then whatever you want the title of the x axis to be.

93
00:06:48.580 --> 00:06:52.870
So my x axis.

94
00:06:53.050 --> 00:06:58.510
Now you'll notice that I-PASS in a dictionary like this with the curly braces and then a key and a value

95
00:06:58.510 --> 00:07:04.840
pair something you see happen a lot in the plot the documentation is they tend to really like passing

96
00:07:04.840 --> 00:07:08.920
in dictionaries with the actual DCT function call.

97
00:07:08.980 --> 00:07:12.870
So I'm going to show you what that would look like for the y axis.

98
00:07:12.960 --> 00:07:14.360
So we're going to see a y axis.

99
00:07:14.400 --> 00:07:17.580
It follows the same sort of syntax you pass in a dictionary here.

100
00:07:17.790 --> 00:07:22.740
But what the platies documentation really likes to do is instead of passing in a dictionary of curly

101
00:07:22.740 --> 00:07:31.550
braces what they like to do is passen dct and then when you call dct and you want key value pairs you

102
00:07:31.550 --> 00:07:37.540
actually create the parameter for the key and then set equal to the parameter for the value.

103
00:07:37.550 --> 00:07:41.210
So my a y axis.

104
00:07:41.360 --> 00:07:46.570
So keep in mind that both of these approaches as far as passing in a dictionary are totally OK.

105
00:07:46.730 --> 00:07:51.620
What I don't want you to get confused by is when you go visit the documentation you'll notice that plotless

106
00:07:51.620 --> 00:07:58.280
documentation in general likes to make a lot of these sort of dictionary calls instead of constructing

107
00:07:58.340 --> 00:08:00.070
a dictionary with curly braces.

108
00:08:00.260 --> 00:08:05.230
And I believe the reason for that is because it's just it's a little clear when you see the equal signs

109
00:08:05.240 --> 00:08:10.030
you can see hate titles equal to this instead of maybe the key value pair again.

110
00:08:10.130 --> 00:08:14.480
This is where your personal preference is going to come into play as far as what sort of approach you

111
00:08:14.480 --> 00:08:19.760
like for constructing your dictionaries whether you like the curly braces approach or the actually calling

112
00:08:19.760 --> 00:08:21.260
the dictionary function.

113
00:08:21.260 --> 00:08:26.930
Again it's up to you which of these you like and then finally in our last hour or a fourth argument

114
00:08:26.990 --> 00:08:34.820
is going to be hover mode and we're going to hover mode equal to the string closest.

115
00:08:34.880 --> 00:08:39.470
So what this is going to do it's going to allow us to handle multiple points landing on the same vertical

116
00:08:40.040 --> 00:08:42.400
and just like we passed in data here.

117
00:08:42.410 --> 00:08:49.870
What we're going to do now is instead of passing and data will pass in Fig and we're going to the fine

118
00:08:49.870 --> 00:08:54.160
fig as go figure.

119
00:08:55.010 --> 00:09:01.070
And then you're going to pass in data equal to data and lay out equal to LEO.

120
00:09:01.450 --> 00:09:02.860
So we're going to save this.

121
00:09:02.860 --> 00:09:06.040
And before we actually run it let's quickly review everything we just did.

122
00:09:06.040 --> 00:09:07.840
I know we just threw a lot at you.

123
00:09:07.840 --> 00:09:13.930
So what we've done so far is created a data variable and a layout variable the data variable.

124
00:09:13.960 --> 00:09:19.840
It's a list that's going to contain the actual plot from that go plot type call.

125
00:09:20.050 --> 00:09:23.650
And each particular plot type call is going to have different parameters.

126
00:09:23.710 --> 00:09:27.960
A lot of them are going to have X equals y equals and then some sort of emote argument.

127
00:09:28.210 --> 00:09:33.670
But here we can see scatter we're setting what the X data is what the White data is and what mode it's

128
00:09:33.670 --> 00:09:34.020
in.

129
00:09:34.030 --> 00:09:40.330
And in just a little bit we're also going to explore how to edit the marker size and colors but that's

130
00:09:40.390 --> 00:09:41.650
our data variable.

131
00:09:41.740 --> 00:09:44.020
Someone keep in mind it's a list.

132
00:09:44.020 --> 00:09:48.980
When I was first learning Clottey always forget to set it as a list and then end up getting some error.

133
00:09:49.000 --> 00:09:53.890
So keep that in mind as you're working with plot Lee and then we create this layout variable and the

134
00:09:53.890 --> 00:09:55.020
layout variable.

135
00:09:55.020 --> 00:09:56.690
Notice this one's not a list.

136
00:09:56.710 --> 00:09:58.500
Which is a little confusing at first.

137
00:09:59.220 --> 00:10:07.120
The Here we called Go the layout and then we pass an A title an x axis a y axis and a hover mode.

138
00:10:07.120 --> 00:10:10.050
Keep in mind this x axis and y axis.

139
00:10:10.150 --> 00:10:15.910
Since they can take in multiple arguments beyond just title if you want to actually pass something in

140
00:10:16.040 --> 00:10:21.760
the past and as a dictionary so you can either do that with a dictionary that looks like this of curly

141
00:10:21.760 --> 00:10:25.070
braces or with the function call.

142
00:10:25.270 --> 00:10:30.580
And when we're actually going to be editing the marker color and size I think you'll begin to notice

143
00:10:30.640 --> 00:10:37.030
why people when they're were a partly really like this use of the function call instead of the curly

144
00:10:37.030 --> 00:10:37.850
braces.

145
00:10:37.930 --> 00:10:40.540
But right now let's make sure we saved this.

146
00:10:40.540 --> 00:10:44.310
We've passed data and layout into a Go figure object.

147
00:10:44.320 --> 00:10:47.240
And then we can pass that figure object into a plot call.

148
00:10:48.190 --> 00:10:55.970
And now I'm going to call Python basic the PI here or whatever you happen to call that Python scripts.

149
00:10:56.030 --> 00:11:00.990
And now if I bring in my browser you'll notice I have the title.

150
00:11:00.990 --> 00:11:02.050
Hello first plot.

151
00:11:02.280 --> 00:11:10.350
And I have the my a y axis and my x axis so that layout command has allowed us to edit the x axis and

152
00:11:10.350 --> 00:11:13.920
the y axis titles as well as the title of the plot itself.

153
00:11:13.920 --> 00:11:20.310
Now we saw the issue where these points are pretty small but Suffield is want to hover over them.

154
00:11:20.310 --> 00:11:24.180
I now get to see both coordinates both the x coordinate and the white coordinate.

155
00:11:24.180 --> 00:11:27.950
That's what's happening due to this hover mode closest call.

156
00:11:28.350 --> 00:11:34.500
OK so finally I want to deal with the issue of the points being really small and hard to see.

157
00:11:34.530 --> 00:11:40.230
So to do that we can actually pass and more information into this scatter call and what we're going

158
00:11:40.230 --> 00:11:46.750
to do is as another argument inside of the scatter call it's making some more lines here.

159
00:11:47.700 --> 00:11:59.250
We have our x or y our mode and then what I'm going to add now is a marker our event into this scatter

160
00:11:59.250 --> 00:12:03.480
call and this marker argument can take in a dictionary of key value pairs.

161
00:12:03.690 --> 00:12:06.250
That's going to define what the markers look like.

162
00:12:06.420 --> 00:12:12.750
And this is why partly documentation in general really prefers calling a dictionary like this.

163
00:12:12.810 --> 00:12:17.940
And you can see why right now because we're going to have several parameters to pass in.

164
00:12:17.940 --> 00:12:24.540
And sometimes it just makes more sense as far as seeing the layout of your code to do one parameter

165
00:12:24.540 --> 00:12:25.560
per line.

166
00:12:25.590 --> 00:12:31.020
So it looks quite nice when you do a dictionary call like this so often you'll see that the documentation

167
00:12:31.050 --> 00:12:34.790
is in a call dictionary and that expand it like this.

168
00:12:34.980 --> 00:12:41.550
And then they're going to tab over and start doing the key value pairs will say size is equal to 12

169
00:12:41.550 --> 00:12:47.750
or you know whatever size we want and that you can define a color as well and a color.

170
00:12:47.850 --> 00:12:54.170
It's a G B code and you can also do hex codes here we'll do our job.

171
00:12:54.380 --> 00:12:59.240
And here this just a red green and blue values so I'll say R.G..

172
00:12:59.300 --> 00:13:01.840
And here it is kind of choosing some grand the values.

173
00:13:02.270 --> 00:13:05.440
So I don't know what 5:3.

174
00:13:05.580 --> 00:13:12.750
And then as another parameter we're going to use symbol as a possible dictionary parameter key value

175
00:13:12.750 --> 00:13:13.320
pair.

176
00:13:13.500 --> 00:13:18.960
And here you can pass in a string parameter for various shapes and there's a link in the notes to the

177
00:13:18.960 --> 00:13:20.610
documentation for scatterplot.

178
00:13:20.770 --> 00:13:25.270
You can get an idea of what types of parameters what types of strings can pass and here.

179
00:13:25.290 --> 00:13:27.890
For now I'll pass and Pentagon since I know that's an option.

180
00:13:29.480 --> 00:13:37.060
And then finally what we can do is also say line and line itself takes in a dictionary call.

181
00:13:37.270 --> 00:13:43.000
So what we're going to do here is just say width of two.

182
00:13:43.040 --> 00:13:46.150
So that's the line outside of the marker.

183
00:13:46.210 --> 00:13:48.830
So hopefully now you can see why.

184
00:13:48.880 --> 00:13:54.160
Probably documentation likes doing this sort of dictionary call as far as understanding everything and

185
00:13:54.160 --> 00:13:59.320
being able to read easily what the size of the marker is going to be using a dictionary called like

186
00:13:59.320 --> 00:14:05.350
this instead of a dictionary call like this with the curly braces makes it a little easier to see over

187
00:14:05.380 --> 00:14:06.450
multiple lines.

188
00:14:06.450 --> 00:14:11.710
Again this is technically a personal call if you prefer doing dictionaries of curly braces.

189
00:14:11.890 --> 00:14:12.990
That's totally up to you.

190
00:14:13.000 --> 00:14:16.620
Just keep that in mind when you're exploring the plot the documentation.

191
00:14:16.660 --> 00:14:19.870
They're really going to heavily favor the sort of the call.

192
00:14:20.260 --> 00:14:26.930
OK so let's save this and rerun Python basically up-I enter.

193
00:14:26.980 --> 00:14:31.790
Looks like an invalid syntax summersaults make sure I didn't forget something color R.G..

194
00:14:32.150 --> 00:14:33.430
OK let's double check.

195
00:14:33.430 --> 00:14:36.490
This looks like a for a comma right after size.

196
00:14:36.490 --> 00:14:38.710
So let's save that and it's quick now.

197
00:14:38.740 --> 00:14:43.690
If you ever get some sort of typo like that here and you still can't figure it out go ahead and make

198
00:14:43.690 --> 00:14:45.580
sure you read our notes directly.

199
00:14:45.580 --> 00:14:50.890
All the notes provided for you don't have any typos in them so let's try this again.

200
00:14:50.930 --> 00:14:54.200
I on base that PI enter an.

201
00:14:54.220 --> 00:14:54.820
Boom.

202
00:14:54.820 --> 00:15:00.280
Now I'm going to bring over my scatter HTL and I can see there are little Pentagons and they're the

203
00:15:00.280 --> 00:15:01.900
color green or whatever.

204
00:15:01.900 --> 00:15:07.660
RG by color you chose and then they also have a line around them and that line with can be edited to

205
00:15:07.660 --> 00:15:15.280
be really thick or really thin and you can also do things like edit that lines color and more features

206
00:15:15.280 --> 00:15:18.320
of that line so you can check of that documentation for scatter.

207
00:15:18.340 --> 00:15:22.570
It's linked to you in the notes and you can check that out as far as the various parameters you can

208
00:15:22.570 --> 00:15:23.020
do here.

209
00:15:23.050 --> 00:15:29.950
But hopefully now I have an idea of how to create a scatterplot with politely and we introduce new ideas

210
00:15:29.950 --> 00:15:33.060
here of data and layout so keep that in mind as well.

211
00:15:33.250 --> 00:15:37.410
As we learn about more and more plots the syntax of setting up your data and setting up your layout

212
00:15:37.570 --> 00:15:41.020
it's going to feel more and more familiar as you go on.

213
00:15:41.050 --> 00:15:47.160
So let's do a really quick review of everything we just learned so far and to bring over our notes again.

214
00:15:48.140 --> 00:15:52.980
So we did so far is we created some random data that shouldn't have been new to you.

215
00:15:53.030 --> 00:16:00.350
But what we did do that was new is we set up our data object as well as our layer object and our data

216
00:16:00.380 --> 00:16:05.640
object is where inside of a list we're going to pass in our particular pluck call.

217
00:16:05.780 --> 00:16:10.790
And then inside that plot call we can pass in parameters such as what x value should be what why value

218
00:16:10.820 --> 00:16:15.400
should be what mode to choose and the different string values that are possible for most here.

219
00:16:15.410 --> 00:16:19.750
You can check out in the scatter documentation and then you can dive even deeper into a lot of these

220
00:16:19.760 --> 00:16:20.400
plot calls.

221
00:16:20.400 --> 00:16:25.400
But Pesi in dictionaries for other parameters such as defining what the markers actually going to look

222
00:16:25.400 --> 00:16:25.790
like.

223
00:16:26.010 --> 00:16:30.830
And as you get deeper and deeper into this it can become tricky to read which is why the poly documentation

224
00:16:30.830 --> 00:16:34.590
prefers passing in dictionaries with this sort of the icy Torcall.

225
00:16:34.880 --> 00:16:35.490
OK.

226
00:16:35.750 --> 00:16:41.780
So after we've done our data parameter for scroll down we went ahead and to find a layout and layout

227
00:16:41.830 --> 00:16:44.860
it's going to refer things as far as the layout of the plot.

228
00:16:44.870 --> 00:16:49.850
Things like your title where X X is going to be called what font your y axis should have.

229
00:16:49.850 --> 00:16:50.960
Things of that nature.

230
00:16:51.230 --> 00:16:57.020
And because things like x axis and y axis can have even further customization of parameters like the

231
00:16:57.020 --> 00:17:00.080
color or the font or what it's actually going to say.

232
00:17:00.140 --> 00:17:02.570
That's why we passen dictionaries like this.

233
00:17:02.570 --> 00:17:08.660
And like I mention if you're going to try and edit the color or title and the font all at once of this

234
00:17:08.660 --> 00:17:15.140
y axis what it actually is saying then it might make more sense to use the t call as far as readability

235
00:17:15.140 --> 00:17:16.730
is concerned.

236
00:17:16.910 --> 00:17:20.920
Then we took our data and our layout may pass them into this go figure.

237
00:17:21.050 --> 00:17:27.280
And then we pass them that figure into the plot and we read ahead and then we have scatter H.M..

238
00:17:27.650 --> 00:17:28.160
OK.

239
00:17:28.370 --> 00:17:30.310
I know that's definitely a lot to take in.

240
00:17:30.320 --> 00:17:36.260
So if it seems like we've done a huge jump in difficulty Don't fret don't worry we're going to do now

241
00:17:36.350 --> 00:17:41.120
is continue on learning about other different plot types and we're going to keep reinforcing these ideas

242
00:17:41.510 --> 00:17:44.370
of setting up your data and setting up your layout.

243
00:17:44.540 --> 00:17:49.670
So I know this kind of a big jump in difficulty but we're going to keep reinforcing these ideas as we

244
00:17:49.670 --> 00:17:54.620
learn about the different plot types what you should be concerned with right now is just having an understanding

245
00:17:54.740 --> 00:17:56.960
of OK I set up my data.

246
00:17:56.960 --> 00:17:58.210
I set up my layout.

247
00:17:58.310 --> 00:17:59.890
I passed into a figure object.

248
00:17:59.930 --> 00:18:01.640
And then I plot that for your object.

249
00:18:01.640 --> 00:18:04.960
If you're comfortable with that so far then you're good to continue on.

250
00:18:05.240 --> 00:18:06.830
OK I'll see at the next lecture.

