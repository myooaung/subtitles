1
00:00:05,340 --> 00:00:07,490
Welcome back everyone in this lecture.

2
00:00:07,500 --> 00:00:10,690
We're going to go over the solution for the line chart exercise.

3
00:00:10,710 --> 00:00:12,710
Let's open up the file and get started.

4
00:00:12,720 --> 00:00:14,760
OK so here we are at the exercise file.

5
00:00:14,790 --> 00:00:18,060
The first thing I want to do is start off with our imports.

6
00:00:18,060 --> 00:00:23,440
So for this we're going to need to import plotline the off line as I go.

7
00:00:23,610 --> 00:00:31,500
We're also going to need to import plot the graph objects not grid objects craft objects as go and since

8
00:00:31,530 --> 00:00:35,750
we're going to be using pandas we'll import pandas as PD then.

9
00:00:35,820 --> 00:00:39,840
Coming up next what we need to do is create that pandas data frame which has actually already been done

10
00:00:39,840 --> 00:00:45,850
for us as well as that list of days now that we have that we're going to create this for a loop.

11
00:00:45,900 --> 00:00:52,590
So here we're going to do is for every day in this day's list we wanted to create a scatterplot set

12
00:00:52,590 --> 00:00:55,580
that has a trace and then append that to our data.

13
00:00:55,590 --> 00:00:56,930
So this is one way we can do it.

14
00:00:56,970 --> 00:00:59,880
You can also do this through a list comprehension.

15
00:00:59,880 --> 00:01:05,190
But let's start off with a simpler for loop since there is no real advantage for list comprehensions.

16
00:01:05,190 --> 00:01:10,680
Besides making your code a little shorter so it's always a tradeoff between readability and how long

17
00:01:10,680 --> 00:01:14,580
your code is as far as performance that's going to be the exact same.

18
00:01:14,580 --> 00:01:17,150
So let's start off with a for loop with scatter.

19
00:01:17,280 --> 00:01:23,670
First we know we're going to the X-axis as well as a Y axis and then we can right off the bat set mode

20
00:01:24,240 --> 00:01:26,180
equal to lines.

21
00:01:26,790 --> 00:01:29,900
And then what I'm also going to do is set name equal today.

22
00:01:30,150 --> 00:01:35,640
So what that does is when I actually create this scatter which is essentially going to be a line chart

23
00:01:36,060 --> 00:01:41,430
then I will set the name of that particular trace equal to the day in that list so start off with Tuesday

24
00:01:41,750 --> 00:01:43,470
that will go on Wednesday and Thursday.

25
00:01:43,490 --> 00:01:45,820
So that's how we can easily set up our legend there.

26
00:01:45,870 --> 00:01:50,670
So we have mode and we have a name now which is the tricky part figuring out what goes x and figuring

27
00:01:50,670 --> 00:01:56,700
out what goes y and if you take a look at the data frame file you can remember that in the X-axis what

28
00:01:56,700 --> 00:02:00,000
we want is the actual time.

29
00:02:00,030 --> 00:02:05,100
So that means if you take a look at the data frame that's going to be Eliz t underscore time.

30
00:02:05,100 --> 00:02:10,130
So that's our x axis and then now we just need to figure out what the y axis is going to be.

31
00:02:10,290 --> 00:02:12,420
And this one is a little trickier.

32
00:02:12,420 --> 00:02:15,660
So the y axis I'm just putting this on a couple lines here.

33
00:02:15,660 --> 00:02:23,350
That's going to be equal to the if we take a look at it C underscore our underscore Avijit from the

34
00:02:23,350 --> 00:02:24,570
data frame.

35
00:02:24,570 --> 00:02:30,840
Now the issue with just passing in the F temperature Our average is that we're not filtering based off

36
00:02:30,840 --> 00:02:32,720
the day inside of this list.

37
00:02:32,730 --> 00:02:34,010
So this is the tricky part.

38
00:02:34,140 --> 00:02:39,570
We only wanted to grab this information for the particular day of Tuesday Wednesday Thursday or Friday

39
00:02:39,600 --> 00:02:44,300
and so on throughout the loop which means we need to do the following.

40
00:02:44,370 --> 00:02:57,760
We'll say Where the f of the Day column is equal to day and then off of that will grab that hourly temperature

41
00:02:57,760 --> 00:02:58,700
average.

42
00:02:58,750 --> 00:03:00,370
So let's break this down a little further.

43
00:03:00,370 --> 00:03:06,760
Remember they're in this for loop we're saying four day in days and then all we're saying here is why

44
00:03:06,910 --> 00:03:10,950
is going to be equal to the data frame for only that particular day.

45
00:03:10,960 --> 00:03:14,020
So we're seeing where DFA happens to be that day.

46
00:03:14,020 --> 00:03:17,340
So then we're only dealing with Monday only the end of Tuesday and so on.

47
00:03:17,500 --> 00:03:21,130
And then with that data frame go ahead and grab that temperature average.

48
00:03:21,130 --> 00:03:24,100
So this was probably the trickiest line out of everything.

49
00:03:24,310 --> 00:03:29,270
And then once you created that scatterplot you can go ahead and append it to this trace or appended

50
00:03:29,290 --> 00:03:30,600
to the data list.

51
00:03:30,610 --> 00:03:36,460
Speaking of trace then we can set up our layout and here it's really up to you how far into detail you

52
00:03:36,460 --> 00:03:37,440
want to go.

53
00:03:37,620 --> 00:03:38,910
The can set up or lay out.

54
00:03:38,950 --> 00:03:47,570
Say something like title is equal to daily temp averages and then we can also specify things like a

55
00:03:47,570 --> 00:03:50,170
hover mode or x axis title and so on.

56
00:03:50,420 --> 00:03:54,930
But let's keep it a title for now and then we create our figure from the data and Leo.

57
00:03:55,070 --> 00:03:57,150
So again that one is pretty straightforward.

58
00:03:57,200 --> 00:03:58,620
We'll say fig is equal to.

59
00:03:58,640 --> 00:04:10,500
Go figure pasand data is equal to data and lay out Ezekial to lay out then I will say who I know and

60
00:04:10,500 --> 00:04:15,220
we'll figure and you can always set a file name there as well.

61
00:04:15,450 --> 00:04:19,800
So let's run this and make sure it worked well say Python based pi or whatever you happen to call your

62
00:04:20,110 --> 00:04:21,780
PI file.

63
00:04:21,910 --> 00:04:24,380
It looks like I have a quick point loops.

64
00:04:24,400 --> 00:04:25,690
Let me fix that.

65
00:04:25,710 --> 00:04:30,440
This should just be for me since I'm located at the same folder location should just be data.

66
00:04:30,640 --> 00:04:33,720
So I'll run that again and then I got my answer.

67
00:04:33,730 --> 00:04:35,780
So it looks like this for me.

68
00:04:35,860 --> 00:04:37,980
And it should look something very similar to you.

69
00:04:38,230 --> 00:04:41,250
So as you go along here you can see the various days.

70
00:04:41,680 --> 00:04:41,910
All right.

71
00:04:41,920 --> 00:04:43,750
So that's how you can do that with a for loop.

72
00:04:43,750 --> 00:04:50,230
There's also an advanced solution basically solution B and that allows you to actually create this for

73
00:04:50,230 --> 00:04:52,830
loop in a single list comprehension.

74
00:04:52,870 --> 00:04:57,340
So I'm going to copy and paste that code here just so you can get a look at it.

75
00:04:57,370 --> 00:05:02,140
It deals more pandas and with plotless which is why we're not really going to focus it too much but

76
00:05:02,230 --> 00:05:05,290
let's go in and show you what that could look like and where to paste in here.

77
00:05:05,590 --> 00:05:11,590
So this couple of lines of code is actually going to give you the exact same result that we just saw.

78
00:05:11,590 --> 00:05:14,870
So recall walrus talking about partly basics.

79
00:05:14,890 --> 00:05:18,900
You could just pass in a dictionary for light charts since it defaults to a line chart.

80
00:05:18,940 --> 00:05:22,040
So we covered that in the partly basic lecture.

81
00:05:22,060 --> 00:05:28,570
Alternatively you could just call go that scatter here but this is not even going to use this list and

82
00:05:28,570 --> 00:05:35,350
said what it does is it sets X equal to that last time so it's y equal to the same filtering.

83
00:05:35,650 --> 00:05:41,150
And then you'll notice here it says for day n and then it grabs the unique list.

84
00:05:41,200 --> 00:05:44,950
So this day's right here this list of Tuesday Wednesday Thursday.

85
00:05:45,100 --> 00:05:51,340
That's actually the exact same thing as saying DFI they give me back all the unique days in that particular

86
00:05:51,340 --> 00:05:52,190
column.

87
00:05:52,210 --> 00:05:57,520
So that's a way to do this essentially all in one line with a list comprehension.

88
00:05:57,520 --> 00:06:01,990
Now whether or not this is more readable is really up to you personally if you're just starting off

89
00:06:01,990 --> 00:06:04,940
a partly to recommend going the for loop route.

90
00:06:05,080 --> 00:06:08,710
But later on it will start start to switch our convention to list comprehensions.

91
00:06:08,710 --> 00:06:11,850
Since it's a little smoother than the four loops.

92
00:06:11,890 --> 00:06:12,420
OK.

93
00:06:12,760 --> 00:06:14,640
That's really all there was to this exercise.

94
00:06:14,680 --> 00:06:19,300
If you have any questions feel free to post the Q&amp;A forums and I will see you at the next lecture.

