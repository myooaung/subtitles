WEBVTT
ï»¿1
00:00:05.370 --> 00:00:11.370
Welcome to three of the Milestone project we're not going to add two main components for a dashboard.

2
00:00:11.370 --> 00:00:16.810
One is the date time picker so we can choose the range of dates to actually grab stock information from.

3
00:00:16.980 --> 00:00:21.390
And we're also going to add Panther's data reader to actually connect to the Internet and then grab

4
00:00:21.390 --> 00:00:22.060
data.

5
00:00:22.140 --> 00:00:25.070
There's a few caveats I want to point out about Panas data reader.

6
00:00:25.080 --> 00:00:27.100
One is to make sure you've already installed it.

7
00:00:27.210 --> 00:00:28.480
If you haven't already.

8
00:00:28.530 --> 00:00:33.120
So it should have been included in our requirements that text file that we talk about during the installation

9
00:00:33.150 --> 00:00:34.170
and setup lecture.

10
00:00:34.260 --> 00:00:38.610
Then in case you haven't you can simply do a Pipp install of Panda's data reader and it should work.

11
00:00:38.610 --> 00:00:43.110
We also have a link in the Guidebook for their official documentation on their installation process.

12
00:00:43.110 --> 00:00:47.880
The other thing I want to mention is since this data reader is a library that reaches out to the Internet

13
00:00:47.940 --> 00:00:52.160
and grabs stock information sometimes those AP guys are changing.

14
00:00:52.350 --> 00:00:56.240
So we're going to be using the string code itx during this lecture.

15
00:00:56.460 --> 00:01:01.130
As of this filming that still works but in the future it may change to another string code.

16
00:01:01.320 --> 00:01:06.600
For example previously Google and Yahoo shared their API for historical stock information but then those

17
00:01:06.600 --> 00:01:07.220
got broken.

18
00:01:07.230 --> 00:01:09.550
So that's where we're using IPX in the future.

19
00:01:09.590 --> 00:01:14.400
I-X may no longer work and you'll have to check the link in the documentation to get the latest string

20
00:01:14.400 --> 00:01:17.110
code for whatever API is currently working.

21
00:01:17.120 --> 00:01:18.830
Another option is Morningstar.

22
00:01:19.020 --> 00:01:23.000
But for right now we'll use IPX because it's short and curly works.

23
00:01:23.040 --> 00:01:27.150
So I just want you to be highly aware of that in case your code doesn't work or you get an issue of

24
00:01:27.150 --> 00:01:28.110
reading that data.

25
00:01:28.110 --> 00:01:31.100
Please check out the links to the official documentation in the guidebook.

26
00:01:31.320 --> 00:01:35.940
Lastly I want to know that since we are reaching out to the Internet if you have a firewall that blocks

27
00:01:36.030 --> 00:01:40.410
your program from reaching out to the Internet and grabbing information and this is really common in

28
00:01:40.590 --> 00:01:46.230
your workplace environment your code may not work until you actually run as an administrator.

29
00:01:46.230 --> 00:01:47.760
The network capabilities.

30
00:01:47.790 --> 00:01:49.370
So please keep that in mind.

31
00:01:49.440 --> 00:01:51.140
All right with all those caveats not being said.

32
00:01:51.330 --> 00:01:53.540
Let's head back to our Paice script.

33
00:01:53.540 --> 00:01:57.840
All right back at our PostScript we're going to do here is add a couple of more imports.

34
00:01:57.840 --> 00:02:02.960
We're going import panderers data reader data as well.

35
00:02:03.000 --> 00:02:08.820
Again you have to make sure you've installed pinless data reader and also save from date time import

36
00:02:08.910 --> 00:02:14.680
date time so have those imports an all the way down.

37
00:02:14.710 --> 00:02:20.840
Back backing up that graph we're going to do is we're going to define the actual data by a data frame

38
00:02:20.850 --> 00:02:22.890
so we're going to be editing this data right here.

39
00:02:23.020 --> 00:02:24.880
But first we want to grab the data.

40
00:02:25.150 --> 00:02:32.050
So we're going to do is the following will say that the start date is equal to date time and then we

41
00:02:32.050 --> 00:02:34.150
pasan a year a month and a day.

42
00:02:34.150 --> 00:02:42.040
So let's say January 2017 as our start and we'll set the end date to the end of that year.

43
00:02:42.220 --> 00:02:51.940
So the end they will be a date time objects 2017 12 31 and then what we're going to do is say DMF is

44
00:02:51.940 --> 00:02:57.390
equal to web dot and there is will recall a data reader object.

45
00:02:57.460 --> 00:03:06.990
We're going to pass in the stock ticker so say stock underscore ticker Superstock stock tickers what's

46
00:03:06.990 --> 00:03:14.340
being passed in from the input value and then it will say use the code i.e. X. That's the actual API

47
00:03:14.340 --> 00:03:20.020
code that's being used and then we'll go from start to end.

48
00:03:20.130 --> 00:03:24.120
And as I previously mentioned this code is what you have to be aware of in the future.

49
00:03:24.120 --> 00:03:28.860
This may change so you want to check the link to the official documentation as far as which API codes

50
00:03:28.890 --> 00:03:34.110
are still functioning but once you have that data frame it's essentially a data frame with all the information

51
00:03:34.710 --> 00:03:36.730
of the actual historical stock price.

52
00:03:36.750 --> 00:03:43.230
So for X we're going to do is pass in the index which is the dates and for why we're going to pass in

53
00:03:43.230 --> 00:03:46.290
the closing price say DSF close.

54
00:03:46.300 --> 00:03:49.950
And in fact we can just pass this in as a string for that column.

55
00:03:49.950 --> 00:03:52.160
So the f close.

56
00:03:52.220 --> 00:03:52.570
OK.

57
00:03:52.590 --> 00:03:53.560
Let's save that.

58
00:03:53.640 --> 00:04:01.980
Let's just check to make sure that this runs so same Python basic that PI enter and it looks like it's

59
00:04:01.980 --> 00:04:06.060
running so let's head over toward dashboard and upon going through dashboard you should now see the

60
00:04:06.060 --> 00:04:12.720
historical stock price for Tesla something to keep in mind is if you start updating this input you're

61
00:04:12.720 --> 00:04:17.130
going to start getting errors because if you look back at the script it's not to find a stock ticker

62
00:04:17.130 --> 00:04:20.490
for T S L A and then lowercase D.

63
00:04:20.490 --> 00:04:25.860
And in fact if you do this to something that does exist like Microsoft what's going to happen is they'll

64
00:04:25.860 --> 00:04:30.450
finally update but only once it finds a corresponding stock ticker symbol.

65
00:04:30.450 --> 00:04:31.920
So everything else will do Eyres.

66
00:04:31.920 --> 00:04:36.060
So if you do something just like a bunch of random text it'll stay if it's prease information that isn't

67
00:04:36.060 --> 00:04:36.880
giving an error.

68
00:04:37.050 --> 00:04:42.060
But if you do something that makes sense like for instance Apple It will then automatically update to

69
00:04:42.150 --> 00:04:42.870
Apple.

70
00:04:42.900 --> 00:04:46.730
What would be nice is to have it only update once we hit some submit button.

71
00:04:46.800 --> 00:04:49.100
So that's going to evolve using a state.

72
00:04:49.200 --> 00:04:53.940
What's also going to be nice is if we could add a little date picker here to choose a start date and

73
00:04:53.940 --> 00:04:58.220
an end date from the dashboard instead of having to go back to the script to edit that.

74
00:04:58.440 --> 00:05:03.000
But so far we should see is an update to the historical price information.

75
00:05:03.000 --> 00:05:04.890
Let's go ahead and add the date picker now.

76
00:05:05.000 --> 00:05:07.030
And in fact we're going to jump to the next lecture.

77
00:05:07.140 --> 00:05:10.420
An added picker range there because it's a little more involved.

78
00:05:10.470 --> 00:05:12.600
And we want to set it as it's own lecture.

79
00:05:12.660 --> 00:05:13.200
We'll see other.

