WEBVTT
﻿1
00:00:06.130 --> 00:00:13.240
Welcome back in this lecture we're going to be discussing bar charts a barter presents categorical data

2
00:00:13.510 --> 00:00:18.850
with rectangular bars with heights or lengths proportional to the values that they represent.

3
00:00:19.210 --> 00:00:24.580
Let's go ahead and quickly review categorical data versus continuous data in order to understand when

4
00:00:24.580 --> 00:00:27.840
certain plots apply to the data you're trying to visualize.

5
00:00:29.430 --> 00:00:35.520
In general variables and data either represent measurements on some continuous scale or they represent

6
00:00:35.520 --> 00:00:39.140
information about some categorical or discrete characteristics.

7
00:00:39.150 --> 00:00:41.810
So let's see some examples of this.

8
00:00:41.820 --> 00:00:48.990
So for example the weights Heights an age of respondents in a survey would represent continuous variables

9
00:00:49.230 --> 00:00:52.720
because each of those features is on a continuous scale.

10
00:00:52.750 --> 00:00:58.410
However things like a person's gender occupation or marital status those are going to be categorical

11
00:00:58.440 --> 00:01:04.740
or discrete variables because they're categories and they're not really on a continuous scale so that's

12
00:01:04.740 --> 00:01:08.410
continuous versus categorical.

13
00:01:08.550 --> 00:01:12.060
Now using bar charts we can visualize categorical data.

14
00:01:12.060 --> 00:01:17.970
Typically the x axis is the categories and the y axis is the count that is the number of occurrences

15
00:01:18.030 --> 00:01:19.310
in each category.

16
00:01:19.380 --> 00:01:22.650
You should note though that there's lots of different variations on bar charts.

17
00:01:22.680 --> 00:01:26.080
Some of them not so good and some of them pretty OK.

18
00:01:26.130 --> 00:01:30.810
And what I mean by that is sometimes people like to change what the Y-axis actually stands for since

19
00:01:30.810 --> 00:01:35.730
it can't theoretically be any aggregation not just the count of the number and sometimes people like

20
00:01:35.730 --> 00:01:41.670
to show the count the sum or the average and more you should keep in mind that your bar chart should

21
00:01:41.670 --> 00:01:44.670
always make pretty clear what you're actually representing.

22
00:01:44.700 --> 00:01:49.430
As far as the length or height of those bars by default it's almost always count.

23
00:01:49.440 --> 00:01:52.340
But sometimes people like to use some's there.

24
00:01:52.440 --> 00:01:55.600
And if you don't make that clear to the user it could be confusing.

25
00:01:55.620 --> 00:01:59.580
So let's see some examples to kind of drill down on this a bit more.

26
00:01:59.750 --> 00:02:05.150
Here we see a basic bar chart of the 2018 Winter Olympic medals by country.

27
00:02:05.150 --> 00:02:10.080
So what we're showing here is the count of the actual medals one per country.

28
00:02:10.130 --> 00:02:16.030
So I can see here that Norway got the most medals then it was Germany then it was Canada and so on.

29
00:02:16.100 --> 00:02:19.310
And notice here that there's actually spaces in between these bars.

30
00:02:19.400 --> 00:02:23.900
And the reason they're spaces in between them is because each of these bars is going to represent a

31
00:02:23.900 --> 00:02:25.130
different category.

32
00:02:25.130 --> 00:02:27.710
And in this case each category is a different country.

33
00:02:27.710 --> 00:02:31.970
So later on when we learn about histograms we'll see plots that kind of look similar to this except

34
00:02:31.970 --> 00:02:34.530
the x axis is actually going to be continuous.

35
00:02:34.550 --> 00:02:39.790
So for right now keep in mind that these bar charts were didn't have categories on the x axis.

36
00:02:39.810 --> 00:02:44.780
Now when you're dealing with Olympic medals it might be nice to know the Olympic medals won that were

37
00:02:44.810 --> 00:02:47.330
gold versus silver versus bronze.

38
00:02:47.330 --> 00:02:53.390
So what we can do is have a stacked bar chart and a stack the bar chart what it can do is show another

39
00:02:53.390 --> 00:02:57.420
level of category counts for your already existing categories.

40
00:02:57.440 --> 00:03:04.340
So here based on the actual color of the bar Elda know whether we won some bronze medals some silver

41
00:03:04.340 --> 00:03:10.630
medals or some gold medals and here we've actually color coded them as well to match those medals themselves.

42
00:03:10.640 --> 00:03:16.460
So here now we can get a scale of what countries want a lot of bronze medals versus silver medals.

43
00:03:16.460 --> 00:03:22.340
Now the only problem with this sort of stacked bar chart is that within a single bar it can be kind

44
00:03:22.340 --> 00:03:27.040
of hard to compare actual categories of medals for example here.

45
00:03:27.050 --> 00:03:29.930
It's a little hard to tell in regards to Norway.

46
00:03:29.960 --> 00:03:35.570
The very first bar on the left is they have more gold medals or if they have more silver medals so people

47
00:03:35.570 --> 00:03:39.260
sometimes like to do is instead of a stack the bar chart like this.

48
00:03:39.620 --> 00:03:45.050
They do what's known as a nested bar chart where we basically then separate each of those bars and then

49
00:03:45.050 --> 00:03:46.160
stick them together.

50
00:03:46.310 --> 00:03:52.640
Notice how from before our Y-axis went all the way up to 40 and now with a nested bar chart it's down

51
00:03:52.640 --> 00:03:58.700
to 14 because we went ahead and separated the metals further by category and put them next to each other.

52
00:03:58.700 --> 00:04:04.400
What's nice about this is I can clearly tell that Norway got just as many silver medals as they did

53
00:04:04.400 --> 00:04:08.920
gold medals and that Germany and Norway actually got the same number of gold medals.

54
00:04:08.930 --> 00:04:15.170
So with this now I can see the information to compare actual types of medal counts here.

55
00:04:15.200 --> 00:04:20.810
Now it's not so easy to do is answer the question how many medals did Norway get in total here would

56
00:04:20.810 --> 00:04:22.210
have to do a little bit of math.

57
00:04:22.220 --> 00:04:25.050
So it has to see OK 14 plus 14 plus.

58
00:04:25.070 --> 00:04:28.040
It looks like 11 verses in the stacked bar chart.

59
00:04:28.070 --> 00:04:30.490
I can very quickly see the total number.

60
00:04:30.500 --> 00:04:35.180
So again it's a tradeoff here between kind of totals versus Category specifics.

61
00:04:35.180 --> 00:04:38.210
So keep that in mind as you're messing around of bar charts.

62
00:04:38.210 --> 00:04:38.620
OK.

63
00:04:38.810 --> 00:04:42.830
So let's go out and jump to a text editor and actually create some of these bar charts to get a better

64
00:04:42.830 --> 00:04:45.670
understanding of plotless syntax for bar charts.

65
00:04:45.680 --> 00:04:47.130
Let's jump to the text editor now.

66
00:04:47.300 --> 00:04:53.800
OK so here we are at basic pi or whatever your dot PI script is and we're going to import plot the dot

67
00:04:53.900 --> 00:05:01.430
off line as p while and then we'll import plot Lee thought graph objects as go.

68
00:05:01.690 --> 00:05:06.170
And since we're going to be working with real data that went through Olympics data or going to do is

69
00:05:06.170 --> 00:05:12.720
to import pand those as PD and we'll set our data frame DMF equal to PD thought.

70
00:05:12.730 --> 00:05:25.640
Read CXXVI and I'm going to read from my data folder the 2018 Winter Olympics and that's a CSFB file.

71
00:05:25.710 --> 00:05:26.550
So there's my data.

72
00:05:26.550 --> 00:05:30.800
Let's go ahead and print it out just so he can see what it actually looks like when we run this.

73
00:05:30.810 --> 00:05:34.780
Keep in mind that a little zoomed in here so I might need to zoom out in order to see the whole data

74
00:05:34.780 --> 00:05:35.680
set.

75
00:05:35.700 --> 00:05:42.650
So if we kind of expand this just a little bit me zoom out and then rerun this week and see what it

76
00:05:42.770 --> 00:05:43.940
actually looks like.

77
00:05:43.980 --> 00:05:50.850
It's essentially we have a rank column showing the actual rank of who placed the most medals for Norway

78
00:05:51.010 --> 00:05:53.740
is in first place Germany and second Canada third.

79
00:05:53.910 --> 00:05:56.340
Then we have the actual country name.

80
00:05:56.340 --> 00:06:01.980
Norway Germany Canada and then we can see gold silver bronze and the total number of medals.

81
00:06:02.190 --> 00:06:06.090
So now that we have that information and we know what the columns are let's go ahead and use that to

82
00:06:06.090 --> 00:06:08.070
actually plot this out as a bar chart.

83
00:06:08.340 --> 00:06:16.050
So we'll start off with just putting out the totals we'll say creator data list and inside of the list

84
00:06:16.110 --> 00:06:18.390
that's where we passen our go dots.

85
00:06:18.420 --> 00:06:25.110
And since it's a bar chart we call it bar and the bar needs X information and Y information.

86
00:06:25.260 --> 00:06:30.660
So for X we want to do is we going to want to pass in a categorical value and in this case that's going

87
00:06:30.660 --> 00:06:34.230
to be the actual column for the country name.

88
00:06:34.410 --> 00:06:40.680
So say DSF in this case it's an O C which stands for International Olympic Committee.

89
00:06:41.070 --> 00:06:46.020
And then why it's going to be whatever you want to play on the waxes that's a continuous variable.

90
00:06:46.020 --> 00:06:50.190
So in this case we'll go ahead and plot out the Count totals here.

91
00:06:50.190 --> 00:06:54.000
So I'll say why is equal to DMF total.

92
00:06:54.000 --> 00:06:59.910
So there's our data and if we want we can also create a laya object from go that lay out and we'll set

93
00:06:59.910 --> 00:07:09.460
the title equal to something like metal's and let's go and plot this out so we'll create a figure object

94
00:07:10.060 --> 00:07:12.470
thig is equal to go figure.

95
00:07:14.630 --> 00:07:23.580
You're And remember we passen data and Leo and let's say P while that plot will pass and that fig and

96
00:07:23.580 --> 00:07:24.570
plot it up.

97
00:07:24.570 --> 00:07:29.280
So let's run this now Python basic that pi and make sure we don't get any errors.

98
00:07:29.280 --> 00:07:30.770
Looks like the expected.

99
00:07:30.780 --> 00:07:32.170
Most arguments let me.

100
00:07:32.170 --> 00:07:37.800
I think I made the mistake here of not specifying what the data and layout is equal to layout.

101
00:07:37.830 --> 00:07:43.210
So let's say that and try this again and there we go.

102
00:07:43.220 --> 00:07:47.530
So having done that you should be able to bring in your medal count.

103
00:07:47.530 --> 00:07:52.110
So as you hover over these you'll be able to see the total at the top of the actual bars.

104
00:07:52.550 --> 00:07:53.120
OK.

105
00:07:53.120 --> 00:08:00.110
So let's go in and expand on this by not just displaying the totals themselves but also the actual type

106
00:08:00.200 --> 00:08:01.100
of metal.

107
00:08:01.100 --> 00:08:06.880
So for this we're going to need to take the approach of three traces inside our data.

108
00:08:07.070 --> 00:08:12.860
So to do that we're going to do is data equal to a list.

109
00:08:12.860 --> 00:08:16.560
Trace 1 trace 2 and trace 3.

110
00:08:16.640 --> 00:08:20.930
So we're going to have each of these traces correspond to a different bar plot that we'll then put in

111
00:08:21.260 --> 00:08:24.100
then to zoom out a little bit and get myself a little more room to work with.

112
00:08:24.140 --> 00:08:31.630
OK so let's go ahead and create these Trace's will say trace 1 and here we're going to create a Bircher

113
00:08:32.110 --> 00:08:37.080
and the Bartter it's going to take an x value and the x value is still going to be the category of N

114
00:08:37.090 --> 00:08:37.790
O C.

115
00:08:37.960 --> 00:08:44.590
So that's the actual country column but for the y value we'll go ahead to have trace 1 B the gold column.

116
00:08:44.590 --> 00:08:51.830
So the Y will be d f gold and then we can name this whatever we want we'll go ahead and name it gold

117
00:08:51.860 --> 00:08:52.690
since that makes sense.

118
00:08:52.700 --> 00:08:54.730
So the legend will actually display gold there.

119
00:08:55.010 --> 00:09:00.380
And if you want to change the actual color where you can do is as another argument specify a marker

120
00:09:00.950 --> 00:09:08.240
and then pass in a dictionary color and then a string hexadecimal code that corresponds to color.

121
00:09:08.240 --> 00:09:13.280
So if you google color picker you can go ahead and grab a little hex code that looks like the color

122
00:09:13.280 --> 00:09:14.360
gold to you.

123
00:09:14.360 --> 00:09:20.430
So going do hash tag f f d 7 0 0 that's basically the color gold.

124
00:09:20.600 --> 00:09:22.660
And then I'm going to have this on two lines.

125
00:09:22.730 --> 00:09:24.090
So it's a little more readable.

126
00:09:24.550 --> 00:09:24.820
OK.

127
00:09:24.830 --> 00:09:26.950
So that's our bar chart for gold.

128
00:09:27.020 --> 00:09:31.400
And if I were just a plot trace one and remove trace two trees three I would essentially see the same

129
00:09:31.400 --> 00:09:36.350
bar plot as before except the numbers would be reduced because it would only show the gold if I want

130
00:09:36.350 --> 00:09:38.960
to stack on top of this silver and bronze.

131
00:09:38.990 --> 00:09:43.610
What I need to do is set two more traces for each of those.

132
00:09:43.640 --> 00:09:50.710
So we're going to do the same thing here except we'll say trace 2 and trace 3 and we'll change gold.

133
00:09:50.720 --> 00:09:52.620
And the second one to be silver.

134
00:09:53.140 --> 00:10:00.010
Let's also change the name to the silver and then the third one will change the names of the bronze

135
00:10:01.750 --> 00:10:04.060
and we'll also change this one.

136
00:10:04.060 --> 00:10:07.750
So basically it's a gold chain silver is silver and bronze.

137
00:10:07.810 --> 00:10:10.660
And then we just want to add our colors as well.

138
00:10:10.660 --> 00:10:16.550
So here for the silver one a nice hexadecimal code for silver is kind of this grayish color.

139
00:10:16.780 --> 00:10:24.290
So I'll say 9 0 a 1 and for the bronze we'll go ahead and say the color.

140
00:10:24.530 --> 00:10:32.170
See the seven f 32 and you can always just copy and paste these codes from the provided notes.

141
00:10:32.170 --> 00:10:37.360
So now that we have our three Trace's or three bar plots if we plot like this what plotless is going

142
00:10:37.360 --> 00:10:40.410
to do is it's going to do the nested bar chart.

143
00:10:40.510 --> 00:10:44.440
That is it's going to show the gold column right next to the silver column right next to the bronze

144
00:10:44.440 --> 00:10:45.150
column.

145
00:10:45.160 --> 00:10:47.410
So let's go ahead and run this at our command line.

146
00:10:47.410 --> 00:10:51.160
We'll say Python basic that pi enter.

147
00:10:51.250 --> 00:10:55.930
And when you run that you're going to see that nested bar chart that looks something like this.

148
00:10:55.930 --> 00:10:59.770
So here we can see that plot went ahead and put those columns right next to each other.

149
00:10:59.830 --> 00:11:04.570
And as you hover over any particular country it will go ahead and show you that counts for bronze silver

150
00:11:04.600 --> 00:11:06.850
and gold and you can always zoom in.

151
00:11:06.880 --> 00:11:11.020
You can do a box select if you only want to do that or pan zoom.

152
00:11:11.020 --> 00:11:12.170
It's all available to here.

153
00:11:12.160 --> 00:11:14.610
So you can get a better view of certain countries.

154
00:11:14.620 --> 00:11:15.100
All right.

155
00:11:15.220 --> 00:11:20.470
So let's imagine now you wanted the actual stacked bar plot not the nested one where you need to do

156
00:11:20.650 --> 00:11:26.940
is just simply come down here to where it says the actual layout.

157
00:11:26.950 --> 00:11:30.770
So right now we have title metal's what we need to do is inside of Leo.

158
00:11:30.910 --> 00:11:39.140
You provide the code bar mode and set that equal to the string stack.

159
00:11:39.580 --> 00:11:44.830
So again to change from a nested bar plot to the stacked bar plot inside of the last call you need a

160
00:11:44.830 --> 00:11:49.690
called bar mode is equal to stack and that's basically something either have to memorize or go back

161
00:11:49.690 --> 00:11:52.600
to documentation for a reference for.

162
00:11:52.600 --> 00:11:57.830
OK so let's save that and make sure that worked I'll say Python basic but pi.

163
00:11:57.910 --> 00:12:04.170
Enter And now when we call that plot we can see here we actually get the stacked bar plot and all the

164
00:12:04.170 --> 00:12:07.380
same tools apply you can zoom in Pan et cetera.

165
00:12:07.380 --> 00:12:09.180
So let's quickly review what we did here.

166
00:12:09.240 --> 00:12:11.730
We went ahead and read some real data.

167
00:12:11.730 --> 00:12:19.530
We took a look at the data frame and then we set three bar plots here each other a trace put those traces

168
00:12:19.530 --> 00:12:20.780
into a list for the data.

169
00:12:20.970 --> 00:12:26.130
You can specify the layout and then go ahead and plot the data and the layout and then have the figure

170
00:12:27.000 --> 00:12:28.060
that's really all there is to it.

171
00:12:28.120 --> 00:12:30.930
If you have any questions feel free to post the Q&amp;A forms.

172
00:12:30.960 --> 00:12:32.130
We'll see you at the next lecture.

