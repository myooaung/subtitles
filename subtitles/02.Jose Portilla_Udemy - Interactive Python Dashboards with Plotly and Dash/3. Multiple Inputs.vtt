WEBVTT
ï»¿1
00:00:05.250 --> 00:00:06.300
Welcome back.

2
00:00:06.300 --> 00:00:12.190
So we've already seen how we can connect components through the use of the app the callback decorator.

3
00:00:12.210 --> 00:00:15.210
We've also seen how we can define output and input.

4
00:00:15.240 --> 00:00:20.470
Recall that the input went inside of a list and that's because we can have multiple inputs.

5
00:00:20.580 --> 00:00:25.500
What we're going to do in this lecture is show you how you can connect multiple inputs to a single output

6
00:00:25.560 --> 00:00:26.330
in a graph.

7
00:00:26.550 --> 00:00:30.210
Let's go ahead and see what the finished dashboard is going to look like and then we'll get to coding

8
00:00:30.210 --> 00:00:30.770
it out.

9
00:00:30.780 --> 00:00:31.130
All right.

10
00:00:31.140 --> 00:00:34.490
So this is what the finished dashboard is going to look like.

11
00:00:34.560 --> 00:00:40.370
And basically we're using that MPG dataset for the cars that we've used before except we now have two

12
00:00:40.380 --> 00:00:41.250
inputs.

13
00:00:41.250 --> 00:00:46.380
These two dropdown menus and that allows us to affect what goes in the x axis and what goes in the y

14
00:00:46.380 --> 00:00:47.180
axis.

15
00:00:47.190 --> 00:00:52.800
So for example if I want to change the x axis from displacement mpg I just click on the dropdown and

16
00:00:52.810 --> 00:00:54.450
the plot automatically updates.

17
00:00:54.630 --> 00:00:59.060
Or if I want to plot mpg maybe versus wait I can do that as well.

18
00:00:59.100 --> 00:01:04.200
And I can see here that as you decrease the weight the MPG goes up.

19
00:01:04.230 --> 00:01:08.970
So let's go ahead and jump torque coding Ed. and see how we can connect multiple inputs to this single

20
00:01:08.970 --> 00:01:10.260
graph output.

21
00:01:10.260 --> 00:01:13.880
Then later on we'll also discuss multiple outputs in a future lecture.

22
00:01:13.890 --> 00:01:14.720
Let's get started.

23
00:01:15.610 --> 00:01:17.510
All right so here we are at the text editor.

24
00:01:17.550 --> 00:01:24.480
I've already imported dash dash components H.M. components the input and output from dependencies as

25
00:01:24.480 --> 00:01:29.590
well Efes graph objects because we're going to be graphing that scatterplot Anson's reason the MPG data

26
00:01:29.590 --> 00:01:30.120
set.

27
00:01:30.190 --> 00:01:31.540
I've imported pandas.

28
00:01:31.800 --> 00:01:36.360
Then I just called PD that read CACP on the NPG that see every file.

29
00:01:36.420 --> 00:01:39.270
So let's get started with our app location.

30
00:01:39.270 --> 00:01:45.800
So this dash app will create it by saying app is equal to dash dot dash.

31
00:01:47.980 --> 00:01:52.630
And then we're going to create a list of the features that we're going to be working with.

32
00:01:52.630 --> 00:01:57.070
So in this case the features that are going to be available in those dropdown menus that's just going

33
00:01:57.070 --> 00:01:59.950
to be all the columns in the data frame.

34
00:01:59.950 --> 00:02:04.570
So we'll create a list called features and set that equal to DMF columns.

35
00:02:04.570 --> 00:02:11.500
So again this is just a list of the actual columns so this list is going to look something like MPG

36
00:02:12.650 --> 00:02:16.110
horsepower displacements and so on.

37
00:02:17.420 --> 00:02:19.220
So you get the idea of what that is.

38
00:02:19.220 --> 00:02:23.930
Keep in mind not every feature is probably a good idea for this scatterplot and in fact later on when

39
00:02:23.930 --> 00:02:29.030
we work again with the dashboard you'll see that we'll be able to be plotting a scatterplot with something

40
00:02:29.030 --> 00:02:31.120
like the actual names of the cars.

41
00:02:31.120 --> 00:02:35.570
So those model cars that's probably not a great choice for the scatterplot but because this makes it

42
00:02:35.570 --> 00:02:38.540
a little easier to just have all the options in your dropdown menu.

43
00:02:38.660 --> 00:02:43.250
We'll go ahead and set that later on you're going to see how we're use features with the dropdown for

44
00:02:43.250 --> 00:02:44.690
components.

45
00:02:44.690 --> 00:02:51.940
So let's give ourselves a little more room here and get started with her actually layout OSA app layout

46
00:02:52.150 --> 00:02:57.670
is equal to and just as we've done before many times will set up our division.

47
00:02:57.670 --> 00:03:01.260
And this takes in a list and we're gonna have three main things here.

48
00:03:01.270 --> 00:03:05.450
We're going to have to drop them the second dropdown and then our graph.

49
00:03:05.620 --> 00:03:11.950
It's usually convenient to be able to place each down into its own separate div because that way you

50
00:03:11.950 --> 00:03:14.580
can adjust the style easily.

51
00:03:14.700 --> 00:03:15.750
So we're going to do that.

52
00:03:15.750 --> 00:03:21.440
We're going to have another HTL div and inside of this we'll have a single drop down.

53
00:03:21.450 --> 00:03:26.310
Make sure you take advantage of indentation here just so it makes it easier for you to read.

54
00:03:26.310 --> 00:03:31.230
So we have 20:00 div the first div inside of this is going to be a drop down and we'll just leave it

55
00:03:31.290 --> 00:03:32.580
at that.

56
00:03:32.580 --> 00:03:39.810
And then the second item in our outermost div is going to be another div which as you may have guessed

57
00:03:39.870 --> 00:03:41.520
is going to hold the other dropdown

58
00:03:44.450 --> 00:03:47.690
and then finally let's go ahead and add in a graph.

59
00:03:47.690 --> 00:03:52.550
So for this we won't bother putting it in a div because there's not a whole lot of style that we need

60
00:03:52.550 --> 00:03:53.210
to worry about.

61
00:03:53.210 --> 00:03:54.590
For that graph.

62
00:03:54.640 --> 00:03:59.840
So you're saying this is the graph in effect we can just finish this one off right now by saying giving

63
00:03:59.840 --> 00:04:08.080
it an ID such as featured graphic and we're going to be inserting the actual figure later on in our

64
00:04:08.200 --> 00:04:10.060
update graph function call.

65
00:04:10.480 --> 00:04:13.300
OK so here's the very basic bones of our layout.

66
00:04:13.330 --> 00:04:15.130
We have the outermost div.

67
00:04:15.250 --> 00:04:20.190
Then we have a div that's going to contain the first drop down a div that will contain the second drop.

68
00:04:20.290 --> 00:04:22.090
And then our actual graph.

69
00:04:22.390 --> 00:04:25.590
Let's begin by setting up these drop downs.

70
00:04:25.650 --> 00:04:35.180
We'll have the first dropdown Id be x axis and then remember that the dropdown takes in an options parameter.

71
00:04:35.470 --> 00:04:39.940
And this one's a little funny because it's essentially a list of dictionaries where that dictionary

72
00:04:39.940 --> 00:04:45.630
has a label and a value and we're going to use list comprehension in order to build out this dictionary.

73
00:04:45.760 --> 00:04:46.720
So we'll do the following.

74
00:04:46.720 --> 00:04:51.880
We're going to say the label is I.

75
00:04:53.700 --> 00:04:58.060
And the value is going to be as well.

76
00:04:58.660 --> 00:05:02.780
And then we're going to do this for I in features.

77
00:05:02.950 --> 00:05:06.960
So I that's the column name remember that features right here.

78
00:05:07.150 --> 00:05:10.540
That's going to be mpg HP displacement and so on.

79
00:05:10.540 --> 00:05:15.490
So all we're doing here this options is we're just building out a dictionary that says label mpg.

80
00:05:15.550 --> 00:05:22.200
Value mpg for I in features and we're just having these just correlate exactly with the label and value.

81
00:05:22.270 --> 00:05:25.970
So we don't need to worry about having the value be something else later on in our code.

82
00:05:26.230 --> 00:05:31.870
So that's the options list of dictionary label value pairs and we just did this with a simple list comprehension

83
00:05:32.140 --> 00:05:35.570
for every feature in the columns.

84
00:05:35.700 --> 00:05:42.890
Then we're going to do is have the actual initial value and displacement to be our initial value.

85
00:05:43.110 --> 00:05:47.160
Again it's really up to you what the initial value should be but we'll have just displacement be the

86
00:05:47.160 --> 00:05:53.970
first x axis value and we're going to do a very similar thing for the drop down for the y axis.

87
00:05:54.060 --> 00:06:00.640
So here that's y axis we're going to do the exact same options parameter.

88
00:06:00.690 --> 00:06:06.000
So let's copy this and we're going to paste it in here.

89
00:06:07.130 --> 00:06:09.890
Then comma for one more parameter.

90
00:06:09.890 --> 00:06:12.040
Now we get to choose the default y axis.

91
00:06:12.170 --> 00:06:13.570
Again totally up to you.

92
00:06:13.580 --> 00:06:17.000
Let's go ahead and choose something simple like MPG.

93
00:06:17.000 --> 00:06:19.390
So right off the bat we'll have to drop down.

94
00:06:19.430 --> 00:06:23.330
They're already connected to some IDs for the x axis and the y axis.

95
00:06:23.330 --> 00:06:28.340
Later on we'll be able to call those interactional callback decorator and then the graph itself.

96
00:06:28.340 --> 00:06:30.340
This one's actually already done.

97
00:06:30.500 --> 00:06:35.950
So one more thing that we're going to add inside of this div for the dropdown is a style dictionary.

98
00:06:36.170 --> 00:06:41.780
Right now if we just leave it as it is those drop downs are going to take up the entire width of the

99
00:06:41.780 --> 00:06:42.540
dashboard.

100
00:06:42.650 --> 00:06:47.540
So you would see one on top of the other and remember that our dashboard showed one to the left and

101
00:06:47.540 --> 00:06:48.570
one to the right.

102
00:06:48.650 --> 00:06:51.910
We can adjust that with some style calls.

103
00:06:52.190 --> 00:06:54.560
So make sure you do this quickly.

104
00:06:54.570 --> 00:06:57.060
So inside of our div..

105
00:06:57.220 --> 00:06:59.480
So it is here right after that bracket.

106
00:06:59.480 --> 00:07:06.710
I'm going to create a style dictionary and we're going to set the width of this.

107
00:07:06.760 --> 00:07:12.550
And after playing around some values I found that 48 percent with worked best for me 50 percent with

108
00:07:12.550 --> 00:07:14.920
it kind of gave a little bit of overlap issues.

109
00:07:14.920 --> 00:07:18.860
It depends on your browser though so you may want to play around with attribute yourself.

110
00:07:19.120 --> 00:07:28.620
And then the other attribute that I you made that display a little clear was saying display inline block

111
00:07:30.330 --> 00:07:36.270
and this inline block basically allows this dropdown to be right next to this dropdown instead of automatically

112
00:07:36.270 --> 00:07:38.280
introducing it that break.

113
00:07:38.370 --> 00:07:43.440
And we're actually just going to copy and paste this style dictionary for the second div.

114
00:07:43.480 --> 00:07:47.890
Remember the style dictionary it's associated with the div not the dropdown.

115
00:07:47.890 --> 00:07:51.080
So pay attention to where this bracket is.

116
00:07:51.130 --> 00:07:55.660
So the Stiv contains a list of the dropdown and then the style goes inside the Stiv.

117
00:07:55.720 --> 00:07:57.090
And we're going to do the same thing here.

118
00:07:57.220 --> 00:07:59.780
This div has a list containing that dropdown.

119
00:07:59.980 --> 00:08:06.670
We're going to say comma and give a style to that particular division then the graph itself if you want.

120
00:08:06.670 --> 00:08:09.350
You can add more style there by putting it in its own div.

121
00:08:09.400 --> 00:08:12.750
But right now let's just give style to the entire outermost div.

122
00:08:12.970 --> 00:08:15.420
I'm going to zoom out a little bit so we can see this.

123
00:08:15.420 --> 00:08:21.190
So notice here we have this outermost div That's a list of this div this div and the graph.

124
00:08:21.190 --> 00:08:27.240
So if we want to give the entire outermost have some style at the very end we can add a style dictionary.

125
00:08:27.430 --> 00:08:29.730
And here just to give a little more space.

126
00:08:29.770 --> 00:08:35.380
We're going to set padding equal to 10 OK.

127
00:08:35.590 --> 00:08:37.690
So our layout is essentially the.

128
00:08:37.690 --> 00:08:42.490
Now we've created two dropped outs each within their own div that way we can out of style dictionary

129
00:08:42.930 --> 00:08:45.370
to make sure it will have an extra comma there.

130
00:08:45.370 --> 00:08:46.190
There we go.

131
00:08:46.240 --> 00:08:48.160
And then we had a graph as well.

132
00:08:49.080 --> 00:08:54.450
Let's move on to actually then adjusting our figures.

133
00:08:54.450 --> 00:08:56.910
Remember you can always copy and paste from our provided notes.

134
00:08:56.910 --> 00:09:01.900
This one is called callback 3 that PI inside of the multiple inputs folder.

135
00:09:02.070 --> 00:09:07.620
We're going to set up our function call will say if it's going to be a function we'll call it up that

136
00:09:07.640 --> 00:09:16.120
graph and it's going to take some x access name and some y axis name.

137
00:09:16.150 --> 00:09:20.350
So already this is different than what we've done before because you notice it's taken in two parameters

138
00:09:21.490 --> 00:09:30.810
and then we're going to have it return some dictionary with data and then a layout parameter as well.

139
00:09:30.860 --> 00:09:36.260
Essentially it's going to return that figure dictionary that will go inside of this graph.

140
00:09:36.260 --> 00:09:39.890
Because of that we're going to need to do an app decorator call.

141
00:09:39.890 --> 00:09:44.490
So let's zoom in a little bit so we can focus on that decorator call.

142
00:09:44.930 --> 00:09:54.440
So this app callback ofI are used to this now and we're going to set the output and first thing first

143
00:09:54.530 --> 00:09:55.420
is the ID.

144
00:09:55.490 --> 00:09:57.520
So what did we actually call the idea of this graph.

145
00:09:57.530 --> 00:09:59.140
Well we call that feature graphic.

146
00:09:59.210 --> 00:10:01.540
Again it's up to you whatever you want to call this string.

147
00:10:01.890 --> 00:10:08.370
So it's copy and place that there and then the property we want to adjust is the actual figure itself.

148
00:10:08.600 --> 00:10:12.010
So the figure right now is essentially just none because we didn't provide one.

149
00:10:12.140 --> 00:10:16.520
So the property that we're actually going to be outputting to is figure

150
00:10:20.210 --> 00:10:25.430
and then we have that list of inputs and this time we're actually going to have more than one input

151
00:10:25.550 --> 00:10:31.640
will say input and the input ID the first and all do is this X-axis and then the second one will be

152
00:10:31.640 --> 00:10:37.400
the y axis and we'll be doing this value as far as what should be passed into the function.

153
00:10:37.490 --> 00:10:45.710
So the input is going to be x axis ID for that component and the component property is the value.

154
00:10:45.710 --> 00:10:49.910
So that's our first input and then the second input is very similar.

155
00:10:49.910 --> 00:10:58.010
So essentially the ID of the other dropdown which is y axis and then we have the value.

156
00:10:58.190 --> 00:11:02.780
So no here these inputs essentially correlate with what the inputs here on this graph.

157
00:11:02.950 --> 00:11:07.160
So this first input is going to be the first parameter passed and here is this function.

158
00:11:07.240 --> 00:11:11.680
The second input is going to be the second parameter passing to the function and so on if you added

159
00:11:11.680 --> 00:11:13.990
more inputs for more components.

160
00:11:14.200 --> 00:11:19.150
But again it's just the idea and the property they are connecting for the input output.

161
00:11:19.150 --> 00:11:25.300
Then all we need to do is build out the dictionary and the data is going to beat the actual list of

162
00:11:25.300 --> 00:11:26.310
the trace.

163
00:11:26.320 --> 00:11:27.880
So let's work on that first.

164
00:11:28.240 --> 00:11:30.090
It's going to be kind of a lot of code here.

165
00:11:30.320 --> 00:11:34.280
So remember data when you're doing it with a figure it's going to be a list of traces.

166
00:11:34.300 --> 00:11:36.150
And in this case we just have one trace.

167
00:11:36.550 --> 00:11:38.140
It's our scatterplot.

168
00:11:38.530 --> 00:11:41.160
So I'll say go that scatter.

169
00:11:41.230 --> 00:11:45.010
And here is where we actually end up deciding on the x and y values.

170
00:11:45.040 --> 00:11:48.030
So the scatter plot Remember it takes an X.

171
00:11:48.160 --> 00:11:53.710
And this will be the data from column of whatever the input for x axis value is.

172
00:11:53.710 --> 00:11:58.510
So in this case this input ends up getting past the function here on x axis name.

173
00:11:58.510 --> 00:12:03.270
So we're going to copy that and set that to the data frame of x axis name.

174
00:12:03.280 --> 00:12:08.380
Note how in not passing the string x axis named because this is actually a variable that's being passed

175
00:12:08.380 --> 00:12:12.740
in from the input and the variable itself is a string.

176
00:12:12.760 --> 00:12:20.030
So keep that in mind then we're going to say why in a similar fashion is equal to f and that's going

177
00:12:20.030 --> 00:12:22.800
to be the parameter Y-axis name.

178
00:12:22.850 --> 00:12:23.380
There we go.

179
00:12:23.420 --> 00:12:25.310
And your underscores may vary as well.

180
00:12:25.310 --> 00:12:31.730
In fact I'm going to remove this underscore that way we keep similar stylings between Y axis and x axis.

181
00:12:31.820 --> 00:12:33.520
So we have X and Y.

182
00:12:33.860 --> 00:12:39.590
If we want text to be displayed when we hover over a particular point we can add that parameter as well.

183
00:12:40.680 --> 00:12:45.700
And that can be the name of the car itself.

184
00:12:45.700 --> 00:12:47.520
Now notice here this is a manual choice.

185
00:12:47.530 --> 00:12:52.630
So no matter what the X-axis is and what the y axis is whenever you hover over something regardless

186
00:12:52.630 --> 00:12:57.190
of what the actual scatterplot showing you're always going to see the name of that particular car model

187
00:12:59.230 --> 00:13:05.970
that will say mode is equal to marker's that it's a scatterplot and out a line plot.

188
00:13:06.160 --> 00:13:13.830
And if you want to add some different stylings to the markers remember that's just marker is equal to

189
00:13:14.010 --> 00:13:17.400
and then it's a dictionary where you decide on the different parameters.

190
00:13:18.530 --> 00:13:22.210
And very quickly it looks like I accidentally did this in the wrong park.

191
00:13:22.220 --> 00:13:27.980
Notice how it's not being syntax highlighting that comma should have gone in here.

192
00:13:27.980 --> 00:13:29.590
There we go marker equal to.

193
00:13:29.630 --> 00:13:33.650
So syntax highlighting can really help you to make sure you're putting things inside the parentheses.

194
00:13:33.680 --> 00:13:39.550
So all of this is going inside my scatter and then all of that is going inside this list is this data.

195
00:13:39.740 --> 00:13:44.230
And now the marker it's going to take its own dictionary and let's say just a few things looks make

196
00:13:44.270 --> 00:13:47.310
the size a little bigger maybe 15 points.

197
00:13:47.390 --> 00:13:52.740
And I think for right now that's actually all we'll do and let's move on to LEO.

198
00:13:53.110 --> 00:13:56.800
So leo will say go that lay out.

199
00:13:57.180 --> 00:14:01.670
And this is where we want to set maybe a title X axis y axis.

200
00:14:01.710 --> 00:14:02.870
So let's do that.

201
00:14:03.120 --> 00:14:08.700
Well set the title to speak to my dashboard for MPG

202
00:14:12.260 --> 00:14:15.990
and then we'll say x axis is equal to.

203
00:14:16.040 --> 00:14:18.650
And this takes in its dictionary for title.

204
00:14:18.920 --> 00:14:23.630
So this title remember we're going to want to have to be able to adjust this on the fly.

205
00:14:23.840 --> 00:14:31.970
So something we can do is just take in the x axis name we'll say x axis name and we'll do the same thing

206
00:14:31.970 --> 00:14:33.210
for y axis.

207
00:14:34.410 --> 00:14:39.180
So the title of the y axis is just whatever parameter is being passed into y axis here.

208
00:14:39.180 --> 00:14:40.480
So that's a y axis name.

209
00:14:43.390 --> 00:14:43.950
There we go.

210
00:14:44.080 --> 00:14:46.100
So that's all we're going to do right now for Leo.

211
00:14:46.120 --> 00:14:51.720
Later on we'll do a couple of adjustments to make it look a little nicer but if we zoom out we can see

212
00:14:51.720 --> 00:14:59.290
the whole picture here and we're going to continue on by actually saying now if name is equal to mean

213
00:15:00.010 --> 00:15:08.460
take that app and run the server let's save this and then check for any typos or mistakes by saying

214
00:15:09.330 --> 00:15:11.750
run this file will do Python basic but.

215
00:15:11.790 --> 00:15:14.100
Looks like I do have a typo somewhere.

216
00:15:14.520 --> 00:15:17.190
So I have invalid syntax on x axis.

217
00:15:17.220 --> 00:15:19.540
Let's make sure that I'm lined up correctly here.

218
00:15:19.620 --> 00:15:22.340
So it looks like they actually put that outside of my layout.

219
00:15:22.530 --> 00:15:25.490
So let's grab all of this code.

220
00:15:25.580 --> 00:15:29.420
And that should actually go comma inside here.

221
00:15:29.810 --> 00:15:32.080
So just a little error as far as with my commas.

222
00:15:32.090 --> 00:15:35.300
Again notice how now I'm getting the right syntax highlighting there.

223
00:15:35.570 --> 00:15:38.010
So I have this title X axis and y axis.

224
00:15:38.010 --> 00:15:41.240
This is all going inside my layout call right here.

225
00:15:41.240 --> 00:15:44.820
And then the whole thing is in the dictionary for data and layout.

226
00:15:44.900 --> 00:15:46.690
So let's save this try again.

227
00:15:49.110 --> 00:15:50.160
And there we go.

228
00:15:50.160 --> 00:15:53.700
So let's run toward dashboard in the browser and see if it's all working.

229
00:15:53.700 --> 00:15:53.940
All right.

230
00:15:53.940 --> 00:15:59.430
So moving toward dashboard it looks like it appears to be working we have this placement and NPG noticed

231
00:15:59.430 --> 00:16:02.340
that my scatter points look a little different than the first dashboard.

232
00:16:02.340 --> 00:16:03.860
There's no capacity to them.

233
00:16:03.870 --> 00:16:05.970
So we're going to add that in later on a style call.

234
00:16:06.090 --> 00:16:10.050
But right now let's make sure that the main functionality is working that it can change things the plot.

235
00:16:10.050 --> 00:16:15.300
So this plot horsepower versus the weight of the car looked perfect.

236
00:16:15.300 --> 00:16:20.140
So it does look like it's being updated right now basically all the things that we can change our style

237
00:16:20.140 --> 00:16:20.700
calls.

238
00:16:20.860 --> 00:16:22.440
So let's do that itself.

239
00:16:22.440 --> 00:16:26.900
Notice here as they hover over these points it's not going to the closest one on the cursor.

240
00:16:26.980 --> 00:16:29.210
So we can do that with hover mode in our layout.

241
00:16:29.410 --> 00:16:33.490
And then I also want to change the points the way they look right now if they're all on top of each

242
00:16:33.490 --> 00:16:35.640
other I can't really tell at which point is which.

243
00:16:35.650 --> 00:16:37.050
So we're going to adjust that as well.

244
00:16:37.210 --> 00:16:40.630
Let's go back to our text editor and adjust any style changes.

245
00:16:40.900 --> 00:16:42.320
Ok back to the text editor.

246
00:16:42.370 --> 00:16:45.590
Let's first adjust those markers so they look a little clear.

247
00:16:45.610 --> 00:16:49.820
Zoom back in here and add some more parameters to this marker dictionary.

248
00:16:49.990 --> 00:16:51.880
We already effect to the size that's looking good.

249
00:16:51.910 --> 00:16:57.150
But I'd like them to have a little bit of see through.

250
00:16:57.320 --> 00:17:01.120
So we're going to save maybe 0.5 for how opaque they are.

251
00:17:01.400 --> 00:17:02.920
And let's also give them a line.

252
00:17:02.960 --> 00:17:08.020
So let's give them a nice little white border so we can differentiate between the actual circles.

253
00:17:08.090 --> 00:17:13.300
So we'll say line and this takes in its own dictionary of the width and the color of the line.

254
00:17:14.090 --> 00:17:20.860
So let's give that width of the line a value of 0.5 and let's give the color for it.

255
00:17:20.960 --> 00:17:24.170
Let's just say it white.

256
00:17:24.240 --> 00:17:26.100
You can also experiment with something like black.

257
00:17:26.310 --> 00:17:27.600
That should look fine as well.

258
00:17:28.570 --> 00:17:38.120
Then for the hover mode for the layout Let's add that in so we'll say comma here hover mode parameter

259
00:17:41.100 --> 00:17:48.330
and we're going to set that equal to the string closest so that way whatever button or point is closest

260
00:17:48.330 --> 00:17:51.240
to your cursor that should be the information that's displayed.

261
00:17:51.300 --> 00:17:56.930
Let's say that wrister are actual dashboard and it should look a little bit nicer now.

262
00:17:57.090 --> 00:17:58.500
All right jumping back to the dashboard.

263
00:17:58.500 --> 00:18:03.310
I can see now there's a little bit of see through Inus to the circles which is good.

264
00:18:03.480 --> 00:18:06.630
And then also it looks like the closest mode is actually working now.

265
00:18:06.660 --> 00:18:09.930
So if I'm hovering over this point it shows me the information for that point.

266
00:18:10.140 --> 00:18:16.140
And we saw how the functionality of being able to adjust the actual x and y axis so weight versus weight

267
00:18:16.290 --> 00:18:19.640
or let's say weight versus number of cylinders and so on.

268
00:18:19.930 --> 00:18:20.370
OK.

269
00:18:20.580 --> 00:18:24.320
So in the few minutes we have left let's do a very quick review of everything that's going on.

270
00:18:24.330 --> 00:18:24.540
OK.

271
00:18:24.540 --> 00:18:25.980
Here we are back with the text editor.

272
00:18:26.010 --> 00:18:27.720
Let's do a very high level overview.

273
00:18:27.720 --> 00:18:29.940
Just briefly as far as everything we did.

274
00:18:29.940 --> 00:18:36.000
First off pretty simple do all your imports create your Dasch application read in your data file and

275
00:18:36.000 --> 00:18:40.890
then we created this list of the columns basically a list of all the features available in that dataset

276
00:18:41.220 --> 00:18:43.860
which we used later on for our dropdown.

277
00:18:43.860 --> 00:18:49.620
Then we created our layout this layout as always has the outermost div and then because we wanted to

278
00:18:49.620 --> 00:18:54.070
add styling to some of these components we created a separate div for each dropdown.

279
00:18:54.090 --> 00:18:58.350
And the reason for that mainly is so we can show the divs one to the left and one to the right.

280
00:18:58.410 --> 00:19:02.460
If we didn't have that then most likely they would have been stacked right on top of each other which

281
00:19:02.460 --> 00:19:06.870
is fine for a simple dashboard but to add a little more styling call you can always put it in a div

282
00:19:07.200 --> 00:19:09.020
and then style it with a dictionary.

283
00:19:09.270 --> 00:19:13.760
Then each of these drop downs we give them an ID so we can later reference that in our callback.

284
00:19:13.860 --> 00:19:19.020
We want one for x axis and one for y axis and then if we zoom in a little bit we can see here that we

285
00:19:19.020 --> 00:19:21.750
created that list of options with list comprehension.

286
00:19:21.810 --> 00:19:26.340
This is usually a more tricky parts that's going to need some sort of custom code and you can do it

287
00:19:26.340 --> 00:19:29.490
slickly with a list comprehension.

288
00:19:29.490 --> 00:19:33.640
But we've seen before in our previous examples how we can do this with just a for loop as well.

289
00:19:33.780 --> 00:19:38.710
Use whatever method makes sense to you then we have a default value for the drop downs.

290
00:19:39.090 --> 00:19:43.800
Then we adjust the style for each of these divs and then finally we have our graph call where essentially

291
00:19:43.800 --> 00:19:45.030
the figure parameter is there.

292
00:19:45.030 --> 00:19:47.280
But right now it's set to None.

293
00:19:47.310 --> 00:19:50.460
Then we create our decorator callback with our output.

294
00:19:50.460 --> 00:19:55.560
Remember we have the component ID and the component property we want to adjust and then we have a list

295
00:19:55.560 --> 00:20:02.100
of inputs again component IDs and properties we want to take in these inputs are directly connected

296
00:20:02.100 --> 00:20:04.610
to the parameters that are passed into this function.

297
00:20:04.800 --> 00:20:10.020
And then this function this update graph gets called whenever you adjust these inputs and it's going

298
00:20:10.020 --> 00:20:14.630
to return this property figure which gets inserted directly into this graph.

299
00:20:14.790 --> 00:20:17.810
So we just do the dictionary for the data and the layout.

300
00:20:17.880 --> 00:20:23.790
And here this is essentially what we saw before with our normal plot plots a scatterplot and a layout

301
00:20:24.240 --> 00:20:30.940
where the scatterplot is defined by the actual inputs of x axis name and y axis name for the x and y.

302
00:20:31.020 --> 00:20:31.390
OK.

303
00:20:31.530 --> 00:20:34.050
If you have any questions feel free to post the Q&amp;A forms.

304
00:20:34.050 --> 00:20:37.980
Make sure to check the guidebook for more information on this dashboard.

305
00:20:37.980 --> 00:20:39.330
We'll see you at the next lecture.

