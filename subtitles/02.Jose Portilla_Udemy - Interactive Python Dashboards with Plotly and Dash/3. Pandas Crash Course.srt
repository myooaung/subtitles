1
00:00:05,400 --> 00:00:11,080
Welcome back and this lecture going to give you a quick crash course on pandas now that we know about

2
00:00:11,110 --> 00:00:16,480
non-pilot we can learn about pandas which is a library built on top of Pi which allows Python to read

3
00:00:16,480 --> 00:00:22,190
and datasets from various formats such as CSC files in this course we're mainly using pandas to read

4
00:00:22,200 --> 00:00:26,600
and datasets and select or columns of data in order to plot them out.

5
00:00:26,620 --> 00:00:31,480
We can also use panels to quickly graph statistics such as the mean value of a particular column in

6
00:00:31,480 --> 00:00:34,710
a dataset in case you don't have panels yet.

7
00:00:34,840 --> 00:00:39,940
Go ahead and install it at your command line fighter pipin style Pancho's or Konda install Pandurs for

8
00:00:39,940 --> 00:00:40,540
this lecture.

9
00:00:40,540 --> 00:00:44,140
We'll go ahead and create a simple script and run that script at the command line.

10
00:00:44,170 --> 00:00:46,690
So let's Chambord to her editor and get started.

11
00:00:46,870 --> 00:00:48,330
OK here am Adam.

12
00:00:48,430 --> 00:00:53,640
I'm going to do is create a new file under my example folder will say new file.

13
00:00:53,680 --> 00:00:57,870
And we're going to just say my example dot pi.

14
00:00:57,910 --> 00:01:03,160
Make sure you don't call this file Pandurs that PI Otherwise your Python is going to be confused when

15
00:01:03,160 --> 00:01:04,230
you import pantless.

16
00:01:04,270 --> 00:01:06,370
It's going to think you're referring to the file itself.

17
00:01:06,490 --> 00:01:09,110
So it makes you don't call any files Pancho's that pi.

18
00:01:09,130 --> 00:01:11,680
Instead call it something unique like my example.

19
00:01:11,700 --> 00:01:12,420
PI.

20
00:01:12,760 --> 00:01:18,400
OK so we have my example of Pi and I'm also going to open up a new instance of my terminal at the same

21
00:01:18,400 --> 00:01:20,090
location or my file is.

22
00:01:20,110 --> 00:01:23,210
So I have it saved right now under an example folder.

23
00:01:23,350 --> 00:01:26,510
The last thing we're going to need is from your zip file notes.

24
00:01:26,650 --> 00:01:29,810
There's a CXXVI file that we're going to be working with.

25
00:01:29,830 --> 00:01:36,220
You can either run the script at the same location of the notes or you can make sure to know where that

26
00:01:36,220 --> 00:01:42,310
salary's not CSB file is what I'm going to do is I'm going to move that salary's thought CACP file from

27
00:01:42,310 --> 00:01:45,330
the zip download of notes into my example folder.

28
00:01:45,460 --> 00:01:47,920
That way I can easily call it from my script.

29
00:01:47,920 --> 00:01:49,090
So let's do that now.

30
00:01:49,090 --> 00:01:54,270
So here I can see under plotless dashboards of Dasch under panderers crash course there's a CSP file

31
00:01:54,280 --> 00:02:01,720
salary's thought CXXVI I'm going to copy this and then I'm going to go to my example folder where my

32
00:02:01,720 --> 00:02:03,330
example that postscript right now is.

33
00:02:03,370 --> 00:02:04,800
And paste it in.

34
00:02:04,960 --> 00:02:09,520
The other alternative is to just pass in the entire file path to the CSP file.

35
00:02:09,610 --> 00:02:14,950
When we're working with it with Panas and I'll make a note of that as we actually perform that command.

36
00:02:14,950 --> 00:02:20,350
So let me close this now and if I expand my example folder I now see my example that pi and salary's

37
00:02:20,350 --> 00:02:21,480
thought CXXVIII.

38
00:02:21,850 --> 00:02:30,010
So we're going to do first is we will say import Pandurs as PD and then you can read in a C as file

39
00:02:30,130 --> 00:02:38,890
into what's known as a data frame by saying PD read underscore CXVII.

40
00:02:39,380 --> 00:02:45,860
And then here you can pasand the entire file path or because my dot PI script is in the same location

41
00:02:45,860 --> 00:02:47,750
as my is that C is free file.

42
00:02:47,800 --> 00:02:55,110
All I need to do is say salary's thought V So let's save this as a variable called DMF and then we're

43
00:02:55,120 --> 00:03:02,020
going to do is we're going to print out that D F and F stands for data frame and data frame is the main

44
00:03:02,020 --> 00:03:05,200
way that Panas works with tabular data files.

45
00:03:05,260 --> 00:03:08,790
So I'm going to make sure to save this otherwise we won't see anything.

46
00:03:09,150 --> 00:03:12,010
And let's call our actual script.

47
00:03:12,010 --> 00:03:17,800
I'll say Python and then say my example is should be able to tab autocomplete that.

48
00:03:18,140 --> 00:03:24,370
And if you run this you now see our data frame in our data frame has automated index numbering so 0

49
00:03:24,380 --> 00:03:25,240
1 2.

50
00:03:25,280 --> 00:03:29,770
We have a name column John Salley and Elyssa we have their salary.

51
00:03:29,780 --> 00:03:32,950
So just some made up salary numbers as well as her age.

52
00:03:32,960 --> 00:03:39,650
So here I can say I have columns and rows very similar to a Num. pie array or Num. PI Matrix except

53
00:03:39,650 --> 00:03:47,160
now I have a numbered index in named columns so you can actually select columns with a bracket call.

54
00:03:47,180 --> 00:03:53,750
So if I wanted to select only the salary column What are do is appear It might if I would have square

55
00:03:53,750 --> 00:03:56,680
brackets and then passen the name of the column.

56
00:03:56,840 --> 00:03:59,410
In this case the name of the column is salary.

57
00:03:59,480 --> 00:04:03,430
Again make sure to save that and let's run our script again to see that change.

58
00:04:03,620 --> 00:04:07,310
And now it only reports back the values of the salary column.

59
00:04:07,400 --> 00:04:12,260
So it reports back here the name at the bottom that you're dealing with salary the index positions are

60
00:04:12,260 --> 00:04:13,340
still numbered for you.

61
00:04:13,340 --> 00:04:15,820
And now we see the actual salary values.

62
00:04:15,860 --> 00:04:20,720
So we're going to be using this a lot this sort of reading in a as file and then grabbing a particular

63
00:04:20,720 --> 00:04:24,460
column of data points in order to actually plot them.

64
00:04:24,500 --> 00:04:29,030
If you remember anything for this lecture it's essentially is these two simple commands reading in a

65
00:04:29,030 --> 00:04:34,350
data file and then grabbing a column of data if you want to grab multiple columns of data.

66
00:04:34,490 --> 00:04:40,670
What you need to do isn't just pasan a list of columns so will pass and a list of columns I'm going

67
00:04:40,670 --> 00:04:43,980
to grab salary again pasted in here.

68
00:04:43,980 --> 00:04:50,700
And let's also grab the name column so we'll say name comma than salary.

69
00:04:50,750 --> 00:04:52,530
So a lot of times I get questions from students.

70
00:04:52,550 --> 00:04:55,370
Why again do I have these two sets of brackets.

71
00:04:55,370 --> 00:05:01,220
Well that's because this on the inside that's just a list of column names that you're passing into the

72
00:05:01,220 --> 00:05:02,160
data frame.

73
00:05:02,300 --> 00:05:04,730
So save that let's run this again.

74
00:05:04,820 --> 00:05:09,920
And now I will see my name column in my salary column but I won't see the age column because it wasn't

75
00:05:09,920 --> 00:05:11,590
selected here on this line.

76
00:05:12,480 --> 00:05:18,540
Now similar to them PI you can actually create calls of min max mean on the Panas data frame for a single

77
00:05:18,540 --> 00:05:19,420
column.

78
00:05:19,440 --> 00:05:23,630
So let's go back to our salary.

79
00:05:23,670 --> 00:05:26,100
So just single brackets needed.

80
00:05:26,100 --> 00:05:31,390
So if I say DFI salary that's kind of print out the salary column off of this just like a kid with some

81
00:05:31,410 --> 00:05:35,850
pie I can call men save that.

82
00:05:35,880 --> 00:05:37,070
And then it's going to return back.

83
00:05:37,110 --> 00:05:43,380
The minimum salary value in this case it was John's 50000 and I can also do things like Rabbe they mean

84
00:05:43,920 --> 00:05:49,910
so ill return back the mean salary value and if I run that I get back the actual mean value here.

85
00:05:49,920 --> 00:05:54,630
So these are very similar commands that we performed back when we were working if not pi.

86
00:05:54,850 --> 00:06:00,530
Again just like non-pilot we can use conditional filtering to select rows that meet certain criteria.

87
00:06:00,540 --> 00:06:05,020
So for example let's check out our entire data frame again.

88
00:06:05,110 --> 00:06:11,170
So just print out RDF and we see our entire data frame the names the salaries and the ages.

89
00:06:11,410 --> 00:06:17,950
Let's imagine that I wanted to sub select rows from the state of frame based on a certain condition.

90
00:06:18,010 --> 00:06:24,220
For example I only wanted to select the rows where the person's age was more than 30 years old.

91
00:06:24,370 --> 00:06:29,950
What it could do is manually start checking all these but instead of going to do it with conditional

92
00:06:29,950 --> 00:06:31,210
filtering.

93
00:06:31,330 --> 00:06:34,440
So what I end up doing here is the following.

94
00:06:34,810 --> 00:06:38,300
I say DMF of the column I'm interested in.

95
00:06:38,320 --> 00:06:39,160
H.

96
00:06:39,280 --> 00:06:44,870
And then I have some sort of comparison operator such as greater than 30.

97
00:06:44,950 --> 00:06:49,770
So here this is going to return what's known as a series of boolean values.

98
00:06:49,840 --> 00:06:51,940
Floats go ahead and check that out.

99
00:06:52,240 --> 00:06:55,530
We're going to say our of Boole.

100
00:06:55,560 --> 00:06:59,530
It's a long variable name but it's just so we remember what it's referring to.

101
00:06:59,850 --> 00:07:04,120
And then let's print out that variable.

102
00:07:04,140 --> 00:07:06,740
So when I run this notice here I get back.

103
00:07:06,740 --> 00:07:08,720
True true and false.

104
00:07:08,910 --> 00:07:11,560
And that refers to the actual original rows.

105
00:07:11,580 --> 00:07:16,560
Let's expand this a little more so we can get the full picture here what it's doing is on that command

106
00:07:16,560 --> 00:07:17,400
on line 5.

107
00:07:17,400 --> 00:07:19,960
I was asking hey where is the data from.

108
00:07:19,980 --> 00:07:21,820
Age column greater than 30.

109
00:07:22,080 --> 00:07:24,570
And that returns back this series of boolean values.

110
00:07:24,840 --> 00:07:30,300
And here it's essentially the age except the type is now boolean where the first one is true.

111
00:07:30,300 --> 00:07:31,350
It's greater than 30.

112
00:07:31,440 --> 00:07:32,620
Second one is true.

113
00:07:32,670 --> 00:07:35,610
It's greater than 30 and the last one says is 27.

114
00:07:35,610 --> 00:07:36,190
It's false.

115
00:07:36,210 --> 00:07:37,720
It's not greater than 30.

116
00:07:37,740 --> 00:07:44,900
What I can then do is pass in that series of boolean values into my data frame so notice here how I'm

117
00:07:44,900 --> 00:07:48,320
using the square brackets save that.

118
00:07:48,320 --> 00:07:54,380
And if I run this again what I get back is the entire data frame only for that particular value happened

119
00:07:54,380 --> 00:07:55,090
to be true.

120
00:07:55,370 --> 00:07:58,700
So you don't typically actually see this done in two steps.

121
00:07:58,700 --> 00:08:01,220
Instead it's done and once that you'll see in just a second.

122
00:08:01,400 --> 00:08:03,410
But hopefully this logic makes sense to you.

123
00:08:03,440 --> 00:08:09,980
All we're doing is we're saying is H column greater than 30 that retrieves back a series of boolean

124
00:08:09,980 --> 00:08:16,040
values we can use that series of boolean values to then filter the entire data frame by and we get back

125
00:08:16,310 --> 00:08:21,690
all the columns in the data frame and all the rows where this condition happened to be true.

126
00:08:22,220 --> 00:08:25,240
And as I just mentioned typically you don't see this done in two steps.

127
00:08:25,250 --> 00:08:32,170
Instead people don't bother with that variable assignment of series of boolean and they just cut this

128
00:08:32,290 --> 00:08:33,930
and paste it in here.

129
00:08:33,940 --> 00:08:39,220
The reason I like to show it done in two steps first is because this sort of double D F can be a little

130
00:08:39,220 --> 00:08:40,570
confusing for beginners.

131
00:08:40,630 --> 00:08:45,040
But again we're doing the exact same thing here inside of our data frame we're just asking where is

132
00:08:45,040 --> 00:08:46,920
that age column greater than 30.

133
00:08:47,110 --> 00:08:48,990
And we're printing out those results.

134
00:08:49,090 --> 00:08:56,140
So if I were to save this and run it again I get back name salary and age just like we did before.

135
00:08:56,140 --> 00:08:56,630
OK.

136
00:08:56,830 --> 00:08:59,190
There's a lot more other commands you can do with pantless.

137
00:08:59,200 --> 00:09:00,230
Again just like Nam.

138
00:09:00,250 --> 00:09:01,590
It's a huge library.

139
00:09:01,600 --> 00:09:05,140
In fact it actually has some visualization properties already built into it.

140
00:09:05,170 --> 00:09:11,170
I'm going to show you just a few things you can do with panderers that you may see in the course later

141
00:09:11,170 --> 00:09:11,620
on.

142
00:09:11,830 --> 00:09:16,050
And if anything else comes up with pandas in the course we'll go ahead and introduce at that time.

143
00:09:16,180 --> 00:09:18,740
But some useful methods they can call off a call.

144
00:09:18,910 --> 00:09:21,840
Are things like grabbing unique values.

145
00:09:22,300 --> 00:09:26,520
So if I were to say age I can say datt unique.

146
00:09:26,530 --> 00:09:27,640
Make sure I spell that right.

147
00:09:29,200 --> 00:09:30,380
Open close parentheses.

148
00:09:30,400 --> 00:09:35,760
And what that does is it's going to print out all the unique values for that particular column.

149
00:09:37,460 --> 00:09:39,050
So let's comment that out.

150
00:09:39,050 --> 00:09:46,370
And then if I run this notice now I get back this array of values so I see 34 45 27.

151
00:09:46,400 --> 00:09:48,580
Those were my unique ages.

152
00:09:48,710 --> 00:09:53,380
I can say and unique if I just want to get the length of that list.

153
00:09:53,780 --> 00:09:59,740
So that just says hey there are three unique values for age just as we saw a.

154
00:09:59,760 --> 00:10:02,910
Here is essentially calling the length of unique.

155
00:10:02,930 --> 00:10:07,850
There's other things we can do such as grab all the column names off a data frame.

156
00:10:07,850 --> 00:10:14,680
So right off of DMF directly you can say that columns notice here for this particular attribute.

157
00:10:14,690 --> 00:10:18,860
I'm not calling open close Princie because it's an attribute of the data frame.

158
00:10:19,220 --> 00:10:24,380
And if you run that it just returns back this index object that is essentially a list of the column

159
00:10:24,380 --> 00:10:25,280
names.

160
00:10:26,060 --> 00:10:33,450
And now let's go over it just a few other useful methods that you may find using pantless.

161
00:10:33,490 --> 00:10:34,790
One is info.

162
00:10:35,100 --> 00:10:39,710
So info what it's going to do is report back information about your data frame.

163
00:10:39,850 --> 00:10:45,520
So if we run this again what it does it's just reports back how many entries you have the data columns

164
00:10:45,580 --> 00:10:48,150
and then how many objects and the type of object.

165
00:10:48,170 --> 00:10:53,380
So you can see here that salary and age those were integer type objects and for strings we'll just report

166
00:10:53,380 --> 00:10:54,430
back objects.

167
00:10:54,540 --> 00:10:59,450
We can see how much memory it's using up inside our computer.

168
00:10:59,460 --> 00:11:07,880
There's also the scribe which is a kind of similar thing except the report's back a statistical summary

169
00:11:08,120 --> 00:11:09,330
of your data frame.

170
00:11:09,350 --> 00:11:14,810
So for the actual columns that are numerical what it ends up doing it reports back things like the counts

171
00:11:14,900 --> 00:11:20,360
the mean the standard deviation the core tiles and then the min and max values we don't use this too

172
00:11:20,360 --> 00:11:24,910
often but is a very useful statistical summary of your data frame.

173
00:11:25,100 --> 00:11:28,270
And just like we did of columns you can also call index.

174
00:11:28,340 --> 00:11:33,880
In our case it won't be very interesting because memory index is just 0 1 2 3.

175
00:11:33,920 --> 00:11:40,320
So it created an automatic range index for us where it starts at 0 stops at 3 and the step is one which

176
00:11:40,340 --> 00:11:46,400
kind of nice that we print out all the numbers for really large data from okay to finish up this lecture

177
00:11:46,410 --> 00:11:52,810
what I'm going to do is combine the ideas of Pi and pand those to kind of quickly generate a data frame

178
00:11:52,960 --> 00:11:57,850
a panther's data frame that is data using some up-I generated numbers.

179
00:11:57,850 --> 00:12:03,730
So typically the way we do this is we're also going to import some PI and P and I'm no longer going

180
00:12:03,730 --> 00:12:06,160
to read a CSP file here.

181
00:12:06,220 --> 00:12:16,570
Instead what I'm going to do is I will say and arrange and I will say from 0 to 50 and then I'm going

182
00:12:16,570 --> 00:12:23,050
to reshape this to be five rows by 10 columns and you can do this all in one line or you can do it in

183
00:12:23,050 --> 00:12:24,200
two separate steps.

184
00:12:24,430 --> 00:12:28,030
And we're going to call this Matt.

185
00:12:28,070 --> 00:12:31,040
So there's my kind of matrix of numbers here.

186
00:12:31,190 --> 00:12:36,050
And then finally we're going to do is we're going to turn that PI matrix.

187
00:12:36,050 --> 00:12:41,720
So if I were to print this map right now and run this I would just get back a non-pay matrix.

188
00:12:41,720 --> 00:12:49,400
I can actually convert this into a pand this data frame using PD dot data frame.

189
00:12:49,420 --> 00:12:55,600
Notice here how the f is capitalized and then it takes in various parameters such as data index and

190
00:12:55,600 --> 00:12:56,360
columns.

191
00:12:56,560 --> 00:13:02,080
So let's start off just by providing the data will say data Matt and instead of printing up Matt.

192
00:13:02,110 --> 00:13:11,230
What I'm going to do now is say DMF is equal to PD data frame and I'm going to print out that DSF save

193
00:13:11,230 --> 00:13:11,810
this.

194
00:13:11,830 --> 00:13:14,740
And now when we run this python my example of Pi.

195
00:13:14,740 --> 00:13:16,230
Notice what happens here.

196
00:13:16,270 --> 00:13:17,700
It may not be clear at first.

197
00:13:17,710 --> 00:13:20,990
But secondly now a data frame where this rate.

198
00:13:20,990 --> 00:13:26,480
Here are the column names and pan this is automatically labeled a column just numerically for us.

199
00:13:26,580 --> 00:13:30,010
And this first thing right here is are 1 2 3 4.

200
00:13:30,130 --> 00:13:32,860
That's the automated index for the data frame.

201
00:13:33,070 --> 00:13:37,330
And you can tell it's the index and the column names because there's a little gap here and everything

202
00:13:37,360 --> 00:13:38,620
inside in the middle here.

203
00:13:38,710 --> 00:13:40,860
That's the actual non-pilot data.

204
00:13:41,020 --> 00:13:43,750
So that's what happens when the only passen data.

205
00:13:43,870 --> 00:13:47,670
But we can also do is passen an index and columns.

206
00:13:47,740 --> 00:13:52,990
So to actually show this I'm going to reduce the size of our data frame just a little bit.

207
00:13:53,020 --> 00:13:56,900
Let's go ahead and just say 11 here.

208
00:13:57,270 --> 00:14:00,620
So actually zero through 10.

209
00:14:00,640 --> 00:14:04,780
So we'll arrange from 0 to 10 that should be 0 1 2 3 4 5 6 7 8 9.

210
00:14:04,810 --> 00:14:13,540
Remember it's up to nine including 10 and then I'm going to reshape this to be five rows by two columns.

211
00:14:13,540 --> 00:14:20,740
So when I run this I get back a similar thing except now it's five rows by two columns and I'm going

212
00:14:20,740 --> 00:14:22,930
to add an eight columns argument here.

213
00:14:23,140 --> 00:14:30,610
And you can just pass and a list of columns so will say column A and B all my columns.

214
00:14:30,630 --> 00:14:36,130
So then when I run this instead of automatically labeling it 0 and 1 it chooses the column names that

215
00:14:36,130 --> 00:14:37,690
I provided as a parameter.

216
00:14:37,690 --> 00:14:39,600
So now I have a and b.

217
00:14:39,670 --> 00:14:41,590
So this is a Panas data frame.

218
00:14:41,680 --> 00:14:43,640
Again 0 1 2 3 4.

219
00:14:43,810 --> 00:14:48,340
That's the index that has been automatically generated if you wanted to provide your own index.

220
00:14:48,370 --> 00:14:53,950
You could just provide an index argument and again pass on a list of the actual index names you wanted.

221
00:14:53,980 --> 00:14:57,090
In general we won't really need to do that so much really.

222
00:14:57,130 --> 00:15:02,200
As I mentioned the very beginning if you just get out that you can read CXXVI files and grab columns

223
00:15:02,290 --> 00:15:03,930
or multiple columns off of them.

224
00:15:03,940 --> 00:15:07,990
That's all you need to know about pandas for this visualization course.

225
00:15:07,990 --> 00:15:08,330
OK.

226
00:15:08,350 --> 00:15:09,750
I hope those useful to you.

227
00:15:09,820 --> 00:15:14,010
Coming up next we're going to do a really quick exercise review of non-pilot Pancho's.

228
00:15:14,040 --> 00:15:18,790
Make sure that you've retained everything we just talked about and then we'll move on to actually learning

229
00:15:18,790 --> 00:15:19,940
about plumply.

230
00:15:19,960 --> 00:15:21,780
Thanks and I'll see you at the next lecture.

