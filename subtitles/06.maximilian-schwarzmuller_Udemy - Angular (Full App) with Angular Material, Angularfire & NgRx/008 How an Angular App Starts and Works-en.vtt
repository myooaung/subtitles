WEBVTT
1

00:00:02.390 --> 00:00:04.140

So we created our project.



2

00:00:04.190 --> 00:00:06.380

How does this now actually work.



3

00:00:06.380 --> 00:00:08.280

How does an angular start.



4

00:00:08.480 --> 00:00:09.620

Well let's start it.



5

00:00:09.620 --> 00:00:16.550

First of all and for that I hope the terminal here which is built into my ID which has to code and there



6

00:00:16.550 --> 00:00:19.290

it automatically navigated into this project folder.



7

00:00:19.310 --> 00:00:20.540

So you should do this too.



8

00:00:20.570 --> 00:00:24.350

You can also do this of course in the normal terminal on your operating system.



9

00:00:24.680 --> 00:00:28.030

And then you should run Engy serve in the project folder.



10

00:00:28.280 --> 00:00:35.790

Now this will spin up that development server which allows us to see our application and test it.



11

00:00:35.870 --> 00:00:40.250

You can open your app under local host Colin 4200.



12

00:00:40.310 --> 00:00:46.460

That's the default address and you should see something like that some starting screen which is generated



13

00:00:46.520 --> 00:00:47.620

automatically.



14

00:00:47.630 --> 00:00:53.690

Now this starting screen is rendered entirely Frue angular as you can confirm if you view the page source



15

00:00:54.230 --> 00:00:58.540

there if you watch closely you don't see the content you see on the screen.



16

00:00:58.700 --> 00:01:05.030

The reason for this is that all the content is rendered dynamically ofter the page was loaded through



17

00:01:05.090 --> 00:01:10.550

javascript through all these channels put files which are imported at the bottom here.



18

00:01:10.670 --> 00:01:12.900

So this is how the angler app loads.



19

00:01:12.980 --> 00:01:16.360

The question just is how exactly is the flow.



20

00:01:16.730 --> 00:01:22.530

Well it's this index HVM file that gets loaded in the end as you can see it's a very clean file.



21

00:01:22.550 --> 00:01:25.540

And here you don't even CDs script imports.



22

00:01:25.580 --> 00:01:32.080

That's because the seal I will inject these imports dynamically during the build process.



23

00:01:32.150 --> 00:01:35.330

This is just a raw input file with which we can work.



24

00:01:35.420 --> 00:01:41.960

This falls pretty empty but it has this strange app root element which clearly is not a default HVM



25

00:01:42.320 --> 00:01:43.950

element and it isn't.



26

00:01:44.030 --> 00:01:50.750

It is the element where our angular app will be rendered in stead later angular somehow needs to know



27

00:01:50.750 --> 00:01:52.440

that it should render itself though.



28

00:01:52.670 --> 00:01:55.460

And that is constructed in the main dot TS fall.



29

00:01:55.530 --> 00:02:01.760

This is the starting file which is first executed when your angular app starts it's the absolutely first



30

00:02:01.760 --> 00:02:03.040

follow the runs.



31

00:02:03.300 --> 00:02:08.270

It's of course typescript and therefore it will be compiled to javascript by the build workflow we're



32

00:02:08.270 --> 00:02:08.950

using.



33

00:02:09.110 --> 00:02:11.530

But in the end this is the code that gets executed.



34

00:02:11.660 --> 00:02:17.150

And here we import a couple of things from the angler package and then here we get this line of code



35

00:02:17.600 --> 00:02:25.790

where we execute dysfunction and then bootstrap module and we pass this app module thing to the function.



36

00:02:25.860 --> 00:02:30.970

This on the other hand seems to be something we import from the app folder and there from the App Store



37

00:02:30.980 --> 00:02:32.320

module file.



38

00:02:32.630 --> 00:02:35.750

And by the way for all these files the extension is missing.



39

00:02:35.840 --> 00:02:36.950

So you could say Dot.



40

00:02:36.990 --> 00:02:43.700

Yes but actually here you should omitted because it will be added automatically by the build workflow.



41

00:02:44.060 --> 00:02:51.200

So whatever this command does or however it works behind the scenes what it does is it starts your angler's



42

00:02:51.200 --> 00:02:57.020

app bootstrap just means started from it's 0 and so on it's own without any help.



43

00:02:57.020 --> 00:03:04.400

This will instruct angular to start itself and it needs one argument forward it app module which is



44

00:03:04.400 --> 00:03:10.850

like a root definition file that defines all the pieces our angler app is made up of.



45

00:03:10.880 --> 00:03:15.970

So let's have a look at that farden because it seems to be the next important fall in the app folder.



46

00:03:16.010 --> 00:03:23.630

It's this app module that TS fall and in there we also got some imports and then this typescript class



47

00:03:23.840 --> 00:03:25.980

which actually has no class body.



48

00:03:26.180 --> 00:03:28.290

But this thing above it.



49

00:03:28.370 --> 00:03:30.500

Now this is called a decorator.



50

00:03:30.500 --> 00:03:36.470

It's a typescript feature which kind of manipulates to clasp behind the scenes.



51

00:03:36.470 --> 00:03:39.080

It adds some meditate or you could say.



52

00:03:39.080 --> 00:03:45.590

And here we pass a javascript object to the decorator to configure it Engy module is a special decorator



53

00:03:45.590 --> 00:03:51.470

which is imported from the angle or a package and it essentially just turns this normal typescript class



54

00:03:51.860 --> 00:03:58.040

into a module into a class that has some additional meta data that can be interpreted that by angular



55

00:03:58.220 --> 00:04:07.460

as a module module typically has these three definitions or configurations or declarations aere declares



56

00:04:07.520 --> 00:04:10.700

all the components you're using in your project.



57

00:04:10.700 --> 00:04:15.330

Now I mentioned that components would be important in an angular project and they are.



58

00:04:15.380 --> 00:04:20.690

You build your entire English project with components but you need to tell angular which components



59

00:04:20.690 --> 00:04:21.920

you are about to use.



60

00:04:21.930 --> 00:04:23.840

That's added to declarations.



61

00:04:24.110 --> 00:04:30.830

Imports imports over modules like the browser module provided by Engler avor modules.



62

00:04:30.950 --> 00:04:37.580

Add further functionalities to your Marchal that could be bundled components so not components created



63

00:04:37.580 --> 00:04:42.120

by you but Avro components that could all be directives.



64

00:04:42.140 --> 00:04:48.380

For example browser module adds this energy for directive you saw which is used to loop through content



65

00:04:48.500 --> 00:04:56.110

and output it providers is used to provide services something I'll come back later and bootstrap is



66

00:04:56.110 --> 00:05:03.790

a special property needed in that root module because it will inform angler that app component is actually



67

00:05:03.790 --> 00:05:04.940

the root component.



68

00:05:05.020 --> 00:05:12.850

The main component of our application and since it is defined here angular will render the content of



69

00:05:12.850 --> 00:05:20.080

the app component in the place of this app root tackier because it will automatically look for this



70

00:05:20.080 --> 00:05:25.960

app root tackier because if we have a look at the app component which lifts the app component TS file



71

00:05:26.290 --> 00:05:28.950

we see that as a Select are here.



72

00:05:29.170 --> 00:05:30.630

OK that was really fast.



73

00:05:30.730 --> 00:05:31.690

What is a selector.



74

00:05:31.690 --> 00:05:36.870

Now let's have a look at components selectors and the templates of components in the next lecture.



