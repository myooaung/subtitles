WEBVTT
1

00:00:02.850 --> 00:00:08.610

So are the last lectures we worked on authentication was quite a lot of work but now it's all running



2

00:00:08.610 --> 00:00:15.110

for you and your ex while we got the training section to finish all up on one am managed is through



3

00:00:15.130 --> 00:00:21.390

NZ x 2 and the little special thing here is that this is lazy loaded module.



4

00:00:21.390 --> 00:00:28.650

So let's start by adding a training dot reducer dot TS file and a training dot action start tears fall



5

00:00:29.100 --> 00:00:33.360

and ask before us start with the blueprint I already created.



6

00:00:33.390 --> 00:00:39.360

So I'll copy the content of the off reducer into the trading reducer and copy the continuity of actions



7

00:00:39.360 --> 00:00:42.860

fall into detraining actions fall here.



8

00:00:42.960 --> 00:00:49.150

So let's start at the training reducer the importance here are long will use different actions of course.



9

00:00:50.030 --> 00:00:54.210

We also should point at detraining dot actions follow.



10

00:00:54.440 --> 00:00:57.470

Now what about the state of our training states like here.



11

00:00:57.740 --> 00:01:05.700

Well here we'll actually have a whale able exercises which is of Taieb exercise rate.



12

00:01:05.730 --> 00:01:13.590

So make sure to import the exercise model in that reduce profile and we'll have finished exercises.



13

00:01:13.590 --> 00:01:17.490

These are two things we want to manage in our state.



14

00:01:17.490 --> 00:01:19.320

Now here's something special.



15

00:01:19.350 --> 00:01:26.120

Keep in mind that the training stage here the training module is actually loaded laser early.



16

00:01:26.250 --> 00:01:34.260

Therefore what we can't do is we can go to the apparate use for later and add training as a state to



17

00:01:34.440 --> 00:01:35.910

reduce risk map.



18

00:01:35.970 --> 00:01:41.280

This won't work because this would require us to import the training reducer and the training stage



19

00:01:41.340 --> 00:01:45.010

ahead of time before we actually load the module.



20

00:01:45.090 --> 00:01:49.530

Well technically that would even work but we would load a lot of code that we don't need and that we



21

00:01:49.530 --> 00:01:51.090

might never need.



22

00:01:51.090 --> 00:01:56.000

So we want to load this state label ily to just like the module.



23

00:01:56.280 --> 00:02:01.650

So therefore importing training into the app reducer isn't an option but we can kind of do it the other



24

00:02:01.650 --> 00:02:02.630

way around.



25

00:02:02.880 --> 00:02:12.060

We can say that our state here actually needs to extend our app state to be precise all defined two



26

00:02:12.090 --> 00:02:12.930

states.



27

00:02:12.930 --> 00:02:14.520

The first is our training state.



28

00:02:14.520 --> 00:02:17.310

This is the state for this module.



29

00:02:17.580 --> 00:02:24.030

And then I'll create a second interface which I'll just name state which will extend our route state



30

00:02:24.560 --> 00:02:32.060

or import everything as from Route from well from our app reducer.



31

00:02:32.370 --> 00:02:36.410

And this is what I'll extend I'll extend from root's state.



32

00:02:36.410 --> 00:02:42.240

This is the other way around our state doesn't know about training state but the training state knows



33

00:02:42.240 --> 00:02:43.350

about the app state.



34

00:02:43.530 --> 00:02:49.380

And whenever we load this module Laysan only it will merge behind the scenes.



35

00:02:49.540 --> 00:02:51.900

Our X will do that merge for us.



36

00:02:51.900 --> 00:02:55.710

We need to do a little instruction for it but I'll come back to this.



37

00:02:55.770 --> 00:03:01.120

So this is our now new app state after this module has been loaded lately.



38

00:03:01.230 --> 00:03:06.180

Since we extend the old app state we get the properties registered there already.



39

00:03:06.480 --> 00:03:15.720

And now our ad my training slice here and simply point to my training state here non-service training



40

00:03:15.720 --> 00:03:17.910

state like this.



41

00:03:17.910 --> 00:03:22.380

So this is now my new global state after this module has been lazy loaded.



42

00:03:22.980 --> 00:03:24.930

Initial State knowledge should change.



43

00:03:24.930 --> 00:03:27.130

It should be based on my training.



44

00:03:27.140 --> 00:03:34.750

State like this and that of course means we'll have available exercises initially an empty array let's



45

00:03:34.750 --> 00:03:37.660

say and we get finished exercises.



46

00:03:37.660 --> 00:03:39.820

Also an empty array.



47

00:03:39.820 --> 00:03:41.090

Now the reducer.



48

00:03:41.110 --> 00:03:44.890

Now here we don't have d all factions will have the training actions.



49

00:03:45.010 --> 00:03:52.120

So let's work on these actions then we'll head over to the training actions file and which kind of access



50

00:03:52.120 --> 00:03:53.380

do we have.



51

00:03:53.380 --> 00:03:59.000

Actually we have an action whenever we get a new training from the backend.



52

00:03:59.110 --> 00:04:09.410

So whenever we get new available trading's so as to set a way Libelle a way 11 or trainings here.



53

00:04:09.440 --> 00:04:12.140

That's my first action.



54

00:04:12.140 --> 00:04:17.810

The second is set finished trainings.



55

00:04:17.810 --> 00:04:19.610

Now we have a look at the training services.



56

00:04:19.610 --> 00:04:22.550

Actually not all in the training service.



57

00:04:22.550 --> 00:04:29.300

We not only manage available and finished trainings we also get the active training and EVA training



58

00:04:29.300 --> 00:04:30.790

is active at all.



59

00:04:30.830 --> 00:04:33.660

So we should also depict designed to reducer.



60

00:04:33.680 --> 00:04:38.030

So let's work on our training state a bit more the training state should also have something which is



61

00:04:38.030 --> 00:04:47.280

the active training of type exercise and therefore the initial state all should have an active training



62

00:04:47.550 --> 00:04:51.490

and let's say that's now we have no active training at the beginning.



63

00:04:51.510 --> 00:04:53.590

We therefore also need action for this.



64

00:04:53.610 --> 00:05:06.560

And this action will be a number Konst which is start training and one which will be stop training.



65

00:05:06.560 --> 00:05:09.760

You could also name it start active training or whatever you like.



66

00:05:09.800 --> 00:05:17.780

Now the actual identifiers will be training set a way allowable trainings.



67

00:05:17.870 --> 00:05:30.160

And here it's training sat finished trainings and of course the same for our new actions here we got



68

00:05:30.160 --> 00:05:32.340

a string from the training area.



69

00:05:35.400 --> 00:05:39.960

Which is called Start training or which has a value of start training.



70

00:05:40.040 --> 00:05:41.940

And here it's training



71

00:05:46.090 --> 00:05:48.030

stop trading.



72

00:05:48.400 --> 00:05:50.500

So let me save all of that.



73

00:05:50.500 --> 00:05:51.790

These are the four actions.



74

00:05:51.790 --> 00:05:53.890

Let's create the classes for them.



75

00:05:53.890 --> 00:05:58.360

So here we'll have set available trainings as a class name.



76

00:05:58.390 --> 00:06:02.380

Implement action and the type will be set of whaleboat trainings.



77

00:06:02.830 --> 00:06:04.300

And now there's something special.



78

00:06:04.360 --> 00:06:08.110

DS action classes don't just have a type.



79

00:06:08.140 --> 00:06:15.390

They also have a payload because the A-Whale will tradings we set have to be passed along with the action



80

00:06:15.400 --> 00:06:16.000

right.



81

00:06:16.030 --> 00:06:19.870

The same for finished trainings and training we start.



82

00:06:20.230 --> 00:06:26.800

So we do pass a payload by adding a constructor to this class and adding a public property that's important



83

00:06:26.890 --> 00:06:34.240

has to be public so that we can access it from within the store of public property which is called payload



84

00:06:35.050 --> 00:06:39.230

and that payload here can be an object can be a string a number.



85

00:06:39.310 --> 00:06:45.640

In this case it will be an array of exercises so we need to import the exercise model.



86

00:06:45.640 --> 00:06:51.330

Make sure to import exercise from the exercise model file and assign this as a type year.



87

00:06:51.340 --> 00:06:54.760

And keep in mind it's an array of exercises.



88

00:06:54.810 --> 00:07:01.170

This is the way or this is how we set up action that all can have a payload.



89

00:07:01.170 --> 00:07:05.540

Now set finished trainings works pretty much like that.



90

00:07:05.610 --> 00:07:09.150

The type will be set finished tradings.



91

00:07:09.390 --> 00:07:15.340

And then I also add the constructor here and here the payload is also an array of exercises.



92

00:07:15.360 --> 00:07:17.070

Now I need more classes.



93

00:07:17.070 --> 00:07:19.720

I also need a class to start a new training.



94

00:07:19.950 --> 00:07:27.660

So here the class will be called Start training and then all the implements action the type is start



95

00:07:27.900 --> 00:07:31.910

training and the payload is a single exercise.



96

00:07:32.040 --> 00:07:33.960

So no array.



97

00:07:34.200 --> 00:07:37.160

And then last but not least we got one more action.



98

00:07:37.310 --> 00:07:40.900

It's stop training like this.



99

00:07:40.980 --> 00:07:47.970

The type is stopped training and we don't have a payload here because we'll have the act of training



100

00:07:47.970 --> 00:07:52.150

stored in energy are X so there is no need to pass it with the action.



101

00:07:52.170 --> 00:07:54.110

It's already in the store.



102

00:07:54.150 --> 00:08:02.610

Now let's update our actions down there should be called training actions and it's ever a set of whaleboat



103

00:08:02.610 --> 00:08:13.030

trainings or it's set finished trainings or it's start training or it's stopped training.



104

00:08:13.080 --> 00:08:17.200

So all four classes is the actions follows.



105

00:08:17.200 --> 00:08:23.530

We have it now we can go back to the producer an import from that fall or import my training actions



106

00:08:24.070 --> 00:08:30.480

and then I'll also import my set a whaleboat trainings set finished trainings



107

00:08:34.370 --> 00:08:38.900

start training and stop training identifiers.



108

00:08:38.900 --> 00:08:41.530

With that we can work on the switch case statement.



109

00:08:41.600 --> 00:08:51.460

The action is of type training actions here and the action type could be set available trainings.



110

00:08:51.510 --> 00:08:54.290

It could also be set finished



111

00:08:57.410 --> 00:09:00.560

trainings or are quickly copy that



112

00:09:03.540 --> 00:09:06.040

or it is start or stop.



113

00:09:06.060 --> 00:09:09.600

So start training is another possible action.



114

00:09:09.600 --> 00:09:13.870

Stop training is the last one and the default case of course.



115

00:09:13.980 --> 00:09:16.950

Now I don't want to set is authenticated this is wrong.



116

00:09:17.040 --> 00:09:18.960

I'll have to adjust this.



117

00:09:18.990 --> 00:09:26.700

I want to set a whaleboat trainings here in set available trainings so here I'll set a way Elbel exercises



118

00:09:27.190 --> 00:09:27.660

to



119

00:09:30.170 --> 00:09:32.190

action payload actually.



120

00:09:32.240 --> 00:09:37.270

Because remember the payload or do you set a whaleboat tradings action.



121

00:09:37.280 --> 00:09:40.200

This one is an array of exercises.



122

00:09:40.460 --> 00:09:44.790

Just what I need to store in a way that exercises here.



123

00:09:44.990 --> 00:09:53.930

So for finished trainings all set finished exercises to action payload important.



124

00:09:54.010 --> 00:09:58.100

This store here has actually more than one property.



125

00:09:58.120 --> 00:10:05.260

So when we set a whaleboat exercises before doing that I'll actually first of all distribute the old



126

00:10:05.260 --> 00:10:06.690

state properties.



127

00:10:06.820 --> 00:10:07.550

Why.



128

00:10:07.720 --> 00:10:09.130

Because this will pull out.



129

00:10:09.130 --> 00:10:15.340

Finished an act of training and store them in this new object I'm creating and also pull out available



130

00:10:15.340 --> 00:10:20.980

exercises and it will then only overwrite the old available exercises with the new ones.



131

00:10:21.340 --> 00:10:28.120

If I wouldn't do this then my new state after it is action would be an object with just available exercises



132

00:10:28.330 --> 00:10:32.890

and my old finished exercise an act of training would be lost.



133

00:10:32.890 --> 00:10:35.850

This is why we should always update state like this.



134

00:10:35.980 --> 00:10:41.600

Pull out the old properties and then override what you have to change for start training.



135

00:10:41.620 --> 00:10:49.440

I also get my old properties and then I said active training to action payload which in this case is



136

00:10:49.440 --> 00:10:53.760

a single exercise and for stop training.



137

00:10:53.760 --> 00:11:02.430

I'll also get all my old properties and said act of training to null again simply.



138

00:11:02.670 --> 00:11:09.750

Now with that we get all the actions in place and all the action is handled in the reducer here.



139

00:11:09.820 --> 00:11:13.420

I also want to create some helper functions.



140

00:11:13.530 --> 00:11:24.180

The first function is get a way lable trainings all get my state which is of type state and I want to



141

00:11:24.180 --> 00:11:27.730

return State to me which is of type training state



142

00:11:32.300 --> 00:11:36.480

and I want to return state a whaleboat exercises.



143

00:11:36.790 --> 00:11:41.620

Let's maybe name this get a whaleboat exercises to.



144

00:11:41.670 --> 00:11:44.060

You could rename the actions to if you wanted to.



145

00:11:44.110 --> 00:11:53.940

Now I'll copy that and all the Create get finished exercises to get my well finished exercises out of



146

00:11:53.940 --> 00:11:55.880

the state and I'll add.



147

00:11:55.890 --> 00:11:58.890

Get active training here too.



148

00:11:58.920 --> 00:12:05.880

You guessed it get my active training with that I got my reducer finished none the next lecture will



149

00:12:05.890 --> 00:12:07.580

connect connected to our store.



150

00:12:07.620 --> 00:12:12.270

I'll explain how that works for a lazy loaded module and how we can start using it.



