1
00:00:02,480 --> 00:00:03,580
The Last Lecture.

2
00:00:03,710 --> 00:00:07,180
We created our off routing module.

3
00:00:07,220 --> 00:00:11,960
Now I want to load my training routes in their own module.

4
00:00:11,960 --> 00:00:17,540
However for training I want to do this laser early which means only when we really need it.

5
00:00:17,620 --> 00:00:20,300
Do you off routes should be available right away.

6
00:00:20,300 --> 00:00:26,840
Because even though we check for your syndications state at startup and redirect the user if he is authenticated

7
00:00:27,560 --> 00:00:33,200
the first page we actually load is a log in page because it's very likely that we need it.

8
00:00:33,440 --> 00:00:40,850
The training component the training pages are not as likely to be needed because if the user is not

9
00:00:40,850 --> 00:00:48,360
locked in we don't need to load this in advance so therefore we can take this route and also put it

10
00:00:48,360 --> 00:00:50,770
into a training route module.

11
00:00:50,830 --> 00:00:55,560
However one that will be loaded lousily First of all that's at the model.

12
00:00:55,620 --> 00:00:58,470
I'll name it training routing that module though.

13
00:00:58,510 --> 00:01:00,050
Yes that's the full name.

14
00:01:00,300 --> 00:01:05,000
And there will export a class training routing module.

15
00:01:05,280 --> 00:01:12,180
And this is a normal angular module which is decorated with Engy modules that we need to import from

16
00:01:12,450 --> 00:01:13,560
a single or court.

17
00:01:13,800 --> 00:01:19,330
So import ngi module from at angular coord.

18
00:01:19,470 --> 00:01:27,900
Now we set up our route so I create this routes constant which is of type routes which we import from

19
00:01:27,900 --> 00:01:31,580
the angular router package.

20
00:01:31,700 --> 00:01:33,970
And here I add this signaler route.

21
00:01:33,980 --> 00:01:44,880
I just cut now in DNG module I'll add my imports aere and point to my router module here.

22
00:01:45,140 --> 00:01:48,910
This all needs to be imported from the router package.

23
00:01:48,980 --> 00:01:56,150
So Afterall it's all implored router module and here we all call for child and pass our routes or our

24
00:01:56,150 --> 00:01:56,710
single route.

25
00:01:56,710 --> 00:02:00,310
In this case I'll also export this.

26
00:02:00,350 --> 00:02:02,330
So export router module.

27
00:02:02,410 --> 00:02:04,030
Doesn't change.

28
00:02:04,130 --> 00:02:08,390
Now I also need to import the training component here because we use it in this fall.

29
00:02:08,420 --> 00:02:13,290
So training component from and then it's this training component here.

30
00:02:14,390 --> 00:02:16,470
And we're using a service here.

31
00:02:16,580 --> 00:02:26,310
So I need to import data to import off guard from off guard.

32
00:02:26,360 --> 00:02:33,110
Now we could also add to provider 40 off guard to dis training routing module.

33
00:02:33,320 --> 00:02:36,110
I'm talking about this provider.

34
00:02:36,420 --> 00:02:39,760
However we can also change our setup.

35
00:02:39,800 --> 00:02:45,530
First of all let me remove the training component in the app routing module.

36
00:02:45,530 --> 00:02:51,620
I will now leave off guard here in the app routing module because I will soon change this so that we

37
00:02:51,620 --> 00:02:57,310
needed a disk file and that providing it here makes more sense than providing it in the training module.

38
00:02:57,410 --> 00:03:00,790
And since we provided them at low level it will be a singleton.

39
00:03:00,860 --> 00:03:06,200
So in a training module it will also be available in a training routing module I mean.

40
00:03:06,500 --> 00:03:13,850
So with that we are loading our trading routes eagerly at the moment to get them we just have to make

41
00:03:13,850 --> 00:03:20,240
sure that in the training module we import the training routing module so that we added to the imports

42
00:03:20,240 --> 00:03:25,550
array and add an import statement pointing to the training routing module file.

43
00:03:25,820 --> 00:03:29,780
With that it's loaded eagerly and we can go back to the application.

44
00:03:30,050 --> 00:03:34,150
And as you see log in and see our training routes.

45
00:03:34,460 --> 00:03:38,880
Now let's implement lazy loading to do that.

46
00:03:39,140 --> 00:03:42,960
I will actually change something in my app module.

47
00:03:43,010 --> 00:03:47,790
I will no longer add training module to imports.

48
00:03:47,810 --> 00:03:55,070
I will remove it from the imports array and it will remove the import of that file appear instead I

49
00:03:55,070 --> 00:04:01,430
will use a number pattern supported by the build workflow we're using here or in the end by angular

50
00:04:02,270 --> 00:04:10,190
where in the app routing module I will register a second route where tipoff is training as we had it

51
00:04:10,190 --> 00:04:17,060
before but where I don't assign a component but instead said load children this is the key word for

52
00:04:17,060 --> 00:04:18,460
lazy loading.

53
00:04:18,560 --> 00:04:24,650
And here we pass a string because if we would pass a type and add an import we would already include

54
00:04:24,650 --> 00:04:26,030
it in the bundle at this point.

55
00:04:26,090 --> 00:04:31,010
So it has to be a string so that it can be analyzed at runtime.

56
00:04:31,010 --> 00:04:36,080
Here we now have to point to the file to the module we plan on importing.

57
00:04:36,290 --> 00:04:42,320
When we reached that route and that will be in the training module excuse me in the training folder

58
00:04:42,470 --> 00:04:49,220
the training module docked TS here and in there we want to access the training module clause which we

59
00:04:49,220 --> 00:04:52,640
indicate by adding a hash tag and then training module.

60
00:04:52,730 --> 00:04:59,100
This is required because theoretically your class name could differ from the file name.

61
00:04:59,150 --> 00:05:05,810
So now we're telling angler if we're targeting slash training you should actually load the training

62
00:05:05,810 --> 00:05:12,170
module related code and analyze whatever is in there and in there we get the training routing module

63
00:05:12,170 --> 00:05:13,350
with for child.

64
00:05:13,400 --> 00:05:20,120
So we will still reach this route however important here we now have to remove training and have an

65
00:05:20,120 --> 00:05:27,010
empty path because this will be appended to this training path we have in the app routing module anyways.

66
00:05:28,010 --> 00:05:35,930
So with that we got our lazy loading set up and this will actually lazy load not just US routes file

67
00:05:36,230 --> 00:05:39,370
but any training component related things.

68
00:05:39,410 --> 00:05:44,920
So anything we import here in the training module with that if we reload.

69
00:05:44,940 --> 00:05:52,510
Yep we get this error here that the training service is missing the angle of firestorm.

70
00:05:52,570 --> 00:05:59,400
This makes sense and the training service we are injecting angle of fire story here and angle of fire

71
00:05:59,400 --> 00:06:02,130
firestorm is provided in the training module.

72
00:06:02,150 --> 00:06:08,690
The problem just is the training module is only loaded when you visit slash training.

73
00:06:08,690 --> 00:06:12,660
We provide the training service and the air marshal though.

74
00:06:12,710 --> 00:06:17,500
So at an earlier point of time that is why its missing the angle of Firestorm Marshall.

75
00:06:17,810 --> 00:06:23,760
Now we could provide the training service and the training module but will face an issue there.

76
00:06:23,840 --> 00:06:26,200
We have a look at our office service.

77
00:06:26,390 --> 00:06:28,820
We do inject the training service there.

78
00:06:28,880 --> 00:06:35,090
We do inject to training service because we call cancel subscriptions so the service depends on the

79
00:06:35,090 --> 00:06:42,290
training service which depends on the angle of fire storm service or module and the service has to be

80
00:06:42,290 --> 00:06:48,230
provided in the launch tool because we need the tools to service gives us right at the point of time

81
00:06:48,230 --> 00:06:49,720
the app starts.

82
00:06:49,730 --> 00:06:58,540
So the solution is to re-aired angular Firestar module to our app module so added to the imports array

83
00:06:58,550 --> 00:07:04,790
of app module and make sure to also add an import statement at the top of the file where you import

84
00:07:04,850 --> 00:07:09,940
angle of Firestar module from angle of fire to slash firestorm.

85
00:07:10,140 --> 00:07:15,260
With that we can go to the training module and removed the angle of Firestar module from the imports

86
00:07:15,260 --> 00:07:18,760
erate there and remove the import statement here.

87
00:07:18,800 --> 00:07:23,280
Now with that if we save this the arrow we saw a second ago should be gone.

88
00:07:24,130 --> 00:07:30,220
Now we get a new era though this era is that it confines this module training module.

89
00:07:30,220 --> 00:07:35,840
The reason for this should be that in the app routing module you emit omit here.

90
00:07:35,860 --> 00:07:38,360
This does fall ending the ship without dots.

91
00:07:38,400 --> 00:07:41,470
TS this path you're in the app routing module.

92
00:07:41,650 --> 00:07:50,850
If we fix that leaded recompile and reload the application we should be able to successfully log in

93
00:07:51,720 --> 00:07:54,390
and go to our training components.

94
00:07:54,390 --> 00:08:05,540
If you inspect the network tab you will see that if we log out and reload and we now log in

95
00:08:08,400 --> 00:08:10,560
a bunch of new things are loaded.

96
00:08:10,710 --> 00:08:13,510
Amongst them the training module chunk.

97
00:08:13,620 --> 00:08:16,630
And this is the lazy loading in action.

98
00:08:16,650 --> 00:08:21,530
So with that we're loading this lazily which means only when we really need it.

99
00:08:21,600 --> 00:08:25,290
Which of course decreases the size of our initial bundle.

100
00:08:25,290 --> 00:08:31,170
So what we download up front this is how we implement lazy loading and how we improve the performance

101
00:08:31,260 --> 00:08:33,090
of our application.

102
00:08:33,090 --> 00:08:38,280
Now I want to fine tune this by now also changing the way we use our off guard.

