WEBVTT
1

00:00:03.040 --> 00:00:07.110

The application is in a good state and to be honest we could deploy it as it is.



2

00:00:07.330 --> 00:00:09.730

Everything that's coming now is just bonus.



3

00:00:09.910 --> 00:00:18.170

But we can add Engy are X which is angler's read X based state management solution to this app.



4

00:00:18.280 --> 00:00:25.580

I would say that NDR X is actually a bit overkill for this type of app for a not super big app.



5

00:00:25.780 --> 00:00:31.110

But of course it still makes sense to learn it so that you can potentially use it in bigger apps too.



6

00:00:31.120 --> 00:00:36.560

So what is your X though what is state what's application state.



7

00:00:36.910 --> 00:00:42.040

Let's consider we have these components which are kind of the components we have in our app at least



8

00:00:42.130 --> 00:00:47.010

we have DS We have some of these too but we do have DS and of course we do interact.



9

00:00:47.020 --> 00:00:50.530

We fetch exercise or we store exercises.



10

00:00:50.590 --> 00:00:53.560

This is our so-called application state.



11

00:00:53.560 --> 00:00:59.590

The exercise we fetched which we have in memory which we stored in javascript they will be lost whenever



12

00:00:59.590 --> 00:01:01.940

the application refreshes.



13

00:01:02.020 --> 00:01:04.850

We also get a Bakan firebase in our case.



14

00:01:05.050 --> 00:01:06.930

We communicate with that backend.



15

00:01:06.970 --> 00:01:14.050

In our case for angle of fire to store and fetch exercises does this persistent state which is not lost



16

00:01:14.050 --> 00:01:14.790

when we reload.



17

00:01:14.800 --> 00:01:18.210

Yep which is why we started on a server.



18

00:01:18.230 --> 00:01:23.090

Now the issue we have with stators managing it is hard.



19

00:01:23.180 --> 00:01:27.050

This is actually a very simplified graph of our app.



20

00:01:27.050 --> 00:01:33.020

A lot is missing on this picture and we see we get complex and directions we're actually even injecting



21

00:01:33.020 --> 00:01:35.960

the training service into the officer is in our case.



22

00:01:35.960 --> 00:01:40.150

So we're doing a lot of things here we have a lot of connections.



23

00:01:40.160 --> 00:01:47.870

This is just an example it's not a precise picture of our app and in our app this is all fine in bigger



24

00:01:47.870 --> 00:01:48.560

apps.



25

00:01:48.650 --> 00:01:55.000

You can end up with so many connections that you want to have a central state management system.



26

00:01:55.010 --> 00:02:02.360

Now the first step to getting a predictable and reliable state management is to use our ex-chief Yes



27

00:02:02.420 --> 00:02:03.770

which we already do.



28

00:02:03.770 --> 00:02:06.550

I will say that we already do use it.



29

00:02:06.560 --> 00:02:13.320

There we have for example some user event and UI or in the app like a click on a button or actually



30

00:02:13.420 --> 00:02:17.650

the submission of the log in form does gives us a state changing event.



31

00:02:17.660 --> 00:02:23.690

We want to go from unauthenticated to offend Decatur let's say and with our Express we can use the power



32

00:02:23.750 --> 00:02:29.080

of observables or subjects to be precise to emit an event.



33

00:02:29.090 --> 00:02:35.700

Maybe use operators if we want and listen to that somewhere in our app and then update DUI.



34

00:02:36.020 --> 00:02:41.290

This again is what we already do when we click submit on the log in Forum.



35

00:02:41.420 --> 00:02:44.780

We set the loading state we emit an event.



36

00:02:44.790 --> 00:02:48.950

Then we started loading something and we update you on it.



37

00:02:49.040 --> 00:02:55.960

After listening to that he went to show a Spener So were using this pattern and its a good pattern.



38

00:02:56.000 --> 00:02:59.270

This is why I taught it you should use that.



39

00:02:59.280 --> 00:03:03.130

However this pattern also can have issues.



40

00:03:03.230 --> 00:03:05.490

The state can be updated from anywhere.



41

00:03:05.510 --> 00:03:07.000

Thats one problem.



42

00:03:07.010 --> 00:03:11.990

So in this pattern we can of course trigger our listeners from everywhere.



43

00:03:11.990 --> 00:03:17.450

And we implemented this pattern but of course were not forced to follow it.



44

00:03:18.300 --> 00:03:20.580

The state is maybe mutable.



45

00:03:20.670 --> 00:03:27.930

We of course did do our best to prevent this but still we might be able to sneak in some errors at some



46

00:03:27.930 --> 00:03:32.370

points and handling side effects is unclear.



47

00:03:32.370 --> 00:03:38.970

Where do we send these HTP requests where do we use Angelfire do we do that in a service.



48

00:03:38.970 --> 00:03:41.530

Do we do that directly in a component.



49

00:03:41.820 --> 00:03:44.580

So these are all possible issues.



50

00:03:44.580 --> 00:03:48.380

Not impossible to overcome and maybe not issues in your app.



51

00:03:48.480 --> 00:03:56.760

And as I said an hour at the set up is actually quite nice but you can opt into a more complex and elaborate



52

00:03:56.880 --> 00:03:59.680

pattern to work around these issues.



53

00:04:00.030 --> 00:04:01.760

And that would be Rydex.



