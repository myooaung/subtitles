1
00:00:02,180 --> 00:00:04,430
Como funciona a autenticao.

2
00:00:04,850 --> 00:00:05,940
Ns temos um servidor.

3
00:00:05,960 --> 00:00:10,460
Ento firebase no nosso caso, o backend e ns comeamos nosso aplicativo de pescador.

4
00:00:10,460 --> 00:00:12,460
Agora ns autenticamos e fazemos logging.

5
00:00:12,500 --> 00:00:17,570
Enviamos as credenciais para o servidor e as credenciais so validadas e recebemos uma

6
00:00:17,570 --> 00:00:24,320
resposta de que estamos agora indicados no aplicativo tradicional da web, onde temos vrias pginas que usaramos uma

7
00:00:24,320 --> 00:00:25,300
sesso para armazen-la.

8
00:00:25,340 --> 00:00:29,400
A sesso seria armazenada no servidor e no cliente receberamos um cookie.

9
00:00:29,640 --> 00:00:34,120
Agora, se os aplicativos de pgina nica nossos back ends so stateless.

10
00:00:34,220 --> 00:00:35,660
 uma API tranquila.

11
00:00:35,750 --> 00:00:40,560
O Firebase, no final, no parece um, mas  como uma API tranquila.

12
00:00:40,670 --> 00:00:46,400
Ele no se importa com o nosso nico aplicativo O firebase  um servio que no armazena sesses

13
00:00:46,400 --> 00:00:52,790
e no  apenas o Firebase qualquer back e voc se comunica com um ngulo ou app  stateless porque

14
00:00:52,790 --> 00:00:54,500
voc sempre est nos bastidores.

15
00:00:54,500 --> 00:01:02,320
O Ajax HTP solicita que voc tenha apenas uma pgina e no solicite novas pginas.

16
00:01:02,720 --> 00:01:05,400
Portanto, a abordagem baseada em sesses no funciona.

17
00:01:05,420 --> 00:01:09,730
Usamos um token em vez do token weap Jason se voc quiser saber os detalhes.

18
00:01:09,980 --> 00:01:18,490
Existe basicamente uma longa string que codifica no interrompe apenas codifica alguns dados sobre nossos dados

19
00:01:18,500 --> 00:01:22,900
de status de indicao que no podem ser manipulados.

20
00:01:23,000 --> 00:01:30,100
Porque se ns, ento, um token seria detectado como manipulado no servidor e seria invlido.

21
00:01:30,290 --> 00:01:31,750
Mas mais sobre isso depois.

22
00:01:31,910 --> 00:01:34,100
Ento ns pegamos esse token do servidor.

23
00:01:34,220 --> 00:01:37,320
Ento, devemos armazenar esse token no front end.

24
00:01:37,400 --> 00:01:42,170
Portanto, no navegador, um local de armazenamento tpico  o armazenamento local.

25
00:01:42,170 --> 00:01:47,150
Agora, sempre que quisermos acessar algum recurso protegido no servidor.

26
00:01:47,210 --> 00:01:53,420
Ento, digamos que nosso banco de dados, que agora est aberto a todos, mas vamos mudar isso sempre

27
00:01:53,420 --> 00:01:54,740
que quisermos acessar isso.

28
00:01:54,800 --> 00:01:57,300
Vamos anexar ao token para o pedido.

29
00:01:57,320 --> 00:02:03,590
Agora, como eu disse, o token  estruturado de forma que o servidor possa validar se ainda  um

30
00:02:03,620 --> 00:02:04,340
token vlido.

31
00:02:04,340 --> 00:02:08,950
Ento, um que foi enviado pelo servidor ou manipulado em anexo.

32
00:02:09,050 --> 00:02:11,480
Tem como uma impresso digital nica que voc poderia dizer.

33
00:02:11,810 --> 00:02:17,870
Portanto, se ainda for o token original e ainda estivermos bloqueados, o token ainda ser vlido, porque

34
00:02:17,870 --> 00:02:22,020
o token tambm expirar aps algum tempo e, em seguida, teremos acesso.

35
00:02:22,160 --> 00:02:23,770
Caso contrrio, no o fazemos.

36
00:02:23,960 --> 00:02:29,510
 assim que a indicao funciona nos aplicativos de pgina nica que esse token  uma parte

37
00:02:29,510 --> 00:02:35,360
crucial e o legal sobre o firebase e o ngulo de fogo  que j recebemos esse token

38
00:02:35,360 --> 00:02:41,810
e tambm podemos fazer todo o gerenciamento desse token por meio do firebase No  necessrio armazen-lo e extra-lo

39
00:02:41,810 --> 00:02:47,840
manualmente para que no tenhamos que nos preocupar com sua expirao, pois o Firebase nos bastidores sempre nos

40
00:02:47,840 --> 00:02:50,890
dar um novo token a cada solicitao que enviarmos.

41
00:02:50,990 --> 00:02:52,770
Ento, nunca precisamos nos preocupar com isso.

42
00:02:52,850 --> 00:02:55,610
E se ns fizermos logout, destruiremos o token para ns.

43
00:02:55,640 --> 00:02:57,260
Ento tudo isso mudou para ns.

44
00:02:57,320 --> 00:03:03,380
Mas  importante entender isso e  por isso que um nico  autenticado Boullion no  suficiente.

45
00:03:03,380 --> 00:03:05,190
No podemos envi-lo para o servidor.

46
00:03:05,300 --> 00:03:09,950
Felizmente, o servidor quer mais do que apenas dizer que somos justificados.

47
00:03:10,400 --> 00:03:13,910
Portanto, nossa abordagem atual de indicao no  ideal.

48
00:03:14,030 --> 00:03:17,950
Ns no devemos armazenar nosso status de autenticao em apenas um booleano.

49
00:03:18,110 --> 00:03:24,900
Devemos trabalhar com esse token e tambm devemos proteger nosso servidor de nosso banco de dados para ver

50
00:03:24,910 --> 00:03:31,350
se temos uma autenticao realmente funcional porque indicar em um ngulo ou aplicativo  fcil,  apenas javascript.

51
00:03:31,370 --> 00:03:33,550
Voc pode at manipular isso se quiser.

52
00:03:33,680 --> 00:03:40,100
So os recursos do lado do servidor que precisam ser protegidos porque ousam ter seus dados sensatos se voc manipular

53
00:03:40,100 --> 00:03:46,700
o aplicativo dangler do cliente que s manipula seu prprio aplicativo, o que voc v e no o que est

54
00:03:46,700 --> 00:03:47,680
armazenado no servidor.

55
00:03:47,990 --> 00:03:49,050
Ento esse  o prximo passo.

56
00:03:49,070 --> 00:03:52,790
Vamos proteger nosso banco de dados do Firebase no servidor.

57
00:03:52,940 --> 00:03:59,180
E vamos, ento, usar o ngulo de fogo e os recursos de autenticao que ele nos d para usar o token de

58
00:03:59,180 --> 00:04:00,650
dados e gerenciar tudo isso.

