1
00:00:01,990 --> 00:00:05,460
We want to control the layout of our singular applications.

2
00:00:05,740 --> 00:00:11,830
And a great is actually not part of the angular material package.

3
00:00:11,830 --> 00:00:16,490
There is another package though it's called angular flex layout.

4
00:00:16,540 --> 00:00:21,220
If you google for angular flex dash layout you should find to get a page here.

5
00:00:21,670 --> 00:00:29,160
Now there you will also find a couple of quick links like tear to the API documentation.

6
00:00:29,240 --> 00:00:33,130
You click on that documentation is a bit confusing to be honest.

7
00:00:33,340 --> 00:00:35,940
But we will go through it together.

8
00:00:35,950 --> 00:00:42,820
The important part here is flex layout is a package that uses flex blocks C S S flex blocks behind the

9
00:00:42,820 --> 00:00:51,430
scenes to allow you to position your components and elements of a couple of nice directives these directives

10
00:00:51,430 --> 00:00:53,020
can be found under documentation.

11
00:00:53,020 --> 00:00:56,840
You're on the right by clicking on static and responsive API.

12
00:00:56,920 --> 00:00:59,380
Let's start with the static one.

13
00:00:59,380 --> 00:01:03,430
There we get an overview over the core directives F X.

14
00:01:03,430 --> 00:01:10,520
Lay out can be added to any container element to control how the child elements should be positioned.

15
00:01:10,600 --> 00:01:15,560
They should be positioned in a row so next to each other or a column below each other.

16
00:01:15,670 --> 00:01:19,860
You can also reverse that you can order to find the alignment.

17
00:01:19,900 --> 00:01:23,150
So should it be centered or not.

18
00:01:23,290 --> 00:01:28,450
And we get this strain main and cross access part here.

19
00:01:28,480 --> 00:01:32,910
Now the reason for it is that as I said use flex blocks behind the scenes.

20
00:01:33,040 --> 00:01:38,550
So we will all have a short look at flex box in a second before we do so.

21
00:01:38,610 --> 00:01:45,160
Let me talk about the child components though because if X layout was for wrapping element the child

22
00:01:45,190 --> 00:01:53,020
component gets eFax flex to simply take all available space and evenly distributed across all child

23
00:01:53,050 --> 00:01:59,440
elements and you can also change this and for example give one a higher percentage and Yabrud and so

24
00:01:59,440 --> 00:01:59,880
on.

25
00:02:00,130 --> 00:02:01,970
But we'll do this in a second.

26
00:02:02,170 --> 00:02:04,930
Let's talk about flex box first.

27
00:02:05,230 --> 00:02:14,570
To do this I will quickly add a new code here and use Section 2 hour sign up page and there.

28
00:02:14,590 --> 00:02:22,310
I will just add a couple of diffs So here this def will receive an ID of Child 1.

29
00:02:22,490 --> 00:02:29,120
The next one simply a duplicate gets Child 2 and the third one gets child free and the second year will

30
00:02:29,120 --> 00:02:30,990
get the ID container.

31
00:02:30,990 --> 00:02:35,330
This is only some temporary addition to showcase whole flex box works.

32
00:02:35,420 --> 00:02:38,460
And of course it will be a short introduction if you want to learn more.

33
00:02:38,510 --> 00:02:42,000
You can find useful links at the end of this module.

34
00:02:42,440 --> 00:02:43,940
So this is our container.

35
00:02:43,970 --> 00:02:45,340
These are our charts.

36
00:02:45,500 --> 00:02:51,820
Let's go to these CSSA fall of this component and add some styling for the container.

37
00:02:51,950 --> 00:02:55,140
So for the element of the container ID the section here.

38
00:02:55,370 --> 00:03:02,820
And for the different Charles lets start with the container there we can turn this to use flex blocks

39
00:03:02,820 --> 00:03:12,510
by adding display flex if we do this we won't see much though because I need to give these tiles some

40
00:03:12,510 --> 00:03:17,940
styling so quickly all add a class to each of them and somebody named this child.

41
00:03:17,940 --> 00:03:19,660
Now NDC is as follows.

42
00:03:19,660 --> 00:03:28,380
I'll add the child class here and set the width of 200 pixels and a height of 200 pixels and a background

43
00:03:28,410 --> 00:03:31,140
color of red.

44
00:03:31,550 --> 00:03:36,560
If we go back to our running application everything's red.

45
00:03:36,750 --> 00:03:38,240
Now to see a difference.

46
00:03:38,460 --> 00:03:45,450
I will actually not assign a background color here but use my individual child IDs to give a child one

47
00:03:45,540 --> 00:03:47,190
a background color.

48
00:03:49,030 --> 00:03:56,370
Of red child to a background color of green

49
00:03:58,870 --> 00:04:07,530
child reep a background color of blue like this

50
00:04:10,320 --> 00:04:11,840
now we can see a difference.

51
00:04:11,880 --> 00:04:17,340
And one thing we can see is that if I increase the width of this it will only increase to a certain

52
00:04:17,340 --> 00:04:25,910
point until each box has its 200 pixels of width if I decrease the window all shrink equally.

53
00:04:25,950 --> 00:04:31,500
So they don't stick to their 200 pixels with date decrease and size.

54
00:04:31,500 --> 00:04:34,380
And that's one part of what flex box does.

55
00:04:35,740 --> 00:04:43,150
If I give the container a whiff of let's say 100 percent and I remove the with on a child and instead

56
00:04:43,660 --> 00:04:54,330
give each child a special property flex where I just said one is a value you'll see that now they all

57
00:04:54,380 --> 00:05:01,670
increase in width infinitely because flex 1 basically tells them to take all available space and distribute

58
00:05:01,670 --> 00:05:02,990
it equally.

59
00:05:02,990 --> 00:05:07,360
If I gave for one child let's say Child 1 a flex value of two.

60
00:05:07,430 --> 00:05:10,250
It will take twice as much space as the average ones.

61
00:05:10,520 --> 00:05:11,260
You can see this.

62
00:05:11,300 --> 00:05:17,030
It's doubled the size of the average flex elements and just ratio stays constant even as I increase

63
00:05:17,030 --> 00:05:19,410
and decrease the with notices.

64
00:05:19,430 --> 00:05:20,860
Flex box here.

65
00:05:21,170 --> 00:05:28,610
We can also go back to the container and add flex dash direction a special property we can use if we

66
00:05:28,610 --> 00:05:32,120
added display flex and set this to column.

67
00:05:32,130 --> 00:05:39,860
The default was wrote Cullom now changed the way DS elements in a container are positioned now they're

68
00:05:39,860 --> 00:05:43,340
position beneath each other instead of next to each other.

69
00:05:43,370 --> 00:05:46,240
So now we get the same behavior as before.

70
00:05:46,580 --> 00:05:49,490
But the direction changed.

71
00:05:49,490 --> 00:05:55,460
And now this is important for the cross and the main axis because we can also now define how it should

72
00:05:55,460 --> 00:05:56,940
be positioned.

73
00:05:56,990 --> 00:06:04,910
If I remove these flex elements here for now and I reintroduce my with we can see that now they're all

74
00:06:04,910 --> 00:06:10,160
stuck on the left because they get the width of 200 pixels and the direction is color.

75
00:06:10,370 --> 00:06:17,420
So from top to bottom this is the so-called main axis the main axis always follows the direction we

76
00:06:17,420 --> 00:06:18,360
defined here.

77
00:06:18,410 --> 00:06:24,980
So either from top to bottom of the column case or from left to right in the row case or actually from

78
00:06:24,980 --> 00:06:28,750
bottom to top in the column or the worst case and the same for rope.

79
00:06:28,850 --> 00:06:30,450
But let's stick to row and column.

80
00:06:30,620 --> 00:06:39,230
So here the main axis goes from top to bottom if we now add a number property to the container not to

81
00:06:39,230 --> 00:06:43,220
the child but to the container which is called justified content.

82
00:06:43,400 --> 00:06:45,570
We can set this to center.

83
00:06:45,860 --> 00:06:48,800
Now if you have a look at this.

84
00:06:48,860 --> 00:06:56,270
Nothing changed because this defines how d elements are positioned along the main axis so from top to

85
00:06:56,270 --> 00:06:57,690
bottom they're centered.

86
00:06:57,920 --> 00:07:03,820
But since our height here automatically takes the height of all summed up elements.

87
00:07:03,890 --> 00:07:05,380
We don't see that effect.

88
00:07:05,420 --> 00:07:06,740
We can see it.

89
00:07:06,740 --> 00:07:11,270
If we assign a height that's greater than the height of the recombined elements.

90
00:07:11,270 --> 00:07:15,800
So for example 700 pixels to see the wrapping container.

91
00:07:15,800 --> 00:07:21,170
I can also get this a border if one picks a solid and black.

92
00:07:21,170 --> 00:07:29,540
Now with that set up we see the container this black border part and we see that the elements are centered

93
00:07:29,540 --> 00:07:36,500
in it because of justify content's Center which Center them along the main axis which goes from top

94
00:07:36,680 --> 00:07:37,540
to bottom.

95
00:07:37,550 --> 00:07:40,340
That's why they're right in the middle of it.

96
00:07:40,380 --> 00:07:46,670
You also want to send them here horizontally since our flex directions Cullom we have to center them

97
00:07:46,670 --> 00:07:50,250
on the so-called cross axis to cross axis as always.

98
00:07:50,250 --> 00:07:55,760
Well the opposite of the main axis the main axis is defined by the flex direction the crust Texas in

99
00:07:55,760 --> 00:08:02,540
this case for flex direction Cullom would be from left to right and you can use a line item sphere to

100
00:08:02,540 --> 00:08:05,650
define how to position them along the cross axis.

101
00:08:05,810 --> 00:08:09,110
For example flex and what pushed him all the way to the end.

102
00:08:09,170 --> 00:08:09,830
So you're right.

103
00:08:09,830 --> 00:08:14,890
In this case and of course you can also use Center to position them there.

104
00:08:17,990 --> 00:08:25,490
If you now switch back to flex direction row you will see that they are now positioned from left to

105
00:08:25,490 --> 00:08:31,820
right and they're still centered but now actually main and cross axis switched the main axis now goes

106
00:08:31,820 --> 00:08:33,020
from left to right.

107
00:08:33,110 --> 00:08:35,690
The cross exits from top to bottom.

108
00:08:35,900 --> 00:08:41,080
The main axis is positioned with justified content to cross axis with a line items.

109
00:08:41,420 --> 00:08:46,160
So let's go to the main axis and change this to flex start.

110
00:08:46,640 --> 00:08:51,100
And before we change flex direction this would have pushed them all the way up.

111
00:08:51,260 --> 00:08:54,930
But now since we go from left to right it pushes them to the right.

112
00:08:55,010 --> 00:09:00,290
And this is how you have to think about flex blocks that can be confusing at first but it actually really

113
00:09:00,290 --> 00:09:06,710
makes sense you turn a container into a flex container with this plate flex you to find a direction

114
00:09:06,710 --> 00:09:12,950
with flex direction and you can position elements along a main axis and the cross axis and for each

115
00:09:12,950 --> 00:09:19,400
child you can find a width and height or give it flex 1 to take all the way of space or even change

116
00:09:19,400 --> 00:09:20,590
to ratio here.

117
00:09:20,690 --> 00:09:24,650
Now there's more to flex box but for introduction this is all you need.

118
00:09:24,860 --> 00:09:29,510
If you want to learn more check out the last lecture in this module you will find some useful links

119
00:09:29,510 --> 00:09:31,030
there.

120
00:09:31,040 --> 00:09:37,220
Now with that let's get rid of all this CSSA code here and let's start working on this and the next

121
00:09:37,220 --> 00:09:41,570
component and see how this angular flex layout package helps us.

