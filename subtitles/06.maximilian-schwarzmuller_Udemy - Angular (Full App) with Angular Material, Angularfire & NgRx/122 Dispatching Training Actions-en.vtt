WEBVTT
1

00:00:02.220 --> 00:00:05.020

So let's use our training state.



2

00:00:05.020 --> 00:00:07.360

We worked so hard on.



3

00:00:07.450 --> 00:00:08.590

Now where do we use it.



4

00:00:08.590 --> 00:00:10.300

How do we use it.



5

00:00:10.330 --> 00:00:13.350

We get our training service in there.



6

00:00:13.510 --> 00:00:21.100

We got our fetch a whale will exercise this method which in the end Wolf does just deaded fetches available



7

00:00:21.100 --> 00:00:26.980

exercises and we want to dispatch something some action whenever we got a new exercise.



8

00:00:27.340 --> 00:00:35.140

So if we get a new exercise then we previously set a whaleboat exercise two exercises.



9

00:00:35.440 --> 00:00:38.320

And here we set exercise changed.



10

00:00:38.320 --> 00:00:41.000

We called the next method on that subject.



11

00:00:41.110 --> 00:00:45.230

Now instead I want to use to store and dispatch something.



12

00:00:45.290 --> 00:00:52.830

However I now need to change to store did I inject that Previously I used from fruit state.



13

00:00:52.840 --> 00:00:55.510

Now what's the problem with that state.



14

00:00:56.710 --> 00:01:03.010

It's coming from the producer which doesn't know about my training reducer and therefore also not about



15

00:01:03.010 --> 00:01:04.210

the training state.



16

00:01:04.480 --> 00:01:13.480

So instead what we should do we should import everything as from training from the training reducer



17

00:01:13.480 --> 00:01:16.440

which lifts in the same directory as the training server.



18

00:01:16.840 --> 00:01:23.480

Now here our store or our state now is of type from training state.



19

00:01:23.620 --> 00:01:29.620

We can still dispatch actions on a global state because keep in mind our training state as defined in



20

00:01:29.620 --> 00:01:32.350

the reducer extends the rules state.



21

00:01:32.350 --> 00:01:37.060

So we still have access to that but we also now have access to the training state which you wouldn't



22

00:01:37.060 --> 00:01:40.120

have on the global stage if we inject the dead.



23

00:01:40.630 --> 00:01:41.740

So this is how that works.



24

00:01:41.740 --> 00:01:46.960

Now we got this different state and now here we can dispatch new.



25

00:01:47.140 --> 00:01:55.210

And now we need to import the relevant actions so import everything as training from mice slash training



26

00:01:55.660 --> 00:01:58.110

actions file.



27

00:01:58.230 --> 00:02:06.240

So here all now go down to my dispatch action when we fetched the A-Whale exercises and dispatch training



28

00:02:06.690 --> 00:02:10.260

said a whale exercises which now needs a payload.



29

00:02:10.260 --> 00:02:11.870

Don't forget this.



30

00:02:11.870 --> 00:02:17.330

The payload is just this array of exercises which we get in the SUBSCRIBE method here.



31

00:02:17.340 --> 00:02:18.900

This one does argument.



32

00:02:18.900 --> 00:02:20.980

This is what I know I'll pass.



33

00:02:20.990 --> 00:02:22.940

Let's add a semi-colon.



34

00:02:22.940 --> 00:02:25.800

This is how we dispatch does action.



35

00:02:25.890 --> 00:02:31.080

I also want to dispatch an action when we complete or cancel an exercise.



36

00:02:31.110 --> 00:02:39.840

Then we in the end have our Adjt. database function which we call this one down there and I don't care



37

00:02:39.840 --> 00:02:40.710

about this.



38

00:02:41.070 --> 00:02:46.430

But what I do care about is the fetch completed or canceled exercises listener.



39

00:02:46.530 --> 00:02:47.870

Here we subscribe.



40

00:02:48.060 --> 00:02:52.070

And here I don't want to emit finished exercise is changed.



41

00:02:52.320 --> 00:02:59.220

I want to instead dispatch something and that something is set finished exercises and I passed the exercise



42

00:02:59.220 --> 00:03:06.900

I get from firebase know we all do something else when we can't exercise we set the running exercise



43

00:03:06.900 --> 00:03:11.100

to null and we admit exercise changed instead of that.



44

00:03:11.180 --> 00:03:15.980

I also want to dispatch an action to stop training action.



45

00:03:16.150 --> 00:03:23.400

And there I don't need to pass an argument I'll pass the very same action if we lead the exercise here.



46

00:03:24.420 --> 00:03:27.380

Now last but not least we can also start an exercise.



47

00:03:27.480 --> 00:03:30.530

And here we set the running exercise to exercise.



48

00:03:30.540 --> 00:03:32.410

We get by it's.



49

00:03:32.940 --> 00:03:40.460

And we have exercise change here or here are also simply dispatch an action NuStar training.



50

00:03:40.920 --> 00:03:43.110

And I expect to get an exercise.



51

00:03:43.170 --> 00:03:44.450

We need to change this.



52

00:03:44.460 --> 00:03:45.600

This was an error.



53

00:03:45.810 --> 00:03:53.300

We instead passed the selected ID and with that selected ID we can go to the training actions fall where



54

00:03:53.300 --> 00:03:56.990

we are right now still expect to get an exercise object.



55

00:03:57.090 --> 00:04:01.840

No this should be changed to string for the start training class constructor.



56

00:04:02.370 --> 00:04:07.860

So that now is the producer of four star training action payload will give us a spring.



57

00:04:07.890 --> 00:04:15.480

The idea we're passing here in start exercise and the training service and now with that string in the



58

00:04:15.490 --> 00:04:24.630

reducer we can set the of training to to the state of whaleboat trainings are wildly exercises where



59

00:04:24.630 --> 00:04:32.080

we find one exercise where debt exercises ID matches our actual payload.



60

00:04:32.100 --> 00:04:35.550

Which also has an ID both as a string both as an ID.



61

00:04:35.850 --> 00:04:40.170

So here we find one object and this is what we store in act of training.



62

00:04:40.380 --> 00:04:47.670

And if we want we even create an immutable copy so we create a new object where we distribute the properties



63

00:04:47.850 --> 00:04:49.910

of the exercise we're loading.



64

00:04:50.280 --> 00:04:56.370

So this is now the right approach to store the act of training and to manage all these states from within



65

00:04:56.370 --> 00:04:57.990

our training service.



66

00:04:57.990 --> 00:05:05.870

We now dispatch everything that can happen to trainings and we're using energy or X to store that data.



67

00:05:05.880 --> 00:05:12.720

Now the last piece in the puzzle is that we connect our components to the state so that we all get the



68

00:05:12.720 --> 00:05:14.570

data from there in the future.



