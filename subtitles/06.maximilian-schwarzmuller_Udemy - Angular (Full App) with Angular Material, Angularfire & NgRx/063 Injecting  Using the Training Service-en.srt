1
00:00:02,250 --> 00:00:05,540
Where are you successful let's solve this together.

2
00:00:05,880 --> 00:00:12,080
We got our training service and to use it in that new training component we need to inject that there.

3
00:00:12,090 --> 00:00:16,790
Now what do we need to do to inject the service provided first.

4
00:00:17,090 --> 00:00:21,910
So we should go to the app module and provide the service there.

5
00:00:22,220 --> 00:00:25,690
So in there you will need to add Diom or at all.

6
00:00:25,730 --> 00:00:32,270
Let my ID do that though so I will directly go to the providers array and provide the training service.

7
00:00:32,270 --> 00:00:37,880
By the way if you're wondering whether this module is growing a bit too much I think it's still fine

8
00:00:37,940 --> 00:00:39,920
but of course we can also split it.

9
00:00:39,920 --> 00:00:44,350
This is something we can do at a later point when we optimize this app.

10
00:00:44,570 --> 00:00:51,290
So for now I provide the training service and the provider's array of the app module and we also add

11
00:00:51,290 --> 00:00:57,650
the import trading service from the training folder and then to training got service file with that

12
00:00:57,650 --> 00:00:58,700
provided here.

13
00:00:58,820 --> 00:01:03,010
We can go to the new training component and inject that there.

14
00:01:03,200 --> 00:01:07,160
By the way I'm getting an error here and you surf should actually fix this.

15
00:01:07,160 --> 00:01:11,090
Sometimes it just hangs up in the new training component.

16
00:01:11,090 --> 00:01:18,650
I now want to inject this training service or bind that to a private property named training service

17
00:01:19,160 --> 00:01:24,320
of type training service this type is of course important for angular as dependency injection and we

18
00:01:24,320 --> 00:01:29,630
need to import this type at the top from detraining dot Certis file which we can find directly in the

19
00:01:29,630 --> 00:01:36,920
training folder the file we created a second ago with that inject that we can now access the away label

20
00:01:36,920 --> 00:01:40,780
trainings and use them in our training component.

21
00:01:41,030 --> 00:01:50,120
For this I'm going to add a property trainings which will be of type or maybe exercises which will be

22
00:01:50,120 --> 00:01:51,940
of type exercise.

23
00:01:52,050 --> 00:01:58,780
Make sure to import this type 2 and of course not just the exercise but of exercise array.

24
00:01:58,830 --> 00:02:05,580
Initially its an empty array an engine in it which is of course executed right at the start of the lifecycle

25
00:02:05,580 --> 00:02:06,980
of this component.

26
00:02:06,990 --> 00:02:15,350
All assigned this exercise is to this training service extra wearable exercises.

27
00:02:15,360 --> 00:02:22,560
Now one thing we can improve is that in the training service available exercises is publicly accessible

28
00:02:22,770 --> 00:02:29,280
and since its an array we could edit it from anywhere in the app so we could also turn this into a private

29
00:02:29,280 --> 00:02:41,230
property and add a helper method get a way lable EXOR sizes where we return this available exercises

30
00:02:41,290 --> 00:02:48,640
slice the slice method will create a real copy of that array for the same reason I mentioned earlier

31
00:02:48,640 --> 00:02:51,740
with the reference type problematic for objects.

32
00:02:51,910 --> 00:02:59,170
Its the same for arrays and by calling slice we create a new array which can be edited without affecting

33
00:02:59,170 --> 00:03:00,880
the old one.

34
00:03:00,880 --> 00:03:07,780
So with that back in training we should actually reach out to get a weight exercises execute these get

35
00:03:07,780 --> 00:03:12,820
an array of exercises and store Dad and the exercises property.

36
00:03:12,820 --> 00:03:20,310
Now Indee new training template we can use that to dynamically create our mad option components.

37
00:03:20,590 --> 00:03:27,700
So Im going to get rid of all of them but one and that one component will be well used in conjunction

38
00:03:27,700 --> 00:03:36,320
with and you for there I will execute this loop for all my exercises.

39
00:03:36,400 --> 00:03:45,010
So lead exercise of exercises will loop through all them and now we got that local exercise variable

40
00:03:45,580 --> 00:03:47,350
which I want to use here.

41
00:03:47,350 --> 00:03:57,610
On the value there I will assign exercise ID and here I want to output exercise name.

42
00:03:57,610 --> 00:04:01,590
Keep in mind our exercise model has both an ID and a name.

43
00:04:02,810 --> 00:04:10,400
What that lets save all these files and go back to the running application let's quickly log in with

44
00:04:10,400 --> 00:04:12,070
any data you want.

45
00:04:12,300 --> 00:04:18,370
And now you can see here we get the same values as before but this now actually coming from our service.

46
00:04:18,410 --> 00:04:19,440
Cool.

47
00:04:19,490 --> 00:04:26,140
The next step is to take that information we select here over to the actually running exercise so that

48
00:04:26,180 --> 00:04:31,100
we got the duration calculated on the duration of the exercise and so on.

49
00:04:31,100 --> 00:04:32,760
Let's do this in the next lecture.

