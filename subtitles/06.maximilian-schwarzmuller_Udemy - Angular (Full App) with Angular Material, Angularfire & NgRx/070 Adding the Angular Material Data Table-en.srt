1
00:00:02,240 --> 00:00:06,770
Work out put some data in our application and it would be nice.

2
00:00:06,770 --> 00:00:10,770
Child put it in a structured way in a table maybe.

3
00:00:11,280 --> 00:00:17,550
Well there is this data table component and this is an extremely powerful component which is still easy

4
00:00:17,550 --> 00:00:18,320
to use.

5
00:00:18,390 --> 00:00:21,510
But behind the scenes it does a lot of awesome stuff.

6
00:00:21,780 --> 00:00:26,000
Let's have a look if we have a look at the preview here.

7
00:00:26,040 --> 00:00:29,820
You see it's a nicely styled table here.

8
00:00:30,480 --> 00:00:36,580
And the cool thing is we can add features like page anation sorting and filtering to the table.

9
00:00:36,840 --> 00:00:42,850
For example here filter we can add a type hydro gene or hydro and it automated the.

10
00:00:42,850 --> 00:00:44,820
This table we're sorting.

11
00:00:45,060 --> 00:00:52,970
We just click on a header here and it sorts the elements in the table for us page anation of course.

12
00:00:52,970 --> 00:00:59,660
Well we can simply define how many items should be on a given page and then switch through them.

13
00:00:59,730 --> 00:01:07,350
We'll have a look at all these features and implement such a data table to manage our finished or canceled

14
00:01:07,650 --> 00:01:09,470
exercises.

15
00:01:09,510 --> 00:01:12,900
Now for that how do we actually implement the data table.

16
00:01:13,040 --> 00:01:15,450
Well let's have a look at their source code.

17
00:01:15,450 --> 00:01:22,040
It looks complex but if you look closely it actually repeats the same code all the time.

18
00:01:22,140 --> 00:01:28,290
We have a rapping math table component which we and this is a core thing of this component which we

19
00:01:28,290 --> 00:01:30,090
connect to some data source.

20
00:01:30,100 --> 00:01:31,840
More about this in a second.

21
00:01:32,430 --> 00:01:40,710
And then we get this energy container element which you can think off as the invisible grouping mechanism

22
00:01:41,160 --> 00:01:50,430
which simply groups together a hetero's cell and then a regular cell to tell angular which element or

23
00:01:50,430 --> 00:01:54,010
which value to output in which column.

24
00:01:54,030 --> 00:02:00,000
So in the headers cell we have the title of the header of the column and then here we got the value

25
00:02:00,150 --> 00:02:06,480
of a single row of this column and Angola will automatically loop through all the values in the data

26
00:02:06,480 --> 00:02:14,070
source and repeat this pattern where we simply define how each column should look like for all the rows

27
00:02:14,160 --> 00:02:19,100
it has and our data source it is instructed to do so with the last two lines here.

28
00:02:19,140 --> 00:02:23,760
This tells it for all the columns we to find up your output.

29
00:02:23,760 --> 00:02:29,570
I had a row and repeat as many rows data rows as needed.

30
00:02:30,000 --> 00:02:36,720
So here with the find the columns and at the bottom we define to use the had a row and then output as

31
00:02:36,720 --> 00:02:38,760
many value rows as needed.

32
00:02:38,760 --> 00:02:41,520
This is what's inside of that table in the head.

33
00:02:41,520 --> 00:02:42,850
Now let's implement it.

34
00:02:43,200 --> 00:02:51,930
So let's go back to our code and in past training so the template get rid of that all add math table.

35
00:02:51,930 --> 00:03:00,690
So this component which wraps the entire table nice sat dead we would connect us to some data source.

36
00:03:00,900 --> 00:03:08,370
This is bound by a property binding and bind it to a property named datasource which I don't have yet

37
00:03:08,400 --> 00:03:16,260
but which I will add before I added Let's actually define the blueprints for the columns.

38
00:03:16,260 --> 00:03:21,540
Remember we use the energy container which is the default angular component which we can use to group

39
00:03:21,690 --> 00:03:27,830
things essentially here on Engy container we need to assign or add a directive.

40
00:03:27,910 --> 00:03:35,190
Matt Colomb death for a material column definition does tells angler's material or the material table

41
00:03:35,430 --> 00:03:45,150
to consider all containers that have this directive and we'd give each column a clearly identified identifier

42
00:03:45,360 --> 00:03:51,960
like date for example the date when we finished the exercise or cancel it.

43
00:03:52,050 --> 00:03:54,480
Now we want to define a column here.

44
00:03:54,480 --> 00:03:55,400
Keep that in mind.

45
00:03:55,470 --> 00:03:59,360
We define a column a column has a header cell.

46
00:03:59,370 --> 00:04:04,980
So the title and a values cell at the value of cells are repeated for all the values as I mentioned

47
00:04:05,790 --> 00:04:13,290
the header cells to find the Mad Hatter cell component here on this component.

48
00:04:13,380 --> 00:04:22,080
We add structural that are effective indicated by the star which is called Matt header cell death for

49
00:04:22,520 --> 00:04:23,910
header's cell definition.

50
00:04:24,850 --> 00:04:29,730
You don't need to assign a value here to simply as used by Metts table.

51
00:04:29,750 --> 00:04:37,480
Internally and then you simply define the title of that header like date.

52
00:04:37,480 --> 00:04:43,750
Now let's define a value yourself for the column with map cell and then a structural directive which

53
00:04:43,750 --> 00:04:48,230
is the math cell death directive for materials cell definition.

54
00:04:48,490 --> 00:04:51,860
And here we have to assign that element.

55
00:04:51,960 --> 00:04:53,760
Now this clearly looks strange.

56
00:04:53,770 --> 00:05:01,630
This simply gives us access to a element property which will be passed to us by a material table component

57
00:05:02,080 --> 00:05:07,660
so that we can actually output the value we get through stringin appellation here.

58
00:05:07,840 --> 00:05:14,950
So we can access element date and I know that there will be a date property because our data source

59
00:05:15,160 --> 00:05:23,230
will later be our exercises array and each exercise has a date property.

60
00:05:23,310 --> 00:05:27,420
So back to the template element date and year.

61
00:05:27,450 --> 00:05:32,760
I will also add the date pipe to a built in pipe shipping with angular.

62
00:05:33,240 --> 00:05:35,170
So this is our first column.

63
00:05:35,310 --> 00:05:41,820
We already got a bunch of arrows here because we need to unlock this component to included in our bundle

64
00:05:42,300 --> 00:05:53,140
so the material module I will add to import the mat table module and it will add it to both imports

65
00:05:53,350 --> 00:06:01,380
and then also of course exports in the material module with that we can go back to the past trading's

66
00:06:01,510 --> 00:06:02,440
component.

67
00:06:02,920 --> 00:06:06,060
And now are just gone just to data sources and found.

68
00:06:06,100 --> 00:06:07,700
But that makes sense.

69
00:06:07,990 --> 00:06:09,450
Now we have more than one color.

70
00:06:09,460 --> 00:06:12,310
So let's repeat this pattern here.

71
00:06:12,340 --> 00:06:15,840
We also want to have a column for the name of the exercise.

72
00:06:16,030 --> 00:06:18,070
So the title will be name here.

73
00:06:18,130 --> 00:06:23,200
We still get access to the element but then we should be data up there by the way.

74
00:06:23,680 --> 00:06:29,000
But then here we X-ists element name and I no longer need the pipe here.

75
00:06:29,140 --> 00:06:36,920
Now we have more columns so let's add the number column definition here for the calories.

76
00:06:36,920 --> 00:06:41,240
Maybe Here I'll give it a title of calories.

77
00:06:41,260 --> 00:06:44,740
This is always the human readable title here of course.

78
00:06:44,740 --> 00:06:49,530
And then I'm going to use element calories here.

79
00:06:49,670 --> 00:06:54,190
Now the calories of the ship be formatted with the number pi.

80
00:06:54,320 --> 00:06:56,860
This will output them in a nicely styled way.

81
00:06:57,880 --> 00:07:04,000
Now there's one more column I want to add for sure and that is the duration.

82
00:07:04,210 --> 00:07:10,700
So here duration title should be duration.

83
00:07:10,880 --> 00:07:13,420
And I'm going to Xs element duration here.

84
00:07:13,550 --> 00:07:19,010
I'll also use the number of pipe here because I want to format this nicely as a number two.

85
00:07:19,400 --> 00:07:21,640
And finally maybe this state.

86
00:07:21,830 --> 00:07:24,580
So here it's for the state.

87
00:07:24,580 --> 00:07:29,750
Whoever does was cancelled or not here will output element state.

88
00:07:29,750 --> 00:07:31,780
I don't need a pipe here.

89
00:07:32,510 --> 00:07:35,890
Now with that we get all the columns you want to use.

90
00:07:35,890 --> 00:07:39,250
Now we need to instruct material table to do something.

91
00:07:39,340 --> 00:07:44,940
First of all I'll say hey I want to have a header so I'll add Matt header row here.

92
00:07:45,370 --> 00:07:53,870
There we also have to assign a structural directive the Matt header row Rodanthe and no important I

93
00:07:53,870 --> 00:07:58,650
set this to display columns.

94
00:07:58,800 --> 00:08:04,890
Before I explain what's up with that let's also add the instruction to render all the rows we do this

95
00:08:04,890 --> 00:08:11,910
by adding match row and assigning a Navarrete structural directive which of course is just as the structural

96
00:08:11,910 --> 00:08:15,840
directives coming from material angular material.

97
00:08:15,840 --> 00:08:23,810
So here it's the math road death structural directive where I'm simply saying hey how should the Rose

98
00:08:23,820 --> 00:08:29,850
be rendered a Judas by setting lache row and then finding the columns for which I want to render rows

99
00:08:30,300 --> 00:08:33,810
and this should be my displayed columns.

100
00:08:33,810 --> 00:08:41,370
Now does Holsten text can look rather strange and in the end you can just memorize it or look it up

101
00:08:41,370 --> 00:08:42,870
in the documentation.

102
00:08:42,870 --> 00:08:49,920
What's happening is really just that we're rendering the headers so the table titles and then all the

103
00:08:49,920 --> 00:08:54,840
rows for all the values we got this Collin's displayed.

104
00:08:54,840 --> 00:08:56,400
Cullens thing is important.

105
00:08:56,400 --> 00:09:02,790
We're connecting the map table to a data source but with display columns we can control which of our

106
00:09:02,790 --> 00:09:05,370
defined columns we actually want to show.

107
00:09:05,520 --> 00:09:08,720
This allows us to dynamically change as if we wanted to.

108
00:09:09,210 --> 00:09:15,130
So we need to do two things configure displayed columns and data source.

109
00:09:15,270 --> 00:09:22,950
So in the past training component typescript file I will add properties for both.

110
00:09:22,950 --> 00:09:26,480
I'll add my displayed Calamus property.

111
00:09:26,520 --> 00:09:34,220
This has to be an array of strings and the names in there have to match the names you assigned here

112
00:09:34,290 --> 00:09:37,650
with Matt column death on your energy container.

113
00:09:37,890 --> 00:09:43,790
So if you got a date name and calories here you have to match that in disarray to to find which columns

114
00:09:43,790 --> 00:09:44,790
should be rendered.

115
00:09:44,940 --> 00:09:47,320
So you don't want to render them all date.

116
00:09:47,490 --> 00:09:53,780
Name duration calories and you also defined your order here.

117
00:09:53,790 --> 00:10:02,410
By the way calorie is and state a simple thing you can easily switch the order by switching the order

118
00:10:02,410 --> 00:10:03,540
in this array.

119
00:10:03,550 --> 00:10:07,350
That is why we bind to displayed columns.

120
00:10:07,380 --> 00:10:16,200
I also need to define my data source so at data source property and this will be a value which I have

121
00:10:16,200 --> 00:10:20,820
to instantiate based on something I import from angular material.

122
00:10:20,820 --> 00:10:30,290
I have to instantiate a new mapped table data source you import this from any angular material up your

123
00:10:30,560 --> 00:10:32,990
math table data source.

124
00:10:33,440 --> 00:10:38,490
And this is simply an object which allows material table to connect to.

125
00:10:38,660 --> 00:10:43,370
It's a generic object where you define which kind of data you're passing in.

126
00:10:43,370 --> 00:10:46,070
For us it's going to be an exercise.

127
00:10:46,670 --> 00:10:50,980
So we have to import exercise from our exercise model.

128
00:10:51,110 --> 00:10:53,940
So import exercise from.

129
00:10:54,000 --> 00:10:58,390
And now we go up a level to the exercise model file.

130
00:10:58,400 --> 00:11:05,360
Now we're connecting an exercise to the math table data source and now correctly you would say don't

131
00:11:05,360 --> 00:11:07,910
we use an array of exercises.

132
00:11:08,180 --> 00:11:15,560
Yes we do but since we're working with a table max table data source always expects to get an array

133
00:11:15,560 --> 00:11:17,700
of whichever type you are passing here.

134
00:11:17,930 --> 00:11:24,380
So if you are passing an array of exercises just define exercise exercises to type not exercise like

135
00:11:24,380 --> 00:11:24,670
this.

136
00:11:24,670 --> 00:11:29,120
Not an array of exercises it'll automatically assume this.

137
00:11:29,140 --> 00:11:37,840
Now with this we have our data source and now that should already be all we need to render our past

138
00:11:37,900 --> 00:11:40,150
exercise as well.

139
00:11:40,180 --> 00:11:47,350
Although of course we need to populate the data source and for this we need the training service because

140
00:11:47,380 --> 00:11:49,790
this is where our data lives.

141
00:11:49,870 --> 00:11:57,960
So all injected into this component with the help of the constructor of course training services a property

142
00:11:57,960 --> 00:12:03,780
I create of type trading service make sure to add the import to the training service file.

143
00:12:04,800 --> 00:12:14,310
And then in Engy on it I will set this data source and then there's a data property equal to this training

144
00:12:14,310 --> 00:12:18,740
service and then there all our exercises.

145
00:12:18,760 --> 00:12:24,770
Now for that I'll quickly add a helper method because we don't have such a method yet.

146
00:12:25,640 --> 00:12:30,740
Completed or canceled exercises maybe.

147
00:12:31,040 --> 00:12:38,630
And it will simply return this EXOR sizes and return slice to get a new copy.

148
00:12:38,650 --> 00:12:40,210
Though it doesn't really matter here.

149
00:12:41,790 --> 00:12:48,840
Now back in past trainings all connected to this training service get completed or canceled exercises

150
00:12:49,160 --> 00:12:54,750
and this returns an array of exercises and as you see it doesn't complain because they expect to get

151
00:12:54,750 --> 00:12:58,510
an array of whichever type you set up here.

152
00:12:58,530 --> 00:13:04,830
Now if we save this and we go back to our application we quickly log in here.

153
00:13:05,870 --> 00:13:13,530
Let's start a new exercise and let's go with it.

154
00:13:13,710 --> 00:13:20,090
And under past exercises we now see this exercise as you see we only get a fraction of the duration

155
00:13:20,450 --> 00:13:24,350
which we actually had if we completed the exercise.

156
00:13:24,380 --> 00:13:25,430
Let's see the opposite.

157
00:13:25,460 --> 00:13:31,540
By completing some Burpy last year and will quickly fast forward until this is done.

158
00:13:32,610 --> 00:13:37,680
And we're almost done so let's have a look at past exercises.

159
00:13:37,680 --> 00:13:44,790
Here we got complete herpes 60 seconds and cancell crunches.

160
00:13:44,790 --> 00:13:51,350
Now one thing I think that's going wrong is in the training service.

161
00:13:51,540 --> 00:13:59,310
We of course want to store this running exercises calories not duration multiplied with their progress

162
00:13:59,790 --> 00:14:01,270
but that is all.

163
00:14:01,350 --> 00:14:03,550
Our table is working.

164
00:14:03,690 --> 00:14:05,290
Let's see how we can tweak it.

