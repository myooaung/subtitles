1
00:00:02,290 --> 00:00:08,230
Let's make sure we use the data off de-selected training as we're storing it in the training service

2
00:00:08,770 --> 00:00:11,120
in our current training component.

3
00:00:11,410 --> 00:00:14,270
So we select the training and store it and running exercise.

4
00:00:14,290 --> 00:00:15,390
We do this year.

5
00:00:15,550 --> 00:00:19,940
We actually even emit an event whenever we choose a new training.

6
00:00:19,960 --> 00:00:24,150
Now we need to use that information in the current training component.

7
00:00:24,460 --> 00:00:30,340
Keep in mind we'll load the current training component whenever we start a new training.

8
00:00:30,340 --> 00:00:32,170
So how do we extract that data.

9
00:00:32,180 --> 00:00:36,450
And they're now in the current training component.

10
00:00:36,540 --> 00:00:40,560
I first of all want to inject the training service.

11
00:00:40,830 --> 00:00:50,370
So besides injecting the mat dialogue thing here also inject private training service of type training

12
00:00:50,550 --> 00:00:56,280
service and that of course is something which you all need to add here as an import training service

13
00:00:56,460 --> 00:00:58,250
from the training service file.

14
00:00:59,370 --> 00:01:08,160
Once you did at this and we therefore injected it here we can initialize our component with the selected

15
00:01:08,220 --> 00:01:09,360
training.

16
00:01:09,400 --> 00:01:10,650
So what does this mean.

17
00:01:11,950 --> 00:01:20,020
This means that here in central Well these steps by which we want to increment this actually you should

18
00:01:20,020 --> 00:01:24,610
depend on the duration of the selected training.

19
00:01:24,620 --> 00:01:29,000
It might also make sense to outputs the name of the current training.

20
00:01:29,480 --> 00:01:35,720
So here right now we only output a motivation in that phrase and the progress of course we could also

21
00:01:35,870 --> 00:01:39,400
put the name of the selected exercise.

22
00:01:39,470 --> 00:01:43,860
So let's start with the steps here and start or reassumed timer.

23
00:01:44,030 --> 00:01:48,050
I need access to the selective training in training service.

24
00:01:48,110 --> 00:01:59,870
I currently Hightower's as a private property so I should add a Meffert get running exercise where I

25
00:01:59,870 --> 00:02:08,810
return a new object which simply is a copy of this running exercise again to make sure I can't mutate

26
00:02:08,860 --> 00:02:11,090
this from outside of the service.

27
00:02:11,180 --> 00:02:17,630
Now I can call get running exercise to get data about the running exercise and it will do so in start

28
00:02:17,690 --> 00:02:21,380
or resume timer in there.

29
00:02:21,380 --> 00:02:23,410
I need to calculate a step.

30
00:02:23,750 --> 00:02:29,040
Let's say we want to increment progress by one and not by five.

31
00:02:29,060 --> 00:02:32,110
This means we need 100 steps to get to 100 percent.

32
00:02:32,200 --> 00:02:39,080
And does this set in stone because the Met progress spinner works in a way that it goes from 0 to 100.

33
00:02:39,080 --> 00:02:46,400
What we can change is how quickly it updates from one progress step to the next so step doesn't necessarily

34
00:02:46,400 --> 00:02:48,020
have to be one second.

35
00:02:48,320 --> 00:02:57,630
If our training takes 40 seconds one step should be 100 divided by 30 or actually since this is in milliseconds

36
00:02:58,200 --> 00:03:02,490
100 divided by 30 times 1000.

37
00:03:02,550 --> 00:03:11,740
So if our duration of the exercise is 30 then we want to execute this process 100 divided by 30 times

38
00:03:12,060 --> 00:03:18,850
we're actually since this is milliseconds it's 100 divided by 30 times 1000.

39
00:03:18,890 --> 00:03:30,030
In other words a step can be taken from the training service and there from the running exercise by

40
00:03:30,030 --> 00:03:38,580
accessing the duration of that exercise and dividing it by 100 because 100 is our fixed maximum percentage

41
00:03:39,270 --> 00:03:42,980
since we have multi seconds we multiply this with 1000.

42
00:03:43,140 --> 00:03:46,200
And now we get the step value.

43
00:03:46,470 --> 00:03:53,610
So now I can use Stapp instead of 1000 to have a duration a progress spinner that takes the duration

44
00:03:53,700 --> 00:03:57,880
off the exercise into account let's try it out.

45
00:03:57,940 --> 00:04:02,950
Let's go back to the running application quickly log in with some random data.

46
00:04:03,040 --> 00:04:06,110
Select the exercise like trenches and click start.

47
00:04:06,430 --> 00:04:11,250
And now you see it updates like this.

48
00:04:11,310 --> 00:04:17,060
If I hit stop here and quit and I select a different exercise.

49
00:04:17,340 --> 00:04:21,610
It's now way slower because touch chose which I select the tear.

50
00:04:21,810 --> 00:04:27,520
If you have a look at the trading service actually have a much longer duration.

51
00:04:27,540 --> 00:04:30,520
These are free minutes instead of 30 seconds.

52
00:04:30,540 --> 00:04:33,250
So this is working now.

53
00:04:33,270 --> 00:04:39,780
What I also need to ensure is that when we stop the training or when it finishes naturally that we also

54
00:04:39,780 --> 00:04:47,340
communicate that to the training service and store the exercise there either as cancelled or as successfully

55
00:04:47,340 --> 00:04:48,550
completed.

56
00:04:48,590 --> 00:04:51,750
This is something we'll turn our heads to in the next lecture.

