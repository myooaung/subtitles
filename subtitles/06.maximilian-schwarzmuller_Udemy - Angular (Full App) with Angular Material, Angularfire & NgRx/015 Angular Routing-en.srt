1
00:00:02,470 --> 00:00:04,380
We're almost done with the refresher.

2
00:00:04,390 --> 00:00:10,670
There's one more thing I want to cover and that is routing routing simply means that our angler app

3
00:00:10,690 --> 00:00:15,130
can have multiple pages even though only one page is sent from the server.

4
00:00:15,240 --> 00:00:21,310
The other pages are really just simulated retreaded or renders the entire page to give the illusion

5
00:00:21,310 --> 00:00:26,410
of having loaded a new page even though everything was done by javascript which is of course faster

6
00:00:26,410 --> 00:00:27,960
than fetching a new page.

7
00:00:28,330 --> 00:00:31,350
So for that I'll add one new component.

8
00:00:31,360 --> 00:00:32,270
Let's name a D.

9
00:00:32,290 --> 00:00:39,940
Home Guard component tot he has fall in there I'll export my home component class and we could have

10
00:00:39,940 --> 00:00:43,810
used to Selye to create this.

11
00:00:43,870 --> 00:00:53,290
I'll add my apt component decorator which should be imported from at angular core and to the decorator

12
00:00:53,320 --> 00:00:55,550
I'll pass my template here.

13
00:00:55,610 --> 00:01:01,760
I'll use an illustrative syntax with an inline template where you just pass a string to define what's

14
00:01:01,760 --> 00:01:08,270
inside the template and I'll just add a one take in say the home component and this is of course only

15
00:01:08,270 --> 00:01:11,000
useful for very simple templates.

16
00:01:11,000 --> 00:01:13,740
You might see that I'm missing the Select are here.

17
00:01:13,850 --> 00:01:19,920
The reason for this is that I don't even need a selector when using routing but more on that later.

18
00:01:19,950 --> 00:01:27,030
Now if I add a new component I also have to declare it in my app modules.

19
00:01:27,050 --> 00:01:33,240
So here already home component and I'll also add the import path to the home component.

20
00:01:33,410 --> 00:01:36,070
I just edited it so that we have multiple pages.

21
00:01:36,080 --> 00:01:40,280
The Products page and the home page to add routing.

22
00:01:40,280 --> 00:01:42,240
I'll now add a new file and I'll name it.

23
00:01:42,320 --> 00:01:44,430
Abeche routing module does.

24
00:01:44,450 --> 00:01:49,340
Yes it is a common convention to put routing into its own module.

25
00:01:49,340 --> 00:01:54,910
Technically this is not required but here follow that convention in that file.

26
00:01:54,920 --> 00:01:56,400
First of all create a new module.

27
00:01:56,410 --> 00:02:05,540
The app routing module and since this is just a normal module it needs debt at Monch decorator so I'll

28
00:02:05,540 --> 00:02:08,810
simply add this year at ngi module.

29
00:02:08,900 --> 00:02:13,800
This NGI module decorator should be imported from angular core.

30
00:02:13,970 --> 00:02:17,360
So we need to add at angular coord at the top.

31
00:02:17,840 --> 00:02:18,810
No end here.

32
00:02:18,980 --> 00:02:21,680
I wanted to find my routes for that.

33
00:02:21,680 --> 00:02:26,090
I'll try the new constant routes which is of type routes.

34
00:02:26,120 --> 00:02:29,240
Now this is a type coming from the Anglo router package.

35
00:02:29,360 --> 00:02:36,320
So we import routes from at angular slash router.

36
00:02:36,580 --> 00:02:44,500
Now with that we have to define the routes and routes requires an array of javascript objects where

37
00:02:44,530 --> 00:02:51,340
each object represents the configuration of one route a route always needs to have a path.

38
00:02:51,340 --> 00:02:53,430
This is the part after the domain.

39
00:02:53,430 --> 00:02:57,790
In your t u r l an empty Potthast just your Roueche route.

40
00:02:57,910 --> 00:03:00,670
Then you need to define a number property.

41
00:03:00,820 --> 00:03:07,110
The components that should be loaded when this path is reached and here for the root POV I want to load

42
00:03:07,120 --> 00:03:08,220
the home component.

43
00:03:08,380 --> 00:03:15,390
You also need to get the import here so the typescript can find it not set up a second route by adding

44
00:03:16,110 --> 00:03:23,250
an additional javascript object and here let's say the POF is products don't add slash products just

45
00:03:23,250 --> 00:03:24,050
products.

46
00:03:24,060 --> 00:03:31,440
This will be reached under your domain dot com slash products here the component should be the products

47
00:03:31,500 --> 00:03:35,140
component and you'll also need to add import to that.

48
00:03:35,160 --> 00:03:38,610
With that we got a very simple routing configuration.

49
00:03:38,610 --> 00:03:45,550
Now we just need to inform angler about it and we do that by using the router module.

50
00:03:45,570 --> 00:03:48,320
It's also important from an angle or router.

51
00:03:48,630 --> 00:03:52,880
It's added to the imports array of our energy module there.

52
00:03:52,890 --> 00:03:58,020
I reach out to the router module and call the four route method on it.

53
00:03:58,010 --> 00:04:03,600
It does is used to define the route routes of our application and we simply pass that routes array as

54
00:04:03,600 --> 00:04:05,000
an argument.

55
00:04:05,210 --> 00:04:10,950
That this isn't an extra module and every module works stand alone and doesn't spoil its information

56
00:04:10,950 --> 00:04:12,330
to other modules.

57
00:04:12,630 --> 00:04:18,360
We need to add another key here to the energy module definition which is exports.

58
00:04:18,360 --> 00:04:24,420
This takes an array of all the features from that module like to router Marshall in this case that we

59
00:04:24,420 --> 00:04:26,720
want to expose to other modules.

60
00:04:26,820 --> 00:04:32,550
In our case we want to expose it to the app module and therefore to the entire app so that safety app

61
00:04:32,580 --> 00:04:33,350
routing watch.

62
00:04:33,360 --> 00:04:34,150
Now.

63
00:04:34,290 --> 00:04:40,350
Now we need to go to the app module and import this app routing module we're exporting functionality

64
00:04:40,350 --> 00:04:44,240
there but we can only use it if we import it in another module.

65
00:04:44,280 --> 00:04:52,170
So here in the app module all go to the imports array and add the app routing module as well as the

66
00:04:52,170 --> 00:04:53,990
import path up here.

67
00:04:54,570 --> 00:05:00,760
So with that we import our own module from our own file and add it to the imports area here with that.

68
00:05:00,770 --> 00:05:02,700
Engler is aware of our roads.

69
00:05:02,820 --> 00:05:08,580
We now just need to tell it where to render them for dead to go into the app component and instead of

70
00:05:08,580 --> 00:05:15,920
hard including the app products page will use a special element the router outlet.

71
00:05:16,090 --> 00:05:22,450
Now router out that is t l element you could say its a directive coming from angular actually which

72
00:05:22,450 --> 00:05:28,690
marks the place in your document where you want to render about content above or below that will not

73
00:05:28,690 --> 00:05:30,970
be replaced by the router component.

74
00:05:30,970 --> 00:05:38,640
This element here will say if I add my cool app at the top we will see this on all pages.

75
00:05:38,650 --> 00:05:41,600
Thats of course great because you could add a header instead.

76
00:05:41,710 --> 00:05:47,710
But this router out that will be replaced with whichever component we find in the routing module here

77
00:05:47,710 --> 00:05:49,690
for the given route.

78
00:05:49,690 --> 00:05:52,670
Now we just need to have a way of navigating around.

79
00:05:52,990 --> 00:05:56,800
And for that I'll create a very simple header in the app component.

80
00:05:57,250 --> 00:06:06,410
Your I'll add a link and not use the normal ref element but instead the router link directive that's

81
00:06:06,420 --> 00:06:08,070
all the provided by.

82
00:06:08,340 --> 00:06:12,050
And it takes an input which is pointing to the.

83
00:06:12,060 --> 00:06:18,110
When I go for Slash nothing that would be the home page and if I duplicate this to go to the product's

84
00:06:18,120 --> 00:06:24,200
page here that would be slash products and this will be appended to your domain.

85
00:06:24,270 --> 00:06:30,960
Now with that we can save us and now we get the two links and if I click it you'll see I can switch

86
00:06:30,960 --> 00:06:36,390
between the two parts of my application and that is routing in a nutshell.

87
00:06:36,660 --> 00:06:39,930
As with all the other features there's way more to it.

88
00:06:40,080 --> 00:06:43,770
And you definitely should take an angular course to learn more about it.

89
00:06:43,980 --> 00:06:49,840
But this is the core you got to know we will use it in this course and I hope it's a bit clearer now.

