1
00:00:02,240 --> 00:00:07,920
So let's work on the data and to work on that data.

2
00:00:07,940 --> 00:00:09,950
We need mainly two things.

3
00:00:09,980 --> 00:00:17,660
A couple of services that allow us to add for now at least fake the authentication of a user and also

4
00:00:17,750 --> 00:00:24,620
to manage our trainings and models that allow us to manage the different data we're interacting with

5
00:00:24,710 --> 00:00:29,820
like deal for Education data the user data stuff like that.

6
00:00:29,840 --> 00:00:36,410
Later in the course we'll also then connect our app to the Internet to use real authentications on.

7
00:00:36,560 --> 00:00:39,650
But getting started with still dummy data.

8
00:00:39,680 --> 00:00:46,160
But at least in a real interactive way is a huge advancement and allows us to simulate our app how it

9
00:00:46,160 --> 00:00:49,890
will look like when it actually has dynamic data.

10
00:00:49,910 --> 00:00:57,890
So let's start with the authentication area in the off folder where we have to log in and sign up component.

11
00:00:58,160 --> 00:01:00,940
I want to add two models.

12
00:01:01,040 --> 00:01:03,040
The first one is the user model.

13
00:01:03,050 --> 00:01:10,220
I'm going to name the file user model dot TS and in the end I have one simple goal in here I want to

14
00:01:10,220 --> 00:01:18,190
create an interface that I can use to well define how a user should look like in my application.

15
00:01:18,590 --> 00:01:24,800
So I'm going to export the interface here and interface is a special type script construct which in

16
00:01:24,800 --> 00:01:30,980
the end is just our custom type definition you could say all name it user and the user should have two

17
00:01:30,980 --> 00:01:38,530
fields let's say and email which is a string and a user id let's say which should be a string.

18
00:01:38,540 --> 00:01:46,100
Later when we actually add a server and the back end we will get that user from the server and we can

19
00:01:46,100 --> 00:01:47,800
then use it.

20
00:01:47,840 --> 00:01:56,210
I'll also add my off dash data dart model Ts fall to to find the type of data I want to get during sign

21
00:01:56,210 --> 00:02:01,070
up and sign in which I plan on sending to the server for validation.

22
00:02:01,070 --> 00:02:06,160
So I'm going to export the interface or two of data seems like a fitting name.

23
00:02:06,160 --> 00:02:11,830
And then there are all they have an e-mail but then I want to have a password as a second field.

24
00:02:11,900 --> 00:02:18,640
So this is the data I want to get when a user is well created or logged in.

25
00:02:18,690 --> 00:02:22,220
And with that we can now add a service.

26
00:02:22,220 --> 00:02:24,890
I'm going to name the file off Service thought.

27
00:02:24,940 --> 00:02:30,630
Yes because the service is going to be named of service and then I'll export a class named.

28
00:02:30,710 --> 00:02:38,690
Well all services have just set the goal of this service is to and DN allow us to fake a user log in

29
00:02:38,900 --> 00:02:45,500
in form other parts of the app about to log in so that we can for example adjust the header and only

30
00:02:45,500 --> 00:02:46,770
show do you log out.

31
00:02:46,760 --> 00:02:50,280
But if the user can log out and so on.

32
00:02:50,300 --> 00:02:58,110
That's the idea with that we need a couple of fields and methods in debt of service.

33
00:02:58,280 --> 00:03:03,920
For example want to store currently authenticated user and I'll turn this into a private field so that

34
00:03:03,920 --> 00:03:07,190
we can only exit from inside the service.

35
00:03:07,190 --> 00:03:12,400
This will be of type user and that's the type we just created in the user data model file.

36
00:03:12,440 --> 00:03:14,910
So make sure to add this import.

37
00:03:15,140 --> 00:03:22,640
Now with that I will add a Methot register user which should be called when a user signs up there I

38
00:03:22,640 --> 00:03:27,430
expect to get some off data which should be off type of data.

39
00:03:27,470 --> 00:03:30,860
You also need to import this from that data model file.

40
00:03:30,860 --> 00:03:35,690
We created a second ago in the registry user method year.

41
00:03:35,900 --> 00:03:38,130
We will initialize our user.

42
00:03:38,270 --> 00:03:42,350
And once we connect to the Internet we'll of course will do more than that.

43
00:03:42,410 --> 00:03:46,420
We will actually send the request to a server and create the user there.

44
00:03:46,430 --> 00:03:49,780
We don't have a survey yet so for now it will simply create a user.

45
00:03:49,970 --> 00:03:57,420
So create a new object and store that and user property and this user property should be of type user.

46
00:03:57,450 --> 00:04:02,760
This object we're creating here must have an email property here.

47
00:04:02,780 --> 00:04:05,310
I will simply get the off data e-mail.

48
00:04:05,330 --> 00:04:12,850
Remember the off data model also had an email property and we also must have a user ID.

49
00:04:12,860 --> 00:04:16,560
Now again later we will create this on a server.

50
00:04:16,760 --> 00:04:25,770
For now it will fake a random ID by calling Moff around on Moff random times 10000.

51
00:04:25,790 --> 00:04:29,030
Now please be aware this is no truly unique ID.

52
00:04:29,030 --> 00:04:34,740
Theoretically you can get the same ID twice but you're for faking this.

53
00:04:34,760 --> 00:04:35,880
It does the trick.

54
00:04:35,900 --> 00:04:39,330
We will later of course get one from the server.

55
00:04:39,740 --> 00:04:44,210
So with that we're storing a new user when we registered a user.

56
00:04:44,210 --> 00:04:47,370
Now let's also add a log in method.

57
00:04:47,630 --> 00:04:51,710
And in the log in method I also expect to get some of data.

58
00:04:51,740 --> 00:04:55,760
So an object with email and password of type of data.

59
00:04:55,760 --> 00:05:00,170
Therefore And here too I will create a user.

60
00:05:00,440 --> 00:05:02,020
So right now it's the same logic.

61
00:05:02,120 --> 00:05:03,280
Later this will change.

62
00:05:03,290 --> 00:05:05,930
We will send different requests to our server.

63
00:05:05,930 --> 00:05:08,230
That is why I use two methods here.

64
00:05:08,300 --> 00:05:11,240
We're able to register a user and to log in.

65
00:05:11,340 --> 00:05:13,700
Now it's all to add a log out method.

66
00:05:13,760 --> 00:05:20,980
And here I simply want to set user equal to null so reset it it's undefined initially.

67
00:05:21,040 --> 00:05:24,550
It's then an object after we register or sign in.

68
00:05:24,620 --> 00:05:33,830
Now it's undefined or to be precise null again and all is we'll at get user to well get access to the

69
00:05:33,830 --> 00:05:34,510
user.

70
00:05:34,550 --> 00:05:35,690
We store here.

71
00:05:35,840 --> 00:05:39,860
It has a private access source so it's not accessible to the outside.

72
00:05:40,100 --> 00:05:46,730
Now we can return this user and since it's an object and therefore a reference type.

73
00:05:46,740 --> 00:05:53,090
Other parts of the app could actually change that object and therefore change the object in the service

74
00:05:53,450 --> 00:06:01,640
to prevent this all return a new object and use the object spread operator to spread the properties

75
00:06:01,910 --> 00:06:06,910
of the user object stored in the service into this new object.

76
00:06:06,920 --> 00:06:12,830
This will break this reference and actually return a brand new user that has the same properties but

77
00:06:12,830 --> 00:06:14,470
as a different object.

78
00:06:14,480 --> 00:06:21,290
So if other parts of the app start manipulating this object which we return here they won't manipulate

79
00:06:21,440 --> 00:06:26,850
this original user which is a better practice than directly returning to user.

80
00:06:26,860 --> 00:06:35,920
I'll also add a convenience method is off and here I will simply return wherever this user is equal

81
00:06:35,950 --> 00:06:45,460
to now or not if it is a quote to me if it's not equal with only check for value equality if it's not

82
00:06:45,520 --> 00:06:52,120
equal then the user is authenticated so is of will return true if it is equal to now.

83
00:06:52,150 --> 00:06:54,240
This will return false.

84
00:06:54,250 --> 00:06:56,340
So with that we get the off service.

85
00:06:56,350 --> 00:07:03,540
Now let's connect to our app and actually call register user from the Sign-Up component and log in from

86
00:07:03,550 --> 00:07:06,120
the Web log in component.

87
00:07:06,130 --> 00:07:08,260
Let's start with the Sign-Up component.

88
00:07:08,300 --> 00:07:14,800
There we have on submit which is executed when we hit that submit button and this is where I want to

89
00:07:14,800 --> 00:07:19,600
actually register my user afforded any access to the off service.

90
00:07:19,780 --> 00:07:25,060
And that of course means that we need to inject it into that sign up component.

91
00:07:25,330 --> 00:07:34,060
Now important we want to ensure that in the entire application we use the same service class the same

92
00:07:34,120 --> 00:07:37,680
instance of that service class I should say.

93
00:07:37,690 --> 00:07:41,140
Therefore one thing is super important.

94
00:07:41,140 --> 00:07:43,190
Do you know which thing that is.

95
00:07:45,150 --> 00:07:51,880
The question where we provide that service injecting it as one part in a singular.

96
00:07:51,960 --> 00:07:59,110
You also need to provide your services and I do provide it in my app module.

97
00:07:59,130 --> 00:08:06,940
This ensures that throughout the entire app we're always using the same instance of office service.

98
00:08:06,970 --> 00:08:15,470
So in app model I'll add the off service to providers like this with that you also need to ensure that

99
00:08:15,470 --> 00:08:22,040
you at the airport and the app module at the top import off service from the off folder and the offshore

100
00:08:22,070 --> 00:08:23,310
service file there.

101
00:08:24,430 --> 00:08:30,610
And with that added We can now inject the Avs servers into the sign up component.

102
00:08:31,000 --> 00:08:37,750
So in a sign up component here in the constructor all automatically bind it to a private property which

103
00:08:37,750 --> 00:08:40,520
I'll name Officer service this name is up to you.

104
00:08:40,870 --> 00:08:43,840
And that type is going to be of service.

105
00:08:43,990 --> 00:08:52,270
You must also import off service from that officer s file in the sign up component for this to work.

106
00:08:52,270 --> 00:08:58,810
Now we get access to the office service and then on Submit I will reach out to offer service and call

107
00:08:58,810 --> 00:09:00,070
register user.

108
00:09:00,340 --> 00:09:09,430
Now as you learned in off service register user expects to get data off type off data which if we have

109
00:09:09,430 --> 00:09:17,090
a look at the model is an object with an email and a password property both holding string values.

110
00:09:17,500 --> 00:09:20,520
So let's pass such an object to registry user.

111
00:09:20,680 --> 00:09:28,600
Let's pass an object where we have an email property which we extract from our submitted form by accessing

112
00:09:28,600 --> 00:09:29,490
the form.

113
00:09:29,560 --> 00:09:40,480
So this argument we receive here and there the value and their email property and it's named email cousinly

114
00:09:40,520 --> 00:09:44,630
sign up component on the e-mail input here.

115
00:09:45,510 --> 00:09:53,370
We assigned a name of email here for password we assign the name of password which is will we be able

116
00:09:53,490 --> 00:09:55,800
to access the password on that name.

117
00:09:55,920 --> 00:10:03,920
So e-mail for e-mail and for the password field we access for and value password due to that name assignment.

118
00:10:03,930 --> 00:10:08,490
I showed a second ago with that we're registering a new user.

119
00:10:08,610 --> 00:10:17,450
Now let's also make sure we log users in for database go to log in component and just as in the sign

120
00:10:17,460 --> 00:10:21,330
up component I need to inject the off service.

121
00:10:21,330 --> 00:10:26,400
Now do you offer service and check that here will be the exact same instance as the Sign-Up component

122
00:10:26,630 --> 00:10:31,140
due to us providing that service in the app module important.

123
00:10:31,290 --> 00:10:37,190
You also need to import off service from that of service file in the log in component.

124
00:10:37,350 --> 00:10:38,630
We're using to type here.

125
00:10:38,640 --> 00:10:43,950
So we need to employ this with that import add it in on submit.

126
00:10:43,950 --> 00:10:52,860
We can reach out to days of service and call log in and just as register log in requires an object where

127
00:10:52,860 --> 00:10:56,480
we have an e-mail and two years since I use the reactive approach.

128
00:10:56,490 --> 00:11:04,320
I simply reach out to log in for in value and then it's e-mail because I gave my control a name of e-mail

129
00:11:04,320 --> 00:11:08,770
here and password is going to be the password name I assigned here.

130
00:11:08,910 --> 00:11:17,190
So there I will also add a second field password which is this log in for him the value password.

131
00:11:17,290 --> 00:11:24,180
So there with that with a colleague you log in Meffert and we're faking Well a log in there.

132
00:11:24,240 --> 00:11:28,670
Next goal is to adjust the header or Dynevor game.

133
00:11:28,680 --> 00:11:35,490
And in general whenever we do log in or whenever we have a registered user in general right now if we

134
00:11:35,490 --> 00:11:41,280
have a look at our application we always see Sign-Up log in training and log out would be nice to only

135
00:11:41,280 --> 00:11:44,100
see sign up and log in if we're not logged in.

136
00:11:44,310 --> 00:11:47,650
And only see training and log out if we are.

137
00:11:48,030 --> 00:11:58,310
So to make this work one thing I will do is I will add an event emitter in my office service.

138
00:11:58,590 --> 00:12:05,580
This is used so that I can inform other parts of the app about changes in the education flow or in the

139
00:12:05,580 --> 00:12:07,630
offending patient status I should say.

140
00:12:08,050 --> 00:12:13,800
I am not going to use the event dimeter angular ships with because you should only use that to create

141
00:12:13,800 --> 00:12:17,020
custom events which you emit in components instead.

142
00:12:17,050 --> 00:12:22,670
Are you something from a different package from our X J.S. which is a dependency of angular.

143
00:12:22,740 --> 00:12:25,800
That provides a so-called observables.

144
00:12:25,800 --> 00:12:36,270
For that let's go to the off service TS file and then there are at import at the very top import subject

145
00:12:36,600 --> 00:12:43,500
from our X say J as slashes up checked as object is essentially the same as an event emitter or you

146
00:12:43,500 --> 00:12:49,810
could say it's an object allows you to event emits and subscribed to it and other parts of the map.

147
00:12:50,100 --> 00:12:58,700
So whenever we register a user I want to emit an event for that I'll create a new public property off

148
00:12:58,710 --> 00:12:59,650
change here.

149
00:12:59,700 --> 00:13:01,270
So it won't add private.

150
00:13:01,470 --> 00:13:05,570
And this is going to be a new subject which is a generic type.

151
00:13:05,570 --> 00:13:11,340
So that means it can hold payloads of different type and I'm going to pass a payload which will be a

152
00:13:11,340 --> 00:13:16,660
boolean either true or false indicating whether we are signed in or not.

153
00:13:18,000 --> 00:13:19,790
This will be executed.

154
00:13:19,920 --> 00:13:21,750
Whenever we register a user.

155
00:13:21,780 --> 00:13:23,650
So then will call off change.

156
00:13:23,850 --> 00:13:27,210
And now it's not emit but actually next.

157
00:13:27,480 --> 00:13:31,990
Here we have to pass the value and this will be true because the next value is true.

158
00:13:32,040 --> 00:13:33,880
Remember it's a boolean payload.

159
00:13:34,140 --> 00:13:40,260
So dead whoever is subscribing to all change will get this data and knows whether you off change is

160
00:13:40,260 --> 00:13:45,950
from locked into locked out or like in this case from Locked out to lock in.

161
00:13:45,990 --> 00:13:53,490
And I'm simply defining that true should mean you are locked in now all emit the same and log in and

162
00:13:53,490 --> 00:13:59,650
after lock out all emit false because you are no longer locked in.

163
00:13:59,930 --> 00:14:02,350
So now we get our events set up here.

164
00:14:02,450 --> 00:14:08,900
We can now use it in places where we want to react to such a change and a good example would be in our

165
00:14:08,900 --> 00:14:10,500
head or component.

166
00:14:10,910 --> 00:14:15,880
So let's head over to navigation and then the Hetrick component here.

167
00:14:16,100 --> 00:14:24,890
I want to inject the off service so let's add that off service here of type of service and the import

168
00:14:24,920 --> 00:14:30,230
at the top of the file just as you did in the average components you're pointing to that often service

169
00:14:30,230 --> 00:14:35,810
file in the off folder in the off section of the app.

170
00:14:36,090 --> 00:14:42,150
And with that it Engy on it which is executed when the component is created.

171
00:14:42,240 --> 00:14:50,750
I want to set up a subscription by reaching out to you off change and calling subscribe now here.

172
00:14:51,500 --> 00:14:54,260
I will receive this admitted data.

173
00:14:54,260 --> 00:14:55,900
So true or false.

174
00:14:56,120 --> 00:14:58,480
Whenever we call next.

175
00:14:58,610 --> 00:15:05,820
So whenever we execute this code or this code or this code here in the log in.

176
00:15:06,040 --> 00:15:14,260
So in the navigation Hetter component I get is off status which is either true or false and I want to

177
00:15:14,260 --> 00:15:18,130
set it to some property is off which is a boolean.

178
00:15:18,130 --> 00:15:24,020
Lets say so in here I will set is off equal to off status.

179
00:15:24,160 --> 00:15:30,490
Because it's true if we're locked in it's fault if we're not now important if you're subscribing to

180
00:15:30,490 --> 00:15:36,830
an observable as we are doing it here you also should unsubscribe if you don't need it anymore.

181
00:15:36,850 --> 00:15:40,980
This clears up anew memory and prevents memory leaks.

182
00:15:41,140 --> 00:15:45,040
To do that you actually need to import something else from our.

183
00:15:45,220 --> 00:15:46,240
And that's something else.

184
00:15:46,240 --> 00:15:49,490
It's a subscription you imported from our.

185
00:15:49,550 --> 00:16:00,610
Yes slash substraction This allows you to create a new property of subscription maybe of type subscription

186
00:16:02,960 --> 00:16:07,910
which is undefined initially but where do you store days subscription.

187
00:16:08,030 --> 00:16:10,370
You are creating here.

188
00:16:10,520 --> 00:16:14,680
So off service subscribe will return a news subscription.

189
00:16:15,290 --> 00:16:19,090
You should unsubscribe whenever this component gets destroyed.

190
00:16:19,100 --> 00:16:29,670
So let's implement on the stroy lifecycle hook you also now need to import data from at angular core.

191
00:16:29,720 --> 00:16:32,520
So up there you should add on the stroy.

192
00:16:33,050 --> 00:16:39,210
And this now forces you to add a new method to your component energy on destroy.

193
00:16:41,340 --> 00:16:46,520
Where you simply call this off subscription and call unsubscribe.

194
00:16:46,530 --> 00:16:50,750
This clears up the unneeded memory because you no longer need that subscription.

195
00:16:50,760 --> 00:16:52,690
The component is dead anyways.

196
00:16:52,770 --> 00:16:54,660
It wouldn't unsubscribe by default though.

197
00:16:54,750 --> 00:16:58,140
So that's why you have to do that with all that set up.

198
00:16:58,290 --> 00:17:05,460
We get is of bullion that is undefined Initially we can also set it to false initially which allows

199
00:17:05,460 --> 00:17:11,620
us to remove data type definition but which we then set to either true or false whenever off change

200
00:17:11,740 --> 00:17:13,630
changes.

201
00:17:13,630 --> 00:17:20,560
So with that what we can do is we can go to the head or component template and now define what we want

202
00:17:20,560 --> 00:17:22,900
to display under which circumstances.

203
00:17:23,230 --> 00:17:25,860
So the sign up link here.

204
00:17:25,870 --> 00:17:30,430
So this list item should only be displayed if we're not locked in.

205
00:17:30,430 --> 00:17:30,930
Right.

206
00:17:30,970 --> 00:17:37,000
So let's add Engy if and set is equal to it not is off we want to display it if we're not offending

207
00:17:37,000 --> 00:17:40,480
hated the same for log in for training.

208
00:17:40,480 --> 00:17:41,710
The opposite is the case.

209
00:17:41,800 --> 00:17:46,990
This should only be displayed if we are often the case that at the same for log out there should also

210
00:17:46,990 --> 00:17:50,140
only be displayed if we are vindicated with that.

211
00:17:50,350 --> 00:17:57,400
If we go back to the application you can see we only see sign up and log in I still was able to access

212
00:17:57,400 --> 00:17:59,230
training will work on this in a second.

213
00:17:59,620 --> 00:18:06,130
But if I now go to log in and enter anything here we don't have any checks and submit.

214
00:18:06,130 --> 00:18:08,510
Now you see the menu changes.

215
00:18:08,680 --> 00:18:10,150
We're not getting redirected.

216
00:18:10,150 --> 00:18:12,310
We're not protecting our other routes.

217
00:18:12,310 --> 00:18:13,840
These are things we can add.

218
00:18:14,110 --> 00:18:20,120
But we got a working state management of the offending nation status for now.

219
00:18:20,150 --> 00:18:28,240
Now with that out of the way let's do the same for the side neth because there if we inspect that we

220
00:18:28,240 --> 00:18:32,680
also got a couple of items we don't want to show if we're not locked in.

221
00:18:32,720 --> 00:18:35,350
Is this your challenge in the next lecture.

