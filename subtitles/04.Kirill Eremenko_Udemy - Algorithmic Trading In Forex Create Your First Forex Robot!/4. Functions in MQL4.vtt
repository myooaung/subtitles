WEBVTT
1
00:00:07.570 --> 00:00:10.010
Hello this is Carol from for Expo dot com.

2
00:00:10.010 --> 00:00:15.210
And welcome to the 16th tutorial on algorithmic trading for beginners.

3
00:00:15.310 --> 00:00:22.780
And in this tutorial we're going to be talking about functions in general for so what are functions.

4
00:00:22.780 --> 00:00:26.140
Functions are very similar to a blender.

5
00:00:26.140 --> 00:00:27.480
Let me explain.

6
00:00:27.670 --> 00:00:35.350
If you take a blender if you take some fruit and you put it into a blender then as an output you will

7
00:00:35.350 --> 00:00:41.150
receive a very tasty and amazing fruit smoothie.

8
00:00:41.230 --> 00:00:49.960
So basically you take fruit you put in a blender you get a smoothie functions in em kill four and essentially

9
00:00:50.200 --> 00:00:57.040
any other programming language work on a very very similar basis.

10
00:00:57.310 --> 00:01:03.820
All you need to do is take some input variables you put them into a function which is a blender in this

11
00:01:03.820 --> 00:01:12.090
example and you get a result as your output which is our smoothy in this example.

12
00:01:12.530 --> 00:01:16.090
And so that's basically how they work.

13
00:01:16.090 --> 00:01:22.420
Let's see how this all materializes in practice.

14
00:01:22.420 --> 00:01:32.660
So here I've prepared a tutorial number 16 a blank script like we usually do and we're going to create

15
00:01:32.690 --> 00:01:40.240
two values in On-Star functional code will create a value into a and you get a value of.

16
00:01:40.760 --> 00:01:48.290
We give this variable a value of 10 and it will create a variable and be given a value of 5.

17
00:01:48.290 --> 00:01:52.040
Now we want to add these two values but we don't want.

18
00:01:52.040 --> 00:02:02.060
Just like we usually do we don't want to just say see Cool's A plus B semicon because we worry not how

19
00:02:02.070 --> 00:02:05.320
to do this we want to use a function to add these two values.

20
00:02:05.660 --> 00:02:19.430
And B basically we want to take this bit and we want to outsource this calculation to a designated function.

21
00:02:19.580 --> 00:02:31.390
So we get rid of that for now and we'll create a new function and this function we will call my addition.

22
00:02:31.490 --> 00:02:33.520
So that's the name or all function.

23
00:02:34.100 --> 00:02:35.820
Now within curly brackets.

24
00:02:35.840 --> 00:02:40.430
We have to specify what this function will accept as parameters.

25
00:02:40.430 --> 00:02:47.230
In our case it will accept a value an integer value which will be value 1 and in other integer value

26
00:02:47.240 --> 00:02:48.160
value 2.

27
00:02:48.380 --> 00:02:55.010
So those two values have to be separated by a comma and you can give them any names you like but the

28
00:02:55.010 --> 00:03:04.370
main point of this declaration part is to actually tell the user of or the code that we'll be using

29
00:03:04.370 --> 00:03:05.140
this function.

30
00:03:05.390 --> 00:03:08.490
What kind of parameters you are.

31
00:03:08.540 --> 00:03:14.590
Are X are acceptable to be passed on to this function.

32
00:03:14.600 --> 00:03:20.700
In our case this function can only accept two integer values.

33
00:03:20.750 --> 00:03:27.860
Next we want to say what this function will be outputting so often will be outputting an integer value.

34
00:03:27.920 --> 00:03:30.710
So that's why here at the beginning we'll type in.

35
00:03:30.740 --> 00:03:34.290
We don't put any name off to as we just type it.

36
00:03:34.340 --> 00:03:43.580
And that means that this function will be putting an integer if you call the diagram and we looked at

37
00:03:43.630 --> 00:03:44.120
previous.

38
00:03:44.130 --> 00:03:49.790
So this will be a fruit or this will be a specification that you want.

39
00:03:49.790 --> 00:03:55.030
What kind of fruit or what kind of objects you're allowed to put in the blender.

40
00:03:55.040 --> 00:04:05.900
This is the name of the blender and this is the type of smoothie that you get as an output of this blender.

41
00:04:06.680 --> 00:04:10.800
So that's this part is called a declaration of a function.

42
00:04:10.940 --> 00:04:17.330
And often in programming languages you will see a semicolon at the end and this part will be separate

43
00:04:17.390 --> 00:04:21.280
to the actual body and description of the function.

44
00:04:21.530 --> 00:04:28.040
It could be in a header file it could be at the top of this file somewhere here but in Ankiel for we

45
00:04:28.040 --> 00:04:31.730
don't have to worry about that we don't need to create declarations.

46
00:04:31.760 --> 00:04:37.130
We're not going to worry about that we'll just create the whole function right away which will save

47
00:04:37.130 --> 00:04:41.350
us some time and it's just easier to understand that way.

48
00:04:41.360 --> 00:04:43.940
So after the declaration we need to

49
00:04:46.350 --> 00:04:51.910
enter or specify the body of the function what exactly it will do.

50
00:04:51.960 --> 00:04:55.270
So we're going to add two curly brackets.

51
00:04:55.710 --> 00:05:03.410
And within these curly brackets we have to write the body of the function.

52
00:05:03.450 --> 00:05:10.050
I hope you're noticing some similarity between this part and this part so also keyword keyword name

53
00:05:10.180 --> 00:05:17.250
a function and function brackets brackets and curly brackets curly brackets and the body goes in here.

54
00:05:17.370 --> 00:05:17.790
Correct.

55
00:05:17.790 --> 00:05:24.720
That's because this On-Star part of our program is actually also a function.

56
00:05:24.720 --> 00:05:29.700
It's a pretty fine function but it still is a function.

57
00:05:29.700 --> 00:05:35.550
Now within the addition function we want to specify what exactly our function will do with these two

58
00:05:35.550 --> 00:05:36.760
variables.

59
00:05:36.810 --> 00:05:41.660
So we want to add these two variables we want to call value 1 plus value 2.

60
00:05:41.850 --> 00:05:48.390
And so if we put a semi-colon in it and what will happen is these two values will be will be added and

61
00:05:48.390 --> 00:05:54.540
then they'll be basically the function will finish its execution and they'll be forgotten.

62
00:05:54.750 --> 00:06:01.550
We actually want to return these the sum of these two values to the calling code.

63
00:06:01.590 --> 00:06:05.530
So here we'll write return.

64
00:06:07.530 --> 00:06:13.550
So we want to add these two values the result we want to return it and then say colon.

65
00:06:13.820 --> 00:06:20.690
And that rule that says that basically means the end of our function.

66
00:06:20.720 --> 00:06:28.230
So here in C we want to call a function so we'll take my addition we'll call it here and within the

67
00:06:28.230 --> 00:06:34.770
brackets as you can see him kill for is already prompting us what it wants within these brackets and

68
00:06:34.770 --> 00:06:41.550
it has to be an integer and an other integer and also kill for is telling that telling us that the function

69
00:06:41.550 --> 00:06:46.870
will return an integer and it's getting this information from down here.

70
00:06:47.100 --> 00:06:54.260
So we want to parse two integers which will be a and comma B.

71
00:06:54.800 --> 00:07:04.620
And then we have to put a semicolon on and so that will add the two values and B and put the result

72
00:07:04.710 --> 00:07:06.570
into variable c..

73
00:07:06.570 --> 00:07:14.670
How can we check that we can check that very easily with our alerts that we'll type in C equals call

74
00:07:14.770 --> 00:07:26.230
mom and we will type in C so this is a text and this is actually the value of c.

75
00:07:26.540 --> 00:07:31.920
And once again alert and in brackets brackets semi-colon does that remind you of this.

76
00:07:31.920 --> 00:07:32.730
That's correct.

77
00:07:32.760 --> 00:07:40.980
Because it is also a function as you can see a lot of our program actually consist of function because

78
00:07:40.980 --> 00:07:44.910
it's a very convenient way of separating your code.

79
00:07:45.180 --> 00:07:48.330
So now let's get back to this and compile it.

80
00:07:48.360 --> 00:07:49.220
No errors.

81
00:07:49.230 --> 00:07:53.740
Let's go to the terminal.

82
00:07:53.960 --> 00:07:54.870
There we are.

83
00:07:55.160 --> 00:08:02.540
And so now we will drag our tutorial 16 onto this chart

84
00:08:06.370 --> 00:08:08.650
that sets an existing order that we had actually.

85
00:08:08.740 --> 00:08:09.480
I won't drag it.

86
00:08:09.480 --> 00:08:13.490
Now I'll just I'll just close this order for now.

87
00:08:15.100 --> 00:08:18.370
So it's not in the way.

88
00:08:18.380 --> 00:08:25.200
All right so turtle 16 as you can see C equals 15 which is correct.

89
00:08:25.200 --> 00:08:33.050
Now if we go back to our code we can easily change the function if we want to multiply we put a star

90
00:08:33.060 --> 00:08:33.440
here.

91
00:08:33.480 --> 00:08:34.630
Compile.

92
00:08:34.860 --> 00:08:37.470
Go back to the terminal.

93
00:08:37.540 --> 00:08:43.500
Now if we pull over Tauriel 16 see the result is 50 C equals 50.

94
00:08:43.500 --> 00:08:47.200
And that basically means that we've just changed the function.

95
00:08:47.210 --> 00:08:52.260
You can also divide one by the other compile terminal

96
00:08:55.570 --> 00:08:57.600
sequel's too.

97
00:08:57.840 --> 00:09:02.840
So that's basically it that's how functions work.

98
00:09:03.240 --> 00:09:07.750
They allow you to outsource bits of your code or separated.

99
00:09:07.860 --> 00:09:14.130
And then you can very quickly modify it and you can use this function many times if your code.

100
00:09:14.220 --> 00:09:19.040
And imagine if you wanted if you had two more variables here.

101
00:09:19.800 --> 00:09:31.160
D equals 100 and it equals 20 and you wanted to do the same thing with them.

102
00:09:31.380 --> 00:09:40.080
You could you could just copy the function and you could go type and D E here and now you using this

103
00:09:40.080 --> 00:09:40.860
function twice.

104
00:09:40.860 --> 00:09:46.920
But if you want to change what this function does then you just have to change it once so it actually

105
00:09:46.920 --> 00:09:48.430
speeds up the process.

106
00:09:48.840 --> 00:09:51.840
It's a very convenient way of programming.

107
00:09:51.980 --> 00:09:57.040
Let's go back to that presentation and see what what is next.

108
00:09:57.060 --> 00:10:04.650
So the result the result can be of two types the result can be an output value as we have seen or the

109
00:10:04.650 --> 00:10:12.780
result can be an action an action such as display a message which we have seen in the case of the alert

110
00:10:12.780 --> 00:10:13.560
function.

111
00:10:13.560 --> 00:10:19.290
What it does it doesn't add anything but it actually plays a message on your screen function can draw

112
00:10:19.290 --> 00:10:27.840
an object a function can open close modify an order and etc. and this particular case when a function

113
00:10:27.840 --> 00:10:33.180
opens an order we look we saw that in the previous tutorial when we use the order send function and

114
00:10:33.570 --> 00:10:44.910
it by passing parameters into that function it created an order for us and also a function can do the

115
00:10:44.910 --> 00:10:46.110
combination of these two.

116
00:10:46.110 --> 00:10:51.520
It can do an action and you can output a value at the same time.

117
00:10:51.720 --> 00:11:01.850
And let's go back to our previous tutorial just quickly tutorial 15 and look at the code here.

118
00:11:02.010 --> 00:11:05.360
If you remember this code it actually gave us a warning.

119
00:11:05.550 --> 00:11:07.860
And so we'll compile this now.

120
00:11:08.710 --> 00:11:14.850
And it compiles but it still gives us a warning and says return value of order send should be checked.

121
00:11:15.150 --> 00:11:23.900
And if we go into order send by clicking F1 here we can see that order sent actually returns an integer.

122
00:11:24.060 --> 00:11:30.240
So it not only does an action after receiving all of these parameters meaning it opens an order.

123
00:11:30.240 --> 00:11:38.130
It also returns an integer and we won't go into a lot of detail at this stage but this integer actually

124
00:11:40.500 --> 00:11:48.780
it carries an important function it tells us our important purpose it tells us whether or not the order

125
00:11:48.780 --> 00:11:50.400
was open successfully.

126
00:11:50.400 --> 00:11:57.930
And if this integer is less than zero then the order was not open successfully.

127
00:11:57.990 --> 00:12:06.240
And that's how you know that's why the compiler is asking us to check those values so ideally we should

128
00:12:06.240 --> 00:12:13.620
have here we should have something like resolved equals orders sent and then here we would have some

129
00:12:13.620 --> 00:12:18.680
code to check result.

130
00:12:18.680 --> 00:12:27.540
So if we compile that now we won't get any errors because the compilers happy that we're accounting

131
00:12:27.540 --> 00:12:29.110
for this return value.

132
00:12:29.130 --> 00:12:30.560
And we're checking it.

133
00:12:30.960 --> 00:12:36.800
But we'll go deeper into this further on through the course.

134
00:12:37.020 --> 00:12:45.300
At this stage we should just remember that functions take input variables and then they have an output

135
00:12:45.300 --> 00:12:55.530
value and they do something in their body which can be an action or some manipulation of the values.

136
00:12:55.590 --> 00:12:59.430
And most of the time they return a value.

137
00:12:59.820 --> 00:13:01.690
So that's that.

138
00:13:02.070 --> 00:13:04.230
That's quite a lot of different information for today.

139
00:13:04.230 --> 00:13:15.000
So maybe have a look at this function and the scope and create some of your own personal functions maybe

140
00:13:15.000 --> 00:13:22.470
addition subtraction maybe add some more out of variables into this code just to understand how functions

141
00:13:22.470 --> 00:13:26.650
work and how you can use them in your own programs.

142
00:13:26.880 --> 00:13:32.340
And we will definitely be using them going forward because in the next couple of turtles we're going

143
00:13:32.340 --> 00:13:39.100
to be really closing orders using function the order close function and modifying orders and so on.

144
00:13:39.390 --> 00:13:43.770
So that's it for this Tauriel and until next time IP coning.
