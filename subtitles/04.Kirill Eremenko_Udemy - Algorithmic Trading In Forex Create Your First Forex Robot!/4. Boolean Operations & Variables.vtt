WEBVTT
1
00:00:07.770 --> 00:00:10.870
Hello this is Carol from Florida DOT com.

2
00:00:11.000 --> 00:00:17.490
And welcome to part four of our series of call for tutorials for complete beginners.

3
00:00:17.960 --> 00:00:24.460
Today we'll be talking about Boolean operations and boolean parables.

4
00:00:24.650 --> 00:00:28.550
So this is the Mirror editor programming environment.

5
00:00:28.610 --> 00:00:31.730
And let's go ahead and creating your script.

6
00:00:31.730 --> 00:00:35.690
We do this by clicking the New button in the top left corner.

7
00:00:36.200 --> 00:00:42.250
Then we'd expect script next and give us the name.

8
00:00:42.620 --> 00:00:45.520
I'm just going to call mind tural for them.

9
00:00:45.520 --> 00:00:52.290
Could you check that this is indeed our information and we don't need any parameters.

10
00:00:52.290 --> 00:00:57.170
And then we just put in ASH and there we go that's our script template.

11
00:00:57.170 --> 00:01:03.430
I'm just going to get rid of these two lines which are actually comments and are not necessary and I

12
00:01:03.440 --> 00:01:09.340
will start off by talking about Boolean expressions.

13
00:01:09.470 --> 00:01:14.510
So any boolean expression can have one of two distinct values.

14
00:01:14.510 --> 00:01:17.210
True false.

15
00:01:17.240 --> 00:01:27.420
So there's only two values and no more than that was an example of four is less than five.

16
00:01:28.130 --> 00:01:38.180
This is an expression and in the world of em killed for when the program's running this expression will

17
00:01:38.240 --> 00:01:46.700
actually be replaced by its result and the result of this expression is true because four is actually

18
00:01:46.730 --> 00:01:47.360
less than 5.

19
00:01:47.360 --> 00:01:56.210
So this value if true will be put instead of this expression and how we can check this is by adding

20
00:01:56.300 --> 00:01:59.440
the word statement and in that way.

21
00:01:59.450 --> 00:02:07.920
So just compile that will go to the terminal and find 2 or 4 and we'll run it.

22
00:02:09.020 --> 00:02:14.130
And as you can see it returns a value of true that's good.

23
00:02:14.240 --> 00:02:19.120
Just a couple here to remember.

24
00:02:19.220 --> 00:02:20.670
Now let's look at another one.

25
00:02:20.670 --> 00:02:25.760
Say 10 is greater than 100.

26
00:02:25.880 --> 00:02:30.510
We expect this expect this one to be false.

27
00:02:30.530 --> 00:02:32.020
I'll have a look.

28
00:02:33.370 --> 00:02:39.300
So choose the first one and the second statement is false which is correct.

29
00:02:39.300 --> 00:02:41.270
Let's look another one alert.

30
00:02:41.320 --> 00:02:44.120
And we want to check if two equals three.

31
00:02:44.410 --> 00:02:54.520
So as you can remember from last for the last Tauriel equals the single equals is the peroration for

32
00:02:54.520 --> 00:02:59.230
assignment for checking if two values are the same.

33
00:02:59.230 --> 00:03:01.020
We need to do double equals.

34
00:03:01.480 --> 00:03:05.460
So that's how we check if two equals three.

35
00:03:05.470 --> 00:03:09.270
This one we also expect to be false compile.

36
00:03:09.630 --> 00:03:12.110
Let's check that.

37
00:03:12.320 --> 00:03:17.780
The truth is the first one also the second statement 10 is not greater than 100.

38
00:03:17.840 --> 00:03:19.580
And last one is false as well.

39
00:03:19.580 --> 00:03:22.580
Two is not equal to three.

40
00:03:22.580 --> 00:03:23.710
All right.

41
00:03:23.930 --> 00:03:25.100
So in

42
00:03:29.000 --> 00:03:37.140
Q4 we have six different logical operations and I'll just list in here.

43
00:03:37.280 --> 00:03:46.270
So it's a double equals is to check if two expressions are equal.

44
00:03:46.490 --> 00:03:57.770
So much more call is to check if two expressions are not equal less than greater than less than or equal

45
00:03:57.770 --> 00:04:01.870
to and greater than or equal to.

46
00:04:02.150 --> 00:04:07.030
So that's basically all of the logical expressions.

47
00:04:07.040 --> 00:04:17.220
And we've already used three here in our examples the next step is to look at how we can actually store

48
00:04:17.220 --> 00:04:20.160
the results of these expressions and variables.

49
00:04:20.160 --> 00:04:23.400
So I'll just comment that because we don't need it.

50
00:04:25.150 --> 00:04:31.890
And move it back by pressing shift tab shift happens we'll move to move back and tabus to move forward.

51
00:04:32.160 --> 00:04:42.410
So we're back to keep our consistent formatting and we'll look at a boolean variable we'll call it result

52
00:04:43.720 --> 00:04:47.620
and we'll give this variable.

53
00:04:47.690 --> 00:04:55.080
The result of we'll assign this variable the result of the expression for is less than 5.

54
00:04:55.090 --> 00:04:58.550
So for us and five that's true.

55
00:04:58.570 --> 00:05:08.190
So the value true will be substituted here and it will be recorded into result and then we'll print

56
00:05:08.200 --> 00:05:10.900
result out using an early stage.

57
00:05:11.650 --> 00:05:21.830
So what do we expect to see is true on our screen as we go in just one alert and is true.

58
00:05:22.190 --> 00:05:23.700
That's that's great.

59
00:05:23.710 --> 00:05:26.540
That means everything is working as we expect.

60
00:05:26.540 --> 00:05:28.770
Is this true.

61
00:05:28.840 --> 00:05:38.080
So in that way you can store results of logical expressions in boolean variables and that will come

62
00:05:38.080 --> 00:05:49.560
in very handy when in the next tutorial we talk about what the while loop that's over today and maybe

63
00:05:49.570 --> 00:06:01.880
have a play around with these other logical expressions and hope that tutorial was useful and see you

64
00:06:02.150 --> 00:06:03.440
on the next one until then.
