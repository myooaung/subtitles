WEBVTT
1
00:00:06.440 --> 00:00:15.770
You'll learn about Layer 4 of the OSI model, the Transport Layer, in this lecture. Layer 4, Transport

2
00:00:15.770 --> 00:00:23.430
Layer, it provides transparent transfer of data between hosts and is responsible for end-to-end error

3
00:00:23.540 --> 00:00:25.960
recovery and flow control.

4
00:00:26.570 --> 00:00:33.770
But as you'll learn as we go through the lecture, that is not mandatory. So maybe the Layer 4 protocol

5
00:00:33.770 --> 00:00:36.320
will support error recovery and flow control,

6
00:00:36.320 --> 00:00:37.160
maybe it won't.

7
00:00:37.160 --> 00:00:41.330
You'll see the implications of that as we go through. So in flow control,

8
00:00:41.750 --> 00:00:47.570
it's the process of adjusting the flow of data from the sender to ensure that the receiving host can

9
00:00:47.570 --> 00:00:49.930
handle all of it.

10
00:00:50.300 --> 00:00:56.930
So if the sender is sending too quickly, maybe because we've got faster network connections on that side,

11
00:00:57.650 --> 00:01:05.690
and it's sending more than the receiving host can accept, then if flow control is enabled, the receiving

12
00:01:05.690 --> 00:01:12.780
host will have a mechanism to signal back to the sender, telling it to slow down.

13
00:01:12.830 --> 00:01:18.570
Another thing that is supported at Layer 4 is session multiplexing.

14
00:01:18.680 --> 00:01:25.340
This is a process by which a host is able to support multiple sessions simultaneously and manage the

15
00:01:25.340 --> 00:01:28.700
individual traffic streams over a single link.

16
00:01:28.700 --> 00:01:30.980
So, let's take a look at how that works.

17
00:01:31.010 --> 00:01:37.790
So, the example here, I've got a sender on the left, and there's going be a couple of receivers over on

18
00:01:37.850 --> 00:01:39.030
the right.

19
00:01:39.080 --> 00:01:48.830
The sender sends some email, SMTP traffic, to the top receiver on port 25, and it also sends

20
00:01:48.830 --> 00:01:56.690
some web traffic on HTTP port 80 to the bottom receiver, and it's also sending email traffic on

21
00:01:56.690 --> 00:02:02.930
port 25 to the bottom receiver as well. So you can see from the sender on the left, we've got

22
00:02:02.930 --> 00:02:09.289
three sessions from it. The top receiver on the right, we've got one session, and on the bottom receiver,

23
00:02:09.320 --> 00:02:11.009
we've got two sessions.

24
00:02:11.240 --> 00:02:18.290
It's the Layer 4, the Transport Layer, that is responsible for tracking and keeping control of the different

25
00:02:18.290 --> 00:02:26.040
sessions on a host. We have port numbers. Going back to that previous example again.

26
00:02:26.090 --> 00:02:32.750
You see, we've got two sessions going from the sender on the left to the bottom receiver on the right.

27
00:02:32.750 --> 00:02:34.880
One of them is web traffic.

28
00:02:34.880 --> 00:02:37.840
The other session is email traffic.

29
00:02:37.880 --> 00:02:44.000
So when the traffic comes into the receiver, how does it knew which application this traffic is for?

30
00:02:44.000 --> 00:02:48.630
Is it for its web server application, or is it for its email server application?

31
00:02:48.680 --> 00:02:57.290
The way it knows is with the Layer 4 port numbers. For example, HTTP web traffic uses port 80.

32
00:02:57.290 --> 00:02:59.630
SMTP email uses port 25.

33
00:02:59.660 --> 00:03:04.490
We'll talk about some of the other common port numbers at the end of the lecture as well.

34
00:03:04.490 --> 00:03:11.480
The sender also adds a source port number to the Layer 4 header as well.

35
00:03:11.480 --> 00:03:16.780
The combination of source and destination port numbers can be used to track sessions.

36
00:03:16.790 --> 00:03:18.660
So, let's see how that works as well.

37
00:03:18.700 --> 00:03:22.470
Here, we've just got one sender on the left, the receiver on the right,

38
00:03:22.700 --> 00:03:29.780
and we're sending web traffic again here. So the sender, it sends it with a destination port of port 80,

39
00:03:29.960 --> 00:03:37.070
the standard port for web traffic, and it will use a random source port number above 1024.

40
00:03:37.100 --> 00:03:40.540
In our example, it's using source port 1500.

41
00:03:41.000 --> 00:03:47.630
So, we've got a connection between the sender and receiver. When the receiver sends traffic back, it will

42
00:03:47.630 --> 00:03:51.560
flip the source and destination port numbers around.

43
00:03:51.560 --> 00:03:59.060
So it will use port 80 as its source now, and the destination will be port number 1500.

44
00:03:59.090 --> 00:04:04.320
This is how stateful firewalls are able to keep track of connections as well.

45
00:04:04.430 --> 00:04:06.990
Imagine that rather than a switch in the middle there,

46
00:04:07.010 --> 00:04:13.490
if it was a firewall, and we had a rule in the firewall that said traffic is allowed out from the sender

47
00:04:13.520 --> 00:04:15.930
on the left out to the network on the right,

48
00:04:16.100 --> 00:04:21.390
but traffic is not allowed from the right to the left unless it was initiated from the sender.

49
00:04:21.410 --> 00:04:26.240
If you manage to follow that, well, in that case, on the firewall, we're allowing traffic from the sender

50
00:04:26.240 --> 00:04:32.360
to the receiver. That traffic is allowed outbound. When the return traffic comes back, the firewall could

51
00:04:32.360 --> 00:04:38.330
see based on the source and destination port numbers, "Oh, this is return traffic going back to that

52
00:04:38.330 --> 00:04:39.390
sender again,

53
00:04:39.440 --> 00:04:44.630
so I'll allow this traffic to come through." If your traffic had been initiated by the host on the right,

54
00:04:44.630 --> 00:04:52.840
it would not allow that traffic. Okay, so that's how stateful firewalls work. Our two most common

55
00:04:52.840 --> 00:05:00.970
protocols at Layer 4 are TCP, which is the Transport Control Protocol, and UDP, which is the User

56
00:05:01.090 --> 00:05:09.370
Datagram Protocol. TCP is connection-oriented. As we go through the rest of this lecture, you'll see that

57
00:05:09.490 --> 00:05:14.440
a lot of the main characteristics of TCP and UDP are opposite each other.

58
00:05:14.440 --> 00:05:21.020
And after that. I've explained both protocols. I'll explain why that is. TCP, it's connection-oriented, meaning

59
00:05:21.020 --> 00:05:27.130
that once a connection is established, data can be sent bidirectionally over the two hosts over that

60
00:05:27.160 --> 00:05:34.540
connection. TCP carries out sequencing, so it includes sequence numbers in the traffic to ensure that segments

61
00:05:34.600 --> 00:05:37.690
are processed in the correct order, and none are missing.

62
00:05:37.690 --> 00:05:43.120
So when traffic comes into the receiver, it can look at the sequence number, and it can use that to make

63
00:05:43.120 --> 00:05:46.560
sure it assembles the traffic in the correct order again.

64
00:05:46.730 --> 00:05:55.030
It can also check from the sequence numbers if a segment was lost in transit as well. TCP is reliable. Receiving

65
00:05:55.030 --> 00:06:01.000
host sends acknowledgments back to the sender. So based on the sequence numbers, the receiver can see

66
00:06:01.000 --> 00:06:08.950
if all the traffic has come in. If any traffic is being lost in transit, then it will tell the sender that

67
00:06:08.970 --> 00:06:14.260
that happened. The way it does it is by not sending an acknowledgment back to the sender. When a

68
00:06:14.280 --> 00:06:22.440
sender realizes that traffic is being lost, it will resend that traffic again. TCP can also perform flow control

69
00:06:22.450 --> 00:06:23.230
as well.

70
00:06:23.230 --> 00:06:29.440
So if the sender is sending a rate too high and the receiver cannot handle it, the receiver can signal

71
00:06:29.440 --> 00:06:38.590
back to the sender, telling it to slow down. So TCP, it's connection-oriented, reliable protocol. The way that

72
00:06:38.590 --> 00:06:46.470
that connection is set up between the two hosts is it uses the TCP three-way handshake.

73
00:06:46.480 --> 00:06:49.880
So here, we've got the sender on the left. It's going to initiate the connection.

74
00:06:50.050 --> 00:06:57.120
It sends a SYN, a Synchronized Message, over to the receiver on the right. When the receiver receives that,

75
00:06:57.220 --> 00:07:00.960
it will send SYN-ACK back, so a Synchronized Acknowledgment,

76
00:07:01.000 --> 00:07:06.700
and then finally, to complete the connection, the sender will send an acknowledgment, ACK. We now have the

77
00:07:06.700 --> 00:07:14.220
connection set up between the two hosts, and they can send traffic over it. The next thing I'm going to

78
00:07:14.260 --> 00:07:18.310
show you is the makeup of the TCP header.

79
00:07:18.310 --> 00:07:23.650
But just before I show you, I wanted to give you a quick reminder from the previous lesson about how

80
00:07:23.650 --> 00:07:25.460
a packet is composed.

81
00:07:25.820 --> 00:07:28.930
So here, we've got the sender on the left, the receiver on the right,

82
00:07:29.070 --> 00:07:32.290
and we're going to send some traffic over there.

83
00:07:32.290 --> 00:07:37.770
So first off, as the sender is composing the packet, it will put in the Layer 7 information.

84
00:07:37.930 --> 00:07:44.860
It will then encapsulate that with the Layer 6 header. It then gets encapsulated with the Layer 5 header,

85
00:07:44.920 --> 00:07:52.000
then Layer 4 header, then Layer 3 header, Layer 2 header, and then we send it on to the physical wire.

86
00:07:52.000 --> 00:07:58.390
So what you're going to see in the next slide is how that Layer 4 header is composed, what comprises it.

87
00:07:59.970 --> 00:08:01.680
And here's how it looks.

88
00:08:01.700 --> 00:08:07.770
So we've got the source port and the destination port numbers, as we spoke about just there earlier.

89
00:08:08.040 --> 00:08:12.020
We then have the sequence number and the acknowledgment number.

90
00:08:12.150 --> 00:08:19.620
We have a header length, a reserved field, which is for any reserved information later. Code bits, window, which

91
00:08:19.620 --> 00:08:26.340
can be used for flow control. A checksum, which can be used to check and see if the traffic got corrupted

92
00:08:26.370 --> 00:08:27.510
in transit.

93
00:08:27.540 --> 00:08:34.020
We've got an optional urgent part of the header there as well. We can add other options, and then we've

94
00:08:34.020 --> 00:08:38.370
got the data. So see, there was quite a lot that goes in the TCP header.

95
00:08:38.370 --> 00:08:42.620
We'll contrast that with the UDP header coming up in a minute.

96
00:08:42.720 --> 00:08:51.780
Let's talk about UDP now. UDP is the User Datagram Protocol, and it sends traffic best effort. Meaning,

97
00:08:51.990 --> 00:08:55.600
we don't have the connection, we don't have reliability.

98
00:08:55.770 --> 00:09:02.290
The sender just makes up the packet, sends it over to the receiver, and hopes that it's going to get there.

99
00:09:02.290 --> 00:09:04.990
So UDP, it's not connection-oriented.

100
00:09:05.110 --> 00:09:11.290
There's no handshake connection setup between the hosts. It doesn't carry out sequencing to ensure

101
00:09:11.310 --> 00:09:17.580
segments are processed in the correct order or missing. It's not reliable. The receiving host does not send

102
00:09:17.580 --> 00:09:21.750
acknowledgments back to the sender. It does not perform flow control.

103
00:09:21.840 --> 00:09:28.790
So, you know how I just said that the sender will send the traffic and hope it gets there?

104
00:09:29.130 --> 00:09:34.350
We can still have error detection and recovery for this traffic, but if it is required, it's going to

105
00:09:34.350 --> 00:09:40.330
be up to the upper layers. Higher, up to the application level, to actually provide that. It's not going to

106
00:09:40.350 --> 00:09:42.090
be provided by UDP.

107
00:09:42.990 --> 00:09:48.420
Looking at the UDP header, you'll see there's much less fields in here. All we have is the source

108
00:09:48.450 --> 00:09:55.050
and destination ports, the length, and a UDP checksum, and the data. So you can see by comparing the

109
00:09:55.050 --> 00:10:06.420
UDP header and the TCP header, there's much less overhead with UDP, which leads us to where TCP or UDP

110
00:10:06.450 --> 00:10:07.410
would be used.

111
00:10:07.410 --> 00:10:13.320
Now, this is up to the designer of the application. Whenever a designer designs an application, they can

112
00:10:13.320 --> 00:10:17.440
choose whether it's going to use TCP or UDP for its transport.

113
00:10:17.580 --> 00:10:26.340
They will typically choose to use TCP for traffic which requires reliability. But real-time applications

114
00:10:26.640 --> 00:10:31.680
such as voice and video can't afford that extra overhead of TCP,

115
00:10:31.680 --> 00:10:35.610
so they would use UDP. Voice and video,

116
00:10:35.640 --> 00:10:38.110
it's very sensitive to delay.

117
00:10:38.190 --> 00:10:45.000
You've probably watched TV before. You've seen a news report where the newscaster is doing it over a

118
00:10:45.000 --> 00:10:51.720
satellite phone, and you can see it's very laggy because satellites are famously high latency connections.

119
00:10:51.960 --> 00:10:55.410
So voice and video, it's very sensitive to latency.

120
00:10:55.500 --> 00:11:01.590
We don't want to use TCP for real-time traffic like that because the extra overhead is going to slow

121
00:11:01.590 --> 00:11:04.060
it down, and it's going to affect the quality.

122
00:11:04.080 --> 00:11:10.290
So for real-time traffic that's sensitive to delay, we'll usually use UDP. For other applications,

123
00:11:10.290 --> 00:11:16.680
we'll use TCP. And because there's a lot more other applications than voice and video, TCP is the most

124
00:11:16.680 --> 00:11:19.220
commonly used Layer 4 transport.

125
00:11:19.380 --> 00:11:24.580
There are some applications that can use both TCP and UDP as well.

126
00:11:24.630 --> 00:11:27.610
You'll see an example on the next slide.

127
00:11:27.780 --> 00:11:34.800
So here, we're going to look at some of the common applications and their destination ports. For applications

128
00:11:34.800 --> 00:11:35.770
that use TCP,

129
00:11:35.790 --> 00:11:45.060
we've got FTP, the File Transfer Protocol, that uses port 21. Secure Shell, SSH, is on Port 22. Telnet port 23,

130
00:11:45.060 --> 00:11:54.430
HTTP web traffic is on port 80, and HTTPS encrypted web traffic is on port 443.

131
00:11:54.510 --> 00:12:03.960
Some UDP protocols, we've got TFPT, the Trivial File Transfer Protocol uses port 69, and SNMP, the Simple Network

132
00:12:03.960 --> 00:12:13.170
Management Protocol, uses port 161. And the best-known application that can use both TCP and UDP is

133
00:12:13.170 --> 00:12:20.020
DNS on port 53. There are some other voice and video signaling protocols that can also use both

134
00:12:20.070 --> 00:12:22.200
TCP and UDP as well.

135
00:12:22.730 --> 00:12:23.090
Okay,

136
00:12:23.160 --> 00:12:29.910
so that was it. That was our Layer 4 Transport Layer lecture. I'll see you in the next one.

