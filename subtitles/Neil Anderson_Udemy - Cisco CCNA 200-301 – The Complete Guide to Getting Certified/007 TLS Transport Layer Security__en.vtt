WEBVTT
1
00:00:07.510 --> 00:00:15.610
In this lecture, you'll learn how traffic can be sent securely over the Internet with class transport,

2
00:00:15.610 --> 00:00:16.910
layer security.

3
00:00:17.470 --> 00:00:28.750
You can see on the definitions here that he is the successor to SSL, to SSL was available before Rothstein's

4
00:00:28.750 --> 00:00:30.010
for secure sockets.

5
00:00:30.010 --> 00:00:32.920
Layer SSL was not used anymore.

6
00:00:32.930 --> 00:00:41.630
It's now been replaced with close to last can be used to provide secure web browsing with https.

7
00:00:41.640 --> 00:00:43.000
That's what is best known for.

8
00:00:43.150 --> 00:00:49.120
But it can also be used to provide security for other applications like email as well.

9
00:00:50.750 --> 00:00:58.640
It uses symmetric cryptography to encrypt, transmit data and symmetric keys are generated uniquely

10
00:00:58.640 --> 00:00:59.900
for each connection.

11
00:01:00.090 --> 00:01:05.840
Jocie, as we go through the example in Mwencha, we're going to be shopping on Amazon.com.

12
00:01:06.080 --> 00:01:12.230
For every different customer shopping there, a different set of keys will be generated for each customer

13
00:01:12.380 --> 00:01:14.810
to keep all those different connections secure.

14
00:01:15.210 --> 00:01:21.410
Authentication is provided by public key cryptography and messenger authentication.

15
00:01:21.410 --> 00:01:23.690
Code provides the integrity.

16
00:01:25.390 --> 00:01:34.600
So looking at an example of how HDTV works over the Internet with TLC and in the example, you're going

17
00:01:34.600 --> 00:01:43.990
to be shopping on Amazon.com, but before that happens, Amazon.com needs to set up a secure certificate.

18
00:01:44.320 --> 00:01:48.550
So that is going to be signed by a certificate authority.

19
00:01:48.730 --> 00:01:53.790
And in our example, I'll use VeriSign because of all sorts of different public certificate of thought

20
00:01:53.810 --> 00:01:54.800
is available.

21
00:01:55.300 --> 00:02:00.310
So Amazon generates a public and a private keep here.

22
00:02:00.640 --> 00:02:07.590
They then send a certificate request to VeriSign, which includes their public key.

23
00:02:07.780 --> 00:02:09.800
So they go on to the VeriSign Web site.

24
00:02:09.820 --> 00:02:12.180
They say that they would like a certificate.

25
00:02:12.370 --> 00:02:18.370
They explain what the certificate is for and give some other details and send the public he as well.

26
00:02:18.610 --> 00:02:22.450
The private key never, ever leaves Amazon.com.

27
00:02:22.630 --> 00:02:27.010
Nobody sees that, including the certificate authority.

28
00:02:28.070 --> 00:02:36.950
Then VeriSign will Eivind verify that specific request really did come from Amazon, so they'll use

29
00:02:36.950 --> 00:02:43.580
a method such as telephone bill, ask some security questions there, will verify it really did come

30
00:02:43.580 --> 00:02:44.360
from Amazon.

31
00:02:44.630 --> 00:02:51.050
When they are happy, the very same will generate a certificate for Amazon.

32
00:02:51.200 --> 00:03:00.560
Included in the information and certificate will be which website is valid for which is W-W or Amazon.com.

33
00:03:00.560 --> 00:03:08.030
In our example, the certificate includes Amazon's public key and it is signed by Verizon's private

34
00:03:08.030 --> 00:03:08.320
keys.

35
00:03:08.360 --> 00:03:14.690
It does not include Verizon's private key that never leaves Verizon, but it is signed by Verizon's

36
00:03:14.690 --> 00:03:15.470
private key.

37
00:03:16.540 --> 00:03:24.340
And this is where you come in and you want to do some shopping on Amazon.com when you put your credit

38
00:03:24.340 --> 00:03:29.580
card details, when you want to make sure that they're secure and nobody's going to be able to sniff

39
00:03:29.780 --> 00:03:37.120
traffic and read your credit card details to the way it works is or the way the certificate works is

40
00:03:37.120 --> 00:03:44.050
with PCI, with the public key infrastructure and the Public Certificate Authority, which is very saying

41
00:03:44.050 --> 00:03:52.150
in our example, your web browser trusts the public certificate for is such as VeriSign and has a copy

42
00:03:52.150 --> 00:03:56.710
of their public keys that is built into your browser.

43
00:03:56.840 --> 00:03:59.440
You can see a screenshot from Firefox here.

44
00:03:59.440 --> 00:04:02.830
And actually, let me show you where you can find this information.

45
00:04:03.130 --> 00:04:13.510
So I will go to my Firefox window here and I'll go to the options and then go to privacy and security

46
00:04:14.020 --> 00:04:16.600
and scroll all the way down the bottom here.

47
00:04:16.720 --> 00:04:19.360
And you can see I've got the option to view certificates.

48
00:04:19.640 --> 00:04:20.740
So I click on that.

49
00:04:20.950 --> 00:04:26.920
You can see that all of the public certificate four is it's already built into Firefox.

50
00:04:27.010 --> 00:04:29.240
It trusts all of the public stage.

51
00:04:29.410 --> 00:04:32.860
Then you'll find the same for all the other Web browsers as well.

52
00:04:33.220 --> 00:04:37.270
OK, so going back to the slides again.

53
00:04:40.770 --> 00:04:43.690
So carrying on with our example.

54
00:04:44.100 --> 00:04:48.040
So what happens is you open up.

55
00:04:48.090 --> 00:04:56.340
Yes, Amazon.com in your Web browser, Amazon will then send you their certificate, which had been

56
00:04:56.340 --> 00:05:00.360
signed by a public certificate for a better sign.

57
00:05:00.360 --> 00:05:08.400
In our example, you or your browser will then verify that that is a valid certificate.

58
00:05:08.820 --> 00:05:11.730
It can do that because it has got better signs.

59
00:05:11.730 --> 00:05:18.120
Public key, because the certificate was signed by Verizon's private key, better saying are the only

60
00:05:18.120 --> 00:05:19.830
one with private key.

61
00:05:19.980 --> 00:05:28.470
And because you trust VeriSign, you now trust that this is a valid certificate for Amazon.com because

62
00:05:28.470 --> 00:05:30.990
you know for sure it was signed by VeriSign.

63
00:05:31.140 --> 00:05:33.210
Nobody else could have done not.

64
00:05:34.120 --> 00:05:40.000
So your browser trust VeriSign and Houseware Assange, public key, it's built into the browser, it

65
00:05:40.000 --> 00:05:47.380
checks for cert for Amazon.com with Verizon's public, he VeriSign is the only entity with their private

66
00:05:47.380 --> 00:05:47.810
key.

67
00:05:47.950 --> 00:05:50.100
So there is only one that could have done that.

68
00:05:50.290 --> 00:05:56.170
So if it checks out when it's decrypted with the public key, you know, it was signed by VeriSign is

69
00:05:56.170 --> 00:06:02.980
a valid certificate for Amazon to you now know that who you are communicating with has sent you the

70
00:06:02.980 --> 00:06:11.440
valid certificate for Amazon.com, but you don't know that you're communicating with Amazon.com yet

71
00:06:11.680 --> 00:06:16.660
because everybody else is going shopping and Amazon have been sent that certificate as well.

72
00:06:16.840 --> 00:06:19.360
So anybody could send you a certificate.

73
00:06:19.360 --> 00:06:25.750
You know, that certificate is valid, but you don't know who you're talking with is actually Amazon.

74
00:06:25.900 --> 00:06:27.960
You have not authenticated them yet.

75
00:06:28.950 --> 00:06:38.850
So you need to do that next, the way that happens is your PC will generate some random data, which

76
00:06:38.850 --> 00:06:48.570
is low for you in the example here, and it will then send that over to Amazon or who you think is Amazon

77
00:06:48.690 --> 00:06:56.130
and say if you really are Amazon, encrypt that with your private key from your certificate and send

78
00:06:56.130 --> 00:06:56.640
it back.

79
00:06:56.940 --> 00:07:06.030
So that comes in to Amazon and then they encrypt it with their private key, which matches the public

80
00:07:06.030 --> 00:07:07.740
key in their certificate.

81
00:07:07.890 --> 00:07:12.060
And then that ends up with some encrypted data.

82
00:07:12.300 --> 00:07:21.420
Amazon then send that back to you, then you decrypt that with the public key from Amazon certificate,

83
00:07:21.420 --> 00:07:22.660
which you know is valid.

84
00:07:22.680 --> 00:07:26.300
So, you know, it definitely is Amazon's public key.

85
00:07:26.610 --> 00:07:32.930
And when you decrypt it, if it comes back to being the same as the original data, which was a little

86
00:07:32.940 --> 00:07:41.400
for you, you know that you are for sure talking to Amazon because Amazon is the only one with Amazon's

87
00:07:41.400 --> 00:07:42.360
private key.

88
00:07:42.630 --> 00:07:46.860
You know that you had a valid copy of Amazon's public key.

89
00:07:47.130 --> 00:07:48.860
They're marching together now.

90
00:07:48.870 --> 00:07:51.780
So, you know, you are talking to Amazon.

91
00:07:54.050 --> 00:08:00.980
Your browser could now encrypt your credit card details with Amazon's public key when you make a purchase

92
00:08:01.070 --> 00:08:05.500
and nobody else other than Amazon would be able to read the details.

93
00:08:05.780 --> 00:08:13.670
But asymmetric key encryption is small and it's not suitable for bulk data exchange like web browsing.

94
00:08:13.830 --> 00:08:17.000
So we want to use symmetric key encryption.

95
00:08:17.180 --> 00:08:21.430
But right now, Amazon and you do not have a shared key.

96
00:08:21.680 --> 00:08:24.680
What you have right now is you've authenticated Amazon.

97
00:08:24.830 --> 00:08:25.250
You know that.

98
00:08:25.310 --> 00:08:26.950
You're definitely talking to them.

99
00:08:27.110 --> 00:08:31.790
Amazon have got their private key and you've got the corresponding public key.

100
00:08:33.820 --> 00:08:41.330
So what happens now is that your system will generate a shared keep six, seven, eight.

101
00:08:41.350 --> 00:08:46.630
In our example there, and it will encrypt that shared key with Amazon's public key.

102
00:08:47.050 --> 00:08:52.240
And it will then send in the encrypted format over to Amazon.

103
00:08:52.540 --> 00:08:55.920
Amazon will decrypt it with their private key.

104
00:08:56.050 --> 00:09:02.850
And now you've got the same shared key on both sides of the link, which can be used for this symmetric

105
00:09:02.860 --> 00:09:03.610
encryption.

106
00:09:04.030 --> 00:09:11.350
So now when you go to enter your credit card details that will be encrypted with the shared key sent

107
00:09:11.350 --> 00:09:12.790
over to Amazon.

108
00:09:13.000 --> 00:09:16.740
Amazon will decrypt it with the same symmetric sheared key.

109
00:09:16.930 --> 00:09:19.540
And now they've got your credit card details.

110
00:09:19.750 --> 00:09:22.540
Nobody else has got that shared key.

111
00:09:22.660 --> 00:09:26.820
So nobody else is able to read your credit card details.

112
00:09:27.100 --> 00:09:36.430
So you saw there, that is how encryption works on the public Internet, how we do the secure key exchange

113
00:09:36.610 --> 00:09:43.660
with the asymmetric encryption and then how the symmetric encryption is used for the actual data transfer.

114
00:09:44.620 --> 00:09:46.960
Now, I know what you're thinking of.

115
00:09:46.960 --> 00:09:48.670
This is the first time you've seen this.

116
00:09:48.820 --> 00:09:52.900
You're probably thinking, wait a minute, I'm sure something doesn't quite add up here.

117
00:09:53.060 --> 00:09:58.330
There must be some way to circumvent this, but actually very not.

118
00:09:58.330 --> 00:10:05.230
So let's go through probably the things that you would think could possibly be ways for a hacker could

119
00:10:05.770 --> 00:10:07.900
get around this security.

120
00:10:08.230 --> 00:10:14.620
So first one, hackers also show up on Amazon and they have a copy of Amazon's certificate.

121
00:10:14.890 --> 00:10:21.010
They could make a website looking like Amazon.com and you going there with a phishing attack so they

122
00:10:21.010 --> 00:10:23.750
could send you an email saying it's Amazon here.

123
00:10:23.890 --> 00:10:25.320
There is a problem with your account.

124
00:10:25.330 --> 00:10:30.190
You need to log in and fix it and then send you Amazon certificate.

125
00:10:30.190 --> 00:10:35.110
So they send you the email, checking you to go to their fake Amazon website.

126
00:10:35.290 --> 00:10:38.590
They then send you the real certificate for Amazon.

127
00:10:38.800 --> 00:10:45.190
But that's not going to work because your browser will ask them to authenticate with Amazon's private

128
00:10:45.190 --> 00:10:46.870
key and they don't have it.

129
00:10:46.900 --> 00:10:49.240
The only person that's got that is Amazon.

130
00:10:49.420 --> 00:10:55.870
So you will get a certificate warning message in your browser telling you that's not a safe place to

131
00:10:55.870 --> 00:10:56.260
shop.

132
00:10:56.740 --> 00:11:04.060
OK, next thing that the hacker could try, they could get a certificate for Amazon.com from a public

133
00:11:04.060 --> 00:11:06.880
certificate, thought, well, they could try to do that.

134
00:11:07.090 --> 00:11:13.720
But public certificate for is out of buying checks to verify the only issue, legitimate certificates.

135
00:11:13.930 --> 00:11:18.670
They're not going to give a certificate for Amazon to anybody other than Amazon.

136
00:11:18.790 --> 00:11:20.840
So that also will not work.

137
00:11:21.430 --> 00:11:27.910
Next thing that a hacker could try to make it open up a business named Neales Nuts, for example, and

138
00:11:27.910 --> 00:11:34.720
get a valid public certificate for that from a public certificate authority, then trick you into going

139
00:11:34.720 --> 00:11:41.010
to a website that pretends to be Amazon.com and saying you there are valid Neo's not certificate.

140
00:11:41.380 --> 00:11:47.950
Well, that won't work either, because most difficult details which website is valid for and that is

141
00:11:47.950 --> 00:11:49.710
checked for by your browser.

142
00:11:49.840 --> 00:11:56.140
So if you go to a fake Amazon.com and the certificate is for Nields, not that doesn't match up again.

143
00:11:56.140 --> 00:11:58.690
Your browser will give you the certificate warning.

144
00:11:59.660 --> 00:12:05.930
OK, the last one hacker could install their own certificate authority and create their own certificate

145
00:12:05.930 --> 00:12:12.470
for Amazon.com, but is possible you can have your own pesky infrastructure.

146
00:12:12.470 --> 00:12:19.760
In fact, if you've got a Windows server you can use as your own certificate authority to the attacker

147
00:12:19.910 --> 00:12:26.240
could install their own Certificate three on a Windows server, for example, then trick you into going

148
00:12:26.240 --> 00:12:30.970
to a Web site that pretends to be Amazon.com and send you their certificate.

149
00:12:31.190 --> 00:12:37.880
They created themselves, but again, that will not work because Web browsers only for certificates

150
00:12:37.880 --> 00:12:40.430
from trusted public certificate Forte's.

151
00:12:40.550 --> 00:12:42.800
So again, you'll get the warning message.

152
00:12:42.920 --> 00:12:46.030
And if you're wondering, well, why can't we have our own certificate for it?

153
00:12:46.130 --> 00:12:49.520
And yes, you can do that if you want to manage your own certificates.

154
00:12:49.640 --> 00:12:54.930
If you're doing that, you would need to configure your own horse to trust your own certificate if I

155
00:12:55.080 --> 00:12:55.700
a server.

156
00:12:56.070 --> 00:13:03.170
OK, so that is everything there about how Telstra works on the Internet for secure web browsing.

157
00:13:03.830 --> 00:13:08.090
You saw there it was only Amazon.com that had a certificate.

158
00:13:08.090 --> 00:13:09.260
They have to pay for that.

159
00:13:09.290 --> 00:13:15.170
But from VeriSign in the example there, you did not have a certificate yourself.

160
00:13:15.170 --> 00:13:18.980
And that's the normal way that he works for a secure web browsing.

161
00:13:19.400 --> 00:13:25.490
If you want to have both sides authenticating each other, you would need to have a certificate on both

162
00:13:25.490 --> 00:13:25.880
sides.

163
00:13:26.060 --> 00:13:32.480
An example of where you would sometimes do that with certificates is for a virtual private network.

164
00:13:32.690 --> 00:13:35.000
That's what we're going to be covering in the next lecture.

