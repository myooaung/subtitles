WEBVTT
1
00:00:07.430 --> 00:00:15.740
In this lecture, you'll see how stressed EPA is with postmen, with a lab Damul to first thing I need

2
00:00:15.740 --> 00:00:20.840
to do is to install post mine onto my laptop here.

3
00:00:20.990 --> 00:00:26.570
So I've gone to postman dot com and you can see right on the home page there's a link to download the

4
00:00:26.570 --> 00:00:30.130
app so you can download and run the app on your machine.

5
00:00:30.290 --> 00:00:34.880
You can also run this as I Google Chrome plug in as well.

6
00:00:35.040 --> 00:00:35.960
So I've already done.

7
00:00:36.140 --> 00:00:38.420
I've got Postman installed on here.

8
00:00:38.660 --> 00:00:45.470
Next thing is, I need some kind of devices that I can interact with with the rest API.

9
00:00:45.710 --> 00:00:50.830
So I'm going to use the school day sandbox for Bob to find out.

10
00:00:50.840 --> 00:00:54.340
Just go to Google and Google for Cisco Davnie Sandbox.

11
00:00:54.470 --> 00:00:55.700
It will be the first hit.

12
00:00:55.700 --> 00:01:02.660
So I'm going this page here and then in here you can click on Get Started with a Sandbox or look at

13
00:01:02.660 --> 00:01:06.800
the sandbox catalog and that will bring you here.

14
00:01:06.980 --> 00:01:10.160
And you can see it in the definite sandbox.

15
00:01:10.160 --> 00:01:18.680
Cisco have got loads of different systems here, which you can interact with for testing and for learning

16
00:01:18.680 --> 00:01:21.320
about network programmability and automation.

17
00:01:21.320 --> 00:01:22.580
And it's all free.

18
00:01:22.850 --> 00:01:27.740
You can see they'll ever be Always-On, which means they're always accessible to everybody.

19
00:01:27.950 --> 00:01:33.710
Or you can reserve one of the reserve able lab environments as well.

20
00:01:33.990 --> 00:01:42.350
So I have come in here and I'm going to be working with one of these iOS actually on Yitzhar.

21
00:01:42.360 --> 00:01:50.930
Laubscher is a virtual router which runs the iOS actually operating system, which does support RESTful

22
00:01:50.930 --> 00:01:51.680
API.

23
00:01:51.800 --> 00:01:56.390
So I'm going to use that and I'm going to test how to use it with Postman.

24
00:01:56.630 --> 00:02:00.400
So I've already come in here to one of you, always on the lives of Open-top.

25
00:02:00.620 --> 00:02:06.020
And then when I do that, you can see over here on the left, I can scroll down to the actual details

26
00:02:06.260 --> 00:02:11.750
that gives me the Eurail of the network device.

27
00:02:11.960 --> 00:02:19.760
Olcha I've got my associate that can't find restaraunt parts of it as well and the username and password

28
00:02:19.760 --> 00:02:20.330
to use.

29
00:02:20.510 --> 00:02:25.490
So I've got all of the information I need about the device I'm going to interact with.

30
00:02:25.670 --> 00:02:27.050
So let's have a look.

31
00:02:27.530 --> 00:02:38.120
Postman So this is what Postman looks like and up here in the right I can import environment variables

32
00:02:38.120 --> 00:02:43.640
in here so I can either manually configure my own environment variables, I can also import them in

33
00:02:43.640 --> 00:02:44.960
from another location.

34
00:02:45.170 --> 00:02:46.520
So I've already done that.

35
00:02:46.550 --> 00:02:52.820
And you can see I've imported the definite sandbox variables for this particular lab environment.

36
00:02:53.330 --> 00:02:54.920
See the environment variables.

37
00:02:54.920 --> 00:03:03.380
I click on the eye symbol here and you can see that the host variable is using the you are out of the

38
00:03:03.380 --> 00:03:04.730
device from interacting with.

39
00:03:04.880 --> 00:03:12.080
And I've also configured the nine four four three as well to looking back in the information, you can

40
00:03:12.080 --> 00:03:13.820
see there is the euro.

41
00:03:13.820 --> 00:03:22.070
But I'm interacting with and I'm going to be using Rascon on part nine four four, three, two by putting

42
00:03:22.070 --> 00:03:26.920
that in my environment variables, it just makes it more convenient to work with not.

43
00:03:27.140 --> 00:03:29.330
And let me show you how that works.

44
00:03:29.660 --> 00:03:35.330
Another thing that we can have in mind as well before I come back to the environment variables is you

45
00:03:35.330 --> 00:03:41.120
can have collections and this is where you can save request that you've used before.

46
00:03:41.360 --> 00:03:47.450
So if you're using this for testing on multiple systems and you know that you're going to be reusing

47
00:03:47.450 --> 00:03:51.380
the commands again, or if you're just coming back to the same system again and you want to run those

48
00:03:51.380 --> 00:03:57.830
same commands again, you can see them as a collection and it means they're ready via readily available

49
00:03:57.830 --> 00:03:59.180
for you to use again.

50
00:03:59.190 --> 00:04:00.640
So it's very convenient.

51
00:04:00.830 --> 00:04:05.750
So I've imported this collection here for a definite learning labs, which works with this particular

52
00:04:05.750 --> 00:04:09.110
lab environment, and I will expand that out.

53
00:04:09.870 --> 00:04:14.990
And the first thing that I'm going to do is to read the list of interfaces or not device.

54
00:04:15.170 --> 00:04:20.029
So I'm going to click on this and get request and it's going to populate it over in the main window

55
00:04:20.029 --> 00:04:23.720
here and here, you can see the environment variables being used.

56
00:04:23.870 --> 00:04:27.920
So with the environment variable, it's got to curly brackets there.

57
00:04:28.040 --> 00:04:31.400
So this is using the host variable and then deport variable.

58
00:04:31.550 --> 00:04:37.010
And looking back at the variables again, it's going to put in the other for me on the part, for me

59
00:04:37.220 --> 00:04:39.790
to have me typing the whole thing in.

60
00:04:40.040 --> 00:04:46.250
And if I want to use this again later on a different system, I can just up the host variable and also

61
00:04:46.250 --> 00:04:47.300
the part as well.

62
00:04:47.480 --> 00:04:50.420
And then it's going to make it very convenient for me to do that.

63
00:04:50.570 --> 00:04:57.550
OK, so first thing that I'm going to do is I'm going to send in a get request into that virtual earth

64
00:04:57.740 --> 00:04:59.810
to get its list of interfaces.

65
00:04:59.930 --> 00:05:05.600
And you can see here is the you are able to use here to for this information.

66
00:05:05.600 --> 00:05:06.860
Just check the.

67
00:05:06.880 --> 00:05:14.260
Documentation for the API, for the device that you're using, and it will tell you how format your

68
00:05:14.260 --> 00:05:15.460
request in there.

69
00:05:15.520 --> 00:05:22.120
So this is what you are able to go to to get a list of the information of the interfaces and information

70
00:05:22.120 --> 00:05:22.720
about them.

71
00:05:22.970 --> 00:05:25.450
Other information I need to enter in here.

72
00:05:25.450 --> 00:05:27.310
I need to authenticate.

73
00:05:27.310 --> 00:05:29.800
I need to have rights to get this information.

74
00:05:30.040 --> 00:05:35.950
So for that, I'm going to click on the authorization tab here and post mine.

75
00:05:36.400 --> 00:05:40.600
And for you here, it's using basic authentication.

76
00:05:40.600 --> 00:05:44.470
So I will choose that the basic off.

77
00:05:44.680 --> 00:05:49.180
And you can see I've already filled in the details here with the username and password.

78
00:05:49.360 --> 00:05:55.930
If I go back into my browser, you can see that information was available there as well.

79
00:05:56.650 --> 00:05:58.120
OK, so that is done.

80
00:05:58.330 --> 00:06:04.090
I'm also going to have to fill in my headers as well to looking at the headers of specified.

81
00:06:04.090 --> 00:06:08.710
The content type is application yï¿½ng the on Jiaxuan.

82
00:06:08.860 --> 00:06:14.460
I'm going to accept Yanda and Jayco and back and I've also got my authorization in here.

83
00:06:14.470 --> 00:06:22.650
This was populated from my authorization parameters and because I'm sending a get request, I'm requesting

84
00:06:22.660 --> 00:06:28.720
it get information from the virtual right or I don't need to have anything in the body there.

85
00:06:28.870 --> 00:06:31.720
OK, so that's everything that I need here.

86
00:06:31.720 --> 00:06:39.250
I've got my request is properly formatted according to the documentation for this API on device, so

87
00:06:39.250 --> 00:06:44.740
I can now click on send but is going to send the request to the device.

88
00:06:44.980 --> 00:06:47.260
And I have got my response here.

89
00:06:47.410 --> 00:06:52.660
You can see I got a status of two hundred, OK, which means the request was successful.

90
00:06:52.900 --> 00:06:59.800
I've got some headers in the information coming back and if I look in the body I can see I've got the

91
00:06:59.800 --> 00:07:05.170
list of my interfaces on that debate so I can see I've got Interpeace gigabit Ethernet one.

92
00:07:05.170 --> 00:07:13.000
The description, it's IP address and subnet mask, also gig Ethernet to gigabit Ethernet three.

93
00:07:13.150 --> 00:07:16.760
I've got a loop back on there and a virtual part group interface.

94
00:07:16.810 --> 00:07:23.100
OK, so that's how I got the information about the interfaces with my recipe.

95
00:07:23.100 --> 00:07:28.870
I can't just get information, I can also put information onto this device as well.

96
00:07:29.080 --> 00:07:31.810
So let's create a new interface on it.

97
00:07:31.990 --> 00:07:36.250
You can see right now it's just got one back interface, which is Lookback zero.

98
00:07:36.490 --> 00:07:42.700
So I'm going to go back into my collections here and you can see I've already added the request in my

99
00:07:42.700 --> 00:07:46.870
collection to a post request to add a new lookback interface.

100
00:07:47.080 --> 00:07:53.380
So GET is going to pull information post is going to push information to the device.

101
00:07:53.620 --> 00:07:59.080
I can see here this is the Eurail that I want to use.

102
00:07:59.320 --> 00:08:08.110
I've got my headers configured in here again as well as my authorization is going to be basic authorization

103
00:08:08.290 --> 00:08:12.730
with the username and password and then I need to properly form the body.

104
00:08:13.000 --> 00:08:16.960
So in here I'm going to configure loop back one hundred.

105
00:08:17.230 --> 00:08:23.710
But see, this is configured by FLOC Box and I'll give it the IP address.

106
00:08:23.710 --> 00:08:27.800
One seven three dot sixteen point one hundred one and it's on box.

107
00:08:27.820 --> 00:08:33.700
I want to have a thirty two subnet mask on there, so let's do that as well.

108
00:08:33.970 --> 00:08:36.640
OK, so it's everything properly formatted again.

109
00:08:36.640 --> 00:08:42.340
I would have checked the documentation to find out the syntax I need to format this in.

110
00:08:42.490 --> 00:08:43.210
That's all done.

111
00:08:43.210 --> 00:08:45.490
I can now click on send.

112
00:08:45.820 --> 00:08:51.730
It's going to send the request and I can see the stairs I get back is two hundred and one created.

113
00:08:51.970 --> 00:08:53.560
So that looks good.

114
00:08:53.830 --> 00:09:01.630
So if I now go back to my get request to read information about the interfaces and send this again,

115
00:09:01.990 --> 00:09:09.030
I can see that there is my new interface just being created back.

116
00:09:09.040 --> 00:09:10.050
One hundred.

117
00:09:10.840 --> 00:09:16.960
The next thing I would probably want to do at this point is another post to save the configuration as

118
00:09:16.960 --> 00:09:17.230
well.

119
00:09:17.530 --> 00:09:24.430
But because I'm working on the shared lab over in the definite sandbox here, I want to leave this as

120
00:09:24.430 --> 00:09:25.370
I found it.

121
00:09:25.390 --> 00:09:27.220
What I'm going to do is I'm going to clean this up.

122
00:09:27.220 --> 00:09:32.550
I'm going to delete that back interface I just created so I can see here in my collection, I've got

123
00:09:32.560 --> 00:09:34.930
the request to delete the Lookback interface.

124
00:09:35.290 --> 00:09:37.480
I will click on that.

125
00:09:37.930 --> 00:09:41.110
And it has populated everything in here.

126
00:09:41.110 --> 00:09:46.120
For me, it was back one hundred I created so I can just leave this as it is.

127
00:09:46.120 --> 00:09:47.500
I don't need to edit it.

128
00:09:47.800 --> 00:09:50.590
I've got my headers configured in there.

129
00:09:50.590 --> 00:09:55.000
I've got my authorization done so I can now click on send.

130
00:09:55.870 --> 00:10:02.490
And then I've got a two or four new content at two hundred means that things are good.

131
00:10:02.620 --> 00:10:05.290
So even though there's no content, that's not actually a problem.

132
00:10:05.300 --> 00:10:09.100
It's new content because it has deleted the Mubarak.

133
00:10:09.260 --> 00:10:10.990
Let's just verify that again.

134
00:10:10.990 --> 00:10:14.590
So I'll click back on the get tab and send this again.

135
00:10:14.800 --> 00:10:19.840
And I should see one hundred interface has gone OK, done.

136
00:10:20.800 --> 00:10:31.450
Other things I can do here in Postman is I can click on the code button here and then I can choose from

137
00:10:31.450 --> 00:10:34.660
all of these different popular programming languages.

138
00:10:34.780 --> 00:10:44.320
So it's actually use Python and it gives me the Python syntax I need to use here if I want it to create

139
00:10:44.320 --> 00:10:51.250
a script in Python that actually sent this command because with postmen you can use it.

140
00:10:51.250 --> 00:10:57.280
It's really used for testing because you can send individual commands there so you can use it to test

141
00:10:57.280 --> 00:11:04.330
the commands are working, but to have an actual useful script, you're going to want to have a script

142
00:11:04.330 --> 00:11:05.980
that's going to do multiple things.

143
00:11:05.980 --> 00:11:09.130
Most likely to postman is not the tool for that.

144
00:11:09.340 --> 00:11:12.520
You can create your own script in your programming language.

145
00:11:12.730 --> 00:11:19.240
Potami makes it very easy to do that because it does tell you the code that you need to use for each

146
00:11:19.240 --> 00:11:20.560
individual request.

147
00:11:20.710 --> 00:11:24.610
You're possibly going to have to do a bit of editing in your programming language as well.

148
00:11:24.610 --> 00:11:27.430
But this just makes it very convenient for you.

149
00:11:27.700 --> 00:11:33.700
OK, so if I was doing this and I was exploring it into code for Python, well, the next step legally

150
00:11:33.700 --> 00:11:36.880
I would need to know how to program in Python.

151
00:11:37.120 --> 00:11:43.720
And while Python is a comparatively easy programming language to learn, there's still a pretty steep

152
00:11:43.720 --> 00:11:44.950
learning curve there.

153
00:11:45.130 --> 00:11:50.050
If you're currently a network engineer, you're used to working at the command line.

154
00:11:50.170 --> 00:11:52.870
Maybe you haven't learned any coding before then.

155
00:11:52.870 --> 00:11:56.680
Learning Python would be quite a lot of work to do.

156
00:11:56.860 --> 00:12:04.030
But thankfully, you don't have to go and learn a programming language to be able to make use of network

157
00:12:04.030 --> 00:12:11.590
programmability and automation, various other tools that we can use, like Ansible and DNS and ah,

158
00:12:11.680 --> 00:12:15.910
and I'm going to be covering those tools starting in the next lecture.

