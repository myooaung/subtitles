WEBVTT
1
00:00:07.380 --> 00:00:14.130
In this lecture, you'll learn about configuration management tools which let you implement automation

2
00:00:14.130 --> 00:00:20.850
in your network without being an expert in programming configuration management systems are designed

3
00:00:20.850 --> 00:00:27.210
to meet controlling large numbers of devices, easy for administrators and operations teams through

4
00:00:27.210 --> 00:00:27.880
automation.

5
00:00:28.140 --> 00:00:31.830
They allow you to control many different systems in an automated way.

6
00:00:31.980 --> 00:00:39.180
From one central location on popular options are Ansible, Poppit and Chef.

7
00:00:39.390 --> 00:00:42.060
They're all free and open source.

8
00:00:42.240 --> 00:00:46.410
They do also have paid for enterprise editions available as well.

9
00:00:46.980 --> 00:00:53.150
The main difference between the free and the Enterprise editions is that support comes with the need

10
00:00:53.160 --> 00:00:54.060
for options.

11
00:00:55.410 --> 00:01:01.800
Your configuration management tools can meet the provisioning and deployment of servers on network devices,

12
00:01:02.160 --> 00:01:05.310
they require very little knowledge of programming.

13
00:01:05.310 --> 00:01:11.430
So you don't need to be an experienced programmer to be able to implement automation in your network.

14
00:01:11.460 --> 00:01:16.890
Now, they do have established development practices, including version control and testing.

15
00:01:17.070 --> 00:01:23.580
So you get all the benefits you would have with network programmability, but you can do it using these

16
00:01:23.580 --> 00:01:24.870
easier to use tools.

17
00:01:26.220 --> 00:01:33.060
First of all, look at is ansible, it can be run from any machine with Python, two or three installed

18
00:01:33.210 --> 00:01:36.150
Savides Linux and Mark by default.

19
00:01:36.300 --> 00:01:40.260
And if you are using Ansible, typically you'll be running it from a Linux machine.

20
00:01:40.560 --> 00:01:47.790
Ansible is agent, which meaning that you don't need to install a software plugin on the devices that

21
00:01:47.790 --> 00:01:49.300
you're going to be managing.

22
00:01:49.320 --> 00:01:53.010
You don't have to do anything on the devices you're going to be managing.

23
00:01:53.010 --> 00:01:56.430
Everything is managed centrally from Ansible itself.

24
00:01:56.580 --> 00:02:03.270
It uses a push model, so it pushes the configuration to the devices that you are configuring.

25
00:02:03.630 --> 00:02:06.940
Ansible communicates over SSL by default.

26
00:02:06.960 --> 00:02:13.710
Other options are available and Ansible is probably the simplest of the configuration management tools.

27
00:02:13.890 --> 00:02:17.880
It's got very shallow, easy learning curve.

28
00:02:18.090 --> 00:02:21.930
And Ansible was originally released in 2012.

29
00:02:23.200 --> 00:02:31.180
Ensemble modules are pre-built Python scripts and many pre-built network modules exist, so if you are

30
00:02:31.180 --> 00:02:37.690
going to use Ansible, there's many different modules, which are two different tasks that you can complete

31
00:02:37.870 --> 00:02:41.530
on your network devices so you can pull information from them.

32
00:02:41.710 --> 00:02:44.860
You can also push configuration to them as well.

33
00:02:45.010 --> 00:02:49.710
And there's already loads of modules that are already configured that you can use.

34
00:02:49.750 --> 00:02:52.270
You're not going to be starting from scratch.

35
00:02:52.630 --> 00:02:58.330
Ansible inventory files defying all hopes that will be managed by the control workstation.

36
00:02:58.540 --> 00:03:06.790
So when you set up Ansible for you should get Ansible installed and then you specify the devices that

37
00:03:06.790 --> 00:03:07.930
you're going to be managing.

38
00:03:08.020 --> 00:03:10.450
You do that by adding them to the inventory.

39
00:03:10.720 --> 00:03:16.360
And Ansible playbooks are Yamal files that outline the instructions it needs to run.

40
00:03:16.570 --> 00:03:22.900
So you've got the modules which are basically like the low level tasks that you're going to be carrying

41
00:03:22.900 --> 00:03:28.030
out, that you need to customize those tasks as well for your particular environment.

42
00:03:28.270 --> 00:03:34.720
You're going to need to specify things like the host, the IP addresses, if you're going to be configuring

43
00:03:34.720 --> 00:03:39.090
IP addresses, etc. So you've got all these things combined.

44
00:03:39.100 --> 00:03:44.560
You've got the module, the inventory and the playbooks, and that's how you control your devices.

45
00:03:45.710 --> 00:03:54.500
Next one we have is puppet puppet, it typically uses an agent on the target devices, it is possible

46
00:03:54.500 --> 00:04:00.890
for puppet to be run agent list now, but typically it does use an agent, meaning you do have to have

47
00:04:00.890 --> 00:04:04.460
a software plugin on the devices that you're monitoring.

48
00:04:04.580 --> 00:04:10.550
If you get asked the question about it on the Shishani, then Puppet is an agent based option.

49
00:04:11.090 --> 00:04:19.399
The server that is used to control everything is called the puppet master but runs on Linux server.

50
00:04:19.640 --> 00:04:24.890
And unlike Ansible, which uses a push model, Poppit uses a pool model.

51
00:04:25.010 --> 00:04:28.370
She you still do all the configuration on the puppet master.

52
00:04:28.520 --> 00:04:35.690
But rather than it pushing the config out to the devices, the devices check in with the puppet master

53
00:04:35.690 --> 00:04:38.440
and they pool their configuration from there.

54
00:04:38.750 --> 00:04:41.900
By default, the agent will check in every 30 minutes.

55
00:04:41.900 --> 00:04:45.970
By default, puppet is in in Ruby.

56
00:04:46.160 --> 00:04:49.880
It does not use YAML like Ansible does.

57
00:04:49.880 --> 00:04:54.830
It uses its own proprietary DSL on Phurba terminology.

58
00:04:54.830 --> 00:05:03.170
It's a manifest that defines the devices properties with Poppit, an advantage it does have over Ansible

59
00:05:03.170 --> 00:05:09.800
because it uses a pool model rather than a push model, and because the devices are periodically checking

60
00:05:09.800 --> 00:05:13.700
in, you can use that to check for configuration consistency.

61
00:05:13.850 --> 00:05:19.790
So with Ansible, really, it's a one time thing when you push a configuration to the devices.

62
00:05:19.970 --> 00:05:26.570
But with Poppit every 30 minutes, they're checking that their configuration is correct as an advantage

63
00:05:26.570 --> 00:05:30.230
of using Poppit and Poppit is more mature than Ansible.

64
00:05:30.230 --> 00:05:32.720
It was created in two thousand and five.

65
00:05:33.890 --> 00:05:41.360
Blasim will look at is chef with chef like Poppit, an agent must be installed on the target devices.

66
00:05:41.670 --> 00:05:46.730
You do need to install a software plugin on all the devices you're going to be managing.

67
00:05:46.880 --> 00:05:56.180
Chef, again, like Pupper is also a pool model in Ruby on the terminology in chef is cookbooks and

68
00:05:56.180 --> 00:05:57.660
recipes and chefs.

69
00:05:57.740 --> 00:06:01.160
Also Mature was released in two thousand and nine.

70
00:06:01.790 --> 00:06:09.230
So Ansible puppet on Chef Zober, not originally designed for managing network devices, but actually

71
00:06:09.230 --> 00:06:15.380
designed primarily for server system administration like your Lennix in your Windows servers.

72
00:06:15.680 --> 00:06:22.100
Ansible is typically more suitable for network environments and puppet and chef because it does not

73
00:06:22.100 --> 00:06:25.330
require an agent for your server systems.

74
00:06:25.340 --> 00:06:29.900
It's very easy and common to be installing software plug ins on there.

75
00:06:30.050 --> 00:06:35.810
So it's not a big deal that with Poppit and Chef, you're going to install an agent on there on your

76
00:06:35.810 --> 00:06:38.240
servers for the servers that you're going to be managing.

77
00:06:38.430 --> 00:06:45.020
However, it's not common to be installing software, plug ins, installing agents on network devices.

78
00:06:45.230 --> 00:06:50.360
So because of this, ansible is generally more suitable for network devices.

79
00:06:50.360 --> 00:06:56.630
When Poppit on Shefa, Ansible is also simpler to learn and use than Poppit and Shafter.

80
00:06:56.840 --> 00:07:02.660
So because of these three configuration management tools for managing network environments, Ansible

81
00:07:02.840 --> 00:07:06.500
is the most popular and typically it's going to be the most suitable.

82
00:07:07.160 --> 00:07:14.510
Cisco devices usually can't even run an agent, but puppet does work on some Nexus switches and more

83
00:07:14.510 --> 00:07:16.700
support may be added in future.

84
00:07:16.850 --> 00:07:21.260
Right now, there's a limited support for Poppit on Cisco devices.

85
00:07:21.440 --> 00:07:28.430
There's basically no support for Chev right now that might change as the industry move forward.

86
00:07:28.610 --> 00:07:31.550
Just may add additional support for Poppit and Jeff.

87
00:07:31.730 --> 00:07:37.670
But with Ansible, because it does not require an agent on the devices, Ansible works just fine.

88
00:07:38.180 --> 00:07:40.310
The box with all networked devices.

89
00:07:40.490 --> 00:07:42.770
OK, that's everything I needed to tell you here.

90
00:07:42.920 --> 00:07:47.780
In the next lecture, I'll actually show you what demo of Ansible.

