WEBVTT
1
00:00:06.080 --> 00:00:14.030
In this lecture, you'll learn about access control list operations, and there's a few things about

2
00:00:14.030 --> 00:00:19.820
the way that ACLs work that are not that intuitive.

3
00:00:20.150 --> 00:00:27.360
So this is an important lecture to pay attention to because you really need to understand these things

4
00:00:27.360 --> 00:00:30.200
so that you understand how ACLs really work.

5
00:00:30.440 --> 00:00:36.200
If you don't understand, it's going to lead to really confusing things happening and it's going to

6
00:00:36.200 --> 00:00:40.260
make it really difficult for you to troubleshoot those things as well.

7
00:00:40.280 --> 00:00:42.730
So important lecture. OK.

8
00:00:42.800 --> 00:00:47.120
Starting off with how we apply our ACLs.

9
00:00:47.660 --> 00:00:49.340
ACLs are applied

10
00:00:49.520 --> 00:00:53.120
at the interface level with the access-group command.

11
00:00:53.360 --> 00:00:58.700
So you saw in the previous lectures about how we build our ACLs.

12
00:00:58.820 --> 00:01:05.690
We build them with our access control entries, which are the rules which permit or deny the particular traffic.

13
00:01:05.930 --> 00:01:07.790
But that just creates the ACL.

14
00:01:07.790 --> 00:01:12.530
You still have to apply it to make it come into effect. And the way you do

15
00:01:12.530 --> 00:01:16.280
that is at the interface level with the access-group command.

16
00:01:16.910 --> 00:01:23.710
When you are configuring ACLs, don't forget to apply them with the access-group command.

17
00:01:23.720 --> 00:01:25.700
It's actually quite easy to do that.

18
00:01:26.390 --> 00:01:34.220
OK, ACLs can be applied in the inbound or the outbound direction and you can have a maximum of one

19
00:01:34.220 --> 00:01:38.000
ACL per interface, per direction.

20
00:01:38.570 --> 00:01:44.840
You can have both an inbound and an outbound ACL on the same interface, but you can't have two inbound

21
00:01:44.840 --> 00:01:48.020
or two outbound ACLs on the same interface.

22
00:01:48.320 --> 00:01:53.720
And if you think about it, this actually makes sense because we've got our acces control list. They're made

23
00:01:53.720 --> 00:01:54.740
up of entries.

24
00:01:54.860 --> 00:02:00.830
If we had two different ACLs with different entries and we applied them to the same interface coming in to

25
00:02:00.830 --> 00:02:07.130
the same direction, how would the router know which rule to apply if there was conflicting rules

26
00:02:07.130 --> 00:02:12.590
in there? You don't need to have more than one ACL applied to an interface because you can have multiple

27
00:02:12.590 --> 00:02:14.420
rules in the same ACL.

28
00:02:14.510 --> 00:02:18.620
If you did have multiple ones, there could be conflicts. The router wouldn't know what to do.

29
00:02:18.890 --> 00:02:25.430
So that's why we always have a maximum of one ACL per interface, per direction.

30
00:02:26.030 --> 00:02:28.010
Your options are on an interface,

31
00:02:28.010 --> 00:02:34.490
you can have no ACL applied or you could have an inbound ACL only, or you could have an outbound ACL

32
00:02:34.490 --> 00:02:38.680
only, or ACLs in both directions.

33
00:02:38.690 --> 00:02:41.840
So let's talk about this a little bit more as well.

34
00:02:42.230 --> 00:02:52.460
And people can get confused about the ACL direction, but there's a really easy way to not get confused

35
00:02:52.460 --> 00:02:53.150
about it.

36
00:02:53.300 --> 00:03:00.500
And that is to be like Mr. Miyagi in The Karate Kid and be the router.

37
00:03:00.650 --> 00:03:02.420
So if you've got an ACL,

38
00:03:02.420 --> 00:03:03.020
let's say

39
00:03:03.020 --> 00:03:03.980
we've got a router.

40
00:03:04.730 --> 00:03:07.790
And on this arm, I have got an interface

41
00:03:08.160 --> 00:03:14.720
fa0/0 and on this arm, I've got interface fa1/0

42
00:03:15.080 --> 00:03:19.070
And you want to control traffic going from a client,

43
00:03:19.400 --> 00:03:22.850
this arm, going out to a server, this arm.

44
00:03:23.060 --> 00:03:24.860
Well you could either,

45
00:03:24.860 --> 00:03:30.500
there are two ways you could apply the ACL, you could apply it inbound on this arm because when you are

46
00:03:30.500 --> 00:03:34.670
that router, I know it looks silly. You don't have to actually physically do it.

47
00:03:34.670 --> 00:03:35.600
Just do it in your head

48
00:03:35.600 --> 00:03:41.390
if you want. Stick your arms out to the side and say, this is this interface, this is that interface.

49
00:03:41.570 --> 00:03:47.240
And I'm interested in controlling traffic, going from the hosts over here to the servers over there.

50
00:03:47.390 --> 00:03:54.950
Well in that case, I can apply the ACL inbound as it comes in this interface or I can apply it outbound

51
00:03:54.950 --> 00:03:56.930
as it goes out that interface.

52
00:03:57.050 --> 00:03:58.380
So whether it's inbound or outbound,

53
00:03:58.850 --> 00:04:01.010
it depends on the direction of the travel.

54
00:04:01.220 --> 00:04:06.590
If travel is going from here over to here, I can put it inbound here or I can put it

55
00:04:06.590 --> 00:04:11.780
outbound there and it's only going to affect the traffic, which is in one direction.

56
00:04:12.200 --> 00:04:14.360
OK, so you'll see what I mean

57
00:04:14.360 --> 00:04:20.390
first time you run into this. Any time you're thinking, "Oh, should it be in the inbound or outbound direction,

58
00:04:20.390 --> 00:04:22.010
or what is this going to do?"

59
00:04:22.010 --> 00:04:28.550
If you're confused about the direction, just imagine your the router, your arms are the interfaces. Stand

60
00:04:28.550 --> 00:04:29.150
like that.

61
00:04:29.150 --> 00:04:34.490
Think about the direction travel is going in and then it's going to be really easy to understand what's

62
00:04:34.490 --> 00:04:34.940
going on.

63
00:04:36.740 --> 00:04:42.370
OK, how to actually configure our access group configuration? So it was done under the interface. Here,

64
00:04:42.380 --> 00:04:47.690
for example, we've got interface GigabitEthernet0/1. I can say

65
00:04:47.730 --> 00:04:51.860
ip access-group 100 out, ip access-group 101 in

66
00:04:54.320 --> 00:05:02.660
And then to check which access groups or which access list are applied to which interfaces, it's actually easiest

67
00:05:02.660 --> 00:05:06.940
just to do a show running-config. To see this, there is not a really good show

68
00:05:06.950 --> 00:05:14.230
command on this. The specific show command you can use is show ip interface and then the interface number.

69
00:05:14.270 --> 00:05:18.750
But when you do that, you're going to get a lot of very verbose output.

70
00:05:18.770 --> 00:05:24.920
So if you want to just see the access list information, you can pipe it to include access list. Notice that

71
00:05:24.980 --> 00:05:27.800
show ip interface, and not show interface.

72
00:05:28.160 --> 00:05:34.040
Again, to be honest, rather than typing in that big long command, it's easier just to do a show run.

73
00:05:34.160 --> 00:05:38.200
Scroll down to the interfaces and you can see what ACLs are applied there.

74
00:05:39.200 --> 00:05:45.560
If an interface does not have any ACL applied in a particular direction, it would seem not set.

75
00:05:45.620 --> 00:05:48.320
For example, outgoing access-list is not set.

76
00:05:50.400 --> 00:05:58.860
Next thing, super important, the ACL is read by the router from top to bottom. As soon as a rule matches

77
00:05:58.860 --> 00:06:07.440
on the packet, the permit or deny action is applied and the ACL is not processed any further for that packet.

78
00:06:07.590 --> 00:06:10.590
So this means that the order of rules is important.

79
00:06:10.740 --> 00:06:11.730
And I've got an example.

80
00:06:11.730 --> 00:06:16.170
It's going to make it really clear. So our first ACL here,

81
00:06:17.070 --> 00:06:21.120
we've said access-list 1 deny host 10.10.10.10

82
00:06:21.330 --> 00:06:25.270
And then the next line is

83
00:06:25.310 --> 00:06:28.370
access-list 1 permit 10.10.10. 0.0.0.255

84
00:06:28.440 --> 00:06:34.950
So what this will do is it will deny the host 10.10.10.10, but it will permit the rest of

85
00:06:34.950 --> 00:06:38.710
the 10.10.10.0/24 subnet.

86
00:06:38.730 --> 00:06:39.990
So that's what we wanted to do.

87
00:06:40.180 --> 00:06:43.900
We wanted to block just one host, but allow everything else in the subnet.

88
00:06:44.250 --> 00:06:51.450
Now, the second example is going to use exactly the same commands, but I flipped the order around.

89
00:06:51.660 --> 00:06:58.480
So the second example, I've said,

90
00:06:58.530 --> 00:06:59.430
access-list 1 permit 10.10.10.0 0.0.0.255

91
00:06:59.430 --> 00:07:02.460
So permitting everything from the 10.10.10.0/24 subnet.

92
00:07:02.460 --> 00:07:06.900
Then access-list 1 deny host 10.10.10.10

93
00:07:06.900 --> 00:07:07.980
access-list 1 deny host 10.10.10.10

94
00:07:08.790 --> 00:07:17.640
Well, what will happen here is, it will permit all from the 10.10.10.0/24 subnet, including

95
00:07:17.640 --> 00:07:19.650
10.10.10.10.

96
00:07:19.980 --> 00:07:26.070
Because when a packet comes in from 10.10.10.10, the router will start processing the ACL

97
00:07:26.280 --> 00:07:30.600
and 10.10.10.10 is in the

98
00:07:30.610 --> 00:07:33.210
10.10.10.0/24 subnet.

99
00:07:33.330 --> 00:07:34.410
So it will match

100
00:07:34.410 --> 00:07:37.410
the first rule and the traffic will be allowed through.

101
00:07:37.560 --> 00:07:43.020
It never gets to the second rule which would deny it because it's read from the top down and as soon

102
00:07:43.020 --> 00:07:48.570
as we get a match, that action is applied. So the second access control list

103
00:07:48.570 --> 00:07:50.040
example here is wrong.

104
00:07:50.040 --> 00:07:52.080
It's not doing what we want it to do.

105
00:07:52.320 --> 00:07:53.460
We would need to do it

106
00:07:53.580 --> 00:08:00.900
the first way. So the order of your access control entry is important and you want to put the most specific entries

107
00:08:00.910 --> 00:08:02.160
up at the top of the list.

108
00:08:02.400 --> 00:08:04.440
The less specific down near at the bottom.

109
00:08:06.640 --> 00:08:16.300
Another thing is we can inject access control entries into an existing ACL. When you create the ACL,

110
00:08:16.540 --> 00:08:24.940
the router will automatically put access control entries on all of your different ACEs and numbers in

111
00:08:24.940 --> 00:08:26.080
increments of 10.

112
00:08:26.110 --> 00:08:30.940
So when you enter, when you put the first command in, it numbers at 10. When you put in the second

113
00:08:30.940 --> 00:08:32.809
one, it numbers at 20 and so on.

114
00:08:32.830 --> 00:08:34.480
So it puts the numbers in for you.

115
00:08:34.490 --> 00:08:35.710
You don't have to do this.

116
00:08:35.980 --> 00:08:37.480
So you can see the example here.

117
00:08:37.480 --> 00:08:43.390
We've got an ACL access-list 110, and we've got four entries in there which are numbered

118
00:08:43.400 --> 00:08:46.090
10, 20, 30 and 40.

119
00:08:46.630 --> 00:08:55.240
The reason for this is, it allows you to later on injector a rule, wherever you want to into an existing

120
00:08:55.240 --> 00:08:55.810
ACL.

121
00:08:57.690 --> 00:09:07.350
So, for example, here, before what we had was rule 10 deny tcp host 10.10.10.10 host 10.10.50.10 eq telnet

122
00:09:07.530 --> 00:09:14.310
10 deny tcp host 10.10.10.10 host 10.10.50.10 eq telnet. Ignore line 15 for now, because that's

123
00:09:14.310 --> 00:09:15.570
what we're going to do in a minute.

124
00:09:15.900 --> 00:09:21.630
And then 20 permit tcp 10.10.10.0 0.0.0.255 host 10.10.50.10 eq telnet

125
00:09:21.660 --> 00:09:25.710
So here we're denying host 10.10.10.10.

126
00:09:25.860 --> 00:09:28.620
We're permitting everything else at the

127
00:09:28.680 --> 00:09:30.680
10.10.10.0/24 network.

128
00:09:31.170 --> 00:09:37.230
Well maybe you'd already configured this ACL and then later, you don't want to just deny

129
00:09:37.230 --> 00:09:37.830
10.10.10.10,

130
00:09:38.010 --> 00:09:42.330
You want to deny 10.10.10.11 as well.

131
00:09:42.780 --> 00:09:50.280
Well if you just added a new line for 10.10.10.11, that would go in below the line, which

132
00:09:50.280 --> 00:09:55.950
permits everything in 10.10.10.0/24 subnet and it wouldn't work.

133
00:09:56.190 --> 00:10:02.310
So we need to inject that line higher up than our line 20 permit statement.

134
00:10:02.700 --> 00:10:07.140
So the way we do that is, here we're using a named ACL.

135
00:10:07.320 --> 00:10:11.820
We've got ip access-list extended 110.

136
00:10:11.820 --> 00:10:16.740
Then we say 15 deny tcp host 10.10.10.11 host 10.10.50.10 eq telnet

137
00:10:16.740 --> 00:10:21.950
That will put it higher up in the ACL than rule 20.

138
00:10:22.080 --> 00:10:29.460
So we've got our rules working in the correct order. Support for injecting ACEs in an existing ACL

139
00:10:29.460 --> 00:10:32.700
first came out with Named ACLs.

140
00:10:32.880 --> 00:10:36.710
But you can do it with numbered ACLs as well now.

141
00:10:36.900 --> 00:10:42.930
But the syntax is done the same way that you do it for a Named ACL. Here, you can see me doing, actually

142
00:10:42.930 --> 00:10:48.510
it's a Numbered. I've said ip access-list extended 110. 110 is my Numbered ACL.

143
00:10:48.750 --> 00:10:52.940
I need to use a syntax like this to allow me to inject commands in.

144
00:10:53.040 --> 00:10:56.790
OK, so that's injecting ACEs into an existing ACL.

145
00:10:57.660 --> 00:11:06.380
Next thing, super important again. There's an 'implicit deny any any' rule at the bottom of all ACLs.

146
00:11:07.230 --> 00:11:11.580
So if an ACL is not applied to an interface, well, all traffic is allowed.

147
00:11:11.580 --> 00:11:12.540
You knew that already.

148
00:11:12.750 --> 00:11:20.670
If an ACL is applied, all traffic is denied except what is explicitly allowed because of that 'implicit

149
00:11:20.670 --> 00:11:22.350
deny any any' rule.

150
00:11:22.350 --> 00:11:26.040
It's implicit because you don't have to type it and it's always there.

151
00:11:26.970 --> 00:11:34.170
So if we created an access list. Here, we've said

152
00:11:34.170 --> 00:11:38.000
access-list 1 permit 10.10.10.0 0.0.0.255

153
00:11:38.180 --> 00:11:42.320
Below there, there is a 'deny all' command which is always there.

154
00:11:42.330 --> 00:11:46.470
So traffic from 10.10.10.0/24 will be permitted.

155
00:11:46.710 --> 00:11:52.410
Everything else is denied because of the implicit 'deny all' at the bottom of your ACL.

156
00:11:54.390 --> 00:12:00.810
Some organizers or many organizations include an explicit 'deny all' at the end of ACLs to log illegal traffic.

157
00:12:00.810 --> 00:12:03.540
So they actually type in like you see here.

158
00:12:03.690 --> 00:12:09.240
access-list 1 deny any any log. If you're wondering, well, why would they put that in when it denies

159
00:12:09.240 --> 00:12:14.550
anyway? It is so that you can log it, so you can send information out to an external server.

160
00:12:14.790 --> 00:12:20.580
So if somebody is doing something they're not meant to be doing, sending traffic that they shouldn't

161
00:12:20.580 --> 00:12:22.260
be, then you're blocking it.

162
00:12:22.260 --> 00:12:24.530
But you're also going to get a report about that as well.

163
00:12:26.580 --> 00:12:36.060
OK, so with the explicit 'deny all,' it means that when an ACL is applied, all traffic is denied except

164
00:12:36.060 --> 00:12:42.410
what is explicitly allowed in the access control entries that you configured. If you want to reverse that

165
00:12:42.600 --> 00:12:46.950
so that all traffic is permitted except what is explicitly denied,

166
00:12:47.280 --> 00:12:53.700
the way you do it is you add a 'permit all' statement to the end of the ACL. That will then be higher

167
00:12:53.700 --> 00:12:57.210
up than the implicit 'deny any' which is still there.

168
00:12:57.570 --> 00:13:01.020
So here we've said access-list 1 deny 10.10.10.0 0.0.0.255

169
00:13:01.050 --> 00:13:09.330
And then access-list 1 permit any. So we'll deny what we said in the first line.

170
00:13:09.330 --> 00:13:13.140
Everything that we haven't explicitly denied is going to be permitted.

171
00:13:16.130 --> 00:13:24.260
Another thing, and this is one that can confuse you, is that ACLs applied to an interface, do not apply

172
00:13:24.260 --> 00:13:28.760
to traffic, which originates from that router itself.

173
00:13:29.240 --> 00:13:36.800
So you see in the example here, we've got routers R1 and R2, and we want to block telnet

174
00:13:36.800 --> 00:13:40.520
traffic going from the host on the left going to the R2 router.

175
00:13:41.270 --> 00:13:44.630
And we've done that with an access control list on R1.

176
00:13:45.650 --> 00:13:54.710
So we said access-list 100 deny tcp any any eq 23. And then, because

177
00:13:54.710 --> 00:14:03.230
we're doing it on interface R1, but we could actually do it inbound on interface fa0/0 or we

178
00:14:03.230 --> 00:14:08.610
could do it outbound on inteface fa1/0. Hopefully you see what I mean now about the holding

179
00:14:08.610 --> 00:14:14.030
your arms thing and you'll be able to figure out the direction. Traffic here is going from left to right.

180
00:14:14.210 --> 00:14:20.000
So if we want to control that, we could control it either with an inbound ACL on 0/0 or an outbound

181
00:14:20.000 --> 00:14:21.490
ACL on 1/0.

182
00:14:21.860 --> 00:14:24.890
OK, so we've done that and this ACL will work.

183
00:14:24.890 --> 00:14:29.230
It will stop the host on the left from telnetting to R2.

184
00:14:29.960 --> 00:14:37.070
However, if we go on the command line on R1, we will be able to telnet to R2.

185
00:14:38.090 --> 00:14:44.360
That shouldn't work because I've done my ACL outbound on interface fa1/0 in R1 and the

186
00:14:44.360 --> 00:14:47.570
traffic is going out to that interface.

187
00:14:47.570 --> 00:14:53.680
The reason it will work ist that ACLs do not apply to traffic that comes from the router itself.

188
00:14:53.960 --> 00:15:00.410
So if we want to block telnet traffic from the PCs and from R1 as well, don't do the ACL in

189
00:15:00.410 --> 00:15:00.860
R1.

190
00:15:01.070 --> 00:15:04.010
Do the ACL inbound on R2.

191
00:15:04.910 --> 00:15:16.790
OK, so that is everything about how to configure and understand and verify our ACLs.

192
00:15:16.940 --> 00:15:20.420
In the next lecture, I'll show you how to do it with a lab demo.

