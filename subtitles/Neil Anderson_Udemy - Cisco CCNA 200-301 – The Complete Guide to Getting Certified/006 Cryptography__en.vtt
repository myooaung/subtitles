WEBVTT
1
00:00:07.470 --> 00:00:15.270
In this lecture, you'll learn about cryptography, which is the process of transforming readable plain

2
00:00:15.270 --> 00:00:23.910
text messages into an unintelligible form, and then the later reversal of process, cryptography can

3
00:00:23.910 --> 00:00:31.560
be used to send sensitive data securely over an untrusted network such as the Internet, and it uses

4
00:00:31.560 --> 00:00:34.710
authentication and encryption methods to do that.

5
00:00:36.010 --> 00:00:44.380
Cryptography provides these services to the data, first up, authenticity, which is proof of source,

6
00:00:44.620 --> 00:00:52.660
so proving that they are really did come from you think it came from their own confidentiality, which

7
00:00:52.660 --> 00:00:54.790
is privacy and secrecy.

8
00:00:54.940 --> 00:00:58.150
So you can send the data over an untrusted network.

9
00:00:58.150 --> 00:01:03.400
And if even if somebody else is able to sniff out traffic, they're not able to read it.

10
00:01:03.710 --> 00:01:09.630
And integrity, meaning it's for sure, is not being changed in transit.

11
00:01:09.880 --> 00:01:16.990
And finally, non repudiation, which is quite similar to authenticity, to authenticity, proves that

12
00:01:16.990 --> 00:01:20.230
you are talking to who you think you're talking to.

13
00:01:20.470 --> 00:01:25.360
Non repudiation means also they cannot deny it was Van Lether.

14
00:01:27.050 --> 00:01:35.150
OK, so with our cryptography, we've got both symmetric and asymmetric encryption with symmetric encryption,

15
00:01:35.150 --> 00:01:42.230
the same shared key move, encrypt and decrypt the data and you can think of a key basically as being

16
00:01:42.230 --> 00:01:44.270
similar to a password.

17
00:01:44.570 --> 00:01:52.010
So with symmetric encryption, that shared key is known by both the sender and the receiver, and it

18
00:01:52.010 --> 00:01:53.410
must be kept secret.

19
00:01:53.420 --> 00:01:55.970
They're the only two parties that know about it.

20
00:01:56.300 --> 00:02:04.370
Symmetric encryption is fast through because of what is used for large transmissions such as email,

21
00:02:04.550 --> 00:02:12.650
secure web traffic, https, and also IP check for VPN tunnels that will be talking about later.

22
00:02:13.040 --> 00:02:21.740
Algorithms that are used for symmetric encryption include there's triple there's as s and SEAL days

23
00:02:21.740 --> 00:02:25.370
and triple days are really older algorithms now.

24
00:02:25.370 --> 00:02:28.610
So varsities insecure, not used to commonly know.

25
00:02:28.790 --> 00:02:31.660
More commonly used today would be AEF.

26
00:02:32.890 --> 00:02:38.520
So let's have a look at how symmetric encryption works and how it provides confidentiality.

27
00:02:39.090 --> 00:02:44.620
See here we've got the host on the left and it's got some data that says hello.

28
00:02:44.710 --> 00:02:50.620
And we want to send that securely to the host on the right over the untrusted network.

29
00:02:51.110 --> 00:02:59.180
So the host on the left encrypts the of hello with the shared key of one, two, three.

30
00:02:59.440 --> 00:03:04.340
And when it does, it comes out with garbled encrypted there.

31
00:03:04.420 --> 00:03:12.340
As you can see down at the bottom here is then that encrypted data which is sent across the untrusted

32
00:03:12.340 --> 00:03:12.910
network.

33
00:03:13.090 --> 00:03:19.540
So if there's anybody on untrusted network that is able to sniff out data, they can sniff it.

34
00:03:19.540 --> 00:03:25.000
But it's not a problem because we can't read the actual data that we are sending.

35
00:03:25.000 --> 00:03:28.150
They only see the encrypted garbled copy.

36
00:03:28.390 --> 00:03:34.930
It then comes out the intended target, the host on the right still in the encrypted format.

37
00:03:35.140 --> 00:03:41.590
It then decrypts it with the same shared key of one, two, three in our example, and it then comes

38
00:03:41.590 --> 00:03:44.150
out in readable format again of hello.

39
00:03:44.440 --> 00:03:51.130
So that's how we were able to get that sensitivity of halloo across from the left hand side over to

40
00:03:51.130 --> 00:03:54.640
the right hand side, over the untrusted network securely.

41
00:03:56.370 --> 00:04:02.310
OK, so that was symmetric encryption, there is also asymmetric encryption as well, and asymmetric

42
00:04:02.310 --> 00:04:07.790
encryption uses private and public key players to deal with semantic encryption.

43
00:04:07.800 --> 00:04:08.520
It's a share.

44
00:04:08.520 --> 00:04:12.480
It's the same shared key on both sides with asymmetric encryption.

45
00:04:12.480 --> 00:04:14.790
It's a private and public key pair.

46
00:04:15.150 --> 00:04:18.120
The way it works is they are encrypted with the public.

47
00:04:18.120 --> 00:04:22.970
He can only be decrypted with the private key and vice versa.

48
00:04:23.100 --> 00:04:26.820
So anything decrypted with the public, he can only be decrypted with the private key.

49
00:04:26.970 --> 00:04:31.770
Anything encrypted with the private key can only be decrypted with the public key.

50
00:04:31.920 --> 00:04:36.330
If something's encrypted with the public key, it cannot be decrypted with the public key.

51
00:04:36.540 --> 00:04:41.310
And if something's been encrypted with the private key, it cannot be decrypted with the private key

52
00:04:41.310 --> 00:04:43.770
server like a male female of each other.

53
00:04:44.690 --> 00:04:52.430
Own only the private key must be kept secret with our asymmetric encryption, the public, he can be

54
00:04:52.430 --> 00:04:53.380
shared everywhere.

55
00:04:53.480 --> 00:04:57.470
You see how this works as we go through this lecture on the next.

56
00:04:58.850 --> 00:05:04.280
So the public, as I just said, can be available everywhere, it can be known in the public domain

57
00:05:04.460 --> 00:05:09.310
with asymmetric encryption is slow as compared to symmetric encryption.

58
00:05:09.320 --> 00:05:16.700
So because this is used for smaller transmission, like exchanging our symmetric keys and also digital

59
00:05:16.700 --> 00:05:20.780
signatures, I'll explain how those work later on in the section.

60
00:05:21.020 --> 00:05:25.780
Algorithms for asymmetric encryption include Oddisee and the same.

61
00:05:26.840 --> 00:05:33.470
So let's have a look at asymmetric encryption and action to N.V. example here, the host on the left

62
00:05:33.470 --> 00:05:38.350
has got the public key and the host and the right has got the matching private key.

63
00:05:38.750 --> 00:05:42.170
How we can use asymmetric encryption for confidentiality.

64
00:05:42.170 --> 00:05:47.930
First to hear the host on the left has the public key of the host and right.

65
00:05:47.930 --> 00:05:55.400
And it wants to send the data of Hommel over there securely so it takes out the flow and encrypts it

66
00:05:55.400 --> 00:05:58.120
with the host on the right public key.

67
00:05:58.430 --> 00:05:59.480
So it does right.

68
00:05:59.490 --> 00:06:01.820
And it then comes up with the garbled data.

69
00:06:02.000 --> 00:06:08.030
Now here the host on the left does not know the private key, the host and right.

70
00:06:08.210 --> 00:06:14.960
It only knows the public key to encrypted data for the host and right with its public key, the host

71
00:06:14.960 --> 00:06:16.340
on the right public key.

72
00:06:16.460 --> 00:06:20.030
And it then sends it over the network that comes in.

73
00:06:20.120 --> 00:06:27.440
The host on the right comes in is the encrypted garbled data, then decrypt it with its private key

74
00:06:27.680 --> 00:06:31.380
and it comes out with the original data of hello.

75
00:06:32.060 --> 00:06:40.280
Now with this, it allows anybody to send data security to the host with the private key because all

76
00:06:40.280 --> 00:06:46.460
hosts are allowed to have the public keep the host on the right with the private key is the only one

77
00:06:46.460 --> 00:06:47.850
that has the private key.

78
00:06:47.870 --> 00:06:49.250
Nobody else has that.

79
00:06:49.400 --> 00:06:52.280
So it's the only one that can read the message.

80
00:06:52.530 --> 00:06:57.710
Again, if something's encrypted with the public key, it can only be decrypted with private key, not

81
00:06:57.710 --> 00:06:58.880
with the public key.

82
00:06:59.000 --> 00:07:04.550
So the host on the right is the only one that can read any messages that have been encrypted with its

83
00:07:04.550 --> 00:07:07.220
public key Oberhauser with the public.

84
00:07:07.220 --> 00:07:09.080
He cannot read that message.

85
00:07:09.930 --> 00:07:12.220
All right, so that's how it works for confidentiality.

86
00:07:12.480 --> 00:07:18.680
We can also use asymmetric encryption for authentication and non repudiation here.

87
00:07:18.690 --> 00:07:21.840
The traffic is going to be initiated from the right hand side.

88
00:07:22.050 --> 00:07:27.120
Again, it's Hosten, right, with the private key post on the left has got the matching public key

89
00:07:27.450 --> 00:07:28.920
to the host.

90
00:07:28.920 --> 00:07:37.740
On the right has got some data which says hello, encrypt it with its private key, then sends via encrypted

91
00:07:37.740 --> 00:07:45.720
copy of it over the untrusted network to the host on the left, the host on the left then and then decrypt

92
00:07:45.720 --> 00:07:48.180
it with the host on the right public key.

93
00:07:48.330 --> 00:07:51.410
And it comes out with the same original idea of hello.

94
00:07:51.420 --> 00:07:57.840
Then to hear the host on the left could have said to the host, the right, OK, if you are who I think

95
00:07:57.840 --> 00:08:01.020
you are, take this day of hello.

96
00:08:01.140 --> 00:08:06.870
Encrypt it with your private key and send it back to me who is going right then does what it comes back

97
00:08:06.870 --> 00:08:12.030
to the host in the left decrypt it and it does say hello, which is what it was expecting.

98
00:08:12.150 --> 00:08:15.420
So it now knows who is talking to the host.

99
00:08:15.420 --> 00:08:17.700
It thinks it's talking to you over on the right.

100
00:08:17.850 --> 00:08:20.400
It's authenticated it and also the host and right.

101
00:08:20.400 --> 00:08:25.590
Cannot deny that later because it's the only one that would have been capable of doing that, because

102
00:08:25.590 --> 00:08:27.240
it's the only one with the private key.

103
00:08:28.380 --> 00:08:34.200
So that provides authenticity, of course, with the private key, all receivers need to know what is

104
00:08:34.200 --> 00:08:36.570
the genuine public key for this to work?

105
00:08:37.830 --> 00:08:46.440
Next thing is Mark Hosh based message authentication codes and SCHMOCK codes provide data integrity

106
00:08:46.560 --> 00:08:49.940
to make sure that it has not been altered in transit.

107
00:08:50.370 --> 00:08:56.250
The sender creates a hash value from the data to be sent using asymmetric he.

108
00:08:56.610 --> 00:09:00.030
The hash value is then appended to the data.

109
00:09:00.300 --> 00:09:04.470
The receiver hashes with the same shared key when it receives it.

110
00:09:04.710 --> 00:09:10.190
And if a hash values are the same, but not proof that the data has not been altered in transit.

111
00:09:10.470 --> 00:09:12.890
This is also used for large transmissions.

112
00:09:12.900 --> 00:09:20.010
For example, email, secure web traffic and IP and algorithms include M.V. five on shot.

113
00:09:20.910 --> 00:09:27.810
So you're looking at how each could work here, the host on the left has got the data which says hello,

114
00:09:28.410 --> 00:09:35.850
then hashes with the shared key of one, two, three, and it comes out with a hash, which is in a

115
00:09:35.850 --> 00:09:37.770
garbled format, as you see here.

116
00:09:37.980 --> 00:09:44.100
Then when it sends the data across the network, it's got the original data which says hello, and it's

117
00:09:44.100 --> 00:09:46.500
got the hash value appended to that.

118
00:09:46.710 --> 00:09:48.510
That comes in the host on the right.

119
00:09:48.630 --> 00:09:56.520
It sees with the and the hash, then it hashes the with the same shared key of one, two, three.

120
00:09:56.790 --> 00:10:02.160
And if the hash value matches and the right is what it was in the way after which was sent over, that

121
00:10:02.160 --> 00:10:05.300
means that the data has not been altered in transit.

122
00:10:05.550 --> 00:10:10.470
Now, with the example here, you can see that we sent the data in plain text there.

123
00:10:10.650 --> 00:10:11.430
So what the H.

124
00:10:11.430 --> 00:10:13.730
Markku does is it just checks.

125
00:10:13.830 --> 00:10:15.930
There is no altered in transit.

126
00:10:16.080 --> 00:10:19.450
Now, normally the data will be encrypted as well.

127
00:10:19.590 --> 00:10:24.780
So normally here we would have the data encrypted with a symmetric key.

128
00:10:24.960 --> 00:10:31.620
We're also taking a hash value as well, should by encrypting the data that provides the confidentiality,

129
00:10:31.770 --> 00:10:37.530
having the code that provides the integrity to be using BOV in combination with each other.

130
00:10:39.060 --> 00:10:45.770
Next thing is key distribution, so cryptography can be used to send sensitive data securely over an

131
00:10:45.780 --> 00:10:52.170
untrusted network, as you've just seen on symmetric key encryption is used for bulk data transmissions

132
00:10:52.290 --> 00:10:55.830
because asymmetric encryption is too slow for that Wolf.

133
00:10:55.870 --> 00:11:03.300
Key, with our symmetric encryption, each side needs to know the shared key, and this can lead to

134
00:11:03.300 --> 00:11:04.920
a key distribution problems.

135
00:11:04.980 --> 00:11:07.090
Let me explain what the problem is.

136
00:11:07.410 --> 00:11:13.470
So, for example, when you buy something online, you want your credit card details to be encrypted

137
00:11:13.470 --> 00:11:14.600
over the Internet.

138
00:11:14.700 --> 00:11:17.820
You don't want anybody else seeing your credit card details.

139
00:11:18.150 --> 00:11:23.810
Now, the online store can't send you the shift key over the same Internet channel.

140
00:11:23.820 --> 00:11:24.820
It's not secure.

141
00:11:24.960 --> 00:11:31.230
So if you're shopping online there and somebody sniffing your traffic and the online store sends you

142
00:11:31.230 --> 00:11:36.720
the shared key overwriting net connection, then anybody that's sniffing it can see this year key so

143
00:11:36.720 --> 00:11:38.790
they can read the data that comes later.

144
00:11:38.790 --> 00:11:41.020
They can still read your credit card details.

145
00:11:41.370 --> 00:11:48.810
So for that shared key to be shared with you, we need to have a secure out of bond method of doing

146
00:11:48.810 --> 00:11:52.080
it, not sending it over the same Internet connection.

147
00:11:52.290 --> 00:11:54.540
And obviously it's not practical.

148
00:11:54.840 --> 00:12:01.040
The online store for not every single customer, every time there is an online purchase.

149
00:12:01.260 --> 00:12:08.070
So we need some other way of getting a shared key over on both sides of the link about key distribution

150
00:12:08.070 --> 00:12:08.460
problem.

151
00:12:09.450 --> 00:12:15.030
And the solution for that is PCI public key infrastructure.

152
00:12:15.360 --> 00:12:22.290
PKI uses a trusted introducer, which is the certificate authority for the two parties who need the

153
00:12:22.290 --> 00:12:23.730
secure communication.

154
00:12:24.030 --> 00:12:32.100
Both parties need to trust the certificate authority and act as a go between which allows them to share

155
00:12:32.760 --> 00:12:34.650
shared key securely.

156
00:12:34.830 --> 00:12:38.850
And I'll show you how the process works in the next lecture.

