WEBVTT
1
00:00:06.220 --> 00:00:16.510
In the last lecture, you learned that switches, which function at Layer 2 of the OSI stack, learn MAC addresses,

2
00:00:16.870 --> 00:00:24.400
and use that information to populate the MAC address table, which is a mapping of the MAC address to the

3
00:00:24.400 --> 00:00:26.740
port that is reachable on.

4
00:00:26.890 --> 00:00:33.980
In this lecture, we're going to take a look at how that works in a bit more detail, with an example.

5
00:00:34.000 --> 00:00:35.900
So, we've got one switch here.

6
00:00:36.010 --> 00:00:45.810
We've got a host with MAC address 1111.1111.1111 plugged into Port 1. 

7
00:00:45.820 --> 00:00:51.490
I've just written it in shorthand here as 1.1.1 to keep things a bit more simple. 2.2.2

8
00:00:51.490 --> 00:00:58.350
is plugged into Port 2, and 3.3.3 is plugged into Port 3.

9
00:00:58.420 --> 00:01:04.590
Right now, we've just powered everything on, so there's nothing in the MAC address table yet.

10
00:01:04.599 --> 00:01:11.890
Then the host on the left, 1.1.1, sends a frame in with the destination MAC address of 2.2.2. 

11
00:01:11.890 --> 00:01:18.970
The switch will see that. It sees a frame coming in with the source MAC of 1.1.1,

12
00:01:18.970 --> 00:01:22.860
the destination MAC of 2.2.2,

13
00:01:22.870 --> 00:01:24.970
so it learns that 1.1.1

14
00:01:24.970 --> 00:01:33.760
is reachable on Port 1, and it puts that information into the MAC address table. The destination

15
00:01:33.790 --> 00:01:37.620
of 2.2.2 is not in the MAC address table yet.

16
00:01:37.660 --> 00:01:43.910
It's an unknown unicast address, so the switch will flood it out all ports

17
00:01:43.930 --> 00:01:52.060
apart from the one it was received on. That will be sent out Ports 2 and 3. That will be received by

18
00:01:52.060 --> 00:02:00.330
both hosts. The host 3.3.3 will see that the destination MAC address is 2.2.2. That's not it,

19
00:02:00.340 --> 00:02:07.960
so it will just silently discard the frame. The host of 2.2.2, in our example,

20
00:02:07.960 --> 00:02:15.520
is going to send some traffic back. So, it sends a reply from the source MAC of 2.2.2 itself

21
00:02:15.790 --> 00:02:22.420
to the destination MAC address of 1.1.1. That will hit the switch again. The switch will

22
00:02:22.440 --> 00:02:29.410
see that traffic has come from a source of 2.2.2, and it came from Port 2, so it will

23
00:02:29.410 --> 00:02:37.300
put that information into its MAC address table. It will then send the frame out only Port 1 because 

24
00:02:37.300 --> 00:02:42.610
it sees that the destination MAC address is 1.1.1, and it knows that it's available on

25
00:02:42.610 --> 00:02:46.880
Port 1, so it sends it out only that port.

26
00:02:47.080 --> 00:02:51.540
Okay, so that was how traffic works with a single switch.

27
00:02:51.700 --> 00:02:58.690
Now, we're going to look at another example where we've got two switches. Switch 1 has got host 1.1.1 

28
00:02:58.690 --> 00:03:04.930
plugged into Port 1 and 2.2.2 plugged into Port 2. Switch 2

29
00:03:04.930 --> 00:03:11.080
has got host 3.3.3 plugged into Port 1, and 4.4.4 plugged into Port 2.

30
00:03:11.110 --> 00:03:19.000
The two switches are connected to each other using Port 24 on both switches. Again,

31
00:03:19.000 --> 00:03:25.690
we've just powered everything on, so there's nothing in the MAC address table on either switch yet. Then,

32
00:03:25.750 --> 00:03:34.120
host 1.1.1 sends a frame in with a destination MAC address of 2.2.2. Switch 1

33
00:03:34.120 --> 00:03:40.990
will learn that 1.1.1 is available on Port 1, and it will put that information into its MAC address table.

34
00:03:40.990 --> 00:03:48.010
It will then flood the frame out all ports because it's unknown unicast,

35
00:03:48.040 --> 00:03:54.710
it doesn't know where 2.2.2 is yet. So, that will get sent out both Port 2 and Port 24.

36
00:03:54.710 --> 00:04:02.530
When it comes to Switch 2, Switch 2 will do the same thing. It will flood it out all ports,

37
00:04:02.530 --> 00:04:11.470
so that will be sent out Port 1 and Port 2 as well. The hosts 3.3.3 and 4.4.4 will see that the destination

38
00:04:11.470 --> 00:04:18.880
MAC address is 2.2.2, that's not for them. So, they will silently drop the packet. While that

39
00:04:18.880 --> 00:04:26.320
is happening, Switch 2 will update its MAC address table because it learned that 1.1.1

40
00:04:26.650 --> 00:04:34.770
was reachable through Port 24 because that's the port that the frame came in on. The frame will have

41
00:04:34.770 --> 00:04:41.010
reached 2.2.2. In our example again, it's going to send some return traffic, so that will hit Switch 1

42
00:04:41.010 --> 00:04:48.060
with a source MAC of 2.2.2 and a destination MAC address of 1.1.1.

43
00:04:49.080 --> 00:04:57.090
Switch 1 will update its MAC address table with the entry for 2.2.2 to say it is reachable

44
00:04:57.090 --> 00:05:06.240
on Port 2. Switch 1 will then forward the frame out Port 1 because it already knows that MAC address

45
00:05:06.330 --> 00:05:13.830
of 1.1.1 is reachable through there. It's in its MAC address table. Notice that the frame

46
00:05:13.830 --> 00:05:20.250
does not get sent down to Switch 2 now because Switch 1 knew that it should go out only on Port 1.

47
00:05:20.310 --> 00:05:27.260
The next thing that happens, we're going to have some different traffic. Now, the source of 3.3.3

48
00:05:27.290 --> 00:05:35.940
sends a frame to destination MAC address of 2.2.2. That hits Switch 2, and

49
00:05:35.940 --> 00:05:42.480
it will update its MAC address table to say that host 3.3.3 is reachable on Port 1.

50
00:05:42.570 --> 00:05:47.570
Switch 2 will then forward what frame out

51
00:05:47.620 --> 00:05:54.610
all ports because the destination MAC address was 2.2.2, and it doesn't have that in its MAC

52
00:05:54.610 --> 00:05:55.350
address table.

53
00:05:55.390 --> 00:05:56.840
So, it's an unknown unicast,

54
00:05:56.950 --> 00:06:05.440
it will send it everywhere. That will hit Switch 1, and Switch 1 will see the frame arriving on Port 

55
00:06:05.440 --> 00:06:06.440
24

56
00:06:06.490 --> 00:06:09.530
that came with a source MAC address of 3.3.3.

57
00:06:09.610 --> 00:06:15.900
So, it will put that information in its MAC address table. It will then send the frame

58
00:06:15.930 --> 00:06:22.430
out Port 2 to the destination of 2.2.2 because it already had that in its MAC address table.

59
00:06:22.670 --> 00:06:30.920
It just sends it out that one relevant port. Then host 2.2.2 sends some return traffic, back

60
00:06:30.920 --> 00:06:38.660
to the destination MAC address of 3.3.3, and that hits Switch 1. Switch 1 does have 3.3.3 in its

61
00:06:38.720 --> 00:06:45.440
MAC address table. It sees that it's reachable through Port 24. So, it sends it out just that port. The traffic

62
00:06:45.440 --> 00:06:52.730
will then hit Switch 2. Switch 2 sees traffic coming in from a source MAC address of 2.2.2

63
00:06:53.030 --> 00:06:54.350
on Port 24.

64
00:06:54.530 --> 00:07:01.610
So it will update its MAC address table with that information. It will then forward the frame out Port 1

65
00:07:01.610 --> 00:07:09.740
only because it knows that 3.3.3 is available out that port. And if you look at the MAC address table

66
00:07:09.770 --> 00:07:18.410
for Switch 2 now, you can see that 1.1.1 and 2.2.2 are both reachable on

67
00:07:18.410 --> 00:07:25.010
Port 24. And this is what you'll see in normal practice as well. Where a switch has got a single

68
00:07:25.040 --> 00:07:32.150
end host plugged into it on a port, then it will just have that one MAC address on that port in its MAC address

69
00:07:32.150 --> 00:07:38.930
table. But where a switch is connected to another switch, you'll see there will be multiple MAC addresses

70
00:07:38.930 --> 00:07:41.310
reachable on that port. Okay,

71
00:07:41.390 --> 00:07:41.870
that's it.

72
00:07:41.870 --> 00:07:48.200
That's what I want it to show you there. You now know how switch operation works, both for a single switch

73
00:07:48.500 --> 00:07:51.110
and in a multi-switch campus.

