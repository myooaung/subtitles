WEBVTT
1
00:00:06.430 --> 00:00:16.990
In this lecture, you'll learn how to do a basic configuration of OSPF on our Cisco routers. So to

2
00:00:17.020 --> 00:00:26.020
enable OSPF, the top level command at global config is 'router ospf' and then, a Process ID. So you can

3
00:00:26.020 --> 00:00:27.070
see in the example here,

4
00:00:27.070 --> 00:00:30.250
I've said 'router ospf 1'.

5
00:00:30.280 --> 00:00:37.760
Different interfaces on a router can run in different instances or different Process IDs of

6
00:00:37.810 --> 00:00:42.470
OSPF. Different instances have different Link

7
00:00:42.470 --> 00:00:45.960
State Databases (LSDB), so they run separately.

8
00:00:46.120 --> 00:00:54.310
Only one instance is typically configured on OSPF routers. Multiple Process IDs are very rarely

9
00:00:54.310 --> 00:00:54.610
used.

10
00:00:54.610 --> 00:00:58.950
It's not normal to have different Process IDs on the router.

11
00:00:59.260 --> 00:01:02.760
The Process ID is locally significant. Meaning,

12
00:01:02.770 --> 00:01:07.570
it does not have to match on the neighbor router for them to form an adjacency.

13
00:01:07.630 --> 00:01:11.000
You'll see what I mean about that coming up on the next slide.

14
00:01:11.040 --> 00:01:21.190
So in the example below, we've got 3 routers, R1, R2, and R3, with R2 in the middle. On R3,

15
00:01:21.190 --> 00:01:29.440
both interfaces have been put in Process ID 1. On R2, the left hand interface is in Process ID 2,

16
00:01:29.470 --> 00:01:39.650
the right hand interface is in Process ID 3, and on R1, its left hand interface is in Process ID 4.

17
00:01:39.950 --> 00:01:46.390
R2 will form adjacencies both with R3 and with R1.

18
00:01:46.410 --> 00:01:52.240
So even though the Process ID is different on the routers, that's a locally significant number. It does

19
00:01:52.240 --> 00:01:54.370
not have to match on both sides,

20
00:01:54.430 --> 00:02:02.290
so the routers will still form adjacencies. In our example here, on R2, the left hand and the right hand

21
00:02:02.290 --> 00:02:05.220
interfaces are in two different processes.

22
00:02:05.320 --> 00:02:11.680
So they're going to have separate Link State Databases, and information is not going to be shared between

23
00:02:11.680 --> 00:02:12.660
the two sides.

24
00:02:12.700 --> 00:02:20.810
So R1 and R3 will not learn routes to each other because both sides are in different process IDs

25
00:02:20.810 --> 00:02:28.330
on router R2. The way we would configure this is on R2, we say 'router ospf 2' at global config,

26
00:02:28.630 --> 00:02:32.170
and then 'network 10.0.0.0', the wildcard mask,

27
00:02:32.170 --> 00:02:39.050
'0.0.0.255 area 0', and then for the other interface, we say 'router ospf 3' and

28
00:02:39.080 --> 00:02:41.610
'network 10.1.0.0 0.0.0.255 area 0'.

29
00:02:41.620 --> 00:02:46.820
Okay, so that's how you can have different processes for OSPF running on the same router.

30
00:02:46.870 --> 00:02:50.580
It is absolutely not normal to do that.

31
00:02:50.580 --> 00:02:52.400
Very rare that you would see this.

32
00:02:52.420 --> 00:02:57.550
I'm just showing you it here so that you can fully understand what the Process ID is.

33
00:02:57.880 --> 00:03:05.670
What is more normal is where all the routers in your network are all using the same Process ID number

34
00:03:05.830 --> 00:03:12.580
So you can see here now on routers R1, R2, and R3, the same topology as before, we've configured

35
00:03:12.670 --> 00:03:21.970
OSPF Process ID 1 on all interfaces. On R2, we say 'router ospf 1', network 10.0.0.0 and

36
00:03:21.970 --> 00:03:29.950
network 10.1.0.0 are both under Process ID 1, and now, R1 and R3 will learn routes to each

37
00:03:29.950 --> 00:03:30.880
other.

38
00:03:31.030 --> 00:03:39.730
Don't worry about the area statement on the end here yet, we're going to cover what areas are and how

39
00:03:39.730 --> 00:03:45.590
they work towards the end of this section. Okay,

40
00:03:45.640 --> 00:03:54.200
so we configured router OSPF and usually we'll use a Process ID of 1. The next command to use is the network

41
00:03:54.230 --> 00:03:54.800
command.

42
00:03:54.800 --> 00:04:02.720
This is pretty much the same as the network command we had for EIGRP as well. So network, and then

43
00:04:02.720 --> 00:04:08.960
the network address, space, and then the wildcard mask, which is the inverse of the subnet mask, and then

44
00:04:08.960 --> 00:04:15.800
specify the area. If you've got a small network, you can just put everything in area 0.

45
00:04:15.830 --> 00:04:19.180
Again, we'll cover areas in more detail later on.

46
00:04:19.339 --> 00:04:26.090
So network command uses a wildcard mask rather than a subnet mask, which is the inverse of the subnet

47
00:04:26.090 --> 00:04:26.450
mask.

48
00:04:26.720 --> 00:04:35.450
So if your subnet mask was 255.255.0.0, your wildcard mask would be 0.0.255.255.

49
00:04:35.600 --> 00:04:44.570
If your subnet mask was 255.255.255.252, your wildcard mask would be 0.0.0.3.

50
00:04:44.590 --> 00:04:51.500
To figure out the wildcard mask, just subtract these octets in the subnet mask from 255.

51
00:04:54.870 --> 00:04:58.110
Next thing, in EIGRP,

52
00:04:58.200 --> 00:05:05.280
if you specify the network statement and you don't include a wildcard mask, it defaults to using the

53
00:05:05.280 --> 00:05:10.200
classful wildcard mask. For example, 0.255.255.255

54
00:05:10.320 --> 00:05:16.420
for the Class A. In OSPF, it does not default to doing that.

55
00:05:16.500 --> 00:05:23.570
You have to enter the wildcard mask in OSPF. If you try entering a network statement without a wildcard mask,

56
00:05:23.640 --> 00:05:25.280
it's going to give you an error message.

57
00:05:27.450 --> 00:05:32.440
What the network command means is the same as it was in EIGRP.

58
00:05:32.520 --> 00:05:40.530
Look for interfaces with an IP address which falls within that range and then enable OSPF on those

59
00:05:40.530 --> 00:05:47.750
interfaces. Meaning, send out and listen for OSPF Hello messages and peer with adjacent OSPF routers.

60
00:05:47.760 --> 00:05:55.320
Once the adjacency has been formed, advertise the network and mask which is configured on those interfaces.

61
00:05:55.800 --> 00:05:57.690
So the same example as we had before

62
00:05:57.690 --> 00:06:06.960
for EIGRP, you see we've got R1 here. FastEthernet0/0 has got IP address 10.1.0.1/24,

63
00:06:06.980 --> 00:06:14.180
FastEthernet1/0 is on the 10.0.1.0/24 network, and FastEthernet2/0 is on the

64
00:06:14.180 --> 00:06:18.060
10.0.2.0/24 network.

65
00:06:18.060 --> 00:06:25.200
So we could put in 3 separate network statements to cover each of the interfaces, or we could just cover

66
00:06:25.200 --> 00:06:27.810
them all with just one network statement.

67
00:06:27.860 --> 00:06:29.460
Actually, in the example here,

68
00:06:29.460 --> 00:06:32.670
we just want to turn on OSPF for interfaces

69
00:06:32.680 --> 00:06:35.010
FastEthernet1/0 and FastEthernet2/0.

70
00:06:35.010 --> 00:06:39.640
We don't want to include FastEthernet0/0. So we configure our network command,

71
00:06:39.670 --> 00:06:46.280
'network 10.0.0.0 0.0.255.255 area 0'.

72
00:06:46.320 --> 00:06:53.340
So all interfaces that have got an IP address that begins with 10.0 and then anything after that,

73
00:06:53.620 --> 00:06:56.890
we're going to turn OSPF on for those interfaces.

74
00:06:56.970 --> 00:07:02.940
So that will match on interface FastEthernet1/0 and FastEthernet2/0. FastEthernet0/0 begins

75
00:07:02.940 --> 00:07:04.400
with 10.1,

76
00:07:04.480 --> 00:07:10.440
so that is not included in the network statement. So, we're not going to turn OSPF on there.

77
00:07:10.470 --> 00:07:17.760
The networks that will be advertised are 10.0.1.0/24 because that's the

78
00:07:17.850 --> 00:07:23.330
subnet configured on the interface, and 10.0.2.0/24.

79
00:07:23.340 --> 00:07:32.570
We do not advertise 10.0.0.0/16, which is what we configured in the network statement.

80
00:07:32.570 --> 00:07:32.880
Okay,

81
00:07:32.910 --> 00:07:37.680
the network statement does not say advertise this subnet.

82
00:07:37.680 --> 00:07:44.610
The network statement says, look for interfaces which fall within this range, enable OSPF on interfaces,

83
00:07:44.880 --> 00:07:49.450
and then advertise with subnet that is configured on that interface.

84
00:07:51.510 --> 00:07:55.910
Okay, so that's how we do a basic configuration of OSPF.

85
00:07:55.950 --> 00:07:58.250
Moving on to actually verifying it now.

86
00:07:58.250 --> 00:08:07.050
To see your OSPF configuration, we can do a 'show run' and then pipe '|' it to 'section ospf'. That will show

87
00:08:07.140 --> 00:08:13.050
all of the OSPF commands in your running config, whether they're under the main OSPF part of the configuration

88
00:08:13.080 --> 00:08:15.040
or at the interface level.

89
00:08:15.090 --> 00:08:21.180
So this is convenient to see all your OSPF commands, it's easier than doing a 'show run' and trying to

90
00:08:21.180 --> 00:08:25.330
scroll down to the actual part of the config.

91
00:08:25.410 --> 00:08:27.890
'show ip protocols'

92
00:08:27.890 --> 00:08:32.909
will show all the routing protocols that are running on the router. You can see in the example here,

93
00:08:32.909 --> 00:08:38.850
we're running OSPF with Process ID 1. You can see other information, like the networks

94
00:08:38.850 --> 00:08:49.300
it's routing for, the routing information sources which are the OSPF neighbors, etc. 'show ip opf interface brief'

95
00:08:49.300 --> 00:08:54.980
will show which interfaces have got OSPF enabled on them on this router,

96
00:08:55.050 --> 00:09:03.270
the Process ID for the interface, the area, the IP address and mask, the cost for the metric, and how

97
00:09:03.270 --> 00:09:12.740
many neighbors are reachable through that interface. With the OSPF operations that run in the router

98
00:09:12.770 --> 00:09:13.970
after you enable it,

99
00:09:14.060 --> 00:09:18.580
the first thing it does is it discovers neighbors and forms adjacencies.

100
00:09:18.680 --> 00:09:24.860
So if you're going to verify that OSPF is working, it makes sense, the first thing to check is that it has

101
00:09:24.950 --> 00:09:27.860
been able to form adjacencies.

102
00:09:27.860 --> 00:09:35.600
The command to check that is 'show ip ospf neighbor'. Whenever I configure OSPF, the first command I always

103
00:09:35.600 --> 00:09:36.440
do after that

104
00:09:36.440 --> 00:09:42.620
once I've configured both sides of the link is 'show ip ospf neighbor', check that the routers can see each other and

105
00:09:42.620 --> 00:09:46.250
they have formed an adjacency. So see in the example here, the neighbor ID

106
00:09:46.250 --> 00:09:54.230
is 10.0.2.1 and it's reachable out interface FastEthernet0/0.

107
00:09:54.320 --> 00:10:01.370
The next thing that happens with OSPF operations is the routers will flood the Link State Database (LSDB). To see if

108
00:10:01.370 --> 00:10:08.380
routes have been learned from OSPF, you can use the 'show ip ospf database' command.

109
00:10:08.380 --> 00:10:14.830
That will show all the links that are available in that area and throughout the OSPF network.

110
00:10:14.840 --> 00:10:22.070
The next thing that happens is the routers will look at all the available possible paths, and they will

111
00:10:22.070 --> 00:10:27.620
decide which is the best path using the Shortest Path First algorithm,

112
00:10:27.620 --> 00:10:30.720
and put that best path into the routing table.

113
00:10:30.760 --> 00:10:39.180
So, next command to verify is 'show ip route' and check that you've got OSPF routes in the routing table.

114
00:10:39.440 --> 00:10:43.910
Again, when I configure OSPF, first command I'll use is 'show ip ospf neighbor',

115
00:10:43.910 --> 00:10:47.060
check the adjacency has come up. The next command after that

116
00:10:47.070 --> 00:10:51.890
I'll use a 'show ip route', and check that OSPF routes are in the routing table.

117
00:10:51.950 --> 00:10:58.100
I won't normally look at the database unless the routing table does not contain the routes I was expecting,

118
00:10:58.370 --> 00:11:02.490
and then, I'll use that more as a troubleshooting command.

119
00:11:02.540 --> 00:11:02.900
Okay,

120
00:11:02.990 --> 00:11:09.060
So that was how to do a basic configuration of OSPF. In the next lecture, we'll actually do this

121
00:11:09.180 --> 00:11:09.510
in the lab.

