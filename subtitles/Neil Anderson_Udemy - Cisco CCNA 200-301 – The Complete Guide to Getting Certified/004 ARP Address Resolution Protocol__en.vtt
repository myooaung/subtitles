WEBVTT
1
00:00:06.090 --> 00:00:09.220
In this lecture, you'll learn about ARP,

2
00:00:09.270 --> 00:00:18.480
the Address Resolution Protocol. As usual, we'll start by looking at how this fits into the OSI stack.

3
00:00:18.480 --> 00:00:24.800
So we've got a sender on the left, it's going to send some traffic to the receiver on the right.

4
00:00:24.870 --> 00:00:31.800
The sender will compose the packet, starting of with the Layer 7 information, that's the Application 

5
00:00:31.800 --> 00:00:39.210
Layer. It will then encapsulate that with Layer 6, the Presentation Layer header. That will be encapsulated

6
00:00:39.300 --> 00:00:46.950
in the Session Layer header. Then, at Layer 4 with the Transport Layer header, which will include information

7
00:00:46.950 --> 00:00:55.080
such as whether it's TCP or UDP, and the port number. That will then get encapsulated with the Layer 3

8
00:00:55.140 --> 00:01:04.200
IP header, which includes the source and destination IP address. That will then be encapsulated in the Layer 2

9
00:01:04.230 --> 00:01:11.370
Data-Link header, which includes the source and destination MAC address, and that will then get put onto

10
00:01:11.370 --> 00:01:13.890
the physical wire.

11
00:01:14.130 --> 00:01:24.780
So as you saw in the last lecture, the sender can either send directly to an IP address or it can send

12
00:01:24.780 --> 00:01:31.410
to an FQDN. If it sends to that Fully Qualified Domain Name, then that will need to be resolved into

13
00:01:31.410 --> 00:01:34.920
the IP address using DNS.

14
00:01:34.920 --> 00:01:38.910
So we'll find the destination IP address, 

15
00:01:39.060 --> 00:01:46.620
then when the packet gets down to Layer 2, the sender also needs to know the destination MAC

16
00:01:46.620 --> 00:01:47.280
address.

17
00:01:47.310 --> 00:01:54.130
So when it composes a packet, it needs to know both the destination IP address and the MAC address as well.

18
00:01:54.420 --> 00:02:02.610
Now, the IP address is a logical address, which is controlled by administrators, so it makes sense that

19
00:02:02.610 --> 00:02:09.990
we can have that referenced in the application, either directly as the destination IP address or as the

20
00:02:10.009 --> 00:02:13.360
FQDN, which can be resolved by DNS.

21
00:02:13.620 --> 00:02:18.810
But the MAC address, on the other hand, is not a logical address.

22
00:02:18.810 --> 00:02:27.000
We just have that great, big, flat global address space, so it's not really possible either for the user to

23
00:02:27.000 --> 00:02:33.540
enter the destination MAC address themself, or for it to be configured in the application. Because

24
00:02:33.540 --> 00:02:38.540
of that, we need a way that it can be automatically derived.

25
00:02:38.550 --> 00:02:46.110
We need a protocol that's going to be able to figure out what the MAC address is automatically, and that's

26
00:02:46.110 --> 00:02:47.220
what ARP is,

27
00:02:47.220 --> 00:02:58.210
the Address Resolution Protocol. ARP maps the destination IP address to the destination MAC address.

28
00:02:58.440 --> 00:03:06.030
So, in the example here, we've got a sender on the left at 172.23.4.1, and its

29
00:03:06.030 --> 00:03:11.850
MAC address is 1111.2222.3333. It's going to send some traffic to the receiver on the right

30
00:03:12.120 --> 00:03:20.500
with IP address 172.23.4.2 and the MAC address 2222.3333.4444. In our example,

31
00:03:20.500 --> 00:03:25.210
the sender already knows that it wants to send traffic to IP address

32
00:03:25.210 --> 00:03:35.040
172.23.4.2, so it can compose the packet as far as the Layer 3 IP header, but it doesn't know the

33
00:03:35.040 --> 00:03:43.680
receiver's MAC address yet. It's going to use ARP to find that out. So, it will send out an ARP request, which is

34
00:03:43.710 --> 00:03:49.450
a Layer 2 broadcast. The ARP request says, "Hey, I'm looking for

35
00:03:49.480 --> 00:03:52.210
172.23.4.2,

36
00:03:52.230 --> 00:03:58.950
what's your MAC address?" That will come from the sender's MAC address of 1111.2222.3333, and it

37
00:03:58.950 --> 00:04:07.980
goes to a destination MAC address of FFFF.FFFF.FFFF. That is the Layer 2 broadcast address. Obviously,

38
00:04:07.980 --> 00:04:13.740
the sender has to send it out everywhere because it doesn't know what the intended destination's MAC address

39
00:04:13.740 --> 00:04:20.769
is yet. That will come into the switch. The switch will see that it is broadcast traffic, so it will flood

40
00:04:20.800 --> 00:04:27.870
it at all ports. It will hit everything plugged into that switch, including, in our example, the receiver

41
00:04:27.900 --> 00:04:42.950
on the right, which will process that ARP request. It will see that it's looking for

42
00:04:42.950 --> 00:04:44.310
172.23.4.2, and that is its own IP address, so it will respond to the ARP request. It will send an

43
00:04:44.340 --> 00:04:52.140
ARP reply back, saying, "I'm 172.23.4.2, and here's my MAC address." That comes

44
00:04:52.140 --> 00:04:59.610
from its source MAC of 2222.3333.4444, and the destination MAC address is the original sender's

45
00:04:59.610 --> 00:05:06.160
unicast MAC address of 1111.2222.3333. The receiver knows exactly where to send it

46
00:05:06.160 --> 00:05:13.950
back to because that original MAC address of 1111.2222.3333 was in the ARP request. 

47
00:05:13.990 --> 00:05:23.020
The switch will then send that ARP reply just out of Port 1, down to the original sender because that was

48
00:05:23.080 --> 00:05:30.650
unicast traffic, and it's for a known MAC address, which is already in its MAC address table.

49
00:05:30.700 --> 00:05:41.680
Okay, so that is how ARP works when both of the hosts are on the same IP subnet. ARP replies are saved

50
00:05:41.680 --> 00:05:48.190
in a host ARP cache so that it doesn't need to send an ARP request every time it wants to communicate

51
00:05:48.280 --> 00:05:52.540
with somebody else. To view the ARP cache,

52
00:05:52.540 --> 00:05:58.090
we can do that on Windows with the 'arp -a' command. On a Linux host,

53
00:05:58.090 --> 00:06:00.820
we use the 'arp -n' command.

54
00:06:00.850 --> 00:06:04.870
You can also see the commands there on slides to flush the cache

55
00:06:04.870 --> 00:06:10.180
if you need to. We wouldn't normally do that, but if we were troubleshooting it or if the ARP cache had

56
00:06:10.180 --> 00:06:13.670
somehow got corrupted, that's how we would clear it.

57
00:06:13.690 --> 00:06:17.050
So, let's have a quick look at that in the lab.

58
00:06:17.620 --> 00:06:19.900
I'm here on a Windows host,

59
00:06:19.910 --> 00:06:22.300
let's have a look at the IP address.

60
00:06:22.360 --> 00:06:27.360
It's 172.23.4.1. For this example,

61
00:06:27.370 --> 00:06:32.300
I've got a Linux host at 172.23.4.2, 

62
00:06:32.320 --> 00:06:39.430
so let's ping that to generate some traffic. In the host here, I'm going to ping

63
00:06:39.430 --> 00:06:46.420
172.23.4.2. It knows what the destination IP address is, but it doesn't know what the

64
00:06:46.420 --> 00:06:49.310
matching destination MAC address is yet.

65
00:06:49.390 --> 00:06:54.330
So, it's going to do an ARP request to find that out. That happens in the background,

66
00:06:54.340 --> 00:06:56.430
you don't see it happening here.

67
00:06:56.450 --> 00:07:04.770
If I now do an 'arp -a', I should see an entry for 172.23.4.2,

68
00:07:04.950 --> 00:07:08.610
that is the Linux host, and I can see what its MAC address is.

69
00:07:09.100 --> 00:07:19.070
If I jump onto that Linux host, and I do an 'arp -n' there, then I'll see an entry for

70
00:07:19.090 --> 00:07:24.580
172.23.4.2. Because I had some traffic between those two hosts,

71
00:07:24.600 --> 00:07:30.820
it's got an entry in its ARP cache for that host IP address and its MAC address as well.

72
00:07:31.550 --> 00:07:31.860
Okay,

73
00:07:31.900 --> 00:07:36.220
so that's how ARP works when both hosts are in the same subnet.

74
00:07:36.340 --> 00:07:42.340
In the next lecture, we'll see how ARP works when the traffic has to go through a router.

