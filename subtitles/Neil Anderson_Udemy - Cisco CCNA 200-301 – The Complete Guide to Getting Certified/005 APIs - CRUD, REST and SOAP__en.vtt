WEBVTT
1
00:00:07.390 --> 00:00:17.710
In this lecture, you'll learn about APIs with a specific focus on slow and restful APIs, API stands

2
00:00:17.710 --> 00:00:20.140
for application programming interface.

3
00:00:20.330 --> 00:00:26.470
It's a way for a computer program to communicate directly with another computer programming.

4
00:00:26.680 --> 00:00:34.180
So in networking, if you're using the command line to work on a network device that's not using an

5
00:00:34.180 --> 00:00:43.930
API because that is human to machine interaction, an API is used when its direct communication between

6
00:00:43.930 --> 00:00:51.070
software to other software APIs are typically used to perform Krod operations.

7
00:00:51.220 --> 00:00:54.840
Crowd stands for Create Read Update on delete.

8
00:00:55.030 --> 00:01:01.840
I'll talk about that more on the next slide and the two main types of APIs for web services, meaning

9
00:01:01.840 --> 00:01:06.400
they can run over the Internet and typically use HTTP or https.

10
00:01:06.640 --> 00:01:14.680
Our show and Rasht, Netco and Restaurant are other APIs which are specifically designed to work with

11
00:01:14.680 --> 00:01:15.820
network devices.

12
00:01:15.970 --> 00:01:18.930
I'll speak about those more in another lecture.

13
00:01:19.000 --> 00:01:20.350
We in this section.

14
00:01:21.100 --> 00:01:26.710
So those Krod operations stands for Create, Read, Update and Delete.

15
00:01:26.860 --> 00:01:33.100
This actually originates in the database world, which is why you can see the first example here is

16
00:01:33.100 --> 00:01:36.100
a sequel which is commonly used for databases.

17
00:01:36.310 --> 00:01:42.520
So if you are working with Sequel Database and you want to create a record, you would use an insert

18
00:01:42.520 --> 00:01:43.510
command for that.

19
00:01:43.690 --> 00:01:50.430
If you want it to read, you would use select to update, would be update and to delete would be delete.

20
00:01:51.160 --> 00:01:57.760
We can also use HTP or https for our current operations as well.

21
00:01:57.910 --> 00:02:05.050
So if HTP, if you want to push some information to the server side, if you want to create something,

22
00:02:05.260 --> 00:02:09.639
you use Pute or post as the HTP method.

23
00:02:09.820 --> 00:02:18.010
If you want to read information you use, get if you want to update a post or patch and to delete,

24
00:02:18.010 --> 00:02:20.190
you use the delete method.

25
00:02:20.710 --> 00:02:27.980
So with these, because they're doing words, you can also hear these being described as an HGP verb.

26
00:02:28.130 --> 00:02:33.070
We are going to be called an HTP verb or an method means the same thing.

27
00:02:33.340 --> 00:02:38.740
And if you're wondering, well, if I want to push some information over B, if I want to create something,

28
00:02:38.920 --> 00:02:40.620
do I use or post?

29
00:02:40.780 --> 00:02:45.070
Well, it depends on the particular application, particular system that you're working with.

30
00:02:45.220 --> 00:02:51.280
So check the documentation and it will tell you there, wherever it expects to post, it's going to

31
00:02:51.280 --> 00:02:53.130
be one or the other.

32
00:02:53.200 --> 00:03:01.390
So we can use Ekpe and https to do these different operations on the system that we are interacting

33
00:03:01.390 --> 00:03:01.660
with.

34
00:03:03.100 --> 00:03:11.220
OK, our first API that we're going to hear is Shupe stands for Simple Object Access Protocol, tostadas,

35
00:03:11.230 --> 00:03:17.920
communication protocol, the permit processes using different operating systems like Linux and Windows

36
00:03:17.920 --> 00:03:23.470
to communicate the transport is typically HGP or https.

37
00:03:23.680 --> 00:03:27.370
The data format is always XML to so with.

38
00:03:27.370 --> 00:03:29.680
So it is a protocol.

39
00:03:29.680 --> 00:03:33.210
So it specifies exactly how it should work.

40
00:03:33.220 --> 00:03:35.680
It's got strict standards to adhere to.

41
00:03:35.920 --> 00:03:43.000
One of those standards is that the data format has to be XML for transport can be anything but typically

42
00:03:43.000 --> 00:03:53.170
it's going to be a step or https which is used if the other API mean one for Web based services is Rasht.

43
00:03:53.320 --> 00:03:55.640
This is super popular.

44
00:03:55.660 --> 00:04:00.010
Now, Rasht is an architecture, not a protocol.

45
00:04:00.040 --> 00:04:05.440
Unlike so, it gives guidelines for the structure and organization of an API.

46
00:04:05.440 --> 00:04:10.390
So because it's an architecture, not a protocol, it doesn't say you have to do it exactly like this.

47
00:04:10.570 --> 00:04:15.190
It's got guidelines for how it should be done because it's not as strict.

48
00:04:15.700 --> 00:04:20.470
So it supports any transport and any data format as well.

49
00:04:20.769 --> 00:04:28.810
HTP and yes, are most commonly used for the transport and Jeshurun or possibly XML data formats are

50
00:04:28.810 --> 00:04:29.980
commonly used.

51
00:04:30.160 --> 00:04:36.060
It's typically got faster performance and it's easier to work with than soup.

52
00:04:36.220 --> 00:04:42.420
So with modern Web based APIs, you'll see that Restoril APIs are by far the most commonly used their.

53
00:04:44.560 --> 00:04:45.850
So it's an architecture.

54
00:04:45.880 --> 00:04:54.110
It doesn't say exactly how restitute work for each particular application, but it does have guidelines,

55
00:04:54.160 --> 00:05:00.830
does have constraints, very serious constraints about what qualifies as a restful API.

56
00:05:01.000 --> 00:05:04.900
First one is it should be a client server architecture.

57
00:05:05.080 --> 00:05:08.500
The client, Sandra request the server sends a response.

58
00:05:08.660 --> 00:05:16.600
So if you're using an API to interact with a network device such as a router, then the router is the

59
00:05:16.600 --> 00:05:20.700
server and the client software is the client.

60
00:05:21.010 --> 00:05:29.560
It must have a uniform standardized interface to provide simplicity and it must be the statelets, meaning

61
00:05:29.560 --> 00:05:34.150
that no client context is stored on the server between requests.

62
00:05:34.390 --> 00:05:43.270
So every time the client sends a request to the server, that is a completely independent, self-contained

63
00:05:43.450 --> 00:05:44.260
request.

64
00:05:44.440 --> 00:05:47.170
So some example implications of this.

65
00:05:47.500 --> 00:05:54.580
If the client has to authenticate to the server for security, which is very common, it's going to

66
00:05:54.580 --> 00:05:57.430
need to authenticate in every request.

67
00:05:57.610 --> 00:06:04.450
It's not like the client first authenticate and then it can communicate after not using those credentials

68
00:06:04.630 --> 00:06:07.630
because the server does not store information.

69
00:06:07.630 --> 00:06:10.120
It's stateless to each command.

70
00:06:10.120 --> 00:06:12.000
Each request has to be self-contained.

71
00:06:12.100 --> 00:06:18.010
If you are using authentication, the credentials have to be sent each time and each request.

72
00:06:18.580 --> 00:06:25.690
Next constraint is cashable responses must define themselves as either cashable or non cashable.

73
00:06:25.690 --> 00:06:28.410
So the constraint is that it supports caching.

74
00:06:28.600 --> 00:06:36.760
So, for example, if you were using a get request to get information about the interfaces on a router,

75
00:06:36.880 --> 00:06:39.790
well, that information is not likely to change.

76
00:06:39.790 --> 00:06:46.960
Very often your physical interfaces on a regular are pretty fixed, so the server could tell the client

77
00:06:46.960 --> 00:06:48.430
cached information.

78
00:06:48.610 --> 00:06:52.360
It doesn't have to keep checking that it hasn't changed frequently.

79
00:06:53.870 --> 00:07:00.500
More constraints must be a layered system, so any intermediary devices between the client and server,

80
00:07:00.500 --> 00:07:08.300
such as load balancers must be transparent to the client on server, and it needs to support optionally

81
00:07:08.300 --> 00:07:14.330
supports code on demand where servers can temporarily extend or customize the functionality of a client

82
00:07:14.510 --> 00:07:16.870
by transferring executable code.

83
00:07:17.030 --> 00:07:24.290
OK, so those are the requirements for an API to be classified as a restful API.

84
00:07:24.530 --> 00:07:30.500
But as I was saying, restful APIs are by far the most popular now.

85
00:07:30.690 --> 00:07:37.550
So if a particular vendor has got an API which doesn't actually comply with all of these constraints,

86
00:07:37.730 --> 00:07:43.910
you'll still see them often describe it as a restful API anyway, as long as it complies with most of

87
00:07:43.910 --> 00:07:44.110
them.

88
00:07:45.830 --> 00:07:53.960
OK, looking at the format of a rest request show, as I was saying, this is typically going to run

89
00:07:53.960 --> 00:07:57.260
over HTP or yes.

90
00:07:57.440 --> 00:08:02.030
So for the client to communicate with the server, it needs to be able to get to the server.

91
00:08:02.180 --> 00:08:06.200
It gets to the server based on the servers Eurorail.

92
00:08:06.320 --> 00:08:10.780
So the format of the audio is going to be either HTP or yes.

93
00:08:11.120 --> 00:08:15.830
And then there is server of a target host that it wants to communicate with.

94
00:08:16.100 --> 00:08:21.710
And then there's going to be the resource that is interacting with on the server.

95
00:08:22.050 --> 00:08:28.310
And it depends on the particular application, what the exact format this is going to be as an example,

96
00:08:28.820 --> 00:08:32.780
API running swash triple E users.

97
00:08:33.539 --> 00:08:42.049
So in this example, I'm interacting with an authentication system for triple A and then optionally

98
00:08:42.230 --> 00:08:45.890
you can have a query string with parameters on the end.

99
00:08:45.980 --> 00:08:53.030
So any example here, this would be used, for example, if I poing some information on a triple A server,

100
00:08:53.180 --> 00:08:53.810
if I'm.

101
00:08:55.290 --> 00:09:03.210
Altering the parameters of characteristics for a user of Neil, and here I'm using a primer or a dry

102
00:09:03.210 --> 00:09:07.170
run saying I'm just going to do a dry run here to actually make the changes, just check.

103
00:09:07.170 --> 00:09:09.420
That is going to work first.

104
00:09:09.660 --> 00:09:14.400
So we've got the Eurail that we are interacting with.

105
00:09:14.790 --> 00:09:22.080
Other information that has to be sent with the request includes the request method, the method so is

106
00:09:22.100 --> 00:09:29.220
a get, is a post, etc. Also typically hander's will be included as well over optional, but they'll

107
00:09:29.220 --> 00:09:30.270
often be there.

108
00:09:30.450 --> 00:09:33.840
This is key value information about the request.

109
00:09:34.110 --> 00:09:42.600
For example, headers here except application JSON means that in response you're expecting that to be

110
00:09:42.600 --> 00:09:49.320
formatted with Jayesh on other things that could be included in the header are your authentication credentials.

111
00:09:49.620 --> 00:09:59.460
And if you're pushing information to the server with a post update or a patch, then the information

112
00:09:59.620 --> 00:10:05.840
is going to be getting pushed to the server is going to be included in the body of that request.

113
00:10:07.200 --> 00:10:16.890
OK, so with our restful API, we are going to be sending requests to the server for who is krod operations.

114
00:10:17.100 --> 00:10:24.060
The server is then going to respond back with the response is also going to have a header, a body very

115
00:10:24.060 --> 00:10:25.200
similar to the request.

116
00:10:25.320 --> 00:10:28.210
It's also going to have a response code there anything.

117
00:10:28.220 --> 00:10:30.300
And this is going to be a three digit code.

118
00:10:30.450 --> 00:10:33.900
Anything beginning with a one is an informational response.

119
00:10:34.200 --> 00:10:38.640
Anything beginning with a two indicates that the request was successful.

120
00:10:38.760 --> 00:10:41.850
So, for example, it could be a two hundred or K message.

121
00:10:42.060 --> 00:10:47.850
If we were pushing some content on the server side, it could respond back with two or one.

122
00:10:47.940 --> 00:10:48.260
Seeing it.

123
00:10:48.280 --> 00:10:50.360
Yes, has been created successfully.

124
00:10:50.610 --> 00:10:55.200
If we deleted something, then we would get a response code back.

125
00:10:55.200 --> 00:11:00.510
Typically if two or four, meaning no content, meaning that yes, it has been successfully deleted.

126
00:11:00.750 --> 00:11:05.600
The next response could anything beginning with a three is redirection.

127
00:11:05.610 --> 00:11:11.250
So for example, if you're browsing something on the Internet, you'll see that you sometimes get redirected

128
00:11:11.250 --> 00:11:17.970
to a different page that is being done with three or one redirection response code.

129
00:11:18.770 --> 00:11:20.360
So those are good response codes.

130
00:11:20.370 --> 00:11:22.320
We can also have bad ones as well.

131
00:11:22.500 --> 00:11:28.410
So anything beginning with a four means or as a client add or if you got a four hundred response spot,

132
00:11:28.410 --> 00:11:31.770
that means it was a bad request or malformed syntax.

133
00:11:31.770 --> 00:11:35.340
In your request, a four to one is unauthorized.

134
00:11:35.340 --> 00:11:41.710
You didn't send the valid credentials for all three would be forbidden.

135
00:11:41.730 --> 00:11:42.540
Again, this is right.

136
00:11:42.550 --> 00:11:44.670
We haven't sent the correct credentials.

137
00:11:44.670 --> 00:11:45.720
A photo for message.

138
00:11:45.720 --> 00:11:50.550
You've probably seen this before when you've been browsing Internet means a page is not being found.

139
00:11:50.760 --> 00:11:58.500
You've probably put in a typo in the you are out there 500 response messages means it's a server error.

140
00:11:58.710 --> 00:12:02.600
Calling when you would see here would be a 500 internal server error.

141
00:12:02.610 --> 00:12:05.970
So we've got the codes coming back with responses.

142
00:12:06.210 --> 00:12:12.870
Responses to get requests will typically include the in the body with the information you requested

143
00:12:13.080 --> 00:12:16.770
and headers can also be included in response as well.

144
00:12:17.020 --> 00:12:21.360
OK, so that was so and restful APIs.

145
00:12:21.600 --> 00:12:31.530
In the next lecture, I'll cover the network specific APIs of Netcom Restaurant on G.P.S. and then I'll

146
00:12:31.530 --> 00:12:36.540
give you a lab demo showing a restful API in action.

147
00:12:36.540 --> 00:12:42.090
How we can make those requests using the postman application.

