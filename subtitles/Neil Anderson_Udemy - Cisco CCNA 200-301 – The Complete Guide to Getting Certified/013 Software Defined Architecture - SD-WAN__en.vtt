WEBVTT
1
00:00:07.310 --> 00:00:15.400
In this lecture, you'll learn about SD one, which is part of Cisco's DNA digital network architecture,

2
00:00:15.620 --> 00:00:20.690
looking at the traditional way to do our WAN deployments first.

3
00:00:20.690 --> 00:00:27.650
So traditionally it should always one edge is going to be configured individually, one at a time,

4
00:00:27.860 --> 00:00:32.870
and we leads to the configuration not being standardized organization wide.

5
00:00:33.260 --> 00:00:39.530
The focus is on the basic connectivity, not required performance for applications.

6
00:00:39.770 --> 00:00:47.300
And because we're using particular hardware and configuration tied to a particular service provider

7
00:00:47.300 --> 00:00:53.420
in each location is typically difficult if we want to migrate to another one service.

8
00:00:53.710 --> 00:01:03.200
The next is to look at how SD wan improves upon not just Google acquired the other company Pela in 2017

9
00:01:03.440 --> 00:01:11.840
to enhance Cisco's existing SD wan solution, which was previously called I1 for Intelligent One Eshley

10
00:01:11.870 --> 00:01:18.920
one provides automated its share of wine connectivity between sites and the monitoring on failover is

11
00:01:18.920 --> 00:01:20.230
Alemi as well.

12
00:01:20.450 --> 00:01:27.860
So because SD one is part of Cisco's digital network architecture, the whole part of that is to give

13
00:01:27.860 --> 00:01:34.340
centralized control of our operations and for everything to be automated rather than the old way of

14
00:01:34.340 --> 00:01:36.860
configuring our devices one by one.

15
00:01:37.100 --> 00:01:45.350
And with SD Wan as well as set up the monitoring on feel all being automated, the traffic flow control

16
00:01:45.350 --> 00:01:46.940
is application aware.

17
00:01:47.120 --> 00:01:54.380
So if on a particular site, if it is got multiple wine connections, see one going over the Internet,

18
00:01:54.380 --> 00:01:56.510
another one going over emplace.

19
00:01:56.720 --> 00:02:03.830
Well, based on your different applications needs, SD Wan can automatically send particular application

20
00:02:03.830 --> 00:02:07.130
traffic over the most suitable wine connection.

21
00:02:08.759 --> 00:02:14.790
The benefits that we get with Iran, we get that mean it's standardized set up of connectivity between

22
00:02:14.790 --> 00:02:18.030
all our wine sites, it's transport independent.

23
00:02:18.210 --> 00:02:24.720
So it doesn't matter what kind of wine links you've got in each different site, which provides Internet

24
00:02:24.900 --> 00:02:30.050
or going over ampules or whatever, any kind of connection the wine will work with.

25
00:02:30.540 --> 00:02:37.500
It gives simplified and centralized integrated operations, which gives you more flexibility because

26
00:02:37.500 --> 00:02:38.970
it's transport independent.

27
00:02:38.970 --> 00:02:41.670
It's easy to migrate your wine services.

28
00:02:41.820 --> 00:02:47.940
You get the required predictable performance for your important applications because it is application

29
00:02:47.940 --> 00:02:56.120
of where it integrates with the latest cloud on network technologies to routers that SD wan can control.

30
00:02:56.130 --> 00:02:58.560
You can have those on premises in your branch.

31
00:02:58.740 --> 00:03:02.860
You can also have cloud based routers controlled by Iran as well.

32
00:03:03.060 --> 00:03:10.740
So if you're using a popular public cloud provider like AWG or Microsoft as you are, you can have virtual

33
00:03:10.740 --> 00:03:14.080
routers in the cloud being controlled by Iran.

34
00:03:14.610 --> 00:03:20.160
And because you've got all this flexibility and it makes your operations easier, that gives you a lower

35
00:03:20.160 --> 00:03:21.150
cost solution.

36
00:03:22.210 --> 00:03:25.510
So let's look at how the solution actually works now.

37
00:03:25.670 --> 00:03:34.780
The first four main components down at the bottom in the data point, we've got our edge rotors that

38
00:03:34.780 --> 00:03:42.640
can be Vejvoda originally from the tower, or it can be various different models of Shishko as well,

39
00:03:42.640 --> 00:03:45.400
and which can be physical or virtual rotors.

40
00:03:46.270 --> 00:03:50.980
Then we need to have our different components which are controlling the solution.

41
00:03:51.490 --> 00:03:54.730
And these all run a separate virtual machines.

42
00:03:54.970 --> 00:04:01.000
So Phurba control plane, we have got the Vermaak controller then for management.

43
00:04:01.000 --> 00:04:09.850
We have got the Vonage Annemasse system and for orchestration we have got the V Bond orchestrator and

44
00:04:09.850 --> 00:04:11.570
this solution can scale.

45
00:04:11.590 --> 00:04:18.760
So if you've got a larger environment, you can just add more hours into deploying more v smart controllers

46
00:04:18.760 --> 00:04:24.190
in the control plane, more V manage animes systems and more Vyborg orchestras.

47
00:04:25.730 --> 00:04:32.630
So let's look at each of those in a bit more detail to your viewers, Ron, the plane, they are in

48
00:04:32.630 --> 00:04:35.140
charge of forwarding the actual pockets.

49
00:04:35.360 --> 00:04:41.690
They can be physical or virtual routers, and they form an IP check encrypted data plane between each

50
00:04:41.690 --> 00:04:42.050
other.

51
00:04:42.210 --> 00:04:50.420
So each time a new one site comes online, it will form VPN tunnels to your other one site and a site

52
00:04:50.420 --> 00:04:53.510
can have two veg rotors for redundancy.

53
00:04:54.890 --> 00:05:00.890
Next up, we've got the control plan, we've got our v smart controllers there they are the centralized

54
00:05:00.890 --> 00:05:02.600
brain of the solution.

55
00:05:02.720 --> 00:05:09.440
They run as virtual machines and they distribute policy and forwarding information to the voters.

56
00:05:09.650 --> 00:05:12.760
And that information is sent inside tunnels.

57
00:05:12.920 --> 00:05:14.630
This is where you're running the control plane.

58
00:05:14.820 --> 00:05:18.820
So this is where it's going to build all the routes between the different writers.

59
00:05:18.830 --> 00:05:25.370
And it tells the how to do that and how far we're traffic between each other, each village, or connects

60
00:05:25.370 --> 00:05:28.130
to TUV smart controllers for redundancy for them.

61
00:05:29.400 --> 00:05:36.730
The management plan is Vonage and SMS enabled centralized configuration on simplified changes.

62
00:05:36.960 --> 00:05:45.350
It also has real time alerting again, it runs as a virtual machine and these can be clustered for redundancy.

63
00:05:45.360 --> 00:05:51.900
So when you're interacting with Estulin, you're going to log into the guey on Vonage.

64
00:05:51.910 --> 00:05:53.760
That's where you can figure out everything from.

65
00:05:55.010 --> 00:06:02.030
Finally, we have the Vyborg and orchestrator that authenticates all these smart controllers, Vonage

66
00:06:02.030 --> 00:06:09.980
Annemasse and viewers that joining the Ask One network enables voters to discover each other, Vonage

67
00:06:09.980 --> 00:06:11.240
and the Smart.

68
00:06:11.450 --> 00:06:15.130
It has a public IP address and is deployed in the DMZ.

69
00:06:15.380 --> 00:06:20.440
So you might be wondering, because I know I was when I first saw this and I saw the architecture,

70
00:06:20.600 --> 00:06:25.940
I thought, OK, I understand why we have Vonage, which is where we managed everything that gives us

71
00:06:25.940 --> 00:06:26.830
our admin guey.

72
00:06:27.110 --> 00:06:30.080
And I understand we've got the controller there as well.

73
00:06:30.200 --> 00:06:32.420
Why do we also need an orchestrator?

74
00:06:32.690 --> 00:06:37.670
Why can't the control plane or the management plane do that for us already?

75
00:06:37.850 --> 00:06:42.980
Well, the reason is that they will typically be deployed in your data center.

76
00:06:43.280 --> 00:06:49.640
So when a village or first comes online, it needs a way to connect into the solution to Deanwood,

77
00:06:49.640 --> 00:06:50.510
its configuration.

78
00:06:50.510 --> 00:06:53.090
It needs to discover all of the other devices.

79
00:06:53.390 --> 00:06:58.010
And with your other devices being in a data center, that's not going to work because it's not going

80
00:06:58.010 --> 00:07:00.050
to allow incoming connections coming in there.

81
00:07:00.440 --> 00:07:02.200
So this is why we have the orchestra.

82
00:07:02.210 --> 00:07:05.930
It pulls everything together and it provides connectivity between everything.

83
00:07:06.050 --> 00:07:08.800
It's in the DMZ with a public IP address.

84
00:07:09.050 --> 00:07:15.440
So when a village or first comes online, it's able to connect to the deboned orchestrator.

85
00:07:15.590 --> 00:07:19.610
It finds all the other components from their viewpoint.

86
00:07:19.610 --> 00:07:27.070
Orchester also runs as a virtual machine, can also be run on a and smaller deployments on multiple

87
00:07:27.080 --> 00:07:32.150
deboned orchestrators can be deployed with Round-Robin DNS for redundancy.

88
00:07:34.290 --> 00:07:37.660
Zeti is our zero touch provisioning service.

89
00:07:37.950 --> 00:07:45.840
This is a cloud based church service hosted by Cisco and it's utilized on 1st of the village are only

90
00:07:46.020 --> 00:07:50.430
misdirects vegetative, born to hawkishly joining to the network.

91
00:07:50.760 --> 00:07:56.820
So when you got your first ticket, the box, if it's a physical error and have it plugged, then it's

92
00:07:56.820 --> 00:07:57.900
going to come online.

93
00:07:58.050 --> 00:08:04.770
It's going to connect to the cloud based service at Cisco, which is going to tell it how to get to

94
00:08:04.770 --> 00:08:06.600
its vaunt and orchestrator.

95
00:08:06.750 --> 00:08:13.170
The bond markets, they are venters how to get to the other components, then downloads its configuration,

96
00:08:13.170 --> 00:08:16.650
sets up the tunnels and you're good to go bond.

97
00:08:16.650 --> 00:08:23.670
Vishwa and Vonage can be deployed on premises or they can be hosted in the cloud, either with Cisco

98
00:08:23.670 --> 00:08:25.740
or with one of Cisco's partners.

99
00:08:26.010 --> 00:08:30.240
Most deployments are in the cloud because it's an easier solution for the customer.

100
00:08:31.470 --> 00:08:38.559
Let's look at building the airplane next to the Vishwa controller directs village Earth to build a fuel

101
00:08:38.559 --> 00:08:43.299
marsh by default of Ipecac VPE tunnels between each other.

102
00:08:43.419 --> 00:08:45.580
So by default, it will have a full Masche.

103
00:08:45.730 --> 00:08:51.640
If you want to, you can configure this to be a hub and spoke or any other topology that you want.

104
00:08:52.060 --> 00:08:57.570
The smart then propagates policy and routing information to the voters and that is done through the

105
00:08:57.580 --> 00:09:00.150
Wempe Overlay Management protocol.

106
00:09:00.430 --> 00:09:03.840
She can see in my diagram here I've got my V smart controller.

107
00:09:04.030 --> 00:09:08.890
Now, you would actually have two of these for redundancy, but I just put one in just to make the diagram

108
00:09:08.890 --> 00:09:09.910
easier to look at.

109
00:09:10.150 --> 00:09:15.760
And you can see we've got our vegetables here which are in our different wine sites and in my example,

110
00:09:15.760 --> 00:09:22.360
very each connected with an Internet wine connection and also emplace wine as well.

111
00:09:22.540 --> 00:09:25.680
So what happens is the drivers come online.

112
00:09:26.380 --> 00:09:33.820
They're then told by these ATP service about how to reach the vaunt orchestrator, which tells them

113
00:09:33.820 --> 00:09:36.070
how to reach the smart controller.

114
00:09:36.400 --> 00:09:42.880
Then they will build VPN tunnels to each other with the information from the smart controller.

115
00:09:43.030 --> 00:09:49.780
The smart controller will also tell them what and host IP addresses are available in each site as well.

116
00:09:49.900 --> 00:09:53.080
So that builds the routing tables on the rotors.

117
00:09:55.450 --> 00:10:02.650
Next thing, we have bidirectional foreboding detection pockets sent over each of those VPN tunnels

118
00:10:02.980 --> 00:10:08.740
that is used to detect if a tunnel goes down, speechwriter's got a tunnel going to every other year

119
00:10:08.950 --> 00:10:12.340
by default and over all the different wine links as well.

120
00:10:12.610 --> 00:10:16.780
BFD, pockets of sent over all those links regularly to check.

121
00:10:16.780 --> 00:10:19.060
And we get packets going in both directions.

122
00:10:19.180 --> 00:10:26.100
But we can detect if a link goes down, it will be taken out of service until it comes back up again.

123
00:10:26.500 --> 00:10:33.520
The BFD packets also provide latency, jitter and loss statistics as well, which we can use to direct

124
00:10:33.520 --> 00:10:37.500
pockets for different applications over the most suitable connection.

125
00:10:39.070 --> 00:10:45.520
If multiple tunnels are available, for example, we've got apps and Internet as well, and traffic

126
00:10:45.520 --> 00:10:51.610
can be more advanced over those different tunnels for your load balancing algorithms, you can use active,

127
00:10:51.610 --> 00:10:56.360
active where you send equally overboard or you can do we active, active.

128
00:10:56.390 --> 00:11:02.650
So if, for example, you want to send more traffic over your ampules connection because it's higher

129
00:11:02.650 --> 00:11:06.030
quality than Internet, then you can do that with an active active.

130
00:11:06.280 --> 00:11:13.540
You can also do application pinning active standby so you could send maybe email and web traffic over

131
00:11:13.540 --> 00:11:17.170
one connection voice and video traffic over a different connection.

132
00:11:17.680 --> 00:11:21.860
Also, sports application aware we're doing what we can see how that works.

133
00:11:22.690 --> 00:11:28.990
So, as I said earlier, the FDA monitors the latency, jitter and loss across four different VPN tunnels.

134
00:11:29.230 --> 00:11:35.650
You can set minimum requirements for an application with an SLA service level agreement class.

135
00:11:36.040 --> 00:11:41.550
Actually, one ensures the application is sent over a link which meets his actually requirements.

136
00:11:41.670 --> 00:11:48.730
So if, for example, you are sending voice and video traffic over your WAN links, you can share required

137
00:11:48.740 --> 00:11:52.830
latency and launch to make sure that your calls are good enough quality.

138
00:11:53.170 --> 00:12:00.620
Actually, one is monitoring the QOL statistics over your links in real time and it will make sure that

139
00:12:00.640 --> 00:12:03.430
voice and video is over the most suitable link.

140
00:12:03.700 --> 00:12:08.660
By default, traffic will fall back to another link if no suitable link is available.

141
00:12:08.690 --> 00:12:16.360
So if you've got the two links that are available and neither of them match the the required statistics,

142
00:12:16.360 --> 00:12:17.210
it doesn't mean the topic.

143
00:12:17.210 --> 00:12:18.160
It's going to get dropped.

144
00:12:18.190 --> 00:12:20.910
It will still go over the best time.

145
00:12:21.260 --> 00:12:25.060
OK, that was everything I need to tell you about SD one.

146
00:12:25.270 --> 00:12:26.530
She in the next Licia.

