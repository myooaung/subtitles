WEBVTT
1

00:00:00.000  -->  00:00:06.990
Hello and welcome back to the course of

2

00:00:06.990  -->  00:00:08.460
R programming. Now that we know

3

00:00:08.460  -->  00:00:11.219
everything about subsetting, let's try

4

00:00:11.219  -->  00:00:14.130
using subsetting to change what we're

5

00:00:14.130  -->  00:00:16.800
visualizing. So what we're going to do is

6

00:00:16.800  -->  00:00:18.510
we're going to copy some of the code

7

00:00:18.510  -->  00:00:22.380
that we used in the previous matplot

8

00:00:22.380  -->  00:00:25.859
tutorial. So let's take for instance this

9

00:00:25.859  -->  00:00:28.769
bit because that's our visualization part

10

00:00:28.769  -->  00:00:31.289
and we'll create a new file and here we'll

11

00:00:31.289  -->  00:00:32.550
copy it over here.

12

00:00:32.550  -->  00:00:34.890
So what we're visualizing here is field

13

00:00:34.890  -->  00:00:37.739
goals divided by game. So let's simplify that and

14

00:00:37.739  -->  00:00:40.860
let's just visualize, let's say minutes

15

00:00:40.860  -->  00:00:45.329
played, minutes played right and now if

16

00:00:45.329  -->  00:00:47.280
we run that we will see our

17

00:00:47.280  -->  00:00:49.170
visualization here so that's how many

18

00:00:49.170  -->  00:00:52.440
minutes the top ten paid players have

19

00:00:52.440  -->  00:00:55.920
played over the past 10 years. Now let's

20

00:00:55.920  -->  00:00:57.960
say we want to subset it. Let's say we

21

00:00:57.960  -->  00:00:59.699
don't want to see it all the players

22

00:00:59.699  -->  00:01:01.800
want to see just the top 10 players, how

23

00:01:01.800  -->  00:01:03.780
would we do that? Well this is our

24

00:01:03.780  -->  00:01:05.760
data and we would just replace it

25

00:01:05.760  -->  00:01:09.299
right? Here is our matrix, so let's just

26

00:01:09.299  -->  00:01:12.900
pull it out. Let's say, let's replace this with

27

00:01:12.900  -->  00:01:16.770
data and here we'll have a variable

28

00:01:16.770  -->  00:01:18.659
for data that way we can manipulate

29

00:01:18.659  -->  00:01:19.920
it easier.

30

00:01:19.920  -->  00:01:22.710
We'll call it data and we will say

31

00:01:22.710  -->  00:01:26.340
minutes played and here we will say we

32

00:01:26.340  -->  00:01:29.670
just want the first to third and all of

33

00:01:29.670  -->  00:01:31.380
the columns right? So if I look at this,

34

00:01:31.380  -->  00:01:33.479
if I run this line now and then if I

35

00:01:33.479  -->  00:01:35.549
just look at data by itself that's what

36

00:01:35.549  -->  00:01:36.930
we're visualizing so that's the new

37

00:01:36.930  -->  00:01:38.820
matrix that we are passing through these

38

00:01:38.820  -->  00:01:40.409
two lines and what's going on there is

39

00:01:40.409  -->  00:01:43.110
it's been transposed so it's been turned

40

00:01:43.110  -->  00:01:45.750
into that matrix and then it's being

41

00:01:45.750  -->  00:01:47.880
visualized by this line that's the

42

00:01:47.880  -->  00:01:50.159
matrix and now we're going to put the

43

00:01:50.159  -->  00:01:51.899
legend but once again with the legend we

44

00:01:51.899  -->  00:01:55.140
also want just this first three players

45

00:01:55.140  -->  00:01:56.909
right? We don't want all of them so here

46

00:01:56.909  -->  00:02:00.750
we need to say players 1, 2, 3 because

47

00:02:00.750  -->  00:02:03.390
that's a vector and we just want to

48

00:02:03.390  -->  00:02:04.799
check the first three players so if we

49

00:02:04.799  -->  00:02:07.229
run this line now then we've got a

50

00:02:07.229  -->  00:02:09.539
legend here which is good right? So

51

00:02:09.539  -->  00:02:12.000
that's how many minutes each of the

52

00:02:12.000  -->  00:02:13.380
players has played

53

00:02:13.380  -->  00:02:15.630
and once here Kobe Bryant was injured and

54

00:02:15.630  -->  00:02:17.760
here he was injured again and probably

55

00:02:17.760  -->  00:02:20.430
that's also in injury usually on these

56

00:02:20.430  -->  00:02:22.860
charts when you're not normalizing

57

00:02:22.860  -->  00:02:24.540
binder the number of games they played

58

00:02:24.540  -->  00:02:26.730
if you see like a drop like that usually

59

00:02:26.730  -->  00:02:29.550
that represents some kind of injury.

60

00:02:29.550  -->  00:02:34.020
Ok so that's the minutes played for the

61

00:02:34.020  -->  00:02:35.790
first three players and that's an example

62

00:02:35.790  -->  00:02:37.800
of how we are using subsetting already

63

00:02:37.800  -->  00:02:39.240
in our analysis.

64

00:02:39.240  -->  00:02:41.220
Ok let's say we don't want the first, the

65

00:02:41.220  -->  00:02:43.110
third players but let's say we just want

66

00:02:43.110  -->  00:02:45.450
to visualize Kobe Bryant by himself

67

00:02:45.450  -->  00:02:47.640
just Kobe Bryant. So we would say one here

68

00:02:47.640  -->  00:02:51.240
and we would also say one over here right?

69

00:02:51.240  -->  00:02:52.800
So let's see how that works out. So

70

00:02:52.800  -->  00:02:55.170
that's our data, now we're going to

71

00:02:55.170  -->  00:02:59.400
run that plot and all the sudden there's

72

00:02:59.400  -->  00:03:01.770
a problem. What's the problem? Where's the

73

00:03:01.770  -->  00:03:04.380
problem coming from? Let's have a look at the

74

00:03:04.380  -->  00:03:07.350
data object, if you look here you can see

75

00:03:07.350  -->  00:03:09.780
that it's no longer a matrix. It's

76

00:03:09.780  -->  00:03:11.910
actually a named vector and why did that

77

00:03:11.910  -->  00:03:13.080
happen? Well that's because of how

78

00:03:13.080  -->  00:03:14.820
subsetting works, something we talked

79

00:03:14.820  -->  00:03:15.690
about last time.

80

00:03:15.690  -->  00:03:18.240
What R is doing here is it's guessing

81

00:03:18.240  -->  00:03:20.010
what you want. It's saying that because

82

00:03:20.010  -->  00:03:23.100
you're extracting just a one-dimensional

83

00:03:23.100  -->  00:03:24.960
object for matrix probably you want a vector

84

00:03:24.960  -->  00:03:27.150
but we don't, we want a matrix because

85

00:03:27.150  -->  00:03:29.490
matplot requires a matrix, so what

86

00:03:29.490  -->  00:03:30.660
we're going to do here is we're going to

87

00:03:30.660  -->  00:03:33.150
use a little sneaky trick, we'll say drop

88

00:03:33.150  -->  00:03:37.140
equals false and if we run this now and

89

00:03:37.140  -->  00:03:39.570
we run that plot and legend you can see

90

00:03:39.570  -->  00:03:42.660
that Kobe Bryant is his minutes played

91

00:03:42.660  -->  00:03:44.760
are being represented properly. So there

92

00:03:44.760  -->  00:03:48.060
you go that's a live example of why it's

93

00:03:48.060  -->  00:03:50.250
important to know about subsetting and

94

00:03:50.250  -->  00:03:52.050
it's also important to know how these

95

00:03:52.050  -->  00:03:54.360
square brackets work what they return

96

00:03:54.360  -->  00:03:56.970
and what exactly you want is specific

97

00:03:56.970  -->  00:03:59.400
situation. In this situation we wanted

98

00:03:59.400  -->  00:04:01.560
the matrix so we use the drop equals F

99

00:04:01.560  -->  00:04:04.470
tool and that brings us to the end of

100

00:04:04.470  -->  00:04:06.000
today's tutorial. I look forward to seeing

101

00:04:06.000  -->  00:04:18.610
you next time and until then, happy coding!
