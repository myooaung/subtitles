1

00:00:00,000  -->  00:00:07,379
Hello and welcome back to your course on

2

00:00:07,379  -->  00:00:08,400
R program.

3

00:00:08,400  -->  00:00:10,349
How did you go to previous tutorial? I

4

00:00:10,349  -->  00:00:13,049
hope you found it quite simple to create

5

00:00:13,049  -->  00:00:15,150
variables in R and if so

6

00:00:15,150  -->  00:00:18,270
congratulations because this is the goal

7

00:00:18,270  -->  00:00:21,270
of this course to smoothen out that very

8

00:00:21,270  -->  00:00:23,910
very steep learning curve that R

9

00:00:23,910  -->  00:00:26,189
normally has and that students are

10

00:00:26,189  -->  00:00:28,140
normally presented with when they're

11

00:00:28,140  -->  00:00:31,349
starting their journey into R.

12

00:00:31,349  -->  00:00:33,270
Alright, now that we're comfortable with

13

00:00:33,270  -->  00:00:35,460
creating variables. Today we will learn

14

00:00:35,460  -->  00:00:38,760
how to use them in different operations

15

00:00:38,760  -->  00:00:41,219
varying from arithmetic operations to

16

00:00:41,219  -->  00:00:43,260
even calling functions but don't be

17

00:00:43,260  -->  00:00:44,940
afraid once again everything is

18

00:00:44,940  -->  00:00:47,399
step-by-step so we will learn just the

19

00:00:47,399  -->  00:00:50,520
right amount that we can handle in one

20

00:00:50,520  -->  00:00:51,329
tutorial.

21

00:00:51,329  -->  00:00:53,430
Alright first things first, we need to

22

00:00:53,430  -->  00:00:56,730
save this file because it's always a

23

00:00:56,730  -->  00:00:59,280
good skill to have to know how to save

24

00:00:59,280  -->  00:01:01,680
the work you have done. So how do we save

25

00:01:01,680  -->  00:01:03,870
this file that we've created here

26

00:01:03,870  -->  00:01:06,030
with R code? Well it's pretty simple, if you're

27

00:01:06,030  -->  00:01:08,100
on a Mac and then press command s, if

28

00:01:08,100  -->  00:01:11,130
you're on a windows pc then press control s

29

00:01:11,130  -->  00:01:13,979
or otherwise just click this save button

30

00:01:13,979  -->  00:01:16,290
up at the top of here. So I'm going to

31

00:01:16,290  -->  00:01:19,080
press command s and here you just have

32

00:01:19,080  -->  00:01:22,740
to specify the name of your file. So we'll call it

33

00:01:22,740  -->  00:01:27,000
tutorial 01 and click save. There we go,

34

00:01:27,000  -->  00:01:29,909
that is our file saved and now we're

35

00:01:29,909  -->  00:01:31,500
just going to create a new one by

36

00:01:31,500  -->  00:01:33,479
clicking the R strip button over here

37

00:01:33,479  -->  00:01:37,110
like we did last time and now we see a

38

00:01:37,110  -->  00:01:39,930
blank worksheet over here, what we see here

39

00:01:39,930  -->  00:01:42,390
is in the global environment we still

40

00:01:42,390  -->  00:01:44,340
have all variables that we created last

41

00:01:44,340  -->  00:01:46,320
time. Let's clean them up, now there's a

42

00:01:46,320  -->  00:01:48,119
lot of ways to do it but we'll stick to

43

00:01:48,119  -->  00:01:50,340
the basic one, we'll just click this broom

44

00:01:50,340  -->  00:01:52,649
over here and say yes and that will

45

00:01:52,649  -->  00:01:55,170
delete everything and lastly we just got

46

00:01:55,170  -->  00:01:57,630
some code in the console and that's fine

47

00:01:57,630  -->  00:01:59,880
let's leave it there. It will disappear as we

48

00:01:59,880  -->  00:02:02,460
create more code it will scroll up and

49

00:02:02,460  -->  00:02:04,860
out of our visibility.

50

00:02:04,860  -->  00:02:07,110
Alright so let's start off by creating a

51

00:02:07,110  -->  00:02:08,520
variable, we're going to create a

52

00:02:08,520  -->  00:02:11,129
variable called A and we'll put the

53

00:02:11,129  -->  00:02:12,319
value 10 into

54

00:02:12,319  -->  00:02:14,269
this variable. So let's type that code

55

00:02:14,269  -->  00:02:16,849
and run it, by the way I hope you're

56

00:02:16,849  -->  00:02:18,709
following along because it's very

57

00:02:18,709  -->  00:02:21,349
important to follow along and do the

58

00:02:21,349  -->  00:02:23,719
exact same steps on your computer

59

00:02:23,719  -->  00:02:25,730
because that way you will learn R much

60

00:02:25,730  -->  00:02:27,499
faster than if you're just watching it.

61

00:02:27,499  -->  00:02:30,709
So follow along and let's create a new

62

00:02:30,709  -->  00:02:32,540
variable, this time we'll create a

63

00:02:32,540  -->  00:02:35,090
variable called B and we'll put in the

64

00:02:35,090  -->  00:02:38,840
value 5. Execute and as we can see we

65

00:02:38,840  -->  00:02:40,040
we're reduced to this

66

00:02:40,040  -->  00:02:41,900
the code has been copied into the

67

00:02:41,900  -->  00:02:44,329
console and it has been executed over

68

00:02:44,329  -->  00:02:46,669
here so we've got the variable. Alright,

69

00:02:46,669  -->  00:02:48,590
so let's say we want to add these two

70

00:02:48,590  -->  00:02:50,269
variables and put the result into a

71

00:02:50,269  -->  00:02:53,030
third variable which is C. Let's go ahead

72

00:02:53,030  -->  00:02:53,719
and do that,

73

00:02:53,719  -->  00:02:56,209
so here we go there is the variable C

74

00:02:56,209  -->  00:02:58,760
and we will assign it the value of a

75

00:02:58,760  -->  00:03:03,409
plus B, very intuitive so hit return or

76

00:03:03,409  -->  00:03:05,780
run and as you can see the code has been

77

00:03:05,780  -->  00:03:08,150
copied into the console and we've got the

78

00:03:08,150  -->  00:03:11,180
results over here. Now first off, what I

79

00:03:11,180  -->  00:03:13,699
wanted to point out is that spaces in

80

00:03:13,699  -->  00:03:17,000
R don't matter, as in many many or most

81

00:03:17,000  -->  00:03:19,729
programming languages. So basically I can

82

00:03:19,729  -->  00:03:22,009
remove these two spaces, we run the code

83

00:03:22,009  -->  00:03:24,379
and it will run just fine.

84

00:03:24,379  -->  00:03:25,849
The variable has been overwritten, it's

85

00:03:25,849  -->  00:03:28,970
still 15. That is because the spaces, R

86

00:03:28,970  -->  00:03:30,979
studio ignores spaces and they're

87

00:03:30,979  -->  00:03:34,459
basically therefore your aesthetics. Now

88

00:03:34,459  -->  00:03:37,250
the second thing was how do we print out

89

00:03:37,250  -->  00:03:39,590
this variable? We know that the value of

90

00:03:39,590  -->  00:03:42,859
C is 15 because we see it here but let's

91

00:03:42,859  -->  00:03:45,379
say we don't have access to what's going

92

00:03:45,379  -->  00:03:47,750
on in here then all we're left with is

93

00:03:47,750  -->  00:03:49,909
the console and we can't see the value

94

00:03:49,909  -->  00:03:51,530
of C in here, we just see that this

95

00:03:51,530  -->  00:03:53,540
operation has gone through, how do we see

96

00:03:53,540  -->  00:03:55,790
the value of C? So in other programming

97

00:03:55,790  -->  00:03:57,620
languages you might have to the function

98

00:03:57,620  -->  00:04:00,650
like print or print print F or alert or

99

00:04:00,650  -->  00:04:03,560
other source of our functions in R

100

00:04:03,560  -->  00:04:05,419
it's very simple, all you have to do is just

101

00:04:05,419  -->  00:04:09,620
a print of the object name. So in this

102

00:04:09,620  -->  00:04:11,989
case we'll just type in C and execute

103

00:04:11,989  -->  00:04:14,539
this line and there we go we've got the

104

00:04:14,539  -->  00:04:17,690
value 15, it has been printed out over

105

00:04:17,690  -->  00:04:22,190
here. So that is how easy it is to get

106

00:04:22,190  -->  00:04:25,200
objects to display on

107

00:04:25,200  -->  00:04:28,140
your screen in R just basically print

108

00:04:28,140  -->  00:04:30,150
the name of objects and execute that

109

00:04:30,150  -->  00:04:32,670
line. Alright, let's move on

110

00:04:32,670  -->  00:04:35,430
let's create another variable. So this

111

00:04:35,430  -->  00:04:37,290
time we'll get a bit of a longer name,

112

00:04:37,290  -->  00:04:40,170
we'll call it variable, variable one so far one

113

00:04:40,170  -->  00:04:43,200
and we will assign it the value of 2.5

114

00:04:43,200  -->  00:04:45,660
and before we execute that code let's

115

00:04:45,660  -->  00:04:47,820
create a second variable right away. We'll

116

00:04:47,820  -->  00:04:50,070
or let's prepare the code for a second

117

00:04:50,070  -->  00:04:52,830
variable variable 2 and we'll assign it

118

00:04:52,830  -->  00:04:55,800
the value of four. Now the other trick I

119

00:04:55,800  -->  00:04:58,140
wanted to show you here was that in R,

120

00:04:58,140  -->  00:05:00,570
you don't have to necessarily execute

121

00:05:00,570  -->  00:05:02,820
all the code line by line like we've

122

00:05:02,820  -->  00:05:04,050
been doing up to now.

123

00:05:04,050  -->  00:05:05,850
So as you can see the carriage return is

124

00:05:05,850  -->  00:05:09,540
here so if I just hit run right now then

125

00:05:09,540  -->  00:05:12,090
all that will be executed is just this

126

00:05:12,090  -->  00:05:14,580
line of code, but in R you can actually

127

00:05:14,580  -->  00:05:16,290
highlight the elements of code that you

128

00:05:16,290  -->  00:05:18,600
want to execute. So in this case, let's

129

00:05:18,600  -->  00:05:20,340
say I want to execute these two lines at

130

00:05:20,340  -->  00:05:22,560
the same time or not on at the same

131

00:05:22,560  -->  00:05:24,630
time they will of course be executed one

132

00:05:24,630  -->  00:05:26,910
after the other but I want to execute

133

00:05:26,910  -->  00:05:29,820
them together. So in this case I

134

00:05:29,820  -->  00:05:32,670
highlight them and hit run and as you

135

00:05:32,670  -->  00:05:34,710
can see both lines have been copied into

136

00:05:34,710  -->  00:05:37,080
the console and both lines have been

137

00:05:37,080  -->  00:05:39,270
executed we've got two new variables

138

00:05:39,270  -->  00:05:42,120
variable 1 and variable 2, so that's

139

00:05:42,120  -->  00:05:45,870
how in R, you can execute bits of your

140

00:05:45,870  -->  00:05:48,840
code and now actually it makes much more

141

00:05:48,840  -->  00:05:51,270
sense of why we have comments so if I

142

00:05:51,270  -->  00:05:53,550
wanted to put comments to this code

143

00:05:53,550  -->  00:05:56,700
let's say I would say variable or one

144

00:05:56,700  -->  00:05:59,850
here and here I would say variable 2

145

00:05:59,850  -->  00:06:02,760
because of these hashtags, R knows that

146

00:06:02,760  -->  00:06:04,650
these are comments now and if I were to

147

00:06:04,650  -->  00:06:07,080
execute this code including the comments

148

00:06:07,080  -->  00:06:08,940
then even though they're copied into the

149

00:06:08,940  -->  00:06:11,700
console R knows that it should ignore

150

00:06:11,700  -->  00:06:13,500
these two lines because they have

151

00:06:13,500  -->  00:06:15,120
hashtags at the start so R will

152

00:06:15,120  -->  00:06:17,790
actually only perform operations based

153

00:06:17,790  -->  00:06:20,910
on these two lines that we actually want

154

00:06:20,910  -->  00:06:24,180
so that is how you execute multiple

155

00:06:24,180  -->  00:06:26,760
lines and how that how commons tie into

156

00:06:26,760  -->  00:06:30,900
this whole coding in our exercise.

157

00:06:30,900  -->  00:06:33,300
Alright so we're done with the variable

158

00:06:33,300  -->  00:06:35,220
1 and variable 2, now let's go do some

159

00:06:35,220  -->  00:06:36,720
operations with them. Let's say we want

160

00:06:36,720  -->  00:06:38,510
to find out what

161

00:06:38,510  -->  00:06:40,820
the result of their division will be. The

162

00:06:40,820  -->  00:06:45,050
result of variable 1 divided by variable 2 and

163

00:06:45,050  -->  00:06:47,090
let's run that line and now let's just

164

00:06:47,090  -->  00:06:49,910
print out result. So as you could see it's

165

00:06:49,910  -->  00:06:51,290
0.625.

166

00:06:51,290  -->  00:06:54,860
Alright, so let's have 1, 1 more I wanted

167

00:06:54,860  -->  00:06:56,840
to show you that not only you can

168

00:06:56,840  -->  00:06:59,360
perform operations with variables and

169

00:06:59,360  -->  00:07:01,280
include multiple variables in those

170

00:07:01,280  -->  00:07:03,440
operations but you can actually call

171

00:07:03,440  -->  00:07:06,740
functions and pass values to those

172

00:07:06,740  -->  00:07:08,960
functions which are your variables.

173

00:07:08,960  -->  00:07:11,630
Let's say I want to find out what the

174

00:07:11,630  -->  00:07:14,540
square root of variable two is. Variable

175

00:07:14,540  -->  00:07:17,120
two here is four so I would type in answer

176

00:07:17,120  -->  00:07:22,130
is SQRT variable two. Now here, in this case

177

00:07:22,130  -->  00:07:25,790
SQRT is a function and the brackets

178

00:07:25,790  -->  00:07:28,040
indicate that the values inside are

179

00:07:28,040  -->  00:07:30,050
being passed on to this function. Now

180

00:07:30,050  -->  00:07:32,780
don't be worried if function seem a bit

181

00:07:32,780  -->  00:07:35,210
of like a gray area to right now that's

182

00:07:35,210  -->  00:07:36,260
totally fine,

183

00:07:36,260  -->  00:07:37,850
we're not going to dive deep into them

184

00:07:37,850  -->  00:07:39,440
now, we'll discuss them in a lot of

185

00:07:39,440  -->  00:07:41,150
detailed down further down in this

186

00:07:41,150  -->  00:07:43,070
course. What I wanted to show you here

187

00:07:43,070  -->  00:07:45,050
was just to illustrate that variables

188

00:07:45,050  -->  00:07:46,820
can be used in many different ways

189

00:07:46,820  -->  00:07:50,960
including as arguments for functions. So

190

00:07:50,960  -->  00:07:53,900
in this case, let's run this line and now

191

00:07:53,900  -->  00:07:56,300
let's print out our answer as you can

192

00:07:56,300  -->  00:07:58,790
see it is 2 which is correct.

193

00:07:58,790  -->  00:08:01,370
Alright so those are our earth medic

194

00:08:01,370  -->  00:08:03,890
operations and of course that's not

195

00:08:03,890  -->  00:08:07,280
limit you can not only add and divide

196

00:08:07,280  -->  00:08:09,440
you can multiply, you can subtract, you can

197

00:08:09,440  -->  00:08:12,020
get square roots, you can basically do

198

00:08:12,020  -->  00:08:15,860
any operation in R that you could

199

00:08:15,860  -->  00:08:19,160
think of on your simple calculator or

200

00:08:19,160  -->  00:08:21,380
even a complex calculator, but now what

201

00:08:21,380  -->  00:08:22,820
we're going to do is we're going to move

202

00:08:22,820  -->  00:08:25,760
onto character operations and see how we

203

00:08:25,760  -->  00:08:27,740
can work with some character variables

204

00:08:27,740  -->  00:08:30,260
just to illustrate that is also possible

205

00:08:30,260  -->  00:08:32,840
in R. So let's start by creating a

206

00:08:32,840  -->  00:08:35,570
variable called greeting and into this

207

00:08:35,570  -->  00:08:38,510
variable we'll put the word hello,

208

00:08:38,510  -->  00:08:39,979
so as you remember you have to use

209

00:08:39,979  -->  00:08:43,070
quotation marks to tell R that you're

210

00:08:43,070  -->  00:08:46,070
creating a character and then we'll

211

00:08:46,070  -->  00:08:48,320
create a variable called name and into

212

00:08:48,320  -->  00:08:51,410
this variable, we'll put the word Bob

213

00:08:51,410  -->  00:08:53,600
so we want to create a message for bob

214

00:08:53,600  -->  00:08:56,120
so let's add some lines and we want to

215

00:08:56,120  -->  00:08:57,230
create a message-

216

00:08:57,230  -->  00:08:59,750
We want to say hello Bob, so how do we

217

00:08:59,750  -->  00:09:02,240
add these to a variable together?

218

00:09:02,240  -->  00:09:06,019
Well in R, the function for adding two

219

00:09:06,019  -->  00:09:08,839
strings together is called paste and to

220

00:09:08,839  -->  00:09:10,279
that function, we're going to pass the

221

00:09:10,279  -->  00:09:11,779
first variable which is greeting only

222

00:09:11,779  -->  00:09:14,180
here and we're going to past the second

223

00:09:14,180  -->  00:09:16,819
variable which is named over here and if

224

00:09:16,819  -->  00:09:17,990
we execute this

225

00:09:17,990  -->  00:09:20,029
Oh once again we got the error because I

226

00:09:20,029  -->  00:09:21,680
did not execute these lines so how about

227

00:09:21,680  -->  00:09:23,629
we run all of these three together? So if

228

00:09:23,629  -->  00:09:25,670
we execute all these three, we can see that

229

00:09:25,670  -->  00:09:27,769
first one execute, second and third and

230

00:09:27,769  -->  00:09:30,470
now we can simply print out message over

231

00:09:30,470  -->  00:09:34,189
here. As you can see, we've got hello Bob.

232

00:09:34,189  -->  00:09:37,519
Alright so that's how we create and work

233

00:09:37,519  -->  00:09:39,800
with the character variables as well and

234

00:09:39,800  -->  00:09:41,000
once again we use the function here

235

00:09:41,000  -->  00:09:43,250
don't worry if it seems a bit

236

00:09:43,250  -->  00:09:44,329
complicated,

237

00:09:44,329  -->  00:09:47,000
we'll talk much more about functions

238

00:09:47,000  -->  00:09:49,009
further down in this course.

239

00:09:49,009  -->  00:09:52,100
Ok so that is us for today. I would like

240

00:09:52,100  -->  00:09:55,339
to invite you to practice with these

241

00:09:55,339  -->  00:09:57,290
variables and see what other operations

242

00:09:57,290  -->  00:09:59,360
you can think of so try multiplying, try

243

00:09:59,360  -->  00:10:01,550
subtracting, try for instance maybe

244

00:10:01,550  -->  00:10:03,199
including not just two variables but

245

00:10:03,199  -->  00:10:05,480
three, four maybe five variables in one

246

00:10:05,480  -->  00:10:08,029
operation and see what you get because

247

00:10:08,029  -->  00:10:11,240
remember practice makes perfect and that

248

00:10:11,240  -->  00:10:13,730
is the best way to learn a new

249

00:10:13,730  -->  00:10:15,589
programming language and I look forward

250

00:10:15,589  -->  00:10:17,120
to seeing you next time and until then,

251

00:10:17,120  -->  00:10:28,639
happy coding.
