WEBVTT
1

00:00:00.000  -->  00:00:07.319
Hello and welcome back to the course on

2

00:00:07.319  -->  00:00:09.420
R programming and today we're going to

3

00:00:09.420  -->  00:00:12.150
talk about ways to build the matrix. So

4

00:00:12.150  -->  00:00:15.150
here I've got to where we left off in

5

00:00:15.150  -->  00:00:17.490
the previous tutorial where we looked at

6

00:00:17.490  -->  00:00:20.279
R studio and we've got the salary

7

00:00:20.279  -->  00:00:22.890
table or the salary matrix now that we

8

00:00:22.890  -->  00:00:25.109
know they're matrices. The salary matrix

9

00:00:25.109  -->  00:00:28.619
for the top players, so let's have a look

10

00:00:28.619  -->  00:00:31.289
and let's have a look around, let's look at

11

00:00:31.289  -->  00:00:32.969
another one. Let's see what else do we

12

00:00:32.969  -->  00:00:33.660
have.

13

00:00:33.660  -->  00:00:36.239
We've got another one called games so

14

00:00:36.239  -->  00:00:37.440
let's look at that.

15

00:00:37.440  -->  00:00:39.329
So here you've got the games that these

16

00:00:39.329  -->  00:00:42.360
same players played yeah and let's look at

17

00:00:42.360  -->  00:00:43.170
another one.

18

00:00:43.170  -->  00:00:44.850
We've got quite a fews, we won't look at

19

00:00:44.850  -->  00:00:47.820
all of them right now, let's look at minutes

20

00:00:47.820  -->  00:00:51.480
played and so you've got the number of

21

00:00:51.480  -->  00:00:53.550
minutes each one of these players played

22

00:00:53.550  -->  00:00:55.140
in these years.

23

00:00:55.140  -->  00:00:56.850
Alright you can see Derrick Rose was

24

00:00:56.850  -->  00:00:58.829
off for the whole season here with a

25

00:00:58.829  -->  00:00:59.910
knee injury.

26

00:00:59.910  -->  00:01:02.550
Anyway so it's a bit curious right?

27

00:01:02.550  -->  00:01:04.920
How are these tables created? Let's go

28

00:01:04.920  -->  00:01:06.360
have a look at the data,

29

00:01:06.360  -->  00:01:07.710
let's go look at the script actually

30

00:01:07.710  -->  00:01:10.409
that we were supplied with and let's see

31

00:01:10.409  -->  00:01:13.320
how these tables came to be. So comments

32

00:01:13.320  -->  00:01:15.420
comments comments and then we've got a

33

00:01:15.420  -->  00:01:18.390
vector with seasons right? We've got a

34

00:01:18.390  -->  00:01:20.729
vector of players which we both of them

35

00:01:20.729  -->  00:01:22.950
we still, still have here. So there's

36

00:01:22.950  -->  00:01:25.560
the players, there is the season vector and

37

00:01:25.560  -->  00:01:26.880
players just has the names of the

38

00:01:26.880  -->  00:01:30.450
players and seasons has the names of the

39

00:01:30.450  -->  00:01:34.380
seasons in numbers. So basically, the

40

00:01:34.380  -->  00:01:36.329
seasons has characters rather than

41

00:01:36.329  -->  00:01:39.240
numbers and then we've got some more

42

00:01:39.240  -->  00:01:41.159
vectors which are no longer here.

43

00:01:41.159  -->  00:01:43.890
Interesting where did they go? Ok let's

44

00:01:43.890  -->  00:01:45.960
have a look, we've got the salary so for

45

00:01:45.960  -->  00:01:47.880
each one of the players we've got looks

46

00:01:47.880  -->  00:01:51.000
what looks like their salaries in one

47

00:01:51.000  -->  00:01:53.759
vector right? Instead of right away in

48

00:01:53.759  -->  00:01:54.420
the table,

49

00:01:54.420  -->  00:01:55.649
it's in one vector looks like it

50

00:01:55.649  -->  00:01:58.200
starts from low to high so this was his

51

00:01:58.200  -->  00:02:00.479
salary in 2005 and this is Kobe

52

00:02:00.479  -->  00:02:02.640
Bryant's salary in 2014.

53

00:02:02.640  -->  00:02:04.799
Ok that's same thing for the every player.

54

00:02:04.799  -->  00:02:06.119
Alright and then how is the matrix

55

00:02:06.119  -->  00:02:07.079
construction?

56

00:02:07.079  -->  00:02:10.649
Alright salary is the matrix that we

57

00:02:10.649  -->  00:02:12.270
call, so if I run this just the

58

00:02:12.270  -->  00:02:13.540
highlighted bit

59

00:02:13.540  -->  00:02:15.400
that's exactly what we're looking at the

60

00:02:15.400  -->  00:02:19.030
salaries matrix, the salary matrix is the

61

00:02:19.030  -->  00:02:22.599
result of a function called rbind and

62

00:02:22.599  -->  00:02:25.000
rbind applied to all of these

63

00:02:25.000  -->  00:02:28.299
vectors Kobe Bryant, salary Joe Johnson,

64

00:02:28.299  -->  00:02:32.859
Lebron James and so on. So these vectors

65

00:02:32.859  -->  00:02:36.700
are somehow being put into this matrix

66

00:02:36.700  -->  00:02:40.060
by this rbind function, interesting.

67

00:02:40.060  -->  00:02:42.760
Let's let's take note of that and then

68

00:02:42.760  -->  00:02:45.400
what happens and then we've got RM so

69

00:02:45.400  -->  00:02:48.370
what is RM do? RM basically is a function

70

00:02:48.370  -->  00:02:50.470
to remove, so instead of clicking this

71

00:02:50.470  -->  00:02:53.739
button here, to remove objects from your

72

00:02:53.739  -->  00:02:55.269
work space to clear up you can actually

73

00:02:55.269  -->  00:02:57.129
remove them one-by-one using this

74

00:02:57.129  -->  00:02:59.769
function RM. So if you click if you type

75

00:02:59.769  -->  00:03:02.260
in RM and then an object or comma

76

00:03:02.260  -->  00:03:04.269
objects and like lots of objects

77

00:03:04.269  -->  00:03:06.010
separated by commas you can remove them

78

00:03:06.010  -->  00:03:08.950
like that so basically RM is cleaning up

79

00:03:08.950  -->  00:03:10.120
these vectors.

80

00:03:10.120  -->  00:03:11.590
That's why we don't see them, that make

81

00:03:11.590  -->  00:03:13.060
sense if we have the matrix we don't

82

00:03:13.060  -->  00:03:15.129
really need the vectors anymore and then

83

00:03:15.129  -->  00:03:16.569
what do we have and then we have col

84

00:03:16.569  -->  00:03:20.560
names salary seasons and row names,

85

00:03:20.560  -->  00:03:24.760
salary player so apparently these two

86

00:03:24.760  -->  00:03:27.159
vectors are being used to label the

87

00:03:27.159  -->  00:03:30.040
column names and the row names interesting.

88

00:03:30.040  -->  00:03:32.680
Ok so that's that's an interesting start

89

00:03:32.680  -->  00:03:34.810
to this tutorial we've got, we've got kind

90

00:03:34.810  -->  00:03:36.699
of working backwards. We can see how

91

00:03:36.699  -->  00:03:39.129
these functions were used to create this

92

00:03:39.129  -->  00:03:42.280
matrix and these vectors as well we're

93

00:03:42.280  -->  00:03:44.109
used in this creation but we don't

94

00:03:44.109  -->  00:03:46.180
actually know how it would works. Well now

95

00:03:46.180  -->  00:03:47.470
that we've seen it,

96

00:03:47.470  -->  00:03:49.569
let's go and talk about some of this

97

00:03:49.569  -->  00:03:52.120
theory. I'll show you how these functions

98

00:03:52.120  -->  00:03:54.459
work and then we'll come back and we'll

99

00:03:54.459  -->  00:03:56.379
practice some of those on our own. I

100

00:03:56.379  -->  00:03:57.790
think that'll be an interesting approach to

101

00:03:57.790  -->  00:04:00.939
start. Alright let's get started, we talk

102

00:04:00.939  -->  00:04:03.519
about building your first matrix.

103

00:04:03.519  -->  00:04:06.609
Alright so here's the deal how do we

104

00:04:06.609  -->  00:04:08.650
build a matrix? We have the data. How

105

00:04:08.650  -->  00:04:11.500
do we put it in a matrix in R? Well the

106

00:04:11.500  -->  00:04:13.810
first way to do it is use the matrix

107

00:04:13.810  -->  00:04:16.120
function, now we didn't see an example of

108

00:04:16.120  -->  00:04:18.639
that in the data set or in the

109

00:04:18.639  -->  00:04:19.989
scriptural account just now and that's

110

00:04:19.989  -->  00:04:21.880
because you won't be using the matrix

111

00:04:21.880  -->  00:04:23.469
function that often.

112

00:04:23.469  -->  00:04:25.419
What it does is it takes a vector and it

113

00:04:25.419  -->  00:04:27.030
bends it into

114

00:04:27.030  -->  00:04:29.639
like literally bends it into a matrix. So

115

00:04:29.639  -->  00:04:31.500
let's say I have a vector of letters

116

00:04:31.500  -->  00:04:35.669
from A, B, C, D, E and so on and I have 15

117

00:04:35.669  -->  00:04:37.950
letters in there so if I try to put this

118

00:04:37.950  -->  00:04:39.930
matrix you can see it's being bent, it's

119

00:04:39.930  -->  00:04:42.389
like first three letters go here. So this

120

00:04:42.389  -->  00:04:44.580
is how it works had a long vector of 15

121

00:04:44.580  -->  00:04:45.990
elements and then it's like put the

122

00:04:45.990  -->  00:04:47.730
first three in here then bend it put it

123

00:04:47.730  -->  00:04:50.040
in here bend it put it in here bend it,

124

00:04:50.040  -->  00:04:51.900
it's like a snake and it will always

125

00:04:51.900  -->  00:04:55.139
populate starting with the first column

126

00:04:55.139  -->  00:04:56.970
and popular the column then I'll go to the

127

00:04:56.970  -->  00:04:59.400
second column and so on. Unless you specify

128

00:04:59.400  -->  00:05:00.870
and we'll see this, unless we specify

129

00:05:00.870  -->  00:05:04.230
a parameter which we'll tell it to bend

130

00:05:04.230  -->  00:05:06.000
the vector like that and the reason why

131

00:05:06.000  -->  00:05:07.320
this function is not that often used is

132

00:05:07.320  -->  00:05:09.930
because how often are you required to

133

00:05:09.930  -->  00:05:12.120
take a vector and put into matrix?

134

00:05:12.120  -->  00:05:15.330
Usually matrices arising in different

135

00:05:15.330  -->  00:05:17.700
ways either you get from a file or or

136

00:05:17.700  -->  00:05:19.979
use one of these functions.

137

00:05:19.979  -->  00:05:22.080
The second way is to use a function

138

00:05:22.080  -->  00:05:23.820
called rbind and that's exactly what

139

00:05:23.820  -->  00:05:26.190
we saw in that script that we're looking at just

140

00:05:26.190  -->  00:05:28.979
now and rbind function does is as

141

00:05:28.979  -->  00:05:31.440
you just saw, it just blinds these

142

00:05:31.440  -->  00:05:33.930
vectors. Let's do that again, it was

143

00:05:33.930  -->  00:05:36.660
pretty cool animation boom boom boom

144

00:05:36.660  -->  00:05:40.380
right? So rbind takes a vector, they

145

00:05:40.380  -->  00:05:41.940
have to be of the same length of course

146

00:05:41.940  -->  00:05:44.370
otherwise you can't create a matrix if

147

00:05:44.370  -->  00:05:46.260
they're not in same length but basically

148

00:05:46.260  -->  00:05:48.120
rbind takes the first vector and

149

00:05:48.120  -->  00:05:50.250
attaches the second below at third vector

150

00:05:50.250  -->  00:05:53.039
and so on and create a matrix like that

151

00:05:53.039  -->  00:05:56.580
and the next function is C bind. Can you

152

00:05:56.580  -->  00:05:59.640
guess what it does? Exactly, C-bind

153

00:05:59.640  -->  00:06:03.570
connects columns into a vector. So if you have

154

00:06:03.570  -->  00:06:06.300
five columns of length 3 in this case, so

155

00:06:06.300  -->  00:06:08.580
bam bam bam, so first, second, third,

156

00:06:08.580  -->  00:06:11.310
fourth and fifth and there we go, so that's the

157

00:06:11.310  -->  00:06:13.680
three main ways of creating matrices of

158

00:06:13.680  -->  00:06:15.479
course you can get one from a file and

159

00:06:15.479  -->  00:06:17.610
we'll explore importing data further

160

00:06:17.610  -->  00:06:19.050
down in the course but if you want to

161

00:06:19.050  -->  00:06:21.450
create a matrix on in your script then

162

00:06:21.450  -->  00:06:24.920
these are the three main ones.

163

00:06:24.920  -->  00:06:27.200
Alright, so let's go practice some of these

164

00:06:27.200  -->  00:06:27.950
things.

165

00:06:27.950  -->  00:06:29.570
Alright so what do we have? We've got

166

00:06:29.570  -->  00:06:31.820
salary games we don't need any of that

167

00:06:31.820  -->  00:06:32.870
anymore,

168

00:06:32.870  -->  00:06:35.780
let's try to create our own matrix right?

169

00:06:35.780  -->  00:06:37.970
So first we're going to learn how to use

170

00:06:37.970  -->  00:06:40.040
the matrix function even though we're

171

00:06:40.040  -->  00:06:42.050
not going to be using it that much

172

00:06:42.050  -->  00:06:44.000
let's to learn how to use it. So if I run

173

00:06:44.000  -->  00:06:47.060
a question mark matrix, what we will see

174

00:06:47.060  -->  00:06:49.700
is that matrix requires some elements

175

00:06:49.700  -->  00:06:51.260
some parameters, the first parameter is

176

00:06:51.260  -->  00:06:54.590
data and by default is N/A because

177

00:06:54.590  -->  00:06:56.180
there's no data there at the moment

178

00:06:56.180  -->  00:06:58.190
and we need to pause it. Basically it's

179

00:06:58.190  -->  00:07:01.100
asking for a vector of values that will

180

00:07:01.100  -->  00:07:04.040
be turned into matrix, then it's asking

181

00:07:04.040  -->  00:07:06.110
for the number of rows and the number of

182

00:07:06.110  -->  00:07:08.000
columns and to be passed. So you basically

183

00:07:08.000  -->  00:07:10.940
tell matrix the function what kind of

184

00:07:10.940  -->  00:07:12.440
matrix you want to build, how many rows?

185

00:07:12.440  -->  00:07:14.390
How many columns? And then you've got the

186

00:07:14.390  -->  00:07:16.580
false parameter. It tells the function

187

00:07:16.580  -->  00:07:18.200
whether you want to populate your matrix

188

00:07:18.200  -->  00:07:20.780
by rows or by columns, by default as you can

189

00:07:20.780  -->  00:07:23.060
see is it's false so that means that you want

190

00:07:23.060  -->  00:07:24.380
to populate by rows.

191

00:07:24.380  -->  00:07:27.350
Ok, so moving back here, let's go ahead

192

00:07:27.350  -->  00:07:29.660
and get some data first.

193

00:07:29.660  -->  00:07:33.740
My data is 1 to 20 and so my data,

194

00:07:33.740  -->  00:07:37.130
if I run that, I've got a vector of 20

195

00:07:37.130  -->  00:07:39.830
numbers. Now if I want to put that vector

196

00:07:39.830  -->  00:07:42.500
into matrix I can bend it into matrix

197

00:07:42.500  -->  00:07:45.500
using the matrix function my data,

198

00:07:45.500  -->  00:07:47.900
I am passing the data to the function

199

00:07:47.900  -->  00:07:50.270
then I want to call the number give it

200

00:07:50.270  -->  00:07:52.460
the number 4 so you can see here past

201

00:07:52.460  -->  00:07:54.620
the data, then the number of rows

202

00:07:54.620  -->  00:07:56.660
that you want I want four rows and then

203

00:07:56.660  -->  00:07:58.430
the number of columns that you want. I

204

00:07:58.430  -->  00:08:00.650
want five columns in the matrix so it's

205

00:08:00.650  -->  00:08:02.240
important that these two, if you multiply

206

00:08:02.240  -->  00:08:04.100
them equal, they equal to the length of the vector

207

00:08:04.100  -->  00:08:06.230
because that's the vector has to fit

208

00:08:06.230  -->  00:08:08.570
into the matrix basically. So if I run that

209

00:08:08.570  -->  00:08:11.360
and I call A then you'll see, I've got

210

00:08:11.360  -->  00:08:14.000
matrix here and it's been populated like

211

00:08:14.000  -->  00:08:16.550
we saw in the tutorial right? In the

212

00:08:16.550  -->  00:08:18.380
presentation, it's going one, two, three, four

213

00:08:18.380  -->  00:08:20.060
then it's being bent like that five, six,

214

00:08:20.060  -->  00:08:21.440
seven, eight so it's been populated like a

215

00:08:21.440  -->  00:08:24.620
snake going up and down up and down.

216

00:08:24.620  -->  00:08:28.070
Alright so that is our matrix and as you

217

00:08:28.070  -->  00:08:32.120
can see here the indices are just as we

218

00:08:32.120  -->  00:08:34.390
discussed in the previous tutorial.

219

00:08:34.390  -->  00:08:35.710
So it's not just one, two, three, four but

220

00:08:35.710  -->  00:08:37.420
it's actually one square brackets comma

221

00:08:37.420  -->  00:08:39.310
nothing two, square two inside square

222

00:08:39.310  -->  00:08:41.650
brackets comma nothing and so on and

223

00:08:41.650  -->  00:08:43.570
for the columns it's the opposite way around so

224

00:08:43.570  -->  00:08:45.970
that's just how R represents indices and

225

00:08:45.970  -->  00:08:48.520
also telling you that maybe if you want

226

00:08:48.520  -->  00:08:50.500
to get this whole row, you just put a in

227

00:08:50.500  -->  00:08:52.390
front of any one of these and you just

228

00:08:52.390  -->  00:08:54.070
type that out or if you want to get the whole column A and then square bracket

229

00:08:56.590  -->  00:08:58.810
comma 3 I'll give you this whole column.

230

00:08:58.810  -->  00:09:01.420
So for instance, there's done exercise, how

231

00:09:01.420  -->  00:09:02.980
do we get to number 10?

232

00:09:02.980  -->  00:09:06.160
Can you get to the number-10 using

233

00:09:06.160  -->  00:09:08.950
indexes, indices yes we can, we just say A

234

00:09:08.950  -->  00:09:11.470
two and three as you can see it becomes

235

00:09:11.470  -->  00:09:12.820
a no-brain all you have to do is look

236

00:09:12.820  -->  00:09:13.360
here,

237

00:09:13.360  -->  00:09:15.250
ok it's in the second row, that tells you

238

00:09:15.250  -->  00:09:16.930
that's the second row and that tells you in the third column.

239

00:09:16.930  -->  00:09:19.570
Run that, you get the number

240

00:09:19.570  -->  00:09:21.280
10, beautiful.

241

00:09:21.280  -->  00:09:24.130
Ok so let's create another matrix but

242

00:09:24.130  -->  00:09:26.230
this time we'll do the same exact thing

243

00:09:26.230  -->  00:09:28.210
so we'll copy that

244

00:09:28.210  -->  00:09:32.290
but at the end we'll say by row equals

245

00:09:32.290  -->  00:09:35.560
true. So you can just put the letter T or

246

00:09:35.560  -->  00:09:37.000
type in the whole world it's up to you

247

00:09:37.000  -->  00:09:39.400
and the important thing to note here is

248

00:09:39.400  -->  00:09:41.470
that we're not creating a different type

249

00:09:41.470  -->  00:09:43.210
of matrix, the matrix still going to be a

250

00:09:43.210  -->  00:09:45.190
four by five so it's not that we're

251

00:09:45.190  -->  00:09:47.200
going to create a five by four matrix. It's

252

00:09:47.200  -->  00:09:49.090
going to have 4 rows, 5 columns just like

253

00:09:49.090  -->  00:09:49.810
this one.

254

00:09:49.810  -->  00:09:51.280
The data is going to be the same, it's

255

00:09:51.280  -->  00:09:52.630
just that the data is going to be

256

00:09:52.630  -->  00:09:55.000
populated into the matrix differently.

257

00:09:55.000  -->  00:09:56.950
Let's have a look, so if we run that,

258

00:09:56.950  -->  00:09:59.380
you'll see that the data goes one,

259

00:09:59.380  -->  00:10:01.660
two, three, four and then bends this way

260

00:10:01.660  -->  00:10:04.060
six, seven, eight, nine, ten bends 11, 12, 13,

261

00:10:04.060  -->  00:10:07.090
14, 15 bends over here. So it's like a

262

00:10:07.090  -->  00:10:09.550
snake going left to right this time.

263

00:10:09.550  -->  00:10:12.880
So that is what we created using the

264

00:10:12.880  -->  00:10:14.710
same function but with a different by

265

00:10:14.710  -->  00:10:17.680
row parameter and here's a challenge

266

00:10:17.680  -->  00:10:19.870
for you, if you pause this video try to

267

00:10:19.870  -->  00:10:22.990
get to the number 10 in this matrix now.

268

00:10:22.990  -->  00:10:26.470
Can you do it? I'm sure you can, so to get

269

00:10:26.470  -->  00:10:28.360
to the number 10 it's in a different

270

00:10:28.360  -->  00:10:30.550
position now you need to take the second

271

00:10:30.550  -->  00:10:32.560
row and the fifth column. So let's try

272

00:10:32.560  -->  00:10:36.730
that be 2nd, 5th, as you can see number 10,

273

00:10:36.730  -->  00:10:39.370
alright beautiful. The other function

274

00:10:39.370  -->  00:10:41.170
we wanted to discuss is the R-bind

275

00:10:41.170  -->  00:10:43.420
function, now I'm not going to bring up

276

00:10:43.420  -->  00:10:44.980
the help far bind because it's a very

277

00:10:44.980  -->  00:10:47.260
simple function and as you'll see

278

00:10:47.260  -->  00:10:49.390
we don't need the help manual. So all we

279

00:10:49.390  -->  00:10:50.890
do is a couple pictures so let's create

280

00:10:50.890  -->  00:10:53.260
three vectors and then will bind them

281

00:10:53.260  -->  00:10:55.930
into matrices. R1 was going to be a

282

00:10:55.930  -->  00:10:57.940
vector and let's make it a character

283

00:10:57.940  -->  00:10:59.650
vector for a change and what I want to

284

00:10:59.650  -->  00:11:02.530
say here is I'm going to say I am happy.

285

00:11:02.530  -->  00:11:04.420
Why am I happy because I'm sharing this

286

00:11:04.420  -->  00:11:06.610
knowledge with some awesome people

287

00:11:06.610  -->  00:11:08.200
thank you so much for taking this course.

288

00:11:08.200  -->  00:11:11.710
I hope you're learning a lot. Then second

289

00:11:11.710  -->  00:11:15.220
vector is what a day is being great day

290

00:11:15.220  -->  00:11:18.520
and R3 is going to be just a vector of

291

00:11:18.520  -->  00:11:23.590
numbers, so let's say C-123 right? So we

292

00:11:23.590  -->  00:11:27.220
have three vectors, let's create them and

293

00:11:27.220  -->  00:11:30.790
we want to put them into a matrix. The

294

00:11:30.790  -->  00:11:32.950
matrix is going to be called C. How do we put

295

00:11:32.950  -->  00:11:34.480
three vectors into matrix if you wanna

296

00:11:34.480  -->  00:11:37.060
bind them row-by-row, if we want them

297

00:11:37.060  -->  00:11:38.230
to be the rows.

298

00:11:38.230  -->  00:11:41.800
Well we just say R1, we say R-bind and

299

00:11:41.800  -->  00:11:45.340
then we say R1, R2 and R3. If you run this

300

00:11:45.340  -->  00:11:48.220
now, you'll see that here we go we've got

301

00:11:48.220  -->  00:11:51.280
the matrix awesome. I'm happy what a day,

302

00:11:51.280  -->  00:11:53.980
1,2,3 and you can see the 1, 2, 3 are no

303

00:11:53.980  -->  00:11:55.420
longer numbers of they're characters

304

00:11:55.420  -->  00:11:57.430
because you cannot mix different types

305

00:11:57.430  -->  00:11:59.770
inside a matrix just like inside a

306

00:11:59.770  -->  00:12:01.420
vector, so the character numbers were

307

00:12:01.420  -->  00:12:03.580
converted to characters automatic. Now

308

00:12:03.580  -->  00:12:05.350
let's do the same thing for C-bind

309

00:12:05.350  -->  00:12:07.180
right? We want,

310

00:12:07.180  -->  00:12:10.750
let's make some space. Let's start by

311

00:12:10.750  -->  00:12:13.090
creating vector C-1, we'll just create two

312

00:12:13.090  -->  00:12:16.930
vectors, so there we go C-1 and C-2 is

313

00:12:16.930  -->  00:12:20.560
going to be minus 1 to minus 5. Alright some

314

00:12:20.560  -->  00:12:23.860
negative numbers, now the matrix D is

315

00:12:23.860  -->  00:12:29.710
going to be C-bind, C-1, C-2 right and now if

316

00:12:29.710  -->  00:12:32.020
I called D you'll see I've got 1, 2, 3, 4, 5

317

00:12:32.020  -->  00:12:35.260
minus 1. So I kind of merge those two

318

00:12:35.260  -->  00:12:38.050
vectors together into matrix like

319

00:12:38.050  -->  00:12:40.870
virtually like that. Okay that brings us

320

00:12:40.870  -->  00:12:43.180
to the end of today's tutorial and to

321

00:12:43.180  -->  00:12:45.220
quickly recap, we talked about three

322

00:12:45.220  -->  00:12:46.600
functions today we talked about the

323

00:12:46.600  -->  00:12:49.540
matrix function which bends a vector

324

00:12:49.540  -->  00:12:52.000
into a matrix and this function you won't

325

00:12:52.000  -->  00:12:54.130
be using it that much but still it's

326

00:12:54.130  -->  00:12:56.020
important to know about it and know how

327

00:12:56.020  -->  00:12:56.980
it works.

328

00:12:56.980  -->  00:12:59.770
The R-bind function which binds

329

00:12:59.770  -->  00:13:00.670
vectors

330

00:13:00.670  -->  00:13:04.060
into a matrix, a row by row and this C

331

00:13:04.060  -->  00:13:07.090
bind function which binds vectors into

332

00:13:07.090  -->  00:13:10.060
matrix column by column. So that's all

333

00:13:10.060  -->  00:13:12.580
for today, hopefully you will have some

334

00:13:12.580  -->  00:13:14.980
time to practice these and I highly

335

00:13:14.980  -->  00:13:17.800
encourage you to do so just create some

336

00:13:17.800  -->  00:13:19.930
of your own matrices for instance just

337

00:13:19.930  -->  00:13:22.690
one for each function will be enough, if

338

00:13:22.690  -->  00:13:24.160
can do two for each function, that would be

339

00:13:24.160  -->  00:13:25.840
fantastic!

340

00:13:25.840  -->  00:13:28.060
Just to make this knowledge sink in

341

00:13:28.060  -->  00:13:31.210
and next time we will proceed with the

342

00:13:31.210  -->  00:13:33.640
next topic and I look to seeing you in the next

343

00:13:33.640  -->  00:13:46.710
tutorial. Until then, happy coding!
