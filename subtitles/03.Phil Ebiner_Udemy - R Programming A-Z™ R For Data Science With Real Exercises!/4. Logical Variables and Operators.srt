1

00:00:00,000  -->  00:00:07,230
Hello and welcome back to a course on

2

00:00:07,230  -->  00:00:09,090
R programming. Today we'll talk about

3

00:00:09,090  -->  00:00:11,550
logical variable and operators.

4

00:00:11,550  -->  00:00:13,530
Let's dive straight into it.

5

00:00:13,530  -->  00:00:15,990
First off, we're going to save the file

6

00:00:15,990  -->  00:00:19,230
for our previous project. So once again,

7

00:00:19,230  -->  00:00:21,510
we're going to press command S or control

8

00:00:21,510  -->  00:00:23,789
S, depends on what machine they are on and

9

00:00:23,789  -->  00:00:27,599
we will give it a name, tutorial 02 and

10

00:00:27,599  -->  00:00:29,970
just go ahead and click save and now

11

00:00:29,970  -->  00:00:32,880
let's create a new script. Once again, we

12

00:00:32,880  -->  00:00:35,309
will clean up the environment,

13

00:00:35,309  -->  00:00:37,980
click yes and let's get straight into

14

00:00:37,980  -->  00:00:41,910
logical operators. So logical operators

15

00:00:41,910  -->  00:00:44,700
can basically have two possible values

16

00:00:44,700  -->  00:00:46,559
and we've actually already talked about

17

00:00:46,559  -->  00:00:49,980
these so let's put a comment in and what

18

00:00:49,980  -->  00:00:52,140
other possible values that they can have.

19

00:00:52,140  -->  00:00:54,690
They can either be true or they can be

20

00:00:54,690  -->  00:00:56,699
false and it's important that it's all

21

00:00:56,699  -->  00:00:59,430
caps and also you can use just the word

22

00:00:59,430  -->  00:01:01,770
just a letter T or just the letter F,

23

00:01:01,770  -->  00:01:04,500
but also it has to be kept. So what is a

24

00:01:04,500  -->  00:01:05,700
logical operator?

25

00:01:05,700  -->  00:01:07,560
Well let's have a look at a couple of

26

00:01:07,560  -->  00:01:10,200
examples, let's say we want to check if

27

00:01:10,200  -->  00:01:13,290
four is less than five then we type in

28

00:01:13,290  -->  00:01:17,009
for less than five and we run this line

29

00:01:17,009  -->  00:01:20,040
of code. What we get in result is the

30

00:01:20,040  -->  00:01:22,920
word true. Meaning that R is telling us

31

00:01:22,920  -->  00:01:26,070
that this, the result of this operation

32

00:01:26,070  -->  00:01:29,009
is true. That is because this operator

33

00:01:29,009  -->  00:01:31,259
here less than is comparing the two

34

00:01:31,259  -->  00:01:33,329
numbers four and five.

35

00:01:33,329  -->  00:01:35,400
Let's do another one, let's check that if

36

00:01:35,400  -->  00:01:38,369
10 is greater than a hundred. Let's run

37

00:01:38,369  -->  00:01:41,040
that and what we can see here is this

38

00:01:41,040  -->  00:01:43,140
line has been copied. It has been

39

00:01:43,140  -->  00:01:45,930
executed and as you can see it's false

40

00:01:45,930  -->  00:01:48,060
which is correct. 10 is not greater than

41

00:01:48,060  -->  00:01:50,460
a hundred. Let's check another one, let's

42

00:01:50,460  -->  00:01:53,430
see if four is equal to five and let's

43

00:01:53,430  -->  00:01:55,860
run this line of code. Once again, we get

44

00:01:55,860  -->  00:01:58,649
false because four is not equal to five.

45

00:01:58,649  -->  00:02:02,040
So these are examples of us using

46

00:02:02,040  -->  00:02:04,890
logical operators, less than, equal or

47

00:02:04,890  -->  00:02:08,069
greater than or equal to. In R, there are

48

00:02:08,069  -->  00:02:10,860
actually quite a few logical operators

49

00:02:10,860  -->  00:02:13,050
and we will be looking at

50

00:02:13,050  -->  00:02:16,560
ten of them. Let's list them out here, so

51

00:02:16,560  -->  00:02:19,620
the first one was is equal to, second one

52

00:02:19,620  -->  00:02:23,160
is not equal to. So that's how you write

53

00:02:23,160  -->  00:02:26,820
it an exclamation mark and an equal sign and also be

54

00:02:26,820  -->  00:02:29,430
careful that in the equal to operator

55

00:02:29,430  -->  00:02:32,730
you have to use the double equation sign

56

00:02:32,730  -->  00:02:34,470
because in some programming language's

57

00:02:34,470  -->  00:02:36,960
single equation is sufficient. Then we've

58

00:02:36,960  -->  00:02:39,270
got the less than, we've got the

59

00:02:39,270  -->  00:02:42,090
greater than, we've got the less than or

60

00:02:42,090  -->  00:02:45,810
equal to, greater than or equal to then

61

00:02:45,810  -->  00:02:49,680
we've got the simple knot and I'll show

62

00:02:49,680  -->  00:02:51,570
you how to use on that one in a second.

63

00:02:51,570  -->  00:02:55,140
Then we've got the or so in some

64

00:02:55,140  -->  00:02:57,030
languages you need the double vertical

65

00:02:57,030  -->  00:03:00,750
line like that, in R you have to be

66

00:03:00,750  -->  00:03:02,730
careful that you use only the single one

67

00:03:02,730  -->  00:03:05,790
because the double one will work but it

68

00:03:05,790  -->  00:03:08,880
has a completely different meaning and

69

00:03:08,880  -->  00:03:11,730
also you've got the single and four and

70

00:03:11,730  -->  00:03:14,100
and then one more which is a function to

71

00:03:14,100  -->  00:03:17,370
check if something is true and it is

72

00:03:17,370  -->  00:03:19,200
true and then you put the variable

73

00:03:19,200  -->  00:03:21,030
inside there. So let's have a look at a

74

00:03:21,030  -->  00:03:24,690
couple more, so let's say I want to

75

00:03:24,690  -->  00:03:27,120
check if four is less than five which we've

76

00:03:27,120  -->  00:03:28,739
already done but I don't want to just

77

00:03:28,739  -->  00:03:30,630
print the result as we've been doing.

78

00:03:30,630  -->  00:03:32,880
I want to store it in a variable, now as

79

00:03:32,880  -->  00:03:34,650
you can see our environment is empty

80

00:03:34,650  -->  00:03:36,180
here so we don't have any variables

81

00:03:36,180  -->  00:03:37,950
because we've been just printing the

82

00:03:37,950  -->  00:03:40,200
results so far. So how about we put this

83

00:03:40,200  -->  00:03:41,940
result into a variable and we'll call this

84

00:03:41,940  -->  00:03:44,670
variable result. We know the assignment

85

00:03:44,670  -->  00:03:46,230
operator, so what you can see is

86

00:03:46,230  -->  00:03:48,090
happening here is we're checking this

87

00:03:48,090  -->  00:03:50,340
and then the result of this operation is

88

00:03:50,340  -->  00:03:53,070
going to be stored in the result

89

00:03:53,070  -->  00:03:54,959
variable. Let's go ahead and run this

90

00:03:54,959  -->  00:03:56,940
line. There we go,

91

00:03:56,940  -->  00:03:58,709
as you can see with this line has been

92

00:03:58,709  -->  00:04:00,540
executed and no value has been printed

93

00:04:00,540  -->  00:04:02,280
out because we haven't asked for that

94

00:04:02,280  -->  00:04:05,970
and what we got is a variable with the

95

00:04:05,970  -->  00:04:08,070
value true which we can now just simply

96

00:04:08,070  -->  00:04:12,300
print out and check its value. There we go, it

97

00:04:12,300  -->  00:04:13,560
is true.

98

00:04:13,560  -->  00:04:16,260
Ok so let's make some more space and now

99

00:04:16,260  -->  00:04:19,769
for curiosity purposes, let's check the

100

00:04:19,769  -->  00:04:22,710
type of result which we know how to do

101

00:04:22,710  -->  00:04:24,810
from the first tutorial if we run this, we

102

00:04:24,810  -->  00:04:26,820
will see that

103

00:04:26,820  -->  00:04:29,430
result is a logical variable which is a

104

00:04:29,430  -->  00:04:31,230
type of variables which we are familiar

105

00:04:31,230  -->  00:04:34,170
with already and make sense right, if

106

00:04:34,170  -->  00:04:36,120
it's a logical operator then the result

107

00:04:36,120  -->  00:04:38,730
of that would be stored in a logical

108

00:04:38,730  -->  00:04:43,260
variable. Alright so now let's say, let's

109

00:04:43,260  -->  00:04:46,050
see how we can use the not operator so

110

00:04:46,050  -->  00:04:47,610
this interesting not one that we saw

111

00:04:47,610  -->  00:04:50,550
over here. Let's say we have a new

112

00:04:50,550  -->  00:04:53,970
variable results2, very creative

113

00:04:53,970  -->  00:04:57,180
Kirill, but anyway result2 and we want

114

00:04:57,180  -->  00:04:59,880
to use the not operator, so we'll say not

115

00:04:59,880  -->  00:05:01,650
true.

116

00:05:01,650  -->  00:05:04,320
So basically, not is an operator which is

117

00:05:04,320  -->  00:05:06,540
applied to anything that goes after it

118

00:05:06,540  -->  00:05:08,430
in this case is the word true. So if we

119

00:05:08,430  -->  00:05:12,900
run that, now we have inside result2, we

120

00:05:12,900  -->  00:05:16,170
have false and you could have you

121

00:05:16,170  -->  00:05:18,480
replaced this result true of any kind of

122

00:05:18,480  -->  00:05:21,180
other operation or variable so for

123

00:05:21,180  -->  00:05:24,810
instance here I could have said is five

124

00:05:24,810  -->  00:05:28,620
greater than one. Run this line and

125

00:05:28,620  -->  00:05:30,840
now if I check result2, you'll see that it's

126

00:05:30,840  -->  00:05:33,600
false. So basically this is true and then

127

00:05:33,600  -->  00:05:36,390
when you put the exclamation mark behind it, before it,

128

00:05:36,390  -->  00:05:38,520
what you get is the opposite of whatever

129

00:05:38,520  -->  00:05:41,250
is here. Whether it's true, it'll

130

00:05:41,250  -->  00:05:43,440
be false or if it's false it will become true.

131

00:05:43,440  -->  00:05:46,470
So there we go, soon result2 we have a

132

00:05:46,470  -->  00:05:47,580
false now.

133

00:05:47,580  -->  00:05:52,020
Ok and finally let's get to these two so

134

00:05:52,020  -->  00:05:55,950
that the or and the and. So let's see

135

00:05:55,950  -->  00:05:58,470
what happens if we say result which we

136

00:05:58,470  -->  00:06:02,970
know is true or result2, so basically

137

00:06:02,970  -->  00:06:05,730
saying one of these has to be true at

138

00:06:05,730  -->  00:06:07,380
least one of these has to be true. So

139

00:06:07,380  -->  00:06:10,590
either this one or this one and let's

140

00:06:10,590  -->  00:06:12,930
see what happens if we're on that. If we're on

141

00:06:12,930  -->  00:06:14,850
that we get true, because we know that

142

00:06:14,850  -->  00:06:18,300
this is true. This is false, but true or

143

00:06:18,300  -->  00:06:20,700
false gives true.

144

00:06:20,700  -->  00:06:24,780
Now if we run a result and results to

145

00:06:24,780  -->  00:06:27,900
now we are requiring but specifying this

146

00:06:27,900  -->  00:06:29,940
operator here. We're requiring that both

147

00:06:29,940  -->  00:06:31,950
of them are true otherwise so in the

148

00:06:31,950  -->  00:06:35,130
only case in which this will return true

149

00:06:35,130  -->  00:06:37,110
is if both of them a true. In our case,

150

00:06:37,110  -->  00:06:39,840
one of them is false. So if we run this, we

151

00:06:39,840  -->  00:06:40,529
get false

152

00:06:40,529  -->  00:06:43,469
and there you go that's how these work.

153

00:06:43,469  -->  00:06:45,749
The last one is is true

154

00:06:45,749  -->  00:06:48,449
all we have to do is type in is true and

155

00:06:48,449  -->  00:06:50,219
then put the value that we want to check

156

00:06:50,219  -->  00:06:52,709
inside here so let's say we want to

157

00:06:52,709  -->  00:06:55,739
check the value of the variable result

158

00:06:55,739  -->  00:06:57,029
right?

159

00:06:57,029  -->  00:06:59,699
Is it true? Yes it is true, the answer to

160

00:06:59,699  -->  00:07:01,439
this question is true.

161

00:07:01,439  -->  00:07:04,859
Alright so that's how logical operators

162

00:07:04,859  -->  00:07:08,039
work and that is how we can use logical

163

00:07:08,039  -->  00:07:10,619
variable to store result of logical

164

00:07:10,619  -->  00:07:12,329
operators. Have a play around with that,

165

00:07:12,329  -->  00:07:14,879
this will come in handy

166

00:07:14,879  -->  00:07:16,499
throughout this whole course whenever

167

00:07:16,499  -->  00:07:18,929
we're working with loops or if

168

00:07:18,929  -->  00:07:21,809
statements or whenever we are checking

169

00:07:21,809  -->  00:07:25,499
matrices or vectors for a certain

170

00:07:25,499  -->  00:07:27,269
criteria so when we're filtering our

171

00:07:27,269  -->  00:07:29,819
data and so on. So definitely gets a

172

00:07:29,819  -->  00:07:32,099
group around that because it you will

173

00:07:32,099  -->  00:07:33,899
need it further down the course and I look

174

00:07:33,899  -->  00:07:35,579
forward to seeing you next time. Until then,

175

00:07:35,579  -->  00:07:46,889
happy coding.
