WEBVTT
1

00:00:00.000  -->  00:00:07.290
Hello and welcome to this tutorial on

2

00:00:07.290  -->  00:00:09.780
vectorized operations. Today we'll find

3

00:00:09.780  -->  00:00:12.420
out why the square brackets aren't that

4

00:00:12.420  -->  00:00:15.030
important in R and what is the

5

00:00:15.030  -->  00:00:18.600
fundamental underlying concept driving

6

00:00:18.600  -->  00:00:20.250
this whole programming language.

7

00:00:20.250  -->  00:00:22.680
Alright so let's get started. Let's say

8

00:00:22.680  -->  00:00:25.500
we have a numeric vector of 10 elements

9

00:00:25.500  -->  00:00:27.869
and let's say we also have another

10

00:00:27.869  -->  00:00:30.300
numeric vector of 10 elements as well

11

00:00:30.300  -->  00:00:34.110
and our goal is to add these two vectors

12

00:00:34.110  -->  00:00:36.210
together element by element so what we

13

00:00:36.210  -->  00:00:38.340
want to do is we want to add these two

14

00:00:38.340  -->  00:00:39.840
elements together we want to add these

15

00:00:39.840  -->  00:00:42.000
two elements these two these two these

16

00:00:42.000  -->  00:00:43.230
two and so on.

17

00:00:43.230  -->  00:00:45.450
So what would you do if you were

18

00:00:45.450  -->  00:00:47.879
programming this challenge in a

19

00:00:47.879  -->  00:00:49.410
different programming language something

20

00:00:49.410  -->  00:00:52.559
like C or C++ or Java or for that matter

21

00:00:52.559  -->  00:00:54.300
any other programming language that

22

00:00:54.300  -->  00:00:56.610
comes to mind. What you would probably do

23

00:00:56.610  -->  00:00:58.859
is you would create a loop and in that

24

00:00:58.859  -->  00:01:00.719
loop you would have an index variable

25

00:01:00.719  -->  00:01:03.600
which would run from one to ten and in

26

00:01:03.600  -->  00:01:05.339
every iteration of the loop you would

27

00:01:05.339  -->  00:01:07.350
add the corresponding two element so in

28

00:01:07.350  -->  00:01:08.850
the first situation that look you add

29

00:01:08.850  -->  00:01:10.979
these two and put them into the third

30

00:01:10.979  -->  00:01:12.930
vector then on the second iteration

31

00:01:12.930  -->  00:01:14.880
would add these to put them into that

32

00:01:14.880  -->  00:01:16.860
third vector as well then you'd add

33

00:01:16.860  -->  00:01:18.450
these two, the third iteration puts

34

00:01:18.450  -->  00:01:20.009
them into the third vector and so on so

35

00:01:20.009  -->  00:01:22.110
you would actually loop through this and

36

00:01:22.110  -->  00:01:23.850
that is the conventional approach and

37

00:01:23.850  -->  00:01:26.009
it's called the devectorized approach

38

00:01:26.009  -->  00:01:28.229
but in R what you can do is you can

39

00:01:28.229  -->  00:01:30.869
simply just add the two vectors just

40

00:01:30.869  -->  00:01:32.640
simply put the plus sign between them

41

00:01:32.640  -->  00:01:34.470
like we're showing over here just tell

42

00:01:34.470  -->  00:01:38.070
R to add vector A, vector B and it will

43

00:01:38.070  -->  00:01:40.590
do all of that for you in the background

44

00:01:40.590  -->  00:01:42.720
so you don't have to actually loop

45

00:01:42.720  -->  00:01:44.790
through these. All you have to do is tell

46

00:01:44.790  -->  00:01:47.100
R and the two vectors and it will do

47

00:01:47.100  -->  00:01:49.619
it for you and that is the fundamental

48

00:01:49.619  -->  00:01:52.020
underlying principle that R is a

49

00:01:52.020  -->  00:01:53.880
vectorized programming language that

50

00:01:53.880  -->  00:01:56.759
everything happens in vectors already, you

51

00:01:56.759  -->  00:01:58.799
don't need to create these loops. Same

52

00:01:58.799  -->  00:02:01.290
thing for a subtraction operation,

53

00:02:01.290  -->  00:02:04.740
multiplication division even if you want

54

00:02:04.740  -->  00:02:06.600
to compare the two vectors so you want

55

00:02:06.600  -->  00:02:09.539
to perform boolean operations or logical

56

00:02:09.539  -->  00:02:11.940
operations as we call them you can still

57

00:02:11.940  -->  00:02:13.440
do that so you can

58

00:02:13.440  -->  00:02:16.290
compare this vector so vector A, let's

59

00:02:16.290  -->  00:02:18.780
say A greater than B and what will

60

00:02:18.780  -->  00:02:20.910
happen is R will compare element by

61

00:02:20.910  -->  00:02:22.800
element and you'll have a resulting

62

00:02:22.800  -->  00:02:26.070
vector of for instance the first

63

00:02:26.070  -->  00:02:27.540
elements and the resulting vector will

64

00:02:27.540  -->  00:02:28.650
be false.

65

00:02:28.650  -->  00:02:30.480
The second element will be true. It will

66

00:02:30.480  -->  00:02:32.490
be true, it will be false then it will be

67

00:02:32.490  -->  00:02:34.800
true and so on and of course you can

68

00:02:34.800  -->  00:02:35.760
compare the other way

69

00:02:35.760  -->  00:02:38.820
so even boolean operations you can still

70

00:02:38.820  -->  00:02:41.040
perform in a vectorized manner

71

00:02:41.040  -->  00:02:43.230
and moreover as we'll see from the

72

00:02:43.230  -->  00:02:45.360
next tutorial, all these operations you should

73

00:02:45.360  -->  00:02:47.730
perform in a vectorized manner.

74

00:02:47.730  -->  00:02:49.590
Alright so let's see what happens if

75

00:02:49.590  -->  00:02:51.990
hypothetically you tried to add a

76

00:02:51.990  -->  00:02:54.840
smaller vector to a larger vector so you

77

00:02:54.840  -->  00:02:56.760
want to add a vector of five elements to

78

00:02:56.760  -->  00:02:59.040
a vector of 10 elements what will happen

79

00:02:59.040  -->  00:02:59.790
in that case?

80

00:02:59.790  -->  00:03:01.590
Well in that case R will perform

81

00:03:01.590  -->  00:03:04.020
something that is called recycling of

82

00:03:04.020  -->  00:03:06.060
vectors. It will recycle the smaller

83

00:03:06.060  -->  00:03:08.130
vector and the condition here is that

84

00:03:08.130  -->  00:03:11.010
the bigger vector should be a multiple of

85

00:03:11.010  -->  00:03:13.110
the smaller vector so basically the

86

00:03:13.110  -->  00:03:15.090
smaller vector should fit into the

87

00:03:15.090  -->  00:03:17.580
bigger vector a certain number of times

88

00:03:17.580  -->  00:03:19.530
without being cut off and that case

89

00:03:19.530  -->  00:03:22.680
basically R will copy and paste that

90

00:03:22.680  -->  00:03:24.780
small vector the number of times is

91

00:03:24.780  -->  00:03:26.670
required and then we'll add the two

92

00:03:26.670  -->  00:03:28.200
vectors so you should keep that in mind

93

00:03:28.200  -->  00:03:30.570
if you happen to add two vectors or

94

00:03:30.570  -->  00:03:32.580
perform an operation with two vectors of

95

00:03:32.580  -->  00:03:35.340
different lengths and what happens if

96

00:03:35.340  -->  00:03:37.440
the greater vector is not a multiple of

97

00:03:37.440  -->  00:03:39.690
the small vector and you still want to

98

00:03:39.690  -->  00:03:41.820
perform an operation between them? Well

99

00:03:41.820  -->  00:03:44.040
in that case recycling will still occur

100

00:03:44.040  -->  00:03:46.739
but you will get a warning from R. It

101

00:03:46.739  -->  00:03:47.970
will tell you that the greater vector

102

00:03:47.970  -->  00:03:49.470
is not a multiple of the small vector

103

00:03:49.470  -->  00:03:51.900
and that's just something that R wants

104

00:03:51.900  -->  00:03:54.209
you to be aware of to make sure this is

105

00:03:54.209  -->  00:03:55.709
indeed the operation that you wanted to

106

00:03:55.709  -->  00:03:58.290
propose and finally as we saw previously

107

00:03:58.290  -->  00:04:01.290
even with functions you can use vectors

108

00:04:01.290  -->  00:04:03.959
so vectors can be arguments within

109

00:04:03.959  -->  00:04:07.140
functions and also vectors can be

110

00:04:07.140  -->  00:04:10.140
returned from functions performing their

111

00:04:10.140  -->  00:04:12.060
operations. Now bear in mind that start

112

00:04:12.060  -->  00:04:13.620
with all functions are all functions

113

00:04:13.620  -->  00:04:16.080
take the extra argument but a lot of

114

00:04:16.080  -->  00:04:18.750
them actually do and this second note or

115

00:04:18.750  -->  00:04:19.890
hear that

116

00:04:19.890  -->  00:04:21.870
vectors can be returned from functions

117

00:04:21.870  -->  00:04:24.240
if you think of it from a C-type

118

00:04:24.240  -->  00:04:26.880
language or C++ language

119

00:04:26.880  -->  00:04:29.010
perspective it's actually very powerful

120

00:04:29.010  -->  00:04:31.020
thing for those of you who know C and

121

00:04:31.020  -->  00:04:33.690
C++. How much effort do you actually have to

122

00:04:33.690  -->  00:04:35.970
put into your code for your function to

123

00:04:35.970  -->  00:04:38.220
return an array because ultimately an

124

00:04:38.220  -->  00:04:40.110
array is the same thing as a vector in

125

00:04:40.110  -->  00:04:43.740
C&amp;R so you have to go through quite a

126

00:04:43.740  -->  00:04:45.570
lot of hoops for your function to

127

00:04:45.570  -->  00:04:48.000
properly return an array and for

128

00:04:48.000  -->  00:04:50.610
everything to work ok. Here it is very

129

00:04:50.610  -->  00:04:54.120
simple, because the vector is your basic

130

00:04:54.120  -->  00:04:56.580
element is your basic building block of

131

00:04:56.580  -->  00:04:58.530
the programming language which is R

132

00:04:58.530  -->  00:05:01.980
and because R is based on vectors as a

133

00:05:01.980  -->  00:05:04.590
whole that's the doesn't know any other

134

00:05:04.590  -->  00:05:06.450
thing remember that concept that we

135

00:05:06.450  -->  00:05:08.730
talked about that even a single number

136

00:05:08.730  -->  00:05:11.100
is still a vector that's because a

137

00:05:11.100  -->  00:05:13.560
vector is the most elementary building

138

00:05:13.560  -->  00:05:16.560
block of this programming language.

139

00:05:16.560  -->  00:05:19.200
Ok so those were vectorized operations

140

00:05:19.200  -->  00:05:21.810
in R, now you know how they work.

141

00:05:21.810  -->  00:05:24.000
I highly recommend that you take some

142

00:05:24.000  -->  00:05:26.040
time to practice these vectorize

143

00:05:26.040  -->  00:05:28.980
operations to add a few vectors to subtract

144

00:05:28.980  -->  00:05:30.450
them, see what happens with different

145

00:05:30.450  -->  00:05:32.040
lengths of vectors because in the next

146

00:05:32.040  -->  00:05:34.080
tutorial we will jump straight into an

147

00:05:34.080  -->  00:05:36.630
exercise that will show us why exactly

148

00:05:36.630  -->  00:05:39.660
in our vectorize operations are better

149

00:05:39.660  -->  00:05:41.340
and I look forward to seeing you in the

150

00:05:41.340  -->  00:05:42.240
next tutorial,

151

00:05:42.240  -->  00:05:47.529
until then happy coding.
