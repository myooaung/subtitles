1
00:00:01,695 --> 00:00:02,766
I'm back on the Speaker entity,

2
00:00:02,766 --> 00:00:05,382
and I'm ready to deal with setting up the speaker photo.

3
00:00:05,382 --> 00:00:10,116
This ultimately means that we have binary data so that we can store the photo.

4
00:00:10,116 --> 00:00:12,259
And working with binary data can be a pain,

5
00:00:12,259 --> 00:00:16,180
and we need to handle a couple of gotchas to get things running correctly.

6
00:00:16,180 --> 00:00:20,823
Let's begin by defining a class attribute for the speaker photo column.

7
00:00:20,823 --> 00:00:22,827
That will look like this.

8
00:00:22,827 --> 00:00:24,779
Notice its data type is a byte array,

9
00:00:24,779 --> 00:00:28,341
which is well suited for binary data in Java.

10
00:00:28,341 --> 00:00:33,322
Next, we'll go ahead and add the getters and setters in IntelliJ,

11
00:00:33,322 --> 00:00:40,733
right-click, and generate those, and save the file.

12
00:00:40,733 --> 00:00:43,708
To get JPA to stream the binary data into this field,

13
00:00:43,708 --> 00:00:47,293
we need to add a couple more annotations.

14
00:00:47,293 --> 00:00:50,797
Import the type class as the org.hibernate .annotations and make

15
00:00:50,797 --> 00:00:54,179
sure that you're Lob class is imported as well,

16
00:00:54,179 --> 00:00:56,330
and let's quickly talk about what these annotations do.

17
00:00:56,330 --> 00:01:00,387
The first annotation is a Lob, and it stands for large object.

18
00:01:00,387 --> 00:01:01,976
Binary data can get really large,

19
00:01:01,976 --> 00:01:05,320
and this annotation helps JPA deal with the larger data.

20
00:01:05,320 --> 00:01:10,380
The second annotation is needed to help Hibernate deal with binary data.

21
00:01:10,380 --> 00:01:11,189
In our case,

22
00:01:11,189 --> 00:01:15,307
Hibernate is the JPA implementation that we're using under the covers.

23
00:01:15,307 --> 00:01:16,508
Without this annotation,

24
00:01:16,508 --> 00:01:20,004
you'd ultimately end up with an exception when JPA queries the data

25
00:01:20,004 --> 00:01:23,750
and tries to push it into the Session instance.

26
00:01:23,750 --> 00:01:27,464
Finally, there's one last piece of configuration needed to get JPA,

27
00:01:27,464 --> 00:01:30,029
Postgres, and binary data all happy.

28
00:01:30,029 --> 00:01:32,744
I'm going to jump back to the application properties file,

29
00:01:32,744 --> 00:01:36,757
which if you remember, is in src, main, resources.

30
00:01:36,757 --> 00:01:37,439
Open that.

31
00:01:37,439 --> 00:01:41,576
I'm going to add a new property that looks like this.

32
00:01:41,576 --> 00:01:44,958
This property is needed so the Postgres JDBC driver can

33
00:01:44,958 --> 00:01:47,936
create a Lob correctly on the Java side.

34
00:01:47,936 --> 00:01:50,032
Again, without this property configuration,

35
00:01:50,032 --> 00:01:52,924
you'll get exceptions when you try to run the application.

36
00:01:52,924 --> 00:01:54,840
A note on binary data,

37
00:01:54,840 --> 00:01:58,309
these little issues can be troublesome when you're working through your app

38
00:01:58,309 --> 00:02:01,836
from scratch and you have not encountered them before.

39
00:02:01,836 --> 00:02:05,512
Hopefully this part of the course gives you enough of a background that

40
00:02:05,512 --> 00:02:09,207
you can get past these problems and have a solid app base to work on

41
00:02:09,207 --> 00:02:11,117
some of your own app needs going forward.

42
00:02:11,117 --> 00:02:19,000
We're finally finished with the JPA entities. Let's go ahead and move up the architectural stack to repositories.

