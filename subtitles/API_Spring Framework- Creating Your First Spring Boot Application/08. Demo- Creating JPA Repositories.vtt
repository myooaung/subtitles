WEBVTT
1
00:00:01.600 --> 00:00:02.964
Once your entities are in place,

2
00:00:02.964 --> 00:00:07.038
you have a couple of choices with how you want to handle your data access layer.

3
00:00:07.038 --> 00:00:10.266
I'm a big fan of Spring Data JPA and all the

4
00:00:10.266 --> 00:00:13.063
benefits it provides out of the box.

5
00:00:13.063 --> 00:00:15.557
That's what we'll go ahead and set up now by creating

6
00:00:15.557 --> 00:00:17.545
some JPA repository interfaces.

7
00:00:17.545 --> 00:00:20.475
Take a minute and jump back to the pom.xml.

8
00:00:20.475 --> 00:00:21.214
If you remember,

9
00:00:21.214 --> 00:00:25.998
we added the Spring Data starter into the POM as one of our dependencies.

10
00:00:25.998 --> 00:00:28.673
This pulls in the libraries we need to work with JPA repos.

11
00:00:28.673 --> 00:00:31.398
Since we started with the session entity first,

12
00:00:31.398 --> 00:00:35.014
I'm going to go ahead and begin by creating the session repository.

13
00:00:35.014 --> 00:00:37.461
This is a slightly different area of the architectural stack,

14
00:00:37.461 --> 00:00:41.853
so I'm going to put that in the package called repositories.

15
00:00:41.853 --> 00:00:44.989
That package is over here by the models.

16
00:00:44.989 --> 00:00:48.436
To add this, I'm going to right-click and say New,

17
00:00:48.436 --> 00:00:49.372
Java Class,

18
00:00:49.372 --> 00:00:54.663
I'm going to select an interface because our JPA repositories are interfaces,

19
00:00:54.663 --> 00:01:00.667
and I'm going to call the interface SessionRepository.

20
00:01:00.667 --> 00:01:02.802
This created a new Java interface.

21
00:01:02.802 --> 00:01:06.450
JPA repositories are almost too easy to set up.

22
00:01:06.450 --> 00:01:10.850
All we have to do is add this to the interface definition.

23
00:01:10.850 --> 00:01:12.396
We want to extend JpaRepository,

24
00:01:12.396 --> 00:01:16.629
and we are going to use Session as our data type,

25
00:01:16.629 --> 00:01:19.519
and Long refers to the primary key.

26
00:01:19.519 --> 00:01:21.643
Go ahead and import the Session class,

27
00:01:21.643 --> 00:01:24.618
and the Session class is the one that we created,

28
00:01:24.618 --> 00:01:28.230
and we'll need to import JpaRepository as well.

29
00:01:28.230 --> 00:01:29.242
And that's it!

30
00:01:29.242 --> 00:01:31.394
We now have Find, Update, Save, Delete,

31
00:01:31.394 --> 00:01:34.307
and a bunch of other operations already set up and

32
00:01:34.307 --> 00:01:38.388
usable for us on our Session JPA class.

33
00:01:38.388 --> 00:01:40.941
Go ahead and pause the video again and create a

34
00:01:40.941 --> 00:01:43.922
repository similar for the Speaker entity.

35
00:01:43.922 --> 00:01:44.680
Once you're done,

36
00:01:44.680 --> 00:01:49.714
restart this clip and compare with the solution I'm about to show.

37
00:01:49.714 --> 00:01:51.519
Okay, here's what I've come up with.

38
00:01:51.519 --> 00:01:53.657
I've added it to the Repositories package,

39
00:01:53.657 --> 00:01:57.382
similar to Session, and it's really similar to Session.

40
00:01:57.382 --> 00:02:02.847
It's just that we've typed the Speaker entity instead of the Session entity.

41
00:02:02.847 --> 00:02:05.883
That's really the main difference other than the interface name.

42
00:02:05.883 --> 00:02:06.348
At this point,

43
00:02:06.348 --> 00:02:16.000
if you are caught up and you have your entities and repositories all wired up, we're ready for the last big effort, and that is creating the API controllers.

