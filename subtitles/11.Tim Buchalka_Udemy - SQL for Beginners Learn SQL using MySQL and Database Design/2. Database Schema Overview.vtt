WEBVTT

00:05.700 --> 00:12.030
So in this video we're going to be looking at the scheme of our system or booking system database.

00:12.030 --> 00:15.120
So this is what a typical database schema looks like.

00:15.210 --> 00:22.650
It's basically a diagram of all the tables in your database and includes the relationships between those

00:22.650 --> 00:23.640
tables.

00:23.800 --> 00:26.850
So you can see for our database that we're going to create.

00:26.880 --> 00:28.440
We have seven tables.

00:28.620 --> 00:31.150
We have films table in the bottom left.

00:31.330 --> 00:38.820
Then we have the screenings table rooms table seats table reserved seat table bookings table.

00:38.850 --> 00:41.270
And then finally Customers table.

00:41.520 --> 00:44.060
So let's have a look at each one of these.

00:44.070 --> 00:50.660
So first let's look at the films table so you can see in the diagram we have free columns in this table.

00:50.700 --> 00:58.680
We have an ID field which is an integer and you can see there's a little golden key by the ID and that

00:58.680 --> 01:00.450
means it's all primary key.

01:00.540 --> 01:04.300
So the ID fields are primary key for the fields to films table.

01:04.800 --> 01:11.300
And then we have a name column and this is going to how the name of the film Savarkar data type.

01:11.880 --> 01:15.720
And you can see a field in green diamond by the name field.

01:15.930 --> 01:22.000
And this means that it's not a foreign key to this column but it does have to not know constrain.

01:22.080 --> 01:30.140
So if food in green diamond or Fillon field in diamond of any color means that it's got not no constraint.

01:30.180 --> 01:34.870
And then finally there's a length minute column and this is an integer.

01:34.890 --> 01:38.060
And this will hold the length of the film in minutes.

01:38.070 --> 01:42.520
So if it was two hours long it would hold a value of 120.

01:42.840 --> 01:47.800
And this is also not know you can see that by the food in green diamond.

01:47.820 --> 01:49.510
Next we have a screening table.

01:49.530 --> 01:50.790
Now this has four columns.

01:50.790 --> 01:54.280
It has a primary key id like normal.

01:54.370 --> 02:02.130
Then we have a film ID and a room ID and you can see this has filled in red diamond next to the film

02:02.130 --> 02:04.090
ID and the remedy.

02:04.230 --> 02:09.300
And this means they have to not know constraint but because they're red It also means they're foreign

02:09.300 --> 02:14.150
keys to columns in other tables.

02:14.160 --> 02:18.580
So the film ID is a foreign key to the ID field in the films table.

02:18.870 --> 02:26.970
And the my day is a foreign key to the ID field in the rooms table and you can see that this table has

02:26.970 --> 02:30.310
a one to many relationship between films.

02:30.330 --> 02:37.320
So one film can have many screenings but obviously one screening can only show one film doesn't make

02:37.320 --> 02:40.330
sense if a screening is showing two films at once.

02:40.860 --> 02:44.940
And also one to many relationship with the room stable.

02:45.150 --> 02:51.690
So one room can show you many screenings throughout the day or throughout the month one screening can

02:51.690 --> 02:54.660
only be shown in one room.

02:55.200 --> 03:02.820
And finally we also have the start time of the screening and that the date time data type and this is

03:02.820 --> 03:07.920
not a primary key but it does have the not no constraints that we have to fill in some data in that

03:07.920 --> 03:09.090
column.

03:09.190 --> 03:10.860
And next we have a Remes table.

03:10.920 --> 03:12.910
Or you could call this an auditorium.

03:13.050 --> 03:19.290
Basically is the room that holds the cinema screen where you go and watch the film and it has a primary

03:19.290 --> 03:24.400
key id call him which is an end and has a name column so the name of the rooms.

03:24.480 --> 03:30.240
So while cinema is actually going to have three rooms with three different names and then we have a

03:30.240 --> 03:31.460
number of seats called him.

03:31.470 --> 03:36.690
So this is the number of seats that each room holds and connected to that we have our seats table which

03:36.690 --> 03:40.040
holds information on seat row and seat number.

03:40.320 --> 03:47.760
So it has a primary key ID for each seat then it has their right to the row of the C A B C D etc. which

03:47.760 --> 03:50.510
is a char data type of length 1.

03:50.610 --> 03:55.110
Then we have a number so the number for each c so we can say row plus number.

03:55.110 --> 04:04.050
So a 6 7 cetera and then it has a foreign key to the room ID to say which room the seat is in and you

04:04.050 --> 04:08.470
can see it as a one to many relationship between the room and the seats table.

04:08.550 --> 04:14.770
And basically this is saying a room can have many seats but a seat can only be in one room obviously.

04:14.820 --> 04:17.260
And unless skip to the customers table now.

04:17.470 --> 04:22.970
And this is going to hold information on all our customers who come to watch films in our cinema and

04:22.990 --> 04:25.700
can see how the first and last name.

04:26.070 --> 04:31.660
But we can see that their first name has diamonds but is not filled in.

04:31.770 --> 04:34.540
And this is because it does not have a not no constraint.

04:34.830 --> 04:40.980
So we can have customers who don't provide us with their first name but you can see that last name does

04:40.980 --> 04:48.270
have a film in green diamond which means we've applied not no constraint to this last name column which

04:48.270 --> 04:55.020
means we have to have that last name and then similarly we have an email which is also has the not no

04:55.020 --> 04:55.580
constraint.

04:55.620 --> 04:58.970
So we have to have that email so we can contact them.

04:58.980 --> 05:06.270
We can advertise to them we can send notifications to them and then we have the stable which has a primary

05:06.270 --> 05:08.780
key ID and it has two more columns.

05:08.850 --> 05:13.650
So this is going to hold information about each booking that a customer makes.

05:13.650 --> 05:19.460
So we have a screening I.D. which is a foreign key to the ID field in the screening table.

05:19.590 --> 05:22.860
So this is going to tell us which screening that booking is for.

05:23.250 --> 05:29.320
And it also has a customer I.D. foreign key to the ID field in the Customers table.

05:29.490 --> 05:32.420
So we know which customer made this booking.

05:32.550 --> 05:38.520
And you can see the bookings table has a one to many relationship between customers and the bookings.

05:38.520 --> 05:44.940
So one customer can make many bookings but a single booking can only be associated with one customer

05:45.150 --> 05:46.610
which makes sense.

05:47.100 --> 05:52.200
And then there's also one to many relationship between the screenings table and the bookings table.

05:52.200 --> 05:59.540
So one screening can have many bookings but one booking can only be associated with one screening.

05:59.550 --> 06:02.610
And then finally we have a reserved seat table.

06:03.030 --> 06:05.370
Now this is like a junction table.

06:05.550 --> 06:09.880
So there's actually a many to many relationship between the seats and the bookings table.

06:10.110 --> 06:17.940
So one seat can show up in many different bookings depending on the screening and one booking can contain

06:17.940 --> 06:18.740
many seats.

06:18.750 --> 06:22.050
So a customer can book two seats at once.

06:22.080 --> 06:28.110
So because bookings and seats have a many to many relationship we need to have a junction table which

06:28.110 --> 06:29.970
is all reserved seat table.

06:29.970 --> 06:37.710
So it's as an I.D. and then it has two foreign keys as a booking ID which is the ID field and the bookings

06:37.710 --> 06:43.020
table and it has a C ID which is the ID field in the seats table.

06:43.140 --> 06:51.450
So let's say a customer made a booking and he booked four seats in one screening then this bookings

06:51.450 --> 06:54.230
table is only going to have one entry for that customer.

06:54.230 --> 07:01.230
One row of data for that customer he booked four seats but there's going to be four entries in the reserved

07:01.230 --> 07:02.230
seat table.

07:02.340 --> 07:08.550
So one entry for each of the seats that the customer booked and you can see obviously there's a one

07:08.550 --> 07:12.200
to many relationship between the bookings table and the reserved seat table.

07:12.360 --> 07:17.000
And there's a one to many relationship between the seat and the reserved seat table.

07:17.220 --> 07:18.900
OK so I think that's enough.

07:18.900 --> 07:21.570
Talking about our database schema.

07:21.570 --> 07:25.500
Now let's get on and actually create the tables in our database.
