WEBVTT

00:04.700 --> 00:08.060
Sonatas take a look correlated queries.

00:08.200 --> 00:15.270
So if you remember from before co-related so queries where the inquiry can run independently of the

00:15.480 --> 00:16.550
query.

00:16.710 --> 00:24.260
So here we have our example from befool for coverlets is so query we have select screening ID customer

00:24.260 --> 00:33.870
ID and then are in a very select count seats ID from reserve see web booking ID Ku's be to ID and then

00:33.870 --> 00:42.840
back to all out of query from bookings be order by screening ID so you can see here in the query we

00:42.840 --> 00:43.980
have bita ID.

00:44.010 --> 00:46.820
So were referring to data in the outer query.

00:47.040 --> 00:50.130
So from bookings be set from this table.

00:50.790 --> 00:58.320
So first time she want to run the outer query on the sign so here I select screening ID custom ID from

00:58.320 --> 01:01.800
bookings and I've ordered that by the screening ID.

01:01.890 --> 01:06.210
So you can see that the outer query for this query here.

01:06.540 --> 01:14.460
So let's run not without the query first and you can see it's return the screening ID on the customer

01:14.460 --> 01:16.720
ID from the bookings table.

01:16.770 --> 01:21.100
And I've ordered it by the screening IDs so we have 1 1 1 2 free x.

01:21.630 --> 01:28.050
So you can see for screening I.D. one we have a booking made by customer for 12 and 16 for a screening

01:28.050 --> 01:33.810
I.D. to have a bookings made by customers to 6 and 18 et cetera et cetera.

01:33.810 --> 01:36.480
So now we can see the results from the outer query.

01:36.510 --> 01:37.900
Let's run the entire set up.

01:37.900 --> 01:45.800
Gary see you can see we have the same two columns from before we have the screening ID and the customer

01:45.800 --> 01:52.260
ID from the bookings table but we also now a third call them we have a count on the seeto ID.

01:52.550 --> 02:01.070
So basically this is saying that for screening ID one customer id full reserve two to two seats and

02:01.130 --> 02:11.030
for screening one customer id 12 hours to see and customer id 16 reserve foresees etc etc. and basically

02:11.030 --> 02:15.650
what is happening is that for every row in the out query.

02:15.920 --> 02:22.990
So for every screening ID and customer id combination in a query is running.

02:23.480 --> 02:28.330
So this in a query is running for a screening ID one plus customer id fool.

02:28.460 --> 02:36.080
A fool is running for screening ID one customer id 12 and counting the number of seats.

02:36.110 --> 02:44.290
So the seat ID counting the seat ID for screening ID one on customer ID for screening ID one customer

02:44.300 --> 02:45.780
12 et cetera et cetera.

02:46.010 --> 02:53.420
So this iniquity is running multiple times its running for every single row that was returned by the

02:53.480 --> 02:55.100
outer query.

02:55.160 --> 02:58.940
So this is what a correlated subquery looks like.

02:58.940 --> 03:07.040
We know that this is a correlated subquery because if we try and run this inquiry independently of the

03:07.040 --> 03:09.500
outer query we're going to get an error.

03:09.500 --> 03:12.290
So let's run it and see what happens.

03:12.290 --> 03:19.460
So here we have to in a query select count see ID from reserve see where booking ID is equal to B to

03:19.460 --> 03:22.340
ID.

03:22.340 --> 03:23.130
So let's run.

03:23.270 --> 03:24.450
And you can see we got an error.

03:24.470 --> 03:28.630
We're getting an in column B to ID and we're close.

03:28.640 --> 03:32.530
So basically it doesn't know what this b ID is.

03:32.660 --> 03:35.010
It doesn't know where this B Table is.

03:35.010 --> 03:42.110
It doesn't know what his ID column is and that's because we've referenced the bookings table as be in

03:42.110 --> 03:43.350
the outer query.

03:43.430 --> 03:49.370
So when we run a query we need this outer query to know what B stands for.

03:49.850 --> 03:54.730
So the query can't run independently of the outer query so it's a co-related.

03:54.730 --> 04:01.320
So Gary you see we get results when we run the whole query.

04:02.300 --> 04:08.930
And basically this way I close here is making the link between booking ID field in the reserved seat

04:08.930 --> 04:13.250
table and the ID field in the bookings table.

04:13.280 --> 04:20.870
So every time there's a match between these two is going to run this in a query we know from before

04:20.870 --> 04:27.290
that the booking ID column in the reserved seat table is a foreign key to the ID field in the bookings

04:27.290 --> 04:28.480
table.

04:29.060 --> 04:31.650
OK so that's it for a correlated subquery.

04:31.730 --> 04:37.280
Hopefully you can see the difference between non correlated queries and correlated queries from these

04:37.280 --> 04:38.300
examples.

04:38.600 --> 04:40.790
And now let's move on to the exercise.
