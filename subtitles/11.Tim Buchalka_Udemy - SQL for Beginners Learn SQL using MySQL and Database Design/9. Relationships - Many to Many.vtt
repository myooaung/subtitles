WEBVTT

00:05.160 --> 00:06.180
Now let's take a look at.

00:06.180 --> 00:08.010
Many to Many relationships.

00:08.130 --> 00:13.560
Now many to many relationships are the most complicated type of relationships in a database and they're

00:13.560 --> 00:18.390
also one of the most common almost as common as one to many relationships.

00:18.390 --> 00:20.390
So let's take a look now.

00:20.490 --> 00:26.040
So what is a many to many relationship with a many to many relationship is where two tables can have

00:26.040 --> 00:28.920
many instances of each other.

00:28.920 --> 00:34.620
So if we take a look at our example here between products and orders table these two tables actually

00:34.620 --> 00:40.290
share many to many relationship so products can appear in more than one order.

00:40.290 --> 00:44.070
So two separate customers can pay for the same product.

00:44.070 --> 00:51.210
So let's say for coffee it can show up multiple times in the Orders table because many people are ordering

00:51.210 --> 00:53.070
filled coffees.

00:53.070 --> 00:56.970
But at the same time one order can contain multiple products.

00:56.970 --> 01:03.040
So if a customer came into a coffee store they could order food to coffee and a cappuccino.

01:03.570 --> 01:06.040
Or as many products as they wanted.

01:06.060 --> 01:09.890
So these two tables share many to many relationship.

01:09.900 --> 01:13.900
Now how do we represent this relationship between these two tables.

01:13.900 --> 01:18.720
Actually it's a little bit more complicated than one to many relationships.

01:18.720 --> 01:23.330
So obviously we don't want to contain any order information in our products table.

01:23.370 --> 01:25.510
We just want product information.

01:25.710 --> 01:32.450
But at the same time if one order book contain multiple products we can store this in the Orders table

01:32.460 --> 01:35.520
either because we don't know how many rows.

01:35.540 --> 01:38.620
Each order is going to take up.

01:38.670 --> 01:45.150
So what we actually have to do is we have to introduce a third table and this third table is known as

01:45.150 --> 01:46.510
a junction table.

01:46.770 --> 01:53.680
And here we've called it all the details and it contains a foreign key to the two other tables.

01:53.710 --> 02:01.260
So it contains the product ID as a foreign key and it contains an order ID as a foreign key and each

02:01.260 --> 02:08.070
row in the Order Details table represents an item of a particular order.

02:08.100 --> 02:15.390
So every time a customer comes into the store and places an order that will be represented in one row

02:15.480 --> 02:16.900
in the Orders table.

02:17.190 --> 02:24.630
But if they were to order multiple items they should be represented as multiple rows in the Order Details

02:24.630 --> 02:25.770
table.

02:25.800 --> 02:32.550
So if a customer came in and ordered a filter coffee and a cappuccino we would need to insert one row

02:32.940 --> 02:40.050
in the Orders table with an order ID but we would need to insert two rows into the Order Details table

02:40.290 --> 02:42.090
for each item ordered.

02:42.090 --> 02:49.680
So for the coffee and for the cappuccino and each of these rows for the coffee and the cappuccino would

02:49.680 --> 02:56.250
contain the same order ID in the Order Details table and we can see here that we have a one to many

02:56.250 --> 03:00.190
relationship between the products table and the Order Details table.

03:00.420 --> 03:09.420
So each row in the Order Details table can only be associated with one product but obviously one product

03:09.450 --> 03:13.160
can turn up in multiple rows in the Order Details table.

03:13.620 --> 03:18.690
And we also have a one to many relationship between the orders table and the Order Details table.

03:18.930 --> 03:27.090
So each row in the Order Details table only represents one order but obviously if a customer comes in

03:27.150 --> 03:35.350
and orders multiple products then there be multiple rows in the Order Details table for that order.

03:35.370 --> 03:39.360
So this is how we represent many to many relationships in a database.

03:39.360 --> 03:45.630
We create a third table called a junction table and the junction table has a one to many relationship

03:45.630 --> 03:47.930
between the other two tables.

03:48.270 --> 03:53.700
So this is a little bit more complicated than the one so many are the one to one relationships but it's

03:53.700 --> 04:00.000
important to know because many to many relationships are fairly common in databases.
