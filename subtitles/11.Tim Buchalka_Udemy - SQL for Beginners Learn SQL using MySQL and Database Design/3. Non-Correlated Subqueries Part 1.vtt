WEBVTT

00:05.350 --> 00:11.780
A case let's take a look non correlated queries in the WHERE clause.

00:12.030 --> 00:15.050
So you can see we have our example from the previous video.

00:15.090 --> 00:23.870
We have select Id start time from screenings where film ID is in selects ID from films where length

00:23.880 --> 00:30.030
man is greater than 120 so we have all in a query and then we have to query.

00:30.030 --> 00:38.850
So let's run this query and you can see its returned ID and start time from the screenings table where

00:38.910 --> 00:42.470
the film ID is in this in a query.

00:42.570 --> 00:48.840
So the outer query has taken the results that were produced from the in a query and has used them to

00:48.840 --> 00:52.250
select the ID and start time from the screenings table.

00:52.740 --> 00:58.650
So for non-call correlated queries we can run the query independently.

00:58.650 --> 00:59.970
So let's do that now.

01:00.240 --> 01:03.270
So let's copy and paste this in a query.

01:05.260 --> 01:14.000
And tidy up a bit and with a semi-colon and select ID from films where length is greater than one hundred

01:14.000 --> 01:15.040
and twenty.

01:15.170 --> 01:17.960
So this is all in a query in this query.

01:18.020 --> 01:26.480
I'm going to run independently now and you can see returns all the IDs from the films table where length

01:26.480 --> 01:28.870
man is greater than 120.

01:29.300 --> 01:34.470
So the query has returned to Foom ID 1 3 8 and 11.

01:34.550 --> 01:42.630
So the outer query selects Id start time from screenings with film ID is in is taking these are zos.

01:42.680 --> 01:51.500
So this query here is the same as running select Id start time from screenings where film ID is in 1

01:51.740 --> 01:54.200
3 8 and 11.

01:54.260 --> 02:02.930
So when we run this query we can see its returned ID and start time from screenings where film ID is

02:02.930 --> 02:05.140
in 1 3 8 and 11.

02:05.180 --> 02:07.560
So this is well known correlated subquery.

02:07.610 --> 02:10.650
Do when you use them in where close.

02:11.030 --> 02:14.770
And now this right so query in those wet clothes from scratch.

02:14.990 --> 02:16.400
So here we have two tables.

02:16.400 --> 02:22.450
We have select staff and customers and select stuff from bookings so that select stuff from customers.

02:22.660 --> 02:28.730
And basically what I want to do is I want to return the first name the last name on the email from the

02:28.730 --> 02:36.740
customers table but I want to return them where the screening ID from the bookings table is equal to

02:36.740 --> 02:37.790
1.

02:37.910 --> 02:38.860
So less ROI.

02:38.960 --> 02:40.820
So query for this.

02:40.820 --> 02:55.790
So in the next time you can Rice select its first name last name and email from customers and then you

02:55.790 --> 02:59.110
can say where ID.

02:59.120 --> 03:06.750
So the ID field in the Customers table is in and then we can write in a query.

03:06.890 --> 03:14.520
So we want to select the customer ID from the bookings table.

03:14.720 --> 03:23.980
So select customer ID from bookings and then we want to say where the screening ID is equal to 1.

03:23.990 --> 03:30.550
So the screening ID Decoud to 1 and then we can run this query.

03:30.560 --> 03:39.960
So we have our query in a query so we can see these are the three customers that made a booking for

03:39.960 --> 03:41.520
a screening ID one.

03:41.540 --> 03:44.420
So we have John Smith and his email address.

03:44.420 --> 03:47.990
We have cherry wine and we have Simon Davis.

03:48.140 --> 03:52.350
So again let's run in a query on its own.

03:52.580 --> 04:03.800
So without the equerry and with a semi kodo and you can see it returns three customer IDs for 12 and

04:03.800 --> 04:04.790
16.

04:05.270 --> 04:12.680
So it returns free values for the select first name last name and email from customers where ID is in

04:13.010 --> 04:15.430
for 12 and 16.

04:15.470 --> 04:21.290
So when we run the whole query together we get the first name the last name and email for Customer ID

04:21.290 --> 04:23.190
for 12 and 16.

04:23.470 --> 04:29.780
And basically we can do this because here we've got the ID field in the Customers table and we have

04:29.790 --> 04:36.470
the customer ID in the booking table and if you remember the customer ID and the bookings table is a

04:36.470 --> 04:40.330
foreign key to the ID field and the Customers table.

04:40.460 --> 04:47.120
So we can make the link between the two tables in this query and its the same for the film ID and the

04:47.120 --> 04:51.860
screenings table and the ID field in the films table.

04:51.860 --> 04:57.230
So the film ID and the screenings table is a foreign key to the ID field in the films table.

04:57.230 --> 05:04.790
So again we can make this link and use some query to link the two tables case to us for the correlated

05:05.020 --> 05:07.280
queries in the WHERE clause.

05:07.280 --> 05:10.880
Now let's take a look at nung correlate queries in the from.
