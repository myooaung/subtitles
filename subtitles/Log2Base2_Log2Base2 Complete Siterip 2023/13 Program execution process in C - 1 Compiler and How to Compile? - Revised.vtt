WEBVTT

1
00:00:00.540 --> 00:00:01.290
Hi friends 

2
00:00:01.460 --> 00:00:05.460
In this video we are going to learn about the compiler and the need of compiling.

3
00:00:10.460 --> 00:00:12.680
So a compiler is actually a 

4
00:00:12.680 --> 00:00:16.200
software programme which translates the source code into machine level 

5
00:00:16.200 --> 00:00:17.040
assembly code.

6
00:00:17.260 --> 00:00:19.799
So the source code means it will be written in some 

7
00:00:19.800 --> 00:00:23.349
high level language like C where the Assembly code is 

8
00:00:23.350 --> 00:00:27.390
the low level programming instructions which are closely associated with 

9
00:00:27.390 --> 00:00:28.250
the machine code. 

10
00:00:28.540 --> 00:00:31.640
So the main function of the compiler is to translate 

11
00:00:31.640 --> 00:00:35.739
the high level programming statements into low level programming instructions 

12
00:00:36.010 --> 00:00:39.990
And apart from that another important function is error detection 

13
00:00:40.190 --> 00:00:42.610
So see here we have a C programme written by 

14
00:00:42.610 --> 00:00:43.390
a user, 

15
00:00:43.480 --> 00:00:45.530
and as we said this is the source code.

16
00:00:45.650 --> 00:00:48.490
And if you see there is a syntax error here  

17
00:00:48.490 --> 00:00:51.450
the user must've forgotten to add the semi colon 

18
00:00:51.540 --> 00:00:54.279
at the end of printf statement and if the syntax

19
00:00:54.280 --> 00:00:57.190
is not right then the programme will not be executed

20
00:00:57.200 --> 00:00:58.430
as we expected. 

21
00:00:58.590 --> 00:01:02.099
So the compiler can help us detecting such errors and 

22
00:01:02.100 --> 00:01:03.300
producing alerts. 

23
00:01:03.480 --> 00:01:06.009
So that's another function of compiler.

24
00:01:06.220 --> 00:01:09.080
So a compiler can detect all the errors made by 

25
00:01:09.080 --> 00:01:13.450
the user and also report it as error message or alert. 

26
00:01:14.440 --> 00:01:17.470
Now let us discuss about the need of compiling. 

27
00:01:17.530 --> 00:01:20.399
So we have The high level languages like C, C++

28
00:01:20.400 --> 00:01:22.580
and all to write programmes. 

29
00:01:22.750 --> 00:01:25.860
It is quite easy for us to read write and understand it.

30
00:01:25.860 --> 00:01:27.729
but what about the machines 

31
00:01:27.740 --> 00:01:29.610
It cannot be understood by the machine.

32
00:01:29.610 --> 00:01:32.300
The machine only knows machine level language 

33
00:01:33.040 --> 00:01:35.640
So if we write the programme using these high level 

34
00:01:35.640 --> 00:01:38.979
languages the machine will not be able to understand it 

35
00:01:38.990 --> 00:01:41.600
So in favour of machines can we write programmes in 

36
00:01:41.600 --> 00:01:44.620
machine language? Is it possible? it is possible. But it 

37
00:01:44.620 --> 00:01:45.980
is not really practical. 

38
00:01:45.990 --> 00:01:49.089
It will be extremely difficult to understand. For a single 

39
00:01:49.090 --> 00:01:51.830
statement or expression you might want to write a very 

40
00:01:51.830 --> 00:01:56.839
large code. So it is not favourable for humans, 

41
00:01:56.840 --> 00:01:58.520
so there is this dilemma 

42
00:01:58.530 --> 00:02:02.000
if we choose high level language humans can understand but 

43
00:02:02.000 --> 00:02:03.000
machines cannot. 

44
00:02:03.230 --> 00:02:06.700
If we choose machine level language machines can understand but 

45
00:02:06.700 --> 00:02:07.699
humans cannot.

46
00:02:08.080 --> 00:02:11.000
So to solve this problem we can use a compiler 

47
00:02:11.000 --> 00:02:14.429
which will translate this high level language to machine level 

48
00:02:14.430 --> 00:02:15.050
language. 

49
00:02:17.140 --> 00:02:19.900
Now let us see how to compile a C programme 

50
00:02:19.900 --> 00:02:20.580
in Linux. 

51
00:02:20.680 --> 00:02:23.470
So the first step is to open the terminal and 

52
00:02:23.470 --> 00:02:25.980
now we need to create the C file and for 

53
00:02:25.980 --> 00:02:30.170
that write vim program.c

54
00:02:30.340 --> 00:02:33.720
so ".c" is the file extension here and vim is the

55
00:02:33.720 --> 00:02:35.090
 text editor here 

56
00:02:35.340 --> 00:02:38.250
So now the C file is created and opened

57
00:02:38.340 --> 00:02:40.990
Now you want to write the code. So press i 

58
00:02:41.150 --> 00:02:43.780
to enter the insert mode and now you can write 

59
00:02:43.780 --> 00:02:44.210
the code 

60
00:02:44.690 --> 00:02:47.900
And after you complete writing the code you have to 

61
00:02:47.900 --> 00:02:48.570
save it 

62
00:02:48.660 --> 00:02:52.310
And for that press escape and then : and wq

63
00:02:52.310 --> 00:02:55.100
 Now it will be saved and we want to compile 

64
00:02:55.100 --> 00:02:59.609
the programme now. for that write gcc program.c

65
00:02:59.610 --> 00:03:00.250
 

66
00:03:00.440 --> 00:03:03.019
So if you have any error in your program it 

67
00:03:03.020 --> 00:03:04.720
will be reported at this time 

68
00:03:04.970 --> 00:03:07.590
And if you have no error then you can run 

69
00:03:07.590 --> 00:03:11.440
the program by writing ./a.out and 

70
00:03:11.440 --> 00:03:13.250
the output will be shown. 

71
00:03:14.040 --> 00:03:16.339
So that's all and thank you for watching this video 

