WEBVTT

1
00:00:00.000 --> 00:00:02.800
if the time complexity of 2T(n-1)+1

2
00:00:02.800 --> 00:00:05.650
 2 raised to n then what will be 

3
00:00:05.650 --> 00:00:09.050
the time complexity of three T minus one plus one 

4
00:00:09.710 --> 00:00:12.260
It's three raised to n right? Yes, 3 raised to n 

5
00:00:12.260 --> 00:00:13.780
is the right answer

6
00:00:14.160 --> 00:00:17.290
Similarly if it is 4T(n-1) + 1

7
00:00:17.290 --> 00:00:20.150
 then the answer is 4 raised to n 

8
00:00:20.160 --> 00:00:23.490
It's that simple. Now what if we have some other 

9
00:00:23.490 --> 00:00:26.170
time value in the second part like 2T(n-1) + n

10
00:00:26.180 --> 00:00:30.210
 as we have discussed already 

11
00:00:30.300 --> 00:00:32.840
to solve this we just need to multiply 

12
00:00:32.840 --> 00:00:35.790
The second part value with the result of  

13
00:00:35.790 --> 00:00:38.880
2T(n-1) and 2T(n-1) 

14
00:00:38.880 --> 00:00:42.620
 is the time complexity 2^n so 

15
00:00:42.620 --> 00:00:45.950
multiplying n with 2^n and the answer 

16
00:00:45.950 --> 00:00:48.150
is n*2^n 

17
00:00:48.160 --> 00:00:48.920
That's it. 

18
00:00:49.220 --> 00:00:52.650
So in general if the recurrence relation is 

19
00:00:52.660 --> 00:00:56.290
T(n) equal to kT(n-1) + x

20
00:00:56.580 --> 00:01:00.650
then the answer is O(k^n * x) 

21
00:01:01.310 --> 00:01:04.500
Now one question, will the same rule will apply for 

22
00:01:04.500 --> 00:01:06.590
2T(n/2) + 1

23
00:01:06.800 --> 00:01:10.110
No it won't. because T(n/2) is 

24
00:01:10.110 --> 00:01:13.920
the recurrence relation of dividing function and  

25
00:01:13.920 --> 00:01:17.720
T(n-1) is the recurrence relation of  decreasing function. Hence this 

26
00:01:17.720 --> 00:01:21.120
formula won't work for a recurrence relation of dividing functions 

27
00:01:21.470 --> 00:01:24.340
Let us learned more about that recurrence relation of dividing 

28
00:01:24.340 --> 00:01:26.130
functions in the coming videos. 

