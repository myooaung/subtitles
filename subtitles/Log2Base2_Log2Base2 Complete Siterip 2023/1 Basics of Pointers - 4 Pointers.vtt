WEBVTT

1
00:00:01.040 --> 00:00:01.700
hi friends 

2
00:00:01.710 --> 00:00:04.090
In this video we are going to discuss about single 

3
00:00:04.090 --> 00:00:04.850
pointers 

4
00:00:12.040 --> 00:00:15.000
So what is a pointer? A pointer is basically a 

5
00:00:15.000 --> 00:00:17.990
variable but it stores the address of other variables 

6
00:00:18.110 --> 00:00:20.400
And if a pointer is storing the address of an 

7
00:00:20.400 --> 00:00:22.790
integer variable, we can call it an integer

8
00:00:22.790 --> 00:00:23.390
Pointer 

9
00:00:23.540 --> 00:00:26.250
Similarly if it is storing the address of a character 

10
00:00:26.250 --> 00:00:28.550
variable, we can call it a character pointer 

11
00:00:29.040 --> 00:00:30.510
Now consider the C code.

12
00:00:30.510 --> 00:00:33.660
First we have an integer variable declaration for a and 

13
00:00:33.660 --> 00:00:34.950
is initialised to 10 

14
00:00:35.440 --> 00:00:38.980
So what really happens in the background? Computer allocates four 

15
00:00:38.980 --> 00:00:42.630
bytes of memory for a and value 10 is stored in it 

16
00:00:42.670 --> 00:00:45.860
and suppose the base address of this block is 1024 

17
00:00:45.860 --> 00:00:48.440
Next we have int * ptr

18
00:00:48.440 --> 00:00:50.830
Which means ptr is an integer Pointer 

19
00:00:50.980 --> 00:00:53.450
The * symbol is used for pointers 

20
00:00:53.740 --> 00:00:55.870
So ptr can store the address of an 

21
00:00:55.870 --> 00:00:58.930
integer variable and we are assigning the value 

22
00:00:58.930 --> 00:01:02.500
&a that is address of a which is 1024 

23
00:01:02.510 --> 00:01:05.620
So ptr will store 1024 and refers to a

24
00:01:05.630 --> 00:01:08.699
Now as we know ptr is actually a variable 

25
00:01:08.700 --> 00:01:11.740
And suppose it is created at address 1000 so we 

26
00:01:11.740 --> 00:01:13.790
can get this address using 

27
00:01:13.790 --> 00:01:14.350
&ptr

28
00:01:15.040 --> 00:01:16.780
Now we have some print statements 

29
00:01:16.780 --> 00:01:19.360
First of all we're printing value of a equal to

30
00:01:19.360 --> 00:01:21.670
 and prints the value of a which is 10 

31
00:01:22.040 --> 00:01:24.850
Next we're printing value stored at ptr equal to 

32
00:01:24.850 --> 00:01:26.600
and prints the value of *ptr

33
00:01:27.000 --> 00:01:28.670
So what is this *ptr?

34
00:01:28.790 --> 00:01:32.119
So we have already learnt &variable which will 

35
00:01:32.120 --> 00:01:34.800
give the address of a variable, just like that 

36
00:01:34.810 --> 00:01:37.740
If we write * followed by some address it will 

37
00:01:37.740 --> 00:01:39.780
give the value at that address 

38
00:01:40.040 --> 00:01:42.740
Here we have *ptr and we have 

39
00:01:42.740 --> 00:01:44.470
ptr=1024

40
00:01:44.550 --> 00:01:47.910
So *ptr= *1024 

41
00:01:47.920 --> 00:01:51.399
So it will give the value stored at address 1024 

42
00:01:51.410 --> 00:01:53.880
and we will get 10 printed which is the value 

43
00:01:53.880 --> 00:01:55.250
at 1024 

44
00:01:55.940 --> 00:01:58.580
Next we have address of a equal to &a

45
00:01:58.910 --> 00:02:01.500
So it will print the address of variable a which 

46
00:02:01.500 --> 00:02:02.800
is 1024 

47
00:02:03.540 --> 00:02:07.160
Next we have ptr points to address equal to ptr 

48
00:02:07.300 --> 00:02:11.100
So ptr is a pointer but it's actually variable also. Right? 

49
00:02:11.180 --> 00:02:13.160
So what will you get if you write the name 

50
00:02:13.160 --> 00:02:15.980
of variable? you will get the value stored in it. Right? 

51
00:02:16.120 --> 00:02:19.429
So here we have ptr which will return the value 

52
00:02:19.430 --> 00:02:22.740
stored in it which is address 1024. so it will 

53
00:02:22.740 --> 00:02:25.369
be printed. Next we have address of ptr 

54
00:02:25.370 --> 00:02:26.880
equal to &ptr

55
00:02:27.040 --> 00:02:29.460
So it will print address of ptr which is 

56
00:02:29.460 --> 00:02:32.609
1000. So let us quickly summarise all these points 

57
00:02:32.620 --> 00:02:35.340
If you write the variable name be it a normal variable 

58
00:02:35.350 --> 00:02:37.809
or a pointer, it will return the value stored in 

59
00:02:37.810 --> 00:02:38.060
it 

60
00:02:38.120 --> 00:02:40.880
And if you write &variable name It will 

61
00:02:40.880 --> 00:02:42.770
return the address of that variable 

62
00:02:42.940 --> 00:02:45.829
And finally if you write * followed by an address 

63
00:02:45.840 --> 00:02:48.649
it will return the value stored at that address 

64
00:02:49.340 --> 00:02:51.630
So that's all and thank you for watching this video 

