WEBVTT

1
00:00:00.000 --> 00:00:02.550
So to find the smallest sub array with given sum,

2
00:00:02.550 --> 00:00:03.060


3
00:00:03.210 --> 00:00:04.560
Let us write a function

4
00:00:04.560 --> 00:00:08.600
Small length subarray sum by passing the array arr, 

5
00:00:08.900 --> 00:00:12.840
It's size n, and they given sum S and

6
00:00:12.840 --> 00:00:15.710
it will return an integer which will be the length of 

7
00:00:15.720 --> 00:00:19.900
the smaller subarray with given sum. Next declare an iterating

8
00:00:19.900 --> 00:00:20.280


9
00:00:20.280 --> 00:00:25.050
variable i and window starting variable wstart and initialise 

10
00:00:25.060 --> 00:00:28.640
it to 0 and then declare a variable to store the 

11
00:00:28.640 --> 00:00:32.250
length and initialise it to the maximum integer value 

12
00:00:32.540 --> 00:00:35.440
so write len equal to int max 

13
00:00:35.940 --> 00:00:40.240
And whenever we find a sub array with minimal length 

14
00:00:40.250 --> 00:00:42.250
we can update this variable 

15
00:00:43.240 --> 00:00:47.330
Here int max is a constant which holds the maximum 

16
00:00:47.330 --> 00:00:48.980
value of variable type int. 

17
00:00:49.840 --> 00:00:53.490
To use int max we need to include limits.h

18
00:00:53.500 --> 00:00:57.550
 library and then to store the subsum value 

19
00:00:57.560 --> 00:01:02.530
declare a variable subsum and initialise it to 0. 

20
00:01:02.540 --> 00:01:05.020
Now we need to grow the window until the subsum

21
00:01:05.020 --> 00:01:07.570
value is greater than or equal to s. 

22
00:01:08.140 --> 00:01:11.820
So write a for loop from i equal to zero, i less 

23
00:01:11.820 --> 00:01:16.310
than n and inside it add the values to subsum

24
00:01:16.560 --> 00:01:20.810
that is subsum += array[i] 

25
00:01:20.810 --> 00:01:24.050
This loop will add all the array values to subsum 

26
00:01:24.540 --> 00:01:27.330
But once the subsum value is greater than or 

27
00:01:27.340 --> 00:01:30.800
equal to s, we need to find the window length 

28
00:01:30.810 --> 00:01:31.850
and update it. 

29
00:01:32.440 --> 00:01:35.440
Once it is done, we need to shrink the current 

30
00:01:35.440 --> 00:01:38.850
window and check whether we can achieve the result in 

31
00:01:38.850 --> 00:01:39.750
minimal length. 

32
00:01:40.240 --> 00:01:44.210
So write a while loop while subsum greater than or equal to S,

33
00:01:44.210 --> 00:01:46.920
and inside it 

34
00:01:47.110 --> 00:01:49.950
We need to calculate the current window length 

35
00:01:50.440 --> 00:01:54.460
We can easily calculate the current window length by subtracting 

36
00:01:54.470 --> 00:01:56.450
wstart from i value 

37
00:01:57.040 --> 00:02:00.820
For example if i is in the second index and 

38
00:02:00.820 --> 00:02:05.230
wstart is in zero index the window size will be 

39
00:02:05.370 --> 00:02:10.240
2-0 which is 2. For array calculation 

40
00:02:10.250 --> 00:02:13.780
It's two. But in general the window length will be 3

41
00:02:13.780 --> 00:02:16.750
So we need to add one to it 

42
00:02:17.540 --> 00:02:21.860
So to find current window length write int current window size

43
00:02:21.860 --> 00:02:26.250
 equal to i- wstart + 1

44
00:02:26.940 --> 00:02:30.660
Once we find the current window length check whether it 

45
00:02:30.660 --> 00:02:32.750
is smaller than the previous length 

46
00:02:33.140 --> 00:02:37.600
If yes, update the length. So write if current window 

47
00:02:37.600 --> 00:02:42.150
size less than len, len equal to current window size 

48
00:02:42.740 --> 00:02:45.740
After that, we need to shrink the window and check 

49
00:02:45.750 --> 00:02:49.750
whether we can achieve the same result with minimal elements 

50
00:02:50.140 --> 00:02:53.390
So subtract the first element from the window.

51
00:02:53.390 --> 00:02:58.560
That is subtract array[wstart] from subsum and move 

52
00:02:58.570 --> 00:03:01.380
the window starting point by one position to right.

53
00:03:01.380 --> 00:03:05.610
So once subsum value greater than or equal to S

54
00:03:05.610 --> 00:03:09.120
this while loop will find the current window 

55
00:03:09.120 --> 00:03:10.550
length and update it. 

56
00:03:11.040 --> 00:03:13.770
And also it will shrink the current window till the 

57
00:03:13.770 --> 00:03:16.750
subsum value is greater than and or equal to S 

58
00:03:17.240 --> 00:03:20.670
Similarly it will process all the remaining elements 

59
00:03:20.980 --> 00:03:24.920
Finally the variable len will hold the smallest sub array 

60
00:03:24.920 --> 00:03:28.480
length whose sum is greater than or equal to s 

61
00:03:29.040 --> 00:03:31.930
If there is no such subarray, the value of 

62
00:03:31.940 --> 00:03:34.330
len will always be int max.

63
00:03:34.640 --> 00:03:37.940
So after the execution of for loop, if the value 

64
00:03:37.940 --> 00:03:41.550
of len is still int max, we need to return zero. Otherwise we can return the actual length. 

