WEBVTT

1
00:00:00.240 --> 00:00:01.089
Hello friends 

2
00:00:01.140 --> 00:00:04.210
In this video we are going to learn the relationship 

3
00:00:04.210 --> 00:00:06.810
between 2D array and pointers 

4
00:00:12.540 --> 00:00:16.100
Let us take an example of three by three 2 dimensional 

5
00:00:16.100 --> 00:00:16.440
array.

6
00:00:16.840 --> 00:00:19.960
The base address of this array arr is 1000 and its 

7
00:00:19.960 --> 00:00:23.750
memory address is an arithmetic progression with common difference of 

8
00:00:23.750 --> 00:00:24.200
four 

9
00:00:24.210 --> 00:00:27.340
As this is an integer array and size of an integer 

10
00:00:27.350 --> 00:00:28.490
is 4. Here 

11
00:00:28.500 --> 00:00:32.190
address of array, that is &arr is a pointer

12
00:00:32.190 --> 00:00:33.510
to the whole 2D array

13
00:00:33.530 --> 00:00:36.720
Here it is a three by three array. 

14
00:00:36.720 --> 00:00:39.650
So &arr is a pointer to the whole three by 

15
00:00:39.660 --> 00:00:42.540
three array and we can denote &arr

16
00:00:42.580 --> 00:00:46.010
as a pointer of type (int*)[3][3]

17
00:00:46.020 --> 00:00:47.800
It simply says

18
00:00:47.810 --> 00:00:50.280
&arr is a pointer to a three by three  

19
00:00:50.280 --> 00:00:52.890
integer array. So the base address of the 2D array 

20
00:00:52.900 --> 00:00:53.620
is 1000 

21
00:00:53.660 --> 00:00:56.820
So &arr value will be 1000 and what will 

22
00:00:56.820 --> 00:01:00.430
be the value of &arr+1? If we 

23
00:01:00.430 --> 00:01:02.460
move a single integer pointer 

24
00:01:02.470 --> 00:01:05.380
It will point to the next variable's memory address. But 

25
00:01:05.380 --> 00:01:08.640
here &arr points the whole 3 by 3 

26
00:01:08.650 --> 00:01:08.940
2D array

27
00:01:08.950 --> 00:01:11.610
So if we move &arr by one 

28
00:01:11.610 --> 00:01:13.080
position that is 

29
00:01:13.080 --> 00:01:14.500
&arr+1

30
00:01:14.540 --> 00:01:17.050
It will point to the next three by three 2D

31
00:01:17.050 --> 00:01:20.280
block. That is a three by three block. 

32
00:01:20.440 --> 00:01:23.070
So the address of next three by three 2D 

33
00:01:23.070 --> 00:01:25.649
block is 1036 

34
00:01:26.040 --> 00:01:28.870
So &arr+1 value will 

35
00:01:28.870 --> 00:01:30.240
be 1036 

36
00:01:30.250 --> 00:01:33.760
Now let us understand about arr. arr is a pointer to 

37
00:01:33.760 --> 00:01:38.100
the first 1D array. here 1D array has three 

38
00:01:38.110 --> 00:01:42.369
elements, so arr is a pointer of type

39
00:01:42.380 --> 00:01:46.220
(int*)[3] which means arr is a pointer which 

40
00:01:46.220 --> 00:01:49.050
points to an array of three integers 

41
00:01:49.060 --> 00:01:51.540
So the first row's base address will be stored in 

42
00:01:51.550 --> 00:01:52.110
arr 

43
00:01:52.480 --> 00:01:55.160
And here first row's base address is 1000 

44
00:01:55.160 --> 00:01:57.160
So arr value will be 1000 

45
00:01:57.170 --> 00:02:00.270
And since arr is a row pointer if we move 

46
00:02:00.280 --> 00:02:03.320
arr by one position it will point to the next 

47
00:02:03.330 --> 00:02:04.440
one dimensional row 

48
00:02:04.450 --> 00:02:07.460
So what will be arr+1?  

49
00:02:07.460 --> 00:02:09.619
It will point to the second row of the 2D

50
00:02:09.620 --> 00:02:12.370
array. So arr+1 will be the base 

51
00:02:12.370 --> 00:02:15.190
address of the second row, that is 1012.

52
00:02:15.200 --> 00:02:19.089
Similarly arr+2 will be pointing to third row and 

53
00:02:19.090 --> 00:02:21.580
will have the address 1024 

54
00:02:21.590 --> 00:02:23.850
Let us understand about *arr.

55
00:02:24.940 --> 00:02:28.190
*arr will point the first element of the 2D array

56
00:02:28.200 --> 00:02:31.210
 and it is a pointer of type (int*) 

57
00:02:31.220 --> 00:02:33.560
as it is a pointer to a single integer

58
00:02:33.570 --> 00:02:34.049
element 

59
00:02:34.050 --> 00:02:37.480
So if we write *arr you will get the 

60
00:02:37.480 --> 00:02:39.859
address of the first element of the 2D array

61
00:02:39.870 --> 00:02:44.090
which is 1000 as *arr is a single element 

62
00:02:44.090 --> 00:02:44.690
pointer 

63
00:02:44.870 --> 00:02:48.120
If we move *arr by one position it will 

64
00:02:48.120 --> 00:02:49.410
point to the next element 

65
00:02:49.410 --> 00:02:52.100
So *arr+1 will be the address of 

66
00:02:52.110 --> 00:02:56.320
next element which is 1004. Similarly *arr+2

67
00:02:56.320 --> 00:02:58.770
will be the address of the next element that 

68
00:02:58.770 --> 00:03:03.420
is 1008. Finally **arr will be the 

69
00:03:03.420 --> 00:03:07.089
value of the first element. Since *arr holds the 

70
00:03:07.100 --> 00:03:08.519
address of the first element 

71
00:03:08.520 --> 00:03:11.460
**arr will give the value stored in the 

72
00:03:11.460 --> 00:03:12.250
first element 

73
00:03:12.260 --> 00:03:15.410
And if we move **arr by one position 

74
00:03:15.600 --> 00:03:19.040
that is **arr+1 the value will 

75
00:03:19.040 --> 00:03:20.270
be incremented by one 

76
00:03:20.270 --> 00:03:23.440
And if the first array element is 10  

77
00:03:23.450 --> 00:03:26.450
**arr+1 will be 11 

78
00:03:26.840 --> 00:03:28.859
Now let us summarise the concept 

79
00:03:29.540 --> 00:03:29.989
Here 

80
00:03:30.000 --> 00:03:33.430
&arr is a 2D array pointer that 

81
00:03:33.430 --> 00:03:38.790
is (int*)[row][col] 

82
00:03:38.790 --> 00:03:41.850
So &arr+1 will point to the next 

83
00:03:41.850 --> 00:03:43.049
two dimensional block 

84
00:03:43.940 --> 00:03:46.690
Next arr is a 1D pointer, that is 

85
00:03:46.690 --> 00:03:48.690
of type (int*)[row] 

86
00:03:49.440 --> 00:03:51.830
So arr+1 will point to the 

87
00:03:51.830 --> 00:03:55.200
next one dimensional array in the two dimensional array

88
00:03:55.200 --> 00:03:59.300
Next *arr is a single element pointer. ie., of type 

89
00:03:59.310 --> 00:04:03.090
(int*) so *arr+1 will point the 

90
00:04:03.090 --> 00:04:04.780
next element in the array

91
00:04:04.780 --> 00:04:08.810
And finally **arr is a value of the 

92
00:04:08.810 --> 00:04:13.250
first element so **arr+1 will increment 

93
00:04:13.250 --> 00:04:15.990
the element value by one. So let us 

94
00:04:15.990 --> 00:04:18.219
Connect this with a real time example 

95
00:04:18.940 --> 00:04:22.120
If we assume this building as a 2D array

96
00:04:22.840 --> 00:04:26.120
and it has four floors and three houses in each 

97
00:04:26.120 --> 00:04:31.409
floor, then &arr will point the entire apartment 

98
00:04:31.600 --> 00:04:36.330
that is it will point Building1 and &arr+1

99
00:04:36.430 --> 00:04:40.109
will point the next apartment that is Building2 

100
00:04:40.120 --> 00:04:44.230
which also has four floors and three houses in 

101
00:04:44.240 --> 00:04:45.900
each floor and &arr+2

102
00:04:45.910 --> 00:04:49.730
will point to the next apartment that 

103
00:04:49.730 --> 00:04:52.990
is building3 and arr will point to the first 

104
00:04:52.990 --> 00:04:53.310
floor 

105
00:04:53.320 --> 00:04:57.280
That is top floor of building1 and arr+1

106
00:04:57.280 --> 00:05:00.500
will point to the next floor and *arr

107
00:05:00.510 --> 00:05:02.900
will point to the first house of this 

108
00:05:02.900 --> 00:05:05.969
First floor and *arr+1 

109
00:05:05.970 --> 00:05:09.080
will point to its next house and so on 

110
00:05:10.140 --> 00:05:13.730
So in a 2D array arr,arr can point 

111
00:05:13.740 --> 00:05:17.320
to the whole 2D array and a single row and 

112
00:05:17.320 --> 00:05:18.750
a single element also. 

