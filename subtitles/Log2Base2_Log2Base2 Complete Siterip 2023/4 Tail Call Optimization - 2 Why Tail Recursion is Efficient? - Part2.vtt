WEBVTT

1
00:00:00.240 --> 00:00:03.750
in this video let us learn how can be optimised 

2
00:00:03.760 --> 00:00:07.050
the factorial recursion Code with Tail Recursion 

3
00:00:07.650 --> 00:00:08.940
Let us take this factorial 

4
00:00:08.940 --> 00:00:13.650
 code here the base case is if n less than 

5
00:00:13.660 --> 00:00:17.310
or equal to one then return one and the Recursive 

6
00:00:17.320 --> 00:00:21.050
call is return n into fact of n minus one 

7
00:00:21.740 --> 00:00:24.370
But this is not a tail Recursive call because the 

8
00:00:24.370 --> 00:00:28.890
statement n  into fact of n minus one execution depends 

9
00:00:28.890 --> 00:00:32.020
on the return value of next to recursive call 

10
00:00:32.150 --> 00:00:35.140
Fact of n minus one So it is not a 

11
00:00:35.150 --> 00:00:36.030
tail Recursive call 

12
00:00:36.740 --> 00:00:39.650
Let us see how these Recursive calls will execute 

13
00:00:40.240 --> 00:00:43.750
If we take n  as five the Recursive calls will 

14
00:00:43.750 --> 00:00:46.550
be fact of five equal to five 

15
00:00:46.550 --> 00:00:50.710
Into fact of four Now fact Of four will expand 

16
00:00:50.720 --> 00:00:53.710
so it will be five into four into fact of 

17
00:00:53.720 --> 00:00:57.780
three and next fact of three will expand as three 

18
00:00:57.790 --> 00:00:59.060
into fact of two 

19
00:00:59.260 --> 00:01:02.550
So we will get five into four into three into 

20
00:01:02.550 --> 00:01:06.240
 two Into fact of one next fact of one 

21
00:01:06.240 --> 00:01:09.530
will expand and we will get five Into four into 

22
00:01:09.540 --> 00:01:11.150
three into two into one 

23
00:01:11.540 --> 00:01:15.880
Now multiplication will take place and first two into one 

24
00:01:15.880 --> 00:01:19.420
will be calculated and it will become five into four 

25
00:01:19.420 --> 00:01:20.750
into three into two 

26
00:01:21.010 --> 00:01:24.320
Next three into two will be calculated and it will 

27
00:01:24.320 --> 00:01:26.620
become five into four into six 

28
00:01:26.970 --> 00:01:30.140
And next four into six will be calculated and we 

29
00:01:30.140 --> 00:01:32.050
will get five into 24 

30
00:01:32.440 --> 00:01:35.250
And finally we will get the result 120 

31
00:01:35.740 --> 00:01:39.290
So for calculating factorial of five this Recursive 

32
00:01:39.290 --> 00:01:41.840
call will consume a lot of memory in the stack 

33
00:01:41.840 --> 00:01:42.350
section 

34
00:01:42.740 --> 00:01:45.610
So what happens if we are calculating factorial of 

35
00:01:45.610 --> 00:01:49.770
1000 Its Recursive calls will expand from fact of 1000 

36
00:01:49.770 --> 00:01:52.910
like this and the result will be computed while the 

37
00:01:52.910 --> 00:01:54.450
recursive calls are returned 

38
00:01:55.040 --> 00:01:58.380
So if we assume every stack call take one unit 

39
00:01:58.380 --> 00:02:01.550
of memory it will take a huge amount of memory 

40
00:02:01.560 --> 00:02:04.550
that is in order of n  in the stacks section 

41
00:02:05.040 --> 00:02:07.750
So it is not an efficient approach in terms of 

42
00:02:07.750 --> 00:02:08.550
computation 

43
00:02:08.940 --> 00:02:12.280
So what will be the better solution for this If 

44
00:02:12.280 --> 00:02:15.580
we can write factorial function as tail Recursion 

45
00:02:15.750 --> 00:02:18.830
it will be optimised by the compiler and it will 

46
00:02:18.840 --> 00:02:21.030
work like a simple looping statement 

47
00:02:21.390 --> 00:02:24.750
That way we can optimise a lot of memory usage 

48
00:02:25.240 --> 00:02:28.400
for that we need to convert this factorial function 

49
00:02:28.400 --> 00:02:31.220
using tail recursion in this function 

50
00:02:31.230 --> 00:02:35.420
What is the dependency here The statement n  into fact 

51
00:02:35.420 --> 00:02:36.210
of n minus 

52
00:02:36.210 --> 00:02:40.500
One execution depends on return value of next recursive 

53
00:02:40.500 --> 00:02:42.550
call fact of n minus one 

54
00:02:43.040 --> 00:02:44.550
We need to eliminate that 

55
00:02:45.340 --> 00:02:49.430
For that what we can do is instead of computing multiplication 

56
00:02:49.430 --> 00:02:53.350
here we can send multiplication as one more argument 

57
00:02:53.740 --> 00:02:57.460
That argument will accumulate the factorial result in each 

58
00:02:57.460 --> 00:02:58.350
Recursive call 

59
00:02:59.240 --> 00:03:03.650
So led us add another parameter in the function int ans 

60
00:03:04.040 --> 00:03:07.200
and pass n  into ans as an argument to the 

61
00:03:07.200 --> 00:03:08.550
next recursive call 

62
00:03:08.990 --> 00:03:12.100
The final result will be accumulated in this ans 

63
00:03:12.100 --> 00:03:16.750
variable so when n  becomes zero we can return the final 

64
00:03:16.750 --> 00:03:17.270
result 

65
00:03:17.280 --> 00:03:19.180
That is the value of ans 

66
00:03:19.640 --> 00:03:22.430
Now there is no dependency in the last recursive 

67
00:03:22.430 --> 00:03:25.360
call and it is the last statement executed by the 

68
00:03:25.360 --> 00:03:25.940
function 

69
00:03:26.230 --> 00:03:29.340
So it is a tail Recursive call Now let us 

70
00:03:29.340 --> 00:03:32.490
see how this tail recursive call Execution differs from 

71
00:03:32.490 --> 00:03:33.450
the previous one 

72
00:03:34.040 --> 00:03:37.330
If we take n  as five and initially we will 

73
00:03:37.330 --> 00:03:41.290
pass ans as one so fact of five coma one 

74
00:03:41.290 --> 00:03:44.790
becomes n minus one that is four and n  into 

75
00:03:44.790 --> 00:03:45.770
ans

76
00:03:45.780 --> 00:03:46.550
That is five 

77
00:03:46.560 --> 00:03:50.750
Next factor four coma five will be executed here 

78
00:03:50.840 --> 00:03:54.800
Factor four coma five becomes n minus 1 3 and four 

79
00:03:54.800 --> 00:03:55.410
into 5 

80
00:03:55.420 --> 00:03:55.950
20 

81
00:03:56.510 --> 00:03:59.680
Next fact of three comma 20 will be executed 

82
00:03:59.970 --> 00:04:03.130
And here fact of three comma 20 becomes three minus 

83
00:04:03.130 --> 00:04:04.640
1 2 and three into

84
00:04:04.640 --> 00:04:05.750
20 60 

85
00:04:06.240 --> 00:04:09.880
Next fact of two comma 60 will be executed and 

86
00:04:09.880 --> 00:04:13.230
here it becomes two minus 1 1 and two into 

87
00:04:13.230 --> 00:04:14.550
60 120 

88
00:04:15.140 --> 00:04:18.790
And finally fact of one coma 120 becomes one 

89
00:04:18.790 --> 00:04:22.250
minus 1 0 and one Into 120 120 

90
00:04:22.940 --> 00:04:25.910
And when n value reach zero we will return the 

91
00:04:25.910 --> 00:04:26.450
result 

92
00:04:26.840 --> 00:04:30.150
So the result of fact Of five is 120 

93
00:04:30.940 --> 00:04:34.050
Since there is no dependency in this tail recursive 

94
00:04:34.050 --> 00:04:38.270
call the execution becomes much simpler and efficient compared to 

95
00:04:38.270 --> 00:04:39.450
the previous function 

96
00:04:40.040 --> 00:04:42.620
And since it is a tail recursive call the 

97
00:04:42.620 --> 00:04:46.350
compiler will optimise the recursive called before the execution 

98
00:04:46.890 --> 00:04:50.260
The recursive call argument will be converted as simple 

99
00:04:50.260 --> 00:04:54.200
statements so n minus one will be replaced by N 

100
00:04:54.200 --> 00:04:57.670
equal to n  minus one and n  into ans will 

101
00:04:57.670 --> 00:05:00.770
be replaced by ans equel to n  Into 

102
00:05:00.770 --> 00:05:01.490
ans 

103
00:05:02.140 --> 00:05:05.720
And now the compiler will add the label before the 

104
00:05:05.720 --> 00:05:08.950
code block and invoke it using the Goto statement 

105
00:05:09.510 --> 00:05:13.040
Now this tail Recursive Call will work as a simple 

106
00:05:13.040 --> 00:05:17.080
looping statement so it will only take a constant amount 

107
00:05:17.080 --> 00:05:19.250
of memory that is order of one 

108
00:05:19.900 --> 00:05:23.960
This tail Recursive approach is much efficient and will save 

109
00:05:23.970 --> 00:05:26.750
a huge amount of memory in the stacks section 

110
00:05:27.240 --> 00:05:29.820
So this is the recent Why tail recursion is 

111
00:05:29.820 --> 00:05:33.170
considered more efficient than other type of recursions. 

