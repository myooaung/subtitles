WEBVTT

1
00:00:00.440 --> 00:00:01.320
Hello friends 

2
00:00:01.460 --> 00:00:04.810
In this video let us discuss about the binary search 

3
00:00:04.810 --> 00:00:05.450
algorithm 

4
00:00:06.440 --> 00:00:09.320
So in the previous video we learned the part Lilinear

5
00:00:09.320 --> 00:00:10.350
search algorithm 

6
00:00:10.740 --> 00:00:13.650
It was like a book with a unordered pages 

7
00:00:14.040 --> 00:00:17.300
And to get any particular page number we have to 

8
00:00:17.310 --> 00:00:20.850
check each and every page from the beginning to the 

9
00:00:20.860 --> 00:00:22.320
end till we find it 

10
00:00:22.620 --> 00:00:25.850
so binary search is actually like searching a page in 

11
00:00:25.850 --> 00:00:28.150
a book with ordered page numbers 

12
00:00:28.540 --> 00:00:31.330
Here the first page number will be one 

13
00:00:31.580 --> 00:00:35.050
Next will be two then three then four and so on 

14
00:00:35.540 --> 00:00:38.710
So assume you have such a book in your hand 

15
00:00:38.810 --> 00:00:40.270
with 100 pages 

16
00:00:40.840 --> 00:00:44.350
And I am asking you to find Page number 90 

17
00:00:44.740 --> 00:00:47.310
So what will you do You will take the book 

18
00:00:47.320 --> 00:00:49.340
and open the page linear to center 

19
00:00:49.340 --> 00:00:52.550
now you have the left half and right half 

20
00:00:53.040 --> 00:00:55.160
so we know we have 100 pages 

21
00:00:55.300 --> 00:00:57.470
So in the first half it will be 1to 

22
00:00:57.470 --> 00:00:58.150
50 

23
00:00:58.160 --> 00:01:01.150
The second half it will be 51to 100 

24
00:01:01.640 --> 00:01:04.780
So you will ignore the first half and consider the 

25
00:01:04.780 --> 00:01:05.500
second half 

26
00:01:05.500 --> 00:01:10.300
Only since 90 could be present in this half only 

27
00:01:10.500 --> 00:01:15.780
And here the page numbers are from 51to 100 again 

28
00:01:15.780 --> 00:01:17.990
you will divide it in half and it will be 

29
00:01:17.990 --> 00:01:20.900
51to 75 76 

30
00:01:20.900 --> 00:01:21.650
to 100 

31
00:01:21.840 --> 00:01:25.120
And you will ignore the first half again and search 

32
00:01:25.130 --> 00:01:26.230
in the second half 

33
00:01:26.280 --> 00:01:28.930
And this way you can easily find the page 

34
00:01:28.930 --> 00:01:30.110
Number 90 

35
00:01:30.230 --> 00:01:31.350
So unlikely 

36
00:01:31.350 --> 00:01:32.060
linear search 

37
00:01:32.070 --> 00:01:34.650
We don't need to go through all pages of the 

38
00:01:34.650 --> 00:01:35.150
book 

39
00:01:35.540 --> 00:01:38.850
We will continuously divide the book into half till we 

40
00:01:38.850 --> 00:01:42.350
find that particular page so we can save a lot 

41
00:01:42.350 --> 00:01:42.950
of time 

42
00:01:43.340 --> 00:01:46.790
So that is binary search so binary search can 

43
00:01:46.790 --> 00:01:50.250
be performed on sorted or ordered set of elements 

44
00:01:50.740 --> 00:01:53.100
see this example array with elements 

45
00:01:53.350 --> 00:02:01.450
10 23 45 70 100 111and 123 

46
00:02:01.460 --> 00:02:04.650
Suppose we want to search for the key 45 

47
00:02:05.040 --> 00:02:07.560
So as we did for the book we will first 

48
00:02:07.560 --> 00:02:09.250
find the middle element 

49
00:02:09.640 --> 00:02:11.080
We have eight elements 

50
00:02:11.190 --> 00:02:14.060
So the fourth one is the middle one which is 

51
00:02:14.070 --> 00:02:14.960
70 

52
00:02:15.190 --> 00:02:16.650
It is not the key 

53
00:02:16.660 --> 00:02:20.230
And now we have to check if our key is 

54
00:02:20.230 --> 00:02:22.250
less than or greater than 70 

55
00:02:22.840 --> 00:02:26.070
And it is 45 less than 70 

56
00:02:26.260 --> 00:02:29.370
So it could only be present in the left half 

57
00:02:29.480 --> 00:02:33.880
so search here only and ignored the second half again 

58
00:02:33.940 --> 00:02:35.140
In this half 

59
00:02:35.150 --> 00:02:39.300
The middle one is the second element 23 again check 

60
00:02:39.310 --> 00:02:43.580
Whether 45 is less than or greater than 23 it 

61
00:02:43.580 --> 00:02:45.050
is greater than 23 

62
00:02:45.440 --> 00:02:47.570
So check in the right half only 

63
00:02:47.580 --> 00:02:50.570
And here we have one element and it is our key

64
00:02:50.640 --> 00:02:52.850
So this is what binary searches 

65
00:02:53.240 --> 00:02:55.750
Now let us see it's implementation in C 

66
00:02:56.340 --> 00:02:59.560
So we have the function binary search here which will 

67
00:02:59.560 --> 00:03:03.700
take the array it start end and the key to be 

68
00:03:03.700 --> 00:03:05.080
searched into it 

69
00:03:05.390 --> 00:03:08.510
And it will return one if the keys found and 

70
00:03:08.510 --> 00:03:11.080
it will return zero if it is not found 

71
00:03:12.140 --> 00:03:15.880
So we passed this array it start index zero and 

72
00:03:15.890 --> 00:03:20.540
end index seven and Key 45 into the function and 

73
00:03:20.540 --> 00:03:22.050
declare a variable mid 

74
00:03:22.640 --> 00:03:25.690
And we have this while loop here which will divide 

75
00:03:25.690 --> 00:03:28.770
array into half till we find the key or 

76
00:03:28.770 --> 00:03:30.210
array is completed 

77
00:03:30.430 --> 00:03:33.380
And when the keys found one is return 

78
00:03:33.390 --> 00:03:37.350
And when the arrays completely checked this condition start less 

79
00:03:37.350 --> 00:03:40.850
than and will fail and control comes out of the 

80
00:03:40.850 --> 00:03:41.780
loop and returns 

81
00:03:41.790 --> 00:03:46.920
Zero so let us see in first iteration start zero is less 

82
00:03:46.920 --> 00:03:48.410
than end seven 

83
00:03:48.790 --> 00:03:51.370
So go inside and find the middle element 

84
00:03:51.470 --> 00:03:55.730
So we have mid equal to start plus end divided 

85
00:03:55.730 --> 00:03:59.810
by two that is zero plus seven by two Which 

86
00:03:59.810 --> 00:04:03.450
three now check If the middle element is the key 

87
00:04:03.840 --> 00:04:07.340
So we have if arr of mid equal to key 

88
00:04:07.350 --> 00:04:10.230
and it is not a check whether we should search 

89
00:04:10.240 --> 00:04:12.460
in the left half or the right half 

90
00:04:12.470 --> 00:04:16.080
So we have if arr of mid less than key and 

91
00:04:16.080 --> 00:04:20.020
it is not 70 is actually greater than 45 

92
00:04:20.120 --> 00:04:23.550
So we should only check in the left half The 

93
00:04:23.550 --> 00:04:27.710
start should be the same Index zero but end should 

94
00:04:27.720 --> 00:04:29.650
be mid minus one 

95
00:04:30.540 --> 00:04:34.080
So in else we have end equal to mid minus 

96
00:04:34.080 --> 00:04:36.800
one that is three minus one Which is equal to 

97
00:04:36.800 --> 00:04:41.550
two now check the condition Again we have start zero 

98
00:04:41.560 --> 00:04:44.900
less than end two so the condition is okay So 

99
00:04:44.900 --> 00:04:47.830
go inside and find the new middle element 

100
00:04:48.030 --> 00:04:51.770
So we have mid equal to start plus end divided 

101
00:04:51.770 --> 00:04:55.480
by two that is zero plus two divided by two 

102
00:04:55.480 --> 00:04:59.300
which is equal to one so check if middle element 

103
00:04:59.310 --> 00:05:03.440
is a key and we have arr  of mid equal to 

104
00:05:03.440 --> 00:05:03.810
key 

105
00:05:03.820 --> 00:05:05.650
But it is not so 

106
00:05:05.650 --> 00:05:08.810
Next step is to find the half where key could 

107
00:05:08.810 --> 00:05:09.730
be present 

108
00:05:09.860 --> 00:05:13.370
So check if arr  of mid is less than key 

109
00:05:13.380 --> 00:05:15.970
and 23 is less than 45 

110
00:05:15.980 --> 00:05:19.400
So we should check in the right half only so 

111
00:05:19.410 --> 00:05:20.730
end will be the same 

112
00:05:20.740 --> 00:05:23.450
But start should be mid plus one 

113
00:05:23.940 --> 00:05:26.380
so start equal to one plus one which is 

114
00:05:26.380 --> 00:05:27.350
equal to two 

115
00:05:28.140 --> 00:05:31.340
Now Check the while Condition and two is equal to 

116
00:05:31.340 --> 00:05:31.810
two 

117
00:05:31.820 --> 00:05:33.270
So the condition is okay 

118
00:05:33.280 --> 00:05:35.650
So find the new middle element 

119
00:05:36.240 --> 00:05:40.000
It is two plus two divided by two which is 

120
00:05:40.010 --> 00:05:44.480
two now check if middle element equal to key and 

121
00:05:44.490 --> 00:05:48.150
it is so written one as the key is found 

122
00:05:48.740 --> 00:05:52.270
This is how it works And always remember binary search 

123
00:05:52.270 --> 00:05:54.650
will work only for sorted arrays 

124
00:05:55.340 --> 00:05:58.210
Now in the same array let us a search for the key 

125
00:05:58.220 --> 00:05:59.050
150 

126
00:05:59.640 --> 00:06:03.140
So first find mid which will be zero plus seven 

127
00:06:03.140 --> 00:06:08.080
divided by two that is three now check if middle 

128
00:06:08.090 --> 00:06:11.390
element is the key and it is not so check 

129
00:06:11.400 --> 00:06:14.060
whether to go to left side or right side 

130
00:06:14.430 --> 00:06:15.410
So we have 

131
00:06:15.580 --> 00:06:19.360
If arr  of mid less than key and 70 is 

132
00:06:19.360 --> 00:06:20.650
less than 150 

133
00:06:21.140 --> 00:06:24.140
So we should check in the right half so end 

134
00:06:24.140 --> 00:06:25.000
will be the same 

135
00:06:25.130 --> 00:06:28.to 100
But start will be mid plus one that is three 

136
00:06:28.to 100 --> 00:06:29.850
plus one which is equal to four 

137
00:06:30.710 --> 00:06:33.880
Now check the while condition and start four is less 

138
00:06:33.880 --> 00:06:35.070
than n seven 

139
00:06:35.220 --> 00:06:38.230
So going inside and find the new mid which is 

140
00:06:38.240 --> 00:06:42.540
four plus seven divided by two That is 11by two 

141
00:06:42.550 --> 00:06:43.950
which is equal to five 

142
00:06:44.740 --> 00:06:48.870
So middle element is that index five So check if 

143
00:06:48.880 --> 00:06:52.380
it is the key So we have If arr  of 

144
00:06:52.380 --> 00:06:55.840
mid equal to key and it is not so check 

145
00:06:55.850 --> 00:06:59.410
If arr  of mid is less than key and 100 

146
00:06:59.420 --> 00:07:00.950
is less than 150 

147
00:07:01.440 --> 00:07:04.940
So if the element is present it could only be 

148
00:07:04.940 --> 00:07:06.550
present in the right half 

149
00:07:06.940 --> 00:07:11.020
so set start equal to mid plus one that is five 

150
00:07:11.020 --> 00:07:14.to 100
plus one which is equal to six Now check the 

151
00:07:14.to 100 --> 00:07:16.770
condition and six is less than seven 

152
00:07:17.150 --> 00:07:20.610
So go inside and find the new mid and 

153
00:07:20.620 --> 00:07:24.240
it will be six plus seven divided by two that 

154
00:07:24.240 --> 00:07:27.070
is 13 by two which is equal to six 

155
00:07:27.540 --> 00:07:29.450
So check if it is the key 

156
00:07:29.840 --> 00:07:30.660
So we have 

157
00:07:30.810 --> 00:07:33.970
If arr  of mid equal to key and it is 

158
00:07:33.970 --> 00:07:37.460
not so check whether to go to left side or 

159
00:07:37.460 --> 00:07:38.180
right side 

160
00:07:38.640 --> 00:07:39.520
And we have 

161
00:07:39.790 --> 00:07:44.390
If arr  of mid less than key and 111is less 

162
00:07:44.390 --> 00:07:47.670
than 150 so it could be present in the 

163
00:07:47.670 --> 00:07:48.430
right half 

164
00:07:48.440 --> 00:07:52.780
Only so set start equal to mid plus one that is 

165
00:07:52.970 --> 00:07:56.830
six plus one which is equal to seven and check 

166
00:07:56.830 --> 00:07:59.860
The while condition in seven is equal to seven 

167
00:08:00.050 --> 00:08:00.860
So conditional 

168
00:08:00.860 --> 00:08:04.380
is Okay so go inside and find mid which will 

169
00:08:04.380 --> 00:08:08.950
be seven plus seven divided by two that is seven 

170
00:08:09.540 --> 00:08:12.300
So check if that is a key and it is 

171
00:08:12.300 --> 00:08:15.890
not so check whether to go to left or right 

172
00:08:16.340 --> 00:08:19.110
So we have If arr of mid less 

173
00:08:19.110 --> 00:08:23.720
than key and 123 is less than 150 so 

174
00:08:23.730 --> 00:08:27.350
150 could only be present in the right side 

175
00:08:27.940 --> 00:08:32.180
So set start equal to mid plus one that is seven 

176
00:08:32.180 --> 00:08:35.710
plus one which is equal to eight now check the 

177
00:08:35.710 --> 00:08:39.680
while condition and eight is not less than or equal 

178
00:08:39.680 --> 00:08:40.250
to seven 

179
00:08:40.640 --> 00:08:42.350
So the condition fails 

180
00:08:43.140 --> 00:08:47.410
It simply means we have completed checking the array and now 

181
00:08:47.420 --> 00:08:50.350
there is no chance that the key is present in 

182
00:08:50.350 --> 00:08:50.770
the array 

183
00:08:51.440 --> 00:08:55.080
so control comes out of the while loop and returns zero 

184
00:08:55.240 --> 00:08:57.050
as the key is not found 

185
00:08:57.840 --> 00:09:00.880
Now let us discuss about the time complexity of this 

186
00:09:00.880 --> 00:09:01.650
operation 

187
00:09:02.040 --> 00:09:04.830
So we have this array and we are searching for 

188
00:09:04.830 --> 00:09:07.350
key 70 which is a middle element 

189
00:09:07.740 --> 00:09:11.550
Then it can be found in the first comparison itself 

190
00:09:12.040 --> 00:09:15.330
So the best case time complexity is order of one 

191
00:09:15.600 --> 00:09:18.150
and it will be then the key is a middle 

192
00:09:18.150 --> 00:09:18.750
element 

193
00:09:19.440 --> 00:09:22.800
Now again we have this array and we are searching 

194
00:09:22.800 --> 00:09:24.450
for key 45 

195
00:09:25.040 --> 00:09:27.050
So first there are n elements 

196
00:09:27.440 --> 00:09:31.390
Then we find the middle element 70 and understood that 

197
00:09:31.550 --> 00:09:34.610
the key 45 could be present in the left half 

198
00:09:34.610 --> 00:09:35.250
only 

199
00:09:35.740 --> 00:09:40.040
So now we will consider only n by two elements 

to 100
00:09:40.540 --> 00:09:42.880
Now we will find the middle element here which is 

201
00:09:42.880 --> 00:09:46.750
23 45 could be present in the right half only 

202
00:09:47.340 --> 00:09:50.620
So now we will consider only this part which is 

203
00:09:50.630 --> 00:09:52.250
n by four elements 

204
00:09:52.640 --> 00:09:56.410
That is this algorithm is dividing the array into half 

205
00:09:56.560 --> 00:09:57.900
in each iteration 

206
00:09:58.240 --> 00:09:59.470
That is first

207
00:09:59.470 --> 00:10:02.700
We have n elements than n by two then n 

208
00:10:02.700 --> 00:10:05.920
by four then n by eight and so on till 

209
00:10:05.920 --> 00:10:09.600
we have just one element that is n by two 

210
00:10:09.600 --> 00:10:12.580
raise to 0 and n by two raise to 1 and n by two 

211
00:10:12.580 --> 00:10:15.450
raise to 2 n by two raise to 3 up to one 

212
00:10:15.880 --> 00:10:18.960
that is in general n by two raise to k 

213
00:10:18.970 --> 00:10:21.720
equal to one so n equal to 

214
00:10:21.730 --> 00:10:22.500
Two raise to 

215
00:10:22.500 --> 00:10:26.420
K now let us take log on both sides and we 

216
00:10:26.420 --> 00:10:29.460
will get log two raise to K to base two 

217
00:10:29.470 --> 00:10:33.190
equal to log n two base two and by theories 

218
00:10:33.190 --> 00:10:36.750
we can write log n raise to n equal to 

219
00:10:37.030 --> 00:10:38.270
n into log n

220
00:10:39.140 --> 00:10:42.450
So we will get K into log two base two 

221
00:10:42.940 --> 00:10:45.580
the value of log A base A equal to one 

222
00:10:45.830 --> 00:10:48.550
so value of log two base two is also equal 

223
00:10:48.550 --> 00:10:48.930
to one 

224
00:10:49.360 --> 00:10:52.430
So we will get K into one equal to log 

225
00:10:52.440 --> 00:10:56.570
n so the average or worst case time complexity of 

226
00:10:56.580 --> 00:10:59.180
binary search is order of log 

227
00:10:59.180 --> 00:11:02.530
n now let us have a quick comparison of the 

228
00:11:02.530 --> 00:11:06.150
time complexity of linear search and binary search 

229
00:11:06.840 --> 00:11:10.480
If we have this array and key 123 

230
00:11:10.600 --> 00:11:14.400
We have to make eight comparisons checking each and every 

231
00:11:14.400 --> 00:11:18.270
element in order to find it in linear search and 

232
00:11:18.270 --> 00:11:20.210
the worst case time complexity is 

233
00:11:20.220 --> 00:11:23.880
Order of n that is order of eight here and 

234
00:11:23.880 --> 00:11:24.980
in binary search 

235
00:11:24.990 --> 00:11:28.520
The worst case time complexity is order of log n that 

236
00:11:28.520 --> 00:11:32.550
is order of log eight which can be return as two 

237
00:11:32.550 --> 00:11:35.720
raise to 3 and can be return as three into log2base2 

238
00:11:35.720 --> 00:11:38.090
and value of log2base2 

239
00:11:38.090 --> 00:11:41.750
equal to one so three into one equal to three 

240
00:11:42.340 --> 00:11:44.460
and for array of eight elements 

241
00:11:44.610 --> 00:11:44.950
Linear 

242
00:11:44.950 --> 00:11:48.360
search takes eight iterations but binary search takes 

243
00:11:48.360 --> 00:11:49.890
only three iterations 

244
00:11:50.020 --> 00:11:53.690
So that is how binary search is very efficient than 

245
00:11:53.690 --> 00:11:54.550
linear search 

246
00:11:54.780 --> 00:11:58.450
But we always need sorted array in binary search 

247
00:11:58.540 --> 00:12:02.060
If the array  is sorted then we can undoubtedly go 

248
00:12:02.060 --> 00:12:03.250
for binary search 

249
00:12:03.340 --> 00:12:06.970
And if we have an unsorted array and to apply 

250
00:12:06.970 --> 00:12:10.280
binary search we have to sorted first then pass 

251
00:12:10.280 --> 00:12:13.510
it to binary search function so it may not give that much efficiency. 

