WEBVTT

1
00:00:00.240 --> 00:00:04.130
So in the implementation, we can write a function  

2
00:00:04.290 --> 00:00:07.900
get nth from last by passing the head of the linked list 

3
00:00:08.180 --> 00:00:12.350
and the value n. Now declare a static variable count 

4
00:00:12.740 --> 00:00:14.700
We need to go to the next node 

5
00:00:14.700 --> 00:00:18.290
recursively till we reach the last node and 

6
00:00:18.290 --> 00:00:22.500
then come back by incrementing count and when count is

7
00:00:22.510 --> 00:00:25.250
equal to n print that node. 

8
00:00:25.740 --> 00:00:29.490
So write if head is equal to null return. And now 

9
00:00:29.500 --> 00:00:32.950
call this function recursively for the next node 

10
00:00:33.340 --> 00:00:38.760
So write get nth from last (head next, n) 

11
00:00:38.770 --> 00:00:44.370
and increment count and compare with n. So write if 

12
00:00:44.380 --> 00:00:47.890
++count is equal to n, then only we 

13
00:00:47.890 --> 00:00:49.550
need to print that node.

14
00:00:50.140 --> 00:00:53.980
So write print %d head-data

15
00:00:54.540 --> 00:00:58.500
So the data of this node will be printed and 

16
00:00:58.500 --> 00:01:01.850
thus we can get the nth node from the end 

17
00:01:01.850 --> 00:01:02.810
of the linked list

18
00:01:02.820 --> 00:01:06.190
printed on the screen. Let us take n equal to two 

19
00:01:06.200 --> 00:01:08.280
and see how this code works 

20
00:01:08.510 --> 00:01:11.230
First we need to check if head is equal to null

21
00:01:11.230 --> 00:01:13.420
but it is not.

22
00:01:13.420 --> 00:01:18.220
So call get nth from last by passing the next node that 

23
00:01:18.220 --> 00:01:22.550
is head next and n. And check if head is equal to null.

24
00:01:22.550 --> 00:01:27.570
Here again it is not. So again call get nth from last

25
00:01:27.580 --> 00:01:31.960
 by passing the next node. Here also we 

26
00:01:31.960 --> 00:01:34.150
need to check if head equal to null.

27
00:01:34.540 --> 00:01:39.680
But it fails. So call get nth from last by passing 

28
00:01:39.680 --> 00:01:40.650
the next node. 

29
00:01:41.140 --> 00:01:43.720
And this will continue till we get head equal to null

30
00:01:43.720 --> 00:01:46.160
or we can say till we reach the last node.

31
00:01:46.160 --> 00:01:47.050


32
00:01:47.540 --> 00:01:50.650
So here also we check if head equal to null

33
00:01:51.060 --> 00:01:55.970
and it is. So the recursive calls will be made 

34
00:01:56.060 --> 00:01:59.680
till we reach null and now it will go back 

35
00:01:59.690 --> 00:02:01.770
and execute the remaining statements. 

36
00:02:02.240 --> 00:02:06.270
So control reaches here and the next statement executed is 

37
00:02:06.580 --> 00:02:09.450
if ++count equal to n. 

38
00:02:10.040 --> 00:02:13.760
So count is incremented by one and checks if 

39
00:02:13.770 --> 00:02:15.240
it is equal to n 

40
00:02:15.490 --> 00:02:16.750
But it is not. 

41
00:02:17.240 --> 00:02:21.860
And this recursive call is executed completely and control 

42
00:02:21.860 --> 00:02:26.220
reaches the calling function. And here the execution is resumed 

43
00:02:26.230 --> 00:02:29.860
Now count is incremented to two and checks if it 

44
00:02:29.860 --> 00:02:33.160
is equal to n and it is. So we have 

45
00:02:33.160 --> 00:02:36.090
reached the second node from the end of the linked list. And we can print it.

