WEBVTT

1
00:00:00.140 --> 00:00:01.650
like the previous problem 

2
00:00:01.840 --> 00:00:05.750
This problem also involves eliminating the same numbers 

3
00:00:06.240 --> 00:00:09.740
But here the only difference is there will be two 

4
00:00:09.750 --> 00:00:12.670
odd occurring numbers so we can use the bitwise 

5
00:00:12.680 --> 00:00:13.950
XOR pattern here 

6
00:00:14.340 --> 00:00:17.220
First let us XOR all the numbers 

7
00:00:17.490 --> 00:00:21.050
Now what will happen The same numbers will cancel out 

8
00:00:21.250 --> 00:00:24.930
And finally we will have the XOR value of odd 

9
00:00:24.940 --> 00:00:29.230
occurring numbers which are five and seven here and what 

10
00:00:29.230 --> 00:00:30.460
will be the value Five 

11
00:00:30.470 --> 00:00:34.960
XOR seven first let us write five and seven 

12
00:00:34.970 --> 00:00:36.020
in binary form 

13
00:00:36.090 --> 00:00:37.830
To find five XOR seven 

14
00:00:37.830 --> 00:00:38.250
 

15
00:00:39.010 --> 00:00:44.430
The binary Form of five is 0101 and the binary form 

16
00:00:44.430 --> 00:00:46.940
of seven is 0111 

17
00:00:47.540 --> 00:00:51.570
So five XOR seven will be 0010 

18
00:00:52.040 --> 00:00:55.130
So after performing Bitwise XOR operation 

19
00:00:55.130 --> 00:00:58.120
Of all the numbers we will have the XOR 

20
00:00:58.120 --> 00:01:00.750
value of two odd occurring numbers 

21
00:01:01.140 --> 00:01:04.830
In this case we have XOR the value of five 

22
00:01:04.840 --> 00:01:07.770
and seven which is 0010 

23
00:01:08.510 --> 00:01:12.280
Now we need to split those two odd occurring numbers 

24
00:01:12.390 --> 00:01:14.010
from this resulted value 

25
00:01:14.410 --> 00:01:17.490
And how can we do that Since both numbers are 

26
00:01:17.490 --> 00:01:21.190
not equal there will be some bit difference on those 

27
00:01:21.190 --> 00:01:21.950
two numbers 

28
00:01:22.340 --> 00:01:25.230
So we need to find the first bit difference between 

29
00:01:25.240 --> 00:01:26.380
those two numbers 

30
00:01:27.040 --> 00:01:30.890
Using that position we can split the numbers in the 

31
00:01:30.900 --> 00:01:32.170
XOR result 

32
00:01:32.390 --> 00:01:35.870
The first set bit that is one will be the 

33
00:01:35.880 --> 00:01:39.670
varying bit on those two numbers because XOR of 

34
00:01:39.680 --> 00:01:41.760
unequal bit pair will be one 

35
00:01:42.320 --> 00:01:46.330
So here the first big difference between those two numbers 

36
00:01:46.340 --> 00:01:50.610
is in position two after finding the first set bit 

37
00:01:50.610 --> 00:01:51.300
position 

38
00:01:51.640 --> 00:01:54.490
Now we can take all the numbers and group the 

39
00:01:54.490 --> 00:01:57.250
numbers based on its second bit value 

40
00:01:57.740 --> 00:02:02.850
Here the numbers 676 has one in its second position 

41
00:02:03.300 --> 00:02:07.460
and the remaining numbers has zero in second position so 

42
00:02:07.460 --> 00:02:11.190
we can group them separately and perform XOR again 

43
00:02:11.200 --> 00:02:12.350
on each group 

44
00:02:12.840 --> 00:02:15.810
So in the first group nine and nine will cancel 

45
00:02:15.810 --> 00:02:19.740
out and five will remain and the second group six 

46
00:02:19.740 --> 00:02:23.310
and six will cancel out and seven will remain and 

47
00:02:23.310 --> 00:02:26.150
five and seven is are expected result 

48
00:02:26.640 --> 00:02:29.990
So the logic for this problem is first XOR 

49
00:02:30.000 --> 00:02:33.520
all the numbers and get the XOR result and 

50
00:02:33.520 --> 00:02:37.510
then in the XOR result find the first set bit 

51
00:02:37.510 --> 00:02:41.990
position This will be a differentiating point of two numbers 

52
00:02:42.440 --> 00:02:46.030
and then group all the numbers based on the first 

53
00:02:46.040 --> 00:02:49.650
set bit position and perform XOR on them 

54
00:02:50.240 --> 00:02:53.150
So using this logic you can solve this problem.

