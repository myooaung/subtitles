WEBVTT

1
00:00:00.100 --> 00:00:03.600
in this video let us discuss the basic operations on 

2
00:00:03.600 --> 00:00:06.750
an array and why the linked list is preferred over array

3
00:00:07.130 --> 00:00:10.130
For example let us take this age array of 10 

4
00:00:10.140 --> 00:00:10.870
integer 

5
00:00:11.030 --> 00:00:14.250
Now suppose we need to store one more students 

6
00:00:14.260 --> 00:00:14.750
age

7
00:00:14.810 --> 00:00:17.970
Is it possible to resize the array at a time It's 

8
00:00:17.970 --> 00:00:18.850
not possible 

9
00:00:18.940 --> 00:00:22.750
Once we declare and initialised we cannot change the arrays 

10
00:00:22.750 --> 00:00:24.030
size at runtime 

11
00:00:24.230 --> 00:00:27.600
If we try to access the element at index ten 

12
00:00:27.780 --> 00:00:30.590
it will throw the array out of bounds exception 

13
00:00:30.770 --> 00:00:34.630
Now let us understand how this nature affects the insertion 

14
00:00:34.630 --> 00:00:37.160
and deletion operations in an array so 

15
00:00:37.160 --> 00:00:39.450
let us an insert element in an array 

16
00:00:39.640 --> 00:00:42.540
Let us take this array of size five and we 

17
00:00:42.540 --> 00:00:46.250
want to insert the new element 100 at position two 

18
00:00:46.640 --> 00:00:48.560
in the case of C or C plus 

19
00:00:48.560 --> 00:00:52.220
Plus we can simply shift the elements from index 2 

20
00:00:52.230 --> 00:00:56.010
to 4 to one position right and we can insert 

21
00:00:56.010 --> 00:00:59.190
the new Element 100 at Index two in the same 

22
00:00:59.200 --> 00:00:59.510
array 

23
00:00:59.790 --> 00:01:03.230
But as we discussed in Java we cannot change the 

24
00:01:03.240 --> 00:01:04.600
array size at run time 

25
00:01:04.800 --> 00:01:07.780
So in order to insert the new element we must 

26
00:01:07.780 --> 00:01:11.430
create the new array with N plus one size that 

27
00:01:11.430 --> 00:01:14.390
is size of six and we need to apply the 

28
00:01:14.390 --> 00:01:17.610
insert logic in the new array in the new array 

29
00:01:17.620 --> 00:01:21.170
First Copy the array elements from Index 0 to 

30
00:01:21.170 --> 00:01:25.930
given position minus one that is 0 1 and then insert 

31
00:01:25.930 --> 00:01:29.260
the new Element 100 at the given position two and 

32
00:01:29.260 --> 00:01:33.720
finally copy the remaining elements from index position plus 

33
00:01:33.720 --> 00:01:35.550
one to the end of the array 

34
00:01:35.640 --> 00:01:38.730
So whenever we need to insert new Element at run 

35
00:01:38.730 --> 00:01:41.470
time we need to create the new array with the 

36
00:01:41.470 --> 00:01:44.550
required size and copy the existing elements 

37
00:01:45.140 --> 00:01:48.230
But this is not an efficient approach as it consumes 

38
00:01:48.230 --> 00:01:50.130
both time and space 

39
00:01:50.200 --> 00:01:53.110
Similarly if we want to remove an element from an 

40
00:01:53.120 --> 00:01:56.180
array we need to create the new size with size 

41
00:01:56.180 --> 00:01:59.120
minus one and apply the remove operation 

42
00:01:59.230 --> 00:02:02.850
For example that is take this array with size five 

43
00:02:03.240 --> 00:02:06.440
and suppose we want to remove the element from Position 

44
00:02:06.450 --> 00:02:06.840
three 

45
00:02:06.980 --> 00:02:09.240
We need to create a new array of its size 

46
00:02:09.240 --> 00:02:12.750
minus one that is four and copy all the elements 

47
00:02:12.760 --> 00:02:15.090
except the element which needs to be removed 

48
00:02:15.100 --> 00:02:19.160
That is first copy elements from Index zero to position 

49
00:02:19.160 --> 00:02:23.040
minus one that is 0 to 2 and then skip 

50
00:02:23.050 --> 00:02:26.370
Element 40 and then copy the remaining elements from 

51
00:02:26.370 --> 00:02:30.630
position plus one till the end of the array like we discussed 

52
00:02:30.630 --> 00:02:32.100
in inserting the element 

53
00:02:32.110 --> 00:02:34.810
This is also not an efficient way to remove the 

54
00:02:34.810 --> 00:02:38.310
element at run time because to remove the element we need 

55
00:02:38.310 --> 00:02:41.520
to create a new array with size minus one and 

56
00:02:41.530 --> 00:02:43.250
apply the removing logic 

57
00:02:43.440 --> 00:02:47.220
So if we use array we can't grow or shrink its 

58
00:02:47.220 --> 00:02:48.490
size at runtime 

59
00:02:48.670 --> 00:02:51.330
So what will be the better solution for this The 

60
00:02:51.330 --> 00:02:53.730
solution is using a linked list 

61
00:02:53.930 --> 00:02:57.200
Unlike an array in the Linked List we won't store 

62
00:02:57.210 --> 00:02:59.830
all the elements in contiguous locations 

63
00:03:00.160 --> 00:03:03.780
Every element will be stored in different locations and each 

64
00:03:03.780 --> 00:03:07.190
of them will be logically linked using its memory address 

65
00:03:07.440 --> 00:03:10.660
So in the linked list every node has two parts 

66
00:03:10.670 --> 00:03:13.720
Want to store the data and another one to store 

67
00:03:13.720 --> 00:03:15.660
the next nodes memory address 

68
00:03:15.880 --> 00:03:19.550
For example let us take this linked list with elements 

69
00:03:19.560 --> 00:03:23.090
10 20 and 30 here node ten's 

70
00:03:23.090 --> 00:03:26.890
Next part points to node twenties memory address and node

71
00:03:26.890 --> 00:03:31.300
20 next part points to node thirties memory address and 

72
00:03:31.300 --> 00:03:32.140
node thirties 

73
00:03:32.150 --> 00:03:33.120
Next is null 

74
00:03:33.590 --> 00:03:34.730
That means Node 

75
00:03:34.740 --> 00:03:37.600
30 is the last node of the linked list 

76
00:03:37.760 --> 00:03:40.820
We will discuss the linked list elaborately from the next 

77
00:03:40.820 --> 00:03:41.440
videos 

78
00:03:41.460 --> 00:03:44.450
So here if we want to insert an element 100 

79
00:03:44.460 --> 00:03:47.620
after 20 we don't need to create a new linked 

80
00:03:47.620 --> 00:03:48.370
list and copy 

81
00:03:48.370 --> 00:03:51.690
It's elements like we did in array we can simply set 

82
00:03:51.700 --> 00:03:55.200
node with Element 20 pointing to new node and new 

83
00:03:55.200 --> 00:03:57.140
node pointing to node with 30 

84
00:03:57.240 --> 00:04:01.080
Similarly if we want to delete Element 20 we can 

85
00:04:01.080 --> 00:04:04.170
simply make the first node point to the third node 

86
00:04:04.180 --> 00:04:05.670
instead of the second node 

87
00:04:06.140 --> 00:04:08.890
So we will get the new linked list like this 

88
00:04:09.020 --> 00:04:12.220
because of this reason the linked list is preferred over 

89
00:04:12.220 --> 00:04:14.320
the data structures in array 

90
00:04:14.520 --> 00:04:17.520
Whenever we want to grow or shrink its size we 

91
00:04:17.520 --> 00:04:20.650
need to create a new array and do the operations 

92
00:04:20.920 --> 00:04:23.380
But we can grow or shrink the linked list based 

93
00:04:23.380 --> 00:04:26.070
on our need by just changing the memory 

94
00:04:26.070 --> 00:04:29.230
Address from the next video we will discuss about 

95
00:04:29.230 --> 00:04:31.890
linked list and how to add or delete nodes from it with examples.

