WEBVTT

1
00:00:00.940 --> 00:00:01.690
Hi friends 

2
00:00:01.700 --> 00:00:04.310
In this video we are going to discuss applications of 

3
00:00:04.310 --> 00:00:05.029
pointers 

4
00:00:12.240 --> 00:00:16.080
So one important application of pointer is in Embedded devices 

5
00:00:16.270 --> 00:00:19.130
We all use a lot of embedded devices in our daily 

6
00:00:19.130 --> 00:00:22.430
life like fitness watch, cellphones, washing machine etc 

7
00:00:23.140 --> 00:00:25.980
So pointers are very useful in embedded programming 

8
00:00:26.440 --> 00:00:27.470
Let's see an example 

9
00:00:27.470 --> 00:00:29.349
We have a temperature sensing device 

10
00:00:29.540 --> 00:00:33.390
It uses a temperature sensor LM35 to sense the 

11
00:00:33.390 --> 00:00:34.260
environment 

12
00:00:34.540 --> 00:00:37.570
This sensor will take a fixed memory address to update 

13
00:00:37.570 --> 00:00:38.350
its status 

14
00:00:38.410 --> 00:00:40.400
Let's say it is 1024 

15
00:00:40.610 --> 00:00:43.279
We can use a pointer to point the memory location 

16
00:00:43.280 --> 00:00:45.820
1024 and using this pointer 

17
00:00:45.820 --> 00:00:48.419
 we can read the temperature data and make decisions 

18
00:00:48.420 --> 00:00:49.150
accordingly 

19
00:00:49.410 --> 00:00:52.459
Like if the temperature is less than 37 degrees Celsius 

20
00:00:52.460 --> 00:00:53.710
we can say it's normal 

21
00:00:53.890 --> 00:00:56.060
And if it is about 37 we can say the 

22
00:00:56.060 --> 00:00:57.350
climate is very hot 

23
00:00:57.840 --> 00:01:01.240
So here the temperature sensed is 32 so we can 

24
00:01:01.240 --> 00:01:03.970
say current climate is normal Now 

25
00:01:03.980 --> 00:01:06.460
If it is 57 we can say it is very 

26
00:01:06.460 --> 00:01:09.460
hot climate now So that was just an example of 

27
00:01:09.470 --> 00:01:10.600
an embedded system 

28
00:01:10.770 --> 00:01:14.920
A temperature sensor. now in embedded systems we often need 

29
00:01:14.920 --> 00:01:18.350
to get the status of various peripheral devices like Led 

30
00:01:18.350 --> 00:01:18.880
Fan 

31
00:01:18.880 --> 00:01:21.990
Sensor etc.  and these peripheral devices will 

32
00:01:21.990 --> 00:01:25.810
take a fixed memory address to update their status and 

33
00:01:25.810 --> 00:01:29.390
using pointers we can effectively access those memory addresses 

34
00:01:29.940 --> 00:01:32.550
And that is how Pointers play a major role in 

35
00:01:32.550 --> 00:01:33.960
Embedded system programming 

36
00:01:34.240 --> 00:01:37.449
Next is pointers are memory efficient so let us see how

37
00:01:37.450 --> 00:01:41.059
 so Consider this code we have a structure declared 

38
00:01:41.070 --> 00:01:44.570
employee and in this structure we have declared three variables 

39
00:01:44.580 --> 00:01:47.860
A character array name and integer age and a 

40
00:01:47.860 --> 00:01:49.210
floating point variable weight

41
00:01:49.210 --> 00:01:52.450
so the structure will occupy 4 bytes for name 

42
00:01:52.460 --> 00:01:55.080
four bytes for age and other four bytes for weight 

43
00:01:55.090 --> 00:01:58.429
So a total of 12 bytes of data now in 

44
00:01:58.430 --> 00:02:01.740
main function we have a function call and we pass 

45
00:02:01.740 --> 00:02:03.479
the structure variable to the function 

46
00:02:03.920 --> 00:02:06.399
Now it will copy all the values to the called 

47
00:02:06.400 --> 00:02:10.010
function. and in that function it will occupy another 12 

48
00:02:10.010 --> 00:02:10.489
bytes 

49
00:02:10.570 --> 00:02:12.130
So that is not a good approach 

50
00:02:12.310 --> 00:02:15.070
Now see this code, We have the same scenario 

51
00:02:15.070 --> 00:02:17.670
But instead of passing the structure variable, we pass the 

52
00:02:17.670 --> 00:02:21.590
pointer pointing to structure variable's memory address to the function 

53
00:02:21.940 --> 00:02:24.720
Now only the starting memory address is passed to the 

54
00:02:24.720 --> 00:02:28.890
function and that is how Pointers saves memory space and 

55
00:02:28.900 --> 00:02:30.270
improves efficiency 

56
00:02:30.280 --> 00:02:33.990
Next application of pointers is in dynamic memory allocation 

57
00:02:34.210 --> 00:02:37.420
So using pointers we can create, resize and delete 

58
00:02:37.430 --> 00:02:40.250
memory based on our need at run time 

59
00:02:40.740 --> 00:02:43.940
So the syntax to declare a pointer variable is this 

60
00:02:43.950 --> 00:02:47.360
datatype * pointer name so data type can

61
00:02:47.360 --> 00:02:51.290
be can be int, char, float etc  and * indicates that the 

62
00:02:51.290 --> 00:02:52.990
variable is a pointer type 

63
00:02:53.210 --> 00:02:55.210
We can give a name for the pointer also

64
00:02:55.210 --> 00:02:59.290
now see some examples We have int *ptr here 

65
00:02:59.290 --> 00:03:02.670
ptr A will point in integer variable next char*ptr

66
00:03:02.670 --> 00:03:06.230
here ptr A will point to a character variable 

67
00:03:06.430 --> 00:03:10.209
next is float * ptr here Ptr can point a floating 

68
00:03:10.210 --> 00:03:13.770
point variable and next we have double * ptr here 

69
00:03:13.770 --> 00:03:16.350
ptr can point to a double variable 

70
00:03:17.640 --> 00:03:19.940
So that's all and thank you for watching this video 

