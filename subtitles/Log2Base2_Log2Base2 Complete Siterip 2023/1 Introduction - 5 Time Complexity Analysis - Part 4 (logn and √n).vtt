WEBVTT

1
00:00:00.060 --> 00:00:03.230
in this video let us take some sample algorithms and 

2
00:00:03.240 --> 00:00:05.640
analysed their time complexity 

3
00:00:05.650 --> 00:00:09.520
First let us take this code. Here, the value of 

4
00:00:09.530 --> 00:00:13.480
iterating variable i get multiplied by 2 every time 

5
00:00:13.670 --> 00:00:17.270
So how to find the time complexity of this algorithm 

6
00:00:17.290 --> 00:00:20.570
for that First let us right the values of i 

7
00:00:20.580 --> 00:00:22.170
in each iteration 

8
00:00:22.290 --> 00:00:25.590
In first iteration the value of i will be one 

9
00:00:25.980 --> 00:00:28.810
And if the next iteration the value of i will 

10
00:00:28.820 --> 00:00:31.570
be 1*2=2  and in the 

11
00:00:31.570 --> 00:00:32.670
next iteration 

12
00:00:32.850 --> 00:00:35.300
The value of i will be 2*2=4

13
00:00:35.300 --> 00:00:38.890
and in the next iteration 4*2=8 

14
00:00:38.900 --> 00:00:41.950
and in the next iteration  

15
00:00:41.950 --> 00:00:42.780
8*2=16 

16
00:00:42.790 --> 00:00:45.750
And it will go like this. In general we can 

17
00:00:45.750 --> 00:00:47.710
say it as 2 power k

18
00:00:48.020 --> 00:00:52.010
So when will the loop terminate. Here, The for loop condition 

19
00:00:52.010 --> 00:00:55.320
is i less than n And so when the value of i

20
00:00:55.440 --> 00:00:58.840
becomes greater than or equal to n, this loop will 

21
00:00:58.840 --> 00:01:03.160
terminate if we assume i equal to n, 

22
00:01:03.160 --> 00:01:04.410
2 power k = n

23
00:01:04.480 --> 00:01:07.340
As we already found the value of i, that is 

24
00:01:07.350 --> 00:01:11.780
2 power k. To solve this, take log to the 

25
00:01:11.780 --> 00:01:13.720
base 2 on both sides 

26
00:01:13.860 --> 00:01:16.990
So we will get the left hand side like this 

27
00:01:17.190 --> 00:01:20.680
k*log 2 base2 which is equivalent to 

28
00:01:20.680 --> 00:01:21.180
one 

29
00:01:21.360 --> 00:01:25.070
So we got value of K is Log n base2 

30
00:01:25.070 --> 00:01:25.640


31
00:01:25.650 --> 00:01:29.480
So the time complexity of this algorithm is order of 

32
00:01:29.480 --> 00:01:30.260
log n

33
00:01:30.700 --> 00:01:34.380
Now let us take another example here the value of 

34
00:01:34.390 --> 00:01:35.440
iterating variable i

35
00:01:35.450 --> 00:01:38.060
get divided by 2 every time 

36
00:01:38.360 --> 00:01:40.950
So let us try to find the time complexity of 

37
00:01:40.960 --> 00:01:42.170
this algorithm 

38
00:01:42.420 --> 00:01:43.190
So let us write 

39
00:01:43.190 --> 00:01:45.740
the values of i in each iteration 

40
00:01:45.980 --> 00:01:48.940
In first iteration it will be n And in the 

41
00:01:48.940 --> 00:01:51.960
second iteration it will be n/2 then  

42
00:01:51.960 --> 00:01:54.700
n/4 then n/8 and it will go 

43
00:01:54.700 --> 00:01:55.530
like this. 

44
00:01:55.690 --> 00:01:58.260
And in general the value of i will be  

45
00:01:58.260 --> 00:02:01.780
n/2 power k. And, when will the loop terminate 

46
00:02:01.890 --> 00:02:05.660
here, The for loop condition is i greater than 1

47
00:02:05.880 --> 00:02:08.560
So when the value of is lesser than or equal 

48
00:02:08.560 --> 00:02:12.220
to 1, this loop will terminate. If we assume  

49
00:02:12.220 --> 00:02:14.220
i=1 then n/2 power k =1

50
00:02:14.230 --> 00:02:15.920
n/2 power k =1

51
00:02:15.930 --> 00:02:18.590
As we have already found the value of i that 

52
00:02:18.590 --> 00:02:21.560
is n/2 power K and to solve this 

53
00:02:21.680 --> 00:02:23.630
Take log on both sides 

54
00:02:23.840 --> 00:02:26.610
So at the right hand side we will get 

55
00:02:26.620 --> 00:02:29.320
K log2 base 2 which is equivalent to 1

56
00:02:29.590 --> 00:02:32.320
So we got k equal to log n base2

57
00:02:32.320 --> 00:02:36.180
So the time complexity of this algorithm is

58
00:02:36.190 --> 00:02:37.620
order of Log n 

59
00:02:37.850 --> 00:02:39.760
Now let us say another example 

60
00:02:39.910 --> 00:02:43.520
He are the for loop condition is i*i less than n

61
00:02:43.530 --> 00:02:47.080
And so when will the Loop terminate 

62
00:02:47.080 --> 00:02:49.380
when i*i is greater than or equal to n 

63
00:02:49.390 --> 00:02:53.110
this Loop will terminate if we assume

64
00:02:53.110 --> 00:02:54.330
i*i=n

65
00:02:54.610 --> 00:02:56.650
That is i square equal to n

66
00:02:56.660 --> 00:02:59.810
Then i equal to square root of n. So the time 

67
00:02:59.810 --> 00:03:03.760
complexity of this algorithm is order of square root of n.

68
00:03:04.150 --> 00:03:04.730
That's it.

