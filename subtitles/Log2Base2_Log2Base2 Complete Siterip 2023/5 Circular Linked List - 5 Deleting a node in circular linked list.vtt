WEBVTT

1
00:00:00.440 --> 00:00:03.310
in this video we're going to learn how to delete 

2
00:00:03.310 --> 00:00:04.310
a node from a 

3
00:00:04.310 --> 00:00:05.450
Circular Linked list 

4
00:00:06.140 --> 00:00:08.710
So here we have to consider three cases 

5
00:00:09.110 --> 00:00:13.260
The first case is when the circular linked list is empty 

6
00:00:13.300 --> 00:00:15.340
then deletion cannot be performed 

7
00:00:15.560 --> 00:00:17.050
The second case is when 

8
00:00:17.210 --> 00:00:20.430
The node to be deleted is the head or deletion 

9
00:00:20.440 --> 00:00:23.630
is to be performed at the beginning and the final 

10
00:00:23.630 --> 00:00:26.610
case is when the node to be deleted is any 

11
00:00:26.610 --> 00:00:28.050
node other than the head 

12
00:00:28.340 --> 00:00:31.070
So we have a circular linked list here and let 

13
00:00:31.070 --> 00:00:32.480
us try to delete the node 

14
00:00:32.480 --> 00:00:34.430
Ten first we have to check 

15
00:00:34.440 --> 00:00:38.310
If the list is empty then deletion is not possible 

16
00:00:38.510 --> 00:00:40.720
So check if head equal to null

17
00:00:40.920 --> 00:00:43.030
But here it is not so check 

18
00:00:43.040 --> 00:00:46.090
If deletion is to be performed at the beginning that 

19
00:00:46.090 --> 00:00:48.850
is whether the node to be deleted is the head 

20
00:00:48.850 --> 00:00:49.250
node 

21
00:00:49.840 --> 00:00:52.210
And if the node to be deleted is the head 

22
00:00:52.320 --> 00:00:54.360
we have to check two cases 

23
00:00:54.470 --> 00:00:55.680
The first case is 

24
00:00:55.950 --> 00:00:58.590
There is only one node in the list and we 

25
00:00:58.590 --> 00:01:01.190
have to delete that node which will be the head 

26
00:01:01.270 --> 00:01:02.600
and the second case is 

27
00:01:02.800 --> 00:01:05.670
There are multiple nodes in the list and we have 

28
00:01:05.670 --> 00:01:08.560
to find the last node and make it a point 

29
00:01:08.560 --> 00:01:11.790
to the second node and finally make the second node 

30
00:01:11.800 --> 00:01:12.360
the head 

31
00:01:12.640 --> 00:01:13.760
So first check 

32
00:01:13.830 --> 00:01:16.480
If head is the only node and we can check 

33
00:01:16.480 --> 00:01:19.820
that simply because if the list is having only one 

34
00:01:19.820 --> 00:01:22.620
node and if it is the node to be deleted 

35
00:01:22.890 --> 00:01:26.090
then head dot data will be equal to key which 

36
00:01:26.090 --> 00:01:29.510
is true here and head dot next will be pointing 

37
00:01:29.510 --> 00:01:32.250
to head itself which is also draw here 

38
00:01:32.540 --> 00:01:36.010
So we can understand that the list is having only 

39
00:01:36.020 --> 00:01:39.030
one node and that is the node to be deleted 

40
00:01:39.310 --> 00:01:42.380 
so we can just delete that node so make head 

41
00:01:42.390 --> 00:01:43.290
equal to null 

42
00:01:43.360 --> 00:01:44.970
So that was one case 

43
00:01:45.240 --> 00:01:48.660
Now let us see another circular linked list with three 

44
00:01:48.660 --> 00:01:50.950
nodes 10 20 and 30 

45
00:01:51.340 --> 00:01:54.600
Let us try to delete the node ten first we need 

46
00:01:54.600 --> 00:01:57.070
to check if the list is empty 

47
00:01:57.080 --> 00:02:00.830
So we have if head equal to null which is not 

48
00:02:00.830 --> 00:02:01.700
true so

49
00:02:01.700 --> 00:02:02.160
check 

50
00:02:02.350 --> 00:02:05.120
If head is to be deleted and if it is 

51
00:02:05.120 --> 00:02:08.640
the only node in the list and here head data 

52
00:02:08.640 --> 00:02:11.720
equal to key but head next is not equal 

53
00:02:11.720 --> 00:02:12.250
to head 

54
00:02:12.480 --> 00:02:16.030
So it fails now chek if head is having the 

55
00:02:16.030 --> 00:02:16.420
key 

56
00:02:16.660 --> 00:02:20.980
So check If head dot data equal to key and 

57
00:02:20.980 --> 00:02:21.970
it is true here 

58
00:02:22.150 --> 00:02:25.560
So which is found out Head is not the only 

59
00:02:25.560 --> 00:02:26.940
node in this list 

60
00:02:26.950 --> 00:02:28.970
So this is the head node deletion 

61
00:02:28.980 --> 00:02:31.560
But there are multiple nodes in the list 

62
00:02:31.650 --> 00:02:34.620
So what we have to do is traverse the list 

63
00:02:34.630 --> 00:02:38.250
and find the last node and make last node point to

64
00:02:38.250 --> 00:02:41.590
2nd node and make the second node the new head 

65
00:02:41.770 --> 00:02:44.790
so let us declare last initialised to head 

66
00:02:45.240 --> 00:02:48.330
Now use a while loop to traverse the list So 

67
00:02:48.330 --> 00:02:52.360
we have the condition last next not equal to head and 

68
00:02:52.360 --> 00:02:55.750
move last to the next node in each iteration and 

69
00:02:55.750 --> 00:02:59.590
when last next becomes head will have reached the last 

70
00:02:59.590 --> 00:03:02.050
node and the loop will be terminated 

71
00:03:02.340 --> 00:03:06.770
So first we have last equal to 1000 so last dot 

72
00:03:06.770 --> 00:03:09.870
Next will be equal to 2000 which is not equal to 

73
00:03:09.870 --> 00:03:13.760
head So move last to the next node So last 

74
00:03:13.760 --> 00:03:16.880
equal to 2000 Now Now check the condition and we 

75
00:03:16.880 --> 00:03:20.570
have last dot next equal to 3000 which is not 

76
00:03:20.570 --> 00:03:23.570
equal to head so again go in sight and move 

77
00:03:23.570 --> 00:03:25.050
Last to the next node 

78
00:03:25.060 --> 00:03:28.130
So we will get last equal to 3000 now 

79
00:03:28.740 --> 00:03:32.090
Now check the condition and we have last dot next 

80
00:03:32.100 --> 00:03:34.390
equal to 1000 which is the head 

81
00:03:34.400 --> 00:03:37.870
So condition fails and control comes out of the while 

82
00:03:37.870 --> 00:03:38.440
loop

83
00:03:38.500 --> 00:03:42.280
So now we have the last node pointed by last 

84
00:03:42.560 --> 00:03:45.360
So the next step is to make the last node 

85
00:03:45.360 --> 00:03:46.850
point to 2nd node 

86
00:03:47.040 --> 00:03:50.770
So we have last dot next equal to head dot 

87
00:03:50.770 --> 00:03:51.350
next 

88
00:03:52.740 --> 00:03:55.230
Now we need to make this second node the new 

89
00:03:55.230 --> 00:03:59.410
head so we have head equal to head dot Next 

90
00:03:59.550 --> 00:04:00.570
So that's done 

91
00:04:00.580 --> 00:04:02.490
And that's how we can delete a node from the 

92
00:04:02.490 --> 00:04:02.980
beginning 

93
00:04:02.980 --> 00:04:06.210
Of the circular linked list So led us quickly revise it 

94
00:04:06.370 --> 00:04:09.770
So First we checked if the linked list is empty 

95
00:04:09.780 --> 00:04:10.830
and then we checked 

96
00:04:10.840 --> 00:04:13.710
If deletion is to be performed at the beginning that 

97
00:04:13.710 --> 00:04:14.420
is that head 

98
00:04:14.660 --> 00:04:16.960
So to delete from the beginning we can have two 

99
00:04:16.970 --> 00:04:21.070
cases deleting from a list having just one node and 

100
00:04:21.080 --> 00:04:23.850
from a list which is having more than one node 

101
00:04:24.440 --> 00:04:27.180
And if it is just one node simply make head 

102
00:04:27.190 --> 00:04:30.480
equal to null and if it is with multiple nodes then 

103
00:04:30.480 --> 00:04:32.480
we have to find the last node 

104
00:04:32.490 --> 00:04:34.910
Make it point to the second node and make the 

105
00:04:34.910 --> 00:04:36.580
second node the new head 

106
00:04:36.590 --> 00:04:39.450
Now let us see how to delete a node which 

107
00:04:39.450 --> 00:04:41.290
is not the head so let us 

108
00:04:41.290 --> 00:04:43.330
Delete 30 from this list 

109
00:04:43.340 --> 00:04:44.450
So first check 

110
00:04:44.540 --> 00:04:47.630
If this list is empty but it is not now 

111
00:04:47.630 --> 00:04:51.010
chek if Head dot data equal to Key and head 

112
00:04:51.010 --> 00:04:53.980
dot next equal to head but it fails 

113
00:04:53.990 --> 00:04:56.740
That is they are checking if head is the node 

114
00:04:56.740 --> 00:04:59.540
to be deleted or if it is the only node 

115
00:04:59.550 --> 00:05:00.880
But it fails here 

116
00:05:00.930 --> 00:05:03.950
So we need to check if head has the key and 

117
00:05:03.960 --> 00:05:05.180
it also fails here

118
00:05:05.370 --> 00:05:07.950
So we need to go to the else part that 

119
00:05:07.950 --> 00:05:10.910
is that node to be deleted is not the head 

120
00:05:11.100 --> 00:05:12.850
and it could be any other node 

121
00:05:13.240 --> 00:05:15.990
But we don't know whether node to be deleted is 

122
00:05:16.090 --> 00:05:18.330
and we don't know if it is present in this 

123
00:05:18.330 --> 00:05:19.090
list or not

124
00:05:19.180 --> 00:05:21.930
So what should we do We need to traverse the 

125
00:05:21.930 --> 00:05:22.980
list and check 

126
00:05:22.990 --> 00:05:27.800
If any node has given key so declared current pointing 

127
00:05:27.800 --> 00:05:30.680
to head we will start iterating from the head 

128
00:05:30.770 --> 00:05:31.900
till the last node 

129
00:05:32.230 --> 00:05:35.630
So we have the while loop while current dot next 

130
00:05:35.640 --> 00:05:39.350
not equal to head and then current next becomes head 

131
00:05:39.570 --> 00:05:43.080
we would have reach the last node and condition will fail 

132
00:05:43.090 --> 00:05:46.260
and loop will be terminated and we will get last 

133
00:05:46.260 --> 00:05:47.880
node pointed by current 

134
00:05:48.000 --> 00:05:51.540
So in each iteration we will check if the nodes 

135
00:05:51.540 --> 00:05:53.050
data equal to key 

136
00:05:53.540 --> 00:05:57.080
If so we have to make its previous node point 

137
00:05:57.080 --> 00:05:58.360
to its next node 

138
00:05:58.480 --> 00:06:00.220
So let us see how it works 

139
00:06:00.540 --> 00:06:04.490
So in first iteration current equal to head and current 

140
00:06:04.490 --> 00:06:06.890
next equal to 2000 and not head 

141
00:06:07.000 --> 00:06:10.640
So go inside and check If current next day data 

142
00:06:10.640 --> 00:06:13.750
equal to Key and we have current next equal to 2000 

143
00:06:13.840 --> 00:06:17.100
and the data at 2000 equal to 20 and not 

144
00:06:17.110 --> 00:06:19.040
key so the condition will fail 

145
00:06:19.140 --> 00:06:22.150
So skip the inner statements and move current to the 

146
00:06:22.150 --> 00:06:22.850
next node 

147
00:06:23.340 --> 00:06:26.550
So we have current equal to current dot Next 

148
00:06:26.940 --> 00:06:30.290
So current equal to 2000 now Now check the condition 

149
00:06:30.480 --> 00:06:33.590
and we have if current next not equal to head and 

150
00:06:33.590 --> 00:06:35.670
we have 3000 not equal to head 

151
00:06:35.770 --> 00:06:37.130
So the condition is okay 

152
00:06:37.140 --> 00:06:40.570
So go inside and check If current next data 

153
00:06:40.570 --> 00:06:44.020
equal to 30 and we have current next equal to 

154
00:06:44.020 --> 00:06:47.370
3000 and data 3000 equal to 30 

155
00:06:47.400 --> 00:06:50.890
So if is true and we found the key 30 

156
00:06:50.980 --> 00:06:52.840
is in the next node of current 

157
00:06:52.990 --> 00:06:55.760
That is next node of current is the node to 

158
00:06:55.760 --> 00:06:59.870
be deleted So right current dot next equal to current 

159
00:06:59.870 --> 00:07:02.810
dot next dot next and we can break out of 

160
00:07:02.820 --> 00:07:03.250
the loop 

161
00:07:03.640 --> 00:07:06.110
So that is how we delete a node other than 

162
00:07:06.110 --> 00:07:06.500
head 

163
00:07:06.640 --> 00:07:08.840
Now what if the key is not present in the 

164
00:07:08.840 --> 00:07:12.030
list then this while loop will be naturally is hosted

165
00:07:12.030 --> 00:07:15.000
that when current next becomes head and we will check 

166
00:07:15.010 --> 00:07:18.100
if current next equal to head and it will be 

167
00:07:18.100 --> 00:07:21.850
true so we can print Key is not found that 

168
00:07:21.850 --> 00:07:24.340
is delete the key 40 from this list 

169
00:07:24.650 --> 00:07:25.650
So first check 

170
00:07:25.660 --> 00:07:28.440
If the list is empty it is not then check 

171
00:07:28.450 --> 00:07:30.740
If head is the node to be deleted and it 

172
00:07:30.740 --> 00:07:31.770
also fails 

173
00:07:31.780 --> 00:07:34.610
So we come to the else part and Travers the 

174
00:07:34.610 --> 00:07:36.950
list to find the node to be deleted 

175
00:07:37.440 --> 00:07:40.960
So in first iteration current equal to head and current 

176
00:07:40.960 --> 00:07:44.110
next equal to 2000 which is not head so go 

177
00:07:44.110 --> 00:07:46.930
inside and check if current next data equal to 

178
00:07:46.930 --> 00:07:47.380
key 

179
00:07:47.390 --> 00:07:50.620
But current next data equal to 20 and not 

180
00:07:50.620 --> 00:07:51.770
the key 40 

181
00:07:51.780 --> 00:07:54.960
So the condition will fail so that inner statements 

182
00:07:54.960 --> 00:07:57.840
will be skipped and current will be moved to the 

183
00:07:57.840 --> 00:07:58.650
next node 

184
00:07:58.840 --> 00:08:02.200
So we have current equal to 2000 Now Now check 

185
00:08:02.200 --> 00:08:05.800
the condition if current next not equal to head and 

186
00:08:05.800 --> 00:08:07.700
3000 is not equal to head 

187
00:08:07.840 --> 00:08:11.190
So the condition is okay so go inside and check 

188
00:08:11.200 --> 00:08:13.040
If current next data equal to 

189
00:08:13.040 --> 00:08:17.220
40 and current next equal to 3000 and the data 

190
00:08:17.230 --> 00:08:19.030
at 3000 equal to 30 

191
00:08:19.040 --> 00:08:22.370
So if will fail so skip the inner statements and 

192
00:08:22.370 --> 00:08:25.700
move current to next node So we have current equal to 

193
00:08:25.710 --> 00:08:29.870
3000 and now check the condition if current next not 

194
00:08:29.880 --> 00:08:34.490
equal to head and we have 3000 next equal to 1000 

195
00:08:34.500 --> 00:08:38.110
which is head so condition will fail and control will 

196
00:08:38.110 --> 00:08:41.080
come out of the while Loop And we have travelled 

197
00:08:41.090 --> 00:08:43.730
the list completely and did not find the key 

198
00:08:43.790 --> 00:08:47.080
So check if current next equal to head and it 

199
00:08:47.080 --> 00:08:50.550
is which means the key is not present so we 

200
00:08:50.550 --> 00:08:53.850
can print it so that is how deletion can be 

201
00:08:53.850 --> 00:08:54.930
performed in circlar

202
00:08:54.930 --> 00:08:55.750
linked list 

203
00:08:56.540 --> 00:08:59.620
Now when we talk about the time complexity the best 

204
00:08:59.620 --> 00:09:02.590
case is when there is only one node in the list 

205
00:09:02.600 --> 00:09:05.240
and it is to be deleted it can be done 

206
00:09:05.240 --> 00:09:06.400
in constant time 

207
00:09:06.510 --> 00:09:09.500
So the time complexity will be order of one 

208
00:09:09.610 --> 00:09:12.290
Otherwise we have to search the linked list to find 

209
00:09:12.290 --> 00:09:14.750
the key which will take order of n time.

