WEBVTT

1
00:00:00.340 --> 00:00:00.980
hi friends 

2
00:00:00.990 --> 00:00:03.250
In this video we are going to discuss about passing 

3
00:00:03.250 --> 00:00:06.640
a pointer to a function and about functions returning pointers.

4
00:00:12.540 --> 00:00:14.410
So first of all let's discuss about 

5
00:00:14.410 --> 00:00:18.200
passing pointer to a function. So like passing a variable 

6
00:00:18.200 --> 00:00:18.900
to a function 

7
00:00:18.900 --> 00:00:21.360
We can also pass the address of a variable to 

8
00:00:21.360 --> 00:00:23.890
a function who we can say we can pass a 

9
00:00:23.890 --> 00:00:25.250
pointer to a function 

10
00:00:26.140 --> 00:00:29.819
So the function declaration for getting an integer variable address is 

11
00:00:29.820 --> 00:00:33.320
return type followed by function name followed by int *

12
00:00:33.320 --> 00:00:34.580
within parenthesis 

13
00:00:35.040 --> 00:00:38.500
Here * indicates that function is getting an address of 

14
00:00:38.500 --> 00:00:40.760
a variable and not the value of variable 

15
00:00:40.830 --> 00:00:43.410
Now if we need to pass address of two integer 

16
00:00:43.410 --> 00:00:46.270
variables then the function declaration can be like this 

17
00:00:46.550 --> 00:00:49.589
So to understand this better let's consider this simple C 

18
00:00:49.590 --> 00:00:50.210
programme 

19
00:00:50.250 --> 00:00:53.370
We have the main function and a user defined function 

20
00:00:53.370 --> 00:00:54.350
setToZero 

21
00:00:54.740 --> 00:00:57.840
So as we know execution begins from the main function 

22
00:00:57.930 --> 00:01:00.600
and we are declaring an integer variable a and 

23
00:01:00.610 --> 00:01:02.010
initialising it to 10 

24
00:01:02.410 --> 00:01:05.139
Now we have a printf statement printing 

25
00:01:05.140 --> 00:01:07.970
"before calling the function a =" and printing the value of a

26
00:01:07.980 --> 00:01:10.960
 which will print 10 And then we are calling 

27
00:01:10.960 --> 00:01:14.100
the function by passing the address of a. So control goes 

28
00:01:14.100 --> 00:01:16.890
to function definition and as the parameter we have a 

29
00:01:16.890 --> 00:01:19.490
pointer which will store the address of a which 

30
00:01:19.490 --> 00:01:20.800
is 1024 

31
00:01:21.440 --> 00:01:24.690
Next we have *a equal to zero that is value at a

32
00:01:24.700 --> 00:01:25.810
equal to zero 

33
00:01:25.940 --> 00:01:29.259
So at address 1024, value is set to zero 

34
00:01:29.370 --> 00:01:31.510
Now control returns to main function 

35
00:01:31.510 --> 00:01:34.320
And again we have a print statement which prints  

36
00:01:34.320 --> 00:01:37.330
"after calling the function a equal to" and prints the value of 

37
00:01:37.340 --> 00:01:38.470
a which is zero 

38
00:01:39.440 --> 00:01:41.640
So if we pass the address of a variable to 

39
00:01:41.640 --> 00:01:45.100
a function any changes on that variable will reflect in 

40
00:01:45.100 --> 00:01:46.650
actual value of variable 

41
00:01:47.040 --> 00:01:50.500
In our case the actual value of a is changed to 0 after 

42
00:01:50.500 --> 00:01:54.380
the execution of setToZero function. Now let us discuss 

43
00:01:54.380 --> 00:01:56.390
about functions returning pointers 

44
00:01:56.610 --> 00:01:59.860
So the syntax is return type * function name followed 

45
00:01:59.860 --> 00:02:02.620
by parameters within parenthesis and a semi colon 

46
00:02:03.140 --> 00:02:05.990
So here the * indicates that the function is returning 

47
00:02:05.990 --> 00:02:07.240
the address of a variable 

48
00:02:07.420 --> 00:02:10.110
For example suppose the function returns the address of an 

49
00:02:10.110 --> 00:02:11.170
integer variable 

50
00:02:11.320 --> 00:02:14.850
Then we have int * function name parameters and if 

51
00:02:14.850 --> 00:02:17.510
the function returns address of a character variable 

52
00:02:17.690 --> 00:02:21.630
Then we have char * function name and parameters.

53
00:02:21.630 --> 00:02:24.640
Now let us see a very simple programme to understand this. So we 

54
00:02:24.640 --> 00:02:27.860
have the main function and a user defined function Get 

55
00:02:28.540 --> 00:02:31.570
so execution begins from the main function and we have 

56
00:02:31.580 --> 00:02:34.200
int * ptr= get() that 

57
00:02:34.200 --> 00:02:37.440
is we are calling function get and whatever the function returns 

58
00:02:37.440 --> 00:02:41.109
will be stored in ptr. So control goes to function 

59
00:02:41.110 --> 00:02:44.480
Get and we can see the return type is int*.

60
00:02:44.480 --> 00:02:47.239
That is it returns and integer pointer or the address 

61
00:02:47.240 --> 00:02:50.830
of an integer variable. And here we are declaring 

62
00:02:50.830 --> 00:02:51.880
an integer variable i.

63
00:02:51.890 --> 00:02:57.650
Suppose it is created at 5024 and initialising to 100 

64
00:02:58.140 --> 00:03:01.380
Next we have return &i that is address of i

65
00:03:01.390 --> 00:03:04.950
which is 5024 will be returned to main function 

66
00:03:04.950 --> 00:03:07.670
and will be stored in ptr and the programme return 

67
00:03:07.670 --> 00:03:09.850
zero and it is completed successfully 

68
00:03:10.340 --> 00:03:12.630
So that's all and thank you for watching this video 

