WEBVTT

1
00:00:00.340 --> 00:00:01.120
Hi friends 

2
00:00:01.130 --> 00:00:04.110
In this video let us discuss about function pointer 

3
00:00:04.120 --> 00:00:05.150
applications 

4
00:00:11.140 --> 00:00:14.990
It's the first application is in dynamic binding. So a function 

5
00:00:14.990 --> 00:00:18.270
pointer provides an efficient way to bind function calls 

6
00:00:18.280 --> 00:00:19.660
at runtime.

7
00:00:19.660 --> 00:00:23.840
Let us see how. First of all, the function execution is decided 

8
00:00:23.840 --> 00:00:24.710
in two ways 

9
00:00:24.850 --> 00:00:25.680
First method 

10
00:00:25.680 --> 00:00:30.010
is early binding, static binding or compile time binding. Here 

11
00:00:30.020 --> 00:00:33.730
we have used if statement to decide the proper function 

12
00:00:33.890 --> 00:00:35.870
that is if c equal to '+' 

13
00:00:35.880 --> 00:00:38.750
Then we call the function sum and if c equal to '%'

14
00:00:38.750 --> 00:00:42.330
then we call the function mod. As in 

15
00:00:42.330 --> 00:00:43.640
the name it is static 

16
00:00:43.640 --> 00:00:47.420
So the compiler directly associates a function address to call 

17
00:00:47.420 --> 00:00:51.890
the function. Another way is dynamic binding or late binding 

18
00:00:51.900 --> 00:00:54.529
Or we can call it run time binding. Here 

19
00:00:54.590 --> 00:00:57.860
the required functions address is decided at runtime 

20
00:00:57.870 --> 00:01:01.980
Another application is that we can create generic functions using 

21
00:01:01.980 --> 00:01:03.310
function pointers 

22
00:01:03.390 --> 00:01:06.810
The perfect example is the built in quick sort function 

23
00:01:07.640 --> 00:01:11.360
The qsort function which has the arguments base address 

24
00:01:11.360 --> 00:01:14.170
of the array to be sorted, number of elements and 

25
00:01:14.170 --> 00:01:17.970
the size of each element and the comparison function which 

26
00:01:17.970 --> 00:01:20.229
compares two elements. Here 

27
00:01:20.240 --> 00:01:23.440
The comparator function is passed as a function pointer 

28
00:01:23.440 --> 00:01:27.280
using this function we can sort any data types 

29
00:01:27.290 --> 00:01:28.970
element and in any order 

30
00:01:29.170 --> 00:01:32.200
The plus point here is we can decide the comparison 

31
00:01:32.200 --> 00:01:35.810
function and can be returned based on our requirement 

32
00:01:36.840 --> 00:01:39.240
We just need to pass the address of our own 

33
00:01:39.240 --> 00:01:42.220
comparator to qsort function and it will do 

34
00:01:42.220 --> 00:01:42.840
the rest 

35
00:01:43.440 --> 00:01:46.690
The only requirement to the Comparator function is it should 

36
00:01:46.700 --> 00:01:49.670
take two pointer arguments say X and Y 

37
00:01:50.540 --> 00:01:53.350
So if we want to place both X and Y 

38
00:01:53.360 --> 00:01:55.470
equally we should return zero 

39
00:01:55.580 --> 00:01:58.050
If we want to place the value present in X 

40
00:01:58.050 --> 00:02:00.580
before the value present in Y we should return a 

41
00:02:00.580 --> 00:02:01.670
negative number 

42
00:02:01.680 --> 00:02:04.530
And finally if you want to place the value present in

43
00:02:04.540 --> 00:02:07.740
X after the value present in Y, then we should return 

44
00:02:07.740 --> 00:02:08.900
a positive number 

45
00:02:09.070 --> 00:02:11.450
So let discuss an example 

46
00:02:11.740 --> 00:02:16.600
Let's sort these five elements 10 5 20 8 and 12 

47
00:02:16.610 --> 00:02:20.990
Using qsort function we should define our comparator function 

48
00:02:20.990 --> 00:02:21.530
Here 

49
00:02:21.540 --> 00:02:26.180
We have created cmpInt function and passing that function 

50
00:02:26.180 --> 00:02:27.090
address to sort 

51
00:02:27.090 --> 00:02:27.880
The elements 

52
00:02:28.090 --> 00:02:31.740
After the execution of qsort function the output will 

53
00:02:31.740 --> 00:02:34.829
be 5 8 10 12 20 

54
00:02:35.340 --> 00:02:37.880
We can sort the same elements in descending order 

55
00:02:37.880 --> 00:02:41.859
By changing our logic. Here we can interchange X and 

56
00:02:41.860 --> 00:02:42.240
y 

57
00:02:42.560 --> 00:02:45.370
Now if we pass this function address to qsort 

58
00:02:45.370 --> 00:02:49.359
function after the execution it will print the numbers in 

59
00:02:49.360 --> 00:02:54.339
descending order like 20 12 10 8 and 5 

60
00:02:54.840 --> 00:02:58.519
Likewise using the same qsort function we can sort

61
00:02:58.520 --> 00:03:02.109
data of any data type see another example here 

62
00:03:02.170 --> 00:03:06.790
Here we are sorting structure student details based on age 

63
00:03:06.800 --> 00:03:10.180
by defining our own comparator function and passing it to 

64
00:03:10.180 --> 00:03:11.329
qsort function 

65
00:03:11.420 --> 00:03:15.850
Here we have defined our own comparator function named 

66
00:03:15.860 --> 00:03:20.459
cmpAge using the student age and passing it to  

67
00:03:20.460 --> 00:03:21.320
qsort function 

68
00:03:21.440 --> 00:03:24.679
So after the execution of qsort function the output 

69
00:03:24.680 --> 00:03:27.620
will be student details sorted in age order 

70
00:03:27.630 --> 00:03:30.980
As you can see here we can also sort student 

71
00:03:30.980 --> 00:03:34.859
structure based on roll number by defining our on comparator 

72
00:03:34.860 --> 00:03:37.590
function and passing it to qsort function 

73
00:03:37.600 --> 00:03:41.740
Here we have defined our own function named cmpRoll 

74
00:03:41.790 --> 00:03:45.160
using the student roll number and passing it to  

75
00:03:45.160 --> 00:03:45.970
qsort function 

76
00:03:46.050 --> 00:03:49.109
So here after the execution of this function the output 

77
00:03:49.110 --> 00:03:51.990
will be all the student details sorted in the order 

78
00:03:51.990 --> 00:03:52.950
of roll number 

79
00:03:53.340 --> 00:03:55.850
So that is how we can use function pointers to 

80
00:03:55.850 --> 00:03:57.140
write generic functions 

81
00:03:57.150 --> 00:03:59.840
And it can also be applied in dynamic binding 

82
00:04:00.740 --> 00:04:03.040
So that's all and thank you for watching this video 

