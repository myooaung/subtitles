WEBVTT

1
00:00:00.240 --> 00:00:01.240
Hello friends 

2
00:00:01.250 --> 00:00:06.140
In this video let us discuss about quadratic probing In 

3
00:00:06.140 --> 00:00:09.750
the previous videos we learned about linear probing which is 

4
00:00:09.750 --> 00:00:14.060
one method to handle and avoid collision here if any 

5
00:00:14.060 --> 00:00:14.580
collision 

6
00:00:14.580 --> 00:00:18.230
occurs we are linearly checking for the available index 

7
00:00:18.240 --> 00:00:19.100
one by one 

8
00:00:19.120 --> 00:00:22.440
So in linear probing if any collision occurs the 

9
00:00:22.440 --> 00:00:26.540
formula to calculate the new key value is F(x) 

10
00:00:26.550 --> 00:00:29.580
equal to x+I mod size 

11
00:00:29.640 --> 00:00:34.660
Were I equal to 123 for etcetera And what is 

12
00:00:34.660 --> 00:00:38.910
it Disadvantage here as we're placing elements linearly once 

13
00:00:38.910 --> 00:00:39.440
collision 

14
00:00:39.440 --> 00:00:43.520
occurs the consecutive elements will form a cluster so 

15
00:00:43.530 --> 00:00:46.600
after that it will be very hard to find the 

16
00:00:46.600 --> 00:00:48.150
next available index 

17
00:00:48.610 --> 00:00:51.600
And also if the cluster has many elements it will 

18
00:00:51.600 --> 00:00:53.470
be hard to search for an element 

19
00:00:53.630 --> 00:00:57.150
And we can eliminate this issue by using quadratic probing 

20
00:00:57.740 --> 00:01:01.630
in quadratic probing Instead of looking for the next slot 

21
00:01:01.640 --> 00:01:04.250
we are looking for the next i square slot 

22
00:01:04.840 --> 00:01:08.250
That is if the require index is not available 

23
00:01:08.740 --> 00:01:11.130
What did we do in linear probing We will check 

24
00:01:11.130 --> 00:01:14.460
the immediate next slot and if it is also not 

25
00:01:14.460 --> 00:01:17.820
available we will check the next slot like that but 

26
00:01:17.820 --> 00:01:21.710
in quadratic probing if collision occurs we will check 

27
00:01:21.820 --> 00:01:24.970
the next slot first and if it is not available 

28
00:01:25.220 --> 00:01:28.610
then we will check the slot after two square elements 

29
00:01:28.620 --> 00:01:32.240
That is the fourth slot and if it is also 

30
00:01:32.240 --> 00:01:35.630
not available we will check this slot after three square 

31
00:01:35.630 --> 00:01:39.900
elements that is like that so it will avoid the 

32
00:01:39.900 --> 00:01:43.450
cluster by distributing elements in various indices 

33
00:01:44.040 --> 00:01:46.760
So in quadratic probing if any collision 

34
00:01:46.760 --> 00:01:50.210
occurs the formula to calculate the new key value 

35
00:01:50.220 --> 00:01:54.490
is F(X) equal to x plus i square 

36
00:01:54.520 --> 00:02:00.960
Mod size were equal to 1234 etc so there is no 

37
00:02:00.960 --> 00:02:04.420
chance of clustering and it will make the searching process 

38
00:02:04.430 --> 00:02:04.830
easier 

39
00:02:04.830 --> 00:02:09.130
Also finding the next available index will also be 

40
00:02:09.130 --> 00:02:10.950
easy in quadratic probing.

