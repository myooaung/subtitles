WEBVTT

1
00:00:00.840 --> 00:00:03.600
in this video let us learn how to implement a 

2
00:00:03.600 --> 00:00:05.450
stack using a linked list 

3
00:00:06.440 --> 00:00:09.240
We know we can implement a stack using an array 

4
00:00:09.240 --> 00:00:09.550


5
00:00:09.940 --> 00:00:13.530
But if we implement the stack using an array we 

6
00:00:13.530 --> 00:00:16.500
need to specify the arrays size at the beginning 

7
00:00:16.710 --> 00:00:18.330
That is at compile time 

8
00:00:18.530 --> 00:00:21.400
We cannot change the size of an array at run time 

9
00:00:21.400 --> 00:00:24.660
so it will only work for a fixed number 

10
00:00:24.660 --> 00:00:25.460
of elements 

11
00:00:25.740 --> 00:00:29.000
And the solution to this problem is we can implement 

12
00:00:29.000 --> 00:00:32.400
the stack using the linked list in a linked list 

13
00:00:32.440 --> 00:00:36.790
We can change its size at runtime so let's see 

14
00:00:36.790 --> 00:00:39.360
how to perform push and pop operation 

15
00:00:39.490 --> 00:00:43.400
When we implement stack using linked list we should create 

16
00:00:43.400 --> 00:00:46.620
the linked list in reverse order so that the head 

17
00:00:46.620 --> 00:00:50.190
node will always point the last inserted data 

18
00:00:50.400 --> 00:00:53.450
So first let us push a value into the stack 

19
00:00:54.140 --> 00:00:57.000
and had first the stack is empty so 

20
00:00:57.000 --> 00:01:00.120
node head equal to null and we have the push 

21
00:01:00.120 --> 00:01:03.530
function to push a value into the stack and we 

22
00:01:03.530 --> 00:01:06.950
will pass the value to be inserted into this function 

23
00:01:07.340 --> 00:01:11.770
so we have public void push of into val let 

24
00:01:11.770 --> 00:01:14.020
the value to be inserted be 10 

25
00:01:14.110 --> 00:01:17.070
First we have to create a new node to store 

26
00:01:17.070 --> 00:01:17.850
this value 

27
00:01:18.640 --> 00:01:22.950
So write node new node equal to new node 

28
00:01:23.440 --> 00:01:25.110
So a new node is created 

29
00:01:25.310 --> 00:01:27.520
And now we need to add the value to it 

30
00:01:27.750 --> 00:01:31.150
So write new node dot data equal to val 

31
00:01:31.640 --> 00:01:33.650
So 10 is added to this node 

32
00:01:34.040 --> 00:01:37.150
Now the node is ready and what can be inserted 

33
00:01:37.640 --> 00:01:39.570
It should be inserted before the head 

34
00:01:39.850 --> 00:01:42.100
That is It should point the head 

35
00:01:42.460 --> 00:01:43.190
So write 

36
00:01:43.370 --> 00:01:47.310
New node dot Next equal to head and make it 

37
00:01:47.320 --> 00:01:48.710
the head of the list 

38
00:01:49.060 --> 00:01:51.450
So write head equal to new node 

39
00:01:52.140 --> 00:01:54.850
So one element is inserted into this stack 

40
00:01:55.340 --> 00:01:59.050
Now let us insert another element 20 to this stack 

41
00:01:59.440 --> 00:02:03.660
So call push of 20 and used new to create 

42
00:02:03.660 --> 00:02:04.350
a new node 

43
00:02:04.840 --> 00:02:06.540
So a new node is created 

44
00:02:06.660 --> 00:02:09.050
And now we need to add the value to it 

45
00:02:09.440 --> 00:02:12.850
So write New node dot data equal to val 

46
00:02:13.240 --> 00:02:17.310
so twenties is stored in it So the node is created with the value 

47
00:02:17.420 --> 00:02:20.240
and it should be pushed at the top of stack 

48
00:02:20.250 --> 00:02:22.790
or before the last inserted element 

49
00:02:23.040 --> 00:02:24.320
That is before head 

50
00:02:24.540 --> 00:02:26.170
So it should point to head 

51
00:02:26.450 --> 00:02:30.200
So write New node dot Next equal to head and 

52
00:02:30.200 --> 00:02:32.850
now may get the head of the linked list 

53
00:02:33.340 --> 00:02:37.600
Now let us insert another element 30 to this stack so call 

54
00:02:37.780 --> 00:02:41.390
push of 30 so created new node and now add 

55
00:02:41.390 --> 00:02:44.450
the value to it so 30 is stored in it 

56
00:02:44.690 --> 00:02:47.410
Now this new node should point to head 

57
00:02:47.500 --> 00:02:50.850
So we have new node dot next equal to head 

58
00:02:51.240 --> 00:02:54.130
And now make the new node the head of the 

59
00:02:54.130 --> 00:02:54.850
linked list 

60
00:02:55.540 --> 00:02:58.430
So that is how push operation can be performed 

61
00:02:58.770 --> 00:03:01.970
Now let us see how to perform pop operation 

62
00:03:02.070 --> 00:03:05.690
So we know push and Pop operation is performed at the 

63
00:03:05.700 --> 00:03:06.850
top of the stack 

64
00:03:07.340 --> 00:03:09.910
So from where should be delete the element from this 

65
00:03:09.910 --> 00:03:10.350
list 

66
00:03:10.740 --> 00:03:13.530
It should be the head element which is poped and 

67
00:03:13.530 --> 00:03:15.950
the next element will become the new head 

68
00:03:16.440 --> 00:03:18.450
So let us see this pop function 

69
00:03:18.840 --> 00:03:21.250
So we have public void pop 

70
00:03:21.740 --> 00:03:24.780
And when we call this pop function the element at 

71
00:03:24.790 --> 00:03:27.660
the top of this stack that his head of linked 

72
00:03:27.660 --> 00:03:28.950
list will be removed 

73
00:03:29.440 --> 00:03:33.090
So first check If the stack is empty that is 

74
00:03:33.100 --> 00:03:35.850
if the head is null And if it is then 

75
00:03:35.850 --> 00:03:39.160
deletion is not possible since there are no elements to 

76
00:03:39.160 --> 00:03:43.230
delete so Print stack is empty but here it is 

77
00:03:43.230 --> 00:03:44.850
Not so Goto else 

78
00:03:44.850 --> 00:03:47.630
part and print the element which is to be poped 

79
00:03:48.000 --> 00:03:51.750
so Print popped element is head dot data 

80
00:03:52.240 --> 00:03:55.270
So we will get the output popped element equal to 

81
00:03:55.270 --> 00:03:55.850
30 

82
00:03:56.440 --> 00:03:59.140
Now we need to delete the head and make this 

83
00:03:59.140 --> 00:04:00.450
second node the head 

84
00:04:00.840 --> 00:04:03.390
So we have head equal to head dot 

85
00:04:03.390 --> 00:04:03.950
Next 

86
00:04:04.340 --> 00:04:07.120
So second node is the head now and that is 

87
00:04:07.120 --> 00:04:09.750
how we can perform pop operation 

88
00:04:10.240 --> 00:04:13.440
Now let us call pop again and first check if 

89
00:04:13.440 --> 00:04:14.820
the stack is empty 

90
00:04:14.830 --> 00:04:17.670
But it is not so go to else and print 

91
00:04:17.670 --> 00:04:19.050
the element at top 

92
00:04:19.440 --> 00:04:22.800
So we will get popped element to 20 and now 

93
00:04:22.800 --> 00:04:26.410
make this second node The head by writing head equal 

94
00:04:26.410 --> 00:04:30.110
to head dot Next So head equal to 1000 now and 

95
00:04:30.110 --> 00:04:33.870
the pop operation is completed now let us call pop 

96
00:04:33.880 --> 00:04:34.450
again 

97
00:04:34.840 --> 00:04:37.870
So first check if stack is empty But it is 

98
00:04:37.870 --> 00:04:40.750
not so go to else and print the element at 

99
00:04:40.760 --> 00:04:41.240
top 

100
00:04:41.250 --> 00:04:44.370
So we will get popped Element equal to 10 And 

101
00:04:44.370 --> 00:04:46.220
make this second node the head 

102
00:04:46.560 --> 00:04:50.590
So now head equal to null now call pop again 

103
00:04:50.780 --> 00:04:53.690
And in the function First we check If head 

104
00:04:53.690 --> 00:04:55.490
equal to null and it is true 

105
00:04:55.670 --> 00:04:59.320
So it prints Stack is empty so that is how 

106
00:04:59.320 --> 00:05:02.270
we can perform push and pop operation in a stack 

107
00:05:02.280 --> 00:05:03.450
using linked list 

108
00:05:03.940 --> 00:05:07.550
Now let us discuss about the time complexity as we 

109
00:05:07.550 --> 00:05:11.460
Just learnt in push operation the only need is to create 

110
00:05:11.460 --> 00:05:13.780
the node with the value and make it a point 

111
00:05:13.780 --> 00:05:14.230
to head

112
00:05:14.580 --> 00:05:16.710
So only a constant time is needed 

113
00:05:16.890 --> 00:05:19.550
So the time complexity is order of one 

114
00:05:20.140 --> 00:05:24.180
Similarly in pop operation we only needed to check if 

115
00:05:24.180 --> 00:05:25.480
the stack is empty 

116
00:05:25.670 --> 00:05:29.190
Otherwise we deleted the head and made the next node 

117
00:05:29.190 --> 00:05:31.830
the head which only takes a constant time 

118
00:05:32.320 --> 00:05:34.950
So the time complexity is order of one. 

