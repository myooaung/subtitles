WEBVTT

1
00:00:00.140 --> 00:00:03.380
Hi friends in this video let us discuss about accessing 

2
00:00:03.380 --> 00:00:05.090
a string using a pointer 

3
00:00:11.240 --> 00:00:14.650
So using a character pointer we can access  a string.

4
00:00:15.040 --> 00:00:17.970
So let us see an example. Here we have a 

5
00:00:17.970 --> 00:00:20.050
string str equal to Hello 

6
00:00:20.540 --> 00:00:23.550
Now we declare a character pointer ptr 

7
00:00:23.940 --> 00:00:26.970
Now we assign the base address of the string to the 

8
00:00:26.970 --> 00:00:30.030
Pointer. Recall that the name of the string holds the 

9
00:00:30.030 --> 00:00:31.350
base address of the string

10
00:00:31.840 --> 00:00:35.860
So 1024 is stored in ptr so 

11
00:00:35.860 --> 00:00:36.960
ptr+0 points 

12
00:00:36.960 --> 00:00:38.770
the first character ptr+1

13
00:00:38.770 --> 00:00:41.710
 points to the second character ptr+2 

14
00:00:41.710 --> 00:00:44.460
 points to the third character and so on.

15
00:00:45.240 --> 00:00:48.059
Now let us see how to print the address of 

16
00:00:48.070 --> 00:00:50.059
each character using pointers 

17
00:00:50.070 --> 00:00:54.310
So see this example program. In main first we declare

18
00:00:54.310 --> 00:00:58.530
the string str equal to Hello and now we declare 

19
00:00:58.530 --> 00:01:01.360
a character pointer ptr and an integer variable i

20
00:01:01.360 --> 00:01:04.570
 and now we assign the base address of 

21
00:01:04.580 --> 00:01:08.890
the string to ptr as we did just before. Now using 

22
00:01:08.890 --> 00:01:12.240
a for loop we print &str[i] or 

23
00:01:12.250 --> 00:01:15.000
address of str[i] equal to ptr+i

24
00:01:15.000 --> 00:01:17.580
 till we reach the null character 

25
00:01:18.240 --> 00:01:21.870
So in the first iteration we get &str[0]

26
00:01:21.870 --> 00:01:27.200
 equal to 1024. In second iteration we get &str[1]

27
00:01:27.200 --> 00:01:29.340
equal to 1025 

28
00:01:29.630 --> 00:01:33.110
In the third iteration, we get &str[2]

29
00:01:33.110 --> 00:01:34.809
equal to 1026 

30
00:01:35.030 --> 00:01:38.700
In fourth iteration, we get &str[3] 

31
00:01:38.700 --> 00:01:43.170
equal to 1027 and in fifth iteration we get &str[4] 

32
00:01:43.170 --> 00:01:47.230
 equal to 1028. In sixth iteration 

33
00:01:47.400 --> 00:01:50.750
The condition fails since we have reached the null character 

34
00:01:51.540 --> 00:01:54.270
Now let us see how to print each character of 

35
00:01:54.270 --> 00:01:55.880
a string using pointers 

36
00:01:56.140 --> 00:01:59.640
We have to use value at operator * to access 

37
00:01:59.640 --> 00:02:02.190
the value stored in a particular memory location 

38
00:02:02.200 --> 00:02:06.220
Here we can access the first character H using  

39
00:02:06.220 --> 00:02:11.570
*(ptr+0). second character e using *(ptr+1)

41
00:02:11.700 --> 00:02:15.109
We can access the third character l using 

42
00:02:15.120 --> 00:02:17.880
*(ptr+2) and fourth character l 

43
00:02:17.880 --> 00:02:20.489
using *(ptr+3) and fifth 

44
00:02:20.490 --> 00:02:23.970
character using *(ptr+4) and finally 

45
00:02:23.970 --> 00:02:27.450
the sixth character using *(ptr+5) 

46
00:02:28.340 --> 00:02:31.679
So consider the C programme to print each character in 

47
00:02:31.680 --> 00:02:34.170
in a string until we reach the null character 

48
00:02:34.470 --> 00:02:37.620
So we create the string str equal to Hello and 

49
00:02:37.620 --> 00:02:38.550
pointer ptr 

50
00:02:38.550 --> 00:02:38.660


51
00:02:38.660 --> 00:02:42.490
And integer variable i and we assign the array 

52
00:02:42.490 --> 00:02:46.100
base address to ptr. Now in a for loop we print 

53
00:02:46.110 --> 00:02:48.730
each character. In each iteration 

54
00:02:48.740 --> 00:02:51.580
We print value at ptr+i which 

55
00:02:51.580 --> 00:02:55.810
is equivalent to ptr[i]. In the first iteration 

56
00:02:55.920 --> 00:02:59.060
str[zero] is printed which is *(ptr+0)

57
00:02:59.060 --> 00:03:03.770
 equal to H. In second iteration str[1] 

58
00:03:03.770 --> 00:03:06.230
 is printed which is *(ptr+1)

59
00:03:06.230 --> 00:03:10.709
 equal to e and in third iteration str[2] 

60
00:03:10.720 --> 00:03:13.390
is printed which is *(ptr+2)

61
00:03:13.390 --> 00:03:15.570
equal to l. In fourth 

62
00:03:15.570 --> 00:03:18.859
iteration str[3] is printed which is 

63
00:03:18.860 --> 00:03:22.910
*(ptr+3) equal to l. In fifth iteration 

64
00:03:23.030 --> 00:03:25.760
str[4] is printed which is *(ptr+4)

65
00:03:25.760 --> 00:03:25.920


66
00:03:25.920 --> 00:03:30.310
equal to o. In sixth iteration str[5] 

67
00:03:30.310 --> 00:03:32.030
equal to null character 

68
00:03:32.200 --> 00:03:34.950
So control comes out of the for loop and return 

69
00:03:34.950 --> 00:03:35.470
zero 

70
00:03:35.940 --> 00:03:39.359
Now let us see how to manipulate characters of a string

71
00:03:39.370 --> 00:03:40.740
using pointers 

72
00:03:41.340 --> 00:03:44.609
Let's change the fourth character or the character at index 3

73
00:03:44.610 --> 00:03:46.600
which is l to o

74
00:03:47.040 --> 00:03:48.190
So see this programme here

75
00:03:48.190 --> 00:03:51.090
we create the string, the pointer and the  

76
00:03:51.090 --> 00:03:54.780
integer variable. Now we print the string and we get 

77
00:03:54.790 --> 00:03:58.680
h e l l o printed and we assign the base address 

78
00:03:58.680 --> 00:03:59.950
of array to ptr

79
00:04:00.110 --> 00:04:01.429
That is 1024

80
00:04:01.430 --> 00:04:05.100
Now we set *(ptr+3)

81
00:04:05.110 --> 00:04:07.549
that is fourth character to  'o'

82
00:04:08.140 --> 00:04:12.310
The new string will be H e l o o and now 

83
00:04:12.310 --> 00:04:16.010
we print it and we get  h e l o o printed. 

84
00:04:16.540 --> 00:04:19.280
So this is how we can access or even modify 

85
00:04:19.280 --> 00:04:21.729
characters of a string using pointers. 

86
00:04:22.540 --> 00:04:24.830
So that's all and thank you for watching this video 

