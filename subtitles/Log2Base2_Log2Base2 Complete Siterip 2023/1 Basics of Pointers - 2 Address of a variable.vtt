WEBVTT

1
00:00:01.040 --> 00:00:01.750
Hi friends 

2
00:00:01.760 --> 00:00:06.030
In this video we are going to discuss about address of variables

3
00:00:11.230 --> 00:00:13.709
So consider this C code 

4
00:00:13.720 --> 00:00:17.150
First we have an integer variable declaration statement for var 

5
00:00:17.300 --> 00:00:18.750
and is initialised to 10

6
00:00:19.200 --> 00:00:21.470
And we have learned that an integer datatype 

7
00:00:21.470 --> 00:00:22.920
takes four bytes of memory 

8
00:00:23.220 --> 00:00:26.570
So four bytes will be allocated to variable var.  

9
00:00:26.570 --> 00:00:29.750
Suppose it if from address 1024 to 1027 

10
00:00:30.040 --> 00:00:33.460
And for this block the starting address is 1024 and it 

11
00:00:33.460 --> 00:00:35.440
is also called as the base address 

12
00:00:36.040 --> 00:00:38.550
Now the data which is 10 will be stored here 

13
00:00:38.560 --> 00:00:39.450
in this block 

14
00:00:39.840 --> 00:00:42.300
Now the second line of code is a printf statement 

15
00:00:42.300 --> 00:00:44.550
which prints the integer &var 

16
00:00:44.940 --> 00:00:47.489
So & symbol is used to get the address 

17
00:00:47.490 --> 00:00:48.550
of any variable 

18
00:00:49.040 --> 00:00:52.110
So here this statement will print the address of var 

19
00:00:52.120 --> 00:00:53.070
which is 1024 

20
00:00:53.070 --> 00:00:55.410
 that is the base address of the block of 

21
00:00:55.410 --> 00:00:55.760
memory 

22
00:00:55.760 --> 00:00:57.550
allocated to var is printed 

23
00:00:58.040 --> 00:01:00.840
Now we have another printf statement here again 

24
00:01:00.840 --> 00:01:04.190
it prints an integer &var+1 and what you 

25
00:01:04.190 --> 00:01:06.080
think will be printed by this statement?

26
00:01:06.280 --> 00:01:09.500
We have &var+1 and we know 

27
00:01:09.510 --> 00:01:10.480
&var equal to 1024 

28
00:01:10.480 --> 00:01:15.180
So 1024+1 equal to 1025.

29
00:01:15.180 --> 00:01:18.730
Is it the right output? Actually not! because since var is an 

30
00:01:18.730 --> 00:01:22.039
integer type, compiler know that var must have taken four 

31
00:01:22.040 --> 00:01:22.470
bytes 

32
00:01:22.630 --> 00:01:25.180
So when it is incremented, it will be incremented by 

33
00:01:25.180 --> 00:01:28.050
four bytes that is size of integer

34
00:01:28.440 --> 00:01:32.150
So this printf statement will be printing 1028 

35
00:01:32.540 --> 00:01:35.280
Now suppose var is a character type variable and it's 

36
00:01:35.280 --> 00:01:36.860
address is 1024 

37
00:01:37.120 --> 00:01:39.590
And now if we increment it, it will be incremented 

38
00:01:39.590 --> 00:01:42.339
by size of character which is one byte and 

39
00:01:42.340 --> 00:01:46.850
will print 1025. Again take the same case and suppose 

40
00:01:46.850 --> 00:01:47.650
it was double 

41
00:01:47.950 --> 00:01:50.560
Then it would get incremented by eight bytes which is 

42
00:01:50.560 --> 00:01:53.550
the size of double and will print 1032 

43
00:01:54.100 --> 00:01:57.270
Now come back to our code here with integer 

44
00:01:57.270 --> 00:01:59.619
type var and starting address 1024 

45
00:01:59.620 --> 00:02:02.700
 now suppose we had to print one more value 

46
00:02:02.700 --> 00:02:04.680
which is &var+5

47
00:02:05.000 --> 00:02:07.899
So how is that going to be calculated? Take the 

48
00:02:07.900 --> 00:02:10.460
base address of var which is 1024 

49
00:02:10.470 --> 00:02:13.710
We have to increment five times. so five times the size 

50
00:02:13.710 --> 00:02:14.450
of integer

51
00:02:14.640 --> 00:02:18.530
So 1024+(5 * size of integer) which 

52
00:02:18.530 --> 00:02:22.480
is 5 * 4 that is 20. So 1024 +20 

53
00:02:22.480 --> 00:02:24.350
equal to 1044 

54
00:02:24.740 --> 00:02:27.500
So in general we can say if we add 

55
00:02:27.510 --> 00:02:30.260
N to a variable address the output will be the base 

56
00:02:30.260 --> 00:02:32.840
address + N * size of the data type 

57
00:02:33.640 --> 00:02:35.920
So that's all and thank you for watching this video 

