WEBVTT

1
00:00:00.140 --> 00:00:01.020
Hello friends 

2
00:00:01.150 --> 00:00:04.770
In this video let us have an introduction to dynamic 

3
00:00:04.780 --> 00:00:05.450
programming. 

4
00:00:11.140 --> 00:00:16.060
So what is dynamic programming? Dynamic programming is one best 

5
00:00:16.060 --> 00:00:20.350
method to solve the optimisation problems in linear time. 

6
00:00:21.130 --> 00:00:24.310
Let us see how to solve a problem in dynamic 

7
00:00:24.310 --> 00:00:25.050
programming.

8
00:00:25.640 --> 00:00:30.050
First the problem will be divided into multiple sub problems 

9
00:00:30.440 --> 00:00:35.020
Secondly solve the sub problems and store the result and 

10
00:00:35.020 --> 00:00:40.080
finally using the result of sub problems, solve another big 

11
00:00:40.080 --> 00:00:44.180
sub problem and continuously follow this approach to solve 

12
00:00:44.190 --> 00:00:45.400
The large problem.

13
00:00:45.610 --> 00:00:49.080
There are two kinds of approach in dynamic programming 

14
00:00:49.540 --> 00:00:53.070
First is bottom up approach and the second one is 

15
00:00:53.080 --> 00:00:54.350
top down approach.

16
00:00:55.010 --> 00:00:58.930
Let us understand them one by one. In the bottom 

17
00:00:58.930 --> 00:01:03.140
up approach, the base solution will be taken first. 

18
00:01:03.140 --> 00:01:03.820
From the bottom, 

19
00:01:04.070 --> 00:01:07.950
The problem will be solved step by step like this. 

20
00:01:08.340 --> 00:01:13.140
Finally we will have the result of big problem. 

21
00:01:13.140 --> 00:01:14.590
In the top down approach, 

22
00:01:14.770 --> 00:01:17.980
The main problem is recursively broken down into 

23
00:01:17.980 --> 00:01:19.550
multiple sub problems. 

24
00:01:19.940 --> 00:01:23.770
The breakdown will happen until the base case is reached. 

25
00:01:24.740 --> 00:01:28.450
And then from there, the solution will be computed like 

26
00:01:28.450 --> 00:01:28.880
this 

27
00:01:29.540 --> 00:01:34.570
Let us understand it using the nth Fibonacci example 

28
00:01:34.730 --> 00:01:38.710
here the problem statement is given n and we need to return 

29
00:01:38.710 --> 00:01:39.200


30
00:01:38.710 --> 00:01:44.490
the nth Fibonacci number from the series. The fibonacci Series is 

31
00:01:44.490 --> 00:01:49.560
Fibonacci of 0 is 0, Fibonacci of 1 is 1 

32
00:01:49.570 --> 00:01:52.290
Fibonaaci of 2 is sum of fib(0) and fib(1)

33
00:01:52.600 --> 00:01:54.850
that is 0+1 equal to one 

34
00:01:55.240 --> 00:01:59.720
Fibonaaci of 3 is sum of fib(1) and fib(2) 

35
00:01:59.720 --> 00:02:01.830
which is 1+1 equal to 2

36
00:02:01.840 --> 00:02:07.500
 And like this, in general,

37
00:02:07.500 --> 00:02:11.950
Fibonacci(N) = Fibonacci(N-1) + Fibonacci(N-2). 

38
00:02:09.790 --> 00:02:11.950


39
00:02:12.440 --> 00:02:15.150
Let us find the 4th Fibonacci number 

40
00:02:15.160 --> 00:02:18.650
using the bottom up approach and top down approach 

41
00:02:19.240 --> 00:02:21.650
Let us see the bottom up approach first 

42
00:02:22.150 --> 00:02:25.620
As we have discussed in the bottom up approach, we 

43
00:02:25.620 --> 00:02:26.850
solved the problem 

44
00:02:26.860 --> 00:02:29.300
Step by step from the base case 

45
00:02:29.740 --> 00:02:30.120
Here 

46
00:02:30.120 --> 00:02:33.340
What is the base case? Fibonacci of zero is zero 

47
00:02:33.340 --> 00:02:34.740
and Fibonacci of One  is one. 

48
00:02:34.740 --> 00:02:40.150
So write 0 in Fib(0) & 1 in Fib(1). 

49
00:02:36.090 --> 00:02:40.150


50
00:02:40.820 --> 00:02:42.720
Let us solve one by one 

51
00:02:42.910 --> 00:02:47.520
What will be  Fib(2)? It is Fib(0) + Fib(1)

52
00:02:45.650 --> 00:02:47.520


53
00:02:47.700 --> 00:02:51.570
That is the sum of previous two Fibonacci numbers 

54
00:02:51.870 --> 00:02:55.960
So fib(2) equal to 0+1 that is 1.

55
00:02:55.370 --> 00:02:55.960
 

56
00:02:56.640 --> 00:03:02.060
Now we have solved one sub problem that is fib(2). Using this,

57
00:03:00.230 --> 00:03:02.060


58
00:03:02.260 --> 00:03:04.870
Let us solve the next sub problem 

59
00:03:04.990 --> 00:03:05.950
Fib(3) 

60
00:03:06.340 --> 00:03:08.980
It will be the sum of fib(1) and fib(2) 

61
00:03:08.980 --> 00:03:12.580
that is 1+1 which is 2 

62
00:03:13.030 --> 00:03:17.000
now we have solved another sub problem.  Let's again  

63
00:03:17.000 --> 00:03:17.380
use

64
00:03:17.390 --> 00:03:20.750
This result to compute the next problem's result 

65
00:03:21.140 --> 00:03:24.370
So Fib(4) will be the sum of fib(2) 

66
00:03:24.380 --> 00:03:25.420
and fib(3)

67
00:03:25.750 --> 00:03:28.250
So 1+2 which is what? Three. 

68
00:03:28.820 --> 00:03:31.880
Now we have found the forth fibonacci number which 

69
00:03:31.880 --> 00:03:32.450
is three. 

70
00:03:32.940 --> 00:03:36.410
This is how in bottom up approach we solve a 

71
00:03:36.410 --> 00:03:39.660
big problem step by step from the base case. 

72
00:03:40.320 --> 00:03:43.500
In each step, we solve one sub problem 

73
00:03:43.700 --> 00:03:47.130
And using that solution, we will solve the next sub 

74
00:03:47.130 --> 00:03:48.620
problem in the next step.

75
00:03:49.340 --> 00:03:52.570
Let us understand how it is solved in the top 

76
00:03:52.570 --> 00:03:53.550
down approach. 

77
00:03:54.120 --> 00:03:58.430
The general formula to find nth Fibonacci number is 

78
00:03:58.430 --> 00:04:03.250
Fib(N-1) + Fib(N-2).

79
00:04:01.740 --> 00:04:03.250


80
00:04:03.710 --> 00:04:08.200
So to find Fib(4) the top-down approach will call

81
00:04:07.220 --> 00:04:08.200


82
00:04:08.200 --> 00:04:12.380
Fib(4-1) that is 3 and Fib(4-2) that is 2. 

83
00:04:11.930 --> 00:04:12.380


84
00:04:12.380 --> 00:04:16.050
Similarly Fib(3) will call Fib(3-1)

85
00:04:16.050 --> 00:04:22.950
 that is fib(2) and fib(3-2) that is fib(1) and 

86
00:04:19.150 --> 00:04:22.950


87
00:04:22.950 --> 00:04:26.670
this fib(2) again calls fib(1) and fib(0) 

88
00:04:26.050 --> 00:04:26.670


89
00:04:27.140 --> 00:04:30.330
Since fib(0) and fib(1) are base

90
00:04:30.330 --> 00:04:35.430
cases the recursive calls will be stopped here and the 

91
00:04:35.430 --> 00:04:39.850
right side fib(2) will again call fib(1) and fib(0)

92
00:04:38.300 --> 00:04:39.850


93
00:04:40.240 --> 00:04:42.630
All the recursive calls are now made. 

94
00:04:43.020 --> 00:04:46.100
Now the result will be calculated like this 

95
00:04:46.700 --> 00:04:50.530
As we know fib(0) and fib(1) is 1

96
00:04:49.330 --> 00:04:50.530


97
00:04:51.020 --> 00:04:55.000
So fib(2) will be 0+1, 1. 

98
00:04:55.000 --> 00:04:56.660
So 1 will be returned to fib(2)

99
00:04:56.660 --> 00:04:58.310


100
00:04:58.470 --> 00:04:59.290
Here Fib(1)

101
00:04:59.290 --> 00:05:02.500
is one and we have already calculated fib(2)

102
00:05:02.560 --> 00:05:05.800
which is 1. So 1+1, 2 will be returned to

103
00:05:05.810 --> 00:05:06.750
Fib(3)

104
00:05:07.340 --> 00:05:10.290
Here again fib(0) and fib(1) will 

105
00:05:10.290 --> 00:05:11.350
be calculated 

106
00:05:11.360 --> 00:05:14.610
That is 0+1 which is 1 and it 

107
00:05:14.610 --> 00:05:16.350
will be returned to fib(2) 

108
00:05:16.950 --> 00:05:19.780
Now we have fib(3) which is 2 and 

109
00:05:19.780 --> 00:05:23.020
fib(2) which is 1. So 2+1, 3

110
00:05:23.030 --> 00:05:27.650
will be returned to fib(4). So fib(4) is 3

111
00:05:27.270 --> 00:05:27.650


112
00:05:28.140 --> 00:05:31.140
So this is how in the top down approach, 

113
00:05:31.140 --> 00:05:33.550
the nth Fibonacci number will be found 

114
00:05:33.560 --> 00:05:37.640
recursively. This approach is completely different from the 

115
00:05:37.640 --> 00:05:42.140
bottom up approach. In bottom up approach, from base case 

116
00:05:42.200 --> 00:05:46.930
we solved the large problem step by step in top down

117
00:05:46.560 --> 00:05:46.930


118
00:05:47.210 --> 00:05:50.610
The large problem is broken down recursively till 

119
00:05:50.610 --> 00:05:51.590
the base case. 

120
00:05:51.860 --> 00:05:55.250
And from there, the solution will be computed.

121
00:05:56.130 --> 00:05:59.740
If we observe the top down approach solution, we can 

122
00:05:59.740 --> 00:06:04.120
see that we have solved the sub problem fib(2) twice

123
00:06:02.980 --> 00:06:04.120


124
00:06:04.740 --> 00:06:08.260
But in the bottom up approach, we have solved each 

125
00:06:08.260 --> 00:06:12.670
sub problem exactly once. To avoid this kind of  

126
00:06:12.670 --> 00:06:16.730
recomputing the same sub problem. In top down approach 

127
00:06:16.740 --> 00:06:20.490
We should keep additional memory to store the results of 

128
00:06:20.500 --> 00:06:23.080
already solved sub problems 

129
00:06:23.540 --> 00:06:26.250
This is also called memoization. 

130
00:06:26.880 --> 00:06:30.260
In the next video we will understand how to use 

131
00:06:30.260 --> 00:06:34.580
memoization to solve the problems effectively in the top down approach

