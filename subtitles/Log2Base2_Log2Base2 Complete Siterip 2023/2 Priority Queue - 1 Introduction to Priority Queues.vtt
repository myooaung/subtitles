WEBVTT

1
00:00:00.140 --> 00:00:00.940
a priority 

2
00:00:00.940 --> 00:00:03.940
Queue is a special type of Queue in which each 

3
00:00:03.950 --> 00:00:08.140
element is associated with the priority value and elements are 

4
00:00:08.140 --> 00:00:10.680
served on the basis of their priority 

5
00:00:11.230 --> 00:00:12.420
That is higher 

6
00:00:12.420 --> 00:00:14.750
Priority elements are served first 

7
00:00:15.040 --> 00:00:18.600
For example let us take this queue in the case 

8
00:00:18.600 --> 00:00:19.730
of the normal que 

9
00:00:19.900 --> 00:00:23.230
The first inserted will be removed first as it follows 

10
00:00:23.230 --> 00:00:25.270
the first in first out principal 

11
00:00:25.580 --> 00:00:28.210
So when we call deque function element 

12
00:00:28.210 --> 00:00:31.870
One will be removed first and then Element eight and 

13
00:00:31.870 --> 00:00:34.610
then five and so on but in priority 

14
00:00:34.610 --> 00:00:34.970
Queue 

15
00:00:35.060 --> 00:00:38.050
Each element is associated with the priority 

16
00:00:38.440 --> 00:00:41.750
Based on the priority the elements will be removed 

17
00:00:42.340 --> 00:00:46.000
Generally the value of the element itself is considered as 

18
00:00:46.000 --> 00:00:46.650
priority 

19
00:00:47.040 --> 00:00:50.490
For example the element with highest value is considered the 

20
00:00:50.490 --> 00:00:52.050
highest priority element 

21
00:00:52.440 --> 00:00:52.920
Here 

22
00:00:53.100 --> 00:00:55.650
element 10 is the highest priority element 

23
00:00:56.040 --> 00:00:58.880
So when we call the deque function instead of 

24
00:00:58.880 --> 00:01:02.980
the first inserted element one the highest priority element 10 

25
00:01:02.980 --> 00:01:03.750
will be removed 

26
00:01:03.750 --> 00:01:08.090
First if we call deque function again Element eight 

27
00:01:08.090 --> 00:01:10.770
will be removed from the queue and then element six 

28
00:01:10.780 --> 00:01:12.820
and so on here 

29
00:01:13.050 --> 00:01:14.720
The important thing to notice 

30
00:01:14.730 --> 00:01:17.250
We can set the priority based on our needs 

31
00:01:17.440 --> 00:01:20.940
For example in the above case we consider the element 

32
00:01:20.940 --> 00:01:23.750
with highest value as the high priority element 

33
00:01:24.140 --> 00:01:27.270
We can also assume the element with lowest value as 

34
00:01:27.270 --> 00:01:28.520
the highest priority 

35
00:01:28.880 --> 00:01:31.180
If that is the case when we call deque 

36
00:01:31.180 --> 00:01:33.870
function element one will be removed first 

37
00:01:33.910 --> 00:01:36.490
As it is the lowest value and then element 

38
00:01:36.490 --> 00:01:39.150
five and then element six and so on 

39
00:01:39.640 --> 00:01:41.500
So this is all about the priority 

40
00:01:41.500 --> 00:01:41.870
Queue 

41
00:01:42.190 --> 00:01:44.940
Now let us learn how to implement a priority 

42
00:01:44.940 --> 00:01:45.350
Queue 

43
00:01:45.840 --> 00:01:48.840
What will be the best data structure to implement priority 

44
00:01:48.840 --> 00:01:49.250
Queue 

45
00:01:49.740 --> 00:01:53.140
In other words which Data structure is best to find 

46
00:01:53.150 --> 00:01:56.750
The case Smallest and largest elements in the Given set 

47
00:01:57.240 --> 00:02:00.160
it is the heap data structure because in heap

48
00:02:00.160 --> 00:02:03.850
data structure after the build heap process the highest or 

49
00:02:03.850 --> 00:02:07.140
lowest element will be present at the top and we 

50
00:02:07.140 --> 00:02:11.450
can continuously extract the smallest to largest elements effectively 

51
00:02:12.040 --> 00:02:15.050
In the case of Max Heap the highest element will 

52
00:02:15.050 --> 00:02:17.770
be present at the top in priority 

53
00:02:17.770 --> 00:02:18.090
Queue 

54
00:02:18.210 --> 00:02:21.720
We can use the Max heap when highest values considered 

55
00:02:21.720 --> 00:02:25.320
the highest priority element and in case of min heap 

56
00:02:25.480 --> 00:02:28.150
the lowest element will be present at the top 

57
00:02:28.640 --> 00:02:29.680
so in priority 

58
00:02:29.680 --> 00:02:30.050
Queue 

59
00:02:30.540 --> 00:02:33.340
We can use the min heap when the lowest values 

60
00:02:33.340 --> 00:02:35.550
considered the highest priority element 

61
00:02:36.240 --> 00:02:39.340
We have already learned about heap data structure in data 

62
00:02:39.340 --> 00:02:40.290
Structure series 

63
00:02:40.390 --> 00:02:44.270
We will attach those videos below to this kindly go 

64
00:02:44.270 --> 00:02:47.140
through all videos to understand how heap data structure 

65
00:02:47.140 --> 00:02:47.700
works 

66
00:02:48.140 --> 00:02:51.200
After that we will learn how to implement priority 

67
00:02:51.200 --> 00:02:51.450
Queue 

68
00:02:51.450 --> 00:02:52.940
Using Heap data structure. 

