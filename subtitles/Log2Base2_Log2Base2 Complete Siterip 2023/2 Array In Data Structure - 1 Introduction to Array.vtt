WEBVTT

1
00:00:00.340 --> 00:00:01.200
Hello friends 

2
00:00:01.260 --> 00:00:04.180
In this video let us have an introduction to array 

3
00:00:04.180 --> 00:00:04.830
data structure 

4
00:00:06.140 --> 00:00:09.050
So why do we need an array? let us consider

5
00:00:09.050 --> 00:00:12.250
the situation where we need to get 10 students age 

6
00:00:12.260 --> 00:00:15.700
and store it for some purpose since age 

7
00:00:15.700 --> 00:00:19.600
is an integer type we can store it like this declaring 

8
00:00:19.600 --> 00:00:21.010
10 integer variables 

9
00:00:21.540 --> 00:00:24.790
Now what if there are 20 students whose age we 

10
00:00:24.790 --> 00:00:27.980
need to get Then we should declare 20 integer 

11
00:00:27.980 --> 00:00:28.750
variables 

12
00:00:28.820 --> 00:00:32.160
But this way it is very difficult to create variables 

13
00:00:32.320 --> 00:00:34.850
manipulate them and to keep track of them 

14
00:00:35.340 --> 00:00:37.690
And we have a great solution to this problem 

15
00:00:37.700 --> 00:00:41.940
Use arrays so what is an array? an array is a 

16
00:00:41.940 --> 00:00:45.520
collection of variables of the same data type like the 

17
00:00:45.520 --> 00:00:49.560
collection of integers or collection of characters or collection of 

18
00:00:49.560 --> 00:00:50.950
floating point numbers etc.

19
00:00:52.040 --> 00:00:55.400
But we can't group different data types in an array 

20
00:00:55.640 --> 00:00:59.290
like we cannot have integers and characters and float to 

21
00:00:59.290 --> 00:01:00.750
gather in the same collection 

22
00:01:01.340 --> 00:01:05.130
So an array is sometimes called as Homogenus data type 

23
00:01:05.740 --> 00:01:08.490
so coming back to our issue we have to get 

24
00:01:08.490 --> 00:01:10.280
the age of 10 students 

25
00:01:10.480 --> 00:01:14.050
So instead of creating 10 integer variables we can 

26
00:01:14.050 --> 00:01:17.840
just create an integer array of size ten that is 

27
00:01:18.160 --> 00:01:21.280
int age equal to new int of ten 

28
00:01:21.520 --> 00:01:25.210
Here the array elements are stored in the sequential memory 

29
00:01:25.210 --> 00:01:29.600
locations and using index value we can access the array 

30
00:01:29.600 --> 00:01:30.370
elements 

31
00:01:30.730 --> 00:01:34.000
The array index value start from zero and not from 

32
00:01:34.000 --> 00:01:34.350
one 

33
00:01:34.740 --> 00:01:38.910
For example in the above age array the index values are 

34
00:01:38.910 --> 00:01:42.150
from zero to nine and not from 1 to 10 

35
00:01:42.840 --> 00:01:46.740
So to access first students age we can directly use 

36
00:01:46.750 --> 00:01:49.350
index zero that is age of zero 

37
00:01:49.740 --> 00:01:53.940
And to access fifth students age we can use index 

38
00:01:53.940 --> 00:01:54.550
of four 

39
00:01:54.660 --> 00:01:56.960
That is age of four so 

40
00:01:56.960 --> 00:02:01.050
Generally to get nth element use index n-1 

41
00:02:01.540 --> 00:02:04.740
and an array of size n will have elements from 

42
00:02:04.750 --> 00:02:06.750
index 0 to n-1

43
00:02:07.340 --> 00:02:10.980
Now we can relate an apartment to an array say 

44
00:02:10.990 --> 00:02:15.050
house is data type then apartment is an array of houses 

45
00:02:15.440 --> 00:02:17.740
So this apartment has three houses 

46
00:02:17.780 --> 00:02:21.260
House of Zero is the first house house of one 

47
00:02:21.270 --> 00:02:23.970
is the second house and house of two is the third house and so on

