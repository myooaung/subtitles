WEBVTT

1
00:00:00.290 --> 00:00:02.240
let us do this in this function 

2
00:00:02.240 --> 00:00:07.020
Find pivot declare start mid and end variables point 

3
00:00:07.020 --> 00:00:10.280
start at zero and end at size minus one 

4
00:00:10.480 --> 00:00:13.750
Let's have a while loop with condition start less than 

5
00:00:13.750 --> 00:00:16.200
or equal to end inside the while 

6
00:00:16.200 --> 00:00:21.050
Loop find Mid start plus end divided by two check 

7
00:00:21.060 --> 00:00:24.220
If the condition array of mid greater than array of 

8
00:00:24.230 --> 00:00:25.350
mid plus one 

9
00:00:25.360 --> 00:00:29.280
If this condition returns true then return mid Plus one 

10
00:00:29.290 --> 00:00:32.680
which will hold the pivot element in case if 

11
00:00:32.680 --> 00:00:35.640
mid points to the last element of the array we cannot 

12
00:00:35.640 --> 00:00:37.420
access array of mid plus one 

13
00:00:38.040 --> 00:00:41.920
Hence let us add an additional condition mid less than end 

14
00:00:41.920 --> 00:00:43.490
before else 

15
00:00:43.500 --> 00:00:47.180
Let's check which half of the array is unsorted and point 

16
00:00:47.180 --> 00:00:51.680
start and end accordingly first check if array of start greater than 

17
00:00:51.680 --> 00:00:52.590
an array of mid 

18
00:00:52.700 --> 00:00:55.980
If it returns true we can conclude that the first 

19
00:00:55.980 --> 00:00:59.190
half is unsorted and so we can point end to 

20
00:00:59.190 --> 00:00:59.650
mid 

21
00:01:00.040 --> 00:01:02.910
If not we have to check array of mid greater 

22
00:01:02.910 --> 00:01:04.060
than array of end 

23
00:01:04.070 --> 00:01:07.640
If this returns true we can conclude that the second 

24
00:01:07.640 --> 00:01:11.250
half is unsorted and so we can points start to mid 

25
00:01:11.740 --> 00:01:15.980
and if both these conditions return false It means that 

26
00:01:16.000 --> 00:01:19.600
both this sub array or in other words the entire 

27
00:01:19.610 --> 00:01:20.750
array is sorted 

28
00:01:21.240 --> 00:01:24.530
And when can this happen If an array is rotated 

29
00:01:24.530 --> 00:01:27.850
size times then we take the original array itself 

30
00:01:28.240 --> 00:01:31.530
Thus we will have the smallest element in its first 

31
00:01:31.530 --> 00:01:33.550
index 0 so return 0 

32
00:01:34.140 --> 00:01:37.010
Thus at the end of the loop the pivot element 

33
00:01:37.010 --> 00:01:39.150
would have got return from this function. 

