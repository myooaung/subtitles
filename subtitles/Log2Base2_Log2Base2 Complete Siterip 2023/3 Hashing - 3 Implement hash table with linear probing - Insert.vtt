WEBVTT

1
00:00:00.140 --> 00:00:00.920
Hello friends 

2
00:00:00.950 --> 00:00:04.750
In this video let us understand how to implement hash 

3
00:00:04.750 --> 00:00:08.420
Table with linear probing in the previous videos we learned 

4
00:00:08.420 --> 00:00:11.430
about collision and how we can solve it using linear 

5
00:00:11.430 --> 00:00:11.950
probing 

6
00:00:12.190 --> 00:00:14.800
So in linear probing if any collision 

7
00:00:14.800 --> 00:00:18.220
occur we will search the next available index by 

8
00:00:18.220 --> 00:00:22.430
checking indices one by one Linearly so the 

9
00:00:22.430 --> 00:00:26.390
algorithms to insert or delete or search and element in 

10
00:00:26.390 --> 00:00:28.050
linear probing will be this 

11
00:00:28.740 --> 00:00:32.190
First we have to initialise the hash table with minus 

12
00:00:32.190 --> 00:00:35.950
one and then find the key using data mod size 

13
00:00:35.960 --> 00:00:36.670
equation 

14
00:00:37.240 --> 00:00:41.690
And if hash table of Key is available that is 

15
00:00:41.700 --> 00:00:44.190
if it is equal to minus one we can insert 

16
00:00:44.190 --> 00:00:47.500
the data else we can say the collision occured 

17
00:00:47.510 --> 00:00:48.890
So we have two increment the 

18
00:00:48.900 --> 00:00:53.100
Key value by one continuously using the equation key 

19
00:00:53.100 --> 00:00:56.850
equal to key plus one mod size until we find 

20
00:00:56.860 --> 00:00:58.550
the next available index 

21
00:00:59.040 --> 00:01:02.200
And if any index is available we can insert the 

22
00:01:02.200 --> 00:01:05.780
data there and in the process if we again 

23
00:01:05.780 --> 00:01:08.980
reached the starting point we can understand that we have 

24
00:01:08.990 --> 00:01:12.030
traversed the whole hash table and we couldn't find the 

25
00:01:12.030 --> 00:01:15.380
available index so we can display the message 

26
00:01:15.390 --> 00:01:19.250
Hash table is full so let us get into the implementation 

27
00:01:19.640 --> 00:01:22.660
So first let us implement the hash table using an 

28
00:01:22.670 --> 00:01:23.050
array 

29
00:01:23.840 --> 00:01:26.200
So we are going to create a hash table of 

30
00:01:26.200 --> 00:01:27.070
size five 

31
00:01:27.410 --> 00:01:31.500
So first define size equal to five and declare and 

32
00:01:31.510 --> 00:01:34.850
integer array arr of size five 

33
00:01:36.140 --> 00:01:38.720
So an array of size five is created now 

34
00:01:38.950 --> 00:01:40.950
and this will be our hash table 

35
00:01:41.700 --> 00:01:44.370
Now we have to initialise the hash table with the 

36
00:01:44.370 --> 00:01:45.550
value minus one 

37
00:01:46.040 --> 00:01:47.850
We can do it in the constructor 

38
00:01:48.540 --> 00:01:51.350
It uses the four loop to set every value in 

39
00:01:51.350 --> 00:01:54.810
the hash table as minus one so the hash table 

40
00:01:54.810 --> 00:01:57.960
is created and initialised with minus one 

41
00:01:57.960 --> 00:01:58.270
now 

42
00:01:58.500 --> 00:02:02.270
Now we have to insert element here and for that 

43
00:02:02.280 --> 00:02:05.910
we have the insert function which will insert values into 

44
00:02:05.910 --> 00:02:08.960
the hash table using linear probing and we will 

45
00:02:08.960 --> 00:02:11.950
pass the value to be inserted into this function 

46
00:02:13.040 --> 00:02:16.950
So first let us insert into this hash table so 

47
00:02:16.950 --> 00:02:18.460
value is equal to 10 

48
00:02:18.460 --> 00:02:21.390
Now and we need to find the key first 

49
00:02:21.400 --> 00:02:25.690
That is where should be inserted this element ten so 

50
00:02:25.690 --> 00:02:28.660
we have key equal to value mod size 

51
00:02:28.790 --> 00:02:31.350
That is 10 mod five which is equal to zero 

52
00:02:32.040 --> 00:02:34.860
So we have to insert 10 at index zero 

53
00:02:35.540 --> 00:02:38.050
But before we can insert we have to check 

54
00:02:38.060 --> 00:02:38.950
If it is free 

55
00:02:39.840 --> 00:02:42.120
If it is free we can insert it there 

56
00:02:42.340 --> 00:02:45.880
Otherwise we have to check for the next available index 

57
00:02:46.640 --> 00:02:49.080
and we can check that by checking the value at 

58
00:02:49.080 --> 00:02:49.910
that index 

59
00:02:50.110 --> 00:02:52.380
If it is equal to minus one then it is 

60
00:02:52.380 --> 00:02:53.580
free otherwise

61
00:02:53.580 --> 00:02:58.120
It is not so copy key to have variable index so 

62
00:02:58.120 --> 00:03:00.650
key equal to index equal to zero Now 

63
00:03:01.140 --> 00:03:04.460
Now check if arr of index is not equal to 

64
00:03:04.460 --> 00:03:08.080
minus one but it is that is it is available 

65
00:03:08.080 --> 00:03:08.970
for insertion 

66
00:03:09.210 --> 00:03:12.540
So while fails and we can insert at that 

67
00:03:12.540 --> 00:03:16.390
index itself So we have arr of index is 

68
00:03:16.400 --> 00:03:17.450
equal to value 

69
00:03:18.140 --> 00:03:21.890
So insertion of ten is now completed successfully so returned 

70
00:03:21.890 --> 00:03:26.570
One now let us try to insert another element four and 

71
00:03:26.570 --> 00:03:29.060
we need to find the key first and we have 

72
00:03:29.250 --> 00:03:32.790
key equal to value mod size that is four mod 

73
00:03:32.790 --> 00:03:34.350
five which is equal to four 

74
00:03:35.440 --> 00:03:38.360
so copy key to have variable index 

75
00:03:38.530 --> 00:03:41.410
But again before we can insert we have to check 

76
00:03:41.420 --> 00:03:44.630
If it is free and we have arr of four 

77
00:03:44.640 --> 00:03:45.870
equal to minus one 

78
00:03:46.100 --> 00:03:49.640
So the while condition fails here and we can insert 

79
00:03:49.640 --> 00:03:53.640
value at arr of Index that is arr of four 

80
00:03:53.650 --> 00:03:54.800
and it is completed 

81
00:03:55.020 --> 00:03:56.050
So returned one 

82
00:03:56.840 --> 00:04:01.190
now let us insert another element to and to find key 

83
00:04:01.200 --> 00:04:04.270
we have key equal to value most size 

84
00:04:04.460 --> 00:04:07.350
That is two mod five which is equal to two 

85
00:04:07.940 --> 00:04:11.120
So copy Key to index and check if index is 

86
00:04:11.120 --> 00:04:15.070
free and we have arr of two equal to minus 

87
00:04:15.070 --> 00:04:15.310
one 

88
00:04:15.460 --> 00:04:18.900
So this while condition fails here so we can come 

89
00:04:18.910 --> 00:04:22.950
out and we can insert element two at index two 

90
00:04:23.540 --> 00:04:24.380
and that is done 

91
00:04:24.380 --> 00:04:25.250
So return one 

92
00:04:25.640 --> 00:04:28.800
And now let us insert the element 15 into this 

93
00:04:28.800 --> 00:04:29.650
hash table 

94
00:04:30.240 --> 00:04:32.440
And to find key we have the equation 

95
00:04:32.450 --> 00:04:37.520
key equal to Value mod size that is 15 mod five which 

96
00:04:37.520 --> 00:04:38.650
is equal to zero 

97
00:04:39.140 --> 00:04:40.400
So first copy 

98
00:04:40.410 --> 00:04:42.090
key to index and check 

99
00:04:42.100 --> 00:04:46.340
If indexes free for insertion and we have arr of 

100
00:04:46.340 --> 00:04:49.250
zero is equal to 10 and not equal to minus 

101
00:04:49.250 --> 00:04:52.700
one that is it is not available for insertion or 

102
00:04:52.700 --> 00:04:55.950
we can say a collision occurred here so we have 

103
00:04:55.960 --> 00:04:58.430
to find the next available index 

104
00:04:58.810 --> 00:05:02.750
So here the while condition becomes true and inside we 

105
00:05:02.750 --> 00:05:06.390
will find a new key by using the equation index 

106
00:05:06.390 --> 00:05:10.740
equal to index plus one mod size that is zero 

107
00:05:10.740 --> 00:05:12.150
plus one mod five 

108
00:05:12.150 --> 00:05:14.550
That is one mod five which is equal to one 

109
00:05:15.740 --> 00:05:17.990
So we got the new index and check 

110
00:05:18.040 --> 00:05:21.590
If the new index equal to key again that is 

111
00:05:21.600 --> 00:05:23.740
key was our actual index 

112
00:05:23.750 --> 00:05:28.140
That is the actual location that this element was supposed 

113
00:05:28.140 --> 00:05:29.150
to be inserted 

114
00:05:29.840 --> 00:05:33.300
And if collision occurs and we are finding new index 

115
00:05:33.310 --> 00:05:36.660
and we reach key again it means the hash table 

116
00:05:36.660 --> 00:05:40.850
has become full so let us check if index equal to key 

117
00:05:40.860 --> 00:05:44.510
But it is not so if fails and this iteration 

118
00:05:44.510 --> 00:05:48.180
of while loop is completed now in the next iteration 

119
00:05:48.190 --> 00:05:52.060
let us check the condition again and we have arr 

120
00:05:52.060 --> 00:05:55.470
of index that is arr  of one equal to minus 

121
00:05:55.470 --> 00:05:55.780
one 

122
00:05:55.940 --> 00:05:59.100
So the condition fails here and the control comes out 

123
00:05:59.100 --> 00:05:59.670
of the while 

124
00:05:59.670 --> 00:06:03.880
Look that is index one is free for insertion so 

125
00:06:03.890 --> 00:06:09.220
we can insert 15 to index one and then one 

126
00:06:09.220 --> 00:06:10.030
will be returned 

127
00:06:10.220 --> 00:06:14.690
As the insertion is successful now let us is insert another element 

128
00:06:14.690 --> 00:06:16.350
five to this hash table 

129
00:06:16.940 --> 00:06:20.510
First let us find the key that is equal to 

130
00:06:20.510 --> 00:06:23.570
value mod size which is five mod five which is 

131
00:06:23.570 --> 00:06:28.180
equal to zero first copy Key to index and check 

132
00:06:28.190 --> 00:06:32.050
if index is free and we have arr  of zero 

133
00:06:32.050 --> 00:06:35.340
equal to 10 and not equal to minus one so collision 

134
00:06:35.340 --> 00:06:35.670
occured

135
00:06:36.340 --> 00:06:39.310
So while condition becomes true here and let us find 

136
00:06:39.310 --> 00:06:42.550
the new key by the equation index equal to index 

137
00:06:42.550 --> 00:06:46.070
plus one mod size that is zero plus one mod 

138
00:06:46.070 --> 00:06:46.430
five 

139
00:06:46.430 --> 00:06:48.650
That is one mod five which is equal to one 

140
00:06:49.340 --> 00:06:51.650
So we got a new index and let us check 

141
00:06:51.660 --> 00:06:53.820
if the new index equal to Key again 

142
00:06:54.080 --> 00:06:56.610
But it is not so if fails here 

143
00:06:56.620 --> 00:06:59.380
And this iteration of while loop is now completed 

144
00:07:00.340 --> 00:07:03.460
Now in the next iteration let us checked the while condition 

145
00:07:03.470 --> 00:07:07.290
again and we have arr  of one equal to 15 

146
00:07:07.300 --> 00:07:08.680
and not minus one 

147
00:07:08.940 --> 00:07:10.350
So the condition is okay 

148
00:07:10.940 --> 00:07:12.650
So again collision occurred 

149
00:07:13.140 --> 00:07:17.050
So find a new index that is one plus one 

150
00:07:17.050 --> 00:07:20.500
mod size that is two mod five which is equal 

151
00:07:20.500 --> 00:07:21.050
to two 

152
00:07:21.540 --> 00:07:23.800
So we got in new index and let us check 

153
00:07:23.810 --> 00:07:25.850
If the new index equal to key again 

154
00:07:26.240 --> 00:07:29.200
But it is not so if fails and this iteration 

155
00:07:29.200 --> 00:07:32.530
of While loop is also completed Now in the next 

156
00:07:32.530 --> 00:07:34.790
iteration let us check the while condition 

157
00:07:34.980 --> 00:07:37.760
We have a r r of two equal to two 

158
00:07:37.770 --> 00:07:39.350
and not equal to minus one 

159
00:07:39.840 --> 00:07:43.500
So again collision occurred and the while condition is satisfied 

160
00:07:43.500 --> 00:07:43.880
here 

161
00:07:44.220 --> 00:07:47.210
So start the next iteration and find the new index 

162
00:07:47.610 --> 00:07:50.540
and we will get two plus one mod size 

163
00:07:50.550 --> 00:07:53.350
That is three mod five which is equal to three 

164
00:07:54.040 --> 00:07:56.650
So we got a new index and check if the 

165
00:07:56.650 --> 00:07:58.490
new index equal to key again 

166
00:07:58.940 --> 00:08:01.420
But it is not so if fails 

167
00:08:01.430 --> 00:08:04.550
And this iteration of while loop is also completed now 

168
00:08:05.240 --> 00:08:08.450
So check the condition again for next iteration and we 

169
00:08:08.450 --> 00:08:11.360
have arr  of three equal to minus one 

170
00:08:11.830 --> 00:08:14.130
So this while condition fails here 

171
00:08:14.390 --> 00:08:17.300
So control comes out of the while loop and we 

172
00:08:17.300 --> 00:08:19.590
can insert five to index three 

173
00:08:20.540 --> 00:08:22.250
So the insertion is successful 

174
00:08:22.260 --> 00:08:23.550
So returned one 

175
00:08:24.410 --> 00:08:26.980
Now let us insert another element 20 

176
00:08:27.640 --> 00:08:28.710
Let us find key 

177
00:08:28.710 --> 00:08:32.750
First we have key equal to value mod size that 

178
00:08:32.750 --> 00:08:36.520
is five mod five which is equal to zero now 

179
00:08:36.530 --> 00:08:39.740
Copy key to index and check if intex is free 

180
00:08:40.120 --> 00:08:43.210
and we have arr  of zero equal to 10 and 

181
00:08:43.210 --> 00:08:44.560
not equal to minus one 

182
00:08:45.040 --> 00:08:46.150
So collision occurred 

183
00:08:46.540 --> 00:08:49.720
So while condition is satisfied and we have to find 

184
00:08:49.720 --> 00:08:53.910
the new key and we have index equal to index 

185
00:08:53.910 --> 00:08:57.600
plus one mod size that is zero plus one mod 

186
00:08:57.600 --> 00:08:58.030
five 

187
00:08:58.040 --> 00:09:00.550
That is one mod five equal to one 

188
00:09:01.040 --> 00:09:03.400
So we got the new index and let us check 

189
00:09:03.410 --> 00:09:06.830
If new index equal to key again but it is not 

190
00:09:07.040 --> 00:09:09.800
so if fails and this iteration of while loop is 

191
00:09:09.800 --> 00:09:14.260
completed now check the condition again for next iteration and 

192
00:09:14.260 --> 00:09:17.370
we have arr  of one equal to 15 and not 

193
00:09:17.370 --> 00:09:18.450
equal to minus one 

194
00:09:18.940 --> 00:09:22.190
So again collision occurred and the while condition is satisfied 

195
00:09:22.610 --> 00:09:25.830
So starting next iteration and find the new index and 

196
00:09:25.830 --> 00:09:28.730
we will get one plus one mod five that is 

197
00:09:28.730 --> 00:09:30.450
two mod five equal to two 

198
00:09:31.140 --> 00:09:33.920
So we got the new index Now let us check 

199
00:09:33.930 --> 00:09:35.750
if it is equal to key again 

200
00:09:36.140 --> 00:09:39.120
But it is not so if fails and this iteration 

201
00:09:39.130 --> 00:09:42.890
is also completed now in the next iteration checked the 

202
00:09:42.890 --> 00:09:46.640
while condition again and we have arr  of two equal 

203
00:09:46.640 --> 00:09:47.120
to two 

204
00:09:47.350 --> 00:09:49.000
So again collision occurred 

205
00:09:49.070 --> 00:09:53.150
And while condition is satisfied here so starting next iteration 

206
00:09:53.160 --> 00:09:55.950
and find the new index and we will get two 

207
00:09:55.950 --> 00:09:59.080
plus one mod five that is three mod five which 

208
00:09:59.080 --> 00:10:00.050
is equal to three 

209
00:10:00.940 --> 00:10:03.700
So we got the new index three and check if 

210
00:10:03.710 --> 00:10:05.200
it is equal to Key again 

211
00:10:05.570 --> 00:10:09.000
But it is not so if fails and this iteration 

212
00:10:09.000 --> 00:10:10.950
of while loop is also completed 

213
00:10:11.640 --> 00:10:15.120
Now check the while condition again for the next iteration 

214
00:10:15.130 --> 00:10:18.120
and we have arr  of three equal to five and 

215
00:10:18.120 --> 00:10:19.450
not equal to minus one 

216
00:10:19.940 --> 00:10:21.470
So again collision occurred 

217
00:10:21.480 --> 00:10:26.120
And while condition is satisfied here so starting next iteration 

218
00:10:26.130 --> 00:10:29.310
and find the new index and we have three plus 

219
00:10:29.310 --> 00:10:32.520
one mod five that is four mod five which is 

220
00:10:32.530 --> 00:10:33.450
equal to four 

221
00:10:33.940 --> 00:10:36.890
So we got the new index four and let us check 

222
00:10:36.900 --> 00:10:38.200
if it is equal to key 

223
00:10:38.210 --> 00:10:41.890
But it is not so if fails and this iteration 

224
00:10:41.890 --> 00:10:43.840
of while loop is also completed 

225
00:10:44.440 --> 00:10:47.630
So check the while condition again for the next iteration 

226
00:10:47.640 --> 00:10:50.590
and we have arr of four equal to four and 

227
00:10:50.590 --> 00:10:51.870
not equal to minus one 

228
00:10:52.540 --> 00:10:56.590
So again while condition is satisfied since a collision occurred 

229
00:10:56.830 --> 00:11:00.460
So starting next iteration and find the new index that 

230
00:11:00.460 --> 00:11:02.190
is four plus one mod 

231
00:11:02.190 --> 00:11:04.810
Five that is five mod five that is equal to 

232
00:11:04.810 --> 00:11:05.220
zero 

233
00:11:05.810 --> 00:11:08.130
So we got the new index zero and let us 

234
00:11:08.130 --> 00:11:10.250
check if it is equal to key again 

235
00:11:10.840 --> 00:11:14.270
And it is which means we have searched the whole 

236
00:11:14.270 --> 00:11:16.910
hash table for a free index and we did not 

237
00:11:16.910 --> 00:11:17.550
find it 

238
00:11:18.040 --> 00:11:21.880
Which means the hash table has become full Now so

239
00:11:21.880 --> 00:11:22.380
print 

240
00:11:22.390 --> 00:11:24.850
The hash table is full and returned zero 

241
00:11:25.340 --> 00:11:27.690
So that is how we can insert elements to a 

242
00:11:27.690 --> 00:11:29.650
hash table with linear probing.

