WEBVTT

1
00:00:00.540 --> 00:00:01.330
Hello Friends 

2
00:00:01.440 --> 00:00:04.800
Let us understand the merge sort algorithm in this video. 

3
00:00:11.440 --> 00:00:14.960
Let us take an array of eight elements. Here the 

4
00:00:14.960 --> 00:00:18.030
start index  is zero and the end index is seven 

5
00:00:18.120 --> 00:00:21.270
The merge sort uses the divide and conquer strategy to 

6
00:00:21.270 --> 00:00:25.420
sort the elements. It first checks whether the start index is  

7
00:00:25.420 --> 00:00:28.800
less than the end index and if yes, then it 

8
00:00:28.800 --> 00:00:30.550
will calculate the mid index. 

9
00:00:30.790 --> 00:00:33.980
And then it will recursively divide the array into 

10
00:00:33.990 --> 00:00:38.640
two sub arrays from start to mid and from mid+1 to end 

11
00:00:37.390 --> 00:00:38.640


12
00:00:38.810 --> 00:00:42.850
Finally when two recursive calls finish its task,

13
00:00:42.850 --> 00:00:47.750
it will merge them using previously discussed method. So let us see how 

14
00:00:48.340 --> 00:00:52.250
So here start equal to 0 and end equal to 7 

15
00:00:53.040 --> 00:00:55.990
and since start is less than and mid will be 

16
00:00:55.990 --> 00:00:59.690
calculated and it will be 0+7 divided by 2

17
00:00:59.690 --> 00:01:00.860
 which is three 

18
00:01:00.940 --> 00:01:04.130
So we have calculated mid index and it is equal to 3

19
00:01:04.130 --> 00:01:08.150
So call merge sort for the first half of the array.

20
00:01:08.540 --> 00:01:10.550
That is till mid of the array. 

21
00:01:11.040 --> 00:01:14.870
So pass array, start and mid to the function merge sort

22
00:01:14.870 --> 00:01:18.890
So merge sort is called recursively. Here 

23
00:01:18.890 --> 00:01:22.360
also we will first check if start is less than 

24
00:01:22.370 --> 00:01:26.830
end and it is, since 0 is less than 3. 

25
00:01:26.830 --> 00:01:29.760
So we can go inside and find the middle index 

26
00:01:30.100 --> 00:01:33.470
It will be 0+3 divided by 2 which is 1

27
00:01:33.470 --> 00:01:37.310
So call merge sort again for array from start 

28
00:01:37.380 --> 00:01:40.840
till mid. So pass the array, start index zero 

29
00:01:40.850 --> 00:01:44.520
and mid index one. So merge sort is called recursively

30
00:01:44.520 --> 00:01:47.300
again and here also we will first 

31
00:01:47.300 --> 00:01:51.550
check if start is less than end and it is. So find 

32
00:01:51.550 --> 00:01:54.560
mid and it will be equal to 0+1 

33
00:01:54.560 --> 00:01:57.650
divided by two which is zero. So we have found 

34
00:01:57.650 --> 00:02:00.270
the middle index and it is equal to zero. So call

35
00:02:00.270 --> 00:02:03.750
merge sort again for the array from start till mid

36
00:02:04.140 --> 00:02:07.380
So pass the array, start index zero and mid index zero.

37
00:02:07.380 --> 00:02:11.320
 So Merge Sort is again called recursively And 

38
00:02:11.320 --> 00:02:14.320
here also first we have to check if start is 

39
00:02:14.320 --> 00:02:18.180
less than end and it is not, since zero is 

40
00:02:18.180 --> 00:02:21.010
not less than zero. So we got a single element 

41
00:02:21.010 --> 00:02:24.540
here and the execution of current merge sort function is 

42
00:02:24.540 --> 00:02:29.330
completed and the control reaches the calling function. So here 

43
00:02:29.340 --> 00:02:33.160
it will continue the execution. The next statement to execute 

44
00:02:33.160 --> 00:02:36.830
here is mergesort(arr,mid+1, end)

45
00:02:36.540 --> 00:02:40.200
So we are calling merge sort recursively 

46
00:02:40.200 --> 00:02:41.840
for the second half here.

47
00:02:41.850 --> 00:02:45.230
So mid+1 equal to 1 and end equal to 1

48
00:02:44.760 --> 00:02:45.230


49
00:02:45.640 --> 00:02:48.320
And here also we have to check if start is 

50
00:02:48.320 --> 00:02:51.230
less than end and it is not since one is 

51
00:02:51.240 --> 00:02:54.110
not less than one. That is we have a single 

52
00:02:54.110 --> 00:02:58.120
element here. So if fails and the execution is completed 

53
00:02:58.130 --> 00:03:01.520
and control reaches the calling function and it will continue 

54
00:03:01.520 --> 00:03:06.050
the execution here. Here the next statement to execute is 

55
00:03:06.060 --> 00:03:09.570
merge(arr,start,mid,end) 

56
00:03:09.580 --> 00:03:12.600
and recall what merge function does. It will sort and 

57
00:03:12.600 --> 00:03:16.130
merge the two arrays using an additional temporary array

58
00:03:16.150 --> 00:03:18.690
But in case of quick sort, we did not use 

59
00:03:18.690 --> 00:03:23.160
an additional array but here we do. So here compare

60
00:03:23.160 --> 00:03:26.420
the two elements 5 and 20 and 5 is less 

61
00:03:26.420 --> 00:03:30.690
than 20. So copy it into temp array and then 20 

62
00:03:30.700 --> 00:03:31.850
is also copied.

63
00:03:32.340 --> 00:03:36.090
Now the sorted temp array is copied to the original 

64
00:03:36.090 --> 00:03:36.480
array.

65
00:03:36.520 --> 00:03:40.110
So the execution of this function is now completed 

66
00:03:40.220 --> 00:03:43.940
Now control reaches the calling function and execution will be 

67
00:03:43.940 --> 00:03:45.400
continued. 

68
00:03:45.410 --> 00:03:51.010
Here the next statement to execute is merge_sort(arr,mid+1,end)

69
00:03:51.020 --> 00:03:52.250
 So here we are

70
00:03:52.250 --> 00:03:55.520
calling merge sort for the second half of the array. 

71
00:03:55.520 --> 00:03:58.520
So mid+1 equal to 2 here and end equal to 3 

72
00:03:58.520 --> 00:04:01.420
So merge sort is called and we will 

73
00:04:01.430 --> 00:04:05.070
first check if start is less than end. And here 

74
00:04:05.080 --> 00:04:08.940
it is, since 2 is less than 3. So first 

75
00:04:08.950 --> 00:04:12.510
find mid. And it will be equal to 2+3 divided 

76
00:04:12.510 --> 00:04:15.360
by 2 which is 2. So we have found the 

77
00:04:15.360 --> 00:04:18.440
middle index. It is equal to 2. So call merge sort

78
00:04:18.450 --> 00:04:22.870
again for the array from start till mid. So pass 

79
00:04:22.870 --> 00:04:27.130
the array, start index 2 and mid index 2. So merge 

80
00:04:27.130 --> 00:04:30.380
sort is called recursively And here also we 

81
00:04:30.380 --> 00:04:33.140
will check if start is less than end and it 

82
00:04:33.140 --> 00:04:36.500
is not since 2 is not less than 2.

83
00:04:36.500 --> 00:04:39.510
So we got a single element and the execution of current

84
00:04:39.510 --> 00:04:43.110
merge sort function is also completed and control reaches the 

85
00:04:43.110 --> 00:04:46.680
calling function. So here it will continue the execution and 

86
00:04:46.680 --> 00:04:49.490
the next statement here to execute is 

87
00:04:49.500 --> 00:04:54.070
merge sort (arr,mid+1,end). So it is 

88
00:04:54.070 --> 00:04:57.560
called for the second half of the array and here 

89
00:04:57.560 --> 00:05:00.240
mid+1 equal to 3 and end equal to 3

90
00:04:59.920 --> 00:05:00.240
 

91
00:05:00.250 --> 00:05:02.730
And here also we have to check if start 

92
00:05:02.730 --> 00:05:06.060
is less than end and here start is equal to three and 

93
00:05:06.070 --> 00:05:07.100
end equal to three 

94
00:05:07.250 --> 00:05:11.050
So if will fail, so execution here is completed and 

95
00:05:11.050 --> 00:05:14.710
control reaches the calling function. And here the next statement 

96
00:05:14.710 --> 00:05:17.300
to execute is a function call to merge 

97
00:05:18.040 --> 00:05:21.290
As we learnt here the elements will be sorted in 

98
00:05:21.290 --> 00:05:24.370
the temporary array and it will be copied to the original 

99
00:05:24.370 --> 00:05:27.590
array and we have discussed the merge function in 

100
00:05:27.590 --> 00:05:29.250
detail in the previous video 

101
00:05:29.940 --> 00:05:33.560
So here now we have completed this functions execution 

102
00:05:33.740 --> 00:05:36.990
So control reaches the calling function And here we have 

103
00:05:36.990 --> 00:05:43.110
the next statement to execute is merge (arr,start,mid,end)

104
00:05:43.110 --> 00:05:44.830
So merge is called and it will 

105
00:05:44.830 --> 00:05:47.610
compare the elements of two arrays and sort it in 

106
00:05:47.610 --> 00:05:48.550
the temporary array

107
00:05:49.140 --> 00:05:51.750
So 5 is less than 30 so 5 is added 

108
00:05:51.750 --> 00:05:55.370
first to the temp array. 20 is less than 30 

109
00:05:55.370 --> 00:05:58.270
So it is also added. Now copy the second array

110
00:05:58.270 --> 00:06:01.360
to temp and now we have the elements sorted in

111
00:06:01.360 --> 00:06:02.150
the temp array

112
00:06:02.540 --> 00:06:06.510
Now copy this to the original array and first half 

113
00:06:06.510 --> 00:06:09.450
of the actual input array is now sorted 

114
00:06:10.040 --> 00:06:13.970
Now since the execution of this function is completed, control

115
00:06:13.970 --> 00:06:16.450
reaches here and continues the execution 

116
00:06:17.240 --> 00:06:21.600
And here we have merge sort(arr,mid+1,end)

117
00:06:21.600 --> 00:06:23.750
 so merge sort is recursively

118
00:06:23.750 --> 00:06:26.610
called for the second half of the array and 

119
00:06:26.610 --> 00:06:29.540
we have mid+1 equal to four and end

120
00:06:29.540 --> 00:06:30.350
equal to seven 

121
00:06:31.340 --> 00:06:34.290
So we will first check if start is less than 

122
00:06:34.300 --> 00:06:38.760
 end and it is since four is less than seven. So find 

123
00:06:38.770 --> 00:06:42.070
the middle index it will be 4+7 divided 

124
00:06:42.070 --> 00:06:45.420
by 2 which is five So call merge sort again for 

125
00:06:45.420 --> 00:06:49.020
the array from start till mid So pass the array, start 

126
00:06:49.020 --> 00:06:52.020
index 4 and Middle index 5. So Merge sort is 

127
00:06:52.020 --> 00:06:54.910
called recursively And here also we will first 

128
00:06:54.910 --> 00:06:58.810
check if start is less than end and it is. So find 

129
00:06:58.820 --> 00:07:02.300
the middle index It will be 4+5 divided 

130
00:07:02.300 --> 00:07:05.870
by 2 which is 4. So the function merge sort 

131
00:07:05.930 --> 00:07:09.750
is again called recursively. Here also we will first 

132
00:07:09.750 --> 00:07:12.530
check if start is less than end and it is 

133
00:07:12.530 --> 00:07:16.170
not here since 4 is not less than 4. So 

134
00:07:16.170 --> 00:07:19.250
here we have a single element only and the execution 

135
00:07:19.250 --> 00:07:22.590
of current merge sort function is completed and the control 

136
00:07:22.590 --> 00:07:24.350
will reach the calling function 

137
00:07:24.840 --> 00:07:27.760
So here it will continue the execution and here the 

138
00:07:27.760 --> 00:07:32.770
next statement to execute is merge sort (arr,mid+1,end)

139
00:07:32.770 --> 00:07:34.560
So we are calling merge 

140
00:07:34.560 --> 00:07:37.670
sort for the second half of the array. So mid+1

141
00:07:37.670 --> 00:07:40.500
equal to five and end equal to five 

142
00:07:40.630 --> 00:07:42.840
And here also we have to check if start 

143
00:07:42.840 --> 00:07:45.650
is less than end. And we have start equal to 

144
00:07:45.650 --> 00:07:47.500
five and and equal to five 

145
00:07:47.580 --> 00:07:51.230
So the condition will fail and execution is completed and 

146
00:07:51.230 --> 00:07:52.980
control reaches the calling function. 

147
00:07:53.070 --> 00:07:55.500
And here the next statement to execute is a 

148
00:07:55.500 --> 00:07:57.450
function call for merge. 

149
00:07:57.460 --> 00:08:00.940
So here merge will compare the two elements 25 and 10

150
00:08:01.270 --> 00:08:02.530
and 25 is greater than 10

151
00:08:02.530 --> 00:08:07.520
 so copy 10 first to temp array and then 25 is 

152
00:08:07.530 --> 00:08:08.450
also copied.

153
00:08:08.640 --> 00:08:12.220
Now this sorted temp array is copied to the original 

154
00:08:12.220 --> 00:08:12.560
array

155
00:08:12.730 --> 00:08:16.120
So the execution of this function is now completed 

156
00:08:16.540 --> 00:08:20.140
Now control reaches the calling function and execution will be 

157
00:08:20.140 --> 00:08:24.920
continued here the next statement to execute is a function 

158
00:08:24.920 --> 00:08:28.650
call to merge sort by passing mid+1 and 

159
00:08:28.660 --> 00:08:29.030
end 

160
00:08:29.040 --> 00:08:31.540
So we are calling the merge sort function for the 

161
00:08:31.540 --> 00:08:35.140
second half and here mid+1 equal to six 

162
00:08:35.270 --> 00:08:36.990
and end equal to seven 

163
00:08:37.080 --> 00:08:40.320
So merge sort is again called recursively And here 

164
00:08:40.330 --> 00:08:43.120
first we have to check if start is less than 

165
00:08:43.130 --> 00:08:46.940
end and it is here since 6 is less than 7

166
00:08:47.440 --> 00:08:50.000
So we have to find the middle index and it 

167
00:08:50.000 --> 00:08:53.140
will be 6+7 divided by 2 which is 6

168
00:08:53.140 --> 00:08:57.260
So mid equal to 6 here. So call merge sort

169
00:08:57.270 --> 00:09:01.030
again for array the from start index till the middle index 

170
00:09:01.190 --> 00:09:05.820
so pass the array, start 6 and mid 6. So merge 

171
00:09:05.820 --> 00:09:09.120
sort is called recursively here also we have to 

172
00:09:09.120 --> 00:09:11.870
check if start is less than end and it is 

173
00:09:11.870 --> 00:09:15.140
not since six is not less than six. So we 

174
00:09:15.140 --> 00:09:18.330
got a single element here and the execution of current 

175
00:09:18.330 --> 00:09:22.510
merge sort function is completed. Now the control will reach 

176
00:09:22.520 --> 00:09:26.000
the calling function and here it will continue the execution. 

177
00:09:26.380 --> 00:09:29.780
And here the next statement to execute is a function 

178
00:09:29.780 --> 00:09:32.640
call to merge sort and we are calling merge sort 

179
00:09:32.640 --> 00:09:36.210
recursively for the second half. Here mid+1

180
00:09:36.210 --> 00:09:38.610
will be equal to seven and end will be equal

181
00:09:38.610 --> 00:09:39.190
to seven 

182
00:09:39.360 --> 00:09:42.120
So in this function also we have to check if 

183
00:09:42.120 --> 00:09:45.930
start is less than end But here it will fail 

184
00:09:45.940 --> 00:09:48.710
since seven is not less than seven. That is,

185
00:09:48.710 --> 00:09:50.010
we have a single element here 

186
00:09:50.020 --> 00:09:53.980
So if failed so the execution is completed and control 

187
00:09:53.980 --> 00:09:57.130
reaches the calling function and the execution will be continued here.
 
188
00:09:57.130 --> 00:10:00.510
Here the next statement to execute is a function 

189
00:10:00.520 --> 00:10:01.630
call to merge 

190
00:10:01.940 --> 00:10:05.580
So the elements 28 and 40 will be sorted in the 

191
00:10:05.580 --> 00:10:08.340
temp array and it will be copied to the orginal 

192
00:10:08.340 --> 00:10:12.580
array. Now we have completed this functions execution So control 

193
00:10:12.580 --> 00:10:15.520
reaches the calling function And here we have the next 

194
00:10:15.520 --> 00:10:19.340
statement to execute is again a function call to merge 

195
00:10:19.350 --> 00:10:22.730
So merge is called So it will compare the elements of 

196
00:10:22.740 --> 00:10:26.250
two arrays and sort it in the temporary array temp

197
00:10:26.340 --> 00:10:30.010
So 10 is less than 28. So 10 is added first

198
00:10:30.020 --> 00:10:33.300
to temp Now 25 is less than 28 

199
00:10:33.340 --> 00:10:36.710
So it is also added. Now copy the second array to 

200
00:10:36.710 --> 00:10:39.920
temp and now we have the element sorted in the 

201
00:10:39.930 --> 00:10:40.550
temp array 

202
00:10:41.040 --> 00:10:44.500
Now copy this to the original array and second 

203
00:10:44.500 --> 00:10:47.280
half of the actual input array is now sorted 

204
00:10:47.320 --> 00:10:51.240
Also the execution of this function is completed and the 

205
00:10:51.240 --> 00:10:55.320
control reaches here and here we have merge function so 

206
00:10:55.320 --> 00:10:59.320
it will compare first elements 5 and 10 and 5

207
00:10:59.320 --> 00:11:00.050
is smaller 

208
00:11:00.130 --> 00:11:01.770
So it is copied first 

209
00:11:01.780 --> 00:11:05.170
to temp. Next 20 is greater than 10 

210
00:11:05.310 --> 00:11:08.430
So copy 10. Now 20 is less than 25 

211
00:11:08.440 --> 00:11:11.840
So add 20 and 30 is greater than 25 

212
00:11:11.840 --> 00:11:15.680
So add 25 again 30 is greater than 28 

213
00:11:15.700 --> 00:11:17.080
So add 28 

214
00:11:17.640 --> 00:11:19.160
30 is less than 40 

215
00:11:19.170 --> 00:11:22.820
So add 30 and since first array is completed copy

216
00:11:22.820 --> 00:11:26.000
the remaining elements of array 2 to temp and 

217
00:11:26.000 --> 00:11:26.490
it is done 

218
00:11:26.500 --> 00:11:29.650
We have the whole array sorted in the temp array

219
00:11:29.660 --> 00:11:31.670
Now copy it to the original array

220
00:11:31.680 --> 00:11:35.270
So finally we have the sorted array using the merge

221
00:11:35.270 --> 00:11:36.230
sort algorithm. 

222
00:11:36.400 --> 00:11:43.740
The sorted elements are 5 10 20 25 28 30 40 

223
00:11:43.750 --> 00:11:44.650
and 45 

224
00:11:44.740 --> 00:11:47.580
So this is how we perform sorting using the merge sort algorithm.

