WEBVTT

1
00:00:00.140 --> 00:00:04.020
Hi friends in this video let us analyse the time 

2
00:00:04.030 --> 00:00:06.180
and space complexity of the bubble 

3
00:00:06.180 --> 00:00:10.160
sort algorithm in the previous videos we have 

4
00:00:10.160 --> 00:00:13.050
learned what is bubble sort and how to implement it 

5
00:00:13.740 --> 00:00:15.790
Let us analyse the time complexity 

6
00:00:15.790 --> 00:00:18.250
First let us assume the arr 

7
00:00:18.250 --> 00:00:21.060
size is five let us see The best case 

8
00:00:21.060 --> 00:00:24.540
First the best case will be when the array elements 

9
00:00:24.540 --> 00:00:25.720
are already sorted 

10
00:00:25.990 --> 00:00:29.450
And for the outer loop when i equal to zero the 

11
00:00:29.460 --> 00:00:31.760
inner loop will have four iterations 

12
00:00:31.850 --> 00:00:33.160
That is for J 

13
00:00:33.160 --> 00:00:36.000
equal to 0 to size minus one minus i 

14
00:00:36.640 --> 00:00:39.950
That is five minus one minor zero which is four 

15
00:00:40.440 --> 00:00:44.310
and each time this if will be checked that is 

16
00:00:44.320 --> 00:00:45.950
four times it will be checked 

17
00:00:46.540 --> 00:00:49.550
But in no iteration if will become true 

18
00:00:50.140 --> 00:00:53.760
So no swap operation will take plus so flag will 

19
00:00:53.760 --> 00:00:54.950
not be set to one 

20
00:00:55.640 --> 00:00:58.070
And when we check the flag value it is still 

21
00:00:58.070 --> 00:00:58.560
the same 

22
00:00:58.570 --> 00:01:02.010
So we can understand We have already sorted elements so 

23
00:01:02.010 --> 00:01:03.050
break out of the loop 

24
00:01:03.540 --> 00:01:07.550
So for size equal to five we had four iterations 

25
00:01:07.770 --> 00:01:12.180
that is size minus one iterations and if size is 

26
00:01:12.190 --> 00:01:15.520
equal to n then we will have n minus one 

27
00:01:15.520 --> 00:01:19.750
iterations and n minus one and n are polynomially 

28
00:01:19.750 --> 00:01:20.380
the same 

29
00:01:20.510 --> 00:01:24.060
So the best case time complexity is order of n 

30
00:01:24.640 --> 00:01:26.200
So that was the best case 

31
00:01:26.440 --> 00:01:29.740
Now what about the worst case let us see for the 

32
00:01:29.750 --> 00:01:31.760
outer loop when i equal to zero 

33
00:01:31.770 --> 00:01:34.910
The inner loop will be executed for four times 

34
00:01:34.990 --> 00:01:36.220
That is for J 

35
00:01:36.220 --> 00:01:39.340
equal to 0 j equal to one J equal to Two 

36
00:01:39.350 --> 00:01:39.870
and J equal to 

37
00:01:39.870 --> 00:01:43.600
three that is from zero to SIZE minus one minus i

38
00:01:44.190 --> 00:01:47.180
So in the first iteration of outer for Loop the 

39
00:01:47.190 --> 00:01:49.950
Inner Loop statement executed four times 

40
00:01:50.340 --> 00:01:53.510
Next when i equal to one the inner loop will be 

41
00:01:53.520 --> 00:01:54.920
executed for J 

42
00:01:54.920 --> 00:01:57.660
equal to 0 j equal to one and j equal to 

43
00:01:57.660 --> 00:02:00.550
two So in the second iteration of the outer for 

44
00:02:00.550 --> 00:02:04.450
loop the inner loop statement will be executed three times 

45
00:02:04.840 --> 00:02:08.190
next when I equal to two the inner loop will be 

46
00:02:08.190 --> 00:02:11.450
executed for J equal to 0 and J equal to one 

47
00:02:11.940 --> 00:02:14.860
So in the third iteration of outer for loop the 

48
00:02:14.870 --> 00:02:17.750
inner loop statement executed two times 

49
00:02:18.140 --> 00:02:21.560
Next when I equal to three the inner loop will 

50
00:02:21.560 --> 00:02:23.440
be executed only one time 

51
00:02:23.550 --> 00:02:25.250
That is for J equal to 0 

52
00:02:25.740 --> 00:02:28.910
So in the fourth iteration we had the inner loop 

53
00:02:28.910 --> 00:02:31.050
statement executed for one time 

54
00:02:31.440 --> 00:02:35.140
Next when i equal to four this condition will fail and 

55
00:02:35.140 --> 00:02:37.990
the outer for loop will stop its execution 

56
00:02:38.290 --> 00:02:39.110
so when size 

57
00:02:39.110 --> 00:02:42.440
equal to five the total time taken T(x) 

58
00:02:42.440 --> 00:02:46.040
is equal to one plus two plus three plus 

59
00:02:46.040 --> 00:02:48.360
four which is size minus one 

60
00:02:48.840 --> 00:02:51.880
So in general when size equal to n T(X)

61
00:02:51.880 --> 00:02:55.180
equal to one plus two plus three plus etc

62
00:02:55.180 --> 00:02:56.850
plus n minus one 

63
00:02:57.520 --> 00:03:00.530
That is the sum of natural numbers from 1 to n 

64
00:03:00.530 --> 00:03:01.190
minus one 

65
00:03:01.300 --> 00:03:03.840
And we know that the sum of natural numbers from 

66
00:03:03.850 --> 00:03:07.490
one To n is equal to n into n plus one 

67
00:03:07.500 --> 00:03:08.750
divided by two 

68
00:03:09.240 --> 00:03:12.230
Here the last number is n minus one so we 

69
00:03:12.230 --> 00:03:15.680
can replace n as n minus one in the equation 

70
00:03:15.840 --> 00:03:19.290
So we will get n minus one into n minus 

71
00:03:19.290 --> 00:03:19.590
one 

72
00:03:19.590 --> 00:03:22.850
plus one divided by two and this minus one in 

73
00:03:22.850 --> 00:03:24.460
plus one will get cancelled 

74
00:03:24.470 --> 00:03:28.030
So this will become n minus one into n divided 

75
00:03:28.030 --> 00:03:32.110
by two that is n square minus n divided by 

76
00:03:32.110 --> 00:03:32.440
two 

77
00:03:32.580 --> 00:03:35.310
So we got the time required Now how to get 

78
00:03:35.310 --> 00:03:36.220
the time complexity 

79
00:03:36.220 --> 00:03:36.850
here 

80
00:03:37.240 --> 00:03:39.660
Just find the degree of this pollynomial 

81
00:03:39.670 --> 00:03:41.270
And here it is two 

82
00:03:41.340 --> 00:03:45.040
So we have the worst case time complexity of bubble 

83
00:03:45.040 --> 00:03:48.130
sort algorithm equal to order of n square 

84
00:03:48.140 --> 00:03:50.420
So that was about the time complexity 

85
00:03:50.660 --> 00:03:55.870
Now let us do the space complexity analysis and space complexity 

86
00:03:55.880 --> 00:03:59.690
is the total amount of space a particular algorithm takes 

87
00:03:59.700 --> 00:04:01.150
to produce the output 

88
00:04:01.640 --> 00:04:06.500
So here array arr takes n units of memory and size 

89
00:04:06.510 --> 00:04:08.350
will take one unit of memory 

90
00:04:08.740 --> 00:04:12.650
And in the next statement we have I j and 

91
00:04:12.650 --> 00:04:16.150
Flag and each will take one unit of memory 

92
00:04:16.740 --> 00:04:20.630
So total space s(x) equal to n plus four 

93
00:04:21.240 --> 00:04:22.950
And here the degree is one 

94
00:04:23.140 --> 00:04:26.070
So the space complexity will be order of n 

95
00:04:26.080 --> 00:04:29.450
Now let us discuss about the auxillary space complexity 

96
00:04:29.940 --> 00:04:33.060
And as we learned auxillary space is the extra 

97
00:04:33.060 --> 00:04:36.980
space or the temporary space used by an algorithm here 

98
00:04:36.990 --> 00:04:40.180
array arr and size all given inputs 

99
00:04:40.340 --> 00:04:43.940
The extra memory used by the bubble sort algorithm is 

100
00:04:43.940 --> 00:04:45.920
for I J and flag 

101
00:04:46.050 --> 00:04:49.050
So one unit of space for I one for J 

102
00:04:49.140 --> 00:04:50.140
and one for flag 

103
00:04:50.240 --> 00:04:53.170
So total space equal to three units 

104
00:04:53.330 --> 00:04:56.260
So that was the auxillary space used by this 

105
00:04:56.270 --> 00:04:57.030
algorithm 

106
00:04:57.040 --> 00:05:00.480
So we can say the auxillary space complexity of 

107
00:05:00.490 --> 00:05:03.970
bubble sort algorithm is order of one since the Total 

108
00:05:03.970 --> 00:05:05.850
auxillary Space is a constant 

109
00:05:06.340 --> 00:05:10.330
And as we already learned if is sorting algorithm sorts 

110
00:05:10.340 --> 00:05:14.440
all the elements without using any extra memory or sorts 

111
00:05:14.450 --> 00:05:18.630
all the elements with auxillary space complexity as order 

112
00:05:18.630 --> 00:05:19.250
of one 

113
00:05:19.640 --> 00:05:22.640
Then we can call that sorting algorithm as an inplace 

114
00:05:22.640 --> 00:05:25.170
sorting algorithm and here the bubble 

115
00:05:25.170 --> 00:05:28.710
sort algorithm can sort all the elements with auxillary 

116
00:05:28.710 --> 00:05:32.350
Space complexity equal to order of one so we can 

117
00:05:32.360 --> 00:05:36.550
call bubble sort algorithm As an inplace sorting algorithm. 

