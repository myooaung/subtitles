WEBVTT

1
00:00:00.040 --> 00:00:00.730
Hi friends 

2
00:00:00.840 --> 00:00:03.080
In this video we are going to learn how to 

3
00:00:03.080 --> 00:00:05.350
remove an element from a particular position in an array

4
00:00:12.360 --> 00:00:15.860
So consider an array with 5 indices from 0 to 4 and 

5
00:00:15.870 --> 00:00:16.220
each 

6
00:00:16.230 --> 00:00:19.930
Index is currently holding a fruit a watermelon a strawberry 

7
00:00:19.940 --> 00:00:21.950
a mango a banana and a goa 

8
00:00:22.340 --> 00:00:24.970
Suppose we want to remove mango first 

9
00:00:24.970 --> 00:00:27.430
We want to find mango in the array 

10
00:00:27.620 --> 00:00:29.970
once it is found remove it now 

11
00:00:29.970 --> 00:00:34.110
This position is free now so shift banana One position left 

12
00:00:34.110 --> 00:00:35.450
to index two now 

13
00:00:35.450 --> 00:00:36.849
index three is free 

14
00:00:37.540 --> 00:00:40.630
So shift goa one position left to index three 

15
00:00:40.760 --> 00:00:43.500
and index four is free now And we don't have a 

16
00:00:43.500 --> 00:00:47.060
fruit for this location so we don't need it anymore 

17
00:00:48.040 --> 00:00:49.650
So that is how it is done 

18
00:00:51.240 --> 00:00:54.839
Now see this array here with five elements and indices

19
00:00:54.840 --> 00:00:56.639
from 0 to 4 

20
00:00:56.870 --> 00:00:59.060
Suppose we want to delete element five 

21
00:00:59.250 --> 00:01:02.589
So initially we don't know where five is located so 

22
00:01:02.590 --> 00:01:03.010
first 

23
00:01:03.010 --> 00:01:04.940
We need to find five in the array 

24
00:01:05.370 --> 00:01:08.310
So we'll start searching from first position 

25
00:01:08.400 --> 00:01:10.540
We will compare one with five 

26
00:01:10.540 --> 00:01:11.780
It is not the same 

27
00:01:11.790 --> 00:01:14.059
So we move further to right now 

28
00:01:14.060 --> 00:01:16.660
Compare 20 and five again it is not the 

29
00:01:16.660 --> 00:01:17.080
same 

30
00:01:17.140 --> 00:01:20.350
So compare The next element so five is found at 

31
00:01:20.360 --> 00:01:24.589
index two so remove the element and index two becomes 

32
00:01:24.590 --> 00:01:25.050
free 

33
00:01:25.640 --> 00:01:29.830
So shift 78 to index two so index three is 

34
00:01:29.830 --> 00:01:34.130
free now so shift 30 to index three So index four 

35
00:01:34.130 --> 00:01:35.140
is no more needed 

36
00:01:35.150 --> 00:01:40.060
So it is deleted now let us discuss the 

37
00:01:40.060 --> 00:01:42.110
code to implement this again 

38
00:01:42.110 --> 00:01:44.850
We have an array of size equal to five and 

39
00:01:44.860 --> 00:01:47.199
indices from 0 to 4 

40
00:01:47.210 --> 00:01:50.370
Now we want to remove element five so first we 

41
00:01:50.370 --> 00:01:51.500
need to find where 

42
00:01:51.500 --> 00:01:52.850
five is resided 

43
00:01:53.000 --> 00:01:55.979
So it is at index two once the location of 

44
00:01:55.990 --> 00:01:59.779
element to be deleted is found it is stored in variable 

45
00:01:59.790 --> 00:02:00.480
index 

46
00:02:00.640 --> 00:02:04.180
So here index equal to two the for loop will 

47
00:02:04.180 --> 00:02:07.190
shift the elements to the left removing the value at 

48
00:02:07.200 --> 00:02:07.950
index 

49
00:02:07.960 --> 00:02:12.510
Now let us see how the code works first i equal 

50
00:02:12.510 --> 00:02:13.480
to index 

51
00:02:13.490 --> 00:02:16.650
That is from where we want to remove the element 

52
00:02:16.660 --> 00:02:22.580
Here i equal to two index equal to two it checks if 

53
00:02:22.590 --> 00:02:25.920
two is less than four the condition is true 

54
00:02:25.930 --> 00:02:28.880
So array of three which is 78 

55
00:02:28.890 --> 00:02:33.950
is moved to index two replacing 5. Now incrementing i becomes 

56
00:02:33.950 --> 00:02:38.490
three now checks If three is less than four 

57
00:02:39.140 --> 00:02:42.140
The condition is true so array of four which is 

58
00:02:42.140 --> 00:02:44.500
30 is moved to index three 

59
00:02:44.510 --> 00:02:48.670
Now incrementing i becomes four now it checks if four 

60
00:02:48.680 --> 00:02:51.200
is less than four condition is false 

61
00:02:51.210 --> 00:02:54.760
So control comes out of for loop and executes size 

62
00:02:54.760 --> 00:02:58.720
minus minus which will delete the last location of the array

63
00:02:59.140 --> 00:03:00.150
So that's it 

64
00:03:00.340 --> 00:03:03.630
Now let us discuss about the time complexities 

65
00:03:03.640 --> 00:03:06.549
The best case will be when the element to be 

66
00:03:06.550 --> 00:03:08.730
removed is at the last position 

67
00:03:08.740 --> 00:03:11.390
Then we don't need the for loop to shift any 

68
00:03:11.390 --> 00:03:12.029
elements 

69
00:03:12.040 --> 00:03:14.810
We only need to reduce the array size so 

70
00:03:14.810 --> 00:03:17.490
that the last location where our element 

71
00:03:17.500 --> 00:03:21.400
is will be removed so the best case time complexity 

72
00:03:21.400 --> 00:03:22.950
is order of one 

73
00:03:23.340 --> 00:03:25.950
The worst case will be when the element to be 

74
00:03:25.950 --> 00:03:27.950
removed is at the first position 

75
00:03:28.740 --> 00:03:31.279
Then we need the for loop to shift all the 

76
00:03:31.280 --> 00:03:35.739
elements to the left if you have five elements and 

77
00:03:35.750 --> 00:03:38.490
if the first element is to be removed then the 

78
00:03:38.490 --> 00:03:42.880
for loop will have four iterations to shift 2nd 3rd 

79
00:03:42.890 --> 00:03:45.150
4th and fifth elements to the left 

80
00:03:45.440 --> 00:03:49.030
So generally if you have n elements you need n 

81
00:03:49.030 --> 00:03:53.089
minus one iterations and the worst case time complexity will 

82
00:03:53.090 --> 00:03:56.250
be order of n-1 which is polynomially order of n 

