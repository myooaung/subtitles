WEBVTT

1
00:00:00.140 --> 00:00:03.890
So to solve this problem let us write a function 

2
00:00:03.900 --> 00:00:08.690
remove duplicates which takes the array and its size as the 

3
00:00:08.700 --> 00:00:12.520
input and returns an integer which is the new length 

4
00:00:12.520 --> 00:00:13.100
of the array

5
00:00:13.840 --> 00:00:17.770
Firstly if the number of elements is less than three 

6
00:00:17.780 --> 00:00:20.060
we can return n straight away 

7
00:00:20.370 --> 00:00:26.530
So write if n less than three, return n and otherwise if 

8
00:00:26.530 --> 00:00:29.920
number of elements is greater than two we keep the 

9
00:00:29.920 --> 00:00:31.570
first element for granted 

10
00:00:31.820 --> 00:00:36.050
So just declare and set new length equal to one 

11
00:00:36.440 --> 00:00:38.990
and also declare the iterating variable i

12
00:00:39.000 --> 00:00:44.020
So write int newlen equal to one, i

13
00:00:45.330 --> 00:00:49.260
Now from the second element compare its previous and next 

14
00:00:49.260 --> 00:00:49.950
elements 

15
00:00:50.340 --> 00:00:53.890
If they are equal just keep it. If they are 

16
00:00:53.890 --> 00:00:58.100
not equal store the current element and increment the new 

17
00:00:58.100 --> 00:01:03.050
length count. so write for i equal to one,  i less than n-1, i++

18
00:01:03.060 --> 00:01:04.120


19
00:01:04.150 --> 00:01:08.100
 and in each iteration, check 

20
00:01:08.110 --> 00:01:11.740
If array[i-1] not equal to array[i+1]

21
00:01:11.740 --> 00:01:15.450
then store that element and increment newlen

22
00:01:15.450 --> 00:01:19.640
So write array[newlen++] 

23
00:01:19.640 --> 00:01:21.650
 equal to array[i]

24
00:01:22.140 --> 00:01:25.160
So we have done the process from index one to 

25
00:01:25.170 --> 00:01:26.110
n-1

26
00:01:26.640 --> 00:01:29.870
Finally we need to store the last element 

27
00:01:30.160 --> 00:01:30.850
So write

28
00:01:31.100 --> 00:01:34.330
Array[newlen++] equal to array[n-1]

29
00:01:34.340 --> 00:01:35.370


30
00:01:35.810 --> 00:01:40.130
So now we have removed duplicates which appear more than twice

31
00:01:40.140 --> 00:01:40.670

32
00:01:40.820 --> 00:01:42.640
And this is our final array 

33
00:01:43.140 --> 00:01:46.780
And we have the new array length in variable Newlen

34
00:01:47.240 --> 00:01:50.620
So we just need to return it. So write return newlen.

35
00:01:50.630 --> 00:01:51.350

