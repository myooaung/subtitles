WEBVTT

1
00:00:00.130 --> 00:00:02.340
Since the number can appear twice 

2
00:00:02.570 --> 00:00:05.640
If the number of elements in the array is less 

3
00:00:05.650 --> 00:00:08.840
than or equal to two we can skip the process 

4
00:00:08.850 --> 00:00:09.900
and just return n.

5
00:00:09.910 --> 00:00:13.900
And if the number of elements in the array is 

6
00:00:13.900 --> 00:00:17.350
greater than two, then we have to remove the duplicate 

7
00:00:17.710 --> 00:00:18.200


8
00:00:18.200 --> 00:00:23.090
So let us see how. Since each element can appear twice, we can 

9
00:00:23.090 --> 00:00:27.590
store the first elements straight away without any analysis and 

10
00:00:27.590 --> 00:00:31.420
set the new array length count as one. From the

11
00:00:31.420 --> 00:00:35.600
second element, compare its previous and next elements 

12
00:00:36.000 --> 00:00:38.450
If they are equal just keep it.

13
00:00:38.900 --> 00:00:43.070
If they are not equal, store the current element and 

14
00:00:43.080 --> 00:00:46.220
increment the new length count

15
00:00:46.220 --> 00:00:47.950
Here the second element is five 

16
00:00:48.440 --> 00:00:52.720
We need to compare its previous and next elements 

17
00:00:52.730 --> 00:00:56.070
Here both are equal. So skip it and move to the 

18
00:00:56.070 --> 00:00:57.150
next element.

19
00:00:57.740 --> 00:01:01.890
And here five and six are not equal. So store 

20
00:01:01.890 --> 00:01:05.750
the current element five and increment new array length 

21
00:01:06.640 --> 00:01:10.460
Now we have the previous element five and the next 

22
00:01:10.470 --> 00:01:11.500
element six 

23
00:01:11.820 --> 00:01:15.730
These are not equal. So store current element six and 

24
00:01:15.740 --> 00:01:20.690
increment new length and we will get three. Now compare 

25
00:01:20.690 --> 00:01:24.310
the previous and next elements of the current element six 

26
00:01:24.510 --> 00:01:26.730
and we have both equal to six 

27
00:01:26.990 --> 00:01:29.750
So skip it and move to the next element 

28
00:01:30.240 --> 00:01:34.320
And here previous element equal to six and next element 

29
00:01:34.320 --> 00:01:35.270
equal to eight 

30
00:01:35.680 --> 00:01:37.190
So these are not the same 

31
00:01:37.320 --> 00:01:41.300
So store the current element and increment new length and 

32
00:01:41.300 --> 00:01:42.350
we will get four.

33
00:01:43.040 --> 00:01:45.840
So we have done the process till the second to 

34
00:01:45.840 --> 00:01:46.850
last element. 

35
00:01:47.240 --> 00:01:51.040
Finally we need to store the last element that is eight.

36
00:01:51.050 --> 00:01:51.550


37
00:01:52.140 --> 00:01:58.140
So the new array will be 5 5 6 6 8 and the new 

38
00:01:58.140 --> 00:01:59.840
length is five. 

