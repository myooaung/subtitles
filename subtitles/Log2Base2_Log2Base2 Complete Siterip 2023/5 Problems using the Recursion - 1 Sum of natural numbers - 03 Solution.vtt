WEBVTT

1
00:00:00.040 --> 00:00:03.830
now see the implementation Let us write a function sum 

2
00:00:03.840 --> 00:00:07.050
which takes an integer and also returns an integer 

3
00:00:07.740 --> 00:00:10.770
And we can write the recursive call inside that is 

4
00:00:10.950 --> 00:00:14.910
return n plus sum of n minus one but we 

5
00:00:14.910 --> 00:00:17.250
haven't defined the base case yet 

6
00:00:17.740 --> 00:00:20.460
And what is the base case Here it is when 

7
00:00:20.560 --> 00:00:22.030
n is equal to one 

8
00:00:22.340 --> 00:00:27.490
So write if n equal to one return n otherwise 

9
00:00:27.500 --> 00:00:31.630
return n plus sum of n minus one and it 

10
00:00:31.630 --> 00:00:33.550
is done the code is complete 

11
00:00:33.940 --> 00:00:37.240
Now let us see an example given n is equal 

12
00:00:37.240 --> 00:00:37.950
to three 

13
00:00:37.960 --> 00:00:40.320
So three is passed into the function 

14
00:00:40.320 --> 00:00:44.090
sum first check the base case n is not equal 

15
00:00:44.090 --> 00:00:44.400
to one 

16
00:00:44.410 --> 00:00:48.040
It is equal to three so return n plus function 

17
00:00:48.040 --> 00:00:52.130
of n minus one that is return three plus sum 

18
00:00:52.130 --> 00:00:53.030
of two 

19
00:00:53.040 --> 00:00:56.120
So sum of two is called now checked the base 

20
00:00:56.120 --> 00:00:58.240
case here and it's not equal to one 

21
00:00:58.540 --> 00:01:02.000
So again return two plus sum of one check the 

22
00:01:02.000 --> 00:01:04.150
base case n is not equal to one 

23
00:01:04.370 --> 00:01:08.230
So again return two plus some of one so sum 

24
00:01:08.230 --> 00:01:11.520
of one is called and here also we have to 

25
00:01:11.520 --> 00:01:14.910
check the base case first and here N is equal 

26
00:01:14.910 --> 00:01:15.350
to one 

27
00:01:15.740 --> 00:01:19.680
So base case has reached so return n which is one 

28
00:01:19.760 --> 00:01:22.160
So here we get two plus one 

29
00:01:22.170 --> 00:01:25.750
That is three and three is returned from this function 

30
00:01:26.140 --> 00:01:29.350
And here we get three plus 3 that is 6 

31
00:01:29.840 --> 00:01:33.710
So six is so six is finally returned which is 

32
00:01:33.710 --> 00:01:34.950
the required output. 

