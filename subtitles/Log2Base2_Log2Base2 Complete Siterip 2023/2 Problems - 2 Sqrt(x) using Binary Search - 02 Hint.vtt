WEBVTT

1
00:00:00.340 --> 00:00:02.050
let us see how to solve this 

2
00:00:02.390 --> 00:00:04.450
Let us take an integer 25 

3
00:00:04.840 --> 00:00:08.000
We have to find an integer X which will multiply 

4
00:00:08.000 --> 00:00:12.030
with itself gives 25 for any integer n greater 

5
00:00:12.030 --> 00:00:15.180
than two the square root will lie between one and 

6
00:00:15.190 --> 00:00:16.450
end divided by two 

7
00:00:16.840 --> 00:00:20.700
Thus for 25 it's square root should like between one 

8
00:00:20.790 --> 00:00:21.450
and 12 

9
00:00:22.040 --> 00:00:24.680
We can do a binary search here from 1 to 

10
00:00:24.680 --> 00:00:26.560
12 in each iteration 

11
00:00:26.690 --> 00:00:30.300
First we will find the mid value and check if 

12
00:00:30.310 --> 00:00:34.290
mid Indo mid gives an integer 25 if it is 

13
00:00:34.470 --> 00:00:37.360
Then we have found the square root Else we have 

14
00:00:37.360 --> 00:00:40.040
to see whether mid indo mid is greater than or 

15
00:00:40.040 --> 00:00:41.150
less than 25 

16
00:00:41.540 --> 00:00:44.060
If it is less than 25 then we have to 

17
00:00:44.060 --> 00:00:46.890
continue a search in the second half from mid plus 

18
00:00:46.890 --> 00:00:50.210
one to end And if it is greater than 25 

19
00:00:50.220 --> 00:00:52.750
we have to continue a search in the first half 

20
00:00:52.750 --> 00:00:56.360
from start to mid minus one in the first iteration 

21
00:00:56.530 --> 00:01:00.990
mid is six and mid Indo mid is 36 here 36 

22
00:01:00.990 --> 00:01:04.470
is greater than 25 Hence we shall adjust end 

23
00:01:04.480 --> 00:01:08.320
to mid minus one that is five and continue searching 

24
00:01:08.320 --> 00:01:09.360
in the first half 

25
00:01:09.650 --> 00:01:11.920
Now the start is one and end 

26
00:01:11.920 --> 00:01:15.060
is five mid will be one plus five divided by 

27
00:01:15.060 --> 00:01:15.510
two 

28
00:01:15.790 --> 00:01:19.370
That's three and mid indo mid it's nine nine is 

29
00:01:19.370 --> 00:01:20.560
less than 25 

30
00:01:20.570 --> 00:01:22.550
Hence points start to mid 

31
00:01:22.550 --> 00:01:26.170
plus one that is four in the next iteration mid 

32
00:01:26.170 --> 00:01:28.700
will be four plus five divided by two that is 

33
00:01:28.700 --> 00:01:32.960
four and four indo four 16 16 again less than 

34
00:01:32.960 --> 00:01:36.290
25 so move start to mid plus one that is 

35
00:01:36.290 --> 00:01:40.400
five now start and end is five and hence mid 

36
00:01:40.400 --> 00:01:44.050
will also be five and five into 5 25 

37
00:01:44.440 --> 00:01:47.220
Thus we can return the mid element here that is 

38
00:01:47.220 --> 00:01:47.650
five 

39
00:01:48.140 --> 00:01:50.910
So what happens if given integer is not a 

40
00:01:50.910 --> 00:01:51.580
perfect square 

41
00:01:51.580 --> 00:01:54.700
Number let us take integer 11 and apply the 

42
00:01:54.700 --> 00:01:55.650
same logic 

43
00:01:56.040 --> 00:01:57.750
11 by two is five 

44
00:01:58.240 --> 00:02:00.970
So we will do a binary search from 1 to 

45
00:02:00.970 --> 00:02:05.050
5 in the first iteration mid will be three and mid 

46
00:02:05.050 --> 00:02:05.580
indo mid 

47
00:02:05.590 --> 00:02:08.160
is nine and nine is less than 11 

48
00:02:08.370 --> 00:02:11.750
Hence adjust start to mid plus one that is four 

49
00:02:12.240 --> 00:02:15.650
Now stat points to four and end points to five 

50
00:02:16.040 --> 00:02:16.840
Hence mid 

51
00:02:16.840 --> 00:02:19.750
is four mid indo mid is 16 

52
00:02:19.900 --> 00:02:23.570
16 is greater than 11 this point end to mid 

53
00:02:23.570 --> 00:02:26.490
minus one that's three now start 

54
00:02:26.490 --> 00:02:29.720
is not less than end this means we have reached 

55
00:02:29.720 --> 00:02:31.990
the end of iterations here 

56
00:02:32.000 --> 00:02:36.820
What is the square root of 11 It is 3.317 

57
00:02:37.150 --> 00:02:38.170
Leaving decimals 

58
00:02:38.170 --> 00:02:39.350
We have two return three 

59
00:02:39.740 --> 00:02:42.160
If you see the end index it is pointing to 

60
00:02:42.170 --> 00:02:46.050
three here that we can return it for perfect squared 

61
00:02:46.050 --> 00:02:46.650
numbers 

62
00:02:46.780 --> 00:02:49.290
The square root of number will be returned in 

63
00:02:49.300 --> 00:02:52.700
any one of the iterations and for non perfect square 

64
00:02:52.700 --> 00:02:53.370
numbers 

65
00:02:53.390 --> 00:02:56.920
Once our iterations get over the end index will be 

66
00:02:56.920 --> 00:03:00.250
pointing to the solution thus we can return it. 

