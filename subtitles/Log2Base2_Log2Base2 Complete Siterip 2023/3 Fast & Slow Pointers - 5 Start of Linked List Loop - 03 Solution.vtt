WEBVTT

1
00:00:00.200 --> 00:00:04.140
Let us take finding the linked list loop length code 

2
00:00:04.260 --> 00:00:05.270
and modify it

3
00:00:05.740 --> 00:00:09.920
We can rename the function to find loop start and 

4
00:00:09.920 --> 00:00:11.660
to store the length of the loop,

5
00:00:11.800 --> 00:00:15.660
let us declare a variable lenght. Once we find the 

6
00:00:15.660 --> 00:00:16.120
loop,

7
00:00:16.130 --> 00:00:18.320
That is when slow equal to fast 

8
00:00:18.620 --> 00:00:21.650
Calculate the loop length and store it in

9
00:00:21.650 --> 00:00:26.410
variable length. So write len equal to calculate length 

10
00:00:26.410 --> 00:00:28.650
of slow and break out of the loop

11
00:00:29.240 --> 00:00:32.920
Using the loop length, we can find the starting point 

12
00:00:32.920 --> 00:00:33.550
of the loop.

13
00:00:34.230 --> 00:00:36.330
So now let us write a function 

14
00:00:36.330 --> 00:00:39.890
Get start to find the starting point of linked list loop

15
00:00:39.890 --> 00:00:40.270


16
00:00:40.740 --> 00:00:43.620
For that, we need to pass the head of the 

17
00:00:43.620 --> 00:00:46.730
linked list and loop length as parameters. 

18
00:00:47.190 --> 00:00:48.800
So write return 

19
00:00:48.810 --> 00:00:51.450
getStart(head,length) 

20
00:00:52.420 --> 00:00:55.590
Now we can write the logic for finding the starting 

21
00:00:55.590 --> 00:00:56.470
point of the loop. 

22
00:00:57.140 --> 00:00:59.930
So the function takes the head of the linked list 

23
00:00:59.940 --> 00:01:04.200
and length of the loop as input and returns the 

24
00:01:04.200 --> 00:01:08.260
starting point of the loop which is of the type struct node *

25
00:01:06.960 --> 00:01:08.260


26
00:01:09.340 --> 00:01:11.860
So first we need to declare two pointers ptr1

27
00:01:11.860 --> 00:01:12.030


28
00:01:12.030 --> 00:01:16.000
and ptr2 and initialise both to 

29
00:01:16.010 --> 00:01:17.030
head of the linked list 

30
00:01:17.310 --> 00:01:21.230
So write struct node *ptr1 equal 

31
00:01:21.230 --> 00:01:24.250
to head and *ptr to equal to head

32
00:01:24.920 --> 00:01:29.170
Now we need to move ptr2 loop length times 

33
00:01:29.180 --> 00:01:31.790
ahead. So use a while loop

34
00:01:31.800 --> 00:01:36.690
So write while loopLength greater than zero, ptr2 

35
00:01:36.690 --> 00:01:40.460
equal to ptr2 next and decrement loop length. So 

36
00:01:40.460 --> 00:01:42.850
write loopLength --

37
00:01:43.640 --> 00:01:47.210
After that, we need to increment both ptr1 

38
00:01:47.220 --> 00:01:49.450
and ptr2 until they meet. 

39
00:01:49.840 --> 00:01:54.150
So write while ptr1 not equal to ptr2 

40
00:01:54.640 --> 00:01:57.920
ptr1 equal to ptr1 next and ptr2 

41
00:01:57.930 --> 00:02:00.050
equal to ptr2 next 

42
00:02:00.830 --> 00:02:03.690
Now we have found the starting point of the loop.

43
00:02:03.850 --> 00:02:06.800
so we can return it. So write return ptr1

44
00:02:06.800 --> 00:02:09.160
which will be the starting point of 

45
00:02:09.170 --> 00:02:12.280
the loop and it will be returned by our function.

