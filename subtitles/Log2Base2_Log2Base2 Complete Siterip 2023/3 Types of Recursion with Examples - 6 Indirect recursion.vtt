WEBVTT

1
00:00:00.290 --> 00:00:04.250
in this video let us learn about indirect recursion 

2
00:00:04.640 --> 00:00:08.140
If a function is calling itself it is known as 

3
00:00:08.150 --> 00:00:09.550
direct Recursion 

4
00:00:10.040 --> 00:00:14.400
But if a function one is calling function two and 

5
00:00:14.400 --> 00:00:18.290
that function two is calling back function one then it 

6
00:00:18.290 --> 00:00:22.020
is known as indirect recursion it is also 

7
00:00:22.020 --> 00:00:23.310
known as mutual 

8
00:00:23.310 --> 00:00:29.240
recursion See this example here function A is calling B and 

9
00:00:29.240 --> 00:00:32.800
B is calling A So this is indirect Recursion 

10
00:00:32.800 --> 00:00:33.350
 

11
00:00:33.820 --> 00:00:38.120
The function is not directly calling but is indirectly calling 

12
00:00:38.130 --> 00:00:40.850
itself Let me see an example 

13
00:00:41.440 --> 00:00:45.220
So we have two functions odd and even there is 

14
00:00:45.220 --> 00:00:49.450
a global variable n declared and initialised to one 

15
00:00:50.430 --> 00:00:54.480
Then there is odd function definition and even function definition 

16
00:00:55.040 --> 00:00:58.650
and firstly the programme is calling the function odd 

17
00:00:59.340 --> 00:01:04.010
So function odd will get executed it first checks if 

18
00:01:04.020 --> 00:01:07.410
n equal to five it is not so 

19
00:01:07.410 --> 00:01:09.650
It will print odd one 

20
00:01:10.440 --> 00:01:14.540
Now n is incremental so n equal to two now 

21
00:01:14.720 --> 00:01:18.730
and even function is called So function even will get 

22
00:01:18.740 --> 00:01:19.550
executed 

23
00:01:20.040 --> 00:01:22.800
And here it checks if n equal to five 

24
00:01:22.810 --> 00:01:24.490
But it is not so 

25
00:01:24.490 --> 00:01:29.120
The message even two is printed and n is incremented 

26
00:01:29.370 --> 00:01:31.650
and then function odd is called 

27
00:01:32.240 --> 00:01:36.500
So as you can see function odd called even and 

28
00:01:36.510 --> 00:01:38.950
even is now calling odd back 

29
00:01:39.340 --> 00:01:41.550
So this is indirect recursion 

30
00:01:42.040 --> 00:01:46.080
So now function odd will get executed and N is 

31
00:01:46.080 --> 00:01:47.180
not equal to five 

32
00:01:47.320 --> 00:01:51.630
So the message odd three is printed and n is 

33
00:01:51.640 --> 00:01:56.000
incremented and becomes four and function even is now 

34
00:01:56.010 --> 00:02:01.830
called See again indirect Recursion function even called odd 

35
00:02:01.890 --> 00:02:06.260
An odd is now calling even back so function odd 

36
00:02:06.260 --> 00:02:10.370
and even are calling themselves indirectly in this programme 

37
00:02:10.380 --> 00:02:13.700
So in function even n is not equal to five 

38
00:02:13.880 --> 00:02:17.990
So the message even four is printed and N is 

39
00:02:17.990 --> 00:02:21.890
now incremented and becomes five and the function odd is 

40
00:02:21.890 --> 00:02:26.010
called so in odd n equal to five so control 

41
00:02:26.010 --> 00:02:27.650
will return from the function.

