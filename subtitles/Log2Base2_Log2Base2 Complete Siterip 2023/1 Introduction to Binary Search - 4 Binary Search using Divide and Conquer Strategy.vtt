WEBVTT

1
00:00:00.140 --> 00:00:01.000
Hello friends 

2
00:00:01.050 --> 00:00:04.160
In this video let us learn how to perform binary  

3
00:00:04.160 --> 00:00:07.050
search using divide and conquer algorithm. 

4
00:00:12.840 --> 00:00:16.380
So we have already learned binary search using the normal 

5
00:00:16.380 --> 00:00:16.850
method. 

6
00:00:17.440 --> 00:00:20.350
If you're unfamiliar with the binary search concept, 

7
00:00:20.470 --> 00:00:23.640
you can watch the binary search video under the searching 

8
00:00:23.640 --> 00:00:25.030
algorithms section.

9
00:00:25.540 --> 00:00:28.690
In this video let us learn how to solve the binary 

10
00:00:28.690 --> 00:00:31.360
search with a divide and conquer algorithm 

11
00:00:32.140 --> 00:00:35.420
So in the normal approach whenever the middle element is 

12
00:00:35.420 --> 00:00:39.040
not matching, we will change the start and end index 

13
00:00:39.050 --> 00:00:39.780
accordingly 

14
00:00:40.640 --> 00:00:44.200
In this approach, if the middle element is not matching we 

15
00:00:44.200 --> 00:00:47.470
will divide the respective sub array and continue the same 

16
00:00:47.470 --> 00:00:48.040
process 

17
00:00:48.050 --> 00:00:50.850
using recursion. Let us see how. 

18
00:00:51.340 --> 00:00:54.350
Let us take a sorted array of eight elements 

19
00:00:54.780 --> 00:01:04.870
10 23 45 70 90 100 111 123 and indices start from 

20
00:01:04.870 --> 00:01:06.050
0 to 7.

21
00:01:06.540 --> 00:01:09.850
So start is equal to zero and end is equal to seven

22
00:01:09.370 --> 00:01:09.850


23
00:01:10.410 --> 00:01:14.120
And remember the array should be sorted in order to apply

24
00:01:13.660 --> 00:01:14.120
 

25
00:01:14.120 --> 00:01:18.270
The binary search algorithm. Let us assume the key to be 

26
00:01:18.270 --> 00:01:19.740
found is 45. 

27
00:01:20.510 --> 00:01:23.450
So what will binary search algorithm do? It will 

28
00:01:23.450 --> 00:01:26.890
calculate the middle index and if the middle index matches 

29
00:01:26.890 --> 00:01:27.410
the key 

30
00:01:27.610 --> 00:01:30.310
The search is found. Otherwise, 

31
00:01:30.320 --> 00:01:32.860
It will skip on the sub array and do the 

32
00:01:32.860 --> 00:01:36.680
same process until it finds the element. 

33
00:01:36.680 --> 00:01:40.440
Here the start index is zero and end index is seven 

34
00:01:41.140 --> 00:01:46.740
So middle index will be (0+7)/2 which is 3. So check

35
00:01:44.440 --> 00:01:46.740


36
00:01:46.750 --> 00:01:50.620
If index three has the value 45 and it is 

37
00:01:50.620 --> 00:01:53.390
not. Index three has the value 70. 

38
00:01:53.940 --> 00:01:56.740
And since the array is in sorted order, the key 

39
00:01:56.740 --> 00:01:59.910
45 should be present before index three. 

40
00:02:00.440 --> 00:02:03.370
So the divide and conquer algorithm will divide the 

41
00:02:03.370 --> 00:02:07.650
sub array from index 0 to 2 and do the same process 

42
00:02:08.240 --> 00:02:08.840
 

43
00:02:08.240 --> 00:02:11.940
Here mid is equal to (0+2)/2

44
00:02:11.950 --> 00:02:12.730
which is one.

45
00:02:13.340 --> 00:02:16.760
So the middle index is equal to one. So check 

46
00:02:16.770 --> 00:02:19.670
if it has the value 45 but it has the 

47
00:02:19.670 --> 00:02:23.960
value 23 and since 45 is greater than 23 

48
00:02:24.250 --> 00:02:27.100
If 45 is present in the array, it should be 

49
00:02:27.100 --> 00:02:29.450
present in the right sub array only. 

50
00:02:30.080 --> 00:02:33.800
That is after 23. So the divide and conquer algorithm 

51
00:02:33.810 --> 00:02:37.730
will divide the sub array where the starting and ending is 2

52
00:02:37.150 --> 00:02:37.730


53
00:02:38.800 --> 00:02:41.960
Now the Mid index is equal to (2+2)/2

54
00:02:41.960 --> 00:02:45.350
 which is two and index two has 

55
00:02:45.350 --> 00:02:49.050
the value 45, which means our search is found.

56
00:02:49.840 --> 00:02:53.210
So let's see the code for binary search function and 

57
00:02:53.220 --> 00:02:55.440
explain it using the same case. 

58
00:02:56.040 --> 00:02:58.770
So here we have the binary search function and we 

59
00:02:58.770 --> 00:03:02.620
will pass the start of the array and the end of the array and 

60
00:03:02.620 --> 00:03:04.710
the key to be searched into the function 

61
00:03:05.540 --> 00:03:08.040
So here this is the array. It's start 

62
00:03:08.040 --> 00:03:11.370
is equal to zero and end is equal to seven and the key 

63
00:03:11.370 --> 00:03:13.600
to be searched is 45 

64
00:03:14.260 --> 00:03:17.140
So we have to find the middle element

65
00:03:17.150 --> 00:03:19.720
Check if it is the key, else find where the key 

66
00:03:19.720 --> 00:03:22.900
can be present and divide the array and search in 

67
00:03:22.900 --> 00:03:24.110
one sub array only. 

68
00:03:24.940 --> 00:03:27.600
So we have to do this process till we find 

69
00:03:27.600 --> 00:03:29.960
the key or we get an invalid index 

70
00:03:30.440 --> 00:03:34.240
So put the code inside this if start less than 

71
00:03:34.240 --> 00:03:38.640
or equal to end and find mid first that is 

72
00:03:38.650 --> 00:03:42.330
(start+end)/2 that is seven by two 

73
00:03:42.340 --> 00:03:43.440
which is equal to three.

74
00:03:44.240 --> 00:03:48.010
So check if the element at index has the key 45 

75
00:03:48.440 --> 00:03:50.460
and it is not. So check 

76
00:03:50.650 --> 00:03:53.710
If this middle element is less than the key and 

77
00:03:53.720 --> 00:03:57.720
it is not. So 45 can only be present in 

78
00:03:57.720 --> 00:03:58.710
the left part. 

79
00:03:59.740 --> 00:04:04.180
So we have return binary search of array, start 0

80
00:04:04.180 --> 00:04:08.860
mid-1 that is 2 and key 45 

81
00:04:10.140 --> 00:04:13.970
So from binary search function, we are calling binary search

82
00:04:13.980 --> 00:04:18.050
with the same array, start as zero and end as two

83
00:04:18.940 --> 00:04:22.760
let us say this is binary search1. And whatever 

84
00:04:22.760 --> 00:04:25.490
this function binary search1 is retruning,

85
00:04:25.710 --> 00:04:29.400
That value will be returned by this main binary search also.

86
00:04:29.410 --> 00:04:34.070
So let us see what happens here. Here start is less 

87
00:04:34.070 --> 00:04:37.320
than end. So find mid and it will be 

88
00:04:37.330 --> 00:04:40.660
2/2 equal to one. So check if element at 

89
00:04:40.670 --> 00:04:44.050
index 1 is the key and it is not. 

90
00:04:44.050 --> 00:04:47.990
So check if this mddle element is less than key, and it is.

91
00:04:47.990 --> 00:04:52.060
So 45 can only be present in the right 

92
00:04:52.070 --> 00:04:55.300
part of this sub array. So we are calling 

93
00:04:55.300 --> 00:04:56.770
binary search again. 

94
00:04:56.940 --> 00:05:00.980
So we have binary search of arr, start as mid+1 

95
00:05:00.980 --> 00:05:03.450
 which is two and end as two and key 45.

96
00:05:03.450 --> 00:05:08.730
So let us call this binary search2. So we 

97
00:05:08.730 --> 00:05:12.290
had main binary search calling binarysearch1

98
00:05:12.290 --> 00:05:14.850
and binary search1 is calling binary search2

99
00:05:15.740 --> 00:05:16.170


100
00:05:15.740 --> 00:05:19.930
So let us see what happens in binary search2. Here Start is 

101
00:05:19.930 --> 00:05:23.420
equal to end. So find mid which is (2+2)

102
00:05:23.420 --> 00:05:25.570
divided by two equal to two 

103
00:05:26.140 --> 00:05:29.180
So check if element at middle index two, is the 

104
00:05:29.180 --> 00:05:31.250
key and it is. So return one 

105
00:05:31.380 --> 00:05:32.960
As the search is found 

106
00:05:34.240 --> 00:05:38.250
So binary search2 is returning 1 to binary search1 

107
00:05:38.740 --> 00:05:42.160
and binary search1  is returning one to this main 

108
00:05:42.160 --> 00:05:46.420
binary search function and finally this function will return the 

109
00:05:46.420 --> 00:05:48.330
result one to main function. 

110
00:05:49.040 --> 00:05:52.440
So this is how we implement binary search using divide 

111
00:05:52.440 --> 00:05:53.540
and conquer approach 

112
00:05:54.140 --> 00:05:56.500
So what are the three steps in the divide and conquer 

113
00:05:56.500 --> 00:06:02.060
approach? Divide, conquer and combine. Here Splitting the sub 

114
00:06:02.070 --> 00:06:04.290
array is equal to dividing the problem. 

115
00:06:04.550 --> 00:06:07.520
Finding the middle index and checking whether it has the 

116
00:06:07.520 --> 00:06:11.630
key or solution is conquering the problem and returning search 

117
00:06:11.630 --> 00:06:14.980
found status that is  result from various recursive 

118
00:06:14.980 --> 00:06:17.230
calls is known as combining. 

119
00:06:17.640 --> 00:06:20.500
So this is a perfect example of the divide and 

120
00:06:20.500 --> 00:06:21.600
conquer algorithm 

121
00:06:22.140 --> 00:06:25.220
This is how the divide and conquer algorithm recursively

122
00:06:25.220 --> 00:06:28.680
 divide the original array and search the given key 

123
00:06:29.050 --> 00:06:32.040
And finally the result is gathered from those recursive calls.

