WEBVTT

1
00:00:00.940 --> 00:00:01.700
Hi friends 

2
00:00:01.710 --> 00:00:04.000
In this video we are going to learn about different 

3
00:00:04.000 --> 00:00:05.250
storage classes 

4
00:00:12.850 --> 00:00:16.140
So first of all a storage class defines the scope 

5
00:00:16.140 --> 00:00:17.830
and lifetime of variables 

6
00:00:17.950 --> 00:00:21.040
We have four different storage classes in the C program

7
00:00:21.310 --> 00:00:24.390
First let us discuss about auto. Auto 

8
00:00:24.390 --> 00:00:26.990
is the default storage class for all the local 

9
00:00:26.990 --> 00:00:31.330
variables here auto int i is as same as writing int i

10
00:00:31.340 --> 00:00:35.480
 so variable i is created and initialised with 100 in 

11
00:00:35.480 --> 00:00:39.580
the memory. now about the scope. auto storage class 

12
00:00:39.580 --> 00:00:42.940
Variable scope is limited to within the function or the 

13
00:00:42.940 --> 00:00:45.950
block and they can't be accessed from out of the 

14
00:00:45.950 --> 00:00:46.560
function 

15
00:00:46.710 --> 00:00:49.730
So here if we had another function fun and 

16
00:00:49.740 --> 00:00:53.029
and if we try to access i from that function 

17
00:00:53.040 --> 00:00:54.449
it cannot be accessed 

18
00:00:54.640 --> 00:00:58.960
Now let us discuss about static storage class as we 

19
00:00:58.960 --> 00:00:59.810
just discussed 

20
00:00:59.810 --> 00:01:02.630
The scope of local variable is limited to within the 

21
00:01:02.630 --> 00:01:05.610
function or the block and if we need to extend 

22
00:01:05.610 --> 00:01:09.060
the lifetime of a local variable throughout the programme then 

23
00:01:09.060 --> 00:01:11.420
we can use static storage class 

24
00:01:12.140 --> 00:01:15.850
Here we have static int i. So static variable 

25
00:01:15.860 --> 00:01:18.710
i will be created and the memory will be allocated 

26
00:01:18.720 --> 00:01:23.000
in the global section now we print value of  i so 

27
00:01:23.010 --> 00:01:25.520
we will get the output i equal to 10 

28
00:01:25.780 --> 00:01:29.149
Now we increment it so i will become 11 and 

29
00:01:29.150 --> 00:01:32.400
now we call the function and control reaches there and 

30
00:01:32.400 --> 00:01:35.000
there we print the value of again so i will 

31
00:01:35.000 --> 00:01:37.630
be accessed and its value will be printed and we 

32
00:01:37.630 --> 00:01:39.940
will get the output i equal to 11 

33
00:01:40.440 --> 00:01:41.030
Now let us

34
00:01:41.030 --> 00:01:44.320
Discuss about register storage class. Local variables 

35
00:01:44.320 --> 00:01:47.020
are stored in random access memory by default 

36
00:01:47.080 --> 00:01:50.310
But if we need to store very frequently used variables 

37
00:01:50.510 --> 00:01:53.990
then we can use processor registers instead of RAM. Because 

38
00:01:53.990 --> 00:01:57.080
processor registers are obviously faster than RAM 

39
00:01:57.210 --> 00:02:00.650
So in such cases we can use register storage class 

40
00:02:00.640 --> 00:02:01.340
Here 

41
00:02:01.350 --> 00:02:04.740
We can store the local variables in the processor's register 

42
00:02:04.750 --> 00:02:06.020
instead of RAM

43
00:02:06.030 --> 00:02:08.360
Here the variable i uses 

44
00:02:08.360 --> 00:02:10.640
The Intel processors register memory 

45
00:02:10.880 --> 00:02:13.679
Now what will happen if we try to print its 

46
00:02:13.690 --> 00:02:17.880
address or the memory location? Unlike RAM, the register

47
00:02:17.880 --> 00:02:20.950
doesn't have a memory location so we can't access it 

48
00:02:21.140 --> 00:02:23.660
And if we try to do so it will throw 

49
00:02:23.660 --> 00:02:25.050
this error message 

50
00:02:25.640 --> 00:02:30.270
Finally let's discuss about exterb in some situations we 

51
00:02:30.270 --> 00:02:32.810
need to access the data across two files 

52
00:02:32.910 --> 00:02:35.960
In that case the external storage class will be very 

53
00:02:35.960 --> 00:02:39.809
useful here int i=10 is declared in

54
00:02:39.820 --> 00:02:40.649
file1

55
00:02:40.740 --> 00:02:43.799
If we want to use the same variable in file2

56
00:02:43.810 --> 00:02:44.250


57
00:02:44.260 --> 00:02:46.670
We need to use the extern key word before the 

58
00:02:46.670 --> 00:02:50.610
variable declaration in file2 like this when we use 

59
00:02:50.610 --> 00:02:51.760
the extern keyword

60
00:02:51.820 --> 00:02:54.540
It tells the compiler that I am defined in 

61
00:02:54.540 --> 00:02:58.800
some other file and linker will resolve me later and 

62
00:02:59.010 --> 00:02:59.670
we are printing

63
00:02:59.670 --> 00:03:03.170
the value of i in file2. Now let us compile

64
00:03:03.170 --> 00:03:06.650
the two files GCC file1.c  file2.c 

65
00:03:06.660 --> 00:03:08.960
after compilation 

66
00:03:08.960 --> 00:03:11.300
The linker will be resolving the value of i

67
00:03:11.300 --> 00:03:13.390
by linking the two object files 

68
00:03:13.460 --> 00:03:16.490
And finally the value of i that is 10 is 

69
00:03:16.490 --> 00:03:18.010
printed and this is how

70
00:03:18.010 --> 00:03:21.850
 the external storage class extends the visibility of a variable 

71
00:03:21.860 --> 00:03:23.429
across different files 

72
00:03:24.540 --> 00:03:27.120
This is how static storage class extends 

73
00:03:27.120 --> 00:03:29.870
The scope of the local variable throughout the programme 

74
00:03:30.440 --> 00:03:33.850
Now let's quickly summarise all these storage classes 

75
00:03:34.240 --> 00:03:36.750
The first one we discussed was auto 

76
00:03:36.760 --> 00:03:38.500
It is the default storage class 

77
00:03:38.640 --> 00:03:41.959
The scope of auto is within the function and auto 

78
00:03:41.960 --> 00:03:45.260
storage class variables cannot be accessed from out of the 

79
00:03:45.260 --> 00:03:45.750
function 

80
00:03:46.440 --> 00:03:48.760
The second one was static storage class 

81
00:03:48.830 --> 00:03:52.350
It extends the scope of local variable throughout the programme 

82
00:03:52.840 --> 00:03:55.459
Next one was register storage class 

83
00:03:55.500 --> 00:03:58.150
It stores the value in processor's register 

84
00:03:58.160 --> 00:04:01.140
Hence it provides faster access than RAM 

85
00:04:01.170 --> 00:04:04.299
We can use this to store the variables which need 

86
00:04:04.300 --> 00:04:05.520
frequent access 

87
00:04:06.640 --> 00:04:09.209
The last one was extern storage class 

88
00:04:09.280 --> 00:04:12.730
It extends the visibility of the variables across different 

89
00:04:12.730 --> 00:04:13.280
files 

90
00:04:15.540 --> 00:04:17.830
So that's all and thank you for watching this video 

