WEBVTT

1
00:00:00.340 --> 00:00:04.470
Hello friends! In this video let us understand how to 

2
00:00:04.480 --> 00:00:07.810
avoid the re-computation issue. 

3
00:00:11.810 --> 00:00:18.960
In the previous video, we discussed about dynamic programming approaches and the recomputation issues 

4
00:00:18.970 --> 00:00:22.470
in the top down approach. We can avoid the 

5
00:00:22.470 --> 00:00:28.170
recomputation issue using memoization. To avoid the recomputation issue 

6
00:00:28.180 --> 00:00:31.790
we need to store the result of sub problems in 

7
00:00:31.790 --> 00:00:35.700
the separate memory so that when we face the same 

8
00:00:35.700 --> 00:00:39.300
sub problem again we need not solve them again 

9
00:00:39.640 --> 00:00:43.350
Instead we can re-use the already solved result. 

10
00:00:44.010 --> 00:00:46.050
This is called Memoization. 

11
00:00:46.600 --> 00:00:50.560
Let us understand that by solving the same nth Fibonacci 

12
00:00:50.560 --> 00:00:55.550
problem using a top down approach with an array additional memory

13
00:00:54.970 --> 00:00:55.550


14
00:00:56.340 --> 00:01:01.050
To find the fourth Fibonacci number, allocate 5 memory slots. 

15
00:01:01.740 --> 00:01:05.800
As we know the base case fib(0) is 0 and 

16
00:01:05.800 --> 00:01:10.750
 and fib(1) is 1. Store 0 and 1 in the memory.

17
00:01:09.900 --> 00:01:10.750


18
00:01:11.240 --> 00:01:15.310
The idea here is, before making any recursive call

19
00:01:15.540 --> 00:01:18.650
check if it is already solved in the memory. 

20
00:01:19.040 --> 00:01:20.980
If it is solved, just return

21
00:01:20.980 --> 00:01:24.820
the result. Otherwise, initiate the reclusive call to solve the 

22
00:01:24.820 --> 00:01:25.750
sub problem. 

23
00:01:26.540 --> 00:01:29.270
So Fib(0) and fib(1) are stored. 

24
00:01:29.270 --> 00:01:29.740


25
00:01:30.130 --> 00:01:30.360


26
00:01:29.270 --> 00:01:33.640
Here now Fib(2) will be calculated which is Fib(0) + Fib(1)

27
00:01:33.650 --> 00:01:37.410
Now fib(0) 

28
00:01:37.410 --> 00:01:40.670
and fib(1) are base cases and are already stored in the array.

29
00:01:40.680 --> 00:01:45.000
So fib(2) will be calculated which 

30
00:01:45.000 --> 00:01:48.780
is 0+1 equal to 1 and it will 

31
00:01:48.780 --> 00:01:53.380
be stored in the array. Now fib(3) will be calculated 

32
00:01:53.940 --> 00:01:58.400
It is not stored in the array. So compute it. that is 

33
00:01:58.410 --> 00:01:59.750
fib(2) + fib(1)

34
00:01:59.750 --> 00:02:04.020
that is 1+1 equal to 2. 

35
00:02:04.020 --> 00:02:07.080
So fib(3) equal to two and it will be stored in the array.

36
00:02:07.080 --> 00:02:11.950
Now fib(2) should be calculated and when 

37
00:02:11.960 --> 00:02:15.640
it is checked in the array, it is already computed and 

38
00:02:15.640 --> 00:02:18.880
stored in the array.  So it is only a matter of 

39
00:02:18.880 --> 00:02:20.230
returning it from there 

40
00:02:20.240 --> 00:02:23.660
We do not need to call fib(0) and 

41
00:02:23.660 --> 00:02:27.370
fib(1) recursively. So the repeated work is not 

42
00:02:27.380 --> 00:02:28.350
occurring here. 

43
00:02:29.040 --> 00:02:32.380
Now fib(4) should be calculated and it is not 

44
00:02:32.390 --> 00:02:35.210
already stored in the array. So compute it. 

45
00:02:35.220 --> 00:02:37.230
that is fib(3) and fib(2)

46
00:02:37.230 --> 00:02:40.380
that is 2+1 equal to 3 

47
00:02:40.390 --> 00:02:41.750
and it will be stored. 

48
00:02:43.240 --> 00:02:47.340
This is how memoization avoids the re-computation of same subproblem in the top-down approach.

