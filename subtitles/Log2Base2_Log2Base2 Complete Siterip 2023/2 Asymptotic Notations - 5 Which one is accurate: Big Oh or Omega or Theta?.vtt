WEBVTT

1
00:00:00.110 --> 00:00:03.610
we have discussed three types of asymptotic notations.  

2
00:00:03.610 --> 00:00:05.840
Big Oh; Big Omega and big theta 

3
00:00:06.110 --> 00:00:09.370
Out of these which one is more accurate. 

4
00:00:09.380 --> 00:00:10.900
Big Oh or Omega or Theta

5
00:00:11.190 --> 00:00:14.390
Theta notation is more accurate because if I tell a 

6
00:00:14.390 --> 00:00:17.970
particular function takes big O(n^2) time, What it 

7
00:00:17.970 --> 00:00:21.200
means is I'm not sure exactly how much time this 

8
00:00:21.200 --> 00:00:24.880
particular function takes but I guarantee that it will not 

9
00:00:24.880 --> 00:00:27.140
grow beyond n square time functions.

10
00:00:27.430 --> 00:00:29.400
It can be smaller than n square, it 

11
00:00:29.400 --> 00:00:32.260
Maybe n, it maybe logn etcetera

12
00:00:32.620 --> 00:00:36.190
Similarly if I tell a particular function takes omega of 

13
00:00:36.200 --> 00:00:39.770
one time it means that I am not sure exactly 

14
00:00:39.770 --> 00:00:42.040
how much time this particular function takes 

15
00:00:42.110 --> 00:00:45.340
But I guarantee that it will always be greater than 

16
00:00:45.340 --> 00:00:45.770
me 

17
00:00:46.560 --> 00:00:48.600
It can be square root of n, it can be 

18
00:00:48.600 --> 00:00:49.670
logn etcetera 

19
00:00:49.970 --> 00:00:53.300
But when we say the particular function takes theta of 

20
00:00:53.310 --> 00:00:53.960
n time 

21
00:00:54.130 --> 00:00:57.680
What It means that I am 100% guarantee that this 

22
00:00:57.680 --> 00:01:00.410
particular function takes exactly n time 

23
00:01:00.910 --> 00:01:03.780
It will not be bigger than or smaller than n 

24
00:01:03.780 --> 00:01:04.780
it is exactly n

25
00:01:05.400 --> 00:01:08.010
So out of all these three which one is more 

26
00:01:08.010 --> 00:01:09.400
accurate. It is theta

27
00:01:09.560 --> 00:01:13.380
So as being discussed earlier whenever analysing the time complexity 

28
00:01:13.380 --> 00:01:16.760
of an algorithm always try to find the average bound 

29
00:01:16.760 --> 00:01:18.070
that is theta notation 

30
00:01:18.320 --> 00:01:21.100
If you found the exact time function for the average 

31
00:01:21.100 --> 00:01:25.290
bound represented with theta notation. If not, go for upper 

32
00:01:25.300 --> 00:01:26.750
bound or lower bound. That's it 

