WEBVTT

1
00:00:01.040 --> 00:00:01.770
Hi friends 

2
00:00:01.780 --> 00:00:03.930
In this video we are going to learn the sizeof 

3
00:00:03.930 --> 00:00:04.850
operator. 

4
00:00:11.140 --> 00:00:13.910
So using sizeof operator we can get the size 

5
00:00:13.920 --> 00:00:16.870
of a variable or a datatype and in GCC 

6
00:00:16.870 --> 00:00:18.680
sizeof(int) = 4 

7
00:00:18.690 --> 00:00:21.450
That is the Integer datatype allocates 4 bytes 

8
00:00:21.450 --> 00:00:23.680
to store the value and the sizeof (char) will 

9
00:00:23.680 --> 00:00:26.410
be equal to one that is the character data type 

10
00:00:26.420 --> 00:00:30.439
allocates one byte to store the value and the 

11
00:00:30.440 --> 00:00:31.860
sizeof(float) will be four 

12
00:00:32.140 --> 00:00:34.850
That is the float datatype allocates four bytes to 

13
00:00:34.850 --> 00:00:37.990
store the values and sizeof(double) will be equal 

14
00:00:37.990 --> 00:00:41.290
to eight and double allocates eight bytes to store the 

15
00:00:41.290 --> 00:00:41.769
value 

16
00:00:42.740 --> 00:00:44.970
Now let us see a programme and in the main 

17
00:00:44.970 --> 00:00:45.449
function 

18
00:00:45.450 --> 00:00:48.080
We are declaring a character variable C and a double 

19
00:00:48.080 --> 00:00:51.700
precision floating point variable D and we have a print 

20
00:00:51.700 --> 00:00:55.660
function here which prints size of variable c =sizeof(c) 

21
00:00:55.660 --> 00:00:57.820
 so it will find the size of the 

22
00:00:57.820 --> 00:00:58.270
variable c

23
00:00:58.270 --> 00:01:00.960
 which is a character type so it will print 

24
00:01:00.960 --> 00:01:03.239
the size of variable c equal to one 

25
00:01:03.480 --> 00:01:06.220
Next we have size of variable d and sizeof(d) 

26
00:01:06.230 --> 00:01:09.570
 will return eight since it is a double and 

27
00:01:09.570 --> 00:01:12.070
the next print function will print sizeof(10) 

28
00:01:12.340 --> 00:01:14.690
So 10 is an integer so size of 10 

29
00:01:14.690 --> 00:01:18.580
will return 4. So that's all and thank you for 

30
00:01:18.580 --> 00:01:19.510
watching this video 

