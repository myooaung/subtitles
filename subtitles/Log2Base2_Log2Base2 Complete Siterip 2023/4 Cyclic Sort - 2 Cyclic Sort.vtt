WEBVTT

1
00:00:00.140 --> 00:00:01.210
In this video 

2
00:00:01.220 --> 00:00:05.160
Let us learn how cyclic sort works.

3
00:00:05.160 --> 00:00:07.000
As we discussed in the previous video, 

4
00:00:07.240 --> 00:00:10.780
in order to apply cyclic sort the array elements 

5
00:00:10.790 --> 00:00:14.560
should be in a range. So let us take an array of five 

6
00:00:14.570 --> 00:00:23.950
elements from range 1 to 5. The elements are 3 4 5 2 and 1 

7
00:00:23.270 --> 00:00:23.950


8
00:00:24.540 --> 00:00:28.070
Here all the elements are in given range of  

9
00:00:28.070 --> 00:00:30.630
1 to 5 but they are unsorted

10
00:00:30.970 --> 00:00:33.970
We need to sort all the elements using the  

11
00:00:33.970 --> 00:00:36.960
cyclic sort. So the logic here is

12
00:00:37.230 --> 00:00:40.520
Since all the elements are in a given range, 

13
00:00:40.530 --> 00:00:42.300
for each index we check

14
00:00:42.300 --> 00:00:45.350
the right element is present there or not 

15
00:00:46.040 --> 00:00:50.150
If not, we will swap the element to correct index 

16
00:00:50.570 --> 00:00:55.910
For example here the elements are 3 4 5 2 1

17
00:00:55.920 --> 00:00:58.560
here 3's

18
00:00:58.570 --> 00:01:02.350
actual place is array[3-1] which is 

19
00:01:02.360 --> 00:01:06.050
array[2]. Element 4's actual place is

20
00:01:06.300 --> 00:01:10.450
arr[4-1] which is array[3]. Similarly 

21
00:01:11.140 --> 00:01:12.240
element five's

22
00:01:12.250 --> 00:01:17.110
actual place is array[4] and element 2's actual place is 

23
00:01:17.120 --> 00:01:21.440
array[1] and finally 1's actual place is array[0] 

24
00:01:21.450 --> 00:01:22.050


25
00:01:23.140 --> 00:01:26.430
If we can place all the elements to their correct 

26
00:01:26.440 --> 00:01:30.240
indices, the array will be sorted. So let us 

27
00:01:30.240 --> 00:01:32.050
sort the elements in that way.

28
00:01:32.520 --> 00:01:37.650
So initially we have array equal to 3 4 5 2 1

29
00:01:36.790 --> 00:01:37.650


30
00:01:38.640 --> 00:01:42.740
The value of index zero is 3 and 3's actual

31
00:01:42.740 --> 00:01:43.750
index two.

32
00:01:44.140 --> 00:01:47.840
So swap array[0] and array[2] which 

33
00:01:47.840 --> 00:01:55.750
is 3 5 now the array will be 5 4 3 2 1 

34
00:01:55.900 --> 00:01:58.300
Now we have five in index zero 

35
00:01:58.310 --> 00:02:01.000
But index zero is not its place 

36
00:02:01.210 --> 00:02:05.850
It's actual place is arr[4]. So swap five and one 

37
00:02:06.340 --> 00:02:11.540
Now the array will be 1 4 3 2 5 

38
00:02:12.340 --> 00:02:14.130
Now one is in index zero 

39
00:02:14.220 --> 00:02:16.960
It is already in its correct place. So we can 

40
00:02:16.960 --> 00:02:19.950
skip it and move to the next element 

41
00:02:20.340 --> 00:02:24.880
Now in index one, we have four but it's actual 

42
00:02:24.880 --> 00:02:26.780
place is array[3] 

43
00:02:26.790 --> 00:02:31.390
So swap four and two and now we have placed 

44
00:02:31.400 --> 00:02:34.320
all the elements in their correct positions 

45
00:02:34.570 --> 00:02:40.240
So the sorted elements are 1 2 3 4 and 5

46
00:02:40.740 --> 00:02:43.550
So this is how the elements are sorted in cyclic sort.

47
00:02:43.550 --> 00:02:47.040
Now let us see implementation of cyclic sort 

48
00:02:47.040 --> 00:02:51.710
So let us write a function sort which takes two 

49
00:02:51.710 --> 00:02:54.350
arguments the array and its size.

50
00:02:54.830 --> 00:02:59.220
Next declare iterating variable i and initialised it to zero.

51
00:02:59.220 --> 00:03:03.470
So while i less than size we need to find 

52
00:03:03.480 --> 00:03:06.950
the actual index of value present in array[i] 

53
00:03:07.540 --> 00:03:11.560
Here elements are in between one to n but the 

54
00:03:11.560 --> 00:03:13.700
array index starts with zero 

55
00:03:13.910 --> 00:03:17.090
So decrement one from array[i] to get 

56
00:03:17.090 --> 00:03:22.290
the actual index. so write int index equal to array[i-1] 

57
00:03:22.290 --> 00:03:25.150
and check

58
00:03:25.230 --> 00:03:28.990
if array[i] is present in it's correct index 

59
00:03:29.280 --> 00:03:31.820
If not, we need to swap the elements 

60
00:03:32.110 --> 00:03:35.880
So write if array[i] not equal to array[index] 

61
00:03:35.880 --> 00:03:41.110
swap &arr[index], &arr[n] 

62
00:03:41.120 --> 00:03:43.790
we need to write the logic for 

63
00:03:43.790 --> 00:03:45.760
swap operation here we 

64
00:03:45.760 --> 00:03:49.260
Simply use a third variable temp to swap X and Y

65
00:03:49.260 --> 00:03:49.550


66
00:03:50.040 --> 00:03:54.410
So when this function is called elements at index i 

67
00:03:54.620 --> 00:03:58.830
and index will be swapped. Otherwise just move to 

68
00:03:58.830 --> 00:03:59.880
the next element. 

69
00:04:00.040 --> 00:04:04.470
So write else i++ and this process will 

70
00:04:04.470 --> 00:04:07.230
be done till i is less than size 

71
00:04:07.740 --> 00:04:09.890
So this is all about the cyclic sort 

72
00:04:10.140 --> 00:04:13.350
In the next video, we will solve problems using the cyclic sort pattern.

