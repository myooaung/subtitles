WEBVTT

1
00:00:00.140 --> 00:00:01.020
Hello friends 

2
00:00:01.080 --> 00:00:04.180
In this video let us learn how to perform binary 

3
00:00:04.180 --> 00:00:07.150
search using divide and conquer algorithm 

4
00:00:08.540 --> 00:00:12.040
So we have already learned binary search using the normal 

5
00:00:12.040 --> 00:00:12.550
method 

6
00:00:13.040 --> 00:00:16.560
If you're unfamiliar with the binary search concept you can 

7
00:00:16.560 --> 00:00:20.750
watch the binary search video under the searching algorithms section 

8
00:00:21.240 --> 00:00:24.170
In this video let us learn how to solve the 

9
00:00:24.170 --> 00:00:27.150
binary search with a divide and conquer algorithms

10
00:00:27.740 --> 00:00:31.090
So in the normal approach whenever the middle element is 

11
00:00:31.090 --> 00:00:34.700
not matching we will change the start and end index 

12
00:00:34.710 --> 00:00:35.450
accordingly 

13
00:00:36.390 --> 00:00:39.910
In this approach If the middle element is not matching we 

14
00:00:39.910 --> 00:00:43.180
will divide the respective subarray and continue the same 

15
00:00:43.180 --> 00:00:43.750
process 

16
00:00:43.760 --> 00:00:46.470
Using recursion Let us see how 

17
00:00:47.030 --> 00:00:50.010
Let us take a sorted array of eight elements 

18
00:00:50.440 --> 00:01:00.540
10, 23 ,45, 70, 80, 100, 111, 123 and indecent start from 

19
00:01:00.540 --> 00:01:01.750
0 to 7 

20
00:01:02.230 --> 00:01:05.030
So start is equal to zero and end is equal 

21
00:01:05.030 --> 00:01:08.900
to seven and remember the array should be sorted 

22
00:01:08.900 --> 00:01:09.790
inorder to apply 

23
00:01:09.790 --> 00:01:13.940
The binary search algorithm  let us assume the key to be 

24
00:01:13.940 --> 00:01:15.350
found is 45 

25
00:01:16.140 --> 00:01:19.120
So what will binary search algorithm do It will 

26
00:01:19.120 --> 00:01:22.550
calculate the middle index and if the middle index matches 

27
00:01:22.550 --> 00:01:23.050
the key 

28
00:01:23.270 --> 00:01:25.970
The search is found otherwise
29
00:01:25.980 --> 00:01:28.530
It will skip on the sub array and do the 

30
00:01:28.530 --> 00:01:32.460
same process until it finds the element here 

31
00:01:32.470 --> 00:01:36.150
The start indexes  zero and end  indexes seven 

32
00:01:36.840 --> 00:01:40.090
So middle index will be zero plus seven divided by 

33
00:01:40.100 --> 00:01:42.560
two which is three so check

34
00:01:42.850 --> 00:01:46.320
If index three has the value 45 and it is 

35
00:01:46.320 --> 00:01:49.050
not index three has the value 70 

36
00:01:49.640 --> 00:01:52.400
And since the array and sorted order the key 

37
00:01:52.400 --> 00:01:56.860
45 should be present before index three so the divide 

38
00:01:56.860 --> 00:02:00.250
and conquer algorithm  will divide the subarray from 

39
00:02:00.260 --> 00:02:05.080
index 0 to 2 and do the same process here mid

40
00:02:05.080 --> 00:02:07.900
is equal to zero plus two divided by two which 

41
00:02:07.900 --> 00:02:08.450
is one 

42
00:02:09.040 --> 00:02:12.480
So the middle indexes equal to one so check 

43
00:02:12.490 --> 00:02:13.600
if it has the value 

44
00:02:13.600 --> 00:02:18.120
45 but it has the value 23 and since 45 

45
00:02:18.120 --> 00:02:19.620
is greater than 23 

46
00:02:19.910 --> 00:02:22.760
If 45 is present in the array it should be 

47
00:02:22.760 --> 00:02:26.590
present in the right subarray only that is after 

48
00:02:26.590 --> 00:02:30.340
23 so the divide and conquer algorithm will divide the 

49
00:02:30.340 --> 00:02:31.090
subarray

50
00:02:31.430 --> 00:02:35.420
Were the starting and ending is too now the mid

51
00:02:35.430 --> 00:02:38.490
indexes equel to two plus two divided by two 

52
00:02:38.500 --> 00:02:42.250
which is two and index two has the value 45 

53
00:02:42.450 --> 00:02:44.750
which means our search is formed 

54
00:02:45.440 --> 00:02:48.870
So let us see the code for binary search function and 

55
00:02:48.880 --> 00:02:51.150
explain it using the same case 

56
00:02:51.640 --> 00:02:54.460
So here we have the binary search function and we 

57
00:02:54.460 --> 00:02:58.310
will pause the array start of the array  end of the array and 

58
00:02:58.310 --> 00:03:00.350
the key to be searched into the function 

59
00:03:01.240 --> 00:03:04.140
So here this is the array it start is equal 

60
00:03:04.140 --> 00:03:07.100
to zero and is equal to seven and the key 

61
00:03:07.100 --> 00:03:09.310
to be searched is 45 

62
00:03:10.040 --> 00:03:12.830
So we have to find the middle element check

63
00:03:12.840 --> 00:03:15.410
If it is the key else find were the key 

64
00:03:15.410 --> 00:03:19.070
can be present and divide the and search in one 

65
00:03:19.070 --> 00:03:20.050
subarray only 

66
00:03:20.640 --> 00:03:23.300
So we have to do this process till we find 

67
00:03:23.300 --> 00:03:23.800
the key 

68
00:03:23.900 --> 00:03:25.650
We get an invalid index 

69
00:03:26.040 --> 00:03:29.930
So put the code inside this if start less than 

70
00:03:29.930 --> 00:03:34.350
or equal to end and find mid first that is 

71
00:03:34.360 --> 00:03:38.100
start plus end by two that is seven by two 

72
00:03:38.110 --> 00:03:39.250
which is equal to three 

73
00:03:39.840 --> 00:03:43.750
So check if  elemended index is the key 45 

74
00:03:44.140 --> 00:03:46.190
and it is not so check

75
00:03:46.390 --> 00:03:49.820
If this middle element is less than the key and 

76
00:03:49.830 --> 00:03:53.830
it is not so 45 can only be present in 

77
00:03:53.830 --> 00:03:54.850
the left part 

78
00:03:55.440 --> 00:03:59.940
So we have returned binary search of array start 

79
00:03:59.940 --> 00:04:04.950
zero mid minus one that is two and key 45 

80
00:04:05.740 --> 00:04:07.780
so from binary search function 

81
00:04:07.810 --> 00:04:11.870
We are calling binary search with the same array started 

82
00:04:11.870 --> 00:04:15.840
zero and end as two let us say this is 

83
00:04:15.840 --> 00:04:20.400
binary search one at whatever this function binary search one 

84
00:04:20.400 --> 00:04:21.150
is returning 

85
00:04:21.380 --> 00:04:24.860
That value will be returned by this main binary search 

86
00:04:24.870 --> 00:04:29.730
also So let us see what happened  here start is less 

87
00:04:29.730 --> 00:04:32.980
than end So find mid and it will be two 

88
00:04:32.990 --> 00:04:36.350
by two equal to one check If elemented

89
00:04:36.360 --> 00:04:39.750
index one is the key and it is not so 

90
00:04:39.750 --> 00:04:43.680
check If this middle element is less than key and it 

91
00:04:43.680 --> 00:04:47.750
is so 45 can only be present in the right 

92
00:04:47.760 --> 00:04:51.000
part of this subarray  so we are calling 

93
00:04:51.000 --> 00:04:52.470
binary search a again

94
00:04:52.700 --> 00:04:56.720
So we have binary search of arr  start us mid plus 

95
00:04:56.720 --> 00:04:59.190
one which is two an end us two and key 

96
00:04:59.190 --> 00:05:03.450
45 So let us  call this as binary search two 

97
00:05:04.040 --> 00:05:07.520
So we had main binary search calling binary search one 

98
00:05:07.760 --> 00:05:10.850
and binary search one is calling binary search two 

99
00:05:11.440 --> 00:05:11.870
So let us

100
00:05:11.870 --> 00:05:15.680
See what happens in binary search two here start is 

101
00:05:15.680 --> 00:05:16.630
equal to end 

102
00:05:16.840 --> 00:05:20.080
So find mid which is two plus two divided by 

103
00:05:20.080 --> 00:05:21.350
two equal to two 

104
00:05:21.840 --> 00:05:24.920
So check if element at middle index to is the 

105
00:05:24.920 --> 00:05:27.610
key and it is so returned one 

106
00:05:27.740 --> 00:05:29.350
As the search is found 

107
00:05:29.840 --> 00:05:33.950
So binary search two is returning 12 binary search one 

108
00:05:34.380 --> 00:05:37.850
and binary search one is returning one to this main 

109
00:05:37.850 --> 00:05:42.310
binary search function and finally this function will return the 

110
00:05:42.310 --> 00:05:44.250
result one to main function 

111
00:05:44.740 --> 00:05:48.190
So this is how we implement binary search using divide 

112
00:05:48.190 --> 00:05:49.250
and conquer approach 

113
00:05:49.840 --> 00:05:52.180
So what where the  three steps in the divide conquer 

114
00:05:52.180 --> 00:05:57.810
approach divide conquer and combine here Splitting the subarray 

115
00:05:57.880 --> 00:05:59.950
is equal to dividing the problem 

116
00:06:00.220 --> 00:06:03.180
Finding the middle index and checking whether it has the 

117
00:06:03.180 --> 00:06:07.290
key or solution is conquering the problem and returning search 

118
00:06:07.290 --> 00:06:10.640
formed status that is a result from various recursive 

119
00:06:10.640 --> 00:06:12.850
calls is known as combining 

120
00:06:13.340 --> 00:06:16.180
So this is a perfect example of the divide and 

121
00:06:16.180 --> 00:06:17.250
conquer algorithm 

122
00:06:17.780 --> 00:06:20.920
This is how the divide and conquer algorithm recursively

123
00:06:20.920 --> 00:06:24.350
 divide the original array and search the given key 

124
00:06:24.740 --> 00:06:27.730
And finally, the result is gathered from those recursive calls

