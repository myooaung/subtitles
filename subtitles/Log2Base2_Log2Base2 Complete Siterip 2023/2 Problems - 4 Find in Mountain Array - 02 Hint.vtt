WEBVTT

1
00:00:00.110 --> 00:00:02.670
we have learned how to find the index of peak 

2
00:00:02.670 --> 00:00:03.940
element in mmountain array 

3
00:00:03.950 --> 00:00:07.290
In the previous problem let us use the same logic 

4
00:00:07.490 --> 00:00:09.950
and find the index of peak element first 

5
00:00:10.340 --> 00:00:12.980
Now let it's built a logic for searching for a 

6
00:00:12.980 --> 00:00:15.570
particular element in Mountain array 

7
00:00:15.740 --> 00:00:18.830
The elements will be in ascending order from starting index 

8
00:00:18.830 --> 00:00:21.600
to the peak index and will be in descending order 

9
00:00:21.600 --> 00:00:25.530
from the peak index till the last index so let us 

10
00:00:25.530 --> 00:00:27.620
first to a binary search from index 

11
00:00:27.630 --> 00:00:31.010
Zero to peak index If the element is found we 

12
00:00:31.010 --> 00:00:33.440
can return it's index else 

13
00:00:33.460 --> 00:00:36.150
We have to do a search in the descending portion 

14
00:00:36.640 --> 00:00:38.200
We'll see how this works 

15
00:00:38.630 --> 00:00:41.660
Let this point start to zero and end to peak 

16
00:00:41.660 --> 00:00:45.950
index two and do a binary search Mid is one arr 

17
00:00:45.950 --> 00:00:50.380
of mid is 21 here it is greater than 17 

18
00:00:50.690 --> 00:00:53.450
Thus we will move end to mid minus one 

19
00:00:53.900 --> 00:00:58.400
Now start and end both points to 0 Hence mid will 

20
00:00:58.410 --> 00:01:02.190
also point to 0 array of mid is 15 and it is 

21
00:01:02.190 --> 00:01:03.410
less than 17 

22
00:01:03.620 --> 00:01:06.060
So we will move start to mid plus one that 

23
00:01:06.060 --> 00:01:10.420
is to 1 start has become greater than end 

24
00:01:10.700 --> 00:01:14.430
Thus the elements 70 is not present in the first 

25
00:01:14.430 --> 00:01:14.810
half 

26
00:01:15.020 --> 00:01:16.580
That is the ascending portion 

27
00:01:16.890 --> 00:01:20.510
Now let a search the descending portion point start to 

28
00:01:20.510 --> 00:01:24.450
peak elements next index that is three and end to six 

29
00:01:24.940 --> 00:01:25.250
mid 

30
00:01:25.250 --> 00:01:28.030
will be three plus six divided by two which is 

31
00:01:28.030 --> 00:01:31.960
equal to four array of mid equal to 26 and 

32
00:01:31.960 --> 00:01:33.970
26 is greater than 17 

33
00:01:34.170 --> 00:01:36.420
So what should we do In the case of this 

34
00:01:36.420 --> 00:01:39.600
sorted array we will mark the end to mid minus 

35
00:01:39.600 --> 00:01:42.400
one and continue the search in the first half 

36
00:01:42.810 --> 00:01:45.750
But here we're going to do the exact opposite 

37
00:01:46.340 --> 00:01:50.160
This portion is in descending order which means elements 17 

38
00:01:50.160 --> 00:01:52.830
can only be present in the second half from mid 

39
00:01:52.840 --> 00:01:53.430
to end 

40
00:01:53.820 --> 00:01:56.870
So marked the start to mid plus one and in 

41
00:01:56.870 --> 00:02:00.280
case if the mid element is less than 17 we 

42
00:02:00.280 --> 00:02:03.310
would mark the end to mid minus and continue 

43
00:02:03.310 --> 00:02:04.850
the search in the first half 

44
00:02:05.440 --> 00:02:07.210
Coming back to the next iteration 

45
00:02:07.380 --> 00:02:09.620
The start is five and end is six 

46
00:02:09.950 --> 00:02:11.570
Thus mid is five 

47
00:02:11.870 --> 00:02:15.100
In array of mid we have a search element 17 thus we can return this index 5.

