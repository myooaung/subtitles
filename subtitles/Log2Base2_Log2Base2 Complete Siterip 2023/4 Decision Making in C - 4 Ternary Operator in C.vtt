WEBVTT

1
00:00:00.740 --> 00:00:01.400
Hi friends 

1
00:00:01.400 --> 00:00:03.400
In this video we're going to learn the 

2
00:00:03.410 --> 00:00:05.010
ternary operator in C. 

3
00:00:10.010 --> 00:00:15.890
So the ternary operator is so called because it will take three arguments 

4
00:00:16.040 --> 00:00:19.090
and see the syntax here argument1? 

5
00:00:19.100 --> 00:00:22.410
argument2:argument3; and it 

6
00:00:22.410 --> 00:00:25.060
can be used instead of if else statement 

7
00:00:25.100 --> 00:00:30.820
And these two codes here works exactly the same. And 

8
00:00:30.830 --> 00:00:33.850
the working of the ternary operator is like we 

9
00:00:33.850 --> 00:00:36.780
have the first argument as the comparison statement 

10
00:00:36.790 --> 00:00:39.930
So the comparison will be done and if it returns 

11
00:00:39.940 --> 00:00:43.460
true, second argument will be executed and if the comparison 

12
00:00:43.460 --> 00:00:46.650
returns false, then the third argument will be executed. 

13
00:00:46.820 --> 00:00:50.590
So let us see an example programme here and inside 

14
00:00:50.590 --> 00:00:53.510
the main function We are declaring an integer variable 

15
00:00:53.520 --> 00:00:58.430
num and we ask the user to enter a number 

16
00:00:58.440 --> 00:01:00.080
and it is read to variable num

17
00:01:00.300 --> 00:01:03.520
So suppose user enters 10 here and it is stored 

18
00:01:03.520 --> 00:01:06.399
to num And then we have this ternary operator 

19
00:01:06.400 --> 00:01:10.620
here numless than 0? printf(negative) : printf(positive)

20
00:01:10.620 --> 00:01:13.750
so if the number entered is less than zero 

21
00:01:13.840 --> 00:01:17.520
then second argument printf(negative) will be executed  

22
00:01:17.520 --> 00:01:21.179
otherwise third argument Printf (positive) will be executed 

23
00:01:21.190 --> 00:01:23.480
So 10 is not less than zero 

24
00:01:23.480 --> 00:01:26.690
So it skips the second argument and executes the third one

25
00:01:26.690 --> 00:01:31.950
and prints "Positive" and that's all. And if the 

26
00:01:31.950 --> 00:01:35.670
number entered is -2 then num is less than 

27
00:01:35.670 --> 00:01:36.110
zero 

28
00:01:36.120 --> 00:01:40.020
So comparison returns true and the second argument is executed 

29
00:01:40.200 --> 00:01:42.050
and it will print "Negative"

30
00:01:42.060 --> 00:01:43.650
So this is how it works. 

31
00:01:44.040 --> 00:01:48.070
And now the same programme can be returned using if 

32
00:01:48.070 --> 00:01:51.690
else statement like this. Again we have the main function 

33
00:01:51.700 --> 00:01:54.930
and we have the integer variable declaration for num and 

34
00:01:54.930 --> 00:01:57.500
user enters a number 10 and it is read

35
00:01:57.500 --> 00:02:00.080
to variable num and then we have the if else

36
00:02:00.080 --> 00:02:00.480
here 

37
00:02:00.610 --> 00:02:03.660
So there is if num less than zero and 10 

38
00:02:03.670 --> 00:02:05.100
is not less than zero 

39
00:02:05.170 --> 00:02:07.860
So the condition failed and it goes to the else 

40
00:02:07.860 --> 00:02:09.640
part and print "Positive" 

41
00:02:09.740 --> 00:02:10.390
That's it 

42
00:02:10.700 --> 00:02:13.020
Now let us see if the number entered by user

43
00:02:13.020 --> 00:02:16.130
is -2 and that is stored to num then 

44
00:02:16.250 --> 00:02:18.870
when the If condition is checked, it is true 

45
00:02:18.880 --> 00:02:24.290
So it prints "Negative". So both the programmes work exactly 

46
00:02:24.290 --> 00:02:24.810
the same 

47
00:02:24.880 --> 00:02:27.400
So that is why we say the ternary operator 

48
00:02:27.410 --> 00:02:30.770
can be used instead of if else statement So that's all and thank you for watching this video.

