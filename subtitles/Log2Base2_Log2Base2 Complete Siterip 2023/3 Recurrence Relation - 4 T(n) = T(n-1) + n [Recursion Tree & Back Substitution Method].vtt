WEBVTT

1
00:00:00.240 --> 00:00:01.860
Let us take this recursive algorithm

2
00:00:01.860 --> 00:00:05.200
 and find its time complexity using recursion

3
00:00:05.200 --> 00:00:08.050
tree and back substitution method. Suppose, 

4
00:00:08.060 --> 00:00:12.050
this algorithm takes T(n) time. Checking, this condition 

5
00:00:12.050 --> 00:00:13.750
will take only one unit time 

6
00:00:14.240 --> 00:00:17.470
This for loop here is from i equal to zero till n

7
00:00:18.030 --> 00:00:21.310
so it will be executed in n+1 times, 

8
00:00:21.310 --> 00:00:23.850
n times when it is true and one time when it 

9
00:00:23.850 --> 00:00:25.050
finally fails 

10
00:00:25.640 --> 00:00:28.380
So this print statement inside the for loop will be 

11
00:00:28.380 --> 00:00:32.180
executed n times and the algorithm is called to recursively 

12
00:00:32.180 --> 00:00:33.510
with n-1 

13
00:00:33.870 --> 00:00:37.150
So if algorithm of n takes T(n) time 

14
00:00:37.540 --> 00:00:40.440
algorithm of n-1 will take T(n-1) time

15
00:00:40.440 --> 00:00:44.050
 so we can write the recurrence relation 

16
00:00:44.060 --> 00:00:46.990
as T(n) equal to 

17
00:00:46.990 --> 00:00:51.010
T(n-1) + n + n+1 +1

18
00:00:51.010 --> 00:00:53.920
That is T(n-1) + 2n +2

19
00:00:53.920 --> 00:00:57.800
 hear if we take 

20
00:00:57.800 --> 00:01:01.100
this recurrence relation it will be very hard to solve

21
00:01:01.100 --> 00:01:03.280
with as it has too many terms 

22
00:01:03.600 --> 00:01:06.890
So before solving the recurrence relation we need to simplyfy

23
00:01:06.890 --> 00:01:09.810
 it as much as possible.

24
00:01:09.950 --> 00:01:10.670
Here, The term  

25
00:01:10.670 --> 00:01:13.570
2n+2 is a linear time function that is 

26
00:01:13.580 --> 00:01:16.780
asymptotically equal to O(n) class 

27
00:01:17.200 --> 00:01:19.860
So instead of 2n+2 we can just 

28
00:01:19.860 --> 00:01:23.190
use n. This one make any difference in the end 

29
00:01:23.190 --> 00:01:23.690
result 

30
00:01:23.700 --> 00:01:26.580
But it will help us to solve the recurrence relation 

31
00:01:26.590 --> 00:01:27.250
easily 

32
00:01:27.640 --> 00:01:31.650
So the simplified recurrence relation of this algorithm is  

33
00:01:31.650 --> 00:01:34.450
T(n)= T(n-1)+n

34
00:01:34.460 --> 00:01:34.850


35
00:01:35.330 --> 00:01:38.410
Let us write it with the initial condition 

36
00:01:38.420 --> 00:01:41.690
 T(n)= T(n-1)+n when 

37
00:01:41.690 --> 00:01:42.950
n>0

38
00:01:43.320 --> 00:01:46.450
And when n=0 the algorithm will take 

39
00:01:46.450 --> 00:01:47.900
only constant time 

40
00:01:47.960 --> 00:01:51.670
So T(n)=1  when n=0 and 

41
00:01:51.670 --> 00:01:52.190
that's it. 

42
00:01:52.200 --> 00:01:53.850
We got the recurrence relations. 

43
00:01:54.240 --> 00:01:57.340
Now let us solve it using the recursion tree method 

44
00:01:57.590 --> 00:02:00.110
for that first we need to draw the recursion 

45
00:02:00.110 --> 00:02:02.830
tree and then we need to mark the time taken 

46
00:02:02.840 --> 00:02:03.990
at each level 

47
00:02:04.000 --> 00:02:07.650
And finally we can calculate the total time complexity

48
00:02:08.040 --> 00:02:12.160
So first through the recursion tree first write T(n)

49
00:02:12.170 --> 00:02:14.960
what will T(n) do if n>0

50
00:02:14.960 --> 00:02:18.300
It will print n and calls itself with 

51
00:02:18.310 --> 00:02:19.250
n-1

52
00:02:19.740 --> 00:02:22.560
The Print statement will take n unit of time 

53
00:02:22.650 --> 00:02:25.850
So write n and T(n-1) here 

54
00:02:26.340 --> 00:02:28.930
again T(n-1) historic recursive call 

55
00:02:29.000 --> 00:02:31.620
So it will also take n-1 unit of 

56
00:02:31.620 --> 00:02:35.530
time and call itself with n-2. Again T(n-2) 

57
00:02:35.530 --> 00:02:38.380
 is recursive car and it will take 

58
00:02:38.390 --> 00:02:41.930
n-2 units of time and call itself with 

59
00:02:41.930 --> 00:02:43.190
T(n-3)

60
00:02:43.200 --> 00:02:46.260
This recursive tree will grow till it reaches zero 

61
00:02:46.270 --> 00:02:48.540
and stop. At T(0) 

62
00:02:48.550 --> 00:02:51.180
It won't make any further recursive call as n is 

63
00:02:51.190 --> 00:02:52.570
equal to 0

64
00:02:52.580 --> 00:02:54.760
So this is the recursion tree for the given 

65
00:02:54.770 --> 00:02:55.740
algorithm .

66
00:02:55.780 --> 00:02:58.810
Now that is marked the total time taken at each 

67
00:02:58.810 --> 00:03:03.010
level of tree since the Print statement inside is executed 

68
00:03:03.020 --> 00:03:04.960
n times at each level 

69
00:03:04.970 --> 00:03:08.960
It takes n unique time that is at first level 

70
00:03:08.970 --> 00:03:12.370
It takes n unit time then n-1 then 

71
00:03:12.380 --> 00:03:14.490
n-2 then n-3 

72
00:03:14.500 --> 00:03:18.020
And similarly it reaches 2 units, 1 unit and zero 

73
00:03:18.020 --> 00:03:19.450
units T(0).

74
00:03:20.340 --> 00:03:24.470
Finally let us calculate the total time complexity that is 

75
00:03:24.480 --> 00:03:28.370
T(n)= 0 +1 +2 .....

76
00:03:28.380 --> 00:03:32.450
upto n-3 + n-2 + n-1 +n

77
00:03:32.450 --> 00:03:36.760
That is, T(n) equal 

78
00:03:36.760 --> 00:03:40.070
to n*(n+1)/2 which 

79
00:03:40.070 --> 00:03:43.590
is the sum of n natural numbers. So, T(n) 

80
00:03:43.590 --> 00:03:47.940
equal to O(n^2). Next, let us calculate 

81
00:03:47.940 --> 00:03:50.960
the time complexity using back substitution method 

82
00:03:50.970 --> 00:03:54.000
Here the recurrence relation is T(n) equal to 

83
00:03:54.000 --> 00:03:57.460
T(n-1) + n, If

84
00:03:57.470 --> 00:04:00.210
T(n) = T(n-1) + n 

85
00:04:00.270 --> 00:04:03.080
what will be T(n-1)  It will 

86
00:04:03.080 --> 00:04:05.960
be T(n-2) + n - 1  

87
00:04:06.440 --> 00:04:09.600
So in this equation instead of T(n-1) 

88
00:04:09.600 --> 00:04:13.370
substitute T(n-2) + n - 1

89
00:04:13.370 --> 00:04:16.990
So we will get T(n) equal to 

90
00:04:17.000 --> 00:04:20.140
T(n-2) + n - 1 + n

91
00:04:20.150 --> 00:04:20.550


92
00:04:21.540 --> 00:04:23.880
And now what will be T(n-2)

93
00:04:23.890 --> 00:04:26.750
It will be T(n-3) + n - 2

94
00:04:26.750 --> 00:04:27.650


95
00:04:28.340 --> 00:04:31.380
So instead of T(n-2) substitute 

96
00:04:31.380 --> 00:04:33.880
T(n-3) + n - 2

97
00:04:34.010 --> 00:04:36.680
So we will get T(n-3)+n-2+n-1+n

98
00:04:36.690 --> 00:04:39.240


99
00:04:40.040 --> 00:04:43.710
Similarly if we back substitute for K times we will 

100
00:04:43.710 --> 00:04:46.560
get T(n) equal to 

101
00:04:46.560 --> 00:04:50.540
T(n-k) + (n-(k-1)) + 

102
00:04:50.540 --> 00:04:51.400
+ (n-(k-2)) 

103
00:04:51.400 --> 00:04:53.790
 + ((n-1)) + n

104
00:04:53.800 --> 00:04:58.020
 At some point n-k will be 

105
00:04:58.020 --> 00:05:01.010
equal to 0 which means K will be equal to 

106
00:05:01.020 --> 00:05:01.370
n

107
00:05:01.650 --> 00:05:04.890
So in this equation we can write n instead of

108
00:05:04.900 --> 00:05:08.190
K and we will get T(n-n) +

109
00:05:08.190 --> 00:05:12.300
(n-n+1) + (n-n+2) +

110
00:05:12.300 --> 00:05:12.980
etcetera upto

111
00:05:12.990 --> 00:05:17.710
(n-1) + n

112
00:05:17.710 --> 00:05:21.140
that is T(0) + 1 +2 +3...

113
00:05:21.150 --> 00:05:24.710
etcetera upto (n-1) + n and we 

114
00:05:24.710 --> 00:05:27.370
know that T(0) equal to 1 so we 

115
00:05:27.370 --> 00:05:29.570
can write one plus some of

116
00:05:29.570 --> 00:05:33.510
first n natural numbers, n*(n+1)/2

117
00:05:33.510 --> 00:05:36.400
So we will get O(n^2)

118
00:05:36.400 --> 00:05:36.950


119
00:05:37.250 --> 00:05:40.410
And that's it. We have got the same time complexity 

120
00:05:40.410 --> 00:05:44.270
for this algorithm in both recursion tree and back substitution method 

