WEBVTT

1
00:00:00.140 --> 00:00:03.770
Hello friends In this video let us understand how to 

2
00:00:03.780 --> 00:00:08.250
analyse time and space complexity of algorithms with examples 

3
00:00:08.840 --> 00:00:12.660
First let us take a simple algorithm with just one 

4
00:00:12.660 --> 00:00:17.820
statement we have int i is equal to 10 a single 

5
00:00:17.830 --> 00:00:22.360
assignment statement and as per our assumption it takes one 

6
00:00:22.360 --> 00:00:23.150
unit of time 

7
00:00:23.840 --> 00:00:26.660
So the time complexity T of X is equal to 

8
00:00:26.660 --> 00:00:27.060
one 

9
00:00:27.300 --> 00:00:29.650
We can say it takes a constant I 

10
00:00:30.240 --> 00:00:34.260
So the time complexity of this algorithm is equal to 

11
00:00:34.270 --> 00:00:35.250
order of one 

12
00:00:36.440 --> 00:00:39.870
And here we have just one variable let us say it 

13
00:00:39.870 --> 00:00:42.150
takes one unit of memory also 

14
00:00:42.540 --> 00:00:44.650
So a S of X is equal to one 

15
00:00:45.040 --> 00:00:48.450
So the space complexity is also order of one 

16
00:00:49.140 --> 00:00:52.750
Now let us add two more statements to this algorithm 

17
00:00:53.340 --> 00:00:56.670
i equal to into to place five and I equal 

18
00:00:56.670 --> 00:00:57.750
to I++ 

19
00:00:58.140 --> 00:01:01.250
What will be the time complexity of this algorithm Now 

20
00:01:01.840 --> 00:01:05.980
as we said these two statements are also simple statements 

21
00:01:06.100 --> 00:01:10.080
So this will also take one unit time each 

22
00:01:10.090 --> 00:01:13.220
So the total time taken is 1+1+ 

23
00:01:13.220 --> 00:01:16.450
1 that is T of X will be equal to 3 

24
00:01:17.040 --> 00:01:20.660
which is also a constant value that is whatever the 

25
00:01:20.660 --> 00:01:21.800
value of i be 

26
00:01:21.940 --> 00:01:24.650
The time taken will be three units to get the 

27
00:01:24.650 --> 00:01:25.250
output 

28
00:01:25.940 --> 00:01:29.190
So the time complexity is order of  one again 

29
00:01:29.840 --> 00:01:33.550
Now what about the space complexity We have variable I 

30
00:01:33.940 --> 00:01:37.500
which will take one unit of memory and in 2nd 

31
00:01:37.510 --> 00:01:38.600
and 3rd statements 

32
00:01:38.610 --> 00:01:42.720
Also we have just I and there are no other 

33
00:01:42.720 --> 00:01:43.470
variables 

34
00:01:43.680 --> 00:01:46.750
So there is only one variable I requiring memory 

35
00:01:46.860 --> 00:01:51.250
So the total memory required is one unit so S

36
00:01:51.250 --> 00:01:54.450
of X equal to one which is also a constant value 

37
00:01:54.840 --> 00:01:58.750
So the space complexity is equal to order of one 

38
00:01:59.460 --> 00:02:03.430
Let us calculate the time and space complexity of positive 

39
00:02:03.440 --> 00:02:04.950
or negative number programme 

40
00:02:05.640 --> 00:02:09.310
Here the first statement is a simple assignment statement 

41
00:02:09.500 --> 00:02:11.620
So it takes one unit of time 

42
00:02:12.060 --> 00:02:14.230
Next we're creating a scan object 

43
00:02:14.330 --> 00:02:17.870
So it will also take one unit time and next 

44
00:02:17.870 --> 00:02:21.310
we're reading the number which will also take one unit 

45
00:02:21.310 --> 00:02:21.650
time 

46
00:02:22.130 --> 00:02:24.910
So this part of the code will take a total 

47
00:02:24.910 --> 00:02:26.450
of two units time 

48
00:02:27.340 --> 00:02:30.920
Next we have a conditional statement we have If else 

49
00:02:30.920 --> 00:02:32.550
if else statements here

50
00:02:33.140 --> 00:02:36.820
So what will happen here for a given input Either 

51
00:02:36.830 --> 00:02:40.160
if statement will work or else if part will work 

52
00:02:40.170 --> 00:02:42.860
or else part will work simply 

53
00:02:43.040 --> 00:02:46.300
Any one of these three cases will work for a 

54
00:02:46.300 --> 00:02:51.300
given input for example if num equal to zero only 

55
00:02:51.310 --> 00:02:54.650
if part will work elseif and else part will 

56
00:02:54.650 --> 00:02:58.040
be skipped and if num equal to minus one

57
00:02:58.310 --> 00:02:59.980
If will fail else 

58
00:02:59.980 --> 00:03:02.250
If will work and else will be is kept 

59
00:03:02.790 --> 00:03:06.200
And if num equal to four if will fail so 

60
00:03:06.200 --> 00:03:09.320
it won't work and else if will also fail 

61
00:03:09.650 --> 00:03:13.260
Hence it will be kept and only else part will 

62
00:03:13.260 --> 00:03:15.730
work so far an input value 

63
00:03:15.740 --> 00:03:19.230
Only one of these three cases will work so we 

64
00:03:19.230 --> 00:03:22.000
can take one unit of time for the whole case 

65
00:03:22.000 --> 00:03:26.150
check and one unit of time for inner print statement 

66
00:03:26.500 --> 00:03:30.120
So a total of two units time the total time 

67
00:03:30.130 --> 00:03:33.460
taken T of X will be equal to five which is 

68
00:03:33.460 --> 00:03:34.590
a constant value 

69
00:03:34.760 --> 00:03:38.250
The time complexity for this programme is order of one 

70
00:03:38.940 --> 00:03:42.490
Now what about the space complexity in the whole programme 

71
00:03:42.500 --> 00:03:46.300
We only used one variable now and we have only 

72
00:03:46.300 --> 00:03:48.230
used Constance other than that 

73
00:03:48.510 --> 00:03:52.260
So the memory taken is just one unit so S 

74
00:03:52.260 --> 00:03:54.590
of X is equal to one which is a constant 

75
00:03:54.640 --> 00:03:57.770
Hence the space complexity of this algorithm 

76
00:03:57.770 --> 00:03:59.030
is order of one 

77
00:03:59.940 --> 00:04:02.840
Now let us analyse the programme to find if X 

78
00:04:02.850 --> 00:04:04.780
is a factor of n or not 

79
00:04:05.050 --> 00:04:08.520
First we have a declaration statement which will take one 

80
00:04:08.520 --> 00:04:09.270
unit time 

81
00:04:09.450 --> 00:04:12.720
The next print statement will also take one unit time 

82
00:04:12.890 --> 00:04:17.030
Now in the scanning part we're creating scanner object reading 

83
00:04:17.280 --> 00:04:18.350
and reading X 

84
00:04:18.610 --> 00:04:22.860
These three operations will take one unit time each so 

85
00:04:22.870 --> 00:04:26.310
a total of three time units are required here and 

86
00:04:26.310 --> 00:04:26.640
next 

87
00:04:26.640 --> 00:04:29.950
We have a conditional check here for a given value 

88
00:04:29.950 --> 00:04:33.120
of end and ex either if part will work or 

89
00:04:33.120 --> 00:04:34.500
the else part will work 

90
00:04:34.720 --> 00:04:37.360
So for this case check we can say it takes 

91
00:04:37.370 --> 00:04:41.000
one unit time and for the Print statement inside it 

92
00:04:41.000 --> 00:04:44.830
takes one unit again a total of two units for 

93
00:04:44.830 --> 00:04:48.140
this part so T of X equal to one plus 

94
00:04:48.140 --> 00:04:50.850
one plus three plus two which is equal to seven 

95
00:04:51.440 --> 00:04:54.520
So the algorithm will take only a constant time for 

96
00:04:54.530 --> 00:04:57.250
any input to produce the desire output 

97
00:04:57.820 --> 00:05:00.450
So the time complexity is order of one 

98
00:05:01.040 --> 00:05:04.470
Now what about the space complexity we have variables 

99
00:05:04.480 --> 00:05:08.500
n and  X requiring memory so it takes two units 

100
00:05:08.510 --> 00:05:09.150
in total 

101
00:05:09.540 --> 00:05:11.530
So S Of X equal to two which is 

102
00:05:11.530 --> 00:05:13.150
a constant memory space 

103
00:05:13.490 --> 00:05:16.550
So the space complexity here is order of one 

104
00:05:17.040 --> 00:05:20.070
So this is how we can analyse algorithms and find 

105
00:05:20.080 --> 00:05:21.950
time and space complexity 

