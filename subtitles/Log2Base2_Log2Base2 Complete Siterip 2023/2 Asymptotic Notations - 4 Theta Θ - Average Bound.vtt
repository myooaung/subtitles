WEBVTT

1
00:00:00.140 --> 00:00:03.820
The theta notation defines an average bound or type bound 

2
00:00:03.820 --> 00:00:06.740
of a function. In big Oh notation, we have formed 

3
00:00:06.740 --> 00:00:09.210
the upper bound of a function and in omega

4
00:00:09.210 --> 00:00:09.820
notation 

5
00:00:09.820 --> 00:00:12.150
We have found the lower bound of a function 

6
00:00:12.540 --> 00:00:14.590
Here, we need to find a function that can 

7
00:00:14.600 --> 00:00:17.350
even upper and lower bound to f(n)

8
00:00:17.740 --> 00:00:20.420
Let us see the definition of theta notation 

9
00:00:20.430 --> 00:00:23.470
The function f(n) is theta of g(n) 

10
00:00:23.670 --> 00:00:27.570
if and only if their excess positive constant c1

11
00:00:27.580 --> 00:00:29.730
c2 and n0 such that

12
00:00:29.730 --> 00:00:32.160
 c1*g(n) is less than or 

13
00:00:32.160 --> 00:00:34.660
equal to f(n) less than or equal to 

14
00:00:34.660 --> 00:00:37.890
c2*g(n) for all n greater than 

15
00:00:37.890 --> 00:00:39.750
or equal to n0. So, Let us 

16
00:00:39.750 --> 00:00:42.740
take the same example and find it's theta notation 

17
00:00:43.020 --> 00:00:45.390
f(n) equal to 5n + 3. 

18
00:00:45.560 --> 00:00:47.320
Let's put it in the equation 

19
00:00:47.450 --> 00:00:50.050
c1*g(n) is less than or equal 

20
00:00:50.050 --> 00:00:52.220
to 5n +3  less than or equal to 

21
00:00:52.220 --> 00:00:53.750
c2*g(n)

22
00:00:54.140 --> 00:00:56.330
Now we need to guess the value for c1, 

23
00:00:56.330 --> 00:00:58.720
c2 and g(n) in such a way that 

24
00:00:58.730 --> 00:01:02.610
it satisfies this condition c1*g(n)

25
00:01:02.610 --> 00:01:03.270
lower bound here.

26
00:01:03.270 --> 00:01:06.180
we already found the value that is 1*n

27
00:01:06.180 --> 00:01:07.770
c2*g(n) 

28
00:01:07.770 --> 00:01:10.100
 is the upper bound here so we can 

29
00:01:10.110 --> 00:01:11.480
put 10*n here 

30
00:01:11.820 --> 00:01:15.260
And this relation is true for all values  

31
00:01:15.260 --> 00:01:16.250
n greater than or equal to 1

32
00:01:16.740 --> 00:01:18.370
Let us quickly verify it 

33
00:01:18.500 --> 00:01:22.300
Let's take n as 1, then the equation will become 1 less 

34
00:01:22.300 --> 00:01:24.340
than or equal to 8 less than or equal to 

35
00:01:24.340 --> 00:01:24.640
10 

36
00:01:24.910 --> 00:01:25.790
It is true.

37
00:01:25.850 --> 00:01:29.120
So, this equation is true for all the values of 

38
00:01:29.130 --> 00:01:31.070
n greater than or equal to 1 

39
00:01:31.310 --> 00:01:33.550
So the value of n0 is one 

40
00:01:33.740 --> 00:01:37.360
If we put these values the relation will become  

41
00:01:37.360 --> 00:01:40.370
1*n less than or equal to 5n + 3

42
00:01:40.380 --> 00:01:42.250
less than or equal to 10*n

43
00:01:42.640 --> 00:01:44.940
And it is true for all the values of  

44
00:01:44.940 --> 00:01:46.350
n greater than or equal to 1.

45
00:01:46.840 --> 00:01:48.320
Here this is c1 

46
00:01:48.330 --> 00:01:49.560
This is g(n)

47
00:01:49.570 --> 00:01:52.250
This is c2 and this again g(n) 

48
00:01:52.640 --> 00:01:55.190
So in the equation we have found the values of 

49
00:01:55.190 --> 00:01:58.310
c1, c2, g(n) and n0

50
00:01:58.730 --> 00:02:03.440
and it satisfies all the conditions of Theta definition. so 

51
00:02:03.440 --> 00:02:06.310
we can say that five and plus three is the 

52
00:02:06.310 --> 00:02:06.680
theta of n 

53
00:02:06.780 --> 00:02:10.330
And in Big O if a function is upper bound to 

54
00:02:10.340 --> 00:02:13.130
n it will be upper bound to any time function 

55
00:02:13.130 --> 00:02:15.860
which is greater than or equal to n,

56
00:02:15.860 --> 00:02:18.490
Say n^2, 2 raised n, n raised to n etc. 

57
00:02:19.140 --> 00:02:19.940
In omega 

58
00:02:19.950 --> 00:02:22.220
If your function is lower bound to n, it will 

59
00:02:22.220 --> 00:02:25.090
be lower bound to any time function which is lesser 

60
00:02:25.090 --> 00:02:28.150
than or equal to n, say logn, square root of n,

61
00:02:28.150 --> 00:02:28.680
1 etc..

62
00:02:28.690 --> 00:02:31.350
But in Theta

63
00:02:31.360 --> 00:02:32.660
We can't say like this 

64
00:02:32.800 --> 00:02:35.640
When we say it theta of n it means that we're 

65
00:02:35.640 --> 00:02:38.180
representing it with an exact time function 

66
00:02:38.340 --> 00:02:40.970
If a function is an average bound to n

67
00:02:40.970 --> 00:02:44.970
Its average bound to exactly n, it will not average bound 

68
00:02:44.970 --> 00:02:46.220
to any other time 

69
00:02:46.220 --> 00:02:49.060
functions like the theta of n Square, theta of 2 raised 

70
00:02:49.060 --> 00:02:52.310
to n because as per the definition g(n) should 

71
00:02:52.320 --> 00:02:54.100
be same on both sides. 

72
00:02:54.150 --> 00:02:57.330
We can't put n this side and N square on 

73
00:02:57.330 --> 00:02:58.250
the right side 

74
00:02:58.640 --> 00:03:01.250
So Theta is so tight and accurate 

75
00:03:01.640 --> 00:03:05.090
So among all three notations theta is more accurate and 

76
00:03:05.090 --> 00:03:05.750
useful 

77
00:03:05.920 --> 00:03:09.620
So when analysing the time complexity always try to find 

78
00:03:09.620 --> 00:03:12.930
the average bound if you find the exact time function 

79
00:03:12.930 --> 00:03:16.480
for the average bound represented with theta notation 

80
00:03:16.490 --> 00:03:19.020
If not we can go for upper or a lower 

81
00:03:19.020 --> 00:03:19.440
bound 

82
00:03:19.740 --> 00:03:21.250
So that's it for this video 

83
00:03:21.340 --> 00:03:24.290
In the next video let's take some sample functions and 

84
00:03:24.290 --> 00:03:26.310
find their asymptotic notations.

