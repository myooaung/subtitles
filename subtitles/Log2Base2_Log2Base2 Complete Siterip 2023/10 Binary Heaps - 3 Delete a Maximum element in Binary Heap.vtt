WEBVTT

1
00:00:00.540 --> 00:00:01.380
Hello friends 

2
00:00:01.660 --> 00:00:04.790
In this video let us learn how to delete the 

3
00:00:04.790 --> 00:00:06.370
maximum element from a

4
00:00:06.380 --> 00:00:07.150
Max Heap

5
00:00:09.330 --> 00:00:12.950
In the previous videos we discussed about heaps and how 

6
00:00:12.960 --> 00:00:16.060
to construct a heap from an array that is we  

7
00:00:16.060 --> 00:00:17.550
learn the Heapify function 

8
00:00:18.040 --> 00:00:21.260
So the procedure to remove the max element in the 

9
00:00:21.260 --> 00:00:25.770
heap is first heapify the array that arranges all the 

10
00:00:25.770 --> 00:00:29.630
elements based on the max heap property that we have discussed 

11
00:00:29.630 --> 00:00:33.030
in the previous video at the end of this process 

12
00:00:33.030 --> 00:00:36.390
the largest element will be present in the root 

13
00:00:36.390 --> 00:00:37.580
of the complete tree 

14
00:00:37.590 --> 00:00:40.890
In other words it will be present in the array 

15
00:00:40.890 --> 00:00:42.150
index zero 

16
00:00:43.040 --> 00:00:46.130
Next we have to swap the first and last elements 

17
00:00:46.130 --> 00:00:46.750
of the array 

18
00:00:47.640 --> 00:00:51.340
Now the largest element will be present at the end 

19
00:00:51.340 --> 00:00:55.300
of the array and now we can remove the last element 

20
00:00:55.310 --> 00:01:00.120
by reducing the array size and after removal of this element 

21
00:01:00.180 --> 00:01:03.750
we have to check the max heap property of index zero 

22
00:01:04.540 --> 00:01:08.510
and if it is not correctly satisfied swap and continue 

23
00:01:08.510 --> 00:01:12.880
the heapify process here the heap property is not 

24
00:01:12.880 --> 00:01:13.710
satisfied 

25
00:01:13.910 --> 00:01:15.750
So we have to heapify the tree 

26
00:01:16.730 --> 00:01:19.180
So this is how we can delete the maximum 

27
00:01:19.190 --> 00:01:20.550
element in a Max heap

28
00:01:21.240 --> 00:01:23.670
So the algorithm is heapify 

29
00:01:23.670 --> 00:01:28.330
the array swap the first and last elements reduce 

30
00:01:28.330 --> 00:01:32.300
the array size by one check heap property from index 

31
00:01:32.300 --> 00:01:34.620
zero and arrange it accordingly 

32
00:01:35.080 --> 00:01:36.820
And then the deletion is done 

33
00:01:38.440 --> 00:01:41.050
So now let us see how the code works 

34
00:01:42.040 --> 00:01:45.300
We have the function delete Max to delete the maximum 

35
00:01:45.310 --> 00:01:45.950
element 

36
00:01:46.440 --> 00:01:49.490
So as we said the first step is to swap 

37
00:01:49.500 --> 00:01:54.420
first and last elements so swap arr of Zero and 

38
00:01:54.430 --> 00:01:55.750
arr of size 

39
00:01:56.640 --> 00:02:00.450
Now the maximum element is at the last position 

40
00:02:01.040 --> 00:02:04.370
Now let us print the maximum element that is  

41
00:02:04.370 --> 00:02:08.090
arr of size and we will get Max equal 

42
00:02:08.090 --> 00:02:08.920
to 80 

43
00:02:08.930 --> 00:02:13.240
Printed on the screen now set size equel to size 

44
00:02:13.240 --> 00:02:17.150
minus one so that the last index removed from the array

45
00:02:17.840 --> 00:02:21.650
now the maximum element is deleted from the heap 

46
00:02:22.240 --> 00:02:25.090
Now we have to check if the heap property is 

47
00:02:25.090 --> 00:02:30.190
violated by this deletion So pass the index zero to heapify

48
00:02:30.190 --> 00:02:34.200
function along with the array and its size so 

49
00:02:34.200 --> 00:02:37.100
in Heapify the index equal to zero and 

50
00:02:37.100 --> 00:02:39.880
size equal to five and it is not equal to 

51
00:02:39.880 --> 00:02:43.250
six as we Decrement it earlier in the Delete 

52
00:02:43.250 --> 00:02:44.150
Max function 

53
00:02:45.040 --> 00:02:48.960
Now let us find the left and right Children of node 

54
00:02:48.970 --> 00:02:51.150
at this index that is zero 

55
00:02:51.740 --> 00:02:54.800
so left equal to two*index plus one that 

56
00:02:54.800 --> 00:02:57.760
is two*zero plus one which is equal to 

57
00:02:57.770 --> 00:03:00.650
one and right equal to left 

58
00:03:00.660 --> 00:03:02.550
plus one that is two 

59
00:03:03.440 --> 00:03:07.210
And here we are assuming that this sub tree satisfies 

60
00:03:07.210 --> 00:03:08.350
the heap property 

61
00:03:08.840 --> 00:03:12.550
So keep Max and Index at the same position 

62
00:03:13.040 --> 00:03:16.230
And if any child is greater than parent we will 

63
00:03:16.240 --> 00:03:17.450
update Max 

64
00:03:17.940 --> 00:03:21.470
And finally if Max and index are different we have to 

65
00:03:21.470 --> 00:03:23.150
perform swap operation 

66
00:03:24.240 --> 00:03:28.460
The first check if left child is greater than this 

67
00:03:28.460 --> 00:03:28.850
node 

68
00:03:29.240 --> 00:03:32.310
So we have if left less than or equal to 

69
00:03:32.310 --> 00:03:36.720
size and arr of left greater than arr of Max 

70
00:03:37.340 --> 00:03:39.870
and we have one less than size 

71
00:03:40.090 --> 00:03:42.750
But 30 is not greater than 50 

72
00:03:43.140 --> 00:03:47.690
So this if fails here now check if right child 

73
00:03:47.700 --> 00:03:49.080
is greater than Max 

74
00:03:49.740 --> 00:03:50.470
So we have 

75
00:03:50.480 --> 00:03:54.150
If right less than or equal to size and arr 

76
00:03:54.150 --> 00:03:58.380
of right greater than arr of Max and we have 

77
00:03:58.660 --> 00:04:02.150
two less than size and 60 greater than 50 

78
00:04:02.740 --> 00:04:06.080
So the right child 60 is greater than the current 

79
00:04:06.080 --> 00:04:08.150
max value which is 50 

80
00:04:08.740 --> 00:04:12.340
So update max and we got max equal to right 

81
00:04:12.350 --> 00:04:13.450
That is two 

82
00:04:13.940 --> 00:04:17.200
And see Now we have the maximum value of this 

83
00:04:17.200 --> 00:04:22.640
sub tree at Max now Check If Max was updated 

84
00:04:22.650 --> 00:04:26.720
that is max was initially set to index now check 

85
00:04:26.730 --> 00:04:31.140
If Max and Index are the same and Max equal to 

86
00:04:31.150 --> 00:04:34.170
two and index equal to zero now so it is 

87
00:04:34.170 --> 00:04:35.020
not the same 

88
00:04:35.230 --> 00:04:39.450
So if conditions is true so swap the elements at 

89
00:04:39.450 --> 00:04:44.350
Max and Index that is 60 and 50 are swapped 

90
00:04:45.100 --> 00:04:48.250
Now the maximum element is at the root position 

91
00:04:49.040 --> 00:04:52.000
Again we need to check for the max heap property of 

92
00:04:52.010 --> 00:04:53.280
this swapped index 

93
00:04:53.840 --> 00:04:58.250
So call heapify again by passing array the max and 

94
00:04:58.250 --> 00:04:58.810
size 

95
00:04:59.540 --> 00:05:02.910
So here Index equal to two and Size equal to 

96
00:05:02.910 --> 00:05:03.350
five 

97
00:05:04.140 --> 00:05:07.210
Let us first find the left and right Children of 

98
00:05:07.220 --> 00:05:11.210
node at this index so left equal to two* 

99
00:05:11.210 --> 00:05:14.570
index plus one that is two*two plus one 

100
00:05:14.570 --> 00:05:17.960
which is five and right equal to left plus one 

101
00:05:18.090 --> 00:05:22.280
which is six and said Max equal to index 

102
00:05:23.640 --> 00:05:27.070
Now let us find the maximum value in this sub 

103
00:05:27.070 --> 00:05:27.380
tree 

104
00:05:27.940 --> 00:05:32.190
So Check if left less than or equal to size 

105
00:05:32.200 --> 00:05:35.680
and arr of left greater than arr of Max 

106
00:05:36.240 --> 00:05:39.950
left five is equal to size and arr of left 

107
00:05:39.950 --> 00:05:43.550
40 is not greater than arr of Max 50 

108
00:05:43.940 --> 00:05:47.730
So this if fails here now check the right child 

109
00:05:47.810 --> 00:05:51.670
We have right six not less than or equal to 

110
00:05:51.670 --> 00:05:52.160
size 

111
00:05:52.210 --> 00:05:55.540
So this if also fails now check 

112
00:05:55.550 --> 00:06:00.120
If Max was updated and it was not so no 

113
00:06:00.120 --> 00:06:03.710
need to rearrange and we can understand that now the 

114
00:06:03.710 --> 00:06:07.000
heap is perfect so that is how we can delete 

115
00:06:07.000 --> 00:06:07.260


116
00:06:07.260 --> 00:06:11.100
The maximum element of a heap now let us delete 

117
00:06:11.100 --> 00:06:14.770
the maximum element again from this result in heap

118
00:06:15.540 --> 00:06:18.190
So as we said the first step is to swap 

119
00:06:18.200 --> 00:06:22.970
first and last elements swap arr of zero and arr of 

120
00:06:22.970 --> 00:06:27.320
size that is 60 and 40 now 

121
00:06:27.320 --> 00:06:29.680
The maximum elements 60 is at the 

122
00:06:29.680 --> 00:06:30.690
Last position 

123
00:06:31.240 --> 00:06:35.210
So let us print the maximum element which is arr of size 

124
00:06:35.350 --> 00:06:37.970
and we will get Max equal to 60 

125
00:06:38.000 --> 00:06:42.250
Print around this screen now said size equal to size 

126
00:06:42.250 --> 00:06:45.550
minus one to reduce the array size by one 

127
00:06:46.340 --> 00:06:48.150
so size equal to four now 

128
00:06:48.940 --> 00:06:51.950
Now the maximum element is deleted from the heap 

129
00:06:52.940 --> 00:06:55.960
Now we have to check if the heap property was 

130
00:06:55.960 --> 00:07:00.610
violated by this deletion so pass index 0 to 

131
00:07:00.610 --> 00:07:04.700
Heapify function along with the array and size so in 

132
00:07:04.700 --> 00:07:07.870
heapify the index is equal to zero and 

133
00:07:07.870 --> 00:07:09.550
size is equal to four 

134
00:07:10.540 --> 00:07:13.870
Let us first find the left and right Children of 

135
00:07:13.880 --> 00:07:18.000
the node at this index so left equal to 

136
00:07:18.000 --> 00:07:21.890
two*index plus one that is two*zero plus 

137
00:07:21.890 --> 00:07:25.280
one which is one and right equal to left plus 

138
00:07:25.280 --> 00:07:26.450
one that is two 

139
00:07:27.940 --> 00:07:30.710
And as we said we are assuming that this sub 

140
00:07:30.710 --> 00:07:34.400
tree satisfies the heap property So we will keep Max 

141
00:07:34.400 --> 00:07:36.250
and index at the same position 

142
00:07:37.040 --> 00:07:41.260
So now Max equal to zero now check if left 

143
00:07:41.260 --> 00:07:45.080
child is greater than this node So we have if 

144
00:07:45.080 --> 00:07:48.280
left less than or equal to size and arr of 

145
00:07:48.290 --> 00:07:53.200
left greater than arr of Max And we have one 

146
00:07:53.200 --> 00:07:56.750
less than size But 30 is not greater than 40 

147
00:07:57.640 --> 00:08:01.200
So if fails here and let us check If right 

148
00:08:01.210 --> 00:08:06.240
child is greater than Max So we have if right less than 

149
00:08:06.240 --> 00:08:09.890
or equal to size and arr of right greater than arr 

150
00:08:09.890 --> 00:08:13.870
of Max and we have two less than size and 

151
00:08:13.870 --> 00:08:15.550
50 greater than 40 

152
00:08:16.040 --> 00:08:20.150
So the right child 50 is greater than Parent 40 

153
00:08:20.940 --> 00:08:24.860
So update max and we got max equal to right 

154
00:08:25.030 --> 00:08:26.050
That is two 

155
00:08:26.640 --> 00:08:29.510
And see Now we have the maximum value of this 

156
00:08:29.510 --> 00:08:33.850
sub tree at Max now Check If Max was updated 

157
00:08:34.300 --> 00:08:34.700
that is 

158
00:08:34.700 --> 00:08:37.710
Max was initially said to index now check 

159
00:08:37.830 --> 00:08:42.360
If Max and index are different and it is so 

160
00:08:42.370 --> 00:08:46.850
if is true so swap elements it Max and Index 

161
00:08:47.440 --> 00:08:50.650
and the maximum element is now at the root position 

162
00:08:51.440 --> 00:08:54.270
Again we need to check for the max heap property of 

163
00:08:54.280 --> 00:08:55.550
the swapped Index 

164
00:08:56.140 --> 00:08:56.910
So call heapify

165
00:08:56.910 --> 00:09:02.610
again by passing the array max and size and here 

166
00:09:02.680 --> 00:09:06.150
index equal to two and size equal to four 

167
00:09:06.840 --> 00:09:09.400
Let us first find the left and right Children of 

168
00:09:09.410 --> 00:09:13.190
the nodee at this index that is two so left 

169
00:09:13.190 --> 00:09:16.130
equal to two*index plus one that is  

170
00:09:16.130 --> 00:09:19.580
two*two plus one which is five and right equal 

171
00:09:19.580 --> 00:09:22.820
to left plus one which will be six and set 

172
00:09:22.820 --> 00:09:24.450
max equal to index 

173
00:09:24.940 --> 00:09:28.770
That is two now check if left and right child 

174
00:09:28.780 --> 00:09:32.880
greater than this node So we have if left less 

175
00:09:32.880 --> 00:09:34.320
than or equal to size 

176
00:09:34.330 --> 00:09:38.460
an arr of left greater than arr of Max but left 

177
00:09:38.460 --> 00:09:41.490
five is not less than or equal to size 

178
00:09:41.500 --> 00:09:46.040
So this if fails here now check the right child 

179
00:09:46.300 --> 00:09:49.610
We have right six not less than or equal to 

180
00:09:49.610 --> 00:09:50.100
size 

181
00:09:50.200 --> 00:09:54.350
So again this if fails now check If Max was 

182
00:09:54.350 --> 00:09:56.490
updated but it was not so 

183
00:09:56.490 --> 00:09:59.600
There is no need to rearrange the node and we 

184
00:09:59.600 --> 00:10:03.050
can understand that the heap is now perfect 

185
00:10:03.640 --> 00:10:06.360
So this is how we should remove the maximum of 

186
00:10:06.360 --> 00:10:08.150
minimum element from the heap 

187
00:10:08.940 --> 00:10:11.700
So first we have to swap the first and last 

188
00:10:11.700 --> 00:10:12.290
elements 

189
00:10:12.550 --> 00:10:15.380
Then we can reduce the size of array by one 

190
00:10:15.390 --> 00:10:17.980
so that the maximum element is deleted 

191
00:10:18.340 --> 00:10:20.150
Then we have to heapify the tree 

