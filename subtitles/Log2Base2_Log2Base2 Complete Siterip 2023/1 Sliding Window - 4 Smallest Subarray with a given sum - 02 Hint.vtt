WEBVTT

1
00:00:00.040 --> 00:00:03.680
Since the problem involves finding something on a sub array

2
00:00:03.690 --> 00:00:07.680
we can effectively solve it with using the sliding window technique 

3
00:00:07.850 --> 00:00:11.080
First let us mark the window starting point at the 

4
00:00:11.080 --> 00:00:14.750
beginning of the array. After that the logic is simple. 

5
00:00:15.140 --> 00:00:18.590
In each step, add the next element to the window 

6
00:00:18.620 --> 00:00:21.520
until the window sum is greater than or equal to 

7
00:00:21.520 --> 00:00:25.140
given value.  If the sum value is greater than 

8
00:00:25.140 --> 00:00:27.720
or equal to S, mark the current length 

9
00:00:28.100 --> 00:00:32.060
After that don't move to the next element straightaway. 

10
00:00:32.060 --> 00:00:34.360
Try to reduce the current window and check 

11
00:00:34.370 --> 00:00:37.280
If we can achieve the same result with minimal length.

12
00:00:37.280 --> 00:00:40.550
If possible update the current length

13
00:00:40.940 --> 00:00:45.120
Otherwise do the same process for all the remaining elements 

14
00:00:45.280 --> 00:00:48.440
And finally we can return the smallest sub array length.

15
00:00:48.440 --> 00:00:48.850


16
00:00:48.860 --> 00:00:52.910
Whose sum is greater than or equal to S 

17
00:00:52.910 --> 00:00:56.280
In short grow the window till the subsum value is 

18
00:00:56.280 --> 00:00:57.420
greater than S.

19
00:00:57.770 --> 00:01:01.210
After that try shrinking the same window to get the 

20
00:01:01.210 --> 00:01:03.350
same result with minimal length 

21
00:01:03.940 --> 00:01:05.960
If found, update the length 

22
00:01:06.110 --> 00:01:09.960
Otherwise grow the window and follow the same procedure till 

23
00:01:09.960 --> 00:01:11.150
the end of the array.

24
00:01:11.740 --> 00:01:17.150
For example, let us take this array for 

25
00:01:17.160 --> 00:01:20.650
4 1 5 2 4 1  and the S value as seven 

26
00:01:21.340 --> 00:01:25.160
First add the value 4 to subsum and check 

27
00:01:25.300 --> 00:01:28.130
if it is greater than or equal to seven. 

28
00:01:28.130 --> 00:01:31.320
It is not. So add the next element one to the 

29
00:01:31.320 --> 00:01:31.850
window.

30
00:01:32.340 --> 00:01:35.400
Now the subsum will be five and it is 

31
00:01:35.410 --> 00:01:37.850
also not greater than or equal to seven 

32
00:01:38.210 --> 00:01:40.880
So add the next element five to the window 

33
00:01:41.260 --> 00:01:44.560
Now the subsum will be 10 which is greater 

34
00:01:44.560 --> 00:01:46.160
than seven. So find 

35
00:01:46.170 --> 00:01:47.730
it's length and mark it.

36
00:01:48.100 --> 00:01:51.250
It's length as three. So length is three 

37
00:01:51.740 --> 00:01:54.960
Now we can shrink the current window and see if 

38
00:01:54.960 --> 00:01:58.310
we can achieve the same result with minimal length 

39
00:01:58.590 --> 00:02:01.730
So skip the first element in the window by moving 

40
00:02:01.730 --> 00:02:04.150
wstart one position to the right 

41
00:02:04.740 --> 00:02:08.300
Now the window sum will be 10 - 4 which 

42
00:02:08.300 --> 00:02:11.190
is six. Six is less than seven 

43
00:02:11.250 --> 00:02:14.270
So even if we shrink further we can't get the 

44
00:02:14.280 --> 00:02:15.620
expected result. 

45
00:02:15.940 --> 00:02:19.520
So skip the shrinking process and start adding the next 

46
00:02:19.530 --> 00:02:20.950
element to the current window 

47
00:02:21.440 --> 00:02:24.610
So whenever we reach the subsum whose value is 

48
00:02:24.610 --> 00:02:28.180
greater than or equal to s, try reducing the current 

49
00:02:28.180 --> 00:02:31.620
window until the subsum value is less than given 

50
00:02:31.620 --> 00:02:35.480
value.  If it is less than S, start adding the 

51
00:02:35.480 --> 00:02:38.950
next element. Now add the next element two. 

52
00:02:39.340 --> 00:02:42.180
Now the subsum will be 6 + 2 which is 8.

53
00:02:42.180 --> 00:02:45.630
and 8 is greater than or equal to 7

54
00:02:45.630 --> 00:02:46.060


55
00:02:46.320 --> 00:02:49.080
So find its length which is again 3.

56
00:02:49.230 --> 00:02:51.060
So no need to update it.

57
00:02:51.070 --> 00:02:54.270
We only need to update the length when we achieve 

58
00:02:54.270 --> 00:02:56.650
the same result with minimal length. 

59
00:02:57.040 --> 00:02:59.820
Now try to reduce the current window by moving the 

60
00:02:59.820 --> 00:03:00.750
wstart 

61
00:03:01.240 --> 00:03:04.440
The element 1 will be skipped and the subsum 

62
00:03:04.440 --> 00:03:08.250
value is 8-1 which is equal to 7

63
00:03:08.740 --> 00:03:11.660
So here we have found the subarray with sum 

64
00:03:11.660 --> 00:03:15.850
value equal to 7. So find its length and update it 

65
00:03:16.440 --> 00:03:16.920


66
00:03:16.930 --> 00:03:20.000
here length is 2 which is less than the current minimal 

67
00:03:20.000 --> 00:03:22.350
length. So update it to 2. 

68
00:03:22.840 --> 00:03:25.670
Now again try shrinking the window and see if we 

69
00:03:25.670 --> 00:03:28.460
can achieve the same result with minimal length 

70
00:03:28.470 --> 00:03:31.390
So skip the wstart element 5. 

71
00:03:31.400 --> 00:03:32.240
Now the window sum

72
00:03:32.240 --> 00:03:35.750
value will be 7-5 which is 2

73
00:03:36.440 --> 00:03:37.870
2 is less than 7 

74
00:03:37.870 --> 00:03:40.660
So even if we shrink further we can't get the 

75
00:03:40.670 --> 00:03:41.940
expected result. 

76
00:03:42.260 --> 00:03:45.580
So skip the shrinking process and start adding the next 

77
00:03:45.590 --> 00:03:47.050
element to the current window. 

78
00:03:47.640 --> 00:03:50.860
Now 4 will be added and the subsum will 

79
00:03:50.860 --> 00:03:53.390
be 6 which is still less than 7. 

80
00:03:53.630 --> 00:03:56.150
So element 1 will also be added. 

81
00:03:56.640 --> 00:03:58.970
Now the subsum value will be 7.

82
00:03:58.980 --> 00:04:01.350
So find its length which is 3.

83
00:04:01.740 --> 00:04:04.990
But we already have the expected result with sub array

84
00:04:04.990 --> 00:04:08.780
length 2. So no need to update the length.

85
00:04:08.790 --> 00:04:12.090
Now again try to reduce the window size. So element 2 

86
00:04:12.090 --> 00:04:15.800
will be subtracted from subsum 7. So 7-2 will be 5.

87
00:04:15.800 --> 00:04:16.840
 

88
00:04:17.440 --> 00:04:20.570
And since 5 is less than 7, we can't get 

89
00:04:20.570 --> 00:04:23.740
the expected result anymore. So we can skip the 

90
00:04:23.740 --> 00:04:24.450
process.

91
00:04:24.840 --> 00:04:28.800
And finally the minimal length sub array whose sum is 

92
00:04:28.800 --> 00:04:31.930
greater than or equal to given value S, will be 

93
00:04:31.930 --> 00:04:35.050
stored in the variable length and we can return it 

94
00:04:36.040 --> 00:04:40.000
So in our case, the smallest sub array whose sum

95
00:04:40.010 --> 00:04:43.350
greater than or equal to seven is 5 and 2

96
00:04:43.360 --> 00:04:44.850
and its length is 2

97
00:04:45.340 --> 00:04:48.550
So using this approach, you can try solving the problem. 

