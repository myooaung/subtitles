WEBVTT

1
00:00:00.040 --> 00:00:03.060
In this video, let us discuss about the sliding window 

2
00:00:03.060 --> 00:00:03.650
technique. 

3
00:00:04.240 --> 00:00:08.010
The sliding window is an effective technique to solve problems 

4
00:00:08.010 --> 00:00:11.340
in O(n) time complexity which are normally 

5
00:00:11.340 --> 00:00:14.260
solved in O(n^2), O(n*k)

6
00:00:14.270 --> 00:00:16.150
time in brute force 

7
00:00:16.810 --> 00:00:19.690
So what kind of problems can be solved using the 

8
00:00:19.690 --> 00:00:23.970
sliding window technique? And how can you identify sliding window 

9
00:00:23.970 --> 00:00:28.330
problems? The problems that are dealing with iterable order 

10
00:00:28.330 --> 00:00:32.870
data structures like an array, string and linked list are 

11
00:00:32.870 --> 00:00:38.250
such problems and the problems' requirement should be finding or 

12
00:00:38.250 --> 00:00:42.420
calculating something among all the contiguous sub array

13
00:00:42.470 --> 00:00:44.670
or sub strings or sub lists.

14
00:00:45.340 --> 00:00:46.680
See some examples 

15
00:00:47.030 --> 00:00:52.100
Smaller sub with a given sum, maximum sum sub array of size k

16
00:00:52.110 --> 00:00:57.900
Longest sub string with k distinct characters etcetera 

17
00:00:58.740 --> 00:01:03.210
Here you can notice all the given problems involve array 

18
00:01:03.220 --> 00:01:07.530
and string data structures and the requirement is finding something 

19
00:01:07.540 --> 00:01:09.850
on its sub array or sub string 

20
00:01:08.300 --> 00:01:09.850


21
00:01:10.340 --> 00:01:13.670
These kind of problems can be solved using the sliding 

22
00:01:13.670 --> 00:01:14.550
window technique.

23
00:01:15.180 --> 00:01:18.590
Let us solve a problem to understand the advantages of 

24
00:01:18.600 --> 00:01:20.050
the sliding window technique.

25
00:01:20.740 --> 00:01:23.190
Given an array, we need to find the sum of 

26
00:01:23.200 --> 00:01:27.340
all contiguous sub arrays of size k 

27
00:01:27.340 --> 00:01:32.900
So let us take this array of size six with elements 

28
00:01:32.900 --> 00:01:37.750
1, 5, -1, 6, 3 and 2 and let k be 3.

29
00:01:38.340 --> 00:01:41.180
We need to find the sum of all contiguous

30
00:01:41.180 --> 00:01:43.550
sub array of size three. 

31
00:01:44.040 --> 00:01:47.110
So how many sub arrays are present in this array 

32
00:01:47.120 --> 00:01:53.110
with size three? We have 1, 5, -1, and it's 

33
00:01:53.110 --> 00:01:55.040
sum is equal to five.

34
00:01:55.540 --> 00:02:00.420
Then we have 5, -1, 6 and it's sum is 

35
00:02:00.430 --> 00:02:06.050
equal to 10. Then -1, 6, 3 and here the sum 

36
00:02:06.050 --> 00:02:07.450
will be equal to 8.

37
00:02:07.940 --> 00:02:12.550
Then we have 6 3 2 and it's sum will be 11 

38
00:02:13.340 --> 00:02:16.330
So let's see the code for a normal brute force method.

39
00:02:16.330 --> 00:02:20.370
Here size of the array is six and 

40
00:02:20.370 --> 00:02:22.150
the sub array is three. 

41
00:02:22.730 --> 00:02:26.600
The last sub array's starting index will be three which 

42
00:02:26.600 --> 00:02:28.470
is 6-3

43
00:02:28.940 --> 00:02:32.490
So in general, for an array of size n and 

44
00:02:32.490 --> 00:02:36.590
sub array is k the last sub array's starting 

45
00:02:36.600 --> 00:02:40.260
index will be n-k. So we need to 

46
00:02:40.260 --> 00:02:43.860
run the outer for loop for n-k times 

47
00:02:44.500 --> 00:02:47.930
and for each index we need to calculate the sum for

48
00:02:48.090 --> 00:02:49.480
 k elements 

49
00:02:50.040 --> 00:02:52.780
So we are running the inner for loop for 

50
00:02:52.790 --> 00:02:56.290
i+k times and calculating the sub array sum 

51
00:02:56.290 --> 00:02:59.560
so this is the brute force code for sum

52
00:02:59.560 --> 00:03:02.380
of all contiguous sub arrays of size k.

53
00:03:02.380 --> 00:03:02.850


