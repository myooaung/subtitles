WEBVTT

1
00:00:00.940 --> 00:00:01.580
hi friends 

2
00:00:01.590 --> 00:00:03.980
In this video we are going to discuss about 

3
00:00:03.980 --> 00:00:04.810
array and pointers

4
00:00:10.810 --> 00:00:14.300
So as we know an array is a collection of variables of the same 

5
00:00:14.300 --> 00:00:16.650
data type. In C programming language 

6
00:00:16.660 --> 00:00:18.930
Array and pointers are more or less the same. 

7
00:00:18.940 --> 00:00:19.790
See an example 

8
00:00:19.790 --> 00:00:23.169
We have an integer array arr with five elements 10 

9
00:00:23.180 --> 00:00:25.180
20 30 40 and 50 

10
00:00:25.840 --> 00:00:27.870
Here the name of the array which is

11
00:00:27.880 --> 00:00:30.480
arr will point to the first element in the array 10.

12
00:00:30.480 --> 00:00:34.200
Hence arr will have the address of arr[0] 

13
00:00:34.200 --> 00:00:37.210
 so arr equal to &arr[0]

14
00:00:37.220 --> 00:00:41.010
also arr+1 points 

15
00:00:41.010 --> 00:00:44.480
to the second element and arr+2 points to third

16
00:00:44.480 --> 00:00:47.530
element and arr+3 points to the forth element

17
00:00:47.530 --> 00:00:50.570
and finally arr+4 points to the fifth 

18
00:00:50.570 --> 00:00:51.130
element 

19
00:00:51.440 --> 00:00:54.160
Now let us print the address of each element in 

20
00:00:54.160 --> 00:00:54.580
the array.

21
00:00:54.720 --> 00:00:56.379
So consider the programme. First

22
00:00:56.380 --> 00:01:00.410
We are creating the array arr with elements 10 20 30 

23
00:01:00.410 --> 00:01:01.410
40 and 50 

24
00:01:01.640 --> 00:01:03.630
Now we declare an integer variable i.

25
00:01:03.640 --> 00:01:06.500
Now in a for loop we are printing the address of 

26
00:01:06.510 --> 00:01:10.259
each element in the array. In the first iteration i equal to 0

27
00:01:10.260 --> 00:01:14.130
and i is less than five so we print &arr[0] 

28
00:01:14.130 --> 00:01:17.060
equal to arr+0 and we get 

29
00:01:17.070 --> 00:01:21.980
1024. here we are using %p format specifier which 

30
00:01:21.980 --> 00:01:23.880
is used to print the pointer address 

31
00:01:24.090 --> 00:01:27.400
Now we increment i. So it becomes 1. Now

32
00:01:27.400 --> 00:01:30.290
in the second iteration we print &arr[1]

33
00:01:30.300 --> 00:01:33.090
 equal to arr+1 and we get 

34
00:01:33.100 --> 00:01:37.140
1028. Now we increment i and it becomes 2.

35
00:01:37.420 --> 00:01:40.660
now in the third iteration we print &arr[2]

36
00:01:40.670 --> 00:01:44.730
to equal to arr+2 and we get 1032 

37
00:01:44.840 --> 00:01:45.830
and we increment i. 

38
00:01:46.040 --> 00:01:48.990
So it becomes 3. Now in the fourth iteration we 

39
00:01:48.990 --> 00:01:52.160
print &arr[3] equal to 

40
00:01:52.160 --> 00:01:55.310
arr+3 and we get 1036 and i will 

41
00:01:55.310 --> 00:01:59.110
be incremented. Now in the fifth iteration i is equal to 4 and 

42
00:01:59.120 --> 00:02:02.810
i is less than five. So we print &arr[4]

43
00:02:02.820 --> 00:02:06.510
equal to arr+4 and we get 1040. 

44
00:02:06.770 --> 00:02:09.850
And now we increment i and it becomes five. Now in the 

45
00:02:09.850 --> 00:02:13.580
sixth iteration the condition is failed since i equal to 5

46
00:02:13.580 --> 00:02:15.390
which is not less than five 

47
00:02:15.940 --> 00:02:17.929
So control comes out of the for loop.

48
00:02:18.340 --> 00:02:21.250
Now let us see how to print the values.  

49
00:02:21.250 --> 00:02:24.710
arr[i] is exactly same as writing *(arr+i)

50
00:02:24.710 --> 00:02:29.170
 that is value stored at address arr+i. So 

51
00:02:29.170 --> 00:02:33.230
first element can be accessed using *(arr+0)

52
00:02:33.350 --> 00:02:37.430
Similarly second element using *(arr+1) 

53
00:02:37.430 --> 00:02:40.359
third element using *(arr+2) fourth 

54
00:02:40.360 --> 00:02:44.140
element using *(arr+3) and fifth Element using 

55
00:02:44.140 --> 00:02:45.700
*(arr+4)

56
00:02:45.710 --> 00:02:47.829
So consider this programme, first 

57
00:02:47.830 --> 00:02:51.460
we create the array with elements 10 20 30 40 and 50.

58
00:02:51.460 --> 00:02:55.110
 And now we declare i. Now in a for 

59
00:02:55.110 --> 00:02:58.500
loop, we are printing *(arr+i) for 

60
00:02:58.510 --> 00:03:02.209
i equal to 0 to 4. So in the first iteration we get 

61
00:03:02.220 --> 00:03:04.150
arr[0] equal to 10 

62
00:03:04.650 --> 00:03:07.660
In the second iteration we are getting arr[1] 

63
00:03:07.660 --> 00:03:10.910
equal to 20 and in the third iteration we get 

64
00:03:10.920 --> 00:03:12.990
arr[2] equal to 30 

65
00:03:13.140 --> 00:03:15.870
In the fourth iteration we get arr[3] equal 

66
00:03:15.870 --> 00:03:18.970
to 40 and in the fifth iteration we get 

67
00:03:18.970 --> 00:03:21.900
arr[4] equal to 50 and in the six iteration 

68
00:03:21.900 --> 00:03:24.750
condition fails and control comes out of the for loop.

69
00:03:25.140 --> 00:03:27.440
so we can understand that arrays are pretty much 

70
00:03:27.440 --> 00:03:32.769
similar to pointers. So that's all and thank you for watching this video.

