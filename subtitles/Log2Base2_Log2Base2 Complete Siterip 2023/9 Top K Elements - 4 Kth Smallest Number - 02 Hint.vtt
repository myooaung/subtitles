WEBVTT

1
00:00:00.140 --> 00:00:03.560
in the previous video to find a Kth largest element 

2
00:00:03.590 --> 00:00:06.210
we have used min heap here 

3
00:00:06.220 --> 00:00:08.550
We need to find a Kth smallest element 

4
00:00:08.940 --> 00:00:11.950
It is just the opposite version of the previous problem 

5
00:00:12.440 --> 00:00:15.180
So to solve this problem we can just follow the 

6
00:00:15.180 --> 00:00:19.340
previous approach with Max heap instead of min heap that is 

7
00:00:19.610 --> 00:00:23.130
instead of min heap First construct the Max heap for 

8
00:00:23.130 --> 00:00:27.330
the first K elements and then compared the remaining elements 

9
00:00:27.330 --> 00:00:28.530
with the value of root 

10
00:00:28.530 --> 00:00:28.850
Node 

11
00:00:29.340 --> 00:00:31.140
If it is lesser than the root node 

12
00:00:31.360 --> 00:00:34.050
Just replace the root node value and called the heapify 

13
00:00:34.050 --> 00:00:34.850
function 

14
00:00:35.340 --> 00:00:37.720
If it is greater than the root node we can 

15
00:00:37.720 --> 00:00:39.350
simply skip the process 

16
00:00:39.840 --> 00:00:43.720
After the comparison the Kth smallest element will be present 

17
00:00:43.730 --> 00:00:44.950
at the top of the heap 

18
00:00:45.340 --> 00:00:47.650
so we can just return the root node value 

19
00:00:48.140 --> 00:00:49.870
So the logic is very simple 

20
00:00:50.040 --> 00:00:52.870
Just modified a solution of top K elements 

21
00:00:52.870 --> 00:00:57.060
Problem with max heap and finally returned the value of root 

22
00:00:57.060 --> 00:00:57.390
node that's it.

