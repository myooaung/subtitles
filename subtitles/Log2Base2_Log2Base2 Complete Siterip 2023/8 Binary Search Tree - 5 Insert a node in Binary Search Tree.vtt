WEBVTT

1
00:00:01.140 --> 00:00:03.900
in this video we are going to learn how to 

2
00:00:03.910 --> 00:00:06.550
insert a node in a binary search tree 

3
00:00:07.940 --> 00:00:11.060
So this is the code to implement the programme and 

4
00:00:11.060 --> 00:00:14.850
we have the function insert into which we pass the 

5
00:00:14.850 --> 00:00:17.700
root of the tree at the value to be inserted 

6
00:00:18.060 --> 00:00:21.300
and it will insert that value into the binary search 

7
00:00:21.300 --> 00:00:21.650
tree 

8
00:00:22.240 --> 00:00:27.410
So we have public node insert node root comma int val 

9
00:00:27.410 --> 00:00:31.630
the so First we begin from the main function so 

10
00:00:31.630 --> 00:00:36.000
used the constructor Binary search tree which creates an empty 

11
00:00:36.000 --> 00:00:37.380
binary search tree 

12
00:00:37.410 --> 00:00:41.750
So here we can create tree named BST 

13
00:00:41.840 --> 00:00:42.920
So our empty 

14
00:00:42.920 --> 00:00:45.300
Binary search tree is created 

15
00:00:45.710 --> 00:00:49.390
Now let us insert the element hundred into it so 

16
00:00:49.390 --> 00:00:53.180
we call the function insert by passing the root and 

17
00:00:53.180 --> 00:00:58.020
the Value 100 so right BST dot root equal to 

18
00:00:58.030 --> 00:01:03.280
BST dot Insert of dot root comma 100 So the 

19
00:01:03.280 --> 00:01:04.820
control goes to function 

20
00:01:04.830 --> 00:01:07.410
Insert Let us see what happens 

21
00:01:07.410 --> 00:01:11.630
here first we need to check if the root 

22
00:01:11.640 --> 00:01:16.310
equal null to that is if the tree is empty and here it is 

23
00:01:16.570 --> 00:01:19.460
so we can create a new node with the given 

24
00:01:19.460 --> 00:01:20.950
value and return it 

25
00:01:21.100 --> 00:01:24.380
So as we discussed in the previous video We created 

26
00:01:24.380 --> 00:01:27.670
a constructor to create a new node with the passed 

27
00:01:27.680 --> 00:01:29.550
value so used that here 

28
00:01:29.680 --> 00:01:32.850
So write return new node of val 

29
00:01:33.000 --> 00:01:36.530
So a new node with the value 100 and left 

30
00:01:36.540 --> 00:01:40.240
and right null will be created and is returned to 

31
00:01:40.240 --> 00:01:41.150
main function 

32
00:01:41.640 --> 00:01:45.190
The root of the binary search tree now points to 

33
00:01:45.190 --> 00:01:49.140
this node so now our binary search tree is having 

34
00:01:49.140 --> 00:01:52.010
one node which will be the root node with value 

35
00:01:52.010 --> 00:01:56.530
100 at address 1024 and it is pointing to null 

36
00:01:56.540 --> 00:01:57.860
on both sides 

37
00:01:57.970 --> 00:02:01.780
Now we continue execution in main function So we have 

38
00:02:01.790 --> 00:02:05.500
next function called here with value 50 So the control 

39
00:02:05.510 --> 00:02:09.760
goes to insert function again and there we check if root 

40
00:02:09.760 --> 00:02:12.080
equal to null but it is not so 

41
00:02:12.080 --> 00:02:15.250
We need to find word to insert this element 

42
00:02:15.840 --> 00:02:19.170
If the passed value is less than root it goes 

43
00:02:19.170 --> 00:02:22.300
to left side And if it is greater than root 

44
00:02:22.310 --> 00:02:26.030
it goes to right side So we check else If 

45
00:02:26.040 --> 00:02:29.290
root key is less than 50 and it is not 

46
00:02:29.290 --> 00:02:29.780
true 

47
00:02:29.990 --> 00:02:33.770
So we check else If root Key is greater than 

48
00:02:33.770 --> 00:02:37.890
50 which is true So we set root left equal 

49
00:02:37.890 --> 00:02:40.900
to insert of root left comma Val 

50
00:02:41.120 --> 00:02:42.600
So that is a recursion 

51
00:02:42.730 --> 00:02:46.050
And the operation is simply If the value to be 

52
00:02:46.060 --> 00:02:49.450
inserted is less than root it should be inserted to 

53
00:02:49.450 --> 00:02:50.310
the left side 

54
00:02:50.460 --> 00:02:54.140
And we call the function again by passing the root as 

55
00:02:54.150 --> 00:02:56.450
root left which is null here 

56
00:02:56.540 --> 00:03:01.030
so call insert of Null comma 50 and first we 

57
00:03:01.030 --> 00:03:04.000
check if root equal to null which is true 

58
00:03:04.090 --> 00:03:07.770
So we create a new node with key 50 at 

59
00:03:07.780 --> 00:03:13.010
address 2024 it's returned to function insert function root 

60
00:03:13.010 --> 00:03:16.940
comma 50 and that will be stored in root left 

61
00:03:17.000 --> 00:03:21.400
which means hundreds left pointing to 50 and we return 

62
00:03:21.410 --> 00:03:23.100
the root to main function 

63
00:03:23.200 --> 00:03:26.450
And now the binary search tree looks like this 

64
00:03:27.140 --> 00:03:29.960
Now we want to insert 150 

65
00:03:29.970 --> 00:03:33.710
So we called a function again and control goes to function 

66
00:03:33.720 --> 00:03:36.850
insert and we check if root equal to null 

67
00:03:37.240 --> 00:03:40.300
But we have root equal to 1024 

68
00:03:40.380 --> 00:03:41.890
So the condition fails 

69
00:03:42.070 --> 00:03:43.120
And now we check 

70
00:03:43.130 --> 00:03:46.740
If root key which is 100 is less than 150 

71
00:03:46.740 --> 00:03:48.540
it is true 

72
00:03:48.670 --> 00:03:52.880
So we set root right equal to insert of root 

73
00:03:52.880 --> 00:03:56.430
right comma Val and what we're doing here is we 

74
00:03:56.430 --> 00:04:00.070
found that 150 is greater than the root so 

75
00:04:00.080 --> 00:04:02.550
it must be inserted to the right side of the 

76
00:04:02.550 --> 00:04:02.950
root 

77
00:04:03.340 --> 00:04:04.210
So we recursively 

78
00:04:04.210 --> 00:04:08.240
called the function insert by passing null and 150 

79
00:04:08.240 --> 00:04:11.960
there we first check if root equal to null 

80
00:04:12.470 --> 00:04:13.480
and that is true 

81
00:04:13.490 --> 00:04:16.610
So we create a new node and a new node 

82
00:04:16.620 --> 00:04:21.650
with key 150 is created at address 3024 in 

83
00:04:21.650 --> 00:04:24.600
the heap section and that is returned to the calling 

84
00:04:24.600 --> 00:04:25.150
function 

85
00:04:25.640 --> 00:04:28.800
And from there it is returned to the first insert 

86
00:04:28.800 --> 00:04:32.610
function and that it is stored to root right that 

87
00:04:32.610 --> 00:04:35.410
is right of node with value 100 

88
00:04:35.600 --> 00:04:39.510
And it points to 3024 root is returned to the 

89
00:04:39.510 --> 00:04:40.450
main function 

90
00:04:40.840 --> 00:04:44.060
And now the BST looks like this 100 

91
00:04:44.060 --> 00:04:47.140
being the root and 50 being the left child and 

92
00:04:47.140 --> 00:04:49.080
150 being the right child 

93
00:04:49.220 --> 00:04:53.060
And now let us insert another element 125 so 

94
00:04:53.060 --> 00:04:56.430
we can call insert of root comma Val which 

95
00:04:56.430 --> 00:04:57.630
is 125 

96
00:04:57.830 --> 00:05:00.150
So control goes to function insert 

97
00:05:00.340 --> 00:05:03.170
And there we first check if root equal to null 

98
00:05:03.560 --> 00:05:04.600
but it is not 

99
00:05:04.670 --> 00:05:08.000
So we check if 125 is greater than or 

100
00:05:08.000 --> 00:05:10.460
less than the root so it is greater than the 

101
00:05:10.460 --> 00:05:10.860
root 

102
00:05:10.870 --> 00:05:15.530
So set root Right equal to insert of root right 

103
00:05:15.540 --> 00:05:20.750
Comma val that is 3024 comma 125 so we are 

104
00:05:20.750 --> 00:05:24.260
calling insert again and we check if root equal to  

105
00:05:24.260 --> 00:05:24.550
null

106
00:05:24.940 --> 00:05:29.230
But it is 3024 not null so we check whether 

107
00:05:29.240 --> 00:05:31.660
it should go to right or left 

108
00:05:31.850 --> 00:05:34.740
That is if it is greater than or less than 

109
00:05:34.740 --> 00:05:37.580
150 it is less than 150 

110
00:05:37.640 --> 00:05:41.550
So we set root left that is left of 150

111
00:05:41.550 --> 00:05:45.750
equal to insert of null comma 125 

112
00:05:46.340 --> 00:05:49.740
So we are calling insert again and first we need 

113
00:05:49.740 --> 00:05:52.740
to check if root equal to null and it is 

114
00:05:52.910 --> 00:05:53.790
so create a

115
00:05:53.790 --> 00:05:59.140
New node with key 125 at address 4024 

116
00:05:59.290 --> 00:06:01.650
and that is returned to calling functions 

117
00:06:02.040 --> 00:06:06.140
First to insert of null comma 125 and from 

118
00:06:06.140 --> 00:06:10.800
there to insert of 3024 comma 125 and 

119
00:06:10.810 --> 00:06:15.050
one fifty's left will now point to 4024 

120
00:06:15.060 --> 00:06:18.730
that is our new node and returned root to insert 

121
00:06:18.730 --> 00:06:21.350
of 1024 comma 125 

122
00:06:21.640 --> 00:06:27.170
So here set right of 100 to 3024 finally returned 

123
00:06:27.170 --> 00:06:28.630
root to main function 

124
00:06:28.820 --> 00:06:31.040
So that is how are binary search 

125
00:06:31.040 --> 00:06:32.820
tree finally looks like 

126
00:06:32.870 --> 00:06:35.660
So this is how we can perform insertion in a 

127
00:06:35.660 --> 00:06:36.850
binary search tree. 

