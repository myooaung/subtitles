WEBVTT

1
00:00:00.740 --> 00:00:01.460
Hi friends 

2
00:00:01.470 --> 00:00:03.740
In this video we are going to learn the bitwise

3
00:00:03.740 --> 00:00:05.110
Right Shift operator 

4
00:00:11.940 --> 00:00:15.260
Right shift operator is used to shift the binary sequence 

5
00:00:15.260 --> 00:00:18.470
to the right side by a specified number of positions 

6
00:00:19.040 --> 00:00:21.370
So see an sample take the number 40 

7
00:00:21.400 --> 00:00:24.099
But it is a decimal number so translated into a 

8
00:00:24.100 --> 00:00:28.830
binary sequence and we will get 1110 and write it in the 

9
00:00:28.840 --> 00:00:29.870
eight bit format 

10
00:00:29.870 --> 00:00:35.460
So we will get 00001110 Now let us perform the right

11
00:00:35.460 --> 00:00:35.870
shift 

12
00:00:35.960 --> 00:00:37.160
So we have 14 

13
00:00:37.160 --> 00:00:38.150
Right shift 1

14
00:00:38.200 --> 00:00:41.360
So the binary sequence will be shifted to the right 

15
00:00:41.360 --> 00:00:44.720
side by one position like this and the cells which 

16
00:00:44.720 --> 00:00:47.710
are empty will be marked zero at last 

17
00:00:47.900 --> 00:00:53.980
And the result will be 00000111 whose decimal equivalent is 7 

18
00:00:53.980 --> 00:00:54.529
 

19
00:00:54.630 --> 00:00:58.020
So the result of 14 right shift 1 is 7

20
00:00:59.240 --> 00:01:00.669
Now we have 14 

21
00:01:00.670 --> 00:01:01.650
Right shift 2 

22
00:01:01.710 --> 00:01:03.970
So we need to shift the binary sequence 

23
00:01:04.160 --> 00:01:05.740
Two positions to the right 

24
00:01:06.120 --> 00:01:09.200
So we have already shifted one time and now we 

25
00:01:09.200 --> 00:01:11.130
only need to shift once more 

26
00:01:11.360 --> 00:01:17.649
So we will get 00000011 whose binary equivalent is 3

27
00:01:17.840 --> 00:01:20.850
So 14 right shift 2 is equal to 3 

28
00:01:20.840 --> 00:01:23.270
Now there is this one interesting thing 

29
00:01:23.370 --> 00:01:26.389
When we right shifted 14 to 1 position The 

30
00:01:26.390 --> 00:01:29.410
result was 7 which is equal to 14/2 

31
00:01:29.860 --> 00:01:33.320
And when we right shifted 14 to 2 positions the 

32
00:01:33.320 --> 00:01:36.960
result was 3 which is equal to 14/4

33
00:01:36.970 --> 00:01:40.179
So there is this general formula that if we shift a 

34
00:01:40.180 --> 00:01:43.490
number by N times to the right the output will 

35
00:01:43.490 --> 00:01:46.160
be the number divided by 2^N 

36
00:01:46.160 --> 00:01:47.009


37
00:01:47.380 --> 00:01:48.470
So see an example 

38
00:01:48.470 --> 00:01:51.179
Let the number be 128 and we need to 

39
00:01:51.180 --> 00:01:53.400
right shift by 5 positions 

40
00:01:54.140 --> 00:01:57.610
So by our formula it will be equal to 

41
00:01:57.610 --> 00:02:01.510
128 /2^5 that is 

42
00:02:01.510 --> 00:02:05.970
128 divided by 32 and we will be getting 4. Now see 

43
00:02:05.970 --> 00:02:08.040
a programme. In the main function first

44
00:02:08.040 --> 00:02:11.750
we're declaring an integer var = 128 and 

45
00:02:11.750 --> 00:02:14.200
we are printing var/2 equal to var 

46
00:02:14.200 --> 00:02:17.250
Right shift 1 and 64 will be printed

47
00:02:17.370 --> 00:02:20.799
And next we have var/4 = var 

48
00:02:20.800 --> 00:02:24.250
right shift 2 and 32 will be printed and next 

49
00:02:24.250 --> 00:02:27.760
print function will be printing var/8 = var 

50
00:02:27.760 --> 00:02:28.270


51
00:02:28.280 --> 00:02:28.590
Right 

52
00:02:28.590 --> 00:02:31.779
Shift three and 16 will be printed and that is 

53
00:02:31.780 --> 00:02:32.700
how it works 

54
00:02:33.240 --> 00:02:35.510
So that's all and thank you for watching this video 

