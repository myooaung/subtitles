WEBVTT

1
00:00:01.240 --> 00:00:01.970
Hi friends 

2
00:00:01.980 --> 00:00:04.260
In this video we are going to discuss about calloc in C

3
00:00:04.260 --> 00:00:04.850


4
00:00:11.240 --> 00:00:13.139
Firstly calloc stands for 

5
00:00:13.140 --> 00:00:14.100
Contiguous allocation

6
00:00:14.240 --> 00:00:17.130
So as we discussed calloc is declared in Standard 

7
00:00:17.130 --> 00:00:20.260
Library header file stdlib.h along with 

8
00:00:20.270 --> 00:00:21.540
malloc.

9
00:00:21.540 --> 00:00:24.209
So to use this function in our programme we must include 

10
00:00:24.210 --> 00:00:27.260
stdlib.h first. Now let us see

11
00:00:27.260 --> 00:00:29.930
an example programme where we first declare an integer

12
00:00:29.930 --> 00:00:33.400
pointer ptr and it is a static memory allocation 

13
00:00:33.400 --> 00:00:37.700
So memory is allocated in stack. So let's assume memory for ptr 

14
00:00:37.710 --> 00:00:40.750
is allocated at address 2048 

15
00:00:41.420 --> 00:00:43.070
Next we have a dynamic memory 

16
00:00:43.070 --> 00:00:47.090
A location statement which uses calloc function and calloc

17
00:00:47.100 --> 00:00:50.379
actually takes two arguments which are the number of elements 

18
00:00:50.390 --> 00:00:53.400
and the size of each element and returns the base 

19
00:00:53.400 --> 00:00:55.010
address of the memory allocated. 

20
00:00:55.240 --> 00:00:58.169
So here in this programme, we have calloc(5),size(int) 

21
00:00:58.180 --> 00:01:01.730
 It actually means we need memory 

22
00:01:01.730 --> 00:01:04.890
for five integers so five blocks of memory each 

23
00:01:04.890 --> 00:01:07.280
with size of an integer which is 4 bytes will 

24
00:01:07.280 --> 00:01:11.050
be allocated and each block will be initialised to 0 

25
00:01:11.440 --> 00:01:14.530
and its base address 1000 is returned and which will 

26
00:01:14.530 --> 00:01:15.850
be stored in ptr 

27
00:01:16.440 --> 00:01:19.490
So using ptr we can access the allocated memory 

28
00:01:19.730 --> 00:01:23.380
Next we have some assignment statements first is

29
00:01:23.390 --> 00:01:24.740
*(ptr+0)=10

30
00:01:25.080 --> 00:01:28.289
So as we discussed in the previous tutorial *ptr+0 

31
00:01:28.300 --> 00:01:32.300
is a value at first block so 10 will 

32
00:01:32.300 --> 00:01:33.170
be stored here 

33
00:01:33.410 --> 00:01:36.750
Next we have *ptr+1 that is equal 

34
00:01:36.750 --> 00:01:37.449
to 20 

35
00:01:37.500 --> 00:01:41.050
So at second block 20 will be stored and similarly 

36
00:01:41.060 --> 00:01:44.230
30 40 and 50 also gets stored in third, forth 

37
00:01:44.230 --> 00:01:45.950
and fifth blocks respectively 

38
00:01:46.640 --> 00:01:49.149
Now let us considered a scenario where the heap is 

39
00:01:49.160 --> 00:01:52.259
already full and using calloc we are trying to allocate 

40
00:01:52.260 --> 00:01:54.760
some memory but heap is full already 

41
00:01:55.020 --> 00:01:57.890
Now what happens is just like the malloc case 

42
00:01:58.000 --> 00:02:01.340
calloc also returns NULL instead of the base address 

43
00:02:01.650 --> 00:02:04.589
So whenever we use malloc or calloc we should 

44
00:02:04.590 --> 00:02:08.150
first check whether memory was really allocated or not 

45
00:02:08.410 --> 00:02:10.650
So for that we can perform a NULL check like 

46
00:02:10.650 --> 00:02:10.880
this 

47
00:02:10.880 --> 00:02:13.670
That is if value returned by calloc is NULL, 

48
00:02:13.680 --> 00:02:17.070
memory was not allocated otherwise it was successful 

49
00:02:17.540 --> 00:02:19.829
So that's all and thank you for watching this video 

