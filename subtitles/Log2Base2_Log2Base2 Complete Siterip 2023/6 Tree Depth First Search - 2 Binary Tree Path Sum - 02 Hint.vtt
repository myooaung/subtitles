WEBVTT

1
00:00:00.040 --> 00:00:01.920
we can use DFS to recursively

2
00:00:01.920 --> 00:00:05.750
traverse the tree and while traversing the tree 

3
00:00:05.820 --> 00:00:09.110
subtract the value of the current node from the given sum

4
00:00:09.110 --> 00:00:12.830
and get the new sum and in each step,

5
00:00:12.980 --> 00:00:16.750
check whether we have reached the leaf node or not 

6
00:00:17.140 --> 00:00:19.550
And if the new sum value is zero 

7
00:00:20.340 --> 00:00:23.570
And if the current node is null and the new sum

8
00:00:23.570 --> 00:00:27.610
value is zero, we have found a path with the 

9
00:00:27.610 --> 00:00:31.970
given sum. So return 1 and if we reach leaf node 

10
00:00:32.030 --> 00:00:36.000
But the new sum value is not zero, which means 

11
00:00:36.010 --> 00:00:39.310
we have reached the whole path but the path sum 

12
00:00:39.310 --> 00:00:42.140
is not equal to the given sum so we 

13
00:00:42.140 --> 00:00:43.250
can return zero.

14
00:00:43.940 --> 00:00:48.010
So do this process and return to any one 

15
00:00:48.010 --> 00:00:50.860
of sub tree has a path with the given sum

16
00:00:51.180 --> 00:00:55.170
For example, let's take this tree and assume the given 

17
00:00:55.170 --> 00:00:58.600
sum as 210. Now subtract root node 

18
00:00:58.600 --> 00:00:58.990
 

19
00:00:59.000 --> 00:01:00.650
100 from 210 

20
00:01:01.140 --> 00:01:04.600
Now the remaining sum becomes 110 and in node 

21
00:01:04.600 --> 00:01:05.330
50 

22
00:01:05.340 --> 00:01:08.750
Subtract 50 from the remaining sum 110 

23
00:01:09.220 --> 00:01:12.430
Now the new sum becomes 60 and in node 10

24
00:01:12.430 --> 00:01:16.970
subtract 10 from the remaining sum 60 and it 

25
00:01:16.970 --> 00:01:21.450
becomes 50 now we have reached null which means we 

26
00:01:21.450 --> 00:01:24.050
have come to the end of one path. 

27
00:01:24.220 --> 00:01:27.250
But the remaining sum is 50 which is non zero 

28
00:01:28.240 --> 00:01:31.650
That means this path sum is not equal to the 

29
00:01:31.650 --> 00:01:34.150
given sum so it will return zero 

30
00:01:34.630 --> 00:01:39.140
Now the execution control will reach 50's right which is 

31
00:01:39.150 --> 00:01:41.840
node 60. In node 50 

32
00:01:41.920 --> 00:01:43.750
The remaining sum is 60 

33
00:01:44.440 --> 00:01:47.660
So the current node value 60 is subtracted from the 

34
00:01:47.660 --> 00:01:50.350
remaining sum 60 which become zero.

35
00:01:50.840 --> 00:01:51.960
Next we have null

36
00:01:52.260 --> 00:01:54.990
So we have come to the end of another path.

37
00:01:55.120 --> 00:01:58.650
But this time we have the remaining sum as zero 

38
00:01:59.040 --> 00:02:04.340
that means this path 100 50 60, sum is equal to 

39
00:02:04.340 --> 00:02:07.550
the given sum 210 so we can return true.

40
00:02:08.340 --> 00:02:12.520
here in root's left sub tree one path returns zero 

41
00:02:12.530 --> 00:02:14.350
and another path returns one.

42
00:02:14.760 --> 00:02:19.010
But if anyone path has given sum, we can return 

43
00:02:19.020 --> 00:02:19.490
True 

44
00:02:19.730 --> 00:02:23.490
So we need to return OR of left and right recursion result.

45
00:02:23.490 --> 00:02:27.850
Here zero OR one will be one 

46
00:02:28.340 --> 00:02:31.630
So this tree has a path with sum equal to 

47
00:02:31.630 --> 00:02:32.980
the given sum value 

48
00:02:33.270 --> 00:02:36.450
So using this idea, you can try solving this problem.

