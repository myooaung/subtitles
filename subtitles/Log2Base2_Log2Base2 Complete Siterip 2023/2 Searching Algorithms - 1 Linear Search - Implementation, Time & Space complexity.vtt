WEBVTT

1
00:00:00.140 --> 00:00:01.000
Hello friends 

2
00:00:01.050 --> 00:00:04.680
In this video let us discuss about linear search or 

3
00:00:04.680 --> 00:00:05.850
sequential search.

4
00:00:06.540 --> 00:00:09.390
So assume that I am going to give you a book 

5
00:00:09.400 --> 00:00:12.600
which has unordered page numbers and it has 

6
00:00:12.600 --> 00:00:16.480
100 pages like the first page is marked as number 

7
00:00:16.480 --> 00:00:17.270
56 

8
00:00:17.550 --> 00:00:20.850
The second page marked this number 89 and so on. 

9
00:00:21.340 --> 00:00:24.240
That is the point is it is randomly numbered.

10
00:00:24.940 --> 00:00:28.100
Now I am going to ask you to find the 

11
00:00:28.100 --> 00:00:29.410
page number 50 

12
00:00:29.720 --> 00:00:32.890
What will you do Since the page numbers are 

13
00:00:32.890 --> 00:00:36.230
unordered we don't have any choice other than searching 

14
00:00:36.230 --> 00:00:37.650
it page by page 

15
00:00:38.040 --> 00:00:40.380
For example take the first page 

16
00:00:40.490 --> 00:00:42.920
If it is page number 50 we are done 

17
00:00:43.150 --> 00:00:45.670
But if it is not then we have to go 

18
00:00:45.670 --> 00:00:48.620
to the next page and do the same process until 

19
00:00:48.620 --> 00:00:50.650
we find the page number 50 

20
00:00:52.240 --> 00:00:55.170
And if we run out of page we can conclude 

21
00:00:55.170 --> 00:00:58.250
that the page number 50 is not in the book 

22
00:00:59.040 --> 00:01:02.860
So this is exactly what is linear search or 

23
00:01:02.860 --> 00:01:04.720
sequential search that is 

24
00:01:04.730 --> 00:01:07.600
We have a book with unordered page numbers 

25
00:01:07.850 --> 00:01:10.820
and we have to find a particular page so we 

26
00:01:10.820 --> 00:01:14.000
have to check each and every page from the first 

27
00:01:14.000 --> 00:01:18.280
page to the last page till we find it so 

28
00:01:18.280 --> 00:01:21.980
see this array with five elements we have to find the 

29
00:01:21.980 --> 00:01:23.100
key 50 

30
00:01:23.410 --> 00:01:26.410
So we will compare the key with first element 

31
00:01:26.670 --> 00:01:27.730
It is not the key 

32
00:01:27.980 --> 00:01:31.380
So go on and compare the key with second element 

33
00:01:31.720 --> 00:01:33.130
It is also not the same 

34
00:01:33.400 --> 00:01:36.240
So go on and compare the key with third Element 

35
00:01:36.570 --> 00:01:38.150
again it is not the same 

36
00:01:38.740 --> 00:01:40.260
So check the fourth element 

37
00:01:40.270 --> 00:01:41.930
Again the comparison fails 

38
00:01:42.020 --> 00:01:45.220
So compare the key with fifth element And now it 

39
00:01:45.220 --> 00:01:45.890
is true 

40
00:01:45.900 --> 00:01:47.900
The fifth element is the key 

41
00:01:48.220 --> 00:01:51.710
So we have found the key by comparing the key 

42
00:01:51.710 --> 00:01:54.850
with each element from first to last 

43
00:01:55.640 --> 00:02:00.060
Now let us search for another key 20. First Element 

44
00:02:00.060 --> 00:02:01.500
10 is not the key 

45
00:02:01.510 --> 00:02:04.010
Second Element 30 is not the key 

46
00:02:04.240 --> 00:02:07.070
Third element 60 is also not the key 

47
00:02:07.180 --> 00:02:10.820
Fourth is also not and fifth is also not 20 

48
00:02:10.830 --> 00:02:11.650
which is the key 

49
00:02:12.140 --> 00:02:15.870
And since we have completed the array we can say that the 

50
00:02:15.870 --> 00:02:20.220
key is not present in the array so that is linear 

51
00:02:20.220 --> 00:02:22.100
search or sequential search 

52
00:02:22.180 --> 00:02:25.310
Now let us see how to implement linear search 

53
00:02:25.660 --> 00:02:28.920
Here we have the main function and the function linear 

54
00:02:28.920 --> 00:02:29.550
search 

55
00:02:30.040 --> 00:02:32.850
So execution begins from the main function 

56
00:02:33.540 --> 00:02:38.680
First let us declare the array page number with elements 86 

57
00:02:38.720 --> 00:02:45.150
91 34 50 and zero and the key as 50 

58
00:02:45.840 --> 00:02:49.320
So we want to search the key 50 in the array

59
00:02:49.330 --> 00:02:50.280
page number 

60
00:02:50.350 --> 00:02:53.370
And we will call the function Linear Search which will 

61
00:02:53.370 --> 00:02:55.650
perform linear search operation 

62
00:02:56.040 --> 00:02:59.310
We will pass the array its size and key to be 

63
00:02:59.310 --> 00:03:01.350
searched into the function 

64
00:03:02.040 --> 00:03:03.940
And the function will return one 

65
00:03:04.200 --> 00:03:07.940
if the key is found otherwise it will return zero 

66
00:03:08.360 --> 00:03:09.330
So we have 

67
00:03:09.600 --> 00:03:14.440
If linear search of page number comma size comma key equal 

68
00:03:14.440 --> 00:03:17.520
to one print search found else 

69
00:03:17.610 --> 00:03:18.950
search not found 

70
00:03:19.340 --> 00:03:22.440
So the function is called and control gets here 

71
00:03:22.890 --> 00:03:27.150
And the page number is stored in arr and size 

72
00:03:27.160 --> 00:03:29.270
in size and key in key 

73
00:03:29.280 --> 00:03:33.020
Now we can simply perform Linear search using a for 

74
00:03:33.020 --> 00:03:33.350
loop 

75
00:03:33.940 --> 00:03:36.580
We will iterate over the array. And 

76
00:03:36.590 --> 00:03:39.790
In each iteration we will compare the key and the 

77
00:03:39.800 --> 00:03:40.450
element 

78
00:03:40.940 --> 00:03:42.930
So declare an integer variable 

79
00:03:42.940 --> 00:03:45.930
i and we have the for loop for i equal to 

80
00:03:45.930 --> 00:03:47.830
zero i less than size 

81
00:03:47.840 --> 00:03:48.740
i++ 

82
00:03:48.750 --> 00:03:50.530
So I will take the values 

83
00:03:50.640 --> 00:03:59.670
0123 and four and in first iteration i = 0 so check 

84
00:03:59.720 --> 00:04:02.460
If array of i that is arr of 

85
00:04:02.460 --> 00:04:06.080
zero equal to key which is 50 and it is 

86
00:04:06.080 --> 00:04:10.250
not so increment i and start the next iteration 

87
00:04:10.840 --> 00:04:15.280
Now i equal to one so check if arr of 

88
00:04:15.280 --> 00:04:19.180
one equal to 50. Again This if fails here. 

89
00:04:19.610 --> 00:04:23.780
So start the next iteration Now i equal to two and 

90
00:04:23.780 --> 00:04:27.910
check if arr of two equal to 50. Again if 

91
00:04:27.910 --> 00:04:32.460
failed So increment i and i equal to three now 

92
00:04:33.140 --> 00:04:36.820
in next iteration check if arr of three equal to 

93
00:04:36.820 --> 00:04:41.940
50 and it is. That is the key is found at index 

94
00:04:41.940 --> 00:04:46.710
three so return one And here in main function this 

95
00:04:46.710 --> 00:04:51.090
return value is one So if becomes true and prints 

96
00:04:51.280 --> 00:04:56.470
search found. Now let the key equal to 30 So let 

97
00:04:56.470 --> 00:05:00.210
us search for 30 in array page number. So 

98
00:05:00.210 --> 00:05:04.910
the function is called by passing the area size and key 

99
00:05:04.920 --> 00:05:08.510
and control gets here we will iterate over the 

100
00:05:08.510 --> 00:05:11.920
array and in each iteration we will compare the key 

101
00:05:11.930 --> 00:05:16.060
and the array element so declare the integer variable i 

102
00:05:16.340 --> 00:05:18.990
and we have the for loop for i equal to zero 

103
00:05:19.000 --> 00:05:20.100
i less than size

104
00:05:20.110 --> 00:05:24.570
i++ and in first iteration equal to zero 

105
00:05:24.860 --> 00:05:25.100
So 

106
00:05:25.100 --> 00:05:25.680
check 

107
00:05:25.750 --> 00:05:29.350
If arr of i that is arr of zero equal 

108
00:05:29.350 --> 00:05:33.130
to key and it is not so increment i and 

109
00:05:33.130 --> 00:05:34.540
start next iteration 

110
00:05:34.980 --> 00:05:38.790
Now I equal to one so check if arr of 

111
00:05:38.800 --> 00:05:42.550
one equal to 30 again if fails here 

112
00:05:43.040 --> 00:05:47.820
So start the next iteration. Now I equal to two and 

113
00:05:47.820 --> 00:05:52.010
check if arr of two equal to 30 again it 

114
00:05:52.010 --> 00:05:52.650
fails 

115
00:05:52.910 --> 00:05:57.260
So increment i. So i equal to three now. In the next 

116
00:05:57.260 --> 00:06:02.260
iteration check if arr of three equal to 30 again 

117
00:06:02.260 --> 00:06:06.150
it fails so increment i and i becomes four now.

118
00:06:06.640 --> 00:06:09.520
In next iteration check if arr of four 

119
00:06:09.520 --> 00:06:13.580
equal to 30 again it is not. So increment i 

120
00:06:13.650 --> 00:06:18.160
and i equal to five now and now check the condition 

121
00:06:18.170 --> 00:06:22.260
i less than size and five is not less than five 

122
00:06:22.270 --> 00:06:27.650
So this condition fails. That is we have completely traversed the array.

123
00:06:28.140 --> 00:06:31.030
So control comes out of the for loop and returns 

124
00:06:31.040 --> 00:06:35.380
zero as the key was not found in the array. So 

125
00:06:35.380 --> 00:06:39.440
here in main function this returned value is zero which 

126
00:06:39.440 --> 00:06:40.660
is not equal to one 

127
00:06:40.830 --> 00:06:44.720
So if fails and control goes to else part and 

128
00:06:44.720 --> 00:06:49.100
prints search is not formed So that is linear search and 

129
00:06:49.100 --> 00:06:50.950
this is how we can implement it.

130
00:06:51.640 --> 00:06:54.810
Now let us discuss about the time complexity of this 

131
00:06:54.810 --> 00:06:55.550
operation 

132
00:06:55.560 --> 00:06:59.130
The best case is when the keys present in the first 

133
00:06:59.130 --> 00:06:59.850
position. 

134
00:07:00.240 --> 00:07:02.990
Then only one iteration is needed 

135
00:07:03.010 --> 00:07:06.450
So the best case time complexity is order of one 

136
00:07:06.940 --> 00:07:10.000
The worst case is when the key is present in the 

137
00:07:10.000 --> 00:07:14.120
last position then we will need n iterations to find 

138
00:07:14.120 --> 00:07:14.450
it.

139
00:07:15.040 --> 00:07:18.830
See here the key 50 is present in the fifth 

140
00:07:18.830 --> 00:07:22.990
position so we will need five iterations to find it 

141
00:07:23.640 --> 00:07:27.090
That is the size of the array. So the worst case 

142
00:07:27.090 --> 00:07:29.650
time complexity is order of n.

