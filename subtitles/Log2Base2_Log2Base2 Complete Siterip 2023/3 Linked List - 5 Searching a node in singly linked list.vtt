WEBVTT

1
00:00:00.740 --> 00:00:03.670
In this video we will discuss how to search a 

2
00:00:03.670 --> 00:00:05.050
node in a linked list 

3
00:00:06.040 --> 00:00:08.480
So we have a singly linked list with four 

4
00:00:08.480 --> 00:00:12.580
nodes with values 10 2030 and 40 

5
00:00:12.690 --> 00:00:15.970
So this is the code to implement a search operation 

6
00:00:16.060 --> 00:00:19.560
The function search will be doing the search operation and 

7
00:00:19.560 --> 00:00:21.530
it returns the result of search 

8
00:00:21.670 --> 00:00:24.840
So it takes in the key to be searched And 

9
00:00:24.840 --> 00:00:28.630
if the keys found than the function returns true and 

10
00:00:28.640 --> 00:00:32.470
if the keys not found than it returns false so 

11
00:00:32.470 --> 00:00:36.450
write the function public Boolean search of int key 

12
00:00:36.840 --> 00:00:38.950
So what we are going to do is we will 

13
00:00:38.960 --> 00:00:43.340
traverse the entire linked list compare each nodes data with 

14
00:00:43.350 --> 00:00:47.340
key and if it is matched then returned true else 

15
00:00:47.340 --> 00:00:48.420
Return false 

16
00:00:48.430 --> 00:00:51.940
So let us create temp pointing to head so that 

17
00:00:51.940 --> 00:00:54.470
we can start iterating from the beginning of the 

18
00:00:54.470 --> 00:00:58.250
list So write node temp equal to head 

19
00:00:58.740 --> 00:01:01.560
So TEMP based pointing the head now Now we need 

20
00:01:01.560 --> 00:01:04.990
while loop traverse the list and checked the data 

21
00:01:05.000 --> 00:01:08.660
at each node So write the while loop while temp 

22
00:01:08.670 --> 00:01:10.020
not equal to null 

23
00:01:10.050 --> 00:01:13.440
Now for each node we need to compare its data 

24
00:01:13.450 --> 00:01:17.420
with the key if it is matched then returned true 

25
00:01:17.550 --> 00:01:19.430
else move to the next node 

26
00:01:19.640 --> 00:01:23.980
So write if TEMP data equal to key return true 

27
00:01:23.990 --> 00:01:28.470
otherwise just move to next node So write temp equal 

28
00:01:28.470 --> 00:01:29.630
to temp next 

29
00:01:29.640 --> 00:01:32.650
Now if all the nodes are checked and we reached 

30
00:01:32.650 --> 00:01:37.080
the end then this while loop will terminate So finally we 

31
00:01:37.080 --> 00:01:41.050
can return false as the key was not found so 

32
00:01:41.050 --> 00:01:45.040
write return false after the while loop let us see an 

33
00:01:45.040 --> 00:01:49.370
example here that a search for the element 30 so key 

34
00:01:49.370 --> 00:01:53.320
equal to 30 here First we check If temp which 

35
00:01:53.320 --> 00:01:56.340
is pointing to head is null if it is null 

36
00:01:56.560 --> 00:01:59.280
it means we have reached the end of the linked 

37
00:01:59.280 --> 00:02:01.350
list and it will not enter the while 

38
00:02:01.350 --> 00:02:05.630
loop here temp equal to 1024 which is not equal 

39
00:02:05.630 --> 00:02:09.800
to null so ender the loop now check If the data 

40
00:02:09.810 --> 00:02:14.590
at addressed 1024 is the key so compared 10 with 

41
00:02:14.590 --> 00:02:15.220
30 

42
00:02:15.230 --> 00:02:16.810
But it is not the same 

43
00:02:16.820 --> 00:02:21.410
So if fails jump to the next statment we have temp 

44
00:02:21.420 --> 00:02:25.310
equal to temp next so temp now points to the second 

45
00:02:25.310 --> 00:02:28.820
node again The while condition is check and temp equal 

46
00:02:28.820 --> 00:02:31.750
to 2024 which is not equal to null 

47
00:02:31.760 --> 00:02:33.400
So the condition is true 

48
00:02:33.410 --> 00:02:37.580
So enter the while loop now compare 20 with 30 

49
00:02:37.700 --> 00:02:39.100
but it's not the same 

50
00:02:39.110 --> 00:02:42.210
So if fails again so it jumps to the next 

51
00:02:42.210 --> 00:02:46.150
statement and temp will now point to the next node 

52
00:02:46.160 --> 00:02:51.630
at 3024 again check If temp has become null and 

53
00:02:51.640 --> 00:02:55.490
it has not so enter the while loop and check 

54
00:02:55.500 --> 00:02:59.330
If data at 3024 is equal to the key so 

55
00:02:59.330 --> 00:03:02.840
we compared data 30 and the key 30 both are 

56
00:03:02.840 --> 00:03:03.480
the same 

57
00:03:03.540 --> 00:03:07.190
So if returns true so it will return true which 

58
00:03:07.190 --> 00:03:09.400
means key is found 

59
00:03:09.700 --> 00:03:11.220
So this is how it works 

60
00:03:11.390 --> 00:03:14.730
let us see Another case were the search key is not 

61
00:03:14.730 --> 00:03:19.110
found So let the key to be searched Be 100 1st 

62
00:03:19.120 --> 00:03:22.170
the head address which is 1024 is stored 

63
00:03:22.180 --> 00:03:25.870
to temp and we have while condition temp not equal 

64
00:03:25.870 --> 00:03:26.350
to null 

65
00:03:26.740 --> 00:03:29.990
And here temp is equal 2024 which is not 

66
00:03:29.990 --> 00:03:30.740
equal to null 

67
00:03:31.020 --> 00:03:32.520
So the condition is true 

68
00:03:32.530 --> 00:03:34.710
So enter the while loop now check 

69
00:03:34.720 --> 00:03:38.740
If the data at address 1024 is the key so 

70
00:03:38.740 --> 00:03:40.650
compared 10 with 100 

71
00:03:40.820 --> 00:03:45.280
But the comparison returns falls so if conditioned fails so 

72
00:03:45.280 --> 00:03:47.650
the control jumps to the next statement 

73
00:03:47.740 --> 00:03:51.540
Temp equal to temp next so temp will now point to 

74
00:03:51.540 --> 00:03:55.540
the second node again we have temp equal to 2024 

75
00:03:55.540 --> 00:03:57.250
which is not equal to null 

76
00:03:57.480 --> 00:03:59.390
So the while condition is true 

77
00:03:59.560 --> 00:04:02.060
So it will enter the loop and check if the 

78
00:04:02.060 --> 00:04:04.870
second node is holding the key 100 

79
00:04:04.910 --> 00:04:08.660
But the comparison returns a false and if condition has 

80
00:04:08.660 --> 00:04:12.080
failed so temp will now point to the next node 

81
00:04:12.090 --> 00:04:17.660
at 3024 again checked The while condition 3024 is not 

82
00:04:17.670 --> 00:04:20.770
equal to null So enter the loop and compared the 

83
00:04:20.770 --> 00:04:23.490
data at 3024 the key 

84
00:04:23.540 --> 00:04:26.700
But we have 30 and the key is 100 which are 

85
00:04:26.700 --> 00:04:27.650
not the same 

86
00:04:27.740 --> 00:04:31.320
So if condition fails again so jump to the next 

87
00:04:31.320 --> 00:04:35.540
statement Temp equal to temp next so temp will now point 

88
00:04:35.540 --> 00:04:39.460
to the fourth node at 4024 and again check 

89
00:04:39.460 --> 00:04:40.490
the while condition 

90
00:04:40.500 --> 00:04:42.420
And it is true so check 

91
00:04:42.430 --> 00:04:45.060
If the data at this node is equal to the 

92
00:04:45.060 --> 00:04:47.960
key and it is not so we need to move 

93
00:04:47.970 --> 00:04:51.360
temp to next node and temp next is equal to 

94
00:04:51.360 --> 00:04:53.690
null here which will be stored in temp 

95
00:04:53.690 --> 00:04:55.790
now again in next iteration 

96
00:04:55.790 --> 00:04:58.610
When the while condition is checked it fails 

97
00:04:58.680 --> 00:05:02.000
Since temp is equal to null so it will return 

98
00:05:02.000 --> 00:05:05.100
false which means the key is not found 

99
00:05:05.320 --> 00:05:06.140
So that's it 

100
00:05:06.420 --> 00:05:09.270
Now let us talk about the time complexity the 

101
00:05:09.270 --> 00:05:12.250
best cases when the search key is present in the 

102
00:05:12.250 --> 00:05:13.650
first node itself 

103
00:05:13.940 --> 00:05:17.240
So while loop need to execute only one so the 

104
00:05:17.240 --> 00:05:20.540
best case time complexity will be order of one 

105
00:05:20.630 --> 00:05:23.660
The worst cases when the search key is present in 

106
00:05:23.660 --> 00:05:24.580
the last node 

107
00:05:24.820 --> 00:05:27.910
So the while loop will have n iterations if we 

108
00:05:27.910 --> 00:05:31.770
have n nodes so the worst case time complexity will be 

109
00:05:31.780 --> 00:05:32.750
order of n. 

