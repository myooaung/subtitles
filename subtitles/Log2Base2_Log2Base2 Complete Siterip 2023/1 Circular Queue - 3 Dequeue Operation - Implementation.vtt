WEBVTT

1
00:00:00.040 --> 00:00:00.940
in this video 

2
00:00:01.060 --> 00:00:02.990
Let us learn how to perform the dequeue 

3
00:00:02.990 --> 00:00:06.150
operation in a circlar queue Let us take 

4
00:00:06.160 --> 00:00:10.030
this samples circular queue the dequeue operation will return the 

5
00:00:10.040 --> 00:00:12.450
elements in first in first out principle 

6
00:00:13.040 --> 00:00:15.750
Now let us perform the dequeue operation 

7
00:00:16.240 --> 00:00:18.990
The front  pointer will point to the first inserted 

8
00:00:19.000 --> 00:00:23.330
element Here it is pointing to the number 10 so 

9
00:00:23.330 --> 00:00:26.740
back up the value 10th and performed the circular increment 

10
00:00:26.750 --> 00:00:30.510
on front pointer of that is front equal to front 

11
00:00:30.510 --> 00:00:34.860
plus one mod size here the value of front is zero 

12
00:00:35.010 --> 00:00:36.550
and value size is three 

13
00:00:37.140 --> 00:00:40.410
So it will become zero plus one mod three which 

14
00:00:40.410 --> 00:00:42.350
is one mod three that is one 

15
00:00:43.040 --> 00:00:46.470
Now the front pointer is move to the next index 

16
00:00:47.040 --> 00:00:50.960
It indirectly means that the element 10 is removed from the 

17
00:00:50.960 --> 00:00:51.350
queue 

18
00:00:51.740 --> 00:00:54.310
So now we can return the backup value 10 

19
00:00:54.650 --> 00:00:55.280
That's it 

20
00:00:55.940 --> 00:00:59.970
Now let us perform one more  dequeue operation Now the value 

21
00:00:59.970 --> 00:01:02.840
front pointer is one and it is pointing to the 

22
00:01:02.840 --> 00:01:03.750
element 20 

23
00:01:04.240 --> 00:01:07.980
So backup the value 20 and perform circular increment 

24
00:01:07.990 --> 00:01:11.610
on the front pointer here the value front is  

25
00:01:11.610 --> 00:01:13.830
one so it will become one plus 

26
00:01:13.830 --> 00:01:16.620
One mod three which is two mod three that is 

27
00:01:16.620 --> 00:01:16.950
two 

28
00:01:17.640 --> 00:01:20.440
Now the front pointer is move to the next index 

29
00:01:20.840 --> 00:01:24.650
It indirectly means that element twenty is removed from the queue 

30
00:01:25.140 --> 00:01:28.650
So finally we can return the backedup the value 20 

31
00:01:29.140 --> 00:01:29.620
here 

32
00:01:29.630 --> 00:01:31.620
One important thing to notice 

33
00:01:31.870 --> 00:01:35.380
We had only one element 20 in the queue and 

34
00:01:35.380 --> 00:01:36.270
we dequeued it 

35
00:01:36.520 --> 00:01:38.290
Which means the queue is empty 

36
00:01:38.290 --> 00:01:38.650
Now

37
00:01:39.140 --> 00:01:41.950
So for the last element case we need to reset 

38
00:01:41.950 --> 00:01:44.460
the values of front and rear to minus one 

39
00:01:45.040 --> 00:01:47.340
And what will be the condition to check The last 

40
00:01:47.340 --> 00:01:51.650
element if the front  And rear Pointers point to the same index 

41
00:01:51.710 --> 00:01:54.630
We can say there is only one element present in 

42
00:01:54.630 --> 00:01:57.350
the queue and that will be the last element 

43
00:01:57.690 --> 00:02:00.320
So if front is equal to rear we need to 

44
00:02:00.320 --> 00:02:03.300
reset the values of front and rear to minus one 

45
00:02:03.570 --> 00:02:06.860
That's it the logic of dequeue operation is very 

46
00:02:06.860 --> 00:02:07.450
simple 

47
00:02:07.540 --> 00:02:08.650
First check 

48
00:02:08.660 --> 00:02:11.430
If the queue is empty or not if it is 

49
00:02:11.440 --> 00:02:14.680
empty we can just written if the value of front 

50
00:02:14.680 --> 00:02:17.430
equal to minus one we can say that the queue 

51
00:02:17.430 --> 00:02:18.250
is empty 

52
00:02:18.640 --> 00:02:21.930
If the queue is not empty first back up the 

53
00:02:21.940 --> 00:02:25.170
array of front value in some temporary variable 

54
00:02:25.650 --> 00:02:29.090
Next perform a circular increments on front pointer 

55
00:02:29.090 --> 00:02:33.180
and lastly returned the backed up value here 

56
00:02:33.190 --> 00:02:34.840
We need to consider one more case 

57
00:02:34.840 --> 00:02:37.270
Also that is for the last element 

58
00:02:37.280 --> 00:02:40.270
We need to reset the front and rear pointer to minus 

59
00:02:40.270 --> 00:02:40.570
one 

60
00:02:40.930 --> 00:02:44.630
That's it Now let us quickly implement the logic for 

61
00:02:44.640 --> 00:02:46.140
isQueue empty function 

62
00:02:46.400 --> 00:02:49.280
This function will check whether the queue is empty or 

63
00:02:49.280 --> 00:02:49.710
not 

64
00:02:49.920 --> 00:02:52.180
If it is empty it will return true 

65
00:02:52.370 --> 00:02:54.250
Otherwise it will return false 

66
00:02:54.390 --> 00:02:57.900
So let us write a function named isQueue empty with return 

67
00:02:57.900 --> 00:02:58.870
type as bool 

68
00:02:59.260 --> 00:03:00.890
If front equal to minus one 

69
00:03:00.900 --> 00:03:02.050
The queue is empty 

70
00:03:02.140 --> 00:03:05.490
So write if front equal to equal to minus one 

71
00:03:05.500 --> 00:03:06.290
return true 

72
00:03:06.670 --> 00:03:10.750
Otherwise we need to return false so write return false 

73
00:03:11.140 --> 00:03:13.910
And that's it this is all about a circular Queue and its operations. 

