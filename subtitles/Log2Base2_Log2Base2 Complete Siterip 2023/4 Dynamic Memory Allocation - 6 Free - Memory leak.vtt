WEBVTT

1
00:00:00.740 --> 00:00:01.430
hi friends 

2
00:00:01.440 --> 00:00:03.880
In this video we are going to discuss about memory 

3
00:00:03.880 --> 00:00:05.530
leak and the function free.

4
00:00:11.240 --> 00:00:13.770
So in the previous lessons we have learned that we can

5
00:00:13.780 --> 00:00:17.700
allocate memory dynamically using malloc and calloc and 

6
00:00:17.700 --> 00:00:20.189
we get the memory located in the heap section and 

7
00:00:20.190 --> 00:00:22.630
then we use it now after our use 

8
00:00:22.640 --> 00:00:25.750
What happens if we do not deallocate it? In that 

9
00:00:25.760 --> 00:00:29.240
case the allocated memory will reside there forever which cannot 

10
00:00:29.240 --> 00:00:31.180
be used by other processes.

11
00:00:31.440 --> 00:00:33.809
So if we do not deallocate the memory then

12
00:00:33.820 --> 00:00:36.940
it will reduce the amount of available memory and reduces 

13
00:00:36.940 --> 00:00:38.270
the system performance. 

14
00:00:38.440 --> 00:00:40.709
This condition is known as memory leak 

15
00:00:40.720 --> 00:00:43.890
Let's assume the total available memory in heap as K 

16
00:00:43.890 --> 00:00:44.440
bytes 

17
00:00:44.620 --> 00:00:47.600
Now if we allocate N bytes of memory dynamically it 

18
00:00:47.600 --> 00:00:49.850
will consume N bytes from the heap section 

19
00:00:50.170 --> 00:00:54.380
Now suppose N bytes of memory is allocated M times so 

20
00:00:54.390 --> 00:00:57.320
a total of M x N bytes will be used 

21
00:00:57.320 --> 00:01:00.160
from the heap section and at some point of time 

22
00:01:00.290 --> 00:01:02.290
M x N can exceed K 

23
00:01:02.740 --> 00:01:03.860
That is the whole heap 

24
00:01:03.860 --> 00:01:06.530
Memory will be consumed by the program and now there 

25
00:01:06.530 --> 00:01:09.590
is no more available memory which will result in system 

26
00:01:09.590 --> 00:01:13.510
crash. For an example consider this piece of code here 

27
00:01:13.510 --> 00:01:16.980
we're allocating four bytes of memory dynamically and it is 

28
00:01:16.980 --> 00:01:20.610
inside while(true) So it will run infinite times 

29
00:01:20.770 --> 00:01:23.290
That is it is allocating four bytes for infinite

30
00:01:23.290 --> 00:01:24.690
 number of times 

31
00:01:24.840 --> 00:01:27.250
So at a point of time heap will definitely run 

32
00:01:27.250 --> 00:01:30.500
out of available memory which will result in system crash 

33
00:01:30.510 --> 00:01:31.750
or system shutdown. 

34
00:01:32.040 --> 00:01:33.370
So that is memory leak 

35
00:01:33.380 --> 00:01:36.030
And what is the solution to this problem? For that 

36
00:01:36.040 --> 00:01:38.910
we have an inbuilt function called free which will  

37
00:01:38.910 --> 00:01:41.050
deallocate the memory which we allocated 

38
00:01:41.440 --> 00:01:44.190
There is only one argument for the function free which 

39
00:01:44.190 --> 00:01:46.550
is the pointer to the memory block which we need to 

40
00:01:46.550 --> 00:01:47.350
deallocate.

41
00:01:47.840 --> 00:01:50.930
Now to understand the working of this function, consider this 

42
00:01:50.930 --> 00:01:54.520
piece of code here. Firstly we are creating an integer pointer

43
00:01:54.520 --> 00:01:57.790
ptr and next we have a dynamic memory allocation

44
00:01:57.790 --> 00:02:01.039
statement. Hope now you all know how malloc and  

45
00:02:01.040 --> 00:02:01.890
calloc works

46
00:02:02.040 --> 00:02:05.230
So using this line of code we are dynamically allocating 

47
00:02:05.230 --> 00:02:07.060
5 x 4 bytes using malloc.

48
00:02:07.060 --> 00:02:10.170
So a total of 20 bytes and its base address 

49
00:02:10.170 --> 00:02:11.550
is returned to ptr. 

50
00:02:12.040 --> 00:02:16.010
Now we are adding values 10, 20, 30, 40 and 50 

51
00:02:16.010 --> 00:02:17.350
to these five blocks.

52
00:02:17.650 --> 00:02:20.170
Once we are done with the allocated memory we should 

53
00:02:20.170 --> 00:02:23.230
deallocate it. Otherwise memory leak will occur 

54
00:02:23.540 --> 00:02:27.000
so use function free by passing pointer to the memory block 

55
00:02:27.010 --> 00:02:27.840
We need to deallocate

56
00:02:27.840 --> 00:02:32.180
 so write free(ptr) which will deallocate 

57
00:02:32.180 --> 00:02:34.049
the memory pointed by ptr

58
00:02:34.140 --> 00:02:37.370
So it is again made available and after program executes 

59
00:02:37.370 --> 00:02:40.609
the heap section will regain its original available size 

60
00:02:40.940 --> 00:02:43.900
Now what happens if we call free again by passing the 

61
00:02:43.900 --> 00:02:51.080
same pointer? Then the behaviour is undefined. So that's all and thank you for watching this video.

