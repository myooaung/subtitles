WEBVTT

1
00:00:00.240 --> 00:00:03.610
So in the implementation, we can write a function  

2
00:00:03.610 --> 00:00:08.160
has loop by passing the head of the linked list. Now declare

3
00:00:08.160 --> 00:00:12.240
the pointers slow and fast and make both point to 

4
00:00:12.240 --> 00:00:13.750
head of the linked list. 

5
00:00:14.240 --> 00:00:17.730
Now we need to traverse the list till slow or 

6
00:00:17.730 --> 00:00:19.890
fast reach the last node or null.

7
00:00:20.940 --> 00:00:25.100
So write while slow not equal to null and fast 

8
00:00:25.100 --> 00:00:28.270
not equal to null and fast next not equal to null.

9
00:00:28.590 --> 00:00:31.800
And since we are advancing the fast pointer by two 

10
00:00:31.800 --> 00:00:35.810
positions, we are not only checking that node but also 

11
00:00:35.810 --> 00:00:38.750
it's next node is available or not.

12
00:00:39.240 --> 00:00:42.610
So that's why we are giving this condition fast 

13
00:00:42.610 --> 00:00:44.100
next not equal to null

14
00:00:44.640 --> 00:00:48.610
Now in each iteration of this loop, slow should move 

15
00:00:48.610 --> 00:00:53.580
one time and fast should move two times. So write slow 

16
00:00:53.580 --> 00:00:56.810
equal to slow next and fast equal to fast next next

17
00:00:56.810 --> 00:01:01.560
And at any point if slow and fast 

18
00:01:01.560 --> 00:01:05.170
points to the same node then we can understand that 

19
00:01:05.180 --> 00:01:06.480
a loop is present here. 

20
00:01:06.480 --> 00:01:11.090
 so write if slow equal to fast, then return 1

21
00:01:11.090 --> 00:01:13.650
 as a loop is present here 

22
00:01:14.040 --> 00:01:18.400
And if this while loop is terminated, it means there was 

23
00:01:18.410 --> 00:01:20.800
no loop present in the linked list. So return 0.

