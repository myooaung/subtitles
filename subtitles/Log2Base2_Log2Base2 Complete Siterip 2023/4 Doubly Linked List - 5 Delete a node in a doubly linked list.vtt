WEBVTT

1
00:00:00.840 --> 00:00:03.250
in this video we are going to learn how to 

2
00:00:03.250 --> 00:00:06.250
delete the given node from a doubly linked list 

3
00:00:07.040 --> 00:00:09.710
So the node to be deleted can be the head 

4
00:00:09.710 --> 00:00:13.540
node or the last node or any intermediate node 

5
00:00:13.550 --> 00:00:16.710
We are going to discuss each case first 

6
00:00:16.720 --> 00:00:19.160
Let us see how to delete the head node 

7
00:00:19.170 --> 00:00:22.510
So we have a doubly linked list here with nodes 

8
00:00:22.510 --> 00:00:25.240
with values 10 20 and 30 

9
00:00:25.340 --> 00:00:27.660
Now to delete 10 which is the head 

10
00:00:27.670 --> 00:00:29.100
What We have to do it 

11
00:00:29.110 --> 00:00:32.940
We need to create a temporary variable pointing the head 

12
00:00:33.080 --> 00:00:35.680
And now we need to make the second node the 

13
00:00:35.680 --> 00:00:37.020
head of the list 

14
00:00:37.030 --> 00:00:41.120
So make the new head prev point null So the 

15
00:00:41.120 --> 00:00:42.420
link is deleted 

16
00:00:42.420 --> 00:00:45.550
now the node with temp is not a part 

17
00:00:45.550 --> 00:00:46.750
of the linked list 

18
00:00:47.040 --> 00:00:49.450
So this is how we can delete a head node 

19
00:00:49.940 --> 00:00:52.450
Now let us see the code to implement this

20
00:00:52.750 --> 00:00:56.450
So we have a function delete to perform this task 

21
00:00:56.480 --> 00:00:59.250
So into the function we passed the head of the 

22
00:00:59.250 --> 00:01:01.670
linked list and the Key to be deleted 

23
00:01:01.870 --> 00:01:03.390
So here we have the key 

24
00:01:03.390 --> 00:01:06.870
Ten first we will check if the linked list is 

25
00:01:06.880 --> 00:01:07.550
empty 

26
00:01:07.840 --> 00:01:11.010
If so the deletion is not possible since there are 

27
00:01:11.010 --> 00:01:12.730
no nodes to be deleted 

28
00:01:13.040 --> 00:01:17.060
So we have if head equal to null then return 

29
00:01:17.070 --> 00:01:20.710
But here it is not so declared temp pointing to 

30
00:01:20.710 --> 00:01:21.250
head 

31
00:01:21.640 --> 00:01:24.150
Now we have temp pointing the head node 

32
00:01:24.740 --> 00:01:27.720
Now we have to find the node to be 

33
00:01:27.720 --> 00:01:28.520
deleted 

34
00:01:28.780 --> 00:01:31.510
We only know the key to be deleted which is 

35
00:01:31.510 --> 00:01:31.980
10 

36
00:01:31.990 --> 00:01:34.300
It could be present in any nodes 

37
00:01:34.300 --> 00:01:35.200
Data part 

38
00:01:35.360 --> 00:01:39.350
So first we have to find that particular node so 

39
00:01:39.350 --> 00:01:40.450
we can use a

40
00:01:40.450 --> 00:01:41.350
while loop for that 

41
00:01:41.540 --> 00:01:42.170
We have to 

42
00:01:42.170 --> 00:01:44.980
iterate over the linked list till we find the 

43
00:01:44.980 --> 00:01:45.610
key 

44
00:01:45.620 --> 00:01:49.230
That is when temp dot data equal to key or 

45
00:01:49.230 --> 00:01:51.440
till we reached the end of the list 

46
00:01:51.450 --> 00:01:53.810
That is when temp becomes null 

47
00:01:53.840 --> 00:01:58.280
So we have while tempt not equal to null and 

48
00:01:58.290 --> 00:02:00.980
temp data not equal to key 

49
00:02:01.140 --> 00:02:04.280
So after the loop is terminated we will have our 

50
00:02:04.280 --> 00:02:06.550
required node pointed by temp 

51
00:02:06.790 --> 00:02:10.950
So in first iteration temp is pointing the head node 

52
00:02:10.960 --> 00:02:15.170
and temp data equal to key So the condition fails 

53
00:02:15.180 --> 00:02:18.020
Since we have our key in the current node that 

54
00:02:18.020 --> 00:02:19.270
is the first node 

55
00:02:19.350 --> 00:02:22.140
So control comes out and now in temp 

56
00:02:22.150 --> 00:02:25.610
We have the node to be deleted if temp equal 

57
00:02:25.610 --> 00:02:26.150
to null 

58
00:02:26.160 --> 00:02:29.360
It means the node to be deleted is not present 

59
00:02:29.370 --> 00:02:30.560
in this list 

60
00:02:30.570 --> 00:02:34.430
So check If temp equal to null then print key 

61
00:02:34.430 --> 00:02:35.560
is not found 

62
00:02:35.570 --> 00:02:38.150
But here it is not so Now the node to 

63
00:02:38.150 --> 00:02:41.210
be deleted is found And now it is the time 

64
00:02:41.220 --> 00:02:43.920
to check if it is the head or the last 

65
00:02:43.920 --> 00:02:46.590
node or any intermediate node 

66
00:02:46.600 --> 00:02:50.120
So first check if temp is equal to head And 

67
00:02:50.120 --> 00:02:51.120
here it is 

68
00:02:51.130 --> 00:02:54.050
So first make the second node be head 

69
00:02:54.340 --> 00:02:58.230
So we have head equal to head dot next now 

70
00:02:58.240 --> 00:03:01.920
removed the link or the Connexion So make new head 

71
00:03:01.920 --> 00:03:06.450
prev point to null so write head dot prev equal to 

72
00:03:06.450 --> 00:03:10.030
null so this first node is deleted from the list 

73
00:03:10.040 --> 00:03:12.660
So that's it that's how we delete the head node 

74
00:03:12.670 --> 00:03:14.140
of a doubly linked list 

75
00:03:14.190 --> 00:03:16.850
Now let us see the intermediate node case 

76
00:03:16.940 --> 00:03:19.760
So we have this linked list here and suppose we 

77
00:03:19.760 --> 00:03:22.680
need to delete the node with value 20 here 

78
00:03:22.690 --> 00:03:25.810
So first Iterate the list to find that particular 

79
00:03:25.810 --> 00:03:28.800
node and it is found now and is pointed by 

80
00:03:28.800 --> 00:03:31.490
temp and it is an intermediate node 

81
00:03:31.580 --> 00:03:33.840
So what we have to do is we have to 

82
00:03:33.850 --> 00:03:36.980
cut the links of this node from the list so 

83
00:03:36.980 --> 00:03:40.250
we need to connect temp's previous node and temp's 

84
00:03:40.260 --> 00:03:41.350
Next node 

85
00:03:41.540 --> 00:03:42.740
So make temp's 

86
00:03:42.740 --> 00:03:45.590
Previous nodes next pointing temp's 

87
00:03:45.600 --> 00:03:47.320
Next node and temp's 

88
00:03:47.330 --> 00:03:50.800
Next nodes prev pointing temp's Previous node 

89
00:03:50.810 --> 00:03:54.300
Now this particular node is deleted from the list and 

90
00:03:54.300 --> 00:03:55.910
that is how it is done 

91
00:03:56.050 --> 00:03:59.190
Now let us see the code to implement this here 

92
00:03:59.200 --> 00:04:02.480
let us delete the key 20 1st we have to follow 

93
00:04:02.480 --> 00:04:03.550
the same steps 

94
00:04:03.640 --> 00:04:04.500
So first check 

95
00:04:04.510 --> 00:04:06.910
If the linked list the empty but it is not 

96
00:04:07.030 --> 00:04:09.970
so made temp point to head and iterate over 

97
00:04:09.970 --> 00:04:12.410
the list to find the node to be deleted 

98
00:04:12.650 --> 00:04:13.150
So first 

99
00:04:13.150 --> 00:04:17.020
temp equal to 1000 not equal to null and temp data  

100
00:04:17.020 --> 00:04:19.090
equal to 10 not equal to 20 

101
00:04:19.100 --> 00:04:21.950
So go inside and move temp to next node 

102
00:04:22.340 --> 00:04:25.440
So we have temp equal to tempt dot Next 

103
00:04:25.750 --> 00:04:28.530
Now we have temp equal to 2000 and it is 

104
00:04:28.530 --> 00:04:31.750
not equal to null and temp data equal to 20 

105
00:04:31.760 --> 00:04:33.150
which is equal to key 

106
00:04:33.160 --> 00:04:36.330
So condition fails and control comes out of the while 

107
00:04:36.330 --> 00:04:36.620
loop

108
00:04:36.770 --> 00:04:38.900
So first check if it is equal to null 

109
00:04:39.130 --> 00:04:40.700
But it is not so 

110
00:04:40.700 --> 00:04:43.500
The node to be deleted is found and it is 

111
00:04:43.500 --> 00:04:46.750
pointed by temp now check if it is head 

112
00:04:46.940 --> 00:04:48.440
But it is not so 

113
00:04:48.440 --> 00:04:48.760
check 

114
00:04:48.770 --> 00:04:51.380
If it is the last node and for the last 

115
00:04:51.380 --> 00:04:53.980
node it's next will be pointing null 

116
00:04:54.140 --> 00:04:57.540
So write if temp next equal to null 

117
00:04:57.730 --> 00:04:59.250
But it also fails 

118
00:04:59.640 --> 00:05:02.660
So we have the else part for the intermediate node 

119
00:05:02.670 --> 00:05:03.250
case 

120
00:05:03.840 --> 00:05:06.940
Here we will remove this node temp from the linked 

121
00:05:06.940 --> 00:05:09.790
list and temp is the node to be deleted 

122
00:05:09.870 --> 00:05:13.600
So make temp's previous nodes next pointing temp's 

123
00:05:13.610 --> 00:05:14.390
Next node 

124
00:05:14.530 --> 00:05:18.900
So write temp dot dot next equal to temp dot 

125
00:05:18.900 --> 00:05:19.450
Next 

126
00:05:20.040 --> 00:05:21.970
Now make temps next 

127
00:05:21.970 --> 00:05:25.020
nodes prev pointing to temps previous node 

128
00:05:25.120 --> 00:05:29.020
So write temp dot next dot prev equal to temp 

129
00:05:29.020 --> 00:05:32.430
dot prev Now the node is deleted from the list 

130
00:05:32.500 --> 00:05:35.130
Now let us see the case where we have to delete 

131
00:05:35.130 --> 00:05:37.580
the last node of a doubly linked list 

132
00:05:37.750 --> 00:05:40.630
So we have this list here and suppose we need 

133
00:05:40.630 --> 00:05:43.150
to delete the node with value 30 

134
00:05:43.340 --> 00:05:46.250
So first itereate the list to find that node 

135
00:05:46.640 --> 00:05:49.930
it is found now and is pointed by temp and 

136
00:05:49.930 --> 00:05:51.820
we can say it is the last node 

137
00:05:51.940 --> 00:05:54.320
So what we have to do is we have to 

138
00:05:54.320 --> 00:05:57.540
remove the link of this node from the list so 

139
00:05:57.540 --> 00:06:00.990
make its previous node the last node by making its 

140
00:06:00.990 --> 00:06:05.490
previous nodes next null and thus the last node can 

141
00:06:05.490 --> 00:06:07.010
be removed from the list 

142
00:06:07.190 --> 00:06:08.670
So that is how it is done 

143
00:06:08.830 --> 00:06:11.260
Now let us see the code to implement it 

144
00:06:11.380 --> 00:06:12.110
Here 

145
00:06:12.120 --> 00:06:14.460
The key to be deleted is 30 

146
00:06:14.550 --> 00:06:16.840
So we follow the same procedure check 

147
00:06:16.850 --> 00:06:19.710
If the linked list is empty but it is not 

148
00:06:19.850 --> 00:06:20.070
so 

149
00:06:20.070 --> 00:06:23.360
Make temp point to head and iterate over the 

150
00:06:23.360 --> 00:06:25.840
list to find the node to be deleted 

151
00:06:26.040 --> 00:06:29.520
So First temp equal to 1000 not equal to null and 

152
00:06:29.530 --> 00:06:32.030
temp dot data equal to 10 and not equal to 

153
00:06:32.030 --> 00:06:32.170


154
00:06:32.170 --> 00:06:33.290
Key 30 

155
00:06:33.410 --> 00:06:36.650
So go inside and move temp to next node at 

156
00:06:36.650 --> 00:06:39.950
In the next iteration we have temp equal to 2000 

157
00:06:39.960 --> 00:06:42.820
and not equal to null and tempt data equal to 

158
00:06:42.820 --> 00:06:45.150
20 and not equal to key 30 

159
00:06:45.440 --> 00:06:48.350
So go inside and move temp to next node 

160
00:06:48.670 --> 00:06:51.660
Now we have temp equal to 3000 and again it 

161
00:06:51.660 --> 00:06:52.840
is not equal to null 

162
00:06:53.180 --> 00:06:56.070
And we have temp dot data equal to 30 which 

163
00:06:56.070 --> 00:06:59.360
is equal to key So this condition will fail and 

164
00:06:59.360 --> 00:07:02.010
control comes out of the while loop now 

165
00:07:02.010 --> 00:07:02.530
check 

166
00:07:02.540 --> 00:07:05.330
If it is null but it is not so 

167
00:07:05.330 --> 00:07:08.750
We have temp pointing to the node to be deleted 

168
00:07:09.240 --> 00:07:11.050
So check if it is the head 

169
00:07:11.240 --> 00:07:13.230
But it is not now check 

170
00:07:13.240 --> 00:07:15.770
If it is the last node and we know for 

171
00:07:15.770 --> 00:07:19.550
last node it's next will be null so right if 

172
00:07:19.560 --> 00:07:21.850
temp dot next equal to null 

173
00:07:22.080 --> 00:07:25.390
And it is true here which means the node to 

174
00:07:25.390 --> 00:07:27.950
be deleted is the last node here 

175
00:07:28.140 --> 00:07:31.740
So first make its previous node the last node for 

176
00:07:31.740 --> 00:07:34.750
that the previous nodes next should point to null 

177
00:07:35.440 --> 00:07:40.260
So write temp dot prev dot next equal to null and 

178
00:07:40.260 --> 00:07:42.800
this is how we can delete the last node from 

179
00:07:42.800 --> 00:07:44.040
a doubly linked list 

180
00:07:44.340 --> 00:07:46.610
Now a let us say another case of deletion 

181
00:07:46.850 --> 00:07:50.290
Let us try to delete key 60 from this doubly 

182
00:07:50.290 --> 00:07:51.050
linked list 

183
00:07:51.440 --> 00:07:54.100
So first we have to iterate over the list to 

184
00:07:54.100 --> 00:07:57.520
find the node with 60 and we won't find it 

185
00:07:57.520 --> 00:08:00.940
because it is not present so temp will reach the 

186
00:08:00.940 --> 00:08:04.350
last node and finally will have the value null 

187
00:08:04.590 --> 00:08:07.700
So let us see the code here first check if 

188
00:08:07.700 --> 00:08:10.620
the list is empty but it is not so set 

189
00:08:10.660 --> 00:08:13.260
temp equal to head and iterate over the list 

190
00:08:13.510 --> 00:08:17.670
So first Temp will be equal to 1000 and not equal to null and tempt 

191
00:08:17.670 --> 00:08:20.030
data will be 10 and not 60 

192
00:08:20.150 --> 00:08:22.980
So go inside move temp to next node and in 

193
00:08:22.980 --> 00:08:26.300
next iteration temp equal to 2000 and data equal to 

194
00:08:26.300 --> 00:08:28.850
20 again It is true 

195
00:08:28.860 --> 00:08:31.750
So go inside and moved temp to next node 

196
00:08:32.040 --> 00:08:35.550
And in next iteration we have temp equal to 3000 

197
00:08:35.740 --> 00:08:38.050
and temp data will be equal to 30 

198
00:08:38.440 --> 00:08:40.190
So again the condition is true 

199
00:08:40.200 --> 00:08:43.650
So go inside and moved temp to next node and 

200
00:08:43.660 --> 00:08:46.470
the next iteration We have temp equal to null so 

201
00:08:46.470 --> 00:08:49.460
the condition will fail and control comes out of while 

202
00:08:49.710 --> 00:08:53.390
now when checking if temp equal to null it is true 

203
00:08:53.400 --> 00:08:56.750
So the node to be deleted is not present so 

204
00:08:56.750 --> 00:08:59.820
print key is not found So these are the three 

205
00:08:59.820 --> 00:09:02.820
cases of deleting a node from a doubly linked list 

206
00:09:02.920 --> 00:09:05.300
If the node to be deleted is the head then 

207
00:09:05.300 --> 00:09:08.560
make the second node to be head and make the previous link 

208
00:09:08.560 --> 00:09:09.850
of new head null 

209
00:09:10.640 --> 00:09:13.060
And if the node to be deleted is the last 

210
00:09:13.060 --> 00:09:13.420
node 

211
00:09:13.670 --> 00:09:16.720
Then make the second last node the last node by 

212
00:09:16.720 --> 00:09:18.570
making its next equal to null 

213
00:09:19.010 --> 00:09:22.490
And if it isn't intermediate node then make its previous 

214
00:09:22.490 --> 00:09:25.960
node and next not connected and removed this node from 

215
00:09:25.960 --> 00:09:26.680
the list 

216
00:09:26.740 --> 00:09:29.550
So now let us discuss about the time complexity of 

217
00:09:29.560 --> 00:09:30.650
this operation 

218
00:09:30.940 --> 00:09:34.530
Actually the time complexity of deleting the node is order 

219
00:09:34.530 --> 00:09:35.150
of one 

220
00:09:35.340 --> 00:09:37.820
But it is the time taken to find the node 

221
00:09:37.820 --> 00:09:41.110
first so the best case time complexity will be 

222
00:09:41.110 --> 00:09:44.170
Then the node to be deleted is the head of 

223
00:09:44.180 --> 00:09:45.050
the linked list 

224
00:09:45.440 --> 00:09:48.240
So it will be order of one and the worst 

225
00:09:48.240 --> 00:09:51.100
case will be when the node to be deleted is 

226
00:09:51.100 --> 00:09:53.310
the last node of the linked list 

227
00:09:53.390 --> 00:09:56.190
Then you need to traverse the whole linked list to 

228
00:09:56.190 --> 00:09:58.110
find it and then deleted 

229
00:09:58.360 --> 00:10:01.580
So if you have n nodes then the worst case time is order of n.

