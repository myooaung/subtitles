WEBVTT

1
00:00:00.040 --> 00:00:00.850
Hello Friends

2
00:00:00.860 --> 00:00:04.510
In this video, let us discuss about the implementation of 

3
00:00:04.520 --> 00:00:09.400
Finding Nth Fibonacci using top-down approach with memoization. 

4
00:00:15.040 --> 00:00:18.050
So as we have discussed in the previous video, the 

5
00:00:18.050 --> 00:00:22.750
algorithm to implement the top down approach with memoization is,

6
00:00:23.140 --> 00:00:27.110
First declaring an array to store the subproblem results. 

7
00:00:27.460 --> 00:00:32.810
Then initializing the the array to -1. Here -1

8
00:00:32.820 --> 00:00:37.150
indicates that, the sub problem solution needs to be computed. 

9
00:00:37.740 --> 00:00:42.130
Now before making any recursive call check whether the sub 

10
00:00:42.130 --> 00:00:45.940
problem needs to be solved. That is if it is 

11
00:00:45.950 --> 00:00:49.990
already solved, we only need to take the result from there.

12
00:00:49.590 --> 00:00:50.950
 

13
00:00:50.360 --> 00:00:52.950
Only otherwise we need to compute it 

14
00:00:53.540 --> 00:00:53.810


15
00:00:53.540 --> 00:00:56.950
So check if result[N] equal to -1,

16
00:00:57.440 --> 00:01:01.050
if yes it needs to be solved. So compute it  

17
00:01:01.060 --> 00:01:05.480
and store it in result. Else if it is already 

18
00:01:05.480 --> 00:01:10.300
solved, just return the already computed result. 

19
00:01:10.300 --> 00:01:11.350
Let's see how it works.

20
00:01:11.940 --> 00:01:14.830
We are going to find fib(4). So in 

21
00:01:14.830 --> 00:01:18.150
this call and N will be equal to four. Check if 

22
00:01:18.150 --> 00:01:21.350
result[4] equal to -1 and it is. 

23
00:01:21.360 --> 00:01:24.670
so we need to compute the result. Now check if 

24
00:01:24.680 --> 00:01:27.290
N is less than or equal to one and it 

25
00:01:27.290 --> 00:01:29.750
is not as N is equal to 4

26
00:01:29.840 --> 00:01:32.790
So else part will be executed here 

27
00:01:32.870 --> 00:01:37.950
Fib(N) is equal to  Fib(N-1) + Fib(N-2)

28
00:01:35.790 --> 00:01:37.950


29
00:01:38.440 --> 00:01:40.550
So we have two recursive calls 

30
00:01:40.940 --> 00:01:44.220
And here the first recursive call fib(N-1)

31
00:01:44.220 --> 00:01:47.340
that is fib(3) will be executed 

32
00:01:47.340 --> 00:01:50.820
first and the next recursive call fib(N-2)

33
00:01:50.820 --> 00:01:54.080
will wait until the first recursive call 

34
00:01:54.080 --> 00:01:55.550
finishes its job. 

35
00:01:56.440 --> 00:02:00.010
So fib(3) will be called and here first we 

36
00:02:00.010 --> 00:02:04.430
will check if result[N] equal to minus -1 and it is.

37
00:02:03.640 --> 00:02:04.430


38
00:02:04.730 --> 00:02:06.760
So we need to compute the result 

39
00:02:07.000 --> 00:02:09.780
So check if N is less than or equal to 1

40
00:02:09.780 --> 00:02:12.220
Since N equal to 3

41
00:02:12.290 --> 00:02:15.780
It fails. So the else part will be executed 

42
00:02:16.100 --> 00:02:18.570
And here again we have two recursive calls 

43
00:02:18.570 --> 00:02:21.060
Fib(N-1) that is Fib(2) 

44
00:02:21.060 --> 00:02:24.800
and Fib(N-2) that is fib(1)

45
00:02:24.810 --> 00:02:27.810
and the first recursive call

46
00:02:27.810 --> 00:02:31.420
fib(2) will be executed first and the second 

47
00:02:31.420 --> 00:02:35.540
recursive call fib(1) will wait until fib(2) finishes

48
00:02:34.660 --> 00:02:35.540


49
00:02:35.550 --> 00:02:36.250
Its job. 

50
00:02:36.640 --> 00:02:40.220
So fib(2) is called and here also, first 

51
00:02:40.220 --> 00:02:43.400
we are checking if result[N] is equal to -1

52
00:02:43.400 --> 00:02:47.430
and it is -1. So it means 

53
00:02:47.440 --> 00:02:49.080
it is not solved yet 

54
00:02:49.090 --> 00:02:51.900
And we need to compute the result. 

55
00:02:51.900 --> 00:02:55.800
So check if N is less than or equal to one and 

56
00:02:55.800 --> 00:02:59.260
since N equal to 2. It fails. So the else 

57
00:02:59.260 --> 00:03:00.650
part will be executed. 

58
00:03:01.340 --> 00:03:04.150
Here we have two recursive calls again 

59
00:03:03.010 --> 00:03:04.150


60
00:03:04.540 --> 00:03:07.650
fib(N-1) and fib(N-2) 

61
00:03:07.310 --> 00:03:07.650


62
00:03:07.740 --> 00:03:11.470
That is fib(1) and fib(0). 

63
00:03:11.470 --> 00:03:15.120
Here also, as we have discussed, the first recursive call

64
00:03:15.120 --> 00:03:18.670
fib(1) will be executed first and the next recursive

65
00:03:18.670 --> 00:03:21.820
call fib(0) will wait until fib(1)

66
00:03:21.830 --> 00:03:26.010
gets completed. So fib(1) will be called. 

67
00:03:26.540 --> 00:03:29.450
And here also we are checking if it is solved 

68
00:03:29.840 --> 00:03:33.450
and we have result[1] is equal to -1

69
00:03:33.100 --> 00:03:33.450
 

70
00:03:34.040 --> 00:03:36.580
So we need to compute the result 

71
00:03:36.580 --> 00:03:40.340
So check if N is less than or equal to one and 

72
00:03:40.350 --> 00:03:44.870
it is. So set result[N] equal to N 

73
00:03:44.870 --> 00:03:48.280
So in the array, result[1] is set to 1.

74
00:03:49.040 --> 00:03:52.400
Now whenever we have fib[1] called, we can 

75
00:03:52.400 --> 00:03:55.830
simply take the result from this array, and we do 

76
00:03:55.830 --> 00:04:00.540
not need to compute it. Now here we have returned 

77
00:04:00.540 --> 00:04:04.140
result[N] so 1 will be returned to calling 

78
00:04:04.140 --> 00:04:05.650
function Fib(2).

79
00:04:06.340 --> 00:04:09.040
Now this recursive call is finished 

80
00:04:09.050 --> 00:04:10.770
It has done its job 

81
00:04:10.780 --> 00:04:14.050
So now the second call fib(0) will be 

82
00:04:14.050 --> 00:04:15.210
executed here 

83
00:04:15.940 --> 00:04:19.230
Here also first we are checking if it is solved 

84
00:04:19.740 --> 00:04:23.510
and we have result[0] equal to -1

85
00:04:23.700 --> 00:04:25.650
So we need to compute the result 

86
00:04:26.140 --> 00:04:29.150
So check if N is less than or equal to one. 

87
00:04:29.540 --> 00:04:33.370
And it is. So set result[N] is equal 

88
00:04:33.370 --> 00:04:36.940
to N. So in the array, result[0] is 

89
00:04:36.940 --> 00:04:41.620
set to zero. And here we have return result[N]

90
00:04:41.630 --> 00:04:46.120
So zero will be returned to the calling function Fib(2)

91
00:04:45.430 --> 00:04:46.120


92
00:04:46.940 --> 00:04:51.410
Now this recursive call is finished and here we have 

93
00:04:51.550 --> 00:04:54.850
result[2] = fib(1) + fib(0)

94
00:04:54.850 --> 00:04:58.650
that is 1+0 which is equal to 1

95
00:04:58.090 --> 00:04:58.650


96
00:04:59.540 --> 00:05:02.750
So result[2] is computed and we got one 

97
00:05:02.960 --> 00:05:06.450
and it is stored in the array. Now we have return

98
00:05:06.450 --> 00:05:09.860
Result[N]. So one is returned to the calling 

99
00:05:09.860 --> 00:05:14.410
function fib(3). Here the first recursive call is 

100
00:05:14.410 --> 00:05:18.990
finished now the second one will be called. That is fib(1)

101
00:05:18.120 --> 00:05:18.990


102
00:05:19.310 --> 00:05:22.480
So it is called and here first we check if 

103
00:05:22.480 --> 00:05:25.030
result[N] is equal to -1

104
00:05:25.540 --> 00:05:29.090
But it is not, which means this sub problem is 

105
00:05:29.100 --> 00:05:30.250
already solved.

106
00:05:30.940 --> 00:05:33.360
So we can just visit the array and take the 

107
00:05:33.360 --> 00:05:37.210
result from there and return it. So this if block 

108
00:05:37.220 --> 00:05:41.000
will not be executed and the next statement 

109
00:05:41.000 --> 00:05:43.050
return result[N] will be executed 

110
00:05:43.540 --> 00:05:46.550
So one is returned to the calling function fib(3)

111
00:05:46.550 --> 00:05:49.750
and this call is completed now. 

112
00:05:50.240 --> 00:05:53.500
So here in fib(3) we have result[3]

113
00:05:53.510 --> 00:05:56.710
computed which is 1+1 which is equal 

114
00:05:56.720 --> 00:05:59.450
to 2 and it is stored in the array

115
00:06:00.240 --> 00:06:02.950
And finally we have return result[N]

116
00:06:03.340 --> 00:06:06.160
So result[3] that is two is returned to 

117
00:06:06.160 --> 00:06:10.170
the calling function fib(4). And here first recursive 

118
00:06:10.170 --> 00:06:12.190
call fib(3) is completed 

119
00:06:12.500 --> 00:06:15.790
Now the second call fib(N-2) that 

120
00:06:15.790 --> 00:06:19.450
is fib(2) is called. Here first we check if 

121
00:06:19.450 --> 00:06:21.670
result[N] is -1

122
00:06:21.800 --> 00:06:25.570
But it is not, which means this sub problem is 

123
00:06:25.580 --> 00:06:29.190
already solved. So we can just visit the array and the 

124
00:06:29.200 --> 00:06:30.140
already solved 

125
00:06:30.140 --> 00:06:31.540
Result will be returned 

126
00:06:31.750 --> 00:06:34.690
This will save a lot of time and space in 

127
00:06:34.690 --> 00:06:35.950
computing the result.

128
00:06:35.250 --> 00:06:35.950


129
00:06:36.740 --> 00:06:39.330
If we had to compute it again, we have to 

130
00:06:39.330 --> 00:06:42.340
check if N is lesser than or equal to one 

131
00:06:42.350 --> 00:06:45.260
And if it's not, there will be two recursive calls 

132
00:06:45.480 --> 00:06:48.150
and it will take a lot of time and space. 

133
00:06:48.740 --> 00:06:52.220
So this is how memoization makes the programme efficient 

134
00:06:52.940 --> 00:06:56.740
So here this if block will not be executed and 

135
00:06:56.740 --> 00:07:00.450
the next statement return result[N] will be executed 

136
00:07:00.800 --> 00:07:03.650
and 1 will be returned to the calling function fib(4) 

137
00:07:03.650 --> 00:07:08.220
And this call is also completed now and in 

138
00:07:08.220 --> 00:07:12.140
fib(4), we have result[4] equal do  

139
00:07:12.140 --> 00:07:15.690
fib(3) that is 2 +fib(2) that is 1

140
00:07:15.690 --> 00:07:18.910
 which is equal to 3 and finally 

141
00:07:18.920 --> 00:07:21.700
result[4] is returned to the calling function. 

142
00:07:21.770 --> 00:07:25.630
Thus we have got the result fib(4) equal to 3

143
00:07:25.210 --> 00:07:25.630


144
00:07:25.640 --> 00:07:29.330
And this is how in top down approach memoization helps 

145
00:07:29.330 --> 00:07:32.990
us, avoid the re-computation issue and saves a lot of time and space.

