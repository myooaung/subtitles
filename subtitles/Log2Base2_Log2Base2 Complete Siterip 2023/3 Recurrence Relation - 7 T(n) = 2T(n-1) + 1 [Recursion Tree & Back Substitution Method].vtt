WEBVTT

1
00:00:00.080 --> 00:00:03.030
Let us take another recursive algorithm and find its 

2
00:00:03.030 --> 00:00:03.890
time complexity

3
00:00:03.890 --> 00:00:07.270
using recursion tree and back substitution method 

4
00:00:07.710 --> 00:00:10.890
Let us write the recurrence relation for this algorithm 

5
00:00:11.340 --> 00:00:12.800
First assume the algorithm

6
00:00:12.800 --> 00:00:14.470
takes T(n) time 

7
00:00:14.900 --> 00:00:18.030
Next we have If condition, it will take one unit 

8
00:00:18.030 --> 00:00:21.510
time and then we have a print statement which also 

9
00:00:21.510 --> 00:00:25.430
takes one unit time Then the algorithm is call recursively 

10
00:00:25.430 --> 00:00:26.610
for n-1 

11
00:00:26.760 --> 00:00:29.380
So that will take T(n-1) time 

12
00:00:29.580 --> 00:00:32.080
Again the algorithm is called recursively for 

13
00:00:32.080 --> 00:00:32.920
n-1 

14
00:00:33.140 --> 00:00:35.530
So that will also take T(n-1) 

15
00:00:35.530 --> 00:00:35.880
time 

16
00:00:36.110 --> 00:00:39.340
So the total time T(n) equal to 

17
00:00:39.350 --> 00:00:42.300
2T(n-1) + 2 and 2 is 

18
00:00:42.300 --> 00:00:45.490
a constant here so as usual change it to one 

19
00:00:45.650 --> 00:00:48.140
So we will get T(n) equal to 

20
00:00:48.150 --> 00:00:50.180
2T(n-1) + 1 

21
00:00:50.480 --> 00:00:53.640
So with initial condition we have T(n) equal 

22
00:00:53.640 --> 00:00:56.460
to 1 when n=0 and T(n)

23
00:00:56.470 --> 00:00:59.250
 equal to 

24
00:00:59.250 --> 00:00:59.590
2T(n-1) + 1

25
00:00:59.730 --> 00:01:03.360
When n > 0. so let us save this recurrence 

26
00:01:03.360 --> 00:01:05.280
relation with recursion tree method 

27
00:01:05.720 --> 00:01:08.800
First write T(n), What will T(n)

28
00:01:08.800 --> 00:01:11.130
do, if n is greater than zero 

29
00:01:11.140 --> 00:01:14.650
It will print one time and call itself with  

30
00:01:14.650 --> 00:01:15.720
n-1 twice

31
00:01:15.940 --> 00:01:16.550
So write 

32
00:01:16.560 --> 00:01:20.060
One, T(n-1) and  T(n-1) 

33
00:01:20.060 --> 00:01:22.550
here. Again T(n-1)

34
00:01:22.550 --> 00:01:24.820
is a recursive call So it will take one 

35
00:01:24.820 --> 00:01:29.220
unit time and then call itself with n-2 twice 

36
00:01:29.720 --> 00:01:32.370
So the same happens with this T(n-1) 

37
00:01:32.370 --> 00:01:36.150
to similarly T(n-2) is recursive 

38
00:01:36.150 --> 00:01:36.440
call 

39
00:01:36.540 --> 00:01:39.730
So it will take one unit time and call itself 

40
00:01:39.730 --> 00:01:41.810
with n-3 twice 

41
00:01:42.070 --> 00:01:44.940
Same happens with the next three T(n-2)

42
00:01:44.940 --> 00:01:45.720
 

43
00:01:45.840 --> 00:01:48.880
This Recursive tree will thus grow till it reaches 

44
00:01:48.880 --> 00:01:51.810
T(0) and T(0) won't make any 

45
00:01:51.810 --> 00:01:54.600
other recursive call as n is equal to zero 

46
00:01:54.760 --> 00:01:56.870
So this is the recursion tree for the given 

47
00:01:56.880 --> 00:01:57.700
algorithm 

48
00:01:57.920 --> 00:02:00.830
Now that is marked the total time taken at each 

49
00:02:00.830 --> 00:02:02.110
level of the tree 

50
00:02:02.120 --> 00:02:05.730
First we have one, that is 2 raised to 0 recursive

51
00:02:05.730 --> 00:02:06.780
calls next 

52
00:02:06.780 --> 00:02:07.680
We have 

53
00:02:07.690 --> 00:02:10.110
2 raised to one recursive calls 

54
00:02:10.300 --> 00:02:11.870
And next we have four 

55
00:02:11.880 --> 00:02:14.440
That is 2 raised to 2 recursive calls and 

56
00:02:14.440 --> 00:02:15.660
next we have eight 

57
00:02:15.670 --> 00:02:17.990
That is 2 raised to 3 recursive calls 

58
00:02:18.190 --> 00:02:21.460
Thus at k level we will have to raise two 

59
00:02:21.480 --> 00:02:24.910
a recursive calls now that has calculate the total time 

60
00:02:24.910 --> 00:02:28.210
complexity that is T(n) equal to 

61
00:02:28.210 --> 00:02:31.100
2 raised to 0 plus 2 raised to one plus 2 raised to 2 

62
00:02:31.100 --> 00:02:33.880
Plus etcetera up to 2 raised to K and 

63
00:02:33.880 --> 00:02:37.120
we have already discussed that the sum of all powers 

64
00:02:37.120 --> 00:02:39.570
of two till 2 raised to K is 

65
00:02:39.570 --> 00:02:42.700
2 raised to (k+1) - 1 and we can apply 

66
00:02:42.700 --> 00:02:43.360
that here 

67
00:02:43.430 --> 00:02:46.130
So we will get T(n) equal to  

68
00:02:46.130 --> 00:02:49.700
2 raised to (k+1) - 1 and at some point 

69
00:02:49.710 --> 00:02:52.710
n-k will become 0. That is K equal 

70
00:02:52.710 --> 00:02:53.320
to n

71
00:02:53.430 --> 00:02:56.810
So replace K with n. So we will get T(n)

72
00:02:56.820 --> 00:02:59.620
equal to 2 raised to (n+1) - 1  

73
00:02:59.620 --> 00:03:02.610
 which is a asymptotically same as O(2^n)

74
00:03:02.620 --> 00:03:05.270
 now let us solve it using the 

75
00:03:05.270 --> 00:03:06.630
back substitution method 

76
00:03:06.720 --> 00:03:10.030
Here the recurrence relation is T(n) equal to

77
00:03:10.130 --> 00:03:13.650
2T(n-1) + 1 so what will be 

78
00:03:13.650 --> 00:03:14.780
T(n-1)

79
00:03:15.080 --> 00:03:17.780
It will be 2T(n-2) + 1 

80
00:03:17.780 --> 00:03:18.240
 

81
00:03:18.400 --> 00:03:21.530
So in this equation instead of T(n-1) 

82
00:03:21.530 --> 00:03:25.060
write 2T(n-2) + 1 

83
00:03:25.230 --> 00:03:27.960
So we will get 2 raised to 2*T(n-2) + 2 +1 

84
00:03:27.960 --> 00:03:30.240
 

85
00:03:30.550 --> 00:03:32.900
And now what will be a T(n-2)

86
00:03:32.900 --> 00:03:35.840
It will be 2T(n-3) + 1 

87
00:03:35.850 --> 00:03:36.650


88
00:03:36.840 --> 00:03:39.650
So we will get T(n) equal to 

89
00:03:39.650 --> 00:03:42.670
2^2[2T(n-3)+1] + 2 + 1

90
00:03:42.670 --> 00:03:46.810
 that is 

91
00:03:46.820 --> 00:03:50.050
2^3 T(n-3) + 2^2 + 2 +1

92
00:03:50.050 --> 00:03:51.260


93
00:03:51.940 --> 00:03:55.980
Similarly if we back substitute for K times we will 

94
00:03:55.980 --> 00:03:58.780
get T(n) equal to 

95
00:03:58.790 --> 00:04:01.300
2^kT(n-k) + 2^(k-1) + 2^(k-2) +...+ 2^2 + 2 + 1

96
00:04:01.300 --> 00:04:03.870
 

97
00:04:03.870 --> 00:04:06.670

98
00:04:06.670 --> 00:04:10.930
 as we discussed previously at some 

99
00:04:10.930 --> 00:04:14.230
point (n-k) will become zero which means 

100
00:04:14.230 --> 00:04:15.060
k=n

101
00:04:15.140 --> 00:04:18.450
So substitute n for k and we will get to 

102
00:04:18.450 --> 00:04:21.590
2^nT(n-n) + [2^(n-1) + 2^(n-2) + ... 2^2 + 2 + 1]

103
00:04:21.590 --> 00:04:24.600


104
00:04:24.600 --> 00:04:24.960


105
00:04:25.110 --> 00:04:27.250
 

106
00:04:27.250 --> 00:04:28.850


107
00:04:29.290 --> 00:04:32.360
And we know some of all power of two till 

108
00:04:32.370 --> 00:04:35.490
2 raised to (n-1) will be 

109
00:04:35.500 --> 00:04:38.970
equal to 

110
00:04:38.980 --> 00:04:42.080
2^n - 1 

111
00:04:42.430 --> 00:04:45.210
that is 2^nT(0) + 2^n - 1 

112
00:04:45.220 --> 00:04:48.860
 that is 2^n + 2^n - 1

113
00:04:48.870 --> 00:04:52.450
 that is 2^(n+1) - 1 that is O(2^n)

114
00:04:52.920 --> 00:04:55.760
So that said we have found the time complexity of 

115
00:04:55.770 --> 00:04:58.590
this algorithm using back substitution method 

