WEBVTT

1
00:00:00.640 --> 00:00:01.490
Hi friends 

2
00:00:01.490 --> 00:00:05.590
In this video let us discuss about the user defined data type union.

2
00:00:10.590 --> 00:00:14.850
So union is a 

3
00:00:14.850 --> 00:00:18.099
special data type where all the members share the same 

4
00:00:18.100 --> 00:00:19.120
memory location 

5
00:00:19.540 --> 00:00:23.300
Here we have Member1, member2 and member3

6
00:00:23.300 --> 00:00:27.850
Sharing the same memory locations Union is very helpful in 

7
00:00:27.850 --> 00:00:32.230
embedded programming because in embedded programming the major concern 

8
00:00:32.240 --> 00:00:33.050
is memory 

9
00:00:33.540 --> 00:00:34.610
See an example 

10
00:00:34.760 --> 00:00:38.720
We have union example with members i of integer

11
00:00:38.720 --> 00:00:41.850
type, c of character type and d of double type 

12
00:00:43.340 --> 00:00:45.500
The size of a union is the size of the 

13
00:00:45.500 --> 00:00:48.490
largest member in the union and all the other members 

14
00:00:48.490 --> 00:00:50.070
use the same memory location 

15
00:00:50.080 --> 00:00:53.190
In this example the largest member is double d which 

16
00:00:53.190 --> 00:00:54.490
has the size eight 

17
00:00:54.560 --> 00:00:57.580
Hence the size of union will also be eight 

18
00:00:57.760 --> 00:01:00.220
So eight bytes of memory will be allocated 

19
00:01:01.440 --> 00:01:05.130
The character variable c takes first byte Since size of char

20
00:01:05.130 --> 00:01:08.950
 is one byte and int i takes first 4 

21
00:01:08.950 --> 00:01:12.030
bytes and double d takes all eight bytes 

22
00:01:12.440 --> 00:01:16.350
Since all the variable share the same memory location only 

23
00:01:16.350 --> 00:01:19.380
one member can contain a value at a given time 

24
00:01:20.140 --> 00:01:22.570
Now let us see an example programme 

25
00:01:22.580 --> 00:01:26.220
Here we are declaring a union value with members 

26
00:01:26.230 --> 00:01:30.660
i of integer type and c of character type and 

27
00:01:30.670 --> 00:01:33.570
as we declare structure variable in structure 

28
00:01:33.580 --> 00:01:36.020
We can also declare a union variable 

29
00:01:36.740 --> 00:01:40.530
The syntax for declaring Union variable is keyword union 

30
00:01:40.560 --> 00:01:44.610
followed by union name followed by variable name followed by 

31
00:01:44.610 --> 00:01:45.390
semi colon

32
00:01:46.240 --> 00:01:48.860
Here we have union value v

33
00:01:50.040 --> 00:01:54.080
Here we have two members i and c in which i is the largest 

34
00:01:54.080 --> 00:01:58.179
member so four bytes or 32 bits are allocated for 

35
00:01:58.180 --> 00:02:02.730
the union. like structure we can access Union member using 

36
00:02:02.730 --> 00:02:06.869
member access operator dot So to access i, we can 

37
00:02:06.870 --> 00:02:09.320
use v.i and to access 

38
00:02:09.320 --> 00:02:11.580
c we can use v.c

39
00:02:12.940 --> 00:02:16.250
So we set i=10 and we know the 

40
00:02:16.250 --> 00:02:19.710
binary value of 10 in 32 bit format is 28 

41
00:02:19.710 --> 00:02:24.090
zeros followed by 1010 which will be stored in the 

42
00:02:24.090 --> 00:02:25.220
allocated memory 

43
00:02:25.640 --> 00:02:29.480
Next we set c = a the ascii value

44
00:02:29.480 --> 00:02:37.140
of a is 97 and the binary value of 97 is 1100001 

45
00:02:37.570 --> 00:02:40.190
which will be stored in the first 8 bits 

46
00:02:40.200 --> 00:02:41.019
Here 

47
00:02:41.030 --> 00:02:44.670
The first 8 bit memory value of i is overwritten

48
00:02:44.670 --> 00:02:46.260
by the character value c.

49
00:02:46.260 --> 00:02:49.800
so if we print i, it will print the 

50
00:02:49.800 --> 00:02:52.210
Value Stored in the whole 32 bits which is 

51
00:02:52.210 --> 00:02:55.769
97 not the value we stored in i

52
00:02:56.080 --> 00:02:56.590
That is 

53
00:02:56.600 --> 00:02:58.710
We actually stored 10 in i

54
00:02:58.720 --> 00:03:01.680
But when we printed i we got 97 

55
00:03:01.860 --> 00:03:05.579
It clearly shows that in union only one member can 

56
00:03:05.580 --> 00:03:07.750
contain a value at a given time 

57
00:03:08.440 --> 00:03:11.050
If we print the value of c the first 8

58
00:03:11.050 --> 00:03:14.040
bit value will be printed in character form which is 

59
00:03:14.050 --> 00:03:18.330
a. now let us see another example again 

60
00:03:18.330 --> 00:03:21.920
We have declared union value with members integer i and 

61
00:03:21.920 --> 00:03:24.920
character c and we declare union variable v

62
00:03:24.920 --> 00:03:28.459
 now we set c = a So as 

63
00:03:28.470 --> 00:03:32.140
we discussed the ascii value of a is 97 it's 

64
00:03:32.140 --> 00:03:37.510
binary equivalent is 1100001 which will be stored 

65
00:03:38.540 --> 00:03:41.019
And now we set i = 100

66
00:03:41.320 --> 00:03:46.880
So the binary equivalent of 100 is 1100100 will 

67
00:03:46.880 --> 00:03:47.690
be overwritten.

68
00:03:47.690 --> 00:03:51.429
now when we print i it will print 100 

69
00:03:51.430 --> 00:03:54.160
And when we print c, what happens is that the 

70
00:03:54.160 --> 00:03:57.450
corresponding character of ascii value 100 which is d

71
00:03:57.460 --> 00:04:01.030
will be printed. but we actually stored a in c 

72
00:04:01.100 --> 00:04:04.299
But since union can store only one member at a time 

73
00:04:04.310 --> 00:04:09.460
it was overwritten by i. now when should we use the 

74
00:04:09.460 --> 00:04:13.000
union? When we are not sure about which data type 

75
00:04:13.000 --> 00:04:16.020
is coming at some point in time that is the 

76
00:04:16.020 --> 00:04:19.300
data can be either integer or character or floating 

77
00:04:19.300 --> 00:04:20.390
point or double 

78
00:04:20.400 --> 00:04:23.680
We need to declare 4 separate variables to handle the 

79
00:04:23.680 --> 00:04:24.550
single value 

80
00:04:24.940 --> 00:04:27.219
If we declare four separate variables 

81
00:04:27.230 --> 00:04:31.140
It will consume 17 bytes of memory. instead if 

82
00:04:31.140 --> 00:04:34.420
we use union the largest member is double so it 

83
00:04:34.420 --> 00:04:36.250
will only take 8 bytes 

84
00:04:36.260 --> 00:04:39.840
We can save nine bytes and it is a programmer's 

85
00:04:39.840 --> 00:04:43.900
responsibility to track which variable is currently holding the value 

86
00:04:44.440 --> 00:04:47.789
so that we can declare a type variable to track 

87
00:04:47.800 --> 00:04:50.260
which variable is currently holding value 

88
00:04:50.940 --> 00:04:54.219
We can put all these data into a structure Here 

89
00:04:54.220 --> 00:04:57.289
u is a union variable and s is the structure 

90
00:04:57.290 --> 00:05:01.390
variable Here the largest member is double d 

91
00:05:01.440 --> 00:05:04.120
So eight bytes of memory will be allocated.

92
00:05:04.640 --> 00:05:08.250
Double d will share the whole 8 byte memory. int i 

93
00:05:08.260 --> 00:05:12.120
 float f will be sharing four bytes of memory 

94
00:05:12.740 --> 00:05:16.400
char c will share one byte of memory and the structure 

95
00:05:16.400 --> 00:05:20.030
variable type and four bytes of padding will be allocated 

96
00:05:20.030 --> 00:05:20.950
like this 

97
00:05:21.440 --> 00:05:24.480
We can use enum to identify the type. we 

98
00:05:24.480 --> 00:05:28.500
have enum of int, char, float, double

99
00:05:28.510 --> 00:05:31.010
enum will assign 0 to int, 1 to char

100
00:05:31.020 --> 00:05:32.990
2 to float and 3 to double 

101
00:05:33.540 --> 00:05:36.430
Now if we want to store an integer value we 

102
00:05:36.430 --> 00:05:40.789
can set s.type equal to int and to 

103
00:05:40.790 --> 00:05:41.250
set 

104
00:05:41.260 --> 00:05:42.460
i=10

105
00:05:42.470 --> 00:05:48.590
use structure variable s.union variable u.integer variable i=10

106
00:05:45.590 --> 00:05:47.370


107
00:05:47.370 --> 00:05:48.700


108
00:05:49.140 --> 00:05:52.030
So zero will be stored in type and 10 will 

109
00:05:52.030 --> 00:05:56.320
be stored in first 4 bytes and using if else 

110
00:05:56.330 --> 00:05:58.830
we can print the appropriate types value 

111
00:05:59.640 --> 00:06:03.410
Now if we want to store a character value set 

112
00:06:03.420 --> 00:06:06.630
s.type equal to char and 

113
00:06:06.640 --> 00:06:10.440
s.u.c = a.  again using if else 

114
00:06:10.440 --> 00:06:12.219
we can print the types value 

115
00:06:14.140 --> 00:06:16.430
So that's all and thank you for watching this video 

