WEBVTT

1
00:00:00.140 --> 00:00:01.000
Hi friends 

2
00:00:01.140 --> 00:00:04.630
In this video let us discuss about the implementation of 

3
00:00:04.640 --> 00:00:05.780
adjacency list 

4
00:00:06.840 --> 00:00:09.400
So we know that we can represent a graph in 

5
00:00:09.400 --> 00:00:12.490
two ways as an adjacecy matrix and

6
00:00:12.490 --> 00:00:13.650
an adjacency list 

7
00:00:14.140 --> 00:00:17.490
In the previous video we have learned the implementation of 

8
00:00:17.500 --> 00:00:18.760
adjacency matrix 

9
00:00:19.240 --> 00:00:22.950
Now let us learn how to implement adjacency list 

10
00:00:23.640 --> 00:00:26.750
First we will discuss the case of a directed graph 

11
00:00:27.340 --> 00:00:30.370
So this is a directed graph with five vertices 

12
00:00:31.040 --> 00:00:34.960
So what will be its adjacency list It will 

13
00:00:34.960 --> 00:00:39.120
be five list for each Vertex for vertex zero it 

14
00:00:39.120 --> 00:00:42.970
has edges just 1 2 and 3 for vertex one 

15
00:00:42.980 --> 00:00:46.770
It has edges to 3 and four for vertex two it 

16
00:00:46.770 --> 00:00:48.540
has edge to 3 alone 

17
00:00:48.740 --> 00:00:51.330
And for vertex tree it has an edge to four 

18
00:00:51.340 --> 00:00:55.320
alone and finally for vertex four has edges to 

19
00:00:55.320 --> 00:00:56.750
none of the vertices 

20
00:00:57.140 --> 00:00:58.340
So that is the adjacency 

21
00:00:58.340 --> 00:01:01.420
 list of this particular a graph see how 

22
00:01:01.430 --> 00:01:02.450
to implement it 

23
00:01:03.040 --> 00:01:07.250
First let us defined the number of vertices V as five 

24
00:01:07.640 --> 00:01:10.110
So we are dealing with a graph of five vertices 

25
00:01:10.110 --> 00:01:13.500
So what will be its adjacency list It 

26
00:01:13.500 --> 00:01:18.450
will be five less that is five linked list so let us 

27
00:01:18.450 --> 00:01:22.060
create heads of these five linked list so write 

28
00:01:22.070 --> 00:01:25.550
node edge list equal to new node of five 

29
00:01:25.840 --> 00:01:29.050
Now we have an add edge function and main function 

30
00:01:29.540 --> 00:01:32.170
And as we know execution begins from Main 

31
00:01:32.180 --> 00:01:36.510
Now we use an add edge function to add each edge to 

32
00:01:36.520 --> 00:01:37.450
our graph 

33
00:01:37.840 --> 00:01:41.850
So first let's add an edge from 0 to 1 

34
00:01:42.180 --> 00:01:44.010
So call add edge of 

35
00:01:44.010 --> 00:01:45.450
Zero comma one 

36
00:01:46.040 --> 00:01:49.870
So the function is called and control gets here and 

37
00:01:49.870 --> 00:01:53.180
zero is the source Vertex and one is the destination 

38
00:01:53.180 --> 00:01:54.050
Vertex here

39
00:01:54.640 --> 00:01:58.050
So these are stored in variables SRC and dest 

40
00:01:59.240 --> 00:02:02.710
And what should happen here since we are adding an 

41
00:02:02.720 --> 00:02:07.070
edge from 0 to 1 1 should be added in zeros 

42
00:02:07.070 --> 00:02:07.630
list 

43
00:02:07.940 --> 00:02:12.380
A new node is created at Address 1024 and as 

44
00:02:12.380 --> 00:02:16.370
we said since the edges from 0 to 1 this 

45
00:02:16.370 --> 00:02:17.740
node should be for vertex 

46
00:02:17.740 --> 00:02:21.250
one and it should be attach with vertex 

47
00:02:21.250 --> 00:02:22.350
zeros list 

48
00:02:23.440 --> 00:02:26.980
So add the data part as dest and next as 

49
00:02:26.980 --> 00:02:28.690
null and check 

50
00:02:28.700 --> 00:02:30.850
If zero's that is source 

51
00:02:30.850 --> 00:02:32.750
Vertex list is empty 

52
00:02:32.970 --> 00:02:35.550
And how do we do that Say we have learned 

53
00:02:35.550 --> 00:02:38.430
about linked list and to check whether a linked list 

54
00:02:38.430 --> 00:02:41.650
is empty we will check if head equal to null 

55
00:02:42.040 --> 00:02:46.180
Similarly here we have five linked list and edge list 

56
00:02:46.180 --> 00:02:48.750
of zero is the head of first linked list 

57
00:02:49.030 --> 00:02:51.500
Edge list of one is the head of second linked

58
00:02:51.500 --> 00:02:52.510
list and so on 

59
00:02:52.960 --> 00:02:56.350
So we have to check if source's list is empty 

60
00:02:56.740 --> 00:03:00.880
So we have If edge list of SRC equal to null 

61
00:03:01.450 --> 00:03:05.010
and it is so this node becomes the first node 

62
00:03:05.020 --> 00:03:05.850
in the list 

63
00:03:06.240 --> 00:03:07.110
So that is done 

64
00:03:07.510 --> 00:03:10.350
The edge from 0 to 1 is added 

65
00:03:11.340 --> 00:03:14.830
Now let us add another edge from 0 to 2 

66
00:03:14.950 --> 00:03:19.210
So SRC equal to 0 and dest equal to two and 

67
00:03:19.210 --> 00:03:21.050
create a new node first 

68
00:03:21.060 --> 00:03:25.810
And it is created at Address 2024 and the edge 

69
00:03:25.820 --> 00:03:27.720
is from 0 to 2 

70
00:03:27.870 --> 00:03:30.610
So the node should be for two and should be 

71
00:03:30.620 --> 00:03:32.650
attached with zeroes list 

72
00:03:33.340 --> 00:03:36.350
So add data as dest and next as null 

73
00:03:36.840 --> 00:03:40.540
Now the node is ready now Check is sources that is 

74
00:03:40.550 --> 00:03:41.110
zeros 

75
00:03:41.110 --> 00:03:44.980
List is currently empty but it is not so if 

76
00:03:44.990 --> 00:03:49.000
fails here so it should be inserted after the last 

77
00:03:49.000 --> 00:03:50.350
node of this list 

78
00:03:50.840 --> 00:03:53.810
So Travers the linked list to find the last node 

79
00:03:53.950 --> 00:03:56.450
and insert the new node after it 

80
00:03:57.640 --> 00:04:01.470
So create a temporary pointer last pointing to the head 

81
00:04:01.670 --> 00:04:04.740
edge list of SRC and Travers 

82
00:04:04.750 --> 00:04:08.940
The list till we have next part of node equal 

83
00:04:08.940 --> 00:04:09.370
to null 

84
00:04:10.740 --> 00:04:14.630
So we have the condition last next not equal to 

85
00:04:14.630 --> 00:04:18.520
null so in first iteration itself Next is equal 

86
00:04:18.520 --> 00:04:21.880
To null that is the next part of node at 

87
00:04:21.890 --> 00:04:26.400
address 1024 is equal to null so the first node 

88
00:04:26.410 --> 00:04:28.050
is also the last node 

89
00:04:28.440 --> 00:04:32.390
So insert the new node after the last node the 

90
00:04:32.390 --> 00:04:36.000
write last next equal to new node and it is 

91
00:04:36.000 --> 00:04:36.410
done 

92
00:04:37.040 --> 00:04:41.670
now let us add another edge from 0 to 3 so SRC equal to 

93
00:04:41.670 --> 00:04:45.320
0 and dest equal to three and create a new 

94
00:04:45.320 --> 00:04:50.520
node first and it is created at address 3024 the 

95
00:04:50.520 --> 00:04:52.310
edges from 0 to 3 

96
00:04:52.320 --> 00:04:55.650
So the node should be for three and it should 

97
00:04:55.650 --> 00:04:57.650
be attached with zeros List 

98
00:04:58.040 --> 00:05:01.770
So add data as dest and next as null and 

99
00:05:01.770 --> 00:05:05.530
the node is ready now chek if sources list is 

100
00:05:05.530 --> 00:05:10.270
currently empty but this not so it should be inserted 

101
00:05:10.280 --> 00:05:11.730
after the last node 

102
00:05:11.840 --> 00:05:13.650
That is the node for two 

103
00:05:14.440 --> 00:05:17.450
So Travers the linked list to find the last node 

104
00:05:17.940 --> 00:05:20.150
and insert the new node after it 

105
00:05:20.540 --> 00:05:24.170
So create a temporary pointer last pointing to the head 

106
00:05:24.270 --> 00:05:27.140
edge list of SRC and Travers 

107
00:05:27.140 --> 00:05:29.610
The list till we have next part of node 

108
00:05:29.620 --> 00:05:34.310
Equal to null So in first iteration last Next is equal 

109
00:05:34.310 --> 00:05:38.580
to 2024 not equal to null move last to 

110
00:05:38.580 --> 00:05:39.360
Next node 

111
00:05:39.650 --> 00:05:44.340
So last Now has the address 2024 now check 

112
00:05:44.340 --> 00:05:48.560
the while condition and last next equal to null 

113
00:05:48.560 --> 00:05:51.970
Now that is we have reached the last node now 

114
00:05:52.030 --> 00:05:54.180
So control comes out of the loop 

115
00:05:54.190 --> 00:05:57.640
So insert new node after the last node so 

116
00:05:57.640 --> 00:06:01.070
write last next equal to new node and it is 

117
00:06:01.070 --> 00:06:02.570
done the edge is added 

118
00:06:03.240 --> 00:06:06.400
Now it is add another edge from 1 to 3 

119
00:06:06.410 --> 00:06:10.580
So SRC equal to one dest equal to 3 and create a new 

120
00:06:10.580 --> 00:06:14.950
node first and it is created at address 4024 

121
00:06:15.840 --> 00:06:18.990
So the node should be for 3 and should be attached 

122
00:06:18.990 --> 00:06:22.450
with vertex one's adjacency list 

123
00:06:22.840 --> 00:06:27.080
So add data as dest that is three and next 

124
00:06:27.090 --> 00:06:27.850
as null

125
00:06:28.340 --> 00:06:31.570
And the node is now ready now check If sources 

126
00:06:31.570 --> 00:06:35.230
that is one's list is currently empty and it is 

127
00:06:35.510 --> 00:06:38.020
So make the new node the head of the list 

128
00:06:38.130 --> 00:06:41.550
that is edge list of one equal to new node 

129
00:06:42.040 --> 00:06:45.770
Similarly we can add edges from 1 to 4 2 to 

130
00:06:45.770 --> 00:06:47.550
3 and 3 to 4 

131
00:06:48.040 --> 00:06:51.590
Now let us call the function print graph to print 

132
00:06:51.600 --> 00:06:55.330
the graph and we can simply print each list as 

133
00:06:55.330 --> 00:06:58.950
we print any linked list so use a for loop 

134
00:06:58.960 --> 00:07:03.590
for each list we have for i equal to zero i less 

135
00:07:03.590 --> 00:07:04.390
than V 

136
00:07:04.510 --> 00:07:08.550
I++ and in each iteration we will print 

137
00:07:08.560 --> 00:07:12.120
edge list of V that is edge list of zero 

138
00:07:12.130 --> 00:07:14.580
edge list of one up to edge list of 

139
00:07:14.580 --> 00:07:16.100
four so let us 

140
00:07:16.100 --> 00:07:21.070
see how in first iteration I equal to 0 so create 

141
00:07:21.080 --> 00:07:25.880
a temporary pointer pointing to edge list of Zero and 

142
00:07:25.880 --> 00:07:29.960
Print the adjList list of Zero and Travers the list 

143
00:07:29.970 --> 00:07:34.040
till the end and print each nodes data so 

144
00:07:34.040 --> 00:07:36.480
We have while temp not equal 

145
00:07:36.480 --> 00:07:38.070
to null and it is true 

146
00:07:38.080 --> 00:07:38.310
So 

147
00:07:38.310 --> 00:07:43.210
Print temp data that is data at 1024 which is 

148
00:07:43.210 --> 00:07:45.770
one and moved to next node 

149
00:07:45.780 --> 00:07:47.910
So temp equal to 2024 now

150
00:07:47.910 --> 00:07:51.160
 now check the condition and temp equal 

151
00:07:51.160 --> 00:07:53.590
to 2024 not equal to null 

152
00:07:53.810 --> 00:07:57.150
so print Data which is two and moved to next node 

153
00:07:57.400 --> 00:08:02.350
So temp equal to 3024 condition is still to true 

154
00:08:02.350 --> 00:08:05.050
so print data three and moved to next 

155
00:08:06.240 --> 00:08:09.980
And since temp next equal to null temp becomes null 

156
00:08:09.980 --> 00:08:13.720
now so that while condition fails and control comes out 

157
00:08:13.720 --> 00:08:17.740
of loop and Prints null so the first iteration of 

158
00:08:17.740 --> 00:08:20.870
for loop is now completed and we got the first 

159
00:08:20.880 --> 00:08:23.350
adjacency list printed on the screen 

160
00:08:24.140 --> 00:08:26.810
Now in the next iteration I will be equal to 

161
00:08:26.810 --> 00:08:30.000
one so adjacency list of one will be printed 

162
00:08:30.250 --> 00:08:33.880
Similarly adjacency list of 23 and four will be 

163
00:08:33.880 --> 00:08:35.950
printed in the next iterations 

164
00:08:36.640 --> 00:08:39.040
So this is how we can implement adjacency 

165
00:08:39.040 --> 00:08:40.390
list for graph 

166
00:08:40.400 --> 00:08:44.290
We learned how to create graph by adding edges and 

167
00:08:44.290 --> 00:08:45.450
how to print it 

168
00:08:46.040 --> 00:08:47.890
But there is one problem here 

169
00:08:48.040 --> 00:08:51.100
Let us understand it by adding one more edge to 

170
00:08:51.100 --> 00:08:54.450
this graph from verdict zero to vertex four 

171
00:08:54.940 --> 00:08:58.030
But what is the problem here We had to Travers 

172
00:08:58.030 --> 00:09:01.150
the whole linked list to insert the new node while 

173
00:09:01.150 --> 00:09:05.290
we add any edge that is if we have K 

174
00:09:05.290 --> 00:09:09.050
nodes K iterations are needed to add a new edge 

175
00:09:09.440 --> 00:09:12.470
So the time complexity is order of K which is 

176
00:09:12.470 --> 00:09:16.160
not very good so let us try to optimise this algorithm 

177
00:09:16.160 --> 00:09:19.860
Now we will make a small change in the add edge 

178
00:09:19.860 --> 00:09:20.510
function 

179
00:09:20.860 --> 00:09:24.410
First as we did we will have five list to 

180
00:09:24.420 --> 00:09:26.540
add an edge from 0 to 1 

181
00:09:26.650 --> 00:09:29.470
Call add edge of zero coma one 

182
00:09:29.600 --> 00:09:33.540
So SRC equal to 0 and Dest equal to one and 

183
00:09:33.540 --> 00:09:36.820
create a new node and add data as dest 

184
00:09:36.940 --> 00:09:40.500
So the node is now ready Now to insert it 

185
00:09:40.570 --> 00:09:44.670
we will inserted at the beginning instead of inserting the 

186
00:09:44.670 --> 00:09:48.180
node at the end inserting a node at the end 

187
00:09:48.180 --> 00:09:50.590
of a linked list takes order of n time 

188
00:09:50.700 --> 00:09:52.380
Where inserting at the beginning 

189
00:09:52.380 --> 00:09:54.350
Takes only order of one time 

190
00:09:54.840 --> 00:09:57.840
So as we know here the head is edge list 

191
00:09:57.840 --> 00:09:59.700
of zero so incert a 

192
00:09:59.700 --> 00:10:02.310
New node before edge list of zero 

193
00:10:02.320 --> 00:10:05.870
So write new node next equal to edge list of 

194
00:10:05.880 --> 00:10:09.970
SRC that is zero and make the new node the 

195
00:10:09.970 --> 00:10:12.080
head that is edge 

196
00:10:12.080 --> 00:10:16.470
List of SRC equal to new node and it is 

197
00:10:16.470 --> 00:10:21.920
done without needing a Traversal and the edge is added 

198
00:10:21.930 --> 00:10:22.890
in constant time

199
00:10:23.740 --> 00:10:27.020
Now let us Add another edge from 0 to 2 

200
00:10:27.020 --> 00:10:31.140
Similarly create the new node with data two and inserted 

201
00:10:31.150 --> 00:10:32.230
at the beginning 

202
00:10:32.340 --> 00:10:35.620
So make new node next equal to edge list of 

203
00:10:35.630 --> 00:10:39.850
SRC so node is inserted before head and make it 

204
00:10:39.850 --> 00:10:40.260
the head 

205
00:10:40.260 --> 00:10:44.070
Now similarly we can add edge just in constant time 

206
00:10:44.740 --> 00:10:48.110
in previous approach it took order of n time and 

207
00:10:48.110 --> 00:10:50.750
here it takes order of one time only 

208
00:10:51.540 --> 00:10:54.260
Now let us see how to check whether an edge 

209
00:10:54.260 --> 00:10:55.950
is present or not 

210
00:10:56.540 --> 00:10:59.450
The idea is that if an edge from 0 to 

211
00:10:59.450 --> 00:11:02.670
1 is present there will be a node for one 

212
00:11:02.740 --> 00:11:04.850
in zeroes adjacency list 

213
00:11:05.540 --> 00:11:08.790
Similarly if there is an edge from 0 to 3 

214
00:11:08.850 --> 00:11:11.060
there will be three in zeros list 

215
00:11:11.620 --> 00:11:14.060
So it is like searching a node in a linked 

216
00:11:14.060 --> 00:11:14.450
list 

217
00:11:14.940 --> 00:11:17.750
So we have the function has edge to check it 

218
00:11:18.140 --> 00:11:21.460
We will pass the source vertex and destination Vertex to 

219
00:11:21.460 --> 00:11:25.040
the function Let us check If there is an edge from 

220
00:11:25.050 --> 00:11:29.580
Vertex zero to vertex three So SRC equal to 0 and 

221
00:11:29.580 --> 00:11:30.750
Dest equal to three 

222
00:11:31.240 --> 00:11:33.390
And we will Travers SRC's

223
00:11:33.390 --> 00:11:36.780
adjacency list and if dest is found at 

224
00:11:36.780 --> 00:11:37.630
this present 

225
00:11:37.640 --> 00:11:43.020
Otherwise not to create a temporary pointer temp pointing to 

226
00:11:43.030 --> 00:11:46.980
Edge list of SRC and using a while loop check 

227
00:11:46.990 --> 00:11:50.230
If dest is present in the data part of any 

228
00:11:50.230 --> 00:11:54.870
node so in first iteration it is one in second iteration 

229
00:11:54.870 --> 00:11:57.730
it is two and in third iteration it is three 

230
00:11:57.740 --> 00:12:01.670
which is dest so dest is found which means an edge 

231
00:12:01.680 --> 00:12:05.860
from SRC to dest that is 0 to 3 is present in 

232
00:12:05.860 --> 00:12:07.880
the graph so return one 

233
00:12:08.640 --> 00:12:12.180
And if we Travers the list completely and if dest is 

234
00:12:12.180 --> 00:12:15.690
not found control comes out of the loop and return 

235
00:12:15.690 --> 00:12:20.550
zero as edge is not present so let us check whether 

236
00:12:20.550 --> 00:12:24.750
there is an edge from 1 to 2 so SRC equal to 

237
00:12:24.750 --> 00:12:28.620
one and dest equal to two and traversed the list 

238
00:12:28.620 --> 00:12:33.260
and compare each nodes data with dest in first iteration 

239
00:12:33.260 --> 00:12:36.660
it is three in second iteration it is four and 

240
00:12:36.660 --> 00:12:37.750
in third iteration 

241
00:12:37.760 --> 00:12:40.850
We have reached the end of the linked list so 

242
00:12:40.850 --> 00:12:44.150
control comes out of while loop and returned zero 

243
00:12:44.540 --> 00:12:47.400
So that is how we can check whether an edge is 

244
00:12:47.400 --> 00:12:49.350
present in a graph or not 

245
00:12:49.840 --> 00:12:53.820
So the average time complexity is order of K 

246
00:12:53.970 --> 00:12:57.630
If the Vertex has K edges now let us see how 

247
00:12:57.630 --> 00:12:59.450
to remove an edge from a graph 

248
00:12:59.940 --> 00:13:02.550
And how will you do that to delete

249
00:13:02.560 --> 00:13:05.320
an edge From 0 to 1 We have to delete the 

250
00:13:05.320 --> 00:13:09.600
node for one from zeros list and see the adjacency 

251
00:13:09.600 --> 00:13:12.830
list is a linked list so to delete 

252
00:13:12.840 --> 00:13:14.340
edge From 0 to 1 

253
00:13:14.570 --> 00:13:17.850
Search for one in zeros list and deleted 

254
00:13:18.340 --> 00:13:21.710
So remove edge is just like deleting a node from 

255
00:13:21.710 --> 00:13:22.800
a linked list 

256
00:13:22.930 --> 00:13:25.730
so let us remove the edge from 1 to 3 

257
00:13:26.010 --> 00:13:29.250
So SRC equal to one and destiny equal to three 

258
00:13:29.840 --> 00:13:33.830
So again what should we do Find Dest in edge list 

259
00:13:33.830 --> 00:13:35.950
of SRC and then delete it 

260
00:13:36.540 --> 00:13:40.300
So first check if edge list of SRC equal to null 

261
00:13:40.580 --> 00:13:42.850
that is whether it is empty 

262
00:13:43.440 --> 00:13:46.520
If it is empty it means there are no edges 

263
00:13:46.520 --> 00:13:50.830
from SRC so just return But here it is not null 

264
00:13:51.140 --> 00:13:54.140
So first check if the head as the key to 

265
00:13:54.140 --> 00:13:54.950
be deleted 

266
00:13:55.340 --> 00:13:59.520
So we have If  adjList of SRC data equal 

267
00:13:59.520 --> 00:14:03.090
to dest and see it is so we have to 

268
00:14:03.090 --> 00:14:04.940
delete the head of the linked list 

269
00:14:05.220 --> 00:14:07.840
We can do that by making the next node as 

270
00:14:07.850 --> 00:14:08.330
the head 

271
00:14:08.670 --> 00:14:12.720
So write edge list of SRC equal to Edge list 

272
00:14:12.720 --> 00:14:17.250
of SRC dot Next and now three is removed from 

273
00:14:17.250 --> 00:14:21.090
one's list that is edge from 1 to 3 is 

274
00:14:21.090 --> 00:14:22.450
removed from the graph 

275
00:14:22.940 --> 00:14:25.440
If the head was not the node to be deleted 

276
00:14:25.650 --> 00:14:28.630
then we should traverse the linked list to find that 

277
00:14:28.640 --> 00:14:31.050
particular node and then deleted 

278
00:14:31.740 --> 00:14:33.050
Let us see an example 

279
00:14:33.210 --> 00:14:37.330
Let us remove the edge from 0 to 2 so 

280
00:14:37.340 --> 00:14:40.550
SRC equal to zero and dest equal to two 

281
00:14:41.140 --> 00:14:44.550
So first check if SRC is list is empty 

282
00:14:44.940 --> 00:14:47.180
But it is not so check 

283
00:14:47.190 --> 00:14:49.750
If the first node is the node to be deleted 

284
00:14:50.140 --> 00:14:51.910
again it is not so 

285
00:14:51.910 --> 00:14:55.980
Travers the list to find the node with data dest 

286
00:14:56.060 --> 00:14:57.150
that is two 

287
00:14:58.240 --> 00:15:00.870
And when it is found we shall do the pointer 

288
00:15:00.870 --> 00:15:03.550
adjustments and deleted like this 

289
00:15:04.040 --> 00:15:07.410
So it is just like deleting a specific node from 

290
00:15:07.410 --> 00:15:08.250
a linked list 

291
00:15:08.840 --> 00:15:12.220
So we learnt how to create a directed graph as 

292
00:15:12.230 --> 00:15:15.880
adjacency list and how to print it how to 

293
00:15:15.880 --> 00:15:19.000
check whether it has a particular edge and how to 

294
00:15:19.000 --> 00:15:19.860
remove an edge

295
00:15:20.340 --> 00:15:22.990
So it was all about directed graphs 

296
00:15:23.380 --> 00:15:28.470
now let us discuss about the implementation of undirected graphs see 

297
00:15:28.470 --> 00:15:29.950
an example undirected graph 

298
00:15:30.340 --> 00:15:35.630
See the edge are undirected here in directed graphs the 

299
00:15:35.630 --> 00:15:36.980
edges were directed 

300
00:15:37.340 --> 00:15:40.950
We could say this edge is from 0 to 1 

301
00:15:41.180 --> 00:15:44.520
or from 1 to 0 specifically but here it is 

302
00:15:44.520 --> 00:15:45.400
not possible 

303
00:15:45.590 --> 00:15:48.360
The edge is between zero and one 

304
00:15:48.670 --> 00:15:51.510
It could be from 0 to 1 and also from 

305
00:15:51.520 --> 00:15:52.550
1 to 0 

306
00:15:52.940 --> 00:15:56.680
That is the difference between directed and undirected graph 

307
00:15:57.140 --> 00:15:57.610
So let us 

308
00:15:57.610 --> 00:15:58.980
See the implementation 

309
00:15:59.340 --> 00:16:01.740
The implementation is not much different 

310
00:16:01.990 --> 00:16:05.240
The thing is when we add an edge between zero 

311
00:16:05.240 --> 00:16:09.050
and one we are actually adding two edges from 0 

312
00:16:09.050 --> 00:16:11.250
to 1 and from 1 to 0 

313
00:16:11.640 --> 00:16:14.580
So when we add an edge we have to add 

314
00:16:14.590 --> 00:16:17.850
an additional edge in the opposite direction also 

315
00:16:19.040 --> 00:16:21.990
So when they had an edge from 1 to 3 

316
00:16:22.000 --> 00:16:24.480
we have to add an edge from 3 to 1 

317
00:16:24.480 --> 00:16:27.530
also and if we had an edge from 3 to 

318
00:16:27.530 --> 00:16:30.350
2 we have to add an edge from 2 to 

319
00:16:30.350 --> 00:16:30.680
3 

320
00:16:30.680 --> 00:16:34.900
Also just like that So let us add an edge from 

321
00:16:34.910 --> 00:16:38.060
0 to 1 so What should we do We should 

322
00:16:38.070 --> 00:16:42.500
add one in zeros adjacency list and also add 

323
00:16:42.510 --> 00:16:46.510
zero in one's adjacency list that is add 

324
00:16:46.520 --> 00:16:51.740
Dest in SRC is adjacency list and also add SRC 

325
00:16:51.740 --> 00:16:53.850
in adjacency list of dest 

326
00:16:55.040 --> 00:16:59.920
So create a new node and add Dest's  data and 

327
00:16:59.930 --> 00:17:01.350
insert it to edge

328
00:17:01.350 --> 00:17:05.010
List of SRC's beginning so the edge from 0 

329
00:17:05.010 --> 00:17:08.420
to 1 is added now add the edge from 1 

330
00:17:08.420 --> 00:17:09.020
to 0 

331
00:17:09.320 --> 00:17:12.840
So create a new node again and SRC will be 

332
00:17:12.850 --> 00:17:16.380
added at the data part and inserted at the beginning 

333
00:17:16.380 --> 00:17:18.050
of edge a list of dest 

334
00:17:18.540 --> 00:17:21.690
So the edge from 1 to 0 is also added 

335
00:17:22.050 --> 00:17:23.830
so that is the only difference 

336
00:17:24.190 --> 00:17:27.450
Now let us add another edge between zero and two 

337
00:17:27.840 --> 00:17:31.440
So we should add two zeros in adjacency list and 

338
00:17:31.450 --> 00:17:35.670
also zero and two in adjacency list that is add

339
00:17:35.670 --> 00:17:37.120
Dest in SRC 

340
00:17:37.130 --> 00:17:41.780
adjacency List and add SRC in dest adjacency list 

341
00:17:42.740 --> 00:17:46.280
so create a new node at dest's data and inserted 

342
00:17:46.290 --> 00:17:47.010
to edge 

343
00:17:47.010 --> 00:17:50.180
A list of SRC is beginning so the edge from 

344
00:17:50.180 --> 00:17:52.840
zero to two is added Now let us add

345
00:17:52.840 --> 00:17:55.960
the edge from 2 to 0 so create a new 

346
00:17:55.960 --> 00:18:00.140
node again and add SRC at data part and inserted 

347
00:18:00.150 --> 00:18:02.660
at the beginning of Edge list of dest 

348
00:18:03.140 --> 00:18:06.450
So the edge from 2 to 0 is also added 

349
00:18:06.840 --> 00:18:10.740
Similarly we can add the remaining edges that's all for 

350
00:18:10.740 --> 00:18:11.410
this video 

351
00:18:11.420 --> 00:18:14.040
In the next video we will learn the difference between 

352
00:18:14.050 --> 00:18:16.160
edge matrix and edge List. 

