WEBVTT

1
00:00:00.040 --> 00:00:03.560
So in the implementation, let us write a function postfixEval

2
00:00:03.560 --> 00:00:05.450
 to do the job.

3
00:00:05.840 --> 00:00:09.280
We will be passing the pointer to the expression str 

4
00:00:09.290 --> 00:00:13.270
into this function and it returns the result which is 

5
00:00:13.270 --> 00:00:14.000
an integer.

6
00:00:14.470 --> 00:00:17.860
So first we should scan every character of the string 

7
00:00:17.870 --> 00:00:21.300
which is our expression till we reach a null character 

8
00:00:21.680 --> 00:00:24.040
And if it is an operand, that is an 

9
00:00:24.050 --> 00:00:27.150
integer and push it into the stack.

10
00:00:27.160 --> 00:00:30.580
And if it is an operator, then pop elements from 

11
00:00:30.580 --> 00:00:33.790
the stack and perform the operation and push back the 

12
00:00:33.790 --> 00:00:37.310
result into the stack. So let us use a for loop to 

13
00:00:37.310 --> 00:00:42.260
do this. First declare integer variable i. 

14
00:00:42.270 --> 00:00:46.310
Now write,  for i equal to zero, str[i], i++ 

15
00:00:46.310 --> 00:00:49.650
So this condition will fail when we reach the null character 

16
00:00:50.240 --> 00:00:52.200
and in each iteration, check 

17
00:00:52.210 --> 00:00:53.520
if it is an integer

18
00:00:53.890 --> 00:00:57.560
So write if str[i] greater than or equal to 0

19
00:00:57.560 --> 00:01:01.340
 and str[i] less than or equal to 9

20
00:01:01.340 --> 00:01:04.650
then push that into the stack 

21
00:01:05.040 --> 00:01:09.060
But since these are scanned as characters, we need to 

22
00:01:09.060 --> 00:01:13.580
convert it into integers. So write push str[i]-0

23
00:01:13.590 --> 00:01:18.430
 Now if the scanned character is an 

24
00:01:18.440 --> 00:01:24.160
operator, then perform for operation twice and perform that operation 

25
00:01:24.170 --> 00:01:28.460
and push the result in to stack. So write else 

26
00:01:28.740 --> 00:01:32.160
int x equal to pop() int y equal to pop()

27
00:01:32.420 --> 00:01:36.050
So last two operands are in x and y now

28
00:01:36.540 --> 00:01:39.670
Now perform operation on x and y with the 

29
00:01:39.670 --> 00:01:43.750
scanned operator. That is in str[i]. But we 

30
00:01:43.750 --> 00:01:48.810
don't know which operator it is. So use switch case 

31
00:01:49.000 --> 00:01:53.100
so write switch str[i] and case 1 is for + operator 

32
00:01:53.110 --> 00:01:58.930
case one is for addition operator Then push y+x

33
00:01:58.930 --> 00:02:03.020
 and break and remember to write operands in this order

34
00:02:03.030 --> 00:02:07.370
like x after y and not y after x 

35
00:02:07.600 --> 00:02:11.280
the addition operation result will not be affected but other 

36
00:02:11.280 --> 00:02:15.840
operations will be. So be careful with that. Now case two is

37
00:02:15.840 --> 00:02:21.250
for subtraction operator then push y-x and 

38
00:02:21.250 --> 00:02:26.120
break. Case three for multiplication operator, then push y*x

39
00:02:26.130 --> 00:02:30.560
 and break. Case four for division 

40
00:02:30.560 --> 00:02:36.580
operator push y/x and break. And finally when 

41
00:02:36.580 --> 00:02:40.420
the scanning is completed for loop condition will fail and 

42
00:02:40.420 --> 00:02:44.410
control comes out. Now the result is in stack 

43
00:02:44.410 --> 00:02:48.140
So we can pop it and return it so write return pop. And that's all it is done.

