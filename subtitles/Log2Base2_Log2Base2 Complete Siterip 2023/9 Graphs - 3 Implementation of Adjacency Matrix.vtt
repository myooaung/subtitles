WEBVTT

1
00:00:00.240 --> 00:00:01.100
Hello friends 

2
00:00:01.360 --> 00:00:05.020
In this video let us discuss about the implementation of 

3
00:00:05.030 --> 00:00:06.270
adjacency Matrix 

4
00:00:06.840 --> 00:00:09.980
So an adjacency matrix for a graph with n 

5
00:00:09.980 --> 00:00:14.340
vertices isn't and n by n matrix and if the reason 

6
00:00:14.340 --> 00:00:18.600
it's from i to g we will mark matrix of IG 

7
00:00:18.600 --> 00:00:19.450
equal to one 

8
00:00:19.840 --> 00:00:24.020
Otherwise it is marked zero that is here we have 

9
00:00:24.020 --> 00:00:25.120
five vertices 

10
00:00:25.360 --> 00:00:26.470
So it's adjacency 

11
00:00:26.470 --> 00:00:30.490
matrix ADJ will be a five by five matrix 

12
00:00:31.140 --> 00:00:34.590
Now the recent edge from 0 to 1 So adj 

13
00:00:34.590 --> 00:00:37.750
 of 01 will be equal to one 

14
00:00:38.340 --> 00:00:41.580
Now there is no edge from 1 to 0 so 

15
00:00:41.590 --> 00:00:44.850
adj of 10 will be equal to zero 

16
00:00:45.440 --> 00:00:48.990
Similarly there is an edge from 2 to 3 

17
00:00:49.000 --> 00:00:52.860
So adj of 23 equal to one and there 

18
00:00:52.860 --> 00:00:55.040
is no edge from 2 to 4 

19
00:00:55.050 --> 00:00:58.360
So adj of two four equal to zero 

20
00:00:58.550 --> 00:01:01.860
So that is an adjacency matrix and the graph 

21
00:01:01.870 --> 00:01:04.280
with just so is a directed graph 

22
00:01:04.530 --> 00:01:08.450
That is the edges are directed we can specifically say 

23
00:01:08.460 --> 00:01:11.580
the edge is from a to b not like saying the 

24
00:01:11.580 --> 00:01:16.350
recent edge between A and B so the edges will be directed 

25
00:01:16.840 --> 00:01:19.720
So let us first see the keys of a directed 

26
00:01:19.720 --> 00:01:24.310
graph say How to implement it first let us define 

27
00:01:24.310 --> 00:01:26.950
the number of vertices V as five 

28
00:01:27.440 --> 00:01:30.020
So we are dealing with a graph of five vertices 

29
00:01:30.020 --> 00:01:33.150
so what will be its adjacency matrix 

30
00:01:33.940 --> 00:01:35.850
It will be a five by five matrix 

31
00:01:36.140 --> 00:01:39.680
So declare a adjacency matrix as a two dimensional 

32
00:01:39.680 --> 00:01:44.150
array edge matrix of V V now the five by 

33
00:01:44.150 --> 00:01:47.220
five matrix is created now What we have to do 

34
00:01:47.220 --> 00:01:50.440
is whenever we add an edge we have to set 

35
00:01:50.680 --> 00:01:55.010
that particular cell as one that is let us add 

36
00:01:55.010 --> 00:01:57.250
an edge from 0 to 1 

37
00:01:57.640 --> 00:02:00.850
So what really should happen is the value at row 

38
00:02:00.850 --> 00:02:04.710
zero and column one should be set to one let us 

39
00:02:04.710 --> 00:02:07.750
call a function add edge which will do it 

40
00:02:08.640 --> 00:02:12.200
and pass the matrix edge matrix and the source and 

41
00:02:12.200 --> 00:02:15.070
destination vertices to the function add edge 

42
00:02:15.540 --> 00:02:19.670
So we have add edge of edge matrix comma zero comma 

43
00:02:19.680 --> 00:02:23.900
one it means edge from 0 to 1 should 

44
00:02:23.900 --> 00:02:26.060
be added in edge matrix 

45
00:02:26.350 --> 00:02:30.340
So control gets here and matrix is stored in arr 

46
00:02:30.650 --> 00:02:36.950
and zero invariable SRC and one invariable dest now set 

47
00:02:37.150 --> 00:02:41.290
array of source destination equal to one so array of 

48
00:02:41.300 --> 00:02:45.310
01 is set to one so the edges added from 

49
00:02:45.320 --> 00:02:47.500
0 to 1 so that all 

50
00:02:47.510 --> 00:02:48.550
It's very simple 

51
00:02:49.140 --> 00:02:53.420
Now let's add another edge from Vertex zero to Vertex 

52
00:02:53.420 --> 00:02:53.800
two 

53
00:02:54.060 --> 00:02:58.280
So call function add edge of edge matrix comma zero comma 

54
00:02:58.290 --> 00:03:02.150
two so control gets here and in a simple step 

55
00:03:02.160 --> 00:03:05.750
set value at row zero and column two as one 

56
00:03:06.240 --> 00:03:10.050
And we have array of source destination equal to 

57
00:03:10.050 --> 00:03:12.750
one so that's set the edges added 

58
00:03:13.240 --> 00:03:16.620
Now let us add another edge from zero to three 

59
00:03:16.890 --> 00:03:21.490
so call the function add edge by passing edge matrix zero and 

60
00:03:21.490 --> 00:03:25.530
three zero is stored in SRC and three is stored 

61
00:03:25.530 --> 00:03:30.610
and dest and we have arr of source dest equal 

62
00:03:30.610 --> 00:03:31.070
to one 

63
00:03:31.330 --> 00:03:34.340
So array of zero three is set to one that 

64
00:03:34.340 --> 00:03:37.200
is the edge from 0 to 3 is added in 

65
00:03:37.200 --> 00:03:37.850
the graph 

66
00:03:38.440 --> 00:03:41.440
Now let's add another edge from 1 to 3 

67
00:03:41.700 --> 00:03:45.740
So called the function add edge of edge matrix comma one 

68
00:03:45.740 --> 00:03:50.600
comma three so controlle gets here and array of one 

69
00:03:50.600 --> 00:03:54.410
three is set to one let us add another edge 

70
00:03:54.410 --> 00:03:58.540
from 1 to 4 so call the function add edge by passing 

71
00:03:58.550 --> 00:03:59.430
edge matrix 

72
00:03:59.440 --> 00:04:00.650
One and four 

73
00:04:01.440 --> 00:04:05.210
So control gets here and sets array of one four 

74
00:04:05.220 --> 00:04:08.560
21 So the edge from 1 to 4 is added 

75
00:04:08.570 --> 00:04:09.340
in the graph 

76
00:04:09.350 --> 00:04:13.220
Now let us add another edge from 2 to 3 

77
00:04:13.230 --> 00:04:18.110
So call a function add edge by passing edge matrix two and three 

78
00:04:18.400 --> 00:04:21.710
so two is stored in SRC and three is stored in 

79
00:04:21.710 --> 00:04:25.340
dest and we have array of 23 set to 

80
00:04:25.340 --> 00:04:26.750
one by the step 

81
00:04:27.640 --> 00:04:28.330
now let us 

82
00:04:28.340 --> 00:04:29.230
Add another 

83
00:04:29.230 --> 00:04:30.630
edge from 3 to 4 

84
00:04:31.000 --> 00:04:35.670
So call the function add edge by passing edge matrix three 

85
00:04:35.680 --> 00:04:36.290
and four 

86
00:04:36.580 --> 00:04:39.950
So control gets here and we have array of 

87
00:04:40.340 --> 00:04:42.660
source destination equal to one 

88
00:04:42.950 --> 00:04:47.110
So array of three four that is the value at 

89
00:04:47.120 --> 00:04:49.550
row three Column four set to one 

90
00:04:50.140 --> 00:04:53.200
So this is how we can add an edge in 

91
00:04:53.200 --> 00:04:56.250
a graph implemented as an adjacency matrix 

92
00:04:56.740 --> 00:05:00.580
Now let us printed so call a function print edge 

93
00:05:00.580 --> 00:05:03.550
matrix by passing adjacency matrix 

94
00:05:04.040 --> 00:05:07.220
So control gets here and the matrix is stored in 

95
00:05:07.220 --> 00:05:11.240
the parameter arr and we can print it simply as 

96
00:05:11.240 --> 00:05:16.020
we print any two dimensional array use nested for loop 

97
00:05:16.030 --> 00:05:19.430
and in each iteration of the outer loop each row 

98
00:05:19.430 --> 00:05:20.400
will be printed 

99
00:05:20.610 --> 00:05:24.850
See we have for I equal to 0 I less than V 

100
00:05:24.860 --> 00:05:29.230
I plus plus in first iteration I equal to zero and 

101
00:05:29.240 --> 00:05:33.680
inside we have for J equal to 0 J less than 

102
00:05:33.680 --> 00:05:35.050
V J plus plus 

103
00:05:35.440 --> 00:05:38.140
And in first iteration of this loop J 

104
00:05:38.140 --> 00:05:39.240
equal to 0 

105
00:05:39.250 --> 00:05:41.940
So now I equal to 0 and J 

106
00:05:41.940 --> 00:05:46.730
equal to 0 and we have the statement print arr of 

107
00:05:46.740 --> 00:05:51.370
I J that is arr of 00 which is zero 

108
00:05:51.510 --> 00:05:54.730
and it will be printed in the next iteration 

109
00:05:54.740 --> 00:05:59.050
J equal to One arr of 01 which is one 

110
00:05:59.060 --> 00:06:04.040
is printed in next iteration J equal to two so arr 

111
00:06:04.040 --> 00:06:08.030
of 02 which is one is printed in the next 

112
00:06:08.030 --> 00:06:09.190
iteration J equal 

113
00:06:09.190 --> 00:06:13.140
to three so arr of 03 which is one is 

114
00:06:13.140 --> 00:06:18.830
printed in next iteration J equal to four so arr of zero for 

115
00:06:18.840 --> 00:06:22.980
which is zero is printed in the next iteration J 

116
00:06:22.990 --> 00:06:26.110
equal to five and the condition J less than V 

117
00:06:26.120 --> 00:06:29.510
fails and control goes to the next line and the 

118
00:06:29.510 --> 00:06:32.820
first iteration of outer loop is now completed and we 

119
00:06:32.820 --> 00:06:34.520
got the first row printed 

120
00:06:35.240 --> 00:06:38.530
Similarly in the second iteration of the outer loop the 

121
00:06:38.530 --> 00:06:41.990
second row will be printed and in third iteration the 

122
00:06:42.000 --> 00:06:44.850
third row is printed in Fourth Iteration 

123
00:06:44.860 --> 00:06:47.790
The fourth row is printed in fifth iteration 

124
00:06:47.790 --> 00:06:51.260
The fifth row is printed and in sixth iteration I 

125
00:06:51.260 --> 00:06:52.630
will be equal to five 

126
00:06:52.730 --> 00:06:56.750
So the condition I less than V fails and control comes 

127
00:06:56.760 --> 00:06:58.150
out of the for loop 

128
00:06:58.740 --> 00:07:01.410
So this is how we can print the adjacency 

129
00:07:01.410 --> 00:07:02.110
matrix 

130
00:07:02.260 --> 00:07:06.010
So this is how we can simply implement a graph 

131
00:07:06.020 --> 00:07:09.000
as an adjacency matrix and add at just to 

132
00:07:09.000 --> 00:07:09.250
it 

133
00:07:09.640 --> 00:07:13.170
We also learned how to print and adjacency matrix 

134
00:07:13.550 --> 00:07:17.520
Now how can we check Whether an edge exist or 

135
00:07:17.520 --> 00:07:20.530
not in a graph it is also very simple 

136
00:07:20.710 --> 00:07:22.880
See we have the adjacency matrix here 

137
00:07:23.000 --> 00:07:26.020
We want to know if the recent edge from 1 

138
00:07:26.030 --> 00:07:29.910
to 3 So just go to Row one and column 

139
00:07:29.910 --> 00:07:30.350
three 

140
00:07:30.440 --> 00:07:34.600
And if the value here is one then recent edge 

141
00:07:34.610 --> 00:07:37.990
if it zero then there is no edge so let us see 

142
00:07:37.990 --> 00:07:41.920
how to implement it We have a function has edge  

143
00:07:41.930 --> 00:07:44.840
check it and we will pass a Matrix 

144
00:07:44.960 --> 00:07:48.470
The source vertex and destination vertex to this function 

145
00:07:49.140 --> 00:07:51.490
we want to check if there is an edge from 

146
00:07:51.500 --> 00:07:54.180
1 to 3 so pass the values 

147
00:07:54.320 --> 00:07:57.980
So SRC equal to one and dest equal to three 

148
00:07:58.070 --> 00:08:03.530
Now simply check If arr of SRC dest equal to 

149
00:08:03.530 --> 00:08:05.180
one and it is 

150
00:08:05.410 --> 00:08:09.280
So an edge access from 1 to 3 So returned 

151
00:08:09.280 --> 00:08:09.650
one 

152
00:08:10.040 --> 00:08:13.050
And if it was not one then there is no edge 

153
00:08:13.160 --> 00:08:14.680
So we should have returned 

154
00:08:14.690 --> 00:08:18.530
Zero now let us check if there is an edge from 

155
00:08:18.540 --> 00:08:19.470
2 to 4 

156
00:08:19.650 --> 00:08:23.810
So SRC equal to 2 and Dest equal to 4 So check 

157
00:08:23.820 --> 00:08:28.120
If arr of source dest equal to one and it 

158
00:08:28.120 --> 00:08:31.150
is not it is equal to zero So there is 

159
00:08:31.150 --> 00:08:35.260
no edge from src to dest so return zero So 

160
00:08:35.260 --> 00:08:38.050
that is how we can insert a dest and check 

161
00:08:38.140 --> 00:08:41.580
If an edge access between two vertices now 

162
00:08:41.590 --> 00:08:43.860
Let us see how to remove an edge from a 

163
00:08:43.860 --> 00:08:44.370
graph 

164
00:08:44.670 --> 00:08:48.070
For that we have a function Remove edge Here 

165
00:08:48.070 --> 00:08:52.150
also we will pass the adjacency matrix source vertex 

166
00:08:52.160 --> 00:08:55.960
and destination vertex to the function and simply We 

167
00:08:55.960 --> 00:09:00.230
can remove the edge by making arr of SRC dest 

168
00:09:00.240 --> 00:09:04.010
equal to zero That is if that particular cell equal 

169
00:09:04.010 --> 00:09:07.230
to one then the there is an edge so we can make 

170
00:09:07.230 --> 00:09:11.310
it zero to remove that edge so let us remove the edge 

171
00:09:11.310 --> 00:09:13.550
from vertex zero to vertex three 

172
00:09:13.940 --> 00:09:16.100
So what we have to do is we have to 

173
00:09:16.100 --> 00:09:19.810
go to row zero and column three and make that 

174
00:09:19.820 --> 00:09:21.050
value zero 

175
00:09:21.640 --> 00:09:25.900
So SRC equal to 0 and dest equal to 3 here now simply 

176
00:09:25.900 --> 00:09:31.420
set Arr of SRC dest that's arr of zero three 

177
00:09:31.430 --> 00:09:35.450
equal to zero and that's all the edge is removed now 

178
00:09:36.440 --> 00:09:39.260
Now let us remove the edge from vertex 2 to 

179
00:09:39.260 --> 00:09:39.490
vertex 

180
00:09:39.490 --> 00:09:43.620
3 So SRC equal to 2 and dest equal to three 

181
00:09:43.630 --> 00:09:48.260
Now simply set arr of 23 equal to zero that 

182
00:09:48.260 --> 00:09:51.820
is value at Row two and column three equal to 

183
00:09:51.820 --> 00:09:54.150
zero and the edge is removed 

184
00:09:54.240 --> 00:09:56.980
So this is how we can remove any edge from 

185
00:09:56.980 --> 00:09:57.650
a graph 

186
00:09:58.340 --> 00:10:02.570
So we learned how to implement a graph using adjacency 

187
00:10:02.570 --> 00:10:06.480
matrix and we learned how to add edge 

188
00:10:06.490 --> 00:10:09.600
how to print adjacency Matrix how to check 

189
00:10:09.610 --> 00:10:12.540
whether edge exist or Not and also how to 

190
00:10:12.540 --> 00:10:13.730
remove an edge 

191
00:10:13.740 --> 00:10:16.450
But all these were about directed graph 

192
00:10:16.840 --> 00:10:20.650
Now let us discuss about the implementation of undirected graphs 

193
00:10:20.920 --> 00:10:22.940
see an example of undirected graph 

194
00:10:22.940 --> 00:10:24.540
You see the edges 

195
00:10:24.540 --> 00:10:29.480
are undirected that is in directed graphs the edges were 

196
00:10:29.490 --> 00:10:30.300
directed 

197
00:10:30.430 --> 00:10:33.850
We could say the edge is from 0 to 1 

198
00:10:33.860 --> 00:10:37.710
or from 1 to 0 specifically but here it is 

199
00:10:37.710 --> 00:10:38.660
not possible 

200
00:10:38.800 --> 00:10:42.250
The edge is just between zero and one 

201
00:10:42.470 --> 00:10:45.570
It could be from 0 to 1 or from 1 

202
00:10:45.570 --> 00:10:46.600
to 0 

203
00:10:46.760 --> 00:10:50.750
That is the difference between directed and undirected graphs 

204
00:10:51.240 --> 00:10:53.150
So let us see the implementation 

205
00:10:53.540 --> 00:10:56.160
The implementation is not much different 

206
00:10:56.290 --> 00:10:59.970
The thing is when we add an edge between zero 

207
00:10:59.980 --> 00:11:04.060
and one we're actually adding two edges from 0 to 

208
00:11:04.060 --> 00:11:06.980
1 and also from 1 to 0 

209
00:11:07.160 --> 00:11:10.450
So when they add an edge we have to add 

210
00:11:10.460 --> 00:11:13.770
an additional edge in the opposite direction also 

211
00:11:14.440 --> 00:11:17.070
So when we add an edge from 1 to 3 

212
00:11:17.080 --> 00:11:19.540
we have to add an edge from 3 to 1 

213
00:11:19.550 --> 00:11:23.300
also and if we add an edge from 3 to 

214
00:11:23.300 --> 00:11:26.080
2 we have to add innit from 2 to 3 

215
00:11:26.090 --> 00:11:27.650
Also just like that 

216
00:11:28.190 --> 00:11:30.570
So let us add an edge from 0 to 1 

217
00:11:30.920 --> 00:11:36.540
So in add edge function set array of SRC dest 

218
00:11:36.550 --> 00:11:40.350
equal to one and along with that set array of 

219
00:11:40.360 --> 00:11:42.600
dest SRC equal to one 

220
00:11:42.740 --> 00:11:46.380
So the value at row zero column one is set 

221
00:11:46.500 --> 00:11:49.810
and also value at Row one and column zero is 

222
00:11:49.820 --> 00:11:55.050
also set now let us add another edge between two and three 

223
00:11:55.440 --> 00:11:59.220
So set arr of 23 equal to one 

224
00:11:59.290 --> 00:12:03.030
So Edge from two to three is added now set 

225
00:12:03.040 --> 00:12:05.570
arr of three to equal to one 

226
00:12:05.730 --> 00:12:08.400
So Edge from 3 to 2 is also added 

227
00:12:08.410 --> 00:12:11.220
So this is how we can implement a graph using 

228
00:12:11.230 --> 00:12:12.540
adjacency matrix 

229
00:12:13.120 --> 00:12:15.730
And in the next video we will discuss how a 

230
00:12:15.730 --> 00:12:19.150
graph can be implemented using adjacency List 

