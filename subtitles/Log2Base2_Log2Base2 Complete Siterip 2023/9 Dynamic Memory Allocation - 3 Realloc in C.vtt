WEBVTT

1
00:00:00.740 --> 00:00:01.400
Hi friends 

1
00:00:01.400 --> 00:00:03.360
In this video we are going to discuss 

2
00:00:03.360 --> 00:00:04.380
about realloc in

3
00:00:04.380 --> 00:00:04.920
C 

4
00:00:11.140 --> 00:00:13.500
So using realloc function we can re size the 

5
00:00:13.500 --> 00:00:16.729
memory area which was already allocated using malloc or 

6
00:00:16.730 --> 00:00:17.320
calloc 

7
00:00:17.680 --> 00:00:20.250
It is also declared in stdlib.h

8
00:00:20.450 --> 00:00:22.740
So we have to make sure that we include this 

9
00:00:22.740 --> 00:00:25.050
header file in the programme before we use it 

10
00:00:25.440 --> 00:00:27.890
Now the limitation of realloc is that if we 

11
00:00:27.890 --> 00:00:31.940
use realloc before creating memory dynamically using malloc

12
00:00:31.940 --> 00:00:34.870
or calloc then the behaviour is undefined 

13
00:00:35.260 --> 00:00:36.080
Reaalloc takes 

14
00:00:36.080 --> 00:00:38.900
Two arguments. First is pointer to the memory block which 

15
00:00:38.900 --> 00:00:41.379
is to be resized and next is the new size 

16
00:00:41.380 --> 00:00:41.949
we need 

17
00:00:42.240 --> 00:00:44.900
This new size can be smaller than or larger than 

18
00:00:44.900 --> 00:00:47.700
the actual size. So consider the C code 

19
00:00:47.700 --> 00:00:51.360
So we are declaring a character pointer ptr and using 

20
00:00:51.370 --> 00:00:51.540


21
00:00:51.540 --> 00:00:51.880
malloc

22
00:00:51.890 --> 00:00:54.980
We are allocating 100 bytes of memory and its base 

23
00:00:54.980 --> 00:00:56.640
address will be stored in ptr

24
00:00:57.130 --> 00:01:00.440
Now suppose this memory is not sufficient and we want a 

25
00:01:00.440 --> 00:01:03.709
block of 1000 bytes so we can write the realloc 

26
00:01:03.710 --> 00:01:06.649
function like this realloc(ptr,1000)

27
00:01:06.650 --> 00:01:08.450
 so it will resize

28
00:01:08.450 --> 00:01:11.559
A memory block pointed by ptr into 1000 bytes 

29
00:01:11.710 --> 00:01:13.610
So consider another sample code 

30
00:01:13.880 --> 00:01:16.970
First we are declaring an integer pointer ptr and it is 

31
00:01:16.970 --> 00:01:21.790
created in stack at address 2048. Now we are using malloc

32
00:01:21.790 --> 00:01:24.190
function and recall what was the argument of malloc

33
00:01:24.190 --> 00:01:24.690
function.

34
00:01:24.740 --> 00:01:27.630
It is the size of memory need to be allocated 

35
00:01:27.830 --> 00:01:31.030
So we have 5 x sizeof(int) that is 5 x 4

36
00:01:31.030 --> 00:01:32.649
that is 20 bytes 

37
00:01:33.040 --> 00:01:36.290
So five blocks of four bytes each allocated in heap 

38
00:01:36.300 --> 00:01:38.380
and base address is stored in ptr

39
00:01:38.850 --> 00:01:41.780
Now suppose we only need two blocks so we can 

40
00:01:41.780 --> 00:01:44.009
use realloc function to reduce the size 

41
00:01:44.090 --> 00:01:46.960
So we pass ptr and new size which is  

42
00:01:46.960 --> 00:01:48.160
2 x sizeof(int)

43
00:01:48.370 --> 00:01:51.770
So it is reduced like this and returns the base 

44
00:01:51.770 --> 00:01:52.630
address to ptr

45
00:01:52.630 --> 00:01:52.949


46
00:01:53.090 --> 00:01:55.200
Now suppose we want 4 more blocks 

47
00:01:55.430 --> 00:01:58.089
Then we can use realloc function to increase 

48
00:01:58.090 --> 00:01:58.460
the size

49
00:01:58.460 --> 00:02:01.420
So we pass ptr and the new size which is 

50
00:02:01.420 --> 00:02:04.830
6 x sizeof(int)  ad it is resized like this 

51
00:02:05.090 --> 00:02:06.660
Now let's see some cases 

52
00:02:06.670 --> 00:02:09.920
If the given size is smaller than actual size it will 

53
00:02:09.920 --> 00:02:13.720
simply deallocate the memory not needed. If the given 

54
00:02:13.720 --> 00:02:16.840
size is larger than actual memory it will check whether it 

55
00:02:16.840 --> 00:02:19.310
can expand the already available memory 

56
00:02:19.320 --> 00:02:21.620
If it is possible it will simply resize the 

57
00:02:21.620 --> 00:02:22.130
memory 

58
00:02:22.290 --> 00:02:25.150
Otherwise realloc will create new block of memory with 

59
00:02:25.150 --> 00:02:27.700
a new size and copy the old data to the 

60
00:02:27.700 --> 00:02:31.250
newly allocated block and then deallocate the old memory 

61
00:02:31.250 --> 00:02:31.660
block 

62
00:02:31.770 --> 00:02:35.160
For example assume we have already alotted memory 

63
00:02:35.160 --> 00:02:37.750
for two integers and now we need memory for 

64
00:02:37.750 --> 00:02:38.890
two more integers

65
00:02:38.900 --> 00:02:41.270
But see here it is not able to expand the 

66
00:02:41.270 --> 00:02:41.600
size 

67
00:02:41.600 --> 00:02:44.679
So it will find this available space in here and 

68
00:02:44.690 --> 00:02:48.130
allocate memory for 4 integers and then copy the data 

69
00:02:48.130 --> 00:02:49.470
that is 10 and 20 to

70
00:02:49.470 --> 00:02:52.930
New Block and deallocate the old block and finally 

71
00:02:52.930 --> 00:02:55.299
it returns the base address to the new block 

72
00:02:55.840 --> 00:02:58.130
So that's all and thank you for watching this video 

