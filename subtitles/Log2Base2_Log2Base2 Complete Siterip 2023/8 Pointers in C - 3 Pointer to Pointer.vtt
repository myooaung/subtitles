WEBVTT

1
00:00:00.740 --> 00:00:01.400
Hi friends 

1
00:00:01.400 --> 00:00:02.530
In this video we are going to discuss 

2
00:00:02.530 --> 00:00:05.250
about double pointers or pointer to pointers 

3
00:00:11.140 --> 00:00:14.200
So what is a double pointer? We have already learned 

4
00:00:14.200 --> 00:00:17.619
about pointers and we know that pointers point to variables 

5
00:00:17.700 --> 00:00:20.070
So a double pointer is nothing but a pointer 

6
00:00:20.070 --> 00:00:23.850
pointing to another pointer. that is double pointers will 

7
00:00:23.850 --> 00:00:26.140
be storing the address of another pointer 

8
00:00:26.480 --> 00:00:30.080
So let us discuss more using this C code here. First We 

9
00:00:30.080 --> 00:00:33.730
have an integer variable declaration for a and is initialised 

10
00:00:33.730 --> 00:00:37.310
to 10 and suppose a is created at address 1024 

11
00:00:37.310 --> 00:00:40.780
next we have int *ptr which means ptr 

12
00:00:40.780 --> 00:00:44.070
is an integer Pointer. so ptr can store the address 

13
00:00:44.070 --> 00:00:47.519
of an integer variable and we are assigning the value 

14
00:00:47.640 --> 00:00:50.129
&a that is address of A which is 

15
00:00:50.130 --> 00:00:51.349
1024 

16
00:00:51.640 --> 00:00:52.250
So Ptr

17
00:00:52.250 --> 00:00:52.370


18
00:00:52.370 --> 00:00:55.940
will store 1024 and refers to a and suppose it 

19
00:00:55.940 --> 00:00:59.839
is created at address 2024. so we can get this 

20
00:00:59.840 --> 00:01:01.800
address using &ptr 

21
00:01:02.340 --> 00:01:05.710
Next we have int **dptr which means 

22
00:01:05.710 --> 00:01:08.149
dptr is an integer double pointer 

23
00:01:08.510 --> 00:01:12.580
Two stars are used for double pointers so dptr 

24
00:01:12.580 --> 00:01:16.040
can store the address of an integer pointer and 

25
00:01:16.050 --> 00:01:19.259
we are assigning the value &Ptr that is address 

26
00:01:19.260 --> 00:01:21.540
of ptr which is 2024 

27
00:01:21.670 --> 00:01:25.880
So dptr will store 2024 and refers to ptr and 

28
00:01:25.880 --> 00:01:29.880
suppose it is created at Address 3024 so we can 

29
00:01:29.880 --> 00:01:31.580
get this address using  

30
00:01:31.580 --> 00:01:32.750
&dptr

31
00:01:33.140 --> 00:01:34.960
Now we have some print statements 

32
00:01:34.980 --> 00:01:37.760
First of all we have address of a=&a 

33
00:01:37.760 --> 00:01:40.690
 and one thing you must have noted here 

34
00:01:40.690 --> 00:01:41.490
is %p

35
00:01:41.500 --> 00:01:42.300
format 

36
00:01:42.300 --> 00:01:45.020
Specifier, which is used to print the hexa 

37
00:01:45.020 --> 00:01:48.330
decimal memory location or the address of a variable 

38
00:01:48.560 --> 00:01:51.130
So this statement will print the address of A which 

39
00:01:51.130 --> 00:01:54.560
is 1024 and we will get the output address of a

40
00:01:54.570 --> 00:01:56.320
equal to 1024 

41
00:01:56.540 --> 00:02:00.250
Next we have ptr is pointing to address ptr again 

42
00:02:00.260 --> 00:02:01.010
as we learned 

43
00:02:01.020 --> 00:02:03.610
If it just write the name of variable it returns 

44
00:02:03.610 --> 00:02:05.960
the value  stored in it and we get value store 

45
00:02:05.960 --> 00:02:08.940
in ptr which is address 1024 

46
00:02:09.240 --> 00:02:10.640
So we get this output 

47
00:02:10.800 --> 00:02:14.120
Next we have dptr is pointing to the address dptr 

48
00:02:14.340 --> 00:02:14.700
again 

49
00:02:14.710 --> 00:02:17.160
It will print the Value store in dptr which is 

50
00:02:17.160 --> 00:02:19.780
2024 and we get the output 

51
00:02:19.780 --> 00:02:22.549
dptr is pointing to the address 2024

52
00:02:22.550 --> 00:02:25.829
next we have value of a equal to a which 

53
00:02:25.830 --> 00:02:28.550
will print the value of variable a which is 10 

54
00:02:28.940 --> 00:02:32.200
next we are printing *ptr and as we know 

55
00:02:32.200 --> 00:02:33.899
ptr=1024

56
00:02:33.900 --> 00:02:37.550
So we got *1024  which returns the value at 

57
00:02:37.560 --> 00:02:41.489
address 1024 which is 10 again. next we are Printing 

58
00:02:41.490 --> 00:02:45.920
**dptr and dptr=what? 2024 

59
00:02:45.930 --> 00:02:50.520
So we got **2024 and this *2024 

60
00:02:50.520 --> 00:02:53.820
returns the value at 2024 which is 1024 

61
00:02:53.820 --> 00:02:57.780
Now we got *1024 and it returns the 

62
00:02:57.780 --> 00:03:00.980
value at address 1024 which is 10 again 

63
00:03:01.240 --> 00:03:05.420
So remember this always star followed by some address returns 

64
00:03:05.420 --> 00:03:08.370
The value at that address and & followed by 

65
00:03:08.370 --> 00:03:11.450
a variable name returns the address of that variable 

66
00:03:11.740 --> 00:03:13.950
So that's all about double pointers 

67
00:03:14.440 --> 00:03:16.730
So that's all and thank you for watching this video 

