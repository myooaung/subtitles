WEBVTT

1
00:00:00.640 --> 00:00:01.490
Hello friends 

2
00:00:01.540 --> 00:00:04.540
In this video let us learn how to analyse an 

3
00:00:04.540 --> 00:00:05.250
algorithm 

4
00:00:06.340 --> 00:00:10.850
Generally two major factors are used to analyse any algorithm 

5
00:00:11.240 --> 00:00:12.110
one is time 

6
00:00:12.400 --> 00:00:15.860
That is how much time and algorithm takes to produce 

7
00:00:15.860 --> 00:00:18.860
the desired output and the second one is space 

8
00:00:18.890 --> 00:00:22.800
That is how much memory space the algorithm consumes to 

9
00:00:22.800 --> 00:00:24.350
produce the desired output 

10
00:00:25.040 --> 00:00:28.890
So first let us understand how to analyse the time 

11
00:00:28.890 --> 00:00:30.550
complexity of an algorithm 

12
00:00:31.040 --> 00:00:34.490
So the time complexity of an algorithm depends on various 

13
00:00:34.490 --> 00:00:39.230
factors such as machine architecture that is whether a machine 

14
00:00:39.240 --> 00:00:42.940
is a 32 bit architecture or a 64 bit architecture 

15
00:00:43.390 --> 00:00:46.640
Then on the processor of that the machine has that 

16
00:00:46.640 --> 00:00:49.810
is a machine can have a single core processor or 

17
00:00:49.810 --> 00:00:54.130
multi core processor then it depends on the execution type 

18
00:00:54.370 --> 00:00:58.220
that is the machine can execute instructions one by one 

19
00:00:58.530 --> 00:01:02.450
sequentially or it can execute multiple instructions parallely 

20
00:01:02.940 --> 00:01:07.020
Then the time complexity depends on the machine's memory access 

21
00:01:07.020 --> 00:01:07.370
time 

22
00:01:07.570 --> 00:01:11.460
That is how faster machine can read or write data 

23
00:01:11.470 --> 00:01:12.650
to or from the memory 

24
00:01:13.240 --> 00:01:16.500
And the last one is what input we're giving to 

25
00:01:16.500 --> 00:01:17.850
a particular algorithm 

26
00:01:18.440 --> 00:01:21.770
And when we analyse the time complexity of an algorithm 

27
00:01:22.070 --> 00:01:25.280
we do not bother about all these factors such as 

28
00:01:25.280 --> 00:01:30.900
machine architecture processor of its execution etc because these are 

29
00:01:30.900 --> 00:01:34.950
machine dependent factors which memory from machine to machine 

30
00:01:35.340 --> 00:01:39.090
So in general we analyse the time complexity of an 

31
00:01:39.100 --> 00:01:43.780
algorithm based on the given input that is for given 

32
00:01:43.790 --> 00:01:47.920
input how much time and space the algorithm takes to 

33
00:01:47.920 --> 00:01:49.450
produce the desired output 

34
00:01:50.140 --> 00:01:53.070
And every machine is unique in its own way 

35
00:01:53.420 --> 00:01:57.150
Some machines can have sequential execution in some other machines 

36
00:01:57.150 --> 00:02:01.210
can have parallel execution and we can't analyse the algorithm 

37
00:02:01.210 --> 00:02:03.150
for every individual machine 

38
00:02:03.840 --> 00:02:07.100
So let us first built our model machine to an analyse

39
00:02:07.100 --> 00:02:10.640
the algorithm and our model machine will have these 

40
00:02:10.640 --> 00:02:11.270
features 

41
00:02:11.510 --> 00:02:12.460
It is said 32 

42
00:02:12.460 --> 00:02:15.850
Bit Architecture Machine has a single coreprocessor 

43
00:02:16.240 --> 00:02:20.270
It will execute instructions sequentially that is one after one 

44
00:02:20.270 --> 00:02:23.760
manner and it takes one unit of time for the 

45
00:02:23.760 --> 00:02:28.600
basic operations like read write assignment and return statements 

46
00:02:28.970 --> 00:02:33.500
For example the instruction int i equal to zero takes one 

47
00:02:33.500 --> 00:02:37.750
unit of time and the statement return zero also takes 

48
00:02:37.750 --> 00:02:38.750
one unit of time 

49
00:02:39.340 --> 00:02:42.880
So these kind of basic operations will take one unit 

50
00:02:42.880 --> 00:02:46.850
of time and to make the analysing even simpler 

51
00:02:46.930 --> 00:02:50.980
We can make the assumption that every simple statement takes 

52
00:02:50.990 --> 00:02:52.150
one unit of time 

53
00:02:52.940 --> 00:02:56.820
For example this is a statement with three assignments but 

54
00:02:56.820 --> 00:03:00.520
still we can assume it takes one unit time as 

55
00:03:00.530 --> 00:03:01.950
it is a simple statement 

56
00:03:02.740 --> 00:03:03.910
Say another statement 

57
00:03:03.910 --> 00:03:09.300
Here here we have multiple arithmetic operations but again by 

58
00:03:09.310 --> 00:03:12.350
our assumption it takes one unit of time 

59
00:03:12.840 --> 00:03:16.680
Similarly this statement will also take one unit of time 

60
00:03:16.690 --> 00:03:18.820
So that is our model machine 

61
00:03:18.910 --> 00:03:22.650
Now let us analyse the time and space complexity of 

62
00:03:22.660 --> 00:03:25.550
the swapping algorithm with our model machine 

63
00:03:26.240 --> 00:03:29.150
First let us talk about the time complexity 

64
00:03:29.640 --> 00:03:32.780
First we have temp equal to a and this is 

65
00:03:32.780 --> 00:03:33.840
a simple statement 

66
00:03:33.970 --> 00:03:36.250
Hence it takes one unit of time 

67
00:03:36.890 --> 00:03:40.280
Next statement is a equal to b again 

68
00:03:40.440 --> 00:03:44.170
It is a simple assignment statement so it also takes 

69
00:03:44.180 --> 00:03:45.350
one unit of time 

70
00:03:45.940 --> 00:03:49.650
The third statement is b equal to temp again 

71
00:03:49.910 --> 00:03:51.850
It will take one unit of time 

72
00:03:52.340 --> 00:03:55.490
So what is the total time taken It is t 

73
00:03:55.490 --> 00:03:58.670
of X equal to one plus one plus one 

74
00:03:59.090 --> 00:04:02.810
That is the time complexity function to T of x equal do 

75
00:04:02.810 --> 00:04:06.760
three which means whatever may be the value of X 

76
00:04:06.960 --> 00:04:09.860
The T of X function will remain in some constant 

77
00:04:09.860 --> 00:04:10.250
value 

78
00:04:10.840 --> 00:04:14.230
Say this graph for every value of X the T 

79
00:04:14.230 --> 00:04:18.170
of X value remains constant so we can call this 

80
00:04:18.180 --> 00:04:20.950
algorithm as a constant time algorithm 

81
00:04:21.640 --> 00:04:25.210
So that time complexity of the swapping algorithm is order 

82
00:04:25.210 --> 00:04:29.770
of one which means that time complexity does not depend 

83
00:04:29.780 --> 00:04:31.160
on the given input 

84
00:04:31.170 --> 00:04:35.470
In this algorithm it will remain constant for any given 

85
00:04:35.480 --> 00:04:36.050
input 

86
00:04:36.740 --> 00:04:40.280
In general we used this big O notation to represent the 

87
00:04:40.280 --> 00:04:41.350
time complexity 

88
00:04:41.840 --> 00:04:45.870
But we also have other notations like Theta Omega 

89
00:04:46.840 --> 00:04:49.350
We will learn about them in the coming lessons 

90
00:04:49.740 --> 00:04:51.820
So that was the time complexity 

91
00:04:52.210 --> 00:04:56.200
Now let us discuss about the space complexity in the 

92
00:04:56.200 --> 00:04:57.190
swap function 

93
00:04:57.200 --> 00:05:00.450
We have two parameters Variables A and B 

94
00:05:01.140 --> 00:05:01.410
So let us

95
00:05:01.410 --> 00:05:04.530
say a takes one unit of memory and b

96
00:05:04.540 --> 00:05:06.550
also takes one unit of memory 

97
00:05:07.040 --> 00:05:11.080
Then in the first statement we have TEMP equal to 

98
00:05:11.080 --> 00:05:12.220
a that is 

99
00:05:12.230 --> 00:05:15.860
There is a new variable other than A and B and 

100
00:05:15.870 --> 00:05:19.240
it will also take one unit of memory and the 

101
00:05:19.240 --> 00:05:22.880
next statement equal to b And we have already taken 

102
00:05:22.890 --> 00:05:25.640
A and B so there is no issue and next 

103
00:05:25.640 --> 00:05:27.840
we have be equal temp again 

104
00:05:27.960 --> 00:05:32.220
Both b and temp are already considered so that so 

105
00:05:32.530 --> 00:05:36.390
So the total memory taken by this swap algorithm is 

106
00:05:36.590 --> 00:05:39.520
one plus one plus one that is three units of 

107
00:05:39.520 --> 00:05:39.960
memory 

108
00:05:40.210 --> 00:05:43.930
So space complexity s of X is equal to three which 

109
00:05:43.930 --> 00:05:45.350
is also a constant 

110
00:05:45.600 --> 00:05:49.350
So this algorithm takes only a fixed amount of memory 

111
00:05:49.840 --> 00:05:52.470
and the space complexity is order of one 

112
00:05:53.140 --> 00:05:56.240
So that was the time and space complexity and analysis 

113
00:05:56.250 --> 00:05:58.840
of the swapping algorithm which is a very simple  

114
00:05:58.840 --> 00:05:59.350
algorithm 

115
00:06:00.040 --> 00:06:03.380
And we got time and space complexity is equal to 

116
00:06:03.390 --> 00:06:04.250
order of one 

117
00:06:05.040 --> 00:06:08.510
They will discuss more complex algorithms and its analysis in 

118
00:06:08.510 --> 00:06:09.560
the upcoming videos 

