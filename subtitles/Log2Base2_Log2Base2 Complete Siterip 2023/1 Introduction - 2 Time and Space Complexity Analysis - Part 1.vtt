WEBVTT

1
00:00:00.140 --> 00:00:00.960
Hello friends 

2
00:00:01.110 --> 00:00:04.800
In this video let us understand how to analyse time 

3
00:00:04.810 --> 00:00:08.490
and space complexity of algorithms with examples. 

4
00:00:13.940 --> 00:00:17.690
First let us take a simple algorithm with just one 

5
00:00:17.690 --> 00:00:22.850
statement. We have int i is equal to 10 a single

6
00:00:22.860 --> 00:00:27.390
assignment statement and as per our assumption it takes one 

7
00:00:27.390 --> 00:00:28.250
unit of time. 

8
00:00:28.940 --> 00:00:31.690
So the time complexity t of x t(x) is equal to 

9
00:00:31.690 --> 00:00:32.070
one, 

10
00:00:32.340 --> 00:00:34.650
we can say it takes a constant time.

11
00:00:35.340 --> 00:00:39.290
So the time complexity of this algorithm is equal to 

12
00:00:39.300 --> 00:00:40.250
order of one O(1).

13
00:00:41.440 --> 00:00:44.170
And here we have just one variable and let us say

14
00:00:44.170 --> 00:00:47.100
it takes one unit of memory also, 

15
00:00:47.540 --> 00:00:49.650
So s of x s(x) is equal to one 

16
00:00:50.140 --> 00:00:53.450
So the space complexity is also order of one O(1). 

17
00:00:54.140 --> 00:00:57.720
Now let us add two more statements to this algorithm 

18
00:00:58.340 --> 00:01:01.280
i = i * 2 + 5 and 

19
00:01:01.280 --> 00:01:04.170
i = i++. What will be the time 

20
00:01:04.170 --> 00:01:05.940
complexity of this algorithm now?

21
00:01:05.940 --> 00:01:10.270
As we said these two statements are also simple 

22
00:01:10.270 --> 00:01:10.990
statements, 

23
00:01:11.110 --> 00:01:15.090
so these will also take one unit time each. 

24
00:01:15.100 --> 00:01:18.240
So the total time taken is 1+1+1

25
00:01:18.240 --> 00:01:22.230
that is t of x will be equal to 3 ( t(x) = 3 ) which 

26
00:01:22.230 --> 00:01:26.030
is also a constant value that is whatever the value 

27
00:01:26.030 --> 00:01:26.800
of i be 

28
00:01:26.950 --> 00:01:29.650
the time taken will be 3 units to get the 

29
00:01:29.650 --> 00:01:30.220
output. 

30
00:01:30.940 --> 00:01:34.190
So the time complexity is order of one O(1) again. 

31
00:01:34.840 --> 00:01:38.570
Now what about the space complexity? We have variable i 

32
00:01:38.970 --> 00:01:42.530
which will take one unit of memory and in second 

33
00:01:42.540 --> 00:01:43.630
and third statements 

34
00:01:43.640 --> 00:01:47.750
also we have just i and there are no other 

35
00:01:47.750 --> 00:01:48.500
variables, 

36
00:01:48.710 --> 00:01:51.790
so there is only one variable i requiring memory 

37
00:01:51.870 --> 00:01:56.290
so the total memory required is one unit. so  

38
00:01:56.290 --> 00:01:59.450
s of x s(x) equal to one which is also a constant value, 

39
00:01:59.840 --> 00:02:03.750
So the space complexity is equal to order of one O(1). 

40
00:02:04.840 --> 00:02:08.180
Now let us take another programme here to check, 

41
00:02:08.500 --> 00:02:12.320
if a number is positive or negative. Let us calculate 

42
00:02:12.320 --> 00:02:15.350
the time and space complexity of this algorithm. 

43
00:02:15.940 --> 00:02:16.510
Here 

44
00:02:16.710 --> 00:02:20.540
the first statement is the simple assignment statement so it 

45
00:02:20.540 --> 00:02:22.150
will take one unit of time, 

46
00:02:22.540 --> 00:02:25.680
Next we have a scan a statement which is also 

47
00:02:25.680 --> 00:02:26.770
a simple statement, 

48
00:02:26.980 --> 00:02:29.250
so it will also take one unit time. 

49
00:02:30.040 --> 00:02:32.060
Next we have a conditional statement 

50
00:02:32.070 --> 00:02:35.430
we have if else if else statements here. 

51
00:02:36.340 --> 00:02:40.950
So what happens here? for a given input either if statement 

52
00:02:40.950 --> 00:02:44.880
will work or else if part will work or else 

53
00:02:44.880 --> 00:02:48.880
part will work. Simply any one of these cases will 

54
00:02:48.880 --> 00:02:50.450
work for a given input. 

55
00:02:50.840 --> 00:02:54.880
For example if num is equal to zero only if 

56
00:02:54.890 --> 00:02:57.740
part will work else if and else part will be 

57
00:02:57.740 --> 00:03:01.770
skipped and if num equal to minus one if will 

58
00:03:01.770 --> 00:03:05.250
fail and else if will work and else will be skipped. 

59
00:03:05.640 --> 00:03:07.720
and if num equal to four 

60
00:03:07.730 --> 00:03:10.920
if will fail so it won't work and else if 

61
00:03:10.920 --> 00:03:12.000
will also fail 

62
00:03:12.180 --> 00:03:15.370
and hence it will be skipped and the else part 

63
00:03:15.380 --> 00:03:18.610
will only work. So for an input value 

64
00:03:18.770 --> 00:03:22.180
only one of these three will work, so we can 

65
00:03:22.180 --> 00:03:25.220
take one unit of time for the whole case check

66
00:03:25.360 --> 00:03:27.880
and one unit of time for the inner printf 

67
00:03:27.880 --> 00:03:28.800
statement. 

68
00:03:28.950 --> 00:03:33.130
So total two units of time and the final written 

69
00:03:33.130 --> 00:03:35.400
statement will also take one unit time, 

70
00:03:35.610 --> 00:03:38.880
So the total time taken t of x is equal to 

71
00:03:38.880 --> 00:03:41.160
five t(x) = 5, which is a constant value 

72
00:03:41.290 --> 00:03:44.920
So the time complexity for this programme is order of 

73
00:03:44.920 --> 00:03:45.350
one O(1).

74
00:03:46.340 --> 00:03:49.830
Now what about the space complexity? In the whole programme 

75
00:03:49.840 --> 00:03:53.640
we only used one variable num and we have only 

76
00:03:53.640 --> 00:03:55.570
used constance other than that, 

77
00:03:55.850 --> 00:03:59.640
so the memory taken is just one unit. So s of x is equal to one

78
00:03:59.640 --> 00:04:01.970
s(x) = 1 which is a constant. 

79
00:04:02.020 --> 00:04:05.150
Hence the space complexity of this algorithm 

80
00:04:05.150 --> 00:04:06.450
is order of one O(1).

81
00:04:07.040 --> 00:04:11.010
Now let us analyse the algorithm to find if X

82
00:04:11.020 --> 00:04:12.980
is a factor of N or not. 

83
00:04:13.740 --> 00:04:16.900
First we have a declaration statement which will take one 

84
00:04:16.900 --> 00:04:20.540
unit time and the next printf statement will also 

85
00:04:20.540 --> 00:04:21.580
take one unit time 

86
00:04:22.040 --> 00:04:24.710
and the same happens with scanf statement also. 

87
00:04:25.740 --> 00:04:28.960
And now we have a conditional check, here for a 

88
00:04:28.970 --> 00:04:32.620
given value of N and X either if part will 

89
00:04:32.620 --> 00:04:34.850
work or the else part will work. 

90
00:04:35.240 --> 00:04:38.390
So for this case check we can say it takes 

91
00:04:38.400 --> 00:04:41.980
one unit of time and for the print statement inside 

92
00:04:42.310 --> 00:04:44.350
it takes one unit again. 

93
00:04:44.940 --> 00:04:47.580
So a total of two units will be taken for 

94
00:04:47.580 --> 00:04:48.550
this part only 

95
00:04:49.240 --> 00:04:52.500
And the final returns statement will also take 1 unit 

96
00:04:52.500 --> 00:04:55.990
time. So t of x equal to  

97
00:04:55.990 --> 00:04:58.580
t(x) = 1 + 1 + 1 + 2 + 1 = 6  

98
00:04:58.580 --> 00:05:01.490
and it is a constant value. 

99
00:05:01.720 --> 00:05:05.430
So the algorithm will take only a constant time for any 

100
00:05:05.430 --> 00:05:07.650
input to produce the desired output. 

101
00:05:08.240 --> 00:05:11.150
So the time complexity is equal to order of one O(1).

102
00:05:12.140 --> 00:05:16.060
Now what about the space complexity? here we have variables 

103
00:05:16.070 --> 00:05:18.250
and N and X requiring memory. 

104
00:05:18.740 --> 00:05:20.790
So it takes two units totally 

105
00:05:21.060 --> 00:05:24.080
and other than that there is nothing that require memory 

106
00:05:24.080 --> 00:05:24.860
space here 

107
00:05:25.140 --> 00:05:27.690
So S of X is equal to two ( s(x) = 2 ) which is a 

108
00:05:27.700 --> 00:05:29.160
constant memory space. 

109
00:05:29.450 --> 00:05:33.270
So the space complexity of this algorithm is order of 

110
00:05:33.270 --> 00:05:33.650
one. 

111
00:05:34.640 --> 00:05:37.600
So this is how we can analyse algorithms and 

112
00:05:37.600 --> 00:05:41.960
find time and space complexity. In the coming videos we 

113
00:05:41.960 --> 00:05:45.370
will discuss more algorithms and their analysis. 

