WEBVTT

1
00:00:00.140 --> 00:00:03.140
let us understand how to implement this problem 

2
00:00:03.490 --> 00:00:07.010
First we need to store the node and its depth 

3
00:00:07.090 --> 00:00:08.250
together in the queue.

4
00:00:08.740 --> 00:00:12.340
For that let us create a structure named Q items 

5
00:00:12.350 --> 00:00:13.750
with two members 

6
00:00:14.140 --> 00:00:16.450
The first member is to store the node 

7
00:00:16.740 --> 00:00:18.950
write node * node 

8
00:00:19.720 --> 00:00:22.940
The second member is to store the depth so write

9
00:00:23.060 --> 00:00:23.550


10
00:00:24.640 --> 00:00:27.270
So in this problem we need to fill the no 

11
00:00:27.270 --> 00:00:31.240
details as well as the depth information in Q items 

12
00:00:31.610 --> 00:00:34.150
Then we need to push it into the queue 

13
00:00:34.940 --> 00:00:38.340
Now let us write the function to find the main 

14
00:00:38.340 --> 00:00:41.600
depth which takes only one argument that is the root 

15
00:00:41.600 --> 00:00:42.250
of the tree.

16
00:00:42.940 --> 00:00:45.590
And if it is an empty tree, we can straight away

17
00:00:45.590 --> 00:00:47.750
return min depth as zero 

18
00:00:48.140 --> 00:00:52.990
So write if root equal to null, return zero and if 

19
00:00:52.990 --> 00:00:56.120
the tree is not empty we need to store the root

20
00:00:56.120 --> 00:00:58.350
node and its depth in the queue.

21
00:00:58.840 --> 00:01:02.410
For that, let us create a Q that accepts Queue

22
00:01:02.410 --> 00:01:06.850
items variables so that we can store the node data 

23
00:01:06.860 --> 00:01:08.450
with its depth in the queue.

24
00:01:09.040 --> 00:01:10.570
So write Queue 

25
00:01:10.580 --> 00:01:15.710
Of Q items queue now create the queue items variable 

26
00:01:15.820 --> 00:01:18.250
to store the root node and its depth 

27
00:01:18.840 --> 00:01:19.520
So write 

28
00:01:19.830 --> 00:01:20.200
queue

29
00:01:20.210 --> 00:01:26.220
items now to store the node, write dot not equal 

30
00:01:26.220 --> 00:01:28.080
to root for the root node

31
00:01:28.080 --> 00:01:28.460


32
00:01:28.540 --> 00:01:30.850
We will set its depth as one.

33
00:01:31.440 --> 00:01:34.750
So write q.depth equal to one 

34
00:01:35.430 --> 00:01:38.760
Now we can push this into the queue. So write

35
00:01:38.970 --> 00:01:42.880
cured are push(key) now in BFS

36
00:01:42.890 --> 00:01:46.170
What will we do While the queue is not empty 

37
00:01:46.180 --> 00:01:48.710
we will pop the first element and push 

38
00:01:48.720 --> 00:01:53.830
it's left and right child. So write while not cured 

39
00:01:53.830 --> 00:01:58.050
out empty store the front Q.item and poor pit 

40
00:01:58.050 --> 00:01:58.890
from the queue 

41
00:01:59.060 --> 00:01:59.790
So write

42
00:02:00.150 --> 00:02:06.340
Q items front node equal to q.front and 

43
00:02:06.340 --> 00:02:08.980
then to pop the item from the queue 

44
00:02:09.110 --> 00:02:10.950
write q.pop

45
00:02:11.640 --> 00:02:14.510
Now we have the front Q items data in the 

46
00:02:14.510 --> 00:02:16.050
variable front node. 

47
00:02:16.640 --> 00:02:19.890
From that we can keep the node and depth details 

48
00:02:19.900 --> 00:02:21.730
and store it for future use. 

49
00:02:22.440 --> 00:02:26.480
So to get the node's details write node * node 

50
00:02:26.490 --> 00:02:30.740
equal to front node.node and to get the 

51
00:02:30.740 --> 00:02:35.390
depth just write in depth equal to front node.depth

52
00:02:35.400 --> 00:02:39.540
now we will check whether the left and right 

53
00:02:39.540 --> 00:02:40.650
nodes are present.

54
00:02:41.040 --> 00:02:44.470
If present, we need to create a Queue item with 

55
00:02:44.480 --> 00:02:48.350
node and depth detailed and push it into the queue 

56
00:02:48.940 --> 00:02:52.950
First let us check whether the left node is not 

57
00:02:53.340 --> 00:02:57.970
So write if node left not equal to null. If it 

58
00:02:57.970 --> 00:03:01.010
is not, we need to create the queue item 

59
00:03:01.020 --> 00:03:04.110
and push it into the queue. So to store the 

60
00:03:04.110 --> 00:03:09.690
left node, write queue.node equal to node left 

61
00:03:09.690 --> 00:03:12.840
We need to mark the child node's depth as parent node's

62
00:03:12.840 --> 00:03:18.620
depth + 1. So write.depth equal to depth + 1 

63
00:03:18.630 --> 00:03:23.170
and push this information into the queue.

64
00:03:23.170 --> 00:03:28.480
So write queue.push(key) Similarly we need to write 

65
00:03:28.480 --> 00:03:31.620
the logic for the right node. So this while loop

66
00:03:31.620 --> 00:03:34.800
will do this BFS process until the queue 

67
00:03:34.800 --> 00:03:39.110
become empty. And while doing this process, if we find 

68
00:03:39.110 --> 00:03:42.980
the leaf node, we can simply return its depth. That 

69
00:03:42.980 --> 00:03:45.840
will be the minimum depth of the tree. So check 

70
00:03:45.900 --> 00:03:48.750
if we have reached the leaf node before pushing the 

71
00:03:48.750 --> 00:03:51.850
left and right node. And if we reach the leaf 

72
00:03:51.850 --> 00:03:56.180
node, just return the tact. So write if node left 

73
00:03:56.190 --> 00:04:01.900
equal to null and node right equal to null return up Finally 

