WEBVTT

1
00:00:00.090 --> 00:00:03.770
So let us see the implementation now. So we have the function 

2
00:00:03.770 --> 00:00:06.640
get nth node and we pass the head of the 

3
00:00:06.640 --> 00:00:08.690
list and index to the function 

4
00:00:08.870 --> 00:00:12.010
And here this is the list and the given index is two. 

5
00:00:12.010 --> 00:00:16.460
So first declare the variable temp and initialise to 

6
00:00:16.460 --> 00:00:16.870
 

7
00:00:17.340 --> 00:00:20.950
So temp points to head and now we need a 

8
00:00:20.960 --> 00:00:21.960
counter variable 

9
00:00:22.300 --> 00:00:26.720
So declare and initialise count to 0. Now we will 

10
00:00:26.730 --> 00:00:30.600
iterate the list completely. So use a while loop 

11
00:00:30.610 --> 00:00:35.100
While temp is not equal to null and inside first

12
00:00:35.100 --> 00:00:38.170
we have to check if count is equal to index 

13
00:00:38.410 --> 00:00:41.810
and zero is not equal to two. So it fails. 

14
00:00:41.810 --> 00:00:44.850
So increment count and move temp to the next node 

15
00:00:45.640 --> 00:00:48.830
And in the next iteration, the condition is okay. 

16
00:00:48.830 --> 00:00:52.620
So check if count equal to index and we have one 

17
00:00:52.630 --> 00:00:56.280
not equal to two. So again it fails. 

18
00:00:56.280 --> 00:00:59.150
So increment count and move temp to next node 

19
00:00:59.640 --> 00:01:02.940
Now in the next iteration, the condition is still true 

20
00:01:03.070 --> 00:01:05.950
So go inside and check if count is equal to 

21
00:01:05.960 --> 00:01:09.590
index. And now it is. So this is the second 

22
00:01:09.590 --> 00:01:14.250
node. So return temp data which is 30 to the calling function 

23
00:01:14.840 --> 00:01:17.540
So this is how we can get nth node from 

24
00:01:17.540 --> 00:01:18.460
a linked list. 

25
00:01:19.040 --> 00:01:21.850
And if the given index is greater than three or 

26
00:01:21.850 --> 00:01:25.390
the size of the list, then this if condition will 

27
00:01:25.390 --> 00:01:29.080
never be true and the while loop will get exhausted 

28
00:01:29.540 --> 00:01:31.550
and it will return -1.

