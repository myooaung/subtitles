WEBVTT

1
00:00:00.540 --> 00:00:03.650
in this video let us learn how to implement a 

2
00:00:03.650 --> 00:00:05.550
queue using a linked list 

3
00:00:06.140 --> 00:00:09.010
We know we can implement a queue using an array 

4
00:00:09.160 --> 00:00:13.010
But if we implemented using an array we need to 

5
00:00:13.010 --> 00:00:16.550
specify the array size at the beginning that is 

6
00:00:16.560 --> 00:00:17.300
at compile 

7
00:00:17.300 --> 00:00:21.300
Time we cannot change the size of an array at run time 

8
00:00:21.590 --> 00:00:24.520
so it will only work for a fixed number of 

9
00:00:24.530 --> 00:00:27.820
elements or as a fixed size queue so 

10
00:00:27.820 --> 00:00:30.870
A solution to this problem is we can use the 

11
00:00:30.870 --> 00:00:34.090
linked list to implement a queue in the linked list 

12
00:00:34.100 --> 00:00:37.600
We can change its size at runtime so let us 

13
00:00:37.600 --> 00:00:40.850
see how to perform and enqueue and dequeue operation 

14
00:00:41.140 --> 00:00:45.080
Then we implement queue Using linked list we need to 

15
00:00:45.090 --> 00:00:48.990
keep track of rear and front where insertion and deletion 

16
00:00:48.990 --> 00:00:49.730
happens 

17
00:00:49.800 --> 00:00:52.760
So first let us see how to perform and enqueue 

18
00:00:52.770 --> 00:00:55.300
So for the linked list here we don't need a 

19
00:00:55.300 --> 00:00:56.400
reference to head 

20
00:00:56.760 --> 00:01:00.620
Instead we will need front and rear at the opposite 

21
00:01:00.630 --> 00:01:03.650
ends and at first the queue is empty 

22
00:01:03.840 --> 00:01:06.780
It's a node front equal to null and rear equal 

23
00:01:06.780 --> 00:01:09.820
to null and we have the enqueue function to 

24
00:01:09.830 --> 00:01:12.820
insert a value into the queue and we will pass 

25
00:01:12.820 --> 00:01:15.650
the value to be inserted into this function 

26
00:01:16.140 --> 00:01:19.770
So we have public void enqueue of in val 

27
00:01:20.010 --> 00:01:22.640
Let the value to be inserted be ten 

28
00:01:22.650 --> 00:01:25.820
So how can we insert a value here First we 

29
00:01:25.820 --> 00:01:29.910
have to create a new node with val then check if 

30
00:01:29.910 --> 00:01:31.150
the queue is empty 

31
00:01:31.540 --> 00:01:34.630
If it is then we need to make both front 

32
00:01:34.640 --> 00:01:36.450
and rear point to the new node 

33
00:01:36.840 --> 00:01:40.020
If it is not insert the new node at rear 

34
00:01:40.150 --> 00:01:41.750
so let us see how it works 

35
00:01:42.240 --> 00:01:45.100
First we have to create a new node to store 

36
00:01:45.100 --> 00:01:45.850
this value 

37
00:01:46.340 --> 00:01:50.680
So write node new node equal to new node 

38
00:01:50.780 --> 00:01:53.830
So a new node is created and now we need 

39
00:01:53.830 --> 00:01:55.470
to add the value to it 

40
00:01:55.480 --> 00:01:59.470
So write new node dot data equal to Val and 

41
00:01:59.470 --> 00:02:01.190
let its next point to null 

42
00:02:01.400 --> 00:02:04.920
So we have new node dot next equal to null so 

43
00:02:04.920 --> 00:02:08.070
10 is added to this node and it is pointing 

44
00:02:08.070 --> 00:02:10.450
to null now the node is ready 

45
00:02:11.140 --> 00:02:14.400
Now we know insertion happens at the rear end so 

46
00:02:14.400 --> 00:02:16.880
the node should be inserted at rear end 

47
00:02:17.640 --> 00:02:19.120
But we should first check 

48
00:02:19.130 --> 00:02:22.150
If the queue is empty that is the linked list 

49
00:02:22.150 --> 00:02:26.850
here check if front equal to null and rear equal to null and 

50
00:02:26.860 --> 00:02:29.750
it is here which means the queue is empty 

51
00:02:29.760 --> 00:02:32.570
So the new node that we are going to insert 

52
00:02:32.580 --> 00:02:34.720
will be both rear and Front 

53
00:02:34.820 --> 00:02:37.440
So said front equal to rear equal to new 

54
00:02:37.440 --> 00:02:37.850
node 

55
00:02:38.440 --> 00:02:41.290
So we have the queue now with one element in 

56
00:02:41.470 --> 00:02:43.890
which is both the front and rear 

57
00:02:43.900 --> 00:02:46.540
Now let us insert another element 20 

58
00:02:46.820 --> 00:02:48.450
So val equal to 20 

59
00:02:48.940 --> 00:02:52.260
So first create the new node and assigned the value 

60
00:02:52.260 --> 00:02:52.740
to it 

61
00:02:52.820 --> 00:02:56.110
So 20 is added at the data part and make 

62
00:02:56.110 --> 00:02:57.150
it a point to null 

63
00:02:57.840 --> 00:02:59.190
So the node is ready 

64
00:02:59.550 --> 00:03:01.150
Now we need to insert it 

65
00:03:01.540 --> 00:03:04.150
So first check if the queue is empty 

66
00:03:04.160 --> 00:03:07.220
So we have if front equal to null and rear 

67
00:03:07.230 --> 00:03:08.050
equal to null 

68
00:03:08.440 --> 00:03:09.800
But it is not so 

69
00:03:09.800 --> 00:03:12.560
We go to the else part and it should be 

70
00:03:12.560 --> 00:03:13.850
inserted at rear 

71
00:03:14.000 --> 00:03:16.980
So write rear dot next equal to new node 

72
00:03:16.990 --> 00:03:20.820
So the new node is inserted after rear and now 

73
00:03:20.820 --> 00:03:24.580
we need to make rear point to new node so write rear 

74
00:03:24.590 --> 00:03:25.650
equal to new node 

75
00:03:26.240 --> 00:03:27.200
And that is done 

76
00:03:27.350 --> 00:03:30.390
And we now have the queue with two elements 10 

77
00:03:30.400 --> 00:03:33.880
and 20 where front is pointing 10 and rear is 

78
00:03:33.880 --> 00:03:34.930
pointing 20 

79
00:03:34.940 --> 00:03:38.610
Now let us insert another element 30 so call 

80
00:03:38.610 --> 00:03:39.010
enqueue 

81
00:03:39.020 --> 00:03:39.750
Of 30 

82
00:03:40.240 --> 00:03:43.220
So first create the new node and assigned the value 

83
00:03:43.220 --> 00:03:43.650
to it 

84
00:03:44.040 --> 00:03:46.910
So 30 is added at the data part and make 

85
00:03:46.910 --> 00:03:47.840
it a point to null 

86
00:03:48.440 --> 00:03:50.700
So the node is ready and now we need to 

87
00:03:50.710 --> 00:03:51.470
insert it 

88
00:03:51.610 --> 00:03:52.410
So check 

89
00:03:52.460 --> 00:03:55.940
If the queue is empty so we have if front 

90
00:03:55.940 --> 00:03:58.860
equal to null and rear equal to null but it is 

91
00:03:58.860 --> 00:03:59.620
not so 

92
00:03:59.620 --> 00:04:00.950
Go to the else part 

93
00:04:01.450 --> 00:04:05.130
It should be inserted at rear so write rear dot 

94
00:04:05.130 --> 00:04:06.750
next equal to new node 

95
00:04:07.140 --> 00:04:10.670
So the new node is inserted after rear now make 

96
00:04:10.680 --> 00:04:11.480
rear point to 

97
00:04:11.480 --> 00:04:12.070
New node 

98
00:04:12.210 --> 00:04:14.490
So write rear equal to new node 

99
00:04:14.710 --> 00:04:18.370
We now have the queue with three elements 10 20 

100
00:04:18.380 --> 00:04:19.370
and 30 where 

101
00:04:19.370 --> 00:04:22.850
front is pointing 10 and rear is pointing 30 

102
00:04:23.240 --> 00:04:26.800
So that is how we can perform and enqueue operation so let 

103
00:04:26.800 --> 00:04:29.290
us see how to perform dequeue operation 

104
00:04:29.300 --> 00:04:32.000
So as we know queue is first in first out 

105
00:04:32.000 --> 00:04:32.850
data structure 

106
00:04:33.240 --> 00:04:37.260
Insertion happens at rear end and deletion happens at front end 

107
00:04:37.510 --> 00:04:40.770
so when we call this dequeue function the element at

108
00:04:40.770 --> 00:04:43.200
front of the queue will be deleted 

109
00:04:43.360 --> 00:04:45.380
So we have public void 

110
00:04:45.380 --> 00:04:46.620
dequeue first 

111
00:04:46.630 --> 00:04:49.150
We need to check If the queue is empty 

112
00:04:49.230 --> 00:04:51.250
That he is if front is null 

113
00:04:51.640 --> 00:04:54.940
And if it is then deletion is not possible since 

114
00:04:54.940 --> 00:04:57.210
the queue is empty so printed 

115
00:04:57.310 --> 00:04:59.340
But here it is not empty 

116
00:04:59.650 --> 00:05:02.770
So go to else part and print the element which 

117
00:05:02.770 --> 00:05:05.780
is to be dequeued so print  

118
00:05:05.780 --> 00:05:08.500
dequeued element is front dot data 

119
00:05:08.510 --> 00:05:10.190
So we will get the output 

120
00:05:10.300 --> 00:05:12.290
dequeued element equal to 10 

121
00:05:12.400 --> 00:05:15.350
Now we need to delete front and make its next 

122
00:05:15.350 --> 00:05:19.120
node different of queue So we have front equal to 

123
00:05:19.120 --> 00:05:20.380
front dot Next 

124
00:05:20.620 --> 00:05:22.590
So front equal to 2000 

125
00:05:22.590 --> 00:05:22.970
Now

126
00:05:23.200 --> 00:05:26.020
Now we need to check whether the queue has become 

127
00:05:26.030 --> 00:05:28.630
empty by this deletion operation 

128
00:05:28.940 --> 00:05:32.570
So write if front equal to null and if it is 

129
00:05:32.660 --> 00:05:35.060
we have to set rear equal to null 

130
00:05:35.070 --> 00:05:38.800
Also this case is for deleting the last element of 

131
00:05:38.810 --> 00:05:39.350
the queue 

132
00:05:39.640 --> 00:05:42.450
But it is not true here So that is how 

133
00:05:42.450 --> 00:05:44.600
we can perform dequeue operation 

134
00:05:44.770 --> 00:05:46.650
Now that is called dequeue again 

135
00:05:47.040 --> 00:05:50.230
So first check if the queue is empty but it 

136
00:05:50.230 --> 00:05:53.250
is not so go to else part and print the 

137
00:05:53.250 --> 00:05:56.960
element at front So we will get dequeued element 

138
00:05:56.960 --> 00:06:00.480
equal to 20 Now make its next node the front 

139
00:06:00.480 --> 00:06:04.030
of queue by writing front equal to front dot Next 

140
00:06:04.370 --> 00:06:08.410
So front equal to 3000 Now Now check if front 

141
00:06:08.410 --> 00:06:11.810
equal to null but it is not so The operation is 

142
00:06:11.810 --> 00:06:12.790
now completed 

143
00:06:13.180 --> 00:06:15.150
Now let us call dequeue again 

144
00:06:15.540 --> 00:06:18.580
So first check if the queue is empty but it 

145
00:06:18.580 --> 00:06:21.530
is not so go to else and print the element 

146
00:06:21.530 --> 00:06:22.190
at front 

147
00:06:22.440 --> 00:06:23.970
So we will get dequeued 

148
00:06:23.970 --> 00:06:26.940
element equal to 30 Now we need to make 

149
00:06:26.940 --> 00:06:28.990
its next node the new front 

150
00:06:29.360 --> 00:06:33.670
So we have front equal to null now check If 

151
00:06:33.670 --> 00:06:37.080
the queue has become empty and we have front equal 

152
00:06:37.080 --> 00:06:40.010
to null so This if will be true So we 

153
00:06:40.010 --> 00:06:43.640
have to set rear equal to null So set rear equal 

154
00:06:43.640 --> 00:06:47.470
to null And the deletion operation is now completed now 

155
00:06:47.470 --> 00:06:48.740
call the dequeue again 

156
00:06:48.980 --> 00:06:52.190
And in this function first we check If front equal to 

157
00:06:52.190 --> 00:06:55.750
null and it is so it prints dequeue operation 

158
00:06:55.750 --> 00:06:59.490
is not possible since the queue is empty So that 

159
00:06:59.490 --> 00:07:02.790
is how we can perform enqueue and dequeue operation in 

160
00:07:02.790 --> 00:07:04.810
a queue using linked list 

161
00:07:04.820 --> 00:07:08.670
Now let us discuss about the time complexity as we 

162
00:07:08.670 --> 00:07:09.510
just learned 

163
00:07:09.690 --> 00:07:11.700
We are maintaining two references 

164
00:07:11.700 --> 00:07:12.750
rear and Front 

165
00:07:13.140 --> 00:07:16.570
So in enqueue operation we only need to create the 

166
00:07:16.570 --> 00:07:20.300
node with the value and inserted after rear and make 

167
00:07:20.300 --> 00:07:20.950
it rear 

168
00:07:21.340 --> 00:07:23.570
So only a constant time is needed 

169
00:07:23.820 --> 00:07:27.340
So the time complexity is order of one and in 

170
00:07:27.340 --> 00:07:28.180
dequeue operation 

171
00:07:28.330 --> 00:07:31.900
We only need to make its next node to be front and 

172
00:07:31.900 --> 00:07:35.460
check for last node deletion incase which also takes 

173
00:07:35.460 --> 00:07:36.370
a constant time 

174
00:07:36.550 --> 00:07:39.750
So again the time complexity is order of one.

