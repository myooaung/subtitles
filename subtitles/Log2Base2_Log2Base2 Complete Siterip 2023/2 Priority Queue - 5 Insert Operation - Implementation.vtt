WEBVTT

1
00:00:00.240 --> 00:00:03.900
hope you all revised the heap data structure concepts in 

2
00:00:03.900 --> 00:00:04.610
this video 

3
00:00:04.760 --> 00:00:08.010
Let us learn how to implement the insert operation in 

4
00:00:08.010 --> 00:00:08.610
priority 

5
00:00:08.610 --> 00:00:09.020
Queue 

6
00:00:09.140 --> 00:00:12.810
Using heap data structures in the Heap data structure 

7
00:00:12.820 --> 00:00:15.550
we have used an array to implement the heap 

8
00:00:16.140 --> 00:00:18.920
Here we're going to use a vector to implement the 

9
00:00:18.920 --> 00:00:19.350
heap 

10
00:00:19.840 --> 00:00:24.690
Vectors are nothing but dynamic arrays which automatically resized themselves 

11
00:00:24.700 --> 00:00:27.290
when an element is inserted or deleted 

12
00:00:27.940 --> 00:00:31.680
So in simple arrays a static we can change 

13
00:00:31.680 --> 00:00:32.230
their size 

14
00:00:32.230 --> 00:00:35.400
at run time whereas a vector is a dynamic array 

15
00:00:35.480 --> 00:00:38.870
we can Resize it based on our need so let us 

16
00:00:38.870 --> 00:00:41.760
use a vector to implement the heap data structure 

17
00:00:42.440 --> 00:00:45.330
Now let us get into the insert operation 

18
00:00:45.620 --> 00:00:50.110
We can also call this and an enqueue operation basically what 

19
00:00:50.110 --> 00:00:53.250
is an insertion operation will Do is First 

20
00:00:53.260 --> 00:00:56.910
It will insert element in the heap and then call 

21
00:00:56.910 --> 00:00:57.230
built 

22
00:00:57.230 --> 00:01:01.250
Heap process to maintain the heap order property so that 

23
00:01:01.410 --> 00:01:05.150
the high priority element will always present at the root 

24
00:01:05.650 --> 00:01:08.070
Let us see some examples first 

25
00:01:08.190 --> 00:01:11.700
Let its insert element two since it is the first 

26
00:01:11.700 --> 00:01:12.180
element 

27
00:01:12.410 --> 00:01:15.540
Just push it in the vector so two will be 

28
00:01:15.540 --> 00:01:19.900
added as the first node now let us insert Element 

29
00:01:19.900 --> 00:01:20.390
five 

30
00:01:20.740 --> 00:01:22.970
First just push Element five 

31
00:01:22.980 --> 00:01:26.090
At the end in heap it will become the left 

32
00:01:26.090 --> 00:01:27.150
child of two 

33
00:01:27.640 --> 00:01:30.230
After that we need to apply the heapify 

34
00:01:30.230 --> 00:01:34.670
process to maintain its heap ordering principle so that the 

35
00:01:34.670 --> 00:01:38.150
high priority element will always present at the root 

36
00:01:38.840 --> 00:01:41.810
If we heapify it element five will come 

37
00:01:41.810 --> 00:01:45.420
to the top as it has the maximum priority we 

38
00:01:45.430 --> 00:01:46.540
already discussed 

39
00:01:46.540 --> 00:01:49.050
Heapify property in the previous videos 

40
00:01:49.440 --> 00:01:53.190
If you don't understand this kindly watch those videos before 

41
00:01:53.190 --> 00:01:54.250
proceeding further 

42
00:01:55.040 --> 00:01:59.400
Now let us insert Element 10 First push Element 10 

43
00:01:59.410 --> 00:02:02.070
At the end it will become the write child of 

44
00:02:02.070 --> 00:02:03.900
five and applied a heapify 

45
00:02:03.900 --> 00:02:07.660
process since 10 is greater than five it will 

46
00:02:07.660 --> 00:02:11.060
come to the top here we can notice that the 

47
00:02:11.060 --> 00:02:13.970
element with the highest priority is present at the root 

48
00:02:13.970 --> 00:02:14.350
node 

49
00:02:15.040 --> 00:02:16.810
Let us insert one more element 

50
00:02:16.810 --> 00:02:17.450
15 

51
00:02:17.840 --> 00:02:19.120
Push element 15 

52
00:02:19.130 --> 00:02:22.010
At the end it will become the left child of 

53
00:02:22.020 --> 00:02:22.350
two 

54
00:02:22.840 --> 00:02:24.770
Now we need to apply the heapify 

55
00:02:24.770 --> 00:02:28.290
process 15 is greater than two so it 

56
00:02:28.290 --> 00:02:31.460
will become a left child of 10 and 15 is 

57
00:02:31.460 --> 00:02:32.450
greater than 10 

58
00:02:32.620 --> 00:02:35.270
So it will come to the top and the heap 

59
00:02:35.270 --> 00:02:36.350
will look like this 

60
00:02:36.840 --> 00:02:39.910
And that's it this is how the insert operation will 

61
00:02:39.920 --> 00:02:40.380
work 

62
00:02:40.690 --> 00:02:44.220
The logic of insert operation will be if the vector 

63
00:02:44.220 --> 00:02:46.100
is empty just pushed the element 

64
00:02:46.320 --> 00:02:47.710
If it is not empty 

65
00:02:47.880 --> 00:02:50.890
First pushed the element at the end and then call 

66
00:02:50.890 --> 00:02:51.130
build 

67
00:02:51.130 --> 00:02:52.280
Heap process to heapify 

68
00:02:52.280 --> 00:02:55.740
it now let us quickly implement the insert 

69
00:02:55.740 --> 00:02:56.280
function 

70
00:02:56.530 --> 00:03:00.800
Let's create a function named Insert that takes two arguments 

71
00:03:01.170 --> 00:03:03.970
The first one refers to the vector and the next 

72
00:03:03.970 --> 00:03:07.050
one is integer value that needs to be inserted 

73
00:03:07.640 --> 00:03:09.880
This function will not return anything 

74
00:03:09.960 --> 00:03:11.620
So write it type as void 

75
00:03:11.620 --> 00:03:14.870
first let us find the size of the 

76
00:03:14.870 --> 00:03:15.440
vector 

77
00:03:15.490 --> 00:03:18.510
We can use the size function to get it so 

78
00:03:18.510 --> 00:03:22.930
write int size equal to heap dot size If the 

79
00:03:22.930 --> 00:03:26.250
size is zero which is need to push the element in 

80
00:03:26.250 --> 00:03:26.880
the vector 

81
00:03:27.160 --> 00:03:27.850
So write 

82
00:03:28.040 --> 00:03:31.950
If Size is equal to 0 heap dot push back of val 

83
00:03:32.340 --> 00:03:35.900
here push back function issues to push elements into a 

84
00:03:35.900 --> 00:03:37.350
vector from the back 

85
00:03:37.940 --> 00:03:41.050
The new values inserted into the vector at the end 

86
00:03:41.640 --> 00:03:44.540
If the size is greater than zero first we need 

87
00:03:44.540 --> 00:03:48.000
to push back the element so write heap dot push 

88
00:03:48.000 --> 00:03:50.050
back of val in the else part 

89
00:03:50.440 --> 00:03:52.740
And then we need to heapify the vector 

90
00:03:53.200 --> 00:03:57.100
So after the insertion called build Heap function with New 

91
00:03:57.100 --> 00:03:58.880
Heap and its last index 

92
00:03:59.130 --> 00:04:00.390
So write build 

93
00:04:00.390 --> 00:04:02.050
Heap of heap coma 

94
00:04:02.060 --> 00:04:06.130
It's last index heap dot size minus one and we 

95
00:04:06.140 --> 00:04:09.220
always pass the last index of array or vector to the 

96
00:04:09.220 --> 00:04:09.450
build

97
00:04:09.450 --> 00:04:13.420
Heap function heap dot size minus one will give the last 

98
00:04:13.420 --> 00:04:14.280
index value 

99
00:04:14.610 --> 00:04:18.260
That's why we have passed heap dot sise minus one as 

100
00:04:18.260 --> 00:04:19.650
the second argument 

101
00:04:20.140 --> 00:04:23.250
And that's it we have implemented the insert function 

102
00:04:23.840 --> 00:04:26.120
In the next video we will learn how to get 

103
00:04:26.120 --> 00:04:29.050
the highest priority element from the priority queue. 

