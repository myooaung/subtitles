WEBVTT

1
00:00:00.140 --> 00:00:03.700
To find the height or maximum depth of a tree 

2
00:00:03.900 --> 00:00:07.460
We can write a function max depth which takes the 

3
00:00:07.460 --> 00:00:11.720
root of tree as input and returns the maximum depth 

4
00:00:11.750 --> 00:00:13.260
which will be an integer. 

5
00:00:14.040 --> 00:00:18.710
Firstly if the root is null, return zero and this is 

6
00:00:18.710 --> 00:00:20.160
the base condition here. 

7
00:00:20.690 --> 00:00:23.820
This base condition will handle two cases 

8
00:00:24.310 --> 00:00:25.760
The first case is  

9
00:00:26.250 --> 00:00:30.560
if the tree is empty, then it will straightaway return 

10
00:00:30.560 --> 00:00:33.120
zero and the second case is

11
00:00:33.430 --> 00:00:37.450
if traversal reaches null. Then it will return zero 

12
00:00:38.020 --> 00:00:39.780
So let us see how it works 

13
00:00:40.130 --> 00:00:44.070
First find a maximum depth of left sub tree 

14
00:00:44.260 --> 00:00:49.080
So write int l_depth equal to max depth of 

15
00:00:49.090 --> 00:00:50.050
root-left 

16
00:00:50.590 --> 00:00:54.290
Then find the maximum depth of right sub tree 

17
00:00:54.520 --> 00:00:56.050
So find r_depth.

18
00:00:56.630 --> 00:01:00.300
Then take the maximum of it and add one to it

19
00:01:00.300 --> 00:01:02.270
 and return that value 

20
00:01:02.680 --> 00:01:06.800
So write if l_depth is greater than r_depth 

21
00:01:07.070 --> 00:01:12.090
return l_depth + one else right sub tree has 

22
00:01:12.100 --> 00:01:17.130
the maximum depth so return r_depth + one.

23
00:01:17.130 --> 00:01:20.030
So we know how inorder recursion works. So the 

24
00:01:20.030 --> 00:01:26.000
calculation will start from this node 10. Here l_depth equal 

25
00:01:26.000 --> 00:01:30.090
to zero and r_depth equal to zero. 

26
00:01:30.090 --> 00:01:36.010
So zero + one which is one is returned. Similarly for 55,

27
00:01:36.010 --> 00:01:40.410
zero + one which is one is returned and now for 

28
00:01:40.410 --> 00:01:44.740
node 60 height of left sub tree is one and 

29
00:01:44.740 --> 00:01:48.510
right sub tree is zero. So the maximum value is one. 

30
00:01:48.510 --> 00:01:53.390
So return one + one that is two.

31
00:01:53.400 --> 00:01:54.120
Now for node 50 

32
00:01:54.120 --> 00:01:54.900


33
00:01:55.060 --> 00:01:58.490
We have height of left sub tree equal to one 

34
00:01:58.710 --> 00:02:00.750
and right sub tree equal to two 

35
00:02:01.140 --> 00:02:04.210
So max of one and two is two. 

36
00:02:04.380 --> 00:02:08.440
So return one + two that is three. Now for 

37
00:02:08.440 --> 00:02:13.330
node 150 max of zero and zero is zero. So return 

38
00:02:13.330 --> 00:02:15.450
one + zero that is one. 

39
00:02:16.040 --> 00:02:20.830
Similarly for the node 300 return zero + one which 

40
00:02:20.830 --> 00:02:23.000
is one and for node 200,

41
00:02:23.000 --> 00:02:23.930


42
00:02:24.240 --> 00:02:27.350
the height of left sub tree and right sub tree 

43
00:02:27.360 --> 00:02:30.850
is one. So return one + one that is two.

44
00:02:31.540 --> 00:02:36.460
Finally for node 100, height of left sub tree is

45
00:02:36.460 --> 00:02:39.070
three and right sub tree is two 

46
00:02:39.340 --> 00:02:43.050
So the max value is three here. So return one + three

47
00:02:43.050 --> 00:02:46.440
which is four and that is the height or max depth of the tree.

