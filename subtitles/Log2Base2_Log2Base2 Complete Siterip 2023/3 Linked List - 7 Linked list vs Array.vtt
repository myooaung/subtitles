WEBVTT

1
00:00:00.440 --> 00:00:01.310
Hello friends 

2
00:00:01.450 --> 00:00:04.470
In this video let us have a discussion on linked 

3
00:00:04.470 --> 00:00:05.080
list versus array 

4
00:00:12.080 --> 00:00:13.450
So see an example for each 

5
00:00:13.840 --> 00:00:17.540
We have array with elements 10 20 and 

6
00:00:17.540 --> 00:00:22.210
30 and linked list with elements 10 20 and 30 

7
00:00:23.040 --> 00:00:26.560
Now let us focus on the memory locations where the 

8
00:00:26.570 --> 00:00:29.549
elements are stored. In array

9
00:00:29.790 --> 00:00:32.740
we can see that the elements are stored in 

10
00:00:32.740 --> 00:00:39.780
contiguous memory locations see 1024 then 1028 then 1032 

11
00:00:39.790 --> 00:00:40.430
like that 

12
00:00:41.540 --> 00:00:45.610
But is that so with linked list No The linked 

13
00:00:45.610 --> 00:00:49.070
list elements are stored in random memory locations which are 

14
00:00:49.070 --> 00:00:51.210
linked together using pointers 

15
00:00:51.570 --> 00:00:55.720
See we have 1024 then we have 2028 

16
00:00:55.730 --> 00:00:57.530
Then we have 3032 

17
00:00:57.820 --> 00:01:01.170
But each node has a pointer pointing to the next node

18
00:01:01.170 --> 00:01:06.190
Now let us discuss about the kind of memory 

19
00:01:06.190 --> 00:01:06.950
allocations

20
00:01:07.440 --> 00:01:10.449
So for arrays it is static memory allocation 

21
00:01:10.600 --> 00:01:15.040
That is the memory is allocated at compile time so 

22
00:01:15.040 --> 00:01:17.830
we need to specify the array size and it will 

23
00:01:17.830 --> 00:01:19.550
be fixed throughout the program. 

24
00:01:19.940 --> 00:01:23.280
That means we can't change the size of the array 

25
00:01:23.280 --> 00:01:26.930
at run time and the memory will be allocated in the stack

26
00:01:26.930 --> 00:01:27.750
section 

27
00:01:28.840 --> 00:01:32.440
See an example int arr of 5

28
00:01:32.840 --> 00:01:35.230
Now the size of array will be 5 and it will 

29
00:01:35.230 --> 00:01:38.540
be five throughout the program and we can't increase the 

30
00:01:38.540 --> 00:01:39.350
size then 

31
00:01:40.740 --> 00:01:44.600
And what about linked list Using linked list we can 

32
00:01:44.610 --> 00:01:47.950
add as many elements as we need at run time 

33
00:01:48.340 --> 00:01:49.390
that is here 

34
00:01:49.390 --> 00:01:53.460
Memory is allocated dynamically and it will be allocated in 

35
00:01:53.460 --> 00:01:54.479
the heap section 

36
00:01:55.340 --> 00:01:58.460
We can add more elements based on our need at 

37
00:01:58.460 --> 00:02:03.170
run time now let us discuss about accessing elements 

38
00:02:03.640 --> 00:02:07.410
So in an array elements can be accessed directly using 

39
00:02:07.410 --> 00:02:11.530
the index value for example we can access the third 

40
00:02:11.530 --> 00:02:16.130
element using arr of two and it's time complexity will 

41
00:02:16.130 --> 00:02:17.350
be order of one 

42
00:02:18.440 --> 00:02:21.440
Meanwhile in linked list we need to traverse the list 

43
00:02:21.450 --> 00:02:25.740
from the beginning to find the element that is if 

44
00:02:25.740 --> 00:02:27.820
we need to access the third element 

45
00:02:28.060 --> 00:02:30.960
First we need to go to the first node then 

46
00:02:30.960 --> 00:02:34.269
get the address of second node and visit the second 

47
00:02:34.270 --> 00:02:34.600
node 

48
00:02:34.640 --> 00:02:37.270
Get the address of third node and visit it

49
00:02:37.280 --> 00:02:41.330
finally if the linked list has n elements and in the 

50
00:02:41.330 --> 00:02:44.570
worst case we need to traverse the linked list till 

51
00:02:44.570 --> 00:02:46.500
the end to find the element 

52
00:02:46.740 --> 00:02:49.450
So the time complexity will be order of n 

53
00:02:51.110 --> 00:02:55.339
Now let us discuss on basic operations like insertion and 

54
00:02:55.340 --> 00:02:55.880
deletion 

55
00:02:56.540 --> 00:03:00.690
So in arrays insertion and deletion operations take more 

56
00:03:00.690 --> 00:03:05.080
time because after inserting or deleting an element we need 

57
00:03:05.080 --> 00:03:07.250
to shift all the other elements 

58
00:03:07.340 --> 00:03:08.310
See an example 

59
00:03:08.310 --> 00:03:09.489
Then it will be clear 

60
00:03:10.440 --> 00:03:13.990
Here we have an array with elements 10 20 and 30 

61
00:03:14.740 --> 00:03:18.720
Now if we need to delete 10 after deletion we 

62
00:03:18.720 --> 00:03:20.530
need to shift all the elements 

63
00:03:20.540 --> 00:03:21.990
one position to the left 

64
00:03:22.640 --> 00:03:26.390
Now if we need to insert 100 at index zero 

65
00:03:26.940 --> 00:03:29.860
we need to shift all the elements one position to 

66
00:03:29.860 --> 00:03:33.090
the right and then only we can place 100 at 

67
00:03:33.100 --> 00:03:38.100
index zero and for linked lists insertion and deletion operation 

68
00:03:38.110 --> 00:03:40.150
is faster compared to arrays 

69
00:03:40.520 --> 00:03:43.290
For example let us say we need to delete the 

70
00:03:43.300 --> 00:03:44.260
element 20 

71
00:03:44.840 --> 00:03:47.780
We can simply make the first node point to the 

72
00:03:47.790 --> 00:03:51.160
third node instead of second node so we will get like 

73
00:03:51.160 --> 00:03:51.450
this 

74
00:03:52.200 --> 00:03:56.390
Similarly if we need to insert the element 100 after 

75
00:03:56.390 --> 00:04:00.910
20 we can simply set node with Element 20 pointing 

76
00:04:00.910 --> 00:04:03.910
to new node and new node pointing to node with 

77
00:04:03.910 --> 00:04:09.000
30 So these are some basic differences between arrays 

78
00:04:09.050 --> 00:04:09.930
and linked lists 

79
00:04:10.220 --> 00:04:12.620
So we discussed about memory allocation 

80
00:04:12.930 --> 00:04:16.800
Arrays are allocated contiguous memory at compile time and 

81
00:04:16.800 --> 00:04:20.280
the memory is allocated randomly in linked list at run time 

82
00:04:20.840 --> 00:04:24.260
so we can make the memory size grow or shrink based 

83
00:04:24.260 --> 00:04:26.120
on our need in linked list 

84
00:04:26.260 --> 00:04:28.289
But it is fixed in arrays 

85
00:04:29.440 --> 00:04:32.950
Also we can access arrays easily using indices 

86
00:04:33.030 --> 00:04:35.349
but it is difficult in linked list 

87
00:04:36.140 --> 00:04:39.789
An insertion and deletion operation are slower in arrays 

88
00:04:39.790 --> 00:04:42.450
but compared to arrays it is faster in linked 

89
00:04:42.450 --> 00:04:42.849
list 

90
00:04:43.240 --> 00:04:43.969
So thats all 

91
00:04:43.980 --> 00:04:47.070
And in the next video we will discuss about applications 

92
00:04:47.070 --> 00:04:47.830
of linked list 

93
00:04:48.040 --> 00:04:48.550
Thank you 

