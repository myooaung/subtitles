WEBVTT

1
00:00:00.840 --> 00:00:01.540
Hi friends 

2
00:00:01.550 --> 00:00:05.720
In this video we are going to learn the logical operators in C

3
00:00:10.720 --> 00:00:12.790
So the logical operators are used to 

4
00:00:12.790 --> 00:00:14.700
perform logical operations in C. 

5
00:00:14.700 --> 00:00:18.200
We have three logical operators the logical OR operator 

6
00:00:18.200 --> 00:00:21.410
the logical AND operator and the logical NOT operator 

7
00:00:21.420 --> 00:00:23.840
And these are denoted using these symbols. for 

8
00:00:23.840 --> 00:00:24.360
logical OR

9
00:00:24.370 --> 00:00:27.330
We have a double vertical bar and for AND we 

10
00:00:27.330 --> 00:00:31.350
have a double ampersand and for NOT we have an 

11
00:00:31.350 --> 00:00:34.800
exclamation mark. Let us see the logical OR. so it will 

12
00:00:34.800 --> 00:00:37.720
do the same operation of an OR gate. So what happens 

13
00:00:37.720 --> 00:00:39.660
in an OR gate ?If you have both the input 

14
00:00:39.660 --> 00:00:41.700
zero then the output is also zero 

15
00:00:41.710 --> 00:00:44.000
If you have at least one input 1 then 

16
00:00:44.000 --> 00:00:46.459
the result is 1. So see when you have 

17
00:00:46.460 --> 00:00:49.339
a=0 b=0 then a or b = 0

18
00:00:49.410 --> 00:00:51.580
So the bulb is not glowing 

19
00:00:51.590 --> 00:00:54.010
And if we have a=0 and b=1 

20
00:00:54.010 --> 00:00:55.190
one then a OR b= 1 

21
00:00:55.190 --> 00:00:57.449
 so the bulb glows and if 

22
00:00:57.450 --> 00:00:59.880
you have a=1 b=0 then 

23
00:00:59.880 --> 00:01:02.170
also a or b = 1 and bulb will 

24
00:01:02.170 --> 00:01:04.290
glow and if you have a=1 

25
00:01:04.290 --> 00:01:06.730
b=1 then also a or b =1

26
00:01:06.730 --> 00:01:07.150


27
00:01:07.150 --> 00:01:09.630
So the functionality is that if you have all the 

28
00:01:09.630 --> 00:01:11.570
inputs zero then the result is zero 

29
00:01:11.570 --> 00:01:13.690
And if you have at least one input 1 then 

30
00:01:13.690 --> 00:01:14.590
the result is 1 

31
00:01:14.600 --> 00:01:17.750
Now let's see the logical AND operation and it has 

32
00:01:17.750 --> 00:01:19.600
the same function of an AND gate 

33
00:01:19.610 --> 00:01:22.190
And if you have two inputs A and B here 

34
00:01:22.340 --> 00:01:25.290
and if a=0 and b=0 then 

35
00:01:25.300 --> 00:01:27.250
a AND b is also zero 

36
00:01:27.240 --> 00:01:29.860
And if you have a=0 b=1

37
00:01:29.860 --> 00:01:32.979
then also a AND b = 0 so the 

38
00:01:32.980 --> 00:01:34.160
bulb will not glow 

39
00:01:34.290 --> 00:01:36.660
And if you have a=1 and b=0 

40
00:01:36.660 --> 00:01:39.560
 then also bulb won't glow since a AND b 

41
00:01:39.570 --> 00:01:41.560
 equal to zero Next 

42
00:01:41.570 --> 00:01:43.910
If you have a=1 and b=1 

43
00:01:43.910 --> 00:01:46.930
then a AND b also equal to one so the 

44
00:01:46.930 --> 00:01:47.820
bulb will glow 

45
00:01:47.830 --> 00:01:50.330
So this is a functionality of AND. if we have 

46
00:01:50.340 --> 00:01:52.940
all the inputs equal to one then only the result 

47
00:01:52.940 --> 00:01:55.540
is one and if we have at least one 0,

48
00:01:55.540 --> 00:01:58.850
result become zero. And now let us discuss about logical 

49
00:01:58.850 --> 00:02:00.790
NOT and it works as a NOT gate 

50
00:02:00.800 --> 00:02:03.770
Or we can call it the inverter because whatever input 

51
00:02:03.770 --> 00:02:06.130
you give the NOT gate will invert it 

52
00:02:06.140 --> 00:02:08.700
See if you have a = 0 the bulb is 

53
00:02:08.700 --> 00:02:10.880
glowing since the output has become one 

54
00:02:11.140 --> 00:02:13.630
And if you have a=1 then the bulb 

55
00:02:13.630 --> 00:02:16.829
won't glow since NOT gate would have inverted the input 

56
00:02:16.840 --> 00:02:18.049
and we will get zero 

57
00:02:18.340 --> 00:02:19.930
So that is NOT operator 

58
00:02:20.130 --> 00:02:21.610
And now let us see a programme 

59
00:02:21.740 --> 00:02:23.750
And here we have the main function and we are 

60
00:02:23.750 --> 00:02:24.920
declaring three integer 

61
00:02:24.920 --> 00:02:29.050
variables a b and ret and we are initialising 

62
00:02:29.050 --> 00:02:30.549
a to 5 and b to 10 

63
00:02:30.800 --> 00:02:34.160
Next we have this statement 

64
00:02:34.160 --> 00:02:37.170
ret = ( (a <= b) or (a != b) ); 

65
00:02:37.170 --> 00:02:37.940


66
00:02:37.940 --> 00:02:40.820
We have expression1 OR expression2 

67
00:02:40.950 --> 00:02:43.300
So what is the functionality of OR? if you have 

68
00:02:43.300 --> 00:02:46.050
at least one expression true then the result is true 

69
00:02:46.440 --> 00:02:49.280
So a<=b is true 

70
00:02:49.370 --> 00:02:51.160
since 5<10

71
00:02:51.480 --> 00:02:55.060
So this OR operator returns a TRUE or 1 and 

72
00:02:55.070 --> 00:02:57.930
it will be stored to the integer variable ret

73
00:02:58.200 --> 00:03:01.310
and next is a printf function so it will print 

74
00:03:01.320 --> 00:03:01.709
return 

75
00:03:01.710 --> 00:03:05.150
Value of about expression is 1. Next we have the 

76
00:03:05.150 --> 00:03:08.420
statement ret = ( ( a < b) && (a == b ) );

77
00:03:08.420 --> 00:03:08.730


78
00:03:08.740 --> 00:03:11.340
So we have expression1 AND expression2 

79
00:03:11.350 --> 00:03:13.610
So what is the functionality of AND? if we have 

80
00:03:13.610 --> 00:03:16.780
both the inputs or expressions true then only the result 

81
00:03:16.780 --> 00:03:17.130
is true 

82
00:03:17.140 --> 00:03:20.250
So here first expression a<b is true since 

83
00:03:20.250 --> 00:03:21.530
5 less than 10

84
00:03:21.530 --> 00:03:25.570
Next expression a==b is false 

85
00:03:25.580 --> 00:03:26.290
since five 

86
00:03:26.290 --> 00:03:29.320
is not equal to 10 so AND operator will return 

87
00:03:29.320 --> 00:03:31.780
false or zero and it will be stored to ret 

88
00:03:31.790 --> 00:03:33.440
and next is a printf function 

89
00:03:33.550 --> 00:03:36.350
So it will print return value of above expression 

90
00:03:36.360 --> 00:03:37.320
is zero 

91
00:03:38.140 --> 00:03:41.460
Next we have the statement 

92
00:03:41.470 --> 00:03:44.350
 ret equal to not of a less than b && a == b; so we 

93
00:03:44.350 --> 00:03:47.750
have not of expression1 and expression2 

94
00:03:48.240 --> 00:03:50.570
And what is the functionality of AND, if you have 

95
00:03:50.580 --> 00:03:53.520
all the inputs or expressions true, then the result is 

96
00:03:53.520 --> 00:03:53.760
true 

97
00:03:53.760 --> 00:03:56.680
Here we got 5<10 which is true 

98
00:03:56.690 --> 00:03:58.809
and five= 10 which is false 

99
00:03:58.820 --> 00:04:02.239
So the AND operator returns zero and we got 

100
00:04:02.250 --> 00:04:03.280
not of zero 

101
00:04:03.290 --> 00:04:05.950
So what does NOT operator do? It will invert

102
00:04:05.950 --> 00:04:06.420
The input 

103
00:04:06.740 --> 00:04:09.480
So this zero becomes one and that will be stored 

104
00:04:09.480 --> 00:04:10.489
in the variable ret

105
00:04:10.500 --> 00:04:13.549
And next we have the printf function and it will print

106
00:04:13.560 --> 00:04:15.299
return value of about expression 

107
00:04:15.310 --> 00:04:15.900
is one 

108
00:04:15.900 --> 00:04:18.409
So that's all and thank watching this video 

