WEBVTT

1
00:00:00.240 --> 00:00:04.140
So let us write a function is happy number by passing the 

2
00:00:04.140 --> 00:00:07.520
number to be checked into the function and returns 

3
00:00:07.520 --> 00:00:10.420
an integer that is the result of checking. 

4
00:00:10.720 --> 00:00:14.040
We will use two pointers slow and fast 

5
00:00:14.300 --> 00:00:18.350
So declare and initialise both slow and fast to num 

6
00:00:18.740 --> 00:00:22.540
so write int slow equal to num and fast equal to num

7
00:00:22.540 --> 00:00:28.020
after that until both slow and fast meet again 

8
00:00:28.200 --> 00:00:32.950
We need to find digit square sequence so write

9
00:00:32.960 --> 00:00:37.480
do while slow not equal to fast. Slow will find sum of 

10
00:00:37.480 --> 00:00:40.810
square of digits one step at a time. So write 

11
00:00:41.020 --> 00:00:45.820
slow equal to digitSquareSum of slow and fast 

12
00:00:45.820 --> 00:00:49.130
will find sum of square of digits two steps at 

13
00:00:49.130 --> 00:00:49.610
a time.

14
00:00:49.970 --> 00:00:54.700
So write fast equal to digitSquareSum of digits 

15
00:00:54.700 --> 00:00:59.140
square sum of fast. This loop will end when both 

16
00:00:59.150 --> 00:01:02.950
slow and fast points the same number. If it is one,

17
00:01:02.950 --> 00:01:05.710
the given number is a happy number.

18
00:01:05.850 --> 00:01:08.360
Otherwise it is not a happy number. 

19
00:01:08.640 --> 00:01:12.350
So finally returned slow equal to equal to one 

20
00:01:13.240 --> 00:01:15.870
If slow is one it will return one 

21
00:01:16.090 --> 00:01:19.790
Otherwise it will return zero. Now let us write 

22
00:01:19.790 --> 00:01:22.850
the logic for sum of square of all digits. 

23
00:01:23.240 --> 00:01:26.410
So here we pass the number into the function and 

24
00:01:26.420 --> 00:01:29.370
it will return the sum of square of its digits 

25
00:01:29.790 --> 00:01:32.730
So what we have to do here is split the digits

26
00:01:32.730 --> 00:01:36.750
 find it's square and add it to sum variable 

27
00:01:37.210 --> 00:01:41.880
So first declare and initialise sum to 0. Now to split 

28
00:01:41.880 --> 00:01:46.150
digits, use a while loop while num greater than zero 

29
00:01:46.640 --> 00:01:50.550
use mod 10 operation to get the last digit. 

30
00:01:50.550 --> 00:01:56.580
So write int mod equal to num mod 10. Now find 

31
00:01:56.640 --> 00:02:01.070
its square and add it to sum. So write 

32
00:02:01.080 --> 00:02:03.150
sum+= mod * mod

33
00:02:03.400 --> 00:02:06.350
Now divide the number by 10 to remove the last digit.

34
00:02:06.350 --> 00:02:10.250
So write num divided by equal to 10 

35
00:02:10.940 --> 00:02:14.840
So after this while loop completes, the sum of squares 

36
00:02:14.840 --> 00:02:18.700
of digits of num will be in variable sum. So return it.

37
00:02:18.700 --> 00:02:18.870


