WEBVTT

1
00:00:00.040 --> 00:00:02.710
To find the mirror of a tree, we can write 

2
00:00:02.710 --> 00:00:06.150
a function mirror which takes the root of tree as 

3
00:00:06.150 --> 00:00:06.950
the input.

4
00:00:07.540 --> 00:00:10.950
Firstly if root is null, we need to just return from there

5
00:00:10.950 --> 00:00:16.100
So write if root equal to equal to null return.

6
00:00:16.100 --> 00:00:19.650
This base condition will handle two cases. If the tree is 

7
00:00:19.660 --> 00:00:23.440
empty and when the traversal reaches null.  

8
00:00:23.440 --> 00:00:25.250
In both cases it will simply return 

9
00:00:25.640 --> 00:00:27.740
Otherwise we need to do in order traversal

10
00:00:27.740 --> 00:00:31.240
and swap the left and right sub tree 

11
00:00:31.250 --> 00:00:32.350
of each node. 

12
00:00:32.840 --> 00:00:36.780
So write mirror of root-left and mirror of root-right

13
00:00:36.780 --> 00:00:37.910

14
00:00:37.910 --> 00:00:39.150
now write the swap code. 

15
00:00:39.640 --> 00:00:43.990
struct node * temp equal to root left then

16
00:00:43.990 --> 00:00:45.210
root-left equal to root-right.

17
00:00:45.210 --> 00:00:45.650


18
00:00:45.820 --> 00:00:49.690
And finally root-right equal to 10. 

19
00:00:49.690 --> 00:00:51.470
So let us see how this code works 

20
00:00:51.940 --> 00:00:53.030
Firstly check

21
00:00:53.030 --> 00:00:54.180
The base condition. 

22
00:00:54.190 --> 00:00:55.310
It is not true. 

23
00:00:55.460 --> 00:00:57.210
So else part will work.

24
00:00:57.220 --> 00:01:00.460
Here we have recursive call to root left and 

25
00:01:00.460 --> 00:01:00.710
root-right 

26
00:01:00.710 --> 00:01:01.150
 

27
00:01:01.640 --> 00:01:04.580
So we know how in order recursion works

28
00:01:04.580 --> 00:01:08.710
So after the recursive call the swap operation will start from 

29
00:01:08.710 --> 00:01:12.080
this node 10. So it's left and right 

30
00:01:12.080 --> 00:01:16.670
sub tree will be swapped after that node 60's left 

31
00:01:16.680 --> 00:01:18.850
and right sub tree will be swapped.

32
00:01:19.440 --> 00:01:23.870
After that node 50's left and right sub trees will be swapped.

33
00:01:23.870 --> 00:01:26.470
And we will get the tree like this 

34
00:01:27.140 --> 00:01:31.250
After this node 150's left and right sub trees

35
00:01:31.250 --> 00:01:34.020
will be swapped which is null only 

36
00:01:34.180 --> 00:01:37.990
And after this node 300's left and right sub trees

37
00:01:37.990 --> 00:01:39.070
will be swapped. 

38
00:01:39.280 --> 00:01:40.660
And after that node 200's 

39
00:01:40.660 --> 00:01:44.020
left and right sub trees will be swapped 

40
00:01:44.030 --> 00:01:45.480
and we will get like this. 

41
00:01:45.880 --> 00:01:50.440
And finally node 100's left and right sub trees will 

42
00:01:50.440 --> 00:01:51.940
be swapped and see 

43
00:01:51.950 --> 00:01:53.450
we got the mirror image 

44
00:01:53.520 --> 00:01:55.490
So this is how the code works.

