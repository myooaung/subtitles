WEBVTT

1
00:00:00.040 --> 00:00:02.750
the omega notation defines a lower bound of 

2
00:00:02.750 --> 00:00:03.470
a function 

3
00:00:03.760 --> 00:00:06.500
Let us say, our function is f(n) and 

4
00:00:06.500 --> 00:00:09.060
it grows like this when the size of the input 

5
00:00:09.070 --> 00:00:12.750
increases then what will be the lower bound of f(n)

6
00:00:13.140 --> 00:00:16.140
We will find some other functions say g(n) in 

7
00:00:16.140 --> 00:00:19.790
such a way that c*g(n) is always 

8
00:00:19.790 --> 00:00:21.150
lesser than f(n) 

9
00:00:21.300 --> 00:00:24.040
For all the values of n greater than or equal 

10
00:00:24.040 --> 00:00:27.900
to n0. If we find any such function we 

11
00:00:27.900 --> 00:00:31.250
can say f(n) is omega of g(n)

12
00:00:31.840 --> 00:00:34.810
that brings us to the definition of omega notation 

13
00:00:35.040 --> 00:00:38.300
The function f(n) is omega of g(n)

14
00:00:38.420 --> 00:00:42.570
if and only if their excess positive constant c and n0

15
00:00:42.570 --> 00:00:46.020
 such that f(n) is greater than or equal 

16
00:00:46.020 --> 00:00:49.110
to c*g(n) for all n greater 

17
00:00:49.110 --> 00:00:52.690
than or equal to n0. Compared to big O notation 

18
00:00:52.700 --> 00:00:54.930
Only this symbol has changed 

19
00:00:55.140 --> 00:00:57.880
This was lesser than or equal to in big O notation 

20
00:00:57.900 --> 00:01:00.250
and here it is greater than or equal to. 

21
00:01:00.640 --> 00:01:04.360
So what does it mean Big O nnotation tells that 

22
00:01:04.370 --> 00:01:07.690
f(n) is always smaller than me whereas omega notation 

23
00:01:07.690 --> 00:01:11.100
 tells that f(n) will always be greater 

24
00:01:11.100 --> 00:01:11.750
than me 

25
00:01:12.140 --> 00:01:14.950
Let us take the same example and find its omega 

26
00:01:14.950 --> 00:01:18.060
notation or the lower bound. f(n) is equal to 

27
00:01:18.060 --> 00:01:19.360
five n plus three 

28
00:01:19.530 --> 00:01:21.470
Let's put it in this equation 

29
00:01:21.700 --> 00:01:24.440
Five n plus three is greater than or equal to 

30
00:01:24.440 --> 00:01:25.750
c*g(n)

31
00:01:26.140 --> 00:01:28.370
Now we need to guess the value for c*g(n) 

32
00:01:28.370 --> 00:01:31.760
such that f(n) is always greater than 

33
00:01:31.760 --> 00:01:32.970
c*g(n) 

34
00:01:33.160 --> 00:01:35.560
So we need to pick the smaller values of 

35
00:01:35.560 --> 00:01:37.430
c*g(n). Let us  

36
00:01:37.430 --> 00:01:41.080
take c as 1, g(n) as n and check 

37
00:01:41.080 --> 00:01:44.870
whether it satisfies this condition if we put c as 1,

38
00:01:44.870 --> 00:01:48.690
g(n) as n, the equation will be 

39
00:01:48.690 --> 00:01:51.550
5n + 3 greater than or equal to 1*n 

40
00:01:51.560 --> 00:01:54.640
that is 5 + 3 greater than or equal 

41
00:01:54.640 --> 00:01:56.950
to n. Is this relation 

42
00:01:56.950 --> 00:02:00.400
true for all values of n? Yes, starting from n 

43
00:02:00.400 --> 00:02:01.130
equal to one, 

44
00:02:01.140 --> 00:02:04.280
This relation is true. Let us quickly verify it 

45
00:02:04.560 --> 00:02:07.610
If n = 1 this will become eight greater 

46
00:02:07.610 --> 00:02:08.750
than or equal to 1 

47
00:02:08.760 --> 00:02:09.580
That is true. 

48
00:02:09.730 --> 00:02:13.030
If n=2, this will become 13 greater than 

49
00:02:13.030 --> 00:02:13.970
or equal to 2. 

50
00:02:14.000 --> 00:02:17.470
And that is also true. Similarly if we take larger 

51
00:02:17.470 --> 00:02:21.060
values of n, 5n + 3 will always be greater 

52
00:02:21.070 --> 00:02:21.670
than n.

53
00:02:21.680 --> 00:02:24.010
So we have found the value of n0 which 

54
00:02:24.010 --> 00:02:25.510
is 1 from that 

55
00:02:25.510 --> 00:02:28.470
we can say that 5n + 3 is greater 

56
00:02:28.470 --> 00:02:31.080
than or equal to n is true for all n 

57
00:02:31.080 --> 00:02:34.520
greater than or equal to one. So in the equation, 

58
00:02:34.530 --> 00:02:37.630
We have found the values of c, g(n) and 

59
00:02:37.640 --> 00:02:41.210
and n0 and it satisfies all the conditions of omega 

60
00:02:41.210 --> 00:02:42.020
definition 

61
00:02:42.130 --> 00:02:45.030
So we can say that five n plus three is 

62
00:02:45.040 --> 00:02:49.120
omega of n. Since this function is lower bound to 

63
00:02:49.120 --> 00:02:52.960
omega of n, this will lower bound to any time function 

64
00:02:52.960 --> 00:02:56.480
which is lesser than n, say square root of n, logn

65
00:02:56.480 --> 00:02:57.790
and one etc.

66
00:02:58.540 --> 00:03:01.810
But as we discussed earlier we should always take the 

67
00:03:01.820 --> 00:03:02.860
closest bound 

68
00:03:02.920 --> 00:03:06.020
Here the closest one is n, So that's why we 

69
00:03:06.020 --> 00:03:09.300
have returned as Omega of n and And thats it. 

70
00:03:09.300 --> 00:03:11.120
This is all about omega notation 

71
00:03:11.280 --> 00:03:13.900
In the next video let us learn about the theta notation.

