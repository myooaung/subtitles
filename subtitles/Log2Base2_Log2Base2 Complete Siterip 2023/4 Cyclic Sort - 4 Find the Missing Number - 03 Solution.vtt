WEBVTT

1
00:00:00.330 --> 00:00:03.820
We can reuse the cyclic sort code and modify it.

2
00:00:03.830 --> 00:00:04.040


3
00:00:04.050 --> 00:00:08.180
based on this problem. Let us change the function name

4
00:00:08.190 --> 00:00:11.130
to missing number. In cyclic sort

5
00:00:11.220 --> 00:00:14.730
We have taken numbers from 1 to n. But in 

6
00:00:14.740 --> 00:00:18.330
this problem, the numbers are taken from zero to n range. 

7
00:00:18.330 --> 00:00:18.850


8
00:00:19.630 --> 00:00:23.360
Since the array index also starts from zero, we do not 

9
00:00:23.360 --> 00:00:28.020
need to find the actual index value. Here index and 

10
00:00:28.030 --> 00:00:32.820
array[i] are the same. So we can remove this line.

11
00:00:32.820 --> 00:00:33.480
Now to check

12
00:00:33.490 --> 00:00:37.350
if each index has the right value, we can simply 

13
00:00:37.350 --> 00:00:39.620
check i and array[i]

14
00:00:39.890 --> 00:00:43.410
So add the condition i not equal to array[i] in

15
00:00:43.420 --> 00:00:48.030
if statement instead of array[i] not equal 

16
00:00:48.030 --> 00:00:51.900
to array[index]. Here we need to add another 

17
00:00:51.900 --> 00:00:52.650
condition.

18
00:00:53.040 --> 00:00:56.810
Since one number is missing the given input will have 

19
00:00:56.810 --> 00:01:00.680
numbers from zero to n. But in array of size 

20
00:01:00.690 --> 00:01:04.160
And we can handle indices from zero to n-1 only

21
00:01:04.160 --> 00:01:05.550


22
00:01:05.940 --> 00:01:09.480
So before swap operation we need to check if the 

23
00:01:09.480 --> 00:01:11.350
number is less than size.

24
00:01:11.840 --> 00:01:15.310
Otherwise we will try to swap the elements from out 

25
00:01:15.310 --> 00:01:18.150
of range which might lead to programme crash. 

26
00:01:18.640 --> 00:01:22.540
For example, let us take this array of size five 

27
00:01:22.940 --> 00:01:30.270
and the array elements are 0 1 5 3 4. Here we have element 5

28
00:01:30.270 --> 00:01:34.580
in it But we can't access array of five right? Because 

29
00:01:34.590 --> 00:01:38.220
in array of size five, we can only access indices 

30
00:01:38.220 --> 00:01:40.350
from 0 to 4 

31
00:01:40.740 --> 00:01:43.230
So we need to add that condition also 

32
00:01:43.510 --> 00:01:46.790
So add array[i] less than size.

33
00:01:47.240 --> 00:01:50.460
So the condition will be if array[i] less than

34
00:01:50.470 --> 00:01:54.360
 size and i not equal to array[i]

35
00:01:54.370 --> 00:01:56.440
then we need to swap the numbers.

36
00:01:56.720 --> 00:02:02.530
So write swap of &array[i] and  

37
00:02:02.540 --> 00:02:06.530
&array[array[i]] otherwise just move to next 

38
00:02:06.540 --> 00:02:10.090
element and continue the same process till i less than size. 

39
00:02:10.090 --> 00:02:13.000
So write else i++

40
00:02:13.250 --> 00:02:16.990
Now we have modified the cyclic sort logic based

41
00:02:16.990 --> 00:02:20.310
on this problem now we need to find the missing 

42
00:02:20.310 --> 00:02:20.880
number 

43
00:02:21.240 --> 00:02:24.770
So after the sort each element will be placed in 

44
00:02:24.770 --> 00:02:27.590
its right index except the missing element 

45
00:02:27.840 --> 00:02:31.160
So we need to compare each value to its index 

46
00:02:31.640 --> 00:02:34.310
If it is not equal, we need to return the 

47
00:02:34.320 --> 00:02:38.920
index. So write for i equal to zero, i less than size 

48
00:02:38.930 --> 00:02:42.840
i++ and in each iteration, check if array[i] 

49
00:02:42.840 --> 00:02:47.530
not equal to i then return i. 

50
00:02:47.530 --> 00:02:49.460
Now let us take one more situation 

51
00:02:49.710 --> 00:02:52.450
What if all the elements are present in right  

52
00:02:52.450 --> 00:02:56.330
indices after sorting? For example given an array with 

53
00:02:56.340 --> 00:03:03.520
elements 0 2 3 4 1. After the sorting, the array

54
00:03:03.520 --> 00:03:09.940
will be 0 1 2 3 4. All the elements are present in right indices.

55
00:03:09.950 --> 00:03:13.660
This is in this case this for loop won't 

56
00:03:13.660 --> 00:03:17.540
return anything. Here the missing element is five 

57
00:03:18.010 --> 00:03:21.590
So if all the elements are present in right indices, the missing element is  size. So lastly return size.

