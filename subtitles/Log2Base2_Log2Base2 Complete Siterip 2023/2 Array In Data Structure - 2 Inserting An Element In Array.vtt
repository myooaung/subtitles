WEBVTT

1
00:00:00.140 --> 00:00:00.800
hi friends 

2
00:00:00.810 --> 00:00:02.920
In this video we are going to learn how to 

3
00:00:02.930 --> 00:00:05.850
insert an element at a particular position in an array 

4
00:00:11.740 --> 00:00:15.080
So consider an array with five indices from 0 to 

5
00:00:15.080 --> 00:00:17.680
4 and each

6
00:00:17.690 --> 00:00:21.600
index is currently holding a fruit a watermelon a strawberry 

7
00:00:21.610 --> 00:00:25.840
a mango a banana and a goa. Suppose 

8
00:00:25.840 --> 00:00:28.900
We want to add a pineapple from the basket at 

9
00:00:28.900 --> 00:00:32.900
the index two. To accommodate pineapple at index two first 

10
00:00:32.900 --> 00:00:34.250
we need to make it free 

11
00:00:34.490 --> 00:00:37.380
So we will shift mango banana and goa to 

12
00:00:37.380 --> 00:00:39.980
the right side and make index two free 

13
00:00:40.210 --> 00:00:43.150
So first we need a new location to add new 

14
00:00:43.150 --> 00:00:43.650
fruit 

15
00:00:43.740 --> 00:00:47.570
So we take index five now shift Goa to index 

16
00:00:47.570 --> 00:00:51.379
five so index four is free now then shift banana to 

17
00:00:51.380 --> 00:00:54.190
index four so that index three is free 

18
00:00:54.200 --> 00:00:57.660
Finally Shift Mango to index three so index two 

19
00:00:57.660 --> 00:01:01.270
becomes free so pineapple can be added to this position 

20
00:01:01.370 --> 00:01:02.760
That is how it is done 

21
00:01:04.040 --> 00:01:07.280
Now take this array of size equal to five and 

22
00:01:07.280 --> 00:01:10.460
we have indices from 0 to 4. Here 

23
00:01:10.470 --> 00:01:13.760
we want to insert an element at index two where five 

24
00:01:13.770 --> 00:01:14.779
is already there 

25
00:01:14.950 --> 00:01:18.390
The new element to be inserted is 100. First of 

26
00:01:18.390 --> 00:01:21.630
all we need a new location so size is incremented

27
00:01:21.630 --> 00:01:25.570
by one. Now to insert 100 at index two first 

28
00:01:25.570 --> 00:01:26.850
we want to make it free 

29
00:01:27.120 --> 00:01:31.160
So you want to shift 5 78 and 30 to 

30
00:01:31.160 --> 00:01:33.740
the right side and make index two free. 

31
00:01:34.030 --> 00:01:37.900
So move 30 to index five. Now index four is free 

32
00:01:37.910 --> 00:01:40.720
So move 78 to this position 

33
00:01:40.890 --> 00:01:42.399
Now index three is free 

34
00:01:42.410 --> 00:01:46.330
So move five to this position. Now index two is 

35
00:01:46.330 --> 00:01:46.710
free 

36
00:01:46.720 --> 00:01:52.330
So add 100 here. Now see the code for inserting 

37
00:01:52.330 --> 00:01:55.870
an element at a particular position in an array. Let 

38
00:01:55.870 --> 00:01:56.100
pos

39
00:01:56.100 --> 00:01:56.280
be

40
00:01:56.280 --> 00:01:58.929
The position where we want to insert our element 

41
00:01:59.250 --> 00:02:02.100
The for loop will shift the elements from this particular 

42
00:02:02.100 --> 00:02:05.560
position to one position right making the location for 

43
00:02:05.560 --> 00:02:09.740
new element free. Take an example here is an array of 

44
00:02:09.740 --> 00:02:11.010
size equal to five 

45
00:02:11.270 --> 00:02:14.280
We want to insert an element at index two so 

46
00:02:14.280 --> 00:02:17.570
pos equal to two see how the code works 

47
00:02:17.730 --> 00:02:21.210
So this for loop will execute as long as the 

48
00:02:21.210 --> 00:02:25.739
condition i greater than pos is true When it becomes 

49
00:02:25.740 --> 00:02:29.830
false it exits the for loop first i equal to size 

50
00:02:29.840 --> 00:02:32.579
that is equal to five. First it checks 

51
00:02:32.580 --> 00:02:36.070
whether five is greater than two condition is true 

52
00:02:36.080 --> 00:02:39.220
So array of four that is 30 is moved to 

53
00:02:39.550 --> 00:02:43.630
index five now decrementing i becomes four checks

54
00:02:43.630 --> 00:02:47.000
whether four is greater than two condition is true 

55
00:02:47.010 --> 00:02:49.620
So array of three that is 78 

56
00:02:49.630 --> 00:02:53.269
is moved to index four now decrementing i becomes 

57
00:02:53.270 --> 00:02:54.380
three checks 

58
00:02:54.380 --> 00:02:57.940
whether three is greater than two condition is true 

59
00:02:57.950 --> 00:03:00.640
So array of two that is five 

60
00:03:00.650 --> 00:03:02.080
is moved to index three 

61
00:03:02.390 --> 00:03:06.089
Now decrementing i becomes two checks whether two is 

62
00:03:06.090 --> 00:03:08.420
greater than two condition is false 

63
00:03:08.490 --> 00:03:11.660
So control comes out of the for loop and executes 

64
00:03:11.660 --> 00:03:15.600
the statement array of pos equal to element and stores 

65
00:03:15.600 --> 00:03:19.150
the element 100 at index two. Now let us see 

66
00:03:19.150 --> 00:03:20.580
the time complexities 

67
00:03:20.880 --> 00:03:23.560
The best case will be inserting an element at the 

68
00:03:23.560 --> 00:03:25.620
last position or the case 

69
00:03:25.710 --> 00:03:28.980
If pos is equal to size then the for 

70
00:03:28.980 --> 00:03:32.470
loop condition i greater than pos will be false 

71
00:03:32.630 --> 00:03:36.510
So we wont enter the for loop and directly execute 

72
00:03:36.510 --> 00:03:41.730
the statement Array of pos equal to element and insertion 

73
00:03:41.730 --> 00:03:44.910
will be done So the best case time complexity will 

74
00:03:44.910 --> 00:03:48.530
be order of one now the worst case will be 

75
00:03:48.530 --> 00:03:50.770
inserting an element at position one 

76
00:03:50.780 --> 00:03:53.260
So you need to shift all the elements to the 

77
00:03:53.260 --> 00:03:56.310
right and the for loop will work for n times 

78
00:03:56.320 --> 00:03:57.890
if you have n elements 

79
00:03:57.950 --> 00:04:00.780
So the worst case time complexity will be order 

80
00:04:00.780 --> 00:04:02.880
of n if we have n elements 

