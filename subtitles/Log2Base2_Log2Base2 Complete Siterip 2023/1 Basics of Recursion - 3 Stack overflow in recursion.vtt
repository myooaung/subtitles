WEBVTT

1
00:00:00.040 --> 00:00:03.730
in this video let us discuss about Stack overflow in 

2
00:00:03.730 --> 00:00:04.050
Recursion 

3
00:00:04.050 --> 00:00:08.420
 Stack Overflow is the most frequent issue in Recursion 

4
00:00:08.420 --> 00:00:11.540
and it will result in programme crash 

5
00:00:12.040 --> 00:00:15.020
Let us see what is stack overflow and how can 

6
00:00:15.020 --> 00:00:15.980
be avoided 

7
00:00:16.270 --> 00:00:19.980
As we have learned all the function calls are stored 

8
00:00:19.980 --> 00:00:22.240
in stack for its execution 

9
00:00:22.300 --> 00:00:26.020
After the functions execution it will be removed from the 

10
00:00:26.020 --> 00:00:26.550
stack 

11
00:00:27.240 --> 00:00:30.870
But the stack can hold only finite number of function 

12
00:00:30.870 --> 00:00:35.380
calls let us say n which means the stack has 

13
00:00:35.390 --> 00:00:40.230
the capacity to hold n function calls and when the 

14
00:00:40.230 --> 00:00:44.560
number of function call exceeds n it is called stack 

15
00:00:44.560 --> 00:00:48.600
overflow in Recursion every recursive call will be 

16
00:00:48.600 --> 00:00:51.250
pushed into the stack for execution 

17
00:00:51.840 --> 00:00:52.990
So in recursion 

18
00:00:53.210 --> 00:00:57.470
There are many chances that it can overflow the stack 

19
00:00:57.690 --> 00:01:00.250
Let us understand it with examples 

20
00:01:01.140 --> 00:01:05.410
The first case is if there is no base case in 

21
00:01:05.410 --> 00:01:08.740
a recursive function though will be infinite function 

22
00:01:08.740 --> 00:01:11.850
calls and it will cost stack overflow 

23
00:01:12.640 --> 00:01:15.940
so let us removed the base case from this factorial 

24
00:01:15.940 --> 00:01:16.550
function 

25
00:01:17.240 --> 00:01:21.160
So now what will happen if we take n as 

26
00:01:21.170 --> 00:01:28.710
five then the recursive calls will be 543210 

27
00:01:28.880 --> 00:01:32.020
minus one minus two etcetera etcetera 

28
00:01:32.540 --> 00:01:36.430
It will never end so at some point in time 

29
00:01:36.560 --> 00:01:39.150
it will overflow the stack memory 

30
00:01:40.040 --> 00:01:43.460
so stack overflow issue will happen here and the 

31
00:01:43.460 --> 00:01:46.410
programme will crash the second case 

32
00:01:46.410 --> 00:01:51.010
when stack overflow can happend is and a recursive call doesn't 

33
00:01:51.020 --> 00:01:52.850
aligned towards the base case 

34
00:01:53.340 --> 00:01:57.370
Let us see how Let's modify the recursive call to 

35
00:01:57.590 --> 00:02:01.030
factorial of n plus one instead of factorial 

36
00:02:01.030 --> 00:02:02.250
of n minus one 

37
00:02:02.710 --> 00:02:06.350
Now what will happen if we take n as five 

38
00:02:06.550 --> 00:02:11.150
The recursive calls will be 6789 

39
00:02:11.540 --> 00:02:11.850
etc 

40
00:02:11.850 --> 00:02:15.350
and it will never reach the base case n less than 

41
00:02:15.350 --> 00:02:18.270
or equal to one and it will never end 

42
00:02:18.480 --> 00:02:22.740
which will eventually overflow the stack and result in programme 

43
00:02:22.740 --> 00:02:23.320
crash 

44
00:02:23.370 --> 00:02:26.940
So to avoid stack overflow we need to design the 

45
00:02:26.940 --> 00:02:31.470
recursive function carefully with proper base case and recursive call. 

