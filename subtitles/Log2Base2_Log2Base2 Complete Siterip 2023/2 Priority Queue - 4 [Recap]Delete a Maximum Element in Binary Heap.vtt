WEBVTT

1
00:00:00.540 --> 00:00:01.380
Hello friends 

2
00:00:01.640 --> 00:00:04.790
In this video let us learn how to delete the 

3
00:00:04.790 --> 00:00:06.380
maximum element from a max heap

4
00:00:06.390 --> 00:00:07.130


5
00:00:07.640 --> 00:00:16.460
In the previous videos we discussed about heaps and how to 

6
00:00:16.460 --> 00:00:19.680
construct the heap from an array. That is we learnt 

7
00:00:19.680 --> 00:00:20.950
the heapify function 

8
00:00:21.440 --> 00:00:24.670
So the procedure to remove the max element in the 

9
00:00:24.670 --> 00:00:29.180
heap is first heapify the array that arranges all the 

10
00:00:29.180 --> 00:00:33.010
elements based on the max-heap property. That we have discussed 

11
00:00:33.010 --> 00:00:36.440
in the previous video. At the end of this process 

12
00:00:36.440 --> 00:00:39.800
 the largest element will be present in the root 

13
00:00:39.800 --> 00:00:40.960
of the complete tree

14
00:00:40.970 --> 00:00:44.290
In other words, it will be present in the array

15
00:00:44.290 --> 00:00:45.550
index  0

16
00:00:46.440 --> 00:00:49.540
Next we have to swap the first and last elements 

17
00:00:49.540 --> 00:00:50.250
of the array.

18
00:00:51.040 --> 00:00:54.740
Now the largest element will be present at the end 

19
00:00:54.740 --> 00:00:58.710
of the array. Now we can remove the last element 

20
00:00:58.720 --> 00:01:03.500
by reducing the array size and after removal of this element 

21
00:01:03.570 --> 00:01:07.170
we have to check the max-heap property of index zero 

22
00:01:07.940 --> 00:01:11.850
and if it is not correctly satisfied, swap and continue 

23
00:01:11.850 --> 00:01:15.990
the heapify process. Here the heap property is 

24
00:01:15.990 --> 00:01:17.120
not satisfied. 

25
00:01:17.320 --> 00:01:19.149
So we have to heapify the tree 

26
00:01:20.140 --> 00:01:22.580
So this is how we can delete the maximum 

27
00:01:22.590 --> 00:01:23.950
element in a max heap

28
00:01:24.740 --> 00:01:28.080
So the algorithm is heapify the array 

29
00:01:28.080 --> 00:01:31.740
 swap the first and last elements, reduce

30
00:01:31.740 --> 00:01:35.710
the array size by one. Check heap property from index zero

31
00:01:35.710 --> 00:01:38.030
and arrange it accordingly 

32
00:01:38.490 --> 00:01:40.350
And then the deletion is done. 

33
00:01:41.840 --> 00:01:44.410
So now let us see how the code works 

34
00:01:45.440 --> 00:01:48.630
We have the function delete_max to delete the maximum 

35
00:01:48.640 --> 00:01:49.280
element 

36
00:01:49.840 --> 00:01:52.899
So as we said the first step is to swap 

37
00:01:52.910 --> 00:01:55.830
first and last elements. 

38
00:01:55.840 --> 00:01:59.140
So swap arr[0] and arr[size]

39
00:02:00.040 --> 00:02:03.810
Now the maximum element is at the last position 

40
00:02:04.440 --> 00:02:07.750
Now let us print the maximum element that is  

41
00:02:07.750 --> 00:02:12.330
arr[size] and we will get max equal to 80

42
00:02:11.500 --> 00:02:12.330
 

43
00:02:12.340 --> 00:02:16.620
printed on the screen. Now set size equal to size-1

44
00:02:16.620 --> 00:02:20.489
 so that the last index is removed from the array

45
00:02:21.240 --> 00:02:25.070
now the maximum element is deleted from the heap 

46
00:02:25.640 --> 00:02:28.450
Now we have to check if the heap property is 

47
00:02:28.450 --> 00:02:33.580
violated by this deletion. So pass the index 0 to 

48
00:02:33.580 --> 00:02:37.580
heapify function along with the array and its size 

49
00:02:37.580 --> 00:02:40.470
So in heapify, the index equal to zero 

50
00:02:40.470 --> 00:02:43.260
and size equal to 5 and it is not equal to six 

51
00:02:43.260 --> 00:02:46.630
as we decremented it earlier in the Deletemax 

52
00:02:46.630 --> 00:02:51.470
 function. Now let us find the left and right children 

53
00:02:51.480 --> 00:02:55.830
of node at this index that is zero. 

54
00:02:55.830 --> 00:02:59.020
So left = 2*index+1 

55
00:02:59.020 --> 00:03:02.710
that is 2*0+1 which is equal to 1  

56
00:03:02.710 --> 00:03:05.910
and right = left+1 that is 2

57
00:03:04.020 --> 00:03:05.910


58
00:03:06.840 --> 00:03:10.590
And here we are assuming that this sub tree satisfies 

59
00:03:10.590 --> 00:03:11.730
the heap property 

60
00:03:12.240 --> 00:03:15.880
So keep max and index at the same position 

61
00:03:16.440 --> 00:03:19.579
And if any child is greater than parent we will 

62
00:03:19.590 --> 00:03:20.799
update Max 

63
00:03:21.340 --> 00:03:24.800
And finally if max and index are different we have to 

64
00:03:24.800 --> 00:03:26.480
perform swap operation 

65
00:03:27.640 --> 00:03:31.860
so first check if left child is greater than this 

66
00:03:31.860 --> 00:03:32.500
node 

67
00:03:32.570 --> 00:03:35.820
So we have if left less than or equal to size

68
00:03:35.820 --> 00:03:40.119
and arr[left] greater than arr[max] 

69
00:03:40.740 --> 00:03:43.280
and we have one less than size 

70
00:03:43.490 --> 00:03:46.150
But 30 is not greater than 50 

71
00:03:46.540 --> 00:03:51.100
So this if fails here. now check if right child 

72
00:03:51.110 --> 00:03:52.490
is greater than max 

73
00:03:53.140 --> 00:03:56.040
So we have if right less than or equal to size

74
00:03:56.040 --> 00:04:00.440
and arr[right] greater than arr[max]

75
00:04:00.940 --> 00:04:04.750
and we have 2 less than size and 60 greater 

76
00:04:04.750 --> 00:04:05.650
than 50 

77
00:04:06.140 --> 00:04:09.490
So the right child 60 is greater than the current 

78
00:04:09.490 --> 00:04:11.549
max value which is 50 

79
00:04:12.140 --> 00:04:15.740
So update max and we got max equal to right

80
00:04:15.750 --> 00:04:16.849
That is 2

81
00:04:17.420 --> 00:04:20.610
And see now we have the maximum value of this 

82
00:04:20.610 --> 00:04:25.989
sub tree at Max. now check if max was updated 

83
00:04:26.000 --> 00:04:30.090
that is max was initially set to index. now check 

84
00:04:30.100 --> 00:04:34.550
If max and index are the same and max is equal to 2

85
00:04:34.560 --> 00:04:37.570
and index equal to zero now. So it is 

86
00:04:37.570 --> 00:04:38.430
not the same 

87
00:04:38.640 --> 00:04:42.860
So if condition is true. So swap the elements at 

88
00:04:42.860 --> 00:04:47.850
Max and Index that is 60 and 50 are swapped 

89
00:04:48.500 --> 00:04:51.650
Now the maximum element is at the root position 

90
00:04:52.540 --> 00:04:55.410
Again we need to check for the max heap property of 

91
00:04:55.420 --> 00:04:56.690
the swapped index 

92
00:04:57.340 --> 00:05:01.650
So call heapify again by passing the array, max and 

93
00:05:01.650 --> 00:05:02.219
size 

94
00:05:02.940 --> 00:05:06.740
So here Index is equal to 2 and size equal to 5

95
00:05:06.320 --> 00:05:06.740


96
00:05:07.540 --> 00:05:10.620
Let us first find the left and right children of 

97
00:05:10.630 --> 00:05:12.620
node at this index. 

98
00:05:12.620 --> 00:05:18.979
So left = 2*index+1 that is 2*2+1 which is 5 

99
00:05:18.980 --> 00:05:22.490
 and right = left+1 which is 6

100
00:05:22.490 --> 00:05:25.750
 and set max equal to index 

101
00:05:27.040 --> 00:05:30.790
Now let us find the maximum value in this sub tree 

102
00:05:30.420 --> 00:05:30.790
 

103
00:05:31.340 --> 00:05:35.600
So check if left less than or equal to size 

104
00:05:35.610 --> 00:05:39.090
and arr[left] greater than arr[max] 50

105
00:05:39.640 --> 00:05:43.360
left five is equal to size and arr[left]  

106
00:05:43.360 --> 00:05:46.950
40 is not greater than arr[max] 50 

107
00:05:47.340 --> 00:05:51.140
So this if fails here. Now check the right child 

108
00:05:51.210 --> 00:05:55.570
We have right 6 not less than or equal to size

109
00:05:55.080 --> 00:05:55.570


110
00:05:55.620 --> 00:05:58.880
So this if also fails. Now check 

111
00:05:58.890 --> 00:06:03.530
If max was updated and it was not. So no 

112
00:06:03.530 --> 00:06:07.120
need to rearrange and we can understand that now the 

113
00:06:07.120 --> 00:06:10.330
heap is perfect. So that is how we can  

114
00:06:10.330 --> 00:06:14.260
delete the maximum element of a heap. Now let us 

115
00:06:14.260 --> 00:06:18.170
delete the maximum element again from this resultant heap. 

116
00:06:18.940 --> 00:06:21.600
So as we said the first step is to swap 

117
00:06:21.610 --> 00:06:26.890
first and last elements. So swap arr[0] and arr[size] 

118
00:06:26.890 --> 00:06:30.680
 that is 60 and 40. 

119
00:06:30.680 --> 00:06:33.030
Now the maximum element 60 is at the

120
00:06:33.030 --> 00:06:34.100
Last position 

121
00:06:34.640 --> 00:06:38.620
So let us print the maximum element which is arr[size]

122
00:06:38.790 --> 00:06:41.300
and we will get max equal to 60 

123
00:06:41.310 --> 00:06:45.660
printed on the screen. Now set size equal to size-1 

124
00:06:45.660 --> 00:06:48.950
 to reduce the array size by one 

125
00:06:49.740 --> 00:06:51.540
so size equal to 4 now 

126
00:06:52.340 --> 00:06:55.320
Now the maximum element is deleted from the heap 

127
00:06:56.340 --> 00:06:59.280
Now we have to check if the heap property was 

128
00:06:59.280 --> 00:07:04.010
violated by this deletion. So pass index 0 to 

129
00:07:04.010 --> 00:07:08.110
heapify function along with the array and its size.  

130
00:07:08.110 --> 00:07:11.280
So in heapify, the index is equal to zero and 

131
00:07:11.280 --> 00:07:12.950
size is equal to four 

132
00:07:13.940 --> 00:07:17.280
Let us first find the left and right children of 

133
00:07:17.290 --> 00:07:20.409
the node at this index. So left equal to 2*index+1

134
00:07:20.410 --> 00:07:25.290
 that is 2*0+1

135
00:07:25.290 --> 00:07:28.690
 which is one and right equal to left+1 

136
00:07:28.690 --> 00:07:29.850
that is 2. 

137
00:07:31.340 --> 00:07:34.110
And as we said we are assuming that this sub tree 

138
00:07:34.110 --> 00:07:37.800
satisfies the heap property. So we will keep Max 

139
00:07:37.800 --> 00:07:39.650
and index at the same position 

140
00:07:40.440 --> 00:07:44.360
So now Max equal to zero. Now check if left 

141
00:07:44.360 --> 00:07:47.810
child is greater than this node So we have if 

142
00:07:47.820 --> 00:07:51.050
left less than or equal to size and

143
00:07:51.060 --> 00:07:56.510
arr[left] greater than arr[max]. And we have  

144
00:07:56.510 --> 00:07:59.960
1 less than size. But 30 is not greater than 40 

145
00:08:01.040 --> 00:08:04.580
So if fails here and let us check if right 

146
00:08:04.590 --> 00:08:09.300
child is greater than max. So we have if right  

147
00:08:09.300 --> 00:08:12.770
 less than or equal to size and arr[right] greater than 

148
00:08:12.780 --> 00:08:17.100
arr[max] and we have 2 less than size 

149
00:08:17.100 --> 00:08:18.950
and 50 greater than 40 

150
00:08:19.440 --> 00:08:23.549
So the right child 50 is greater than parent 40 

151
00:08:24.340 --> 00:08:28.280
So update max and we got max equal to right

152
00:08:28.440 --> 00:08:29.450
That is 2. 

153
00:08:30.040 --> 00:08:32.920
And see, now we have the maximum value of this 

154
00:08:32.920 --> 00:08:35.290
sub tree at max

155
00:08:35.290 --> 00:08:38.100
Now check if max was updated. That is 

156
00:08:38.100 --> 00:08:41.109
Max was initially set to index. Now check 

157
00:08:41.240 --> 00:08:45.700
If Max and Index are different and it is. so 

158
00:08:45.710 --> 00:08:50.189
if is true so swap elements at Max and Index 

159
00:08:50.840 --> 00:08:54.050
and the maximum element is now at the root position 

160
00:08:54.840 --> 00:08:57.600
Again we read to check for the max heap property of 

161
00:08:57.610 --> 00:09:01.939
the swapped Index. So call heapify again by passing 

162
00:09:01.940 --> 00:09:07.589
the array, max and size and here index equal to 2 and 

163
00:09:07.590 --> 00:09:10.670
size equal to 4. Let us

164
00:09:10.670 --> 00:09:13.320
First find the left and right children of the node 

165
00:09:13.330 --> 00:09:17.030
at this index that is 2 

166
00:09:17.030 --> 00:09:20.220
So left = 2*index+1 that is 2*2+1

167
00:09:20.230 --> 00:09:23.530
 which is five and right equal to left+1

168
00:09:23.530 --> 00:09:26.949
 which will be six and set max equal 

169
00:09:26.950 --> 00:09:27.800
to index 

170
00:09:28.340 --> 00:09:32.050
That is 2. Now check if left and right child 

171
00:09:32.060 --> 00:09:36.050
is greater than this node. So we have if left 

172
00:09:36.050 --> 00:09:37.640
less than or equal to size

173
00:09:37.650 --> 00:09:41.750
arr[left] greater than arr[max] 

174
00:09:41.750 --> 00:09:44.780
but left five is not less than or equal to size 

175
00:09:44.790 --> 00:09:48.449
So this if fails here. Now check 

176
00:09:48.450 --> 00:09:52.250
the right child. we have right 6 not less than 

177
00:09:52.260 --> 00:09:53.510
or equal to size 

178
00:09:53.610 --> 00:09:57.750
So again this if fails. Now check if max was 

179
00:09:57.750 --> 00:09:59.890
updated but it was not. 

180
00:09:59.890 --> 00:10:03.010
So there is no need to rearrange the nodes and we 

181
00:10:03.010 --> 00:10:06.439
can understand that the heap is now perfect 

182
00:10:07.040 --> 00:10:09.670
So this is how we should remove the maximum or

183
00:10:09.670 --> 00:10:11.449
minimum element from the heap 

184
00:10:12.340 --> 00:10:15.110
So first we have to swap the first and last 

185
00:10:15.110 --> 00:10:15.700
elements 

186
00:10:15.950 --> 00:10:18.790
Then we can reduce the size of array by one 

187
00:10:18.800 --> 00:10:21.390
so that the maximum element is deleted 

188
00:10:21.740 --> 00:10:23.510
Then we have to heapify the tree 

189
00:10:24.340 --> 00:10:25.140
So that's all 

190
00:10:25.150 --> 00:10:27.890
And in the next video we will learn the applications 

191
00:10:27.890 --> 00:10:28.579
of binary heap

