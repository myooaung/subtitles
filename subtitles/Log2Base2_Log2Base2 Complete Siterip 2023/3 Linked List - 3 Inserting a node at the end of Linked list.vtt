WEBVTT

1
00:00:00.240 --> 00:00:03.550
in this video we're going to learn how to insert 

2
00:00:03.550 --> 00:00:05.850
a node at the end of a linked list 

3
00:00:06.000 --> 00:00:09.280
So this is the code to implement the programme here 

4
00:00:09.290 --> 00:00:12.560
The function add last will insert the node at the 

5
00:00:12.570 --> 00:00:13.930
end of the linked list 

6
00:00:14.000 --> 00:00:16.800
Here we have a linked list which is now empty 

7
00:00:17.170 --> 00:00:19.450
so head is equal to null here 

8
00:00:19.740 --> 00:00:22.930
Suppose we need to insert the element 10 to the 

9
00:00:22.930 --> 00:00:26.410
linked list and the value to be inserted here which 

10
00:00:26.410 --> 00:00:30.070
is 10 is passed to the function and it stored 

11
00:00:30.080 --> 00:00:30.730
in Val 

12
00:00:30.950 --> 00:00:34.290
So first we need to create a new node and 

13
00:00:34.290 --> 00:00:36.600
fill the data and reference part 

14
00:00:36.830 --> 00:00:38.660
So first create the new node 

15
00:00:38.950 --> 00:00:44.050
So write node new node equal to new node 

16
00:00:44.140 --> 00:00:45.950
So the new node is created 

17
00:00:46.210 --> 00:00:49.700
Now in data part we are storing the past value 

18
00:00:49.710 --> 00:00:53.330
val and in the linked part or next part we're 

19
00:00:53.330 --> 00:00:54.090
storing null 

20
00:00:54.260 --> 00:00:58.500
So write new node dot data equal to Val and 

21
00:00:58.500 --> 00:01:01.720
new node dot next equal to null now the new 

22
00:01:01.720 --> 00:01:04.750
node is created and is holding the value 10th 

23
00:01:04.840 --> 00:01:07.960
Now the next step is to find where to insert 

24
00:01:07.960 --> 00:01:10.980
this node for that first we want to check if 

25
00:01:10.980 --> 00:01:12.140
the head is null 

26
00:01:12.260 --> 00:01:15.380
If head is null that means the linked list is 

27
00:01:15.380 --> 00:01:18.370
now empty And the new node we are going to 

28
00:01:18.380 --> 00:01:20.360
insert is the first node 

29
00:01:20.400 --> 00:01:22.970
So new node should become the head of the linked 

30
00:01:22.970 --> 00:01:23.410
list 

31
00:01:23.700 --> 00:01:28.090
So write if head equal to null then head equal 

32
00:01:28.090 --> 00:01:31.800
to new node here head is null so made new node 

33
00:01:31.810 --> 00:01:34.800
the head if head is not null 

34
00:01:35.120 --> 00:01:38.540
That means the linked list is not empty and there 

35
00:01:38.540 --> 00:01:40.500
are nodes already present in it 

36
00:01:40.590 --> 00:01:44.690
So considered this case Let us insert another element 20 

37
00:01:44.700 --> 00:01:49.040
So the function add last is called with value 20 

38
00:01:49.050 --> 00:01:52.340
So a new node is created for 20 with data 

39
00:01:52.340 --> 00:01:56.270
part 20 and next part Null when we check if 

40
00:01:56.270 --> 00:01:59.180
head is null it is not so we go to the 

41
00:01:59.190 --> 00:02:00.040
else part 

42
00:02:00.160 --> 00:02:03.390
Our aim here is to insert the node at the 

43
00:02:03.400 --> 00:02:04.840
end of the linked list 

44
00:02:04.850 --> 00:02:07.800
So here we want to find the last node so 

45
00:02:07.800 --> 00:02:10.710
that we can insert new node after that 

46
00:02:10.770 --> 00:02:13.840
As we know the last node will have null value 

47
00:02:13.850 --> 00:02:16.830
at the next part so we can start checking from 

48
00:02:16.830 --> 00:02:20.600
the head node till we reach the node with next 

49
00:02:20.610 --> 00:02:22.860
equal to null so to Travers 

50
00:02:22.870 --> 00:02:24.410
We need a temporary node 

51
00:02:24.500 --> 00:02:27.750
So declare last node and initialised to head 

52
00:02:28.140 --> 00:02:32.390
So write node last node equal to head 

53
00:02:32.550 --> 00:02:36.890
Now use while loop while last node dot next 

54
00:02:36.900 --> 00:02:40.410
not equal to null and moved to next node in 

55
00:02:40.420 --> 00:02:46.010
each iteration So inside write last node equal to last 

56
00:02:46.010 --> 00:02:47.550
node dot next 

57
00:02:47.940 --> 00:02:52.040
So when is loop terminates We will have last node pointed 

58
00:02:52.050 --> 00:02:56.070
by last node So just insert our new node after 

59
00:02:56.070 --> 00:02:57.270
this last node 

60
00:02:57.550 --> 00:03:01.550
So write last node dot next equal to new node 

61
00:03:01.590 --> 00:03:05.280
So here head itself is having null value at the 

62
00:03:05.280 --> 00:03:06.050
next part 

63
00:03:06.240 --> 00:03:08.250
And hence it is the last node 

64
00:03:08.340 --> 00:03:12.260
So the while loop condition fails in first checking itself 

65
00:03:12.370 --> 00:03:15.960
And by executing this statement the next part of the 

66
00:03:15.960 --> 00:03:18.900
last node will now point to the new node which 

67
00:03:18.900 --> 00:03:22.560
is 20 and now 20 has become the end of 

68
00:03:22.570 --> 00:03:23.480
the linked list 

69
00:03:23.730 --> 00:03:27.230
Now let us insert another element 30 So a new 

70
00:03:27.230 --> 00:03:30.260
node is created for 30 and now we want to 

71
00:03:30.260 --> 00:03:32.100
find word to inserted 

72
00:03:32.260 --> 00:03:34.650
So we are checking if head is null 

73
00:03:34.740 --> 00:03:36.180
But it is not so 

74
00:03:36.180 --> 00:03:38.510
We go to the else part and we want to 

75
00:03:38.510 --> 00:03:41.140
find the last node of the linked list 

76
00:03:41.350 --> 00:03:43.890
And the last node will have null value at the 

77
00:03:43.890 --> 00:03:44.730
next part 

78
00:03:44.750 --> 00:03:45.640
And we have this 

79
00:03:45.640 --> 00:03:49.570
while loop here to find the last node First last 

80
00:03:49.570 --> 00:03:51.790
node is initialised to head 

81
00:03:51.990 --> 00:03:55.580
Now we check the while condition and here head is 

82
00:03:55.580 --> 00:03:57.650
not having null at the linked Pat 

83
00:03:57.840 --> 00:03:59.320
So the condition is true 

84
00:03:59.410 --> 00:04:01.200
So we move further to write 

85
00:04:01.380 --> 00:04:04.970
So last node now points to 20 now check the 

86
00:04:04.970 --> 00:04:09.210
while condition again and we have last node dot next 

87
00:04:09.220 --> 00:04:10.250
equal to null 

88
00:04:10.440 --> 00:04:13.960
So while condition will fail here and the control comes 

89
00:04:13.970 --> 00:04:17.810
out of the while loop So now the next step is 

90
00:04:17.810 --> 00:04:21.250
to insert this new node after the last node 

91
00:04:21.540 --> 00:04:25.410
So make last node dot next equal to new node 

92
00:04:25.750 --> 00:04:29.500
And finally this node 30 has become the end of 

93
00:04:29.510 --> 00:04:30.450
the linked list .

