WEBVTT

1
00:00:00.440 --> 00:00:03.540
Hello friends in this video to see how to perform 

2
00:00:03.540 --> 00:00:04.400
deletion here 

3
00:00:06.040 --> 00:00:06.900
In deletion 

4
00:00:06.910 --> 00:00:10.040
We simply search for the value to be deleted and 

5
00:00:10.040 --> 00:00:13.050
make that index value equal to minus one 

6
00:00:13.840 --> 00:00:16.600
So we have a function del here which takes the 

7
00:00:16.600 --> 00:00:20.050
value to be deleted and we have this hash table 

8
00:00:20.050 --> 00:00:20.450


9
00:00:21.140 --> 00:00:24.750
Let's delete five first so value equal to five 

10
00:00:25.240 --> 00:00:29.000
And by our hash function five should have been stored 

11
00:00:29.000 --> 00:00:32.250
in index five mod five which is equal to zero 

12
00:00:33.040 --> 00:00:36.540
So just copy to index and check If index zero 

13
00:00:36.550 --> 00:00:37.340
has the value 

14
00:00:37.340 --> 00:00:37.850
Five 

15
00:00:38.540 --> 00:00:41.260
So just as we did an insertion we can use 

16
00:00:41.260 --> 00:00:44.790
while loop with condition arr of index 

17
00:00:44.790 --> 00:00:47.810
not equal to value and if it is equal to 

18
00:00:47.810 --> 00:00:51.870
value simply make it minus one and otherwise we have 

19
00:00:51.880 --> 00:00:53.110
to check in the next index

20
00:00:53.110 --> 00:00:56.990
This is so here arr of index equal to 10 

21
00:00:57.000 --> 00:00:58.850
and not equal to five 

22
00:00:59.130 --> 00:01:02.180
So the while condition is satisfied so we find the 

23
00:01:02.180 --> 00:01:06.030
next index that is index plus one mod size that 

24
00:01:06.030 --> 00:01:09.440
is zero plus one mod five that is one mod 

25
00:01:09.440 --> 00:01:12.090
five equal to one and check if it is equal 

26
00:01:12.090 --> 00:01:15.360
to key and it is not so If fails and 

27
00:01:15.360 --> 00:01:18.920
this iteration is completed now in the next iteration 

28
00:01:18.930 --> 00:01:22.600
Checked the while condition and we have arr of one 

29
00:01:22.610 --> 00:01:25.010
equal to 15 and not our value 

30
00:01:25.010 --> 00:01:25.450
Five 

31
00:01:26.040 --> 00:01:27.850
So again while is true 

32
00:01:28.240 --> 00:01:31.740
So find the new index and we have index equal 

33
00:01:31.740 --> 00:01:36.520
to index plus one mod size that is one plus one 

34
00:01:36.520 --> 00:01:39.320
mod five that is two mod five equal to two 

35
00:01:40.040 --> 00:01:42.940
now check If it is equal to key and it is 

36
00:01:42.940 --> 00:01:44.060
not so 

37
00:01:44.070 --> 00:01:47.410
If fails here and this iteration is completed now in 

38
00:01:47.410 --> 00:01:51.230
the next iteration checked the while condition and we have 

39
00:01:51.450 --> 00:01:53.990
a r r of two equal to two and not 

40
00:01:54.000 --> 00:01:54.670
our value 

41
00:01:54.670 --> 00:01:55.150
Five 

42
00:01:55.740 --> 00:01:58.940
So again while is true that is five 

43
00:01:58.940 --> 00:02:01.320
is not present in this index 

44
00:02:01.320 --> 00:02:02.030
Also 

45
00:02:02.110 --> 00:02:05.140
So find the new index and we have index equal 

46
00:02:05.140 --> 00:02:07.330
to index plus one mod size 

47
00:02:07.600 --> 00:02:10.460
That is two plus one mod five that is three 

48
00:02:10.460 --> 00:02:13.750
mod five equal to three now check If it is 

49
00:02:13.760 --> 00:02:17.540
equal to key and it is not so if fails here 

50
00:02:17.550 --> 00:02:19.250
and this iteration is completed 

51
00:02:19.840 --> 00:02:23.390
now in The next iteration checked the while condition and we 

52
00:02:23.390 --> 00:02:27.150
have arr of three equal to value that is five 

53
00:02:27.740 --> 00:02:31.160
that is value to be deleted is found at index 

54
00:02:31.250 --> 00:02:31.650
three 

55
00:02:32.140 --> 00:02:35.000
So while fails here and we can set arr of 

56
00:02:35.010 --> 00:02:38.650
index equal to minus one that is the index three 

57
00:02:38.660 --> 00:02:42.560
is now available for further insertion so the deletion is 

58
00:02:42.560 --> 00:02:43.330
successful 

59
00:02:43.500 --> 00:02:47.950
So return one now let us delete 50 from this hash table 

60
00:02:48.640 --> 00:02:52.460
so value equalled to 50 and by our hash function 

61
00:02:52.750 --> 00:02:55.700
for 50 should've been stored in index 15 

62
00:02:55.700 --> 00:02:59.590
mod five which is equal to zero so just copy it 

63
00:02:59.590 --> 00:03:03.520
zero to index and check if index zero has the 

64
00:03:03.520 --> 00:03:07.460
value 50 and arr of index equal to 10 and 

65
00:03:07.460 --> 00:03:08.650
not value 50 

66
00:03:09.240 --> 00:03:12.400
So the while condition is satisfied here and we have 

67
00:03:12.400 --> 00:03:15.950
to find the next index that is index plus one 

68
00:03:16.000 --> 00:03:19.040
mod size that is zero plus one mod five 

69
00:03:19.050 --> 00:03:22.340
That is one mod five equal to one and check 

70
00:03:22.350 --> 00:03:24.810
if it is equal to key and it is not 

71
00:03:25.030 --> 00:03:25.320
so 

72
00:03:25.330 --> 00:03:28.620
If fails and the iteration is completed now in the 

73
00:03:28.620 --> 00:03:32.380
next iteration checked the while condition and we have arr 

74
00:03:32.380 --> 00:03:35.850
of one equal to 15 and not our value 50 

75
00:03:36.440 --> 00:03:40.070
So again while condition is satisfied which means 50 is 

76
00:03:40.070 --> 00:03:43.750
not present in this index so find a new index 

77
00:03:43.760 --> 00:03:46.750
and we have index equal to index plus one mod 

78
00:03:46.750 --> 00:03:50.050
size that is one plus one mod five that is 

79
00:03:50.050 --> 00:03:53.170
two mod five equal to two and check if it 

80
00:03:53.170 --> 00:03:56.080
is equal to key and it is not so 

81
00:03:56.090 --> 00:03:59.460
If fails and this iteration is completed now in the 

82
00:03:59.460 --> 00:04:02.700
next iteration checked the while condition and we have arr 

83
00:04:02.700 --> 00:04:05.200
of two equal to two and not our value 

84
00:04:05.200 --> 00:04:05.750
50 

85
00:04:06.240 --> 00:04:08.250
So again the condition is satisfied 

86
00:04:08.780 --> 00:04:12.040
That is 50 is not present in this index 

87
00:04:12.040 --> 00:04:15.550
Also so find the new index and we have index 

88
00:04:15.550 --> 00:04:18.320
equal two plus one mod five that is 

89
00:04:18.320 --> 00:04:21.360
three mod five equal to three and check if it 

90
00:04:21.360 --> 00:04:23.810
is equal to key and it is not so 

91
00:04:23.820 --> 00:04:27.010
If fails and this iteration is completed now in the 

92
00:04:27.010 --> 00:04:30.540
next iteration checked the while condition and we have arr 

93
00:04:30.540 --> 00:04:33.850
of three is equal to minus one and not our 

94
00:04:33.850 --> 00:04:34.350
value 

95
00:04:34.360 --> 00:04:34.950
50 

96
00:04:35.340 --> 00:04:39.120
So again while is true 50 is not present 

97
00:04:39.120 --> 00:04:42.550
in this index to so finding new index and we have 

98
00:04:42.560 --> 00:04:45.980
index equal to index plus one mod size 

99
00:04:46.050 --> 00:04:49.860
That is three plus one mod five equal to four mod 

100
00:04:49.860 --> 00:04:53.380
five equal to four and check if it is equal 

101
00:04:53.380 --> 00:04:55.600
to key and it is not so 

102
00:04:55.610 --> 00:04:58.940
If fails and this iteration is completed now in 

103
00:04:58.940 --> 00:05:02.200
the next iteration checked the while condition and we have 

104
00:05:02.210 --> 00:05:05.410
arr of four equal to four and not our value 

105
00:05:05.410 --> 00:05:05.890
50 

106
00:05:06.260 --> 00:05:09.820
So again while is true that is fifty's not present 

107
00:05:09.820 --> 00:05:11.250
in index for also 

108
00:05:11.640 --> 00:05:14.360
So find the new index and we have index 

109
00:05:14.360 --> 00:05:17.630
equal to four plus one mod five which is 

110
00:05:17.640 --> 00:05:20.940
five mod five equal to zero and check if it 

111
00:05:20.940 --> 00:05:22.030
is equal to key 

112
00:05:22.040 --> 00:05:25.790
And it is that is we search from index zero 

113
00:05:25.910 --> 00:05:28.720
till we reached index zero again and we did 

114
00:05:28.720 --> 00:05:31.570
not find 50 which means it is not present in 

115
00:05:31.570 --> 00:05:32.450
this hash table 

116
00:05:32.840 --> 00:05:34.600
So deletion is not possible 

117
00:05:34.800 --> 00:05:38.350
So written zero since the deletion was unsuccessful 

118
00:05:38.940 --> 00:05:42.350
So we learnt how insertion and deletion can be performed.

