WEBVTT

1
00:00:00.940 --> 00:00:01.630
Hi friends 

2
00:00:01.640 --> 00:00:04.770
In this video we are going to discuss about malloc in C.

3
00:00:10.770 --> 00:00:14.000
Firstly malloc stands for memory allocation. 

4
00:00:14.260 --> 00:00:16.710
so memory can be allocated in two ways 

5
00:00:16.770 --> 00:00:21.130
statically or dynamically. In static allocation, memory is allocated at 

6
00:00:21.130 --> 00:00:22.759
compile time in stack. 

7
00:00:23.020 --> 00:00:26.450
But in dynamic memory allocation, memory gets allocated at run 

8
00:00:26.450 --> 00:00:27.350
time in heap.

9
00:00:27.940 --> 00:00:30.960
Both stack and heap sections are stored in random access 

10
00:00:30.960 --> 00:00:32.550
memory of the computer system 

11
00:00:33.140 --> 00:00:37.130
We often use declaration statements like int a, char c,

12
00:00:37.130 --> 00:00:38.050
float number  etc.

13
00:00:38.060 --> 00:00:38.650


14
00:00:38.660 --> 00:00:42.530
All these comes under static allocation whereas using malloc

15
00:00:42.530 --> 00:00:43.060
calloc etc.

16
00:00:43.060 --> 00:00:43.550
 

17
00:00:43.550 --> 00:00:45.599
comes under dynamic memory allocation 

18
00:00:46.040 --> 00:00:48.530
Now the question is, why do we need dynamic memory 

19
00:00:48.530 --> 00:00:51.820
allocation? It is because there will be many cases where

20
00:00:51.820 --> 00:00:54.370
we don't know exactly how much memory we are going 

21
00:00:54.370 --> 00:00:55.000
to use. 

22
00:00:55.150 --> 00:00:57.930
If we allocate the memory initially maybe it will not 

23
00:00:57.930 --> 00:01:00.150
be sufficient or it may get wasted. 

24
00:01:00.740 --> 00:01:03.970
So in such cases we can use dynamic memory allocation 

25
00:01:03.970 --> 00:01:08.009
which is very efficient because here whenever memory is needed 

26
00:01:08.020 --> 00:01:09.960
it is allocated in runtime 

27
00:01:10.450 --> 00:01:14.070
So to dynamically allocate memory we have two inbuilt functions 

28
00:01:14.080 --> 00:01:16.240
malloc and calloc which are declared in 

29
00:01:16.240 --> 00:01:17.220
Standard Library 

30
00:01:17.220 --> 00:01:18.690
file stdlib.h

31
00:01:18.690 --> 00:01:19.450
 

32
00:01:20.040 --> 00:01:22.450
So to use these functions in our programme we must 

33
00:01:22.460 --> 00:01:26.539
include stdlib.h first. Now let us see 

34
00:01:26.540 --> 00:01:27.630
an example programme 

35
00:01:27.630 --> 00:01:31.050
Where we first declare an integer pointer ptr and it 

36
00:01:31.050 --> 00:01:32.720
is a static memory  allocation 

37
00:01:32.720 --> 00:01:36.649
So memory is allocated in Stack and let's assume memory 

38
00:01:36.650 --> 00:01:40.170
for ptr is allocated at address 2048 

39
00:01:40.520 --> 00:01:43.729
Next we have a dynamic memory allocation statement which uses 

40
00:01:43.740 --> 00:01:43.929
 

41
00:01:43.930 --> 00:01:47.770
malloc function and malloc function actually takes one argument 

42
00:01:47.770 --> 00:01:49.100
which is the size of memory 

43
00:01:49.100 --> 00:01:52.139
needed in bytes and it returns the base address 

44
00:01:52.140 --> 00:01:54.990
of the memory allocated, that is if we have 

45
00:01:55.000 --> 00:01:57.520
malloc(10), 10 bytes of memory will get 

46
00:01:57.530 --> 00:02:00.730
allocated in heap and return its base address 

47
00:02:01.240 --> 00:02:04.710
So here in this programme we have malloc(5) x sizeof(int) 

48
00:02:04.790 --> 00:02:05.160
 

49
00:02:05.290 --> 00:02:08.840
It actually means we need memory for five integers

50
00:02:08.950 --> 00:02:12.200
So when translating size of int = four so 

51
00:02:12.200 --> 00:02:14.710
5 x 4 we get 20 bytes which is what 

52
00:02:14.710 --> 00:02:15.280
we need 

53
00:02:15.500 --> 00:02:18.490
So 20 bytes of memory is allocated in heap and 

54
00:02:18.500 --> 00:02:23.230
assume at address 1000 and by default this allocated memory 

55
00:02:23.230 --> 00:02:26.850
will be filled with garbage values and its base address 

56
00:02:26.970 --> 00:02:29.830
1000 is returned which will be stored in ptr 

57
00:02:30.110 --> 00:02:32.239
So that is why we need a pointer here 

58
00:02:32.250 --> 00:02:35.320
Using ptr, we can access the allocated memory 

59
00:02:35.330 --> 00:02:37.430
Next we have some assignment statements 

60
00:02:37.430 --> 00:02:40.310
First *(ptr+0)= 10 

61
00:02:40.840 --> 00:02:43.970
So as we discussed in the previous tutorial 

62
00:02:43.970 --> 00:02:46.750
*(ptr+0) is the value at first integer slot 

63
00:02:46.750 --> 00:02:48.250
so 10 will be stored here 

64
00:02:48.620 --> 00:02:52.150
Next we have *(ptr+1)= 20 

65
00:02:52.160 --> 00:02:55.000
So at second slot 20 will be stored and similarly 

66
00:02:55.000 --> 00:02:57.649
30 40 and 50 also gets stored in here 

67
00:02:58.040 --> 00:03:01.240
Now let us consider a scenario where the heap is already 

68
00:03:01.240 --> 00:03:03.980
full and using malloc we're trying to allocate some 

69
00:03:03.980 --> 00:03:06.480
memory but heap is full already 

70
00:03:06.620 --> 00:03:09.940
So what happens is malloc returns NULL instead of 

71
00:03:09.940 --> 00:03:10.940
the base address 

72
00:03:11.160 --> 00:03:14.010
So whenever we use malloc we should first check

73
00:03:14.020 --> 00:03:16.480
whether memory was really allocated or not 

74
00:03:16.690 --> 00:03:19.079
So for that we can perform a NULL check like 

75
00:03:19.080 --> 00:03:19.420
this 

76
00:03:19.720 --> 00:03:23.340
That is if value returned by malloc is NULL, memory was 

77
00:03:23.340 --> 00:03:24.230
not allocated 

78
00:03:24.240 --> 00:03:25.900
otherwise it was successful. 

79
00:03:26.440 --> 00:03:28.730
So that's all and thank you for watching this video 

