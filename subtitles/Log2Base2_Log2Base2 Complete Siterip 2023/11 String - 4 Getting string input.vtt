WEBVTT

1
00:00:00.740 --> 00:00:01.400
Hi friends 

2
00:00:01.410 --> 00:00:03.390
In this video we are going to learn how to 

3
00:00:03.390 --> 00:00:05.250
get a string input from the user 

4
00:00:10.040 --> 00:00:14.750
So we can use the format specifier %s in scanf 

5
00:00:14.750 --> 00:00:17.400
 to get a string input from the user. for 

6
00:00:17.400 --> 00:00:18.060
an example 

7
00:00:18.060 --> 00:00:19.259
See this code here 

8
00:00:19.740 --> 00:00:23.720
Char name[20]; scanf( "%s" ,name); 

9
00:00:24.000 --> 00:00:26.790
But if you noted the scanf statement a little 

10
00:00:26.790 --> 00:00:29.430
more carefully you can see that the value is read 

11
00:00:29.440 --> 00:00:31.380
to name and not &name 

12
00:00:31.380 --> 00:00:35.070
and we have learned that whenever we use scanf 

13
00:00:35.070 --> 00:00:37.520
we have to write &variable_name 

14
00:00:37.700 --> 00:00:39.460
But it is not applied here 

15
00:00:39.500 --> 00:00:42.230
What do you think is the reason? It is because 

16
00:00:42.240 --> 00:00:45.090
string name itself is the base address of the string.

17
00:00:45.230 --> 00:00:48.370
For example we have char word[6] equal 

18
00:00:48.370 --> 00:00:52.550
to hello here For this string the base address is 1000 

19
00:00:52.670 --> 00:00:55.650
and string name Word will be holding this base address 

20
00:00:55.650 --> 00:00:59.820
1000 so we don't need to give  & operator 

21
00:00:59.820 --> 00:01:02.120
in scanf while getting the string input 

22
00:01:02.450 --> 00:01:05.740
Now let us see how to use %s format 

23
00:01:05.740 --> 00:01:08.710
Specifier in printf function to print a string

24
00:01:10.340 --> 00:01:13.060
So we have a string here And if we use 

25
00:01:13.060 --> 00:01:16.550
%s in printf to Print this string it will 

26
00:01:16.550 --> 00:01:19.830
print all the characters one by one until it encounters 

27
00:01:19.840 --> 00:01:20.780
and null character 

28
00:01:21.050 --> 00:01:24.670
So here it will print h e l l o and  

29
00:01:24.670 --> 00:01:27.140
stops since next character is a null character

30
00:01:27.740 --> 00:01:30.360
Now let us see a simple programme to understand the 

31
00:01:30.360 --> 00:01:31.150
working here 

32
00:01:31.440 --> 00:01:34.390
So we have the main function and a character array 

33
00:01:34.390 --> 00:01:37.050
declaration for name with 10 locations 

34
00:01:37.440 --> 00:01:40.350
Then we ask the user to enter the name 

35
00:01:40.360 --> 00:01:42.220
Supposed the user enters Alan 

36
00:01:43.140 --> 00:01:46.870
Then we read the input to name using %s and 

37
00:01:46.870 --> 00:01:49.720
remember not to put an & so it will 

38
00:01:49.730 --> 00:01:53.110
read and after n, null character will be stoned 

39
00:01:53.530 --> 00:01:57.670
Now we print a welcome note using %s format 

40
00:01:57.670 --> 00:02:01.530
Specifier so it will print the characters until a null

41
00:02:01.530 --> 00:02:03.010
character is encountered 

42
00:02:03.130 --> 00:02:04.399
So we get the output 

43
00:02:04.410 --> 00:02:07.080
Welcome Alan and return zero 

44
00:02:07.170 --> 00:02:08.890
So that was just one case 

45
00:02:08.970 --> 00:02:11.680
now let us see another case where the user enters the 

46
00:02:11.680 --> 00:02:13.110
name for loop

47
00:02:13.170 --> 00:02:15.160
So what you have to note here is that there 

48
00:02:15.160 --> 00:02:16.820
is a white space in the input 

49
00:02:17.020 --> 00:02:20.269
So when it is scanned what happens is that  

50
00:02:20.280 --> 00:02:23.200
for will be saved and in the next location null

51
00:02:23.200 --> 00:02:26.930
character will be saved that is %s will stop 

52
00:02:26.930 --> 00:02:29.350
getting input after the first space 

53
00:02:31.140 --> 00:02:34.780
So when the printf statement is executed it will print

54
00:02:34.780 --> 00:02:38.060
the characters until a null character is encountered and we 

55
00:02:38.060 --> 00:02:42.120
get for only now lets see another case Where 

56
00:02:42.120 --> 00:02:47.210
user enters apple mango banana So when scanf executes 

57
00:02:47.220 --> 00:02:51.310
there is insufficient space in the array. So the programme 

58
00:02:51.310 --> 00:02:55.620
execution will be aborted due to buffer overflow. So that's 

59
00:02:55.620 --> 00:02:57.440
all and thank you for watching this video 

