WEBVTT

1
00:00:01.340 --> 00:00:02.010
Hi friends 

2
00:00:02.020 --> 00:00:06.340
In this video we are going to discuss about pointer arithmetic. 

3
00:00:11.340 --> 00:00:13.520
Let us first learn increment operation on a 

4
00:00:13.520 --> 00:00:14.070
pointer

5
00:00:14.390 --> 00:00:16.689
So consider the C code here.  

6
00:00:16.690 --> 00:00:20.220
First we have an integer variable declaration for i and initialising 

7
00:00:20.230 --> 00:00:23.160
it to 10 and let the memory allocated for i 

8
00:00:23.170 --> 00:00:25.990
be from 1024 to 1027 

9
00:00:26.420 --> 00:00:29.500
Now we have an integer pointer declaration for ptr and 

10
00:00:29.500 --> 00:00:32.350
assigning the address of i which is 1024 

11
00:00:32.940 --> 00:00:35.420
Now we are printing the value of ptr which 

12
00:00:35.420 --> 00:00:38.650
will print the value stored in ptr which is 1024 

13
00:00:39.040 --> 00:00:40.710
Now we are incrementing ptr 

14
00:00:41.140 --> 00:00:44.380
Since ptr  is an integer pointer the increment operation 

15
00:00:44.380 --> 00:00:47.260
will move by four bytes as the size of int is 4

16
00:00:47.260 --> 00:00:52.440
 and will point to 1028. So now ptr will have 

17
00:00:52.440 --> 00:00:54.140
the value 1028 

18
00:00:54.320 --> 00:00:57.240
Now let us  print value of ptr again and it will 

19
00:00:57.240 --> 00:00:58.830
print 1028 

20
00:00:58.890 --> 00:01:01.310
So that is about Pointer Increment operation 

21
00:01:01.310 --> 00:01:03.830
So it completely depends on the data type of pointer 

22
00:01:03.830 --> 00:01:06.310
It will increment by the size of the datatype. 

23
00:01:06.310 --> 00:01:06.570


24
00:01:07.040 --> 00:01:10.119
Now let us see decrement operation. Take the same 

25
00:01:10.120 --> 00:01:10.700
scenario 

26
00:01:10.700 --> 00:01:15.149
Initially ptr holds the value 1024 and similar to increment 

27
00:01:15.150 --> 00:01:15.740
operation 

28
00:01:15.750 --> 00:01:18.009
if we decrement a pointer it will get  

29
00:01:18.010 --> 00:01:20.669
decremented by the size of the data type of pointer 

30
00:01:20.990 --> 00:01:23.350
And here it is integer, So it will get 

31
00:01:23.350 --> 00:01:26.250
decremented by the size of integer which is 4. 

32
00:01:26.840 --> 00:01:29.470
so after the decrement operation it will hold the value 

33
00:01:29.470 --> 00:01:34.470
1020. Now if we print ptr we will get 1020 printed.

34
00:01:34.470 --> 00:01:38.010
Now let us discuss about Pointer addition. 

35
00:01:38.210 --> 00:01:41.180
So consider the sample C program we are declaring  

36
00:01:41.180 --> 00:01:45.380
integer i and initialising to 100, declaring  a pointer ptr 

37
00:01:45.380 --> 00:01:48.340
pointing to i so it will store the address of 

38
00:01:48.350 --> 00:01:49.680
i which is 1024 

39
00:01:49.680 --> 00:01:53.039
now we are printing ptr which will print its 

40
00:01:53.040 --> 00:01:55.290
value which is 1024 and next 

41
00:01:55.290 --> 00:01:57.050
We print ptr+1

42
00:01:57.940 --> 00:02:01.740
So again as we discussed in increment and  decrement operation 

43
00:02:01.880 --> 00:02:05.300
adding 'n' to a pointer will add 'n' times the size 

44
00:02:05.300 --> 00:02:08.610
of data type of pointer so adding one will add 

45
00:02:08.610 --> 00:02:10.810
one time the size of datatype which is integer

46
00:02:10.810 --> 00:02:11.589
 here 

47
00:02:11.600 --> 00:02:13.960
So 1*4 equal to 4 bytes will be 

48
00:02:13.970 --> 00:02:16.750
added and will print 1028 

49
00:02:17.240 --> 00:02:20.730
Next we're printing ptr+3 which will add three times 

50
00:02:20.730 --> 00:02:24.210
the size of integer which is 4 to ptr that 

51
00:02:24.210 --> 00:02:28.770
is 3*4 equal to  12 + ptr equal to 1036

52
00:02:27.270 --> 00:02:28.750


53
00:02:29.140 --> 00:02:32.070
Simply saying we are not adding three bytes but three 

54
00:02:32.070 --> 00:02:32.750
blocks 

55
00:02:34.240 --> 00:02:36.739
So we get the output 1036 

56
00:02:36.750 --> 00:02:40.040
And now let us discuss about pointer subtraction. Again 

57
00:02:40.040 --> 00:02:42.990
The idea is same. Each time we subtract a number 

58
00:02:42.990 --> 00:02:46.210
we are actually subtracting that number of blocks and not 

59
00:02:46.210 --> 00:02:47.470
that number of bytes 

60
00:02:47.610 --> 00:02:50.420
So here we have ptr - 1 and 

61
00:02:50.420 --> 00:02:52.060
ptr equal to 1024 

62
00:02:52.540 --> 00:02:55.350
So subtract a block of four bytes and why 4  bytes?

63
00:02:55.350 --> 00:02:57.650
Because that is the size of the datatype 

64
00:02:57.650 --> 00:02:58.359
of pointer 

65
00:02:58.740 --> 00:03:03.299
So subtract 4 from 1024 and we get 1020 and that 

66
00:03:03.300 --> 00:03:04.190
will be printed 

67
00:03:04.840 --> 00:03:05.140
Next 

68
00:03:05.140 --> 00:03:07.520
We have ptr-2 which will subtract 

69
00:03:07.530 --> 00:03:10.910
2*4 equal to 8 bytes from 1024 and 

70
00:03:10.910 --> 00:03:12.840
we get 1016 printed

71
00:03:13.440 --> 00:03:16.600
So these are some basic arithemtic operations on pointers 

72
00:03:16.750 --> 00:03:19.579
Now all these cases we had an integer type 

73
00:03:20.040 --> 00:03:20.230


74
00:03:20.040 --> 00:03:22.810
Now what if it was of character type? since  size 

75
00:03:22.810 --> 00:03:25.580
of character is one byte, in increment operation 

76
00:03:25.590 --> 00:03:28.100
It will get incremented by one byte.  

77
00:03:28.100 --> 00:03:30.450
If it was float than it would get incremented by 

78
00:03:30.450 --> 00:03:31.230
four bytes 

79
00:03:31.240 --> 00:03:35.149
As 4 is the size of float and if it was double 

80
00:03:35.160 --> 00:03:37.950
it would get incremented by eight bytes since the 

81
00:03:37.950 --> 00:03:39.590
size of double is eight 

82
00:03:39.600 --> 00:03:43.910
And some limitations are, we cannot perform multiplication, division and 

83
00:03:43.910 --> 00:03:45.960
bitwise operations on pointers 

84
00:03:47.240 --> 00:03:49.530
So that's all and thank you for watching this video 

