WEBVTT

1
00:00:00.000 --> 00:00:04.100
So in the implementation, let us first define the size 

2
00:00:04.100 --> 00:00:06.560
of a size as six.

3
00:00:07.040 --> 00:00:12.170
Now create the array named as stack of size size which 

4
00:00:12.170 --> 00:00:14.450
is already defined as six.

5
00:00:14.940 --> 00:00:18.670
Now set top1 as -1 for the first stack 

6
00:00:18.670 --> 00:00:22.780
and set top2 as size for the second stack 

7
00:00:22.780 --> 00:00:23.150


8
00:00:23.840 --> 00:00:27.620
Now let us define push1 we have to pass 

9
00:00:27.620 --> 00:00:30.050
the value to be pushed into the function 

10
00:00:30.640 --> 00:00:33.950
First check if stack is full 

11
00:00:33.950 --> 00:00:38.150
check if top1 equal to top2-1 

12
00:00:38.640 --> 00:00:41.250
then just return 

13
00:00:41.410 --> 00:00:42.900
else increment top1 

14
00:00:43.020 --> 00:00:46.500
And then add the value at stack[top1]

15
00:00:46.840 --> 00:00:50.680
So write stack[++top1] equal to val

16
00:00:50.690 --> 00:00:51.150


17
00:00:51.740 --> 00:00:54.160
So push1 operation is completed 

18
00:00:54.320 --> 00:00:54.880
Now let's define

19
00:00:54.880 --> 00:00:58.670
pop for stack1. First check

20
00:00:58.680 --> 00:01:00.250
If stack is empty.

21
00:01:00.570 --> 00:01:04.890
So write if top1 equal to -1 then 

22
00:01:04.890 --> 00:01:10.370
return -1 as deletion is not possible 

23
00:01:10.370 --> 00:01:14.250
else return stack[top1] and then decrement top1.

24
00:01:14.740 --> 00:01:20.090
So write return stack[top1--] 

25
00:01:20.090 --> 00:01:22.290
stack1 operations are defined 

26
00:01:22.490 --> 00:01:25.950
Now let us define push and pop for stack2 

27
00:01:26.340 --> 00:01:27.440
So let us first define

28
00:01:27.440 --> 00:01:27.930
 

29
00:01:27.940 --> 00:01:30.250
push for stack2

30
00:01:30.250 --> 00:01:30.850
check 

31
00:01:30.870 --> 00:01:34.980
if top1 equal to top2-1 then 

32
00:01:35.050 --> 00:01:36.030
stack is full 

33
00:01:36.040 --> 00:01:38.740
So insertion is not possible 

34
00:01:38.740 --> 00:01:41.350
so just return from the function 

35
00:01:41.480 --> 00:01:45.010
else decrement top2 and then add the value at 

36
00:01:45.090 --> 00:01:46.760
stack[top2] 

37
00:01:46.820 --> 00:01:49.820
So write stack[--top2]

38
00:01:49.820 --> 00:01:51.550
equal to val

39
00:01:52.310 --> 00:01:53.520
Now define

40
00:01:53.530 --> 00:01:58.470
pop for stack2 first check if stack is empty 

41
00:01:58.660 --> 00:02:02.700
So write if top2 equal to size, then return -1

42
00:02:02.700 --> 00:02:06.700
else return element at top2 and then 

43
00:02:06.710 --> 00:02:11.520
increment top2. So write return stack[top2++]

44
00:02:11.530 --> 00:02:12.340


45
00:02:12.790 --> 00:02:15.020
So all the operations are now defined.

46
00:02:15.200 --> 00:02:19.720
We have implemented to stacks in a single array efficiently 

