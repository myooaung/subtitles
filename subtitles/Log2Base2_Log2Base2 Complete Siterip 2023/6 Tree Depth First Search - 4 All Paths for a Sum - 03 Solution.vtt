WEBVTT

1
00:00:00.040 --> 00:00:02.750
Let us take the previous code and modify it.

2
00:00:03.140 --> 00:00:05.960
So this is the code for printing all the paths

3
00:00:05.970 --> 00:00:07.550
in the given binary tree. 

4
00:00:07.940 --> 00:00:10.620
But for this problem we only need to print the 

5
00:00:10.620 --> 00:00:13.580
paths who sum value is equal to the given 

6
00:00:13.580 --> 00:00:14.350
sum value.

7
00:00:14.740 --> 00:00:18.560
So in the print paths function receive the sum argument 

8
00:00:18.570 --> 00:00:21.650
and pass it to the print paths recursive function 

9
00:00:22.240 --> 00:00:25.820
and in each iteration while adding the node into the array

10
00:00:25.820 --> 00:00:26.180


11
00:00:26.340 --> 00:00:29.280
We need to subtract the node value from the given sum value.

12
00:00:29.280 --> 00:00:34.120
 So write int new sum equal to 

13
00:00:34.120 --> 00:00:38.820
sum - root->data and then while checking the leaf node case

14
00:00:38.830 --> 00:00:42.190
we also need to check the new sum value 

15
00:00:42.200 --> 00:00:45.950
is zero. If we reach the leaf node with new 

16
00:00:45.950 --> 00:00:49.610
sum value as zero, we have found a path with 

17
00:00:49.610 --> 00:00:52.410
the given sum value so we can print it 

18
00:00:52.490 --> 00:00:54.050
Otherwise we can skip it.

19
00:00:54.540 --> 00:00:57.100
So we need to add the new sum value 

20
00:00:57.100 --> 00:01:01.100
check case in the if condition. So write new sum equal 

21
00:01:01.100 --> 00:01:04.550
to equal to zero expression before the leaf node checking 

22
00:01:04.550 --> 00:01:05.050
case 

23
00:01:05.540 --> 00:01:08.910
And finally in all the recursive calls, we need to 

24
00:01:08.910 --> 00:01:13.110
pass the new sum value as another argument so include it. And that's it.

