WEBVTT

1
00:00:00.240 --> 00:00:01.900
let us implement this function 

2
00:00:01.990 --> 00:00:05.390
Search sorted rotated array which will take a sort of 

3
00:00:05.400 --> 00:00:09.110
rotated array arr It's size and an integer and 

4
00:00:09.120 --> 00:00:12.870
its parameters and returns the array index If the element 

5
00:00:12.880 --> 00:00:15.840
n is found and minus one if it is not 

6
00:00:15.840 --> 00:00:19.490
found furthers let us re use the findPivot 

7
00:00:19.490 --> 00:00:21.950
function that we implemented in the last module 

8
00:00:22.490 --> 00:00:25.320
This function will return the index of pivot element 

9
00:00:25.320 --> 00:00:26.550
to the variable pivot 

10
00:00:27.040 --> 00:00:29.950
Next we have to check which of the two sub 

11
00:00:29.960 --> 00:00:33.760
arrays hold the pivot element first check Whether the

12
00:00:33.760 --> 00:00:36.530
pivot element is in the first sub array between array 

13
00:00:36.530 --> 00:00:39.770
of zero and array of pivot minus one for this 

14
00:00:39.800 --> 00:00:43.510
used this if conditions if n greater than or equal 

15
00:00:43.510 --> 00:00:46.960
to array of zero and n less than equal to array 

16
00:00:46.960 --> 00:00:48.150
of pivot minus one 

17
00:00:48.640 --> 00:00:51.640
If this condition returns true then we have to do 

18
00:00:51.640 --> 00:00:53.530
binary search in the first sub array

19
00:00:54.240 --> 00:00:56.960
So point start to the first index zero and 

20
00:00:56.970 --> 00:00:59.420
end to pivot minus one else 

21
00:00:59.430 --> 00:01:02.410
We have to search the second sub array so point 

22
00:01:02.410 --> 00:01:05.560
start to pivot and end took last index that 

23
00:01:05.560 --> 00:01:08.900
is size minus one at an additional condition at the 

24
00:01:08.900 --> 00:01:12.600
top checking whether the pivot is zero if it is the 

25
00:01:12.600 --> 00:01:15.160
entire array is sorted and not rotated 

26
00:01:15.270 --> 00:01:17.750
And hence we have to search the whole array 

27
00:01:18.100 --> 00:01:20.970
So point start to zero and end to size minus 

28
00:01:20.970 --> 00:01:21.300
one 

29
00:01:21.760 --> 00:01:26.340
Finally do a binary search passing the array start end 

30
00:01:26.350 --> 00:01:29.460
and the integer n it will return the array 

31
00:01:29.460 --> 00:01:32.450
index if n is present and minus one if it 

32
00:01:32.450 --> 00:01:33.650
is not present .

