WEBVTT

1
00:00:00.340 --> 00:00:03.760
let us take another recursive algorithm and find its 

2
00:00:03.760 --> 00:00:08.050
time complexity using recursion tree and back substitution method 

3
00:00:08.620 --> 00:00:12.050
Let us write the recurrence relation for this algorithm first.

4
00:00:12.740 --> 00:00:16.250
First assume this algorithm takes T(n) time 

5
00:00:17.140 --> 00:00:20.640
We having If condition, it will take one unit time 

6
00:00:20.940 --> 00:00:23.340
and then we have a for loop from i equal to 

7
00:00:23.340 --> 00:00:27.850
zero till n and each time i is multiplied by two 

8
00:00:28.440 --> 00:00:30.250
AS we have already discussed 

9
00:00:30.640 --> 00:00:33.830
If the iterating variable in the loop gets multiplied 

10
00:00:33.840 --> 00:00:37.740
by two or gets divided by two every time the 

11
00:00:37.740 --> 00:00:40.150
time complexity is logn

12
00:00:41.140 --> 00:00:44.340
So this for loop will take logn + 1

13
00:00:44.340 --> 00:00:48.540
time and the print statement inside will take 

14
00:00:48.540 --> 00:00:48.850
logn time 

15
00:00:49.840 --> 00:00:51.720
Then the algorithm is called recursively 

16
00:00:51.720 --> 00:00:53.450
 for n-1

17
00:00:53.940 --> 00:00:56.850
So it will take T(n-1) time 

18
00:00:57.340 --> 00:01:00.430
So the total time T(n) equal to 

19
00:01:00.430 --> 00:01:04.470
T(n-1) + logn + logn + 1

20
00:01:04.470 --> 00:01:08.670
 that is 

21
00:01:08.670 --> 00:01:13.430
T(n-1) + 2logn + 2 and we know 

22
00:01:13.440 --> 00:01:16.740
 2logn + 2 is asymptotically equal to 

23
00:01:16.740 --> 00:01:20.430
logn so we can write T(n) equal 

24
00:01:20.430 --> 00:01:24.570
to T(n-1) + logn so with 

25
00:01:24.580 --> 00:01:28.380
initial conditions we have T(n) equal to one 

26
00:01:28.550 --> 00:01:31.760
when n=0 and T(n) equal to  

27
00:01:31.760 --> 00:01:34.980
T(n-1) + logn  when n is 

28
00:01:34.980 --> 00:01:39.580
greater than zero. So let us solve this recurrence relation with  

29
00:01:39.580 --> 00:01:43.060
recursion tree method. First write T(n) 

30
00:01:43.840 --> 00:01:46.440
So what will T(n) do if  

31
00:01:46.440 --> 00:01:50.090
n>0 It will print logn times and 

32
00:01:50.090 --> 00:01:54.520
call itself with n-1 So write logn

33
00:01:54.530 --> 00:01:58.200
and  T(n-1) here again T(n-1)

34
00:01:58.200 --> 00:02:00.940
is a recursive call. So it will take  

35
00:02:00.950 --> 00:02:04.410
Log(n-1) unit of time and call itself with 

36
00:02:04.410 --> 00:02:08.080
n-1 So now the of n-2 is 

37
00:02:08.080 --> 00:02:09.010
a recursive call 

38
00:02:09.080 --> 00:02:12.170
So it will take log(n-2) time and 

39
00:02:12.170 --> 00:02:14.150
call itself with n-3 

40
00:02:14.740 --> 00:02:18.050
This recursive tree will grow similarly and reach  

41
00:02:18.050 --> 00:02:21.200
T(2) which takes log2 time and call T(1)

42
00:02:21.210 --> 00:02:24.550
T(1) will take log1 Time and 

43
00:02:24.550 --> 00:02:25.750
call of T(0)

44
00:02:26.140 --> 00:02:28.930
Now T(0) wont make any further recursive call 

45
00:02:28.940 --> 00:02:32.150
as n equal to 0 So this is the recursion 

46
00:02:32.150 --> 00:02:34.050
 tree for the given algorithm 

47
00:02:34.440 --> 00:02:37.440
Now let us mark the total time taken at each 

48
00:02:37.440 --> 00:02:38.750
level for this tree 

49
00:02:39.340 --> 00:02:42.850
At first level logn time will be taken  

50
00:02:42.850 --> 00:02:43.800
then in next level 

51
00:02:43.900 --> 00:02:45.160
log(n-1) 

52
00:02:45.160 --> 00:02:46.260
Time will be taken 

53
00:02:46.410 --> 00:02:48.290
Then log(n-2) then

54
00:02:48.290 --> 00:02:49.420
Log(n-3) 

55
00:02:49.430 --> 00:02:51.950
Up to log2, log1 and 0

56
00:02:52.640 --> 00:02:56.900
Now let us calculate the total time complexity T(n) equal to

57
00:02:56.900 --> 00:03:00.230
0 + log1 + log2 + etcetera

58
00:03:00.230 --> 00:03:03.180
+ log(n-3)

59
00:03:03.180 --> 00:03:04.600
+ log(n-2)

60
00:03:04.600 --> 00:03:07.150
+ log(n-1) + logn

61
00:03:07.840 --> 00:03:08.380
We know 

62
00:03:08.390 --> 00:03:11.230
Log(ab) equal to loga + logb

63
00:03:11.230 --> 00:03:14.190
So we can write T(n) equal to 

64
00:03:14.200 --> 00:03:17.650
log(1*2*3* upto n)

65
00:03:18.340 --> 00:03:20.700
And it is nothing but n!

66
00:03:20.940 --> 00:03:24.230
So we got T(n) equal to logn!

67
00:03:24.240 --> 00:03:28.390
here we got T(n) equal

68
00:03:28.390 --> 00:03:30.000
to logn! 

69
00:03:30.160 --> 00:03:32.500
But there is not time bound for logn!

70
00:03:32.510 --> 00:03:35.560
 So in this case we can write 

71
00:03:35.570 --> 00:03:37.060
the upper bound of logn!

72
00:03:37.070 --> 00:03:40.500
 for n! the upper bound 

73
00:03:40.500 --> 00:03:44.110
is n^n hence the upper band of logn! 

74
00:03:44.120 --> 00:03:49.400
is logn^n so logn!

75
00:03:49.410 --> 00:03:52.700
 becomes logn^n which is 

76
00:03:52.700 --> 00:03:56.070
big Oh of nlogn. Thats it. time 

77
00:03:56.080 --> 00:04:00.500
taken by this algorithm is O(nlogn).

78
00:04:00.500 --> 00:04:04.240
Now, let us solve it using the back substitution method here the 

79
00:04:04.240 --> 00:04:07.280
recurrence relation is T(n) equal to 

80
00:04:07.290 --> 00:04:08.640
T(n-1) + logn

81
00:04:08.640 --> 00:04:09.450


82
00:04:09.840 --> 00:04:12.610
So what will be T(n-1). It will 

83
00:04:12.610 --> 00:04:14.010
be T(n-2) + log(n-1)

84
00:04:14.010 --> 00:04:15.800


85
00:04:16.040 --> 00:04:19.190
So in this equation instead of T(n-1)

86
00:04:19.190 --> 00:04:22.230
write T(n-2) + log(n-1)

87
00:04:22.230 --> 00:04:23.110


88
00:04:23.340 --> 00:04:26.270
So we will get  

89
00:04:26.270 --> 00:04:28.060
T(n-2) + log(n-1) + logn

90
00:04:28.060 --> 00:04:28.950


91
00:04:29.340 --> 00:04:31.850
And now what will be T(n-2) 

92
00:04:32.240 --> 00:04:33.990
It will be T(n-3) 

93
00:04:33.990 --> 00:04:35.750
+ log(n-2)

94
00:04:35.870 --> 00:04:38.870
So we will get T(n) equal to 

95
00:04:38.870 --> 00:04:40.020
T(n-3) + log(n-2) 

96
00:04:40.020 --> 00:04:41.540
+ log(n-1)

97
00:04:41.540 --> 00:04:43.850
+ logn

98
00:04:43.850 --> 00:04:44.650


99
00:04:45.240 --> 00:04:48.910
Similarly if we back substitute for K times we will 

100
00:04:48.910 --> 00:04:51.790
get T(n) equal to T(n-k)

101
00:04:51.790 --> 00:04:56.160
+ log(n-(k-1)) + log(n-(k-2))

102
00:04:56.170 --> 00:04:57.760
+ etcetera

103
00:04:57.760 --> 00:04:59.130
+ log(n-2) 

104
00:04:59.130 --> 00:05:02.370
+ log(n-1) +logn

105
00:05:02.370 --> 00:05:06.160
As we discussed previously 

106
00:05:06.170 --> 00:05:09.670
At some point n-k will become 0 which 

107
00:05:09.670 --> 00:05:13.050
means K = n so we can substitute n

108
00:05:13.060 --> 00:05:16.940
for k and we will get T(n-n) +

109
00:05:16.950 --> 00:05:20.190
log(n-n+1) + log(n-n+2) + 

110
00:05:20.190 --> 00:05:21.470
etcetera

111
00:05:21.480 --> 00:05:24.020
+ log(n-2)

112
00:05:24.250 --> 00:05:27.250
+ log(n-1) + logn 

113
00:05:27.640 --> 00:05:30.600
That is T(0) + log1 + log2 

114
00:05:30.600 --> 00:05:33.740
+ etc + log(n-1) 

115
00:05:33.740 --> 00:05:34.550
+ logn 

116
00:05:35.140 --> 00:05:37.270
That is 1 + 

117
00:05:37.280 --> 00:05:38.730
log(1*2*3* upto n)

118
00:05:38.740 --> 00:05:42.800
 that is 1 + logn!

119
00:05:43.070 --> 00:05:45.630
So what will be the time taken here as we 

120
00:05:45.630 --> 00:05:49.020
have already discussed it will be O(nlogn) time. 

