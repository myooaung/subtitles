WEBVTT

1
00:00:00.440 --> 00:00:03.460
In this video we will discuss how to search for 

2
00:00:03.460 --> 00:00:05.450
a node in a doubly linked list 

3
00:00:06.240 --> 00:00:09.520
So to search an ordinary doubly linked list we have 

4
00:00:09.520 --> 00:00:10.860
to traverse the list 

5
00:00:11.030 --> 00:00:13.870
Compare the key with each nodes data 

6
00:00:14.160 --> 00:00:17.210
And if any node matches with the key then the 

7
00:00:17.210 --> 00:00:19.290
search key is present in the list 

8
00:00:19.590 --> 00:00:22.260
And if we reach the end of the list and 

9
00:00:22.260 --> 00:00:25.360
we did not find a match then the search key is 

10
00:00:25.370 --> 00:00:27.150
not present in this list 

11
00:00:27.840 --> 00:00:31.270
For example we have this doubly linked list here with 

12
00:00:31.280 --> 00:00:33.870
elements 10 20 and 30 

13
00:00:34.120 --> 00:00:36.250
Let a search for key 30 here 

14
00:00:36.740 --> 00:00:39.750
So iterate the list starting from the head node 

15
00:00:39.930 --> 00:00:42.860
and compare the data part of each node with the 

16
00:00:42.860 --> 00:00:43.250
key 

17
00:00:43.840 --> 00:00:47.410
So first compare 30 with head and they are not 

18
00:00:47.410 --> 00:00:48.050
the same 

19
00:00:48.190 --> 00:00:52.120
So move to next node and compare 30 with 20 

20
00:00:52.130 --> 00:00:52.460
again 

21
00:00:52.470 --> 00:00:53.550
It is not the same 

22
00:00:53.690 --> 00:00:54.780
So move to the next 

23
00:00:54.780 --> 00:00:59.140
node compare 30 with this nodes data and now they 

24
00:00:59.140 --> 00:01:00.040
are the same 

25
00:01:00.310 --> 00:01:02.250
So the search is successful 

26
00:01:02.640 --> 00:01:02.950
Now 

27
00:01:02.950 --> 00:01:04.840
Let a search for the key 100 

28
00:01:05.120 --> 00:01:08.270
So Travers the doubly linked list compare the key with 

29
00:01:08.280 --> 00:01:09.850
data part of each node 

30
00:01:09.940 --> 00:01:13.810
First compare 100 with the head nodes data and they 

31
00:01:13.810 --> 00:01:14.920
are not the same 

32
00:01:15.040 --> 00:01:18.060
So move to the next node and compare 100 with 

33
00:01:18.070 --> 00:01:19.300
20 again 

34
00:01:19.300 --> 00:01:20.450
They are not the same 

35
00:01:20.940 --> 00:01:21.960
So move to next 

36
00:01:21.960 --> 00:01:22.390
node 

37
00:01:22.500 --> 00:01:26.380
Compare 100 with this nodes data and against it's not 

38
00:01:26.380 --> 00:01:27.030
the same 

39
00:01:27.240 --> 00:01:31.530
And since we have traversed the complete list and reached 

40
00:01:31.530 --> 00:01:35.170
the end we can say the key 100 is not 

41
00:01:35.170 --> 00:01:36.550
present in this list 

42
00:01:36.940 --> 00:01:40.460
So the search is unsuccessful and this is the code 

43
00:01:40.460 --> 00:01:43.810
to implement the programme and the function search will be 

44
00:01:43.810 --> 00:01:47.750
doing the search operation and returns the result of search 

45
00:01:48.140 --> 00:01:51.080
we are passing the head of the linked list and key 

46
00:01:51.080 --> 00:01:53.250
to be searched into this function 

47
00:01:53.640 --> 00:01:58.010
So we have public boolean search of int key so as 

48
00:01:58.010 --> 00:02:00.950
we discussed we have to iterate over the linked 

49
00:02:00.950 --> 00:02:01.410
list 

50
00:02:01.710 --> 00:02:05.530
so let us create temp pointing to head so that we can 

51
00:02:05.530 --> 00:02:10.220
start iterating from the beginning So write node temp equal 

52
00:02:10.220 --> 00:02:10.850
to head 

53
00:02:11.440 --> 00:02:15.050
Now this while loop is used to Travers and check 

54
00:02:15.060 --> 00:02:17.610
If the node is the key if the key is 

55
00:02:17.610 --> 00:02:20.780
found then the function will return true And if the 

56
00:02:20.780 --> 00:02:23.880
Key is not found then it will return False 

57
00:02:24.540 --> 00:02:27.150
Here Let a search for Element 30 

58
00:02:27.640 --> 00:02:31.270
So we will call the function search with key 30 

59
00:02:31.410 --> 00:02:35.000
so in the function temp is created and initialised to 

60
00:02:35.000 --> 00:02:35.380
head 

61
00:02:35.470 --> 00:02:38.440
So first we will check if temp which is pointing 

62
00:02:38.440 --> 00:02:41.610
to head now is null If it is null it 

63
00:02:41.610 --> 00:02:44.400
means we have reached the end of the linked list 

64
00:02:44.410 --> 00:02:47.330
and it will not end other while loop so write 

65
00:02:47.340 --> 00:02:51.520
while temp not equal to null here temp equal to 1000 

66
00:02:51.530 --> 00:02:52.800
which is not equal to null 

67
00:02:53.090 --> 00:02:55.250
So and other loop now check 

68
00:02:55.260 --> 00:02:57.970
If the data at this node is the key so 

69
00:02:57.970 --> 00:03:01.060
write temp dot data equal to key 

70
00:03:01.130 --> 00:03:05.190
If so key is found so returned true else Just 

71
00:03:05.190 --> 00:03:08.230
keep on searching the next nodes so move temp to 

72
00:03:08.230 --> 00:03:12.380
next node so write temp equal to temp dot Next 

73
00:03:12.480 --> 00:03:16.940
So here compare temp data ten with key 30 But 

74
00:03:16.950 --> 00:03:18.160
it is not the same 

75
00:03:18.290 --> 00:03:21.600
So if will fail so jump to the next statement 

76
00:03:21.700 --> 00:03:23.550
Move temp to next node 

77
00:03:24.140 --> 00:03:27.360
Now temp will point the next node which is at 

78
00:03:27.370 --> 00:03:29.680
address 2000 again 

79
00:03:29.690 --> 00:03:32.700
The while condition is checked and we have temp equal 

80
00:03:32.700 --> 00:03:35.950
to 2000 which is not equal to null so entered 

81
00:03:35.950 --> 00:03:38.880
the loop and now compare 20 with 30 

82
00:03:38.990 --> 00:03:40.460
But it's not the same 

83
00:03:40.470 --> 00:03:43.550
So if fails again and temp will be moved to 

84
00:03:43.550 --> 00:03:46.520
the next node so temp will now point to the 

85
00:03:46.520 --> 00:03:50.080
next node at Address 3000 Now again check 

86
00:03:50.090 --> 00:03:53.270
If temp has become null and it has not so 

87
00:03:53.270 --> 00:03:54.960
enter the while loop and check 

88
00:03:54.970 --> 00:03:58.300
If data at 3000 is equal to the key and 

89
00:03:58.300 --> 00:04:01.380
when we compare the data 30 and the key 30 

90
00:04:01.390 --> 00:04:02.650
both are the same 

91
00:04:02.940 --> 00:04:06.010
So if will become true and it will return true 

92
00:04:06.020 --> 00:04:07.510
as the key is found 

93
00:04:07.520 --> 00:04:09.070
So this is how it works 

94
00:04:09.540 --> 00:04:12.080
Now let us see another case where the search key 

95
00:04:12.080 --> 00:04:15.310
is not found so that the key to be searched 

96
00:04:15.320 --> 00:04:19.780
be 100 first temp is initialised to head and we have the 

97
00:04:19.780 --> 00:04:24.110
while condition temp not equal null and temp equal to 1000 

98
00:04:24.110 --> 00:04:26.020
here which is not equal to null 

99
00:04:26.170 --> 00:04:29.290
So ender the loop and check if the data at 

100
00:04:29.300 --> 00:04:33.000
address 1000 is the key so compare 10 with 100 

101
00:04:33.010 --> 00:04:34.850
But the comparison returns false 

102
00:04:35.040 --> 00:04:38.590
So if condition fails and temp is moved to the 

103
00:04:38.590 --> 00:04:41.950
next node so now 10 points to the second node 

104
00:04:42.640 --> 00:04:45.570
again checked the while condition we have temp equal to 

105
00:04:45.570 --> 00:04:47.360
2000 not equal to null 

106
00:04:47.370 --> 00:04:48.590
So condition is true 

107
00:04:48.590 --> 00:04:50.320
So entered a loop and check 

108
00:04:50.330 --> 00:04:53.320
If this node is holding the Key 100 but the 

109
00:04:53.320 --> 00:04:57.780
comparison returns false and if condition fails so temp will 

110
00:04:57.780 --> 00:05:01.150
now point to the next node at address 3000 

111
00:05:01.240 --> 00:05:03.580
So again in the next iteration When we checked the 

112
00:05:03.580 --> 00:05:07.410
while condition we have temp equal to 3000 not equal to null 

113
00:05:07.410 --> 00:05:09.170
in all so condition is true 

114
00:05:09.170 --> 00:05:12.220
So enter the loop and compare it data at this 

115
00:05:12.220 --> 00:05:15.750
node with the key but we have 30 and 100 

116
00:05:15.750 --> 00:05:17.520
so the comparison will fail 

117
00:05:17.530 --> 00:05:20.930
And if will fail jump to next statement which is 

118
00:05:20.930 --> 00:05:24.460
temp equal to temp next and temp next is equal 

119
00:05:24.460 --> 00:05:27.010
to null here which will be stored in 10 

120
00:05:27.290 --> 00:05:30.280
So so in the next iteration when we checked the 

121
00:05:30.280 --> 00:05:32.900
while condition we have temp equal to null 

122
00:05:33.090 --> 00:05:36.100
So the condition is failed and control will come out 

123
00:05:36.100 --> 00:05:39.150
of the while loop and return false as the key 

124
00:05:39.160 --> 00:05:40.250
is not found 

125
00:05:40.840 --> 00:05:43.190
So that said this is how we can search an 

126
00:05:43.190 --> 00:05:44.760
Ordinary doubly linked list 

127
00:05:44.820 --> 00:05:48.210
Now let us talk about the time complexity the best 

128
00:05:48.220 --> 00:05:51.260
cases when the search key is present in the first 

129
00:05:51.260 --> 00:05:52.200
node itself 

130
00:05:52.210 --> 00:05:55.400
So while Loop need to execute only ones so the 

131
00:05:55.400 --> 00:05:59.330
best case time complexity will be order of one and 

132
00:05:59.330 --> 00:06:02.420
the worst cases when the search key is present in 

133
00:06:02.420 --> 00:06:03.350
the last node 

134
00:06:04.340 --> 00:06:07.490
So if you have n nodes the while loop will have 

135
00:06:07.500 --> 00:06:08.720
n iterations worst case time complexity is order of n

