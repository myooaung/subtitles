WEBVTT

1
00:00:00.940 --> 00:00:02.760
hi friends in this video 

2
00:00:02.870 --> 00:00:04.850
Let us learn the file basics 

3
00:00:11.140 --> 00:00:13.750
First let us discuss about file pointer

4
00:00:14.140 --> 00:00:16.990
So files are stored in the ROM of the read only 

5
00:00:16.990 --> 00:00:17.560
memory 

6
00:00:17.740 --> 00:00:21.120
So how can we access these files? We can efficiently 

7
00:00:21.120 --> 00:00:25.390
access the files using file pointers. The syntax to create 

8
00:00:25.390 --> 00:00:28.790
a file pointer is File * pointer_name 

9
00:00:28.800 --> 00:00:29.540
Semi Colon 

10
00:00:30.040 --> 00:00:31.850
Now how to open a file? 

11
00:00:32.440 --> 00:00:34.560
So to open a file. we need to use the 

12
00:00:34.570 --> 00:00:37.530
fopen function so that we can read or write 

13
00:00:37.530 --> 00:00:40.440
data. In the fopen function 

14
00:00:40.450 --> 00:00:41.730
We have two arguments 

15
00:00:41.740 --> 00:00:44.640
Both arguments should be placed within double quotes

16
00:00:45.640 --> 00:00:49.510
The first argument is the file name with extension. For 

17
00:00:49.510 --> 00:00:51.390
example file.txt

18
00:00:52.140 --> 00:00:55.070
But if we give the file name like this, it 

19
00:00:55.070 --> 00:00:58.020
will only check in the current folder where the programme 

20
00:00:58.020 --> 00:00:58.550
is stored 

21
00:00:58.560 --> 00:01:01.030
Or we can also give the absolute path of the 

22
00:01:01.030 --> 00:01:04.710
file like the driver name folder name file name with 

23
00:01:04.710 --> 00:01:05.479
extension 

24
00:01:05.750 --> 00:01:09.259
So it is important to add the file extension also like 

25
00:01:09.260 --> 00:01:11.350
.txt .c etc 

26
00:01:13.040 --> 00:01:15.669
The next argument is the file opening mode 

27
00:01:15.710 --> 00:01:18.520
We can open a file for reading or writing or 

28
00:01:18.520 --> 00:01:18.940
both 

29
00:01:18.940 --> 00:01:20.140
read and write etc 

30
00:01:20.610 --> 00:01:22.450
To open a file in reading mode 

31
00:01:22.560 --> 00:01:26.670
Specify r in double codes and w for writing mode 

32
00:01:26.680 --> 00:01:28.009
a for append mode 

33
00:01:28.120 --> 00:01:31.590
Other opening modes are r+ w+ a+

34
00:01:31.600 --> 00:01:32.070
etcetera 

35
00:01:32.840 --> 00:01:34.480
Now see an example programme 

36
00:01:35.140 --> 00:01:38.250
Here we are opening a file named file.txt 

37
00:01:38.250 --> 00:01:40.310
 from the current directory 

38
00:01:40.310 --> 00:01:43.660
To read the data, let us create a file pointer 

39
00:01:43.670 --> 00:01:47.290
fp and call fopen function by giving name of 

40
00:01:47.290 --> 00:01:48.850
file and the opening mode 

41
00:01:49.740 --> 00:01:52.610
So it is important to note that the fopen 

42
00:01:52.610 --> 00:01:56.860
function will not directly point the file's address. Because to 

43
00:01:56.860 --> 00:02:00.240
read or write data directly to the secondary memory takes 

44
00:02:00.240 --> 00:02:01.949
a lot of resources and time 

45
00:02:01.960 --> 00:02:04.920
For example if you want to read a single character 

46
00:02:04.920 --> 00:02:07.420
from file.txt it will go through 

47
00:02:07.420 --> 00:02:11.820
C library and then it will call the operating system 

48
00:02:12.040 --> 00:02:15.070
And then the operating system will initiate the driver to 

49
00:02:15.070 --> 00:02:15.899
read the data 

50
00:02:16.130 --> 00:02:19.000
So to read a single character it takes a lot 

51
00:02:19.000 --> 00:02:20.239
of resources and time 

52
00:02:20.940 --> 00:02:24.580
Similarly if you want to read another character it follows 

53
00:02:24.580 --> 00:02:27.410
the same way which is not an efficient method to 

54
00:02:27.410 --> 00:02:31.370
access the file. So when we open a file using 

55
00:02:31.380 --> 00:02:34.609
fopen function attach a buffer to the file and 

56
00:02:34.610 --> 00:02:38.220
it will load the whole file contents into the buffer 

57
00:02:38.540 --> 00:02:42.040
The buffer will reside in the random access memory and 

58
00:02:42.040 --> 00:02:44.709
gather all the information on file structure 

59
00:02:44.720 --> 00:02:49.260
This file structure contains information on buffer size, buffer pointer 

60
00:02:49.350 --> 00:02:52.989
and current buffer position etcetera and it returns the file 

61
00:02:52.990 --> 00:02:54.989
structure pointer to file pointer 

62
00:02:54.990 --> 00:02:59.720
Here Buffer address 1024 is placed in buffer 

63
00:02:59.720 --> 00:03:04.470
pointer and the file structure Address 5024 is assigned to 

64
00:03:04.470 --> 00:03:05.380
file Pointer fp.

65
00:03:06.340 --> 00:03:09.880
So instead of reading it from disc the file pointer 

66
00:03:09.880 --> 00:03:11.429
loads the content of the file 

67
00:03:11.440 --> 00:03:14.890
Only once in the buffer and further read or write 

68
00:03:14.890 --> 00:03:16.350
will happen in the buffer

69
00:03:16.940 --> 00:03:19.769
Now we try to open a file file.txt

70
00:03:19.770 --> 00:03:22.680
but we can see that File1.txt

71
00:03:22.680 --> 00:03:26.670
is Present file2.txt is also present in ROM

72
00:03:26.730 --> 00:03:28.220
but our required file 

73
00:03:28.230 --> 00:03:31.790
is not present. So fopen is unable to find 

74
00:03:31.790 --> 00:03:34.450
the file so it will return the NULL pointer 

75
00:03:34.740 --> 00:03:38.740
So if file pointer fp is not equal to NULL 

76
00:03:38.740 --> 00:03:40.660
it means the opening was successful 

77
00:03:40.660 --> 00:03:44.040
Then we can access the file. Now let's read a 

78
00:03:44.040 --> 00:03:46.070
file character by character 

79
00:03:46.260 --> 00:03:49.780
For that we have the function fgetc using 

80
00:03:49.780 --> 00:03:51.190
fgetc function 

81
00:03:51.200 --> 00:03:54.040
We can read a character from the file. This is 

82
00:03:54.040 --> 00:03:57.840
syntax fgetc(file_pointer ) it will return 

83
00:03:57.850 --> 00:04:01.359
a single character from the buffer and automatically moves the 

84
00:04:01.360 --> 00:04:04.280
position of pointer to the next character 

85
00:04:04.840 --> 00:04:08.270
See an example we have the content log2 

86
00:04:08.270 --> 00:04:11.440
EOF or End of file represents the end of the file 

87
00:04:11.720 --> 00:04:14.740
so fgetc will read l and moves the 

88
00:04:14.740 --> 00:04:16.820
current position of pointer to o.

89
00:04:17.340 --> 00:04:19.470
Now this function call will read o

90
00:04:19.480 --> 00:04:22.550
and moves a pointer to g and this will 

91
00:04:22.550 --> 00:04:23.820
continue. Now 

92
00:04:23.830 --> 00:04:26.010
if it reaches the end of the file it will 

93
00:04:26.010 --> 00:04:29.960
return EOF. Now let us see an example. Here we 

94
00:04:29.960 --> 00:04:33.820
created the file pointer fp and we call the 

95
00:04:33.820 --> 00:04:36.930
function fopen to open file.txt

96
00:04:37.940 --> 00:04:41.750
Now we call fgetc to get a character 

97
00:04:41.760 --> 00:04:43.549
to the character variable letter 

98
00:04:44.040 --> 00:04:48.200
So first character w is returned to letter. Now in 

99
00:04:48.200 --> 00:04:51.240
a while loop, we print the letters scanned and again 

100
00:04:51.240 --> 00:04:54.450
read the character using fgetc. So w is 

101
00:04:54.450 --> 00:04:56.530
printed and is read to letter 

102
00:04:56.790 --> 00:04:59.350
This is continued until we reach the end of the 

103
00:04:59.350 --> 00:04:59.830
file 

104
00:05:00.070 --> 00:05:01.550
So we get the output 

105
00:05:01.540 --> 00:05:04.840
Welcome to log2base2 visual computer science

106
00:05:04.840 --> 00:05:05.520
tutorials 

107
00:05:05.840 --> 00:05:09.350
So we opened the file. We read the content and 

108
00:05:09.350 --> 00:05:10.630
we printed it also 

109
00:05:10.850 --> 00:05:13.310
Now we need to close the file because we're done 

110
00:05:13.310 --> 00:05:17.040
with it. So we can use the function fclose 

111
00:05:17.050 --> 00:05:20.750
So we are closing the file pointer. The syntax for

112
00:05:20.750 --> 00:05:24.000
that is fclose (file pointer)  semi colon 

113
00:05:24.010 --> 00:05:28.080
Here we can write fclose(fp). If we 

114
00:05:28.080 --> 00:05:29.020
close the file 

115
00:05:29.180 --> 00:05:32.109
The buffer associated with the file is removed from the 

116
00:05:32.110 --> 00:05:32.650
memory 

117
00:05:32.860 --> 00:05:35.370
So we must close the file when it is no 

118
00:05:35.370 --> 00:05:36.180
longer needed 

119
00:05:36.940 --> 00:05:39.340
Now let us see how to read a string from 

120
00:05:39.340 --> 00:05:39.920
a file 

121
00:05:40.150 --> 00:05:42.530
For that we have the fgets function 

122
00:05:43.040 --> 00:05:46.680
We have three arguments to this function. The string address 

123
00:05:46.810 --> 00:05:49.070
the size of the string and the file pointer. 

124
00:05:49.070 --> 00:05:53.090
See an example programme. Here we set size equal to 10

125
00:05:53.090 --> 00:05:53.550
 

126
00:05:54.140 --> 00:05:57.299
Now we have to understand fgets will read 

127
00:05:57.300 --> 00:06:01.040
characters up to size and it is important that size 

128
00:06:01.050 --> 00:06:05.590
include NULL character also. So here it will read nine 

129
00:06:05.590 --> 00:06:07.590
characters and one NULL character 

130
00:06:08.240 --> 00:06:11.620
So here we create the file pointer and call the 

131
00:06:11.630 --> 00:06:12.910
fopen function 

132
00:06:12.920 --> 00:06:15.690
To open the file file.txt and 

133
00:06:15.690 --> 00:06:19.120
we create a string str with size 10 to read 

134
00:06:19.120 --> 00:06:22.690
the string. fp is not equal to NULL. 

135
00:06:22.690 --> 00:06:24.580
SO file open was success 

136
00:06:24.770 --> 00:06:27.700
So in a while we read and print strings of 

137
00:06:27.700 --> 00:06:29.260
size 10 till we reach NULL

138
00:06:29.260 --> 00:06:31.670
That is if it reaches the end of 

139
00:06:31.670 --> 00:06:34.469
the file, the fgets function will be returning 

140
00:06:34.470 --> 00:06:34.650
NULL

141
00:06:35.240 --> 00:06:38.220
So we read and print string until we reach the 

142
00:06:38.230 --> 00:06:39.250
end of the file 

143
00:06:39.740 --> 00:06:44.510
So first string of size 10 "welcome t" will 

144
00:06:44.510 --> 00:06:46.190
be read and "welcome t" 

145
00:06:46.190 --> 00:06:50.530
will be printed. In the next iteration next string 

146
00:06:50.530 --> 00:06:53.780
of size 10 "o log2bas" will 

147
00:06:53.780 --> 00:06:57.460
be read and printed. In the next iteration "e2."

148
00:06:57.460 --> 00:06:59.340
will be read and printed 

149
00:06:59.590 --> 00:07:01.400
Now we can close the file 

150
00:07:01.670 --> 00:07:04.350
So these were some basic file operations 

151
00:07:04.540 --> 00:07:06.580
We learned how to open a file 

152
00:07:06.640 --> 00:07:08.849
We can use fopen function for that 

153
00:07:09.040 --> 00:07:12.410
Then we can read character by character using fgetc 

154
00:07:12.410 --> 00:07:14.300
and to read a string 

155
00:07:14.310 --> 00:07:17.080
We have fgets and finally to close a 

156
00:07:17.080 --> 00:07:17.479
file 

157
00:07:17.490 --> 00:07:20.840
We have function fclose. In the coming videos 

158
00:07:20.840 --> 00:07:23.440
We will be discussing how to write data to

159
00:07:23.440 --> 00:07:24.020
a file 

160
00:07:24.030 --> 00:07:24.980
How to copy

161
00:07:24.980 --> 00:07:26.190
a file etcetera 

162
00:07:27.240 --> 00:07:29.530
So that's all and thank you for watching this video 

