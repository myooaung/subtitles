WEBVTT

1
00:00:00.040 --> 00:00:03.720
In the previous chapter, we have solved problems using

2
00:00:03.730 --> 00:00:05.050
 breadth first search technique

3
00:00:05.440 --> 00:00:09.020
Now we are going to solve problems using  

4
00:00:09.020 --> 00:00:10.050
Depth first search technique 

5
00:00:10.540 --> 00:00:13.920
But before that, let us understand the difference between BFS and DFS

6
00:00:13.920 --> 00:00:16.690
In BFS,

7
00:00:16.850 --> 00:00:20.070
We traversed the tree level by level from the root

8
00:00:20.340 --> 00:00:23.400
But in the DFS, the search starts from the root 

9
00:00:23.400 --> 00:00:27.280
node and continues to explore the same branch as far 

10
00:00:27.280 --> 00:00:28.050
as possible 

11
00:00:28.540 --> 00:00:31.490
Once it reaches null, it will come back to the 

12
00:00:31.500 --> 00:00:35.030
previous level and explore the next branch as far as 

13
00:00:35.030 --> 00:00:35.770
possible.

14
00:00:36.040 --> 00:00:36.440


15
00:00:36.440 --> 00:00:38.850
In BFS, we used the queue data structure to 

16
00:00:38.860 --> 00:00:43.850
track nodes level by level. In DFS, we use a stack 

17
00:00:43.850 --> 00:00:46.530
data structure or recursion to track all the nodes.

18
00:00:46.530 --> 00:00:50.490
because here once the branches over we need to 

19
00:00:50.490 --> 00:00:53.400
come back to the last stage and continue the same 

20
00:00:53.400 --> 00:00:54.080
process. 

21
00:00:54.400 --> 00:00:57.320
So recursion or stack will be the best option 

22
00:00:57.320 --> 00:00:58.330
for this scenario

23
00:00:58.600 --> 00:01:01.650
as both Stack and recursion works in last in 

24
00:01:01.650 --> 00:01:05.180
first out principle. Using DFS technique we can 

25
00:01:05.180 --> 00:01:08.930
solve problems like printing paths of a binary tree printing 

26
00:01:08.940 --> 00:01:12.380
tree paths with the given sum, etcetera. From the next 

27
00:01:12.380 --> 00:01:14.850
videos let us solve problems using DFS to understand it better.

