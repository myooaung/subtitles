WEBVTT

1
00:00:00.040 --> 00:00:00.850
Hello friends 

2
00:00:00.910 --> 00:00:04.290
In this video we're going to discuss about the importance 

3
00:00:04.290 --> 00:00:06.289
bit wise operators 

4
00:00:11.440 --> 00:00:15.010
So so far we have performed operations on byte level 

5
00:00:15.020 --> 00:00:18.230
For example a character takes one byte 

6
00:00:18.240 --> 00:00:21.660
We can store and access one byte of data using 

7
00:00:21.660 --> 00:00:25.300
the char data type. The integer and float 

8
00:00:25.350 --> 00:00:27.419
datatypes take four bytes 

9
00:00:27.800 --> 00:00:31.300
And using this we can store and access 4 bytes 

10
00:00:31.300 --> 00:00:32.010
of data. 

11
00:00:32.640 --> 00:00:37.589
Similarly double takes eight bytes and using this we can 

12
00:00:37.590 --> 00:00:40.150
store and access eight bytes of data 

13
00:00:40.160 --> 00:00:41.000
Now let's go 

14
00:00:41.000 --> 00:00:45.540
One step further. The char data type takes one 

15
00:00:45.540 --> 00:00:47.910
byte of data which is 8 bits 

16
00:00:47.920 --> 00:00:51.420
The ASCII value of 'a' is 97 

17
00:00:51.430 --> 00:01:00.730
So 97's 8 bit binary value 01100001 will be 

18
00:01:00.730 --> 00:01:05.210
stored in it. Now how can access each and every 

19
00:01:05.210 --> 00:01:08.540
bit of this char value? Is it possible? The answer 

20
00:01:08.540 --> 00:01:09.420
is yes 

21
00:01:09.660 --> 00:01:13.240
We can access each and every bit of memory using 

22
00:01:13.240 --> 00:01:16.929
bit wise operators. The bit wise operators do not see 

23
00:01:16.930 --> 00:01:19.060
the integer 97 here.

24
00:01:19.300 --> 00:01:22.240
Instead it sees the binary bits 

25
00:01:22.330 --> 00:01:27.550
That is 01100001 here.

26
00:01:27.560 --> 00:01:30.429
So for an example if we want to set the 

27
00:01:30.430 --> 00:01:32.429
last bit 1 to 0 

28
00:01:32.750 --> 00:01:36.800
We can do it using bitwise AND operator simply put 

29
00:01:36.800 --> 00:01:39.390
0 in the position where we want to set the 

30
00:01:39.390 --> 00:01:41.840
bit to 0 and set other bits 

31
00:01:41.840 --> 00:01:46.190
to 1. that is in bit wise AND operation 

32
00:01:46.390 --> 00:01:50.020
If the inputs are 0 0 the output will be 0 

33
00:01:50.030 --> 00:01:53.230
If the inputs are 0 1 again the output is 0 

34
00:01:53.240 --> 00:01:56.690
Also if it is 1 0 the result is again 0 

35
00:01:56.950 --> 00:02:01.300
and only if the input is 1 and 1 then only 

36
00:02:01.300 --> 00:02:02.570
the output is 1.

37
00:02:02.840 --> 00:02:06.030
So if we perform bitwise AND on the above 

38
00:02:06.030 --> 00:02:09.239
value with this, the last bit will be set to 

39
00:02:09.240 --> 00:02:09.610
0 

40
00:02:09.620 --> 00:02:12.970
Similarly if we want to enable the bit again  

41
00:02:12.980 --> 00:02:18.090
we can achieve it using with bitwise OR operator simply put 1

42
00:02:18.100 --> 00:02:20.320
in the position where we want to set the bit

43
00:02:20.330 --> 00:02:24.700
to 1 and set other bits to 0. that is in 

44
00:02:24.700 --> 00:02:26.390
bitwise OR operation 

45
00:02:26.590 --> 00:02:30.120
If the inputs are 0 0 output will be 0 

46
00:02:30.360 --> 00:02:34.060
If the inputs are 0 1 the output will be 1 also 

47
00:02:34.060 --> 00:02:37.220
If it is 1 0 then also the result is 1 

48
00:02:37.490 --> 00:02:40.780
and if the inputs are 1 and 1 then also 

49
00:02:40.780 --> 00:02:41.960
the output is 1 

50
00:02:42.640 --> 00:02:45.859
So if we perform bit wise OR on the above 

51
00:02:45.860 --> 00:02:49.030
value with this, the last bit will be set to 

52
00:02:49.030 --> 00:02:49.860
1 again 

53
00:02:49.870 --> 00:02:54.030
We will discuss this operations elaborately in the upcoming videos 

54
00:02:54.040 --> 00:02:57.510
Now let us discuss how bit wise operators can be 

55
00:02:57.510 --> 00:02:59.119
useful in the real life 

56
00:02:59.940 --> 00:03:01.800
We all know traffic signal 

57
00:03:02.240 --> 00:03:05.990
It will have three signals red, yellow and green 

58
00:03:06.000 --> 00:03:09.269
Let us assume three bits are reserved for each signal 

59
00:03:09.280 --> 00:03:10.800
and all are set to zero 

60
00:03:10.810 --> 00:03:13.329
If we want to show the red signal we need 

61
00:03:13.330 --> 00:03:17.220
to enable the third so we can do it using 

62
00:03:17.220 --> 00:03:18.270
the OR operator 

63
00:03:18.280 --> 00:03:20.730
So take 1 in the place where we want to 

64
00:03:20.740 --> 00:03:23.950
enable the  bit and 0 in the remaining bits that 

65
00:03:23.950 --> 00:03:29.270
is 100 now perform bit wise OR with 000 So third 

66
00:03:29.270 --> 00:03:32.150
bit will be enabled and the red signal will be 

67
00:03:32.150 --> 00:03:35.970
shown. Now to turn red off or disable 

68
00:03:35.970 --> 00:03:39.150
That bit we can use bitwise AND operator 

69
00:03:39.640 --> 00:03:42.190
So take 0 in the place where we want to 

70
00:03:42.190 --> 00:03:48.020
disable the bit that is 000 and perform AND operation 

71
00:03:48.030 --> 00:03:51.770
and we will get 000. That is red will be 

72
00:03:51.770 --> 00:03:55.420
turned OFF. now we need to turn green ON that is 

73
00:03:55.430 --> 00:03:59.610
first bit should be enabled. For that again use bitwise

74
00:03:59.620 --> 00:04:03.989
OR operator and to turn this bit on take 1

75
00:04:04.000 --> 00:04:05.149
in that position.

76
00:04:05.540 --> 00:04:09.720
So we got 001 and perform bitwise OR and we 

77
00:04:09.720 --> 00:04:14.060
got the result 001. That is green light is turned 

78
00:04:14.070 --> 00:04:14.549
ON 

79
00:04:14.560 --> 00:04:18.570
So we have many such applications of bit wise operators 

80
00:04:18.580 --> 00:04:21.620
now let us see which are the bit wise operators 

81
00:04:21.790 --> 00:04:27.150
We have bitwise OR, bitwise AND,  bitwise XOR

82
00:04:27.150 --> 00:04:31.460
  bitwise left shift operator,  bitwise right shift operator and 

83
00:04:31.460 --> 00:04:31.969
 bitwise 

84
00:04:31.970 --> 00:04:35.890
one's compliment operator in the upcoming videos we will discuss 

85
00:04:35.900 --> 00:04:36.820
each bit wise 

86
00:04:36.820 --> 00:04:38.570
Operators elaborately.

