WEBVTT

1
00:00:00.040 --> 00:00:03.840
In this chapter we will learn How can we use bitwise 

2
00:00:03.840 --> 00:00:08.030
XOR to solve some problems in linear time.

3
00:00:08.040 --> 00:00:09.330
Using XOR operator

4
00:00:09.430 --> 00:00:13.780
We can solve many interesting problems. Before getting started with 

5
00:00:13.780 --> 00:00:16.230
problems, let's quickly understand 

6
00:00:16.230 --> 00:00:20.470
the two main properties of XOR. The property one is 

7
00:00:20.800 --> 00:00:24.050
XOR of the two same numbers will be zero 

8
00:00:24.540 --> 00:00:27.850
For example, let us XOR five and five 

9
00:00:28.540 --> 00:00:33.050
First write five in the binary form which is 0101 

10
00:00:33.640 --> 00:00:36.000
Let us calculate five XOR five 

11
00:00:36.500 --> 00:00:40.470
So what is XOR gate's functionality? If two bits are 

12
00:00:40.480 --> 00:00:42.360
equal it will return zero.

13
00:00:42.570 --> 00:00:45.330
And if the bits are not equal it will return one.
14
00:00:45.330 --> 00:00:45.660

15
00:00:46.240 --> 00:00:49.820
So here the output of five XOR five will 

16
00:00:49.820 --> 00:00:55.740
be 0000. So if we exhort to same numbers the 

17
00:00:55.740 --> 00:01:00.540
final output will be zero. The second property is, 

18
00:01:00.540 --> 00:01:03.280
if we XOR a number with zero we will get 

19
00:01:03.280 --> 00:01:04.750
the same number back 

20
00:01:05.140 --> 00:01:10.500
For example let us XOR five and zero. The binary form of five 

21
00:01:10.510 --> 00:01:16.340
is 0101 and the binary form of zero is 0000 

22
00:01:17.040 --> 00:01:20.710
If we calculate five XOR zero it will be 

23
00:01:20.720 --> 00:01:23.650
0101 which is five again. 

24
00:01:24.340 --> 00:01:27.480
So the second property is if we XOR a 

25
00:01:27.480 --> 00:01:28.700
number with zero 

26
00:01:28.740 --> 00:01:32.410
We will get the same number back. Using these properties 

27
00:01:32.410 --> 00:01:36.010
of XOR we can solve some interesting problems which 

28
00:01:36.020 --> 00:01:38.630
involve eliminating the same numbers 

29
00:01:38.910 --> 00:01:42.540
For example, let us take this problem statement given an 

30
00:01:42.550 --> 00:01:47.250
array of numbers but every number appears twice except one 

31
00:01:47.250 --> 00:01:47.850
number 

32
00:01:48.240 --> 00:01:51.550
We need to find that one odd occurring number 

33
00:01:52.240 --> 00:01:59.200
Let's take the array of numbers as 5 5 3 3 7 7 4.  

34
00:01:59.210 --> 00:02:03.310
Here the output will be four because the numbers five, three and 

35
00:02:03.310 --> 00:02:05.090
seven appear twice.

36
00:02:05.290 --> 00:02:09.180
But the number four appears only once.

37
00:02:09.180 --> 00:02:11.550
So can we solve this problem using XOR property?

38
00:02:11.940 --> 00:02:15.700
Yes XORing the same number will become zero 

39
00:02:15.850 --> 00:02:20.310
So if we XOR all the numbers, 5 5 will cancel out 

40
00:02:20.440 --> 00:02:24.490
3 3 will cancel out and similarly 7 7 will cancel out 

41
00:02:24.500 --> 00:02:25.550
and become zero.

42
00:02:26.040 --> 00:02:29.480
Next XORing a number with zero will give the 

43
00:02:29.480 --> 00:02:30.540
same number 

44
00:02:30.830 --> 00:02:34.420
So all the even occurring numbers will cancel out and 

45
00:02:34.430 --> 00:02:35.680
it becomes zero 

46
00:02:35.690 --> 00:02:39.690
Finally zero XOR four will give the same number four.

47
00:02:39.690 --> 00:02:44.010
So using bitwise XOR we can solve these

48
00:02:44.010 --> 00:02:47.740
kind of problems which involve finding one odd occurring number

49
00:02:47.740 --> 00:02:50.140
two odd occurring numbers etc.

50
00:02:50.150 --> 00:02:53.640
From the next videos we will solve the 

51
00:02:53.640 --> 00:02:56.200
problems using bitwise XOR pattern. 





