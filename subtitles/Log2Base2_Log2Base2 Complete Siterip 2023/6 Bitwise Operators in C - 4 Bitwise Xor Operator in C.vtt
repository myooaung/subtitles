WEBVTT

1
00:00:00.540 --> 00:00:01.330
Hi friends 

2
00:00:01.340 --> 00:00:03.280
In this video we are going to learn the bitwise

3
00:00:03.280 --> 00:00:04.869
 XOR operator 

4
00:00:11.140 --> 00:00:14.150
So the bitwise XOR operator  takes equal length 

5
00:00:14.160 --> 00:00:17.230
binary sequence and perform bitwise XOR operation

6
00:00:17.240 --> 00:00:18.610
on each pair of bits 

7
00:00:18.620 --> 00:00:20.470
So this is the truth table for that.

8
00:00:20.480 --> 00:00:23.070
And if we have 0 and 0 then this operator 

9
00:00:23.070 --> 00:00:24.240
will return 0 

10
00:00:24.250 --> 00:00:26.710
And if we have 0 and 1 then the result 

11
00:00:26.720 --> 00:00:31.110
is 1 and if we have 1 and 0 then 

12
00:00:31.110 --> 00:00:32.410
also the result is 1 

13
00:00:32.640 --> 00:00:35.400
And finally if you have both the value 1 then 

14
00:00:35.400 --> 00:00:36.390
the result is 0. 

15
00:00:36.400 --> 00:00:38.970
So simply saying if you have different values for the 

16
00:00:38.970 --> 00:00:40.970
pair of bits then you get a 1 and if we 

17
00:00:40.970 --> 00:00:43.230
have the same value for both the bits then you 

18
00:00:43.230 --> 00:00:43.890
get 0 

19
00:00:46.340 --> 00:00:49.380
So see an example. Take 5 and 9 Let us

20
00:00:49.380 --> 00:00:52.140
perform bitwise XOR operator  on 5 and 9 

21
00:00:52.150 --> 00:00:55.000
But these are decimal numbers so first we need to 

22
00:00:55.000 --> 00:00:56.860
convert them into binary numbers 

23
00:00:56.860 --> 00:00:59.600
And we know the equivalent of decimal 5

24
00:00:59.600 --> 00:01:02.150
that is equal to 101. And for 9 it is 

25
00:01:02.150 --> 00:01:07.200
equal to 1001 and we need equal length binary 

26
00:01:07.200 --> 00:01:10.289
sequence So add a 0 to the left of 101 And we 

27
00:01:10.290 --> 00:01:14.050
got 0101. Now we can perform bitwise XOR 

28
00:01:16.040 --> 00:01:18.760
So take the first pair of bits which is 1 and 1 

29
00:01:18.760 --> 00:01:21.450
 and we have the truth table so we got 

30
00:01:21.650 --> 00:01:23.100
Zero and next 

31
00:01:23.100 --> 00:01:25.620
pair is zero and zero again we get zero 

32
00:01:25.700 --> 00:01:27.100
Next is 1 and 0 

33
00:01:27.100 --> 00:01:28.700
So that's different values 

34
00:01:28.710 --> 00:01:29.720
So we get 1 

35
00:01:29.730 --> 00:01:32.940
And finally we have 0 and 1. Again different values 

36
00:01:32.940 --> 00:01:35.890
So we get 1 and the result of bitwise XOR 

37
00:01:35.890 --> 00:01:37.980
operation between 5 and 9

38
00:01:37.990 --> 00:01:44.670
is 1100 whose binary equivalent is 12. Now an interesting 

39
00:01:44.670 --> 00:01:47.949
fact is that if we again perform XOR on the 

40
00:01:47.950 --> 00:01:51.650
above result 12 with 9 we will get 5 back 

41
00:01:51.790 --> 00:01:55.339
And because of this property it was used in cryptography 

42
00:01:55.350 --> 00:01:58.169
Now see the code to implement this. In the main 

43
00:01:58.170 --> 00:02:01.399
function we are declaring two integers A and B which 

44
00:02:01.400 --> 00:02:03.150
are equal to 5 and 9

45
00:02:03.440 --> 00:02:06.720
Then we are calculating output equal to A bitwise XOR B 

46
00:02:06.750 --> 00:02:10.109
So 

47
00:02:10.120 --> 00:02:13.489
 bitwise XOR will be performed and the results will 

48
00:02:13.490 --> 00:02:14.880
be stored in output 

49
00:02:14.890 --> 00:02:17.369
Now we are printing the value of output which will 

50
00:02:17.370 --> 00:02:18.320
be 12

51
00:02:18.330 --> 00:02:21.530
So that's it. Now let us discuss about the application of 

52
00:02:21.540 --> 00:02:22.399
bitwise XOR 

53
00:02:22.410 --> 00:02:25.220
So as we discussed, it was used in cryptography 

54
00:02:26.440 --> 00:02:29.190
So let's say we have two persons who are friends 

55
00:02:29.200 --> 00:02:31.810
and they share a common Key here which is 9 

56
00:02:32.140 --> 00:02:34.370
And now they are continents apart 

57
00:02:34.370 --> 00:02:36.859
And if they want to share a secret message they 

58
00:02:36.860 --> 00:02:38.899
can make use of bitwise XOR.

59
00:02:39.540 --> 00:02:42.360
So this person wants to share the number 5 but 

60
00:02:42.370 --> 00:02:43.460
it should be a secret 

61
00:02:43.460 --> 00:02:46.880
So he performs bit wise XOR on this number 5

62
00:02:46.890 --> 00:02:49.650
and the key 9 and he gets 12 and that 

63
00:02:49.650 --> 00:02:50.720
is sent to his friend 

64
00:02:52.640 --> 00:02:55.570
And when this is received by him he also have 

65
00:02:55.570 --> 00:02:56.550
the key 9

66
00:02:56.560 --> 00:02:57.920
So he performs bitwise 

67
00:02:57.930 --> 00:02:58.540
XOR

68
00:02:58.540 --> 00:03:01.190
on received number 12 and the key 9 and he gets 

69
00:03:01.190 --> 00:03:02.579
the original number 5

70
00:03:02.590 --> 00:03:04.720
So that is how bitwise XOR can be 

71
00:03:04.720 --> 00:03:05.950
used in  crypytography 

72
00:03:07.840 --> 00:03:10.130
So that's all and thank you for watching this video 

