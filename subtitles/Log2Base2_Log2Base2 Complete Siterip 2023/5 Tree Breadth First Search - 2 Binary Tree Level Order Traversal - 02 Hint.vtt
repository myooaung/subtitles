WEBVTT

1
00:00:00.040 --> 00:00:01.550
We can use bread first 

2
00:00:01.550 --> 00:00:04.350
traversal to print the tree level by level 

3
00:00:04.920 --> 00:00:08.350
So which data structure is breadth first traversal

4
00:00:08.800 --> 00:00:09.570
It is Queue

5
00:00:09.580 --> 00:00:13.160
write so using queue at a structure we can print 

6
00:00:13.160 --> 00:00:15.860
the tree level by level traversal

7
00:00:15.860 --> 00:00:19.350
Take a queue and insert the first node that is 

8
00:00:19.350 --> 00:00:20.870
the root note into it 

9
00:00:21.440 --> 00:00:24.950
After that while the queue is not empty we need 

10
00:00:24.950 --> 00:00:29.050
to do some steps first. Get and back up the 

11
00:00:29.050 --> 00:00:33.380
front node from the queue and print its data then 

12
00:00:33.390 --> 00:00:34.550
pop it from the queue.

13
00:00:35.050 --> 00:00:38.180
We can get the first node using Queue.front 

14
00:00:38.180 --> 00:00:42.210
function and remove the element from the queue using  

15
00:00:42.210 --> 00:00:47.040
queue.pop function and then push the current node left 

16
00:00:47.050 --> 00:00:48.860
and right child into the queue.

17
00:00:48.940 --> 00:00:50.550
If they are not equal do not 

18
00:00:51.100 --> 00:00:54.050
If we do this process until the queue is not 

19
00:00:54.050 --> 00:00:56.960
empty, we will get the level order traversal alot of 

20
00:00:56.970 --> 00:01:01.080
the tree so let's see how it works now 10 

21
00:01:01.080 --> 00:01:04.200
is present in the queue. So print it and pop 

22
00:01:04.200 --> 00:01:07.200
it from the queue and then push the left and 

23
00:01:07.200 --> 00:01:08.580
right child of the node 

24
00:01:09.300 --> 00:01:12.140
So left child 20 will be pushed into the queue 

25
00:01:12.440 --> 00:01:15.860
and then right child 30 will also be pushed into 

26
00:01:15.860 --> 00:01:17.850
the queue now again check

27
00:01:17.850 --> 00:01:18.340


28
00:01:18.350 --> 00:01:21.680
If Queue is not empty it is not empty 

29
00:01:21.820 --> 00:01:25.950
So we need to repeat the same process that is 

30
00:01:26.180 --> 00:01:30.050
Bring the front element so 20 will be printed and 

31
00:01:30.050 --> 00:01:33.620
then pop it from the queue and now push 20's 

32
00:01:33.630 --> 00:01:38.180
left child and right child. So 40 and 50 will 

33
00:01:38.180 --> 00:01:40.650
be pushed into the queue again 

34
00:01:40.650 --> 00:01:40.950


35
00:01:40.950 --> 00:01:45.260
queue is not empty. So print the front element 30 and 

36
00:01:45.270 --> 00:01:49.060
pop it from the queue and now push 30's left 

37
00:01:49.060 --> 00:01:52.650
child and right child since 30 and leave node

38
00:01:52.660 --> 00:01:53.170

39
00:01:53.370 --> 00:01:57.370
It's left and right child is so we can't push 

40
00:01:57.370 --> 00:02:00.620
it into the queue. So we can skip it now 

41
00:02:00.620 --> 00:02:01.030
again 

42
00:02:01.030 --> 00:02:01.300
 

43
00:02:01.300 --> 00:02:03.130
queue is not empty so print

44
00:02:03.130 --> 00:02:06.150
the front element 40 and pop it from the queue 

45
00:02:06.720 --> 00:02:10.120
node 40 also doesn't have the left 10 right child 

46
00:02:10.190 --> 00:02:13.800
so we can skip the push operation now 

47
00:02:13.800 --> 00:02:14.080


48
00:02:14.080 --> 00:02:17.900
Again queue is not empty. So print the front element 50 and 

49
00:02:17.900 --> 00:02:19.050
pop it from the queue. 

50
00:02:19.600 --> 00:02:19.930


51
00:02:19.930 --> 00:02:23.500
Node 50 is also a leaf node so push operation will 

52
00:02:23.500 --> 00:02:24.250
be sceptre 

53
00:02:24.840 --> 00:02:28.000
Now if we check the queue 80 70 

54
00:02:28.000 --> 00:02:31.240
So we can stop the process and see we got the level 

55
00:02:31.240 --> 00:02:32.770
order traversing of the tree. 

56
00:02:32.960 --> 00:02:36.450
That is 10 20 30 40 50 

57
00:02:36.940 --> 00:02:39.830
So using this logic, you can solve the problem 

58
00:02:40.090 --> 00:02:42.830
You can use the c++ queue library to 

59
00:02:42.830 --> 00:02:44.150
solve this problem 

