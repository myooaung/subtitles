WEBVTT

1
00:00:00.140 --> 00:00:02.310
To solve the odd occurring number problem 

2
00:00:02.320 --> 00:00:05.250
We can use the bitwise XOR operator 

3
00:00:05.740 --> 00:00:08.970
We know that doing XOR on the same bits will 

4
00:00:08.970 --> 00:00:12.400
result in zero and doing XOR on different bits 

5
00:00:12.410 --> 00:00:15.120
will result in one. So doing XOR on the 

6
00:00:15.120 --> 00:00:16.710
number and itself 

7
00:00:16.960 --> 00:00:19.450
even number of times will result in zero 

8
00:00:20.040 --> 00:00:22.430
And if we do XOR on the number and 

9
00:00:22.430 --> 00:00:26.170
itself odd number of times, the result will be that 

10
00:00:26.170 --> 00:00:27.170
number itself.

11
00:00:27.470 --> 00:00:30.840
Thus if we do bitwise XOR on all 

12
00:00:30.840 --> 00:00:34.150
the elements of the array one after the other, we will 

13
00:00:34.150 --> 00:00:35.950
get the odd occurring number 

14
00:00:36.410 --> 00:00:37.860
Let us see how this works

15
00:00:37.860 --> 00:00:41.440
as an example. we have an array with size five 

16
00:00:41.840 --> 00:00:48.950
and elements 1 3 3 1 5. First let us assign the first element 

17
00:00:48.960 --> 00:00:50.020
to variable result

18
00:00:50.400 --> 00:00:54.880
then we shall iterate the array from second element and perform  

19
00:00:54.880 --> 00:00:58.720
XOR on result and the element and store the outcome 

20
00:00:58.730 --> 00:01:03.230
in result. So firstly do XOR in result and 

21
00:01:03.230 --> 00:01:07.260
second element that is one XOR three and we 

22
00:01:07.260 --> 00:01:12.770
will get 0010 which is decimal two. So store that 

23
00:01:12.780 --> 00:01:16.980
in result. Now do XOR on updated result and 

24
00:01:16.980 --> 00:01:19.950
next element. That is two and three 

25
00:01:20.540 --> 00:01:25.850
So we will get 0010 XOR 0011 and the 

26
00:01:25.850 --> 00:01:31.550
result will be 0001. That is decimal one. So store 

27
00:01:31.550 --> 00:01:35.260
it in result. Now do XOR on result and 

28
00:01:35.260 --> 00:01:38.310
the next element that is one and one 

29
00:01:38.440 --> 00:01:44.370
And the result is 0000. So update result and now 

30
00:01:44.380 --> 00:01:47.330
do XOR on the new result zero and the 

31
00:01:47.330 --> 00:01:53.340
next element five and result is 0101. That is five 

32
00:01:53.350 --> 00:01:57.860
itself and the array is completely processed now and thus 

33
00:01:57.920 --> 00:02:01.830
the elements occurring even number of times has cancelled out 

34
00:02:01.840 --> 00:02:05.370
each other and we have the odd occurring number in variable 

35
00:02:05.370 --> 00:02:05.950
result.

