WEBVTT

1
00:00:00.040 --> 00:00:00.900
Hello friends 

2
00:00:01.030 --> 00:00:04.510
In this video let us learn how to construct binary 

3
00:00:04.510 --> 00:00:05.750
heap from an array 

4
00:00:06.440 --> 00:00:09.750
For an example let us take an array of seven 

5
00:00:09.760 --> 00:00:10.400
elements 

6
00:00:10.470 --> 00:00:13.250
That is from index 0 to 6 

7
00:00:13.840 --> 00:00:17.040
As we know the binary heap is a complete binary 

8
00:00:17.040 --> 00:00:20.350
tree which satisfies the heap ordering property 

9
00:00:21.040 --> 00:00:24.780
So here we need to logically construct a complete 

10
00:00:24.780 --> 00:00:29.260
binary tree using this array for that for every index 

11
00:00:29.270 --> 00:00:32.450
of the array we need to find its left and right 

12
00:00:32.450 --> 00:00:35.600
child so that we can construct the complete binary 

13
00:00:35.600 --> 00:00:39.720
tree Out of this array here Array index starts at 

14
00:00:39.720 --> 00:00:40.240
zero 

15
00:00:40.350 --> 00:00:43.330
Then the left child can be found in the index 

16
00:00:43.340 --> 00:00:47.200
two Indo I plus one and the right child can 

17
00:00:47.200 --> 00:00:50.650
be found in the index two Indo I plus two 

18
00:00:51.040 --> 00:00:54.770
Let us say how for Index zero the left child 

19
00:00:54.780 --> 00:00:57.580
will be in two into 0 plus one 

20
00:00:57.720 --> 00:01:02.010
That is index one which is the Element 20 and 

21
00:01:02.010 --> 00:01:04.830
the right child will be in two indo zero plus 

22
00:01:04.830 --> 00:01:05.200
two 

23
00:01:05.210 --> 00:01:07.950
That is index two which is Element 40 

24
00:01:08.440 --> 00:01:12.160
Similarly for index one the left child will be two 

25
00:01:12.160 --> 00:01:15.660
into one plus one that is index three which is 

26
00:01:15.660 --> 00:01:18.790
element 30 here and the right child will be in 

27
00:01:18.800 --> 00:01:21.280
index two into one plus two 

28
00:01:21.320 --> 00:01:24.350
That is index four which is Element 80 

29
00:01:24.940 --> 00:01:28.870
Similarly for index two the left child will be two 

30
00:01:28.870 --> 00:01:30.490
into 2 plus one 

31
00:01:30.500 --> 00:01:34.300
That is index five which is elements 60 and the 

32
00:01:34.300 --> 00:01:37.640
right child will be in index two into two plus 

33
00:01:37.640 --> 00:01:42.050
two that is index six which is Element 50 and 

34
00:01:42.050 --> 00:01:43.280
for index Three 

35
00:01:43.290 --> 00:01:46.660
The left child should be at index two into three 

36
00:01:46.660 --> 00:01:49.050
plus one that is seven and right 

37
00:01:49.050 --> 00:01:52.630
Child should be in index two Indo three plus two 

38
00:01:52.640 --> 00:01:53.650
that is eight 

39
00:01:54.140 --> 00:01:57.200
But these indices are not in the range so we 

40
00:01:57.200 --> 00:02:01.370
can stop the processing Now that is we can understand 

41
00:02:01.370 --> 00:02:04.490
that the next elements should be the leafs of the 

42
00:02:04.490 --> 00:02:04.850
tree 

43
00:02:05.740 --> 00:02:08.910
In this example we are going to construct a max heap 

44
00:02:09.640 --> 00:02:10.570
in max heap 

45
00:02:10.750 --> 00:02:13.850
The parent will always be larger than the Children 

46
00:02:14.340 --> 00:02:17.920
This is applicable for every sub tree and hence the 

47
00:02:17.920 --> 00:02:20.070
root of the tree will be the maximum 

48
00:02:20.240 --> 00:02:24.870
In a max heap so let us construct the max heap to 

49
00:02:24.870 --> 00:02:27.260
construct max heap or min heap 

50
00:02:27.270 --> 00:02:30.410
We need to satisfy the heap property from the bottom 

51
00:02:30.410 --> 00:02:31.250
most sub Tree 

52
00:02:32.140 --> 00:02:35.890
Here we are going to construct the Max heap so we 

53
00:02:35.890 --> 00:02:39.510
need to satisfy the max heap property from bottom Most sub 

54
00:02:39.510 --> 00:02:42.950
tree here which is the bottom most sub tree 

55
00:02:43.440 --> 00:02:46.560
It is the sub tree with node 40 who's left 

56
00:02:46.570 --> 00:02:50.260
Child is 60 and right Child is 50 and the 

57
00:02:50.260 --> 00:02:54.400
second bottom Most subtree Is this this node 28 

58
00:02:54.400 --> 00:02:58.020
with left child 30 and right child 80 and 

59
00:02:58.020 --> 00:03:01.310
the top most subtree is this one the node 

60
00:03:01.490 --> 00:03:05.710
10 with left child 20 and right child 40 So 

61
00:03:05.710 --> 00:03:09.180
first take the bottom most sub three check 

62
00:03:09.240 --> 00:03:13.470
If it satisfies the max heap property that is parent should 

63
00:03:13.470 --> 00:03:16.970
be greater than Children and the maximum value should be 

64
00:03:16.980 --> 00:03:21.320
at the root here The child 60 is greater than 

65
00:03:21.330 --> 00:03:25.940
parent 40 so swap 60 and 40 again We need 

66
00:03:25.940 --> 00:03:29.350
to check for the max heap property of the swapped index 

67
00:03:29.740 --> 00:03:33.730
But now 40 does'nt have any left or right child 

68
00:03:33.790 --> 00:03:38.370
so we can skip this now the maximum element 60 

69
00:03:38.380 --> 00:03:42.620
is placed in subtree's root Now it satisfies a 

70
00:03:42.620 --> 00:03:43.750
max heap property 

71
00:03:44.640 --> 00:03:49.080
Next consider the second bottom most sub tree Here child 

72
00:03:49.090 --> 00:03:53.260
80 is greater than parent 20 So swap 80 and 

73
00:03:53.260 --> 00:03:54.910
20 again 

74
00:03:54.910 --> 00:03:57.460
We need to check for the max heap property of the 

75
00:03:57.460 --> 00:03:58.450
swapped Index 

76
00:03:59.040 --> 00:04:02.590
But again 20 does'nt have left and right child 

77
00:04:02.660 --> 00:04:04.250
so we can skip this step 

78
00:04:04.840 --> 00:04:09.040
Now take the top Most sub tree Here child 80 

79
00:04:09.050 --> 00:04:13.650
is greater than parent ten So swap 80 and 10 

80
00:04:14.140 --> 00:04:16.860
again We need to check for the max heap property of 

81
00:04:16.870 --> 00:04:21.160
the swapped Index here 10 is root and 30 and 

82
00:04:21.160 --> 00:04:25.850
20 are its Children It Does'nt satisfy the max heap property 

83
00:04:26.540 --> 00:04:29.910
That is the root must be the maximum among all 

84
00:04:29.910 --> 00:04:34.180
the nodes Here 30 is greater than 10 and 20 

85
00:04:34.530 --> 00:04:38.380
to swap 30 and ten and again we need to 

86
00:04:38.380 --> 00:04:42.270
check for the max heap property of the swap index But 

87
00:04:42.270 --> 00:04:46.180
now 10 does'nt have left and right child so we 

88
00:04:46.180 --> 00:04:49.770
can skip this and our heapify process is 

89
00:04:49.770 --> 00:04:53.900
done for all sub trees from bottom Most node now 

90
00:04:53.900 --> 00:04:57.850
this complete tree exactly satisfy some Max heap property 

91
00:04:58.390 --> 00:05:02.140
The maximum element 80 is present at the root and 

92
00:05:02.150 --> 00:05:05.560
every sub Tree's root value is the maximum of its 

93
00:05:05.560 --> 00:05:06.050
Children 

94
00:05:06.740 --> 00:05:09.390
So this is how we can construct a heap from 

95
00:05:09.390 --> 00:05:09.950
an array 

96
00:05:10.640 --> 00:05:13.970
Now let us see how to implement this as we 

97
00:05:13.970 --> 00:05:17.860
discussed the procedure to construct the heap first find a 

98
00:05:17.860 --> 00:05:21.080
bottom most sub tree and from the bottom most sub 

99
00:05:21.080 --> 00:05:24.850
tree to top check and satisfy the heap property 

100
00:05:25.740 --> 00:05:27.860
Here we have two functions 

101
00:05:28.090 --> 00:05:31.520
First is built Heap which will call the heapify 

102
00:05:31.520 --> 00:05:35.080
function to satisfy the heap property from the bottom 

103
00:05:35.080 --> 00:05:39.430
Most node and the heapify function will find 

104
00:05:39.440 --> 00:05:42.990
the left and right nodes and arranges it based on 

105
00:05:43.000 --> 00:05:44.050
the heap property 

106
00:05:44.840 --> 00:05:47.650
First let us understand the built heap function 

107
00:05:48.240 --> 00:05:51.710
The array and the last index of the array passed 

108
00:05:51.720 --> 00:05:52.950
into this function 

109
00:05:53.540 --> 00:05:58.620
Total seven here and the size is the last index 

110
00:05:58.630 --> 00:06:01.480
of the array that is seven minus one which is 

111
00:06:01.480 --> 00:06:02.550
equal to six 

112
00:06:03.440 --> 00:06:06.450
And as we discussed the built heap function will call 

113
00:06:06.450 --> 00:06:08.610
the heapify function from the bottom 

114
00:06:08.610 --> 00:06:09.250
Most node 

115
00:06:10.040 --> 00:06:12.870
In general we can get the bottom most node using 

116
00:06:12.870 --> 00:06:14.050
size by two 

117
00:06:14.740 --> 00:06:17.930
So this for loop will run from size by 2 

118
00:06:17.940 --> 00:06:21.690
to 0 that is bottom most sub tree root 

119
00:06:21.950 --> 00:06:25.360
to Index zero that is top most sub tree root 

120
00:06:25.360 --> 00:06:25.750
node 

121
00:06:26.540 --> 00:06:29.430
For every sub tree index it will call the heapify

122
00:06:29.430 --> 00:06:33.900
function so now size by two is equal 

123
00:06:33.900 --> 00:06:35.950
to six by two which is equal to three 

124
00:06:36.440 --> 00:06:39.690
So heapify function is called with index three 

125
00:06:39.700 --> 00:06:42.950
along with the array and size six 

126
00:06:43.640 --> 00:06:46.910
So here index equal to a three and size equal 

127
00:06:46.910 --> 00:06:47.550
to six 

128
00:06:48.440 --> 00:06:51.700
Let us first find the left and right child of 

129
00:06:51.710 --> 00:06:55.480
the node at this index so left equal to two 

130
00:06:55.480 --> 00:06:59.410
Indo Index plus one that is two Indo three plus 

131
00:06:59.410 --> 00:07:01.050
one which is equal to seven 

132
00:07:01.740 --> 00:07:05.140
And now let us find the right child right equal 

133
00:07:05.140 --> 00:07:08.300
to left plus one that is seven plus one which 

134
00:07:08.300 --> 00:07:09.450
is equal to eight 

135
00:07:10.240 --> 00:07:13.700
Initially we keep the max and index at the same 

136
00:07:13.700 --> 00:07:14.350
index 

137
00:07:14.840 --> 00:07:19.040
If the max heap property is not satisfied Max index will 

138
00:07:19.040 --> 00:07:19.850
be changed 

139
00:07:20.540 --> 00:07:24.270
If Max and Index still point to the same index after 

140
00:07:24.270 --> 00:07:28.290
the left and right value checking it means this sub tree 

141
00:07:28.290 --> 00:07:30.010
obeys the max heap property 

142
00:07:30.270 --> 00:07:33.840
So whenever Max is not equal to index swap the 

143
00:07:33.840 --> 00:07:36.830
element and called the heapify function with Max 

144
00:07:36.830 --> 00:07:40.480
Index again let's see how this works 

145
00:07:40.780 --> 00:07:43.690
So here max equal to index three 

146
00:07:43.690 --> 00:07:47.850
now check if left and right child is greater 

147
00:07:47.850 --> 00:07:52.190
than this node so we have if left less than

148
00:07:52.190 --> 00:07:55.600
are equal to size and arr of left greater than 

149
00:07:55.610 --> 00:07:57.050
arr  of max 

150
00:07:57.640 --> 00:08:01.630
But this fails as left seven is not less than 

151
00:08:01.630 --> 00:08:05.830
or equal to size so check the next if it 

152
00:08:05.840 --> 00:08:06.940
also fails 

153
00:08:06.950 --> 00:08:10.710
Since right Index eight is also not less than or 

154
00:08:10.710 --> 00:08:11.730
equal to size 

155
00:08:12.440 --> 00:08:17.320
Now check If Max was updated it hasn't so if 

156
00:08:17.320 --> 00:08:18.470
failed again 

157
00:08:18.680 --> 00:08:22.630
And this function is completed now and control gets back 

158
00:08:22.630 --> 00:08:26.910
to build heap function here in next iteration of the 

159
00:08:26.910 --> 00:08:30.980
for loop i is equal two and heapify is 

160
00:08:30.980 --> 00:08:35.740
called bypassing arr  I equal to two and size equal 

161
00:08:35.740 --> 00:08:36.450
to six 

162
00:08:37.340 --> 00:08:40.850
So here in this function index is equal to two and 

163
00:08:40.850 --> 00:08:42.250
size equal to six 

164
00:08:42.840 --> 00:08:46.140
Let us first find the left and right Children of 

165
00:08:46.150 --> 00:08:47.750
node at this index 

166
00:08:48.240 --> 00:08:51.830
So left equal to two Indo Index plus one that 

167
00:08:51.830 --> 00:08:55.480
is two into two plus one which is five and 

168
00:08:55.480 --> 00:08:59.480
right equal to left plus one that is six And 

169
00:08:59.490 --> 00:09:03.570
as we said initially we keep the max and index 

170
00:09:03.580 --> 00:09:04.850
at the same position 

171
00:09:05.340 --> 00:09:06.370
So Max equal to

172
00:09:06.370 --> 00:09:09.870
index two that is we are assuming that this 

173
00:09:09.870 --> 00:09:14.100
sub tree satisfies the heap property And if any child 

174
00:09:14.110 --> 00:09:16.850
is greater than parent we update Max 

175
00:09:17.240 --> 00:09:20.840
And finally if Max and index at different we have 

176
00:09:20.850 --> 00:09:22.670
to perform swap operation 

177
00:09:23.340 --> 00:09:25.350
So now Max equal to two 

178
00:09:26.140 --> 00:09:30.110
Now check if left child is greater than this node 

179
00:09:30.230 --> 00:09:33.890
So we have if left less than or equal to 

180
00:09:33.890 --> 00:09:38.550
size and arr  of left greater than arr  of Max 

181
00:09:39.040 --> 00:09:43.690
And we have five less than size and 60 greater 

182
00:09:43.690 --> 00:09:44.550
than 40 

183
00:09:45.040 --> 00:09:49.150
So left child is greater than parent so update Max 

184
00:09:49.840 --> 00:09:51.580
So Max equal to left 

185
00:09:51.580 --> 00:09:56.660
Now that is index five now chek if right child 

186
00:09:56.770 --> 00:09:58.190
is greater than Max 

187
00:09:58.490 --> 00:10:02.070
So we have if right less than or equal to size 

188
00:10:02.080 --> 00:10:05.850
and arr  of right greater than arr  of Max 

189
00:10:06.740 --> 00:10:10.580
And we have six equal to size and 50 not 

190
00:10:10.590 --> 00:10:11.850
greater than 60 

191
00:10:12.240 --> 00:10:13.980
So it fails and see 

192
00:10:13.990 --> 00:10:17.170
Now we have the maximum value of this sub Tree 

193
00:10:17.180 --> 00:10:17.950
at Max 

194
00:10:18.340 --> 00:10:21.350
So we have found the maximum value of this sub 

195
00:10:21.350 --> 00:10:21.680
tree 

196
00:10:22.020 --> 00:10:24.250
Now we have to rearrange it so 

197
00:10:24.250 --> 00:10:24.780
check 

198
00:10:24.880 --> 00:10:28.740
If Max was updated that is Max was initially set 

199
00:10:28.740 --> 00:10:30.500
to index now check 

200
00:10:30.510 --> 00:10:33.550
If Max and Index are the same and it is 

201
00:10:33.550 --> 00:10:37.980
not so if conditions is true so swap elements at 

202
00:10:37.980 --> 00:10:42.650
Max and Index that is 60 and 40 are swapped

203
00:10:43.340 --> 00:10:46.090
so that the maximum element is now at the root 

204
00:10:46.090 --> 00:10:51.070
position again we need to check for the max heap property of the 

205
00:10:51.070 --> 00:10:52.160
swapped Index 

206
00:10:52.460 --> 00:10:56.690
So call heapify again bypassing array max and 

207
00:10:56.690 --> 00:10:57.250
size 

208
00:10:57.940 --> 00:11:01.610
So here index equal to five and size equel to 

209
00:11:01.610 --> 00:11:03.130
six let us 

210
00:11:03.130 --> 00:11:06.520
First find the left and right Children of node at 

211
00:11:06.520 --> 00:11:10.370
this index so left equal to two INDO Index plus 

212
00:11:10.370 --> 00:11:13.920
one that this two Indo five plus one which is 

213
00:11:13.930 --> 00:11:17.400
11 and right equal to left plus one that is 

214
00:11:17.400 --> 00:11:21.220
12 and set max equal to index that is five 

215
00:11:21.230 --> 00:11:21.550
now 

216
00:11:22.140 --> 00:11:25.540
Now chek if left and right child is greater than 

217
00:11:25.550 --> 00:11:26.250
this node 

218
00:11:26.740 --> 00:11:29.520
So we have if left less than or equal to 

219
00:11:29.520 --> 00:11:33.480
size and arr  of left greater than arr  of max 

220
00:11:34.040 --> 00:11:36.170
But this fails as left 

221
00:11:36.180 --> 00:11:38.950
11 is not less than or equal to size 

222
00:11:38.960 --> 00:11:39.650
Six 

223
00:11:40.240 --> 00:11:44.280
So check the next if it also fails since right index 

224
00:11:44.280 --> 00:11:47.330
12 is also not less than or equal to size

225
00:11:48.040 --> 00:11:48.700
now chek 

226
00:11:48.710 --> 00:11:52.230
If Max was updated and it was not so if 

227
00:11:52.230 --> 00:11:56.920
failed again and the function is completed and control gets 

228
00:11:56.920 --> 00:12:01.110
back to built heap function and here in next iteration 

229
00:12:01.430 --> 00:12:05.070
i is equal to one and heapify is called 

230
00:12:05.080 --> 00:12:09.390
bypassing array  arr i equal to one and size equal to 

231
00:12:09.390 --> 00:12:09.950
six 

232
00:12:10.440 --> 00:12:14.000
So here index equal to one and size equal to 

233
00:12:14.000 --> 00:12:14.450
six 

234
00:12:15.140 --> 00:12:18.590
Now let us find the left and right Children of node 

235
00:12:18.680 --> 00:12:19.760
at this Index 

236
00:12:20.440 --> 00:12:23.770
So left equal to two indo index plus one that is 

237
00:12:23.770 --> 00:12:27.150
two into one plus one which is three and right 

238
00:12:27.150 --> 00:12:29.450
equal to left plus one which is four 

239
00:12:30.440 --> 00:12:33.390
And as we said initially we will keep the max 

240
00:12:33.390 --> 00:12:35.150
and index at the same position 

241
00:12:35.640 --> 00:12:38.890
So Max equal to index one that is we are 

242
00:12:38.900 --> 00:12:42.470
assuming that this sub tree satisfies the heap property 

243
00:12:42.750 --> 00:12:47.360
And this value at this node is the maximum value 

244
00:12:47.480 --> 00:12:49.400
So now Max equal to one 

245
00:12:49.470 --> 00:12:52.680
And now check If left child is greater than this 

246
00:12:52.680 --> 00:12:53.050
node 

247
00:12:53.540 --> 00:12:56.850
And here we have three less than size and 30 

248
00:12:56.850 --> 00:13:00.930
greater than 20 that is the left child is greater 

249
00:13:00.930 --> 00:13:01.840
than parent 

250
00:13:02.110 --> 00:13:06.080
So update Max and Max equal left Now that 

251
00:13:06.080 --> 00:13:10.760
is three now chek if right child is greater than Max 

252
00:13:11.140 --> 00:13:14.220
So we have if right less than or equal to 

253
00:13:14.220 --> 00:13:18.250
size and arr  of right greater than arr  of Max 

254
00:13:18.940 --> 00:13:21.510
and we have four less than size 

255
00:13:21.520 --> 00:13:23.400
So first conditions satisfy 

256
00:13:23.670 --> 00:13:26.420
And next we have 20 greater than 30 

257
00:13:26.600 --> 00:13:28.550
So that is also satisfied 

258
00:13:28.940 --> 00:13:33.050
That is right Child is greater than current Max value 

259
00:13:33.440 --> 00:13:35.050
so it should be updated 

260
00:13:35.840 --> 00:13:40.150
So Set Max equal to right that is four and 

261
00:13:40.150 --> 00:13:40.510
see 

262
00:13:40.520 --> 00:13:43.660
Now we have the maximum value of this sub tree 

263
00:13:43.790 --> 00:13:45.660
at Max now 

264
00:13:45.660 --> 00:13:46.100
check 

265
00:13:46.110 --> 00:13:49.630
If Max was updated that is max was initially set 

266
00:13:49.640 --> 00:13:51.320
to index now check 

267
00:13:51.330 --> 00:13:54.540
If Max and Index are the same and it is 

268
00:13:54.540 --> 00:13:59.460
not that means we have to perform swap operation since 

269
00:13:59.460 --> 00:14:03.350
we have found a greater element at child position 

270
00:14:03.940 --> 00:14:08.390
So swap elements at Max and Index that is 80 

271
00:14:08.400 --> 00:14:09.760
and 20 

272
00:14:09.770 --> 00:14:13.150
So now the maximum element is at the root position 

273
00:14:13.740 --> 00:14:16.670
Again we need to check for the max heap property of 

274
00:14:16.680 --> 00:14:17.900
the swapped index 

275
00:14:18.440 --> 00:14:21.420
so call heapify again by passing away 

276
00:14:21.430 --> 00:14:22.950
max and size 

277
00:14:23.440 --> 00:14:27.310
So here index equal to four and size equal to 

278
00:14:27.310 --> 00:14:27.850
six 

279
00:14:28.540 --> 00:14:32.250
Let us first find the left and right Children of 

280
00:14:32.260 --> 00:14:36.360
the node at this Index so Left equal to two INDO 

281
00:14:36.370 --> 00:14:39.820
index plus one that is two into four plus one 

282
00:14:40.020 --> 00:14:43.650
which is nine and right equal to left plus one 

283
00:14:43.710 --> 00:14:48.070
that is 10 and now set max equal to index 

284
00:14:48.080 --> 00:14:53.140
That is four now check if any child is greater 

285
00:14:53.140 --> 00:14:54.050
than parent 

286
00:14:54.540 --> 00:14:57.460
So we have if left less than or equal to 

287
00:14:57.460 --> 00:15:01.450
size and arr  of left greater than arr  of max 

288
00:15:01.940 --> 00:15:03.740
But it fails as left 

289
00:15:03.750 --> 00:15:07.480
Nine is not less than or equal to size so 

290
00:15:07.480 --> 00:15:11.340
check the next if it also fails since right index 

291
00:15:11.340 --> 00:15:15.060
ten is also not less than or equal to size 

292
00:15:15.640 --> 00:15:16.230
Now Chek 

293
00:15:16.240 --> 00:15:19.490
If Max was updated and it was not so it 

294
00:15:19.490 --> 00:15:23.620
fails and the function is now completely executed and controlled 

295
00:15:23.620 --> 00:15:25.550
gets back to build heap function 

296
00:15:26.140 --> 00:15:30.980
And here in next iteration i is equal to zero and 

297
00:15:30.980 --> 00:15:34.160
heapify is called by passing array arr 

298
00:15:34.550 --> 00:15:37.480
I equal to zero and size equal to six 

299
00:15:38.040 --> 00:15:41.900
So here index equal to zero and size equal to 

300
00:15:41.900 --> 00:15:42.450
six 

301
00:15:43.140 --> 00:15:46.490
Let us first find the left and right child of 

302
00:15:46.500 --> 00:15:50.840
node at this index the left equal to two Indu 

303
00:15:50.840 --> 00:15:54.580
index plus one that is two indu zero plus one 

304
00:15:54.580 --> 00:15:57.960
which is one and right equal to left plus one 

305
00:15:58.050 --> 00:15:58.950
that is two 

306
00:15:59.840 --> 00:16:02.910
And as we set first we are assuming that this 

307
00:16:02.910 --> 00:16:05.250
sub tree satisfies the heap property 

308
00:16:05.640 --> 00:16:09.050
So keep Max and Index at the same position 

309
00:16:09.540 --> 00:16:12.420
And if any child is greater than parent we will 

310
00:16:12.430 --> 00:16:13.570
update Max 

311
00:16:14.040 --> 00:16:17.350
So finally if Max and index are different we have to 

312
00:16:17.350 --> 00:16:19.050
performs swap operation 

313
00:16:19.640 --> 00:16:21.850
So right now Max equal to zero 

314
00:16:22.600 --> 00:16:26.240
Now Chek if left child is greater than this node 

315
00:16:26.500 --> 00:16:29.620
So we have if left less than or equal to 

316
00:16:29.620 --> 00:16:32.850
size and arr  of left greater than Max 

317
00:16:33.340 --> 00:16:36.600
And we have one less than size and 80 greater 

318
00:16:36.600 --> 00:16:37.040
than 10

319
00:16:37.740 --> 00:16:41.650
So left child is greater than parent so update Max 

320
00:16:42.140 --> 00:16:43.520
Max equal to left 

321
00:16:43.520 --> 00:16:47.820
Now that is one now chek if right child is 

322
00:16:47.820 --> 00:16:51.510
greater than Max So we have if right less than or 

323
00:16:51.510 --> 00:16:55.250
equal to size and arr  of right greater than arr  

324
00:16:55.250 --> 00:16:59.630
of Max and we have two less than size But 

325
00:16:59.640 --> 00:17:02.150
60 is not greater than 80 

326
00:17:02.540 --> 00:17:06.200
So if fails and see now we have the maximum 

327
00:17:06.200 --> 00:17:08.950
value of this sub tree at Max 

328
00:17:09.540 --> 00:17:14.640
Now chek If Max was updated that is Max was 

329
00:17:14.650 --> 00:17:19.040
initially set to index now check If Max and index are 

330
00:17:19.040 --> 00:17:22.670
the same but max equal to two and index equal 

331
00:17:22.670 --> 00:17:24.650
to zero So it is not the same 

332
00:17:25.140 --> 00:17:29.240
So if conditions is true now so swap elements at 

333
00:17:29.240 --> 00:17:32.660
Max and Index that is 80 and 10 

334
00:17:33.440 --> 00:17:37.610
Now the maximum element is at the root position Again 

335
00:17:37.610 --> 00:17:40.260
we need to check for the max heap property for the 

336
00:17:40.260 --> 00:17:41.350
swapped Index 

337
00:17:41.840 --> 00:17:45.710
So call heapify again bypassing array Max and 

338
00:17:45.710 --> 00:17:46.260
size 

339
00:17:46.740 --> 00:17:50.290
So here index equal to one and size equal to 

340
00:17:50.290 --> 00:17:50.850
six 

341
00:17:51.440 --> 00:17:54.310
now let us find The left and right child of the 

342
00:17:54.310 --> 00:17:58.080
node at this index so left equal to two indu 

343
00:17:58.080 --> 00:18:01.500
index plus one that is two into one plus one 

344
00:18:01.500 --> 00:18:05.080
which is three and right equal to left plus one 

345
00:18:05.090 --> 00:18:09.330
that is four now set max equal to index That 

346
00:18:09.330 --> 00:18:13.360
is one now chek if left and right child is 

347
00:18:13.360 --> 00:18:17.490
greater than this node So we have if left less 

348
00:18:17.490 --> 00:18:20.890
than or equal to size an arr  of left greater than 

349
00:18:20.900 --> 00:18:25.350
arr  of max and left three is less than size 

350
00:18:25.740 --> 00:18:29.200
and arr of left 30 is greater than an arr  of 

351
00:18:29.210 --> 00:18:33.320
max 10 So update Max that is set Max to 

352
00:18:33.320 --> 00:18:36.790
left that is three now chek the right child 

353
00:18:36.920 --> 00:18:41.290
We have right four less than size but arr  of 

354
00:18:41.290 --> 00:18:45.950
right 20 is not greater than arr  of max 30 

355
00:18:46.340 --> 00:18:48.560
So if fails now chek 

356
00:18:48.570 --> 00:18:52.700
If Max was updated and it was so swap elements 

357
00:18:52.710 --> 00:18:56.170
at Max and Index and again we need to check 

358
00:18:56.170 --> 00:18:59.160
for Max heap property for the Swapped Index 

359
00:18:59.640 --> 00:19:00.480
So call heapify 

360
00:19:00.480 --> 00:19:04.170
again bypassing array max and size 

361
00:19:05.040 --> 00:19:08.130
So here index equal to three and size equal to 

362
00:19:08.130 --> 00:19:08.660
six 

363
00:19:09.540 --> 00:19:12.590
Now let us find the left and right child of the 

364
00:19:12.590 --> 00:19:16.390
node at this index so left equal to two Indo 

365
00:19:16.390 --> 00:19:19.380
Index plus one that is two into three plus one 

366
00:19:19.380 --> 00:19:22.730
which is seven and right equal to left plus one 

367
00:19:22.740 --> 00:19:27.030
that is eight and set max equal to index that 

368
00:19:27.030 --> 00:19:28.160
is Tree 

369
00:19:28.640 --> 00:19:31.740
Now Chek if left and right child is greater than 

370
00:19:31.750 --> 00:19:32.450
this node 

371
00:19:33.140 --> 00:19:37.900
But if fails as left seven is not Less than or equal to 

372
00:19:37.900 --> 00:19:41.150
size and the next if also fails 

373
00:19:41.160 --> 00:19:45.260
Since right Index eight is also not less than or 

374
00:19:45.260 --> 00:19:50.350
equal to size and the next if also fails since 

375
00:19:50.350 --> 00:19:55.270
Max was not updated so the function is completed now 

376
00:19:55.280 --> 00:19:58.320
and control gets back to built heap and in the 

377
00:19:58.320 --> 00:20:02.960
next iteration i equal to minus one and the condition I 

378
00:20:02.970 --> 00:20:06.270
greater than or equal to zero fails and control comes 

379
00:20:06.280 --> 00:20:07.210
out of the for 

380
00:20:07.210 --> 00:20:08.640
Loop and see 

381
00:20:08.920 --> 00:20:13.260
Now this complete tree exactly satisfies the max heap property 

382
00:20:13.740 --> 00:20:17.650
The maximum Element 80 is present at the root and 

383
00:20:17.660 --> 00:20:21.350
every sub trees root value this maximum of its Children 

384
00:20:22.140 --> 00:20:24.850
So that is how we can construct a binary heap 

385
00:20:24.860 --> 00:20:25.650
from an array 

386
00:20:26.240 --> 00:20:28.430
We learned how to construct a heap

387
00:20:28.440 --> 00:20:31.570
We have to find the bottom most sub tree and 

388
00:20:31.570 --> 00:20:34.560
from the bottom most sub tree to top we have 

389
00:20:34.570 --> 00:20:37.050
to check and satisfy the heap property 

390
00:20:37.540 --> 00:20:39.180
That is for Max heap 

391
00:20:39.190 --> 00:20:42.360
The parent should be greater than its Children and from 

392
00:20:42.360 --> 00:20:42.960
min heap 

393
00:20:42.960 --> 00:20:46.670
The parent should be smaller than its Children and we 

394
00:20:46.680 --> 00:20:48.830
also learned how to implement it 

395
00:20:49.150 --> 00:20:52.050
And in implementation we have two functions 

396
00:20:52.440 --> 00:20:55.620
First build heap which will call the heapify 

397
00:20:55.620 --> 00:20:59.210
function to satisfy the heap property from the bottom 

398
00:20:59.210 --> 00:21:02.980
Most node and the heapify function will find the 

399
00:21:02.980 --> 00:21:06.140
left and right nodes and arranges it based on the 

400
00:21:06.140 --> 00:21:07.050
heap property 

401
00:21:07.840 --> 00:21:11.190
And finally we will have the complete tree which satisfies 

402
00:21:11.190 --> 00:21:12.430
the heap property 

403
00:21:12.710 --> 00:21:13.660
So that's all 

404
00:21:14.040 --> 00:21:16.440
And in the next video we will learn how to remove the max element from the max element.

