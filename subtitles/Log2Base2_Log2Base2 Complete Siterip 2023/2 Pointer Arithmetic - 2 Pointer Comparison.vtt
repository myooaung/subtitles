WEBVTT

1
00:00:00.940 --> 00:00:03.930
Hi friends in this video let us discuss about 

2
00:00:03.930 --> 00:00:04.710
Pointer comparison 

3
00:00:11.140 --> 00:00:13.969
So the first comparison operator that we are going to 

4
00:00:13.970 --> 00:00:19.860
discuss is equality operator and the Equality operator is ==

5
00:00:18.360 --> 00:00:19.860


6
00:00:19.860 --> 00:00:23.020
it checks whether a pointer points to NULL or two pointer 

7
00:00:23.020 --> 00:00:25.120
is pointing the same memory location 

8
00:00:25.130 --> 00:00:28.400
See an example programme here. First we have an 

9
00:00:28.400 --> 00:00:29.930
integer array of five elements 

10
00:00:29.940 --> 00:00:32.320
10 20 30 40 and 50 

11
00:00:33.140 --> 00:00:35.550
Now we declare an integer pointer p 

12
00:00:35.940 --> 00:00:39.269
Now we set p = NULL. So p  has NULL value now. 

13
00:00:39.270 --> 00:00:42.470
Now we have an if condition, if p=NULL

14
00:00:42.470 --> 00:00:43.900
which is true 

15
00:00:43.910 --> 00:00:45.090
So we get the output 

16
00:00:45.100 --> 00:00:46.790
p is NULL.

17
00:00:46.800 --> 00:00:50.700
Now let us discuss about not equal operator which is !=

18
00:00:50.700 --> 00:00:54.089
In many cases this is very useful 

19
00:00:54.090 --> 00:00:57.960
because accessing NULL pointer causes undefined behaviour 

20
00:00:58.080 --> 00:01:00.580
So we need to do null check before using the 

21
00:01:00.580 --> 00:01:01.199
pointer 

22
00:01:01.530 --> 00:01:04.320
See this example we have the same array created and 

23
00:01:04.320 --> 00:01:07.490
we declare pointer p. Now we assign the base address 

24
00:01:07.490 --> 00:01:10.140
of array to p. Now we have the if condition

25
00:01:10.140 --> 00:01:13.650
If p not equal to NULL which is true 

26
00:01:13.800 --> 00:01:16.780
So we get the output arr[0] equal to 10 

27
00:01:16.780 --> 00:01:17.160


28
00:01:17.640 --> 00:01:20.949
The other comparison operators are less than, less than or equal to

29
00:01:20.950 --> 00:01:23.890
 greater than and greater than or equal to 

30
00:01:24.070 --> 00:01:25.160
Let us understand it 

31
00:01:25.160 --> 00:01:26.140
Using the example 

32
00:01:26.140 --> 00:01:26.640
Programme 

33
00:01:26.990 --> 00:01:29.500
First we create the array with five elements 

34
00:01:29.510 --> 00:01:31.050
Now we create two integer

35
00:01:31.050 --> 00:01:32.670
pointers P and Q 

36
00:01:33.840 --> 00:01:36.350
Now we assign arr[0] to P

37
00:01:36.360 --> 00:01:39.990
and arr[2] to Q. So P has 1024 and 

38
00:01:39.990 --> 00:01:41.610
Q has 1032 

39
00:01:42.340 --> 00:01:44.179
Now we have the if condition 

40
00:01:44.290 --> 00:01:45.720
If P less than Q 

41
00:01:45.720 --> 00:01:46.520
Which is true 

42
00:01:46.600 --> 00:01:47.670
So we get the output 

43
00:01:47.670 --> 00:01:49.020
Q is ahead of P 

44
00:01:49.540 --> 00:01:52.640
Similarly we can use other comparison operators also 

45
00:01:52.650 --> 00:01:56.240
But all these are meaningful only when they both point 

46
00:01:56.240 --> 00:01:57.830
to the elements of this same array

47
00:01:57.840 --> 00:02:01.140
Now let us discuss about subtracting two pointers 

48
00:02:01.330 --> 00:02:03.929
When we subtract two pointers it will print the 

49
00:02:03.930 --> 00:02:07.580
number of blocks present in between those two pointers 

50
00:02:08.440 --> 00:02:12.120
Again we are creating the array with elements 10 20 30 

51
00:02:12.120 --> 00:02:13.180
40 and 50 

52
00:02:13.440 --> 00:02:16.000
Now we create two integer pointers  P and Q

53
00:02:16.000 --> 00:02:16.380


54
00:02:16.670 --> 00:02:20.090
Now we assign arr[0]  to P and arr[2] to Q

55
00:02:20.100 --> 00:02:24.730
So P has 1024 and Q has 1032 now.

56
00:02:24.730 --> 00:02:28.500
Now we subtract P from Q and we get 2

57
00:02:28.510 --> 00:02:31.120
since we have two blocks to reach P and 

58
00:02:31.130 --> 00:02:32.100
it will be printed 

59
00:02:32.540 --> 00:02:35.920
Now we subtract  Q from P and we get negative 

60
00:02:35.920 --> 00:02:37.060
value -2

61
00:02:37.070 --> 00:02:40.350
Since P has a smaller address than Q and it 

62
00:02:40.350 --> 00:02:41.079
will be printed 

63
00:02:41.090 --> 00:02:44.030
So these are the major comparison operators that work on 

64
00:02:44.030 --> 00:02:44.730
pointers 

65
00:02:45.540 --> 00:02:47.829
So that's all and thank you for watching this video 

