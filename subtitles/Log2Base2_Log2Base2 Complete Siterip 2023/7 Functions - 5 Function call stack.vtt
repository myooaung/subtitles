WEBVTT

1
00:00:00.740 --> 00:00:01.400
Hi friends 

1
00:00:01.400 --> 00:00:03.100
In this video we are going to learn 

2
00:00:03.100 --> 00:00:03.960
about function 

3
00:00:03.960 --> 00:00:04.830
call stack 

4
00:00:12.840 --> 00:00:16.580
Firstly let us see how function calls are handled inside 

5
00:00:16.580 --> 00:00:18.640
the memory. In C programming 

6
00:00:18.640 --> 00:00:22.680
we have four major memory sections in RAM. First text or 

7
00:00:22.680 --> 00:00:26.910
code section, second global/ static section, third heap section 

8
00:00:26.910 --> 00:00:30.050
and fourth stack section. In text section 

9
00:00:30.140 --> 00:00:33.400
we have the read only executable programming instructions which 

10
00:00:33.400 --> 00:00:34.640
cannot be modified.

11
00:00:34.860 --> 00:00:37.900
In global section we will have all the global and 

12
00:00:37.900 --> 00:00:39.060
static variables. 

13
00:00:39.120 --> 00:00:42.890
Dynamic memory allocation happens in heap memory section 

14
00:00:43.090 --> 00:00:45.900
that is, if we allocate memory using malloc or 

15
00:00:45.900 --> 00:00:46.110
calloc

16
00:00:46.110 --> 00:00:47.320
at run time 

17
00:00:47.530 --> 00:00:50.940
those allocations will happen in the heap section and 

18
00:00:50.940 --> 00:00:54.610
finally all the local variables and function calls are created 

19
00:00:54.620 --> 00:00:55.850
in the stack section. 

20
00:00:56.540 --> 00:00:58.760
Now consider this C code,

21
00:00:58.760 --> 00:01:01.900
first we have an integer variable declared globally so it is 

22
00:01:01.900 --> 00:01:05.039
placed in the global section and we have studied that 

23
00:01:05.040 --> 00:01:08.520
global variables are initialised with zero by default. 

24
00:01:08.590 --> 00:01:12.290
So the variable result will have the value zero. Next 

25
00:01:12.290 --> 00:01:15.900
main function will be executed first and as we discussed 

26
00:01:15.910 --> 00:01:18.680
all the function calls will be placed in the stack 

27
00:01:18.680 --> 00:01:22.030
section so the main function will be pushed into the 

28
00:01:22.030 --> 00:01:25.770
stack and the local variables a=10 and b=20

29
00:01:25.770 --> 00:01:29.110
will be created in the stack section inside 

30
00:01:29.110 --> 00:01:30.150
the main function 

31
00:01:30.540 --> 00:01:33.610
Now we are calling the same function with arguments a

32
00:01:33.610 --> 00:01:34.510
and b

33
00:01:34.520 --> 00:01:37.730
The new function call will be pushed into the stack 

34
00:01:37.890 --> 00:01:41.630
The stack operates on last in first out principle so the 

35
00:01:41.630 --> 00:01:45.320
main function's execution will be stopped and the lastly inserted 

36
00:01:45.320 --> 00:01:47.250
sum function will be executed. 

37
00:01:47.540 --> 00:01:51.460
Here we have the parameters x and y having the copies 

38
00:01:51.460 --> 00:01:54.700
of a and b so x=10 and 

39
00:01:54.700 --> 00:01:55.979
y= 20 

40
00:01:56.120 --> 00:02:00.220
Next we have int ans = x+y so 

41
00:02:00.230 --> 00:02:03.509
a new integer variable ans will be created inside the 

42
00:02:03.510 --> 00:02:07.350
sum function and result 30 will be stored 

43
00:02:07.640 --> 00:02:10.829
Now we return ans to main and the value 30 

44
00:02:10.830 --> 00:02:13.630
will be stored in the global variable result 

45
00:02:13.840 --> 00:02:17.109
Now the function sum is executed completely and it will 

46
00:02:17.110 --> 00:02:20.000
be popped out of stack that is discarded from the 

47
00:02:20.000 --> 00:02:20.520
memory 

48
00:02:20.940 --> 00:02:22.690
Next we have a print statement 

49
00:02:22.700 --> 00:02:25.290
So what is a printf actually? it is an inbuilt

50
00:02:25.290 --> 00:02:28.310
function so it will also be pushed into the stack 

51
00:02:28.400 --> 00:02:31.570
Now it will work and print result equal to 30 

52
00:02:31.580 --> 00:02:34.230
and it is completed now so it will be popped 

53
00:02:34.240 --> 00:02:35.530
out of the stack 

54
00:02:35.540 --> 00:02:38.430
Now the main function's execution will be resumed and it 

55
00:02:38.430 --> 00:02:42.890
will execute the return zero statement Now the main function's 

56
00:02:42.890 --> 00:02:44.220
task is also over 

57
00:02:44.230 --> 00:02:47.240
So it will also be popped out from the stack 

58
00:02:47.390 --> 00:02:50.310
This is how program execution happens When we run the 

59
00:02:50.310 --> 00:02:54.140
programme. Now let us see another programme execution begins from 

60
00:02:54.140 --> 00:02:56.740
the main function so it will be pushed into the 

61
00:02:56.740 --> 00:02:57.280
stack 

62
00:02:57.440 --> 00:03:00.489
and in main we create the local variable ans and 

63
00:03:00.490 --> 00:03:04.829
call cube(5) So cube is a user defined function 

64
00:03:04.900 --> 00:03:07.950
it is called here so control is passed to it 

65
00:03:07.950 --> 00:03:10.230
so it will be pushed into the stack 

66
00:03:11.440 --> 00:03:14.200
now in cube we have the parameter n, and it 

67
00:03:14.200 --> 00:03:15.520
will have value five 

68
00:03:15.930 --> 00:03:18.720
now we create a local integer variable c and we 

69
00:03:18.720 --> 00:03:21.710
have n x square(n) that is  

70
00:03:21.720 --> 00:03:23.640
c = 5 x square(5)

71
00:03:24.640 --> 00:03:27.660
so we are calling another function square 

72
00:03:27.670 --> 00:03:30.350
so it is pushed onto the stack and we have 

73
00:03:30.350 --> 00:03:34.140
the parameter n and so a local variable n created and 

74
00:03:34.140 --> 00:03:37.130
it will have the value five next we create an  

75
00:03:37.130 --> 00:03:40.200
integer variable s and find n x n that is 

76
00:03:40.200 --> 00:03:43.550
five x five which is 25 & will be stored in 

77
00:03:43.560 --> 00:03:47.049
s next we return s to calling function cube

78
00:03:47.140 --> 00:03:49.540
and now it will be popped out of stock 

79
00:03:49.550 --> 00:03:52.410
now in cube function we have c = 5 x 25

80
00:03:52.410 --> 00:03:55.730
we get 125 and it will be 

81
00:03:55.730 --> 00:03:56.799
stored in c

82
00:03:56.810 --> 00:03:59.549
and in next statement we are returning it to main

83
00:03:59.560 --> 00:04:02.619
so function cube is also popped out of this tack 

84
00:04:03.240 --> 00:04:06.230
now in main we call printf function so it will 

85
00:04:06.230 --> 00:04:08.880
be pushed onto the stack and it will print value(cube(5)) 

86
00:04:08.880 --> 00:04:13.140
which is 125 and immediately popped 

87
00:04:13.150 --> 00:04:14.360
out of this stack 

88
00:04:14.620 --> 00:04:17.710
Now in main function we return zero and it is 

89
00:04:17.710 --> 00:04:20.810
also completed and will be popped out from the stack 

90
00:04:20.820 --> 00:04:22.850
So this is how it works 

91
00:04:24.540 --> 00:04:26.810
So that's all and thank you for watching this video 

