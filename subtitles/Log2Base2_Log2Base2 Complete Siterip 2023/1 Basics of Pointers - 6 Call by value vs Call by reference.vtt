WEBVTT

1
00:00:00.240 --> 00:00:00.899
hi friends 

2
00:00:00.910 --> 00:00:03.190
In this video we are going to discuss about two 

3
00:00:03.190 --> 00:00:07.060
major parameter passing methods call by value and call by reference

4
00:00:11.460 --> 00:00:16.600
First let us discuss about call by value method 

5
00:00:16.780 --> 00:00:19.930
So consider the simple C programme we have the main 

6
00:00:19.930 --> 00:00:23.610
function and a user defined function set and as we 

7
00:00:23.610 --> 00:00:26.360
know programme execution begins from the main function 

8
00:00:26.370 --> 00:00:29.689
So in main, first we have an integer variable declaration 

9
00:00:29.690 --> 00:00:31.180
for a. Suppose 

10
00:00:31.180 --> 00:00:34.900
It is created at address 1024 and assigning the value 

11
00:00:34.910 --> 00:00:35.680
10 to it 

12
00:00:36.140 --> 00:00:39.060
Next we have a prinnt statement which prints before calling 

13
00:00:39.060 --> 00:00:42.160
function a equal to and prints the value of a 

14
00:00:42.170 --> 00:00:42.949
which is 10 

15
00:00:43.440 --> 00:00:47.620
Next we're calling function set by passing a. So control 

16
00:00:47.620 --> 00:00:51.160
goes to function definition and there we have the parameter 

17
00:00:51.170 --> 00:00:55.330
int a. So another local integer variable a is created

18
00:00:55.410 --> 00:00:57.800
and the value we passed which is 10 will be 

19
00:00:57.800 --> 00:01:01.170
stored in it and suppose it is created at address 

20
00:01:01.180 --> 00:01:02.090
2024

21
00:01:02.090 --> 00:01:06.050
Now this is very important that both these variables 

22
00:01:06.060 --> 00:01:07.340
are entirely different 

23
00:01:07.350 --> 00:01:10.580
They have the same name but they are different. This 

24
00:01:10.580 --> 00:01:14.410
new 'a' created is having scope within function set and 

25
00:01:14.410 --> 00:01:18.550
the 'a' at address 1024 has scope within main function 

26
00:01:19.440 --> 00:01:21.750
Now we set 'a' equal to zero 

27
00:01:21.840 --> 00:01:25.760
So the 'a' at address 2024 will be accessed and 

28
00:01:25.760 --> 00:01:29.300
set to 0 and it has no effect on variable 'a'

29
00:01:29.310 --> 00:01:30.450
of the main function 

30
00:01:30.840 --> 00:01:34.570
Now we print in set function 'a' equal to and prints the

31
00:01:34.570 --> 00:01:36.200
value of 'a' which is zero 

32
00:01:36.460 --> 00:01:39.010
Now we return to main function and we have a 

33
00:01:39.010 --> 00:01:43.140
print statement which prints after calling function a equal to and 

34
00:01:43.140 --> 00:01:46.250
prints the value of 'a' which is 10 again because 

35
00:01:46.250 --> 00:01:49.750
the modification made has no effect on this 'a'. 

36
00:01:49.750 --> 00:01:52.220
So this is call by value parameter passing method.

37
00:01:52.260 --> 00:01:55.460
If we use call by value then any change made 

38
00:01:55.460 --> 00:01:58.080
in the called function will not reflect in the calling 

39
00:01:58.080 --> 00:01:58.649
function 

40
00:01:59.240 --> 00:02:01.960
Now let us discuss about call by reference 

41
00:02:01.960 --> 00:02:05.300
parameter passing method. Again let us explained the method using 

42
00:02:05.300 --> 00:02:05.920
a programme 

43
00:02:06.020 --> 00:02:08.700
So here also we have the main function and 

44
00:02:08.710 --> 00:02:13.180
user defined function set. So execution begins from main and first 

45
00:02:13.180 --> 00:02:16.350
statement is declaring a and initialising it to 10 

46
00:02:16.540 --> 00:02:19.750
Suppose it was created at address 1024 

47
00:02:19.940 --> 00:02:22.450
Now we print the value of a before calling the 

48
00:02:22.450 --> 00:02:22.910
function 

49
00:02:22.920 --> 00:02:24.310
So 10 will be printed 

50
00:02:24.570 --> 00:02:28.100
Now we're calling the Function set by passing the address of a

51
00:02:28.110 --> 00:02:31.560
 that is 1024 will be passed which is a

52
00:02:31.560 --> 00:02:33.850
reference to the actual location of a.

53
00:02:34.340 --> 00:02:37.890
Now control goes to function set and there we have 

54
00:02:37.890 --> 00:02:39.670
the parameter int *a

55
00:02:39.680 --> 00:02:41.350
That is an integer pointer 

56
00:02:41.360 --> 00:02:46.070
So a local  integer pointer is created at address 2024 

57
00:02:46.290 --> 00:02:48.030
will have the value 1024 

58
00:02:48.030 --> 00:02:51.020
Now we have *a equal to zero 

59
00:02:51.230 --> 00:02:55.119
That is value at 'a' that is value at 1024 is 

60
00:02:55.120 --> 00:02:55.880
set to zero 

61
00:02:56.540 --> 00:03:00.140
So we go to this address 1024 and set the 

62
00:03:00.140 --> 00:03:01.150
value to zero 

63
00:03:01.460 --> 00:03:04.260
Now we print *a or the value of a 

64
00:03:04.260 --> 00:03:06.230
in function set which is zero 

65
00:03:06.740 --> 00:03:09.329
Now we return to main function and print the value 

66
00:03:09.330 --> 00:03:12.649
of 'a' there. Again we will get zero there because 

67
00:03:12.650 --> 00:03:15.620
the function set had the address of this 'a' and 

68
00:03:15.620 --> 00:03:18.350
it directly came here and made the modification 

69
00:03:18.590 --> 00:03:21.980
So if we pass the parameter by reference any change 

70
00:03:21.980 --> 00:03:24.400
made in the called function will be reflected in the 

71
00:03:24.400 --> 00:03:25.570
calling function also 

72
00:03:26.240 --> 00:03:29.310
Now let us take an interesting example to differentiate these 

73
00:03:29.310 --> 00:03:30.030
two methods 

74
00:03:30.210 --> 00:03:31.670
So we have two functions 

75
00:03:31.680 --> 00:03:33.590
Function1 and function2

76
00:03:33.790 --> 00:03:36.820
And we have a juice bottle in function1. 

77
00:03:36.830 --> 00:03:37.870
Now in call by value 

78
00:03:37.880 --> 00:03:40.790
We only pass a copy of this bottle to function 2

79
00:03:40.800 --> 00:03:41.130
 

80
00:03:41.250 --> 00:03:44.209
So any change made to this copy in function2 will 

81
00:03:44.210 --> 00:03:47.960
not reflect in Bottle in function1. But in call 

82
00:03:47.960 --> 00:03:50.920
by reference we are passing a reference and giving access 

83
00:03:50.920 --> 00:03:52.160
to the original bottle 

84
00:03:52.390 --> 00:03:55.049
So any change made to the bottle will be reflected 

85
00:03:55.050 --> 00:03:56.450
in function1 also 

86
00:03:57.140 --> 00:03:59.430
So that's all and thank you for watching this video 

