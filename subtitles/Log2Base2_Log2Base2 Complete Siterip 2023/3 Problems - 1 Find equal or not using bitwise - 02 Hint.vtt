WEBVTT

1
00:00:00.340 --> 00:00:03.680
So which bitwise operator can we use to check 

2
00:00:03.680 --> 00:00:07.320
if two numbers are equal or not. See the truth table 

3
00:00:07.320 --> 00:00:09.190
of bitwise XOR operator 

4
00:00:09.190 --> 00:00:09.540
Here 

5
00:00:09.970 --> 00:00:13.410
If A and B are zero then A xor B 

6
00:00:13.420 --> 00:00:16.720
is equal to zero. if A equal to zero and 

7
00:00:16.720 --> 00:00:19.840
B equal to one, then A xor B is equal to one.

8
00:00:19.840 --> 00:00:22.920
if A equal to one and B equal to zero.

9
00:00:22.920 --> 00:00:26.510
then A xor B equal to one and 

10
00:00:26.520 --> 00:00:29.830
if A equal to B equal to one, then A xor B

11
00:00:29.830 --> 00:00:30.750
equal to zero 

12
00:00:31.340 --> 00:00:35.300
So if we observe, we can clearly understand that, 

13
00:00:35.300 --> 00:00:39.660
for the same inputs the output is zero and for different inputs 

14
00:00:39.670 --> 00:00:40.950
the output is one.

15
00:00:41.640 --> 00:00:44.640
And if we have two equal numbers, then their binary 

16
00:00:44.640 --> 00:00:46.750
representation will also be the same 

17
00:00:47.240 --> 00:00:50.120
So for each pair of bit, we will get zero 

18
00:00:50.340 --> 00:00:54.060
Thus we will get all zeros in the result 

19
00:00:54.060 --> 00:00:55.950
which is equivalent  to decimal zero. 

20
00:00:56.440 --> 00:00:59.530
And if there is any different pair, we will get 

21
00:00:59.540 --> 00:01:03.160
bit one somewhere in the result which will not be 

22
00:01:03.160 --> 00:01:04.390
equal to decimal zero. 

23
00:01:05.440 --> 00:01:07.890
So the idea that we are going to use here 

24
00:01:07.890 --> 00:01:11.440
is that if two numbers are equal, then bitwise XOR 

25
00:01:11.450 --> 00:01:13.550
result will be zero. 

26
00:01:14.240 --> 00:01:15.950
So let us see an example 

27
00:01:16.340 --> 00:01:18.650
Let us take the numbers two and two 

28
00:01:19.140 --> 00:01:22.270
We have to check whether these numbers are equal or not

29
00:01:22.270 --> 00:01:26.490
To check that we can perform bitwise XOR 

30
00:01:26.490 --> 00:01:28.300
operation on these numbers. 

31
00:01:28.490 --> 00:01:31.330
And if the result is zero, then the numbers are 

32
00:01:31.340 --> 00:01:31.910
equal.

33
00:01:32.170 --> 00:01:33.550
Otherwise they are not. 

34
00:01:33.940 --> 00:01:36.870
So here we have the same pair of bit at 

35
00:01:36.880 --> 00:01:42.210
every position. So we will get the result 0000

36
00:01:42.210 --> 00:01:46.540
 So we can say these two numbers are equal 

37
00:01:46.550 --> 00:01:47.630
Now take another example 

38
00:01:47.640 --> 00:01:49.290
We have five and two 

39
00:01:49.300 --> 00:01:52.550
We have to check whether these are equal or not. 

40
00:01:53.040 --> 00:01:56.780
So again perform bitwise xor operation on the binary 

41
00:01:56.780 --> 00:01:58.450
equivalents of five and two 

42
00:01:58.940 --> 00:02:04.840
And here we are getting 0111 which is equivalent to 

43
00:02:04.840 --> 00:02:06.900
decimal seven and not zero. 

44
00:02:07.200 --> 00:02:10.150
So we can say these numbers are not equal.

So using this logic you can write the code.