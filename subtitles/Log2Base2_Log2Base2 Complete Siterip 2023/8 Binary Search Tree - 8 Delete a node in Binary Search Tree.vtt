WEBVTT

1
00:00:00.340 --> 00:00:02.920
in this video we are going to learn how to 

2
00:00:02.920 --> 00:00:05.550
delete a node from a binary search tree 

3
00:00:06.140 --> 00:00:10.040
We have to consider three cases while we performed deletion 

4
00:00:10.050 --> 00:00:11.650
in a binary search tree 

5
00:00:11.660 --> 00:00:15.220
Here is an example of a BST and the first 

6
00:00:15.220 --> 00:00:18.140
case is if the node to be deleted is a 

7
00:00:18.150 --> 00:00:18.950
leaf node 

8
00:00:19.440 --> 00:00:22.300
And suppose we have to delete 300 which is a 

9
00:00:22.300 --> 00:00:22.890
leaf node here

10
00:00:22.890 --> 00:00:26.280
 There are no complexities to delete a leaf node 

11
00:00:26.560 --> 00:00:27.940
so simply deleted 

12
00:00:28.140 --> 00:00:30.750
The second case is when we have to delete a 

13
00:00:30.750 --> 00:00:32.550
node with a single child 

14
00:00:33.040 --> 00:00:37.120
Then we can delete that node and it's child takes 

15
00:00:37.130 --> 00:00:38.100
its position 

16
00:00:38.320 --> 00:00:41.550
That is if the node to be deleted has only 

17
00:00:41.560 --> 00:00:43.290
a right child delete 

18
00:00:43.300 --> 00:00:47.090
That node and it's right Child takes its position 

19
00:00:47.100 --> 00:00:49.590
For example let us delete the node 200 

20
00:00:49.840 --> 00:00:52.950
It has only a right child which is 300 

21
00:00:53.140 --> 00:00:58.700
So Delete 200 it's Child 300 takes 200 hundreds Position 

22
00:00:58.710 --> 00:01:01.930
Similarly if the node to be deleted has had left 

23
00:01:01.940 --> 00:01:06.170
child similarly if the node to be deleted has only a left 

24
00:01:06.180 --> 00:01:08.760
child delete the node and it's left 

25
00:01:08.760 --> 00:01:10.740
Child takes that position 

26
00:01:10.750 --> 00:01:14.490
For example let us delete 200 here it has only 

27
00:01:14.490 --> 00:01:18.410
one child 150 which is it's left child so to delete 

28
00:01:18.410 --> 00:01:19.470
200 

29
00:01:19.480 --> 00:01:23.340
We can delete it and 150 takes its position 

30
00:01:23.460 --> 00:01:24.360
like this 

31
00:01:24.370 --> 00:01:26.110
So that was the second case 

32
00:01:26.320 --> 00:01:29.290
The first case is node with no Children 

33
00:01:29.600 --> 00:01:32.450
The second case is node with a single child 

34
00:01:32.740 --> 00:01:35.900
And next is the third case which is obviously a 

35
00:01:35.900 --> 00:01:37.410
node with two Children 

36
00:01:37.420 --> 00:01:40.090
So in that case we have to find the 

37
00:01:40.090 --> 00:01:43.430
inorder successor and replace the node to be deleted with 

38
00:01:43.430 --> 00:01:43.720
it 

39
00:01:43.910 --> 00:01:46.350
see an example node 200 

40
00:01:46.740 --> 00:01:49.480
It has both left child and right child 

41
00:01:49.550 --> 00:01:51.230
So this is our third case 

42
00:01:51.590 --> 00:01:54.750
And what is an inorder successer it will 

43
00:01:54.760 --> 00:01:58.750
be the node that comes immediately after this particular node 

44
00:01:58.760 --> 00:02:00.250
in the inorder Traversal

45
00:02:00.640 --> 00:02:03.100
We can easily find it because it will be the 

46
00:02:03.100 --> 00:02:05.550
minimum value in its right sub tree 

47
00:02:05.600 --> 00:02:08.830
And we know the minimum value of any sub tree 

48
00:02:08.840 --> 00:02:10.950
of binary search tree will be 

49
00:02:10.950 --> 00:02:12.340
It's left most node 

50
00:02:12.350 --> 00:02:15.190
We have learned that so to delete 200 

51
00:02:15.200 --> 00:02:18.100
We have to delete 200 it's in order 

52
00:02:18.100 --> 00:02:22.260
Successor takes that position and which is the inorder 

53
00:02:22.260 --> 00:02:23.650
successor of 200 

54
00:02:24.040 --> 00:02:26.720
It will be the minimum value in right sub tree 

55
00:02:26.750 --> 00:02:28.540
which is 250 here 

56
00:02:28.650 --> 00:02:32.700
So delete 200 250 takes its position 

57
00:02:32.830 --> 00:02:35.410
So now let us see how to implement it in 

58
00:02:35.410 --> 00:02:36.070
Java 

59
00:02:36.080 --> 00:02:37.550
So we have this function 

60
00:02:37.550 --> 00:02:38.320
Remove node 

61
00:02:38.330 --> 00:02:40.960
To do that we will pass the root of the 

62
00:02:40.960 --> 00:02:44.030
tree and value to be deleted and it returns the 

63
00:02:44.030 --> 00:02:45.590
tree after deletion 

64
00:02:45.850 --> 00:02:48.720
So we have public node removed 

65
00:02:48.720 --> 00:02:53.400
node of node root coma int val so let us Divide this 

66
00:02:53.410 --> 00:02:55.950
deletion process into four steps 

67
00:02:56.340 --> 00:02:59.190
First check if the tree is empty 

68
00:02:59.270 --> 00:03:02.050
If not find the node to be deleted 

69
00:03:02.640 --> 00:03:05.870
Once the node to be deleted is found find the 

70
00:03:05.880 --> 00:03:07.150
case applicable 

71
00:03:07.540 --> 00:03:12.540
That is we learnt three cases node with no child 

72
00:03:12.660 --> 00:03:15.050
single child and two Children 

73
00:03:15.540 --> 00:03:19.640
Once the case is identified take appropriate action 

74
00:03:19.740 --> 00:03:21.640
This is what we are going to do 

75
00:03:21.650 --> 00:03:24.050
So here let us delete the node ten 

76
00:03:24.540 --> 00:03:25.650
So first check 

77
00:03:25.660 --> 00:03:29.580
If the tree is empty for that we have if 

78
00:03:29.590 --> 00:03:32.970
root equal to null and if it is written null

79
00:03:32.970 --> 00:03:35.300
But here it is not 

80
00:03:35.440 --> 00:03:37.990
So what is the next step Find a node to 

81
00:03:37.990 --> 00:03:39.570
be deleted here 

82
00:03:39.580 --> 00:03:42.610
Val equal to 10 so we have to find the 

83
00:03:42.610 --> 00:03:44.640
node with the data 10 

84
00:03:44.750 --> 00:03:46.350
Then only we can delete it 

85
00:03:46.590 --> 00:03:49.400
And we know elements list than root will be to 

86
00:03:49.400 --> 00:03:52.250
the left side and larger than root will be to 

87
00:03:52.250 --> 00:03:53.150
the right side 

88
00:03:53.840 --> 00:03:57.110
And here the larger that we're using is we will 

89
00:03:57.110 --> 00:03:57.580
check 

90
00:03:57.590 --> 00:04:00.780
If this node is less than the root then we 

91
00:04:00.780 --> 00:04:03.780
will check in the left sub tree only so called 

92
00:04:03.780 --> 00:04:04.900
the function remove

93
00:04:04.900 --> 00:04:07.180
node for left sub tree only 

94
00:04:07.240 --> 00:04:10.810
And if node is greater than root we will check 

95
00:04:10.870 --> 00:04:14.240
in the right sub tree only so call the function 

96
00:04:14.240 --> 00:04:17.760
Remove node for right sub tree if it is not 

97
00:04:17.870 --> 00:04:20.660
less than or grater than root then the node to 

98
00:04:20.660 --> 00:04:23.840
be deleted is the root so we can proceed with 

99
00:04:23.850 --> 00:04:24.820
our deletion 

100
00:04:24.990 --> 00:04:26.710
So let's see how it works 

101
00:04:27.030 --> 00:04:30.600
We have Val equal to 10 so check if root 

102
00:04:30.600 --> 00:04:34.590
key is less than val 100 is not less than 

103
00:04:34.600 --> 00:04:34.950
val 

104
00:04:35.940 --> 00:04:40.330
So check if root key is greater than val 100 is 

105
00:04:40.330 --> 00:04:44.060
greater than 10 so the value is less than the root 

106
00:04:44.070 --> 00:04:47.110
So we only need to check in the left sub tree 

107
00:04:47.300 --> 00:04:50.980
so call remove node bypassing the left sub tree So 

108
00:04:50.980 --> 00:04:53.820
how do you pass a sub tree To pass a 

109
00:04:53.820 --> 00:04:55.850
tree you can pass its root 

110
00:04:56.240 --> 00:04:58.530
A root has links to all the nodes 

111
00:04:58.650 --> 00:05:01.900
Similarly to pass a sub tree you can pass the 

112
00:05:01.900 --> 00:05:03.660
root of it sub tree 

113
00:05:03.670 --> 00:05:07.470
We have root left equal to remove node of root 

114
00:05:07.470 --> 00:05:08.560
left comma val 

115
00:05:08.820 --> 00:05:12.020
So if 10 is present in this left sub tree 

116
00:05:12.030 --> 00:05:14.840
it will be deleted and that sub tree will be 

117
00:05:14.840 --> 00:05:18.150
returned to this functions and it will be updated here 

118
00:05:18.340 --> 00:05:21.090
so remove node is called again bypassing 

119
00:05:21.090 --> 00:05:24.700
node 50 and value 10 So first check if the 

120
00:05:24.700 --> 00:05:27.120
tree is empty but it is not so 

121
00:05:27.120 --> 00:05:30.690
check if root key is Less than val but 50 is 

122
00:05:30.700 --> 00:05:33.050
not less than ten so check 

123
00:05:33.060 --> 00:05:36.170
If root Key is greater than val and 50 is 

124
00:05:36.170 --> 00:05:39.730
greater than 10 so again 10 can be present in 

125
00:05:39.730 --> 00:05:40.350
the left 

126
00:05:40.350 --> 00:05:42.760
Subtree only so repeat the step 

127
00:05:42.770 --> 00:05:43.890
Call remove node 

128
00:05:43.900 --> 00:05:47.570
Bypassing the left sub tree and the value so remove

129
00:05:47.570 --> 00:05:51.080
node is called again bypassing the node ten and the 

130
00:05:51.080 --> 00:05:51.740
value 10 

131
00:05:51.860 --> 00:05:55.170
Now again check if the tree is empty but it is 

132
00:05:55.170 --> 00:05:55.950
not so 

133
00:05:55.950 --> 00:05:59.360
check if root key is less than val but 10 

134
00:05:59.490 --> 00:06:01.050
is not less than 10 

135
00:06:01.140 --> 00:06:05.340
So next check if root key is greater than val and 

136
00:06:05.350 --> 00:06:09.060
10 is not greater than 10 too So as we 

137
00:06:09.060 --> 00:06:12.900
discussed ten is not less than root and ten is not greater 

138
00:06:12.900 --> 00:06:16.440
than root 10 must be the root here so else 

139
00:06:16.440 --> 00:06:17.680
part will work here 

140
00:06:17.690 --> 00:06:20.650
That is we found the node to be deleted which 

141
00:06:20.650 --> 00:06:22.600
is the root of this sub tree 

142
00:06:22.740 --> 00:06:26.750
So we performed two steps checking if the tree is empty 

143
00:06:26.940 --> 00:06:29.880
and if not finding the node to be deleted 

144
00:06:30.150 --> 00:06:33.690
Now what is the third step It is identifying the 

145
00:06:33.690 --> 00:06:36.190
deletion case so first check 

146
00:06:36.200 --> 00:06:38.770
If it is a node with no Children that is 

147
00:06:38.780 --> 00:06:40.930
if it is a leaf node and if it is 

148
00:06:40.930 --> 00:06:43.850
a leaf node then it's left and right will be 

149
00:06:43.850 --> 00:06:47.520
null so check If root left equal to null and 

150
00:06:47.520 --> 00:06:50.930
root right equal to null And here it is So 

151
00:06:50.930 --> 00:06:54.360
the third step is done The case is identified now what 

152
00:06:54.360 --> 00:06:58.640
is the final step Take appropriate actions so we know 

153
00:06:58.650 --> 00:07:01.060
if it is a leaf node we can simply delete 

154
00:07:01.060 --> 00:07:05.040
it So return null And please understand that this is 

155
00:07:05.040 --> 00:07:07.400
not the root of the whole tree but of the 

156
00:07:07.400 --> 00:07:08.860
sub tree we passed 

157
00:07:08.870 --> 00:07:11.850
This function is called for the third time here and 

158
00:07:11.850 --> 00:07:13.050
the root we are referring 

159
00:07:13.050 --> 00:07:15.430
Here is the node with value 10 

160
00:07:15.520 --> 00:07:18.190
So the root of this sub tree is deleted 

161
00:07:18.200 --> 00:07:20.520
So written null to the calling function 

162
00:07:20.740 --> 00:07:24.190
And finally root of the original tree will be returned 

163
00:07:24.200 --> 00:07:26.190
to the function called Remove 

164
00:07:26.190 --> 00:07:29.210
node first So that is how we can delete a 

165
00:07:29.210 --> 00:07:29.910
leaf node 

166
00:07:30.030 --> 00:07:31.960
Now let us delete another node 

167
00:07:32.120 --> 00:07:35.690
Let it be the node with value 300 so val equal 

168
00:07:35.690 --> 00:07:36.450
to 300 

169
00:07:36.840 --> 00:07:40.110
So as we discussed first check if the tree is 

170
00:07:40.120 --> 00:07:42.260
empty but it is not so 

171
00:07:42.260 --> 00:07:46.070
check If root key is less than val and we have 

172
00:07:46.080 --> 00:07:50.200
100 less than 300 so 300 can be present in 

173
00:07:50.200 --> 00:07:51.630
the right subtree only 

174
00:07:51.840 --> 00:07:52.920
So call remove 

175
00:07:52.920 --> 00:07:54.080
node bypassing 

176
00:07:54.080 --> 00:07:55.950
It's right sub tree and the value 

177
00:07:56.540 --> 00:07:59.240
So remove node is called again by passing Node 

178
00:07:59.240 --> 00:08:02.790
200 which is the root of right sub tree and 

179
00:08:02.790 --> 00:08:04.020
the value 300 

180
00:08:04.360 --> 00:08:06.980
Now again check if the tree is empty 

181
00:08:07.020 --> 00:08:08.990
But it is not the check 

182
00:08:09.000 --> 00:08:12.110
If root key is less than val and 200 is 

183
00:08:12.110 --> 00:08:13.330
less than 300 

184
00:08:13.390 --> 00:08:14.490
So this is true 

185
00:08:14.500 --> 00:08:17.500
So 300 can be present in the right sub tree 

186
00:08:17.500 --> 00:08:17.950
only 

187
00:08:18.040 --> 00:08:21.720
So again call remove node bypassing the right sub tree 

188
00:08:21.730 --> 00:08:23.290
and the value to be deleted 

189
00:08:23.580 --> 00:08:24.590
So call removed 

190
00:08:24.590 --> 00:08:24.800
node 

191
00:08:24.800 --> 00:08:27.550
Bypassing it's right sub tree and the value 

192
00:08:27.940 --> 00:08:32.290
So remove node is called again by Passing the node 300 which 

193
00:08:32.290 --> 00:08:34.960
is the root of right sub tree and the value 

194
00:08:34.970 --> 00:08:35.700
300 

195
00:08:35.960 --> 00:08:39.270
Now again check If the tree is empty but it is 

196
00:08:39.270 --> 00:08:42.900
not 300 is not less than the root and 300 

197
00:08:42.900 --> 00:08:44.830
is not greater than the root 

198
00:08:44.900 --> 00:08:47.780
So 300 must be the root here So we have 

199
00:08:47.780 --> 00:08:50.740
found the node to be deleted and the next step 

200
00:08:50.750 --> 00:08:52.950
is to identify the deletion case 

201
00:08:53.230 --> 00:08:56.150
So first check if it is a leaf node and 

202
00:08:56.150 --> 00:09:00.060
we have if root left equal to null and root right 

203
00:09:00.070 --> 00:09:00.780
equal to null 

204
00:09:01.240 --> 00:09:04.410
But it fails since root left is not equal to 

205
00:09:04.410 --> 00:09:05.060
null so 

206
00:09:05.060 --> 00:09:08.340
The statement inside will be skipped now check 

207
00:09:08.350 --> 00:09:11.920
If it is an only right child case so Check 

208
00:09:11.930 --> 00:09:14.960
If root left equal to null and it is not true 

209
00:09:14.960 --> 00:09:17.990
here now check If it is only left child 

210
00:09:18.000 --> 00:09:21.810
case so check if root right equal to null and 

211
00:09:21.820 --> 00:09:24.880
it is true here so both left and right 

212
00:09:24.890 --> 00:09:27.940
Is not equal to null but only right equal to 

213
00:09:27.940 --> 00:09:28.340
null 

214
00:09:28.380 --> 00:09:31.580
So what is this It is a only left child 

215
00:09:31.590 --> 00:09:32.150
case 

216
00:09:32.240 --> 00:09:35.130
So what should we do We have to delete that 

217
00:09:35.130 --> 00:09:38.420
node and it's child should take that position 

218
00:09:38.490 --> 00:09:41.830
So return left child which will be stored as root 

219
00:09:41.830 --> 00:09:45.440
right in the calling function and finally root of the 

220
00:09:45.440 --> 00:09:48.890
original tree will be returned to the function called Remove 

221
00:09:48.890 --> 00:09:49.700
node first 

222
00:09:49.790 --> 00:09:52.450
So that is how a single child node can be 

223
00:09:52.450 --> 00:09:53.150
deleted 

224
00:09:53.340 --> 00:09:56.660
Now let us delete another node that it be 200 

225
00:09:56.690 --> 00:09:59.920
so as we discussed first we need to check if 

226
00:09:59.920 --> 00:10:02.690
the tree is empty but it is not so 

227
00:10:02.690 --> 00:10:03.240
check 

228
00:10:03.340 --> 00:10:07.000
If root key is less than val 100 is less 

229
00:10:07.000 --> 00:10:10.630
than 200 so 200 can be present in the right 

230
00:10:10.630 --> 00:10:11.550
subtree only 

231
00:10:11.640 --> 00:10:12.660
So call remove 

232
00:10:12.660 --> 00:10:12.960
node 

233
00:10:12.970 --> 00:10:13.650
Bypassing 

234
00:10:13.650 --> 00:10:16.550
It's right subtree and the value so removed node is 

235
00:10:16.550 --> 00:10:18.590
called again by passing Node

236
00:10:18.590 --> 00:10:21.880
200 which is the root of right subtree and 

237
00:10:21.880 --> 00:10:25.530
the Value 200 now again check if the tree is empty 

238
00:10:25.540 --> 00:10:28.620
But it is not two hundred is not less than root 

239
00:10:28.630 --> 00:10:31.890
and 200 is not greater than root So 200 must 

240
00:10:31.890 --> 00:10:33.050
be the root node here 

241
00:10:33.140 --> 00:10:35.520
So we have found the node to be deleted 

242
00:10:35.530 --> 00:10:38.550
Next we need to identify the deletion case 

243
00:10:38.640 --> 00:10:41.090
So first check If it is a leaf node 

244
00:10:41.100 --> 00:10:44.510
So we have if root left equal to null and 

245
00:10:44.510 --> 00:10:45.810
root right equal to null 

246
00:10:46.090 --> 00:10:49.320
But it is not so check If it is only 

247
00:10:49.330 --> 00:10:52.820
right child case so check If root left equal to 

248
00:10:52.820 --> 00:10:56.220
null but it fails here So next check If it 

249
00:10:56.220 --> 00:11:00.040
is only left child case So check if root right 

250
00:11:00.050 --> 00:11:03.000
equal to null But it also fails here So it 

251
00:11:03.000 --> 00:11:06.110
is not a leaf node case not single left child 

252
00:11:06.120 --> 00:11:09.450
case and not single right child case So it must 

253
00:11:09.460 --> 00:11:13.060
be both left and right Child case that is the 

254
00:11:13.070 --> 00:11:14.190
two Children case 

255
00:11:14.300 --> 00:11:17.000
So in this case what should we do We need 

256
00:11:17.000 --> 00:11:20.430
to find the inorder successor of 200 That is 

257
00:11:20.640 --> 00:11:24.240
the minimum value in write subtree of 200 so let us 

258
00:11:24.240 --> 00:11:28.130
call a function Get right Min bypassing its right 

259
00:11:28.130 --> 00:11:32.760
subtree that is node 300 So right int right min 

260
00:11:32.770 --> 00:11:36.940
equal to get right min of root right So what we 

261
00:11:36.940 --> 00:11:39.400
have to do in this function is we have to 

262
00:11:39.410 --> 00:11:42.430
traverse through the left child till we get a null 

263
00:11:42.590 --> 00:11:46.080
So create a temp pointing to root and use a 

264
00:11:46.080 --> 00:11:50.010
while loop while temp left not equal to null and 

265
00:11:50.010 --> 00:11:52.050
move temp to its left child 

266
00:11:52.440 --> 00:11:56.380
So 1st temp points to 300 and now we have 

267
00:11:56.390 --> 00:11:57.870
temp left equal to 250 

268
00:11:57.870 --> 00:12:00.930
which is not equal to null so go inside 

269
00:12:01.260 --> 00:12:03.350
and move temp to its left child 

270
00:12:03.840 --> 00:12:07.030
So temp equal to 250 now again check 

271
00:12:07.040 --> 00:12:10.070
If temp left not equal to null but it is 

272
00:12:10.070 --> 00:12:10.460
here 

273
00:12:10.600 --> 00:12:13.700
So control comes out of the while loop and return 

274
00:12:13.700 --> 00:12:17.010
temp key which will be the inorder successor and 

275
00:12:17.020 --> 00:12:19.280
it will be stored in integer variable 

276
00:12:19.290 --> 00:12:20.450
Right min here 

277
00:12:20.540 --> 00:12:23.260
So copy this inorder successor to node to 

278
00:12:23.260 --> 00:12:25.390
be deleted which is root here 

279
00:12:25.870 --> 00:12:28.930
So we have root key equal to right min 

280
00:12:29.050 --> 00:12:31.210
So 250 is stored here 

281
00:12:31.250 --> 00:12:34.210
Now we have to delete the original node with 

282
00:12:34.210 --> 00:12:39.180
250 a call Remove node function bypassing right sub tree 

283
00:12:39.210 --> 00:12:41.660
root right and inorder 

284
00:12:41.660 --> 00:12:46.730
Successor value 250 now again check if tree is empty 

285
00:12:46.740 --> 00:12:50.050
but it is not so check If root key is 

286
00:12:50.050 --> 00:12:53.630
greater than val and we have 300 greater than

287
00:12:53.630 --> 00:12:54.240
250 

288
00:12:54.350 --> 00:12:58.040
So call remove node function bypassing the left sub tree 

289
00:12:58.050 --> 00:12:59.590
and the value 250 

290
00:12:59.750 --> 00:13:02.470
And here first check if tree is empty 

291
00:13:02.480 --> 00:13:05.690
But it is not 250 is not less than root 

292
00:13:05.840 --> 00:13:07.520
and not even greater than root 

293
00:13:07.690 --> 00:13:09.350
So it must be the root here 

294
00:13:09.360 --> 00:13:11.570
So we have found the node to be deleted 

295
00:13:11.580 --> 00:13:13.650
So identified the deletion case 

296
00:13:13.910 --> 00:13:16.610
So first check if it is a leaf node and 

297
00:13:16.610 --> 00:13:20.190
we have if root left equal to null and root 

298
00:13:20.190 --> 00:13:22.800
right equal to null and it is true here 

299
00:13:22.890 --> 00:13:26.440
So this is a Leaf node case so simply deleted 

300
00:13:26.450 --> 00:13:29.760
So written null and finally the root will be returned 

301
00:13:30.100 --> 00:13:32.960
So that is how deletion can be performed in a 

302
00:13:32.960 --> 00:13:34.150
binary search tree.

