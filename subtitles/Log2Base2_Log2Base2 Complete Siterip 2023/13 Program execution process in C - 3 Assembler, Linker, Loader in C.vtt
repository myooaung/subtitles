WEBVTT

1
00:00:00.540 --> 00:00:01.280
Hi friends 

2
00:00:01.290 --> 00:00:04.330
In this video we are going to learn about the assembler, Linker and Loader.

3
00:00:10.340 --> 00:00:13.470
So as we know the source code or the actual 

4
00:00:13.470 --> 00:00:15.120
C code is given to the compiler 

5
00:00:15.120 --> 00:00:17.270
And then it is passed to the pre-processor 

6
00:00:17.280 --> 00:00:19.689
and the pre- processor will produce the pure C code and 

7
00:00:19.690 --> 00:00:22.750
then it is actually compiled and produces the assembly code

8
00:00:24.340 --> 00:00:26.860
So what is an assembler? An assembler is also 

9
00:00:26.860 --> 00:00:29.170
a type of compiler and it takes assembly code 

10
00:00:29.170 --> 00:00:31.730
as the input and translates it into the object code

11
00:00:31.760 --> 00:00:35.090
So the difference between compiler and assembler is that compiler 

12
00:00:35.090 --> 00:00:38.340
convert source code into Assembly Code and the assembler Converts the

13
00:00:38.340 --> 00:00:39.960
Assembly code in to Object code 

14
00:00:41.840 --> 00:00:44.650
But the object file might have some unresolved symbols 

15
00:00:44.650 --> 00:00:47.810
and functions such as printf. that is here  our 

16
00:00:47.810 --> 00:00:49.589
programme has a printf statement 

17
00:00:49.590 --> 00:00:52.800
The compiler only verifies whether the printf function follows the 

18
00:00:52.800 --> 00:00:55.860
correct prototype. It won't bother about the actual implementation of 

19
00:00:55.860 --> 00:00:57.470
printf function exist or not 

20
00:00:57.470 --> 00:00:59.129
So here comes the need of linker 

21
00:00:59.140 --> 00:01:02.050
So the Linker is the utility programme which resolves The 

22
00:01:02.050 --> 00:01:07.300
unresolved symbols and functions and combines the 

23
00:01:07.300 --> 00:01:10.330
multiple object files into a single executable file 

24
00:01:10.760 --> 00:01:13.530
So this object code is passed to the Linker 

25
00:01:13.800 --> 00:01:16.860
it will link the actual implementation of printf function code 

26
00:01:17.010 --> 00:01:19.860
from the runtime library and makes it an executable 

27
00:01:19.860 --> 00:01:20.240
file 

28
00:01:21.140 --> 00:01:24.810
Now suppose the compilation process generates multiple object files 

29
00:01:24.820 --> 00:01:28.130
Maybe an unresolved symbol from an object file might reside 

30
00:01:28.140 --> 00:01:29.050
in another object  file

31
00:01:29.060 --> 00:01:30.670
See an example unresolved symbol x

32
00:01:30.670 --> 00:01:33.760
in second object file resides in first object file 

33
00:01:35.840 --> 00:01:36.130
here 

34
00:01:36.140 --> 00:01:38.440
The linker  will restore X by linking it with 

35
00:01:38.440 --> 00:01:39.199
the first object file

36
00:01:39.210 --> 00:01:42.550
Similarly it will also link the actual implementation of printf

37
00:01:42.550 --> 00:01:44.580
function from the run time library 

38
00:01:44.590 --> 00:01:48.210
Finally the Linker will combine all the object files 

39
00:01:48.210 --> 00:01:50.390
and generates a single executable file 

40
00:01:52.240 --> 00:01:54.930
Now what if the linker is unable to find the 

41
00:01:54.930 --> 00:01:58.720
undersolved symbol or function's code? then a linker error will 

42
00:01:58.730 --> 00:01:59.250
be thrown

43
00:01:59.640 --> 00:02:03.369
So pre processing, compiling, assembling and linking is done and 

44
00:02:03.370 --> 00:02:04.850
we got the executable file 

45
00:02:05.160 --> 00:02:08.040
Now we need to load it into the random access 

46
00:02:08.040 --> 00:02:10.150
memory for that we need a loader

47
00:02:10.410 --> 00:02:13.030
So when we execute the programme the loader will read 

48
00:02:13.030 --> 00:02:15.850
the instructions from the Executable file and loads it 

49
00:02:15.850 --> 00:02:18.490
into the random access memory and prepares them for the 

50
00:02:18.490 --> 00:02:22.900
execution. Finally CPU initiates the programme execution by calling the 

51
00:02:22.900 --> 00:02:25.950
starting address and the output hello world will be printed on 

52
00:02:25.950 --> 00:02:26.440
the screen 

53
00:02:26.450 --> 00:02:28.179
So let us just quickly revise

54
00:02:28.180 --> 00:02:30.640
This whole process the source code is sent to the 

55
00:02:30.640 --> 00:02:33.430
pre-processor. Pre-processor makes it the pure C code 

56
00:02:33.440 --> 00:02:35.680
And then this pure C code is sent to the 

57
00:02:35.680 --> 00:02:38.640
compiler and the compiler converts it into the assembly 

58
00:02:38.640 --> 00:02:41.140
code and then the assembly code is sent to the assembler

59
00:02:41.140 --> 00:02:41.459


60
00:02:42.840 --> 00:02:45.530
The assembler takes the assembly code and converts it 

61
00:02:45.530 --> 00:02:48.250
into the object code and the linker takes the

62
00:02:48.250 --> 00:02:50.960
unresolved object code and converts them into an executable

63
00:02:50.960 --> 00:02:53.640
file and the loader loads executable file 

64
00:02:53.650 --> 00:02:56.520
into main memory and prepares it for execution. So that's all and thank you for watching this video. 

