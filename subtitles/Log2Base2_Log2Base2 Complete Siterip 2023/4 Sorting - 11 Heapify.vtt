WEBVTT

1
00:00:00.040 --> 00:00:00.910
Hello friends 

2
00:00:01.040 --> 00:00:04.520
In this video let us learn how to construct a binary 

3
00:00:04.520 --> 00:00:05.750
heap from an array 

4
00:00:06.440 --> 00:00:09.790
For an example let us take an array of seven 

5
00:00:09.800 --> 00:00:10.440
elements 

6
00:00:10.510 --> 00:00:13.350
That is from index 0 to 6 

7
00:00:13.940 --> 00:00:16.910
As we know the binary heap is a complete binary

8
00:00:16.910 --> 00:00:20.450
tree which satisfies the heap ordering property 

9
00:00:21.040 --> 00:00:24.820
So here we need to logically construct a complete 

10
00:00:24.820 --> 00:00:29.300
binary tree using this array for that for every index 

11
00:00:29.310 --> 00:00:32.490
of the array we need to find its left and right 

12
00:00:32.490 --> 00:00:35.410
child so that we can construct the complete binary

13
00:00:35.410 --> 00:00:39.770
tree out of this array here array index starts at 

14
00:00:39.770 --> 00:00:42.720
zero then the left child can be found in the 

15
00:00:42.730 --> 00:00:47.010
index two Indo I plus one and the right child 

16
00:00:47.020 --> 00:00:50.340
can be found in the index two Indo I plus 

17
00:00:50.340 --> 00:00:50.650
two 

18
00:00:51.140 --> 00:00:54.820
Let us see how for index zero The left child 

19
00:00:54.830 --> 00:00:57.630
will be in two indo 20 plus one 

20
00:00:57.760 --> 00:01:02.050
That is index one which is the Element 20 and 

21
00:01:02.050 --> 00:01:04.870
the right child will be in two indo zero plus 

22
00:01:04.870 --> 00:01:07.950
two that is index two which is Element 40 

23
00:01:08.440 --> 00:01:12.200
Similarly for Index one the left child will be two 

24
00:01:12.200 --> 00:01:16.120
into one plus one that is index three which is element 

25
00:01:16.130 --> 00:01:19.460
30 here and the right child will be in index 

26
00:01:19.460 --> 00:01:21.340
two into one plus two 

27
00:01:21.360 --> 00:01:24.450
That is index four which is Element 80 

28
00:01:24.940 --> 00:01:28.920
Similarly for index two the left child will be two 

29
00:01:28.920 --> 00:01:30.540
into 2 plus one 

30
00:01:30.550 --> 00:01:34.350
That is index five which is Element 60 and the 

31
00:01:34.350 --> 00:01:37.680
right child will be in index 2 Indo two plus 

32
00:01:37.680 --> 00:01:42.090
two that is index six which is Element 50 and 

33
00:01:42.090 --> 00:01:43.330
for index three 

34
00:01:43.340 --> 00:01:46.710
The left child should be at index two into three 

35
00:01:46.710 --> 00:01:50.300
plus one that is seven and right Child should be 

36
00:01:50.300 --> 00:01:53.650
in index two Indo three plus two that is eight 

37
00:01:54.140 --> 00:01:57.250
But these indices are not in the range so we 

38
00:01:57.250 --> 00:02:01.410
can stop the processing now that is we can understand 

39
00:02:01.410 --> 00:02:04.540
that the next elements should be the leaves of the 

40
00:02:04.540 --> 00:02:04.950
tree 

41
00:02:05.740 --> 00:02:08.960
In this example we are going to construct a max heap

42
00:02:09.640 --> 00:02:10.630
in max heap 

43
00:02:10.800 --> 00:02:13.950
The parent will always be larger than the Children 

44
00:02:14.440 --> 00:02:17.960
This is applicable for every sub tree and hence the 

45
00:02:17.960 --> 00:02:20.120
root of the tree will be the maximum 

46
00:02:20.280 --> 00:02:24.920
In a max heap so let us construct the max heap to 

47
00:02:24.920 --> 00:02:27.300
construct max heap or min heap 

48
00:02:27.310 --> 00:02:30.460
We need to satisfy the heap property from the bottom 

49
00:02:30.460 --> 00:02:34.250
Most sub tree Here we are going to construct the 

50
00:02:34.250 --> 00:02:38.580
Max heap so we need to satisfy the max heap property from 

51
00:02:38.580 --> 00:02:42.320
bottom Most sub tree here which is the bottom most 

52
00:02:42.320 --> 00:02:42.950
sub tree 

53
00:02:43.440 --> 00:02:46.610
It is the sub tree with node 40 who's left 

54
00:02:46.620 --> 00:02:50.310
Child is 60 and right Child is 50 and the 

55
00:02:50.310 --> 00:02:54.440
second bottom most subtree Is this this node to end 

56
00:02:54.440 --> 00:02:58.060
with left child 30 and right child 80 and 

57
00:02:58.060 --> 00:03:01.350
the top most sub tree is this one the node 

58
00:03:01.530 --> 00:03:05.750
10 with left child 20 and right child 40 So 

59
00:03:05.750 --> 00:03:09.240
first take the bottom most sub tree check 

60
00:03:09.280 --> 00:03:13.520
If it satisfies the max heap property that is parent should 

61
00:03:13.520 --> 00:03:17.010
be greater than Children and the maximum value should be 

62
00:03:17.020 --> 00:03:21.370
at the root here The child 60 is greater than 

63
00:03:21.380 --> 00:03:25.980
parent 40 So swap 60 and 40 again We need 

64
00:03:25.980 --> 00:03:29.460
to check for the max heap property of the swapped Index 

65
00:03:29.680 --> 00:03:33.790
But now 40 does'nt have any left or right child 

66
00:03:33.800 --> 00:03:38.410
so we can skip this now the maximum element 60 

67
00:03:38.420 --> 00:03:42.670
is placed in sub trees root Now it satisfies the 

68
00:03:42.670 --> 00:03:43.850
max heap property 

69
00:03:44.740 --> 00:03:49.130
Next consider the second bottom most sub tree Here child 

70
00:03:49.140 --> 00:03:53.310
80 is greater than parent 20 So swap 80 and 

71
00:03:53.310 --> 00:03:54.950
20 again 

72
00:03:54.950 --> 00:03:57.510
We need to check for the max heap property of the 

73
00:03:57.510 --> 00:03:58.550
swapped index 

74
00:03:59.040 --> 00:04:02.630
But again 20 does'nt have left and right child 

75
00:04:02.700 --> 00:04:04.350
so we can skip this step 

76
00:04:04.900 --> 00:04:09.090
Now take the top most sub tree Here child 80 

77
00:04:09.100 --> 00:04:14.610
is greater than parent Ten so swap 80 and 10 again 

78
00:04:14.610 --> 00:04:17.040
We need to check for the max heap property of the 

79
00:04:17.040 --> 00:04:21.690
swapped Index here 10 is root and 30 and 20 

80
00:04:21.700 --> 00:04:26.940
are its Children It does'nt satisfy the max heap property that 

81
00:04:26.940 --> 00:04:30.110
is the root must be the maximum among all the 

82
00:04:30.110 --> 00:04:34.840
node Here 30 is greater than 10 and 20 to 

83
00:04:34.840 --> 00:04:38.780
swap 30 and ten and again we need to check 

84
00:04:38.780 --> 00:04:42.800
for the max heap property of the swaped index But now 

85
00:04:43.000 --> 00:04:46.440
10 does'nt have left and right child so we can 

86
00:04:46.440 --> 00:04:50.180
skip this and our heapify process is done 

87
00:04:50.190 --> 00:04:54.330
for all sub trees from bottom Most node now this 

88
00:04:54.330 --> 00:04:57.860
complete tree exactly satisfy some Max heap property 

89
00:04:58.440 --> 00:05:02.180
The maximum element 80 is present at the root and 

90
00:05:02.190 --> 00:05:05.610
every sub trees root value is the maximum of its 

91
00:05:05.610 --> 00:05:06.070
Children 

92
00:05:06.840 --> 00:05:09.430
So this is how we can construct a heap from 

93
00:05:09.430 --> 00:05:09.940
an array 

94
00:05:10.640 --> 00:05:14.630
Now let's see how to implement this as we discussed 

95
00:05:14.630 --> 00:05:18.500
the procedure to construct the heap is find the bottom 

96
00:05:18.500 --> 00:05:21.520
of sub tree and from the bottom most sub tree 

97
00:05:21.570 --> 00:05:24.950
to top check and satisfy the heap property 

98
00:05:25.740 --> 00:05:27.910
Here we have two functions 

99
00:05:28.130 --> 00:05:31.560
First is built Heap which will call the heapify 

100
00:05:31.560 --> 00:05:35.130
function to satisfy the heap property from the bottom 

101
00:05:35.130 --> 00:05:39.480
Most node and the heapify function will find 

102
00:05:39.490 --> 00:05:43.030
the left and right nodes and arranges it based on 

103
00:05:43.040 --> 00:05:44.150
the heap property 

104
00:05:44.840 --> 00:05:47.750
First let us understand the built heap function 

105
00:05:48.240 --> 00:05:51.760
The array and the last index of the array are passed 

106
00:05:51.770 --> 00:05:52.950
into this function 

107
00:05:53.540 --> 00:05:58.670
Total array size is seven here and the size is the last index 

108
00:05:58.680 --> 00:06:01.520
of the array that is seven minus one which is 

109
00:06:01.520 --> 00:06:02.570
equal to six 

110
00:06:03.440 --> 00:06:06.490
And as we discussed the built heap function will call 

111
00:06:06.490 --> 00:06:08.660
the heapify function from the bottom 

112
00:06:08.660 --> 00:06:09.350
Most node 

113
00:06:10.040 --> 00:06:12.910
In general we can get the bottom most node using 

114
00:06:12.910 --> 00:06:14.050
size by two 

115
00:06:14.840 --> 00:06:17.970
So this for loop will run from size by 2 

116
00:06:17.980 --> 00:06:21.750
to 0 that is bottom most sub tree root 

117
00:06:21.990 --> 00:06:25.400
to index zero that is top most sub tree root 

118
00:06:25.400 --> 00:06:25.750
node 

119
00:06:26.540 --> 00:06:29.470
For every sub tree index it will call the heapify 

120
00:06:29.470 --> 00:06:31.770
function so now 

121
00:06:31.780 --> 00:06:34.910
Size by two is equal to six by two 

122
00:06:34.910 --> 00:06:38.010
which is equal to three so heapify function is 

123
00:06:38.010 --> 00:06:42.360
called with index three along with the array arr and size 

124
00:06:42.370 --> 00:06:43.050
six 

125
00:06:43.640 --> 00:06:47.100
So here index equal to three and science equal to 

126
00:06:47.100 --> 00:06:47.580
six 

127
00:06:48.440 --> 00:06:51.750
Let us first find the left and right child of 

128
00:06:51.760 --> 00:06:55.520
the node at this Index so left equal to two 

129
00:06:55.520 --> 00:06:59.450
Indo Index plus one that is two Indo three plus 

130
00:06:59.450 --> 00:07:01.080
one which is equal to seven 

131
00:07:01.840 --> 00:07:05.180
And now let us find the right child right equal 

132
00:07:05.180 --> 00:07:08.350
to left plus one that is seven plus one which 

133
00:07:08.350 --> 00:07:09.550
is equal to eight 

134
00:07:10.340 --> 00:07:13.750
Initially we keep the max and index at the same 

135
00:07:13.750 --> 00:07:14.360
index 

136
00:07:14.940 --> 00:07:19.090
If the max heap property is not satisfied Max index will 

137
00:07:19.090 --> 00:07:19.950
be changed 

138
00:07:20.540 --> 00:07:24.320
If Max and Index still point to the same index after 

139
00:07:24.320 --> 00:07:28.080
the left and right value checking it means this sub 

140
00:07:28.080 --> 00:07:30.050
tree are based the max heap property 

141
00:07:30.300 --> 00:07:33.880
So whenever Max is not equal to index swap the 

142
00:07:33.880 --> 00:07:36.880
element and called the heapify function with Max 

143
00:07:36.880 --> 00:07:40.530
Index again let's see how this works 

144
00:07:40.820 --> 00:07:45.560
So here Max equal to index three Now now check 

145
00:07:45.570 --> 00:07:48.950
if left and right child is greater than this node 

146
00:07:49.640 --> 00:07:52.830
So we have If left less than or equal to 

147
00:07:52.830 --> 00:07:57.050
size and arr of left greater than arr of max 

148
00:07:57.740 --> 00:08:01.670
But this fails as left seven is not less than 

149
00:08:01.670 --> 00:08:05.870
or equal to size so check the next if it 

150
00:08:05.880 --> 00:08:06.980
also fails 

151
00:08:06.990 --> 00:08:10.760
Since right Index eight is also not less than or 

152
00:08:10.760 --> 00:08:11.770
equal to size 

153
00:08:12.440 --> 00:08:17.360
Now check If Max was updated it hasn't so if 

154
00:08:17.360 --> 00:08:18.530
failed again 

155
00:08:18.710 --> 00:08:22.670
And this function is completed now and control gets back 

156
00:08:22.670 --> 00:08:23.950
to build deep function 

157
00:08:24.740 --> 00:08:28.670
Here in next iteration of the for Loop i is equal 

158
00:08:28.670 --> 00:08:32.530
to two and heapify is called by passing Array 

159
00:08:32.530 --> 00:08:36.550
Arr I equal to two and Size equal to six 

160
00:08:37.340 --> 00:08:40.890
So here in this function index equal to two and 

161
00:08:40.890 --> 00:08:42.350
size equal to six 

162
00:08:42.940 --> 00:08:46.190
Let us first find the left and right Children of 

163
00:08:46.200 --> 00:08:47.850
node at this index 

164
00:08:48.240 --> 00:08:51.510
so left equal to two Indo Index plus one 

165
00:08:51.570 --> 00:08:54.750
that is two into two plus one which is five 

166
00:08:55.240 --> 00:08:58.580
and right equal to left plus one that is six 

167
00:08:59.320 --> 00:09:03.110
And as we said initially we keep the max and 

168
00:09:03.120 --> 00:09:04.950
index at the same position 

169
00:09:05.340 --> 00:09:06.410
So Max equal

170
00:09:06.410 --> 00:09:09.920
to index two that is we are assuming that this 

171
00:09:09.920 --> 00:09:14.150
sub tree satisfies the heap property and If any child 

172
00:09:14.160 --> 00:09:16.880
is greater than parent we update Max 

173
00:09:17.340 --> 00:09:20.880
And finally if Max and Index are different we have 

174
00:09:20.890 --> 00:09:22.750
to perform swap operation 

175
00:09:23.340 --> 00:09:25.450
So now Max equal to two 

176
00:09:26.240 --> 00:09:30.160
Now check if left child is greater than this node 

177
00:09:30.290 --> 00:09:34.530
so we have If left less than or equal to size 

178
00:09:34.580 --> 00:09:39.370
and arr of left greater than arr of Max And 

179
00:09:39.370 --> 00:09:43.980
we have five less than size and 60 greater than 

180
00:09:43.980 --> 00:09:44.550
40 

181
00:09:45.140 --> 00:09:49.180
So left child is greater than parent so update Max 

182
00:09:49.840 --> 00:09:51.630
so Max equal to left 

183
00:09:51.630 --> 00:09:56.710
Now that is index five now check if right child 

184
00:09:56.810 --> 00:10:01.030
is greater than Max So we have if right less than 

185
00:10:01.030 --> 00:10:04.680
or equal to size and arr of right greater than 

186
00:10:04.690 --> 00:10:05.950
arr of Max 

187
00:10:06.740 --> 00:10:10.620
And we have six equal to size and 50 not 

188
00:10:10.630 --> 00:10:11.850
greater than 60 

189
00:10:12.340 --> 00:10:14.020
So it fails and see 

190
00:10:14.030 --> 00:10:17.210
Now we have the maximum value of this sub tree 

191
00:10:17.220 --> 00:10:17.980
at max 

192
00:10:18.440 --> 00:10:21.400
So we have found the maximum value of this sub 

193
00:10:21.400 --> 00:10:21.730
tree 

194
00:10:22.020 --> 00:10:24.290
Now we have to rearrange it so 

195
00:10:24.290 --> 00:10:24.830
check 

196
00:10:24.920 --> 00:10:28.780
If Max was updated that it's Max was initially set 

197
00:10:28.780 --> 00:10:30.540
to index now check 

198
00:10:30.550 --> 00:10:33.590
If Max and Index are the same and it is 

199
00:10:33.590 --> 00:10:38.020
not so if conditions is true so swap elements at 

200
00:10:38.020 --> 00:10:42.750
Max and Index that is 60 and 40 are swapped 

201
00:10:43.340 --> 00:10:46.140
so that the maximum element is now at the root 

202
00:10:46.140 --> 00:10:51.110
position again we need to check for the max heap property of the 

203
00:10:51.110 --> 00:10:52.210
swapped Index 

204
00:10:52.510 --> 00:10:56.520
So call heapify again by passing array max 

205
00:10:56.530 --> 00:10:58.830
and size So here 

206
00:10:59.010 --> 00:11:02.170
Index equal to five and Size equal to six 

207
00:11:02.740 --> 00:11:05.790
Let us first find the left and right Children of 

208
00:11:05.800 --> 00:11:09.640
node at this index so left equal to two INDO 

209
00:11:09.640 --> 00:11:13.580
Index plus one that this two Indo five plus one 

210
00:11:13.580 --> 00:11:16.970
which is 11 and right equal to left plus one 

211
00:11:16.980 --> 00:11:20.580
that is 12 and set max equal to index that 

212
00:11:20.580 --> 00:11:21.650
is five now 

213
00:11:22.240 --> 00:11:25.590
Now check if left and right child is greater than 

214
00:11:25.590 --> 00:11:26.250
this node 

215
00:11:26.740 --> 00:11:29.570
So we have if left less than or equal to 

216
00:11:29.570 --> 00:11:33.530
size and arr of left greater than arr of max 

217
00:11:34.140 --> 00:11:37.990
But this fails as left 11 is not less than 

218
00:11:37.990 --> 00:11:38.990
or equal to size 

219
00:11:39.000 --> 00:11:39.680
Six 

220
00:11:40.240 --> 00:11:43.870
So check the next if it also fails since right 

221
00:11:43.870 --> 00:11:46.740
index 12 is also not less than or equal 

222
00:11:46.740 --> 00:11:48.750
to size now check 

223
00:11:48.760 --> 00:11:52.280
If Max was updated and it was not so if 

224
00:11:52.280 --> 00:11:56.970
failed again and the function is completed and control gets 

225
00:11:56.970 --> 00:12:01.160
back to build heap function and here in next iteration i

226
00:12:01.470 --> 00:12:05.120
is equal to one and heapify is called 

227
00:12:05.130 --> 00:12:09.440
by passing array arr for i equal to one and size equal to 

228
00:12:09.440 --> 00:12:09.960
six 

229
00:12:10.540 --> 00:12:14.040
So here index equal to one and size equal to 

230
00:12:14.040 --> 00:12:14.550
six 

231
00:12:15.240 --> 00:12:18.630
now let us find the left and right Children of node 

232
00:12:18.720 --> 00:12:19.850
at this Index 

233
00:12:20.540 --> 00:12:23.820
So Left equal to two INDO Index plus one that is 

234
00:12:23.820 --> 00:12:27.200
two into one plus one which is three and right 

235
00:12:27.200 --> 00:12:29.500
equal to left plus one which is four 

236
00:12:30.540 --> 00:12:33.430
And as we said initially we will keep the max 

237
00:12:33.430 --> 00:12:35.250
and index at the same position 

238
00:12:35.640 --> 00:12:38.940
So Max equal to Index one that is we are 

239
00:12:38.950 --> 00:12:42.510
assuming that this sub tree satisfy the heap property 

240
00:12:42.800 --> 00:12:47.450
And this value at this node is the maximum value 

241
00:12:47.530 --> 00:12:49.450
So now Max equal to one 

242
00:12:49.510 --> 00:12:52.720
And now check If left child is greater than this 

243
00:12:52.720 --> 00:12:53.050
node 

244
00:12:53.640 --> 00:12:56.900
And here we have three less than size and 30 

245
00:12:56.900 --> 00:12:58.150
greater than 20 

246
00:12:58.640 --> 00:13:02.990
That is the left child is greater than parent So update 

247
00:13:02.990 --> 00:13:07.810
Max and Max equal to left Now that is three now 

248
00:13:07.810 --> 00:13:11.610
check If right child is greater than Max so we 

249
00:13:11.610 --> 00:13:14.970
have if right less than or equal to size and 

250
00:13:14.980 --> 00:13:19.350
arr of right greater than arr of Max and we 

251
00:13:19.350 --> 00:13:21.550
have four less than size 

252
00:13:21.560 --> 00:13:24.190
So first conditions satisfied the next 

253
00:13:24.190 --> 00:13:26.470
We have 80 greater than 30 

254
00:13:26.630 --> 00:13:30.940
So that is also satisfied that is right child is 

255
00:13:30.940 --> 00:13:33.150
greater than current Max value 

256
00:13:33.540 --> 00:13:35.080
So it should be updated 

257
00:13:35.940 --> 00:13:40.200
So set Max equal to right that is four and 

258
00:13:40.200 --> 00:13:40.550
see 

259
00:13:40.560 --> 00:13:43.710
Now we have the maximum value of this sub tree 

260
00:13:43.830 --> 00:13:45.700
at Max now 

261
00:13:45.700 --> 00:13:46.150
check 

262
00:13:46.160 --> 00:13:49.680
If Max was updated that is max was initially set 

263
00:13:49.690 --> 00:13:51.360
to index now check 

264
00:13:51.370 --> 00:13:55.050
If Max at Index are the same and it is not 

265
00:13:55.640 --> 00:13:59.640
that means we have to perform swap operation since we 

266
00:13:59.640 --> 00:14:03.350
have found a greater element at child position 

267
00:14:04.040 --> 00:14:08.440
So swap elements at Max and Index that is 80 

268
00:14:08.450 --> 00:14:09.810
and 20 

269
00:14:09.820 --> 00:14:13.250
So now the maximum element is at the root position 

270
00:14:13.740 --> 00:14:16.710
Again we need to check for the max heap property of 

271
00:14:16.720 --> 00:14:20.990
the swapped index so call heapify again by passing 

272
00:14:21.000 --> 00:14:25.570
array max and size so here index equal to 

273
00:14:25.570 --> 00:14:27.850
four and size equal to six 

274
00:14:28.540 --> 00:14:32.300
Let us first find the left and right Children of 

275
00:14:32.310 --> 00:14:36.410
the node at this Index so the left equal to two INDO 

276
00:14:36.420 --> 00:14:39.870
index plus one that is to into four plus one 

277
00:14:40.060 --> 00:14:43.710
which is nine and right equal to left plus one 

278
00:14:43.750 --> 00:14:48.120
that is ten and now set max equal to index 

279
00:14:48.130 --> 00:14:53.180
That is four now check if any child is greater 

280
00:14:53.180 --> 00:14:54.150
than parent 

281
00:14:54.540 --> 00:14:57.510
So we have if left less than or equal to 

282
00:14:57.510 --> 00:15:01.520
size and arr of left greater than arr of max 

283
00:15:02.040 --> 00:15:03.790
But it fails as left 

284
00:15:03.800 --> 00:15:07.520
Nine is not less than or equal to size so 

285
00:15:07.520 --> 00:15:11.380
checkn the next if it also fails since right index 

286
00:15:11.380 --> 00:15:15.150
ten is also not less than or equal to size 

287
00:15:15.640 --> 00:15:16.280
Now check 

288
00:15:16.290 --> 00:15:19.540
If Max was updated and it was not so it 

289
00:15:19.540 --> 00:15:23.670
fails and the function is now completely executed and controlled 

290
00:15:23.670 --> 00:15:25.550
gets back to Build heap function 

291
00:15:26.180 --> 00:15:30.050
And here in next iteration I is equal to zero 

292
00:15:30.840 --> 00:15:34.200
and heapify is called by passing array arr 

293
00:15:34.600 --> 00:15:37.550
I equal to zero and size equal to six 

294
00:15:38.040 --> 00:15:41.940
So here index equal to 0 and size equal to 

295
00:15:41.940 --> 00:15:42.490
six 

296
00:15:43.140 --> 00:15:46.540
Let us first find the left and right child of 

297
00:15:46.550 --> 00:15:48.250
node at this index

298
00:15:48.640 --> 00:15:52.460
so left equal to two INDO Index plus one that 

299
00:15:52.460 --> 00:15:55.970
is two indo zero plus one which is one and 

300
00:15:55.970 --> 00:15:58.950
right equal to left plus one that is two 

301
00:15:59.940 --> 00:16:02.960
And as we set first we are assuming that this 

302
00:16:02.960 --> 00:16:05.350
sub tree satisfies the heap property 

303
00:16:05.740 --> 00:16:09.080
So keep Max and index at the same position 

304
00:16:09.640 --> 00:16:12.470
And if any child is greater than parent we will 

305
00:16:12.480 --> 00:16:13.650
update Max 

306
00:16:14.120 --> 00:16:17.400
So finally if Max and index are different we have to 

307
00:16:17.400 --> 00:16:19.080
perform swap operation 

308
00:16:19.740 --> 00:16:21.950
So right now Max equal to zero 

309
00:16:22.640 --> 00:16:26.290
Now check if left child is greater than this node 

310
00:16:26.550 --> 00:16:29.660
So we have if left less than or equal to 

311
00:16:29.660 --> 00:16:32.950
size and arr of left greater than Max 

312
00:16:33.440 --> 00:16:36.640
And we have one less than size and 80 greater  

313
00:16:36.640 --> 00:16:41.100
than 10 So left child is greater than parent so update 

314
00:16:41.100 --> 00:16:43.570
Max max equal to left 

315
00:16:43.570 --> 00:16:47.870
Now that is one now check if right child is 

316
00:16:47.870 --> 00:16:51.560
greater than Max So we have if right less than or 

317
00:16:51.560 --> 00:16:55.300
equal to size and arr of right greater than arr 

318
00:16:55.300 --> 00:16:59.680
of Max and we have two less than size but 

319
00:16:59.690 --> 00:17:02.260
60 is not greater than 80 

320
00:17:02.640 --> 00:17:06.250
So if fails and see now we have the maximum 

321
00:17:06.250 --> 00:17:08.960
value of this sub tree at Max 

322
00:17:09.640 --> 00:17:14.680
Now check If Max was updated that is Max was 

323
00:17:14.690 --> 00:17:19.090
initially set to index now check If Max and index are 

324
00:17:19.090 --> 00:17:22.740
the same but max equal to two and index equal to 

325
00:17:22.740 --> 00:17:23.270
0 

326
00:17:23.280 --> 00:17:24.670
So it is not the same 

327
00:17:25.130 --> 00:17:29.280
So if conditions is true now so swap elements at 

328
00:17:29.280 --> 00:17:32.660
Max and Index that is 80 and 10 

329
00:17:33.540 --> 00:17:36.660
Now the maximum element is at the root position 

330
00:17:37.140 --> 00:17:40.200
Again we need to check for the max heap property for 

331
00:17:40.200 --> 00:17:44.750
the swapped Index So call heapify again by passing array 

332
00:17:44.760 --> 00:17:49.480
Max and size So here index equal to one and 

333
00:17:49.480 --> 00:17:53.200
size equal to six now let us find The left and 

334
00:17:53.200 --> 00:17:56.880
right child of the node at this index so left 

335
00:17:56.880 --> 00:18:00.340
equal to two indo index plus one that is two 

336
00:18:00.340 --> 00:18:03.460
into one plus one which is three and right equal 

337
00:18:03.460 --> 00:18:07.980
to left plus one that is four now set max 

338
00:18:07.980 --> 00:18:12.060
equal to index That is one now check if left 

339
00:18:12.060 --> 00:18:15.780
and right child is greater than this node So we 

340
00:18:15.780 --> 00:18:19.570
have if left less than or equal to size arr 

341
00:18:19.570 --> 00:18:24.180
of left greater than arr of Max and left three 

342
00:18:24.190 --> 00:18:25.430
is less than size 

343
00:18:25.750 --> 00:18:29.250
And arr of left 30 is greater than arr of 

344
00:18:29.260 --> 00:18:33.360
max 10 So update Max that is set max to 

345
00:18:33.360 --> 00:18:33.820
left 

346
00:18:33.830 --> 00:18:36.840
That is three now check the right child 

347
00:18:36.970 --> 00:18:41.330
We have right four less than size but arr of 

348
00:18:41.330 --> 00:18:46.050
right 20 is not greater than arr of max 30 

349
00:18:46.440 --> 00:18:48.600
So if fails now check 

350
00:18:48.610 --> 00:18:52.750
If Max was updated and it was so swap Elements 

351
00:18:52.760 --> 00:18:56.210
at Max and Index and again we need to check 

352
00:18:56.210 --> 00:18:59.160
for max heap property for the swapped Index 

353
00:18:59.640 --> 00:19:00.520
So call heapify 

354
00:19:00.520 --> 00:19:04.260
again by passing array max and size 

355
00:19:05.040 --> 00:19:08.170
So here index equal to three and size equal to 

356
00:19:08.170 --> 00:19:08.760
six 

357
00:19:09.640 --> 00:19:12.640
now let us find the left and right child of the 

358
00:19:12.640 --> 00:19:16.430
node at this index so left equal to two Indo 

359
00:19:16.430 --> 00:19:19.430
Index plus one that is two into three plus one 

360
00:19:19.430 --> 00:19:22.770
which is seven and right equal to left plus one 

361
00:19:22.780 --> 00:19:27.080
that is eight and set max equal to index that 

362
00:19:27.080 --> 00:19:28.260
is three now 

363
00:19:28.740 --> 00:19:31.790
Now check if left and right child is greater than 

364
00:19:31.800 --> 00:19:32.470
this node 

365
00:19:33.240 --> 00:19:37.950
But if fails as left seven it's not less than or equal 

366
00:19:37.950 --> 00:19:41.190
to size and the next if also fails 

367
00:19:41.200 --> 00:19:45.300
Since right Index eight is also not less than or 

368
00:19:45.300 --> 00:19:50.400
equal to size and the next if also fails since 

369
00:19:50.400 --> 00:19:55.320
Max was not updated so the function is completed now 

370
00:19:55.330 --> 00:19:58.360
and control gets back to built heap and in the 

371
00:19:58.360 --> 00:20:03.000
next iteration i equal to minus one and the condition I 

372
00:20:03.010 --> 00:20:06.320
greater than or equal to zero fails and control comes 

373
00:20:06.330 --> 00:20:07.250
out of the for 

374
00:20:07.250 --> 00:20:08.690
Loop and see 

375
00:20:08.970 --> 00:20:13.680
Now this complete tree exactly satisfies the max heap property 

376
00:20:13.770 --> 00:20:17.700
The maximum Element 80 is present at the root and 

377
00:20:17.710 --> 00:20:21.350
every sub tree's root value is maximum of its Children 

378
00:20:22.140 --> 00:20:24.520
So that is how we can construct a binary 

379
00:20:24.520 --> 00:20:25.710
heap from an array 

380
00:20:26.340 --> 00:20:28.470
We learned how to construct a heap 

381
00:20:28.480 --> 00:20:31.610
We have to find the bottom most sub tree and 

382
00:20:31.610 --> 00:20:34.610
from the bottom most sub tree to top we have 

383
00:20:34.620 --> 00:20:38.550
to check and satisfy the heap property that is for 

384
00:20:38.550 --> 00:20:39.230
max heap 

385
00:20:39.240 --> 00:20:42.410
The parent should be greater than its Children and form 

386
00:20:42.410 --> 00:20:43.000
min heap 

387
00:20:43.000 --> 00:20:46.710
The parent should be smaller than its Children and we 

388
00:20:46.720 --> 00:20:48.870
also learned how to implement it 

389
00:20:49.190 --> 00:20:52.050
And in implementation we have two functions 

390
00:20:52.440 --> 00:20:55.670
First is build heap which will call the heapify 

391
00:20:55.670 --> 00:20:59.260
function to satisfy the heap property from the bottom 

392
00:20:59.260 --> 00:21:03.020
Most node and the heapify function will find the 

393
00:21:03.020 --> 00:21:06.180
left and right nodes and arranges it based on the 

394
00:21:06.180 --> 00:21:07.050
heap property 

395
00:21:07.900 --> 00:21:11.240
And finally we will have the complete tree which satisfies 

396
00:21:11.240 --> 00:21:12.630
the heap property 

397
00:21:12.700 --> 00:21:13.800
So that all 

398
00:21:14.100 --> 00:21:16.490
And in the next video we will learn how to remove a max element from the constructed heap.

