WEBVTT

1
00:00:00.340 --> 00:00:01.070
Hi friends 

2
00:00:01.240 --> 00:00:04.790
In this video we will discuss about functions returning structure 

3
00:00:04.790 --> 00:00:05.460
pointers. 

4
00:00:010.600 --> 00:00:16.000
So we already learned about passing a structure pointer to a 

5
00:00:16.000 --> 00:00:19.439
function and using it how can we access the structure 

6
00:00:19.440 --> 00:00:22.760
members and even modify them from the function itself 

7
00:00:23.540 --> 00:00:26.870
Now let us learn how functions can return a structure 

8
00:00:26.870 --> 00:00:27.300
pointer 

9
00:00:27.300 --> 00:00:29.780
 so see this example programme 

10
00:00:29.790 --> 00:00:32.830
Here we have to call a function, read the structure 

11
00:00:32.830 --> 00:00:36.010
elements from there and return it to main and print it 

12
00:00:36.010 --> 00:00:36.350
there 

13
00:00:37.340 --> 00:00:41.260
First we have the structure declaration for employee with members 

14
00:00:41.270 --> 00:00:42.860
name, age and weight 

15
00:00:43.740 --> 00:00:47.020
Next we can see the prototype of a function  

16
00:00:47.020 --> 00:00:52.800
getDetails which returns a structure employee pointer. Now in main 

17
00:00:52.810 --> 00:00:56.150
we create a structure pointer 'e' and call the function 

18
00:00:56.160 --> 00:00:59.099
get details, so the control goes to the function and 

19
00:00:59.100 --> 00:01:00.580
it is pushed onto the stack

20
00:01:01.640 --> 00:01:05.720
now if we create a local structure variable, read the data to 

21
00:01:05.720 --> 00:01:07.160
it and return it to main 

22
00:01:07.280 --> 00:01:10.990
It will result in dangling pointer as the structure members 

23
00:01:10.990 --> 00:01:13.289
are deleted from the stack after the return 

24
00:01:13.840 --> 00:01:17.270
So we should create a memory dynamically in the function 

25
00:01:17.310 --> 00:01:19.250
and return to the calling function 

26
00:01:19.740 --> 00:01:23.150
Here we have a structure pointer declaration for ptr

27
00:01:23.300 --> 00:01:24.200
and using malloc 

28
00:01:24.200 --> 00:01:26.260
we assign dynamic memory 

29
00:01:26.270 --> 00:01:29.380
So we get the memory for structure employee allocated 

30
00:01:30.440 --> 00:01:34.850
Suppose it is allocated at address 1024. 

31
00:01:34.850 --> 00:01:37.500
So ptr will store 1024 

32
00:01:38.040 --> 00:01:41.400
Now we ask the user to enter the employee details 

33
00:01:41.410 --> 00:01:44.520
and suppose the user enters name equal to abc 

34
00:01:44.530 --> 00:01:48.190
age equal to 20 and weight equal to 55.5 

35
00:01:48.840 --> 00:01:52.029
And these values are stored into this allocated memory 

36
00:01:52.640 --> 00:01:53.800
Now we return ptr

37
00:01:53.800 --> 00:01:57.509
that is 1024 to the calling function main and 

38
00:01:57.510 --> 00:02:01.170
store it in e. So e now points to this 

39
00:02:01.170 --> 00:02:02.620
address 1024 

40
00:02:02.630 --> 00:02:05.960
And now when we write e->name we get abc

41
00:02:05.970 --> 00:02:09.019
So it will get printed in the first print 

42
00:02:09.020 --> 00:02:09.640
statement 

43
00:02:09.910 --> 00:02:14.089
Similarly when we print e->age we will get 20 

44
00:02:14.090 --> 00:02:16.320
printed and then we print e->weight

45
00:02:16.330 --> 00:02:18.970
We will get 55.5 printed 

46
00:02:19.640 --> 00:02:22.220
Now that we're done with this memory we can delete it

47
00:02:22.220 --> 00:02:23.780
using the function free 

48
00:02:24.240 --> 00:02:25.880
And finally the programme returns

49
00:02:25.890 --> 00:02:26.359
Zero 

50
00:02:27.340 --> 00:02:29.630
So that's all and thank you for watching this video 

