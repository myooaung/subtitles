WEBVTT

1
00:00:00.240 --> 00:00:01.110
Hi friends 

2
00:00:01.120 --> 00:00:05.710
In this video we are going to discuss about the need of arrays.

3
00:00:10.710 --> 00:00:13.379
So why do we need an array? Let us 

4
00:00:13.380 --> 00:00:16.610
consider the situation where we need to get 10 students age 

5
00:00:16.620 --> 00:00:20.520
and store it for some purpose. Since age is an 

6
00:00:20.520 --> 00:00:24.340
integer type, we can store it like this, declaring 10 integer 

7
00:00:24.340 --> 00:00:25.380
variables 

8
00:00:26.340 --> 00:00:29.470
Now what if there are 20 students whose age we

9
00:00:29.470 --> 00:00:32.830
need to get? Then we should declare 20 integer

10
00:00:32.830 --> 00:00:33.449
variables. 

11
00:00:33.840 --> 00:00:36.900
But this way it is very difficult to create variables,

12
00:00:37.010 --> 00:00:39.510
manipulate them and to keep track of them 

13
00:00:40.140 --> 00:00:42.490
and we have a great solution to this problem.

14
00:00:42.500 --> 00:00:46.690
Use arrays. So what is an array? An array is a 

15
00:00:46.690 --> 00:00:50.350
collection of variables of the same data type like the 

16
00:00:50.350 --> 00:00:54.400
collection of integers or collection of characters or collection of 

17
00:00:54.400 --> 00:00:55.780
floating point numbers etc.

18
00:00:56.840 --> 00:01:00.150
But we can't group different data types in an array 

19
00:01:00.540 --> 00:01:04.130
like we cannot have integers and characters and float together 

20
00:01:04.130 --> 00:01:05.550
 in the same collection.

21
00:01:06.140 --> 00:01:10.149
So an array is sometimes called as Homogeneous data type.

22
00:01:10.540 --> 00:01:13.860
So coming back to our issue, we had to get 

23
00:01:13.870 --> 00:01:15.720
age of 10 students 

24
00:01:15.850 --> 00:01:19.490
So instead of creating 10 integer variables we can 

25
00:01:19.490 --> 00:01:23.020
just create an integer array of size 10 

26
00:01:23.020 --> 00:01:26.910
array elements are stored in sequential memory locations here 

27
00:01:26.920 --> 00:01:30.290
Since the array is of integer type, first element 

28
00:01:30.290 --> 00:01:34.460
will take four bytes from 1024 to 1027 

29
00:01:34.940 --> 00:01:40.010
the second element will take four bytes from 1028 to 1031 and

30
00:01:40.220 --> 00:01:45.080
so on and the array index starts from 0 to 9 

31
00:01:45.090 --> 00:01:46.650
and not from 1 to 10 

32
00:01:47.240 --> 00:01:51.120
So to access first student age, we can directly use 

33
00:01:51.130 --> 00:01:53.650
index zero that is age[0]

34
00:01:54.140 --> 00:01:58.170
and to access fifth student age we can use index 

35
00:01:58.170 --> 00:02:02.100
four that is age[4] so generally to 

36
00:02:02.100 --> 00:02:06.220
get nth element use index n-1 and an 

37
00:02:06.230 --> 00:02:10.070
array of size n will have elements from index 0 to n-1

38
00:02:10.070 --> 00:02:10.940


39
00:02:11.740 --> 00:02:15.020
Now we can relate an apartment to an array. 

40
00:02:15.030 --> 00:02:18.820
Say house is a datatype then Apartment is an array of houses 

41
00:02:19.840 --> 00:02:22.030
So this apartment has three houses 

42
00:02:22.440 --> 00:02:25.640
house[0] is the first house, house[1]

43
00:02:25.650 --> 00:02:28.350
is the second house and house[2] is the 

44
00:02:28.360 --> 00:02:29.780
third house and so on. 

45
00:02:31.240 --> 00:02:33.510
So that's all and thank you for watching this video 

