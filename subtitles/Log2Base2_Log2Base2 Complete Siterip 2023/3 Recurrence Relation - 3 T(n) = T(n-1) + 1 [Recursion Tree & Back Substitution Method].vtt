WEBVTT

1
00:00:00.160 --> 00:00:02.890
In this video let us take this sample recursive 

2
00:00:02.890 --> 00:00:06.530
algorithm and find its time complexity using recursion tree 

3
00:00:06.540 --> 00:00:08.130
and back substitution method 

4
00:00:08.570 --> 00:00:11.700
So this is the algorithm and we already wrote the recurrence 

5
00:00:11.700 --> 00:00:15.510
relation for this algorithm the recurrence relation for this algorithm 

6
00:00:15.510 --> 00:00:18.890
is T(n) is T(n-1) + 1 

7
00:00:18.890 --> 00:00:21.970
where n>0 and T(n) 

8
00:00:21.980 --> 00:00:25.700
is 1 when n=0 so let us solve this

9
00:00:25.700 --> 00:00:30.290
recurrence relation with recursion tree method. For that first we 

10
00:00:30.290 --> 00:00:32.000
need to draw the recursion tree 

11
00:00:32.010 --> 00:00:34.620
Then we need to mark the time taken at each 

12
00:00:34.620 --> 00:00:35.160
level 

13
00:00:35.170 --> 00:00:38.850
And finally we can calculate the total time complexity 

14
00:00:39.930 --> 00:00:43.130
So first let us draw the recursion tree first 

15
00:00:43.140 --> 00:00:44.020
write T(n)

16
00:00:44.310 --> 00:00:47.280
What will T(n) do if n is greater than 

17
00:00:47.280 --> 00:00:50.490
zero It will print n and call itself with 

18
00:00:50.490 --> 00:00:51.280
n-1 

19
00:00:51.790 --> 00:00:54.560
The print statement will take one unit of time 

20
00:00:54.650 --> 00:00:57.640
So write one and T(n-1) here 

21
00:00:58.070 --> 00:00:59.200
again T(n-1) 

22
00:00:59.225 --> 00:01:02.175
 is a recursive call so it will take one 

23
00:01:02.175 --> 00:01:05.125
unit of time and call itself with n-2

24
00:01:05.545 --> 00:01:07.155
again n-2 

25
00:01:07.155 --> 00:01:09.675
is a recursive call so It will also take one 

26
00:01:09.675 --> 00:01:12.555
unit of time and call itself with n-3

27
00:01:13.055 --> 00:01:16.115
This recursive tree will grow similarly and it will 

28
00:01:16.115 --> 00:01:20.255
stop at T(0). At T(0)

29
00:01:20.265 --> 00:01:23.595
it won't make any further recursive call as  

30
00:01:23.595 --> 00:01:24.235
n=0

31
00:01:24.770 --> 00:01:27.980
Now there is marked the total time taken at each 

32
00:01:27.980 --> 00:01:29.270
level of the tree 

33
00:01:29.280 --> 00:01:32.080
Since there is only one print statement preasant in the 

34
00:01:32.080 --> 00:01:35.780
algorithm at each level, it will only take a constant 

35
00:01:35.780 --> 00:01:38.630
amount of time so we can write one unit  

36
00:01:38.630 --> 00:01:40.410
of time for each level 

37
00:01:41.290 --> 00:01:45.920
Finally let us calculate the total complexity for nth level 

38
00:01:45.930 --> 00:01:46.960
The will be n+1

39
00:01:46.960 --> 00:01:50.150
recursive calls and each call takes one unit of 

40
00:01:50.150 --> 00:01:50.630
time 

41
00:01:50.640 --> 00:01:54.330
Here plus one is for the recursive call T(0)

42
00:01:54.520 --> 00:01:57.020
So total complexity is 

43
00:01:57.020 --> 00:01:57.460
n+1

44
00:01:57.780 --> 00:02:00.280
We can say it is O(n) or Linear

45
00:02:00.280 --> 00:02:01.400
 time function 

46
00:02:01.810 --> 00:02:02.420
That's it 

47
00:02:02.950 --> 00:02:05.670
This is how we can calculate the time complexity of 

48
00:02:05.680 --> 00:02:08.350
the recursive function using recursion tree method 

49
00:02:09.060 --> 00:02:13.530
Next Let us calculate the time complexity using back substitution method 

50
00:02:13.540 --> 00:02:15.900
which is also known as iteration method 

51
00:02:16.640 --> 00:02:19.730
In this approach we put the recurrence relation back into 

52
00:02:19.730 --> 00:02:22.650
itself until we see a pattern and when we see 

53
00:02:22.650 --> 00:02:24.150
the pattern we will solve it 

54
00:02:24.450 --> 00:02:27.360
For example here the recurrence relation is T(n) 

55
00:02:27.370 --> 00:02:29.850
equal to T(n-1) + 1

56
00:02:30.220 --> 00:02:32.630
If T(n) is equal to T(n-1) + 1 

57
00:02:32.630 --> 00:02:35.020
 then what will be T(n-1)

58
00:02:35.020 --> 00:02:37.980
 It will be T(n-1-1) + 1

59
00:02:37.990 --> 00:02:41.320
 that is  T(n-2)

60
00:02:41.330 --> 00:02:41.910
plus one

61
00:02:42.340 --> 00:02:45.530
So in this equation instead of T(n-1)

62
00:02:45.530 --> 00:02:49.150
we can substitute T(n-2)+1

63
00:02:49.150 --> 00:02:52.230
so it will become T(n-2)

64
00:02:52.240 --> 00:02:53.040
plus 2 

65
00:02:53.540 --> 00:02:56.380
And now what will be T(n-2). It 

66
00:02:56.380 --> 00:02:59.250
will be  T(n-2-1) + 1

67
00:02:59.260 --> 00:03:02.060
that is T(n-3)+1 

68
00:03:02.060 --> 00:03:02.460


69
00:03:02.570 --> 00:03:05.210
So instead of T(n-2) substitute 

70
00:03:05.210 --> 00:03:08.310
T(n-3)+1 and it will become 

71
00:03:08.320 --> 00:03:10.260
T(n-3)+3 

72
00:03:10.680 --> 00:03:14.130
Similarly if we back substitute for K times we will 

73
00:03:14.130 --> 00:03:16.980
get T(n) equal to T(n-k)+K

74
00:03:16.980 --> 00:03:21.010
 here the value of n is decreasing

75
00:03:21.010 --> 00:03:24.000
by one at each level and at some level it 

76
00:03:24.000 --> 00:03:27.320
will become zero but we don't exactly know at which 

77
00:03:27.320 --> 00:03:27.690
level 

78
00:03:28.240 --> 00:03:31.330
So let us  assume that Kth  level the value of n 

79
00:03:31.330 --> 00:03:32.260
becomes zero 

80
00:03:32.740 --> 00:03:35.050
If that is the case the value of n-k 

81
00:03:35.050 --> 00:03:37.070
will be zero at Kth level 

82
00:03:37.410 --> 00:03:40.090
And when we say n-k=0 it 

83
00:03:40.090 --> 00:03:41.560
means K equal to n

84
00:03:41.740 --> 00:03:44.860
So we can substitute n instead of K in this 

85
00:03:44.860 --> 00:03:45.690
equation 

86
00:03:45.780 --> 00:03:48.800
So it will become T(n) equals to T(n-n)+n

87
00:03:48.810 --> 00:03:53.000
 and n-n equal to zero 

88
00:03:53.010 --> 00:03:54.780
So it will become T(0) 

89
00:03:56.020 --> 00:03:58.490
And we know the value of T(0) is 

90
00:03:58.490 --> 00:03:58.940
1 

91
00:03:59.180 --> 00:04:02.160
So substituted one instead of T(0) and we 

92
00:04:02.160 --> 00:04:04.550
will get T(n) equal to 1+n

93
00:04:05.620 --> 00:04:07.360
Thats it. we got the answer 

94
00:04:07.360 --> 00:04:08.900
that is n+1 time 

95
00:04:09.280 --> 00:04:11.880
And this is linear time function and we can save 

96
00:04:11.890 --> 00:04:13.530
this recurrence relations time 

97
00:04:13.530 --> 00:04:16.680
Complexity is O(n) and that's it. 

98
00:04:16.860 --> 00:04:20.030
We have got the same time complexity in both recursion

99
00:04:20.030 --> 00:04:21.930
tree and back substitution method 

100
00:04:22.340 --> 00:04:25.090
In the next videos we will see more examples. Thankyou!


