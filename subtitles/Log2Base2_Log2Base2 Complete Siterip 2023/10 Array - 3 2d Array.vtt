WEBVTT

1
00:00:00.440 --> 00:00:01.220
Hi friends 

2
00:00:01.230 --> 00:00:04.530
In this video we are going to discuss about two dimensional or 2D arrays.

3
00:00:10.530 --> 00:00:13.490
So a 2 dimensional array is a collection of one 

4
00:00:13.490 --> 00:00:17.300
dimensional arrays and the syntax is specify the data type 

5
00:00:17.310 --> 00:00:19.720
and then the name of the array and then specify

6
00:00:19.720 --> 00:00:23.099
the number of rows and columns separately within square brackets 

7
00:00:23.240 --> 00:00:24.939
and finally a semi colon.

8
00:00:25.640 --> 00:00:28.030
Now let's take an example. A 2D array 

9
00:00:28.030 --> 00:00:31.200
with three rows and three columns we can visualise the 

10
00:00:31.200 --> 00:00:34.220
2D array as a matrix. Though we declare the 

11
00:00:34.220 --> 00:00:35.810
array row and column wise 

12
00:00:35.810 --> 00:00:38.900
The array elements are stored in sequential memory locations 

13
00:00:38.910 --> 00:00:42.450
Here we can see the address is starting from 1000 

14
00:00:42.620 --> 00:00:47.750
then 1004 ,1008, 1012 upto 1032 

15
00:00:48.240 --> 00:00:51.050
Now let us understand the position of each element. 

16
00:00:51.250 --> 00:00:54.700
First element is in row zero and column zero that is  

17
00:00:54.700 --> 00:00:58.360
position 00. The second element is in the row 0 

18
00:00:58.360 --> 00:01:01.860
and column 1 that is position 01. Third element is 

19
00:01:01.860 --> 00:01:05.620
in row 0 and column 2 that is position 02 

20
00:01:06.540 --> 00:01:08.980
So these are the first row elements or row 0 

21
00:01:08.980 --> 00:01:09.480
elements 

22
00:01:09.490 --> 00:01:11.890
Now let us see the second row elements which are 

23
00:01:11.900 --> 00:01:14.540
Forth element of the 2D Array at row 1 

24
00:01:14.550 --> 00:01:18.310
column 0 that is position 10 the fifth element at 

25
00:01:18.310 --> 00:01:21.480
row 1 column 1 that is position 11 and the 

26
00:01:21.480 --> 00:01:24.560
sixth element at row 1 column 2 that is position 

27
00:01:24.560 --> 00:01:25.179
12 

28
00:01:25.940 --> 00:01:28.440
And now let us see the third row elements which 

29
00:01:28.440 --> 00:01:31.030
are the seventh element of the 2D array at row 2 

30
00:01:31.030 --> 00:01:34.470
Column 0 that is position 20 and the 

31
00:01:34.480 --> 00:01:37.710
eighth element at row 2 column 1 that is position 

32
00:01:37.720 --> 00:01:40.810
21 and the ninth element at row 2 column 2

33
00:01:40.820 --> 00:01:41.230
 that 

34
00:01:41.230 --> 00:01:44.800
is position 22. Now let's take an integer 2D 

35
00:01:44.800 --> 00:01:46.380
array which has the elements 

36
00:01:46.840 --> 00:01:53.900
1 2 3 4 5 6 7 8 9. So 1 will be stored in arr[0][0] 

37
00:01:53.900 --> 00:01:57.140
2 will be stored in arr[0][1] and so on. 

38
00:01:57.440 --> 00:01:59.350
And finally we get like this. 

39
00:01:59.740 --> 00:02:02.320
We can also declare the 2D array row wise 

40
00:02:02.320 --> 00:02:02.869
like this 

41
00:02:02.880 --> 00:02:05.919
We will discuss more about the declaration and initialisation 

42
00:02:05.920 --> 00:02:07.600
of 2D array in the next video 

43
00:02:07.610 --> 00:02:10.750
Now let us see how to access 2D array elements 

44
00:02:10.760 --> 00:02:13.530
so we can access any element using the indices  

45
00:02:13.780 --> 00:02:16.590
So to access the row 2 and column 2 element 

46
00:02:16.740 --> 00:02:20.470
Use arr[2][2] and we can access the element 

47
00:02:20.470 --> 00:02:24.010
in this position which is 9 and to access row

48
00:02:24.010 --> 00:02:25.510
0 and column 1 element 

49
00:02:25.510 --> 00:02:28.190
We can use arr[0][1] and we 

50
00:02:28.190 --> 00:02:30.750
can get the value stored in here which is 2 

51
00:02:31.140 --> 00:02:34.380
similarly to access row 1 and column 1 element 

52
00:02:34.390 --> 00:02:37.640
Use arr[1][1] and we can get the value 

53
00:02:37.650 --> 00:02:38.540
which is 5

54
00:02:38.550 --> 00:02:40.840
So that's all and thank you for watching this video 

