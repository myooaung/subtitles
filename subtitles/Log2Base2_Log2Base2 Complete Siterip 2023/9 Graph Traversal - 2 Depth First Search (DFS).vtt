WEBVTT

1
00:00:00.440 --> 00:00:01.300
Hello friends 

2
00:00:01.420 --> 00:00:04.450
And in this video let us discuss about depth first 

3
00:00:04.450 --> 00:00:05.120
search  

4
00:00:05.120 --> 00:00:05.610
DFS

5
00:00:06.240 --> 00:00:09.340
So we have learned about graphs and how can we 

6
00:00:09.340 --> 00:00:12.950
travels graphs that is visit every node of the graph 

7
00:00:13.140 --> 00:00:16.620
We have two major methods for that one is breadth 

8
00:00:16.620 --> 00:00:19.870
first search BFS and the next one is depth first 

9
00:00:19.870 --> 00:00:20.530
search 

10
00:00:20.530 --> 00:00:21.040
DFS 

11
00:00:21.540 --> 00:00:25.350
We have already learnt about BFS which uses an Queue

12
00:00:25.740 --> 00:00:28.200
and in this video let us discuss about 

13
00:00:28.200 --> 00:00:32.080
DFS which uses stack simply let us understand 

14
00:00:32.080 --> 00:00:33.050
how it is done 

15
00:00:33.640 --> 00:00:37.790
Let us start from vertex a so visit a insert 

16
00:00:37.800 --> 00:00:40.780
it into the stack and added to a visited array 

17
00:00:40.780 --> 00:00:44.710
Also in this array visited the vertices that are 

18
00:00:44.710 --> 00:00:46.150
visited will be added 

19
00:00:46.710 --> 00:00:50.620
Now it has a only it means only a is 

20
00:00:50.620 --> 00:00:51.210
visited 

21
00:00:51.490 --> 00:00:55.030
Now take a from stack and pushed its adjacent  

22
00:00:55.030 --> 00:00:59.250
nodes into the stack that is B C and D 

23
00:00:59.840 --> 00:01:02.430
So these are pushed into the stack and added to 

24
00:01:02.430 --> 00:01:06.510
the visited array also now pop the element from stack 

25
00:01:06.520 --> 00:01:09.320
which will be the top element which is D here 

26
00:01:09.590 --> 00:01:13.780
and visit its neighbours which are A B C and 

27
00:01:13.790 --> 00:01:14.150
E 

28
00:01:14.540 --> 00:01:18.610
A B c are already visited so add E into 

29
00:01:18.610 --> 00:01:23.140
the stack and visited array so E is pushed and inserted 

30
00:01:23.140 --> 00:01:23.760
to the array 

31
00:01:23.760 --> 00:01:28.140
Also now again pop the element from stack which is E 

32
00:01:28.350 --> 00:01:31.690
now visit all neighbours of E which are B 

33
00:01:31.700 --> 00:01:35.880
and D But both are already visited here so do 

34
00:01:35.880 --> 00:01:38.980
nothing and pop the next element which is C and 

35
00:01:38.990 --> 00:01:42.360
again all the neighbours of C are already visited 

36
00:01:42.670 --> 00:01:45.740
So pop again and we got B now and its 

37
00:01:45.740 --> 00:01:48.770
neighbours are a d and e again 

38
00:01:48.780 --> 00:01:52.750
All these are visited and now the stack is empty 

39
00:01:53.020 --> 00:01:55.200
and there are no more nodes to process 

40
00:01:55.440 --> 00:01:58.080
So we can say all nodes of the graph are 

41
00:01:58.080 --> 00:02:01.570
visited now So this is what DFS traversel is 

42
00:02:01.950 --> 00:02:04.910
We start from a vertex node visited it with 

43
00:02:04.910 --> 00:02:08.920
it all its neighbours and then choose one Vertex from 

44
00:02:08.920 --> 00:02:09.180
it 

45
00:02:09.190 --> 00:02:12.960
Then visit all its neighbours and continue so let us 

46
00:02:12.960 --> 00:02:14.470
See how to implement it 

47
00:02:14.840 --> 00:02:19.490
Define size of graph V as five now in Main 

48
00:02:19.610 --> 00:02:22.650
let us define the graph as an adjacency matrix 

49
00:02:22.980 --> 00:02:26.930
so we have arr of VV equal to this values

50
00:02:27.320 --> 00:02:30.300
So the graph is defined now Now let us call 

51
00:02:30.300 --> 00:02:34.840
the function DFS by passing this adjacency matrix Arr and  

52
00:02:34.840 --> 00:02:36.000
the starting Vertex 

53
00:02:36.400 --> 00:02:39.670
We can start from any Vertex Here we will start 

54
00:02:39.670 --> 00:02:40.950
from the Vertex Zero 

55
00:02:41.440 --> 00:02:45.320
So control gets here and arr stored in arr and 

56
00:02:45.320 --> 00:02:46.950
zero is stored in source 

57
00:02:47.440 --> 00:02:50.760
And as we know for DFS we need two data 

58
00:02:50.760 --> 00:02:53.380
structures a stack and a visited array 

59
00:02:54.040 --> 00:02:57.620
So declare the array is visited of size V that 

60
00:02:57.620 --> 00:03:00.630
is five now The first step is to insert the 

61
00:03:00.630 --> 00:03:03.580
starting Vertex to stack and make it visited 

62
00:03:04.120 --> 00:03:08.380
The right push off source zero is inserted into the 

63
00:03:08.380 --> 00:03:11.530
stack Now make it visited in the 

64
00:03:11.530 --> 00:03:16.220
isVisited so  isvisited of source that is isvisited

65
00:03:16.220 --> 00:03:19.340
of zero is equal to one Now we have to 

66
00:03:19.340 --> 00:03:20.780
visit its neighbours 

67
00:03:21.200 --> 00:03:24.020
For that we can use a while loop till the 

68
00:03:24.020 --> 00:03:28.000
stack becomes empty First remove the element from stack and 

69
00:03:28.000 --> 00:03:31.890
store it in node So zero is popped and stored in

70
00:03:31.890 --> 00:03:36.230
node and now print zero is visited Now how can 

71
00:03:36.230 --> 00:03:39.170
you find its neighbours say this is vertex zero 

72
00:03:39.290 --> 00:03:42.260
If there is an edge from 0 to 1 1 is 

73
00:03:42.260 --> 00:03:45.370
neighbour of zero And if the recent edge From 0 

74
00:03:45.370 --> 00:03:49.200
to 2 2 is neighbour of zero and again if there 

75
00:03:49.200 --> 00:03:52.730
isn't edge from 0 to 3 3 is a neighbour and 

76
00:03:53.110 --> 00:03:54.450
it will continue like that 

77
00:03:54.740 --> 00:03:58.020
And how can we check that Here we can simply 

78
00:03:58.020 --> 00:04:01.660
check the adjacency matrix which all columns are having 

79
00:04:01.660 --> 00:04:03.030
value one in zero 

80
00:04:03.030 --> 00:04:08.650
Through we have 01 equal to 1 02 equal to 1 03 

81
00:04:08.660 --> 00:04:09.550
equal to one 

82
00:04:09.940 --> 00:04:14.140
So 1 2 and three are neighbours of zero 

83
00:04:14.350 --> 00:04:15.640
So this is the logic 

84
00:04:15.830 --> 00:04:18.640
So use a for loop for index equal to 

85
00:04:18.640 --> 00:04:22.760
zero index less than V index plus plus in first 

86
00:04:22.760 --> 00:04:25.290
iteration index is equal to zero 

87
00:04:25.660 --> 00:04:26.650
Next we have 

88
00:04:26.810 --> 00:04:30.810
If arr of node index equal to one that is we 

89
00:04:30.810 --> 00:04:34.660
are checking wheather index is neighbour of node or 

90
00:04:34.660 --> 00:04:38.780
not and isVisited of Index equal to zero that is 

91
00:04:38.950 --> 00:04:41.190
checking if it is already visited 

92
00:04:41.570 --> 00:04:44.700
So if indexes in neighbour of node and if it 

93
00:04:44.700 --> 00:04:47.880
is not already visited we have to add it to 

94
00:04:47.880 --> 00:04:49.850
the stack and make it visited 

95
00:04:50.240 --> 00:04:53.900
But here we have arr of 00 equal to 

96
00:04:53.900 --> 00:04:54.300
zero 

97
00:04:54.600 --> 00:04:58.690
So if fails and in next iteration index equal to 

98
00:04:58.690 --> 00:05:02.700
one and arr of 01 is equal to one and 

99
00:05:02.710 --> 00:05:06.520
isVisited of one equal to zero that is one 

100
00:05:06.520 --> 00:05:09.740
is not visited yet and it is a neighbour of 

101
00:05:09.740 --> 00:05:13.730
zero so inserted into a stack and make it visited 

102
00:05:14.000 --> 00:05:16.550
so isVisited of one equal to one 

103
00:05:16.550 --> 00:05:20.070
Now now in the next iteration index is equal to 

104
00:05:20.070 --> 00:05:22.930
two an arr of 02 equal to one 

105
00:05:23.280 --> 00:05:26.250
And isVisited of two is equal to zero 

106
00:05:26.730 --> 00:05:29.910
that is two is a neighbour of zero and it is 

107
00:05:29.910 --> 00:05:33.990
not visited yet so insert it into the stack and 

108
00:05:33.990 --> 00:05:34.960
make it visited 

109
00:05:35.280 --> 00:05:38.760
So isVisited of two is equal to one Now 

110
00:05:39.160 --> 00:05:42.070
now in the next iteration index is equal to a 

111
00:05:42.070 --> 00:05:44.980
three and arr  of 03 equal to one 

112
00:05:45.260 --> 00:05:48.550
An isVisited of three is equal to zero that 

113
00:05:48.550 --> 00:05:51.610
is three is not visited yet and it is a 

114
00:05:51.610 --> 00:05:55.350
neighbour of zero so inserted into the stack  make 

115
00:05:55.350 --> 00:05:56.050
it visited 

116
00:05:56.440 --> 00:05:59.160
So isVisited of three as equal to one 

117
00:05:59.160 --> 00:06:02.620
Now now in the next iteration index is equal to 

118
00:06:02.620 --> 00:06:06.410
four and arr  of 04 is equal to zero and 

119
00:06:06.410 --> 00:06:07.050
not one 

120
00:06:07.540 --> 00:06:11.470
So if fails and in next iteration index is equal 

121
00:06:11.470 --> 00:06:13.450
to five which is not less than V 

122
00:06:13.750 --> 00:06:16.830
So conditions fails and control comes out of for 

123
00:06:16.830 --> 00:06:19.960
loop now in next iteration of while loop we have 

124
00:06:19.970 --> 00:06:22.930
to remove the element from this stack and store it 

125
00:06:22.930 --> 00:06:23.480
in node 

126
00:06:23.640 --> 00:06:26.190
And three is the element at the top of the 

127
00:06:26.190 --> 00:06:26.630
stack 

128
00:06:26.640 --> 00:06:29.220
So it is popped and stored and node 

129
00:06:29.230 --> 00:06:31.950
Now print vertex three is visited 

130
00:06:32.080 --> 00:06:34.270
Now we have to visit its neighbours 

131
00:06:34.430 --> 00:06:35.410
So again use 

132
00:06:35.410 --> 00:06:38.810
The four loop in first iteration index is equal to 

133
00:06:38.810 --> 00:06:41.940
zero an arr  of 30 equal to one 

134
00:06:42.230 --> 00:06:45.580
That condition is okay but isVisited of zero is 

135
00:06:45.590 --> 00:06:47.950
also equal to one and not equal to zero 

136
00:06:48.270 --> 00:06:51.420
That is zero is neighbour of three but it is 

137
00:06:51.430 --> 00:06:52.450
already visited 

138
00:06:52.740 --> 00:06:56.630
So if fails and in next iteration index is equal 

139
00:06:56.630 --> 00:07:00.320
to one an arr  of 31 is equal to one 

140
00:07:00.490 --> 00:07:03.650
but isVisited of one is also equal to one 

141
00:07:03.660 --> 00:07:04.880
and not equal to zero 

142
00:07:05.310 --> 00:07:09.360
So again if fails here in next iteration index is 

143
00:07:09.370 --> 00:07:12.670
equal to two and arr  of 32 is equal to 

144
00:07:12.670 --> 00:07:16.100
one but isVisited of two is also equal to 

145
00:07:16.100 --> 00:07:17.550
one and not equal to zero 

146
00:07:17.740 --> 00:07:21.460
So again if fails and in next iteration index equal 

147
00:07:21.460 --> 00:07:25.140
to three and arr of 33 is equal to zero 

148
00:07:25.390 --> 00:07:29.230
So if fails again and in next iteration index is 

149
00:07:29.230 --> 00:07:32.350
equal to four and arr  of 34 equal to 

150
00:07:32.350 --> 00:07:35.560
one and isVisited of four is equal to zero 

151
00:07:35.920 --> 00:07:39.360
that is four is a neighbour of three and it is not 

152
00:07:39.360 --> 00:07:40.270
visited yet 

153
00:07:40.640 --> 00:07:43.850
So insert it into the stack and make it visited 

154
00:07:44.100 --> 00:07:47.370
So isVisited of four is equal to one now 

155
00:07:48.040 --> 00:07:52.300
in next iteration condition Index less than V fails and 

156
00:07:52.300 --> 00:07:55.510
control comes out of for loop and in the next 

157
00:07:55.510 --> 00:07:56.860
iteration of while Loop 

158
00:07:56.980 --> 00:08:01.730
Stack is not empty yet so continue perform pop operation 

159
00:08:01.730 --> 00:08:04.600
to remove the element at the top and store it in the 

160
00:08:04.600 --> 00:08:05.020
node 

161
00:08:05.180 --> 00:08:07.750
So four is popped and stored in node 

162
00:08:08.140 --> 00:08:11.480
Now print four isVisited and now we have to 

163
00:08:11.480 --> 00:08:12.950
visit its neighbours 

164
00:08:13.440 --> 00:08:17.560
But if will fail in every iteration of this for 

165
00:08:17.560 --> 00:08:21.960
loop since isVisited is one for every index and 

166
00:08:21.960 --> 00:08:25.570
in next iteration of while Loop pop the element from 

167
00:08:25.570 --> 00:08:28.760
Stack which will be two and print visited node is 

168
00:08:28.760 --> 00:08:32.520
two and again the same happens and in next iteration 

169
00:08:32.890 --> 00:08:36.050
popped the element from Stack which is one now and 

170
00:08:36.050 --> 00:08:38.670
print visited node is one and again 

171
00:08:38.680 --> 00:08:39.780
The same happens 

172
00:08:40.250 --> 00:08:43.330
And in the next iteration of while loop the condition 

173
00:08:43.530 --> 00:08:47.760
not isStack empty will fail since the stack is 

174
00:08:47.770 --> 00:08:48.590
empty now 

175
00:08:48.730 --> 00:08:52.190
So control comes out of while loop and the Traversel 

176
00:08:52.190 --> 00:08:53.650
is now completed 

177
00:08:54.240 --> 00:08:55.580
Now one question to you 

178
00:08:55.630 --> 00:08:58.680
Why did we use the isVisited array And what 

179
00:08:58.680 --> 00:09:01.770
will happen if we didn't use it See a traversel 

180
00:09:01.770 --> 00:09:03.950
means we have to visit each node 

181
00:09:04.280 --> 00:09:07.290
If we had an kept track of visited nodes we 

182
00:09:07.290 --> 00:09:09.280
would visit it again and again 

183
00:09:09.830 --> 00:09:12.980
And we know graphs might contain cycles and we might 

184
00:09:12.980 --> 00:09:14.760
get into an infinite loop 

185
00:09:15.020 --> 00:09:19.310
So using this Boolean array isVisited we can avoid such 

186
00:09:19.320 --> 00:09:19.970
issues 

187
00:09:20.280 --> 00:09:23.160
So this is what depth first search traversal is.

