WEBVTT

1
00:00:00.340 --> 00:00:04.580
so let us write a function LCS which takes the subsequent 

2
00:00:04.580 --> 00:00:08.050
CE is pointed by X and Y and its size 

3
00:00:08.060 --> 00:00:12.090
M and N For the ease of calculation we are adding 

4
00:00:12.130 --> 00:00:15.120
an empty character at the beginning So we need to 

5
00:00:15.130 --> 00:00:18.630
create a table for m plus one and n plus one 

6
00:00:18.630 --> 00:00:19.190
size 

7
00:00:19.540 --> 00:00:23.420
So create a two dimensional array with one extra row 

8
00:00:23.430 --> 00:00:27.990
and column so write int DP of n plus one n 

9
00:00:27.990 --> 00:00:32.690
plus one and we need two iterating variables I and J 

10
00:00:32.700 --> 00:00:37.700
So write int I j to iterate row write 

11
00:00:37.730 --> 00:00:41.630
outer for loop from I equal to 0 to I less than 

12
00:00:41.640 --> 00:00:44.890
or equal to M and to iterate The column 

13
00:00:45.070 --> 00:00:48.370
write inner for loop from J equal to zero to 

14
00:00:48.370 --> 00:00:51.050
J less than or equal to n as we are 

15
00:00:51.050 --> 00:00:55.080
considering first characters as empty we need to mark the 

16
00:00:55.080 --> 00:00:58.460
first row and first column element to zero 

17
00:00:58.560 --> 00:01:02.380
So write if I equal to zero or J equal to 

18
00:01:02.380 --> 00:01:06.880
zero dp of ij equal to zero If the characters 

19
00:01:06.880 --> 00:01:10.140
are equal we need to add one to the previous 

20
00:01:10.140 --> 00:01:14.900
longest common subsequent length that can be found at DP 

21
00:01:14.900 --> 00:01:17.300
of I minus one J minus one 

22
00:01:17.440 --> 00:01:21.520
So write else if X of I minus one equal 

23
00:01:21.520 --> 00:01:25.670
to why of j minus one dp of ij equal 

24
00:01:25.670 --> 00:01:29.090
to DP of I minus one J minus one plus 

25
00:01:29.090 --> 00:01:29.580
one 

26
00:01:29.690 --> 00:01:32.860
If the characters are not equal we need to see 

27
00:01:32.860 --> 00:01:36.060
what is the maximum length we can get between these 

28
00:01:36.060 --> 00:01:40.760
two sequences that is the sequence excluding the row element 

29
00:01:40.920 --> 00:01:43.950
And another one is excluding the column element 

30
00:01:44.040 --> 00:01:47.160
The maximum length we can get by excluding the row 

31
00:01:47.160 --> 00:01:50.710
element is dp of I minus one J and the 

32
00:01:50.710 --> 00:01:52.470
maximum length we can get by 

33
00:01:52.470 --> 00:01:56.650
Excluding the column element is dp of i j minus 

34
00:01:56.650 --> 00:01:56.950
one 

35
00:01:57.440 --> 00:02:02.460
So write else dp of ij equal to Max of 

36
00:02:02.710 --> 00:02:06.180
dp of i minus one j coma dp of i 

37
00:02:06.190 --> 00:02:07.230
j minus one 

38
00:02:07.610 --> 00:02:11.080
This logic will calculate the result for all these sub 

39
00:02:11.090 --> 00:02:14.490
problems and the final result will be stored in the 

40
00:02:14.490 --> 00:02:15.250
last cell 

41
00:02:15.640 --> 00:02:19.940
So finally return dp of m n and that's it 

42
00:02:20.040 --> 00:02:24.320
We have implemented the longest common subsequent CE problem with dynamic programming approach. 

