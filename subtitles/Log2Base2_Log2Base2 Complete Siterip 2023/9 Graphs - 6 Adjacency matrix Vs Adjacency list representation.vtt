WEBVTT

1
00:00:00.540 --> 00:00:01.320
Hello friends 

2
00:00:01.440 --> 00:00:04.440
In this video let us do a comparison of  

3
00:00:04.440 --> 00:00:08.150
adjacency matrix and adjacency list representation of the graph 

4
00:00:08.540 --> 00:00:12.040
So before getting started with this first let us learn what 

5
00:00:12.040 --> 00:00:14.550
is said dense graph and what is sparse graph 

6
00:00:15.140 --> 00:00:17.750
So a dense graph is a graph Where the number 

7
00:00:17.750 --> 00:00:21.100
of edges are close to the maximum number of edges 

8
00:00:21.190 --> 00:00:24.600
or which is almost equal to V square and see 

9
00:00:24.600 --> 00:00:28.450
this graph here every word Text connected to each other 

10
00:00:28.840 --> 00:00:31.650
Hence we can call this as a dense graph 

11
00:00:32.140 --> 00:00:35.080
So what will be a sparse graph It will be 

12
00:00:35.090 --> 00:00:37.820
a graph for the number of adjacent close to 

13
00:00:37.820 --> 00:00:41.120
the minimal number of edges or which is almost equal 

14
00:00:41.120 --> 00:00:44.860
to V say this graph here the vertices are connected 

15
00:00:44.860 --> 00:00:45.650
sparsely 

16
00:00:46.340 --> 00:00:48.850
Hence we can call this as sparse graph 

17
00:00:49.940 --> 00:00:53.010
Let us understand which is the best method to represent 

18
00:00:53.010 --> 00:00:55.150
the dense graph and this sparse graph 

19
00:00:55.640 --> 00:00:58.190
So let us take the graph of 5 vertices 

20
00:00:58.510 --> 00:01:01.720
So we equal to five here So it will be 

21
00:01:01.730 --> 00:01:03.130
a V by V matrix 

22
00:01:03.190 --> 00:01:05.750
So the space complexity will be order of V 

23
00:01:05.750 --> 00:01:08.570
square that his order five square that is order of 

24
00:01:08.570 --> 00:01:12.430
25 if you use adjacency List to represent 

25
00:01:12.430 --> 00:01:16.260
this graph the space complexity will be order of V plus 

26
00:01:16.260 --> 00:01:19.850
E because it will be V less with a total 

27
00:01:19.850 --> 00:01:20.460
of E 

28
00:01:20.460 --> 00:01:24.340
edges that is order of five plus seven which 

29
00:01:24.340 --> 00:01:28.140
is order of 12 and to add a New Edge in 

30
00:01:28.150 --> 00:01:31.870
adjacency matrix to add edge from 0 to 1 

31
00:01:32.080 --> 00:01:34.770
you have to go to row zero and column one 

32
00:01:34.780 --> 00:01:36.360
and set the value as one 

33
00:01:36.370 --> 00:01:40.030
So a constant time is only required that is order 

34
00:01:40.030 --> 00:01:41.600
of one time will be needed 

35
00:01:41.610 --> 00:01:44.870
That is to set that particular position as one and 

36
00:01:44.870 --> 00:01:46.680
in case of adjacency list 

37
00:01:46.690 --> 00:01:49.650
Adding a new edge will take order of one time 

38
00:01:50.240 --> 00:01:53.100
if the node is added at the beginning of the 

39
00:01:53.100 --> 00:01:53.580
list 

40
00:01:53.610 --> 00:01:57.510
So both representations take the same time and to check 

41
00:01:57.520 --> 00:01:59.530
whether an edge excess or not 

42
00:01:59.540 --> 00:02:02.990
In the graph in adjacency matrix we only need 

43
00:02:02.990 --> 00:02:05.150
to check if that position is one 

44
00:02:05.540 --> 00:02:08.710
For example to check whether the edge from 0 to 

45
00:02:08.710 --> 00:02:12.390
3 exist go to row zero column three and the 

46
00:02:12.390 --> 00:02:13.630
value here is one 

47
00:02:13.690 --> 00:02:16.920
So the edge exist and if it was zero 

48
00:02:16.980 --> 00:02:20.020
Then we can understand that the edge does not exist in the 

49
00:02:20.020 --> 00:02:20.510
graph 

50
00:02:20.800 --> 00:02:23.530
So the time Taken is an order of one again 

51
00:02:23.800 --> 00:02:25.950
And here in adjacency list 

52
00:02:26.040 --> 00:02:28.930
If the Vertex has K nodes in the list we 

53
00:02:28.930 --> 00:02:32.150
have to traverse the list to find that node so 

54
00:02:32.160 --> 00:02:34.910
it will take order of K time so it is 

55
00:02:34.920 --> 00:02:37.510
order of one in adjacency matrix and order of 

56
00:02:37.520 --> 00:02:41.000
K in adjacency list and to remove an edge 

57
00:02:41.000 --> 00:02:43.410
from the graph in adjacency matrix 

58
00:02:43.420 --> 00:02:46.710
We can set that particular position in the matrix as 

59
00:02:46.710 --> 00:02:50.240
zero for example to remove the edge from 0 to 

60
00:02:50.240 --> 00:02:53.630
3 go to row zero column three and set the 

61
00:02:53.630 --> 00:02:54.740
value as zero 

62
00:02:54.750 --> 00:02:57.550
So again the time complexity is order of one 

63
00:02:57.840 --> 00:02:59.360
And in the adjacency list 

64
00:02:59.370 --> 00:03:02.280
First we have to find the node in the list 

65
00:03:02.290 --> 00:03:05.710
and then deleted so it will take order of K 

66
00:03:05.710 --> 00:03:06.590
time again 

67
00:03:07.040 --> 00:03:09.940
So for adjacency matrix it is order of one 

68
00:03:10.020 --> 00:03:12.560
and for adjacency list it is order of K 

69
00:03:12.680 --> 00:03:15.470
And what if we want to add a new vertex 

70
00:03:15.470 --> 00:03:18.600
in the graph For example if we want to add 

71
00:03:18.600 --> 00:03:21.430
one more vertex in this graph that is a total 

72
00:03:21.430 --> 00:03:22.650
of six vertices 

73
00:03:23.040 --> 00:03:26.140
Then we need to create a six by six matrix 

74
00:03:26.150 --> 00:03:28.930
and then we need to copy the old edge matrix 

75
00:03:28.930 --> 00:03:29.750
to the new one 

76
00:03:30.340 --> 00:03:33.300
So the time complexity is order of V square that 

77
00:03:33.300 --> 00:03:37.310
is six square that is order of 36 adding  

78
00:03:37.310 --> 00:03:39.800
adjacency list to add a new Vertex 

79
00:03:39.810 --> 00:03:42.960
It will take order of one time only because we 

80
00:03:42.960 --> 00:03:46.630
can simply increase the size dynamically so it is order 

81
00:03:46.630 --> 00:03:50.080
of K in matrix and order of one in list 

82
00:03:50.080 --> 00:03:50.970
representation 

83
00:03:51.440 --> 00:03:55.080
So what can we conclude from these observations If the 

84
00:03:55.090 --> 00:03:58.180
graph is done we can use adjacency matrix 

85
00:03:58.180 --> 00:04:02.040
representation as the graph will at most have V square 

86
00:04:02.050 --> 00:04:05.480
edges so it can effectively Utilize matrix 

87
00:04:05.620 --> 00:04:10.580
Also many operations such as add edge remove edge find edge will 

88
00:04:10.580 --> 00:04:12.650
take order of one time only 

89
00:04:13.340 --> 00:04:16.420
And if the graph is passed we can use adjacency 

90
00:04:16.420 --> 00:04:17.950
list representation 

91
00:04:18.440 --> 00:04:19.830
If we use the adjacency 

92
00:04:19.830 --> 00:04:23.500
matrix here it will not utilise all the spaces 

93
00:04:23.900 --> 00:04:27.400
so we should use adjacency list representation as it 

94
00:04:27.410 --> 00:04:29.860
takes or drop V plus E space 

95
00:04:30.340 --> 00:04:33.390
But some of the operations such as fine edge remove 

96
00:04:33.390 --> 00:04:35.590
edge will take order K time if the vertex has K edges
