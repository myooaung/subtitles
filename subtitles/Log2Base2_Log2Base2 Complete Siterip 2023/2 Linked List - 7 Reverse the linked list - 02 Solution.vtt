WEBVTT

1
00:00:00.040 --> 00:00:00.870
Hello friends 

2
00:00:00.920 --> 00:00:03.870
In this video let us learn how to reverse a 

3
00:00:03.870 --> 00:00:04.700
linked list.

4
00:00:04.710 --> 00:00:08.050
We have given a linked list with its head pointer 

5
00:00:08.540 --> 00:00:12.030
Our task is to reverse the given linked list by 

6
00:00:12.030 --> 00:00:14.650
changing the links between each node 

7
00:00:15.440 --> 00:00:18.790
Let us take this linked list with three nodes with 10

8
00:00:18.790 --> 00:00:22.700
as the head and our task is to reverse 

9
00:00:22.710 --> 00:00:23.800
this linked list. 

10
00:00:23.940 --> 00:00:27.450
And at the end, the expected linked list is like this. 

11
00:00:27.460 --> 00:00:27.970


12
00:00:28.810 --> 00:00:31.150
The last node 30 will be the head 

13
00:00:31.640 --> 00:00:34.900
So how to do that? Now let us reverse it step by step

14
00:00:34.900 --> 00:00:35.550


15
00:00:36.140 --> 00:00:40.780
So let us declare two variables first is current which references 

16
00:00:40.780 --> 00:00:41.700
the head node 

17
00:00:41.730 --> 00:00:46.200
So set current as head second is prev to reverse 

18
00:00:46.200 --> 00:00:48.570
the linked list. In the reverse linked list 

19
00:00:48.740 --> 00:00:49.690
first node's 

20
00:00:49.690 --> 00:00:54.660
next should be null. So set prev equal to null 

21
00:00:54.660 --> 00:00:56.120
In the expected linked list 

22
00:00:56.300 --> 00:00:59.850
10-next will be equal to null. So let us set

23
00:01:00.020 --> 00:01:00.520


24
00:01:00.530 --> 00:01:06.320
current-next equal to prev. So 10-next becomes null. But we 

25
00:01:06.320 --> 00:01:10.730
missed the link between 10 and 20. So we can't 

26
00:01:10.730 --> 00:01:14.690
do any further operations as we lost the link between 

27
00:01:14.700 --> 00:01:15.950
10 and 20. 

28
00:01:16.340 --> 00:01:19.300
So before changing the link, we need to back up 

29
00:01:19.300 --> 00:01:20.330
the next node's address.

30
00:01:20.340 --> 00:01:24.720
So let us use another variable next to back up the 

31
00:01:24.720 --> 00:01:27.750
next node's address before changing the link 

32
00:01:28.340 --> 00:01:31.630
The first take back up of next node in the 

33
00:01:31.630 --> 00:01:32.750
next variable.

34
00:01:33.240 --> 00:01:37.390
So next equal to current next and then change the 

35
00:01:37.390 --> 00:01:42.220
link to reverse the link list so current next equal 

36
00:01:42.220 --> 00:01:42.700
to prev

37
00:01:43.540 --> 00:01:46.410
Now we have modified the links of one node. 

38
00:01:46.420 --> 00:01:48.830
That is the first node. It is now 

39
00:01:48.840 --> 00:01:52.210
as we expected. We need to do the same 

40
00:01:52.210 --> 00:01:55.760
process to all other nodes to reverse the entire linked list. 

41
00:01:55.760 --> 00:01:57.630
For second node 

42
00:01:57.830 --> 00:02:00.930
previous node would be the first node that is 10 

43
00:02:01.120 --> 00:02:04.460
So make the previous point a point to current node 

44
00:02:04.470 --> 00:02:05.340
that is 10. 

45
00:02:05.650 --> 00:02:08.050
So write prev is equal to current 

46
00:02:08.440 --> 00:02:11.620
And we need to change the link of node 20 

47
00:02:11.630 --> 00:02:13.590
so that will become the current node 

48
00:02:13.750 --> 00:02:16.840
So make the current node point to the next node 

49
00:02:17.130 --> 00:02:21.240
that is current equal to next. Do the same process 

50
00:02:21.240 --> 00:02:23.750
till current node is not equal to null 

51
00:02:24.340 --> 00:02:27.120
So put this code inside a while loop until

52
00:02:27.130 --> 00:02:31.680
current node not equal to null. In the next iteration, condition 

53
00:02:31.680 --> 00:02:36.010
is okay. So 20 should point to 10. That is next 

54
00:02:36.010 --> 00:02:37.540
of 20 should be node 10. 

55
00:02:37.540 --> 00:02:42.060
But if we change the link now itself,

56
00:02:42.060 --> 00:02:43.750
we will lose the node 30 

57
00:02:44.050 --> 00:02:47.050
So back up the next node and change the link. 

58
00:02:47.440 --> 00:02:51.770
So write current next equal to prev. So 20 now 

59
00:02:51.770 --> 00:02:52.850
points to 10. 

60
00:02:53.240 --> 00:02:55.960
So first node and second node is okay now.

61
00:02:55.960 --> 00:02:59.950
Now move prev to current and current to next 

62
00:03:00.440 --> 00:03:04.660
Now in the next iteration, condition is okay. 

63
00:03:04.660 --> 00:03:08.160
Here to back up the next node, move next to current next 

64
00:03:08.170 --> 00:03:09.450
which is null here.

65
00:03:09.840 --> 00:03:14.450
Next 30 should point to its previous node 20. 

66
00:03:14.450 --> 00:03:18.850
So write current next equal to prev. So 30 now points to 20.

67
00:03:18.850 --> 00:03:22.900
Now move prev to current and current to next.

68
00:03:22.900 --> 00:03:23.450


69
00:03:23.940 --> 00:03:27.550
Now we have changed the links of all the nodes 

70
00:03:28.140 --> 00:03:31.760
So in next iteration, while we check the condition it fails

71
00:03:31.760 --> 00:03:35.650
 Now the node 30 should be the head node 

72
00:03:36.140 --> 00:03:40.310
And how can we set 30 as the head?  

73
00:03:40.320 --> 00:03:43.150
Currently, which variable is pointing to 30? It is prev. 

74
00:03:43.540 --> 00:03:47.800
So while reversing a linked list after reversal the last 

75
00:03:47.800 --> 00:03:52.020
node will be pointed by prev. So make head equal 

76
00:03:52.020 --> 00:03:53.850
to prev and it is done. 

77
00:03:54.330 --> 00:03:59.060
We got our expected reverse linked list from the head the nodes are 30 20 10 null.

