WEBVTT

1
00:00:00.100 --> 00:00:03.950
so let us write a function Reverse sub list bypassing the head of 

2
00:00:03.960 --> 00:00:06.820
the list the start and end of sub list 

3
00:00:07.010 --> 00:00:09.720
And it will reverse the sub list and returned the 

4
00:00:09.720 --> 00:00:12.430
head of the list Now when start is equal to 

5
00:00:12.430 --> 00:00:12.840
end 

6
00:00:12.850 --> 00:00:14.930
We can return the head nodes straight away 

7
00:00:15.260 --> 00:00:18.650
So write if start is equal to end return head 

8
00:00:19.040 --> 00:00:22.310
now we need to move a pointer till start index 

9
00:00:22.700 --> 00:00:25.180
and also we need to track the last node of 

10
00:00:25.190 --> 00:00:29.280
part one so let us declare a pointer current and move it 

11
00:00:29.290 --> 00:00:32.470
till the start index while moving current pointer 

12
00:00:32.540 --> 00:00:35.350
We will keep the last node in the previous pointer

13
00:00:35.740 --> 00:00:39.020
declare current and initialised to head and set the 

14
00:00:39.020 --> 00:00:41.990
previous pointer as null and write a for loop 

15
00:00:42.000 --> 00:00:45.030
to move the current node till the start index So 

16
00:00:45.030 --> 00:00:47.820
write for I equal to one current not equal 

17
00:00:47.820 --> 00:00:50.070
to null and I less than start 

18
00:00:50.080 --> 00:00:53.850
I plus plus inside that keep the current variable in 

19
00:00:53.850 --> 00:00:56.960
previous and then moved the current variable to next node 

20
00:00:57.200 --> 00:01:00.860
So write prev equal to current and current equal to 

21
00:01:00.860 --> 00:01:01.250
current 

22
00:01:01.250 --> 00:01:05.130
Next after the execution of Loop current pointer will be 

23
00:01:05.130 --> 00:01:08.340
present at the Start index and previous pointer will be 

24
00:01:08.340 --> 00:01:10.700
present in the last node of part one 

25
00:01:11.180 --> 00:01:14.560
So back up the previous pointer in another variable first 

26
00:01:14.560 --> 00:01:14.860
part 

27
00:01:14.860 --> 00:01:15.580
Last node 

28
00:01:15.880 --> 00:01:20.090
So write Struct node Star First part Last node equal 

29
00:01:20.090 --> 00:01:20.550
to prev 

30
00:01:21.040 --> 00:01:24.520
And after the reversal the node 20 will become last 

31
00:01:24.530 --> 00:01:25.570
of Part two 

32
00:01:25.580 --> 00:01:28.680
We need that node to make Connexion with third part 

33
00:01:28.930 --> 00:01:30.460
So back up the current node 

34
00:01:30.650 --> 00:01:33.700
20 in another variable second part 

35
00:01:33.700 --> 00:01:34.500
Last node 

36
00:01:34.760 --> 00:01:38.750
So write start second part last node equal to current 

37
00:01:39.140 --> 00:01:41.590
Now we have backed up all the required nodes 

38
00:01:41.790 --> 00:01:43.630
Now we can reverse the sub list 

39
00:01:43.640 --> 00:01:45.980
That is second part till end index 

40
00:01:46.330 --> 00:01:49.240
For that we can use linked lis reversal logic 

41
00:01:49.540 --> 00:01:53.340
This is the logic for linked list reversal here wanting 

42
00:01:53.340 --> 00:01:57.310
to notice the for Loop termination condition here 

43
00:01:57.320 --> 00:02:01.020
End index is five and START index is two so we need 

44
00:02:01.020 --> 00:02:04.440
to Reverse five minus two plus one that is four 

45
00:02:04.440 --> 00:02:04.950
nodes 

46
00:02:05.740 --> 00:02:09.750
The nodes are node 20 30 40 and 50 

47
00:02:10.340 --> 00:02:11.030
In general 

48
00:02:11.140 --> 00:02:14.970
For given start and end index the total number of nodes 

49
00:02:14.970 --> 00:02:15.670
to be reversed 

50
00:02:15.670 --> 00:02:18.150
is end minus start plus one 

51
00:02:18.640 --> 00:02:21.820
That's why we have used this as the for loop termination 

52
00:02:21.820 --> 00:02:25.590
condition so write the for loop for I equal to one 

53
00:02:25.810 --> 00:02:28.800
current not equal to null and I less than or equal 

54
00:02:28.800 --> 00:02:32.320
to  n minus start plus one I plus plus and 

55
00:02:32.320 --> 00:02:36.370
in each iteration though next equal to current next current 

56
00:02:36.370 --> 00:02:39.720
next equal to prev prev equal to current and current 

57
00:02:39.720 --> 00:02:40.650
equal to next 

58
00:02:41.440 --> 00:02:44.530
Now after the reversal the previous pointer will be present 

59
00:02:44.530 --> 00:02:44.970
in node 

60
00:02:44.970 --> 00:02:47.880
50 and current pointer will be present in node 

61
00:02:47.880 --> 00:02:48.450
60 

62
00:02:48.840 --> 00:02:51.130
Now we need to make the required connexions 

63
00:02:51.310 --> 00:02:53.770
We need to connect the last node of first part 

64
00:02:53.770 --> 00:02:56.380
with the starting point of part two which is not 

65
00:02:56.380 --> 00:02:56.850
50 

66
00:02:57.240 --> 00:03:00.450
So check if first part last node is not null 

67
00:03:00.760 --> 00:03:04.290
if it is not null write first part last node 

68
00:03:04.290 --> 00:03:05.450
next equal to prev 

69
00:03:05.840 --> 00:03:08.610
If it is null we need to make node 50 

70
00:03:08.620 --> 00:03:11.360
as head so write head equal to prev 

71
00:03:11.940 --> 00:03:14.110
And then we need to connect the last node of 

72
00:03:14.120 --> 00:03:17.900
the reverse list with third part starting node 60 

73
00:03:18.120 --> 00:03:21.850
So write second part last node next equal to current 

74
00:03:22.740 --> 00:03:25.830
That's it we have reversed the sub list and finally we return the sublist.

