WEBVTT

1
00:00:00.340 --> 00:00:01.160
Hello friends 

2
00:00:01.170 --> 00:00:04.510
In this video let us discuss about the implementation of 

3
00:00:04.520 --> 00:00:05.650
insertion sort 

4
00:00:06.840 --> 00:00:10.460
So this function insertion sort will take the array to 

5
00:00:10.460 --> 00:00:14.510
be sorted and its size as parameters and the array 

6
00:00:14.510 --> 00:00:17.050
passed will be sorted by this function 

7
00:00:17.690 --> 00:00:20.850
Suppose we're passing this array of size five 

8
00:00:21.340 --> 00:00:27.860
We have elements 40 10 50 30 and 20 first 

9
00:00:27.870 --> 00:00:32.100
we declared integer variables I value and index 

10
00:00:32.480 --> 00:00:35.860
Now let us use a for loop for i equal to 

11
00:00:35.860 --> 00:00:37.520
one i less than size 

12
00:00:37.530 --> 00:00:40.390
I plus plus in every iteration 

13
00:00:40.660 --> 00:00:43.710
We copy the current element and the index to 

14
00:00:43.710 --> 00:00:48.330
variables value and index and compared the current element with 

15
00:00:48.330 --> 00:00:49.700
its previous elements 

16
00:00:49.850 --> 00:00:52.980
And if these elements are not in the right order 

17
00:00:52.990 --> 00:00:57.560
it is swapped this we sort the till that particular 

18
00:00:57.570 --> 00:01:01.810
index Let us see how so In the first iteration 

19
00:01:01.820 --> 00:01:05.440
I equal to one so arr of one which is 

20
00:01:05.440 --> 00:01:08.970
10 is copy to value and the index one 

21
00:01:08.980 --> 00:01:13.370
is stored in index now compare ten with its previous 

22
00:01:13.370 --> 00:01:14.050
elements 

23
00:01:14.440 --> 00:01:18.370
So the while condition index greater than zero is true 

24
00:01:18.370 --> 00:01:22.700
here and arr of index minus one greater than value 

25
00:01:22.840 --> 00:01:24.010
is also true 

26
00:01:24.020 --> 00:01:28.280
since 40 is greater than 10 so first Element 40 

27
00:01:28.290 --> 00:01:29.550
is greater than 10 

28
00:01:30.040 --> 00:01:32.790
That is it is not in the right order so 

29
00:01:32.790 --> 00:01:34.350
we need to make changes 

30
00:01:34.840 --> 00:01:38.650
So copy arr of index minus one to arr of 

31
00:01:38.660 --> 00:01:42.550
index and now decrement the index 

32
00:01:42.660 --> 00:01:44.750
So index equal to zero Now 

33
00:01:45.440 --> 00:01:48.990
Now Check the while condition index greater than zero is 

34
00:01:48.990 --> 00:01:50.200
not satisfied 

35
00:01:50.740 --> 00:01:54.420
So control comes out of while loop and set arr 

36
00:01:54.420 --> 00:01:58.950
of index equal to value and first iteration of for 

37
00:01:58.950 --> 00:02:00.460
loop is now completed 

38
00:02:01.040 --> 00:02:05.180
Now in the second iteration i is equal to two so 

39
00:02:05.190 --> 00:02:08.480
arr of two which is 50 is copied to 

40
00:02:08.480 --> 00:02:12.750
value and the index two is copied to index 

41
00:02:13.440 --> 00:02:16.450
now compare 50 with its previous elements 

42
00:02:16.840 --> 00:02:20.880
So the while condition index greater than zero is true 

43
00:02:20.890 --> 00:02:24.600
and the next condition arr of index minus one greater 

44
00:02:24.600 --> 00:02:29.170
than value is failed since 40 is not greater than 

45
00:02:29.170 --> 00:02:29.750
50 

46
00:02:30.340 --> 00:02:31.850
So the conditions failed 

47
00:02:32.640 --> 00:02:34.980
It means from this index 

48
00:02:34.990 --> 00:02:38.550
All previous elements are already in sorted order 

49
00:02:39.140 --> 00:02:42.360
So control comes out of the while Loop and set 

50
00:02:42.590 --> 00:02:47.110
arr of index equal to value and the second iteration 

51
00:02:47.110 --> 00:02:49.090
of for Loop is also completed 

52
00:02:49.090 --> 00:02:53.050
Now Now in the third iteration i is equal to three 

53
00:02:53.640 --> 00:02:56.980
So arr of three which is 30 is copied to 

54
00:02:56.980 --> 00:02:59.430
value and the index three is stored 

55
00:02:59.430 --> 00:03:03.850
index now compared 30 with its previous elements 

56
00:03:04.240 --> 00:03:07.780
So the while condition index greater than zero is true 

57
00:03:07.790 --> 00:03:12.430
since index equal to three and the next condition arr 

58
00:03:12.430 --> 00:03:16.390
of index minus one greater than value is also true 

59
00:03:16.400 --> 00:03:18.750
since 50 is greater than 30 

60
00:03:19.240 --> 00:03:21.330
So it is not in the right order so we 

61
00:03:21.330 --> 00:03:22.820
need to make changes 

62
00:03:22.940 --> 00:03:26.690
So copy arr of index minus one to arr of 

63
00:03:26.700 --> 00:03:30.010
index and now decrement the index 

64
00:03:30.210 --> 00:03:32.350
So index becomes two now 

65
00:03:32.840 --> 00:03:36.110
Now check the while condition index greater than zero is 

66
00:03:36.110 --> 00:03:40.420
satisfied and the next condition arr of index minus one 

67
00:03:40.420 --> 00:03:45.020
greater than value is also true since 40 is greater than

68
00:03:45.020 --> 00:03:48.950
30 So again we need to bring 30 to the 

69
00:03:48.950 --> 00:03:54.320
1st and 40 after that So copy 40 to arr of 

70
00:03:54.330 --> 00:03:59.250
index now Decrement the index so index becomes one now 

71
00:04:00.440 --> 00:04:04.030
now check the while condition index greater than zero is 

72
00:04:04.030 --> 00:04:08.440
satisfied and the next condition arr of index minus one 

73
00:04:08.440 --> 00:04:12.240
greater than value fails since 10 is not greater than 

74
00:04:12.240 --> 00:04:16.900
30 so control comes out of the while loop now 

75
00:04:16.910 --> 00:04:21.650
place value at arr of Index and this iteration of 

76
00:04:21.650 --> 00:04:25.830
for Loop is also completed now in the next iteration i

77
00:04:25.840 --> 00:04:27.350
is equal to four 

78
00:04:27.740 --> 00:04:31.080
So arr of which his 20 is copied to 

79
00:04:31.080 --> 00:04:36.840
value and the index four is stored in index now 

80
00:04:36.840 --> 00:04:39.420
compared 20 with its previous elements 

81
00:04:39.840 --> 00:04:43.650
So the while condition index greater than zero is true 

82
00:04:43.820 --> 00:04:47.150
and arr of index minus one greater than value is 

83
00:04:47.160 --> 00:04:51.560
also true since 50 is greater than 20 so it 

84
00:04:51.560 --> 00:04:53.870
is not in the right order so we need to 

85
00:04:53.870 --> 00:04:54.950
make changes 

86
00:04:55.280 --> 00:04:58.970
So copy arr of index minus one to arr of 

87
00:04:58.980 --> 00:05:05.020
index and now decrement index and index becomes three now so 

88
00:05:05.020 --> 00:05:08.490
the while condition index greater than zero is now true 

89
00:05:08.760 --> 00:05:12.080
An arr of index minus one greater and value is 

90
00:05:12.090 --> 00:05:17.470
also satisfied since 40 is greater than 20 so copy 

91
00:05:17.470 --> 00:05:22.690
40 to arr of index and now decrement index and index 

92
00:05:22.690 --> 00:05:23.850
becomes two now 

93
00:05:24.740 --> 00:05:28.340
Now the while condition index greater than zero is true 

94
00:05:28.620 --> 00:05:32.020
An arr of index minus one greater than value is 

95
00:05:32.030 --> 00:05:36.880
also true since 30 is greater than 20 so copy 

96
00:05:36.880 --> 00:05:41.290
30 to arr of index and now decrement index 

97
00:05:41.300 --> 00:05:43.390
So that index becomes one 

98
00:05:43.390 --> 00:05:49.140
Now Now the while condition index greater than zero is 

99
00:05:49.140 --> 00:05:52.910
true and arr of index minus one Greater than value 

100
00:05:52.920 --> 00:05:56.450
fails since 10 is not greater than 20 

101
00:05:57.040 --> 00:06:00.520
So the control comes out of the while loop now 

102
00:06:00.520 --> 00:06:04.330
place the value 20 at arr of Index which is 

103
00:06:04.340 --> 00:06:05.550
it's right position 

104
00:06:06.340 --> 00:06:09.250
And this iteration of for Loop is also completed 

105
00:06:09.260 --> 00:06:13.120
Now in the next iteration i is equal to five which 

106
00:06:13.120 --> 00:06:14.750
is not less than size 

107
00:06:14.910 --> 00:06:18.600
So the for loop condition fails and control comes out of 

108
00:06:18.600 --> 00:06:19.160
for Loop 

109
00:06:19.580 --> 00:06:21.940
And as you can see the arr is sort out 

110
00:06:21.940 --> 00:06:22.250
now 

111
00:06:22.830 --> 00:06:25.850
so this is how we can implement insertion sort.

