WEBVTT

1
00:00:00.640 --> 00:00:03.540
in this video let us learn how to search a 

2
00:00:03.540 --> 00:00:05.650
node in a circular linked list 

3
00:00:07.240 --> 00:00:09.790
So how can we search node in a circular linked 

4
00:00:09.790 --> 00:00:13.420
list We need to iterate the list and compare 

5
00:00:13.430 --> 00:00:15.800
each nodes data with the key 

6
00:00:15.810 --> 00:00:18.950
And if any pair is the same then the key 

7
00:00:18.950 --> 00:00:19.790
is found 

8
00:00:20.000 --> 00:00:22.100
Otherwise the key is not found 

9
00:00:22.310 --> 00:00:26.180
For example we have this circular linked list here with 

10
00:00:26.190 --> 00:00:28.710
elements 10 20 and 30 

11
00:00:28.990 --> 00:00:31.190
So let us search for the key 30 

12
00:00:31.280 --> 00:00:31.990
So we need to 

13
00:00:32.000 --> 00:00:35.280
Iterate the list starting from the head node and 

14
00:00:35.280 --> 00:00:37.390
compare the key with the data 

15
00:00:37.390 --> 00:00:41.480
Part of each node first compare 30 with head and 

16
00:00:41.480 --> 00:00:42.570
they are not the same 

17
00:00:42.820 --> 00:00:45.430
So compare 30 with 20 again 

18
00:00:45.440 --> 00:00:46.550
It's not the same 

19
00:00:46.640 --> 00:00:49.670
So move to the next node and compare 30 with 

20
00:00:49.670 --> 00:00:50.350
this node 

21
00:00:50.540 --> 00:00:54.010
Now they are the Same so the search is successful 

22
00:00:54.170 --> 00:00:56.350
now let us search for the key 100 

23
00:00:56.740 --> 00:00:59.700
So iterate the list starting from head node and 

24
00:00:59.700 --> 00:01:02.440
compare the key with data part of each node 

25
00:01:02.750 --> 00:01:06.070
So compare 100 with heads data and they are not 

26
00:01:06.070 --> 00:01:06.710
the same 

27
00:01:06.720 --> 00:01:09.160
Now compare 100 with 20 again 

28
00:01:09.160 --> 00:01:10.270
It's not the same 

29
00:01:10.380 --> 00:01:13.650
So moved to next node Compare 100 with this nodes 

30
00:01:13.650 --> 00:01:15.950
Data Again it's not the same 

31
00:01:16.040 --> 00:01:18.810
Now move to the next node and we have reached 

32
00:01:18.810 --> 00:01:19.850
the head again 

33
00:01:20.050 --> 00:01:22.010
So we check the list completely 

34
00:01:22.020 --> 00:01:24.380
And we did not find the key 100 in this 

35
00:01:24.380 --> 00:01:24.850
list 

36
00:01:25.240 --> 00:01:28.490
So the search operation here is unsuccessful 

37
00:01:28.570 --> 00:01:31.560
So this is the code to implement the programme and 

38
00:01:31.560 --> 00:01:35.200
the function search will be doing the search operation and 

39
00:01:35.200 --> 00:01:36.980
returns the result of search 

40
00:01:37.090 --> 00:01:39.790
We are passing the key to be search into this 

41
00:01:39.790 --> 00:01:43.860
function and if the search is successful this function will 

42
00:01:43.860 --> 00:01:46.890
return true and if it is not the function will 

43
00:01:46.890 --> 00:01:47.830
return false 

44
00:01:48.090 --> 00:01:52.070
So we have public Boolean search of int key Now 

45
00:01:52.070 --> 00:01:55.210
let us search for the key 30 here so called 

46
00:01:55.210 --> 00:01:58.550
the function by passing 30 So first we need to 

47
00:01:58.550 --> 00:02:00.970
check if the link list is empty 

48
00:02:01.180 --> 00:02:04.300
So check If head is equal to null if it 

49
00:02:04.300 --> 00:02:06.750
is not it means the list is empty 

50
00:02:06.760 --> 00:02:11.680
Hence the search is unsuccessful so straight away return false But 

51
00:02:11.680 --> 00:02:14.770
here it is not equal to null we have head 

52
00:02:14.780 --> 00:02:18.420
equal 1000 So we need to traverse the list and 

53
00:02:18.420 --> 00:02:21.850
compare the key with each nodes data so let us 

54
00:02:21.850 --> 00:02:25.180
create temp pointing to head so that we can start 

55
00:02:25.190 --> 00:02:26.340
iterating the list 

56
00:02:26.510 --> 00:02:29.520
So how can be traverse a circular linked list we 

57
00:02:29.520 --> 00:02:32.260
normally use of while loop to iterate a linked 

58
00:02:32.260 --> 00:02:35.160
list from head till we reach the next part of 

59
00:02:35.160 --> 00:02:36.300
node Equal to null 

60
00:02:36.440 --> 00:02:39.420
But here it will not work Since the last node 

61
00:02:39.420 --> 00:02:42.450
will be pointing to head again and not to null 

62
00:02:42.640 --> 00:02:44.070
so we can use a do 

63
00:02:44.070 --> 00:02:47.820
while loop so we have do compare the key and 

64
00:02:47.820 --> 00:02:51.970
nodes data and then move to next node and check 

65
00:02:51.980 --> 00:02:55.750
the while condition which is temp not equal to head 

66
00:02:56.240 --> 00:02:59.390
and when temp reaches the head again The Traversal 

67
00:02:59.400 --> 00:03:00.370
is completed 

68
00:03:00.560 --> 00:03:04.180
So first check If head has the key so check 

69
00:03:04.320 --> 00:03:08.000
If temp dot data equal to key but it is 

70
00:03:08.000 --> 00:03:11.600
not so move temp to the next node So temp 

71
00:03:11.600 --> 00:03:13.620
is now pointing to 2000 

72
00:03:13.850 --> 00:03:17.310
So check if temp is pointing to head if it 

73
00:03:17.310 --> 00:03:20.610
is head it means we have completely Travers the linked 

74
00:03:20.610 --> 00:03:23.420
list and control will come out of the while loop 

75
00:03:23.430 --> 00:03:27.120
But here temp equal to 2000 which is not equal 

76
00:03:27.120 --> 00:03:27.610
to head 

77
00:03:27.730 --> 00:03:30.380
So start the next iteration and check 

78
00:03:30.390 --> 00:03:33.750
If the data at this node is the key so 

79
00:03:33.750 --> 00:03:35.750
compare 20 with 30 

80
00:03:35.940 --> 00:03:37.350
But it is not the same 

81
00:03:37.440 --> 00:03:40.910
So if will fail so jump to the next statement temp 

82
00:03:40.910 --> 00:03:44.390
equal to temp dot Next So temp will be holding 

83
00:03:44.390 --> 00:03:49.090
the next nodes address which is 3000 so temp now points 

84
00:03:49.090 --> 00:03:52.270
to the third node Again The while condition is checked 

85
00:03:52.560 --> 00:03:55.710
temp equal to 3000 which is not equal to head

86
00:03:56.050 --> 00:04:00.490
So start the next iteration Now compare Data 30 and 

87
00:04:00.490 --> 00:04:02.750
key 30 both are the same 

88
00:04:02.940 --> 00:04:06.280
So if will return true here so return true as 

89
00:04:06.290 --> 00:04:09.550
the key is found So this is how it works 

90
00:04:09.940 --> 00:04:12.680
Now let us see another case where the search key 

91
00:04:12.690 --> 00:04:18.300
is not found So let us search The key is 100 first temp is 

92
00:04:18.310 --> 00:04:22.770
initialised to head and it first iteration check If this 

93
00:04:22.770 --> 00:04:26.150
node has the key So check If temp dot data 

94
00:04:26.150 --> 00:04:29.220
equal to key but it is not so Move 

95
00:04:29.230 --> 00:04:32.650
temp to the next node So temp is now pointing 

96
00:04:32.650 --> 00:04:36.660
to 2000 Now Check if temp is pointing to head 

97
00:04:36.850 --> 00:04:40.270
but here Temp equal to 2000 which is not equal 

98
00:04:40.270 --> 00:04:44.070
to head So start the next iteration now check if 

99
00:04:44.070 --> 00:04:47.410
the data at temp is the key so compare 20 with 

100
00:04:47.410 --> 00:04:51.820
100 but it fails so jump to the next statement so

101
00:04:51.820 --> 00:04:55.310
now Temp will point to the third node again the 

102
00:04:55.310 --> 00:04:58.420
while condition is checked and we have temp equal to 

103
00:04:58.420 --> 00:05:00.760
3000 which is not equal to head 

104
00:05:00.870 --> 00:05:02.600
So start the next iteration 

105
00:05:02.710 --> 00:05:06.690
Here we compared 30 and the key 100 again 

106
00:05:06.700 --> 00:05:09.760
If will fail and temp is moved to the next 

107
00:05:09.760 --> 00:05:10.160
node 

108
00:05:10.250 --> 00:05:13.760
So Temp equal to 1000 Now now check the condition temp 

109
00:05:13.770 --> 00:05:17.340
Not equal to head but it fails so control will 

110
00:05:17.340 --> 00:05:18.370
come out of this 

111
00:05:18.370 --> 00:05:21.530
Do while Loop and return false as the key was 

112
00:05:21.530 --> 00:05:22.340
not formed 

113
00:05:22.650 --> 00:05:24.690
So that said that's how it works 

114
00:05:24.920 --> 00:05:28.380
Knowledge is talk about the time complexity the best 

115
00:05:28.380 --> 00:05:31.610
cases when the search key is present in the first 

116
00:05:31.610 --> 00:05:35.570
node itself so the Loop need to execute only ones 

117
00:05:35.670 --> 00:05:39.150
So the best case time complexity is order of one 

118
00:05:40.040 --> 00:05:43.090
The worst cases when the search key is present in 

119
00:05:43.090 --> 00:05:44.050
the last node 

120
00:05:44.440 --> 00:05:47.680
So if you have n nodes the loop will have n 

121
00:05:47.690 --> 00:05:48.650
iterations 

122
00:05:49.040 --> 00:05:52.450
So the worst case time complexity is order of n

