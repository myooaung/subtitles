WEBVTT

1
00:00:00.100 --> 00:00:03.140
in this video let us learn how to convert 

2
00:00:03.160 --> 00:00:07.370
Iterative function into recursive function First let us 

3
00:00:07.370 --> 00:00:11.290
take a simple problem for the given positive number n 

4
00:00:11.480 --> 00:00:14.750
we need to print all the numbers from n to one 

5
00:00:15.240 --> 00:00:20.200
For example if n is five we need to print  

6
00:00:20.210 --> 00:00:22.650
54321 

7
00:00:23.140 --> 00:00:26.260
So what will be the iterative logic For this problem 

8
00:00:26.620 --> 00:00:31.350
Let us write an iterative function iteration with parameter n 

9
00:00:31.740 --> 00:00:35.470
now let us write a while loop while n greater 

10
00:00:35.470 --> 00:00:36.800
than or equal to one 

11
00:00:37.130 --> 00:00:40.860
And in each iteration of this while loop print n 

12
00:00:41.110 --> 00:00:42.550
and then decrement n 

13
00:00:43.230 --> 00:00:46.910
So all the numbers n,n minus one,n minus 

14
00:00:46.910 --> 00:00:48.850
two up to one will be printed 

15
00:00:49.240 --> 00:00:53.000
Now we will learn how to convert this iterative function 

16
00:00:53.000 --> 00:00:56.660
to recursive function Here we are using a while 

17
00:00:56.660 --> 00:00:59.830
loop to print the numbers in recursion we need 

18
00:00:59.830 --> 00:01:02.880
to call the function itself to achieve the task 

19
00:01:03.060 --> 00:01:06.890
So write the function name that is Recursion every 

20
00:01:06.890 --> 00:01:10.240
time the value of n is decremented by one in 

21
00:01:10.240 --> 00:01:11.050
the while loop 

22
00:01:11.060 --> 00:01:14.210
So in recursion we can send decremented n 

23
00:01:14.210 --> 00:01:16.280
value in each recursive call 

24
00:01:16.630 --> 00:01:19.400
So write recursion of minus minus 

25
00:01:19.410 --> 00:01:22.910
n this while loop will terminate when the value of n 

26
00:01:22.920 --> 00:01:24.250
is less than one 

27
00:01:24.740 --> 00:01:28.080
Likewise we can add the base case in recursion 

28
00:01:28.470 --> 00:01:31.680
So add the base case to stop the recursive calls 

29
00:01:31.930 --> 00:01:35.200
So write if n is less than one returned 

30
00:01:35.430 --> 00:01:38.940
So also we need to add the print statement to 

31
00:01:38.940 --> 00:01:41.300
print the numbers and that's it 

32
00:01:41.310 --> 00:01:45.280
We have converted the iterative logic into Recursive logic 

33
00:01:45.500 --> 00:01:48.120
So instead of a loop we have use the Recursive 

34
00:01:48.120 --> 00:01:51.740
function called an instead of the termination condition 

35
00:01:51.750 --> 00:01:54.880
We have added the base case in Recursion and 

36
00:01:54.880 --> 00:01:56.250
iterated logic 

37
00:01:56.260 --> 00:01:59.370
We update the value of n by decrementing it 

38
00:01:59.380 --> 00:02:00.450
inside the loop 

39
00:02:00.540 --> 00:02:03.940
But in recursion we have sent that as the parameter 

40
00:02:04.370 --> 00:02:05.120
so led us see 

41
00:02:05.130 --> 00:02:06.130
Another example 

42
00:02:06.130 --> 00:02:09.940
To understand it better let us write the iterative logic 

43
00:02:09.950 --> 00:02:11.060
to reverse the string 

44
00:02:11.370 --> 00:02:14.800
So first write the iterative function reverse by passing the 

45
00:02:14.800 --> 00:02:19.060
string str and its length n first declare variable 

46
00:02:19.070 --> 00:02:23.020
I now use a for loop from i equal to zero 

47
00:02:23.020 --> 00:02:26.500
to I less than n by two and in each iteration 

48
00:02:26.630 --> 00:02:29.650
swap first and last characters of the string 

49
00:02:30.140 --> 00:02:34.070
So write swap str of i and str of n 

50
00:02:34.070 --> 00:02:35.350
minus i minus one 

51
00:02:35.840 --> 00:02:40.100
Now let us convert this iterative logic into recursive logic 

52
00:02:40.300 --> 00:02:43.450
Like the previous example Let us pass the iterating 

53
00:02:43.450 --> 00:02:47.340
variable as a parameter so add the variable I to 

54
00:02:47.340 --> 00:02:49.480
the parameter list Next what 

55
00:02:49.480 --> 00:02:50.380
we will do 

56
00:02:50.390 --> 00:02:54.150
We will convert the looping statement into a recursive call 

57
00:02:54.640 --> 00:02:56.750
So write the function name reverse 

58
00:02:56.980 --> 00:02:59.650
And in each iteration of the for loop we are 

59
00:02:59.660 --> 00:03:01.780
incrementing the iterating variable I

60
00:03:02.350 --> 00:03:05.730
So in each recursive call pass the string str 

61
00:03:05.880 --> 00:03:09.570
and incremented iterating variable I plus one and size 

62
00:03:09.570 --> 00:03:11.650
of string n as arguments 

63
00:03:12.140 --> 00:03:15.170
Now we need to add the base case here 

64
00:03:15.250 --> 00:03:18.410
The for loop will be terminated when value of I 

65
00:03:18.410 --> 00:03:21.550
reaches the middle of string That is n by two 

66
00:03:21.940 --> 00:03:23.290
So right the base case 

67
00:03:23.510 --> 00:03:27.400
If I equal to n by two return now we 

68
00:03:27.400 --> 00:03:31.080
have added the base case and recursive call So inside 

69
00:03:31.080 --> 00:03:34.510
that just swap the first and last characters 

70
00:03:34.760 --> 00:03:38.200
And that's it we have converted the iterative logic into 

71
00:03:38.200 --> 00:03:39.360
Recursive logic 

72
00:03:39.620 --> 00:03:43.130
So what we did is we added the iterating variable 

73
00:03:43.140 --> 00:03:46.700
as the parameter replace the loop with a recursive 

74
00:03:46.700 --> 00:03:50.490
call and place the termination condition as the base case. 

