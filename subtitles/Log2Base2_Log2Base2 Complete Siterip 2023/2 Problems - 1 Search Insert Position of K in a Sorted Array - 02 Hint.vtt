WEBVTT

1
00:00:00.040 --> 00:00:02.950
to solve this problem we can make use of binary 

2
00:00:02.950 --> 00:00:06.420
search algorithm here and make some changes to it in 

3
00:00:06.420 --> 00:00:06.860
binary 

4
00:00:06.860 --> 00:00:07.890
Search algorithm 

5
00:00:08.040 --> 00:00:11.550
We will maintain 2 Indices start and end to mark 

6
00:00:11.550 --> 00:00:15.520
the first and last elements in the array in each iteration 

7
00:00:15.670 --> 00:00:18.550
we will compare the middle element with the key and 

8
00:00:18.550 --> 00:00:22.610
discard one half of the array this we do by adjusting 

9
00:00:22.610 --> 00:00:24.330
the start or end index 

10
00:00:24.840 --> 00:00:28.180
If the element is already present in the array the binary 

11
00:00:28.180 --> 00:00:31.140
search algorithm will return the index of the element 

12
00:00:31.440 --> 00:00:34.670
Let us see how to find appropriate insert position for 

13
00:00:34.670 --> 00:00:38.150
the new element so that given array remains sorted 

14
00:00:38.940 --> 00:00:40.810
let us take this array arr 

15
00:00:40.950 --> 00:00:44.080
And integer 20 let us search for integer 

16
00:00:44.080 --> 00:00:48.510
20 in this array in the first iteration start is zero 

17
00:00:48.520 --> 00:00:51.510
and end is four So mid will be zero plus 

18
00:00:51.510 --> 00:00:54.820
four divided by two which is equal to two array 

19
00:00:54.820 --> 00:00:59.130
of two is 25 25 is greater than 20 as 

20
00:00:59.140 --> 00:01:03.250
this array sorted 20 can only be present before 25 

21
00:01:03.940 --> 00:01:06.630
So we will set end as mid minus one That 

22
00:01:06.630 --> 00:01:09.700
is two minus one which is equal to one now 

23
00:01:09.700 --> 00:01:12.820
start is zero and end is one so Mid will be 

24
00:01:12.820 --> 00:01:13.750
equal to zero 

25
00:01:14.200 --> 00:01:17.410
An array of zero is 14 and 14 is less 

26
00:01:17.410 --> 00:01:18.240
than 20 

27
00:01:18.470 --> 00:01:21.080
Thus we will set start as mid plus one that 

28
00:01:21.080 --> 00:01:22.570
is one now 

29
00:01:22.570 --> 00:01:25.840
Both start and end is one hence mid will also 

30
00:01:25.840 --> 00:01:29.140
be one an array of mid is 17 which is less 

31
00:01:29.140 --> 00:01:29.880
than 20 

32
00:01:30.330 --> 00:01:32.850
So we will again move start to mid plus one 

33
00:01:33.240 --> 00:01:36.900
that is two now start is greater than end so 

34
00:01:36.900 --> 00:01:38.550
the addression will end here 

35
00:01:39.140 --> 00:01:41.850
The end index is now pointing to 17 which is 

36
00:01:41.850 --> 00:01:43.900
that near a smaller number to 20 

37
00:01:44.320 --> 00:01:47.470
If we insert 20 next to 17 the array will 

38
00:01:47.470 --> 00:01:48.370
remain sorted 

39
00:01:48.810 --> 00:01:51.480
That's the right insert position is and plus one.

