WEBVTT

1
00:00:00.240 --> 00:00:04.050
in this video let us learn the characteristics of dynamic programming 

2
00:00:04.440 --> 00:00:06.980
or in other words what kind of a problem can 

3
00:00:06.980 --> 00:00:09.050
be solved using dynamic programming 

4
00:00:09.740 --> 00:00:13.240
Any problem which has the following two main properties can 

5
00:00:13.240 --> 00:00:15.350
be solved using dynamic programming 

6
00:00:15.840 --> 00:00:19.570
The first one is overlapping sub problems property and the 

7
00:00:19.570 --> 00:00:23.710
second one is optimal Sub structure property Let us learn 

8
00:00:23.720 --> 00:00:28.430
these two properties one by one first one Overlapping sub 

9
00:00:28.430 --> 00:00:29.130
problems 

10
00:00:29.410 --> 00:00:32.050
Any problem has overlapping sub problems 

11
00:00:32.170 --> 00:00:35.370
If finding its solution involves solving the same sub 

12
00:00:35.370 --> 00:00:36.850
problem multiple times 

13
00:00:37.440 --> 00:00:40.470
For example let us take the nth Fibonacci number 

14
00:00:40.470 --> 00:00:41.250
Example 

15
00:00:41.740 --> 00:00:44.800
If they break down the nth fibonacci problem we 

16
00:00:44.800 --> 00:00:48.340
can clearly see the overlapping sub problem property 

17
00:00:48.650 --> 00:00:52.110
That is the sub problems fib of two evaluated twice and 

18
00:00:52.110 --> 00:00:55.250
the sub problems fib of one was evaluated thrice 

19
00:00:55.740 --> 00:00:59.240
Here the sub problems are solved multiple times to get 

20
00:00:59.240 --> 00:01:01.050
the overall optimal solution 

21
00:01:01.540 --> 00:01:05.240
Since the end Fibonacci problem has the overlapping sub problem 

22
00:01:05.240 --> 00:01:09.390
property we can solve with using dynamic programming let us 

23
00:01:09.390 --> 00:01:09.870
Discus 

24
00:01:09.870 --> 00:01:13.290
One more example which does not have the overlapping sub 

25
00:01:13.290 --> 00:01:14.250
problem property 

26
00:01:15.140 --> 00:01:18.110
Let us take the binary search problem in binary 

27
00:01:18.110 --> 00:01:21.680
search which is solved using divide and conquer approach does 

28
00:01:21.680 --> 00:01:25.320
not have any comman  sub problems each time 

29
00:01:25.320 --> 00:01:28.010
The sub problems come at a unique arrayed to find 

30
00:01:28.010 --> 00:01:31.200
the element so the binary search problem does not 

31
00:01:31.200 --> 00:01:34.000
follow the property of overlapping sub problems 

32
00:01:34.110 --> 00:01:38.460
Hence we cannot apply the dynamic programming approach to solve 

33
00:01:38.470 --> 00:01:43.450
This problem next let us learn the optimal sub structure property 

34
00:01:43.840 --> 00:01:46.980
Any problem has optimal sub structure property 

35
00:01:47.230 --> 00:01:50.450
If an optimal solution of the overall problem can be 

36
00:01:50.450 --> 00:01:54.780
constructed from the optimal solutions of its sub problems for 

37
00:01:54.780 --> 00:01:58.250
example let us take the same nth fibonacci problem 

38
00:01:58.640 --> 00:01:59.080
here 

39
00:01:59.090 --> 00:02:02.230
Using optimal sub solution of Feb of one and fib 

40
00:02:02.230 --> 00:02:05.670
of zero we can construct an optimal solution for the 

41
00:02:05.670 --> 00:02:06.950
problems fib of two 

42
00:02:07.540 --> 00:02:11.150
Using optimal subsolution of fib of two and fib of one 

43
00:02:11.540 --> 00:02:16.000
we can construct the optimal solution of fib of three In general 

44
00:02:16.240 --> 00:02:18.910
the optimal solution of the overall problem 

45
00:02:18.910 --> 00:02:22.570
Fib of n can be constructed from optimal solutions of 

46
00:02:22.570 --> 00:02:23.560
sub problems 

47
00:02:23.760 --> 00:02:26.310
Fib of n minus one and fib of n minus 

48
00:02:26.310 --> 00:02:28.330
two since the nth 

49
00:02:28.330 --> 00:02:31.940
fibonnaci problem has the optimal sub structure property 

50
00:02:31.950 --> 00:02:34.650
We can solve it using dynamic programming 

51
00:02:35.340 --> 00:02:38.950
If a problem doesn't have optimal sub structure property that 

52
00:02:38.950 --> 00:02:40.290
is the over all optimal 

53
00:02:40.290 --> 00:02:44.260
Result cannot be constructed with optimal solutions of sub problems 

54
00:02:44.560 --> 00:02:48.150
We cannot apply a dynamic programming approach to solve it 

55
00:02:48.740 --> 00:02:51.650
So this are the two main properties of a problem 

56
00:02:51.660 --> 00:02:55.280
which indicates that the given problem can be solved using 

57
00:02:55.280 --> 00:02:56.450
dynamic programming.

