WEBVTT

1
00:00:00.440 --> 00:00:01.100
Hi friends 

2
00:00:01.110 --> 00:00:05.110
In this video we will discuss about string declaration and initialisation.

3
00:00:10.110 --> 00:00:15.110
So first let us discuss above string declaration and the syntax for 

4
00:00:15.110 --> 00:00:15.740
declaring a

5
00:00:15.740 --> 00:00:18.810
String is char followed by the variable_name and 

6
00:00:18.810 --> 00:00:22.210
in square brackets specify the size and a semi colon 

7
00:00:22.840 --> 00:00:25.410
See some examples char name[10]

8
00:00:25.420 --> 00:00:28.970
It will create a string named name of size 10 

9
00:00:29.340 --> 00:00:31.630
Next we have char city[20] 

10
00:00:31.640 --> 00:00:35.610
It will create a string named City of Size 20 

11
00:00:35.710 --> 00:00:39.250
Now let us discuss of string initialisation and 

12
00:00:39.250 --> 00:00:41.850
we can initialise string in different ways 

13
00:00:41.840 --> 00:00:46.040
One method is direct initialisation and in this method the 

14
00:00:46.040 --> 00:00:48.839
string must be enclosed within double quotes and the 

15
00:00:48.840 --> 00:00:53.480
compiler will automatically append a NULL character /0 and 

16
00:00:53.480 --> 00:00:53.790


17
00:00:53.790 --> 00:00:56.250
direct initialisation is done in two ways 

18
00:00:56.260 --> 00:01:00.410
One is direct initialisation with size which specifies the size 

19
00:01:00.410 --> 00:01:02.029
prior to the assignment 

20
00:01:02.740 --> 00:01:05.940
So see this example we have char country[6]="India"

21
00:01:05.950 --> 00:01:09.440
and remember to write the string within 

22
00:01:09.440 --> 00:01:10.289
double quotes 

23
00:01:10.490 --> 00:01:13.380
Now if you see the word India has 

24
00:01:13.380 --> 00:01:16.280
5 letters in it but we had to specify size equal 

25
00:01:16.280 --> 00:01:17.510
to six and not five 

26
00:01:17.850 --> 00:01:21.050
This additional memory is required for the null character 

27
00:01:21.240 --> 00:01:24.270
You always need to allocate one more byte to store 

28
00:01:24.270 --> 00:01:25.220
the null character 

29
00:01:26.140 --> 00:01:29.510
So in general to store n characters in a string we should 

30
00:01:29.510 --> 00:01:31.760
create n+1 string size 

31
00:01:31.920 --> 00:01:34.390
This plus one is for the null character 

32
00:01:34.790 --> 00:01:35.310
Now 

33
00:01:35.320 --> 00:01:38.350
The next method is initialisation without size 

34
00:01:38.500 --> 00:01:41.090
Here we don't need to specify the size 

35
00:01:41.100 --> 00:01:44.110
At first. the size of the string will be determined by 

36
00:01:44.110 --> 00:01:47.250
the compiler. so that was direct initialisation 

37
00:01:47.340 --> 00:01:50.530
Now we have the next method character by character initialisation 

38
00:01:50.530 --> 00:01:51.190


39
00:01:51.200 --> 00:01:54.660
Here we must specify the Null characters \0 at 

40
00:01:54.660 --> 00:01:55.589
the end of the string

41
00:01:55.880 --> 00:01:58.060
Now this can also be done in two ways 

42
00:01:58.190 --> 00:02:02.370
Initialization with size and without size. in initialisation 

43
00:02:02.370 --> 00:02:05.650
with size we need to specify the size at first 

44
00:02:05.740 --> 00:02:09.390
and in curly braces specify the characters enclosed in single 

45
00:02:09.390 --> 00:02:13.830
quotes separated by commas. In initialisation without size 

46
00:02:13.850 --> 00:02:15.670
We don't need to specify the size 

47
00:02:15.680 --> 00:02:18.989
At first it will be determined by the compiler but 

48
00:02:18.990 --> 00:02:21.870
still we must add the null character at last 

49
00:02:21.880 --> 00:02:23.690
Now see some examples 

50
00:02:23.700 --> 00:02:26.900
If we write like this char country[6] equal 

51
00:02:26.900 --> 00:02:30.670
to India in double quotes followed by semi colon then 

52
00:02:30.680 --> 00:02:32.190
it will be stored like this 

53
00:02:32.440 --> 00:02:34.230
This is direct initialisation 

54
00:02:34.240 --> 00:02:35.200
So no need to 

55
00:02:35.210 --> 00:02:38.860
add null character. at Country[0] we will have 

56
00:02:38.870 --> 00:02:40.510
I, at country[1]

57
00:02:40.520 --> 00:02:42.859
We will have N, at country[2]

58
00:02:42.870 --> 00:02:45.140
We will have D, at country[3]

59
00:02:45.150 --> 00:02:47.750
We will have I, at country[4] we will 

60
00:02:47.750 --> 00:02:49.609
have A. at country[5]

61
00:02:49.620 --> 00:02:52.180
We will have the null character \0

62
00:02:52.420 --> 00:02:55.070
Now if the size of the string is greater than 

63
00:02:55.070 --> 00:02:58.040
number of characters in the string the remaining bytes will 

64
00:02:58.040 --> 00:02:59.950
be filled with \0

65
00:03:00.240 --> 00:03:02.510
And if the size of the string is less than 

66
00:03:02.510 --> 00:03:05.209
number of characters in the string then it will throw 

67
00:03:05.210 --> 00:03:09.070
the warning message saying that initializer string for char array

68
00:03:09.070 --> 00:03:11.740
is too long and we should avoid this kind of 

69
00:03:11.750 --> 00:03:12.980
initializations

70
00:03:12.990 --> 00:03:14.930
So that's all and thank you watching this video

