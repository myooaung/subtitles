WEBVTT

1
00:00:00.240 --> 00:00:00.950
Hi friends 

2
00:00:00.960 --> 00:00:03.380
In this video we are going to learn how to 

3
00:00:03.380 --> 00:00:04.430
search an element in an array.

4
00:00:11.440 --> 00:00:13.450
First we have an array of size five 

5
00:00:13.510 --> 00:00:16.400
We have an array of five elements. Here 

6
00:00:16.400 --> 00:00:19.300
We are checking if five is present in the array 

7
00:00:19.310 --> 00:00:19.910
or not 

8
00:00:20.090 --> 00:00:22.150
So search key is five 

9
00:00:22.540 --> 00:00:25.010
So what we are going to do is We will compare 

10
00:00:25.020 --> 00:00:27.750
all the values in the array with the search key 

11
00:00:27.840 --> 00:00:30.560
If the key and element in the array are the 

12
00:00:30.560 --> 00:00:35.089
same then search is found else search is not found. So let us 

13
00:00:35.090 --> 00:00:37.390
start from Index zero. First 

14
00:00:37.390 --> 00:00:40.250
We compare one with five but it is not the 

15
00:00:40.250 --> 00:00:40.720
same 

16
00:00:40.730 --> 00:00:42.710
So we move to the next element 

17
00:00:42.950 --> 00:00:45.940
Now we compare 20 with five again 

18
00:00:45.950 --> 00:00:47.080
It is not the same 

19
00:00:47.080 --> 00:00:49.849
So we move to the right take the element and 

20
00:00:49.850 --> 00:00:51.290
compare with key five 

21
00:00:51.400 --> 00:00:52.420
It is the same 

22
00:00:52.490 --> 00:00:55.780
So the search element five is found in the array 

23
00:00:55.910 --> 00:00:58.330
So this is how it is done 

24
00:00:59.040 --> 00:01:01.699
Now let us see what happens if the key is 

25
00:01:01.700 --> 00:01:02.940
not present in the array 

26
00:01:03.140 --> 00:01:06.040
So again we have an array of size five and 

27
00:01:06.040 --> 00:01:08.210
here the search key is 100 

28
00:01:08.350 --> 00:01:11.510
Now we will start comparing the key and the elements in 

29
00:01:11.510 --> 00:01:11.960
the array

30
00:01:12.180 --> 00:01:14.320
So let us start from index zero 

31
00:01:14.330 --> 00:01:17.550
So one will be taken and compared with 100 it 

32
00:01:17.550 --> 00:01:18.560
is not the same 

33
00:01:18.640 --> 00:01:20.540
So we move to the next element 

34
00:01:20.550 --> 00:01:23.340
Take 20 and compare with 100 again 

35
00:01:23.340 --> 00:01:24.540
It is not the same 

36
00:01:24.590 --> 00:01:27.470
So we move to the right take five and compare 

37
00:01:27.470 --> 00:01:28.730
with 100 again 

38
00:01:28.740 --> 00:01:31.680
It's not the same value so we move to the right 

39
00:01:31.680 --> 00:01:35.720
and take 78 and compare with 100 again not the same 

40
00:01:35.990 --> 00:01:39.090
So we move to the right compare 30 with 100 

41
00:01:39.290 --> 00:01:41.750
Still we are unlucky its not the same value 

42
00:01:41.840 --> 00:01:44.550
And there are no more elements in the array now  

43
00:01:44.550 --> 00:01:47.980
array is completely visited and 100 was not found 

44
00:01:49.240 --> 00:01:52.330
Now let us see the code for implementing this program 

45
00:01:52.350 --> 00:01:55.300
So we have the function search to do this job 

46
00:01:55.310 --> 00:01:58.429
and we are passing the array, the size of the array and 

47
00:01:58.430 --> 00:02:00.670
the key to be searched into the function 

48
00:02:00.860 --> 00:02:03.580
Here we have an array of size five so the 

49
00:02:03.580 --> 00:02:07.009
variable size will be holding value five and we are 

50
00:02:07.010 --> 00:02:10.630
searching for element five so the variable key will also 

51
00:02:10.630 --> 00:02:11.700
be holding value 

52
00:02:11.710 --> 00:02:12.070
Five 

53
00:02:12.640 --> 00:02:15.430
The four loop is used to traverse the array and 

54
00:02:15.440 --> 00:02:17.960
each element will be compared with key 

55
00:02:17.970 --> 00:02:20.260
And if a match is found break the loop 

56
00:02:20.270 --> 00:02:24.200
Otherwise continue for all the elements in the array So let 

57
00:02:24.200 --> 00:02:25.750
us see how this works 

58
00:02:25.840 --> 00:02:29.170
first We have i equal to zero and zero is less 

59
00:02:29.170 --> 00:02:29.890
than five 

60
00:02:30.050 --> 00:02:31.680
So condition is true so 

61
00:02:31.680 --> 00:02:35.350
Compare one and five and the comparison returns a false 

62
00:02:35.440 --> 00:02:38.290
Now i is incremented and becomes one 

63
00:02:38.350 --> 00:02:40.460
Now one is less than five 

64
00:02:40.620 --> 00:02:42.140
So condition is true 

65
00:02:42.150 --> 00:02:45.320
So compare 20 and and five the comparison returns a 

66
00:02:45.320 --> 00:02:49.950
false now i is incremented and becomes two now two is 

67
00:02:49.950 --> 00:02:50.960
less than five 

68
00:02:50.970 --> 00:02:54.340
So condition is true so compare five and five 

69
00:02:54.540 --> 00:02:57.540
Now the comparison returns a true And it will come 

70
00:02:57.540 --> 00:03:00.260
out of the for loop and returns one and the 

71
00:03:00.260 --> 00:03:01.600
search is found 

72
00:03:03.040 --> 00:03:04.929
Now let us see the second case 

73
00:03:04.940 --> 00:03:08.220
If the key is not present in the the array 

74
00:03:08.220 --> 00:03:09.960
the array is same with size 5 

75
00:03:10.060 --> 00:03:13.590
But the search key is 100 here so first we 

76
00:03:13.590 --> 00:03:16.870
have i equal to zero and zero is less than five 

77
00:03:16.880 --> 00:03:18.210
So condition is true 

78
00:03:18.220 --> 00:03:21.210
So compare 1 and 100 the comparison returns 

79
00:03:21.210 --> 00:03:25.550
A false now i is incremented and it becomes one Now 

80
00:03:25.550 --> 00:03:26.950
one is less than five 

81
00:03:26.960 --> 00:03:28.530
So condition is true so 

82
00:03:28.530 --> 00:03:32.470
Compare 20 and 100 The comparison returns a false and 

83
00:03:32.480 --> 00:03:36.290
I becomes two now two is less than five 

84
00:03:36.300 --> 00:03:39.890
So condition is true again So compare five and 100 

85
00:03:40.160 --> 00:03:40.560
again 

86
00:03:40.560 --> 00:03:41.890
The comparison is returning 

87
00:03:41.890 --> 00:03:46.200
A false now i is incremented and it becomes three now 

88
00:03:46.210 --> 00:03:47.650
three is than five 

89
00:03:47.870 --> 00:03:49.210
So condition is true 

90
00:03:49.220 --> 00:03:54.490
So compare 78 and 100 And the comparison returns a false now 

91
00:03:54.500 --> 00:03:58.260
i is incremented and it becomes four now four is less 

92
00:03:58.260 --> 00:03:59.030
than five 

93
00:03:59.400 --> 00:04:00.760
So condition is true 

94
00:04:00.770 --> 00:04:02.940
So compare 30 and 100 

95
00:04:03.220 --> 00:04:06.880
The comparison returns a false and I is incremented and 

96
00:04:06.880 --> 00:04:07.989
it becomes five 

97
00:04:08.350 --> 00:04:11.179
Now I equal to five And when we check if 

98
00:04:11.190 --> 00:04:14.840
i is less than five the condition is false so it 

99
00:04:14.840 --> 00:04:17.500
will come out of the loop and returns minus one 

100
00:04:17.740 --> 00:04:19.560
and the search is not found 

101
00:04:19.740 --> 00:04:22.460
So this is how it works Now let us talk 

102
00:04:22.460 --> 00:04:25.520
about the time complexity The best case will be 

103
00:04:25.520 --> 00:04:28.350
when the key is present in the first position of 

104
00:04:28.350 --> 00:04:31.700
the array. Then the for loop will only work for one 

105
00:04:31.700 --> 00:04:35.560
time and break after this one iteration So the best 

106
00:04:35.560 --> 00:04:38.820
case time complexity will be order of one and 

107
00:04:38.820 --> 00:04:41.590
the worst case will be when the key is present 

108
00:04:41.600 --> 00:04:43.380
in the last position of the array 

109
00:04:43.390 --> 00:04:45.960
That is if you have an array of five elements 

110
00:04:46.040 --> 00:04:49.290
and the key is present in the fifth position then 

111
00:04:49.290 --> 00:04:51.659
the for loop will have five iterations 

112
00:04:51.940 --> 00:04:54.760
So the time complexity will be order of five 

113
00:04:54.940 --> 00:04:58.960
And generally if you have n elements you need n iterations 

114
00:04:58.960 --> 00:05:02.040
and the worst case time complexity will be order of 

115
00:05:02.050 --> 00:05:02.440
N 

