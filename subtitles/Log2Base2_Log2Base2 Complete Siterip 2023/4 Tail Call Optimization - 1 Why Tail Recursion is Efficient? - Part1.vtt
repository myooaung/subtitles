WEBVTT

1
00:00:00.080 --> 00:00:01.620
as we discussed earlier 

2
00:00:01.980 --> 00:00:05.510
Recursive function is tail recursive when the recursive 

3
00:00:05.520 --> 00:00:08.450
call is the last thing executed by the function 

4
00:00:08.840 --> 00:00:12.360
see here the recursive call print n minus minus 

5
00:00:12.590 --> 00:00:15.100
is the last thing executed by the function 

6
00:00:15.350 --> 00:00:18.510
It doesn't do any operation with the return value that 

7
00:00:18.510 --> 00:00:20.370
it gets from the called function 

8
00:00:20.610 --> 00:00:21.590
It simply is 

9
00:00:21.590 --> 00:00:24.840
Recursive call and there are no further statements to 

10
00:00:24.850 --> 00:00:25.400
execute 

11
00:00:25.410 --> 00:00:28.700
After that these kind of tail recursive calls will 

12
00:00:28.700 --> 00:00:31.850
be optimised by compilers before the execution 

13
00:00:32.240 --> 00:00:35.870
It is also known as tail call elimination or tail 

14
00:00:35.870 --> 00:00:37.380
call optimisation 

15
00:00:37.460 --> 00:00:40.420
Let us see how the compiler will optimise the tailed 

16
00:00:40.420 --> 00:00:41.180
recursive call 

17
00:00:41.190 --> 00:00:44.990
First the Recursive call arguments will be replaced by 

18
00:00:44.990 --> 00:00:46.520
corresponding statements 

19
00:00:46.820 --> 00:00:51.150
So this argument minus minus n will be replaced by 

20
00:00:51.390 --> 00:00:53.350
n equal to n minus one 

21
00:00:53.540 --> 00:00:56.730
The compiler will add the label before the code block 

22
00:00:56.740 --> 00:01:00.410
and invoke it using the Goto statement something like this 

23
00:01:00.620 --> 00:01:02.470
start and go to start 

24
00:01:02.690 --> 00:01:05.970
Now if you see this code will not work like 

25
00:01:05.970 --> 00:01:09.050
recursive Function it will work like a simple 

26
00:01:09.050 --> 00:01:12.550
looping statement so it will save a lot of memory 

27
00:01:12.640 --> 00:01:14.730
That is if the code is executed 

28
00:01:14.740 --> 00:01:19.070
as recursive function for n recursive calls It will consume 

29
00:01:19.080 --> 00:01:21.620
order of N memory in this stack section 

30
00:01:21.720 --> 00:01:24.950
But in the case of optimised looping code it will 

31
00:01:24.960 --> 00:01:28.600
only consume order of one that is constant memory 

32
00:01:28.610 --> 00:01:32.120
This is why Tail Recursion is considered as most 

33
00:01:32.130 --> 00:01:34.880
efficient among all other recursive calls 

34
00:01:35.110 --> 00:01:37.710
In the next video let us take the factorial 

35
00:01:37.710 --> 00:01:41.060
recursive call and analyse how it can be optimised with 

36
00:01:41.060 --> 00:01:41.970
tail Recursion. 

