WEBVTT

1
00:00:00.040 --> 00:00:01.950
Now in the implementation,

2
00:00:02.160 --> 00:00:06.630
let us create a function rmDuplicates and we pass

3
00:00:06.630 --> 00:00:11.690
the array arr and its size n into this function  

4
00:00:11.690 --> 00:00:14.650
if the size is zero the array is empty.

5
00:00:15.040 --> 00:00:17.770
And if the size is one, then there is only 

6
00:00:17.770 --> 00:00:18.700
one element. 

7
00:00:18.710 --> 00:00:20.300
So there is no duplicate.

8
00:00:20.700 --> 00:00:25.030
So in these two cases, just return it. So write

9
00:00:25.090 --> 00:00:28.720
if n equal to zero or n equal to one 

10
00:00:28.820 --> 00:00:32.720
then return n. Otherwise we need to iterate

11
00:00:32.720 --> 00:00:38.580
the  array and compare adjacent elements. So declare length and initialise it to zero

12
00:00:38.870 --> 00:00:41.310
and also declare iterating variable i.

13
00:00:41.320 --> 00:00:45.490
Now use a for loop for i equal to zero 

14
00:00:45.530 --> 00:00:47.330
i less than n-1

15
00:00:47.440 --> 00:00:52.160
i++ and in each iteration, compare elements at 

16
00:00:52.170 --> 00:00:54.550
indices i and i+1

17
00:00:55.140 --> 00:01:00.020
So write if arr[i] not equal to arr[i+1] 

18
00:01:00.030 --> 00:01:04.240
 then place it in index len and 

19
00:01:04.250 --> 00:01:08.790
increment length. So write arr[len++] equal 

20
00:01:08.790 --> 00:01:12.410
to arr[i]. Do the same process for all 

21
00:01:12.410 --> 00:01:13.510
the remaining pairs. 

22
00:01:13.820 --> 00:01:19.580
3,3   3,5 and   5,5. Finally place the last element 

23
00:01:19.580 --> 00:01:24.000
in the array. So write arr[len++] equal 

24
00:01:24.010 --> 00:01:26.430
to arr[n-1] 

25
00:01:26.890 --> 00:01:30.010
So it is done so we can return len which is the new length of the array.

