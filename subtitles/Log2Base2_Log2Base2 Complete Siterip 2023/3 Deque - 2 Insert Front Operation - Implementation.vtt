WEBVTT

1
00:00:00.140 --> 00:00:03.500
in this video let us learn how to implement Insert 

2
00:00:03.500 --> 00:00:05.750
front and insert rear operation 

3
00:00:06.440 --> 00:00:09.740
First let us learn the working principle of the insert 

4
00:00:09.740 --> 00:00:12.880
front operation as we're going to use it doubly linked 

5
00:00:12.880 --> 00:00:13.260
list 

6
00:00:13.480 --> 00:00:16.110
Let us create the structure of the node in a 

7
00:00:16.110 --> 00:00:16.790
Doubly linked 

8
00:00:16.790 --> 00:00:17.150
List

9
00:00:17.320 --> 00:00:19.410
Each node will have three parts 

10
00:00:19.570 --> 00:00:22.660
The data part and the next and previous pointers 

11
00:00:22.950 --> 00:00:25.720
This is the structure for the doubly linked list to 

12
00:00:25.730 --> 00:00:26.300
implement 

13
00:00:26.300 --> 00:00:26.750
deque 

14
00:00:26.940 --> 00:00:30.890
Let us create two struck node pointers Front and rear 

15
00:00:31.280 --> 00:00:33.350
initially marked them as null 

16
00:00:34.040 --> 00:00:38.810
Now let's insert Element 10 at front first create a new 

17
00:00:38.810 --> 00:00:41.250
node and assign value 10 to it 

18
00:00:41.640 --> 00:00:45.240
If the front pointer is null it means the deque is empty 

19
00:00:45.410 --> 00:00:48.410
In this case we need to set both front and 

20
00:00:48.410 --> 00:00:52.190
rear points to the first node so make both front 

21
00:00:52.190 --> 00:00:53.800
and rear points to node 10

22
00:00:54.540 --> 00:00:58.470
Now let us insert one more element 20 at the front 

23
00:00:58.680 --> 00:01:01.150
so create a new node and assign value 

24
00:01:01.150 --> 00:01:01.930
20 to it

25
00:01:02.740 --> 00:01:04.680
Here we already have Node

26
00:01:04.680 --> 00:01:08.260
10 and both front and rear is pointing to it 

27
00:01:08.740 --> 00:01:11.000
We need to insert 20 at the front 

28
00:01:11.150 --> 00:01:13.240
So what We can do is first 

29
00:01:13.240 --> 00:01:16.440
Make the new node Twenty's next as the front node 

30
00:01:16.750 --> 00:01:20.170
and then make the front of previous pointer to new 

31
00:01:20.170 --> 00:01:20.600
node 

32
00:01:20.610 --> 00:01:24.250
20 finally make the new node as front 

33
00:01:24.740 --> 00:01:26.120
That's it now Node

34
00:01:26.120 --> 00:01:30.320
20 has become the front node So the logic of 

35
00:01:30.330 --> 00:01:32.750
insert front function is very simple 

36
00:01:32.930 --> 00:01:35.180
Create a new node With the given value 

37
00:01:35.420 --> 00:01:37.620
We can use the get node function for this 

38
00:01:37.900 --> 00:01:41.630
If the front pointer is null make both front and rear 

39
00:01:41.630 --> 00:01:42.910
point to the new node 

40
00:01:43.060 --> 00:01:46.080
Otherwise insert given node at the front 

41
00:01:46.180 --> 00:01:50.530
By using the following steps make new node of next 

42
00:01:50.540 --> 00:01:54.100
as front and then make the front of previous as 

43
00:01:54.100 --> 00:01:57.890
new node and finally make the new node as front 

44
00:01:58.090 --> 00:02:01.550
That's it we have implemented the insert front function 

45
00:02:01.780 --> 00:02:04.550
Now let us quickly implement the get node function as 

46
00:02:04.550 --> 00:02:04.890
well 

47
00:02:05.040 --> 00:02:08.380
First the get node function will allocate memory for the 

48
00:02:08.380 --> 00:02:09.000
new node 

49
00:02:09.360 --> 00:02:12.420
Next it will assign the given value in the data 

50
00:02:12.420 --> 00:02:16.480
part and then it will initialise both the next and 

51
00:02:16.480 --> 00:02:18.090
previous pointer as null 

52
00:02:18.360 --> 00:02:20.850
And finally it will return the new node 

53
00:02:21.340 --> 00:02:21.970
That's it 

54
00:02:22.160 --> 00:02:24.660
In this video we have learned how to implement the 

55
00:02:24.670 --> 00:02:26.030
insert front function 

56
00:02:26.310 --> 00:02:28.880
In the next video we will learn how to implement insert rear function. 

