WEBVTT

1
00:00:00.000 --> 00:00:03.730
In this video Let us learn Exponential and Factorial

2
00:00:03.730 --> 00:00:07.820
time complexities. First let us take this recursive 

3
00:00:07.830 --> 00:00:12.510
algorithm which has two recursive calls. To analyse the time 

4
00:00:12.510 --> 00:00:14.900
complexity of recursive algorithms 

5
00:00:15.010 --> 00:00:16.780
we have four methods 

6
00:00:17.200 --> 00:00:20.770
First one is iteration method and the second one is 

7
00:00:20.770 --> 00:00:24.160
Recursion tree method and the third one is substitution 

8
00:00:24.160 --> 00:00:26.860
method and the fourth one is Master's theorem. 

9
00:00:26.860 --> 00:00:29.800
Here, we are going to use the recursion

10
00:00:29.800 --> 00:00:33.080
tree method to solve this. We will learn all 

11
00:00:33.090 --> 00:00:37.540
other methods elaborately in the further chapters. So let us draw the 

12
00:00:37.540 --> 00:00:39.970
recursion tree for this algorithm 

13
00:00:40.100 --> 00:00:43.640
First take the function fun(n). 

14
00:00:43.650 --> 00:00:46.720
From fun(n) two recursive calls will be 

15
00:00:46.720 --> 00:00:50.620
executed so write fun(n-1) and 

16
00:00:50.630 --> 00:00:53.380
fun(n-1) and then from 

17
00:00:53.390 --> 00:00:56.430
a fun(n-1) two recursive calls

18
00:00:56.430 --> 00:00:59.460
will be executed fun(n-2) 

19
00:00:59.580 --> 00:01:02.760
and fun(n-2) similarly for

20
00:01:02.760 --> 00:01:06.640
this side also. So total four function calls will be 

21
00:01:06.640 --> 00:01:10.800
executed at this level and in the next level, eight 

22
00:01:10.800 --> 00:01:14.220
function calls will be executed and it will grow like 

23
00:01:14.220 --> 00:01:17.280
this and at K th level there will be 2 power k

24
00:01:17.290 --> 00:01:20.940
time function calls and let us assume at the 

25
00:01:20.950 --> 00:01:21.860
K th level 

26
00:01:21.970 --> 00:01:24.840
The recursive call reaches the function fun 

27
00:01:24.840 --> 00:01:26.250
of 0 and thus

28
00:01:26.250 --> 00:01:28.240
The recursive calls will stop. 

29
00:01:28.530 --> 00:01:32.600
Let's calculate the total time complexity of this Recursive 

30
00:01:32.600 --> 00:01:33.050
tree 

31
00:01:33.440 --> 00:01:34.890
Here first level 

32
00:01:34.900 --> 00:01:38.330
We have one recursive calls and in the second level 

33
00:01:38.340 --> 00:01:40.180
we have 2 recursive calls 

34
00:01:40.420 --> 00:01:43.910
And in third level we have 4 recursive calls and 

35
00:01:43.910 --> 00:01:46.720
in fourth level we have 8 recursive calls 

36
00:01:46.910 --> 00:01:51.570
And So, In general we can say in i th level 

37
00:01:51.690 --> 00:01:53.010
there will be 2 power i 

38
00:01:53.020 --> 00:01:57.330
function calls executed so the total time complexity 

39
00:01:57.330 --> 00:02:00.950
T(n) will be the sum of all power of 2s

40
00:02:00.960 --> 00:02:02.520
 till 

41
00:02:02.530 --> 00:02:03.340
2 Power K

42
00:02:03.640 --> 00:02:07.720
That is T(n) equal to 1 + 2 raise to 1

43
00:02:07.720 --> 00:02:11.300
+ 2 raise to 2 + 2  raise to 3 

44
00:02:11.300 --> 00:02:13.690
+ etcetera upto 2 raise to k

45
00:02:14.040 --> 00:02:17.620
We already know sum of all power of 2s till 

46
00:02:17.630 --> 00:02:21.720
2 raise to k is (2 raise to k+1)-1

47
00:02:21.720 --> 00:02:24.780
So T(n) equal to (2 raise to k+1)-1 

48
00:02:24.790 --> 00:02:29.330
for better understanding, Let us

49
00:02:29.330 --> 00:02:31.570
quickly verify the above formula 

50
00:02:31.860 --> 00:02:35.680
First, let us find sum of all power of 2 

51
00:02:35.680 --> 00:02:37.850
numbers till 2 raise to 3 

52
00:02:37.860 --> 00:02:41.410
It is 1+2+4+8 which 

53
00:02:41.410 --> 00:02:43.370
is equal to 15 

54
00:02:43.550 --> 00:02:47.030
Let us calculate the same using formula 2 raise to K+1 

55
00:02:47.040 --> 00:02:50.070
Here, k=3 

56
00:02:50.170 --> 00:02:53.120
So (2 raise to 3+1) - 1

57
00:02:53.420 --> 00:02:57.660
That is (2 raise to 4)-1 which is 

58
00:02:57.660 --> 00:02:59.670
16 - 1 and we get 15 

59
00:02:59.690 --> 00:03:02.700
So we get the same result. From this, we can

60
00:03:02.720 --> 00:03:06.910
clearly understand that sum of all power of 2s till 

61
00:03:06.920 --> 00:03:10.260
2 raise to K is equal to value of its 

62
00:03:10.260 --> 00:03:13.160
next power of two number - 1

63
00:03:13.470 --> 00:03:16.630
That is (2 raise to K+1) - 1

64
00:03:16.920 --> 00:03:20.680
Hence the T(n) equal to (2 raise to K+1)-1 

65
00:03:20.680 --> 00:03:21.880
 (2 raise to K+1)-1 

66
00:03:22.430 --> 00:03:27.270
We already assumed that at k th level the recursive calls reaches 

67
00:03:27.280 --> 00:03:28.470
a fun of zero 

68
00:03:28.800 --> 00:03:32.440
This means at K th  level the value of  

69
00:03:32.440 --> 00:03:36.570
n-K will be zero. Since n-k equal to 0

70
00:03:36.570 --> 00:03:40.940
K will be equal to n if we apply 

71
00:03:40.950 --> 00:03:44.210
and n instead of K we will get T(n) 

72
00:03:44.220 --> 00:03:47.560
equal to (2 raise to n+1)-1

73
00:03:47.970 --> 00:03:50.370
which is the big O of 2 raise to n 

74
00:03:50.370 --> 00:03:51.580
time complexity 

75
00:03:52.200 --> 00:03:56.560
So the time complexity of this algorithm ia order of

76
00:03:56.610 --> 00:04:00.240
2 raise to n. If the time complexity of an

77
00:04:00.240 --> 00:04:02.890
algorithm is 2 power n and we can say 

78
00:04:02.900 --> 00:04:05.410
it is an exponential time algorithm.

