WEBVTT

1
00:00:00.940 --> 00:00:04.550
in this video let us discuss about doubly linked list 

2
00:00:06.040 --> 00:00:09.060
So we have already learned about linked List but we 

3
00:00:09.060 --> 00:00:11.080
learned about singly linked list 

4
00:00:11.120 --> 00:00:14.870
We also have doubly linked list which are likes singly 

5
00:00:14.870 --> 00:00:15.250
list 

6
00:00:15.330 --> 00:00:19.500
But here each node contain three fields one data 

7
00:00:19.500 --> 00:00:23.130
field and two link fields a link to the previous 

8
00:00:23.130 --> 00:00:24.450
node prev 

9
00:00:24.460 --> 00:00:28.190
And then we have the data part data and again 

10
00:00:28.200 --> 00:00:29.800
a link to the next node 

11
00:00:29.810 --> 00:00:33.500
Next in Singly linked List we had only two 

12
00:00:33.510 --> 00:00:36.540
fields in a node the data part and the next 

13
00:00:36.540 --> 00:00:36.940
part 

14
00:00:37.040 --> 00:00:40.310
But here the node prefers not only the next node 

15
00:00:40.320 --> 00:00:42.450
but also the previous node 

16
00:00:42.740 --> 00:00:45.700
So in Java programming for a node in a doubly 

17
00:00:45.700 --> 00:00:48.550
linked list we can create a class node 

18
00:00:49.240 --> 00:00:52.660
The data can be of any type like individual character 

19
00:00:52.660 --> 00:00:54.700
floating point double etcetera 

20
00:00:54.920 --> 00:00:58.770
But let's assume it is integer so int data 

21
00:00:58.780 --> 00:01:01.780
And then we need references to the previous node and 

22
00:01:01.780 --> 00:01:02.630
next node 

23
00:01:02.640 --> 00:01:05.620
So node prev and node next 

24
00:01:05.630 --> 00:01:08.350
So this will be a doubly linked List node 

25
00:01:08.740 --> 00:01:11.150
Now let us see an example doubly linked List 

26
00:01:11.640 --> 00:01:14.620
So just like in singly linked list in doubly linked 

27
00:01:14.620 --> 00:01:18.120
list Also head points to the first node and the 

28
00:01:18.120 --> 00:01:20.480
next part of last node points to null 

29
00:01:20.800 --> 00:01:24.290
And since we have a previous pointer also the prev 

30
00:01:24.290 --> 00:01:27.350
part of First node will also point to null 

31
00:01:27.540 --> 00:01:31.040
So in this example we have 3 nodes here with 

32
00:01:31.050 --> 00:01:32.900
data part and two links 

33
00:01:32.910 --> 00:01:36.730
At addresses 1000,2000 and 3000 

34
00:01:37.050 --> 00:01:40.760
The elements are 10 20 and 30 and since this 

35
00:01:40.760 --> 00:01:44.410
is it doubly linked list we have links in forward as 

36
00:01:44.410 --> 00:01:44.560
well 

37
00:01:44.560 --> 00:01:48.690
As Backward direction and firstly the prev part of first 

38
00:01:48.690 --> 00:01:51.520
node and next part of last node will point to 

39
00:01:51.520 --> 00:01:55.320
null and then the first node's next should point to 

40
00:01:55.320 --> 00:01:56.320
the next node 

41
00:01:56.460 --> 00:02:00.130
Then the second node's prev points to first node at 

42
00:02:00.140 --> 00:02:03.750
its next points to the third node and third node's 

43
00:02:03.750 --> 00:02:06.120
prev should point to 2nd node 

44
00:02:06.130 --> 00:02:09.630
So this is how the linked list node's are connected 

45
00:02:09.640 --> 00:02:12.850
Now let us discuss the advantages of doubly linked list 

46
00:02:13.340 --> 00:02:16.410
Unlike singly linked list we can have bi directional 

47
00:02:16.410 --> 00:02:20.440
navigation in doubly linked list and some operations like deletion 

48
00:02:20.440 --> 00:02:23.650
and insertion can be easier since we can get the 

49
00:02:23.650 --> 00:02:26.590
previous node easily without any traversal 

50
00:02:26.700 --> 00:02:29.850
Now what is the main disadvantage of doubly linked list 

51
00:02:30.240 --> 00:02:33.570
Here extra memory is needed for referring the previous 

52
00:02:33.570 --> 00:02:37.460
node also so basic operations become expensive because we need 

53
00:02:37.460 --> 00:02:41.630
to maintain both prev and next references for each operation 

54
00:02:41.640 --> 00:02:44.210
Now let us see a sample programme to create a 

55
00:02:44.210 --> 00:02:47.920
doubly linked list with three node's with data 10 20 

56
00:02:47.920 --> 00:02:51.940
and 30 and displayed in forward and backward directions 

57
00:02:51.950 --> 00:02:55.430
So first let us create the class node with node 

58
00:02:55.430 --> 00:02:59.360
prev to refer the previous node and int data to 

59
00:02:59.360 --> 00:03:02.770
store integer type data of the node and node 

60
00:03:02.770 --> 00:03:05.960
Next to refer the next node now declare variables of 

61
00:03:05.970 --> 00:03:09.540
node type for head middle and last node's 

62
00:03:09.560 --> 00:03:14.870
So write node head middle and last so memories allocated 

63
00:03:14.880 --> 00:03:15.850
in the stack 

64
00:03:15.860 --> 00:03:19.750
So now we can use new to locate memory dynamically 

65
00:03:19.750 --> 00:03:22.050
for head Middle and last node's 

66
00:03:22.240 --> 00:03:26.580
So write head equal to new node so memory will 

67
00:03:26.580 --> 00:03:29.950
be allocated in the heap section and it returns the 

68
00:03:29.960 --> 00:03:34.270
reference to that memory and similarly memories alocated in heap

69
00:03:34.280 --> 00:03:36.750
for middle node and last node 

70
00:03:37.440 --> 00:03:39.050
So now we have the node's 

71
00:03:39.060 --> 00:03:42.220
Next we need values in the node's so let us 

72
00:03:42.230 --> 00:03:46.700
assign values 10 20 and 30 to the node's so 

73
00:03:46.700 --> 00:03:49.380
we know the values will be stored in the data 

74
00:03:49.380 --> 00:03:49.730
part 

75
00:03:49.740 --> 00:03:52.650
So write head dot data equal to 10 

76
00:03:53.010 --> 00:03:56.020
So 10 a stored in the data part of head 

77
00:03:56.020 --> 00:03:56.490
node 

78
00:03:56.540 --> 00:04:00.440
Similarly add 20 and 30 in middle and last node's 

79
00:04:00.650 --> 00:04:04.660
So write middle dot data equal to 20 and last 

80
00:04:04.660 --> 00:04:06.350
dot data equal to 30 

81
00:04:06.740 --> 00:04:09.450
So now we have the node's with values 

82
00:04:10.040 --> 00:04:13.590
Next step is that these node's should be linked 

83
00:04:13.700 --> 00:04:16.560
That is the linked list should be like head node 

84
00:04:16.570 --> 00:04:18.250
middle node and last node 

85
00:04:18.740 --> 00:04:21.510
So let its link them using the prev and next 

86
00:04:21.510 --> 00:04:22.450
references 

87
00:04:22.460 --> 00:04:26.630
Firstly the prev first node should point to null so 

88
00:04:26.630 --> 00:04:29.450
set head dot prev equal to null 

89
00:04:30.040 --> 00:04:34.130
Next connect head to middle node so write head dot 

90
00:04:34.130 --> 00:04:38.360
next equal to Middle 2000 will be stored in next 

91
00:04:38.370 --> 00:04:38.960
of head 

92
00:04:39.740 --> 00:04:41.650
Now let us handle the middle node 

93
00:04:42.040 --> 00:04:46.070
Its previous node should be head so write middle dot 

94
00:04:46.080 --> 00:04:49.650
prev equal to head so 1000 will be stored here 

95
00:04:50.140 --> 00:04:52.740
and it's next node should be the last node 

96
00:04:52.900 --> 00:04:57.140
So write middle dot next equal to last so 3000 

97
00:04:57.140 --> 00:05:00.200
will be stored in the next part of middle and 

98
00:05:00.200 --> 00:05:03.150
last node its previous node should be middle 

99
00:05:03.540 --> 00:05:07.430
So set last dot prev equal to middle so 2000 

100
00:05:07.430 --> 00:05:10.140
will be stored here and since it is the last 

101
00:05:10.140 --> 00:05:12.800
node it's next should be pointing to null 

102
00:05:13.190 --> 00:05:16.060
So write last dot next equal to null 

103
00:05:16.380 --> 00:05:19.310
So now we have are linked less with three node's 

104
00:05:19.310 --> 00:05:20.550
properly connected 

105
00:05:21.340 --> 00:05:24.530
Now let us print each node's data in the linked 

106
00:05:24.530 --> 00:05:25.050
list 

107
00:05:25.440 --> 00:05:27.270
So different each node's data 

108
00:05:27.280 --> 00:05:30.390
We have to traverse the linked list fully and unlike 

109
00:05:30.390 --> 00:05:33.880
singly linked List we need to Travers from the beginning to end 

110
00:05:33.890 --> 00:05:35.810
as well as in the opposite way 

111
00:05:35.820 --> 00:05:38.490
So first let us see the forward reversal 

112
00:05:38.850 --> 00:05:42.160
So we are traversing from the beginning to end and 

113
00:05:42.160 --> 00:05:45.570
we can identify the end easily since the last node's 

114
00:05:45.570 --> 00:05:46.790
next will be null 

115
00:05:47.070 --> 00:05:49.710
So start from the head and print the data and 

116
00:05:49.710 --> 00:05:53.450
repeat til we have node's next equal to null so 

117
00:05:53.450 --> 00:05:57.650
first create a temporary variable temp and initialised to head node 

118
00:05:58.040 --> 00:06:01.000
So write node temp equal to head 

119
00:06:01.320 --> 00:06:04.330
Now we have a while loop while temp not equal 

120
00:06:04.330 --> 00:06:08.300
to null so this loop will continue till temp becomes 

121
00:06:08.300 --> 00:06:11.270
null so print the data which is present in the 

122
00:06:11.270 --> 00:06:14.640
TEMP node so write system dot out dot println 

123
00:06:14.650 --> 00:06:15.690
of temp dot 

124
00:06:15.700 --> 00:06:19.760
Data so it will print the value ten Now move 

125
00:06:19.770 --> 00:06:21.220
temp to the next node 

126
00:06:21.260 --> 00:06:24.850
So write temp equal to temp dot Next 

127
00:06:25.140 --> 00:06:27.650
So now temp points to 2000 

128
00:06:27.740 --> 00:06:31.070
Now check the condition and it holds so printed data 

129
00:06:31.070 --> 00:06:34.510
at address 2000 which is 20 now moved temp to 

130
00:06:34.510 --> 00:06:35.240
the next node 

131
00:06:35.250 --> 00:06:39.150
So now temp equal to 3000 now checked the condition 

132
00:06:39.160 --> 00:06:40.080
and it holds 

133
00:06:40.190 --> 00:06:43.370
So print the data at address 3000 which is 30 

134
00:06:43.380 --> 00:06:45.250
now move temp to the next node 

135
00:06:45.440 --> 00:06:47.310
So now temp equal to null 

136
00:06:47.320 --> 00:06:50.860
Since temp next is equal to null now check the 

137
00:06:50.860 --> 00:06:53.020
condition again and it will fail 

138
00:06:53.030 --> 00:06:55.860
So control comes out of the loop and we got 

139
00:06:55.870 --> 00:06:58.450
each node's data printed on this screen 

140
00:06:58.840 --> 00:07:00.660
So that was forward traversal 

141
00:07:00.670 --> 00:07:02.780
Now let us see the reversed traversal 

142
00:07:02.790 --> 00:07:05.920
So we are traversing from the end to the beginning 

143
00:07:05.930 --> 00:07:10.010
and we can identify the starting node very easily because 

144
00:07:10.020 --> 00:07:12.410
it's prev will be equal to null so 

145
00:07:12.410 --> 00:07:15.230
Start from the last and print the data and repeat 

146
00:07:15.230 --> 00:07:18.580
til we have node's prev equal to null so first 

147
00:07:18.580 --> 00:07:22.250
created temporary node temp and initialised to last node 

148
00:07:22.600 --> 00:07:23.090
write 

149
00:07:23.120 --> 00:07:25.290
node temp equal to last 

150
00:07:25.390 --> 00:07:28.390
Now we have a while loop while temp not equal 

151
00:07:28.390 --> 00:07:28.780
to null 

152
00:07:29.190 --> 00:07:32.250
So this loop will continue till TEMP becomes null 

153
00:07:32.640 --> 00:07:35.280
In first iteration the condition is okay 

154
00:07:35.290 --> 00:07:38.040
So print the data which is present in temp node 

155
00:07:38.050 --> 00:07:39.650
which is the last node now 

156
00:07:40.140 --> 00:07:41.710
So we have system 

157
00:07:41.710 --> 00:07:45.250
dot out dot Println of temp dot data which will 

158
00:07:45.250 --> 00:07:48.600
print the value 30 and now move temp to the 

159
00:07:48.600 --> 00:07:49.500
previous node 

160
00:07:49.630 --> 00:07:53.930
So write temp equal to tempt dot So now 10 

161
00:07:53.930 --> 00:07:57.770
points to the address 2000 now check the condition and 

162
00:07:57.770 --> 00:08:02.050
it holds so print The data address 2000 which is 20 

163
00:08:02.140 --> 00:08:04.170
now move temp to the previous node 

164
00:08:04.270 --> 00:08:08.590
So now temp equal to 1000 Now check the condition and 

165
00:08:08.600 --> 00:08:09.330
it holds 

166
00:08:09.460 --> 00:08:12.980
So print the data at address 1000 which is ten now 

167
00:08:12.980 --> 00:08:15.260
Move temp to the previous node again 

168
00:08:15.450 --> 00:08:17.620
So temp will now be equal to null 

169
00:08:17.630 --> 00:08:21.290
Since temp prev is equal to null now check the condition 

170
00:08:21.290 --> 00:08:22.740
again and it will fail 

171
00:08:22.960 --> 00:08:25.470
So the control comes out of the loop and see 

172
00:08:25.480 --> 00:08:28.780
we got each node's data printed in the reverse order 

173
00:08:29.140 --> 00:08:32.470
So that's how forward and reversal are performed in 

174
00:08:32.470 --> 00:08:33.730
a doubly linked list 

175
00:08:33.970 --> 00:08:36.740
Now let us discuss about the real time applications of 

176
00:08:36.740 --> 00:08:39.740
a doubly linked list so it can be used in 

177
00:08:39.750 --> 00:08:43.050
undo redo systems and the next and previous functions 

178
00:08:43.050 --> 00:08:45.820
in a music or a video playlist etc. 

