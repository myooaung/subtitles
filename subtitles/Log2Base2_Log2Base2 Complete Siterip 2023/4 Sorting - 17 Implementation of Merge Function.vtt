WEBVTT

1
00:00:00.240 --> 00:00:01.290
in this video 

2
00:00:01.300 --> 00:00:04.780
Let us learn that implementation of merge sort 

3
00:00:04.790 --> 00:00:08.000
algorithm now we're discussing merge sort algorithm 

4
00:00:08.400 --> 00:00:11.200
We will be given an unsorted array and we have 

5
00:00:11.200 --> 00:00:11.950
to sort it 

6
00:00:12.540 --> 00:00:15.990
That is our ultimate goal now let us see what is 

7
00:00:15.990 --> 00:00:17.210
merge sort algorithm 

8
00:00:17.220 --> 00:00:19.580
So we will be given an array and let us 

9
00:00:19.590 --> 00:00:20.980
apply what we just learn 

10
00:00:20.980 --> 00:00:24.070
Now let us divide this array into two and that 

11
00:00:24.070 --> 00:00:25.580
is do the sort of merging 

12
00:00:25.900 --> 00:00:28.450
So to divide into half we need to find the 

13
00:00:28.450 --> 00:00:28.850
middle 

14
00:00:29.340 --> 00:00:33.150
So we have start and end start plus end by 

15
00:00:33.150 --> 00:00:34.960
two will give the middle index 

16
00:00:35.820 --> 00:00:39.610
Thus we can find two halfs of the array and let 

17
00:00:39.610 --> 00:00:40.950
us sort and merged them 

18
00:00:41.540 --> 00:00:45.790
So let us write a function merge by passing the array it 

19
00:00:45.790 --> 00:00:50.510
start mid and end Let us create a temp array of 

20
00:00:50.510 --> 00:00:54.250
the same size where we will keep our resulted array 

21
00:00:54.720 --> 00:00:58.200
and we need variables i j and K for first 

22
00:00:58.200 --> 00:01:02.590
half second half and the resultant array temp I should 

23
00:01:02.590 --> 00:01:05.930
refer The first element of first half that is index 

24
00:01:06.010 --> 00:01:10.080
start J should refer the first element of second half 

25
00:01:10.090 --> 00:01:13.960
that his index mid plus one K should refer the 

26
00:01:13.960 --> 00:01:17.950
first index of new array that is index zero 

27
00:01:18.640 --> 00:01:21.150
So initialise I J k 

28
00:01:21.900 --> 00:01:24.620
And what was the next step in sorting and merging 

29
00:01:24.930 --> 00:01:28.660
Comparing the first elements of both the sub arrays So 

30
00:01:28.660 --> 00:01:32.610
compare five and ten and we have five less ten So 

31
00:01:32.620 --> 00:01:35.990
at five to the new array temp that is what 

32
00:01:35.990 --> 00:01:40.290
we are doing is checking if arr of I is 

33
00:01:40.290 --> 00:01:43.250
less than arr of j and it is 

34
00:01:43.500 --> 00:01:46.480
So we have to add arr  of I to temp 

35
00:01:46.760 --> 00:01:50.750
That is temp of k equal to arr  of I 

36
00:01:51.240 --> 00:01:54.790
So the element is copied it now we need to increment 

37
00:01:54.790 --> 00:01:56.430
both I and K 

38
00:01:56.800 --> 00:01:59.610
Now what if arr  of I was not less than 

39
00:01:59.620 --> 00:02:03.450
arr  of J that is See the next comparison here 

40
00:02:03.460 --> 00:02:07.680
arr  of i 20 is not less than arr  of J 

41
00:02:07.690 --> 00:02:10.840
ten so they must have an else condition in the 

42
00:02:10.840 --> 00:02:11.250
code 

43
00:02:11.810 --> 00:02:14.970
And if that is the case then J th element should 

44
00:02:14.970 --> 00:02:18.900
be copied to temp so right temp of K equal 

45
00:02:18.900 --> 00:02:20.450
to arr  of J

46
00:02:21.450 --> 00:02:25.040
And now we have to increments J and K and 

47
00:02:25.040 --> 00:02:28.130
for how long This should be repeated until we reach 

48
00:02:28.130 --> 00:02:31.780
the end of either of the sub arrays that is 

49
00:02:31.980 --> 00:02:32.450
end of 

50
00:02:32.450 --> 00:02:35.930
First array is mid and end of second array is 

51
00:02:35.940 --> 00:02:36.400
end 

52
00:02:36.720 --> 00:02:41.050
So until I reach is mid or j reaches end 

53
00:02:41.440 --> 00:02:45.470
So put this code inside a while loop while less 

54
00:02:45.470 --> 00:02:48.570
than or equal to mid and J less than or equal 

55
00:02:48.570 --> 00:02:49.150
to end 

56
00:02:49.840 --> 00:02:51.680
And is it done No 

57
00:02:52.010 --> 00:02:55.670
J reached the end here but still the recent element 

58
00:02:55.670 --> 00:02:58.220
in the first half which is not copied to the 

59
00:02:58.220 --> 00:02:58.930
new array temp

60
00:02:58.930 --> 00:03:01.990
so we have to handle that kind of elements 

61
00:03:01.990 --> 00:03:02.450
also 

62
00:03:02.840 --> 00:03:06.430
So after coming out of the while loop copy all 

63
00:03:06.440 --> 00:03:08.250
elements that are not copied

64
00:03:08.640 --> 00:03:09.890
So we can use a while 

65
00:03:09.890 --> 00:03:13.840
Loop from I till we reach mid So while i less 

66
00:03:13.840 --> 00:03:17.650
than or equal to mid copy I th element to temp 

67
00:03:17.770 --> 00:03:20.550
so temp of k equal to arr of I 

68
00:03:21.040 --> 00:03:24.030
now increment both I and k so 

69
00:03:24.030 --> 00:03:27.730
This while loop will add any remaining elements into the 

70
00:03:27.730 --> 00:03:29.710
new array so that is solved 

71
00:03:30.030 --> 00:03:32.630
But what if it was the other way around That 

72
00:03:32.630 --> 00:03:36.030
is all elements of first half are added But 

73
00:03:36.040 --> 00:03:38.770
there are elements in second half which are not added 

74
00:03:38.780 --> 00:03:39.250
to temp 

75
00:03:39.840 --> 00:03:42.800
So we have to write code for that too Same 

76
00:03:42.800 --> 00:03:45.890
logic use of while loop from J till we reach 

77
00:03:45.900 --> 00:03:46.300
end 

78
00:03:46.610 --> 00:03:50.210
So while j less than or equal to end copy 

79
00:03:50.220 --> 00:03:53.590
J th element to temp that is temp of K 

80
00:03:53.590 --> 00:03:58.450
equal to arr  of J now increment both J k 

81
00:03:58.940 --> 00:03:59.800
So that is done 

82
00:03:59.900 --> 00:04:02.880
We have all elements sorted in the temp array 

83
00:04:03.540 --> 00:04:06.980
Now we can simply copy these elements into the original 

84
00:04:06.990 --> 00:04:07.350
array. 

