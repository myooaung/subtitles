WEBVTT

1
00:00:00.740 --> 00:00:01.490
Hi friends 

2
00:00:01.500 --> 00:00:04.520
In this video we are going to learn the bit wise OR operator

3
00:00:10.530 --> 00:00:13.240
The bit wise OR operator takes equal length 

4
00:00:13.250 --> 00:00:16.520
binary sequence and performs bit wise OR operator 

5
00:00:16.750 --> 00:00:19.610
So if he have 0 and 0 then this operator 

6
00:00:19.610 --> 00:00:20.840
will return zero 

7
00:00:20.850 --> 00:00:23.390
And if we have 0 and 1 then the result 

8
00:00:23.400 --> 00:00:26.790
is 1 and if we have 1 and 0 then also 

9
00:00:26.790 --> 00:00:27.830
the result is 1 

10
00:00:27.840 --> 00:00:30.430
And finally if we have both the value equal to 

11
00:00:30.430 --> 00:00:33.130
1 then also the result will be 1 

12
00:00:33.290 --> 00:00:35.720
So simply saying if we have any of the bit 

13
00:00:35.730 --> 00:00:38.320
equal to 1 then the result is 1 

14
00:00:38.840 --> 00:00:42.200
So see an example take 10 and 12 and let 

15
00:00:42.200 --> 00:00:45.400
us perform bit wise OR operation on these numbers 

16
00:00:45.430 --> 00:00:48.339
But these are decimal numbers and we need to convert 

17
00:00:48.350 --> 00:00:50.250
it into binary numbers 

18
00:00:50.260 --> 00:00:52.669
And we know the binary equivalent of the decimal 10

19
00:00:52.670 --> 00:00:57.560
It is equal to 1010 and for 12 it is equal 

20
00:00:57.560 --> 00:01:01.050
to 1100 Now we can perform bit wise OR

21
00:01:01.540 --> 00:01:04.300
So take the first pair of bits which are 0 

22
00:01:04.300 --> 00:01:07.040
and 0 and we have the truth table and we 

23
00:01:07.040 --> 00:01:09.210
don't have any of the value equal to one 

24
00:01:09.240 --> 00:01:14.470
So we get 0 and the next pair is 1 0 So 

25
00:01:14.470 --> 00:01:17.220
we get 1 and next is 0 and 1

26
00:01:17.230 --> 00:01:20.420
So we get 1 again and finally we have 1 

27
00:01:20.430 --> 00:01:23.320
and 1 so the operator will be returning a 1 

28
00:01:23.490 --> 00:01:27.450
and result of bit wise OR operation between 10 and 12 

29
00:01:27.460 --> 00:01:31.350
is 1110 which is equivalent to decimal 40 

30
00:01:31.640 --> 00:01:34.559
Now see the code to implement this. In the main 

31
00:01:34.560 --> 00:01:38.030
function we are declaring two integers A and B which 

32
00:01:38.030 --> 00:01:39.929
are equal to 10 and 12 

33
00:01:40.280 --> 00:01:44.130
Then we are calculating the output equal to A 

34
00:01:44.130 --> 00:01:48.429
bit wise OR B so with OR operation will be performed 

35
00:01:48.430 --> 00:01:50.670
and the results will be stored in output 

36
00:01:51.000 --> 00:01:53.450
Now we are printing the value of output which will 

37
00:01:53.450 --> 00:01:54.750
be equal to 40 

38
00:01:54.940 --> 00:01:55.820
So that's it 

39
00:01:58.240 --> 00:02:01.930
Now let us discuss about the application of bit wise OR  

40
00:02:01.930 --> 00:02:04.740
suppose we are going to design a robot car which uses 

41
00:02:04.740 --> 00:02:08.060
a sensor to sends the environment and update its direction 

42
00:02:08.070 --> 00:02:08.780
accordingly 

43
00:02:08.790 --> 00:02:12.549
And we have four directions backward, forward, left and right 

44
00:02:12.560 --> 00:02:15.390
and each bit when set to 1 can indicate to 

45
00:02:15.390 --> 00:02:18.710
go to a particular direction 

46
00:02:18.940 --> 00:02:21.490
ie., if the first bit is set, the car should 

47
00:02:21.490 --> 00:02:24.200
go to right direction and if the second bit is set 

48
00:02:24.210 --> 00:02:26.010
go to left direction and so on. 

49
00:02:26.020 --> 00:02:27.670
But how to enable a bit

50
00:02:27.670 --> 00:02:31.330
Specifically? we can use bitwise or operator and we 

51
00:02:31.330 --> 00:02:34.150
can have a mask value for each case suppose

52
00:02:34.150 --> 00:02:38.000
We want the car to go to left direction and 

53
00:02:38.000 --> 00:02:40.500
the second bit is reserved for left direction 

54
00:02:40.740 --> 00:02:45.290
So We can have mask value 0010 and perform bit wise OR 

55
00:02:45.290 --> 00:02:48.450
operation and in the result only second bit is 1 

56
00:02:48.510 --> 00:02:50.700
and the car will go to left direction 

57
00:02:50.820 --> 00:02:53.640
And if you want to go to backward that that 

58
00:02:53.640 --> 00:02:57.120
is the fourth bit and we can have mask value 

59
00:02:57.120 --> 00:03:01.660
equal to 1000. So in the result only fourth bit 

60
00:03:01.670 --> 00:03:02.350
is one 

61
00:03:03.240 --> 00:03:06.540
So let us see how a robotic car goes and see 

62
00:03:06.540 --> 00:03:10.690
the sensor status here first we have 0001 only

63
00:03:10.690 --> 00:03:14.040
First bit is set and it indicates to go to 

64
00:03:14.050 --> 00:03:17.650
right So the car goes to right now only second 

65
00:03:17.650 --> 00:03:18.480
bit is one 

66
00:03:18.520 --> 00:03:21.040
So the car will go to left and so on 

67
00:03:21.140 --> 00:03:23.660
So this is how we can apply bit wise OR

68
00:03:23.670 --> 00:03:24.760
in many areas 

69
00:03:24.840 --> 00:03:27.149
So that's all and thank you for watching this video 

