WEBVTT

1
00:00:00.240 --> 00:00:01.050
Hello friends 

2
00:00:01.640 --> 00:00:04.250
In this video we will learn how to do the 

3
00:00:04.260 --> 00:00:07.550
time and space complexity and analysis of loops 
 
4
00:00:08.540 --> 00:00:12.190
Here we have an example algorithm with a single for 

5
00:00:12.190 --> 00:00:12.440
loop 

6
00:00:13.240 --> 00:00:16.980
The first statement here is int i and sum = 0 

7
00:00:16.980 --> 00:00:20.470
which is a simple statement and hence it 

8
00:00:20.470 --> 00:00:22.750
will take only one unit of time 

9
00:00:23.540 --> 00:00:27.100
Next we have for i=1 and i<=n, i++ 

10
00:00:27.100 --> 00:00:29.150

11
00:00:29.640 --> 00:00:33.220
And how many iterations will this loop have Let us 

12
00:00:33.220 --> 00:00:37.260
suppose n equal to 3 then the for loop condition 

13
00:00:37.260 --> 00:00:39.390
will be true for i=1 

14
00:00:39.600 --> 00:00:43.320
i=2 and i=3 and for i = 4 

15
00:00:43.320 --> 00:00:43.930

16
00:00:43.940 --> 00:00:47.920
When the condition is checked it will fail so total 

17
00:00:47.930 --> 00:00:51.890
n+1 times this will be executed and n times 

18
00:00:51.900 --> 00:00:54.540
the condition will be true and the next time it 

19
00:00:54.540 --> 00:00:57.550
will fail And the statement inside the for loop will 

20
00:00:57.550 --> 00:00:59.470
execute only n times 

21
00:00:59.740 --> 00:01:03.330
In the n+1 iteration the for Loop condition 

22
00:01:03.330 --> 00:01:05.650
fails and control will come out 

23
00:01:06.140 --> 00:01:09.420
So this inner  statement sum = sum+i 

24
00:01:09.430 --> 00:01:13.930
will be executed only end times and finally we 

25
00:01:13.930 --> 00:01:17.080
have the return sum statement which will take one unit 

26
00:01:17.080 --> 00:01:17.550
of time 

27
00:01:17.940 --> 00:01:21.680
So total time taken by this programme T of X 

28
00:01:21.690 --> 00:01:25.480
equal to 1+n+1+n+1

29
00:01:25.480 --> 00:01:29.350
one that is T of X equal to 2n+3 

30
00:01:29.350 --> 00:01:30.000
 

31
00:01:30.130 --> 00:01:32.240
That is if n=1 

32
00:01:32.290 --> 00:01:35.040
The total time will be 2n+3

33
00:01:35.040 --> 00:01:38.640
which is five units and if n = 5 then 

34
00:01:38.640 --> 00:01:41.570
the total time taken will be to 2*5+3 

35
00:01:41.570 --> 00:01:43.350
which is 13 units 

36
00:01:43.940 --> 00:01:47.500
So time taken depends on the input value the small 

37
00:01:47.500 --> 00:01:49.750
other input the lesser the time taken 

38
00:01:50.340 --> 00:01:52.850
But how do we say that time complexity Here 

39
00:01:53.240 --> 00:01:56.180
See here we have a polynomial expression 

40
00:01:56.190 --> 00:01:58.580
And if we have a polynomial expression like 

41
00:01:58.580 --> 00:02:01.970
this in general we will take the largest exponents 

42
00:02:02.150 --> 00:02:04.720
That is the degree of the polynomial as 

43
00:02:04.720 --> 00:02:05.780
the time complexity 

44
00:02:06.540 --> 00:02:09.660
And here the largest exponant and power one 

45
00:02:09.900 --> 00:02:13.860
So the complexity is order of N what about 

46
00:02:13.860 --> 00:02:18.180
the space complexity Here we have n taking one unit 

47
00:02:18.180 --> 00:02:22.080
of memory Then we have I and some also requiring 

48
00:02:22.080 --> 00:02:25.600
one unit each and we don't have any other memory 

49
00:02:25.600 --> 00:02:27.280
requirements in this programme 

50
00:02:27.430 --> 00:02:31.570
So the total memory required S of X equal to one 

51
00:02:31.570 --> 00:02:35.030
plus one plus one equals 3 which is a constant 

52
00:02:35.210 --> 00:02:38.650
So the space complexity is order of one 

53
00:02:39.540 --> 00:02:43.040
Now let us take another example algorithm which takes a 

54
00:02:43.040 --> 00:02:45.350
one dimensional array as input 

55
00:02:46.040 --> 00:02:48.550
First let us find the time complexity 

56
00:02:48.940 --> 00:02:52.830
The first statement will take one unit time and next 

57
00:02:52.830 --> 00:02:53.850
we have the for Loop

58
00:02:54.240 --> 00:02:57.910
And how many iterations will it have Let us suppose add 

59
00:02:57.910 --> 00:02:58.750
equal to three 

60
00:02:59.140 --> 00:03:01.990
Then the for Loop condition will be true for equal 

61
00:03:01.990 --> 00:03:06.330
to 0,1 and 2 and for equal to three 

62
00:03:06.340 --> 00:03:09.740
When the condition is checked it will fail so total 

63
00:03:09.750 --> 00:03:12.380
n+1 one times this will be executed 

64
00:03:12.840 --> 00:03:16.050
n times the for loop condition will be true and 

65
00:03:16.050 --> 00:03:17.650
the next time it will fail 

66
00:03:18.340 --> 00:03:21.740
And the statement inside the for Loop will execute only 

67
00:03:21.750 --> 00:03:22.530
n times 

68
00:03:22.610 --> 00:03:25.290
That is when the for Loop condition is true 

69
00:03:25.380 --> 00:03:29.120
The statement inside will be executed in the n+1 

70
00:03:29.120 --> 00:03:32.420
iteration of the for loop the condition will fail

71
00:03:32.500 --> 00:03:34.050
and control will come out 

72
00:03:34.440 --> 00:03:38.070
So this inner statement sum = sum + arr[i] 

73
00:03:38.070 --> 00:03:42.540
of i will be executed only n times and finally 

74
00:03:42.550 --> 00:03:45.530
we have the return statement which will also take one 

75
00:03:45.530 --> 00:03:46.350
unit of time 

76
00:03:47.040 --> 00:03:50.800
So the total time taken T of X equal to  

77
00:03:50.800 --> 00:03:54.900
1+(n+1)+n+1 that is  

78
00:03:55.170 --> 00:03:57.450
T of X equal to 2n+3 

79
00:03:57.940 --> 00:04:00.440
And as we just learnt we have to take the 

80
00:04:00.440 --> 00:04:03.200
degree of this polynomial expression and we will get 

81
00:04:03.200 --> 00:04:05.650
the time complexity as order of n

82
00:04:06.740 --> 00:04:08.570
So that was the time complexity 

83
00:04:08.740 --> 00:04:11.350
Now let us discuss about the space complexity 

84
00:04:11.940 --> 00:04:16.710
Firstly we have functioned parameters arr and n  

85
00:04:16.720 --> 00:04:19.780
arr is an array of size n so it will take 

86
00:04:19.790 --> 00:04:23.060
n units of memory and there is a variable n

87
00:04:23.300 --> 00:04:26.010
and it will also take one unit of memory 

88
00:04:26.330 --> 00:04:30.140
So total n+1  Next we have the variables 

89
00:04:30.150 --> 00:04:33.800
i and sum which will require one unit of memory 

90
00:04:33.810 --> 00:04:34.990
each and that all

91
00:04:34.990 --> 00:04:39.150
So so the total memory taken here S of X equal  

92
00:04:39.150 --> 00:04:42.230
to n+1+1+1 that is 

93
00:04:42.240 --> 00:04:43.970
n+3 again 

94
00:04:43.970 --> 00:04:44.930
It is a polynomial

95
00:04:44.940 --> 00:04:47.380
So what do we do We find a degree and 

96
00:04:47.390 --> 00:04:48.080
it is one 

97
00:04:48.330 --> 00:04:52.340
So the space complexity is order of n in now in 

98
00:04:52.340 --> 00:04:53.190
the same code 

99
00:04:53.190 --> 00:04:55.780
Let us take one more for loop and analyse it 

100
00:04:55.780 --> 00:04:57.770
space and time complexities 

101
00:04:57.930 --> 00:05:01.150
So for this new loop for i = 0, i>n

102
00:05:01.150 --> 00:05:03.950
and i++ it will also have n 

103
00:05:03.950 --> 00:05:07.620
plus one executions n times the condition will be true 

104
00:05:07.720 --> 00:05:09.350
and one time it will fail 

105
00:05:09.440 --> 00:05:12.180
So this will be executed n+1 times 

106
00:05:12.840 --> 00:05:15.660
Now what about the in a statement It will be 

107
00:05:15.660 --> 00:05:19.130
executed only when the for loop condition is true 

108
00:05:19.320 --> 00:05:20.690
That is n times 

109
00:05:20.910 --> 00:05:24.650
So the total time taken here will be n unit 

110
00:05:24.830 --> 00:05:28.710
So the total time taken is 

111
00:05:28.710 --> 00:05:32.540
1+(n+1)+n+(n+1)+n+1 

112
00:05:32.540 --> 00:05:34.820
one that is 4n+4 

113
00:05:35.340 --> 00:05:38.400
But again if you say the degree of polynomial is 

114
00:05:38.400 --> 00:05:41.610
still 1 So the time complexity is order of 

115
00:05:41.620 --> 00:05:46.460
n again now what about the space complex city For 

116
00:05:46.460 --> 00:05:49.330
this loop it will not take any more memory units 

117
00:05:49.340 --> 00:05:51.850
because there are no new variables or anything 

118
00:05:51.920 --> 00:05:55.050
So the space complexity will also remain the same 

119
00:05:55.840 --> 00:05:58.790
So what can we conclude from this example Say we 

120
00:05:58.790 --> 00:06:02.470
can observe that having a separate loop doesn't make any 

121
00:06:02.470 --> 00:06:06.500
major impact on the time complexity so if an algorithm 

122
00:06:06.500 --> 00:06:08.260
has n separate loops 

123
00:06:08.270 --> 00:06:11.230
Then the loop which takes largest time will be the 

124
00:06:11.230 --> 00:06:13.150
time complexity of the algorithm 

125
00:06:13.940 --> 00:06:15.730
Now say another example 

126
00:06:15.740 --> 00:06:18.840
Here we have a two dimensional area and a nested 

127
00:06:18.840 --> 00:06:21.870
for Loop so let us find the time complexity 

128
00:06:21.870 --> 00:06:25.300
First the four statement will take just one unit of 

129
00:06:25.300 --> 00:06:27.550
time and next we have the for Loop 

130
00:06:27.940 --> 00:06:31.660
And how many iterations will it have we have for 

131
00:06:31.670 --> 00:06:35.170
i=0 , i<n, i++, so 

132
00:06:35.170 --> 00:06:37.400
it will have total n iterations 

133
00:06:37.410 --> 00:06:40.330
That is if n =3 ,the condition will 

134
00:06:40.330 --> 00:06:42.590
be true for i = 0,

135
00:06:42.600 --> 00:06:44.980
i=1 and 1=2 

136
00:06:44.990 --> 00:06:47.450
And for i=3 condition will fail 

137
00:06:47.840 --> 00:06:52.150
So including the failed case check total n+1 

138
00:06:52.150 --> 00:06:54.050
times this will be executed 

139
00:06:54.740 --> 00:06:57.540
And what about inner statements We have a 

140
00:06:57.540 --> 00:07:01.500
loop inside first and it will be executed whenever the 

141
00:07:01.500 --> 00:07:03.190
outer Loop condition is true 

142
00:07:03.370 --> 00:07:04.910
That is n times 

143
00:07:05.250 --> 00:07:08.880
So n times this will be executed for i=0, 

144
00:07:08.880 --> 00:07:12.480
i=1 and i=2 upto i=n 

145
00:07:12.480 --> 00:07:14.450
to an each time 

146
00:07:14.540 --> 00:07:18.270
How many iterations will it have It will have iterations 

147
00:07:18.270 --> 00:07:19.150
for j=0,j=1,j=2 upto n
 
148
00:07:19.150 --> 00:07:22.200

149
00:07:22.200 --> 00:07:26.120
that is n times the condition will be true 

150
00:07:26.450 --> 00:07:29.260
And one time that is for the n+1  

151
00:07:29.270 --> 00:07:33.080
time it will fail so total n+1 times 

152
00:07:33.090 --> 00:07:36.380
this will be executed and it will be executed for 

153
00:07:36.390 --> 00:07:40.350
n times by the outer loop so total n * (n+1)

154
00:07:40.350 --> 00:07:41.100
 
 
155
00:07:41.110 --> 00:07:43.990
Now what about this Inner most statement it will 

156
00:07:43.990 --> 00:07:47.480
be executed whenever the inner loop condition is true 

157
00:07:47.680 --> 00:07:50.380
That is n times  and n times 

158
00:07:50.380 --> 00:07:54.190
The outer loop will execute the inner loop and n 

159
00:07:54.190 --> 00:07:54.660
times 

160
00:07:54.810 --> 00:07:56.250
The inner loop will be true 

161
00:07:56.640 --> 00:08:00.350
So n*n times this statement will be executed 

162
00:08:00.840 --> 00:08:03.860
So n*n  will be the time taken by 

163
00:08:03.860 --> 00:08:04.850
this statement 

164
00:08:05.340 --> 00:08:09.030
And the final return statement will take one unit time 

165
00:08:09.380 --> 00:08:13.120
So total time taken will be T of X equal to 

166
00:08:13.130 --> 00:08:16.880
1+(n+1)+n*(n+1)+n*n+1 

167
00:08:16.880 --> 00:08:21.250
that is 
168
00:08:21.260 --> 00:08:24.640
1+n+1+n*n, n square

169
00:08:24.650 --> 00:08:28.020
 plus n*1+n*n, n square +1

170
00:08:28.020 --> 00:08:31.970
that is 2n square +2n+3

171
00:08:31.970 --> 00:08:32.850


172
00:08:33.340 --> 00:08:35.990
So it's a polynomial expression and what do 

173
00:08:35.990 --> 00:08:38.860
we do now We find the degree and here we 

174
00:08:38.860 --> 00:08:41.450
have n raise to 2 and n raise to 1 

175
00:08:41.840 --> 00:08:44.670
So 2 is the degree so the time complexity will 

176
00:08:44.680 --> 00:08:46.180
be order of n square 

177
00:08:46.730 --> 00:08:50.540
So if n=2  total time is 4 and 

178
00:08:50.550 --> 00:08:54.150
if an equal to 5 total time is 25 units 

179
00:08:54.940 --> 00:08:57.130
now that was the time complexity 

180
00:08:57.140 --> 00:09:00.310
Now what about the space complexity Here we have a 

181
00:09:00.320 --> 00:09:03.800
two dimensional array so it will have n rows and 

182
00:09:03.810 --> 00:09:07.780
n columns so it requires an n*n memory units 

183
00:09:07.790 --> 00:09:10.140
that is n square memory units 

184
00:09:10.550 --> 00:09:13.250
Then we have n which will take one unit 

185
00:09:13.480 --> 00:09:17.130
And then we have i,j and sum each requiring one 

186
00:09:17.130 --> 00:09:18.050
unit of memory 

187
00:09:18.540 --> 00:09:22.350
So the total memory required a S of X  

188
00:09:22.350 --> 00:09:26.060
n square+1+1+1+1 that 

189
00:09:26.060 --> 00:09:28.570
is n square+4 again 

190
00:09:28.570 --> 00:09:32.320
It's a polynomial and we have the degree to so 

191
00:09:32.330 --> 00:09:35.180
the space complex area will be equal to order of  

192
00:09:35.190 --> 00:09:35.950
n square 

193
00:09:36.440 --> 00:09:38.340
Now see another example 

194
00:09:38.520 --> 00:09:41.970
Here we have it two dimensional array and nested triple 

195
00:09:41.970 --> 00:09:43.650
for loop

196
00:09:43.650 --> 00:09:46.330
Find the time complexity of this algorithm 

197
00:09:46.330 --> 00:09:50.200
First the first statement will take just one unit of 

198
00:09:50.200 --> 00:09:50.550
time 

199
00:09:50.930 --> 00:09:52.350
Next we have the fur loop

200
00:09:52.840 --> 00:09:54.200
And how many iteration 

201
00:09:54.200 --> 00:09:58.820
Will it have We have the outermost loop for i=0 

202
00:09:58.820 --> 00:10:01.640
i<n, i++ 

203
00:10:02.140 --> 00:10:04.520
So it will have total and n iterations 

204
00:10:04.560 --> 00:10:07.300
That is if n=3 the condition will be 

205
00:10:07.300 --> 00:10:10.250
true for i=0,i=1 and i=2 

206
00:10:10.540 --> 00:10:13.640
And when i equal to 3 the condition will fail 

207
00:10:14.340 --> 00:10:18.250
So total n+1 times this will be executed 

208
00:10:18.640 --> 00:10:22.480
And what about this inner statements all these statements 

209
00:10:22.490 --> 00:10:26.700
inside will be executed whenever the outer loop condition is 

210
00:10:26.700 --> 00:10:27.000
true 

211
00:10:27.180 --> 00:10:28.570
That is n times 

212
00:10:29.140 --> 00:10:32.490
So n times all these will be executed that is 

213
00:10:32.500 --> 00:10:37.360
for i equal to 012 upto n inside first 

214
00:10:37.360 --> 00:10:38.550
We have a for Loop

215
00:10:39.140 --> 00:10:43.240
And how many iterations will it have It will have 

216
00:10:43.250 --> 00:10:44.740
iterations for j=0,j=1,

217
00:10:44.740 --> 00:10:47.970
j=2,

218
00:10:48.170 --> 00:10:51.010
up to j=n-1 when j=n 

219
00:10:51.010 --> 00:10:54.580
it will fail that is n times 

220
00:10:54.580 --> 00:10:55.850
the condition will be true 

221
00:10:56.120 --> 00:10:58.390
And one time that is for the n+1 

222
00:10:58.390 --> 00:11:00.290
time it will fail 

223
00:11:00.600 --> 00:11:04.090
So total n+1 times this will be executed 

224
00:11:04.320 --> 00:11:07.460
and it will be executed for n times by the 

225
00:11:07.470 --> 00:11:08.230
outer loop 

226
00:11:08.420 --> 00:11:10.950
So total n*(n+1) 

227
00:11:11.640 --> 00:11:14.750
And what about the statements inside the second for loop 

228
00:11:15.540 --> 00:11:16.820
it will be executed 

229
00:11:17.140 --> 00:11:19.400
When the second for loop condition is true 

230
00:11:19.490 --> 00:11:23.080
That is n times and inside we have a for 

231
00:11:23.080 --> 00:11:23.330
loop

232
00:11:23.740 --> 00:11:27.100
And how many iterations will it have It will have 

233
00:11:27.110 --> 00:11:30.630
n iterations That is four k=0 k=1 ,

234
00:11:30.630 --> 00:11:33.240
k=2,upto k=n-1 

235
00:11:33.770 --> 00:11:36.880
and for k=n The condition will fail 

236
00:11:37.240 --> 00:11:39.840
That is n times the condition will be true 

237
00:11:39.990 --> 00:11:42.520
And for the n+1 time the condition will 

238
00:11:42.530 --> 00:11:42.950
fail 

239
00:11:43.340 --> 00:11:46.650
So total n+1 times this will be executed 

240
00:11:46.930 --> 00:11:49.790
and it will be executed for n times by the 

241
00:11:49.790 --> 00:11:53.380
second for loop and n times by the outermost for 

242
00:11:53.380 --> 00:11:56.890
loop so total n*n*(n+1) 

243
00:11:56.890 --> 00:11:57.790
times 

244
00:11:57.990 --> 00:12:01.020
Now what about this inner most statement it will 

245
00:12:01.020 --> 00:12:04.450
be executed whenever the innermost loop condition is true 

246
00:12:04.940 --> 00:12:09.560
Thatis n times so n times the outermost loop will 

247
00:12:09.570 --> 00:12:13.190
execute the inner loop and n times that inner loop 

248
00:12:13.190 --> 00:12:16.790
will be true and it executes the innermost loop and 

249
00:12:16.800 --> 00:12:17.410
n times 

250
00:12:17.410 --> 00:12:18.170
It will be true 

251
00:12:18.940 --> 00:12:22.740
Just as we discussed so n*n*n 

252
00:12:22.740 --> 00:12:23.260
times 

253
00:12:23.270 --> 00:12:25.040
This statement will be executed 

254
00:12:25.050 --> 00:12:28.790
Now The final returns statement will take one unit time 

255
00:12:29.240 --> 00:12:32.410
so total time taken will be t of x equal 

256
00:12:32.410 --> 00:12:36.150
to 1+(n+1)+n*n(n+1)+

257
00:12:36.150 --> 00:12:39.310
n*n*(n+1)+n*n*n+1
 
258
00:12:39.320 --> 00:12:42.850
that is 

259
00:12:43.020 --> 00:12:46.390
1+n+1+n square+n+n cube

260
00:12:46.390 --> 00:12:50.040
plus n square+ n cube+1

261
00:12:50.040 --> 00:12:53.340
that is 

262
00:12:53.500 --> 00:12:57.300
2n cube + 2n square + 2n +3
263
00:12:57.310 --> 00:13:01.620


264
00:13:01.620 --> 00:13:04.150

265
00:13:04.840 --> 00:13:06.760
And again it's a polynomial expression 

266
00:13:06.760 --> 00:13:09.040
So what do we do We find the degree and 

267
00:13:09.040 --> 00:13:12.740
here we have n Cube n Square and n raise to 

268
00:13:12.740 --> 00:13:13.150
one 

269
00:13:13.640 --> 00:13:16.180
So three is the degree here so we can say 

270
00:13:16.190 --> 00:13:20.320
the time complexity of this algorithm is order of 

271
00:13:20.320 --> 00:13:20.650
n cube 

272
00:13:21.540 --> 00:13:24.440
So that was the time complexity Now what about the 

273
00:13:24.440 --> 00:13:27.450
space complexity Here we have a 2d array  

274
00:13:27.660 --> 00:13:30.450
So it will have n Rows and n columns so it 

275
00:13:30.450 --> 00:13:34.230
requires n*n memory units that is n square 

276
00:13:34.230 --> 00:13:35.150
memory unit 

277
00:13:35.710 --> 00:13:38.550
Then we have n which will require one unit of 

278
00:13:38.560 --> 00:13:39.140
memory 

279
00:13:39.330 --> 00:13:43.110
And then we have I J K and some each 

280
00:13:43.110 --> 00:13:44.950
requiring one unit of memory 

281
00:13:45.540 --> 00:13:51.040
So total memory required is n square plus 5 again 

282
00:13:51.040 --> 00:13:52.040
it is a polynomial 

283
00:13:52.040 --> 00:13:54.320
So if we find the degree and we got degree

284
00:13:54.320 --> 00:13:58.400
equal to 2 here so space complexity of this algorithm 

285
00:13:58.410 --> 00:14:00.150
is order of n square 

286
00:14:01.040 --> 00:14:03.690
So that is how we can find the time and 

287
00:14:03.690 --> 00:14:07.150
space complexities of algorithms with loops 

288
00:14:07.740 --> 00:14:11.290
And we understood that the time complexity of a loop 

289
00:14:11.380 --> 00:14:14.470
is actually equal to the number of times the inner 

290
00:14:14.470 --> 00:14:16.550
most statement is to be executed 

291
00:14:17.140 --> 00:14:20.030
That is in the last example we so that the 

292
00:14:20.030 --> 00:14:24.520
innermost statement executed n*n*n times and 

293
00:14:24.520 --> 00:14:27.590
hence we got the time complexity order of n cube

294
00:14:27.820 --> 00:14:31.190
And even if you have separate loops in your algorithm 

295
00:14:31.400 --> 00:14:34.080
it really doesn't make a major impact on the time 

296
00:14:34.080 --> 00:14:34.850
complexity 

297
00:14:35.340 --> 00:14:37.600
And if you have n separate loops 

298
00:14:37.840 --> 00:14:40.960
The loop which takes the largest time will be the 

299
00:14:40.970 --> 00:14:43.420
time complexity of the whole algorithm 

300
00:14:43.740 --> 00:14:47.110
For example if your algorithm has a simple four loop 

301
00:14:47.120 --> 00:14:50.580
and a nested triple for look then the time complexity 

302
00:14:50.580 --> 00:14:53.850
of that algorithm will be order of n cube 

