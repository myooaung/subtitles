WEBVTT

1
00:00:00.240 --> 00:00:02.220
In BitonicArray or Mountain Arrays 

2
00:00:02.330 --> 00:00:05.900
We know that elements will be in increasing order till 

3
00:00:05.910 --> 00:00:09.860
a particular index and after that they will be decreasing 

4
00:00:09.950 --> 00:00:13.060
That is there will be two parts in these arrays 

5
00:00:13.260 --> 00:00:16.120
The first part will be in ascending order and the 

6
00:00:16.120 --> 00:00:18.250
second part will be in descending order 

7
00:00:18.440 --> 00:00:21.660
The peak element will have a smaller number before and 

8
00:00:21.670 --> 00:00:22.350
after it 

9
00:00:22.840 --> 00:00:25.990
Keeping this in mind let it's built a logic using 

10
00:00:25.990 --> 00:00:27.450
binary search technique 

11
00:00:27.840 --> 00:00:28.600
As usual 

12
00:00:28.780 --> 00:00:31.640
Let us point start to the first element in the 

13
00:00:31.650 --> 00:00:34.910
an end to the last element of the array in each 

14
00:00:34.910 --> 00:00:35.610
iteration 

15
00:00:35.770 --> 00:00:38.380
Let's find the middle element and check whether it is 

16
00:00:38.380 --> 00:00:41.620
a peak element if the mid element has a smaller 

17
00:00:41.620 --> 00:00:43.300
number before and after it 

18
00:00:43.550 --> 00:00:46.400
We have found a peak element here 

19
00:00:46.410 --> 00:00:50.830
65 has a smaller element 58 after it but has 

20
00:00:50.830 --> 00:00:53.150
a greater number 76 before it 

21
00:00:53.540 --> 00:00:56.320
If we do not have the peak element at mid what 

22
00:00:56.320 --> 00:00:58.850
can we do We know that peak element will be 

23
00:00:58.850 --> 00:01:02.120
present as last element in the first part that is 

24
00:01:02.130 --> 00:01:03.410
ascending order part 

25
00:01:03.620 --> 00:01:07.140
So check where is the current mid element present first 

26
00:01:07.140 --> 00:01:10.830
part or second part and adjust start or end pointers 

27
00:01:10.940 --> 00:01:13.590
in such a way that we move closer to the 

28
00:01:13.600 --> 00:01:14.390
end of first 

29
00:01:14.390 --> 00:01:17.510
Part check if element at mid is greater than 

30
00:01:17.510 --> 00:01:21.080
the element before it at mid minus one if yes 

31
00:01:21.420 --> 00:01:24.550
then the current mid is present in ascending order part 

32
00:01:25.240 --> 00:01:28.530
here array of mid 65 is not greater than its 

33
00:01:28.530 --> 00:01:31.520
previous element array of mid minus 1 76 

34
00:01:31.830 --> 00:01:35.260
Thus the current mid is presenting in descending portion of 

35
00:01:35.270 --> 00:01:35.760
the array 

36
00:01:35.780 --> 00:01:38.510
So let us adjust end to mid and that 

37
00:01:38.510 --> 00:01:41.200
is three in next iteration mid 

38
00:01:41.200 --> 00:01:44.330
is one that his array of 1 12 has a 

39
00:01:44.330 --> 00:01:47.740
smaller number before it but does not have a smaller 

40
00:01:47.740 --> 00:01:49.040
number after it 

41
00:01:49.170 --> 00:01:51.850
Thus 12 is not a peak element 

42
00:01:52.040 --> 00:01:53.180
Next check 

43
00:01:53.180 --> 00:01:55.560
If array of mid is greater than an array of mid 

44
00:01:55.560 --> 00:01:59.590
minus 1 12 is greater than an array of 08 it 

45
00:01:59.590 --> 00:02:03.550
means mid 12 is present in ascending portion of the 

46
00:02:03.840 --> 00:02:06.380
so let us adjust start to mid plus one that 

47
00:02:06.380 --> 00:02:09.700
is two now start is two an end is three 

48
00:02:09.810 --> 00:02:13.250
Thus mid is two an array of mid is 76 

49
00:02:13.940 --> 00:02:18.230
76 is greater than it's next Element 65 its previous 

50
00:02:18.230 --> 00:02:19.150
element 12 

51
00:02:19.640 --> 00:02:23.450
Thus 76 is the peak element so we can return 

52
00:02:23.450 --> 00:02:25.450
mid which holds index two. 

