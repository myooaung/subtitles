WEBVTT

1
00:00:00.840 --> 00:00:01.560
Hi friends 

2
00:00:01.760 --> 00:00:04.273
In this video we are going to discuss about structure padding.

3
00:00:10.270 --> 00:00:14.440
So how is a structure stored in memory? see an example 

4
00:00:14.450 --> 00:00:17.520
We have a structure example here which is having 2 

5
00:00:17.520 --> 00:00:19.750
members char c and int i

6
00:00:20.340 --> 00:00:22.890
Now we know that char takes one byte and int

7
00:00:22.890 --> 00:00:23.890
takes four bytes 

8
00:00:23.890 --> 00:00:26.320
And now we are printing the size of structure here 

9
00:00:27.540 --> 00:00:30.939
So what will be the output? Is it five? No 

10
00:00:31.220 --> 00:00:32.960
char occupies one byte 

11
00:00:32.970 --> 00:00:35.150
We have three bytes remaining here 

12
00:00:35.450 --> 00:00:38.850
But an integer value takes four byte so it cant 

13
00:00:38.850 --> 00:00:39.730
be placed here 

14
00:00:39.740 --> 00:00:43.140
So the compiler adds three bytes padding after the char 

15
00:00:43.140 --> 00:00:46.019
value and stores the integer value separately 

16
00:00:46.540 --> 00:00:48.319
And this is called structure padding.

17
00:00:48.640 --> 00:00:51.440
So here the output will be eight and not five 

18
00:00:52.740 --> 00:00:54.550
Now see another example 

19
00:00:54.560 --> 00:00:57.690
We have the structure example with members c1 of

20
00:00:57.700 --> 00:01:00.750
character type, i of integer type and c2 

21
00:01:00.750 --> 00:01:01.680
of character type

22
00:01:02.060 --> 00:01:04.729
So char occupies One byte here and we have 

23
00:01:04.730 --> 00:01:07.990
3 bytes remaining But an integer cannot be placed so 

24
00:01:07.990 --> 00:01:11.560
three bytes will be padded And the integer i will 

25
00:01:11.560 --> 00:01:14.540
be stored in the next four bytes and next char 

26
00:01:14.540 --> 00:01:16.240
occupies one byte again 

27
00:01:16.250 --> 00:01:18.780
Three bytes are remaining so it will be padded 

28
00:01:19.050 --> 00:01:21.479
So here when we print the size of structure we 

29
00:01:21.480 --> 00:01:23.100
get the output as 12 

30
00:01:23.940 --> 00:01:25.390
Now see another example 

31
00:01:25.450 --> 00:01:27.820
Let's rearrange the previously declared structure 

32
00:01:27.820 --> 00:01:29.770
Members now gets the output 

33
00:01:29.780 --> 00:01:32.540
This time it will be eight here 

34
00:01:32.550 --> 00:01:36.260
First integer occupies four bytes then c1 of character 

35
00:01:36.260 --> 00:01:38.100
type will occupy one byte 

36
00:01:38.330 --> 00:01:41.130
Now three bytes are remaining and this three bytes is 

37
00:01:41.140 --> 00:01:42.990
enough to store another character 

38
00:01:43.000 --> 00:01:44.619
So c2 will be placed here 

39
00:01:44.630 --> 00:01:50.040
Now the output will be eight so structure padding is 

40
00:01:50.040 --> 00:01:52.729
taking extra memory space than it actually need 

41
00:01:53.240 --> 00:01:55.500
So let us see how to avoid structure padding 

42
00:01:55.510 --> 00:01:58.390
We can use the attribute packed while we declare the 

43
00:01:58.390 --> 00:01:58.990
structure 

44
00:01:59.320 --> 00:02:02.770
It will prevent a compiler from adding these extra spaces

45
00:02:03.640 --> 00:02:05.839
Now let us see the benefits of Structure Padding

46
00:02:06.340 --> 00:02:09.910
Even though structure padding occupies additional memory space it will 

47
00:02:09.910 --> 00:02:12.340
significantly increase the system performance 

48
00:02:12.610 --> 00:02:15.829
Let's see how structure padding can improve system performance 

49
00:02:16.160 --> 00:02:19.510
Let's take 32 bit processor or CPU. a 32 

50
00:02:19.510 --> 00:02:22.660
bit processor means the processor can read at most 

51
00:02:22.690 --> 00:02:23.989
32 bit at a time 

52
00:02:25.040 --> 00:02:27.730
The 32 bit members such as Int, Float should 

53
00:02:27.730 --> 00:02:29.930
start at a memory address which is a multiple 

54
00:02:29.930 --> 00:02:36.130
of 4 such as 1024,1028,1032 etcetera for efficient read 

55
00:02:36.130 --> 00:02:37.450
or write operations 

56
00:02:37.670 --> 00:02:41.330
So when structure members are packed using the packed attribute 

57
00:02:41.330 --> 00:02:44.460
like this the integer value i will be stored in 

58
00:02:44.460 --> 00:02:46.620
such a way that the first three bytes are stored 

59
00:02:46.620 --> 00:02:49.470
in the first block  and the remaining one byte is stored

60
00:02:49.470 --> 00:02:50.470
in the next block 

61
00:02:50.700 --> 00:02:53.510
So to read the integer data the processor needs to read

62
00:02:53.510 --> 00:02:55.690
two blocks and the compiler has to 

63
00:02:55.690 --> 00:02:59.180
generate more code to extract the Non Aligned Data member 

64
00:02:59.940 --> 00:03:03.070
so this will significantly reduce the system performance 

65
00:03:03.170 --> 00:03:06.890
In normal declaration with padding the compiler adds three bytes 

66
00:03:06.890 --> 00:03:10.320
space after the char variable so that the integer variable i

67
00:03:10.520 --> 00:03:13.370
will be perfectly placed in the next block and the 

68
00:03:13.370 --> 00:03:15.720
processor needs to read only once 

69
00:03:16.240 --> 00:03:19.410
And this is how the structure padding improves system performance 

70
00:03:19.500 --> 00:03:22.120
So we can say that if we need more performance 

71
00:03:22.120 --> 00:03:24.780
we can use structure padding and if we need more 

72
00:03:24.780 --> 00:03:27.850
memory efficiency then we can use structure packing 

73
00:03:27.860 --> 00:03:30.120
So that's all and thank you for watching this video 

