WEBVTT

1
00:00:00.140 --> 00:00:00.830
hi friends 

2
00:00:00.840 --> 00:00:02.960
In this video we are going to discuss how to 

3
00:00:02.960 --> 00:00:04.910
access array elements using pointers 

4
00:00:11.010 --> 00:00:12.900
so considered this piece of code

5
00:00:12.970 --> 00:00:16.310
We have an array of integers arr with elements  

6
00:00:16.320 --> 00:00:19.450
10 20 30 40 and 50 initialised into it 

7
00:00:19.840 --> 00:00:23.250
Now we declare an integer pointer ptr and assigning the 

8
00:00:23.250 --> 00:00:26.759
base address of array to ptr. Recall that the name 

9
00:00:26.760 --> 00:00:29.500
of the array or string holds the base address 

10
00:00:29.610 --> 00:00:32.360
So ptr now points to the first element of the array

11
00:00:32.370 --> 00:00:35.560
ptr+1 points to second element 

12
00:00:35.570 --> 00:00:38.710
ptr+2 points to third element ptr+3 points 

13
00:00:38.710 --> 00:00:41.000
to forth element and ptr+4 points 

14
00:00:41.000 --> 00:00:41.970
to fifth element 

15
00:00:43.040 --> 00:00:45.610
Now let us see how to print address of each element 

16
00:00:45.610 --> 00:00:47.260
in the array using pointers 

17
00:00:47.530 --> 00:00:48.560
So see the programme 

18
00:00:48.560 --> 00:00:52.060
We created the integer array and a pointer ptr

19
00:00:52.060 --> 00:00:53.699
and also in integer variable i

20
00:00:54.440 --> 00:00:56.690
Now we assign the base address of array into the 

21
00:00:56.690 --> 00:00:59.900
pointer ptr. Now in a for loop we are printing 

22
00:00:59.910 --> 00:01:01.730
address of each element in the array

23
00:01:02.240 --> 00:01:05.310
In the first iteration we print

24
00:01:05.310 --> 00:01:07.160
 &arr[0] equal to ptr+0

25
00:01:07.160 --> 00:01:09.470
which is 1024 

26
00:01:09.720 --> 00:01:13.440
In the second iteration we print &arr[1]

27
00:01:13.450 --> 00:01:14.430
equal to ptr+1

28
00:01:14.430 --> 00:01:16.610
 which is 1028 

29
00:01:16.800 --> 00:01:20.560
Since ptr is of integer type adding one will 

30
00:01:20.570 --> 00:01:24.400
add four bytes which is its size. Now in the third iteration 

31
00:01:24.400 --> 00:01:27.559
We print &arr[2] equal to ptr+2 

32
00:01:27.560 --> 00:01:29.140
to which is 1032 

33
00:01:29.280 --> 00:01:32.600
In the fourth iteration we print &arr[3]

34
00:01:32.600 --> 00:01:36.880
equal to ptr+3 which is 1036. In the 

35
00:01:36.880 --> 00:01:40.550
fifth iteration we print &arr[4] equal 

36
00:01:40.550 --> 00:01:43.890
to ptr+4 for which is 1040. In the sixth 

37
00:01:43.890 --> 00:01:44.650
iteration 

38
00:01:44.640 --> 00:01:47.300
i equal to five which is not less than five 

39
00:01:47.300 --> 00:01:50.050
So control comes out of the for loop. So now 

40
00:01:50.060 --> 00:01:53.640
we got the address of each element using pointers now 

41
00:01:53.640 --> 00:01:55.750
let us see how to print values in the array 

42
00:01:55.750 --> 00:01:56.850
using pointers 

43
00:01:56.970 --> 00:01:59.950
So just as we discussed we have array arr with 

44
00:01:59.960 --> 00:02:03.730
elements 10 20 30 40 and 50 and we have pointer 

45
00:02:03.730 --> 00:02:06.610
ptr pointing first element of the array

46
00:02:07.340 --> 00:02:10.250
Now we can access first element by writing  

47
00:02:10.250 --> 00:02:13.490
*(ptr+0) and second element using 

48
00:02:13.490 --> 00:02:17.030
*(ptr+1) similarly third element by *(ptr+2)

49
00:02:17.030 --> 00:02:17.350


50
00:02:17.350 --> 00:02:20.180
 Fourth element by *(ptr+3)

51
00:02:20.180 --> 00:02:23.040
 and Fifth Element using *(ptr+4)

52
00:02:23.040 --> 00:02:23.340


53
00:02:23.340 --> 00:02:26.489
 Now see the programme we have created the array

54
00:02:26.490 --> 00:02:29.040
with five integers and a pointer ptr 

55
00:02:29.040 --> 00:02:31.040
points to the base address of arr

56
00:02:31.360 --> 00:02:33.650
Now in a for loop  we are printing each element 

57
00:02:33.650 --> 00:02:36.950
in the array using *(ptr+i) which is 

58
00:02:36.960 --> 00:02:39.550
equivalent to writing arr[i]

59
00:02:39.940 --> 00:02:43.320
In the first iteration we print arr[0] equal 

60
00:02:43.320 --> 00:02:45.690
to *(ptr+0) which is 10 

61
00:02:45.880 --> 00:02:48.840
In the second iteration we print arr[1] equal 

62
00:02:48.840 --> 00:02:51.610
to *(ptr+1) which is 20 

63
00:02:51.670 --> 00:02:54.640
in the third iteration we print arr[2] equal 

64
00:02:54.640 --> 00:02:57.150
to *(ptr+2) equal to which is 30 

65
00:02:57.340 --> 00:03:00.559
In the fourth iteration we print arr[3] equal to 

66
00:03:00.560 --> 00:03:03.250
*(ptr+3) which is 40 

67
00:03:03.340 --> 00:03:06.230
In the fifth iteration we print arr[4] equal 

68
00:03:06.230 --> 00:03:08.799
to *(ptr+4) which is 50 

69
00:03:08.810 --> 00:03:12.190
and in the sixth iteration condition fails since i equal to five

70
00:03:12.190 --> 00:03:12.590
 

71
00:03:12.750 --> 00:03:15.450
So control comes out of the for loop. so now 

72
00:03:15.460 --> 00:03:17.970
we got each element printed using pointers 

73
00:03:18.140 --> 00:03:21.040
Now let us learn how to manipulate arrays using 

74
00:03:21.040 --> 00:03:21.799
pointers 

75
00:03:21.940 --> 00:03:24.459
So consider the programme as we done before 

76
00:03:24.470 --> 00:03:28.450
We created an array with 10 20 30 40 and 50 

77
00:03:28.640 --> 00:03:31.350
Let ptr points to the first element of the array 

78
00:03:31.510 --> 00:03:34.660
Now suppose we want to change the fourth element in to 100

79
00:03:34.660 --> 00:03:34.660


80
00:03:34.670 --> 00:03:37.800
How can we do that using pointers? so we can 

81
00:03:37.800 --> 00:03:40.360
write *(ptr+3) which gets 

82
00:03:40.360 --> 00:03:41.980
us access to Forth Element 

83
00:03:42.170 --> 00:03:45.200
Now use assignment operator to set it to 100 

84
00:03:45.210 --> 00:03:47.730
now in the memory 40 is changed to 100 

85
00:03:48.240 --> 00:03:50.690
Now let us print all the elements using a for 

86
00:03:50.690 --> 00:03:51.050
loop 

87
00:03:51.130 --> 00:03:54.080
In the first iteration we print arr[0] equal 

88
00:03:54.080 --> 00:03:54.609
to 10 

89
00:03:54.780 --> 00:03:57.510
In the second iteration we print arr[1] equal 

90
00:03:57.510 --> 00:03:58.239
to 20 

91
00:03:58.360 --> 00:04:01.090
In the third iteration we print arr[2] equal 

92
00:04:01.090 --> 00:04:01.810
to 30 

93
00:04:01.910 --> 00:04:04.640
In the fourth iteration we print arr[3] equal 

94
00:04:04.640 --> 00:04:08.570
to 100. And in fifth iteration we print arr[4] equal 

95
00:04:08.570 --> 00:04:09.250
to 50 

96
00:04:09.340 --> 00:04:12.020
So that is how we can get each element's address, 

97
00:04:12.030 --> 00:04:14.620
value and modify them using pointers 

98
00:04:15.340 --> 00:04:17.630
So that's all and thank you for watching this video 

