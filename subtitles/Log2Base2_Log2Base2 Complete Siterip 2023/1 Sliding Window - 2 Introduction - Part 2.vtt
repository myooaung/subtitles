WEBVTT

1
00:00:00.040 --> 00:00:04.050
But we can solve the same problem effectively using the 

2
00:00:04.050 --> 00:00:05.450
sliding window technique. 

3
00:00:05.810 --> 00:00:09.270
The idea is if we closely look at all the 

4
00:00:09.270 --> 00:00:13.250
sub array sum, we can conclude one thing. For the sub array,

5
00:00:13.260 --> 00:00:19.140
 1, 5, -1 and the sub array 5, -1 and 6

6
00:00:19.440 --> 00:00:22.650
The elements 5 and -1 are common 

7
00:00:23.290 --> 00:00:27.230
And for the sub array, 5,-1, 6 and sub 

8
00:00:27.240 --> 00:00:32.270
array -1, 6, 3 the elements -1 and 6 are common.

9
00:00:32.270 --> 00:00:38.260
Similarly for the sub array -1, 6, 3 and the 

10
00:00:38.260 --> 00:00:43.550
sub array 6, 3, 2 the elements 6,3 are common.

11
00:00:42.740 --> 00:00:43.550


12
00:00:44.040 --> 00:00:48.120
So using this analysis, we can derive a better solution 

13
00:00:48.130 --> 00:00:49.050
to this problem.

14
00:00:49.440 --> 00:00:54.430
That is calculate the first sub array sum which is 

15
00:00:54.430 --> 00:00:59.310
1 + 5+ -1 which is 5 and 

16
00:00:59.310 --> 00:01:03.600
in the second sub array elements 5 and -1 are common.

17
00:01:03.610 --> 00:01:07.520
So we can keep the previous sub array sum and 

18
00:01:07.520 --> 00:01:11.720
subtract the uncommon element from the first sub array

19
00:01:12.050 --> 00:01:13.550
And here it is . 

20
00:01:13.940 --> 00:01:18.070
So subtract 1 from 5 and at the new element 

21
00:01:18.080 --> 00:01:20.210
in this sub array which is 6.

22
00:01:20.570 --> 00:01:24.580
So 5 -1 +6 which is 10 and 

23
00:01:24.590 --> 00:01:26.300
10 is the new sub array sum 

24
00:01:26.300 --> 00:01:29.960
and we have calculated the second sub array sum 

25
00:01:29.970 --> 00:01:31.650
without any iteration 

26
00:01:32.140 --> 00:01:35.780
Now for the third sub array, we can subtract 

27
00:01:35.780 --> 00:01:38.550
5 from 10 and add the new element 3

28
00:01:39.040 --> 00:01:43.070
So it is 10 - 5 + 3 which is 8

29
00:01:43.080 --> 00:01:43.550


30
00:01:43.990 --> 00:01:48.290
Similarly for the last sub array, we can subtract 

31
00:01:48.290 --> 00:01:51.450
-1  from 8 and add the new element 2

32
00:01:51.760 --> 00:01:56.050
So it is 8 - -1 + 2 which is 11

33
00:01:56.050 --> 00:01:56.850


34
00:01:57.440 --> 00:02:00.540
Here we are keeping the k size window 

35
00:02:00.630 --> 00:02:04.510
And whenever we finish our calculation, we are sliding the 

36
00:02:04.510 --> 00:02:08.070
window by leaving one element from the left sub array 

37
00:02:08.360 --> 00:02:11.180
and adding one element in the right sub array

38
00:02:11.740 --> 00:02:16.050
Hence we are calling this as a sliding window technique.

39
00:02:16.820 --> 00:02:19.440
Now let us write the code for this sliding window 

40
00:02:19.440 --> 00:02:20.050
technique.

41
00:02:20.440 --> 00:02:25.020
Let us write a function sub array sum which takes the array,

42
00:02:25.210 --> 00:02:29.030
size of array n and size of sub array k

43
00:02:29.200 --> 00:02:30.250
as the input. 

44
00:02:30.740 --> 00:02:32.700
And this is the input array here 

45
00:02:32.720 --> 00:02:35.940
And let k equal to three  

46
00:02:36.080 --> 00:02:39.710
first let us mark the window starting point wstart at 

47
00:02:39.710 --> 00:02:40.390
the beginning 

48
00:02:40.800 --> 00:02:41.510
So write 

49
00:02:41.650 --> 00:02:45.750
wstart equal to zero and initially set the

50
00:02:45.760 --> 00:02:51.080
sub array sum. So write subsum equal to zero. Now using 

51
00:02:51.090 --> 00:02:54.610
a for loop from i equal to zero to,  i less than n

52
00:02:54.620 --> 00:02:59.280
add each element in subsum till we reach 

53
00:02:59.280 --> 00:03:00.550
the window size k

54
00:03:00.940 --> 00:03:05.600
So write subsum += array[i] 

55
00:03:05.880 --> 00:03:10.230
the elements 1, 5 and -1 will be added and 

56
00:03:10.230 --> 00:03:11.640
the sum will be 5.

57
00:03:12.230 --> 00:03:15.710
And when we reach the window size, that is when 

58
00:03:15.730 --> 00:03:18.760
i greater than or equal to k-1 

59
00:03:19.080 --> 00:03:22.160
We will have this sum of one sub array 

60
00:03:22.160 --> 00:03:24.250
so we can print the sub array sum.

61
00:03:24.740 --> 00:03:28.560
And also we need to subtract the starting element of 

62
00:03:28.560 --> 00:03:30.210
the window from subsum.

63
00:03:30.210 --> 00:03:34.230
Here the starting element of the window is 1

64
00:03:34.570 --> 00:03:37.650
so 1 will be subtracted from 5 and it will 

65
00:03:37.650 --> 00:03:38.650
become 4. 

66
00:03:39.040 --> 00:03:43.430
So write subsum -= array[wstart]

67
00:03:43.430 --> 00:03:48.740
finally move wstart to next position which is 

68
00:03:48.740 --> 00:03:51.990
the starting point of the next window and the same 

69
00:03:51.990 --> 00:03:53.200
process will continue.

70
00:03:53.540 --> 00:03:57.770
So now in the next iteration, 6 will be added 

71
00:03:57.850 --> 00:03:59.650
and subsum becomes 10.

72
00:04:00.240 --> 00:04:04.760
Here we have reached the window size. So print second subsum 10.

73
00:04:04.760 --> 00:04:09.430
and subtract 5 from 10 and it becomes 5

74
00:04:09.440 --> 00:04:11.570
and move the window start

75
00:04:11.570 --> 00:04:16.190
to the next position. Now 3 will be added 

76
00:04:16.190 --> 00:04:19.600
to 5 and it will become 8 and we have 

77
00:04:19.600 --> 00:04:23.560
reached the window size. So 8 will be printed and 

78
00:04:23.560 --> 00:04:27.300
then -1 will be subtracted from 8 and it 

79
00:04:27.300 --> 00:04:29.160
will become 9 and move

80
00:04:29.160 --> 00:04:33.180
the wstart to the next position. Now 2 will 

81
00:04:33.180 --> 00:04:34.940
be added to 9 and subsum

82
00:04:34.940 --> 00:04:37.880
 will be 11 and we will print it 

83
00:04:38.330 --> 00:04:38.630


84
00:04:38.630 --> 00:04:41.760
Now let us compare the complexity of the normal brute force 

85
00:04:41.770 --> 00:04:43.950
approach and sliding window approach. 

86
00:04:44.340 --> 00:04:48.250
In brute force the outer loop will run n times 

87
00:04:48.430 --> 00:04:51.950
and inner subsum calculating loop will run k times

88
00:04:51.950 --> 00:04:52.560


89
00:04:52.750 --> 00:04:56.280
So the time complexity of this brute force approach

90
00:04:56.290 --> 00:04:58.350
is O(n*k)

91
00:04:58.740 --> 00:05:03.090
But in the sliding window approach, we just used a 

92
00:05:03.090 --> 00:05:04.100
single for loop 

93
00:05:04.440 --> 00:05:08.150
So the time complexity is just O(n)

94
00:05:08.640 --> 00:05:11.990
So whenever we have to calculate something on sub array 

95
00:05:12.000 --> 00:05:15.830
or sub string, instead of brute force approach, we can 

96
00:05:15.830 --> 00:05:19.550
use the sliding window technique to build an effective solution 

97
00:05:20.240 --> 00:05:23.500
So in this video we have learnt about the sliding 

98
00:05:23.500 --> 00:05:27.070
window technique and its importance. From the next video, let us solve some problems using sliding window pattern. 

