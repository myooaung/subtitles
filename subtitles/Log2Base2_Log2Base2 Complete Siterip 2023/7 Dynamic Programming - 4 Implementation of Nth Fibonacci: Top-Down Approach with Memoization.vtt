WEBVTT

1
00:00:00.040 --> 00:00:00.920
Hello Frins 

2
00:00:00.930 --> 00:00:04.580
In this video let us discuss about the implementation of 

3
00:00:04.590 --> 00:00:09.450
finding nth Fibonacci using top down approach with Memoization 

4
00:00:10.040 --> 00:00:13.050
So as we have discussed in the previous video the 

5
00:00:13.050 --> 00:00:17.750
algorithm to implement the top down approach with Memoization is 

6
00:00:18.140 --> 00:00:22.100
first declaring an array to store the sub problem results 

7
00:00:22.460 --> 00:00:27.800
then initialising the array to minus one here minus one 

8
00:00:27.810 --> 00:00:32.150
indicates that the sub problem solution needs to be computed 

9
00:00:32.740 --> 00:00:37.160
now before making any recursive call check whether the sub 

10
00:00:37.160 --> 00:00:40.930
problem needs to be solved that is if it is 

11
00:00:40.940 --> 00:00:44.580
already solved we only need to take the result from 

12
00:00:44.580 --> 00:00:45.950
there only 

13
00:00:45.960 --> 00:00:48.810
Otherwise we need to compute it so 

14
00:00:48.810 --> 00:00:51.950
Checked if result of n equal to minus one 

15
00:00:52.440 --> 00:00:56.020
If yes it needs to be solved so compute it

16
00:00:56.070 --> 00:01:00.480
and store it in result else if it is already 

17
00:01:00.480 --> 00:01:05.500
solved just returned the already computed result let us see 

18
00:01:05.500 --> 00:01:06.490
how it works 

19
00:01:07.140 --> 00:01:10.270
We are going to find Fib of four so in this 

20
00:01:10.270 --> 00:01:13.750
call n will be equal to four check if result 

21
00:01:13.750 --> 00:01:15.680
of four equal to minus one 

22
00:01:15.750 --> 00:01:18.600
And it is so we need to compute the result 

23
00:01:18.780 --> 00:01:22.070
now check If n is less than or equal to one 

24
00:01:22.110 --> 00:01:24.950
and it is not as n is equal to four 

25
00:01:25.040 --> 00:01:27.990
So else part will be executed here 

26
00:01:28.040 --> 00:01:31.380
Fib of n is equal to fib of n minus one 

27
00:01:31.390 --> 00:01:33.150
plus fib of n minus two 

28
00:01:33.640 --> 00:01:35.660
So we have two recursive calls 

29
00:01:36.140 --> 00:01:39.200
And here the first Recursive call fib of n 

30
00:01:39.200 --> 00:01:42.520
minus one that is fib of Three will be executed 

31
00:01:42.520 --> 00:01:45.080
first and the next recursive call 

32
00:01:45.090 --> 00:01:48.460
Fib of n minus two will wait until the first 

33
00:01:48.460 --> 00:01:50.750
two recursive call finishes its job 

34
00:01:51.640 --> 00:01:55.230
so fib of three will be called and here first we 

35
00:01:55.230 --> 00:01:58.370
will check if result of n equal to minus one 

36
00:01:58.840 --> 00:01:59.610
and it is 

37
00:01:59.920 --> 00:02:01.940
So we need to compute the result 

38
00:02:02.180 --> 00:02:04.960
So check if n is less than or equal to 

39
00:02:04.960 --> 00:02:05.350
one 

40
00:02:05.740 --> 00:02:09.850
Since n equal to three it fails so the else part 

41
00:02:09.850 --> 00:02:10.960
will be executed 

42
00:02:11.280 --> 00:02:13.450
And here again we have two recursive 

43
00:02:13.450 --> 00:02:16.240
calls fib of n minus one that is fib of 

44
00:02:16.240 --> 00:02:18.980
two and fib of n minus two 

45
00:02:18.990 --> 00:02:22.990
That is fib of one and the first recursive call 

46
00:02:22.990 --> 00:02:26.600
fib of two will be executed first and the second 

47
00:02:26.600 --> 00:02:29.830
recursive call fib of one will wait until fib of 

48
00:02:29.840 --> 00:02:30.710
two finishes 

49
00:02:30.720 --> 00:02:34.350
Its job So fib of two is called and here 

50
00:02:34.350 --> 00:02:38.080
also first we are checking if result of n is 

51
00:02:38.080 --> 00:02:41.250
equal to minus one and it is minus one 

52
00:02:41.640 --> 00:02:44.250
So it means it is not solved yet 

53
00:02:44.260 --> 00:02:47.080
And we need to compute the result so 

54
00:02:47.080 --> 00:02:50.980
check if n is less than or equal to one and 

55
00:02:50.980 --> 00:02:54.440
since n equal to two it fails so the else 

56
00:02:54.440 --> 00:02:55.850
part will be executed 

57
00:02:56.440 --> 00:02:59.320
Here we have two recursive calls again 

58
00:02:59.670 --> 00:03:02.490
fib of n minus one and fib of n minus 

59
00:03:02.490 --> 00:03:02.850
two 

60
00:03:02.910 --> 00:03:06.840
That is fib of one and fib of zero Here 

61
00:03:06.840 --> 00:03:10.290
also as we have discussed the first recursive calls 

62
00:03:10.290 --> 00:03:13.850
fib of one will be executed first and the next recursive 

63
00:03:13.850 --> 00:03:17.000
call fib of zero will wait until fib of 

64
00:03:17.010 --> 00:03:21.250
one gets completed so fib of one will be called 

65
00:03:21.740 --> 00:03:24.650
And here also we are checking if it is solved 

66
00:03:25.040 --> 00:03:28.280
and we have result of one is equal to minus 

67
00:03:28.280 --> 00:03:28.650
one 

68
00:03:29.140 --> 00:03:31.770
So we need to compute the result so 

69
00:03:31.770 --> 00:03:34.950
check If n is less than or equal to one 

70
00:03:35.280 --> 00:03:38.860
And it is so set result of n equal to 

71
00:03:38.870 --> 00:03:39.250
n 

72
00:03:39.840 --> 00:03:43.550
So in the array result of one is set to one 

73
00:03:44.140 --> 00:03:47.590
Now whenever we have fib of one called we can 

74
00:03:47.590 --> 00:03:51.030
simply take the result from this array and we do 

75
00:03:51.030 --> 00:03:55.760
not need to compute it Now here we have returned 

76
00:03:55.760 --> 00:03:59.320
result of n so one will be returned to calling 

77
00:03:59.320 --> 00:04:00.750
function Fib of two 

78
00:04:01.540 --> 00:04:04.260
Now this recursive call is finished 

79
00:04:04.270 --> 00:04:05.890
It has done its job 

80
00:04:05.990 --> 00:04:09.280
So now the second call fib of zero will be 

81
00:04:09.280 --> 00:04:10.310
executed here 

82
00:04:11.140 --> 00:04:14.450
Here also first we are checking if it is solved 

83
00:04:14.940 --> 00:04:18.670
and we have result of zero equal to minus one 

84
00:04:18.890 --> 00:04:20.850
So we need to compute the result 

85
00:04:21.240 --> 00:04:24.350
So check If n is less than or equal to one 

86
00:04:24.740 --> 00:04:28.550
and it is so set result of n is equal 

87
00:04:28.550 --> 00:04:32.120
to n So in the array result of zero is 

88
00:04:32.120 --> 00:04:36.800
set to zero And here we have returned result of 

89
00:04:36.810 --> 00:04:40.370
n so zero will be returned to the calling function 

90
00:04:40.370 --> 00:04:41.250
fib of two 

91
00:04:42.040 --> 00:04:46.590
Now this recursive call is finished and here we have 

92
00:04:46.730 --> 00:04:49.730
result of two equal to fib of one plus fib of 

93
00:04:49.730 --> 00:04:53.850
zero that is 1+0 which is equal to one 

94
00:04:54.740 --> 00:04:57.920
So result of two is computed and we got one 

95
00:04:58.140 --> 00:05:01.700
and it is stored in the array now we have returned 

96
00:05:01.700 --> 00:05:05.120
Result of n so one is returned to the calling 

97
00:05:05.120 --> 00:05:08.490
function fib of three here the first 

98
00:05:08.490 --> 00:05:12.140
recursive call is finished now the second one will be 

99
00:05:12.140 --> 00:05:12.710
called 

100
00:05:12.850 --> 00:05:14.180
That is fib of one 

101
00:05:14.530 --> 00:05:17.680
So it is called and here first we check if 

102
00:05:17.680 --> 00:05:20.250
result of n is equal to minus one 

103
00:05:20.740 --> 00:05:21.750
But it is not 

104
00:05:21.820 --> 00:05:25.350
Which means this sub problem is already solved 

105
00:05:26.140 --> 00:05:28.570
So we can just visit the array and take the 

106
00:05:28.570 --> 00:05:32.480
result from there and return it so this if block 

107
00:05:32.490 --> 00:05:36.280
will not be executed and the next statement returned to 

108
00:05:36.280 --> 00:05:38.250
result of n will be executed 

109
00:05:38.740 --> 00:05:41.800
So one is returned to the calling function fib of 

110
00:05:41.800 --> 00:05:44.950
three and this call is completed now 

111
00:05:45.440 --> 00:05:48.540
So here in fib of three we have result of 

112
00:05:48.550 --> 00:05:51.950
three computed which is one plus one which is equal 

113
00:05:51.960 --> 00:05:54.650
two and it is stored in the array 

114
00:05:55.440 --> 00:05:59.340
And finally we have returned Result of n so result of 

115
00:05:59.340 --> 00:06:02.430
three that is two is returned to the calling function 

116
00:06:02.440 --> 00:06:06.050
fib of four and here first recursive call fib of 

117
00:06:06.050 --> 00:06:07.390
three is completed 

118
00:06:07.740 --> 00:06:10.990
Now the second call fib of n minus two that 

119
00:06:10.990 --> 00:06:13.550
is fib of two is called here 

120
00:06:13.560 --> 00:06:16.860
First we check if result of n is minus one 

121
00:06:17.000 --> 00:06:18.050
But it is not 

122
00:06:18.340 --> 00:06:22.330
Which means this sub problem is already solved so we 

123
00:06:22.330 --> 00:06:26.020
can just visit the array and the already solved result will 

124
00:06:26.020 --> 00:06:26.720
be returned 

125
00:06:26.930 --> 00:06:29.870
This will save a lot of time and space in 

126
00:06:29.870 --> 00:06:30.430
computing 

127
00:06:30.430 --> 00:06:31.150
The result 

128
00:06:31.840 --> 00:06:34.510
If we had to compute it again we have to 

129
00:06:34.510 --> 00:06:37.520
check if n is less than or equal to one 

130
00:06:37.530 --> 00:06:40.440
And if it's not there will be two recursive calls 

131
00:06:40.660 --> 00:06:43.350
and it will take a lot of time and space 

132
00:06:43.940 --> 00:06:47.450
So this is how Memoization makes the programme efficient 

133
00:06:48.140 --> 00:06:52.010
So here this if block will not be executed and 

134
00:06:52.010 --> 00:06:55.720
the next statement returned result of n will be executed 

135
00:06:56.060 --> 00:06:58.910
and one will be returned to the calling function fib 

136
00:06:58.910 --> 00:06:59.550
Of four 

137
00:07:00.040 --> 00:07:03.560
And this call is also completed now and in fib of 

138
00:07:03.560 --> 00:07:08.080
four we have result of four equal to fib of three 

139
00:07:08.090 --> 00:07:11.700
that is two plus fib of two that is one which 

140
00:07:11.700 --> 00:07:15.140
is equal to a three and finally result of four 

141
00:07:15.150 --> 00:07:16.900
is returned to the calling function 

142
00:07:16.970 --> 00:07:20.410
Thus we have got the result fib of four equal to 

143
00:07:20.410 --> 00:07:24.110
three and this is how in top down approach Memoization 

144
00:07:24.110 --> 00:07:27.860
helps us avoid the recomputation issue and saves a lot of time and space.

