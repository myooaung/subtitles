WEBVTT

1
00:00:00.140 --> 00:00:00.880
Hi friends 

2
00:00:01.040 --> 00:00:03.860
In this video let us discuss about using a pointer 

3
00:00:03.860 --> 00:00:04.750
to structure. 

4
00:00:11.140 --> 00:00:15.280
So like normal pointer to variables like integer, character we 

5
00:00:15.280 --> 00:00:19.369
can also create a pointer to structure. See this example 

6
00:00:19.450 --> 00:00:23.270
We have a structure employee with members Name,age and 

7
00:00:23.270 --> 00:00:23.700
weight

8
00:00:24.240 --> 00:00:28.280
Now we create  structure variable 'e' with values  

9
00:00:28.290 --> 00:00:30.639
abc, 20 and 55.5 

10
00:00:31.740 --> 00:00:35.050
Now we create a structure pointer ptr and assign the 

11
00:00:35.050 --> 00:00:37.890
address of e which is 1024 to it 

12
00:00:38.440 --> 00:00:41.889
Now let us see how to access structure members using 

13
00:00:41.890 --> 00:00:42.580
pointers 

14
00:00:43.140 --> 00:00:46.840
Here ptr is pointing to structure variable e. 

15
00:00:46.840 --> 00:00:47.900
So dereferencing pointer 

16
00:00:47.900 --> 00:00:52.059
variable like *ptr is functionally equivalent to structure 

17
00:00:52.060 --> 00:00:56.160
variable e. To access the member we have to use 

18
00:00:56.160 --> 00:00:59.620
the member access operator dot so we can use 

19
00:00:59.620 --> 00:01:00.140
 

20
00:01:00.150 --> 00:01:04.700
*ptr.structure_member. But since dot operator has higher precedence over

21
00:01:04.700 --> 00:01:07.000
the indirection operator *

22
00:01:07.030 --> 00:01:12.140
We have to use parenthesis around *ptr. That is  

23
00:01:12.140 --> 00:01:14.920
*ptr in parentheses dot structure member 

24
00:01:15.540 --> 00:01:20.190
So to access name use *ptr within parentheses dot name 

26
00:01:20.840 --> 00:01:24.160
So in this print statement abc will be printed. In the 

27
00:01:24.160 --> 00:01:27.880
second print statement we access age using (*ptr).age 

28
00:01:27.890 --> 00:01:29.020


29
00:01:30.140 --> 00:01:33.310
So it will get printed and to access the member 

30
00:01:33.310 --> 00:01:38.770
weight use (*ptr).weight.  So here 55.5 will 

31
00:01:38.770 --> 00:01:43.250
get printed. Now let us discuss about the arrow operator. 

32
00:01:43.250 --> 00:01:47.140
The previously discussed method is slightly confusing because of things like 

33
00:01:47.150 --> 00:01:49.360
we need to close the parentheses and all 

34
00:01:49.840 --> 00:01:51.230
Also it is not readable 

35
00:01:51.640 --> 00:01:55.250
So C provides another way to access the structure members 

36
00:01:55.250 --> 00:01:59.560
using the arrow operator. the syntax is the pointer variable 

37
00:01:59.560 --> 00:02:02.860
followed by the arrow operator followed by a structure member 

38
00:02:02.860 --> 00:02:06.310
Here ptr->name refers to the name of 

39
00:02:06.320 --> 00:02:09.530
the employee. ptr->age refers to the age of 

40
00:02:09.530 --> 00:02:11.360
the employee and ptr->weight

41
00:02:11.360 --> 00:02:13.820
refers to the weight of the employee 

42
00:02:15.240 --> 00:02:18.410
So let us replace the (*ptr).

43
00:02:18.420 --> 00:02:20.120
with the arrow operator 

44
00:02:20.390 --> 00:02:23.050
So in the first print function we will get the 

45
00:02:23.050 --> 00:02:26.400
name abc printed. In the second print function we will 

46
00:02:26.400 --> 00:02:29.760
get age that is 20 printed. And finally in the 

47
00:02:29.770 --> 00:02:34.120
third print statement we will get wait 55.5 printed in 

48
00:02:34.120 --> 00:02:34.740
the output. 

49
00:02:35.340 --> 00:02:38.239
So the arrow operator makes it very easy for us 

50
00:02:38.240 --> 00:02:42.240
to access a structure member using a pointer.

51
00:02:42.240 --> 00:02:48.809
So that's all and thank you watching this video.

