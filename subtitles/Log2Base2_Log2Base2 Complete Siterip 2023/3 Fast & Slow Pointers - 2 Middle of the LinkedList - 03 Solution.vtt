WEBVTT

1
00:00:00.000 --> 00:00:03.510
So in the implementation, we can write a function  

2
00:00:03.510 --> 00:00:06.550
getMiddleNode by passing the head of the linked list 

3
00:00:07.340 --> 00:00:10.780
We need to declare the pointers slow and fast and 

4
00:00:10.780 --> 00:00:13.650
make both point to head of the linked list 

5
00:00:14.340 --> 00:00:16.490
And we need to check if the linked list is 

6
00:00:16.500 --> 00:00:17.310
empty 

7
00:00:17.320 --> 00:00:21.540
So write if head not equal to null, now we 

8
00:00:21.540 --> 00:00:25.410
need to traverse the list till fast reach the last node.

9
00:00:25.420 --> 00:00:25.850


10
00:00:26.240 --> 00:00:30.540
So write if fast not equal to null and fast 

11
00:00:30.540 --> 00:00:31.560
next not equal to null.

12
00:00:31.560 --> 00:00:31.990


13
00:00:32.640 --> 00:00:35.000
Here we are checking two conditions 

14
00:00:35.230 --> 00:00:38.450
The first condition is fast not equal to null

15
00:00:38.840 --> 00:00:42.910
This condition makes sure that the fast pointer is not null

16
00:00:42.910 --> 00:00:47.160
 and the second condition is fast next not equal to null. 

17
00:00:47.160 --> 00:00:50.710
The reason why we are adding this condition is 

18
00:00:50.940 --> 00:00:52.030
inside the loop 

19
00:00:52.040 --> 00:00:55.200
We are going to increment the fast pointer by two 

20
00:00:55.200 --> 00:00:56.120
positions.

21
00:00:56.290 --> 00:00:59.770
So before executing the loop we need to check whether 

22
00:00:59.770 --> 00:01:02.350
the next node is present or not. 

23
00:01:03.140 --> 00:01:06.810
If we don't put this condition the programme execution will 

24
00:01:06.810 --> 00:01:08.990
crash due to segmentation fault. 

25
00:01:09.940 --> 00:01:13.960
To understand this better, let us assume the fast pointer

26
00:01:13.970 --> 00:01:16.760
is pointing to the last node of the linked list 

27
00:01:16.990 --> 00:01:20.540
So what will be fast next next? next of last node 

28
00:01:20.540 --> 00:01:23.900
 will be null and one more next leads to 

29
00:01:23.910 --> 00:01:25.990
null next. Here 

30
00:01:26.000 --> 00:01:26.450


31
00:01:26.450 --> 00:01:30.820
Null-Next is trying to access the unallocated memory

32
00:01:30.830 --> 00:01:34.230
So our programme execution will crash due to segmentation fault 

33
00:01:35.040 --> 00:01:38.280
And since we are advancing the fast pointer by two 

34
00:01:38.280 --> 00:01:42.290
positions we are not only checking that node, but also 

35
00:01:42.290 --> 00:01:45.250
it's next node is available or not 

36
00:01:45.740 --> 00:01:49.090
So that's why we are giving this condition fast next 

37
00:01:49.090 --> 00:01:50.160
not equal to null

38
00:01:50.160 --> 00:01:54.930
Now in each iteration, slow should move one 

39
00:01:54.930 --> 00:01:59.630
time and fast should move two times. So write slow 

40
00:01:59.630 --> 00:02:03.720
equal to slow next and fast equal to fast next next

41
00:02:03.730 --> 00:02:08.630
and after this while loop exhuast, fast will 

42
00:02:08.630 --> 00:02:11.920
be pointing to end and slow will be pointing to 

43
00:02:11.920 --> 00:02:15.410
the middle node. And as we need the middle node 

44
00:02:15.470 --> 00:02:20.040
we can print slow data. And if the head is null, 

45
00:02:20.040 --> 00:02:23.030
 that is if the linked list is empty we should return -1.

