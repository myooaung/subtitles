WEBVTT

1
00:00:00.740 --> 00:00:01.590
Hello friends 

2
00:00:01.600 --> 00:00:05.010
In this video let us discuss about type conversion

3
00:00:11.340 --> 00:00:15.590
So A type conversion is nothing but converting one data type 

4
00:00:15.600 --> 00:00:16.350
to another 

5
00:00:17.040 --> 00:00:21.180
It is sometimes automatically done by the compiler and sometimes 

6
00:00:21.190 --> 00:00:23.330
it is manually done by the programmer 

7
00:00:23.840 --> 00:00:27.750
That is implicit type conversion and explicit type conversion 

8
00:00:28.140 --> 00:00:32.110
Let us first discuss about implicit type conversion so it 

9
00:00:32.110 --> 00:00:34.449
is automatically done by the compiler 

10
00:00:34.940 --> 00:00:39.060
Actually we have an order for these data types starting 

11
00:00:39.060 --> 00:00:41.350
from the lower level to higher level 

12
00:00:41.840 --> 00:00:45.570
Also when do we need to convert data types? It 

13
00:00:45.570 --> 00:00:48.390
is when we have different data types coming in 

14
00:00:48.390 --> 00:00:49.600
a single expression 

15
00:00:50.240 --> 00:00:53.480
So if an expression has more than two types all 

16
00:00:53.480 --> 00:00:56.470
the data types of the variables are upgraded to the 

17
00:00:56.470 --> 00:00:59.530
data type of the variable with the largest data type 

18
00:00:59.940 --> 00:01:03.120
So if we have float and smaller level data types 

19
00:01:03.120 --> 00:01:07.149
like int, char, long etcetera in a single expression all 

20
00:01:07.150 --> 00:01:11.560
those will be converted to float first. see an example 

21
00:01:11.560 --> 00:01:16.899
we have float f= 1.5 int i= 200 

22
00:01:17.440 --> 00:01:21.600
Char c = a. and there is an expression 

23
00:01:21.610 --> 00:01:26.500
f+i+c. So a float+int + char  will result 

24
00:01:26.500 --> 00:01:29.750
in which datatype? since we are discussing about automatic 

25
00:01:29.750 --> 00:01:31.259
or implicit conversion 

26
00:01:31.410 --> 00:01:34.179
It will take the largest datatype which is float 

27
00:01:34.180 --> 00:01:38.590
here and convert every other data type to float and 

28
00:01:38.590 --> 00:01:40.250
the result will be in float 

29
00:01:40.840 --> 00:01:46.119
So f is already float and is equal to 1.50000 

30
00:01:46.130 --> 00:01:53.250
and int 100 will now be in float 100.0000 and 

31
00:01:53.250 --> 00:01:56.660
character c which is a  will now be the float 

32
00:01:56.660 --> 00:02:02.200
value 97.0000. Please note that 97 is they ASCII

33
00:02:02.200 --> 00:02:03.450
value of 'a'

34
00:02:04.040 --> 00:02:11.230
Now the sum will be 1.5000 + 100.0000 plus 

35
00:02:11.230 --> 00:02:19.799
97.0000 which will be 198.50000. Now see another example 

36
00:02:19.800 --> 00:02:25.369
We have int i=100 char c= a and 

37
00:02:25.370 --> 00:02:28.450
we have int ins = i-c

38
00:02:28.840 --> 00:02:31.830
So here the largest datatype is int 

39
00:02:32.050 --> 00:02:35.430
So the character type c will be upgraded to integer

40
00:02:35.430 --> 00:02:36.150
type first 

41
00:02:36.640 --> 00:02:40.100
So i is already the integer 100 and now the 

42
00:02:40.100 --> 00:02:41.890
character c which is a

43
00:02:41.900 --> 00:02:45.360
 will now be the integer 97 which is it's 

44
00:02:45.370 --> 00:02:49.200
ascii value and the result will be 100 - 97

45
00:02:49.200 --> 00:02:50.040


46
00:02:50.040 --> 00:02:53.970
Which is 3. Now let us discuss about explicit type conversion 

47
00:02:53.980 --> 00:02:55.929
or we can call it typecasting 

48
00:02:56.000 --> 00:02:56.590
Here 

49
00:02:56.660 --> 00:02:59.780
A datatype is converted to another type manually 

50
00:02:59.790 --> 00:03:02.860
and the syntax for that is writing the data type 

51
00:03:02.860 --> 00:03:04.390
name with in parenthesis 

52
00:03:04.390 --> 00:03:05.670
Before the expression 

53
00:03:06.340 --> 00:03:10.119
For example we have float ans = 10/3 

54
00:03:10.120 --> 00:03:10.850


55
00:03:11.340 --> 00:03:13.850
So here 10  and 3 are integers 

56
00:03:14.240 --> 00:03:17.020
So 10/3 will also be an integer

57
00:03:17.120 --> 00:03:19.310
and we will get three and it will be stored 

58
00:03:19.310 --> 00:03:20.600
in float ans.

59
00:03:21.140 --> 00:03:26.280
So when we print we will get 3.0. But it 

60
00:03:26.280 --> 00:03:29.130
is not the right answer. is it ? We want the 

61
00:03:29.140 --> 00:03:31.399
actual result as a floating point 

62
00:03:31.400 --> 00:03:31.890
number 

63
00:03:32.310 --> 00:03:34.770
So let us typecast it so that we will get it 

64
00:03:34.770 --> 00:03:35.160
right 

65
00:03:35.610 --> 00:03:36.820
The typecast integer 3

66
00:03:36.820 --> 00:03:38.110
to float 

67
00:03:38.370 --> 00:03:42.679
So we have 10/ (float) followed by 3

68
00:03:42.690 --> 00:03:43.050


69
00:03:43.420 --> 00:03:47.770
So we will get the result 3.3333 printed now which 

70
00:03:47.770 --> 00:03:49.130
is the actual result 

71
00:03:49.140 --> 00:03:52.630
So that is how we can perform explicit type conversion 

72
00:03:52.640 --> 00:03:53.530
or typecasting 

73
00:03:54.540 --> 00:03:58.609
So today we have discussed about type conversion which is 

74
00:03:58.610 --> 00:04:01.150
converting a data type to another type 

75
00:04:01.540 --> 00:04:05.019
It can automatically be done by the compiler or manually 

76
00:04:05.020 --> 00:04:06.549
performed by the programmer. 

