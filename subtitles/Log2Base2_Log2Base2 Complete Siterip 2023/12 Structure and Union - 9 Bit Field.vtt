WEBVTT

1
00:00:00.740 --> 00:00:01.580
Hi friends 

2
00:00:01.590 --> 00:00:05.100
In this video we are going to discuss about bit fields

4
00:00:10.040 --> 00:00:14.750
Using bit fields, we can efficiently utilise memory space of 

5
00:00:14.750 --> 00:00:16.580
structure or union members 

6
00:00:17.040 --> 00:00:20.380
This programme uses eight bytes to store the status 

7
00:00:20.540 --> 00:00:24.279
Here ON takes four bytes and OFF takes four bytes 

8
00:00:24.820 --> 00:00:28.080
But actually we are going to use values one and zero 

9
00:00:28.080 --> 00:00:30.090
for on and off respectively 

10
00:00:30.340 --> 00:00:33.740
It doesn't require eight bytes of memory when we know 

11
00:00:33.740 --> 00:00:36.629
the value of a member which never exceeds a certain 

12
00:00:36.630 --> 00:00:37.040
limit 

13
00:00:37.120 --> 00:00:41.050
We can efficiently handle it using bit fields in structure 

14
00:00:41.050 --> 00:00:42.210
or union members 

15
00:00:42.260 --> 00:00:45.670
We can specify the required size in bits like this 

16
00:00:45.950 --> 00:00:50.070
This is the syntax for that. member colon size 

17
00:00:50.070 --> 00:00:52.620
in bits. Now take the same structure 

18
00:00:52.620 --> 00:00:56.750
Status here on and off will only use one bit 

19
00:00:56.930 --> 00:00:59.550
so we can specify it's width as 1

20
00:01:00.140 --> 00:01:03.550
Now this structure takes only four bytes of memory which 

21
00:01:03.550 --> 00:01:06.869
is 32 bits. on will take one bit and off will

22
00:01:06.880 --> 00:01:08.250
Also take one bit 

23
00:01:08.740 --> 00:01:11.550
If a print the size of the above structure it 

24
00:01:11.550 --> 00:01:13.550
will be four and not eight 

25
00:01:13.940 --> 00:01:17.170
Here we have reduced four bytes of memory using bit 

26
00:01:17.170 --> 00:01:21.610
field here fields assigned from left to right some machines 

27
00:01:21.610 --> 00:01:23.400
can assign it right to left 

28
00:01:23.570 --> 00:01:26.750
The order of assignment will vary from machine to machine 

29
00:01:27.240 --> 00:01:31.270
Now let us see a sample programme here unsigned indicates 

30
00:01:31.270 --> 00:01:33.870
that the members will not have signed values 

31
00:01:34.050 --> 00:01:37.550
So what is the difference between signed and unsigned values ?

32
00:01:38.640 --> 00:01:41.830
Sign type uses some more significant bit to store the 

33
00:01:41.830 --> 00:01:42.960
sign status.

34
00:01:43.190 --> 00:01:46.530
That is whether the number is positive or negative 

35
00:01:46.710 --> 00:01:49.960
So if we have 32 bits, one bit will be 

36
00:01:49.960 --> 00:01:52.970
used to store the sign and values will be stored 

37
00:01:52.970 --> 00:01:54.750
in the next 31 bits 

38
00:01:55.440 --> 00:01:58.830
In the case of unsigned the whole 32 bits will 

39
00:01:58.830 --> 00:02:01.570
be used to store the value as they don't have 

40
00:02:01.580 --> 00:02:02.930
any particular sign 

41
00:02:03.410 --> 00:02:06.410
The idea here is to utilise the whole 32 bit 

42
00:02:06.410 --> 00:02:07.770
for storing values 

43
00:02:08.340 --> 00:02:13.320
So we have members unsigned integers on and off and 

44
00:02:13.320 --> 00:02:16.649
we have specified the width of one bit

45
00:02:17.440 --> 00:02:20.460
Now we set on =1 and off =0

46
00:02:20.460 --> 00:02:22.900
 using structure variable s 

47
00:02:23.250 --> 00:02:26.000
Now we print on and off and we will get 

48
00:02:26.010 --> 00:02:27.440
one and zero printed

49
00:02:28.000 --> 00:02:29.820
Let's take another example 

50
00:02:29.970 --> 00:02:32.950
This structure declaration is to store a date 

51
00:02:33.120 --> 00:02:37.490
So we have the members day month and year if 

52
00:02:37.490 --> 00:02:39.010
we don't use bit fields 

53
00:02:39.020 --> 00:02:43.429
This structure uses 12 bytes to store the date four 

54
00:02:43.430 --> 00:02:46.350
bytes each for day month and year 

55
00:02:46.820 --> 00:02:49.080
So in total it takes 12 bytes 

56
00:02:49.270 --> 00:02:52.649
We can solve the problem effectively using bit fields 

57
00:02:54.040 --> 00:02:58.049
We know that the maximum value of day is 31. five 

58
00:02:58.050 --> 00:03:00.270
bits are enough to store the day value 

59
00:03:00.340 --> 00:03:03.680
That is 2 power 5 equal to 32 so we 

60
00:03:03.680 --> 00:03:06.839
can specify unsigned int day 5 

61
00:03:08.340 --> 00:03:12.650
Similarly the maximum value for the member month is 12 

62
00:03:13.140 --> 00:03:13.540
 

63
00:03:13.540 --> 00:03:16.460
4 Bits are enough to store the month value 2 power 4 

64
00:03:16.460 --> 00:03:21.120
 equal to 16 so we can specify unsigned int

65
00:03:21.130 --> 00:03:25.660
month 4.  we can use all the remaining 23 

66
00:03:25.660 --> 00:03:28.700
bits to store the year for the year 

67
00:03:28.710 --> 00:03:32.299
We can specify unsigned int year 23 

68
00:03:32.680 --> 00:03:36.070
So see the programme here we said day =2

69
00:03:36.080 --> 00:03:39.870
which takes five bits and set month =7 

70
00:03:39.870 --> 00:03:44.180
which takes four bits and year= 2019 which takes 

71
00:03:44.180 --> 00:03:45.870
the remaining 23 bits 

72
00:03:46.340 --> 00:03:49.180
Now we print the date and we get the output 

73
00:03:49.190 --> 00:03:51.230
2 7 2019 

74
00:03:51.570 --> 00:03:55.960
So here the structure only takes four bytes or 32 

75
00:03:55.960 --> 00:03:57.890
bits instead of 12 bytes 

76
00:03:58.120 --> 00:04:01.470
This is how we can improve memory efficiency using bit 

77
00:04:01.470 --> 00:04:02.100
fields 

78
00:04:02.360 --> 00:04:06.390
Now when will bid field take additional memory? It will 

79
00:04:06.390 --> 00:04:10.130
take additional memory only when we exceed the whole 32 

80
00:04:10.130 --> 00:04:10.579
bits 

81
00:04:10.740 --> 00:04:13.830
For an example Consider this structure status 

82
00:04:13.940 --> 00:04:17.900
We have the members on and off. on Takes 31 

83
00:04:17.900 --> 00:04:18.710
bits and off 

84
00:04:18.710 --> 00:04:21.480
Take one bit total of 32 bits 

85
00:04:21.650 --> 00:04:22.910
This case is okay 

86
00:04:22.910 --> 00:04:24.030
There is no issue 

87
00:04:24.120 --> 00:04:28.420
Now consider another case here on takes 31 bits and 

88
00:04:28.420 --> 00:04:31.750
off takes two bits so on can be placed here 

89
00:04:31.790 --> 00:04:34.530
But what about off? There is only one bit 

90
00:04:34.530 --> 00:04:34.929
left 

91
00:04:35.040 --> 00:04:37.910
So it's not possible to place off here and we 

92
00:04:37.910 --> 00:04:40.090
have to place it in another block 

93
00:04:40.100 --> 00:04:43.230
So now the size of structure becomes 4+4 = 8

94
00:04:43.230 --> 00:04:44.539
bytes

95
00:04:44.550 --> 00:04:48.000
So if we exceed the whole 32 bits it will 

96
00:04:48.000 --> 00:04:49.659
take another four bytes 

97
00:04:49.940 --> 00:04:52.310
So if we print the size of the structure it 

98
00:04:52.310 --> 00:04:53.419
will be eight now 

99
00:04:54.640 --> 00:04:56.930
So that's all and thank you for watching this video 

