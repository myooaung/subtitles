WEBVTT

1
00:00:00.840 --> 00:00:01.660
Hello friends 

2
00:00:01.940 --> 00:00:04.400
In this video let us discuss about

3
00:00:04.400 --> 00:00:04.940
BFS 

4
00:00:06.040 --> 00:00:07.960
So we have learned about graphs 

5
00:00:08.270 --> 00:00:12.160
So how can be traverse graphs that is visit every 

6
00:00:12.160 --> 00:00:13.550
node of the graph 

7
00:00:13.690 --> 00:00:17.170
We have two major methods for that One is 

8
00:00:17.170 --> 00:00:21.210
Breadth-First Search BFS and next is Depth First Search 

9
00:00:21.210 --> 00:00:21.400
DFS

10
00:00:21.400 --> 00:00:21.850
S 

11
00:00:22.340 --> 00:00:25.310
In this video let us discuss about BFS 

12
00:00:25.840 --> 00:00:26.210
in 

13
00:00:26.210 --> 00:00:26.710
BFS

14
00:00:26.920 --> 00:00:29.640
We used a queue data structure to traverse the 

15
00:00:29.640 --> 00:00:32.760
graph that is to visit all the vertices 

16
00:00:33.540 --> 00:00:36.460
Simply let us understand how it is done 

17
00:00:37.200 --> 00:00:42.130
Let's start from vertex A. So visit A inserted into 

18
00:00:42.130 --> 00:00:45.110
the queue and add it to a visited array 

19
00:00:45.110 --> 00:00:49.950
also in this area visited the vertices that our visited 

20
00:00:49.960 --> 00:00:50.980
will be added 

21
00:00:51.540 --> 00:00:55.620
Now it has A only it means only the Vertex 

22
00:00:55.630 --> 00:01:01.580
A is visited now taking vertex A from queue and 

23
00:01:01.580 --> 00:01:06.150
visit all its neighbors which are B, C, and D 

24
00:01:06.640 --> 00:01:09.420
So these are inserted into the queue and added to 

25
00:01:09.420 --> 00:01:14.430
the visited area also now A and its neighbors are 

26
00:01:14.430 --> 00:01:15.030
visited 

27
00:01:15.310 --> 00:01:18.490
Now take the next element from the queue which is 

28
00:01:18.490 --> 00:01:21.550
B visited and visit its neighbors 

29
00:01:21.880 --> 00:01:25.870
The neighbors of B are A, D, and E but 

30
00:01:25.880 --> 00:01:28.250
A and D are already visited 

31
00:01:28.640 --> 00:01:30.640
Only E is not visited 

32
00:01:30.930 --> 00:01:34.690
So added to the queue and the visited array now 

33
00:01:34.740 --> 00:01:38.860
B and its neighbors our visited. So take the next element 

34
00:01:38.860 --> 00:01:43.110
C its neighbors are A and D both our visited

35
00:01:43.320 --> 00:01:46.350
So just move to the next one D and its neighbors 

36
00:01:46.350 --> 00:01:50.950
are A B C and E which are also visited 

37
00:01:50.960 --> 00:01:51.550
already 

38
00:01:51.840 --> 00:01:56.070
So take E its neighbors are B and E again 

39
00:01:56.080 --> 00:01:59.870
both are visited Now there are no more elements in 

40
00:01:59.870 --> 00:02:02.910
the queue so we can say all nodes of the 

41
00:02:02.910 --> 00:02:04.550
graphs are visited now 

42
00:02:04.940 --> 00:02:05.930
So this is what 

43
00:02:05.930 --> 00:02:07.130
BFS traversal is

44
00:02:07.370 --> 00:02:11.090
We start from a vertex or node visited visit all 

45
00:02:11.090 --> 00:02:16.150
its neighbors then visit all its neighbors and so on

46
00:02:16.150 --> 00:02:17.660
So let us see how to implement it 

47
00:02:17.830 --> 00:02:20.430
To implement BFS we need to use the 

48
00:02:20.440 --> 00:02:21.690
queue data structures 

49
00:02:22.040 --> 00:02:26.010
For that, we can use the inbuilt queue functions 

50
00:02:26.020 --> 00:02:29.860
by importing java.util.queue it has 

51
00:02:29.870 --> 00:02:34.010
inbuilt functions queue operations so let us defined the 

52
00:02:34.010 --> 00:02:37.530
size of graph V as five now in main()

53
00:02:37.690 --> 00:02:41.070
Let us define the graph as an adjacency matrix 

54
00:02:41.340 --> 00:02:45.410
So we have int arr equal to these values 

55
00:02:45.620 --> 00:02:47.350
so the graph is defined 

56
00:02:47.440 --> 00:02:50.790
Now let us create an object graph obj 

57
00:02:50.790 --> 00:02:52.270
equal to new graph()

58
00:02:52.390 --> 00:02:54.300
Now let us call the function

59
00:02:54.300 --> 00:02:58.270
BFS bypassing this adjacency matrix arr and starting 

60
00:02:58.270 --> 00:02:58.930
Vertex 

61
00:02:59.250 --> 00:03:01.240
We can start from any Vertex 

62
00:03:01.250 --> 00:03:05.040
Here we will start from Vertex 0 So control gets 

63
00:03:05.040 --> 00:03:08.900
here and arr is stored in arr and zero is 

64
00:03:08.900 --> 00:03:10.250
stored int source

65
00:03:10.570 --> 00:03:13.750
And as we know for BFS we need two data 

66
00:03:13.750 --> 00:03:16.380
structures a Queue and isVisited[] array 

67
00:03:16.660 --> 00:03:20.680
We will create a queue object queue of individual type 

68
00:03:20.680 --> 00:03:25.450
q equal to new LinkedList now declared a Boolean 

69
00:03:25.460 --> 00:03:29.240
array isVisited[] of size V that is 5 and 

70
00:03:29.250 --> 00:03:33.450
initialize to 0 now the first step is to insert the 

71
00:03:33.450 --> 00:03:36.180
starting vertex to queue and make it visited 

72
00:03:36.390 --> 00:03:40.760
So write q.add(source); so 0 is inserted 

73
00:03:40.770 --> 00:03:41.670
into queue 

74
00:03:41.780 --> 00:03:44.550
Now make it visited in isVisited[] array 

75
00:03:44.750 --> 00:03:47.530
So isVisited[source] is made true 

76
00:03:47.750 --> 00:03:51.200
Now we have to visit all its neighbors so use 

77
00:03:51.210 --> 00:03:51.700
a while() loop

78
00:03:51.700 --> 00:03:55.240
for that till the queue is empty so write 

79
00:03:55.250 --> 00:04:00.380
while(q.size() != 0) so write 

80
00:04:00.390 --> 00:04:03.000
int node = q.poll();

81
00:04:03.290 --> 00:04:06.720
This method poll returns and removes the element at the 

82
00:04:06.720 --> 00:04:07.900
front of the queue 

83
00:04:07.910 --> 00:04:11.250
so 0 is removed from the queue and stored in node 

84
00:04:11.640 --> 00:04:12.370
and print 

85
00:04:12.380 --> 00:04:13.750
0 is visited 

86
00:04:14.140 --> 00:04:17.440
Now how can you find its neighbors say this is vertex 

87
00:04:17.450 --> 00:04:18.080
0 

88
00:04:18.090 --> 00:04:21.390
If there is an edge from 0 to 1 

89
00:04:21.390 --> 00:04:22.200
1 is a neighbour 

90
00:04:22.360 --> 00:04:25.250
and if there is an edge 

91
00:04:25.250 --> 00:04:27.900
from 0 to 2 2 is a neighbour 

92
00:04:27.950 --> 00:04:30.760
And if there is an edge from 0 to 3 

93
00:04:30.760 --> 00:04:33.890
3 is a neighbor and so on. So how can we check

94
00:04:33.890 --> 00:04:37.950
that we can simply check the adjacency matrix which 

95
00:04:37.950 --> 00:04:39.800
all columns are having value one 

96
00:04:39.800 --> 00:04:44.420
in zeroth row we have 01 equal to 1, 02 equal 

97
00:04:44.420 --> 00:04:48.250
to 1 and 03 equal to 1 so 1 2 and 

98
00:04:48.250 --> 00:04:50.200
3 are neighbours of 0 

99
00:04:50.410 --> 00:04:53.270
So this the logic so use a for() loop for 

100
00:04:53.560 --> 00:04:57.260
int index = 0; index < V; 

101
00:04:57.260 --> 00:05:01.050
 index++ and in first iteration index equal to zero 

102
00:05:01.440 --> 00:05:05.440
Next, we have if arr[node][index] == 1 

103
00:05:05.440 --> 00:05:08.820
that is weather index is an neighbour or 

104
00:05:08.820 --> 00:05:12.790
not and isVisited[index] == false that 

105
00:05:12.790 --> 00:05:15.850
is we are checking if it is already visited 

106
00:05:16.340 --> 00:05:19.730
So if the index is a neighbor of node and 

107
00:05:19.990 --> 00:05:23.370
if it is not already visited we have to add 

108
00:05:23.370 --> 00:05:25.440
it to the queue and make it visited 

109
00:05:25.640 --> 00:05:28.820
But here we have array of 00 equal to zero 

110
00:05:29.050 --> 00:05:32.580
So if() will fail and in next iteration  

111
00:05:32.580 --> 00:05:35.350
index = 1 an array of 01 equal to 

112
00:05:35.350 --> 00:05:39.240
one and isVisited[] of one is false that is 

113
00:05:39.250 --> 00:05:42.540
one is not visited yet and it is a neighbor 

114
00:05:42.540 --> 00:05:45.230
of zero so we need to insert it to the 

115
00:05:45.230 --> 00:05:45.680
queue 

116
00:05:45.810 --> 00:05:47.600
Now we need to make it visited 

117
00:05:47.740 --> 00:05:50.690
So isVisited[] of one equal to true now

118
00:05:50.690 --> 00:05:54.450
now in the next iteration index equal to 

119
00:05:54.460 --> 00:05:57.250
2 an arr[0][2] equal to one and  

120
00:05:57.250 --> 00:05:59.050
isVisited[] of two is false 

121
00:05:59.540 --> 00:06:00.560
that is two 

122
00:06:00.560 --> 00:06:03.180
is not visited yet and it is a neighbor of 

123
00:06:03.190 --> 00:06:06.790
zero so inserted to the queue and make it visited 

124
00:06:07.020 --> 00:06:10.380
So isVisited[] of two equal to true now 

125
00:06:10.380 --> 00:06:13.710
Now in the next iteration index equal to three an

126
00:06:13.710 --> 00:06:17.350
arr[0][3] equal to one and isVisited[] of 3 zero 

127
00:06:17.740 --> 00:06:18.360
that is 

128
00:06:18.610 --> 00:06:22.130
3 is not visited yet and it is a neighbor of 

129
00:06:22.140 --> 00:06:25.910
zero so inserted to the queue and make it visited 

130
00:06:25.980 --> 00:06:27.670
So isVisited[] of 3 

131
00:06:27.770 --> 00:06:28.650
equal to one 

132
00:06:29.140 --> 00:06:32.650
Now in the next iteration index is equal to four and 

133
00:06:32.660 --> 00:06:35.690
arr[0][4] equal to false and not true 

134
00:06:35.700 --> 00:06:39.160
So if() will fail and in next iteration index 

135
00:06:39.160 --> 00:06:42.290
equal to five which is not less than V so 

136
00:06:42.290 --> 00:06:45.520
the condition will fail and control comes out of the loop 

137
00:06:45.660 --> 00:06:48.510
So what have been done here We started from vertex 

138
00:06:48.510 --> 00:06:49.050
zero 

139
00:06:49.140 --> 00:06:52.630
We visited it and visited all its neighbors to now 

140
00:06:52.630 --> 00:06:55.870
in the next iteration of while() loop removed the element 

141
00:06:55.870 --> 00:06:57.720
from queue and store it in node 

142
00:06:58.110 --> 00:07:00.810
So one is dqueue and storing note 

143
00:07:00.940 --> 00:07:03.350
Now print Vortex one is visited 

144
00:07:03.500 --> 00:07:05.900
Now we have to visit all its neighbours 

145
00:07:05.950 --> 00:07:09.500
So again used the four loop in first iteration index 

146
00:07:09.500 --> 00:07:10.370
equal to zero 

147
00:07:10.380 --> 00:07:13.350
An array of 10 equal to one that is okay 

148
00:07:13.440 --> 00:07:16.830
But ace visitor of zero is true and not falls 

149
00:07:16.960 --> 00:07:19.610
That is zero eastern neighbour of one but it is 

150
00:07:19.620 --> 00:07:20.740
already visited 

151
00:07:20.800 --> 00:07:24.150
So if will fail and the next iteration index equal 

152
00:07:24.150 --> 00:07:26.920
to one an area of 11 equal to zero 

153
00:07:27.200 --> 00:07:30.260
So if will fail and in next iteration index a 

154
00:07:30.260 --> 00:07:32.640
call to to and array of one to equal to 

155
00:07:32.640 --> 00:07:33.050
zero 

156
00:07:33.140 --> 00:07:36.490
So if will fail and in next iteration index equal 

157
00:07:36.490 --> 00:07:37.000
to three 

158
00:07:37.270 --> 00:07:40.380
An array of 13 cool to one but ease visitor 

159
00:07:40.380 --> 00:07:42.030
of tree is already true 

160
00:07:42.070 --> 00:07:43.980
So if will fail here also 

161
00:07:43.990 --> 00:07:46.860
So in next iteration index a call to for an 

162
00:07:46.870 --> 00:07:49.770
array of one for equal to one and Ace visited 

163
00:07:49.770 --> 00:07:53.300
of four equal to falls that is for decent neighbour 

164
00:07:53.300 --> 00:07:56.950
of one and it is not visited yet so inserted 

165
00:07:56.960 --> 00:07:58.870
to the queue and make it visited 

166
00:07:58.980 --> 00:08:01.540
So it's visited a four equal to true 

167
00:08:01.540 --> 00:08:05.990
Now in next iteration condition index less than we fails 

168
00:08:06.160 --> 00:08:08.890
and candle comes out of the four loop in next 

169
00:08:08.890 --> 00:08:10.230
iteration of Wild Loop 

170
00:08:10.240 --> 00:08:14.080
Q is not empty so continue dick you next element 

171
00:08:14.080 --> 00:08:17.320
to and store it in note print to his visited 

172
00:08:17.380 --> 00:08:19.170
and visit all its neighbours 

173
00:08:19.180 --> 00:08:22.800
But if will fail in every iteration since Ace visited 

174
00:08:22.810 --> 00:08:24.700
is true for every index 

175
00:08:24.710 --> 00:08:28.630
So in next iteration Dae Kyun next elementary and print 

176
00:08:28.640 --> 00:08:31.590
it is visited and again if will fail 

177
00:08:31.600 --> 00:08:34.790
For every iteration of the four Lope here since all 

178
00:08:34.790 --> 00:08:36.750
the notes are already visited 

179
00:08:36.840 --> 00:08:40.100
So in next iteration of Wild Loop delete the element 

180
00:08:40.100 --> 00:08:43.810
from Q which is four and Plant visited Norris for 

181
00:08:44.020 --> 00:08:44.730
and again 

182
00:08:44.730 --> 00:08:48.170
Same happens now in the next iteration of While Loop 

183
00:08:48.170 --> 00:08:51.630
the condition cured outside's not equal to zero will fail 

184
00:08:51.720 --> 00:08:54.320
So condole comes out of the wild loop and they 

185
00:08:54.320 --> 00:08:54.840
traverse 

186
00:08:54.840 --> 00:08:57.230
ALS is completed now 

187
00:08:57.230 --> 00:08:58.390
One question to you 

188
00:08:58.400 --> 00:09:01.870
Why did we use the east visited array here And 

189
00:09:01.870 --> 00:09:05.290
what will happen if we didn't use it C a 

190
00:09:05.290 --> 00:09:05.910
traverse a 

191
00:09:05.910 --> 00:09:07.870
Means we have to visit each note 

192
00:09:08.250 --> 00:09:11.590
If we had kept track of visited notes we would 

193
00:09:11.600 --> 00:09:13.250
be said it again and again 

194
00:09:13.740 --> 00:09:17.990
And unlike trees graphs may condemn cycles and we will 

195
00:09:17.990 --> 00:09:19.950
get into an in finite look 

196
00:09:20.340 --> 00:09:24.390
So using this bullion area east visitors can avoid such 

197
00:09:24.400 --> 00:09:28.450
issues and each note is visited only one time 

198
00:09:29.040 --> 00:09:31.670
So this is what be a faces and in the 

199
00:09:31.670 --> 00:09:35.300
next video we will discuss on DFS or depth for 

200
00:09:35.300 --> 00:09:35.870
searched 

