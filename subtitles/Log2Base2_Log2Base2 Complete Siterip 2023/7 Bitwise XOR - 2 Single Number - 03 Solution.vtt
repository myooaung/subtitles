WEBVTT

1
00:00:00.040 --> 00:00:04.860
So let's write function single number which takes the  

2
00:00:04.870 --> 00:00:10.260
integer array arr and its size size as input and returns the 

3
00:00:10.270 --> 00:00:13.720
odd occurring number of the array which will also be an 

4
00:00:13.720 --> 00:00:14.200
integer. 

5
00:00:14.840 --> 00:00:19.240
So first declare the iterating variable i. Now we need 

6
00:00:19.240 --> 00:00:22.390
to XOR all the elements in a common variable. 

7
00:00:22.640 --> 00:00:27.270
So write int xorResult equal to zero. Here the 

8
00:00:27.270 --> 00:00:31.250
reason why we initialise the variable to 0 is if we 

9
00:00:31.260 --> 00:00:34.020
XOR in number with zero it will give the 

10
00:00:34.020 --> 00:00:37.730
same number so it won't affect the overall result. 

11
00:00:38.100 --> 00:00:41.430
If we initialise it to a non zero number or leave 

12
00:00:41.440 --> 00:00:45.490
it uninitialised we will get the unexpected result in the end.

13
00:00:45.500 --> 00:00:49.050
So write int xorResult equal to zero 

14
00:00:49.740 --> 00:00:52.570
After that we need to XOR all the elements 

15
00:00:52.570 --> 00:00:56.270
of the array with the common variable xorResult

16
00:00:56.270 --> 00:00:59.490
So write for i equal to zero, i less than size, i++

17
00:00:59.500 --> 00:01:03.470
 xorResult XOR equal to array[i] 

18
00:01:03.470 --> 00:01:03.930


19
00:01:04.740 --> 00:01:08.330
After the execution of the loop all same numbers will 

20
00:01:08.330 --> 00:01:11.890
be eliminated and the single odd occurring number will be 

21
00:01:11.890 --> 00:01:15.290
present in the variable XOR assault and we need to return it. So write return xorResult.

