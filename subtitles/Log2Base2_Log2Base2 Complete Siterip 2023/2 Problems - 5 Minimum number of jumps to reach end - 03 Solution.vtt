WEBVTT

1
00:00:00.040 --> 00:00:04.400
so let us write a function minJump by passing the array arr and 

2
00:00:04.400 --> 00:00:07.700
its size n and it returns the minimum number of 

3
00:00:07.710 --> 00:00:10.620
jumps to reach the end which will be an integer 

4
00:00:11.540 --> 00:00:13.900
We need to create a new array to store the 

5
00:00:13.900 --> 00:00:17.370
minimum number of jumps required to reach each index 

6
00:00:17.940 --> 00:00:22.920
So write int jump of n also declare iterating variables I and J 

7
00:00:24.340 --> 00:00:27.250
Next we need to solve all these sub problems 

8
00:00:27.940 --> 00:00:30.750
We know that we can directly reach index zero 

9
00:00:30.760 --> 00:00:33.750
So we need to mark jump of zero as zero 

10
00:00:34.140 --> 00:00:36.750
So write jump of zero equal to zero 

11
00:00:37.540 --> 00:00:40.420
Next let us fill all the remaining indices with 

12
00:00:40.420 --> 00:00:44.160
maximum value so that whenever we find a minimum value 

13
00:00:44.170 --> 00:00:45.350
we can replace it 

14
00:00:45.940 --> 00:00:49.020
So write a for loop for i equal to one I 

15
00:00:49.020 --> 00:00:50.850
less than n I plus plus 

16
00:00:51.160 --> 00:00:54.670
And in each iteration set jump of I equal to 

17
00:00:54.680 --> 00:00:55.540
int Max 

18
00:00:56.240 --> 00:00:59.250
Now we have stored the result of jump of Zero 

19
00:00:59.740 --> 00:01:02.770
We need to calculate the result for all remaining indices 

20
00:01:02.770 --> 00:01:05.790
so write an outer for loop from i equal 

21
00:01:05.790 --> 00:01:07.550
to 1 to i less than n 

22
00:01:07.940 --> 00:01:10.930
And to find the minimum jump of each index we 

23
00:01:10.930 --> 00:01:13.250
need to check all the previous indices 

24
00:01:13.740 --> 00:01:15.940
So write a inner for loop from J equal to 

25
00:01:15.940 --> 00:01:19.620
0 to J less than i now we need to 

26
00:01:19.630 --> 00:01:22.950
check whether we can reach index I from Index J 

27
00:01:22.960 --> 00:01:24.680
with array of J steps 

28
00:01:25.140 --> 00:01:27.370
For that we can write if condition 

29
00:01:27.630 --> 00:01:31.290
If array of J Plus J is greater than or 

30
00:01:31.290 --> 00:01:32.150
equal to I 

31
00:01:32.810 --> 00:01:35.530
If array of J Plus J is greater than or 

32
00:01:35.530 --> 00:01:38.020
equal to I we can reach index I 

33
00:01:38.640 --> 00:01:41.780
So we need to update jump of I and what will 

34
00:01:41.780 --> 00:01:44.110
be the value of jump of I It will be the 

35
00:01:44.110 --> 00:01:47.790
minimum number of jumps required to reach jump of J Plus 

36
00:01:47.790 --> 00:01:48.150
one 

37
00:01:48.840 --> 00:01:52.950
So write jump of I equal to jump of J plus one 

38
00:01:53.440 --> 00:01:56.690
But we also need to check jump of J Plus 

39
00:01:56.690 --> 00:02:00.250
one is lesser than the already existing value in jump of I 

40
00:02:00.650 --> 00:02:02.910
If it is smaller than jump of I we can 

41
00:02:02.920 --> 00:02:03.670
update it 

42
00:02:03.960 --> 00:02:05.460
Otherwise we can skip it 

43
00:02:05.740 --> 00:02:08.390
So add the if condition before the statement 

44
00:02:08.770 --> 00:02:11.480
If jump of J Plus one is less than Jump of 

45
00:02:11.490 --> 00:02:15.580
I the for loop will calculate the minimum number of jumps 

46
00:02:15.580 --> 00:02:18.950
required to reach each index one by one and the 

47
00:02:18.950 --> 00:02:22.390
final result will be stored at the last index that 

48
00:02:22.390 --> 00:02:23.970
is in jump of n minus one 

49
00:02:24.440 --> 00:02:28.450
So finally returned the overall result jump of n minus one. 

