WEBVTT

1
00:00:00.240 --> 00:00:02.720
So how can we find the sum of elements in 

2
00:00:02.720 --> 00:00:05.510
singly linked list We can write a recursive 

3
00:00:05.510 --> 00:00:08.630
function and passed the head as the argument 

4
00:00:08.900 --> 00:00:12.080
And inside every recursive call we need to check 

5
00:00:12.090 --> 00:00:14.880
whether the current node is null or not 

6
00:00:14.930 --> 00:00:18.520
If it is not null add the current node data and 

7
00:00:18.530 --> 00:00:21.200
invoked the next recursive call with head 

8
00:00:21.210 --> 00:00:25.630
Next continued this task until we reach the end of 

9
00:00:25.640 --> 00:00:26.540
the linked list 

10
00:00:26.690 --> 00:00:29.330
When we reach null we can return zero 

11
00:00:29.590 --> 00:00:31.290
That is our base case 

12
00:00:31.450 --> 00:00:33.130
So let us see how it works 

13
00:00:33.420 --> 00:00:35.050
So this is the input list 

14
00:00:35.440 --> 00:00:39.850
First we call the function by passing head first check if 

15
00:00:39.850 --> 00:00:40.570
it is null 

16
00:00:40.630 --> 00:00:43.960
But it is not so add its data and called 

17
00:00:43.960 --> 00:00:47.950
the function again with head next here also checked If 

18
00:00:47.950 --> 00:00:51.230
the node is null but it is not so Add its 

19
00:00:51.230 --> 00:00:55.020
data and called the function again with next node here 

20
00:00:55.020 --> 00:00:58.260
also check If they node is null but it is not 

21
00:00:58.300 --> 00:00:58.610
so 

22
00:00:58.620 --> 00:01:01.840
Add its data and called the function again with next 

23
00:01:01.840 --> 00:01:05.640
node and here also the node is null so add 

24
00:01:05.640 --> 00:01:08.940
the data eight and called the function again with next 

25
00:01:08.940 --> 00:01:09.280
node 

26
00:01:09.580 --> 00:01:11.720
Now here the node is not valid 

27
00:01:11.730 --> 00:01:14.860
It is equal to null it is null so we 

28
00:01:14.860 --> 00:01:16.000
can return zero 

29
00:01:16.010 --> 00:01:18.900
So here we will get eight plus zero 

30
00:01:18.910 --> 00:01:20.050
That is eight 

31
00:01:20.240 --> 00:01:21.150
So return it 

32
00:01:21.740 --> 00:01:24.440
And here we will get 12 plus eight that is 

33
00:01:24.440 --> 00:01:27.400
20 and that is returned to last call 

34
00:01:27.630 --> 00:01:29.700
And there we will have 9 plus

35
00:01:29.710 --> 00:01:33.740
20 that is 29 which will be returned to last 

36
00:01:33.740 --> 00:01:33.970
call 

37
00:01:34.250 --> 00:01:36.080
And there we will get 7 plus

38
00:01:36.090 --> 00:01:40.290
29 that is 36 which will be the final result 

39
00:01:40.340 --> 00:01:42.650
and it will be returned to main function.

