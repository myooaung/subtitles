WEBVTT

1
00:00:00.640 --> 00:00:01.450
Hi friends. 

2
00:00:01.460 --> 00:00:07.090
In this video we will discuss about open hashing or separate chaining.

3
00:00:09.390 --> 00:00:12.220
In previous videos, 

4
00:00:12.230 --> 00:00:15.430
we learnt about linear probing or closed hashing

5
00:00:15.440 --> 00:00:17.470
So in linear probing or closed hashing,

6
00:00:17.480 --> 00:00:20.650
if any collision occurs we will linearly check for

7
00:00:20.650 --> 00:00:22.560
the available index one by one. 

8
00:00:23.440 --> 00:00:26.510
And if we find any available index in this checking, 

9
00:00:26.640 --> 00:00:27.690
we will place the key there.

10
00:00:27.690 --> 00:00:31.460
For example, Let's insert key 20 in this hash table.

11
00:00:30.760 --> 00:00:31.460


12
00:00:31.470 --> 00:00:34.010
So the key is 20 % 5

13
00:00:34.020 --> 00:00:37.310
That is zero. So check whether the hash index 0

14
00:00:37.320 --> 00:00:40.630
is available. Here, it is not available as element 10 

15
00:00:40.770 --> 00:00:43.300
is already present in the hash index zero. So we 

16
00:00:43.300 --> 00:00:44.920
can say a collision occurred.

17
00:00:46.140 --> 00:00:48.560
And in linear probing, what will we do? We will 

18
00:00:48.560 --> 00:00:51.560
linearly check for the available index one by one. 

19
00:00:51.570 --> 00:00:54.200
So check the next index and it is available. 

20
00:00:54.510 --> 00:00:56.750
So place our element 20 there. 

21
00:00:56.760 --> 00:00:59.830
So this is how we avoid a collision in closed

22
00:00:59.830 --> 00:01:01.270
hashing or linear probing. 

23
00:01:01.280 --> 00:01:04.380
But in open hashing or separate chaining, we will use 

24
00:01:04.390 --> 00:01:08.690
an array of the linked list to avoid the collision 

25
00:01:08.840 --> 00:01:11.850
Here each linked list is considered as a chain. 

26
00:01:11.850 --> 00:01:15.110
Hence this method is called separate chaining. Here we have 

27
00:01:15.110 --> 00:01:16.080
five chains 

28
00:01:16.100 --> 00:01:18.010
chain[0] to chain[4].

29
00:01:18.020 --> 00:01:18.560
See here, 

30
00:01:18.570 --> 00:01:21.800
If we want to insert Element 20, the key will 

31
00:01:21.800 --> 00:01:22.870
be 20%5 that is 0.

32
00:01:22.870 --> 00:01:26.060
 So we got key equal to zero 

33
00:01:27.440 --> 00:01:30.820
But an element 10 is already present there, which means a 

34
00:01:30.820 --> 00:01:31.690
collision occurred. 

35
00:01:32.540 --> 00:01:36.410
So in separate chaining, if collision occurs we will add 

36
00:01:36.410 --> 00:01:38.650
the node at the end of the linked list 

37
00:01:39.040 --> 00:01:41.690
So Element 20 will be added in the chain[0]

38
00:01:41.690 --> 00:01:44.320
at the end. That is after node zero 

39
00:01:44.320 --> 00:01:47.820
Similarly, if you want to insert Element 30, the key 

40
00:01:47.820 --> 00:01:50.900
will be 30%5 which is equal to 0.

41
00:01:50.910 --> 00:01:53.280
So we need to add the key in the chain[0] 

42
00:01:53.280 --> 00:01:54.500
 at the end. 

43
00:01:54.510 --> 00:01:57.690
So add the element 30 after the node 20 

44
00:01:57.140 --> 00:01:57.690


45
00:01:58.940 --> 00:01:59.610
Now let us see

46
00:01:59.610 --> 00:02:00.480
an example 

47
00:02:01.040 --> 00:02:01.370


48
00:02:01.040 --> 00:02:03.410
Let us assume the table size as three 

49
00:02:03.640 --> 00:02:07.030
So here we will have three chains. Chain[0], 

50
00:02:07.040 --> 00:02:08.810
chain[1]  and chain[2]. 

51
00:02:08.820 --> 00:02:11.510
And these are the head nodes for three separate linked 

52
00:02:11.510 --> 00:02:11.950
lists.

53
00:02:12.740 --> 00:02:15.830
First we have to initialise each linked list to NULL 

54
00:02:16.060 --> 00:02:19.190
which means each chain is empty now. 

55
00:02:19.200 --> 00:02:22.340
Now we have key equal to data% size 

56
00:02:23.040 --> 00:02:26.150
Suppose we need to insert element 6 in this table 

57
00:02:26.740 --> 00:02:30.590
So to find key we have 6%3 which 

58
00:02:30.590 --> 00:02:31.460
is equal to zero 

59
00:02:31.470 --> 00:02:35.640
So insert 6 in chain[0] and since 

60
00:02:35.640 --> 00:02:38.940
the list is empty now and this node should become 

61
00:02:38.940 --> 00:02:42.850
the head. So make this node the head of chain 0

62
00:02:42.410 --> 00:02:42.850


63
00:02:43.340 --> 00:02:44.080
And that is done. 

64
00:02:45.040 --> 00:02:45.630
Now let us

65
00:02:45.640 --> 00:02:50.430
Insert another element 12. Again apply in this equation and we 

66
00:02:50.430 --> 00:02:53.510
will get key equal to 12 % 3 which is 

67
00:02:53.520 --> 00:02:54.850
again equal to zero 

68
00:02:55.340 --> 00:02:59.150
So insert 12 at the end of chain[0]

69
00:02:59.640 --> 00:03:02.830
And as we do in linked list insertion, we have 

70
00:03:02.840 --> 00:03:05.990
to update the next of previous node which is zero 

71
00:03:06.440 --> 00:03:09.050
So node six now points to node 12

72
00:03:09.050 --> 00:03:11.200
Now let us insert another element 10. 

73
00:03:11.200 --> 00:03:14.950
So to find key, we have 10 % 3

74
00:03:14.960 --> 00:03:16.060
which is equal to one. 

75
00:03:16.840 --> 00:03:19.750
So we have to insert 10 in chain[1]

76
00:03:20.240 --> 00:03:23.850
And since the list is empty, this node should become 

77
00:03:23.850 --> 00:03:25.110
the head of the list. 

78
00:03:25.120 --> 00:03:28.310
So make this node the head of chain[1] and 

79
00:03:28.310 --> 00:03:28.950
that is done. 

80
00:03:29.640 --> 00:03:32.370
So that is how open hashing is performed and we 

81
00:03:32.370 --> 00:03:35.270
find the key first, then go to chain[key]

82
00:03:35.280 --> 00:03:36.010
and insert 

83
00:03:36.010 --> 00:03:39.790
the node at the end of that chain. Now let us 

84
00:03:39.790 --> 00:03:43.620
see its implementation. First let us define the size of 

85
00:03:43.620 --> 00:03:44.810
table as seven. 

86
00:03:45.340 --> 00:03:46.990
Now for the linked list node,

87
00:03:46.550 --> 00:03:46.990


88
00:03:47.000 --> 00:03:50.760
We have to create a structure node with int data 

89
00:03:50.770 --> 00:03:52.830
and stuct node * next 

90
00:03:53.340 --> 00:03:54.960
Now let us create the lists.

91
00:03:54.970 --> 00:04:00.560
So write struct node * chain[size]. So seven 

92
00:04:00.560 --> 00:04:04.180
lists are created from chain[0] to chain[6]

93
00:04:03.730 --> 00:04:04.180


94
00:04:04.190 --> 00:04:08.200
Now we have to initialise these lists to NULL and 

95
00:04:08.200 --> 00:04:10.400
it is done by this init function. 

96
00:04:10.540 --> 00:04:13.660
Now we have the insert function to insert elements to 

97
00:04:13.660 --> 00:04:17.030
this table and this function takes the value to be 

98
00:04:17.040 --> 00:04:18.470
inserted as the input. 

99
00:04:18.480 --> 00:04:22.210
So let us insert seven first. So value equal to 7.

100
00:04:21.770 --> 00:04:22.210


101
00:04:23.240 --> 00:04:26.070
First we will create a node for this element 

102
00:04:26.120 --> 00:04:29.550
So create a new node and using malloc allocate 

103
00:04:29.550 --> 00:04:30.450
memory to it. 

104
00:04:30.940 --> 00:04:34.490
So the node is created. Now at data part, add 

105
00:04:34.490 --> 00:04:38.210
value that is seven and we always insert new nodes 

106
00:04:38.220 --> 00:04:39.760
at the end of the list. 

107
00:04:40.340 --> 00:04:44.330
So at next part set NULL. So that is also 

108
00:04:44.330 --> 00:04:44.620
done. 

109
00:04:44.620 --> 00:04:47.520
Now we need to find in which change should we 

110
00:04:47.530 --> 00:04:51.710
insert this node. That is we have to find the 

111
00:04:51.720 --> 00:04:52.050
key 

112
00:04:52.640 --> 00:04:56.410
So we have int key equal to size % value 

113
00:04:56.420 --> 00:04:59.440
that is 7 % 7 that is equal to 0 

114
00:04:59.520 --> 00:05:01.550
and zero will be stored in key. 

115
00:05:01.940 --> 00:05:05.190
So we have to insert seven in chain[0].

116
00:05:05.200 --> 00:05:06.290
That is clear now. 

117
00:05:06.300 --> 00:05:08.000
Now we can have two cases: 

118
00:05:08.010 --> 00:05:12.220
That is, this chain is empty and the second case is 

119
00:05:12.230 --> 00:05:14.040
it has at least one node. 

120
00:05:14.540 --> 00:05:17.400
And if it is empty, the new node should become 

121
00:05:17.400 --> 00:05:21.020
the head. Otherwise just insert it at the end 

122
00:05:21.020 --> 00:05:21.750
of the list. 

123
00:05:22.240 --> 00:05:24.050
So to check it, we have 

124
00:05:24.050 --> 00:05:29.690
if(chain[key]=NULL). And it is. So set newnode = head

125
00:05:29.740 --> 00:05:32.460
And here the head  is chain[0] 

126
00:05:32.470 --> 00:05:35.260
So that is set and else part will be skipped. 

127
00:05:35.270 --> 00:05:37.240
and the insertion is now completed. 

128
00:05:37.590 --> 00:05:42.770
Now let us insert another element 0. So first create the 

129
00:05:42.770 --> 00:05:46.630
new node and allocate memory. Set data part as value

130
00:05:46.640 --> 00:05:49.920
and next part as NULL. Now find the key and we 

131
00:05:49.920 --> 00:05:53.320
will get value % size that is 0 % 7

132
00:05:53.330 --> 00:05:54.090
equal to zero.

133
00:05:54.100 --> 00:05:56.360
So we got the chain number. Now check if it 

134
00:05:56.360 --> 00:05:57.710
is empty or not. 

135
00:05:57.720 --> 00:06:01.000
So we have if chain[key] equal to NULL and 

136
00:06:01.010 --> 00:06:02.140
it is not. 

137
00:06:02.140 --> 00:06:06.500
So the chain is not empty. So we have to insert 

138
00:06:06.500 --> 00:06:08.990
the new node at the end of chain[0].

139
00:06:09.000 --> 00:06:09.690
So go to else  

140
00:06:09.690 --> 00:06:12.400
part, find the last node of chain 0 and 

141
00:06:12.410 --> 00:06:14.420
insert the new node after that. 

142
00:06:14.710 --> 00:06:17.440
So use a while loop from head till we have 

143
00:06:17.450 --> 00:06:18.870
node->next=null. 

144
00:06:18.880 --> 00:06:22.530
So set temp = chain[0] which is head

145
00:06:22.530 --> 00:06:26.420
and we have while (temp->next !=NULL)

146
00:06:25.950 --> 00:06:26.420


147
00:06:26.540 --> 00:06:29.500
And in first iteration itself, it fails.

148
00:06:29.500 --> 00:06:31.980
So first node is also the last node. 

149
00:06:32.540 --> 00:06:35.870
So make temp->next equal to new node. So node is

150
00:06:35.880 --> 00:06:39.180
inserted after the last node of chain and insertion is 

151
00:06:39.180 --> 00:06:39.790
completed. 

152
00:06:40.540 --> 00:06:42.750
Now let us insert another element 3

153
00:06:42.760 --> 00:06:46.630
So first create newnode and allocate memory.

154
00:06:46.640 --> 00:06:49.640
Set data part as value and next part as null and then 

155
00:06:49.640 --> 00:06:52.500
find the key and we will get value % size 

156
00:06:52.500 --> 00:06:54.780
That is 3 % 7 which is equal to 3

157
00:06:55.440 --> 00:06:57.980
So we can understand that we have to insert this 

158
00:06:57.990 --> 00:07:01.520
element in chain 3. Now check if it is empty 

159
00:07:01.530 --> 00:07:01.920
or not. 

160
00:07:01.930 --> 00:07:04.990
So we have if(chain[key]=NULL) and 

161
00:07:05.000 --> 00:07:07.120
it is. So make the new node the head of 

162
00:07:07.120 --> 00:07:09.320
chain 3 and the insertion is completed. 

163
00:07:09.330 --> 00:07:13.900
Similarly elements 10, 4 and 5 will get inserted like 

164
00:07:13.900 --> 00:07:14.200
this 

165
00:07:14.210 --> 00:07:16.510
So that is how we perform insertion. 

166
00:07:16.510 --> 00:07:18.600
Now let us see how to print this table.

167
00:07:19.640 --> 00:07:22.500
For that we have a print function and we will 

168
00:07:22.500 --> 00:07:24.950
use a for loop to print each chain. 

169
00:07:25.340 --> 00:07:28.970
So we have for (i=0;i<size;i++)

170
00:07:28.980 --> 00:07:32.210
In each iteration, one chain will be 

171
00:07:32.210 --> 00:07:36.340
printed and each chain is a what? A linked list.

172
00:07:35.940 --> 00:07:36.340


173
00:07:36.840 --> 00:07:39.260
And how do we print a linked list? We will 

174
00:07:39.270 --> 00:07:43.080
traverse the list from head till we reach NULL and print 

175
00:07:43.180 --> 00:07:45.920
each node's data. So we will do the same in 

176
00:07:45.930 --> 00:07:47.050
each iteration. 

177
00:07:47.060 --> 00:07:51.160
So in first iteration, we have i equal to zero.

178
00:07:51.160 --> 00:07:54.140
So copy chain[i], that is chain[0] which 

179
00:07:54.140 --> 00:07:57.090
is the head of first list to temp and print 

180
00:07:57.100 --> 00:07:58.830
chain[0] on screen. 

181
00:07:59.840 --> 00:08:02.900
And now we have the while loop while temp not 

182
00:08:02.900 --> 00:08:05.500
equal to NULL. So temp is not NULL

183
00:08:05.500 --> 00:08:07.550
right now. So condition is okay.

184
00:08:07.550 --> 00:08:11.010
So go inside and print temp's data that is 7 

185
00:08:11.020 --> 00:08:14.040
and that will be printed and now move temp to 

186
00:08:14.040 --> 00:08:17.970
next node. Now again check the condition temp is not 

187
00:08:17.970 --> 00:08:18.350
NULL

188
00:08:18.420 --> 00:08:19.330
Now also 

189
00:08:19.430 --> 00:08:21.130
So again condition is okay 

190
00:08:21.130 --> 00:08:25.100
So go inside and print data at zero and now 

191
00:08:25.110 --> 00:08:26.500
move temp to next node. 

192
00:08:26.510 --> 00:08:28.600
Now check the condition and it fails now.

193
00:08:29.540 --> 00:08:32.140
So we have reached the end of the list. 

194
00:08:32.400 --> 00:08:35.920
So the control comes out of while and prints NULL. 

195
00:08:36.200 --> 00:08:39.700
and first iteration of for loop is completed and we 

196
00:08:39.700 --> 00:08:41.350
got the first chain printed. 

197
00:08:41.840 --> 00:08:45.270
Similarly all chains will be printed in the next iterations. 

198
00:08:44.800 --> 00:08:45.270


199
00:08:45.270 --> 00:08:48.750
So that is how we perform insertion and printing.

200
00:08:49.440 --> 00:08:52.880
Now what about searching and deletion. These operations are 

201
00:08:52.890 --> 00:08:55.990
also as same as we perform searching and deletion in 

202
00:08:55.990 --> 00:08:56.690
linked lists. 

203
00:08:56.690 --> 00:08:58.400
So let us see how to search 

204
00:08:58.410 --> 00:09:00.500
So we will have the element to be searched 

205
00:09:00.600 --> 00:09:02.450
And first we will find the key. 

206
00:09:02.460 --> 00:09:05.160
And in that chain, we will search the element 

207
00:09:05.180 --> 00:09:07.110
as we search any linked list. 

208
00:09:07.110 --> 00:09:10.930
So let us see. We have value to be searched equal to 10 

209
00:09:11.140 --> 00:09:15.480
First find the key that is 10%7 equal to 3

210
00:09:13.550 --> 00:09:15.480


211
00:09:16.040 --> 00:09:19.040
So go to chain 3, and traverse it till we 

212
00:09:19.040 --> 00:09:19.800
reach 10

213
00:09:19.910 --> 00:09:21.270
Or till we reach the end 

214
00:09:21.280 --> 00:09:22.690
So copy chain[3]

215
00:09:22.700 --> 00:09:25.470
That is head of list 3 to temp and use a 

216
00:09:25.470 --> 00:09:29.270
while loop, while temp and in first iteration, check if

217
00:09:29.270 --> 00:09:32.850
temp ->data = 10 and it is not. So move 

218
00:09:32.860 --> 00:09:33.950
temp to next node.

219
00:09:35.640 --> 00:09:37.630
So go to next iteration and check

220
00:09:37.630 --> 00:09:42.020
The condition and temp is now equal to 3028 not 

221
00:09:42.020 --> 00:09:42.140
NULL 

222
00:09:42.140 --> 00:09:43.590
Also the condition is okay 

223
00:09:43.600 --> 00:09:47.330
So check if temp->data equal to value 10 and 

224
00:09:47.340 --> 00:09:50.030
it is. So return one as the search is found.

225
00:09:50.040 --> 00:09:52.830
And if the element is not present, then at a 

226
00:09:52.830 --> 00:09:57.120
point, that is, when temp reaches the last node, this 

227
00:09:57.120 --> 00:10:00.420
while loop condition will fail and control will come out 

228
00:10:00.430 --> 00:10:01.260
and return zero 

229
00:10:01.270 --> 00:10:02.880
So that was about searching. 

230
00:10:02.930 --> 00:10:06.070
And now let us talk about deletion. Deletion 

231
00:10:06.080 --> 00:10:08.200
is also a similar process. First

232
00:10:08.200 --> 00:10:10.390
We have to find the key, go to that chain 

233
00:10:10.390 --> 00:10:13.530
and then perform deletion. So let us delete value 

234
00:10:13.530 --> 00:10:14.290
seven here.

235
00:10:14.610 --> 00:10:18.450
So first find the key and it will be equal 

236
00:10:18.450 --> 00:10:21.100
to 7%7 which is equal to 0. Now 

237
00:10:21.100 --> 00:10:25.160
create temp initialised to head of chain 0, that is

238
00:10:25.160 --> 00:10:28.390
chain[key] and also declare dealloc

239
00:10:28.400 --> 00:10:30.570
Now before we can delete a node, 

240
00:10:30.580 --> 00:10:33.520
First we have to find if it is present or 

241
00:10:33.520 --> 00:10:33.930
not. 

242
00:10:35.040 --> 00:10:37.710
So we have to traverse the list to find the 

243
00:10:37.710 --> 00:10:38.950
value, that is, seven. 

244
00:10:39.440 --> 00:10:42.000
So we have if temp not equal to NULL

245
00:10:42.010 --> 00:10:44.050
And it is true here. And here we can have 

246
00:10:44.060 --> 00:10:45.090
two cases.

247
00:10:45.260 --> 00:10:48.200
One is node to be deleted is the head 

248
00:10:48.450 --> 00:10:50.830
And the second case is it is not head 

249
00:10:51.740 --> 00:10:55.050
So first check if head contains the element 7 

250
00:10:55.590 --> 00:10:58.320
And it is true here. So delete that node 

251
00:10:58.530 --> 00:11:02.350
Make its next node the new head. So copy temp 

252
00:11:02.360 --> 00:11:06.040
that is  head to dealloc and make temp's

253
00:11:06.040 --> 00:11:09.340
next node the head. So we have temp equal 

254
00:11:09.340 --> 00:11:10.370
to temp->next 

255
00:11:11.140 --> 00:11:14.350
Now free the old head which is copied in dealloc

256
00:11:13.920 --> 00:11:14.350


257
00:11:14.350 --> 00:11:17.160
And the deletion is now successful. So we can return 

258
00:11:17.160 --> 00:11:17.400
one 

259
00:11:17.410 --> 00:11:19.600
Now it is delete another element 10

260
00:11:20.060 --> 00:11:22.840
So first find the key and it will be equal to

261
00:11:22.850 --> 00:11:27.150
10 % 7 which is equal to 3. Now create 

262
00:11:27.160 --> 00:11:30.940
temp and dealloc and temp is initialised to chain[key] 

263
00:11:30.940 --> 00:11:33.280
that is head of the list 3.

264
00:11:33.290 --> 00:11:35.980
Now we have if temp not equal to NULL and 

265
00:11:35.980 --> 00:11:36.690
it is true. 

266
00:11:37.070 --> 00:11:40.710
And here as we discussed, we can have two cases 

267
00:11:40.710 --> 00:11:41.970
so we have to check it 

268
00:11:42.080 --> 00:11:45.990
So first check if head contains the element 10 and it 

269
00:11:45.990 --> 00:11:49.130
is not. So go to else part and traverse the 

270
00:11:49.130 --> 00:11:50.330
list to find 10

271
00:11:50.320 --> 00:11:54.350
So we have while(temp->next) and in first 

272
00:11:54.350 --> 00:11:59.200
iteration, the condition is okay. So check if temp->next's 

273
00:11:59.200 --> 00:12:02.940
data is equal to 10 and it is. So delete 

274
00:12:02.940 --> 00:12:07.250
that node and make its previous node's next equal to 

275
00:12:07.500 --> 00:12:09.060
the node to be deleted's 

276
00:12:09.060 --> 00:12:11.630
next node. Otherwise it will point a 

277
00:12:11.630 --> 00:12:12.470
deleted memory. 

278
00:12:12.480 --> 00:12:17.220
So node to be deleted is temp->next and its 

279
00:12:17.220 --> 00:12:19.150
previous node is temp here 

280
00:12:19.540 --> 00:12:22.620
So copy temp->next to dealloc which is the 

281
00:12:22.620 --> 00:12:26.640
node to be deleted and make temp->next equal to 

282
00:12:26.650 --> 00:12:28.840
temp->next->next  that is NULL

283
00:12:29.340 --> 00:12:29.840
Now free 

284
00:12:29.840 --> 00:12:32.730
The node which is copied in dealloc and the 

285
00:12:32.730 --> 00:12:35.450
deletion is now completed. So we can return one. 

286
00:12:35.840 --> 00:12:38.600
And if the node to be deleted is not found 

287
00:12:38.830 --> 00:12:41.530
that the control comes out of this while loop and 

288
00:12:41.530 --> 00:12:44.500
return zero as the deletion was unsuccessful. 

289
00:12:44.530 --> 00:12:48.380
So that is how we perform insertion, printing, searching and 

290
00:12:48.380 --> 00:12:50.080
deletion in open hashing. 

291
00:12:50.940 --> 00:12:54.260
So in insertion, we have to find the key first 

292
00:12:54.430 --> 00:12:57.790
then perform inserting a node at the end of linked 

293
00:12:57.790 --> 00:12:58.230
list 

294
00:12:58.640 --> 00:13:02.560
In searching, we find the key first then perform search in

295
00:13:02.570 --> 00:13:06.370
a linked list and in deletion as we did in insertion 

296
00:13:06.370 --> 00:13:07.350
and searching first

297
00:13:07.350 --> 00:13:08.670
We have to find the key 

298
00:13:08.870 --> 00:13:12.300
Then in that change in that linked list we have 

299
00:13:12.310 --> 00:13:16.440
to perform deletion and in printing we have to 

300
00:13:16.440 --> 00:13:19.250
traverse each list and print it. 

