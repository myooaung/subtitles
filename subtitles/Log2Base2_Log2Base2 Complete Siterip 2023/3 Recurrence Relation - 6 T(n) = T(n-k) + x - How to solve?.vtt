WEBVTT

1
00:00:00.240 --> 00:00:03.310
In the previous videos we have solved recurrence relations of 

2
00:00:03.320 --> 00:00:04.630
decreasing functions 

3
00:00:04.940 --> 00:00:08.640
Let us write those recurrence relations and analyse their time 

4
00:00:08.640 --> 00:00:11.950
complexity and see if we can find any pattern 

5
00:00:12.400 --> 00:00:14.960
The first one is T(n) equal to  

6
00:00:14.960 --> 00:00:18.260
T(n-1) + 1 and it's time complexity

7
00:00:18.260 --> 00:00:22.360
 is n. The second one is T(n) is equal to

8
00:00:22.360 --> 00:00:26.110
T(n-1) + n and it's time complexity is  

9
00:00:26.120 --> 00:00:29.790
n^2 .the third one is T(n) is equal to

10
00:00:29.800 --> 00:00:33.130
T(n-1) + logn and it's time complexity 

11
00:00:33.130 --> 00:00:34.750
is nlogn 

12
00:00:35.540 --> 00:00:39.090
If we observe the about recurrence relations and their results 

13
00:00:39.100 --> 00:00:42.180
we can find that if the first part is T(n-1) 

14
00:00:42.190 --> 00:00:45.450
then the second part's time complexity 

15
00:00:45.450 --> 00:00:48.250
is multiplied by n in the result

16
00:00:48.940 --> 00:00:53.110
See here the second part is 1 , 1 is multiplied by

17
00:00:53.450 --> 00:00:57.190
n and the result becomes n here the second part is n

18
00:00:57.390 --> 00:01:00.460
and the second part is multiplied by n and the result becomes

19
00:01:00.460 --> 00:01:04.930
n^2. Similarly here the second part is logn. logn 

20
00:01:04.930 --> 00:01:08.150
is multiplied by n and the result becomes nlogn.

21
00:01:08.160 --> 00:01:10.270
 Basically what it means is

22
00:01:10.270 --> 00:01:13.570
When n is decreasing one by one in each 

23
00:01:13.570 --> 00:01:17.180
recursive call it takes n unit of time and we 

24
00:01:17.180 --> 00:01:20.330
are multiplying this n unit of time with a total 

25
00:01:20.330 --> 00:01:23.590
time complexity of the logic that we have inside the 

26
00:01:23.590 --> 00:01:24.460
recursive call 

27
00:01:24.870 --> 00:01:28.440
For example in the first algorithm the logic inside the 

28
00:01:28.440 --> 00:01:31.680
recursive call just takes one unit of time 

29
00:01:31.910 --> 00:01:35.340
So the total time complexity is  n*1 that is 

30
00:01:35.340 --> 00:01:39.080
O(n). In the second algorithm the logic inside

31
00:01:39.080 --> 00:01:42.470
the recrusive call takes n units of time so total 

32
00:01:42.470 --> 00:01:45.850
time complexity n*n that is 

33
00:01:45.860 --> 00:01:46.550
O(n^2)

34
00:01:46.940 --> 00:01:50.940
Similarly, In the third algorithm the logic inside the recursive 

35
00:01:50.940 --> 00:01:54.560
call takes logn units of time so total time 

36
00:01:54.560 --> 00:01:57.320
complexity is n*logn

37
00:01:57.460 --> 00:01:59.150
that is O(logn)

38
00:01:59.160 --> 00:02:01.910
And if that is the case what will be the 

39
00:02:01.920 --> 00:02:05.290
total time complexity If the logic inside the recursive 

40
00:02:05.290 --> 00:02:08.510
call takes n square units of time and the value 

41
00:02:08.510 --> 00:02:11.400
of n is decreasing one by one in each recursive 

42
00:02:11.400 --> 00:02:11.850
calls 

43
00:02:12.540 --> 00:02:15.490
In other words what will be the time complexity of 

44
00:02:15.500 --> 00:02:18.990
this recurrence relation t(n) equal to 

45
00:02:19.000 --> 00:02:21.250
T(n-1) + n^2

46
00:02:21.740 --> 00:02:22.730
It's very simple 

47
00:02:22.820 --> 00:02:25.950
Just multiply n with n^2 and we will get 

48
00:02:25.960 --> 00:02:29.250
total time complexity O(n^3) 

49
00:02:29.740 --> 00:02:33.360
Similarly if T(n) equals to T(n-1) 

50
00:02:33.360 --> 00:02:36.540
+ n3 then the result is  

51
00:02:36.540 --> 00:02:37.330
n*n^3 

52
00:02:37.380 --> 00:02:39.770
That is O(n^4) 

53
00:02:39.780 --> 00:02:42.540
Based on this what we can say is in a 

54
00:02:42.540 --> 00:02:43.590
recurrence relation 

55
00:02:43.680 --> 00:02:46.940
If the recursive call is decreasing one by one at 

56
00:02:46.950 --> 00:02:50.810
each level then the total time complexity is

57
00:02:50.810 --> 00:02:54.400
n into time complexity of the logic which is present inside 

58
00:02:54.400 --> 00:02:55.450
the recursive call 

59
00:02:55.940 --> 00:02:56.730
So that's it 

60
00:02:56.860 --> 00:03:00.270
But what happens when n decreases by two or three 

61
00:03:00.280 --> 00:03:03.330
instead of one. Will it make any difference in total 

62
00:03:03.330 --> 00:03:06.930
time complexity. No it won't make any difference 

63
00:03:06.940 --> 00:03:10.790
Let's say how letters take this recurrence relation  

64
00:03:10.800 --> 00:03:13.790
T(n)= T(n-k) + 1

65
00:03:14.360 --> 00:03:18.830
K can be any postive in the just say +1,2,3, 500 

66
00:03:18.830 --> 00:03:23.060
or 1000 anything if the value of k is 1 

67
00:03:23.060 --> 00:03:25.940
T(n) will take n steps to reach the base 

68
00:03:25.940 --> 00:03:26.450
case 

69
00:03:26.840 --> 00:03:30.330
If value of k is 2 T(n) will take 

70
00:03:30.340 --> 00:03:32.810
n/2 steps to reach the base case 

71
00:03:33.160 --> 00:03:36.280
If value of k is 50 , then T(n) will take 

72
00:03:36.290 --> 00:03:39.250
n/50 steps to reach the base case. For 

73
00:03:39.250 --> 00:03:42.000
smaller input size we can say n/2 is 

74
00:03:42.000 --> 00:03:45.020
smaller than n and n/50 is smaller than 

75
00:03:45.020 --> 00:03:45.650
n/2 

76
00:03:45.840 --> 00:03:49.100
But when input size becomes bigger and bigger say  

77
00:03:49.100 --> 00:03:52.410
n equal to 10 million or 100 million then n/2 

78
00:03:52.420 --> 00:03:55.230
 and n/50 and n/k are asymptotically 

79
00:03:55.230 --> 00:03:57.810
equal to O(n) so it won't 

80
00:03:57.810 --> 00:04:00.560
make any difference in total time complexity 

81
00:04:00.710 --> 00:04:03.890
So in general if we have the recurrence relation of 

82
00:04:03.900 --> 00:04:06.810
this pattern T(n) equal to T(n-k) + x

83
00:04:06.810 --> 00:04:11.180
the total time complexity is 

84
00:04:11.180 --> 00:04:11.950
n*x 

85
00:04:12.240 --> 00:04:15.270
This rule only applies to this recurrence factor 

86
00:04:15.340 --> 00:04:18.430
It won't apply to all type of recurrence relation for 

87
00:04:18.430 --> 00:04:21.130
example if we have a coefficient before T(n-1) 

88
00:04:21.130 --> 00:04:23.430
 are instead of minus 

89
00:04:23.440 --> 00:04:27.080
If we have a division operation this rule won't work.


