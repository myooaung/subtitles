WEBVTT

1
00:00:00.140 --> 00:00:03.550
we already know how to implement the heap sort algorithm 

2
00:00:03.940 --> 00:00:07.040
For this problem we can reuse the heap sort code 

3
00:00:07.050 --> 00:00:09.150
and change it based on our need 

4
00:00:09.740 --> 00:00:13.490
First let us rename the function name as get 

5
00:00:13.500 --> 00:00:17.190
top K elements and then we can add one more 

6
00:00:17.190 --> 00:00:20.850
parameter int K in this heap sort code 

7
00:00:20.860 --> 00:00:24.990
Our objective is to sort all the elements so that 

8
00:00:25.000 --> 00:00:28.410
after the execution of build heap function we are running 

9
00:00:28.410 --> 00:00:30.750
the sorting logic for all the elements 

10
00:00:31.340 --> 00:00:35.210
So we have wrote the condition as size greater than 

11
00:00:35.210 --> 00:00:35.750
zero 

12
00:00:36.640 --> 00:00:40.810
Basically what this logic does is whenever the largest element 

13
00:00:40.810 --> 00:00:43.850
come to the top it will swap the first and 

14
00:00:43.850 --> 00:00:47.800
last elements so that the largest element will be placed 

15
00:00:47.810 --> 00:00:49.050
in its right place 

16
00:00:49.640 --> 00:00:52.840
After the swap it will continue the same heapify 

17
00:00:52.840 --> 00:00:55.080
process for the remaining elements 

18
00:00:55.230 --> 00:00:57.850
This is the reason why we're running the loop for 

19
00:00:57.860 --> 00:00:58.850
all the elements 

20
00:00:59.340 --> 00:01:02.220
But in our case we need to find only the 

21
00:01:02.230 --> 00:01:03.540
top K elements 

22
00:01:03.690 --> 00:01:06.140
So we do not want to run the while Loop 

23
00:01:06.140 --> 00:01:07.370
for all the elements 

24
00:01:07.680 --> 00:01:10.510
We just need to run the while loop only for 

25
00:01:10.510 --> 00:01:11.250
k times 

26
00:01:11.640 --> 00:01:14.800
So replace the while loop condition with I lesser 

27
00:01:14.800 --> 00:01:15.550
than K

28
00:01:16.240 --> 00:01:19.100
If we take the value of K as three in 

29
00:01:19.100 --> 00:01:22.780
the first iteration the number 80 will be placed at 

30
00:01:22.780 --> 00:01:26.680
the end And in the second iteration the number 60 

31
00:01:26.680 --> 00:01:29.150
will be placed as the second last element 

32
00:01:29.640 --> 00:01:32.670
And in the third iteration the number 50 will be 

33
00:01:32.670 --> 00:01:35.050
placed as the third last element 

34
00:01:35.440 --> 00:01:39.040
After the execution of this loop the top K elements 

35
00:01:39.040 --> 00:01:41.250
will be present at the end of the array 

36
00:01:41.740 --> 00:01:45.130
Now we are set to print the top K elements 

37
00:01:45.370 --> 00:01:48.510
So write a for loop for I equal to size I 

38
00:01:48.510 --> 00:01:52.410
greater than size minus K and I minus minus and 

39
00:01:52.420 --> 00:01:55.720
inside that just print last k elements 

40
00:01:55.870 --> 00:01:58.920
And that's it we have implemented the logic to print 

41
00:01:58.920 --> 00:02:01.350
the top K elements from the given array. 

