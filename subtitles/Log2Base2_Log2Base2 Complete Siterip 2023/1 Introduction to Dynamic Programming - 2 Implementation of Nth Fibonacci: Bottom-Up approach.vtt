WEBVTT

1
00:00:00.040 --> 00:00:00.970
Hello everyone 

2
00:00:01.280 --> 00:00:05.090
In this video let us learn how to implement the 

3
00:00:05.090 --> 00:00:09.260
bottom up approach of nth fibonacci problem.

4
00:00:09.320 --> 00:00:14.970
So we have two functions here. 

5
00:00:15.740 --> 00:00:18.890
The main function and the user defined function 

6
00:00:18.900 --> 00:00:19.750
Fibonacci 

7
00:00:19.830 --> 00:00:23.740
So in main function, first declare the integer variable n.

8
00:00:23.750 --> 00:00:28.250
And now read the number from user to variable n.

9
00:00:27.850 --> 00:00:28.250


10
00:00:28.940 --> 00:00:32.760
Suppose the number read from user is 4 and it 

11
00:00:32.760 --> 00:00:34.220
is stored in variable n.

12
00:00:34.230 --> 00:00:38.590
And now we have the base case fibonacci(0)

13
00:00:38.590 --> 00:00:42.250
equal to zero and fibonacci(1) equal to one 

14
00:00:42.940 --> 00:00:43.160
 

15
00:00:42.940 --> 00:00:46.750
So check if n is less than or equal to one 

16
00:00:47.340 --> 00:00:50.550
if so, print that number itself.

17
00:00:51.040 --> 00:00:54.740
else we have to call fibonacci(n) 

18
00:00:54.740 --> 00:00:55.220
 

19
00:00:54.740 --> 00:00:57.350
Here 4 is not less than or equal to 1

20
00:00:57.940 --> 00:01:01.540
So if part will fail and go to else case 

21
00:01:01.670 --> 00:01:03.750
and call Fibonacci(4)

22
00:01:04.440 --> 00:01:08.470
So control reaches this function and here n is equal 

23
00:01:08.470 --> 00:01:13.060
to four. So create an integer array Fib of size N+1 

24
00:01:13.070 --> 00:01:15.610
and integer variable i.

25
00:01:15.620 --> 00:01:22.130
Now set Fib(0) =0 and Fib(1) =1 

26
00:01:20.340 --> 00:01:22.130


27
00:01:23.140 --> 00:01:29.610
Now we know that Fib(N)=Fib(N-1) + Fib(N-2)

28
00:01:26.040 --> 00:01:26.330


29
00:01:26.330 --> 00:01:29.610


30
00:01:29.920 --> 00:01:33.200
for every N greater than or equal to 2

31
00:01:33.840 --> 00:01:36.570
so we can use a for loop from i=2 

32
00:01:36.570 --> 00:01:40.350
to i lesser than or equal to N

33
00:01:40.360 --> 00:01:42.750
increment i in each iteration 

34
00:01:43.540 --> 00:01:47.760
So in the first iteration  i is equal to two 

35
00:01:47.770 --> 00:01:50.430
So Fib[2] will be computed and it will be 

36
00:01:50.430 --> 00:01:54.730
equal to Fib(2-1) + Fib(2-2)

37
00:01:53.730 --> 00:01:54.730
 

38
00:01:55.140 --> 00:01:58.490
That is Fib(1)+Fib(0)  which 

39
00:01:58.490 --> 00:02:02.940
is equal to 1+0 equal to 1. 

40
00:02:02.940 --> 00:02:04.750
So Fib[2] is computed.

41
00:02:05.440 --> 00:02:10.150
Now we have the values of Fib[0],Fib[1] and Fib[2]

42
00:02:08.410 --> 00:02:10.150


43
00:02:11.040 --> 00:02:14.040
Now in the second iteration i will be equal to 3

44
00:02:14.040 --> 00:02:22.020
So Fib(3)=Fib(3-1) + Fib(3-2) that is

45
00:02:17.890 --> 00:02:22.020


46
00:02:22.160 --> 00:02:26.380
Fib(2)+Fib(1) that is 

47
00:02:26.390 --> 00:02:28.350
1+1 which is equal to two.

48
00:02:29.140 --> 00:02:31.850
So Fib[3] is also computed now.

49
00:02:32.440 --> 00:02:35.650
Now in the third iterations i will be equal to four 

50
00:02:36.040 --> 00:02:41.650
so Fib(4) = Fib(4-1) + Fib(4-2)

51
00:02:40.180 --> 00:02:41.650


52
00:02:42.340 --> 00:02:46.000
That is Fib(3) + Fib(2) which 

53
00:02:46.000 --> 00:02:49.450
is equal to 2+1 that will be equal to 3 

54
00:02:48.960 --> 00:02:49.450


55
00:02:50.140 --> 00:02:52.620
So Fib[4] is also computed 

56
00:02:53.240 --> 00:02:55.770
Now i will be equal to five in the next 

57
00:02:55.770 --> 00:03:00.210
iteration and here condition i lesser than or equal to N

58
00:03:00.220 --> 00:03:01.050
will fail. 

59
00:03:01.740 --> 00:03:05.000
So return fib[N] that is fib[4]

60
00:03:05.010 --> 00:03:08.750
to the main function and it will be printed here 

61
00:03:09.540 --> 00:03:13.110
That is Fib[4]=3 will be printed 

62
00:03:13.120 --> 00:03:17.150
on this screen and finally the programme returns zero. 

63
00:03:17.740 --> 00:03:21.360
So that is how nth fibonacci problem can be implemented 

64
00:03:21.360 --> 00:03:23.250
using bottom up approach. 

