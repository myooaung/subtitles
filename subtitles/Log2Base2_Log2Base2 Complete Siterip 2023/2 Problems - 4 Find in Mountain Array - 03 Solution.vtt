WEBVTT

1
00:00:00.190 --> 00:00:03.560
Let's implement a solution for this problem in this function 

2
00:00:03.730 --> 00:00:05.050
search Mountain array 

3
00:00:05.740 --> 00:00:08.370
First we have to find the index of the peak 

4
00:00:08.370 --> 00:00:08.850
element 

5
00:00:09.240 --> 00:00:11.040
we shall do this in this function 

6
00:00:11.190 --> 00:00:14.470
Find Peak element in BitonicArray We have 

7
00:00:14.480 --> 00:00:16.850
already discussed this in the previous model 

8
00:00:17.160 --> 00:00:19.730
so let us skip it here and move on to the next 

9
00:00:19.730 --> 00:00:20.250
steps 

10
00:00:20.640 --> 00:00:23.400
Elements from the start index to peak index will be 

11
00:00:23.400 --> 00:00:24.470
in ascending order 

12
00:00:24.730 --> 00:00:28.060
So let us do a normal binary search from index 0 to 

13
00:00:28.060 --> 00:00:32.160
pivot so write res equal to binary search of 

14
00:00:32.170 --> 00:00:35.020
array comma n comma zero comma pivot 

15
00:00:35.250 --> 00:00:38.010
If the element is found the index of the element 

16
00:00:38.010 --> 00:00:41.490
will be returned to res else minus one will be 

17
00:00:41.490 --> 00:00:45.120
returned and we have to search the second part from 

18
00:00:45.120 --> 00:00:46.250
pivot to end 

19
00:00:47.040 --> 00:00:49.000
This portion will be in descending order 

20
00:00:49.180 --> 00:00:51.650
So we have to do a modified binary search 

21
00:00:52.140 --> 00:00:52.880
So write 

22
00:00:53.080 --> 00:00:56.530
If result equal to equal to minus one call Reverse 

23
00:00:56.530 --> 00:00:59.260
binary search of array comma n comma pivot 

24
00:00:59.260 --> 00:01:01.750
 plus one comma size minus one 

25
00:01:02.840 --> 00:01:04.420
Let us take the binary search 

26
00:01:04.420 --> 00:01:07.870
Could skeleton here and see what changes do we need 

27
00:01:07.870 --> 00:01:10.320
to make to search in a descending array 

28
00:01:10.640 --> 00:01:13.500
The logic here is quite the opposite of normal binary search 

29
00:01:13.500 --> 00:01:15.590
in a descending array 

30
00:01:15.740 --> 00:01:18.470
If the mid element is less than the search element 

31
00:01:18.670 --> 00:01:21.360
the search element can only be present in the first 

32
00:01:21.360 --> 00:01:23.350
half from start to mid 

33
00:01:23.740 --> 00:01:26.870
Hence they have to adjust end to mid minus 

34
00:01:26.870 --> 00:01:27.170
one 

35
00:01:27.310 --> 00:01:30.850
Likewise if mid element is greater than the search element 

36
00:01:31.130 --> 00:01:34.050
we have to adjust start to mid plus one 

37
00:01:34.690 --> 00:01:37.790
Thus if search element is present in second half 

38
00:01:37.960 --> 00:01:41.810
its index will be returned from this function else minus 

39
00:01:41.810 --> 00:01:45.100
one will be returned so R e s will hold 

40
00:01:45.110 --> 00:01:47.060
the decide output for this problem 

41
00:01:47.180 --> 00:01:48.770
Hence we can return it. 

