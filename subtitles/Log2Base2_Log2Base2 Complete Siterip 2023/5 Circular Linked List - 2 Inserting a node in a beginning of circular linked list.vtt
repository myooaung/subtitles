WEBVTT

1
00:00:00.640 --> 00:00:03.760
in this video let us learn how to insert a 

2
00:00:03.760 --> 00:00:06.850
new Node at the beginning of circular linked list 

3
00:00:07.740 --> 00:00:10.720
So in the previous video we have learnt about

4
00:00:10.720 --> 00:00:15.020
circular linked list unlike Normal Linked List circular linked List 

5
00:00:15.020 --> 00:00:18.650
have a link from last Node to first Node in 

6
00:00:18.650 --> 00:00:18.930
a cyclic

7
00:00:18.930 --> 00:00:22.250
Way here we are discussing how to insert a 

8
00:00:22.250 --> 00:00:25.250
Node in a circular linked list at the beginning 

9
00:00:25.340 --> 00:00:28.990
So if we have this linked list with elements 10 

10
00:00:29.000 --> 00:00:33.250
20 and 30 and if we insert 100 it will 

11
00:00:33.250 --> 00:00:36.170
be inserted at the beginning and we will get the 

12
00:00:36.170 --> 00:00:38.600
new circular linked list like this 

13
00:00:38.720 --> 00:00:41.260
Now let us see how to insert a new Node 

14
00:00:41.270 --> 00:00:44.510
in a circular linked list At the beginning here we will 

15
00:00:44.510 --> 00:00:45.750
have two cases 

16
00:00:46.010 --> 00:00:48.850
The first case is when the circular linked list 

17
00:00:48.860 --> 00:00:49.850
is empty 

18
00:00:50.190 --> 00:00:53.570
Then the new Node inserted will be the only Node 

19
00:00:53.780 --> 00:00:56.330
and it becomes the head Node and it will point 

20
00:00:56.330 --> 00:01:00.010
to itself the second cases when the circular linked list 

21
00:01:00.010 --> 00:01:03.400
has at least one Node then we need to find 

22
00:01:03.400 --> 00:01:06.940
the last Node by traversing the list and then insert 

23
00:01:06.940 --> 00:01:10.330
new Node after the last Node and it should point 

24
00:01:10.330 --> 00:01:14.030
to current head and then finally make the new Node 

25
00:01:14.040 --> 00:01:14.780
the head 

26
00:01:14.800 --> 00:01:17.580
Now let us see the Java programme to insert a 

27
00:01:17.580 --> 00:01:20.520
new Node at the beginning of his circular linked list 

28
00:01:20.530 --> 00:01:23.070
So this is the function which will add the new 

29
00:01:23.070 --> 00:01:26.010
Node at the beginning and we will pass the value 

30
00:01:26.010 --> 00:01:27.750
to be added to this function 

31
00:01:27.760 --> 00:01:31.040
Add first and it will create a new Node with 

32
00:01:31.040 --> 00:01:33.850
that value and inserted at the beginning 

33
00:01:34.240 --> 00:01:36.300
So we have public void 

34
00:01:36.310 --> 00:01:40.270
Add first of int val let us see how it works 

35
00:01:40.610 --> 00:01:43.400
So here first we have an empty circular linked 

36
00:01:43.400 --> 00:01:43.770
list 

37
00:01:43.780 --> 00:01:47.270
So we have head equal to Null now let us insert 

38
00:01:47.280 --> 00:01:49.150
a new Node with value 10 

39
00:01:49.640 --> 00:01:52.680
So we will call the function at first by passing the 

40
00:01:52.680 --> 00:01:55.260
value 10 and let us see what happens 

41
00:01:55.600 --> 00:01:57.260
So Val equal to ten here 

42
00:01:57.360 --> 00:02:00.300
So first we need to create the new Node using 

43
00:02:00.300 --> 00:02:00.900
new 

44
00:02:00.970 --> 00:02:04.850
So we have Node new Node equal to new Node 

45
00:02:05.440 --> 00:02:07.930
so it will be created in the heap and it's 

46
00:02:07.930 --> 00:02:09.250
reference will be returned 

47
00:02:09.740 --> 00:02:13.350
So we have a new Node created at address 1000 

48
00:02:13.840 --> 00:02:16.440
Now we need to add the data to the data 

49
00:02:16.440 --> 00:02:17.880
part so write 

50
00:02:17.980 --> 00:02:20.620
New Node dot data equal to Val 

51
00:02:20.890 --> 00:02:23.250
So 10 is added to the data part 

52
00:02:23.840 --> 00:02:27.290
Now if the circular linked list is empty the new 

53
00:02:27.290 --> 00:02:29.320
Node will be the only Node 

54
00:02:29.450 --> 00:02:30.710
And it should become head 

55
00:02:31.060 --> 00:02:32.280
So we need to check it 

56
00:02:32.280 --> 00:02:35.350
So we have if head equal to null 

57
00:02:35.840 --> 00:02:37.490
And we got head equal to null 

58
00:02:37.830 --> 00:02:41.080
So that means the linked list is currently empty 

59
00:02:41.540 --> 00:02:44.380
So this new Node will be the only Node in 

60
00:02:44.380 --> 00:02:45.060
this list 

61
00:02:45.070 --> 00:02:46.870
Hence it should be the head 

62
00:02:46.990 --> 00:02:49.220
And since its the circular linked list 

63
00:02:49.350 --> 00:02:51.200
It should point itself 

64
00:02:51.210 --> 00:02:54.610
Right So we need to set new node dot next 

65
00:02:54.620 --> 00:02:56.440
equal to new Node itself 

66
00:02:56.670 --> 00:02:59.250
And now we need to make it the head so 

67
00:02:59.250 --> 00:03:01.430
write head equal to new Node 

68
00:03:01.440 --> 00:03:03.450
So head points to this Node 

69
00:03:03.940 --> 00:03:06.130
So as we can see the thing is it should 

70
00:03:06.130 --> 00:03:06.520
be cyclic 

71
00:03:06.520 --> 00:03:07.040


72
00:03:07.130 --> 00:03:09.650
So the last Node should point to first Node 

73
00:03:09.830 --> 00:03:12.180
So here there is only one Node so it should 

74
00:03:12.180 --> 00:03:13.240
point to itself 

75
00:03:13.440 --> 00:03:16.220
So now we have the circular linked list with one 

76
00:03:16.220 --> 00:03:20.310
Node now let us insert another Node with value 20 So 

77
00:03:20.310 --> 00:03:23.050
first create the new Node using new 

78
00:03:23.240 --> 00:03:26.790
So the new Node is created at address 2000 like 

79
00:03:26.790 --> 00:03:27.220
this 

80
00:03:27.230 --> 00:03:30.200
Now we need to add the value 20 to the data 

81
00:03:30.200 --> 00:03:34.910
part So write new node dot data equal to val so 

82
00:03:34.910 --> 00:03:38.060
twenties added here Now we need to Check if the 

83
00:03:38.060 --> 00:03:41.730
circular linked list is empty and if it's empty the 

84
00:03:41.730 --> 00:03:43.250
head will be equal to null 

85
00:03:43.440 --> 00:03:46.670
But here it is not so if will fail and 

86
00:03:46.670 --> 00:03:48.650
the control goes to else part 

87
00:03:48.740 --> 00:03:51.230
So here we need to find the last Node by 

88
00:03:51.230 --> 00:03:54.890
traversing the list and then insert the new Node after 

89
00:03:54.890 --> 00:03:55.850
the last Node 

90
00:03:56.440 --> 00:03:59.140
So in normal linked list the last Node will be 

91
00:03:59.140 --> 00:04:02.130
pointing to null but in circular linked list 

92
00:04:02.260 --> 00:04:04.730
The last Node will be pointing the head of the 

93
00:04:04.730 --> 00:04:08.150
list so we need to create a temporary variable last 

94
00:04:08.500 --> 00:04:10.150
and initialised it to head 

95
00:04:10.540 --> 00:04:14.540
So write Node last equal to temp and use a 

96
00:04:14.540 --> 00:04:18.410
while loop to traverse the list till last next equal 

97
00:04:18.410 --> 00:04:22.050
to head And when the loop terminates last will point 

98
00:04:22.060 --> 00:04:26.640
to the last Node here Last equal to 1000 now so 

99
00:04:26.640 --> 00:04:29.480
Check if last next not equal to head 

100
00:04:29.820 --> 00:04:32.960
But it is so this condition will fail and it 

101
00:04:32.960 --> 00:04:37.040
will terminate now itself So we got the last Node 

102
00:04:37.270 --> 00:04:38.720
pointed by last 

103
00:04:38.940 --> 00:04:41.740
And now we have to insert the new Node after 

104
00:04:41.740 --> 00:04:42.650
the last Node 

105
00:04:43.140 --> 00:04:46.550
So right last dot next equal to new Node 

106
00:04:47.140 --> 00:04:49.120
Now it should point to the current head 

107
00:04:49.360 --> 00:04:51.120
So right New Node 

108
00:04:51.130 --> 00:04:55.070
Dot next equal to head and finally make the new 

109
00:04:55.070 --> 00:04:56.050
Node head 

110
00:04:56.440 --> 00:04:58.280
So write head equal to new 

111
00:04:58.280 --> 00:04:58.690
Node 

112
00:04:58.940 --> 00:05:01.730
So now we have the circular linked list with two 

113
00:05:01.730 --> 00:05:04.970
Nodes and the Node at 2000 being the head 

114
00:05:05.330 --> 00:05:08.450
Now let us insert another Node with value 30 

115
00:05:08.940 --> 00:05:12.140
So first create the new Node now at the value 

116
00:05:12.140 --> 00:05:13.800
30 at the data part 

117
00:05:14.080 --> 00:05:14.820
Now Check 

118
00:05:14.830 --> 00:05:18.020
If this list is empty but it is not so 

119
00:05:18.020 --> 00:05:20.550
go to the else part and find the last Node 

120
00:05:20.550 --> 00:05:21.950
by traversing the list 

121
00:05:22.340 --> 00:05:25.820
And we have last pointing to head initially and using 

122
00:05:25.820 --> 00:05:28.400
a while Look traverse the list till last 

123
00:05:28.410 --> 00:05:32.060
Next equal to head here temp equal to 2000 now 

124
00:05:32.290 --> 00:05:35.350
and Check if last next not equal to head 

125
00:05:35.820 --> 00:05:38.310
It is equal 1000 and not equal to head 

126
00:05:38.580 --> 00:05:40.170
So move to the next Node 

127
00:05:40.220 --> 00:05:41.790
So last equal to 1000 

128
00:05:41.790 --> 00:05:45.390
now check if last dot next not equal to 

129
00:05:45.390 --> 00:05:47.300
head but it is equal to head 

130
00:05:47.440 --> 00:05:50.400
So this condition fails and Loop will terminate 

131
00:05:50.780 --> 00:05:52.800
So we got the last Node Now 

132
00:05:53.040 --> 00:05:55.430
Now we have to insert the new Node after the 

133
00:05:55.430 --> 00:05:56.150
last Node 

134
00:05:56.250 --> 00:05:59.310
So we have last dot next equal to new Node 

135
00:05:59.390 --> 00:06:01.550
And next it should point to current head 

136
00:06:01.930 --> 00:06:05.150
So write new Node dot next equal to head 

137
00:06:05.240 --> 00:06:07.950
And finally we need to make the new Node the 

138
00:06:07.950 --> 00:06:08.950
head of the list 

139
00:06:09.040 --> 00:06:11.210
So right head equal to new Node 

140
00:06:11.440 --> 00:06:13.840
So that is how we can insert Nodes at the 

141
00:06:13.840 --> 00:06:15.780
beginning of circular linked list 

142
00:06:16.020 --> 00:06:18.660
Now let us discuss about the time complexity 

143
00:06:18.710 --> 00:06:21.520
Though we are inserting the Node at the beginning we 

144
00:06:21.520 --> 00:06:24.260
have to traverse the whole list to find the last 

145
00:06:24.260 --> 00:06:24.650
Node 

146
00:06:25.040 --> 00:06:28.410
Then only we can insert it so the time complexity 

147
00:06:28.420 --> 00:06:29.850
is order of n 

