WEBVTT

1
00:00:00.340 --> 00:00:03.730
We can use a bitwise operator to toggle nth bit 

2
00:00:03.730 --> 00:00:04.350
in a number. 

3
00:00:04.890 --> 00:00:07.130
So what do you think, which operator can we use 

4
00:00:07.130 --> 00:00:11.490
for that? We can use bitwise XOR operator. Because 

5
00:00:11.770 --> 00:00:14.930
if we do bitwise XOR between zero and one 

6
00:00:14.940 --> 00:00:18.330
we will get one and if we do bitwise XOR 

7
00:00:18.330 --> 00:00:20.850
between one and one, we will get zero.

8
00:00:21.540 --> 00:00:24.250
So what we can do here is, we can create 

9
00:00:24.250 --> 00:00:27.650
a bit mask with nth bit alone set to one.

10
00:00:28.240 --> 00:00:31.950
now if we do bitwise XOR between the number 

11
00:00:31.960 --> 00:00:35.130
and the bit mask, the value at the nth bit

12
00:00:35.140 --> 00:00:37.180
will be toggled.

13
00:00:37.410 --> 00:00:39.720
That is, if we have zero, it will become one. 

14
00:00:40.020 --> 00:00:42.650
And if we have one, it will become zero. 

15
00:00:43.410 --> 00:00:47.160
So let us take an example. Here the number is 28 

16
00:00:47.670 --> 00:00:49.550
we have to toggle the second bit 

17
00:00:49.940 --> 00:00:54.100
So n is equal to two here. So let us create a 

18
00:00:54.100 --> 00:00:56.950
bitmask with second bit set to one 

19
00:00:57.540 --> 00:01:00.850
So to do that, take one and perform n-1 

20
00:01:00.850 --> 00:01:06.430
left shifts. So perform one left shift one and 

21
00:01:06.440 --> 00:01:08.520
our bit mask is ready. 

22
00:01:08.520 --> 00:01:13.010
Now let us do bitwise XOR operation between number 28 the 

23
00:01:13.010 --> 00:01:16.140
created bit mask. Thus the second bit is toggled.

24
00:01:16.140 --> 00:01:19.720
That is, zero in the second bit has 

25
00:01:19.730 --> 00:01:21.050
changed to one. 

26
00:01:21.490 --> 00:01:24.270
And as we learnt, the remaining bits will remain  

27
00:01:24.270 --> 00:01:28.430
unchanged because when we perform bitwise XOR operation with 

28
00:01:28.430 --> 00:01:32.950
zero, the bit's value will not change  

29
00:01:32.950 --> 00:01:37.900
as one XOR zero is one and zero XOR zero is zero. So the second 

30
00:01:37.900 --> 00:01:41.390
bit is toggled and the new value in num is 

31
00:01:41.400 --> 00:01:41.950
30 

32
00:01:42.440 --> 00:01:45.700
Now let us take the same number 28. Let us 

33
00:01:45.710 --> 00:01:47.350
now toggle the fifth bit.

34
00:01:47.840 --> 00:01:50.530
So let us create a bit mask with the fifth 

35
00:01:50.540 --> 00:01:51.700
bit set to one. 

36
00:01:52.000 --> 00:01:54.940
So to do that, take one and perform four left shifts 

37
00:01:54.940 --> 00:01:56.550
and it is ready 

38
00:01:57.440 --> 00:02:00.140
And now let us do bitwise xor operation 

39
00:02:00.140 --> 00:02:03.050
between the number and the created bitmask. 

40
00:02:03.440 --> 00:02:07.570
And thus the fifth bit is toggled. That is one 

41
00:02:07.580 --> 00:02:11.110
in the fifth bit has changed to zero and the 

42
00:02:11.110 --> 00:02:13.450
remaining bits will remain unchanged.

43
00:02:13.940 --> 00:02:17.050
So after toggling the fifth bit the new value in num is 16

