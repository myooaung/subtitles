WEBVTT

1
00:00:00.340 --> 00:00:05.180
Many algorithms, particularly divide and conquer algorithms such as 

2
00:00:05.180 --> 00:00:08.890
binary search, quick sort, merge sort have their time  

3
00:00:08.890 --> 00:00:09.390
complexities in

4
00:00:09.390 --> 00:00:10.700
recurrence relations 

5
00:00:10.970 --> 00:00:14.400
So writing recurrence relation and learning how to solve it 

6
00:00:14.510 --> 00:00:17.510
is very important in time complexity analysis 

7
00:00:17.940 --> 00:00:21.350
Now let us quickly discuss what is a recurrence relation 

8
00:00:21.840 --> 00:00:25.190
A recurrence relation is an equation that is defined in 

9
00:00:25.190 --> 00:00:26.330
terms of itself 

10
00:00:26.550 --> 00:00:29.860
For example the factorial is defined by the recurrence 

11
00:00:29.860 --> 00:00:33.910
relations fact(n) = n*fact(n-1)

12
00:00:33.910 --> 00:00:37.170
where n is greater than 0

13
00:00:37.180 --> 00:00:40.540
and the initial condition is zero factorial equal to 

14
00:00:40.540 --> 00:00:40.950
one 

15
00:00:41.640 --> 00:00:45.180
And the Fibonacci sequence is defined using their recurrence  

16
00:00:45.180 --> 00:00:48.410
fib(n) = fib(n-1) +

17
00:00:48.410 --> 00:00:51.750
fib(n-2) with initial conditions  

18
00:00:51.750 --> 00:00:54.580
fib(0)=0 and 

19
00:00:54.580 --> 00:00:55.050
fib(1)=1

20
00:00:55.540 --> 00:00:58.760
Here we can notice that these equations are defined in 

21
00:00:58.760 --> 00:00:59.960
terms of themselves 

22
00:01:00.010 --> 00:01:02.390
Hence they are called recurrence relations 

23
00:01:02.480 --> 00:01:05.030
So we have learned what is a recurrence relation 

24
00:01:05.030 --> 00:01:07.120
And now let us learn how to write a recurrence 

25
00:01:07.120 --> 00:01:07.750
relations 

26
00:01:08.140 --> 00:01:09.410
Let us take this sample 

27
00:01:09.410 --> 00:01:10.770
recursive algorithm 

28
00:01:10.780 --> 00:01:14.370
Here let us assume that this algorithm takes T(n)

29
00:01:14.380 --> 00:01:15.850
time so let us 

30
00:01:15.850 --> 00:01:17.550
mark this as T(n)

31
00:01:18.040 --> 00:01:21.250
Now let's go inside the algorithm and write the time 

32
00:01:21.260 --> 00:01:23.150
taken by each line of code 

33
00:01:23.540 --> 00:01:25.610
First the condition is checked 

34
00:01:25.630 --> 00:01:27.320
It will take one unit of time 

35
00:01:27.400 --> 00:01:31.620
So write one here inside that the printing statement is 

36
00:01:31.620 --> 00:01:31.990
there 

37
00:01:32.000 --> 00:01:34.070
It will also take one unit of time 

38
00:01:34.170 --> 00:01:35.950
So write one here also 

39
00:01:36.340 --> 00:01:38.390
And the next one is a recursivee call 

40
00:01:38.640 --> 00:01:41.710
We already wote the algorithm of n takes  

41
00:01:41.720 --> 00:01:42.350
T(n)

42
00:01:42.740 --> 00:01:45.680
Then how much time this algorithm of (n-1) 

43
00:01:45.680 --> 00:01:48.530
will take It is T(n-1) time 

44
00:01:48.790 --> 00:01:52.150
so write T(n-1)  here and that's it 

45
00:01:52.150 --> 00:01:54.640
Let us calculate the total time taken by T(n) 

46
00:01:54.640 --> 00:01:58.100
is T(n-1) + 1 +1

47
00:01:58.100 --> 00:01:58.390


48
00:01:58.670 --> 00:02:02.750
So T(n) = T(n-1) + 2

49
00:02:02.750 --> 00:02:02.850


50
00:02:03.140 --> 00:02:05.750
Here the number two is a constant so we can 

51
00:02:05.750 --> 00:02:09.050
assume it as 1, As both are asymptotically same 

52
00:02:09.060 --> 00:02:10.540
here instead of 1,

53
00:02:10.550 --> 00:02:14.440
We can also write some constant notation like c, k 

54
00:02:14.450 --> 00:02:14.990
etcetera

55
00:02:15.740 --> 00:02:19.340
For better understanding we will express Constant as 1 in our 

56
00:02:19.340 --> 00:02:20.060
videos 

57
00:02:20.150 --> 00:02:23.680
So in the recurrence relation if we have constant values 

58
00:02:23.690 --> 00:02:27.340
It can be anything like 2, 100, 1000 

59
00:02:27.350 --> 00:02:28.280
etcetara...

60
00:02:28.510 --> 00:02:30.540
We can always assume it as 1

61
00:02:30.750 --> 00:02:33.960
So the total time taken by T(n)=

62
00:02:33.960 --> 00:02:35.850
T(n-1) + 1

63
00:02:36.440 --> 00:02:37.310
Now let us wite the 

64
00:02:37.310 --> 00:02:41.010
the recurrence with initial condition T(n) is

65
00:02:41.020 --> 00:02:44.190
T(n-1) + 1 when n is greater than 

66
00:02:44.190 --> 00:02:47.850
zero And what will happen when n is equal to zero 

67
00:02:48.240 --> 00:02:52.030
the programme execution wont even enter inside the if condition 

68
00:02:52.220 --> 00:02:56.460
simply This algorithm will not do anything when n is equal 

69
00:02:56.460 --> 00:02:57.180
to zero 

70
00:02:57.390 --> 00:03:00.760
So we can say that T(n)   will take constant time 

71
00:03:00.760 --> 00:03:04.790
when n is equal to zero. We will always express constant 

72
00:03:04.790 --> 00:03:07.660
as 1 So we can write T(n) as 1

73
00:03:07.670 --> 00:03:11.120
when n=0. This is the recurrence relation of 

74
00:03:11.130 --> 00:03:14.320
this algorithm and this is how we write recurrence relation 

75
00:03:14.320 --> 00:03:17.600
for any algorithm We will see more examples in the 

76
00:03:17.600 --> 00:03:20.840
coming lessons and that's all for this video and in 

77
00:03:20.850 --> 00:03:23.480
this video we have learned what is a reccurrence relation 

78
00:03:23.500 --> 00:03:25.860
and how to write a recurrence relation 

79
00:03:26.050 --> 00:03:28.710
In the next video we will learn how to soar 

