WEBVTT

1
00:00:00.040 --> 00:00:00.820
Hello friends 

2
00:00:00.980 --> 00:00:03.840
In this video let us learn how to construct a

3
00:00:03.840 --> 00:00:04.859
binary heap from an array

4
00:00:11.340 --> 00:00:14.729
For an example let us take an array of seven 

5
00:00:14.740 --> 00:00:15.380
elements 

6
00:00:15.450 --> 00:00:18.250
That is from index 0 to 6 

7
00:00:18.840 --> 00:00:21.850
As we know the binary heap is a complete binary tree 

8
00:00:21.850 --> 00:00:25.350
which satisfies the heap ordering property 

9
00:00:26.040 --> 00:00:29.760
So here we need to logically construct a complete  

10
00:00:29.760 --> 00:00:34.239
binary tree using this array. For that, for every index 

11
00:00:34.250 --> 00:00:37.430
of the array we need to find its left and right 

12
00:00:37.430 --> 00:00:40.349
child so that we can construct the complete binary

13
00:00:40.350 --> 00:00:44.980
tree out of this array. Here array index starts at zero

14
00:00:44.440 --> 00:00:44.980
 

15
00:00:45.050 --> 00:00:48.050
Then the left child can be found in the index 

16
00:00:48.060 --> 00:00:52.180
2*i+1 and the right child can 

17
00:00:52.180 --> 00:00:55.550
be found in the index 2*i+2 

18
00:00:56.040 --> 00:00:59.699
Let us see how. For index zero, the left child 

19
00:00:59.710 --> 00:01:02.510
will be in 2*0+1

20
00:01:02.650 --> 00:01:06.990
That is index 1 which is the element 20 . 

21
00:01:06.990 --> 00:01:09.809
And the right child will be in 2*0+2 

22
00:01:09.810 --> 00:01:12.850
that is index 2 which is Element 40 

23
00:01:13.440 --> 00:01:17.140
Similarly for Index one the left child will be 

24
00:01:17.140 --> 00:01:21.060
2*1+1 that is index 3 which is element 30 here

25
00:01:21.070 --> 00:01:24.400
And the right child will be in index 

26
00:01:24.400 --> 00:01:26.050
2*1+2

27
00:01:26.060 --> 00:01:29.059
That is index 4 which is element 80 

28
00:01:29.940 --> 00:01:33.860
Similarly for index 2, the left child will be  

29
00:01:33.860 --> 00:01:35.480
2*2+1

30
00:01:35.490 --> 00:01:39.290
That is index 5 which is element 60 and the 

31
00:01:39.290 --> 00:01:42.620
right child will be in index 2*2+2

32
00:01:42.620 --> 00:01:47.030
that is index 6 which is element 50 and 

33
00:01:47.030 --> 00:01:48.270
for index 3

34
00:01:48.280 --> 00:01:51.640
The left child should be at index 2*3+1 

35
00:01:51.640 --> 00:01:55.240
 that is 7 and right child should be 

36
00:01:55.240 --> 00:01:58.650
in index 2*3+2 that is 8

37
00:01:59.140 --> 00:02:02.190
But these indices are not in the range. so we 

38
00:02:02.190 --> 00:02:06.350
can stop the processing now. That is we can understand 

39
00:02:06.350 --> 00:02:09.480
that the next elements should be the leaves of the 

40
00:02:09.480 --> 00:02:09.850
tree 

41
00:02:10.640 --> 00:02:13.890
In this example, we are going to construct a max heap. 

42
00:02:14.540 --> 00:02:15.570
In max heap, 

43
00:02:15.730 --> 00:02:18.850
the parent will always be larger than the children 

44
00:02:19.340 --> 00:02:22.900
This is applicable for every sub tree and hence the 

45
00:02:22.900 --> 00:02:25.040
root of the tree will be the maximum 

46
00:02:25.220 --> 00:02:25.910
in a max heap. 

47
00:02:25.910 --> 00:02:31.240
So let us construct the max heap. To construct max heap 

48
00:02:31.250 --> 00:02:32.220
or min heap 

49
00:02:32.230 --> 00:02:35.400
We need to satisfy the heap property from the bottom most

50
00:02:35.400 --> 00:02:39.140
sub tree. Here we are going to construct the 

51
00:02:39.140 --> 00:02:43.470
Max heap so we need to satisfy the max heap property from 

52
00:02:43.470 --> 00:02:47.220
bottom most sub tree. Here which is the bottom most

53
00:02:47.220 --> 00:02:47.940
sub tree ?

54
00:02:48.440 --> 00:02:51.550
It is the sub tree with node 40 whose left 

55
00:02:51.560 --> 00:02:55.210
child is 60 and right child is 50. And the 

56
00:02:55.210 --> 00:02:59.340
second bottom most sub tree is this. This node 20 

57
00:02:59.340 --> 00:03:03.000
with left child 30 and right child 80 and 

58
00:03:03.000 --> 00:03:06.280
the top more sub tree is this one. The node 10

59
00:03:06.470 --> 00:03:09.950
with left child 20 and right child 40 

60
00:03:10.440 --> 00:03:14.390
So first take the bottom most sub tree. Check if 

61
00:03:14.390 --> 00:03:18.550
it satisfies the max heap property that is parent should be 

62
00:03:18.550 --> 00:03:22.080
greater than children and the maximum value should be at 

63
00:03:22.080 --> 00:03:26.780
the root. Here the child 60 is greater than parent 40

64
00:03:26.780 --> 00:03:31.070
 So swap 60 and 40. Again we need to 

65
00:03:31.070 --> 00:03:35.030
check for the max heap property of the swapped index. 

66
00:03:35.030 --> 00:03:39.300
But now 40 doesn't have any left or right child.  

67
00:03:39.300 --> 00:03:43.570
So we can skip this. Now the maximum element 60 is 

68
00:03:43.570 --> 00:03:47.970
placed in subtree's root. Now it satisfies the max heap 

69
00:03:47.970 --> 00:03:48.650
property 

70
00:03:49.640 --> 00:03:54.630
Next consider the second bottom most subtree. Here child 80 

71
00:03:54.640 --> 00:03:58.750
is greater than parent 20. So swap 80 and 20 

72
00:03:59.440 --> 00:03:59.840
Again 

73
00:03:59.840 --> 00:04:02.400
we need to check for the max heap property of the 

74
00:04:02.400 --> 00:04:03.400
swapped index 

75
00:04:04.040 --> 00:04:06.770
But again 20 doesn't have left and right 

76
00:04:06.780 --> 00:04:08.970
child. So we can skip this step 

77
00:04:09.840 --> 00:04:14.030
Now take the top most sub tree. Here child 80 

78
00:04:14.040 --> 00:04:18.650
is greater than parent 10. So swap 80 and 10 

79
00:04:19.140 --> 00:04:21.840
Again we need to check for the max heap property of 

80
00:04:21.850 --> 00:04:26.140
the swapped Index. Here 10 is root and 30 and 

81
00:04:26.140 --> 00:04:30.840
20 are its children. It doesn't satisfy the max heap property 

82
00:04:31.540 --> 00:04:34.900
that is the root must be the maximum among all 

83
00:04:34.900 --> 00:04:39.170
the nodes. Here 30 is greater than 10 and 20 

84
00:04:39.510 --> 00:04:43.720
swap 30 and 10. And again we need to check 

85
00:04:43.720 --> 00:04:47.740
for the max heap property of the swapped index. But now 

86
00:04:47.950 --> 00:04:51.380
10 doesn't have left and right child. so we can 

87
00:04:51.380 --> 00:04:55.120
skip this and our heapify process is done 

88
00:04:55.130 --> 00:04:59.190
for all sub trees from bottom most node. Now this 

89
00:04:59.190 --> 00:05:02.719
complete tree exactly satisfies the maxheap property 

90
00:05:03.340 --> 00:05:07.120
The maximum element 80 is present at the root and 

91
00:05:07.130 --> 00:05:10.540
every subtree's root value is the maximum of its 

92
00:05:10.540 --> 00:05:11.050
children 

93
00:05:11.740 --> 00:05:14.370
So this is how we can construct a heap from 

94
00:05:14.370 --> 00:05:14.950
an array.

95
00:05:15.540 --> 00:05:19.540
Now let's see how to implement this. As we discussed 

96
00:05:19.540 --> 00:05:23.310
the procedure to construct the heap is find the bottom

97
00:05:23.310 --> 00:05:26.460
most sub tree and from the bottom most sub tree 

98
00:05:26.510 --> 00:05:29.849
to top check and satisfy the heap property 

99
00:05:30.640 --> 00:05:32.750
Here we have two functions 

100
00:05:32.970 --> 00:05:36.450
First is build_heap which will call the heapify 

101
00:05:36.450 --> 00:05:40.020
function to satisfy the heap property from the bottom most

102
00:05:40.020 --> 00:05:44.410
node and the heapify function will find 

103
00:05:44.420 --> 00:05:47.969
the left and right nodes and arranges it based on 

104
00:05:47.980 --> 00:05:49.050
the heap property 

105
00:05:49.740 --> 00:05:52.640
First let us understand the build_heap function 

106
00:05:53.140 --> 00:05:56.620
The array and the last index of the array are passed 

107
00:05:56.630 --> 00:05:57.770
into this function 

108
00:05:58.540 --> 00:06:03.610
Total array size is 7 here and the size is the last index 

109
00:06:03.620 --> 00:06:06.460
of the array that is 7-1 which is 

110
00:06:06.460 --> 00:06:07.550
equal to 6

111
00:06:08.340 --> 00:06:11.350
And as we discussed the build_heap function will call 

112
00:06:11.350 --> 00:06:13.520
the heapify function from the bottom 

113
00:06:13.520 --> 00:06:14.180
most node

114
00:06:14.940 --> 00:06:17.760
In general we can get the bottom most node using 

115
00:06:17.760 --> 00:06:18.969
size by two 

116
00:06:19.740 --> 00:06:22.850
So this for loop will run from size by 2 

117
00:06:22.860 --> 00:06:26.670
to 0 that is bottom most sub tree root 

118
00:06:26.920 --> 00:06:30.330
to index zero that is top most sub tree root node

119
00:06:30.330 --> 00:06:30.640


120
00:06:31.540 --> 00:06:34.410
For every sub tree index it will call the 

121
00:06:34.410 --> 00:06:36.590
heapify function. So now 

122
00:06:36.620 --> 00:06:41.259
 size/ 2 is equal to 6/2 which is 3.

123
00:06:42.259 --> 00:06:42.259


124
00:06:42.259 --> 00:06:42.259


125
00:06:41.260 --> 00:06:46.530
So heapify function is called with index 3 along with the arr 

126
00:06:46.540 --> 00:06:47.929
and size 6

127
00:06:48.540 --> 00:06:51.969
So here index equal to 3 and size equal to 6

128
00:06:51.970 --> 00:06:52.490
 

129
00:06:53.440 --> 00:06:56.690
Let us first find the left and right child of 

130
00:06:56.700 --> 00:07:00.460
the node at this index. So left equal to  

131
00:07:00.460 --> 00:07:04.390
2*index+1 that is 2*3+1

132
00:07:04.390 --> 00:07:06.050
which is equal to 7 

133
00:07:06.740 --> 00:07:10.140
And now let us find the right child. right equal to

134
00:07:10.140 --> 00:07:13.280
to left+1 that is 7+1  

135
00:07:13.280 --> 00:07:14.450
which is equal to 8 

136
00:07:15.240 --> 00:07:18.690
Initially we keep the max and index at the same 

137
00:07:18.690 --> 00:07:19.350
index 

138
00:07:19.840 --> 00:07:24.000
If the max heap property is not satisfied Max Index will 

139
00:07:24.000 --> 00:07:24.830
be changed 

140
00:07:25.540 --> 00:07:29.260
If max and index still point to the same index after 

141
00:07:29.260 --> 00:07:33.190
the left and right value checking it means this subtree 

142
00:07:33.190 --> 00:07:34.910
obeys the max heap property 

143
00:07:35.150 --> 00:07:38.730
So whenever max is not equal to index swap the 

144
00:07:38.730 --> 00:07:41.730
element and call the heapify function with max 

145
00:07:41.730 --> 00:07:45.470
index again. Let's see how this works 

146
00:07:45.760 --> 00:07:50.500
So here max equal to index 3 now. Now check 

147
00:07:50.510 --> 00:07:53.849
if left and right child is greater than this node 

148
00:07:54.540 --> 00:07:57.770
So we have if left less than or equal to 

149
00:07:57.770 --> 00:08:01.950
size and arr[left] greater than arr[max] 

150
00:08:02.640 --> 00:08:06.550
But this fails as left 7 is not less than 

151
00:08:06.550 --> 00:08:10.810
or equal to size. So check the next if, 

152
00:08:10.820 --> 00:08:11.920
it also fails 

153
00:08:11.930 --> 00:08:15.700
Since right index 8 is also not less than or 

154
00:08:15.700 --> 00:08:16.710
equal to size 

155
00:08:17.440 --> 00:08:22.300
Now check if Max was updated. It hasn't. So if 

156
00:08:22.300 --> 00:08:23.480
failed again 

157
00:08:23.660 --> 00:08:27.609
And this function is completed now and control gets back 

158
00:08:27.610 --> 00:08:31.890
to build_heap function. Here in next iteration of the 

159
00:08:31.890 --> 00:08:35.709
for loop, i is equal to 2 and heapify

160
00:08:35.720 --> 00:08:40.400
is called by passing array arr. i equal to 2 and  

161
00:08:40.400 --> 00:08:41.430
size equal to 6

162
00:08:42.340 --> 00:08:45.810
So here in this function index equal to 2 and 

163
00:08:45.810 --> 00:08:47.229
size equal to 6

164
00:08:47.840 --> 00:08:51.060
Let us first find the left and right children of 

165
00:08:51.070 --> 00:08:52.690
node at this index 

166
00:08:53.240 --> 00:08:56.810
So left = 2*index+1 that is

167
00:08:56.810 --> 00:09:00.470
2*2+1 which is 5 and 

168
00:09:00.470 --> 00:09:03.550
right equal to left+1 that is 6

169
00:09:04.240 --> 00:09:08.050
And as we said initially, we keep the max and 

170
00:09:08.060 --> 00:09:09.850
index at the same position 

171
00:09:10.340 --> 00:09:13.390
So max equal to index 2 that is  

172
00:09:13.400 --> 00:09:17.949
we are assuming that this sub tree satisfies the heap property and 

173
00:09:17.960 --> 00:09:20.469
if any child is greater than parent 

174
00:09:20.480 --> 00:09:21.840
We update Max 

175
00:09:22.240 --> 00:09:25.819
And finally if max and index are different we have 

176
00:09:25.830 --> 00:09:27.650
to perform swap operation 

177
00:09:28.340 --> 00:09:30.350
So now max equal to  2

178
00:09:31.140 --> 00:09:35.100
Now check if left child is greater than this node 

179
00:09:35.210 --> 00:09:38.880
So we have if left less than or equal to size

180
00:09:38.880 --> 00:09:43.550
and arr[left] greater than arr[max] 

181
00:09:44.040 --> 00:09:48.650
And we have five less than size and 60 greater 

182
00:09:48.650 --> 00:09:49.530
than 40 

183
00:09:50.040 --> 00:09:54.079
The left child is greater than parent. So update Max 

184
00:09:54.740 --> 00:09:56.480
So max equal to left now

185
00:09:56.480 --> 00:09:58.660
that is index 5

186
00:09:59.440 --> 00:10:03.140
Now check if right child is greater than max 

187
00:10:03.450 --> 00:10:07.030
So we have if right less than or equal to size 

188
00:10:07.040 --> 00:10:10.590
and arr[right] greater than arr[max] 

189
00:10:11.740 --> 00:10:15.260
And we have six equal to size and 50 not 

190
00:10:15.270 --> 00:10:16.450
greater than 60 

191
00:10:17.240 --> 00:10:18.959
So it fails. And see, 

192
00:10:18.970 --> 00:10:22.150
Now we have the maximum value of this sub tree 

193
00:10:22.160 --> 00:10:22.950
at Max 

194
00:10:23.340 --> 00:10:26.280
So we have found the maximum value of this subtree 

195
00:10:26.280 --> 00:10:26.600


196
00:10:27.040 --> 00:10:29.230
Now we have to rearrange it. 

197
00:10:29.230 --> 00:10:29.770
So check 

198
00:10:29.860 --> 00:10:33.719
If max was updated, that is max was initially set 

199
00:10:33.720 --> 00:10:35.480
to index now check 

200
00:10:35.490 --> 00:10:38.530
If max and index are the same and it is 

201
00:10:38.530 --> 00:10:42.959
not. So if condition is true, so swap elements at 

202
00:10:42.960 --> 00:10:47.650
Max and Index that is 60 and 40 are swapped 

203
00:10:48.240 --> 00:10:51.080
so that the maximum element is now at the root 

204
00:10:51.080 --> 00:10:56.010
position. Again we need to check for the max heap property of the 

205
00:10:56.010 --> 00:10:57.100
swapped index 

206
00:10:57.390 --> 00:11:01.630
So call heapify again by passing array, max and 

207
00:11:01.630 --> 00:11:02.210
size 

208
00:11:02.940 --> 00:11:03.760
So here 

209
00:11:03.940 --> 00:11:07.150
index equal to 5 and size equal to 6 

210
00:11:07.740 --> 00:11:10.719
Let us first find the left and right children of 

211
00:11:10.730 --> 00:11:14.580
node at this index so left equal to  

212
00:11:14.580 --> 00:11:18.510
2*index+1 that is 2*5+1 

213
00:11:18.510 --> 00:11:21.510
which is 11 and right equal to 

214
00:11:21.510 --> 00:11:25.170
left+1 that is 12 and set max equal to index 

215
00:11:25.180 --> 00:11:26.420
that is 5 now 

216
00:11:27.140 --> 00:11:30.530
Now check if left and right child is greater than 

217
00:11:30.530 --> 00:11:31.150
this node 

218
00:11:31.740 --> 00:11:34.500
So we have if left less than or equal to 

219
00:11:34.500 --> 00:11:38.470
size and arr[left] greater than arr[max] 

220
00:11:39.040 --> 00:11:41.150
But this fails as left 

221
00:11:41.160 --> 00:11:43.930
11 is not less than or equal to size 6

222
00:11:43.940 --> 00:11:44.650


223
00:11:45.240 --> 00:11:48.810
So check the next if. It also fails since right 

224
00:11:48.810 --> 00:11:51.670
index 12 is also not less than or equal to size

225
00:11:51.670 --> 00:11:53.689
 now check 

226
00:11:53.700 --> 00:11:57.210
If Max was updated and it was not. So if 

227
00:11:57.210 --> 00:12:01.859
failed again and the function is completed and control gets 

228
00:12:01.860 --> 00:12:06.040
back to build heap function and here in next iteration 

229
00:12:06.360 --> 00:12:10.050
i is equal to 1 and heapify is called 

230
00:12:10.060 --> 00:12:14.380
by passing array arr, i equal to 1 and size equal to 6

231
00:12:14.380 --> 00:12:14.890
 

232
00:12:15.440 --> 00:12:19.270
So here index equal to 1 and size equal to 6

233
00:12:18.670 --> 00:12:19.270
 

234
00:12:19.270 --> 00:12:24.070
Now let us find the left and right children of node at this 

235
00:12:24.070 --> 00:12:24.680
Index 

236
00:12:25.440 --> 00:12:28.760
So left equal to 2*index+1 that is 

237
00:12:28.760 --> 00:12:32.140
2*1+1 which is 3 and right 

238
00:12:32.140 --> 00:12:34.550
equal to left+1 which is 4

239
00:12:35.440 --> 00:12:38.350
And as we said initially we will keep the max 

240
00:12:38.350 --> 00:12:40.130
and index at the same position 

241
00:12:40.540 --> 00:12:43.880
So Max equal to index 1. That is we are 

242
00:12:43.890 --> 00:12:47.450
assuming that this sub tree satisfies the heap property 

243
00:12:47.730 --> 00:12:52.329
And this value at this node is the maximum value 

244
00:12:52.380 --> 00:12:54.320
So now max equal to 1. 

245
00:12:54.380 --> 00:12:55.439
And now check

246
00:12:55.450 --> 00:12:57.910
If left child is greater than this node 

247
00:12:58.540 --> 00:13:01.790
And here we have three less than size and 30 

248
00:13:01.790 --> 00:13:03.010
greater than 20 

249
00:13:03.540 --> 00:13:06.830
That is the left child is greater than parent 

250
00:13:07.080 --> 00:13:11.070
So update max and max equal to left now. 

251
00:13:11.070 --> 00:13:15.680
that is 3. Now check if right child is greater than max 

252
00:13:16.140 --> 00:13:19.209
So we have if right less than or equal to size

253
00:13:19.210 --> 00:13:23.230
and arr[right] greater than arr[max] 

254
00:13:23.940 --> 00:13:26.490
and we have four less than size 

255
00:13:26.500 --> 00:13:29.969
So first condition is satisfied and next we have  

256
00:13:29.980 --> 00:13:31.400
80 greater than 30 

257
00:13:31.570 --> 00:13:33.550
So that is also satisfied 

258
00:13:33.940 --> 00:13:38.720
That is right child is greater than current max value so 

259
00:13:38.730 --> 00:13:40.050
it should be updated 

260
00:13:40.840 --> 00:13:45.130
So set max equal to right that is four and 

261
00:13:45.130 --> 00:13:45.490
see 

262
00:13:45.500 --> 00:13:48.650
Now we have the maximum value of this sub tree 

263
00:13:48.770 --> 00:13:50.640
at max.  

264
00:13:50.640 --> 00:13:51.080
Now check

265
00:13:51.090 --> 00:13:54.620
If Max was updated that is max was initially said 

266
00:13:54.630 --> 00:13:56.300
to index now check 

267
00:13:56.310 --> 00:13:59.949
If Max and index are the same and it is not 

268
00:14:00.540 --> 00:14:04.580
that means we have to perform swap operation since we 

269
00:14:04.580 --> 00:14:08.350
have found a greater element at child position 

270
00:14:08.940 --> 00:14:13.300
So swap elements at Max and Index that is 

271
00:14:13.310 --> 00:14:14.380
80 and 20 

272
00:14:14.840 --> 00:14:18.150
So now the maximum element is at the root position 

273
00:14:18.740 --> 00:14:21.650
Again we need to check for the max heap property of 

274
00:14:21.660 --> 00:14:25.930
the swapped index. So call heapify again by passing 

275
00:14:25.940 --> 00:14:30.510
array, max and size. So here index equal to 4

276
00:14:30.510 --> 00:14:32.780
 and size equal to 6

277
00:14:33.540 --> 00:14:37.230
Let us first find the left and right children of 

278
00:14:37.240 --> 00:14:41.340
the node at this index. So left equal to

279
00:14:41.350 --> 00:14:44.810
2*index+1 that is 2*4+1

280
00:14:45.000 --> 00:14:48.640
which is 9 and right equal to left+1 

281
00:14:48.690 --> 00:14:52.970
that is 10 and now set max equal to index 

282
00:14:52.980 --> 00:14:58.089
That is 4. Now check if any child is greater 

283
00:14:58.090 --> 00:14:59.020
than parent 

284
00:14:59.540 --> 00:15:02.449
So we have if left less than or equal to size

285
00:15:02.450 --> 00:15:06.450
and arr[left] greater than arr[max]

286
00:15:06.940 --> 00:15:08.730
But it fails as left 9

287
00:15:08.740 --> 00:15:12.470
is not less than or equal to size. 

288
00:15:12.470 --> 00:15:16.320
So check the next if it also fails since right index 10

289
00:15:16.320 --> 00:15:20.050
is also not less than or equal to size 

290
00:15:20.640 --> 00:15:21.220
Now check 

291
00:15:21.230 --> 00:15:24.480
If Max was updated and it was not. So it 

292
00:15:24.480 --> 00:15:28.600
fails and the function is now completely executed and control 

293
00:15:28.600 --> 00:15:30.550
gets back to build_heap function 

294
00:15:31.140 --> 00:15:35.970
And here in next iteration i is equal to zero and 

295
00:15:35.970 --> 00:15:39.140
heapify is called by passing arr

296
00:15:39.540 --> 00:15:42.460
i equal to zero and size equal to 6 

297
00:15:43.040 --> 00:15:46.880
So here index equal to 0 and size equal to 6

298
00:15:46.880 --> 00:15:48.520


299
00:15:48.520 --> 00:15:52.000
Let us first find the left and right child of node 

300
00:15:52.050 --> 00:15:55.820
At this index the left equal to 

301
00:15:55.820 --> 00:15:59.560
2*index+1 that is 2*0+1

302
00:15:59.560 --> 00:16:02.949
which is 1 and right equal to left+1

303
00:16:03.040 --> 00:16:03.949
that is 2

304
00:16:04.840 --> 00:16:07.900
And as we said first we are assuming that this 

305
00:16:07.900 --> 00:16:10.250
sub tree satisfies the heap property 

306
00:16:10.640 --> 00:16:14.050
So keep Max and index at the same position 

307
00:16:14.540 --> 00:16:17.329
And if any child is greater than parent we will 

308
00:16:17.340 --> 00:16:18.480
update Max 

309
00:16:19.040 --> 00:16:22.340
So finally if Max and index are different we have to 

310
00:16:22.340 --> 00:16:24.050
perform swap operation 

311
00:16:24.640 --> 00:16:26.850
So right now Max equal to zero 

312
00:16:27.540 --> 00:16:31.230
Now check if left child is greater than this node

313
00:16:31.490 --> 00:16:34.600
So we have if left less than or equal to size

314
00:16:34.600 --> 00:16:37.849
and arr[left] greater than max 

315
00:16:38.340 --> 00:16:41.580
And we have one less than size and 80 greater than 10

316
00:16:41.580 --> 00:16:46.040
 so left child is greater than parent so update max

317
00:16:46.040 --> 00:16:51.140
max equal to left now. that is 1. Now 

318
00:16:51.140 --> 00:16:54.540
check if right child is greater than Max. So we 

319
00:16:54.540 --> 00:16:58.310
have if right less than or equal to size and arr[right] 

320
00:16:58.310 --> 00:17:02.400
greater than arr[max] and we have 

321
00:17:02.750 --> 00:17:07.159
2 less than size but 60 is not greater than 80

322
00:17:06.580 --> 00:17:07.159
 

323
00:17:07.540 --> 00:17:11.180
So if fails and see now we have the maximum 

324
00:17:11.180 --> 00:17:13.899
value of this sub tree at max 

325
00:17:14.540 --> 00:17:19.630
Now check if max was updated. That is max was 

326
00:17:19.640 --> 00:17:24.020
initially set to index. Now check if max and index are 

327
00:17:24.020 --> 00:17:27.359
the same but max equal to 2 and index equal to 0

328
00:17:27.360 --> 00:17:29.660
 So it is not the same 

329
00:17:30.140 --> 00:17:34.220
So if condition is true now so swap elements at 

330
00:17:34.220 --> 00:17:37.590
Max and Index that is 80 and 10 

331
00:17:38.440 --> 00:17:42.590
Now the maximum element is at the root position. Again 

332
00:17:42.590 --> 00:17:45.240
we need to check for the max heap property for the 

333
00:17:45.240 --> 00:17:46.350
swapped index 

334
00:17:46.840 --> 00:17:50.490
So call heapify again by passing array, max 

335
00:17:50.500 --> 00:17:51.200
and size 

336
00:17:51.740 --> 00:17:55.220
So here index equal to 1 and size equal to 6

337
00:17:55.220 --> 00:17:55.700


338
00:17:56.440 --> 00:17:57.370
Now let us find

339
00:17:57.370 --> 00:18:00.220
the left and right child of the node at this 

340
00:18:00.220 --> 00:18:04.120
index. So left equal to 2*index+1

341
00:18:04.130 --> 00:18:07.429
that is 2*1+1 which is 3

342
00:18:07.440 --> 00:18:10.950
and right equal to left+1 that is 4 

343
00:18:11.840 --> 00:18:15.860
now set max equal to index That is 1. 

344
00:18:15.860 --> 00:18:19.320
Now check if left and right child is greater than this node

345
00:18:19.320 --> 00:18:23.090
So we have if left less than or equal 

346
00:18:23.090 --> 00:18:27.209
to size and arr[left] greater than arr[max ]

347
00:18:27.840 --> 00:18:31.430
and left 3 is less than size and arr[left] 30

348
00:18:31.430 --> 00:18:36.370
is greater than arr[max] 10. So update 

349
00:18:36.370 --> 00:18:39.510
Max. That is set Max to left that is 3

350
00:18:40.340 --> 00:18:41.770
now check the right child 

351
00:18:41.910 --> 00:18:46.209
We have right 4 less than size

352
00:18:46.210 --> 00:18:50.950
 but arr[right] 20 is not greater than arr[max] 30 

353
00:18:51.340 --> 00:18:53.540
So if fails. Now check 

354
00:18:53.550 --> 00:18:57.290
If Max was updated and it was. So swap elements 

355
00:18:57.300 --> 00:19:00.760
at Max and Index and again we need to check

356
00:19:00.760 --> 00:19:03.699
for max heap property for the swapped index 

357
00:19:04.540 --> 00:19:05.460
So call heapify 

358
00:19:05.460 --> 00:19:09.160
 again by passing array, max and size 

359
00:19:10.040 --> 00:19:13.110
So here index equal to 3 and size equal to 6

360
00:19:13.110 --> 00:19:13.629


361
00:19:14.540 --> 00:19:17.520
Now let us find the left and right child of the 

362
00:19:17.520 --> 00:19:17.940
node 

363
00:19:17.950 --> 00:19:21.879
At this index the left equal to 2*index+1

364
00:19:21.880 --> 00:19:24.540
 that is 2*3+1 which 

365
00:19:24.540 --> 00:19:27.970
is 7 and right equal to left+1 that 

366
00:19:27.970 --> 00:19:31.530
is 8 and set max equal to index 

367
00:19:31.530 --> 00:19:35.770
That is 3 now. Now check if left and right child 

368
00:19:35.780 --> 00:19:37.380
is greater than this node 

369
00:19:38.140 --> 00:19:42.890
But if fails as left 7 is not less than or equal 

370
00:19:42.890 --> 00:19:46.120
to size and the next if also fails 

371
00:19:46.130 --> 00:19:50.200
Since right Index 8 is also not less than or 

372
00:19:50.200 --> 00:19:55.270
equal to size and the next if also fails

373
00:19:55.270 --> 00:20:00.190
Since max was not updated. So the function is completed now 

374
00:20:00.200 --> 00:20:03.300
and control gets back to build_heap and in the 

375
00:20:03.300 --> 00:20:07.939
next iteration i equal to -1 and the condition 

376
00:20:07.950 --> 00:20:11.260
i greater than or equal to zero fails and control comes 

377
00:20:11.270 --> 00:20:12.190
out of the for loop

378
00:20:12.190 --> 00:20:13.530
 and see 

379
00:20:13.540 --> 00:20:17.960
Now this complete tree exactly satisfies the max heap property 

380
00:20:18.740 --> 00:20:22.639
The maximum Element 80 is present at the root and 

381
00:20:22.650 --> 00:20:26.260
every sub tree's root value is maximum of its children 

382
00:20:27.140 --> 00:20:29.800
So that is how we can construct a binary heap 

383
00:20:29.810 --> 00:20:30.610
from an array

384
00:20:31.240 --> 00:20:33.400
We learned how to construct a heap

385
00:20:33.410 --> 00:20:36.550
We have to find the bottom most sub tree and 

386
00:20:36.550 --> 00:20:39.090
from the bottom most sub tree to top 

387
00:20:39.110 --> 00:20:43.040
We have to check and satisfy the heap property. 

388
00:20:43.170 --> 00:20:44.170
that is for Max heap

389
00:20:44.180 --> 00:20:47.230
The parent should be greater than its children and for 

390
00:20:47.230 --> 00:20:47.940
Min heap 

391
00:20:47.940 --> 00:20:51.600
The parent should be smaller than its children and we 

392
00:20:51.610 --> 00:20:53.760
also learned how to implement it 

393
00:20:54.080 --> 00:20:56.920
And in implementation we have two functions 

394
00:20:57.440 --> 00:21:00.610
First is build_heap which will call the heapify

395
00:21:00.610 --> 00:21:04.200
function to satisfy the heap property from the bottom most

396
00:21:04.200 --> 00:21:07.960
node and the heapify function will find the 

397
00:21:07.960 --> 00:21:11.120
left and right nodes and arranges it based on the 

398
00:21:11.120 --> 00:21:12.050
heap property 

399
00:21:12.840 --> 00:21:16.170
And finally we will have the complete tree which satisfies 

400
00:21:16.170 --> 00:21:17.560
the heap property 

401
00:21:17.650 --> 00:21:20.590
So that's all and in the next video we will 

402
00:21:20.590 --> 00:21:24.160
learn how to remove the max element from the constructed heap. 

