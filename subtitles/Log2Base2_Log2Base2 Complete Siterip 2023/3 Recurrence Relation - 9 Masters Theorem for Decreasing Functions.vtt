WEBVTT

1
00:00:00.100 --> 00:00:03.140
In this video, let us learn about the masters theorem 

2
00:00:03.140 --> 00:00:04.690
for decreasing functions 

3
00:00:05.040 --> 00:00:08.850
The masters theorem provides generalized ways to solve recurrence 

4
00:00:08.850 --> 00:00:13.220
relations. Using masters theorem we can instantly tell the 

5
00:00:13.230 --> 00:00:16.840
time complexity of any recurrence relation and let us see 

6
00:00:16.840 --> 00:00:17.320
how 

7
00:00:17.330 --> 00:00:20.440
Let us write the general form of recurrence relation of 

8
00:00:20.450 --> 00:00:25.020
decreasing function T(n) equal to aT(n-b) + f(n)

9
00:00:25.020 --> 00:00:29.200
 were a is greater than zero 

10
00:00:29.210 --> 00:00:31.010
and b is greater than zero 

11
00:00:31.600 --> 00:00:33.210
We have three cases here 

12
00:00:33.470 --> 00:00:37.730
First is one a is less than zero for example  

13
00:00:37.730 --> 00:00:41.530
T(n) equal to 0.5T(n-1) + 1 

14
00:00:41.540 --> 00:00:45.920
 or T(n) equal to 0.75T(n-1) + n 

15
00:00:45.920 --> 00:00:46.770


16
00:00:46.770 --> 00:00:50.300
And next case is when n equal to one 

17
00:00:50.570 --> 00:00:53.450
For example  

18
00:00:53.450 --> 00:00:54.210
T(n) equal to T(n-1) + 1 

19
00:00:54.220 --> 00:00:57.270
or T(n) equal to T(n-1) + n^2  

20
00:00:57.270 --> 00:01:01.370
And in the final cases when 

21
00:01:01.750 --> 00:01:03.230
a is greater than one 

22
00:01:03.510 --> 00:01:06.590
For example T(n) equal to 3T(n-1) + 1  

23
00:01:06.590 --> 00:01:10.030
or T(n) equal to 

24
00:01:10.030 --> 00:01:13.750
2T(n-2) + n

25
00:01:13.750 --> 00:01:17.240
 first when A is Less than zero 

26
00:01:17.250 --> 00:01:20.110
What does it mean It means there is no recursion 

27
00:01:20.110 --> 00:01:23.830
This case won't occur in algorithm analysis 

28
00:01:24.210 --> 00:01:26.530
If there is no recursion we don't need to 

29
00:01:26.530 --> 00:01:28.230
bother about the recursion part 

30
00:01:28.520 --> 00:01:31.500
So whatever the time present in the second part that 

31
00:01:31.500 --> 00:01:34.620
is f(n) is the total time complexity 

32
00:01:34.850 --> 00:01:37.610
So for this one O(1) is the 

33
00:01:37.610 --> 00:01:38.220
answer 

34
00:01:38.230 --> 00:01:41.320
And for this one O(1) is the answer 

35
00:01:41.980 --> 00:01:45.410
In general we can say that when a is less than 

36
00:01:45.410 --> 00:01:50.370
zero the total time complexitiy is f(n). Now let us 

37
00:01:50.370 --> 00:01:53.050
solve the next case when a equal to one 

38
00:01:53.350 --> 00:01:55.520
Then it's just T(n-1) 

39
00:01:56.090 --> 00:01:58.800
We already know that T(n-k) will 

40
00:01:58.810 --> 00:02:00.550
take n units of time 

41
00:02:01.200 --> 00:02:04.330
So for this one we just need to multiply n

42
00:02:04.330 --> 00:02:08.100
with whatever time is present in the second part here 

43
00:02:08.100 --> 00:02:11.810
the second part is f(n) So for this one

44
00:02:11.810 --> 00:02:14.880
n*1 that is O(n) is the answer 

45
00:02:15.070 --> 00:02:18.500
And for this one the time complexity is n*n^2

46
00:02:18.500 --> 00:02:20.990
 that is O(n^3) 

47
00:02:21.030 --> 00:02:24.360
So in general, we can say that when n equal to 

48
00:02:24.360 --> 00:02:28.060
one the total time complexity is n*f(n)

49
00:02:28.060 --> 00:02:28.360


50
00:02:28.710 --> 00:02:32.200
Similarly when n is greater than one we can say the 

51
00:02:32.200 --> 00:02:35.840
total time complexity is O(a raised to n/b * f(n)) 

52
00:02:35.850 --> 00:02:37.130


53
00:02:37.560 --> 00:02:41.090
For example let us take this recurrence relation  

54
00:02:41.100 --> 00:02:44.560
T(n) equal to 3T(n-1) + 1 

55
00:02:44.920 --> 00:02:48.410
here the value of a is 3 and the value of 

56
00:02:48.420 --> 00:02:49.490
b is i

57
00:02:49.850 --> 00:02:51.850
And f(n) is equal to one 

58
00:02:52.210 --> 00:02:56.190
Let us calculate the time complexity with this formula a raised  

59
00:02:56.190 --> 00:03:00.310
to n/b into f(n) here substitute values of 

60
00:03:00.320 --> 00:03:01.700
a, b and f(n) 

61
00:03:01.700 --> 00:03:04.980
 we will get 3 raised to n/1 

62
00:03:05.120 --> 00:03:05.930
into 1

63
00:03:06.300 --> 00:03:08.610
That is O(3^n)

64
00:03:09.410 --> 00:03:13.530
Similarly for this recurrence relation the value of a is 2

65
00:03:13.540 --> 00:03:16.490
and the value of b is 2 and f(n)

66
00:03:16.500 --> 00:03:17.560
equal to n 

67
00:03:17.570 --> 00:03:20.990
So total time complexity will be 

68
00:03:20.990 --> 00:03:22.320
2^(n/2) * n

69
00:03:22.720 --> 00:03:26.590
That is O(n*2^(n/2))

70
00:03:26.600 --> 00:03:29.660
 and that it. This is the masters theorem 

71
00:03:29.660 --> 00:03:32.460
for recurrence relations of decreasing functions 

72
00:03:32.590 --> 00:03:35.880
The theorem is if the general form of recurrence elation 

73
00:03:35.880 --> 00:03:40.080
of decreasing function T(n) is a*T(n-b) + f(n)

74
00:03:40.090 --> 00:03:44.175
 then T(n) is 

75
00:03:44.305 --> 00:03:48.745
O(f(n)) when a is less than one and 

76
00:03:48.745 --> 00:03:52.175
T(n) is O(n*f(n)) when 

77
00:03:52.185 --> 00:03:55.615
a equal to one and T(n) equal to 

78
00:03:55.625 --> 00:03:58.875
O(a^(n/b)*f(n))

79
00:03:59.015 --> 00:04:01.435
when value of a is greater than one 

80
00:04:01.895 --> 00:04:05.525
Thats it. This is the generalised and simplest way to 

81
00:04:05.525 --> 00:04:07.155
Solve a recurrence relation 

82
00:04:07.600 --> 00:04:11.490
Try practising more recurrence relation using masters theorem and 

83
00:04:11.490 --> 00:04:14.160
thats all for this video. In the next video we will 

84
00:04:14.160 --> 00:04:17.610
learn how to solve recurrence relation of dividing functions.

