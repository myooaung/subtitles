WEBVTT

1
00:00:00.340 --> 00:00:01.290
in this video 

2
00:00:01.300 --> 00:00:05.840
Let us learn about nested recursion a recursive function is 

3
00:00:05.840 --> 00:00:10.950
nested recursive If the argument passed to it is that 

4
00:00:10.960 --> 00:00:12.950
recursive function itself 

5
00:00:13.340 --> 00:00:16.260
See here the recursive call fun has 

6
00:00:16.260 --> 00:00:19.250
the argument fun of n plus K 

7
00:00:19.740 --> 00:00:23.860
So as the name suggests it's recursion Inside recursion 

8
00:00:23.860 --> 00:00:28.790
Let's take an example programme and understand how nested 

9
00:00:28.790 --> 00:00:29.860
recursion works 

10
00:00:30.640 --> 00:00:33.950
Here we have a function fun defined and 

11
00:00:33.950 --> 00:00:37.680
see it has the recursive call fun of 

12
00:00:37.840 --> 00:00:39.950
fun of n plus two 

13
00:00:40.440 --> 00:00:43.380
See here the recursive called fun has the 

14
00:00:43.380 --> 00:00:44.420
same function 

15
00:00:44.420 --> 00:00:46.250
Call as the argument 

16
00:00:46.940 --> 00:00:49.950
Let us see how this nested recursion works here 

17
00:00:50.640 --> 00:00:52.930
So suppose n is equal to six 

18
00:00:53.440 --> 00:00:57.150
So if will fail since N is not greater than 

19
00:00:57.150 --> 00:01:01.860
ten so it will return function of function of n plus 

20
00:01:01.860 --> 00:01:06.220
two that is six plus two that is function of 

21
00:01:06.220 --> 00:01:07.550
function of eight 

22
00:01:08.440 --> 00:01:12.020
So fun is called with argument fun

23
00:01:12.020 --> 00:01:16.570
of eight see this is Nested recursion so function 

24
00:01:16.570 --> 00:01:20.320
of eight will execute and here also if will 

25
00:01:20.320 --> 00:01:20.870
fail 

26
00:01:20.970 --> 00:01:25.260
So it returns function of function of eight plus two 

27
00:01:25.270 --> 00:01:26.150
that is 10 

28
00:01:26.740 --> 00:01:28.940
So function of 10 will execute 

29
00:01:29.140 --> 00:01:33.390
And here also if will fail so it returns function 

30
00:01:33.390 --> 00:01:36.680
of function of 10 plus two that is function of 

31
00:01:36.690 --> 00:01:39.310
12 and in function of 12 

32
00:01:39.530 --> 00:01:44.040
If conditions n greater than 10 is satisfied so it 

33
00:01:44.040 --> 00:01:47.230
returns n minus one that is a eleven 

34
00:01:47.470 --> 00:01:50.660
So here this function of 12 returned 11 

35
00:01:50.670 --> 00:01:54.150
So we got function of 11 now that will be 

36
00:01:54.150 --> 00:01:54.960
executed 

37
00:01:55.180 --> 00:01:57.460
And if condition is true here 

38
00:01:57.560 --> 00:02:00.850
So it returns 11 minus one which is 10 

39
00:02:01.310 --> 00:02:05.590
So this whole function returns 10th and here we got 

40
00:02:05.590 --> 00:02:09.760
function of 10 so function of 10 will get executed 

41
00:02:10.040 --> 00:02:14.610
and their if will fail so it returns function of 

42
00:02:14.620 --> 00:02:18.190
function of 10 plus 2 that is 12 And as 

43
00:02:18.190 --> 00:02:22.710
we got earlier function of 12 will return 11 And 

44
00:02:22.710 --> 00:02:26.970
here this function of 11 will return 10 So this 

45
00:02:26.970 --> 00:02:31.200
whole function will return 10 And this function will also 

46
00:02:31.200 --> 00:02:32.540
return this 10 

47
00:02:32.690 --> 00:02:36.230
And here we got function of 10 and as we 

48
00:02:36.230 --> 00:02:40.120
got previously we will get function of function of 12 

49
00:02:40.380 --> 00:02:44.900
were function of 12 will return 11 and function of 

50
00:02:44.910 --> 00:02:49.400
11 will return 10 So this function returns 10 

51
00:02:49.630 --> 00:02:53.510
And finally our function of six will return this value 

52
00:02:53.510 --> 00:02:53.870
10 

53
00:02:54.110 --> 00:02:56.110
So this is what Nested recursion 

54
00:02:56.120 --> 00:02:56.570
is  

55
00:02:56.680 --> 00:02:59.770
We will have recursive function call with same 

56
00:02:59.770 --> 00:03:00.270
function 

57
00:03:00.270 --> 00:03:03.650
Call as the argument and this is how it works.

