WEBVTT

1
00:00:00.040 --> 00:00:00.930
in this video 

2
00:00:01.060 --> 00:00:03.650
Let us learn how to represent the disjoint set 

3
00:00:03.650 --> 00:00:05.150
data structure in an array 

4
00:00:05.640 --> 00:00:09.130
First let us take 10 elements from number 0 to 

5
00:00:09.130 --> 00:00:13.200
9 and assume each element as a unique subset to 

6
00:00:13.200 --> 00:00:16.230
represent it in the array let us create an array of 

7
00:00:16.230 --> 00:00:17.050
size 10 

8
00:00:17.540 --> 00:00:20.660
First let us initialise The array to minus one 

9
00:00:21.140 --> 00:00:25.050
here minus indicates that it is the head or root 

10
00:00:25.060 --> 00:00:29.710
element of this subset and one indicates that each subset 

11
00:00:29.780 --> 00:00:31.550
has only one element 

12
00:00:32.240 --> 00:00:36.790
For example this particular index indicates that two is the 

13
00:00:36.790 --> 00:00:38.690
root element of this subset 

14
00:00:38.990 --> 00:00:42.450
And this subset has only one element that is two 

15
00:00:42.840 --> 00:00:43.990
Here all indices

16
00:00:43.990 --> 00:00:45.870
are marked as minus one 

17
00:00:46.040 --> 00:00:49.350
So it means every element is a unique subset 

18
00:00:49.940 --> 00:00:53.900
Now let us perform the union operation on elements one 

19
00:00:53.970 --> 00:00:54.550
and two 

20
00:00:55.140 --> 00:00:58.300
Union means we need to connect the two sets for 

21
00:00:58.300 --> 00:00:58.720
that 

22
00:00:58.790 --> 00:01:01.080
We need to pick one of the elements as the

23
00:01:01.080 --> 00:01:02.640
root node here 

24
00:01:02.690 --> 00:01:07.260
Both indices one and two have values as minus one 

25
00:01:07.480 --> 00:01:11.150
which means both subsets has only one element 

26
00:01:11.640 --> 00:01:14.870
So we can pick any node as root let us 

27
00:01:14.870 --> 00:01:17.800
pick two as a root node and connect one with 

28
00:01:17.810 --> 00:01:21.470
two to connect one with two just marked the value 

29
00:01:21.470 --> 00:01:22.540
of index one 

30
00:01:22.580 --> 00:01:27.000
As two now Index one has a positive value which 

31
00:01:27.000 --> 00:01:29.750
means it is no longer a root element 

32
00:01:30.140 --> 00:01:32.050
Index one has a valued two 

33
00:01:32.440 --> 00:01:35.750
It means that parent of Element one is two 

34
00:01:36.340 --> 00:01:40.050
In other words Element one is connected with element two 

35
00:01:40.840 --> 00:01:44.260
Now we need to update the root element here 

36
00:01:44.270 --> 00:01:46.190
Index two is the root element 

37
00:01:46.500 --> 00:01:48.130
Now it has two elements 

38
00:01:48.220 --> 00:01:52.550
Numbers one and two so we can mark it as minus two 

39
00:01:52.940 --> 00:01:56.090
Here minus indicates that it is the root node of 

40
00:01:56.100 --> 00:02:00.410
this subset and two indicates that this subset has two 

41
00:02:00.410 --> 00:02:04.360
elements that is elements one and two here the important 

42
00:02:04.360 --> 00:02:05.300
thing to notice 

43
00:02:05.510 --> 00:02:08.790
A negative number indicates that the particular element is the 

44
00:02:08.790 --> 00:02:12.860
root element and positive element indicates that the particular element 

45
00:02:12.870 --> 00:02:15.860
is not a root element whereas it is connected with 

46
00:02:15.860 --> 00:02:17.050
some other element 

47
00:02:17.740 --> 00:02:20.850
Now let us perform Union on Elements three and four 

48
00:02:21.540 --> 00:02:24.740
here both indices three and four have values 

49
00:02:24.750 --> 00:02:25.750
as minus one 

50
00:02:26.240 --> 00:02:29.840
Hence both the elements are root elements and each subset 

51
00:02:29.850 --> 00:02:31.450
has only one element 

52
00:02:31.940 --> 00:02:35.050
So let us pick number four as the root node and 

53
00:02:35.050 --> 00:02:38.100
connect element three with four for that 

54
00:02:38.240 --> 00:02:38.870
just mark 

55
00:02:38.870 --> 00:02:40.750
The value four in index three 

56
00:02:41.240 --> 00:02:43.850
Now we have connected element three with four 

57
00:02:44.440 --> 00:02:46.850
Now we need to update the parent node 

58
00:02:47.240 --> 00:02:49.550
Here Index four is the parent node 

59
00:02:49.840 --> 00:02:51.670
It has a value as minus one 

60
00:02:52.140 --> 00:02:54.570
But this subset now has two elements 

61
00:02:54.820 --> 00:02:57.250
So change it to minus two and that's it 

62
00:02:58.040 --> 00:03:02.330
Now let us union the elements four and seven here 

63
00:03:02.400 --> 00:03:05.330
The value of index four is minus two and the 

64
00:03:05.330 --> 00:03:07.620
value of Index seven is minus one 

65
00:03:07.940 --> 00:03:10.290
We need to pick the parent node among these two 

66
00:03:10.290 --> 00:03:10.960
elements 

67
00:03:11.360 --> 00:03:14.720
Since Element four has the higher value we can pick 

68
00:03:14.730 --> 00:03:18.270
element four as the parent node here we're choosing the 

69
00:03:18.270 --> 00:03:21.120
parent not based on its weight so we can call 

70
00:03:21.120 --> 00:03:22.450
this weighted union 

71
00:03:22.840 --> 00:03:26.080
So as usual connect seven with four by updating the 

72
00:03:26.080 --> 00:03:29.900
index seven value as four and then we need to 

73
00:03:29.900 --> 00:03:32.850
update the value of parent node which is four here 

74
00:03:33.240 --> 00:03:35.520
Subset four has two nodes already 

75
00:03:35.700 --> 00:03:38.810
Now we have added one more node so change it 

76
00:03:38.810 --> 00:03:43.480
to minus three here minus indicates that index four is a 

77
00:03:43.480 --> 00:03:46.920
parent node and three indicates that the subset has three 

78
00:03:46.930 --> 00:03:47.530
elements 

79
00:03:47.790 --> 00:03:52.570
That is four three and seven now let us Union The 

80
00:03:52.570 --> 00:03:56.420
elements three and eight The value of index eight is minus 

81
00:03:56.420 --> 00:03:56.750
one 

82
00:03:57.140 --> 00:04:00.500
Since it has a negative number Element eight is the 

83
00:04:00.500 --> 00:04:01.250
parent node 

84
00:04:01.640 --> 00:04:04.290
But the value of index three is four it is 

85
00:04:04.290 --> 00:04:07.350
not a parent node as it has a positive value 

86
00:04:07.740 --> 00:04:10.870
So to connect three and eight first we need to 

87
00:04:10.870 --> 00:04:14.720
find a parent node of element three index three has value 

88
00:04:14.720 --> 00:04:18.600
four it means that the parent node of element three is 

89
00:04:18.600 --> 00:04:19.130
four 

90
00:04:19.340 --> 00:04:21.860
So go to index four and check its value 

91
00:04:22.180 --> 00:04:25.330
It has minus three So it is a negative number 

92
00:04:25.400 --> 00:04:29.430
So element four is a parent node of element three here 

93
00:04:29.650 --> 00:04:31.850
element three is not a parent node 

94
00:04:32.040 --> 00:04:34.740
So in this case we need to compare the value 

95
00:04:34.740 --> 00:04:38.660
of indices four and eight to pick the Parent node the 

96
00:04:38.660 --> 00:04:41.940
value of index four is minus three and the value of 

97
00:04:41.950 --> 00:04:43.720
index eight is minus one 

98
00:04:43.860 --> 00:04:47.470
Here Element four has a higher number of nodes so 

99
00:04:47.470 --> 00:04:49.900
we need to pick four as the parent node and 

100
00:04:49.900 --> 00:04:53.000
connect Element eight with three to connect 

101
00:04:53.010 --> 00:04:56.340
Element eight with three just place the value three in 

102
00:04:56.350 --> 00:04:57.250
index eight 

103
00:04:57.840 --> 00:05:00.530
Now we need to update the parent node which is 

104
00:05:00.530 --> 00:05:01.350
four here 

105
00:05:01.740 --> 00:05:04.250
Subset four has three nodes already 

106
00:05:04.260 --> 00:05:06.460
Now we have added one more node 

107
00:05:06.680 --> 00:05:09.250
So changed it to minus four and that's it 

108
00:05:10.040 --> 00:05:13.010
So the logic of union operation is very simple 

109
00:05:13.110 --> 00:05:16.470
Find the parent node of each element next compare the 

110
00:05:16.470 --> 00:05:19.590
values based on weight and pick the parent node and 

111
00:05:19.590 --> 00:05:22.490
then connect the nodes and update the value of parent 

112
00:05:22.490 --> 00:05:23.980
node so let us 

113
00:05:23.980 --> 00:05:26.370
Quickly implement the weighted Union function 

114
00:05:26.650 --> 00:05:30.630
First let us write the void weighted union function which 

115
00:05:30.630 --> 00:05:34.860
takes three arguments the set array and two elements U 

116
00:05:34.870 --> 00:05:39.350
and V so write int arr int U int V

117
00:05:40.140 --> 00:05:42.690
Next we need to find the parent node of each 

118
00:05:42.700 --> 00:05:43.310
element 

119
00:05:43.450 --> 00:05:46.400
So write int parent of U equal to find of 

120
00:05:46.400 --> 00:05:49.650
U and int parent of V equal to find of V 

121
00:05:50.140 --> 00:05:53.630
as we discussed earlier the find operation will return the 

122
00:05:53.630 --> 00:05:55.610
parent node of the given element 

123
00:05:55.890 --> 00:05:58.950
We will implement the find operation in the next video 

124
00:05:59.340 --> 00:06:02.360
As of now just assumed the find function will return 

125
00:06:02.360 --> 00:06:04.210
The parent node of each element 

126
00:06:04.440 --> 00:06:06.750
We have found the parents of each node 

127
00:06:07.140 --> 00:06:09.980
Now we need to compare the values of parent node 

128
00:06:09.990 --> 00:06:13.560
and picked the new parent node So write if array 

129
00:06:13.560 --> 00:06:15.890
of parent of U less than array of parent of 

130
00:06:15.900 --> 00:06:17.450
V and else block 

131
00:06:18.140 --> 00:06:22.220
We're making parent Node as negative value so the smaller value 

132
00:06:22.230 --> 00:06:24.090
will contain higher number of nodes 

133
00:06:24.240 --> 00:06:28.190
For example if array of parent of U is minus three and 

134
00:06:28.200 --> 00:06:31.510
array of parent of three minus one then array of 

135
00:06:31.510 --> 00:06:34.170
parent of U has the higher number of nodes 

136
00:06:34.360 --> 00:06:36.850
So we need to make array of parent of U 

137
00:06:37.040 --> 00:06:38.450
as the new root node 

138
00:06:39.040 --> 00:06:41.900
So in the if part we need to make array 

139
00:06:41.900 --> 00:06:44.700
of parent of U as root node and in the 

140
00:06:44.700 --> 00:06:47.440
else part we need to make array of parent of 

141
00:06:47.440 --> 00:06:48.750
V as the root node 

142
00:06:49.140 --> 00:06:52.680
Now let us implement a connecting logic in the if 

143
00:06:52.680 --> 00:06:55.950
part first let us update the root node value 

144
00:06:56.150 --> 00:06:59.060
If we connect two parents the new root node will 

145
00:06:59.060 --> 00:07:00.710
have some of all nodes 

146
00:07:00.960 --> 00:07:03.740
So write array of parent of U equal to array 

147
00:07:03.740 --> 00:07:06.450
of parent of U plus array of parent of V 

148
00:07:07.140 --> 00:07:11.250
here we are storing a new some value in array of 

149
00:07:11.250 --> 00:07:13.920
parent of U as it has the higher number of 

150
00:07:13.930 --> 00:07:17.230
nodes and then we need to connect array of parent 

151
00:07:17.230 --> 00:07:20.420
of V with the new root node here the root 

152
00:07:20.420 --> 00:07:23.940
node index is U So write array of parent of V  

153
00:07:23.940 --> 00:07:27.830
equal to U If the programme execution reaches the else 

154
00:07:27.830 --> 00:07:30.920
part which means parent of V has a higher number 

155
00:07:30.920 --> 00:07:33.930
of nodes we need to update the value of parent 

156
00:07:33.930 --> 00:07:37.280
of V so write array of parent of V equal 

157
00:07:37.280 --> 00:07:40.040
to array of parent of V plus array of parent 

158
00:07:40.040 --> 00:07:40.650
of U 

159
00:07:41.340 --> 00:07:43.750
And then we need to connect array of parent of 

160
00:07:43.750 --> 00:07:46.890
U with the new root node here the root node 

161
00:07:46.890 --> 00:07:50.620
index is V so write array of parent of U equal 

162
00:07:50.620 --> 00:07:54.440
to V That's it we have implemented logic for weighted 

163
00:07:54.440 --> 00:07:58.020
union function Now let us perform one more union operation 

164
00:07:58.020 --> 00:08:01.870
To understand the code better let us perform union operation 

165
00:08:01.880 --> 00:08:05.680
on elements one and eight Here the value of U 

166
00:08:05.690 --> 00:08:08.350
is one and the value of V is eight 

167
00:08:08.840 --> 00:08:11.790
Next we need to find a parent index of both 

168
00:08:11.800 --> 00:08:15.850
U and V first find a parent node of one 

169
00:08:16.240 --> 00:08:17.280
at index one 

170
00:08:17.450 --> 00:08:21.120
We have value as two which means one is not 

171
00:08:21.120 --> 00:08:24.150
a parent node and it is connected with element two 

172
00:08:24.540 --> 00:08:27.040
So go to index two and check its value 

173
00:08:27.120 --> 00:08:29.770
It's minus two it has a negative number 

174
00:08:29.770 --> 00:08:32.910
So it is a parent node so parent node element 

175
00:08:32.920 --> 00:08:34.350
one is two 

176
00:08:34.840 --> 00:08:37.150
Now find a parent node of eight 

177
00:08:37.420 --> 00:08:40.730
So the parent node of Element eight is four we 

178
00:08:40.730 --> 00:08:43.600
have found the index of parent of U and parent 

179
00:08:43.600 --> 00:08:47.310
of V Now we need to compare which one has 

180
00:08:47.310 --> 00:08:48.650
higher number of nodes 

181
00:08:49.040 --> 00:08:51.740
The value present in array of parent of U that 

182
00:08:51.740 --> 00:08:54.780
is array of two is minus two and the value 

183
00:08:54.780 --> 00:08:57.440
present in array of parent of V that is array 

184
00:08:57.440 --> 00:09:01.370
of four is minus four so it will check minus 

185
00:09:01.370 --> 00:09:03.820
two less than minus four which is false 

186
00:09:03.960 --> 00:09:07.520
So the control will reach the else part here 

187
00:09:07.530 --> 00:09:11.290
First the parent node will be updated array of parent 

188
00:09:11.290 --> 00:09:13.820
of V equal to array of parent of V plus 

189
00:09:13.830 --> 00:09:17.770
array of parent of U array of four equal to minus 

190
00:09:17.770 --> 00:09:20.950
four plus minus two which will become minus six 

191
00:09:21.220 --> 00:09:23.680
So the total number of nodes in the new set 

192
00:09:23.680 --> 00:09:24.660
will be six 

193
00:09:24.870 --> 00:09:25.650
Next we need 

194
00:09:25.650 --> 00:09:28.980
To connect these two nodes array of parent of you 

195
00:09:28.990 --> 00:09:31.910
equal to V that is array of two equal to 

196
00:09:31.920 --> 00:09:32.400
eight 

197
00:09:32.600 --> 00:09:35.390
So the value eight will be placed at array of 

198
00:09:35.400 --> 00:09:35.650
two 

199
00:09:36.440 --> 00:09:40.100
Here we aim to connect one and eight so let us check 

200
00:09:40.100 --> 00:09:43.580
Whether it is connected or not one is connected with 

201
00:09:43.590 --> 00:09:45.850
two and two is connected with eight 

202
00:09:46.240 --> 00:09:49.210
Eight is connected with four and index four has a 

203
00:09:49.210 --> 00:09:50.110
negative value 

204
00:09:50.120 --> 00:09:51.450
So it is a root node 

205
00:09:51.840 --> 00:09:55.200
So here elements one and eight are connected to the 

206
00:09:55.200 --> 00:09:59.430
same parent node four hence the elements one and eight 

207
00:09:59.440 --> 00:10:00.950
are connected to each other 

208
00:10:01.540 --> 00:10:05.010
Here we haven't directly connected elements one and eight 

209
00:10:05.120 --> 00:10:08.450
We have indirectly connected elements one and eight 

210
00:10:08.940 --> 00:10:09.530
So that's all 

211
00:10:09.530 --> 00:10:12.510
For this video In this video we have learned how 

212
00:10:12.520 --> 00:10:15.950
to represent disjoint set in an array and implemented 

213
00:10:15.950 --> 00:10:17.250
the union operation 

214
00:10:17.940 --> 00:10:20.650
In the next video we will learn how to implement 

215
00:10:20.650 --> 00:10:23.750
the find operation and  isConnected operation.

