WEBVTT

1
00:00:00.240 --> 00:00:03.710
let us see the code for this declare variable Start 

2
00:00:03.720 --> 00:00:07.130
mid and end for a given number n we will 

3
00:00:07.130 --> 00:00:07.920
search for it 

4
00:00:07.920 --> 00:00:11.750
Square root from one to n divided by two initialise 

5
00:00:11.750 --> 00:00:14.650
start to one and end to n Divided by two 

6
00:00:15.040 --> 00:00:17.950
We are going to do a binary search here Hence 

7
00:00:18.100 --> 00:00:21.910
we shall add this while condition while start less than 

8
00:00:21.910 --> 00:00:25.810
or equal to end in eight iteration First we will 

9
00:00:25.810 --> 00:00:29.350
find mid by doing start plus and divided by two 

10
00:00:29.740 --> 00:00:32.820
Then we will check If mid Indo mid is equal 

11
00:00:32.820 --> 00:00:36.090
to end If yes we have found the square root 

12
00:00:36.100 --> 00:00:37.560
hence we can return it 

13
00:00:37.810 --> 00:00:41.720
So add this if conditions is mid into mid equal 

14
00:00:41.720 --> 00:00:44.900
to end return mid If it is not equal to 

15
00:00:44.900 --> 00:00:47.880
end then check if mid into mid is less than 

16
00:00:47.890 --> 00:00:48.270
end 

17
00:00:48.550 --> 00:00:50.860
If it is we have to continue a search in 

18
00:00:50.860 --> 00:00:54.310
the second half so right start equal to mid plus 

19
00:00:54.310 --> 00:00:55.640
one else 

20
00:00:55.690 --> 00:00:59.350
We have to search in first half so add the statement 

21
00:00:59.360 --> 00:01:02.800
end equal to mid minus one in else block for 

22
00:01:02.800 --> 00:01:06.480
perfect square number it's square root would get returned here 

23
00:01:06.490 --> 00:01:09.560
in any one of the iteration and for non perfect 

24
00:01:09.560 --> 00:01:10.470
square numbers 

25
00:01:10.570 --> 00:01:13.700
The answer will be pointed by end index once the 

26
00:01:13.700 --> 00:01:18.330
iterations gets over so write return end after the while 

27
00:01:18.330 --> 00:01:18.740
loop 

28
00:01:18.890 --> 00:01:22.110
So what if our given input zero or one for 

29
00:01:22.110 --> 00:01:24.800
both these numbers square root of it will be the 

30
00:01:24.800 --> 00:01:25.750
number itself 

31
00:01:26.140 --> 00:01:28.850
Hence we have to add this condition at the top if n is less than two return n.

