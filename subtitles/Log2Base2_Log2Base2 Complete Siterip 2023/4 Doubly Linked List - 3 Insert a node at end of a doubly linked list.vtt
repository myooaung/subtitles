WEBVTT

1
00:00:00.240 --> 00:00:01.190
in this video 

2
00:00:01.200 --> 00:00:04.040
Let us discuss how to insert a node at the 

3
00:00:04.050 --> 00:00:04.720
end of 

4
00:00:04.720 --> 00:00:05.900
doubly linked list 

5
00:00:06.040 --> 00:00:08.570
So here the new node will be inserted at 

6
00:00:08.570 --> 00:00:10.410
the end of the doubly linked list 

7
00:00:10.700 --> 00:00:15.040
For example we have this linked list 10 20 30 

8
00:00:15.310 --> 00:00:18.660
Now if we insert a new node 100 it will 

9
00:00:18.660 --> 00:00:20.520
be inserted at the end 

10
00:00:20.530 --> 00:00:22.870
And we will get the new doubly linked List 

11
00:00:22.880 --> 00:00:23.670
Like this 

12
00:00:24.010 --> 00:00:26.030
10 20 30 100 

13
00:00:26.250 --> 00:00:28.650
Now let us see how to insert a new node 

14
00:00:28.650 --> 00:00:29.450
at the end 

15
00:00:29.840 --> 00:00:31.630
Here we will have two cases 

16
00:00:31.770 --> 00:00:34.510
The first case is when the doubly linked list is 

17
00:00:34.520 --> 00:00:35.050
empty 

18
00:00:35.640 --> 00:00:38.910
Then the new node inserted will be the only node 

19
00:00:39.000 --> 00:00:40.550
and it becomes the head node 

20
00:00:41.100 --> 00:00:44.400
The second cases when the doubly linked list is not 

21
00:00:44.410 --> 00:00:46.880
empty and it has some nodes in it 

22
00:00:47.540 --> 00:00:50.710
So we need to traverse the linked list to find 

23
00:00:50.710 --> 00:00:54.240
the last node and then insert the new node after 

24
00:00:54.240 --> 00:00:55.450
that last node 

25
00:00:55.840 --> 00:00:58.460
Now let us see the Java programme to insert a 

26
00:00:58.460 --> 00:01:01.320
new node at the end of it doubly linked list 

27
00:01:01.380 --> 00:01:03.930
So this is the function which will add the new 

28
00:01:03.930 --> 00:01:06.810
node at the end and we will pass the value 

29
00:01:06.810 --> 00:01:08.320
to be added to the function 

30
00:01:08.390 --> 00:01:11.400
Add last and it will create a new node with 

31
00:01:11.400 --> 00:01:14.950
that value and inserted at the end of the list 

32
00:01:15.240 --> 00:01:16.920
So we have public 

33
00:01:16.930 --> 00:01:22.040
void add last of int Val let us See how it works 

34
00:01:22.310 --> 00:01:25.710
So here first we have an empty doubly linked list 

35
00:01:25.770 --> 00:01:29.120
So head is equal to not let us now insert 

36
00:01:29.130 --> 00:01:32.150
a new node with value 10 to this list 

37
00:01:32.540 --> 00:01:36.410
So we will call this function add last by passing the 

38
00:01:36.410 --> 00:01:39.450
value 10 So val will be equal to 10 

39
00:01:40.140 --> 00:01:41.780
Now let us see what happens 

40
00:01:42.020 --> 00:01:45.640
First we need to create a new node using new 

41
00:01:45.640 --> 00:01:46.410
operator 

42
00:01:46.750 --> 00:01:50.950
So write node new node equal to new node 

43
00:01:51.640 --> 00:01:54.970
So we have a new node created at address 1000 

44
00:01:55.220 --> 00:01:57.450
Now add the data to the data part 

45
00:01:57.840 --> 00:02:01.560
So write new node dot data equal to val So 

46
00:02:01.560 --> 00:02:03.670
10 is added to the data part 

47
00:02:03.870 --> 00:02:06.960
Now if the doubly linked list is empty the new 

48
00:02:06.960 --> 00:02:09.730
node will be the only node and it becomes the 

49
00:02:09.730 --> 00:02:10.150
head 

50
00:02:10.540 --> 00:02:13.750
Otherwise we need to find the last node of the 

51
00:02:13.750 --> 00:02:17.350
list and in certain new node after the last node 

52
00:02:17.840 --> 00:02:21.680
So check it write If head equal to null and 

53
00:02:21.680 --> 00:02:23.440
here Head is equal to null 

54
00:02:23.820 --> 00:02:27.900
So if will return to true that is this new node 

55
00:02:27.910 --> 00:02:30.360
will be the only node in this list 

56
00:02:30.430 --> 00:02:34.080
So it's next and prev should point to null so 

57
00:02:34.080 --> 00:02:37.670
set new node dot prev equal to null and new 

58
00:02:37.670 --> 00:02:40.820
node dot next equal to null Now the next step 

59
00:02:40.830 --> 00:02:44.950
is to make this node the head so write head 

60
00:02:44.960 --> 00:02:46.150
equal to new node 

61
00:02:46.740 --> 00:02:50.600
So the head has the address 1000 now and points 

62
00:02:50.600 --> 00:02:53.760
to this new node So now we have a doubly 

63
00:02:53.760 --> 00:02:55.750
linked list with one node 

64
00:02:56.020 --> 00:02:59.740
Now let us insert another node with value 20 to this 

65
00:02:59.740 --> 00:03:00.260
list 

66
00:03:00.470 --> 00:03:04.750
So first call the functions add last by passing the value 

67
00:03:04.750 --> 00:03:08.690
20 And this function will now create a new node 

68
00:03:08.700 --> 00:03:09.850
using new 

69
00:03:09.900 --> 00:03:13.390
So a new node is created at address 2000 like 

70
00:03:13.390 --> 00:03:17.370
this Now at the value 20 to the data part So 

71
00:03:17.370 --> 00:03:21.380
write new node dot data equal to val So 20 

72
00:03:21.390 --> 00:03:24.420
is added here so the new node is ready to 

73
00:03:24.420 --> 00:03:25.290
be inserted 

74
00:03:25.640 --> 00:03:29.050
So now we need to find where to insert it 

75
00:03:29.340 --> 00:03:32.760
So first check if the doubly linked list is empty 

76
00:03:32.770 --> 00:03:35.450
but it is not so go to the else part 

77
00:03:35.940 --> 00:03:38.820
so the doubly linked list is not empty so the 

78
00:03:38.820 --> 00:03:42.210
new node should be inserted after the last node 

79
00:03:42.410 --> 00:03:45.630
And for that we have to find the last node 

80
00:03:45.770 --> 00:03:49.130
And for the last node it's next will be pointing 

81
00:03:49.140 --> 00:03:49.750
to null 

82
00:03:50.320 --> 00:03:51.140
So we have to 

83
00:03:51.140 --> 00:03:54.180
iterate the linked list till the next part of 

84
00:03:54.190 --> 00:03:55.510
the node is null 

85
00:03:55.530 --> 00:03:59.150
So create a temporary node last to find the last 

86
00:03:59.150 --> 00:04:01.920
node and we should start from the head till we 

87
00:04:01.920 --> 00:04:03.230
reach the end 

88
00:04:03.240 --> 00:04:08.410
So initialised last to head So write node last equal 

89
00:04:08.410 --> 00:04:10.650
to head now for traversing the list 

90
00:04:10.660 --> 00:04:11.610
We need a while 

91
00:04:11.610 --> 00:04:16.460
loop so write while last next not equal to null 

92
00:04:16.820 --> 00:04:20.610
and in each iteration last it's moved one place to 

93
00:04:20.610 --> 00:04:23.980
the right by this line of code last equal to 

94
00:04:23.990 --> 00:04:25.550
last dot next 

95
00:04:25.560 --> 00:04:29.160
But here we have last pointing to head and it's 

96
00:04:29.160 --> 00:04:32.570
next is equal to null so condition will fail in 

97
00:04:32.570 --> 00:04:34.150
first iteration itself 

98
00:04:34.440 --> 00:04:37.390
It is because we have only one node in this 

99
00:04:37.390 --> 00:04:37.880
list 

100
00:04:37.890 --> 00:04:41.320
So last node and head node is the same node 

101
00:04:41.430 --> 00:04:44.670
and while loop is terminated here and now 

102
00:04:44.680 --> 00:04:47.670
Last points to the last node which is the head 

103
00:04:47.670 --> 00:04:51.020
here so we have last not pointed by last 

104
00:04:51.250 --> 00:04:54.350
So insert the new node after the last node 

105
00:04:54.540 --> 00:04:57.750
So make this last node point to a new node 

106
00:04:58.140 --> 00:05:02.840
So write last dot next equal to new node Now 

107
00:05:02.850 --> 00:05:06.540
New nodes prev should point the current last node 

108
00:05:06.660 --> 00:05:11.160
so write new node prev equal to last and finally 

109
00:05:11.160 --> 00:05:13.460
set new node next equal to null 

110
00:05:13.570 --> 00:05:16.490
So the new node is inserted at the end of 

111
00:05:16.500 --> 00:05:17.370
this list 

112
00:05:17.380 --> 00:05:20.320
Now let us see another example that has insert another 

113
00:05:20.320 --> 00:05:22.040
node with value 30 

114
00:05:22.050 --> 00:05:25.120
So first create the node using new 

115
00:05:25.130 --> 00:05:28.160
So the node is created at Address 3000 

116
00:05:28.160 --> 00:05:31.210
Like this now add the value 30 at the data 

117
00:05:31.210 --> 00:05:32.600
part Now check 

118
00:05:32.610 --> 00:05:35.540
If the doubly linked list is empty but it is 

119
00:05:35.540 --> 00:05:38.210
not so go to the else part now 

120
00:05:38.220 --> 00:05:41.180
The new node should be inserted after the last node 

121
00:05:41.360 --> 00:05:42.220
so we have to 

122
00:05:42.220 --> 00:05:44.850
iterate the linked list to find the last node 

123
00:05:44.860 --> 00:05:48.390
and then insert the new node after the last node 

124
00:05:48.400 --> 00:05:52.030
So first create the temporary node last and initialised it 

125
00:05:52.030 --> 00:05:52.650
to head 

126
00:05:53.440 --> 00:05:57.080
Now we have the while loop and in first iteration last 

127
00:05:57.080 --> 00:06:01.490
is pointing to node at 1000 it's next is not 

128
00:06:01.500 --> 00:06:02.220
equal to null 

129
00:06:02.380 --> 00:06:05.010
So last equal to last dot Next 

130
00:06:05.030 --> 00:06:09.260
So last now points to the node at 2000 and 

131
00:06:09.270 --> 00:06:11.140
it's next is equal to null 

132
00:06:11.260 --> 00:06:14.450
So the condition fails in the next iteration and the 

133
00:06:14.450 --> 00:06:18.480
loop will terminate and now last is pointing to the 

134
00:06:18.480 --> 00:06:19.490
last node 

135
00:06:19.600 --> 00:06:23.080
So make this last node point to our new node 

136
00:06:23.340 --> 00:06:26.850
So write last dot next equal to new node 

137
00:06:27.040 --> 00:06:29.350
That is the node at 3000 

138
00:06:29.540 --> 00:06:33.200
Now new nodes prev should point the current last node 

139
00:06:33.330 --> 00:06:37.330
So write new node prev equal to last and finally 

140
00:06:37.330 --> 00:06:39.760
set new nodes next equal to null 

141
00:06:40.020 --> 00:06:42.840
So the new node is inserted at the end of 

142
00:06:42.850 --> 00:06:43.700
this list 

143
00:06:43.710 --> 00:06:46.270
Now let us talk about the time complexity to 

144
00:06:46.270 --> 00:06:49.580
find the last node we have to traverse the entire 

145
00:06:49.580 --> 00:06:50.280
linked list 

146
00:06:50.290 --> 00:06:53.220
And for that order of n time is needed 

147
00:06:53.240 --> 00:06:56.050
And to insert we need order of one time 

148
00:06:56.060 --> 00:06:59.250
So insertion at the end of a list takes order n time

