WEBVTT

1
00:00:00.040 --> 00:00:03.830
so in the implementation let us write a function 

2
00:00:03.830 --> 00:00:05.650
isbalanced to do the job 

3
00:00:06.340 --> 00:00:10.190
We will pass the pointer to expression str into this 

4
00:00:10.190 --> 00:00:15.110
function and the function will be returning an integer.

5
00:00:15.120 --> 00:00:18.810
First we should scan every character of the string till we reach 

6
00:00:18.820 --> 00:00:19.850
a null character 

7
00:00:20.430 --> 00:00:24.110
And if it is an opening bracket then push it into 

8
00:00:24.110 --> 00:00:24.790
the stack.

9
00:00:24.980 --> 00:00:29.810
First declare integer variable i now write for i equal to zero 

10
00:00:29.810 --> 00:00:34.410
str[i], i++. So this condition 

11
00:00:34.410 --> 00:00:38.330
will fail when we reach null character and in each 

12
00:00:38.330 --> 00:00:39.740
iteration check

13
00:00:39.750 --> 00:00:41.560
If it is an opening bracket 

14
00:00:41.860 --> 00:00:46.100
So write if str[i] equal to opening round 

15
00:00:46.100 --> 00:00:52.330
bracket or str[i] equal to opening square bracket or 

16
00:00:52.340 --> 00:00:56.540
str[i] equal to opening curly bracket then 

17
00:00:56.550 --> 00:01:00.840
push it into the stack. So write push str[i]

18
00:01:00.850 --> 00:01:05.840
Now if the scanned character is a closing bracket 

19
00:01:06.110 --> 00:01:11.390
then perform pop operation and check if popped opening bracket

20
00:01:11.390 --> 00:01:17.720
 matches the scanned closing bracket. So write else 

21
00:01:17.720 --> 00:01:21.560
char top equal to pop. Let us check if it is not 

22
00:01:21.560 --> 00:01:26.820
matching. So write if str[i] equal to opening 

23
00:01:26.820 --> 00:01:32.370
round bracket and top not equal to closing round bracket 

24
00:01:32.620 --> 00:01:37.750
or str[i] equal to opening square bracket and 

25
00:01:38.140 --> 00:01:43.200
top not equal to closing square bracket or str[i] 

26
00:01:43.210 --> 00:01:48.290
equal to opening curly bracket and top not equal 

27
00:01:48.290 --> 00:01:50.250
to closing curly bracket.

28
00:01:50.710 --> 00:01:55.840
Then the parenthesis is unbalanced so return zero and suppose 

29
00:01:55.850 --> 00:01:59.250
we have a closing bracket at first before an 

30
00:01:59.260 --> 00:02:03.470
opening in an expression that if will fail and in 

31
00:02:03.480 --> 00:02:07.710
else we have to consider that condition too. So check 

32
00:02:07.720 --> 00:02:11.670
if stack is empty then return zero as it is 

33
00:02:11.680 --> 00:02:12.790
unbalanced.

34
00:02:13.210 --> 00:02:16.760
And finally if any opening bracket it is left in 

35
00:02:16.760 --> 00:02:21.090
the stack it means it was not balanced by closing 

36
00:02:21.100 --> 00:02:25.410
So we can check if the stack is empty and 

37
00:02:25.420 --> 00:02:28.450
if it is, then we have balanced parenthesis 

38
00:02:28.620 --> 00:02:32.130
Otherwise we have unbalanced parenthesis 

39
00:02:32.320 --> 00:02:35.750
So write return isStackEmpty 

