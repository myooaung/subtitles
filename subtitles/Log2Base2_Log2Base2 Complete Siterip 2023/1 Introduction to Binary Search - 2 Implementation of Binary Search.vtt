WEBVTT

1
00:00:00.140 --> 00:00:01.110
in this video 

2
00:00:01.220 --> 00:00:04.680
Let us see the implementation of binary search see this 

3
00:00:04.680 --> 00:00:14.010
example array with elements 10 23 45 70 100 111 and 

4
00:00:14.010 --> 00:00:15.530
123 suppose 

5
00:00:15.540 --> 00:00:18.150
We want to search for the key 45 

6
00:00:18.540 --> 00:00:21.050
So as we did for the book we will first 

7
00:00:21.050 --> 00:00:22.750
find the middle element 

8
00:00:23.240 --> 00:00:24.580
We have eight elements 

9
00:00:24.690 --> 00:00:27.560
So the fourth one is the middle one which is 

10
00:00:27.570 --> 00:00:28.460
70 

11
00:00:28.690 --> 00:00:30.140
It is not the key 

12
00:00:30.150 --> 00:00:33.730
And now we have to check if our key is 

13
00:00:33.730 --> 00:00:35.750
less than or greater than 70 

14
00:00:36.340 --> 00:00:39.570
And it is 45 less than 70 

15
00:00:39.760 --> 00:00:42.830
So it could only be present in the left half 

16
00:00:43.000 --> 00:00:47.350
So search here only and ignored the second half again 

17
00:00:47.450 --> 00:00:48.640
In this half 

18
00:00:48.650 --> 00:00:52.800
The middle one is the second element 23 again check 

19
00:00:52.810 --> 00:00:57.080
Whether 45 is less than or greater than 23 it 

20
00:00:57.080 --> 00:00:58.550
is greater than 23 

21
00:00:58.940 --> 00:01:01.070
So check in the right half only 

22
00:01:01.080 --> 00:01:04.080
And here we have one element and it is our key 

23
00:01:04.130 --> 00:01:06.350
So this is what binary search is 

24
00:01:06.740 --> 00:01:09.250
Now let us see it's implementation in C 

25
00:01:09.840 --> 00:01:13.060
So we have the function binary search here which will 

26
00:01:13.060 --> 00:01:17.210
take the array its start end and the key to be 

27
00:01:17.210 --> 00:01:20.620
searched into it and it will return one if the 

28
00:01:20.620 --> 00:01:23.740
key is found and it will return zero if it is 

29
00:01:23.740 --> 00:01:24.580
not found 

30
00:01:25.640 --> 00:01:29.380
So we passed this array It start index zero and 

31
00:01:29.390 --> 00:01:34.040
end index seven and key 45 into the function and 

32
00:01:34.040 --> 00:01:35.550
declare a variable mid 

33
00:01:36.140 --> 00:01:39.190
And we have this While loop here which will divide 

34
00:01:39.190 --> 00:01:42.280
the array into half till we find the key or 

35
00:01:42.280 --> 00:01:43.720
the array is completed 

36
00:01:43.930 --> 00:01:47.290
And when the key is found one is return And when 

37
00:01:47.290 --> 00:01:51.580
the array is completely checked this condition start less than end 

38
00:01:51.580 --> 00:01:54.920
will fail and control comes out of the loop and 

39
00:01:54.920 --> 00:01:55.290
returns 

40
00:01:55.300 --> 00:02:00.420
Zero so let us see in first iteration start zero is less 

41
00:02:00.420 --> 00:02:01.950
than end seventh 

42
00:02:02.340 --> 00:02:04.870
So go inside and find the middle element 

43
00:02:04.980 --> 00:02:09.240
So we have mid equal to start plus end divided 

44
00:02:09.240 --> 00:02:10.110
by two 

45
00:02:10.280 --> 00:02:13.080
That is zero plus seven by two 

46
00:02:13.090 --> 00:02:14.950
Which is three now check 

47
00:02:14.960 --> 00:02:16.950
If the middle element is the key 

48
00:02:17.340 --> 00:02:20.840
So we have if arr of mid equal to key 

49
00:02:20.850 --> 00:02:23.730
and it is not the check whether we should search 

50
00:02:23.740 --> 00:02:25.960
in the left half or the right half 

51
00:02:25.970 --> 00:02:29.580
So we have if arr of mid less than key and 

52
00:02:29.580 --> 00:02:33.890
it is not so 70 is actually greater than 45 so 

53
00:02:33.890 --> 00:02:37.670
we should only check in the left half so start 

54
00:02:37.680 --> 00:02:38.620
should be the same 

55
00:02:38.620 --> 00:02:43.150
Index zero but end should be mid minus one 

56
00:02:44.040 --> 00:02:47.580
So in else we have end equal to mid minus 

57
00:02:47.580 --> 00:02:50.310
one that is three minus one which is equal to 

58
00:02:50.310 --> 00:02:50.750
two 

59
00:02:51.640 --> 00:02:52.720
Now check The condition 

60
00:02:52.730 --> 00:02:56.530
Again we have start zero less than end two 

61
00:02:56.740 --> 00:02:58.190
So the condition is okay 

62
00:02:58.190 --> 00:03:01.330
So go inside and find the new middle element 

63
00:03:01.540 --> 00:03:05.270
So we have mid equal to start plus and divided 

64
00:03:05.270 --> 00:03:08.980
by two that is zero plus two divided by two 

65
00:03:08.980 --> 00:03:12.800
which is equal to one So check If middle element 

66
00:03:12.810 --> 00:03:16.950
is a key and we have arr of mid equal to 

67
00:03:16.950 --> 00:03:20.270
key but it is not so Next step is to 

68
00:03:20.270 --> 00:03:23.220
find the half were key could be present 

69
00:03:23.360 --> 00:03:26.880
So check if arr of mid is less than key 

70
00:03:26.890 --> 00:03:29.480
and 23 is less than 45 

71
00:03:29.490 --> 00:03:32.910
So we should check in the right half only so 

72
00:03:32.920 --> 00:03:36.260
end will be the same But start should be mid 

73
00:03:36.260 --> 00:03:36.950
plus one 

74
00:03:37.440 --> 00:03:39.880
so start equal to one plus one which is 

75
00:03:39.880 --> 00:03:44.080
equal to two Now Check the while condition and two 

76
00:03:44.090 --> 00:03:45.300
is equal to two 

77
00:03:45.330 --> 00:03:46.770
So the condition is okay 

78
00:03:46.780 --> 00:03:49.150
So find the new middle element 

79
00:03:49.790 --> 00:03:53.500
It is two plus two divided by two which is 

80
00:03:53.510 --> 00:03:58.170
two now check if middle element equal to key and it 

81
00:03:58.170 --> 00:04:01.650
is so returned one as the key is found 

82
00:04:02.240 --> 00:04:03.630
This is how it works 

83
00:04:03.640 --> 00:04:07.540
And always remember binary search will work only for sorted 

84
00:04:07.540 --> 00:04:08.150
arrays 

85
00:04:08.840 --> 00:04:11.710
Now in the same array let us search for the key 

86
00:04:11.720 --> 00:04:12.580
150 

87
00:04:13.140 --> 00:04:16.640
So first find mid which will be zero plus seven 

88
00:04:16.640 --> 00:04:21.590
divided by two that is three now Chek if middle 

89
00:04:21.600 --> 00:04:24.890
element is the key and it is not so check 

90
00:04:24.900 --> 00:04:27.560
whether to go to left side or right side 

91
00:04:27.940 --> 00:04:31.890
So we have If arr of mid less than key 

92
00:04:31.900 --> 00:04:34.150
and 70 is less than 150 

93
00:04:34.640 --> 00:04:37.640
So we should check in the right half so end 

94
00:04:37.640 --> 00:04:40.540
will be the same but start will be mid plus 

95
00:04:40.540 --> 00:04:42.870
one that is three plus one which is equal to 

96
00:04:42.870 --> 00:04:47.150
four Now check the while condition and start four is 

97
00:04:47.150 --> 00:04:48.580
less than end seven 

98
00:04:48.720 --> 00:04:51.730
So go inside and find the new mid which is 

99
00:04:51.740 --> 00:04:56.050
four plus seven divided by two that is 11 by two 

100
00:04:56.060 --> 00:04:57.450
which is equal to five 

101
00:04:58.240 --> 00:05:02.370
So middle element is that index five So check If 

102
00:05:02.380 --> 00:05:03.350
it is the key 

103
00:05:03.740 --> 00:05:04.570
So we have 

104
00:05:04.720 --> 00:05:07.880
If arr of mid equal to key and it is 

105
00:05:07.880 --> 00:05:11.990
not so check if arr of mid is less than key 

106
00:05:12.160 --> 00:05:14.450
and 100 is less than 150 

107
00:05:14.940 --> 00:05:18.440
So if the element is present it could only be 

108
00:05:18.440 --> 00:05:20.050
present in the right half 

109
00:05:20.440 --> 00:05:24.520
so set start equal to mid plus one that is five 

110
00:05:24.520 --> 00:05:27.700
plus one which is equal to six now check the 

111
00:05:27.700 --> 00:05:30.250
condition and six is less than seven 

112
00:05:30.660 --> 00:05:33.350
So go inside and find the new mid 

113
00:05:33.900 --> 00:05:37.500
And it will be six plus seven divided by two 

114
00:05:37.510 --> 00:05:40.570
That is 13 by two which is equal to six 

115
00:05:41.040 --> 00:05:42.950
So check if it is the key 

116
00:05:43.340 --> 00:05:46.910
So we have if arr of mid equal to key 

117
00:05:46.920 --> 00:05:49.940
and it is not so check whether to go to 

118
00:05:49.940 --> 00:05:51.680
left site or right side 

119
00:05:52.140 --> 00:05:56.540
And we have If arr of mid less than key and 

120
00:05:56.540 --> 00:06:00.240
111 is less than 150 so it could be 

121
00:06:00.250 --> 00:06:01.930
present in the right half 

122
00:06:01.940 --> 00:06:06.280
Only so set start equal to mid plus one that is 

123
00:06:06.470 --> 00:06:10.340
six plus one which is equal to seven and check 

124
00:06:10.340 --> 00:06:13.370
The wild condition in seven is equal to seven 

125
00:06:13.550 --> 00:06:14.360
So condition is okay 

126
00:06:14.360 --> 00:06:17.880
So go inside and find mid which will 

127
00:06:17.880 --> 00:06:20.820
be seven plus seven divided by two 

128
00:06:20.940 --> 00:06:23.310
That is seven so 

129
00:06:23.310 --> 00:06:26.250
check if that is a key and it is not 

130
00:06:26.640 --> 00:06:29.450
so check whether to go to left or right 

131
00:06:29.840 --> 00:06:30.650
So we have 

132
00:06:30.810 --> 00:06:34.090
If arr of mid less than key and 123 

133
00:06:34.090 --> 00:06:38.440
is less than 150 so 150 could 

134
00:06:38.450 --> 00:06:40.850
only be present in the right side 

135
00:06:41.440 --> 00:06:45.690
So set start equal to mid plus one that is seven 

136
00:06:45.690 --> 00:06:49.210
plus one which is equal to eight now chek the 

137
00:06:49.210 --> 00:06:53.180
while condition and eight is not less than or equal 

138
00:06:53.180 --> 00:06:53.750
to seven 

139
00:06:54.140 --> 00:06:55.850
So the condition fails 

140
00:06:56.640 --> 00:07:00.910
It simply means we have completed checking the array and now 

141
00:07:00.920 --> 00:07:03.850
there is no chance that the key is present in 

142
00:07:03.850 --> 00:07:04.270
the array 

143
00:07:04.940 --> 00:07:08.580
so control comes out of the while loop and returns zero 

144
00:07:08.750 --> 00:07:10.550
as the key is not found.

