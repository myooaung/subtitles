WEBVTT

1
00:00:00.040 --> 00:00:00.820
Hi friends 

2
00:00:00.830 --> 00:00:06.480
In this video we are going to discuss about declaration and initialisation of 2D arrays.

3
00:00:10.480 --> 00:00:12.000
First let us see 

4
00:00:12.010 --> 00:00:14.100
how to initialise all the elements 

5
00:00:14.440 --> 00:00:17.910
So we have int arr[3][3] So we are declaring 

6
00:00:17.910 --> 00:00:20.669
an integer array with three rows and three columns 

7
00:00:20.740 --> 00:00:23.350
And we're directly assigning values like this 

8
00:00:23.740 --> 00:00:27.460
Just write the values separated by commas within curly braces 

9
00:00:27.580 --> 00:00:30.890
So the array will be created with these values like 

10
00:00:30.890 --> 00:00:31.350
this 

11
00:00:31.940 --> 00:00:35.019
Now we can even initialise the array row wise 

12
00:00:35.030 --> 00:00:37.709
So all we need to do is each row Values 

13
00:00:37.720 --> 00:00:41.349
should be separately enclosed in curly braces and resultant

14
00:00:41.350 --> 00:00:43.790
array is still going to be the same now let us

15
00:00:43.790 --> 00:00:46.660
 see how to initialise elements one by one 

16
00:00:46.670 --> 00:00:50.210
So after declaring the we can specify each index and 

17
00:00:50.210 --> 00:00:53.780
assign values to it. here we have arr[0][0] = 1

18
00:00:53.780 --> 00:00:54.589
 

19
00:00:55.740 --> 00:00:58.519
So in Row 0 column 0 value 1 will be 

20
00:00:58.520 --> 00:01:02.610
assigned similarly here in row 1 column 1 value 5

21
00:01:02.610 --> 00:01:06.020
will be assigned and after each line here gets executed 

22
00:01:06.060 --> 00:01:09.340
we will get our array like this. now let us see 

23
00:01:09.340 --> 00:01:12.550
how to initialise an array using a for loop.Here 

24
00:01:12.560 --> 00:01:15.390
we have declared the array and along with that we have 

25
00:01:15.390 --> 00:01:18.720
created two variables for row and for column and we 

26
00:01:18.720 --> 00:01:21.360
are going to use a nested for loop here. now 

27
00:01:21.370 --> 00:01:24.660
in our first for loop we are initialising row =0

28
00:01:24.670 --> 00:01:27.220
and it should run while row is less than 3 and 

29
00:01:27.220 --> 00:01:30.450
after each iteration increment row Now in the second for loop

30
00:01:30.450 --> 00:01:34.540
we are initialising col = 0 and it should run while 

31
00:01:34.540 --> 00:01:39.690
colless than 3 and after each iteration increment col 

32
00:01:40.040 --> 00:01:42.750
So in the first iteration of outer loop and inner 

33
00:01:42.750 --> 00:01:46.539
loop we will get row =0 and col = 0. in the second 

34
00:01:46.540 --> 00:01:50.140
iteration of inner loop we will get row 0 and col 1 In the 

35
00:01:50.150 --> 00:01:53.050
third iteration of inner loop we will get row 0 and

36
00:01:53.060 --> 00:01:56.940
col 2. In the fourth iteration condition fails and control 

37
00:01:56.940 --> 00:02:00.580
comes out of for loop and first iteration of outer 

38
00:02:00.580 --> 00:02:04.380
loop gets completed. In the second iteration of outer loop 

39
00:02:04.390 --> 00:02:07.200
and first iteration of inner loop we get row = 1

40
00:02:07.200 --> 00:02:09.010
and col = 0

41
00:02:09.740 --> 00:02:12.500
In the second iteration of inner loop we will get 

42
00:02:12.510 --> 00:02:14.530
row = 1 and col = 1

43
00:02:14.530 --> 00:02:17.490
In the third iteration of inner loop we get 

44
00:02:17.500 --> 00:02:19.360
row = 1 and col = 2

45
00:02:19.360 --> 00:02:22.870
In the fourth iteration condition fails and control comes 

46
00:02:22.880 --> 00:02:25.380
out of the for loop. And the second iteration of 

47
00:02:25.380 --> 00:02:26.930
outer loop gets completed 

48
00:02:27.940 --> 00:02:30.290
Now in the third iteration of the outer loop and 

49
00:02:30.290 --> 00:02:32.990
in first iteration of inner loop we get row =2 

50
00:02:32.990 --> 00:02:34.970
and col =0

51
00:02:35.170 --> 00:02:38.010
In the second iteration of inner loop we get  

52
00:02:38.010 --> 00:02:39.930
row=2 and col =1

53
00:02:40.300 --> 00:02:42.480
And in the third iteration of inner loop we get 

54
00:02:42.480 --> 00:02:44.640
row=2 and col =2

55
00:02:44.640 --> 00:02:44.950


56
00:02:45.340 --> 00:02:48.240
In the fourth iteration the condition fails and control comes 

57
00:02:48.240 --> 00:02:49.430
out of the inner for loop

58
00:02:50.040 --> 00:02:53.310
And the third iteration of outer loop also gets completed 

59
00:02:53.320 --> 00:02:56.240
And in the fourth iteration condition fails and control comes 

60
00:02:56.240 --> 00:02:57.019
out of the loop. 

61
00:02:57.310 --> 00:02:59.660
So this is how we can access each item in 

62
00:02:59.660 --> 00:03:00.170
an array

63
00:03:00.180 --> 00:03:02.829
We just saw we can access each location in the 

64
00:03:02.830 --> 00:03:04.690
array using this nested for loop.

65
00:03:04.700 --> 00:03:07.049
So let us see a programme to read elements to 

66
00:03:07.050 --> 00:03:08.420
this array and print it

67
00:03:09.140 --> 00:03:12.360
So this is the programme. We declare the array, the variables 

68
00:03:12.360 --> 00:03:13.660
row and col 

69
00:03:13.870 --> 00:03:16.900
So suppose user enters all these numbers and we use 

70
00:03:16.910 --> 00:03:19.290
this nested for loop just as we discussed 

71
00:03:19.300 --> 00:03:22.690
And we read the integer to arr[row][col] 

72
00:03:22.700 --> 00:03:24.850
in each iteration of inner for loop

73
00:03:26.140 --> 00:03:29.300
So after this code gets executed we will have 10 

74
00:03:29.310 --> 00:03:34.160
20 30 40 50 60 70 80 and 90 in our array

75
00:03:34.170 --> 00:03:36.290
And now we use the same for loops and the 

76
00:03:36.290 --> 00:03:40.010
code inside is printf arr[row][col] = %d, arr[row][col]

77
00:03:40.010 --> 00:03:43.690


78
00:03:44.640 --> 00:03:47.210
So in each iteration of inner for loop the element 

79
00:03:47.210 --> 00:03:47.990
gets printed

80
00:03:48.000 --> 00:03:50.929
So as we discussed, in first iteration row =0

81
00:03:50.930 --> 00:03:52.390
column=0

82
00:03:52.400 --> 00:03:55.250
So arr[0][0] is printed and then 

83
00:03:55.250 --> 00:03:56.959
row=0 column=1 

84
00:03:56.960 --> 00:03:59.880
So that item is printed. in the next iteration

85
00:03:59.880 --> 00:04:05.180
arr[0][2] is printed and next arr[1][0] is 

86
00:04:05.180 --> 00:04:06.850
printed which is equal to 40 

87
00:04:06.940 --> 00:04:09.470
And arr[1][1] is printed which is equal to 50

88
00:04:09.470 --> 00:04:10.150

89
00:04:10.160 --> 00:04:13.250
arr[1][2] is printed which is equal to 60 

90
00:04:13.260 --> 00:04:16.250
next arr[2][0] which is equal to 70 

91
00:04:16.250 --> 00:04:19.470
arr[2][1] equal to 80, arr[2][2] equal to 90

92
00:04:19.470 --> 00:04:22.750
and finally the programme returns zero and we get 

93
00:04:22.750 --> 00:04:24.300
the output like this 

94
00:04:25.740 --> 00:04:28.030
So that's all and thank you for watching this video 

