WEBVTT

1
00:00:00.240 --> 00:00:03.430
in this video we will discuss how to insert a 

2
00:00:03.430 --> 00:00:05.370
new node at the beginning of it 

3
00:00:05.370 --> 00:00:06.550
doubly linked list 

4
00:00:07.040 --> 00:00:09.760
So what is a doubly linked list and how is 

5
00:00:09.760 --> 00:00:13.020
it different from a singly Linked list Unlike Singly 

6
00:00:13.020 --> 00:00:16.970
linked List we have two references prev and next in 

7
00:00:16.970 --> 00:00:18.190
doubly linked list 

8
00:00:18.220 --> 00:00:22.610
And after each operation we have to maintain both prev 

9
00:00:22.670 --> 00:00:23.680
and next 

10
00:00:23.690 --> 00:00:25.450
So here we have an example of it 

11
00:00:25.450 --> 00:00:29.150
doubly linked list with elements 10 20 30 

12
00:00:29.840 --> 00:00:33.180
So if we insert new node 100 it will be 

13
00:00:33.180 --> 00:00:35.950
inserted at the beginning and we will get the new 

14
00:00:35.950 --> 00:00:40.740
doubly linked list like this 100 10 20 and 30 

15
00:00:40.750 --> 00:00:43.170
So let us see how to insert a new node 

16
00:00:43.180 --> 00:00:44.420
at the beginning 

17
00:00:44.440 --> 00:00:48.570
So here we have two cases the first case is when 

18
00:00:48.580 --> 00:00:50.870
the doubly linked list is empty 

19
00:00:50.990 --> 00:00:54.640
Then the new node inserted will be the only node 

20
00:00:54.650 --> 00:00:56.380
and it will become the head node 

21
00:00:56.650 --> 00:01:00.570
The second case is when the doubly linked list has at least 

22
00:01:00.580 --> 00:01:01.550
one node 

23
00:01:01.940 --> 00:01:06.020
Then the new node will be inserted before current head 

24
00:01:06.030 --> 00:01:08.630
and current head points to new node 

25
00:01:08.640 --> 00:01:11.040
And now make the new node the new head 

26
00:01:11.260 --> 00:01:14.370
Now let us see the Java programme to insert new 

27
00:01:14.370 --> 00:01:17.050
node at the beginning of it Doubly linked list 

28
00:01:17.540 --> 00:01:20.230
So this is the function which will add the new 

29
00:01:20.230 --> 00:01:21.650
node at the beginning 

30
00:01:22.140 --> 00:01:24.510
We will pass the value to be added to the 

31
00:01:24.510 --> 00:01:28.020
function at first and it will create a new node 

32
00:01:28.030 --> 00:01:31.500
with that value and inserted at the beginning 

33
00:01:31.510 --> 00:01:35.910
So write public void at first of int val so 

34
00:01:35.910 --> 00:01:37.430
let us see how it works 

35
00:01:37.520 --> 00:01:41.340
So here first we have an empty doubly linked list 

36
00:01:41.430 --> 00:01:43.750
So head is equal to null now 

37
00:01:44.640 --> 00:01:48.660
Now let us insert and node with value ten so we 

38
00:01:48.660 --> 00:01:53.240
will call the function Add first by passing the value ten 

39
00:01:53.310 --> 00:01:56.960
so let us see what happens So here Val is equal to 

40
00:01:56.960 --> 00:01:57.520
10 

41
00:01:57.920 --> 00:02:01.560
The first step is to create the new node using 

42
00:02:01.560 --> 00:02:07.060
new so write node new node equal to new node 

43
00:02:07.070 --> 00:02:11.260
So we have a new node created at address 1000 

44
00:02:11.430 --> 00:02:14.650
Now at the pass value to the data part of 

45
00:02:14.660 --> 00:02:19.600
the new node So write new node dot data equal 

46
00:02:19.600 --> 00:02:23.310
to val so 10 is added to the data part 

47
00:02:23.560 --> 00:02:27.020
Now if the doubly linked list is empty the new 

48
00:02:27.020 --> 00:02:30.200
node will be the only node and it should become 

49
00:02:30.200 --> 00:02:34.330
the head otherwise we can insert the new node just 

50
00:02:34.330 --> 00:02:35.190
before the head 

51
00:02:35.840 --> 00:02:37.280
So we need to check it 

52
00:02:37.430 --> 00:02:39.740
So write if head equal to null 

53
00:02:40.250 --> 00:02:42.630
And here we have head equal to null 

54
00:02:42.700 --> 00:02:46.880
So if returns true it means we have a currently 

55
00:02:46.890 --> 00:02:48.400
empty doubly linked List 

56
00:02:48.580 --> 00:02:51.100
And the new node that we are going to insert 

57
00:02:51.100 --> 00:02:54.030
now will be the only node in this list 

58
00:02:54.120 --> 00:02:55.600
And it should become the head 

59
00:02:56.040 --> 00:02:59.050
So there is no previous node or next node so 

60
00:02:59.050 --> 00:03:01.630
make its next and prev point to null 

61
00:03:02.240 --> 00:03:05.740
So write new node dot prev equal to null and 

62
00:03:05.740 --> 00:03:07.720
new nodes dot next equal to null 

63
00:03:08.160 --> 00:03:10.730
And the next step is to make this node the 

64
00:03:10.730 --> 00:03:14.630
head of the list write head equal to new node 

65
00:03:14.640 --> 00:03:18.170
So head has the address 1000 now and it points 

66
00:03:18.170 --> 00:03:19.350
to this new node 

67
00:03:19.940 --> 00:03:22.940
So we have inserted a new node at the beginning 

68
00:03:22.940 --> 00:03:24.650
of the doubly linked list 

69
00:03:25.040 --> 00:03:27.670
So now we have a doubly linked list with one 

70
00:03:27.670 --> 00:03:28.120
node 

71
00:03:28.520 --> 00:03:32.270
Now let us insert another node with value 20 so 

72
00:03:32.270 --> 00:03:34.970
first create the node using new 

73
00:03:34.980 --> 00:03:37.840
So the node is created at address 2000 

74
00:03:37.840 --> 00:03:38.550
Like this 

75
00:03:38.940 --> 00:03:41.540
Now the next step is to add the value at 

76
00:03:41.550 --> 00:03:42.410
data part 

77
00:03:42.650 --> 00:03:46.800
So write new node dot data equal to val so 20 

78
00:03:46.810 --> 00:03:48.650
is added at the data part 

79
00:03:49.240 --> 00:03:49.920
Now check 

80
00:03:49.930 --> 00:03:53.250
If the DLL is empty and if it is empty 

81
00:03:53.260 --> 00:03:54.890
head will be equal to null 

82
00:03:55.010 --> 00:03:58.450
But here it is not so if will fail and 

83
00:03:58.450 --> 00:04:00.400
the control goes to else part 

84
00:04:00.690 --> 00:04:03.320
So the doubly linked list is not empty 

85
00:04:03.330 --> 00:04:06.660
So the new node should be inserted before the current 

86
00:04:06.660 --> 00:04:07.420
head node 

87
00:04:07.670 --> 00:04:11.990
So said new node dot equal to null and new node 

88
00:04:11.990 --> 00:04:16.010
dot next equal to head So 1000 will be stored 

89
00:04:16.020 --> 00:04:16.860
in new nodes 

90
00:04:16.860 --> 00:04:20.440
Next part and current heads brief should point to the 

91
00:04:20.440 --> 00:04:24.690
new node So set head dot prev equal to new node 

92
00:04:24.700 --> 00:04:28.600
So 2000 will be stored in its prev now 

93
00:04:28.610 --> 00:04:31.780
all the linked list are set correctly Now the new node 

94
00:04:31.780 --> 00:04:35.520
should be the new head So set head equal to 

95
00:04:35.520 --> 00:04:40.020
new node So head will now have the address 2000 

96
00:04:40.040 --> 00:04:43.710
Now let us insert another node with value 30 So 

97
00:04:43.710 --> 00:04:47.390
first create the new node using new So the node 

98
00:04:47.390 --> 00:04:51.490
created at address 3000 like this now at the value 

99
00:04:51.490 --> 00:04:53.090
30 at the data part 

100
00:04:53.320 --> 00:04:56.950
So write new node dot data equal to Val so 

101
00:04:56.950 --> 00:04:59.450
30 is added at the data part 

102
00:04:59.840 --> 00:05:02.290
Now we need to check if the doubly linked list 

103
00:05:02.300 --> 00:05:02.890
is empty 

104
00:05:02.890 --> 00:05:05.700
Now So check If head is equal to null 

105
00:05:05.920 --> 00:05:08.910
But it is not so go to else part and 

106
00:05:08.910 --> 00:05:12.110
the new node should be inserted before the current head 

107
00:05:12.450 --> 00:05:16.530
So set new node dot prev equal to null and new node 

108
00:05:16.540 --> 00:05:18.250
dot next equal to head 

109
00:05:19.340 --> 00:05:22.050
So the prev and next of new node is set 

110
00:05:22.060 --> 00:05:22.860
correctly 

111
00:05:22.970 --> 00:05:26.930
But the current heads prev is still pointing null so 

112
00:05:26.930 --> 00:05:28.840
make it a point to the new node 

113
00:05:28.930 --> 00:05:32.020
So write head dot prev equal to new node 

114
00:05:32.460 --> 00:05:34.300
now All the links are okay 

115
00:05:34.310 --> 00:05:37.050
Now we need to make the new node the new 

116
00:05:37.050 --> 00:05:40.950
head of the list so write head equal to new node 

117
00:05:41.240 --> 00:05:44.350
So Head will now have the address 3000 

118
00:05:44.700 --> 00:05:47.320
So that is how we can insert nodes at the 

119
00:05:47.320 --> 00:05:48.080
beginning of it 

120
00:05:48.080 --> 00:05:49.150
Doubly linked list 

121
00:05:49.720 --> 00:05:52.780
Now let us discuss about the time complexity of this 

122
00:05:52.790 --> 00:05:53.650
operation 

123
00:05:54.140 --> 00:05:56.550
Since we know the position of the node to be 

124
00:05:56.550 --> 00:06:00.190
inserted that is we have to insert at the beginning 

125
00:06:00.190 --> 00:06:04.180
only we need to make some changes to prev and 

126
00:06:04.180 --> 00:06:08.040
next reference which will only take a constant time 

127
00:06:08.130 --> 00:06:11.770
So the time complexity of this operation is order of one

