WEBVTT

1
00:00:00.140 --> 00:00:03.330
in this video let us learn about binary recursion 

2
00:00:03.330 --> 00:00:07.840
In Binary recursion function calls itself twice 

3
00:00:08.320 --> 00:00:12.850
It is also called as tree recursion See here 

4
00:00:12.860 --> 00:00:16.560
the function fun is calling itself twice 

5
00:00:17.240 --> 00:00:20.270
Let us understand the binary recursion using the 

6
00:00:20.280 --> 00:00:24.310
nth fibonacci problem see this programme for finding the 

7
00:00:24.320 --> 00:00:28.140
n term In the Fibonacci series we have the main 

8
00:00:28.140 --> 00:00:33.910
function and the function fib first execution begins from here we 

9
00:00:33.910 --> 00:00:39.070
have int result equal to fib of four so function fib 

10
00:00:39.080 --> 00:00:41.550
is called by passing the value fib 

11
00:00:41.940 --> 00:00:45.980
So control gets here and n equal to four Now 

12
00:00:45.980 --> 00:00:49.270
chek if n is less than or equal to one it is 

13
00:00:49.270 --> 00:00:50.210
not so 

14
00:00:50.210 --> 00:00:53.300
Return fib of n minus one plus Fib of n 

15
00:00:53.300 --> 00:00:54.090
minus two 

16
00:00:54.300 --> 00:00:57.350
That is fib of three plus fib of two 

17
00:00:57.990 --> 00:01:01.480
See fib of four is called and it is calling fib 

18
00:01:01.480 --> 00:01:03.050
of three and fib of two 

19
00:01:03.540 --> 00:01:05.160
that is binary recursion 

20
00:01:05.470 --> 00:01:09.500
So fib is called again by passing three so n 

21
00:01:09.510 --> 00:01:11.670
equal to three now and check 

22
00:01:11.680 --> 00:01:13.440
If n is less than or equal to 1 

23
00:01:13.450 --> 00:01:15.510
But it is not so in else 

24
00:01:15.510 --> 00:01:18.370
We have returned fib of n minus one 

25
00:01:18.380 --> 00:01:21.480
That is fib of two plus fib of n minus 

26
00:01:21.480 --> 00:01:21.800
two 

27
00:01:21.810 --> 00:01:24.050
That is fib of one again 

28
00:01:24.050 --> 00:01:27.630
See when fib of three was called it called Fib 

29
00:01:27.630 --> 00:01:29.250
of two and fib of one 

30
00:01:30.040 --> 00:01:33.340
Now fib of two will be executed and we have 

31
00:01:33.350 --> 00:01:34.690
n equal to two now 

32
00:01:34.840 --> 00:01:38.380
So if fails and in else we have returned fib 

33
00:01:38.380 --> 00:01:41.200
of one plus Fib of zero again 

34
00:01:41.200 --> 00:01:44.630
See here fib of two is called and it is 

35
00:01:44.630 --> 00:01:47.050
calling fib of one and fib of 0 

36
00:01:47.640 --> 00:01:51.100
So control goes to fib of one here n equal 

37
00:01:51.100 --> 00:01:51.580
to one 

38
00:01:51.700 --> 00:01:55.080
So if returns two and return N which is one 

39
00:01:55.840 --> 00:01:57.470
So we got one here 

40
00:01:57.590 --> 00:02:01.350
Now call fib of zero and here n equal to 0 

41
00:02:01.460 --> 00:02:04.790
So here also if is true and returns n that 

42
00:02:04.790 --> 00:02:05.450
is zero 

43
00:02:06.040 --> 00:02:09.310
Now the Control returns to calling function fib of two 

44
00:02:09.400 --> 00:02:14.200
Here we got return 1 plus 0 which is one so return 

45
00:02:14.200 --> 00:02:16.620
one to the calling function fib of three 

46
00:02:16.990 --> 00:02:19.350
And we got fib of two equal to one 

47
00:02:20.040 --> 00:02:22.520
And now we have the second call fib of one 

48
00:02:22.680 --> 00:02:24.350
which will also return one 

49
00:02:24.940 --> 00:02:27.820
So we got return one plus one which is 

50
00:02:27.820 --> 00:02:31.030
two so two will be returned to the calling function 

51
00:02:31.030 --> 00:02:35.430
fib of four now we got return two plus fib of 

52
00:02:35.440 --> 00:02:38.880
two and as we got fib of two will call 

53
00:02:38.890 --> 00:02:41.960
fib of one and fib of zero and fib of 

54
00:02:41.970 --> 00:02:44.890
one will return one and fib of zero will return 

55
00:02:44.890 --> 00:02:45.350
zero 

56
00:02:45.840 --> 00:02:48.500
So one plus zero which is equal to one will be 

57
00:02:48.500 --> 00:02:53.190
returned to the calling function fib of four So we got 

58
00:02:53.200 --> 00:02:56.240
two plus one which is three which will be returned to 

59
00:02:56.240 --> 00:02:57.850
the calling function main 

60
00:02:58.440 --> 00:03:02.000
So this is what binary recursion each time 

61
00:03:02.000 --> 00:03:05.350
the function is called it is calling itself two types. 

