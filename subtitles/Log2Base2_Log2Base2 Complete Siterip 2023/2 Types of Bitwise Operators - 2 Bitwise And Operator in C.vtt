WEBVTT

1
00:00:00.340 --> 00:00:01.140
Hi friends 

2
00:00:01.150 --> 00:00:04.180
In this video we are going to learn the bitwise AND operator.

3
00:00:10.180 --> 00:00:13.670
So the bitwise AND operator takes equal length

4
00:00:13.680 --> 00:00:17.630
binary sequence and perform bitwise AND operation So 

5
00:00:17.640 --> 00:00:19.350
if we have 0 and 0 

6
00:00:19.360 --> 00:00:21.680
Then this operator will return 0 

7
00:00:21.840 --> 00:00:24.180
And if you have 0 and 1 then also the 

8
00:00:24.180 --> 00:00:25.250
result is 0 

9
00:00:25.240 --> 00:00:27.830
And if you have 1 and 0 then also the 

10
00:00:27.830 --> 00:00:28.790
result is 0

11
00:00:28.790 --> 00:00:31.650
And finally if you have both the values equal to 

12
00:00:31.650 --> 00:00:33.710
1 then the result is 1 

13
00:00:33.720 --> 00:00:36.360
So simply saying if you have any of the bit 

14
00:00:36.370 --> 00:00:38.940
equal to 0 then the result is 0.

15
00:00:38.970 --> 00:00:41.370
And if you have both the value equal to 1 

16
00:00:41.520 --> 00:00:43.300
then only the result is 1 

17
00:00:43.600 --> 00:00:46.600
So see an example take 5 and 9 and let 

18
00:00:46.600 --> 00:00:49.850
us perform bitwise AND operation on 5 and 9 

19
00:00:50.190 --> 00:00:52.880
But these are decimal numbers and we need to convert 

20
00:00:52.890 --> 00:00:54.460
it into binary numbers 

21
00:00:54.530 --> 00:00:57.059
And we know the binary equivalent of decimal 5 

22
00:00:57.070 --> 00:00:59.990
which is equal to 101 And for 9 it is 

23
00:00:59.990 --> 00:01:04.160
equal to 1001 and we need equal length binary 

24
00:01:04.160 --> 00:01:04.780
sequence 

25
00:01:04.800 --> 00:01:07.630
So add a 0 to the left of 101 

26
00:01:07.700 --> 00:01:11.700
and we got 0101 Now we can perform bitwise AND

27
00:01:11.700 --> 00:01:15.030
 so take the first pair of bits which are 

28
00:01:15.030 --> 00:01:17.950
1 and 1 and we have the truth table here 

29
00:01:18.020 --> 00:01:21.790
See for 11 we get 1 and the next pair 

30
00:01:21.790 --> 00:01:23.200
0 and 0

31
00:01:23.210 --> 00:01:26.539
So we get 0 and next is 1 and 0 

32
00:01:26.550 --> 00:01:27.640
and we get 0

33
00:01:27.650 --> 00:01:30.570
And finally we have 0 and 1 and we get 

34
00:01:30.570 --> 00:01:33.990
0 and the result of bitwise AND operation between 

35
00:01:33.990 --> 00:01:40.260
5 and 9 is 0001 Now see the code to implement this.

36
00:01:40.340 --> 00:01:43.530
In the main function we are declaring two integers A and B 

37
00:01:43.530 --> 00:01:45.810
 which are equal to 5 and 9 

38
00:01:46.140 --> 00:01:49.839
Then we are calculating output equal to A bitwise AND B

39
00:01:49.840 --> 00:01:53.220
 so bitwise AND operation will be performed 

40
00:01:53.230 --> 00:01:55.500
and the result will be stored in output 

41
00:01:55.940 --> 00:01:59.270
Now we are printing the value of output which will 

42
00:01:59.270 --> 00:02:00.390
be equal to 1

43
00:02:00.530 --> 00:02:01.429
So that's it 

44
00:02:01.700 --> 00:02:04.820
Now let us discuss about the application of bitwise AND 

45
00:02:04.820 --> 00:02:07.800
So suppose we are going to design a robot 

46
00:02:07.800 --> 00:02:11.190
car which use a sensor to sense the environment and update 

47
00:02:11.190 --> 00:02:12.720
its direction accordingly 

48
00:02:13.140 --> 00:02:16.780
And we have four directions backward, forward, left and right 

49
00:02:17.020 --> 00:02:20.340
and each bit when set to 1 can indicate to 

50
00:02:20.340 --> 00:02:22.000
go to a particular direction 

51
00:02:22.260 --> 00:02:24.250
That is if first bit is set 

52
00:02:24.260 --> 00:02:27.519
The car should go to right direction and if second 

53
00:02:27.520 --> 00:02:30.250
bit is set, go to left direction and so on 

54
00:02:30.740 --> 00:02:33.480
But how to check if a bit is set? we 

55
00:02:33.480 --> 00:02:35.820
can use bitwise AND operator for that 

56
00:02:35.960 --> 00:02:38.990
Using bitwise AND operator we can check if a 

57
00:02:38.990 --> 00:02:42.340
particular bit is enabled or disabled and we need 

58
00:02:42.340 --> 00:02:45.140
to create it binary AND mask here and it should 

59
00:02:45.140 --> 00:02:47.750
have only one 1 in the position 

60
00:02:47.840 --> 00:02:50.609
We're we want to check the bit status and all 

61
00:02:50.610 --> 00:02:53.840
the remaining bits must be zero and see here we 

62
00:02:53.840 --> 00:02:56.910
need to check if second bit is enabled so we can 

63
00:02:56.910 --> 00:03:02.180
have mask = 0010 and perform bitwise AND operation 

64
00:03:02.290 --> 00:03:05.280
And if we are getting 1 there it means that 

65
00:03:05.280 --> 00:03:08.220
bit was set And if you're getting 0 it means 

66
00:03:08.220 --> 00:03:09.480
it was not set 

67
00:03:10.840 --> 00:03:12.310
Now see another example 

68
00:03:12.310 --> 00:03:15.370
We want to check if forth bit is set and for that 

69
00:03:15.380 --> 00:03:19.890
we need mask=1000 And when we performed 

70
00:03:19.890 --> 00:03:23.300
bitwise AND we get 0 the so we can 

71
00:03:23.310 --> 00:03:25.880
infer that fourth bit was not set 

72
00:03:26.090 --> 00:03:28.330
And this is how we can apply bitwise AND here 

73
00:03:28.340 --> 00:03:29.029


74
00:03:29.140 --> 00:03:31.429
So that's all and thank you for watching this video 

