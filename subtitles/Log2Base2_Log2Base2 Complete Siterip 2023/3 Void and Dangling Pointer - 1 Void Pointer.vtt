WEBVTT

1
00:00:00.840 --> 00:00:02.639
Hi friends in this video 

2
00:00:02.640 --> 00:00:04.790
Let us discuss about void pointers 

3
00:00:11.140 --> 00:00:13.079
So a void pointer is a general

4
00:00:13.080 --> 00:00:14.159
purpose pointer 

5
00:00:14.570 --> 00:00:17.480
A normal pointer can store the address of its own 

6
00:00:17.480 --> 00:00:18.490
datatype variable 

7
00:00:18.500 --> 00:00:21.169
Or we can say it can point to variable of 

8
00:00:21.180 --> 00:00:21.650
its own 

9
00:00:21.650 --> 00:00:24.840
data type. An integer pointer can point to 

10
00:00:24.840 --> 00:00:25.950
an integer variable 

11
00:00:26.250 --> 00:00:29.360
A character pointer can point a character variable 

12
00:00:29.670 --> 00:00:33.030
An integer pointer cannot point to a variable of another 

13
00:00:33.030 --> 00:00:35.160
data type. That is normal 

14
00:00:35.160 --> 00:00:39.150
pointers can't point to address of different data type. But 

15
00:00:39.160 --> 00:00:42.330
a void pointer can point to any variable 

16
00:00:42.840 --> 00:00:44.280
Here we have void 

17
00:00:44.280 --> 00:00:45.420
pointer ptr 

18
00:00:45.580 --> 00:00:48.610
It can point to integer variable i as well as 

19
00:00:48.610 --> 00:00:49.120
character 

20
00:00:49.120 --> 00:00:50.010
Variable c

21
00:00:50.840 --> 00:00:54.530
Assigning a variable address to a pointer is called Referencing 

22
00:00:55.140 --> 00:00:57.340
& is the reference operator 

23
00:00:57.350 --> 00:01:01.710
So what is dereferencing? Dereferencing is directly accessing 

24
00:01:01.710 --> 00:01:04.880
the value of the variable instead of its memory address 

25
00:01:04.890 --> 00:01:09.200
* or asterisk is the dereferencing operator. See this 

26
00:01:09.200 --> 00:01:12.290
programme. We have integer variable i equal to 10 

27
00:01:13.340 --> 00:01:15.590
and character variable c equal to a

28
00:01:16.040 --> 00:01:20.369
Now we create two pointers one integer pointer iptr 

29
00:01:20.380 --> 00:01:22.600
and one character pointer cptr

30
00:01:22.850 --> 00:01:27.280
iptr stores address of i. So when we print * or 

31
00:01:27.280 --> 00:01:30.699
valued at iptr the compiler exactly knows it is an 

32
00:01:30.710 --> 00:01:31.800
integer pointer 

33
00:01:32.840 --> 00:01:35.460
So it reads four bytes of data from the base 

34
00:01:35.460 --> 00:01:39.220
address and we get 10. cptr stores address of c

35
00:01:39.400 --> 00:01:43.290
So when we print *cptr or value at cptr the 

36
00:01:43.290 --> 00:01:46.179
compiler exactly knows it is a character pointer 

37
00:01:46.320 --> 00:01:48.949
So it reads one byte of data from the base 

38
00:01:48.950 --> 00:01:53.320
address and we get a. Now how do we 

39
00:01:53.320 --> 00:01:55.060
dereference a void pointer? 

40
00:01:55.350 --> 00:01:58.429
See this programme. We have integer variable i equal to 10

41
00:01:58.430 --> 00:02:01.700
and character variable c equal to a. 

42
00:02:01.710 --> 00:02:05.430
Next we have a void pointer ptr and it is assigned 

43
00:02:05.430 --> 00:02:06.720
with address of i.

44
00:02:07.540 --> 00:02:10.920
Now we print the value of ptr or *ptr 

45
00:02:10.920 --> 00:02:14.369
using %d format specifier and what will 

46
00:02:14.370 --> 00:02:15.149
be the output ?

47
00:02:15.160 --> 00:02:17.400
Will it be 10? No! we will get an error 

48
00:02:17.410 --> 00:02:20.300
because it does in know which data type it is referring 

49
00:02:20.310 --> 00:02:24.950
so we can't dereference void pointer. 

50
00:02:24.960 --> 00:02:28.090
Now ptr is assigned with address of c, so it will 

51
00:02:28.090 --> 00:02:29.650
store 2024 

52
00:02:30.140 --> 00:02:32.480
Now we print the value at ptr or 

53
00:02:32.480 --> 00:02:36.590
*ptr using %c format specifier and again 

54
00:02:36.590 --> 00:02:37.929
what will be the output? Again 

55
00:02:37.930 --> 00:02:40.160
the same problem is here and we will get the 

56
00:02:40.170 --> 00:02:42.019
error. Here 

57
00:02:42.030 --> 00:02:45.390
the major issue is that while referencing it, the compiler 

58
00:02:45.390 --> 00:02:49.209
doesn't know how many bytes to read. That is if it 

59
00:02:49.210 --> 00:02:52.279
is a character type compiler reads one byte 

60
00:02:52.380 --> 00:02:54.929
If it is an integer or float type 

61
00:02:55.080 --> 00:02:57.320
compiler reads four bytes and so on 

62
00:02:57.330 --> 00:03:00.340
But for void type, this information is not known 

63
00:03:01.540 --> 00:03:04.459
So what is the solution to this issue? We need 

64
00:03:04.460 --> 00:03:07.450
to typecast the void pointer into the required datatype.

65
00:03:07.450 --> 00:03:12.450
before dereferencing. See here we typecast to integer

66
00:03:12.800 --> 00:03:16.020
So compiler will understand that this is an integer type

67
00:03:16.080 --> 00:03:19.660
and reads four bytes. So it will correctly print the 

68
00:03:19.660 --> 00:03:20.280
value 10.

69
00:03:21.240 --> 00:03:24.209
Now we store the address of c to ptr and 

70
00:03:24.210 --> 00:03:26.850
before we print we typecast it to character 

71
00:03:26.860 --> 00:03:29.450
So compiler will read one byte and we get 

72
00:03:29.450 --> 00:03:30.550
the correct output a

73
00:03:30.560 --> 00:03:30.910


74
00:03:30.920 --> 00:03:34.740
Now let us discuss about the applications of void pointers 

75
00:03:34.930 --> 00:03:39.109
The best application is the malloc function and 

76
00:03:39.110 --> 00:03:41.870
malloc is a generic function which is used to allocate 

77
00:03:41.870 --> 00:03:44.050
dynamic memory of any data type 

78
00:03:44.240 --> 00:03:48.740
It will allocate dynamic memory and returned a void pointer since 

79
00:03:48.740 --> 00:03:50.360
void is a generic pointer 

80
00:03:50.480 --> 00:03:53.050
We can assign it to any data type like  

81
00:03:53.050 --> 00:03:55.410
integer, character, float etcetera 

82
00:03:55.430 --> 00:03:58.280
If we don't have void pointer and if we want 

83
00:03:58.280 --> 00:04:01.690
to allocate dynamic memory for integer pointer then we 

84
00:04:01.690 --> 00:04:03.130
should have function like  

85
00:04:03.130 --> 00:04:05.220
malloc int and it's return type

86
00:04:05.220 --> 00:04:06.649
 must be int * 

87
00:04:06.940 --> 00:04:10.330
If we want to allocate dynamic memory for character pointer 

88
00:04:10.470 --> 00:04:13.420
then we should have function like malloc char and it's 

89
00:04:13.420 --> 00:04:15.150
returned type as char* 

90
00:04:15.160 --> 00:04:18.660
Similarly for float pointer we should have malloc float 

91
00:04:18.660 --> 00:04:21.240
function similarly for all other types 

92
00:04:21.240 --> 00:04:24.850
We need different malloc functions but we can create one 

93
00:04:24.860 --> 00:04:28.300
generic malloc function using void * as return type. 

94
00:04:28.310 --> 00:04:31.570
we can use this generic function to allocate dynamic memory 

95
00:04:31.570 --> 00:04:35.450
for any data type as malloc function returns void *

96
00:04:35.450 --> 00:04:35.890


97
00:04:36.050 --> 00:04:38.620
We need to typecast it to the require type 

98
00:04:38.880 --> 00:04:42.680
But in C, typecasting is done explicitly by the compiler 

99
00:04:43.140 --> 00:04:45.700
This is how we can use a pointer to create 

100
00:04:45.700 --> 00:04:48.620
a generic function or programme which will work for any 

101
00:04:48.620 --> 00:04:49.320
data type 

102
00:04:49.840 --> 00:04:52.850
Now let us discuss about pointer arithmetic 

103
00:04:52.860 --> 00:04:57.370
on void pointers, we can't perform void pointer arithmetic on 

104
00:04:57.370 --> 00:05:02.200
standard C like Microsoft Visual C because in standard C 

105
00:05:02.280 --> 00:05:05.110
the size of void is unknown and it will throw 

106
00:05:05.110 --> 00:05:06.190
the following error 

107
00:05:06.940 --> 00:05:10.910
We can't perform void pointer arithmetic on GCC as the 

108
00:05:10.910 --> 00:05:12.750
size of the void is one 

109
00:05:13.340 --> 00:05:16.739
However we can perform void pointer arithmetic on 

110
00:05:16.740 --> 00:05:20.880
standard C by typecasting it into the required data type.

111
00:05:21.340 --> 00:05:23.630
So that's all and thank you for watching this video 

