WEBVTT

1
00:00:00.140 --> 00:00:03.350
in this video let us discuss about Recursion 

2
00:00:03.940 --> 00:00:08.460
Firstly what is Recursion The process in which a 

3
00:00:08.460 --> 00:00:11.850
function calls itself is called Recursion 

4
00:00:12.340 --> 00:00:16.660
See here this function fun is calling itself 

5
00:00:16.920 --> 00:00:19.390
so This is an example of Recursion 

6
00:00:19.400 --> 00:00:22.600
It is a widely used method for solving problems 

7
00:00:22.740 --> 00:00:25.820
But there are some rules to be followed while using 

8
00:00:25.820 --> 00:00:30.250
the recursion so let us see the basic rules of Recursion 

9
00:00:30.740 --> 00:00:35.540
Firstly the function should call itself See here function  

10
00:00:35.540 --> 00:00:38.550
Fun is calling function fun its 

11
00:00:38.550 --> 00:00:40.500
definition so Fun 

12
00:00:40.500 --> 00:00:44.960
is Recursive function Another very important rule of 

13
00:00:44.960 --> 00:00:48.190
Recursion is there should be a base case definition 

14
00:00:48.450 --> 00:00:51.900
That is if we write a recursive function like this 

15
00:00:52.170 --> 00:00:55.140
there is a chance of infinite number of calls 

16
00:00:55.140 --> 00:00:58.920
and programme crash So we must define a base case 

17
00:00:59.180 --> 00:01:01.670
for the function call comes to an end 

18
00:01:01.790 --> 00:01:05.660
This case or condition is called the base case In 

19
00:01:05.660 --> 00:01:09.800
Recursion for example supposed here N is equal to 

20
00:01:09.800 --> 00:01:10.250
five 

21
00:01:10.740 --> 00:01:13.420
We can define base case as n equal to 

22
00:01:13.420 --> 00:01:13.840
one 

23
00:01:14.160 --> 00:01:16.600
Then function of five is called 

24
00:01:16.760 --> 00:01:20.210
It will call function of four then function of three 

25
00:01:20.290 --> 00:01:23.670
then function of two and function of one and then 

26
00:01:23.680 --> 00:01:27.650
it will stop calling itself so that is base case 

27
00:01:28.040 --> 00:01:31.290
The next rule is that the Recursive call should 

28
00:01:31.300 --> 00:01:33.170
align towards the base case 

29
00:01:33.510 --> 00:01:37.180
That is see this function we have base case n 

30
00:01:37.180 --> 00:01:40.380
equal to one and recursive call is function of 

31
00:01:40.390 --> 00:01:41.350
n minus one 

32
00:01:41.840 --> 00:01:45.070
So the function calls will be four n equal to 

33
00:01:45.070 --> 00:01:48.230
four n equal to three n equal to two and 

34
00:01:48.240 --> 00:01:49.150
n equal to one 

35
00:01:49.540 --> 00:01:52.890
So it is aligning towards n equal to one which 

36
00:01:52.890 --> 00:01:53.950
is the base case 

37
00:01:54.740 --> 00:01:58.120
And what if the recursive call was function of n 

38
00:01:58.120 --> 00:02:02.170
plus one Then the function calls will be if n equal 

39
00:02:02.170 --> 00:02:06.060
to 678910 etc etc

40
00:02:07.740 --> 00:02:10.440
It will never reach the base case and it will 

41
00:02:10.440 --> 00:02:11.410
never end 

42
00:02:11.660 --> 00:02:13.440
So the programme will crash 

43
00:02:13.840 --> 00:02:17.550
So the Recursion call should align towards the base case 

44
00:02:18.040 --> 00:02:20.410
So these are the basic rules of recursion 

45
00:02:20.750 --> 00:02:24.410
So recursion is a process for the function calls 

46
00:02:24.420 --> 00:02:28.780
itself and the basic rules of Recursion are the function 

47
00:02:28.780 --> 00:02:30.230
should call itself 

48
00:02:30.450 --> 00:02:33.190
And there should be a base case defined where the 

49
00:02:33.190 --> 00:02:37.460
function will stop calling itself and the Recursion call should 

50
00:02:37.470 --> 00:02:40.730
align towards the base case in order to avoid

51
00:02:40.730 --> 00:02:42.150
infinite function calling 

52
00:02:42.640 --> 00:02:46.070
So in the next video let us understand how the 

53
00:02:46.070 --> 00:02:49.630
Ricursive function works using the factorial problem.

