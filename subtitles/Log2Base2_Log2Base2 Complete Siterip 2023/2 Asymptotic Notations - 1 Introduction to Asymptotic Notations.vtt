WEBVTT

1
00:00:00.140 --> 00:00:03.650
In this video, let us learn about asymptotic notations 

2
00:00:03.920 --> 00:00:04.630
asymptotic 

3
00:00:04.630 --> 00:00:08.860
notation is a very important topic in algorithm analysis because 

4
00:00:08.860 --> 00:00:12.770
in algorithm analysis we analyse particular function and 

5
00:00:12.770 --> 00:00:14.250
find its time function 

6
00:00:14.640 --> 00:00:17.890
So what happens if the time function is very complex 

7
00:00:17.890 --> 00:00:20.750
like (5n^2 + n * 2/3 + n + 2^n)

8
00:00:20.760 --> 00:00:24.230
It's not easy 

9
00:00:24.230 --> 00:00:27.070
to understand and it is very complex to communicate to 

10
00:00:27.070 --> 00:00:27.660
others 

11
00:00:27.810 --> 00:00:30.950
So we need a simple method to represent time function 

12
00:00:31.240 --> 00:00:34.190
so that everyone can get a clear understanding of a 

13
00:00:34.190 --> 00:00:36.850
particular function and it's time complexity.

14
00:00:37.140 --> 00:00:40.360
So what is the solution? The solution is asymptotic

15
00:00:40.360 --> 00:00:41.110
notations 

16
00:00:41.380 --> 00:00:45.040
asymptotic notations are useful to represent the simple form 

17
00:00:45.050 --> 00:00:47.080
of a time function like this 

18
00:00:47.080 --> 00:00:51.230
particular function belongs to this particular time class. for example 

19
00:00:51.400 --> 00:00:54.390
2n^2 + n + 1 belongs to time 

20
00:00:54.390 --> 00:00:58.000
function big O of n^2 and 2 raised to k+1 minus 1

21
00:00:58.000 --> 00:01:00.860
belongs to big O of 2 raised to n

22
00:01:00.860 --> 00:01:04.680
Like that, we have already discussed different types 

23
00:01:04.680 --> 00:01:06.860
of time functions in the previous videos 

24
00:01:07.190 --> 00:01:10.500
Now let us discuss about different types of notations 

25
00:01:10.760 --> 00:01:14.160
The first one is big Oh, the big Oh (O) notation defines 

26
00:01:14.160 --> 00:01:15.800
an upper bound of a function 

27
00:01:16.130 --> 00:01:17.710
The second one is omega 

28
00:01:17.870 --> 00:01:20.240
The omega notation is used to define the 

29
00:01:20.240 --> 00:01:22.920
lower bound of a function and the last one is 

30
00:01:22.930 --> 00:01:23.550
Theta 

31
00:01:23.790 --> 00:01:26.880
The Theta notation is used to define the average bound of 

32
00:01:26.880 --> 00:01:27.550
a function 

33
00:01:28.040 --> 00:01:31.540
We can represent any function in the upper bound or average 

34
00:01:31.540 --> 00:01:33.860
pound or lower bound but ideally

35
00:01:33.870 --> 00:01:36.550
We should always try to find the average bound of 

36
00:01:36.560 --> 00:01:37.550
the time function 

37
00:01:37.940 --> 00:01:40.690
If the average bound belongs to any of these time 

38
00:01:40.690 --> 00:01:43.990
functions we can straight away represent it using Theta

39
00:01:44.200 --> 00:01:47.610
But many times we can't find the exact time class 

40
00:01:47.610 --> 00:01:48.780
for the average bound 

41
00:01:49.110 --> 00:01:52.310
In those cases, we can represent the time function using 

42
00:01:52.320 --> 00:01:54.050
upper bound or lower bound 

43
00:01:54.440 --> 00:01:57.610
For example if the average bound of an algorithm is 

44
00:01:57.620 --> 00:02:00.850
logn n^2 n^3 2^n 

45
00:02:00.910 --> 00:02:02.830
we can represent it using theta  

46
00:02:02.840 --> 00:02:06.550
Because these are exact time classes, we already know that. 

47
00:02:07.040 --> 00:02:09.670
But if the average bound does not belong to any 

48
00:02:09.670 --> 00:02:12.650
of these time functions we need to represent it with 

49
00:02:12.660 --> 00:02:16.280
an upper bound or lower bound for example 

50
00:02:16.280 --> 00:02:16.630
logn!

51
00:02:16.630 --> 00:02:19.380
We don't have an exact time class for 

52
00:02:19.380 --> 00:02:19.740
logn!

53
00:02:19.750 --> 00:02:23.180
So we can represent it using upper bound 

54
00:02:23.330 --> 00:02:25.850
and what is the upper bound of n!

55
00:02:26.140 --> 00:02:29.920
It is n raised to n So, substitute n raised to n 

56
00:02:29.920 --> 00:02:33.680
instead of n! which will become Log n raised to n is

57
00:02:29.920 --> 00:02:33.680
and log of n raised to n  is nlogn

58
00:02:37.400 --> 00:02:39.230
So we can say that logn! 

59
00:02:39.240 --> 00:02:42.700
is big O of nLogn. Not, 

60
00:02:42.710 --> 00:02:43.280
theta of nlogn

61
00:02:43.290 --> 00:02:44.850
that's it 

62
00:02:45.440 --> 00:02:48.000
This is how we need to use a symptomatic notations 

63
00:02:48.000 --> 00:02:49.820
to simplify time functions 

64
00:02:50.080 --> 00:02:53.330
If we find the exact time function, we can represent 

65
00:02:53.330 --> 00:02:54.240
it with theta

66
00:02:54.360 --> 00:02:57.450
If not we need to use upper or lower bound 

67
00:02:57.690 --> 00:02:59.210
So that's all for this video 

68
00:02:59.220 --> 00:03:02.320
We will discuss each asymptotic notation in the coming 

69
00:03:02.320 --> 00:03:02.970
videos 

