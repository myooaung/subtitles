WEBVTT

1
00:00:00.540 --> 00:00:01.370
Hello Friends 

2
00:00:01.380 --> 00:00:04.550
In this video we will learn about the merge sort 

3
00:00:05.240 --> 00:00:05.790
so merge

4
00:00:05.790 --> 00:00:10.760
sort is an efficient sorting algorithm which uses that divide 

5
00:00:10.770 --> 00:00:11.950
and conquer approach 

6
00:00:12.340 --> 00:00:16.250
But before understanding merge sort let us understand how to 

7
00:00:16.250 --> 00:00:18.550
sort two sorted arrays 

8
00:00:19.040 --> 00:00:23.190
This concept is very helpful and also crucial while learning 

9
00:00:23.200 --> 00:00:26.910
the merge sort algorithm so given two sorted array

10
00:00:26.910 --> 00:00:30.850
A and B both of size five let us 

11
00:00:30.850 --> 00:00:34.920
combine or merge these two array into one sorted array

12
00:00:35.580 --> 00:00:39.520
So allocate one additional array of size 10 to store 

13
00:00:39.520 --> 00:00:45.070
the result here A and B are sorted individually we have 

14
00:00:45.080 --> 00:00:47.340
to merge A and B in sorted order 

15
00:00:47.840 --> 00:00:50.910
So what should we do Since the two arrays are 

16
00:00:50.910 --> 00:00:54.700
sorted the smallest element of a will be its first 

17
00:00:54.700 --> 00:00:58.570
element and similarly this smallest element of b will be 

18
00:00:58.580 --> 00:00:59.750
its first element 

19
00:01:00.140 --> 00:01:03.620
So to get the smallest number of both the arrays 

20
00:01:03.630 --> 00:01:07.400
we only need to compare the first element of both 

21
00:01:07.410 --> 00:01:10.450
arrays and the one that is smaller will be the 

22
00:01:10.450 --> 00:01:12.750
minimum of all these numbers 

23
00:01:13.240 --> 00:01:16.020
So we can use two variables I and J for 

24
00:01:16.020 --> 00:01:19.870
this and here the first element of a is five 

25
00:01:20.060 --> 00:01:24.920
and first element of b is ten referred by i and j and 

26
00:01:24.920 --> 00:01:28.760
which one is smaller here it is five referred by i

27
00:01:29.110 --> 00:01:32.550
So that must be the minimum among all these numbers 

28
00:01:32.740 --> 00:01:34.650
so added to the new array	 

29
00:01:35.040 --> 00:01:37.940
And since it is added we can move I to 

30
00:01:37.940 --> 00:01:38.950
the next element 

31
00:01:39.440 --> 00:01:42.490
So now I points to the second element of a 

32
00:01:42.590 --> 00:01:45.660
Now we do not need to consider five because it 

33
00:01:45.660 --> 00:01:47.460
is already added to the new array 

34
00:01:47.650 --> 00:01:50.840
Now the minimum element of a will be the second 

35
00:01:50.850 --> 00:01:54.400
element and minimum element of b is still it's first 

36
00:01:54.400 --> 00:01:54.620
one 

37
00:01:55.180 --> 00:01:58.350
So now to keep the minimum value of remaining numbers 

38
00:01:58.640 --> 00:02:00.600
again compare I and J 

39
00:02:00.780 --> 00:02:05.060
That is 20 and 10 and 10 is smaller here 

40
00:02:05.070 --> 00:02:08.500
That means 10 is the minimum value in the remaining 

41
00:02:08.500 --> 00:02:12.940
numbers so added to the new array Now move J 

42
00:02:12.950 --> 00:02:14.150
to the next element 

43
00:02:14.710 --> 00:02:18.670
So now comapre these two and we have 20 less 

44
00:02:18.670 --> 00:02:22.930
than 25 So add 20 to the new array and 

45
00:02:22.930 --> 00:02:25.610
move I to the next element again 

46
00:02:25.610 --> 00:02:29.160
Repeat the process compared the minimum elements of array of

47
00:02:29.170 --> 00:02:33.880
A and B and here 25 is less than 30 

48
00:02:33.920 --> 00:02:38.000
So add 25 to the new array Now move J 

49
00:02:38.010 --> 00:02:42.840
to the next element now compared 30 and 28 again 

50
00:02:42.840 --> 00:02:46.840
28 is smaller so added to the new array now compared 

51
00:02:46.850 --> 00:02:48.070
30 and 40 

52
00:02:48.170 --> 00:02:51.220
And here 30 is the smaller one so added to 

53
00:02:51.220 --> 00:02:51.850
the new array 

54
00:02:52.640 --> 00:02:56.440
Next we have to compare 40 and 45 and which one is smaller 

55
00:02:56.440 --> 00:02:57.680
Here it is 40 

56
00:02:57.900 --> 00:02:59.650
So added to the new array 

57
00:03:00.340 --> 00:03:05.110
Now compare 45 42 here 42 is the smaller one 

58
00:03:05.270 --> 00:03:08.840
So 42 is added to the new array now one 

59
00:03:08.850 --> 00:03:09.950
array is completed 

60
00:03:10.340 --> 00:03:13.410
Now we don't need any more comparisons but we only 

61
00:03:13.410 --> 00:03:16.790
need to copy the remaining part of the array because 

62
00:03:16.790 --> 00:03:18.360
it is already in sorted order 

63
00:03:18.710 --> 00:03:21.020
So just copy the remaining part to the new 

64
00:03:21.020 --> 00:03:21.350
array 

65
00:03:21.740 --> 00:03:26.450
So now we got the new merged sorted array C 

66
00:03:27.040 --> 00:03:29.460
So now we know how to merge and sort two 

67
00:03:29.460 --> 00:03:33.360
separate sorted arrays In the next video we will apply this concept and understand how merge sort works.

