WEBVTT

1
00:00:00.340 --> 00:00:01.060
Hi friends 

2
00:00:01.070 --> 00:00:04.650
In this video we are going to discuss about structure within structure 

4
00:00:12.630 --> 00:00:15.520
First let us create a structure to represent a point 

5
00:00:15.530 --> 00:00:18.659
on a two dimensional plane so we can create struct

6
00:00:18.660 --> 00:00:20.029
point like this 

7
00:00:20.270 --> 00:00:23.260
Now what if we want to represent a line? What 

8
00:00:23.260 --> 00:00:26.170
will be the solution? As we know a line has two 

9
00:00:26.170 --> 00:00:29.980
points. so we can place the struct point 2 times inside the 

10
00:00:29.980 --> 00:00:33.670
structure line like this inside the structure line we can  

11
00:00:33.670 --> 00:00:37.080
have struct point p1 and struct point p2 

12
00:00:37.290 --> 00:00:39.960
Now we have represented a line successfully 

13
00:00:39.970 --> 00:00:43.660
Here we are placing a structure inside another structure 

14
00:00:43.670 --> 00:00:47.460
Hence we call the structure within structure the memory 

15
00:00:47.460 --> 00:00:51.080
allocation of struct line will be inside struct line L

16
00:00:51.090 --> 00:00:55.519
 struct point p1 with two coordinates will be 

17
00:00:55.520 --> 00:00:59.210
created and struct point p2 with two coordinates will 

18
00:00:59.210 --> 00:01:00.949
also be created like this 

19
00:01:01.940 --> 00:01:06.080
Now how to access the structure members? we can access 

20
00:01:06.090 --> 00:01:08.980
X of p1 using l.p1.x 

21
00:01:08.990 --> 00:01:11.980
y of p1 using l.p1.y 

22
00:01:11.980 --> 00:01:15.210
x of p2 using l.p2.x

23
00:01:15.210 --> 00:01:18.330
and y of p2 using l.p2.y

24
00:01:18.330 --> 00:01:21.230
 now Let us see a C

25
00:01:21.230 --> 00:01:25.170
programme To find the distance between two points first we 

26
00:01:25.170 --> 00:01:27.540
create a floating point variable distance 

27
00:01:27.700 --> 00:01:32.020
Now we create structure point within structure line First let 

28
00:01:32.020 --> 00:01:34.460
us read the coordinates of point1 

29
00:01:34.460 --> 00:01:37.380
From the user.  suppose user enters two and four 

30
00:01:37.480 --> 00:01:40.150
it is read to l.p1.x and 

31
00:01:40.160 --> 00:01:43.350
l.p1.y now let us read the 

32
00:01:43.350 --> 00:01:47.150
coordinates of point2 from the user Suppose user enters 

33
00:01:47.150 --> 00:01:48.350
10 and 5 

34
00:01:48.470 --> 00:01:51.650
It is read to l.p2.x and l.p2.y

35
00:01:51.650 --> 00:01:55.760
 now Distance is calculated Using this 

36
00:01:55.760 --> 00:01:59.270
formula. square root of (x2 - x1)^2 +  

37
00:01:59.270 --> 00:02:02.179
(y2 - y1)^2  

38
00:02:02.180 --> 00:02:05.380
 And here we use functions sqrt 

39
00:02:05.380 --> 00:02:08.390
and  pow from math.h header file

40
00:02:08.390 --> 00:02:11.990
and is calculated and is stored to variable distance 

41
00:02:11.990 --> 00:02:13.440
and is finally printed 

42
00:02:17.440 --> 00:02:19.730
So that's all and thank you for watching this video 

