WEBVTT

1
00:00:00.000 --> 00:00:02.020
To find the size of the tree, 

2
00:00:02.330 --> 00:00:05.600
We can write a function size which takes the root 

3
00:00:05.600 --> 00:00:09.060
of the tree as the input and returns the size 

4
00:00:09.290 --> 00:00:10.530
which will be an integer.

5
00:00:11.340 --> 00:00:15.920
Firstly if the root is null, then return zero. And this is 

6
00:00:15.920 --> 00:00:20.590
the base condition here. This base condition will handle two cases.

7
00:00:19.930 --> 00:00:20.590


8
00:00:21.040 --> 00:00:22.450
The first case is 

9
00:00:22.840 --> 00:00:26.080
if the tree is empty, then it will straight away 

10
00:00:26.080 --> 00:00:28.870
return zero and the second case is

11
00:00:29.240 --> 00:00:33.050
If traversal reaches null, then it will return zero 

12
00:00:34.040 --> 00:00:38.260
and then for every other node, return one for 

13
00:00:38.260 --> 00:00:41.950
the particular node + its sub tree size

14
00:00:39.710 --> 00:00:41.950
 

15
00:00:42.440 --> 00:00:46.510
So write return one + size of sub tree 

16
00:00:46.850 --> 00:00:49.720
But there is left sub tree as well as right sub tree

17
00:00:49.720 --> 00:00:50.250
 

18
00:00:50.640 --> 00:00:54.530
Both size should be added. So this line of code 

19
00:00:54.530 --> 00:00:59.130
can be expanded as one + size of root-left 

20
00:00:59.250 --> 00:01:02.270
+ size of root-right. 

21
00:01:02.270 --> 00:01:05.240
Let us see how the code works. In the code, 

22
00:01:05.430 --> 00:01:09.000
first left recursion will be called and then right 

23
00:01:09.000 --> 00:01:12.530
recursion will be called. On each node we will 

24
00:01:12.530 --> 00:01:15.850
return one + size of its sub tree 

25
00:01:16.340 --> 00:01:20.820
So first the left recursion will be called till root-left 

26
00:01:20.820 --> 00:01:24.160
equal to null and once it is null

27
00:01:24.510 --> 00:01:27.850
The calculation will start from the node 10

28
00:01:28.440 --> 00:01:32.130
So here one + size of its left sub tree 

29
00:01:32.140 --> 00:01:35.350
and it's right sub tree for know done 

30
00:01:35.360 --> 00:01:36.890
There is no sub trees

31
00:01:37.140 --> 00:01:43.070
Both are null. So it will return 0.

32
00:01:43.080 --> 00:01:47.010
So one + zero + zero which is one will be returned and 

33
00:01:47.010 --> 00:01:52.110
then this sub tree will be calculated. Here also same 

34
00:01:52.110 --> 00:01:52.740
for the node 60

35
00:01:52.740 --> 00:01:53.340


36
00:01:53.350 --> 00:01:56.690
There is no sub tree. so one for node 60 

37
00:01:56.750 --> 00:02:00.190
and zero + zero will be returned as the size 

38
00:02:00.190 --> 00:02:02.470
of left and right sub trees. 

39
00:02:02.650 --> 00:02:06.130
So we will get one + zero + zero which 

40
00:02:06.130 --> 00:02:09.630
is one. Next control reaches to recursively call

41
00:02:09.630 --> 00:02:12.850
for this sub tree and here the size will 

42
00:02:12.850 --> 00:02:16.680
be calculated and we have size of left sub tree 

43
00:02:16.680 --> 00:02:19.930
equal to one and size of right sub tree equal to one.

44
00:02:19.930 --> 00:02:23.860
So size is equal to one + one + one

45
00:02:23.860 --> 00:02:25.020
which is three.

46
00:02:25.380 --> 00:02:28.800
Next control reaches to recursive call for this sub tree

47
00:02:28.800 --> 00:02:33.260
So its size will be calculated and since it 

48
00:02:33.260 --> 00:02:36.060
has no child it's left and right sub tree size

49
00:02:36.060 --> 00:02:40.180
will be zero. So size is equal 

50
00:02:40.180 --> 00:02:44.680
to one + zero + zero which is one. 

51
00:02:44.700 --> 00:02:48.510
Next this sub tree size will be calculated and here also we 

52
00:02:48.510 --> 00:02:51.890
will get one + zero + zero which is one 

53
00:02:52.100 --> 00:02:52.640

54
00:02:52.830 --> 00:02:55.820
Next this sub tree size will be calculated and it will 

55
00:02:55.820 --> 00:02:57.750
be left sub tree size. 

56
00:02:57.760 --> 00:03:02.190
One + right sub tree size one + one which 

57
00:03:02.190 --> 00:03:03.150
will be three.

58
00:03:03.740 --> 00:03:07.200
So left recursion and right recursion are completed 

59
00:03:07.380 --> 00:03:10.950
So we get one + left sub tree size three 

60
00:03:11.140 --> 00:03:15.500
+ right sub tree size three that is seven. So the 

61
00:03:15.500 --> 00:03:18.850
size of the given tree is equal to seven. 

