WEBVTT

1
00:00:00.000 --> 00:00:01.830
Now in the implementation 

2
00:00:02.040 --> 00:00:05.530
Let us create a function rightRotate to do the 

3
00:00:05.530 --> 00:00:06.950
one time rotation.

4
00:00:07.530 --> 00:00:11.850
We pass the array and its size n into this function. 

5
00:00:12.540 --> 00:00:15.590
First we need to back up the last element 

6
00:00:15.850 --> 00:00:20.350
So write temp equal to arr[n-1]

7
00:00:20.920 --> 00:00:24.310
Now shift the remaining elements to one position right.

8
00:00:24.310 --> 00:00:28.310
For that, we can use a for loop 

9
00:00:28.320 --> 00:00:32.400
for i equal to n-1, till i greater than zero 

10
00:00:32.480 --> 00:00:37.920
And i-- and in each iteration, move array[i-1]

11
00:00:37.920 --> 00:00:41.570
 to array[i]. So it 

12
00:00:41.570 --> 00:00:42.390
will be done. 

13
00:00:42.400 --> 00:00:46.210
And finally we have to place the backed up last 

14
00:00:46.220 --> 00:00:48.350
element in the first position. 

15
00:00:48.940 --> 00:00:52.550
So write array[0] is equal to temp 

16
00:00:53.220 --> 00:00:57.230
So this function will rotate the array one time  

17
00:00:57.230 --> 00:00:59.400
Now to rotate the array K times 

18
00:00:59.410 --> 00:01:05.030
We can write another function rotate array by passing the array its 

19
00:01:05.030 --> 00:01:09.570
size and and the value K. Here we can call 

20
00:01:09.970 --> 00:01:12.620
the rightRotate function K times. 

21
00:01:12.850 --> 00:01:16.210
So used a for loop for that. for i equal to 1

22
00:01:16.210 --> 00:01:18.620
i less than or equal to K 

23
00:01:18.630 --> 00:01:23.610
i++ and in each iteration, call rightRotate 

24
00:01:23.610 --> 00:01:26.820
function by passing the array and the size n. So the array will be rotated K times.

