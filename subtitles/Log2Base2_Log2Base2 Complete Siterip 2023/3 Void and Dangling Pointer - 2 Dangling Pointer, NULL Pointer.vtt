WEBVTT

1
00:00:01.040 --> 00:00:04.100
Hi friends in this video let us discuss about dangling 

2
00:00:04.100 --> 00:00:04.800
pointers 

3
00:00:11.420 --> 00:00:14.110
So a Dangling pointer is a pointer which points to a 

4
00:00:14.110 --> 00:00:16.650
memory location which is deleted or freed 

5
00:00:17.240 --> 00:00:19.870
That is a pointer which points to a location which 

6
00:00:19.870 --> 00:00:23.849
does not exist. Let's see the possible ways were a pointer 

7
00:00:23.850 --> 00:00:28.560
acts as a Dangling Pointer. First holding address of out of 

8
00:00:28.560 --> 00:00:29.550
scope variables 

9
00:00:29.610 --> 00:00:30.510
See this example 

10
00:00:30.510 --> 00:00:31.100
Programme 

11
00:00:31.110 --> 00:00:34.210
In main function we create an integer pointer ptr

12
00:00:34.370 --> 00:00:37.320
Suppose it is created at address 1024 

13
00:00:38.140 --> 00:00:41.160
Now in a block we create integer variable i 

14
00:00:41.170 --> 00:00:42.830
and assigned the value 10 

15
00:00:43.180 --> 00:00:45.870
It is created at address 2024

16
00:00:45.870 --> 00:00:47.720
Now we have

17
00:00:47.720 --> 00:00:49.580
ptr = &i

18
00:00:49.580 --> 00:00:49.710


19
00:00:49.710 --> 00:00:53.280
So the address of i which is 2024 

20
00:00:53.550 --> 00:00:56.650
After the end of the block, the variable i goes 

21
00:00:56.660 --> 00:01:00.890
out of scope but ptr still points it's address. 

22
00:01:00.890 --> 00:01:01.240


23
00:01:01.240 --> 00:01:02.910
So ptr became a dangling pointer 

24
00:01:02.920 --> 00:01:05.850
That is it points to something that is not meaningful 

25
00:01:05.850 --> 00:01:06.179
now 

26
00:01:06.190 --> 00:01:09.730
During the programme execution some other variables can be placed 

27
00:01:09.730 --> 00:01:13.310
on the same memory allocation 2024 which might cause 

28
00:01:13.310 --> 00:01:13.960
a problem 

29
00:01:14.640 --> 00:01:17.810
So what is the solution to this problem? After using 

30
00:01:17.810 --> 00:01:20.590
the pointer make it as null. Thus we can 

31
00:01:20.600 --> 00:01:22.100
avoid such issues 

32
00:01:22.600 --> 00:01:26.200
Next case is returning address of local variables from the 

33
00:01:26.200 --> 00:01:28.270
function. See this example programme 

34
00:01:28.270 --> 00:01:31.940
We have the main function and a function get as 

35
00:01:31.940 --> 00:01:35.200
we know execution begins from the main function. So main 

36
00:01:35.200 --> 00:01:36.790
is pushed into the stack 

37
00:01:36.850 --> 00:01:40.250
And here we have int *ptr equal to get 

38
00:01:40.510 --> 00:01:43.520
that is we creat an integer pointer and we call 

39
00:01:43.520 --> 00:01:46.710
the function get and whatever the function is returning will 

40
00:01:46.710 --> 00:01:51.070
be stored in ptr. So control goes to get. Also 

41
00:01:51.070 --> 00:01:52.540
it is pushed into the stack

42
00:01:52.550 --> 00:01:54.310
Here we have an integer variable i

43
00:01:54.320 --> 00:01:57.000
 created an initialised with 100 

44
00:01:57.940 --> 00:02:01.139
Suppose it is created at address 5024 

45
00:02:01.140 --> 00:02:03.950
Now we return address of i to the calling 

46
00:02:03.950 --> 00:02:07.060
function main. So it will be stored in ptr 

47
00:02:07.070 --> 00:02:10.950
But the function get will be popped out from the stack

48
00:02:10.950 --> 00:02:13.530
since its execution is completed. The memory which is 

49
00:02:13.530 --> 00:02:16.820
occupied by the function will be available for further use 

50
00:02:17.640 --> 00:02:20.420
But the pointer in the main function still points the 

51
00:02:20.420 --> 00:02:22.650
memory location 5024 

52
00:02:22.940 --> 00:02:26.160
A further function call may occupy the same memory location 

53
00:02:26.160 --> 00:02:27.870
which might cause an issue 

54
00:02:27.880 --> 00:02:30.799
Let's do some experiment to understand the behaviour 

55
00:02:31.080 --> 00:02:34.210
Let's create one more function and call it. 

56
00:02:34.210 --> 00:02:36.680
Here the function is a fun and it creates a 

57
00:02:36.680 --> 00:02:40.160
local variable named var and assigns the value 250 

58
00:02:40.170 --> 00:02:40.799
into it 

59
00:02:41.440 --> 00:02:44.040
This local variable may use the memory location 

60
00:02:44.040 --> 00:02:45.450
5024 

61
00:02:45.940 --> 00:02:48.760
Let's print the value of dangling pointer ptr 

62
00:02:49.190 --> 00:02:51.620
It will be printing the value 250 

63
00:02:51.810 --> 00:02:55.010
But actually we stored the address of i in ptr

64
00:02:55.130 --> 00:02:57.550
But now we got the value of var 

65
00:02:58.040 --> 00:03:01.149
We did the same experiment on different operating systems and 

66
00:03:01.150 --> 00:03:04.960
the outputs are in Windows 250, in Mac OS 

67
00:03:04.970 --> 00:03:06.570
250, in Lenux 

68
00:03:06.590 --> 00:03:09.160
It is segmentation fault core dumped error 

69
00:03:09.800 --> 00:03:12.790
This is why we should avoid dangling pointers 

70
00:03:12.870 --> 00:03:15.340
We can do it by making the pointer to null 

71
00:03:15.360 --> 00:03:17.940
after the use. Next case is 

72
00:03:17.950 --> 00:03:22.450
deallocating dynamic memory using free function. See this example 

73
00:03:22.450 --> 00:03:22.989
programme 

74
00:03:23.000 --> 00:03:26.079
Here the malloc function will allocate eight bytes of 

75
00:03:26.080 --> 00:03:28.700
memory and return the base address to the pointer p 

76
00:03:28.710 --> 00:03:29.080


77
00:03:29.330 --> 00:03:33.540
Now if we free the Pointer p, the dynamically allocated 

78
00:03:33.540 --> 00:03:37.269
memory will be deleted and it becomes available for further 

79
00:03:37.270 --> 00:03:37.740
use

80
00:03:37.940 --> 00:03:40.960
But the pointer P will hold the same memory 

81
00:03:40.960 --> 00:03:42.050
address. Now 

82
00:03:42.060 --> 00:03:44.710
P will act as a dangling pointer. Again 

83
00:03:44.720 --> 00:03:47.880
Let's do some experiment on this to understand the behaviour 

84
00:03:47.880 --> 00:03:48.300
better 

85
00:03:48.300 --> 00:03:51.429
So see this programme we are creating int * p

86
00:03:51.440 --> 00:03:55.990
and using and malloc function we are creating dynamic memory and 

87
00:03:55.990 --> 00:03:59.100
storing 1 in p[0] and 2 in p[1]

88
00:03:59.110 --> 00:03:59.590


89
00:04:00.040 --> 00:04:03.180
After that we are freeing the pointer p. 

90
00:04:03.180 --> 00:04:06.320
if we again allocate dynamic memory for another pointer q 

91
00:04:06.320 --> 00:04:06.910
 

92
00:04:07.080 --> 00:04:10.440
The same memory location may get allocated to q 

93
00:04:10.440 --> 00:04:11.540
Now both p and q

94
00:04:11.540 --> 00:04:13.510
Point to the same memory location 

95
00:04:14.240 --> 00:04:18.300
Now we're setting 100 to q[0] and 200 to q[1] 

96
00:04:18.300 --> 00:04:18.950


97
00:04:19.440 --> 00:04:22.840
Now if we print the data using pointer p, 

98
00:04:22.840 --> 00:04:27.050
it might print the pointer q's data. Here data of Pointer q

99
00:04:27.050 --> 00:04:30.860
which is 100 and 200 will be printed. Again 

100
00:04:30.860 --> 00:04:33.580
The solution is we need to set the deallocated 

101
00:04:33.580 --> 00:04:36.860
pointer p to null after using it. We did the 

102
00:04:36.860 --> 00:04:40.940
same experiment on different operating systems and the outputs were 

103
00:04:40.940 --> 00:04:42.890
like this in Windows 

104
00:04:42.890 --> 00:04:45.500
We got 100 and 200, In MAC OS

105
00:04:45.500 --> 00:04:48.590
We got 100 200, in linux it was 100 200

106
00:04:48.590 --> 00:04:49.270
 

107
00:04:49.430 --> 00:04:52.440
So it is important that once the pointer task 

108
00:04:52.440 --> 00:04:55.729
is over we need to set to NULL. otherwise 

109
00:04:55.740 --> 00:04:58.419
it might cause unexpected behaviour like this 

110
00:04:59.540 --> 00:05:01.830
So that's all and thank you for watching this video 

