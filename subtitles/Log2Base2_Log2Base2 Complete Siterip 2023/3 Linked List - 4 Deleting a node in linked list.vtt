WEBVTT

1
00:00:00.640 --> 00:00:03.560
in this video let us learn how to delete a 

2
00:00:03.560 --> 00:00:05.050
node from a linked list 

3
00:00:06.140 --> 00:00:08.950
So this is the code to implement this programme 

4
00:00:09.440 --> 00:00:12.950
So we have a function delete to perform this task 

5
00:00:13.640 --> 00:00:16.440
So here we have a linked list of nodes with 

6
00:00:16.440 --> 00:00:19.320
values 10 20 and 30 

7
00:00:19.370 --> 00:00:21.860
But 10 is the head of the linked list 

8
00:00:22.110 --> 00:00:25.440
So you will have to delete a particular key 

9
00:00:25.520 --> 00:00:28.690
So firstly what you want to do is find the 

10
00:00:28.700 --> 00:00:31.750
key in the linked list and then delete it 

11
00:00:32.440 --> 00:00:34.250
So we have two cases here 

12
00:00:34.640 --> 00:00:37.150
If the head node is the key to be deleted 

13
00:00:37.250 --> 00:00:39.730
and if it is not so here we are going 

14
00:00:39.730 --> 00:00:41.650
to delete 10 from the linked list 

15
00:00:42.440 --> 00:00:45.750
So let us call the function delete by passing the key to 

16
00:00:45.750 --> 00:00:48.640
be deleted and first letters check 

17
00:00:48.650 --> 00:00:51.210
If the data in head node is the key to 

18
00:00:51.210 --> 00:00:55.260
be deleted so write if head dot data equal to 

19
00:00:55.260 --> 00:00:55.710
key 

20
00:00:55.900 --> 00:00:58.900
And here we have 10 which is same as the 

21
00:00:58.900 --> 00:00:59.250
key 

22
00:00:59.640 --> 00:01:02.660
So simply make the second node the head of the 

23
00:01:02.660 --> 00:01:06.820
linked list so write head equal to head next 

24
00:01:06.950 --> 00:01:10.420
So the key temp is deleted from this linked list 

25
00:01:10.430 --> 00:01:13.110
null let us take the same example again 

26
00:01:13.120 --> 00:01:16.410
But this time the key to be deleted is 20 

27
00:01:16.420 --> 00:01:19.340
So first of all we need to check if head

28
00:01:19.340 --> 00:01:21.120
dot data equal to key 

29
00:01:21.150 --> 00:01:23.690
But it is not which means the Key to be 

30
00:01:23.690 --> 00:01:26.430
deleted is not the head and we need to find 

31
00:01:26.430 --> 00:01:26.590
it 

32
00:01:26.600 --> 00:01:29.030
So we go to the else spot and we need 

33
00:01:29.030 --> 00:01:33.350
to traverse the entire linked list check every nodes data 

34
00:01:33.360 --> 00:01:35.680
and if it is key than delete it 

35
00:01:35.850 --> 00:01:39.770
So first declare another variable temp and initialised it to 

36
00:01:39.770 --> 00:01:43.870
head node So write node temp equal to head 

37
00:01:44.050 --> 00:01:46.910
null we traverse the linked list using a while Loop

38
00:01:47.220 --> 00:01:50.950
so write while temp next not equal to null 

39
00:01:51.050 --> 00:01:53.960
So this while loop execute till the end of the 

40
00:01:53.960 --> 00:01:57.120
linked list or till we reach the last node where 

41
00:01:57.120 --> 00:01:57.570
node 

42
00:01:57.570 --> 00:01:59.990
Next will be Null an inside 

43
00:02:00.040 --> 00:02:02.710
We need to check if the next node is the 

44
00:02:02.710 --> 00:02:03.050
key 

45
00:02:03.140 --> 00:02:06.540
If so make this node point to the second next 

46
00:02:06.540 --> 00:02:06.920
node 

47
00:02:07.000 --> 00:02:08.240
That is write 

48
00:02:08.390 --> 00:02:12.780
If temp next data equal to key than temp next 

49
00:02:12.790 --> 00:02:16.790
equal to tempt next next and since the deletion is 

50
00:02:16.790 --> 00:02:18.650
completed break out of the loop 

51
00:02:19.040 --> 00:02:21.920
null if it is not key simply move to the 

52
00:02:21.920 --> 00:02:25.860
next node and repeat the process so write temp equal 

53
00:02:25.860 --> 00:02:26.530
to temp 

54
00:02:26.530 --> 00:02:29.070
Next let us see how it works 

55
00:02:29.180 --> 00:02:32.730
We have key equal to 20 and temp is pointing 

56
00:02:32.740 --> 00:02:34.110
to head initially 

57
00:02:34.230 --> 00:02:37.400
null when we checked the while condition we have temp 

58
00:02:37.410 --> 00:02:40.800
next equal to 2024 which is not equal to 

59
00:02:40.800 --> 00:02:41.090
null	 

60
00:02:41.360 --> 00:02:42.830
So the condition is true 

61
00:02:42.920 --> 00:02:43.790
So we check 

62
00:02:43.800 --> 00:02:47.350
If temp next data equal to key and it is 

63
00:02:47.740 --> 00:02:51.710
that is in the first iteration we have temp equal 

64
00:02:51.710 --> 00:02:52.200
to head 

65
00:02:52.490 --> 00:02:55.700
So TEMP next will be the second node and its 

66
00:02:55.700 --> 00:02:58.750
data equal to 20 which is same as the key 

67
00:02:59.240 --> 00:03:01.130
So the if condition is true 

68
00:03:01.250 --> 00:03:05.350
So simply make this current node that is temp point 

69
00:03:05.350 --> 00:03:06.850
to its second next node 

70
00:03:07.240 --> 00:03:10.240
So here in this case node one will have to 

71
00:03:10.240 --> 00:03:13.570
point to the third node so that the second node is 

72
00:03:13.570 --> 00:03:14.160
deleted 

73
00:03:14.250 --> 00:03:17.790
So the key 20 is null removed from the linked 

74
00:03:17.790 --> 00:03:21.730
list and this is the resultant linked list after deletion 

75
00:03:21.880 --> 00:03:23.720
and null we can break out of the loop 

76
00:03:24.070 --> 00:03:25.860
null let us see another case 

77
00:03:25.870 --> 00:03:28.730
Let us delete the last element of the linked list 

78
00:03:28.780 --> 00:03:31.520
So take the same example and key to be deleted 

79
00:03:31.520 --> 00:03:35.870
Be 30 first we check if head equal to key But 

80
00:03:35.880 --> 00:03:39.350
it is not ten is not equal to 30 So 

81
00:03:39.350 --> 00:03:42.880
we go to the else part and declared temp and 

82
00:03:42.890 --> 00:03:44.250
initialised it to head 

83
00:03:44.640 --> 00:03:47.260
And we traverse the linked list until we reach the 

84
00:03:47.260 --> 00:03:49.070
last node using the while loop 

85
00:03:49.300 --> 00:03:52.770
And we have temp next equal to 2024 which 

86
00:03:52.770 --> 00:03:53.990
is not equal to null 

87
00:03:54.300 --> 00:03:55.720
So the condition is true 

88
00:03:55.730 --> 00:03:58.840
So we go inside and check If the next node 

89
00:03:58.850 --> 00:04:00.400
is having the key 30 

90
00:04:00.580 --> 00:04:03.930
But it is not so that if condition failed here 

91
00:04:03.990 --> 00:04:06.440
So we go to the else part and we have 

92
00:04:06.450 --> 00:04:10.600
temp equal to temp next attempt will now point to 

93
00:04:10.600 --> 00:04:11.550
the next node 

94
00:04:12.440 --> 00:04:15.460
now in the next iteration we have temp next equal 

95
00:04:15.460 --> 00:04:18.770
to 3024 which is again not equal to null 

96
00:04:19.040 --> 00:04:20.610
So the condition is true 

97
00:04:20.620 --> 00:04:24.170
So ender the while loop and check If TEMP next 

98
00:04:24.170 --> 00:04:28.380
data equal to key and temp next equal to 3024 

99
00:04:28.380 --> 00:04:31.600
here and its data equal to 30 which is 

100
00:04:31.610 --> 00:04:32.650
equal to the key 

101
00:04:32.940 --> 00:04:35.150
So the if condition is true here 

102
00:04:35.160 --> 00:04:38.570
So we need to make TEMP next equal to temp 

103
00:04:38.570 --> 00:04:38.980
Next 

104
00:04:38.980 --> 00:04:42.180
Next and what is temp next Next It is null 

105
00:04:42.460 --> 00:04:45.490
so that will be stored in temp next so it 

106
00:04:45.490 --> 00:04:47.670
will no longer point to node 30 

107
00:04:47.680 --> 00:04:50.050
But there is only null in the next part 

108
00:04:50.240 --> 00:04:53.450
So the node 30 is remote from the linked list 

109
00:04:53.640 --> 00:04:55.470
and now we can break out of the loop 

110
00:04:55.530 --> 00:04:58.150
So this is how we can perform deletion in a 

111
00:04:58.150 --> 00:04:58.980
linked list 

112
00:04:59.110 --> 00:05:01.790
now let us relate this with the train scenario 

113
00:05:01.800 --> 00:05:05.210
We have the engine followed by the other coaches just 

114
00:05:05.210 --> 00:05:08.150
like head followed by other nodes in a linked list 

115
00:05:08.740 --> 00:05:11.980
So in first case let us delete A which is 

116
00:05:11.980 --> 00:05:15.640
engine so removed the engines and make be the 

117
00:05:15.640 --> 00:05:16.470
new engine 

118
00:05:16.480 --> 00:05:19.430
now that it's delete C so first we need to 

119
00:05:19.430 --> 00:05:22.540
find C so engine is not C 

120
00:05:22.550 --> 00:05:24.760
First Coach is also not C 

121
00:05:24.770 --> 00:05:27.250
And yes the second coach is C 

122
00:05:27.640 --> 00:05:31.340
So we have found C null remove C and make 

123
00:05:31.350 --> 00:05:33.320
B directly connected to D

124
00:05:33.610 --> 00:05:35.150
So that is how it works 

125
00:05:35.540 --> 00:05:39.250
now let us discuss about the time complexity of this operation 

126
00:05:39.740 --> 00:05:43.290
Actually the time complexity of deleting a node is order 

127
00:05:43.290 --> 00:05:43.960
of one 

128
00:05:44.110 --> 00:05:46.800
But it is the time taken to find the node 

129
00:05:46.800 --> 00:05:50.560
first so the best case time complexity will be when 

130
00:05:50.560 --> 00:05:52.940
the node to be deleted is the head of the 

131
00:05:52.940 --> 00:05:53.690
linked list 

132
00:05:53.870 --> 00:05:56.820
So it will be order of one and the worst 

133
00:05:56.820 --> 00:05:59.340
case will be when the node to be deleted is 

134
00:05:59.340 --> 00:06:01.250
the last node of the linked list 

135
00:06:01.550 --> 00:06:04.560
Then we need to traverse the whole linked list to 

136
00:06:04.560 --> 00:06:07.650
find it and then only we can delete it 

137
00:06:07.660 --> 00:06:11.380
So if we have n nodes than the worst case time to delete is order of n.

