WEBVTT

1
00:00:00.640 --> 00:00:01.450
Hello friends 

2
00:00:01.510 --> 00:00:04.500
In this video let us learn how to analyse an 

3
00:00:04.500 --> 00:00:05.210
algorithm. 

4
00:00:11.340 --> 00:00:15.380
Generally, two major factors are used to analyse any algorithm. 

5
00:00:15.380 --> 00:00:17.150
One is time, 

6
00:00:17.440 --> 00:00:20.910
that is how much time an algorithm takes to produce 

7
00:00:20.910 --> 00:00:23.910
the desired output and the second one is space, 

8
00:00:23.920 --> 00:00:27.850
that is how much memory space the algorithm consumes to 

9
00:00:27.850 --> 00:00:29.410
produce the desired output. 

10
00:00:30.140 --> 00:00:33.930
So first, let us understand how to analyse the time 

11
00:00:33.930 --> 00:00:35.590
complexity of an algorithm. 

12
00:00:36.140 --> 00:00:39.520
So the time complexity of an algorithm depends on various 

13
00:00:39.520 --> 00:00:44.260
factors such as machine architecture that his whether a machine 

14
00:00:44.270 --> 00:00:48.030
is a 32 bit architecture or a 64 bit architecture,

15
00:00:48.440 --> 00:00:51.690
then on the processor that the machine has that 

16
00:00:51.690 --> 00:00:54.850
is a machine can have a single core processor or 

17
00:00:54.850 --> 00:00:55.910
multicore processor. 

18
00:00:55.910 --> 00:00:59.780
Then it depends on the execution type that is 

19
00:00:59.780 --> 00:01:04.630
the machine can execute instructions one by one sequentially or 

20
00:01:04.630 --> 00:01:07.450
it can execute multiple instructions parallelly. 

21
00:01:08.040 --> 00:01:12.050
Then the time complexity depends on the machine's memory access 

22
00:01:12.050 --> 00:01:12.390
time. 

23
00:01:12.530 --> 00:01:16.410
That is how fast a machine can read or write data 

24
00:01:16.420 --> 00:01:20.160
to or from the memory and the last one is what 

25
00:01:20.170 --> 00:01:22.870
input we're giving to a particular algorithm. 

26
00:01:23.440 --> 00:01:26.670
And when we analyse the time complexity of an algorithm 

27
00:01:27.050 --> 00:01:30.230
we do not bother about all these factors such as 

28
00:01:30.230 --> 00:01:33.300
machine architecture, processor, its execution et cetra.

29
00:01:33.310 --> 00:01:37.030
Because these are machine dependent factors which 

30
00:01:37.030 --> 00:01:39.130
may vary from machine to machine. 

31
00:01:40.440 --> 00:01:43.690
So in general we analyse the time complexity of an 

32
00:01:43.700 --> 00:01:48.820
algorithm based on the given input, that is for a given 

33
00:01:48.830 --> 00:01:52.790
input how much time and space the algorithm takes to 

34
00:01:52.790 --> 00:01:54.280
produce the desired output. 

35
00:01:55.140 --> 00:01:58.120
And every machine is unique in its own way. 

36
00:01:58.450 --> 00:02:02.200
Some machines can have sequential execution, and some other machines 

37
00:02:02.200 --> 00:02:05.870
can have parallel execution and we can't analyse the algorithm 

38
00:02:05.870 --> 00:02:07.810
for every individual machine 

39
00:02:08.940 --> 00:02:12.110
So let us first built our model machine to analyse 

40
00:02:12.110 --> 00:02:15.680
the algorithms and our model machine will have these 

41
00:02:15.680 --> 00:02:16.320
features, 

42
00:02:16.550 --> 00:02:17.500
It is say 32 bit

43
00:02:17.500 --> 00:02:20.850
architecture machine, it has a single core processor, 

44
00:02:21.240 --> 00:02:25.310
it will execute instructions sequentially that is one after one 

45
00:02:25.310 --> 00:02:28.810
manner and it takes one unit of time for the 

46
00:02:28.810 --> 00:02:33.650
basic operations like read, write, assignment and return statements. 

47
00:02:34.040 --> 00:02:38.540
For example, the instruction int i equal to zero takes one 

48
00:02:38.540 --> 00:02:41.410
unit of time and the statement return 

49
00:02:41.410 --> 00:02:45.240
zero also takes one unit of time. So these kind 

50
00:02:45.240 --> 00:02:49.580
of basic operations will take one unit of time and 

51
00:02:49.580 --> 00:02:52.880
to make the analysing even simpler we can make the 

52
00:02:52.880 --> 00:02:57.250
assumption that every simple statement takes one unit of time. 

53
00:02:58.040 --> 00:03:01.860
For example this is a statement with three assignments but 

54
00:03:01.860 --> 00:03:05.560
still we can assume it takes one unit time as 

55
00:03:05.570 --> 00:03:07.050
it is a simple statement. 

56
00:03:07.840 --> 00:03:08.910
Say another statement here.

57
00:03:08.910 --> 00:03:14.300
Here we have multiple arithmetic operations but again by 

58
00:03:14.310 --> 00:03:17.410
our assumption it takes one unit of time, 

59
00:03:17.840 --> 00:03:21.730
similarly this statement will also take one unit of time, 

60
00:03:21.740 --> 00:03:23.800
so that is our model machine. 

61
00:03:23.810 --> 00:03:27.540
Now let us analyse the time and space complexity of 

62
00:03:27.550 --> 00:03:30.220
the swapping algorithm with our model machine. 

63
00:03:31.340 --> 00:03:34.190
First let us talk about the time complexity.

64
00:03:34.740 --> 00:03:37.830
First we have temp equal to a and this is 

65
00:03:37.830 --> 00:03:38.890
a simple statement. 

66
00:03:39.000 --> 00:03:41.350
Hence it takes one unit of time, 

67
00:03:41.940 --> 00:03:45.320
next statement is a equal to b again 

68
00:03:45.480 --> 00:03:49.220
it is a simple assignment statement, so it also takes 

69
00:03:49.230 --> 00:03:50.350
one unit of time. 

70
00:03:50.940 --> 00:03:54.700
The third statement is b equal to temp again 

71
00:03:54.960 --> 00:03:56.850
it will take one unit of time. 

72
00:03:57.340 --> 00:04:00.540
So what is the total time taken? It is 

73
00:04:00.540 --> 00:04:03.750
t of x equal to one plus one plus one. 

74
00:04:04.140 --> 00:04:07.860
That is the time complexity function t of x equal to 3,

75
00:04:07.860 --> 00:04:11.810
which means whatever may be the value of x

76
00:04:12.000 --> 00:04:14.900
the t of x function will remain in some constant 

77
00:04:14.900 --> 00:04:15.350
value. 

78
00:04:15.840 --> 00:04:19.280
See this graph, for every value of x the  

79
00:04:19.280 --> 00:04:23.210
t of x t(x) value remains constant. So we can call this 

80
00:04:23.220 --> 00:04:26.050
algorithm as a "Constant time algorithm". 

81
00:04:26.740 --> 00:04:30.420
So the time complexity of the swapping algorithm is 

82
00:04:30.420 --> 00:04:34.770
order of 1 O(1), which means the time complexity does not depend 

83
00:04:34.780 --> 00:04:36.130
on the given input 

84
00:04:36.170 --> 00:04:40.430
in this algorithm. It will remain constant for any given 

85
00:04:40.440 --> 00:04:40.970
input. 

86
00:04:41.840 --> 00:04:45.290
In general we used this Big O notation to represent the 

87
00:04:45.290 --> 00:04:46.320
time complexity. 

88
00:04:46.840 --> 00:04:50.910
But we also have other notations like theta, omega et cetra.

89
00:04:51.840 --> 00:04:54.330
We will learn about them in the coming lessons. 

90
00:04:54.840 --> 00:04:56.850
So that was the time complexity. 

91
00:04:57.240 --> 00:05:01.250
Now let us discuss about the space complexity, in the 

92
00:05:01.250 --> 00:05:02.240
swap function 

93
00:05:02.250 --> 00:05:07.050
we have two parameters, variables a and b. So let us say, 

94
00:05:07.310 --> 00:05:10.370
a takes one unit of memory and b also takes 

95
00:05:10.380 --> 00:05:11.580
one unit of memory. 

96
00:05:12.140 --> 00:05:16.130
Then in the first statement we have temp equal to a

97
00:05:16.130 --> 00:05:20.150
that is there is a new variable other than a and b

98
00:05:20.640 --> 00:05:24.180
and it will also take one unit of memory and 

99
00:05:24.180 --> 00:05:26.340
the next statement a equal to b,

100
00:05:26.350 --> 00:05:29.190
and we have already taken a and b so there 

101
00:05:29.190 --> 00:05:30.020
is no issue, 

102
00:05:30.150 --> 00:05:32.890
and next we have b equal to temp again 

103
00:05:33.010 --> 00:05:37.260
both b and temp are already considered so that's all. 

104
00:05:37.570 --> 00:05:41.430
So the total memory taken by this swap algorithm is 

105
00:05:41.610 --> 00:05:44.570
one plus one plus one that is three units of 

106
00:05:44.570 --> 00:05:45.010
memory. 

107
00:05:45.070 --> 00:05:48.870
So space complexity s of x s(x) is equal to 3 which 

108
00:05:48.870 --> 00:05:50.290
is also a constant. 

109
00:05:50.540 --> 00:05:54.350
So this algorithm takes only a fixed amount of memory 

110
00:05:54.840 --> 00:05:57.550
and the space complexity is order of one O(1). 

111
00:05:58.240 --> 00:06:01.290
So that was the time and space complexity and analysis 

112
00:06:01.300 --> 00:06:03.890
of the swapping algorithm which is a very simple 

113
00:06:03.890 --> 00:06:04.350
algorithm.

114
00:06:05.140 --> 00:06:08.420
And we got time and space complexity is equal to 

115
00:06:08.430 --> 00:06:09.250
order of one O(1). 

116
00:06:10.040 --> 00:06:13.510
We will discuss more complex algorithms and its analysis in 

117
00:06:13.510 --> 00:06:14.610
the coming videos. 

