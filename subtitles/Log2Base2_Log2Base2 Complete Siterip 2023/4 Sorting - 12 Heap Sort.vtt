WEBVTT

1
00:00:00.040 --> 00:00:00.830
Hello friends 

2
00:00:00.890 --> 00:00:03.720
In this video we are going to discuss about the 

3
00:00:03.720 --> 00:00:08.440
heap sort algorithm so let us see how to perform heap Sort 

4
00:00:08.870 --> 00:00:12.000
In the previous video we have learned the build heap

5
00:00:12.000 --> 00:00:15.590
procedure which will arrange all the elements based on the 

6
00:00:15.590 --> 00:00:16.950
max heap property 

7
00:00:17.390 --> 00:00:20.660
At the end of the build heap procedure The maximum 

8
00:00:20.660 --> 00:00:23.820
value element will be present at the root that is 

9
00:00:23.910 --> 00:00:27.850
at index zero in the array just as in this example 

10
00:00:28.240 --> 00:00:32.460
to sort a set of elements using heap sort algorithm 

11
00:00:32.590 --> 00:00:33.100
first 

12
00:00:33.100 --> 00:00:36.060
We have to call this built heap procedure which will 

13
00:00:36.060 --> 00:00:39.440
create a max heap Now the next step is to 

14
00:00:39.440 --> 00:00:41.990
swap the first and last elements of the array 

15
00:00:42.270 --> 00:00:45.800
Now the largest element will be present at the end 

16
00:00:45.800 --> 00:00:46.310
of the array 

17
00:00:47.040 --> 00:00:51.250
So this element is now at its correct sorted position 

18
00:00:51.840 --> 00:00:54.870
So one element that is the last element is sort 

19
00:00:54.870 --> 00:00:57.950
out now and we only need to sort the remaining 

20
00:00:57.950 --> 00:01:02.270
elements so we can reduce the array size by one since 

21
00:01:02.270 --> 00:01:04.390
we did a swapping at Index zero 

22
00:01:04.510 --> 00:01:07.780
There is a chance that the heap property is violated 

23
00:01:08.100 --> 00:01:09.720
So we have to check it again 

24
00:01:09.890 --> 00:01:12.570
And if it is not in the correct order swap 

25
00:01:12.580 --> 00:01:13.520
and continue the heapify 

26
00:01:13.520 --> 00:01:16.910
process here it is violated so heapify 

27
00:01:16.910 --> 00:01:17.160
it 

28
00:01:17.740 --> 00:01:20.380
So again we will get a heap tree and the 

29
00:01:20.380 --> 00:01:21.310
corresponding array 

30
00:01:21.840 --> 00:01:24.380
Now again the maximum value will be at the root 

31
00:01:24.380 --> 00:01:28.210
of the tree or at index zero in the array so 

32
00:01:28.210 --> 00:01:32.740
again swap first and last elements so that maximum value 

33
00:01:32.740 --> 00:01:35.800
reaches the last position which is it's correct position 

34
00:01:36.110 --> 00:01:39.220
So one more element is sort at now so reduce 

35
00:01:39.220 --> 00:01:42.450
the size of array by one and continued this process 

36
00:01:42.460 --> 00:01:44.450
until all the elements are sorted 

37
00:01:44.940 --> 00:01:48.710
So in each iteration one element is getting sorted 

38
00:01:48.810 --> 00:01:51.340
So this is how heap sort algorithm works 

39
00:01:51.410 --> 00:01:55.930
In each iteration the maximum element reaches its correct position 

40
00:01:56.050 --> 00:01:57.450
and is againing sorted 

41
00:01:58.440 --> 00:02:00.550
Now let us see the heap sort algorithm 

42
00:02:00.740 --> 00:02:02.140
So this is the procedure 

43
00:02:02.430 --> 00:02:05.900
The first step is calling the build heap function to 

44
00:02:05.900 --> 00:02:06.180
heapify 

45
00:02:06.180 --> 00:02:09.770
the array then we have to do three steps 

46
00:02:10.240 --> 00:02:14.270
First swap first and last elements so that the maximum 

47
00:02:14.280 --> 00:02:16.750
element reaches its correct position 

48
00:02:17.240 --> 00:02:20.410
The second step is to reduce the size by one 

49
00:02:20.560 --> 00:02:24.140
since one element is sorted and the third step is 

50
00:02:24.140 --> 00:02:24.950
to check heapify 

51
00:02:24.950 --> 00:02:28.360
order from index zero and this should be 

52
00:02:28.360 --> 00:02:32.700
continued till size becomes zero that is till all the 

53
00:02:32.700 --> 00:02:33.850
elements are sorted 

54
00:02:34.240 --> 00:02:37.880
So in each iteration one element will be sorted 

55
00:02:38.090 --> 00:02:40.790
So at the end all the elements will be in 

56
00:02:40.790 --> 00:02:41.660
sorted order 

57
00:02:42.340 --> 00:02:45.240
now let us understand how the algorithm works 

58
00:02:45.940 --> 00:02:48.920
For example take this array of size six 

59
00:02:49.280 --> 00:02:52.530
This build heap function has already arranged all the elements 

60
00:02:52.530 --> 00:02:53.450
in the correct order 

61
00:02:54.000 --> 00:02:56.640
Let's focus on how heap sort works 

62
00:02:57.440 --> 00:03:00.000
So we have this while loop which will sort all 

63
00:03:00.000 --> 00:03:02.510
the elements in the first iteration 

64
00:03:02.520 --> 00:03:06.210
The condition is okay since size is equal to six 

65
00:03:06.800 --> 00:03:10.100
So swap first and last elements that is elements at 

66
00:03:10.110 --> 00:03:13.200
index zero and index six and 50 

67
00:03:13.210 --> 00:03:17.510
Is that first position The element 80 is it correct 

68
00:03:17.520 --> 00:03:20.910
Sorted position now So we do not need to consider 

69
00:03:20.910 --> 00:03:21.630
it again 

70
00:03:21.900 --> 00:03:25.010
And we only need to sort the remaining elements so 

71
00:03:25.010 --> 00:03:28.770
reduced the array size by one so size equal to 

72
00:03:28.770 --> 00:03:32.670
five Now since we changed the element at index zero 

73
00:03:32.780 --> 00:03:33.770
we have to check 

74
00:03:33.780 --> 00:03:37.580
If the heap properties violated and if it is violated 

75
00:03:37.800 --> 00:03:38.980
it should be corrected 

76
00:03:39.290 --> 00:03:42.250
So called the heapify function at index zero 

77
00:03:42.840 --> 00:03:46.180
and see here 60 is greater than 50 so this 

78
00:03:46.180 --> 00:03:48.140
will be swapped and the other elements 

79
00:03:48.140 --> 00:03:49.750
Okay so that is done 

80
00:03:50.140 --> 00:03:54.310
Now one iteration is completed and one element that is 

81
00:03:54.320 --> 00:03:55.620
80 is sorted 

82
00:03:55.620 --> 00:03:59.920
Now in the next iteration condition is still okay since 

83
00:03:59.920 --> 00:04:02.950
size is equal to five which is greater than zero 

84
00:04:03.440 --> 00:04:07.760
So swap elements at index zero and index five now 

85
00:04:07.850 --> 00:04:12.080
the largest element 60 is at Last position and 40 

86
00:04:12.090 --> 00:04:15.950
is at first position since 60 is now at its 

87
00:04:15.960 --> 00:04:19.260
actual sorted position we do not need to consider it 

88
00:04:19.270 --> 00:04:19.770
anymore 

89
00:04:20.050 --> 00:04:24.260
So reduced the array size by one so size is equal 

90
00:04:24.260 --> 00:04:27.690
to four now and since we performed a swap operation 

91
00:04:27.690 --> 00:04:28.700
at index zero 

92
00:04:28.710 --> 00:04:32.230
We have to check if the heap properties violated So 

93
00:04:32.230 --> 00:04:33.000
call heapify 

94
00:04:33.000 --> 00:04:36.120
function at Index zero and see here 50 is

95
00:04:36.130 --> 00:04:39.500
greater than 40 so this will be swaped and 

96
00:04:39.500 --> 00:04:42.730
that is also done And the second iteration is also 

97
00:04:42.730 --> 00:04:46.260
completed now and one more element that is 60 is 

98
00:04:46.260 --> 00:04:50.600
sorted in the next iteration condition is still satisfied since 

99
00:04:50.600 --> 00:04:54.220
size is equal to four so swap elements at index 

100
00:04:54.220 --> 00:04:55.270
zero and index 

101
00:04:55.270 --> 00:04:58.820
Four now the largest element 50 is that last position 

102
00:04:59.120 --> 00:05:03.300
and 20 is that the first position now 50 sorted 

103
00:05:03.400 --> 00:05:05.550
so reduced the array size by one 

104
00:05:05.940 --> 00:05:09.790
so size is equal to three now and since we changed 

105
00:05:09.790 --> 00:05:12.690
the element at index zero we have to check If the 

106
00:05:12.690 --> 00:05:15.620
heap properties violated so called the heapify 

107
00:05:15.620 --> 00:05:19.590
function at Index zero and see here forties 

108
00:05:19.590 --> 00:05:23.320
greater than 20 So these elements will be swapped so 

109
00:05:23.320 --> 00:05:27.030
heapify process is completed now the third iteration 

110
00:05:27.030 --> 00:05:31.410
is also completed and three elements which are 80 60 

111
00:05:31.410 --> 00:05:35.130
and 50 are sorted now in the next iteration 

112
00:05:35.360 --> 00:05:38.630
The condition is still satisfied since size is equal to 

113
00:05:38.630 --> 00:05:41.980
three which is greater than zero So swap elements at 

114
00:05:41.990 --> 00:05:46.440
index zero and Index Three now the largest element 40 

115
00:05:46.450 --> 00:05:46.760
we set 

116
00:05:46.760 --> 00:05:50.350
The last position and 10 is at the first position 

117
00:05:50.740 --> 00:05:53.150
so 40 is that it's right position 

118
00:05:53.420 --> 00:05:55.750
So reduced the array size by one 

119
00:05:56.340 --> 00:05:59.890
so size is equal to two now and since we changed 

120
00:05:59.890 --> 00:06:02.280
the element at index zero we have to call heapify 

121
00:06:02.280 --> 00:06:05.510
function at the same position and see here 

122
00:06:05.520 --> 00:06:08.650
thirties greater than 10 so this will be swapped 

123
00:06:09.540 --> 00:06:10.970
So that is done now 

124
00:06:10.970 --> 00:06:14.710
The fourth iteration is also completed and one more element 

125
00:06:14.720 --> 00:06:18.480
that is 40 is sorted Now in the next iteration 

126
00:06:18.490 --> 00:06:21.530
the condition is still okay since size is equal to 

127
00:06:21.540 --> 00:06:25.350
two now So swap elements at index zero and Index 

128
00:06:25.350 --> 00:06:28.270
two now the largest element 30 is at the last 

129
00:06:28.270 --> 00:06:33.080
position now thirty is at sorted position so reduced the array 

130
00:06:33.080 --> 00:06:36.450
size by one so size is equal to one 

131
00:06:36.450 --> 00:06:40.190
now since we changed the element at index zero we 

132
00:06:40.190 --> 00:06:42.770
have to call heapify function but there are 

133
00:06:42.770 --> 00:06:43.720
no problems 

134
00:06:43.740 --> 00:06:47.880
This iteration is also completed now and in the next 

135
00:06:47.880 --> 00:06:51.880
iteration condition is still okay since size is equal to 

136
00:06:51.880 --> 00:06:53.570
one which is greater than 0 

137
00:06:53.880 --> 00:06:58.480
So swap elements at index zero and Index one now 

138
00:06:58.490 --> 00:07:00.770
the largest element 20 we set 

139
00:07:00.780 --> 00:07:04.510
Last position which is stright position and 10 is 

140
00:07:04.510 --> 00:07:07.800
at the first position since 20 sorted now 

141
00:07:07.810 --> 00:07:11.190
We can reduce the array size by one so size 

142
00:07:11.200 --> 00:07:12.620
is equal to zero now 

143
00:07:13.030 --> 00:07:16.580
And since we performed a swap operation at index zero 

144
00:07:16.590 --> 00:07:19.050
we have to call heapify function here 

145
00:07:19.740 --> 00:07:22.700
But there are no issues and this is completed and 

146
00:07:22.700 --> 00:07:26.370
the sixth iteration is also completed now and We got 

147
00:07:26.370 --> 00:07:30.010
six elements sorted now in the next iteration of the 

148
00:07:30.010 --> 00:07:30.340
while 

149
00:07:30.340 --> 00:07:30.660
loop 

150
00:07:30.670 --> 00:07:34.090
The condition fails since size is equal to zero 

151
00:07:34.480 --> 00:07:37.300
And there is only one element left here which must 

152
00:07:37.300 --> 00:07:38.600
be the smallest element 

153
00:07:38.880 --> 00:07:41.950
And it is at its correct position to So the 

154
00:07:41.950 --> 00:07:43.540
sorting is now completed 

155
00:07:43.810 --> 00:07:46.740
So this is how heap sort algorithm works.

