WEBVTT

1
00:00:00.140 --> 00:00:00.960
Hello friends 

2
00:00:01.110 --> 00:00:04.590
In this video let us analyse the time and space 

3
00:00:04.590 --> 00:00:07.130
complexity of this selection sort algorithm 

4
00:00:07.340 --> 00:00:10.470
In the previous videos we have learned what is selection 

5
00:00:10.470 --> 00:00:12.260
sort and how to implement it 

6
00:00:12.360 --> 00:00:14.860
So selections are algorithm is generic 

7
00:00:14.860 --> 00:00:18.440
For all the input cases that is whatever the input 

8
00:00:18.440 --> 00:00:21.350
sequence maybe it will follow the same procedure 

9
00:00:21.440 --> 00:00:25.330
So the time complexity will be same for both best 

10
00:00:25.340 --> 00:00:29.390
and worst case so let us analyse the time complexity 

11
00:00:29.390 --> 00:00:31.600
First let us assume the array 

12
00:00:31.600 --> 00:00:34.890
size is five for the outer loop i equal 

13
00:00:34.890 --> 00:00:35.460
to zero 

14
00:00:35.610 --> 00:00:38.350
The inner loop will be executed for J equal to 

15
00:00:38.350 --> 00:00:41.000
one j equal to two j cool to three and 

16
00:00:41.000 --> 00:00:44.060
J equal to four that is from I plus one 

17
00:00:44.070 --> 00:00:45.350
to size minus one 

18
00:00:45.740 --> 00:00:49.020
So in first iteration of outer loop the inner loop 

19
00:00:49.020 --> 00:00:51.650
statement will be executed four times 

20
00:00:52.240 --> 00:00:55.280
Next when i equal to one the inner loop will be 

21
00:00:55.280 --> 00:00:58.530
executed from J equal to two to j equal to 

22
00:00:58.530 --> 00:00:58.820
four 

23
00:00:59.080 --> 00:01:01.450
That is 23 and four 

24
00:01:02.440 --> 00:01:05.390
So in the second iteration of outer for loop the 

25
00:01:05.400 --> 00:01:08.550
innerloop statement will be executed three times 

26
00:01:09.140 --> 00:01:12.510
Next when I equal to 2 the inner loop will be 

27
00:01:12.510 --> 00:01:15.720
executed for J equal to three and J equal to 

28
00:01:15.720 --> 00:01:16.050
four 

29
00:01:16.530 --> 00:01:20.750
That is two times Next when i equal to three the 

30
00:01:20.760 --> 00:01:22.320
inner will be executed 

31
00:01:22.330 --> 00:01:25.250
Only one time for J equal to four 

32
00:01:25.740 --> 00:01:29.170
So in Fourth Iteration we have only the inner loop 

33
00:01:29.170 --> 00:01:33.980
statement executed for one time Next when i equal to four 

34
00:01:34.110 --> 00:01:37.650
the condition will fail and the outer for loop will stop 

35
00:01:37.660 --> 00:01:38.680
its execution 

36
00:01:39.340 --> 00:01:42.990
So when size equal to five the total time taken 

37
00:01:42.990 --> 00:01:46.510
is t(x) equal to one plus two plus three 

38
00:01:46.510 --> 00:01:49.050
plus four which is size minus one 

39
00:01:49.440 --> 00:01:52.740
So in general when size equal to n t(x) 

40
00:01:52.740 --> 00:01:55.940
will be equal to one plus two plus three 

41
00:01:55.940 --> 00:01:58.450
Plus etc plus n minus one 

42
00:01:59.340 --> 00:02:02.090
And what is the sum of natural numbers from one 

43
00:02:02.100 --> 00:02:05.350
to n It is n into n plus one by 

44
00:02:05.350 --> 00:02:05.750
two 

45
00:02:05.860 --> 00:02:08.820
Here we have one plus two plus three up to 

46
00:02:08.830 --> 00:02:09.850
n minus one 

47
00:02:10.640 --> 00:02:14.240
So the last number is n minus one so replaced 

48
00:02:14.350 --> 00:02:17.430
n as n minus one in this equation and we 

49
00:02:17.430 --> 00:02:21.550
will get n minus one into n minus one plus 

50
00:02:21.550 --> 00:02:25.230
one divided by two and this minus one plus one 

51
00:02:25.230 --> 00:02:26.200
will be cancelled 

52
00:02:26.450 --> 00:02:30.190
So this equation will become t(x) equal to n 

53
00:02:30.190 --> 00:02:34.160
minus one into n divided by two that is n 

54
00:02:34.160 --> 00:02:36.150
square minus n by two 

55
00:02:36.740 --> 00:02:39.670
So we got the time required now how to get 

56
00:02:39.670 --> 00:02:41.210
the time complexity here 

57
00:02:41.500 --> 00:02:45.050
Just find the highest exponential and it is n square 

58
00:02:45.050 --> 00:02:45.510
here 

59
00:02:45.650 --> 00:02:49.190
So the time complexity of selection sort is order of n 

60
00:02:49.190 --> 00:02:49.610
square 

61
00:02:49.980 --> 00:02:53.450
And as we said first the selection sort algorithm will 

62
00:02:53.450 --> 00:02:56.150
behave the same for all kind of inputs 

63
00:02:56.340 --> 00:03:01.030
So here best worst and the average case time complexity 

64
00:03:01.030 --> 00:03:03.520
will be the same order of n square 

65
00:03:03.610 --> 00:03:06.350
Now let us do the space complexity analysis 

66
00:03:06.840 --> 00:03:10.310
The space complexity is the total amount of space a 

67
00:03:10.310 --> 00:03:13.350
particular algorithm takes to produce the output 

68
00:03:13.940 --> 00:03:17.450
So here array arr takes n units of 

69
00:03:17.460 --> 00:03:22.370
memory and the size variable will take one unit and 

70
00:03:22.370 --> 00:03:24.540
we have the variables i and j 

71
00:03:24.740 --> 00:03:28.640
Each will take one unit of memory so the total 

72
00:03:28.640 --> 00:03:32.450
memory space required is n plus three 

73
00:03:32.940 --> 00:03:35.180
And here the degree is one 

74
00:03:35.280 --> 00:03:39.420
So the space complexity will be order of n as now 

75
00:03:39.430 --> 00:03:42.550
let's discuss about the Auxillary space complexity 

76
00:03:43.040 --> 00:03:46.350
But before that what is auxillary space complexity 

77
00:03:46.740 --> 00:03:50.140
say the auxillary space is the extra space or 

78
00:03:50.140 --> 00:03:55.000
the temporary space used by an algorithm here the array arr 

79
00:03:55.200 --> 00:03:59.860
and size are the given inputs the extra memory used by 

80
00:03:59.860 --> 00:04:03.150
selection sort algorithm is I and J 

81
00:04:03.840 --> 00:04:07.540
One unit of memories needed by i and one unit of 

82
00:04:07.550 --> 00:04:08.990
memory needed by J 

83
00:04:09.440 --> 00:04:12.750
So total space is equal to two units 

84
00:04:13.140 --> 00:04:14.390
That is a constant 

85
00:04:14.540 --> 00:04:18.550
So the auxillary space complexity is order of one 

86
00:04:19.840 --> 00:04:23.670
And if it's sorting algorithm sort all the elements without 

87
00:04:23.670 --> 00:04:28.040
using extra memory or sort all the elements with 

88
00:04:28.040 --> 00:04:30.650
auxillary space complexity as order one 

89
00:04:31.040 --> 00:04:34.630
We can call that sorting algorithm as an in place 

90
00:04:34.630 --> 00:04:39.100
sorting algorithm so selection sort algorithm isn't in place sorting 

91
00:04:39.100 --> 00:04:39.750
algorithm .

