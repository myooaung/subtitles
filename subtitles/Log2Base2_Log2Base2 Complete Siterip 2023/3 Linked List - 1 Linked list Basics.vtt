WEBVTT

1
00:00:01.340 --> 00:00:04.430
in this video let us discuss about linked list 

2
00:00:06.040 --> 00:00:10.830
So basically linked list are linear data structures and 

3
00:00:10.840 --> 00:00:14.290
each node in a linked list will have two parts 

4
00:00:14.630 --> 00:00:17.690
The data part and the reference to the next node 

5
00:00:17.780 --> 00:00:21.860
In the data part we can store the required information 

6
00:00:21.870 --> 00:00:24.520
It can be of any data type like it can 

7
00:00:24.520 --> 00:00:28.330
be int for char or float or double etc 

8
00:00:28.330 --> 00:00:31.540
and the reference part will hold the next nodes 

9
00:00:31.550 --> 00:00:32.350
address 

10
00:00:32.440 --> 00:00:35.200
So to hold the data and reference to the next 

11
00:00:35.200 --> 00:00:39.720
node we can create a Java class so write class 

12
00:00:39.720 --> 00:00:40.500
node 

13
00:00:40.560 --> 00:00:44.190
And first we need the data which can be of 

14
00:00:44.200 --> 00:00:45.100
any type 

15
00:00:45.180 --> 00:00:49.370
But let us assume it's integer here so write int 

16
00:00:49.380 --> 00:00:53.030
data and we need next which will be of type 

17
00:00:53.040 --> 00:00:56.250
node itself because it is a reference to the next 

18
00:00:56.250 --> 00:00:56.850
node 

19
00:00:57.040 --> 00:00:57.790
so write

20
00:00:57.800 --> 00:00:58.360
node 

21
00:00:58.370 --> 00:01:02.250
Next now let us create an allocate memory for three 

22
00:01:02.250 --> 00:01:02.900
nodes 

23
00:01:03.070 --> 00:01:07.090
So first create the class node and we need  

24
00:01:07.090 --> 00:01:11.210
integer type data to store information and node type 

25
00:01:11.210 --> 00:01:12.260
Next to refer 

26
00:01:12.260 --> 00:01:14.690
The next node now create nodes 

27
00:01:14.700 --> 00:01:19.280
head middle and last so memory is allocated in 

28
00:01:19.280 --> 00:01:20.050
the stack 

29
00:01:20.110 --> 00:01:22.590
So now we can use the keyword new to 

30
00:01:22.590 --> 00:01:25.500
create object and allocate memory to it 

31
00:01:25.660 --> 00:01:30.120
So write head equal to new node so object node 

32
00:01:30.120 --> 00:01:33.400
will be created and memory will be allocated from the 

33
00:01:33.400 --> 00:01:34.470
heap section 

34
00:01:34.550 --> 00:01:39.230
Similarly objects are created for middle node and last node 

35
00:01:39.320 --> 00:01:43.450
and memories allocated in the heap section So now we 

36
00:01:43.450 --> 00:01:44.990
have three nodes 

37
00:01:45.210 --> 00:01:47.950
Next we need values in the nodes 

38
00:01:47.960 --> 00:01:52.400
So let us assigned the values 10 20 and 30 to The 

39
00:01:52.400 --> 00:01:56.520
nodes head middle and last So we know the values 

40
00:01:56.520 --> 00:02:00.200
will be stored in the data part So write head 

41
00:02:00.210 --> 00:02:04.630
dot data equal to 10 middle dot data equal to 

42
00:02:04.630 --> 00:02:08.170
20 and last dot data equal to 30 

43
00:02:08.180 --> 00:02:11.370
So now we have the nodes with values 

44
00:02:11.460 --> 00:02:15.440
The next step is these nodes should be linked That 

45
00:02:15.440 --> 00:02:18.910
is the linked listt should be like head node middle 

46
00:02:18.910 --> 00:02:22.120
node and last node So let us link them 

47
00:02:22.130 --> 00:02:26.740
using the reference part So write head dot next equal 

48
00:02:26.740 --> 00:02:30.160
to Middle So head refers the middle node then 

49
00:02:30.160 --> 00:02:34.900
write middle dot next equal to last so middle node 

50
00:02:34.910 --> 00:02:38.640
will refer The last node and last node should have 

51
00:02:38.640 --> 00:02:43.240
null in its reference part so write last dot Next 

52
00:02:43.250 --> 00:02:44.330
equal to null 

53
00:02:44.340 --> 00:02:47.550
So now we have a perfect linked listt with three 

54
00:02:47.550 --> 00:02:51.050
nodes with values 10 20 and 30 

55
00:02:51.640 --> 00:02:54.770
Now let us print each nodes data in the linked 

56
00:02:54.770 --> 00:02:55.390
list 

57
00:02:55.670 --> 00:02:59.390
So to print each nodes data we have to traverse 

58
00:02:59.390 --> 00:03:02.610
the linked list till the end and we can identify 

59
00:03:02.610 --> 00:03:06.410
the end easily since the last nodes next will be 

60
00:03:06.410 --> 00:03:06.880
null

61
00:03:07.740 --> 00:03:11.630
So start from the head print the data and repeat 

62
00:03:11.630 --> 00:03:13.770
til we have nodes next equal 

63
00:03:13.770 --> 00:03:18.690
to null so first create temporary node temp and initialised 

64
00:03:18.690 --> 00:03:19.350
to the head 

65
00:03:19.940 --> 00:03:23.150
So write node temp equal to head 

66
00:03:23.840 --> 00:03:27.860
Now we need a while loop so write while temp 

67
00:03:27.870 --> 00:03:32.030
not equal to null So this loop will continue till 

68
00:03:32.030 --> 00:03:35.160
the end of the linked list or till TEMP becomes 

69
00:03:35.160 --> 00:03:39.300
null So print the data which is present in temp 

70
00:03:39.300 --> 00:03:43.610
node which is head now So write system dot out 

71
00:03:43.610 --> 00:03:47.080
println of temp dot data 

72
00:03:47.320 --> 00:03:50.790
So it will print 10 and then we need to 

73
00:03:50.790 --> 00:03:52.500
move to the next node 

74
00:03:52.510 --> 00:03:56.450
So write temp equal to temp dot Next 

75
00:03:57.040 --> 00:04:02.480
So now temp points to the address 2024 Now it 

76
00:04:02.490 --> 00:04:05.560
again check The while condition and it holds 

77
00:04:05.610 --> 00:04:09.610
So it prints the data at address 2024 which 

78
00:04:09.610 --> 00:04:13.350
is 20 now temp is moved to the next node 

79
00:04:13.740 --> 00:04:17.560
again check the condition and it holds so print the data 

80
00:04:17.570 --> 00:04:20.750
at address 3024 which is 30 

81
00:04:21.340 --> 00:04:23.700
So now move temp to the next node 

82
00:04:24.040 --> 00:04:28.140
So now temp becomes null since temp next equal to 

83
00:04:28.140 --> 00:04:28.260
null 

84
00:04:29.240 --> 00:04:32.720
Now when checking the while condition again it fails 

85
00:04:32.930 --> 00:04:35.810
So the control comes out of the loop and we 

86
00:04:35.810 --> 00:04:39.650
got each nodes data printed on the screen 

