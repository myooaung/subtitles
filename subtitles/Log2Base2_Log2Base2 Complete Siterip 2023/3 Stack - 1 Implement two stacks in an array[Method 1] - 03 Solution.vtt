WEBVTT

1
00:00:00.040 --> 00:00:01.700
So in the implementation 

2
00:00:01.790 --> 00:00:05.670
let us first define the size of array size as 6

3
00:00:05.670 --> 00:00:09.080
and mid size by 2 

4
00:00:09.090 --> 00:00:10.160
6/2

5
00:00:10.170 --> 00:00:13.200
that is three here. Now create the array named as 

6
00:00:13.200 --> 00:00:17.870
stack of size size which is already defined as six 

7
00:00:18.440 --> 00:00:22.130
Now set top1 as -1 for the first 

8
00:00:22.130 --> 00:00:25.750
stack and top2 as mid-1

9
00:00:25.760 --> 00:00:27.650
Now let us define push1

10
00:00:28.340 --> 00:00:30.910
We have to pass the value to be pushed into 

11
00:00:30.910 --> 00:00:34.150
the function and check if the stack is full 

12
00:00:34.540 --> 00:00:38.140
So check if top1 equal to mid-1

13
00:00:38.190 --> 00:00:39.540
than the stack is full 

14
00:00:39.600 --> 00:00:41.900
So push operation is not possible.

15
00:00:42.000 --> 00:00:46.500
So just return from the function else increment top1

16
00:00:46.680 --> 00:00:49.750
and then add the value at stack[top1] 

17
00:00:50.240 --> 00:00:54.180
So write stack[++top1] equal to val

18
00:00:55.050 --> 00:00:58.050
now let us define pop operation for stack1.

19
00:00:58.840 --> 00:01:01.920
First we have to check if stack is empty 

20
00:01:02.150 --> 00:01:06.530
So write if top1 equal to -1 then 

21
00:01:06.530 --> 00:01:07.760
return -1

22
00:01:07.770 --> 00:01:13.650
as pop operation is not possible else return stack[top1]

23
00:01:13.650 --> 00:01:16.250
 and then decrement top1 

24
00:01:16.610 --> 00:01:21.000
So write return stack[top1--]

25
00:01:21.170 --> 00:01:23.860
So it is done for stack1. Now let us 

26
00:01:23.860 --> 00:01:28.270
define push and pop operations for stack2. 

27
00:01:28.270 --> 00:01:32.150
first we have to define push operation for stack2 

28
00:01:32.640 --> 00:01:35.680
And we need to check if stack is full 

29
00:01:35.680 --> 00:01:36.320
so check 

30
00:01:36.420 --> 00:01:40.090
If top2 equal to size-1 then push 

31
00:01:40.100 --> 00:01:44.460
operation is not possible since the stack is full. So just return 

32
00:01:44.460 --> 00:01:48.560
from the function else increment top2 and then 

33
00:01:48.570 --> 00:01:53.160
add the value at stack[top2]. So write stack[++top2]

34
00:01:53.160 --> 00:01:57.140
 equal to val. So push 

35
00:01:57.150 --> 00:02:01.140
operation is defined. Now let us define pop operation for 

36
00:02:01.140 --> 00:02:04.580
stack2. First we need to check if the stack 

37
00:02:04.590 --> 00:02:05.650
is empty. 

38
00:02:05.980 --> 00:02:10.150
So write if top2 equal to mid-1

39
00:02:10.540 --> 00:02:12.120
then return -1

40
00:02:12.290 --> 00:02:14.750
as pop operation is not possible.

41
00:02:15.340 --> 00:02:18.900
else return the element at top2 and decrement top2.

42
00:02:18.900 --> 00:02:23.100
So write return stack[top2--]

43
00:02:23.100 --> 00:02:23.730


