WEBVTT

1
00:00:00.140 --> 00:00:00.919
Hi friends 

2
00:00:00.930 --> 00:00:04.320
In this video let us discuss about function pointers or

3
00:00:04.320 --> 00:00:05.780
pointers to function 

4
00:00:11.940 --> 00:00:14.300
So like pointer to normal variables 

5
00:00:14.310 --> 00:00:18.200
We can also use pointers to point functions. So we 

6
00:00:18.200 --> 00:00:21.140
know that variables has memory address so that we can 

7
00:00:21.140 --> 00:00:23.320
refer that address using pointers 

8
00:00:23.450 --> 00:00:26.880
But what about functions? Is each function has a unique 

9
00:00:26.880 --> 00:00:27.700
memory address?

10
00:00:28.010 --> 00:00:32.050
The answer is yes. Like every variable, function also has 

11
00:00:32.050 --> 00:00:32.910
a unique memory 

12
00:00:32.910 --> 00:00:35.440
address. Take an example. Here 

13
00:00:35.450 --> 00:00:37.540
The address of the function fun

14
00:00:37.550 --> 00:00:39.550
Is 5024 

15
00:00:40.240 --> 00:00:43.100
Now the syntax for declaring a function pointer 

16
00:00:43.100 --> 00:00:47.400
is return type followed by a pointer name within parentheses 

17
00:00:47.400 --> 00:00:51.320
followed by parameters within parentheses and a semi colon 

18
00:00:51.840 --> 00:00:52.849
See an example 

19
00:00:53.140 --> 00:00:56.470
If we want to create a function pointer whose return

20
00:00:56.470 --> 00:00:59.629
type is void and which won't take any arguments then 

21
00:00:59.630 --> 00:01:02.860
the function pointer syntax will be void function pointer_name 

22
00:01:02.860 --> 00:01:05.730
and an empty parentheses 

23
00:01:05.930 --> 00:01:09.540
Similarly if we want to create a function pointer whose

24
00:01:09.540 --> 00:01:12.979
return type is int and it will take an integer

25
00:01:12.980 --> 00:01:14.350
value as an argument 

26
00:01:14.540 --> 00:01:18.130
Then the Function pointer syntax will be int function 

27
00:01:18.130 --> 00:01:22.810
pointer name and int in parenthesis. See this example programme 

28
00:01:22.820 --> 00:01:25.480
Here we have the main function and the function 

29
00:01:25.480 --> 00:01:26.010
Hello 

30
00:01:26.190 --> 00:01:29.460
So in main first we declare a function pointer fptr 

31
00:01:29.460 --> 00:01:31.460
so function hello's 

32
00:01:31.460 --> 00:01:34.740
return type is void. So write void and it 

33
00:01:34.740 --> 00:01:36.290
doesn't take any arguments 

34
00:01:36.290 --> 00:01:39.730
So write empty parenthesis and then write the function pointer 

35
00:01:39.730 --> 00:01:40.830
name like this 

36
00:01:41.140 --> 00:01:44.990
So now we assign the address of function hello to 

37
00:01:44.990 --> 00:01:45.740
this pointer 

38
00:01:45.750 --> 00:01:49.140
And we can do that simply by assigning function name

39
00:01:49.150 --> 00:01:50.370
to the pointer variable 

40
00:01:50.430 --> 00:01:52.980
So we have fptr equal to hello 

41
00:01:53.040 --> 00:01:56.530
That is a pointer name equal to function name

42
00:01:56.580 --> 00:02:00.509
So the address of function hello that is 6024 will 

43
00:02:00.510 --> 00:02:04.090
be assigned to fptr and finally the programme returns 0.

44
00:02:04.090 --> 00:02:08.830
Now how to dereference function pointer? We can 

45
00:02:08.830 --> 00:02:12.930
use value at operator to call the function like 

46
00:02:12.940 --> 00:02:15.510
*fptr and after that we need to pass the 

47
00:02:15.510 --> 00:02:20.340
parameters within parentheses. Here the function hello deos not take any 

48
00:02:20.340 --> 00:02:23.900
parameter. So we have placed an empty parentheses

49
00:02:24.340 --> 00:02:27.570
It will call the hello function and the output hello 

50
00:02:27.580 --> 00:02:29.250
will be printed on the screen 

51
00:02:29.740 --> 00:02:32.960
Let's see another example with parameters and return type 

52
00:02:32.970 --> 00:02:36.700
Here we have the main function and the function sum

53
00:02:36.700 --> 00:02:40.560
with two integers as parameters and returning an 

54
00:02:40.560 --> 00:02:46.230
integer. Here main function has the address 5024 the function 

55
00:02:46.230 --> 00:02:50.710
Sum has the address 6024. In main first we declare 

56
00:02:50.710 --> 00:02:53.680
an integer variable ans and now we declare the 

57
00:02:53.680 --> 00:02:56.780
function pointer. So here the function 

58
00:02:56.780 --> 00:02:59.450
sum has return type int and two integer

59
00:02:59.450 --> 00:03:00.230
parameters 

60
00:03:00.300 --> 00:03:03.079
So we need to specify that in the declaration of 

61
00:03:03.080 --> 00:03:03.940
function pointer

62
00:03:04.120 --> 00:03:06.970
So we write like this 

63
00:03:06.970 --> 00:03:11.440
int * fptr within parentheses and int int also in parenthesis 

64
00:03:12.040 --> 00:03:15.790
Now we assign function address to fptr simply by 

65
00:03:15.790 --> 00:03:21.720
writing the function name sum. So 6024 is assigned to fptr

66
00:03:20.970 --> 00:03:21.730


67
00:03:22.440 --> 00:03:26.149
Now let us call the function by passing 10 and 5

68
00:03:26.330 --> 00:03:31.060
So we write *fptr in parentheses followed by arguments 

69
00:03:31.060 --> 00:03:32.010
in parentheses 

70
00:03:32.020 --> 00:03:36.019
So control goes to the function sum and here 

71
00:03:36.020 --> 00:03:40.310
10 + 5 is calculated and the result 15 is returned 

72
00:03:40.310 --> 00:03:43.450
to the calling function main and is stored in ans.

73
00:03:43.940 --> 00:03:46.440
Now we can print the result. So we will get 

74
00:03:46.450 --> 00:03:48.150
15 printed on the screen 

75
00:03:48.840 --> 00:03:52.270
Now let us call the  function again with values 10 

76
00:03:52.280 --> 00:03:53.100
and 50 

77
00:03:53.250 --> 00:03:54.120
So we write

78
00:03:54.130 --> 00:03:54.650


79
00:03:54.660 --> 00:03:59.300
*fptr in parentheses followed by arguments 10 and 50  

80
00:03:59.300 --> 00:04:00.210
also in parenthesis 

81
00:04:00.640 --> 00:04:03.560
So control reaches sum and 

82
00:04:03.560 --> 00:04:07.310
10 + 50 is calculated here and the result 60 is returned and 

83
00:04:07.310 --> 00:04:08.700
stored in ans

84
00:04:09.240 --> 00:04:10.940
Now let us print that too.

85
00:04:10.950 --> 00:04:12.679
So we will get 60 printed.

86
00:04:13.140 --> 00:04:15.109
Finally the programme return zero 

87
00:04:15.120 --> 00:04:18.020
Now the function pointer syntax is little complex 

88
00:04:18.020 --> 00:04:20.660
compared to other data types so we can make it 

89
00:04:20.670 --> 00:04:22.450
easy by using the typedef keyword.

90
00:04:22.450 --> 00:04:25.650
The syntax to create a function pointer 

91
00:04:25.650 --> 00:04:29.270
using typedef is the key word typedef followed 

92
00:04:29.270 --> 00:04:32.550
by the function return type followed by function pointer name 

93
00:04:32.550 --> 00:04:37.130
in parentheses and the parameters information within parentheses and finally 

94
00:04:37.140 --> 00:04:37.870
a semi colon 

95
00:04:37.880 --> 00:04:40.800
Now see an example here we are going to create 

96
00:04:40.800 --> 00:04:43.010
a function pointer for sum function 

97
00:04:43.740 --> 00:04:48.110
The return type of sum function is int. So  write

98
00:04:48.110 --> 00:04:51.340
typedef int followed by the pointer name and the sum

99
00:04:51.340 --> 00:04:55.090
function takes  two integer argument. So write int int with in

100
00:04:55.090 --> 00:04:57.550
 parenthesis followed by a semicolon 

101
00:04:57.940 --> 00:05:00.590
So if we want to create a function pointer 

102
00:05:00.590 --> 00:05:04.760
which takes two integer argument and returns an integer value 

103
00:05:04.770 --> 00:05:08.450
we can simply create it using fp like  

104
00:05:08.450 --> 00:05:12.810
fp fptr semiclon. Here  fptr is a pointer 

105
00:05:12.810 --> 00:05:16.720
to function which takes two arguments and returns in integer

106
00:05:16.720 --> 00:05:17.200
value 

107
00:05:17.740 --> 00:05:20.870
Next we are assigning the address of sum function to 

108
00:05:20.880 --> 00:05:22.660
fptr and as we did

109
00:05:22.660 --> 00:05:25.400
In the previous example we pass 10 and 5 to 

110
00:05:25.400 --> 00:05:26.099
the function 

111
00:05:26.280 --> 00:05:28.190
So 10 + 5 equal to 15 

112
00:05:28.200 --> 00:05:31.510
It is returned and stored in ans and is printed

113
00:05:32.040 --> 00:05:36.049
Now we call with 10 and 50 and result 60 

114
00:05:36.050 --> 00:05:39.000
is returned to main and stored in ans and it 

115
00:05:39.000 --> 00:05:42.480
is also printed and finally the programme return zero 

116
00:05:42.940 --> 00:05:45.470
In the next video we will learn how to pass 

117
00:05:45.480 --> 00:05:47.800
and return function pointer to the function 

118
00:05:48.840 --> 00:05:51.130
So that's all and thank you for watching this video 

