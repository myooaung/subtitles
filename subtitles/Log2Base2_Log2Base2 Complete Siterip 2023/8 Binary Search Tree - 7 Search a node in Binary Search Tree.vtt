WEBVTT

1
00:00:00.540 --> 00:00:02.920
in this video we are going to learn how to 

2
00:00:02.920 --> 00:00:05.350
search a node in a binary search tree 

3
00:00:06.240 --> 00:00:08.190
So here is an example of binary 

4
00:00:08.190 --> 00:00:09.110
search tree 

5
00:00:09.120 --> 00:00:12.300
And this is the function for searching a node in it So 

6
00:00:12.300 --> 00:00:15.980
searching in binary search tree is very simple because we 

7
00:00:15.980 --> 00:00:19.380
have this ordering in binary search trees That is the 

8
00:00:19.390 --> 00:00:21.910
elements which are smaller than the root will be to 

9
00:00:21.910 --> 00:00:24.580
the left side and larger than the root will be 

10
00:00:24.580 --> 00:00:25.570
to the right side 

11
00:00:26.240 --> 00:00:29.750
So we can use this very effectively to implement searching 

12
00:00:30.040 --> 00:00:33.210
For example if we have to search for an element 

13
00:00:33.220 --> 00:00:36.720
120 in this binary search Tree first we 

14
00:00:36.720 --> 00:00:39.050
will check the root is 100 

15
00:00:39.440 --> 00:00:42.900
So our search key 120 which is greater than 

16
00:00:42.900 --> 00:00:46.420
the root value will only reside in right side 

17
00:00:46.690 --> 00:00:48.350
we shall only check there 

18
00:00:48.840 --> 00:00:53.730
Then here the right child is 200 120 is less 

19
00:00:53.730 --> 00:00:54.730
than 200 

20
00:00:54.840 --> 00:00:57.280
So it can only be in the left sub tree 

21
00:00:57.290 --> 00:01:00.900
of 200 we will search like that so led 

22
00:01:00.910 --> 00:01:03.930
us see how this function works with an example 

23
00:01:03.980 --> 00:01:06.980
So we have the function search into which we pass 

24
00:01:06.980 --> 00:01:09.090
the root of the tree and the key to be 

25
00:01:09.090 --> 00:01:13.590
searched and it returns The search result true or false 

26
00:01:13.680 --> 00:01:17.800
So we have public Boolean search of node root comma 

27
00:01:17.810 --> 00:01:21.180
int key So we have this binary search tree here 

28
00:01:21.280 --> 00:01:24.520
and suppose we want to search for the key 60 

29
00:01:24.530 --> 00:01:29.470
So we call search by passing root and value 60 So 

30
00:01:29.470 --> 00:01:32.950
first we need to check if the tree is empty 

31
00:01:33.040 --> 00:01:35.580
If there are no elements in the tree then we 

32
00:01:35.580 --> 00:01:39.440
have to return false So we have if root equal 

33
00:01:39.440 --> 00:01:43.930
to null return false here root is not null so 

34
00:01:43.930 --> 00:01:47.300
This if will fail next we have to check if 

35
00:01:47.300 --> 00:01:50.850
root has the search key So we have if root 

36
00:01:50.850 --> 00:01:54.800
data equal to key if so return true as the 

37
00:01:54.800 --> 00:01:59.820
key is found But here root date is 100 Key 

38
00:01:59.820 --> 00:02:03.460
is 60 So this if will fail And now we 

39
00:02:03.460 --> 00:02:06.460
have to check whether the key is less than or 

40
00:02:06.460 --> 00:02:09.850
greater than the root If it is lesser key could 

41
00:02:09.860 --> 00:02:13.160
be present in the left Sub tree only so search 

42
00:02:13.170 --> 00:02:16.840
only there And if it is greater it could possibly 

43
00:02:16.840 --> 00:02:19.830
be in the right subtree So search in the right 

44
00:02:19.830 --> 00:02:21.820
subtree only So we have 

45
00:02:21.830 --> 00:02:25.780
If root data less than key and it fails 

46
00:02:25.780 --> 00:02:29.950
here since 100 is not less than 60 so it 

47
00:02:29.950 --> 00:02:33.460
cannot be Present in the right side So else part 

48
00:02:33.460 --> 00:02:34.200
will work 

49
00:02:34.210 --> 00:02:37.380
That is if the Key is present it will be 

50
00:02:37.390 --> 00:02:40.560
only present in the left sub tree So do the 

51
00:02:40.560 --> 00:02:44.120
same such operation in left sub tree So we can 

52
00:02:44.120 --> 00:02:48.270
call search function recursively by passing root left 

53
00:02:48.550 --> 00:02:53.630
and key So here first check if the tree is empty But 

54
00:02:53.640 --> 00:02:56.770
it is not so check if the root not holds 

55
00:02:56.780 --> 00:02:59.000
the key but again it fails 

56
00:02:59.060 --> 00:03:01.940
So check whether to goto left side or to the 

57
00:03:01.940 --> 00:03:06.540
right side So we have if root data less than key 

58
00:03:06.550 --> 00:03:09.380
And it is true since we have 50 less than 

59
00:03:09.380 --> 00:03:12.780
60 So we need to go to right side so call 

60
00:03:12.790 --> 00:03:17.800
insert by passing root right and key And here check 

61
00:03:17.810 --> 00:03:20.490
if it is empty But it is not so check 

62
00:03:20.500 --> 00:03:23.670
if it holds the data and see we have root 

63
00:03:23.670 --> 00:03:26.870
data equal to 60 and key equal to 60 

64
00:03:26.970 --> 00:03:30.040
So it returns true as the key found in the 

65
00:03:30.040 --> 00:03:30.520
tree 

66
00:03:30.560 --> 00:03:33.520
So that is how we can implement searching in binary 

67
00:03:33.520 --> 00:03:38.090
search tree now suppose The key passed was 500 So 

68
00:03:38.090 --> 00:03:41.670
as we just discussed first check whether the tree is 

69
00:03:41.680 --> 00:03:45.080
empty or not But here it is not so Next 

70
00:03:45.080 --> 00:03:45.510
check 

71
00:03:45.520 --> 00:03:48.490
If the root is holding the key again 100 it's 

72
00:03:48.490 --> 00:03:50.040
not equal to 500 

73
00:03:50.180 --> 00:03:53.680
So if will fail now we have to find whether 

74
00:03:53.680 --> 00:03:57.260
to go to Left side or right side So check if 

75
00:03:57.260 --> 00:04:00.650
root data is less than the key and 100 is 

76
00:04:00.650 --> 00:04:03.620
less than 500 So we need to go to right 

77
00:04:03.620 --> 00:04:04.070
side 

78
00:04:04.260 --> 00:04:08.520
So we have search of root right comma key again First 

79
00:04:08.520 --> 00:04:11.320
check if it is empty But it is not so 

80
00:04:11.320 --> 00:04:14.490
check If it holds the data But it is not 

81
00:04:14.870 --> 00:04:17.610
so again check whether to go to left side or 

82
00:04:17.610 --> 00:04:21.330
to right side So we have if root data less 

83
00:04:21.330 --> 00:04:24.520
than the key and it is true since 200 is 

84
00:04:24.520 --> 00:04:27.630
less than 500 So we have to go to right 

85
00:04:27.630 --> 00:04:33.280
side So call search by passing root right comma key And here 

86
00:04:33.290 --> 00:04:36.250
first check if it is empty But it is not 

87
00:04:36.440 --> 00:04:40.090
now check if root data is equal to key But 

88
00:04:40.100 --> 00:04:43.960
again it fails So next check Whether to go to left 

89
00:04:43.960 --> 00:04:45.480
side or to Right side 

90
00:04:45.940 --> 00:04:49.210
So we have if root data less than the key 

91
00:04:49.220 --> 00:04:52.630
And it is true since we have 300 less than 

92
00:04:52.640 --> 00:04:53.480
500 

93
00:04:53.770 --> 00:04:57.340
So we have to go to right side So call function 

94
00:04:57.340 --> 00:05:02.270
Search by passing root right and key Now we have root 

95
00:05:02.270 --> 00:05:06.170
Right Equal to null So here when we check If root 

96
00:05:06.180 --> 00:05:09.800
equal to null it returns true That is the tree is 

97
00:05:09.810 --> 00:05:14.240
empty so return false as the key is not found So 

98
00:05:14.240 --> 00:05:16.340
that is how we can search a node in a 

99
00:05:16.340 --> 00:05:17.740
binary search tree 

100
00:05:17.860 --> 00:05:20.570
So we will call the search function recursively in the path but the node can possibly present.

