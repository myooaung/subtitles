WEBVTT

1
00:00:00.140 --> 00:00:02.990
for this problem we can reuse the same heap sort 

2
00:00:02.990 --> 00:00:03.550
code 

3
00:00:04.040 --> 00:00:05.750
This is the code for max heap 

4
00:00:06.240 --> 00:00:09.180
But for this problem we need to convert the Max 

5
00:00:09.180 --> 00:00:10.740
heap code into min heap 

6
00:00:10.800 --> 00:00:13.640
So in the heapify function just renamed the 

7
00:00:13.640 --> 00:00:15.350
variable Max into min 

8
00:00:15.940 --> 00:00:19.880
After that in the if else statement changed the greater 

9
00:00:19.880 --> 00:00:22.610
than operator into lesser than operator 

10
00:00:22.850 --> 00:00:23.420
That's it 

11
00:00:23.540 --> 00:00:26.700
We have converted the Max heap Code into min heap 

12
00:00:26.700 --> 00:00:27.050
code

13
00:00:27.540 --> 00:00:30.820
Next let us write the logic to extract the top 

14
00:00:30.820 --> 00:00:35.000
K elements from this min heap first write the function 

15
00:00:35.000 --> 00:00:38.740
to get top K elements which takes three parameters 

16
00:00:39.010 --> 00:00:42.070
First one is the array and the next one is its 

17
00:00:42.070 --> 00:00:44.950
size and third one is the value K 

18
00:00:45.740 --> 00:00:46.460
Now let us write 

19
00:00:46.460 --> 00:00:50.400
The logic as we have discussed we need to construct 

20
00:00:50.400 --> 00:00:54.000
the min heap for the first K elements so called 

21
00:00:54.000 --> 00:00:57.850
the build heap function with size as K minus one 

22
00:00:58.640 --> 00:01:02.030
After the min heap is constructed we need to compare 

23
00:01:02.030 --> 00:01:04.470
the remaining elements with root nodes value 

24
00:01:05.040 --> 00:01:07.290
If it is greater than the root we need to 

25
00:01:07.290 --> 00:01:10.120
replace the value and called the heapify process 

26
00:01:10.130 --> 00:01:10.550
again 

27
00:01:11.140 --> 00:01:13.650
So write a for loop to iterate the remaining 

28
00:01:13.650 --> 00:01:18.370
elements from index K to size and inside that we 

29
00:01:18.370 --> 00:01:21.480
need to check whether the current value is greater than 

30
00:01:21.480 --> 00:01:22.750
the root or not 

31
00:01:23.140 --> 00:01:26.390
So write if array of I is greater than array 

32
00:01:26.390 --> 00:01:29.460
of zero if it is greater than the root we 

33
00:01:29.460 --> 00:01:32.560
need to replace the root value with the current value 

34
00:01:32.810 --> 00:01:36.350
So write array of zero equal to array of I 

35
00:01:36.840 --> 00:01:38.910
and then we need to call the heapify 

36
00:01:38.910 --> 00:01:42.700
process to maintain the min heap order so 

37
00:01:42.700 --> 00:01:46.690
call the heapify function with arguments array and 

38
00:01:46.690 --> 00:01:49.450
the root index zero and the size K minus 

39
00:01:49.450 --> 00:01:49.750
one 

40
00:01:50.640 --> 00:01:54.510
After the execution of this loop the top K elements 

41
00:01:54.510 --> 00:01:56.250
will be present in the min heap 

42
00:01:56.840 --> 00:02:00.340
So write a for loop and printed top K elements 

43
00:02:00.560 --> 00:02:03.880
That's it we have implemented the logic to find the 

44
00:02:03.890 --> 00:02:05.150
top K elements.

