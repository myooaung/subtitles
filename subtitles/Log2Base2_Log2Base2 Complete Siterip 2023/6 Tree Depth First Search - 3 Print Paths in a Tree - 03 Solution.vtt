WEBVTT

1
00:00:00.140 --> 00:00:02.370
To print all paths of a tree 

2
00:00:02.380 --> 00:00:06.450
First let us create a function print paths that takes 

3
00:00:06.450 --> 00:00:10.530
the root node as an argument inside that function 

4
00:00:10.530 --> 00:00:14.640
let us create an array to store the path elements. So write 

5
00:00:14.720 --> 00:00:18.790
int paths[100] from here let us call the 

6
00:00:18.790 --> 00:00:22.820
actual recursive function to print the paths by passing the root node

7
00:00:22.820 --> 00:00:28.000
paths array and path length as arguments

8
00:00:28.010 --> 00:00:32.690
Print pathrecur of root node paths array and path length 

9
00:00:32.690 --> 00:00:33.140


10
00:00:33.240 --> 00:00:34.540
initially it is zero 

11
00:00:34.810 --> 00:00:38.840
So the print pathsrecur function will receive root node 

12
00:00:38.920 --> 00:00:42.250
paths array and path length as parameters 

13
00:00:42.740 --> 00:00:45.450
Now let us build the logic to print the paths 

14
00:00:45.850 --> 00:00:48.420
If root is equal to null, it is an empty tree

15
00:00:48.420 --> 00:00:50.850
So we can return straight away.

16
00:00:51.240 --> 00:00:54.080
Otherwise we need to store the root data in the 

17
00:00:54.080 --> 00:00:59.380
paths array and increment path length variable. So write 

18
00:00:59.380 --> 00:01:02.550
paths[pathLength ++] equal to root->data 

19
00:01:03.040 --> 00:01:04.540
After that we need to recursively

20
00:01:04.540 --> 00:01:07.370
call all the left and right sub trees 

21
00:01:07.370 --> 00:01:10.440
to finish the task. For the left sub tree 

22
00:01:10.450 --> 00:01:16.580
write print_paths_recur of root left paths pathsLength 

23
00:01:16.580 --> 00:01:19.150
For right sub tree write print_paths_recur 

24
00:01:19.150 --> 00:01:22.550
of root-right paths and path length

25
00:01:23.340 --> 00:01:26.770
So as we discussed in the hint video, both left 

26
00:01:26.770 --> 00:01:30.430
and right recursive calls will add the path elements one 

27
00:01:30.430 --> 00:01:31.850
by one recursively

28
00:01:32.240 --> 00:01:35.660
And finally we need to add printing logic to this programme.

29
00:01:35.660 --> 00:01:39.340
Whenever the recursive call reaches the leaf node

30
00:01:39.340 --> 00:01:39.700


31
00:01:39.710 --> 00:01:42.660
We need to stop the recursive calls and print the 

32
00:01:42.670 --> 00:01:45.570
path details which is present in the paths array

33
00:01:46.540 --> 00:01:49.820
So before the recursive calls we need to check whether 

34
00:01:49.820 --> 00:01:53.560
we have reached the leaf node or not. 

35
00:01:53.570 --> 00:01:57.220
For that, write if root-left equal to null and root-right equal to null

36
00:01:57.220 --> 00:02:00.820
that is if both left and right child is null

37
00:02:00.820 --> 00:02:03.810
 we have reached the leaf node . So we 

38
00:02:03.810 --> 00:02:08.340
can print the path details. For that write 

39
00:02:08.350 --> 00:02:11.930
print(paths, path length). So the print function will print 

40
00:02:11.930 --> 00:02:15.950
the elements present in the paths array till path length 

41
00:02:16.440 --> 00:02:18.560
So if it is not a leaf node, we have 

42
00:02:18.560 --> 00:02:22.260
to execute the recursive calls. So place both recursive

43
00:02:22.260 --> 00:02:24.450
calls inside an else block 

44
00:02:24.940 --> 00:02:27.250
Now we have almost finished our task 

45
00:02:27.430 --> 00:02:30.200
Finally we just need to write the logic for the 

46
00:02:30.210 --> 00:02:32.220
print function which is very simple.

47
00:02:32.430 --> 00:02:35.940
Just print the paths array using for loop till path length

48
00:02:35.940 --> 00:02:36.350


49
00:02:36.840 --> 00:02:38.350
And this is the logic for that.

50
00:02:38.740 --> 00:02:41.570
So that's it. We have implemented the logic for printing 

51
00:02:41.570 --> 00:02:42.870
the paths in a tree.

