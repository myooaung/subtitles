WEBVTT

1
00:00:00.840 --> 00:00:01.660
Hi friends 

2
00:00:01.670 --> 00:00:04.580
In this video we are going to discuss about recursion in C

3
00:00:10.080 --> 00:00:13.700
So basically a recursive function is a 

4
00:00:13.700 --> 00:00:15.980
function calling itself here 

5
00:00:15.990 --> 00:00:18.380
We can see a function fun is calling 

6
00:00:18.380 --> 00:00:21.970
itself Now let us discuss the basic rules of recursion

7
00:00:21.970 --> 00:00:24.610
The first rule is that recursive function 

8
00:00:24.610 --> 00:00:28.180
should call itself see fun is calling itself 

9
00:00:28.190 --> 00:00:30.340
the next rule is a very important one 

10
00:00:30.530 --> 00:00:33.230
The recursive function should have a base case where it 

11
00:00:33.230 --> 00:00:37.500
doesn't make any further recursive calls that is it 

12
00:00:37.500 --> 00:00:39.740
should not result in an infinite loop 

13
00:00:39.890 --> 00:00:42.450
At some point it should stop calling itself 

14
00:00:42.840 --> 00:00:45.699
If we assume N=5 we can return 

15
00:00:45.700 --> 00:00:47.860
from this loop when an equal to one 

16
00:00:48.050 --> 00:00:51.490
Since we are calling function using function(N-1)

17
00:00:51.490 --> 00:00:54.730
 the recursive calls will be function(5) function(4) 

18
00:00:54.730 --> 00:00:57.670
function(3) Function(2) and ends in
19
00:00:57.670 --> 00:00:58.640
function(1) 

20
00:00:58.650 --> 00:01:00.960
We need to define the base case based on the 

21
00:01:00.960 --> 00:01:05.380
situation. next rule is that all the recursive calls should 

22
00:01:05.390 --> 00:01:09.330
align towards the base case here base case is N=1

23
00:01:09.330 --> 00:01:12.000
and we are calling the function using N-1

24
00:01:12.000 --> 00:01:12.710
 

25
00:01:12.720 --> 00:01:15.250
So the recursive calls will be function(5)

26
00:01:15.250 --> 00:01:16.250
function(4) 

27
00:01:16.260 --> 00:01:17.260
function(3)

28
00:01:17.260 --> 00:01:19.869
function(2) and ends in function(1)

29
00:01:20.940 --> 00:01:23.539
But if we call the function using N+1 

30
00:01:23.640 --> 00:01:26.050
the reclusive calls will be function(6)

31
00:01:26.060 --> 00:01:27.180
Function(7)

32
00:01:27.180 --> 00:01:30.040
Function(8) and so on and it will never 

33
00:01:30.050 --> 00:01:30.360
end 

34
00:01:30.840 --> 00:01:31.280
So 

35
00:01:31.280 --> 00:01:34.240
recursive calls are not aligning towards the base case and 

36
00:01:34.240 --> 00:01:36.680
we shouldn't define the base case like this 

37
00:01:37.240 --> 00:01:38.580
Now let's see an example 

38
00:01:38.580 --> 00:01:41.320
Programme. A programme to find factorial of a number

39
00:01:41.320 --> 00:01:42.390
using Recursion.

40
00:01:42.740 --> 00:01:46.059
So if any problem can be divided into multiple smaller 

41
00:01:46.060 --> 00:01:48.820
versions of the same problem we can use recursive

42
00:01:48.820 --> 00:01:50.470
approach to solve that problem 

43
00:01:50.690 --> 00:01:53.730
For example to find factorial(6)

44
00:01:53.730 --> 00:01:58.170
It is actually 6 x 5 x 4 x 3 x 2 x 1

45
00:01:58.170 --> 00:02:01.380
 so first we can find six into five 

46
00:02:01.380 --> 00:02:02.960
which is 30 then multiple 

47
00:02:02.960 --> 00:02:06.120
30 with 4 we get 120 then 120 x 3

48
00:02:06.130 --> 00:02:09.390
 we get 360 then 360 x 2

49
00:02:09.390 --> 00:02:09.790


50
00:02:09.790 --> 00:02:13.970
we get 720 and finally 720 x1 we get 720 

51
00:02:13.970 --> 00:02:17.000
So we will use this logic in here so 

52
00:02:17.000 --> 00:02:19.710
we have the programme. The main function there we have 

53
00:02:19.720 --> 00:02:22.620
2 integer variables declared N and ans

54
00:02:22.630 --> 00:02:25.650
And now we are reading the number to N suppose

55
00:02:25.650 --> 00:02:25.990


56
00:02:25.990 --> 00:02:28.840
3 is the input we got. Now it is stored in N 

57
00:02:28.850 --> 00:02:31.560
we have if N greater than or equal to zero 

58
00:02:31.560 --> 00:02:34.540
which is to avoid negative numbers and which is true

59
00:02:34.540 --> 00:02:34.940
here 

60
00:02:35.220 --> 00:02:37.620
So we go inside and there we have  

61
00:02:37.620 --> 00:02:39.350
ans= factorial(N)

62
00:02:39.640 --> 00:02:42.070
So the control goes to the function and there we 

63
00:02:42.070 --> 00:02:45.179
have if Nless than = 1 which is 

64
00:02:45.180 --> 00:02:45.450
wrong 

65
00:02:45.450 --> 00:02:48.880
So we have return N x factorial(N-1)

66
00:02:48.880 --> 00:02:49.609
minus 

67
00:02:49.730 --> 00:02:51.890
So 3 x factorial(2)

68
00:02:52.100 --> 00:02:54.890
So it is calling this function again by passing N

69
00:02:54.890 --> 00:02:55.730
equal to two 

70
00:02:56.340 --> 00:02:58.940
Now one thing to understand here is that the function 

71
00:02:58.940 --> 00:03:01.690
calls will be created in the stack and after it 

72
00:03:01.690 --> 00:03:05.460
return the particular function will be cleared from the stack 

73
00:03:05.700 --> 00:03:08.680
So here we check If n less than =1 

74
00:03:08.680 --> 00:03:10.020
which is wrong 

75
00:03:10.140 --> 00:03:12.700
So we return N x factorial(1) 

76
00:03:12.840 --> 00:03:15.420
So again the function is called with N=1

77
00:03:15.420 --> 00:03:15.820


78
00:03:16.060 --> 00:03:18.400
Now when we check the if condition it is true 

79
00:03:18.640 --> 00:03:21.000
So it returns one to the calling function which is 

80
00:03:21.000 --> 00:03:22.060
factorial of two 

81
00:03:22.840 --> 00:03:25.790
So here this will be evaluated and 2 x 1

82
00:03:25.790 --> 00:03:29.290
will be returned to calling function factorial(3) and 

83
00:03:29.290 --> 00:03:30.600
in factorial(3)

84
00:03:30.640 --> 00:03:34.370
This return statement will now execute completely and return 3 x 2

85
00:03:34.370 --> 00:03:38.010
which is 6 to main function and assign to ans

86
00:03:38.020 --> 00:03:39.079
and it is printed 

87
00:03:39.090 --> 00:03:41.120
And finally the programme returns zero 

88
00:03:42.040 --> 00:03:45.190
Now let us discuss about stack overflow. In recursion

89
00:03:45.190 --> 00:03:45.510
 

90
00:03:45.510 --> 00:03:48.299
The new function calls will be created in stack memory 

91
00:03:48.300 --> 00:03:50.250
section as we just discussed 

92
00:03:50.400 --> 00:03:53.460
And if our function does not have any base case 

93
00:03:53.470 --> 00:03:56.079
it will keep on creating function calls in the stack 

94
00:03:56.080 --> 00:03:59.429
memory section and at some point in time the recursive

95
00:03:59.430 --> 00:04:02.609
function calls overflows the stack memory section as it does 

96
00:04:02.610 --> 00:04:04.130
not have any stopping point 

97
00:04:04.940 --> 00:04:07.930
This can also happen when the recursive function call

98
00:04:07.930 --> 00:04:10.120
does not align towards the base case 

99
00:04:10.290 --> 00:04:13.150
This is called a stack overflow in Recursion.

100
00:04:14.440 --> 00:04:16.720
So that's all and thank you for watching this video 

