WEBVTT

1
00:00:00.740 --> 00:00:03.190
in this video we are going to learn about the 

2
00:00:03.200 --> 00:00:07.010
Queue data structure in real life 

3
00:00:07.070 --> 00:00:09.950
A Queue is very familiar to all of us 

4
00:00:10.340 --> 00:00:13.410
For example when we go to a bank we need 

5
00:00:13.410 --> 00:00:16.130
to stand in a queue and the person who is 

6
00:00:16.130 --> 00:00:18.850
first in the line will be served first 

7
00:00:19.240 --> 00:00:22.160
This is exactly what is happening with a Queue Data 

8
00:00:22.160 --> 00:00:22.820
structure 

9
00:00:23.030 --> 00:00:25.970
We have a FIFO that is first in first 

10
00:00:25.970 --> 00:00:30.440
out functionality here so the person or the element who 

11
00:00:30.440 --> 00:00:34.150
came first will be served first and will be gone 

12
00:00:34.160 --> 00:00:35.400
out of the queue 

13
00:00:35.520 --> 00:00:39.450
So in a Queue an Element comes in at one 

14
00:00:39.460 --> 00:00:42.150
end and leaves from the other end 

15
00:00:42.540 --> 00:00:45.700
So a Queue has two ends so let us see the 

16
00:00:45.710 --> 00:00:47.300
implementation of a Queue

17
00:00:47.310 --> 00:00:50.900
First we declare an array of size three so we 

18
00:00:50.900 --> 00:00:55.610
have static final int size equal to 3 and we have 

19
00:00:55.620 --> 00:01:00.120
int arr equal to new int of size and 

20
00:01:00.120 --> 00:01:03.720
this array of size three will be our queue and 

21
00:01:03.730 --> 00:01:05.150
it is initially empty 

22
00:01:05.460 --> 00:01:09.420
So as we just discussed in a queue insertion happens 

23
00:01:09.420 --> 00:01:12.690
at one end and deletion happens at the other end 

24
00:01:12.990 --> 00:01:17.170
The end where insertion happens is called the rear end and 

25
00:01:17.170 --> 00:01:18.920
the other end were deletion 

26
00:01:18.920 --> 00:01:21.050
Happens is called the front end 

27
00:01:21.440 --> 00:01:25.120
So here we need two variables Front and Rear to 

28
00:01:25.120 --> 00:01:27.260
represent two ends of the queue 

29
00:01:27.440 --> 00:01:31.000
And since the queue is empty both rear and front 

30
00:01:31.010 --> 00:01:35.080
are the same now so both are initialised to 0 so 

31
00:01:35.090 --> 00:01:38.410
int front equal to zero and int rear equal 

32
00:01:38.410 --> 00:01:39.050
to zero 

33
00:01:39.640 --> 00:01:42.920
First let us see how to insert an element into 

34
00:01:42.920 --> 00:01:46.750
the queue and this operation is called enqueue 

35
00:01:47.240 --> 00:01:50.530
So we have the function enqueue here for insertion 

36
00:01:50.540 --> 00:01:53.140
into the queue and we will pass the value to 

37
00:01:53.140 --> 00:01:55.230
be inserted into this function 

38
00:01:55.330 --> 00:01:59.240
So we have public void enqueue of int val 

39
00:01:59.440 --> 00:02:02.840
Now let us insert the element 10 in into this queue 

40
00:02:02.910 --> 00:02:05.900
so we can call the function enqueue bypassing the 

41
00:02:05.900 --> 00:02:09.650
value 10 and in the function first we need to check 

42
00:02:09.660 --> 00:02:13.910
If the queue is full then insertion is not possible 

43
00:02:13.970 --> 00:02:14.910
So we have 

44
00:02:15.040 --> 00:02:19.100
If rear equal to size then print queue is full 

45
00:02:19.220 --> 00:02:22.030
But here it is not since we have rear equal 

46
00:02:22.030 --> 00:02:24.050
to zero and size equal to three 

47
00:02:24.440 --> 00:02:27.350
So the condition fails and control goes to the else 

48
00:02:27.350 --> 00:02:28.810
part and here 

49
00:02:28.820 --> 00:02:30.890
We need to insert the element 10

50
00:02:31.030 --> 00:02:33.290
So we need to add the value at the rear 

51
00:02:33.300 --> 00:02:37.340
and so write array of rear equal to val so the 

52
00:02:37.340 --> 00:02:38.660
element is inserted 

53
00:02:38.790 --> 00:02:41.510
Now we need to implement rear so that the next 

54
00:02:41.520 --> 00:02:43.380
element will be inserted here 

55
00:02:43.700 --> 00:02:47.630
So write rear plus plus So rear will be moved one 

56
00:02:47.630 --> 00:02:52.010
position right and becomes one now let us insert another 

57
00:02:52.010 --> 00:02:55.400
element 20 so we can call the function enqueue 

58
00:02:55.410 --> 00:02:57.700
With Val equal to 20 1st 

59
00:02:57.720 --> 00:03:00.470
We need to check if Queue is full but it 

60
00:03:00.470 --> 00:03:03.280
is not since rear equal to one and size equal 

61
00:03:03.280 --> 00:03:03.830
to three 

62
00:03:03.840 --> 00:03:06.780
So we go to the else part and 20 is 

63
00:03:06.790 --> 00:03:08.060
added at the rear 

64
00:03:08.110 --> 00:03:10.350
And now we need to implement rear 

65
00:03:10.440 --> 00:03:15.390
So rear becomes two now let us insert 30 into this queue 

66
00:03:15.400 --> 00:03:17.730
So again called the function check 

67
00:03:17.740 --> 00:03:20.680
If rear equal to size which is not so go 

68
00:03:20.680 --> 00:03:21.090
to else

69
00:03:21.090 --> 00:03:25.530
part add 30 at rear and increment rear So rear 

70
00:03:25.540 --> 00:03:26.710
equal to Three now 

71
00:03:26.770 --> 00:03:30.270
Now let us tried to insert another element 40 so 

72
00:03:30.270 --> 00:03:32.930
we can call the function enqueue and in the 

73
00:03:32.930 --> 00:03:33.550
function 

74
00:03:33.740 --> 00:03:37.590
First it will check if rear equal to size which 

75
00:03:37.590 --> 00:03:38.530
is true here 

76
00:03:38.610 --> 00:03:42.590
So the queue is full so insertion is not possible 

77
00:03:42.670 --> 00:03:46.210
so this message will be printed and exit from the 

78
00:03:46.210 --> 00:03:46.840
function 

79
00:03:47.050 --> 00:03:49.980
So that was insertion into the queue or the 

80
00:03:49.980 --> 00:03:53.930
enqueue operation and we always insert element at the 

81
00:03:53.940 --> 00:03:55.150
rear end of the queue 

82
00:03:55.540 --> 00:03:58.180
Now let us see how to delete an element from 

83
00:03:58.180 --> 00:03:58.650
a Queue 

84
00:03:59.340 --> 00:04:02.320
And the deletion operation in a queue is called the 

85
00:04:02.320 --> 00:04:06.450
dequeue operation and we always delete an element from 

86
00:04:06.450 --> 00:04:07.850
the front end of the queue 

87
00:04:08.340 --> 00:04:11.280
So we have the function dequeue to perform deletion 

88
00:04:11.280 --> 00:04:15.870
from a queue so we have public void dequeue First 

89
00:04:15.880 --> 00:04:16.900
we need to check 

90
00:04:16.910 --> 00:04:19.990
If the Queue is empty then deletion is not 

91
00:04:19.990 --> 00:04:22.950
possible as there are no elements to delete 

92
00:04:23.160 --> 00:04:26.400
And when will a Queue be empty When Front and 

93
00:04:26.400 --> 00:04:30.050
rear are pointing the same location Then we can say 

94
00:04:30.060 --> 00:04:31.250
the Queue is empty 

95
00:04:31.740 --> 00:04:36.050
So write If front equal to rear then print Queue is 

96
00:04:36.060 --> 00:04:36.790
empty 

97
00:04:36.900 --> 00:04:39.710
But here front equal to 0 and rear equal to 

98
00:04:39.710 --> 00:04:40.170
three 

99
00:04:40.360 --> 00:04:43.850
So conditioned fails and control goes to the else part 

100
00:04:44.440 --> 00:04:47.070
and first let us print the value that we are 

101
00:04:47.070 --> 00:04:50.750
going to delete which will always be the element at 

102
00:04:50.750 --> 00:04:52.250
the front end of the queue 

103
00:04:52.840 --> 00:04:54.930
So write system dot out 

104
00:04:54.990 --> 00:04:56.240
dot println of dequeue 

105
00:04:56.240 --> 00:05:00.700
element equal to array of front Now increment front to 

106
00:05:00.700 --> 00:05:02.450
remove the element at front 

107
00:05:02.840 --> 00:05:07.030
So write front plus plus So here it makes front 

108
00:05:07.040 --> 00:05:09.970
equal to one and 10 will be deleted from the 

109
00:05:09.970 --> 00:05:10.460
queue 

110
00:05:10.470 --> 00:05:13.710
So the element which came first into the queue is 

111
00:05:13.710 --> 00:05:17.550
deleted first and that is the functionality of a Queue 

112
00:05:18.140 --> 00:05:20.350
Now let us perform deletion again 

113
00:05:20.680 --> 00:05:23.330
So we called the dequeue function and first we 

114
00:05:23.330 --> 00:05:25.450
check if rear equal to front 

115
00:05:25.840 --> 00:05:29.020
But we have rear equal three and front equal to 

116
00:05:29.020 --> 00:05:29.320
one 

117
00:05:29.330 --> 00:05:32.240
So the condition fails and we go to else part 

118
00:05:32.470 --> 00:05:35.330
Now here we will print the value at front which 

119
00:05:35.330 --> 00:05:39.060
is 20 and now Increment front which will make 20 

120
00:05:39.070 --> 00:05:41.800
no more a part of the queue again 

121
00:05:41.800 --> 00:05:44.420
Let us call dequeue and we check if queue 

122
00:05:44.420 --> 00:05:45.280
is empty 

123
00:05:45.290 --> 00:05:47.880
But we have front equal to two and rear equal to 

124
00:05:47.880 --> 00:05:48.380
three 

125
00:05:48.440 --> 00:05:51.470
So this condition fails and control goes to else 

126
00:05:51.470 --> 00:05:51.950
Part 

127
00:05:52.540 --> 00:05:56.030
And there we print 30 which is to be deleted 

128
00:05:56.300 --> 00:06:00.050
And then we increments front which makes front equal to 3 

129
00:06:00.540 --> 00:06:03.090
and 30 is now deleted from the queue 

130
00:06:03.200 --> 00:06:05.940
Now let us try to perform deletion again 

131
00:06:06.000 --> 00:06:08.990
So we called the function dequeue and it checks 

132
00:06:09.100 --> 00:06:10.710
a front equal to rear 

133
00:06:10.820 --> 00:06:13.720
And it is true since we have front equal to 

134
00:06:13.720 --> 00:06:17.030
three and rear equal to three so deletion is not 

135
00:06:17.030 --> 00:06:20.240
possible since the Queue is empty so exit from the 

136
00:06:20.240 --> 00:06:20.850
function 

137
00:06:21.040 --> 00:06:24.390
Now let us understand this more using the angry birds 

138
00:06:24.940 --> 00:06:28.040
so we can add birds one after the other at 

139
00:06:28.040 --> 00:06:31.140
the same end and from the other end we can 

140
00:06:31.140 --> 00:06:32.550
send the birds out 

141
00:06:33.040 --> 00:06:36.940
So adding birds at one end and removing them at 

142
00:06:36.940 --> 00:06:40.250
the other end and who came first is gone out 

143
00:06:40.250 --> 00:06:40.810
first 

144
00:06:41.130 --> 00:06:44.010
And it is a perfect first in first out data 

145
00:06:44.010 --> 00:06:45.150
Structure Queue. 

