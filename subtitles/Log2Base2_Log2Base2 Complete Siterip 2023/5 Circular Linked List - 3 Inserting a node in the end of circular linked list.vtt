WEBVTT

1
00:00:00.690 --> 00:00:03.740
in this video let us discuss how to insert a 

2
00:00:03.740 --> 00:00:06.450
node at the end of his circular linked list 

3
00:00:07.640 --> 00:00:10.330
So here the new node will be inserted at the 

4
00:00:10.340 --> 00:00:10.790
end 

5
00:00:11.130 --> 00:00:15.660
For example we have this link list 10 20 30 and 

6
00:00:15.670 --> 00:00:18.850
if we insert a new node 100 it will be 

7
00:00:18.860 --> 00:00:21.530
inserted at the end and we will get them new 

8
00:00:21.530 --> 00:00:23.570
circular linked list like this 

9
00:00:24.150 --> 00:00:26.240
10 20 30 100 

10
00:00:26.560 --> 00:00:29.240
Now let us see how to insert new node at 

11
00:00:29.240 --> 00:00:31.240
the end of a circular linked list 

12
00:00:31.410 --> 00:00:33.450
Here we have two cases 

13
00:00:33.840 --> 00:00:36.970
The first case is when the list is empty 

14
00:00:37.100 --> 00:00:40.180
Then the new node inserted will be the only node 

15
00:00:40.380 --> 00:00:43.020
and it becomes the head node and will point to 

16
00:00:43.020 --> 00:00:46.880
itself the second case is when the list has at least 

17
00:00:46.880 --> 00:00:47.650
one node 

18
00:00:47.710 --> 00:00:50.620
Then we need to find the last node by traversing 

19
00:00:50.620 --> 00:00:53.650
the list and then in insert the new node after the 

20
00:00:53.650 --> 00:00:54.350
last node 

21
00:00:54.540 --> 00:00:57.260
And it should point to the head now let us see its

22
00:00:57.260 --> 00:00:58.840
implementation in Java 

23
00:00:58.850 --> 00:01:01.400
So this is the function which will add the new 

24
00:01:01.400 --> 00:01:03.450
node at the end of the list 

25
00:01:03.560 --> 00:01:05.680
We will pass the value to be added to the 

26
00:01:05.680 --> 00:01:06.230
function 

27
00:01:06.240 --> 00:01:09.210
Add last and it will create a new node with 

28
00:01:09.210 --> 00:01:12.150
that value and inserted at the end 

29
00:01:12.240 --> 00:01:15.450
So we have public void add last of int val 

30
00:01:15.840 --> 00:01:17.440
So let's see how it works 

31
00:01:17.940 --> 00:01:20.980
So here first we have an empty circular linked 

32
00:01:20.980 --> 00:01:23.240
list so head is equal to null 

33
00:01:23.500 --> 00:01:26.070
Now let us insert a node with Value ten 

34
00:01:26.080 --> 00:01:29.720
So we will call the function add last by passing ten 

35
00:01:29.810 --> 00:01:31.440
and let us see what happens 

36
00:01:31.570 --> 00:01:33.150
So Val is equal to ten 

37
00:01:33.430 --> 00:01:36.280
So first we need to create the new node using 

38
00:01:36.280 --> 00:01:41.550
new so write node new node equal to new node 

39
00:01:41.830 --> 00:01:45.370
So we have a new node created at address 1000 

40
00:01:45.450 --> 00:01:47.880
Now we need to add the data to the data 

41
00:01:47.880 --> 00:01:52.060
part so write new node dot data equal to val so 

42
00:01:52.060 --> 00:01:53.580
10 is added here 

43
00:01:53.590 --> 00:01:56.910
Now if the list is empty new node will be 

44
00:01:56.910 --> 00:01:59.610
the only node and it should become the head 

45
00:01:59.680 --> 00:02:00.560
So check it 

46
00:02:00.790 --> 00:02:03.150
And here we got head equal to null 

47
00:02:03.540 --> 00:02:06.960
So that means this list is currently empty 

48
00:02:06.970 --> 00:02:08.990
So it will be the only node 

49
00:02:09.000 --> 00:02:12.000
So it should become the head and it's next should 

50
00:02:12.000 --> 00:02:13.280
point to itself 

51
00:02:13.290 --> 00:02:16.790
So said new node dot next equal to new node 

52
00:02:17.030 --> 00:02:18.150
and make it the head 

53
00:02:18.260 --> 00:02:21.150
So we have head equal to new node so head 

54
00:02:21.150 --> 00:02:24.250
has the address 1000 it points to the node 

55
00:02:24.340 --> 00:02:27.390
Now we have a circular linked list with one node 

56
00:02:27.460 --> 00:02:30.630
let us insert another node with value 20 

57
00:02:30.640 --> 00:02:33.360
So first create the new node using new 

58
00:02:33.370 --> 00:02:36.430
So the node is created at address 2000 

59
00:02:36.440 --> 00:02:39.470
Like this now at the value 20 at the data 

60
00:02:39.470 --> 00:02:39.900
part 

61
00:02:39.980 --> 00:02:43.670
For that we have new node dot data equal to 

62
00:02:43.670 --> 00:02:44.150
val 

63
00:02:44.340 --> 00:02:47.630
So twenties added here now check If the list is 

64
00:02:47.640 --> 00:02:50.920
empty and if it is empty head will be equal 

65
00:02:50.920 --> 00:02:51.430
to null 

66
00:02:51.440 --> 00:02:54.620
But here it is not so if will fail so 

67
00:02:54.620 --> 00:02:55.730
go to else part 

68
00:02:55.840 --> 00:02:59.450
Now find the last node by traversing the list and 

69
00:02:59.450 --> 00:03:02.420
in normal linked list the last node will be pointing 

70
00:03:02.420 --> 00:03:04.620
null and in circular linked list 

71
00:03:04.630 --> 00:03:07.670
The last node will be pointing the head so creating 

72
00:03:07.670 --> 00:03:11.030
temporary variable last initially pointing to head 

73
00:03:11.040 --> 00:03:14.990
So write node last equal to head and use a 

74
00:03:14.990 --> 00:03:18.880
while loop to Travers the list till last dot next 

75
00:03:18.890 --> 00:03:19.680
equal to head 

76
00:03:19.840 --> 00:03:22.890
And when the Loop terminates last will point to the 

77
00:03:22.890 --> 00:03:24.290
last node here 

78
00:03:24.300 --> 00:03:25.700
Last equal to 1000 

79
00:03:25.700 --> 00:03:29.700
Now So check if last dot next not equal to head 

80
00:03:29.740 --> 00:03:32.730
But it is so condition will fail and it will 

81
00:03:32.730 --> 00:03:34.330
terminate now itself 

82
00:03:34.410 --> 00:03:35.140
So we got the 

83
00:03:35.140 --> 00:03:35.870
Last node 

84
00:03:35.870 --> 00:03:38.870
Now and now we have to insert the new node 

85
00:03:38.880 --> 00:03:40.270
after the last node 

86
00:03:40.450 --> 00:03:44.080
So write last dot next equal to new node 

87
00:03:44.180 --> 00:03:47.840
And it should point to the current head write new 

88
00:03:47.840 --> 00:03:49.990
node dot next equal to head 

89
00:03:50.200 --> 00:03:53.210
So the new node is now the last node of 

90
00:03:53.220 --> 00:03:54.720
the circular linked list 

91
00:03:54.730 --> 00:03:57.530
So now we have the circular linked list with two 

92
00:03:57.530 --> 00:03:58.140
nodes 

93
00:03:58.230 --> 00:04:01.350
now let us insert another node with value 30 

94
00:04:01.840 --> 00:04:03.770
So first create the new node 

95
00:04:03.830 --> 00:04:07.790
So the notice created at address 3000 like this now 

96
00:04:07.800 --> 00:04:11.200
at the value 30 at the data part Now check 

97
00:04:11.210 --> 00:04:13.750
If the list is empty but it is not 

98
00:04:13.900 --> 00:04:16.650
So go to the else part and find the last 

99
00:04:16.650 --> 00:04:18.380
node by traversing the list 

100
00:04:18.410 --> 00:04:21.400
And we have last pointing to the head and using 

101
00:04:21.400 --> 00:04:24.840
a while loop traversed the list till last dot next 

102
00:04:24.850 --> 00:04:27.860
equal to head and here last equal to 1000 

103
00:04:28.030 --> 00:04:31.940
So check if last dot next not 

104
00:04:31.940 --> 00:04:34.740
equal to head and it is equal to 2000 and 

105
00:04:34.740 --> 00:04:35.670
not equal to head

106
00:04:35.860 --> 00:04:37.520
So the condition is okay 

107
00:04:37.530 --> 00:04:39.730
So move last to the next node 

108
00:04:39.850 --> 00:04:41.570
The last equal to 2000 

109
00:04:41.570 --> 00:04:45.010
Now Now chek if last dot next not equal to 

110
00:04:45.010 --> 00:04:48.230
head but it is equal to head so the condition 

111
00:04:48.230 --> 00:04:50.400
will fail and loop will terminate 

112
00:04:50.500 --> 00:04:51.980
So we got last node 

113
00:04:51.980 --> 00:04:55.060
Now Now we have to insert it after the last 

114
00:04:55.060 --> 00:04:55.440
node 

115
00:04:55.690 --> 00:04:59.310
So we have last dot next equal to new node 

116
00:04:59.420 --> 00:05:00.900
and it should point to the head 

117
00:05:00.910 --> 00:05:04.050
So write new node dot Next equal to head 

118
00:05:04.540 --> 00:05:07.260
So now we have the circular linked list with three 

119
00:05:07.260 --> 00:05:10.220
nodes and the node at 1000 is the head 

120
00:05:10.320 --> 00:05:12.920
So that is how we can insert nodes at the 

121
00:05:12.930 --> 00:05:14.880
end of a circular linked list 

122
00:05:14.980 --> 00:05:17.550
Now let us discuss about the time complexity 

123
00:05:17.940 --> 00:05:20.980
We need to traverse the entire list to find the 

124
00:05:20.980 --> 00:05:21.760
last node 

125
00:05:21.820 --> 00:05:25.600
Then new node will be inserted after this last node 

126
00:05:25.640 --> 00:05:28.750
So the time complexity will be order of n so thats all thanks for watching this video 

