WEBVTT

1
00:00:00.740 --> 00:00:01.400
Hi friends 

1
00:00:01.400 --> 00:00:02.969
In this video we are going to learn 

2
00:00:02.970 --> 00:00:03.780
about typedef in C. 

3
00:00:10.780 --> 00:00:15.050
So using typedef we can create a new name for a data type 

4
00:00:15.440 --> 00:00:18.090
So the syntax of type def is the key word 

5
00:00:18.100 --> 00:00:22.320
type followed by the data type like int char float 

6
00:00:22.330 --> 00:00:25.300
or double followed by the new name you want for 

7
00:00:25.300 --> 00:00:28.000
that datatype and finally a semi colon 

8
00:00:28.540 --> 00:00:31.520
See an example we have typedef int name 

9
00:00:31.530 --> 00:00:34.720
So from now we can use name instead of int 

10
00:00:34.730 --> 00:00:38.860
so we can declare integer variables i,j,k like this 

11
00:00:38.870 --> 00:00:40.910
name i,j,k 

12
00:00:40.920 --> 00:00:45.000
Here the compiler will convert it into int i,j,k 

13
00:00:46.440 --> 00:00:47.660
See another example 

14
00:00:47.660 --> 00:00:49.670
Typedef int *iptr 

15
00:00:50.060 --> 00:00:53.250
So from now to create integer Pointer we can 

16
00:00:53.250 --> 00:00:55.190
use the name iptr 

17
00:00:55.640 --> 00:00:58.460
So here we have iptr p,q

18
00:00:58.460 --> 00:01:01.830
 and the compiler will convert it into  

19
00:01:01.830 --> 00:01:02.779
int *p,*q

20
00:01:02.780 --> 00:01:05.399
 now 

21
00:01:05.410 --> 00:01:08.420
What is the difference between #define and typedef?

22
00:01:08.430 --> 00:01:12.150
#define is interpreted by the pre processor whereas typedef 

23
00:01:12.150 --> 00:01:15.740
is interpreted by the compiler. #define works for 

24
00:01:15.740 --> 00:01:17.280
both types and values 

25
00:01:17.290 --> 00:01:17.900
Example 

26
00:01:17.900 --> 00:01:22.410
#define int i. #define size 50 but typedef

27
00:01:22.410 --> 00:01:24.260
only works for types 

28
00:01:24.270 --> 00:01:25.060
Example 

29
00:01:25.180 --> 00:01:27.730
Typedif int num using typedef

30
00:01:27.730 --> 00:01:29.760
 we cannot define values 

31
00:01:29.770 --> 00:01:30.580
Example 

32
00:01:30.590 --> 00:01:35.300
Type def size 50 and another important difference is that in 

33
00:01:35.300 --> 00:01:38.420
case of #define there is normal text substitution 

34
00:01:38.430 --> 00:01:38.630
Here we can see that

35
00:01:38.630 --> 00:01:42.530
#define iptr int*

36
00:01:42.530 --> 00:01:46.590
so wherever iptr is encountered the pre processor substitute it with 

37
00:01:46.600 --> 00:01:47.400
int *

38
00:01:47.560 --> 00:01:50.870
So here the variable P becomes integer pointer type 

39
00:01:51.540 --> 00:01:53.450
and Q becomes integer type 

40
00:01:53.760 --> 00:01:56.270
But in case of typedef, it works beyond the 

41
00:01:56.270 --> 00:02:00.470
normal text substitution and the compiler converts this statement into 

42
00:02:00.480 --> 00:02:03.720
int *p,*q and here both 

43
00:02:03.730 --> 00:02:04.120
p and

44
00:02:04.120 --> 00:02:07.380
Q becomes integer pointer type so let us see 

45
00:02:07.380 --> 00:02:08.930
the benefits of typedef

46
00:02:09.020 --> 00:02:11.780
One main benefit is better documentation 

47
00:02:11.790 --> 00:02:14.280
Here we have a code and here whenever we want 

48
00:02:14.280 --> 00:02:17.179
to declare a new struct variable we need to use 

49
00:02:17.190 --> 00:02:19.820
whole struct point again and again 

50
00:02:19.930 --> 00:02:22.820
But had we used typedef here, it would have 

51
00:02:22.820 --> 00:02:24.050
been a lot easier 

52
00:02:25.040 --> 00:02:27.890
See we have created a new name for struct point 

53
00:02:27.900 --> 00:02:31.850
using typedef here the new name is point_t 

54
00:02:32.640 --> 00:02:35.670
so we can use point_t instead of using struct 

55
00:02:35.670 --> 00:02:36.200
point 

56
00:02:36.640 --> 00:02:39.950
Now we can also use typedef while declaring the 

57
00:02:39.950 --> 00:02:44.570
structure like this and other important benefit is using typedef 

58
00:02:44.570 --> 00:02:47.910
If we can get easy portable code. assume that the current 

59
00:02:47.910 --> 00:02:51.660
machine architecture supports the type int and we have finished 

60
00:02:51.660 --> 00:02:54.030
the code with type int and suppose we want to 

61
00:02:54.030 --> 00:02:57.180
change the machine architecture to the newer version which supports 

62
00:02:57.180 --> 00:02:59.799
the type long int. here 

63
00:02:59.810 --> 00:03:02.650
We need to change the type int into long int 

64
00:03:02.660 --> 00:03:03.760
throughout the programme 

65
00:03:03.850 --> 00:03:06.350
So what can we do? One thing that we can 

66
00:03:06.360 --> 00:03:08.980
do is we can manually change all occurrence of 

67
00:03:08.990 --> 00:03:10.299
int with long int 

68
00:03:10.310 --> 00:03:12.920
But if the code base is very large like this 

69
00:03:12.930 --> 00:03:15.010
It is extremely difficult to change it 

70
00:03:15.020 --> 00:03:18.820
So what is the solution? We can just create a 

71
00:03:18.820 --> 00:03:22.079
new name for int using typedef like typedef int  

72
00:03:22.090 --> 00:03:25.060
 number and write the code with the new name 

73
00:03:25.060 --> 00:03:25.610
number 

74
00:03:25.620 --> 00:03:28.120
And now if we want to change the datatype for 

75
00:03:28.130 --> 00:03:30.840
any reason we can easily change it in the typedef 

76
00:03:30.900 --> 00:03:32.850
rather than the whole code base 

77
00:03:32.860 --> 00:03:36.970
We can just change the typedef statement type int

78
00:03:36.980 --> 00:03:40.100
is changed to type long int and it will be changed 

79
00:03:40.110 --> 00:03:41.250
in the whole programme 

80
00:03:42.740 --> 00:03:45.030
So that's all and thank you for watching this video 

