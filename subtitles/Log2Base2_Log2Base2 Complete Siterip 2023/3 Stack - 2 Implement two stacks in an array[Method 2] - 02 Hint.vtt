WEBVTT

1
00:00:00.040 --> 00:00:03.810
An efficient method to implement two stacks in a single 

2
00:00:03.820 --> 00:00:07.550
array is to start two stacks from the two ends 

3
00:00:07.560 --> 00:00:12.310
of the array. Stack1 from left most end and stack2

4
00:00:12.310 --> 00:00:14.130
from right most end 

5
00:00:14.490 --> 00:00:17.910
So two stacks grow in opposite directions 

6
00:00:18.120 --> 00:00:21.990
So initially top1 will be -1 and top2

7
00:00:21.990 --> 00:00:23.090
will be size.

8
00:00:23.420 --> 00:00:26.050
Hence the empty case of stack1

9
00:00:26.060 --> 00:00:29.650
is when top1 is equal to -1 

10
00:00:30.140 --> 00:00:33.830
and the empty case for stack2 is when top2 

11
00:00:33.840 --> 00:00:35.090
is equal to size. 

12
00:00:35.460 --> 00:00:38.690
So what will be the stack full case? In this 

13
00:00:38.690 --> 00:00:43.160
case, Stack is full when top1 and top2

14
00:00:43.170 --> 00:00:45.050
are in adjacent positions.

15
00:00:45.440 --> 00:00:48.950
And in this case either of the stack won't grow.

16
00:00:49.740 --> 00:00:53.430
So the stack full case we need to check top1 

17
00:00:53.430 --> 00:00:56.750
 and top2 indices are adjacent 

18
00:00:57.140 --> 00:00:58.780
We can do that in two ways 

19
00:00:59.440 --> 00:01:02.500
The first method is by checking top2's 

20
00:01:02.500 --> 00:01:07.490
previous index is top1 that is top1 equal to 

21
00:01:07.500 --> 00:01:11.960
top2-1 or we can check top1's

22
00:01:11.960 --> 00:01:14.580
next index is top2. 

23
00:01:14.750 --> 00:01:18.490
That is top1 + 1equal to top2 

24
00:01:18.490 --> 00:01:18.850
So using this, you can implement the stack efficiently.

