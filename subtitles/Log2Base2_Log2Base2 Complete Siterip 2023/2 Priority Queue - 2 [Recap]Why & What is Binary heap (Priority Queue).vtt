WEBVTT

1
00:00:00.540 --> 00:00:04.020
Hello friends! In this video let us discuss about the 

2
00:00:04.020 --> 00:00:05.550
need for binary heap 

3
00:00:11.340 --> 00:00:14.650
Let us assume some people are standing in the hospital 

4
00:00:14.710 --> 00:00:15.450
in a queue 

5
00:00:16.240 --> 00:00:19.690
Now what is the property of a queue? The person 

6
00:00:19.690 --> 00:00:22.849
who comes first will be sent to the doctor first 

7
00:00:23.340 --> 00:00:25.910
But what if a person comes in a serious

8
00:00:25.910 --> 00:00:30.840
condition? We need to give him some priority. Right? 

9
00:00:30.840 --> 00:00:32.750
And he should visit the doctor first

10
00:00:32.200 --> 00:00:32.750


11
00:00:33.240 --> 00:00:35.090
We can call this as a Priority Queue. 

12
00:00:35.090 --> 00:00:39.449
 that is each item in a queue is given 

13
00:00:39.450 --> 00:00:43.800
some priority and further dequeue operation will be done 

14
00:00:43.810 --> 00:00:45.190
based on the priority 

15
00:00:46.100 --> 00:00:50.820
This is also called as a Priority Queue. We can efficiently 

16
00:00:50.820 --> 00:00:53.949
implement a priority queue using binary heap 

17
00:00:54.640 --> 00:00:57.949
Now let us learn what is a binary heap 

18
00:00:58.540 --> 00:01:02.390
A binary heap is a complete binary tree which satisfies 

19
00:01:02.390 --> 00:01:06.750
the heap ordering property. Before discussing with heap 

20
00:01:06.760 --> 00:01:10.110
Let us understand the difference between a full tree and 

21
00:01:10.110 --> 00:01:11.150
a complete tree 

22
00:01:11.940 --> 00:01:15.330
A full binary tree is a tree in which every 

23
00:01:15.330 --> 00:01:18.350
node other than the leaves has two children 

24
00:01:18.970 --> 00:01:23.330
See here every node has exactly two children other than 

25
00:01:23.340 --> 00:01:26.750
the leaves. This is called a full tree 

26
00:01:27.390 --> 00:01:31.039
where a complete binary tree is a full tree in 

27
00:01:31.040 --> 00:01:34.679
which the last level may contain lesser nodes but it 

28
00:01:34.680 --> 00:01:36.850
should be as left as possible 

29
00:01:38.240 --> 00:01:41.920
See here the last level is incomplete but the nodes

30
00:01:42.090 --> 00:01:46.690
are as left as possible. So this is called a 

31
00:01:46.690 --> 00:01:49.410
complete tree. In the same tree, 

32
00:01:49.520 --> 00:01:52.539
If last level nodes are in the right side leaving 

33
00:01:52.540 --> 00:01:55.949
the left side vacant, then it is not a complete tree 

34
00:01:55.630 --> 00:01:55.949
 

35
00:01:56.400 --> 00:01:59.770
The last level nodes should be as left as possible 

36
00:02:00.440 --> 00:02:03.520
so the binary heap is a complete tree that is 

37
00:02:03.530 --> 00:02:05.140
other than the last level 

38
00:02:05.400 --> 00:02:07.850
All levels should be filled completely 

39
00:02:08.540 --> 00:02:12.350
We have two kinds of heaps - Min-heap and Max-heap

40
00:02:12.050 --> 00:02:12.350


41
00:02:12.940 --> 00:02:15.040
First let's discuss about min heap

42
00:02:15.720 --> 00:02:19.369
In min heap, every parent node value will be lesser 

43
00:02:19.370 --> 00:02:20.780
than the children's value 

44
00:02:21.240 --> 00:02:24.590
That is the parent node will have the minimum value 

45
00:02:25.040 --> 00:02:26.120
See this example 

46
00:02:26.160 --> 00:02:27.850
This is a min heap tree 

47
00:02:28.240 --> 00:02:29.900
We can take any subtree

48
00:02:29.950 --> 00:02:31.980
It's root will be the minimum value 

49
00:02:32.410 --> 00:02:35.260
Take the right subtree 40 is the root and it 

50
00:02:35.260 --> 00:02:37.450
is the minimum value in this sub tree 

51
00:02:38.140 --> 00:02:41.170
Now take the left sub tree. 20 is the root.

52
00:02:41.250 --> 00:02:44.280
and it is the minimum value and the root of

53
00:02:44.290 --> 00:02:47.090
any min heap tree will be the minimum value 

54
00:02:47.100 --> 00:02:49.070
in that tree. Here 

55
00:02:49.290 --> 00:02:52.700
10 is the minimum value in this tree and it is the 

56
00:02:52.700 --> 00:02:53.750
root of the tree 

57
00:02:54.140 --> 00:02:57.620
So in min heap the node with minimum priority will 

58
00:02:57.620 --> 00:03:00.720
be present at the root node. So that we can 

59
00:03:00.730 --> 00:03:04.050
access the minimum priority node at constant time 

60
00:03:04.840 --> 00:03:08.290
Now let us discuss about Max Heap.  

61
00:03:08.290 --> 00:03:12.140
In max heap, every parent node's value will be greater than the children's 

62
00:03:12.140 --> 00:03:12.589
value 

63
00:03:13.240 --> 00:03:16.490
That is the parent node will have the maximum value 

64
00:03:17.140 --> 00:03:19.950
See this example. This is a max heap tree 

65
00:03:20.440 --> 00:03:22.150
We can take any sub tree

66
00:03:22.260 --> 00:03:24.450
Its root will be the maximum value 

67
00:03:25.040 --> 00:03:26.310
Take the right sub tree 

68
00:03:26.350 --> 00:03:29.350
70 is the root and it is the maximum value 

69
00:03:29.360 --> 00:03:30.370
in this sub tree

70
00:03:31.130 --> 00:03:34.190
Take the left sub tree now. 50 is the root and 

71
00:03:34.200 --> 00:03:38.410
it is the maximum value. And the root of 

72
00:03:38.420 --> 00:03:41.609
Any max heap tree will be the maximum value in 

73
00:03:41.610 --> 00:03:42.250
that tree 

74
00:03:42.840 --> 00:03:46.760
Here 100 is maximum value in this tree and it is 

75
00:03:46.760 --> 00:03:47.750
the root of the tree 

76
00:03:48.340 --> 00:03:52.730
So in max heap the node with maximum priority will be present 

77
00:03:52.740 --> 00:03:55.180
at the root node so that we can access the 

78
00:03:55.180 --> 00:03:57.850
maximum priority node at constant time 

79
00:03:58.740 --> 00:04:02.180
So today we have discussed about the need of a 

80
00:04:02.180 --> 00:04:06.010
binary heap and we discussed about priority queue 

81
00:04:06.220 --> 00:04:09.330
and we learned that we have two kinds of heaps 

82
00:04:09.510 --> 00:04:12.480
Min Heap and Max heap 

83
00:04:12.640 --> 00:04:16.000
The low priority node will be present at root and 

84
00:04:16.000 --> 00:04:19.169
in max heap, the maximum priority node will be present 

85
00:04:19.170 --> 00:04:19.780
at the root 

86
00:04:20.380 --> 00:04:23.270
In the next video we will learn how to construct 

87
00:04:23.270 --> 00:04:24.490
a heap in detail.  

