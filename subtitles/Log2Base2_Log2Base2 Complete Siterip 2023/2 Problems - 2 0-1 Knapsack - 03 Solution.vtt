WEBVTT

1
00:00:00.040 --> 00:00:02.870
in this video let us learn how to implement the 

2
00:00:02.870 --> 00:00:04.400
01 knapsack problem 

3
00:00:04.400 --> 00:00:08.600
Using dynamic programme first let us write the function 

4
00:00:08.600 --> 00:00:12.720
knapsack By passing the knapsack capacity C weight array 

5
00:00:12.720 --> 00:00:16.450
Wt value array val and number of items n

6
00:00:16.460 --> 00:00:19.260
And now declare the iterating variables 

7
00:00:19.270 --> 00:00:23.080
I and W now declare it two dimensional array to 

8
00:00:23.080 --> 00:00:24.150
store the sub 

9
00:00:24.150 --> 00:00:28.220
Problem results So write dp of n plus one C 

10
00:00:28.220 --> 00:00:28.850
plus one 

11
00:00:29.440 --> 00:00:32.750
Here the row n is the number of items and 

12
00:00:32.750 --> 00:00:36.700
column C is the capacity of knapsack We have put 

13
00:00:36.710 --> 00:00:39.250
plus one on both the variable because 

14
00:00:39.250 --> 00:00:42.650
We are including zero valued items and zero knapsack 

15
00:00:42.650 --> 00:00:45.450
capacity for calculating the result 

16
00:00:46.540 --> 00:00:50.150
So we have created an extra one column and row 

17
00:00:51.040 --> 00:00:52.780
now to iterate the items 

18
00:00:52.790 --> 00:00:56.950
Let us write an outer for loop write for i equal 

19
00:00:56.950 --> 00:01:00.890
to 0 to i less than or equal to n and to 

20
00:01:00.900 --> 00:01:02.870
iterate the knapsack capacity 

21
00:01:02.880 --> 00:01:05.680
Let us write the inner for loop Let us keep 

22
00:01:05.690 --> 00:01:10.100
the iterating variable as w so write w equal 

23
00:01:10.100 --> 00:01:14.030
to 0 to w less than or equal to C when 

24
00:01:14.030 --> 00:01:18.490
knapsack capacity is zero or item with zero weight is the 

25
00:01:18.490 --> 00:01:21.150
maximum profit we can make is zero 

26
00:01:21.640 --> 00:01:24.500
So we need to fill the first row and first 

27
00:01:24.500 --> 00:01:26.050
column as zero 

28
00:01:26.740 --> 00:01:29.810
So write If I equal to zero or w equal 

29
00:01:29.810 --> 00:01:34.140
to zero dp of iw equal to zero else if 

30
00:01:34.140 --> 00:01:37.460
 the capacity of knapsack is greater than or equal 

31
00:01:37.460 --> 00:01:40.030
to the weight of the item we can pick the 

32
00:01:40.030 --> 00:01:40.450
item 

33
00:01:40.840 --> 00:01:43.020
And if we picked the item what will be 

34
00:01:43.020 --> 00:01:46.760
the maximum profit we get That is the max of 

35
00:01:46.770 --> 00:01:48.040
the profit we get 

36
00:01:48.050 --> 00:01:50.960
If we picked the item and the profit we get 

37
00:01:50.970 --> 00:01:54.140
If we don't pick the item first let us write 

38
00:01:54.140 --> 00:01:55.950
the values for picking the item 

39
00:01:56.340 --> 00:01:59.660
If we picked the item we will get the corresponding 

40
00:01:59.660 --> 00:02:03.860
value plus the profit we make with the remaining knapsack 

41
00:02:03.860 --> 00:02:07.240
capacity we can get the value from the value 

42
00:02:07.250 --> 00:02:10.150
array that is Val of I minus one 

43
00:02:10.540 --> 00:02:13.290
We need to add the profit for remaining knapsack 

44
00:02:13.290 --> 00:02:16.970
capacity as we know we can get the profit of 

45
00:02:16.980 --> 00:02:19.140
remaining knapsack by moving one 

46
00:02:19.140 --> 00:02:23.050
row up and subtract current weight from the knapsack capacity 

47
00:02:23.640 --> 00:02:24.480
to move one 

48
00:02:24.480 --> 00:02:28.180
row up write dp of I minus one and to 

49
00:02:28.180 --> 00:02:32.740
subtract current weight from knapsack capacity write Index of 

50
00:02:32.750 --> 00:02:35.750
w minus weight of I minus one 

51
00:02:36.140 --> 00:02:40.080
So using DP of I minus one w minus weight 

52
00:02:40.080 --> 00:02:41.110
of I minus one 

53
00:02:41.190 --> 00:02:44.190
We can get the profit of the remaining knapsack 

54
00:02:44.190 --> 00:02:44.950
capacity 

55
00:02:45.940 --> 00:02:48.350
We need to add this to Val of I minus 

56
00:02:48.350 --> 00:02:48.650
one 

57
00:02:49.240 --> 00:02:52.300
So if we picked the item the profit we can 

58
00:02:52.300 --> 00:02:55.600
make is Val of I minus one plus dp of 

59
00:02:55.610 --> 00:02:59.450
I minus one w minus weight of i minus one 

60
00:03:00.040 --> 00:03:03.270
If we don't pick the item the maximum profit we 

61
00:03:03.270 --> 00:03:05.150
can make is this element 

62
00:03:05.640 --> 00:03:08.890
We can get it using dp of I minus one 

63
00:03:08.900 --> 00:03:12.910
w So if w of I minus one is less than 

64
00:03:12.910 --> 00:03:15.820
or equal to w we need to write dp 

65
00:03:15.820 --> 00:03:19.330
of iw equal to Max of Val of I 

66
00:03:19.330 --> 00:03:23.240
minus one plus dp of I minus one w minus 

67
00:03:23.240 --> 00:03:26.780
weight of i minus one coma dp of I minus 

68
00:03:26.780 --> 00:03:31.180
one w Lastly if the capacity of knapsack is lesser 

69
00:03:31.180 --> 00:03:33.780
than the weight of the item we cannot pick the 

70
00:03:33.780 --> 00:03:34.250
item 

71
00:03:34.900 --> 00:03:37.790
So maximum profit We can make is dp of i  

72
00:03:37.790 --> 00:03:41.320
minus one w That is the profit from the above cell 

73
00:03:41.600 --> 00:03:45.690
So write else dp of iw equal to DP 

74
00:03:45.690 --> 00:03:47.350
of i minus one w 

75
00:03:47.840 --> 00:03:50.750
This logic will compute the result of all these sub 

76
00:03:50.750 --> 00:03:54.240
problems and the final result will be stored at the 

77
00:03:54.240 --> 00:03:56.380
last index of the second array 

78
00:03:56.790 --> 00:04:01.130
So finally return dp of NC and that's it 

79
00:04:01.150 --> 00:04:06.150
We have implemented 01 knapsack problem using dynamic programming approach.

