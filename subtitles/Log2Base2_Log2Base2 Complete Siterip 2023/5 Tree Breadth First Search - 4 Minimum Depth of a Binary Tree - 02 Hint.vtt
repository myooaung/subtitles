WEBVTT

1
00:00:00.140 --> 00:00:02.010
In the previous videos of the BFS

2
00:00:02.010 --> 00:00:05.420
patterns, we have stored the notes gotta in 

3
00:00:05.420 --> 00:00:05.950
the queue.

4
00:00:06.340 --> 00:00:09.400
But for this problem we need to store the node's 

5
00:00:09.400 --> 00:00:13.420
data as well as its depth in the queue 

6
00:00:13.550 --> 00:00:16.710
here first let us push the node 10 into the queue and 

7
00:00:16.710 --> 00:00:18.550
mark its depth as one 

8
00:00:19.240 --> 00:00:23.120
Next we will check know tense left and right nodes 

9
00:00:23.120 --> 00:00:24.550
are available or not.

10
00:00:25.090 --> 00:00:29.130
If available push it in the queue and increment the 

11
00:00:29.130 --> 00:00:32.250
depth count by one and push it in the queue. 

12
00:00:33.140 --> 00:00:37.090
So here 10's left and right nodes are available 

13
00:00:37.290 --> 00:00:39.860
So push it in the queue and also push the 

14
00:00:39.860 --> 00:00:42.430
depth count as one plus one 

15
00:00:42.470 --> 00:00:44.530
That is two for both the nodes 

16
00:00:44.980 --> 00:00:45.740
So the depth of

17
00:00:45.740 --> 00:00:49.250
nodes 20 and 30 is equal to two 

18
00:00:50.040 --> 00:00:52.960
We need to continue this process till we find the 

19
00:00:52.960 --> 00:00:53.650
leaf node. 

20
00:00:54.200 --> 00:00:56.900
And when we find the leaf node we can simply 

21
00:00:56.900 --> 00:00:58.850
return its depth from the queue 

22
00:00:59.440 --> 00:01:02.920
So next we will check now 20's left and right 

23
00:01:02.920 --> 00:01:03.380
nodes 

24
00:01:03.550 --> 00:01:07.060
Here both the left and right nodes are null which 

25
00:01:07.060 --> 00:01:10.730
means 20 is the nearest leaf node. So we can 

26
00:01:10.730 --> 00:01:11.830
return its depth. 

27
00:01:11.840 --> 00:01:15.070
That is to hear so the minimum depth of this 

28
00:01:15.070 --> 00:01:15.630
by Naret 

29
00:01:15.630 --> 00:01:20.520
Three is too now Let us take another example here 

30
00:01:20.690 --> 00:01:23.480
node 10 will be pushed and its depth will be 

31
00:01:23.480 --> 00:01:28.140
marked as one. Next node 10's right and left that 

32
00:01:28.140 --> 00:01:28.820
is nodes 

33
00:01:28.820 --> 00:01:32.290
20 and 30 will be pushed into the queue and 

34
00:01:32.290 --> 00:01:35.960
the depth will be marked as one + node 10's 

35
00:01:35.960 --> 00:01:41.900
depth that is 1+1 = 2. Next node 20's left 

36
00:01:41.900 --> 00:01:44.980
and right will be pushed into the queue. So nodes 

37
00:01:44.990 --> 00:01:48.690
40 and 50 will be pushed into the queue and 

38
00:01:48.690 --> 00:01:53.000
the depth will be marked as 1 + node 20's 

39
00:01:53.000 --> 00:01:56.850
depth that is 1 + 2 which is 3.

40
00:01:57.640 --> 00:01:59.440
Next node 30's

41
00:01:59.440 --> 00:02:02.030
Left child and right child will be pushed into the 

42
00:02:02.030 --> 00:02:06.160
queue that is node 60 and node 70 and the 

43
00:02:06.160 --> 00:02:07.330
depth will be marked 

44
00:02:07.330 --> 00:02:11.640
as 1 + node 30's depth that is one plus two 

45
00:02:11.650 --> 00:02:17.010
Which is 3. Next node 40's left child and right child 

46
00:02:17.020 --> 00:02:20.470
that he snowed 80 and 90 will be pushed into 

47
00:02:20.470 --> 00:02:23.630
the queue and the depth will be marked as one + node 40's

48
00:02:23.630 --> 00:02:24.000

49
00:02:24.000 --> 00:02:24.270
 

50
00:02:24.270 --> 00:02:27.950
depth that is 1 + 3 which is 4 

51
00:02:28.720 --> 00:02:30.100
similarly node 

52
00:02:30.100 --> 00:02:34.660
50's left child node 100 right child 110 will 

53
00:02:34.660 --> 00:02:37.680
be pushed into the queue and the depth will be 

54
00:02:37.690 --> 00:02:40.980
1 + depth of node 50 that is 1 + 3

55
00:02:40.980 --> 00:02:43.500
 which is 4. 

56
00:02:43.510 --> 00:02:46.030
Next we need to push the left and right child of 

57
00:02:46.040 --> 00:02:46.950
nodes 60.

58
00:02:47.340 --> 00:02:50.550
But node 60 is a leaf node and for this 

59
00:02:50.550 --> 00:02:54.670
tree node 60 is the nearest leaf node. 

60
00:02:54.670 --> 00:02:57.050
So we can return its depth which is three 

