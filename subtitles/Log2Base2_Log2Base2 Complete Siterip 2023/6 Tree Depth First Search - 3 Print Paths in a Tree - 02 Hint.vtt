WEBVTT

1
00:00:00.040 --> 00:00:02.550
To print all the paths of a binary tree 

2
00:00:02.560 --> 00:00:05.920
first we need to traverse it and we can use 

3
00:00:05.930 --> 00:00:09.400
the DFS to traverse the tree. While traversing the 

4
00:00:09.400 --> 00:00:09.910
tree, 

5
00:00:09.920 --> 00:00:13.450
Let us keep an array to store each node and 

6
00:00:13.450 --> 00:00:16.050
a length variable to track the path length 

7
00:00:16.940 --> 00:00:19.920
And whenever we reach the leaf node, we can print 

8
00:00:19.920 --> 00:00:23.370
the elements in the array. So let us see how it works 

9
00:00:23.710 --> 00:00:27.720
Let us create an array named path to store the 

10
00:00:27.730 --> 00:00:31.060
path elements and length variable path length 

11
00:00:31.070 --> 00:00:35.320
to track the path length. First insert the root node 

12
00:00:35.330 --> 00:00:37.450
and make path length as one 

13
00:00:38.040 --> 00:00:41.030
After that how DFS will work?

14
00:00:41.030 --> 00:00:44.110
It will recursively call all the left sub tree 

15
00:00:44.120 --> 00:00:47.120
and once it reaches null it will start calling the 

16
00:00:47.120 --> 00:00:47.950
right sub tree.

17
00:00:48.440 --> 00:00:48.680


18
00:00:48.680 --> 00:00:52.410
So next node 50 will be added in the array and path length 

19
00:00:52.410 --> 00:00:56.670
 becomes two. Next node 10 will be added in 

20
00:00:56.670 --> 00:01:00.900
the array and the path length becomes three and next it 

21
00:01:00.900 --> 00:01:03.570
will try to access the left child of node 10 

22
00:01:03.570 --> 00:01:05.190
 which is null here 

23
00:01:05.390 --> 00:01:08.760
So here the right subtree call will be initiated 

24
00:01:08.820 --> 00:01:11.850
But the right child of this node is also null.

25
00:01:12.340 --> 00:01:15.540
This means we have reached the leaf node and we 

26
00:01:15.540 --> 00:01:18.760
have all nodes in this path in the path array.

27
00:01:19.170 --> 00:01:21.210
So we can just print the path array.

28
00:01:21.510 --> 00:01:26.930
So the Path 100 50 10 will be printed. Next from 

29
00:01:26.930 --> 00:01:27.960
node 50,

30
00:01:27.970 --> 00:01:30.340
The right recursive call will work 

31
00:01:30.420 --> 00:01:35.400
The new element 60 will be added next 100 50 the 

32
00:01:35.410 --> 00:01:38.260
path length will become three 

33
00:01:38.260 --> 00:01:41.900
Here the important thing to note is the new element position 

34
00:01:41.910 --> 00:01:44.970
in the path array depends on what we have in 

35
00:01:44.970 --> 00:01:46.350
the current call stack 

36
00:01:46.740 --> 00:01:49.830
Here in the current recursive call, that is the recursive 

37
00:01:49.840 --> 00:01:52.090
call from node 50 

38
00:01:52.100 --> 00:01:56.680
We already have elements 100 and 50 in the path and 

39
00:01:56.680 --> 00:01:57.940
path length is two 

40
00:01:58.080 --> 00:02:00.920
So the new element 60 will be added in the 

41
00:02:00.930 --> 00:02:01.990
third position 

42
00:02:02.070 --> 00:02:06.290
Next to 100 50 and then left and right recursive call

43
00:02:06.290 --> 00:02:10.160
will work in node 60 but node 60 

44
00:02:10.170 --> 00:02:12.810
is a leaf node. So we can print the current 

45
00:02:12.820 --> 00:02:17.640
array till path length. So the second path 100 50 60 

46
00:02:17.640 --> 00:02:20.010
will be printed 

47
00:02:20.020 --> 00:02:20.730
Next the root node 100's

48
00:02:20.730 --> 00:02:24.940
right recursive call will work. So node 200 will 

49
00:02:24.940 --> 00:02:27.750
be added and path length becomes two 

50
00:02:28.340 --> 00:02:31.980
And next node 150 will be added and path 

51
00:02:31.980 --> 00:02:33.680
length becomes three. 

52
00:02:33.790 --> 00:02:36.760
The right and left child of node 150 

53
00:02:36.760 --> 00:02:38.970
is null. So we can print the current path

54
00:02:39.740 --> 00:02:44.050
So the third path 100 200 150 will be printed 

55
00:02:44.940 --> 00:02:46.710
next node 200's right

56
00:02:46.710 --> 00:02:47.030


57
00:02:47.030 --> 00:02:50.320
recursive call will work so the node 300 will 

58
00:02:50.320 --> 00:02:54.380
be added to path and the path length becomes three 

59
00:02:54.650 --> 00:02:56.670
node 300 is a leaf node

60
00:02:56.680 --> 00:03:01.050
So the fourth path 102 103 100 will be printed 

61
00:03:01.440 --> 00:03:04.650
So using this approach you can try solving the problem. 

