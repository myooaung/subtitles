WEBVTT

1
00:00:00.940 --> 00:00:01.780
Hello Friends 

2
00:00:01.960 --> 00:00:04.810
from this video we shall learn binary recursion 

3
00:00:04.810 --> 00:00:10.210
we shall learn different binary searche tree operations like 

4
00:00:10.220 --> 00:00:13.450
insertion deletion traversal etcetera 

5
00:00:13.940 --> 00:00:17.800
But before getting started with binary search operations We need 

6
00:00:17.800 --> 00:00:21.340
to understand the binary recursion Because all these 

7
00:00:21.340 --> 00:00:25.690
operations uses binary recursion as the tree has left 

8
00:00:25.760 --> 00:00:27.000
and right sub trees 

9
00:00:27.740 --> 00:00:31.110
So in this video let us discuss about binary  

10
00:00:31.110 --> 00:00:31.420
recursion

11
00:00:31.430 --> 00:00:34.440
So before we learn about binary recursion what 

12
00:00:34.440 --> 00:00:37.710
is linear recursion We know about recursion 

13
00:00:37.720 --> 00:00:41.970
It is a function calling itself And if the function 

14
00:00:41.970 --> 00:00:45.500
is only making a single call to itself Each time 

15
00:00:45.500 --> 00:00:48.560
the function runs then it is a linear recursion 

16
00:00:48.880 --> 00:00:52.490
See this example We have the function fun and 

17
00:00:52.490 --> 00:00:55.990
it is calling itself only one time in each function 

18
00:00:55.990 --> 00:00:56.750
Execution 

19
00:00:57.190 --> 00:01:00.820
So this is an example of linear recursion and one 

20
00:01:00.820 --> 00:01:03.450
major example is the factorial function 

21
00:01:04.740 --> 00:01:07.790
You must have understood What is binary recursion By 

22
00:01:07.790 --> 00:01:11.770
now it is as the names such as a function 

23
00:01:11.770 --> 00:01:16.190
making to function calls each time it is called say 

24
00:01:16.190 --> 00:01:20.070
this example we have the function fun and each 

25
00:01:20.070 --> 00:01:20.350
time 

26
00:01:20.360 --> 00:01:23.280
It is called it calls the function a fun 

27
00:01:23.290 --> 00:01:24.450
two times again 

28
00:01:25.040 --> 00:01:28.610
That is when function a fun of n is 

29
00:01:28.610 --> 00:01:32.090
called it calls a fun of n minus one 

30
00:01:32.310 --> 00:01:35.010
and a fun of n minus two that is 

31
00:01:35.010 --> 00:01:39.150
two times so that is exactly what binary recursion is 

32
00:01:39.700 --> 00:01:43.350
The Fibonacci series is one major example of binary 

33
00:01:43.350 --> 00:01:47.940
recursion Say this programme for finding the n term In 

34
00:01:47.940 --> 00:01:51.580
the Fibonacci series we have the main function and the 

35
00:01:51.580 --> 00:01:58.210
function fib first execution begins From here we have in result 

36
00:01:58.210 --> 00:02:03.150
equal to fib of four so function fib is called by passing 

37
00:02:03.150 --> 00:02:04.150
the value four 

38
00:02:04.540 --> 00:02:08.570
So control gets here and n equal to four Now 

39
00:02:08.570 --> 00:02:11.860
check if n is less than or equal to one it is 

40
00:02:11.860 --> 00:02:12.790
not so 

41
00:02:12.790 --> 00:02:15.880
Return fib of n minus one plus Fib of n 

42
00:02:15.880 --> 00:02:19.580
minus two that is fib of three plus fib of

43
00:02:19.590 --> 00:02:19.950
two 

44
00:02:20.540 --> 00:02:24.070
See Fib of four is called and it is calling fib 

45
00:02:24.070 --> 00:02:27.750
of three and fib of two that is binary recursion 

46
00:02:28.060 --> 00:02:32.090
So fib is called again by passing three so n 

47
00:02:32.100 --> 00:02:35.340
equal to three now and check If n is less than 

48
00:02:35.340 --> 00:02:36.030
or equal to 1 

49
00:02:36.040 --> 00:02:38.100
But it is not so in else 

50
00:02:38.100 --> 00:02:41.450
We have returned fib of n minus one that is 

51
00:02:41.450 --> 00:02:44.390
fib of two plus fib of n minus two 

52
00:02:44.400 --> 00:02:46.650
That is fib of one again 

53
00:02:46.650 --> 00:02:50.220
See when fib of three was called it called Fib 

54
00:02:50.220 --> 00:02:51.850
of two and fib of one 

55
00:02:52.640 --> 00:02:55.930
Now fib of two will be executed and we have 

56
00:02:55.940 --> 00:02:57.280
n equal to two now 

57
00:02:57.430 --> 00:03:00.970
So if fails and in else we have returned fib 

58
00:03:00.970 --> 00:03:05.340
of one place fib of zero again the here 

59
00:03:05.350 --> 00:03:07.890
Fib of two is called and it is calling fib 

60
00:03:07.890 --> 00:03:09.650
of one and fib of 0 

61
00:03:10.240 --> 00:03:13.680
So control goes to fib of one here n equal 

62
00:03:13.680 --> 00:03:14.170
to one 

63
00:03:14.290 --> 00:03:17.650
So if returns true and return n which is one 

64
00:03:18.440 --> 00:03:21.810
So we got one here now call fib of zero 

65
00:03:21.990 --> 00:03:23.940
and hear n equal to 0 

66
00:03:24.050 --> 00:03:27.380
So here also if it's true and returns n that 

67
00:03:27.380 --> 00:03:31.260
is zero now the Control returns to calling function fib 

68
00:03:31.260 --> 00:03:31.900
of two 

69
00:03:31.980 --> 00:03:37.060
Here we got return 1 plus 0 which is one return one 

70
00:03:37.060 --> 00:03:39.150
to the calling function fib of three 

71
00:03:39.540 --> 00:03:41.950
And we got fib of two equal to one 

72
00:03:42.540 --> 00:03:45.110
And now we have the second call fib of one 

73
00:03:45.270 --> 00:03:46.950
which will also return one 

74
00:03:47.440 --> 00:03:50.410
So we got return one plus one which is 

75
00:03:50.410 --> 00:03:53.610
two so two will be returned to the calling function 

76
00:03:53.610 --> 00:03:58.020
fib of four now we got return two plus fib of 

77
00:03:58.030 --> 00:04:01.470
two and as we got fib of two will call 

78
00:04:01.480 --> 00:04:04.550
fib of one and fib of zero and fib of 

79
00:04:04.560 --> 00:04:07.480
one will return one and fib of zero will return 

80
00:04:07.480 --> 00:04:07.950
zero 

81
00:04:08.340 --> 00:04:11.570
So 1+0 which is equal to one will be returned 

82
00:04:11.580 --> 00:04:16.100
to the calling function fib of four So we got two 

83
00:04:16.110 --> 00:04:18.920
plus one which is three which will be returned to the 

84
00:04:18.920 --> 00:04:20.450
calling function main 

85
00:04:21.020 --> 00:04:23.450
So this is what binary recursion is 

86
00:04:23.840 --> 00:04:27.120
Each time the function is called it is calling itself 

87
00:04:27.130 --> 00:04:27.950
two types 

88
00:04:28.440 --> 00:04:31.770
Similarly we can use binary recursion to manipulate the 

89
00:04:31.770 --> 00:04:33.840
left and right sub trees of the binary 

90
00:04:33.840 --> 00:04:37.340
search tree recursively In the coming videos 

91
00:04:37.560 --> 00:04:40.240
we will learn how to use the binary recursion to insert delete and traverse the binary search tree. 

