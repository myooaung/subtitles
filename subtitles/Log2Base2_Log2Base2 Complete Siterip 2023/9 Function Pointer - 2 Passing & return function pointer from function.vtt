WEBVTT

1
00:00:00.140 --> 00:00:00.929
Hi friends 

2
00:00:00.940 --> 00:00:04.170
In this video let us discuss about passing function pointer 

3
00:00:04.170 --> 00:00:06.689
to a function and returning it 

4
00:00:11.390 --> 00:00:16.150
so we can pass the function pointer as a parameter to the function 

5
00:00:16.540 --> 00:00:20.290
The syntax to receive function pointers as a parameter is 

6
00:00:20.300 --> 00:00:21.340
inside function 

7
00:00:21.340 --> 00:00:24.980
parentheses write the return type of the function followed 

8
00:00:24.990 --> 00:00:28.220
by the function pointer name and the parameter information 

9
00:00:28.230 --> 00:00:30.220
each within separate parentheses 

10
00:00:31.640 --> 00:00:32.990
See some examples 

11
00:00:33.110 --> 00:00:33.720
See this 

12
00:00:33.930 --> 00:00:37.129
This is a function parameter to receive the function address 

13
00:00:37.130 --> 00:00:40.060
which has return type as void and it doesn't take 

14
00:00:40.070 --> 00:00:40.890
any argument also

15
00:00:40.890 --> 00:00:43.060
Now see another example 

16
00:00:43.230 --> 00:00:46.419
This is a function parameter to receive the function address 

17
00:00:46.420 --> 00:00:49.670
which has integer as return type and it accepts two

18
00:00:49.670 --> 00:00:50.850
integer variables 

19
00:00:50.940 --> 00:00:54.370
But it seems slightly complex. so we can use typedef

20
00:00:54.370 --> 00:00:58.200
for this. First create a function pointer using typedef 

21
00:00:58.200 --> 00:01:01.769
And then use the typedef name to receive 

22
00:01:01.770 --> 00:01:04.910
the function pointer. now see an example here. Here 

23
00:01:04.920 --> 00:01:09.490
type fp is a function pointer which accepts two integer

24
00:01:09.490 --> 00:01:13.550
variables and returns an integer. Now we can use fp

25
00:01:13.880 --> 00:01:18.050
in function parentheses to receive function pointer like this 

26
00:01:18.940 --> 00:01:21.179
Now let us see an example programme 

27
00:01:21.220 --> 00:01:25.090
Here we have the main function, a function named sum 

28
00:01:25.100 --> 00:01:28.060
and the function mod and the function execute 

29
00:01:28.240 --> 00:01:31.429
So as we discussed we use the type def keyword 

30
00:01:31.570 --> 00:01:34.700
to create a function pointer. So fp is a 

31
00:01:34.700 --> 00:01:38.180
function pointer which accepts to integer variables 

32
00:01:38.190 --> 00:01:40.640
and returns an integer. In main

33
00:01:40.780 --> 00:01:43.880
We print a + b equal to and call execute 

34
00:01:43.880 --> 00:01:48.440
function by passing 10 5 and sum. Recall that the name 

35
00:01:48.440 --> 00:01:50.470
of the function holds its address 

36
00:01:50.750 --> 00:01:54.920
So 1000 is assigned here. so we are passing the 

37
00:01:54.920 --> 00:01:57.990
address of function sum to the execute function 

38
00:01:58.240 --> 00:02:01.280
So control goes to execute function. There 

39
00:02:01.280 --> 00:02:05.479
We have parameters X Y and function pointer fp of 

40
00:02:05.490 --> 00:02:06.070
type fp.

41
00:02:07.340 --> 00:02:11.390
So 10 5 and the address 1000 will be stored 

42
00:02:11.400 --> 00:02:13.329
in these. Next 

43
00:02:13.340 --> 00:02:16.630
We have result equal to (*fp)(x,y) 

44
00:02:16.630 --> 00:02:20.120
since fp contains the address 1000 

45
00:02:20.190 --> 00:02:23.309
So this line of code will call the function sum 

46
00:02:24.040 --> 00:02:27.140
There 10 and 5 will be stored in a and b

47
00:02:27.140 --> 00:02:30.530
and a+b that is 10 + 5 

48
00:02:30.540 --> 00:02:31.570
equal to 15 

49
00:02:31.580 --> 00:02:35.649
is returned to the calling function execute and stored in 

50
00:02:35.730 --> 00:02:39.880
variable result and this result is returned to the calling 

51
00:02:39.880 --> 00:02:42.480
function main and will be printed on screen 

52
00:02:42.740 --> 00:02:44.070
So we get the output 

53
00:02:44.080 --> 00:02:46.170
a+b equal to 15

54
00:02:46.180 --> 00:02:50.910
Next we have execute (10,5,mod). mod which 

55
00:02:50.910 --> 00:02:53.390
is the name of the function holds its base address

56
00:02:53.390 --> 00:02:54.510
2000 

57
00:02:54.940 --> 00:02:57.970
So we are passing the address of function mod to 

58
00:02:57.970 --> 00:02:59.150
the execute function 

59
00:02:59.540 --> 00:03:02.470
So control goes to execute function. There 

60
00:03:02.470 --> 00:03:07.030
We have parameters x y and function pointer fp of type fp 

61
00:03:08.040 --> 00:03:11.930
So 10, 5 and the address 2000 will be stored 

62
00:03:11.930 --> 00:03:16.239
in these. Next we have result = (*fp)(x,y) 

63
00:03:16.240 --> 00:03:19.620
 since fp contains the address 

64
00:03:19.620 --> 00:03:20.370
2000 

65
00:03:20.420 --> 00:03:23.030
So this line of code will be calling the function 

66
00:03:23.030 --> 00:03:23.420
mod

67
00:03:23.940 --> 00:03:27.049
There 10 and 5 will be stored in a and b

68
00:03:27.050 --> 00:03:30.080
and a mod b that is 10 mod 5 

69
00:03:30.080 --> 00:03:32.720
that is equal to zero is returned to the calling 

70
00:03:32.720 --> 00:03:35.710
function execute and it will be stored in the variable 

71
00:03:35.710 --> 00:03:36.290
result 

72
00:03:36.680 --> 00:03:39.950
And this result is returned to the calling function main 

73
00:03:39.960 --> 00:03:41.910
and it will be printed on the screen 

74
00:03:42.250 --> 00:03:45.290
So we get the output a mod b equal to 

75
00:03:45.290 --> 00:03:47.930
zero and finally the program returns

76
00:03:47.930 --> 00:03:48.320
Zero 

77
00:03:48.330 --> 00:03:51.170
So that is how we pass function pointer to a 

78
00:03:51.170 --> 00:03:55.440
function. Now let us see how to return function pointer 

79
00:03:55.450 --> 00:03:56.430
from the function 

80
00:03:56.940 --> 00:04:00.770
The syntax for that is return type followed by *function_name

81
00:04:00.770 --> 00:04:03.850
and parameters within separate parentheses 

82
00:04:04.130 --> 00:04:05.310
See an example here 

83
00:04:05.320 --> 00:04:08.230
Here the function name is fun 

84
00:04:08.230 --> 00:04:11.220
fun will not take any argument and it will return 

85
00:04:11.220 --> 00:04:15.110
a function pointer which takes no parameters and returns void 

86
00:04:16.140 --> 00:04:17.660
Let's take another example 

87
00:04:17.670 --> 00:04:20.920
Here also function name is fun and also 

88
00:04:20.930 --> 00:04:24.040
fun will not take any argument but will 

89
00:04:24.040 --> 00:04:27.290
return a function pointer of which accepts two integer as 

90
00:04:27.290 --> 00:04:31.549
a parameter and returns an integer. Note that the 

91
00:04:31.560 --> 00:04:34.229
actual function will not take any argument 

92
00:04:34.350 --> 00:04:37.800
The int int represents that the function address  to be 

93
00:04:37.800 --> 00:04:41.420
returned will take two integer argument as parameter 

94
00:04:42.140 --> 00:04:45.330
But this method is very much complicated so we can 

95
00:04:45.340 --> 00:04:49.050
avoid it by using typedef. See an example here 

96
00:04:49.210 --> 00:04:53.290
type fp is a function pointer which accepts two integer 

97
00:04:53.290 --> 00:04:57.640
parameters and returns an integer. Using type fp we can 

98
00:04:57.650 --> 00:05:00.479
easily declare function pointer like this 

99
00:05:01.240 --> 00:05:04.109
Now let us discuss an example programme 

100
00:05:04.120 --> 00:05:06.750
Here we have the main function, function sum 

101
00:05:06.750 --> 00:05:11.130
 function mod and function get. So as we discussed 

102
00:05:11.130 --> 00:05:15.140
we can use typedef to create a function pointer fp which 

103
00:05:15.140 --> 00:05:17.790
takes two integers and returns an integer

104
00:05:18.540 --> 00:05:22.600
So in main we have created fp of type fp 

105
00:05:23.140 --> 00:05:27.490
Now we call the function get by passing + . The function 

106
00:05:27.490 --> 00:05:30.840
get decides which function that is sum or mod to 

107
00:05:30.840 --> 00:05:32.220
be called and returns 

108
00:05:32.230 --> 00:05:35.270
it's address. We can see the return type is a 

109
00:05:35.270 --> 00:05:39.520
function pointer here. So control goes to get and + is

110
00:05:39.520 --> 00:05:40.830
stored in c here.

111
00:05:40.030 --> 00:05:40.880
 

112
00:05:41.340 --> 00:05:45.180
So if condition here is satisfied so we return sum

113
00:05:45.350 --> 00:05:49.140
that is address of the function sum. 1000 which is 

114
00:05:49.140 --> 00:05:52.729
returned as a function pointer to the calling function main

115
00:05:52.740 --> 00:05:54.450
and we stored in Fp 

116
00:05:54.940 --> 00:05:58.010
Now we print a + b  equal to and call 

117
00:05:58.010 --> 00:06:01.620
the function sum using fp and passing 10 and 5 

118
00:06:02.340 --> 00:06:05.580
One thing that we have to understand is 

119
00:06:05.580 --> 00:06:09.110
(*fp)(10,5) is same as writing 

120
00:06:09.110 --> 00:06:10.550
fp(10,5)

121
00:06:10.800 --> 00:06:14.010
So control goes to sum and 10 and 5 will 

122
00:06:14.010 --> 00:06:17.830
be stored in a and b respectively, and 

123
00:06:17.840 --> 00:06:21.070
a+b or 10 + 5 equal to 15 will be returned 

124
00:06:21.080 --> 00:06:24.130
to main and will be printed on screen. Again 

125
00:06:24.140 --> 00:06:27.000
We call the function get by passing % symbol

126
00:06:27.000 --> 00:06:27.170


127
00:06:27.170 --> 00:06:30.430
 So control goes to get and % symbol

128
00:06:30.430 --> 00:06:34.720
 is stored in c. So if condition fails and 

129
00:06:34.720 --> 00:06:38.359
the else part is executed here which is returning mod. That 

130
00:06:38.360 --> 00:06:40.920
is address of function mod 2000 

131
00:06:40.920 --> 00:06:43.700
is returned as a function pointer to main and is 

132
00:06:43.700 --> 00:06:44.360
stored in fp

133
00:06:45.340 --> 00:06:48.920
Now we print a mod b equal to and call 

134
00:06:48.920 --> 00:06:52.560
the function mod using fp and passing 10 and 5

135
00:06:53.140 --> 00:06:56.240
So control goes to mod and 10 and 5 will 

136
00:06:56.240 --> 00:06:58.290
be stored in a and b respectively 

137
00:06:58.480 --> 00:07:02.030
And a mod b  or 10 % 5 equal to 0

138
00:07:02.030 --> 00:07:05.120
will be returned to main and will be printed 

139
00:07:05.120 --> 00:07:05.810
on screen 

140
00:07:06.440 --> 00:07:09.290
So that is how we can return a function pointer 

141
00:07:09.290 --> 00:07:10.130
from a function 

142
00:07:10.840 --> 00:07:13.540
In the next video we will learn the applications of a

143
00:07:13.540 --> 00:07:14.680
function pointer

144
00:07:15.340 --> 00:07:17.630
So that's all and thank you for watching this video 

