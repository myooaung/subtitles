WEBVTT

1
00:00:00.240 --> 00:00:01.040
Hi friends 

2
00:00:01.050 --> 00:00:04.470
In this video we're going to discuss the need for code indentation and comments.

3
00:00:09.470 --> 00:00:12.860
So indentation and comments improve the  

4
00:00:12.860 --> 00:00:15.270
readability and understandability of a programme 

5
00:00:15.280 --> 00:00:18.610
First let us discuss about the need for code indentation 

6
00:00:18.620 --> 00:00:21.650
So as we just learnt, the purpose of code indentation

7
00:00:21.660 --> 00:00:24.720
is to make the program more readable and understandable 

8
00:00:25.240 --> 00:00:26.950
So see an example programme 

9
00:00:27.040 --> 00:00:30.270
Here it is hard to understand which statements comes under 

10
00:00:30.270 --> 00:00:33.610
which block and it is not really readable also. so 

11
00:00:33.610 --> 00:00:36.080
the solution to this problem is that we can give 

12
00:00:36.080 --> 00:00:39.160
four spaces for the statements which are inside the main 

13
00:00:39.160 --> 00:00:39.919
function 

14
00:00:39.980 --> 00:00:43.780
Now we can easily understand that the integer variable declaration 

15
00:00:43.780 --> 00:00:46.560
for i and the for loop are inside the main 

16
00:00:46.560 --> 00:00:47.100
function 

17
00:00:47.540 --> 00:00:50.830
But if we see there is an ambiguity here. so the 

18
00:00:50.830 --> 00:00:53.450
thing is, is the printf statement inside the main 

19
00:00:53.450 --> 00:00:55.340
function or inside the for loop? 

20
00:00:55.740 --> 00:00:58.570
Actually it comes under for loop .but it might create 

21
00:00:58.570 --> 00:00:59.890
a confusion. So again 

22
00:00:59.890 --> 00:01:02.470
We can give four spaces to the printf statement 

23
00:01:02.480 --> 00:01:05.730
Now it's all very structured and crystal clear that int i 

24
00:01:05.760 --> 00:01:09.220
and for loop comes under main function and printf 

25
00:01:09.220 --> 00:01:13.230
comes under the for loop. so this is how code 

26
00:01:13.240 --> 00:01:16.120
indentation improves the programme understandability 

27
00:01:16.130 --> 00:01:19.200
Now let us discuss about the need for comments. Assume 

28
00:01:19.200 --> 00:01:21.640
that you working in a company and you have developed 

29
00:01:21.640 --> 00:01:22.619
some features 

30
00:01:22.810 --> 00:01:25.340
Now you have left the company for some reason and 

31
00:01:25.340 --> 00:01:28.160
a new person had joined the company and he needs 

32
00:01:28.160 --> 00:01:31.420
to develop the feature further. if the code is 

33
00:01:31.420 --> 00:01:32.800
not documented properly 

34
00:01:32.800 --> 00:01:36.420
The newly joined person feels difficult understand the code and 

35
00:01:36.420 --> 00:01:39.190
it is also impractical to call the old person and 

36
00:01:39.190 --> 00:01:40.789
ask the information about the code 

37
00:01:40.800 --> 00:01:44.580
So what is the solution to this problem? So it's 

38
00:01:44.580 --> 00:01:48.730
actually the programmer's responsibility to add the appropriate comments while 

39
00:01:48.730 --> 00:01:52.140
developing the code and it is also called as documentation 

40
00:01:52.280 --> 00:01:53.590
And using these comments 

41
00:01:53.590 --> 00:01:56.119
Other people can easily understand your code

42
00:01:56.380 --> 00:01:58.500
So in two ways we can add comments in a 

43
00:01:58.500 --> 00:02:01.320
C Programme. First one is Single line comment 

44
00:02:01.530 --> 00:02:04.150
It is used to describe a single line comment 

45
00:02:04.310 --> 00:02:06.570
It begins with the double slash and you can see 

46
00:02:06.570 --> 00:02:07.490
an example here 

47
00:02:07.490 --> 00:02:10.109
We have code if N less than 0 

48
00:02:10.110 --> 00:02:12.310
N=-N so we can write a 

49
00:02:12.310 --> 00:02:16.920
comment like this to understand it better and these statements 

50
00:02:16.920 --> 00:02:19.650
that are written after double slash will be ignored by 

51
00:02:19.650 --> 00:02:22.809
the compiler and the second method to add comments in 

52
00:02:22.810 --> 00:02:25.120
C is using multi line comments.

53
00:02:25.260 --> 00:02:28.550
Using this we can add multi line code explanation 

54
00:02:28.610 --> 00:02:31.560
It begins with a /* and ends with a 

55
00:02:31.560 --> 00:02:32.799
*/

56
00:02:33.060 --> 00:02:34.650
You can see an example here 

57
00:02:34.640 --> 00:02:37.570
We have a programme here to find the absolute value 

58
00:02:37.580 --> 00:02:40.250
so we can write the details of the programme written

59
00:02:40.250 --> 00:02:43.300
as multi line comments like this and this will help 

60
00:02:43.310 --> 00:02:46.450
any programmer understand the programme and not just the actual 

61
00:02:46.450 --> 00:02:47.209
developer 

62
00:02:47.440 --> 00:02:51.109
And again the statements inside this will be ignored by 

63
00:02:51.110 --> 00:02:52.680
the compiler and  this is

64
00:02:52.680 --> 00:02:55.350
How comments help to understand the programme 

65
00:02:55.360 --> 00:02:56.730
So that's all and thank you for watching this video.
