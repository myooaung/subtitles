WEBVTT

1
00:00:00.740 --> 00:00:03.650
in this video we're going to learn about this stack 

2
00:00:03.650 --> 00:00:09.490
data structure so let us understand at using a browsers working 

3
00:00:09.690 --> 00:00:14.140
So we're first going to a webpage www dot google 

4
00:00:14.140 --> 00:00:14.850
dot com 

5
00:00:15.340 --> 00:00:18.290
So that is a data and it is stored in 

6
00:00:18.290 --> 00:00:18.950
the stack 

7
00:00:19.650 --> 00:00:22.300
Now we will be visiting the website log2base2.com 

8
00:00:22.300 --> 00:00:25.480
and that is another data which is 

9
00:00:25.480 --> 00:00:26.690
stored in the stack 

10
00:00:26.900 --> 00:00:30.050
Now there is link saying Visit our YouTube channel 

11
00:00:30.340 --> 00:00:33.130
Now we click there and we go to that address 

12
00:00:33.400 --> 00:00:36.150
that is another data and it is stored in the 

13
00:00:36.150 --> 00:00:36.700
stack 

14
00:00:36.860 --> 00:00:40.610
So whenever we visit web page that url is 

15
00:00:40.610 --> 00:00:41.850
stored in the stack 

16
00:00:41.940 --> 00:00:45.590
Now what if I pressed this link to YouTube mistakenly 

17
00:00:45.710 --> 00:00:48.170
or what if I don't need it anymore and I 

18
00:00:48.170 --> 00:00:50.120
want to go to the home page of log2base2 

19
00:00:50.120 --> 00:00:52.740
again What I can do is I can 

20
00:00:52.740 --> 00:00:56.920
go and write www.log2base2.com 

21
00:00:56.930 --> 00:00:59.990
at the search tap but since we have a go 

22
00:00:59.990 --> 00:01:03.080
back button here that is not needed I can simply 

23
00:01:03.080 --> 00:01:05.860
click on the back button and go to last visited 

24
00:01:05.870 --> 00:01:06.970
Page see

25
00:01:06.980 --> 00:01:08.940
I went back to log2base.com 

26
00:01:08.950 --> 00:01:12.200
From there I can go back to google dot com 

27
00:01:12.210 --> 00:01:12.740
as well 

28
00:01:12.910 --> 00:01:15.750
Now that is an application of Stack that his work 

29
00:01:15.750 --> 00:01:19.380
stack is used and browsers and it follows a last 

30
00:01:19.380 --> 00:01:22.800
in first out principle that is who came last will 

31
00:01:22.800 --> 00:01:26.000
be gone out first now let us see the code for 

32
00:01:26.010 --> 00:01:28.820
inserting an element to stack and we need an array 

33
00:01:28.820 --> 00:01:29.370
for that 

34
00:01:29.380 --> 00:01:33.230
So create an array of size three so declare size 

35
00:01:33.300 --> 00:01:38.310
write Static final int static equal to 3 and int arr 

36
00:01:38.310 --> 00:01:41.740
equal to new int size and we have another 

37
00:01:41.740 --> 00:01:45.240
variable top in the stack where the insertion and deletion 

38
00:01:45.240 --> 00:01:48.950
operation takes place so we have to initialise top to 

39
00:01:48.950 --> 00:01:49.650
minus one 

40
00:01:50.040 --> 00:01:53.560
So whenever you see top equal to minus one it means 

41
00:01:53.570 --> 00:01:55.550
this stack is currently empty 

42
00:01:56.040 --> 00:01:58.730
So in this case we have an empty stack the 

43
00:01:58.730 --> 00:02:02.260
fourth top equal to minus one and the insertion operation in 

44
00:02:02.260 --> 00:02:04.900
a stack is called push operation 

45
00:02:05.040 --> 00:02:08.500
So here we have pushed function to insert an element to 

46
00:02:08.500 --> 00:02:09.200
the stack 

47
00:02:09.210 --> 00:02:12.850
So we have public void push of int val Now we 

48
00:02:12.850 --> 00:02:16.450
are going to insert element ten so val equal to ten 

49
00:02:16.940 --> 00:02:19.630
So first we want to check if the stack is 

50
00:02:19.630 --> 00:02:22.810
full because a stack data structure has a size 

51
00:02:22.810 --> 00:02:24.320
limit which is three here 

52
00:02:24.520 --> 00:02:27.550
So if it is full we cannot insert an element 

53
00:02:28.040 --> 00:02:31.330
And if the stack is full top will be size 

54
00:02:31.330 --> 00:02:32.090
minus one 

55
00:02:32.260 --> 00:02:35.170
But it is not top equal to minus one here 

56
00:02:35.420 --> 00:02:38.300
So if will fail and the control goes to the 

57
00:02:38.310 --> 00:02:41.690
else part here we need to insert the element at 

58
00:02:41.690 --> 00:02:42.870
the top position 

59
00:02:43.060 --> 00:02:46.480
So first increment top and then insert the element at 

60
00:02:46.480 --> 00:02:46.950
top

61
00:02:47.440 --> 00:02:50.640
So we have plus plus top which will increament the 

62
00:02:50.650 --> 00:02:54.750
top value so top will become zero from minus one 

63
00:02:55.060 --> 00:02:57.820
And now we can insert the element ten at the 

64
00:02:57.820 --> 00:03:01.260
top so write array of top equal to val 

65
00:03:01.460 --> 00:03:04.550
So the element ten will be inserted at the top 

66
00:03:04.550 --> 00:03:05.270
position 

67
00:03:05.500 --> 00:03:08.800
So remember the always insert new element 

68
00:03:08.810 --> 00:03:12.200
Only at the top of the stack now let us insert 

69
00:03:12.210 --> 00:03:16.790
another element 20 So val equal to 20 Now So first 

70
00:03:16.800 --> 00:03:19.150
we will check if the stack is full 

71
00:03:19.540 --> 00:03:23.370
But it is not since top equal to 0 and not two 

72
00:03:23.570 --> 00:03:26.610
So we go to the else part and increment top 

73
00:03:26.700 --> 00:03:30.090
so it will become one Now now insert 20 at 

74
00:03:30.090 --> 00:03:31.380
the top of this stack 

75
00:03:31.550 --> 00:03:36.540
So twenties also inserted now let us insert another element 30 

76
00:03:36.670 --> 00:03:38.950
So first check if the stack is full 

77
00:03:39.230 --> 00:03:42.590
But it is not since we have top equal to one 

78
00:03:42.680 --> 00:03:44.190
and not size minus one 

79
00:03:44.290 --> 00:03:47.840
So go to the else part and increment top so 

80
00:03:47.840 --> 00:03:48.920
it becomes two now 

81
00:03:49.230 --> 00:03:51.950
So insert 30 at the top of this stack 

82
00:03:52.240 --> 00:03:55.250
now let us try to insert another element 40 

83
00:03:55.740 --> 00:03:56.810
So first check 

84
00:03:56.820 --> 00:03:59.770
If the stack is full and we have top equal 

85
00:03:59.770 --> 00:04:02.510
to two and we have size equal to three so 

86
00:04:02.510 --> 00:04:07.130
top equal to size minus one so print stack is full 

87
00:04:07.330 --> 00:04:08.910
and exit from the programme 

88
00:04:09.100 --> 00:04:11.560
Now let us see how to delete an element from 

89
00:04:11.560 --> 00:04:14.780
a stack so the deletion operation in a stack is 

90
00:04:14.780 --> 00:04:16.750
called a pop operation 

91
00:04:17.140 --> 00:04:19.900
So here we have function pop to do this 

92
00:04:20.210 --> 00:04:24.360
So we have public void pop and we can only 

93
00:04:24.360 --> 00:04:26.970
delete the element at the top position 

94
00:04:27.190 --> 00:04:30.480
So we have one case to check if the stack 

95
00:04:30.480 --> 00:04:34.190
is empty so if top equal to minus one it means 

96
00:04:34.190 --> 00:04:37.610
the stack is empty and then there is no element 

97
00:04:37.610 --> 00:04:41.400
to delete so deletion is not possible If stack is 

98
00:04:41.410 --> 00:04:42.930
empty so write 

99
00:04:43.270 --> 00:04:47.400
If top equal to minus one then system dot out  

100
00:04:47.400 --> 00:04:49.500
println of stack is empty 

101
00:04:49.670 --> 00:04:53.140
So here we have a stack of size three with elements 

102
00:04:53.140 --> 00:04:56.550
10 20 and 30 and top equal to two here 

103
00:04:56.940 --> 00:04:59.790
So when we call Pop it will delete the element 

104
00:04:59.800 --> 00:05:01.770
which is at the top of this stack 

105
00:05:01.880 --> 00:05:05.340
So in this function first it will check if top equal 

106
00:05:05.340 --> 00:05:06.020
to minus one 

107
00:05:06.220 --> 00:05:08.820
But here it is not so go to the else 

108
00:05:08.820 --> 00:05:09.290
part 

109
00:05:09.540 --> 00:05:12.740
And there we have to decrement top so that the element 

110
00:05:12.740 --> 00:05:14.250
of top will be removed 

111
00:05:14.640 --> 00:05:17.160
So before that let us print the element that we're going 

112
00:05:17.160 --> 00:05:21.760
to delete so print popped element equal to and print the 

113
00:05:21.770 --> 00:05:24.010
element at the top of the array 

114
00:05:24.100 --> 00:05:25.710
Now we can decrement the top 

115
00:05:25.720 --> 00:05:29.300
So we have top minus minus and now it becomes 

116
00:05:29.300 --> 00:05:32.280
one and thirties deleted from this tack 

117
00:05:32.500 --> 00:05:36.280
Now let us call pop again First it will check if 

118
00:05:36.280 --> 00:05:39.740
the stack is empty but top equal to one here and 

119
00:05:39.740 --> 00:05:40.730
not minus one 

120
00:05:40.860 --> 00:05:43.240
So we go to the else part and bring the 

121
00:05:43.240 --> 00:05:45.760
element of top now decrement top 

122
00:05:45.760 --> 00:05:48.690
So it will become zero and it will delete 20 

123
00:05:48.690 --> 00:05:52.720
from the stack now let us insert an element 100 into 

124
00:05:52.720 --> 00:05:56.850
this stack so call push function with Val equal to 100 

125
00:05:57.240 --> 00:05:58.130
So check 

126
00:05:58.310 --> 00:05:59.550
If stack is full 

127
00:05:59.940 --> 00:06:00.930
But it is not 

128
00:06:00.940 --> 00:06:01.190
So 

129
00:06:01.190 --> 00:06:04.020
Go to the else part and increment top which will 

130
00:06:04.020 --> 00:06:08.240
make top equal to one now insert 100 at top 

131
00:06:08.260 --> 00:06:12.060
So we have array of top equal to val so 100 

132
00:06:12.070 --> 00:06:14.200
is inserted into this stack 

133
00:06:14.450 --> 00:06:18.060
Now if we call pop again first it will check 

134
00:06:18.070 --> 00:06:21.160
if top equal to minus one but it is not so 

135
00:06:21.160 --> 00:06:23.770
Go to the else part and decrement in top and 

136
00:06:23.770 --> 00:06:26.550
it will become zero and 100 is deleted 

137
00:06:26.940 --> 00:06:31.360
So whenever you insert increment top and insert element at 

138
00:06:31.360 --> 00:06:34.550
top and whenever you delete just decrement top 

139
00:06:35.240 --> 00:06:38.090
So if we call pop again it will decrement 

140
00:06:38.090 --> 00:06:41.050
top and then top will be minus one and it 

141
00:06:41.050 --> 00:06:42.850
deletes ten from the stack 

142
00:06:43.030 --> 00:06:46.650
Now if we call pop again it will check if 

143
00:06:46.650 --> 00:06:49.840
top equal to minus one and it is so it will 

144
00:06:49.840 --> 00:06:53.570
Print Stack is empty so this is how insertion and 

145
00:06:53.570 --> 00:06:55.350
deletion happens in a stack 

146
00:06:55.640 --> 00:06:59.240
Now let us discuss about the time complexity in stack 

147
00:06:59.460 --> 00:07:02.980
insertion and deletion happens at the top so we can 

148
00:07:02.980 --> 00:07:06.110
perform push and pop operations in constant time 

149
00:07:06.450 --> 00:07:09.430
So the best case and worst case is order of 

150
00:07:09.430 --> 00:07:09.850
one 

151
00:07:10.000 --> 00:07:12.520
So that's all and thank you for watching this video.

