WEBVTT

1
00:00:00.040 --> 00:00:03.160
let us take the factorial problem to understand how 

2
00:00:03.160 --> 00:00:04.300
Recursion works 

3
00:00:04.710 --> 00:00:08.170
So what is the factorial of n the product of 

4
00:00:08.180 --> 00:00:11.910
all positive integer less than or equal to n 

5
00:00:11.920 --> 00:00:14.770
is the factorial of n Let us take an 

6
00:00:14.770 --> 00:00:15.450
example 

7
00:00:15.840 --> 00:00:19.840
Let us find the factorial of the number 6 6 

8
00:00:19.840 --> 00:00:23.140
factorial will be the product of all positive 

9
00:00:23.140 --> 00:00:25.480
integer less than or equal to six 

10
00:00:25.920 --> 00:00:28.830
So we will get six into 5 

11
00:00:28.840 --> 00:00:34.250
30 in to four 120 Into 3 360 into 

12
00:00:34.250 --> 00:00:37.850
2 720 into one 720 

13
00:00:38.340 --> 00:00:41.050
So six factorial is equal to 720 

14
00:00:41.050 --> 00:00:41.550
 

15
00:00:42.040 --> 00:00:45.150
So this is how we find the factorial of 

16
00:00:45.150 --> 00:00:45.750
a number 

17
00:00:46.410 --> 00:00:50.030
So factorial of n is equal to n into 

18
00:00:50.040 --> 00:00:53.490
n minus one into n minus two into up to 

19
00:00:53.500 --> 00:00:53.950
one 

20
00:00:54.710 --> 00:00:57.460
So how can we use recursion here to solve the 

21
00:00:57.460 --> 00:01:01.350
factorial problem What will be the recursive call here 

22
00:01:01.740 --> 00:01:05.750
See this here every time n is decrementing 

23
00:01:05.750 --> 00:01:10.030
By one like n n minus one n minus two 

24
00:01:10.080 --> 00:01:10.600
etcetera 

25
00:01:11.120 --> 00:01:14.750
So the recursive call a function of n minus one 

26
00:01:15.340 --> 00:01:18.500
And here we are finding the product of all those 

27
00:01:18.500 --> 00:01:22.730
numbers so multiply n to the result of each recursive 

28
00:01:22.730 --> 00:01:23.050
call 

29
00:01:23.640 --> 00:01:27.090
Hence the recursive call will be n into 

30
00:01:27.100 --> 00:01:28.950
function of n minus one 

31
00:01:29.620 --> 00:01:32.110
And what will be the base case We need to 

32
00:01:32.110 --> 00:01:35.150
do this process till n becomes one 

33
00:01:35.740 --> 00:01:38.750
So we need to stop the recursive call when n 

34
00:01:38.760 --> 00:01:39.950
is equal to one 

35
00:01:40.640 --> 00:01:43.150
Using this you can solve the problem 

36
00:01:43.940 --> 00:01:46.550
So how can you define the recursive factorial 

37
00:01:46.550 --> 00:01:50.800
function The function should be called with the integer n 

38
00:01:51.170 --> 00:01:54.350
and it will return n factorial which is also 

39
00:01:54.350 --> 00:01:55.090
an integer 

40
00:01:55.480 --> 00:02:00.050
So we have int factorial of int n the 

41
00:02:00.050 --> 00:02:03.950
recursive call is n into function of n minus one 

42
00:02:04.740 --> 00:02:07.680
And we should define the base case too which is 

43
00:02:08.140 --> 00:02:10.340
n less than or equal to one 

44
00:02:10.710 --> 00:02:14.980
So right if n lessthan or equal to one returned 

45
00:02:14.980 --> 00:02:19.880
one otherwise return n indo function of n minus 

46
00:02:19.880 --> 00:02:20.220
one 

47
00:02:20.460 --> 00:02:23.620
Now let us see how the recursive code works 

48
00:02:23.840 --> 00:02:26.810
Here we have the main function there 

49
00:02:26.860 --> 00:02:30.900
We have two integer variables declared n and ans 

50
00:02:31.060 --> 00:02:33.640
Now we need to read the value of n from 

51
00:02:33.640 --> 00:02:37.670
the usee supposed three is the number right If 

52
00:02:37.680 --> 00:02:39.810
n is not less than zero 

53
00:02:39.820 --> 00:02:42.840
We need to find factorial of n so 

54
00:02:42.840 --> 00:02:46.750
write if n greater than or equal to zero ans 

55
00:02:46.750 --> 00:02:50.810
equal to factorial of n So now the main 

56
00:02:50.810 --> 00:02:54.500
function invoked the Recursive function Factorial of three 

57
00:02:54.920 --> 00:02:58.360
So the execution of main function will be passed until 

58
00:02:58.360 --> 00:03:02.050
the execution of function factorial of three gets completed 

59
00:03:02.740 --> 00:03:06.250
one thing to understand here is that the function calls will 

60
00:03:06.250 --> 00:03:09.930
be created in the stack and after it gets completed 

61
00:03:10.130 --> 00:03:13.250
that particular function will be cleared from the stack 

62
00:03:13.740 --> 00:03:16.840
So now the function factorial of three will be 

63
00:03:16.840 --> 00:03:21.360
executed Here we have the base condition n less than 

64
00:03:21.370 --> 00:03:24.180
or equal to one but here it fails 

65
00:03:24.190 --> 00:03:27.610
So return n Into factorial of n minus one 

66
00:03:27.860 --> 00:03:31.750
that is three Into factorial of two So this 

67
00:03:31.750 --> 00:03:36.420
function factorial of three invokes factorial of two so 

68
00:03:36.420 --> 00:03:39.800
the execution of factorial of three is passed until 

69
00:03:39.800 --> 00:03:44.100
factorial of two gets executed completely So factorial 

70
00:03:44.100 --> 00:03:47.920
of two will be executed Now here first the base 

71
00:03:47.920 --> 00:03:51.040
case will be checked but n that is two is 

72
00:03:51.050 --> 00:03:54.540
not less than or equal to one So it fails 

73
00:03:54.750 --> 00:03:55.000
so

74
00:03:55.000 --> 00:03:57.760
return two into factorial of one 

75
00:03:58.240 --> 00:04:01.880
So the function factorial of two invoked factorial of 

76
00:04:01.890 --> 00:04:02.250
one 

77
00:04:02.710 --> 00:04:03.780
So this functions 

78
00:04:03.790 --> 00:04:07.750
Execution is passed until factorial of one is completed 

79
00:04:08.440 --> 00:04:11.350
And in factorial of one when the base case 

80
00:04:11.560 --> 00:04:14.720
n lessthan or equal to one is checked It is 

81
00:04:14.720 --> 00:04:15.170
true 

82
00:04:15.510 --> 00:04:19.510
So n that is one is returned and this functions 

83
00:04:19.520 --> 00:04:21.550
execution is now completed 

84
00:04:22.140 --> 00:04:25.410
Now it is cleared or popped out from the stack 

85
00:04:25.620 --> 00:04:28.850
and the below recursive call will start its execution 

86
00:04:29.540 --> 00:04:33.270
So now factorial of two will resume its execution 

87
00:04:33.690 --> 00:04:37.210
and it will execute this return statement and it will 

88
00:04:37.220 --> 00:04:39.650
return two into one that is two 

89
00:04:40.440 --> 00:04:44.050
Now this functions task is also over so it will 

90
00:04:44.050 --> 00:04:45.850
be popped out from the stack 

91
00:04:46.430 --> 00:04:49.390
Now the function factorial of three will continue its 

92
00:04:49.400 --> 00:04:53.610
execution and it will evaluate three into two and returned 

93
00:04:53.610 --> 00:04:54.970
the result six 

94
00:04:55.640 --> 00:04:58.720
So this function is also over so it will be 

95
00:04:58.720 --> 00:05:02.120
popped out from the stack and now main function will 

96
00:05:02.120 --> 00:05:06.430
resume its execution and the value returned will be stored 

97
00:05:06.440 --> 00:05:07.970
In variable ans 

98
00:05:08.170 --> 00:05:11.210
So ans equal to six will be printed on 

99
00:05:11.220 --> 00:05:11.850
the screen 

100
00:05:12.510 --> 00:05:15.600
So this is how every recursive call will be pushed 

101
00:05:15.610 --> 00:05:19.100
into the stack until the base case is reached and 

102
00:05:19.100 --> 00:05:22.170
once it reaches the base case it will calculate the 

103
00:05:22.170 --> 00:05:23.700
result from backwards.

