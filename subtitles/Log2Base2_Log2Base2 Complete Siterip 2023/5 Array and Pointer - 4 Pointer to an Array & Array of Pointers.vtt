WEBVTT

1
00:00:00.940 --> 00:00:04.210
Hi friends in this video let us discuss about pointer 

2
00:00:04.220 --> 00:00:05.230
to a whole array 

3
00:00:12.940 --> 00:00:17.000
So we have learned about pointers which point to a particular 

4
00:00:17.010 --> 00:00:18.150
element of an array.

5
00:00:18.260 --> 00:00:21.100
Similarly we can declare a pointer to entire array. 

6
00:00:21.100 --> 00:00:23.320
See an example 

7
00:00:23.330 --> 00:00:28.400
First let us declare the array arr with elements 10 20 30 

8
00:00:28.400 --> 00:00:29.470
40 and 50 

9
00:00:30.140 --> 00:00:33.780
Now to declare a pointer to an array, use the syntax 

10
00:00:33.780 --> 00:00:37.720
datatype followed by * name of the pointer 

11
00:00:37.720 --> 00:00:40.330
within  brackets and the size of the array in 

12
00:00:40.330 --> 00:00:41.360
square brackets 

13
00:00:41.370 --> 00:00:46.380
And finally a semi colon. So we write int , *ptr

14
00:00:46.380 --> 00:00:50.500
within brackets and five which is the size in square 

15
00:00:50.500 --> 00:00:54.640
brackets. It simply means ptr is a pointer to an 

16
00:00:54.640 --> 00:00:56.449
array of five integers. 

17
00:00:57.040 --> 00:00:59.930
Now we assign the base address of the array to the 

18
00:00:59.930 --> 00:01:03.670
pointer ptr. So ptr will hold the base address 

19
00:01:03.670 --> 00:01:04.930
1024 

20
00:01:05.540 --> 00:01:07.750
Now let us dereference it 

21
00:01:08.440 --> 00:01:09.119
Since ptr

22
00:01:09.120 --> 00:01:12.280
is an array of five elements, *ptr will 

23
00:01:12.280 --> 00:01:14.740
be the address of the first element which is also 

24
00:01:14.740 --> 00:01:15.770
1024 

25
00:01:16.640 --> 00:01:20.270
**ptr will be the value stored at 1024 

26
00:01:20.270 --> 00:01:21.310
 which is 10 

27
00:01:21.940 --> 00:01:24.880
Now let us discuss about array of pointers 

28
00:01:25.340 --> 00:01:27.820
So just like an array of integers, an array of 

29
00:01:27.820 --> 00:01:28.600
characters, 

30
00:01:28.610 --> 00:01:33.929
we can also define an array of pointers. 

31
00:01:33.930 --> 00:01:37.260
The syntax for that is the data type followed by  

32
00:01:37.270 --> 00:01:40.770
*array name followed by size in square brackets and finally 

33
00:01:40.770 --> 00:01:41.550
a semi colon 

34
00:01:42.040 --> 00:01:45.649
See an example we have int *arr[5] 

35
00:01:45.660 --> 00:01:46.390
here 

36
00:01:46.400 --> 00:01:49.260
arr is an array of five integer pointers 

37
00:01:49.420 --> 00:01:52.380
Now we are declaring five integer variables, 

38
00:01:52.420 --> 00:01:57.210
a,b,c,d and e and assigning values 10 20 30 

39
00:01:57.210 --> 00:01:58.929
40 and 50 respectively 

40
00:01:59.740 --> 00:02:03.250
Next we have arr[0] equal to

41
00:02:03.260 --> 00:02:08.030
&a so address of a which is 1024 will be 

42
00:02:08.030 --> 00:02:09.730
stored in arr[0]

43
00:02:09.740 --> 00:02:12.299
That is it points to the variable a.

44
00:02:13.040 --> 00:02:16.260
Next we have arr[1] equal to &b

45
00:02:16.260 --> 00:02:20.320
 so address of b which is 1032 will be 

46
00:02:20.320 --> 00:02:23.060
stored in arr[1] and it points to the 

47
00:02:23.060 --> 00:02:27.850
variable b. similarly arr[2] points to c. 

48
00:02:27.850 --> 00:02:31.339
arr[3] points to d and arr[4] points to e.

49
00:02:31.350 --> 00:02:31.680


50
00:02:32.540 --> 00:02:35.550
Now let us dereference the array of pointers 

51
00:02:35.770 --> 00:02:39.810
Since each arr[index] holds an integer variable address 

52
00:02:39.820 --> 00:02:42.970
*arr[index] will give the values stored in it.

53
00:02:42.970 --> 00:02:45.859
So see an example 

54
00:02:45.980 --> 00:02:49.530
arr[0] equal to 1024 which is the address 

55
00:02:49.530 --> 00:02:53.610
of a. so *arr[0] will be 

56
00:02:53.620 --> 00:02:54.610
*(1024)

57
00:02:54.610 --> 00:02:58.269
that is values stored at 1024 which is 10

58
00:02:59.140 --> 00:03:03.390
similarly arr[1] equal to 1032 which is the address 

59
00:03:03.390 --> 00:03:07.140
of b. so *arr[1] will be  

60
00:03:07.150 --> 00:03:11.330
*(1032) that is value stored at 1032 and we get 

61
00:03:11.340 --> 00:03:11.980
20 

62
00:03:12.210 --> 00:03:15.440
Similarly we can get *arr[2] equal to 30.

63
00:03:15.440 --> 00:03:19.420
*arr[3] equal to 40 and 

64
00:03:19.430 --> 00:03:21.350
*arr[4] equal to 50 

65
00:03:21.840 --> 00:03:25.470
Now let's print the address and the values of each 

66
00:03:25.480 --> 00:03:27.050
array element using a for loop

67
00:03:27.440 --> 00:03:30.829
In each iteration we print arr[i] which is 

68
00:03:30.830 --> 00:03:33.600
the address and *arr[i] which is the 

69
00:03:33.600 --> 00:03:34.120
value 

70
00:03:34.640 --> 00:03:37.960
So for i equal to zero we get arr[0]

71
00:03:37.960 --> 00:03:44.600
equal to 1024 and *arr[0] equal to 10. 

72
00:03:44.610 --> 00:03:45.620
For i equal to one 

73
00:03:45.630 --> 00:03:50.070
We get arr[1] equal to 1032 and

74
00:03:50.080 --> 00:03:53.750
*(arr[1]) equal to 20. For i equal to 2, we 

75
00:03:53.750 --> 00:03:58.530
get arr[2] equal to 1048 and *(arr[2])

76
00:03:58.530 --> 00:03:59.550
equal to 30 

77
00:04:00.340 --> 00:04:04.650
Similarly we will get the remaining element's addresses and values 

78
00:04:05.840 --> 00:04:08.130
So that's all and thank you for watching this video 

