WEBVTT

1
00:00:00.140 --> 00:00:01.020
Hello friends 

2
00:00:01.030 --> 00:00:04.290
In this video let us learn how to avoid collision 

3
00:00:04.480 --> 00:00:07.650
by using linear probing which is also called us 

4
00:00:08.140 --> 00:00:12.340
closed hashing in the previous video we have learned about 

5
00:00:12.340 --> 00:00:16.650
hashing and we also learn that in hashing a situation 

6
00:00:16.650 --> 00:00:18.750
called collision may occur 

7
00:00:19.240 --> 00:00:22.050
So in this video let us learn how to avoid 

8
00:00:22.050 --> 00:00:25.790
collision by using linear probing which is also called 

9
00:00:25.790 --> 00:00:30.680
as closed hashing let us understand it using an example 

10
00:00:31.240 --> 00:00:34.350
So let us take this hash table of size five 

11
00:00:35.040 --> 00:00:38.660
and it already has some elements in it then minus 

12
00:00:38.660 --> 00:00:41.450
one minus 1 13 and nine 

13
00:00:42.140 --> 00:00:45.470
so let us add one mod element to this hash table 

14
00:00:45.660 --> 00:00:46.550
15 

15
00:00:46.940 --> 00:00:50.010
So the key will be 15 mod five which is 

16
00:00:50.020 --> 00:00:50.950
equal to zero 

17
00:00:51.340 --> 00:00:54.790
That means we need to place the data 15 into 

18
00:00:54.800 --> 00:00:59.600
index zero but we have data 10 already present the table 

19
00:00:59.610 --> 00:01:00.940
at the same position 

20
00:01:01.270 --> 00:01:05.420
That is this index zero which was meant to be 

21
00:01:05.420 --> 00:01:08.860
the place for data 15 is already occupied by 

22
00:01:08.860 --> 00:01:13.950
data 10 this situation is called collision two or 

23
00:01:13.950 --> 00:01:17.580
mod elements are pointing to the same hash index under 

24
00:01:17.720 --> 00:01:19.550
the modulo size operation 

25
00:01:20.440 --> 00:01:24.090
So how can we handled the situation if the supposed 

26
00:01:24.090 --> 00:01:25.440
index is not free 

27
00:01:25.700 --> 00:01:28.050
Then we can go and check for the very next 

28
00:01:28.050 --> 00:01:28.610
index 

29
00:01:28.950 --> 00:01:31.950
And if it is free we can place the latter 

30
00:01:31.950 --> 00:01:32.350
there 

31
00:01:32.740 --> 00:01:35.850
So say here we have two place 15 at index 

32
00:01:35.850 --> 00:01:36.250
zero 

33
00:01:36.740 --> 00:01:37.940
But it is not free 

34
00:01:37.950 --> 00:01:40.600
So we can go and check the next index which 

35
00:01:40.600 --> 00:01:41.150
is one 

36
00:01:41.540 --> 00:01:44.480
And it has the value minus one which means it 

37
00:01:44.480 --> 00:01:48.190
is available to insert the data so we can place 

38
00:01:48.190 --> 00:01:50.550
the data 15 at index one 

39
00:01:51.340 --> 00:01:55.350
Now let us try to insert another element 20 

40
00:01:56.940 --> 00:02:00.130
So the key here will be 20 mod five which 

41
00:02:00.130 --> 00:02:01.250
is equal to zero 

42
00:02:01.640 --> 00:02:04.660
That is we need to place the data 20 into 

43
00:02:04.660 --> 00:02:05.660
index zero 

44
00:02:05.750 --> 00:02:08.850
But we have Element 10 already present here 

45
00:02:09.340 --> 00:02:11.150
So again the recirculation 

46
00:02:11.160 --> 00:02:13.860
So what do we do now We go on and 

47
00:02:13.860 --> 00:02:16.830
check the next index which is one and it has 

48
00:02:16.830 --> 00:02:21.020
the value 15 which means it is already occupied by 

49
00:02:21.030 --> 00:02:25.240
element 15 and it is not free for another insertion 

50
00:02:25.540 --> 00:02:27.250
So again collision occurred 

51
00:02:27.430 --> 00:02:30.440
So what can we do now We just follow the 

52
00:02:30.440 --> 00:02:31.810
same process again 

53
00:02:32.120 --> 00:02:35.080
That is we will check the very next index and 

54
00:02:35.080 --> 00:02:38.370
this will continue until we find and available index 

55
00:02:38.940 --> 00:02:41.540
And here the next indexes two 

56
00:02:41.550 --> 00:02:44.860
And here we have value minus one which means index 

57
00:02:44.860 --> 00:02:48.400
two is available to insert the data so we can 

58
00:02:48.400 --> 00:02:52.310
place 20 in index two So this is how 

59
00:02:52.310 --> 00:02:54.470
we handle collision here 

60
00:02:54.600 --> 00:02:57.790
If any collision occurs we are linearly checking for 

61
00:02:57.790 --> 00:02:59.720
the available index one by one 

62
00:03:00.080 --> 00:03:03.020
So this method is called linear probing 

63
00:03:03.310 --> 00:03:06.660
So in linear probing if any collision occurs the 

64
00:03:06.660 --> 00:03:10.750
formula to calculate the new key value is F of X 

65
00:03:10.760 --> 00:03:15.760
equal to x+i mod size where I equal to 

66
00:03:15.770 --> 00:03:18.100
123 for etcetera 

67
00:03:18.940 --> 00:03:22.730
so let us insert some data and understand the working principle of 

68
00:03:22.900 --> 00:03:23.850
linear probing 

69
00:03:24.240 --> 00:03:28.460
First let us created initialised a hash table of size 

70
00:03:28.460 --> 00:03:28.950
five 

71
00:03:29.440 --> 00:03:32.700
So now all the Indices are filled with value minus 

72
00:03:32.700 --> 00:03:36.530
one which means currently all the indices are available for 

73
00:03:36.530 --> 00:03:41.350
insertion and we have Key equal to data mod size 

74
00:03:42.040 --> 00:03:46.210
First let us insert data 30 So applied here in this 

75
00:03:46.210 --> 00:03:49.920
equation and we will get 13 mod five equal to 

76
00:03:49.920 --> 00:03:50.250
three 

77
00:03:50.840 --> 00:03:54.940
That is we have to insert 13 at index three 

78
00:03:54.950 --> 00:03:59.140
and here index threes holding value minus one which means 

79
00:03:59.150 --> 00:04:01.180
it is free so inserted 

80
00:04:01.180 --> 00:04:03.790
That now let us insert data one 

81
00:04:04.150 --> 00:04:08.210
So again apply data one in this equation and we 

82
00:04:08.210 --> 00:04:11.370
will get one mod five which is equal to one 

83
00:04:12.090 --> 00:04:15.510
that is we have to insert one at index one 

84
00:04:15.810 --> 00:04:19.320
And here Index one is holding value minus one which 

85
00:04:19.320 --> 00:04:21.350
means it is available for insertion 

86
00:04:21.840 --> 00:04:26.180
So inserted there now let us insert another data six 

87
00:04:27.040 --> 00:04:29.560
So apply it in this equation and we will get 

88
00:04:29.570 --> 00:04:31.990
six mod five equal to one 

89
00:04:32.560 --> 00:04:35.870
That is we have to insert six at index one 

90
00:04:36.090 --> 00:04:39.460
And here Index one is holding the value one and 

91
00:04:39.460 --> 00:04:42.600
not minus one which means it is already occupied 

92
00:04:42.930 --> 00:04:44.370
So a collision occurred 

93
00:04:45.040 --> 00:04:47.370
So what do we do We have to check the 

94
00:04:47.370 --> 00:04:48.380
next index 

95
00:04:48.390 --> 00:04:52.220
That is we will now use a different equation which 

96
00:04:52.220 --> 00:04:54.620
is key equal to data 

97
00:04:54.620 --> 00:04:59.070
Plus I mod size and applying data six 

98
00:04:59.070 --> 00:05:02.260
Here we will get six plus one mod five 

99
00:05:02.270 --> 00:05:05.450
That is seven mod five which is equal to two 

100
00:05:05.940 --> 00:05:08.550
So we have to check index two and it is 

101
00:05:08.550 --> 00:05:10.270
holding the value minus one 

102
00:05:10.480 --> 00:05:12.490
That means it is free for insertion 

103
00:05:12.650 --> 00:05:17.670
So insert six at index two now let us insert 

104
00:05:17.680 --> 00:05:21.870
another data eleven so apply it in this equation 

105
00:05:21.880 --> 00:05:25.210
and we will get 11 mod five equal to one 

106
00:05:25.440 --> 00:05:29.470
That is we have to insert data 11 at index 

107
00:05:29.470 --> 00:05:31.030
one of this hash table 

108
00:05:31.450 --> 00:05:34.610
But when we check Index one is holding the value 

109
00:05:34.620 --> 00:05:38.200
one and not minus one which means it is not 

110
00:05:38.210 --> 00:05:39.750
available for insertion 

111
00:05:40.140 --> 00:05:42.760
So a collision occur here So we have to 

112
00:05:42.760 --> 00:05:47.190
apply data plus I in this new equation and we 

113
00:05:47.190 --> 00:05:50.230
will get 11 plus one mod 

114
00:05:50.230 --> 00:05:53.650
Five that is 12 mod five which is equal two 

115
00:05:54.140 --> 00:05:58.130
that is we can try to insert 11 at index 

116
00:05:58.130 --> 00:06:01.810
two of this hash table so check index two and 

117
00:06:01.810 --> 00:06:02.910
it is holding value 

118
00:06:02.910 --> 00:06:03.430
Six 

119
00:06:03.490 --> 00:06:06.890
That is it is also not free for insertion So 

120
00:06:06.890 --> 00:06:10.850
increment I and apply data again in this equation 

121
00:06:11.340 --> 00:06:14.610
Now we will get 11 plus two mod 

122
00:06:14.610 --> 00:06:17.870
Five that is 13 mod five which is equal to 

123
00:06:17.870 --> 00:06:21.630
three So check index three and it is also not 

124
00:06:21.630 --> 00:06:22.030
free 

125
00:06:22.390 --> 00:06:25.440
So again increment I and apply data in this 

126
00:06:25.440 --> 00:06:26.310
equation 

127
00:06:26.540 --> 00:06:30.880
Now we will get 11 plus three mod five that 

128
00:06:30.880 --> 00:06:34.970
is 14 mod five which is equal to four So 

129
00:06:34.970 --> 00:06:37.130
check index four and it is free 

130
00:06:37.140 --> 00:06:40.690
So insert 11 at index four and that is done 

131
00:06:41.640 --> 00:06:42.920
Now let us insert 

132
00:06:42.920 --> 00:06:46.880
the data so applied in this equation and we will 

133
00:06:46.880 --> 00:06:49.650
get 10 mod five which is equal to zero 

134
00:06:50.140 --> 00:06:53.130
That is we have to insert 10 at index zero 

135
00:06:53.380 --> 00:06:56.360
and here index zero is holding the value minus 

136
00:06:56.360 --> 00:06:58.020
one which means it is available 

137
00:06:58.620 --> 00:07:01.760
That is we have to insert 10 at index zero 

138
00:07:01.770 --> 00:07:04.790
and here index zero is holding the value minus 

139
00:07:04.790 --> 00:07:07.400
one which means it is available for insertion 

140
00:07:07.660 --> 00:07:12.160
So insert ten at index zero now let us insert 

141
00:07:12.170 --> 00:07:13.850
another data 15 

142
00:07:14.240 --> 00:07:17.460
So apply data 15 in this equation and we 

143
00:07:17.460 --> 00:07:20.950
will get 15 mod five which is equal to zero 

144
00:07:21.440 --> 00:07:24.660
That is we have to insert data 15 at index 

145
00:07:24.660 --> 00:07:28.050
zero but it is already holding the value 10 and 

146
00:07:28.050 --> 00:07:31.950
not minus one which means it is already occupied 

147
00:07:31.960 --> 00:07:33.950
it is not free for insertion 

148
00:07:34.640 --> 00:07:37.350
So we can say that a collision occurred here 

149
00:07:37.840 --> 00:07:42.070
So applied data plus I in this new equation and 

150
00:07:42.070 --> 00:07:45.710
we will get 15 plus one mod five that is 

151
00:07:45.710 --> 00:07:49.230
16 mod five which is equal to one again 

152
00:07:49.570 --> 00:07:50.920
When we check index one 

153
00:07:50.930 --> 00:07:51.850
It is not free 

154
00:07:52.240 --> 00:07:55.990
So again increments I and apply data in the situation 

155
00:07:56.300 --> 00:07:59.070
and we will get 15 plus two mod 

156
00:07:59.070 --> 00:08:01.980
Five that is 17 mod five which is equal to 

157
00:08:01.980 --> 00:08:05.530
two and we can see index two is also not 

158
00:08:05.530 --> 00:08:05.850
free 

159
00:08:06.240 --> 00:08:09.200
So again increment I and apply data in this 

160
00:08:09.200 --> 00:08:09.950
equation 

161
00:08:10.440 --> 00:08:13.770
And we got 15 plus three mod five that is 

162
00:08:13.780 --> 00:08:18.020
18 mod five which is equal to three again Index 

163
00:08:18.020 --> 00:08:19.250
three is not free 

164
00:08:19.640 --> 00:08:22.360
So again increment I can apply data in this 

165
00:08:22.370 --> 00:08:26.210
equation and we got 15 plus four mod 

166
00:08:26.210 --> 00:08:29.800
Five that is 19 mod five which is equal to 

167
00:08:29.800 --> 00:08:30.110
four 

168
00:08:30.840 --> 00:08:34.150
So check index four and it is also occupied 

169
00:08:34.940 --> 00:08:38.230
And we have applied this data in the equation with 

170
00:08:38.240 --> 00:08:41.610
I taking all the values less than size 

171
00:08:41.940 --> 00:08:44.850
And we did not find a free space so we 

172
00:08:44.850 --> 00:08:47.940
can understand that the hash table is fully occupied 

173
00:08:47.950 --> 00:08:48.350
Now

174
00:08:49.040 --> 00:08:51.670
So this is how linear probing solves the problem 

175
00:08:51.670 --> 00:08:52.570
of collision 

176
00:08:53.440 --> 00:08:56.570
So today we learned about linear probing which is one 

177
00:08:56.570 --> 00:08:59.250
method to handle and avoid collision 

178
00:08:59.640 --> 00:09:02.910
And here whenever collision occurs We Nearly 

179
00:09:02.910 --> 00:09:08.250
check for and Available index and also like insertion searching 

180
00:09:08.250 --> 00:09:10.140
and deletion are also performed 

181
00:09:10.140 --> 00:09:11.750
Linearly like this 

182
00:09:12.840 --> 00:09:15.430
So in the next video we will understand how to 

183
00:09:15.440 --> 00:09:19.050
implement hash table using linear probing in detail. 

