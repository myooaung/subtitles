WEBVTT

1
00:00:00.440 --> 00:00:03.550
let us see the implementation for this problem that it's 

2
00:00:03.550 --> 00:00:08.350
declare start end and mid and initialised them next 

3
00:00:08.450 --> 00:00:11.170
Let us use the while loop with conditions start less 

4
00:00:11.170 --> 00:00:13.420
than or equal to end to execute the binary 

5
00:00:13.420 --> 00:00:18.100
search inside it first let's find mid then check whether 

6
00:00:18.110 --> 00:00:21.050
array of mid has a smaller number before and after 

7
00:00:21.050 --> 00:00:21.350
it 

8
00:00:21.440 --> 00:00:25.120
Use this if condition if array of mid greater than 

9
00:00:25.130 --> 00:00:28.210
array of mid minus one and array of mid greater than 

10
00:00:28.210 --> 00:00:29.750
an array of mid plus one 

11
00:00:30.240 --> 00:00:33.560
If this condition passes we can conclude that the peak 

12
00:00:33.570 --> 00:00:35.800
element is present at index mid 

13
00:00:36.160 --> 00:00:37.550
This we can return mid 

14
00:00:37.940 --> 00:00:41.620
If this condition fails then we have to determine whether 

15
00:00:41.620 --> 00:00:44.860
the current mid is present in ascending portion or in 

16
00:00:44.860 --> 00:00:49.210
descending portion check whether it is present at ascending portion 

17
00:00:49.210 --> 00:00:52.520
by using this condition array of mid greater than array 

18
00:00:52.520 --> 00:00:53.660
of mid minus one 

19
00:00:53.920 --> 00:00:56.640
If it is we have two move start to mid 

20
00:00:56.640 --> 00:01:00.520
plus one else the current mid is present at descending portion 

21
00:01:00.530 --> 00:01:03.890
So we have to adjust end to mid so write 

22
00:01:04.150 --> 00:01:08.200
else end equal to mid if the iterations continue in 

23
00:01:08.200 --> 00:01:09.470
one of the iterations 

24
00:01:09.580 --> 00:01:12.880
This if condition would become true and we will return its index from the function. 
