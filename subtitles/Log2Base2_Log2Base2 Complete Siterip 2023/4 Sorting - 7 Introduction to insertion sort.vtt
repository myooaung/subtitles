WEBVTT

1
00:00:00.940 --> 00:00:04.540
Hello friends in this video let us learn about insertion 

2
00:00:04.540 --> 00:00:04.930
sort 

3
00:00:07.140 --> 00:00:10.930
So insertion sort is an efficient algorithm for sorting a 

4
00:00:10.930 --> 00:00:12.330
small number of elements 

5
00:00:12.720 --> 00:00:15.250
It is similar to arranging the playing cards 

6
00:00:15.640 --> 00:00:17.730
So what will we do when we have a handful 

7
00:00:17.730 --> 00:00:20.800
of playing cards Before we start the game We will 

8
00:00:20.800 --> 00:00:23.400
sort all the cards so that we can make smart 

9
00:00:23.400 --> 00:00:24.250
decisions 

10
00:00:24.840 --> 00:00:27.050
So we will assume the first card is in the 

11
00:00:27.050 --> 00:00:27.980
correct position 

12
00:00:28.540 --> 00:00:31.900
From the second card we will take the card and 

13
00:00:31.900 --> 00:00:36.290
compare it with its previous card and if it is smaller than 

14
00:00:36.290 --> 00:00:37.150
the first card 

15
00:00:37.250 --> 00:00:38.850
We will rearrange the cards 

16
00:00:39.190 --> 00:00:42.850
Otherwise we will simply place it in its actual position 

17
00:00:43.340 --> 00:00:45.570
Similarly we will repeat the process 

18
00:00:45.630 --> 00:00:48.450
For all the cards so let us assume 

19
00:00:48.450 --> 00:00:51.350
The first card 40 is in the correct position 

20
00:00:51.840 --> 00:00:55.560
Now take the second card which is ten and compare 

21
00:00:55.560 --> 00:00:57.090
it with the previous card 

22
00:00:57.090 --> 00:01:00.630
40 in 10 is less than 40 so we how 

23
00:01:00.630 --> 00:01:04.570
to rearrange the card now the first two cards are 

24
00:01:04.570 --> 00:01:05.940
sorted Now 

25
00:01:05.940 --> 00:01:09.070
Take the third card which is 50 and compare it 

26
00:01:09.140 --> 00:01:12.610
with the previous card which is 40 and 50 is 

27
00:01:12.610 --> 00:01:15.890
greater than 40 so no need to move the cards 

28
00:01:15.960 --> 00:01:18.550
and place it in its actual position 

29
00:01:19.240 --> 00:01:21.850
Now the first three cards are sorted 

30
00:01:22.240 --> 00:01:25.050
Now take the fourth card which is 30 and compare 

31
00:01:25.050 --> 00:01:26.450
it with the previous cards 

32
00:01:26.450 --> 00:01:29.540
50 and 30 is less than 50 

33
00:01:29.550 --> 00:01:33.890
So moved the card 50 to fourth place again compare 

34
00:01:33.890 --> 00:01:37.430
30 with the current previous card which is 40 and 

35
00:01:37.430 --> 00:01:38.970
thirties lesser than 40 

36
00:01:38.980 --> 00:01:43.430
So moved the cards 40 to 3rd position again compared 30 

37
00:01:43.440 --> 00:01:44.760
with the current previous card 

38
00:01:44.760 --> 00:01:48.710
which is 10 30 is greater than 10 so no 

39
00:01:48.710 --> 00:01:51.630
need to move the cards and place the card 30 

40
00:01:51.640 --> 00:01:52.850
in the second position 

41
00:01:53.240 --> 00:01:56.710
Now take the fifth card which is 20 and compare 

42
00:01:56.710 --> 00:01:58.240
it with the previous card 

43
00:01:58.490 --> 00:02:02.360
50 and 20 is less than 50 so move the 

44
00:02:02.360 --> 00:02:06.410
card 50 to fifth place again compare 20 with 

45
00:02:06.420 --> 00:02:06.860
current 

46
00:02:06.860 --> 00:02:10.450
Previous card which is 40 and 20 is lesser than 

47
00:02:10.450 --> 00:02:14.900
40 so bring 40 to fourth place again compare 20 

48
00:02:14.910 --> 00:02:15.030
with 

49
00:02:15.030 --> 00:02:18.540
The current previous card which is 30 and 20 is 

50
00:02:18.540 --> 00:02:20.030
lesser than 30 

51
00:02:20.040 --> 00:02:23.970
So bring 30 to third place again compare 20

52
00:02:23.970 --> 00:02:27.240
with the current previous card which is 10 and 20 

53
00:02:27.250 --> 00:02:30.040
is greater than 10 so no need to move the 

54
00:02:30.040 --> 00:02:32.650
cards and place 20 at this position 

55
00:02:33.440 --> 00:02:35.910
And now see we got all the cards in the 

56
00:02:35.910 --> 00:02:39.400
shorter order let us take some number and understand 

57
00:02:39.400 --> 00:02:41.150
the insertion sort procedure 

58
00:02:41.640 --> 00:02:47.260
so let us take the numbers 40 10 50 30 and 20 

59
00:02:47.940 --> 00:02:51.610
and as we have discussed earlier assumed the first number 

60
00:02:51.610 --> 00:02:52.850
40 is sorted 

61
00:02:53.340 --> 00:02:56.400
Now take the second number 10 and compare it with 

62
00:02:56.410 --> 00:02:59.200
40 and 40 is greater than 10 

63
00:02:59.380 --> 00:03:02.970
So move the number 40 to 2nd place in place number 

64
00:03:02.970 --> 00:03:04.550
10 in the first position 

65
00:03:05.340 --> 00:03:07.850
So now the first two numbers are sorted 

66
00:03:08.440 --> 00:03:11.370
Now take the third number which is 50 and compare 

67
00:03:11.370 --> 00:03:15.780
it with the previous number 40 and 50 is greater 

68
00:03:15.780 --> 00:03:20.110
than 40 so no need to change the positions now 

69
00:03:20.120 --> 00:03:23.910
The first three numbers are sorted now take the fourth 

70
00:03:23.920 --> 00:03:27.070
number which is 30 and compare it with the previous 

71
00:03:27.070 --> 00:03:27.570
number 

72
00:03:27.580 --> 00:03:33.140
50 and 30 is lesser than 50 so 50 should 

73
00:03:33.150 --> 00:03:34.980
only come after 30 

74
00:03:34.990 --> 00:03:39.670
So place 50 in the fourth position now compare 30 

75
00:03:39.670 --> 00:03:43.310
with the current previous number which is 40 and thirties 

76
00:03:43.310 --> 00:03:47.050
Lesser than 40 so place 40 in the third position 

77
00:03:47.540 --> 00:03:50.590
now compare 30 with the current previous number which is 

78
00:03:50.590 --> 00:03:53.550
ten and 30 is greater than 10 

79
00:03:53.680 --> 00:03:54.600
So no moves 

80
00:03:54.600 --> 00:03:58.490
are needed so simply place 30 in the second position and 

81
00:03:58.490 --> 00:04:00.410
10 in its actual position 

82
00:04:00.600 --> 00:04:02.950
Now the first four numbers are sorted 

83
00:04:03.440 --> 00:04:06.720
Now take the fifth number which is 20 and compare 

84
00:04:06.720 --> 00:04:10.650
it with the previous number 50 and Twentys lesser than 

85
00:04:10.650 --> 00:04:11.230
50 

86
00:04:11.240 --> 00:04:13.880
So 50 should only come after 20 

87
00:04:13.890 --> 00:04:17.070
Hence we have to place 50 in the fifth position 

88
00:04:17.340 --> 00:04:20.400
now compared 20 with the current previous number which is 

89
00:04:20.400 --> 00:04:23.150
40 and twenties lesser than 40 

90
00:04:23.240 --> 00:04:26.810
So place 40 in the fourth position now compared 20 

91
00:04:26.810 --> 00:04:30.240
with the current previous number which is 30 and 

92
00:04:30.240 --> 00:04:32.050
20 is less than 30 

93
00:04:32.060 --> 00:04:35.820
So Place 30 in the third position now compared 20 

94
00:04:35.820 --> 00:04:39.290
with the current previous number which is ten and 20 

95
00:04:39.300 --> 00:04:40.710
is greater than 10 

96
00:04:40.890 --> 00:04:43.920
So no Moves are needed and we can place 20 

97
00:04:43.930 --> 00:04:47.690
in the second position and 10 in its actual position 

98
00:04:47.940 --> 00:04:51.620
Now all five numbers are sorted and that is how 

99
00:04:51.620 --> 00:04:54.150
insertion sort sorts the elements 

100
00:04:55.040 --> 00:04:58.720
Now let us build the algorithm for insertion sort using 

101
00:04:58.720 --> 00:04:59.550
this process 

102
00:05:00.140 --> 00:05:04.310
So as we discussed in insertion sort we always assume 

103
00:05:04.320 --> 00:05:06.250
the first element as sorted 

104
00:05:06.740 --> 00:05:10.140
So we will start our process from the second index 

105
00:05:10.210 --> 00:05:11.750
that is index one 

106
00:05:12.340 --> 00:05:16.610
So write the loop from index one to size next 

107
00:05:16.620 --> 00:05:19.610
We need to find the correct place and place the 

108
00:05:19.610 --> 00:05:20.950
value one by one 

109
00:05:21.440 --> 00:05:24.760
So copy the current value and declare one more variable 

110
00:05:24.760 --> 00:05:26.950
to compare and find the correct position 

111
00:05:27.640 --> 00:05:31.140
so let it be the index and copy the current index to it 

112
00:05:31.280 --> 00:05:32.850
So index equal to I 

113
00:05:33.640 --> 00:05:36.170
And if index is greater than zero we need to 

114
00:05:36.170 --> 00:05:39.520
check if the previous value is greater than the current 

115
00:05:39.520 --> 00:05:40.350
index value 

116
00:05:40.840 --> 00:05:44.410
And if so we need to move the previous value 

117
00:05:44.420 --> 00:05:45.380
to one position 

118
00:05:45.380 --> 00:05:45.750
Right 

119
00:05:46.340 --> 00:05:48.800
And we need to do the same process for all 

120
00:05:48.800 --> 00:05:51.800
the previous elements so write it in a while 

121
00:05:51.800 --> 00:05:56.720
loop that is while index greater than zero and arr  

122
00:05:56.720 --> 00:05:59.150
of index minus one greater than value 

123
00:05:59.740 --> 00:06:02.020
And if the condition is true we need to copy 

124
00:06:02.020 --> 00:06:05.340
the previous element to current index position 

125
00:06:05.590 --> 00:06:09.080
So write arr  of index equal to arr  of index 

126
00:06:09.080 --> 00:06:09.850
minus one 

127
00:06:10.440 --> 00:06:12.940
And in order to continue the process for all the 

128
00:06:12.940 --> 00:06:17.030
previous elements the decrement the index by one and if the 

129
00:06:17.030 --> 00:06:20.440
while execution is over we can confirm that we have 

130
00:06:20.440 --> 00:06:23.770
found the correct place for the value and the variable 

131
00:06:23.780 --> 00:06:27.400
index will have that position so place the copied

132
00:06:27.400 --> 00:06:29.850
value to arr  of index 

133
00:06:30.240 --> 00:06:33.150
That is arr  of index equal to value 

134
00:06:33.840 --> 00:06:36.740
And this is the algorithm for insertion sort and let 

135
00:06:36.740 --> 00:06:39.830
us understand how it will work for the element 30 

136
00:06:39.830 --> 00:06:40.250
here 

137
00:06:41.140 --> 00:06:45.640
First let us copy the value 30 to variable value and 

138
00:06:45.640 --> 00:06:48.310
place index in variable index to check 

139
00:06:48.320 --> 00:06:52.800
All the previous elements here index is greater than zero 

140
00:06:52.900 --> 00:06:53.530
so check 

141
00:06:53.540 --> 00:06:56.750
If arr  of index minus one is greater than value 

142
00:06:57.140 --> 00:07:01.000
that is if 50 is greater than 30 and it 

143
00:07:01.000 --> 00:07:03.650
is so place arr  of index minus 

144
00:07:03.650 --> 00:07:07.230
one to arr  of index so 50 will be copied 

145
00:07:07.230 --> 00:07:11.440
to index three now reduce the index value now 

146
00:07:11.670 --> 00:07:12.060
again 

147
00:07:12.060 --> 00:07:12.270
check 

148
00:07:12.270 --> 00:07:15.870
The while condition now also indexes greater than zero so 

149
00:07:15.870 --> 00:07:16.190
check 

150
00:07:16.200 --> 00:07:19.450
If arr  of index minus one is greater than value 

151
00:07:19.620 --> 00:07:23.190
that is if 40 is greater than 30 and it 

152
00:07:23.190 --> 00:07:25.930
is true so place arr  of index 

153
00:07:25.930 --> 00:07:26.350
minus 

154
00:07:26.350 --> 00:07:30.090
one to arr  of index so 40 will be copy 

155
00:07:30.090 --> 00:07:34.450
to index two now reduce the index value so index 

156
00:07:34.460 --> 00:07:36.800
equal to one Now now check 

157
00:07:36.800 --> 00:07:40.340
The condition again and index is one now which is 

158
00:07:40.340 --> 00:07:41.610
still greater than zero 

159
00:07:41.820 --> 00:07:45.270
So check if arr  of index minus one is greater 

160
00:07:45.270 --> 00:07:48.270
than value that is if 10 is greater than 

161
00:07:48.270 --> 00:07:51.170
30 and it is not so the loop will be 

162
00:07:51.170 --> 00:07:51.950
terminated 

163
00:07:52.640 --> 00:07:56.880
Now place the value 30 in arr  of index so 

164
00:07:56.880 --> 00:07:59.890
30 will be placed in index one which is perfect 

165
00:07:59.890 --> 00:08:00.250
here 

166
00:08:00.740 --> 00:08:03.520
And that is how insertion sort algorithm works 

167
00:08:03.830 --> 00:08:06.850
And in the next video we will discuss the implementation 

168
00:08:06.850 --> 00:08:08.550
of insertion sort in detail.

