WEBVTT

1
00:00:00.240 --> 00:00:03.310
Hi friends in this video let us discuss about using 

2
00:00:03.310 --> 00:00:05.029
an array of pointers to string.

3
00:00:11.340 --> 00:00:14.580
First let us see why do we need it? Let's 

4
00:00:14.580 --> 00:00:19.000
take an array subject of five strings each 20 characters long 

5
00:00:19.740 --> 00:00:23.700
so it will allocate 100 bytes like this and  

6
00:00:23.700 --> 00:00:27.360
each string will be stored like this. Here if we notice 

7
00:00:27.370 --> 00:00:27.919
the string 

8
00:00:27.930 --> 00:00:31.710
Tamil takes only six bytes and the remaining 14 bytes 

9
00:00:31.720 --> 00:00:35.740
are wasted. For English 12 bytes are wasted. For maths 

10
00:00:35.750 --> 00:00:39.470
14 bytes are wasted. For science 12 bytes are wasted. 

11
00:00:39.590 --> 00:00:42.890
and for the string social science five bytes are wasted 

12
00:00:43.340 --> 00:00:47.220
So in total 100 bytes, 57 bytes are wasted 

13
00:00:47.840 --> 00:00:50.900
We can avoid this situation by using an array of 

14
00:00:50.900 --> 00:00:54.510
pointers to string. The syntax for that is the keyword 

15
00:00:54.510 --> 00:00:58.260
char followed by * array_name followed by size 

16
00:00:58.270 --> 00:01:00.989
in square brackets followed by a semi colon 

17
00:01:01.540 --> 00:01:05.580
So in this example we can write char *subject[5] 

18
00:01:05.580 --> 00:01:06.190


19
00:01:06.840 --> 00:01:09.780
If we create an array of pointers to string like 

20
00:01:09.780 --> 00:01:13.600
this it will occupy only required 43 bytes 

21
00:01:13.790 --> 00:01:16.240
So an array of pointers to string 

22
00:01:16.250 --> 00:01:17.520
is memory efficient 

23
00:01:18.040 --> 00:01:22.080
Now let's print each string's base address. As we know 

24
00:01:22.080 --> 00:01:25.880
string name itself holds the base address of the string.  

25
00:01:25.950 --> 00:01:28.670
So subject[0] will print first string's 

26
00:01:28.680 --> 00:01:32.000
Address. subject[1] will print the address of second 

27
00:01:32.000 --> 00:01:33.140
string and so on 

28
00:01:33.840 --> 00:01:36.870
So let us use a for loop to print it all 

29
00:01:37.440 --> 00:01:40.820
in each iteration it prints subject[i] and see

30
00:01:40.820 --> 00:01:44.300
that we're using %p format specifier to print 

31
00:01:44.300 --> 00:01:48.050
a string address. So we get the output like this 

32
00:01:48.440 --> 00:01:52.259
&subject[0] equal to 1024. 

33
00:01:52.260 --> 00:01:55.860
&subject[1] equal to 1030. &subject[2] equal to 1038.

34
00:01:55.860 --> 00:01:57.610


35
00:01:57.710 --> 00:01:57.940


36
00:01:57.940 --> 00:02:05.650
&subject[3] equal to 1044. and &subject[4] equal to 1051.

37
00:02:03.450 --> 00:02:05.619


38
00:02:06.240 --> 00:02:08.350
Now let's print each string 

39
00:02:09.140 --> 00:02:10.310
It is very simple 

40
00:02:10.320 --> 00:02:12.290
We can use %s format specifier

41
00:02:12.290 --> 00:02:15.640
 to print each string. We pass the base 

42
00:02:15.640 --> 00:02:17.690
address of each string and print 

43
00:02:17.690 --> 00:02:21.030
%s  will print all the characters from the base 

44
00:02:21.030 --> 00:02:23.150
address till we reach a NULL character 

45
00:02:23.540 --> 00:02:26.160
So again we use a for loop and in each 

46
00:02:26.170 --> 00:02:28.480
iteration we print subject[i]

47
00:02:28.770 --> 00:02:32.410
So we get subject[0] equal to Tamil  

48
00:02:32.410 --> 00:02:35.540
subject[1] equal to English subject[2] equal to maths

49
00:02:35.540 --> 00:02:39.130
 subject[3] equal to science and subject[4]

50
00:02:39.130 --> 00:02:41.050
 equal to social science 

51
00:02:41.540 --> 00:02:44.600
so that is how using array of pointers to string is 

52
00:02:44.600 --> 00:02:46.550
very efficient in many cases 

53
00:02:47.440 --> 00:02:49.730
So that's all and thank you for watching this video 

