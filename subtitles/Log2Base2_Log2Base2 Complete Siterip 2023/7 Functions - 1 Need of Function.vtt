WEBVTT

1
00:00:00.740 --> 00:00:01.400
Hi friends 

1
00:00:00.840 --> 00:00:03.220
In this video we are going to learn 

2
00:00:03.220 --> 00:00:04.320
Why do we need functions  

3
00:00:10.320 --> 00:00:15.229
So basically we can define a function as a group of statements that together perform a 

4
00:00:15.230 --> 00:00:16.180
specific task 

5
00:00:16.180 --> 00:00:16.960
See an example 

6
00:00:16.960 --> 00:00:19.180
We have a function named check which checks whether

7
00:00:19.180 --> 00:00:21.779
The given number is zero positive or negative so it 

8
00:00:21.780 --> 00:00:22.840
has a task to do 

9
00:00:24.540 --> 00:00:27.550
Now let us see why we need functions. Functions improve 

10
00:00:27.550 --> 00:00:29.750
modularity and code reusability 

11
00:00:30.540 --> 00:00:33.640
So what do we mean by improving modularity? Suppose 

12
00:00:33.640 --> 00:00:36.029
we have a very large programme then it is very 

13
00:00:36.030 --> 00:00:37.250
difficult to maintain it 

14
00:00:37.260 --> 00:00:40.290
But if we divide it into small separate modules then 

15
00:00:40.290 --> 00:00:42.140
it is very easy to maintain them 

16
00:00:43.840 --> 00:00:46.800
Also suppose some error is occurring in our programme 

17
00:00:46.940 --> 00:00:48.820
Then we can easily debug the programme 

18
00:00:48.910 --> 00:00:50.900
If a particular module is not working 

19
00:00:50.910 --> 00:00:53.699
We can test and debug that specific model rather than 

20
00:00:53.700 --> 00:00:54.940
the entire programme here 

21
00:00:54.950 --> 00:00:57.720
If module one is not working as expected we can 

22
00:00:57.720 --> 00:00:58.760
simply correct it

23
00:00:58.940 --> 00:01:04.720
Also we can have many programmers developing different modules simultaneously 

24
00:01:04.920 --> 00:01:07.630
Next let us discuss about code reusability 

25
00:01:07.640 --> 00:01:09.990
Suppose we need to get two numbers from the user 

26
00:01:09.990 --> 00:01:13.039
and check whether the given number is positive or negative 

27
00:01:13.050 --> 00:01:14.870
so we can develop the code like this 

28
00:01:14.880 --> 00:01:17.300
But here we are repeating the same block of code

29
00:01:17.310 --> 00:01:17.770
again 

30
00:01:17.780 --> 00:01:19.730
And this is not a good programming practice

31
00:01:21.340 --> 00:01:23.029
So we can put the block of code in a 

32
00:01:23.030 --> 00:01:26.060
function and we can call that function whenever we want 

33
00:01:26.070 --> 00:01:27.570
Like this here 

34
00:01:27.570 --> 00:01:30.009
The main logic is in the function named check and 

35
00:01:30.010 --> 00:01:32.610
we are reusing the same logic without writing the 

36
00:01:32.610 --> 00:01:34.259
same piece of code again 

37
00:01:35.340 --> 00:01:37.929
We can also place the same function in a common 

38
00:01:37.930 --> 00:01:38.620
header file 

39
00:01:38.630 --> 00:01:41.580
Here we are including the function check in util.h

40
00:01:41.580 --> 00:01:44.460
 And then we can re use it many 

41
00:01:44.460 --> 00:01:47.650
times by including the valid path of that common header 

42
00:01:47.650 --> 00:01:48.759
file like this 

43
00:01:51.340 --> 00:01:54.250
So that is how it is supporting code reusability

44
00:01:54.940 --> 00:01:57.240
So that's all and thank you for watching this video 

