1
00:00:00,370 --> 00:00:01,330
Hey, guys, what's up?

2
00:00:01,360 --> 00:00:04,760
This is a marathon, and I welcome you to an editorial on this course on Ruby.

3
00:00:04,780 --> 00:00:08,400
And in this story, we are going to cover the second part of class as an object.

4
00:00:08,770 --> 00:00:13,860
So in this tutorial, what we are going to do is that we are going to cover about class methods.

5
00:00:13,870 --> 00:00:16,270
We are going to cover about class variables.

6
00:00:16,300 --> 00:00:19,120
We are going to cover about constants.

7
00:00:19,390 --> 00:00:26,250
And we are going to learn more about the self object, which we have used in the previous tutorial of

8
00:00:26,260 --> 00:00:27,590
classes and objects, part one.

9
00:00:28,360 --> 00:00:33,370
So so far, all the methods we have created were basically the instance method.

10
00:00:33,490 --> 00:00:38,440
That is, there are methods that perform to an instance or object of the class.

11
00:00:38,740 --> 00:00:43,750
Now there are also the class level methods that are known as the class method.

12
00:00:43,960 --> 00:00:49,870
Now class methods are the methods we can call directly on the class itself without having to instantiate

13
00:00:49,870 --> 00:00:50,620
any object.

14
00:00:50,890 --> 00:00:55,130
You have not implemented any class method at this point, so let's do that now.

15
00:00:55,390 --> 00:01:02,380
So when defining a class matter, we pretend the method name with the reserved word that is s a dot.

16
00:01:02,860 --> 00:01:08,620
So to do it, what you are going to do is that you are going to just write in the name and you're going

17
00:01:08,620 --> 00:01:09,850
to write in self.

18
00:01:11,600 --> 00:01:18,650
Dodd and let's say the name of the class is, let's say X, and what are you going to do in this is

19
00:01:18,650 --> 00:01:21,410
that you are going to nod this right over here and.

20
00:01:21,410 --> 00:01:21,770
Right.

21
00:01:21,770 --> 00:01:22,820
And you are going to just.

22
00:01:22,820 --> 00:01:23,270
Right.

23
00:01:23,270 --> 00:01:24,320
And I am.

24
00:01:25,730 --> 00:01:29,360
X and you're going to just end this function, right?

25
00:01:30,050 --> 00:01:36,560
So if you want to call this class method what you are, you are going to do is that you are going to

26
00:01:36,560 --> 00:01:40,630
use the class name and you're going to write in the name of this function of a house.

27
00:01:40,630 --> 00:01:43,880
So we will just remove this from here, define our class.

28
00:01:43,890 --> 00:01:45,440
That was class, human and.

29
00:01:45,440 --> 00:01:45,680
Right.

30
00:01:45,710 --> 00:01:47,150
Well, here we are going to pass this.

31
00:01:47,150 --> 00:01:50,030
We are going to end this war here and write down here.

32
00:01:50,030 --> 00:01:53,060
What we are going to do is that we are going to write and.

33
00:01:54,040 --> 00:02:01,390
Human dot x run this code and you can see that you have got no kind of errors now to print out what

34
00:02:01,390 --> 00:02:04,630
is going on since this rally is going to get right down to a hair just right.

35
00:02:04,630 --> 00:02:09,940
And put human dot x and you can see that it says I am X..

36
00:02:10,180 --> 00:02:13,130
So why do we need a class method for this?

37
00:02:13,240 --> 00:02:19,480
Now, this example is a little contrived, but class methods are where we put functionality that does

38
00:02:19,480 --> 00:02:21,670
not pertain to individual objects.

39
00:02:21,910 --> 00:02:23,880
Object contains states.

40
00:02:23,920 --> 00:02:30,280
And if we have a method does that does not need to deal with states, then we can just use a class method

41
00:02:30,280 --> 00:02:33,110
like our very simple example we have seen right over here.

42
00:02:33,460 --> 00:02:38,760
So we will take a look at a more useful example in the future to Dalt.

43
00:02:38,980 --> 00:02:40,500
That will be a part of this section.

44
00:02:40,870 --> 00:02:46,440
So moving on to the second part of this tutorial that deals with class variables.

45
00:02:46,630 --> 00:02:52,930
Now, just as instance, variable captures information related to specific instances of class, we can

46
00:02:52,930 --> 00:02:59,200
create variables for an entire class that are appropriately named as the class variables, not class

47
00:02:59,200 --> 00:03:06,820
variables are created using to add the symbols and to create a class symbol that is going to belong

48
00:03:06,820 --> 00:03:09,640
to a class method that is going to view that variable.

49
00:03:09,640 --> 00:03:16,480
Where you are going to do is that you can just create the very same class which you have that is human.

50
00:03:16,810 --> 00:03:21,240
And what you are going to do is that you are going to define the constructor functions.

51
00:03:21,260 --> 00:03:23,890
We are going to write and initialize.

52
00:03:25,120 --> 00:03:31,090
And in here, we are going to initialize our numbers, so we are going to write in double at the rate,

53
00:03:31,120 --> 00:03:37,090
which means that this is now going to be a class variable and we are going to write in number.

54
00:03:38,520 --> 00:03:39,090
Of.

55
00:03:40,120 --> 00:03:49,450
Humans plus equal to one, so whenever this class object is going to get created, this number of humans

56
00:03:49,450 --> 00:03:55,120
variable that is now basically a class variable, it is going to get incremented by one.

57
00:03:55,450 --> 00:04:01,330
Finally, we have to end this function and we also have to initialize this right here inside this class,

58
00:04:01,330 --> 00:04:03,400
but outside these initialize function.

59
00:04:03,640 --> 00:04:09,340
So we going derive at the rate, at the rate, which means that the initialization of a class variable

60
00:04:09,340 --> 00:04:10,660
and we are going to write an.

61
00:04:12,090 --> 00:04:14,640
Number of humans equal to zero.

62
00:04:16,420 --> 00:04:21,340
Now, down here, what you are going to do is that you are going to create one more function.

63
00:04:22,850 --> 00:04:27,980
That is going to be using the Selke, which means that this is a class method, so we are going to write

64
00:04:27,980 --> 00:04:30,290
in self doubt total.

65
00:04:31,780 --> 00:04:33,490
Number of.

66
00:04:35,530 --> 00:04:40,630
Humans and right here, what we are going to do is that we are going to ride in at the rate of a dread.

67
00:04:41,590 --> 00:04:46,600
Number of humans, so this means that it is going to return the number of humans to the place from where

68
00:04:46,600 --> 00:04:52,360
this function is going to get called, and what you're going to do finally is that you're going to go

69
00:04:52,360 --> 00:04:57,040
outside this class, just remove this stuff from here and you're going to write inputs.

70
00:04:58,000 --> 00:04:59,050
Human Dawid.

71
00:05:00,430 --> 00:05:06,220
Total number of humans, so if you know just one, the school, you can see that it has generated zero

72
00:05:06,220 --> 00:05:09,780
because for now, no kind of object has been created.

73
00:05:09,790 --> 00:05:14,320
And when no object has been created, this means that the initialize function has not been called.

74
00:05:14,320 --> 00:05:19,420
And this Ohare is basically printing this value, which you have initialized right to here.

75
00:05:19,430 --> 00:05:20,650
That is right over here.

76
00:05:20,650 --> 00:05:25,300
It is being written right over here and it's getting output due to the spots we have placed right over

77
00:05:25,300 --> 00:05:25,540
here.

78
00:05:26,080 --> 00:05:28,330
Now we are going to create two objects.

79
00:05:28,330 --> 00:05:33,610
So let's say the first object is human one, and that is equal to human dot new.

80
00:05:33,610 --> 00:05:40,270
And let's say we create one more object human to that is going to equal to human dot knew we are going

81
00:05:40,270 --> 00:05:43,650
to just replace this with equal to sign.

82
00:05:44,560 --> 00:05:49,420
Now, since we have initialized to object, this means that this initialize function has been called

83
00:05:49,420 --> 00:05:49,920
twice.

84
00:05:50,260 --> 00:05:58,330
So if you just now repeat this line over here, just copy this base, this over here and now run this

85
00:05:58,330 --> 00:05:58,690
code.

86
00:05:59,260 --> 00:06:01,180
Oh, this is not what we expect.

87
00:06:01,180 --> 00:06:03,480
This means that the initialize function.

88
00:06:03,490 --> 00:06:05,160
Yes, I guess I missed an area here.

89
00:06:05,170 --> 00:06:05,680
My bad.

90
00:06:05,920 --> 00:06:09,390
Now run this code and you can see that you have got this two over here.

91
00:06:09,790 --> 00:06:16,300
So we have basically a class variable that is called as Aderet Aderet number of humans, which we initialized

92
00:06:16,300 --> 00:06:16,840
to zero.

93
00:06:16,840 --> 00:06:20,410
Then in our constructor function, we increment that number by one.

94
00:06:20,710 --> 00:06:25,750
Now remember that initialize function gets called every time you instantiate an object, we add the

95
00:06:25,750 --> 00:06:26,400
new method.

96
00:06:26,770 --> 00:06:30,820
This also demonstrated that we can access class variables from within an instance method.

97
00:06:31,450 --> 00:06:35,700
Finally, we just return the value of the class variable in the class method.

98
00:06:35,710 --> 00:06:37,720
That was the total number of humans.

99
00:06:38,050 --> 00:06:42,950
Now this is an example of using a class variable and a class method to keep track of the class level

100
00:06:42,950 --> 00:06:48,340
detail that pertains only to the class and not the individual objects.

101
00:06:49,300 --> 00:06:55,330
So then comes the concept of constants that are related with classes and objects.

102
00:06:56,630 --> 00:07:02,720
So when creating classes, there may also be certain variables that you never want to change.

103
00:07:02,960 --> 00:07:06,920
Now you can do this by creating what are called constants.

104
00:07:06,920 --> 00:07:12,830
You define a constant by using an uppercase letter at the beginning of the variable name, while technically

105
00:07:12,830 --> 00:07:15,620
constant, just need to begin with a capital letter.

106
00:07:15,920 --> 00:07:23,930
Most grubbiest will make the entire variable as the upper case, and that is going to what is called

107
00:07:24,020 --> 00:07:26,440
a constant in Ruby.

108
00:07:27,110 --> 00:07:34,010
So if you use something different Abargil so we will just remove this stuff from here.

109
00:07:35,410 --> 00:07:42,010
And we will remove this stuff from here as well, and right here we are going to specify age, so we

110
00:07:42,010 --> 00:07:48,340
are going to just write in human underscore age and we are going to make it equal to twenty five, let's

111
00:07:48,340 --> 00:07:52,930
say, and we are going to use the attribute accessor.

112
00:07:52,930 --> 00:07:57,960
This means that we are the we are setting the getter and setter methods.

113
00:07:58,270 --> 00:08:03,750
So right here, let's say it has two attributes, that is name and then it says age.

114
00:08:04,090 --> 00:08:10,840
So we are going to limit human age, it is going to be age and then you are going to define the constructor

115
00:08:10,840 --> 00:08:12,810
function that is initialized.

116
00:08:12,820 --> 00:08:16,480
I hope I've spelled it correctly this time and it is going to receive into arguments.

117
00:08:16,480 --> 00:08:19,090
First is the name, second is the age.

118
00:08:19,390 --> 00:08:23,860
Then right here you are going to use the self object because you know that if you don't, then it is

119
00:08:23,860 --> 00:08:27,570
going to treat it as local variables, which is exactly what you don't want.

120
00:08:27,850 --> 00:08:31,240
So you're going to write and s dot name equal to an.

121
00:08:34,480 --> 00:08:43,390
And you are going to ride and self doubt age equal to a and now where you are going to do is that you

122
00:08:43,390 --> 00:08:45,670
are going to ride in a esoteric.

123
00:08:47,040 --> 00:08:48,660
Human underscore.

124
00:08:48,900 --> 00:08:53,970
So this variable over here is going to be constant, so we are going to just minimize it to a small

125
00:08:53,970 --> 00:08:57,730
number since it is going to get multiplied and that is going to form a large number.

126
00:08:57,750 --> 00:09:00,020
So that's why it needs to get minimized.

127
00:09:00,420 --> 00:09:04,540
So that is going to be h equal to we missed and equal to as well.

128
00:09:05,250 --> 00:09:07,560
And now we are going to end.

129
00:09:10,580 --> 00:09:16,970
The constructor function, the initialize function, sorry, and downhere, what you're going to do

130
00:09:16,970 --> 00:09:19,170
is that you are going to end your class as well.

131
00:09:19,190 --> 00:09:20,420
That has already been ended.

132
00:09:20,720 --> 00:09:24,770
Now, what you're going to do is that you're going to write in, John, equal to.

133
00:09:26,480 --> 00:09:32,660
Human don't know, and you're going to pass in to values, the first one is going to be the name and

134
00:09:32,660 --> 00:09:35,180
the second one is going to be the H.

135
00:09:37,170 --> 00:09:45,000
Just press enter and just ride in boats, John Dot H Ronda's God and you can see that it says dooby

136
00:09:45,000 --> 00:09:49,200
dooby dooby dooby dooby dooby, which is I guess not what we wanted.

137
00:09:49,500 --> 00:09:56,310
And the reason behind this is that we have quoted this in string because what hearing is going on,

138
00:09:56,310 --> 00:09:59,370
I guess this concept should also be explained now.

139
00:09:59,370 --> 00:10:04,850
Inheritance, we are passing this as a number and right over here we are just multiplying this by five.

140
00:10:05,100 --> 00:10:08,580
So this 25 is going to get repeat five times.

141
00:10:08,580 --> 00:10:10,770
So I guess this was also an interesting concept.

142
00:10:11,160 --> 00:10:13,500
So you can see that twenty five has been printed five times.

143
00:10:13,500 --> 00:10:14,430
But we don't want this.

144
00:10:14,430 --> 00:10:16,650
We just want twenty five right over here.

145
00:10:16,740 --> 00:10:21,840
So we would just remove this from here and we will write twenty five right over here in as an integer.

146
00:10:22,080 --> 00:10:24,260
Run this now and you can see that it is twenty one.

147
00:10:24,480 --> 00:10:31,050
Now you must be thinking that John was just I guess 25 years old back in the previous tutorial and now

148
00:10:31,050 --> 00:10:32,310
he's one twenty five.

149
00:10:32,880 --> 00:10:35,250
So let's just make John a bit young.

150
00:10:35,250 --> 00:10:38,040
So that's just right in five O'Haire and that's twenty five now.

151
00:10:38,040 --> 00:10:39,640
John seems morea.

152
00:10:40,020 --> 00:10:47,640
So how do we use the constant that was human age to calculate the age and human errors were when we

153
00:10:47,640 --> 00:10:48,840
created the object.

154
00:10:48,840 --> 00:10:50,430
That was basically John Oakhill.

155
00:10:50,640 --> 00:10:56,970
Now note that we use the setter methods in the initialize method to initialize the Aderet name and at

156
00:10:56,970 --> 00:11:03,330
the rate each instance variable given to us by the attribute accessor method, we then use the age getter

157
00:11:03,330 --> 00:11:05,690
method to retrieve the value from the object.

158
00:11:05,970 --> 00:11:09,930
Now the human age is a variable that will never change for any reason.

159
00:11:09,930 --> 00:11:11,700
So we use that as a constant.

160
00:11:11,910 --> 00:11:16,800
It is possible to reassign a new world to a constant, but Ruby will throw a warning.

161
00:11:16,920 --> 00:11:18,960
So if you just write in, let's say.

162
00:11:21,780 --> 00:11:27,790
Human age equal to that same sex run good, you can see that it has changed the value.

163
00:11:27,820 --> 00:11:34,740
Now, John Edge is 30, but it has generated a warning that says one already initialised constant previous

164
00:11:34,740 --> 00:11:36,620
definition of human age was here.

165
00:11:37,020 --> 00:11:42,480
So that's why you should not be doing this, because it is a constant you can change the value.

166
00:11:42,480 --> 00:11:47,740
But as you have seen that it has generated the warning message for you, then you have to underscore

167
00:11:47,740 --> 00:11:51,660
this method, which you have been covering a lot in the past as well.

168
00:11:51,690 --> 00:11:58,830
Now, the two instance method basically comes line into every class in Ruby, and you have already covered

169
00:11:58,830 --> 00:12:01,030
it with every glass in Ruby in the previous tutorial.

170
00:12:01,060 --> 00:12:04,200
In fact, we have been using it all along.

171
00:12:04,440 --> 00:12:10,770
For example, suppose we have the same human glass from this example we are covering and a John object.

172
00:12:10,980 --> 00:12:14,670
What you can do is that if you just write an.

173
00:12:16,060 --> 00:12:24,190
Just remove this from here, run this code and you can see that you have got a very strange tangle here.

174
00:12:24,370 --> 00:12:30,100
Now, what's happening here is that the puts method automatically called the to underscore s on its

175
00:12:30,100 --> 00:12:35,620
argument, which in this case is the John's object, which you are printing right here.

176
00:12:36,530 --> 00:12:41,900
In other words, the ports, John, is equivalent to ports John Doe.

177
00:12:41,940 --> 00:12:48,870
To underscore as the reason we get this particular output lies within the to underscore smattered in

178
00:12:48,870 --> 00:12:56,480
Dubai by default, the two underscore smattered, retains the name of the objects glass and an engorging

179
00:12:56,480 --> 00:12:57,730
of the object idee.

180
00:12:58,190 --> 00:13:02,000
So this was the name of the object sorry, the glass.

181
00:13:02,000 --> 00:13:06,100
And then it is basically some kind of encoding of the object itself.

182
00:13:06,230 --> 00:13:10,120
Now you have to know the way here that the puts method call to underscore.

183
00:13:10,130 --> 00:13:13,520
As for any argument, that is not an area for an area.

184
00:13:13,730 --> 00:13:15,920
It writes on separate lines.

185
00:13:15,920 --> 00:13:20,630
The result of calling to underscore is on each element of the array.

186
00:13:21,050 --> 00:13:26,360
Now does this weekend at a custom to underscore as method to our human class or writing the default

187
00:13:26,360 --> 00:13:29,860
to underscore as that comes on with a ruby.

188
00:13:30,110 --> 00:13:34,320
So we will just make a change right in this class.

189
00:13:34,340 --> 00:13:41,180
We are going to add a function that is to underscore as that is basically going to override the custom

190
00:13:41,180 --> 00:13:43,980
or you can say the default to underscore this method.

191
00:13:44,540 --> 00:13:47,390
So right here, we are going to write in this.

192
00:13:51,060 --> 00:13:56,970
Sorry, the name is Antipollution, and you can just write a name.

193
00:13:59,180 --> 00:14:07,820
And he is you can just ride in this and you can ride in years old just the longer there's a bed so you

194
00:14:07,820 --> 00:14:09,050
can see what's going on.

195
00:14:09,260 --> 00:14:11,480
Yes, I guess that's much more visible now.

196
00:14:12,940 --> 00:14:16,010
So let's try this court again, run this.

197
00:14:16,580 --> 00:14:22,300
All right, we've got an area that is expecting out of it, but yes, that is my very common mistake.

198
00:14:22,300 --> 00:14:28,540
I do a lot more on this now, and you can see that it says the name is John and he is years old.

199
00:14:28,840 --> 00:14:31,570
Why have not it printed Eje now?

200
00:14:31,570 --> 00:14:32,160
It will print.

201
00:14:32,530 --> 00:14:35,650
Now it says he is 25 years old.

202
00:14:35,800 --> 00:14:37,120
This five four had this.

203
00:14:37,330 --> 00:14:39,310
The very same stuff is being created.

204
00:14:39,310 --> 00:14:45,610
But the difference over here is that now in place of what's John over here, which it should have just

205
00:14:46,120 --> 00:14:49,150
printed out an encoded ID as well as the name of the class.

206
00:14:49,300 --> 00:14:53,040
Now in place of that, what we have get is that we have overridden the method.

207
00:14:53,320 --> 00:14:57,820
Now, as you can see, that we did not have called the to underscore estimated to here.

208
00:14:57,820 --> 00:15:02,410
But if you just as I told you before, that if you just write and put John over here by default, you

209
00:15:02,410 --> 00:15:04,300
are actually calling this thing over here.

210
00:15:04,530 --> 00:15:07,300
If you now are underscored, you can see that the output is going to be the very same.

211
00:15:07,300 --> 00:15:10,990
But if you just remove this from here, the output is still going to be the same because this two underscore

212
00:15:10,990 --> 00:15:17,560
this method is basically present by default over here and that is going to get output it by default.

213
00:15:19,050 --> 00:15:26,280
So there is another method that is called as B that is very similar to the Put's method, except it

214
00:15:26,280 --> 00:15:29,010
does not call the two underscore s on its argument.

215
00:15:29,010 --> 00:15:33,020
It calls another building Ruby instant method that scholars inspect.

216
00:15:33,210 --> 00:15:40,400
Now, the inspect method is very helpful for debugging purposes, so we don't want to overwrite it.

217
00:15:40,410 --> 00:15:47,250
So if you just remove this UTSA from here, run DeJohn, run this and you can see that it has printed

218
00:15:47,250 --> 00:15:52,620
out a lot of things and that is basically what is used for debugging purposes and that is basically

219
00:15:52,620 --> 00:15:55,520
calling inspect method by default.

220
00:15:55,530 --> 00:15:59,760
So we don't want to inspect method to get a word in because it is a very useful method.

221
00:15:59,970 --> 00:16:05,850
Now this output implies that Björn is equivalent to bots John Dot inspect.

222
00:16:07,320 --> 00:16:12,780
Now, besides being called automatically when using boats, another important attribute of the two underscore

223
00:16:12,810 --> 00:16:17,340
as method is that it is also automatically called in string interpolation.

224
00:16:17,580 --> 00:16:23,870
Now, we have seen this before when using integers or errors in the string interpolation.

225
00:16:24,660 --> 00:16:26,370
So let's just remove this from here.

226
00:16:26,370 --> 00:16:31,560
And for example, you have an area that is one, two and three.

227
00:16:32,190 --> 00:16:39,870
And if you just write in votes AWOL here score, you can see that it is printed out the area for you.

228
00:16:39,870 --> 00:16:44,460
But if you use the string interpolation concept of a hill, for example, if I just remove this from

229
00:16:44,460 --> 00:16:46,410
here and I just write and put.

230
00:16:48,450 --> 00:16:49,050
The.

231
00:16:54,930 --> 00:16:55,650
Idabelle are.

232
00:16:56,550 --> 00:16:57,180
Arie.

233
00:17:01,060 --> 00:17:01,720
Does not.

234
00:17:02,740 --> 00:17:03,580
Conten.

235
00:17:05,470 --> 00:17:06,220
Hashtag.

236
00:17:07,010 --> 00:17:13,200
X, not X, is what is going to get passed in, so you can just define it right over here.

237
00:17:13,310 --> 00:17:17,120
You can just write an X equals five, since we cannot parse it, since we are not using any kind of

238
00:17:17,120 --> 00:17:17,970
functions over here.

239
00:17:18,410 --> 00:17:23,360
So if you just now run this code, it says the one, two, three area does not contain five.

240
00:17:23,720 --> 00:17:30,770
Now, here are the do underscore X method is automatically called on the area hateable our area object,

241
00:17:30,770 --> 00:17:32,150
which is right or here.

242
00:17:33,260 --> 00:17:38,330
And it is also going to get passed on the X integer object.

243
00:17:39,630 --> 00:17:45,180
I repeat, if you hear that to underscore this method is automatically called on the air, the blast

244
00:17:45,180 --> 00:17:48,210
area object as well as the X into your object.

245
00:17:48,420 --> 00:17:52,260
We will see if we can include our John object and a string interpolation.

246
00:17:52,590 --> 00:17:58,080
So you can just use the very same concept and you can just print out John and you can just print out

247
00:17:58,080 --> 00:18:04,270
is it for example, if I just press control that several times so that my previous score is visible?

248
00:18:04,590 --> 00:18:06,000
Yes, right over here it is.

249
00:18:06,510 --> 00:18:10,710
And what you can do is that if you just write and.

250
00:18:14,400 --> 00:18:20,160
It's and you just ride in quotation marks and you just write and the name of the object that is John

251
00:18:20,550 --> 00:18:24,690
and you just run the score, you can see that it says the name is John and he's 25 years old.

252
00:18:24,930 --> 00:18:30,180
Now, I guess the reason behind this is there's just remove this for now and now run this and you can

253
00:18:30,180 --> 00:18:32,430
see that it has not worked on it.

254
00:18:32,670 --> 00:18:36,750
Now, in summary, the two underscore is that it is also automatically called on the object.

255
00:18:36,750 --> 00:18:40,220
When we use it with bots or when we use it would strengthen the position.

256
00:18:40,240 --> 00:18:45,480
This fact may seem trivial at the moment, but knowing when to underscore, as method is called, it

257
00:18:45,480 --> 00:18:49,920
will help us understand how to read and write the better object oriented called.

258
00:18:51,340 --> 00:18:57,040
So finally, moving on to the final part of this tutorial that is about the self object, now we have

259
00:18:57,070 --> 00:19:02,620
talk about the self earlier, but let's try to dive a little deeper so you can understand exactly what

260
00:19:02,620 --> 00:19:04,660
self is and how to understand what it is.

261
00:19:04,660 --> 00:19:11,560
Referencing to the self can refer to different things that depend on where it is used, for example.

262
00:19:11,590 --> 00:19:14,600
So far we have seen two clear use cases for self.

263
00:19:14,640 --> 00:19:19,020
The first one is that you have to use self and calling the CETRA methods from within the class.

264
00:19:19,030 --> 00:19:24,520
In our earlier example, we showed that self was necessary in order for our change and for method to

265
00:19:24,520 --> 00:19:30,580
work properly, we had to yourself to allow Ruby to disambiguate between initializing a local variable

266
00:19:30,580 --> 00:19:32,050
and calling a central method.

267
00:19:32,170 --> 00:19:40,270
And when we use the self method, it was when our output was generated and then our ED was not recognizing

268
00:19:40,480 --> 00:19:46,300
that name, height and weight, not as a local variables, but as a setter method variables.

269
00:19:46,300 --> 00:19:48,190
And it was just printing out of our output.

270
00:19:48,550 --> 00:19:52,750
The second use case is that you can use self or class method definition.

271
00:19:52,990 --> 00:19:59,140
So let's play around with self to see why the above two rules are going to work.

272
00:19:59,500 --> 00:20:02,470
So just remove this from here.

273
00:20:04,100 --> 00:20:06,650
And we are going to have our attribute.

274
00:20:09,310 --> 00:20:16,120
Accessor, and that is going to now have three variables that were basically the part of previous tutorial

275
00:20:16,120 --> 00:20:20,440
that were name, height and finally weight.

276
00:20:22,260 --> 00:20:28,200
And down here, you are going to have the initialise function as well, that is going to receive entry

277
00:20:28,200 --> 00:20:36,360
arguments and edge and W, not W and in this way you're going to ride and you're going to ride and so

278
00:20:36,750 --> 00:20:43,800
dot name equal to and and you're going to ride and self-taught.

279
00:20:45,240 --> 00:20:52,410
Height equal to edge, and you're going to ride and so self-taught with equal to W and you are going

280
00:20:52,410 --> 00:20:57,120
to finally end this initialize function and down here you are going to have one more function.

281
00:20:57,120 --> 00:20:59,420
That was also a part of the previous tutorial.

282
00:20:59,430 --> 00:21:05,340
That was the change in full function and the change in function also received in three arguments that

283
00:21:05,340 --> 00:21:07,110
were an Etch W.

284
00:21:08,520 --> 00:21:14,190
And in this function, what we were doing basically is that we were doing this stuff over here, so

285
00:21:14,190 --> 00:21:18,000
we will just copy it to save a time and we will just to try to help.

286
00:21:18,390 --> 00:21:23,090
So it is about maybe going to end up not hijikata edge and subducted equal to W..

287
00:21:23,100 --> 00:21:27,570
And finally, what we are going to do is that we are going to and this change in function as well.

288
00:21:27,810 --> 00:21:30,470
Finally, we are going to have our display functions.

289
00:21:30,480 --> 00:21:35,640
We are going to write in self sorry def display and in the display function.

290
00:21:35,640 --> 00:21:39,090
What we are going to do is that we are going to use interpolation this time.

291
00:21:39,090 --> 00:21:44,730
So we are going to write and depletion and we are going to write and self dot name.

292
00:21:47,160 --> 00:21:48,870
We are going to ride in Whit's.

293
00:21:50,530 --> 00:21:51,530
Get interpellation.

294
00:21:51,610 --> 00:21:54,580
We are going to ride and self-taught wait.

295
00:21:56,370 --> 00:21:57,600
And is.

296
00:21:59,340 --> 00:22:01,920
So, Dr. Height.

297
00:22:03,600 --> 00:22:05,100
Doll, good enough.

298
00:22:05,940 --> 00:22:07,630
Let's just move it over here.

299
00:22:07,710 --> 00:22:09,840
So it says whatever a name.

300
00:22:09,850 --> 00:22:11,210
So let's say the name is John.

301
00:22:11,220 --> 00:22:13,230
So it is going to print at John.

302
00:22:13,530 --> 00:22:17,450
It's, let's say 30 gidgee and it's 12 feet tall.

303
00:22:17,610 --> 00:22:19,300
So this is what we want to print on.

304
00:22:19,320 --> 00:22:24,360
Let's just end this, because this is the most common error we often encounter.

305
00:22:24,720 --> 00:22:30,030
So this time we will not have that error because we have just removed the.

306
00:22:31,620 --> 00:22:32,760
Just added this a.

307
00:22:35,200 --> 00:22:40,660
Now, before we go on with the calling card, let's say we have one more function that is less over

308
00:22:40,660 --> 00:22:48,280
here and in this function X, what we are going to do is that we are going to just write in self or

309
00:22:48,280 --> 00:22:51,610
help just end this function of a here and now.

310
00:22:51,610 --> 00:22:55,030
What we are going to do right down here is that.

311
00:22:56,660 --> 00:23:02,030
We are going to create the objects, we are going to write in, John, equal to.

312
00:23:05,120 --> 00:23:11,450
Human dog knew and the parameters we are going to pass, the three values this is expecting, so we

313
00:23:11,450 --> 00:23:16,220
are going to write and John, we are going to write and the height of John.

314
00:23:16,220 --> 00:23:17,750
So that is 12.

315
00:23:19,300 --> 00:23:20,220
Inches.

316
00:23:22,250 --> 00:23:27,070
And finally, we are going to write in the vein of John, that is, let's say 30 Kaiji.

317
00:23:27,800 --> 00:23:30,860
So if you now just run the scored.

318
00:23:31,840 --> 00:23:33,650
You can see that it has worked perfectly.

319
00:23:33,670 --> 00:23:43,360
Now, what you need to do is that you if you just write in the you just write in John Dot Axler here,

320
00:23:43,600 --> 00:23:44,830
you just run this code.

321
00:23:45,110 --> 00:23:49,990
You can see that you have got a very different thing, your code, the name of the class than you have

322
00:23:49,990 --> 00:23:52,260
got the object ID.

323
00:23:52,300 --> 00:23:58,720
Then you have got the inspection of a hair that says name to John height equals 12 inches and we're

324
00:23:58,720 --> 00:23:59,440
equal to thirty 30.

325
00:24:01,430 --> 00:24:06,150
Now, the reason behind this is that we are actually calling this self right from here.

326
00:24:06,530 --> 00:24:12,560
So that is something that is very interesting from within the class now, from within the class, when

327
00:24:12,560 --> 00:24:17,630
an instance method uses the self, it is referencing the calling object.

328
00:24:17,630 --> 00:24:20,440
In this case, that is the Johns object.

329
00:24:20,720 --> 00:24:28,010
Now, therefore, from within the change in method calling self dart name acts the same as calling John

330
00:24:28,010 --> 00:24:29,980
Daudt name from outside the class.

331
00:24:30,350 --> 00:24:34,310
You can't call John Dort name inside the class Tolson's.

332
00:24:34,310 --> 00:24:36,740
It is not in the school.

333
00:24:37,130 --> 00:24:43,310
Now we understand why using the self to call instance method from within the class works the way it

334
00:24:43,310 --> 00:24:44,360
does now.

335
00:24:44,360 --> 00:24:48,910
The other place we use self is when we are defining class methods.

336
00:24:49,670 --> 00:24:50,660
So I hope you understood.

337
00:24:50,670 --> 00:24:58,430
So I will just remove this from here and now we will see that how the self is going to work when we

338
00:24:58,430 --> 00:24:59,980
are dealing with class method.

339
00:25:00,290 --> 00:25:04,430
So let's say you have the same class that as the human class.

340
00:25:04,430 --> 00:25:10,970
And in this class, what you're going to do is that you are going to define a function that is going

341
00:25:10,970 --> 00:25:12,130
to be defined by itself.

342
00:25:12,140 --> 00:25:15,260
So you're going to write in self taught, let's say, x sohel.

343
00:25:17,220 --> 00:25:23,040
And you are going to simply end dysfunction, this function will have nothing just and the glass as

344
00:25:23,040 --> 00:25:23,300
well.

345
00:25:24,030 --> 00:25:30,870
Now when selfies pretended to a method definition, it is basically what we are doing is that we are

346
00:25:30,870 --> 00:25:32,390
defining a class method.

347
00:25:32,730 --> 00:25:37,170
So we talked about this earlier in our human class method example.

348
00:25:37,170 --> 00:25:41,270
We defined a class method that was called a self doubt, total number of humans.

349
00:25:41,580 --> 00:25:46,390
So that method return the value of the class variable that was number of humans.

350
00:25:46,620 --> 00:25:48,120
So how this was possible.

351
00:25:48,300 --> 00:25:53,010
So to have a closer look at that, what you can do is that you can just write an.

352
00:25:54,390 --> 00:25:56,250
Both so for here.

353
00:25:58,700 --> 00:26:05,750
And what you can do is that you can just go create an instance for this class, let's say, John.

354
00:26:07,180 --> 00:26:14,650
Equal to human, don't you just run the score and you can see that you have got the name of the class

355
00:26:14,920 --> 00:26:24,340
so you can test it in the RV just by passing the above code into the RV and typing in human test.

356
00:26:24,340 --> 00:26:30,910
You can see that using self inside a class, but outside an instant method refers to the class itself,

357
00:26:30,910 --> 00:26:33,130
as you can see right here on the bottom runner.

358
00:26:33,490 --> 00:26:39,850
Therefore, a method definition prefixed with self is the same as defining the method on the class that

359
00:26:39,850 --> 00:26:45,040
is def self, not the method name that is equivalent to self.

360
00:26:46,080 --> 00:26:48,300
Human dot, the name of the method.

361
00:26:48,320 --> 00:26:53,760
That's why it is called as a class method, it's actually being defined on the class.

362
00:26:54,120 --> 00:26:57,210
To be clear, from within a class, there are two conditions.

363
00:26:57,240 --> 00:27:04,530
The first is self inside of an instance method reference references the instance object that called

364
00:27:04,530 --> 00:27:10,500
the method that is the calling object, therefore self doubt, which is the same as John Godwit in our

365
00:27:10,500 --> 00:27:11,580
previous example.

366
00:27:12,760 --> 00:27:18,370
The second scenario is that south, outside of an instance method, references the class and can be

367
00:27:18,370 --> 00:27:19,990
used to define class matters.

368
00:27:19,990 --> 00:27:26,650
Therefore, def self not name is the same as Def Human Dawid name and the name of the function.

369
00:27:26,650 --> 00:27:34,030
In our example, we can see that self is a way of being explicit about whatever program is referencing

370
00:27:34,030 --> 00:27:42,190
and what our intentions are as far as behavior itself changes, depending on the scope it is used.

371
00:27:42,190 --> 00:27:46,630
And so pay attention to see if you are inside an instance, method or not.

372
00:27:46,780 --> 00:27:52,750
Self is a tricky concept to grasp in the beginning, but the more often you see its use, the more you

373
00:27:52,750 --> 00:27:54,710
will understand object oriented programming.

374
00:27:55,180 --> 00:28:02,950
If the explanations does not make any kind of sense, just memorize the two rules I have explained.

375
00:28:03,320 --> 00:28:04,990
I will just revise that for you.

376
00:28:04,990 --> 00:28:11,140
The first rule is that if you are inside an instance method and self is basically inside an instance

377
00:28:11,140 --> 00:28:17,710
method that is basically referencing the instance that is called on the method that is the calling object.

378
00:28:17,720 --> 00:28:24,310
The second rule is that self outside of an instance method references the class and can be used to define

379
00:28:24,490 --> 00:28:25,450
class method.

380
00:28:26,610 --> 00:28:32,940
So to summarize, this, basically, class is an object, particleboard, a lot of information about

381
00:28:32,950 --> 00:28:38,700
classis object and object oriented programming, but you are becoming much more proficient in the language.

382
00:28:38,710 --> 00:28:42,600
So you are able to digest more and process more complicated material.

383
00:28:42,930 --> 00:28:45,080
Now you're growing as a ruby programming.

384
00:28:45,090 --> 00:28:48,240
This is where things finally starts to get fun.

385
00:28:48,840 --> 00:28:55,590
So in this tutorials, what we have heard is that we have seen how to initialize object with a new method.

386
00:28:55,910 --> 00:29:01,350
For instance, variable keep track of an object, started learning how to attribute methods, generate

387
00:29:01,350 --> 00:29:06,240
the getters and setters using instanced method to perform operation on our objects.

388
00:29:06,450 --> 00:29:10,810
Then we have covered using class methods to perform operation at the class level.

389
00:29:10,950 --> 00:29:16,980
Then we have seen assigning class variables to relate specifically to our class than we have seen assigning

390
00:29:16,980 --> 00:29:20,420
constants that never change to perform operations in our classes.

391
00:29:20,700 --> 00:29:27,090
Then we have seen how the two underscore as method is used and that we have been using it implicitly

392
00:29:27,090 --> 00:29:27,830
all along.

393
00:29:27,840 --> 00:29:30,810
And then finally we have seen how and when to use s.

394
00:29:30,960 --> 00:29:37,080
So if you are you have never seen before this, these two tutorials should have been a doozy.

395
00:29:37,080 --> 00:29:42,150
But so we need a lot of practice to truly understand it.

396
00:29:42,480 --> 00:29:44,460
Don't skip anything.

397
00:29:44,710 --> 00:29:49,860
Object oriented programming is a very important piece of fundamental knowledge that you will need to

398
00:29:49,860 --> 00:29:54,000
truly understand ruby codes and frameworks like Ruby on rails.

399
00:29:55,330 --> 00:30:02,140
So I will just applaud exercise for you, too, as well, so that you can just knowledge it into your

400
00:30:02,140 --> 00:30:06,480
brain and fingers and you can see that how you are going to implement that.

401
00:30:06,490 --> 00:30:10,750
And in the exercise of you have got any problems, you can feel free to ask and I'll be more than happy

402
00:30:11,080 --> 00:30:11,940
to help you out.

403
00:30:12,190 --> 00:30:17,950
So I guess that's it with the glasses and object parts and the next tutorial, you can start on with

404
00:30:17,950 --> 00:30:25,060
the concepts that are related with object oriented program that are in that inheritance and polymorphism

405
00:30:25,060 --> 00:30:25,710
type of things.

406
00:30:26,080 --> 00:30:28,030
So that's a good class as an object.

407
00:30:28,060 --> 00:30:31,290
Thank you so much for watching and I'll see you guys in the next Dorio.
