1
00:00:00,300 --> 00:00:01,400
Hey, guys, what's up?

2
00:00:01,410 --> 00:00:05,140
This is American, and I welcome you to an editorial on discourse on Ruby.

3
00:00:05,430 --> 00:00:11,130
So far we have covered the value and we have covered the do while loop.

4
00:00:11,520 --> 00:00:19,320
So for both of these loops, which we have covered so far, they are used when you are unknown about

5
00:00:19,320 --> 00:00:25,020
the number of white Russian programs should undergo because you are uncertain about the condition and

6
00:00:25,020 --> 00:00:28,950
you don't know how much that condition is going to it right now.

7
00:00:28,980 --> 00:00:33,810
For example, you know the number of iterations for what you want to execute your code.

8
00:00:33,810 --> 00:00:41,670
And in simple words, if you know the number of cycles before the loop is initiated, then what you

9
00:00:41,670 --> 00:00:44,160
can do is that you can use the FA statement.

10
00:00:44,460 --> 00:00:47,580
The far loop is used in conjunction with arranger's.

11
00:00:47,580 --> 00:00:55,380
Often for each element of arrange a block of statements is executed and the statements are executed

12
00:00:55,620 --> 00:00:57,300
with and keyword.

13
00:00:57,690 --> 00:01:01,320
Now it also again has the doki word, which is again optional.

14
00:01:01,560 --> 00:01:04,520
So if you talk about the syntax of this, it looks something like this.

15
00:01:04,530 --> 00:01:08,040
You have the fakie word, then you have the condition, then you have the doki word.

16
00:01:09,010 --> 00:01:15,670
Then you can simply write in the statements you want to execute for that specific number of iterations

17
00:01:15,670 --> 00:01:19,270
or a specific number of cycles, and you have to terminate it with the end keyword.

18
00:01:19,540 --> 00:01:24,880
Now, here, the condition is basically that you have to write in a variable which is going to store

19
00:01:24,880 --> 00:01:27,450
the value of the counter.

20
00:01:27,620 --> 00:01:30,340
Then you have to use the word and then you have to write in the check.

21
00:01:30,340 --> 00:01:36,280
And the check is basically where ranges are going to help you out and you already have the word Granges.

22
00:01:36,280 --> 00:01:38,500
So I don't have to explain what changes are over here.

23
00:01:39,040 --> 00:01:44,440
So how this is going to be all implemented, I guess if I just go over some examples, then it would

24
00:01:44,440 --> 00:01:46,240
be much more easier for you to understand.

25
00:01:46,570 --> 00:01:54,910
So I will move on to Adam and in here we will have a very, very, very simple Ruby program using for

26
00:01:54,920 --> 00:02:00,580
a statement in which what we will do is that we will just print out some numbers from, let's say,

27
00:02:00,580 --> 00:02:04,850
zero to nine, so that what we have to do is that you are going to use four.

28
00:02:05,050 --> 00:02:07,150
And after that, you have to specify the condition.

29
00:02:07,150 --> 00:02:11,480
And as I told you, that the condition is something that you have to write in a variable, let's say,

30
00:02:11,590 --> 00:02:12,580
is the variable.

31
00:02:12,880 --> 00:02:17,090
Then you have to use the English word and then you have to write in the range.

32
00:02:17,470 --> 00:02:21,640
So what we are going to do is that, as I told you, we are going to write in the number from zero to

33
00:02:21,640 --> 00:02:26,560
nine and you can just write and do what is optional if you don't want to write and you can just write

34
00:02:26,560 --> 00:02:29,140
and then the end is going to be generated by default.

35
00:02:29,170 --> 00:02:31,840
When you click, enter and you're going to simply write inputs.

36
00:02:33,460 --> 00:02:39,730
Hashtag and you're going to write an Iowa held, so antipollution is going to simply help you out to

37
00:02:39,730 --> 00:02:41,080
print out those numbers.

38
00:02:41,090 --> 00:02:45,940
If I just run the score and then explain what's going on over here, as you can see that you have just

39
00:02:45,940 --> 00:02:47,960
got the numbers from zero to nine.

40
00:02:48,220 --> 00:02:54,700
Now, what's going on over here is that this range is basically going to help you iterate this loop.

41
00:02:54,940 --> 00:02:59,290
And this is basically what is the number of times this loop is going to get outrated.

42
00:02:59,290 --> 00:03:06,370
So this lubow here is going to iterate from zero till nine for the first time when it has the value

43
00:03:06,370 --> 00:03:08,860
zero, it's going to start on from the zero.

44
00:03:09,130 --> 00:03:15,250
Zero is going to be stored in this very evil eye after the statements are executed.

45
00:03:15,250 --> 00:03:22,750
Once this value is going to be incremented automatically and it is going to then assume the value one.

46
00:03:22,930 --> 00:03:24,940
So I is then going to equal one.

47
00:03:24,940 --> 00:03:28,540
So that's why, as you can see, that zeros printed on the first case, then we have got one.

48
00:03:28,840 --> 00:03:33,370
After that it is going to have two, then three, then four and so on until nine.

49
00:03:33,610 --> 00:03:35,010
Now up to nine is reached.

50
00:03:35,020 --> 00:03:40,750
I will have the value nine, it will print it out and it already know, as I told you before, that

51
00:03:40,750 --> 00:03:46,630
the fourth statement is used when the number of cycle is known before the loop is initiated.

52
00:03:46,660 --> 00:03:50,900
So you already know the number of cycles this loop is going to go through.

53
00:03:51,790 --> 00:03:55,750
So that's why after eight equals nine, this statement is executed.

54
00:03:55,750 --> 00:04:01,090
Nine is going to be printed and it is going to automatically terminate this for a loop using this end

55
00:04:01,110 --> 00:04:01,450
statement.

56
00:04:01,450 --> 00:04:05,830
And it is going to come out and you can just check it out outside.

57
00:04:08,100 --> 00:04:16,230
Before you run it, and as you can see that it says outside the far loop, so this is how basically

58
00:04:16,230 --> 00:04:20,700
for a loop can be used, you can do more jobs over here, for example.

59
00:04:21,000 --> 00:04:27,210
I would have, let's say, outside here, a variable, let's say some that is going to equal to zero.

60
00:04:27,210 --> 00:04:35,820
And in here, what I'm going to do is that I'm going to ride in some equal to some plus I and I is going

61
00:04:35,820 --> 00:04:37,710
to be incremented automatically.

62
00:04:37,890 --> 00:04:46,320
Whereas if you just recognize the value and do a loop and that we have to increment the counterassault.

63
00:04:46,320 --> 00:04:50,670
But in this case, the counter is going to be incremented itself so you don't have to increment the

64
00:04:50,670 --> 00:04:51,150
counter.

65
00:04:51,690 --> 00:04:54,180
The IRA is going to be zero for the first case.

66
00:04:54,330 --> 00:04:57,180
It is going to equal to zero zero.

67
00:04:57,330 --> 00:04:59,580
In the next case, it is going to be zero plus one.

68
00:04:59,580 --> 00:05:03,510
Then it is going to be one platitude and it's going to be three plus four and so on till nine.

69
00:05:03,840 --> 00:05:08,220
And you can just ride in like something the sum from.

70
00:05:09,670 --> 00:05:10,130
Zero.

71
00:05:10,200 --> 00:05:14,860
Do not like this, it's going to be zero to nine is.

72
00:05:18,790 --> 00:05:24,460
And you can just ride in hashtag some random score and you can see that it stays the same from zero

73
00:05:24,460 --> 00:05:27,540
to nine is forty five.

74
00:05:28,180 --> 00:05:36,160
So that's how basically you can have things done inside a for loop if you know the number of cycles,

75
00:05:36,160 --> 00:05:39,130
you can do a whole lot of things in between these.

76
00:05:39,520 --> 00:05:41,890
But for now you have to keep it simple.

77
00:05:41,900 --> 00:05:50,290
So you, you only need to know the syntax and how basically the counter is incremented itself and for

78
00:05:50,290 --> 00:05:52,060
where you have to use Richardo.

79
00:05:52,660 --> 00:05:54,460
So I guess that's it with this tutorial.

80
00:05:54,470 --> 00:05:56,140
Thank you so much, guys, for watching.

81
00:05:56,140 --> 00:05:58,360
And I'll see you guys in the next Dorio.
