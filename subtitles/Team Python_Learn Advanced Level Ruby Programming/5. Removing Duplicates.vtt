WEBVTT
1
00:00:00.390 --> 00:00:01.350
Hey, guys, what's up?

2
00:00:01.380 --> 00:00:04.940
This is a marathon, and I welcome you to another Dooralong discourse on Ruby.

3
00:00:05.190 --> 00:00:10.130
And in this story, we are going to see how to remove duplicate elements from an area.

4
00:00:10.440 --> 00:00:16.200
Now, sometime you will get a list of data that have some duplications now to remove the duplicates

5
00:00:16.200 --> 00:00:16.590
from it.

6
00:00:16.590 --> 00:00:22.470
What you can do is that you could I trade through the errors and filter out the duplicates, but that

7
00:00:22.470 --> 00:00:24.790
is going to be very difficult.

8
00:00:25.020 --> 00:00:32.040
What Ruby is providing you is the unique method, and that makes things a lot more easier.

9
00:00:32.220 --> 00:00:38.740
The unique method basically redone a new area with all the duplicate values removed automatically.

10
00:00:39.030 --> 00:00:46.980
So what you can do is that you can just have an area that is less X and it can then let's set numbers

11
00:00:46.980 --> 00:00:47.480
this time.

12
00:00:47.490 --> 00:00:48.910
So let's say these are the numbers.

13
00:00:48.910 --> 00:00:53.370
So we are going to have iterations from one to five again and again.

14
00:00:54.760 --> 00:00:59.080
So you can see that you have got elements from one to five, but you have got a lot of guns, a lot

15
00:00:59.080 --> 00:01:03.670
of those, a lot of trees, a lot of forest and a lot of pipes, what you want is that you want all

16
00:01:03.670 --> 00:01:05.680
the duplicates to be removed from there.

17
00:01:05.720 --> 00:01:08.910
So it simply you just write and put sex over here.

18
00:01:09.070 --> 00:01:15.220
You can see that you have got the entire area that prints the entire elements that are a part of this

19
00:01:15.220 --> 00:01:15.510
area.

20
00:01:15.520 --> 00:01:20.230
But if you just write an X dot, you and I argue that is the unique function on it.

21
00:01:20.410 --> 00:01:23.290
You can see that you have got only one, two, three, four, five.

22
00:01:23.530 --> 00:01:25.440
All the duplicates have been removed.

23
00:01:25.810 --> 00:01:31.230
So sometimes you when you merge two sets of data, you will end up with duplicates.

24
00:01:31.420 --> 00:01:36.850
So if you have, let's say, two areas, you have just why are we here again?

25
00:01:38.930 --> 00:01:42.350
And that, let's say, again, contain duplicates element.

26
00:01:44.550 --> 00:01:51.000
So if you have a combination of both these areas, then what you can do is that you can just ride in,

27
00:01:51.000 --> 00:01:51.810
let's say.

28
00:01:54.240 --> 00:02:00.720
Combo equals two X plus Y, and that is going to concatenate both these areas and you can just write

29
00:02:00.720 --> 00:02:01.650
and put.

30
00:02:03.240 --> 00:02:10.710
Campbell, run this good and you can see that you've got this lot of elements right here, but to do

31
00:02:10.710 --> 00:02:14.250
it without duplicates, just right in combo, not unique.

32
00:02:14.250 --> 00:02:18.270
And you can see that you have simply got one, two, three, four or five.

33
00:02:18.480 --> 00:02:23.970
So you could use a unique method to remove the duplicate, but it's better to avoid introducing them

34
00:02:23.970 --> 00:02:26.720
entirely instead of adding the arrays together.

35
00:02:26.730 --> 00:02:32.080
What you can do is that you can use the pipe operator, which merges the arrays together.

36
00:02:32.370 --> 00:02:38.910
So what you can do over here is that you can just in place of this over here, you can just write in

37
00:02:38.910 --> 00:02:45.390
this and then you can just simply print on combo around the score and you will still have the very same

38
00:02:45.390 --> 00:02:45.730
output.

39
00:02:46.050 --> 00:02:52.260
So this Ohare is basically known as the pipe operator and that is also used to remove the duplicates.

40
00:02:52.680 --> 00:02:58.400
So it is a better approach to use this pipe operator in place of that unique.

41
00:02:58.830 --> 00:03:06.030
So Ruby Arrays also supports the subtraction feature, which means that you can subtract one array from

42
00:03:06.030 --> 00:03:08.390
the another value to get new values as well.

43
00:03:09.640 --> 00:03:14.080
And what you can do is that you can just simplify it so that you can much more see what's going on,

44
00:03:14.080 --> 00:03:15.940
so you can just write in one, two, three, four, five.

45
00:03:16.300 --> 00:03:23.310
And let's say you want to subtract four and five from this so you can just write an X minus Y, run

46
00:03:23.320 --> 00:03:27.150
the score and you can see that you have got the elements subtracted over him.

47
00:03:27.400 --> 00:03:31.480
So that was basically just an idea that popped up in my mind.

48
00:03:31.480 --> 00:03:33.650
And I thought that it should also be covered over here.

49
00:03:34.000 --> 00:03:38.020
So the purpose basically was to show you how to remove duplicates.

50
00:03:38.020 --> 00:03:39.220
And there were basically two ways.

51
00:03:39.220 --> 00:03:44.660
The first one was using the unique method and then the second one was using the pipe operator.

52
00:03:44.860 --> 00:03:46.690
So I hope you understood both of them.

53
00:03:46.720 --> 00:03:51.850
So I guess that's it would destroy Dorel as well in the next iteration and see how to manipulate each

54
00:03:51.850 --> 00:03:53.470
element's value.

55
00:03:53.600 --> 00:03:57.720
And that is basically known as the transformation of data using errors.

56
00:03:57.760 --> 00:03:59.770
So that will be a part of future tutorial.

57
00:03:59.950 --> 00:04:00.880
So for this to.

58
00:04:01.180 --> 00:04:01.530
That's it.

59
00:04:01.540 --> 00:04:02.830
Thank you so much, guys, for watching.

60
00:04:02.830 --> 00:04:04.660
And I'll see you guys in the next hour, Dorian.
