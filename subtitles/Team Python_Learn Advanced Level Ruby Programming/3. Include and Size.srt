1
00:00:00,300 --> 00:00:01,340
Hey, guys, what's up?

2
00:00:01,350 --> 00:00:06,330
This morning, I welcome you to another tutorial on discourse on Ruby and in this story, and we will

3
00:00:06,330 --> 00:00:09,350
start on with the functions that can be applied on ranges.

4
00:00:09,630 --> 00:00:12,350
So in this story, we are going to be covering two functions.

5
00:00:12,360 --> 00:00:16,490
The first one is going to be the include function and the second one is going to be the size function.

6
00:00:16,920 --> 00:00:24,450
So starting on with the first one, that is the include function on ranges that include is a building

7
00:00:24,450 --> 00:00:27,600
method in Ruby that returns a boolean value.

8
00:00:27,600 --> 00:00:33,670
True, if the given object lies within the given range else it is going to return false.

9
00:00:34,020 --> 00:00:40,590
So if you talk about the syntax of this include function, then it is going to look something like this.

10
00:00:40,590 --> 00:00:44,570
You have to write in the name of the range in which your range is stored.

11
00:00:44,580 --> 00:00:47,370
Basically that is going to be the variable in simple words.

12
00:00:47,590 --> 00:00:53,700
Then you have to write in DOT include a question mark and then you have to write in the value you want

13
00:00:53,700 --> 00:00:58,410
to check if it is included in the certain range you want to check or not.

14
00:00:58,830 --> 00:01:04,820
Now the function except an object, and that is basically the value.

15
00:01:05,280 --> 00:01:10,920
So moving on to the second function, which we are going to be covering in this tutorial is the size

16
00:01:10,920 --> 00:01:11,400
function.

17
00:01:11,700 --> 00:01:17,400
So the size is also a building function in Ruby that returns the size of the range.

18
00:01:17,400 --> 00:01:21,780
It returns basically the number of elements in the range in simple words.

19
00:01:22,530 --> 00:01:25,140
Then you have this index, right?

20
00:01:25,170 --> 00:01:28,830
Well, here it is going to be the name of the range size.

21
00:01:28,830 --> 00:01:31,470
And this function accepts no parameter.

22
00:01:31,980 --> 00:01:36,050
And the return value of this is going to be the number of elements as a dojos.

23
00:01:36,050 --> 00:01:40,550
So let's just practice both of these in our ED.

24
00:01:41,100 --> 00:01:43,050
So let's move on to Adam.

25
00:01:43,800 --> 00:01:48,430
And the first function we are going to be practicing is going to be the include function.

26
00:01:48,450 --> 00:01:53,820
Now, you have already covered this in the previous tutorials as well, so just give a brief overview.

27
00:01:53,850 --> 00:02:00,350
So let's say we have this range that is going to equal to zero then.

28
00:02:00,360 --> 00:02:02,570
So it contains no from zero to 10.

29
00:02:02,580 --> 00:02:07,620
Now, we want to check that if a certain number exists between this range or not, you can just write

30
00:02:07,620 --> 00:02:08,910
inputs range.

31
00:02:08,910 --> 00:02:11,640
That is the name of the variable in which the range is stored.

32
00:02:12,140 --> 00:02:18,180
Not you can write and include a question mark and then you can write in the object, which is basically

33
00:02:18,180 --> 00:02:19,830
going to be the value you want to check in.

34
00:02:19,840 --> 00:02:25,140
So let's say if I want to check if it exists in between this range or not, run this and it is going

35
00:02:25,140 --> 00:02:25,620
to return.

36
00:02:25,620 --> 00:02:28,020
True, because it exists between this range.

37
00:02:28,290 --> 00:02:34,230
And then if you want to check in for a number that does not include in this range, then you can just

38
00:02:34,230 --> 00:02:38,340
use the same context and just write in a number that is not in this range.

39
00:02:38,760 --> 00:02:43,800
So let's say 12 is at that number underscored and it is going to return false as you can see.

40
00:02:43,810 --> 00:02:49,590
Ohayon and previous to drill, I had told you about some of the.

41
00:02:50,630 --> 00:02:53,600
Menville, or you can see the custom.

42
00:02:55,350 --> 00:02:58,920
Ranges you can create, so for example, we have, let's say.

43
00:03:00,890 --> 00:03:05,540
A, B, and we have this range.

44
00:03:06,860 --> 00:03:07,290
Deal.

45
00:03:08,510 --> 00:03:15,080
And now if you want to check if, let's say, a C is a part of it or not, then you can just run the

46
00:03:15,080 --> 00:03:15,470
score.

47
00:03:15,470 --> 00:03:18,700
And as you can see, that a C is a part of this range.

48
00:03:18,710 --> 00:03:20,000
So it has returned true.

49
00:03:20,240 --> 00:03:21,880
And 12 is not a part of it.

50
00:03:21,890 --> 00:03:26,630
So that's why it has returned false as an output error on that.

51
00:03:26,640 --> 00:03:33,740
I'd rather know, for example, if you want to have range, let's say from two to seven, then it is

52
00:03:33,740 --> 00:03:36,640
not a necessity that you have to start a range with zero.

53
00:03:36,830 --> 00:03:40,590
You can have this range start from any number and end at any number.

54
00:03:40,940 --> 00:03:45,530
So now you can check for, let's say, five, run this and it is going to return.

55
00:03:45,530 --> 00:03:45,740
True.

56
00:03:45,740 --> 00:03:47,430
And 12 is going to return false.

57
00:03:47,780 --> 00:03:54,860
So that's how basically that include function can be used to check for the normal number ranges.

58
00:03:54,860 --> 00:03:58,010
And for that example I just gave you.

59
00:03:58,550 --> 00:04:02,570
Then comes the second part of the Dorio that deals with the size function.

60
00:04:02,570 --> 00:04:05,480
So as it told you, it is also going to be a simple one.

61
00:04:06,260 --> 00:04:09,710
All you have to do is just remove this from here right in both.

62
00:04:11,370 --> 00:04:18,620
Range, dog size, and it will have no arguments, just run this code and as you can see, that it has

63
00:04:18,620 --> 00:04:23,360
generated six because from two to seven, we have got six elements.

64
00:04:23,370 --> 00:04:27,430
That includes this two and this seven over here as well.

65
00:04:27,980 --> 00:04:33,850
So that's how you can have any range and you can simply check the number of elements in that range.

66
00:04:34,190 --> 00:04:36,070
So I guess that's what this tutorial.

67
00:04:36,080 --> 00:04:37,670
Thank you so much, guys, for watching.

68
00:04:37,670 --> 00:04:39,740
And I'll see you guys in the next tutorial.
