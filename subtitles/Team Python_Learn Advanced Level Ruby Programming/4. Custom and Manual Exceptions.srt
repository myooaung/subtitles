1
00:00:00,420 --> 00:00:01,290
Hey, guys, what's up?

2
00:00:01,320 --> 00:00:04,740
This is American, and I welcome you to another general on this course, on Dhruva.

3
00:00:05,130 --> 00:00:12,150
And in this story, we are going to see how to raise exceptions manually and how to raise custom exception.

4
00:00:12,510 --> 00:00:18,840
So far in this section, we have discussed how to handle exceptions that are raised by Ruby in the previous

5
00:00:18,840 --> 00:00:19,620
good example.

6
00:00:19,620 --> 00:00:25,680
We have had no control over when to raise an exception or which error type to use.

7
00:00:25,950 --> 00:00:29,580
It has all been decided for us by our editor.

8
00:00:29,850 --> 00:00:34,320
Handling an exception is a reaction to an exception that has already been raised.

9
00:00:35,070 --> 00:00:42,360
So now let's just switch Argyris and explore how you can exert more control when working with exceptions

10
00:00:42,360 --> 00:00:43,240
in a program.

11
00:00:43,590 --> 00:00:49,080
Now, Ruby actually gives you the power to manually raise exception yourself by calling the Colonel

12
00:00:49,270 --> 00:00:50,270
Rescue.

13
00:00:50,310 --> 00:00:56,670
Are this allow you to choose what type of exceptions to raise and even set your own error message if

14
00:00:56,670 --> 00:01:02,940
you do not specify what type of exception to raise and Ruby will default to the runtime error, that

15
00:01:02,940 --> 00:01:04,680
is a subclass of the standard error.

16
00:01:05,670 --> 00:01:12,120
Now, there are a few different index options you may use when working with RES, so to raise an exception,

17
00:01:12,120 --> 00:01:14,670
what you can do is that you can just write and raise.

18
00:01:16,490 --> 00:01:19,070
And you can just ride and type error.

19
00:01:20,630 --> 00:01:26,420
Dot knew, and if you don't specify the error message, then it is going to get generated for the runtime

20
00:01:26,420 --> 00:01:29,900
error and if you just specify a letter, you can just write in something.

21
00:01:31,060 --> 00:01:36,500
Is Rongo held so you can just create your own custom messages as well?

22
00:01:36,640 --> 00:01:43,990
So in this right over here, the exception type will be default to our runtime because none other is

23
00:01:43,990 --> 00:01:45,060
being specified.

24
00:01:45,370 --> 00:01:50,530
So let's just create a program in which what we are going to do is that we are going to raise our own

25
00:01:50,530 --> 00:01:53,650
exceptions so we will create a function.

26
00:01:54,920 --> 00:01:58,200
That would be used to validate the age of a person.

27
00:01:58,220 --> 00:02:02,930
So we are going to name it as well, that age and that age is going to get received in the arguments

28
00:02:02,930 --> 00:02:04,640
of this function and in this function.

29
00:02:04,640 --> 00:02:07,190
What we are going to do is that we are going to raise an exception.

30
00:02:07,190 --> 00:02:09,290
And that exception is going to be.

31
00:02:10,320 --> 00:02:17,370
Invalid age, so it is going to erase the message of invalid age and we are going to set the condition

32
00:02:17,370 --> 00:02:19,740
for the race as well, that unless.

33
00:02:22,540 --> 00:02:28,480
Someone is from, let's say, zero two or let's just say 20 to.

34
00:02:29,640 --> 00:02:30,080
60.

35
00:02:30,150 --> 00:02:37,590
So let's say this is the job criteria for a company who hire someone and the hiring condition for that

36
00:02:37,590 --> 00:02:40,910
company is that the age of the person should be between 20 and 60.

37
00:02:40,920 --> 00:02:44,550
So that's why we are going to write in unless 20, till 60.

38
00:02:44,550 --> 00:02:49,630
And this is a range, you know, and we are going to write and include a question mark.

39
00:02:49,830 --> 00:02:51,000
We are going to write in age.

40
00:02:51,180 --> 00:02:56,460
So whatever age we are going to pass into this function, it is going to check if that is included in

41
00:02:56,460 --> 00:02:57,420
this range over here.

42
00:02:57,630 --> 00:03:03,810
If it is not, it is going to raise an exception that is going to be named as invalid exception.

43
00:03:04,180 --> 00:03:06,090
We're going to just end of a function right over here.

44
00:03:06,300 --> 00:03:12,210
Now, what we are going to do is that we are going to create our biggest block and we are going to write

45
00:03:12,210 --> 00:03:12,810
and begin.

46
00:03:13,020 --> 00:03:18,210
And in the beginning, what we are going to do is that, you know, that we write the code a hill for

47
00:03:18,210 --> 00:03:24,060
which we are expecting some kind of error to just get outputted.

48
00:03:24,060 --> 00:03:28,600
So we are going to just call the function in which we are expecting any kind of error.

49
00:03:29,370 --> 00:03:30,990
So we are going to call validate age.

50
00:03:31,260 --> 00:03:33,570
And right away here we are going to pass in the ID.

51
00:03:33,570 --> 00:03:35,520
So let's say I just pass in 61.

52
00:03:35,670 --> 00:03:37,820
As you can see that it is not a part of the range.

53
00:03:37,830 --> 00:03:44,040
So it is going to raise an exception and whatever exception is going to get raised over here is basically

54
00:03:44,040 --> 00:03:47,580
going to get caught right in this rescue block.

55
00:03:47,600 --> 00:03:48,760
We are going to specify.

56
00:03:49,050 --> 00:03:53,490
So we are going to just write in as runtime.

57
00:03:54,750 --> 00:04:00,850
Error, and we will just specify object for that as well.

58
00:04:03,660 --> 00:04:06,180
And when you now write in votes.

59
00:04:07,630 --> 00:04:08,340
IDOT.

60
00:04:10,270 --> 00:04:16,510
Message, then what message is going to get printed is basically this message which we have raised when

61
00:04:16,510 --> 00:04:18,190
this condition is not met.

62
00:04:18,520 --> 00:04:24,160
So just and the statement of him now, if you just run the school, you can see that it has generated

63
00:04:24,160 --> 00:04:25,900
the message that says invalid message.

64
00:04:25,930 --> 00:04:31,270
Now, if you just specify some valid age, let's say 40, which is a part of that range, so you can

65
00:04:31,270 --> 00:04:34,060
see nothing happened because this could run perfectly.

66
00:04:34,060 --> 00:04:39,490
No kind of exception was raised with this code, which is a function which has been called right over

67
00:04:39,490 --> 00:04:39,760
here.

68
00:04:39,790 --> 00:04:46,940
This condition was check this exception was not raised because this condition was true or help.

69
00:04:46,960 --> 00:04:52,120
So if this condition is false, you have seen that when I specified the age to be one, it has generated

70
00:04:52,120 --> 00:04:52,690
the message.

71
00:04:52,690 --> 00:04:56,920
It has stored it in that object and it is printed me the message as well.

72
00:04:56,950 --> 00:05:01,750
So here we have placed the valeted age method in the big and rescue blog.

73
00:05:02,000 --> 00:05:07,060
If an invalid age is passed into the method, a runtime error with error message invalidated will be

74
00:05:07,060 --> 00:05:11,440
raised and the rescue clause of our big and rescue blog will be executed.

75
00:05:11,450 --> 00:05:15,640
So that's how in Ruby you can raise exceptions manually.

76
00:05:16,030 --> 00:05:21,720
So now moving towards the second part of this tutorial that deals with resetting custom exceptions.

77
00:05:21,730 --> 00:05:28,060
Now, in addition to providing an exception classes, Ruby, allow us the flexibility to create our

78
00:05:28,090 --> 00:05:30,370
own custom exception classes as well.

79
00:05:31,210 --> 00:05:37,960
So, for example, you can just create validate each error class and you can just include it in the

80
00:05:38,110 --> 00:05:41,270
standard error by just using the concept of inheritance.

81
00:05:41,590 --> 00:05:46,720
So for that, what you can do is that you can just write in something like.

82
00:05:48,350 --> 00:05:49,000
Gelhaus.

83
00:05:50,070 --> 00:05:51,090
Well, he did.

84
00:05:53,150 --> 00:05:53,780
EJ.

85
00:05:54,810 --> 00:05:59,940
Error, so here we are creating a class and we are going to just write in the less than sign and we

86
00:05:59,940 --> 00:06:01,050
are going to write and.

87
00:06:03,460 --> 00:06:05,340
Standard error, oakhill.

88
00:06:05,470 --> 00:06:12,790
So this means that basically we are creating inheritance Tanigawa here, so this means that this is

89
00:06:12,790 --> 00:06:17,980
now a child class or you can say the descendant of the standard atter class.

90
00:06:19,030 --> 00:06:22,330
So you can notice O'Haire that are custom, exception, class valeted.

91
00:06:22,330 --> 00:06:25,760
Each error is a subclass of an existing exception.

92
00:06:25,930 --> 00:06:31,780
This means that the valeted H error has access to all the build an exception object behaviour's ruby

93
00:06:31,780 --> 00:06:36,910
prewired, which include the exception message which you have covered and the exception backtrace which

94
00:06:36,910 --> 00:06:37,880
you also have covered.

95
00:06:38,110 --> 00:06:44,050
So as discussed earlier in this section, you should always avoid masking exception from the exception

96
00:06:44,050 --> 00:06:44,790
clause itself.

97
00:06:44,980 --> 00:06:46,810
And there are system level exception.

98
00:06:46,810 --> 00:06:52,920
Clauses concerning this exception is dangerous and will suppress very serious problems in your program.

99
00:06:53,020 --> 00:06:54,310
So don't do it.

100
00:06:54,520 --> 00:06:58,300
Most often you will want to inherit from the standard error class.

101
00:06:58,570 --> 00:07:03,940
Now, when using a custom exception class, you can be specific about the error of your program encountered

102
00:07:03,940 --> 00:07:06,940
by giving the class a very descriptive name.

103
00:07:07,270 --> 00:07:09,410
Doing so mean it in debugging.

104
00:07:09,790 --> 00:07:17,020
So let's alter our this example which we have already cover and use more descriptive custom exception

105
00:07:17,020 --> 00:07:17,520
class.

106
00:07:18,010 --> 00:07:22,990
So we are going to place this over here at the very top over here because our code is not going to see

107
00:07:22,990 --> 00:07:28,210
this class over here and it is not going to treat this as the subclass of standard error or this very

108
00:07:28,210 --> 00:07:29,670
good because this was at the top.

109
00:07:29,680 --> 00:07:30,370
This is at the bottom.

110
00:07:30,380 --> 00:07:35,110
So this has to be at the top so that the entire code can see it, because, as you know, that's sequential

111
00:07:35,110 --> 00:07:38,830
order of execution is followed in Ruby programs.

112
00:07:39,160 --> 00:07:44,680
So right to here, what changes we have to make is that in place of this, what we are going to write

113
00:07:44,680 --> 00:07:46,920
in, we are going to write in the name of the class.

114
00:07:46,940 --> 00:07:50,080
We are going to write and validate H atter place a comma.

115
00:07:50,080 --> 00:07:53,700
And after that we are going to specify the message that is invalidated.

116
00:07:53,730 --> 00:07:56,240
Just move it a bit right over here.

117
00:07:56,620 --> 00:08:01,540
So we are going to write invalidate each error that is the name of the class, or you can say the name

118
00:08:01,540 --> 00:08:06,730
of the error that is going to get generated and we are going to specify the message which we want to

119
00:08:06,730 --> 00:08:09,700
get generated whenever this error is going to get generated.

120
00:08:09,880 --> 00:08:11,350
And we have to specify the condition.

121
00:08:11,350 --> 00:08:16,540
And now O'Haire, the messages, the changes we are going to do is that we are going to now be very

122
00:08:16,540 --> 00:08:20,800
specific because runtime error is something that is very, very, very general.

123
00:08:20,800 --> 00:08:26,530
But now we are going to get very specific and we are going to for example, if you just talk about standard

124
00:08:26,530 --> 00:08:30,340
error and you are talking about division by zero, then that is something that is general.

125
00:08:30,340 --> 00:08:36,070
But if you talk about a rescue blog that is going to just only gatch the zero división error, then

126
00:08:36,070 --> 00:08:37,660
that is something that is specific.

127
00:08:37,840 --> 00:08:44,620
And the reason behind just adding this concept of raising custom exceptions is to become is to just

128
00:08:44,620 --> 00:08:48,100
move on from general concept towards the specific thing.

129
00:08:48,340 --> 00:08:51,490
So we are going to write and validate, etc. we held.

130
00:08:52,800 --> 00:08:58,200
And just run the school to see if any kind of error is there is none, let's just change this age to

131
00:08:58,200 --> 00:09:00,110
something that is not a part of the range.

132
00:09:00,120 --> 00:09:01,650
Let's just say it's sixty one.

133
00:09:01,650 --> 00:09:05,250
Run this code and you can see that it has invalidated age.

134
00:09:05,400 --> 00:09:11,880
So as demonstrated in this example, you can raise and handle custom exceptions, just like any build

135
00:09:11,880 --> 00:09:14,010
an exception that truly provides.

136
00:09:14,190 --> 00:09:21,360
So basically now this validate age error is a descendant of the standard error clause and it is also

137
00:09:21,360 --> 00:09:27,090
a part of the exception clause since the standard error is a subclass of the exception clause.

138
00:09:27,390 --> 00:09:31,680
So now you can become a more specific rather than being so general.

139
00:09:32,100 --> 00:09:34,250
So I guess that's it.

140
00:09:34,260 --> 00:09:40,050
We have covered how to raise exceptions manually and outraise how to make custom exceptions as well.

141
00:09:40,060 --> 00:09:42,720
So I guess that's it with this section.

142
00:09:42,720 --> 00:09:43,130
That's it.

143
00:09:43,140 --> 00:09:43,980
With exceptions.

144
00:09:44,160 --> 00:09:47,430
And I will see you guys in the next section with a more interesting topic.

145
00:09:47,670 --> 00:09:50,430
So thank you so much, guys, for watching.

146
00:09:50,430 --> 00:09:52,140
And I'll see you guys in the next section.
