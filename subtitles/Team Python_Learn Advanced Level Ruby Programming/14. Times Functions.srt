1
00:00:00,450 --> 00:00:01,470
Hey, guys, what's up?

2
00:00:01,500 --> 00:00:05,780
This is a marathon, and I welcome you to an editorial on this course on Ruby.

3
00:00:05,940 --> 00:00:11,030
And in this story, we will be discussing about the Ruby Dimes function.

4
00:00:11,400 --> 00:00:18,840
Now, the times function in ruby red, duns, all the numbers from zero to the number we have specified.

5
00:00:19,020 --> 00:00:26,310
It generates the given blockbusting in the increasing values from zero up to the given limit we have

6
00:00:26,310 --> 00:00:31,990
specified if Knoblock is given and enumerator is returned instead.

7
00:00:32,490 --> 00:00:39,360
Now the syntax is simple that you have to specify the number dot and then we have to specify times.

8
00:00:39,690 --> 00:00:48,240
Now it will receive some argument and that will be the function will takes the integer, which the numbers

9
00:00:48,240 --> 00:00:52,560
are written, and it will also take a block.

10
00:00:53,130 --> 00:01:00,540
Now the return value is going to be the function that will return all the values from zero to the number

11
00:01:00,540 --> 00:01:03,180
itself, which we have specified.

12
00:01:03,570 --> 00:01:11,640
So wasting no more time on talking, let's go on to ATM to see some examples for how it is going to

13
00:01:11,640 --> 00:01:12,150
be done.

14
00:01:12,450 --> 00:01:15,320
So, as I told you, you have to specify a number.

15
00:01:15,330 --> 00:01:20,610
So let's say we have a number that is equal to, let's say five.

16
00:01:20,910 --> 00:01:25,470
And what we want is that we want to generate a sequence of number from zero to this number.

17
00:01:25,470 --> 00:01:30,330
So what we will do is that we will write in num dot dimes.

18
00:01:30,480 --> 00:01:33,390
Now it will receive and some arguments.

19
00:01:33,390 --> 00:01:35,970
The first argument is going to be.

20
00:01:37,630 --> 00:01:47,460
The value in which the each value is going to be get it each time, so I is going to contain the values

21
00:01:47,650 --> 00:01:48,320
each time.

22
00:01:48,340 --> 00:01:52,830
And these are going to be the curly brackets, not the wrong brackets.

23
00:01:52,830 --> 00:01:56,970
So just remove this from here, specify in between this.

24
00:01:57,460 --> 00:01:57,960
All right.

25
00:01:58,060 --> 00:02:04,350
So the second argument is going to be about printing the value each time.

26
00:02:04,690 --> 00:02:08,320
So I for the first time is going to be zero and it is going to be printed.

27
00:02:08,770 --> 00:02:14,450
And the third argument is going to be a space after each iteration.

28
00:02:14,800 --> 00:02:18,930
So after zeros printed, a bit of space is going to be included.

29
00:02:19,090 --> 00:02:25,150
Then one is going to be printed space, two space, three space for space and finally five is going

30
00:02:25,150 --> 00:02:25,850
to be printed.

31
00:02:26,470 --> 00:02:29,300
So I guess that's good enough.

32
00:02:29,740 --> 00:02:34,960
What do you have to do more is just add a footsore here so that it gets printed right out here.

33
00:02:35,560 --> 00:02:42,130
Press order and you can see that zero one, two, three, four or five has been printed right on your

34
00:02:42,130 --> 00:02:42,640
screens.

35
00:02:42,820 --> 00:02:49,180
So we just specify, let's say, 10 O'Haire press Aldar and the values from zero to 10 are going to

36
00:02:49,180 --> 00:02:50,860
be printed, right.

37
00:02:50,860 --> 00:02:51,340
Or well.

38
00:02:53,000 --> 00:02:58,760
Now, for example, if you have nothing, O'Hare, press Aldar, then it is going to generate error

39
00:02:58,760 --> 00:03:05,180
message for you because it don't have any kind of variable in which it can store the value one at a

40
00:03:05,180 --> 00:03:05,550
time.

41
00:03:05,750 --> 00:03:13,430
So when this code is run, this is basically a block away hill and this block has three things to do.

42
00:03:13,700 --> 00:03:21,470
The first thing is that it stores in the first value zero and it print zero on the screen and then it

43
00:03:21,470 --> 00:03:28,910
adds a space in the second edition, it get a one, then it print the one on the screens and add a space

44
00:03:28,910 --> 00:03:31,330
and so on it goes still then.

45
00:03:31,610 --> 00:03:38,000
And when Dennis printed this block exists and it moves out and since it finds no line of code outside.

46
00:03:38,010 --> 00:03:41,600
So that's why it generates simply the output that is zero.

47
00:03:41,600 --> 00:03:44,990
One, two, three, four, five, six, seven, eight, nine and 10.

48
00:03:45,920 --> 00:03:50,930
Now, what if we have a negative value, let's say well, here, let's say we have a negative five over

49
00:03:50,930 --> 00:03:51,200
here.

50
00:03:52,040 --> 00:03:56,050
This code is going to remain the very same, just Aldar.

51
00:03:56,060 --> 00:04:00,560
And you can see that you don't have any kind of sequence, as I told you, that it is going to start

52
00:04:00,560 --> 00:04:03,440
on from zero and move to the number we have specified.

53
00:04:03,440 --> 00:04:11,120
But in this case, we have specified a negative value so it don't move back since zero is the lowest

54
00:04:11,120 --> 00:04:12,580
value it can print out.

55
00:04:12,740 --> 00:04:16,760
So that's why when minus five, it's a minus five over here.

56
00:04:16,770 --> 00:04:20,320
So it ran only one time, it took minus five.

57
00:04:20,330 --> 00:04:27,040
And as an input it printed it out and it just exited out of this block.

58
00:04:27,230 --> 00:04:31,780
So that's why no other kind of number is going to be printed if this is going to be a negative value,

59
00:04:31,790 --> 00:04:37,700
whatever value you specify, for example, minus 10 is the value press orda and minus 10 is simply going

60
00:04:37,700 --> 00:04:38,370
to be printed.

61
00:04:38,390 --> 00:04:40,690
Nothing else is going to be printed right over here.

62
00:04:40,940 --> 00:04:47,000
Let's say we have minus one press Aldar and minus one is only going to be the end, but not even in

63
00:04:47,000 --> 00:04:48,230
the case of minus one.

64
00:04:48,230 --> 00:04:55,370
Zero is going to be printed because it in simple words, if a number is negative, no other number is

65
00:04:55,370 --> 00:04:56,250
going to be printed.

66
00:04:56,270 --> 00:04:57,290
Other than that number.

67
00:04:57,290 --> 00:05:03,500
But if a number is positive, then a sequence of numbers starting from zero to that number is going

68
00:05:03,500 --> 00:05:05,440
to be printed on your screen.

69
00:05:05,450 --> 00:05:10,300
And that's how the Times function is used in Ruby.

70
00:05:11,540 --> 00:05:14,540
So I guess you know how to use the Times function now.

71
00:05:14,540 --> 00:05:16,160
So I guess that's a bit dictatorial.

72
00:05:16,350 --> 00:05:18,110
Thank you so much, guys, for watching.

73
00:05:18,110 --> 00:05:20,390
And I'll see you guys in the next tutorial.
