1
00:00:00,500 --> 00:00:01,580
Hey, guys, what's up?

2
00:00:01,610 --> 00:00:07,190
This is American, and I welcome you to attend a tutorial on this course on Druzhba and in this tutorial

3
00:00:07,190 --> 00:00:15,110
we will be discussing about Ruby now, Ruby block, words that are also called closures in other languages

4
00:00:15,110 --> 00:00:21,620
are definitely one of the coolest features of Ruby and are the chunks of code between traces are between

5
00:00:21,620 --> 00:00:28,670
the two and that you can associate with method in locations almost as if they were parameters.

6
00:00:29,120 --> 00:00:35,630
A ruby block is a way of grouping statements, and it may appear only in the source adjacent to a method

7
00:00:35,630 --> 00:00:42,950
called The Block is written, starting on the same line as the method calls last parameter or the closing

8
00:00:42,950 --> 00:00:44,810
parenthesis of the parameter list.

9
00:00:45,440 --> 00:00:50,270
The code in the block is not executed at the time it is encountered.

10
00:00:50,270 --> 00:00:54,950
Instead, Ruby remembers the context in which the block appears.

11
00:00:55,190 --> 00:01:01,160
Either at the local variable is the current object and so on, and then it enters the method.

12
00:01:02,570 --> 00:01:10,580
The Ruby standard is basically to use braces for a single line locks and do and for multiline blocks,

13
00:01:11,330 --> 00:01:16,430
keep in mind that the braces Syntex has a higher precedence than the do.

14
00:01:16,430 --> 00:01:19,460
And Syntex braces have a high.

15
00:01:19,460 --> 00:01:21,980
Presidents do has a low precedence.

16
00:01:22,430 --> 00:01:29,300
If the method and location has parameters that are not enclosed in parenthesis, the precise form of

17
00:01:29,300 --> 00:01:33,470
a block will bind to the last parameter, not the overall invocation.

18
00:01:33,710 --> 00:01:36,710
The do form will bind to the invocation.

19
00:01:38,430 --> 00:01:44,820
Now we have a saying that any method can be called with a block as an implicit argument, instead,

20
00:01:44,820 --> 00:01:50,030
the method you can call the block using the word with a value.

21
00:01:50,340 --> 00:01:55,220
Also, as you will soon learn that Blocks can have their own arguments.

22
00:01:55,230 --> 00:02:00,420
There are many methods in Ruby that I over a range of values.

23
00:02:00,420 --> 00:02:06,900
Most of these iterators are written in such a way as to be able to take a code block as part of their

24
00:02:06,900 --> 00:02:08,070
calling syntax.

25
00:02:08,340 --> 00:02:16,650
Now the method can then yield control to the block during execution as many times as it is necessary

26
00:02:16,650 --> 00:02:19,330
for the iteration to complete.

27
00:02:19,530 --> 00:02:24,510
Once you have created a block, you can associate it with a call to a method.

28
00:02:24,780 --> 00:02:32,760
Usually the code blocks passed in two methods are anonymous objects that are created on the spot.

29
00:02:33,240 --> 00:02:39,060
Now a method can be invoked using an associate block one or more time.

30
00:02:39,240 --> 00:02:42,660
Using the Ruby yield statement has any method.

31
00:02:42,660 --> 00:02:45,510
You want to take our block as a parameter.

32
00:02:45,510 --> 00:02:53,220
You use the yield keyword to execute the block at any time and how to do all that stuff in which you

33
00:02:53,220 --> 00:02:59,130
will be calling a block inside a function using the key yield keyword.

34
00:02:59,130 --> 00:03:04,980
That will be a part of the tutorials where we will be discussing about functions.

35
00:03:06,660 --> 00:03:12,300
So to talk more about druggy blogs is that if you provide a code blog when you call a method, then

36
00:03:12,300 --> 00:03:19,170
inside the method you can yield control to that code block, suspend execution of the method, execute

37
00:03:19,170 --> 00:03:25,320
the code in the block first, and return control to the method body right after the call to jail is

38
00:03:25,320 --> 00:03:25,650
made.

39
00:03:25,830 --> 00:03:32,820
If no code block is present and jail is called, then Ruby is going to generate an exception message

40
00:03:32,820 --> 00:03:33,350
for you.

41
00:03:33,630 --> 00:03:36,780
You can provide parameters to the call Tagil.

42
00:03:37,090 --> 00:03:39,390
These will be passed to the block.

43
00:03:39,390 --> 00:03:44,760
Within the block you list the name of the arguments to receive the parameters between vertical bars.

44
00:03:46,200 --> 00:03:51,030
Now, one thing you need to know right here is that the code in the block is not executed at the time

45
00:03:51,030 --> 00:03:54,000
it is encountered by the Ruby interpretor.

46
00:03:54,240 --> 00:04:00,150
Instead, Ruby remembers the context in which the block appears, and it then enters the method.

47
00:04:00,450 --> 00:04:06,420
A code blocks return value is the value of the last expression evaluated in the code block.

48
00:04:06,690 --> 00:04:14,670
This return value is made available inside the method, and it comes through as the return value of

49
00:04:14,910 --> 00:04:15,540
jailed.

50
00:04:17,090 --> 00:04:25,850
Now, if you talk about a block variables, you can have variables that will be associated with the

51
00:04:25,850 --> 00:04:27,740
blocks as well.

52
00:04:28,130 --> 00:04:35,270
So let me give you a quick example for how blocks look using the do.

53
00:04:35,270 --> 00:04:44,030
And because for the Brace's, you have to wait for till we reach the part where we will be discussing

54
00:04:44,030 --> 00:04:44,900
about functions.

55
00:04:45,360 --> 00:04:51,140
So let's go on to Atom and let's say we have a variable that is X equal to 10.

56
00:04:52,720 --> 00:05:00,670
And in here, what we have is let's say we want to execute, let's say a certain statements, let's

57
00:05:00,670 --> 00:05:01,330
say five times.

58
00:05:01,360 --> 00:05:04,990
So what we would do is that we will write five times.

59
00:05:05,940 --> 00:05:06,510
Do.

60
00:05:09,150 --> 00:05:17,180
As a told you that if you want to give any kind of expression and pass values as an argument to a function,

61
00:05:17,180 --> 00:05:19,360
you have to specify those in the vertical brackets.

62
00:05:19,390 --> 00:05:21,710
Let's say I want to specify X Hill.

63
00:05:22,430 --> 00:05:28,040
Then you press enter, you will automatically seen that you have been moved a space ahead right here,

64
00:05:28,040 --> 00:05:31,140
which means that a block has been automatically static for you.

65
00:05:31,580 --> 00:05:35,300
Now, what you want to do over here is the let's say you want to say hello.

66
00:05:37,620 --> 00:05:43,410
Gollan, and let's say you want to use this hashtag brainteasers over here, and you know what?

67
00:05:43,410 --> 00:05:48,420
It's this you have covered this in the previous tutorials and let's say I want to specify actual hill.

68
00:05:50,350 --> 00:05:56,020
I moved out of block or road into a hill, which means the block has now been ended.

69
00:05:57,640 --> 00:06:04,690
Now, this is basically the blogs that starts with the do it and with the anti word, and this blog

70
00:06:04,690 --> 00:06:11,260
is going to be executed five times now outside the blog, what I'm going to do is that I'm going to

71
00:06:11,260 --> 00:06:12,130
write and puts.

72
00:06:13,650 --> 00:06:14,250
Hello.

73
00:06:16,130 --> 00:06:17,830
And I'm going to write an editorial.

74
00:06:18,690 --> 00:06:21,350
Let me just run and then I'll explain what is going on in here.

75
00:06:21,680 --> 00:06:24,070
As you can see on the screen, it says hello.

76
00:06:24,080 --> 00:06:25,040
Then it says zero.

77
00:06:25,100 --> 00:06:27,470
And it's the one then institute and it said three.

78
00:06:27,470 --> 00:06:30,110
Then it said before it has been run five times.

79
00:06:30,110 --> 00:06:31,310
Then it says hello.

80
00:06:31,460 --> 00:06:40,180
Then at the very end now in the above block, a new feature is being used that is known as the block

81
00:06:40,250 --> 00:06:41,670
local variable.

82
00:06:41,690 --> 00:06:44,150
In short, the block local variables.

83
00:06:44,150 --> 00:06:48,500
She's a block from manipulating variables outside of its scope.

84
00:06:48,860 --> 00:06:54,790
This prevents a block from unintentionally clobbering any variable outside its scope.

85
00:06:54,860 --> 00:07:02,000
If you don't want to global variable, use the block local variables for the variables your block creates.

86
00:07:02,930 --> 00:07:09,440
The syntax for a block local variable is quite simple, but a semicolon after the normal block parameter

87
00:07:09,440 --> 00:07:13,600
list then list the variables you want as block local variables.

88
00:07:13,820 --> 00:07:20,330
For example, the block takes to variable in and use uses to locate variables X and B, the parameter

89
00:07:20,330 --> 00:07:26,960
list would look like something A comma, B colon x y, which means that is going to equal to X and B

90
00:07:26,960 --> 00:07:27,740
equal to Y.

91
00:07:28,070 --> 00:07:31,220
So for this, for example, I want to specify something today.

92
00:07:31,240 --> 00:07:36,280
So I'm going to write an E and I'm going to specify colon X, which means that is going to equal to

93
00:07:36,290 --> 00:07:38,330
X and now you can use a oakhill.

94
00:07:38,810 --> 00:07:40,500
So that's how it is going to be done.

95
00:07:40,670 --> 00:07:46,360
So that is going to stop it from clobbering any variable that is outside the scope of this block.

96
00:07:46,370 --> 00:07:51,170
And in this case, since X is outside the scope of this blocks, there is going to stop it from clobbering

97
00:07:51,170 --> 00:07:52,120
that variable.

98
00:07:52,490 --> 00:07:55,250
But as you can see over here, since I have used X or here.

99
00:07:56,760 --> 00:08:02,790
And so we're here as well, and you can see that it starts on with a zero, which is which means that

100
00:08:02,790 --> 00:08:07,590
the loop is executing for the zero time, which means the first because.

101
00:08:08,740 --> 00:08:14,830
It starts off with zero and the zero indicates the first iteration, this one indicates the second iteration

102
00:08:14,830 --> 00:08:19,720
to indicates the third iteration, three indicates the fourth hydrogen and four indicates the fifth

103
00:08:19,720 --> 00:08:20,200
operation.

104
00:08:20,200 --> 00:08:26,860
When you go outside the block of the code Windex, it is going to make it equal to 10.

105
00:08:27,580 --> 00:08:31,920
So that is how basically you can use blocks.

106
00:08:31,930 --> 00:08:34,490
And that was just a basic introduction.

107
00:08:34,510 --> 00:08:37,330
All you need to understand, O'Haire, is this thing.

108
00:08:37,330 --> 00:08:40,360
It starts on with the two, ends with the end keyword.

109
00:08:40,630 --> 00:08:43,810
And you can write multiple lines of code in between this.

110
00:08:43,810 --> 00:08:47,290
You can just write in any number of lines of code.

111
00:08:47,480 --> 00:08:47,910
Right.

112
00:08:47,920 --> 00:08:50,330
Or here you can specify anything right here.

113
00:08:50,980 --> 00:08:53,920
So that's how blocks are used in Ruby.

114
00:08:54,070 --> 00:08:56,150
If you did not understood the code.

115
00:08:56,380 --> 00:09:02,580
It's completely fine because all you need to know is that what our blocks how are they called, how

116
00:09:02,620 --> 00:09:08,440
parameters are passed through the blocks and how iterations can be made at the block.

117
00:09:08,950 --> 00:09:14,830
Now, there is a concept where you will be using the Gillard keyword to call a block from inside a function,

118
00:09:14,830 --> 00:09:21,360
but that will be discussed when we will be covering functions in the next sections.

119
00:09:21,790 --> 00:09:24,360
So I guess you have to wait till then.

120
00:09:24,670 --> 00:09:26,480
So I guess that's it with this tutorial.

121
00:09:26,500 --> 00:09:28,090
Thank you so much, guys, for watching.

122
00:09:28,270 --> 00:09:30,400
And I'll see you guys in the next Auriel.
