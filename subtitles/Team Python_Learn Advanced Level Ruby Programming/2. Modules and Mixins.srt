1
00:00:00,300 --> 00:00:01,230
Hey, guys, what's up?

2
00:00:01,260 --> 00:00:04,970
This is a marathon, and I welcome you to another detour on this course on Ruby uninvested.

3
00:00:05,320 --> 00:00:09,660
We are going to cover the introduction to models and make sense what you already have covered in previous

4
00:00:09,660 --> 00:00:10,290
tutorials.

5
00:00:11,280 --> 00:00:16,950
So starting on with a module's so as you know that modules are a way of grouping together, matador's

6
00:00:16,950 --> 00:00:21,000
classes and constant, Modie would give you two major benefits.

7
00:00:21,010 --> 00:00:24,360
The first one is that modules provide a namespace and provide name clashes.

8
00:00:24,390 --> 00:00:26,940
Secondly, modules implement the mixin facility.

9
00:00:27,720 --> 00:00:33,330
Now modules define a namespace, a sandbox in which your methods and constants can play without having

10
00:00:33,330 --> 00:00:37,680
to worry about being stepped on by another method and constant.

11
00:00:38,070 --> 00:00:42,000
Then if you talk about the syntax of using modules, then it is very simple.

12
00:00:42,000 --> 00:00:45,840
You already have seen this is right in the name of the module, the name of the module.

13
00:00:46,140 --> 00:00:51,660
Then you have to write in the statements which you want to use in this module that can be either matters,

14
00:00:51,660 --> 00:00:55,020
that can be classes, that can be variables or anything.

15
00:00:55,230 --> 00:00:57,170
Then you have to just end this right or here.

16
00:00:58,530 --> 00:01:04,350
Module constants are a name just like class constants with an initial uppercase letter, or you can

17
00:01:04,350 --> 00:01:07,240
just make the entire letter as uppercase.

18
00:01:07,530 --> 00:01:12,510
The method definition looks similar to module methods defined just like last methods.

19
00:01:12,720 --> 00:01:17,820
As with class method, you call a module method by preceding its name, with the module, name and spirit,

20
00:01:18,120 --> 00:01:22,740
and you reference a constantly using the module name and to Colon's lightless methods.

21
00:01:22,740 --> 00:01:28,200
Whenever you define a method in a module, you specify the module name followed by a dot and then the

22
00:01:28,350 --> 00:01:29,250
method name.

23
00:01:29,550 --> 00:01:32,920
Then comes the concept of mixing in Ruby, which you already have Guillard.

24
00:01:33,120 --> 00:01:40,020
So when a class can inherit features from more than one current class, the class is supposed to show

25
00:01:40,020 --> 00:01:41,210
multiple inheritance.

26
00:01:41,430 --> 00:01:45,480
But as you know that Ruby does not support multiple inheritance directly.

27
00:01:45,630 --> 00:01:48,090
But Ruby modules have another wonderful use.

28
00:01:48,300 --> 00:01:52,380
At a stroke, they pretty much eliminated the need for multiple inheritance.

29
00:01:52,620 --> 00:01:58,470
Providing a facility that is called as makes sense makes and give you a wonderful controlled way of

30
00:01:58,470 --> 00:02:00,140
adding functionality to classes.

31
00:02:00,150 --> 00:02:05,250
However, there are true power comes out when the code in the mix and start to interact with the code

32
00:02:05,430 --> 00:02:07,770
in the classes that uses it.

33
00:02:08,010 --> 00:02:14,850
So let me give you a quick example of how to use, make sense and implement the concept of multiple

34
00:02:14,850 --> 00:02:16,010
inheritance in Ruby.

35
00:02:16,350 --> 00:02:18,940
So that is, I guess, something new for this tutorial.

36
00:02:18,960 --> 00:02:20,220
Just move on to Atum.

37
00:02:21,610 --> 00:02:28,810
So let's say you have two modules, the first module is Module A, and in that module you have, let's

38
00:02:28,810 --> 00:02:29,700
say, two functions.

39
00:02:29,710 --> 00:02:31,630
The first one is a one.

40
00:02:33,140 --> 00:02:34,280
Just and this.

41
00:02:35,310 --> 00:02:37,800
And then you have a two.

42
00:02:38,960 --> 00:02:40,320
Just and this as well.

43
00:02:42,570 --> 00:02:46,800
And the model as well, and then let's say you just copied this from here.

44
00:02:48,380 --> 00:02:51,890
And you passed it again, so let's say you have this now as the.

45
00:02:53,100 --> 00:03:01,410
And the objects for this be are going to be B1 and B2, so the functions are B1 and the second function

46
00:03:01,410 --> 00:03:02,250
is B2.

47
00:03:02,910 --> 00:03:03,410
All right.

48
00:03:03,540 --> 00:03:08,460
Now, after initializing these modules, would you have to do is that you have to initialize the class

49
00:03:08,460 --> 00:03:08,820
as well.

50
00:03:08,820 --> 00:03:16,530
So let's say we have a class as well that is, let's say named as X and in that Class X, what we are

51
00:03:16,530 --> 00:03:19,720
going to do is that we are going to include the two modules.

52
00:03:19,720 --> 00:03:27,990
So the first module is a module and the second module is the module B, so I guess I misspell this.

53
00:03:29,690 --> 00:03:35,240
It has to be include, include, include, include me, so now I have included both the modules and

54
00:03:35,240 --> 00:03:36,390
lets it in this way.

55
00:03:36,390 --> 00:03:42,320
Here I have one more function that is, let's say, as one analyzes and this functional here as well,

56
00:03:42,320 --> 00:03:44,040
this and this class as well.

57
00:03:44,540 --> 00:03:49,010
And down here, what you are going to now do is that you are going to create an object for the Class

58
00:03:49,010 --> 00:03:49,350
X..

59
00:03:49,380 --> 00:03:53,210
So what we are going to write in is that we are going to write in y equal to.

60
00:03:55,310 --> 00:04:01,640
Export news, so this has created an object for the Class X, which has two modules added, the first

61
00:04:01,640 --> 00:04:03,830
one is module eight and the second one is Monu will be.

62
00:04:04,220 --> 00:04:07,340
So now if you just write in y dot a one.

63
00:04:09,290 --> 00:04:11,570
Why adopt a two?

64
00:04:12,690 --> 00:04:14,700
Then why not be one?

65
00:04:15,920 --> 00:04:22,190
Why not the two and finally, the method that is present in the class itself, that is just colored

66
00:04:22,190 --> 00:04:22,950
by that as well.

67
00:04:23,240 --> 00:04:28,880
So if you just run this code, it is going to run perfectly just at Put's at the start of February one.

68
00:04:29,660 --> 00:04:31,670
Not with this, but with this.

69
00:04:34,120 --> 00:04:37,720
With this as well, with why the one?

70
00:04:38,760 --> 00:04:45,630
What I'd be do and find any wide eyed assessment, just trying to score it, and as you can see, that

71
00:04:45,630 --> 00:04:46,900
it has now run perfectly.

72
00:04:47,430 --> 00:04:52,490
So basically what's going on over here is that the module consists of the method one and two.

73
00:04:52,620 --> 00:05:00,000
Module B consists of the method V1 V2 that simple include both the modules and the the class can access

74
00:05:00,000 --> 00:05:03,390
all the four methods, namely A1, A to B and B2.

75
00:05:03,600 --> 00:05:07,290
Therefore you can see that the class sample inherits from both the modules test.

76
00:05:07,290 --> 00:05:14,580
You can say that Class M x o'haire basically shows multiple inheritance oramics and so that is how basically

77
00:05:14,580 --> 00:05:15,480
you can implement.

78
00:05:16,650 --> 00:05:24,360
Multiple inheritance in Ruby using makes sense, so that was just a basic introduction about modules

79
00:05:24,360 --> 00:05:26,340
and makes sense, but you have already covered that.

80
00:05:26,340 --> 00:05:31,350
But the purpose of this tutorial was in the next iteration, which are going to just follow on in this

81
00:05:31,350 --> 00:05:34,880
section, are basically going to be related to modules and mixin.

82
00:05:34,890 --> 00:05:39,940
So I thought that this tutorial should be added to just refresh your concept about modules and sense.

83
00:05:40,290 --> 00:05:45,540
So in the next drill, we are going to start on with some new concept that is going to be nested modules.

84
00:05:45,720 --> 00:05:46,700
So stay tuned for that.

85
00:05:46,710 --> 00:05:50,160
Thank you for now and I'll see you guys in the next aureole.
