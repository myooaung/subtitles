1
00:00:00,330 --> 00:00:01,320
Hey, guys, what's up?

2
00:00:01,350 --> 00:00:06,190
This is American, and I welcome you to another tutorial on this course on Ruby and in this story of

3
00:00:06,270 --> 00:00:11,910
what we will do is that we will give you an overall taste of object oriented programming.

4
00:00:12,150 --> 00:00:17,580
Not all of the topics will be covered in more detail in the editorials to come, for which we will just

5
00:00:17,580 --> 00:00:19,840
discuss the introduction in this tutorial.

6
00:00:20,400 --> 00:00:23,900
So what is basically object oriented programming now?

7
00:00:23,910 --> 00:00:30,750
Object oriented programming, which is often referred to as up in short form, is a programming paradigm

8
00:00:30,750 --> 00:00:34,990
that was created to deal with the growing complexity of a large software system.

9
00:00:35,280 --> 00:00:42,990
Now, programmers found out very early on that as applications grew and complex in complexity and size,

10
00:00:43,230 --> 00:00:45,890
they become very, very, very difficult to maintain.

11
00:00:45,970 --> 00:00:52,410
Now, one small change at any point in the program would trigger a ripple effect of errors due to dependencies

12
00:00:52,410 --> 00:00:54,390
throughout the entire program.

13
00:00:54,720 --> 00:01:01,500
Now, programmers needed a way to create containers for data that could be changed and manipulated without

14
00:01:01,500 --> 00:01:03,740
affecting the entire program.

15
00:01:03,870 --> 00:01:09,750
Now, they needed a way to section off areas of code that performed certain procedures so that their

16
00:01:09,750 --> 00:01:16,590
programs could become the interaction of many small parts as opposed to one massive blob of dependency.

17
00:01:16,980 --> 00:01:17,730
Now enter.

18
00:01:18,240 --> 00:01:21,480
We will first introduce some of the terminologies.

19
00:01:21,750 --> 00:01:27,190
Then we will just dive into some examples that will be the part of this tutorial.

20
00:01:27,540 --> 00:01:33,600
So starting on with the first concept that is basically related often to object oriented programming,

21
00:01:33,600 --> 00:01:34,920
that is encapsulation.

22
00:01:36,210 --> 00:01:42,210
Now, encapsulation is basically hiding pieces of functionality and making it unavailable to the rest

23
00:01:42,210 --> 00:01:43,210
of the code base.

24
00:01:43,560 --> 00:01:50,200
It is a form of data protection so that data cannot be manipulated or changed without obvious intention.

25
00:01:50,610 --> 00:01:56,490
It is what defines the boundaries in your application and allows your code to achieve new levels of

26
00:01:56,490 --> 00:01:57,260
complexity.

27
00:01:57,630 --> 00:02:06,120
Ruby, like many other languages, accomplishes this task by creating objects and exposing interfaces

28
00:02:06,330 --> 00:02:07,950
to interact with those objects.

29
00:02:08,310 --> 00:02:14,010
Another benefit of creating object is that they allow the programmer to take on a new level of abstraction.

30
00:02:14,310 --> 00:02:22,350
Objects are represented as real word nouns and can be given methods that describe the behavior the programmer

31
00:02:22,350 --> 00:02:23,580
is trying to represent.

32
00:02:23,610 --> 00:02:30,510
Now, if you just look at the slide, then you can see that it is a very simple example for how encapsulation

33
00:02:30,510 --> 00:02:31,260
is going to work.

34
00:02:31,450 --> 00:02:37,200
You can see that whatever are the properties of a car, they have been encapsulated in a block and the

35
00:02:37,200 --> 00:02:40,050
outside world cannot basically access it.

36
00:02:40,050 --> 00:02:45,840
And any kind of error that is going to occur in this block of accord is not going to basically alter

37
00:02:45,840 --> 00:02:47,550
any kind of code outside the block.

38
00:02:47,550 --> 00:02:53,130
And moreover, no one is going to change any kind of data in this block unless we have given some permissions.

39
00:02:53,130 --> 00:02:55,710
So so that is also going to increase security.

40
00:02:55,870 --> 00:02:59,750
That is also going to just reduce the bugs as well.

41
00:02:59,760 --> 00:03:03,360
And it is also going to contain the bugs and it is also going to contain the code.

42
00:03:03,660 --> 00:03:10,470
And it is also going to help you to just assemble your code so that, as you can see, CA is going to

43
00:03:10,470 --> 00:03:11,700
be in a separate container.

44
00:03:12,030 --> 00:03:17,200
If you have, let's say, an apple, then the properties of Apple are going to be in a separate container.

45
00:03:17,880 --> 00:03:23,130
If you have, let's say, some housed in the properties of a house are going to be in a separate container.

46
00:03:23,130 --> 00:03:28,440
And let's say you are talking about yourself, then your name, your age or hide your weight.

47
00:03:28,440 --> 00:03:32,430
And a lot more information about you can be just stored in a single container.

48
00:03:32,430 --> 00:03:38,250
So that is also going to help you to organize your code so that when someone tried to read your code,

49
00:03:38,250 --> 00:03:41,610
he can just easily understand what is going on in this code.

50
00:03:41,610 --> 00:03:47,880
Because if you just write in Kawahara, you write in the model at one end of the code, then speed at

51
00:03:47,880 --> 00:03:52,680
this end of this part of the code and let's say engine, add this part of the code and lets the speed

52
00:03:52,680 --> 00:03:53,580
limit right over here.

53
00:03:53,760 --> 00:03:56,550
So that is very, very, very difficult to find out.

54
00:03:56,730 --> 00:04:01,620
But if you have encapsulated the data you are using the concept of encapsulation, then it is going

55
00:04:01,620 --> 00:04:06,270
to get very easy for your user as well as for you to manage your code.

56
00:04:07,430 --> 00:04:14,180
Then the second concept you often will come across an object oriented programming is the concept of

57
00:04:14,480 --> 00:04:15,400
polymorphism.

58
00:04:15,410 --> 00:04:20,510
Now polymorphism is the ability for data to be represented as many different types.

59
00:04:20,840 --> 00:04:25,490
Ã“li stands for many and MAFF stands for forms, not object oriented.

60
00:04:25,490 --> 00:04:30,140
Programming gives us the flexibility in using the president code for a new purposes.

61
00:04:30,590 --> 00:04:37,880
Now, the concept of inheritance is basically used in Ruby, where a class inherits the behavior of

62
00:04:37,880 --> 00:04:39,980
another class referred to as a superclass.

63
00:04:40,520 --> 00:04:46,460
This gives Ruby programmers the power to define basic classes with large visibility and smaller and

64
00:04:46,460 --> 00:04:50,340
smaller subclasses for a more fine grained detail behaviors.

65
00:04:50,810 --> 00:04:55,530
Another way to apply the polymorphic structure to Ruby programs is to use a module.

66
00:04:55,820 --> 00:05:00,390
Now the modules are similar to classes in that they contain shared behavior.

67
00:05:00,410 --> 00:05:06,110
However, you can not create an object without a module a module and must be mixed in with a class using

68
00:05:06,110 --> 00:05:07,630
the include method invocation.

69
00:05:07,880 --> 00:05:09,710
This is also called as a mixin.

70
00:05:09,710 --> 00:05:14,780
And after mixing in a module, the behavior declared in that module are available to the class and its

71
00:05:14,780 --> 00:05:15,200
object.

72
00:05:15,410 --> 00:05:20,630
Now we will see the examples of all the above mentioned terms in the action in the following tutorials

73
00:05:20,630 --> 00:05:20,990
as well.

74
00:05:20,990 --> 00:05:26,010
And we will see the mixin right here in the studio at the very end where we will be studying modules.

75
00:05:26,870 --> 00:05:33,110
Now, if you look at the slide, you know, you can see that polymorphism basically is just classified

76
00:05:33,110 --> 00:05:33,870
into two types.

77
00:05:33,890 --> 00:05:36,230
The first one is the compile time polymorphism.

78
00:05:36,230 --> 00:05:41,750
And then we have the runtime polymorphism and then the compile time polymorphism is again divided into

79
00:05:41,750 --> 00:05:43,580
dupa, that is operator overloading.

80
00:05:43,580 --> 00:05:49,910
And then we have got the function of a loading and then in the runtime you have got the virtual functions.

81
00:05:50,240 --> 00:05:54,380
So all that is going to be a part of the following tutorials.

82
00:05:54,770 --> 00:05:56,750
So you don't need to worry about that for now.

83
00:05:56,750 --> 00:05:59,890
You just need to know the introduction to polymorphism.

84
00:06:00,410 --> 00:06:06,380
Then comes the most important questions, which is going to be asked in object oriented programming

85
00:06:06,380 --> 00:06:09,020
is that what are objects?

86
00:06:10,080 --> 00:06:15,660
Now, throughout the Ruby community, you will often hear the phrase in Ruby, everything is an object.

87
00:06:15,900 --> 00:06:21,750
Now, we have avoided this so far since objects are a more advanced topic and it's necessary to get

88
00:06:21,750 --> 00:06:26,370
a handle on basic ruby syntax before you start thinking about objects.

89
00:06:26,760 --> 00:06:28,940
Now, it's not even strictly true.

90
00:06:28,950 --> 00:06:31,260
Not everything in Ruby is an object.

91
00:06:31,260 --> 00:06:33,120
However, anything can be said.

92
00:06:33,120 --> 00:06:40,330
To have a value is an object that includes numbers, strings, arrays and even glasses and modules.

93
00:06:40,350 --> 00:06:48,240
However, there are a few things that are not objects matters and blocks are two that stands out now.

94
00:06:48,240 --> 00:06:57,090
Objects are created from glasses and think of glasses as moles and objects as the things you produce

95
00:06:57,090 --> 00:07:03,290
out of those moles, not individual objects, will contain different information from other objects.

96
00:07:03,570 --> 00:07:05,950
Yet there are instances of the same class.

97
00:07:05,970 --> 00:07:08,570
Now, is it all you that everything is an object in Ruby?

98
00:07:08,760 --> 00:07:10,710
Now this apple is an object.

99
00:07:10,890 --> 00:07:12,470
Nisga'a is an object.

100
00:07:12,750 --> 00:07:14,340
This mobile is an object.

101
00:07:14,460 --> 00:07:17,340
And finally, this house is also an object.

102
00:07:18,400 --> 00:07:24,970
So as I was telling you that you can think of the glasses as models and objects, as the things you

103
00:07:24,970 --> 00:07:26,330
produce out of these models.

104
00:07:26,560 --> 00:07:32,830
So let's say you have a glass apple and then this object over here is basically going to be what is

105
00:07:32,830 --> 00:07:36,320
going to be produced out of that individual object.

106
00:07:36,490 --> 00:07:42,580
Let's say this apple, this car, this mobile or this house will contain different information from

107
00:07:42,580 --> 00:07:43,440
other objects.

108
00:07:43,450 --> 00:07:45,850
Yet there are the instances of the same glass.

109
00:07:46,270 --> 00:07:51,250
Now, if you just see an example of two objects of the string glass, which you already have covered

110
00:07:51,250 --> 00:07:55,240
in the previous structuralists as well, you know that if you just write in a string and use the object,

111
00:07:55,480 --> 00:08:00,370
that is the dot glass with that, then it is going to return string, which is basically the class for

112
00:08:00,370 --> 00:08:00,570
that.

113
00:08:00,580 --> 00:08:04,360
And similarly, if you just write in worldclass, it is going to also return string.

114
00:08:04,600 --> 00:08:11,020
Now, in this example, we use the glass instance method to determine what the glass is for each object.

115
00:08:11,290 --> 00:08:16,960
As you can see that everything we have been using from strings to integers are in fact objects which

116
00:08:16,960 --> 00:08:19,090
are instantiated from a glass.

117
00:08:19,540 --> 00:08:23,600
Now, we will dig deeper into this very soon in the following tutorial.

118
00:08:23,640 --> 00:08:26,800
So for now, you need only understand what our objects.

119
00:08:27,160 --> 00:08:28,090
Simple as that.

120
00:08:29,820 --> 00:08:37,410
Then comes how you have to define a class, so Ruby defines the attributes and behavior of its objects

121
00:08:37,410 --> 00:08:43,800
and class is you can think of classes as the basic outline of what an object should be made of and what

122
00:08:43,800 --> 00:08:46,390
it should be able to do to define the class.

123
00:08:46,410 --> 00:08:48,930
We use this index similar to defining a method.

124
00:08:49,260 --> 00:08:54,890
We just replace the death with the class and use the naming convention to create the name.

125
00:08:54,900 --> 00:09:00,000
We then use the resulting word and to finish the definition, as you can see right over here.

126
00:09:01,020 --> 00:09:08,130
Just in place of the DCF, you have to write and see the balance and then you have to write in the name

127
00:09:08,130 --> 00:09:08,580
of the class.

128
00:09:08,610 --> 00:09:10,620
Now, this human this can be anything over here.

129
00:09:10,620 --> 00:09:14,730
You can just write in anything, then write in Ohara, you can use the statements.

130
00:09:14,730 --> 00:09:17,010
And finally, to end this, you have to write in this.

131
00:09:17,010 --> 00:09:23,520
And now they see and this is going to be in small cases then if you talk about the calling board, then

132
00:09:23,520 --> 00:09:29,220
you have to write and the variable basically in which that object is going to get store and you have

133
00:09:29,220 --> 00:09:30,990
to write in the name of the class and you have to write in.

134
00:09:31,620 --> 00:09:33,810
Now, this is basically going to be object.

135
00:09:33,820 --> 00:09:35,430
So in this example.

136
00:09:36,710 --> 00:09:42,470
Basically, we are creating an instance of a human class and we are storing it in the variable that

137
00:09:42,470 --> 00:09:44,840
is name as John, which you can see right over here.

138
00:09:45,140 --> 00:09:46,840
So now we have an object.

139
00:09:46,880 --> 00:09:53,420
We will say that John is an object or you can say the instance of a class human for which we have created

140
00:09:53,420 --> 00:09:53,670
it.

141
00:09:53,990 --> 00:10:00,440
Now, this entire workflow of creating a new object or instance from a class is called instantiation.

142
00:10:00,740 --> 00:10:07,190
And we can also say that we have instantiated an object that is named as John from the class human,

143
00:10:07,400 --> 00:10:08,570
not the terminology.

144
00:10:08,570 --> 00:10:12,400
An object oriented programming is something you will eventually get used to.

145
00:10:12,410 --> 00:10:18,800
But the important fact here is that an object is done by calling the class method new.

146
00:10:19,190 --> 00:10:25,040
Now, to visualize what I am talking so far, let's just consider this example over here.

147
00:10:25,040 --> 00:10:30,530
As you can see, that defining and creating a new instance of a basic class is very simple.

148
00:10:30,540 --> 00:10:37,520
But before we go any further are showing you how to create more elaborate classes, you have to learn

149
00:10:37,520 --> 00:10:38,870
the concept of modules.

150
00:10:39,140 --> 00:10:42,650
But before we go on with modules, you just have to understand this diagram.

151
00:10:42,650 --> 00:10:48,650
You can see that you have this human class and from here you can create as many as you want human objects.

152
00:10:48,890 --> 00:10:54,110
So in this case, we have got three human objects in which you have the first object as John and you

153
00:10:54,110 --> 00:10:55,500
have this board and then you have this bit.

154
00:10:55,520 --> 00:10:59,630
Now, this using this object over here, you can just initialize name to the john.

155
00:10:59,630 --> 00:11:03,080
You can initialize edge to John as the very same.

156
00:11:03,080 --> 00:11:07,200
You have that car over there and you can just assign properties to that.

157
00:11:08,030 --> 00:11:12,440
Now, in here, you can see that you have another object that is the human object as well, which is

158
00:11:12,800 --> 00:11:14,180
just belonging to this class.

159
00:11:14,330 --> 00:11:18,470
But you have just changed the name of the object and you also create it with a new object.

160
00:11:18,470 --> 00:11:23,510
You will just write and bob equal to humanoid new and then using this object, Ohara, you can just

161
00:11:23,510 --> 00:11:27,010
initialize the name and you can just initialize the age for this object.

162
00:11:27,010 --> 00:11:32,420
Then you can have another object and you can have hundreds of objects if you want to from this very

163
00:11:32,420 --> 00:11:33,760
single class you have created.

164
00:11:33,770 --> 00:11:34,940
That is the human class.

165
00:11:35,540 --> 00:11:39,170
So now let's move on to the concept of modules.

166
00:11:39,170 --> 00:11:43,930
And as we mentioned earlier, modules are another way to achieve polymorphism in Ruby.

167
00:11:44,210 --> 00:11:49,010
Now, a module is a collection of behaviors that is usable in other classes, which makes sense.

168
00:11:50,160 --> 00:11:55,480
A module is mixed in to a glass using the include method and location, as I told you before.

169
00:11:55,740 --> 00:12:02,280
So let's say we want our human glass to have a dog method, but we have other classes that we want to

170
00:12:02,280 --> 00:12:02,610
use.

171
00:12:02,610 --> 00:12:04,220
A speak method would do.

172
00:12:04,680 --> 00:12:08,430
So if you talk about the syntax of modules, you can see it right over here.

173
00:12:08,440 --> 00:12:10,750
You have to write in module, which is a building keyword.

174
00:12:10,950 --> 00:12:13,920
Then you have to write in the name of the module, which can be anything.

175
00:12:14,160 --> 00:12:20,820
So let's say in the example, which is going to just follow after this syntax, the name of the module

176
00:12:20,820 --> 00:12:21,710
is going to be dog.

177
00:12:21,720 --> 00:12:25,290
And in that we will have a function that is going to be, let's say again, dog.

178
00:12:25,290 --> 00:12:30,360
And in here we are going to receive a variable and we are going to just print it out and then we are

179
00:12:30,360 --> 00:12:33,280
going to be using this module inside our class.

180
00:12:33,300 --> 00:12:38,640
So how that is going to be done, let's see an example finally of this.

181
00:12:38,640 --> 00:12:40,230
So we just move on to Adam.

182
00:12:42,680 --> 00:12:44,900
So let's say we will define a model, right?

183
00:12:44,930 --> 00:12:50,030
Well, here's we are going to write in model and let's say the name of the model is Dog and in here

184
00:12:50,030 --> 00:12:53,290
we are going to define a function that is going to be dog.

185
00:12:53,300 --> 00:12:55,670
And this is going to receive an argument.

186
00:12:55,880 --> 00:12:57,860
Let's say the argument is X..

187
00:12:58,190 --> 00:13:04,400
So right over here, what we are going to simply do is that we are going to just print out this, not

188
00:13:04,400 --> 00:13:04,940
this.

189
00:13:05,300 --> 00:13:07,240
We are going to just print out this X over here.

190
00:13:07,670 --> 00:13:11,930
And then what we are going to do is that we are going to end this function and we are going to end the

191
00:13:11,930 --> 00:13:12,830
model as well.

192
00:13:13,250 --> 00:13:16,490
Now, right after this, we have initialize our model.

193
00:13:16,520 --> 00:13:19,690
Now, what we are going to do is that we are going to initialize our class.

194
00:13:19,710 --> 00:13:22,970
So let's have a class that is the human class.

195
00:13:25,250 --> 00:13:32,390
And what we are going to do over here is that we are going to basically include the dog that we have

196
00:13:32,390 --> 00:13:34,280
initialized right over here as a module.

197
00:13:34,970 --> 00:13:37,430
So it has to be in capital.

198
00:13:39,140 --> 00:13:41,500
And finally, we have to end this glass as well.

199
00:13:42,940 --> 00:13:49,690
Then comes the part where we are going to just have our object, so let's say the name of our object

200
00:13:49,690 --> 00:13:54,380
is John and we are going to ride in human dot Neil.

201
00:13:54,760 --> 00:13:59,650
So when you just ride in human dornier, which means that you are about to create an instance, or you

202
00:13:59,650 --> 00:14:07,060
can say that you are about to create an object for this class human, which has included a module that

203
00:14:07,060 --> 00:14:07,910
is named as dog.

204
00:14:08,260 --> 00:14:14,920
So then if you when you have initialized this, then what you can do is that you can use this, John,

205
00:14:15,100 --> 00:14:21,430
here to basically use this module right over here, since it is a part of this class, since we have

206
00:14:21,430 --> 00:14:23,200
used the include method invocation of a.

207
00:14:23,860 --> 00:14:27,940
So if you just ride in John Dot Doc.

208
00:14:29,740 --> 00:14:31,930
And you just write in Hello, Hill.

209
00:14:33,330 --> 00:14:38,940
And you just underscored you can see that you have got that right over here now, if you just talk about

210
00:14:38,940 --> 00:14:43,080
the sequence of code, what's going on over here is that for us, this line is going to get executed.

211
00:14:43,080 --> 00:14:48,540
That is, John, equal to human God knew this score over here is then going to execute and it is going

212
00:14:48,540 --> 00:14:53,160
to see that this class human has a module that is included in it that is named as.

213
00:14:53,760 --> 00:14:58,380
So it is going to just have all the properties of this module.

214
00:14:58,390 --> 00:15:01,880
So now it has an access towards this function.

215
00:15:01,900 --> 00:15:06,990
So this means that we can now access this dog function using this object, John, or you can say the

216
00:15:06,990 --> 00:15:08,730
instance of a method that is named as John.

217
00:15:09,000 --> 00:15:14,040
So when you write in John Dot Dot and you also have to pass a parameter since it is going to accept

218
00:15:14,040 --> 00:15:14,890
a parameter over here.

219
00:15:14,910 --> 00:15:16,650
So let's say the parameter is a string.

220
00:15:16,650 --> 00:15:17,340
That is hello.

221
00:15:17,550 --> 00:15:22,480
We just passed in, we just printed out and you can see that that has got printed out over here.

222
00:15:22,500 --> 00:15:26,860
So that is basically the sequence of how things are going to get executed.

223
00:15:26,880 --> 00:15:31,250
Now, if you talk about modules, you can also include them in multiple classes as well.

224
00:15:31,500 --> 00:15:33,780
So let's say you have one more class over here.

225
00:15:34,870 --> 00:15:40,570
And let's say the name of the class is this damn human being a here and in here, we are going to use

226
00:15:40,570 --> 00:15:42,880
include Danquah here.

227
00:15:42,880 --> 00:15:45,170
And finally, we are going to end this function of a hill.

228
00:15:45,640 --> 00:15:52,570
Now, since this human and this human being both contains this dog, which means both these classes

229
00:15:52,570 --> 00:15:59,890
have access to this functional hill, which means that whatever instances are going to get created for

230
00:15:59,890 --> 00:16:05,080
both these classes, they will have access to this function using the instance created.

231
00:16:05,290 --> 00:16:12,550
So if you just create an instance for the second class, let's say Bob is the second instance for the

232
00:16:12,550 --> 00:16:14,510
second class that is human being.

233
00:16:14,650 --> 00:16:16,270
So we are going to write in new.

234
00:16:16,420 --> 00:16:20,870
So this means that an instance for the human being class is created that is known as Bob.

235
00:16:20,890 --> 00:16:26,110
So now using Bob, what you can do is that you can just call in the dog method and you can just pass

236
00:16:26,110 --> 00:16:26,860
in a parameter.

237
00:16:26,860 --> 00:16:32,230
Let's say the world is the parameter this time around this and you can see that the world is also going

238
00:16:32,230 --> 00:16:33,140
to get executed.

239
00:16:33,160 --> 00:16:35,860
So in this example, both the human object.

240
00:16:36,940 --> 00:16:42,310
With which we are calling John, as well as the human being object with which we are calling Bob, have

241
00:16:42,310 --> 00:16:44,500
access to the dog instanced method.

242
00:16:44,760 --> 00:16:48,660
Now, this is possible through mixing in the muddy with dog.

243
00:16:48,910 --> 00:16:55,180
It's, as you can say, that copy pasted the dog method into the human and human being glasses.

244
00:16:55,450 --> 00:17:02,020
And that's why you were able to access the dog method using the instances of the class, human and human

245
00:17:02,020 --> 00:17:02,410
being.

246
00:17:03,010 --> 00:17:07,240
Then you can use the module's concept to have a method look up.

247
00:17:07,540 --> 00:17:10,060
So for example, you want to call a method.

248
00:17:10,150 --> 00:17:13,120
Now, how does Ruby know where to look, for that matter?

249
00:17:13,510 --> 00:17:20,210
Now Ruby has a distinct look apart that it is going to follow each time a method is going to get called.

250
00:17:20,680 --> 00:17:28,360
So let's see our program from above to see what the method lookup part is for our human laws so we can

251
00:17:28,360 --> 00:17:32,080
use the ancestor methods on any glass to find out the method.

252
00:17:32,080 --> 00:17:36,580
Look up chain so we will have this modulo had modified a bit.

253
00:17:38,410 --> 00:17:43,710
So what we are going to do over here is that we are going to use that interpellation over here.

254
00:17:43,790 --> 00:17:46,410
We are going to read, write and hashtag here.

255
00:17:47,020 --> 00:17:51,520
And similarly, we are going to have this class humor and we are going to have the class human league

256
00:17:51,520 --> 00:17:52,990
board will have this dog dog.

257
00:17:52,990 --> 00:17:55,630
So the squad over here is going to remain the very same.

258
00:17:56,200 --> 00:18:01,300
And what we are going to do as is that we are going to just change this stuff over, help.

259
00:18:02,980 --> 00:18:05,710
So what we are going to write in, we are going to write in puts.

260
00:18:08,280 --> 00:18:09,510
Human Klaus.

261
00:18:11,770 --> 00:18:19,300
And sisters, so that is just for formality, Bess's and what's now going to get printed is basically

262
00:18:19,300 --> 00:18:20,680
going to be something different.

263
00:18:21,020 --> 00:18:25,490
So what you can do is that you will just remove this from hair you don't want.

264
00:18:25,690 --> 00:18:28,410
You don't need to actually create any kind of instances.

265
00:18:28,420 --> 00:18:32,830
Now, all you will do is that you will just write in and sisters of a hair.

266
00:18:32,830 --> 00:18:35,590
And that is basically something that is Beldin.

267
00:18:37,740 --> 00:18:42,330
And finally, what you are going to do is that you are going to ride in boats.

268
00:18:44,880 --> 00:18:46,440
Human being.

269
00:18:47,640 --> 00:18:54,680
The lost ancestors and you are going to write and human being.

270
00:18:57,700 --> 00:18:58,300
Dot.

271
00:19:00,220 --> 00:19:05,630
And sisters, and you're also going to use sports with that so that they get printed out as well.

272
00:19:05,710 --> 00:19:07,620
So you're going to ride in boats with this?

273
00:19:07,630 --> 00:19:09,400
You're going to ride boats with this.

274
00:19:09,700 --> 00:19:12,540
And we don't need any kind of stop right over here.

275
00:19:12,550 --> 00:19:14,460
So we will just remove this from here.

276
00:19:14,920 --> 00:19:16,180
So if you just run this code.

277
00:19:18,180 --> 00:19:24,700
All right, it has generated our output, but it also has generated some kind of error that says on

278
00:19:24,720 --> 00:19:26,820
initialised constant human being.

279
00:19:32,070 --> 00:19:39,690
And I guess, yes, we have to just make it a capital B, as you can see right over here now run this

280
00:19:39,690 --> 00:19:44,580
school and now you can see that you have just disappeared that error, and you have got the human glass

281
00:19:44,580 --> 00:19:45,300
ancestors.

282
00:19:45,540 --> 00:19:48,300
You can see that the human glass ancestors are right.

283
00:19:48,300 --> 00:19:52,250
This and just writing in puts human ancestor.

284
00:19:52,260 --> 00:19:57,690
You have got human, you have got dog, you've got object, you've got Gernon and you've got basic object.

285
00:19:57,690 --> 00:20:00,780
And then you've you talk about the human being class ancestors.

286
00:20:00,780 --> 00:20:04,020
You have again got the human being, which is the name of the class.

287
00:20:04,030 --> 00:20:09,690
What then you've got the function which you have right over here and you've got the object as well.

288
00:20:09,690 --> 00:20:10,560
And you've got Col.

289
00:20:10,560 --> 00:20:12,000
Then you've got basic object.

290
00:20:13,040 --> 00:20:18,980
So basically, the dog module is placed right in between our custom classes that are human and human

291
00:20:18,980 --> 00:20:24,950
being and the object class that comes with Ruby, so inheritance, you will see how the method lookup

292
00:20:25,060 --> 00:20:30,300
change is going to work out when working with both Mixin and the class inheritance.

293
00:20:30,320 --> 00:20:32,650
So for this detail you have covered mixin.

294
00:20:32,960 --> 00:20:37,550
So when we will be covering inheritance, then you are going to see how Mixin are going to work on with

295
00:20:37,550 --> 00:20:38,510
class inheritance.

296
00:20:38,930 --> 00:20:44,200
So whatever we have covered, this means that since the dog method is not defined in the human class

297
00:20:44,270 --> 00:20:47,880
or the next place it is going to look for is going to be the dog module.

298
00:20:48,320 --> 00:20:55,400
So this continues in an ordered linear fashion until the method is either found or there are no more

299
00:20:55,400 --> 00:20:57,110
places to look.

300
00:20:57,470 --> 00:21:02,780
So I hope you have understood the concept of modules and how they are going to get used and how you're

301
00:21:02,990 --> 00:21:09,200
going to just check for the ancestors of a single class and how if they are interlinked with the modules

302
00:21:09,380 --> 00:21:14,750
using multiple classes, that is the concept of make sense how they are going to get around the ancestors.

303
00:21:14,750 --> 00:21:15,160
Ohayon.

304
00:21:15,470 --> 00:21:17,830
So I hope you have understood all the stuff.

305
00:21:18,230 --> 00:21:23,040
I know it was a very interesting tutorial and the next story like come on with more interesting stuff.

306
00:21:23,360 --> 00:21:24,420
So for now, that's it.

307
00:21:24,440 --> 00:21:25,910
Thank you so much, guys, for watching.

308
00:21:25,910 --> 00:21:28,220
And I'll see you guys in the next tutorial.
