1
00:00:00,500 --> 00:00:01,580
Hey, guys, what's up?

2
00:00:01,610 --> 00:00:07,370
This is a marathon, and I welcome you to another tutorial on this course on Ruby.

3
00:00:07,400 --> 00:00:10,460
And in this tutorial we will be covering the topic.

4
00:00:10,460 --> 00:00:12,340
Bradgate matters.

5
00:00:12,650 --> 00:00:17,540
Now, if you go on to the Internet and check on with the list of the matters on strength's, you will

6
00:00:17,540 --> 00:00:22,000
see that almost every method ends with a question mark.

7
00:00:22,080 --> 00:00:23,270
Now, what's up with that?

8
00:00:23,420 --> 00:00:28,940
Now, what you will notice about those methods is that they will only return to kinds of output.

9
00:00:29,340 --> 00:00:33,030
It will be either true or it will be either false.

10
00:00:33,380 --> 00:00:39,610
Now, that is what is basically called predicate method in Ruby.

11
00:00:39,620 --> 00:00:44,510
Not quite sure why, maybe because of the historical context of programming.

12
00:00:44,780 --> 00:00:53,150
So always remember that Bradgate methods that end with a question mark will either return true or it

13
00:00:53,150 --> 00:00:56,170
will return for us, for example.

14
00:00:56,170 --> 00:01:03,470
Now, if we talk about some examples, for example, if I write in our airports and I want to check

15
00:01:03,470 --> 00:01:12,110
if a number is either even or odd, for example, I just type in one dot odd and run this code.

16
00:01:14,300 --> 00:01:20,030
All right, I forgot in the question mark, you always add this question mark over here, since I am

17
00:01:20,030 --> 00:01:25,190
asking this question that if it is if this one is odd or not.

18
00:01:25,370 --> 00:01:27,010
So I have to add this question mark.

19
00:01:27,030 --> 00:01:30,560
And on the screen you can see that it is true since one is an odd number.

20
00:01:30,800 --> 00:01:37,670
So if you just write in for here and you know that this is not odd, so it is going to return false

21
00:01:37,670 --> 00:01:39,290
now since four is even.

22
00:01:39,290 --> 00:01:44,900
So, if you use the even method over here, run the score and you can see that you have generated destroyable

23
00:01:44,900 --> 00:01:45,230
here.

24
00:01:45,230 --> 00:01:50,690
And if you use one over here and now run the score, you can see that false has been generated on the

25
00:01:50,690 --> 00:01:53,540
output screen now.

26
00:01:54,440 --> 00:02:00,830
All these methods I have showing you this makes them read like a question, which is pretty cool.

27
00:02:02,010 --> 00:02:12,510
Now, you can ask if a number is between two numbers, you can go on and use predicate methods on strings,

28
00:02:12,530 --> 00:02:15,790
you can use the predicate methods on areas.

29
00:02:16,170 --> 00:02:22,810
Now, how these are going to be used on strengths and errors, that is going to be a part of the future.

30
00:02:22,820 --> 00:02:30,090
Dorians, when we will be covering the methods on strings and when we'll be covering all about areas.

31
00:02:30,120 --> 00:02:32,630
So that will be covered in the future sections.

32
00:02:32,940 --> 00:02:37,140
For now, all you need to know is that what are practical methods?

33
00:02:37,910 --> 00:02:41,510
Let me just give you one to two examples more now.

34
00:02:41,520 --> 00:02:46,020
For example, I want to know if a number is between a certain range or not.

35
00:02:46,050 --> 00:02:48,390
So, for example, I want to know that if five.

36
00:02:49,920 --> 00:02:50,610
Dot.

37
00:02:52,460 --> 00:02:53,210
Between.

38
00:02:54,190 --> 00:03:00,850
A question mark, and I want to know if life is between one to 10 now, obviously it is.

39
00:03:01,090 --> 00:03:05,830
So if you just run this God, you can see that Drew is generated on the output screen.

40
00:03:08,140 --> 00:03:14,200
Now, if I just change this to for, let's say, and now run this quarter, you can see that falls has

41
00:03:14,200 --> 00:03:15,010
been generated.

42
00:03:15,340 --> 00:03:20,590
So these methods are basically called predicate methods in Ruby Bradgate.

43
00:03:20,590 --> 00:03:25,990
Methods are going to be also covered in the future tutorials when we will be covering about strings

44
00:03:25,990 --> 00:03:26,580
and errors.

45
00:03:26,950 --> 00:03:32,090
So you will come across many things about Bradgate methods in the future tutorials as well.

46
00:03:32,110 --> 00:03:37,390
The purpose of this tutorial, as I told you, is only to give you a basic introduction to predicate

47
00:03:37,390 --> 00:03:37,920
methods.

48
00:03:38,230 --> 00:03:41,350
So I guess that's it when this tutorial.

49
00:03:41,380 --> 00:03:43,370
Thank you so much, guys, for watching.

50
00:03:43,390 --> 00:03:45,100
I'll see you guys in the next Dorio.
