1
00:00:00,300 --> 00:00:01,290
Hey, guys, what's up?

2
00:00:01,320 --> 00:00:05,780
This is a marathon, and I welcome you to enter the DORELLE on this discourse on Truby and in this story

3
00:00:05,880 --> 00:00:08,220
we are going to cover the introduction to erase.

4
00:00:08,640 --> 00:00:14,920
So what are errors and why are they used in almost every programming language you will come across?

5
00:00:15,300 --> 00:00:19,380
So in Ruby areas, let you represent a list of data in your programs.

6
00:00:19,710 --> 00:00:22,830
Once you have data in an area, you can sorted.

7
00:00:22,950 --> 00:00:24,990
You can remove the duplicates from that data.

8
00:00:24,990 --> 00:00:26,660
You can reverse its order.

9
00:00:26,790 --> 00:00:32,130
You can extract sections of data, or you can search through the errors for a specific data you are

10
00:00:32,130 --> 00:00:32,710
looking for.

11
00:00:33,030 --> 00:00:35,390
You can also convert an area to a string.

12
00:00:35,400 --> 00:00:42,240
You can transform one array of data into another, and you can also roll up any area into a single value.

13
00:00:42,450 --> 00:00:47,370
In this section, you will explore some of the most practical methods Ruby provide for working with

14
00:00:47,370 --> 00:00:49,770
that data that is stored in areas.

15
00:00:49,980 --> 00:00:56,490
As you work on with this section, you will come across some maps that end with an exclamation mark.

16
00:00:56,910 --> 00:01:02,370
These methods often have side effects, such as mutating the original value or raising exceptions.

17
00:01:02,640 --> 00:01:05,700
Many methods you will use in this section have a related method.

18
00:01:05,910 --> 00:01:12,240
With this affects, you will also come across methods that end with a question mark and these methods

19
00:01:12,240 --> 00:01:13,980
basically return zabulon value.

20
00:01:14,010 --> 00:01:18,900
Now you have Goertz some methods with exclamation mark and question marks in the previous sections as

21
00:01:18,900 --> 00:01:19,160
well.

22
00:01:19,500 --> 00:01:22,560
So I guess that won't be a problem for you in this section as well.

23
00:01:22,770 --> 00:01:27,750
Now there are a naming convention that is used throughout Ruby.

24
00:01:27,750 --> 00:01:31,110
It's not something that is enforced at the program level.

25
00:01:31,110 --> 00:01:36,310
It's just another way to identify what you can expect from any kind of method.

26
00:01:36,330 --> 00:01:40,640
So a method is always named after what it is supposed to do.

27
00:01:40,890 --> 00:01:42,960
So you will come across many of those.

28
00:01:42,990 --> 00:01:51,120
So let's start our exploration of areas and array methods by looking at how to basically initialize

29
00:01:51,120 --> 00:01:56,300
an area and how to access the elements of an array in this tutorial.

30
00:01:56,610 --> 00:02:00,840
So we will move on to our editor, Adam.

31
00:02:00,840 --> 00:02:07,800
And in this story, we will restrict restrict ourself only to how to initialize an area and how to access

32
00:02:07,800 --> 00:02:09,690
the elements of an array.

33
00:02:10,020 --> 00:02:14,760
Now, in the previous sections, you have already covered how to initialize an area because there were

34
00:02:14,760 --> 00:02:19,290
some topics that were associated somehow with these errors.

35
00:02:19,310 --> 00:02:22,860
So in this tutorial, we will discuss all of that in detail.

36
00:02:23,610 --> 00:02:27,190
And if you have any kind of that, I hope that those doubts will get cleared away.

37
00:02:27,600 --> 00:02:35,520
So let's say we have an area that is named as X and in that area, let's say you have got a lot of members.

38
00:02:35,550 --> 00:02:39,960
So always remember that when you have to initialize an area, you have to store it in a variable.

39
00:02:39,970 --> 00:02:41,580
So just initialize that variable.

40
00:02:41,580 --> 00:02:47,910
And this variable over here is no more than going to be a simple area, but it is now going to contain

41
00:02:47,910 --> 00:02:48,420
an area.

42
00:02:48,420 --> 00:02:55,830
And to initialize an area where you have to do is that you have to write in these square brackets and

43
00:02:55,830 --> 00:03:02,030
the square brackets are basically going to contain the values that are going to store in this area.

44
00:03:02,280 --> 00:03:08,790
So you can initialize any values, you can specify integers, you can specify string, you can specify

45
00:03:08,790 --> 00:03:13,740
fluid, any kind of data that can be specified in an array.

46
00:03:14,010 --> 00:03:17,810
So to start on with, let's say we have strings over here.

47
00:03:18,090 --> 00:03:20,430
So let's say our first string is a.

48
00:03:21,730 --> 00:03:28,860
Then we have Godbee, then we have Godse, then we have got God, and finally, let's say we have five

49
00:03:28,860 --> 00:03:31,080
elements A, B, C, D and E.

50
00:03:32,410 --> 00:03:39,880
Now, basically, this is going to be an area and to know the location of every element in an area,

51
00:03:39,880 --> 00:03:43,430
you can just start on by counting from zero from this side.

52
00:03:43,660 --> 00:03:46,520
So this is basically the zeroth location of the area.

53
00:03:46,540 --> 00:03:52,930
This is the first location of the ARACY is stored at the second location, disturbed at the fourth location.

54
00:03:52,930 --> 00:03:54,880
And this is basically the location.

55
00:03:55,010 --> 00:03:58,060
So you have to start out with zero zero one, two, three, four.

56
00:03:58,060 --> 00:03:59,500
I guess that was four, not five.

57
00:03:59,950 --> 00:04:00,420
All right.

58
00:04:00,640 --> 00:04:06,370
Now, this is basically how you can initialize an area now to access the elements of an area where you

59
00:04:06,370 --> 00:04:06,880
have to do.

60
00:04:06,880 --> 00:04:12,070
Is that if you want to print it out as well, you can just write inputs and you have to write in the

61
00:04:12,070 --> 00:04:14,860
name of the variable in which this area is stored.

62
00:04:15,040 --> 00:04:17,080
You can write in the square brackets again.

63
00:04:18,010 --> 00:04:21,900
And for example, you want to, let's say, access a very specific value.

64
00:04:22,120 --> 00:04:28,240
So what you can do is that you can write the position of that element, what you want to print out in

65
00:04:28,240 --> 00:04:29,180
these square brackets.

66
00:04:29,200 --> 00:04:29,830
Right over here.

67
00:04:29,860 --> 00:04:34,090
So let's say I want to print in the first element, and I know that the counting starts from zero.

68
00:04:34,090 --> 00:04:39,040
So I'm going to write in zero or here, which is the location of this area here in this area X..

69
00:04:39,370 --> 00:04:44,980
So just run this code and you can see that it is going to get printed on the adumbrated the right over

70
00:04:44,980 --> 00:04:45,300
here.

71
00:04:46,310 --> 00:04:51,710
Now, if you want to access the first element, just write in one, run the school and B is going to

72
00:04:51,710 --> 00:04:52,370
get printed.

73
00:04:52,850 --> 00:04:58,320
Now, there is one more interesting concept about how to specify negative numbers of a help.

74
00:04:58,640 --> 00:05:02,870
Now, let's say you have this error and it has, let's say, a lot of elements.

75
00:05:02,870 --> 00:05:04,760
Let's say F is also a part of it.

76
00:05:04,760 --> 00:05:06,350
G is also a part of it.

77
00:05:06,740 --> 00:05:08,300
That is also a part of it.

78
00:05:08,720 --> 00:05:10,940
And let's say is also a part of it.

79
00:05:11,250 --> 00:05:17,180
Now, for example, you want to access this element now instead of you start counting from here like

80
00:05:17,180 --> 00:05:21,640
zero one, two, three, four, five, six and seven.

81
00:05:21,800 --> 00:05:27,260
So it will take a lot of time if you start counting on from this starting location.

82
00:05:27,650 --> 00:05:33,920
Now, if you have a variable which you want or you have an element in an area you want to access and

83
00:05:33,920 --> 00:05:35,360
that is very near to the end.

84
00:05:35,370 --> 00:05:39,770
So what you can do is that you can just start counting from this site.

85
00:05:40,070 --> 00:05:44,510
But remember, when you count, starting from the backwards side, then what you have to do is that

86
00:05:44,510 --> 00:05:47,790
you don't have to start with a zero, you have to start with a minus one.

87
00:05:48,050 --> 00:05:51,890
So this is the minus the one location, this is the minus two and so on.

88
00:05:52,040 --> 00:05:54,420
Whatever is going to be the location of this eight.

89
00:05:54,770 --> 00:05:58,940
So if you just write in minus one over here, then it is going to bring this for you.

90
00:05:59,210 --> 00:06:00,290
You just run this code.

91
00:06:00,290 --> 00:06:02,710
You can see that it has been printed right over here.

92
00:06:03,020 --> 00:06:04,850
If you just write in minus Dule Hill.

93
00:06:05,840 --> 00:06:09,200
Run the score, you can see that this Ohara is going to get printed.

94
00:06:09,500 --> 00:06:14,390
Now, there is the question that why we don't have a minus zero, because if you are familiar with rational

95
00:06:14,390 --> 00:06:19,760
numbers, you know that rational numbers starts from zero and then last one minus one, plus one plus

96
00:06:19,760 --> 00:06:25,310
two, minus two, plus three, minus three, because zero can not be positive and negative, both because

97
00:06:25,310 --> 00:06:26,740
zero is just a whole number.

98
00:06:26,750 --> 00:06:32,690
So you have to have zero on its own because we have a zero location on which we have got this.

99
00:06:32,900 --> 00:06:38,180
So if you just write in zero, well here it is going to print this over here, not this from here.

100
00:06:38,210 --> 00:06:43,340
So if you want to start something printing from this backward side to what you have to do is that you

101
00:06:43,340 --> 00:06:45,110
have to start on with minus one.

102
00:06:45,120 --> 00:06:48,800
So minus two over here is going to get this printed over here.

103
00:06:49,950 --> 00:06:54,780
Now, one more thing you need to know about here is that what if you want to, let's say, bring the

104
00:06:54,780 --> 00:07:01,770
first element or you can say just the last element of this area, then you have Beldin functions for

105
00:07:01,770 --> 00:07:02,090
that.

106
00:07:02,100 --> 00:07:07,470
You have got the first function and you have got the last method that is better than method that can

107
00:07:07,470 --> 00:07:09,460
be applied on the elements of an error.

108
00:07:09,720 --> 00:07:14,520
So to bring the first element where you can simply do is that you can write inputs, you can write an

109
00:07:14,520 --> 00:07:21,150
X, which is the variable in which this error is stored, and you can just write an X dot first, run

110
00:07:21,150 --> 00:07:25,240
this code and you can see that it is printed out the first element for you.

111
00:07:25,440 --> 00:07:30,720
So this is a very useful function that instead of typing X zero, you can just write an extract first

112
00:07:30,720 --> 00:07:36,690
and that is going to look a bit more professional and to print out the last element than there is one

113
00:07:36,690 --> 00:07:43,150
more method for that, that you can just write an X dot last, run this code and you can see that the

114
00:07:43,180 --> 00:07:46,130
last element that is AI is going to get printed.

115
00:07:46,470 --> 00:07:49,630
Finally, when you access an element that does not exist.

116
00:07:49,890 --> 00:07:56,490
What do you will do is that you will often get a but if you want to get an error message instead, you

117
00:07:56,490 --> 00:07:57,750
can use a function for that.

118
00:07:57,930 --> 00:08:00,030
So let's start on by.

119
00:08:01,160 --> 00:08:05,810
For example, if as you can see, that it has almost eight to nine elements, so let's say if I write

120
00:08:05,810 --> 00:08:09,020
in 15, I know these are not 15 elements here on this score.

121
00:08:09,140 --> 00:08:11,000
And you can see that I've got nothing.

122
00:08:11,150 --> 00:08:16,220
But if you just notice, again, if I just write in one over here on the score, you can see that I've

123
00:08:16,220 --> 00:08:16,760
got this.

124
00:08:16,970 --> 00:08:21,410
But if I just write in 15 O'Haire around the score, you can see that a line space has been created,

125
00:08:21,620 --> 00:08:27,090
which means that nil has been returned from this statement of here that is executed over here.

126
00:08:27,410 --> 00:08:32,090
So if you don't want this to occur, because if you are running a very extensive line of code and you

127
00:08:32,090 --> 00:08:37,570
have to have an output, which is also going to be very, very, very extensive.

128
00:08:37,580 --> 00:08:44,570
So then this thing, Ohara is going to create a lot of problems because in this program we are only

129
00:08:44,570 --> 00:08:45,500
running a single line.

130
00:08:45,500 --> 00:08:47,840
So that's why we can simply see that nothing has got printed.

131
00:08:47,850 --> 00:08:53,420
But if you are printing, let's say, hundred of more things on the item runner and you're also running

132
00:08:53,420 --> 00:08:58,940
this piece of code over here, then you are not going to get what is going on over here and you are

133
00:08:58,940 --> 00:09:03,310
not going to see that if the value of this has been printed or not.

134
00:09:03,500 --> 00:09:08,300
So for that, you have got a function that is known as fetch method.

135
00:09:08,420 --> 00:09:14,330
And what that fetch method is going to do is that it is going to generate an error message for you so

136
00:09:14,330 --> 00:09:19,120
that you can know that whatever was there has not yet printed.

137
00:09:19,400 --> 00:09:20,600
So you can write and fetch.

138
00:09:20,810 --> 00:09:26,420
And if you just write in a value that is present already, let's say one, run the school, then you

139
00:09:26,420 --> 00:09:31,010
can see that it is just fetch the value of the first location from this area.

140
00:09:31,340 --> 00:09:33,100
And you can see that B has been printed.

141
00:09:33,110 --> 00:09:39,920
But if you write in 15 O'Haire now run the school, you can see that you have got an error that says

142
00:09:39,920 --> 00:09:44,770
index 15 outside of error bounds and it is known as index error.

143
00:09:44,900 --> 00:09:50,720
So if you're running an extensive code, then you can simply get an error message and you are automatically

144
00:09:50,720 --> 00:09:56,600
going to understand that what I'm trying to access is basically out of the scope of the error bound.

145
00:09:58,110 --> 00:10:02,640
Now, this vetch function can also receive into argument and now what is the purpose of that second

146
00:10:02,640 --> 00:10:03,030
argument?

147
00:10:03,270 --> 00:10:07,770
Now, if you just noticed this error over here, you can see that it is a very long error.

148
00:10:07,770 --> 00:10:13,740
And if you are running a very extensive program, then such kind of long errors can be very fuzzy.

149
00:10:13,740 --> 00:10:18,630
And it is basically very difficult to look for the exact message, which is right.

150
00:10:18,690 --> 00:10:23,010
Well, here you can see that it doesn't show from here, but you have to scroll down and things like

151
00:10:23,010 --> 00:10:23,340
that.

152
00:10:23,340 --> 00:10:26,670
You don't want such a large area to just generated.

153
00:10:26,970 --> 00:10:29,130
All you want is that you want a simple message.

154
00:10:29,130 --> 00:10:35,400
Let's say you can just write and there's a hill and you guys just create your default error message

155
00:10:35,400 --> 00:10:36,660
and you can just write in.

156
00:10:38,170 --> 00:10:39,100
Out of bond.

157
00:10:41,680 --> 00:10:47,050
Run it and you can see that you have simply got out of bondable if you just have an element, O'Haire

158
00:10:47,050 --> 00:10:47,560
underscored.

159
00:10:47,590 --> 00:10:49,470
You can see that that element is going to get printed.

160
00:10:49,480 --> 00:10:54,850
But if you have got something that is out of bond, you can simply generate your default message instead

161
00:10:54,850 --> 00:10:57,700
of that very big and confusing message.

162
00:10:57,910 --> 00:10:59,890
And that is going to be.

163
00:11:01,130 --> 00:11:07,310
A lot more easier than the previous error message, and you are going to simply know that you have accessed

164
00:11:07,310 --> 00:11:13,800
an element that is basically out of bond and that element is basically not present in that area.

165
00:11:14,330 --> 00:11:20,390
So I hope you have understood how to fetch elements from the area, how to match the first element,

166
00:11:21,050 --> 00:11:27,020
how to find the last element, how to fetch an element using the fetch function, how to generate your

167
00:11:27,020 --> 00:11:30,450
custom error messages, using the fetch function.

168
00:11:30,860 --> 00:11:35,760
Now, what do you need to know where here is how to retrieve multiple elements?

169
00:11:36,080 --> 00:11:42,620
Now there are times you might want to grab a subset of values from your area instead of just a single

170
00:11:42,620 --> 00:11:43,120
element.

171
00:11:44,030 --> 00:11:50,150
If you specify a starting index followed by the number of elements you want, you will get a new array

172
00:11:50,150 --> 00:11:51,370
containing those values.

173
00:11:51,380 --> 00:11:57,010
For example, you can grab the middle two entries from an area which is right over here.

174
00:11:59,010 --> 00:12:06,720
To do so, what do you have to do is just remove this here right in the square brackets and it is going

175
00:12:06,720 --> 00:12:07,860
to have to arguments.

176
00:12:07,870 --> 00:12:11,610
The first argument is going to be the value from which you want to start on.

177
00:12:11,820 --> 00:12:18,720
And the second argument is going to be the value, which specifies the number of elements after the

178
00:12:18,720 --> 00:12:22,710
number of after the element, which is specified as the first argument.

179
00:12:22,760 --> 00:12:28,050
So, for example, I want things to start on from location number one, which means this both here and

180
00:12:28,050 --> 00:12:28,560
after this.

181
00:12:28,560 --> 00:12:30,940
B, I want to bring two elements.

182
00:12:31,260 --> 00:12:37,230
So if I just run the score, you can see that I've got A, B and C. So it starts on with the first element

183
00:12:37,230 --> 00:12:39,660
and after that it is going to print on two elements.

184
00:12:39,690 --> 00:12:42,510
So the first element was this and the second element was this.

185
00:12:42,810 --> 00:12:45,730
If I just write in three, you will run the score.

186
00:12:45,750 --> 00:12:50,850
You can see that I've got the seed of our here, which means that I printed out three elements, including

187
00:12:50,880 --> 00:12:52,480
this first location over here.

188
00:12:52,500 --> 00:12:58,980
So that's how basically you can have access multiple elements from an array as well.

189
00:12:59,220 --> 00:13:04,710
Now you can use the slice method, which is a building matter that can be applied an area as well to

190
00:13:04,710 --> 00:13:06,480
do the very, very same thing.

191
00:13:06,690 --> 00:13:09,990
Now, for example, you've already got this area here that is X..

192
00:13:10,170 --> 00:13:13,980
Now, what if you want to do this very same stuff using the slice method?

193
00:13:14,010 --> 00:13:17,550
So what you can do here is that you can just remove this from here.

194
00:13:17,790 --> 00:13:18,120
Right?

195
00:13:18,120 --> 00:13:25,200
And slice and slice function is again going to have the two arguments, which has the very same logic

196
00:13:25,200 --> 00:13:28,790
as the previous logic, which was in the square brackets.

197
00:13:28,800 --> 00:13:34,650
All you've tried to write in one to run, Ron is going to get printed just right in Trio here.

198
00:13:34,900 --> 00:13:37,470
ABCDE is going to get printed.

199
00:13:37,620 --> 00:13:44,010
The slide method also basically returns a new area because whatever this is is now a new area.

200
00:13:44,220 --> 00:13:47,290
It leave the original area unaltered.

201
00:13:47,610 --> 00:13:53,190
However, if you use the slice method with an exclamation mark, the original array will be changed

202
00:13:53,190 --> 00:13:53,490
as well.

203
00:13:53,500 --> 00:13:56,040
And you have covered the method with the exclamation mark.

204
00:13:56,050 --> 00:14:00,450
And you know that when you use the exclamation mark, what methods then?

205
00:14:00,450 --> 00:14:06,200
What it is going to do is that it is going to also alter the original area as well.

206
00:14:06,210 --> 00:14:11,940
But if you don't want the original array to get Eldard, then you don't have to specify an exclamation

207
00:14:11,940 --> 00:14:12,340
mark.

208
00:14:12,750 --> 00:14:19,680
Then you have a method that is a method and the take method let you grab the specified number of entries

209
00:14:19,680 --> 00:14:21,620
from the beginning of an array.

210
00:14:21,870 --> 00:14:28,110
So instead of specifying this first argument, which specifies the location from which you want to start

211
00:14:28,110 --> 00:14:33,570
printing, so if you don't want that, you just want, let's say, the four first four elements to get

212
00:14:33,570 --> 00:14:33,930
printed.

213
00:14:33,930 --> 00:14:37,290
And you always want to start on with the start of the era.

214
00:14:37,290 --> 00:14:40,470
And let's say print, let's add two elements up to that, three elements up to that.

215
00:14:40,630 --> 00:14:43,110
So you can not use the slides matter.

216
00:14:43,120 --> 00:14:45,180
You can use you can just write in zero here.

217
00:14:45,180 --> 00:14:49,440
But there is a specific method for that, which is known as the take method.

218
00:14:49,590 --> 00:14:52,110
And the method takes only one argument.

219
00:14:52,920 --> 00:14:57,210
Let's say if I just write in three, you will run the score, then it is going to print the first three

220
00:14:57,210 --> 00:14:57,550
elements.

221
00:14:57,570 --> 00:15:02,940
So by default, the government is going to start on from the zero allocation and it is going to print

222
00:15:03,180 --> 00:15:06,210
the number of elements which is specified as an argument of here.

223
00:15:06,210 --> 00:15:09,120
Since it is three you has it is going to print the first three element.

224
00:15:09,120 --> 00:15:12,800
If you just write in four over here, it is going to printed the four elements.

225
00:15:12,960 --> 00:15:16,070
That is A, B, C and D.

226
00:15:16,440 --> 00:15:19,620
So I hope you have understood all of these.

227
00:15:19,620 --> 00:15:25,680
You know how to access the elements from an area using a lot of methods.

228
00:15:25,860 --> 00:15:31,250
And you also know how to just retrieve multiple elements from an area as well.

229
00:15:31,560 --> 00:15:35,160
So I guess that's enough with this tutorial.

230
00:15:35,160 --> 00:15:39,420
In the next iteration, we will see a lot on errors more.

231
00:15:39,550 --> 00:15:42,720
So I hope you stick on to this section and learn everything.

232
00:15:42,720 --> 00:15:44,300
So I guess that's it with this tutorial.

233
00:15:44,310 --> 00:15:45,780
Thank you so much, guys, for watching.

234
00:15:45,930 --> 00:15:48,000
And I'll see you guys in the next tutorial.
