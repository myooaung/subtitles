1
00:00:00,330 --> 00:00:01,320
Hey, guys, what's up?

2
00:00:01,350 --> 00:00:05,280
This is a marathon, and I welcome you to another drill on this course on Ruby.

3
00:00:05,580 --> 00:00:13,020
And in this video, we are going to cover some concepts that are related to object oriented programming.

4
00:00:13,020 --> 00:00:17,610
And in this tutorial specifically, we are going to talk about inheritance in very detail.

5
00:00:17,940 --> 00:00:22,590
Now, in the previous year, we talked briefly about inheritance.

6
00:00:22,770 --> 00:00:27,210
And inheritance is when a class inherits behavior from another class.

7
00:00:27,480 --> 00:00:33,390
The class that is inheriting behavior is called the subclass, and the class inherits from is called

8
00:00:33,390 --> 00:00:34,290
the superclass.

9
00:00:34,710 --> 00:00:40,650
Now, we can use inheritance as a way to extract common behavior from from classes that share that behavior

10
00:00:40,650 --> 00:00:42,610
and move it to super classes.

11
00:00:43,050 --> 00:00:45,590
This let us keep logic in one place.

12
00:00:45,870 --> 00:00:51,000
So let's take a look at an example of inheritance.

13
00:00:51,000 --> 00:00:54,330
And first, we are going to talk about the class inheritance.

14
00:00:54,600 --> 00:00:59,160
So what we are going to do is that we are going to extract the module.

15
00:00:59,160 --> 00:01:01,470
We are going to create for the super class.

16
00:01:01,880 --> 00:01:07,650
We are going to create and we are going to use inheritance to make that behavior available to the subclasses

17
00:01:07,650 --> 00:01:09,520
of that superclass we are going to create.

18
00:01:09,810 --> 00:01:14,550
So let's say the name of our super class is, let's say class human.

19
00:01:16,710 --> 00:01:20,640
And in this class, human, we are going to call a function.

20
00:01:21,780 --> 00:01:23,560
You're going to sorry, not call a function.

21
00:01:23,580 --> 00:01:29,010
We are going to define a function that is how low that is going to return a value that is let's say

22
00:01:29,010 --> 00:01:29,340
hello.

23
00:01:29,360 --> 00:01:31,260
Let's just end this function.

24
00:01:32,550 --> 00:01:34,890
And this glass and.

25
00:01:36,380 --> 00:01:42,890
Down here, what we are going to do is that we are going to create two classes that are basically going

26
00:01:42,890 --> 00:01:49,280
to get inherited from this class because this class over here is going to be called as these super class.

27
00:01:49,520 --> 00:01:53,150
And down here, we are going to create the child classes for this super class.

28
00:01:53,150 --> 00:01:55,460
And let's say we have got two classes.

29
00:01:55,460 --> 00:01:57,140
Let's say the first class is.

30
00:01:59,050 --> 00:02:00,220
The M..

31
00:02:01,640 --> 00:02:06,080
And to inherit this class from this class, what we are going to write and we are going to write in

32
00:02:06,080 --> 00:02:08,690
the less than sign and we are going to write in human.

33
00:02:08,730 --> 00:02:15,320
So if you just have a look at a common thing over, you can see that it says human is greater than male.

34
00:02:15,470 --> 00:02:21,290
So this means that this is the superclass and this is the child, because a father is always bigger

35
00:02:21,320 --> 00:02:28,160
than his child to explain it in simple words and just and the statement about him and create one more

36
00:02:28,160 --> 00:02:28,910
class warfare.

37
00:02:28,910 --> 00:02:33,440
Let's say the second class is class female and it will also have this lesbian sign.

38
00:02:33,440 --> 00:02:35,780
And you're going to write a human just and this class will hear.

39
00:02:36,170 --> 00:02:39,890
So now what we have here is that we have a super class.

40
00:02:39,930 --> 00:02:42,290
Then we have two child classes.

41
00:02:42,440 --> 00:02:44,600
So this is first class.

42
00:02:46,090 --> 00:02:53,350
And we have this female here that is going to be the second child class for the super class that is

43
00:02:53,530 --> 00:02:56,110
human since we have written human evil here.

44
00:02:56,470 --> 00:03:02,290
So now what you can do over here is that if you create an object for this male class or this female

45
00:03:02,290 --> 00:03:08,980
class, then what you can do is that you can access any kind of methods that are a part of this super

46
00:03:08,980 --> 00:03:09,730
class will help.

47
00:03:10,030 --> 00:03:15,280
So, for example, if you just ride in John equal to male.

48
00:03:15,280 --> 00:03:16,060
Dortch New.

49
00:03:18,120 --> 00:03:24,180
And let's say you have got a female as well, so we will create a class for female, let's say Jennifer,

50
00:03:24,180 --> 00:03:27,640
equal to female dot news.

51
00:03:27,660 --> 00:03:29,490
So now we have got two objects.

52
00:03:29,520 --> 00:03:34,590
The first one is for the middle class and the second one is for the female class.

53
00:03:34,620 --> 00:03:37,310
Now, what are you going to do is that we are going to write in votes.

54
00:03:37,560 --> 00:03:39,720
You're going to write in John Doe, doc.

55
00:03:41,420 --> 00:03:43,370
And right here, you can just ride in boats.

56
00:03:44,450 --> 00:03:52,120
Jennifer Dodd, doc, now, as you can see, that basically the doc is a method from the superclass,

57
00:03:52,130 --> 00:03:58,370
and as I told you, that when a class is inheriting some class, then it also inherits all the feature

58
00:03:58,370 --> 00:03:59,070
of that class.

59
00:03:59,360 --> 00:04:05,150
So this malfunction and since it is being inherited from the super class human and since the human has

60
00:04:05,150 --> 00:04:09,050
this function that docs so this function dog is also going to be a part of this function.

61
00:04:09,050 --> 00:04:14,120
And using the object of the class meal, what you can do is that you can access this function right

62
00:04:14,120 --> 00:04:14,270
over.

63
00:04:14,270 --> 00:04:16,590
How similar is the case with the female class?

64
00:04:16,610 --> 00:04:18,880
It is also being inherited from the human class.

65
00:04:18,890 --> 00:04:23,570
It also inherits all the future and all the functions of the superclass human.

66
00:04:23,590 --> 00:04:28,850
So that's why using the object of this female class, what you can do is that you can access this dog

67
00:04:28,880 --> 00:04:31,100
method, which is a part of the superclass overhead.

68
00:04:31,430 --> 00:04:37,550
So writing Devonport's John, the dog here is going to bring on Halo and writing inputs.

69
00:04:37,550 --> 00:04:39,350
Jennifer Doko O'Haire.

70
00:04:39,350 --> 00:04:40,860
It is also going to print hello.

71
00:04:41,150 --> 00:04:43,850
So if you just run this code, you're going to see that you have got.

72
00:04:43,850 --> 00:04:44,170
Hello.

73
00:04:44,180 --> 00:04:44,420
Hello.

74
00:04:44,420 --> 00:04:49,090
This is for the object of the middle class and this is for the object of the female class.

75
00:04:50,360 --> 00:04:56,450
So what we are doing here is that we are using the less than symbol to signify that the middle class

76
00:04:56,450 --> 00:04:58,410
is inheriting from the human class.

77
00:04:58,430 --> 00:05:02,970
This means that all of the methods in the human class are available to the middle class for you.

78
00:05:03,530 --> 00:05:08,220
We also created a new class that is called As Female that inherits from human as well.

79
00:05:08,240 --> 00:05:14,720
We have eliminated the dark matter from the middle class in order to use that dark method from human.

80
00:05:14,990 --> 00:05:20,900
When we run the school and we see the correct output, both classes are now using the super class humans

81
00:05:21,350 --> 00:05:22,550
dog method.

82
00:05:22,970 --> 00:05:27,850
Now, what if you want to use the original dog method from the middle class only?

83
00:05:28,100 --> 00:05:34,220
So for that but you have to do is that you have to add it back and see that what happened for this.

84
00:05:35,060 --> 00:05:41,190
So in the middle class, what we are going to do is that we are going to specify this attribute excess.

85
00:05:41,190 --> 00:05:47,660
So here and using this attribute excess, what you are going to do is that you are going to define and

86
00:05:47,690 --> 00:05:48,590
variable over here.

87
00:05:48,590 --> 00:05:50,500
Let's say a name is that variable.

88
00:05:50,990 --> 00:05:54,520
Now, down here we are going to create the constructor function for this main class.

89
00:05:54,540 --> 00:06:01,280
We are going to write in, initialize and in here it is going to receive that argument that is going

90
00:06:01,280 --> 00:06:02,790
to get assigned to this name.

91
00:06:03,020 --> 00:06:06,200
So for that, you can use the self object.

92
00:06:06,200 --> 00:06:10,610
You can write in self name equal to end, and that is good enough.

93
00:06:10,610 --> 00:06:13,820
Just end this function and the class has already been ended.

94
00:06:14,000 --> 00:06:18,710
Now, what you can do is that you can define the function right over here so you can just write in the

95
00:06:19,220 --> 00:06:21,500
doc and in this doc.

96
00:06:21,500 --> 00:06:24,530
What you can do is that you can write an.

97
00:06:26,200 --> 00:06:30,520
Self-torture name, so you are just printing out the name and you see.

98
00:06:31,600 --> 00:06:32,680
Hello, Oakhill.

99
00:06:35,880 --> 00:06:39,040
All right, so just end this function as well.

100
00:06:40,350 --> 00:06:46,830
And that's good enough, just call us now and let's just add a statement right over here so that you

101
00:06:46,830 --> 00:06:54,420
can see what output is being printed object of John and I do.

102
00:06:54,450 --> 00:06:56,190
Here we are going to write in votes.

103
00:06:58,100 --> 00:07:00,760
Object of Jennifer.

104
00:07:01,190 --> 00:07:06,290
So now what you have to do is that you have to also pass in an argument since as you can see, that

105
00:07:06,290 --> 00:07:12,140
you have got a constructor function and you know that this new o'haire for the middle class, since

106
00:07:12,140 --> 00:07:14,590
we have created that constructor function in the middle class.

107
00:07:14,590 --> 00:07:18,050
So for that, when you are going to call it, it is going to call the constructor function.

108
00:07:18,050 --> 00:07:21,410
And we have a constructor function right here, which is expecting an argument.

109
00:07:21,770 --> 00:07:27,050
So right away here, we are also going to specify that argument, because if you don't do, for example,

110
00:07:27,050 --> 00:07:31,160
if I just run it now, you can see that it has generated an error that says wrong number of arguments,

111
00:07:31,160 --> 00:07:33,620
as you can see right over here, wrong number of arguments.

112
00:07:33,620 --> 00:07:35,570
The given is zero and expect it as one.

113
00:07:35,580 --> 00:07:37,310
So that is known as the argument error.

114
00:07:37,520 --> 00:07:38,120
So are you.

115
00:07:38,160 --> 00:07:40,100
Here we are going to pass in that argument.

116
00:07:40,100 --> 00:07:42,000
That is going to be the name.

117
00:07:42,230 --> 00:07:44,090
So let's say it's John.

118
00:07:45,250 --> 00:07:47,630
Now, run it and right over here.

119
00:07:47,660 --> 00:07:52,990
Now you can see that it's his object of John and it says John says hello, object of Jennifer, and

120
00:07:52,990 --> 00:07:55,000
it says simply hello.

121
00:07:55,270 --> 00:08:01,000
So in the middle class, we are basically overriding the talk method in the human class because the

122
00:08:01,000 --> 00:08:01,810
Ruby Check.

123
00:08:02,860 --> 00:08:07,150
The object class first for the method before it looks in the superclass.

124
00:08:08,400 --> 00:08:15,090
That means that when we wrote the code for John Doe Dog, it it first looked at the John's class, which

125
00:08:15,090 --> 00:08:15,640
is male.

126
00:08:16,140 --> 00:08:22,830
It found the dog mattered there and it used it when we wrote the code for Jennifer the dog, the Ruby

127
00:08:22,830 --> 00:08:25,400
first looked at the Jennifer class, which is female.

128
00:08:25,650 --> 00:08:28,170
It did not find a dog method there.

129
00:08:28,200 --> 00:08:32,040
So it continued to look in the female superclass that is human.

130
00:08:32,250 --> 00:08:35,580
It found a dog method in the human class that is the superclass.

131
00:08:35,580 --> 00:08:36,810
And it used that.

132
00:08:37,050 --> 00:08:40,980
So we would talk about this method, look a lot more in-depth in a bit.

133
00:08:42,390 --> 00:08:47,470
So right over here, so that was what you can just call it the priority basis.

134
00:08:47,490 --> 00:08:52,680
So if a function is present in the class itself for which the object is created, then that function

135
00:08:52,680 --> 00:08:53,430
is going to get used.

136
00:08:53,430 --> 00:09:00,720
But if you have a function in the superclass and you are calling a function and that does not exist

137
00:09:00,720 --> 00:09:07,800
in the class for which the object is created, then the function for the superclass is going to get

138
00:09:07,800 --> 00:09:08,210
used.

139
00:09:08,220 --> 00:09:13,330
But if there is a function in both, as you can see that we have got a talk in mail as well as a talk

140
00:09:13,350 --> 00:09:13,860
in human.

141
00:09:13,860 --> 00:09:18,470
But since this is the parent classes is child class and we are creating the object for this middle class.

142
00:09:18,720 --> 00:09:23,310
So that's why when we write in talk, this over here is going to get access.

143
00:09:23,310 --> 00:09:25,860
But for this female class, we don't have any kind of talk.

144
00:09:26,100 --> 00:09:30,170
So the second priority function that is for the human class that iStock is going to get access.

145
00:09:31,580 --> 00:09:37,910
So inheritance can be a great way to remove duplicate education in your code base.

146
00:09:38,210 --> 00:09:42,990
Now there is an acronym that you will see more often in Ruby Community that is dry.

147
00:09:43,190 --> 00:09:46,020
This stands for Don't Repeat Yourself.

148
00:09:46,040 --> 00:09:51,530
It means that if you find yourself writing the same logic over and over again in your programs, then

149
00:09:51,530 --> 00:09:55,670
there are ways to extract that logic to one place for reuse.

150
00:09:56,840 --> 00:10:03,040
Then comes the use of the super keyword now Ruby provide us with a built in function that is called

151
00:10:03,040 --> 00:10:08,140
a super that allow us to call methods up the inheritance hierarchy.

152
00:10:08,140 --> 00:10:13,870
When you call super from within a method, it will search the inheritance hierarchy for a method by

153
00:10:13,870 --> 00:10:15,750
the same name and then invoke it.

154
00:10:16,060 --> 00:10:19,470
So let's see a quick example of how this is going to work.

155
00:10:19,780 --> 00:10:20,530
So inhale.

156
00:10:20,530 --> 00:10:24,650
What we are going to do is that we will just remove this from this stuff right from here.

157
00:10:25,030 --> 00:10:29,600
We don't need this and this has to be indented right over here.

158
00:10:30,280 --> 00:10:30,810
All right.

159
00:10:30,940 --> 00:10:33,520
So now we have got this dark abargil.

160
00:10:33,520 --> 00:10:38,500
We will just remove these from here as well because we don't need them as well.

161
00:10:38,510 --> 00:10:40,570
We don't need the object for Jennifer for now.

162
00:10:40,720 --> 00:10:42,510
So we just remove that as well.

163
00:10:43,930 --> 00:10:47,410
Just remove this as well so that things are much more easier to understand.

164
00:10:47,770 --> 00:10:48,280
All right.

165
00:10:48,400 --> 00:10:52,900
So now what we have is that we have human class, then we have a middle class.

166
00:10:52,900 --> 00:10:57,850
And finally we are creating an object which do not accept any kind of arguments now.

167
00:10:58,330 --> 00:11:03,300
So, right to hear what we are going to do is that we are going to make use of these superguy word.

168
00:11:03,460 --> 00:11:07,990
So instead of the self-taught man, what we are going to write and we are going to write and super says

169
00:11:08,110 --> 00:11:08,630
hello.

170
00:11:09,100 --> 00:11:12,520
Now, what is going to be done using this?

171
00:11:13,720 --> 00:11:18,520
Now, when you write in, John, equal to Milhaud knew the object for John is going to get created.

172
00:11:18,800 --> 00:11:23,710
It is going to check in the middle class if it has any kind of initialize function since it has not

173
00:11:23,710 --> 00:11:25,600
said is going to just move on to the next line.

174
00:11:25,900 --> 00:11:31,210
Now, when you write in, John, that it is going to look for the talk method first in the middle class

175
00:11:31,450 --> 00:11:33,820
and since it is going to find that talk function.

176
00:11:33,830 --> 00:11:36,630
So that's why it is not going to go for this dial function.

177
00:11:36,640 --> 00:11:41,110
But here comes the part of this super keyword.

178
00:11:41,440 --> 00:11:46,990
Now, when it moves into this dark function, it seems that the first time that encounter was the superguy

179
00:11:46,990 --> 00:11:47,200
word.

180
00:11:47,200 --> 00:11:52,210
And when you see the super key word, what it is going to do is that it is going to just go towards

181
00:11:52,480 --> 00:11:57,670
the superclass, it is going towards the superclass, and it is going to print everything that is a

182
00:11:57,670 --> 00:11:58,990
part of the superclass.

183
00:11:59,910 --> 00:12:05,520
After it is done with all that stuff from the superclass, it is going to come back and continue on

184
00:12:05,520 --> 00:12:09,520
its execution rate from here where it has left the superguy works.

185
00:12:09,520 --> 00:12:11,940
That is going to bring down says hello, Octodad.

186
00:12:12,420 --> 00:12:15,120
So if you just run the squad for now.

187
00:12:16,480 --> 00:12:18,710
You can see that it says hello, says hello.

188
00:12:18,730 --> 00:12:22,030
Now, the reason behind this is super is going to get going.

189
00:12:22,060 --> 00:12:25,540
It is going to go right to a hearing since this was whatever was received.

190
00:12:25,750 --> 00:12:32,020
So it is going to just have this Abargil, since we have got the Spottswood that so it is going to rent

191
00:12:32,260 --> 00:12:32,620
this.

192
00:12:32,620 --> 00:12:32,950
Hello.

193
00:12:32,950 --> 00:12:37,000
Only after printing that it is going to come back towards the middle class and it is going to finally

194
00:12:37,000 --> 00:12:38,620
print says hello.

195
00:12:38,830 --> 00:12:42,570
Now let's say we have one more statement over here that say let's say my name.

196
00:12:43,060 --> 00:12:48,100
So if you now run this, you can see that you have got first my name, then it says hello, says hello.

197
00:12:48,100 --> 00:12:50,700
And let's say you have a statement right up to this as well.

198
00:12:51,160 --> 00:12:56,890
That is that said, Territorials, run this now and you can see that you have got Ulmarra and you have

199
00:12:56,890 --> 00:12:58,750
got tutorials as well.

200
00:12:58,780 --> 00:13:01,870
Now you can see one more important thing, Oakhill.

201
00:13:02,890 --> 00:13:07,960
You can see that this line, Abargil, which was used over here that has been eliminated.

202
00:13:08,170 --> 00:13:14,710
Now, the reason behind this is that basically this statement over here is going to print on whatever

203
00:13:14,720 --> 00:13:17,530
is going to get written from the function and the written statement.

204
00:13:17,530 --> 00:13:22,960
If you just remember functions then in that you have a word about written statement and you know that

205
00:13:22,960 --> 00:13:25,780
if you don't use the written word, then it is going to return.

206
00:13:25,780 --> 00:13:31,630
Whatever was executed for the latest execution since the latest execution over here is there.

207
00:13:31,660 --> 00:13:33,650
So that's why this is not going to get printed.

208
00:13:33,670 --> 00:13:37,120
So if you want that to get printed, you have to just remove this line from here.

209
00:13:37,450 --> 00:13:39,610
Ronda's and now it is going to run.

210
00:13:39,610 --> 00:13:43,340
It is going to say my name and then it is going to say hello, says hello.

211
00:13:43,600 --> 00:13:45,550
So we'll just remove this from here.

212
00:13:45,700 --> 00:13:49,030
And right over here we are going to write in my name.

213
00:13:50,490 --> 00:13:54,780
Now run this and now it says Homeira says hello to all.

214
00:13:56,220 --> 00:14:04,050
So in this example, we have created a simple human glass with the talk instance method, we then created

215
00:14:04,080 --> 00:14:10,650
the male which subclauses human, also with a dog instant's method to override the inherited origin.

216
00:14:10,980 --> 00:14:17,550
However, in the subclause dog method, we use super to invoke the dog method from the superclass human.

217
00:14:17,700 --> 00:14:22,400
And then we extend the functionality by appending some text to the result.

218
00:14:23,130 --> 00:14:27,000
Another, more common way of using super is with initialised.

219
00:14:27,010 --> 00:14:29,970
So let's see an illustration for that as well.

220
00:14:30,270 --> 00:14:37,260
So in this human class, what we are going to do is that we will just remove this dog function from

221
00:14:37,260 --> 00:14:41,970
here and we are going to use the attribute accessor again.

222
00:14:43,960 --> 00:14:49,090
And we are going to write a name that is going to get received and right away here we are going to have

223
00:14:49,090 --> 00:14:53,260
our constructor function, that is what initialise.

224
00:14:53,740 --> 00:14:58,840
And in that, what you're going to do is that you're going to just assign the instance variable that

225
00:14:58,840 --> 00:15:02,100
is at the rate of naming which name you can write in subdomain.

226
00:15:02,110 --> 00:15:07,330
But since here we are using the concept of the instance variable, that's why you have to write in at

227
00:15:07,330 --> 00:15:08,320
the rate of nameable here.

228
00:15:08,320 --> 00:15:09,850
Just end the statement Abargil.

229
00:15:10,210 --> 00:15:15,040
And in the middle class, what you're going to do is that you are again going to have your initialize

230
00:15:15,040 --> 00:15:15,810
function over here.

231
00:15:16,270 --> 00:15:18,940
So we will not have this over here.

232
00:15:18,950 --> 00:15:19,810
We will have.

233
00:15:20,610 --> 00:15:21,900
Initialise Ohayon.

234
00:15:23,490 --> 00:15:28,590
And in the initialise function, what we are going to do is that we are also going to receive an argument

235
00:15:29,340 --> 00:15:31,440
for this middle class initialize function as well.

236
00:15:31,450 --> 00:15:32,880
That is going to be Dekalog.

237
00:15:33,240 --> 00:15:37,380
So in place of this, we are going to simply ride in super.

238
00:15:38,620 --> 00:15:43,450
Not with a capital as with a small s and after that, what are you going to do is that you are going

239
00:15:43,450 --> 00:15:46,090
to initialize the value of what is working to write in color.

240
00:15:47,120 --> 00:15:49,920
Equal to culo, good enough.

241
00:15:50,090 --> 00:15:56,620
Now, what you are going to do is that you are going to just move down and ride to a hill.

242
00:15:56,630 --> 00:16:00,600
What you're going to do is that you are going to create one more object.

243
00:16:00,950 --> 00:16:06,140
So let's say the person you are going to call in, let's say he is a brown person.

244
00:16:06,440 --> 00:16:07,920
So you're going to ride in, John.

245
00:16:07,940 --> 00:16:09,530
So you want to know the color for John.

246
00:16:09,540 --> 00:16:14,570
So if you are going to ride in John, equal to male dot knew and in the parameters.

247
00:16:16,280 --> 00:16:19,110
You are simply going to pass in the glow for that person.

248
00:16:19,130 --> 00:16:24,740
Let's say he's brown, so that is going to get brown and you are going to now not right in this of her,

249
00:16:24,770 --> 00:16:28,640
because this is what is not needed since the initialised function is the constructor function.

250
00:16:28,640 --> 00:16:32,100
And that is going to automatically get called when you are creating an object.

251
00:16:32,360 --> 00:16:34,160
So let's just run this code.

252
00:16:35,690 --> 00:16:36,050
All right.

253
00:16:36,050 --> 00:16:40,100
My bad we have to initialize nameable here and now run this code.

254
00:16:40,550 --> 00:16:42,560
Now it has been executed successfully.

255
00:16:42,830 --> 00:16:48,900
So the interesting concept we want to explain is basically the use of super in the middle class.

256
00:16:49,190 --> 00:16:52,570
Now, in this example, we are using super with no arguments.

257
00:16:52,580 --> 00:16:58,550
However, the initialize method where a super is being used takes an argument and adds a new twist to

258
00:16:58,550 --> 00:17:00,620
how super is invoked here.

259
00:17:00,620 --> 00:17:05,870
In addition to the default behavior, Super automatically forwards the argument that purpose to the

260
00:17:05,870 --> 00:17:13,070
method from which super is called add this point super pass the color argument in the initialized defined

261
00:17:13,700 --> 00:17:18,420
initialize function that is defined in the subclass to that of the human super class and invoke it.

262
00:17:18,830 --> 00:17:26,170
That explains the presence of at the rate of name equal to Brown when the John instance is created.

263
00:17:26,420 --> 00:17:31,240
Finally, the subclass initialize continues to set the color instance variable.

264
00:17:31,850 --> 00:17:39,620
Now, when called with specific arguments, the super the specified arguments will be sent up the method

265
00:17:39,620 --> 00:17:40,300
lookup chain.

266
00:17:40,520 --> 00:17:43,290
So let's see an example for this as well.

267
00:17:43,910 --> 00:17:46,700
So down here we are going to create one more function.

268
00:17:46,820 --> 00:17:48,410
Sorry, not a function at last.

269
00:17:48,410 --> 00:17:54,590
We are going to create a class that is students and we are going to inherit that from the human class

270
00:17:54,590 --> 00:17:54,920
as well.

271
00:17:54,920 --> 00:17:56,490
That is the current class for that as well.

272
00:17:56,720 --> 00:18:01,970
So in this, what you are going to do is that you are going to have a constructor function and in that

273
00:18:01,970 --> 00:18:08,120
constructor function, what you are going to do is that you are going to receive in two arguments.

274
00:18:08,120 --> 00:18:11,690
The first one is going to be the age and the second one is going to be the name.

275
00:18:12,700 --> 00:18:18,850
Now, in this constructor function, what we are going to do is that we are going to write in super

276
00:18:18,850 --> 00:18:20,980
and we are going to pass in the name.

277
00:18:22,440 --> 00:18:28,200
Right, talk to this super glass now, since we are having this initialize function from which we are

278
00:18:28,200 --> 00:18:28,950
calling this super.

279
00:18:28,980 --> 00:18:33,930
So this is going to call the initialize function for the superclass that is basically this initialize

280
00:18:33,930 --> 00:18:35,970
function in which we are passing in the name.

281
00:18:35,970 --> 00:18:39,040
And that name is going to get received in this argument right over here.

282
00:18:39,540 --> 00:18:45,660
So right down here, what we are going to do is that as what age we are going to simply define it with

283
00:18:45,660 --> 00:18:49,050
the instance variable and we are going to end this function.

284
00:18:49,060 --> 00:18:50,430
We are going to end this class.

285
00:18:52,240 --> 00:18:58,720
So in the calling pod, what we are going to do is that we are going to write in students.

286
00:19:00,510 --> 00:19:08,280
Don't know, and we are going to pass in the age that is, let's say 20 and we are going to pass in

287
00:19:08,280 --> 00:19:10,800
the name, let's say the name is Mitt.

288
00:19:13,310 --> 00:19:19,290
And now if you just run the school, it is going to execute very successfully because now this functional

289
00:19:19,290 --> 00:19:25,640
o'haire disclosable here, that is students that is being inherited from the superclass human has initialised

290
00:19:25,640 --> 00:19:26,210
to worry about.

291
00:19:26,220 --> 00:19:30,050
The first one is the edge and the second one is the name and to initialize the name.

292
00:19:30,050 --> 00:19:36,140
What it has done is that it has gone straight into the middle class writable hill, sorry, the human

293
00:19:36,140 --> 00:19:36,410
class.

294
00:19:36,410 --> 00:19:40,270
Let's just remove this from here because it has no usable here now.

295
00:19:40,700 --> 00:19:47,450
So what it is doing is that it is calling the initialize function for the superclass and it is passing

296
00:19:47,450 --> 00:19:48,610
in the name which we are passing.

297
00:19:48,620 --> 00:19:55,070
So the name is first going to get passed into the student class right over here and the initialize function.

298
00:19:55,070 --> 00:19:58,400
It is going to have this received in its parameter over here.

299
00:19:58,400 --> 00:20:03,680
But since the first line says super, that is going to call the parent class and the parent class.

300
00:20:03,690 --> 00:20:08,900
Since the constructor function is expecting one argument, that argument is going to be the name.

301
00:20:09,080 --> 00:20:12,440
We are going to pass it and that is going to get initialized right over there.

302
00:20:12,560 --> 00:20:17,510
And we are going to initialize the age right to a hill and age is going to simply get initialized.

303
00:20:17,510 --> 00:20:22,370
But for the name, the job is going to get complex because the super supercute is being used over here.

304
00:20:23,410 --> 00:20:30,160
So this was very similar to our previous example, with the difference being that Super takes an argument

305
00:20:30,160 --> 00:20:33,880
against the past in argument is sent into the superclass.

306
00:20:34,100 --> 00:20:40,990
Consequently, in this example, when a student class is created, the past and name argument that is

307
00:20:40,990 --> 00:20:47,830
made in response to the super class and said to the advocate of name instance variable, then comes

308
00:20:47,830 --> 00:20:49,670
the concept of mixing in modules.

309
00:20:49,840 --> 00:20:54,500
Now another way to dry up your code in Ruby is to use modules.

310
00:20:54,530 --> 00:20:59,650
Now we have already seen a little bit of how to use modules, but we will give a few more examples of

311
00:20:59,650 --> 00:21:00,040
Ohayon.

312
00:21:00,430 --> 00:21:05,680
Now, extracting common methods to a super class like we did in the previous section is a great way

313
00:21:05,680 --> 00:21:08,500
to model concepts that are naturally hierarchical.

314
00:21:08,800 --> 00:21:10,510
We give the example of humans.

315
00:21:10,510 --> 00:21:16,060
We have a generic super class called human that can keep all basic behavior of all humans.

316
00:21:16,070 --> 00:21:22,570
We can then expand on the model a little bit more and have, let's say, a bi subclass of human.

317
00:21:22,720 --> 00:21:28,510
And we can imagine the entire class hierarchy to look something like the figure we have explained in

318
00:21:28,510 --> 00:21:30,680
the previous tutorials as well.

319
00:21:31,330 --> 00:21:39,310
So what we have shown or what they are, is that pure class based inheritance is what is basically you

320
00:21:39,310 --> 00:21:41,470
have a parent, then you have a child up to that.

321
00:21:41,470 --> 00:21:42,980
You can have multiple child as well.

322
00:21:43,240 --> 00:21:48,550
So if you remember, the goal of this was to put in the right behavior in the right class.

323
00:21:48,550 --> 00:21:51,400
So we don't need to repeat code in multiple classes.

324
00:21:51,610 --> 00:21:59,010
We can imagine that all fish objects are related to humans that live in the water.

325
00:21:59,320 --> 00:22:03,460
So perhaps a swim method should be in the fish class.

326
00:22:03,640 --> 00:22:09,820
You can also imagine that all boys object will have, let's say, warmblood, so we can create a method

327
00:22:09,820 --> 00:22:15,150
that is called as warm blooded now in the boys class and have it return.

328
00:22:15,160 --> 00:22:15,410
True.

329
00:22:15,430 --> 00:22:21,820
Therefore, the female and the male object will have the access to warm blooded method which is automatically

330
00:22:21,820 --> 00:22:24,760
inherited from the boys by the female and male classes.

331
00:22:24,760 --> 00:22:28,980
But they don't have the access to the methods in the fish class.

332
00:22:29,320 --> 00:22:35,110
This type of hierarchical hierarchical modelling works to some extent, but there are always exceptions.

333
00:22:35,110 --> 00:22:39,850
For example, you put in, let's say, the swim method in the fish class, but some boys can swim as

334
00:22:39,850 --> 00:22:40,120
well.

335
00:22:40,420 --> 00:22:44,860
We don't want to move the same method into humans because not all humans can swim.

336
00:22:44,860 --> 00:22:50,610
And we don't want to create another swim method and male because that violates the dry principle for

337
00:22:50,620 --> 00:22:51,820
Gunnarsson such as these.

338
00:22:51,820 --> 00:22:58,300
We would like to group them into a module and then mix in that module the classes that require those

339
00:22:58,300 --> 00:22:58,900
behaviour.

340
00:22:59,170 --> 00:23:00,900
So it'll give you an example of this.

341
00:23:00,910 --> 00:23:06,670
What are you going to do is that you are going to create a module that is swimmable and whatever class

342
00:23:06,670 --> 00:23:10,260
is required, that module, you are going to just use them there and whatever.

343
00:23:10,270 --> 00:23:11,500
I don't require them.

344
00:23:11,500 --> 00:23:13,300
You are going to not use them or whatever.

345
00:23:13,690 --> 00:23:22,150
So, for example, let's say you have got modular Wajir that is swimming and in the swimming module

346
00:23:22,150 --> 00:23:25,060
you will have a function that is swim.

347
00:23:26,080 --> 00:23:27,670
And in here you are going to ride.

348
00:23:27,670 --> 00:23:31,210
And I am swimming.

349
00:23:32,920 --> 00:23:34,720
Just endless function.

350
00:23:36,590 --> 00:23:44,090
Andy, and finally end this module as well, and then you are going to have this class human, but this

351
00:23:44,090 --> 00:23:46,510
class human is now going to contain nothing.

352
00:23:46,880 --> 00:23:53,300
So we are going to just write in something like this or to just write and let's say a call of a hill

353
00:23:53,300 --> 00:23:58,130
and then you can write in this end of a hill right at the top hill.

354
00:24:00,610 --> 00:24:02,380
So we're going to just write an and help.

355
00:24:02,710 --> 00:24:05,550
So this was our last human we have just emptied that glass.

356
00:24:05,560 --> 00:24:06,950
We don't need anything Cohill.

357
00:24:07,240 --> 00:24:15,520
So now let's say we have the glass of the fish and let's say it has been inherited from human glass

358
00:24:15,790 --> 00:24:17,950
and since all the fish can swim.

359
00:24:17,950 --> 00:24:20,320
So that's why we are going to write and include.

360
00:24:21,820 --> 00:24:22,630
Swimmable.

361
00:24:24,940 --> 00:24:28,870
Not swimmable, but we are going to ride in swimming, which we have misspelled, I guess.

362
00:24:28,900 --> 00:24:32,650
Well, hell, that is going to be swimming, something like this.

363
00:24:33,460 --> 00:24:39,400
And right over here, we are going to use that now so we can try as I am I n g.

364
00:24:41,040 --> 00:24:47,030
I guess that's just about correct, and we are going to just end this fish glass with him.

365
00:24:47,290 --> 00:24:52,740
Now we are going to have our boys class and we are going to have a female class as well.

366
00:24:53,110 --> 00:24:54,900
Or you can just write and.

367
00:24:55,950 --> 00:25:01,740
Lost boys, and you are going to ride and human here, since this is being inherited from the human

368
00:25:01,740 --> 00:25:07,290
class and in that class, what you are going to do is that you are going to just end this war here.

369
00:25:07,650 --> 00:25:09,660
You are going to have your class.

370
00:25:11,400 --> 00:25:12,510
Female Bahir.

371
00:25:15,020 --> 00:25:21,110
That is, let's say, inherited from the boy's class, and you're going to just end that over here as

372
00:25:21,110 --> 00:25:21,440
well.

373
00:25:22,400 --> 00:25:26,420
Now, what you are going to do is that you are going to write in class.

374
00:25:27,780 --> 00:25:28,410
Men.

375
00:25:31,530 --> 00:25:38,130
And you're going to ride in is extracted from the boy's glass and what you are going to do is that you

376
00:25:38,130 --> 00:25:39,540
are going to ride and include.

377
00:25:41,410 --> 00:25:43,210
Swimming in that.

378
00:25:44,300 --> 00:25:46,550
And you are going to finally end this war here.

379
00:25:48,160 --> 00:25:53,230
And now don't hear what you can do is that you can use the fish and the male objects because they can

380
00:25:53,230 --> 00:25:59,980
swim, but objects of other classes won't be able to swim because the middle class that is being inherited

381
00:25:59,980 --> 00:26:02,150
from the boy's class includes swimming.

382
00:26:02,170 --> 00:26:06,770
So that's why all males can swim now and all fish can for sure swim.

383
00:26:07,060 --> 00:26:09,160
So you are going to ride in, John.

384
00:26:10,810 --> 00:26:11,680
Equal to.

385
00:26:13,320 --> 00:26:18,420
Mail dot new, and that is going to create an object for the middle class right over here.

386
00:26:20,240 --> 00:26:25,520
And to create an object for the first class, you are going to, let's say, a name of fish that is

387
00:26:25,520 --> 00:26:28,250
normal and you are going to write an.

388
00:26:30,640 --> 00:26:34,060
Fish not new, so that is going to create an object for the fish.

389
00:26:34,310 --> 00:26:37,950
And finally, you are going to create an object for the female class as well.

390
00:26:37,960 --> 00:26:40,980
That is going to be Jennifer equal to.

391
00:26:42,050 --> 00:26:47,900
Female daughton, so we have created three object, the first one is John, which we have created for

392
00:26:48,260 --> 00:26:52,550
the middle class, then we have created Neval for the first class and then finally, we have created

393
00:26:52,550 --> 00:26:55,610
Jennifer for the female class.

394
00:26:55,910 --> 00:26:58,910
And I hope that you have spelled it correct.

395
00:26:58,940 --> 00:26:59,690
Yes, we have.

396
00:27:00,080 --> 00:27:05,470
So the next thing you have to do is that you have to call in the same function for all of these.

397
00:27:05,780 --> 00:27:07,490
So if you write in.

398
00:27:09,670 --> 00:27:12,130
John Dodd, swim, run, this underscored.

399
00:27:14,530 --> 00:27:19,300
All right, it says that the glass module name must be a constant model, assuming, yes, I guess this

400
00:27:19,300 --> 00:27:21,010
should be a capital S..

401
00:27:21,010 --> 00:27:24,690
So I guess that's one more thing added to your information.

402
00:27:24,700 --> 00:27:26,920
The name of the module should always be a constant should.

403
00:27:27,070 --> 00:27:31,770
So it must always start with a capital letter or it should be the entire capital letter.

404
00:27:32,380 --> 00:27:36,310
So just change all of these swings to a capital s capital S..

405
00:27:36,310 --> 00:27:37,090
Give it a rest now.

406
00:27:37,090 --> 00:27:40,350
Run this and now you can see that it has run without any kind of error.

407
00:27:40,690 --> 00:27:42,490
Just add a box with it.

408
00:27:42,490 --> 00:27:47,920
Since we are returning a statement, as you can see, that this is what is basically being redundant.

409
00:27:48,280 --> 00:27:51,730
So now run this and you can see that it says I am swimming.

410
00:27:51,730 --> 00:27:59,200
So all kind of mails are basically now allowed to swim because we have included this module swimming

411
00:27:59,200 --> 00:28:00,070
in the main class.

412
00:28:00,070 --> 00:28:05,080
So that's why when we created the e-mail object and call it the swim function, using that object we

413
00:28:05,080 --> 00:28:07,990
have got, I am swimming now if you use it for.

414
00:28:09,620 --> 00:28:12,850
The fish glass that was created using animal objects.

415
00:28:12,890 --> 00:28:17,920
We are going to write animal swim around this and it is again going to say I am swimming.

416
00:28:18,080 --> 00:28:24,140
And finally, if you create it for the female class, which was Jennifer Dodd swims.

417
00:28:24,140 --> 00:28:30,380
But since, as you can see that we do not have any kind of module that is named swimming included right

418
00:28:30,380 --> 00:28:30,780
over here.

419
00:28:30,800 --> 00:28:35,090
So if you now run the score, you can see that it has generated an error that says undermind method

420
00:28:35,090 --> 00:28:38,660
swim for female because female is a not not a part of this.

421
00:28:38,780 --> 00:28:46,100
So using modules to group common behavior allow us to build a more powerful, flexible and dry code.

422
00:28:47,610 --> 00:28:54,510
Now, one more thing you have notable here is a common naming convention for Ruby is to use the Abels

423
00:28:54,510 --> 00:28:58,680
to fix on whatever verb describes the behavior that the modulars model.

424
00:28:58,680 --> 00:29:01,450
And you can see this convention with our swimmable module.

425
00:29:01,860 --> 00:29:07,920
Likewise, we could use we could name a module that describes, let's say, walking as walkable.

426
00:29:08,160 --> 00:29:10,550
Not all modules are named in this manner.

427
00:29:10,560 --> 00:29:15,920
However, it is quite common and it is also a good approach by a good programmers.

428
00:29:16,170 --> 00:29:21,060
So whenever you are writing your code, always do things that do that thing.

429
00:29:21,090 --> 00:29:26,610
So, for example, if you are doing this for a swimming thing, so you have to name this modular swimming

430
00:29:26,610 --> 00:29:31,560
and you have named this function as swim so that someone who is reading your code can easily understand

431
00:29:31,560 --> 00:29:36,390
what is going on, because if you just name it to walking and in here you will create the object walk.

432
00:29:36,390 --> 00:29:38,190
And right here you are writing and I am swimming.

433
00:29:38,190 --> 00:29:40,220
So that is just going to be absurd.

434
00:29:40,650 --> 00:29:41,570
You can do it.

435
00:29:41,580 --> 00:29:45,660
It is going to run perfectly, but that is not a part of a good program.

436
00:29:45,910 --> 00:29:48,180
So this is basically a suggestion only.

437
00:29:49,190 --> 00:29:54,530
So in this story so far, we have covered about inheritance and we have seen how to use module's with

438
00:29:54,530 --> 00:30:00,560
that now to talk about inheritance versus module's, now that you know, the two primary ways that we

439
00:30:00,560 --> 00:30:05,810
implement inheritance, the class inheritance is the traditional way to think about inheritance.

440
00:30:06,080 --> 00:30:09,110
One type inherits the behavior of another type.

441
00:30:09,320 --> 00:30:14,600
Now, the result is a new type that's best suited to specialize is the type of the superclass.

442
00:30:14,790 --> 00:30:18,620
The other form is sometimes called as the interface inheritance.

443
00:30:18,890 --> 00:30:22,020
This is where mixed in modules come into play.

444
00:30:22,340 --> 00:30:28,730
The class does not inherit and from another type, but instead inherit the interface provided by the

445
00:30:28,730 --> 00:30:29,630
mixin module.

446
00:30:29,630 --> 00:30:33,680
In this case, the result is not a specialized type with respect to the module.

447
00:30:33,960 --> 00:30:37,010
Now you may wonder when to use class inheritance versus mix.

448
00:30:37,010 --> 00:30:44,060
And here are a couple of good things and suggestion you can consider when evaluating these choices between

449
00:30:44,840 --> 00:30:46,370
makes in an inheritance.

450
00:30:46,700 --> 00:30:52,770
The first one is that you can only subclause from one class that is about class inheritance.

451
00:30:52,770 --> 00:30:59,510
So you can only subclass class inheritance from one class, so you can mix in as many modules as you

452
00:30:59,510 --> 00:31:01,430
would like for interface inheritance.

453
00:31:01,460 --> 00:31:07,040
So if you're dealing with single classes, then what you can do is that you can use in class inheritance.

454
00:31:07,050 --> 00:31:11,600
But if you're using makes sense, then what are you can you can do is that you can use the interface

455
00:31:11,600 --> 00:31:12,800
inheritance concept.

456
00:31:14,050 --> 00:31:21,280
Then the second suggestion is that if there is and is a relation, the last inheritance is usually the

457
00:31:21,280 --> 00:31:22,120
correct choice.

458
00:31:22,360 --> 00:31:28,330
If there is has a relation interface, inheritance is generally a better choice.

459
00:31:28,330 --> 00:31:32,470
For example, a male is a human and it has an ability to say.

460
00:31:33,040 --> 00:31:36,580
And the third suggestion is that you cannot instantiate modules.

461
00:31:36,700 --> 00:31:40,970
Modules are used only for name spacing and grouping common methods together.

462
00:31:41,410 --> 00:31:48,670
So as you get better at object oriented design, you will start to develop a feel for when to use class

463
00:31:48,730 --> 00:31:52,400
inheritance and when to use mixing in modules.

464
00:31:52,870 --> 00:32:00,010
So I guess that's it with this tutorial in the next drill, we are going to continue on with inheritance

465
00:32:00,010 --> 00:32:04,430
and we are going to see about method look apart and a lot of other things.

466
00:32:04,450 --> 00:32:05,880
So for this tutorial, that's it.

467
00:32:05,890 --> 00:32:07,480
Thank you so much, guys, for watching.

468
00:32:07,600 --> 00:32:10,330
And I'll see you guys in the next tutorial.
