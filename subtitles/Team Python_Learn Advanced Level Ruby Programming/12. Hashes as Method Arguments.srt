1
00:00:00,550 --> 00:00:01,540
Hey, guys, what's up?

2
00:00:01,570 --> 00:00:04,940
This is a and I welcome you to an editorial on this course on Ruby.

3
00:00:04,960 --> 00:00:11,290
And in this tutorial, we are going to see that how hashas can be parsed as arguments to a function.

4
00:00:11,560 --> 00:00:14,230
Now, there are several scenarios for this.

5
00:00:14,250 --> 00:00:20,170
It's it turned out that in Ruby, if you call a method and pass in a hash as the last argument, it

6
00:00:20,170 --> 00:00:22,960
is acceptable to write the hash without the curly brackets.

7
00:00:22,990 --> 00:00:29,950
So if you follow this rule and you sprinkle in a few key value pairs, Ruby will interpret all of the

8
00:00:29,950 --> 00:00:35,260
key value pair as one hash, because you know that to separate two arguments, you have to specify a

9
00:00:35,260 --> 00:00:39,620
common between and to specify two different key value pairs.

10
00:00:39,640 --> 00:00:41,750
You have to also specify a comma in between.

11
00:00:41,770 --> 00:00:49,870
So if the parameter that is passed to a function is hash and you have, let's say, multiple key value

12
00:00:49,870 --> 00:00:54,100
pairs and that are the first argument and you have got some other argument after that.

13
00:00:54,250 --> 00:00:55,870
So that is going to generate error.

14
00:00:55,870 --> 00:01:02,350
If you want to pass a hash as an argument to a function, then that has to be the last argument, because

15
00:01:02,350 --> 00:01:09,400
the first arguments that are, for example, a string integer or any kind of data type that are going

16
00:01:09,400 --> 00:01:12,190
to be treated as the first, second and so on arguments.

17
00:01:12,190 --> 00:01:17,650
And the last argument is going to be treated as the hash because it is expecting the function is going

18
00:01:17,650 --> 00:01:19,240
to only expect one more argument.

19
00:01:19,240 --> 00:01:22,760
And you have got three, let's say, key value pairs of well here.

20
00:01:22,930 --> 00:01:30,280
So all of these key value pairs, the editor will interpret itself as a hash and it will treat it as

21
00:01:30,280 --> 00:01:30,670
a hash.

22
00:01:31,000 --> 00:01:37,660
So startled with a very simple example in which we have got only one argument and we pass that argument

23
00:01:37,660 --> 00:01:38,260
as a hash.

24
00:01:38,260 --> 00:01:42,490
So it is going to be something like, for example, if to start on with.

25
00:01:43,880 --> 00:01:45,500
Defining a function, let's say.

26
00:01:47,440 --> 00:01:52,780
X is the name of the function and is expecting only one argument, A.

27
00:01:56,060 --> 00:02:01,160
And in this function where we're going to do is that we are going to write and puts it on glass, so

28
00:02:01,160 --> 00:02:06,560
it is going to print out the glass, which means that if it is a hash, this over here is going to print

29
00:02:06,560 --> 00:02:09,760
out hash in the output added.

30
00:02:10,040 --> 00:02:14,540
Now we are going to also write in, puts it to print out the hash, whatever it is.

31
00:02:14,870 --> 00:02:20,240
And we are going to just end this function now down here where we call this function X, what we are

32
00:02:20,240 --> 00:02:24,410
going to do is that we are going to specify these brackets.

33
00:02:24,410 --> 00:02:26,630
If you don't specify them, it is even going to work.

34
00:02:27,080 --> 00:02:31,580
And in here you are going to specify a call and one.

35
00:02:33,960 --> 00:02:36,900
We call in to see Colin Tree.

36
00:02:37,890 --> 00:02:39,780
And let's just change.

37
00:02:41,230 --> 00:02:48,550
This name to be and this one to see and this one to these, because we already have this perimeter as

38
00:02:48,550 --> 00:02:52,110
air, so we won't specify any value of having the KIA.

39
00:02:52,480 --> 00:02:54,340
So let's just run this code.

40
00:02:55,610 --> 00:03:01,220
And as you can see, that puts it on the glass has printed out cash, which means that this argument,

41
00:03:01,220 --> 00:03:04,660
which we have passed into this function X has been treated as a hedge.

42
00:03:04,670 --> 00:03:10,460
That's why puts it on the glass, has printed up cash here and puts it has printed out the entire hash,

43
00:03:10,460 --> 00:03:13,850
as you can see, be one, two and D three.

44
00:03:14,450 --> 00:03:17,400
Now, let's say you have to pass in two arguments.

45
00:03:17,400 --> 00:03:20,360
So what is going to be the case for this function now?

46
00:03:20,570 --> 00:03:23,660
So what you're going to do over here is that you will specify.

47
00:03:25,120 --> 00:03:29,980
One more argument, let's say B and down here, you're going to ride in boats.

48
00:03:31,590 --> 00:03:34,630
Beat out glass and you are going to ride in boats as well.

49
00:03:34,950 --> 00:03:40,040
And down here, what you are going to do is that you are going to let's say the first argument is a

50
00:03:40,110 --> 00:03:40,650
string.

51
00:03:40,670 --> 00:03:42,720
So we are going to ride and we'll do a hell.

52
00:03:43,640 --> 00:03:50,420
What a comma here, and the second argument is going to be this hash will run this court and you can

53
00:03:50,420 --> 00:03:54,890
see that you have got string, then you have got a string which has to be printed, which is stored

54
00:03:54,890 --> 00:03:56,690
in this, put it out and puts it up.

55
00:03:56,930 --> 00:04:02,030
And then down here, the second argument that is going to be stored in this parameter over here is the

56
00:04:02,030 --> 00:04:04,190
hash we have passed into this function.

57
00:04:04,400 --> 00:04:09,290
So what's Broadcloth is going to print up hash and Buzby is going to print out that hash.

58
00:04:10,250 --> 00:04:15,410
So this was the second scenario in which you have to send in two barometer's to a function in which

59
00:04:15,410 --> 00:04:20,720
the first parameter is something other than a hash and the second parameter is a hash.

60
00:04:21,050 --> 00:04:26,930
Now, the third scenario here is that what if you want to, let's say, just remove these brackets from

61
00:04:26,930 --> 00:04:27,250
here?

62
00:04:27,860 --> 00:04:31,820
So I will just remove these brackets from here, help run this code.

63
00:04:31,820 --> 00:04:34,940
And the same output is going to get generated now.

64
00:04:35,130 --> 00:04:42,830
Now, for example, if we have, let's say, three arguments, A, B and C and downhill, we will write

65
00:04:42,830 --> 00:04:43,730
inputs.

66
00:04:44,640 --> 00:04:46,380
Searoad class.

67
00:04:50,890 --> 00:04:55,720
And we are going to ride in both Seela Hill and down Hill, where we are going to do is that we are

68
00:04:55,720 --> 00:04:57,910
going to specify a third argument as well.

69
00:04:57,910 --> 00:05:01,900
And let's say the third argument is, again, strength.

70
00:05:01,900 --> 00:05:03,560
So we are going to ride in hell here.

71
00:05:04,090 --> 00:05:06,940
So apparently it looks completely fine.

72
00:05:06,940 --> 00:05:14,020
But as I explained in the Terry board, that when you want to pass in a hash to a function, then that

73
00:05:14,020 --> 00:05:19,630
has to be the last argument of a function or a function is receiving only one argument that that is

74
00:05:19,630 --> 00:05:20,470
completely fine.

75
00:05:20,470 --> 00:05:25,660
But if it is receiving multiple arguments, then the hash has to be the last argument or else it is

76
00:05:25,660 --> 00:05:29,390
going to generate an error message and see how it is going to generate that error message.

77
00:05:29,410 --> 00:05:34,960
As you can see that it has generated an error message that says a Syntex unexpected.

78
00:05:34,960 --> 00:05:35,910
There's this and this.

79
00:05:36,160 --> 00:05:41,860
So what's basically going on over here is that it is treating this to be the first argument that is

80
00:05:41,860 --> 00:05:42,910
going to be stored in this.

81
00:05:43,450 --> 00:05:47,610
Then it is treating this as the second argument that is going to be stored in this be.

82
00:05:47,620 --> 00:05:53,800
And it is going to treat this as a hash, that it is going to consider this as the third argument and

83
00:05:53,800 --> 00:05:55,540
it is going to store it in the sea.

84
00:05:56,080 --> 00:05:58,480
And this is going to consider it the fourth argument.

85
00:05:58,480 --> 00:06:03,490
And that is where the error is going to generate because it is expecting three arguments and we have

86
00:06:03,490 --> 00:06:10,480
passed in five, because if you don't specify the hash to be the last argument, then these oakhill

87
00:06:10,510 --> 00:06:17,740
each get each key value pair is going to be considered as a separate argument to this function.

88
00:06:18,310 --> 00:06:20,470
So this is totally not acceptable.

89
00:06:20,660 --> 00:06:26,020
Here you have to specify if you want to specify, let's say, a third argument still here.

90
00:06:26,170 --> 00:06:31,180
And what you have to do is then that this hashomer is going to be the last argument you can just write

91
00:06:31,180 --> 00:06:33,100
in hello here on this court.

92
00:06:33,100 --> 00:06:35,100
And that is going to run completely.

93
00:06:35,110 --> 00:06:39,550
Well, as you can see, that string is whatever is stored in error, which is worse than your court

94
00:06:39,590 --> 00:06:40,280
will go ahead.

95
00:06:40,300 --> 00:06:43,420
And you have got a string again, Hallowes, a string.

96
00:06:43,690 --> 00:06:47,830
And then the third argument is a hash and you have got your hash rate or held.

97
00:06:48,840 --> 00:06:57,390
Now, for example, we want to enclose this in curly brackets and want it to be the second or let's

98
00:06:57,390 --> 00:07:01,180
say the first argument we want, and we want some arguments after that as well.

99
00:07:01,620 --> 00:07:09,330
So if you just enclose this in these brackets and we just remove this from here.

100
00:07:10,910 --> 00:07:17,780
And we placed the third argument, hello, Hill, or underscored that it is going to run completely

101
00:07:17,780 --> 00:07:22,200
fine because now we have enclosed this in these curly brackets over here.

102
00:07:22,340 --> 00:07:28,940
And as you can see that the first whatever is stored in it is the glass of that string and the word

103
00:07:28,940 --> 00:07:30,020
over here is boiled.

104
00:07:30,320 --> 00:07:36,290
Then we have got the second argument as a hash and then you have got your hash right over here and you

105
00:07:36,290 --> 00:07:38,850
have got the third argument, a string, and then you go to hell over here.

106
00:07:39,020 --> 00:07:40,400
So if you want to.

107
00:07:41,830 --> 00:07:48,220
Boss in a harsh as an argument to a function, and also you want that not to be the last argument and

108
00:07:48,220 --> 00:07:53,980
you want some arguments even up to that, then you have close that hash Anarkali bracket.

109
00:07:54,310 --> 00:07:57,480
You can then specify, let's say, multiple hashes as well.

110
00:07:57,490 --> 00:08:03,370
For example, if you have got a fourth argument over here, you will just copy this from Hill Bastida

111
00:08:03,490 --> 00:08:04,090
Hill.

112
00:08:05,430 --> 00:08:13,590
Just change their names to F and G and downhill, sorry, uphill, we are going to specify the fourth

113
00:08:13,590 --> 00:08:14,910
argument and downhill.

114
00:08:14,910 --> 00:08:20,310
What we are going to do is that we are going to ride in boats, dot class, and we are going to ride

115
00:08:20,310 --> 00:08:21,870
in boats to run this.

116
00:08:22,050 --> 00:08:24,780
And it is going to work perfectly fine.

117
00:08:24,810 --> 00:08:27,250
This is how you're here and you have got this over here.

118
00:08:28,050 --> 00:08:33,930
Now, one more scenario here is that if you want to pass in only two arguments and both these arguments

119
00:08:33,930 --> 00:08:36,610
are hashes, then what is going to be the scenario in that case?

120
00:08:36,610 --> 00:08:39,960
So I will just remove it or two arguments.

121
00:08:39,960 --> 00:08:46,520
We will just remove these two from here as well and we will just remove these from here as well.

122
00:08:48,880 --> 00:08:55,540
All right, so for now, if I just run the school, it is going to not work and it says it has something

123
00:08:55,540 --> 00:08:57,070
unexpected.

124
00:08:58,080 --> 00:09:03,960
The integer expecting the string content or the string deb or something like things like that.

125
00:09:04,260 --> 00:09:07,620
So if you just remove these arguments from here now.

126
00:09:09,940 --> 00:09:15,850
And now run this good, it is again going to not work, so if you now again remove all of these from

127
00:09:15,850 --> 00:09:21,820
here now run this good, it is again not going to work as it says, wrong number of arguments.

128
00:09:21,820 --> 00:09:25,230
The given argument is won and expected arguments are, too.

129
00:09:25,420 --> 00:09:31,260
So you cannot pass in two hashes to a single function that has to be won.

130
00:09:31,270 --> 00:09:33,070
So we'll just remove this.

131
00:09:33,070 --> 00:09:37,670
We will remove this from this and now it is going to work perfectly fine.

132
00:09:37,960 --> 00:09:42,390
So these are some of the scenarios in which you can pass hashes to a function.

133
00:09:42,400 --> 00:09:44,020
Now, for example, you have got.

134
00:09:44,940 --> 00:09:53,970
Something that if you just like this movie in a bracket, a hill coffee, this is a comma Binsted again.

135
00:09:55,470 --> 00:10:01,890
E, F and G are the keys now if you, let's say, just enclose them.

136
00:10:03,930 --> 00:10:11,400
In these round brackets and now run it and it is not a game going to work as it says something like

137
00:10:11,870 --> 00:10:18,570
Ruby syntax error expected, Gomaa expected this and things like that because it is expecting that bracket

138
00:10:18,570 --> 00:10:21,790
to come right over here, not up to that sword.

139
00:10:22,380 --> 00:10:30,060
Or I guess we have just you just try trying this now, run this and you can see that it doesn't work

140
00:10:30,270 --> 00:10:32,130
with the same syntax error because.

141
00:10:34,500 --> 00:10:38,650
Because it is expecting this bracket to appear right over here, so if you just place double, will

142
00:10:39,090 --> 00:10:41,190
remove this from here.

143
00:10:43,160 --> 00:10:47,370
And just remove this as well, and I'll run it now, it is going to run perfectly fine.

144
00:10:47,390 --> 00:10:54,380
So these were some of the scenarios in which you can toss in a hash to a function, you know, when

145
00:10:54,380 --> 00:10:58,630
to when you want to pass in a hash, not as the last argument.

146
00:10:58,640 --> 00:11:00,440
And you have to include it in curly brackets.

147
00:11:00,440 --> 00:11:02,870
You cannot pass in to to a single function.

148
00:11:03,140 --> 00:11:07,190
And if you want to pause in a hash to a function and you don't want to and you want it to be the last

149
00:11:07,190 --> 00:11:09,470
argument, then you don't need these curly brackets.

150
00:11:09,470 --> 00:11:12,440
And moreover, you can just ignore the wrong brackets as well.

151
00:11:12,450 --> 00:11:13,710
They are not necessary at all.

152
00:11:14,330 --> 00:11:16,540
So I hope you now know all of this.

153
00:11:16,550 --> 00:11:20,150
So I guess that's it with this tutorial, and I guess that's it with this section as well.

154
00:11:20,480 --> 00:11:21,830
Thank you so much, guys, for watching.

155
00:11:21,830 --> 00:11:25,790
And I'll see you guys in the next section with some more interesting topics.

156
00:11:26,210 --> 00:11:27,800
So bye bye, Dylan.
