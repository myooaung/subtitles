1
00:00:00,390 --> 00:00:05,130
Hey, guys, what this is a marathon, and I welcome you to another Dorel on this course, on Rowby

2
00:00:05,370 --> 00:00:09,570
and in this story, we are going to be covering the case statement in Ruby.

3
00:00:09,840 --> 00:00:15,300
Now, the key statement is a motive, a broad statement, just like a switch statement in other languages.

4
00:00:15,450 --> 00:00:21,480
It provides an easy way to forward execution to different parts of the code based on the value of the

5
00:00:21,480 --> 00:00:22,230
expression.

6
00:00:22,830 --> 00:00:28,980
Now, if you talk about the syntax of a statement, it looks something like this in which you have got

7
00:00:29,340 --> 00:00:30,740
three main keywords.

8
00:00:30,750 --> 00:00:31,980
The first one is the case.

9
00:00:31,980 --> 00:00:35,520
You are then we have the one keyword and then we have the.

10
00:00:36,480 --> 00:00:38,120
Eliscu word now.

11
00:00:38,160 --> 00:00:44,880
The first is the Kierski word now it is similar to the switch key word in other programming languages,

12
00:00:45,060 --> 00:00:51,060
and it takes the variable that will be sent that will be used by the one key word that comes, the one

13
00:00:51,060 --> 00:00:51,570
key word.

14
00:00:51,610 --> 00:00:55,290
Now, it is similar to the Kierski word in other programming languages.

15
00:00:55,470 --> 00:00:57,650
It is used to match a single condition.

16
00:00:57,960 --> 00:01:04,760
There can be multiple one statements into a single gay statement, as you can see or hear as well.

17
00:01:05,690 --> 00:01:11,720
Then we have the key word, which is similar to the default key word in other programming languages,

18
00:01:11,900 --> 00:01:15,780
and it is optional and it will execute when nothing matches.

19
00:01:16,220 --> 00:01:21,530
So as you can see or hear that you have to first write in the expression, then it is going to check

20
00:01:21,530 --> 00:01:23,780
that expression with the one key word.

21
00:01:23,780 --> 00:01:30,740
So it is going to check if expression one is whatever expression is mentioned, then this code, which

22
00:01:30,740 --> 00:01:33,140
is in the block of expression, one is going to be executed.

23
00:01:33,140 --> 00:01:36,770
If this expression do is through, this quote over here is going to be executed on and you can have

24
00:01:36,770 --> 00:01:39,410
any number of expressions that will hear what you want to check.

25
00:01:39,650 --> 00:01:43,610
And if none of these expression is true, then you're going to have this Eliscu word, which is optional.

26
00:01:43,610 --> 00:01:48,590
And if you want to run some good, if none of the expression is true, then that is going to be run

27
00:01:48,590 --> 00:01:49,250
right over here.

28
00:01:50,120 --> 00:01:55,210
So basically, this is how you are going to use the syntax for the case expression.

29
00:01:55,610 --> 00:02:00,590
So moving now, head to the flow diagram, which shows the execution of how God is going to be executed

30
00:02:00,590 --> 00:02:01,610
in a case expression.

31
00:02:01,630 --> 00:02:06,830
So here you can see that it is going to start on with a case expression, then it is going to check

32
00:02:06,830 --> 00:02:08,600
for this one block one.

33
00:02:08,840 --> 00:02:14,530
If the condition over here match with this expression of wahad, this block is going to end.

34
00:02:14,530 --> 00:02:16,400
And if it is not, then it is going to move on.

35
00:02:16,400 --> 00:02:22,220
And one block two after it has checked, one block to it is going to see if it is true or not.

36
00:02:22,220 --> 00:02:27,260
If it is, it is going to end or if it is not, then it is going to go on and check one block three.

37
00:02:27,620 --> 00:02:30,500
And if this one block three is true, it is going to end.

38
00:02:30,500 --> 00:02:34,030
And if it is not, then it is going to go on and check this out.

39
00:02:34,130 --> 00:02:37,940
Now you're going to have any number of bent logs, as I told you earlier, and you can have this one

40
00:02:37,940 --> 00:02:40,870
block, only a single one block over here as well.

41
00:02:41,090 --> 00:02:43,580
So it is going to check it in a sequential order.

42
00:02:43,580 --> 00:02:47,790
And whenever it finds a match, which is true with this expression, so it is going to end.

43
00:02:47,790 --> 00:02:53,150
And if it is not, if all the logs are not true, then what it is going to do, it is going to check

44
00:02:53,150 --> 00:02:58,040
on with this else can be as blog and in the block, we don't have any kind of conditions.

45
00:02:58,040 --> 00:03:04,610
So that's why it is always going to execute this block if none of the conditions in the logs matches

46
00:03:04,610 --> 00:03:05,890
what the is expression.

47
00:03:06,620 --> 00:03:12,050
So let's see some examples now for how all this stuff is going to be done.

48
00:03:12,620 --> 00:03:16,490
So let's move on to our compiler, Adam.

49
00:03:17,470 --> 00:03:24,280
So let's say we have a system in which you want to, let's say, calculate the GPA again, but this

50
00:03:24,280 --> 00:03:27,300
time we have to do it using the statement.

51
00:03:27,310 --> 00:03:35,860
So we are going to write in, let's say, grade equal to and let's say I enter 90 over here.

52
00:03:36,340 --> 00:03:39,900
So now what I'm going to check is that what is going to be the grade for this?

53
00:03:39,910 --> 00:03:43,870
I'm going to have a clear statement in which I will write in grade.

54
00:03:44,080 --> 00:03:48,160
And this grade is basically what is going to be the expression, I will hear that I'm going to write

55
00:03:48,160 --> 00:03:49,960
in when and I'm going to win.

56
00:03:49,970 --> 00:03:53,330
Let's start on with 90 itself.

57
00:03:53,860 --> 00:03:56,360
So it is going to be 90.

58
00:03:56,380 --> 00:03:58,510
What I want to do is that I want to put.

59
00:04:00,640 --> 00:04:01,450
A great.

60
00:04:02,890 --> 00:04:08,770
Then we will have another one condition in which it will be eighty four days it will put in.

61
00:04:11,470 --> 00:04:14,500
Be great and then we will have another one.

62
00:04:16,040 --> 00:04:19,500
For 70, which is going to put.

63
00:04:20,960 --> 00:04:27,590
Sigrid, so finally, we are going to end it up, and if I just run the score, that you can see that

64
00:04:27,620 --> 00:04:33,170
it has printed out a great deal here because the expression over here is equal to 90.

65
00:04:33,440 --> 00:04:38,300
So it is going to start checking and it finds the match with this very first variable that is 90 for

66
00:04:38,300 --> 00:04:41,490
change this variable to 80 run this code.

67
00:04:41,510 --> 00:04:47,460
Now you can see that I have got big red over here because the second one expression over here is true.

68
00:04:47,620 --> 00:04:53,120
Now, now we can also add an else conditional here, which is going to, let's say, puts.

69
00:04:56,020 --> 00:05:04,630
Everyday, if it is not either a 98 or 70, so let's say it is 65.

70
00:05:06,640 --> 00:05:14,020
This discord and it is going to print on F grade now, this kid's expression or this statement is not

71
00:05:14,020 --> 00:05:21,610
good for calculating GPA type of things, because, for example, if I just under, let's say, 75 or

72
00:05:21,610 --> 00:05:26,980
undiscounted, is going to still have this grade because it does not match any three of these.

73
00:05:27,430 --> 00:05:30,540
But it is something other than these.

74
00:05:30,540 --> 00:05:32,850
So it is why that it has printed this.

75
00:05:32,860 --> 00:05:37,960
But our grade over here, you can use ranges over here, but that is going to get a bit more tricky

76
00:05:37,960 --> 00:05:38,330
for you.

77
00:05:38,650 --> 00:05:40,960
So the best is to use the F condition.

78
00:05:40,960 --> 00:05:43,400
If you are a calculating GPA type of things.

79
00:05:43,810 --> 00:05:46,370
Guess expression is also going to help you a lot in many other things.

80
00:05:46,390 --> 00:05:51,280
For example, you want to have matched strings, then it is going to be good.

81
00:05:51,280 --> 00:05:58,210
But if you are dealing with numbers, then the best scenario is to go on and use some other thing.

82
00:05:58,600 --> 00:06:00,550
For example, we have, let's say.

83
00:06:01,840 --> 00:06:03,220
Some domain here.

84
00:06:04,500 --> 00:06:06,060
That is, let's say.

85
00:06:09,250 --> 00:06:11,530
U.S. so.

86
00:06:12,640 --> 00:06:15,520
Not on this condition, it is U.S..

87
00:06:17,500 --> 00:06:19,390
Just let's end this up.

88
00:06:19,900 --> 00:06:25,720
All right, so now the expression over here is going to be demand and we want to check in certain demands.

89
00:06:25,720 --> 00:06:28,120
For example, the first one is the US itself.

90
00:06:28,360 --> 00:06:32,500
And for that, it is going to just print on America.

91
00:06:32,890 --> 00:06:38,020
And then we will have another case expression, let's say G.R..

92
00:06:38,410 --> 00:06:41,650
And for a G.R., it is going to let's say print.

93
00:06:45,870 --> 00:06:53,580
Germany, and then it is going to have another one, for example, it is České, and for that it is

94
00:06:53,580 --> 00:06:55,260
going to print.

95
00:06:56,500 --> 00:07:00,220
Slovakia for the final one, it is going to say.

96
00:07:01,180 --> 00:07:06,970
Unknown if non-match is found, it is going to be arraigned on unknown, if you just run this court,

97
00:07:06,970 --> 00:07:10,690
it is going to have America because the domain over here matches this case.

98
00:07:10,720 --> 00:07:16,600
Expression, if you use something like, let's say České run the score, it is going to have Slovakia.

99
00:07:16,870 --> 00:07:24,060
So give statements are very helpful if you are having something to match on with strings.

100
00:07:24,220 --> 00:07:29,950
So in this program we have basically a domain variable and we need a value for the variable from the

101
00:07:29,950 --> 00:07:34,610
command line when we use the word statement test for the value of the variable.

102
00:07:34,780 --> 00:07:36,300
There are several options.

103
00:07:36,550 --> 00:07:42,070
If the value equals, for example, to you, as you have seen, then America's string is printed to

104
00:07:42,070 --> 00:07:45,140
the console, as you can see over here as well.

105
00:07:45,340 --> 00:07:52,030
So that's how basically this statement can be used in your Ruby programs.

106
00:07:53,140 --> 00:07:54,710
So I guess that's it.

107
00:07:55,000 --> 00:07:55,900
What this jury.

108
00:07:56,080 --> 00:07:57,490
Thank you so much, guys, for watching.

109
00:07:57,490 --> 00:07:59,800
And I'll see you guys in the next Dorio.
