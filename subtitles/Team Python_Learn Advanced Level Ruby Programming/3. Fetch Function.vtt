WEBVTT
1
00:00:00.300 --> 00:00:01.320
Hey, guys, what's up?

2
00:00:01.350 --> 00:00:05.940
This is American, and I welcome you to another Dooralong discourse on Ruby and from this jury.

3
00:00:05.940 --> 00:00:09.600
And we are going to start on whether buildOn functions that can be applied on hashas.

4
00:00:10.140 --> 00:00:14.940
The first function we are going to cover starting on from this jury is going to be the fetch method

5
00:00:15.150 --> 00:00:16.120
on a hash.

6
00:00:16.770 --> 00:00:24.270
So what this FEG function is basically is that it is a hash GLAST method which returns a value from

7
00:00:24.270 --> 00:00:25.680
the hash for the given key.

8
00:00:26.070 --> 00:00:30.150
With no other arguments, it will raise a key error exception.

9
00:00:30.540 --> 00:00:33.630
Now the syntax for this function is very simple.

10
00:00:33.630 --> 00:00:35.970
You have to write and hash, not fetch.

11
00:00:36.240 --> 00:00:39.810
And in the argument you have to write in the hash value what you want to fetch.

12
00:00:40.230 --> 00:00:46.440
So let's see an example and I guess you will understand much more what I'm saying right now.

13
00:00:48.090 --> 00:00:53.340
All right, so in a previous story, what you have seen is that we have used a simple duen statement

14
00:00:53.340 --> 00:00:57.840
and used it each with that to fetch the values from the hash function.

15
00:00:58.020 --> 00:01:02.790
Now, in this one, we are going to do that, that we are going to be using the PFEG function to actually

16
00:01:02.790 --> 00:01:04.740
fetch the values from the hash.

17
00:01:05.100 --> 00:01:10.740
So let's say you have got multiple hash values and you have declared multiple in which you have got

18
00:01:10.740 --> 00:01:16.350
a single variable that is repeating again and again now how to access the value and which value is going

19
00:01:16.350 --> 00:01:20.460
to be accessed when you use the fetch function on a certain variable.

20
00:01:20.670 --> 00:01:23.870
So let's say you have three variables in which you have got hashes.

21
00:01:24.090 --> 00:01:29.910
So let's say you have got eight and that you have got, let's say, two values.

22
00:01:29.910 --> 00:01:31.830
The first one is a.

23
00:01:35.100 --> 00:01:43.550
And that is referring to, let's say Hundert, then you have got another value that is let's say the

24
00:01:43.580 --> 00:01:47.670
key is the and the value for that is let's say two hundred.

25
00:01:48.950 --> 00:01:51.020
Not a plus sign Nick would do sign over here.

26
00:01:52.790 --> 00:01:58.850
And let's say you have got one more hash with a variable beep and that you have got, let's say, one

27
00:01:58.850 --> 00:02:03.710
value that is easy and that is, let's say equal to, again, Hundert.

28
00:02:05.360 --> 00:02:12.860
And the third variable that is having a hash is, let's see, and that is also going to have certain

29
00:02:12.860 --> 00:02:13.110
value.

30
00:02:13.130 --> 00:02:15.080
Let's say this has three values.

31
00:02:15.420 --> 00:02:21.640
The first one is a and as usual, it's going to equal to the value hundert.

32
00:02:21.650 --> 00:02:24.350
Then you have got be.

33
00:02:26.590 --> 00:02:31.510
That is going to equal to two hundred and then you have, let's say, got.

34
00:02:36.210 --> 00:02:39.150
That is going to equal to 300.

35
00:02:40.730 --> 00:02:46.520
So now you've got three hatches of a hill in which this variable over here is the very same in all three

36
00:02:46.520 --> 00:02:47.040
of these.

37
00:02:47.540 --> 00:02:50.520
So how the hash function is going to be used over here.

38
00:02:50.540 --> 00:02:56.240
So, for example, I want to fetch in the value from this variable and I want to fetch in the value

39
00:02:56.240 --> 00:02:59.900
of this key value pair that is equal to Hundert.

40
00:03:00.140 --> 00:03:02.660
So how am I going to do that now?

41
00:03:03.020 --> 00:03:04.250
It is very simple.

42
00:03:04.250 --> 00:03:06.710
All you have to do is that you've tried inputs.

43
00:03:09.740 --> 00:03:13.820
Hash fetch from.

44
00:03:15.740 --> 00:03:19.790
And what you have to do is that you have to use interpellation, as you know from the previous tutorial,

45
00:03:19.790 --> 00:03:24.380
you had to write an E, which is the name of the variable dot fetch.

46
00:03:24.590 --> 00:03:27.830
So this basically, which we have used over here is this.

47
00:03:28.460 --> 00:03:29.960
So we are referring to.

48
00:03:31.510 --> 00:03:38.380
This hash function, hash value beer is Abargil, so we are talking about these two values that is equal

49
00:03:38.380 --> 00:03:39.850
to 100 and be equal to 200.

50
00:03:40.090 --> 00:03:42.460
So we are using the fetch function on this variable.

51
00:03:42.610 --> 00:03:49.210
So in the barometer's, as I told you, that I am going to write in the value I want to fetch and what

52
00:03:49.210 --> 00:03:50.370
is going to be the hash value.

53
00:03:50.650 --> 00:03:55.450
So let's say, as I told you, that I want to access the value is I'm going to just write an equal hild.

54
00:03:57.800 --> 00:03:59.510
And I will just run it.

55
00:04:01.320 --> 00:04:05.850
So we got an error that says error in the sea.

56
00:04:06.650 --> 00:04:10.400
All right, so it is expected, of course, I guess.

57
00:04:10.680 --> 00:04:13.120
Yes, I guess we have to come out here.

58
00:04:13.140 --> 00:04:15.750
Here it is, if not less, to come over here.

59
00:04:16.290 --> 00:04:17.280
So now run it.

60
00:04:17.460 --> 00:04:23.080
And you can see that it says hash effect from and you got the value, which is the value of this is

61
00:04:23.250 --> 00:04:24.620
what you store in this area.

62
00:04:25.200 --> 00:04:26.040
That is hundreds.

63
00:04:26.040 --> 00:04:27.360
So that's why that is printed.

64
00:04:27.360 --> 00:04:27.600
Right.

65
00:04:28.290 --> 00:04:33.240
Now, if you want to access the value for this be, all you have to do is that you have dry goods.

66
00:04:33.960 --> 00:04:41.940
You have to write and hash fetch from your interpellation, then you have to write and B dot.

67
00:04:43.390 --> 00:04:47.950
Fetch and the Collins, you have to ride in the value, which is, again a.

68
00:04:49.450 --> 00:04:55.460
This underscored and as you can see, that it says hash fetch from Hundert, you can just ride in from

69
00:04:55.820 --> 00:05:01.130
here, let's say, and you can just ride and be, let's say, here, so that it is much more visible

70
00:05:01.130 --> 00:05:02.380
than what's going on over a hill.

71
00:05:02.930 --> 00:05:06.920
And for the third one, you can just ride in, puts hash.

72
00:05:08.020 --> 00:05:17.050
Not a call in quotation marks or hill, and you can write and catch a fish from sea going on and appellation

73
00:05:17.050 --> 00:05:23.500
you can ride and sea dog fetch and hair, you can just ride in, run to school and you can see that

74
00:05:23.500 --> 00:05:25.650
you go got again and try to heal.

75
00:05:26.980 --> 00:05:32.020
Now, if you want to let's say it says the value for being the first guy is just right and be around

76
00:05:32.020 --> 00:05:34.720
the school and you can see that you have got to get the oil.

77
00:05:35.020 --> 00:05:37.400
In the second case, you don't have any other variables.

78
00:05:37.400 --> 00:05:42.700
So you have to just go on with a and for the third one, you have got A, B and C. So let's say you

79
00:05:42.700 --> 00:05:47.260
want to print out the value for C underscored and you've got this three under, which is the value for

80
00:05:47.260 --> 00:05:48.690
this Cohill.

81
00:05:49.000 --> 00:05:54.280
So that's how basically you can just print out the values from a key value pair.

82
00:05:54.970 --> 00:05:56.290
That is a hash basically.

83
00:05:56.440 --> 00:06:01.240
And you can just use the fetch function, which in the previous Dorel we have not used.

84
00:06:01.240 --> 00:06:06.340
We have used a simple duen statement and we have just traded through the hash and printed out the key

85
00:06:06.340 --> 00:06:06.970
value pair.

86
00:06:07.090 --> 00:06:13.070
But in this case we have used the fetch function to print out the values for the key and it's hash.

87
00:06:13.810 --> 00:06:16.060
So now what?

88
00:06:16.180 --> 00:06:20.860
One more thing before we get on with this tutorial is that, for example, in this second function,

89
00:06:20.860 --> 00:06:26.310
which is B equal to equal 200 Ohare, we have only got a single key value here.

90
00:06:26.830 --> 00:06:30.190
So what if you want to access something that is outside its range?

91
00:06:30.190 --> 00:06:34.030
For example, if you just write in B, which is not a part of this, as you can see over here, we can

92
00:06:34.030 --> 00:06:37.810
just comment it out so that you can simply see what's going on over here.

93
00:06:38.470 --> 00:06:42.220
So in here we are trying to access a value which is not a part of this.

94
00:06:42.250 --> 00:06:48.220
So if we just run this code, it is going to generate an error message that is going to say that Gey

95
00:06:48.250 --> 00:06:50.320
not found, which is B right over here.

96
00:06:50.650 --> 00:06:56.620
So in here we have specified this video here, which is basically the key, because in these brackets

97
00:06:56.620 --> 00:07:00.670
we are specifying the keys, as you have seen in the examples for this and this.

98
00:07:01.710 --> 00:07:08.370
So when you ride in a queue, which is not a part of the school year period, that is variable B, so

99
00:07:08.370 --> 00:07:12.840
when you ride in the B, which is the key, which is not a part of this, so it is going to generate

100
00:07:12.840 --> 00:07:14.850
an error that is going to say not found.

101
00:07:14.850 --> 00:07:18.420
That is B so not found error is basically what it is called.

102
00:07:18.900 --> 00:07:23.230
So I guess that's what this vetch function, you know how to use it now.

103
00:07:23.250 --> 00:07:25.120
So I guess that's it for this tutorial as well.

104
00:07:25.140 --> 00:07:27.030
Thank you so much, guys, for watching.

105
00:07:27.030 --> 00:07:29.430
And I'll see you guys in the next tutorial.
