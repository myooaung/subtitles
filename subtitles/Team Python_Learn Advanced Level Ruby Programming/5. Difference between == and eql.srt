1
00:00:00,390 --> 00:00:01,440
Hey, guys, what's up?

2
00:00:01,470 --> 00:00:05,580
This is a marathon, and I welcome you to another tutorial on this course on Dhruva.

3
00:00:05,760 --> 00:00:12,040
And in this story, we are going to be covering the difference between the equal operator and EQR.

4
00:00:12,330 --> 00:00:17,970
Now, you have covered both of these operators in the previous tutorials, but in this tutorial, we

5
00:00:17,970 --> 00:00:23,080
will strictly be talking about the difference between the equal operator and the equal operator.

6
00:00:23,430 --> 00:00:29,460
Now, the big nearest to Ruby are often confused by the fact that object class defined three methods

7
00:00:29,460 --> 00:00:30,830
that are related to equality.

8
00:00:30,840 --> 00:00:37,620
The first one is this equal operator, the second one is the equal operator and the third one is the

9
00:00:37,620 --> 00:00:43,260
equal you operator, which you have also covered in the previous tutorials.

10
00:00:43,500 --> 00:00:48,540
Not of all of these three, the one that is the most easier to describe.

11
00:00:48,690 --> 00:00:51,720
Is this equal you a operator.

12
00:00:52,230 --> 00:00:59,610
And what it do is that it implement what's commonly known as a reference equal equality check, not

13
00:00:59,620 --> 00:01:02,430
the method that is equal.

14
00:01:02,760 --> 00:01:09,300
It only returns true if its receiver and what is the receiver that is basically the object upon which

15
00:01:09,300 --> 00:01:10,620
the method was in court.

16
00:01:10,950 --> 00:01:16,710
And the parameter, the object, which we are referring to are the same object.

17
00:01:17,830 --> 00:01:25,930
Now, for example, we have, let's say X, and that is equal to, let's say, a variable that is let's

18
00:01:25,930 --> 00:01:26,440
say.

19
00:01:27,510 --> 00:01:34,440
ABC and then let's see what we have, is that the right way, equal to, let's say, X?

20
00:01:34,770 --> 00:01:41,260
And then what we want is that we want to check if both of these are now equal or not.

21
00:01:41,460 --> 00:01:50,550
So we will write in that x DOD equal question mark and we will write and why what we specify as a possible

22
00:01:50,560 --> 00:01:52,100
here or underscored.

23
00:01:52,230 --> 00:01:55,790
And as you can see, that it has returned true.

24
00:01:56,430 --> 00:02:06,670
Not both the double equal operator and this equal el operator, it implements the value quality check.

25
00:02:06,810 --> 00:02:13,200
They are not interested in whether two variables point to the same object in memory, but it checks

26
00:02:13,200 --> 00:02:16,670
whether two objects are equal in terms of their values or not.

27
00:02:16,680 --> 00:02:23,220
For instance, let's say the table and table might very well be two completely different string objects,

28
00:02:23,220 --> 00:02:27,650
but they are quite obviously the same as far as their value is concerned.

29
00:02:27,930 --> 00:02:29,910
So let's say if we have.

30
00:02:31,900 --> 00:02:39,190
Let's say you want to have, let's say ABC and we want to check it with, let's say, the equal operator.

31
00:02:41,490 --> 00:02:46,590
I want to check if it is equal to ABC or not, and we will specify Oportunidad.

32
00:02:48,000 --> 00:02:54,140
Run this and it is going to actually return false to us then if you.

33
00:02:55,220 --> 00:02:56,210
Youth sports.

34
00:02:57,910 --> 00:03:01,480
And let's say you want to check if ABC.

35
00:03:03,470 --> 00:03:07,490
Equal, equal to ABC, so the.

36
00:03:08,000 --> 00:03:14,540
And as you can see, that it has returned true now apply the same for the third operator that is ABC

37
00:03:15,020 --> 00:03:18,740
Dot, EQM, Al Questionmark and.

38
00:03:18,740 --> 00:03:19,040
Right.

39
00:03:19,040 --> 00:03:23,390
And ABC are on the court and it also return.

40
00:03:23,390 --> 00:03:23,660
True.

41
00:03:23,910 --> 00:03:30,800
Now, what's not immediately obvious is why are there two different matter that seems to be doing exactly

42
00:03:30,800 --> 00:03:31,920
the same thing?

43
00:03:32,150 --> 00:03:34,210
Now, the answer is very simple.

44
00:03:34,400 --> 00:03:39,590
The equal is meant to be used as a strict version of double equal.

45
00:03:40,010 --> 00:03:44,120
If there is a need for such a strict version that is equal.

46
00:03:44,120 --> 00:03:51,210
Most prominent usage is probably probably in the hash class where it's need to test the test member

47
00:03:51,230 --> 00:03:58,460
for equality, knowing the object class equal that it is synonym with the equal operator.

48
00:03:58,460 --> 00:04:04,250
Most subclasses continue this tradition, but there are a few classes that provide a different implementation

49
00:04:04,250 --> 00:04:06,500
for equal numeric types.

50
00:04:06,500 --> 00:04:11,540
For example, perform type converging across equal but not across equal.

51
00:04:11,570 --> 00:04:18,990
So, for example, if you just remove this from here and use numeric classes of a hill instead of just

52
00:04:19,010 --> 00:04:24,450
simple strings, then for example, we have, let's say, one equal equal to one run the underscored

53
00:04:24,470 --> 00:04:25,730
and it is going to return.

54
00:04:25,730 --> 00:04:26,140
True.

55
00:04:26,660 --> 00:04:32,540
Then apply one dot equal on numeric operators.

56
00:04:32,540 --> 00:04:34,130
Let's add one dot equal.

57
00:04:35,180 --> 00:04:41,660
And right in one run, this code and it is again going to return, true, then you have codes one dot

58
00:04:42,110 --> 00:04:47,720
you you will and write in one run this code and it is again going to return.

59
00:04:47,720 --> 00:04:47,950
True.

60
00:04:47,960 --> 00:04:54,230
And as you can see clearly from this example, that equal four in the glasses require both object to

61
00:04:54,230 --> 00:04:59,610
be instances of the same class, apart from having equal values to return to.

62
00:04:59,940 --> 00:05:00,530
Now.

63
00:05:01,490 --> 00:05:10,130
Hopefully, I have managed to make the difference between equal operator and a clear so that some fairly

64
00:05:10,160 --> 00:05:16,380
esoteric matter that's not totally understood by even some fairly experienced Hruby programmers.

65
00:05:16,400 --> 00:05:22,160
That is the difference between the operator and the operator that how it works with the numeric classes

66
00:05:22,160 --> 00:05:25,000
and how it works with the strengths.

67
00:05:25,580 --> 00:05:28,880
So I guess that's it with this tutorial.

68
00:05:29,480 --> 00:05:31,010
Thank you so much, guys, for watching.

69
00:05:31,010 --> 00:05:32,930
And I'll see you guys in the next tutorial.
