WEBVTT
1
00:00:00.360 --> 00:00:01.330
Hey, guys, what's up?

2
00:00:01.350 --> 00:00:04.820
This is American, and I welcome you to another tutorial on discourse on Ruby.

3
00:00:04.830 --> 00:00:10.010
And in this tutorial, we will start on with this new section and we will cover the topic Ruby Blocks.

4
00:00:10.500 --> 00:00:17.580
So Ruby Goldblatt's also called as closures in other languages are definitely one of the coolest feature

5
00:00:17.580 --> 00:00:18.120
of Ruby.

6
00:00:18.120 --> 00:00:23.910
And are the chunks of code between races are between the do and that you can associate with method in

7
00:00:23.910 --> 00:00:26.640
location almost as if they were parameters.

8
00:00:26.910 --> 00:00:32.880
A ruby block is a way of grouping statements and may appear only in the source adjacent to a method

9
00:00:32.880 --> 00:00:39.570
called The Block is right in starting on the same line as the method called lost parameter or the closing

10
00:00:39.570 --> 00:00:41.370
parenthesis of the parameter list.

11
00:00:41.730 --> 00:00:45.870
The code in the block is not executed at the time it is encountered.

12
00:00:45.900 --> 00:00:49.680
Instead, Ruby remembers the context in which the block appeared.

13
00:00:49.950 --> 00:00:52.050
And then Ruby enter is the method.

14
00:00:52.770 --> 00:00:58.500
The Ruby standard is to use braces for a single line logs and the do end for multiple line blocks.

15
00:00:58.750 --> 00:01:05.940
Keep in mind that the precise syntax has a higher precedence than the do and syntax braces have a higher

16
00:01:05.940 --> 00:01:06.570
precedence.

17
00:01:06.810 --> 00:01:12.600
DO has a lower precedence if the method invocation has parameters that are not included in parentheses,

18
00:01:12.810 --> 00:01:19.710
the breasts form of a block with bind to the last parameter, not to the overall invocation, the do

19
00:01:19.710 --> 00:01:21.390
form will bind to the invocation.

20
00:01:21.750 --> 00:01:27.780
Matt says that only that any method can be called with a block as an implicit argument.

21
00:01:27.780 --> 00:01:34.020
Instead, the method inside the method you can call the block using the keyword and a value.

22
00:01:34.950 --> 00:01:39.650
Also, as you will soon learn that logs can have their own arguments as well.

23
00:01:39.930 --> 00:01:44.280
There are many methods in Ruby that iterate over a range of values.

24
00:01:44.460 --> 00:01:50.430
Most of these iterators are written in such a way as to be able to take a code block as part of their

25
00:01:50.430 --> 00:01:51.510
colleagues index.

26
00:01:51.510 --> 00:01:58.470
The method can then yield the control to the code block, doing execution as many times as it is necessary

27
00:01:58.590 --> 00:02:00.930
for the iteration to get completed.

28
00:02:02.180 --> 00:02:09.470
Now, talking about the Ruby GQ, what what does she mean in Ruby now Jill is a ruby key word that calls

29
00:02:09.470 --> 00:02:10.730
a block when you use it.

30
00:02:10.730 --> 00:02:12.650
It's how method uses blocks.

31
00:02:12.650 --> 00:02:19.040
When you use a key word, the code inside the block will run and do its work, just like when you call

32
00:02:19.040 --> 00:02:20.700
a regular Ruby method.

33
00:02:20.990 --> 00:02:26.690
So how all this is going to be done, how Ruby blocks are going to be initialized, how the key word

34
00:02:26.690 --> 00:02:28.410
is going to get the block executed.

35
00:02:28.730 --> 00:02:30.520
Let's see some examples for that.

36
00:02:30.530 --> 00:02:32.240
So I will move on to Adam.

37
00:02:33.370 --> 00:02:38.770
So as I told you, that locks in Ruby can be initialized in two ways if you have a single and then you

38
00:02:38.770 --> 00:02:43.600
can all just write in this curly brackets and in this you can just write that single line.

39
00:02:43.600 --> 00:02:45.270
You want to get executed for that block.

40
00:02:45.520 --> 00:02:50.830
And if you have a multiline longer than what you can do is that you can just use the do and is going

41
00:02:50.830 --> 00:02:56.530
to be generated by default and you can just write in the multiple lines right over here and put a single

42
00:02:56.530 --> 00:02:56.740
line.

43
00:02:56.750 --> 00:02:58.480
You can just write a single line right away.

44
00:02:58.520 --> 00:03:03.310
So these are basically the two ways in which you can initialize blocks in Ruby.

45
00:03:03.700 --> 00:03:06.700
So, for example, let's say you have a blog that says Put.

46
00:03:08.300 --> 00:03:14.150
Hello, the simplest of all, and now you want to get this block executed so you can just associate

47
00:03:14.150 --> 00:03:17.570
it with a function and that function is going to get this block executed.

48
00:03:17.690 --> 00:03:25.250
So, for example, if you just move it down and let's say we have a function, let's say X.

49
00:03:27.330 --> 00:03:30.090
And in this function, I just write in hello.

50
00:03:31.060 --> 00:03:36.580
I just write and we'll do a hill and we have got this blog in which we have got Botelho a hell of a

51
00:03:36.580 --> 00:03:41.860
just right and a hill, and we will call this function right from here.

52
00:03:41.860 --> 00:03:45.750
And we have associated this blog right up with this function call.

53
00:03:46.060 --> 00:03:51.190
So if you just run this code, you can see that only the block of the code inside the function gets

54
00:03:51.190 --> 00:03:51.780
executed.

55
00:03:51.790 --> 00:03:55.120
That is what and this overhead does not get executed.

56
00:03:55.150 --> 00:03:57.010
Now, to execute this statement.

57
00:03:57.010 --> 00:03:57.280
Right.

58
00:03:57.310 --> 00:03:58.450
Well, how would you have to do that?

59
00:03:58.480 --> 00:04:01.750
You have to use the keyword that is provided to you by Ruby.

60
00:04:02.080 --> 00:04:07.300
So all you have to do is that you have to write in Ruby, run this code and you can see that you got

61
00:04:07.300 --> 00:04:12.820
hello, because whenever the keyword is called, the execution of the function is stopped and checks

62
00:04:12.820 --> 00:04:16.590
for any kind of log that is associated with that function call.

63
00:04:16.620 --> 00:04:22.810
So it has a blog associated right here with this function called So it's get so it gets to that block

64
00:04:22.930 --> 00:04:25.030
at any kind of statements in that.

65
00:04:25.030 --> 00:04:29.590
In this case, we have got this curly brackets, which means that this is going to be a single line.

66
00:04:30.370 --> 00:04:32.510
So it prints whatever it is written out here.

67
00:04:32.530 --> 00:04:37.390
It executed and after that it went back to where the word was called.

68
00:04:37.390 --> 00:04:43.690
And after that, the number of lines in the function are going to get executed sequentially.

69
00:04:44.350 --> 00:04:50.980
So that's how basically you can just use the blocks and associated with functions and just run them

70
00:04:50.980 --> 00:04:52.320
using the key word.

71
00:04:52.660 --> 00:04:56.470
Now, there can be scenarios in which the function has certain arguments.

72
00:04:56.470 --> 00:04:58.300
Let's say it is receiving an argument.

73
00:04:58.300 --> 00:05:00.330
It will have no need to worry.

74
00:05:00.340 --> 00:05:05.350
All you have to do is just pass in that argument and it is not going to affect this block right over

75
00:05:05.350 --> 00:05:05.560
here.

76
00:05:05.560 --> 00:05:09.280
The block is going to get executed in the very same fashion as it does.

77
00:05:09.400 --> 00:05:13.840
As you can see that you just printed out this for us, whatever was in the block.

78
00:05:14.080 --> 00:05:18.040
So it doesn't matter if a method has any kind of parameters are not.

79
00:05:18.190 --> 00:05:25.240
Now, a method can invoke an associated block one or more time using the key word has any method that

80
00:05:25.240 --> 00:05:32.880
wants to take a block as a parameter can use the Hilcorp to execute the block at any instance of time.

81
00:05:33.130 --> 00:05:36.490
So, for example, we have, let's say, this very same function.

82
00:05:36.490 --> 00:05:42.820
All we have to do is to just modify this so that things look much in the same way as things are getting

83
00:05:42.820 --> 00:05:43.170
printed.

84
00:05:43.180 --> 00:05:44.740
So we are going to just write inputs.

85
00:05:46.870 --> 00:05:48.550
Inside the block.

86
00:05:51.450 --> 00:05:52.470
And.

87
00:05:53.480 --> 00:05:56.690
You can just ride in bullets inside a block over here again.

88
00:06:00.870 --> 00:06:06.860
And as I told you that, you can just call in this world multiple times from a single function, so

89
00:06:06.870 --> 00:06:13.540
we'll just write in you, Jill, and you'll go ahead and just call you up to date as well.

90
00:06:14.760 --> 00:06:19.710
And what we can do that just remove these arguments for now, we don't need them anymore.

91
00:06:20.130 --> 00:06:22.200
So in here, we are going to write in.

92
00:06:25.500 --> 00:06:28.410
Or you can just ride in inside the block.

93
00:06:29.490 --> 00:06:34.200
So we are going to not write an insider blog about how we are going to write it inside the function

94
00:06:34.200 --> 00:06:38.090
of a hill, because we are not inside the blog and here we are inside the function of a hill.

95
00:06:38.100 --> 00:06:42.280
And when this statement is executed, we want inside the blog to get executed.

96
00:06:42.300 --> 00:06:43.160
So just run it.

97
00:06:43.170 --> 00:06:46.990
And as you can see, that the first line is going to get executed when the yield keyword is called.

98
00:06:47.010 --> 00:06:52.410
It just discontinues the execution of this function as it moves on to the blog, execute the line of

99
00:06:52.410 --> 00:06:53.460
code of this block.

100
00:06:53.460 --> 00:06:57.960
As you can see inside the blog, inside the blog, inside the blog, get executed three times because

101
00:06:57.960 --> 00:06:59.480
we have three statements over.

102
00:06:59.490 --> 00:07:05.490
Well, after that, the function execution continues at print out this line that is put inside the function,

103
00:07:05.490 --> 00:07:05.970
as you can see.

104
00:07:05.970 --> 00:07:10.230
And after that, it again sees a Uachtaráin is going to stop the execution of the function.

105
00:07:10.230 --> 00:07:15.660
Again, moving to the blog, Brandauer inside the function come back and after that it can see that

106
00:07:15.660 --> 00:07:18.540
it has just ended as it moved on to this.

107
00:07:18.540 --> 00:07:19.620
The control moves here.

108
00:07:19.620 --> 00:07:21.460
And after that we have got no lines.

109
00:07:21.460 --> 00:07:27.840
So the output just stops and you can see that this output is generated, generated on your eternal hell.

110
00:07:28.590 --> 00:07:33.780
So to summarize this, if you provide a good blog when you call a method, then inside the method,

111
00:07:33.780 --> 00:07:39.810
you can give control to that code block, suspend the execution of the function of the method, execute

112
00:07:39.810 --> 00:07:44.790
the code inside the block and return the control to the method body right up to the call to the, you

113
00:07:45.210 --> 00:07:46.660
know, code block is parsed.

114
00:07:46.980 --> 00:07:53.250
And Jill is and Ruby is going to raise an exception message and how that is going to be, for example,

115
00:07:53.250 --> 00:07:55.470
if you don't have any kind of logo here.

116
00:07:55.980 --> 00:08:00.060
And let's just limit this to a single unit statement that will help.

117
00:08:00.450 --> 00:08:00.900
All right.

118
00:08:00.900 --> 00:08:01.420
Good enough.

119
00:08:01.680 --> 00:08:06.540
So down here, you can see that we have not associated any kind of block with this function.

120
00:08:06.540 --> 00:08:14.220
But inside the function we are calling this, you'll run this and it is going to generate a message

121
00:08:14.220 --> 00:08:17.770
that is going to say no log given and you score.

122
00:08:17.970 --> 00:08:23.790
So that is called as the local jump arrow, because what you'll do is that it jumps from inside the

123
00:08:23.790 --> 00:08:26.270
function to whatever block is associated with the function.

124
00:08:26.280 --> 00:08:29.580
So that's why it is called as the local jump ever.

125
00:08:30.060 --> 00:08:33.680
Now, for example, you have, let's say, the multiline block.

126
00:08:33.690 --> 00:08:35.670
So for that you have to use the two.

127
00:08:35.670 --> 00:08:39.930
And so we will just write and do press enter and there's going to be generated itself.

128
00:08:40.170 --> 00:08:42.630
And in here you can just write inputs.

129
00:08:45.270 --> 00:08:46.740
Inside the blog.

130
00:08:50.040 --> 00:08:53.490
And you can just call Angelo Helgason.

131
00:08:57.320 --> 00:09:01.160
And down here, you can just write in one more line over here as well, Put's.

132
00:09:03.340 --> 00:09:06.330
Still inside the block.

133
00:09:08.050 --> 00:09:15.190
All right, so just run this code and as you can see, that you've got inside the function inside,

134
00:09:15.340 --> 00:09:17.070
but after that, this is going to get cold.

135
00:09:17.070 --> 00:09:20.650
So it is going to print out inside the block and then still inside the block.

136
00:09:20.920 --> 00:09:23.800
And after that, it is going to return the execution to the function.

137
00:09:23.800 --> 00:09:28.000
It is going to put put in, put inside the block, as you can see inside the function.

138
00:09:28.000 --> 00:09:28.350
Sorry.

139
00:09:28.360 --> 00:09:33.100
And after that, it is going to again call the word and it is again going to get these two lines printed

140
00:09:33.100 --> 00:09:35.680
because we have a statement over here and over here.

141
00:09:35.680 --> 00:09:40.240
We have the multiline dogs using the do and statements.

142
00:09:40.240 --> 00:09:43.840
So we've got inside the block and still inside the block in sequence.

143
00:09:44.230 --> 00:09:50.420
So that's how you can have the multiline block as well as you have seen that when you have no kind of

144
00:09:50.440 --> 00:09:54.680
lock and you use the key, well, then the jump error message is going to get generated.

145
00:09:55.270 --> 00:09:58.250
Now, you can also provide parameters to the call to you.

146
00:09:58.390 --> 00:10:00.100
This will be passed to the block.

147
00:10:00.100 --> 00:10:05.130
Within the block, you list the names of the argument to receive the parameter between vertical bars.

148
00:10:05.470 --> 00:10:12.100
So if we just take a very simple example of that into account, what you can just simply do is that

149
00:10:12.100 --> 00:10:18.780
you can pass in two numbers to a block from the Milky Way and you can just add these two numbers together.

150
00:10:19.030 --> 00:10:21.680
So we will just remove these from here.

151
00:10:21.700 --> 00:10:25.420
We just went right and put inside the function and downhill.

152
00:10:25.420 --> 00:10:29.440
What we are going to do is I'll just use the single line statement.

153
00:10:29.980 --> 00:10:33.520
I just let it be multiline state mental health.

154
00:10:34.680 --> 00:10:35.890
I'll just use a single line.

155
00:10:35.910 --> 00:10:40.400
So in downhill, what we are going to write in, we are going to write in this vertical bars of a hill

156
00:10:40.410 --> 00:10:43.010
and these are what are going to receive.

157
00:10:43.200 --> 00:10:47.760
So this is basically going to be the call of a function, because when you call a function, you know

158
00:10:47.760 --> 00:10:51.140
that this is the calling card and this is what is basically called.

159
00:10:51.150 --> 00:10:56.610
So in here, this is basically going to be the calling card and this block is whatever is going to get

160
00:10:56.610 --> 00:10:56.920
called.

161
00:10:57.240 --> 00:11:01.840
So from here, we are going to pass in the parameter, let's say two and three are the parameters.

162
00:11:01.840 --> 00:11:04.320
So down here, we are going to write in two numbers.

163
00:11:04.650 --> 00:11:06.420
So that are going to be, let's say.

164
00:11:07.440 --> 00:11:13.040
A couple maybe so these are the two numbers that are going to be received into this block and down here,

165
00:11:13.050 --> 00:11:15.600
what we are going to seem to be right and we are going to write in votes.

166
00:11:17.120 --> 00:11:24.830
It must be so the simplest example of all, run this and as you can see, that it is printed up inside

167
00:11:24.830 --> 00:11:27.340
the function and up to that Gentoo three is here.

168
00:11:27.680 --> 00:11:29.090
It calls this blog.

169
00:11:29.270 --> 00:11:33.800
It passed into two parameters to this, and B and B now has some values.

170
00:11:34.130 --> 00:11:36.200
You can just add these two numbers.

171
00:11:36.200 --> 00:11:40.270
And as you can see that you have got this five over here, which means that the arguments were passing.

172
00:11:40.280 --> 00:11:44.120
They were storing these two numbers because adding them generated five right here will help.

173
00:11:45.370 --> 00:11:52.420
Now, you can also have these parameters in the multiline, so you can just try and do and over here.

174
00:11:53.920 --> 00:12:00.010
And you can have these bars again, you can just write in a comma Blackhill and down here you can just

175
00:12:00.010 --> 00:12:02.020
write and put a plus.

176
00:12:02.020 --> 00:12:05.510
We run this code and it is again going to generate the same output.

177
00:12:05.530 --> 00:12:11.080
So this is how basically you can pass in parameters to a single line block and also do a multiple line

178
00:12:11.080 --> 00:12:14.080
log that is initialized with the do end statement.

179
00:12:14.860 --> 00:12:20.440
Now, one thing you might have noticed over here that the yield keyword has and the block combined has

180
00:12:20.470 --> 00:12:22.440
almost all the properties of a function.

181
00:12:22.450 --> 00:12:27.760
You know, you can just call in using the keyword and you can also postern parameters as you do with

182
00:12:27.760 --> 00:12:28.360
functions.

183
00:12:28.750 --> 00:12:34.780
There is one more property that the yield keyword has very same like the methods that are called block

184
00:12:34.780 --> 00:12:36.010
and also return value.

185
00:12:36.010 --> 00:12:40.690
And the return value is going to be the value of the last expression evaluated in the code block.

186
00:12:40.960 --> 00:12:43.860
Now this return value is made available inside the block.

187
00:12:44.020 --> 00:12:51.480
It comes through as the return value of the yield block given it returns true if the function is possible,

188
00:12:51.490 --> 00:12:53.250
a block which can be yielded.

189
00:12:53.440 --> 00:12:57.160
So the block given is basically going to be used over here.

190
00:12:57.160 --> 00:12:58.870
And that is also Billancourt.

191
00:12:59.140 --> 00:13:04.120
So it is going to return to the function espoused with a block which can be yielded as it is going to

192
00:13:04.120 --> 00:13:04.660
generate.

193
00:13:05.770 --> 00:13:10.270
It is simply going to run the statement, if you specify this with a condition.

194
00:13:10.310 --> 00:13:13.380
So let's just try a simple example of that as well.

195
00:13:13.750 --> 00:13:15.820
So we will just remove this from here.

196
00:13:16.940 --> 00:13:22.820
And instead of that error message that was generated, we can just write in any condition to avoid that

197
00:13:22.820 --> 00:13:28.000
error message as well as to see if a value is returned from the key.

198
00:13:28.270 --> 00:13:32.840
So we are going to try and block underscore, given a question mark.

199
00:13:33.320 --> 00:13:36.170
What we are going to do is that we are going to write in yield.

200
00:13:36.530 --> 00:13:41.240
If Locke is given if the blog is not given, then what we are going to do is that we are going to write

201
00:13:41.240 --> 00:13:41.960
inputs.

202
00:13:44.000 --> 00:13:44.810
Knoblock.

203
00:13:47.310 --> 00:13:53.820
All right, so down here, what we are going to do is that we are going to end this if you are, because

204
00:13:53.820 --> 00:13:56.910
it is going to generate EDAR, we are going to remove this from hell.

205
00:13:56.910 --> 00:14:01.490
You are going to call it the function X, and we are not going to specify any kind of block away.

206
00:14:01.500 --> 00:14:07.260
I run this and as you can see that it has retained a value that is Knoblock because it checks for the

207
00:14:07.260 --> 00:14:07.650
block.

208
00:14:07.890 --> 00:14:09.350
The block was not there.

209
00:14:09.360 --> 00:14:15.810
It does not execute this statement over here, no error message and it returned the last evaluated expression

210
00:14:15.810 --> 00:14:16.750
that was no lock.

211
00:14:17.070 --> 00:14:24.090
Now, for example, if you have something of a for example, you've got Foote's halo here, Ronda's,

212
00:14:24.090 --> 00:14:25.830
and you can see that it is generated now.

213
00:14:25.830 --> 00:14:26.220
Hello.

214
00:14:26.250 --> 00:14:31.800
This Ohare is not executed because this O'Haire was true, because this is a building keyword that especially

215
00:14:31.800 --> 00:14:37.740
used to check if you have got any kind of block associated with the function in which you're using this

216
00:14:37.740 --> 00:14:39.120
key word block given.

217
00:14:39.120 --> 00:14:44.880
So we're using this block given in this X function and we have associated a block with this function

218
00:14:44.880 --> 00:14:47.310
X, so this over here is going to return.

219
00:14:47.310 --> 00:14:47.610
True.

220
00:14:47.610 --> 00:14:49.170
And this is going to get executed.

221
00:14:49.170 --> 00:14:53.090
In the previous case when this was not present, this was false over here.

222
00:14:53.100 --> 00:14:56.490
This does not get executed and this was executed in Knoblock was printed.

223
00:14:56.490 --> 00:14:58.080
But in this case we have got a block.

224
00:14:58.080 --> 00:15:00.720
So that's why Halo is going to get printed over here.

225
00:15:01.640 --> 00:15:07.220
Similarly, you can do it for the do what you can do it with the due end in which you have multiple

226
00:15:07.220 --> 00:15:07.940
lines as well.

227
00:15:08.460 --> 00:15:11.090
Now, one more concept you need to learn from.

228
00:15:11.090 --> 00:15:14.290
This tutorial is about the low block variables.

229
00:15:14.570 --> 00:15:23.390
So let us see what happens in when a variable outside a block is X and a block barometer's is also named

230
00:15:23.390 --> 00:15:23.810
as X..

231
00:15:24.170 --> 00:15:29.960
So up here, what we are going to do is that we are going to let's say let's just remove this from here

232
00:15:29.960 --> 00:15:31.580
completely and let's just start fresh.

233
00:15:31.970 --> 00:15:35.360
So, for example, if you have a variable X equal to 10.

234
00:15:36.630 --> 00:15:46.080
And then you just write in five dot dimes do, and you just initialize a blog with a keyword that is

235
00:15:46.410 --> 00:15:47.010
basically.

236
00:15:49.290 --> 00:15:52.050
And inside this, what you're going to read input's.

237
00:15:53.690 --> 00:15:56.430
Value of X.

238
00:15:58.330 --> 00:16:05.070
Inside is and you are going to use the interpellation concept for that, so you're going to just try

239
00:16:05.110 --> 00:16:06.310
and Axler here.

240
00:16:08.140 --> 00:16:12.970
And what you're going to do is that you're going to just end this right over here and down here, you

241
00:16:12.970 --> 00:16:18.310
are going to just print out the value for X and see what happens, because you have used the value,

242
00:16:18.520 --> 00:16:22.850
you use the same variable that is X inside a block as well as outside the block.

243
00:16:22.870 --> 00:16:24.900
So let's see what it's going to get printed outside.

244
00:16:24.980 --> 00:16:25.870
We're going to adjust right.

245
00:16:25.900 --> 00:16:27.910
And value of.

246
00:16:30.010 --> 00:16:38.800
X outside is interpellation and just write an X or help run this code, and as you can see that the

247
00:16:38.800 --> 00:16:41.580
value of X right over here start from zero.

248
00:16:41.920 --> 00:16:49.780
It incremented in every counted, it executed five times and from the value watching from zero to four,

249
00:16:49.780 --> 00:16:51.190
as you can see right over here.

250
00:16:52.570 --> 00:16:57.700
Down here, the line which we have printed outside this time function outside the DUEN, which means

251
00:16:57.700 --> 00:17:04.210
outside the block, you have got this value of X to be done, which means that it has executed this

252
00:17:04.210 --> 00:17:05.110
line of will help.

253
00:17:06.400 --> 00:17:11.770
So you have basically observed that Up to the Block has executed X, outside the block is the original

254
00:17:11.770 --> 00:17:15.930
X, hence the block parameter X was local to the block.

255
00:17:15.950 --> 00:17:21.880
So the main purpose here was that when you initialize a same variable outside the block and also use

256
00:17:21.880 --> 00:17:28.000
it inside the block, then this this variable over here is basically local to this block over here,

257
00:17:28.000 --> 00:17:32.500
because down here, when you try to print it out, it is not going to get executed because if you just

258
00:17:32.500 --> 00:17:37.180
remove it from it, it is going to generate an error message because it says that you got no kind of

259
00:17:37.180 --> 00:17:37.630
parameter.

260
00:17:38.140 --> 00:17:39.640
That's because it says that.

261
00:17:40.710 --> 00:17:47.340
Undefined local variable or method named as X, but if you have this oakhill around this, you are going

262
00:17:47.340 --> 00:17:53.340
to get this value because this value is just terminated when this functions.

263
00:17:53.340 --> 00:17:58.430
And outside this doing this X does not exist, but this X does exist.

264
00:17:58.440 --> 00:18:00.810
So that's why then was printed right over help.

265
00:18:03.080 --> 00:18:08.840
Now, what if you want to know the final value of whatever the wherever this loop has ended?

266
00:18:08.870 --> 00:18:14.300
So what you can do over here is that you can use some other variables other than X down here inside

267
00:18:14.300 --> 00:18:15.080
this block.

268
00:18:15.080 --> 00:18:21.290
What you can do is that you can just write an X equal to Y, and now what you can simply do is you can

269
00:18:21.300 --> 00:18:26.210
write inputs and outputs value effects inside its X and down here you can use the very same statement

270
00:18:26.210 --> 00:18:28.100
that is this random code.

271
00:18:28.250 --> 00:18:32.360
And as you can see that you've got zero one, two, three, four over here and now you have got value

272
00:18:32.360 --> 00:18:33.320
of X outside.

273
00:18:33.320 --> 00:18:38.930
As for as I told you that this is basically local to this whatever this is a here.

274
00:18:39.320 --> 00:18:42.770
But down here you can see that you have got this value J.

275
00:18:42.800 --> 00:18:49.670
Now the reason behind this is that you have got this variable X equal to this by now for the first iteration.

276
00:18:49.820 --> 00:18:54.980
You know that the value of X sorry, the value of fire is zero for the second iteration.

277
00:18:54.980 --> 00:18:56.480
It is going to be one for the third.

278
00:18:56.480 --> 00:18:59.360
It is going to be two, then three, then for the final address.

279
00:18:59.360 --> 00:19:01.790
And it is going to force for the final attrition.

280
00:19:01.940 --> 00:19:08.820
The value of X is going to get changed to this Y that that is going to be for our heads.

281
00:19:08.820 --> 00:19:10.160
So if you just write in.

282
00:19:11.670 --> 00:19:12.180
Well, it's.

283
00:19:13.900 --> 00:19:15.410
Value of X.

284
00:19:16.480 --> 00:19:17.320
Outside.

285
00:19:18.950 --> 00:19:19.760
Before.

286
00:19:21.680 --> 00:19:22.520
The blog.

287
00:19:25.310 --> 00:19:30.680
And you can just ride position, interpellation a hill and just ride, and Zawahiri underscored, and

288
00:19:30.680 --> 00:19:31.780
that is going to be 10.

289
00:19:31.790 --> 00:19:35.940
But once the blog is executed, since you have initialized the value of X to Y.

290
00:19:36.320 --> 00:19:41.900
So for the last eight and that is for because every time the value of X is going to get updated when

291
00:19:41.900 --> 00:19:42.470
this lupe's.

292
00:19:43.480 --> 00:19:49.150
Get outraged for the first time, it is going to change the value of X from ten to zero, then in the

293
00:19:49.150 --> 00:19:53.140
next from zero to one, then from one to two, then from two to three, then from three to four.

294
00:19:53.140 --> 00:19:58.690
Finally, and down here, when you just write in value of X outside as it is going to give you four

295
00:19:58.690 --> 00:20:04.570
as the output since X is not a block parameter, here are the variable, X is the same inside and outside

296
00:20:04.570 --> 00:20:05.050
the block.

297
00:20:06.420 --> 00:20:11.760
So if you talk about droopy one point nine and onwards, the blocks introduced their own scope for the

298
00:20:11.760 --> 00:20:13.160
block parameters only.

299
00:20:13.530 --> 00:20:18.630
So for that, if you just see one more example, just remove this first.

300
00:20:18.630 --> 00:20:25.800
And let's say we just specify a call in over here and X right over here and we will have this code,

301
00:20:25.830 --> 00:20:28.400
the remaining as the same order to just remove this from here.

302
00:20:28.410 --> 00:20:29.550
We don't need it anymore.

303
00:20:29.580 --> 00:20:30.300
Just run it.

304
00:20:30.450 --> 00:20:33.040
And you can see that you have still got this done over here.

305
00:20:33.400 --> 00:20:38.910
Now, in this about a block, a new feature has been introduced that is known as the block.

306
00:20:38.910 --> 00:20:44.370
Local variable inside the block, local variable speed, a block from manipulating variables outside

307
00:20:44.370 --> 00:20:44.990
of its scope.

308
00:20:45.390 --> 00:20:50.280
This prevent a block from unintentionally clobbering any variables outside its scope.

309
00:20:50.340 --> 00:20:55.950
If you don't want to clobber variables, use the block local variables for the variables your block

310
00:20:55.950 --> 00:20:56.400
creates.

311
00:20:56.640 --> 00:21:02.500
The syntax for a block local variable is very simple, but a semicolon after the normal block variable

312
00:21:02.500 --> 00:21:02.820
list.

313
00:21:02.820 --> 00:21:06.900
Which is why in this case you have specify a colon, you have specified the variable you don't want

314
00:21:06.900 --> 00:21:08.940
to clobber outside.

315
00:21:09.000 --> 00:21:15.090
So we don't want this value of X to get changed because in the previous case when we did not use this

316
00:21:15.090 --> 00:21:17.820
concept Dronett, you can see that the value of X has been changed.

317
00:21:17.820 --> 00:21:23.790
So we don't want the global values to get changed due to some kind of blocks you don't want.

318
00:21:23.790 --> 00:21:31.770
We want that to be specific to that block only we don't want any kind of block local variable to clobber

319
00:21:31.770 --> 00:21:33.570
any kind of value that is outside the block.

320
00:21:33.570 --> 00:21:38.070
So for that you have to use this around this you can see that now the value of X is the very same.

321
00:21:38.070 --> 00:21:41.820
It has not affected the value of the original X.

322
00:21:42.240 --> 00:21:48.480
So that was basically the concept of the block variables in Ruby Blocks.

323
00:21:49.080 --> 00:21:54.150
Now, moving towards the last concept we are going to cover in this tutorial is what is the basically

324
00:21:54.150 --> 00:22:00.120
difference between implicit and explicit blocks, not blocks can be both explicit and implicit.

325
00:22:00.570 --> 00:22:06.900
Explicit means that you give it a name in your parameter unless you can pass an explicit block to another

326
00:22:06.900 --> 00:22:10.350
method or save it into a variable to use later.

327
00:22:10.770 --> 00:22:15.210
Now, whatever we have been doing so far was basically related to the implicit blocks.

328
00:22:15.540 --> 00:22:19.110
Now we will use the explicit block, so we will just remove this from here.

329
00:22:19.110 --> 00:22:25.380
We will initialize an explicit underscore block Abargil.

330
00:22:28.550 --> 00:22:32.990
And down here, what we are going to do is that we are going to try and block dot com.

331
00:22:33.380 --> 00:22:39.440
It is the very same as the keyword because in implicit block, you have to use Whewell and downhere

332
00:22:39.440 --> 00:22:42.980
you have to write and block dot com just and this.

333
00:22:43.820 --> 00:22:50.000
And downhere, what you can do is that you can just write an explicit lock, which is this.

334
00:22:50.330 --> 00:22:54.560
And in here you can associate a block with this function.

335
00:22:54.860 --> 00:22:58.570
And that function is let's say you're going to have Put's.

336
00:23:01.660 --> 00:23:02.740
Explicit.

337
00:23:04.790 --> 00:23:05.510
Block.

338
00:23:07.690 --> 00:23:08.650
It's called.

339
00:23:09.630 --> 00:23:13.600
Let's just move it a bit further so that everything is visible.

340
00:23:14.340 --> 00:23:20.580
Now, one more thing you need to understand over here is that how this key word here is going to get.

341
00:23:21.750 --> 00:23:25.830
So if you just run the school, you can simply see that you've got an error because it says you have

342
00:23:25.830 --> 00:23:30.840
got an undefined local variable or method named Locke, which is this variable right away here, because

343
00:23:30.840 --> 00:23:33.160
it does not know what is this variable.

344
00:23:33.450 --> 00:23:41.370
So what you can do here is that down here you can just write in the address sign and you can just write

345
00:23:41.370 --> 00:23:42.660
and block now run it.

346
00:23:42.660 --> 00:23:48.060
And now it is going to run perfectly because this is what is going to tell it that we want to call in

347
00:23:48.210 --> 00:23:49.660
an explicit block.

348
00:23:49.680 --> 00:23:52.050
So when this explicit blog is called.

349
00:23:53.310 --> 00:23:59.760
We want to refer to a location that where this call is going to get made and this location basically

350
00:23:59.760 --> 00:24:04.410
points towards the blog that is associated with this explicit function right over here.

351
00:24:04.710 --> 00:24:06.800
So this was the explicit function.

352
00:24:06.810 --> 00:24:11.700
This was the explicit function call, and this was the blog that was associated with the explicit function

353
00:24:11.700 --> 00:24:12.020
call.

354
00:24:12.300 --> 00:24:16.920
So for that, you have to write in the address to where from where this function has been called and

355
00:24:16.920 --> 00:24:18.510
where the block is basically.

356
00:24:18.520 --> 00:24:26.310
So this variable basically points to the address of wherever this associated block of this explosive

357
00:24:26.310 --> 00:24:27.120
function is stored.

358
00:24:27.150 --> 00:24:32.970
So when you write and block and you write in the call function with that block variable, you are going

359
00:24:32.970 --> 00:24:35.620
to just get this stuff over here executed.

360
00:24:35.640 --> 00:24:37.860
You can have other statements like bots.

361
00:24:38.980 --> 00:24:43.450
Hello, if you just run it, you can see that you have got explicit blog escarole, you can just see

362
00:24:43.450 --> 00:24:43.840
hello.

363
00:24:44.020 --> 00:24:46.630
And if you have statements above that, let's say puts.

364
00:24:48.290 --> 00:24:53.210
World over here on this and you can see that it is sprinting, well, then it is calling the function

365
00:24:53.210 --> 00:25:00.380
and before it gets this executed, it is going to first go into this explicit block away here and it

366
00:25:00.380 --> 00:25:05.890
is going to execute any kind of block that is associated with this explicit function.

367
00:25:06.320 --> 00:25:08.270
So it executes this.

368
00:25:08.270 --> 00:25:11.870
It returned back the execution of control.

369
00:25:11.870 --> 00:25:16.490
It performed the sequential order execution, and it executed Botelho.

370
00:25:16.490 --> 00:25:18.740
Hell was printed and that's explicit.

371
00:25:18.740 --> 00:25:20.690
Block was also executed.

372
00:25:20.720 --> 00:25:26.210
Now you can have this as the multiline by using the duende as well in the very same way you do with

373
00:25:26.210 --> 00:25:27.280
the implicit functions.

374
00:25:27.650 --> 00:25:32.850
So that was basically what was the difference between explicit block and implicit block and implicit

375
00:25:32.850 --> 00:25:33.090
block?

376
00:25:33.110 --> 00:25:38.450
You have to use the key word and in the implicit block you have to use the call function and you have

377
00:25:38.450 --> 00:25:44.900
to also point a reference towards the location where that explicit block has been stored.

378
00:25:45.230 --> 00:25:51.080
So I hope you have understood the concept of blocks and some very interesting and advanced concepts

379
00:25:51.080 --> 00:25:55.000
that are also associated with blocks in Ruby.

380
00:25:55.310 --> 00:25:57.740
So I guess that's it with this tutorial.

381
00:25:57.740 --> 00:26:03.320
I know it was a lengthy tutorial, but I have tried my best to cover it in the simplest way possible,

382
00:26:03.320 --> 00:26:04.670
so I hope you have understood that.

383
00:26:05.000 --> 00:26:06.480
So I guess that's it with this tutorial.

384
00:26:06.500 --> 00:26:07.880
Thank you so much, guys, for watching.

385
00:26:07.880 --> 00:26:10.190
And I'll see you guys in the next tutorial.
