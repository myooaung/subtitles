1
00:00:00,210 --> 00:00:01,260
Hey, guys, what's up?

2
00:00:01,290 --> 00:00:05,640
This is a marathon, and I welcome you to another tutorial on this course on Ruby.

3
00:00:06,850 --> 00:00:10,630
In this story, we will cover multi-line strings in Ruby.

4
00:00:12,180 --> 00:00:18,570
Now, the previous tutorials were we have been covering so far, you have come a lot across a single

5
00:00:18,570 --> 00:00:23,310
line strengths, so that is not an urge to repeat the single line strength topic here.

6
00:00:23,700 --> 00:00:27,810
So I decided to go on directly to the multi-line strengths in Ruby.

7
00:00:28,050 --> 00:00:32,650
Now, there are various ways to create multiline strengths in Ruby.

8
00:00:33,000 --> 00:00:35,170
So let's start on with the simplest of all.

9
00:00:36,030 --> 00:00:40,470
So the first method is to specify the.

10
00:00:42,820 --> 00:00:49,000
Square brackets and in the square brackets, what do you hope to do is that you can specify a number

11
00:00:49,000 --> 00:00:51,680
of strings, each separated by a comma.

12
00:00:51,880 --> 00:00:52,840
So let's say.

13
00:00:53,970 --> 00:00:55,890
I can just write in First Flustering.

14
00:00:59,200 --> 00:01:04,400
And I have to specify a comma click enter, and here I can now enter a second string.

15
00:01:04,420 --> 00:01:07,060
So let's say it is going to be second string.

16
00:01:08,250 --> 00:01:14,580
And let's say in the third line, I have one more string that is third string, and you're going to

17
00:01:14,580 --> 00:01:20,010
have something like one plus one as well here, that is going to be the fourth string.

18
00:01:20,490 --> 00:01:27,420
So now the simplest way to make it a multi-line string is to use the method that is building that is

19
00:01:27,420 --> 00:01:28,800
named as joint.

20
00:01:28,820 --> 00:01:31,530
So just specify a dot and then join.

21
00:01:31,860 --> 00:01:37,980
And what you have to specify in this bracket is whatever comes in between these strings.

22
00:01:38,130 --> 00:01:43,560
So I want this string to print out on the first line, this to print out on the second line, this on

23
00:01:43,560 --> 00:01:45,550
the third line and this on the fourth line.

24
00:01:45,690 --> 00:01:49,530
So how this is going to be done is that I have to specify.

25
00:01:51,130 --> 00:01:56,920
This thing over here, so that a new namespace space is added up to each string is printed.

26
00:01:58,030 --> 00:02:04,420
All right, so all I need to do now is to run this code, so to do that, what I have to do is that

27
00:02:04,420 --> 00:02:09,730
I have to simply specify both Sohel Aldar and my job is done.

28
00:02:09,730 --> 00:02:15,490
As you can see that I have fostering second string, third string and one plus one right here.

29
00:02:15,730 --> 00:02:21,000
And this method joint has basically helped me to print all of these strings.

30
00:02:21,010 --> 00:02:25,510
And this is basically now called a multi-line string in Ruby.

31
00:02:26,490 --> 00:02:33,210
So this was the first and the easiest way to create multi-line strengths in Rubinow, the second method

32
00:02:33,210 --> 00:02:35,520
is to use a dog strength.

33
00:02:35,520 --> 00:02:42,450
Know how it is going to be done is that you have to just remove this.

34
00:02:43,460 --> 00:02:44,930
These brackets from here.

35
00:02:46,930 --> 00:02:51,910
And you don't need to join anymore, so you already have the strength that is the first string, second

36
00:02:51,910 --> 00:02:54,430
string, third string and one plus one over here.

37
00:02:54,700 --> 00:03:00,280
So what I can do is that I have to actually enclose all these strings together, knowing the previous

38
00:03:00,280 --> 00:03:03,480
method and close them using the square brackets.

39
00:03:03,670 --> 00:03:08,320
Now, in the second method, which is using a dark string, would have to do is add up to initialize

40
00:03:08,320 --> 00:03:13,270
a variable that it's X and I have to store all these strings in this X.

41
00:03:13,270 --> 00:03:20,380
Now, how it is going to be done is using less than less than sine and I have to specify a variable

42
00:03:20,380 --> 00:03:22,880
maybe be let's say I have to specify why.

43
00:03:22,900 --> 00:03:29,260
So you have to specify Dadua, which indicates the starting and then you have to come out of this blog

44
00:03:29,260 --> 00:03:33,690
because when you click enter, you can see that the cursor is just ahead of the line.

45
00:03:33,700 --> 00:03:41,140
So you have to press backspace so that it moves out and to y, which indicates the ending of this loop.

46
00:03:41,140 --> 00:03:47,560
You can just specify something that would be much easier for you to indicate or you can just use Y as

47
00:03:47,560 --> 00:03:48,200
I have used.

48
00:03:48,430 --> 00:03:54,310
So you have to specify Dashty that indicates the starting of the string and Y is basically going to

49
00:03:54,310 --> 00:03:57,070
indicate the ending of this multiline string.

50
00:03:57,370 --> 00:04:06,340
So now all you have to do is that come out, write in votes and why not y it is going to be X because

51
00:04:06,340 --> 00:04:12,520
all these values are basically stored in this X, so just for us all plus R and as you can see that

52
00:04:12,520 --> 00:04:18,850
the output is generated that says flustering, second string, third string and one plus one.

53
00:04:19,720 --> 00:04:27,880
So this is basically the second way in which you can have multiline strings in Ruby now coming towards

54
00:04:27,880 --> 00:04:34,720
the third method, not Ruby also supports a shorthand syntax in which if you want to have no interpolation,

55
00:04:34,720 --> 00:04:40,870
then you can use a person designed with a small Q And if you want interpellation, then you can use

56
00:04:40,870 --> 00:04:43,070
a capital cume where the person did sign.

57
00:04:43,420 --> 00:04:44,780
So how it is done.

58
00:04:44,920 --> 00:04:46,980
So let's start on with what we want.

59
00:04:46,990 --> 00:04:48,080
No interpolation.

60
00:04:48,370 --> 00:04:54,790
So what we will do is that we will have a variable that is going to be the very same that is X and it

61
00:04:54,790 --> 00:04:59,050
is going to equal to Alperstein Design and Akiem.

62
00:05:01,140 --> 00:05:07,710
So just remove this from here, we will have a person did sign and we will place a small, you know,

63
00:05:07,830 --> 00:05:12,900
small unit as a W is used in the case where you want no kind of interpellation to have.

64
00:05:13,140 --> 00:05:15,040
So you specified.

65
00:05:15,090 --> 00:05:17,850
Now the round brackets just remove this bracket.

66
00:05:18,770 --> 00:05:24,740
And plays this bracket over here, this is going to indicate the ending and now you already have both

67
00:05:25,130 --> 00:05:27,140
a run this goed.

68
00:05:30,800 --> 00:05:37,280
And as you can see, the output that is fostering and it's a second string, the third string and one

69
00:05:37,280 --> 00:05:43,440
plus one, so this is basically the third method through which you can have multi-line strings in Ruby.

70
00:05:43,820 --> 00:05:46,870
Now, the fourth method comes with interpolation.

71
00:05:47,300 --> 00:05:53,150
Now, how it is going to be used is that all you have to do is that you have to change this molecule

72
00:05:53,330 --> 00:05:54,170
with a capital.

73
00:05:54,220 --> 00:05:56,390
Q and your job is going to be done.

74
00:05:56,390 --> 00:06:02,420
Just click Aldar and as you can see or hear that it has your string, that superstring second string,

75
00:06:02,420 --> 00:06:05,150
third string and one plus one.

76
00:06:06,130 --> 00:06:06,500
All right.

77
00:06:06,510 --> 00:06:15,320
So now there is a variance index that is for interpellation, which can also be used to have multiline

78
00:06:15,320 --> 00:06:16,320
strings in Ruby.

79
00:06:16,640 --> 00:06:21,650
What do you have to do is that you have to just remove this from here, run this good.

80
00:06:22,550 --> 00:06:27,800
And all right, it says it has got some kind of error.

81
00:06:29,020 --> 00:06:34,540
All right, so the error message says that syntax error and it says unexpected things and expecting

82
00:06:34,550 --> 00:06:40,760
end of input, which means that I guess this space cost problem and as you can see, that as soon as

83
00:06:40,760 --> 00:06:44,530
you remove the space, the color of this bracket changes from Y to create it.

84
00:06:44,530 --> 00:06:47,650
You can see that when I specify the space, this turns into white.

85
00:06:47,650 --> 00:06:51,700
And when I remove the space, it turns back to green, which means that you don't have to add any kind

86
00:06:51,700 --> 00:06:52,540
of space or hail.

87
00:06:52,840 --> 00:06:53,890
So just run this code.

88
00:06:53,890 --> 00:06:57,650
And as you can see, the output that is for string, second string, third string and one plus one.

89
00:06:58,000 --> 00:07:04,180
Now, the only reason I make a such kind of mistakes is I can simply remove these mistakes because I

90
00:07:04,180 --> 00:07:06,240
try the code once before I teach it here.

91
00:07:06,520 --> 00:07:12,550
But the purpose to make such a mistake is so that I tell you that what kind of mistakes can occur here

92
00:07:12,550 --> 00:07:15,420
and what kind of precautions you have to take while coding.

93
00:07:15,730 --> 00:07:21,190
So in this case, as you have seen, that you don't have to specify a space right here in between this

94
00:07:21,190 --> 00:07:25,930
person design and this bracket else, it is going to generate error and it is not going to read this

95
00:07:25,930 --> 00:07:26,560
bracket.

96
00:07:27,040 --> 00:07:34,390
So that's why I make such kind of mistakes myself so that you will be able to see what kind of errors

97
00:07:34,390 --> 00:07:39,880
you don't have to make, because if you specify a space here, you run your code, you will see that

98
00:07:39,880 --> 00:07:40,860
everything is fine.

99
00:07:40,870 --> 00:07:42,280
What is the problem with my code?

100
00:07:42,520 --> 00:07:47,560
But the only mistake you would have done is that you would have specified this space over here.

101
00:07:47,710 --> 00:07:49,360
And it is a very minor mistake.

102
00:07:49,360 --> 00:07:52,880
And such kind of mistakes are very, very, very, very difficult to find.

103
00:07:53,440 --> 00:07:56,370
So I hope you have understood that.

104
00:07:56,590 --> 00:08:02,650
So these were some of the basically methods through which you can have multi-line strings in Ruby.

105
00:08:02,920 --> 00:08:04,750
I guess those were five of the methods.

106
00:08:05,500 --> 00:08:07,530
And I hope you have understood those methods.

107
00:08:08,260 --> 00:08:13,720
And in the future tutorials, we will be needing these methods to have multiline strings so you can

108
00:08:13,720 --> 00:08:14,940
use any of them there.

109
00:08:15,670 --> 00:08:20,110
If you want to have multiline strings and that you want to have interpellation, then you have to use

110
00:08:20,110 --> 00:08:22,450
the percentage capital Q format.

111
00:08:22,780 --> 00:08:26,890
If you want to have no interpellation, then you can go on with the small.

112
00:08:26,890 --> 00:08:27,730
Q I guess.

113
00:08:27,730 --> 00:08:32,980
And then if you want to have a normal multi-line string, then you can go on with the first and second

114
00:08:32,980 --> 00:08:33,280
method.

115
00:08:33,400 --> 00:08:37,050
So these are the method you will be using a lot in the future tutorials.

116
00:08:37,870 --> 00:08:44,890
So the purpose of this tutorial was to just give you a representation of how to represent multiline

117
00:08:44,890 --> 00:08:45,700
strings in Ruby.

118
00:08:45,970 --> 00:08:47,650
So I guess that's it with this story.

119
00:08:47,770 --> 00:08:49,420
Thank you so much, guys, for watching.

120
00:08:49,420 --> 00:08:51,850
And I'll see you guys in the next Dorio.
