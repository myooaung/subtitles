WEBVTT
1
00:00:00.330 --> 00:00:01.230
Hey, guys, what's up?

2
00:00:01.260 --> 00:00:04.940
This is American, and I welcome you to an editorial on this course on Ruby.

3
00:00:04.950 --> 00:00:07.920
And in this story, we are going to be covering two more functions.

4
00:00:08.160 --> 00:00:11.550
You are going to see the index and we are going to see the R index.

5
00:00:11.820 --> 00:00:17.670
So starting on with the first one that is index index is a string class method in Ruby, which is used

6
00:00:17.670 --> 00:00:23.160
to act on the index of the first occurrence of the given substring or pattern in the given string.

7
00:00:23.320 --> 00:00:26.460
It specifies the position in the string to begin the search.

8
00:00:26.500 --> 00:00:30.660
If the second parameter is present, it will return nil.

9
00:00:30.660 --> 00:00:36.690
If nothing is found, then if you talk about this index of this function, then it is right.

10
00:00:36.690 --> 00:00:41.340
Or here it is string dot index and it accepts parameter.

11
00:00:41.340 --> 00:00:43.890
That is the string in the given string.

12
00:00:43.890 --> 00:00:48.210
So it is basically a part of the string which you have specified.

13
00:00:48.210 --> 00:00:48.480
Right.

14
00:00:48.520 --> 00:00:51.330
Well you have to choose certain characters from it.

15
00:00:53.100 --> 00:00:58.020
Then comes the second function we are going to be covering in this tutorial is going to be the R index

16
00:00:58.020 --> 00:01:04.260
function and it returns the index of the last occurrence of the given substring character or pattern

17
00:01:04.260 --> 00:01:05.270
in the given string.

18
00:01:05.520 --> 00:01:10.290
And it also returns null if nothing is found out of the second parameter is present.

19
00:01:10.290 --> 00:01:17.730
It specifies the position in the string to and the search character is beyond this point that will not

20
00:01:17.730 --> 00:01:18.360
be considered.

21
00:01:18.510 --> 00:01:23.450
So if you talk about the syntax of this second function, it is right on your screens.

22
00:01:23.460 --> 00:01:25.500
It is string, dot are index.

23
00:01:25.500 --> 00:01:32.580
And then again, the parameter which you can see is a character that is a part or you can say some selected

24
00:01:32.580 --> 00:01:33.360
characters.

25
00:01:34.470 --> 00:01:36.750
From whatever strength is present right over here.

26
00:01:37.690 --> 00:01:44.170
So let's do some very simple and quick examples of both these functions and see how they can be applied

27
00:01:44.620 --> 00:01:48.130
on some strings so long to Atem.

28
00:01:49.750 --> 00:01:55.650
So starting off with the first function, that was the index functions for that, what we need is first

29
00:01:55.690 --> 00:01:56.160
a string.

30
00:01:56.170 --> 00:01:58.690
So we will initialize a string and storage in a variable.

31
00:01:58.690 --> 00:02:03.980
Let's say our string is some kind of word.

32
00:02:04.840 --> 00:02:05.290
All right.

33
00:02:05.300 --> 00:02:07.280
So we have this string now over here.

34
00:02:07.450 --> 00:02:11.080
Now, what we want to check in is we are going to write in votes.

35
00:02:12.020 --> 00:02:20.060
You're going to write an e dot index and we are going to choose is that we are going to choose a character

36
00:02:20.060 --> 00:02:25.340
which is going to be specified right over here, and that character is going to be a part of something

37
00:02:25.340 --> 00:02:25.920
from here.

38
00:02:26.240 --> 00:02:30.680
So let's say I want to know the position of this all, which is right on a hill.

39
00:02:31.950 --> 00:02:37.220
Run the score and you can see that I have got one, because the position starts on from zero, this

40
00:02:37.220 --> 00:02:39.460
is the zero position, then this is the first position.

41
00:02:39.470 --> 00:02:40.670
This is the second position.

42
00:02:40.700 --> 00:02:41.790
This is the third position.

43
00:02:41.810 --> 00:02:42.890
This is the fourth position.

44
00:02:43.260 --> 00:02:49.820
For example, if I just specify, let's say, Dujayl or underscored and you can see that you've got

45
00:02:49.820 --> 00:02:50.600
four over here.

46
00:02:50.600 --> 00:02:51.200
That is zero.

47
00:02:51.200 --> 00:02:52.350
One, two, three, four.

48
00:02:52.640 --> 00:02:59.360
So basically, as I told you, that this index function is going to on the first occurrence of the given

49
00:02:59.360 --> 00:03:02.220
substring our pattern in the string.

50
00:03:02.420 --> 00:03:05.840
So this is the string and this is basically the character.

51
00:03:05.840 --> 00:03:11.360
And we want to see that where this character has occurred in the string.

52
00:03:11.360 --> 00:03:17.480
We want to know the index or you can say the position of this character in the string that is eight

53
00:03:17.630 --> 00:03:19.890
and we have got this world over here.

54
00:03:19.910 --> 00:03:22.660
So it is going to retain the position at which this is store.

55
00:03:23.090 --> 00:03:27.680
Now, for example, Youlus just type in something that is not a part of this string.

56
00:03:27.860 --> 00:03:33.160
You're underscored and you can see that it has returned nothing a space.

57
00:03:33.380 --> 00:03:40.100
So this means that this character is not a part of this string right over here, which you have specified.

58
00:03:41.300 --> 00:03:47.930
So now moving towards the second part of this tutorial that deals with another function, that is the

59
00:03:47.930 --> 00:03:52.910
R index function, and as you know that the difference between an index and our index is that index

60
00:03:52.910 --> 00:03:59.180
returns the first occurrence of the given substring and the R index returns the index of the last occurrence

61
00:03:59.180 --> 00:04:00.170
of the given substring.

62
00:04:00.200 --> 00:04:02.060
So let's say we have the very same word.

63
00:04:02.300 --> 00:04:04.660
You just specify our index over here.

64
00:04:04.970 --> 00:04:09.200
You're going to specify, let's say, w Oakhill.

65
00:04:10.900 --> 00:04:11.830
Around this gold.

66
00:04:13.140 --> 00:04:14.340
Oops, we got nothing.

67
00:04:14.610 --> 00:04:21.470
And the reason behind this is that this O'Haire is also case sensitive since this is in capital.

68
00:04:21.480 --> 00:04:23.220
So you have to write in capitals.

69
00:04:23.260 --> 00:04:24.480
We'll hear more on this.

70
00:04:24.480 --> 00:04:24.780
Good.

71
00:04:24.780 --> 00:04:27.750
And it has returned zero, which is the index.

72
00:04:28.110 --> 00:04:31.920
Now, for example, if we have one more WOFL.

73
00:04:32.870 --> 00:04:38.420
That is basically the fifth position, so I now run this code, it is going to return five, as I told

74
00:04:38.420 --> 00:04:42.090
you, that our index returns the index of the last occurrence of the given substring.

75
00:04:42.110 --> 00:04:49.580
So in our case, w it is going to search throughout this string for O.W. And it is going to give me

76
00:04:49.580 --> 00:04:54.450
the index of where this has occurred the very last time.

77
00:04:54.740 --> 00:04:59.450
So if I use the index functional here on the score, it is going to give me the first occurrence.

78
00:04:59.450 --> 00:05:01.310
That is zero right over here.

79
00:05:01.310 --> 00:05:04.740
And if I use our index, you have already seen that it has returned me five.

80
00:05:04.760 --> 00:05:09.620
And this is what is basically the difference between the two function index and our index.

81
00:05:10.070 --> 00:05:14.860
So I hope you are clear about both these functions and the difference between these two.

82
00:05:15.110 --> 00:05:16.820
So I guess that's it with this tutorial.

83
00:05:16.850 --> 00:05:18.380
Thank you so much, guys, for watching.

84
00:05:18.380 --> 00:05:20.300
And I'll see you guys in the next trattoria.
