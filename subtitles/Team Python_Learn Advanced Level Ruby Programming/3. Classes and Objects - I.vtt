WEBVTT
1
00:00:00.360 --> 00:00:01.320
Hey, guys, what's up?

2
00:00:01.350 --> 00:00:04.800
This is American, and I welcome you to another Dooralong discourse on drugs.

3
00:00:05.070 --> 00:00:10.910
And in this video, we are going to talk specifically about glasses and object.

4
00:00:11.250 --> 00:00:16.830
So we are going to split this into two parts where we are going to discuss glasses and object and we

5
00:00:16.830 --> 00:00:19.160
are going to discuss a lot about glasses and objects.

6
00:00:19.500 --> 00:00:22.670
So we are going to study about the stats and behavior.

7
00:00:22.680 --> 00:00:27.330
Then we are going to see how a constructor function can be initialized and we are going to see about

8
00:00:27.330 --> 00:00:28.510
instance variable.

9
00:00:28.510 --> 00:00:33.840
Then we are going to see an instance method and there is going to be a lot that is going to be covered

10
00:00:33.960 --> 00:00:35.900
specifically on glasses and objects.

11
00:00:35.910 --> 00:00:38.590
And as I told you, we are going to split it into two parts.

12
00:00:38.880 --> 00:00:40.460
So here is the first part.

13
00:00:40.980 --> 00:00:45.230
So starting on with the states and behavior of class is an object.

14
00:00:45.250 --> 00:00:49.490
So as we mentioned earlier, we use glasses to basically create objects.

15
00:00:49.830 --> 00:00:53.220
Now, when defining a class, we typically focus on two things.

16
00:00:53.220 --> 00:00:55.220
That is states and behaviors.

17
00:00:55.470 --> 00:00:59.210
Now the state is going to track attributes for individual objects.

18
00:00:59.370 --> 00:01:03.330
There is the behaviors are what objects are capable of doing.

19
00:01:04.540 --> 00:01:10.510
Now, for example, if you use our human glass from earlier, we may want to create two human object.

20
00:01:10.510 --> 00:01:13.910
One is named as, let's say, bulb, and one is named as John.

21
00:01:14.200 --> 00:01:19.840
Now, they are both the human objects, but they may contain different information, such as the name

22
00:01:20.050 --> 00:01:22.570
of the person that may be either John or Bob.

23
00:01:22.600 --> 00:01:24.230
Then comes the word.

24
00:01:24.460 --> 00:01:27.910
They may have different widths, then come to hide.

25
00:01:27.910 --> 00:01:29.150
They may have different heights.

26
00:01:29.410 --> 00:01:33.340
Now, we would use the instance variable to drag this information.

27
00:01:33.370 --> 00:01:36.310
Now this should tell you that instance variable.

28
00:01:36.310 --> 00:01:44.630
Ah, scope and the object level and how and and this is basically how objects keep track of their state.

29
00:01:45.040 --> 00:01:51.370
Now, even though there are two different objects, both are still objects of the class human and contain

30
00:01:51.370 --> 00:01:52.710
identical behaviours.

31
00:01:52.720 --> 00:01:59.320
For example, both the human objects should be able to walk, run, jump and do other steps that a human

32
00:01:59.320 --> 00:01:59.980
can perform.

33
00:02:00.130 --> 00:02:04.990
And they are going to perform basically all the common behaviors of a human being.

34
00:02:05.440 --> 00:02:12.130
Now we define this behavior as instance method in a class instance, method defined in a class are available

35
00:02:12.130 --> 00:02:13.850
to objects of that class.

36
00:02:13.870 --> 00:02:20.590
So in short instance, variable keep track of the state and the instance method exposed behavior for

37
00:02:20.590 --> 00:02:21.080
object.

38
00:02:22.210 --> 00:02:25.390
So let's take a closer look at how to define them in a class.

39
00:02:25.420 --> 00:02:31.000
So we will start on with defining a constructor function and then we are going to move on with instance

40
00:02:31.000 --> 00:02:32.600
variables and instance method.

41
00:02:32.980 --> 00:02:38.770
So if you talk about initializing a new object, we will still use our human class from before, but

42
00:02:38.770 --> 00:02:42.170
we will be removing the functionality that existed in the previous to drill.

43
00:02:42.220 --> 00:02:47.770
And we are going to start on fresh and we are going to modify the class by adding and initialize method

44
00:02:47.770 --> 00:02:51.030
that is also going to be known as a constructor function.

45
00:02:51.370 --> 00:02:54.520
So we are going to define our class.

46
00:02:57.980 --> 00:03:00.450
And the name is going to be human for sure.

47
00:03:00.470 --> 00:03:05.930
And inside this world, we are going to do is that we are going to define a function that is known as

48
00:03:05.930 --> 00:03:06.970
initialise.

49
00:03:07.790 --> 00:03:11.870
Now, inside this function, we are going to simply write inputs.

50
00:03:13.800 --> 00:03:15.360
Object has been.

51
00:03:18.420 --> 00:03:19.500
Initialised.

52
00:03:21.060 --> 00:03:24.450
And we are going to end the function and we are going to end the glass as well.

53
00:03:24.480 --> 00:03:26.680
Then comes the initialization of the objects.

54
00:03:26.700 --> 00:03:27.150
All right.

55
00:03:27.150 --> 00:03:33.120
Here we are going to create an object that is John, and we are going to write in human dot new.

56
00:03:33.540 --> 00:03:35.790
And that is going to basically create our object.

57
00:03:35.790 --> 00:03:42.090
If you just run this code, you can see that it has printed out object has been initialized.

58
00:03:42.600 --> 00:03:48.840
Now, this Ohare is basically something that is actually building because when you call in something

59
00:03:48.840 --> 00:03:54.000
like New O'Haire, for example, if I have, let's say, one more function of a hill, let's say the

60
00:03:54.000 --> 00:03:56.100
name of the function is an eye or.

61
00:03:57.170 --> 00:04:03.860
Just leave it like that and just move down here and write in both second MetroHealth.

62
00:04:08.250 --> 00:04:10.590
And finally, and this function.

63
00:04:11.810 --> 00:04:17.030
So if I just run this code, you can see that still it has branded me this, but not this from here.

64
00:04:17.060 --> 00:04:22.610
Now, the reason behind this is that the initialize method is going to get called every time you create

65
00:04:22.610 --> 00:04:23.330
a new object.

66
00:04:23.600 --> 00:04:24.560
Now, that is odd.

67
00:04:24.800 --> 00:04:27.580
Don't we call the new method when we create an object?

68
00:04:27.620 --> 00:04:28.160
Yes.

69
00:04:28.340 --> 00:04:33.260
Calling the new class method eventually lead us to initialize the instance method.

70
00:04:33.650 --> 00:04:37.410
Now we will talk about the difference between class method and instant's method later.

71
00:04:37.640 --> 00:04:43.430
Now, in this example, instantiating a new human object triggered the initialize method and resulted

72
00:04:43.430 --> 00:04:46.320
in in the string being outputted.

73
00:04:46.490 --> 00:04:50.840
Now we refer to the initialize method as a constructor function, as I told you before, because it

74
00:04:51.200 --> 00:04:54.350
is going to get triggered whenever we create a new object.

75
00:04:54.380 --> 00:05:00.890
So this new Ohare is now not only going to call in the new class, but it is also going to trigger a

76
00:05:00.890 --> 00:05:03.200
function that is known as the initialize function.

77
00:05:03.200 --> 00:05:06.110
And that is basically what is going to be in.

78
00:05:06.110 --> 00:05:11.210
If you just change the spelling of this, then this function over here is not going to get called with

79
00:05:11.210 --> 00:05:13.020
this new object, Abargil.

80
00:05:13.310 --> 00:05:14.930
So not now the new object.

81
00:05:14.930 --> 00:05:17.520
It is Akua that is basically referring to a class.

82
00:05:17.540 --> 00:05:18.830
So just remove this from here.

83
00:05:18.950 --> 00:05:22.550
So basically, this is a constructor function in Ruby.

84
00:05:23.690 --> 00:05:30.410
Then comes the concept of the instance variables, so now that we have know how to use the constructors

85
00:05:30.410 --> 00:05:36.360
in Ruby, let us create a new object and instantiate it with some state, let's say, like a name.

86
00:05:36.650 --> 00:05:43.520
So what we will do is that right, a hill, instead of this stuff being printed, what we are going

87
00:05:43.520 --> 00:05:48.950
to do is that we are going to initialize a name using the constructor function because the constructor

88
00:05:48.950 --> 00:05:53.840
function is basically used for initialization of the initial stuff.

89
00:05:53.840 --> 00:05:56.920
And that's why it is also known as the initialize function.

90
00:05:57.170 --> 00:05:59.180
So we are going to let's initialize a name.

91
00:05:59.180 --> 00:06:05.120
So we are going to write another name equal to name, and that is that whatever is going to be this

92
00:06:05.120 --> 00:06:08.290
Ohare is basically going to be stored in this variable.

93
00:06:08.450 --> 00:06:11.090
So this Ohare is going to get received over here.

94
00:06:11.100 --> 00:06:12.780
So we are going to write a name over here.

95
00:06:13.070 --> 00:06:18.680
So right where we are basically creating the new object, we will now pass the new class.

96
00:06:18.680 --> 00:06:24.440
Some arguments and those arguments whenever the initialize function is going to get triggered, these

97
00:06:24.440 --> 00:06:29.810
arguments that are passed into the new class that are going to get passed through the initialize function

98
00:06:29.810 --> 00:06:30.250
as well.

99
00:06:31.800 --> 00:06:36.040
So right away here, we are going to pass in the name that is, let's say, John, so we are going to

100
00:06:36.050 --> 00:06:37.700
include it in quotation marks as well.

101
00:06:38.370 --> 00:06:46.230
And what we are going to do now is that you can write Herbert's name on this and and and and and you

102
00:06:46.230 --> 00:06:48.630
can see that John has got printed.

103
00:06:49.080 --> 00:06:51.890
Now, you'll notice something new over here.

104
00:06:52.140 --> 00:06:58.890
The Aderet name variable looks different because it has the added of symbol in front of it.

105
00:06:59.070 --> 00:07:02.590
Now, this is what is called an instance variable in Ruby.

106
00:07:02.730 --> 00:07:07.380
Now it is a variable that exists as long as the object instance exists.

107
00:07:07.380 --> 00:07:10.800
And it is one of the ways we tie data to object.

108
00:07:10.980 --> 00:07:12.960
Now, it does not die.

109
00:07:12.960 --> 00:07:19.390
After the initialize method is run, it lives on to be referenced in the object instance is destroyed.

110
00:07:19.590 --> 00:07:24.750
Not in the above example or initialize method takes a parameter that is called as name.

111
00:07:25.050 --> 00:07:28.320
You pass on the perimeter to the initialize method through the new class.

112
00:07:28.680 --> 00:07:35.180
And when we just created an object, as you have seen down right here, the text John got printed.

113
00:07:35.520 --> 00:07:42.000
So basically the string, John is being passed from the new method through the through to the initialize

114
00:07:42.000 --> 00:07:45.200
method and is going to be assigned to the local variable name.

115
00:07:45.510 --> 00:07:47.130
Now within the constructor.

116
00:07:47.310 --> 00:07:54.780
We then said the instance variable that is right or here that is at the rate of name and we make it

117
00:07:54.780 --> 00:08:01.220
equal to name, which results in assigning the string, John, to the at the rate of name instance variable.

118
00:08:01.410 --> 00:08:07.410
Now from this example, we can see that instance variables are basically responsible for keeping track

119
00:08:07.410 --> 00:08:10.180
of information about the state of an object.

120
00:08:10.530 --> 00:08:17.610
Now, in this line of code where we have the name of the John object is the string, John.

121
00:08:18.060 --> 00:08:23.660
Now, this date for the object is tracked in the instance variable that is at the rate of name.

122
00:08:23.940 --> 00:08:29.010
So if it created another a human object, for example, with, let's say, Bob this time.

123
00:08:29.250 --> 00:08:30.930
So if you just read an.

124
00:08:32.890 --> 00:08:34.960
Bob, equal to human dot.

125
00:08:36.000 --> 00:08:44.310
New and we just passed and Bob from here, then the add the rate of name instance variable for the Bob

126
00:08:44.310 --> 00:08:45.840
object would contain the string.

127
00:08:45.840 --> 00:08:52.910
Bob every object state is unique and instance variable are how we are going to keep track of it.

128
00:08:53.100 --> 00:08:57.870
So if you just run this code, you can see that you've got John and you've got Bob.

129
00:08:58.110 --> 00:09:01.290
So as I told you, every object state is unique.

130
00:09:01.770 --> 00:09:04.880
This object here, it's state is unique.

131
00:09:04.890 --> 00:09:09.060
This object over here, it's state is no doubt that it has the property.

132
00:09:09.060 --> 00:09:12.420
For example, John Kanwal, John can run John Gantheaume.

133
00:09:12.630 --> 00:09:14.850
Similarly, Bob can walk, run, jump.

134
00:09:14.850 --> 00:09:19.950
And both have the properties that are basically the common properties of a human being.

135
00:09:19.950 --> 00:09:25.860
But if you talk about the object state, then it is going to be unique and instance variable are basically

136
00:09:25.860 --> 00:09:32.550
the concept with which with the help of which basically we are going to keep track of that uniqueness

137
00:09:32.550 --> 00:09:33.780
of the object state.

138
00:09:35.120 --> 00:09:38.430
So I hope that instance variable concept is clear.

139
00:09:38.450 --> 00:09:42.140
So if you are clear about that, so let's move on to the next part.

140
00:09:42.350 --> 00:09:44.390
That is about the instance method.

141
00:09:44.390 --> 00:09:49.820
And as I told you, that instance variable are basically what that is going to help us with the behavior

142
00:09:49.820 --> 00:09:50.450
of the object.

143
00:09:50.690 --> 00:09:53.890
So right now, our human class can't really do anything.

144
00:09:54.110 --> 00:10:01.280
So let us give it some behaviors like let's say dog walk or you can just define in any kind of method.

145
00:10:02.320 --> 00:10:06.790
So right over here, we are going to define one more function and we're going to just remove this from

146
00:10:06.790 --> 00:10:07.110
here.

147
00:10:08.330 --> 00:10:15.230
And right down here, what we are going to do is that we are going to define a behavior of a human so

148
00:10:15.230 --> 00:10:20.130
the behavior of humans that he can either talk or you can do a lot of stuff.

149
00:10:20.150 --> 00:10:22.040
So we are going to just use the talkable help.

150
00:10:22.490 --> 00:10:27.080
And right here where we are going to do is that we are going to write and thoughts.

151
00:10:29.210 --> 00:10:33.260
Hello and yes, and this oakhill.

152
00:10:34.990 --> 00:10:36.410
So right down here.

153
00:10:36.430 --> 00:10:42.550
Now, what you can do is that we just remove this for now or just will do it right over here.

154
00:10:42.970 --> 00:10:48.520
So right here, what we can do is that we can now access this function dog and how to access that.

155
00:10:48.520 --> 00:10:53.340
We are going to use the object that is John, and we are going to write in Dot Doc.

156
00:10:53.980 --> 00:10:58.000
So if you just run this code, you can see that Halo has been printed.

157
00:10:58.460 --> 00:11:02.950
Now, you can also use the return concept of a Harrisonville if you just remove this stuff from here

158
00:11:02.950 --> 00:11:03.670
and just write in.

159
00:11:03.670 --> 00:11:04.030
Hello.

160
00:11:04.300 --> 00:11:08.180
And if you just now run this code, you can see that nothing happens.

161
00:11:08.200 --> 00:11:10.840
Now, this is because the dog method return the string.

162
00:11:10.840 --> 00:11:11.100
Hello.

163
00:11:11.110 --> 00:11:14.800
But now what we are going to do is that now we need to print it out.

164
00:11:14.800 --> 00:11:18.650
So we should add both in front of John Dog.

165
00:11:18.760 --> 00:11:20.260
So we are going to ride in boats.

166
00:11:20.260 --> 00:11:23.870
John, that dog over here are you can just ride in Putzel over here as well.

167
00:11:23.890 --> 00:11:26.710
So these are basically the two ways you can just print out something.

168
00:11:26.740 --> 00:11:30.760
So if you now just run this code, you are going to see that Halo has been printed because Hallal was

169
00:11:30.760 --> 00:11:31.960
written right over here.

170
00:11:32.290 --> 00:11:34.900
And using this, you can just print it out.

171
00:11:36.340 --> 00:11:44.160
Now, we should see that the output of our program in the spring is hello, and we told John to talk

172
00:11:44.380 --> 00:11:45.250
and he did.

173
00:11:45.460 --> 00:11:51.690
Now, suppose we have the other object that is basically Bob, and we also want Bob to talk.

174
00:11:51.880 --> 00:11:56.530
So to make Bob Dole what we are going to do is that we are going to write in votes.

175
00:11:58.620 --> 00:12:03.390
Bob got a dog, and right here you can just specify something like what's?

176
00:12:05.510 --> 00:12:11.990
John is talking and write down here, you can just write in put.

177
00:12:13.790 --> 00:12:21.840
Bob is talking Ronda's good, and you can see that both are talking and both are saying hello.

178
00:12:22.190 --> 00:12:28.910
Now, our second Bob object basically can also as a tool, you perform the human behaviors again.

179
00:12:28.910 --> 00:12:34.930
All the objects of the same class have the same behavior as to which they contain a different state.

180
00:12:35.240 --> 00:12:38.180
Here, the differing state is the name.

181
00:12:38.510 --> 00:12:45.320
Now, what if you want to not just say hello, but say John says hello in our instance method, what

182
00:12:45.320 --> 00:12:52.850
is which is what all the methods are so far we have access to instance variable as well, so we can

183
00:12:52.850 --> 00:13:00.710
use the string interpolation concept and change our talk method to something so that the output printed

184
00:13:00.710 --> 00:13:02.150
is basically what's the name?

185
00:13:02.150 --> 00:13:03.360
And then it says hello.

186
00:13:03.800 --> 00:13:08.030
So what we can do is that we can just modify this function a bit.

187
00:13:09.430 --> 00:13:14.290
And we are going to use quotation marks and in here, what we are going to do is a brilliant Criden

188
00:13:14.290 --> 00:13:17.520
hashtag and we are going to write an advocate of names.

189
00:13:17.530 --> 00:13:21.010
So this is basically the instance variable concept.

190
00:13:21.250 --> 00:13:23.410
And we are going to write and says.

191
00:13:24.570 --> 00:13:25.620
Hello to all.

192
00:13:27.390 --> 00:13:32.920
And good enough, I guess so if you now just run this code.

193
00:13:33.630 --> 00:13:38.730
All right, so you can see right here that it says John says hello to all and right down here it says

194
00:13:39.000 --> 00:13:40.920
Bob says hello to all.

195
00:13:41.160 --> 00:13:48.150
Now, the reason behind this is that the state and behavior are now combined in this function of a hill.

196
00:13:48.660 --> 00:13:54.300
Now, what is the reason behind this is because both the objects are referring to this function that

197
00:13:54.300 --> 00:14:00.080
is Def Dog and both are going to access whatever is going to get written over here.

198
00:14:00.240 --> 00:14:06.080
But since we have used the concept of the instance variable, an instance method at the same time,

199
00:14:06.390 --> 00:14:13.050
so when the name is going to pass, it will help because we are not passing in the name to this over

200
00:14:13.050 --> 00:14:13.300
here.

201
00:14:13.440 --> 00:14:20.100
And as I told you before that, when this initialize function ends, the at the rate of name, which

202
00:14:20.100 --> 00:14:25.260
has basically the name we are going to pass in when initializing the object, it is not going to die

203
00:14:25.260 --> 00:14:30.030
out, but it is going to remain right there until and unless that object is going to that.

204
00:14:30.030 --> 00:14:34.940
But since the object has not died so far, when we are calling John a hill.

205
00:14:35.280 --> 00:14:39.000
So that's why at the rate of NIM basically contains the name of John.

206
00:14:39.030 --> 00:14:46.710
So when we just write in John Doxa, so when you are accessing dog using the John object, so this aderet

207
00:14:46.710 --> 00:14:50.340
of Nim basically contains John because of the concept of instance variable.

208
00:14:50.340 --> 00:14:58.040
And as I told you, that the state of an object is not unique, but the behavior is going to be unique.

209
00:14:58.380 --> 00:15:04.680
So that's why at the rate of NIM for a John, it's going to print John over here and at the rate of

210
00:15:04.680 --> 00:15:10.110
name for Bob is going to print Bob and the remaining is going to remain the very same.

211
00:15:10.110 --> 00:15:14.970
That says hello to all, says hello to all because of the concept of instant's matter.

212
00:15:15.390 --> 00:15:22.560
So this example basically covered both concepts and how they can be framed into a simple and one example.

213
00:15:23.490 --> 00:15:26.190
Then comes the concept of accessor methods.

214
00:15:26.460 --> 00:15:33.600
Now what if we want to print out only the John's name so we could try some other code right from here

215
00:15:33.750 --> 00:15:35.280
and you could just write.

216
00:15:37.250 --> 00:15:38.060
In a hail.

217
00:15:40.240 --> 00:15:40.930
But.

218
00:15:43.250 --> 00:15:47.180
Not right here after initializing the objects, we're going to just do it right over here so you can

219
00:15:47.180 --> 00:15:55.910
just ride in boats John Dot name, and if you just run escort, you're going to see that it has basically

220
00:15:55.910 --> 00:15:58.810
generated an area that says undefined method name.

221
00:15:59.630 --> 00:16:02.180
And the reason behind this is that.

222
00:16:03.260 --> 00:16:09.500
If you just know the name, it is basically named as the no method error and no method error means that

223
00:16:09.500 --> 00:16:15.500
we have called a method does that basically does not exist or is unavailable to the object.

224
00:16:15.650 --> 00:16:21.560
If you want to access the objects name, which is stored in the Adelaide of named variable, that is

225
00:16:21.560 --> 00:16:22.640
the instance variable.

226
00:16:22.790 --> 00:16:25.780
We have to create a method that will return the name.

227
00:16:25.790 --> 00:16:28.640
We can call it as, let's say, get name.

228
00:16:28.640 --> 00:16:35.500
And its only job will be to return the name in the at the rate of name instance variable.

229
00:16:35.720 --> 00:16:40.160
So we will use the very same example and we will define one more functional hail.

230
00:16:41.750 --> 00:16:47.930
Right down here, you can just ride in death and let's say the name of the function is get name and

231
00:16:47.930 --> 00:16:50.510
right here you can just right at the right of name.

232
00:16:50.660 --> 00:16:55.550
And when you don't drive boats or anything, go here, you know that it is basically something that

233
00:16:55.550 --> 00:16:57.390
is going to get done as it is.

234
00:16:57.740 --> 00:17:03.080
So this Namoa here is going to get returned to the place from where this function is going to get called.

235
00:17:03.380 --> 00:17:05.540
So if you just run and this is a hill.

236
00:17:07.420 --> 00:17:13.800
And right here to simplify a bit, let's just remove this for now and let's just remove this as well

237
00:17:13.810 --> 00:17:14.350
for now.

238
00:17:14.530 --> 00:17:19.660
So I guess that's simple enough now and now what you can do is that all you have to do is that you have

239
00:17:19.660 --> 00:17:23.830
to initialize the object that is joining with the human, not new, and you have to pass in the value

240
00:17:23.830 --> 00:17:24.490
of the name.

241
00:17:24.860 --> 00:17:33.250
Then what you can do is that you can just write in John Dot, get underscore name on this and now the

242
00:17:33.250 --> 00:17:35.140
name is going to get printed.

243
00:17:35.560 --> 00:17:42.100
So what we have done here that we have added arget name method and it should return the value of our

244
00:17:42.100 --> 00:17:42.280
ad.

245
00:17:42.280 --> 00:17:47.110
The narrator of name instance variable, as you can see right over here, this is going to return the

246
00:17:47.110 --> 00:17:51.070
value right here and since we are using Pozzallo here.

247
00:17:51.080 --> 00:17:53.620
So that's why when we just run this code, it work.

248
00:17:53.950 --> 00:17:57.310
We now have a getter method that is basically get name.

249
00:17:57.310 --> 00:17:58.810
But what if you want to change it?

250
00:17:58.810 --> 00:18:01.590
Let's say the name of the person that is that's a joint.

251
00:18:01.750 --> 00:18:03.490
So we want to change it now.

252
00:18:03.500 --> 00:18:08.710
That's when we reach for a setter method because a getter method is going to get the name, but a certain

253
00:18:08.710 --> 00:18:10.270
method is going to set the name.

254
00:18:11.710 --> 00:18:16.060
So to do it, it looks a lot like a getter method.

255
00:18:16.060 --> 00:18:19.930
But what we will do is that we will make some small changes.

256
00:18:20.320 --> 00:18:23.500
So right down here we will create one more function, that is.

257
00:18:24.470 --> 00:18:26.630
Set underscore a name.

258
00:18:29.490 --> 00:18:33.150
And in here, we are going to ride in at the rate of.

259
00:18:34.380 --> 00:18:36.000
Name equal to name.

260
00:18:40.020 --> 00:18:47.160
And we are going to end this function and this is also going to have equal do Mama Hill.

261
00:18:48.970 --> 00:18:55.600
So now to run this, what do you have to do is that you have to first set the name, so right down here,

262
00:18:55.600 --> 00:18:59.860
what you're going to do is that you are going to first write and Johnny go human, do the very same

263
00:18:59.860 --> 00:19:00.390
way.

264
00:19:00.670 --> 00:19:05.860
And then what you can do is that you can just write and post John Doe name so that you can see the name

265
00:19:06.310 --> 00:19:08.410
and then write down here.

266
00:19:08.440 --> 00:19:09.790
You can just write in votes.

267
00:19:12.010 --> 00:19:13.180
All name Oakhill.

268
00:19:14.960 --> 00:19:20.300
And if you just ride in position, get good name, it is going to print the oil name for you and now

269
00:19:20.300 --> 00:19:22.370
write down here you can just write in boots.

270
00:19:24.650 --> 00:19:25.340
New name.

271
00:19:26.900 --> 00:19:31.270
And now to set the new name, what you're going to do is that you are going to call in dysfunction,

272
00:19:31.280 --> 00:19:33.430
that is the set name function.

273
00:19:33.890 --> 00:19:39.920
So to do it, what you're going to do is that you're going to use the very same object that it's charged

274
00:19:39.920 --> 00:19:46.250
and you're going to need a capital all but a small O and you're going to write and set underscore name.

275
00:19:46.730 --> 00:19:49.310
And you are going to set the name right over here.

276
00:19:49.310 --> 00:19:56.630
That is, let's say, Tomaz this time and write down here you are again going to call the get method

277
00:19:56.630 --> 00:20:00.710
because now the name has been said to Thomas in place of John.

278
00:20:00.740 --> 00:20:04.560
So now when you call the get name, it is going to get the new name for you.

279
00:20:04.910 --> 00:20:13.280
So we are going to write in John Dodd, get a name, just run this code and you are going to see that

280
00:20:13.280 --> 00:20:16.660
it says all name John, new name Thomas.

281
00:20:16.970 --> 00:20:22.040
So as you can see, we have successfully changed the John name to the string Thomas.

282
00:20:23.110 --> 00:20:28.870
Now, the first thing you should notice about the setar method said name equal to is that Ruby, give

283
00:20:28.870 --> 00:20:35.830
us a special syntax to use it to use the set name method normally, which we would expect to do this

284
00:20:36.010 --> 00:20:42.430
as something like John Dodd said, naming Thomas where the entire set name is the method name and the

285
00:20:42.430 --> 00:20:45.160
string Thomas is the argument being passed into the method.

286
00:20:45.400 --> 00:20:51.790
Now Ruby recognizes that this is a CETRA method and it allows us to use the more natural assignment's

287
00:20:51.790 --> 00:20:54.260
index that is John set name equal to Thomas.

288
00:20:54.760 --> 00:21:01.240
Now, when you see this code just realized, there is a method that is named a set name equal to working

289
00:21:01.240 --> 00:21:01.960
behind the scene.

290
00:21:01.960 --> 00:21:06.070
And we are just seeing some ruby syntactical SHUGER.

291
00:21:06.490 --> 00:21:13.630
Finally, as a conventional ruby is typically you want to name those getter and setter method using

292
00:21:13.630 --> 00:21:17.760
the set name as the instance variable they are exposing and setting.

293
00:21:18.100 --> 00:21:21.720
So we will make the change to our code as well.

294
00:21:23.240 --> 00:21:31.160
Just scroll a bit up and in place of this get name, you are going to name it as name and do this,

295
00:21:31.160 --> 00:21:35.090
we are going to name it as name equal to Tannahill.

296
00:21:37.270 --> 00:21:42.460
And right down here, we are going to write another name equal to and which is basically what is going

297
00:21:42.460 --> 00:21:51.390
to get passed in over here, and I guess the rest is going to remain the very same with respect to this.

298
00:21:51.430 --> 00:21:54.160
Well, here we are going to just name it to name one here.

299
00:21:54.880 --> 00:21:58.020
And we are also going to just remove this stuff from here.

300
00:21:58.040 --> 00:21:59.440
Good enough on this.

301
00:21:59.890 --> 00:22:02.140
And you can see that you've got all name Newnam.

302
00:22:02.150 --> 00:22:06.750
But I guess there is some problem with is that a set name over here?

303
00:22:07.450 --> 00:22:08.630
Where are we using it?

304
00:22:08.650 --> 00:22:10.630
Yes, right here.

305
00:22:10.810 --> 00:22:12.190
It is now going to be name.

306
00:22:13.000 --> 00:22:16.240
So now we're on it and now it is going to run very perfectly.

307
00:22:16.240 --> 00:22:17.020
All name is John.

308
00:22:17.020 --> 00:22:19.120
New name is Thomas.

309
00:22:19.330 --> 00:22:25.750
Now, the reason behind changing the name was that Ruby is basically typically you want to name those

310
00:22:25.780 --> 00:22:31.100
getter and setter methods using the same name as the instance variable they are exposing and setting.

311
00:22:31.120 --> 00:22:37.270
So since our instance variable name was name, so that y that's what the professional approach was to

312
00:22:37.270 --> 00:22:42.580
also named the getter and setter method as the very same name as the instance variable that is being

313
00:22:42.580 --> 00:22:42.880
used.

314
00:22:42.910 --> 00:22:45.470
Perhaps that's why we have changed the names of a hill.

315
00:22:45.700 --> 00:22:50.950
Now you'll notice that writing those getter and setter methods took up a lot of room in our program

316
00:22:50.950 --> 00:22:52.590
for such a simple feature.

317
00:22:52.840 --> 00:22:59.170
And if you had other states we wanted to track, like, let's say height, weight and let's say more

318
00:22:59.170 --> 00:23:04.660
properties that are basically what human can do, then the class would be even more longer.

319
00:23:05.590 --> 00:23:11.830
Now, because these methods are so commonplace, Ruby has a way to automatically create these ketter

320
00:23:11.830 --> 00:23:18.550
and set a method for us using the edible D-R underscore accessor method, and that is what is basically

321
00:23:18.550 --> 00:23:20.750
a part of this part of the tutorial.

322
00:23:20.770 --> 00:23:27.660
So check out the refactoring of this very same code which we are about to just do.

323
00:23:27.940 --> 00:23:36.730
So what we are going to do is that we are going to have our attribute accessor and we are going to write

324
00:23:36.730 --> 00:23:40.570
an edible D-R, underscore it, see edible.

325
00:23:40.600 --> 00:23:42.750
So are that just attribute accessor?

326
00:23:43.090 --> 00:23:48.850
And we are going to write in the call and we are going to write in the variable that is basically storing

327
00:23:48.850 --> 00:23:49.360
the name.

328
00:23:50.850 --> 00:23:55.410
Now, the initialize function is going to remain the very same, it is going to be def initialize name

329
00:23:55.410 --> 00:23:57.630
and at the rate of naming, would you name the very same.

330
00:23:57.640 --> 00:24:04.490
But the difference that is going to occur is basically going to be in the getter and the Sedra method.

331
00:24:04.530 --> 00:24:09.330
That is, you are going to just remove this from here and then we are going to have the stop function

332
00:24:09.330 --> 00:24:13.680
that says John says hello to all and downhere.

333
00:24:13.680 --> 00:24:18.030
What you are going to do is that you are going to just create an object and you're going to write an

334
00:24:18.390 --> 00:24:22.620
old name and you're going to read and John Dort name, John Doe name to go to Thomson.

335
00:24:22.620 --> 00:24:25.470
And then you're going to try and put John name on this code.

336
00:24:25.470 --> 00:24:30.870
And you can see that the very same output has been generated, but the code has been minimized to a

337
00:24:30.870 --> 00:24:31.980
greater extent.

338
00:24:32.250 --> 00:24:38.250
C The attribute accessor method basically takes a symbol as an argument.

339
00:24:39.410 --> 00:24:46.430
And that was basically name now using this, it is going to create the method name for the getter and

340
00:24:46.430 --> 00:24:51.640
setter methods that one-Line replaced by basically two method definition.

341
00:24:51.950 --> 00:24:58.880
But what if we only want the getter method without the central method, then we would want to use the

342
00:24:58.880 --> 00:25:00.310
attribute return method.

343
00:25:00.320 --> 00:25:04.700
It works the same way, but only allows you to retrieve the instance variable.

344
00:25:04.880 --> 00:25:10.430
And if you only want the setter method, you can use the edible D-R underscore right or method.

345
00:25:10.850 --> 00:25:17.690
All of the attribute, all of the attribute methods basically take a symbol as a parameter.

346
00:25:17.690 --> 00:25:21.920
If there are much more strips you are tracking, you can use this index.

347
00:25:22.100 --> 00:25:27.290
So for example, if you are just talking about, let's say, not only name, but you're also talking

348
00:25:27.290 --> 00:25:31.370
about height, weight, and you also want to set the getter and setter methods for that.

349
00:25:31.370 --> 00:25:33.500
So you can just write in height.

350
00:25:33.500 --> 00:25:35.450
Let's say you can just write in.

351
00:25:37.460 --> 00:25:44.990
Way to go here and let's say you only want to use, let's say, the x axis dramatic, but you only want

352
00:25:44.990 --> 00:25:46.300
to set the getter method.

353
00:25:46.300 --> 00:25:54.370
So in place of this attribute accessor, what you can do is that you can just write an attribute reader.

354
00:25:54.620 --> 00:26:00.710
But since we are using attribute reader, which means that we only now have the CETRA method.

355
00:26:02.240 --> 00:26:09.020
Sorry, this means that we only have the Geter method without the federal method, so we this mean cannot

356
00:26:09.020 --> 00:26:09.680
change the name.

357
00:26:09.690 --> 00:26:12.640
So we will just remove this from here, who will run the school?

358
00:26:12.650 --> 00:26:14.850
And you can see that it's his old name is John.

359
00:26:15.110 --> 00:26:20.030
So basically, this is now only treating the Getraer method that was basically the get named in the

360
00:26:20.030 --> 00:26:20.660
previous case.

361
00:26:20.660 --> 00:26:26.510
And if you only want to use the setter method, then what you can do is that right over here you can

362
00:26:26.510 --> 00:26:29.660
just write and right there, over here.

363
00:26:29.660 --> 00:26:31.100
And that is going to do your job.

364
00:26:32.850 --> 00:26:39.090
Then comes the concept of accessor methods, so with getter and setter, etc. matters, we have a way

365
00:26:39.090 --> 00:26:41.670
to expose and change an object state.

366
00:26:41.910 --> 00:26:45.610
Now, we can also use these methods from within the class as well.

367
00:26:45.810 --> 00:26:51.870
Now, in the previous example, the dark method reference to the Adelaide of name instance variable.

368
00:26:52.170 --> 00:26:56.380
So it was the very same like that dog at the rate of name says hello to all.

369
00:26:56.700 --> 00:27:02.220
Now, instead of referencing the instance variable directly, we want to use the name getter method

370
00:27:02.460 --> 00:27:07.740
that we created earlier and that is given to us now by the attribute accessor.

371
00:27:07.950 --> 00:27:10.530
So we will change the dog method.

372
00:27:10.530 --> 00:27:15.720
And right here we are going to just remove this aderet sign from here.

373
00:27:16.290 --> 00:27:22.230
Now, can you spot the change by removing the add the rate of symbols we are now calling the instance

374
00:27:22.230 --> 00:27:25.110
method rather than the instance variable?

375
00:27:25.380 --> 00:27:27.030
Now, why do we have to do this?

376
00:27:27.180 --> 00:27:31.880
Why not just reference the Adelaide of name instance variable like we did before?

377
00:27:32.130 --> 00:27:38.010
Technically, you could just reference the instance variable, but it is generally a good idea to call

378
00:27:38.010 --> 00:27:39.330
the getter method instead.

379
00:27:39.810 --> 00:27:45.720
Now suppose we are keeping track of a Social Security number in an instance variable called, let's

380
00:27:45.720 --> 00:27:49.020
say at the rate of SSN that's done for Social Security number.

381
00:27:49.140 --> 00:27:52.700
And suppose that we don't want to expose the raw data.

382
00:27:53.160 --> 00:27:56.670
That is the entire Social Security number in our application.

383
00:27:56.940 --> 00:28:04.650
Now, whenever we retrieve it, we want to only display the last four digit and mask the rest like something

384
00:28:04.650 --> 00:28:07.320
x x, x, x, x, one, two, three, four.

385
00:28:07.530 --> 00:28:14.340
So if we were referencing the address of S as an instance variable directly, we would we would need

386
00:28:14.340 --> 00:28:21.000
to sprinkle our entire class with code and it will basically have to show our code.

387
00:28:22.250 --> 00:28:25.640
And we also have to use the split function with that now.

388
00:28:26.690 --> 00:28:29.060
It would have been something like.

389
00:28:31.780 --> 00:28:32.920
X, x, x.

390
00:28:34.140 --> 00:28:39.620
Dash X X, and it should have been something like Adrey of S.

391
00:28:39.620 --> 00:28:40.740
S and Dot.

392
00:28:41.890 --> 00:28:42.670
Split.

393
00:28:44.300 --> 00:28:51.620
With a dot operator, not like this, like this, and we are going to write in dot last, and what if

394
00:28:51.620 --> 00:28:56.990
we find a bug in this code or if someone says that we need to change the form into something else?

395
00:28:57.260 --> 00:29:03.290
Now, it is going to be much easier to just reference a getter method and make the change in one place.

396
00:29:03.300 --> 00:29:06.530
So for that you will need a function, let's say that is.

397
00:29:11.190 --> 00:29:18.450
SSN and in this function, what are you going to do is that you are going to use this very, very same

398
00:29:18.450 --> 00:29:23.560
line, so just remove this and this is going to be the part of the function and just end this function.

399
00:29:23.950 --> 00:29:31.590
Now, we can use the SSN instance method throughout our class to retrieve the Social Security number.

400
00:29:31.590 --> 00:29:37.000
Following this practice will save you some headache down the line, just like the Gedera method.

401
00:29:37.050 --> 00:29:39.990
We also want to do the same with the central method.

402
00:29:39.990 --> 00:29:44.870
Whenever we are changing the instance variable directly in our class, we should instead use the same

403
00:29:44.880 --> 00:29:45.360
dramatic.

404
00:29:45.360 --> 00:29:48.910
But there is a gotcha which we will cover next.

405
00:29:49.260 --> 00:29:57.060
So suppose we wanted to add two more states to track the human class that is, let's say, called height

406
00:29:57.060 --> 00:29:57.650
and weight.

407
00:29:57.930 --> 00:29:59.490
So I hope you understood this.

408
00:29:59.500 --> 00:30:00.810
Let's move this from now.

409
00:30:02.190 --> 00:30:04.970
So that all you that you have to just add in height and weight, right?

410
00:30:05.020 --> 00:30:14.010
Well, now that one line of code basically is going to give us the six getter and setter instances do

411
00:30:14.010 --> 00:30:19.010
for this the and center to get there and settle for this and to get there and settle for this.

412
00:30:19.230 --> 00:30:26.520
That makes it basically the sixth getter and setter instance methods name Namik will do height, weight,

413
00:30:26.880 --> 00:30:28.210
weight equal to.

414
00:30:28.260 --> 00:30:30.660
So these are basically going to be the six function now.

415
00:30:30.690 --> 00:30:36.210
It also gave us the three instance variable that is at the right of name at the rate of a height and

416
00:30:36.210 --> 00:30:37.320
aderet of weight.

417
00:30:37.530 --> 00:30:42.990
Now suppose we want to create a new method that allow us to change several state at once.

418
00:30:42.990 --> 00:30:48.810
That is, let's say colors change in full and it takes in the three parameters and the three arguments

419
00:30:48.810 --> 00:30:53.920
do the math that corresponds to the new name, new height and the new weight, respectively.

420
00:30:54.270 --> 00:31:00.840
Now, to implement this, what you can do is that right down here you can just create a function.

421
00:31:03.080 --> 00:31:09.020
That is change info and it is going to receive in three arguments, the first one is going to be the

422
00:31:09.020 --> 00:31:13.850
name, let's just write in and then ask for hide and W4 wait.

423
00:31:15.610 --> 00:31:19.480
And in this way, you can do is that you can just ride in at the rate of name equal to an.

424
00:31:22.790 --> 00:31:32.180
And you can just ride in at the rate of height, equal to edge and at the rate of weight equal to.

425
00:31:33.740 --> 00:31:36.590
W and you can just end this function.

426
00:31:37.650 --> 00:31:38.550
Right up here.

427
00:31:41.250 --> 00:31:49.440
So just to get caught up with all of our court, our entire human class now look like the court, we

428
00:31:49.440 --> 00:31:50.820
are going to.

429
00:31:52.430 --> 00:31:55.280
Just see right, right over here.

430
00:31:58.390 --> 00:32:04.300
Now, the initialize method or here is also going to get changed and in the initialize method now in

431
00:32:04.300 --> 00:32:08.070
place of only one argument, we are going to have three arguments.

432
00:32:08.080 --> 00:32:09.520
The name, the height.

433
00:32:11.080 --> 00:32:17.470
And the finally so right down here, we are going to write a name equal to and and we are going to ride

434
00:32:17.540 --> 00:32:24.880
at the rate of height, equal to edge and finally at the rate of weight equal to W.

435
00:32:26.470 --> 00:32:32.470
And we are going to have the dog function as it is that is that dog at the rate of name?

436
00:32:32.530 --> 00:32:35.910
No, at the rate where there's a hill that says hello.

437
00:32:35.920 --> 00:32:40.150
And then we are also going to have this change in function that is going to receive in three arguments.

438
00:32:40.150 --> 00:32:45.130
And it is going to be almost the very same as the the initializing function.

439
00:32:45.370 --> 00:32:49.780
And then we are going to have another function that is going to be.

440
00:32:53.240 --> 00:32:55.580
Def display function.

441
00:32:57.640 --> 00:33:03.130
And what this display function is going to do is that it is going to print out everything, go to hell.

442
00:33:03.520 --> 00:33:06.100
So we are going to write and name.

443
00:33:09.880 --> 00:33:14.830
Is and we are going to in Adelaide and we are going to place Namal Hill.

444
00:33:15.790 --> 00:33:25.750
Name is this and his weight is and we are going to write an the rate of weight and we are going to finally

445
00:33:25.750 --> 00:33:27.310
write in and.

446
00:33:34.190 --> 00:33:40.520
His height is and we are going to use interpellation again and we are going to ride in height.

447
00:33:42.490 --> 00:33:47.260
So that is going to do our job, but we also have to change in the calling card, try to hill.

448
00:33:49.200 --> 00:33:54.540
So what we are going to do is that we are going to create this John object right over here, John,

449
00:33:54.540 --> 00:34:00.860
equal to human dot new, but right over here now it is going to accept three arguments.

450
00:34:00.870 --> 00:34:02.150
The first one is going to be the name.

451
00:34:02.160 --> 00:34:04.440
Then we are going to pass and the height.

452
00:34:04.440 --> 00:34:06.520
Then we are going to pass in this way right away.

453
00:34:07.250 --> 00:34:10.140
So let's say the wait is sorry.

454
00:34:10.140 --> 00:34:11.010
The height is.

455
00:34:12.060 --> 00:34:20.340
Twelve inches, and you have to also pass individual, let's say the weight is 30 cagy.

456
00:34:22.220 --> 00:34:28.110
So this is the height, this is the weight, and this is finally the name and right down here.

457
00:34:28.140 --> 00:34:35.000
Now, if you just remove this stuff from here, if you just write in quotes, John Dodd.

458
00:34:36.430 --> 00:34:37.090
Display.

459
00:34:39.690 --> 00:34:44.550
Not or you, Audie, it's going to be both, and if you just run the scored.

460
00:34:46.090 --> 00:34:52.820
It says that unexpected and often, but yes, I guess right or here, I just forgot to place this and

461
00:34:52.820 --> 00:34:58.900
now run this and you can see that it his name is John and his weight is 30 Gidgee and his height is

462
00:34:59.170 --> 00:35:00.480
12 inches.

463
00:35:00.760 --> 00:35:06.010
So basically, that was the information that was printed because of the accessor method we are using

464
00:35:06.010 --> 00:35:06.700
right over here.

465
00:35:06.700 --> 00:35:13.220
The veteran center was set and we have just displayed our information using this display function now.

466
00:35:13.240 --> 00:35:17.500
Now, what you're going to do is that you are now going to change some information.

467
00:35:17.950 --> 00:35:25.270
So right down here, you are going to write in John Dot change info and using the change in for you

468
00:35:25.270 --> 00:35:27.670
are going to pass in some new information now.

469
00:35:27.670 --> 00:35:29.680
So let's say now the name is Bob.

470
00:35:31.440 --> 00:35:39.120
And let's say the height is the very same, that is 12 inches and let's say the weight has been changed.

471
00:35:39.150 --> 00:35:44.580
Now, the person has eaten a lot of, let's say, fast food and now he's, let's say 40.

472
00:35:45.870 --> 00:35:50.930
So now all you have to do is that you have to just ride in votes.

473
00:35:51.360 --> 00:35:52.290
John Dodd.

474
00:35:53.250 --> 00:36:00.540
Display run this code and right down here, you can see now that it's his name is Bob, his height is

475
00:36:00.540 --> 00:36:06.660
40 cagy and his weight is 12 inches, not just by calling the very same function.

476
00:36:06.870 --> 00:36:09.210
We have Jianjun for our information.

477
00:36:09.220 --> 00:36:15.630
So just like when we replaced accessing the instance variable directory directly with the getter method,

478
00:36:16.020 --> 00:36:18.660
we would also like to do the same with our CETRA method.

479
00:36:18.670 --> 00:36:24.580
So let's change the implementation of the change in full function that is right over here.

480
00:36:25.200 --> 00:36:30.510
So just remove Aderet from here at the rate from here and add the rate from here.

481
00:36:30.570 --> 00:36:36.910
Now to save space, we won't repeat the code from above, but we can see that the change in the method

482
00:36:37.020 --> 00:36:38.880
did not change the information.

483
00:36:38.880 --> 00:36:43.050
If you just ran this code, you can see that the information is now the very same.

484
00:36:43.230 --> 00:36:49.290
It says name is John, his weight is 30 gauge and his height is 12 inches, which is the very same as

485
00:36:49.290 --> 00:36:50.930
we have written right over here.

486
00:36:52.350 --> 00:36:58.210
So basically, what happened, why did our Sedra method work and the change in full method?

487
00:36:58.650 --> 00:37:02.730
Now that is basically something that is known as the calling method with the self.

488
00:37:02.970 --> 00:37:06.030
Now, the reason behind that, the name was not changed.

489
00:37:06.030 --> 00:37:11.000
When we just use we just remove the at the rate that was the instance variable thing from here.

490
00:37:11.370 --> 00:37:17.880
The reason our central method did not work is because Ruby thought we are initializing local variables.

491
00:37:18.090 --> 00:37:25.020
Now recall that to initialize or create new local variables, all we have to do is, for example, X

492
00:37:25.020 --> 00:37:28.670
equal to one, or let's say you have a string that is Halad.

493
00:37:29.070 --> 00:37:35.070
It turns out that instead of calling the name equal to Heidi, equal to our weight, equal to cetra

494
00:37:35.080 --> 00:37:40.740
methods, what we did was that we created three new local variables that are name, height and weight,

495
00:37:40.740 --> 00:37:42.310
which you can see right here.

496
00:37:43.260 --> 00:37:50.000
Now, that's definitely not what we wanted to do to disambiguate from creating a local variable.

497
00:37:50.010 --> 00:37:54.530
We need to use self-taught name to let Ruby know that we are calling a method.

498
00:37:54.540 --> 00:38:01.770
So our change in forgood should be updated with a self in place of the Adelaide, which was used right

499
00:38:01.770 --> 00:38:02.070
over here.

500
00:38:02.080 --> 00:38:07.380
So we're going to write and name you're going to write and self-taught height and we are going to write

501
00:38:07.380 --> 00:38:09.870
in self-taught way to a hill.

502
00:38:10.950 --> 00:38:14.650
So if you now run the school, you're going to see now information has been updated.

503
00:38:14.670 --> 00:38:20.200
Now it says name is Bob and it's where it is 40 Jóhannes height is 12 inches.

504
00:38:20.430 --> 00:38:27.300
Now, basically, this is going to tell the Ruby compiler that we are calling a setter method, not

505
00:38:27.300 --> 00:38:28.860
creating a local variable.

506
00:38:29.010 --> 00:38:34.020
To be consistent, we should also adopt this index for the getter method as well.

507
00:38:34.090 --> 00:38:35.450
So it is not required.

508
00:38:36.150 --> 00:38:37.190
So I.

509
00:38:37.230 --> 00:38:37.740
To a hill.

510
00:38:39.140 --> 00:38:41.330
You can just use cell phone here as well.

511
00:38:41.360 --> 00:38:47.840
You can just try it and self Dodd name, you can just write and solve, not hide and you can just write

512
00:38:47.840 --> 00:38:51.140
and self-taught hi to her.

513
00:38:51.140 --> 00:38:54.240
But this is what is not required if you just don't want to use it.

514
00:38:54.260 --> 00:38:55.190
You do not use it.

515
00:38:55.230 --> 00:38:55.990
You just run the school.

516
00:38:56.000 --> 00:39:00.820
You know, you can see that the output is the very same, which was if you just removed this from her.

517
00:39:00.980 --> 00:39:01.520
So.

518
00:39:02.790 --> 00:39:05.650
That is basically something that is optional in the display function.

519
00:39:06.060 --> 00:39:12.720
Finally, if we run our code with the updated change information, you have seen that the Selfs index

520
00:39:12.720 --> 00:39:15.420
has worked beautifully and the information has been changed.

521
00:39:15.810 --> 00:39:22.370
Now, the prefixing of the self is not strictly restricted to just the accessor method.

522
00:39:22.380 --> 00:39:25.170
You can use it with any instance method.

523
00:39:25.170 --> 00:39:29.970
For example, the Informatica is not a method given to us by the attribute accessor, but we can still

524
00:39:29.970 --> 00:39:33.000
call it using the self-taught INFL.

525
00:39:34.210 --> 00:39:38.440
So, for example, you have, let's say Metro Hell is just a and a bit.

526
00:39:39.260 --> 00:39:44.330
And let's say you have, let's say, a method of, well, let's say the name of the method is X.

527
00:39:46.330 --> 00:39:52.240
And right down here, you have let's say you can just call in self.

528
00:39:53.360 --> 00:39:53.990
Dot.

529
00:39:55.390 --> 00:40:01.780
Display and you can just end this right over here, run this and you can see that you have got your

530
00:40:01.780 --> 00:40:02.300
outputs.

531
00:40:02.620 --> 00:40:08.890
So that's how basically all stuff related to objects and classes is going to go on in the next iteration.

532
00:40:08.920 --> 00:40:14.260
We are going to continue with classes and objects and that is going to be the second part of class as

533
00:40:14.260 --> 00:40:14.760
an object.

534
00:40:15.040 --> 00:40:18.140
So I hope that you have understood all this concept.

535
00:40:18.160 --> 00:40:23.140
Well, the main concept was instance variable and instant's methods.

536
00:40:23.620 --> 00:40:25.320
So I guess that's it with this tutorial.

537
00:40:25.330 --> 00:40:26.740
Thank you so much for watching.

538
00:40:26.740 --> 00:40:30.760
And I'll see you guys in the next story elsewhere where we will be covering the second part of class

539
00:40:30.760 --> 00:40:31.630
as an object.
