WEBVTT
1
00:00:00.430 --> 00:00:01.450
Hey, guys, what's up?

2
00:00:01.480 --> 00:00:04.770
This is a marathon, and I welcome you to an editorial on this course on Ruby.

3
00:00:04.780 --> 00:00:09.730
And in this tutorial we are going to cover nested modules so modules can be nested.

4
00:00:09.730 --> 00:00:15.670
Many packages create a single outermost module or a class to provide a namespace for their functionality.

5
00:00:15.880 --> 00:00:20.440
And if you talk about the syntax for implementing nested modules in Ruby, it is very simple.

6
00:00:20.450 --> 00:00:24.610
You have to just write in module, you have to write in the name of the output module and then taking

7
00:00:24.610 --> 00:00:29.980
care of the identity and just writing the module, which is a key word again, and then write in the

8
00:00:29.980 --> 00:00:34.300
name of the inner module and the inner module first and then the outer module.

9
00:00:34.510 --> 00:00:40.780
Now you can also define the inner module using the double calling operator that provides the outer module

10
00:00:40.780 --> 00:00:43.020
authors that are already defined.

11
00:00:43.030 --> 00:00:46.810
So the syntax for that is going to be very simple as well.

12
00:00:47.140 --> 00:00:52.360
That is going to be module needed right in the name of the module, double golon, right in the name

13
00:00:52.360 --> 00:00:56.860
of the module, double Colin and writing grandchild and finally ended.

14
00:00:57.100 --> 00:01:03.470
Now you have to know the O'Haire that this will erase a name error if Outr and the outer cholent inner

15
00:01:03.490 --> 00:01:05.780
are not already defined.

16
00:01:06.400 --> 00:01:12.040
So these are basically the Doose indexes using which you can have nested modules in Ruby.

17
00:01:12.050 --> 00:01:15.850
So let me give you a quick example of how that is going to be done.

18
00:01:16.060 --> 00:01:17.380
Is on to Atom.

19
00:01:19.880 --> 00:01:28.850
So you can write in module, let's say, and write inside that you are going to write in Module B and

20
00:01:28.850 --> 00:01:29.600
write inside.

21
00:01:29.630 --> 00:01:31.460
You can just have any kind of function.

22
00:01:31.460 --> 00:01:35.220
Let's say you want to create a function that is in a function inside the inner module.

23
00:01:35.480 --> 00:01:37.880
So in that function, you are going to simply put.

24
00:01:39.790 --> 00:01:40.810
In our module.

25
00:01:41.740 --> 00:01:48.760
Function, yes, and this and this module and this function and this module over here as well and in

26
00:01:48.760 --> 00:01:51.100
this module will create one more function.

27
00:01:51.100 --> 00:01:54.520
Let's say outroar is the name of that function and that function.

28
00:01:54.520 --> 00:01:56.560
You are going to just write inputs.

29
00:01:58.280 --> 00:01:59.540
Outr Modu.

30
00:02:01.410 --> 00:02:07.920
Function just and this and that is going to just do your job now, module B is basically the grandchild

31
00:02:07.920 --> 00:02:08.820
of this module.

32
00:02:09.270 --> 00:02:13.070
Now you can do this very same thing using much more simple syntax.

33
00:02:13.080 --> 00:02:20.580
You can just write in module name of the output module, which is in this case column, right.

34
00:02:20.580 --> 00:02:26.070
In the name of the outer module that is sorry, the inner module that is B in this case, double column

35
00:02:26.070 --> 00:02:27.390
and just write and.

36
00:02:28.480 --> 00:02:34.930
Grandchild, and that is going to tell DeLay the editorial that B is a grandchild, or in other words,

37
00:02:34.930 --> 00:02:37.780
B is the model, and this ÁLFHEIÐUR here is the ultimate.

38
00:02:37.780 --> 00:02:42.100
You just ride in and out here and that is going to do your job around this good.

39
00:02:42.100 --> 00:02:47.200
And you can see that it has run perfectly now to access them as described at last.

40
00:02:47.200 --> 00:02:51.580
Let's say the name of the class is Class X. Don't need any kind of spaces or hill.

41
00:02:53.470 --> 00:02:57.790
All right, so let's say you have this Class X and in this Class X, what are you going to do is that

42
00:02:57.790 --> 00:03:01.980
you are going to have to include all the modules.

43
00:03:01.980 --> 00:03:08.020
So you're going to use Frid and include A and you're going to write include Bohle.

44
00:03:09.520 --> 00:03:14.080
And this close to a hill and down there, you are going to create an object for this class, so you're

45
00:03:14.080 --> 00:03:15.900
going to ride and start new.

46
00:03:16.060 --> 00:03:19.450
And now using this extraordinary, what you can do is that you can just ride in.

47
00:03:19.450 --> 00:03:22.150
And why don't you know?

48
00:03:26.510 --> 00:03:28.520
And you can just write in Wyandotte.

49
00:03:29.590 --> 00:03:34.480
Outdoor round is good, and you can see that it says in a dual function and automotive function.

50
00:03:34.510 --> 00:03:42.090
So this is all basically you can just implement something that is known as this concept of here.

51
00:03:42.100 --> 00:03:47.170
As you can see that it is the inner module, yet it has been red when we just tried it include Blackhill.

52
00:03:48.520 --> 00:03:52.820
So that's how you can implement nested modules in Ruby.

53
00:03:52.850 --> 00:03:57.160
Now, you must be thinking that what is the purpose of this when we have to ride and board the include

54
00:03:57.160 --> 00:04:00.750
functions that will help the reason behind this concept?

55
00:04:00.790 --> 00:04:05.680
Well, here that is the concept of modular nested modules is that, for example, let's suppose that

56
00:04:05.680 --> 00:04:11.150
you have a school module in which you want to add more things.

57
00:04:11.170 --> 00:04:13.940
So let's say to organize your code much more.

58
00:04:13.960 --> 00:04:17.070
Let's say you have a function of student, you have a functional teacher.

59
00:04:17.150 --> 00:04:21.040
Then you can all add that in a module, which is going to be a part of a single module that is going

60
00:04:21.040 --> 00:04:21.610
to be modular.

61
00:04:21.640 --> 00:04:25.240
So in that way, your code is going to get much more organized.

62
00:04:26.210 --> 00:04:27.180
So I hope it is clear.

63
00:04:27.200 --> 00:04:29.000
So I guess that's it with this tutorial as well.

64
00:04:29.150 --> 00:04:30.530
Thank you so much, guys, for watching.

65
00:04:30.530 --> 00:04:32.660
And I'll see you guys in the next Dorio.
