WEBVTT
1
00:00:00.240 --> 00:00:01.350
Hey, guys, what's up?

2
00:00:01.380 --> 00:00:05.650
This is a marathon, and I welcome you to an editorial on this course on Ruby.

3
00:00:06.210 --> 00:00:14.130
So if you have some knowledge of programming and if you have ever dealt with the C programming language,

4
00:00:14.370 --> 00:00:21.780
then in this tutorial you will see how that Ruby programming language is similar to C and how it is

5
00:00:21.780 --> 00:00:23.790
different from Ruby.

6
00:00:24.030 --> 00:00:30.960
So this story basically covers the comparison of C with Ruby, and we are going to see the similarities

7
00:00:30.960 --> 00:00:35.590
between the two languages and we are going to see the differences between the two languages.

8
00:00:35.940 --> 00:00:45.450
So starting on with some of the similarity, like C in Ruby, also a programmer is able to program procedurally

9
00:00:45.450 --> 00:00:50.010
if they like to do, but still behind the scene it will be object oriented.

10
00:00:50.640 --> 00:00:53.100
Both the languages have the same operators.

11
00:00:53.100 --> 00:00:56.820
For example, the compound statements, the bitwise operator.

12
00:00:57.120 --> 00:01:03.870
But Ruby does not have the last blast, which is the increment or the negative negative, which is the

13
00:01:03.870 --> 00:01:06.570
decrement operator, whether like C.

14
00:01:07.510 --> 00:01:15.610
Next is that both of them have got the file and line with them, next is that there is no special constant

15
00:01:15.610 --> 00:01:20.050
keyword, but still weak and constant in both the languages.

16
00:01:20.960 --> 00:01:27.920
In both Si and Ruby, strings are written in double chords, next is that both of them contains the

17
00:01:27.920 --> 00:01:32.900
mutable strings, then Frogmore using the R Eichman.

18
00:01:32.900 --> 00:01:37.880
Most of the documents can be read in your terminal, just like mad pages.

19
00:01:38.420 --> 00:01:44.800
And the final one is that same sort of the command line debugger is available in both of them.

20
00:01:44.810 --> 00:01:50.200
So these were basically some of the similarities between C and Ruby.

21
00:01:50.480 --> 00:01:52.870
So let's just have some comparisons now.

22
00:01:54.320 --> 00:02:00.830
The first one is that in Ruby, there is no need to compile the code, it can be run directly in Ruby,

23
00:02:00.830 --> 00:02:06.790
whereas in C the compilation of code is necessary because it cannot be run directly.

24
00:02:08.310 --> 00:02:10.740
The second one is that it requires.

25
00:02:11.920 --> 00:02:18.490
After Balo, instead of hash, include or hash include Arpita below, whereas nothing like that is required.

26
00:02:18.490 --> 00:02:24.670
And so you can just go on and use the hash included and you can just use the library or you want to

27
00:02:24.670 --> 00:02:25.270
include in.

28
00:02:26.230 --> 00:02:33.760
The next one is that there are no variable declarations in Ruby, whereas if you talk about see, then

29
00:02:33.970 --> 00:02:39.850
if you have ever recorded in C, then you know that variable declaration is necessary in C because ls

30
00:02:40.360 --> 00:02:43.380
the compiler is going to generate an error message for you.

31
00:02:44.380 --> 00:02:52.720
The next one is that there are no macro's or preprocessor no cast, no pointers, no type definitions,

32
00:02:52.960 --> 00:03:00.970
no signs of Narino available, whereas all of these things are present in the C programming languages.

33
00:03:01.450 --> 00:03:03.790
The next one is that argument.

34
00:03:04.030 --> 00:03:10.780
Two functions are passed by value, whereas the values are all of this object references, whereas in

35
00:03:10.780 --> 00:03:15.550
C functions are passed by value as well as passed by reference.

36
00:03:15.560 --> 00:03:20.560
So basically passed by reference is what is additional in the C programming language.

37
00:03:21.280 --> 00:03:29.740
Talking about some more comparisons in Ruby Parenthesis are four methods and these are basically the

38
00:03:29.740 --> 00:03:34.990
calls for the functions are often optional, whereas this is not optional in C.

39
00:03:36.690 --> 00:03:44.580
Next is that there is no charge, there are just one letter string, whereas Charra is used in for just

40
00:03:44.580 --> 00:03:45.730
a single character.

41
00:03:46.590 --> 00:03:55.050
Next is that array literals go in brackets instead of Brace's in Ruby, whereas a literal go in Brace's

42
00:03:55.440 --> 00:04:04.050
in C next is that you can not drop down the assembly and in C you cannot drop down the assembly as well.

43
00:04:04.050 --> 00:04:10.140
Which means this is basically something of that is similar to the next one is that in Ruby objects are

44
00:04:10.140 --> 00:04:15.300
strongly typed and in C objects are not strongly typed.

45
00:04:16.170 --> 00:04:25.290
You go without references for if and while condition expressions in ruby and parentheses are needed

46
00:04:25.290 --> 00:04:28.470
in C with F and while expressions.

47
00:04:29.520 --> 00:04:35.910
The next one is that string's don't end with Nailbiter and Ruby, whereas the wild strings end with

48
00:04:35.910 --> 00:04:39.450
another bite in the C programming language.

49
00:04:42.420 --> 00:04:49.410
Talking about some more in Ruby area, just automatically get bigger when you stuffed more elements

50
00:04:49.410 --> 00:04:57.030
into them and in CCRA automatically cannot get any guy of bigger, it is what is basically allotted

51
00:04:57.030 --> 00:04:59.240
at the start when you are assigning an array.

52
00:04:59.970 --> 00:05:06.540
The next one is that if you add two arrays, you get back a new and a bigger array, of course, are

53
00:05:06.540 --> 00:05:12.810
located on the heap instead of doing pointer arithmetic, whereas in C we need to free them ourselves

54
00:05:12.840 --> 00:05:18.570
because garbage collector is not present in the C programming language, which is by default present

55
00:05:18.570 --> 00:05:20.540
in the Ruby programming language.

56
00:05:21.420 --> 00:05:24.850
The next one is that all variables live on the heap further.

57
00:05:24.870 --> 00:05:27.080
You don't need to free them yourself.

58
00:05:27.120 --> 00:05:28.620
The garbage collector.

59
00:05:28.620 --> 00:05:30.090
Take care of that.

60
00:05:30.090 --> 00:05:33.990
And and C, as I told you, that the garbage collector is not present.

61
00:05:34.260 --> 00:05:39.150
So Brisas are required because ignoring braces will cause a syntax error.

62
00:05:39.300 --> 00:05:45.270
And the same reasons goes for that as well, because the garbage collector is not present in the C programming

63
00:05:45.270 --> 00:05:45.830
language.

64
00:05:46.650 --> 00:05:53.130
The next one is that in Ruby you don't usually use prÃ©cis just and multiline construct like y loops

65
00:05:53.340 --> 00:06:02.130
with an end keyword, whereas braces are required because ignoring the braces will cause syntax error.

66
00:06:02.970 --> 00:06:04.350
Talking about some more.

67
00:06:04.530 --> 00:06:11.100
All the functions and classes are defined in the main source code files as there are no header files

68
00:06:11.100 --> 00:06:15.530
present in Ruby, whereas in C the header files are there.

69
00:06:16.410 --> 00:06:23.970
There is no semicolon ending lines in Ruby and there is ending line semicolon in C programming language

70
00:06:24.420 --> 00:06:27.920
not specifying that and C is going to cause syntax error.

71
00:06:28.500 --> 00:06:35.040
The next one is that there is no hash tag defined in Ruby, just use constants, whereas hash tag defined

72
00:06:35.040 --> 00:06:37.380
is there in the C programming language.

73
00:06:38.160 --> 00:06:43.080
The next one is that the Duggie word is for the so called Bloks.

74
00:06:43.290 --> 00:06:51.120
There is a NORDO statements like that and see that you statement is used in with while to make a loop

75
00:06:51.120 --> 00:06:52.380
like dual.

76
00:06:54.050 --> 00:07:04.880
So that was basically some comparison between the C programming language and Ruby, you saw some differences

77
00:07:04.880 --> 00:07:09.690
between the two languages, you saw some similarity between the two languages.

78
00:07:10.070 --> 00:07:18.020
So if you have ever been dealing with the C programming language, then I guess you have got a mild

79
00:07:18.020 --> 00:07:25.850
idea about how Ruby is going to be different from that and how it is going to be similar to the C programming

80
00:07:25.850 --> 00:07:26.380
language.

81
00:07:26.690 --> 00:07:34.460
So I guess that's what this tutorial in the next tutorial, we will be covering the comparison of Ruby

82
00:07:34.460 --> 00:07:35.790
with C++.

83
00:07:36.230 --> 00:07:40.100
So for this tutorial, thank you so much, guys, for watching.

84
00:07:40.100 --> 00:07:42.290
And I'll see you guys in the next territorial.
