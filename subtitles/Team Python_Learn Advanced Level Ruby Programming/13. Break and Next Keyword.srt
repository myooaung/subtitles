1
00:00:00,470 --> 00:00:01,460
Hey, guys, what's up?

2
00:00:01,490 --> 00:00:05,080
This is American, and I welcome you to another to Dooralong discourse on Ruby.

3
00:00:05,090 --> 00:00:07,820
And in this tutorial, we are going to be covering two keywords.

4
00:00:08,090 --> 00:00:11,910
The first one is the breaking word and the next one is the next keyword.

5
00:00:12,200 --> 00:00:16,910
Now, you already have seen the usage of breaking word, but in this area, we are going to explain

6
00:00:16,910 --> 00:00:17,570
it a bit more.

7
00:00:17,840 --> 00:00:23,600
So the break statement can be used to terminate a blog that is defined by the while, the dual.

8
00:00:24,760 --> 00:00:33,730
The far loop are the case statements now more often this vague statement is basically used with almost

9
00:00:33,730 --> 00:00:41,060
the Do I loop or the Bilu for the loops that are basically endless and you want to just terminate them.

10
00:00:41,530 --> 00:00:47,980
So, for example, let's say you have a program in which you have to generate random numbers between

11
00:00:47,980 --> 00:00:51,100
a certain range and you want that of a certain number occurs.

12
00:00:51,100 --> 00:00:53,390
Where you have to do is that you want to terminate that program.

13
00:00:53,680 --> 00:00:59,110
So, for example, you have a value that is basically something that you write.

14
00:00:59,110 --> 00:01:00,030
And just while true.

15
00:01:00,160 --> 00:01:05,740
So this is a loop that is basically an endless loop that cannot be terminated by any kind of condition

16
00:01:05,740 --> 00:01:07,680
because you have written and white dujayl.

17
00:01:08,110 --> 00:01:13,720
So all you can do is that you can just terminated by using the brake statement.

18
00:01:14,020 --> 00:01:14,980
Now what do we have to do?

19
00:01:14,980 --> 00:01:16,540
Is that, for example, you have.

20
00:01:18,340 --> 00:01:19,900
Some are, that is.

21
00:01:21,100 --> 00:01:26,620
Going to have a number and what it is going to store is basically going to be our random number.

22
00:01:28,790 --> 00:01:31,040
And we are going to ride in 30 in here.

23
00:01:32,150 --> 00:01:40,640
So what it is going to do is that this is a building function that is used to basically generate random

24
00:01:40,640 --> 00:01:42,200
numbers between a certain range.

25
00:01:42,530 --> 00:01:47,800
So for this case, what it is going to do is it is going to generate random numbers from zero to 30.

26
00:01:48,020 --> 00:01:51,140
It defines the minimum range itself, which is zero.

27
00:01:51,470 --> 00:01:54,530
And this is the maximum range which we have specified right over here.

28
00:01:54,860 --> 00:01:59,300
So what we are going to do is that we are going to simply print out the numbers you're going to write

29
00:01:59,300 --> 00:02:00,670
in our will here.

30
00:02:01,250 --> 00:02:03,230
And what we want is that if.

31
00:02:04,190 --> 00:02:10,100
This hour, at any instance, equal, equal to, let's say, 12.

32
00:02:11,330 --> 00:02:16,640
Then what we want is that we want to break out of this statement, so will help zipped, right.

33
00:02:16,650 --> 00:02:19,670
And for that and for that and.

34
00:02:22,150 --> 00:02:23,320
Just run this court.

35
00:02:24,490 --> 00:02:30,820
So you can see that it has just for one four, one, two, and now the reason that this is all scrambled

36
00:02:30,820 --> 00:02:35,110
up is because we have to specify an online space to just have a Puzzo Hill.

37
00:02:39,650 --> 00:02:40,770
More on this now.

38
00:02:40,800 --> 00:02:44,730
Oh, my God, that has generated many of the numbers.

39
00:02:45,750 --> 00:02:53,570
Was just remove this from here and let's just use pozole here so that every member is in a separate

40
00:02:53,570 --> 00:02:59,390
line and as you can see, that it has generated a lot of numbers, as you can see, that it has from

41
00:02:59,720 --> 00:03:04,810
starting on from 423 22 to and a lot of numbers and a drop.

42
00:03:04,820 --> 00:03:06,500
This loop has basically ended.

43
00:03:06,920 --> 00:03:10,550
But as you can see, that this was a loop that should never have ended.

44
00:03:10,550 --> 00:03:17,720
But since we have specified a condition that at any instance, if a random number 12 is generated,

45
00:03:17,720 --> 00:03:19,450
we want to break out of this follow.

46
00:03:19,700 --> 00:03:25,070
Now, wherever you use this break, you are to either it be the wire loop, either it be the do while

47
00:03:25,070 --> 00:03:28,130
loop, either it be the loop, either the give statements.

48
00:03:28,370 --> 00:03:33,260
When it sees this break, you would it is going to just come out of the call and it is going to execute

49
00:03:33,260 --> 00:03:34,820
the statements which are right.

50
00:03:34,820 --> 00:03:34,960
Or.

51
00:03:35,180 --> 00:03:36,680
So for example, I just write in.

52
00:03:38,170 --> 00:03:40,480
Outside the value.

53
00:03:42,210 --> 00:03:47,790
So if I just run the score, you can see that it says outside the loop, why look after a very long

54
00:03:47,790 --> 00:03:47,970
time?

55
00:03:47,970 --> 00:03:50,760
Because it has generated this drove over here, as you can see.

56
00:03:51,300 --> 00:03:53,820
And after this, it has printed it.

57
00:03:53,940 --> 00:03:56,490
It checks the condition now are is equal to three.

58
00:03:56,490 --> 00:04:02,080
So it is spread out and now it will start printing the statement outside this value.

59
00:04:02,490 --> 00:04:07,410
Now, for example, if I just remove this from here and just write and put.

60
00:04:08,640 --> 00:04:11,310
Hashtag are for this O'Haire as well.

61
00:04:11,560 --> 00:04:14,850
Well, just let's just change it to something like R plus one.

62
00:04:15,890 --> 00:04:20,840
And run the scoreboard, you can see that it is now going to be an endless loop, as you can see that

63
00:04:20,840 --> 00:04:26,540
it is generating numbers that are random numbers from zero to thirty, and this loop is never going

64
00:04:26,540 --> 00:04:27,140
to stop.

65
00:04:27,800 --> 00:04:31,820
So all you have to do is that you have to do something like.

66
00:04:33,840 --> 00:04:40,170
That should basically stop the flow, so you have to not use this O'Haire, you have to ride in Bracho

67
00:04:40,170 --> 00:04:47,040
Hill now run this code and as you can see, that it will now stop at some instance.

68
00:04:47,190 --> 00:04:52,650
As you can see that whenever the stroke comes, it is going to just stop and it is going to say outside

69
00:04:52,650 --> 00:04:53,200
the wall.

70
00:04:53,610 --> 00:05:00,780
So this is how basically the brake statement can be used to just exert some loop, which is basically

71
00:05:00,780 --> 00:05:01,500
an endless loop.

72
00:05:02,310 --> 00:05:04,440
So then comes the next one.

73
00:05:04,440 --> 00:05:07,050
That is the basically next statement.

74
00:05:07,230 --> 00:05:12,840
And the next statement is used to skip a part of the loop and continue on with the next iteration of

75
00:05:12,840 --> 00:05:13,200
the loop.

76
00:05:13,620 --> 00:05:17,290
Now, it can be used in combination with the Falu and the value.

77
00:05:17,850 --> 00:05:24,080
Now, for example, we want to print a list of numbers that cannot be divided by a certain number,

78
00:05:24,090 --> 00:05:26,630
let's say two without a remainder, of course.

79
00:05:26,730 --> 00:05:30,840
So what do we have to do is that we'll just remove this from here.

80
00:05:35,740 --> 00:05:36,970
And we will have.

81
00:05:38,620 --> 00:05:39,400
Why loop?

82
00:05:40,350 --> 00:05:48,530
That says while a number is less than, let's say 50 and we will initialize some Numbulwar here as well,

83
00:05:48,540 --> 00:05:50,140
that is going to start on from zero.

84
00:05:50,160 --> 00:05:51,270
This is the starting limit.

85
00:05:51,300 --> 00:05:52,330
This is the ending limit.

86
00:05:52,590 --> 00:05:59,390
So for this, we have specified this loop to and so this is not now not going to be an endless loop.

87
00:05:59,910 --> 00:06:06,150
So let's say we have no equal to none plus one, which is the counter, which is going to ensure that

88
00:06:06,150 --> 00:06:07,930
this number is incremented.

89
00:06:07,950 --> 00:06:11,100
So at some stage, this condition becomes false.

90
00:06:11,100 --> 00:06:15,070
And this statement that is puts outside the wire loop gets printed.

91
00:06:15,600 --> 00:06:20,820
So in here, what we have to do is that, as I told you, that we want to print a list of numbers that

92
00:06:20,820 --> 00:06:24,450
cannot be divided from two starting on from zero to 50.

93
00:06:24,460 --> 00:06:27,000
So what we have to write a number here that if.

94
00:06:28,870 --> 00:06:29,650
The number.

95
00:06:31,080 --> 00:06:31,980
Modu.

96
00:06:33,810 --> 00:06:35,470
Equal, equal to zero.

97
00:06:36,450 --> 00:06:42,900
So what do you have to do is that you have to just skip that statement and you have to just write in

98
00:06:42,900 --> 00:06:43,340
and.

99
00:06:45,710 --> 00:06:51,680
And you right in the end for this as well as well as you have to print the numbers to just write in

100
00:06:51,680 --> 00:06:56,300
print or just use pot so that everything gets printed on a separate line.

101
00:06:56,870 --> 00:06:58,450
And you have to write a number here.

102
00:06:58,790 --> 00:07:01,370
And this ad has to be in small letters.

103
00:07:02,260 --> 00:07:07,690
I guess that's good enough, let's just run the score and as you can see, that it has printed the numbers,

104
00:07:08,140 --> 00:07:10,510
which are basically not divided by two.

105
00:07:10,510 --> 00:07:16,540
So it has printed all the odd numbers for me, starting on from one till forty nine and then it has

106
00:07:16,540 --> 00:07:18,300
printed out outside the BILU.

107
00:07:18,820 --> 00:07:25,090
So for example, if you have let's say no to equal equal to one here, which means that now it is going

108
00:07:25,090 --> 00:07:28,360
to print on equal numbers starting on from two to 50.

109
00:07:28,630 --> 00:07:33,530
And after that, since we have a condition, we have an increment control here.

110
00:07:33,760 --> 00:07:39,940
So that's why it is going to just go out and it is going to print out outside the vile little.

111
00:07:41,790 --> 00:07:47,250
So that's how basically you can use the break Keywood and you can also use the next key where the break

112
00:07:47,250 --> 00:07:48,240
is going to just.

113
00:07:49,500 --> 00:07:56,250
Make you come out of the loop and the next statement is going to skip certain outputs which have to

114
00:07:56,250 --> 00:08:02,460
be printed, all you can say that the next statement is basically going to skip a part of the loop and

115
00:08:02,460 --> 00:08:06,120
continue on with the next iteration of the loop.

116
00:08:06,480 --> 00:08:08,950
So I guess you have understood both of these.

117
00:08:08,970 --> 00:08:10,590
So I guess that's it with this story.

118
00:08:10,720 --> 00:08:12,450
Thank you so much, guys, for watching.

119
00:08:12,690 --> 00:08:15,270
And I'll see you guys in the next Dorio.
