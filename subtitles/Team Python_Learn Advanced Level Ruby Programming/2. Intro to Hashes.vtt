WEBVTT
1
00:00:00.390 --> 00:00:01.380
Hey, guys, what's up?

2
00:00:01.410 --> 00:00:04.900
This is a marathon, and I welcome you to another Dooralong on discourse on Ruby.

3
00:00:05.100 --> 00:00:08.540
And in this video, we are going to be covering the introduction to HaShas.

4
00:00:08.820 --> 00:00:09.810
So what is a hash?

5
00:00:09.810 --> 00:00:14.910
Basically, a hash is a data structure that store items by the associated keys.

6
00:00:15.150 --> 00:00:19.980
Now, this is contrasted against arrays which store items by an ordered index.

7
00:00:20.250 --> 00:00:24.240
Entries in a hash are often referred to as the key value pairs.

8
00:00:24.450 --> 00:00:27.690
This creates an associative representation of the data.

9
00:00:27.990 --> 00:00:33.930
Most commonly, a hash is created using symbols, eskies and any data type as values.

10
00:00:34.230 --> 00:00:40.080
All key value pairs in a hash are surrounded by curly brackets and by a comma separated.

11
00:00:40.440 --> 00:00:43.350
Now hash can be created with two syntaxes.

12
00:00:43.710 --> 00:00:48.500
The first index is basically the Ohlson text, which is not normally used nowadays.

13
00:00:48.510 --> 00:00:51.420
It is basically something, including the curly brackets.

14
00:00:51.420 --> 00:00:52.850
And in that we have a column.

15
00:00:52.860 --> 00:00:59.580
Then you write in the name and equal to sign an arrow sign and then you have to write in the value.

16
00:00:59.850 --> 00:01:03.180
Now this Namoa here is basically going to be the key.

17
00:01:03.330 --> 00:01:07.490
And this whatever is stored in this quotation marks is going to be the value.

18
00:01:07.530 --> 00:01:12.840
Not this is not necessarily that this should be something encoded in quotation marks.

19
00:01:12.870 --> 00:01:16.860
Well, here you can just write in a value, let's say two, three, four.

20
00:01:16.860 --> 00:01:20.370
And that hasn't to be quoted in the quotation mark.

21
00:01:21.530 --> 00:01:27.200
Then comes the news index, which is mostly used nowadays, and that is also very simple, just the

22
00:01:27.200 --> 00:01:33.380
column is moved from this position to this position, so bright in the name, which is going to serve

23
00:01:33.380 --> 00:01:36.650
as the key, the neutral in the column and then the quotation marks.

24
00:01:36.680 --> 00:01:41.150
Well, here you have to write in whatever you want to store in the sky you have specified.

25
00:01:41.150 --> 00:01:46.070
Right, Ohio, which is going to be the value for this Guyenne, whatever you want to access this while

26
00:01:46.070 --> 00:01:49.260
you're here, you can just use this key whenever I need it.

27
00:01:49.730 --> 00:01:54.630
So now I'm moving on to the difference between Arah and hashes.

28
00:01:54.980 --> 00:02:01.100
Now, it can be a bit overwhelming when you look at all the different ways there are to represent any

29
00:02:01.100 --> 00:02:02.760
kind of data with the help, of course.

30
00:02:03.020 --> 00:02:09.530
Now, you don't need to feel any kind of don't necessarily pick these things up in small parts and apply

31
00:02:09.530 --> 00:02:12.900
them, then add more little things as you move along.

32
00:02:13.010 --> 00:02:18.480
Now, it's impossible to know everything in the beginning, so put some effort into learning a few things

33
00:02:18.500 --> 00:02:20.160
well and then build from there.

34
00:02:20.540 --> 00:02:26.330
Now, when deciding whether to use a hash or an IRA, what do you have to do is that you have to ask

35
00:02:26.330 --> 00:02:27.560
yourself a few question.

36
00:02:27.560 --> 00:02:33.110
The first question is that does the data need to be associated with a specific label?

37
00:02:33.290 --> 00:02:39.800
If yes, use a hash, not if the data does not have a natural label, then typically an array will work

38
00:02:39.800 --> 00:02:40.160
fine.

39
00:02:41.060 --> 00:02:47.240
The second question you need to ask is that does the order of whatever data you want to store in matters

40
00:02:47.240 --> 00:02:47.720
or not?

41
00:02:47.960 --> 00:02:55.760
Now, if the order matters, then use an array, whereas if you do not want something to be in order,

42
00:02:55.940 --> 00:02:59.810
then you can simply go on with hashes and hashes.

43
00:02:59.810 --> 00:03:02.300
Do not require any kind of I don't know.

44
00:03:02.300 --> 00:03:07.910
The next question you need to ask yourself is that do I need a stack or a queue structure?

45
00:03:08.210 --> 00:03:15.980
Now, Arabs are good at mimicking simple first in first out queues or last in first out stacks.

46
00:03:16.280 --> 00:03:18.770
So you can just go on with errors in that case.

47
00:03:18.770 --> 00:03:22.120
And as you can just go on with hashes.

48
00:03:22.580 --> 00:03:28.250
Now, as you grew, you as a developer, your familiarity with these two data structure will naturally

49
00:03:28.250 --> 00:03:32.780
affect which one you reach for when looking to solve a specific problem.

50
00:03:33.140 --> 00:03:39.980
Now the key is to practice and experiment with each to find out what data structure work best in certain

51
00:03:39.980 --> 00:03:40.640
situations.

52
00:03:40.640 --> 00:03:47.090
So all you need to do is that you need to ask yourself some questions, which I have explained, and

53
00:03:47.090 --> 00:03:51.510
then simply you can go on with the way things are going to go.

54
00:03:51.980 --> 00:03:58.660
So let's see some examples and apply the syntax we have covered in the previous slide.

55
00:03:58.910 --> 00:04:00.620
So let's move on to what, Ed?

56
00:04:02.290 --> 00:04:06.380
So the first thing you have to do over here is that you have to initialize the hash.

57
00:04:06.770 --> 00:04:11.830
Now, how that is going to be done, you have to just write in a variable, let's say X, you have to

58
00:04:11.830 --> 00:04:14.320
write in the curly brackets and then the curly brackets.

59
00:04:14.320 --> 00:04:18.840
Where you have to do is that you have to initialize a pair of key and value.

60
00:04:19.060 --> 00:04:23.450
Now, whatever the key is going to be, it is going to store the value of the column.

61
00:04:23.740 --> 00:04:24.940
So you have to write in the key.

62
00:04:24.940 --> 00:04:31.660
Let's say we have some named Wahhab and in this name, which is going to serve as the key, we have

63
00:04:31.660 --> 00:04:33.350
got a value, let's say my name.

64
00:04:33.700 --> 00:04:39.310
So now all you have to do is that you have to store it in a key and value.

65
00:04:39.970 --> 00:04:43.930
So to do so, what do you have to do is that you have to write in that each do.

66
00:04:43.930 --> 00:04:46.570
So we are going to write an X dot each.

67
00:04:47.960 --> 00:04:54.800
And we are going to do with it is that we are going to create a pair of key and value.

68
00:04:56.710 --> 00:05:02.170
And downhill, what you can do simply is that you can just ride inputs, you can use the interpellation

69
00:05:02.170 --> 00:05:09.100
concept of a hill and you can just ride in the key and you can just ride in is.

70
00:05:15.920 --> 00:05:24.080
And you can just ride in the value, so you can just and there's because you have this logo, local

71
00:05:24.080 --> 00:05:30.690
history and it as well, just run this code and you can see that it has this name is Ulmarra.

72
00:05:30.710 --> 00:05:37.100
Now, what is basically going on over here is that for the first iteration, when this do end operates,

73
00:05:37.250 --> 00:05:43.480
it is going to take in the first value from this X, which is basically storing the hashes for us.

74
00:05:43.730 --> 00:05:49.250
So it is going to have this name O'Haire as the key and it is going to have the value, which is the

75
00:05:49.250 --> 00:05:51.710
value for this name, which is my name.

76
00:05:51.890 --> 00:05:57.320
So it is going to store my name in this value variable and the key that is name will help in this key

77
00:05:57.320 --> 00:05:57.960
variable.

78
00:05:58.160 --> 00:06:02.710
Now using interpolation, what we can simply do is that we can just bring down the value for this guy.

79
00:06:03.140 --> 00:06:08.240
We can print out the value for this value and we can just end it out and put statement is going to put

80
00:06:08.240 --> 00:06:10.790
it right over here and it is going to say a name is Matt.

81
00:06:10.830 --> 00:06:18.920
So that is the simplest way of how you can initialize a hash and you can just store it in a key value

82
00:06:18.920 --> 00:06:20.600
pair and you can just print it out.

83
00:06:21.590 --> 00:06:26.410
Now you can have multiple key value pairs in a single variable as well.

84
00:06:27.470 --> 00:06:30.500
So let's say we have one more Aubagio that is each.

85
00:06:32.630 --> 00:06:38.630
And let's say you've got 20 oakhill, so all you have to do is now simply run it and as you can see

86
00:06:38.630 --> 00:06:41.330
that it's his name is this and it just is.

87
00:06:41.660 --> 00:06:43.420
So you can have one more here.

88
00:06:44.240 --> 00:06:48.800
Let's say it is qualification, a colon.

89
00:06:51.250 --> 00:06:56.830
And you can just write and graduate while Ronda's and it is going to say your name is a matter of ages

90
00:06:56.830 --> 00:07:01.810
20 and qualification is graduate, so that's how basically it is working.

91
00:07:01.810 --> 00:07:08.260
And in the first iteration, it works for this key value pair for the second iteration.

92
00:07:08.260 --> 00:07:15.820
Now, the key stores this age, the value store, this value for the age, the third iteration is going

93
00:07:15.820 --> 00:07:21.490
to have this view you as the key and a graduate as the value.

94
00:07:21.640 --> 00:07:29.060
And every time the statement works, it is going to put these items right here on the front row here.

95
00:07:29.530 --> 00:07:35.080
So basically, that is how you can use hashes and you can just print the values for them.

96
00:07:35.440 --> 00:07:38.230
So order here does not matter at all.

97
00:07:39.130 --> 00:07:45.520
You can simply go on with any kind of order you want, which is very opposite to what is basically used

98
00:07:45.520 --> 00:07:46.270
in arrays.

99
00:07:46.690 --> 00:07:48.460
So I hope you have got all this.

100
00:07:48.820 --> 00:07:50.520
So that's it with this tutorial.

101
00:07:50.530 --> 00:07:51.970
Thank you so much, guys, for watching.

102
00:07:51.970 --> 00:07:53.980
And I'll see you guys in the next tutorial.
