1
00:00:00,800 --> 00:00:01,730
Hey, guys, what's up?

2
00:00:01,760 --> 00:00:05,650
This was a marathon, and I welcome you to another Dooralong discourse on Rubaiyat and this strategy,

3
00:00:05,660 --> 00:00:10,050
and we are going to cover the introduction to exceptions in Ruby.

4
00:00:10,370 --> 00:00:15,950
Now, it is likely that you have already encountered exceptions in your Ruby programs, but you may

5
00:00:15,950 --> 00:00:19,890
not have a complete understanding of where these errors come from.

6
00:00:20,480 --> 00:00:24,860
To begin, we will discuss what an exception is, as well as various types of exceptions.

7
00:00:24,860 --> 00:00:25,940
And there are similarities.

8
00:00:26,180 --> 00:00:30,950
We will then introduce several basic techniques for handling common exceptions using when they occur

9
00:00:30,950 --> 00:00:31,640
in your code.

10
00:00:32,450 --> 00:00:37,280
At the last, we will explore raising your own exception and using custom exception classes.

11
00:00:37,760 --> 00:00:40,730
So exception is something like this.

12
00:00:40,740 --> 00:00:45,350
So as you can see that it says today we are going to learn about handling exception.

13
00:00:45,680 --> 00:00:47,810
So pretend this to be an exception.

14
00:00:47,810 --> 00:00:55,970
Your code for this, when it gets angry at your incompetence like this, now you are going to learn

15
00:00:55,970 --> 00:00:57,070
how to catch them.

16
00:00:57,350 --> 00:00:59,810
So this was just added for amusement purpose.

17
00:00:59,990 --> 00:01:02,540
And it also explain what an exception is.

18
00:01:02,540 --> 00:01:08,020
The code is going to throw the exception and then you are going to get that exception.

19
00:01:09,240 --> 00:01:16,230
So exception basically is something like this, so the question is that what is an exception now?

20
00:01:16,230 --> 00:01:19,590
An exception is simply an exceptional state in your code.

21
00:01:19,740 --> 00:01:25,590
It is not necessarily a bad thing, but it is the ruby way of letting you know that your code is behaving

22
00:01:25,590 --> 00:01:26,520
unexpectedly.

23
00:01:27,000 --> 00:01:31,800
If an exception is raised and your code does not handle the exception, your program is going to crash

24
00:01:31,800 --> 00:01:36,910
and the Ruby will provide a message telling you what type of error was encountered.

25
00:01:37,380 --> 00:01:44,130
So if you look at this picture, it basically gives you the easiest picture of what exception handling

26
00:01:44,130 --> 00:01:44,520
is.

27
00:01:45,330 --> 00:01:51,350
So as you can see that the person is running, but then he sees a kind of rock that comes in his way.

28
00:01:51,540 --> 00:01:55,140
So you can not just go on directly because it is going to hinder his spot.

29
00:01:55,320 --> 00:02:01,150
What he's going to do is that he's going to just adopt an alternate path to reach his destination.

30
00:02:01,170 --> 00:02:07,020
So this Ohare is basically called an exception and the alternate body is going to take to reach to his

31
00:02:07,020 --> 00:02:07,830
destination.

32
00:02:07,830 --> 00:02:10,710
And that is what it's called an exception handling.

33
00:02:12,320 --> 00:02:19,730
Then comes the hierarchy for the Ruby exception, and Ruby basically provides a hierarchy for building

34
00:02:19,740 --> 00:02:25,370
classes to simplify exception, handling, in fact, the exception names that you see when your program

35
00:02:25,370 --> 00:02:31,490
crashes suggested better, which you have often seen in the previous tutorials as well, are actually

36
00:02:31,490 --> 00:02:32,450
classes, names.

37
00:02:32,870 --> 00:02:36,650
The class at the very top of the hierarchy is known as the exception.

38
00:02:36,650 --> 00:02:41,760
Class exception has several subclasses, many of which have descendants of their own as well.

39
00:02:42,140 --> 00:02:47,450
So right here you can see the complete hierarchy of the Ruby exception classes.

40
00:02:48,580 --> 00:02:53,110
So as you can see that at the top, you have got this exception and from the exception, you have got

41
00:02:53,110 --> 00:02:56,820
this fellow the no memory under the system except the system stack her.

42
00:02:57,220 --> 00:03:00,920
And you have also got this signal exception and you have got the script error.

43
00:03:00,970 --> 00:03:05,870
And finally, of course, the standard error that are basically the subclasses of this exception, glass.

44
00:03:06,220 --> 00:03:08,500
Now, some of these have descendants as well.

45
00:03:08,500 --> 00:03:15,700
For example, this script error glass sublist from the last exception has three descendants.

46
00:03:15,700 --> 00:03:19,150
That is Lord error, syntax, error and not implement error.

47
00:03:19,180 --> 00:03:25,870
Similarly, the signal exception subclause has the descendant interrupt and the standard error subclass

48
00:03:25,870 --> 00:03:28,090
has a lot of descendants.

49
00:03:28,090 --> 00:03:32,140
Argument, error, eyehole error or error index error.

50
00:03:32,140 --> 00:03:35,980
A local jump at a name at a no method error range error.

51
00:03:36,010 --> 00:03:37,090
The flow domain error.

52
00:03:37,090 --> 00:03:42,940
Regular expression error runtime error security error system call error system independent error.

53
00:03:43,270 --> 00:03:47,180
The error, the error and a zero division error.

54
00:03:47,350 --> 00:03:53,290
So these are basically some of the descendants of those clouds and that this the no memory error, the

55
00:03:53,290 --> 00:03:53,980
system existed.

56
00:03:53,980 --> 00:03:58,720
The system stack under these four classes basically did not have any kind of descendants right.

57
00:03:58,720 --> 00:03:59,170
To a hill.

58
00:04:00,360 --> 00:04:05,580
So let's take a moment to briefly examine some of the clauses in the hierarchy and think about when

59
00:04:05,580 --> 00:04:06,780
you might encounter them.

60
00:04:07,200 --> 00:04:12,870
So if you have been writing a ruby code for any length of time, it is likely that you have already

61
00:04:12,870 --> 00:04:17,490
seen some of these exceptions raised in your program and you have already seen them in the previous

62
00:04:17,730 --> 00:04:19,240
sections, editorial as well.

63
00:04:19,740 --> 00:04:23,580
So have you ever pressed controls to exit out of a program?

64
00:04:23,850 --> 00:04:30,570
Doing so actually raises an exception that is wired to interrupt glass, which you can see right or

65
00:04:30,570 --> 00:04:30,900
help.

66
00:04:32,320 --> 00:04:37,870
Then a syntax error, as its name suggests, will be raised when Ruby tries to execute the code containing

67
00:04:37,870 --> 00:04:40,640
invalid syntax, this probably looks familiar.

68
00:04:40,660 --> 00:04:49,120
If you have ever mistakenly left DSF or end of at the end of a method or any kind of class definition.

69
00:04:50,380 --> 00:04:55,540
Then you've got a system error which is raised in the case of a stack overflow, you may have seen this

70
00:04:55,540 --> 00:04:59,010
exception if you have run a recursive infinite loop in your program.

71
00:04:59,290 --> 00:05:03,540
And finally, you have got the standard error that has many recognizable descendants.

72
00:05:03,550 --> 00:05:04,840
That is argument error.

73
00:05:06,260 --> 00:05:11,690
Error, the zero division error and the no method error and that are all the common exception that our

74
00:05:11,690 --> 00:05:15,230
children and grandchildren of the standard error class.

75
00:05:15,230 --> 00:05:20,060
So you can have an explanation of all these on the Internet and you can just have a look at all of these.

76
00:05:21,170 --> 00:05:27,890
So one of the question is that when should you be handling an exception, most often the errors you

77
00:05:27,890 --> 00:05:33,330
want to handle are the descendants of the standard error clause that was introduced right here.

78
00:05:33,800 --> 00:05:39,380
These exceptions may be caused by a wide variety of circumstances, including unexpected user input,

79
00:05:39,530 --> 00:05:42,420
faulty type conversion or dividing by zero.

80
00:05:42,740 --> 00:05:47,520
Generally, it is relatively safe to handle this exception and continue running the program.

81
00:05:47,840 --> 00:05:50,990
Now, why not just handle all kind of exception?

82
00:05:51,350 --> 00:05:53,270
Doing so can be very dangerous.

83
00:05:53,270 --> 00:05:55,800
Some exceptions are more serious than others.

84
00:05:56,150 --> 00:05:59,840
There are some errors that we should allow to crash our program.

85
00:06:00,020 --> 00:06:05,510
Not important error, such as no memory error, the syntax error and the load error must be addressed

86
00:06:05,510 --> 00:06:08,620
in order for our program to operate appropriately.

87
00:06:08,780 --> 00:06:15,170
Handling all exceptions may result in masking critical errors and can make debugging a very difficult

88
00:06:15,170 --> 00:06:15,610
task.

89
00:06:16,630 --> 00:06:23,950
So in order to avoid causing unwanted behavior itself, it is important to be intentional and very specific

90
00:06:23,950 --> 00:06:28,600
about which exceptions you want to handle and what actions you want to take when you handle them.

91
00:06:28,930 --> 00:06:35,500
The action you choose to take when handling an exception will be dependent on the circumstances, for

92
00:06:35,500 --> 00:06:41,980
example, including logging the error, sending an email to the administrator or displaying a message

93
00:06:42,250 --> 00:06:43,480
to the user.

94
00:06:44,980 --> 00:06:48,590
Now the question comes how to handle an exceptional state.

95
00:06:48,910 --> 00:06:51,520
Now the answer to this is basically exception.

96
00:06:51,530 --> 00:06:58,090
Handling that comes with a begging and rescue blog, the Syntex, of which you can see right on your

97
00:06:58,090 --> 00:07:02,100
screens now using a bug in the rescue blog to handle errors.

98
00:07:02,800 --> 00:07:10,570
You can keep your program from crashes if the exception you have specified is raised now in this index,

99
00:07:11,350 --> 00:07:17,980
the Syntex, the program will execute in the rescue clause rather than exiting the program.

100
00:07:17,980 --> 00:07:25,990
If the code on line number two raises a type error, if no exception is raised, the rescue clause will

101
00:07:25,990 --> 00:07:30,580
not be executed at all, and all the program will continue to run normally.

102
00:07:30,880 --> 00:07:36,430
Now you can see that online 3V specified what type of exception to rescue, if no exception type is

103
00:07:36,790 --> 00:07:41,240
specified, then the all standard error exception will be rescued and handled.

104
00:07:41,620 --> 00:07:47,860
Remember not to tell Ruby Rescue exception the last exceptions, because if you tell Ruby to rescue

105
00:07:47,860 --> 00:07:54,100
the exception exception, it will rescue all the exception down the exception class hierarchy, which

106
00:07:54,100 --> 00:07:56,440
is very dangerous as explained previously.

107
00:07:56,740 --> 00:08:03,910
So it is it is possible to include multiple rescue clauses to handle different type of exceptions as

108
00:08:03,910 --> 00:08:04,240
well.

109
00:08:04,540 --> 00:08:06,040
That may occur in your code.

110
00:08:06,050 --> 00:08:10,540
For example, you can see the syntax for adding multiple rescue right over here.

111
00:08:10,810 --> 00:08:11,580
You can see that.

112
00:08:12,190 --> 00:08:16,480
Alternatively, if you would like to take some action for more than one type of exception, you can

113
00:08:16,750 --> 00:08:22,900
see that on line number five for here that we have just tried rescue and we are right in the argument

114
00:08:22,900 --> 00:08:23,100
error.

115
00:08:23,110 --> 00:08:29,170
So here basically we are having to kind of catching errors now here, right over here, up to the beginning,

116
00:08:29,170 --> 00:08:32,800
we are going to write the code for which we are expecting some kind of error.

117
00:08:33,040 --> 00:08:38,590
And if I type better or the argument error occurring, that code than that is going to get caught right

118
00:08:38,590 --> 00:08:39,910
in this object over here.

119
00:08:40,090 --> 00:08:44,930
And whatever action you perform, you can just write in a statement of a head that is going to just

120
00:08:44,950 --> 00:08:48,860
generate a message that you have got an error over here or you can just handle it right over here.

121
00:08:49,750 --> 00:08:56,500
So this is also helpful because you're going to find out that what type of error occurs, because for

122
00:08:56,500 --> 00:09:01,530
the specific rescue blog, the specific error is going to get handled.

123
00:09:02,140 --> 00:09:04,960
So I guess that's it.

124
00:09:06,480 --> 00:09:13,500
Let me give you a very quick example for the Syntex we have just covered, so I will just move on to

125
00:09:13,500 --> 00:09:14,040
Adam.

126
00:09:16,610 --> 00:09:19,080
So we will create a beginning of a hill.

127
00:09:19,130 --> 00:09:23,120
Just click, enter, and right here you are going to write in the code for which you are expecting some

128
00:09:23,120 --> 00:09:24,060
kind of arguments.

129
00:09:24,080 --> 00:09:29,270
For example, let's say in this whatever code we are going to write and we are going to check if any

130
00:09:29,270 --> 00:09:30,840
number is being divided by zero.

131
00:09:30,860 --> 00:09:34,490
You know, that division by zero is not possible because it is going to generate infinity, which is

132
00:09:34,490 --> 00:09:38,240
not just accessible by any kind of calculator, will help.

133
00:09:38,540 --> 00:09:42,590
So, for example, you just write an X equal to ten divided by zero.

134
00:09:42,620 --> 00:09:48,350
You know that this is an error that is going to generate a message that is going to be zero, a division

135
00:09:48,350 --> 00:09:48,640
error.

136
00:09:48,890 --> 00:09:51,000
So let's just try it here.

137
00:09:51,200 --> 00:09:54,350
So let's just write an X equal to ten divided by zero.

138
00:09:54,350 --> 00:09:58,310
Run this code and you can see that it says it is a zero division error.

139
00:09:58,310 --> 00:10:05,030
So this zero division, as I told you as well in the introduction part, that this is basically a class

140
00:10:05,030 --> 00:10:12,440
and this is basically you can say it is the descendant of a subclass of the exception class.

141
00:10:13,700 --> 00:10:18,520
So since you're expecting some kind of error with this or what you will do is that you will put this

142
00:10:18,530 --> 00:10:24,500
good in the beginning block so that it does not generate error and it is going to get handled in the

143
00:10:24,500 --> 00:10:25,220
rescue blocks.

144
00:10:25,220 --> 00:10:25,490
Right.

145
00:10:25,520 --> 00:10:28,520
Well, here we are going to write in the same statement then divided by zero.

146
00:10:28,850 --> 00:10:35,330
And now we are going to create our rescue blog and we are going to specify this thing from here to we

147
00:10:35,330 --> 00:10:36,620
are going to write in zero.

148
00:10:38,750 --> 00:10:39,560
División.

149
00:10:40,640 --> 00:10:41,180
Error.

150
00:10:41,660 --> 00:10:47,060
So this is what we are going to specify and inhale, we are going to just write inputs then divided

151
00:10:47,060 --> 00:10:48,980
by two, so we are going to just correct that.

152
00:10:49,190 --> 00:10:55,070
So if any kind of division is done by dividing it by zero, that is not going to get executed and this

153
00:10:55,070 --> 00:10:56,630
statement is going to get executed.

154
00:10:57,050 --> 00:10:59,300
Just and this Abargil around is good.

155
00:10:59,420 --> 00:11:03,410
And you are going to see that it has generated five in the previous case, as you have seen, that it

156
00:11:03,410 --> 00:11:06,140
has generated the error that says the zero deviation error.

157
00:11:06,590 --> 00:11:09,200
Now, let's say I divide it by five horrendous code.

158
00:11:10,740 --> 00:11:11,730
AirTran, perfect.

159
00:11:11,760 --> 00:11:15,670
Now let's just write in votes Xolo Hill now run the score.

160
00:11:15,700 --> 00:11:20,300
Now you can see that it has generated do so in the case where the big blog has all the gold.

161
00:11:20,310 --> 00:11:21,140
That is correct.

162
00:11:21,420 --> 00:11:25,620
So this blog, O'Hare, is not going to get gold in that case.

163
00:11:25,830 --> 00:11:31,380
But in the case where you have got an error, which is basically going to get handled by the very same

164
00:11:31,380 --> 00:11:36,720
descendant of the subclass of the exception clause, then it is going to get handled right over here.

165
00:11:36,750 --> 00:11:40,110
So, for example, if I just write in type error over here.

166
00:11:41,400 --> 00:11:46,560
And now I run the school, you can see that it has now generated me the error because that type error

167
00:11:46,590 --> 00:11:48,400
does not handle this kind of error.

168
00:11:48,420 --> 00:11:51,360
That is division by the department is four different things.

169
00:11:51,630 --> 00:11:58,260
So to handle this specific error, you have to specify the specific class for which that error is going

170
00:11:58,260 --> 00:11:59,230
to get generated.

171
00:11:59,610 --> 00:12:04,500
So in this case, let's say we create the multiple rescue blocks, as I've told you before.

172
00:12:04,590 --> 00:12:07,080
So let's say we create one more over here.

173
00:12:07,080 --> 00:12:09,990
That is the zero, the region.

174
00:12:11,070 --> 00:12:14,160
Error, and this time we are going to just try and put.

175
00:12:16,030 --> 00:12:24,340
Zero division error is handled, and right here we are going to just write in votes.

176
00:12:26,580 --> 00:12:29,430
Type error is handled.

177
00:12:30,350 --> 00:12:34,040
Hill, so I guess that's good enough.

178
00:12:34,550 --> 00:12:40,250
Now let's just run this code and now you can see that since we have got to rescue a lot in which we

179
00:12:40,250 --> 00:12:45,320
have the zero division error for which the error has occurred in that big and long.

180
00:12:45,320 --> 00:12:50,180
So that's why this division error is going to get cold and this is going to get printed.

181
00:12:50,210 --> 00:12:52,430
Now, let's suppose that we have got some type error.

182
00:12:52,730 --> 00:12:58,760
Now, you know that if you have, let's say, a statement that says you lost a string and in which you

183
00:12:58,760 --> 00:12:59,240
just write in.

184
00:12:59,240 --> 00:13:03,330
Q If you just run the score, it is going to generate error and it's strings can not be converted into

185
00:13:03,330 --> 00:13:05,660
integer, and that is known as the type error.

186
00:13:05,960 --> 00:13:08,390
Now we already have a rescue blog for the type error.

187
00:13:08,540 --> 00:13:10,310
So if you just remove this from here.

188
00:13:11,780 --> 00:13:17,300
And ride to a hill after this, what we are going to do is that we are going to specify one more variable

189
00:13:17,300 --> 00:13:19,340
in which we are going to ride in to Las.

190
00:13:20,520 --> 00:13:24,650
Kumalo Hill, and now we are going to write in votes, why are we here?

191
00:13:24,990 --> 00:13:31,710
So if I now run to school, you can see that it says zero division error is handled and this should

192
00:13:31,710 --> 00:13:33,360
also get called.

193
00:13:33,840 --> 00:13:37,740
But the reason that it is not called is because the error occurred right over here.

194
00:13:37,860 --> 00:13:43,300
It just jump over here, it handle this and it just move back, move out of this class over here.

195
00:13:43,530 --> 00:13:46,410
So if you just put this away here at the top.

196
00:13:47,480 --> 00:13:53,300
And now run this code, now it is going to generate the message that says type error is handled so wherever

197
00:13:53,300 --> 00:13:59,480
and big and log where the error is going to get handled, then it is going to just move out of that

198
00:13:59,480 --> 00:14:00,020
bag and log.

199
00:14:00,020 --> 00:14:04,160
It is not going to execute the other statements in that specific block.

200
00:14:04,180 --> 00:14:11,210
So after this statement is executed, it is going to just look for the rescue blocks and see if the

201
00:14:11,210 --> 00:14:12,680
type error is being handled.

202
00:14:12,890 --> 00:14:18,740
It was so it just printed out this statement over here and it does not execute these three statements

203
00:14:18,740 --> 00:14:19,600
right down here.

204
00:14:19,820 --> 00:14:24,500
So that's why in the previous case, the type error is handled here, was not printed.

205
00:14:24,500 --> 00:14:29,110
And now in this case, the zero división error is handled, is not printed right over here.

206
00:14:29,870 --> 00:14:35,390
So I hope that it is clear you now know how to implement the beginning of rescue block in Ruby.

207
00:14:35,720 --> 00:14:39,020
So in the next story, we are going to cover more on exception handling.

208
00:14:39,020 --> 00:14:39,860
So stay tuned for that.

209
00:14:39,890 --> 00:14:41,130
So for this to drill, that's it.

210
00:14:41,150 --> 00:14:42,410
Thank you so much for watching.

211
00:14:42,410 --> 00:14:44,540
And I'll see you guys in the next tutorial.
