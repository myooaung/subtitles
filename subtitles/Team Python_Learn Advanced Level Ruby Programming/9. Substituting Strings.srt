1
00:00:00,390 --> 00:00:01,410
Hey, guys, what's up?

2
00:00:01,440 --> 00:00:06,760
This is a marathon, and I welcome you to another tutorial on this course on Drillbit and in this trattoria

3
00:00:06,780 --> 00:00:14,400
we will be covering about substituting strength and we can use two methods to replace strings in Ruby.

4
00:00:14,400 --> 00:00:18,270
The first one is the same method and the second one is the GitHub method.

5
00:00:18,600 --> 00:00:25,020
Now, the GSA basically applies the substitution globally, whereas the sub applies the substitution

6
00:00:25,020 --> 00:00:26,010
to only that instead.

7
00:00:26,100 --> 00:00:29,850
So it is also called as substitution locally.

8
00:00:30,210 --> 00:00:35,390
Now we can use strings or regular expression as the argument to these methods.

9
00:00:35,670 --> 00:00:39,480
With special course, you can insert part of the match into a replacement.

10
00:00:39,810 --> 00:00:46,170
Now, regular expressions can also be used to just use the replacement of the strings.

11
00:00:46,500 --> 00:00:52,440
But since regular expression is going to be covered in the future tutorial, so we will go over those

12
00:00:52,440 --> 00:00:53,520
substitutions later.

13
00:00:53,530 --> 00:00:59,560
For now, we will just deal with the sub and sub that are going to be dealt normally.

14
00:00:59,820 --> 00:01:07,490
So let's say we have a variable that is X that is equal to, let's say, some guy table.

15
00:01:07,950 --> 00:01:14,400
Now with that table, what we are going to do is that if you use sub and you use an exclamation after

16
00:01:14,400 --> 00:01:18,390
that, then that is going to be called an inline replacement.

17
00:01:18,390 --> 00:01:25,430
Whereas if you use normal sub, then this means that it will return another string in these calls.

18
00:01:25,440 --> 00:01:28,290
The first argument is replaced with the second argument.

19
00:01:28,530 --> 00:01:34,890
So, for example, if I want to use a sub right here with this X2, I'm going to add an extra step.

20
00:01:35,040 --> 00:01:39,500
And if I use an exclamation, this means that I'm using an inline replacement.

21
00:01:40,050 --> 00:01:44,100
And what I'm going to do is that I'm going to specify two strings over here.

22
00:01:45,520 --> 00:01:50,000
The first thing is going to be the string that is a part of this, which you want to change.

23
00:01:50,020 --> 00:01:53,090
For example, I want to change the.

24
00:01:55,890 --> 00:01:56,400
With.

25
00:01:57,630 --> 00:01:58,410
Let's say.

26
00:02:01,620 --> 00:02:06,420
Ari, or just make it, Ari, so.

27
00:02:07,400 --> 00:02:08,930
Let's just run the score.

28
00:02:08,960 --> 00:02:12,200
But before that, we have to store it in a variable.

29
00:02:13,230 --> 00:02:19,160
That is why equal to extra substitution and what we have to do is that we have the right inputs.

30
00:02:19,170 --> 00:02:19,470
Why?

31
00:02:19,470 --> 00:02:21,030
So that we can see what's going on.

32
00:02:21,330 --> 00:02:28,380
And as you can see that we have got our Ebele instead of DÃ©by because they got replaced with our.

33
00:02:29,010 --> 00:02:31,230
Now, this was called an inland substitution.

34
00:02:31,230 --> 00:02:36,550
If you just remove this from here, then it will return another string.

35
00:02:36,600 --> 00:02:40,850
So if you just run the score, it is going to return the very same output.

36
00:02:40,860 --> 00:02:48,210
But when we were using sup and exclamation mark, it replaces in line and the sub method, which we

37
00:02:48,210 --> 00:02:51,480
have used right now, it returns another strings.

38
00:02:51,960 --> 00:02:58,360
So now basically, what is the difference between the sub and the sub?

39
00:02:58,560 --> 00:03:04,110
Now the sub method basically replaces just the first instance of a string with another, whereas the

40
00:03:04,110 --> 00:03:09,320
G sub replaces all the instance of a specific part.

41
00:03:09,510 --> 00:03:17,230
So jism is closer to a replaced string method and sub is conceptually a replace for string method.

42
00:03:17,700 --> 00:03:22,260
So what I mean over here is that, for example, if I have table Chilwell.

43
00:03:24,110 --> 00:03:29,840
Well, let's say I have the same strength table table over here and I'm using extorts up with that and

44
00:03:29,840 --> 00:03:33,640
I want to replace the air with our A run the score.

45
00:03:33,770 --> 00:03:39,410
And as you can see, that I've got only are a value for the first one and for the second one, I have

46
00:03:39,410 --> 00:03:44,480
the Dibella as the very same because and it hasn't replaced that for me.

47
00:03:44,780 --> 00:03:47,480
Not I have let's say another variable.

48
00:03:48,770 --> 00:03:51,680
In which I have Z and I will do.

49
00:03:53,470 --> 00:04:01,630
X dot Gizab now, which is a global substitution and I write and 88, which is the string I want to

50
00:04:01,630 --> 00:04:08,350
replace and I want to replace it with R a and I will just write inputs that run this code.

51
00:04:08,560 --> 00:04:13,440
And as you can see on the second line that I've got RB and R a, b, e.

52
00:04:13,690 --> 00:04:20,980
So that's why I said that GitHub is close to a replace string method where a sub is conscious and conceptually

53
00:04:20,980 --> 00:04:26,620
I would replace fostering method because as you can see that when this replacement was applied, it

54
00:04:26,620 --> 00:04:28,300
was applied only on the fostering.

55
00:04:28,300 --> 00:04:31,500
That's why it is called as the replace fostering method.

56
00:04:31,510 --> 00:04:35,500
And when you apply the Gizab, it replaces it for the entire string.

57
00:04:35,510 --> 00:04:41,800
That's why it is called as the replace string method, and that's why it is also called as the global

58
00:04:41,800 --> 00:04:42,400
substitution.

59
00:04:42,400 --> 00:04:51,040
Because when Jesus is used, it checks for every kind of DNA that is available in the entire string.

60
00:04:51,040 --> 00:04:55,780
And wherever it finds the DNA, it is going to replace it with the array.

61
00:04:55,780 --> 00:04:58,590
But in case of substance, it is a local substitution.

62
00:04:58,840 --> 00:05:04,510
So what they do is that it only when it finds the first occurrence of the DNA, it is going to replace

63
00:05:04,510 --> 00:05:08,350
it with RNA and the rest is going to remain the same.

64
00:05:08,590 --> 00:05:11,980
Now, what if let's say we have something like.

65
00:05:13,410 --> 00:05:19,370
Let's say are a something like any kind of word that is before that.

66
00:05:19,410 --> 00:05:25,470
So if you just run that code, you can simply see that you have got Oraibi for the first string and

67
00:05:25,470 --> 00:05:26,850
Dibella as the same.

68
00:05:27,090 --> 00:05:32,850
So it is going to search for the first occurrence of the and it is going to replace it with R.E. and

69
00:05:32,850 --> 00:05:34,680
then the submitter is going to just exit.

70
00:05:34,690 --> 00:05:41,490
But for example, it is going to keep searching for any kind of DNA in the entire string and it is going

71
00:05:41,490 --> 00:05:43,260
to replace it.

72
00:05:45,190 --> 00:05:53,290
So that's basically how Sub and Jessopp are used to substitute strength, and I guess you have also

73
00:05:53,290 --> 00:05:55,120
understood the difference between the two.

74
00:05:55,360 --> 00:06:01,200
Now, regular expressions can also be used in this scenario.

75
00:06:01,210 --> 00:06:07,900
We can specify a regular expression as the first argument to Sabantuy sub and the regular expression

76
00:06:07,900 --> 00:06:14,950
meta characters can be used, but that is going to be a part of the future tutorials when we will be

77
00:06:14,950 --> 00:06:18,880
discussing regular expression for now because you don't know what our regular expressions.

78
00:06:18,880 --> 00:06:21,960
So you want to understand if I do it in this tutorial.

79
00:06:22,090 --> 00:06:23,790
So we will cover it in the future tutorial.

80
00:06:23,950 --> 00:06:28,150
So for now, you only need to understand what is sub what is just up and what is the difference between

81
00:06:28,150 --> 00:06:28,660
the two.

82
00:06:28,820 --> 00:06:31,830
So I hope that you have understood it.

83
00:06:31,930 --> 00:06:33,700
So I guess that's it for this tutorial.

84
00:06:34,060 --> 00:06:35,500
Thank you so much, guys, for watching.

85
00:06:35,500 --> 00:06:37,330
And I'll see you guys in the next tutorial.
