WEBVTT
1
00:00:00.470 --> 00:00:01.400
Hey, guys, what's up?

2
00:00:01.430 --> 00:00:05.160
This is a marathon, and I welcome you to another door on this course on Ruby.

3
00:00:05.360 --> 00:00:12.510
And in this story, we are going to see the scope of a variable in a function and outside a function.

4
00:00:12.890 --> 00:00:18.270
So basically, a variable scope is categorized into two kinds.

5
00:00:18.290 --> 00:00:19.940
The first one is the local scope.

6
00:00:19.940 --> 00:00:21.830
And then we have the global scope.

7
00:00:22.130 --> 00:00:27.260
Now, local scope is basically a variable, is defined inside a block.

8
00:00:27.600 --> 00:00:32.630
Then that variable is going to only be accessible inside that block.

9
00:00:32.630 --> 00:00:39.740
And if you want to access that variable outside that block, then your editor is not going to allow

10
00:00:39.740 --> 00:00:40.460
you for that.

11
00:00:40.460 --> 00:00:46.490
And an error message is going to be generated that is going to tell you that that this variable you

12
00:00:46.490 --> 00:00:49.910
are trying to use is not defined anywhere in your code.

13
00:00:50.180 --> 00:00:56.300
And then we have the second type that is the global scope and a global scope variable is basically what

14
00:00:56.300 --> 00:01:03.980
is accessible everywhere in your code, in every block, outside every block and everywhere in simple

15
00:01:03.980 --> 00:01:05.480
words, in your code.

16
00:01:05.480 --> 00:01:07.820
If you want to use that, you can just go on and use it.

17
00:01:08.030 --> 00:01:15.410
Now, there are specific advantages and disadvantages of using the local variables and the global variables.

18
00:01:15.710 --> 00:01:22.040
But if you talk about the local variables, mostly it is very, very, very good to use.

19
00:01:22.040 --> 00:01:29.510
And it also it mostly has almost all the advantages and apparently if you talk it, don't have any kind

20
00:01:29.510 --> 00:01:31.010
of disadvantages.

21
00:01:31.250 --> 00:01:38.320
But if you talk about the global scope, then it has some advantages, but mostly it comes with disadvantages.

22
00:01:38.330 --> 00:01:45.830
Not the first disadvantage of a global variable is the security, because if a variable is accessible

23
00:01:45.830 --> 00:01:48.290
everywhere, then that variable can be manipulated.

24
00:01:48.710 --> 00:01:55.130
Secondly, if you specify a variable as global, then you cannot define that variable anywhere in your

25
00:01:55.130 --> 00:02:00.800
code again, because if you do so, it is going to tell you that this is basically renationalization

26
00:02:01.070 --> 00:02:04.700
are in some programming languages, including Ruby.

27
00:02:04.700 --> 00:02:09.410
What is going to do is that it is going to override the value of the previous variable you have used

28
00:02:09.770 --> 00:02:12.260
and that is going to create messy problems.

29
00:02:12.260 --> 00:02:15.740
And such kind of errors are very difficult to look at as well.

30
00:02:17.130 --> 00:02:25.080
And if you talk about local scope, then you can define a variable inside a blog and outside the blog,

31
00:02:25.090 --> 00:02:29.270
your code does not know that this variable even exists or not.

32
00:02:29.520 --> 00:02:36.150
So you cannot define a variable to time in a single log, but you can use it single time and then outside

33
00:02:36.150 --> 00:02:38.010
that block you can again use it.

34
00:02:38.010 --> 00:02:42.350
And then, for example, you have a third block again, then you can use that variable again.

35
00:02:42.360 --> 00:02:50.270
So you do not fall short of variables in case you are having local scope for most of your variables.

36
00:02:50.280 --> 00:02:54.560
But if you are using global scope, you may fall short of some variables.

37
00:02:54.780 --> 00:02:58.380
So let's see, let's say content to our topic.

38
00:02:58.380 --> 00:03:01.200
That is the variable scope only and functions for now.

39
00:03:01.440 --> 00:03:06.870
So we will see some examples for how variables are going to be accessed.

40
00:03:07.830 --> 00:03:13.200
And let's go on to Adam and let's say you have a function.

41
00:03:14.970 --> 00:03:18.090
And let's say in this function, you have, let's say name.

42
00:03:19.490 --> 00:03:20.920
Equal to my name.

43
00:03:22.280 --> 00:03:26.210
And then you have to just end this function, and if I call this function.

44
00:03:28.520 --> 00:03:33.830
Then if I just use in quotes with it, run school, it is going to run perfectly.

45
00:03:35.160 --> 00:03:41.040
But as you can see, that I have this name equal to matter, and if I want to use this outside this

46
00:03:41.040 --> 00:03:42.680
blog, let's say.

47
00:03:43.750 --> 00:03:45.610
I want to use this puts.

48
00:03:47.280 --> 00:03:53.640
Namoa here again, since names already contain a value, so let's say I've just written name equal to

49
00:03:53.640 --> 00:03:54.540
Maroa here.

50
00:03:55.700 --> 00:04:01.250
And I want to print that name outside this blog, so if I just run the score, it is going to generate

51
00:04:01.250 --> 00:04:06.080
an error and it says undefined local variable or method that is named as name.

52
00:04:06.320 --> 00:04:11.090
So that's why it does not recognize this name, because you have moved outside the block.

53
00:04:11.150 --> 00:04:19.460
And as I told you, that a local variable is something that is accessible only inside a function or

54
00:04:19.460 --> 00:04:20.590
you may say a block.

55
00:04:21.320 --> 00:04:28.160
Then if you talk about the variable scope in, let's say, arguments, so for example, you have my

56
00:04:28.160 --> 00:04:30.920
name Postern from here is just remove it for now.

57
00:04:31.490 --> 00:04:35.170
And let's say you have a variable name over here.

58
00:04:35.630 --> 00:04:38.290
So you have specified name equal to Marrawah here.

59
00:04:38.300 --> 00:04:44.930
You can just write and post name O'Haire underscored and it is going to run perfectly because this variable

60
00:04:44.930 --> 00:04:50.210
name is contented to whatever is received in this name.

61
00:04:50.210 --> 00:04:53.420
And this basically has a scope inside this block.

62
00:04:53.420 --> 00:05:01.630
And again, if you want to print it out outside this blog, but just write inputs, name Abargil, run

63
00:05:01.640 --> 00:05:06.360
the score and it is again going to give me the very same error that says undefined local variable or

64
00:05:06.360 --> 00:05:08.060
a method that is named as name.

65
00:05:08.330 --> 00:05:16.670
So you can not define this variable outside because an argument which is passed a function only has

66
00:05:16.670 --> 00:05:18.780
a scope within that function.

67
00:05:19.160 --> 00:05:24.260
So this is what is local variable, and that is why it is very important, as you can see, that if

68
00:05:24.260 --> 00:05:30.710
I want to use this variable name again in my code somewhere, I can just write a name equal to.

69
00:05:32.090 --> 00:05:38.120
Horn and then I can just use it like boat's name or underscore, and it is going to generate this message

70
00:05:38.120 --> 00:05:44.390
for me so you can use this variable multiple times in your code so you don't fall well short of variables

71
00:05:44.390 --> 00:05:46.210
in code, which is very extensive.

72
00:05:47.090 --> 00:05:52.070
Then we have certain variables which are accessible outside the block, but not inside the block.

73
00:05:52.070 --> 00:05:58.940
And for example, if I have, let's say, a variable X equal to, let's say do over here and let's say

74
00:05:58.940 --> 00:06:06.770
I want to bring that variable X O'Haire or on the and it is going to run perfectly as this is accessible

75
00:06:06.770 --> 00:06:13.160
outside, not outside any kind of block, because we have defined it outside the block and we have printed

76
00:06:13.160 --> 00:06:13.880
it outside the block.

77
00:06:13.890 --> 00:06:14.710
So it is accessible.

78
00:06:14.720 --> 00:06:21.170
But if I tried to use it or help run this code and it is going to generate an error, as you can see,

79
00:06:21.170 --> 00:06:28.760
that this output is printed, which is basically describing executed, but the error which is generated

80
00:06:28.760 --> 00:06:30.070
is that is undefined.

81
00:06:30.070 --> 00:06:35.450
Local variable or Method X is basically for this right here, which we are trying to print out, because

82
00:06:35.450 --> 00:06:42.360
this X variable is not accessible inside this block, because this is accessible outside the block.

83
00:06:42.560 --> 00:06:50.900
So this is how this is also a basically a case of local variable, is that you can have variables that

84
00:06:50.900 --> 00:06:56.720
are outside the block and then you can use the very same variable inside the block, for example, you

85
00:06:56.720 --> 00:07:05.060
just have to specify X again and you can specify a value three acts from this code and you can see that

86
00:07:05.060 --> 00:07:08.380
two hundred is going to be printed out.

87
00:07:08.690 --> 00:07:12.760
So that's a game that you don't fall short of variables.

88
00:07:13.310 --> 00:07:17.000
Then comes the concept of global variables.

89
00:07:17.270 --> 00:07:22.850
So to define a global variable but you have to do is that you have to specify a dollar sign away here.

90
00:07:23.390 --> 00:07:29.180
And wherever you have used this variable X, you have to specify Dorasan with that.

91
00:07:29.180 --> 00:07:32.330
So you can not just reinitialize it now.

92
00:07:34.100 --> 00:07:38.140
To specify a dollar sign over here, you have to specify our dollars an hour here as well.

93
00:07:38.430 --> 00:07:43.290
Now as you can see that we have this X equals two, which is defined outside the block, and we are

94
00:07:43.290 --> 00:07:47.300
trying to print its value inside a blog as well as outside a block.

95
00:07:47.600 --> 00:07:52.530
So if I just run this code, you can see that it ran perfectly and you've got two and two right over

96
00:07:52.530 --> 00:07:54.950
here without any kind of error messages.

97
00:07:54.960 --> 00:07:58.410
So that's how basically you can use global variables.

98
00:07:58.560 --> 00:08:04.050
And let's say, for example, I want to redefine the value for this X and just the right in dollars

99
00:08:04.050 --> 00:08:05.280
X equal to three.

100
00:08:06.000 --> 00:08:12.990
If I just try to run this code that, as you can see, that you have got to for the first case and then

101
00:08:12.990 --> 00:08:16.830
you have got three for the second case, that is basically this.

102
00:08:17.370 --> 00:08:20.870
So when this function is going to be call, it is going to print on three.

103
00:08:20.880 --> 00:08:25.530
And when this first one is going to go be call, it is going to print out this two.

104
00:08:25.530 --> 00:08:27.570
And if you try to let's say.

105
00:08:28.750 --> 00:08:37.360
Printed its value after this function is basically call, I just write in votes dialer X over here on

106
00:08:37.360 --> 00:08:44.050
this code and as you can see that you have gone through your hair, which means that the value of X

107
00:08:44.050 --> 00:08:50.830
is basically overridden and it is no longer true, but it is going to be three after this function is

108
00:08:50.830 --> 00:08:54.910
going to be called where we have reinitialize the value of excretory.

109
00:08:55.060 --> 00:08:56.590
So this is if you.

110
00:08:57.620 --> 00:09:04.790
Ask me, it is a big disadvantage in rugby because, for example, if you don't realize that you have

111
00:09:04.800 --> 00:09:10.610
certain kind of variable and you just reinitialize it and you want to use its value, then it is going

112
00:09:10.610 --> 00:09:12.380
to create errors for you.

113
00:09:12.560 --> 00:09:17.510
Because this is not a syntax error, but this is some kind of mathematical type of error.

114
00:09:17.510 --> 00:09:23.540
Or you may say now this is something that is not going to be shown to you on your output screen and

115
00:09:23.540 --> 00:09:29.270
you cannot identify where that occur if you are coding a very long program.

116
00:09:29.930 --> 00:09:37.550
But if you talk about Ruby over here, then Ruby has this advantage that it has this dollar sign a with

117
00:09:37.550 --> 00:09:40.790
global variable so that you know that it is a global variable.

118
00:09:41.060 --> 00:09:44.750
And when you are using a global variable.

119
00:09:45.980 --> 00:09:51.590
So you must know that since you are using a global variable, so this means that it will have been defined

120
00:09:51.590 --> 00:09:56.870
somewhere else, but for example, if you don't realize that you have used this earlier and let's say

121
00:09:56.870 --> 00:10:02.030
you think that it is the first time I'm using this variable and you define it as dollar X, then it

122
00:10:02.030 --> 00:10:06.120
is going to be overridden and it is going to then create problems for you.

123
00:10:06.380 --> 00:10:09.290
So it has an advantage that it has a dollar sign.

124
00:10:09.300 --> 00:10:17.150
But if you have forgotten something, then it's totally not up to the ATM runner ATM or how it's totally

125
00:10:17.150 --> 00:10:17.860
up to you then.

126
00:10:18.110 --> 00:10:22.430
And for example, if you just don't specify the dollar sign with this and let's say I want to just write

127
00:10:22.430 --> 00:10:29.210
and put X over here, I run this code and it is going to read as to and as you can see after the function

128
00:10:29.210 --> 00:10:34.910
is even call it is again to and it has not changed its value because this X is now a local variable

129
00:10:34.910 --> 00:10:35.370
over here.

130
00:10:36.050 --> 00:10:42.650
So that was all about local variable scope, global variable scope inside function, how they are used

131
00:10:42.650 --> 00:10:48.530
in the function arguments and how you can have a single variable that is a global variable as well as

132
00:10:48.530 --> 00:10:49.470
a local variable.

133
00:10:49.970 --> 00:10:52.690
So I guess that's it with this Dorio.

134
00:10:52.700 --> 00:10:56.000
Thank you so much, guys, for watching and I'll see you guys in the next tutorial.
