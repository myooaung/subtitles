WEBVTT
1
00:00:00.510 --> 00:00:01.560
Hey, guys, what's up?

2
00:00:01.590 --> 00:00:05.630
This is American, and I welcome you to another door on this course on Rowby.

3
00:00:05.850 --> 00:00:12.240
And in this tutorial, we are going to cover a very interesting topic that is understanding absence

4
00:00:12.600 --> 00:00:14.070
in Ruby.

5
00:00:14.460 --> 00:00:21.050
Now, have you ever been confused about the different ways to handle missing data in Ruby language?

6
00:00:21.690 --> 00:00:28.680
Because I have and I'm sure that I'm not alone in that the option Ruby offer comes in the form of several

7
00:00:28.680 --> 00:00:32.970
methods that include the present black, middle and empty.

8
00:00:33.360 --> 00:00:40.500
There are all some very related since all of them check for the absence of data in some way.

9
00:00:40.770 --> 00:00:47.340
But they are also all different in the sense that they check for different types of absence, so to

10
00:00:47.340 --> 00:00:47.850
speak.

11
00:00:48.090 --> 00:00:50.880
Besides, there's also a question of availability.

12
00:00:51.150 --> 00:00:55.110
Not all of them are available to the same object.

13
00:00:55.530 --> 00:00:56.580
Sounds confusing.

14
00:00:56.610 --> 00:00:58.580
Well, you have come to the right place.

15
00:00:58.950 --> 00:01:00.630
This tutorial is going to clear up.

16
00:01:00.630 --> 00:01:07.740
That confusion will start by explaining the journal needs for this in which to model absence, not just

17
00:01:07.740 --> 00:01:10.200
in Ruby, but in programming in general.

18
00:01:10.440 --> 00:01:15.600
Then we will briefly cover some of the ruby characteristics, because such knowledge is important for

19
00:01:15.600 --> 00:01:20.730
understanding some of the choices made by the designers of languages.

20
00:01:21.030 --> 00:01:26.100
Finally, we will explain how to deal with missing or unknown data and Ruby covering each one of the

21
00:01:26.100 --> 00:01:28.930
methods in detail, including example.

22
00:01:29.400 --> 00:01:37.470
So now what we have is that what is something from nothing and what is the need for modeling absence

23
00:01:37.470 --> 00:01:38.260
in programming?

24
00:01:38.700 --> 00:01:44.240
Now we are going to dive into the different ways in which Ruby programming language models absence.

25
00:01:44.250 --> 00:01:50.130
But before we do that, let's go with the need for absence modeling, with programming in general.

26
00:01:50.610 --> 00:01:56.730
Now, I've seen different kind of people that define programming as the manipulation of data.

27
00:01:57.030 --> 00:02:02.430
And I would say most people think of data as a thing rather than not a thing.

28
00:02:02.460 --> 00:02:09.630
Or better yet, they think of data as the digital representation of a number of things that can range

29
00:02:09.630 --> 00:02:14.500
from physical object to even quantities or even abstract concepts.

30
00:02:14.760 --> 00:02:20.430
However, such a definition of data is inaccurate, or at least I must say it is incomplete.

31
00:02:20.640 --> 00:02:25.080
It's missing something, the very concept of missing something.

32
00:02:25.590 --> 00:02:31.710
Now, this might be surprising for the beginners, but in software development we devote a non-trivial

33
00:02:31.710 --> 00:02:34.700
amount of energy to handling the concept of absence.

34
00:02:34.950 --> 00:02:41.760
It's all too common to have a piece of data that is missing, unknown or generally unavailable for some

35
00:02:41.760 --> 00:02:42.210
reason.

36
00:02:43.140 --> 00:02:47.340
Ruby, of course, is not the only language that needs the concept of nothing.

37
00:02:47.640 --> 00:02:48.560
Far from it.

38
00:02:48.840 --> 00:02:57.060
If you have ever recorded an BHB, then you have certainly had to deal with a null and same goes for

39
00:02:57.180 --> 00:03:02.130
C Hash Java and pretty much every mainstream modern programming language.

40
00:03:02.580 --> 00:03:07.440
In the functional paradigm, it's common to use approaches such as optional types.

41
00:03:07.800 --> 00:03:13.280
Procedural languages could use written codes to sign that a given piece of data is missing.

42
00:03:13.710 --> 00:03:18.480
Now, why is the absent absence of data such an important concept and programming?

43
00:03:18.690 --> 00:03:26.190
Well, for the same reason it's important then in life in general, we, as in the human species, don't

44
00:03:26.190 --> 00:03:27.060
know a lot of things.

45
00:03:27.060 --> 00:03:31.980
In maths you have the concept of variables to represent unknown values.

46
00:03:32.340 --> 00:03:36.350
The concept of absence is present even in music.

47
00:03:36.570 --> 00:03:44.910
Those of you who are musician and can read music sheets, then you must know that they are symbols that

48
00:03:44.910 --> 00:03:47.100
denote positive pauses.

49
00:03:47.400 --> 00:03:54.540
You if you just read on the sheet of music and then if you have to have a post somewhere in the music,

50
00:03:54.720 --> 00:03:59.550
for example, if you are playing, let's say, a guitar and you have to pause in at a certain place,

51
00:03:59.670 --> 00:04:05.460
then that pause is going to also be indicated by some kind of symbol on a musical sheet.

52
00:04:06.490 --> 00:04:12.040
So it should not come as a surprise that in programming we also often have to deal with the concept

53
00:04:12.040 --> 00:04:12.930
of missing data.

54
00:04:13.510 --> 00:04:17.660
As I see it, the need for a nothingness comes in three categories.

55
00:04:17.790 --> 00:04:20.700
First, we have the situation of unavailable data.

56
00:04:20.710 --> 00:04:24.350
We don't know the answer yet, but we might know it in the future.

57
00:04:24.530 --> 00:04:30.700
An example of that would be data that is still not ready due to some time sensitive constraint.

58
00:04:30.700 --> 00:04:34.750
For instance, sales report of a given month when the month is not over.

59
00:04:34.750 --> 00:04:41.950
Yet another category of missing or invalid data would be data representing events that have not occurred

60
00:04:41.950 --> 00:04:43.740
yet or might never occur.

61
00:04:43.750 --> 00:04:48.790
For instance, thinks think about an employed table in a relational database.

62
00:04:48.910 --> 00:04:55.210
It probably makes sense for it to have a column called Termination Date, which might never come.

63
00:04:55.540 --> 00:05:01.870
Finally, there is also the case of absent data that is used to indicate that the question itself is

64
00:05:01.870 --> 00:05:02.470
not valid.

65
00:05:02.740 --> 00:05:10.600
If someone asked me whether the current king of Brazil is valid or not, I think such a person is mocking

66
00:05:10.600 --> 00:05:10.750
me.

67
00:05:10.750 --> 00:05:14.110
Or maybe they are just terribly misinformed.

68
00:05:14.240 --> 00:05:19.720
Anyway, there is no king of Brazil, which means that the question itself is not valid.

69
00:05:19.720 --> 00:05:26.020
In database design, for instance, we would probably use no to model that answer now.

70
00:05:27.230 --> 00:05:34.880
Understanding the concept of absence in Ruby, there are some key concepts for that now before we have

71
00:05:34.880 --> 00:05:40.160
covered the concept of nothingness or absence of data and programming, drawing comparisons between

72
00:05:40.160 --> 00:05:47.420
the need for representing absence in programming and other areas, then we have seen how you should

73
00:05:47.420 --> 00:05:51.560
have different use cases for representing absence with that out of the way.

74
00:05:51.620 --> 00:05:54.650
Now it's time to start talking about Ruby.

75
00:05:54.650 --> 00:05:59.500
Specifically, this language handles missing data in several different ways.

76
00:05:59.510 --> 00:06:01.670
It's time for you to know about them.

77
00:06:02.060 --> 00:06:10.550
And you also need to know that what tools you have to apply in the correct situation so that you get

78
00:06:10.550 --> 00:06:11.700
the correct output.

79
00:06:12.500 --> 00:06:18.650
Now, there is always a phrase if you are familiar with any kind of programming language, that everything

80
00:06:18.650 --> 00:06:19.700
is an object.

81
00:06:20.000 --> 00:06:26.420
The Ruby programming language, as you might know, and I have told you in the very starting tutorial

82
00:06:26.430 --> 00:06:32.240
that was first appeared in nineteen ninety five, Ukiyo Mat's Masumoto created the language, drawing

83
00:06:32.240 --> 00:06:37.790
inspiration from some of his favorite languages, such as Spurrell Small Smalltalk, I Feel Atah and

84
00:06:37.790 --> 00:06:38.270
Lisp.

85
00:06:39.350 --> 00:06:46.490
Ruby, like most mainstream programming languages, supports developing in several paradigms, effectively

86
00:06:46.670 --> 00:06:49.180
making it a multi paradigm language.

87
00:06:49.370 --> 00:06:53.790
But obviously Ruby Focus is the object oriented paradigm.

88
00:06:54.050 --> 00:06:59.630
People like to say that in Ruby everything is an object, but I think that's not quite accurate.

89
00:06:59.640 --> 00:07:07.020
But for the sake of this tutorial, let's consider that this statement is true.

90
00:07:07.460 --> 00:07:10.430
So what is the implication of everything is an object?

91
00:07:10.430 --> 00:07:17.720
Well, to accomplish things in Ruby, you call methods on objects are to put it in another way, you

92
00:07:17.720 --> 00:07:19.330
pass messages to them.

93
00:07:19.520 --> 00:07:23.750
So, for example, you have, let's say, a statement that is X equal to two Blasdel.

94
00:07:24.050 --> 00:07:31.130
Even someone who has never written a line of Ruby code can understand a line about the value of the

95
00:07:31.130 --> 00:07:33.140
result is quite obvious, obvious.

96
00:07:33.140 --> 00:07:35.960
But where is the object orientation in this?

97
00:07:36.230 --> 00:07:37.840
Where are the methods in this?

98
00:07:37.880 --> 00:07:39.320
Now the answer is simple.

99
00:07:39.500 --> 00:07:42.980
The line above is nothing but syntactic sugar.

100
00:07:43.190 --> 00:07:46.760
Now what's really happening is this line of code.

101
00:07:47.830 --> 00:07:53.830
You are calling the bluff method on the to object and passing the other two as an argument.

102
00:07:53.860 --> 00:07:58.450
So you are expressing such a simple idea that is equal to two plus two.

103
00:07:58.730 --> 00:08:03.130
Ruby still keeps loyal to its object oriented ideas.

104
00:08:04.350 --> 00:08:08.550
Now, if you talk about everything is an object, then what about nothing?

105
00:08:09.000 --> 00:08:15.960
This Ruby characteristics of almost everything being an object results interesting and often surprising

106
00:08:15.960 --> 00:08:19.580
choices when modeling the concept of nothingness.

107
00:08:19.590 --> 00:08:23.250
For instance, in Ruby, even true and false are objects.

108
00:08:23.460 --> 00:08:28.620
They are the single instances of the true glass and false glass respectively, which you have already

109
00:08:28.620 --> 00:08:30.090
covered in the previous tutorials.

110
00:08:30.690 --> 00:08:38.610
So it should not come as a surprise that in Ruby, even absence is modelled as some kind of object because

111
00:08:38.610 --> 00:08:42.900
that would be simply staying true to the language philosophy.

112
00:08:44.330 --> 00:08:51.410
Now, absence in Dubai, what about the types you have to come across now we are going to start on with

113
00:08:51.620 --> 00:09:00.380
the types that are four in number and the main they are the main method of checking for missing data

114
00:09:00.380 --> 00:09:01.310
in the Ruby language.

115
00:09:01.310 --> 00:09:07.010
So we will start with the most general and universally available one and progress towards the more specific.

116
00:09:07.310 --> 00:09:09.680
The first one is the nail.

117
00:09:09.920 --> 00:09:11.600
So let's start out with no sense.

118
00:09:11.600 --> 00:09:17.450
It's the most common and the most easy to understand way of representing nothingness in Ruby in terms

119
00:09:17.450 --> 00:09:19.100
of what it means.

120
00:09:19.310 --> 00:09:24.910
Nhill is exactly the same thing as in other programming languages.

121
00:09:25.280 --> 00:09:26.600
So basically what is not.

122
00:09:26.600 --> 00:09:31.370
Now, you have heard a lot about the previous tutorial, but to give you a basic introduction NUL,

123
00:09:31.940 --> 00:09:37.340
as it exists in many programming languages, is a sort of value that represents nothing.

124
00:09:37.520 --> 00:09:42.110
The way it's defined can and does vary a lot between languages.

125
00:09:42.410 --> 00:09:47.200
But the gist of it is the same now represents the absence of nothing.

126
00:09:47.450 --> 00:09:51.650
It can be returned from functions and also passed as an argument.

127
00:09:51.800 --> 00:09:54.590
But there is something problematic about the construct.

128
00:09:54.950 --> 00:10:03.650
Most of the time when some consumer code receives NUL or a.l, things go or even toward the special

129
00:10:03.650 --> 00:10:09.080
value can be gladly passed around as if it was a valid value.

130
00:10:09.290 --> 00:10:16.240
It is not it does not answer to the same contract as the valid objects it impersonating.

131
00:10:16.790 --> 00:10:20.890
So we will see examples of that later.

132
00:10:20.930 --> 00:10:24.920
But before that we have to cover the other types as well.

133
00:10:25.100 --> 00:10:27.950
So let's move on to the second type that is empty.

134
00:10:27.950 --> 00:10:34.370
So now we have covered the nil construct and Ruby and you can think of nil as the most general way of

135
00:10:34.370 --> 00:10:36.080
representing absence in Ruby.

136
00:10:36.950 --> 00:10:42.780
Editing can potentially be nil and every object can answer to the nil method.

137
00:10:43.190 --> 00:10:48.520
So now let's go over a more specific way of representing lack of data, and that is emptiness.

138
00:10:48.890 --> 00:10:52.910
Not everything can be nil, but only collections can be empty.

139
00:10:52.910 --> 00:11:00.770
The empty method can be used with objects such as Herries sets and hash, and it will return true when

140
00:11:00.770 --> 00:11:04.450
the collection does not have any kind of elements.

141
00:11:04.760 --> 00:11:10.750
However, the empty method is not available for any Marable's, and we will see examples for that later.

142
00:11:11.090 --> 00:11:16.870
So moving on to the third type, let's not talk about the blank matter.

143
00:11:17.660 --> 00:11:21.740
There's one important difference between this method and the next one as well.

144
00:11:21.740 --> 00:11:27.620
And those that came before the first two methods are native to the ruby language.

145
00:11:27.620 --> 00:11:32.660
The blank method, on the other hand, was introduced by the Ruby on Rails framework.

146
00:11:32.660 --> 00:11:35.690
With that out of the way, let's see what this method is all about.

147
00:11:36.020 --> 00:11:42.530
Now, this method is interesting because it check for several properties of a given object at once.

148
00:11:42.920 --> 00:11:45.440
This is a very common use case.

149
00:11:46.310 --> 00:11:50.930
Now, suppose that you have a method that is supposed to take an error as a parameter.

150
00:11:51.170 --> 00:11:57.440
You will often want to check not only that it is not null, but also that it's not empty.

151
00:11:57.440 --> 00:12:03.380
And since a string can be considered a collection of characters, the same reasoning applies right here.

152
00:12:03.380 --> 00:12:06.380
A similar argument could be made for a boolean value.

153
00:12:06.680 --> 00:12:10.640
You might want to check that it is not null and it is not false.

154
00:12:10.880 --> 00:12:17.270
Yes, you could write several checks, but that might really get old pretty fast.

155
00:12:17.540 --> 00:12:20.270
So always use blank for that.

156
00:12:20.420 --> 00:12:22.040
Not the real framework.

157
00:12:22.040 --> 00:12:23.000
Offer this method.

158
00:12:23.000 --> 00:12:27.260
It's a quicker way of performing several checks related to the validity of an object.

159
00:12:27.920 --> 00:12:34.820
The method will return true for a given object if it's no false, empty or a whitespace string.

160
00:12:34.940 --> 00:12:37.490
And we will also cover examples for that later.

161
00:12:37.910 --> 00:12:42.940
So talking about the fourth method we have, we got to the present method.

162
00:12:42.950 --> 00:12:48.470
Now, this one, like the previous method, is not native to the Ruby language itself, but also provided

163
00:12:48.470 --> 00:12:49.640
by the Rails framework.

164
00:12:49.910 --> 00:12:57.470
This method is by far the easiest of all to understand, and Herrod goes present is just the negation

165
00:12:57.470 --> 00:12:58.040
of blank.

166
00:12:58.400 --> 00:12:59.140
That's it.

167
00:12:59.450 --> 00:13:07.670
So now let's give our examples of all of these four methods we have covered so far.

168
00:13:08.450 --> 00:13:11.960
So let's move on to our compiler.

169
00:13:13.670 --> 00:13:20.960
Adam, and we don't need to go into the concept of Nilo here, because we have already covered that

170
00:13:21.080 --> 00:13:22.640
in our previous stories.

171
00:13:22.670 --> 00:13:26.300
So, you know, how do use nail in the basic parts?

172
00:13:26.630 --> 00:13:32.180
But we will be covering more about in the future tutorials when we will be covering functions and classes.

173
00:13:32.180 --> 00:13:35.190
Then you will see how classes and functions work on WETTENHALL.

174
00:13:35.630 --> 00:13:39.160
So now let's talk about the second one that was empty.

175
00:13:39.410 --> 00:13:42.350
So, for example, you have, let's say, outrange.

176
00:13:43.440 --> 00:13:48.600
That is from one to 10 and then you write in DOT Select.

177
00:13:51.450 --> 00:13:54.060
And what do you want to check away here is that.

178
00:13:56.310 --> 00:14:08.650
If it has certain value X and that X is greater than 10 and you want to see this list returns and empty.

179
00:14:08.700 --> 00:14:14.370
Well, you saw what he will do is that let's just have it in a variable X.

180
00:14:15.390 --> 00:14:21.340
And just right and puts her underscored and it is going to return true.

181
00:14:21.870 --> 00:14:29.460
Now, why it has returned true because we know that X has a range that is from one to 10 and none Nonno

182
00:14:29.790 --> 00:14:35.940
X, since it is going to first select one and put it in X, that is going to check in with this condition.

183
00:14:35.940 --> 00:14:37.080
X is greater than ten.

184
00:14:37.090 --> 00:14:41.610
It is not then is going to check for two, three, four, five, six, seven, eight, nine, 10 and

185
00:14:41.610 --> 00:14:43.320
14, which is the highest value.

186
00:14:43.320 --> 00:14:44.910
Ten is still not greater than then.

187
00:14:44.910 --> 00:14:46.960
It is equal to ten, but it is not greater than ten.

188
00:14:47.790 --> 00:14:52.260
So this list or here is basically going to be empty.

189
00:14:52.260 --> 00:14:53.710
So that's why it has returned to.

190
00:14:53.730 --> 00:14:59.190
But if you have, let's say, nine Oakhill, then you know that it will have a single element that is

191
00:14:59.190 --> 00:15:00.990
ten because ten is greater than nine.

192
00:15:01.000 --> 00:15:03.130
So it is not empty anymore.

193
00:15:03.150 --> 00:15:08.740
So if you now run the score, it is going to return false because this is not empty anymore.

194
00:15:09.030 --> 00:15:15.270
Similarly, as I told you, that basically this empty is used for areas.

195
00:15:15.270 --> 00:15:19.490
It is used for hashes, it is used for Granges, it is used for assets.

196
00:15:19.680 --> 00:15:24.630
So, for example, you have, let's say, some kind of list of elements here.

197
00:15:24.990 --> 00:15:32.250
That is, let's say one khurmatu cometary coma for and if you just run the score, it is going to return

198
00:15:32.250 --> 00:15:36.000
false because this list is not empty.

199
00:15:36.720 --> 00:15:39.480
Then the third method is basically blank.

200
00:15:39.480 --> 00:15:44.340
And as I told you about it, there is a framework of this matter as a quicker way of performing several

201
00:15:44.340 --> 00:15:46.500
checks related to the validity of an object.

202
00:15:47.100 --> 00:15:54.130
And the Blanchot method will return true for a given object if it is no false, empty or whitespace

203
00:15:54.150 --> 00:15:54.610
string.

204
00:15:54.990 --> 00:16:02.340
So if you specify blank here, it is not going to work because since it is for a before is and you have

205
00:16:02.340 --> 00:16:09.030
to meet some requirements for that which we don't have for now, as you can see that it says undefined

206
00:16:09.030 --> 00:16:11.320
method blank for an area.

207
00:16:11.730 --> 00:16:13.350
So that's why it is not working.

208
00:16:13.360 --> 00:16:15.360
It will not even work for a string.

209
00:16:15.360 --> 00:16:20.990
As you can see just from the score, you can see that it says undefined method blank for string.

210
00:16:21.360 --> 00:16:24.270
So we have to meet certain requirements.

211
00:16:24.270 --> 00:16:27.780
But this is basically the syntax for how that is going to be done.

212
00:16:27.780 --> 00:16:30.680
So don't bother about those requirements for now.

213
00:16:31.200 --> 00:16:39.780
That will be done when you will be using Ruby honoris or whenever you have to, covers Ruby on rails

214
00:16:39.780 --> 00:16:41.160
in some kind of tutorial.

215
00:16:41.520 --> 00:16:47.310
Then if you talk about the present, if you just write and present over here, as I told you, it is

216
00:16:47.310 --> 00:16:54.330
basically the reciprocal of this blank method and it is going to return the opposite of output.

217
00:16:55.080 --> 00:16:56.180
Blank is going to give.

218
00:16:56.190 --> 00:17:02.820
But this is also not going to work as this is also used in Ruby on rails.

219
00:17:04.810 --> 00:17:13.510
So to conclude, I would say that nothing is something worth to worry about, nothing is definitely

220
00:17:13.510 --> 00:17:19.780
something, at least when it comes to programming, the amount of effort that is put into figuring out

221
00:17:19.780 --> 00:17:25.870
clever ways to deal with absent or missing data in programming, which might seem weird, especially

222
00:17:25.870 --> 00:17:26.650
to beginners.

223
00:17:26.950 --> 00:17:30.440
But as you have just seen, there are valid use cases for that.

224
00:17:30.440 --> 00:17:35.930
There will be programming language offers, not only one, but many ways to handle.

225
00:17:35.930 --> 00:17:42.350
And in fact, things can even get confusing with so many similar methods.

226
00:17:42.380 --> 00:17:46.690
Now, this drill was just an attempt to clear up that confusion.

227
00:17:47.110 --> 00:17:53.110
So we started on by explaining the need to express missing on or unknown data, not only in Ruby, but

228
00:17:53.110 --> 00:17:55.860
in programming in general and even in other areas.

229
00:17:55.870 --> 00:18:02.140
Then we proceeded to cover some characteristics of Ruby that stem from its object oriented philosophies

230
00:18:02.140 --> 00:18:03.880
with those principles laid out.

231
00:18:04.130 --> 00:18:09.820
You finally explained in detail the form and methods of checking for the absence of presence of data

232
00:18:09.820 --> 00:18:10.740
and Ruby.

233
00:18:11.290 --> 00:18:21.370
So I hope that this tutorial was helpful in letting you know about the various ways you can come across

234
00:18:21.370 --> 00:18:22.690
to represent.

235
00:18:23.600 --> 00:18:31.550
Data that is now so basically, if you say that nothing is nothing, then you are absolutely wrong if

236
00:18:31.550 --> 00:18:34.430
you are a programmer because nothing is something.

237
00:18:34.460 --> 00:18:40.000
That's why we have got four methods to represent nothing in Ruby.

238
00:18:40.310 --> 00:18:42.380
So I guess that's it with Destroy.

239
00:18:43.250 --> 00:18:45.560
A lot of Terry was involved in this tutorial.

240
00:18:45.560 --> 00:18:45.860
I know.

241
00:18:45.860 --> 00:18:51.920
And it would be a bit difficult for you to understand, but I hope that if you go on with this tutorial

242
00:18:51.920 --> 00:18:56.990
three to four times, you will be able to understand this concept because you have to understand the

243
00:18:56.990 --> 00:19:01.230
concept of nothingness in programming to move forward.

244
00:19:01.460 --> 00:19:03.020
So I guess that's it with this tutorial.

245
00:19:03.030 --> 00:19:04.820
Thank you so much, guys, for watching.

246
00:19:04.820 --> 00:19:07.220
And I'll see you guys in the next tutorials.
