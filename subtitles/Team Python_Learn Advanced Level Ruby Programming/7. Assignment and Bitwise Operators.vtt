WEBVTT
1
00:00:00.330 --> 00:00:01.470
Hey, guys, what's up?

2
00:00:01.500 --> 00:00:05.730
This is a marathon, and I welcome you to another tutorial on this course on Rubick.

3
00:00:05.880 --> 00:00:10.800
And in this story we will be continuing our journey with operators.

4
00:00:11.040 --> 00:00:16.540
And in this story, we will be covering about assignment operator and the bitwise operator.

5
00:00:17.070 --> 00:00:22.650
So starting on with the first topic, that is assignment operators in Ruby.

6
00:00:23.010 --> 00:00:31.820
So there are multiple assignment operators you can use in Ruby, which are listed right on your screens.

7
00:00:32.100 --> 00:00:38.340
The first one is the equal to operator that is called the simple assignment operator that assigns a

8
00:00:38.370 --> 00:00:41.850
values from the right operation to the left side operand.

9
00:00:41.850 --> 00:00:45.000
And you have already covered that in the previous tutorials.

10
00:00:45.450 --> 00:00:52.140
Then we have the plus equal to Operator and it is known as the add and assignment operator.

11
00:00:52.710 --> 00:01:00.480
And what it does is that it adds the right operand to the left operand and it assigns the result to

12
00:01:00.480 --> 00:01:01.800
the left operand.

13
00:01:02.160 --> 00:01:09.410
Then we have the minus equal to that is known as the subtract and assignment operator.

14
00:01:10.380 --> 00:01:17.130
And what it do is that it subtracts the right operand from the left operand and assign the result to

15
00:01:17.130 --> 00:01:18.240
the left operand.

16
00:01:18.630 --> 00:01:24.810
Then we have the starick equal to operator that is known as the multiply and assignment operator.

17
00:01:25.140 --> 00:01:33.000
And what it do is that it multiplies the right of print with the left operand and assign the result

18
00:01:33.300 --> 00:01:34.560
to the left operand.

19
00:01:35.580 --> 00:01:42.750
Then we have this backslash equal to that is known as divide and assignment operator that divides the

20
00:01:42.750 --> 00:01:47.800
left upper end or the right upper end and assigned the result to the left option.

21
00:01:48.150 --> 00:01:53.390
Then we have the percentage equal to that is known as the modulus and assignment operator.

22
00:01:53.400 --> 00:01:58.900
It takes the modulus using to operand and assigned the result to the left upper.

23
00:01:58.920 --> 00:02:05.610
And then finally we have the double starick equal to operator that is known as the explosion and assignment

24
00:02:05.610 --> 00:02:14.970
operator that performs exponential bovver calculation on operators and assign value to the left or PERENT.

25
00:02:15.570 --> 00:02:20.160
So these are some of the assignment operators you would encounter when using Ruby.

26
00:02:20.460 --> 00:02:27.690
And if you look at all of this assignment operator, as you can see that they are basically a combination

27
00:02:27.690 --> 00:02:30.810
of Artomatic operators and this is equal to sign.

28
00:02:30.810 --> 00:02:31.890
You can use that.

29
00:02:31.920 --> 00:02:39.150
All of these are the Artomatic operators and you will have to just use this equal to sign with all of

30
00:02:39.300 --> 00:02:43.230
them to make them the assignment operators.

31
00:02:44.100 --> 00:02:49.530
So the second topic we are going to cover is known as the bitwise operator.

32
00:02:51.000 --> 00:02:57.900
And there are some bitwise operators you will come across in Truby, the first one is the end operator

33
00:02:58.440 --> 00:03:05.070
and it is known as the bindery and operator, and it copies a bit to the result if it exists in both

34
00:03:05.070 --> 00:03:05.700
operands.

35
00:03:06.710 --> 00:03:14.010
Now, you have already covered this and and this are operator table in the previous tutorial, the second

36
00:03:14.010 --> 00:03:19.890
one, which is our operator and is also known as the bindery or operator that copies Abbett that exist

37
00:03:19.890 --> 00:03:21.060
in either operands.

38
00:03:21.340 --> 00:03:29.180
Then we have the binary X or operator that copies the bid if it is set in one operator, but not both.

39
00:03:29.370 --> 00:03:36.030
Then we have this negation that is basically the binary one compliment operator, which is unary and

40
00:03:36.030 --> 00:03:37.740
has the effect of flipping bets.

41
00:03:38.130 --> 00:03:43.980
If you are familiar with some kind of computer knowledge, then you know how to calculate the once compliment

42
00:03:43.980 --> 00:03:46.410
of a certain binary number.

43
00:03:46.800 --> 00:03:51.390
Then we have this binary left operator that consists of two less than Signe's.

44
00:03:51.810 --> 00:03:58.530
Now, in this, the left operand value is left by the number of words specified by the right or print.

45
00:03:58.950 --> 00:04:04.650
Then we have the binary right shift operator that is represented with two greater than signs, and in

46
00:04:04.650 --> 00:04:13.290
that the left upper end value is moved right by the number of bits that are specified by the right operand.

47
00:04:13.770 --> 00:04:21.270
So finally, let's move on to the example spot and cover the example of both the assignment operator

48
00:04:21.480 --> 00:04:23.330
and the bitwise operator.

49
00:04:23.700 --> 00:04:31.050
So we will start on with assignment operator and we will just cover one or two of them because all of

50
00:04:31.200 --> 00:04:33.020
the rest are the very same.

51
00:04:33.450 --> 00:04:35.020
So let's move on to Atem.

52
00:04:35.760 --> 00:04:41.400
So now what we have is that we have Artomatic operators combined with the equal sign and we have to

53
00:04:41.400 --> 00:04:42.490
use them right over here.

54
00:04:42.930 --> 00:04:49.140
So starting on with the first one that was equal, do so if you write an equal to five, that is what

55
00:04:49.140 --> 00:04:53.390
it's called assignment and now it has the value of five.

56
00:04:53.640 --> 00:04:58.200
So do use any of the three, four or five remaining.

57
00:04:58.560 --> 00:05:05.850
What we will do is that what we would do is first, let's just output this a run this and you can see

58
00:05:05.850 --> 00:05:09.090
that it has generated four five on the output screen.

59
00:05:09.420 --> 00:05:16.080
Now, what you will do is that you will write in a loss equal to six.

60
00:05:16.500 --> 00:05:18.180
And if you just.

61
00:05:19.510 --> 00:05:26.390
Output, the value of it now around this gold, and as you can see, that the value of is now 11.

62
00:05:26.410 --> 00:05:29.590
Now, why it is because this statement over here means.

63
00:05:31.010 --> 00:05:39.290
That is equal to a plus six, so in the previous case was five, so this is going to be replaced with

64
00:05:39.290 --> 00:05:39.800
five.

65
00:05:40.830 --> 00:05:47.730
Six is going to be added to it because this is six, and when you just output this again, it is going

66
00:05:47.730 --> 00:05:52.150
to return 11 because five plus six is equal to 11 in our case.

67
00:05:52.350 --> 00:05:57.630
Similarly, if you use the other one, for example, minus equal to her underscore, that is going to

68
00:05:57.630 --> 00:06:04.320
be minus one because five minus six is going to equal to minus one or a hill.

69
00:06:04.590 --> 00:06:09.960
Similarly, if you use the Starick 11, this means that five or six are going to be multiplied around

70
00:06:09.960 --> 00:06:13.380
the score and it is going to generate 30 for you.

71
00:06:13.530 --> 00:06:19.380
And that's how the remaining assignment operators can be used in Ruby.

72
00:06:20.600 --> 00:06:26.380
So moving on to the bitwise operators now, let's just remove this from here.

73
00:06:28.900 --> 00:06:37.030
So starting on with the and operator, so let's say we have it that is equal to, let's say seven and

74
00:06:37.030 --> 00:06:39.950
then we have B equal to let's say five.

75
00:06:40.330 --> 00:06:46.630
So now when we want to do is that we have to specify votes and we have to write in seven.

76
00:06:48.430 --> 00:06:56.800
And five and what you have to do is that you have to write in DOT to S and you have to write in the

77
00:06:56.800 --> 00:06:57.770
base for that.

78
00:06:57.790 --> 00:07:04.810
Now, always remember that the base for converting a number into bindery is two, so one, seven and

79
00:07:04.810 --> 00:07:05.470
five.

80
00:07:05.820 --> 00:07:11.320
The operation is performed on these two number and it is converted into binary Randy's code.

81
00:07:12.010 --> 00:07:15.750
And it says that and it's a string.

82
00:07:15.760 --> 00:07:19.450
So I guess we have to encode this.

83
00:07:21.710 --> 00:07:29.090
Run now and you can see that it is generating a one on one, and if you want to know that, what is

84
00:07:29.090 --> 00:07:30.780
one or one over here?

85
00:07:31.280 --> 00:07:37.820
So what do you have to do is that you have to just remove this from here, run the school, and you

86
00:07:37.820 --> 00:07:42.140
can see that five is generated on the output screen.

87
00:07:42.530 --> 00:07:46.730
So that's how basically you can go on with things.

88
00:07:47.300 --> 00:07:48.380
So that is how.

89
00:07:51.270 --> 00:07:56.970
An operator is performed on the two number seven and five want to perform to our operator, just specify

90
00:07:56.970 --> 00:08:02.670
this sign, run the score and triple one is going to be the output when our operation is going to be

91
00:08:02.670 --> 00:08:04.750
performed on this.

92
00:08:05.070 --> 00:08:13.710
Now, this output is basically generated because the code for sound to a hill is basically zero zero

93
00:08:13.710 --> 00:08:17.100
zero zero zero one one one.

94
00:08:17.460 --> 00:08:27.210
And if you talk about the code for this five, it is basically equal to zero zero zero zero and zero

95
00:08:27.210 --> 00:08:28.280
one zero one.

96
00:08:28.740 --> 00:08:31.150
So one more zero, I guess.

97
00:08:31.170 --> 00:08:31.730
Yes.

98
00:08:32.400 --> 00:08:32.780
All right.

99
00:08:32.790 --> 00:08:34.610
So this is the code for seven.

100
00:08:34.650 --> 00:08:36.160
This is the code for five.

101
00:08:36.450 --> 00:08:39.990
Now, when an operation is performed on these.

102
00:08:41.240 --> 00:08:48.080
Then what is going to be the output for that, it is basically going to be this zero zero and since

103
00:08:48.080 --> 00:08:50.530
both are zero, that's where the output is going to be zero.

104
00:08:50.540 --> 00:08:55.100
Then again, we have zero zero output is again going to be zero, then zero zero zero.

105
00:08:55.460 --> 00:09:00.500
And now, as you can see that it says one one source is both are true.

106
00:09:00.530 --> 00:09:06.290
So as I told you before, now, if both the operators are true, then the output is going to be true

107
00:09:06.290 --> 00:09:06.820
as well.

108
00:09:06.950 --> 00:09:11.110
And as you can see, that we have one zero here, so it is going to be zero again.

109
00:09:11.120 --> 00:09:12.770
And finally, we have one one.

110
00:09:12.770 --> 00:09:14.390
So it is going to be, again, equal to one.

111
00:09:14.600 --> 00:09:19.670
And as you can see, that the output generated is the zero one zero one and this is equal to zero one

112
00:09:19.670 --> 00:09:21.550
zero one, which is the code for five.

113
00:09:21.920 --> 00:09:25.670
So that's why the output is also going to be equal to five.

114
00:09:25.820 --> 00:09:32.630
And as you have seen that when we run the code, the output generated was one to one because these zeros

115
00:09:32.630 --> 00:09:33.540
are ignored.

116
00:09:33.890 --> 00:09:36.460
So one on one was generated, which is the code for five.

117
00:09:36.530 --> 00:09:42.650
And when we removed this statement from here, you have already seen that one zero one was generated.

118
00:09:42.890 --> 00:09:47.180
Now, if you talk about the operator and the operator, I have told you.

119
00:09:48.680 --> 00:09:52.490
That board, the operators are basically going to.

120
00:09:53.750 --> 00:09:56.380
The false if the output is going to be false.

121
00:09:56.390 --> 00:10:01.430
So here it is going to be false, then we have one one it is going to be one, then we have one zero,

122
00:10:01.430 --> 00:10:02.840
which is going to be one again.

123
00:10:03.110 --> 00:10:05.060
And then we have one one, which is going to be one.

124
00:10:05.060 --> 00:10:11.390
Because the condition for our operator is that if any of the condition is true, any of the input is

125
00:10:11.390 --> 00:10:14.000
true, then the output is going to be true as well.

126
00:10:14.010 --> 00:10:18.080
So that's why triple one is going to be generated, as you can see right over here.

127
00:10:18.440 --> 00:10:22.730
And triple one is the code for this Salino over here.

128
00:10:22.740 --> 00:10:29.120
That's why I have taken seven and five so that it becomes very easy for you to understand.

129
00:10:29.120 --> 00:10:32.480
And if you just remove this stuff from here now.

130
00:10:34.550 --> 00:10:38.990
Iran discord, and as you can see, that Salman is going to be generated because this is now the code

131
00:10:38.990 --> 00:10:40.350
for seven.

132
00:10:40.370 --> 00:10:46.160
And if you just base this O'Haire around, the so-called triple one is going to be generated, which

133
00:10:46.160 --> 00:10:47.050
is right here.

134
00:10:47.060 --> 00:10:50.530
That is the result of these two operations.

135
00:10:51.320 --> 00:10:58.220
Now, talking about the third one, that is the bindery, ex or operator that copies the bid if it is

136
00:10:58.220 --> 00:11:00.170
set in, one operated, but not both.

137
00:11:00.770 --> 00:11:10.460
So if you just run this by specifying this side of a hill or underscored one zero is going to be the

138
00:11:10.700 --> 00:11:11.390
answer.

139
00:11:11.570 --> 00:11:16.190
Now, why is one zero going to be the output is because.

140
00:11:17.050 --> 00:11:23.570
If you just look at this code of salmon, that is triple one and then we have this one zero one over

141
00:11:23.600 --> 00:11:31.950
here and for example, both have to be the different science.

142
00:11:31.960 --> 00:11:36.250
So that's why this one one is again going to return zero.

143
00:11:36.610 --> 00:11:43.300
This one zero is going to return one because it's a W four X or to return a positive value.

144
00:11:43.660 --> 00:11:45.990
But the conditions have to be opposite.

145
00:11:46.270 --> 00:11:50.420
So since it is the same deal here, we have the same.

146
00:11:50.770 --> 00:11:55.060
So that's why we have zeros on the output and here we have this one.

147
00:11:55.060 --> 00:11:56.790
And for the B we have the zero.

148
00:11:56.800 --> 00:11:59.910
So one is going to be generated that again, we have the same value.

149
00:11:59.930 --> 00:12:02.170
So that's why zero is going to be generated.

150
00:12:02.470 --> 00:12:05.890
That's why we have one zero in our binary output.

151
00:12:05.900 --> 00:12:08.380
And if you just remove this from here, run this code.

152
00:12:09.620 --> 00:12:17.210
It is going to return true to because this is the binary code for the decimal value to.

153
00:12:19.680 --> 00:12:27.180
So that's how this Astarte operator, that is the bindery operator is going to be used, then we have

154
00:12:27.180 --> 00:12:33.790
the bindery once compliment operator that is unary and has the affect of flipping birds.

155
00:12:34.260 --> 00:12:40.890
So what we will do is that if you just remove these two from Hill, specify the negation side.

156
00:12:42.540 --> 00:12:48.300
Right, and to underscore as two plates held or underscored.

157
00:12:49.510 --> 00:12:59.080
And basically what it did is that it took the once compliment of this sound of a hair that is negative

158
00:12:59.080 --> 00:13:06.640
one oh oh oh, so that's how the once compliment is going to be generated, because what once compliment

159
00:13:06.640 --> 00:13:08.590
is that it actually.

160
00:13:10.090 --> 00:13:16.690
Did the four birds that have some value, since these have no value, so they are going to be just ignored

161
00:13:16.690 --> 00:13:21.280
in this case, zero, triple one is hell, what is going to be added to it?

162
00:13:21.670 --> 00:13:23.260
It is going to be performed.

163
00:13:23.260 --> 00:13:32.380
And in simple words, what are you going to do is that you can just place one at the start and zero

164
00:13:32.380 --> 00:13:33.160
zero zero.

165
00:13:33.760 --> 00:13:37.930
What you can do is that you can just simply flip the bits, as you can see over here, that it has the

166
00:13:37.930 --> 00:13:39.970
effect of flipping the bat.

167
00:13:40.000 --> 00:13:47.200
So what we have done over here, that if you have simply flipped the bats, hell, so that's how the

168
00:13:47.680 --> 00:13:50.050
once compliment is going to be generated.

169
00:13:50.050 --> 00:13:56.650
Then we have the bindery left shift operator and the bindery right shift operator, the binary operator

170
00:13:56.650 --> 00:14:01.300
basically in that we have the left operant value which is moved left.

171
00:14:02.150 --> 00:14:08.900
By the number of beds specified by the right to operate, so if you talk about this, so what we will

172
00:14:08.900 --> 00:14:11.420
do is that we will perform.

173
00:14:13.750 --> 00:14:23.260
Let's say, and we want to move it by two beds, run the code and you can see that one is right here

174
00:14:23.260 --> 00:14:24.570
on our screens.

175
00:14:24.880 --> 00:14:33.120
So basically what it did is that since this was what we have here, let's just remove this from here.

176
00:14:33.520 --> 00:14:41.020
So it moved the beds towards the right, which means that these two beds were moved towards their right

177
00:14:41.020 --> 00:14:44.030
and they were dropped from the from the right side.

178
00:14:44.380 --> 00:14:50.230
So when these two beds were dropped from the right side, two zeros were added to the left side to add

179
00:14:50.230 --> 00:14:51.040
two zeros.

180
00:14:51.310 --> 00:14:53.620
And then whatever is left is going to be right.

181
00:14:53.730 --> 00:14:54.690
That is zero one.

182
00:14:55.000 --> 00:14:56.500
So just write in zero one.

183
00:14:56.500 --> 00:15:00.640
So triple zero one is basically the binary code for one.

184
00:15:00.650 --> 00:15:03.320
So that's why one is basically our output here.

185
00:15:04.210 --> 00:15:06.070
Then we have the left shift operator.

186
00:15:06.640 --> 00:15:08.740
That is something like this.

187
00:15:09.120 --> 00:15:13.780
Run this code and it will generate triple one, double zero over here.

188
00:15:14.170 --> 00:15:16.260
So just take it into account.

189
00:15:16.270 --> 00:15:22.810
You have to move towards that right now to do it and you have to add in two zeros.

190
00:15:23.050 --> 00:15:31.990
So since it was actually zero zero zero zero here, since now the case is going to move to eight beds

191
00:15:31.990 --> 00:15:32.370
now.

192
00:15:32.770 --> 00:15:40.600
So that's why you have to just write in the output as zero zero zero and then you have to move these

193
00:15:40.600 --> 00:15:42.280
three because that is one one one.

194
00:15:42.280 --> 00:15:48.750
And you have to add two zeros to the right side now because you have performed the left shift on this.

195
00:15:48.940 --> 00:15:53.320
So the prince from the right are shifted towards the left.

196
00:15:53.510 --> 00:15:58.390
So always remember then when shifting towards the left, zeros are going to be added towards the right.

197
00:15:58.390 --> 00:16:03.550
And when shifting towards the right, the right bits are going to be dropped simply and towards the

198
00:16:03.550 --> 00:16:05.710
left side you will add zeros.

199
00:16:05.950 --> 00:16:09.130
So this is the output, triple one, double zero.

200
00:16:09.130 --> 00:16:12.110
And I don't know what is the code for that to check this.

201
00:16:12.380 --> 00:16:14.710
Just remove this from here on this.

202
00:16:14.710 --> 00:16:19.270
And it is the code for 28 and it's basically applied.

203
00:16:20.680 --> 00:16:25.870
So these were some of the examples you have just come out and hope that you have understand the concept

204
00:16:25.870 --> 00:16:32.510
of assignment operator and the important one in that tutorial was this bitwise operator.

205
00:16:32.560 --> 00:16:39.250
And you will use a lot of bitwise operators in which and and are are going to be used in abundance in

206
00:16:39.250 --> 00:16:40.410
the future tutorials.

207
00:16:40.840 --> 00:16:43.490
So I guess that's it with this tutorial.

208
00:16:43.510 --> 00:16:45.550
Thank you so much, guys, for watching.

209
00:16:45.760 --> 00:16:48.100
And I'll see you guys in the next aureole.
