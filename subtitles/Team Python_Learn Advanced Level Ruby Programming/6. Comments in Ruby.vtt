WEBVTT
1
00:00:00.510 --> 00:00:01.500
Hey, guys, what's up?

2
00:00:01.530 --> 00:00:08.430
This was a marathon, and I welcome you to another degree on this course on Aruba and in this story,

3
00:00:08.520 --> 00:00:16.950
we are going to be talking about a very interesting, very easy topic that is commenced, commence in

4
00:00:16.950 --> 00:00:23.880
your Aruba court are basically notes and annotations meant to be read by other programmers.

5
00:00:24.240 --> 00:00:28.200
Now, the comments themselves are ignored by the Aruba interpreters.

6
00:00:28.200 --> 00:00:33.180
So the text inside the comment is not subjected to any kind of restriction.

7
00:00:33.180 --> 00:00:35.390
You can do whatever you want to do in it.

8
00:00:35.760 --> 00:00:43.170
It's usually good from to put, let's say, comments before classes and methods, as well as any piece

9
00:00:43.170 --> 00:00:46.170
of code that may be complex or unclear.

10
00:00:46.440 --> 00:00:49.080
For someone who is not familiar to your code.

11
00:00:49.080 --> 00:00:57.000
And then you can add comments so that someone else who is not a part of the programming team later when

12
00:00:57.000 --> 00:01:02.280
he sees your code, he might be able to understand what is going on using comments.

13
00:01:03.370 --> 00:01:10.120
So how you can basically use comments effectively, no comments should be used to give the background

14
00:01:10.120 --> 00:01:17.740
information or annotate difficult court notes that simply say what the next line of a straight forward

15
00:01:17.740 --> 00:01:24.160
court does that are not only obvious, but also add the letter to the file.

16
00:01:24.850 --> 00:01:29.800
Now, it's important to take care not to use too many comments and be sure the comments made in the

17
00:01:29.800 --> 00:01:33.570
file are meaningful and helpful to other programmers.

18
00:01:33.590 --> 00:01:39.160
Not, for example, if you just assign a value, let's say, equal to five, then you don't have to

19
00:01:39.160 --> 00:01:46.180
add a comment for that and tell someone that this is basically assignment and the value up is now going

20
00:01:46.180 --> 00:01:48.460
to be quantified because it is understandable.

21
00:01:48.460 --> 00:01:55.810
But all you have to only add comments add for something that is kind of difficult and you think that

22
00:01:55.810 --> 00:01:57.590
someone might not understand it.

23
00:01:58.610 --> 00:02:01.470
Now there is a concept that is the Shiban concept.

24
00:02:01.720 --> 00:02:09.010
Now you will notice that all Ruby program starts with a comment that begins with a hashtag GalÃ¡n.

25
00:02:09.340 --> 00:02:16.050
Now, this is called a shebang, and it is used in Linux, UNIX and OS operating systems.

26
00:02:16.070 --> 00:02:22.110
And when you execute a Ruby script, the shell will look for the shebang of the first line of the file.

27
00:02:22.150 --> 00:02:27.730
The shell will then use the shebang to find the ruby interpretor and run the script.

28
00:02:28.270 --> 00:02:33.610
Now there are two kinds of commands you can make in your ruby called.

29
00:02:33.910 --> 00:02:37.040
The first one is the single line or Ruby Command.

30
00:02:37.040 --> 00:02:43.360
Know that Ruby single line commands begin with a hash tag character and it ends at the end of the line.

31
00:02:43.720 --> 00:02:44.110
Now.

32
00:02:44.920 --> 00:02:51.570
Any character from the hashtag correct at the end of the line are completely ignored by the interpreter

33
00:02:51.880 --> 00:02:54.660
and as I told you before, you can do whatever you want to do it with it.

34
00:02:55.590 --> 00:03:00.540
So the text inside the comment is not subjected to any kind of restriction.

35
00:03:01.820 --> 00:03:07.520
Now, the hashtag character does not necessarily have to occur at the beginning of the line, it can

36
00:03:07.520 --> 00:03:09.910
incur anywhere in your court.

37
00:03:10.670 --> 00:03:17.270
Now, the second type of comment you may come across in Ruby are the multiline comments too often forgotten

38
00:03:17.270 --> 00:03:18.770
by many Ruby programers.

39
00:03:18.770 --> 00:03:25.940
Ruby does have this multiline commence, a multiline commence begin with the equal to begin token,

40
00:03:25.940 --> 00:03:32.600
and it ends with equal to end token as these tokens should start at the beginning of the line and be

41
00:03:32.600 --> 00:03:34.160
the only thing on the line.

42
00:03:34.160 --> 00:03:40.250
Anything between these two tokens is going to be ignored by the Ruby interpreter interpretor.

43
00:03:40.580 --> 00:03:46.970
So now let me just show you quick examples of how single line anchorman's and multi comments are used

44
00:03:46.970 --> 00:03:55.220
practically on my compiler so that all you start on with a hash tag and now whatever you type in over

45
00:03:55.220 --> 00:03:57.800
here is simply going to be ignored.

46
00:03:57.800 --> 00:04:03.500
If you just press R plus I run the score, you can see that nothing has been outputted on the screen.

47
00:04:03.770 --> 00:04:09.350
Now, as I told you, it is not necessary that a single line command starts at the start of the line.

48
00:04:09.350 --> 00:04:16.370
For example, you can just, let's say put and then you can just add something like Hello Wood.

49
00:04:16.370 --> 00:04:22.970
And after that you can just specify something like, let's just remove this from here.

50
00:04:24.320 --> 00:04:30.800
And let's say I want to say that this will prevent something.

51
00:04:32.650 --> 00:04:39.160
All right, so now the press outlets are you can see that Helen has been printed and this has been completely

52
00:04:39.160 --> 00:04:47.530
ignored by your compiler not to add multiline comments, what you can do is that you can use the equal

53
00:04:47.530 --> 00:04:47.890
to.

54
00:04:49.590 --> 00:04:53.680
Big and Dogen, and then you can use equal to and going to end this now.

55
00:04:53.700 --> 00:05:00.870
Anything you write in between these may be any number of lines, it is going to be simply ignored by

56
00:05:00.870 --> 00:05:01.480
your compiler.

57
00:05:01.500 --> 00:05:07.260
So, for example, if I just run this, you can see how the word has been printed and whatever is written

58
00:05:07.260 --> 00:05:09.260
here is completely ignored here.

59
00:05:09.570 --> 00:05:15.750
So as I told you that it is necessary that it starts at the end of the line and it starts at the start

60
00:05:15.750 --> 00:05:18.160
of the line and it also ends at the start of the line.

61
00:05:18.420 --> 00:05:22.800
For example, if I just remove this from here, let's say I just added added over here.

62
00:05:24.870 --> 00:05:30.660
Now, as you can see, that the color basically indicates that this is not right, if I just press all

63
00:05:30.930 --> 00:05:35.620
are you can see that some error message is generated by the ATM runner.

64
00:05:35.690 --> 00:05:40.620
So this means that this has to be at the start of the line, which is not the case with a single line

65
00:05:40.620 --> 00:05:40.880
command.

66
00:05:40.890 --> 00:05:46.680
You can add them anywhere at the start of the line after some good which has been written like Botella

67
00:05:46.680 --> 00:05:47.120
Word.

68
00:05:47.400 --> 00:05:52.560
But for multiline command, this is a basic condition that it should start at the start of the line

69
00:05:52.560 --> 00:05:54.750
and it should also end at the start of the line.

70
00:05:55.590 --> 00:06:02.210
So this is basically how comments are used and comments are very important for documentation and why

71
00:06:02.240 --> 00:06:06.570
the documentation, important documentation is basically important so that anyone else want to read

72
00:06:06.570 --> 00:06:07.140
your code.

73
00:06:08.070 --> 00:06:15.060
May it become easy for them to read and understand your code when he reads out the comments on your

74
00:06:15.060 --> 00:06:20.850
code, so I guess that's clearing up because that was a very simple tutorial.

75
00:06:21.150 --> 00:06:22.830
So I guess that's it, this tutorial as well.

76
00:06:22.860 --> 00:06:25.620
Thank you so much, guys, for watching.

77
00:06:25.800 --> 00:06:27.660
And I'll see you guys in the next tutorial.
