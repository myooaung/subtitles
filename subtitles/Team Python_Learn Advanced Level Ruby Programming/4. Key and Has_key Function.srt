1
00:00:00,540 --> 00:00:01,530
Hey, guys, what's up?

2
00:00:01,560 --> 00:00:04,970
This is American, and I welcome you to another Dooralong discourse on Ruby.

3
00:00:04,980 --> 00:00:09,210
And in this territory, we are going to be covering two functions that can be applied on hashas.

4
00:00:09,240 --> 00:00:12,690
The first one is the key and the second function is the Haski.

5
00:00:12,960 --> 00:00:16,230
Now starting on with the first function, that is the key function.

6
00:00:16,410 --> 00:00:21,590
Now it is a hash class method with checks whether the key corresponding to the value is present or not.

7
00:00:21,600 --> 00:00:24,320
And if you talk about the syntax of this, it is very simple.

8
00:00:24,330 --> 00:00:25,710
You have to just write in hash.

9
00:00:25,980 --> 00:00:32,220
Dokki a question mark, which means that you want to ask the compiler a question that whether a key

10
00:00:32,220 --> 00:00:38,240
exists in a certain thing or not, which is going to be a hash in this case, and then and the parameters

11
00:00:38,260 --> 00:00:42,480
you have to write in the Q, which you want to check whether it exists for the corresponding value or

12
00:00:42,480 --> 00:00:42,850
not.

13
00:00:43,260 --> 00:00:48,510
The second function we are going to cover in this tutorial is the Haski function and the Haski function.

14
00:00:48,510 --> 00:00:53,160
Also check if a certain key is present in a function or not.

15
00:00:53,160 --> 00:00:55,940
And it has also a very simple syntax.

16
00:00:55,950 --> 00:00:58,310
You have to write in the hash for what you want to check it.

17
00:00:58,320 --> 00:01:04,020
Buggy's president donadio to write in the Haski and then in the specific hash you want to check, which

18
00:01:04,140 --> 00:01:06,620
is not present or which key is present.

19
00:01:06,780 --> 00:01:10,130
You have to write it as a parameter, do this function.

20
00:01:10,620 --> 00:01:15,530
So let's see some examples of how this works, actually.

21
00:01:16,140 --> 00:01:19,950
So you have already got three hashes out here.

22
00:01:19,950 --> 00:01:23,340
You've got a variable, a variable, B, a variable.

23
00:01:23,340 --> 00:01:24,450
C the variable.

24
00:01:24,450 --> 00:01:31,200
It contains two key value bearers, the variable B contains a single key value pair and the variable

25
00:01:31,200 --> 00:01:33,330
C contained three key value pairs.

26
00:01:33,630 --> 00:01:37,730
Now, starting on with the first function we are going to cover in this tutorial is the key function.

27
00:01:37,760 --> 00:01:44,400
So what are you going to write in that you are going to check if for a corresponding value key exist

28
00:01:44,400 --> 00:01:45,520
or not?

29
00:01:45,690 --> 00:01:47,340
So you're going to write inputs.

30
00:01:50,040 --> 00:01:56,370
You're going to ride and hash key from interpellation is going to be used and you're going to ride in

31
00:01:56,370 --> 00:02:02,590
a dart key question mark and the parameters you are going to ride in the queue, which you want to check.

32
00:02:02,610 --> 00:02:06,100
So, for example, for air, you want to check if this exist or not.

33
00:02:06,130 --> 00:02:12,480
You can just ride in a hill and you can just run the score and it is going to return either true or

34
00:02:12,480 --> 00:02:12,930
false.

35
00:02:12,930 --> 00:02:17,790
So for this case, since this guy is present in this variable air, so that's why it has returned.

36
00:02:17,790 --> 00:02:18,170
True.

37
00:02:18,600 --> 00:02:22,440
So, for example, for the second one, you can just ride and hash.

38
00:02:24,410 --> 00:02:25,550
A key from.

39
00:02:27,290 --> 00:02:33,690
Interpellation is again going to be using are you going to try and be Dorcy Questionmark and for example,

40
00:02:33,690 --> 00:02:36,050
do you want to check if B exist in this or not?

41
00:02:36,050 --> 00:02:42,680
Run this code and it is going to return false because V, which is Aqeel here, is not a part of this,

42
00:02:42,830 --> 00:02:49,890
because here we are referencing to keys and for the first case that it was present and the second case,

43
00:02:49,910 --> 00:02:53,330
key GB is not present as a part of this variable.

44
00:02:53,330 --> 00:02:55,220
B So that's why this has returned.

45
00:02:55,220 --> 00:02:55,550
True.

46
00:02:55,730 --> 00:03:00,920
And this O'Haire as return false and similar, you can just apply it for this function as well.

47
00:03:01,340 --> 00:03:05,590
Now the second function we are going to cover in this tutorial is the housekeeping.

48
00:03:05,900 --> 00:03:13,520
And as I told you about this Haski function that also checks a certain key exist in a pair of key value

49
00:03:13,520 --> 00:03:15,440
pairs are not.

50
00:03:16,460 --> 00:03:24,470
Now, in the first tutorial, you have seen the way of how you can initialize a key value pair and that

51
00:03:24,470 --> 00:03:27,770
you have enclosed the value in quotation marks, but not this.

52
00:03:27,770 --> 00:03:32,000
In the second case, you have enclose the key in quotation marks, but not this.

53
00:03:32,330 --> 00:03:40,670
There is a third way to initialize this hash o'haire in which you can just write in a colon and you

54
00:03:40,670 --> 00:03:41,780
can just write in that.

55
00:03:41,870 --> 00:03:43,400
You can just write in the.

56
00:03:45,020 --> 00:03:52,460
Calling 200, so this is basically the third way of how you can initialize a key value pair for a hash

57
00:03:52,670 --> 00:03:59,120
in Ruby so you can just change all of these Hundert and you can just remove this as well.

58
00:03:59,130 --> 00:04:00,920
You can just write in a hundred.

59
00:04:02,430 --> 00:04:08,690
Be 200 and you can just ride in the value of your seats, 300, as it was in the previous case.

60
00:04:08,970 --> 00:04:14,090
So this is basically the third way of how you can initialize hashes in Ruby.

61
00:04:14,250 --> 00:04:21,130
But if you run this Iraqi for this and for example, this condition number two is again true as well.

62
00:04:21,330 --> 00:04:23,790
So apparently this condition seems true.

63
00:04:23,790 --> 00:04:27,660
But if you just run this code, you can see that board, the values are false.

64
00:04:27,690 --> 00:04:33,840
Now, the reason behind this is that whenever you are using the key or the ASCII function, then it

65
00:04:33,840 --> 00:04:35,340
does not accept this syntax.

66
00:04:35,340 --> 00:04:40,560
But for example, which was, for example, if you just consider the case when we were covering our

67
00:04:40,560 --> 00:04:46,470
first tutorial, then for that we were using, let's say for a you can just write and Airaud each.

68
00:04:47,550 --> 00:04:50,040
Do for a key value pair.

69
00:04:55,750 --> 00:04:57,700
You can just ride in boats.

70
00:04:59,720 --> 00:05:00,950
Hashtag.

71
00:05:02,570 --> 00:05:09,940
Is interpellation value, and you can just write an of a comment this out for a little while.

72
00:05:12,660 --> 00:05:18,420
Run the school and you can see that it run perfectly fine is Hundert B is 200.

73
00:05:18,430 --> 00:05:20,820
So this means that it is accepting this syntax.

74
00:05:20,820 --> 00:05:25,530
But if we just run it for this O'Haire, that is the key function.

75
00:05:25,530 --> 00:05:26,160
Run this code.

76
00:05:26,160 --> 00:05:31,560
You can see that it has generated false walls, which means that this is not accepting this as a key

77
00:05:31,560 --> 00:05:32,310
for this function.

78
00:05:33,240 --> 00:05:37,410
Moreover, if you use the Haski function Aubagio that is has and a squawky.

79
00:05:39,360 --> 00:05:48,210
Has underscored Kiowa Hill, let's just use as underscore your here as well and has in the Skalkaho

80
00:05:48,210 --> 00:05:54,450
hair as well or underscored and for that it is again going to generate false and false.

81
00:05:54,720 --> 00:05:58,980
So this means that the key and the hash function does not accept the syntax, which we have changed

82
00:05:58,980 --> 00:05:59,430
right away.

83
00:05:59,460 --> 00:06:05,120
But this is a syntax basically, which can be used to write in the values for hashes.

84
00:06:05,400 --> 00:06:10,560
So we will just remove this from here and we will change it to the previous syntax over here.

85
00:06:12,130 --> 00:06:17,740
That is a download then be do on that and you have to change this as well.

86
00:06:17,740 --> 00:06:26,380
You've tried in a equal arrow, equal arrow as well, and then this as well.

87
00:06:30,600 --> 00:06:31,930
This as well.

88
00:06:39,190 --> 00:06:40,600
The value for me.

89
00:06:42,380 --> 00:06:49,100
Equalized and signed, and finally, the value for the sea equal has been signed.

90
00:06:49,130 --> 00:06:54,500
Now, if you just run the score, you can see that it has generated true for both the cases.

91
00:06:54,710 --> 00:06:59,480
If you just write and let's say Bohle, which is going to generate falls, apparently, and it does

92
00:06:59,660 --> 00:07:01,220
as well, it generated falls.

93
00:07:01,220 --> 00:07:07,340
So to use the key and the Haski function, you have to notice in mind that you have to also always use

94
00:07:07,700 --> 00:07:11,350
this index to initialize hashes in Ruby.

95
00:07:11,360 --> 00:07:16,190
If you use the other syntax, which we just use, you have seen that generated false false, which means

96
00:07:16,190 --> 00:07:17,960
that it was not accepting this ASCII.

97
00:07:17,970 --> 00:07:23,480
So when you searched for this in the previous index, it return false when you search for B, the previous

98
00:07:23,480 --> 00:07:24,630
index at return false.

99
00:07:24,920 --> 00:07:27,410
But in this case, this is going to return.

100
00:07:27,410 --> 00:07:27,680
True.

101
00:07:27,680 --> 00:07:29,310
And this is going to return false.

102
00:07:29,660 --> 00:07:34,130
So that's how basically the key and the Haski function works and for which index it works.

103
00:07:34,250 --> 00:07:35,360
You have also seen that.

104
00:07:35,660 --> 00:07:38,520
So I guess that's it with this tutorial.

105
00:07:38,540 --> 00:07:40,340
Thank you so much, guys, for watching.

106
00:07:40,340 --> 00:07:43,060
And I'll see you guys in the next Dorio.
