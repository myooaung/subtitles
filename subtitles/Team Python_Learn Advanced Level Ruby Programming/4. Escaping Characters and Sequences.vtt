WEBVTT
1
00:00:00.360 --> 00:00:01.320
Hey, guys, what's up?

2
00:00:01.350 --> 00:00:05.460
This is a marathon, and I welcome you to another tutorial on this course on Ruby.

3
00:00:05.700 --> 00:00:14.550
And in this story, we will be studying about escaping characters so we will learn how to escape characters,

4
00:00:14.700 --> 00:00:19.680
how it works and how to avoid escaping characters altogether for some use cases.

5
00:00:19.860 --> 00:00:21.990
If you think that you know all about this.

6
00:00:22.380 --> 00:00:27.150
Make sure to go on with this tutorial and you'll be surprised to know many other things.

7
00:00:27.480 --> 00:00:31.950
So let's dive right in with character escaping in strings.

8
00:00:32.490 --> 00:00:38.670
Now, when using strings in Ruby, we sometimes need to put the code we use to define the string inside

9
00:00:38.670 --> 00:00:39.710
the string itself.

10
00:00:39.720 --> 00:00:44.860
When we do so, we can escape the code character with a backslash symbol.

11
00:00:45.390 --> 00:00:48.930
Now, for example, you have, let's say, some kind of string.

12
00:00:50.760 --> 00:00:58.200
Let's say that you go to some character that is X and hear what we want is that we want to have a letter

13
00:00:58.200 --> 00:01:04.620
that is hello and then whatever name is going to pop up, we want that name to actually show in double

14
00:01:04.650 --> 00:01:05.370
quotation marks.

15
00:01:05.400 --> 00:01:11.640
Now, if you specify those here, that is not going to actually work, because if you specify, let's

16
00:01:11.640 --> 00:01:13.350
say, go to a hill.

17
00:01:16.000 --> 00:01:20.290
And let's say you have something like World War here.

18
00:01:22.100 --> 00:01:28.310
And what do you do is that just dive in the command boats, run this code and as you can see, that

19
00:01:28.310 --> 00:01:33.680
you have got an error, which means that it is a syntax error because you have specified a double code

20
00:01:33.710 --> 00:01:34.660
within a double code.

21
00:01:34.910 --> 00:01:38.570
So what do you have to do actually to avoid that?

22
00:01:39.320 --> 00:01:40.610
Error does not generate.

23
00:01:40.610 --> 00:01:47.180
And you also have HelloWallet on the screen with the word letter that is encoded in double quotation

24
00:01:47.180 --> 00:01:47.570
marks.

25
00:01:47.780 --> 00:01:50.860
Now, that is where escaping correctors comes to your aid.

26
00:01:51.230 --> 00:01:53.180
And what you can do over here is that.

27
00:01:54.360 --> 00:02:03.420
You can specify this way here and then this will help, so you have actually encoded the word.

28
00:02:04.420 --> 00:02:10.900
Walled in between these slashes and what it will do is that, as you can see, that the color of the

29
00:02:10.900 --> 00:02:15.760
double Grecian marks has also changed from green to blue, which means that it is now something as small

30
00:02:15.760 --> 00:02:16.790
as just run accord.

31
00:02:17.020 --> 00:02:22.240
And as you can see, that are Adam brother has successfully generated the world without any kind of

32
00:02:22.240 --> 00:02:22.570
error.

33
00:02:22.810 --> 00:02:29.390
And the latter word is basically in double quotation marks without any kind of error.

34
00:02:30.220 --> 00:02:35.090
So that's how basically you can have a double quotation marks within double quotation marks.

35
00:02:35.570 --> 00:02:36.160
Now.

36
00:02:37.250 --> 00:02:40.110
What about escaping goats in single cottage string?

37
00:02:40.150 --> 00:02:41.670
So let's just try that as well.

38
00:02:42.930 --> 00:02:50.070
And let's say we have now this HelloWallet that is in single quotes, so let's just remove this from

39
00:02:50.070 --> 00:02:54.120
here and let's say we have Haddo and then we have.

40
00:02:57.410 --> 00:03:01.110
This world over here, so let's just run it.

41
00:03:01.340 --> 00:03:06.810
And again, as you can see, that we have got an error message, which means that it is not working.

42
00:03:06.830 --> 00:03:11.720
So what we have to do is that we have to specify these slashes Oakhill.

43
00:03:13.410 --> 00:03:18.900
Now, run this code, and as you can see, that it worked perfectly, as you can see, Halliwell's printed

44
00:03:18.900 --> 00:03:23.840
with this word printed in single quotation marks.

45
00:03:24.120 --> 00:03:30.870
So that's how basically you can use escaping codes in single quotation marks as well.

46
00:03:31.380 --> 00:03:35.010
You can use them in double quotation marks.

47
00:03:36.390 --> 00:03:43.380
All right, so now the next thing is about escaping sequences now besides skorts, as you have seen

48
00:03:43.380 --> 00:03:47.670
in these examples, there are more symbols we can escape in strengths.

49
00:03:47.670 --> 00:03:51.040
For example, a new line is represented by, as you know, backslash.

50
00:03:51.060 --> 00:03:54.040
And so this is called an escape sequence.

51
00:03:54.060 --> 00:03:56.070
So what you can do is that.

52
00:03:57.290 --> 00:04:03.710
We can use the same concept to escape sequences, so let's say we have a statement.

53
00:04:04.800 --> 00:04:06.920
That is let's say hello.

54
00:04:07.590 --> 00:04:14.790
So let's say we have hello and then we have this void and what we want is that we want this helo to

55
00:04:14.790 --> 00:04:19.020
pop up on the first line and we want this word to pop up on the next line.

56
00:04:19.020 --> 00:04:23.170
But we don't want to have multiple states and we want to have this only in a single variable.

57
00:04:23.190 --> 00:04:32.700
So what I specify backslash and our help now is you can see that the color of backslash and is something

58
00:04:32.700 --> 00:04:39.270
different from green, which means that I guess it has identified that this backslash is basically an

59
00:04:39.270 --> 00:04:40.330
escaping sequence.

60
00:04:40.350 --> 00:04:43.910
So if you just run this code, you can see that our job is perfectly done.

61
00:04:43.920 --> 00:04:49.890
Hello is printed on a single line and while it's printed on the second line now, you must be thinking

62
00:04:49.890 --> 00:04:54.260
that we haven't specified any kind of additional backslash or here.

63
00:04:54.420 --> 00:04:57.650
So why did it printed this Hallowell over here?

64
00:04:57.780 --> 00:05:02.790
And the answer is that double quotes actually supports escaping sequences.

65
00:05:02.790 --> 00:05:09.140
So that's why when we specified a backslash in the mail, it automatically detected this skipping sequence.

66
00:05:09.150 --> 00:05:11.850
It changes color and it also done our job.

67
00:05:11.850 --> 00:05:13.380
It printed yellow on a single line.

68
00:05:13.380 --> 00:05:13.970
And then what?

69
00:05:13.980 --> 00:05:15.330
On the second line.

70
00:05:15.600 --> 00:05:18.480
So what if we have a single code, Soheil?

71
00:05:20.050 --> 00:05:28.060
And then let's say you have this statement in which we have Hello World again, so as you can see with

72
00:05:28.060 --> 00:05:31.090
the colors, everything is color the same or underscore.

73
00:05:31.090 --> 00:05:36.980
And as you can see, that HelloWallet is printed with a backslash and in between as it is.

74
00:05:37.210 --> 00:05:44.350
So this means that the single Godes did not identify the skipping sequence we have specified right here.

75
00:05:44.800 --> 00:05:50.440
Now, why does the single code does not support this backslash and or you can see the skipping sequence?

76
00:05:50.440 --> 00:05:52.340
Not the answer to that is very simple.

77
00:05:52.570 --> 00:05:57.540
Now, since Democrats support this kind of thing that is escaping sequences.

78
00:05:57.790 --> 00:06:03.330
So, for example, you have, let's say, a line in which you want to have this thing printed right

79
00:06:03.330 --> 00:06:08.500
to a hill, or let's say you want to have something like backslash de backslash or something like that

80
00:06:08.500 --> 00:06:13.420
printed and you want that to print as it is on your ATM or other.

81
00:06:13.660 --> 00:06:20.560
Now, if single goods were also to identify this sequence, for me that is a skipping sequence and it

82
00:06:20.560 --> 00:06:25.870
would have created backslash and as a skipping sequence and it would have printed hello on this line

83
00:06:25.990 --> 00:06:27.170
and wild on the second line.

84
00:06:27.340 --> 00:06:33.580
So there has to be a method in which if you want this thing as it is to pop up on your Adam runner,

85
00:06:34.430 --> 00:06:36.310
then you can use single codes for that.

86
00:06:36.430 --> 00:06:41.140
If you want to have use skipping sequences, then you're going to have to use double code.

87
00:06:41.150 --> 00:06:47.830
So that is what is basically provided here in Ruby, so that if you want an output to pop as it is,

88
00:06:47.830 --> 00:06:49.960
then you can use single codes.

89
00:06:49.960 --> 00:06:54.790
And if you want to have used it, skipping sequences, then what are you going to do is that you can

90
00:06:54.790 --> 00:06:57.310
simply go on with the double cords.

91
00:06:57.910 --> 00:07:01.950
Now here to code, the difference between single code and double code is also very important.

92
00:07:02.060 --> 00:07:07.030
The difference between single code and double coded string in Ruby is the way the string definition

93
00:07:07.030 --> 00:07:10.840
represent is skipping sequences in double coded strings.

94
00:07:10.870 --> 00:07:17.710
You can write escape sequences and Ruby will output that translated meaning a backslash n means a new

95
00:07:17.710 --> 00:07:18.070
line.

96
00:07:18.190 --> 00:07:23.410
Whereas in single coded strings, however, skipping sequences are escaped and returned.

97
00:07:23.440 --> 00:07:29.530
There are literal definition where a backslash remains a backslash and a board string types have their

98
00:07:29.740 --> 00:07:30.660
use cases.

99
00:07:30.670 --> 00:07:36.910
Of course, it's likely you will use the string of escape sequences and to use their translated meaning,

100
00:07:37.060 --> 00:07:42.700
a new line or a single gorz are useful for avoiding escape sequences themselves.

101
00:07:42.940 --> 00:07:49.420
As I told you, it is useful for demonstrating their usage and avoiding accidentally using escape sequences

102
00:07:49.420 --> 00:07:51.760
you did not intend to use.

103
00:07:52.070 --> 00:07:56.800
Then you have the escaping interpellation thing as well, which you have covered in the previous tutorials

104
00:07:56.800 --> 00:07:57.280
as well.

105
00:07:57.970 --> 00:08:00.490
Ruby support interpellation inside string.

106
00:08:00.490 --> 00:08:04.000
But once again, not all string definitions are created.

107
00:08:04.000 --> 00:08:07.390
Equal interpolation only work in double coded strings.

108
00:08:08.020 --> 00:08:15.040
So you have also seen that in the previous tutorials that if you use interpolation in between single

109
00:08:15.040 --> 00:08:19.090
strings, then it is going to simply ignore the interpolation.

110
00:08:19.090 --> 00:08:21.310
It is going to print the string as it is.

111
00:08:21.310 --> 00:08:26.620
But if you use interpolation in the double coded strings, then what it is going to do is that it is

112
00:08:26.620 --> 00:08:30.630
going to treat it as interpolation and it is going to calculate some kind of result for you.

113
00:08:31.120 --> 00:08:37.000
So that is also again, provided by default by Ruby, so that if you want something to pop up as it

114
00:08:37.000 --> 00:08:42.970
is, so you will have an option to use single codes to want to print that thing as it is on your output

115
00:08:42.970 --> 00:08:43.300
screen.

116
00:08:43.300 --> 00:08:46.780
But if you want to use interpolation, then you can go on with the double strings.

117
00:08:46.960 --> 00:08:50.510
And that is again, have the very same reason.

118
00:08:50.530 --> 00:08:53.710
That is if you don't want something to pop up and it popped up.

119
00:08:53.950 --> 00:08:56.760
So that's why you are given an option in Ruby.

120
00:08:57.010 --> 00:09:01.810
Then finally talking about the person notation for string.

121
00:09:01.990 --> 00:09:08.230
Now, in the previous tutorial, you have seen the methods to have multi line strings in Ruby, in which

122
00:09:08.230 --> 00:09:10.660
the last method was the person notation.

123
00:09:11.080 --> 00:09:17.140
Now that Ruby programming language is basically something inspired by the programming language and it

124
00:09:17.140 --> 00:09:20.550
gives us many shorthand for some common definitions.

125
00:09:20.800 --> 00:09:26.020
Now, the same behavior for single coded and double coded strings applies to the person date notation

126
00:09:26.020 --> 00:09:26.430
as well.

127
00:09:26.800 --> 00:09:30.250
The person did sign and the percentage capital.

128
00:09:30.250 --> 00:09:35.380
Q It behaves the same way as double coded strings as you have seen in the previous tutorial, whereas

129
00:09:35.380 --> 00:09:38.910
the person they small behave the same way as single coded strings.

130
00:09:39.190 --> 00:09:45.340
Now the problem with the person condition is that you now need to escape the parenthesis character instead

131
00:09:45.340 --> 00:09:49.570
of the course when the parenthesis are not balanced.

132
00:09:50.050 --> 00:09:56.610
So let me give you an example of unbalanced and balanced parenthesis as well.

133
00:09:57.010 --> 00:09:59.110
So we will just remove this.

134
00:10:00.720 --> 00:10:08.390
So let's say you have this person design where we have these brackets, so what we can do is that we

135
00:10:08.400 --> 00:10:12.120
going to have hello world here.

136
00:10:15.800 --> 00:10:18.050
Don't have to be it has to be OK.

137
00:10:18.410 --> 00:10:24.350
So now what we can do is that let's say we want to encode this word in double quotation marks or what

138
00:10:24.360 --> 00:10:28.700
we will do is that we will simply specify double quotation marks here.

139
00:10:28.700 --> 00:10:31.590
And let's say we have some characters after that as well.

140
00:10:32.270 --> 00:10:36.470
So what we will do is that we will just write in votes, run this code.

141
00:10:36.560 --> 00:10:42.180
And as you can see, that it has perfectly printed whatever we want it to print.

142
00:10:42.600 --> 00:10:47.900
Now, as I have told you, that it works the very same way as double coded string.

143
00:10:47.900 --> 00:10:55.580
So it has basically created these double digit marks as escape sequences and it has printed them as

144
00:10:55.580 --> 00:10:55.800
it is.

145
00:10:55.820 --> 00:11:00.730
So it basically works the same way as did our output.

146
00:11:00.740 --> 00:11:03.050
That was hello.

147
00:11:03.200 --> 00:11:05.300
And then we specified.

148
00:11:07.580 --> 00:11:12.940
World with that in which we write in world, but when we printed this line, it generated an error.

149
00:11:12.950 --> 00:11:17.640
So what we did was that we specify a backslash over here and then a backslash over here as well.

150
00:11:17.960 --> 00:11:23.190
So this tango here and this thing over here behaves in the very same way.

151
00:11:23.540 --> 00:11:28.400
So what if we have, let's say, some kind of unbalanced parenthesis?

152
00:11:28.400 --> 00:11:34.570
For example, we specify, let's say one word bracket or hail at the end.

153
00:11:34.820 --> 00:11:38.680
So if you run the score, as you can see, that we have got an error message.

154
00:11:38.690 --> 00:11:43.970
So what do you have to do is that you have to specify a backslash where he'll run the scored and now

155
00:11:43.970 --> 00:11:45.500
it is going to run perfectly.

156
00:11:45.500 --> 00:11:47.300
And you can see that you have got your bracket.

157
00:11:47.450 --> 00:11:53.480
But to have this bracket printed right over here, you have to specify this backslash so that they treat

158
00:11:53.480 --> 00:11:54.960
it as a.

159
00:11:55.900 --> 00:12:01.300
Escape sequence or escape character here, because it is not any kind of sequence, it is an escape

160
00:12:01.300 --> 00:12:02.680
character, so.

161
00:12:03.680 --> 00:12:10.460
The same thing we did in our previous example, where we have to specify a backslash with a double quotation

162
00:12:10.460 --> 00:12:11.810
marks to treat it as.

163
00:12:12.750 --> 00:12:17.730
All right, let's assemble within a symbol and to print it as it is on the Adam rather, we have to

164
00:12:17.730 --> 00:12:25.080
specify a backslash with the quotation mark now in here, since the double Goodison Marks are not used

165
00:12:25.080 --> 00:12:28.060
and you have to use brackets instead of the double quotation marks.

166
00:12:28.290 --> 00:12:32.970
So if you specify an unbalanced parenthesis over here, as you can see that you've got two over here

167
00:12:32.970 --> 00:12:35.950
and one over here, which means that they are not balanced.

168
00:12:36.270 --> 00:12:41.220
Then what do you have to do is that you have to specify a backslash with the additional bracket you

169
00:12:41.220 --> 00:12:49.020
have specified so that it does not treat it as a double quotation mark type of tango here and treat

170
00:12:49.020 --> 00:12:53.680
it as a part of whatever is printed in these brackets.

171
00:12:54.000 --> 00:13:00.210
So what if we have, let's say, balanced parenthesis, then let's say we have bracket over here as

172
00:13:00.210 --> 00:13:00.560
well.

173
00:13:02.040 --> 00:13:07.470
So now our apprentices are perfectly balanced around the score, and as you can see that you have got

174
00:13:07.470 --> 00:13:15.000
your world, which is included in these round brackets, you didn't specify any kind of escape.

175
00:13:16.020 --> 00:13:18.750
Sorry, you didn't specify that backslash over here.

176
00:13:19.110 --> 00:13:25.180
But what it did that it printed this output very perfectly on your Adam runner.

177
00:13:25.440 --> 00:13:28.800
This is because you have the parenthesis balanced.

178
00:13:28.920 --> 00:13:33.170
So now you don't need any kind of backslash right over here.

179
00:13:34.480 --> 00:13:42.580
So let's say, what if we have now a single quotation mark with the balanced parenthesis, then automatically

180
00:13:42.580 --> 00:13:48.220
you know that it is not going to work on this format because the person did sign and then we have the

181
00:13:48.220 --> 00:13:49.270
person HQ.

182
00:13:51.170 --> 00:13:56.930
It supports the Goodison mark and it acts like the double coalition, Mark, if you want to have the

183
00:13:56.930 --> 00:13:59.240
single coalition more than you have to use the smolkin.

184
00:13:59.540 --> 00:14:01.840
So that's how it is going to work.

185
00:14:01.850 --> 00:14:06.620
And you know about the Capital Gang Smolkin concept from the previous tutorials now.

186
00:14:07.510 --> 00:14:13.030
Again, we have the same rules that are applied here as with normal single and double coated strings,

187
00:14:13.030 --> 00:14:18.970
escape sequences and interpellation are escaped by default in the single coded strings.

188
00:14:18.970 --> 00:14:20.140
So if you use.

189
00:14:21.210 --> 00:14:26.470
Single quotation string, and you use interpolation in between, these person did sign over here.

190
00:14:26.780 --> 00:14:33.190
It is going to simply get ignored if you use the single quotation marks over here.

191
00:14:33.210 --> 00:14:34.080
So, for example.

192
00:14:35.430 --> 00:14:39.210
You just removed this from here and let's say we have.

193
00:14:40.720 --> 00:14:45.910
Double quotation marks of a hair in which we have, let's say, hashtag in which we have a name, and

194
00:14:45.910 --> 00:14:55.680
at the top let's specify a variable that is name and it is equal to, let's say, my name or underscored

195
00:14:55.690 --> 00:14:57.220
and it is going to run perfectly.

196
00:14:57.230 --> 00:15:00.240
But what if we specify a single quotation marks over here?

197
00:15:01.740 --> 00:15:02.840
Remove this as well.

198
00:15:05.010 --> 00:15:05.890
Horrendous good.

199
00:15:05.970 --> 00:15:12.210
And as you can see, that it has also printed Hello America right over here, which means that interpellation

200
00:15:12.420 --> 00:15:20.490
has worked in single quotation marks because it is treating this Tingo Hill as a double quotation marks

201
00:15:20.760 --> 00:15:21.330
over here.

202
00:15:22.120 --> 00:15:26.300
Now, what did you specify a small will here and run this code?

203
00:15:26.460 --> 00:15:33.150
As you can see that it has printed this thing right over here as the very same as it is printed.

204
00:15:33.450 --> 00:15:40.110
And it did not treat it as an interpolation because as you know, that this molecule represents the

205
00:15:40.110 --> 00:15:41.640
single quotation marks.

206
00:15:41.640 --> 00:15:44.780
And as you know, that interpellation does not work with that.

207
00:15:44.790 --> 00:15:49.530
And if you specify a capitalist, you will run this code, then it is going to treat this as an interpolation.

208
00:15:49.800 --> 00:15:57.390
So if you have the person didn't sign or you have the WQ and you have interpellation in between a single

209
00:15:57.390 --> 00:16:02.730
quotation marks, but in the percentage in percentage capital, and then it is going to treat it as

210
00:16:02.730 --> 00:16:03.480
an interpolation.

211
00:16:03.780 --> 00:16:10.620
But if you have this set, this molecule here and then let's say you have the double quotation marks

212
00:16:10.620 --> 00:16:11.190
over here.

213
00:16:13.720 --> 00:16:19.900
Run the underscored then even it is not going to treat it as an interpellation event or you have interpellation

214
00:16:19.900 --> 00:16:26.260
in between double quotation marks, but since you have single quotation marks outside, that is because

215
00:16:26.260 --> 00:16:26.860
of this person.

216
00:16:27.250 --> 00:16:32.740
So that's why it is going to escape the interpellation and it is going to basically treat this as a

217
00:16:32.740 --> 00:16:34.260
normal string.

218
00:16:35.110 --> 00:16:39.990
So I guess you have understood a skipping sequence.

219
00:16:40.000 --> 00:16:45.340
It was a lengthy topic, I know, but it was a very interesting topic and it was a very, very, very

220
00:16:45.340 --> 00:16:46.480
important topic as well.

221
00:16:46.690 --> 00:16:50.860
Because if you don't know the difference between a single quotation marks and double quotation mark,

222
00:16:50.860 --> 00:16:53.490
then in the future tutorials, you are going to face a lot of problems.

223
00:16:53.500 --> 00:16:59.830
We are going to be using all those concepts in some kind of programs that are going to be detailed programs.

224
00:16:59.950 --> 00:17:04.900
And you need to know that what is going to be printed if you have things the very same, and what is

225
00:17:04.900 --> 00:17:10.000
going to be done if you have double question marks and single quotation marks where you have to use

226
00:17:10.000 --> 00:17:14.890
interpolation, where interpolation is not going to be treated as interpellation, and you need to know

227
00:17:14.890 --> 00:17:20.560
about this person, HQ percentage capital and the person design because they are going to be used a

228
00:17:20.560 --> 00:17:20.820
lot.

229
00:17:21.190 --> 00:17:23.010
So I guess that's it with this tutorial.

230
00:17:23.020 --> 00:17:24.850
Thank you so much, guys, for watching.

231
00:17:24.850 --> 00:17:26.710
And I'll see you guys in the next Auriel.
