WEBVTT
1
00:00:00.390 --> 00:00:01.530
Hey, guys, what's up?

2
00:00:01.560 --> 00:00:05.810
This is so hot, and I welcome you to another tutorial on this course on Ruby.

3
00:00:06.090 --> 00:00:12.210
And in this drill we will be continuing with the operator journey and we will be covering, again,

4
00:00:12.210 --> 00:00:15.540
the two kind of operators we have in Ruby.

5
00:00:15.540 --> 00:00:20.580
And we will start on with the logical operators in Ruby.

6
00:00:21.060 --> 00:00:28.170
So some of the logical operators are listed right on your screen and each operator is equal to some

7
00:00:28.170 --> 00:00:28.740
other kind.

8
00:00:28.980 --> 00:00:33.150
So starting on with the first one, this and this is basically equal to this.

9
00:00:33.150 --> 00:00:38.810
And as you can see, that is called the logical end operator and it is also called the logical end operator.

10
00:00:39.090 --> 00:00:46.130
So you can use it by either specifying this Endi or you can just use these two airlines over here.

11
00:00:46.470 --> 00:00:49.680
And what they do is that both the options are true.

12
00:00:49.680 --> 00:00:54.900
Then the conditions become true and it is the same for that of both operators are non-zero.

13
00:00:54.910 --> 00:00:56.890
Then the condition becomes true.

14
00:00:57.450 --> 00:01:02.850
So then we have this operator that is called the logical or operator and it is equal to that.

15
00:01:02.860 --> 00:01:05.700
So here that is also called the logical operator.

16
00:01:05.880 --> 00:01:12.840
If any of the two options are non-zero, then the condition becomes true and it also stays the same

17
00:01:12.840 --> 00:01:14.130
that have to operate the non-zero.

18
00:01:14.130 --> 00:01:15.200
The condition becomes true.

19
00:01:15.780 --> 00:01:21.900
Then we have this negation which is equal to this Nodaway here is called the logical not operator,

20
00:01:22.050 --> 00:01:25.350
and it is used to reverse the logic instead of its upper end.

21
00:01:25.530 --> 00:01:32.940
If a condition is true, then the logical not operator will return false on your atama under.

22
00:01:33.480 --> 00:01:40.830
So moving on to the next operator we are going to cover in this tutorial is the ternary operator.

23
00:01:41.690 --> 00:01:48.710
Now, ternary operator is a very interesting kind of operator, and it can be used in basically two

24
00:01:48.710 --> 00:01:49.160
ways.

25
00:01:49.370 --> 00:01:57.830
One is to use an if condition that is going to be a multiline statement in which we will specify if

26
00:01:58.160 --> 00:02:00.320
then we will specify the condition up to that.

27
00:02:00.630 --> 00:02:01.830
That condition is true.

28
00:02:01.860 --> 00:02:10.280
What it will do is will be specified in the block of if then it will specify and else keyword that will

29
00:02:10.280 --> 00:02:16.910
do whatever will be done if the condition we have specified after the if statement is not true.

30
00:02:17.240 --> 00:02:23.150
Now, if as is going to be a part of the future tutorial now this is the second representation that

31
00:02:23.150 --> 00:02:27.300
is the ternary operator that is used to represent the if else condition.

32
00:02:27.320 --> 00:02:32.380
Now, how this is going to be used, let's just cover some quick examples.

33
00:02:32.690 --> 00:02:37.050
So we will start on what the logical operators will help.

34
00:02:37.340 --> 00:02:43.470
So we will use all the six of them, but we will use either of these conditional.

35
00:02:43.490 --> 00:02:49.610
I'll show you that how this and this is equal and how this and this is going to be equal and how the

36
00:02:49.610 --> 00:02:51.770
last two of them are going to be equal.

37
00:02:52.160 --> 00:03:01.310
So let's go on to item and let's say we have four values equal to five, then we have B equal to six.

38
00:03:01.540 --> 00:03:08.360
Then let's say we have C, equal to five again, and then we have the equal to six again.

39
00:03:08.690 --> 00:03:12.840
So here E and C have the same value and B and we have the same value.

40
00:03:13.100 --> 00:03:20.450
Now what we will do is that we will specify thoughts and we will write a equal equal to C.

41
00:03:21.920 --> 00:03:22.520
And.

42
00:03:24.240 --> 00:03:31.140
The equal equal to the now, as you can see, that we have a specified condition, equal, equal to

43
00:03:31.140 --> 00:03:39.000
see and equal equal to D and now for the and condition, the description is that if both conditions

44
00:03:39.000 --> 00:03:43.770
on the sites of the and operator are true, then it is going to return true.

45
00:03:43.770 --> 00:03:45.400
Else it is going to return false.

46
00:03:45.630 --> 00:03:51.000
Now, is it conceivable that this condition is true because equal to five, equal to five.

47
00:03:51.180 --> 00:03:55.560
And then the second condition is also true because B equal to six and equal to six.

48
00:03:55.980 --> 00:04:00.840
Just run this court and you can see that true is generated on your atem her.

49
00:04:01.650 --> 00:04:08.670
So if you change any of this, for example, if I just type in AOL now, as you can see that V is not

50
00:04:08.670 --> 00:04:14.220
equal to a run, this underscored and it is going to generate false for you because as I told you that

51
00:04:14.220 --> 00:04:15.810
for the ad condition to return.

52
00:04:15.810 --> 00:04:21.180
True, it is must that the conditions on both sides of the end operators must be true.

53
00:04:21.510 --> 00:04:28.250
Now, as I told you, that this is basically very equal to this because both have the same effect.

54
00:04:28.530 --> 00:04:36.810
Just specify D here, run this go through is going to be generated, specify AOL run undisclosed and

55
00:04:36.810 --> 00:04:38.120
false is going to be generated.

56
00:04:38.130 --> 00:04:43.140
That's why this operator and using and or here is going to have the same effect.

57
00:04:43.470 --> 00:04:48.590
Now let's talk about the second one that is are so we use Auroville.

58
00:04:48.900 --> 00:04:56.640
So the statement or the description for RSA is that if any of these two conditions are true, then it

59
00:04:56.640 --> 00:04:57.450
is going to return.

60
00:04:57.450 --> 00:04:57.780
True.

61
00:04:58.140 --> 00:05:03.720
So in this case, both the conditions are true or underscore it is going to generate true.

62
00:05:03.840 --> 00:05:09.300
If one of the condition is false, that is B equal to, let's say, eight, which is not true now or

63
00:05:09.300 --> 00:05:09.900
undisclosed.

64
00:05:10.050 --> 00:05:11.430
And it's still going to return.

65
00:05:11.430 --> 00:05:15.040
True, because one of the conditions that is equal, equal to see is true.

66
00:05:15.330 --> 00:05:19.770
Not both the conditions of false, let's say equal equal to D run the score.

67
00:05:19.770 --> 00:05:25.770
And now it is going to generate false because none of the conditions is true for R to generate a true

68
00:05:25.950 --> 00:05:29.630
it is must that one of the condition is true.

69
00:05:29.670 --> 00:05:33.510
You can specify three conditions you can just specify are here again.

70
00:05:33.510 --> 00:05:38.490
You can specify or again you can specify or again you can check hundreds of conditions.

71
00:05:38.490 --> 00:05:42.720
For example, you want to calculate the, let's say, GPA of a student.

72
00:05:42.720 --> 00:05:49.900
So you will specify that it has marks are from, let's say, 90 to 100, give him out.

73
00:05:50.040 --> 00:05:54.440
Plus, if its marks are between 80 to 90, give him Alpha.

74
00:05:54.750 --> 00:05:59.400
Then if his marks are between 70 to 80, give him a B plus.

75
00:05:59.400 --> 00:06:03.000
Then from 60 to 70, give him a B minus and so on.

76
00:06:03.000 --> 00:06:08.640
You can specify one hundreds and thousands of conditions using and you can check all of them using the

77
00:06:08.640 --> 00:06:11.850
R condition or you can check them using the N condition.

78
00:06:12.330 --> 00:06:21.360
So you can also specify the Sohel and or the R and this very statement of is going to have the same

79
00:06:21.360 --> 00:06:26.850
effect, run the score and falsies again generated, make one equal or underscored and true is going

80
00:06:26.850 --> 00:06:28.350
to be generated.

81
00:06:29.600 --> 00:06:37.490
Now, is it told you that the last condition of a hill that is basically the negation operator and as

82
00:06:37.490 --> 00:06:42.530
I told you, that it is called the logical nod and it is used to reverse the logical state of its opera.

83
00:06:42.540 --> 00:06:44.390
And so what does that mean?

84
00:06:44.730 --> 00:06:46.040
Just remove this from here?

85
00:06:46.340 --> 00:06:51.140
And now, as you can see that we have specified equal, equal to D and we know that it is false.

86
00:06:51.170 --> 00:06:53.240
Run this and you can see that false is generated.

87
00:06:53.240 --> 00:06:59.360
But if you specify a negation of a hill around this score and as you can see that the.

88
00:07:00.730 --> 00:07:07.410
Answer for this, which was true, sorry, which was false, has now been reversed and it is not true,

89
00:07:07.420 --> 00:07:11.930
you can just specify not here as well or underscore and it is again, equally true.

90
00:07:11.950 --> 00:07:13.300
Remove this from here.

91
00:07:15.140 --> 00:07:23.600
Run this and it is going to generate false, so that's how you can use the logical operators and early.

92
00:07:24.760 --> 00:07:29.750
So moving on to the ternary operator, and as I told you, it is the very same as it was condition,

93
00:07:29.770 --> 00:07:37.210
let me give you a quick format of how, if conditions work, you have to specify if then in here you

94
00:07:37.210 --> 00:07:38.770
have to write in the condition.

95
00:07:39.400 --> 00:07:45.850
And whatever you want to do, if this condition is true, is going to be a part of some statements over

96
00:07:45.850 --> 00:07:46.200
here.

97
00:07:46.900 --> 00:07:53.140
Then after those line of statement, you can specify multiple statements made by any number of lines.

98
00:07:53.380 --> 00:07:57.580
But you have to do is that just move out of this block right in else.

99
00:07:57.880 --> 00:08:01.000
And then again, you have to write in a set of statements.

100
00:08:02.280 --> 00:08:08.220
So that is what is the format of and if Al's condition, but that will be discussed in very detail in

101
00:08:08.220 --> 00:08:10.720
the future editorial when we will be discussing the control floor.

102
00:08:10.980 --> 00:08:12.480
So for now, let's just leave it.

103
00:08:13.050 --> 00:08:19.020
What I want to show you is that this Apelles condition that was written, multiple lines can be written

104
00:08:19.020 --> 00:08:23.790
in a single line as well, that is using the ternary operator.

105
00:08:24.360 --> 00:08:28.310
So how this is done is that first you have to specify the condition.

106
00:08:28.620 --> 00:08:36.060
So let's say I want to check in the condition that let's say I want to check if, let's say 20 is greater

107
00:08:36.060 --> 00:08:37.200
than 10 or not.

108
00:08:37.410 --> 00:08:39.840
Now, apparently, I simply know that it is.

109
00:08:39.840 --> 00:08:43.260
But what I want to say is that I want to print.

110
00:08:43.650 --> 00:08:48.720
Yes, if this condition is true and I want to print a know if this condition is false.

111
00:08:48.750 --> 00:08:52.110
So what I will do is that I will put a question mark.

112
00:08:52.650 --> 00:08:58.620
And since I've put a question mark, which means that I want to ask a question, that if 20 is greater

113
00:08:58.620 --> 00:09:02.580
than 10 or not, as you have already covered the predicate methods and you know what?

114
00:09:02.580 --> 00:09:04.210
Why this question mark is used.

115
00:09:04.560 --> 00:09:06.260
So I want to specify.

116
00:09:06.570 --> 00:09:07.050
Yes.

117
00:09:07.260 --> 00:09:13.740
So if this condition is true, it is going to print whatever I have written right away and then I will

118
00:09:13.740 --> 00:09:15.180
specify a colon.

119
00:09:15.390 --> 00:09:21.450
And after this call and whatever I specify is going to be printed if this condition over here is false.

120
00:09:21.840 --> 00:09:28.140
Now, what are you going to do simply is that you can just assign it to a variable, let's say a.

121
00:09:29.200 --> 00:09:34.630
And just right in both, say, around the school, and as you can see on the output, Altamirano, that

122
00:09:34.630 --> 00:09:35.280
you have this.

123
00:09:35.440 --> 00:09:42.350
Yes, sprinted right ahead now is very simple since 20 is greater than 10.

124
00:09:42.520 --> 00:09:46.630
So whatever we have written over here is going to be printed since we have.

125
00:09:46.630 --> 00:09:46.900
Yes.

126
00:09:47.290 --> 00:09:47.920
So that's why.

127
00:09:47.950 --> 00:09:48.340
Yes.

128
00:09:48.370 --> 00:09:49.420
Was printed about him.

129
00:09:49.850 --> 00:09:56.560
Now, they told you that if this condition is false, then this condition, this statement over here

130
00:09:56.560 --> 00:09:57.270
is going to run.

131
00:09:57.280 --> 00:10:03.690
So let me just specify let's say 30 were held so you can simply see that this condition is now not true.

132
00:10:04.150 --> 00:10:10.780
So if you just run the school, you can see that no is printed right over here.

133
00:10:11.720 --> 00:10:17.930
So that's how you can use a ternary operator, and if you have single conditions, you want to check

134
00:10:17.930 --> 00:10:23.930
and you want to check them in a single line and you want only a single instruction to be printed when

135
00:10:23.930 --> 00:10:29.300
a certain condition is true, then what you can do is that you can use the ternary operator instead

136
00:10:29.300 --> 00:10:30.260
of the condition.

137
00:10:30.260 --> 00:10:37.940
But you if you have to use and if you want to do, let's say, a hundred of lines of codes after a certain

138
00:10:37.940 --> 00:10:43.970
condition, for example, if this 20 is greater than 30, then what you want to do is that if this condition

139
00:10:43.970 --> 00:10:47.480
is true, let's say it is, then now this condition is true.

140
00:10:47.660 --> 00:10:52.130
After this condition is true, what do you want to do is that you want to assign a value to something.

141
00:10:52.130 --> 00:10:57.440
You want to print that while you understand it, what Arabize you want to do hundreds of things.

142
00:10:57.440 --> 00:11:00.710
Then what you can do is that you can not use the ternary operator then.

143
00:11:00.950 --> 00:11:07.020
Then you have to use the if else condition because you need a block to write all that go to hell.

144
00:11:07.190 --> 00:11:09.620
But in this case, it was quite simple.

145
00:11:09.620 --> 00:11:14.210
We want only a single statement to be printed if this condition was true and only a single statement

146
00:11:14.210 --> 00:11:16.380
to be printed if this condition was not true.

147
00:11:16.520 --> 00:11:19.360
So that's why we have used ternary operator right over here.

148
00:11:19.940 --> 00:11:24.230
So I guess we are done with both the operators.

149
00:11:24.230 --> 00:11:27.340
We have covered the examples of both of them as well.

150
00:11:27.650 --> 00:11:30.240
So I guess that's what the strategy as well.

151
00:11:30.260 --> 00:11:32.270
Thank you so much, guys, for watching.

152
00:11:32.270 --> 00:11:34.490
And I'll see you guys in the next tutorial.
