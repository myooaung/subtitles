1
00:00:00,360 --> 00:00:01,350
Hey, guys, what's up?

2
00:00:01,380 --> 00:00:06,900
This is a marathon, and I welcome you to another Dorelle on this course, on Ruby now since we are

3
00:00:06,900 --> 00:00:08,610
covering object oriented programming.

4
00:00:08,620 --> 00:00:13,890
So from this material, we are going to start on with a new concept that is polymorphism, not in Ruby.

5
00:00:13,890 --> 00:00:18,720
One does not have nothing like the variable type as there is in other programming languages.

6
00:00:18,930 --> 00:00:22,350
Every variable is an object which can be individually modified.

7
00:00:22,470 --> 00:00:25,750
One can easily add methods and functions on every object.

8
00:00:25,980 --> 00:00:29,880
So here the object oriented programming plays a major role.

9
00:00:30,060 --> 00:00:35,310
Now there are many pillars of object oriented programming in every programming language like you have

10
00:00:35,310 --> 00:00:37,410
covered inheritance, you have covered encapsulation.

11
00:00:37,620 --> 00:00:40,530
Now one of those spillar is known as polymorphism.

12
00:00:41,690 --> 00:00:47,030
Now, polymorphism comes from the Greek word that is basically a combination of two words.

13
00:00:47,030 --> 00:00:53,240
The first one is Poli's, which means many or you can say more, and then the second word is more.

14
00:00:53,510 --> 00:00:54,950
That means form or shape.

15
00:00:55,250 --> 00:01:01,340
So in programming, polymorphism refers to the ability to use functions or methods in different ways

16
00:01:01,340 --> 00:01:03,440
for different objects or data types.

17
00:01:03,800 --> 00:01:08,960
Having the ability to use the same method in a different way, depending on the data input, is very

18
00:01:08,960 --> 00:01:09,590
useful.

19
00:01:09,590 --> 00:01:14,720
In Ruby, it greatly decreased the need for ugly long if statements.

20
00:01:15,020 --> 00:01:21,440
So, for example, if I just give you an example of how polymorphism has basically helped produce the

21
00:01:21,440 --> 00:01:22,430
ugly if statement.

22
00:01:22,440 --> 00:01:27,860
So let's say you have a class or a hill that is named as.

23
00:01:29,610 --> 00:01:34,110
Person and in that last, let's say you have a constructor function.

24
00:01:36,710 --> 00:01:41,450
That has two arguments which are going to get received over here.

25
00:01:41,480 --> 00:01:45,460
First one is first, then it is going to have lost.

26
00:01:45,470 --> 00:01:48,470
And here we are going to receive the first name, the last name.

27
00:01:48,470 --> 00:01:51,540
And finally, we are going to receive the age for the person.

28
00:01:51,920 --> 00:01:56,780
So and here we are going to use the instance variable and we are going to just initialize values over

29
00:01:56,780 --> 00:01:57,040
here.

30
00:01:57,050 --> 00:02:02,210
So we are going to write in first name equal to first.

31
00:02:06,600 --> 00:02:07,290
And.

32
00:02:09,070 --> 00:02:11,740
Second name or just say last name.

33
00:02:15,060 --> 00:02:22,350
Is equal to last, and finally, we are going to specify age is going to equal to age.

34
00:02:23,460 --> 00:02:28,290
Just and this constructor function over here now, we are going to add one more function that is going

35
00:02:28,290 --> 00:02:30,380
to be the birthday function.

36
00:02:30,390 --> 00:02:35,040
And in this function, what we are going to do is that we are going to increment the age every time

37
00:02:35,040 --> 00:02:40,120
the birthday for a person comes, the age is going to get incremented by one for that person.

38
00:02:40,530 --> 00:02:46,440
So we are going to write and add the rate of age plus equal to one.

39
00:02:48,460 --> 00:02:53,680
So this means that it is going to get incremented by one whenever this birthday function is going to

40
00:02:53,680 --> 00:02:59,620
get called just and dysfunction, and we are going to have one more function, which is going to be

41
00:03:00,370 --> 00:03:01,810
introduced function.

42
00:03:04,060 --> 00:03:09,580
And in this function where we are going to do is that we are going to use if statements now, so we

43
00:03:09,580 --> 00:03:13,120
are going to write in the type equal equal to.

44
00:03:15,840 --> 00:03:16,710
Students.

45
00:03:18,700 --> 00:03:22,180
Then what it is going to print on, it is going to print puts.

46
00:03:26,890 --> 00:03:27,730
I am.

47
00:03:30,620 --> 00:03:31,400
Student.

48
00:03:33,840 --> 00:03:41,160
My name is you're going to use Interpellation Abargil and you're going to write and at the rate of.

49
00:03:42,050 --> 00:03:48,830
First underscore a said, he's going to say, my name is this, and he's also going to specify his last

50
00:03:48,830 --> 00:03:49,070
name.

51
00:03:49,080 --> 00:03:52,310
So we are going to just add Aspasia here.

52
00:03:53,480 --> 00:03:59,480
Interpellation and we are going to specify the age for sorry, not the age, but the last name for that

53
00:03:59,480 --> 00:03:59,850
person.

54
00:03:59,900 --> 00:04:01,870
So we are going to write any last name over here.

55
00:04:02,570 --> 00:04:07,040
And this is going to be, I guess, a small Ambulante also specified right at the start.

56
00:04:07,040 --> 00:04:09,590
So that it is it is an instance variable oakhill.

57
00:04:11,250 --> 00:04:16,290
Good enough, the next thing we are going to do is that we are going to have Alcivar here.

58
00:04:18,950 --> 00:04:20,780
If the type equal to.

59
00:04:25,420 --> 00:04:33,190
A teacher, then what it is going to do is that it is going to print on this very same statement over

60
00:04:33,190 --> 00:04:35,820
here, so we will just copy the statement from here.

61
00:04:39,900 --> 00:04:42,420
And we are going to just base this statement right to a hill.

62
00:04:44,060 --> 00:04:47,530
And now he's going to say, I am a teacher.

63
00:04:49,460 --> 00:04:54,470
My name is this, and this is going to print out the first name and the last name as well, then let's

64
00:04:54,470 --> 00:04:56,000
say he is a parent.

65
00:04:56,000 --> 00:04:58,890
So we are going to specify one more elusive condition.

66
00:04:58,910 --> 00:05:00,950
So that is going to be as if.

67
00:05:02,750 --> 00:05:11,570
Type is equal, equal to a parent then what it is going to do is that it is going to simply print on.

68
00:05:14,280 --> 00:05:17,670
The very same statement and but now this is going to say.

69
00:05:20,640 --> 00:05:26,060
Berrendo Hill is just a get in a bed so we can see the complete tangle here.

70
00:05:26,280 --> 00:05:30,710
Now, I guess we can have a look by just making it a hill good enough.

71
00:05:30,960 --> 00:05:33,740
And now, finally, let's say we have these tree types.

72
00:05:33,740 --> 00:05:37,320
So let's say finally we are going to specify in condition that nothing is true.

73
00:05:37,320 --> 00:05:40,320
What it is going to do is that it is going to ride and puts.

74
00:05:43,590 --> 00:05:48,060
My name is and you're going to just right at the rate of.

75
00:05:49,010 --> 00:05:49,850
First name.

76
00:05:52,860 --> 00:05:57,600
Along with that, you are going to ride in at the rate of lost and to a name.

77
00:05:59,040 --> 00:06:00,030
All right, good enough.

78
00:06:00,040 --> 00:06:04,380
And I guess, yes, we have this extra overhead.

79
00:06:04,380 --> 00:06:06,450
This does not have to be a part of this.

80
00:06:06,810 --> 00:06:13,080
And now it is going to work perfectly or we need to do is that we need to just end this if condition

81
00:06:13,080 --> 00:06:16,230
and this function and finally end this class as well.

82
00:06:16,800 --> 00:06:17,220
All right.

83
00:06:17,220 --> 00:06:22,410
So after that, what we are going to do is that we are going to create an object for the person class.

84
00:06:22,620 --> 00:06:27,930
And then through that, we are going to call in the introduce function and we are going to specify some

85
00:06:27,930 --> 00:06:28,760
kind of type.

86
00:06:29,130 --> 00:06:31,200
So we are going to write in, John.

87
00:06:33,060 --> 00:06:38,650
Equal do person Dot knew, and and here we are going to specify three parameters that are going to get

88
00:06:38,650 --> 00:06:43,830
passed to deconstruct a function of the class person, and the first argument is going to be the first

89
00:06:43,830 --> 00:06:44,010
name.

90
00:06:44,020 --> 00:06:45,480
So let's say it is, John.

91
00:06:46,140 --> 00:06:48,410
Let's say the second argument is DOA.

92
00:06:48,420 --> 00:06:53,190
And finally, we are going to specify the age that is 20 or so.

93
00:06:53,190 --> 00:06:57,690
Now, using this object, John, we are going to do is that we are going to call in the introduce function

94
00:06:57,810 --> 00:06:58,910
and then introduce function.

95
00:06:58,920 --> 00:07:00,220
We are going to specify the type.

96
00:07:00,240 --> 00:07:02,700
So let's say the person is a student.

97
00:07:03,210 --> 00:07:04,700
So I guess that's good enough.

98
00:07:04,710 --> 00:07:07,380
All we need to do is that we need to run this code.

99
00:07:10,910 --> 00:07:16,310
All right, it is executed and it says, I am a student and my name is John Doe, so I guess you can

100
00:07:16,310 --> 00:07:17,810
see the output clearly.

101
00:07:17,810 --> 00:07:20,070
It says I am a student and my name is John Doe.

102
00:07:20,130 --> 00:07:25,700
Now, the since the person the type you have specified a student, so that by this conditional here

103
00:07:25,700 --> 00:07:30,750
was true and it has printed on I am a student and my name is John Doe.

104
00:07:31,040 --> 00:07:35,330
Now if you just specify, let's say a teacher will run the school and it is going to print on.

105
00:07:35,330 --> 00:07:36,970
I am a teacher and my name is John Doe.

106
00:07:37,250 --> 00:07:43,550
And let's say if you specify nothing of whatever is specified in the if condition, let's say if you

107
00:07:43,850 --> 00:07:50,210
just type in, a worker will run this code and it is going to simply say, my name is John Doe.

108
00:07:51,380 --> 00:07:57,800
Now, you can do it like that, but as you can see that it is a very, very mixing type of thing and

109
00:07:57,800 --> 00:08:01,030
it is a very difficult thing to do to understand it.

110
00:08:01,040 --> 00:08:02,270
It is very simple, but.

111
00:08:03,360 --> 00:08:08,490
Do write down, you can see that how complex it is it now with polymorphism, what we are going to do

112
00:08:08,490 --> 00:08:14,280
is that we are going to eliminate this ugly if statement by creating multiple classes that all have

113
00:08:14,280 --> 00:08:15,960
the introduce method in them.

114
00:08:16,410 --> 00:08:20,070
We are just going to change what the introduced method does for each class.

115
00:08:21,440 --> 00:08:25,250
So that is what is basically called polymorphism with inheritance.

116
00:08:25,550 --> 00:08:31,730
So all of our different types of people that are students, parents and teachers are the person and

117
00:08:31,730 --> 00:08:34,860
they share similarities like names and birthdays.

118
00:08:35,150 --> 00:08:37,030
We don't want to eliminate the person.

119
00:08:37,040 --> 00:08:38,870
Class are the common methods.

120
00:08:38,870 --> 00:08:43,820
We are going to add class for each type of person that will inherit the person class.

121
00:08:44,000 --> 00:08:50,690
Then our new classes will inherit the common methods from person, but will have a customized method

122
00:08:50,690 --> 00:08:53,570
that is going to be named as introduce.

123
00:08:54,670 --> 00:09:03,760
So what we will do is that we will just remove this stuff to help and we are going to have our constructor

124
00:09:03,760 --> 00:09:07,180
function as usual, and it is going to, as usual, receiving three arguments.

125
00:09:07,180 --> 00:09:08,800
The first one is the first name.

126
00:09:08,810 --> 00:09:09,970
Then we have the last name.

127
00:09:09,970 --> 00:09:11,170
And finally we have the age.

128
00:09:11,410 --> 00:09:16,070
And we are going to initialize all of these three parameters using the instance variables.

129
00:09:16,360 --> 00:09:20,440
Now, after that, what we are going to have is that we are also going to have the body function.

130
00:09:20,450 --> 00:09:25,210
So I should not have removed that has just created very quickly age.

131
00:09:26,290 --> 00:09:32,920
Plus, equal to one now, whatever is going to be common between all the classes that a student, teacher

132
00:09:32,920 --> 00:09:38,620
and parents, that is going to be a part of this person class since all the other classes that a student

133
00:09:38,620 --> 00:09:44,980
class, the teacher class and the parent class, which we are about to create, are basically going

134
00:09:44,980 --> 00:09:46,990
to get inherited from this person class.

135
00:09:46,990 --> 00:09:52,540
And you know that when a class is inherited from some class, then it inherits all its future as well.

136
00:09:52,750 --> 00:09:57,610
Now, since birth is a feature that is going to be a part of every kind of class.

137
00:09:57,620 --> 00:10:02,090
So that's why what we will do is that we will just create the birthday function right over here.

138
00:10:02,950 --> 00:10:03,370
So, yes.

139
00:10:03,370 --> 00:10:04,420
And this functional hill.

140
00:10:06,300 --> 00:10:11,340
And we are going to create the introduce function over here as well, and using the introduce, I'm

141
00:10:11,340 --> 00:10:12,840
going to just write and put.

142
00:10:16,000 --> 00:10:16,630
Hi.

143
00:10:19,750 --> 00:10:22,960
My name is and you're going to write an.

144
00:10:25,960 --> 00:10:26,830
First name.

145
00:10:28,660 --> 00:10:32,530
And you're going to write and last name as well.

146
00:10:33,040 --> 00:10:37,070
So just in this function, the class has already been ended.

147
00:10:37,090 --> 00:10:41,460
Now, what we are going to do is that we are going to create our three classes.

148
00:10:41,740 --> 00:10:45,240
So the first class is going to be the student class.

149
00:10:45,250 --> 00:10:47,300
Then we are going to create the teacher class.

150
00:10:47,320 --> 00:10:49,810
And finally, we are going to create a parent class.

151
00:10:49,810 --> 00:10:56,080
And all of these classes will have the method that is going to be the introduce method.

152
00:10:57,620 --> 00:11:03,650
So down here, let's just create our first class that is going to be the student class and this class

153
00:11:03,650 --> 00:11:09,890
is going to get inherited from the person class and in that, we are going to simply have function introduce

154
00:11:09,890 --> 00:11:12,380
and in that function what we are going to write inputs.

155
00:11:14,970 --> 00:11:27,150
I am a student and my name is Interpellation First and a school name Aderet, because it is an instance

156
00:11:27,150 --> 00:11:30,090
variable and you are going to specify.

157
00:11:31,240 --> 00:11:35,020
The last name as well, good enough, let's just end this function.

158
00:11:36,940 --> 00:11:42,610
And just and this glass as well, so it is a very simple looking glass, so let's just copy this glass

159
00:11:42,610 --> 00:11:46,730
from here and we will paste it twice over here.

160
00:11:47,470 --> 00:11:49,310
So the first one was for the student.

161
00:11:49,330 --> 00:11:52,780
Now we are going to create the same thing for the teacher class.

162
00:11:52,790 --> 00:11:58,350
So we are going to write and teacher over here and now here we are going to just replace this with a

163
00:11:58,360 --> 00:11:58,940
teacher.

164
00:11:59,050 --> 00:12:01,990
So he's going to say, I am a teacher and my name is this.

165
00:12:02,230 --> 00:12:05,460
And then the third class is going to be for the parent.

166
00:12:06,400 --> 00:12:14,050
So that is going to say that I am a parent and my name is first name, and then he's going to specify

167
00:12:14,230 --> 00:12:15,390
his last name as well.

168
00:12:16,760 --> 00:12:22,100
Now downhill, what we are going to do is that we are going to just create the object, but this time

169
00:12:22,100 --> 00:12:25,320
the object is going to be created for this specific class.

170
00:12:25,670 --> 00:12:30,470
So if you want this stuff for the students or what you are going to do is that you are going to do this

171
00:12:30,470 --> 00:12:31,780
for the student class.

172
00:12:32,240 --> 00:12:37,640
So we are going to just pass in the three parameters that as the first name, the last name, then the

173
00:12:37,640 --> 00:12:38,170
edge.

174
00:12:38,180 --> 00:12:44,150
And when you now right and Johnboat introduce, you do not need any kind of parameter is now around

175
00:12:44,150 --> 00:12:44,660
this code.

176
00:12:44,900 --> 00:12:49,380
And it is going to say that I am a student and my name is John Doe.

177
00:12:49,640 --> 00:12:57,320
Now if you do this very same for the feature class or underscored, you can see that says I am a teacher

178
00:12:57,320 --> 00:12:58,540
and my name is John Doe.

179
00:12:58,850 --> 00:13:06,260
But let's say if you created for the parent class, that is the person class, for example, if you

180
00:13:06,260 --> 00:13:10,220
just write in person over here and now run this code, now it is going to simply say, hi, my name

181
00:13:10,220 --> 00:13:13,430
is John Doe, because now this function of a hail.

182
00:13:14,450 --> 00:13:16,670
Is going to get executed now.

183
00:13:16,700 --> 00:13:21,740
For example, you have these glasses and let's say if you don't have an introduce glass in one of these,

184
00:13:21,740 --> 00:13:27,590
for example, you just misplace misspell this or that is introduced over here and you create an object

185
00:13:27,590 --> 00:13:29,070
for the glass over here.

186
00:13:31,420 --> 00:13:34,340
And now run God, now he's going to say, hi, my name is John Doe.

187
00:13:34,670 --> 00:13:40,660
Now, as you have covered the hierarchy in the previous tutorial where we have covered the hierarchy

188
00:13:40,660 --> 00:13:47,020
of the object class, and you know that first it is going to look for the introduce function in the

189
00:13:47,020 --> 00:13:47,700
teacher class.

190
00:13:47,710 --> 00:13:52,360
But since you can see that it has no kind of introduce function of my hair because we have just added

191
00:13:52,360 --> 00:13:53,100
a deal here.

192
00:13:53,350 --> 00:13:58,360
So that's why it is going to then move on towards the parent class from which this class teacher is

193
00:13:58,360 --> 00:13:58,960
inherited.

194
00:13:58,960 --> 00:14:02,660
And in that class it is going to find introduce function and he's going to print out.

195
00:14:02,680 --> 00:14:04,690
Hi, my name is first name and last name.

196
00:14:04,690 --> 00:14:09,820
So that is what is basically called polymorphism in which we have a same.

197
00:14:10,830 --> 00:14:15,880
Function you can see introduced in the child glasses as well as independent glasses.

198
00:14:15,930 --> 00:14:21,690
So this was a very simple example of how polymorphism can be used in Ruby and how polymorphism can be

199
00:14:21,690 --> 00:14:23,550
used along with inheritance.

200
00:14:23,580 --> 00:14:29,640
Now, there is one more very important concept relating to polymorphism is that how do you use polymorphism

201
00:14:29,640 --> 00:14:36,770
using duck typing now in Ruby, the focus on the object capabilities and features rather than its glass.

202
00:14:37,020 --> 00:14:42,600
So a duck typing is nothing but working on the idea of what an object can do rather than what it actually

203
00:14:42,600 --> 00:14:49,020
is, or what operation could be performed on the object rather than the class of the object.

204
00:14:49,500 --> 00:14:53,520
So I tried my best to create an example of myself.

205
00:14:54,000 --> 00:15:02,430
But on the Internet, on a website, I found a very beautiful example of Doug typing, of using polymorphism,

206
00:15:02,430 --> 00:15:03,510
using duck typing.

207
00:15:03,510 --> 00:15:05,910
So I would just explain that example to him.

208
00:15:07,260 --> 00:15:12,870
So we'll just remove this from here, we will be prejudiced and what we are going to do is that we are

209
00:15:12,870 --> 00:15:14,720
going to create two classes.

210
00:15:14,730 --> 00:15:17,610
The first one is going to be the whole class.

211
00:15:17,970 --> 00:15:22,560
And in that hotel class, what we are going to do is that we are going to have multiple functions.

212
00:15:23,770 --> 00:15:26,300
The first function is going to be the entrance function.

213
00:15:26,320 --> 00:15:31,980
So whenever a customer is going to enter the hotel, we are going to call on this function and we are

214
00:15:31,980 --> 00:15:33,210
going to just write in.

215
00:15:35,400 --> 00:15:36,360
A customer.

216
00:15:37,940 --> 00:15:44,480
Entered the hotel, all right, to just end dysfunction and then what we are going to do is that we

217
00:15:44,480 --> 00:15:49,040
are going to have one more function that is going to be and.

218
00:15:49,930 --> 00:15:58,000
And that function is going to be the type and the type function, we are going to receive an argument

219
00:15:58,000 --> 00:16:00,000
as well that is going to be the customer.

220
00:16:00,020 --> 00:16:04,570
And here we are going to write in customer a DOT type.

221
00:16:04,600 --> 00:16:09,580
So this is going to get written and we are going to just write in the end statement of a hail.

222
00:16:11,350 --> 00:16:17,980
Now, right up to the time we are going to create a room function and in that room function, we are

223
00:16:17,980 --> 00:16:21,930
again going to receive the argument that is the customer.

224
00:16:21,940 --> 00:16:28,420
And and here we are going to write in customer dot room just.

225
00:16:28,420 --> 00:16:29,140
And this.

226
00:16:31,040 --> 00:16:32,850
And finally, and this class as well.

227
00:16:33,260 --> 00:16:38,630
And right down here, what we are going to now do is that we are going to create a class with two methods.

228
00:16:38,960 --> 00:16:42,790
So that last name is going to be single.

229
00:16:44,060 --> 00:16:48,490
And in that class, what we are going to do is that we are going to create two functions.

230
00:16:48,500 --> 00:16:53,820
The first one is going to be the type function and the second function is going to be the room function.

231
00:16:54,050 --> 00:16:58,700
So these are basically this function of a hill, which we are calling right from this hotel function

232
00:16:58,700 --> 00:16:59,280
right over here.

233
00:16:59,300 --> 00:17:03,320
So the first function is type the second function is going to be and we are going to define them over

234
00:17:03,320 --> 00:17:03,570
here.

235
00:17:04,160 --> 00:17:07,250
So we are going to write in-depth type.

236
00:17:08,390 --> 00:17:10,700
And in that function, we are going to write inputs.

237
00:17:12,890 --> 00:17:13,940
Room is.

238
00:17:15,470 --> 00:17:16,100
On the.

239
00:17:20,960 --> 00:17:21,470
Flaugher.

240
00:17:22,500 --> 00:17:29,610
Simple enough, just and this and the second function is going to be the room function and in that room

241
00:17:29,610 --> 00:17:32,580
function, we are going to just write in votes.

242
00:17:35,870 --> 00:17:38,420
Per night stay is.

243
00:17:40,450 --> 00:17:43,600
Let's say 50 just and this will help.

244
00:17:45,310 --> 00:17:46,910
And this all here as well.

245
00:17:47,410 --> 00:17:53,080
Now, what we are going to do is that we are going to create another class that is going to be the class

246
00:17:53,080 --> 00:17:53,470
couple.

247
00:17:53,470 --> 00:17:58,300
And in that class, what we are going to do is that we are going to define the very two same function

248
00:17:58,300 --> 00:17:59,760
that are the type and the room.

249
00:18:00,130 --> 00:18:03,070
So we are going to just copy this class from Hill.

250
00:18:04,950 --> 00:18:09,970
They stood over here and we are going to just rename this class to be the couple's class.

251
00:18:10,300 --> 00:18:16,420
So when a person is single, then this class is going to get used and one person comes in a couple and

252
00:18:16,420 --> 00:18:18,580
this class over here is going to get used.

253
00:18:18,900 --> 00:18:23,350
Now comes the job of creating an object where the whole story lies.

254
00:18:23,860 --> 00:18:27,850
So what we are going to do is that we are going to write an.

255
00:18:29,430 --> 00:18:31,740
Hotel equal to hotel.

256
00:18:32,220 --> 00:18:37,730
So we have basically created an object of this closable here that is at the top of a hill.

257
00:18:39,270 --> 00:18:43,530
So now what we are going to do is that we are going to write and puts.

258
00:18:47,580 --> 00:18:54,150
This visitor is single, and right after this, we are going to use the glass that is for singles,

259
00:18:54,160 --> 00:18:56,300
so we are going to create an object for that.

260
00:18:56,310 --> 00:19:04,620
So we are going to write in customer equal to and the name of the class, as you know, is single with

261
00:19:04,620 --> 00:19:05,390
a capital S..

262
00:19:05,400 --> 00:19:08,460
So we are going to write and single.

263
00:19:09,480 --> 00:19:10,530
Deutche new.

264
00:19:12,570 --> 00:19:18,150
And then what you're going to do is that using this object that has been created over here, we are

265
00:19:18,150 --> 00:19:19,920
going to call it the two functions.

266
00:19:20,280 --> 00:19:23,160
So we are going to write in a hill.

267
00:19:25,880 --> 00:19:32,060
Door type, and we are going to pass in the argument that is customary now, as you can see, that the

268
00:19:32,060 --> 00:19:38,480
hotel object is basically created for the hotel glass, which is right at the top here in which we have

269
00:19:38,600 --> 00:19:43,760
the type function, as well as the room function, which also have been overridden in the two other

270
00:19:43,760 --> 00:19:44,120
glasses.

271
00:19:44,130 --> 00:19:46,280
That is the single glass and the glass.

272
00:19:46,580 --> 00:19:52,400
So basically we are using this object with the type and we are going to call in the type function.

273
00:19:53,610 --> 00:19:58,800
And we are going to pass in this as an argument that is the customer object that has been created for

274
00:19:58,800 --> 00:20:01,980
this single class, and we are going to also call in the other functions.

275
00:20:01,980 --> 00:20:08,130
So we are going to write in a hotel room and we are going to pass in the same very argument that is

276
00:20:08,430 --> 00:20:09,020
customer.

277
00:20:09,240 --> 00:20:13,970
Now, what we are going to do is that we are going to also do it for the other one.

278
00:20:13,980 --> 00:20:16,380
So we are going to just copy this face to the wall here.

279
00:20:16,380 --> 00:20:18,990
And we are going to write in this wisdom is.

280
00:20:20,270 --> 00:20:27,470
Or you can just ride in this visit these visitors, and this has to be these these visitors.

281
00:20:28,840 --> 00:20:34,780
Ah, in a couple, and now what you're going to do is that you're going to create an object for the

282
00:20:34,780 --> 00:20:39,400
couple over here and this here is going to remain the very same.

283
00:20:40,510 --> 00:20:44,680
So if you just run this code, you're going to see very interesting things that will help.

284
00:20:45,370 --> 00:20:50,530
So the first thing it says is that it says the visitor is single and then it says the room is on the

285
00:20:50,530 --> 00:20:53,420
fifth floor and the per night state is five thousand.

286
00:20:53,440 --> 00:20:55,890
Then it says these visitors are a couple.

287
00:20:55,900 --> 00:20:59,860
And it's again says the room is on the fifth floor and the night state is five.

288
00:21:00,670 --> 00:21:08,380
Now, what's going on over here is that basically this glass over here, that is the hotel glass is

289
00:21:08,380 --> 00:21:11,210
basically being used to excess there.

290
00:21:11,240 --> 00:21:14,680
So when you just write in, everything from this is going to get extracted.

291
00:21:14,690 --> 00:21:20,110
But when you are using this object and creating the object and now you are using this object to call

292
00:21:20,110 --> 00:21:22,620
in type and you are just writing in customer will here.

293
00:21:23,980 --> 00:21:28,020
And as you can see, that it is basically going to expect an argument over here.

294
00:21:28,030 --> 00:21:30,800
So that argument is going to get passed over here.

295
00:21:31,090 --> 00:21:37,270
This is going to get executed and it is going to now go on in customer time now since we are calling

296
00:21:37,270 --> 00:21:39,560
it and passing in an object over here.

297
00:21:39,580 --> 00:21:44,830
So that's why now it knows that a glass single also exists in the single glass.

298
00:21:44,840 --> 00:21:49,490
It is going to look for the function type and as you can see, that it is right over here.

299
00:21:49,510 --> 00:21:54,400
So it is going to bring down the room is on the fifth floor or similarly, when you execute this statement

300
00:21:54,400 --> 00:21:59,770
over here, hotel room and again, you are calling this with the hotel object and you are passing in

301
00:21:59,770 --> 00:22:03,890
the object for the single glass of a hill.

302
00:22:04,720 --> 00:22:09,000
So first it is going to call the room function that is present in the hotel clause.

303
00:22:09,220 --> 00:22:14,260
So it is going to come right over here in the room and it is going to receive the object here in the

304
00:22:14,260 --> 00:22:14,920
parameters.

305
00:22:14,920 --> 00:22:21,040
And now in here it knows that a class name and a single exists because now it has the object.

306
00:22:21,040 --> 00:22:25,040
And as I told you before, that the object is basically a blueprint of a class.

307
00:22:25,270 --> 00:22:30,580
So since it has received the blueprint of that class, so now it can access the functions of that class

308
00:22:30,580 --> 00:22:30,910
as well.

309
00:22:30,940 --> 00:22:37,780
So now it knows that it has a class single and the class, when it goes into it, he knows that he has

310
00:22:37,780 --> 00:22:39,070
to call this functional Mahara.

311
00:22:39,070 --> 00:22:44,050
He's going to search for the function room over here and it is going to find that function and it is

312
00:22:44,050 --> 00:22:45,670
going to print out the permanent status.

313
00:22:45,670 --> 00:22:51,190
Five thousand and the same logic is going to get executed for this stuff over here.

314
00:22:51,400 --> 00:22:57,400
So in this example, the customer object basically plays a role in working with the properties of the

315
00:22:57,400 --> 00:22:59,110
customer, such as its type.

316
00:22:59,110 --> 00:23:08,070
And it's true, and this is a very beautiful example of polymorphism as far as the duct taping is considered

317
00:23:08,070 --> 00:23:08,910
with polymorphism.

318
00:23:08,920 --> 00:23:13,820
So this is how basically you can use polymorphism using the duct taping.

319
00:23:14,080 --> 00:23:20,650
So now you know how to use polymorphism with inheritance, with objects and also with duct tape.

320
00:23:20,780 --> 00:23:23,230
So I guess that's it with polymorphism.

321
00:23:23,440 --> 00:23:25,690
So thank you so much, guys, for watching.

322
00:23:25,690 --> 00:23:28,660
And I will see you guys in the next tutorial.
