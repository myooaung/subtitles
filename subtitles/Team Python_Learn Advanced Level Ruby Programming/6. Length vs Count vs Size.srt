1
00:00:00,510 --> 00:00:01,560
Hey, guys, what's up?

2
00:00:01,590 --> 00:00:05,390
This is a marathon, and I welcome you to an editorial on this course on Ruby.

3
00:00:05,730 --> 00:00:10,890
And in this story, we are going to cover the difference between length, gown and size.

4
00:00:10,890 --> 00:00:14,070
So it is going to be lean towards discount or size.

5
00:00:14,670 --> 00:00:21,420
Now, one of the major problems newcomers to Ruby experience is that there are often quite a few ways

6
00:00:21,420 --> 00:00:23,620
of doing the very, very same thing.

7
00:00:23,910 --> 00:00:30,750
For instance, you can obtain the number of items in the innumerable class using three methods.

8
00:00:31,500 --> 00:00:38,400
It is either by using the enumerable count or the method length or its earliest size that such classes

9
00:00:38,400 --> 00:00:39,120
often provide.

10
00:00:39,150 --> 00:00:46,880
So, for example, you have a set of elements, let's say X equal to one, two, three, four, five.

11
00:00:47,220 --> 00:00:53,700
So what you can do is that you can have multiple methods to obtain the size of this.

12
00:00:53,890 --> 00:00:58,410
So for example, you will write and put X dot land.

13
00:00:59,340 --> 00:01:09,180
You can simply use X dot size and then you can also use X dot count.

14
00:01:10,030 --> 00:01:16,690
And this, I guess, has to be in small run this court, and as you can see, that you have this five

15
00:01:16,690 --> 00:01:20,920
obtained for this extra land for the boats with this as well.

16
00:01:20,930 --> 00:01:21,390
Run this.

17
00:01:21,640 --> 00:01:23,190
Do you have this five again?

18
00:01:23,660 --> 00:01:27,550
Again, for the boats with this round the score and you have this five again.

19
00:01:27,550 --> 00:01:35,470
So you have obtained the count of this variable X over here using three different methods, that is

20
00:01:35,470 --> 00:01:38,410
land, size and count.

21
00:01:38,680 --> 00:01:45,400
Similarly, you can have this very same method applied on hashes, areas and strength.

22
00:01:45,410 --> 00:01:50,430
So for example, you have, let's say, a string over here and you have, let's say my name in here.

23
00:01:50,710 --> 00:01:58,030
Then when you just run this code, then X Stotland and exercise is going to generate a count for you.

24
00:01:58,030 --> 00:02:02,640
But the string sorry, this extra count is not going to work.

25
00:02:02,650 --> 00:02:04,050
Let's just run and let me show you.

26
00:02:04,210 --> 00:02:09,190
And as you can see, that you have this five five, but you have got missing one output.

27
00:02:09,190 --> 00:02:15,940
If you just have this commented out on the score, then you can see that the error message has just

28
00:02:15,940 --> 00:02:16,640
disappeared.

29
00:02:17,030 --> 00:02:23,390
Now, X.com won't work because String's does not include the innumerable class.

30
00:02:23,860 --> 00:02:26,470
So now you have got three methods.

31
00:02:26,470 --> 00:02:32,710
So which one you should be using when you are given some kind of scenario in which you have to generate

32
00:02:32,710 --> 00:02:33,120
a count?

33
00:02:33,580 --> 00:02:37,930
So basically the length is a method that is not a part of it.

34
00:02:37,930 --> 00:02:43,390
No, it is a part of a concrete glass and it's usually running in constant time.

35
00:02:43,600 --> 00:02:48,800
That's as fast as it gets, which means that using it is probably a good idea.

36
00:02:49,210 --> 00:02:55,000
Now, whether you should use the length or size is almost a matter of your personal preference.

37
00:02:55,330 --> 00:03:00,940
Personally, if you ask me, I would recommend you go on with size for collections that include the

38
00:03:00,940 --> 00:03:08,020
hashes and every kind of things, and you should be using lente for string, since for me objects like

39
00:03:08,020 --> 00:03:12,520
hashes and stacks don't have a length, but they have a size.

40
00:03:12,790 --> 00:03:18,910
Conversely, it's perfectly normal to assume that some text has some length anyways.

41
00:03:18,910 --> 00:03:25,990
In the end, if you are invoking the same method, so the semantic distinction is not important, then

42
00:03:25,990 --> 00:03:30,280
the innumerable count on the other hand, is a totally different beast.

43
00:03:30,530 --> 00:03:36,610
It's usually meant to be used with a block or an argument and it will return the number of matches and

44
00:03:36,880 --> 00:03:37,570
innumerable.

45
00:03:37,570 --> 00:03:40,450
For example, if you just have the previous scenario in which.

46
00:03:41,470 --> 00:03:46,470
You have one, two, three, four or five, let's say six, seven, eight as well.

47
00:03:47,940 --> 00:03:55,290
Then, for example, if you want to have the count applied on it, so we'll write in votes x dot count

48
00:03:55,350 --> 00:04:01,380
and you want to, let's say, just run the score and you can have the number of variables in this.

49
00:04:01,410 --> 00:04:04,470
But what if you want to have only the even number printed?

50
00:04:04,470 --> 00:04:08,820
So accurate count is going to help you out because it is from the innumerable glass.

51
00:04:10,040 --> 00:04:14,630
And it's usually meant to be used with a block or an argument, and it will reduce the number of matches

52
00:04:14,630 --> 00:04:15,980
and an innumerable.

53
00:04:17,330 --> 00:04:22,550
So, for example, you want to know the number of your numbers in this, so what you can do is that

54
00:04:22,550 --> 00:04:30,470
you can specify and you will specify a colon and you will specify even and a question mark, which means

55
00:04:30,470 --> 00:04:32,000
that you are asking a question.

56
00:04:32,480 --> 00:04:39,110
And the question is that tell me the number of even numbers that is in this X, and you want only the

57
00:04:39,110 --> 00:04:41,780
count to be generated for those even numbers for underscore.

58
00:04:41,780 --> 00:04:48,700
And as you can see, that you have got four, which means that two four six eight, these are the four

59
00:04:48,740 --> 00:04:49,300
even numbers.

60
00:04:49,300 --> 00:04:50,870
So that's why we have this four over here.

61
00:04:50,900 --> 00:04:55,390
Similarly, if you want to know the number of odd just right in order here, Randi, score.

62
00:04:55,400 --> 00:05:01,380
And again, you have four because you have one three five seven as the odd numbers over here.

63
00:05:01,670 --> 00:05:06,830
Similarly, if you want to know a specific number over here, let's just open one or underscore.

64
00:05:06,830 --> 00:05:10,850
And the answer is going to be one, because we have only a single one of here.

65
00:05:10,880 --> 00:05:13,960
For example, if you specify three one zero here, more on the score.

66
00:05:13,970 --> 00:05:16,850
And as you can see, you have got four now.

67
00:05:17,920 --> 00:05:25,150
So you can, however, invoke it with any argument and it will reduce the size of the innumerable on

68
00:05:25,150 --> 00:05:27,220
which it is invoked.

69
00:05:28,430 --> 00:05:32,450
Now, as you have seen, that if you got no argument over here, you run the school and then you're

70
00:05:32,450 --> 00:05:35,550
going to have the number of elements in this variable X.

71
00:05:35,960 --> 00:05:40,720
Now, there is a performance implication with this thought to calculate the size of the innumerable.

72
00:05:40,720 --> 00:05:44,390
The count method will traverse it, which is not particularly fast.

73
00:05:44,720 --> 00:05:52,010
Some classes implement and optimized version of count in terms of length, but many don't do this.

74
00:05:52,220 --> 00:05:59,720
The takeaway for you is that you should avoid using the count method if you can use the length or if

75
00:05:59,720 --> 00:06:01,510
you can use the size.

76
00:06:01,670 --> 00:06:05,700
But always remember, Count is not going to work on strength.

77
00:06:06,200 --> 00:06:11,420
So I guess that was the difference between the three methods.

78
00:06:11,420 --> 00:06:18,710
And I hope that I have cleared the doubt of what should you be using when you have got a situation in

79
00:06:18,710 --> 00:06:20,310
which you have to use one of them.

80
00:06:20,660 --> 00:06:23,480
So I guess that's it with this tutorial.

81
00:06:23,490 --> 00:06:28,130
Thank you so much for watching and I'll see you guys in the next tutorial.
