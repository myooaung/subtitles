1
00:00:00,330 --> 00:00:01,230
Hey, guys, what's up?

2
00:00:01,260 --> 00:00:04,530
This is a marathon, and I welcome you to another tutorial on this course on Ruby.

3
00:00:04,550 --> 00:00:06,930
And in this video we are going to be covering to function.

4
00:00:06,930 --> 00:00:11,350
The first function is going to be to each function and then we are going to be covering the dick function.

5
00:00:11,610 --> 00:00:17,250
So starting on with the first function of this tutorial, we have this each function, which is a hash

6
00:00:17,250 --> 00:00:23,610
class method which finds the Nasdaq value, which calls block once for each key in hash by passing the

7
00:00:23,610 --> 00:00:26,070
key value pair as the parameter.

8
00:00:26,640 --> 00:00:32,610
So if you talk about the syntax of this, it is hash dot each and now you can pass in three type of

9
00:00:32,610 --> 00:00:33,010
arguments.

10
00:00:33,030 --> 00:00:36,000
The first is that you can just pass no arguments.

11
00:00:36,030 --> 00:00:40,890
This means you can just keep these brackets empty and no parameters are to be passed to this function.

12
00:00:41,070 --> 00:00:46,140
The second parameter is that you can pass in the value and the third parameter is that you can just

13
00:00:46,140 --> 00:00:47,060
pass in the key.

14
00:00:47,110 --> 00:00:50,680
And for all the three scenarios, the output is going to be something different.

15
00:00:51,060 --> 00:00:52,790
So we'll try that later.

16
00:00:52,800 --> 00:00:57,820
But before we will discuss the second function, we are going to go in this tutorial that is the dick

17
00:00:57,840 --> 00:00:58,410
function.

18
00:00:59,610 --> 00:01:06,210
Now, this is a harsh glass method which finds the nested value, which is specified by the sequence

19
00:01:06,210 --> 00:01:10,260
of the key object by calling dig at each step.

20
00:01:10,650 --> 00:01:14,150
So if you talk about the syntax of this, it is hash tag.

21
00:01:14,160 --> 00:01:18,570
And the parameter that is going to be parsed is going to be the hash value.

22
00:01:18,570 --> 00:01:23,760
And you have to pass in the hash value here as the parameter to this function.

23
00:01:24,210 --> 00:01:27,600
So now let's see two examples.

24
00:01:27,600 --> 00:01:33,220
Each of of each of these functions, we have just code.

25
00:01:33,450 --> 00:01:35,820
So we've will go on to our editor.

26
00:01:37,070 --> 00:01:40,620
So the first function we will cover is that each function.

27
00:01:40,640 --> 00:01:47,840
So we already have three hashes over here, A, B and C. So what we will do is that we can just use

28
00:01:48,080 --> 00:01:53,130
the first Syntex on this, which means that we are going to use the empty brackets index for this.

29
00:01:53,150 --> 00:01:57,320
Then we are going to use the key index for this be hash and then for the C hash.

30
00:01:57,620 --> 00:02:00,110
We are going to use this index for the value.

31
00:02:00,740 --> 00:02:03,840
So let's try all of these one by one.

32
00:02:04,160 --> 00:02:07,060
So we are going to write and hash in.

33
00:02:08,880 --> 00:02:09,750
Each from.

34
00:02:11,960 --> 00:02:15,890
Interpellation Abargil, and we are going to ride in a dart each.

35
00:02:17,400 --> 00:02:23,550
And the first index was to keep these brackets empty, so let's just run the scoreboard and as you can

36
00:02:23,550 --> 00:02:29,430
see, that you have got an enumerator and you've got an address that is basically pointing towards the

37
00:02:29,430 --> 00:02:32,250
location of whatever restaurant.

38
00:02:32,400 --> 00:02:37,380
Now, since it is an enumerator, that's why it has got these values right over here.

39
00:02:37,380 --> 00:02:42,570
You can see that it has got enumerator will help and you have got an address Oakhill, which is, I

40
00:02:42,570 --> 00:02:44,810
guess, a sixteen bit address right over here.

41
00:02:45,120 --> 00:02:50,730
And basically you have got this hash right over here as your output now to try on with the second one,

42
00:02:50,750 --> 00:02:53,130
you what you can do is that you can write in votes.

43
00:02:55,710 --> 00:03:03,000
Hash the each from antipollution, and you can just write and be dot each.

44
00:03:05,420 --> 00:03:11,330
And you have to specify these curly brackets over here again and you have to use a parameter right over

45
00:03:11,330 --> 00:03:14,430
here and these bars over here, that is going to be key.

46
00:03:19,800 --> 00:03:26,550
And you don't have to you have to use now the interpellation concept over here against to right and

47
00:03:26,550 --> 00:03:27,150
puts.

48
00:03:28,580 --> 00:03:30,800
It right in hashtag pugil.

49
00:03:32,520 --> 00:03:38,610
And these are the closing brackets for the first one, and these are the closing brackets for the second

50
00:03:38,610 --> 00:03:39,900
in the position right over here.

51
00:03:40,320 --> 00:03:41,490
So just run it.

52
00:03:41,670 --> 00:03:43,410
And yes, it ran perfectly.

53
00:03:43,440 --> 00:03:47,940
You can see that this is the output that is Starick a hundred.

54
00:03:47,940 --> 00:03:55,160
And then you have got hash each from column A, this area here and hundred right over here.

55
00:03:56,750 --> 00:04:02,450
Now, what is basically going on over here is that for me, we have got on the single value that is

56
00:04:02,450 --> 00:04:04,360
a calling, Hundert.

57
00:04:04,790 --> 00:04:11,030
So what it is doing right over here is that it just grabbed the key for the first one.

58
00:04:11,030 --> 00:04:11,930
That was it.

59
00:04:12,200 --> 00:04:15,650
So the key here was, is it right in the value for that hash?

60
00:04:16,220 --> 00:04:21,620
So that was basically this right over here that is handed it printed out the keepers.

61
00:04:21,800 --> 00:04:26,810
And the second thing it printed out Starick it and this one handed right over him.

62
00:04:27,200 --> 00:04:29,240
Now to use it for multiple values.

63
00:04:29,240 --> 00:04:33,770
For example, you can just add certain values over here.

64
00:04:35,480 --> 00:04:42,740
Let's say we have a value be two hundred Abargil and let's say we have a value see 300 over here.

65
00:04:43,130 --> 00:04:47,550
So for now, we will just remove this so that it don't create any kind of fuss over him.

66
00:04:47,600 --> 00:04:52,800
And we will just elongate it a bit more so that you can see the complete line.

67
00:04:53,180 --> 00:04:53,530
All right.

68
00:04:53,530 --> 00:04:54,860
So now let's just run it.

69
00:04:55,070 --> 00:05:00,890
And as you can see, that not only you have got all the values right now or you can say that you have

70
00:05:00,890 --> 00:05:05,570
got an area of all the elements you have in this hash right over here.

71
00:05:05,570 --> 00:05:06,440
That is the C hash.

72
00:05:06,440 --> 00:05:10,070
You have separated all the elements, a hundred, B, two hundred and three hundred.

73
00:05:10,370 --> 00:05:15,740
And whatever you have got right here, here is basically the set of keys along with the values.

74
00:05:15,920 --> 00:05:21,450
That was basically also the syntax we have used in the previous tutorials as well.

75
00:05:21,830 --> 00:05:26,120
So this is basically what is going to get printed when you use the key right over here.

76
00:05:26,300 --> 00:05:31,700
Now, the third thing, what you can do over here is that you can use the value over here, which is

77
00:05:31,700 --> 00:05:34,680
basically the third way to use this, each function right over here.

78
00:05:34,700 --> 00:05:37,310
So what you can do is that you can just write and Cohill.

79
00:05:38,690 --> 00:05:44,300
You can you see it on the edge of a hill and what you have to do here is that you have to specify the

80
00:05:44,300 --> 00:05:50,190
value of a hill and you have to specify value here as well.

81
00:05:50,660 --> 00:05:57,500
So let's just get in the mud so that you can see completely the line right over here, run this.

82
00:05:57,830 --> 00:06:00,170
And it has generated the very same outcome.

83
00:06:00,170 --> 00:06:01,580
But now you must be thinking.

84
00:06:01,580 --> 00:06:02,150
Go ahead.

85
00:06:02,160 --> 00:06:04,550
And what was the difference between the previous one and this one?

86
00:06:04,550 --> 00:06:06,430
Because this is simply a variable.

87
00:06:06,440 --> 00:06:07,820
The compiler does not know that.

88
00:06:07,820 --> 00:06:13,970
We are actually referring to the value of this, be this or whatever are the values that are reference

89
00:06:13,970 --> 00:06:14,290
to this.

90
00:06:14,570 --> 00:06:16,860
We have specified in these hashes right over here.

91
00:06:17,180 --> 00:06:19,220
So they are the very same.

92
00:06:19,220 --> 00:06:23,120
But basically these are the two different ways you can use this.

93
00:06:23,120 --> 00:06:26,430
Each function, the first one is for the key and the second one is for the value.

94
00:06:26,570 --> 00:06:29,630
So basically the output is going to be the very same.

95
00:06:29,630 --> 00:06:33,500
It is going to be generated very, very, very same output, as you have noticed right over here as

96
00:06:33,500 --> 00:06:33,910
well.

97
00:06:34,280 --> 00:06:36,020
But since.

98
00:06:37,110 --> 00:06:41,070
There are certain variables that basically points to what is going on.

99
00:06:41,250 --> 00:06:44,910
So that's why for the key, it was doing it for the key and for the value.

100
00:06:44,910 --> 00:06:46,210
It is doing it for the value.

101
00:06:46,470 --> 00:06:49,830
So that's why the variables names are different.

102
00:06:49,830 --> 00:06:58,170
But they are doing the very same job as it did in the fall when we used the kill here and this valley

103
00:06:58,170 --> 00:06:58,770
right over here.

104
00:06:58,770 --> 00:07:01,630
We have specified it is doing the very, very same job.

105
00:07:01,860 --> 00:07:07,010
So that's how basically the each function can be used in three different ways in Ruby.

106
00:07:07,440 --> 00:07:10,630
So I hope you have understood all these three.

107
00:07:10,860 --> 00:07:14,790
So now moving on to the second part of the tutorial that deals with the take function.

108
00:07:14,790 --> 00:07:19,500
And as it told you, that this method finds the nested value, which is specified by the sequence of

109
00:07:19,500 --> 00:07:23,290
the key object by calling the dig at each step.

110
00:07:23,880 --> 00:07:26,600
So the syntax for that was hash tag.

111
00:07:26,620 --> 00:07:33,000
So we already have three hashes over here, A, B and C, but you have to do simply is that you can

112
00:07:33,000 --> 00:07:33,750
use.

113
00:07:35,040 --> 00:07:44,270
The big function on all three of these, one by one, so we will use it for different keys so far,

114
00:07:44,280 --> 00:07:49,920
let's say, for this hash will use it for this key, for this hash, we will use it for me and for this

115
00:07:49,920 --> 00:07:50,400
hash.

116
00:07:50,400 --> 00:07:52,710
See, we can use it for the key.

117
00:07:52,950 --> 00:07:55,410
So let's try this right input's.

118
00:07:58,210 --> 00:08:08,230
Hash tag interpellation, and you can write an it or dig for now, we will just leave these brackets

119
00:08:08,230 --> 00:08:13,000
empty with them later and let's say for the second it is going to be hash B.

120
00:08:15,200 --> 00:08:23,270
They come into play on the deck and finally for the third one.

121
00:08:24,400 --> 00:08:26,260
How she digs.

122
00:08:29,390 --> 00:08:34,040
Some interpellation and you can write and see Dot Dego held.

123
00:08:36,280 --> 00:08:40,040
Just it and I guess that's good enough.

124
00:08:40,480 --> 00:08:44,110
Now, what you can do is that you don't specify the brackets, we miss them.

125
00:08:44,380 --> 00:08:48,190
So now let's say for the first one we wanted for the key.

126
00:08:48,520 --> 00:08:55,450
So we are going to write in column A if in the case you are using the previous index in which quotation

127
00:08:55,450 --> 00:08:57,550
mark has to enclose these guys over here.

128
00:08:57,880 --> 00:09:03,260
So for that index, you have to also write hash it enclosed in quotation marks over here.

129
00:09:03,280 --> 00:09:08,380
But in this case, since we are using this index for these simple columns over here so you can just

130
00:09:08,380 --> 00:09:13,930
write in a column, as you have also seen in the previous tutorial, and we were covering the key and

131
00:09:13,930 --> 00:09:20,080
the Haski function, it did not work when we specified in the quotation marks and by using this index.

132
00:09:20,080 --> 00:09:25,720
But when we were using this index, we use the key as this and then the GUI and the Haski function work

133
00:09:25,720 --> 00:09:27,090
and it returned to.

134
00:09:27,370 --> 00:09:31,960
So that's why when you are using this index, you have to use this column if you already know this.

135
00:09:32,290 --> 00:09:38,050
So for the first hash, we have used the first E column ÁLFHEIÐUR for the second list, use the second

136
00:09:38,050 --> 00:09:41,710
one, column B and for the third, let's use this turkey.

137
00:09:41,710 --> 00:09:42,880
That is column C.

138
00:09:44,220 --> 00:09:50,490
So let's just run this record, and as you can see, that IDEX from Hundert has been it from two hundred

139
00:09:50,490 --> 00:09:51,900
and hash seeded from three.

140
00:09:51,900 --> 00:09:57,390
And so basically the big function is a function that is used to extract the value or you can fetch the

141
00:09:57,390 --> 00:09:57,780
value.

142
00:09:57,780 --> 00:10:03,640
But this is a different way of fetching the value from the hash we have specified right at the top helm.

143
00:10:04,020 --> 00:10:05,310
So you can just change it.

144
00:10:05,320 --> 00:10:09,900
For example, you can just try and seal here and you can see that it has now fetch the value for see

145
00:10:10,080 --> 00:10:12,040
if you write in something that is not a part of it.

146
00:10:12,060 --> 00:10:17,190
For example, if I just write in deal here, Ronda's, you can see that it has just generated empty

147
00:10:17,190 --> 00:10:17,610
o'haire.

148
00:10:17,610 --> 00:10:22,980
It has not generated any kind of error, which it would have in case of fetch function, which was I

149
00:10:22,980 --> 00:10:24,660
guess, Genard form function.

150
00:10:24,870 --> 00:10:32,040
But in case of dig it did not get done any kind of error, but it returned nil value as a w that this

151
00:10:32,040 --> 00:10:37,260
finds the nested value which is specified by the sequence of the key object by calling dig at each step.

152
00:10:37,410 --> 00:10:39,360
So it is calling dig at each step.

153
00:10:39,360 --> 00:10:45,710
And for this certain key we have specified right over here that is calling the let's say so for this,

154
00:10:45,720 --> 00:10:50,670
it is going to generate Dignidad dig out the value and it is going to bring that out on your output

155
00:10:50,670 --> 00:10:53,660
screen and for a value that is not a part of it.

156
00:10:53,820 --> 00:10:57,150
It is going to keep digging till the end of this hash.

157
00:10:57,150 --> 00:11:02,990
Since it has three values, it is going to take its three values and after that it finds nothing.

158
00:11:03,000 --> 00:11:09,420
So it is going to return and it is going to and just print out an empty space rather than printing out

159
00:11:09,420 --> 00:11:14,090
or returning an error message, which it did in the case of fetch function.

160
00:11:15,180 --> 00:11:17,580
So that was it about these two functions.

161
00:11:17,580 --> 00:11:21,300
And I hope to use them in Ruby, so I hope you have understood them.

162
00:11:21,300 --> 00:11:23,100
So I guess that's to do with this tutorial as well.

163
00:11:23,110 --> 00:11:24,990
Thank you so much, guys, for watching.

164
00:11:25,170 --> 00:11:27,330
And I'll see you guys in the next tutorial.
