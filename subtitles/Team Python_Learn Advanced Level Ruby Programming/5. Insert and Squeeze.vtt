WEBVTT
1
00:00:00.390 --> 00:00:01.350
Hey, guys, what's up?

2
00:00:01.380 --> 00:00:06.330
This is a and I welcome you to another tutorial on this course on Ruby and in this tutorial, we are

3
00:00:06.330 --> 00:00:10.940
again going to be covering two functions that are the insert and squeeze function.

4
00:00:10.950 --> 00:00:15.810
So starting on with the first function we are going to be covering in this tutorial is the insert function.

5
00:00:16.170 --> 00:00:22.170
So insert is basically a string class method in Ruby, which is used to insert the specified string

6
00:00:22.170 --> 00:00:24.960
before the character at the given index.

7
00:00:24.960 --> 00:00:31.740
Modifying the given one negative indicates the count from the end of the string and a positive number

8
00:00:31.740 --> 00:00:39.180
indicates a from the start and insert the given string the position where you specify and it is going

9
00:00:39.180 --> 00:00:43.300
to add the specific character what you want to insert.

10
00:00:43.320 --> 00:00:49.170
So if you talk about the syntax of this function, well, it basically is string, not insert, and

11
00:00:49.170 --> 00:00:50.820
it accepts the argument.

12
00:00:50.820 --> 00:00:55.020
The first one is the index were index can be positive or negative.

13
00:00:55.020 --> 00:01:01.770
If you have a positive number in place of this first argument, then it is going to start counting from

14
00:01:01.770 --> 00:01:02.970
the start.

15
00:01:03.270 --> 00:01:09.720
And if you have a negative number as a first argument, then it is going to start counting from the

16
00:01:09.720 --> 00:01:10.670
end of the string.

17
00:01:11.190 --> 00:01:18.210
Then the second argument is basically the string, which is going to be placed at the index, which

18
00:01:18.210 --> 00:01:20.810
you have specified in the first argument.

19
00:01:21.150 --> 00:01:27.090
So it can be a single string, single character, it can be double characters, it can be three characters,

20
00:01:27.090 --> 00:01:33.150
or it can be any number of characters you want to insert at the index, which is going to be specified

21
00:01:33.480 --> 00:01:34.920
as the first argument.

22
00:01:35.460 --> 00:01:38.940
Then comes the second method we are going to be covering in this tutorial.

23
00:01:38.940 --> 00:01:47.070
That is this squeeze method using the squeeze method runs of duplicate characters may be removed from

24
00:01:47.070 --> 00:01:48.040
a specific string.

25
00:01:48.330 --> 00:01:55.470
Now, if you specify a barometer, then only those characters will be squeezed for which you have specified

26
00:01:55.470 --> 00:01:56.490
the index.

27
00:01:56.490 --> 00:02:02.070
Or you may say the letters are if no barometer is specified, then it is going to squeeze the entire

28
00:02:02.070 --> 00:02:05.650
string and remove the entire duplication of characters from that string.

29
00:02:06.150 --> 00:02:09.960
So if you talk about the syntax of this, it is something like string that squeeze.

30
00:02:09.960 --> 00:02:11.130
The parameters are optional.

31
00:02:11.280 --> 00:02:16.950
Here we are going to see how they are going to be specified in the examples.

32
00:02:17.220 --> 00:02:19.260
So we'll just move on to our.

33
00:02:20.780 --> 00:02:26.660
Editor Adam Oakhill, so let's start on with the first method that is the insert method.

34
00:02:26.660 --> 00:02:28.910
So for that we need strength.

35
00:02:28.910 --> 00:02:31.130
So let's say we have a string.

36
00:02:32.300 --> 00:02:33.560
Let's say Ruby.

37
00:02:36.140 --> 00:02:37.910
That's a real bizarre string, though, here.

38
00:02:38.180 --> 00:02:44.340
Now, what we want is that we want to let's say let's say I have just missed this are from here now.

39
00:02:44.360 --> 00:02:46.980
What I want is that I want to insert this Arawa here.

40
00:02:47.420 --> 00:02:52.670
So what I'm going to do is that I'm going to write and put it first, check it, and you can see that

41
00:02:52.670 --> 00:02:54.740
you got you buy you Biswal.

42
00:02:55.750 --> 00:03:00.100
Out on here, what I'm going to do is I'm going to write in a.

43
00:03:01.220 --> 00:03:05.380
Dodd insert and insert basically accepts the argument.

44
00:03:05.720 --> 00:03:11.030
I want to insert capital R right to a here, which is the zeroth position.

45
00:03:11.150 --> 00:03:12.860
So I'm going to write in the index.

46
00:03:12.860 --> 00:03:18.710
That is the zero position and at the zero position I want to insert capital R, so if I just run the

47
00:03:18.710 --> 00:03:25.250
score, you can see that the second output that is printed right over here is are you bad r has been

48
00:03:25.250 --> 00:03:27.040
inserted at the very start.

49
00:03:27.440 --> 00:03:31.100
If you want to, let's say insert multiple characters, let's say for.

50
00:03:32.330 --> 00:03:37.250
Instance, you have missed the are you so you can just write in, are you over here on this score and

51
00:03:37.250 --> 00:03:38.360
you still have this?

52
00:03:38.570 --> 00:03:43.640
Are you beavered and you can see at the top you have got Beeber are you is missing from here.

53
00:03:45.170 --> 00:03:51.200
Then you can also insert negative characters, for example, let's say you have are you V?

54
00:03:53.180 --> 00:03:59.510
Let's say you have just missed this B from here, so now, since this is a very simple word and you

55
00:03:59.510 --> 00:04:04.550
can simply count zero one two, but let's see if it is a very lengthy character.

56
00:04:04.700 --> 00:04:08.290
And let's say you have to insert something right over here.

57
00:04:08.690 --> 00:04:12.450
So if you start counting, so since you have to specify some index over here.

58
00:04:12.710 --> 00:04:19.110
So if you start counting from this side, then it is going to take a lot of time to count and to see,

59
00:04:19.130 --> 00:04:23.340
which is basically this index where you have to insert a B over here.

60
00:04:23.690 --> 00:04:28.750
So instead of that, what is simple over here, that you can just start counting from here.

61
00:04:28.760 --> 00:04:34.580
So you can just say this is the zero and this is the one location from the back side where I want to

62
00:04:34.580 --> 00:04:37.400
insert a B so you can just write in minus one.

63
00:04:38.800 --> 00:04:45.130
And you can just write in VEO Hill, so if I just run this code, you can see that you have got are

64
00:04:45.130 --> 00:04:46.900
you by Blackhill.

65
00:04:47.320 --> 00:04:47.790
All right.

66
00:04:47.800 --> 00:04:49.810
So it says minus one.

67
00:04:49.820 --> 00:04:55.420
So I guess we have to specify minus two because from the backward side this is minus one.

68
00:04:55.420 --> 00:05:01.990
And this position we want to insert B is basically minus one because you don't have any kind of minus

69
00:05:01.990 --> 00:05:02.460
zero.

70
00:05:02.770 --> 00:05:04.450
So just run it.

71
00:05:04.450 --> 00:05:09.990
And now you can see that you have got are you B by because you are familiar with the numbers.

72
00:05:10.000 --> 00:05:13.330
It starts on from zero and then it is plus minus.

73
00:05:14.790 --> 00:05:21.120
Minus one and then a plus, minus two, because with zero, you don't have the plus minus.

74
00:05:21.150 --> 00:05:25.970
So from the Beckwith's side, when you start counting, you have to start counting from minus one.

75
00:05:25.980 --> 00:05:29.730
Then it is minus two, minus three, minus four and so on till this character.

76
00:05:29.730 --> 00:05:34.090
But from the start, it is going to be from the zero one to place.

77
00:05:34.500 --> 00:05:37.320
So that's why we have specified this minus two over here.

78
00:05:37.320 --> 00:05:41.940
When we specify minus one, you already have seen that B was inserted at the very first location.

79
00:05:43.140 --> 00:05:51.330
So that's how basically you can have characters added starting from the start of the string and also

80
00:05:51.330 --> 00:05:52.540
from the back of the string.

81
00:05:52.890 --> 00:05:58.440
So now moving on to the second part of this tutorial that deals with the squeeze function.

82
00:05:58.710 --> 00:06:03.640
And as I told you, that it is used to remove duplicate characters from a specific string.

83
00:06:03.990 --> 00:06:05.760
So let's say we have.

84
00:06:07.080 --> 00:06:07.830
Character.

85
00:06:09.880 --> 00:06:11.260
That is, let's say.

86
00:06:13.080 --> 00:06:17.100
And we just specify a triple D than SS has than equal.

87
00:06:17.760 --> 00:06:21.550
So if you have got a lot of repetition and duplication of characters over here.

88
00:06:21.840 --> 00:06:23.910
So if I just write in.

89
00:06:25.430 --> 00:06:31.830
It's a run scored, you can see that you have got the character, but if I just write in votes idot.

90
00:06:32.830 --> 00:06:39.550
Squeeze and I do not provide any kind of barometer as to this function, run the school, you can see

91
00:06:39.550 --> 00:06:46.390
that the duplication of characters is now or you can see that for these four days you have got only

92
00:06:46.390 --> 00:06:47.110
a single lead.

93
00:06:47.110 --> 00:06:49.840
And for the last you have got only a single test.

94
00:06:50.140 --> 00:06:55.330
And then for this you have got only a single air raid or here.

95
00:06:56.650 --> 00:07:04.690
So now, for example, you have a certain word that is had that has some kind of repetition of words

96
00:07:04.690 --> 00:07:10.600
in it, but you don't want every kind of duplication to just disappear, for example, in this very

97
00:07:10.600 --> 00:07:18.370
same world we have right here, for example, you just want the duplication of this deed to be, let's

98
00:07:18.370 --> 00:07:20.210
say, removed over here.

99
00:07:20.230 --> 00:07:25.150
So what you can just write in that you can just write and deal with here, run the score.

100
00:07:25.150 --> 00:07:27.850
And as you can see that you have got.

101
00:07:29.350 --> 00:07:34.540
Instead of these these you have got a single day and after that you have got this triple and then you've

102
00:07:34.540 --> 00:07:39.550
got this double level here, which means that the duplication for the travellers and the double has

103
00:07:39.550 --> 00:07:43.730
not been removed because now the squeeze function has only worked on this deal here.

104
00:07:43.990 --> 00:07:49.420
Similarly, if you just write an essay here, you can see that you have got four days in place of the

105
00:07:49.420 --> 00:07:55.950
four days, which was specified as an input and then in place of the three s, you have got only a single

106
00:07:55.960 --> 00:07:59.850
E right over here and then you have got the usual oakhill.

107
00:08:01.060 --> 00:08:07.990
So that's how the squeeze function can be used and it can be used with arguments and without arguments.

108
00:08:07.990 --> 00:08:11.850
If you use it without the arguments, it is going to squeeze the entire string.

109
00:08:11.860 --> 00:08:17.920
And if you use it with a parameter, then it is going to only squeeze the string for the specific character,

110
00:08:17.920 --> 00:08:19.670
which you have specified as a barometer.

111
00:08:20.050 --> 00:08:21.840
So I hope it is clear.

112
00:08:21.910 --> 00:08:23.740
So I guess that's it with this tutorial as well.

113
00:08:23.770 --> 00:08:27.550
Thank you so much for watching and I'll see you guys in the next tutorial.
