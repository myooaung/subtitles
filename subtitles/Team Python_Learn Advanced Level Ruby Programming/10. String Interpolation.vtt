WEBVTT
1
00:00:00.510 --> 00:00:01.770
Hey, guys, what's up?

2
00:00:01.800 --> 00:00:07.660
This was a marathon, and I welcome you to another tutorial here on this course on Ruby and Desideria.

3
00:00:07.680 --> 00:00:11.840
We are going to be covering a very interesting topic that is stirring interpellation.

4
00:00:12.300 --> 00:00:17.520
Now, before you understand a string interpellation, you need to know that.

5
00:00:18.480 --> 00:00:23.710
You can stick a string together by using the plus operator.

6
00:00:24.360 --> 00:00:26.530
Now, how this is going to be done.

7
00:00:26.700 --> 00:00:34.880
So let me just show you a quick example of how you can stick strings together by using the plus operator

8
00:00:34.890 --> 00:00:41.490
before we go on to the string interpolation topic, because that is very necessary to understand here.

9
00:00:41.530 --> 00:00:43.350
So just want to add more here.

10
00:00:44.820 --> 00:00:49.440
And what we will do is that we will say to specify a variable that is name.

11
00:00:49.470 --> 00:00:52.590
We will make it equal to, let's say, a world.

12
00:00:54.420 --> 00:00:57.540
And then what we are going to do is we are going to use sports.

13
00:00:58.900 --> 00:01:00.940
We are going to specify hello.

14
00:01:04.420 --> 00:01:06.460
Let's come over here as well.

15
00:01:06.490 --> 00:01:08.780
Then we are going to use the blast operator.

16
00:01:08.800 --> 00:01:16.990
We are going to specify name which stores this will do a hill, a space, then a plus sign a game.

17
00:01:17.910 --> 00:01:24.290
Then the petition marks and then an exclamation marks, which means that it is going to print hello

18
00:01:24.330 --> 00:01:27.000
a then it is going to.

19
00:01:28.270 --> 00:01:33.780
Use this name, which is wild, and add this with this hello, and then it is also going to add this

20
00:01:33.790 --> 00:01:34.740
exclamation mark.

21
00:01:35.110 --> 00:01:38.770
So if I just run this code, you're going to see that we have.

22
00:01:38.770 --> 00:01:39.210
Hello.

23
00:01:39.220 --> 00:01:40.370
Come over here.

24
00:01:40.690 --> 00:01:46.050
So to make it look a bit more good, let's just add a special here or run it again.

25
00:01:46.270 --> 00:01:48.610
And as you can see, that it looks much better now.

26
00:01:48.640 --> 00:01:49.100
Hello.

27
00:01:49.120 --> 00:01:51.650
Would always just remove this comment from here as well.

28
00:01:52.540 --> 00:01:55.670
Run this again and have a word and an exclamation mark.

29
00:01:55.780 --> 00:01:56.350
Perfect.

30
00:01:57.270 --> 00:02:02.820
Now, gluing strings together like this works and you can always do it.

31
00:02:03.840 --> 00:02:10.380
But there is another method of accomplishing the very same thing which you have done right now, and

32
00:02:10.620 --> 00:02:17.100
that method is basically widely used and usually it is preffered work and captivating strings with this

33
00:02:17.100 --> 00:02:17.910
plus operator.

34
00:02:18.180 --> 00:02:23.940
Now, that method is basically called the string interpolation and how it works.

35
00:02:24.210 --> 00:02:27.580
You have to just add certain lines or help.

36
00:02:27.930 --> 00:02:33.690
Now, this line over here is going to be the very same that is name equal to what we are going to be

37
00:02:33.690 --> 00:02:34.890
using this.

38
00:02:34.890 --> 00:02:35.360
Hello.

39
00:02:35.700 --> 00:02:39.230
And we are going to just remove this stuff from here.

40
00:02:39.390 --> 00:02:45.590
And in the very same exclamation mark, what we are going to do is that we are going to specify a hashtag.

41
00:02:45.900 --> 00:02:52.620
And when you specify a hash tag between the quotation marks, these brackets are going to be generated

42
00:02:52.620 --> 00:02:59.100
by default, not, as you can see, if outside the brackets, the quotation marks, I just specify a

43
00:02:59.100 --> 00:03:05.340
hash tag, then you know that this hash tag is basically going to be used for comments and we have to

44
00:03:05.340 --> 00:03:06.720
specify commenced using that.

45
00:03:06.720 --> 00:03:12.110
And basically that is what is basically not considered by the editorial.

46
00:03:12.960 --> 00:03:19.950
But in this, a double quotation marks, when I specify this hashtag, you saw that these two brackets

47
00:03:19.960 --> 00:03:23.370
were generated automatically by the editor.

48
00:03:23.640 --> 00:03:27.180
Now, what you can do is that whatever you want to can get engaged with this.

49
00:03:27.190 --> 00:03:27.540
Hello.

50
00:03:27.540 --> 00:03:34.380
You can just specify to where I want to concatenate the name over here and lets it on to specify an

51
00:03:34.380 --> 00:03:36.090
exclamation mark.

52
00:03:36.090 --> 00:03:43.650
Wilhelm So that exclamation mark is basically going to be treated as a part of this quotation mark.

53
00:03:43.920 --> 00:03:48.390
And this name is basically what is called string interpolation.

54
00:03:48.390 --> 00:03:53.920
And name is going to be basically concatenated with this hello and this exclamation mark.

55
00:03:53.940 --> 00:04:01.890
And so if I just press all our hair, you can see that hello world has been printed in the very same

56
00:04:01.890 --> 00:04:04.830
way which we done using the operator.

57
00:04:05.930 --> 00:04:13.670
So by using this syntax, everything between the opening that was hashtag and this curly brackets opening

58
00:04:13.970 --> 00:04:21.620
and the closing, that was this curly brackets, because it is evaluated as a ruby chord and the result

59
00:04:21.620 --> 00:04:26.110
of this evaluation will be embedded into the string that is surrounding it.

60
00:04:26.120 --> 00:04:29.510
And in this case, the surrounding string is this.

61
00:04:29.510 --> 00:04:29.840
Hello.

62
00:04:29.860 --> 00:04:31.730
And this exclamation mark or.

63
00:04:32.330 --> 00:04:41.180
In other words, when Ruby finds this hashtag and this name thing or here in the string, then it will

64
00:04:41.180 --> 00:04:45.560
evaluate the piece of code that is the Ruby code, that is name.

65
00:04:45.560 --> 00:04:50.020
It finds that this is a variable which is declared right at the top here.

66
00:04:50.030 --> 00:04:55.280
So it returns the value of the variable, which is the string void in this case.

67
00:04:55.280 --> 00:04:58.280
So it embeds it into the string.

68
00:04:58.520 --> 00:05:07.040
Hello, by replacing this thing with this tangle head, that is basically this variable over here that

69
00:05:07.040 --> 00:05:07.700
is named.

70
00:05:08.720 --> 00:05:14.150
Now, we can also finally explain the difference between strings created with single and double goals,

71
00:05:14.330 --> 00:05:18.770
now string interpolation only work with double chords.

72
00:05:19.430 --> 00:05:20.540
Now, what does that mean?

73
00:05:20.570 --> 00:05:23.290
Let me just give you a quick example for this as well.

74
00:05:24.170 --> 00:05:26.330
So let's just simply remove this from here.

75
00:05:26.480 --> 00:05:34.460
And I will just write in votes and I will just specify that very specific line that is interpolation.

76
00:05:35.880 --> 00:05:36.720
Works.

77
00:05:37.880 --> 00:05:38.540
With.

78
00:05:39.680 --> 00:05:40.370
Double.

79
00:05:41.850 --> 00:05:43.200
Caudate strength's.

80
00:05:45.620 --> 00:05:51.800
Now, down here, what I'm going to do is that I'm going to specify votes or let's just specify it right

81
00:05:51.800 --> 00:05:53.570
at the top between the strings.

82
00:05:53.720 --> 00:06:02.450
So I'll just specify here hashtag and I will just specify a one plus two will help.

83
00:06:03.830 --> 00:06:09.620
Now, what I will do is that I will specify one more line of a hill and then you can just notice the

84
00:06:09.620 --> 00:06:10.880
difference for yourself.

85
00:06:12.020 --> 00:06:14.330
We are going to specify interpellation.

86
00:06:17.910 --> 00:06:20.580
Does not work with.

87
00:06:21.930 --> 00:06:22.710
Single.

88
00:06:25.010 --> 00:06:25.700
Gob's.

89
00:06:27.240 --> 00:06:32.070
Specify a column or hashtag, specify one plus two.

90
00:06:32.640 --> 00:06:39.060
So now if I just run this code, you are going to see the difference that how interpellation works with

91
00:06:39.060 --> 00:06:42.750
double coded strings, but not with a single condition, single digit strings.

92
00:06:43.380 --> 00:06:47.950
We have to just specify single quotes over here, not double quotes.

93
00:06:47.950 --> 00:06:50.670
So just replace them with single quotes.

94
00:06:51.210 --> 00:06:52.860
So I guess that's perfect.

95
00:06:52.870 --> 00:06:57.520
Now, I guess you can see the difference with the colors over here as well.

96
00:06:57.540 --> 00:06:59.700
But let me just run this code and then I'll show you.

97
00:07:00.060 --> 00:07:02.940
Now, as you can see that it says interpellation works with double codes.

98
00:07:02.940 --> 00:07:09.000
And as you can see that since interpellation works with double coded strings, that's why it treated

99
00:07:09.000 --> 00:07:13.620
it as an expression of something that has to be added.

100
00:07:13.620 --> 00:07:16.740
So it added those numbers and has given me some.

101
00:07:17.180 --> 00:07:20.610
That is three but four single coded string.

102
00:07:20.610 --> 00:07:23.880
As I told you, that interpolation does not work with single codes.

103
00:07:23.880 --> 00:07:30.540
That why that was what this was also treated as a part of the string and was printed as it is on the

104
00:07:30.540 --> 00:07:32.760
output screen, as you can see, Ohayon.

105
00:07:33.830 --> 00:07:34.250
So.

106
00:07:35.640 --> 00:07:40.890
If you are using the double quotation strings, that interpellation is a very important concept and

107
00:07:40.890 --> 00:07:42.110
it is going to help you a lot.

108
00:07:42.990 --> 00:07:51.510
So if you type the code above in your editor and the syntax highlighting for the Ruby code is used,

109
00:07:51.690 --> 00:07:54.660
it should highlight the code in the double coded string.

110
00:07:54.670 --> 00:08:01.380
So it give you a visual clue about the interpolation, as you can see, with the red and the green color.

111
00:08:01.800 --> 00:08:08.500
So now the question is that why do people prefer the string interpolation, first of all?

112
00:08:08.940 --> 00:08:13.380
Again, it's slightly fewer letters to type in our example.

113
00:08:13.380 --> 00:08:16.530
That's just a very small example.

114
00:08:16.540 --> 00:08:17.110
No big deal.

115
00:08:17.140 --> 00:08:23.310
However, consider a very long string which is constructed using, let's say, three, four or more

116
00:08:23.310 --> 00:08:24.260
rate variables.

117
00:08:24.330 --> 00:08:32.700
Not this extra space quickly adds up and thinks one would not nice fit fit nicely on a single line anymore.

118
00:08:33.150 --> 00:08:38.100
Also, many people find that the syntax reads a bit better.

119
00:08:38.310 --> 00:08:44.790
There is a little bit less cholesterol, making it a little bit easier to see what's going on in your

120
00:08:44.790 --> 00:08:45.090
code.

121
00:08:45.480 --> 00:08:53.850
One other would be a pretty negligible reason is that string interpolation actually uses very less resources.

122
00:08:54.840 --> 00:09:00.750
For example, in your previous court, let me just press control, is that sometimes.

123
00:09:01.900 --> 00:09:07.720
And there's just shoestring interpellation of a hill that was hallow than a hashtag.

124
00:09:10.230 --> 00:09:15.090
Name and then the exclamation mark for him now in this school that we're here.

125
00:09:15.480 --> 00:09:18.900
That was hello, hash tag name.

126
00:09:18.900 --> 00:09:20.430
That is this bottle here.

127
00:09:21.950 --> 00:09:29.810
It creates one single new string object and then embeds the existing string that was called into it.

128
00:09:30.050 --> 00:09:37.220
Now the code hello plus name plus that was used by concatenating strings using the plus.

129
00:09:38.610 --> 00:09:40.990
It creates three new string objects.

130
00:09:41.010 --> 00:09:44.640
First, it creates the string that was the exclamation mark.

131
00:09:44.670 --> 00:09:51.480
Then it passes it to the method last on the existing string that was void.

132
00:09:51.780 --> 00:09:56.490
The operator plus returns a new string, which now is well.

133
00:09:56.910 --> 00:10:02.550
Now, this string is passed to the method plus on hello, which again creates a new string.

134
00:10:03.000 --> 00:10:04.150
Hello World.

135
00:10:04.320 --> 00:10:09.710
So basically that was a long process going on using a lot of resources.

136
00:10:09.720 --> 00:10:12.360
So what string interpolation does?

137
00:10:12.360 --> 00:10:15.660
It is actually reduces the number of resources being used.

138
00:10:15.900 --> 00:10:19.590
String and imagination creates two more string objects.

139
00:10:19.590 --> 00:10:25.890
Even in our very simple example, these intermediate objects are immediately going to be discarded because

140
00:10:25.890 --> 00:10:27.080
they are not used anymore.

141
00:10:27.450 --> 00:10:30.360
We are only interested in the final result, that is.

142
00:10:30.360 --> 00:10:30.860
Hello.

143
00:10:30.900 --> 00:10:35.310
Well, in our case, if I just press on or you can see how the world of a hill.

144
00:10:36.670 --> 00:10:45.730
So we recommend you that you get used to be using string interpolation just because this is what most

145
00:10:45.730 --> 00:10:52.990
developers use, your job is going to be done using the other method as well, which was when I just

146
00:10:53.350 --> 00:11:00.820
write in votes and then you have to specify hello, then you have to specify this class operator, then

147
00:11:00.820 --> 00:11:04.090
you have to specify name, then you have to specify as operator.

148
00:11:04.090 --> 00:11:07.340
Then you have to specify caller, and then you specify this exclamation mark.

149
00:11:07.690 --> 00:11:12.640
So your work can be done using this second method as well.

150
00:11:13.030 --> 00:11:19.120
But string interpolation is, as they told you, that is what most developers use, so you must get

151
00:11:19.120 --> 00:11:19.600
used to it.

152
00:11:20.170 --> 00:11:24.900
So this is a very interesting concept, not that difficult.

153
00:11:25.570 --> 00:11:31.540
You need to understand what is going on basically with this thing only, and then you will be able to

154
00:11:31.540 --> 00:11:36.120
understand what a string interpolation, actually, and then you will also be able to understand that

155
00:11:36.130 --> 00:11:43.300
what is the advantage of using this method or this method and how this method uses less resources as

156
00:11:43.300 --> 00:11:50.080
compared to this, as this creates three new string objects and this basically discard everything when

157
00:11:50.080 --> 00:11:52.600
it is not in use, when the output is printed.

158
00:11:52.600 --> 00:11:54.120
That is Halad in our case.

159
00:11:55.030 --> 00:12:02.320
So I guess you have understood what a string interpolation, why it is useful, how is better as compared

160
00:12:02.320 --> 00:12:05.580
to normal concatenation using the press operator.

161
00:12:05.860 --> 00:12:07.780
So I guess that's it with this tutorial as well.

162
00:12:08.880 --> 00:12:14.370
Thank you so much, guys, for watching and I will see you guys in the next tutorial.
