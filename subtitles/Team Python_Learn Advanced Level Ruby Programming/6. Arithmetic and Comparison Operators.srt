1
00:00:00,520 --> 00:00:01,630
Hey, guys, what's up?

2
00:00:01,660 --> 00:00:06,730
This is American, and I welcome you to another tutorial on this course on Ruby.

3
00:00:06,910 --> 00:00:14,020
And in this story, we are going to start on with the introduction of every kind of operator we have

4
00:00:14,020 --> 00:00:14,760
in Ruby.

5
00:00:15,070 --> 00:00:19,900
Now, the first kind of operators we have in Ruby are the Artomatic operators.

6
00:00:20,090 --> 00:00:26,250
Now, you've already covered arithmetic operators in the previous section, so I won't go into the detail.

7
00:00:26,260 --> 00:00:32,260
I will just give you a quick recap of what our Artomatic operators in here will be.

8
00:00:32,650 --> 00:00:37,870
So there are basically, I guess, one, two, three, four, five, six kind of Artomatic operators

9
00:00:37,870 --> 00:00:39,840
in Ruby starting on with last.

10
00:00:39,850 --> 00:00:44,890
That stands for additions and it add the values on either side of the operator.

11
00:00:44,890 --> 00:00:50,620
Then we have the minus that is used for a subtraction and it subtracts the right hand upper end from

12
00:00:50,620 --> 00:00:51,810
the left hand operand.

13
00:00:51,810 --> 00:00:58,810
And then we have the starick that stands for multiplication and it multiplies values on either side

14
00:00:58,810 --> 00:00:59,700
of the operator.

15
00:00:59,860 --> 00:01:06,400
Then we have this backslash that stands for division and it divides the left hand operand by the right

16
00:01:06,400 --> 00:01:07,150
hand option.

17
00:01:07,460 --> 00:01:14,920
Then we have this person did sign that is used for the modulus here and it divides the left hand operand

18
00:01:14,920 --> 00:01:18,600
by the right hand operand and returns the remainder to us.

19
00:01:18,610 --> 00:01:25,000
Then we have this double starick that stands for Exponent and it performs the exponential.

20
00:01:25,210 --> 00:01:28,690
Ah, you must say the power calculation on any kind of operator.

21
00:01:30,210 --> 00:01:39,420
So moving to the second operator, that is the comparison operator, so there is an operator, start

22
00:01:39,480 --> 00:01:45,660
on with the two signs, what checks if the value of two operands are equal or not?

23
00:01:46,080 --> 00:01:47,730
If yes, the condition.

24
00:01:47,730 --> 00:01:48,870
Right, Don Strew.

25
00:01:48,870 --> 00:01:56,130
And if not, it returns false, then we have this exclamation mark equal to that standard for not equal

26
00:01:56,130 --> 00:01:56,310
to.

27
00:01:56,310 --> 00:02:00,750
And it checks if the value of two options are equal or not.

28
00:02:00,990 --> 00:02:04,050
If values are not equal, then the condition becomes true.

29
00:02:04,080 --> 00:02:10,440
So it is basically opposite of what is going on with the first operator that is equal to the next operator

30
00:02:10,440 --> 00:02:16,740
is the greater than sign and it checks if the value of left print is greater than the value of the right

31
00:02:16,740 --> 00:02:17,340
of Brent.

32
00:02:17,340 --> 00:02:22,950
If yes, then the condition becomes true, then we have the less than sign with checks of the value

33
00:02:22,950 --> 00:02:26,940
of the left or print is less than the value of the right to operate.

34
00:02:27,210 --> 00:02:33,870
If yes, than the condition becomes true, then we have the greater than equal to that checks if the

35
00:02:33,870 --> 00:02:40,360
value of the left or print is greater than or equal to the value of the right operand.

36
00:02:40,590 --> 00:02:46,090
And if yes, the condition returns true and if not, the condition returns false.

37
00:02:46,890 --> 00:02:49,890
Now these are some of more comparison operators.

38
00:02:50,190 --> 00:02:57,960
We have the less than equal to sign what checks if the value of the left or print is less than or equal

39
00:02:57,960 --> 00:03:00,050
to the value of the right to operate.

40
00:03:00,060 --> 00:03:07,740
If, yes, the condition returns true, then we have this less than an equal due and greater than sine.

41
00:03:08,010 --> 00:03:14,120
So you can say that basically equal to sign is encapsulated in greater than less than science.

42
00:03:14,460 --> 00:03:22,380
So it is called the combined comparison operator and it returns zero if the first operand equals second

43
00:03:22,770 --> 00:03:29,280
one, if the first operand is greater than the second and minus one if the first operand is less than

44
00:03:29,280 --> 00:03:29,730
the second.

45
00:03:29,760 --> 00:03:33,300
So it is basically a combination of this.

46
00:03:34,390 --> 00:03:40,210
Less than equal to and on the previous slide, the greater than equal to operator, then we have the

47
00:03:40,210 --> 00:03:47,400
triple equal operator that is used to test equality within our when clause of a case statement.

48
00:03:47,560 --> 00:03:53,140
And this thing is basically going to be a part of the future tutorial when we will be covering about

49
00:03:53,290 --> 00:03:54,460
the case statement.

50
00:03:54,880 --> 00:03:59,680
Then we have the dot edu el questionmark that returns.

51
00:03:59,680 --> 00:04:07,240
True, if the receiver and argument have both the same type and equal values, then we have the equal

52
00:04:07,510 --> 00:04:15,430
question mark that returns true if the receiver and argument have the same object idee.

53
00:04:17,180 --> 00:04:24,530
So now let's discover some quick examples that are related to the comparison operator, because we have

54
00:04:24,530 --> 00:04:30,740
already covered examples on Artomatic operators in the previous tutorial, so we won't waste any kind

55
00:04:30,740 --> 00:04:31,580
of time on that.

56
00:04:31,880 --> 00:04:33,950
So let's move on to Adam.

57
00:04:35,190 --> 00:04:42,060
All right, so we will start on from the very first that is this equal to equal to operate or we have

58
00:04:42,060 --> 00:04:44,400
already covered it in the previous tutorial as well.

59
00:04:44,410 --> 00:04:46,430
So let's have one more example.

60
00:04:46,710 --> 00:04:51,610
So we are going to write it supports five equal equal to, let's say six.

61
00:04:52,050 --> 00:04:54,860
So as you can see, that it is not true.

62
00:04:55,260 --> 00:04:58,860
So if you just run the score, you can see that it has generated false.

63
00:04:58,860 --> 00:05:03,840
And if you write in something that is equal to this, run the score that is going to return.

64
00:05:03,840 --> 00:05:06,570
True, then you have this not equal to.

65
00:05:06,570 --> 00:05:12,340
And as in the description, you can see that it is very opposite of this equal to equal do.

66
00:05:12,720 --> 00:05:20,340
So if you just want to add and use the exclamation mark over here and now run this code, you can see

67
00:05:20,340 --> 00:05:28,380
that it has generated false because they are both not equal and not this not equal to is going to return

68
00:05:28,380 --> 00:05:30,150
true if they are not equal.

69
00:05:30,180 --> 00:05:35,940
So if you just write in a condition where five and six are not equal run underscored, now it is going

70
00:05:35,940 --> 00:05:38,090
to return true for you.

71
00:05:38,490 --> 00:05:42,010
Then we have this greater then and then this less than operator.

72
00:05:42,330 --> 00:05:48,900
So if you go on to Adam and see if five is greater than six, then as you can see that this condition

73
00:05:48,900 --> 00:05:49,600
is not true.

74
00:05:49,860 --> 00:05:52,820
So if you just run this court, it is going to return false.

75
00:05:52,830 --> 00:05:57,900
Then if you use the other side that was less than run this code, it is going to return.

76
00:05:57,900 --> 00:06:02,910
True, because now six is greater than five, which is the left operant in this case.

77
00:06:03,480 --> 00:06:06,400
Then you have the less than or equal to operator.

78
00:06:06,690 --> 00:06:15,240
So, for example, if any of the condition is met, either if it is less than this are either five is

79
00:06:15,240 --> 00:06:19,080
equal to the third check for these multiple conditions.

80
00:06:19,350 --> 00:06:21,840
So if you just run this code, this is going to return.

81
00:06:21,840 --> 00:06:28,050
True, because five is not less then, but it is equal to this statement.

82
00:06:28,050 --> 00:06:28,580
Ohayon.

83
00:06:28,950 --> 00:06:34,590
So if you just type in, let's say, six or hill or underscored, you can see that again, it has returned

84
00:06:34,590 --> 00:06:41,840
to now five is not equal to six, but five is less than the six.

85
00:06:41,970 --> 00:06:44,280
So if both the conditions are false.

86
00:06:45,400 --> 00:06:48,050
For example, if I just put a greater than sign here.

87
00:06:48,790 --> 00:06:54,850
Now, as you can see that both conditions are false, five is not greater than six and five is not equal

88
00:06:54,850 --> 00:06:55,270
to six.

89
00:06:55,290 --> 00:07:00,640
So if you just run the score that you can see that false is generated on your atama and there and same

90
00:07:00,640 --> 00:07:04,300
goes for the other one that was greater than now in this condition.

91
00:07:04,310 --> 00:07:06,170
You can see that this statement is true.

92
00:07:06,490 --> 00:07:10,540
So if you just run, the score through is going to be generated on the output screen.

93
00:07:11,910 --> 00:07:16,450
Now moving to the next now you have already covered this.

94
00:07:16,740 --> 00:07:18,050
So now let's talk about this.

95
00:07:18,060 --> 00:07:23,700
This is a very interesting operator, or as you can see that it says it is called the combined comparison

96
00:07:23,700 --> 00:07:29,670
operator, and it returns a zero if the first operand equals second.

97
00:07:30,180 --> 00:07:32,610
Now, let's just check for this condition.

98
00:07:33,120 --> 00:07:38,070
So let's just make this make it equal, run this code.

99
00:07:38,190 --> 00:07:43,470
And as you can see, that zero has been generated on your Adam there because it says that if left,

100
00:07:43,470 --> 00:07:47,130
operand is equal to the right to operate, then it is going to return zero.

101
00:07:48,290 --> 00:07:56,000
The second condition says that it is going to return one if the first operand is greater than the second

102
00:07:56,010 --> 00:08:00,080
operand and minus one if the first operand is less than the second.

103
00:08:00,680 --> 00:08:09,010
So in our case, if you just type in six Oakhill as can see that this condition is basically true.

104
00:08:09,440 --> 00:08:12,680
So if you just run the score, it is going to return one.

105
00:08:12,920 --> 00:08:16,280
And if this option is greater than this option.

106
00:08:16,310 --> 00:08:21,260
So, for example, if I just type in someone over here, run the score, then it is going to get done

107
00:08:21,440 --> 00:08:24,080
minus one on my output screen.

108
00:08:24,200 --> 00:08:27,110
So that's why it is called the combined comparison operator.

109
00:08:27,110 --> 00:08:34,370
And you can check all the three conditions less then agreed to then and the equal to with this combined

110
00:08:34,370 --> 00:08:35,540
comparison operator.

111
00:08:36,050 --> 00:08:41,630
Then we have this triple two equal to that we will be using in the future tutorial when we will be discussing

112
00:08:41,630 --> 00:08:42,560
the case statement.

113
00:08:43,040 --> 00:08:49,580
Then we have this dot equal question mark that return true if the receiver and the argument have both

114
00:08:49,580 --> 00:08:52,030
the same type and equal values.

115
00:08:52,640 --> 00:08:54,860
So now let's just check it.

116
00:08:57,280 --> 00:09:08,080
So we are going to write in six dot e q o questionmark and we will put six, so if you just run code,

117
00:09:08,080 --> 00:09:09,160
it is going to return.

118
00:09:09,160 --> 00:09:15,370
True, because both these six are equal and they are all the same.

119
00:09:15,370 --> 00:09:16,120
A data type.

120
00:09:16,120 --> 00:09:22,060
If you just write in six point zero over here or underscored, you can see that false has been generated

121
00:09:22,060 --> 00:09:26,200
since both these are if you apparently look at them, they are true.

122
00:09:26,500 --> 00:09:32,980
But since this does not equal two conditions, says that it has to be equal in number and also in the

123
00:09:32,980 --> 00:09:38,870
data that now this statement over here add returned false because they are not of the same data type.

124
00:09:38,890 --> 00:09:42,580
This is an integer and this is a flawed value.

125
00:09:43,150 --> 00:09:49,390
Now, finally, we have this equal question mark operator and it returns true if the receiver and argument

126
00:09:49,390 --> 00:09:56,270
have the same object, i.e. now in the previous tutorial, you know how to calculate the object idea

127
00:09:56,290 --> 00:09:57,370
for a certain number.

128
00:09:57,520 --> 00:10:03,270
You have to multiply that number with two and then you have to add one in to it.

129
00:10:03,550 --> 00:10:06,730
So if you go on to Atem.

130
00:10:07,670 --> 00:10:15,470
And now all of us remember that two elements are going to have the same object if they are the same

131
00:10:15,470 --> 00:10:20,870
number, because if you use any kind of other number, if they are multiplied by two and one is added

132
00:10:20,870 --> 00:10:23,880
to them, it is going to return a different kind of result.

133
00:10:24,140 --> 00:10:26,020
So the same number.

134
00:10:26,390 --> 00:10:28,070
So if you write an you.

135
00:10:29,170 --> 00:10:37,570
You, Eleanor Hill, and that is going to be the very same, just run the score and Drew is going to

136
00:10:37,570 --> 00:10:38,140
be generated.

137
00:10:38,140 --> 00:10:43,420
If you just write in over here or underscore that is going to return false, because if you just look

138
00:10:43,420 --> 00:10:47,070
at them, six is going to be multiplied by two, which makes it equal to twelve.

139
00:10:47,080 --> 00:10:48,790
One is going to be added to them.

140
00:10:48,800 --> 00:10:52,240
So that makes this O'Haire 13.

141
00:10:53,820 --> 00:11:00,600
So this is going to be 13 and this is going to be multiplied to 14 and one is going to be added to them,

142
00:11:00,600 --> 00:11:02,350
which means that it is going to be 15.

143
00:11:02,370 --> 00:11:05,110
So the object is here are not equal.

144
00:11:05,370 --> 00:11:10,000
That's why it has returned false on the atom runner.

145
00:11:10,350 --> 00:11:12,880
So that's the end of this.

146
00:11:12,900 --> 00:11:15,150
We have covered all of our operators.

147
00:11:15,150 --> 00:11:16,850
We have covered examples of each.

148
00:11:17,640 --> 00:11:20,310
So I guess that's it with this tutorial.

149
00:11:20,700 --> 00:11:22,470
Thank you so much, guys, for watching.

150
00:11:22,470 --> 00:11:25,100
And I'll see you guys in the next story a little bit.

151
00:11:25,140 --> 00:11:29,210
We will be covering some more on operators in Aruba.
