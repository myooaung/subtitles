WEBVTT
1
00:00:00.300 --> 00:00:01.320
Hey, guys, what's up?

2
00:00:01.350 --> 00:00:05.850
This is a marathon, and I welcome you to another tutorial on this course on Ruby.

3
00:00:06.030 --> 00:00:09.210
And in this tutorial, we are going to be covering Mattocks.

4
00:00:10.530 --> 00:00:16.790
Now, you'll often come across a piece of code that needs to be executed many times in a single program.

5
00:00:17.010 --> 00:00:21.930
Now, instead of writing that piece of code over and over again, there's a feature in most programming

6
00:00:21.930 --> 00:00:24.100
languages that is called a procedure.

7
00:00:24.300 --> 00:00:29.410
Now, this procedure is going to allow you to extract the common goal to a single place.

8
00:00:29.610 --> 00:00:32.160
Now, in Ruby, we call it a method.

9
00:00:33.530 --> 00:00:39.050
Now, to declare a method, you have a certain procedure that is written right in front of you now to

10
00:00:39.050 --> 00:00:44.720
define a function, you have to use a d e f g word that is Beldin.

11
00:00:44.930 --> 00:00:50.510
And whenever you want to define a function, you have to use this key word def and you're Adam runner

12
00:00:50.510 --> 00:00:53.060
is Adam is automatically going to detect that.

13
00:00:53.060 --> 00:00:58.130
It is basically a function which you are defining right now after the def you have to write in the name

14
00:00:58.130 --> 00:00:58.970
of the function.

15
00:00:59.130 --> 00:01:02.670
Now in here you can see that we have found Cunnamulla here.

16
00:01:02.900 --> 00:01:05.060
Now you can use any kind of name you want to.

17
00:01:05.210 --> 00:01:09.040
It is never bound to use a specific name.

18
00:01:09.050 --> 00:01:10.610
You can use whatever you want to use.

19
00:01:11.930 --> 00:01:17.900
Then inside that def name, you can write in any number of lines of code.

20
00:01:18.150 --> 00:01:25.370
And after you have written your code, just click, enter, move outside the block and just write in.

21
00:01:25.370 --> 00:01:32.360
And now any piece of code that is written in between the def and and blog is going to be consider the

22
00:01:32.360 --> 00:01:34.640
piece of code for that specific function.

23
00:01:35.640 --> 00:01:42.060
Now, how are you supposed to run that good, which is in a function now to call a function, you can

24
00:01:42.060 --> 00:01:47.550
just write in the name of the function and the wrong brackets, and it is automatically going to call

25
00:01:47.550 --> 00:01:48.330
that function.

26
00:01:48.570 --> 00:01:55.260
And by calling a function, it means that every line of code in between the block of that function is

27
00:01:55.260 --> 00:01:56.700
going to get executed.

28
00:01:58.380 --> 00:02:05.130
Then we can also pass arguments to a function to pass arguments to a function, you have to just write

29
00:02:05.130 --> 00:02:13.740
in the value of the arguments in the wrong brackets that are in front of the function name, and then

30
00:02:13.740 --> 00:02:20.490
you can use that value, whatever has been passed inside the function and to pass the value from the

31
00:02:20.490 --> 00:02:21.280
calling area.

32
00:02:21.300 --> 00:02:27.210
You can write in the name of the function, as you can see down here, and you can have the values written

33
00:02:27.210 --> 00:02:29.980
here that are going to be passed on to this function here.

34
00:02:30.000 --> 00:02:35.250
We are going to have some variables in which those values are going to be stored and after that you

35
00:02:35.250 --> 00:02:39.050
can just simply use those value in this block of code.

36
00:02:39.150 --> 00:02:42.750
So that's how you can also pass the values to a function.

37
00:02:43.730 --> 00:02:51.500
Now, a function can also return a certain value, which you can just print out or you can just store

38
00:02:51.500 --> 00:02:52.850
it in a certain variable.

39
00:02:52.880 --> 00:02:57.660
Now, as you can see over here that we are calling a function and we are using quotes over here.

40
00:02:57.920 --> 00:03:00.470
You can also write in X equal to Nameable Hill.

41
00:03:01.340 --> 00:03:07.580
And inside that, as you can see, that we have read and written Halloa, Not Halloa, etc..

42
00:03:07.580 --> 00:03:07.730
Ruby.

43
00:03:08.030 --> 00:03:15.380
What it's going to do is that it is going to return hello Ruby to this func name and whatever we have

44
00:03:15.380 --> 00:03:17.690
written over here since in this case we have written books.

45
00:03:17.900 --> 00:03:22.340
So whatever value is going to be written from this function, it is going to be printed on your screen.

46
00:03:22.350 --> 00:03:27.860
So if you just write a variable X equal to one name and it is going to be stored in the variable X and

47
00:03:27.860 --> 00:03:30.760
you can use it outside the function then.

48
00:03:31.640 --> 00:03:35.740
So that's how you can also return the values from a function as well.

49
00:03:37.310 --> 00:03:45.170
So let's just see some example of whatever we have been talking so far, so let's move on to our editor,

50
00:03:45.350 --> 00:03:45.950
Adam.

51
00:03:47.650 --> 00:03:55.150
So starting on from how functions are going to be, define what you can do as just writing DCF on your

52
00:03:55.150 --> 00:04:00.670
screens and when you write in, the effort is going to change its color, which means that it is something.

53
00:04:00.940 --> 00:04:04.540
And then you have to write in the name of the functions function, as I told you.

54
00:04:04.550 --> 00:04:08.410
So I'm going to use, let's say, function, name, just click, enter.

55
00:04:08.410 --> 00:04:11.180
And as you can see, that it has automatically moved ahead.

56
00:04:11.200 --> 00:04:14.260
Which means that a block has been started automatically.

57
00:04:14.450 --> 00:04:20.620
Now you can use in, let's say, bullets and let's say I want to write in my name, just click, enter,

58
00:04:20.920 --> 00:04:25.590
click a backspace to move out of this function block and just write in.

59
00:04:25.600 --> 00:04:28.450
And now this is basically the core of the function.

60
00:04:28.450 --> 00:04:35.140
And to use this, what you can do is that you can just write in func.

61
00:04:36.700 --> 00:04:41.560
And name and just specify the wrong brackets, run this code.

62
00:04:44.060 --> 00:04:48.830
And as you can see, that it is processing and as you can see that the output has been printed, which

63
00:04:48.830 --> 00:04:51.760
is saying my name, which is on.

64
00:04:51.980 --> 00:04:57.900
So as you have seen, that it has printed whatever was in the block of code in this function.

65
00:04:58.160 --> 00:05:02.610
So when this rally was called in, it called this function now.

66
00:05:02.660 --> 00:05:07.520
Always remember that the code is executed in a sequential order.

67
00:05:07.820 --> 00:05:11.600
Now, when the execution starts, it's check the first line.

68
00:05:11.610 --> 00:05:12.950
But since it was a function.

69
00:05:12.950 --> 00:05:16.630
So he just ignored it and it moved out, but it moved out.

70
00:05:16.640 --> 00:05:17.330
It found nothing.

71
00:05:17.330 --> 00:05:18.260
On line number four.

72
00:05:18.290 --> 00:05:23.990
On line number five, it saw that it has a certain kind of a function which is going to be called.

73
00:05:24.170 --> 00:05:31.120
So it already has sort function since it was at line one, before it was at line five.

74
00:05:31.130 --> 00:05:38.420
So at the start, it has stored in its memory that we have a function that is named as bank name and

75
00:05:38.420 --> 00:05:39.260
it has to call it.

76
00:05:39.260 --> 00:05:43.130
So when we write in func Namoa here, it just call that function.

77
00:05:43.130 --> 00:05:45.890
And Omar was executed.

78
00:05:45.890 --> 00:05:48.520
And so it is right here on your brother.

79
00:05:48.770 --> 00:05:51.950
So if you call the function from right at the top here.

80
00:05:53.860 --> 00:06:00.490
And let's just remove it from here, run this code, and as you can see, that it has generated an error

81
00:06:00.490 --> 00:06:03.830
message that says undefined method, func name.

82
00:06:04.090 --> 00:06:06.370
Now, why this error message is generated?

83
00:06:06.370 --> 00:06:11.000
Because in the previous case, we have called the function from down here.

84
00:06:11.410 --> 00:06:15.720
Now, since it is going to follow a sequential order.

85
00:06:15.880 --> 00:06:21.970
So according to the sequence, it found def func name on the first line in our previous case, for example,

86
00:06:21.970 --> 00:06:23.190
if I just remove it from here.

87
00:06:23.410 --> 00:06:24.970
So func name is on the first line.

88
00:06:24.970 --> 00:06:29.910
So it's stored in its memory that we have a function that is named as func name.

89
00:06:30.100 --> 00:06:36.360
So when we called it from here on the line number six, it already had in its memory a fake name.

90
00:06:36.370 --> 00:06:37.510
So it is going to call it.

91
00:06:37.510 --> 00:06:45.040
But when you define the funk name right at the top here on the first line, then it is going to execute

92
00:06:45.130 --> 00:06:46.240
this statement actually.

93
00:06:46.240 --> 00:06:52.960
But since it is on the very first line, so it does not know that a funk function that is named as funk

94
00:06:52.960 --> 00:06:54.860
name even exists or not.

95
00:06:55.000 --> 00:07:00.360
So it has generated an error message that says undefined method name as funk name.

96
00:07:00.520 --> 00:07:05.920
So always remember that when you are defining a function and calling a function, the calling is going

97
00:07:05.920 --> 00:07:13.450
to be done always after the function has been defined because of the very same reason that is, since

98
00:07:13.630 --> 00:07:18.480
a function follows any number, any line of code follows basically a sequential order.

99
00:07:18.490 --> 00:07:20.710
So a function also follows that.

100
00:07:20.890 --> 00:07:25.930
And to call a function, you have to first define it before that.

101
00:07:27.150 --> 00:07:35.190
So moving on to the second part of this tutorial that is about arguments, so how can a function basically

102
00:07:35.190 --> 00:07:36.770
accept parameters?

103
00:07:37.170 --> 00:07:42.810
So to do so, what do you have to do is that you have to specify brackets, Sohel, and you have to

104
00:07:42.810 --> 00:07:45.230
write in a certain number of arguments over here.

105
00:07:45.240 --> 00:07:47.990
So let's say I don't want this here anymore.

106
00:07:48.360 --> 00:07:54.350
And what I want is that it's just printed for so that this error message is removed.

107
00:07:54.600 --> 00:07:57.240
And now, as you can see that if I just remove it from here.

108
00:07:58.520 --> 00:08:03.270
And let's say I want to pass my name right from here into this function.

109
00:08:03.290 --> 00:08:08.990
So this part where we are calling the function, we have to basically specify the values.

110
00:08:09.410 --> 00:08:12.150
So you can just write and let's say Americano here.

111
00:08:12.530 --> 00:08:19.400
And when I want to pass it over here to this function name, I have to write a variable, any variable

112
00:08:19.400 --> 00:08:20.170
right over here.

113
00:08:20.450 --> 00:08:22.780
So let's say I just write a name or here.

114
00:08:23.000 --> 00:08:29.150
So name is basically going to now store this value, because when the function is going to be called

115
00:08:29.150 --> 00:08:34.460
with a parameter, it is going to check for any function that is named as func name.

116
00:08:34.640 --> 00:08:37.950
And it also receive one argument.

117
00:08:38.120 --> 00:08:44.810
So it is going to search and since it already has in its memory, this function sends a sequential order

118
00:08:44.810 --> 00:08:48.890
is followed and it already had stored this func name with a parameter.

119
00:08:49.070 --> 00:08:50.630
So it is going to call that function.

120
00:08:50.750 --> 00:08:57.080
And this value over here is basically going to be stored in this variable we have defined right here.

121
00:08:57.230 --> 00:08:59.210
So name is going to be stored right here.

122
00:08:59.390 --> 00:09:01.960
So now this name can be used right here.

123
00:09:01.970 --> 00:09:03.770
So if you just write a name Oakhill.

124
00:09:05.140 --> 00:09:10.720
Run the school and you can see that Americanist printed right here on my screen, so there's value as

125
00:09:10.720 --> 00:09:15.270
a dollar is stored in this and now you can use it inside the function block.

126
00:09:15.310 --> 00:09:19.390
So when I write in Namoa here, my name is going to be printed right here.

127
00:09:19.580 --> 00:09:22.890
So in a similar way, you can pass in multiple arguments.

128
00:09:22.900 --> 00:09:25.590
Let's say I want to pass in a value one as well.

129
00:09:25.810 --> 00:09:29.530
So for that, you have to specify a variable over here as well.

130
00:09:29.530 --> 00:09:35.380
Let's say X is the variable and now you can just write inputs or here around this code.

131
00:09:35.380 --> 00:09:38.310
And as you can see, that Omarion and one are printed right here.

132
00:09:38.320 --> 00:09:47.260
So you can pass in any number of arguments and you can pass in any data type of argument at this.

133
00:09:47.260 --> 00:09:54.310
OHAYON So that's how basically you can pass in arguments and that's how parameters are going to be accepted

134
00:09:54.520 --> 00:09:56.350
by a function as well.

135
00:09:56.560 --> 00:10:02.440
Now, there is one thing you need to know here is that you can just remove these brackets from here

136
00:10:02.440 --> 00:10:04.810
because these are what is optional.

137
00:10:05.040 --> 00:10:07.330
You can just specify the arguments like this.

138
00:10:07.330 --> 00:10:09.550
Let's just go on with a single argument.

139
00:10:09.850 --> 00:10:11.830
So let's just remove it from this code.

140
00:10:11.890 --> 00:10:15.960
And you can see that it says undefined local variable.

141
00:10:15.970 --> 00:10:18.850
Yes, because X is now no more a part of this.

142
00:10:18.850 --> 00:10:20.770
So let's just remove it, run this code.

143
00:10:21.550 --> 00:10:23.810
And as you can see, that my name is printed right over here.

144
00:10:24.040 --> 00:10:26.740
So these basically parenthesis are optional.

145
00:10:26.750 --> 00:10:31.720
You can just specify a space and then you can specify the argument, which you have to pass into the

146
00:10:31.720 --> 00:10:32.170
function.

147
00:10:32.180 --> 00:10:36.430
You can just remove it from here as well, and you can just remove it from here as well.

148
00:10:36.430 --> 00:10:38.340
And you can just have a string over here.

149
00:10:39.070 --> 00:10:41.320
Let's let it be name and run the score.

150
00:10:41.320 --> 00:10:43.660
And you can see that you have got name right or well.

151
00:10:43.990 --> 00:10:49.030
So these brackets as a W are basically optional and you can just remove them if you want to.

152
00:10:49.030 --> 00:10:54.960
But the best practice is to use them so that your code as a bit of a more organized.

153
00:10:55.390 --> 00:11:00.730
Now the third part of this tutorial is about how to return a value from a function.

154
00:11:00.940 --> 00:11:07.930
Now, let's say we have this name right over here, so we don't want that to be printed right here.

155
00:11:08.050 --> 00:11:12.310
We want that value to be written outside the function to this area.

156
00:11:12.460 --> 00:11:14.480
And we want to use it, let's say, somewhere else.

157
00:11:14.620 --> 00:11:17.680
So, for example, I have a value X equal to func name.

158
00:11:18.650 --> 00:11:24.380
And let's just specify the brackets so that it looks more beautiful and what we are going to do is that

159
00:11:24.380 --> 00:11:28.630
we are going to just write in written and we are going to write in name.

160
00:11:28.910 --> 00:11:36.320
Now, whenever a function has a written statement and whatever is written in front of this, it is going

161
00:11:36.320 --> 00:11:42.560
to return that value right down to the calling area where the function is called.

162
00:11:42.560 --> 00:11:47.390
And if it has a variable in which it want to store it, it is going to store in a variable and then

163
00:11:47.390 --> 00:11:49.170
you can use that variable downhill.

164
00:11:49.670 --> 00:11:57.290
So if I just run this code, you can see that name is printed right on the screen because X now contains

165
00:11:57.290 --> 00:11:59.210
this name and you can now use them.

166
00:11:59.600 --> 00:12:04.190
For instance, if you don't return a value, then you can not use that value.

167
00:12:04.220 --> 00:12:10.430
For example, if I have, let's say, some value right over here and I want to use it down here, then

168
00:12:10.430 --> 00:12:11.240
that cannot be used.

169
00:12:11.240 --> 00:12:16.310
And that is a part of the, I guess next to next tutorial in which we will be discussing the scope of

170
00:12:16.310 --> 00:12:17.570
a variable in a function.

171
00:12:19.370 --> 00:12:25.370
Now, in the written statement, we have got one more concept, that is the optional written statements,

172
00:12:25.610 --> 00:12:31.430
not the written statement is admitted in the function will return the last evaluated expression.

173
00:12:31.460 --> 00:12:36.610
So, for example, let's say pass in something like a value from here.

174
00:12:36.620 --> 00:12:42.340
Let's say that value is my name and that is going to be received right here.

175
00:12:42.650 --> 00:12:48.290
And let's say I don't specify this written statement over here and I just write in.

176
00:12:49.890 --> 00:12:56.010
Hello, and then I specify this will help, and I just write in the name of Wilhelm.

177
00:12:56.310 --> 00:12:58.410
So this is basically interpellation.

178
00:12:58.650 --> 00:13:03.520
So when I run this code now, you can see that it has printed hello mail here.

179
00:13:03.550 --> 00:13:07.710
Now, what is going on actually is that this value is going to be passed into this function.

180
00:13:09.140 --> 00:13:11.930
Hello, and you can see that interpellation as usual.

181
00:13:11.960 --> 00:13:17.060
Hello, America is going to be printed, but how that comes out in this very X because we haven't used

182
00:13:17.060 --> 00:13:22.940
any kind of written statement of help, I was told you that if you don't specify the written statement

183
00:13:22.940 --> 00:13:26.900
and you are using the concept of written statement of our heroes, you can see that you are storing

184
00:13:26.900 --> 00:13:33.290
a value, this value here, whatever is going to be returned to this function in the variable X, but

185
00:13:33.290 --> 00:13:36.200
that is not possible because we have not used their written statement over here.

186
00:13:36.200 --> 00:13:42.950
But what we really do is that to avoid the errors, what to do is that it written the latest expression

187
00:13:42.950 --> 00:13:46.340
that is evaluated in the function to this func nameable here.

188
00:13:47.120 --> 00:13:49.970
It is going to be stored in this variable and that is going to be printed out.

189
00:13:49.980 --> 00:13:53.060
For example, if you have, let's say, a statement.

190
00:13:54.850 --> 00:14:00.700
Hello, let's say John Oakhill, I run the score and as you can see that now, it has printed Hello,

191
00:14:00.700 --> 00:14:07.000
John, over here because now hello, John is the last statement that is executed by this function funk

192
00:14:07.000 --> 00:14:07.330
name.

193
00:14:07.630 --> 00:14:10.660
So as a told you that a sequential order is followed.

194
00:14:10.700 --> 00:14:15.440
So that's why hello, John is going to be the last statement that is going to be executed by this function.

195
00:14:15.700 --> 00:14:17.220
So let me call this function.

196
00:14:17.230 --> 00:14:22.310
We want to read what we want this function to return to value and store it in this variable X.

197
00:14:22.720 --> 00:14:30.640
So when it don't find any kind of written statement, what it's going to do is that it is going to write

198
00:14:30.640 --> 00:14:33.400
down the value of the last expression that is evaluated.

199
00:14:33.410 --> 00:14:37.930
For example, we have a written statement and after that we also have got a statement that is Hello

200
00:14:37.930 --> 00:14:42.490
John over here and Niver underscore that is going to return Hello America here.

201
00:14:42.490 --> 00:14:47.050
Because since we have the written statement, if we have the written statement, even then, if you

202
00:14:47.050 --> 00:14:53.650
have some go to war here, it is going to just ignore that it is going to return this value to us with

203
00:14:53.650 --> 00:14:56.570
which we have got our written statement.

204
00:14:57.130 --> 00:14:59.770
So I hope that you have understood it.

205
00:14:59.950 --> 00:15:03.370
Then there is one more concept about function.

206
00:15:03.370 --> 00:15:06.570
That is the default argument values.

207
00:15:06.940 --> 00:15:13.030
Now, for example, you are passing in a value over here and you have got a variable here, then it

208
00:15:13.030 --> 00:15:14.500
is going to run very smoothly.

209
00:15:14.500 --> 00:15:18.220
According to the previous concept I have explained about the arguments that are going to be passed into

210
00:15:18.220 --> 00:15:18.760
the function.

211
00:15:19.030 --> 00:15:27.190
But let's say we are receiving an argument here, but we don't pass any kind of value here, so let's

212
00:15:27.190 --> 00:15:28.330
just remove it for now.

213
00:15:30.110 --> 00:15:33.140
And let's just use the statement, Oakhill.

214
00:15:36.950 --> 00:15:40.700
And let's just remember this as well, it's just right in.

215
00:15:42.420 --> 00:15:43.560
The name of the function.

216
00:15:45.220 --> 00:15:52.990
All right, so as you can see that I am calling this function, but I have not passed any kind of parameters

217
00:15:52.990 --> 00:15:59.040
from here and in here, as you can see, that it is expecting that an argument is going to be received.

218
00:15:59.050 --> 00:16:03.000
So if I just run this code, you can see that it simply has generated errors.

219
00:16:03.010 --> 00:16:07.270
And as you can see, the error message that says wrong number of arguments.

220
00:16:07.630 --> 00:16:13.330
And as you can see ahead that it says the given arguments are zero and expected arguments are won.

221
00:16:13.330 --> 00:16:19.330
As you can see that the given arguments over here are zero and the expected argument is one.

222
00:16:19.600 --> 00:16:22.450
So how to basically solve this problem?

223
00:16:22.690 --> 00:16:25.660
For example, you have this function right over here.

224
00:16:26.550 --> 00:16:33.120
In which what you want is that sometime you want to send in some data, but sometime you don't want

225
00:16:33.120 --> 00:16:36.660
to send any kind of data, for example, I'm calling this function right here again.

226
00:16:36.930 --> 00:16:39.540
And let's say this time I want to pass in a value.

227
00:16:39.540 --> 00:16:43.470
For the third part, I don't want to pass in a value.

228
00:16:43.470 --> 00:16:48.210
Then I am going to call this function again in which I want to, let's say, pass value again.

229
00:16:48.570 --> 00:16:52.130
So to do this, what you have to do it.

230
00:16:52.140 --> 00:16:54.900
You don't have to write in a function again and again.

231
00:16:54.900 --> 00:16:58.980
For example, if there are, let's say, two more arguments here.

232
00:16:58.980 --> 00:17:04.680
Well, here, let's say I've got this argument over here again, so I don't have to specify a function

233
00:17:04.680 --> 00:17:10.340
with a single argument and a double argument as a function without arguments again and again.

234
00:17:10.350 --> 00:17:12.380
I what I don't need three functions over here.

235
00:17:12.660 --> 00:17:18.180
What I can do over here is that I can use the concept of default arguments over here, know how it is

236
00:17:18.180 --> 00:17:18.830
going to be done.

237
00:17:19.050 --> 00:17:21.880
Let's for this case, deal with only a single argument.

238
00:17:22.080 --> 00:17:29.160
So for this function and for this function, this court is going to run very smoothly because the given

239
00:17:29.160 --> 00:17:31.410
arguments are won and expected or also on.

240
00:17:31.410 --> 00:17:36.240
But for this function and this function, it is going to generate this error message you can see on

241
00:17:36.240 --> 00:17:36.880
the right side.

242
00:17:37.200 --> 00:17:43.130
So for that, what you have to do is that you are going to specify a default value to it.

243
00:17:43.350 --> 00:17:45.840
So let's say I just write in.

244
00:17:47.230 --> 00:17:56.200
Something random, let's say tutorials, so whenever I call this function and I don't specify any number

245
00:17:56.200 --> 00:18:02.230
of arguments, then what it is going to do is that when I don't pass an argument, it is going to treat

246
00:18:02.230 --> 00:18:05.390
this as the received value and it is going to print that out.

247
00:18:05.680 --> 00:18:06.960
So I just run the school.

248
00:18:07.120 --> 00:18:14.830
You can see that for the functions in which I don't pass any value for the first and for the third value

249
00:18:14.830 --> 00:18:20.950
in which I did not post any kind of arguments, you can see that it is printed out tutorials in place

250
00:18:20.950 --> 00:18:22.230
of this name or here.

251
00:18:22.360 --> 00:18:24.600
So you can see how it's headed towards here.

252
00:18:24.790 --> 00:18:31.060
But in cases where I am passing some value that as a single argument and the expected argument is also

253
00:18:31.060 --> 00:18:35.020
won, then in that case it is going to treat this as an argument.

254
00:18:35.050 --> 00:18:39.840
So if you talk about the priority, the priority is given to the value you are passing from here.

255
00:18:40.000 --> 00:18:45.190
But if you don't pass in any value to help the function that is Funt name, then it is going to treat

256
00:18:45.190 --> 00:18:49.390
this as a value and it is going to use that and it is going to print that out.

257
00:18:49.510 --> 00:18:56.410
So this is basically the concept of different arguments in Ruby, and this concept is very, very,

258
00:18:56.410 --> 00:18:59.890
very important in cases where you have to call a function multiple times.

259
00:18:59.890 --> 00:19:03.790
But sometimes you want to pass in the value, but sometimes you don't want to pass in a value.

260
00:19:04.000 --> 00:19:07.780
So instead of creating that function again and again, again and again, again and again, what you

261
00:19:07.780 --> 00:19:13.870
can do is that you can use this concept of default values and that is going to prove very, very, very

262
00:19:13.870 --> 00:19:14.420
helpful.

263
00:19:14.800 --> 00:19:17.470
So that was the introduction to functions.

264
00:19:17.470 --> 00:19:23.230
You now know how to define a function, how to pass arguments to a function, how to have no brackets

265
00:19:23.230 --> 00:19:28.960
and call the function, then how to return a value and how to return a value without using the written

266
00:19:28.960 --> 00:19:29.420
statement.

267
00:19:29.590 --> 00:19:34.530
And finally, you know about how to parse default arguments to function.

268
00:19:34.780 --> 00:19:37.760
So I guess that's it with this tutorial.

269
00:19:38.320 --> 00:19:39.940
Thank you so much, guys, for watching.

270
00:19:40.150 --> 00:19:42.370
And I'll see you guys in the next territorial.
