1
00:00:00,300 --> 00:00:01,290
Hey, guys, what's up?

2
00:00:01,320 --> 00:00:04,700
This is a marathon, and I welcome you to another detail on this course on Ruby.

3
00:00:04,710 --> 00:00:07,410
And in this tutorial, we are again going to be covering to function.

4
00:00:07,410 --> 00:00:09,960
The first function is going to be the actual function.

5
00:00:10,170 --> 00:00:13,590
And the second function we are going to cover is going to be the any function.

6
00:00:13,920 --> 00:00:18,270
Now, starting on with the first function we are going to cover in this tutorial, is the equal function

7
00:00:18,510 --> 00:00:18,810
now?

8
00:00:18,810 --> 00:00:24,080
Equal is a hash class method which checks whether the two hash areas are equal or not.

9
00:00:24,270 --> 00:00:27,540
If you talk about the syntax of this, it is very simple.

10
00:00:27,540 --> 00:00:33,660
You have to write and hash one if not equal, and the hash with which you want to compare hash one,

11
00:00:33,660 --> 00:00:35,220
you have to pass that hash.

12
00:00:35,640 --> 00:00:41,580
If you simply call it hash to you can just pass it as an argument and it is going to compare those two

13
00:00:41,580 --> 00:00:42,150
hashes.

14
00:00:42,390 --> 00:00:43,710
The two hashes are equal.

15
00:00:43,710 --> 00:00:44,610
It is going to return.

16
00:00:44,610 --> 00:00:45,030
True.

17
00:00:45,030 --> 00:00:49,230
And if they are not equal, it is going to simply return false.

18
00:00:49,830 --> 00:00:57,210
The second function we are going to cover in this is the any function now any is also a high hash class

19
00:00:57,210 --> 00:01:02,280
method which checks for the presence of a patron and it passes each element of the collection to the

20
00:01:02,280 --> 00:01:02,930
given block.

21
00:01:03,300 --> 00:01:08,640
If you talk about the syntax of this any function, it is also very simple.

22
00:01:08,640 --> 00:01:10,620
You have to write in hash dot any.

23
00:01:11,610 --> 00:01:19,140
It accepts no argument, and if the hash is not empty, this function is always going to return.

24
00:01:19,140 --> 00:01:19,410
True.

25
00:01:19,680 --> 00:01:26,030
So if the block ever returns a value other than false or nil, it is going to return false.

26
00:01:26,040 --> 00:01:29,850
But if it return anything, it is going to return.

27
00:01:29,850 --> 00:01:30,130
True.

28
00:01:30,540 --> 00:01:38,270
So far, hashes that contains no value of keeping it is going to return false for every other case.

29
00:01:38,280 --> 00:01:39,630
This function is going to return.

30
00:01:40,380 --> 00:01:46,680
So let's just see some examples of both these functions in our editor.

31
00:01:46,680 --> 00:01:50,760
And you will understand much more what I'm talking about right now.

32
00:01:50,770 --> 00:01:57,690
So starting on with the first function, that is the function that is going to check if the hashes are

33
00:01:57,690 --> 00:01:59,560
equal or not.

34
00:01:59,790 --> 00:02:02,970
So we already have a set of hashes over here.

35
00:02:02,980 --> 00:02:07,890
So let's just initialize this B and have another value.

36
00:02:07,890 --> 00:02:11,460
Two hundred over here so that these two are equal.

37
00:02:12,970 --> 00:02:16,240
Now, what you can simply do is that you can write in votes.

38
00:02:18,230 --> 00:02:19,640
A and B.

39
00:02:25,700 --> 00:02:28,940
Equality returns.

40
00:02:32,460 --> 00:02:39,420
And you can just use the interpolation of a here and you can just ride in it or EQM a question mark

41
00:02:39,420 --> 00:02:41,880
and in the parameters you can just pass and be.

42
00:02:42,360 --> 00:02:47,310
So just run the score and you can see that it says it and the equality returns.

43
00:02:47,340 --> 00:02:51,950
True, because they are true, as you can see, that you have got the same keys, the same values.

44
00:02:52,320 --> 00:02:55,320
Now, for example, you just change of value over here.

45
00:02:55,320 --> 00:03:01,270
For example, both A and B have 100 value over here, whereas the B contains 200 over here.

46
00:03:01,270 --> 00:03:04,360
Run this now and you can see that it returns false.

47
00:03:04,370 --> 00:03:11,490
So basically it not only check for the KeIso here, but also check for the values that are stored in

48
00:03:11,490 --> 00:03:12,220
those keys.

49
00:03:12,510 --> 00:03:18,540
So, for example, let's say we have this 200 over here, but we have, let's say, some different ghiorso.

50
00:03:18,540 --> 00:03:24,660
In the previous case, the difference was due to these values which are stored in this case.

51
00:03:24,660 --> 00:03:28,010
And for this, we have the keys different.

52
00:03:28,230 --> 00:03:29,010
Now run it.

53
00:03:29,220 --> 00:03:31,070
And it is again going to return false.

54
00:03:31,080 --> 00:03:32,130
So do.

55
00:03:32,970 --> 00:03:35,010
So for this function to return true.

56
00:03:35,520 --> 00:03:43,470
What this should have that both these hashes should be equal in the key values as well as in the values

57
00:03:43,470 --> 00:03:45,340
that are stored in those keys.

58
00:03:45,540 --> 00:03:49,110
So for this to return true, this has to be B as well run.

59
00:03:49,350 --> 00:03:52,500
And you can see that you have got true right or whatever.

60
00:03:53,440 --> 00:03:59,760
So this is how basically you can just have this now, for example, you have, as you can see, a video

61
00:03:59,770 --> 00:04:01,920
here, but you have got a CEO here as well.

62
00:04:01,930 --> 00:04:09,250
And you want to compare it with C, let's say run this and you can see that it has returned false since

63
00:04:09,250 --> 00:04:13,690
this is a part of this completely and this is basically a subset of this.

64
00:04:13,690 --> 00:04:18,340
But since this contains an extra value, so that's why it is going to return false as well.

65
00:04:19,450 --> 00:04:25,330
So talking about now, the second function we are going to cover in this tutorial is the class function,

66
00:04:25,330 --> 00:04:27,350
which checks for the presence of a patron.

67
00:04:28,030 --> 00:04:37,000
So if you just use the any function over here and any function exceptional arguments or just leave it

68
00:04:37,000 --> 00:04:41,050
empty and we are going to write in and the.

69
00:04:43,370 --> 00:04:44,490
Not envy anymore.

70
00:04:44,510 --> 00:04:44,960
A.

71
00:04:47,050 --> 00:04:51,650
Veteran returns just run it.

72
00:04:51,940 --> 00:04:55,800
You can see that the ephedrin returns true because it has certain values.

73
00:04:56,110 --> 00:04:59,770
Similarly, you can just ride in boats, Bacterin.

74
00:05:01,580 --> 00:05:08,000
Returns interpellation, and you can just ride and beat out any question mark bracket's run and you

75
00:05:08,000 --> 00:05:13,490
can see that it has also, I don't know, for example, I just remove the statements from here.

76
00:05:13,520 --> 00:05:15,330
So this means that C is empty.

77
00:05:15,440 --> 00:05:19,340
So if you just write in votes C.

78
00:05:20,390 --> 00:05:26,030
Badran returns schtuck and you can just ride in C dot.

79
00:05:27,170 --> 00:05:35,120
Any question mark run and you can see that it has returned false because since as a told you that each

80
00:05:35,120 --> 00:05:40,820
element of the collection is passed to a given block, and if the block ever returns a value other than

81
00:05:40,820 --> 00:05:44,420
false or nil, otherwise it return false.

82
00:05:44,450 --> 00:05:47,000
So in this case, it has returned nothing.

83
00:05:47,030 --> 00:05:51,050
So that's why it has returned false and false has been printed right over here.

84
00:05:51,070 --> 00:05:57,550
So if that trend is not present, this function Searoad and is going to return false.

85
00:05:57,560 --> 00:06:01,160
Now, for example, we have, let's say, the Syntex difference over here.

86
00:06:03,710 --> 00:06:10,270
Run this and this is again going to return true as well, so the pattern doesn't matter on the syntax,

87
00:06:10,280 --> 00:06:15,890
it matters if hash returns something when it is sparse or not.

88
00:06:16,010 --> 00:06:19,320
So in both these cases for and B, it returns something.

89
00:06:19,340 --> 00:06:22,010
So that's why it returned drooler here.

90
00:06:22,010 --> 00:06:23,290
But this return nothing.

91
00:06:23,300 --> 00:06:25,960
So that's why false was printed right over here.

92
00:06:26,300 --> 00:06:30,370
And basically that's how you can use both these functions in your Ruby code.

93
00:06:30,620 --> 00:06:31,960
So I guess you have understood them.

94
00:06:32,150 --> 00:06:34,110
So I guess that's it with this tutorial as well.

95
00:06:34,130 --> 00:06:35,600
Thank you so much, guys, for watching.

96
00:06:35,600 --> 00:06:39,440
And I'll see you guys in the next tutorial with some other functions on HaShas.
