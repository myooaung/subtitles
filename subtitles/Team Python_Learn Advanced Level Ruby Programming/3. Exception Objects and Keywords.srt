1
00:00:00,300 --> 00:00:01,170
Hey, guys, what's up?

2
00:00:01,200 --> 00:00:05,610
This is a marathon, and I welcome you to an editorial on discourse on and in this story we are going

3
00:00:05,610 --> 00:00:09,300
to cover about exceptional objects and we are also going to see some brilliant methods.

4
00:00:09,660 --> 00:00:15,120
So exception object are just normal ruby object that we can give useful information from.

5
00:00:15,450 --> 00:00:21,000
Ruby provides building behaviors for these objects that you may want to use while handling the exception

6
00:00:21,180 --> 00:00:22,960
are in the part of debugging.

7
00:00:23,460 --> 00:00:30,820
So let's take a look at the Ruby exception handling objects and how they are associated right over here.

8
00:00:30,840 --> 00:00:35,640
So if you have a look at these syntax right over here, which in which you have the very same index

9
00:00:35,640 --> 00:00:40,470
from the previous case, but now what you have is that you have got this stuff over here extra.

10
00:00:41,400 --> 00:00:47,250
Now, whatever error we have specified error, that is the type of error, so here we are handling standard

11
00:00:47,250 --> 00:00:50,360
error on, you know, that standard error has a lot of descendants.

12
00:00:50,360 --> 00:00:54,220
So whatever error from the standard error class is going to get.

13
00:00:54,660 --> 00:00:56,910
So this is going to get handled right to hell.

14
00:00:56,910 --> 00:01:02,760
And this thing over here means that that is going to get stored in an object that is known as E..

15
00:01:03,210 --> 00:01:10,740
So this is Syntex in the above code is going to rescue any kind of standard error and store the exception

16
00:01:10,740 --> 00:01:13,460
object in the object Ebbie have specified.

17
00:01:13,740 --> 00:01:18,660
Now, some useful instanced method that Ruby provides are the exception, message and exception.

18
00:01:18,660 --> 00:01:23,970
Backtrace, which returns an error message and a backtrace associated with the exception, respectively.

19
00:01:25,430 --> 00:01:32,270
So if you just have a look at the example, and since we are using the standard error, so all these

20
00:01:32,270 --> 00:01:37,970
errors, any kind of error that is going to get occurred right here is going to get executed because

21
00:01:37,970 --> 00:01:41,100
all these are the descendants of the standard error laws.

22
00:01:41,360 --> 00:01:44,720
So let's just see an example of how this is going to get executed.

23
00:01:44,960 --> 00:01:46,100
Let's move on to Adam.

24
00:01:46,280 --> 00:01:51,110
And what we are going to do is that we are going to ride in the big block and big and block.

25
00:01:51,110 --> 00:01:56,300
What we are going to do is that we are going to have any kind of error that is basically a bot or the

26
00:01:56,300 --> 00:01:59,740
descendant of the the standard error subclass.

27
00:01:59,870 --> 00:02:03,280
So let's say we have the same error that was the division by zero error.

28
00:02:03,530 --> 00:02:06,650
So we have it right to here now in the rescue block.

29
00:02:06,650 --> 00:02:12,500
What we are going to do is that we are going to ride into a hill, the name of the class.

30
00:02:12,510 --> 00:02:14,450
So we are going to ride in standard.

31
00:02:15,470 --> 00:02:20,940
Error and after that, what we are going to do over here is that we are going to specify an equal designed

32
00:02:20,940 --> 00:02:25,010
this well and we are going to specify an object right to held.

33
00:02:26,310 --> 00:02:30,030
So what this object is going to do is that now it is going to store the.

34
00:02:30,510 --> 00:02:33,740
And now this object is going to help us do a lot of things.

35
00:02:33,750 --> 00:02:39,360
For example, if you want to know the error message so you can just write an IDOT message and message

36
00:02:39,360 --> 00:02:40,530
is something that is building.

37
00:02:40,530 --> 00:02:44,990
Just write in and run this code and you can see that it says divided by zero.

38
00:02:45,210 --> 00:02:51,120
So it on message has printed us a very sober message, which was a very lengthy message, a two lane

39
00:02:51,120 --> 00:02:52,620
red message printed.

40
00:02:52,620 --> 00:02:59,820
But now we have stored it in an object E and when we write an e dot message, it has printed as a very

41
00:02:59,820 --> 00:03:01,470
simple message that says divided by zero.

42
00:03:01,480 --> 00:03:07,290
So we are going to understand that whatever code we have written in the log, we have got some kind

43
00:03:07,290 --> 00:03:08,550
of divided by zero over there.

44
00:03:08,560 --> 00:03:13,240
So we are going to just check it out and remove any kind of division that was done by zero.

45
00:03:13,260 --> 00:03:16,300
So if you just replace this one, this is going to run perfectly.

46
00:03:16,590 --> 00:03:22,830
So now if you just replace it by zero and the second one we have that is very important is the backtrace

47
00:03:22,830 --> 00:03:23,340
Abargil.

48
00:03:25,380 --> 00:03:31,050
So now I just run it, you can see that it is giving me the backtrace of the file in which I've got

49
00:03:31,050 --> 00:03:37,340
this program store and it is basically giving me all the trace of where this error has occurred.

50
00:03:37,680 --> 00:03:41,470
So that's how basically you can use the object concept over here.

51
00:03:41,490 --> 00:03:49,260
So in this code right over here, the code is going to rescue any type of standard error exception,

52
00:03:49,260 --> 00:03:52,110
including all of its descendants and the output.

53
00:03:52,320 --> 00:03:55,470
And it is going to output the message that is associated with the exception.

54
00:03:55,470 --> 00:04:01,410
Object code like this can be very useful when you are debugging and need to narrow down the type or

55
00:04:01,410 --> 00:04:02,270
cause of the error.

56
00:04:02,970 --> 00:04:07,410
You may also choose to be more specific about which type of exception to handle.

57
00:04:07,440 --> 00:04:15,390
But remember to never rescue the exception class recall that exception object are just normal ruby object

58
00:04:15,390 --> 00:04:21,750
and the different exception types such as argument error and the no method error are actually class

59
00:04:21,750 --> 00:04:21,950
name.

60
00:04:21,960 --> 00:04:29,360
Therefore, we can even call object class on an exception object to return its class name as well.

61
00:04:30,220 --> 00:04:36,970
So, for example, if I just ride in your Class A or underscored, it is going to give me the class

62
00:04:36,970 --> 00:04:42,160
for which the error has occurred and now you know that zero deviation error is basically the standard

63
00:04:42,160 --> 00:04:43,300
of the standard error.

64
00:04:43,540 --> 00:04:50,650
And standard error is basically a subclass, which is a part of the exception clause that is at the

65
00:04:50,650 --> 00:04:55,240
top, which I just recommend that you should never use.

66
00:04:56,510 --> 00:05:03,380
Now comes some of the bold and methods you can use, with exception, handling the first one is ensure.

67
00:05:04,390 --> 00:05:09,730
Now, you may also choose to include an insurer clause, in your opinion and rescue block after the

68
00:05:09,730 --> 00:05:10,870
last rescue clause.

69
00:05:11,410 --> 00:05:18,220
Now, this branch is the branch that is going to get executed always whenever an exception was right

70
00:05:18,220 --> 00:05:19,060
or not.

71
00:05:19,370 --> 00:05:22,010
So when is this basically useful?

72
00:05:22,180 --> 00:05:25,360
Simple example is the resource management.

73
00:05:25,600 --> 00:05:32,310
The code which we are going to about to do is basically demonstrating some working.

74
00:05:32,320 --> 00:05:39,070
So whether or not an exception is raised or not, this stuff that is written in the insurer clause is

75
00:05:39,070 --> 00:05:40,730
going to get executed.

76
00:05:41,080 --> 00:05:43,920
So let's say we have, let's say ten divided by two.

77
00:05:43,930 --> 00:05:46,560
So you know that it is not any kind of error.

78
00:05:46,570 --> 00:05:48,760
We run discord, so it is going to run perfectly.

79
00:05:48,760 --> 00:05:54,790
And right now here we are going to write an insurer and an insurer because we are going to just write

80
00:05:54,790 --> 00:05:55,290
in votes.

81
00:05:56,290 --> 00:05:57,610
This code is.

82
00:05:58,560 --> 00:06:01,330
Always executed.

83
00:06:01,350 --> 00:06:04,800
So if you just run the school, you can see that it says this school is always executed, as you have

84
00:06:04,800 --> 00:06:06,780
seen, that this over here is now true.

85
00:06:07,080 --> 00:06:12,390
This Ohare is not going to get printed, but this statement is still printing that says this quote is

86
00:06:12,390 --> 00:06:13,080
always executed.

87
00:06:13,110 --> 00:06:15,400
So now let's say we have an error message over here.

88
00:06:16,260 --> 00:06:21,120
Now we run the school and now we are also going to get this rescue blog executed since the division

89
00:06:21,120 --> 00:06:22,080
by zero has occurred.

90
00:06:22,090 --> 00:06:26,130
So it is going to give us the IDOT class, which is a zero division error.

91
00:06:26,130 --> 00:06:32,540
And it is also going to execute the inshore blog that says this code is always executed.

92
00:06:32,940 --> 00:06:38,820
So if there are multiple rescue clauses in the big and rescue blog, the ENSURE clause serve as a single

93
00:06:38,820 --> 00:06:40,380
exit point for the block.

94
00:06:40,380 --> 00:06:46,780
And always it allows you to put all your clean up code in one place as seen in the code right here.

95
00:06:46,920 --> 00:06:52,650
One important thing to remember about ensure that it is critical that this code does not raise an exception

96
00:06:52,650 --> 00:06:56,160
in the code within the insurer clause raise an exception.

97
00:06:56,550 --> 00:07:03,300
Any exception raised earlier in the exception of the big and risky block will be masked and LIBOR debugging

98
00:07:03,300 --> 00:07:05,520
will become very, very difficult.

99
00:07:05,550 --> 00:07:10,560
For example, if you just write in 10 by zero over here, which means that an exception also exist over

100
00:07:10,560 --> 00:07:13,230
here and that is going to generate an error message for you.

101
00:07:13,260 --> 00:07:17,550
So that is going to make debugging very, very, very difficult for you.

102
00:07:18,900 --> 00:07:23,300
The second key word we have in Aruba is the retrack keyword.

103
00:07:23,580 --> 00:07:30,120
So we will introduce retry briefly, but it is unlikely that you will use it often using read write

104
00:07:30,120 --> 00:07:34,140
in your big and rescue blog, redirects your program back to the big instatement.

105
00:07:34,200 --> 00:07:39,180
This allows your program to make another attempt to execute the code that raised an exception.

106
00:07:39,900 --> 00:07:44,310
You may find a retrial useful when connecting to a server, for example.

107
00:07:44,320 --> 00:07:50,250
Beware that if your code continuously fail, you risk ending up in an infinite loop.

108
00:07:50,430 --> 00:07:56,490
In order to avoid this, it's a good idea to set a limit on the number of times you want to retry to

109
00:07:56,490 --> 00:07:57,450
execute that code.

110
00:07:57,630 --> 00:08:01,600
Retry must be called within the rescue block as seen more often.

111
00:08:02,070 --> 00:08:04,660
So, for example, we have got this error over here.

112
00:08:04,860 --> 00:08:08,330
Now what we want is that we want to retry, to run this code.

113
00:08:08,340 --> 00:08:14,310
Now you know that this code is never going to get executed because you have got this extra B, something

114
00:08:14,310 --> 00:08:15,820
that is not a part of this.

115
00:08:16,050 --> 00:08:20,720
So what you will do is that right away here, let's say you just write in Retry.

116
00:08:20,730 --> 00:08:27,020
Now, retry means that you want to run this very cool piece of code again and again.

117
00:08:27,330 --> 00:08:30,830
So using retry is going to get this code executed again.

118
00:08:30,840 --> 00:08:33,120
So for now, we don't need this object Abargil.

119
00:08:33,570 --> 00:08:39,870
So if I just run this code, then as you can see, that is just executing, executing and executing.

120
00:08:40,020 --> 00:08:45,840
And it is going to keep executing because now we have created an infinite loop and by infinite loop.

121
00:08:45,840 --> 00:08:51,060
What does that mean is that, as I told you, that this code over here is never, never going to get

122
00:08:51,060 --> 00:08:51,640
executed.

123
00:08:51,780 --> 00:08:53,590
So since this is not going to get a good.

124
00:08:53,670 --> 00:08:58,740
So this is this rescue block is going to keep, try and keep try and keep trying, keep trying for an

125
00:08:58,740 --> 00:09:00,000
infinite number of time.

126
00:09:00,210 --> 00:09:04,830
So to stop it, just write some statement on this code so that this stops right over a hill.

127
00:09:06,320 --> 00:09:10,610
All right, so this just this as well, just write and.

128
00:09:12,400 --> 00:09:13,840
Inshore block.

129
00:09:17,030 --> 00:09:24,500
All right, now, what we are going to do to limit the retries statements is that we are going to introduce

130
00:09:24,500 --> 00:09:31,040
a variable that is going to actually limit the number of times a piece of gold is going to get tried

131
00:09:31,160 --> 00:09:32,190
to be executed.

132
00:09:32,600 --> 00:09:39,050
So right at the top, you are going to create a constant and that constant is going to be the retry.

133
00:09:40,340 --> 00:09:46,580
Limit, and we are going to initialize it to, let's say, a tree, so we only want this code to get

134
00:09:46,580 --> 00:09:51,530
executed to our we want to try this code three times to be more specific.

135
00:09:51,830 --> 00:09:56,480
And in the beginning, log what we are going to write and we are going to write and attempt.

136
00:09:58,430 --> 00:10:00,380
Equal to attempts.

137
00:10:05,680 --> 00:10:06,130
Zero.

138
00:10:06,400 --> 00:10:12,640
So actually, we have initialized the attempt equal to zero, and whenever this retry log is reached,

139
00:10:12,650 --> 00:10:15,190
what we want is that we want the attempts.

140
00:10:16,630 --> 00:10:24,100
To be incremented by one so increments is going to get incremented by one whenever this rescue block

141
00:10:24,100 --> 00:10:27,580
is reached and whenever this exception is raised right or held.

142
00:10:28,740 --> 00:10:33,720
So with the right now, we are going to specify and if condition as well, so we are going to retry.

143
00:10:33,750 --> 00:10:41,200
If the attempt is less then the retry limit, which we have specified right at the top, that is three.

144
00:10:41,400 --> 00:10:46,620
So if you don't run the score, you can see that it has actually ended because it tried the court.

145
00:10:46,890 --> 00:10:50,190
It tried to run it three times, but since it does not work.

146
00:10:50,610 --> 00:10:56,640
So that's why it just returned the whatever was a part of this entire block.

147
00:10:56,640 --> 00:10:58,560
And that is written right to a hail.

148
00:11:00,930 --> 00:11:06,450
Now, you must be thinking that if a piece of God is wrong, as you can see, that X equals zero is

149
00:11:06,450 --> 00:11:11,910
a code that is going to raise an exception, that what is the purpose of retrying this code other than

150
00:11:11,910 --> 00:11:14,180
just wasting our resources of the program?

151
00:11:14,490 --> 00:11:14,640
No.

152
00:11:14,700 --> 00:11:18,780
For example, you have a piece of code in which you want to try to connect to a server.

153
00:11:18,990 --> 00:11:21,690
Then a reader is going to be very useful.

154
00:11:21,690 --> 00:11:26,790
In that case, it is going to retry and it is going to keep attempting to connect to a server.

155
00:11:26,820 --> 00:11:33,720
Now you can just of limit this retry limit to infinity so that it is going to keep trying to connect

156
00:11:33,720 --> 00:11:36,690
to the server until and unless it is connected to the server.

157
00:11:36,890 --> 00:11:39,390
But you can also limit that connection request.

158
00:11:39,390 --> 00:11:43,140
You can just limit it to five so that it is going to try five times to connect to the server.

159
00:11:43,170 --> 00:11:45,310
So in that case, it is going to be very useful.

160
00:11:45,630 --> 00:11:48,920
But what about cases like these in which you have something like this?

161
00:11:49,530 --> 00:11:55,680
So for example, right here, let's say you have a variable that is y equal to two and let's say or

162
00:11:55,680 --> 00:11:57,510
not, let's just make it to zero.

163
00:11:57,990 --> 00:12:01,080
So now let's say you have then divided by Aweil.

164
00:12:02,520 --> 00:12:08,520
Now, as you can see that it is straight away a kind of an error that is going to get caused by the

165
00:12:08,530 --> 00:12:10,640
zero division error.

166
00:12:10,650 --> 00:12:12,390
That is a part of the standard error.

167
00:12:12,390 --> 00:12:16,940
And it is going to just retry and it is going to just print me the spots in Chock-a-block.

168
00:12:17,340 --> 00:12:22,110
So if I just run the score, you can see that it is just printing me this in block right over here.

169
00:12:23,080 --> 00:12:31,390
But what if I want to correct this quote, so if any kind of error occurs right over here in this standard

170
00:12:31,390 --> 00:12:31,760
error?

171
00:12:32,050 --> 00:12:37,540
So what I want or let's just be very specific and just use the zero.

172
00:12:39,450 --> 00:12:40,260
División.

173
00:12:43,520 --> 00:12:49,340
Error, so whenever a zero division error occurs, what we are going to do is that we are going to change

174
00:12:49,340 --> 00:12:54,860
the value for why let's say I just change the value it for it to be to and write off the list.

175
00:12:54,860 --> 00:12:58,640
I just write in puts why I will not want to help.

176
00:12:59,950 --> 00:13:05,290
So for the first attempt, it is going to just initialised attempt to zero, it is going to try this

177
00:13:05,290 --> 00:13:08,830
good o'haire since this is an error, it is going to get caught, right?

178
00:13:08,860 --> 00:13:12,880
Well, here it is going to change the value for what you could do.

179
00:13:12,880 --> 00:13:17,530
And it is going to increment the attempt, which is now going to get equal to one and it is going to

180
00:13:17,530 --> 00:13:19,640
retry since the condition over here is true.

181
00:13:19,660 --> 00:13:25,240
Now, when it retries, since we have changed the value of Y, so that's why this statement over here

182
00:13:25,240 --> 00:13:29,530
is now going to get through and this statement over here is going to generate MI five.

183
00:13:29,540 --> 00:13:34,330
And after that I'm going to get this as an output that is in CHOCK-A-BLOCK because this is going to

184
00:13:34,330 --> 00:13:35,240
get executed all day.

185
00:13:35,280 --> 00:13:40,720
So if I just run school now, you can see that you have got five and you have got an Chock-a-block Aubagio.

186
00:13:40,720 --> 00:13:44,900
So that's why the retry can be useful in such cases.

187
00:13:45,280 --> 00:13:50,140
So that's it with the two key words we have to cover in this tutorial.

188
00:13:50,140 --> 00:13:56,330
And also, you have learned the concept of the exception objects, so I guess that's it with this tutorial.

189
00:13:56,350 --> 00:13:58,120
Thank you so much, guys, for watching.

190
00:13:58,120 --> 00:14:00,550
And I will see you guys in the next oratorio.
