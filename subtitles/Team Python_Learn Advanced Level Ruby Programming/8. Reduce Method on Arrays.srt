1
00:00:00,300 --> 00:00:01,380
Hey, guys, what's up?

2
00:00:01,410 --> 00:00:04,870
This is a marathon, and I welcome you to another tutorial on this course on Ruby.

3
00:00:04,890 --> 00:00:09,190
And in this story, we are going to see how to reduce the error to a single value.

4
00:00:09,540 --> 00:00:15,030
Now, when you are working with a set of data, you may find that you need to roll up the data up into

5
00:00:15,030 --> 00:00:19,280
a single value, such as, let's say, count some results, result.

6
00:00:19,620 --> 00:00:28,730
One way you might do this is using a variable and you can use just the each method to just do your job.

7
00:00:29,010 --> 00:00:32,740
But there is one more way that is Beldin and Ruby.

8
00:00:32,760 --> 00:00:36,210
But first, we will try on what the regular one that is using the each method.

9
00:00:36,240 --> 00:00:40,820
So we will define a variable that is some that is going to equal to zero.

10
00:00:41,340 --> 00:00:46,350
And in here we are going to define an area that contains, let's say, these four elements, one, two,

11
00:00:46,350 --> 00:00:47,240
three and four.

12
00:00:47,250 --> 00:00:49,290
We are going to call each method on this.

13
00:00:49,290 --> 00:00:49,860
And you know what?

14
00:00:49,860 --> 00:00:54,960
The each method do it actually iterate over all the elements and do some job on it.

15
00:00:55,110 --> 00:00:59,280
And what is going to be that is going to be whatever is specified over here.

16
00:00:59,370 --> 00:01:03,390
We are going to write a number here, which is going to have the first value.

17
00:01:03,690 --> 00:01:06,870
And what we are going to write in here is going to.

18
00:01:08,820 --> 00:01:09,450
Some.

19
00:01:10,850 --> 00:01:18,740
Less equal to whatever that number is and down here, what you can do is that you can just try and print

20
00:01:19,460 --> 00:01:24,960
some Joe, just run the score and you can see that you have got the sum that is one plus two equals

21
00:01:24,980 --> 00:01:28,220
three three plus three equal to six and six plus four equal to ten.

22
00:01:28,250 --> 00:01:34,090
So what's going on over here is that for the first iteration, it is going to take one into the numbers.

23
00:01:34,090 --> 00:01:39,890
So a number is going to equal to one and the sum is going to equal to zero after that one.

24
00:01:39,920 --> 00:01:41,090
This attrition works.

25
00:01:41,090 --> 00:01:44,170
What it is going to do is that it is going to add the sum to the number.

26
00:01:44,450 --> 00:01:51,670
So the sum is now going to equal to zero plus one and it is going to equal to one in the next iteration.

27
00:01:51,680 --> 00:01:53,120
The number is.

28
00:01:53,980 --> 00:02:01,180
And it's just moving up in the next iteration, the number is going to be two and the sum is going to

29
00:02:01,180 --> 00:02:08,260
be now one, which has been updated, and now the sum is going to equal to one plus two, and that is

30
00:02:08,260 --> 00:02:10,030
going to make it equal to three and so on.

31
00:02:10,030 --> 00:02:16,380
It will go till the last iteration, until it has got the last result that is done.

32
00:02:16,780 --> 00:02:23,610
So to do this very same job, what you can do is that you can use the reduced method as well.

33
00:02:23,950 --> 00:02:31,900
Other reduced methods, it rates out an entire area and it keep running total by executing a bindery

34
00:02:31,900 --> 00:02:33,490
operation for each element.

35
00:02:33,820 --> 00:02:40,710
The reduced method accepts an initial value for the result, as well as a block with two local values.

36
00:02:40,920 --> 00:02:45,300
That is a reference to the result and a reference to the current element.

37
00:02:45,610 --> 00:02:49,590
Now, inside of the block, you specify the logic to compute the end result.

38
00:02:50,470 --> 00:02:56,560
Since we want to sum up an area, we will initialize the result to zero and then add the current value

39
00:02:56,800 --> 00:02:59,460
to the result in the block.

40
00:02:59,650 --> 00:03:06,820
So how that is going to be done, let's just do it with the help of an example so we don't need this

41
00:03:06,820 --> 00:03:10,970
because the initialization is going to be done by the reduced function itself.

42
00:03:11,140 --> 00:03:12,730
So what are you going to write in?

43
00:03:12,740 --> 00:03:16,360
You are going to write in a variable, let's say, out that is going to store the results.

44
00:03:16,360 --> 00:03:21,190
So that is going to equal to one, two, three for the area which you want to sum up and you don't need

45
00:03:21,190 --> 00:03:21,910
to reduce.

46
00:03:22,180 --> 00:03:25,230
Sorry, you don't need each O'Haire you need to reduce over here.

47
00:03:25,240 --> 00:03:26,830
So we are going to write and reduce.

48
00:03:27,370 --> 00:03:29,760
We are going to just remove this from here.

49
00:03:30,130 --> 00:03:34,180
And what we are going to do is that, as I told you, it contains two variables.

50
00:03:34,480 --> 00:03:40,210
And in that the first variable is basically the reference to a result and the second one is a reference

51
00:03:40,210 --> 00:03:41,410
to the current element.

52
00:03:41,710 --> 00:03:44,560
So those elements are, let's say r e.

53
00:03:44,560 --> 00:03:45,010
S.

54
00:03:46,300 --> 00:03:48,380
And the second one is the current element.

55
00:03:48,700 --> 00:03:55,150
So what we are going to do over here is that we are going to write and are as plus equal to the current

56
00:03:55,150 --> 00:03:55,630
value.

57
00:03:56,140 --> 00:03:59,430
So that is what is going to just do our job.

58
00:03:59,440 --> 00:04:03,120
All you need to do is that you have to write in out of a hill.

59
00:04:03,910 --> 00:04:09,490
And if you just run this code, you can see that you have got tenure here as well.

60
00:04:09,850 --> 00:04:15,880
Now, you can also initialize the starting value as well if you want to.

61
00:04:16,840 --> 00:04:20,980
You can just write in zero, which is going to be the starting value for.

62
00:04:22,570 --> 00:04:27,580
You can see that you have got the very same outfit, so if you use this, if you don't use it, it is

63
00:04:27,580 --> 00:04:30,820
going to work properly if you plan to initialize the result to zero.

64
00:04:30,850 --> 00:04:33,510
You can just admit the argument and just passed the blog.

65
00:04:33,520 --> 00:04:37,900
This will automatically send the result, the first value in the error.

66
00:04:38,110 --> 00:04:40,750
So if you don't just don't do it.

67
00:04:40,750 --> 00:04:43,590
What it is going to do, it is going to treat this as the first value.

68
00:04:43,600 --> 00:04:49,660
But if you just do it, it is going to have no effect because zero added to anything always generate

69
00:04:49,810 --> 00:04:51,150
the very same zero.

70
00:04:51,520 --> 00:04:55,860
So the reduced method also in the reduced manner.

71
00:04:55,880 --> 00:05:04,150
You also specify a binary method or a method on one object that accepts another object as its argument,

72
00:05:04,150 --> 00:05:06,760
which it will execute for each entry in the area.

73
00:05:07,120 --> 00:05:11,920
Now, the REDUCE then uses the result to create a single value.

74
00:05:12,010 --> 00:05:17,530
For example, when you just try to Placita in Ruby, you're actually invoking the plus method on the

75
00:05:17,530 --> 00:05:24,280
integer two so that if you just write in two plus two, that is two dot plus two.

76
00:05:24,490 --> 00:05:29,530
So that is basically calling the plus method on this too.

77
00:05:29,710 --> 00:05:36,350
So Ruby uses some syntactic sugar so you can express it as two plus two in the simple way.

78
00:05:36,550 --> 00:05:42,730
Now the reduced method lets you simplify and specify a binary method by passing its name as a symbol.

79
00:05:43,040 --> 00:05:50,050
That means you can pass the colon and plus to the reduced method to sum the error.

80
00:05:50,470 --> 00:05:56,290
Now, how that is going to be done, it is going to simplify this job ahead.

81
00:05:56,300 --> 00:05:57,860
That is to sum an error as well.

82
00:05:58,210 --> 00:06:03,300
So all you have to do over here is that you don't need all this stuff over here.

83
00:06:03,730 --> 00:06:05,050
Just remove it from here.

84
00:06:06,240 --> 00:06:12,210
And all you have to do that, you have to write a column and you have to write and plus sign of how

85
00:06:12,370 --> 00:06:18,690
the rest is going to be the same, just run the score and you can see that you still have got the 10

86
00:06:18,690 --> 00:06:24,690
hour hell so you can use the reduced to do more than just add a list of numbers.

87
00:06:24,690 --> 00:06:27,780
You can use it to transform values as well.

88
00:06:28,020 --> 00:06:35,700
Remember that the reduce reduces an error rate to a single value, but there is no rule that says the

89
00:06:35,940 --> 00:06:38,870
other single value cannot be another array.

90
00:06:39,390 --> 00:06:45,660
Now, let's say we have a list of values that we need to convert to integer, but we only want the values

91
00:06:45,660 --> 00:06:51,240
that can be converted into integers so we could use the reject function of our hair, which you have

92
00:06:51,240 --> 00:06:56,910
covered in the previous tutorial, to throw out the non American values and then use the map to convert

93
00:06:56,910 --> 00:06:58,430
the remaining values to integer.

94
00:06:58,620 --> 00:07:04,740
But we can do it all in one step with the reduced function is out now.

95
00:07:04,740 --> 00:07:11,400
Use an empty array as the initialization value, then in the block, convert the current value to an

96
00:07:11,400 --> 00:07:13,200
integer with the integer method.

97
00:07:13,470 --> 00:07:19,260
If the value cannot be converted to an integer, that integer will raise an exception which you can

98
00:07:19,260 --> 00:07:21,590
catch and assign a node to the value.

99
00:07:21,900 --> 00:07:26,760
Then take the value, put it in an array, but only if it is not nil.

100
00:07:27,030 --> 00:07:32,790
Now, to try out the code, what you can do is that just remove this from here.

101
00:07:32,800 --> 00:07:37,760
We will have an error in which we will have integer as well as we will have string.

102
00:07:37,770 --> 00:07:43,830
So that's where the reduced function is going to work and it is going to only just have those number

103
00:07:43,830 --> 00:07:45,850
that are integer as well.

104
00:07:45,870 --> 00:07:50,180
We are going to do is that we are going to rescue the values that are there.

105
00:07:50,490 --> 00:07:53,490
So we are going to just write and.

106
00:07:55,210 --> 00:07:55,780
One.

107
00:07:57,390 --> 00:07:58,020
Do.

108
00:08:00,170 --> 00:08:05,540
Three, and let's say then comes a value that should not be a part of this.

109
00:08:05,900 --> 00:08:08,360
And finally, we can have four, we going to have five.

110
00:08:08,370 --> 00:08:11,480
So this is basically the area we are going to use.

111
00:08:12,090 --> 00:08:14,630
I guess we just missed this exclamation.

112
00:08:14,670 --> 00:08:16,810
Well, here now it is perfectly fine.

113
00:08:17,720 --> 00:08:21,980
Now, what you can do over here is that you can just use the reduced function of a hill.

114
00:08:22,400 --> 00:08:27,590
So what we are going to do is that we are going to write and integers equal to.

115
00:08:29,940 --> 00:08:32,490
X dot reduce.

116
00:08:35,510 --> 00:08:38,210
And with the reduced, what we are going to do is.

117
00:08:41,670 --> 00:08:47,820
We are going to specify these brackets over here, which means that this is an error, so we're going

118
00:08:47,820 --> 00:08:52,230
to rewrite and do just click enter the end is going to get generated.

119
00:08:52,230 --> 00:08:57,540
And over here, what you can do is just specify these.

120
00:08:58,580 --> 00:09:01,700
And you can just write in every.

121
00:09:03,760 --> 00:09:04,880
And current.

122
00:09:07,230 --> 00:09:14,460
Then you can just ride and the value is going to equal to the class integer that is a built in word

123
00:09:14,470 --> 00:09:16,490
you can just ride in the current value.

124
00:09:16,800 --> 00:09:23,160
So it is going to actually get each and every every value, one at a time, and it is going to check

125
00:09:23,160 --> 00:09:25,150
it if it is an integer or not.

126
00:09:25,440 --> 00:09:28,980
So if it is, what it is going to do is that it is going to.

127
00:09:30,710 --> 00:09:31,880
Rescue, no.

128
00:09:33,350 --> 00:09:39,620
And finally, we are going to push the elements into an area that are basically.

129
00:09:43,820 --> 00:09:49,190
The elements that are in danger, so we are going to ride and value and we are going to use the unless

130
00:09:49,760 --> 00:09:51,120
well, you don't know.

131
00:09:51,320 --> 00:09:56,720
So if the value is no, we are going to push it and we are going to ride an area where hell.

132
00:09:58,520 --> 00:10:03,770
And I think we have a problem here, that's why this is not color, that's purple.

133
00:10:03,980 --> 00:10:06,220
Yes, I call it the problem.

134
00:10:06,220 --> 00:10:06,730
My bad.

135
00:10:06,740 --> 00:10:12,170
You have to write this as the wrong bracket is not the curly brackets of hair.

136
00:10:12,170 --> 00:10:13,940
And you can see that you've got this will help.

137
00:10:14,360 --> 00:10:16,640
So all this is perfectly fine.

138
00:10:16,640 --> 00:10:17,450
All right.

139
00:10:17,460 --> 00:10:19,000
In here, is that right?

140
00:10:19,020 --> 00:10:22,410
Writing puts in teachers will help run the school.

141
00:10:22,610 --> 00:10:25,970
And you can see that you have got the elements.

142
00:10:25,970 --> 00:10:28,270
What you want to point out, one, two, three, four, five.

143
00:10:28,280 --> 00:10:30,620
You can see that it has been simply eliminated.

144
00:10:30,650 --> 00:10:37,040
So to explain what's going on over here, basically we have defined an area which is a combination of

145
00:10:37,490 --> 00:10:41,690
numbers as well as we have got this area here, which is an alphabet number.

146
00:10:42,050 --> 00:10:46,610
So are you going to do is that you are going to have this in digits about how you were going to write

147
00:10:46,610 --> 00:10:48,770
in the extra traduce for that?

148
00:10:48,770 --> 00:10:56,540
And what what is the use of reduced function is it is going to convert the entire area into a single

149
00:10:56,540 --> 00:10:58,100
value, so.

150
00:10:59,310 --> 00:11:06,360
What is going on over here is that we have used an empty array as the initialization value, which is

151
00:11:06,360 --> 00:11:13,230
right or held so reduced basically whenever as in the previous case when I was just summing up the numbers,

152
00:11:13,230 --> 00:11:18,000
if you just remember, I just tried and reduce and then end the brackets.

153
00:11:18,000 --> 00:11:19,500
I just right in zero.

154
00:11:19,830 --> 00:11:23,760
And that means that I want to start the initialization value of zero.

155
00:11:23,790 --> 00:11:26,340
So when you write in reduced and these empty brackets.

156
00:11:26,400 --> 00:11:32,310
Well, here's what this means, that we are using the empty array as the initialization value, then

157
00:11:32,310 --> 00:11:39,900
what in the block we do is that we convert the current value to an integer with the integer function.

158
00:11:39,930 --> 00:11:45,840
So what's going on over here is that it is going to take the current value that is going to be for the

159
00:11:45,840 --> 00:11:46,740
first iteration.

160
00:11:46,740 --> 00:11:49,890
One, it is going to convert it into a string.

161
00:11:51,240 --> 00:11:57,570
And if the value cannot be converted into dijo, what it is going to do is it is going to raise an exception

162
00:11:57,570 --> 00:12:03,390
which you can catch and assign it Danielle values to be just right and risk, you know, if that value

163
00:12:03,690 --> 00:12:06,840
is not is not able to convert into strength.

164
00:12:06,870 --> 00:12:12,030
So for this value, when the attrition number four is going to get executed for this block over here,

165
00:12:12,360 --> 00:12:16,170
we know that the current value then can not be converted into an integer.

166
00:12:16,180 --> 00:12:21,870
So instead, to raise an exception, what you can do is that you can just rescue that exception and

167
00:12:21,870 --> 00:12:23,640
you can just ride and rescue Nullable here.

168
00:12:23,970 --> 00:12:26,060
And you don't need to worry about this.

169
00:12:26,310 --> 00:12:26,780
Go ahead.

170
00:12:26,790 --> 00:12:31,820
That is going to be a part of the future tutorials when we will be covering the exception handling.

171
00:12:31,950 --> 00:12:38,760
But for now, you only need to understand that in order to not raise any kind of error message, because

172
00:12:38,970 --> 00:12:41,480
we know that it cannot be converted into integer.

173
00:12:41,670 --> 00:12:46,650
So that's why we have just right in this so that no kind of error occur and do the error message.

174
00:12:46,650 --> 00:12:48,730
We will just assign a no value.

175
00:12:49,290 --> 00:12:56,370
So after all, this is run, what we will have is that down here we will have the X.

176
00:12:57,630 --> 00:12:58,660
Zero location.

177
00:12:58,680 --> 00:13:09,060
We will have one then soon we will have the entire values, but for this ex as three, which basically

178
00:13:09,060 --> 00:13:14,250
contains this area here, because this is a zero for second and third location, what we will have is

179
00:13:14,250 --> 00:13:16,080
that we will have unsalable help.

180
00:13:17,210 --> 00:13:23,630
So this line, I hope you understood this, we have a signed we have converted the numbers into strengths,

181
00:13:24,080 --> 00:13:29,780
not in the strings, we have converted them into integers and we have assigned a new value to the.

182
00:13:30,710 --> 00:13:36,520
Elements which cannot be converted into strength, so extreme malcontents Miller and the rest of the

183
00:13:36,660 --> 00:13:38,930
contains one, two, three, four or five, respectively.

184
00:13:39,500 --> 00:13:45,620
Now, if you talk about this line, what's going on over here is that after converting numbers into

185
00:13:45,620 --> 00:13:53,360
strengths, what we will do is that we will take the value and put it in the area, which has been written

186
00:13:53,370 --> 00:13:54,110
right over here.

187
00:13:54,110 --> 00:13:58,100
And that is going to be this array, which is initialized to zero for now.

188
00:13:58,430 --> 00:14:04,040
So what we are going to do is that we are now going to push the values and what are those values those

189
00:14:04,040 --> 00:14:05,270
values are going to be?

190
00:14:05,300 --> 00:14:06,110
This will help.

191
00:14:06,380 --> 00:14:12,260
But since we know that we have also got this extra unit over here and we don't want this value to get

192
00:14:12,260 --> 00:14:14,360
pushed into the area we are creating.

193
00:14:14,370 --> 00:14:18,440
So what we are going to write and we are going to use the Wolinsky whatever here and we are going to

194
00:14:18,440 --> 00:14:22,100
push elements into the area unless the value is now.

195
00:14:22,130 --> 00:14:28,490
So for this this statement is not going to get executed and this is not going to get pushed into this

196
00:14:28,490 --> 00:14:28,820
area.

197
00:14:28,970 --> 00:14:32,810
So just do this, add up to that just right in this here.

198
00:14:32,810 --> 00:14:34,370
Right in over here.

199
00:14:34,370 --> 00:14:38,720
And it is going to have the area that is the number excluding the SOHEL.

200
00:14:39,350 --> 00:14:45,830
So final nodes, whenever you have a list of elements that you need to convert to a single value, you

201
00:14:45,830 --> 00:14:51,120
might be able to solve it with a reduced function, as you have seen in this tutorial.

202
00:14:51,980 --> 00:14:55,900
So I guess we have covered a lot for this tutorial.

203
00:14:56,090 --> 00:14:59,360
I will see you guys in the next tutorial with some more interesting topics.

204
00:14:59,570 --> 00:15:00,890
So by VITELLIN.
