1
00:00:00,430 --> 00:00:01,510
Hey, guys, what's up?

2
00:00:01,540 --> 00:00:06,490
This is American, and I welcome you to an editorial on this course, Ruby and in.

3
00:00:07,310 --> 00:00:11,460
We are going to be covering two functions that can be applied on strengths.

4
00:00:11,710 --> 00:00:14,560
The first one is going to be the string split function.

5
00:00:14,560 --> 00:00:19,670
And then we are going to see how to find the largest number and a specific string.

6
00:00:20,620 --> 00:00:24,690
So talking about the first one, we have this string split function.

7
00:00:25,060 --> 00:00:31,330
So basically taking a string and splitting it with the help of a delimiter is a very common task in

8
00:00:31,330 --> 00:00:31,840
Ruby.

9
00:00:33,040 --> 00:00:40,630
A string split function basically divides a string into some strings based on a delimiter, which return

10
00:00:40,630 --> 00:00:43,300
an array of these substrates.

11
00:00:44,490 --> 00:00:45,600
So if you talk about.

12
00:00:46,870 --> 00:00:54,370
The syntax of this split function, we have this right over here, it is Trenda split and then you have

13
00:00:54,370 --> 00:00:56,790
to write in the number that is going to be the delimiter.

14
00:00:57,160 --> 00:01:02,380
So the string split function basically takes an optional second parameter as well.

15
00:01:02,390 --> 00:01:03,960
That represents the limit.

16
00:01:04,930 --> 00:01:11,440
If you talk about that second parameter, if that limit parameter is omitted, the trailing Mulford's

17
00:01:11,440 --> 00:01:12,760
are going to be suppressed.

18
00:01:13,120 --> 00:01:17,560
If the limit is a positive number at most, that number of pages will be returned.

19
00:01:17,570 --> 00:01:23,230
For example, if the limit is one, the entire string is going to be written as the only entry in that

20
00:01:23,230 --> 00:01:23,670
area.

21
00:01:23,980 --> 00:01:26,770
If it is something greater than one, let's say two.

22
00:01:26,770 --> 00:01:32,730
So it is going to divide that area or you can say a string into two elements.

23
00:01:33,160 --> 00:01:39,340
Then if that limit is negative, then there is no limit to the number of pages written and the trailing

24
00:01:39,340 --> 00:01:42,220
motives are basically suppressed.

25
00:01:43,340 --> 00:01:51,500
So let's move on to the second part before we go on to our Ed, so the second one is how to find the

26
00:01:51,500 --> 00:01:56,090
largest word in a specific string for this.

27
00:01:56,120 --> 00:01:58,400
The split function is going to help us out again.

28
00:01:58,400 --> 00:01:59,870
It is going to split the number.

29
00:01:59,870 --> 00:02:05,570
Then we are going to use the sort of function that is going to sort the area starting on from the long,

30
00:02:05,570 --> 00:02:07,490
shortest number to the longest number.

31
00:02:07,700 --> 00:02:10,460
And then we can apply the reverse method on that.

32
00:02:10,460 --> 00:02:16,390
And all that is going to be covered in a quick example, which I will be covering just now.

33
00:02:16,580 --> 00:02:19,590
So we will just move on to our item.

34
00:02:20,390 --> 00:02:24,800
So starting on with our first function, that is the string split function.

35
00:02:25,160 --> 00:02:32,600
So to start on with a very simple example, let's say we have a simple string that is hello and we want

36
00:02:32,600 --> 00:02:33,530
to split it.

37
00:02:35,560 --> 00:02:39,460
And Brackett's, you have to specify the arguments to force.

38
00:02:39,790 --> 00:02:43,830
Now, let's say I do not specify anything as an argument over here.

39
00:02:43,830 --> 00:02:46,590
I just have a Puzzo here are underscored.

40
00:02:46,600 --> 00:02:52,690
And as you can see, that it has split the number as and it has returned to an area to me.

41
00:02:52,840 --> 00:02:57,370
And as you can see, that it has split the complete word each by string.

42
00:02:57,370 --> 00:03:00,100
As you can see, that edges separate here is separated.

43
00:03:00,100 --> 00:03:03,400
And I've got this L and this and then this over here.

44
00:03:04,030 --> 00:03:09,910
So, for example, I want to have something like let's say I want to specify some number over here.

45
00:03:09,910 --> 00:03:10,810
Let's say a one.

46
00:03:12,350 --> 00:03:19,940
Iran discord, and it is going to return this split, this hallow word over here as a complete stranger

47
00:03:19,940 --> 00:03:20,350
will help.

48
00:03:20,630 --> 00:03:26,400
Now, if I specify, let's say, to O'Hare or underscore, it is again going to specify this hello,

49
00:03:26,510 --> 00:03:26,800
help.

50
00:03:27,170 --> 00:03:32,900
Now, what is the reason behind this is that it split the number based on this whatever argument we

51
00:03:32,900 --> 00:03:38,510
are specifying and implementing on this number we've had now since this, too, is not a part of this

52
00:03:38,840 --> 00:03:39,450
item alone.

53
00:03:39,800 --> 00:03:42,050
So that's why it is joining me, the complete string.

54
00:03:42,050 --> 00:03:47,060
Now, if I just specify, let's say, the word from which I want to splitted, for example, I want

55
00:03:47,060 --> 00:03:49,370
to split the string starting on from this.

56
00:03:49,790 --> 00:03:51,560
So if I just specify Etoile.

57
00:03:53,030 --> 00:03:58,880
This go down, as you can see, that edge has now been separated, which is before and after.

58
00:03:59,120 --> 00:04:06,050
I have got this Al, which is now a separate string o'haire, for example, if I just specify L'OrÃ©al,

59
00:04:06,680 --> 00:04:07,560
run this code.

60
00:04:07,790 --> 00:04:10,970
And as you can see, that it has split the string.

61
00:04:10,970 --> 00:04:17,540
And as you can see that it has skipped basically both the EL, which we have right over here as it has

62
00:04:18,120 --> 00:04:18,420
here.

63
00:04:18,530 --> 00:04:22,370
And as you can see that it has achey then Espace and then this.

64
00:04:22,370 --> 00:04:22,880
All right.

65
00:04:22,880 --> 00:04:23,390
Over here.

66
00:04:24,840 --> 00:04:30,300
Then if you specify, let's say, the last thing that is or here, run this school, and as you can

67
00:04:30,300 --> 00:04:36,030
see, that is no more a part of this and it is right over here printed on the screens.

68
00:04:36,540 --> 00:04:40,450
So we can have regular expressions as well.

69
00:04:40,470 --> 00:04:45,030
We can have the string characters by itself as well.

70
00:04:45,180 --> 00:04:48,560
So, for example, we want to do it with a regular expression.

71
00:04:48,720 --> 00:04:50,610
So let's say we have these.

72
00:04:52,540 --> 00:04:57,970
Do Backslash is here and you can see that it has returned achievable all right, O'Haire, which means

73
00:04:57,970 --> 00:05:01,120
that it has spread splitted it completely.

74
00:05:01,240 --> 00:05:04,700
Every character has been separated by itself.

75
00:05:04,930 --> 00:05:11,860
So if you want to specify some word oakhill so let's say I just tried Anello here and a plus sign will

76
00:05:11,860 --> 00:05:12,130
help.

77
00:05:12,490 --> 00:05:18,670
Ronda's going out, as you can see that I have E or if I do not specify this plus Hinohara, you can

78
00:05:18,670 --> 00:05:21,550
see that I have got an extra space over here.

79
00:05:22,360 --> 00:05:26,890
If you want to admit that base you can just write in a plus sign here on this code.

80
00:05:26,890 --> 00:05:29,300
And as you can see that it has h e or No.

81
00:05:29,600 --> 00:05:35,290
Basically what this means that it means that you have to add L with L'Amore, which means that you can

82
00:05:35,290 --> 00:05:39,780
just write and double over here as well and it is going to return you with the same output as well.

83
00:05:40,000 --> 00:05:41,980
So if you just write in, you will heal.

84
00:05:42,580 --> 00:05:46,120
And as you can see that you have got ATCH and Wahib.

85
00:05:46,360 --> 00:05:50,980
So the same thing you are doing with the quotation marks, you can do it with these backslash and that

86
00:05:50,980 --> 00:05:54,670
will coalesce the regular expression delimiter.

87
00:05:55,780 --> 00:06:01,800
Then comes the second part of the split function that deals with the second parameter, we can specify

88
00:06:02,020 --> 00:06:07,270
and as I told you, that that second parameter basically represent a limit.

89
00:06:07,630 --> 00:06:13,750
And if that limit is permitted, you have already seen the result that the trailing now are basically

90
00:06:13,750 --> 00:06:14,290
suppressed.

91
00:06:14,800 --> 00:06:22,360
Now, if that limit, we are going to just specify if it is a positive number, then at most that number

92
00:06:22,360 --> 00:06:23,650
of features will be written.

93
00:06:24,130 --> 00:06:29,710
For example, if you just specify one, it is going to return the same entry which we have used as a

94
00:06:29,710 --> 00:06:30,100
string.

95
00:06:30,370 --> 00:06:35,980
If the limit is negative, then there is no limit to the number of rules written and the trailing those

96
00:06:35,980 --> 00:06:38,140
fields are going to be not suppressed.

97
00:06:38,530 --> 00:06:42,000
So let's just specify the second argument.

98
00:06:42,370 --> 00:06:47,960
So let's just change the string to something so it is more workable with let's say it is a number.

99
00:06:47,980 --> 00:06:51,430
Now let's say one, two, three, four, five, six, seven, eight.

100
00:06:51,580 --> 00:06:53,800
So this is our number right here.

101
00:06:53,810 --> 00:06:55,020
We want to use this.

102
00:06:55,210 --> 00:06:58,360
So what we are going to do is that we are going to just remove it.

103
00:06:58,660 --> 00:07:04,510
And in a previous case, if you let's just specify for where here, run this gaudens, you can see that

104
00:07:04,870 --> 00:07:05,950
four has been skipped.

105
00:07:05,950 --> 00:07:09,490
And then we have got this five, six, seven, eight right over here.

106
00:07:09,760 --> 00:07:12,960
And we have this extra space being added.

107
00:07:12,970 --> 00:07:15,220
I would be dead explaining in a short while.

108
00:07:15,550 --> 00:07:22,210
So, for example, what I want is that I want to split it with four, but I want to return it as a single

109
00:07:22,210 --> 00:07:22,530
string.

110
00:07:22,540 --> 00:07:23,170
So what I'm with.

111
00:07:23,170 --> 00:07:23,470
Right.

112
00:07:23,470 --> 00:07:24,720
And I'm going to place a comma.

113
00:07:25,000 --> 00:07:28,030
I'm going to just write in one over here, run the score.

114
00:07:28,210 --> 00:07:34,030
And as you can see, that it has returned the entire string over here, which is one, two, three,

115
00:07:34,030 --> 00:07:35,110
four, five, six, seven, eight.

116
00:07:36,260 --> 00:07:38,180
Now, if I just write in to Abargil.

117
00:07:39,570 --> 00:07:45,720
Roundest Gordon, as you can see, that it has redone two strings one, two, three, then it has skipped

118
00:07:45,720 --> 00:07:48,570
four and then it has returned five, six, seven, eight, nine.

119
00:07:48,570 --> 00:07:52,980
The previous case that you have seen that I've in one and run the score, you can see that four is still

120
00:07:52,980 --> 00:07:54,830
available here and why it is available here.

121
00:07:55,200 --> 00:07:57,910
That will also be explained in a short while.

122
00:07:58,470 --> 00:08:04,770
So, for example, I want to, let's say, skip the space, which is present right over here between

123
00:08:04,770 --> 00:08:06,370
one, two, three, four and five, six, seven, eight.

124
00:08:06,660 --> 00:08:09,660
So does the split function apply on spaces as well?

125
00:08:09,670 --> 00:08:13,020
So let's just try out at a space over here or underscore.

126
00:08:13,020 --> 00:08:17,390
And as you can see, that it has been applied on this base as well.

127
00:08:17,400 --> 00:08:21,390
And as you can see that after the space, it has been split it into two strings.

128
00:08:21,390 --> 00:08:24,230
One, two, three, four is a separate and five, six, seven.

129
00:08:24,240 --> 00:08:30,480
It is a separate location of the area which has been retained by the split function on the string we

130
00:08:30,480 --> 00:08:31,410
have specified.

131
00:08:32,480 --> 00:08:38,840
So these examples were the shortest and the simplest, and in my experience, these were the common

132
00:08:38,840 --> 00:08:41,370
usages of the string split function.

133
00:08:41,930 --> 00:08:47,510
So when you start to go beyond the short and simple, you will find some behavioral oddities with the

134
00:08:47,510 --> 00:08:52,740
string split and it will always be with the regular expression delimiter.

135
00:08:53,240 --> 00:08:59,720
So, for example, you have this string one, two, three, four over here and you just specify the

136
00:08:59,720 --> 00:09:00,620
split function.

137
00:09:00,620 --> 00:09:03,740
Not on these anymore, but you just write in.

138
00:09:03,740 --> 00:09:08,690
Let's say this as one O'Haire underscore and as you can see that you have got two, three, four.

139
00:09:08,930 --> 00:09:15,620
Now, the expected output was that it should have returned to three, four over here just by skipping

140
00:09:15,620 --> 00:09:22,160
this one, as you have seen, one I would have just written calling a real one in between this one discord.

141
00:09:22,160 --> 00:09:26,090
And as you can see, that it worked in the same way it has returned to space.

142
00:09:26,090 --> 00:09:27,610
And then two, three, four.

143
00:09:27,800 --> 00:09:33,320
Now, the expected output, as it was in the case of Halo, it should have returned.

144
00:09:34,460 --> 00:09:39,630
This two, three, four as an output and not this extra space that has been added at this stop.

145
00:09:40,070 --> 00:09:43,340
So what is the reason behind this now?

146
00:09:43,760 --> 00:09:49,970
This internally, this string split function only uses the regular expression delimiters.

147
00:09:49,970 --> 00:09:55,550
If you pass in a string delimiter, it will escape for regular expression and it will be then turned

148
00:09:55,550 --> 00:09:57,320
into a regular expression.

149
00:09:57,350 --> 00:10:03,620
So this expression right here basically works something like it is this one, two, three, four dots.

150
00:10:03,620 --> 00:10:05,240
Bledsoe is just copy this.

151
00:10:07,030 --> 00:10:12,640
Instead of hair, and it should be one, two, three, four dots and in the brackets, what it is basically

152
00:10:13,180 --> 00:10:18,760
it is a regular expression and it is a new regular expression.

153
00:10:18,760 --> 00:10:26,770
And in between these bracket, what it is, it is basically a regular expression, dot escape, and

154
00:10:26,770 --> 00:10:29,110
it is basically escaping this one as a character.

155
00:10:29,380 --> 00:10:36,790
So what this O'Haire, basically, when we write something like this, what it is basically doing is

156
00:10:36,790 --> 00:10:42,580
that it is treating this as this statement, which is for you as simple as that.

157
00:10:42,590 --> 00:10:47,590
But in the background, it is running this entire statement over here that is a regular expression new

158
00:10:47,800 --> 00:10:49,330
and then it is creating.

159
00:10:50,150 --> 00:10:55,160
Another insider that is regular expression that escape, and it is escaping the character one, and

160
00:10:55,160 --> 00:10:56,950
it is printing two, three, four for you.

161
00:10:58,100 --> 00:11:04,910
Now, if you talk about the delimiter, I am referring to a regular expression, delimiters internally.

162
00:11:04,920 --> 00:11:07,510
That is what the strength plate uses.

163
00:11:07,790 --> 00:11:12,530
So the string split keeps track of five important pieces of information.

164
00:11:12,860 --> 00:11:15,050
The first one is the string itself.

165
00:11:15,260 --> 00:11:18,820
The second one is the result array, which is written as an output.

166
00:11:19,130 --> 00:11:25,970
The third one is the position marking where to start matching the string against the delimiter, which

167
00:11:25,970 --> 00:11:29,500
is basically the start position and that is initialized to zero.

168
00:11:30,410 --> 00:11:37,580
The fourth is the position marking where the string matched the delimiter and that is the position matched

169
00:11:37,580 --> 00:11:39,890
position and it is also initialized to zero.

170
00:11:40,220 --> 00:11:46,460
Then the third thing is the position marking the offset immediately following where the string matched

171
00:11:46,460 --> 00:11:47,180
the delimiter.

172
00:11:47,180 --> 00:11:50,120
Another string split operates in a loop.

173
00:11:50,300 --> 00:11:56,240
It continues to match the string against the delimiter until there are no matches that can be found.

174
00:11:56,570 --> 00:12:00,030
It performed the steps on each iteration.

175
00:12:00,380 --> 00:12:06,320
So what it do is that the first step is that it start from the start position, match the delimiter

176
00:12:06,320 --> 00:12:07,300
against the string.

177
00:12:07,550 --> 00:12:11,300
It said the matched position to where the delimiter matched the string.

178
00:12:11,600 --> 00:12:19,190
If the delimiter does not match the string, that it breaks the loop simply, but it creates a substring

179
00:12:19,190 --> 00:12:26,240
using the start and the matched position of the string be matched and it push this substring onto the

180
00:12:26,240 --> 00:12:28,940
result array, which you can see as an output.

181
00:12:29,030 --> 00:12:31,950
And then it said the start position for the next iteration.

182
00:12:32,210 --> 00:12:35,870
So if you talk about this very example we are covering right now.

183
00:12:37,820 --> 00:12:43,670
What is going on over here is in the first loop, the start position is initialized to zero.

184
00:12:43,670 --> 00:12:48,950
So I'm going to just ride in over here so that you can see more what I'm talking about.

185
00:12:48,960 --> 00:12:53,870
So the starting position is going to be initialized to zero then what it is going to.

186
00:12:53,870 --> 00:12:55,660
And this is basically the first loop.

187
00:12:55,740 --> 00:12:57,020
I'm going to also write in.

188
00:12:58,240 --> 00:12:59,600
First with him.

189
00:12:59,890 --> 00:13:04,060
So in the first lub, the first thing that is going to be done is that the start position is going to

190
00:13:04,060 --> 00:13:05,510
be initialized to zero.

191
00:13:05,930 --> 00:13:10,960
Now, the delimiter is going to be matched against the string that is one, two, three, four.

192
00:13:10,960 --> 00:13:13,690
And the delimiter over here is this one.

193
00:13:14,650 --> 00:13:19,390
So the first match occurs with the first character, as you can see, that we have one is a delimiter

194
00:13:19,390 --> 00:13:21,570
and one is the very first character of the string.

195
00:13:21,910 --> 00:13:26,260
So the first match occurs with the first character, one which is at position zero.

196
00:13:26,510 --> 00:13:29,590
Now, this sets the matched position to zero as well.

197
00:13:29,800 --> 00:13:36,370
So whenever it finds a match, it is going to look for the position of that match.

198
00:13:36,400 --> 00:13:41,680
So in our case, since this is Bush's position number zero, this is position number one, this is position

199
00:13:41,680 --> 00:13:42,040
number two.

200
00:13:42,040 --> 00:13:43,180
This is position number three.

201
00:13:43,450 --> 00:13:47,730
So our match with this delimiter is find found at position number zero.

202
00:13:47,740 --> 00:13:52,360
So it is going to have a variable match position and it is going to initialize it to zero where the

203
00:13:52,360 --> 00:13:55,720
match is found with the string we have specified right over here.

204
00:13:56,110 --> 00:14:02,740
Now a substring is created using the start and the matched positions and it is pushed on to the result

205
00:14:02,740 --> 00:14:03,130
array.

206
00:14:03,160 --> 00:14:11,090
Now this gives us the start and which translates to zero zero, which returns an empty string.

207
00:14:11,350 --> 00:14:17,770
So what I'm saying Ohare is that what it is going to do is that it is going to give us a string that

208
00:14:17,770 --> 00:14:19,210
looks something like.

209
00:14:23,360 --> 00:14:33,950
Start, comma, and and what it is basically is that it translates to the string that is one, two,

210
00:14:33,950 --> 00:14:40,510
three, four in our case, and it is basically going to be like zero comma zero.

211
00:14:40,970 --> 00:14:45,770
So that is basically an empty string, which it is going to return.

212
00:14:45,770 --> 00:14:52,080
And that is basically why it is having this extra space right over here.

213
00:14:52,550 --> 00:14:56,700
So the start position is now going to be reset to zero for the same.

214
00:14:57,110 --> 00:14:58,100
It is not going to be zero.

215
00:14:58,120 --> 00:14:59,120
It is going to be one.

216
00:14:59,420 --> 00:15:03,410
So they just copied this from here or here and in the second loop.

217
00:15:05,130 --> 00:15:08,160
The state position is now going to be one.

218
00:15:09,320 --> 00:15:14,810
The second loop is going to start, start is now one, the delimiter is going to be matched against

219
00:15:14,810 --> 00:15:20,360
the remainder of our string, now the remainder of a string, as we can just specify the will here and

220
00:15:20,430 --> 00:15:23,150
the remainder string that is remaining is two, three, four.

221
00:15:24,920 --> 00:15:29,450
Since one has been matched, it has been escaped, and now the remaining string is two, three, four

222
00:15:29,450 --> 00:15:33,050
over here, no matches found to the loop is just finished.

223
00:15:33,050 --> 00:15:38,960
A substring is created using the star position and the remainder of the string and it is pushed onto

224
00:15:38,960 --> 00:15:39,530
the result.

225
00:15:40,010 --> 00:15:44,840
So since in our first case, this was basically what was kept.

226
00:15:45,140 --> 00:15:48,260
So this return, basically the zero were here.

227
00:15:48,260 --> 00:15:50,100
That is basically an empty space.

228
00:15:50,360 --> 00:15:57,170
So since the star position and matched position was zero zero, so the star position is going to have

229
00:15:57,170 --> 00:16:04,250
this extra space and then the position at which the loop ends is basically going to be the remainder

230
00:16:04,250 --> 00:16:04,600
part.

231
00:16:04,790 --> 00:16:07,640
So it is going to return to three four as the second.

232
00:16:08,150 --> 00:16:12,740
If you just write and let's say to Oakhill, then run the score.

233
00:16:12,750 --> 00:16:17,120
Then as you can see that it has written one, then it is written three, four, and now you must be

234
00:16:17,120 --> 00:16:20,480
thinking that why it has not added any space now.

235
00:16:20,630 --> 00:16:27,740
Now the reason behind that is that since the match is found at the second step now, so we don't have

236
00:16:27,740 --> 00:16:33,920
the zero zero right over here since the matched position is now one and the star position where it starts

237
00:16:33,920 --> 00:16:36,610
is basically also two.

238
00:16:37,250 --> 00:16:40,760
So that's why and the remainder that is remaining is three four now.

239
00:16:40,970 --> 00:16:46,450
So that's why it has not returned an empty space, not over here.

240
00:16:46,460 --> 00:16:51,500
And this is also going to be to over here and the remainder is something going to be like one and then

241
00:16:51,500 --> 00:16:53,890
a space and then three, four because two has been skipped.

242
00:16:54,200 --> 00:16:56,650
So that is going to add the space over here.

243
00:16:56,660 --> 00:16:59,020
And if you have got this one, three, four over here.

244
00:16:59,030 --> 00:17:06,560
So I hope that you understand that why it is adding this space when the match is found at the first

245
00:17:06,560 --> 00:17:12,690
position and why it is not adding a space when the match is found at some other position.

246
00:17:13,520 --> 00:17:19,070
Now, there are hundreds of ways in which you can use a regular expression to use the split function

247
00:17:19,070 --> 00:17:19,610
on strings.

248
00:17:19,610 --> 00:17:27,070
But since we have not covered the regular expression, stop till now, so I don't want to get you confused.

249
00:17:27,260 --> 00:17:30,010
So all you need to do is stick to it now.

250
00:17:30,030 --> 00:17:37,160
And I hope that you have understood the basic running of how a split function works normally and how

251
00:17:37,160 --> 00:17:42,260
it works with the regular expression, considering this only example we have covered.

252
00:17:42,890 --> 00:17:49,130
So moving on to the second part of the tutorial that deals with how to find the largest number in a

253
00:17:49,130 --> 00:17:49,910
given string.

254
00:17:50,980 --> 00:17:56,340
So the first thing here we are going to do is that we are going to initialize a sentence, that arrow

255
00:17:56,380 --> 00:18:03,130
that is going to have certain words, and then we are going to split that in which we are going to split

256
00:18:03,130 --> 00:18:07,920
it in a way that every word is separated and in a form of an error.

257
00:18:08,230 --> 00:18:11,450
Then we are going to find the length of that area.

258
00:18:11,470 --> 00:18:15,940
And after finding the length of that area, what we are going to do is that we are going to apply the

259
00:18:15,940 --> 00:18:18,770
start function on that area.

260
00:18:19,240 --> 00:18:24,840
And since the start by a function, as you know, that does not accept any kind of parameter.

261
00:18:24,900 --> 00:18:29,230
So that's why we are going to use the reference operator over here.

262
00:18:29,650 --> 00:18:36,790
Then what we are going to do is since the start by a function start, the number starting from the lowest

263
00:18:36,790 --> 00:18:38,490
to the largest number.

264
00:18:38,500 --> 00:18:40,690
And in this case, we want to find the largest number.

265
00:18:40,710 --> 00:18:47,290
So we are going to reverse that error so that the largest number is at the starting position and the

266
00:18:47,290 --> 00:18:48,760
lowest number is at the end position.

267
00:18:48,760 --> 00:18:56,380
And then you can just output the zero location of that area and that is automatically going to have

268
00:18:56,380 --> 00:18:59,510
the largest number in whatever sentence you have written.

269
00:18:59,950 --> 00:19:03,280
So starting on, we will have, let's say, a variable, let's say.

270
00:19:04,600 --> 00:19:05,470
Sentence.

271
00:19:06,510 --> 00:19:14,030
And the sentence is, let's say, hello, this is a new tutorial.

272
00:19:15,080 --> 00:19:17,490
So this is the sentence we are going to be using.

273
00:19:17,840 --> 00:19:23,660
So what we are going to do now is that we are going to have split function and this split function,

274
00:19:23,740 --> 00:19:29,660
we are going to write and we are going to write in the sentence, not split.

275
00:19:29,940 --> 00:19:37,220
And you know that to split a function by having every word separated, you can just add a space over

276
00:19:37,220 --> 00:19:40,620
here on this court and you can see that you have got no kind of errors.

277
00:19:40,640 --> 00:19:45,110
This means that this has now been separated as a list of errors.

278
00:19:45,320 --> 00:19:48,200
So you can just write in votes split.

279
00:19:48,260 --> 00:19:49,550
We'll hear more on this.

280
00:19:49,550 --> 00:19:53,120
And as you can see that you have got this entire sentence.

281
00:19:53,540 --> 00:19:57,950
Every word has a separate location in an area now.

282
00:19:58,550 --> 00:20:00,240
So you can just remove it for now.

283
00:20:00,240 --> 00:20:01,580
And that was just to check out.

284
00:20:01,970 --> 00:20:07,220
Now, the next thing you need to do is that you need to find the length of this area you have created.

285
00:20:07,790 --> 00:20:11,330
So to find it, we are going to have a variable length.

286
00:20:12,750 --> 00:20:18,300
And we are going to just apply it on this function, so we are going to write and split.

287
00:20:19,790 --> 00:20:21,980
Dodd lent.

288
00:20:23,910 --> 00:20:30,120
And that is going to do our job on this, and it is running perfectly till now, the next thing you

289
00:20:30,120 --> 00:20:32,780
need to do is that you need to now sort this out.

290
00:20:32,780 --> 00:20:35,670
Right now, you are going to apply to start by a function on this.

291
00:20:35,670 --> 00:20:42,000
And you know that the by function basically arranges elements starting from the lowest to the largest.

292
00:20:42,510 --> 00:20:48,000
So what we are going to write about here is that we are going to write in sort equal to.

293
00:20:49,380 --> 00:20:54,420
And what we are going to start is basically, again, going to be displayed functions, so we are going

294
00:20:54,420 --> 00:20:55,380
to write and split.

295
00:20:56,560 --> 00:21:02,230
Dots are underscored by sort by a function is going to be used and we are going to use the reference

296
00:21:02,230 --> 00:21:03,080
operator over here.

297
00:21:03,100 --> 00:21:07,140
So we're going to use the and a calling and we are going to write in the land.

298
00:21:07,150 --> 00:21:15,570
So we want to sort it, tell the entire area we're going to sort it by land so then we can just write

299
00:21:15,580 --> 00:21:16,420
in a hail.

300
00:21:18,040 --> 00:21:22,480
So we have to reverse it because it has started it's starting from the lowest to the largest, we wanted

301
00:21:22,900 --> 00:21:24,600
to be from the largest to the lowest.

302
00:21:24,610 --> 00:21:28,950
So we are going to just reverse whatever has been started over here.

303
00:21:28,960 --> 00:21:33,610
So we are going to ride and start, not reverse Colin.

304
00:21:35,050 --> 00:21:41,250
Exclamation mark, sorry, this is not a call, and the next thing you have to do is that you can just

305
00:21:41,260 --> 00:21:42,040
write an.

306
00:21:44,590 --> 00:21:52,330
The largest number is basically what is the reverse zero position, so you can just put.

307
00:21:53,620 --> 00:22:00,070
Largest underscored, and you can see that the largest string has been redone, that is tutorial in

308
00:22:00,070 --> 00:22:00,550
our case.

309
00:22:00,550 --> 00:22:03,310
As you can see, that this word has the largest land.

310
00:22:03,310 --> 00:22:06,490
If you just, let's say, cut off some words from here.

311
00:22:06,490 --> 00:22:10,950
And now, the largest word, as you can see, is this halo here around the school.

312
00:22:10,960 --> 00:22:14,670
And as you can see, that you have got this halo now as your output.

313
00:22:15,040 --> 00:22:20,650
So that was how basically you can just print on the largest number from a given string.

314
00:22:20,670 --> 00:22:25,200
So the large print, the largest number, it does not have a specific function.

315
00:22:25,210 --> 00:22:29,200
You have to use certain functions to get the largest number of words.

316
00:22:29,200 --> 00:22:32,140
You have to have this sentence.

317
00:22:32,140 --> 00:22:34,300
Whatever here is, you have to split it.

318
00:22:34,820 --> 00:22:35,980
Then you have to find the land.

319
00:22:36,260 --> 00:22:39,300
Then you have to apply to start that function and to start by land.

320
00:22:39,310 --> 00:22:42,340
Then you have to reverse that whatever has been sorted out.

321
00:22:42,340 --> 00:22:48,070
And then the zero position basically contains the largest number and then you can just simply print

322
00:22:48,070 --> 00:22:48,520
it out.

323
00:22:49,910 --> 00:22:55,780
So I guess that is clearer now, if you want to let's say the smallest number than that is very easy.

324
00:22:55,790 --> 00:23:00,980
What you can do is that since you know the length of this, so you know that it contains zero one,

325
00:23:00,980 --> 00:23:04,750
two, three, four or five elements, or you can just write in five here.

326
00:23:05,270 --> 00:23:09,050
Now, it is not large as it is the smallest number.

327
00:23:10,720 --> 00:23:12,510
And smallest O'Hare as well.

328
00:23:13,810 --> 00:23:18,660
Can run the score and you can see that is basically the smallest number, which is right over here.

329
00:23:19,100 --> 00:23:25,550
So that's how you can use the split function, the land function, the side by and the reverse function.

330
00:23:25,820 --> 00:23:31,440
All these forward to get the smallest and largest number in a given string.

331
00:23:32,030 --> 00:23:35,300
So I hope you have understood the start by function.

332
00:23:35,690 --> 00:23:36,640
You have an answer story.

333
00:23:36,680 --> 00:23:41,180
The first function we have covered in this tutorial, a split function and how to find the largest number

334
00:23:41,180 --> 00:23:41,950
in a given string.

335
00:23:42,290 --> 00:23:44,080
So I guess that's it for this tutorial.

336
00:23:44,090 --> 00:23:45,830
Thank you so much, guys, for watching.

337
00:23:45,830 --> 00:23:48,320
And I'll see you guys in the next Attrill.
