1
00:00:00,300 --> 00:00:01,320
Hey, guys, what's up?

2
00:00:01,350 --> 00:00:05,010
This is a marathon, and I welcome you to another Dooralong discourse on Ruby.

3
00:00:05,010 --> 00:00:09,270
And in this story, we are going to cover a very interesting topic that is lambdas.

4
00:00:09,630 --> 00:00:15,060
Now, you already have covered blocks in the previous tutorial and you know that blogs are such an important

5
00:00:15,060 --> 00:00:15,960
part of Ruby.

6
00:00:15,960 --> 00:00:19,050
It's hard to imagine the language without blogs.

7
00:00:19,290 --> 00:00:24,330
But lambdas who love lambdas, you could go years without using one.

8
00:00:24,330 --> 00:00:30,060
They almost seem like a relic from a bygone age, but that's not quite true.

9
00:00:30,270 --> 00:00:37,300
Lambdas have some interesting tricks up their sleeves once you investigate them a little in this jittery

10
00:00:37,320 --> 00:00:43,860
little start on what the basics of lamda usage and then move on to some more interesting advanced usages

11
00:00:43,860 --> 00:00:45,620
of Lamda in Ruby.

12
00:00:45,990 --> 00:00:52,530
The main thing to remember about LAMDA is that they act like functions, blocks and trucks have their

13
00:00:52,530 --> 00:00:57,120
uses, but neither of them behaves 100 percent like a real life function.

14
00:00:57,420 --> 00:00:58,970
But lambdas do.

15
00:00:59,340 --> 00:01:01,470
So what is a lamda now?

16
00:01:01,470 --> 00:01:06,390
Olenna is a way to define a block and its parameter with some special syntax.

17
00:01:06,390 --> 00:01:13,070
You can save this lambda into a variable for later, use the same way you can do it for a function call.

18
00:01:14,010 --> 00:01:17,880
So the syntax for defining Lambda is right here.

19
00:01:17,880 --> 00:01:23,190
You have to write in a variable you attriting that equal to and a dash, then the less than sign and

20
00:01:23,190 --> 00:01:26,180
then you can define just a block, the very same do kind of block.

21
00:01:26,190 --> 00:01:30,120
And in this you can write the number of statements you want to define.

22
00:01:30,120 --> 00:01:30,570
So.

23
00:01:31,680 --> 00:01:37,530
And one more thing you have to do over here is that in the same way, when you initialize a function,

24
00:01:37,950 --> 00:01:39,390
you define some lines in it.

25
00:01:39,630 --> 00:01:40,990
It does not work directly.

26
00:01:41,010 --> 00:01:42,250
You have to call that function.

27
00:01:42,270 --> 00:01:44,300
The same goes for a lambda as well.

28
00:01:44,640 --> 00:01:48,210
When you define a function, something like this, you have to call it as well.

29
00:01:48,210 --> 00:01:52,360
And when you call it the code inside that block of lambda is going to get executed.

30
00:01:53,160 --> 00:01:56,550
So let's just see how this index is going to get implemented.

31
00:01:56,850 --> 00:01:58,500
So we will move on to Atem.

32
00:02:00,090 --> 00:02:08,250
And let's just define our very first lamda functional health, so we are going to name it as New Lamda

33
00:02:08,790 --> 00:02:13,510
and we are going to write an equal design, a space, a dash and a lesbian sign.

34
00:02:13,530 --> 00:02:15,180
And after that, you're going to define a blog.

35
00:02:15,180 --> 00:02:17,310
And in that blog, you are going to write in the code.

36
00:02:17,310 --> 00:02:19,410
You want to be the part of Lambda.

37
00:02:19,500 --> 00:02:23,730
So I will just write a single line saying that this is.

38
00:02:25,330 --> 00:02:26,260
Our first.

39
00:02:27,250 --> 00:02:32,800
Lambda, simple enough for underscored, and you can see that it has run without any kind of error.

40
00:02:32,950 --> 00:02:38,020
Now, one more thing I already told you is that the same way you have to call a function to execute

41
00:02:38,020 --> 00:02:41,560
the code that is in that function, log the same way.

42
00:02:41,560 --> 00:02:43,420
You have to go do it for a lambda as well.

43
00:02:43,430 --> 00:02:45,250
You have to call it this lambda.

44
00:02:45,280 --> 00:02:46,990
Now, how are we going to call it?

45
00:02:47,000 --> 00:02:49,560
We are going to call it using the dot call.

46
00:02:49,750 --> 00:02:52,930
So you have already covered that call and you know how it works.

47
00:02:52,940 --> 00:02:58,180
So all you have to do is that you have to use this variable new lambda here in which you have stored

48
00:02:58,180 --> 00:02:59,410
this lambda right over here.

49
00:02:59,710 --> 00:03:01,180
So we are going to write a new.

50
00:03:02,340 --> 00:03:03,900
Underscore Lamda.

51
00:03:05,090 --> 00:03:09,620
And with this, we are going to write in don't call, that's enough, just write it.

52
00:03:11,080 --> 00:03:16,840
All right, so I guess we have this extra hour here now, it seems perfect Dronett now, and as you

53
00:03:16,840 --> 00:03:22,370
can see that the cord inside the lambda has been executed and saying this is our first lambda.

54
00:03:22,390 --> 00:03:28,270
So as you have seen that defining a lambda one to the good inside it, just like defining a method,

55
00:03:28,300 --> 00:03:29,290
won't run the method.

56
00:03:29,560 --> 00:03:32,230
You need to use the call method for that.

57
00:03:33,710 --> 00:03:36,650
Now, there are other ways to call Alamdar as well.

58
00:03:36,680 --> 00:03:38,630
It's good to know that they exist.

59
00:03:38,640 --> 00:03:45,800
However, I recommend that you stick on with this call function for the clarity purpose, but for the

60
00:03:45,800 --> 00:03:49,010
sake of knowledge, I'll just tell you all of these methods now.

61
00:03:49,010 --> 00:03:50,980
We already have this lamda here.

62
00:03:51,260 --> 00:03:56,030
The first method you can do is that you can just use the dot com function to call it.

63
00:03:56,040 --> 00:04:02,150
Now, the second you can use it that you can drive in DOT and you can write in these brackets, just

64
00:04:02,150 --> 00:04:03,830
remove the skull from here, run this.

65
00:04:04,040 --> 00:04:07,520
And it is also going to run, as you can see, that it says this is our first lambda.

66
00:04:07,550 --> 00:04:08,930
This was the second way to call.

67
00:04:09,170 --> 00:04:14,030
The third way to call is just remove all of these and put the square brackets around this.

68
00:04:14,390 --> 00:04:15,950
And you can see that it is also run.

69
00:04:15,950 --> 00:04:18,470
And it is saying that this is our first lambda.

70
00:04:19,370 --> 00:04:24,800
The fourth function is that you have to write in DOT and triple equal to science and that is also going

71
00:04:24,800 --> 00:04:25,700
to work or on it.

72
00:04:25,700 --> 00:04:30,480
And you can see over here that it says this is our first lambda.

73
00:04:30,740 --> 00:04:36,800
So basically, these are the four ways in you in which you can basically call a lambda function.

74
00:04:37,040 --> 00:04:42,920
But I just suggest you that you stick on with the very first one that was the dot com because it is

75
00:04:42,920 --> 00:04:46,640
something more appropriate and something more programmatic.

76
00:04:47,180 --> 00:04:53,660
Now, Lambda can also take in arguments, which is now, again, something more interesting, and it

77
00:04:53,660 --> 00:04:55,910
is the very same way as functions do.

78
00:04:56,840 --> 00:05:02,930
So for a lambda to receive some kind of arguments, you have to specify those arguments.

79
00:05:03,800 --> 00:05:09,980
That has to be done right away, held up to this equal to Dash and Leavesden sine you have to specify

80
00:05:09,980 --> 00:05:11,930
the round brackets in that brackets.

81
00:05:11,940 --> 00:05:19,160
You have to write in the variable in which you want to store in whatever value is going to be passed

82
00:05:19,160 --> 00:05:20,340
and from the calling area.

83
00:05:20,360 --> 00:05:23,540
So for example, let's say I've got only one parameter.

84
00:05:23,540 --> 00:05:24,890
Let's say X is that parameter.

85
00:05:24,890 --> 00:05:29,450
So I'm going to write an X and the value that is going to be passed in from the calling card is going

86
00:05:29,450 --> 00:05:30,590
to be stored in this X.

87
00:05:31,010 --> 00:05:36,260
And what I want to do over here is that I would just write and put.

88
00:05:37,920 --> 00:05:38,460
Ex.

89
00:05:39,650 --> 00:05:48,170
Starick X. So what it is going to do is that it is going to multiply X with X, that seems, I guess,

90
00:05:48,170 --> 00:05:48,750
good enough.

91
00:05:49,560 --> 00:05:55,240
Now, right here off the skull, you have to pass in the value, let's say three is the value run scored.

92
00:05:55,250 --> 00:05:57,470
And as you can see, that tree has been passed over here.

93
00:05:57,470 --> 00:06:01,940
So that's why three was multiplied with three and nine was generated, which you can see right here

94
00:06:01,940 --> 00:06:03,950
on the Ademir and their output screen.

95
00:06:04,460 --> 00:06:09,740
So that's how basically you can also pass in arguments to a function just the same way you do with a

96
00:06:09,740 --> 00:06:10,250
function.

97
00:06:10,460 --> 00:06:13,610
Now there is one more property of lambdas.

98
00:06:13,610 --> 00:06:19,400
Ohare is that if you pass the wrong number of arguments to a lambda, it will raise an exception, just

99
00:06:19,400 --> 00:06:20,510
like a regular method.

100
00:06:20,540 --> 00:06:25,390
So basically lambda enforce the correct number of arguments.

101
00:06:25,820 --> 00:06:32,180
So for example, you have a lambda to just remove this and we will just do it with the lambda, which

102
00:06:32,180 --> 00:06:34,870
is basically the second way to initialize lambdas.

103
00:06:35,150 --> 00:06:42,770
So we're going to write an equal to Lambda and and the brackets Ohare here we are going to write in

104
00:06:42,770 --> 00:06:46,790
the vertical bars in which we are going to write in the arguments that is going to get receive and we

105
00:06:46,790 --> 00:06:51,380
are going to simply write and puts X Starick X over here again.

106
00:06:51,830 --> 00:06:58,000
And here we know that now this function o'haire that is Landow Wahib basically is expecting on the a

107
00:06:58,010 --> 00:06:58,850
single argument.

108
00:06:58,850 --> 00:07:02,510
So you could just write an error call and do not pass any kind of arguments.

109
00:07:02,930 --> 00:07:09,110
What it is going to generate is error message that says wrong number of arguments given zero, expected

110
00:07:09,110 --> 00:07:09,330
one.

111
00:07:09,360 --> 00:07:14,000
So this is basically the same error which is going to get generated if you are using a function and

112
00:07:14,000 --> 00:07:16,310
you pass in the wrong number of arguments.

113
00:07:16,610 --> 00:07:18,720
So this is also known as the argument error.

114
00:07:18,740 --> 00:07:23,520
So now if you just pass in to over here, run this, it is going to generate four.

115
00:07:23,750 --> 00:07:28,010
So basically, this is in this example, we got to concept.

116
00:07:28,010 --> 00:07:31,620
The first concept was how to initialize Alamdar with the lambda keyword.

117
00:07:31,640 --> 00:07:33,610
So this was the second way to initialize a lambda.

118
00:07:33,980 --> 00:07:38,570
And we also see that how lambda enforce the correct number of arguments.

119
00:07:38,990 --> 00:07:46,400
Now, if you in the next story had been covering the box, you will see that they do not enforce the

120
00:07:46,400 --> 00:07:47,690
correct number of arguments.

121
00:07:47,690 --> 00:07:49,550
But lambdas does do as you have seen.

122
00:07:50,090 --> 00:07:54,770
One more property of Lambda is that Lambda also support the default arguments.

123
00:07:54,770 --> 00:08:01,370
As with function, when we create a lambda function with default argument, it is going to accept those.

124
00:08:01,370 --> 00:08:07,520
And if you don't pass a value, then it is going to treat that that argument basically as the value.

125
00:08:07,670 --> 00:08:11,480
So right here, if you just write an X equal to let's say to.

126
00:08:12,790 --> 00:08:18,430
And we don't pass in any kind of value from here, we just remove this now, as you can see that it

127
00:08:18,430 --> 00:08:24,070
is expecting one argument, but if you don't pass that argument, it is going to treat this as the argument

128
00:08:24,070 --> 00:08:25,920
that it is going to generate the result for you.

129
00:08:26,170 --> 00:08:31,060
But if you pass in the argument, let's say three is the argument on this, then nine is going to be

130
00:08:31,060 --> 00:08:37,240
generated because as the very same with functions, the argument that is passed in from the calling

131
00:08:37,270 --> 00:08:40,330
area has a higher precedence than the default argument.

132
00:08:40,330 --> 00:08:45,780
The default argument is only going to get used when you don't pass in the argument from the coiling

133
00:08:45,790 --> 00:08:46,240
area.

134
00:08:46,470 --> 00:08:48,700
Then it is going to use the default value.

135
00:08:49,880 --> 00:08:56,810
One more thing is that the redone keyword also works exactly the same, how would you would expect it

136
00:08:56,810 --> 00:08:57,970
for a lambdas to work?

137
00:08:58,250 --> 00:09:03,710
So maybe this sounds like a small thing, but if you have ever tried to use the red line inside of a

138
00:09:03,720 --> 00:09:05,810
Baroque, you know, it won't work.

139
00:09:06,410 --> 00:09:11,010
And we will also covered that in detail in the next tutorial as well in the proxy tutorial.

140
00:09:11,510 --> 00:09:17,960
So if you consider this very same example and instead of boats, we just ride in Radogno here, then

141
00:09:17,960 --> 00:09:23,830
you know that basically the return is going to return the result into the area from where it is.

142
00:09:23,940 --> 00:09:26,210
Also, this is where it is going to return the result.

143
00:09:26,250 --> 00:09:30,740
So here we are going to write an X equals aerogel, which means that whatever is going to Raddon is

144
00:09:30,740 --> 00:09:33,470
going to get stored in this X around this code.

145
00:09:33,470 --> 00:09:35,640
And you can see that it has generated no error.

146
00:09:35,660 --> 00:09:41,270
All you have to do now is just write inputs X, run this and you can see that nine has been printed,

147
00:09:41,270 --> 00:09:45,890
which means that Tree three was written right from this lamda here.

148
00:09:45,890 --> 00:09:50,540
It was stored in this variable X, and when we just write and put sex over here, it has printed out

149
00:09:50,540 --> 00:09:57,240
the result, which means that the written statement works very fine with lambdas in the NextRadio.

150
00:09:57,260 --> 00:10:03,470
You will see that when we do the same stuff for the box, it won't work because the written statements

151
00:10:03,470 --> 00:10:04,790
does not work with Prox.

152
00:10:05,300 --> 00:10:12,050
Now, lambdas are also lawyers and what our lawyer is the most simple way to think of a lawyer is a

153
00:10:12,050 --> 00:10:19,100
function that can be stored as a variable and that has a special ability to access other variables local

154
00:10:19,100 --> 00:10:20,660
to the scope it was created in.

155
00:10:21,790 --> 00:10:26,740
Now, what does it mean to be able to access other variables local to the scope the LAMDA was created

156
00:10:26,740 --> 00:10:26,910
in?

157
00:10:27,770 --> 00:10:31,770
Let's take a look at this with the help of an example.

158
00:10:32,590 --> 00:10:37,090
So for that, just initialized a variable right at the top here.

159
00:10:37,100 --> 00:10:39,750
Let's say it is with the variable cume.

160
00:10:40,060 --> 00:10:43,540
So let's say the word over here is hello.

161
00:10:43,780 --> 00:10:47,470
All you have to do is that we don't need any kind of arguments over here now.

162
00:10:47,500 --> 00:10:49,500
We don't need the written statement as well.

163
00:10:49,510 --> 00:10:53,910
We all we need is that we have to write inputs and we have to write in queue will help.

164
00:10:54,310 --> 00:10:56,970
So we don't need this as well.

165
00:10:56,980 --> 00:10:58,650
We don't need this as well.

166
00:10:58,660 --> 00:11:00,980
We don't want to pass in the argument as well.

167
00:11:01,330 --> 00:11:07,360
So if you just run this score, you can see that Halo has been printed, which means that you can use

168
00:11:07,360 --> 00:11:15,190
the variable inside of a lambda and the lambda basically access any kind of variable that is even outside

169
00:11:15,190 --> 00:11:15,790
its block.

170
00:11:16,150 --> 00:11:21,220
But since it is global to lambda, so that's why it can see this variable in whatever is stored in it.

171
00:11:21,220 --> 00:11:25,180
And when all is right, in particular, it gets printed right over here.

172
00:11:26,530 --> 00:11:31,690
Now, as you can see, that this has got branded, but what if I changed the value of Guno?

173
00:11:31,900 --> 00:11:41,330
So if I changed the value of down, downhill and right in oil to a hill and now I just call in it or

174
00:11:41,360 --> 00:11:46,000
call around this and you can see that now what has been printed?

175
00:11:46,010 --> 00:11:52,760
So this means that if I change the value in the variable, the lambda is going to see the new value.

176
00:11:52,780 --> 00:11:59,590
So that's why Lambda Ruby lambdas nondisclosures, because if you change the value, it is going to

177
00:11:59,620 --> 00:12:03,560
get the change value when you call the lambda again.

178
00:12:04,060 --> 00:12:07,460
Now lenders are given a special name that is Jianlian.

179
00:12:07,570 --> 00:12:12,120
Now one of the truly rare things about Lambda is the variety of ways we can call them.

180
00:12:12,130 --> 00:12:14,820
Now, you have already covered the ways in which we can call in the lambda.

181
00:12:14,830 --> 00:12:20,710
But one more thing you need to know about that in booking is that how do you pass an argument using

182
00:12:20,710 --> 00:12:21,530
those methods?

183
00:12:21,530 --> 00:12:24,220
So we will just go to one of them here.

184
00:12:24,220 --> 00:12:27,880
So you know that one way to call is this call method.

185
00:12:27,910 --> 00:12:31,930
The other is to use this ID or this column right over here.

186
00:12:32,380 --> 00:12:34,440
So you'll just remove this from here.

187
00:12:34,450 --> 00:12:35,350
We don't need this.

188
00:12:35,350 --> 00:12:36,850
We don't need this as well.

189
00:12:37,180 --> 00:12:39,340
So we will just pass in a value.

190
00:12:39,340 --> 00:12:41,260
Let's say two is the value you want to pass.

191
00:12:41,260 --> 00:12:44,500
And so right here you are going to use the very same sendek.

192
00:12:44,500 --> 00:12:50,320
You are going to write in the variable and you're going to write in, put sexo here, run this code

193
00:12:50,320 --> 00:12:52,710
and you can see that two has been generated right here.

194
00:12:52,720 --> 00:12:58,860
So this is the basically way in which you can call, you can pass in the value using the other method.

195
00:12:58,870 --> 00:13:04,570
So, for example, you are using the other method that was about the square bracket method you can just

196
00:13:04,570 --> 00:13:07,420
write in to and the rest is going to remain the very same.

197
00:13:07,430 --> 00:13:12,100
Run this and you can see that you have got these two over here so you can use all those method and you

198
00:13:12,100 --> 00:13:15,300
have to use the very same syntax for Lambda right over here.

199
00:13:16,330 --> 00:13:23,350
Then Lambda also have Beldin carrying gerring is a cool technique, used a lot and functional programming.

200
00:13:23,350 --> 00:13:26,560
It's a way to let you create new functions from existing functions.

201
00:13:26,800 --> 00:13:29,250
It's easy to understand when you see it in practice.

202
00:13:29,560 --> 00:13:35,680
So to give you an example of this, let's just remove this from here and we will have a function that

203
00:13:35,680 --> 00:13:40,390
is going to be a lambda and that is going to add two numbers, actually.

204
00:13:40,400 --> 00:13:45,970
So it is going to receive in those two arguments which are going to get added to and be Ordos argument.

205
00:13:46,390 --> 00:13:52,330
And we are going to write in a hill or it's a class B.

206
00:13:52,900 --> 00:13:59,410
So to call this function, you can just write an add call and you can just pass in the two arguments

207
00:13:59,410 --> 00:14:03,310
that are, let's say two and three Ronda's and you can see that you got five will help.

208
00:14:03,700 --> 00:14:06,100
Now where the scoring comes into account.

209
00:14:06,100 --> 00:14:08,440
Abargil, we are going to create one more.

210
00:14:09,420 --> 00:14:15,960
Function a variable that is going to be increment and we are going to create a new function from this

211
00:14:15,960 --> 00:14:19,920
very lambda that has been created, but we are not going to create any more functional here, but we

212
00:14:19,920 --> 00:14:21,980
are going to use the concept of carrying Ohio.

213
00:14:21,990 --> 00:14:26,400
So we are going to write an add, which is going to be the variable in which this lambda is store.

214
00:14:26,400 --> 00:14:28,590
And using this, we are going to create a new function.

215
00:14:28,650 --> 00:14:32,190
We are going to run an ad dot Gary Dot called.

216
00:14:33,600 --> 00:14:37,540
And we are going to pass in a single variable that will help.

217
00:14:37,800 --> 00:14:44,640
So what that is going to do is that then when I scurrying to create more specialized functions, that

218
00:14:44,790 --> 00:14:49,350
is incremental here, it simply is going to add one to any given number.

219
00:14:49,800 --> 00:14:54,510
So if I just run the score, you can see that it hasn't generated any kind of output because I have

220
00:14:54,510 --> 00:14:59,790
not called this function because as you can see, that I have used the Pscholka whatever help.

221
00:14:59,790 --> 00:15:02,130
But this call basically is for this function.

222
00:15:02,290 --> 00:15:07,620
Now we are going to use a call for the increment as well as we are going to write an incremental call

223
00:15:07,830 --> 00:15:13,230
and we are going to pass in the parameter to this, let's say 100, is that there are meter run the

224
00:15:13,230 --> 00:15:15,920
score and you can see that one or one has been generated.

225
00:15:15,930 --> 00:15:21,900
Now, how one one has been generated is basically that this hundred Abargil is added with this function

226
00:15:21,900 --> 00:15:22,310
of a hill.

227
00:15:22,590 --> 00:15:27,680
So down here, if you just write an adult call simply and write in, let's say three, four over here

228
00:15:27,960 --> 00:15:30,190
around the score, it is going to be the sound over here.

229
00:15:30,260 --> 00:15:34,280
Again, this means that now we have got basically two functions.

230
00:15:34,290 --> 00:15:38,670
The first one is using this add variable and the second one is using this increment variable.

231
00:15:38,670 --> 00:15:43,910
And this increment variable function is you is basically using this lambda function right away here.

232
00:15:43,920 --> 00:15:48,870
And it is using this line of here because it is treating this as the first argument.

233
00:15:48,870 --> 00:15:49,390
That is it.

234
00:15:49,470 --> 00:15:53,340
And it is treating this as the second argument B and it is adding those two numbers.

235
00:15:53,340 --> 00:15:57,390
And as you can see, that one one has been generated right on the Adam Brunoro will.

236
00:15:57,720 --> 00:16:01,200
Now lambdas are basically a special kind of proc.

237
00:16:01,200 --> 00:16:06,210
You might have noticed that in all the good examples we have been running so far, whenever I have defined

238
00:16:06,210 --> 00:16:12,330
a lambda function, I got a broken read on that because Ruby implements lambdas as a kind of proc.

239
00:16:12,330 --> 00:16:17,900
So a lot of things I have shown you in this article can be done with Brocks as well as lambdas.

240
00:16:18,120 --> 00:16:20,400
So we are going to cover progs in the next redrill.

241
00:16:20,400 --> 00:16:27,180
And I hope that if you have understood lambdas, then Brocks understanding is going to be much more

242
00:16:27,180 --> 00:16:27,730
easier.

243
00:16:28,350 --> 00:16:34,080
Now we have been using one more Syntex in the very first examples of this very same tutorial, which

244
00:16:34,080 --> 00:16:35,920
was something like this.

245
00:16:36,270 --> 00:16:42,420
So basically when you use this index and such kind of lambdas are known as Snabe lambdas, and when

246
00:16:42,420 --> 00:16:46,590
you use this kind of lambdas, then you can just call it the professional Abdus.

247
00:16:46,590 --> 00:16:49,700
And these are basically the Stube lambdas.

248
00:16:49,920 --> 00:16:52,670
So I hope that you have understood all these concepts.

249
00:16:52,680 --> 00:16:55,880
There were a lot of things about lambdas which we have covered in the story.

250
00:16:55,950 --> 00:17:02,100
I hope you understood that we have covered the very basics way in which you can use lambdas and we have

251
00:17:02,340 --> 00:17:04,760
covered many advanced things about lambdas as well.

252
00:17:05,040 --> 00:17:06,660
So I guess that's it with this trattoria.

253
00:17:06,690 --> 00:17:08,010
Thank you so much, guys, for watching.

254
00:17:08,010 --> 00:17:10,320
And I'll see you guys in the next material.
