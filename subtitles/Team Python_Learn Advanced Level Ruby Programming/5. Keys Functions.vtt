WEBVTT
1
00:00:00.240 --> 00:00:01.200
Hey, guys, what's up?

2
00:00:01.230 --> 00:00:06.510
This is a and I welcome you to another tutorial on this course on Ruby and in this tutorial, we are

3
00:00:06.510 --> 00:00:11.520
going to cover a single function on a hashas that is the Keys function now in the previous story, and

4
00:00:11.520 --> 00:00:13.380
you have to cover the key and the Haski function.

5
00:00:13.890 --> 00:00:18.340
Now, this function is a bit different from those in the previous two functions.

6
00:00:18.360 --> 00:00:23.820
We check if a certain key exist in a certain hash variable or not.

7
00:00:23.830 --> 00:00:29.640
But in this, what we are going to check is that we are going to see the number of keys for a certain

8
00:00:29.640 --> 00:00:30.410
variable.

9
00:00:30.780 --> 00:00:33.060
So we are going to print all of these keys.

10
00:00:33.420 --> 00:00:36.060
And the syntax for that is very simple.

11
00:00:37.020 --> 00:00:40.770
You have to just write in the name of the hash, which is basically the variable, and you have to write

12
00:00:40.770 --> 00:00:44.730
in dot geese and it accepts no parameter.

13
00:00:46.170 --> 00:00:52.110
All you have to do is that you have to use the object for the function and you have the right and the

14
00:00:52.740 --> 00:00:53.510
key function.

15
00:00:53.820 --> 00:00:58.500
So to do it, let's move on to our ATM runner.

16
00:00:59.430 --> 00:01:02.900
And we already have the hash function right over here.

17
00:01:02.910 --> 00:01:04.320
We have got three hashes.

18
00:01:04.680 --> 00:01:12.360
The first one is er, then we have B and then we have C, so let's just use the keys function on all

19
00:01:12.360 --> 00:01:13.500
of these one by one.

20
00:01:13.500 --> 00:01:15.090
So we are going to write in both.

21
00:01:16.840 --> 00:01:26.320
Set of keys in a is you can use interpolation and you can just ride in a doggie's.

22
00:01:27.830 --> 00:01:35.450
Run this and you can see that it has printed out a set of keys and it is A and B, similarly, you can

23
00:01:35.450 --> 00:01:36.770
just write in votes.

24
00:01:39.440 --> 00:01:48.230
Set of geese in B is interpellation, and you can just ride and Brodsky's run this and it is going to

25
00:01:48.230 --> 00:01:52.250
print the set of keys and B which is a single E that is a Y has been printed.

26
00:01:52.250 --> 00:01:52.460
Right.

27
00:01:52.520 --> 00:01:52.910
Will help.

28
00:01:53.390 --> 00:02:01.160
Then you can just write and for the third side you can just write instead of Ghys and C is interpellation

29
00:02:01.160 --> 00:02:06.470
and you can just write in Searoad Keys records, run this and you can see that you have got the set

30
00:02:06.470 --> 00:02:06.590
up.

31
00:02:06.600 --> 00:02:09.560
You can see that is A, B and C.

32
00:02:09.920 --> 00:02:16.040
Now if you use the previous index that was without this and this and you have to just write in the column,

33
00:02:16.060 --> 00:02:19.850
let's see if this work on the ski's function here or not.

34
00:02:20.070 --> 00:02:22.750
Let's do it for all these three, Yahel.

35
00:02:25.640 --> 00:02:26.780
Collingdale.

36
00:02:28.460 --> 00:02:31.940
A call in here as well to remove this.

37
00:02:34.680 --> 00:02:37.420
And remove this from here as well.

38
00:02:37.890 --> 00:02:39.090
Colin Hill.

39
00:02:44.130 --> 00:02:45.600
And and hail finally.

40
00:02:46.920 --> 00:02:50.910
And all this is in green because of this over here, Colin, over here as well.

41
00:02:51.240 --> 00:02:57.480
So now let's run the code and as you can see, that you have again, got the keys, but this time it

42
00:02:57.480 --> 00:02:59.350
has a different format right over here.

43
00:02:59.350 --> 00:03:05.190
As you can see that in place of the quotation marks, you have got this call and a call and B, colony,

44
00:03:05.190 --> 00:03:06.750
a colony, a colony colony.

45
00:03:06.900 --> 00:03:12.540
So basically you have got this set of keys, which you require right over here on.

46
00:03:13.970 --> 00:03:20.420
So for the previous, when we were using the key function right over here, you can just try in for

47
00:03:20.750 --> 00:03:24.650
this index over here, you can just write and an or underscored.

48
00:03:24.830 --> 00:03:30.380
And as you can see that now it has returned to which was the function from the previous tutorial, the

49
00:03:30.380 --> 00:03:31.010
key function.

50
00:03:31.010 --> 00:03:36.980
And if you just try it in the Haski function around this and it is also going to return.

51
00:03:36.980 --> 00:03:37.140
True.

52
00:03:37.220 --> 00:03:44.420
So basically for this format right over here, we are using you can not just write in a hash tag and

53
00:03:44.420 --> 00:03:48.950
this is how you have to use in this index if you want this Haski function.

54
00:03:49.190 --> 00:03:53.180
And the key function to read A are true to you.

55
00:03:53.300 --> 00:03:56.340
As you can see that in both cases we have got this rule here.

56
00:03:56.810 --> 00:04:02.330
So and third function, which is a part of this story, we have printed out the keys, which are in

57
00:04:02.330 --> 00:04:03.020
this format.

58
00:04:03.050 --> 00:04:09.480
So for the key and the Haski, you can use this format to get a true as your output.

59
00:04:09.710 --> 00:04:16.760
So that's how basically you can use this index and the previous index, that was the quotation marks

60
00:04:16.760 --> 00:04:23.630
index to print out the number of keys and the key keys which you have used in hash.

61
00:04:24.700 --> 00:04:27.260
And you can see that you have got to set up those here, right?

62
00:04:27.790 --> 00:04:32.810
So I guess that's it with this tutorial, you have already given the examples.

63
00:04:32.810 --> 00:04:35.050
So thank you so much, guys, for watching.

64
00:04:35.050 --> 00:04:37.180
And I'll see you guys in the next tutorial.
