WEBVTT
1
00:00:00.480 --> 00:00:01.550
Hey, guys, what's up?

2
00:00:01.560 --> 00:00:07.680
This morning, I welcome you to another tutorial on discourse on Ruby and in this story, and we are

3
00:00:07.680 --> 00:00:12.580
going to be covering a function that is known as step function.

4
00:00:13.380 --> 00:00:19.650
Now, you talk about the description is that if you want to iterate over a certain range and you know

5
00:00:19.650 --> 00:00:23.190
what the range is from the concept of previous tutorial, but.

6
00:00:24.450 --> 00:00:30.330
The step function is different from that, because if you have to iterate orange, but you only want

7
00:00:30.330 --> 00:00:37.890
to look at every element and you have to use the step method, if it was up to me and if I was, who

8
00:00:37.890 --> 00:00:40.230
would have created the Ruby programming language?

9
00:00:40.230 --> 00:00:43.140
I would have named this function as the jumping function.

10
00:00:43.740 --> 00:00:49.650
But since it is not created by me, so that's why they have named it a step function and I have to go

11
00:00:49.650 --> 00:00:50.090
with them.

12
00:00:50.520 --> 00:00:53.960
So let's go on to Adam and see how it works.

13
00:00:55.260 --> 00:01:01.290
So in here, you have to first specify a range, let's say, the range of zero to 10 and then you have

14
00:01:01.290 --> 00:01:02.460
to write in DOT.

15
00:01:02.490 --> 00:01:04.140
Then you have to use the step function.

16
00:01:04.380 --> 00:01:09.370
And then here you have to specify the element through which you want to make the steps.

17
00:01:09.380 --> 00:01:13.410
So, for example, I want every second element to be printed, so.

18
00:01:14.630 --> 00:01:22.250
That's it, but what I want to do is that in order to print the element at each iteration, I have to

19
00:01:22.250 --> 00:01:23.560
add a block for him.

20
00:01:23.810 --> 00:01:25.760
So I'm going to write in each.

21
00:01:26.330 --> 00:01:29.330
But you have to do is.

22
00:01:30.490 --> 00:01:38.260
That you have to place these vertical bars, store the value in I and both I.

23
00:01:39.290 --> 00:01:45.590
Good enough, Ron, this good ad, as you can see, that every element that is the second element is

24
00:01:45.590 --> 00:01:48.710
going to be printed that a zero two four six, eight, ten.

25
00:01:49.010 --> 00:01:54.300
If you want to increase this, let's say I want to print every element that is the fifth element.

26
00:01:54.320 --> 00:01:57.980
Run this zero five, then is going to be the output.

27
00:01:57.980 --> 00:02:04.210
If you just specify, Tannahill, press Aldar zero is going to be the output.

28
00:02:04.400 --> 00:02:10.400
Now, if you specify something outside this range that is, let's say, 11 or underscored, then you

29
00:02:10.400 --> 00:02:14.590
can see that only the first element is going to be printed because it is going to jump directly to the

30
00:02:14.590 --> 00:02:15.260
11th value.

31
00:02:15.260 --> 00:02:18.230
But at the 11th value, it found nothing.

32
00:02:18.380 --> 00:02:23.360
So that's why only the first element is then going to be printed on your output screen.

33
00:02:23.540 --> 00:02:29.180
And that's why I want to have suggested them that they should have named this as the jumping function

34
00:02:29.180 --> 00:02:32.450
because it jumps from one value to another.

35
00:02:32.690 --> 00:02:37.370
Or in other words, you can say that it's steps from one value to another value.

36
00:02:37.370 --> 00:02:43.950
And that step is basically dependent on whatever argument you passed into this function step.

37
00:02:44.570 --> 00:02:48.380
So I guess we have already covered the example for this.

38
00:02:48.590 --> 00:02:50.360
So that's it with this tutorial.

39
00:02:50.370 --> 00:02:52.250
Thank you so much, guys, for watching.

40
00:02:52.250 --> 00:02:54.590
And I'll see you guys in the next tutorial.
