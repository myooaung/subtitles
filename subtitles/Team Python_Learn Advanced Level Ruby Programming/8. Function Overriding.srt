1
00:00:00,330 --> 00:00:01,230
Hey, guys, what's up?

2
00:00:01,260 --> 00:00:06,240
This is a marathon, and I welcome you to another drill on this course on Ruby and in this story.

3
00:00:06,240 --> 00:00:10,350
And we are going to cover one more topic that is related with object oriented programming, and that

4
00:00:10,350 --> 00:00:15,750
is method or writing now in object oriented programming method or writing is a language feature in which

5
00:00:15,750 --> 00:00:21,240
a subclass can provide an implementation of Obamacare, which is already mentioned by superclusters.

6
00:00:21,470 --> 00:00:26,570
Implementation of a method in the subclause replaces the implementation of a method in the superclass.

7
00:00:26,940 --> 00:00:28,710
So you've already covered that.

8
00:00:28,980 --> 00:00:33,840
This concept, which we are about to cover in the previous Giorgio's, but in the previous Dorians we

9
00:00:33,840 --> 00:00:39,540
did not specify the name which is associated with this concept of all that is method to writing.

10
00:00:39,540 --> 00:00:42,110
So let's discover a very simple example of this.

11
00:00:42,480 --> 00:00:44,370
So let's say you have a class A.

12
00:00:45,420 --> 00:00:51,140
And then in this class, you have a function which just sprints out both.

13
00:00:53,350 --> 00:01:01,180
Plus eight and just and dysfunction and this loss, and then let's say you have a class B that is inherited

14
00:01:01,180 --> 00:01:05,770
from Class A and that you have a gain of function.

15
00:01:07,570 --> 00:01:10,450
And this time the function prints on both.

16
00:01:11,890 --> 00:01:19,780
Class B and the function and the class, and now if you create an object for the Class B school, for

17
00:01:19,780 --> 00:01:26,170
example, if you just try and be equal, do vetoed Nunzia, this means that an object for Class B has

18
00:01:26,170 --> 00:01:26,920
been created.

19
00:01:27,070 --> 00:01:35,410
And if you just write and B, dot A, run this code, you can see that it is printed out Class B now

20
00:01:35,410 --> 00:01:40,780
as you can see that this Class B is basically a child class of this class.

21
00:01:41,350 --> 00:01:45,310
And you know about the class hierarchy, class object hierarchy.

22
00:01:45,460 --> 00:01:50,950
And you know that this class will help contain both these functional board, the functions that are

23
00:01:50,950 --> 00:01:53,220
named with the same name that is er will help.

24
00:01:53,590 --> 00:01:59,710
But in this case, since you are creating an object of this class B, so always remember that for the

25
00:01:59,800 --> 00:02:06,060
last for which an object is created, that class functions are given a priority over the super classes.

26
00:02:06,070 --> 00:02:11,920
In other words, the method in the Class B has overridden the method in Class A.

27
00:02:13,120 --> 00:02:16,630
For example, if you create this object for Class EOWA here.

28
00:02:18,500 --> 00:02:22,760
Then if you run the school, then as simple as that, it is going to bring down velocity because the

29
00:02:22,760 --> 00:02:29,080
class aid function, it does not know that A Class B function, which is by its own name, also exists.

30
00:02:29,300 --> 00:02:30,650
So for that it is simple.

31
00:02:30,800 --> 00:02:33,470
The or overriding concept does not lie there.

32
00:02:33,470 --> 00:02:40,640
But for the child class, if you create an object and in there, if you have a function that is also

33
00:02:40,640 --> 00:02:46,400
a part of the upper function of Waddill, then that is basically known as function.

34
00:02:46,940 --> 00:02:49,480
Or you can say method overwriting.

35
00:02:49,940 --> 00:02:51,480
So that's it with this tutorial.

36
00:02:52,250 --> 00:02:55,760
Thank you so much for watching and I'll see you guys in the next territorials.
