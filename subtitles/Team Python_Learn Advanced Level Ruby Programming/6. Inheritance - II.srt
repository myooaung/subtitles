1
00:00:00,540 --> 00:00:01,470
Hey, guys, what's up?

2
00:00:01,500 --> 00:00:06,090
This is a marathon, and I welcome you to another long discourse on Ruby and in this story, and we

3
00:00:06,090 --> 00:00:12,960
are going to cover Mattituck apart now that you have a grasp on both inheritance and Mixin from the

4
00:00:12,960 --> 00:00:13,890
previous Dorien.

5
00:00:14,130 --> 00:00:20,910
So now let's put them both together to see how that affect is going to help us in the method look apart.

6
00:00:21,120 --> 00:00:22,530
So recall the method.

7
00:00:22,530 --> 00:00:28,010
Look, a part is the basic order in which glasses are inspected when you call a method.

8
00:00:28,320 --> 00:00:32,340
So let's take a look at the example we are going to cover right over here.

9
00:00:32,520 --> 00:00:36,050
So what we are going to do is we are going to create a multiple pots.

10
00:00:36,060 --> 00:00:40,590
We are going to create a workable then we are going to create a swimmable and we are going to create,

11
00:00:41,400 --> 00:00:42,920
let's say, climbable module.

12
00:00:43,230 --> 00:00:45,900
So let's just create them and then I will explain what's going on.

13
00:00:45,930 --> 00:00:51,600
So first, we will create a module that is walkable and in that walkable module, we are going to create

14
00:00:51,600 --> 00:00:52,590
a function walk.

15
00:00:53,990 --> 00:00:59,810
And in this function, we are going to just write and I am walking and that is going to get returned

16
00:00:59,810 --> 00:01:06,650
to the place where this module is going to get included and called this function is going to be so just

17
00:01:06,650 --> 00:01:10,340
endless function and this module create one more module.

18
00:01:11,630 --> 00:01:14,450
And the second model is, let's say, going to be.

19
00:01:16,170 --> 00:01:23,320
Swimming and this also has to be a capital W, like we have discussed in the previous tutorial, so

20
00:01:23,320 --> 00:01:30,280
let's say you have a swimmable module and in that swimmable module, you will have, let's say, a function

21
00:01:30,280 --> 00:01:30,840
swim.

22
00:01:31,660 --> 00:01:35,080
And in that function where you're going to do as you you're going to simply write.

23
00:01:35,080 --> 00:01:36,100
And I am.

24
00:01:37,330 --> 00:01:45,390
Swimming and this function and this module will create one more module that is, let's say, climbable,

25
00:01:46,120 --> 00:01:55,300
I guess I have misspelled that it should be Clim and be a BLT, but enough and that what you're going

26
00:01:55,300 --> 00:02:01,120
to do is that you are going to create a function that says I am.

27
00:02:02,660 --> 00:02:03,770
Climbing.

28
00:02:05,060 --> 00:02:10,850
And this function and this module, so what we have done is that we have created three modules.

29
00:02:10,850 --> 00:02:13,370
The first one is work in which we have a function walk.

30
00:02:13,370 --> 00:02:17,840
Then we have created the swimmable module, which which we have a function stream, and then we have

31
00:02:17,840 --> 00:02:21,430
created the climbable module in which we have a function line.

32
00:02:21,470 --> 00:02:23,150
Now, what we are going to do is that.

33
00:02:24,470 --> 00:02:28,910
Down right here, we are going to create our glass, all right, to a hill.

34
00:02:33,860 --> 00:02:39,500
We are going to create our laws that is human and in that class human, the first thing we are going

35
00:02:39,500 --> 00:02:45,110
to do is that we are going to include one of the modules that is, let's say, walk people over here

36
00:02:46,190 --> 00:02:47,600
because a human can walk.

37
00:02:47,870 --> 00:02:51,230
And in here we are going to define a function that is stuck.

38
00:02:51,500 --> 00:02:57,200
And in the dog function, we are going to write and I am human and.

39
00:02:58,300 --> 00:02:59,020
I can.

40
00:03:00,140 --> 00:03:06,530
Doc, simple is that this fella is going to get written just and dysfunction and this class human as

41
00:03:06,530 --> 00:03:06,800
well.

42
00:03:07,310 --> 00:03:10,590
So now we have got three modules and one class.

43
00:03:10,610 --> 00:03:14,240
We have mixed in one module into the human class.

44
00:03:14,480 --> 00:03:19,140
The method look part is the part a ruby takes to look for a method.

45
00:03:19,160 --> 00:03:23,900
Now we can see this part with the ancestor class method, which you have already covered in the previous

46
00:03:23,900 --> 00:03:24,760
tutorials as well.

47
00:03:25,160 --> 00:03:27,920
So write down after using this class.

48
00:03:27,920 --> 00:03:30,200
What where you going to do is that you are going to write inputs.

49
00:03:32,340 --> 00:03:33,450
Human class.

50
00:03:36,330 --> 00:03:37,200
Method.

51
00:03:38,310 --> 00:03:43,440
Look up and right here you are going to write and put human dot.

52
00:03:44,470 --> 00:03:51,520
And sisters and just run this code and you are going to see that it says human lives matter, look up

53
00:03:51,520 --> 00:03:55,480
and then it says human, then it says more capable than it says object and going on.

54
00:03:55,480 --> 00:03:56,810
Then it says basic object.

55
00:03:57,100 --> 00:04:04,930
So this means that when we call a method of any human object, the first ruby look in the human class,

56
00:04:04,930 --> 00:04:10,780
then the lockable module, then the object class, then the kernel model, and finally the basic object

57
00:04:10,780 --> 00:04:11,110
class.

58
00:04:11,110 --> 00:04:17,130
As you can see, the hierarchy right over here, which is the physical hierarchy of an object calling.

59
00:04:17,350 --> 00:04:22,270
So it is going to first look into the class, then it is going to look for any kind of modules.

60
00:04:22,270 --> 00:04:26,710
Then it is going to go into the object, then the content and finally the basic object.

61
00:04:28,310 --> 00:04:34,700
So right down here after this, what you're going to do is let's say or just remove this from here,

62
00:04:34,700 --> 00:04:35,960
you have just seen the output.

63
00:04:36,290 --> 00:04:38,920
So run this and we have got no errors.

64
00:04:39,320 --> 00:04:45,560
So right down here, what you're going to do is that you are going to create an object and you are going

65
00:04:45,560 --> 00:04:52,580
to have human dot Neuzil object is basically now about an object of the human.

66
00:04:52,580 --> 00:04:56,090
And using that, what we are going to do is that we are going to call into talk function.

67
00:04:56,110 --> 00:04:57,480
So just write an object.

68
00:04:57,480 --> 00:04:58,280
Dot, dot.

69
00:04:59,300 --> 00:05:05,810
And you have to also write and post with it, run this code and it is going to say I am a human and

70
00:05:05,810 --> 00:05:06,980
I can talk.

71
00:05:07,130 --> 00:05:14,270
So Ruby found the dog method in the human glass and looked no further because it does not have to,

72
00:05:14,270 --> 00:05:20,180
because we have specified the area for which it has to have its look up.

73
00:05:21,080 --> 00:05:23,030
Now, if you just ride in puts.

74
00:05:24,000 --> 00:05:26,250
Object Dot Volkova here.

75
00:05:27,610 --> 00:05:32,920
Then what is going to happen over here is that Ruby is going to first look for divorc instance method

76
00:05:32,920 --> 00:05:38,380
in human, and since it is not going to find it there, it is going to keep looking in the next place,

77
00:05:38,380 --> 00:05:43,420
according to our list, which is the walkable module, as you have seen the hierarchy.

78
00:05:43,450 --> 00:05:46,040
Let me just printed out that hierarchy so I can just explain.

79
00:05:46,060 --> 00:05:48,850
You are going to just write in votes Human Dawid.

80
00:05:50,540 --> 00:05:52,520
Ancestors on this.

81
00:05:53,430 --> 00:05:58,980
And let's just remove this for now and now run it so when you write and puts.

82
00:06:00,280 --> 00:06:04,000
Object dot walk you what it is going to do.

83
00:06:04,030 --> 00:06:07,960
Is that what Ruby is first going to look for, divorc instance method?

84
00:06:08,150 --> 00:06:12,880
According to this hierarchy and according to this hierarchy, it is going to first look for it in the

85
00:06:12,880 --> 00:06:13,690
human class.

86
00:06:14,020 --> 00:06:18,430
Now, if you just go into the human class, you can see that you have got no kind of walk method of

87
00:06:18,430 --> 00:06:18,810
a hill.

88
00:06:19,150 --> 00:06:26,420
So it is going to then move on and it is going to then look for the Vork method in the walkable module.

89
00:06:26,740 --> 00:06:28,360
So since it is going to find it.

90
00:06:28,410 --> 00:06:28,720
What they are.

91
00:06:28,730 --> 00:06:31,120
So that's why the search is going to end right over here.

92
00:06:31,120 --> 00:06:34,810
And it is not going to look into this object going to the basic object things over here.

93
00:06:36,010 --> 00:06:42,430
So now if you just run the school, you can see that it says I am walking, and basically all this happened,

94
00:06:42,430 --> 00:06:46,300
according to the hierarchy at Facebook Hill, did not find it.

95
00:06:46,300 --> 00:06:51,900
It looked here, found it, printed it out right here that says I am walking.

96
00:06:52,360 --> 00:06:55,420
So now if you just write in votes.

97
00:06:57,070 --> 00:07:03,580
Object dot any kind of object to a hill which is basically not included right here in this class of

98
00:07:03,580 --> 00:07:03,950
a hill.

99
00:07:04,090 --> 00:07:09,670
So if you just ride in, let's say we have two other modules that is swimmable and flammable in which

100
00:07:09,670 --> 00:07:11,720
we have the same incline function, respectively.

101
00:07:11,980 --> 00:07:14,500
So if you just ride in, let's say, Swimmable Hill.

102
00:07:16,060 --> 00:07:23,320
Run this, you can see that it says undefined method, same for the human flow and you can see that

103
00:07:23,320 --> 00:07:24,070
object tracking.

104
00:07:24,310 --> 00:07:30,340
Now, the reason behind this is that when we write an object starts June 1st, it is going to look into

105
00:07:30,340 --> 00:07:31,260
the human class.

106
00:07:31,270 --> 00:07:36,060
It did not found any kind of swim method in that class that is human.

107
00:07:36,140 --> 00:07:38,980
Then it is going to look into the lockable model.

108
00:07:39,190 --> 00:07:44,020
It is not going to find any kind of swim method or they but it is going to find the work that it is

109
00:07:44,020 --> 00:07:44,620
going to print.

110
00:07:44,620 --> 00:07:46,930
And I am working then for the hard.

111
00:07:46,930 --> 00:07:48,370
It is going to look into the object.

112
00:07:48,370 --> 00:07:49,680
It is not going to find anything.

113
00:07:49,710 --> 00:07:54,640
Gladio then it is going to look into the car that it is going to not find anything here as well, and

114
00:07:54,640 --> 00:07:58,150
then it is going to look into the basic object where it is not going to find that as well.

115
00:07:58,150 --> 00:08:03,970
Because if you remember the introduction tutorial to object oriented programming, I told you that when

116
00:08:03,970 --> 00:08:09,340
you are creating an object, you are actually creating a blueprint of a class, so a blueprint of a

117
00:08:09,340 --> 00:08:11,310
class since it does not contain anything.

118
00:08:11,320 --> 00:08:14,200
So that's why it is going to generate error.

119
00:08:14,200 --> 00:08:18,090
That says undefined method because it did not find any kind of that matter.

120
00:08:18,910 --> 00:08:24,190
So it will be basically a traverse all the classes and modules in the list and did not found a swimming

121
00:08:24,190 --> 00:08:24,550
method.

122
00:08:24,550 --> 00:08:25,800
So it through an error.

123
00:08:26,170 --> 00:08:29,710
So let's add another class to this code right over here.

124
00:08:29,830 --> 00:08:35,620
And this class will inherit from the human class and mixing in the other two modules, which we have

125
00:08:35,620 --> 00:08:40,930
not included yet in the human class and those module, the swimmable and the climbable module.

126
00:08:41,110 --> 00:08:45,570
And we are going to include that into the child class of this human class.

127
00:08:45,940 --> 00:08:47,370
So I do a hill.

128
00:08:47,370 --> 00:08:50,350
We are going to create our next class.

129
00:08:52,250 --> 00:08:59,960
That is class male, and that class is going to get inherited from the human class and that what you're

130
00:08:59,960 --> 00:09:06,170
going to do is that you're going to simply ride in include you are going to include the swimmable and

131
00:09:06,170 --> 00:09:08,690
you are going to ride and include.

132
00:09:11,200 --> 00:09:17,890
The line below here as well, so that is climbable and you have to just end this class as well.

133
00:09:18,550 --> 00:09:24,480
So now if you just want to print on the ancestors, let's just remove this from here and just write

134
00:09:24,490 --> 00:09:26,010
and put m..

135
00:09:26,020 --> 00:09:28,000
Dot ancestors'.

136
00:09:29,570 --> 00:09:34,410
So if you just run this code, you can see that it has a lot of things over here.

137
00:09:34,880 --> 00:09:40,880
So whenever you are going to call in any kind of method with this Milawa here, what that is going to

138
00:09:40,880 --> 00:09:46,400
do is that first it is going to look into the middle class, then it is going to look into the climbable

139
00:09:46,400 --> 00:09:47,840
module, which is right over here.

140
00:09:47,840 --> 00:09:51,470
Then it is going to look into the swimmable module, which you have included right over here.

141
00:09:51,480 --> 00:09:56,450
Then it is going to look into the human class that is basically the parent class, or you can say this

142
00:09:56,450 --> 00:10:00,160
super class of this middle class from which this middle class has been inherited.

143
00:10:00,440 --> 00:10:04,100
So the fourth place where the hierarchy goes is the parent class.

144
00:10:04,100 --> 00:10:06,120
Then it is going to look into the valuable module.

145
00:10:06,140 --> 00:10:11,420
Now, the reason it is going to look into the valuable module is because the class human contains this,

146
00:10:11,420 --> 00:10:13,760
since it is going to look into the human glass.

147
00:10:13,970 --> 00:10:18,600
And when it looks into the human class, it is also going to find include walking over there.

148
00:10:18,640 --> 00:10:20,910
So it is also going to look into the valuable module.

149
00:10:21,170 --> 00:10:26,630
So this Melda ancestress also has this module now included over here.

150
00:10:26,900 --> 00:10:30,870
We have not included it over here, but since it is being inherited from the human class.

151
00:10:30,870 --> 00:10:35,240
So that's why it is also going to look into the buckyball module, then it is going to go into the object

152
00:10:35,240 --> 00:10:36,480
kernel and basic object.

153
00:10:37,100 --> 00:10:37,730
Finally.

154
00:10:39,350 --> 00:10:45,150
So you've seen the output now there are several interesting things about this output.

155
00:10:45,260 --> 00:10:46,100
First, this.

156
00:10:46,100 --> 00:10:50,200
Tell us that the order in which we include modules is very important.

157
00:10:50,210 --> 00:10:53,420
Ruby actually looks at the last module we included first.

158
00:10:53,430 --> 00:10:58,580
As you can see, that climbable as far then we have got swimmable after that.

159
00:10:59,690 --> 00:11:05,210
So this means that in the rare occurrence that the modules we mix in contain a method with the same

160
00:11:05,210 --> 00:11:08,990
name, the last module included will be consulted first.

161
00:11:09,230 --> 00:11:17,060
The second interesting thing is that the module included in the superclass made it on to the method

162
00:11:17,060 --> 00:11:17,700
lookup part.

163
00:11:17,750 --> 00:11:24,710
This means that all the mail object will have access to not only human methods, but also methods defined

164
00:11:24,710 --> 00:11:30,680
in the valuable module, as well as all other modules mixed into any of its super classes.

165
00:11:30,970 --> 00:11:37,490
Sometimes when you are working on a very large project, it can be very confusing where all these methods

166
00:11:37,490 --> 00:11:40,380
are coming from now by understanding the method lookup.

167
00:11:40,380 --> 00:11:46,340
But we can have a better idea of where and how all available methods are organized.

168
00:11:46,730 --> 00:11:53,720
So now if you use now, if you just create an object for this middle class over here, let's say the

169
00:11:53,720 --> 00:12:02,390
object is X or just write an X equal to Mayardit new and let's say now you try to just access any kind

170
00:12:02,390 --> 00:12:04,090
of method with this Exalogic.

171
00:12:05,180 --> 00:12:12,050
So if you just write an X dot swim now, run this code, it is going to get executed successfully.

172
00:12:12,050 --> 00:12:15,650
Just add a post to see if the output is being printed and it says I am swimming.

173
00:12:15,920 --> 00:12:18,170
Then if you just write and thoughts.

174
00:12:19,790 --> 00:12:28,070
Dot, Clim, run this and it is going to say I am climbing, and even if you just write and extort Volke

175
00:12:28,550 --> 00:12:35,780
or it is also going to print on, I am because in the ancestor hierarchy of this middle class, we also

176
00:12:35,780 --> 00:12:38,600
have got the model of lockable included.

177
00:12:38,630 --> 00:12:41,900
So it is also going to look into that and it is also going to print that Ohayon.

178
00:12:43,210 --> 00:12:49,240
Now, one more interesting stuff over here is that this male hierarchy basically contains everything

179
00:12:49,240 --> 00:12:54,160
that is a part of this super class, but the super class hierarchy still does not have this stuff over

180
00:12:54,160 --> 00:12:54,410
here.

181
00:12:54,610 --> 00:13:03,880
So if you have this very same object created for the human class of a hill and if you just remove this

182
00:13:03,880 --> 00:13:08,350
from here or underscored, it is going to work perfectly since we have the module included.

183
00:13:08,350 --> 00:13:13,630
But if you use any of the other modules, let's say you just try and climbable here on this code, it

184
00:13:13,630 --> 00:13:16,780
is going to still generate error because the.

185
00:13:18,170 --> 00:13:21,700
Ancestors, if you just write and goats.

186
00:13:23,370 --> 00:13:25,500
Human ancestors.

187
00:13:26,470 --> 00:13:30,820
Rhonda Scott, you can see that, all right, you have to just remove this from here.

188
00:13:31,980 --> 00:13:33,970
And now I guess that's good.

189
00:13:34,380 --> 00:13:40,200
Now run it and you can see that the hierarchy of the human class, even though we have got this middle

190
00:13:40,200 --> 00:13:42,490
class, which is inheriting this, still does not have.

191
00:13:42,510 --> 00:13:48,420
So this answer, one very important question about how the child class is going to include everything

192
00:13:48,420 --> 00:13:55,980
from the parent class right to a hill, but the parent class is not going to inherit anything from the

193
00:13:55,980 --> 00:13:56,280
child.

194
00:13:56,570 --> 00:14:03,840
So this means that the child class know that it has a parent of which any kind of property it can use.

195
00:14:03,840 --> 00:14:09,600
But the parent does not know that a child for him has been created, which has some kind of functionality

196
00:14:09,600 --> 00:14:10,830
which he can use.

197
00:14:10,830 --> 00:14:15,570
But since he does not know that a child exists, so that's why he can not use any kind of functionality

198
00:14:15,570 --> 00:14:16,020
for that.

199
00:14:16,800 --> 00:14:22,500
And that's why the ancestral hierarchy, as you can see right over here, does not contain anything

200
00:14:22,500 --> 00:14:23,850
that is a part of the class.

201
00:14:23,880 --> 00:14:26,850
But if you just print on Foote's.

202
00:14:28,630 --> 00:14:37,570
Male Dawid ancestors run, you can see that you have got everything that is a part of the parent class

203
00:14:37,570 --> 00:14:38,000
as well.

204
00:14:38,320 --> 00:14:43,260
So that's how things are going to work on where matter look apart.

205
00:14:44,200 --> 00:14:48,980
So we have already seen how modules can be used to mix in common behavior into classes.

206
00:14:49,000 --> 00:14:51,630
Now we will see two more uses for modules.

207
00:14:51,940 --> 00:14:55,800
The first use case we will discuss is using modules for a name spacing.

208
00:14:55,810 --> 00:15:00,840
In this context, name spacing means organizing similar classes under a module.

209
00:15:00,850 --> 00:15:04,930
In other words, we will use modules to grip related classes.

210
00:15:05,140 --> 00:15:08,580
Therein lies the first advantage of using modules for a namespace.

211
00:15:08,770 --> 00:15:12,550
It becomes easy for us to recognize related classes in a record.

212
00:15:12,820 --> 00:15:18,550
The second advantage is it reduces the likelihood of our classes colliding with other similar named

213
00:15:18,550 --> 00:15:20,450
classes in our code base.

214
00:15:20,710 --> 00:15:23,040
So here's how we are going to do it.

215
00:15:23,290 --> 00:15:26,170
So we will just control it.

216
00:15:26,350 --> 00:15:32,230
Backspace and we are going to create a module in which what we are going to write and we are going to

217
00:15:32,230 --> 00:15:33,890
write in humans.

218
00:15:34,120 --> 00:15:36,550
So this is going to be the name of the module.

219
00:15:37,550 --> 00:15:40,730
And in this module, we are going to have our glasses.

220
00:15:40,760 --> 00:15:43,910
So let's say A can be either male or female.

221
00:15:43,940 --> 00:15:50,660
So we are going to create a middle class and just ended and we are going to create a female class.

222
00:15:51,810 --> 00:15:53,890
And we are going to just end that as well.

223
00:15:54,450 --> 00:16:00,710
Now, in this function, in these classes or here, we are also going to create similar functions.

224
00:16:00,990 --> 00:16:06,600
So let's say in this middle class, we are going to have a dog function that is going to receive an

225
00:16:06,600 --> 00:16:07,950
argument that is sound.

226
00:16:07,950 --> 00:16:11,310
And what we are going to do is that we are going to write and be.

227
00:16:12,850 --> 00:16:18,730
And we are going to use interpellation and we are going to just print out sound, I just use pot, Sawhill.

228
00:16:21,090 --> 00:16:27,420
And just and this function first, so I just click, enter and this function.

229
00:16:29,300 --> 00:16:34,910
Good enough and right here in this FEMA class, what we are going to do is that we are going to create

230
00:16:34,910 --> 00:16:40,310
a function that is, let's say say name, and it is going to receive an argument that is going to be

231
00:16:40,310 --> 00:16:44,630
the name and it is going to have the very same type of code that says put.

232
00:16:44,990 --> 00:16:49,880
And it is going to use interpolation and it is going to print out that name and dysfunction.

233
00:16:50,070 --> 00:16:54,210
The class has already been ended just and the module right over here.

234
00:16:54,230 --> 00:17:00,940
So now we have got Amodio Human in which we have got two classes that are either male and that is either

235
00:17:00,950 --> 00:17:01,310
female.

236
00:17:01,320 --> 00:17:08,260
So we will call the classes in a module by appending the last name to the module name with two columns.

237
00:17:08,690 --> 00:17:14,900
So to do it, what you're going to do is that you are going to write in the name of the object and you

238
00:17:14,900 --> 00:17:18,450
are going to create this for humans and then males.

239
00:17:18,460 --> 00:17:24,500
So what you're going to write in, let's say X is the name of the object and you're going to first write

240
00:17:24,500 --> 00:17:26,230
in the name of the module.

241
00:17:26,240 --> 00:17:27,740
So that is humans.

242
00:17:29,380 --> 00:17:34,360
Then you're going to specify to Collins, and after that, you're going to specify in the name of the

243
00:17:34,360 --> 00:17:40,450
class in which you are basically in, which is a part of this module, and you want to access it and

244
00:17:40,450 --> 00:17:42,440
you want to create this object for that class.

245
00:17:42,700 --> 00:17:48,310
So let's say we want to create the first object for and we're going to write and Dot knew then we are

246
00:17:48,310 --> 00:17:50,290
going to create one more object for Y.

247
00:17:50,300 --> 00:17:57,780
So we are going to write in y equal to humans, to Collins, we are going to write and female dot new

248
00:17:58,270 --> 00:18:05,080
and that is going to do our job now to just access these methods that are the talk and say name for

249
00:18:05,080 --> 00:18:06,520
the male and female respectively.

250
00:18:06,520 --> 00:18:12,580
What you are going to do is that you are going to write an X dot doc and you are going to pass in any

251
00:18:12,580 --> 00:18:13,420
kind of argument.

252
00:18:13,420 --> 00:18:15,700
Let's say hello to keep it simple.

253
00:18:15,700 --> 00:18:22,090
And then for the second one, you are going to write and why not say, underscore a name and you are

254
00:18:22,090 --> 00:18:24,010
going to pass in some name.

255
00:18:25,170 --> 00:18:26,530
Let's say John is the name.

256
00:18:26,850 --> 00:18:32,640
So just run it and you can see that you have got hello for the first one and John for the second one.

257
00:18:33,340 --> 00:18:38,700
So that is basically what is the first use of using the modules.

258
00:18:38,700 --> 00:18:44,430
As you can see, that what you have done is that you have actually just you can see that you have boxed

259
00:18:44,430 --> 00:18:49,880
up the properties that are interrelated because humans can be male or female.

260
00:18:50,220 --> 00:18:53,660
So that's why you have just encapsulated that in a single module, humans.

261
00:18:53,670 --> 00:18:58,840
And now to it says that you have to also specify the name of the module and then specify double Collins

262
00:18:58,950 --> 00:19:03,090
and then the name of the class for which you want to create the object.

263
00:19:04,550 --> 00:19:08,030
So that was basically the first use the second use case for module's.

264
00:19:08,060 --> 00:19:14,410
We will look at is using module's as a container for methods that are also known as the module methods.

265
00:19:14,660 --> 00:19:17,540
Now, this involves using modules to house other methods.

266
00:19:17,570 --> 00:19:22,990
Now, this is a very useful technique for methods that seems out of place within our code.

267
00:19:23,240 --> 00:19:27,850
So let's use our humans module to demonstrate this stuff over here.

268
00:19:29,200 --> 00:19:33,570
So right up this, what you're going to do is that you can define any kind of function, but you're

269
00:19:33,700 --> 00:19:39,720
right and self interest in DOT and let's say the name of the function is to keep it as simple as that.

270
00:19:39,730 --> 00:19:43,660
And just let's say it is going to receive an argument that is going to be a number.

271
00:19:43,780 --> 00:19:47,680
And that number, what you can do is that you can just write in a number.

272
00:19:48,670 --> 00:19:49,720
Starick.

273
00:19:50,840 --> 00:19:56,980
Strike two, so that is going to be what is done with the no just end dysfunction.

274
00:19:56,990 --> 00:20:05,360
And now since you have defined this inside a module and not inside a class, which is inside a module,

275
00:20:05,390 --> 00:20:11,960
so to just access it, just remove this from here, you can do is that you can just write an X equal

276
00:20:11,960 --> 00:20:17,810
to humans dot func, just passing a value.

277
00:20:17,810 --> 00:20:19,280
Let's say two is the value.

278
00:20:20,090 --> 00:20:24,060
Run this code and it has executed successfully.

279
00:20:24,080 --> 00:20:29,810
Let's just write inputs with that Ronda's and you can see that you have got four to do was for.

280
00:20:30,770 --> 00:20:36,590
All right, now, if you want to add the name of the module's to look at more specific as well, for

281
00:20:36,590 --> 00:20:41,420
example, you have, let's say, a function that is also a part that is that has the very same name

282
00:20:41,420 --> 00:20:43,030
and is a about of more function as well.

283
00:20:43,280 --> 00:20:46,280
So to call it, you can just write in this phone call.

284
00:20:46,400 --> 00:20:49,760
But to do so, what you can to keep it more specific.

285
00:20:49,760 --> 00:20:58,010
What you can write about here is that you can write in humans and in place of this dog object, what

286
00:20:58,010 --> 00:21:03,800
you can do is that you can specify two columns of a hill and you could you have to just write in the

287
00:21:03,800 --> 00:21:08,150
name of the object, the name of the class, a double column, the name of the function and the argument

288
00:21:08,150 --> 00:21:12,470
that is going to get passed into that function, run this code and that is going to give you the very

289
00:21:12,470 --> 00:21:13,020
same output.

290
00:21:13,020 --> 00:21:17,000
But the suggested way is to use a dot right to a hill.

291
00:21:18,350 --> 00:21:25,430
So I hope you understood that so these are basically the three use cases or you can say uses of the

292
00:21:25,760 --> 00:21:33,650
modules mixing with inheritance, then comes the last concept we are going to cover that is related

293
00:21:33,650 --> 00:21:36,490
to inheritance is about the private protected and public.

294
00:21:36,500 --> 00:21:41,680
So the last thing we want to cover is something that's actually quite simple but very necessary.

295
00:21:41,990 --> 00:21:46,850
Right now, all the methods in our middle class are basically public methods.

296
00:21:47,120 --> 00:21:52,640
A public method is a method that is available to anyone who knows either the class name or the objects

297
00:21:52,640 --> 00:21:58,670
name, how these methods are readily available for the rest of the program to use and compromise the

298
00:21:58,670 --> 00:21:59,930
class interface.

299
00:22:00,200 --> 00:22:04,280
And that's how other classes and objects will interact with this class and its object.

300
00:22:04,790 --> 00:22:11,180
Now, suppose you will have methods that are doing work in the class but don't need to be available

301
00:22:11,180 --> 00:22:12,370
for the rest of the program.

302
00:22:12,500 --> 00:22:14,600
These methods can be defined as private.

303
00:22:14,840 --> 00:22:17,080
Now, how do you define private method?

304
00:22:17,420 --> 00:22:23,930
We will use the private method call in our program and anything below it is going to be private.

305
00:22:24,900 --> 00:22:32,190
Unless another method like protected is called after it to negate it now in our middle class, we have

306
00:22:32,190 --> 00:22:38,070
one operation that take place that we would move into a private method when initialize an object, we

307
00:22:38,070 --> 00:22:42,620
calculate, let's say we will calculate the males age in middle years.

308
00:22:42,960 --> 00:22:49,470
So let's refactor this logic into a method and make it private so nothing outside of the class can use

309
00:22:49,470 --> 00:22:49,820
it.

310
00:22:50,160 --> 00:22:54,420
So we'll just remove the modules from here for now.

311
00:22:55,380 --> 00:23:01,360
So we will just remove this from here and we will also remove the female function from here.

312
00:23:01,890 --> 00:23:06,810
So let's say we already only have this malfunction of a hill and let's say we want to calculate the

313
00:23:06,810 --> 00:23:07,240
age.

314
00:23:07,650 --> 00:23:16,840
So right away here, we are going to have a very constant variable and that is going to be male and

315
00:23:16,840 --> 00:23:21,750
the score years and whatever age is going to get passed and we are going to multiply it with this male.

316
00:23:22,380 --> 00:23:23,700
So let's say that is for.

317
00:23:25,390 --> 00:23:32,020
And we are going to receive that, and so we are going to have a tribute accessory to just have the

318
00:23:32,320 --> 00:23:34,320
access to the getter and setter function.

319
00:23:34,340 --> 00:23:38,580
So we are going to have the name as well as we are going to have the age.

320
00:23:38,950 --> 00:23:43,320
So we are going to use the constructor function to initialize the values over here.

321
00:23:43,330 --> 00:23:44,770
So we are going to use.

322
00:23:46,570 --> 00:23:48,040
Initialise.

323
00:23:49,630 --> 00:23:54,340
And that is going to receive two arguments, the first one is the name and the second one is the age,

324
00:23:54,580 --> 00:24:01,770
and we are going to write and self Dodd name equal to and and we are going to write in self doubt,

325
00:24:01,810 --> 00:24:04,330
age equal to it.

326
00:24:04,600 --> 00:24:11,350
Now, you can always use the at the rate of conceptual help, but to do it, that is going to generate

327
00:24:11,350 --> 00:24:12,190
the very same output.

328
00:24:12,190 --> 00:24:13,430
So you can use any of this.

329
00:24:13,990 --> 00:24:16,000
So just end this function of a hill.

330
00:24:17,510 --> 00:24:23,510
Now, this is a constructor function and down here, what you can do is that you can create the function

331
00:24:23,510 --> 00:24:28,100
that is going to calculate the human errors and what you are going to do, that you're going to make

332
00:24:28,100 --> 00:24:28,880
it private.

333
00:24:28,910 --> 00:24:31,580
So just write in private wahib.

334
00:24:31,850 --> 00:24:36,120
And now anything that is written after this is going to be private.

335
00:24:36,140 --> 00:24:42,020
So we are going to write in def and the name of the function is going to be human error since it is

336
00:24:42,020 --> 00:24:43,490
going to calculate human years.

337
00:24:46,180 --> 00:24:52,090
And in dysfunction, you are going to just write an H starick.

338
00:24:54,790 --> 00:24:57,050
Made years good enough.

339
00:24:57,070 --> 00:25:04,390
Let's just end this function and this class and now what you can do simply is that you can just call

340
00:25:04,390 --> 00:25:04,740
this.

341
00:25:05,110 --> 00:25:11,770
So just remove this from hell and let's just remove these spaces so that everything is visible.

342
00:25:12,550 --> 00:25:13,000
All right.

343
00:25:13,000 --> 00:25:17,380
Now, right down here, what you can do is that you can create an object, John, and you're going to

344
00:25:17,380 --> 00:25:21,760
write in M. Deutche new just in the name.

345
00:25:22,890 --> 00:25:28,190
And just pass in the it's now since we are calculating the military, so that's why we are going to

346
00:25:28,190 --> 00:25:34,500
do this in five so that it is going to multiply with this force so that generate a 20 that is expected

347
00:25:34,500 --> 00:25:35,610
out before us.

348
00:25:35,640 --> 00:25:43,880
So, no, I don't hear what you can do is that you can write in John Dodd human underscore years.

349
00:25:44,890 --> 00:25:46,690
But if you now run, this could.

350
00:25:47,900 --> 00:25:53,750
You can see that you have got an error that says the method which you are trying to access is a private

351
00:25:53,750 --> 00:25:54,280
method.

352
00:25:54,800 --> 00:26:01,940
So we have made the human errors a human interest method private by placing it under the private method

353
00:26:01,940 --> 00:26:02,260
call.

354
00:26:02,600 --> 00:26:05,420
Now, what did what is it good for then?

355
00:26:05,420 --> 00:26:10,730
If we cannot even call this from outset by just using the object?

356
00:26:11,390 --> 00:26:15,980
Private methods are only accessible from other methods in the class.

357
00:26:15,980 --> 00:26:23,000
For example, given the very same code, what we will do is that to access this human ear, what we

358
00:26:23,000 --> 00:26:26,630
will do is that we are going to create one more function.

359
00:26:28,730 --> 00:26:31,520
So right down here, we are going to have def.

360
00:26:33,240 --> 00:26:39,240
Disclosed function and in the disclosed function, what you are going to do is that you are going to

361
00:26:39,240 --> 00:26:40,350
write an.

362
00:26:42,940 --> 00:26:45,010
Self dot.

363
00:26:46,280 --> 00:26:46,850
Name.

364
00:26:49,510 --> 00:26:50,200
Is.

365
00:26:53,500 --> 00:26:54,790
The name of the function.

366
00:26:56,610 --> 00:26:57,540
And.

367
00:27:00,370 --> 00:27:01,840
Right, and there are human.

368
00:27:02,820 --> 00:27:03,540
Years.

369
00:27:04,800 --> 00:27:07,290
So justice and dysfunction.

370
00:27:09,550 --> 00:27:15,100
And now what you're going to do is that in place of this, you are going to just write in John Dodd.

371
00:27:16,190 --> 00:27:17,990
Disclosed or undisclosed?

372
00:27:19,090 --> 00:27:20,750
So the address is private.

373
00:27:20,900 --> 00:27:27,440
Yes, because we have done it also under the private, so this discloser is also now a private matter

374
00:27:27,460 --> 00:27:29,530
and you can not access it right now like this.

375
00:27:29,830 --> 00:27:33,700
So we'll just remove this from here and we will just remove it from the stack.

376
00:27:33,720 --> 00:27:36,870
So it is not right down this tag that is private.

377
00:27:37,180 --> 00:27:39,430
So now it is disclosed function is no more private.

378
00:27:39,430 --> 00:27:45,850
Now this code and it is going to run perfectly just at ports to see the output here on this code.

379
00:27:45,850 --> 00:27:49,810
And you can see that it says, John, is a 20 human error.

380
00:27:50,200 --> 00:27:58,240
So we have actually used this human year function by calling, by just using it inside a function that

381
00:27:58,240 --> 00:27:58,990
is not private.

382
00:27:58,990 --> 00:28:04,630
And we have actually accessed a private method using a function that is inside the glass.

383
00:28:04,650 --> 00:28:10,480
So we are going to call it that is closed function, and that is going to help us access the private

384
00:28:10,480 --> 00:28:12,370
method inside the glass human.

385
00:28:12,700 --> 00:28:18,420
Now, you have to note one thing, very important number here, that in this case, we cannot use cells

386
00:28:18,430 --> 00:28:20,050
with this human years.

387
00:28:20,380 --> 00:28:24,740
Now, the reason behind this is that the human method is private.

388
00:28:25,270 --> 00:28:31,880
Remember that self, not human, is equivalent to John Dawid human years, which is not allowed for

389
00:28:31,880 --> 00:28:32,720
a private matter.

390
00:28:32,860 --> 00:28:36,190
If you just recognize or remember the previous to realise.

391
00:28:36,550 --> 00:28:42,520
I have told you that if you don't specify cells, then basically we are referring to the name of the

392
00:28:42,520 --> 00:28:50,410
current object, not the name of the method you are referring to, since we cannot access this private

393
00:28:50,410 --> 00:28:52,180
method with DeJohn object.

394
00:28:52,420 --> 00:28:58,350
So if you just write and self-doubt years away, then it is like writing John Dodd human erasable here.

395
00:28:58,360 --> 00:29:00,150
So that is what is basically not allowed.

396
00:29:00,160 --> 00:29:02,950
Therefore you have to just use human ears.

397
00:29:03,790 --> 00:29:09,910
In summary, private methods are not accessible outside of the class definition at all and are only

398
00:29:09,910 --> 00:29:13,440
accessible from inside the class when called without.

399
00:29:13,540 --> 00:29:21,190
So as of Ruby two point seven, it is now legal to call private matters with a literal self as the public

400
00:29:21,190 --> 00:29:23,470
and private methods are most common.

401
00:29:23,470 --> 00:29:29,860
But in some less common situations we would want and in between approach, we can use the protected

402
00:29:29,860 --> 00:29:31,960
key word to create protected methods.

403
00:29:32,150 --> 00:29:36,160
The easiest way to understand protected method is to follow two rules.

404
00:29:36,190 --> 00:29:38,740
The first rule is from inside the class.

405
00:29:39,010 --> 00:29:44,740
Protected methods are accessible just like public method, whereas from outside the class, protected

406
00:29:44,740 --> 00:29:47,870
methods act just like the private method.

407
00:29:48,130 --> 00:29:52,690
So if you talk about an example, we will just remove this stuff from here.

408
00:29:54,650 --> 00:30:00,420
And here we are going to create to function, the first one is a public matter.

409
00:30:00,440 --> 00:30:04,970
So we are going to name it ACBL that stands for public.

410
00:30:05,450 --> 00:30:11,540
And in this, what we are going to write and we are going to write in, will this work?

411
00:30:13,920 --> 00:30:18,000
And what we are going to add with this is that we are going to ride in self.

412
00:30:19,160 --> 00:30:24,540
Dot, the name of the function that is every al and we are going to just end this function.

413
00:30:24,770 --> 00:30:30,410
Now, what we are going to do is we are going to create the protected variable and downhere, whatever

414
00:30:30,410 --> 00:30:32,310
you are going to create is going to be protected.

415
00:30:32,330 --> 00:30:33,890
I have already told you the rules.

416
00:30:34,200 --> 00:30:42,650
So if you just write in death, e, r, b, c, D, that stands for basically protected.

417
00:30:42,860 --> 00:30:47,150
And inside this function where you're going to specify is that you're going to write.

418
00:30:47,150 --> 00:30:50,630
And yes, I am a protected.

419
00:30:51,840 --> 00:30:55,020
Method, simple enough, just end this function.

420
00:30:56,580 --> 00:31:02,130
And the glass has already been and so if you see the above code, it is a little complicated.

421
00:31:02,430 --> 00:31:08,960
So we will create a human story, a male object, and we are going to test this thing over here.

422
00:31:09,510 --> 00:31:11,880
So we will just remove this from here.

423
00:31:11,880 --> 00:31:14,700
And we are going to create an object and we are going to write an.

424
00:31:16,500 --> 00:31:20,150
To new and we are going to write an object.

425
00:31:23,670 --> 00:31:27,000
DOD, and we are going to use the PBL.

426
00:31:27,450 --> 00:31:33,480
So what this is going to do is that it is going to go into this PBL function, is going to see the statement,

427
00:31:33,480 --> 00:31:34,140
will this work?

428
00:31:34,140 --> 00:31:36,330
And then it is going to go into the protected matter.

429
00:31:36,660 --> 00:31:40,270
This is not going to be it is going to be the PR.

430
00:31:41,100 --> 00:31:46,050
So it is going to have the stuff that protected that is going to call in the protected matter because

431
00:31:46,170 --> 00:31:50,400
right directly you cannot use this protected matter, as I've told you that the rules as well.

432
00:31:50,620 --> 00:31:56,850
The first rule was that you cannot access it directly from outside, but from inside you can access

433
00:31:56,850 --> 00:31:57,790
it using the Southmead.

434
00:31:58,050 --> 00:32:02,320
So from outside of the class, protected methods are just like private matters.

435
00:32:02,340 --> 00:32:06,780
And from inside the glass, protected matters are accessible, just like public matters.

436
00:32:07,020 --> 00:32:13,830
So we are accessing the protected matter that is protected from inside of a function that is a public

437
00:32:13,830 --> 00:32:14,340
function.

438
00:32:15,500 --> 00:32:22,620
So if you just run this code, it has unsuccessfully just write in votes to see if the output is generated.

439
00:32:22,640 --> 00:32:23,410
Yes, it has.

440
00:32:23,420 --> 00:32:25,190
And it says, well, this works.

441
00:32:25,370 --> 00:32:28,440
And after that, the the RTC has printed.

442
00:32:28,460 --> 00:32:31,540
Yes, I am a protected matter, as you can see here.

443
00:32:31,550 --> 00:32:34,040
Let's just add a space and now run this and you can see that.

444
00:32:34,040 --> 00:32:34,740
Will this work?

445
00:32:35,000 --> 00:32:39,540
Yes, I am a protected method and that was what was actually required.

446
00:32:39,750 --> 00:32:48,140
So the above lines of code shows us that we can call a protected matter from within the class, even

447
00:32:48,140 --> 00:32:48,860
with self.

448
00:32:50,390 --> 00:32:52,750
So what about outside of the class?

449
00:32:52,760 --> 00:32:58,100
So if you try to access this, you just write in B or C, D, O'Haire run this code.

450
00:32:58,370 --> 00:33:00,490
It is going to generate an error message.

451
00:33:00,500 --> 00:33:05,410
This demonstrates the second rule that we cannot call the protected method from outside of the class.

452
00:33:05,420 --> 00:33:10,370
The two rules for protected methods apply within the context of inheritance as well.

453
00:33:10,640 --> 00:33:14,330
Now there are some exceptions to this rule, but we want to worry about that.

454
00:33:14,330 --> 00:33:20,630
Yet protected methods are not used often in practice, and that knowledge is not transferable to other

455
00:33:20,630 --> 00:33:21,110
languages.

456
00:33:21,120 --> 00:33:26,720
So if you remember these two rules of our protected methods, that should be good enough for the time

457
00:33:26,720 --> 00:33:27,050
being.

458
00:33:27,620 --> 00:33:32,370
That comes the final topic we are going to cover in this tutorial that is accidental method or writing.

459
00:33:32,390 --> 00:33:38,510
Now it is important to remember that every class you create inherently subclasses from class object,

460
00:33:38,510 --> 00:33:43,020
the object class is built into Ruby and comes with many crucial methods.

461
00:33:43,400 --> 00:33:48,110
So, for example, if I just remove this from here, so let's say you have a class that is named as

462
00:33:48,110 --> 00:33:56,480
parent and in that class you have a method that is so high and that you are going to just write in votes

463
00:33:56,840 --> 00:33:57,830
high from.

464
00:33:59,340 --> 00:34:06,120
They're glass and just dysfunction and this glass and doing says that you're going to ride in parent,

465
00:34:06,300 --> 00:34:13,320
not super glass, and if you just run this good, you are going to see that it went perfectly just at

466
00:34:13,380 --> 00:34:14,580
post over here on this.

467
00:34:14,850 --> 00:34:16,940
And you can see that it says object.

468
00:34:17,010 --> 00:34:25,740
Now, this means that methods defined in the object class are available in all classes for the recall,

469
00:34:25,740 --> 00:34:31,860
that through the magic of inheritance, a subclass can override a super class method as well.

470
00:34:32,040 --> 00:34:33,690
So let's say you have.

471
00:34:35,410 --> 00:34:44,050
A child close to a hill puts a class that is named as child and that is being the child of the parent

472
00:34:44,050 --> 00:34:49,230
clause, and in that you have the very same function that is deficit high.

473
00:34:49,600 --> 00:34:54,130
And in that you have, let's say, the very same thing.

474
00:34:54,250 --> 00:34:56,140
But you are going to just write in votes.

475
00:34:56,890 --> 00:34:57,550
I am.

476
00:34:58,180 --> 00:34:59,620
Or you can just say hi.

477
00:35:00,190 --> 00:35:00,550
Hi.

478
00:35:00,550 --> 00:35:03,910
From the child class.

479
00:35:05,910 --> 00:35:12,840
Just and this and this, and now if you just create an object for the child class, so if you just write

480
00:35:12,840 --> 00:35:21,420
in child equal to Child Dot knew and you just write in child dot and to score high.

481
00:35:23,060 --> 00:35:28,490
Just good, it is going to say hi from the child class and it is also going to generate a warning that

482
00:35:28,490 --> 00:35:34,280
says already initialize the constant child previously definition of this, whatever child was created.

483
00:35:34,490 --> 00:35:35,180
So.

484
00:35:36,090 --> 00:35:40,260
It is going to give you the output and it you can see that it is printed high from the trade.

485
00:35:40,560 --> 00:35:46,290
Now, this means that if you accidentally override a method that was originally defined in the object

486
00:35:46,290 --> 00:35:49,340
class, it can have the far reaching effects on your core.

487
00:35:49,350 --> 00:35:55,680
For example, send is an instance method that all classes inherit from object.

488
00:35:55,860 --> 00:36:02,640
If you defined a new set instance method in your class, all object of your class will call your custom

489
00:36:02,640 --> 00:36:10,290
send method instead of the one in the class object, which is probably the one they mean to call objects

490
00:36:10,290 --> 00:36:16,770
and serve us as a way to call a method by passing it a symbol or a string which represent the method

491
00:36:16,770 --> 00:36:17,460
you want to call.

492
00:36:17,700 --> 00:36:21,480
The next couple of arguments will represent the methods argument, if any.

493
00:36:21,660 --> 00:36:26,220
So let's see how send normally works by you making use of our child plus.

494
00:36:27,450 --> 00:36:31,250
So what we are going to do is that we are going to create one more objects.

495
00:36:31,270 --> 00:36:37,430
We are going to ride in sun equal to child dot new and we are going to ride in sun dot send.

496
00:36:38,340 --> 00:36:43,470
We are going to specify a colon and we are going to write and say and a score high run this code.

497
00:36:43,470 --> 00:36:46,230
And you can see that it says high from the child class.

498
00:36:46,530 --> 00:36:51,840
So let's see what happens when we define a send method in our child class and then try to invoke the

499
00:36:51,840 --> 00:36:56,700
object send method, because as you can see, that we don't have any kind of send method here yet.

500
00:36:56,910 --> 00:37:01,020
We are getting this out because this is the standard method that is from the object class, that is

501
00:37:01,020 --> 00:37:01,780
a class.

502
00:37:02,070 --> 00:37:05,940
So in this class over here, if we define the function.

503
00:37:07,490 --> 00:37:07,810
Sen.

504
00:37:07,910 --> 00:37:10,430
And we just let's say a write in puts.

505
00:37:12,040 --> 00:37:13,180
Send method.

506
00:37:14,450 --> 00:37:20,660
Are the child glass are just right in the hill.

507
00:37:22,050 --> 00:37:24,190
And let's just end dysfunction as well.

508
00:37:26,100 --> 00:37:32,160
And now, right down here, what you can do is that you have already created your object that is sun

509
00:37:32,160 --> 00:37:37,770
shining with a child on you, and now you can just ride in sun docent and the very same thing.

510
00:37:37,770 --> 00:37:40,630
Just run this code and you can see that you have got an error.

511
00:37:40,920 --> 00:37:46,590
Normally, we would expect the output of the scroll to be high for a child, but upon the running we

512
00:37:46,590 --> 00:37:48,670
got a completely different result.

513
00:37:48,690 --> 00:37:54,600
That is about the wrong number of argument given one and the expected number of arguments are zero.

514
00:37:54,630 --> 00:38:00,600
So in our example, we are passing send one argument, even though our Aurélien Sand method does not

515
00:38:00,600 --> 00:38:02,430
take any kind of arguments.

516
00:38:03,030 --> 00:38:08,200
So let's take a look at another example by exploring objects instance of method.

517
00:38:08,460 --> 00:38:15,600
Now, what's what this handy method does is to return true if an object is an instance of a given glass

518
00:38:15,600 --> 00:38:16,780
and false otherwise.

519
00:38:17,040 --> 00:38:18,900
So let's see that in action.

520
00:38:18,910 --> 00:38:24,450
So let's say we we will have a class object that is the very same right over here.

521
00:38:24,660 --> 00:38:27,850
But now we are going to use the instance method over here.

522
00:38:28,860 --> 00:38:30,990
So we are going to ride in Sun Dot.

523
00:38:33,140 --> 00:38:39,160
Instance underscore of our question mark, and if you just write in votes with it.

524
00:38:40,350 --> 00:38:41,180
Run is good.

525
00:38:42,050 --> 00:38:45,540
All right, it is again saying that it has got some kind of error.

526
00:38:45,570 --> 00:38:45,750
Yes.

527
00:38:45,750 --> 00:38:48,450
Because we have to remove this function from here now.

528
00:38:48,450 --> 00:38:48,990
Run it.

529
00:38:49,830 --> 00:38:50,160
All right.

530
00:38:50,190 --> 00:38:50,700
This is wrong.

531
00:38:50,700 --> 00:38:53,480
Number of parameters for the instance of Matadi.

532
00:38:53,480 --> 00:38:53,640
Yes.

533
00:38:53,640 --> 00:38:55,740
We have to specify the name of the class as well.

534
00:38:55,770 --> 00:38:59,460
So if you just write Angiulo here, underscore it is going to generate Drew.

535
00:38:59,790 --> 00:39:02,730
And if you just copied this from here.

536
00:39:06,270 --> 00:39:12,330
And just a hair in place of child, we write the name of the parent class, Randy Scott, it is going

537
00:39:12,330 --> 00:39:13,700
to generate for us.

538
00:39:13,860 --> 00:39:19,130
So now let's over write the instance of method within the child class.

539
00:39:19,350 --> 00:39:22,260
So what we are going to do is that we are going to write in depth.

540
00:39:25,770 --> 00:39:32,580
Instance of and in that method, what we are going to do is that we are going to simply write inputs.

541
00:39:35,220 --> 00:39:37,260
Fake instance.

542
00:39:38,620 --> 00:39:45,610
And just and dysfunctional here and now, if you just execute the statements, right, a hill.

543
00:39:47,170 --> 00:39:53,020
Just remove this from her underscored, it is going to generate an error that is also about the wrong

544
00:39:53,020 --> 00:39:54,090
number of arguments.

545
00:39:54,280 --> 00:40:00,940
So they said this, said that one object instance method that is easily overridden without any major

546
00:40:00,940 --> 00:40:06,400
side effect is that to underscore method, you will normally want to do this when you want a different

547
00:40:06,400 --> 00:40:08,030
string representation of an object.

548
00:40:08,050 --> 00:40:13,390
Overall, it is important to familiarize yourself with some of the common object methods and make sure

549
00:40:13,390 --> 00:40:19,840
to not accidentally overwrite them, as this can have devastating consequences for your application,

550
00:40:19,840 --> 00:40:26,160
as you have seen right over here, that when you try to override the building method of the object instance

551
00:40:26,200 --> 00:40:33,600
of or when you try to override the method send, that was also a part of the same object building class.

552
00:40:33,730 --> 00:40:37,690
So that is going to have a devastating effect and it is going to generate errors because those are the

553
00:40:37,690 --> 00:40:41,960
methods that are going to be called in for the object class.

554
00:40:42,250 --> 00:40:48,770
So I hope it is clear and these are basically all the concepts in very detail about inheritance.

555
00:40:48,770 --> 00:40:51,370
So I hope you understood inheritance in the next story.

556
00:40:51,370 --> 00:40:55,530
And we are going to come up with a new topic, so stay tuned for that.

557
00:40:55,540 --> 00:40:56,760
So that's it for this tutorial.

558
00:40:56,770 --> 00:40:58,120
Thank you so much for watching.

559
00:40:58,270 --> 00:41:00,820
And I'll see you guys in the next aureole.
