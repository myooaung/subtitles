1
00:00:00,450 --> 00:00:01,530
Hey, guys, what's up?

2
00:00:01,560 --> 00:00:05,210
This is a marathon, and I welcome you to another tutorial on discourse on Ruby.

3
00:00:05,220 --> 00:00:10,980
And in this story you'll continue on with arrows and in this story all basically we are going to cover

4
00:00:10,980 --> 00:00:12,750
two interesting topics on Erra.

5
00:00:12,900 --> 00:00:18,150
The first one is to be how to get a random entry from an area.

6
00:00:18,150 --> 00:00:22,660
And then we are going to see how to find and filter elements of an area.

7
00:00:23,040 --> 00:00:27,760
So to start on with, the first stopping is getting a random entry from an area.

8
00:00:28,170 --> 00:00:33,720
Now, you might be working on a game of chance, let's say, or maybe you are writing a program that

9
00:00:33,720 --> 00:00:35,310
picks a contest winner.

10
00:00:35,310 --> 00:00:41,160
Or maybe you are, let's say, just tossing the toss and you want to see whether our hat scheme or at

11
00:00:41,160 --> 00:00:43,440
the game and you want that to be random.

12
00:00:43,710 --> 00:00:48,150
Not those kind of things require some kind of random value.

13
00:00:48,330 --> 00:00:55,770
Not a common solution is to put the possible choices in an area and select a random index to get a random

14
00:00:55,770 --> 00:00:57,000
index from an area.

15
00:00:57,000 --> 00:01:02,880
You could simply generate a random index between zero and the last index of the area and use that as

16
00:01:02,880 --> 00:01:04,680
an index to retrieve the value.

17
00:01:04,920 --> 00:01:09,150
But there is a very easier way to do the very same thing.

18
00:01:09,390 --> 00:01:15,720
The simple method in Ruby is going to grab a random entry from an error and make the job simple for

19
00:01:15,720 --> 00:01:15,950
you.

20
00:01:16,470 --> 00:01:22,840
So let's just create a random error in which we are going to create a.

21
00:01:25,110 --> 00:01:32,820
Possible set of outcome we want to expect so we are going to write in X equal to this error and let's

22
00:01:32,820 --> 00:01:36,840
say we want the answer can be either let's say.

23
00:01:39,610 --> 00:01:41,440
Head or it can be.

24
00:01:43,030 --> 00:01:48,280
So these are the, let's say, two possible outcomes, so what you can do over here is that you can

25
00:01:48,280 --> 00:01:55,570
just ride in boats and start sample, run this code and you can see that had has been generated, run

26
00:01:55,570 --> 00:01:56,050
this again.

27
00:01:56,050 --> 00:02:02,970
Tail has been generated again, had again had you can see that it is basically generating random values.

28
00:02:03,040 --> 00:02:05,660
Now you can have multiple over here as well.

29
00:02:05,680 --> 00:02:05,940
Yes.

30
00:02:05,950 --> 00:02:07,720
Let's say we have got yes.

31
00:02:08,410 --> 00:02:13,570
We have got another one here then we have got maybe a here.

32
00:02:15,290 --> 00:02:20,900
And then we have got, let's say, ask again, a, which is basically a primitive version of a magic

33
00:02:20,900 --> 00:02:21,820
eight ball game.

34
00:02:22,160 --> 00:02:27,020
So if he run this one O'Haire here, so you can see that you've got maybe if you just run it again,

35
00:02:27,020 --> 00:02:30,430
you can see that you have got a different output running again and you have got maybe.

36
00:02:30,680 --> 00:02:36,800
So basically the sample function is going to generate random values for, you know, the sample method

37
00:02:36,800 --> 00:02:43,160
also accepts one more, an argument over here as well that return an array of random entries.

38
00:02:43,190 --> 00:02:50,270
So if you happen to need more than one random entry, you should just supply that number and the argument

39
00:02:50,510 --> 00:02:54,960
and you will get the number of entries you have specified in that argument.

40
00:02:55,220 --> 00:03:00,620
So, for example, right over here, what we want is that one, two entries to get generated.

41
00:03:00,620 --> 00:03:06,140
So you can just write in brackets, Soheil, and you can write in the number of entries you want.

42
00:03:06,350 --> 00:03:12,950
So if you want to outputs to get selected randomly from this area X, you can just write in to run this

43
00:03:12,950 --> 00:03:18,020
and you can see that you have got a note and you have got is these are the two random entries that has

44
00:03:18,020 --> 00:03:19,430
been picked up from this area.

45
00:03:19,430 --> 00:03:23,480
When you run the score, if you just run it again, you can see that you've got Knyaz again.

46
00:03:24,680 --> 00:03:27,590
And if you just run it again, you can see that you got maybe energy.

47
00:03:27,860 --> 00:03:34,220
So what this is going to do is that basically it is going to get random entries, which is going to

48
00:03:34,220 --> 00:03:36,470
be the number you have specified in the arguments.

49
00:03:36,800 --> 00:03:41,890
Now, the next topic we are going to cover in this drill is how to find and filter elements of an array.

50
00:03:42,280 --> 00:03:42,470
No.

51
00:03:42,470 --> 00:03:49,250
One, you are looking for a specific element in an area you typically ETrade or its elements until you

52
00:03:49,250 --> 00:03:50,960
find what you are looking for.

53
00:03:52,120 --> 00:03:59,560
But Rubiera provide several methods specifically designed to simplify this process of searching through

54
00:03:59,560 --> 00:04:00,090
areas.

55
00:04:00,520 --> 00:04:06,580
If you just want to see if an element exists, you can use the include questionmark method, which return

56
00:04:06,580 --> 00:04:06,970
true.

57
00:04:06,970 --> 00:04:13,750
If the specified data is an element of the area and it is going to return, false at the specified data

58
00:04:13,750 --> 00:04:15,340
is not the element of an error.

59
00:04:15,580 --> 00:04:20,380
Now you have already covered that include function in the previous sections as well, and you know that

60
00:04:20,380 --> 00:04:26,710
to include function is only used to check if a certain entry exists or not and it is always going to

61
00:04:27,670 --> 00:04:29,260
return a boolean value.

62
00:04:29,590 --> 00:04:38,590
So if you just write an X dot includable here, a question mark over here and what you can do is that

63
00:04:38,590 --> 00:04:42,010
you can just write in the value you want to check since it is all individual.

64
00:04:42,010 --> 00:04:42,760
So you have to check it.

65
00:04:42,760 --> 00:04:47,110
Indira's so let's say I want to check if it has.

66
00:04:48,550 --> 00:04:53,800
X, Y, Z, in it or not, I was just trying it, and you can see that I've simply got false as doubt,

67
00:04:53,800 --> 00:04:55,580
but because X, Y, Z is not a part of it.

68
00:04:55,840 --> 00:05:01,360
So if I just write a novel here, run the score, you can see that I have got Drew Oakhill, which means

69
00:05:01,360 --> 00:05:03,490
that no is a part of that area.

70
00:05:03,730 --> 00:05:08,050
So this was basically the only check if a certain element exists or not.

71
00:05:08,380 --> 00:05:14,980
Now, how to basically find a value and then to filter it out from, let's say, a set of values.

72
00:05:15,250 --> 00:05:18,310
What you can do is that you can just use the find method.

73
00:05:18,430 --> 00:05:24,460
Now, the fine method locates and return the first element in the area that matches a condition you

74
00:05:24,460 --> 00:05:28,030
have specified, because that is what is called finding and filtering.

75
00:05:28,360 --> 00:05:35,710
So, for example, to identify the first entry in an area that contains a lot of values, you could

76
00:05:35,710 --> 00:05:43,780
just use the each method to compare each entry and you can stop iterating when you find the first match,

77
00:05:43,780 --> 00:05:44,680
which you like.

78
00:05:44,920 --> 00:05:52,360
So you have, let's say, an area in which we will just specify simple values, which are a part of

79
00:05:52,360 --> 00:05:53,760
the previous tutorial as well.

80
00:05:53,770 --> 00:05:55,120
A, b, c.

81
00:05:57,240 --> 00:05:57,840
The.

82
00:05:59,210 --> 00:06:05,340
And let's say so, these are the values, so we will just remove this from here and what we will do

83
00:06:05,480 --> 00:06:12,770
here is that we are going to create a variable and we are going to store Nelnet because this is what

84
00:06:12,770 --> 00:06:14,330
is going to have the value.

85
00:06:14,540 --> 00:06:21,590
So down here, what we can do is that we can write in X dot each and that each function is basically

86
00:06:21,590 --> 00:06:26,970
going to compare each value with every element of that area.

87
00:06:27,200 --> 00:06:30,540
So we are going to write an X dot each.

88
00:06:30,560 --> 00:06:32,000
We're going to write and do.

89
00:06:34,830 --> 00:06:40,500
The bar is here and we are going to define one more variable over here that is going to contain the

90
00:06:40,500 --> 00:06:42,350
value one at a time.

91
00:06:42,360 --> 00:06:44,820
So it is going to be, let's say, Wiwa Hill.

92
00:06:46,250 --> 00:06:49,400
Downhill, what we are going to do is that we are going to ride in if.

93
00:06:50,950 --> 00:06:57,580
Dot include Questionmark, and we are going to write in, let's say we want to check if it is a part

94
00:06:57,580 --> 00:07:03,430
of this area or not, what we will do is that we are going to write in preserved equal to.

95
00:07:04,920 --> 00:07:11,130
This wire was held, which we have initialized so downhill, not this.

96
00:07:18,420 --> 00:07:24,570
And right here, what we can do is that we can just write and break statement, because we what we want

97
00:07:24,570 --> 00:07:30,350
is that for the first match, which is found, we want to just come out of this loop.

98
00:07:30,360 --> 00:07:32,010
So we use the break for that.

99
00:07:32,940 --> 00:07:37,680
Just come down and the if statement just come down and the do statement.

100
00:07:38,370 --> 00:07:40,530
And that has to be r e.

101
00:07:40,680 --> 00:07:41,600
S.

102
00:07:42,900 --> 00:07:45,000
Now, you just run this code.

103
00:07:48,870 --> 00:07:53,280
And I guess you have to just try and put somewhere.

104
00:07:56,670 --> 00:08:02,270
So just write in votes are, ah, yes, here, run the school and you can see that you've got that element.

105
00:08:02,550 --> 00:08:04,320
So for example, you don't have that element.

106
00:08:04,320 --> 00:08:05,730
Let's face that element.

107
00:08:06,880 --> 00:08:09,440
Run this go and you can see that it has printed out nothing.

108
00:08:09,850 --> 00:08:13,070
Now, whatever you have done, it is a very big thing.

109
00:08:13,210 --> 00:08:16,930
What are you going to do is that you can do the very same thing using the fire to function.

110
00:08:16,930 --> 00:08:22,770
And that is going to be much more easier than whatever you have been doing in these three deadlines.

111
00:08:23,110 --> 00:08:28,690
So just remove it from here and you can just do it in a single line using defined functions.

112
00:08:28,690 --> 00:08:31,660
So we are going to write an ar e equal to.

113
00:08:33,500 --> 00:08:41,300
Ex Dawid find and the find function is B is to be something like in this curly brackets and in that

114
00:08:41,300 --> 00:08:49,790
you have to write in the value where you want to basically store the first element for the first iteration,

115
00:08:49,790 --> 00:08:53,960
second element for the second and third element for the third address and so on.

116
00:08:54,260 --> 00:08:57,740
And right here what you can do is that you can write and y dot.

117
00:08:59,030 --> 00:08:59,870
Include.

118
00:09:00,850 --> 00:09:04,860
Questionmark and in the brackets, you can write in the value you want to search for.

119
00:09:04,900 --> 00:09:11,650
That is the value down here, or you can just write in print Daria's and that's all it will do.

120
00:09:11,650 --> 00:09:14,910
The very same job which was previously done from three to 10.

121
00:09:15,220 --> 00:09:18,160
So just run the score and you can see that it has been printed.

122
00:09:18,160 --> 00:09:21,990
If you just write an F over here, run the score, you can see that nothing has been printed.

123
00:09:22,180 --> 00:09:28,450
So the find function is going to basically simplify things for you and it is going to locate and write

124
00:09:28,450 --> 00:09:34,060
down the first element in the area that matches a condition you have specified.

125
00:09:34,330 --> 00:09:36,460
Now the find executes the block.

126
00:09:36,460 --> 00:09:38,940
You provide for each element in the area.

127
00:09:39,100 --> 00:09:44,950
If the last expression in the block evaluates to true, the fine method returns the value and stops

128
00:09:45,160 --> 00:09:45,500
writing.

129
00:09:45,700 --> 00:09:50,680
Not if it doesn't find anything, then after that attrition through all of the elements, it is going

130
00:09:50,680 --> 00:09:51,700
to have done nothing.

131
00:09:52,210 --> 00:09:54,400
Then you have got a select method as well.

132
00:09:54,400 --> 00:10:01,480
The select method works in a very similar way, but what it do different is that it constructs a new

133
00:10:01,480 --> 00:10:07,600
area containing all of the elements that match the condition you have specified instead of just returning

134
00:10:07,600 --> 00:10:09,840
a single value and just stopping.

135
00:10:10,150 --> 00:10:15,880
So if you have this very same program right or here and instead of this find.

136
00:10:18,230 --> 00:10:22,660
You use the select function of a hill or the rest is going to be the same, you've tried and while here

137
00:10:22,670 --> 00:10:29,240
you tried inviting you to ride in this, just run the code and you can see that you have got an area.

138
00:10:29,750 --> 00:10:34,790
You can see these brackets of a hill, but it is an empty array because nothing was fulfilled.

139
00:10:34,820 --> 00:10:36,190
Well, here, the condition is false.

140
00:10:36,470 --> 00:10:38,630
It's right in the statement so that it is true.

141
00:10:38,630 --> 00:10:41,780
Run the score and you can see that you have got an area.

142
00:10:41,780 --> 00:10:47,120
Now, in the previous case, it was just retaining that element and it was not an area to return.

143
00:10:47,420 --> 00:10:54,320
The select function where it is different from the previous one is that it returns basically the error

144
00:10:54,410 --> 00:10:59,480
of whatever elements are satisfying a specific condition.

145
00:11:01,220 --> 00:11:06,620
Then you have got one more method, that is the reject method and the reject method is also used for

146
00:11:06,620 --> 00:11:12,680
finding and filtering, and the reject method basically returns a new area that is containing elements

147
00:11:12,680 --> 00:11:14,500
that don't match the condition.

148
00:11:14,870 --> 00:11:19,580
So you can think of it as a filter that remove elements you don't want.

149
00:11:20,090 --> 00:11:26,840
Now, if you just have an example in which you have this very same area and you use instead of the select,

150
00:11:26,840 --> 00:11:32,270
you use the reject function, then what it is going to do is that it is going to return an output just

151
00:11:32,270 --> 00:11:38,480
opposite of the select function, because what the select function do is that it selects the value that

152
00:11:38,480 --> 00:11:43,330
meets the condition and return those rejecting all the other values.

153
00:11:43,340 --> 00:11:48,380
But what reject is going to do is that it is going to reject the values that specifies the condition

154
00:11:48,380 --> 00:11:50,730
and it is going to return the remaining values.

155
00:11:50,960 --> 00:11:55,400
So basically, that's what is totally opposite of the reselect one.

156
00:11:55,550 --> 00:12:00,310
So if you just run the school, you can see that the condition that was satisfying over here was this

157
00:12:00,370 --> 00:12:05,540
a just removing that, rejecting its value.

158
00:12:05,660 --> 00:12:08,390
It has redone the entire remaining area.

159
00:12:08,390 --> 00:12:15,950
That is B, C, D and E, so select and reject both returns, a new area leaving the original value

160
00:12:16,130 --> 00:12:17,450
of the area unchanged.

161
00:12:17,570 --> 00:12:24,230
However, if you use the select and reject what the exclamation mark, the original area is also going

162
00:12:24,230 --> 00:12:31,310
to get modified, then you have also got the find all method that is an alias for select, but there

163
00:12:31,310 --> 00:12:34,700
is no find all matter with an exclamation mark.

164
00:12:36,010 --> 00:12:42,910
In the next story, what we will do is that we will have a look how to sort the values of an area.

165
00:12:42,920 --> 00:12:46,780
So I hope you have understood why I've been telling you so far.

166
00:12:46,810 --> 00:12:48,910
I hope you have got the select matter.

167
00:12:48,930 --> 00:12:50,340
You've got the reject method.

168
00:12:50,350 --> 00:12:53,990
You know how to find elements and build the elements using the find function as well.

169
00:12:54,520 --> 00:12:57,490
So I guess that was all with this tutorial.

170
00:12:57,520 --> 00:12:59,020
Thank you so much, guys, for watching.

171
00:12:59,020 --> 00:13:01,030
And I'll see you guys in the next Attrill.
