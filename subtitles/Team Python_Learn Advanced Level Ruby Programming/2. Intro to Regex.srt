1
00:00:00,460 --> 00:00:01,510
Hey, guys, what's up?

2
00:00:01,540 --> 00:00:06,190
This was a manhunt, and I welcome you to another on this course on Gooby and in this Dorel, we are

3
00:00:06,190 --> 00:00:08,980
going to cover the introduction to regular expression.

4
00:00:09,280 --> 00:00:14,860
Now, a regular expression is basically a sequence of characters that define a search pattern mainly

5
00:00:14,860 --> 00:00:17,350
for use in pattern matching with strings.

6
00:00:17,650 --> 00:00:25,210
Ruby regular expression that stands for ruby red X for a short help us to find a particular pattern

7
00:00:25,210 --> 00:00:31,870
inside a string doofuses this of a ruby regular expression are validation and passing a ruby.

8
00:00:31,880 --> 00:00:36,220
Regular expression can be used to validate an email address and an IP address to.

9
00:00:36,220 --> 00:00:41,560
For example, if you think about an email address with a ruby regular expression, you can define what

10
00:00:41,560 --> 00:00:43,030
a valid email address looked like.

11
00:00:43,300 --> 00:00:48,580
In other words, your program will be able to tell the difference between a valid email address and

12
00:00:48,580 --> 00:00:50,610
an invalid email address.

13
00:00:51,040 --> 00:00:56,830
Ruby regular expressions are declared between two Forbert slashes to differentiate them from other language

14
00:00:56,830 --> 00:00:57,400
syntax.

15
00:00:57,730 --> 00:01:03,760
The most simple expressions match a word or even a single letter.

16
00:01:04,000 --> 00:01:11,320
So if you talk about the syntax for this regular expression, it is as simple as this.

17
00:01:11,560 --> 00:01:18,010
You have to write in just the two slashes and in between your expression you want to search for in a

18
00:01:18,010 --> 00:01:19,710
specific string.

19
00:01:20,650 --> 00:01:26,730
So I guess the best way to explain it would be to go to the editor and give you some examples.

20
00:01:26,980 --> 00:01:29,740
So I will go on to Adam.

21
00:01:31,910 --> 00:01:37,580
And to give you a very simple example for how this is going to work, let's say if you want to check

22
00:01:37,580 --> 00:01:39,890
if a string has a regular expression or not.

23
00:01:40,070 --> 00:01:45,290
Now, we can also check if a string has a regular expression on or not by using the match method.

24
00:01:45,650 --> 00:01:48,260
Now, how that is going to be done.

25
00:01:48,530 --> 00:01:53,960
So we are going to use the match method and in the parameters, we are going to use the regular expression

26
00:01:53,960 --> 00:01:54,240
thing.

27
00:01:54,560 --> 00:02:00,200
So let's say we specify in a condition and we write in a statement, let's say that is Hello World,

28
00:02:00,950 --> 00:02:04,880
and we just write in the match statement with the string.

29
00:02:05,030 --> 00:02:10,100
And the parameter is what we are going to do is that we are going to write in the expression with which

30
00:02:10,100 --> 00:02:11,420
we want to match this string.

31
00:02:11,460 --> 00:02:14,040
So let's say I want just write in Hello Hill.

32
00:02:14,540 --> 00:02:17,820
So I want to check if hello is a part of this hello world or not.

33
00:02:18,020 --> 00:02:24,230
So if it is or if it is not, then what it's going to do is that it's going to put on match.

34
00:02:26,240 --> 00:02:29,270
That's what it is going to do, is add it is going to put.

35
00:02:31,940 --> 00:02:34,280
Match not found.

36
00:02:34,340 --> 00:02:37,140
Simple as that, just and this safe condition.

37
00:02:37,550 --> 00:02:43,580
Run this code and you can see that you have got this Majaw here, which is this which has been printed

38
00:02:43,580 --> 00:02:47,640
because Halo is a part of this halo world do here.

39
00:02:48,050 --> 00:02:50,870
Now, if you just replace this to let's say.

40
00:02:53,100 --> 00:03:00,070
Blah, blah, blah, or just write in single time, run this and it is going to say that match not answer.

41
00:03:00,110 --> 00:03:05,880
That is how the simplest form of regular expression can be used.

42
00:03:06,030 --> 00:03:11,430
You are going to see a regular expression match a certain string or not.

43
00:03:12,360 --> 00:03:16,140
Now, you can also check if a string has some set of characters are not.

44
00:03:16,410 --> 00:03:21,580
Now we can use a character clause which let us define a range of characters for the match.

45
00:03:21,600 --> 00:03:25,440
For example, if you want to search for a vowel, then we can.

46
00:03:26,130 --> 00:03:33,210
What we can do is that we can use the OR for the match and where we are going to store it.

47
00:03:33,540 --> 00:03:39,750
That is where we are saying that we want to check if a string has some set of characters and not because

48
00:03:40,590 --> 00:03:43,710
you are basically some set of characters.

49
00:03:44,430 --> 00:03:51,050
So we just remove it from here and we will, let's say, define a function that is, let's say, well,

50
00:03:51,090 --> 00:03:53,250
since you want to check for all the way here.

51
00:03:54,450 --> 00:04:00,030
And it is going to receive the string, would you want to check with the sequence of character that

52
00:04:00,030 --> 00:04:02,040
is new in our case?

53
00:04:02,280 --> 00:04:04,510
So here we will define the sequence.

54
00:04:04,680 --> 00:04:06,670
So how do you define a sequence?

55
00:04:06,690 --> 00:04:08,640
You are going to specify an equal do.

56
00:04:08,760 --> 00:04:14,250
Then you have to specify this magician, Mark, and that is basically what is going to define a sequence

57
00:04:14,250 --> 00:04:16,550
of characters using the regular expression.

58
00:04:16,560 --> 00:04:20,120
Then you are going to use the syntax for the regular expression as well over here.

59
00:04:20,520 --> 00:04:23,550
And then you are going to use the array concept over here as well.

60
00:04:23,670 --> 00:04:30,030
And now you can just write an API or you you don't have to specify any any kind of comma in between

61
00:04:30,030 --> 00:04:35,400
all of these letters because it is going to treat each letter as a single sequence.

62
00:04:35,410 --> 00:04:39,870
That's why it is called a sequence of characters, because each is going to be treated separately,

63
00:04:39,870 --> 00:04:42,670
is separate, is separate, is separate.

64
00:04:43,470 --> 00:04:44,350
Same goes for all.

65
00:04:44,350 --> 00:04:45,760
And you now.

66
00:04:46,110 --> 00:04:49,930
Now, what do you have to do is that you have to simply end this function.

67
00:04:50,220 --> 00:04:56,250
Now comes the part where we are going to call this function and we are going to just write input.

68
00:04:56,550 --> 00:05:00,160
So whatever is basically written from the function gets printed over here.

69
00:05:00,930 --> 00:05:03,720
So we are going to write in votes.

70
00:05:03,750 --> 00:05:07,480
That is the name of the function and we are going to pass in the string right from here.

71
00:05:07,500 --> 00:05:13,620
So let's say our string is a world over a hill, so just run this code.

72
00:05:14,590 --> 00:05:21,700
And it has generated one o'haire, which means that whatever string we have passed on to this function

73
00:05:21,700 --> 00:05:23,350
was contained.

74
00:05:23,590 --> 00:05:28,400
Whatever is written over here at the first location, as you can see, it is the zero location.

75
00:05:28,750 --> 00:05:32,140
This is the first location and since or Izabel.

76
00:05:32,140 --> 00:05:39,130
So that's why you can see that it has printed one, because it is saying that whatever sequence of characters

77
00:05:39,880 --> 00:05:44,560
you have specified in this regular expression, and since it is a sequence of character, because we

78
00:05:44,560 --> 00:05:46,790
have specified the area concept here as well.

79
00:05:47,080 --> 00:05:55,810
So whatever string you are going to pass in, it is going to tell you the location of the letter, the

80
00:05:55,810 --> 00:06:01,420
very specific letter at which this match, this sequence matches this string.

81
00:06:01,450 --> 00:06:05,250
So this is the first location where we have got this, OK, that is available.

82
00:06:05,470 --> 00:06:10,630
So you can just write in one more example, let's say here and now you can see that you have got to

83
00:06:10,630 --> 00:06:13,780
also let's see what is going to be the result or help run this.

84
00:06:14,080 --> 00:06:19,420
And you can see that it has generated two, which means that it is going to generate the output for

85
00:06:19,420 --> 00:06:23,800
the first occurrence of the letter that is going to find a match.

86
00:06:23,810 --> 00:06:27,700
So that is a that stands at the zero one two second location.

87
00:06:27,940 --> 00:06:34,090
If you want to get something like more Abargil than what you can do is that you can use the Duyn statement

88
00:06:34,090 --> 00:06:40,030
over here as well and you can use the do each so that for every iteration it is going to check if a

89
00:06:40,030 --> 00:06:47,110
sequence of f a string here, the letter of a string sorry, matches this sequence over here and it

90
00:06:47,110 --> 00:06:48,930
is going to then print all of these.

91
00:06:49,120 --> 00:06:54,460
So I just decided to you you have covered the foreach again and again in the previous tutorial, so

92
00:06:54,490 --> 00:06:56,050
it's for you to implement it over here.

93
00:06:56,590 --> 00:07:06,460
So now what if we have certain like Barela and we are missing the oakhill here, which means that we

94
00:07:06,460 --> 00:07:13,660
have got no what was in the strings we are putting in to the function Wawas that is basically designed

95
00:07:13,900 --> 00:07:16,930
to check if a sequence of character matches the strength.

96
00:07:16,950 --> 00:07:21,910
So if you just run it, it is going to generate nil, as you have seen, that the space has just increased,

97
00:07:21,910 --> 00:07:30,280
which means that it has generated new in that case when no sequence, no sorry, no match is found or

98
00:07:30,280 --> 00:07:30,630
held.

99
00:07:31,120 --> 00:07:35,730
So you and I know how to match a complete word, or you can say a complete string.

100
00:07:35,740 --> 00:07:40,770
And you also know how to match a string with a sequence of letters.

101
00:07:41,110 --> 00:07:43,360
So I guess that's with the introduction.

102
00:07:43,360 --> 00:07:46,400
But you know how to implement regular expression now.

103
00:07:46,660 --> 00:07:51,580
So in the next tutorial, we are going to move a bit towards the intermediate part and learn more on

104
00:07:51,580 --> 00:07:52,510
regular expressions.

105
00:07:52,510 --> 00:07:53,410
So stay tuned for that.

106
00:07:53,410 --> 00:07:54,480
Doriot for now.

107
00:07:54,520 --> 00:07:54,980
That's it.

108
00:07:55,000 --> 00:07:56,200
Thank you so much for watching.
