WEBVTT
1
00:00:01.340 --> 00:00:09.840
Hi. This is Craig Golightly, and welcome to Understanding AWS Database Offerings.

2
00:00:09.840 --> 00:00:13.210
We're going to look at the evolution of database types,

3
00:00:13.210 --> 00:00:16.960
including some questions to ask to help you determine the best

4
00:00:16.960 --> 00:00:19.840
database type to use for an application.

5
00:00:19.840 --> 00:00:23.820
You'll then get an overview of AWS database offerings,

6
00:00:23.820 --> 00:00:27.790
including available options within a database service,

7
00:00:27.790 --> 00:00:34.740
unique features of the service, common use cases, and pitfalls to avoid.

8
00:00:34.740 --> 00:00:36.770
When you hear the word database,

9
00:00:36.770 --> 00:00:39.670
the first thing you likely think of is a relational

10
00:00:39.670 --> 00:00:43.140
database with its row and column structure,

11
00:00:43.140 --> 00:00:44.460
data types, keys,

12
00:00:44.460 --> 00:00:48.070
constraints, and other familiar features that have been used for

13
00:00:48.070 --> 00:00:52.310
decades in software system implementations.

14
00:00:52.310 --> 00:00:57.220
Since relational databases were the dominant available technology for so long,

15
00:00:57.220 --> 00:01:00.490
many applications had to force their design to fit within

16
00:01:00.490 --> 00:01:03.920
the limits of relational database functionality, resulting

17
00:01:03.920 --> 00:01:07.140
in some creative solutions.

18
00:01:07.140 --> 00:01:11.190
Implementations that changed their design to fit the database

19
00:01:11.190 --> 00:01:14.960
were often complex and brittle and had a hard time meeting

20
00:01:14.960 --> 00:01:17.640
performance and stability requirements.

21
00:01:17.640 --> 00:01:22.040
Maybe they got the job done, like cutting a board in two with a hammer,

22
00:01:22.040 --> 00:01:27.940
but the result wasn't as good as using a purpose‑built tool, like a saw.

23
00:01:27.940 --> 00:01:33.640
Today, you no longer have to design around a single relational database.

24
00:01:33.640 --> 00:01:37.770
Now you have a variety of database types to choose from that are

25
00:01:37.770 --> 00:01:41.970
designed to fit different scenarios of data type, volume,

26
00:01:41.970 --> 00:01:45.440
speed, and size.

27
00:01:45.440 --> 00:01:48.940
When deciding which database best fits your requirements,

28
00:01:48.940 --> 00:01:52.440
looking at your actual data is a good place to start.

29
00:01:52.440 --> 00:01:56.350
Is your data structured, unstructured or a mix of both?

30
00:01:56.350 --> 00:02:01.030
Structured is typically something that could be broken up into columns of

31
00:02:01.030 --> 00:02:06.600
properties, then those individual properties can be compared, sorted, and

32
00:02:06.600 --> 00:02:10.470
searched. Unstructured is more freeform,

33
00:02:10.470 --> 00:02:14.400
like the body of an email, images, and videos.

34
00:02:14.400 --> 00:02:18.280
This type of data usually contains some structured metadata,

35
00:02:18.280 --> 00:02:23.330
but the content itself can contain a wide variety of information that

36
00:02:23.330 --> 00:02:26.840
is not easily broken down into rows and columns.

37
00:02:26.840 --> 00:02:31.220
Many applications communicate using document data, like a JSON

38
00:02:31.220 --> 00:02:33.490
document, where there is some structure,

39
00:02:33.490 --> 00:02:38.840
but not something that would fit nicely into a relational database column.

40
00:02:38.840 --> 00:02:44.240
Data size is another important attribute to consider when choosing a database.

41
00:02:44.240 --> 00:02:48.420
How big are the items you deal with in a typical transaction? Are they

42
00:02:48.420 --> 00:02:51.580
small like a text message or are they much larger,

43
00:02:51.580 --> 00:02:52.740
like a book?

44
00:02:52.740 --> 00:02:55.640
What about the overall size of your collection?

45
00:02:55.640 --> 00:02:57.340
How fast is it growing?

46
00:02:57.340 --> 00:03:00.570
You definitely don't want to run out of room in your database,

47
00:03:00.570 --> 00:03:06.840
and different database types handle capacity and partitioning in different ways.

48
00:03:06.840 --> 00:03:10.390
Data access is another key distinguisher when choosing a

49
00:03:10.390 --> 00:03:13.960
database type. How often will the data be accessed?

50
00:03:13.960 --> 00:03:17.640
Will you have frequent, real‑time updates and reads, daily

51
00:03:17.640 --> 00:03:21.310
batch reports or are you just going to store things until

52
00:03:21.310 --> 00:03:24.140
they're needed at some future point?

53
00:03:24.140 --> 00:03:27.840
Will multiple users access and update the same data?

54
00:03:27.840 --> 00:03:31.980
Does it need to be immediately consistent across all users of the system,

55
00:03:31.980 --> 00:03:34.840
or is eventual consistency okay?

56
00:03:34.840 --> 00:03:38.840
Does your solution need to be in a high‑availability configuration?

57
00:03:38.840 --> 00:03:40.840
What are your uptime requirements?

58
00:03:40.840 --> 00:03:44.180
Do you need a multi‑region deployment or are multiple

59
00:03:44.180 --> 00:03:47.840
availability zones within a single region sufficient?

60
00:03:47.840 --> 00:03:49.400
What about access control?

61
00:03:49.400 --> 00:03:51.820
What granularity of security do you need?

62
00:03:51.820 --> 00:03:55.940
Do you have specific encryption requirements? When it comes to

63
00:03:55.940 --> 00:04:00.420
database design, just because you can do something in a particular

64
00:04:00.420 --> 00:04:04.920
database type doesn't always mean you should. Maintaining a

65
00:04:04.920 --> 00:04:08.860
balance of implementation speed, database performance,

66
00:04:08.860 --> 00:04:13.090
cost, security, and complexity comes down to careful

67
00:04:13.090 --> 00:04:15.420
consideration of your requirements,

68
00:04:15.420 --> 00:04:19.160
then matching that with the database type or types

69
00:04:19.160 --> 00:04:21.640
designed to meet those requirements.

70
00:04:21.640 --> 00:04:24.740
Don't be surprised if you end up using multiple types

71
00:04:24.740 --> 00:04:27.380
of databases in your implementation.

72
00:04:27.380 --> 00:04:31.670
This often yields the best results due to different types of data,

73
00:04:31.670 --> 00:04:35.340
access patterns, and latency requirements.

74
00:04:35.340 --> 00:04:38.390
Let's start going through the different AWS database

75
00:04:38.390 --> 00:04:45.000
offerings so that you can understand what is available and when you could use each type.

