WEBVTT
1
00:00:00.940 --> 00:00:02.440
Hi, this is Craig Golightly,

2
00:00:02.440 --> 00:00:08.900
and welcome to Designing Workload‑Specific Databases.

3
00:00:08.900 --> 00:00:13.530
So what do you need to consider when designing a workload‑specific database?

4
00:00:13.530 --> 00:00:17.480
Requirements are one of the biggest drivers of database design,

5
00:00:17.480 --> 00:00:19.820
so we'll take a closer look into what type of

6
00:00:19.820 --> 00:00:22.260
requirements you need to pay attention to.

7
00:00:22.260 --> 00:00:25.610
Next we'll cover availability and the importance of

8
00:00:25.610 --> 00:00:29.340
understanding what type of availability is needed.

9
00:00:29.340 --> 00:00:32.940
Doing too much in this area could add unnecessary time

10
00:00:32.940 --> 00:00:34.840
and cost to your implementation,

11
00:00:34.840 --> 00:00:39.840
but not doing enough could spell disaster for your application.

12
00:00:39.840 --> 00:00:40.660
Finally,

13
00:00:40.660 --> 00:00:46.940
we'll look at cost and what you can do to manage costs in your database design.

14
00:00:46.940 --> 00:00:50.390
If someone asked you to make them a sandwich, what would you do?

15
00:00:50.390 --> 00:00:51.930
In about 30 seconds,

16
00:00:51.930 --> 00:00:55.920
you could put together a peanut butter sandwich using bread

17
00:00:55.920 --> 00:00:58.240
and peanut butter you bought from the store.

18
00:00:58.240 --> 00:01:03.340
You could also take several hours to assemble a culinary work of art,

19
00:01:03.340 --> 00:01:06.260
baking fresh bread, chopping vegetables,

20
00:01:06.260 --> 00:01:08.540
and boiling and slicing an egg.

21
00:01:08.540 --> 00:01:11.670
Technically, they're both a sandwich, but the time,

22
00:01:11.670 --> 00:01:16.740
expense, and materials needed to build each one is very different.

23
00:01:16.740 --> 00:01:20.890
Understanding and clarifying requirements is key to building a

24
00:01:20.890 --> 00:01:26.140
workload‑specific database. Let's start with the type and volume of

25
00:01:26.140 --> 00:01:29.940
data you expect to work with in the database.

26
00:01:29.940 --> 00:01:32.680
If the database is primarily binary in nature,

27
00:01:32.680 --> 00:01:35.740
like images and audio or video files,

28
00:01:35.740 --> 00:01:39.230
then you're probably going to want to manage those differently than

29
00:01:39.230 --> 00:01:43.140
if the data is mostly rows and columns of numbers.

30
00:01:43.140 --> 00:01:46.560
If your input and output is mainly JSON documents,

31
00:01:46.560 --> 00:01:49.840
then it may not make sense to constantly tear down and build up

32
00:01:49.840 --> 00:01:52.940
that data structure into individual fields.

33
00:01:52.940 --> 00:01:56.280
You may want to go with a database that natively supports

34
00:01:56.280 --> 00:01:59.840
querying attributes from JSON documents.

35
00:01:59.840 --> 00:02:04.660
How often your data format changes is another important factor. Is

36
00:02:04.660 --> 00:02:08.650
the schema static and you don't expect it to change much? Or is it

37
00:02:08.650 --> 00:02:12.220
dynamic with frequent changes? Finally,

38
00:02:12.220 --> 00:02:16.930
data size. How much data are you going to have, gigabytes,

39
00:02:16.930 --> 00:02:19.140
terabytes, or petabytes?

40
00:02:19.140 --> 00:02:23.400
Data volume alone can sometimes dictate your database choice simply

41
00:02:23.400 --> 00:02:28.760
because it may exceed the working capacity of some databases. The

42
00:02:28.760 --> 00:02:32.320
type of workload you're going to support with your database and

43
00:02:32.320 --> 00:02:36.670
what kind of performance is expected also have a major influence on

44
00:02:36.670 --> 00:02:38.240
database design.

45
00:02:38.240 --> 00:02:41.980
What is your overall query volume going to be? Extremely high

46
00:02:41.980 --> 00:02:45.240
workloads can overwhelm some database types,

47
00:02:45.240 --> 00:02:50.700
so having an idea of your upper bound can help you keep up with query volume.

48
00:02:50.700 --> 00:02:52.740
What about workload duration?

49
00:02:52.740 --> 00:02:58.880
Will you have a consistent load 24/7, or will there be periods of lower traffic?

50
00:02:58.880 --> 00:03:00.930
How fast does traffic ramp up?

51
00:03:00.930 --> 00:03:04.940
You'll need a scaling strategy to support your traffic patterns.

52
00:03:04.940 --> 00:03:07.270
If there are periods of no traffic,

53
00:03:07.270 --> 00:03:12.540
you maybe able to optimize costs by scaling down during those times.

54
00:03:12.540 --> 00:03:16.440
What mix of your workload is going to be reads versus writes?

55
00:03:16.440 --> 00:03:20.190
Many databases support adding additional read replicas, but if

56
00:03:20.190 --> 00:03:22.290
your application is write heavy,

57
00:03:22.290 --> 00:03:25.510
then read replicas won't necessarily be the answer.

58
00:03:25.510 --> 00:03:28.410
Expected response time is another thing that needs a

59
00:03:28.410 --> 00:03:30.840
very clear requirement definition.

60
00:03:30.840 --> 00:03:33.010
Going back to our sandwich example,

61
00:03:33.010 --> 00:03:37.360
I could spend 4 hours making a gourmet sandwich that my 4‑year‑old

62
00:03:37.360 --> 00:03:41.760
daughter wouldn't even take a bite of, while she would be delighted with

63
00:03:41.760 --> 00:03:46.740
the 30‑second peanut butter sandwich and 3 hours and 59 minutes of my

64
00:03:46.740 --> 00:03:49.740
time playing games or reading to her.

65
00:03:49.740 --> 00:03:51.220
From her perspective,

66
00:03:51.220 --> 00:03:56.420
the opportunity cost of a great sandwich isn't worth giving up more game time.

67
00:03:56.420 --> 00:03:58.210
Everyone wants their data fast,

68
00:03:58.210 --> 00:04:02.140
but do they need single‑digit‑millisecond response time?

69
00:04:02.140 --> 00:04:05.260
It's important to understand and be able to communicate the

70
00:04:05.260 --> 00:04:09.630
additional cost and sometimes complexity required for faster

71
00:04:09.630 --> 00:04:14.010
response times so that organizations can make informed decisions

72
00:04:14.010 --> 00:04:16.460
about where to use their resources.

73
00:04:16.460 --> 00:04:19.920
Sometimes you hit the law of diminishing returns when it comes to

74
00:04:19.920 --> 00:04:23.880
performance optimization. It's often a better overall use of

75
00:04:23.880 --> 00:04:27.170
resources to stop once it's fast enough,

76
00:04:27.170 --> 00:04:32.600
then shift focus to work on other features that add value to the application.

77
00:04:32.600 --> 00:04:36.420
Response time is often a user experience question.

78
00:04:36.420 --> 00:04:41.540
Is it a real‑time application where users will expect very quick response times?

79
00:04:41.540 --> 00:04:45.440
Or is it a batch process that is expected to take a while?

80
00:04:45.440 --> 00:04:47.400
Finally, compliance.

81
00:04:47.400 --> 00:04:50.980
Certain data is subject to regulatory requirements.

82
00:04:50.980 --> 00:04:55.190
This usually involves storing the data in an encrypted database.

83
00:04:55.190 --> 00:04:55.900
However,

84
00:04:55.900 --> 00:04:58.580
you'll also need to ensure that the data is secure in

85
00:04:58.580 --> 00:05:05.210
transit to and from the database, as well as encrypting any backups of that data.

86
00:05:05.210 --> 00:05:06.690
If you're subject to audits,

87
00:05:06.690 --> 00:05:11.390
you'll need proper audit logs to demonstrate compliance in your operations.

88
00:05:11.390 --> 00:05:14.380
Be sure that is a supported feature in your database

89
00:05:14.380 --> 00:05:16.810
and that audit logs are enabled.

90
00:05:16.810 --> 00:05:23.000
You'll also need to know how to give an auditor access to inspect the audit logs.

