1
00:00:01,040 --> 00:00:01,450
Hi.

2
00:00:01,450 --> 00:00:02,590
This is Craig Golightly,

3
00:00:02,590 --> 00:00:09,530
and welcome to Monitoring and Troubleshooting Databases. We're going to

4
00:00:09,530 --> 00:00:13,170
cover some monitoring strategies for your database services,

5
00:00:13,170 --> 00:00:17,400
including Amazon CloudWatch. We'll also discuss strategies

6
00:00:17,400 --> 00:00:19,920
to deal with common database issues.

7
00:00:19,920 --> 00:00:20,910
Finally,

8
00:00:20,910 --> 00:00:25,150
we'll cover some options for database performance optimization and how your

9
00:00:25,150 --> 00:00:29,640
options are going to vary based on your database type.

10
00:00:29,640 --> 00:00:33,030
Amazon CloudWatch provides visibility into your cloud

11
00:00:33,030 --> 00:00:37,870
resources and operations. You can collect and store logs, as

12
00:00:37,870 --> 00:00:41,040
well as view builtâ€‘in and custom metrics.

13
00:00:41,040 --> 00:00:44,710
CloudWatch has several features to enhance the data you collect,

14
00:00:44,710 --> 00:00:50,810
including dashboards to visualize your metrics, alarms to trigger alerts and

15
00:00:50,810 --> 00:00:56,770
actions based on certain conditions of your metrics, insights to run queries

16
00:00:56,770 --> 00:01:02,940
across CloudWatch data and determine the health of applications, and events

17
00:01:02,940 --> 00:01:05,740
to respond to operational changes.

18
00:01:05,740 --> 00:01:11,290
While most AWS services integrate with CloudWatch for certain metrics and logs,

19
00:01:11,290 --> 00:01:15,080
some database services have additional tools available

20
00:01:15,080 --> 00:01:18,240
for monitoring and troubleshooting.

21
00:01:18,240 --> 00:01:21,190
For example, if you're using RDS,

22
00:01:21,190 --> 00:01:27,200
you can utilize RDS Performance Insights to analyze and tune your database

23
00:01:27,200 --> 00:01:32,640
performance. For a given database instance, it shows load over time and the

24
00:01:32,640 --> 00:01:38,190
top queries, users, and hosts that are generating that load. You can use the

25
00:01:38,190 --> 00:01:42,760
interactive dashboard to change time ranges and drill into your data to

26
00:01:42,760 --> 00:01:44,900
identify performance issues.

27
00:01:44,900 --> 00:01:48,510
Redshift provides a similar dashboard that you can access from

28
00:01:48,510 --> 00:02:00,000
your cluster menu in the AWS console and gain insights into CPU, RAM, storage used, connections, query runtime, and query load.

