1
00:00:01,040 --> 00:00:03,230
If you have a database in production,

2
00:00:03,230 --> 00:00:07,640
you're also going to need databases in test environments.

3
00:00:07,640 --> 00:00:11,390
Some important requirements to consider when you're designing your test

4
00:00:11,390 --> 00:00:15,940
databases include freshness of data from production.

5
00:00:15,940 --> 00:00:19,640
How up to date does your test database need to be?

6
00:00:19,640 --> 00:00:22,130
This will determine how often you need to refresh

7
00:00:22,130 --> 00:00:26,540
data or rebuild your test database.

8
00:00:26,540 --> 00:00:28,240
Completeness of data.

9
00:00:28,240 --> 00:00:31,760
Do you need a test database that's the same size as

10
00:00:31,760 --> 00:00:35,520
production or can you validate features with a small sample

11
00:00:35,520 --> 00:00:37,800
of production data, for most cases,

12
00:00:37,800 --> 00:00:40,890
then only use a full copy of the database for

13
00:00:40,890 --> 00:00:45,140
performanceâ€‘related testing? Time to build.

14
00:00:45,140 --> 00:00:50,000
Are there time constraints for refreshing or building your test databases? Does

15
00:00:50,000 --> 00:00:56,400
your design meet those time constraints? Cost, how much do you have budgeted

16
00:00:56,400 --> 00:01:00,820
for test databases? Scaling down instance sizes,

17
00:01:00,820 --> 00:01:04,870
using less data, and automatically shutting down instances

18
00:01:04,870 --> 00:01:09,730
outside of testing hours are all strategies to manage cost with

19
00:01:09,730 --> 00:01:14,340
test databases. Finally, complexity.

20
00:01:14,340 --> 00:01:19,290
How complex is your solution to create and maintain test environments?

21
00:01:19,290 --> 00:01:23,590
Sometimes organizations are willing to compromise on other requirements

22
00:01:23,590 --> 00:01:27,940
in order to reduce the complexity of the solution.

23
00:01:27,940 --> 00:01:33,300
Amazon CloudFormation allows you to model and provision groups of AWS

24
00:01:33,300 --> 00:01:38,440
resources by treating infrastructure as code, or IaC.

25
00:01:38,440 --> 00:01:43,040
This helps you know exactly what is provisioned and how it's configured.

26
00:01:43,040 --> 00:01:44,240
Since its code,

27
00:01:44,240 --> 00:01:49,040
you can make new versions to track changes as your infrastructure evolves.

28
00:01:49,040 --> 00:01:53,120
CloudFormation is a great way to automate the creation and maintenance

29
00:01:53,120 --> 00:01:55,950
of your database environments, and in particular,

30
00:01:55,950 --> 00:01:59,490
test environments that need to be frequently refreshed and

31
00:01:59,490 --> 00:02:03,700
rebuilt. By provisioning your database and supporting AWS

32
00:02:03,700 --> 00:02:06,100
services in CloudFormation,

33
00:02:06,100 --> 00:02:10,640
you can ensure consistency across test environments and even make it

34
00:02:10,640 --> 00:02:15,310
possible for developers to quickly and easily spin up their own copy of the

35
00:02:15,310 --> 00:02:20,500
database. When they're finished using it, CloudFormation makes it easy to

36
00:02:20,500 --> 00:02:24,320
tear down all of the resources that were created so you're not getting

37
00:02:24,320 --> 00:02:28,940
charged for things you aren't using.

38
00:02:28,940 --> 00:02:31,840
Excellent! You've seen some of the database migration

39
00:02:31,840 --> 00:02:34,550
tools that AWS provides and supports,

40
00:02:34,550 --> 00:02:38,440
including Amazon Database Migration Service,

41
00:02:38,440 --> 00:02:41,600
AWS Schema Conversion Tool,

42
00:02:41,600 --> 00:02:46,240
and then you also have the option to use native database tools.

43
00:02:46,240 --> 00:02:49,040
If you have large amounts of data to transfer,

44
00:02:49,040 --> 00:02:53,920
you can leverage AWS Snowmobile or Snowball to speed up the process.

45
00:02:53,920 --> 00:02:58,780
You saw the importance of ensuring your migration meets any downtime

46
00:02:58,780 --> 00:03:01,140
or maintenance window constraints,

47
00:03:01,140 --> 00:03:04,370
and you also reviewed some important constraints to consider

48
00:03:04,370 --> 00:03:07,450
when designing databases for test environments,

49
00:03:07,450 --> 00:03:11,640
including freshness, time, cost, and complexity.

50
00:03:11,640 --> 00:03:12,490
Finally,

51
00:03:12,490 --> 00:03:16,650
you saw how CloudFormation can help you represent your infrastructure

52
00:03:16,650 --> 00:03:20,900
as code so you can automate database deployments and ensure

53
00:03:20,900 --> 00:03:33,000
consistency across your database environments. Join me in the next module where we'll discuss managing and operating databases.

