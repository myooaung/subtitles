WEBVTT
1
00:00:01.840 --> 00:00:05.050
There are several different strategies for API versioning.

2
00:00:05.050 --> 00:00:09.950
We're going to look at five common approaches, URI, media type,

3
00:00:09.950 --> 00:00:14.740
custom header, request parameter, and no strategy.

4
00:00:14.740 --> 00:00:20.110
URI versioning is popular because it is simple to implement. Somewhere in

5
00:00:20.110 --> 00:00:25.800
the URI, usually near the root, a version indicator is placed, such as v1

6
00:00:25.800 --> 00:00:29.740
or v2, then the rest of the URI follows.

7
00:00:29.740 --> 00:00:30.840
For example,

8
00:00:30.840 --> 00:00:40.120
globomantics.com/api/v1/products would be version 1 of the API, while

9
00:00:40.120 --> 00:00:48.340
globomantics.com/api/v2/products would be version 2 of the API.

10
00:00:48.340 --> 00:00:52.770
When caching uses the URI as a key, this helps invalidate cache when

11
00:00:52.770 --> 00:00:56.830
switching API versions so that the cached content matches what a

12
00:00:56.830 --> 00:00:59.540
particular version of the API is returning.

13
00:00:59.540 --> 00:01:02.840
One disadvantage of this method is that an entire new subtree

14
00:01:02.840 --> 00:01:05.430
is created with each version of the API,

15
00:01:05.430 --> 00:01:08.290
which will require testing and validation.

16
00:01:08.290 --> 00:01:13.040
Another disadvantage could be that the URI itself is changing.

17
00:01:13.040 --> 00:01:17.930
Normally, media type would be something like application/json.

18
00:01:17.930 --> 00:01:22.610
When using media type as a versioning scheme, you would define vendor‑specific

19
00:01:22.610 --> 00:01:26.720
media types that would then be read on the server side to determine which

20
00:01:26.720 --> 00:01:29.900
version of the API to use for that particular call.

21
00:01:29.900 --> 00:01:30.900
For example,

22
00:01:30.900 --> 00:01:39.770
application/vnd.globomantics.v1+json where v1 indicates that version 1

23
00:01:39.770 --> 00:01:43.380
of the API should be used to process that call, or

24
00:01:43.380 --> 00:01:51.710
application/vnd.globomantics.v2+json where v2 indicates that version 2

25
00:01:51.710 --> 00:01:54.940
of the API should be used to process the call.

26
00:01:54.940 --> 00:01:59.680
Some people like this versioning strategy because the URI does not change.

27
00:01:59.680 --> 00:02:05.390
Others find it confusing since nonstandard media types are being used as values.

28
00:02:05.390 --> 00:02:09.060
Using a custom header is similar to using media type, but

29
00:02:09.060 --> 00:02:12.040
instead of overloading an existing header,

30
00:02:12.040 --> 00:02:16.240
you define a new custom header for the client to use to communicate

31
00:02:16.240 --> 00:02:19.900
version information to the server. For example,

32
00:02:19.900 --> 00:02:24.310
you could define the header, accept‑version, and require it to have

33
00:02:24.310 --> 00:02:30.160
a defined value like v1 or v2. For each request, the server would

34
00:02:30.160 --> 00:02:33.650
need to look for the header and value to determine which version of

35
00:02:33.650 --> 00:02:36.240
the API to use for that call.

36
00:02:36.240 --> 00:02:39.740
With this strategy, the URI does not change,

37
00:02:39.740 --> 00:02:42.970
and some people feel that a custom header is more clear

38
00:02:42.970 --> 00:02:45.540
than using an overloaded media type.

39
00:02:45.540 --> 00:02:49.800
Request parameters are another option to use for API versioning.

40
00:02:49.800 --> 00:02:53.830
You can define a parameter to append with version information, then

41
00:02:53.830 --> 00:02:57.340
that parameter would need to be parsed by the server to determine

42
00:02:57.340 --> 00:03:00.540
which version of the API to use for that call.

43
00:03:00.540 --> 00:03:01.490
For example,

44
00:03:01.490 --> 00:03:09.890
globomantics.com/api/products?version=v1 uses a parameter named

45
00:03:09.890 --> 00:03:14.970
version with a value v1 to indicate that the request should be

46
00:03:14.970 --> 00:03:17.840
handled by version 1 of the API.

47
00:03:17.840 --> 00:03:21.650
To use version 2 of the API, the parameter value would simply

48
00:03:21.650 --> 00:03:25.820
be changed from v1 to v2. In this strategy,

49
00:03:25.820 --> 00:03:30.110
the main URI does not change, only parameter values.

50
00:03:30.110 --> 00:03:33.820
Some people dislike this strategy because it can make routing requests

51
00:03:33.820 --> 00:03:37.540
more difficult than other versioning strategies.

52
00:03:37.540 --> 00:03:41.240
Another option you can consider is no versioning at all.

53
00:03:41.240 --> 00:03:44.940
Just don't worry about adding a version because you may never need it.

54
00:03:44.940 --> 00:03:49.940
You can start out with a clean URI, no v1 that may never change,

55
00:03:49.940 --> 00:03:53.030
your server‑side logic is going to be simpler,

56
00:03:53.030 --> 00:03:55.460
and your clients won't need to know any special header

57
00:03:55.460 --> 00:03:58.580
values or options that need to be passed in with each call,

58
00:03:58.580 --> 00:04:02.220
so using the API is easier as well.

59
00:04:02.220 --> 00:04:05.480
If the time comes that you do need to make a major change,

60
00:04:05.480 --> 00:04:09.800
you may need a rewrite, which wouldn't use versioning anyway, or,

61
00:04:09.800 --> 00:04:11.600
if you just need a new version,

62
00:04:11.600 --> 00:04:15.250
go ahead and add it with whatever versioning strategy you wish and

63
00:04:15.250 --> 00:04:20.110
the existing non‑versioned API can simply become the default if no

64
00:04:20.110 --> 00:04:23.280
version information is specified.

65
00:04:23.280 --> 00:04:26.390
Out of all the versioning strategies we discussed, and a few that we

66
00:04:26.390 --> 00:04:32.240
didn't, the most popular tend to be URI and custom header.

67
00:04:32.240 --> 00:04:36.180
A big appeal for URI is the simplicity of developing and testing

68
00:04:36.180 --> 00:04:39.340
different versions by simply changing the URI.

69
00:04:39.340 --> 00:04:42.960
This can be done in a browser without any special tools or code.

70
00:04:42.960 --> 00:04:46.500
Custom header is a good solution for people who want to keep a

71
00:04:46.500 --> 00:04:50.830
single URI and are comfortable managing additional headers on both

72
00:04:50.830 --> 00:04:53.540
the client side and server side.

73
00:04:53.540 --> 00:04:57.840
Whether you agree or disagree in principle with these two strategies,

74
00:04:57.840 --> 00:05:02.820
there is some value in being on the main highway of implementation options.

75
00:05:02.820 --> 00:05:03.410
Generally,

76
00:05:03.410 --> 00:05:06.790
you're going to have more people recognize and understand what you are

77
00:05:06.790 --> 00:05:11.180
producing, and you're going to have more resources available to help you do it.

78
00:05:11.180 --> 00:05:15.440
In the next two modules, we're going to take a closer look at how to implement

79
00:05:15.440 --> 00:05:21.440
these two strategies in a Spring Data REST API.

80
00:05:21.440 --> 00:05:25.890
So far, we've discussed how versioning can help consumers of your API manage

81
00:05:25.890 --> 00:05:29.910
breaking changes and several different versioning strategies,

82
00:05:29.910 --> 00:05:34.490
along with some advantages and disadvantages of those strategies.

83
00:05:34.490 --> 00:05:47.000
We also identified two of the most popular strategies, URI and custom header. Join me in the next module where we will dive into implementing URI versioning.

