1
00:00:02,390 --> 00:00:06,390
Let's take a look at a sample Spring Data REST API and see

2
00:00:06,390 --> 00:00:09,140
what a non‑breaking change looks like,

3
00:00:09,140 --> 00:00:12,450
what a breaking change looks like, and when you might

4
00:00:12,450 --> 00:00:16,040
need to just overhaul your API.

5
00:00:16,040 --> 00:00:20,070
Here's a simple Spring Data REST API project that we can use to

6
00:00:20,070 --> 00:00:24,320
examine some different types of changes that might be made to an API

7
00:00:24,320 --> 00:00:27,340
and where versioning would become necessary.

8
00:00:27,340 --> 00:00:31,360
This particular project is a Spring Boot application with a simple

9
00:00:31,360 --> 00:00:35,940
Employee entity that has a name and a title,

10
00:00:35,940 --> 00:00:40,080
and I've set up an EmployeeRepository using an H2 in‑memory

11
00:00:40,080 --> 00:00:43,710
database to persist the Employee entity.

12
00:00:43,710 --> 00:00:47,600
There's also an example service that returns a message about a schedule.

13
00:00:47,600 --> 00:00:54,140
Let's start up the employee application and hit some of these endpoints.

14
00:00:54,140 --> 00:01:00,140
Here's a few requests that we can run to see what the API does.

15
00:01:00,140 --> 00:01:00,700
First,

16
00:01:00,700 --> 00:01:07,140
let's get a list of employees. Notice how currently there are no employees.

17
00:01:07,140 --> 00:01:13,120
Schedule simply returns the static message that's in the method. Your schedule

18
00:01:13,120 --> 00:01:19,020
is Monday through Wednesday 9‑9. And to add an employee, we'll simply post a

19
00:01:19,020 --> 00:01:24,700
name and title to the employees endpoint.

20
00:01:24,700 --> 00:01:31,240
If we go back and list employees again, we'll see the one that we just added.

21
00:01:31,240 --> 00:01:36,640
And there it is in the employees array with the name and title that we gave it.

22
00:01:36,640 --> 00:01:40,500
We can also just put any of these URIs in a normal browser and see

23
00:01:40,500 --> 00:01:43,590
the data that's currently in the H2 database.

24
00:01:43,590 --> 00:01:47,890
Suppose we made a few changes to the API. For example,

25
00:01:47,890 --> 00:01:52,350
in the ExampleService, we changed the message to be Monday through Friday,

26
00:01:52,350 --> 00:01:56,190
9‑5, instead of Monday through Wednesday, 9‑9.

27
00:01:56,190 --> 00:02:00,180
This is an example of a non‑breaking change.

28
00:02:00,180 --> 00:02:04,840
The client can still call the schedule endpoint, the same as they did before,

29
00:02:04,840 --> 00:02:08,260
and they're still going to get back a string, it's just going to have a

30
00:02:08,260 --> 00:02:12,840
slightly different value. Over in the Employee class, a department

31
00:02:12,840 --> 00:02:16,700
attribute was added with the @NotNull annotation,

32
00:02:16,700 --> 00:02:21,070
meaning that a value is required in order to create the entity.

33
00:02:21,070 --> 00:02:24,490
This is an example of a breaking change.

34
00:02:24,490 --> 00:02:28,010
Clients that used to call the employee endpoint and pass

35
00:02:28,010 --> 00:02:31,240
a name and title will no longer work.

36
00:02:31,240 --> 00:02:33,230
They'll now have to pass name,

37
00:02:33,230 --> 00:02:37,620
title, and department in order to create an employee.

38
00:02:37,620 --> 00:02:41,730
Let's start up the application with these changes to see exactly what

39
00:02:41,730 --> 00:02:49,900
happens. When we hit the schedule endpoint, we can see the new value,

40
00:02:49,900 --> 00:02:53,170
Your schedule is Monday through Friday, 9‑5.

41
00:02:53,170 --> 00:02:57,530
When we call GET on employees for the first time, it's empty again.

42
00:02:57,530 --> 00:03:01,930
Let's go ahead and try to create an employee the same way that we did before.

43
00:03:01,930 --> 00:03:04,570
Notice that we get an internal server error.

44
00:03:04,570 --> 00:03:07,390
It can't commit the new employee because we haven't

45
00:03:07,390 --> 00:03:10,940
included the required attribute of department.

46
00:03:10,940 --> 00:03:15,440
If we modify our POST to include a value for the department attribute,

47
00:03:15,440 --> 00:03:16,840
then it works.

48
00:03:16,840 --> 00:03:22,430
We'll list the employees and see the employee that was created, now with

49
00:03:22,430 --> 00:03:26,790
the department attribute. For this breaking change, versioning would allow

50
00:03:26,790 --> 00:03:30,880
people who were calling it the old way to continue for a certain amount of

51
00:03:30,880 --> 00:03:36,150
time while the new way was available and ready to start using. Suppose you

52
00:03:36,150 --> 00:03:39,680
decided that you didn't want to track employees anymore, you wanted to

53
00:03:39,680 --> 00:03:41,270
track machines.

54
00:03:41,270 --> 00:03:46,140
This is an example where an overhaul of the API would be necessary.

55
00:03:46,140 --> 00:03:49,510
You wouldn't need another version that still had all of the employee

56
00:03:49,510 --> 00:03:54,340
information, you would simply create a new API to track the machines.

57
00:03:54,340 --> 00:03:59,840
In this example, the new API would have a different URI, machines,

58
00:03:59,840 --> 00:04:01,900
and accept different content.

59
00:04:01,900 --> 00:04:04,230
Let's go ahead and add a machine,

60
00:04:04,230 --> 00:04:07,960
then verify that it was added. So if adding a version doesn't

61
00:04:07,960 --> 00:04:10,800
really seem to make sense because you're not carrying over

62
00:04:10,800 --> 00:04:20,000
existing functionality or data, don't worry, you're not the first, and you probably won't be the last to have to completely redo the API.

