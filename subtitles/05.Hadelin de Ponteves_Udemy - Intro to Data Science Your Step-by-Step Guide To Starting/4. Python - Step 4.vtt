WEBVTT
1
00:00:04.210 --> 00:00:06.310
Hello and welcome to this python is its oil.

2
00:00:06.320 --> 00:00:11.400
And mostly welcome to beginning the very beginning of our implementation.

3
00:00:11.440 --> 00:00:19.150
So here we are back in spider and now the second step we need to do is to import the library with which

4
00:00:19.240 --> 00:00:23.620
we will import data set because you actually have two ways of importing.

5
00:00:23.690 --> 00:00:30.140
Set that one is with the open function which is already built in function available right now.

6
00:00:30.190 --> 00:00:31.910
No need to import any library.

7
00:00:32.160 --> 00:00:40.600
But that's a new recommendation I give you to import and manage data sets in Python the best library

8
00:00:40.840 --> 00:00:43.250
by far is the Penders library.

9
00:00:43.420 --> 00:00:48.400
And this is what we're going to import right now and to import a library in Python you need to start

10
00:00:48.400 --> 00:00:55.130
with import and then you need to add here the name of the library which is Penders.

11
00:00:55.150 --> 00:00:57.560
And then you can give it a shortcut name.

12
00:00:57.810 --> 00:01:03.260
And the classic shortcut name we always give to Penders is Peetie and that's it.

13
00:01:03.370 --> 00:01:09.710
And by the way that's the only library we'll need for this implementation and we can.

14
00:01:09.820 --> 00:01:17.140
I like to structure my code in different code sections so we can just here specify that we are importing

15
00:01:17.800 --> 00:01:18.630
the libraries.

16
00:01:18.640 --> 00:01:25.710
And of course I'm putting this in a comment right so importing the library's import Pender's as PD.

17
00:01:25.780 --> 00:01:31.450
I can already show you how to execute the line of code here I just pressed command plus shift plus left

18
00:01:31.810 --> 00:01:34.120
to select the whole line in one shot.

19
00:01:34.360 --> 00:01:40.330
And now you can just press command or control plus enter to execute this line.

20
00:01:40.390 --> 00:01:41.190
And here we go.

21
00:01:41.260 --> 00:01:42.760
Pandurs with us.

22
00:01:42.940 --> 00:01:43.510
Great.

23
00:01:43.540 --> 00:01:49.820
So that's a first Adam them and now the next step of course is to import this datasets.

24
00:01:49.870 --> 00:01:50.440
So here we go.

25
00:01:50.440 --> 00:01:51.850
New code section.

26
00:01:51.850 --> 00:01:52.910
Importing.

27
00:01:53.020 --> 00:01:56.480
This time the dataset.

28
00:01:56.500 --> 00:02:00.250
So how do we import a data set with Penders.

29
00:02:00.250 --> 00:02:07.120
Well here we are dealing with an excel file and Pender's which is a library contains lots of functions

30
00:02:07.450 --> 00:02:15.100
and one of them is the read underscore Excel function which as you might guess is a function used to

31
00:02:15.100 --> 00:02:22.300
import an excel file and so to use this function well first we are going to introduce a new variable

32
00:02:22.300 --> 00:02:26.830
because we will put this dataset in this variable and this variable.

33
00:02:26.830 --> 00:02:32.860
I always like to call it data set because I always like to give meaningful names to my variables so

34
00:02:32.860 --> 00:02:35.350
that we know what we are dealing with.

35
00:02:35.350 --> 00:02:36.770
So data set equals.

36
00:02:36.830 --> 00:02:43.050
And now that's when bandas comes into play because that's when we use depends.

37
00:02:43.060 --> 00:02:49.600
Library that has a shortcut name PD and from this library we take separated by a duck.

38
00:02:49.870 --> 00:02:55.250
The function that we're going to use to import our Excel data sets in.

39
00:02:55.270 --> 00:02:59.530
As you can see this is this one read underscore Excel.

40
00:02:59.770 --> 00:03:05.950
So I just pressed enter and I wanted to add some parenthesis and then quote and inside the quotes you

41
00:03:05.950 --> 00:03:11.040
just need to type the name of the is it and that is false.

42
00:03:11.930 --> 00:03:16.610
Five times to underscore Peepy.

43
00:03:16.970 --> 00:03:19.490
X x x.

44
00:03:19.550 --> 00:03:20.820
Perfect.

45
00:03:20.900 --> 00:03:23.350
I think it's spelled correctly.

46
00:03:23.390 --> 00:03:25.580
Now let's have a look at what it does.

47
00:03:25.580 --> 00:03:31.490
We are going to select that line and press command control plus enter to execute.

48
00:03:31.490 --> 00:03:32.380
Perfect.

49
00:03:32.420 --> 00:03:33.980
The data set is now important.

50
00:03:34.010 --> 00:03:38.650
Let's have a look and that's where variable x for now comes into play.

51
00:03:38.720 --> 00:03:40.030
Because let's click on this.

52
00:03:40.220 --> 00:03:41.040
And here we go.

53
00:03:41.060 --> 00:03:49.040
We have our data set let's double click on it and we have a much more user friendly way to look at our

54
00:03:49.040 --> 00:03:49.690
dataset.

55
00:03:49.700 --> 00:03:53.490
We can clearly see the four features here temperatures.

56
00:03:53.500 --> 00:04:00.500
The exhaust vacuum the engine pressure and the humidity and with these four variables all the data here

57
00:04:00.800 --> 00:04:03.770
we predict the energy all right.

58
00:04:03.770 --> 00:04:06.740
So keep in mind very important to understand the difference.

59
00:04:06.770 --> 00:04:12.920
These are the four independent variables and this is the dependent variable dependent variable is the

60
00:04:12.920 --> 00:04:14.480
variable that you predict.

61
00:04:14.600 --> 00:04:17.180
Thanks to the independent variables.

62
00:04:17.240 --> 00:04:17.920
All right.

63
00:04:18.070 --> 00:04:20.150
OK then that's not all.

64
00:04:20.180 --> 00:04:21.560
We imported the data set.

65
00:04:21.560 --> 00:04:22.880
That's a good step done.

66
00:04:23.030 --> 00:04:29.840
But now what we need to do is to separate in two variables the independent variables and the dependent

67
00:04:29.840 --> 00:04:30.500
variable.

68
00:04:30.500 --> 00:04:35.990
We have to put them separately independent variables will be in an array and then invariable will be

69
00:04:36.140 --> 00:04:40.280
in the vector and that's our next step here to create these two variables.

70
00:04:40.280 --> 00:04:47.440
And usually we call our array of independent variables x and then you will see the dependent variable.

71
00:04:47.450 --> 00:04:48.460
Y.

72
00:04:48.710 --> 00:04:52.640
All right so now how do we get these independent variables.

73
00:04:52.650 --> 00:04:54.890
Basically we're going to get them this way.

74
00:04:54.890 --> 00:05:01.610
We're going to take our data set and then we're going to take the first four columns because the independent

75
00:05:01.610 --> 00:05:07.160
variables that has the features the predictors of the dependent variable here are the first four comes

76
00:05:07.160 --> 00:05:07.570
here.

77
00:05:07.790 --> 00:05:13.220
So we're going to play with the indexes of the data set to get these four columns.

78
00:05:13.490 --> 00:05:18.490
And now the next thing you must know about bison is that indexes and Python started 0.

79
00:05:18.710 --> 00:05:24.270
So basically what we need to take our index is 0 1 2 and 3.

80
00:05:24.290 --> 00:05:28.010
So you could take them this way by taking the index is 0 1 2 and 3.

81
00:05:28.280 --> 00:05:29.720
But there is actually a better way.

82
00:05:29.870 --> 00:05:35.270
The better way is to take all the columns except the last one.

83
00:05:35.270 --> 00:05:41.120
And so you'll see that we will take the range of indexes from the first one up to the end except the

84
00:05:41.120 --> 00:05:44.240
last one here and I'll show you how to do this right now.

85
00:05:44.280 --> 00:05:45.750
So OK.

86
00:05:46.190 --> 00:05:52.910
Therefore here first since we are taking a subset of the data set well to take the subset we have to

87
00:05:52.910 --> 00:06:00.200
take the dataset first and then remember we are going to get the columns we want by playing with the

88
00:06:00.200 --> 00:06:04.610
indexes by getting their indexes and to get these indexes.

89
00:06:04.610 --> 00:06:07.210
We're going to use the AILA function.

90
00:06:07.310 --> 00:06:13.800
I lock eyes for index and luck is four locate we can locate the columns we want.

91
00:06:13.850 --> 00:06:15.270
Thanks to the indexes.

92
00:06:15.380 --> 00:06:22.130
So I look you add some brackets and that's where you specify which indexes of the lines and columns

93
00:06:22.280 --> 00:06:23.450
you want to take.

94
00:06:23.450 --> 00:06:25.850
So first you have to start by the lines.

95
00:06:25.860 --> 00:06:28.730
That's the classic way of reading a matrix or an array.

96
00:06:28.730 --> 00:06:33.410
You know you always have the index of the line first and then separated by a comma.

97
00:06:33.470 --> 00:06:34.890
The index of the column.

98
00:06:35.070 --> 00:06:40.920
And so since we basically want to take all the data well we want to take all the lines.

99
00:06:41.000 --> 00:06:46.290
And by the way there are a lot of lines I think there are 10000 lines but we want to take all the lines

100
00:06:46.290 --> 00:06:51.610
and the trick to do that is to add here a column by just adding a column.

101
00:06:51.630 --> 00:06:59.090
Here we specify that we're taking the first line up to the last line and then you have to specify the

102
00:06:59.180 --> 00:07:02.130
indexes of the columns you want to take.

103
00:07:02.480 --> 00:07:09.860
And as we understood these are all the indexes except for the last one and there is actually a trick

104
00:07:10.070 --> 00:07:13.460
to get all these indexes except for the last one.

105
00:07:13.460 --> 00:07:20.540
It's to take the range from the first index up to the last index because in Python the upper bound of

106
00:07:20.540 --> 00:07:22.120
a range is excluded.

107
00:07:22.190 --> 00:07:27.440
Therefore by getting the last index as the upper end of the range Well we will get all these indexes

108
00:07:27.650 --> 00:07:31.010
except for the last one and that's exactly what we want to do.

109
00:07:31.070 --> 00:07:36.950
And remember I told you I want to make a code that works for every data set regardless of the number

110
00:07:36.950 --> 00:07:37.700
of columns.

111
00:07:37.880 --> 00:07:41.960
Well we're going to get the last index the following way.

112
00:07:42.080 --> 00:07:48.840
Not by specifying index 4 because this has an x 4 Remember 0 1 2 3 and 4.

113
00:07:49.040 --> 00:07:57.020
But by taking the index minus one the index minus one is exactly the index of the last column of your

114
00:07:57.020 --> 00:07:58.170
data set.

115
00:07:58.190 --> 00:08:03.280
And so what I'm going to do here is specify the range of indexes.

116
00:08:03.290 --> 00:08:04.360
I want to take.

117
00:08:04.550 --> 00:08:13.660
Which is the range from 0 up to the last index which is minus 1 Make sure to understand and remember

118
00:08:13.660 --> 00:08:14.720
why this works.

119
00:08:14.740 --> 00:08:22.510
That's because the upper bound of arr. is excluded and therefore this index here in this range from

120
00:08:22.510 --> 00:08:29.530
zero to the last index of the kinds of ideas that is excluded and therefore we're going from the beginning

121
00:08:29.560 --> 00:08:35.830
because the lower bound is included up to the end except the last column and that's the trick to get

122
00:08:35.830 --> 00:08:42.550
everything in there is even another trick it's to not even specify the zero because by default the first

123
00:08:42.550 --> 00:08:45.370
index taken here is the index zero.

124
00:08:45.770 --> 00:08:51.700
And now to finish you know we have to specify that we want to take the values of the cells in the dataset

125
00:08:51.960 --> 00:08:56.620
and to do this you simply need to add here that value is perfect.

126
00:08:56.620 --> 00:08:57.750
Now let's try this.

127
00:08:57.880 --> 00:09:00.930
Let's execute this line of code.

128
00:09:00.940 --> 00:09:08.470
Here we go x an array of nine thousand five hundred sixty eight lines and four columns all of type float

129
00:09:08.470 --> 00:09:09.290
64.

130
00:09:09.290 --> 00:09:13.160
And that's because the data or independent variables are all sluts.

131
00:09:13.420 --> 00:09:19.420
So let's double click on this and let's have a look at our what we call matrix of features or matrix

132
00:09:19.420 --> 00:09:20.860
and independent variables.

133
00:09:20.860 --> 00:09:21.680
Here we go.

134
00:09:21.760 --> 00:09:28.750
We have exactly the first four columns of our data set with temperature to vacuum the pressure and the

135
00:09:28.750 --> 00:09:29.770
humidity.

136
00:09:29.770 --> 00:09:30.670
Perfect.

137
00:09:30.670 --> 00:09:36.500
So now what we have to do is get separately as we said the dependent variable.

138
00:09:36.610 --> 00:09:39.750
And to do this it's very simple it's almost the same.

139
00:09:39.850 --> 00:09:43.610
So that's why I'm copying this paste.

140
00:09:43.660 --> 00:09:49.590
We're going to give another name to the variable that will get this deep and variable that is energy.

141
00:09:49.930 --> 00:09:53.110
Same we're taking the last column from our data set.

142
00:09:53.260 --> 00:09:57.920
Then we're going to use a lock function to get the index of the cone we want first.

143
00:09:57.940 --> 00:10:00.290
We also want to take all the lines for sure.

144
00:10:00.670 --> 00:10:03.530
And now that's where things change.

145
00:10:03.550 --> 00:10:09.960
We're not taking the range of the index from the beginning up to the end excluding the last index.

146
00:10:10.090 --> 00:10:15.150
But we simply want to get the last index in self and according to you what is it going to be.

147
00:10:15.190 --> 00:10:22.360
Remember where I said before minus 1 is the index of the last column which is exactly what we want.

148
00:10:22.360 --> 00:10:24.420
So here if I add minus 1.

149
00:10:24.610 --> 00:10:33.320
Well it will get only the last column and we now understand why what we do here works for any data dataset

150
00:10:33.460 --> 00:10:36.540
regardless of the number of features in the dataset.

151
00:10:36.760 --> 00:10:40.310
Because this will always take all the columns except the last one.

152
00:10:40.480 --> 00:10:43.180
And here it will always take the last column.

153
00:10:43.180 --> 00:10:49.000
The only thing you need to make sure is that your dataset contains first independent variables and the

154
00:10:49.000 --> 00:10:49.840
dependent variable.

155
00:10:49.840 --> 00:10:51.430
In the last column.

156
00:10:51.460 --> 00:10:51.840
All right.

157
00:10:51.850 --> 00:10:53.370
Now let me show you this.

158
00:10:53.380 --> 00:10:56.500
I'm going to select this line and execute.

159
00:10:56.500 --> 00:10:57.620
Here we go.

160
00:10:57.730 --> 00:11:02.140
We must now have the depend variables that is energy.

161
00:11:02.140 --> 00:11:04.300
Yes that's exactly what we have.

162
00:11:04.630 --> 00:11:10.540
So I'm going to show you a final representation of everything we created.

163
00:11:10.930 --> 00:11:15.220
But I'm just going to fast forward here because it's going to take me two minutes I'm preparing here

164
00:11:15.280 --> 00:11:18.500
a nice display are I would go.

165
00:11:18.500 --> 00:11:20.100
So this is the data set.

166
00:11:20.100 --> 00:11:26.270
This is our array of independent variables and this is our vector of dependent variable.

167
00:11:26.430 --> 00:11:31.530
And so here we go we can clearly see that the independent variables are in X the dependent variable

168
00:11:31.600 --> 00:11:32.420
is in Y.

169
00:11:32.460 --> 00:11:33.810
So everything's all good.

170
00:11:33.810 --> 00:11:38.700
We are ready to move on to the next step which will be to split the dataset into the training set and

171
00:11:38.690 --> 00:11:39.670
a test set.

172
00:11:39.690 --> 00:11:41.350
I'll explain that in the next Statoil.

173
00:11:41.390 --> 00:11:42.990
And until then enjoy the science.
