WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:04.425
Let's continue with our design and add the content to the hero section.

00:00:04.425 --> 00:00:09.585
We either heading a paragraph and buttons all of these we can add from Elements panel.

00:00:09.585 --> 00:00:12.405
Make sure that they are inside that blue section.

00:00:12.405 --> 00:00:14.905
Remember why we put them inside, right?

00:00:14.905 --> 00:00:16.850
Because web wars on the box model,

00:00:16.850 --> 00:00:20.390
everything's going to go inside something.

00:00:20.390 --> 00:00:24.350
Okay, now let's put our copy inside these text elements.

00:00:24.350 --> 00:00:26.630
Just double-click the element on the canvas and

00:00:26.630 --> 00:00:29.345
start typing or copy-paste from the design file.

00:00:29.345 --> 00:00:34.560
I'll explain in a bit why there is this new white gap on top of the blue box.

00:00:36.130 --> 00:00:39.950
New elements in web law are usually jammed one

00:00:39.950 --> 00:00:43.160
after another and start to the edges of their apparent.

00:00:43.160 --> 00:00:45.995
This is how HTML behaves by default.

00:00:45.995 --> 00:00:48.500
But that's not how we want things.

00:00:48.500 --> 00:00:51.530
We want to move them around and create spacing between them.

00:00:51.530 --> 00:00:52.895
So how do we do that?

00:00:52.895 --> 00:00:53.735
In Fichman?

00:00:53.735 --> 00:00:54.320
That's easy.

00:00:54.320 --> 00:00:56.090
You just drag the element where you want it.

00:00:56.090 --> 00:00:58.160
But on web pages that's not possible.

00:00:58.160 --> 00:01:00.740
These elements can actually be moved that are

00:01:00.740 --> 00:01:03.440
dragged around wherever you want on the page.

00:01:03.440 --> 00:01:06.095
But CSS has a special trick for this.

00:01:06.095 --> 00:01:08.360
It's called padding in margins.

00:01:08.360 --> 00:01:12.725
We can find that under spacing category on the Properties panel,

00:01:12.725 --> 00:01:17.735
padding, ad space inside the element and margin ED space outside of it.

00:01:17.735 --> 00:01:20.105
Let's take our button for example.

00:01:20.105 --> 00:01:22.970
By default, web law has applied some padding to it.

00:01:22.970 --> 00:01:25.355
When you hover over the padding property,

00:01:25.355 --> 00:01:28.730
it highlights the space on the balance so you can see it visually.

00:01:28.730 --> 00:01:31.190
Values in this case are set in pixels,

00:01:31.190 --> 00:01:32.780
nine pixels on top and bottom,

00:01:32.780 --> 00:01:34.670
and 15 on the sides.

00:01:34.670 --> 00:01:37.460
You can increase or decrease either by dragging

00:01:37.460 --> 00:01:45.840
the handles or directly inputting the value like 100 pixels.

00:01:47.350 --> 00:01:52.325
Here's a pro tip. If you hold out or Option key while you drag the handle,

00:01:52.325 --> 00:01:56.180
it will automatically apply the same value on the other side.

00:01:56.180 --> 00:01:59.450
So top and bottom together or left and right together.

00:01:59.450 --> 00:02:00.815
And if you hold shift,

00:02:00.815 --> 00:02:05.195
then it will apply same value to all four sides at the same time.

00:02:05.195 --> 00:02:06.905
Similarly on the margin,

00:02:06.905 --> 00:02:10.805
only difference is that space is being applied on the outside.

00:02:10.805 --> 00:02:14.435
So we can pull our elements wherever we want them to.

00:02:14.435 --> 00:02:20.330
And so this way we can add extra space on either of the four sides of that element,

00:02:20.330 --> 00:02:24.335
which will then kind of push them from their original place.

00:02:24.335 --> 00:02:27.935
Just like in sizes, we have all other units besides pixels,

00:02:27.935 --> 00:02:31.340
although rarely we would use other units for padding and margin.

00:02:31.340 --> 00:02:34.260
Pixel units are usually the way to go.

00:02:35.500 --> 00:02:41.120
So that white space on top of the blue box is actually the margin from our heading.

00:02:41.120 --> 00:02:45.800
Just like the bottom web flow adds a default margins on many of the elements.

00:02:45.800 --> 00:02:47.450
If something is acting oddly,

00:02:47.450 --> 00:02:49.685
check the Styles Panel for default values.

00:02:49.685 --> 00:02:52.110
They usually hold the clues.

00:02:53.320 --> 00:02:58.160
In our case, let's apply margins and paddings to match our designs.

00:02:58.160 --> 00:03:02.930
We already know these values inside fig must select the object and hold out or

00:03:02.930 --> 00:03:05.480
Option key and move your mouse around to

00:03:05.480 --> 00:03:08.255
see distances between the selected and other objects.

00:03:08.255 --> 00:03:14.000
For example, we can see that the content is 140 pixels from the left edge of the frame,

00:03:14.000 --> 00:03:16.340
and we have 209 pixels on the top.

00:03:16.340 --> 00:03:17.990
How do you use this information?

00:03:17.990 --> 00:03:21.540
We can apply the same padding to our blue box.

00:03:30.940 --> 00:03:33.230
Now, depending on the browser,

00:03:33.230 --> 00:03:34.400
a hide or screen,

00:03:34.400 --> 00:03:37.355
this 290 pixel might not work at all.

00:03:37.355 --> 00:03:42.050
On a smaller browser height is 290 pixels is too much.

00:03:42.050 --> 00:03:43.940
The web isn't static like FISMA,

00:03:43.940 --> 00:03:46.639
and we need to think of values that will be responsive.

00:03:46.639 --> 00:03:48.455
So what do we want to achieve here?

00:03:48.455 --> 00:03:51.995
We want this content to appear more or less in the center,

00:03:51.995 --> 00:03:54.605
don't read regardless of the screen side,

00:03:54.605 --> 00:03:56.660
just like we did in our designs.

00:03:56.660 --> 00:03:58.760
If we use exact pixel values,

00:03:58.760 --> 00:04:01.595
it's going to look very different from screen to screen.

00:04:01.595 --> 00:04:06.050
On shorter browsers that content is going to look like it's sinking on the bottom.

00:04:06.050 --> 00:04:09.530
But on the taller browsers that might be

00:04:09.530 --> 00:04:13.950
too little and the content might look like it's too much on the top.

00:04:15.220 --> 00:04:19.670
So instead we can use vh viewport height unit.

00:04:19.670 --> 00:04:24.470
This will automatically calculate the padding and if screen size shrinks or grows,

00:04:24.470 --> 00:04:26.435
the padding will shrink and grow with it.

00:04:26.435 --> 00:04:28.370
Sometimes it will make 20 VH,

00:04:28.370 --> 00:04:29.735
but sometimes something else.

00:04:29.735 --> 00:04:31.730
And it depends on the content that we have,

00:04:31.730 --> 00:04:34.350
but in this case, something like that.

00:04:46.240 --> 00:04:49.835
Now if we shrink the screen a little too much,

00:04:49.835 --> 00:04:52.910
you can see that content is being squeezed on the bottom.

00:04:52.910 --> 00:04:55.655
That's because we haven't added the bottom padding.

00:04:55.655 --> 00:04:56.930
When screen is large,

00:04:56.930 --> 00:04:59.750
it's floating on the top and there is space on the bottom

00:04:59.750 --> 00:05:03.215
because we gave our blue box a value of 100 vh,

00:05:03.215 --> 00:05:06.425
stretching in to fill the entire visible screen.

00:05:06.425 --> 00:05:08.810
But when that visible screen is really short,

00:05:08.810 --> 00:05:10.955
then there is no space left on the bottom.

00:05:10.955 --> 00:05:12.380
Same thing we can do here.

00:05:12.380 --> 00:05:16.400
So we can add the same exact VH value to the bottom padding.

00:05:16.400 --> 00:05:20.210
This will make sure we have good spacing both on top and the bottom,

00:05:20.210 --> 00:05:23.460
no matter how we shrink or grow the browser.

00:05:31.150 --> 00:05:35.700
Okay, now let's add margins between the objects.

00:05:51.210 --> 00:05:55.720
And let's remove that extra 20 pixel margin that's on top of the hat.

00:05:55.720 --> 00:06:01.190
And because it's adding to the already existing padding that's on the hero section.

00:06:02.010 --> 00:06:05.920
This layout arrangement seems like we're on the right path.

00:06:05.920 --> 00:06:07.870
We check vertical responsiveness.

00:06:07.870 --> 00:06:11.810
But what happens if we check this on different widths?

00:06:13.590 --> 00:06:18.565
These 140 pixel left padding doesn't seem like a good idea anymore.

00:06:18.565 --> 00:06:20.715
It's pushing content too much for the ride.

00:06:20.715 --> 00:06:25.520
We could fix this ends that individual paddings for each screen size or maybe even

00:06:25.520 --> 00:06:30.530
use responsive unit for the padding like vw for the viewport width.

00:06:30.530 --> 00:06:33.320
But the most common way and the best

00:06:33.320 --> 00:06:37.249
way and best solution for these two, use a container.

00:06:37.249 --> 00:06:41.540
In our designs, most of the elements are sitting inside the limits of our grid.

00:06:41.540 --> 00:06:44.660
This gives us an invisible container which is centered

00:06:44.660 --> 00:06:47.810
in the middle and all those elements are sitting inside.

00:06:47.810 --> 00:06:50.885
This is how most websites are laid out as well, right?

00:06:50.885 --> 00:06:54.785
He has a center layout and the place everything inside this layout,

00:06:54.785 --> 00:06:58.190
unless it's background images or some unique elements.

00:06:58.190 --> 00:07:00.575
We can achieve this layout by,

00:07:00.575 --> 00:07:02.885
you guessed it with another box.

00:07:02.885 --> 00:07:08.430
I'll put another box inside the blue box and place our content elements inside this.

00:07:09.850 --> 00:07:12.740
We have to drag the elements one by one.

00:07:12.740 --> 00:07:13.790
There is no option,

00:07:13.790 --> 00:07:17.000
at least not yet to kinda select multiple,

00:07:17.000 --> 00:07:20.850
multiple elements at the same time and drag them all together.

00:07:22.030 --> 00:07:27.030
Now we're going to remove that left padding from the parent blue box.

00:07:31.000 --> 00:07:34.580
First we're going to apply width to our container.

00:07:34.580 --> 00:07:38.850
In sigma, we can measure the exact width of our grid.

00:07:39.310 --> 00:07:43.830
It's 10000160 pixels.

00:07:47.850 --> 00:07:53.140
But the fixed width isn't going to work because it's not going to be responsive.

00:07:53.140 --> 00:07:56.380
So when the browser shrinks and its narrow, it's not going to adjust.

00:07:56.380 --> 00:07:59.305
So we need to instead apply maximum width.

00:07:59.305 --> 00:08:01.930
This way it will shrink with the browser,

00:08:01.930 --> 00:08:08.030
but it's not going to expand beyond those maximum pixels.

00:08:09.330 --> 00:08:13.090
Lastly, we need to center to center elements in web flow.

00:08:13.090 --> 00:08:16.555
We need to apply automatic margins on the both sides.

00:08:16.555 --> 00:08:18.370
When you apply autumn margin,

00:08:18.370 --> 00:08:22.645
the box takes up the width or maximum width that we specified.

00:08:22.645 --> 00:08:27.835
In. Then the rest of the space is split between the left and right margins,

00:08:27.835 --> 00:08:30.560
which basically centers element.

00:08:41.860 --> 00:08:47.360
Bottom margin works like a spring that pushes the elements in the middle.

00:08:47.360 --> 00:08:50.750
These sort of container box provides a, the best solution.

00:08:50.750 --> 00:08:55.205
It's centers that content in the middle layout regardless how wide is the browser.

00:08:55.205 --> 00:08:59.120
Even if someone was looking at our website in a movie theater screen,

00:08:59.120 --> 00:09:01.140
any shrinks with a browser to,

00:09:01.140 --> 00:09:03.695
while maintaining it in the center.

00:09:03.695 --> 00:09:06.500
Although now that we don't have any padding on the sides,

00:09:06.500 --> 00:09:10.850
you will see that it's going to be squeezed and kind of touching the edges.

00:09:10.850 --> 00:09:14.210
Because we're already using auto margins for our container box.

00:09:14.210 --> 00:09:16.400
We can really add extra information to it,

00:09:16.400 --> 00:09:17.930
but we can do something else.

00:09:17.930 --> 00:09:22.835
We can add padding either inside of our container or to the parent blue box.

00:09:22.835 --> 00:09:26.090
This will push the content away from the sites.

00:09:26.090 --> 00:09:29.450
Whether you add padding to the container of the blue box doesn't really matter.

00:09:29.450 --> 00:09:31.820
It's exactly, the result is exactly the same.

00:09:31.820 --> 00:09:36.845
But I think it's a little better to edit to the blue box parent element.

00:09:36.845 --> 00:09:39.410
Now this gives us the central layout that is

00:09:39.410 --> 00:09:42.305
responsive and perfectly adjust to all the screen sizes.

00:09:42.305 --> 00:09:43.865
And when we shrink it,

00:09:43.865 --> 00:09:46.280
it's not squeezed to the edges.

00:09:46.280 --> 00:09:49.760
A couple of rules with autumn margins for it to work.

00:09:49.760 --> 00:09:53.490
The element needs to have either a specified width or maximum width.

00:09:53.490 --> 00:09:59.380
This is what CSS uses to calculate the remaining space without any fixed width.

00:09:59.380 --> 00:10:01.045
The box has auto width size.

00:10:01.045 --> 00:10:02.170
In what does that mean?

00:10:02.170 --> 00:10:04.360
It means it's supposed to stretch from edge to

00:10:04.360 --> 00:10:07.705
edge so that there is no leftover margin to be used.

00:10:07.705 --> 00:10:09.535
But when we end maximum weight,

00:10:09.535 --> 00:10:12.190
now there is something to be calculated.

00:10:12.190 --> 00:10:15.580
Also, if you apply auto margin on the, on one side,

00:10:15.580 --> 00:10:18.850
it's not going to center the element y because it's going to take that,

00:10:18.850 --> 00:10:22.090
that max width and then fill up the rest of the left side,

00:10:22.090 --> 00:10:23.845
only, not the right side.

00:10:23.845 --> 00:10:27.850
And another thing to keep in mind is that auto margin doesn't work vertically.

00:10:27.850 --> 00:10:30.490
It doesn't work given if we add maximum height,

00:10:30.490 --> 00:10:32.515
this is not a web flow limitation.

00:10:32.515 --> 00:10:34.300
It's how it works with the code.

00:10:34.300 --> 00:10:36.090
There is a specific reason for this,

00:10:36.090 --> 00:10:40.115
has something to do with the way browser does the math for the auto margins.

00:10:40.115 --> 00:10:41.855
But we don't have to stress about this.

00:10:41.855 --> 00:10:44.940
There are other ways to center objects vertically.

00:10:45.850 --> 00:10:49.385
Reflow actually has a default container element,

00:10:49.385 --> 00:10:51.380
and it works in exactly the same way.

00:10:51.380 --> 00:10:54.680
It's still a diblock with this properties applied to it.

00:10:54.680 --> 00:10:59.135
But I never use their container because it has a max-width which is not editable.

00:10:59.135 --> 00:11:00.470
If I'm not mistaken,

00:11:00.470 --> 00:11:03.140
I think it's 950 pixels maximum,

00:11:03.140 --> 00:11:05.570
which I find very narrow and limiting.

00:11:05.570 --> 00:11:08.750
So I just build my own container to a couple of extra steps,

00:11:08.750 --> 00:11:10.850
but I get better control on my designs.

00:11:10.850 --> 00:11:12.650
I suggest for you to do the same,

00:11:12.650 --> 00:11:14.270
make your own container.

00:11:14.270 --> 00:11:16.400
You'll learn better how things work and you'll

00:11:16.400 --> 00:11:18.830
avoid the moment when you build an entire site.

00:11:18.830 --> 00:11:21.635
And so at some point, decide that you'd like a wider container.

00:11:21.635 --> 00:11:23.840
That's how we move things around in web flow.

00:11:23.840 --> 00:11:26.570
And that's exactly the way how you would move them around

00:11:26.570 --> 00:11:29.585
if you are using HTML and CSS and coding it.

00:11:29.585 --> 00:11:32.450
We have padding which adds spacing inside the element.

00:11:32.450 --> 00:11:35.345
And we have margin that at spacing outside of the element,

00:11:35.345 --> 00:11:37.700
the margins from different elements work together.

00:11:37.700 --> 00:11:41.900
So 60 pixel bottom margin of our paragraph and ten picks up a top margin on

00:11:41.900 --> 00:11:46.565
that button would make a total of 6070 pixel spacing between them.

00:11:46.565 --> 00:11:48.830
Same goes for the panning of the parent element.

00:11:48.830 --> 00:11:51.485
It's going to add to the margin of the child elements.

00:11:51.485 --> 00:11:52.790
And we are autumn margin,

00:11:52.790 --> 00:11:55.650
which is mainly used to center elements.
