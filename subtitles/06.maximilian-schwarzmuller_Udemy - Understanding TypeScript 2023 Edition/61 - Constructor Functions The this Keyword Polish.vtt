WEBVTT

00:02.160 --> 00:03.330
Prezenter: Teraz klasy

00:03.330 --> 00:06.080
i wszystkie funkcje konstruktorskie, które istnieją

00:06.080 --> 00:09.280
dłużej, nie mają tylko właściwości, których możesz użyć

00:09.280 --> 00:12.780
do określenia ogólnej struktury obiektu.

00:12.780 --> 00:14.770
Możesz również dodać metody.

00:14.770 --> 00:17.460
Tak naprawdę mamy tam metodę konstruktora.

00:17.460 --> 00:19.620
Ale to tylko funkcja użytkowa, która

00:19.620 --> 00:22.940
jest wywoływana, gdy robisz instancję klasy.

00:22.940 --> 00:25.584
Pamiętaj, że w przeszłości mieliśmy tylko funkcje konstruktora,

00:25.584 --> 00:28.100
teraz mamy ten cukier syntaktyczny, ale nadal mamy

00:28.100 --> 00:30.460
funkcję construct a, którą możemy dodać, aby uruchomić

00:30.460 --> 00:33.300
dowolny kod inicjalizacyjny.

00:33.300 --> 00:36.350
Możesz również dodać kilka funkcji lub metod, które

00:36.350 --> 00:38.600
są następnie nazywane, które możesz

00:38.600 --> 00:40.980
wywołać na utworzonym obiekcie.

00:40.980 --> 00:44.000
Na przykład metoda describe tutaj na

00:44.000 --> 00:46.000
naszej klasie działu.

00:46.000 --> 00:47.994
Teraz metodę dodaje się tak,

00:47.994 --> 00:49.382
nazwa metody, potem

00:49.382 --> 00:53.270
brak dwukropka, zamiast tego znak równości, nawiasy,

00:53.270 --> 00:56.090
a potem nawiasy klamrowe.

00:56.090 --> 00:59.070
Nawiasy przyjmują wszelkie argumenty, których możesz potrzebować.

00:59.070 --> 01:00.780
Teraz powiedzmy, że tutaj nie potrzebujemy

01:00.780 --> 01:03.330
żadnych, w przeciwnym razie mógłbyś dodać parametry tak,

01:03.330 --> 01:05.150
jak robisz to w zwykłej funkcji.

01:05.150 --> 01:07.280
Jednak to, czego zazwyczaj zawsze potrzebujesz,

01:07.280 --> 01:10.000
to ciało funkcji lub ciało metody pomiędzy nawiasami

01:10.000 --> 01:12.020
klamrowymi.

01:12.020 --> 01:14.693
Tutaj określasz teraz logikę swojej metody.

01:15.580 --> 01:19.570
I tam możemy chcieć wyprowadzić nazwę działu z dodatkowymi

01:19.570 --> 01:22.410
informacjami może.

01:22.410 --> 01:26.230
Możemy to oczywiście zrobić tutaj za pomocą konsoli. log, na przykład dział,

01:26.230 --> 01:30.620
dwukropek i potem może nazwisko.

01:30.620 --> 01:32.100
Jednak to by się nie udało.

01:32.100 --> 01:34.570
To szukałoby nazwy zmiennej, która

01:34.570 --> 01:37.710
musi istnieć wewnątrz tej opisanej metody

01:37.710 --> 01:40.860
lub poza klasą jako zmienna globalna.

01:40.860 --> 01:42.470
I jak widzisz, jeśli wybrał wiek,

01:42.470 --> 01:44.433
dostaję błąd dla nazwy nie robię tego,

01:44.433 --> 01:46.540
nie dostaję tego, ponieważ faktycznie istnieje

01:46.540 --> 01:50.100
globalna zmienna nazwy w przeglądarce w obiekcie okna.

01:50.100 --> 01:53.030
Niemniej jednak nie odnosiłoby się to do tej właściwości

01:53.030 --> 01:57.130
nazwy tutaj, ale do jakiejś globalnej zmiennej nazwy poza tą klasą.

01:57.130 --> 01:59.599
Aby odwołać się do właściwości klasy lub metody

01:59.599 --> 02:01.930
z wnętrza klasy, musimy użyć słowa kluczowego

02:01.930 --> 02:03.590
this, tak jak robimy to tutaj

02:03.590 --> 02:05.630
w konstruktorze.

02:05.630 --> 02:08.980
To następnie typowo odnosi się do konkretnej instancji

02:08.980 --> 02:12.400
tej klasy, która została utworzona.

02:12.400 --> 02:14.240
I tam za pomocą notacji kropkowej możemy

02:14.240 --> 02:16.600
uzyskać dostęp do wszystkich właściwości i metod

02:16.600 --> 02:17.650
poza tą instancją.

02:17.650 --> 02:19.555
W tym przypadku to. nazwa.

02:19.555 --> 02:24.555
Więc jeśli teraz, tam na dole, zadzwonię do księgowości. opisać tak.

02:24.583 --> 02:28.110
Słowo kluczowe this, gdy this executes będzie odnosić się

02:28.110 --> 02:30.920
do tego konkretnego obiektu księgowego, który

02:30.920 --> 02:33.730
został zbudowany na podstawie tej klasy.

02:33.730 --> 02:35.530
Więc jeśli teraz zapiszę to i ponownie

02:35.530 --> 02:38.570
załadujemy, powinniśmy zobaczyć to wyjście tutaj,

02:38.570 --> 02:40.420
z czego oczywiście ma literówkę,

02:40.420 --> 02:42.110
ale ogólnie działa.

02:42.110 --> 02:43.944
Poprawmy teraz literówkę w tym miejscu.

02:43.944 --> 02:46.190
Tak więc w ten sposób możemy dodać metodę.

02:46.190 --> 02:48.166
Teraz jakie ważne słowo o tym słowie kluczowym.

02:48.166 --> 02:50.600
Jak zapewne wiesz, jeśli pracowałeś trochę

02:50.600 --> 02:54.890
z JavaScriptem, to słowo kluczowe this może być zdradliwe.

02:54.890 --> 02:56.090
Na przykład, jeśli

02:56.090 --> 03:00.090
dodałbym kolejny obiekt tutaj księgowość kopia i

03:01.480 --> 03:03.350
to jest nasz obiekt, który

03:03.350 --> 03:06.430
ma właśnie metodę describe i śmiem wskazać

03:06.430 --> 03:11.270
na księgowość. opisać.

03:11.270 --> 03:15.470
Następnie jeśli wywołam accountingcopy. opisać jako metodę, co według

03:15.470 --> 03:17.150
Ciebie się stanie?

03:17.150 --> 03:19.200
Czy myślisz, że dostaniemy błąd?

03:19.200 --> 03:21.200
Z pewnością nie otrzymujemy żadnego błędu kompilacji,

03:21.200 --> 03:22.927
który kompiluje się po prostu dobrze.

03:22.927 --> 03:26.360
Ale w runtime widzimy dział niezdefiniowany.

03:26.360 --> 03:28.780
A powodem tego jest to, że to, co robię, to dodaję

03:28.780 --> 03:32.010
właściwość describe do tego obiektu, który jest tworzony

03:32.010 --> 03:34.040
z obiektem literalnym, nie opartym

03:34.040 --> 03:37.888
na tej klasie, ale po prostu jako atrapa obiektu nie opartego na żadnej

03:37.888 --> 03:41.420
konkretnej klasie, którą zdefiniowałeś.

03:41.420 --> 03:44.360
A następnie wartość dla tej właściwości describe

03:44.360 --> 03:49.000
jest wskaźnikiem na metodę describe w moim obiekcie księgowym.

03:49.000 --> 03:52.168
Więc wskazuję na tę metodę tutaj, aby znaleźć

03:52.168 --> 03:54.690
dla tego konkretnego obiektu.

03:54.690 --> 03:56.240
Nie wykonuję go.

03:56.240 --> 03:57.723
Więc nie przekazuję wartości

03:57.723 --> 04:00.410
wykonania tej funkcji do opisu.

04:00.410 --> 04:04.090
Tak naprawdę przekazuję samą funkcję do opisania tutaj.

04:04.090 --> 04:06.430
Więc kiedy następnie wywołuję describe tutaj

04:06.430 --> 04:08.950
na kopii, to rzeczywiście wykonuje metodę to wszystko

04:08.950 --> 04:10.440
działa poprawnie.

04:10.440 --> 04:13.690
Problem po prostu jest, kiedy ta metoda wykonuje się,

04:13.690 --> 04:17.040
to nie będzie odnosić się do tego obiektu, którego ta metoda

04:17.040 --> 04:19.170
była częścią pierwotnie, więc nie

04:19.170 --> 04:21.140
do obiektu księgowego.

04:21.140 --> 04:22.350
Zamiast tego, to, i to jest

04:22.350 --> 04:25.050
dobra zasada kciuka, którą możesz zapamiętać, zwykle

04:25.050 --> 04:27.900
odnosi się do rzeczy, która jest odpowiedzialna za

04:27.900 --> 04:29.650
wywołanie metody.

04:29.650 --> 04:32.190
A odpowiedzialny za wywołanie metody describe

04:32.190 --> 04:34.880
w tym przypadku jest egzemplarz księgowy.

04:34.880 --> 04:39.160
Bo my nazywamy opis na kopii księgowej.

04:39.160 --> 04:42.320
Czyli będzie to odnosiło się do rzeczy przed kropką tutaj,

04:42.320 --> 04:43.980
czyli księgowości Copy.

04:43.980 --> 04:47.530
To jednak jest obiekt, który nie ma właściwości name.

04:47.530 --> 04:49.678
Więc kiedy mam dostęp do tego. nazwa, otrzymuję

04:49.678 --> 04:53.968
błąd z powodu tego nie odwołuje się do obiektu z

04:53.968 --> 04:56.610
właściwością nazwa.

04:56.610 --> 04:59.220
Więc nazwa daje nam nieokreślone rzeczywiście.

04:59.220 --> 05:02.260
I właśnie dlatego otrzymuję to dziwne wyjście.

05:02.260 --> 05:04.310
To jest jedna rzecz, o której musisz pamiętać,

05:04.310 --> 05:07.470
nie tylko w TypeScript, to jest rzecz JavaScript.

05:07.470 --> 05:09.540
I oczywiście, dlatego może ci się to przydarzyć

05:09.540 --> 05:11.500
również w TypeScript.

05:11.500 --> 05:13.940
Teraz, aby obejść ten, "ten" problem,

05:13.940 --> 05:16.660
możesz dodać parametr do metody describe,

05:16.660 --> 05:19.730
który nazywa się this.

05:19.730 --> 05:21.380
To jest specjalny parametr,

05:21.380 --> 05:25.334
specjalna instrukcja rozumiana przez TypeScript.

05:25.334 --> 05:28.430
Jeśli dodasz parametr o nazwie this tutaj, to tak naprawdę

05:28.430 --> 05:31.420
nie jest to parametr, który jest oczekiwany, nadal

05:31.420 --> 05:36.010
możesz wywołać describe bez przekazywania jakiejkolwiek wartości.

05:36.010 --> 05:38.476
Zamiast tego jest to interpretowane przez

05:38.476 --> 05:42.980
TypeScript, aby być wskazówką dotyczącą tego, do czego należy się odnieść.

05:42.980 --> 05:45.960
I teraz ważne jest, aby przypisać do tego typ.

05:45.960 --> 05:48.810
A typ tutaj, w tym przypadku powinien być

05:48.810 --> 05:51.780
typem naszej klasy tutaj więc dział.

05:51.780 --> 05:53.840
Chcę przez to powiedzieć, że

05:53.840 --> 05:56.250
kiedy opis jest wykonywany wewnątrz

05:56.250 --> 05:59.375
opisu, więc w tym przypadku tutaj, powinien

05:59.375 --> 06:02.550
zawsze odnosić się do instancji, która jest

06:02.550 --> 06:05.040
oparta na klasie działu.

06:05.040 --> 06:09.160
Czyli obiekt, który w końcu byłby typu dział.

06:09.160 --> 06:12.370
I dlatego teraz faktycznie otrzymujemy błąd

06:12.370 --> 06:14.140
tam na dole, otrzymujemy

06:14.140 --> 06:16.012
błąd tutaj, ponieważ to, co

06:16.012 --> 06:19.800
mamy tutaj, to, że kiedy wywołujemy describe tutaj na

06:19.800 --> 06:24.100
kopii księgowej, nie wywołujemy go na instancji działu.

06:24.100 --> 06:26.350
Więc dlatego zostanie to naruszone.

06:26.350 --> 06:29.540
To w tym przypadku nie będzie odnosiło

06:29.540 --> 06:32.250
się do obiektu typu department.

06:32.250 --> 06:34.690
Więc tutaj dodajemy trochę dodatkowego bezpieczeństwa

06:34.690 --> 06:36.920
typu poprzez dodanie tego atrapy parametru,

06:36.920 --> 06:39.450
ponieważ teraz, jeśli spróbuję zapisać to, otrzymam

06:39.450 --> 06:42.480
błąd związany z tą linią tutaj.

06:42.480 --> 06:44.950
Bo teraz rzeczywiście, wykonalibyśmy jakiś kod, który

06:44.950 --> 06:47.030
nie działałby zgodnie z oczekiwaniami.

06:47.030 --> 06:49.260
Więc musimy to naprawić, na przykład

06:49.260 --> 06:51.140
dodając właściwość name tutaj,

06:52.040 --> 06:55.290
aby to działało, ponieważ teraz TypeScript widzi Okay,

06:55.290 --> 06:57.702
obiekt, na którym wywołujesz describe,

06:57.702 --> 07:02.702
ma teraz właściwość name, tak jak to oczekuje, że będzie miał, ponieważ jest to oparte

07:03.840 --> 07:05.803
na obiekcie department, który również

07:05.803 --> 07:08.070
ma właściwość name.

07:08.070 --> 07:10.790
Więc teraz tutaj TypeScript byłby zadowolony, ponieważ

07:10.790 --> 07:12.270
dodaliśmy nazwę.

07:12.270 --> 07:14.934
Jeśli go usunę, otrzymujemy błąd z powrotem z nazwą,

07:14.934 --> 07:17.277
jakkolwiek to działa, i unikamy tego niezdefiniowanego

07:17.277 --> 07:19.750
wyjścia z wcześniej.

07:19.750 --> 07:22.770
Więc to jest ważne, aby zrozumieć o tym.

07:22.770 --> 07:26.140
I ważne jest, aby być świadomym tego ulepszenia, które możesz

07:26.140 --> 07:28.410
dodać do swojego kodu, aby upewnić się, że

07:28.410 --> 07:31.190
złapiesz niechciane zachowania, takie jak mieliśmy

07:31.190 --> 07:32.993
tam na dole wcześniej.
