WEBVTT

00:02.210 --> 00:04.400
さて､ ここまでが継承に関する基本的なことです｡ 

00:04.400 --> 00:09.810
また､ ベースクラスのメソッドやプロパティをオーバーライドすることも可能です｡

00:09.810 --> 00:15.020
そこで､ 経理で､ 独自のaddEmployeeメソッドを追加したいとします｡

00:15.020 --> 00:16.200
それができるのは､ 私たちです｡ 

00:16.200 --> 00:20.120
ここに独自のメソッドを追加し､ ここで名前を取得することができます｡

00:20.120 --> 00:21.330
と言ってみましょう｡ 

00:21.330 --> 00:23.860
そして今､ ここで､ それを追加するための別のロジックを持ちたいのです｡

00:23.860 --> 00:27.610
余分なifチェック､ あるいはifチェック if name=Max､

00:27.610 --> 00:34.770
じゃあ､ 帰りたい､ マックスを社員として加えるのはやめてくれ､ マックスは全く向いてないんだから｡

00:34.770 --> 00:36.360
そうでなければ､ 名前がMaxでない場合､

00:36.360 --> 00:38.050
従業員を追加したいのです｡

00:38.050 --> 00:40.420
しかし､ 今､ 私たちは別の問題に直面しています｡ 

00:40.420 --> 00:47.500
この2人の従業員を追加しようとすると､ employeesが既知のプロパティでないことがわかります｡

00:47.500 --> 00:50.510
その理由は､ 社員はプライベートな存在だからです｡ 

00:50.510 --> 00:51.890
今､ 重要なのはそこです｡ 

00:51.890 --> 00:54.860
プライベートプロパティは､ それが定義されているクラスの内部からのみアクセス可能で､

00:54.860 --> 01:00.670
そのクラスを継承するクラスからはアクセスできません｡

01:00.670 --> 01:06.100
だから､ 社員は部署内では使えるが､ 部署に応じたクラスでは使えない｡

01:06.100 --> 01:11.320
そのため､ 経理部門は従業員の財産に直接アクセスすることはできません｡

01:11.320 --> 01:15.930
もし､ そのアクセスを許可しても､ 外部から変更できるプロパティでないことを確認したい場合は､

01:15.930 --> 01:22.080
protectedに切り替えることができます｡

01:22.080 --> 01:25.760
Protectedはprivateと似ていますが､ privateとは異なり､

01:25.760 --> 01:32.040
このクラスだけでなく､ このクラスを継承するすべてのクラスで利用可能になりました｡

01:32.040 --> 01:37.740
そこで､ 経理部内部から社員にアクセスできるようにしました｡

01:37.740 --> 01:41.377
ここで､ Maxでなければ従業員を追加することができるようになりました｡ 

01:41.377 --> 01:49.240
そこで､ 経理のほうに､ マックスという名前の従業員を追加したいと思います｡

01:49.240 --> 01:50.480
これではうまくいかないはずです｡ 

01:50.480 --> 01:52.790
マヌーを追加しようとすると､ これはうまくいくはずです｡ 

01:52.790 --> 01:57.110
これを保存して､ 従業員情報を出力し､

01:57.110 --> 02:08.590
保存すると､ 確かに従業員が一人､ Manuと表示されるはずです｡

02:08.590 --> 02:10.017
つまり､ ここでの重要なポイントは､

02:10.017 --> 02:14.010
A) ベースクラスのメソッドをオーバーライドできることです｡

02:14.010 --> 02:18.690
独自の実装を追加すると､ ベースクラスの実装ではなく､

02:18.690 --> 02:21.023
その実装が使用されます｡

02:21.023 --> 02:28.100
また､ B) プロパティへのアクセスをプロテクトで制御する必要があります｡

02:28.100 --> 02:29.690
なぜなら､ privateを使うと､

02:29.690 --> 02:32.120
本当にこのクラスだけに限定されてしまうからです｡

02:32.120 --> 02:41.123
一方､ protectedを使うと､ 外部からはアクセスできなくなりますが､ ベースクラスを拡張したクラスの内部からはアクセスできるようになるからです｡
