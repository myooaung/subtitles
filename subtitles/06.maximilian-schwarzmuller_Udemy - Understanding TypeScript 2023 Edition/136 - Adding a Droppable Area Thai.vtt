WEBVTT

00:02.180 --> 00:04.910
ผู้สอน: ดูจากภาพแล้ว เราสามารถลากและวางได้

00:04.910 --> 00:07.240
แต่แน่นอนว่าในทางเทคนิคแล้วใน JavaScript

00:07.240 --> 00:10.410
สคริปต์ของเราไม่รู้ว่าเกิดอะไรขึ้น

00:10.410 --> 00:14.810
แต่สำหรับมนุษย์เรา แน่นอนว่ามันชัดเจนว่าเรากำลังลากสิ่งของตรงนี้มาที่นี่

00:14.810 --> 00:16.300
แต่ถ้าเราดูโค้ดของเรา

00:16.300 --> 00:20.320
JavaScript จะรู้ได้อย่างไรว่ามีอะไรถูกลากไปที่ไหน

00:20.320 --> 00:24.440
เราจะอัปเดตสถานะของเราตามข้อมูลที่เรามีตอนนี้ได้อย่างไร

00:24.440 --> 00:26.690
มันคงเป็นไปไม่ได้จริงๆ

00:26.690 --> 00:28.810
ดังนั้นเพื่อให้ทำงานใน JavaScript

00:28.810 --> 00:33.960
เราต้องกลับไปที่คลาสของรายการที่ลากได้ซึ่งก็คือรายการโครงการ

00:33.960 --> 00:39.950
ใน dragStartHandler การบันทึกเหตุการณ์ของคอนโซลไม่ใช่ทุกสิ่งที่เราควรทำ

00:39.950 --> 00:42.200
จริงๆแล้วเราไม่จำเป็นต้องทำเช่นนั้นเลย

00:42.200 --> 00:48.210
ให้ใช้วัตถุเหตุการณ์ของเราที่นี่แทนเพราะมีคุณสมบัติการถ่ายโอนข้อมูล

00:48.210 --> 00:53.280
นี่เป็นเรื่องพิเศษสำหรับเหตุการณ์ลากที่คุณมีคุณสมบัติการถ่ายโอนข้อมูล

00:53.280 --> 00:55.330
และในคุณสมบัตินั้น คุณสามารถแนบข้อมูลกับเหตุการณ์การลาก

00:55.330 --> 01:01.390
และหลังจากนั้นคุณจะสามารถแยกข้อมูลนั้นเมื่อปล่อย และเบราว์เซอร์ใน JavaScript ที่อยู่เบื้องหลัง

01:01.390 --> 01:03.730
จะเก็บข้อมูลนั้นในระหว่างการดำเนินการลาก

01:03.730 --> 01:12.020
และรับรองว่าข้อมูลที่คุณ ได้รับเมื่อเกิดการหล่นเป็นข้อมูลเดียวกับที่คุณแนบที่นี่

01:12.020 --> 01:15.520
เพื่อที่คุณจะเรียก setData ในการถ่ายโอนข้อมูลได้

01:15.520 --> 01:18.910
แต่จริงๆ แล้วการถ่ายโอนข้อมูลอาจเป็นโมฆะ

01:18.910 --> 01:23.460
เราต้องใส่เครื่องหมายอัศเจรีย์ตรงนี้ แน่นอนว่าเรารู้ว่ามันจะไม่เป็นโมฆะที่นี่

01:23.460 --> 01:25.700
คุณอาจสงสัยว่าทำไมมันถึงเป็นโมฆะ?

01:25.700 --> 01:29.060
เหตุการณ์การลากเป็นเหตุการณ์ประเภทเดียวกันเสมอ

01:29.060 --> 01:34.190
แต่ขึ้นอยู่กับผู้ฟังที่เรียกมันหรือเหตุการณ์ที่แน่นอนที่คุณกำลังฟัง

01:34.190 --> 01:37.520
การถ่ายโอนข้อมูลไม่จำเป็นต้องมี

01:37.520 --> 01:44.073
ดังนั้นเหตุการณ์ที่เกี่ยวข้องกับการลากจึงไม่ได้ให้วัตถุเหตุการณ์ที่มีวัตถุถ่ายโอนข้อมูลแก่คุณ

01:45.320 --> 01:46.620
อย่างไรก็ตาม dragStartHandler

01:46.620 --> 01:49.080
ที่เริ่มทำงานของเหตุการณ์ drag start มีไว้ที่นี่

01:49.080 --> 01:52.840
เราจึงสามารถเรียก setData ได้อย่างปลอดภัย

01:52.840 --> 01:56.330
และตอนนี้ setData รับสองอาร์กิวเมนต์ที่นี่

01:56.330 --> 01:59.900
อาร์กิวเมนต์แรกคือตัวระบุรูปแบบของข้อมูล

01:59.900 --> 02:04.970
และที่นั่น คุณมีรูปแบบที่เป็นไปได้บางอย่างที่พร้อมใช้งาน

02:04.970 --> 02:08.210
สิ่งที่ส่งมาด้วย คุณจะพบข้อมูลเชิงลึกเกี่ยวกับการลากและวางด้วย JavaScript

02:08.210 --> 02:10.890
ซึ่งคุณสามารถเรียนรู้เพิ่มเติมเกี่ยวกับสิ่งเหล่านี้ได้

02:10.890 --> 02:12.270
คุณจะได้เรียนรู้เพิ่มเติมเกี่ยวกับสิ่งนี้ในหลักสูตร

02:12.270 --> 02:15.140
JavaScript Complete Guide ของฉันด้วย

02:15.140 --> 02:20.010
ที่นี่เราต้องการข้อความ/รูปแบบธรรมดา ซึ่งหมายความว่าเราแค่จะแนบข้อมูลถามข้อความล้วนที่มีการถ่ายโอน

02:20.010 --> 02:25.430
และนั่นเป็นสิ่งสำคัญ

02:25.430 --> 02:28.250
เราจะไม่แนบวัตถุของเราที่นี่ โครงการของเราเอง

02:28.250 --> 02:31.390
เราจะติดกับดักต่อไป

02:31.390 --> 02:34.340
ดังนั้นไม่ใช่โครงการที่สมบูรณ์ซึ่งสามารถแสดงผลได้ที่นี่

02:34.340 --> 02:44.870
การแนบ ID ของโครงการก็เพียงพอแล้ว เพราะสิ่งนี้จะทำให้เราดึงข้อมูลโครงการนั้นจากสถานะของเราได้ในภายหลัง

02:44.870 --> 02:47.320
ดังนั้นการแนบ ID จึงเป็นสิ่งที่เราต้องทำ

02:47.320 --> 02:52.053
เราต้องการถ่ายโอนข้อมูลเพียงเล็กน้อย ซึ่งจะช่วยประหยัดหน่วยความจำบางส่วนด้วย

02:53.100 --> 02:56.300
ด้วยเหตุนี้ เราจึงแนบข้อมูลกับเหตุการณ์การลาก

02:56.300 --> 03:02.340
อีกสิ่งหนึ่งที่ฉันต้องการทำคือ ในการถ่ายโอนข้อมูลซึ่งเราต้องเพิ่มเครื่องหมายอัศเจรีย์อีกครั้ง

03:02.340 --> 03:05.430
ฉันจะตั้งค่าคุณสมบัติ effectAllowed เพื่อย้าย

03:05.430 --> 03:12.440
สิ่งนี้ควบคุมลักษณะของเคอร์เซอร์และบอกเบราว์เซอร์เล็กน้อยเกี่ยวกับความตั้งใจของเราว่าเราวางแผนที่จะย้ายองค์ประกอบจาก

03:12.440 --> 03:15.200
A ไป B

03:15.200 --> 03:16.760
ทางเลือกอื่นอาจเป็นการคัดลอก

03:16.760 --> 03:23.120
ซึ่งคุณจะได้เคอร์เซอร์ที่แตกต่างกันซึ่งระบุให้ผู้ใช้ทราบว่าคุณกำลังคัดลอกและไม่ได้ย้าย

03:23.120 --> 03:26.580
แต่ที่นี่เราต้องการย้ายองค์ประกอบซึ่งหมายถึงเมื่อลดลง

03:26.580 --> 03:28.810
เราลบมันออกจากตำแหน่งเดิมและเพิ่มเข้าไป

03:28.810 --> 03:31.360
สถานที่ใหม่

03:31.360 --> 03:34.940
ตอนนี้ข้อมูลถูกแนบไว้ที่นี่และนั่นคือขั้นตอนที่หนึ่ง

03:34.940 --> 03:38.470
ตอนนี้กลับไปที่จุดที่เราต้องการให้ดรอปเกิดขึ้น

03:38.470 --> 03:40.360
ซึ่งก็คือรายการโปรเจ็กต์

03:40.360 --> 03:43.400
ที่นั่น จะเริ่มต้นใน dragLeaveHandler

03:43.400 --> 03:49.200
ตอนนี้ในแอปพลิเคชันนี้ ในโครงการนี้ เรามีการดำเนินการลากและวางเพียงครั้งเดียว

03:49.200 --> 03:51.500
และนั่นคือโครงการของเราที่นี่

03:51.500 --> 03:54.970
ในแอปพลิเคชันที่ใหญ่ขึ้น คุณอาจมีส่วนต่าง ๆ

03:54.970 --> 03:57.220
บนหน้าที่สามารถลากและวางได้

03:57.220 --> 04:01.080
และคุณไม่ต้องการทำให้ทุกอย่างดร็อปได้ทุกที่

04:01.080 --> 04:09.580
ดังนั้น ที่นี่ใน dragOverHandler ซึ่งทำงานเมื่อคุณเข้าสู่พื้นที่ที่ลากได้โดยมีรายการติดอยู่กับเมาส์

04:09.580 --> 04:14.970
ฉันต้องการตรวจสอบว่าอนุญาตให้ลากที่นี่จริงหรือไม่

04:14.970 --> 04:21.060
เพื่อที่ฉันจะตรวจสอบว่าเหตุการณ์ dataTransfer ที่นี่ก็มีให้เช่นกัน

04:21.060 --> 04:22.950
ดังนั้นหากมีให้

04:22.950 --> 04:34.140
และถ้ามี คุณสมบัติประเภทการถ่ายโอนข้อมูลจะมีค่าแรกซึ่งเท่ากับข้อความ/ธรรมดา

04:34.300 --> 04:42.390
นั่นหมายความว่า ข้อมูลที่แนบมากับเหตุการณ์การลากของเรานั้นเป็นรูปแบบนั้นหรือไม่

04:42.390 --> 04:45.030
ซึ่งแน่นอนว่าเป็นเพราะนั่นคือรูปแบบที่เราตั้งค่าไว้ใน

04:45.030 --> 04:47.320
dragStartHandler ที่นี่

04:47.320 --> 04:53.180
ตัวอย่างเช่น ที่นี่ไม่อนุญาตให้วางรูปภาพหรืออะไรทำนองนั้นซึ่งมีรูปแบบข้อมูลอื่น

04:53.180 --> 04:56.173
ฉันเพิ่งอนุญาตให้วางข้อความธรรมดา

04:57.170 --> 05:01.020
แน่นอน ตอนนี้ฉันต้องแทนที่เครื่องหมายขีดล่างด้วยเหตุการณ์อีกครั้ง

05:01.020 --> 05:03.280
เพราะฉันกำลังอ้างถึงมันที่นี่

05:03.280 --> 05:09.070
หากเป็นกรณีนี้ ฉันรู้ว่าฉันต้องการอนุญาตให้ลดลง ดังนั้นฉันจะอัปเดตพื้นหลัง

05:09.070 --> 05:13.960
และอีกหนึ่งสิ่งสำคัญที่เราต้องทำ คุณต้องเรียกเหตุการณ์

05:13.960 --> 05:13.960
ป้องกันค่าเริ่มต้น

05:13.960 --> 05:15.950
แต่ทำไมเราต้องเรียกอย่างนั้น?

05:15.950 --> 05:22.480
เนื่องจากใน JavaScript การลากและวางจะทำงานในลักษณะที่อนุญาตการดรอปเท่านั้น

05:22.480 --> 05:26.119
ดังนั้นเหตุการณ์การดรอปจะทริกเกอร์เฉพาะองค์ประกอบ

05:26.119 --> 05:32.750
หากในการลาก overHandler บนองค์ประกอบเดียวกันที่คุณเรียกว่า

05:32.750 --> 05:35.360
คุณสามารถคิดได้ดังนี้

05:35.360 --> 05:38.870
ค่าเริ่มต้นสำหรับเหตุการณ์การลากและวางของ JavaScript

05:38.870 --> 05:41.350
คือไม่อนุญาตให้วาง ดังนั้นคุณต้องป้องกันค่าเริ่มต้นในการลาก

05:41.350 --> 05:48.120
overHandler เพื่อบอก JavaScript และเบราว์เซอร์ว่าสำหรับองค์ประกอบนี้ ในกรณีนี้ สำหรับส่วนนี้สำหรับคลาสที่ไม่มีโปรเจกต์นี้

05:48.120 --> 05:54.870
คุณต้องการอนุญาตให้วาง

05:54.870 --> 05:57.920
ดังนั้นหากคุณทำเช่นนี้คือ dragOverHandler

05:57.920 --> 06:01.220
เหตุการณ์ดรอปจะทริกเกอร์เมื่อผู้ใช้ปล่อยมือ

06:01.220 --> 06:05.060
มิฉะนั้นหากผู้ใช้ปล่อย เหตุการณ์ดร็อปจะไม่เริ่มทำงาน

06:05.060 --> 06:07.090
ด้วยเหตุนี้ drop handler

06:07.090 --> 06:12.620
จะดำเนินการในที่สุด เพราะตอนนี้เราปล่อยให้สิ่งนี้เกิดขึ้น

06:12.620 --> 06:16.440
ดังนั้นใน Drop Handler เราสามารถยอมรับเหตุการณ์ได้

06:16.440 --> 06:23.003
และตอนนี้เรามาปลอบใจกัน บันทึกเหตุการณ์ที่นี่เช่นนี้เพื่อดูว่าใช้งานได้หรือไม่

06:23.940 --> 06:28.100
ตอนนี้เราบันทึกทุกอย่าง เราเพิ่มรายการใหม่ที่นี่

06:28.100 --> 06:30.220
และฉันลากสิ่งนี้

06:30.220 --> 06:33.430
ถ้าฉันวางมันไว้ที่นี่ในโปรเจกต์ที่เสร็จแล้ว

06:33.430 --> 06:36.490
คุณจะเห็นว่างานแดร็กกำลังเริ่มขึ้นที่นี่

06:36.490 --> 06:43.050
และนั่นมาจากบรรทัดที่ 236 ซึ่งเป็นบรรทัดนี้ในตัวจัดการดรอป

06:43.050 --> 06:45.950
ตอนนี้ถ้าเราตรวจสอบเหตุการณ์การลากที่นี่ในเบราว์เซอร์

06:45.950 --> 06:47.447
คุณจะเห็นว่าเรามีข้อมูลจำนวนมากที่นี่

06:47.447 --> 06:50.830
และเรายังมีคุณสมบัติการถ่ายโอนข้อมูลนั้นด้วย

06:50.830 --> 06:52.920
และในนั้นคุณจะเห็นเอฟเฟกต์ที่เราอนุญาต

06:52.920 --> 06:57.930
ซึ่งก็คือ Move และคุณจะไม่เห็นอะไรเลยในนั้น

06:57.930 --> 07:04.510
เป็นเพราะข้อมูลถูกล้างไปแล้วหลังจากที่ใส่ลงในคอนโซลแล้ว

07:04.510 --> 07:06.100
และเนื่องจากเราใส่วัตถุไว้ที่นี่

07:06.100 --> 07:10.830
และวัตถุเป็นประเภทการอ้างอิง เราจึงเห็นสแน็ปช็อตล่าสุดที่ข้อมูลสูญหาย

07:10.830 --> 07:13.360
ที่จริงแล้ว ณ เวลาที่เรากำลังทิ้งสิ่งนี้

07:13.360 --> 07:16.910
เราจะสามารถดึงข้อมูลจากการถ่ายโอนข้อมูลได้

07:16.910 --> 07:18.360
และฉันสามารถพิสูจน์สิ่งนี้ให้คุณได้

07:18.360 --> 07:20.960
แน่นอนว่าเราสามารถเข้าถึงการถ่ายโอนข้อมูลได้ง่ายๆ

07:20.960 --> 07:26.580
และคุณมีเมธอด getData และตอนนี้เราต้องการรับข้อมูลด้วยรูปแบบข้อความ/ธรรมดานี้

07:26.580 --> 07:34.560
และนั่นควรเป็นรหัสโปรเจ็กต์ที่เราแนบไปกับแพ็คเกจการถ่ายโอนข้อมูลของเราในรายการโปรเจ็กต์

07:35.060 --> 07:37.179
ดังนั้นหากเราบันทึกสิ่งนี้

07:37.179 --> 07:39.690
และเพิ่มโครงการอีกครั้งที่นี่

07:39.690 --> 07:41.050
และลากสิ่งนี้มาที่นี่

07:41.050 --> 07:46.050
คุณจะเห็นว่านี่คือ ID ของรายการโครงการนี้

07:46.600 --> 07:50.880
เราจะเห็นว่าถ้าเราตรวจสอบเพราะเราเพิ่มที่นี่เป็น

07:50.880 --> 07:55.124
ID, 0 2167 ดูเหมือนว่า ID นี้สำหรับฉัน

07:55.124 --> 07:59.170
ดังนั้นเราจึงโอน ID สำเร็จ

07:59.170 --> 08:00.490
ตอนนี้เราเกือบจะถึงแล้ว

08:00.490 --> 08:04.100
ตอนนี้เราต้องอัปเดตสถานะของเราเบื้องหลังแล้วเรนเดอร์

08:04.100 --> 08:06.163
DUI อีกครั้ง
