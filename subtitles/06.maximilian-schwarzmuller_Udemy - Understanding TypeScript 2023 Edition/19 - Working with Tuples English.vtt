WEBVTT

1
00:00:02.460 --> 00:00:05.590
<v ->So arrays are supported and with numbers, strings,</v>

2
00:00:05.590 --> 00:00:07.620
booleons, objects and arrays.

3
00:00:07.620 --> 00:00:11.400
We got the core values or value types,

4
00:00:11.400 --> 00:00:15.100
JavaScript nos supported in TypeScript,

5
00:00:15.100 --> 00:00:17.884
as you will learn at the example of objects in their arrays,

6
00:00:17.884 --> 00:00:21.520
TypeScript even offers way more functional it's there but

7
00:00:21.520 --> 00:00:22.720
that's a bit more advanced,

8
00:00:22.720 --> 00:00:24.940
which is why we'll have a look at that later,

9
00:00:24.940 --> 00:00:26.810
but even these core types with what

10
00:00:26.810 --> 00:00:30.140
you'll learn in the previous lectures are supported.

11
00:00:30.140 --> 00:00:33.540
Now TypeScript holds as a couple of new concepts,

12
00:00:33.540 --> 00:00:37.840
new types, which we don't know from vanilla Java script for

13
00:00:37.840 --> 00:00:40.300
example, the tuple type.

14
00:00:40.300 --> 00:00:44.360
Now you might know tuples from other programming languages,

15
00:00:44.360 --> 00:00:46.570
JavaScript does not have them.

16
00:00:46.570 --> 00:00:49.570
This is a tuple for example, and you would say,

17
00:00:49.570 --> 00:00:52.290
well this is an array. It is an array,

18
00:00:52.290 --> 00:00:54.520
but it's a fixed length array and

19
00:00:54.520 --> 00:00:58.650
actually not just fixed length but also fixed type.

20
00:00:58.650 --> 00:01:00.730
And where could this be handy?

21
00:01:00.730 --> 00:01:03.350
Let's say here on our, person,

22
00:01:03.350 --> 00:01:07.830
we actually have a number of property, role,

23
00:01:07.830 --> 00:01:11.160
which is an array with exactly two elements,

24
00:01:11.160 --> 00:01:14.184
where the first one is let's say a numeric identifier like

25
00:01:14.184 --> 00:01:18.547
two and the second one is a string identifier and

26
00:01:18.547 --> 00:01:22.765
a human readable description like author.

27
00:01:22.765 --> 00:01:26.496
Now this should always have exactly two elements because

28
00:01:26.496 --> 00:01:30.100
a user or a person in this application which we're writing,

29
00:01:30.100 --> 00:01:32.720
let's say can only have one role and

30
00:01:32.720 --> 00:01:35.185
a role is only made up of two elements.

31
00:01:35.185 --> 00:01:37.400
Of course we could have used an optic here, but

32
00:01:37.400 --> 00:01:39.090
for some reason we want to have an array with

33
00:01:39.090 --> 00:01:41.744
exactly two elements where the first element always is

34
00:01:41.744 --> 00:01:43.118
the numeric identifier and

35
00:01:43.118 --> 00:01:47.570
the second element always is the string identifier or

36
00:01:47.570 --> 00:01:50.220
description or however you want to call it.

37
00:01:50.220 --> 00:01:52.420
Now, if we hover over this TypeScript actually

38
00:01:52.420 --> 00:01:55.730
infers this strange type which we haven't seen before,

39
00:01:55.730 --> 00:01:58.550
In fact, if we dis means TypeScript understands that

40
00:01:58.550 --> 00:02:01.250
we have an array which might hold even strings or

41
00:02:01.250 --> 00:02:03.440
numbers, this a union type and

42
00:02:03.440 --> 00:02:06.710
we'll dive into those later. The key takeaway is to

43
00:02:06.710 --> 00:02:09.950
TypeScript understands that this should be an array with

44
00:02:09.950 --> 00:02:11.668
these types of values.

45
00:02:11.668 --> 00:02:14.580
The downs that is dead We could run this code though,

46
00:02:14.580 --> 00:02:18.780
person role, push, admin.

47
00:02:18.780 --> 00:02:20.250
Now for our application,

48
00:02:20.250 --> 00:02:21.970
this might not make sense because

49
00:02:21.970 --> 00:02:23.960
we know we only need two elements.

50
00:02:23.960 --> 00:02:25.790
Still TypeScript doesn't know that

51
00:02:25.790 --> 00:02:28.963
we only want two elements. We would also be able to

52
00:02:28.963 --> 00:02:33.283
switch person role, the second element with index one to

53
00:02:33.283 --> 00:02:35.200
be a number as well.

54
00:02:35.200 --> 00:02:38.010
This would work because TypeScript only knows that

55
00:02:38.010 --> 00:02:42.360
role should be of type string or number array, and

56
00:02:42.360 --> 00:02:44.700
therefore assigning a number here to

57
00:02:44.700 --> 00:02:46.870
the second element and therefore replacing it with

58
00:02:46.870 --> 00:02:48.680
a number would be allowed because

59
00:02:48.680 --> 00:02:50.886
we're just saying something about the types we generally

60
00:02:50.886 --> 00:02:52.580
can use in there.

61
00:02:52.580 --> 00:02:55.040
We know we want to have exactly that structure.

62
00:02:55.040 --> 00:02:58.094
Two elements, first element number, second element string,

63
00:02:58.094 --> 00:03:01.770
but TypeScript doesn't do that. Well for such a scenario,

64
00:03:01.770 --> 00:03:05.865
a tuple would be perfect. We can tell TypeScript what

65
00:03:05.865 --> 00:03:10.865
role should be, by explicitly setting the type of role.

66
00:03:11.010 --> 00:03:13.230
So here we also have an example where

67
00:03:13.230 --> 00:03:16.600
TypeScript doesn't phototype, but we explicitly want to

68
00:03:16.600 --> 00:03:19.927
override it. Now here we can therefore add an explicit

69
00:03:19.927 --> 00:03:23.041
object type by adding a colon after person,

70
00:03:23.041 --> 00:03:27.023
then the curly braces and then names should be a string,

71
00:03:27.023 --> 00:03:31.180
age should be a number and hobbies should be a string array.

72
00:03:31.180 --> 00:03:33.740
So all as inferred by TypeScript.

73
00:03:33.740 --> 00:03:35.401
So for that, we wouldn't have required,

74
00:03:35.401 --> 00:03:36.827
this explicit assignment and

75
00:03:36.827 --> 00:03:38.789
as you learn it would have been bad.

76
00:03:38.789 --> 00:03:40.470
But now we have a scenario,

77
00:03:40.470 --> 00:03:43.565
where the inference does not work in the way we want,

78
00:03:43.565 --> 00:03:47.510
and, we want to set role to be a tuple.

79
00:03:47.510 --> 00:03:49.730
Now instead of setting a two string array or

80
00:03:49.730 --> 00:03:51.660
number array or using the same type that

81
00:03:51.660 --> 00:03:55.180
wasn't third here earlier, we can now use a special type.

82
00:03:55.180 --> 00:03:56.810
We use square brackets again,

83
00:03:56.810 --> 00:04:01.710
but now inside off the square brackets we add number,

84
00:04:01.710 --> 00:04:03.637
and then a comma and then string.

85
00:04:03.637 --> 00:04:07.340
Now this marks a tuple type here.

86
00:04:07.340 --> 00:04:10.729
A tuple is a special construct, TypeScript understands,

87
00:04:10.729 --> 00:04:13.310
in Java scripted will be a normal array,

88
00:04:13.310 --> 00:04:15.750
but during development with TypeScript,

89
00:04:15.750 --> 00:04:18.190
we'll get errors with code like this here.

90
00:04:18.190 --> 00:04:20.313
Now what do tuples do?

91
00:04:21.620 --> 00:04:23.564
This here, tells TypeScript,

92
00:04:23.564 --> 00:04:27.195
I want to have a special array, with exactly two elements,

93
00:04:27.195 --> 00:04:30.160
because I have exactly two types in there and

94
00:04:30.160 --> 00:04:32.020
the first element should be a number.

95
00:04:32.020 --> 00:04:35.436
The second element should be a string, hence,

96
00:04:35.436 --> 00:04:39.033
if we compile this code here,

97
00:04:40.663 --> 00:04:45.000
I get an error regarding 10 not being assignable as

98
00:04:45.000 --> 00:04:48.346
a type here, because we want to have a string as

99
00:04:48.346 --> 00:04:50.822
a second value and if I then assign 10 as

100
00:04:50.822 --> 00:04:52.660
a second value here,

101
00:04:52.660 --> 00:04:56.544
then I obviously don't follow this rule.

102
00:04:56.544 --> 00:05:01.544
If you comment this out and we compile, this works.

103
00:05:02.240 --> 00:05:06.290
That's a bit strange because why does pushing work here,

104
00:05:06.290 --> 00:05:08.610
because we're all saying that role should have

105
00:05:08.610 --> 00:05:11.901
exactly two elements, so why can we push admin onto the

106
00:05:11.901 --> 00:05:14.980
role array here.

107
00:05:14.980 --> 00:05:19.300
Push actually is an exception which is allowed in tuples.

108
00:05:19.300 --> 00:05:22.410
So unfortunately TypeScript can't catch this error,

109
00:05:22.410 --> 00:05:24.840
but at least it ensures that we're not assigning

110
00:05:24.840 --> 00:05:28.570
a wrong value here, and outside of push,

111
00:05:28.570 --> 00:05:31.500
we also get some support regarding the length.

112
00:05:31.500 --> 00:05:33.671
If we set person that role to a new value.

113
00:05:33.671 --> 00:05:36.420
For example, an empty array is not allowed,

114
00:05:36.420 --> 00:05:39.710
one with exactly the structure we defined up there,

115
00:05:39.710 --> 00:05:43.510
is allowed, If I added an extra element here.

116
00:05:43.510 --> 00:05:45.880
Then we would again get an error.

117
00:05:45.880 --> 00:05:49.300
So the length is enforced if we assign it like this,

118
00:05:49.300 --> 00:05:50.720
but not for a pushing and so on.

119
00:05:50.720 --> 00:05:52.840
This is something you have to be aware of,

120
00:05:52.840 --> 00:05:55.580
but still getting this support and this support,

121
00:05:55.580 --> 00:05:57.899
is pretty nice and if you have a scenario where

122
00:05:57.899 --> 00:06:02.240
you need exactly X amount of values in an array and

123
00:06:02.240 --> 00:06:05.130
you know the type of each value in advance,

124
00:06:05.130 --> 00:06:07.900
then you might want to consider a tuple instead of

125
00:06:07.900 --> 00:06:11.313
an array to get even more strictness into your app to

126
00:06:11.313 --> 00:06:15.230
be even clearer about the type of data you're working with

127
00:06:15.230 --> 00:06:17.543
and the type of data you're expecting.

