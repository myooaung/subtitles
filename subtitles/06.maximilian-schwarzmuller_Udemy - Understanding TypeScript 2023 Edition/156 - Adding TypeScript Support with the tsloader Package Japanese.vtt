WEBVTT

00:02.290 --> 00:03.910
講師：そこで､ WebpackがTypeScriptファイルをどう扱うかを伝えるために､

00:03.910 --> 00:08.830
ここの設定オブジェクトに新しいエントリを追加する必要があります｡

00:08.830 --> 00:11.510
そして､ それがモジュールプロパティです｡ 

00:11.510 --> 00:15.470
また､ モジュールは､ その後設定するためのJavaScriptオブジェクトを取ります｡

00:15.470 --> 00:17.440
モジュールは結局ただのファイルなので､ ここではアプリと同じように､

00:17.440 --> 00:22.940
見つけたファイルをどう扱うかをWebpackに伝えます｡

00:22.940 --> 00:22.940
そのファイルを理解した上で､

00:22.940 --> 00:27.290
そのファイル内のすべてのインポートをどのように処理するかということです｡

00:27.290 --> 00:29.800
では､ Webpackはこれらのファイルをどのように扱うべきでしょうか？

00:29.800 --> 00:33.640
さて､ ここでルールの配列を追加してWebpackに伝えます｡ なぜなら､

00:33.640 --> 00:37.300
すべてのファイルに適用されるべき複数のルールを設定できるからです｡

00:37.300 --> 00:40.690
ここでは1つだけですが､ より複雑なプロジェクトで､

00:40.690 --> 00:44.030
CSSファイルや画像などもWebpackで処理したい場合は､

00:44.030 --> 00:49.220
ファイルの種類ごとにルールを追加することができます｡

00:49.220 --> 00:53.840
また､ 前述したように､ 公式ドキュメントはローダーについてより詳しく知るための素晴らしい場所です｡

00:53.840 --> 00:59.720
最終的には､ さまざまなファイルについてWebpackに教えるために使用するのです｡

00:59.720 --> 01:02.560
そこで､ ここでは､ 実際にそのようなローダーを追加してみます｡ 

01:02.560 --> 01:13.690
ローダーとは､ 特定のファイルをどのように扱うかをWebpackに伝えるためのパッケージです｡

01:13.690 --> 01:16.850
そこで､ JavaScriptのオブジェクトであるルールを追加し､

01:16.850 --> 01:19.720
まず最初にテストプロパティを追加します｡

01:19.720 --> 01:22.950
これは､ Webpackが見つけたファイルに対して､

01:22.950 --> 01:28.550
このルールがそのファイルに適用されるかどうかを調べるために行うテストを記述します｡

01:28.550 --> 01:31.080
そして､ ここでのテストは正規表現である｡ 

01:31.080 --> 01:36.950
そして､ Webpackに.NET Frameworkで終わるファイルを指定したいのです｡

01:36.950 --> 01:36.950
ツが使用されるべき､

01:36.950 --> 01:38.913
またはこのルールによって処理されるべきです｡

01:39.860 --> 01:42.940
ファイルの拡張子をチェックする正規表現では､ ここでバックスラッシュを使用し､

01:42.940 --> 01:47.550
次に. ts､ そしてドル記号｡

01:47.550 --> 01:54.593
これは正規表現で､ Webpackに「末尾に.がついているファイルをチェックしたい」と伝えます｡

01:54.593 --> 01:54.593
ツ｡ 

01:55.560 --> 01:58.810
次に､ Webpackがこれらのファイルに対して行うべきことを指定する必要があり､

01:58.810 --> 02:02.590
ここではuseキーワードでそれを行います｡

02:02.590 --> 02:05.290
そして､ そこで､ Webpackが使用するローダー､

02:05.290 --> 02:07.590
私の場合はts-loaderを指定します｡

02:07.590 --> 02:10.600
そこで､ Webpackに､ 見つけたTypeScriptファイルはTypeScript

02:10.600 --> 02:12.720
loaderが処理するように伝え､ TypeScript

02:12.720 --> 02:16.010
loaderがそのファイルをどう扱うかを知るようにする｡

02:16.010 --> 02:20.330
ts-loaderは自動的にtsconfigを取り込みます｡

02:20.330 --> 02:20.330
json

02:20.330 --> 02:23.430
ファイルを考慮に入れているので､ ここで余計な設定をする必要はありません｡

02:23.430 --> 02:26.050
また､ Webpackがノードモジュールを探さないように､

02:26.050 --> 02:33.773
正規表現でノードモジュールを除外する設定もあります｡

02:35.130 --> 02:38.400
そのため､ モジュール設定の後にもう一つ設定を追加する必要があります｡

02:38.400 --> 02:42.800
それが resolve キーです｡

02:42.800 --> 02:49.750
そこで､ Webpackが見つけたimportにどのファイル拡張子を追加するかを指示します｡

02:49.750 --> 02:52.440
Webpackが勝手に拡張子を追加すると言いましたが､ デフォルトでは.NET

02:52.440 --> 02:56.160
Frameworkを探します｡ jsファイルです｡ 

02:56.160 --> 02:59.220
ここで､ Webpackに.NET Frameworkを探させたいのです｡  のファイルを検索し､

02:59.220 --> 03:01.280
配列に等しい extensions

03:01.280 --> 03:08.390
プロパティを追加して､ Webpack に .

03:08.390 --> 03:08.390
ts

03:08.390 --> 03:10.640
ファイルと同様に. jsファイルです｡ 

03:10.640 --> 03:13.360
そのため､ Webpackは基本的にこのようなファイルを探し､

03:13.360 --> 03:18.723
これらの拡張子を持つすべてのファイルをバンドルし､ インポートすることになります｡

03:19.760 --> 03:26.150
これでとりあえずのセットアップはほぼ完了です｡

03:26.150 --> 03:28.730
この状態でtsconfigに移動し､

03:28.730 --> 03:33.070
sourceMapをtrueに設定する必要があります｡

03:33.070 --> 03:37.130
これはコードのデバッグに役立ちますが､ Webpackはこれにも対応しています｡

03:37.130 --> 03:39.850
あとはエントリーを追加するだけです｡ おそらくここ､

03:39.850 --> 03:41.340
outputの下にある､

03:41.340 --> 03:43.710
devtoolのキーですね｡

03:43.710 --> 03:48.510
そして､ そこでは､ inline-source-mapを文字列で指定する｡

03:48.510 --> 03:53.700
これはWebpackに､ すでに生成されたソースマップがあることを伝え､

03:53.700 --> 04:03.603
それを抽出して､ 基本的に生成するバンドルに正しく配線するように指示します｡

04:05.830 --> 04:08.360
これでWebpackが使えるようになったわけですが､

04:08.360 --> 04:09.823
問題はどのように使うかです｡

04:11.000 --> 04:16.650
簡単な使い方は､ パッケージへ｡  jsonファイルを作成し､ そこにスクリプトを追加してみましょう｡

04:16.650 --> 04:18.440
例えば､ ビルド｡ 

04:18.440 --> 04:21.620
ここのスクリプトの部分で好きな名前をつけることができます｡

04:21.620 --> 04:26.453
そして､ Webpackを実行します｡

04:27.560 --> 04:29.880
distフォルダにも移動して､ 最終的にそこにあるものをすべて削除して､

04:29.880 --> 04:32.993
保存した状態で､ npm run buildを実行して､

04:34.000 --> 04:38.663
うまくいくかどうか見てみましょう｡

04:39.970 --> 04:43.000
そして､ 失敗する...｡ 

04:45.440 --> 04:47.800
ええ､ 単にタイプミスがあっただけで､ devtoolsではなく､

04:47.800 --> 04:51.440
devtool hereであるべきです｡

04:51.440 --> 04:53.830
そこで､ 設定ファイルでこれをdevtoolに変更し､

04:53.830 --> 04:56.143
今度はnpm run buildを繰り返しましょう｡

04:59.500 --> 05:02.620
と､ ここで出る警告は無視していただいて結構です｡ 

05:02.620 --> 05:06.410
distファイルの中に､ バンドルされているjsファイルがあることがわかります｡

05:06.410 --> 05:08.150
この中にあるのは､ すでにかなり読みにくいコードですが､

05:08.150 --> 05:14.060
これは実際にここでminificationが実行されているからです｡

05:14.060 --> 05:18.680
だから､ これは実はすでにこの最適化されたコードでもあるのです｡ 

05:18.680 --> 05:26.120
さて､ ここで様々な構成で作業する方法を見る前に､ 実際にインデックスにアクセスしてみましょう｡

05:26.120 --> 05:26.120
htmlファイルを作成し､

05:26.120 --> 05:30.350
ここでimportを調整し､ bundleを指すようにします｡

05:30.350 --> 05:30.350
js

05:30.350 --> 05:32.220
を作成し､ とりあえずまだ Webpack Dev Server

05:32.220 --> 05:38.480
を使っていないので､ npm start を実行してそのインデックスを表示させましょう｡

05:38.480 --> 05:38.480
htmlファイルを再作成します｡ 

05:38.480 --> 05:40.510
そして今､ このページを再読み込みすると､

05:40.510 --> 05:44.890
これが機能していることがわかります｡

05:44.890 --> 05:46.610
ここに何かを入力すると､

05:46.610 --> 05:49.230
プロジェクトが正常に動作し､

05:49.230 --> 05:56.200
ここにバンドルされているjsファイルがインポートされます｡

05:56.200 --> 05:59.020
そして､ それはすでに強化されています｡ 

05:59.020 --> 06:05.410
ここでは､ これらの不要な http リクエストをすべて回避するバンドル・コードをすでに用意しています｡

06:05.410 --> 06:07.690
ところで､ ソースタブに移動して､ コードをデバッグしたい場合､

06:07.690 --> 06:09.420
このWebpackフォルダが見つかり､

06:09.420 --> 06:15.300
その中にソースフォルダがあり､ そこからTypeScriptファイルに移動することができます｡

06:15.300 --> 06:19.090
例えば､ ここproject-inputで､ gatherUserInputにブレークポイントを設定し､

06:19.090 --> 06:27.680
ボタンを押すとそこで一時停止し､ コードのデバッグができるようにすることもできます｡

06:27.680 --> 06:29.650
そして､ それがソースマップとして入ってくることで､

06:29.650 --> 06:34.050
本当に開発の助けになるし､ 開発者としての生活が楽になるんです｡

06:34.050 --> 06:40.750
このように最適化されたコードを手に入れましたが､ ソースマップのおかげで､ 元のTypeScriptのコードをここでデバッグすることができます｡

06:40.750 --> 06:46.280
このように､ すでに多くの最適化を実現する素晴らしいセットアップが完成しています｡

06:46.280 --> 06:48.440
次に､ Webpack Dev

06:48.440 --> 06:54.440
Serverが含まれていることを確認し､ 2つのワークフロー､ 1つは本番用､

06:54.440 --> 06:58.443
もう1つは開発用にしましょう｡
