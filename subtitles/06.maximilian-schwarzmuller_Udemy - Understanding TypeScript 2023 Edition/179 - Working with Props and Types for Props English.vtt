WEBVTT

1
00:00:02.170 --> 00:00:04.780
<v ->So, the goal is to build a to-do list component</v>

2
00:00:04.780 --> 00:00:06.330
and hence here in the source folder,

3
00:00:06.330 --> 00:00:08.600
I'll add a new sub folder, components,

4
00:00:08.600 --> 00:00:11.280
and in there a "to-doList.tsx" file,

5
00:00:11.280 --> 00:00:13.690
which would hold my to-do list component.

6
00:00:13.690 --> 00:00:15.370
Now, to build a react component, we need

7
00:00:15.370 --> 00:00:17.030
to import React from "react"

8
00:00:17.030 --> 00:00:20.250
otherwise JXS will not work in this file.

9
00:00:20.250 --> 00:00:22.820
Then I create my to-do list constant,

10
00:00:22.820 --> 00:00:24.530
which stores an arrow function

11
00:00:24.530 --> 00:00:26.990
and of course this doesn't have to be an arrow function,

12
00:00:26.990 --> 00:00:30.320
you could also use a function with the function keyword.

13
00:00:30.320 --> 00:00:33.160
Now we'll export this.

14
00:00:33.160 --> 00:00:36.500
Now, let's use our extra typescript features now,

15
00:00:36.500 --> 00:00:39.370
and let's set the type of this to react.fc

16
00:00:39.370 --> 00:00:42.010
to indicate that this should not be a regular function,

17
00:00:42.010 --> 00:00:43.950
but a functional component.

18
00:00:43.950 --> 00:00:46.920
Hence, we get an error because we are not returning

19
00:00:46.920 --> 00:00:49.790
something that qualifies as a react element.

20
00:00:49.790 --> 00:00:53.250
So in here, we should return, let's say an unordered list.

21
00:00:53.250 --> 00:00:54.850
Because I want to render a list here,

22
00:00:54.850 --> 00:00:58.000
returning an unordered list for now makes sense.

23
00:00:58.000 --> 00:01:02.740
Now, on that unordered list, I want to output list items.

24
00:01:02.740 --> 00:01:07.230
So, in here, we could expect to get our to-dos,

25
00:01:07.230 --> 00:01:09.240
and that's an array, and in an array

26
00:01:09.240 --> 00:01:11.690
we have an object where every item has an ID.

27
00:01:11.690 --> 00:01:15.627
Let's say t1 for to-do one and a text like

28
00:01:15.627 --> 00:01:18.100
"Finish the course."

29
00:01:18.100 --> 00:01:18.933
This is only one item,

30
00:01:18.933 --> 00:01:20.800
but of course you could have multiple such objects

31
00:01:20.800 --> 00:01:22.010
in this array.

32
00:01:22.010 --> 00:01:24.620
In here in our list, we can then dynamically output

33
00:01:24.620 --> 00:01:29.620
to-dos and map them into a list of list items.

34
00:01:30.250 --> 00:01:32.930
So here, we go through all the to-dos,

35
00:01:32.930 --> 00:01:35.070
this is a built-in JavaScript function, of course,

36
00:01:35.070 --> 00:01:37.740
the map function, and we return a list item

37
00:01:37.740 --> 00:01:41.530
for every element in this array and in that list item,

38
00:01:41.530 --> 00:01:45.570
I set "to-do.text" as content on the list item

39
00:01:45.570 --> 00:01:47.870
and add this special key prop,

40
00:01:47.870 --> 00:01:49.620
which React actually wants

41
00:01:49.620 --> 00:01:51.980
on repeated elements sitting next to each other.

42
00:01:51.980 --> 00:01:54.130
Here, we should pick something unique

43
00:01:54.130 --> 00:01:57.710
and the ID should qualify as a unique identifier.

44
00:01:57.710 --> 00:02:00.470
With that, we're rendering a list of to-dos.

45
00:02:00.470 --> 00:02:02.860
Let's now integrate the to-do list component

46
00:02:02.860 --> 00:02:05.520
into the app component and for this we can

47
00:02:05.520 --> 00:02:06.930
of course go to the app component,

48
00:02:06.930 --> 00:02:11.530
import "TodoList" from "./components/TodoList" like this,

49
00:02:11.530 --> 00:02:14.350
the ".tsx" extension will be added automatically

50
00:02:14.350 --> 00:02:17.160
by the build workflow we're using under the hood here.

51
00:02:17.160 --> 00:02:18.850
And then here inside of our div,

52
00:02:18.850 --> 00:02:21.440
we can render "TodoList" like that.

53
00:02:21.440 --> 00:02:24.190
If we now save this and we go back to the running page,

54
00:02:24.190 --> 00:02:25.870
we see this one to-do here.

55
00:02:25.870 --> 00:02:29.350
Styling is awful and we can add better styling later,

56
00:02:29.350 --> 00:02:31.680
but for the moment, that should be fine.

57
00:02:31.680 --> 00:02:35.620
Now, this however is not really realistic.

58
00:02:35.620 --> 00:02:37.950
When we're building this to-do list app,

59
00:02:37.950 --> 00:02:40.063
I later want to be able to add new to-dos

60
00:02:40.063 --> 00:02:42.920
with a separate component which we don't have yet.

61
00:02:42.920 --> 00:02:45.570
And we will probably manage the to-dos here

62
00:02:45.570 --> 00:02:48.810
in this app component because here in this place,

63
00:02:48.810 --> 00:02:53.020
we'll have a component that adds to-dos

64
00:02:53.020 --> 00:02:55.280
and that component will be able to talk back

65
00:02:55.280 --> 00:02:56.690
to this app component.

66
00:02:56.690 --> 00:02:59.650
In here, we then manage our array of to-dos

67
00:02:59.650 --> 00:03:01.510
and we add to-dos to that array

68
00:03:01.510 --> 00:03:04.220
or we delete to-dos from that array.

69
00:03:04.220 --> 00:03:06.930
To to-do list we will then pass that array.

70
00:03:06.930 --> 00:03:09.270
So, even though we're not managing it yet,

71
00:03:09.270 --> 00:03:11.660
we would probably have that "todos" array

72
00:03:11.660 --> 00:03:15.010
not in the to-do list, but in the app component.

73
00:03:15.010 --> 00:03:16.740
That's more realistic that this array

74
00:03:16.740 --> 00:03:20.093
will later end up here so we can already move it here.

75
00:03:20.930 --> 00:03:23.600
Now, we need to pass it to "TodoList."

76
00:03:23.600 --> 00:03:25.640
For this, of course, we can use props.

77
00:03:25.640 --> 00:03:28.370
So on the to-do list, you could have an items prop,

78
00:03:28.370 --> 00:03:30.350
the name is of course up to us because

79
00:03:30.350 --> 00:03:32.100
we are defining this component,

80
00:03:32.100 --> 00:03:35.010
we can define how its prop should be named.

81
00:03:35.010 --> 00:03:37.820
We can feed in our "todos" array.

82
00:03:37.820 --> 00:03:40.650
Now, we already see that the IDE doesn't like this

83
00:03:40.650 --> 00:03:45.400
and if I try to save this, we also got a compilation error.

84
00:03:45.400 --> 00:03:47.830
We got a compilation error because property "items"

85
00:03:47.830 --> 00:03:50.440
does not exist on type whatever.

86
00:03:50.440 --> 00:03:52.070
So it basically does not exist

87
00:03:52.070 --> 00:03:55.300
on this intersection type here which in the end

88
00:03:55.300 --> 00:03:59.470
defines the structure of the props received by "TodoList."

89
00:03:59.470 --> 00:04:02.110
Because when using typescript with React,

90
00:04:02.110 --> 00:04:05.250
you have to be clear about the types you're working with.

91
00:04:05.250 --> 00:04:08.360
That does not just mean that you tell typescript

92
00:04:08.360 --> 00:04:11.020
that this is a special kind of function, no,

93
00:04:11.020 --> 00:04:14.860
it also means that if you rely on props in some component,

94
00:04:14.860 --> 00:04:17.420
you tell typescript how these props should look like

95
00:04:17.420 --> 00:04:19.400
how they are structured.

96
00:04:19.400 --> 00:04:23.530
So in the to-do list component, we receive props here,

97
00:04:23.530 --> 00:04:26.200
right, that's regular React.

98
00:04:26.200 --> 00:04:30.323
And on the props we probably have our item's property.

99
00:04:31.420 --> 00:04:33.430
So we have a prop named "items"

100
00:04:33.430 --> 00:04:35.067
and that is indeed what I said up here:

101
00:04:35.067 --> 00:04:37.140
"I have this items prop."

102
00:04:37.140 --> 00:04:39.503
The problem now is this technically would work

103
00:04:39.503 --> 00:04:41.950
but typescript does not abort yet.

104
00:04:41.950 --> 00:04:45.063
We didn't really tell typescript that our prop should have

105
00:04:45.063 --> 00:04:46.913
an "items" property here.

106
00:04:47.840 --> 00:04:50.510
To tell it, we can use the fact that

107
00:04:50.510 --> 00:04:52.170
this function component type here

108
00:04:52.170 --> 00:04:54.250
is actually a generic type.

109
00:04:54.250 --> 00:04:58.132
A generic type where we can define all extra props

110
00:04:58.132 --> 00:05:00.710
besides the default prop of children,

111
00:05:00.710 --> 00:05:03.670
which every component has, which we expect here.

112
00:05:03.670 --> 00:05:06.170
So we can add out angled brackets here

113
00:05:06.170 --> 00:05:09.670
and add our object that describes the structure

114
00:05:09.670 --> 00:05:12.350
of this "props" object we're getting here

115
00:05:12.350 --> 00:05:15.120
or, to keep our code leaner, we do this in

116
00:05:15.120 --> 00:05:18.260
an extra interface here and that's totally optional.

117
00:05:18.260 --> 00:05:20.510
So here we could have out to-do list props

118
00:05:20.510 --> 00:05:23.380
and this describes how our props look like.

119
00:05:23.380 --> 00:05:26.120
And here, I expect to get an "items" key,

120
00:05:26.120 --> 00:05:30.020
where we have an array of objects where every object

121
00:05:30.020 --> 00:05:32.850
has an ID, which is a string, and has a text,

122
00:05:32.850 --> 00:05:34.370
which is a string.

123
00:05:34.370 --> 00:05:36.070
That's the data we're managing here.

124
00:05:36.070 --> 00:05:38.940
We have an array of objects with an ID string

125
00:05:38.940 --> 00:05:40.700
and text string.

126
00:05:40.700 --> 00:05:42.670
That is what I expect to get here is "props"

127
00:05:42.670 --> 00:05:45.040
an array of such objects and if we're here,

128
00:05:45.040 --> 00:05:48.640
we can now point at this to-do list props interface

129
00:05:48.640 --> 00:05:52.145
and now everything is fine. Now typescript understands

130
00:05:52.145 --> 00:05:55.000
that here, we will get props,

131
00:05:55.000 --> 00:05:56.920
where we will have an items prop

132
00:05:56.920 --> 00:05:58.870
and that this items prop will be an array

133
00:05:58.870 --> 00:05:59.850
where we have an ID key

134
00:05:59.850 --> 00:06:02.390
and a text key on every array element.

135
00:06:02.390 --> 00:06:04.188
So now if we save this, it compiles,

136
00:06:04.188 --> 00:06:06.830
and we get the working output again.

137
00:06:06.830 --> 00:06:10.000
So again, this is typescript being used with React.

138
00:06:10.000 --> 00:06:13.490
We don't just use it to tell React or to tell typescript,

139
00:06:13.490 --> 00:06:15.130
that this is a functional component,

140
00:06:15.130 --> 00:06:19.060
but also about the props this component eventually gets

141
00:06:19.060 --> 00:06:21.165
and this helps us a lot with type safety.

142
00:06:21.165 --> 00:06:23.330
It avoids that I here accidentally

143
00:06:23.330 --> 00:06:24.910
think that it's named "todos."

144
00:06:24.910 --> 00:06:27.160
No, this is not supported, we get an error.

145
00:06:27.160 --> 00:06:28.400
It is items.

146
00:06:28.400 --> 00:06:30.670
You all will see them getting auto completion here.

147
00:06:30.670 --> 00:06:34.420
So coding gets a lot easier when working with typescript

148
00:06:34.420 --> 00:06:36.640
here. And that of course is the whole advantage of

149
00:06:36.640 --> 00:06:39.930
typescript: it simplifies coding, it avoids unnecessary

150
00:06:39.930 --> 00:06:44.120
mistakes and as you can see, it also does so in a react app.

151
00:06:44.120 --> 00:06:46.080
Of course, we're not finished, though.

152
00:06:46.080 --> 00:06:49.660
At the moment, our to-dos here never change

153
00:06:49.660 --> 00:06:51.000
and I want to change that,

154
00:06:51.000 --> 00:06:53.070
I want to have a component which allows us

155
00:06:53.070 --> 00:06:54.430
to add new to-dos.

156
00:06:54.430 --> 00:06:55.913
So let's work on that next.

