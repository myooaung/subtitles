WEBVTT

00:02.120 --> 00:02.953
Người hướng dẫn: Vì vậy,

00:02.953 --> 00:04.960
đó là một tập hợp các lựa chọn quan trọng đầu tiên.

00:04.960 --> 00:07.520
Bây giờ, hãy đi sâu vào các tùy chọn nghiêm

00:07.520 --> 00:09.860
ngặt này bởi vì chúng khá thú vị.

00:09.860 --> 00:12.150
Có tùy chọn đúng nghiêm ngặt này và thực tế

00:12.150 --> 00:13.590
những gì tùy chọn này thực hiện

00:13.590 --> 00:16.750
là nó cho phép tất cả các tùy chọn kiểm tra loại nghiêm ngặt,

00:16.750 --> 00:18.830
do đó, việc đặt tùy chọn này giống như thể

00:18.830 --> 00:22.110
bạn đã đặt tất cả các tùy chọn này một cách hiệu quả.

00:22.110 --> 00:24.830
Vì vậy, bạn có thể đặt từng tùy chọn này

00:24.830 --> 00:27.110
hoặc chỉ đặt tùy chọn này.

00:27.110 --> 00:29.510
Tất nhiên, bạn muốn đặt các tùy chọn riêng

00:29.510 --> 00:33.020
lẻ nếu bạn muốn đặt một số tùy chọn thành false.

00:33.020 --> 00:34.790
Vì nếu không thì tất cả chúng đều được đặt thành đúng.

00:34.790 --> 00:36.520
Nếu bạn muốn tất cả chúng được đặt thành

00:36.520 --> 00:39.290
true thì chỉ sử dụng tùy chọn này tất nhiên sẽ ngắn hơn.

00:39.290 --> 00:41.360
Bây giờ những tùy chọn này làm gì?

00:41.360 --> 00:43.213
Hãy bắt đầu với noImplicitAny.

00:44.282 --> 00:47.410
noImplicitAny là một tùy chọn khá thú vị giúp chúng

00:47.410 --> 00:49.180
ta viết code tốt hơn.

00:49.180 --> 00:51.370
Hãy chuyển đến tệp phân tích của chúng

00:51.370 --> 00:53.963
ta tại đây và ở đó hãy thêm một chức năng, sendAnalytics,

00:55.270 --> 00:58.070
chẳng hạn như có một tùy chọn dữ liệu và ở đó chúng ta

00:58.070 --> 01:01.010
có thể gửi tệp này đến một máy chủ nhưng ở đây tôi chỉ ghi

01:01.010 --> 01:03.430
nhật ký bảng điều khiển.

01:03.430 --> 01:07.500
Sau đó, tôi gọi sendAnalytics với dữ liệu, cũng

01:07.500 --> 01:08.920
như với chuỗi.

01:08.920 --> 01:11.080
Bây giờ, khi bạn thấy IDE của tôi đã phàn nàn

01:11.080 --> 01:13.160
ở đây và trình biên dịch TypeScript cũng

01:13.160 --> 01:14.960
vậy, vì cả hai tất nhiên được kết nối

01:14.960 --> 01:17.040
nếu tôi cố gắng biên dịch cái này.

01:17.040 --> 01:20.070
Dữ liệu tham số hoàn toàn có một loại bất kỳ.

01:20.070 --> 01:21.350
Vì vậy, điều này dường như

01:21.350 --> 01:23.940
có liên quan đến tùy chọn noImplicitAny này.

01:23.940 --> 01:27.150
Thật vậy, nếu tôi đặt tùy chọn này thành sai, vì vậy nếu tôi đặt

01:27.150 --> 01:29.300
tất cả các tùy chọn nghiêm ngặt thành đúng

01:29.300 --> 01:31.521
nhưng tôi đặt tùy chọn này thành sai, điều

01:31.521 --> 01:33.810
mà tôi có thể làm, thì lỗi này sẽ biến mất.

01:33.810 --> 01:37.140
Cả trong IDE và khi chúng tôi biên dịch mã.

01:37.140 --> 01:38.730
Vì vậy, những gì hiện tùy chọn này làm gì?

01:38.730 --> 01:41.440
Nó đảm bảo và tôi sẽ bình luận lại để

01:41.440 --> 01:44.210
bật lại vì nghiêm ngặt đúng, nó đảm

01:44.210 --> 01:47.050
bảo rằng chúng ta phải rõ ràng về các

01:47.050 --> 01:49.410
tham số của mình, về các giá trị

01:49.410 --> 01:53.020
mà chúng ta đang làm việc với mã của mình.

01:53.020 --> 01:56.600
Ở đây, chúng tôi không cung cấp cho TypeScript bất kỳ thông tin

01:56.600 --> 01:59.930
nào về loại dữ liệu mà chúng tôi sẽ lấy làm tham số ở đây.

01:59.930 --> 02:01.320
Và chúng ta nên.

02:01.320 --> 02:03.800
Tất nhiên, nếu TypeScript có thể suy ra điều

02:03.800 --> 02:05.360
này thì không sao, nhưng ở

02:05.360 --> 02:08.770
đây làm thế nào TypeScript có thể suy ra nó từ dòng này, xin

02:08.770 --> 02:11.470
lưu ý rằng chức năng này được khai báo trước khi

02:11.470 --> 02:12.950
tệp này thực thi.

02:12.950 --> 02:15.080
Vì vậy, tại thời điểm chức năng được

02:15.080 --> 02:18.380
tạo, không có cơ hội biết điều gì sẽ kết thúc ở đó.

02:18.380 --> 02:20.100
Vì vậy, ở đây chúng ta có thể khắc phục

02:20.100 --> 02:22.570
lỗi này bằng cách chỉ cần khai báo loại và rõ ràng

02:22.570 --> 02:24.253
về loại chúng ta sử dụng ở đó.

02:25.100 --> 02:29.530
Bây giờ xin lưu ý rằng nếu bạn có một biến được ghi nhật ký, khi

02:29.530 --> 02:32.650
bạn đặt giá trị này thành đúng ở đây, bạn sẽ

02:32.650 --> 02:34.720
không gặp lỗi về khai báo này

02:34.720 --> 02:37.670
mặc dù nó cũng có loại bất kỳ mặc định.

02:37.670 --> 02:39.250
Đối với các biến này là được.

02:39.250 --> 02:40.910
Đối với các thông số thì không ổn.

02:40.910 --> 02:42.480
Tại sao lại ổn cho các biến?

02:42.480 --> 02:44.370
Bởi vì những gì TypeScript làm cho các

02:44.370 --> 02:45.940
biến, những gì có thể cho các biến,

02:45.940 --> 02:47.040
những gì không thể ở đây

02:47.040 --> 02:48.880
vì hàm được tạo trước.

02:48.880 --> 02:52.490
Ở đây TypeScript có thể theo dõi các giá trị mà bạn chỉ định.

02:52.490 --> 02:54.650
Bạn thấy đấy, được rồi, tôi đã

02:54.650 --> 02:56.720
đăng nhập ở đây như thế này,

02:56.720 --> 02:58.573
bây giờ tôi đặt nó thành true,

02:59.430 --> 03:04.430
do đó, sau đó, nếu tôi đăng nhập bảng điều khiển ở đây, thì đó là một

03:06.700 --> 03:08.030
boolean.

03:08.030 --> 03:10.300
Vì vậy, TypeScript ở đây có thể hiểu

03:10.300 --> 03:11.893
được luồng mã của bạn và

03:11.893 --> 03:14.320
do đó, bạn không cần phải chính xác về

03:14.320 --> 03:15.430
loại ở đây.

03:15.430 --> 03:18.020
Tất nhiên, bạn muốn chính xác nếu muốn tránh việc

03:18.020 --> 03:20.310
bạn có thể tự do gán giá trị mới, điều mà bạn

03:20.310 --> 03:22.940
có thể thực hiện ở đây vì nó thuộc loại bất kỳ.

03:22.940 --> 03:25.700
Vì vậy, bạn vẫn muốn chỉ định một loại để tránh điều này,

03:25.700 --> 03:27.680
nhưng TypeScript ít nhất có thể tìm hiểu

03:27.680 --> 03:29.490
xem mã bạn đang gọi có hoạt động với loại

03:29.490 --> 03:31.410
mà nó hiện đang giữ hay không.

03:31.410 --> 03:32.410
Đó không phải là trường

03:32.410 --> 03:35.360
hợp ở đây bởi vì hàm được xác định trước khi bạn gọi nó, và do đó,

03:35.360 --> 03:37.800
TypeScript sẽ không thay đổi việc biết liệu những

03:37.800 --> 03:39.570
gì bạn chuyển vào đó có thể được sử dụng

03:39.570 --> 03:41.393
bên trong hàm hay không.

03:43.280 --> 03:46.020
nghiêm ngặtNullChecks không bao giờ là tùy chọn quan trọng.

03:46.020 --> 03:48.520
Nó thực sự liên quan đến lựa chọn nút của chúng tôi mà chúng

03:48.520 --> 03:49.410
tôi có ở đây.

03:49.410 --> 03:51.820
Hãy nhớ rằng tôi phải thêm dấu chấm than này vào đây

03:51.820 --> 03:52.670
để nó hoạt động.

03:52.670 --> 03:54.380
Nếu không, tôi sẽ gặp lỗi.

03:54.380 --> 03:56.220
Giờ đây, chúng ta cũng có thể loại

03:56.220 --> 03:58.430
bỏ lỗi đó mà không cần thêm dấu chấm than

03:58.430 --> 04:02.090
bằng cách thiết lậpstrictNullChecks thành false.

04:02.090 --> 04:04.200
Vì vậy, hãy làm điều đó ở đây và hãy lưu nó.

04:04.200 --> 04:07.860
Và như bạn thấy, lỗi này đã biến mất ở đây.

04:07.860 --> 04:10.120
Và tôi có thể biên dịch tất cả các tệp.

04:10.120 --> 04:12.340
Bây giờ, nghiêm ngặtNullChecks làm gì?

04:12.340 --> 04:16.160
Họ nói với TypeScript là đẹp, rất nghiêm ngặt

04:16.160 --> 04:19.410
về cách bạn truy cập và làm việc với các giá

04:19.410 --> 04:22.530
trị có khả năng chứa giá trị null.

04:22.530 --> 04:24.850
Và nút ở đây có thể là null.

04:24.850 --> 04:29.210
Không phải lúc nào nó cũng chỉ vào một phần tử nút.

04:29.210 --> 04:31.390
Không phải lúc nào nó cũng chỉ vào một phần

04:31.390 --> 04:34.220
tử như vậy bởi vì mặc dù bạn có một bộ chọn như vậy ở đây,

04:34.220 --> 04:36.900
nhưng một nút có thể không tồn tại trên trang mà tập

04:36.900 --> 04:38.490
lệnh này chạy trên đó.

04:38.490 --> 04:40.840
Và do đó, TypeScript không thể biết

04:40.840 --> 04:43.790
được vì nó không đi sâu vào tệp html của bạn và

04:43.790 --> 04:44.900
xem xét điều đó.

04:44.900 --> 04:48.240
Nó không thể nói liệu điều này sẽ thành công hay không.

04:48.240 --> 04:53.130
Và nếu điều này không trả về một con trỏ và một nút null, thì nó sẽ trả

04:53.130 --> 04:56.650
về null, không được xác định chính xác, nhưng điều

04:56.650 --> 04:59.090
đó được xử lý bình đẳng ở đây.

04:59.090 --> 05:01.610
Do đó, nút đó có thể giữ giá trị null và

05:01.610 --> 05:03.530
do đó mã này có thể bị lỗi.

05:03.530 --> 05:06.610
Thật vậy, nếu tôi nhận xét nút này ở đây, nếu bây giờ

05:06.610 --> 05:08.480
tôi biên dịch mọi thứ thì nó hoạt

05:08.480 --> 05:10.733
động vì tôi đã tắt kiểm tra null.

05:12.000 --> 05:14.100
Nhưng do đó, hiện tại tôi gặp lỗi thời gian

05:14.100 --> 05:16.210
chạy vì tôi không thể gọi trình xử lý sự kiện,

05:16.210 --> 05:18.230
addEventListener, trên null.

05:18.230 --> 05:20.970
Và tôi nhận được null ở đây vì tôi không có nút.

05:20.970 --> 05:23.110
Bây giờ, đây là một sai lầm mà chúng ta

05:23.110 --> 05:26.760
có thể tránh bằng cách đặtstrictNullChecks thành true.

05:26.760 --> 05:30.340
Và điều đó sẽ tự động được đặt nếu chúng tôi đặt nghiêm ngặt thành đúng.

05:30.340 --> 05:34.450
Trường hợp TypeScript dự đoán rằng điều này có thể xảy

05:34.450 --> 05:38.600
ra và do đó, buộc chúng tôi phải giải quyết vấn đề đó.

05:38.600 --> 05:40.640
Bây giờ, một cách giải quyết rẻ tiền

05:40.640 --> 05:42.820
là toán tử dấu chấm than này ở đây.

05:42.820 --> 05:46.020
Điều này cho TypeScript biết rằng bạn,

05:46.020 --> 05:48.360
nhà phát triển, biết rằng nút

05:48.360 --> 05:53.360
này tồn tại hoặc thao tác này sẽ mang lại giá trị khác null.

05:53.710 --> 05:55.830
Bây giờ có thể bạn làm, bạn chắc

05:55.830 --> 05:58.990
chắn làm nếu bạn biết rằng bạn đang làm việc với

05:58.990 --> 06:00.430
mã HTML và có một nút ở

06:00.430 --> 06:03.310
đây, rằng bộ chọn này ở đây sẽ hoạt động.

06:03.310 --> 06:05.610
Vì vậy, sẽ tốt hơn nếu sử dụng dấu chấm than trong

06:05.610 --> 06:06.623
trường hợp này.

06:07.600 --> 06:09.040
Nếu bạn có một kịch bản khác

06:09.040 --> 06:11.120
mà bạn không biết chắc liệu nó có hoạt

06:11.120 --> 06:13.050
động hay không và bạn chỉ hy vọng rằng

06:13.050 --> 06:14.170
nó hoạt động, thì tốt

06:14.170 --> 06:18.210
hơn hết là bạn chỉ cần bọc mã có thể bị lỗi trong kiểm tra if, mã này cũng

06:18.210 --> 06:21.570
sẽ có trong thời gian chạy. , tất nhiên rồi.

06:21.570 --> 06:24.960
Bạn có thể chỉ cần kiểm tra xem nút có đúng ở đây hay không, nút này sẽ không

06:24.960 --> 06:27.510
đúng nếu nút đó không có giá trị hoặc không xác định.

06:27.510 --> 06:30.060
Và di chuyển mã đó vào đây nếu kiểm tra ở đây.

06:30.060 --> 06:32.470
Bây giờ, ngay cả khi không có dấu chấm

06:32.470 --> 06:35.810
than, trong chế độstrictNullChecks, chúng tôi

06:35.810 --> 06:37.600
không gặp lỗi vì TypeScript

06:37.600 --> 06:39.750
hiểu rằng mã này nằm bên trong câu

06:39.750 --> 06:41.991
lệnh if này và câu lệnh if này đảm bảo

06:41.991 --> 06:46.310
rằng nút đó không rỗng và điều này sẽ không bị lỗi.

06:46.310 --> 06:49.310
Vì vậy, đây thực sự có thể là cách giải quyết sạch hơn.

06:49.310 --> 06:51.060
Tuy nhiên, tất nhiên, để lưu

06:51.060 --> 06:54.350
mã, nếu bạn biết chắc chắn rằng có thứ gì đó tồn tại, sử

06:54.350 --> 06:56.550
dụng dấu chấm than sẽ ngắn hơn và là một

06:56.550 --> 06:58.320
lựa chọn hoàn toàn tốt.

06:58.320 --> 07:00.450
Ở đây mình nói both để chúng ta thấy cả 2,

07:00.450 --> 07:02.450
tất nhiên bạn chỉ cần 1 trong 2 cái, hoặc

07:02.450 --> 07:04.520
là dấu if, hoặc là dấu chấm than.

07:04.520 --> 07:07.680
nghiêm ngặtFunctionTypes ở đây là một chút

07:07.680 --> 07:12.010
cài đặt nâng cao hơn để nắm bắt một số hộp thích hợp mà bạn có

07:12.010 --> 07:14.830
thể không có trong nhiều ứng dụng.

07:14.830 --> 07:17.340
Nó liên quan đến các loại chức năng mà bạn có thể

07:17.340 --> 07:18.380
đang thiết lập.

07:18.380 --> 07:20.650
Vì vậy, không phải nhập bên trong các hàm,

07:20.650 --> 07:23.690
nhưng nếu bạn xác định cách một hàm sẽ trông như thế nào

07:23.690 --> 07:26.220
liên quan đến các tham số và giá trị trả về của

07:26.220 --> 07:27.840
nó, đồng thời bạn tạo một loại

07:27.840 --> 07:29.990
hàm như vậy mà bạn đã học trong mô-đun

07:29.990 --> 07:32.650
cơ bản, thì bạn có thể giới thiệu hộp nếu bạn làm

07:32.650 --> 07:35.560
việc với các lớp và thừa kế, mà chúng ta chưa học, chưa

07:35.560 --> 07:36.950
sử dụng, và do đó, bây giờ

07:36.950 --> 07:38.210
chúng ta hãy bỏ qua điều

07:38.210 --> 07:39.683
này.

07:40.578 --> 07:43.630
nghiêm ngặtBindCallApply, điều đó có thể hữu ích

07:43.630 --> 07:46.840
nếu bạn làm việc với liên kết, gọi hoặc áp dụng.

07:46.840 --> 07:49.680
Đối với điều đó, chúng ta hãy nhanh chóng xem một ví dụ.

07:49.680 --> 07:52.040
Ở đây chúng tôi có nút và chức năng của chúng tôi ở đó.

07:52.040 --> 07:57.040
Bây giờ, giả sử đây sẽ là một hàm mà chúng ta xác định ở đây bằng

07:57.780 --> 08:01.100
từ khóa hàm hoặc dưới dạng một hàm lỗi.

08:01.100 --> 08:03.650
Không thành vấn đề, tôi sẽ sử dụng từ khóa chức năng ở đây.

08:04.731 --> 08:09.731
clickHandler, và trong đó tôi console. đã nhấp vào nhật ký.

08:11.960 --> 08:13.810
Và bây giờ ở đây chúng tôi trỏ đến clickHandler

08:13.810 --> 08:15.560
và vì lý do nào đó, chúng tôi muốn đảm bảo

08:15.560 --> 08:17.670
rằng khi điều này thực thi, chúng tôi chuyển

08:17.670 --> 08:19.330
vào các đối số nhất định hoặc chúng

08:19.330 --> 08:22.780
tôi đặt từ khóa this trong đó thành một giá trị nhất định.

08:22.780 --> 08:26.480
Bây giờ, giả sử ở đây chúng ta mong đợi một đối số thông báo, đối

08:26.480 --> 08:28.110
số này phải là một chuỗi.

08:28.110 --> 08:32.110
Và chúng tôi cũng muốn xuất cái này ở đây.

08:32.110 --> 08:34.400
Bây giờ, vì clickHandler được chuyển đến addEventListener

08:34.400 --> 08:36.010
như vậy nên về cơ bản, trình duyệt

08:36.010 --> 08:39.080
sẽ thực thi điều này cho chúng ta, nếu chúng ta muốn định cấu hình

08:39.080 --> 08:41.070
trước các đối số sẽ được truyền vào, chúng

08:41.070 --> 08:43.570
ta có thể sử dụng liên kết.

08:43.570 --> 08:47.000
Và liên kết, như một đối số đầu tiên, lấy những gì chúng

08:47.000 --> 08:49.320
ta muốn liên kết từ khóa this với.

08:49.320 --> 08:51.650
Và ở đây, chúng ta có thể nói rằng điều đó không quan trọng

08:51.650 --> 08:53.580
với chúng ta bởi vì chúng ta không sử dụng this

08:53.580 --> 08:55.930
trong hàm, vì vậy chúng ta ràng buộc nó thành null.

08:55.930 --> 08:57.700
Bây giờ bạn thấy ở đây tôi nhận được một lỗi.

08:57.700 --> 09:00.610
Tôi gặp một lỗi có thể tránh được nếu

09:00.610 --> 09:04.613
tôi đặtstrictBindCallApply thành false.

09:07.040 --> 09:08.680
Bây giờ bạn thấy lỗi đã biến mất.

09:08.680 --> 09:10.501
Vì vậy, bây giờ tùy chọn này làm gì?

09:10.501 --> 09:14.180
Về cơ bản, nó kiểm tra chức năng nào bạn đang gọi liên

09:14.180 --> 09:16.020
kết, gọi hoặc áp dụng.

09:16.020 --> 09:20.080
Và nó kiểm tra xem những gì bạn đang thiết lập ở đây có hợp lý không.

09:20.080 --> 09:23.440
Và ở đây TypeScript thấy chúng tôi muốn có một đối số, chúng tôi

09:23.440 --> 09:25.450
muốn tham số trong clickHandler.

09:25.450 --> 09:28.260
Với liên kết, mặc dù vậy, chúng tôi không định cấu hình điều đó.

09:28.260 --> 09:30.600
Và do đó, ở đây chúng tôi nhận được một lỗi.

09:30.600 --> 09:32.180
Nếu tôi đặt điều này trở lại thành

09:32.180 --> 09:34.000
đúng hoặc tôi chỉ nhận xét nó vì tất nhiên,

09:34.000 --> 09:36.230
nó được đặt thành đúng theo mặc định bằng cách

09:36.230 --> 09:37.870
đặt nghiêm ngặt thành đúng, do đó,

09:37.870 --> 09:39.790
chúng tôi sẽ gặp lại lỗi.

09:39.790 --> 09:42.350
Bây giờ, nếu chúng tôi không mong đợi một đối số ở

09:42.350 --> 09:44.750
đây, thì bạn sẽ thấy lỗi sẽ biến mất nếu chúng

09:44.750 --> 09:46.200
tôi chỉ xóa thông báo, bởi vì

09:46.200 --> 09:48.140
TypeScript hiểu mã của chúng tôi và thấy

09:48.140 --> 09:50.660
rằng bạn không chuyển bất kỳ đối số nào cho phương

09:50.660 --> 09:52.580
thức đó hoặc cho hàm này bởi vì nó không

09:52.580 --> 09:54.760
mất bất kỳ, vì vậy đó là tốt.

09:54.760 --> 09:57.420
Nhưng tất nhiên, ở đây chúng tôi muốn một cái nên chúng tôi gặp lỗi.

09:57.420 --> 10:00.880
Giải pháp là cung cấp đối số thứ hai này ở đây,

10:00.880 --> 10:04.350
đây là đối số đầu tiên bạn muốn chuyển vào.

10:04.350 --> 10:06.290
Bây giờ TypeScript thực sự thông minh ở đây.

10:06.290 --> 10:08.120
Và ví dụ, nếu tôi nhập một số, nó

10:08.120 --> 10:10.310
vẫn sẽ phàn nàn vì nó hiểu rằng tôi cần

10:10.310 --> 10:11.610
một chuỗi ở đây.

10:12.500 --> 10:15.960
Tuy nhiên, nếu tôi chuyển vào một chuỗi chính xác, giống

10:15.960 --> 10:17.350
như bạn được chào đón, thì

10:17.350 --> 10:19.070
nó sẽ không phàn nàn nữa vì nó

10:19.070 --> 10:21.210
không hiểu điều này và nó thấy rằng điều

10:21.210 --> 10:24.840
này phù hợp với định nghĩa chức năng của tôi ở đây.

10:24.840 --> 10:27.370
Vì vậy, đây là một hành vi rất hữu ích để đảm bảo

10:27.370 --> 10:30.260
rằng bạn không vô tình sử dụng liên kết, gọi hoặc áp dụng

10:30.260 --> 10:32.743
theo cách không hoạt động với mã của bạn.

10:33.930 --> 10:36.600
Giờ đây, SeriousPropertyInitialization trở nên quan trọng khi

10:36.600 --> 10:37.810
chúng ta làm việc với các lớp.

10:37.810 --> 10:39.213
Chúng ta có thể bỏ qua nó cho bây giờ.

10:39.213 --> 10:41.890
noImplicitĐiều này cũng không thành vấn đề ngay bây giờ.

10:41.890 --> 10:43.650
Nó phải thực hiện từ khóa này

10:43.650 --> 10:45.980
và TypeScript về cơ bản sẽ cố gắng cảnh

10:45.980 --> 10:48.240
báo bạn nếu bạn sử dụng từ khóa này ở

10:48.240 --> 10:51.020
một nơi không rõ nó đề cập đến điều gì.

10:51.020 --> 10:53.210
Và alwaysStrict chỉ cần kiểm soát rằng

10:53.210 --> 10:55.560
các tệp JavaScript được tạo đang sử dụng

10:55.560 --> 10:58.663
chế độ nghiêm ngặt để điều này được thêm vào.

10:59.710 --> 11:02.383
Cùng với đó, chúng tôi đã đề cập đến tất cả các tùy chọn nghiêm ngặt này.
