WEBVTT

00:02.400 --> 00:04.350
Instructeur : Les espaces de noms sont plutôt

00:04.350 --> 00:07.240
bien, mais ils ne sont pas nécessairement parfaits.

00:07.240 --> 00:09.680
Nous avons vu un problème dans la dernière conférence

00:09.680 --> 00:13.290
où j'ai ajouté manuellement toutes les pendances à chaque fichier.

00:13.290 --> 00:15.620
Lorsque je supprime, glisse et dépose de la liste

00:15.620 --> 00:17.340
des projets, oui par exemple, il compile

00:17.340 --> 00:18.900
toujours sans erreur.

00:18.900 --> 00:20.350
Ce n'est pas l'idéal.

00:20.350 --> 00:22.360
Maintenant, cela peut ou non fonctionner,

00:22.360 --> 00:25.047
selon qu'un autre fichier importe ou non le modèle de glisser-déposer

00:25.047 --> 00:27.550
dont j'ai finalement besoin ici.

00:27.550 --> 00:29.100
Ce qui serait le cas ici.

00:29.100 --> 00:31.533
Donc techniquement, même après avoir enlevé

00:31.533 --> 00:33.200
ça, ça fonctionne ici.

00:33.200 --> 00:35.580
Mais ce n'est pas génial, c'est plutôt dangereux.

00:35.580 --> 00:38.560
Si nous nous fions au fait qu'un fichier va s'en charger

00:38.560 --> 00:41.990
pour nous, et bien si nous supprimons ou modifions ce fichier qui

00:41.990 --> 00:44.830
nous a sauvé la mise, nous changeons soudainement quelque

00:44.830 --> 00:47.740
chose qui n'a rien à voir et notre application cesse de

00:47.740 --> 00:49.240
fonctionner.

00:49.240 --> 00:51.420
Nous ne voulons absolument pas ça.

00:51.420 --> 00:53.900
Ce serait donc bien si nous avions des importations

00:53.900 --> 00:58.050
et des exportations qui indiquent clairement ce que nous importons de quel fichier.

00:58.050 --> 00:59.660
Et si nous avons besoin de quelque chose

00:59.660 --> 01:01.120
ici, comme Drag Target par exemple,

01:01.120 --> 01:03.400
et que nous ne l'importons pas explicitement, nous

01:03.400 --> 01:04.840
obtenons une erreur.

01:04.840 --> 01:06.450
C'est en gros ce que nous voulons.

01:06.450 --> 01:10.235
Et nous obtenons ce comportement avec les modules ES6.

01:10.235 --> 01:12.930
Maintenant, les modules ES6 existent aussi en dehors

01:12.930 --> 01:14.800
du type du monde, les navigateurs modernes

01:14.800 --> 01:17.340
les supportent nativement, où le navigateur va

01:17.340 --> 01:19.630
alors essentiellement télécharger toutes

01:19.630 --> 01:22.960
les pendances d'un fichier quand il s'exécute.

01:22.960 --> 01:25.150
Mais les types peuvent aussi les importer et obtenir

01:25.150 --> 01:28.350
le support initial des types lorsque nous les utilisons.

01:28.350 --> 01:31.007
Maintenant, comment fonctionnent les modules ES6 ?

01:31.007 --> 01:33.600
Commençons encore une fois par le glisser-déposer.

01:33.600 --> 01:35.240
Supprimons cet espace de nom qui

01:35.240 --> 01:37.360
est une pure caractéristique des types.

01:37.360 --> 01:40.030
Mais gardons le mot clé d'exportation.

01:40.030 --> 01:42.150
Le mot-clé export n'est pas seulement là

01:42.150 --> 01:44.290
pour travailler avec les espaces de noms,

01:44.290 --> 01:46.980
c'est en fait une syntaxe par défaut de Java script

01:46.980 --> 01:49.800
qui est tout aussi importante par typ script.

01:49.800 --> 01:52.360
Cela signifie que vous exportez cette interphase

01:52.360 --> 01:53.600
et celle-là aussi de ce

01:53.600 --> 01:56.870
fichier et que vous pouvez ensuite l'importer dans un

01:56.870 --> 01:58.460
autre fichier.

01:58.460 --> 02:01.290
Dans notre cas, nous en avons besoin dans les fichiers d'éléments

02:01.290 --> 02:02.980
de projet et de liste de projet.

02:02.980 --> 02:05.230
Commençons maintenant par l'élément de projet.

02:05.230 --> 02:09.030
Pour importer quelque chose à partir d'un module ES et donc

02:09.030 --> 02:11.450
avec ce synthaxe de module ES, vous

02:11.450 --> 02:14.440
spécifiez import en haut du fichier ou près

02:14.440 --> 02:16.110
du haut du fichier avant

02:16.110 --> 02:18.970
de commencer à écrire du code réel.

02:18.970 --> 02:23.240
Importer de et ensuite vous pointez sur ce fichier avec un chemin

02:23.240 --> 02:26.220
relatif depuis le fichier sur lequel vous

02:26.220 --> 02:27.320
importez.

02:27.320 --> 02:29.340
Donc dans ce cas, nous devons monter d'un niveau

02:29.340 --> 02:31.030
avec deux points et une barre oblique.

02:31.030 --> 02:32.509
Nous sommes donc dans le dossier

02:32.509 --> 02:35.550
source, puis nous devons aller ici dans le dossier des modules

02:35.550 --> 02:37.450
et importer par glisser-déposer.

02:37.450 --> 02:40.480
Maintenant, il est important d'ajouter le point JS ici,

02:40.480 --> 02:43.480
parce que vous devez importer comme si cela avait déjà

02:43.480 --> 02:46.470
été compilé, parce que cela sera pris en compte dans

02:46.470 --> 02:49.130
le script Java vanille et ensuite il devrait chercher

02:49.130 --> 02:50.860
le script Java ici, donc les fichiers

02:50.860 --> 02:55.010
de script Java, donc le point JS doit être ajouté.

02:55.010 --> 02:57.560
Maintenant, vous importez quelque chose à partir de ce fichier

02:57.560 --> 02:59.320
et pour cela vous ajoutez des accolades entre

02:59.320 --> 03:01.500
lesquelles vous spécifiez ce que vous voulez importer

03:01.500 --> 03:03.150
à partir de ce fichier.

03:03.150 --> 03:06.430
Là, j'ai déjà la complétion automatique, je

03:06.430 --> 03:08.480
veux importer draggable.

03:08.480 --> 03:10.910
Maintenant, draggable est disponible ici et

03:10.910 --> 03:14.430
les types voient qu'il n'est pas disponible et sont heureux.

03:14.430 --> 03:16.860
Maintenant, nous devons tout convertir pour qu'il puisse s'afficher

03:16.860 --> 03:17.930
au moment de l'exécution.

03:17.930 --> 03:20.370
Débarrassons-nous donc de l'espace nom ici aussi.

03:20.370 --> 03:22.340
Maintenant, il faut aussi fermer l'accolade.

03:22.340 --> 03:24.870
Et maintenant, par exemple ici, nous obtenons ce que nous voulons,

03:24.870 --> 03:27.540
nous obtenons des erreurs, nous obtenons une erreur de composant,

03:27.540 --> 03:29.650
de projet, tout cela est manquant.

03:29.650 --> 03:31.890
Alors exportons et importons toutes ces choses.

03:31.890 --> 03:33.220
Par exemple, dans le composant de base,

03:33.220 --> 03:34.540
supprimez l'espace nom et gardez

03:34.540 --> 03:36.810
le mot clé d'exportation comme vous l'avez appris.

03:36.810 --> 03:38.270
Débarrassez-vous de l'accolade

03:38.270 --> 03:40.810
de fermeture, reformatez et importez le projet.

03:40.810 --> 03:43.380
On peut toujours se débarrasser de l'espace nom.

03:43.380 --> 03:45.760
Et toutes les références ici, vous pouvez en fait supprimer

03:45.760 --> 03:48.803
toutes les importations de référence que vous avez partout.

03:51.300 --> 03:53.593
Débarrassez-vous de toutes les accolades d'espace de nom.

03:55.010 --> 03:56.950
Liste du projet, débarrassez-vous de tout l'espace

03:56.950 --> 03:58.466
nom et des références, débarrassez-vous

03:58.466 --> 04:00.690
de l'accolade de fermeture en bas.

04:00.690 --> 04:03.320
Et les décorateurs, débarrassés de l'espace de nom et

04:03.320 --> 04:05.330
de l'accolade de fermeture, et le glisser-déposer,

04:05.330 --> 04:07.940
nous nous en sommes déjà débarrassés.

04:07.940 --> 04:10.230
Project, supprimez l'espace du nom et

04:10.230 --> 04:11.920
l'accolade de fermeture.

04:11.920 --> 04:14.460
Le projet resté sans surprise se débarrasse de

04:14.460 --> 04:16.223
l'espace nom et de la fermeture.

04:18.390 --> 04:22.620
L'accolade frisée ici, nous nous appuyions en fait sur le projet importé

04:22.620 --> 04:24.740
par un autre fichier, je n'avais pas

04:24.740 --> 04:26.620
de références à cela ici.

04:26.620 --> 04:28.770
C'était donc ce comportement dangereux

04:28.770 --> 04:29.880
dont je parlais.

04:29.880 --> 04:31.871
Cela aurait pu échouer si nous n'avions pas importé

04:31.871 --> 04:35.120
ou si nous n'avions pas référencé notre partie de projet dans l'espace de

04:35.120 --> 04:36.710
nom dans un autre fichier.

04:36.710 --> 04:39.090
Donc, ce n'était définitivement pas l'idéal.

04:39.090 --> 04:41.560
Mais avec cela, continuons notre refactoring.

04:41.560 --> 04:44.430
Dans la validation ici, débarrassez-vous de l'espace

04:44.430 --> 04:46.050
nom ici et de toutes les accolades

04:46.050 --> 04:47.550
de fermeture ici en bas.

04:47.550 --> 04:49.150
Et enfin, une application TS, débarrassez-vous

04:49.150 --> 04:51.503
de ces importations et de l'espace de noms.

04:52.700 --> 04:55.350
Donc maintenant on a des erreurs partout mais

04:55.350 --> 04:56.988
on peut recommencer.

04:56.988 --> 04:59.560
Maintenant, recommençons peut-être dans le composant de base.

04:59.560 --> 05:01.610
Ça a l'air bien, il ne se plaint pas,

05:01.610 --> 05:03.700
il semble avoir tout ce qu'il veut.

05:03.700 --> 05:06.250
L'importation du projet, eh bien, elle se plaint.

05:06.250 --> 05:08.450
Par exemple, nous avons besoin d'un composant.

05:08.450 --> 05:12.070
Ajoutons donc un import en haut et importons

05:12.070 --> 05:15.830
le composant de la base dot slash.

05:15.830 --> 05:18.410
C'est ainsi que vous importez relativement si quelque chose

05:18.410 --> 05:19.990
se trouve dans le même dossier.

05:19.990 --> 05:22.370
Point slash au début, puis le nom du fichier

05:22.370 --> 05:24.490
et enfin tout est important point JS.

05:24.490 --> 05:26.753
N'oubliez pas le point JS à la fin.

05:28.100 --> 05:30.250
Maintenant, nous avons également besoin

05:31.170 --> 05:34.650
de l'interphase validable ici et de la méthode validate,

05:34.650 --> 05:36.810
auto mind et project state.

05:36.810 --> 05:39.140
Importons donc toutes ces choses,

05:39.140 --> 05:44.080
importons de dot slash, ou non remontons d'un niveau puis

05:44.080 --> 05:46.149
util puis validation dot

05:46.149 --> 05:49.460
JS, importons de That File, validatable

05:49.460 --> 05:52.100
et la fonction validate et importons

05:53.010 --> 05:56.250
auto bind de, remontons d'un niveau décorateurs

05:56.250 --> 06:00.350
autobind JS.

06:00.350 --> 06:02.600
Et enfin, mais pas des moindres, l'état

06:02.600 --> 06:05.220
du projet, importons de remonter d'un niveau

06:05.220 --> 06:07.580
l'état du projet, l'état JS .

06:07.580 --> 06:11.000
De là, nous pouvons importer la constante de l'état

06:11.000 --> 06:13.250
du projet que nous exportons ici.

06:13.250 --> 06:15.390
Maintenant, ce sont tous les imports dont nous avons besoin ici

06:15.390 --> 06:16.773
pour faire fonctionner ce fichier.

06:18.190 --> 06:20.480
Passons maintenant à l'élément de projet.

06:20.480 --> 06:23.270
Là, nous avons besoin d'autobind, nous avons besoin de composants,

06:23.270 --> 06:24.853
nous avons besoin du modèle de projet.

06:24.853 --> 06:26.700
Alors ajoutons toutes ces choses.

06:26.700 --> 06:30.520
Importons par exemple le modèle de projet

06:30.520 --> 06:34.523
à partir de dot slash models project JS.

06:35.580 --> 06:38.080
Ajoutons également un composant qui se trouve

06:39.340 --> 06:41.110
dans le même dossier .

06:41.110 --> 06:45.530
Donc importons le composant de base dot slash

06:45.530 --> 06:49.020
JS et auto bind, importons auto bind

06:50.790 --> 06:55.790
de dot slash decorators auto bind JS.

06:56.020 --> 06:59.383
Et maintenant ce fichier ici a aussi tout ce dont il a besoin.

07:01.260 --> 07:03.410
Passons maintenant à la liste des projets.

07:03.410 --> 07:06.610
Ici, dans la liste des projets, nous avons également besoin

07:06.610 --> 07:10.250
du composant comme on et ainsi de suite, nous allons donc le copier ici

07:10.250 --> 07:14.260
depuis l'élément de projet et l'ajouter à la liste des projets TS, mais nous

07:14.260 --> 07:16.120
n'avons pas besoin de draggoble ici

07:16.120 --> 07:19.420
mais de drag target à la place, alors importons-le.

07:19.420 --> 07:22.307
En outre, nous avons besoin de l'état

07:22.307 --> 07:24.550
du projet et de son statut.

07:24.550 --> 07:26.540
Oui, ce sont les choses dont nous avons besoin.

07:26.540 --> 07:28.780
Et aussi la classe de l'élément de projet.

07:28.780 --> 07:31.030
Ainsi, à partir du fichier de modèle de projet, nous pouvons

07:31.030 --> 07:32.720
également importer le statut du projet.

07:32.720 --> 07:35.340
Vous pouvez importer plusieurs éléments exportés

07:35.340 --> 07:36.840
à partir d'un même fichier en

07:36.840 --> 07:38.730
les séparant simplement par une virgule

07:38.730 --> 07:41.740
entre ces accolades, comme vous le voyez ici.

07:41.740 --> 07:45.910
Nous importons également la constante d'état du projet

07:46.790 --> 07:48.790
depuis le dossier d'état,

07:48.790 --> 07:52.470
project state JS et nous importons enfin, ici

07:52.470 --> 07:54.790
tout en bas, la classe d'éléments

07:54.790 --> 07:57.130
du projet.

07:57.130 --> 08:01.770
Donc importez le projet depuis point slash project

08:01.770 --> 08:03.623
item point JS.

08:06.810 --> 08:08.280
Alors, passons à autre chose.

08:08.280 --> 08:11.280
Autobind est bien, le statut du projet se plaignant là,

08:11.280 --> 08:13.600
nous avons besoin du modèle de projet.

08:13.600 --> 08:15.740
Donc en haut, importons

08:16.820 --> 08:20.300
le projet en remontant d'un niveau les

08:20.300 --> 08:22.823
modèles projet point JS.

08:24.450 --> 08:27.630
Nous utilisons également le statut du projet ici, alors importons-le

08:27.630 --> 08:29.573
à partir de ce même fichier' Et avec cela,

08:32.320 --> 08:33.960
le dernier mais non le moindre, nous

08:33.960 --> 08:35.660
obtenons le fichier TS de l'application,

08:35.660 --> 08:38.810
là nous devons importer l'entrée du projet.

08:38.810 --> 08:43.610
à partir de l'entrée du projet de composants dot slash.

08:43.610 --> 08:48.030
JS et la liste de projets à partir de la liste de projets JS' Si nous

08:49.290 --> 08:52.280
sauvegardons maintenant ceci, cela devrait

08:52.280 --> 08:54.330
compiler sans erreurs et maintenant

08:54.330 --> 08:58.500
nous utilisons les modules ES6 pour organiser nos importations

08:58.500 --> 09:00.823
et exportations.

09:02.640 --> 09:05.460
Si nous jetons un coup d'œil au navigateur,

09:05.460 --> 09:07.040
nous avons une erreur.

09:07.040 --> 09:09.390
Maintenant, la raison pour cela est que si nous vérifions

09:09.390 --> 09:12.013
le dossier dist, nous avons notre fichier bundle JS.

09:13.040 --> 09:15.900
Maintenant, nous devons changer de configuration TS à nouveau.

09:15.900 --> 09:19.070
Pour l'un d'entre eux, nous ne devrions pas utiliser

09:19.070 --> 09:22.420
AMD maintenant mais plutôt ES vingt-cinq.

09:22.420 --> 09:25.710
Than est essentiellement le mot de code pour ES6 qui était

09:25.710 --> 09:27.240
la version du script agma qui

09:27.240 --> 09:29.300
a introduit les modules ES.

09:29.300 --> 09:31.260
Donc, nous disons essentiellement au script

09:31.260 --> 09:34.480
de type de ne pas transformer nos importations en quoi que ce soit, de

09:34.480 --> 09:36.240
les garder comme elles sont.

09:36.240 --> 09:39.250
Les navigateurs modernes le comprendront.

09:39.250 --> 09:41.290
C'est donc important, assurez-vous également

09:41.290 --> 09:43.433
d'avoir une cible ES6 ou supérieure ici' Vous

09:44.950 --> 09:47.530
devez maintenant commenter à nouveau le fichier out,

09:47.530 --> 09:50.670
car il n'est pas pris en charge par les modules ES.

09:50.670 --> 09:53.590
Et avec cela, ce que vous obtenez dans le dossier dist est

09:53.590 --> 09:56.610
essentiellement une réplication de votre dossier source

09:56.610 --> 09:58.690
mais avec des fichiers de script Java.

09:58.690 --> 10:00.480
Nous devons maintenant retourner au

10:00.480 --> 10:03.120
fichier HDML de l'index et importer à nouveau l'app JS,

10:03.120 --> 10:04.840
car nous avons maintenant un fichier

10:04.840 --> 10:06.350
app JS dans le dossier dist.

10:06.350 --> 10:08.910
Et encore une fois, ce fichier d'application JS contiendra vos

10:08.910 --> 10:11.180
déclarations d'importation, car, comme je l'ai mentionné,

10:11.180 --> 10:13.830
ceci est supporté par Java script, par les moteurs de Java script

10:13.830 --> 10:15.900
modernes et par les navigateurs modernes.

10:15.900 --> 10:17.440
Et le navigateur va donc résoudre

10:17.440 --> 10:19.440
ces importations pour vous.

10:19.440 --> 10:22.430
Donc si on recharge ça, on aura toujours

10:22.430 --> 10:24.240
une erreur.

10:24.240 --> 10:27.310
Impossible d'utiliser l'instruction import en dehors d'un module.

10:27.310 --> 10:30.630
Les navigateurs modernes supportent ce sintex mais vous devez

10:30.630 --> 10:33.150
leur dire que vous voulez l'utiliser.

10:33.150 --> 10:37.470
Et vous leur dites en supprimant les (marmonnements) ici et à la place sur

10:37.470 --> 10:39.670
la balise script, où vous importez un

10:39.670 --> 10:42.777
fichier qui a ces déclarations d'importation.

10:42.777 --> 10:46.313
Vous utilisez le type égale le module.

10:47.300 --> 10:50.450
Si vous sécurisez maintenant ceci, vous voyez que cela fonctionne

10:50.450 --> 10:53.440
et maintenant si nous ajoutons quelque chose ici, nous obtenons

10:53.440 --> 10:56.120
à nouveau l'application qui fonctionne.

10:56.120 --> 10:58.910
Maintenant si vous inspectez l'onglet réseau,

10:58.910 --> 11:01.680
vous verrez que si vous rechargez, il y a un

11:01.680 --> 11:05.290
tas de requêtes réseau en cours, si je zoome un peu nous

11:05.290 --> 11:07.410
pouvons mieux le voir.

11:07.410 --> 11:10.340
Tous nos fichiers Java script sont demandés ici.

11:10.340 --> 11:12.810
Ils sont demandés automatiquement par le navigateur

11:12.810 --> 11:14.780
lorsqu'il rencontre notre importation.

11:14.780 --> 11:16.967
Donc, ça commence avec l'application JS, puis

11:16.967 --> 11:19.410
il voit l'importation à l'entrée du projet JS.

11:19.410 --> 11:21.990
Ici et donc bien sûr, la demande suivante va à l'entrée

11:21.990 --> 11:23.160
du projet.

11:23.160 --> 11:25.410
Il en va de même pour la liste des projets.

11:25.410 --> 11:27.360
Maintenant, dans l'entrée du projet par

11:27.360 --> 11:29.422
exemple, il verrait une entrée du composant

11:29.422 --> 11:31.450
de base JS, c'est pourquoi il importe également

11:31.450 --> 11:33.400
le composant de base JS.

11:33.400 --> 11:35.530
C'est le navigateur qui s'en charge, nous en

11:35.530 --> 11:38.170
profitons et nous avons maintenant une autre façon de

11:38.170 --> 11:40.850
diviser nos fichiers, mais avec l'avantage supplémentaire

11:40.850 --> 11:43.750
que nous indiquons clairement ce dont nous avons besoin pour

11:43.750 --> 11:45.850
chaque fichier et que si nous omettons une

11:45.850 --> 11:49.100
importation, type-script nous crie dessus, ce qu'il ne faisait

11:49.100 --> 11:51.127
pas avec l'approche précédente, ce qui explique

11:51.127 --> 11:53.400
pourquoi cette approche est en fait ma recommandation

11:53.400 --> 11:58.870
et pourquoi elle est la méthode standard d'importation et d'exportation.

11:58.870 --> 12:00.710
Si vous avez déjà travaillé avec des scripts

12:00.710 --> 12:03.850
de type dans d'autres projets, par exemple dans un projet angulaire, vous

12:03.850 --> 12:06.380
avez peut-être l'habitude de ne pas avoir à spécifier d'extension

12:06.380 --> 12:07.980
de fichier ici. Nous pourrons également

12:07.980 --> 12:09.270
l'omettre une fois que nous aurons

12:09.270 --> 12:12.210
ajouté un pack Web et un outil de facturation.

12:12.210 --> 12:14.580
Tant que nous n'avons pas cela et que nous comptons sur le

12:14.580 --> 12:16.870
navigateur pour importer nos fichiers, vous devez ajouter

12:16.870 --> 12:18.833
cette extension supplémentaire.
