WEBVTT

00:02.210 --> 00:04.920
Narrador: Ahora, un tipo especial de guardia de tipo,

00:04.920 --> 00:05.753
se podría decir,

00:05.753 --> 00:07.940
o algo que te ayuda con las guardias de tipo,

00:07.940 --> 00:10.000
es la unión discriminada.

00:10.000 --> 00:11.300
¿Qué es eso?

00:11.300 --> 00:13.310
Es un patrón, que puedes utilizar cuando

00:13.310 --> 00:15.030
trabajas con tipos de unión,

00:15.030 --> 00:18.900
que hace más fácil la implementación de guardias de tipo.

00:18.900 --> 00:22.000
Está disponible cuando se trabaja con tipos de objetos.

00:22.000 --> 00:24.580
Déjame mostrarte cómo funciona.

00:24.580 --> 00:26.850
Digamos que tenemos un par de interfaces, y esto

00:26.850 --> 00:28.450
podría ser clases también, pero aquí

00:28.450 --> 00:29.950
voy a ir por las interfaces para

00:29.950 --> 00:32.193
mostrar que funciona con esos también.

00:33.170 --> 00:34.803
Y ahí tengo mi pájaro, que

00:36.480 --> 00:38.830
tiene una velocidad de vuelo, que debe

00:38.830 --> 00:40.973
ser de tipo número, digamos.

00:42.660 --> 00:45.890
Y también tengo mi caballo, que tiene una velocidad

00:45.890 --> 00:50.310
en el suelo o una velocidad de carrera, que debe ser de tipo

00:50.310 --> 00:51.913
número.

00:53.130 --> 00:55.430
Así que tenemos estas dos interfaces aquí.

00:55.430 --> 00:58.800
Ahora creamos nuestro propio tipo de unión,

00:58.800 --> 00:59.633
animal, que

01:00.750 --> 01:03.370
es un pájaro o un caballo.

01:03.370 --> 01:05.743
Y al igual que antes, podríamos tener una

01:06.740 --> 01:08.480
función, mover animal que toma

01:09.800 --> 01:13.040
un animal como entrada, que es de tipo animal, Así que usando

01:13.040 --> 01:14.800
nuestro tipo de unión.

01:14.800 --> 01:19.800
Y ahora ahí, quiero decir que se mueve con velocidad, y ahora por supuesto,

01:19.990 --> 01:21.050
necesito acceder

01:21.050 --> 01:25.180
a la velocidad de vuelo o a la velocidad de carrera.

01:25.180 --> 01:27.730
Ahora, por supuesto, podríamos haber llamado simplemente velocidad.

01:27.730 --> 01:30.840
Pero esto es sólo un ejemplo simplificado de un caso de uso

01:30.840 --> 01:33.900
real al que podrías enfrentarte, en el que tienes algunas

01:33.900 --> 01:37.390
interfaces u objetos en general, que están algo relacionados

01:37.390 --> 01:40.500
pero tienen diferentes propiedades o métodos.

01:40.500 --> 01:42.050
Así que aquí, es la propiedad de la velocidad,

01:42.050 --> 01:43.900
que en realidad es diferente.

01:43.900 --> 01:46.780
Así que no puede acceder a la velocidad de vuelo aquí porque, por supuesto,

01:46.780 --> 01:49.240
no todos los animales tienen una velocidad de vuelo.

01:49.240 --> 01:51.210
Ahora podemos hacer lo que hemos aprendido antes.

01:51.210 --> 01:56.063
Podemos comprobar si la velocidad de vuelo está en el animal aquí.

01:58.240 --> 02:01.063
Y si ese es el caso, podemos ejecutar este código.

02:01.960 --> 02:04.470
Este es un enfoque que podemos adoptar, pero

02:04.470 --> 02:07.430
cuantos más animales potenciales tengamos, más cosas

02:07.430 --> 02:09.233
tendremos que comprobar.

02:10.880 --> 02:14.100
También podemos escribir mal aquí en esta cadena.

02:14.100 --> 02:15.810
Podemos olvidar una E, por ejemplo,

02:15.810 --> 02:18.460
y preguntarnos por qué no funciona.

02:18.460 --> 02:20.410
Ahora, no podemos usar la instancia de aquí

02:20.410 --> 02:22.570
porque estoy rompiendo con las interfaces.

02:22.570 --> 02:27.490
Como ya he explicado, la instancia animal del pájaro no funcionará porque

02:27.490 --> 02:29.680
los datos son una interfaz, que no

02:29.680 --> 02:31.840
se compila en JavaScript.

02:31.840 --> 02:33.970
Así que en tiempo de ejecución, esto no estará

02:33.970 --> 02:36.210
disponible como una función constructora.

02:36.210 --> 02:37.690
Por lo tanto, esto no funciona.

02:37.690 --> 02:40.380
Ahora podemos construir una unión discriminada

02:40.380 --> 02:42.460
aquí dando cada interfaz.

02:42.460 --> 02:45.380
Así que cada objeto que debe ser parte de la Unión,

02:45.380 --> 02:47.130
y la propiedad extra.

02:47.130 --> 02:48.640
Puedes usar el nombre que quieras.

02:48.640 --> 02:51.490
A menudo se utiliza el tipo, o el tipo aquí.

02:51.490 --> 02:55.090
Voy a ir por el tipo, y el nombre de este pájaro.

02:55.090 --> 02:57.480
Ahora importante, estamos negociando una interfaz aquí.

02:57.480 --> 03:02.480
Así que esto no es realmente un valor para la propiedad de tipo.

03:02.650 --> 03:05.410
Esto en cambio es un tipo literal como aprendiste,

03:05.410 --> 03:09.110
donde el tipo debe contener una cadena, que debe ser pájaro.

03:09.110 --> 03:10.880
Así que esto es una asignación

03:10.880 --> 03:15.000
de tipo, donde limitamos el valor que puede ser almacenado en el tipo

03:15.000 --> 03:17.590
a exactamente este valor de cadena.

03:17.590 --> 03:19.810
Y luego hacer lo mismo para el caballo ,

03:19.810 --> 03:22.283
sólo con el caballo como un tipo literal.

03:23.400 --> 03:25.060
Ahora, en nuestra función,

03:25.060 --> 03:27.550
podemos utilizar una sentencia

03:27.550 --> 03:29.840
switch y cambiar el tipo de

03:29.840 --> 03:32.280
punto animal.

03:32.280 --> 03:34.080
Cada animal tiene una propiedad de

03:34.080 --> 03:36.330
tipo porque la añadimos a todas las interfaces

03:36.330 --> 03:38.350
que componen nuestro animal.

03:38.350 --> 03:40.730
Y aquí podemos tener un par de casos en

03:40.730 --> 03:42.330
los que incluso obtenemos

03:42.330 --> 03:44.990
autocompletado porque TypeScript y nuestro

03:44.990 --> 03:49.040
IDE entienden que el tipo sólo puede ser pájaro o caballo.

03:49.040 --> 03:51.050
Y si se trata de un pájaro, entonces

03:51.050 --> 03:55.003
podríamos establecer alguna velocidad variable interna a, digamos,

03:55.900 --> 03:58.860
la velocidad de vuelo de los puntos de los animales

03:59.880 --> 04:02.250
y luego romper a partir de entonces.

04:02.250 --> 04:05.183
De lo contrario, si el caso es el de un caballo, establecemos

04:06.830 --> 04:11.753
la velocidad igual a la velocidad de carrera del punto animal.

04:14.150 --> 04:17.490
Y allí después podemos consolar el registro,

04:17.490 --> 04:20.843
moviéndonos a velocidad más velocidad.

04:22.490 --> 04:26.540
Si ahora llamo, mover a los animales con un animal que creo sobre la

04:26.540 --> 04:30.300
marcha aquí, donde se establece el tipo a las aves y sólo permite

04:30.300 --> 04:32.810
utilizar el pájaro o el caballo, entonces

04:32.810 --> 04:34.930
tengo que establecer mi velocidad

04:36.140 --> 04:39.210
de vuelo y, por cierto, TypeScript incluso reconoce

04:39.210 --> 04:42.050
que un concepto de velocidad de ejecución aquí

04:42.050 --> 04:44.220
para tratar de hacer eso y establecer

04:44.220 --> 04:48.980
esto a 10, se queja de que esto no está disponible para el tipo de aves.

04:48.980 --> 04:51.360
Si lo pongo a velocidad de vuelo, sin

04:51.360 --> 04:55.120
embargo funciona, si guardamos eso, sale esto correctamente,

04:55.120 --> 04:57.700
y además compila sin errores.

04:57.700 --> 04:59.530
Ahora bien, esta es una unión

04:59.530 --> 05:04.060
discriminada porque tenemos una propiedad común en cada objeto que

05:04.060 --> 05:08.040
compone nuestra unión, que describe ese objeto, de modo que

05:08.040 --> 05:11.490
podemos utilizar esta propiedad que describe este

05:11.490 --> 05:16.490
objeto en nuestra comprobación para tener un 100% de seguridad de tipo y entender

05:16.770 --> 05:19.870
qué propiedades están disponibles para dicho

05:19.870 --> 05:21.930
objeto y cuáles no.

05:21.930 --> 05:24.500
Por lo tanto, se trata de un patrón novedoso y útil que

05:24.500 --> 05:28.060
puedes utilizar cuando trabajes con objetos y con tipos de unión.

05:28.060 --> 05:30.340
E incluso funciona con interfaces porque

05:30.340 --> 05:33.630
esta interfaz obliga a que cada objeto que construyas

05:33.630 --> 05:37.050
basado en esta interfaz, tenga este tipo.

05:37.050 --> 05:39.400
Así, en lugar de comprobar la existencia de

05:39.400 --> 05:41.200
una determinada propiedad, o en lugar

05:41.200 --> 05:43.660
de utilizar instance of, utilizamos una propiedad

05:43.660 --> 05:46.310
que sabemos que existe para comprobar con qué tipo

05:46.310 --> 05:49.020
de objetos estamos trabajando.

05:49.020 --> 05:51.930
También eliminamos el peligro de escribir mal porque

05:51.930 --> 05:54.730
TypeScript entiende que los únicos casos que podemos

05:54.730 --> 05:58.480
tener aquí, para el tipo animal, son pájaro y caballo y por lo tanto nos

05:58.480 --> 06:00.810
da este arte de completar y si se introdujera

06:00.810 --> 06:02.770
un error tipográfico, inmediatamente

06:02.770 --> 06:04.690
obtendríamos un error.

06:04.690 --> 06:06.780
Por lo tanto, este es un patrón muy útil

06:06.780 --> 06:09.333
cuando se trabaja con objetos y tipos de unión.
