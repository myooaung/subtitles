WEBVTT

00:02.440 --> 00:05.170
Eğitmen: Şimdi geri aramalar ve fonksiyon türlerinden

00:05.170 --> 00:08.400
bahsetmişken, orada da hemen hemen aynı şekilde çalışır.

00:08.400 --> 00:10.550
Diyelim ki yukarıda yeni bir fonksiyonumuz

00:11.800 --> 00:14.990
var addAndHandle, diyelim.

00:14.990 --> 00:18.420
Burada iki sayı almayı bekliyoruz ve ayrıca burada bir

00:19.740 --> 00:22.320
geri arama işlevi almak istiyorum.

00:22.320 --> 00:24.480
Yani aktarılan ve sonuçla bir şeyler yapması

00:24.480 --> 00:26.670
gereken bir argüman olan bir fonksiyon,

00:26.670 --> 00:29.930
o zaman burada elbette sonucu üretebiliriz.

00:29.930 --> 00:31.060
Ancak yalnızca döndürmek

00:31.060 --> 00:33.290
değil, bunun yerine geri arama işlevini çağırmak

00:33.290 --> 00:35.670
ve sonucu iletmek istiyorum.

00:35.670 --> 00:36.990
Şimdi bunun için, geri aramanın bir fonksiyon

00:36.990 --> 00:39.270
olması gerektiği konusunda gerçekten açık olmak istiyorum.

00:39.270 --> 00:42.190
Yani yine, belki hiçbir şey döndürmeyen

00:42.190 --> 00:45.640
ama argüman olarak bir sayı alan fonksiyon tipi

00:45.640 --> 00:51.280
tanımını kullanıyorum çünkü burada ona bir sayı aktarıyoruz.

00:51.280 --> 00:52.740
Dolayısıyla, geri arama

00:52.740 --> 00:55.870
işlevi, bu işleve parametre olarak aktardığımız

00:55.870 --> 00:58.460
işlev bir sayı kabul etmelidir.

00:58.460 --> 01:01.890
Şimdi aşağıda, addAndHandle'ı çağıracağız, 10 ve 20'yi

01:01.890 --> 01:05.240
gireceğiz ve sonra bir fonksiyon gireceğiz.

01:05.240 --> 01:07.570
Örneğin, burada anonim bir fonksiyon.

01:07.570 --> 01:09.710
Şimdi burada, fonksiyonu çağırdığımızda,

01:09.710 --> 01:11.470
bu elbette bir fonksiyon tipi değil,

01:11.470 --> 01:13.620
bu üçüncü argüman için aktardığımız somut

01:13.620 --> 01:15.150
bir değerdir.

01:15.150 --> 01:18.870
Şimdi burada anonim bir fonksiyon oluşturuyoruz

01:18.870 --> 01:22.300
ve bir sayı elde edeceğimizi biliyoruz.

01:22.300 --> 01:23.810
Belki bu sonuca bir isim veririz

01:23.810 --> 01:26.110
ve sonra da istediğimizi yaparız.

01:26.110 --> 01:27.623
Ve şimdi bunu derlerseniz,

01:28.570 --> 01:31.120
aşağıda bu günlüğü görürüz, 30, addAndHandle'a

01:31.120 --> 01:33.540
aktardığımız geri arama işlevimizin sonucudur,

01:33.540 --> 01:35.600
burada addAndHandle iki sayıyı birleştirir

01:35.600 --> 01:39.850
ve ardından geri aramanın burada bu koşulu karşılaması gereken geri

01:39.850 --> 01:43.200
aramayı çağırır.

01:43.200 --> 01:45.870
Burada geri arama fonksiyonu tanımlamamızın

01:45.870 --> 01:49.490
avantajı, ilettiğimiz fonksiyonun içinde sonucun bir sayı

01:49.490 --> 01:52.240
olacağını çıkarabilen bir geri arama tipi olmasıdır

01:52.240 --> 01:54.000
ve dolayısıyla burada sonuçla

01:54.000 --> 01:56.620
her şeyi yapabiliriz.

01:56.620 --> 01:58.090
Burada türü açıkça belirtmeden

01:58.090 --> 02:00.990
bir sayıyla ne yapabiliriz çünkü TypeScript sonucun

02:00.990 --> 02:03.226
bir sayı olacağını bilir çünkü geri

02:03.226 --> 02:04.970
aramanın bir sayı olan bir argüman

02:04.970 --> 02:08.473
alacağını açıkça belirttik.

02:09.310 --> 02:12.170
Dolayısıyla, burada geri aramada ikinci bir argüman

02:12.170 --> 02:13.060
bekleseydik, hata

02:13.060 --> 02:15.460
alırdık çünkü addAndHandle işlevimizde beklediğimiz

02:15.460 --> 02:18.630
geri aramanın yalnızca bir argümanı olması gerektiğini

02:18.630 --> 02:20.500
iyi biliyoruz.

02:20.500 --> 02:22.420
Dolayısıyla, daha sonra ikinci bir argüman

02:22.420 --> 02:23.950
alan bir geri arama fonksiyonu

02:23.950 --> 02:26.240
geçirirsek, bu açıkça bir hatadır.

02:26.240 --> 02:28.250
TypeScript'in algılamadığı tek şey, burada

02:28.250 --> 02:30.280
bir şey döndürüp döndürmediğimizdir.

02:30.280 --> 02:33.690
Bir geri dönüş sonucu varsa ve geri arama bir şey döndürmemesi

02:33.690 --> 02:34.767
gerektiğini açıkça

02:34.767 --> 02:37.300
belirtmemize rağmen bir şey döndürürse.

02:37.300 --> 02:41.180
Ancak bu, TypeScript'te bir hata veya bug değildir.

02:41.180 --> 02:43.150
Aslında bilerek oluyor.

02:43.150 --> 02:46.000
Burada geri arama türümüzü void olarak belirterek,

02:46.000 --> 02:49.520
aslında burada döndürebileceğiniz tüm sonuçları yok sayacağımızı

02:49.520 --> 02:50.910
söylüyoruz.

02:50.910 --> 02:54.030
Yani temel olarak addAndHandle'da, bu geri arama işlevini

02:54.030 --> 02:56.020
aldığımız yerde, dönüş türüyle hiçbir

02:56.020 --> 02:58.080
şey yapmayacağımızı söylüyoruz.

02:58.080 --> 03:00.600
Bu nedenle burada ceza almadan bir şey döndürebilirsiniz,

03:00.600 --> 03:03.550
ancak burada geri arama türünde açıkça tanımlandığı

03:03.550 --> 03:06.850
için geri aramanın burada döndürebileceğiniz değerle

03:06.850 --> 03:10.870
hiçbir şey yapmayacağını bilirsiniz.

03:10.870 --> 03:13.543
Böylece fonksiyonun içindeki addAndHandle,

03:13.543 --> 03:15.680
döndürdüğünüz değerle hiçbir şey

03:15.680 --> 03:17.120
yapmayacaktır.

03:17.120 --> 03:19.620
Bu da elbette faydalı bir bilgi.

03:19.620 --> 03:21.270
Burada, geri arama tarafından

03:21.270 --> 03:25.710
döndürülen değerle bir şeyler yapmamızı bekleyebilirsiniz ve burada

03:25.710 --> 03:29.000
bu türü belirterek, addAndHandle'ın içinde herhangi

03:29.000 --> 03:31.520
bir geri dönüş değeriyle ilgilenmediğimizi

03:31.520 --> 03:33.920
açıkça belirtiyoruz.

03:33.920 --> 03:36.410
Yani bu sizi hiçbir şey döndürmeyen bir geri

03:36.410 --> 03:38.260
arama iletmeye zorlamaz.

03:38.260 --> 03:40.830
Bu sadece size iade edebileceğiniz hiçbir şeyin kullanılmayacağını

03:40.830 --> 03:42.200
söyler.

03:42.200 --> 03:44.070
Parametreler için durum elbette farklıdır.

03:44.070 --> 03:45.540
Burada bu zorunludur çünkü

03:45.540 --> 03:48.310
daha fazla parametre bekleyen bir geri arama iletip

03:48.310 --> 03:51.720
iletmediğinizi bilmeniz gerçekten önemlidir.

03:51.720 --> 03:53.490
O zaman bir hata alırsınız ya da

03:53.490 --> 03:55.350
istediğiniz sonucu alamazsınız

03:55.350 --> 03:57.740
çünkü size sadece bir sonuç veririm.

03:57.740 --> 04:01.290
Dolayısıyla, dönüş türünde olduğu gibi ne isteyebileceğinizi

04:01.290 --> 04:02.840
göz ardı edemeyiz.

04:02.840 --> 04:05.506
Burada, addAndHandle işlevinin sorumlu olduğu

04:05.506 --> 04:08.750
bir şeyi iletmek için bunu görmezden geliyoruz çünkü

04:08.750 --> 04:10.920
geri arama burada çağrılıyor.

04:10.920 --> 04:13.210
Parametrelerin zorunlu tutulmasının ve TypeScript'in

04:13.210 --> 04:15.060
geri arama işlevlerinin parametrelerinin

04:15.060 --> 04:17.150
sayısı ve türü konusunda gerçekten katı olmasının

04:17.150 --> 04:19.508
ve geri dönüş türünü gerçekten önemsememesinin nedeni

04:19.508 --> 04:21.253
budur.
