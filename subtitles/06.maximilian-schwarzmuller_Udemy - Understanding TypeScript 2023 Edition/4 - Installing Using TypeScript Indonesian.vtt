WEBVTT

00:02.160 --> 00:04.930
Instruktur: Berikut ini adalah contoh yang sama pada dasarnya

00:04.930 --> 00:06.440
dalam proyek nyata.

00:06.440 --> 00:08.550
Anda akan menemukan proyek sederhana ini,

00:08.550 --> 00:11.270
file HTML indeks dan file JavaScript ini, yang dilampirkan

00:11.270 --> 00:13.340
ke video ini dalam sebuah subfile.

00:13.340 --> 00:16.900
Anda cukup membuka ini dan kemudian membuka file HTML indeks.

00:16.900 --> 00:18.610
Anda juga dapat membuka kode

00:18.610 --> 00:20.890
dalam editor teks pilihan Anda.

00:20.890 --> 00:22.160
Di sini saya menggunakan VisualStudioCode,

00:22.160 --> 00:25.000
dan saya akan kembali ke pengaturan yang tepat nanti dalam modul

00:25.000 --> 00:26.250
ini.

00:26.250 --> 00:29.250
Untuk saat ini, Anda bisa membuka kedua file teks

00:29.250 --> 00:31.180
ini dengan editor teks apa pun.

00:31.180 --> 00:34.110
Sekarang apa yang akan Anda temukan di sana adalah file JavaScript

00:34.110 --> 00:37.000
ini, yang berinteraksi dengan file HTML indeks ini.

00:37.000 --> 00:38.830
Dan kemudian file HTML indeks itu, Anda

00:38.830 --> 00:41.050
akan menemukan dua input dan tombol dan file

00:41.050 --> 00:43.698
JavaScript apa pun yang akan diimpor di sini.

00:43.698 --> 00:45.843
Pada dasarnya, kami menjangkau elemen-elemen ini.

00:45.843 --> 00:47.968
Kemudian kita memiliki fungsi di sini

00:47.968 --> 00:50.020
dan pendengar peristiwa pada tombol

00:50.020 --> 00:53.830
yang memicu fungsi dan mencatat hasil fungsi di sini di konsol.

00:53.830 --> 00:56.750
Sekarang, jika kita membuka file HTML indeks itu,

00:56.750 --> 01:00.701
dengan mengklik dua kali di Windows Explorer atau Mac Finder sehingga

01:00.701 --> 01:03.220
terbuka di browser, apa yang akan Anda lihat

01:03.220 --> 01:05.150
adalah ini.

01:05.150 --> 01:07.250
Dua input dan tombol add dan di

01:07.250 --> 01:11.170
sini saya membuka alat pengembang browser juga.

01:11.170 --> 01:13.760
Sekarang jika Anda memasukkan 10 dan lima di sini misalnya,

01:13.760 --> 01:16.640
Anda mungkin berharap untuk melihat 15 sebagai hasilnya di sini

01:16.640 --> 01:19.420
di sebelah kanan tetapi Anda malah melihat 105.

01:19.420 --> 01:23.460
Dan ini menunjukkan kepada kita kelemahan JavaScript di sini.

01:23.460 --> 01:25.890
Ini bukan kesalahan teknis.

01:25.890 --> 01:28.050
Ini bukan kesalahan yang dilemparkan,

01:28.050 --> 01:31.640
tetapi ini adalah kesalahan logika dalam aplikasi kita.

01:31.640 --> 01:33.986
Sekarang, dari mana kesalahan ini berasal?

01:33.986 --> 01:37.490
Nah di sini, di JavaScript, saya menjangkau dua input ini dan

01:37.490 --> 01:39.612
ketika tombol diklik, pada akhirnya

01:39.612 --> 01:41.920
saya mendapatkan nilai dari dua elemen input

01:41.920 --> 01:45.300
dan saya meneruskannya di sini untuk ditambahkan.

01:45.300 --> 01:46.970
Dan di sini penting untuk diketahui

01:46.970 --> 01:50.100
bahwa dalam JavaScript ketika Anda mengakses nilai

01:50.100 --> 01:53.130
elemen input, itu selalu berupa string.

01:53.130 --> 01:55.790
Selalu, apa pun jenis inputnya.

01:55.790 --> 01:59.633
Jika ini bertipe angka atau bukan, ini selalu berupa string.

02:00.645 --> 02:03.995
Jadi saya mengoper dua string ke fungsi ini pada akhirnya, dan jika Anda

02:03.995 --> 02:05.890
menambahkan dua string dalam JavaScript,

02:05.890 --> 02:09.570
mereka akan digabungkan, bukan ditambahkan secara matematis.

02:09.570 --> 02:14.210
Itulah sebabnya kita melihat 105, 10 dan lima digabungkan.

02:14.210 --> 02:17.090
Inilah masalah dengan JavaScript di sini.

02:17.090 --> 02:19.980
Dan ini adalah sesuatu di mana TypeScript dapat membantu kita.

02:19.980 --> 02:22.360
Sekarang tanpa TypeScript, kita tentu saja

02:22.360 --> 02:24.380
bisa menambahkan pemeriksaan if di

02:24.380 --> 02:28.048
sini dan memeriksa apakah tipe num satu sama dengan number.

02:28.048 --> 02:33.048
Dan jika tipe num dua sama dengan angka, dan jika itu yang terjadi maka saya mengembalikan

02:34.030 --> 02:37.390
perhitungan saya seperti ini, jika tidak, saya mungkin

02:37.390 --> 02:40.588
akan melempar kesalahan atau setidaknya saya mengonversi

02:40.588 --> 02:43.304
keduanya menjadi angka dengan menambahkan

02:43.304 --> 02:47.428
plus di depan setiap parameter di sini.

02:47.428 --> 02:50.510
Sekarang ini adalah beberapa kode yang bisa kita tulis.

02:50.510 --> 02:53.023
Mungkin sedikit lebih halus dari ini dalam JavaScript.

02:53.023 --> 02:57.130
Dan dengan itu kami akan memastikan bahwa kami mengonversi angka

02:57.130 --> 03:00.670
atau input menjadi angka jika belum berupa angka.

03:00.670 --> 03:02.430
Jadi dengan itu, jika saya memuat

03:02.430 --> 03:05.220
ulang ini dan saya ulangi ini, sekarang kita mendapatkan

03:05.220 --> 03:07.590
15 karena kode kita yang diubah.

03:07.590 --> 03:09.350
Jadi tentu saja kita bisa melakukan ini dalam JavaScript.

03:09.350 --> 03:10.970
Dan ini adalah JavaScript vanila,

03:10.970 --> 03:13.440
tidak ada TypeScript-ish tentang hal itu.

03:13.440 --> 03:16.640
Tetapi kami menulis beberapa kode tambahan untuk kesalahan

03:16.640 --> 03:19.048
yang sebenarnya ingin saya cegah sejak awal.

03:19.048 --> 03:22.210
Saya tidak ingin hal ini terjadi.

03:22.210 --> 03:26.260
Saya ingin memastikan bahwa kita bahkan tidak bisa mengoper string di sini untuk menambahkan

03:26.260 --> 03:28.930
karena add harus menjadi fungsi yang hanya beroperasi

03:29.890 --> 03:31.020
pada angka.

03:31.020 --> 03:32.570
Sehingga di sana kita tidak perlu mengecek

03:33.428 --> 03:35.650
apakah kita mendapatkan angka atau tidak.

03:35.650 --> 03:37.000
Jadi, saya ingin mempertahankan fungsi

03:37.000 --> 03:38.500
ini dalam keadaan seperti sebelumnya.

03:38.500 --> 03:41.630
Saya ingin fungsi ini di sini, seperti ini.

03:41.630 --> 03:44.003
Dan di situlah TypeScript dapat membantu kita.

03:45.088 --> 03:45.921
Jadi TypeScript dapat

03:45.921 --> 03:48.900
membantu kita dalam situasi seperti yang baru saja saya tunjukkan.

03:48.900 --> 03:52.690
Sekarang untuk melihat bagaimana hal itu membantu kita, mari kita menginstalnya.

03:52.690 --> 03:56.590
Jadi pada typescriptlang. org, Anda dapat mengklik download.

03:56.590 --> 03:58.540
Dan di sana Anda akan belajar cara memasangnya.

03:58.540 --> 04:00.250
Dan kita sebenarnya akan menginstalnya

04:01.136 --> 04:02.880
dengan perintah ini yang menggunakan

04:02.880 --> 04:06.750
alat NPM dan alat NPM adalah bagian dari paket Node JS.

04:06.750 --> 04:10.210
Jadi meskipun kita tidak akan menulis kode Node JS di sini,

04:10.210 --> 04:12.910
kita masih perlu menginstal Node JS karena di

04:12.910 --> 04:14.760
belakang layar yang juga akan digunakan

04:14.760 --> 04:17.770
oleh beberapa alat yang kita gunakan.

04:17.770 --> 04:21.780
Dan ketika kita menginstal Node JS, kita juga menginstal NPM, Node

04:21.780 --> 04:24.956
Package Manager, sebuah alat yang kemudian dapat kita

04:24.956 --> 04:29.200
gunakan untuk menginstal TypeScript secara global di mesin kita.

04:29.200 --> 04:31.452
Jadi cukup kunjungi nodejs. org dan di sana, instal

04:31.452 --> 04:34.220
versi terbaru yang Anda temukan di sini.

04:34.220 --> 04:35.723
Cukup klik tombol ini.

04:36.586 --> 04:38.276
Kemudian akan mengunduh dan menginstal atau Anda dapat

04:38.276 --> 04:39.420
berjalan melalui penginstal itu.

04:39.420 --> 04:42.360
Ini didukung untuk semua sistem operasi.

04:42.360 --> 04:45.300
Dan setelah Anda menginstal Node JS, Anda akan

04:45.300 --> 04:47.936
dapat menjalankan perintah ini.

04:47.936 --> 04:51.440
Cukup buka terminal normal Anda atau command

04:51.440 --> 04:54.800
prompt dan kemudian salin perintah itu.

04:54.800 --> 04:57.223
Penting, pada Mac dan Linux, Anda mungkin perlu menambahkan

04:57.223 --> 04:59.412
sudo di depan ini untuk mendapatkan izin yang tepat.

04:59.412 --> 05:02.810
Pada Windows, ini tidak diperlukan.

05:02.810 --> 05:05.100
Jadi cukup pastikan Anda kemudian menginstal

05:05.100 --> 05:06.810
TypeScript dengan perintah ini.

05:06.810 --> 05:09.372
Masukkan kata sandi Anda seandainya Anda diminta untuk itu.

05:09.372 --> 05:12.176
Dan dengan itu, Anda telah menginstal TypeScript

05:12.176 --> 05:15.430
secara global pada mesin Anda, sekarang apa artinya ini?

05:15.430 --> 05:17.696
TypeScript terinstal.

05:17.696 --> 05:20.810
Sekarang ingat bahwa TypeScript adalah bahasa pemrograman,

05:20.810 --> 05:22.750
tetapi ini hanya bahasa pemrograman yang

05:22.750 --> 05:25.212
berfungsi karena kami juga memiliki kompiler ini,

05:25.212 --> 05:28.137
alat ini yang mengkompilasi ke dalam JavaScript.

05:28.137 --> 05:31.310
Jadi pada akhirnya, apa yang kami pasang di sini, itu

05:31.310 --> 05:33.296
adalah kompiler dan semua yang perlu

05:33.296 --> 05:36.116
diketahui untuk memahami kode TypeScript untuk

05:36.116 --> 05:39.020
mengubahnya menjadi JavaScript.

05:39.020 --> 05:41.036
Jadi dengan ini, kita telah menginstal

05:41.036 --> 05:44.460
kompiler dan kita dapat menjalankan perintah TSC sekarang

05:44.460 --> 05:47.210
yang memanggil kompiler TypeScript ini untuk

05:47.210 --> 05:50.870
mengkompilasi file TypeScript ke JavaScript.

05:50.870 --> 05:54.140
Jadi untuk melihat ini dalam proyek yang kita kerjakan ini, mari kita tambahkan

05:54.140 --> 05:56.563
file baru menggunakan ts. misalnya.

05:56.563 --> 05:58.677
Nama apa pun yang Anda inginkan, tetapi ekstensi harus . ts yang merupakan

05:58.677 --> 06:03.677
singkatan dari TypeScript.

06:05.100 --> 06:07.651
Sekarang, mari kita salin kode JavaScript tersebut

06:07.651 --> 06:09.850
ke dalam berkas TypeScript.

06:09.850 --> 06:13.100
Di sini, di VisualStudioCode, saya langsung mendapatkan beberapa kesalahan yang

06:13.100 --> 06:14.280
sekarang akan kita perbaiki.

06:14.280 --> 06:16.379
Dan ini adalah salah satu keuntungan besar dari TypeScript.

06:16.379 --> 06:18.915
Jika Anda menggunakan IDE yang tepat, dan rekomendasi

06:18.915 --> 06:22.710
kuat saya benar-benar adalah VisualStudioCode, dan saya akan kembali

06:22.710 --> 06:24.420
ke sana nanti.

06:24.420 --> 06:27.810
Kemudian Anda sudah mendapatkan dukungan yang bagus di IDE

06:27.810 --> 06:30.230
saat bekerja di dalam file TypeScript.

06:30.230 --> 06:34.710
Di sini, pada dasarnya, ini memungkinkan TypeScript menganalisis kode saya dan mengidentifikasi

06:34.710 --> 06:36.910
beberapa kelemahan.

06:36.910 --> 06:39.720
Yang mana itu bagus, karena itulah yang saya inginkan.

06:39.720 --> 06:42.110
Jadi di sini, dalam contoh ini, biarkan saya menghapus

06:42.110 --> 06:44.003
file JS JavaScript saja.

06:45.952 --> 06:48.360
Dan dengan itu, beberapa kesalahan hilang karena

06:48.360 --> 06:50.539
ia mengidentifikasi bahwa beberapa konstanta

06:50.539 --> 06:53.230
dan sebagainya digunakan dalam beberapa file.

06:53.230 --> 06:55.787
Tetapi masih memberi saya kesalahan di sana.

06:55.787 --> 06:57.700
Dan apa yang Anda lihat, misalnya, adalah bahwa

06:57.700 --> 07:00.108
ia tidak yakin apakah benar-benar ada properti nilai.

07:00.108 --> 07:03.200
Sekarang, itu adalah kesalahan yang bahkan tidak saya pertimbangkan

07:03.200 --> 07:05.720
sebelumnya dalam JavaScript, tetapi itu benar.

07:05.720 --> 07:08.350
Saya memilih elemen berdasarkan ID di sini.

07:08.350 --> 07:11.680
Sekarang TypeScript tidak dapat mengetahui apakah ini benar-benar akan berhasil.

07:11.680 --> 07:13.160
Mungkin ada kesalahan ketik di sini.

07:13.160 --> 07:15.940
Dalam hal ini, saya tidak akan dapat memilih elemen.

07:15.940 --> 07:17.704
Elemen ini tidak akan ada pada halaman.

07:17.704 --> 07:20.164
Jadi kita mungkin memiliki kesalahan ketik dan TypeScript tidak menganalisis

07:20.164 --> 07:22.472
kode HTML Anda untuk mengetahui apakah ini berfungsi.

07:22.472 --> 07:24.468
Jadi, untuk yang pertama, ini mungkin gagal.

07:24.468 --> 07:28.740
Tetapi, bahkan jika berhasil dan kita memilih elemen di sana, elemen tersebut

07:28.740 --> 07:30.910
tidak harus berupa elemen input.

07:30.910 --> 07:34.720
Bisa jadi elemen lain dan sebagian besar elemen HTML tidak memiliki

07:34.720 --> 07:37.450
properti nilai yang dapat Anda akses.

07:37.450 --> 07:38.630
Dan ini sudah sangat bagus.

07:38.630 --> 07:41.372
TypeScript memaksa kita untuk lebih eksplisit,

07:41.372 --> 07:44.060
untuk lebih jelas tentang maksud kita dan untuk

07:44.060 --> 07:46.130
memeriksa ulang kode kita.

07:46.130 --> 07:48.100
Dan misalnya di sini, dan Anda tidak perlu

07:48.100 --> 07:49.820
memahami semua sintaksis itu.

07:49.820 --> 07:52.172
Kita akan mempelajarinya selangkah demi selangkah sepanjang kursus.

07:52.172 --> 07:55.660
Tetapi sebagai contoh di sini kita bisa membiarkan TypeScript tahu bahwa

07:55.660 --> 07:58.204
kita yakin bahwa kita akan mendapatkan sebuah elemen

07:58.204 --> 08:00.080
dengan menambahkan tanda seru.

08:00.080 --> 08:04.170
Ini pada dasarnya memberitahu TypeScript bahwa ini tidak akan pernah menghasilkan null.

08:04.170 --> 08:06.370
Ini akan selalu menemukan elemen.

08:06.370 --> 08:08.420
Dan sebagai pengembang, saya tentu saja

08:08.420 --> 08:10.350
tahu bahwa ini akan selalu menemukan elemen

08:10.350 --> 08:11.920
karena saya memeriksa ulang ID

08:11.920 --> 08:14.763
dan saya melihat ya, saya memiliki ID itu di sini.

08:15.610 --> 08:17.270
Sekarang sebagai tambahan, saya juga

08:17.270 --> 08:19.500
tahu itu akan selalu menjadi elemen input.

08:19.500 --> 08:22.408
Jadi kita dapat menggunakan elemen input HTML, sintaks

08:22.408 --> 08:25.470
yang disebut typecasting yang juga akan saya jelaskan lebih

08:25.470 --> 08:27.746
detail nanti, untuk memberi tahu TypeScript

08:27.746 --> 08:30.327
jenis elemen apa yang akan digunakan.

08:30.327 --> 08:32.926
Kita juga bisa menerapkan ini pada elemen kedua.

08:32.926 --> 08:35.650
Jadi untuk lebih jelasnya, ini adalah

08:35.650 --> 08:37.510
sintaks TypeScript.

08:37.510 --> 08:39.520
Saya bisa menggunakan tanda seru di sini

08:39.520 --> 08:41.600
dan saya bisa menggunakan typecasting di

08:41.600 --> 08:44.786
sini karena kita berada dalam . ts, kita berada dalam file TypeScript.

08:44.786 --> 08:48.380
Kita akan mengkompilasi ini ke JavaScript.

08:48.380 --> 08:51.050
Hal ini tidak akan berfungsi dalam JavaScript vanila.

08:51.050 --> 08:53.427
Ini tidak tersedia di sana.

08:53.427 --> 08:56.300
Dengan ini, kita dipaksa untuk lebih jelas tentang niat

08:56.300 --> 08:58.460
kita dan untuk benar-benar memikirkan kode

08:58.460 --> 09:01.060
kita dan memeriksanya kembali, dan itu bagus.

09:01.060 --> 09:03.160
Tetapi, itu bahkan bukan keuntungan terbesarnya.

09:04.270 --> 09:06.820
Keuntungan terbesar adalah penambahan jenis.

09:06.820 --> 09:09.630
Itulah yang memberi nama TypeScript, bagaimanapun juga.

09:09.630 --> 09:12.282
Dan di sini saya tidak mengatakan apa pun tentang jenis data

09:12.282 --> 09:14.204
yang dioperasikan oleh fungsi ini.

09:14.204 --> 09:17.886
Jika kita mengarahkan kursor ke salah satu parameter ini,

09:17.886 --> 09:20.126
kita melihat apa pun di sini.

09:20.126 --> 09:22.828
Dan pada akhirnya, ini adalah TypeScript yang mengatakan kepada

09:22.828 --> 09:24.880
kita, "Saya tidak tahu apa yang ada di sana. Ini bisa berupa jenis nilai apa pun.

09:24.880 --> 09:27.162
Sekarang kita dapat menambahkan tipe yang lebih eksplisit dalam file TypeScript.

09:27.162 --> 09:31.960
Jadi bukan di file JavaScript tetapi di file TypeScript, dengan menambahkan titik dua di sini

09:31.960 --> 09:33.806
dan kemudian menentukan jenisnya.

09:33.806 --> 09:38.580
Misalnya, nomor.

09:38.580 --> 09:40.730
Melakukan ini di sini dan melakukan ini di sini.

09:40.730 --> 09:43.300
Dengan sintaksis tambahan yang dipahami oleh TypeScript,

09:43.300 --> 09:45.246
yang dipahami oleh compiler ini, kita

09:45.246 --> 09:47.928
memberi tahu TypeScript bahwa ini di sini akan bertipe

09:47.928 --> 09:50.960
number dan ini akan bertipe number.

09:50.960 --> 09:54.010
Dan oleh karena itu, sekarang kita mendapatkan error lagi di sini.

09:54.010 --> 09:56.126
Dan kita tidak hanya mendapatkan kesalahan

09:56.126 --> 09:58.060
ini di IDE, omong-omong.

09:58.060 --> 09:59.370
Kita juga mendapatkannya jika

09:59.370 --> 10:01.940
kita mencoba mengompilasi kode ini karena pada akhirnya

10:01.940 --> 10:03.820
itulah yang perlu kita lakukan, bukan?

10:03.820 --> 10:05.326
Sekarang untuk mengkompilasi ini, saya akan membuka terminal.

10:05.326 --> 10:08.670
Dan di sini saya hanya membuka terminal atau command prompt

10:08.670 --> 10:10.760
yang terintegrasi ke dalam IDE ini.

10:10.760 --> 10:13.683
Ini adalah prompt perintah sistem biasa.

10:14.947 --> 10:16.530
Terminal perintah sistem biasa yang saya

10:16.530 --> 10:18.110
gunakan di sini juga, hanya saja sudah dinavigasi

10:18.110 --> 10:19.533
ke dalam folder ini.

10:20.510 --> 10:22.446
Jadi jika Anda tidak menggunakan

10:22.446 --> 10:27.420
terminal IDE bawaan, Anda dapat menggunakan terminal IDE biasa tetapi CD

10:27.420 --> 10:30.265
menavigasi ke folder awal yang diekstrak

10:30.265 --> 10:33.960
di mana Anda menambahkan file TypeScript Anda.

10:33.960 --> 10:36.300
Dan setelah Anda berada di folder itu, Anda bisa menjalankan TSC.

10:36.300 --> 10:38.888
Itu akan memanggil compiler TypeScript

10:38.888 --> 10:42.980
yang kita pasang sebelumnya menggunakan dash ts. ts.

10:42.980 --> 10:47.980
Dan jika Anda menjalankan ini, Anda akan benar-benar mendapatkan error.

10:47.990 --> 10:50.728
Anda masih akan mendapatkan file JavaScript,

10:50.728 --> 10:53.267
karena secara default TypeScript masih

10:53.267 --> 10:57.460
akan mengkompilasinya ke JavaScript, Anda juga akan belajar cara

10:57.460 --> 11:00.050
menekan ini nanti dalam kursus itu.

11:00.050 --> 11:02.900
Tetapi, ini memberi Anda kesalahan kompiler saat melakukannya.

11:02.900 --> 11:05.904
Ini memberitahu Anda bahwa argumen bertipe string

11:05.904 --> 11:09.070
tidak dapat ditetapkan ke parameter bertipe angka.

11:09.070 --> 11:13.128
Jadi masalahnya di sini adalah TypeScript memahami bahwa

11:13.128 --> 11:16.550
apa yang kita dapatkan pada properti nilai elemen

11:16.550 --> 11:18.930
input kita akan berupa string.

11:18.930 --> 11:23.130
Kita juga melihat hal ini di sini dalam IDE.

11:23.130 --> 11:24.786
Dan kita tidak bisa mengoper ini ke add

11:24.786 --> 11:28.130
karena di sana, kita tidak menginginkan string, kita menginginkan angka.

11:28.130 --> 11:31.026
Jadi kita harus memperbaikinya dengan, misalnya, mengubah

11:31.026 --> 11:33.600
ini menjadi angka di sini dengan menambahkan plus.

11:33.600 --> 11:36.790
Dan segera setelah kita melakukan ini, kita dapat mengkompilasi

11:36.790 --> 11:39.708
kode ini lagi dengan mengulangi perintah itu dan sekarang

11:39.708 --> 11:42.406
kode ini terkompilasi tanpa kesalahan.

11:42.406 --> 11:45.225
Ini memberi kita ini menggunakan TypeScript. JavaScript dan sekarang menunjukkan beberapa kesalahan

11:45.225 --> 11:49.030
lagi karena tidak mengerti bahwa itu

11:49.030 --> 11:50.690
tidak akan pernah menggunakan kedua

11:50.690 --> 11:53.090
file pada saat yang sama di sini.

11:54.028 --> 11:55.373
Sekali lagi, ini semua adalah sesuatu yang akan menjadi

11:56.466 --> 11:58.530
lebih baik nanti dalam kursus setelah kita mengkonfigurasi ini.

11:58.530 --> 12:00.428
Kita bisa mengabaikan ini untuk saat ini.

12:00.428 --> 12:01.261
Jadi, ia memberi saya berkas ini.

12:02.588 --> 12:04.348
Dan jika kita membuka ini, kita melihat sesuatu yang menarik di sini.

12:04.348 --> 12:06.210
Kita melihat bahwa di sana, tentu saja, tipe-tipe kita sudah tidak ada.

12:06.210 --> 12:08.690
Pengecoran di sini sudah tidak ada.

12:08.690 --> 12:11.280
Kita memiliki JavaScript vanila lagi.

12:11.280 --> 12:13.308
Jadi jika kita melihat file TypeScript kita di sini,

12:13.308 --> 12:16.250
kita melihat bahwa di sana kita memiliki semua tambahan yang bagus ini.

12:16.250 --> 12:18.786
Tetapi seperti yang saya sebutkan, ini hanyalah fitur TypeScript.

12:18.786 --> 12:22.130
Ketika Anda mengkompilasi ke JavaScript, mereka digunakan untuk mengevaluasi

12:22.130 --> 12:24.600
kode Anda dan untuk menemukan potensi kesalahan, tetapi

12:24.600 --> 12:26.770
kemudian mereka dilucuti dan kita mendapatkan

12:26.770 --> 12:29.090
JavaScript biasa sebagai output.

12:29.090 --> 12:33.960
Jadi sekarang kita bisa pergi ke file HTML indeks kita

12:33.960 --> 12:37.010
dan mengimpor menggunakan ts. js dan itu penting.

12:37.010 --> 12:41.230
Selalu impor file JavaScript karena browser

12:41.230 --> 12:43.550
tidak dapat menjalankan TypeScript.

12:43.550 --> 12:45.990
Kita perlu mengimpor hasil kompilasi kita.

12:45.990 --> 12:49.480
Dan sekarang dengan itu, jika kita memuat ulang ini, kita memiliki

12:49.480 --> 12:52.108
kode yang berfungsi karena sekarang, kita memiliki

12:52.108 --> 12:55.750
kode JavaScript yang tepat di mana kita memperbaiki masalah ini dengan

12:55.750 --> 12:57.970
mentransmisikan input kita sebelum kita meneruskannya

12:59.410 --> 13:01.110
ke fungsi.

13:01.110 --> 13:03.010
Tetapi kami dapat memperbaiki masalah

13:03.986 --> 13:06.087
ini karena anotasi tipe kami di sini.

13:06.087 --> 13:08.100
Dan seperti yang Anda lihat, kami juga harus menulis

13:08.100 --> 13:10.720
beberapa bagian lain dari kode dengan cara yang lebih bersih.

13:10.720 --> 13:13.220
Dan itulah mengapa TypeScript luar biasa.

13:13.220 --> 13:15.400
Ini memaksa kita untuk menulis kode yang lebih

13:15.400 --> 13:17.880
baik, lebih bersih, dan lebih sedikit kesalahan.
