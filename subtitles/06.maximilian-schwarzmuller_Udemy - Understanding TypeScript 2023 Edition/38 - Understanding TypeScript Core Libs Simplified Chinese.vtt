WEBVTT

00:02.190 --> 00:03.570
- ：我们这里也有模块｡ 

00:03.570 --> 00:06.050
现在, 模块是一个选项, 我将跳过,

00:06.050 --> 00:13.400
因为它真的只有在我们了解了TypeScript中的模块以及如何连接多个文件后才有意义｡

00:13.400 --> 00:15.350
所以我们暂时忽略这个问题｡ 

00:15.350 --> 00:17.250
Lib是一个有趣的一个虽然｡ 

00:17.250 --> 00:25.650
Lib是一个选项, 允许您指定TypeScript知道哪些默认对象和功能｡

00:25.650 --> 00:28.580
我指的是像和dom一起工作这样的事情｡ 

00:28.580 --> 00:31.930
比如说索引｡  html中有一个按钮, 在这个按钮上我们说,

00:31.930 --> 00:33.700
“点击我｡ 现在, 当我们单击此按钮时,

00:33.700 --> 00:35.100
我们只想打印消息｡

00:35.100 --> 00:36.610
现在, 在应用程序 我们可以选择此按钮｡ 

00:36.610 --> 00:41.420
我们可以通过文档访问此按钮｡

00:41.420 --> 00:41.420
查询选择器｡ 

00:43.808 --> 00:44.641
例如, 选择我们找到的第一个按钮｡ 

00:44.641 --> 00:48.130
现在如果我们这样做, 那么这个工作｡ 

00:48.130 --> 00:51.580
这里没有错误类型｡ 

00:51.580 --> 00:53.000
如果我在按钮上添加一个EventListener,

00:53.000 --> 01:00.990
我会在这里得到一个错误, 因为TypeScript不能确定我们是否在这里找到了一个按钮｡

01:00.990 --> 01:04.010
现在我们可以在这行后面加上一个感叹号,

01:04.010 --> 01:08.860
我会在以后再讨论它的作用.

01:08.860 --> 01:11.320
它基本上告诉TypeScript,

01:11.320 --> 01:13.667
“别担心“, 这样的按钮会存在｡

01:13.667 --> 01:15.097
“我们在这里会得到一个价值｡  现在我们可以在这里添加一个单击事件｡ 

01:15.097 --> 01:19.470
然后找到一些匿名函数也许在一个控制台那里｡

01:19.470 --> 01:19.470
已单击日志｡ 

01:19.470 --> 01:24.920
现在, 有趣的是, 这里并不是我必须添加感叹号,

01:24.920 --> 01:26.450
我说过我会回来的, 而是如果我运行tsc,

01:26.450 --> 01:29.310
它会编译｡

01:29.310 --> 01:34.840
现在, TypeScript不应该抱怨文档在这里是未知的吗？

01:34.840 --> 01:39.690
它如何知道我们有这样一个文档, 常量或变量可用？

01:39.690 --> 01:48.350
它如何知道即使我们有可用的对象, 它也保存了一个包含querySelector方法的对象？

01:48.350 --> 01:51.690
它如何知道按钮是具有addEventListener方法的按钮？

01:51.690 --> 01:55.932
TypeScript是如何知道所有这些的？

01:55.932 --> 01:57.120
现在你可能会说：“它当然知道｡  因为在Vanilla JavaScript中,

01:57.120 --> 02:01.430
这是有效的代码, 但请记住, 当您编写TypeScript代码时,

02:01.430 --> 02:03.290
您不必为浏览器编写它｡

02:03.290 --> 02:05.580
您可能正在编写节点｡  js应用程序,

02:05.580 --> 02:11.310
实际上这一切都不起作用｡

02:11.310 --> 02:13.200
所以, 它之所以有效,

02:13.200 --> 02:14.630
是因为这个lib选项, 正如你所看到的,

02:14.630 --> 02:18.280
这里甚至没有设置它, 但是如果没有设置它, 那么就假设了一些默认值｡

02:18.280 --> 02:24.420
如果未设置, 则默认值取决于此处的JavaScript目标, 对于es6, 默认情况下,

02:24.420 --> 02:31.536
它包括es6中全球可用的所有功能｡

02:31.536 --> 02:33.270
例如, es6中可用的Map对象｡ 

02:33.270 --> 02:35.940
因此, 如果你使用Map, 它不会抱怨｡ 

02:35.940 --> 02:48.700
因此, 它假设所有在JavaScript中全局可用的es6功能也在TypeScript中可用｡

02:50.677 --> 02:51.780
此外, 它还假设所有DOM

02:51.780 --> 02:54.530
API都可用｡

02:54.530 --> 03:01.740
顺便说一下, 您可以在本模块末尾的讲座中链接的官方框中找到关于所有这些选项的详细描述｡

03:01.740 --> 03:04.550
因此, 长话短说, 如果没有设置lib选项, 则会假定一些默认值,

03:04.550 --> 03:11.520
这些通常是在浏览器中运行TypeScript所需的默认值｡

03:11.520 --> 03:13.760
所以, 所有的DOM API都消失了｡ 

03:13.760 --> 03:16.030
如果我们在中注释它, 我现在编译所有的东西,

03:16.030 --> 03:20.670
我肯定会得到一个错误, 因为现在他们在中注释它,

03:20.670 --> 03:24.780
我们不再有默认设置了｡

03:24.780 --> 03:26.010
相反, 我们现在说, “嘿,

03:26.010 --> 03:28.050
请包括“一些默认库”, 一些默认类型定义,

03:28.050 --> 03:30.370
我会在这个数组中给你｡

03:30.370 --> 03:32.437
如您所见, 我在这里没有传递任何描述､

03:32.437 --> 03:36.330
任何路径和任何值｡

03:36.330 --> 03:39.470
因此, 我现在要对TypeScript说的是,

03:39.470 --> 03:45.050
“嘿, 关于所有的默认值, 你知道, “请考虑到这一点｡

03:45.050 --> 03:45.050
什么都没有｡ 

03:45.050 --> 03:46.920
因此, 只有当它被注释掉时, 它才能工作,

03:46.920 --> 03:50.037
因为TypeScript将采用一些默认值｡

03:50.037 --> 03:55.300
如果我显式地设置默认值, 那么TypeScript当然会遵循我在这里设置的值｡

03:55.300 --> 03:57.410
比如这里, 它不知道文档,

03:57.410 --> 03:59.740
它甚至不知道控制台.

03:59.740 --> 04:02.680
因此, 我们需要设置这两个更合理的值,

04:02.680 --> 04:07.343
同样, 如果你点击控制空间, 这里你会得到自动完成｡

04:08.900 --> 04:10.930
例如, 我们可以添加dom｡ 

04:10.930 --> 04:12.360
这是一个标识符, 还有一些预定义的标识符,

04:12.360 --> 04:13.800
TypeScript可以理解这些标识符,

04:13.800 --> 04:15.800
同样, 您可以在官方文档中找到完整的列表｡

04:15.800 --> 04:21.070
此选项的文档也附在本讲座中｡

04:21.070 --> 04:22.840
因此, 这是TypeScript能够理解的标识符,

04:22.840 --> 04:26.070
它基本上可以解锁TypeScript中的所有DOM API,

04:26.070 --> 04:30.100
以便TypeScript能够理解您在这里所做的事情｡

04:30.100 --> 04:32.680
现在, 您已经看到它知道控制台,

04:32.680 --> 04:35.150
它知道文档, 等等

04:35.150 --> 04:37.040
既然我们现在使用的是下一代JavaScript,

04:37.040 --> 04:45.400
我们还应该添加es6选项, 这样TypeScript也可以理解所有全球可用的es6选项｡

04:45.400 --> 04:50.830
添加dom也是一个好主意｡  可迭代和脚本主机｡

04:50.830 --> 04:54.130
有了它, 我们将解锁您希望使用的所有核心JavaScript功能, 顺便说一句,

04:54.130 --> 05:02.530
这是您将目标设置为es6时得到的确切默认设置｡

05:02.530 --> 05:05.250
所以, 如果你在中注释它, 并像这样设置它,

05:05.250 --> 05:09.980
你会有完全相同的行为, 就像你根本没有指定lib一样｡

05:09.980 --> 05:13.550
现在, 我将在这里评论一下,

05:13.550 --> 05:15.860
然后编译｡

05:15.860 --> 05:17.959
同样, 设置它有点多余,

05:17.959 --> 05:20.920
只是想解释一下它的作用｡
