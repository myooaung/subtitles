WEBVTT

00:02.240 --> 00:04.220
Eğitmen: SourceMap hata ayıklama ve geliştirme

00:04.220 --> 00:06.560
konusunda bize yardımcı oluyor.

00:06.560 --> 00:09.540
Bunun ne işe yaradığını göstermek için her şeyi sourceMap

00:09.540 --> 00:12.000
ayarı olmadan derlememe izin verin.

00:12.000 --> 00:14.530
Şimdi tarayıcıya gidersek ve kodumuzun ne yaptığını

00:14.530 --> 00:17.420
anlamak istersek, geliştirici araçlarında kaynaklar

00:17.420 --> 00:21.620
sekmesine gidebilir ve orada JavaScript dosyalarımızı bulabiliriz.

00:21.620 --> 00:23.060
Şimdi bu dosyaların içine dalabiliriz

00:23.060 --> 00:25.090
ve iyi olan şey, bu dosyaların bizim için

00:25.090 --> 00:28.350
oldukça okunabilir olması, tabii ki insanlar için, çünkü sonunda

00:28.350 --> 00:30.940
JavaScript kodu içeriyorlar.

00:30.940 --> 00:35.200
Şimdi bu iyi ama ya daha karmaşık TypeScript kodumuz varsa ve

00:35.200 --> 00:38.940
derlenmiş JavaScript kodunda değil de TypeScript kodumuzda

00:38.940 --> 00:41.640
hata ayıklamak istiyorsak?

00:41.640 --> 00:43.060
Başka bir deyişle, burada JavaScript

00:43.060 --> 00:47.180
dosyalarını değil de TypeScript dosyalarını görsek iyi olurdu.

00:47.180 --> 00:50.000
sourceMap seçeneği ile oraya gidebilirsiniz.

00:50.000 --> 00:53.700
Bunu true olarak ayarlarsanız ve tsc komutunu tekrar çalıştırırsanız, şunları elde

00:53.700 --> 00:56.950
ettiğimizi görürsünüz . js, . harita dosyaları

00:56.950 --> 00:58.810
da oluşturuluyor.

00:58.810 --> 01:01.540
Şimdi onlara bakarsak oldukça garip dosyalar

01:01.540 --> 01:04.920
olduklarını görürüz ama temelde yaptıkları şey modern tarayıcılar

01:04.920 --> 01:07.110
ve geliştirici araçları tarafından anlaşılan

01:07.110 --> 01:10.170
bir köprü görevi görerek JavaScript dosyalarını girdi

01:10.170 --> 01:13.410
dosyalarına bağlamaktır.

01:13.410 --> 01:17.440
Bu dosyalar oluşturulduktan sonra yeniden yüklediğimde kaynaklar

01:17.440 --> 01:20.320
sekmesinde artık sadece JavaScript dosyalarımızı

01:20.320 --> 01:23.497
değil, TypeScript dosyalarımızı da görüyoruz.

01:23.497 --> 01:27.230
Ve hatta TypeScript dosyalarına kırılma noktaları yerleştirebiliriz

01:27.230 --> 01:29.320
ve örneğin şimdi düğmeye tıklarsam TypeScript

01:29.320 --> 01:31.650
dosyasında duraklar.

01:31.650 --> 01:34.720
Bu da tabii ki çok ama çok kullanışlı.

01:34.720 --> 01:37.670
Çünkü bu, hata ayıklama sürecimizi gerçekten bir üst

01:37.670 --> 01:40.260
seviyeye taşır çünkü temelde JavaScript dosyaları

01:40.260 --> 01:43.400
yerine doğrudan girdi dosyalarımızda, TypeScript dosyalarımızda

01:43.400 --> 01:45.670
çalışabiliriz.

01:45.670 --> 01:48.010
Şimdi yine de burada bunu yorumlayacağım çünkü burada

01:48.010 --> 01:50.800
oldukça basit bir projemiz var ve bu ekstra projelere sahip

01:50.800 --> 01:53.580
olmak istemiyorum. harita dosyaları burada yatıyor.

01:53.580 --> 01:55.950
Ancak bu, hata ayıklamayı basitleştirdiği için

01:55.950 --> 01:57.803
projelerde çok kullanışlıdır.
