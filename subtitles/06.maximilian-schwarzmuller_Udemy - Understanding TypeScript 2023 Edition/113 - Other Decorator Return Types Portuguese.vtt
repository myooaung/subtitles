WEBVTT

00:02.440 --> 00:05.240
Narrador: Vimos como podemos construir coisas incríveis

00:05.240 --> 00:08.120
com decoradores, fábricas de decoradores e depois

00:08.120 --> 00:11.740
também utilizando os valores de retorno dos decoradores que, nos

00:11.740 --> 00:12.790
exemplos, a classe

00:12.790 --> 00:14.930
decoradora nos permite basicamente substituir

00:14.930 --> 00:18.740
a classe à qual adicionamos o decorador por uma classe que é totalmente

00:18.740 --> 00:21.400
diferente, que se baseia na classe existente, como

00:21.400 --> 00:23.900
no nosso caso e que, portanto, pode acrescentar

00:23.900 --> 00:27.230
algumas funcionalidades.

00:27.230 --> 00:30.490
Agora você pode devolver valores também em outros decoradores,

00:30.490 --> 00:32.030
mas não em todos eles.

00:32.030 --> 00:35.430
Ou não em todos eles, o valor de retorno é respeitado.

00:35.430 --> 00:38.150
Agora, os decoradores onde você pode devolver algo são

00:38.150 --> 00:41.330
os decoradores que você pode acrescentar aos métodos e os decoradores

00:41.330 --> 00:43.540
que você acrescenta aos acessores.

00:43.540 --> 00:47.400
Portanto, aqui no setter log 2 e log 3 no método estes dois

00:47.400 --> 00:51.210
decoradores, log 2 e log 3 estes também poderiam devolver

00:51.210 --> 00:54.080
algo e o TypeScript o utilizaria.

00:54.080 --> 00:58.040
Os decoradores sobre propriedades e sobre parâmetros, claro,

00:58.040 --> 01:00.670
também podem devolver algo, mas o TypeScript

01:00.670 --> 01:02.500
irá ignorá-lo.

01:02.500 --> 01:05.030
Portanto, os valores de retorno não são suportados

01:05.030 --> 01:07.700
lá ou não são usados para ser precisos.

01:07.700 --> 01:09.690
Agora o que você pode devolver no log 3?

01:09.690 --> 01:12.680
Assim, em decoradores de método e em log 2, assim

01:12.680 --> 01:15.320
como em decoradores de acessorios.

01:15.320 --> 01:19.320
Você pode devolver um descritor de propriedade novinho em folha.

01:19.320 --> 01:22.050
Log 2 e log 3, que são os dois decoradores de que estou

01:22.050 --> 01:23.110
falando, certo?

01:23.110 --> 01:28.110
Log 2 e log 3, ambos tiram o descritor da propriedade, fora do método, pode-se

01:28.170 --> 01:30.510
dizer, eles estão anexados.

01:30.510 --> 01:33.034
Como um acessor é como um método,

01:33.034 --> 01:36.220
você tem uma função que é executada ali.

01:36.220 --> 01:39.072
Agora o descritor de propriedade é uma coisa JavaScript,

01:39.072 --> 01:41.980
como você sabe, se dermos uma olhada nesta página novamente

01:41.980 --> 01:44.500
e a recarregarmos, vemos que, por exemplo, para

01:44.500 --> 01:47.260
nosso decorador acessor, o descritor de propriedade

01:47.260 --> 01:50.497
é este objeto aqui que tem as propriedades configuráveis

01:50.497 --> 01:54.910
e enumeráveis e obter e definir propriedades.

01:54.910 --> 01:57.660
E para o decorador do método, nosso descritor é este

01:57.660 --> 01:59.330
objeto aqui que também tem valor

01:59.330 --> 02:02.290
configurável, enumerável e escrevível.

02:02.290 --> 02:04.410
E este é o JavaScript de baunilha.

02:04.410 --> 02:07.830
Você também tem descritores de propriedade em baunilha JavaScript.

02:07.830 --> 02:11.710
Eles permitem que você defina um imóvel com mais detalhes.

02:11.710 --> 02:14.430
É claro que você pode atribuir um valor a uma propriedade e

02:14.430 --> 02:15.990
já que estamos falando de um método,

02:15.990 --> 02:17.940
o valor é uma função neste caso, mas você também

02:17.940 --> 02:20.010
pode controlar se ele pode ser escrito, de modo

02:20.010 --> 02:22.910
que se ele pode ser alterado após ter sido criado, depois que o objeto

02:22.910 --> 02:24.700
tiver sido criado.

02:24.700 --> 02:25.950
Se é configurável, então se

02:25.950 --> 02:27.140
você pode alterar sua configuração

02:27.140 --> 02:29.570
e se você pode apagar esta propriedade.

02:29.570 --> 02:30.770
E se for enumerável, o que

02:30.770 --> 02:33.166
significa se ele aparecer quando você faz um loop

02:33.166 --> 02:35.410
através de seu objeto, por exemplo.

02:35.410 --> 02:36.810
E, portanto, um método por padrão,

02:36.810 --> 02:38.790
por exemplo, é definido como falso para

02:38.790 --> 02:40.930
que, se você usar um for em loop em um objeto,

02:40.930 --> 02:44.040
este método não seja impresso como propriedade.

02:44.040 --> 02:45.240
Para um acessor também temos

02:45.240 --> 02:47.180
configurável e enumerável, mas conseguimos

02:47.180 --> 02:49.750
e configuramos e lá você poderia, naturalmente, também,

02:49.750 --> 02:53.040
por exemplo, devolver um novo descritor que atribui um método de

02:53.040 --> 02:56.180
conjunto novinho em folha ou que de repente também acrescenta

02:56.180 --> 02:58.750
uma funcionalidade get.

02:58.750 --> 03:01.585
Portanto, aqui no log 2 e log 3 você pode retornar

03:01.585 --> 03:05.190
um novo objeto descritor no final e deixar claro para TypeScript

03:05.190 --> 03:08.020
que você o fará retornando ou definindo o tipo

03:08.020 --> 03:10.560
de retorno para o descritor de propriedade

03:10.560 --> 03:14.860
e aí você também pode definir a palavra-chave set, a palavra-chave

03:14.860 --> 03:17.010
get, a propriedade configurável

03:17.010 --> 03:24.800
ou a propriedade enumerável e alterar a forma como esse acessor ou método é configurado.

03:24.800 --> 03:27.560
Agora eu não quero fazer isso aqui para o acessor,

03:27.560 --> 03:29.800
não há nada interessante que eu possa fazer

03:29.800 --> 03:32.520
com ele, portanto não vou devolver um descritor

03:32.520 --> 03:36.400
de propriedade, mas na verdade vou mostrar um exemplo com o decorador

03:36.400 --> 03:40.080
do método onde vamos devolver algo e podemos construir interessante

03:40.080 --> 03:42.533
com a ajuda de decoradores.
