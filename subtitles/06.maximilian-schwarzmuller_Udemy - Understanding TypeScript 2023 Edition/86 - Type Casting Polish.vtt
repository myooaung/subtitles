WEBVTT

00:02.260 --> 00:03.920
Instruktor: Czyli związki dyskryminowane.

00:03.920 --> 00:05.750
Naprawdę, naprawdę przydatne.

00:05.750 --> 00:09.060
Kolejną bardzo przydatną funkcją jest rzutowanie typów.

00:09.060 --> 00:12.640
Rzutowanie typów pomaga powiedzieć TypeScriptowi,

00:12.640 --> 00:15.350
że jakaś wartość jest określonego typu,

00:15.350 --> 00:19.240
gdzie TypeScript nie jest w stanie sam tego wykryć, ale

00:19.240 --> 00:22.660
Ty jako programista wiesz, że tak będzie.

00:22.660 --> 00:25.030
Dobrym przykładem na to jest sytuacja, gdy

00:25.030 --> 00:27.120
dostaniemy X do czegoś w domenie.

00:27.120 --> 00:29.560
Powiedzmy, że tutaj mamy akapit w domenie

00:29.560 --> 00:32.180
tylko akapit, nic innego tam nie ma i jest to

00:32.180 --> 00:33.390
pusty akapit.

00:33.390 --> 00:35.190
Więc oczywiście jeśli to zapiszemy,

00:35.190 --> 00:37.150
to tutaj, na ekranie, nic nie widzimy.

00:37.150 --> 00:38.950
Teraz możemy uzyskać dostęp do tego akapitu

00:38.950 --> 00:40.543
z wnętrza naszego skryptu tutaj.

00:43.160 --> 00:48.160
Const akapit z selektorem zapytania o dokument P, np.

00:49.180 --> 00:51.890
Teraz kiedy używamy query selector i przekazujemy

00:51.890 --> 00:54.500
P jako selektor, więc wybiera po tagu P, to TypeScript

00:54.500 --> 00:57.070
faktycznie jest w stanie dowiedzieć się, jak

00:57.070 --> 00:59.510
widać, jeśli na niego najeżdżam, że będzie

00:59.510 --> 01:02.480
to element typu paragraph lub null, bo może taki element

01:02.480 --> 01:07.050
nie istnieje na stronie, ale to już inna sprawa.

01:07.050 --> 01:09.920
Zignorujmy na razie przypadek or null.

01:09.920 --> 01:12.400
Ważne jest to, że TypeScript faktycznie dowiaduje

01:12.400 --> 01:14.600
się, że jest to element akapitu.

01:14.600 --> 01:16.800
Teraz to się zmienia, jeśli wybierzemy według

01:16.800 --> 01:18.460
czegoś innego, powiedzmy ID.

01:18.460 --> 01:22.020
Nazwaliśmy to tutaj message-output, więc ten akapit

01:22.020 --> 01:23.920
ma ID message-output.

01:23.920 --> 01:25.890
Teraz my jako deweloper oczywiście wiemy,

01:25.890 --> 01:28.360
że przypisaliśmy ten identyfikator do tego akapitu,

01:28.360 --> 01:29.780
ale TypeScript tego nie wie.

01:29.780 --> 01:33.020
TypeScript nie nurkuje w nasze pliki HTML i

01:33.020 --> 01:34.590
nie analizuje ich.

01:34.590 --> 01:37.360
Jeśli więc teraz wybierzemy po tym ID,

01:37.360 --> 01:41.720
na przykład za pomocą getElementById, to zobaczymy, co TypeScript

01:41.720 --> 01:45.130
wywnioskuje, że jest to po prostu element HTML lub

01:45.130 --> 01:49.830
null, nie wie, który konkretnie element HTML to jest.

01:49.830 --> 01:52.720
Teraz, dla akapitu, to może nie mieć zbyt dużego znaczenia,

01:52.720 --> 01:54.830
może chcemy po prostu zrobić z nim rzeczy, które

01:54.830 --> 01:57.290
moglibyśmy zrobić z dowolnym elementem HTML, na przykład,

01:57.290 --> 01:59.990
uzyskać dostęp do jego zawartości tekstowej lub cokolwiek

01:59.990 --> 02:01.470
takiego.

02:01.470 --> 02:03.220
Ale co by było, gdybyśmy mieli tu wejście?

02:03.220 --> 02:07.750
Co jeśli faktycznie mieliśmy typ wejściowy tekst, i chcemy uzyskać

02:07.750 --> 02:10.430
wartość wprowadzoną przez użytkownika,

02:10.430 --> 02:12.760
więc dam mu ID user-input i teraz wybieram

02:12.760 --> 02:15.500
to w moim kodzie TypeScript.

02:15.500 --> 02:17.730
Więc tutaj wybieram przez ID user-input,

02:17.730 --> 02:21.530
i to już nie jest akapit, ale userInputElement.

02:21.530 --> 02:24.023
Teraz my jako developer wiemy, że tutaj sięgamy

02:24.909 --> 02:26.700
do tego elementu input, ale jak już

02:26.700 --> 02:28.530
mówiłem, TypeScript tego nie wie.

02:28.530 --> 02:31.140
TypeScript nie czyta naszego kodu HTML, więc

02:31.140 --> 02:34.435
TypeScript wie tylko, że jest to jakiś element HTML.

02:34.435 --> 02:37.860
Teraz, gdybym chciał ustawić właściwość

02:37.860 --> 02:40.902
value tego dlatego i próbowałby zrobić

02:40.902 --> 02:45.000
userInputElement. wartość równa hi there, widzisz,

02:45.000 --> 02:47.050
że faktycznie dostaję błąd.

02:47.050 --> 02:48.960
Dostaję błąd, ponieważ dla jednego, ten

02:48.960 --> 02:50.780
obiekt jest prawdopodobnie null.

02:50.780 --> 02:54.220
Możemy to naprawić, dodając wykrzyknik po tym,

02:54.220 --> 02:56.210
i wrócę do tego za chwilę, ale

02:56.210 --> 02:58.390
nawet wtedy nadal dostaję błąd,

02:58.390 --> 03:01.640
że wartość nie istnieje na typie Element HTML,

03:01.640 --> 03:03.890
ponieważ ten ogólny typ, który

03:03.890 --> 03:08.343
w zasadzie każdy element HTML ma jako typ, nie obsługuje właściwości,

03:08.343 --> 03:11.630
które są specyficzne dla, cóż, specyficznych

03:11.630 --> 03:14.510
elementów HTML.

03:14.510 --> 03:17.540
Tak więc musielibyśmy powiedzieć TypeScriptowi,

03:17.540 --> 03:20.860
że to co wybieramy nie tylko nie jest null, ale

03:20.860 --> 03:25.080
że jest również typu HTMLInputElement.

03:25.080 --> 03:28.240
I to właśnie możemy zrobić dzięki rzutowaniu typów.

03:28.240 --> 03:31.153
Teraz istnieją dwa sposoby rzutowania typu, dwie składnie,

03:31.153 --> 03:34.170
których możemy użyć, i są one równoważne.

03:34.170 --> 03:36.971
Jednym z nich jest to, że dodajemy coś przed rzeczą,

03:36.971 --> 03:41.920
którą chcemy przekonwertować, lub gdzie chcemy powiedzieć TypeScriptowi, aby wpisał.

03:41.920 --> 03:44.170
Dodajemy nawiasy kątowe otwierające

03:44.170 --> 03:45.810
i zamykające, a następnie pomiędzy

03:45.810 --> 03:49.480
tymi nawiasami typ rzeczy po nawiasach kątowych.

03:49.480 --> 03:51.223
W tym przypadku HTMLInputElement.

03:53.110 --> 03:54.970
I ten typ jest globalnie dostępny,

03:54.970 --> 03:57.963
ponieważ w moim pliku tsconfig włączam lib dom.

03:59.180 --> 04:00.810
Dzięki temu TypeScript

04:00.810 --> 04:03.830
wie, że cokolwiek wybierzemy tutaj po nawiasach

04:03.830 --> 04:06.530
kątowych będzie typu HTMLInputElement,

04:06.530 --> 04:08.950
a więc już nie narzeka.

04:08.950 --> 04:10.330
Więc to jest wersja pierwsza.

04:10.330 --> 04:12.830
Pozwól mi to skopiować i skomentować, a

04:12.830 --> 04:14.750
także pokazać alternatywę.

04:14.750 --> 04:18.000
Działa to absolutnie dobrze i możesz tego użyć.

04:18.000 --> 04:21.210
Teraz, jeśli znasz React, jednak wiesz, że tam,

04:21.210 --> 04:24.400
masz również taką składnię nawiasów kątowych

04:24.400 --> 04:26.970
wewnątrz JavaScript lub TypeScript,

04:26.970 --> 04:29.200
jeśli używasz tego do plików React,

04:29.200 --> 04:33.550
gdzie piszesz kod JSX w swoich komponentach React.

04:33.550 --> 04:36.060
Teraz, jeśli nie znasz React, to może nie powiedzieć ci wiele.

04:36.060 --> 04:40.800
Tylko pamiętaj, że podobna składnia istnieje w projektach React i tam nawiasy kątowe

04:40.800 --> 04:43.320
nie są używane do przekazywania jakichkolwiek

04:43.320 --> 04:47.480
informacji dotyczących typów, których używasz, ale zamiast tego są parsowane

04:47.480 --> 04:50.390
przez niektóre narzędzia do budowania i przez React,

04:50.390 --> 04:53.200
ostatecznie, aby wiedzieć, co chcesz renderować na

04:53.200 --> 04:54.390
ekranie.

04:54.390 --> 04:56.750
Czyli całkowicie oderwany od TypeScript.

04:56.750 --> 04:59.880
Aby nie zderzyć się z tą składnią JSX, zespół TypeScript

04:59.880 --> 05:01.900
zapewnia alternatywę dla tego rzutowania

05:01.900 --> 05:04.350
typu kątowego nawiasów.

05:04.350 --> 05:06.450
Możesz także dodać coś po rzeczy, którą

05:06.450 --> 05:07.920
chcesz wpisać w obsadzie,

05:07.920 --> 05:09.960
więc po tym zaznaczeniu w tym przypadku,

05:09.960 --> 05:12.600
a to coś to słowo kluczowe as.

05:12.600 --> 05:14.740
I tutaj znowu dodajesz typ, do

05:14.740 --> 05:16.750
którego chcesz to rzucić.

05:16.750 --> 05:19.970
To mówi TypeScriptowi, że wyrażenie

05:19.970 --> 05:23.730
przed nim, w tym przypadku to wyrażenie tutaj,

05:23.730 --> 05:27.405
da wartość typu HTMLInputElement.

05:27.405 --> 05:30.067
Dlatego też, ponownie, nie otrzymujemy żadnego błędu.

05:30.067 --> 05:31.650
Więc jest to alternatywa

05:31.650 --> 05:33.940
i możesz użyć obu składni, cokolwiek

05:33.940 --> 05:36.350
wolisz, po prostu powinieneś starać

05:36.350 --> 05:38.990
się być spójny w całym projekcie, aby

05:38.990 --> 05:42.377
nie zmieniać tych dwóch składni.

05:42.377 --> 05:45.220
Dzięki temu możesz przekazać te cenne dodatkowe

05:45.220 --> 05:47.480
informacje do TypeScript i sprawić,

05:47.480 --> 05:50.400
że kod taki jak ten będzie działał, nawet jeśli TypeScript

05:50.400 --> 05:52.760
sam nie byłby w stanie dowiedzieć się,

05:52.760 --> 05:56.000
że to tutaj daje HTMLInputElement.

05:56.000 --> 05:57.940
Oczywiście, ponieważ zmuszasz TypeScript

05:57.940 --> 06:00.420
do używania tego typu, twoim obowiązkiem jako

06:00.420 --> 06:02.200
dewelopera jest zapewnienie, że

06:02.200 --> 06:05.620
cokolwiek to wyrażenie da, będzie tego typu.

06:05.620 --> 06:07.700
W przeciwnym razie możesz uzyskać błąd czasu uruchamiania

06:07.700 --> 06:09.920
lub nieoczekiwane zachowanie w czasie uruchamiania,

06:09.920 --> 06:12.780
jeśli spróbujesz wejść w interakcję z tym elementem w sposób, który faktycznie

06:12.780 --> 06:14.423
nie jest obsługiwany.

06:15.610 --> 06:18.060
Tak więc, rzutowanie typów jest potężną funkcją.

06:18.060 --> 06:20.490
Tak samo jest z tym wykrzyknikiem tutaj.

06:20.490 --> 06:22.590
Właściwie zgłębiłem to trochę

06:22.590 --> 06:24.820
wcześniej w kursie już.

06:24.820 --> 06:27.470
Ten wykrzyknik pozwala nam powiedzieć TypeScriptowi,

06:27.470 --> 06:31.090
że wyrażenie przed nim nigdy nie da wyniku null.

06:31.090 --> 06:33.170
I jest to wymagane dla niektórych wyrażeń,

06:33.170 --> 06:35.070
takich jak to tutaj, gdy wybierasz

06:35.070 --> 06:38.010
coś z dom, które może zwrócić null.

06:38.010 --> 06:40.980
Jeśli wiemy jako deweloper, że to nigdy nie zwróci

06:40.980 --> 06:43.690
null, to możemy użyć tego wykrzyknika.

06:43.690 --> 06:45.470
W przeciwnym razie, a tego już

06:45.470 --> 06:48.248
się nauczyłeś, chcę to tylko powtórzyć.

06:48.248 --> 06:49.380
W przeciwnym razie, jeśli

06:49.380 --> 06:52.600
nie jesteś pewien, że to nie zwróci null, możesz użyć sprawdzenia if.

06:52.600 --> 06:56.070
Więc mógłbyś sprawdzić, czy userInputElement jest prawdziwy,

06:56.070 --> 06:57.510
a zatem nie jest null, a następnie

06:57.510 --> 06:59.440
użyć go tam.

06:59.440 --> 07:02.720
Teraz musiałem usunąć rzutowanie typu w tym przypadku, ponieważ

07:02.720 --> 07:04.670
jeśli robimy rzutowanie typu tutaj, mówimy

07:04.670 --> 07:07.170
również TypeScriptowi, że to nie będzie null, a ponieważ

07:07.170 --> 07:10.470
nie jestem pewien tego, nie mogę rzucić tutaj.

07:10.470 --> 07:13.120
Zamiast tego muszę to zrobić tutaj, gdy używam

07:13.120 --> 07:14.290
wartości, a zatem chcę

07:14.290 --> 07:16.600
to zrobić przed dostępem do właściwości

07:16.600 --> 07:19.820
value, dodając jako HTMLInputElement w ten sposób.

07:19.820 --> 07:21.530
Oczywiście, że tak, jednak to by się nie udało.

07:21.530 --> 07:24.060
Jest to nieprawidłowa składnia, próbowałbyś

07:24.060 --> 07:28.030
uzyskać dostęp do właściwości value na rzeczy HTMLInputElement,

07:28.030 --> 07:30.280
a to nawet nie ma sensu.

07:30.280 --> 07:33.010
Musimy po prostu zawinąć to wyrażenie w nawias, następnie

07:33.010 --> 07:35.670
upewnić się, że jest to oceniane jako pierwsze, a następnie

07:35.670 --> 07:37.590
próbujemy uzyskać dostęp do wartości

07:37.590 --> 07:39.480
na wyniku tego wyrażenia.

07:39.480 --> 07:41.650
A teraz mamy alternatywę dla używania

07:41.650 --> 07:42.893
wykrzyknika.
