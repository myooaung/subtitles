WEBVTT

00:02.300 --> 00:04.800
المدرب: الآن مرتبط بشكل فضفاض بالتسلسل الاختياري

00:04.800 --> 00:06.930
، لدينا ميزة أخرى لطيفة في TypeScript ، والتي

00:06.930 --> 00:09.550
تساعدنا في التعامل مع البيانات الفارغة.

00:09.550 --> 00:12.820
وتسمى هذه الميزة الاندماج العدمي.

00:12.820 --> 00:15.900
تخيل الآن أن لديك بعض البيانات ، وبعض المدخلات

00:15.900 --> 00:17.530
، حيث لا تعرف على وجه اليقين

00:17.530 --> 00:19.830
ما إذا كانت فارغة أو غير محددة أو ما

00:19.830 --> 00:23.320
إذا كانت بالفعل جزءًا صالحًا من البيانات.

00:23.320 --> 00:28.180
على سبيل المثال ، يمكن أن يكون userInput فارغًا ، دعنا نقول.

00:28.180 --> 00:31.040
الآن ، مرة أخرى ، هنا ، قمنا بتشفير هذا في TypeScript

00:31.040 --> 00:33.580
، ومن ثم تعرف TypeScript أن هذا فارغ ، ولكن

00:33.580 --> 00:36.500
إذا كنت تجلب هذا من خلال بعض واجهة برمجة تطبيقات

00:36.500 --> 00:38.650
DOM ، حيث لا تعرفها على وجه اليقين ،

00:38.650 --> 00:41.320
أو إذا كنت تحصل على هذا من النهاية الخلفية ،

00:41.320 --> 00:42.970
فقد لا تعرف مقدمًا وقد لا يعرف

00:42.970 --> 00:46.510
TypeScript ما إذا كان هذا فارغًا أم لا.

00:46.510 --> 00:50.650
إذا كنت تريد بعد ذلك تخزين هذا في ثابت أو متغير آخر مثل المخزن

00:50.650 --> 00:52.803
Data ، فقد ترغب في التأكد من أنه

00:54.090 --> 00:56.150
إذا كان فارغًا ، فإنك تقوم بتخزين

00:56.150 --> 00:58.760
قيمة احتياطية.

00:58.760 --> 01:03.560
يمكنك الآن القيام بذلك باستخدام عامل التشغيل المنطقي OR ، حيث تقوم بتخزين

01:03.560 --> 01:05.330
القيمة الافتراضية ، حيث تحصل

01:05.330 --> 01:06.740
على القيمة الثانية للقيمة

01:06.740 --> 01:08.940
الأولى غير محددة أو فارغة ، إذا كانت

01:08.940 --> 01:11.550
خاطئة على وجه الدقة.

01:11.550 --> 01:13.690
تكمن المشكلة في هذا الأسلوب في

01:13.690 --> 01:17.110
أنه إذا لم يكن هذا في الواقع فارغًا أو غير معرف ،

01:17.110 --> 01:18.960
ولكن دعنا نقول سلسلة فارغة

01:18.960 --> 01:21.740
، فسيتم التعامل معها كقيمة خاطئة ، وبالتالي

01:21.740 --> 01:25.600
ستبدأ القيمة الاحتياطية الافتراضية.

01:25.600 --> 01:28.850
حتى لو كنت تعزية. سجل البيانات المخزنة

01:28.850 --> 01:31.700
هنا ، سترى أن هذا يطبع افتراضيًا.

01:31.700 --> 01:33.430
الآن ربما هذا ما تريده

01:33.430 --> 01:36.540
، وفي هذه الحالة ، هذا حل جيد تمامًا.

01:36.540 --> 01:38.800
ولكن إذا كنت تريد الاحتفاظ بإدخال

01:38.800 --> 01:40.730
المستخدم ، أو أي بيانات تعمل

01:40.730 --> 01:44.110
معها ، ما لم تكن حقًا خالية أو غير محددة ، فأنت بحاجة

01:44.110 --> 01:45.530
إلى نهج آخر لأننا هنا

01:45.530 --> 01:48.970
سنتعامل مع هذا على أنه خطأ ونستخدم الاحتياطية.

01:48.970 --> 01:51.720
ولكن ربما تريد الاحتفاظ بإدخال فارغ فقط أو

01:51.720 --> 01:54.370
غير محدد يجب التعامل معه بشكل مختلف.

01:54.370 --> 01:56.390
لذلك ، يحتوي TypeScript أيضًا

01:56.390 --> 01:58.780
على عامل ، مشغل علامة الاستفهام المزدوجة

01:58.780 --> 02:02.210
، وهذا ما يسمى عامل الاندماج الصفري.

02:02.210 --> 02:05.250
وهذا يعني أنه إذا كان هذا فارغًا أو غير

02:05.250 --> 02:06.730
معرف ، وهذا حقًا فقط

02:06.730 --> 02:09.180
، ليس سلسلة فارغة ، وليس صفرًا ،

02:09.180 --> 02:11.540
حقًا خالية أو غير معرَّف ، فسنستخدم

02:11.540 --> 02:13.370
الاحتياطي.

02:13.370 --> 02:16.700
إذا لم تكن فارغة أو غير محددة ، فسنستخدم هذه القيمة.

02:16.700 --> 02:19.220
في هذا السيناريو هنا ، هذا تجميع ، وكما ترون

02:19.220 --> 02:21.400
، قمنا بتخزين السلسلة الفارغة ، وبالتالي

02:21.400 --> 02:23.060
، أنا لا أطبع أي شيء هنا ، هذه هي

02:23.060 --> 02:24.720
السلسلة الفارغة.

02:24.720 --> 02:26.060
إذا كان هذا من ناحية أخرى

02:26.060 --> 02:28.550
، دعنا نقول ، غير محدد هنا ، وقمت بحفظه ، كما

02:28.550 --> 02:30.400
ترى ، الآن يقول افتراضي ، لأنه

02:30.400 --> 02:32.980
بفضل عامل تشغيل علامة الاستفهام المزدوجة

02:32.980 --> 02:35.500
، نعود إلى هذا ، حسنًا ، احتياطي ، وبالتالي

02:35.500 --> 02:38.320
وصلنا إلى ميزة أخرى مفيدة للغاية يمكن أن تساعدك

02:38.320 --> 02:40.580
في التعامل مع القيم الفارغة أو غير المحددة

02:40.580 --> 02:42.773
بأمان.
