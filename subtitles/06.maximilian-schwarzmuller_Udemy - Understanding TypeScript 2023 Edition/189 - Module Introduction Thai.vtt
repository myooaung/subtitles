WEBVTT

00:02.440 --> 00:03.273
ผู้สอน: ในหลักสูตรนี้

00:03.273 --> 00:05.280
คุณได้เรียนรู้มากมายเกี่ยวกับ TypeScript

00:05.280 --> 00:07.850
และมีกรณีการใช้งานหนึ่งโดยเฉพาะ สถานการณ์หนึ่งที่คุณสามารถใช้

00:07.850 --> 00:13.310
TypeScript ได้ด้วย ซึ่งเรายังไม่ได้ดูมาก่อน

00:13.310 --> 00:16.100
เราเน้นไปที่การใช้ TypeScript ในการเขียนโค้ด

00:16.100 --> 00:18.870
JavaScript ของเว็บไซต์เบราว์เซอร์เป็นหลัก

00:18.870 --> 00:20.590
และนั่นถือว่าใช้ได้เลยทีเดียว

00:20.590 --> 00:22.740
และอาจเป็นกรณีการใช้งานที่พบได้บ่อยที่สุดในการทำงานกับ

00:22.740 --> 00:25.850
TypeScript แต่นั่นไม่ใช่กรณีเดียว

00:25.850 --> 00:27.800
คุณยังสามารถใช้ TypeScript

00:27.800 --> 00:30.390
เพื่อสร้างโหนด แอปพลิเคชัน js รวมถึง

00:30.390 --> 00:34.850
Express ที่เป็นที่นิยมเช่นกัน

00:34.850 --> 00:34.850
js กรอบ

00:34.850 --> 00:38.320
ตอนนี้ในขณะที่โหนด js เพียงอย่างเดียวไม่สามารถเรียกใช้

00:38.320 --> 00:40.880
TypeScript ได้ ในโมดูลนี้ คุณจะได้เรียนรู้วิธีที่คุณยังคงใช้

00:40.880 --> 00:45.710
TypeScript เพื่อเขียนโหนดได้

00:45.710 --> 00:45.710
js

00:45.710 --> 00:49.130
scripts และเราจะสร้างเว็บแอปพลิเคชันที่เรียบง่ายมาก

00:49.130 --> 00:51.730
REST API ที่ง่ายมากที่นี่ ซึ่งเราใช้

00:51.730 --> 00:53.810
TypeScript บนฝั่งเซิร์ฟเวอร์ด้วย

00:53.810 --> 00:57.310
Node js และ Express

00:57.310 --> 01:01.400
เช่นเดียวกับในส่วนการตอบสนอง นี่คือข้อจำกัดความรับผิดชอบเล็กน้อยสำหรับส่วนนี้

01:01.400 --> 01:04.000
ส่วนนี้ที่นี่ต้องการความรู้ของโหนดและ

01:04.000 --> 01:05.470
Express

01:05.470 --> 01:07.880
มันเกี่ยวกับการใช้ TypeScript กับ Node, Express

01:07.880 --> 01:10.340
ไม่ใช่การสอน Node ตั้งแต่เริ่มต้น

01:10.340 --> 01:11.880
ดังนั้น หากคุณไม่เคยได้ยินเกี่ยวกับ

01:11.880 --> 01:13.210
Node และ Express มาก่อน

01:13.210 --> 01:15.430
ลองใช้แหล่งข้อมูลเฉพาะบางอย่าง เช่น

01:15.430 --> 01:20.600
Node ของฉัน js หลักสูตรคู่มือฉบับสมบูรณ์เป็นอันดับแรกก่อนที่คุณจะสำรวจส่วนนี้

01:20.600 --> 01:21.593
มาดำน้ำกันเถอะ
