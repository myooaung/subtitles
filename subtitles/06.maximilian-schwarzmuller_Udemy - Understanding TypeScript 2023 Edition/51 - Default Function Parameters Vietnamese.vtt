WEBVTT

00:02.170 --> 00:03.830
Hãy dính vào các chức năng.

00:03.830 --> 00:07.120
Một tính năng thú vị khác có sẵn trong JavaScript hiện

00:07.120 --> 00:09.450
đại là bạn có thể gán các đối số mặc định

00:09.450 --> 00:11.033
cho các tham số hàm.

00:11.880 --> 00:13.830
Giả sử ở đây trong chức năng thêm của

00:13.830 --> 00:17.720
chúng tôi, vì một số lý do, chúng tôi muốn có một giá trị mặc định cho b.

00:17.720 --> 00:20.180
Vì vậy, chúng tôi biết rằng chúng tôi muốn có thể cộng hai số với nhau.

00:20.180 --> 00:23.850
Nhưng trong trường hợp bạn gọi hàm này chỉ với một số,

00:23.850 --> 00:28.130
chúng tôi sẽ giả sử một giá trị mặc định cho đối số thứ hai hoặc

00:28.130 --> 00:29.990
cho tham số thứ hai.

00:29.990 --> 00:32.120
Chúng tôi có thể làm như vậy bằng cách thêm một dấu bằng

00:32.120 --> 00:34.980
ở đây trong danh sách tham số và sau đó đặt giá trị mặc định của chúng tôi.

00:34.980 --> 00:36.920
Mà tất nhiên phải phù hợp với loại của chúng tôi.

00:36.920 --> 00:40.020
Ví dụ: một hoặc bất kỳ giá trị mặc định nào.

00:40.020 --> 00:42.770
Và bây giờ điều này cho phép chúng ta gọi hàm này

00:42.770 --> 00:44.080
chỉ với một đối số.

00:44.080 --> 00:46.700
Vì vậy, tôi có thể gọi nó như thế này và TypeScript sẽ không

00:46.700 --> 00:48.830
phàn nàn vì nó phát hiện ra rằng chúng ta có một

00:48.830 --> 00:50.200
đối số mặc định ở đây, đối số này

00:50.200 --> 00:51.860
sau đó được lấy cho b.

00:51.860 --> 00:53.910
Và do đó, ở đây tôi nhận được

00:53.910 --> 00:58.910
kết quả là 6 vì b mặc định của tôi là 1 và tôi thêm 5, tức là 6. Bây giờ,

00:59.130 --> 01:03.113
một lưu ý quan trọng về các đối số mặc định ở đây.

01:04.010 --> 01:07.090
Họ phải là người cuối cùng trong danh sách.

01:07.090 --> 01:10.710
Ví dụ: nếu bạn chỉ định đối số mặc định cho a, chúng

01:10.710 --> 01:12.640
tôi sẽ gặp sự cố, tại sao?

01:12.640 --> 01:15.290
Bởi vì các đối số mặc định không bị bỏ qua

01:15.290 --> 01:16.840
khi bạn gọi một hàm.

01:16.840 --> 01:19.490
Vì vậy, nếu tôi gọi một hàm ở đây với một đối số,

01:19.490 --> 01:21.990
thì các đối số tôi đang chuyển vào đây sẽ được

01:21.990 --> 01:25.060
chuyển đến các tham số theo cùng một thứ tự.

01:25.060 --> 01:27.240
Vì vậy, việc gọi hàm với một đối số, trong trường

01:27.240 --> 01:29.900
hợp này là năm đối số, chuyển một đối số này sang đối

01:29.900 --> 01:32.400
số đầu tiên ở đây trong danh sách tham số.

01:32.400 --> 01:34.150
Và vì đối số thứ hai không được

01:34.150 --> 01:37.660
cung cấp theo mặc định, nên nó không phải là tùy chọn.

01:37.660 --> 01:40.920
Và do đó, chúng tôi không cung cấp đối số thứ hai nào cả.

01:40.920 --> 01:43.730
Vì vậy, TypeScript hoặc JavaScript thực

01:43.730 --> 01:46.800
sự không nhìn vào định nghĩa hàm của bạn và đoán

01:46.800 --> 01:50.650
rằng bạn có thể muốn bỏ qua đối số mặc định và cung cấp giá trị

01:50.650 --> 01:53.290
của mình cho đối số không mặc định.

01:53.290 --> 01:55.740
Thay vào đó, nó chỉ đơn giản là tuân theo thứ tự.

01:55.740 --> 01:59.720
Và do đó, bạn nên đặt mặc định từ bên phải.

01:59.720 --> 02:01.830
Vì vậy, hãy đảm bảo rằng các tham

02:01.830 --> 02:04.010
số mà bạn không chấp nhận đối số mặc

02:04.010 --> 02:07.523
định xuất hiện trước các tham số mặc định của bạn.
