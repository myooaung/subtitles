WEBVTT

00:02.220 --> 00:03.053
-: Lassen Sie uns weitermachen.

00:03.053 --> 00:04.950
Wir haben hier die Option outFile, diese

00:04.950 --> 00:07.730
Option ist für uns im Moment nicht wichtig, sie wird im Moment

00:07.730 --> 00:09.440
nicht funktionieren.

00:09.440 --> 00:12.340
Interessanter für uns sind outDIR und rootDir.

00:12.340 --> 00:14.720
Je größer Ihr Projekt wird, desto mehr

00:14.720 --> 00:17.640
möchten Sie Ihre Dateien organisieren.

00:17.640 --> 00:19.690
Normalerweise wollen Sie Ihre

00:19.690 --> 00:21.770
Dateien nicht einfach in Ihrem

00:21.770 --> 00:24.120
Stammordner herumliegen haben.

00:24.120 --> 00:26.580
Stattdessen sieht man in Projekten oft einen Quellordner,

00:26.580 --> 00:28.080
einen Ordner "dist", einen weiteren

00:28.080 --> 00:31.240
Ordner und einen weiteren Ordner.

00:31.240 --> 00:35.690
Der dist-Ordner hat also die Aufgabe, die gesamte Ausgabe, also alle JavaScript-Dateien,

00:35.690 --> 00:37.800
zu speichern.

00:37.800 --> 00:41.380
Und der Source-Ordner könnte alle unsere TypeScript-Dateien enthalten.

00:41.380 --> 00:44.643
Wir können also die TypeScript-Dateien in den Quellordner verschieben,

00:44.643 --> 00:47.430
und wenn ich jetzt den JavaScript-Ordner lösche, haben

00:47.430 --> 00:49.891
wir das Problem, dass, wenn wir alles kompilieren,

00:49.891 --> 00:53.167
diese TypeScript-Dateien kompiliert werden, weil TypeScript,

00:53.167 --> 00:55.768
der Compiler, zwar in Unterordner schaut, aber die

00:55.768 --> 01:00.050
Ausgabe neben unseren Eingabedateien liegt.

01:00.050 --> 01:02.760
Und das können wir zum Beispiel mit dem outDir

01:02.760 --> 01:03.660
steuern.

01:03.660 --> 01:07.117
Wenn wir outDir setzen, können wir den Typen mit dem Compiler

01:07.117 --> 01:10.900
mitteilen, wo die erstellte Datei gespeichert werden soll.

01:10.900 --> 01:13.580
Wir könnten dies auf Ablenkung einstellen.

01:13.580 --> 01:17.037
Wenn wir das tun, werden Sie beim Ausführen von Chia Seed sehen,

01:17.037 --> 01:19.560
dass die JavaScript-Dateien in der Tat nicht

01:19.560 --> 01:21.500
im Quellordner, sondern im dist-Ordner

01:21.500 --> 01:23.170
abgelegt sind.

01:23.170 --> 01:26.340
Jetzt müssen wir nur noch unseren Index anpassen. html-Datei, und dort auf dist/app

01:26.340 --> 01:31.630
verweisen. js und dist/analytics.

01:31.630 --> 01:31.630
js

01:31.630 --> 01:33.880
oder alternativ den Index verschieben. html-Datei in den dist-Ordner

01:33.880 --> 01:36.172
zu verschieben, aber dann würde unser def-Server im Moment nicht

01:36.172 --> 01:37.550
mehr richtig funktionieren.

01:37.550 --> 01:39.875
Passen wir also einfach diese Importe

01:39.875 --> 01:44.140
an, und schon haben wir eine funktionierende Anwendung, wie Sie

01:44.140 --> 01:45.270
sehen, aber jetzt

01:45.270 --> 01:48.480
mit einer saubereren Projektstruktur.

01:48.480 --> 01:49.650
Das Gute daran ist, wenn wir

01:49.650 --> 01:51.530
hier einen Unterordner haben, sagen wir

01:51.530 --> 01:52.980
einen Analytics-Ordner, und

01:52.980 --> 01:54.893
wir haben unsere TypeScript-Datei darin,

01:54.893 --> 01:57.350
dann, wenn wir neu kompilieren, und es spielt keine

01:57.350 --> 02:00.373
Rolle, ob Sie es mit diesem Befehl oder dem Watch-Modus tun, wird

02:00.373 --> 02:03.300
diese Ordnerstruktur, die Sie im Quellordner haben, im Dist-Ordner

02:03.300 --> 02:05.640
repliziert, was natürlich sehr praktisch ist, weil

02:05.640 --> 02:08.813
das sicherstellt, dass Sie die Dateien im Grunde so importieren können,

02:08.813 --> 02:14.110
wie Sie sie auch im Quellordner importieren würden, so dass die Struktur, die Sie dort eingerichtet haben, erhalten

02:14.110 --> 02:16.640
bleibt.

02:16.640 --> 02:18.800
Jetzt können Sie auch das Stammverzeichnis

02:18.800 --> 02:21.230
festlegen und dies speziell auf den Ordner,

02:21.230 --> 02:23.800
in dem Ihre Dateien gespeichert sind, wie in diesem

02:23.800 --> 02:25.202
Beispiel, Quelle, um sicherzustellen,

02:25.202 --> 02:30.030
dass die Arten von Compiler nicht in unseren Ordnern suchen.

02:30.030 --> 02:31.530
Das ist auch etwas, was Sie mit der

02:31.530 --> 02:34.003
Option "Einschließen" da unten tun können, richtig?

02:34.870 --> 02:36.007
Aber mit dem Stammverzeichnis

02:36.007 --> 02:38.781
werden die Compilertypen nicht nur diesen Quellordner

02:38.781 --> 02:41.450
betrachten, sondern auch sicherstellen, dass

02:41.450 --> 02:45.680
die Projektstruktur, die Sie dort eingerichtet haben, in einem Dist-Ordner

02:45.680 --> 02:47.880
aufbewahrt wird.

02:47.880 --> 02:50.020
Wie Sie gesehen haben, war das vorher standardmäßig der

02:50.020 --> 02:51.820
Fall, aber bedenken Sie, dass vorher alle TypeScript-Dateien

02:51.820 --> 02:54.280
hier enthalten waren, und zwar alle am Anfang des Quelltextes,

02:54.280 --> 02:55.699
wenn Sie das also zum Beispiel vorübergehend

02:55.699 --> 02:58.830
auskommentieren, wenn wir hier auf der obersten Ebene einen Benutzerordner mit

02:58.830 --> 03:03.280
einem Benutzer haben.

03:03.280 --> 03:03.280
ts-Datei

03:03.280 --> 03:06.170
mit dem Benutzernamen Max, sagen wir, kompilieren,

03:06.170 --> 03:07.750
dann werden Sie alle diesen

03:07.750 --> 03:09.752
Benutzerordner im dist-Ordner

03:09.752 --> 03:11.420
sehen.

03:11.420 --> 03:13.810
Und jetzt ist auch der Quellordner enthalten,

03:13.810 --> 03:17.200
weil wir jetzt eine Typescript-Datei auf einer höheren Ebene haben

03:17.200 --> 03:19.950
und deshalb denkt der Typescript-Compiler, dass unser

03:19.950 --> 03:21.780
ganzes Projekt wieder die Eingabe ist

03:21.780 --> 03:24.920
und er repliziert die Ordnerstruktur, die er dort im dist-Ordner

03:24.920 --> 03:25.970
findet.

03:25.970 --> 03:28.960
Das ist natürlich nicht das, was wir wollen,

03:28.960 --> 03:30.120
und hier hilft uns

03:30.976 --> 03:32.660
die Option rootDir.

03:32.660 --> 03:34.020
Wenn wir diese Option auf

03:34.020 --> 03:35.950
"source" setzen, werden auch andere

03:35.950 --> 03:38.630
Ordner mit TypeScript-Dateien auf der Stammebene

03:38.630 --> 03:40.400
nicht in die Ausgabe einbezogen und

03:40.400 --> 03:41.830
der Quellordner selbst landet

03:41.830 --> 03:43.780
nicht plötzlich dort.

03:43.780 --> 03:46.480
Deshalb setzt man oft sowohl rootDir als auch outDir,

03:46.480 --> 03:49.650
um genau zu wissen, wo sich die Eingabedateien befinden und wo

03:49.650 --> 03:52.040
die Ausgabedateien erzeugt werden sollen.

03:52.040 --> 03:54.870
Wenn wir weitermachen, können wir Composite ignorieren.

03:54.870 --> 03:57.010
Wir können einen Blick auf removeComments werfen.

03:57.010 --> 03:58.780
Es sollte klar sein, dass alle

03:58.780 --> 04:00.850
Kommentare, die Sie in Ihren TypeScript-Dateien

04:00.850 --> 04:04.450
haben, in den kompilierten JavaScript-Dateien entfernt

04:04.450 --> 04:08.000
werden, wenn Sie dies einstellen.

04:08.000 --> 04:11.200
Wenn ich das also auskommentiere und meinen Code kompiliere, sehen Sie

04:11.200 --> 04:12.970
eine Anwendung. ts, ich habe eine Bemerkung.

04:12.970 --> 04:14.990
Eine App. js, es ist nicht da.

04:14.990 --> 04:18.330
So können Sie Ihre Dateien verkleinern und der Aufwand

04:18.330 --> 04:20.950
könnte eine gute Option sein.

04:20.950 --> 04:23.820
Sie können auch noEmit einstellen, wenn Sie keine JavaScript-Dateien

04:23.820 --> 04:25.600
erzeugen wollen.

04:25.600 --> 04:27.130
Das mag jetzt seltsam klingen,

04:27.130 --> 04:29.190
weil das die Idee von TypeScript ist, aber

04:29.190 --> 04:30.700
wenn Sie nur prüfen wollen, ob

04:30.700 --> 04:32.420
Ihre Dateien korrekt sind, aber

04:32.420 --> 04:35.030
Sie wollen nicht all diese Ausgabedateien schreiben,

04:35.030 --> 04:37.680
um z.B. in einem größeren Projekt etwas Zeit zu sparen,

04:37.680 --> 04:39.120
dann können Sie dies auf "true"

04:39.120 --> 04:41.792
setzen, damit die Compilertypen nur Ihre Dateien

04:41.792 --> 04:45.460
prüfen und mögliche Fehler melden, ohne tatsächlich eine Ausgabedatei

04:45.460 --> 04:47.903
zu erstellen.

04:47.903 --> 04:50.490
importHelpers ist für uns nicht wirklich wichtig, hier

04:50.490 --> 04:52.065
können wir das ignorieren.

04:52.065 --> 04:54.570
downlevelIteration ist eine erweiterte Option.

04:54.570 --> 04:57.150
Es ist interessant, wenn Sie Ihren Code mit

04:57.150 --> 05:00.295
älteren Versionen von JavaScript kompilieren und

05:00.295 --> 05:02.690
mit vier Schleifen arbeiten.

05:02.690 --> 05:05.798
In einigen seltenen Fällen kann es dann zu Problemen kommen, wenn

05:05.798 --> 05:08.378
die Kompilierung nicht richtig funktioniert.

05:08.378 --> 05:10.440
Diese Option, wenn Sie es einschalten, geben

05:10.440 --> 05:12.770
Sie eine genauere Kompilierung, die in diesen Nischen

05:12.770 --> 05:15.280
Fällen arbeiten wird, so dass Sie vielleicht denken,

05:15.280 --> 05:17.210
Sie sollten immer es einschalten, aber

05:17.210 --> 05:20.097
es wird auch die Ausgabe mehr, wo diese Code.

05:20.097 --> 05:21.880
Sie sollten diese Funktion also nur dann

05:21.880 --> 05:25.110
einschalten, wenn Sie Schleifen haben und feststellen, dass sich Ihr generierter

05:25.110 --> 05:27.700
Code in Bezug auf diese Schleifen plötzlich anders verhält,

05:27.700 --> 05:29.023
als er sollte.
