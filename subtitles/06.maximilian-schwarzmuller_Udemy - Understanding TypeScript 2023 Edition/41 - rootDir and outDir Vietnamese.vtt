WEBVTT

00:02.220 --> 00:03.053
-: Tiếp tục nào.

00:03.053 --> 00:04.950
Chúng tôi có tùy chọn outFile ở đây, bây giờ

00:04.950 --> 00:07.730
tùy chọn này không quan trọng với chúng tôi ngay bây giờ, nó

00:07.730 --> 00:09.440
sẽ không hoạt động ngay bây giờ.

00:09.440 --> 00:12.340
Thú vị hơn đối với chúng tôi là outDIR và rootDir.

00:12.340 --> 00:14.720
Dự án của bạn càng lớn, bạn càng muốn

00:14.720 --> 00:17.640
sắp xếp các tệp của mình nhiều hơn.

00:17.640 --> 00:19.690
Thông thường, bạn không chỉ muốn

00:19.690 --> 00:21.770
các tệp của mình nằm quanh đây trong

00:21.770 --> 00:24.120
thư mục dự án cấp cơ sở của bạn.

00:24.120 --> 00:26.580
Thay vào đó, những gì bạn thường thấy trong

00:26.580 --> 00:28.080
các dự án là bạn có một thư

00:28.080 --> 00:29.790
mục nguồn và bạn có một thư mục

00:29.790 --> 00:31.240
dist, next, next.

00:31.240 --> 00:35.690
Vì vậy, thư mục dist có nhiệm vụ chứa tất cả đầu ra, ví dụ như

00:35.690 --> 00:37.800
tất cả các tệp JavaScript.

00:37.800 --> 00:41.380
Và thư mục nguồn có thể chứa tất cả các tệp TypeScript của chúng tôi.

00:41.380 --> 00:44.643
Vì vậy, chúng tôi có thể di chuyển các tệp TypeScript vào

00:44.643 --> 00:47.430
thư mục nguồn và nếu bây giờ tôi xóa thư mục JavaScript,

00:47.430 --> 00:49.891
chúng tôi gặp sự cố là nếu chúng tôi biên dịch

00:49.891 --> 00:53.167
mọi thứ, các tệp TypeScript này được biên dịch vì TypeScript,

00:53.167 --> 00:55.768
trình biên dịch sẽ xem xét các thư mục con, nhưng

00:55.768 --> 01:00.050
đầu ra nằm bên cạnh các tệp đầu vào của chúng tôi.

01:00.050 --> 01:02.760
Và đó là thứ chúng ta có thể kiểm soát bằng outDir

01:02.760 --> 01:03.660
chẳng hạn.

01:03.660 --> 01:07.117
Nếu chúng tôi đặt outDir, chúng tôi có thể cho biết các

01:07.117 --> 01:10.900
loại với trình biên dịch nơi tệp đã tạo sẽ được lưu trữ.

01:10.900 --> 01:13.580
Chúng ta có thể đặt cái này thành dist.

01:13.580 --> 01:17.037
Bây giờ nếu chúng ta làm điều đó, thì nếu bạn chạy chia seed,

01:17.037 --> 01:19.560
bạn sẽ thấy rằng các tệp JavaScript thực sự

01:19.560 --> 01:21.500
không được đặt trong thư mục nguồn

01:21.500 --> 01:23.170
mà trong thư mục dist.

01:23.170 --> 01:26.340
Bây giờ chúng ta chỉ cần điều chỉnh index. html và có điểm tại

01:26.340 --> 01:28.540
dist/app. js và dist/phân

01:28.540 --> 01:31.630
tích. js hoặc cách khác là di chuyển

01:31.630 --> 01:33.880
tệp index. html vào thư mục dist nhưng

01:33.880 --> 01:36.172
sau đó máy chủ def của chúng tôi sẽ không hoạt động chính

01:36.172 --> 01:37.550
xác nữa ngay bây giờ.

01:37.550 --> 01:39.875
Vì vậy, chúng ta hãy điều chỉnh những

01:39.875 --> 01:44.140
lần nhập này và cùng với đó, chúng ta vẫn có một ứng dụng đang hoạt động,

01:44.140 --> 01:45.270
như bạn thấy, nhưng

01:45.270 --> 01:48.480
bây giờ với cấu trúc dự án gọn gàng hơn.

01:48.480 --> 01:49.650
Bây giờ, điều tốt là,

01:49.650 --> 01:51.530
nếu chúng ta có một thư mục con ở đây,

01:51.530 --> 01:52.980
giả sử là một thư mục phân tích

01:52.980 --> 01:54.893
và chúng ta có tệp TypeScript trong

01:54.893 --> 01:57.350
đó, thì nếu chúng ta biên dịch lại và sẽ không

01:57.350 --> 01:59.540
thành vấn đề nếu bạn thực hiện bằng lệnh

01:59.540 --> 02:00.373
này hoặc chế độ đồng

02:00.373 --> 02:03.300
hồ, cấu trúc thư mục này mà bạn có thư mục nguồn tất cả sẽ

02:03.300 --> 02:05.640
được sao chép trong thư mục dist, tất nhiên,

02:05.640 --> 02:07.370
điều này rất thuận tiện vì điều đó

02:07.370 --> 02:08.813
đảm bảo rằng bạn có thể nhập

02:08.813 --> 02:12.670
các tệp về cơ bản giống như bạn nhập chúng trong thư mục nguồn, đồng thời,

02:12.670 --> 02:14.110
để cấu trúc bạn thiết lập ở

02:14.110 --> 02:16.640
đó được giữ nguyên.

02:16.640 --> 02:18.800
Giờ đây, bạn cũng có thể đặt thư mục gốc

02:18.800 --> 02:21.230
và đặt cụ thể thư mục này tại thư mục nơi các

02:21.230 --> 02:23.800
tệp của bạn được lưu trữ, như trong ví dụ này,

02:23.800 --> 02:25.202
nguồn, để đảm bảo rằng các

02:25.202 --> 02:28.560
loại trình biên dịch không tìm thấy trong các thư mục của

02:28.560 --> 02:30.030
chúng tôi.

02:30.030 --> 02:31.530
Đó cũng là điều bạn có thể làm

02:31.530 --> 02:34.003
với tùy chọn bao gồm ở dưới đó, phải không?

02:34.870 --> 02:36.007
Nhưng với thư mục

02:36.007 --> 02:38.781
gốc, các loại trình biên dịch sẽ không

02:38.781 --> 02:41.450
chỉ nhìn vào thư mục nguồn đó mà còn đảm

02:41.450 --> 02:44.700
bảo rằng cấu trúc dự án, bạn đã thiết lập ở đó,

02:44.700 --> 02:45.680
được lưu giữ trong

02:45.680 --> 02:47.880
thư mục dist.

02:47.880 --> 02:50.020
Bây giờ nó đã làm như vậy theo mặc định trước

02:50.020 --> 02:51.820
đây, như bạn đã thấy, nhưng hãy nhớ rằng

02:51.820 --> 02:54.280
trước đây nó sẽ bao gồm bất kỳ tệp TypeScript nào ở

02:54.280 --> 02:55.699
đây, tất cả ngay từ đầu nguồn,

02:55.699 --> 02:58.830
vì vậy, ví dụ: nếu bạn tạm thời nhận xét điều này nếu chúng tôi có

02:58.830 --> 03:01.500
một thư mục người dùng ở đây trên cấp cao nhất với một người

03:01.500 --> 03:03.280
dùng. ts trong đó chúng

03:03.280 --> 03:06.170
tôi có tên người dùng là Max, thì nếu chúng tôi biên

03:06.170 --> 03:07.750
dịch tệp này, tất cả các bạn

03:07.750 --> 03:09.752
sẽ chỉ thấy thư mục người dùng đó trong

03:09.752 --> 03:11.420
thư mục dist.

03:11.420 --> 03:13.810
Và bây giờ thư mục nguồn cũng được bao gồm

03:13.810 --> 03:17.200
bởi vì bây giờ chúng ta có một tệp bản thảo ở cấp độ cao hơn và

03:17.200 --> 03:19.950
do đó trình biên dịch bản thảo nghĩ rằng toàn bộ

03:19.950 --> 03:21.780
dự án của chúng ta lại là đầu vào

03:21.780 --> 03:24.920
và nó sao chép cấu trúc thư mục mà nó tìm thấy ở đó trong

03:24.920 --> 03:25.970
thư mục dist.

03:25.970 --> 03:28.960
Tất nhiên, đó không phải là điều chúng ta muốn

03:28.960 --> 03:30.120
và đó là nơi tùy chọn

03:30.976 --> 03:32.660
rootDir giúp chúng ta.

03:32.660 --> 03:34.020
Bây giờ, nếu chúng tôi đặt

03:34.020 --> 03:35.950
thư mục này thành nguồn, ngay cả khi chúng

03:35.950 --> 03:38.630
tôi có các thư mục khác có tệp TypeScript ở cấp gốc,

03:38.630 --> 03:40.400
chúng sẽ không được đưa vào đầu ra

03:40.400 --> 03:41.830
và bản thân thư mục nguồn sẽ

03:41.830 --> 03:43.780
không đột nhiên kết thúc ở đó.

03:43.780 --> 03:46.480
Vì vậy, bạn thường đặt cả rootDir và outDir

03:46.480 --> 03:49.650
để thực sự rõ ràng về nơi bạn nhập các tệp trực tiếp và

03:49.650 --> 03:52.040
nơi các tệp đầu ra của bạn sẽ được tạo.

03:52.040 --> 03:54.870
Nếu chúng ta tiếp tục, chúng ta có thể bỏ qua composite.

03:54.870 --> 03:57.010
Chúng ta có thể xem removeComments.

03:57.010 --> 03:58.780
Sẽ khá rõ ràng nếu bạn đặt

03:58.780 --> 04:00.850
điều này, thì bất kỳ nhận xét nào

04:00.850 --> 04:04.450
bạn có thể có trong các tệp TypeScript của mình sẽ bị

04:04.450 --> 04:08.000
xóa trong các tệp JavaScript đã biên dịch.

04:08.000 --> 04:11.200
Vì vậy, nếu tôi nhận xét điều này và tôi biên dịch mã của mình, bạn sẽ thấy

04:11.200 --> 04:12.970
một ứng dụng. ts, tôi có một nhận xét.

04:12.970 --> 04:14.990
Một ứng dụng. js, nó không có ở đó.

04:14.990 --> 04:18.330
Vì vậy, bạn có thể làm điều đó để làm cho các tệp của mình

04:18.330 --> 04:20.950
nhỏ hơn và nỗ lực có thể là một lựa chọn hay.

04:20.950 --> 04:23.820
Bạn cũng có thể đặt noEmit nếu không muốn tạo

04:23.820 --> 04:25.600
bất kỳ tệp JavaScript nào.

04:25.600 --> 04:27.130
Bây giờ điều này nghe có vẻ lạ

04:27.130 --> 04:29.190
vì đó là ý tưởng của TypeScript, nhưng

04:29.190 --> 04:30.700
nếu bạn chỉ muốn kiểm tra xem

04:30.700 --> 04:32.420
các tệp của mình có đúng không nhưng

04:32.420 --> 04:35.030
bạn không muốn ghi tất cả các tệp đầu ra này, chẳng

04:35.030 --> 04:37.680
hạn như để tiết kiệm thời gian trong một dự án lớn

04:37.680 --> 04:39.120
hơn, thì bạn có thể đặt giá

04:39.120 --> 04:41.792
trị này thành "true" để chỉ yêu cầu các loại trình

04:41.792 --> 04:45.460
biên dịch kiểm tra tệp của bạn và báo cáo bất kỳ lỗi tiềm ẩn nào mà không

04:45.460 --> 04:47.903
thực sự tạo tệp đầu ra.

04:47.903 --> 04:50.490
importHelpers không thực sự quan trọng đối với chúng tôi,

04:50.490 --> 04:52.065
ở đây chúng tôi có thể bỏ qua điều đó.

04:52.065 --> 04:54.570
downlevelIteration là một tùy chọn nâng cao.

04:54.570 --> 04:57.150
Thật thú vị khi bạn biên dịch mã của

04:57.150 --> 05:00.295
mình sang các phiên bản JavaScript cũ hơn và

05:00.295 --> 05:02.690
bạn làm việc với bốn vòng lặp.

05:02.690 --> 05:05.798
Sau đó, trong một số trường hợp hiếm gặp, bạn có thể gặp sự cố trong

05:05.798 --> 05:08.378
đó quá trình biên dịch không hoạt động chính xác.

05:08.378 --> 05:10.440
Tùy chọn này, nếu bạn bật nó, sẽ cung cấp cho

05:10.440 --> 05:12.770
bạn một bản tổng hợp chính xác hơn, sẽ hoạt động

05:12.770 --> 05:15.280
trong những trường hợp thích hợp này, vì vậy bạn có

05:15.280 --> 05:17.210
thể nghĩ rằng mình nên luôn bật nó, nhưng

05:17.210 --> 05:20.097
nó cũng sẽ xuất ra nhiều mã hơn ở những nơi đó.

05:20.097 --> 05:21.880
Vì vậy, bạn chỉ nên bật tính năng này

05:21.880 --> 05:25.110
nếu bạn có các vòng lặp và bạn thấy rằng mã được tạo của mình đột

05:25.110 --> 05:27.700
nhiên hoạt động khác với những gì nó nên làm đối với

05:27.700 --> 05:29.023
các vòng lặp đó.
