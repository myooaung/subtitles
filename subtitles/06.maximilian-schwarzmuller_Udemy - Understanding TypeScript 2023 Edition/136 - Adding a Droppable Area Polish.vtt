WEBVTT

00:02.180 --> 00:04.910
Instruktor: Wizualnie jesteśmy w stanie przeciągnąć

00:04.910 --> 00:07.240
i upuścić, ale technicznie w JavaScript oczywiście

00:07.240 --> 00:10.410
nasz skrypt nie ma pojęcia co się dzieje.

00:10.410 --> 00:12.030
Ale dla nas, ludzi oczywiście, jasne

00:12.030 --> 00:14.810
jest, że przeciągamy tutaj dokładnie ten przedmiot.

00:14.810 --> 00:16.300
Ale jeśli spojrzymy na nasz

00:16.300 --> 00:20.320
kod, skąd JavaScript wiedziałby, co jest przeciągane gdzie?

00:20.320 --> 00:21.980
Jak zaktualizowalibyśmy nasz stan

00:21.980 --> 00:24.440
w oparciu o informacje, które mamy teraz?

00:24.440 --> 00:26.690
Tak naprawdę nie byłoby to możliwe.

00:26.690 --> 00:28.810
Więc aby to zadziałało w JavaScript

00:28.810 --> 00:30.840
musimy wrócić do klasy naszego przeciągalnego

00:30.840 --> 00:33.960
elementu, elementu projektu.

00:33.960 --> 00:36.710
Tam, w dragStartHandler, logowanie zdarzenia

00:36.710 --> 00:38.250
z konsoli nie jest wszystkim,

00:38.250 --> 00:39.950
co powinniśmy zrobić.

00:39.950 --> 00:42.200
Właściwie wcale nie musimy tego robić.

00:42.200 --> 00:45.070
Zamiast tego użyjmy teraz naszego obiektu zdarzenia

00:45.070 --> 00:48.210
tutaj, ponieważ ma to właściwość przekazywania danych.

00:48.210 --> 00:50.440
To jest specjalne dla zdarzeń drag, że

00:50.440 --> 00:53.280
masz taką właściwość przekazywania danych.

00:53.280 --> 00:55.330
I na tej właściwości, można dołączyć

00:55.330 --> 00:57.530
dane do zdarzenia przeciągania i później

00:57.530 --> 00:59.520
będziesz mógł wyodrębnić te dane po

00:59.520 --> 01:01.390
upuszczeniu, a przeglądarka w JavaScript

01:01.390 --> 01:03.730
za kulisami, będzie przechowywać te dane

01:03.730 --> 01:06.430
podczas operacji przeciągania i zapewnić, że dane,

01:06.430 --> 01:09.470
które otrzymasz po upuszczeniu, są tymi samymi danymi,

01:09.470 --> 01:12.020
które dołączyłeś tutaj.

01:12.020 --> 01:15.520
W tym celu możesz wywołać, setData, na transferze danych,

01:15.520 --> 01:18.910
ale transfer danych może być w rzeczywistości null.

01:18.910 --> 01:21.080
Musimy więc dodać tu wykrzyknik, oczywiście

01:21.080 --> 01:23.460
wiemy, że nie będzie tu null.

01:23.460 --> 01:25.700
Można się zastanawiać, dlaczego może być zerowa?

01:25.700 --> 01:29.060
Cóż, zdarzenie przeciągania jest zawsze tym samym rodzajem zdarzenia,

01:29.060 --> 01:31.340
ale w oparciu o to, który słuchacz go wyzwala

01:31.340 --> 01:34.190
lub które dokładne zdarzenie, którego słuchasz, transfer

01:34.190 --> 01:37.520
danych nie jest koniecznie dostępny.

01:37.520 --> 01:39.896
Tak więc nie wszystkie zdarzenia związane z przeciąganiem

01:39.896 --> 01:42.640
dają ci obiekt zdarzenia, który ma obiekt przesyłania

01:42.640 --> 01:44.073
danych.

01:45.320 --> 01:46.620
Jednak dragStartHandler,

01:46.620 --> 01:49.080
który uruchamia się podczas zdarzenia rozpoczęcia

01:49.080 --> 01:52.840
przeciągania, posiada go, więc tutaj możemy bezpiecznie wywołać setData.

01:52.840 --> 01:56.330
I teraz setData przyjmuje tutaj dwa argumenty.

01:56.330 --> 01:59.900
Pierwszy argument jest identyfikatorem formatu

01:59.900 --> 02:01.320
danych, a tam masz

02:01.320 --> 02:04.970
dostępne pewne możliwe formaty.

02:04.970 --> 02:08.210
W załączniku znajdziesz głębokie nurkowanie w drag and drop z JavaScript,

02:08.210 --> 02:10.890
gdzie możesz dowiedzieć się o nich znacznie więcej.

02:10.890 --> 02:12.270
Więcej na ten temat dowiesz się

02:12.270 --> 02:15.140
również w moim kursie JavaScript Complete Guide przy okazji.

02:15.140 --> 02:18.390
Tutaj potrzebujemy formatu text/plain, co oznacza,

02:18.390 --> 02:20.010
że po prostu dołączymy jakiś

02:20.010 --> 02:24.190
zwykły tekst poproszony o dane, które są przesyłane, i to jest

02:24.190 --> 02:25.430
ważne.

02:25.430 --> 02:28.250
Nie będziemy tutaj dołączać naszych obiektów, samego

02:28.250 --> 02:29.740
projektu, po prostu będziemy

02:29.740 --> 02:31.390
wpadać w pułapkę.

02:31.390 --> 02:34.340
Czyli nie kompletny projekt, który można wyrenderować tutaj.

02:34.340 --> 02:37.955
Zamiast tego, w rzeczywistości wystarczy dołączyć

02:37.955 --> 02:41.645
identyfikator projektu, ponieważ pozwoli to później

02:41.645 --> 02:44.870
pobrać ten projekt z naszego stanu.

02:44.870 --> 02:47.320
Więc dołączenie identyfikatora jest wszystkim, co musimy zrobić.

02:47.320 --> 02:50.240
Chcemy przenieść tylko niewielką ilość danych, to pozwoli nam również

02:50.240 --> 02:52.053
zaoszczędzić trochę pamięci.

02:53.100 --> 02:56.300
Więc teraz z tym, dołączamy dane do zdarzenia przeciągania.

02:56.300 --> 02:58.330
Jeszcze jedną rzeczą, którą chcę zrobić

02:58.330 --> 03:00.610
jest, na transferze danych, gdzie znowu

03:00.610 --> 03:02.340
musimy dodać wykrzyknik, ustawię

03:02.340 --> 03:05.430
właściwość effectAllowed na move.

03:05.430 --> 03:08.610
To w zasadzie kontroluje, jak będzie wyglądał kursor

03:08.610 --> 03:12.440
i mówi przeglądarce trochę o naszym zamiarze, że planujemy przenieść

03:12.440 --> 03:15.200
element z punktu A do punktu B.

03:15.200 --> 03:16.760
Alternatywą może być kopiowanie,

03:16.760 --> 03:19.230
gdzie wtedy otrzymujemy inny kursor, który

03:19.230 --> 03:20.820
wskazuje użytkownikowi, że

03:20.820 --> 03:23.120
kopiujemy, a nie przenosimy, ale tutaj

03:23.120 --> 03:25.140
chcemy przenieść element, co oznacza

03:25.140 --> 03:26.580
na kropli, że usuwamy go

03:26.580 --> 03:28.810
na jego oryginalnym miejscu i dodajemy

03:28.810 --> 03:31.360
go w nowym miejscu.

03:31.360 --> 03:34.940
Więc teraz dane są załączone tutaj i to jest krok numer jeden.

03:34.940 --> 03:36.870
Wróćmy teraz do miejsca, w którym

03:36.870 --> 03:38.470
chcemy, aby zrzut nastąpił,

03:38.470 --> 03:40.360
czyli do listy projektów.

03:40.360 --> 03:43.400
Tam zaczyna się w dragLeaveHandler.

03:43.400 --> 03:46.370
Teraz w tej aplikacji, w tym projekcie tutaj, mamy

03:46.370 --> 03:49.200
tylko jedną operację przeciągania i upuszczania

03:49.200 --> 03:51.500
i to są nasze projekty tutaj.

03:51.500 --> 03:54.970
W większych aplikacjach możesz mieć różne elementy na stronie,

03:54.970 --> 03:57.220
które można przeciągnąć i upuścić, a

03:57.220 --> 04:01.080
nie chcesz, aby wszystko było upuszczalne wszędzie.

04:01.080 --> 04:06.080
Więc dlatego tutaj w dragOverHandler, który wystrzeliwuje, gdy użytkownik

04:06.230 --> 04:09.580
wchodzi w przeciągalny obszar z elementem dołączonym

04:09.580 --> 04:11.860
do myszy, chcę sprawdzić, czy przeciąganie

04:11.860 --> 04:14.970
naprawdę jest dozwolone tutaj.

04:14.970 --> 04:19.546
W tym celu sprawdzę, czy zdarzenie. dataTransfer, tutaj też jest

04:19.546 --> 04:21.060
dostępny, więc jeśli

04:21.060 --> 04:22.950
to jest dostępne, a następnie,

04:22.950 --> 04:25.500
jeśli jest dostępne, właściwość

04:25.500 --> 04:29.140
typy transferu danych ma pierwszą wartość,

04:29.140 --> 04:34.140
która jest równa text/plain.

04:34.300 --> 04:39.280
Oznacza to po prostu, czy dane dołączone do naszego zdarzenia

04:39.280 --> 04:42.390
przeciągania są tego formatu?

04:42.390 --> 04:43.360
Który oczywiście jest,

04:43.360 --> 04:45.030
ponieważ jest to format, który ustawiliśmy

04:45.030 --> 04:47.320
w dragStartHandler tutaj.

04:47.320 --> 04:50.490
Więc na przykład tutaj nie pozwoliłoby to na upuszczanie obrazów

04:50.490 --> 04:51.380
lub czegoś takiego,

04:51.380 --> 04:53.180
co miałoby inny format danych.

04:53.180 --> 04:56.173
Właśnie zezwoliłem na zrzucanie zwykłego tekstu.

04:57.170 --> 04:59.450
Oczywiście teraz muszę również zastąpić underscore

04:59.450 --> 05:01.020
wydarzeniem ponownie, ponieważ

05:01.020 --> 05:03.280
odnoszę się do niego tutaj.

05:03.280 --> 05:07.150
Teraz, jeśli tak jest, to wiem, że chcę pozwolić na spadek, więc

05:07.150 --> 05:09.070
wtedy zaktualizuję tło.

05:09.070 --> 05:11.620
I jeszcze jedna ważna rzecz, którą dostaliśmy, trzeba

05:11.620 --> 05:13.960
zadzwonić na event. preventDefault.

05:13.960 --> 05:15.950
Ale dlaczego musimy to nazywać?

05:15.950 --> 05:18.860
Ponieważ w JavaScript przeciąganie i upuszczanie

05:18.860 --> 05:22.480
działa w taki sposób, że upuszczenie jest właściwie tylko

05:22.480 --> 05:26.119
dozwolone, więc zdarzenie upuszczenia wywoła się tylko

05:26.119 --> 05:29.649
na elemencie, jeśli w drag overHandler na tym samym elemencie

05:29.649 --> 05:32.750
wywołałeś preventDefault.

05:32.750 --> 05:35.360
Możesz myśleć o tym w następujący sposób.

05:35.360 --> 05:38.870
Domyślnie dla zdarzeń przeciągania i upuszczania JavaScript

05:38.870 --> 05:41.350
nie zezwala na upuszczanie, więc musisz

05:41.350 --> 05:44.889
zapobiec domyślności w drag overHandler, aby powiedzieć

05:44.889 --> 05:48.120
JavaScriptowi i przeglądarce, że dla tego elementu,

05:48.120 --> 05:49.670
w tym przypadku dla tej sekcji

05:49.670 --> 05:54.870
dla tej klasy bez projektu chcesz zezwolić na upuszczanie.

05:54.870 --> 05:57.920
Więc tylko jeśli zrobisz to jest dragOverHandler zdarzenie upuszczenia

05:57.920 --> 06:00.020
będzie faktycznie wyzwalane, gdy użytkownik

06:00.020 --> 06:01.220
puści.

06:01.220 --> 06:02.910
W przeciwnym razie, jeśli użytkownik puści,

06:02.910 --> 06:05.060
zdarzenie upuszczenia nie zostanie wywołane.

06:05.060 --> 06:07.090
Więc z tym, drop handler następnie

06:07.090 --> 06:08.960
ostatecznie wykona oczywiście,

06:08.960 --> 06:12.620
ponieważ teraz pozwalamy, aby to się stało.

06:12.620 --> 06:16.440
Więc tutaj w drop handlerze możemy teraz zaakceptować zdarzenie,

06:16.440 --> 06:20.610
a na razie po prostu konsolujmy. zaloguj wydarzenie tutaj w ten sposób,

06:20.610 --> 06:23.003
aby zobaczyć, czy to działa.

06:23.940 --> 06:28.100
Teraz zapisujemy wszystko, dodajemy tutaj nowy element

06:28.100 --> 06:30.220
i przeciągam to.

06:30.220 --> 06:33.430
Jeśli upuszczę go tutaj w gotowych projektach, widzisz,

06:33.430 --> 06:36.490
że to zdarzenie przeciągania jest odpalane tutaj.

06:36.490 --> 06:39.360
I to pochodzi z linii 236, która rzeczywiście

06:39.360 --> 06:43.050
jest tą linią w drop handlerze.

06:43.050 --> 06:45.950
Teraz, jeśli sprawdzimy zdarzenie przeciągania tutaj w przeglądarce,

06:45.950 --> 06:47.447
widzisz, że mamy tutaj garść danych

06:47.447 --> 06:50.830
i mamy również tę właściwość przesyłania danych.

06:50.830 --> 06:52.920
A w nim widzisz efekt, który

06:52.920 --> 06:54.320
dopuściliśmy, czyli

06:54.320 --> 06:57.930
Move, a także nie zobaczysz tam nic.

06:57.930 --> 07:01.600
No, tylko dlatego, że dane zostały już wyczyszczone

07:01.600 --> 07:04.510
po wrzuceniu tego do konsoli.

07:04.510 --> 07:06.100
A ponieważ wstawiliśmy tutaj obiekt,

07:06.100 --> 07:08.160
a obiekty są typami referencyjnymi, cóż, widzimy

07:08.160 --> 07:10.830
ostatni snapshot, w którym dane zostały utracone.

07:10.830 --> 07:13.360
Właściwie w momencie, gdy to zrzucamy,

07:13.360 --> 07:16.910
będziemy mogli wyodrębnić dane z transferu danych.

07:16.910 --> 07:18.360
I mogę ci to udowodnić.

07:18.360 --> 07:20.960
Oczywiście możemy po prostu uzyskać dostęp

07:20.960 --> 07:23.210
do transferu danych i tam masz metodę getData

07:23.210 --> 07:26.580
i teraz chcemy uzyskać dane o tym formacie text/plain i to

07:26.580 --> 07:29.560
powinien być identyfikator projektu, który dołączyliśmy

07:29.560 --> 07:34.560
do naszego pakietu transferu danych na elemencie projektu.

07:35.060 --> 07:37.179
Więc jeśli teraz zapiszemy to i

07:37.179 --> 07:39.690
ponownie dodamy projekt tutaj, i przeciągniemy

07:39.690 --> 07:41.050
to tutaj, widzisz, że

07:41.050 --> 07:46.050
to tutaj rzeczywiście jest ID tego elementu projektu.

07:46.600 --> 07:47.920
Widzimy to, jeśli sprawdzimy,

07:47.920 --> 07:50.880
ponieważ dodajemy go również tutaj jako identyfikator,

07:50.880 --> 07:55.124
0. 2167, wygląda mi na ten identyfikator.

07:55.124 --> 07:59.170
Czyli z powodzeniem przekazujemy identyfikator.

07:59.170 --> 08:00.490
Teraz jesteśmy już prawie na miejscu.

08:00.490 --> 08:04.100
Teraz musimy tylko zaktualizować nasz stan za kulisami, a następnie

08:04.100 --> 08:06.163
ponownie wyrenderować DUI.
