WEBVTT

1
00:00:02.220 --> 00:00:04.550
<v ->I'm talking about a decorator, which we can add</v>

2
00:00:04.550 --> 00:00:07.350
which automatically binds the "this" keyword

3
00:00:07.350 --> 00:00:09.930
so that we don't have to call bind here.

4
00:00:09.930 --> 00:00:12.500
Now obviously calling bind here is not a big thing

5
00:00:12.500 --> 00:00:14.160
if there's nothing wrong with it,

6
00:00:14.160 --> 00:00:16.460
but we also wanna practice what we learned and

7
00:00:16.460 --> 00:00:20.220
if we have to do this in many many places across our app

8
00:00:20.220 --> 00:00:22.730
having a decorator, which we just can add

9
00:00:22.730 --> 00:00:24.970
might actually be easier.

10
00:00:24.970 --> 00:00:27.100
So, let's get rid of bind this here.

11
00:00:27.100 --> 00:00:30.010
And instead, above the class here,

12
00:00:30.010 --> 00:00:33.010
I'll add the auto bind decorator

13
00:00:33.010 --> 00:00:34.920
and I'm just adding some comments here

14
00:00:34.920 --> 00:00:38.750
to keep this file organized, at least a bit.

15
00:00:38.750 --> 00:00:40.490
ProjectInput Class

16
00:00:42.260 --> 00:00:44.790
So, what is a decorator?

17
00:00:44.790 --> 00:00:46.770
A decorator is a function, right?

18
00:00:46.770 --> 00:00:48.130
And you can find it either with

19
00:00:48.130 --> 00:00:51.383
the function decoration here or as a function expression.

20
00:00:52.490 --> 00:00:54.780
So, here I'll use a function decoration,

21
00:00:54.780 --> 00:00:57.780
and I'll name it autobind, name is up to you.

22
00:00:57.780 --> 00:01:01.670
And this decorator will receive free arguments

23
00:01:01.670 --> 00:01:03.173
the target,

24
00:01:04.430 --> 00:01:06.430
the method name to which it is bound,

25
00:01:06.430 --> 00:01:09.083
because I am going to create a method decorator here.

26
00:01:09.980 --> 00:01:12.960
And also the descriptor

27
00:01:12.960 --> 00:01:13.793
of that

28
00:01:14.700 --> 00:01:15.720
method.

29
00:01:15.720 --> 00:01:18.370
Uh, property descriptor because methods in the end

30
00:01:18.370 --> 00:01:22.760
are just properties, properties which hold functions.

31
00:01:22.760 --> 00:01:24.400
Now, why is this a method decorator?

32
00:01:24.400 --> 00:01:29.210
Because the idea is that we can add it to submitHandler

33
00:01:29.210 --> 00:01:32.210
like this, and be done with it.

34
00:01:32.210 --> 00:01:33.680
That's the idea.

35
00:01:33.680 --> 00:01:35.500
Now, we're not entirely there yet,

36
00:01:35.500 --> 00:01:38.143
but this is how it should work in the end.

37
00:01:39.090 --> 00:01:42.950
Now, to make it work, let's go back to our function up there

38
00:01:42.950 --> 00:01:46.880
and what has to go into the function body then?

39
00:01:46.880 --> 00:01:49.490
Well, in there, I first of all

40
00:01:49.490 --> 00:01:51.950
want to get access to the original method.

41
00:01:51.950 --> 00:01:56.593
With descriptor.value so that we store the method

42
00:01:56.593 --> 00:01:59.380
with which we originally defined.

43
00:01:59.380 --> 00:02:03.540
Then I wanna create my adjusted descriptor here

44
00:02:03.540 --> 00:02:04.873
which is a object.

45
00:02:06.650 --> 00:02:11.090
I'll type PropertyDescriptor, actually.

46
00:02:11.090 --> 00:02:13.880
Where configurable should be set to true,

47
00:02:13.880 --> 00:02:15.910
so that we can always change it.

48
00:02:15.910 --> 00:02:17.573
And where we then need a getter.

49
00:02:18.510 --> 00:02:21.770
And in that getter, here, which should be executed

50
00:02:21.770 --> 00:02:24.270
when you try to access the function.

51
00:02:24.270 --> 00:02:27.710
We will set up the bound function here,

52
00:02:27.710 --> 00:02:29.220
by using the original method

53
00:02:29.220 --> 00:02:31.030
which we are extracting up there.

54
00:02:31.030 --> 00:02:34.063
And calling bind this on it.

55
00:02:35.370 --> 00:02:36.203
Then,

56
00:02:37.860 --> 00:02:40.170
I want to return that bound function,

57
00:02:40.170 --> 00:02:41.603
and that should be all.

58
00:02:42.510 --> 00:02:44.190
And overall of course,

59
00:02:44.190 --> 00:02:46.620
I will therefore return the adjusted descriptor

60
00:02:46.620 --> 00:02:48.653
in that method decorator.

61
00:02:49.510 --> 00:02:52.880
Now we get an error with that, on the submitHandler.

62
00:02:52.880 --> 00:02:56.020
That, experimental support for decorators is a feature

63
00:02:56.020 --> 00:02:57.960
which basically needs to be enabled.

64
00:02:57.960 --> 00:03:00.400
So we should go to the tsconfig file,

65
00:03:00.400 --> 00:03:02.320
and in there just scroll down.

66
00:03:02.320 --> 00:03:05.770
You should find that "experimentalDecorators" option

67
00:03:05.770 --> 00:03:07.450
just comment that in.

68
00:03:07.450 --> 00:03:09.980
And add a comma in front of it.

69
00:03:09.980 --> 00:03:14.183 line:15% 
Save that, and then restart the types compilation process.

70
00:03:15.180 --> 00:03:17.700 line:15% 
Now, it still shows me some errors here,

71
00:03:17.700 --> 00:03:18.913 line:15% 
if I expand this,

72
00:03:20.212 --> 00:03:23.170 line:15% 
the methodName is declared, but its value is never read.

73
00:03:23.170 --> 00:03:25.410
In app.ts line four.

74
00:03:25.410 --> 00:03:26.760
It's referring to this here,

75
00:03:26.760 --> 00:03:29.020
I got this argument, which I received here

76
00:03:29.020 --> 00:03:30.940 line:15% 
which I actually never used.

77
00:03:30.940 --> 00:03:34.370 line:15% 
Same is true for target, I never used that.

78
00:03:34.370 --> 00:03:36.343 line:15% 
Now, there are two ways to solve this.

79
00:03:37.200 --> 00:03:39.610
One way, is to go to the tsconfig,

80
00:03:39.610 --> 00:03:42.813
and loosen our strictness rules, here.

81
00:03:44.160 --> 00:03:46.740
noUnusedParameters, if we set this to false

82
00:03:46.740 --> 00:03:49.090
we're actually allowing unused parameters.

83
00:03:49.090 --> 00:03:50.670
So, this would be one thing,

84
00:03:50.670 --> 00:03:52.910
or you use special names

85
00:03:52.910 --> 00:03:54.053
underscore,

86
00:03:55.180 --> 00:03:56.653
and underscore two.

87
00:03:57.770 --> 00:04:01.860
This actually is, a hint for typescript and javascript

88
00:04:01.860 --> 00:04:03.130
that you are aware that

89
00:04:03.130 --> 00:04:04.800
you are not going to use these values,

90
00:04:04.800 --> 00:04:05.930
but you need to accept them

91
00:04:05.930 --> 00:04:08.740
because you need the argument they're after.

92
00:04:08.740 --> 00:04:11.810
If you now save this, this compiles without errors

93
00:04:11.810 --> 00:04:14.700
and if we go back and enter hello here

94
00:04:14.700 --> 00:04:17.040
and submit this, it still works

95
00:04:17.040 --> 00:04:20.060
now thanks to our auto bind decorator.

96
00:04:20.060 --> 00:04:23.120
Which hopefully also shows that this decorator

97
00:04:23.120 --> 00:04:24.950
can have some real use.

98
00:04:24.950 --> 00:04:27.530
Now of course here is actually a bit more work,

99
00:04:27.530 --> 00:04:29.510
than just calling bind.

100
00:04:29.510 --> 00:04:32.120
But imagine this being used on more and more methods

101
00:04:32.120 --> 00:04:33.820
which all have to be bound.

102
00:04:33.820 --> 00:04:36.140
Not having to call bind this manually,

103
00:04:36.140 --> 00:04:38.140
can then re-save you some time,

104
00:04:38.140 --> 00:04:40.430
and also prevent some potential errors

105
00:04:40.430 --> 00:04:42.343
in cases where you just forgot it.

