WEBVTT

00:02.130 --> 00:02.963
Narator: Untuk itu

00:02.963 --> 00:05.260
lagi, saya kembali ke Project Setup dummy kita, yang

00:05.260 --> 00:06.690
kita gunakan berulang-ulang.

00:06.690 --> 00:08.260
Di sana, kita dapat menjalankan NPM start

00:08.260 --> 00:10.190
untuk memunculkan server pengembangan itu.

00:10.190 --> 00:13.690
Dan kemudian di jendela terminal baru dengan server yang berjalan

00:13.690 --> 00:15.260
di jendela terminal yang berbeda,

00:15.260 --> 00:17.419
saya menjalankan TSC dash W untuk memulai

00:17.419 --> 00:21.540
proses kompilasi TypeScript saya dan menjaga agar tetap berjalan.

00:21.540 --> 00:23.470
Dengan itu tentu saja, kita mendapatkan halaman

00:23.470 --> 00:24.560
kosong karena tidak ada apa-apa

00:24.560 --> 00:27.060
di dalamnya tetapi sekarang kita bisa bermain-main di file

00:27.060 --> 00:29.480
TS aplikasi dan memulai dengan generik.

00:29.480 --> 00:32.940
Dan saya pikir paling mudah untuk memahami generik

00:32.940 --> 00:35.450
jika kita melihat tipe default, yang

00:35.450 --> 00:37.450
dibangun ke dalam TypeScript

00:37.450 --> 00:39.610
yang sebenarnya banyak kita kerjakan

00:39.610 --> 00:41.890
yang ternyata menjadi generik dan

00:41.890 --> 00:44.410
itu akan menjadi array.

00:44.410 --> 00:46.900
Katakanlah kita memiliki larik nama.

00:46.900 --> 00:50.370
Max dan Manual katakanlah.

00:50.370 --> 00:51.620
Jadi kita mendapatkan

00:51.620 --> 00:54.610
dua nama di sana kemudian tentu saja, tipe konstanta

00:54.610 --> 00:57.210
nama adalah array string.

00:57.210 --> 00:59.610
Sekarang sebenarnya, kita bisa menganggap

00:59.610 --> 01:02.460
ini sebagai dua jenis yang digabungkan.

01:02.460 --> 01:05.760
Sama seperti Anda dapat memiliki objek dengan properti yang berbeda

01:05.760 --> 01:07.700
di mana di setiap properti Anda mungkin

01:07.700 --> 01:09.310
menyimpan tipe yang berbeda.

01:09.310 --> 01:13.750
Sebuah array selalu hanya sebuah benda dengan data yang berbeda di dalamnya,

01:13.750 --> 01:16.440
dalam hal ini dengan string di dalamnya.

01:16.440 --> 01:20.230
Jadi kita sebenarnya memiliki tipe array, hanya sebuah array dan jika

01:20.230 --> 01:22.770
saya akan menghapus nama di sini dan memotongnya,

01:22.770 --> 01:25.010
Anda akan melihat bahwa TypeScript akan menyimpulkan

01:25.010 --> 01:29.140
ini menjadi array tipe apa pun dengan data apa pun di sana.

01:29.140 --> 01:32.690
Memang TypeScript mengetahui tipe array.

01:32.690 --> 01:35.280
Jadi kita bisa mengatakan, ini di sini harusnya array tetapi

01:35.280 --> 01:37.600
seperti yang Anda lihat jika saya menspesifikasikan

01:37.600 --> 01:39.900
seperti ini, kita mendapatkan error meskipun saya dapat

01:39.900 --> 01:43.570
memberi tahu Anda bahwa tipe array ini, seperti ini ada pada TypeScript.

01:43.570 --> 01:45.870
Tetapi kita melihat bahwa ini adalah tipe

01:45.870 --> 01:48.710
generik dan membutuhkan satu argumen tipe.

01:48.710 --> 01:50.950
Dan sekarang, itu adalah sesuatu yang belum pernah kita lihat sebelumnya.

01:50.950 --> 01:53.870
Kita tidak pernah mendengar tentang tipe generik sebelumnya.

01:53.870 --> 01:55.750
Sekarang, notasi aneh ini di sini, setiap

01:55.750 --> 01:58.120
kali Anda melihat sesuatu seperti ini di TypeScript,

01:58.120 --> 02:01.060
Anda berurusan dengan tipe generik.

02:01.060 --> 02:05.610
Tipe generik adalah tipe yang terhubung dengan beberapa

02:05.610 --> 02:08.890
tipe lain dan sangat fleksibel mengenai

02:08.890 --> 02:12.920
tipe mana yang sebenarnya tipe lain itu.

02:12.920 --> 02:14.130
Kedengarannya sulit?

02:14.130 --> 02:16.820
Nah, mari kita kembali ke contoh larik itu.

02:16.820 --> 02:19.380
Kita tahu bahwa kita ingin menyimpan array di sini.

02:19.380 --> 02:22.250
Jadi array itu sendiri bisa menjadi sebuah tipe, itu adalah

02:22.250 --> 02:24.610
daftar data yang dengan sendirinya sudah membentuk

02:24.610 --> 02:26.730
sebuah tipe, bisa dibilang.

02:26.730 --> 02:29.770
Sama seperti objek adalah tipe tersendiri, bahkan jika kita

02:29.770 --> 02:32.200
belum tahu data mana yang akan masuk ke sana.

02:32.200 --> 02:34.490
Jadi, larik adalah sebuah tipe tersendiri.

02:34.490 --> 02:38.230
Tetapi sebuah array tentu saja menyimpan data dengan

02:38.230 --> 02:39.860
tipe tertentu di sana.

02:39.860 --> 02:42.690
Sekarang tipe larik itu sendiri tidak peduli jenis

02:42.690 --> 02:44.810
data apa yang disimpan di sana.

02:44.810 --> 02:48.150
Tipe array tidak peduli apakah Anda menyimpan

02:48.150 --> 02:50.540
daftar string, angka, objek, atau

02:50.540 --> 02:52.430
data campuran.

02:52.430 --> 02:54.500
Tipe larik benar-benar tidak peduli tetapi

02:54.500 --> 02:58.640
ia peduli untuk mendapatkan setidaknya beberapa informasi, Bahkan jika Anda mengatakan

02:58.640 --> 03:01.200
bahwa saya tidak tahu, dengan mengatur ini untuk mengetikkan

03:01.200 --> 03:02.960
larik apa pun.

03:02.960 --> 03:05.870
Ini lebih baik daripada tidak menentukan apa pun.

03:05.870 --> 03:08.330
Sekarang, ini adalah salah satu cara untuk mendefinisikan

03:08.330 --> 03:10.070
tipe larik, tipe data yang disimpan di sana

03:10.070 --> 03:11.430
dan kemudian tanda kurung siku.

03:11.430 --> 03:14.620
Cara lain, yang akan menciptakan jenis yang persis sama adalah dengan

03:14.620 --> 03:15.830
menggunakan Array itu dan

03:15.830 --> 03:17.630
kemudian tanda kurung sudut ini.

03:17.630 --> 03:20.030
Dan sekarang di antara tanda kurung sudut

03:20.030 --> 03:22.340
ini, Anda menentukan jenis data, yang

03:22.340 --> 03:24.140
harus masuk ke dalam larik.

03:24.140 --> 03:26.330
Misalnya string, dan ini di

03:26.330 --> 03:31.330
sini 100% sama dengan mendefinisikan tipe ini di sini.

03:32.030 --> 03:34.950
Tentu saja, di sini Anda juga bisa menggunakan tipe union untuk mengatakan,

03:34.950 --> 03:37.730
larik ini menyimpan string atau angka atau menggunakan apa saja

03:37.730 --> 03:40.850
jika Anda tidak ingin mengatakan apa pun tentang tipe atau seperti yang

03:40.850 --> 03:42.970
baru saja kita miliki string.

03:42.970 --> 03:44.330
Jadi ini adalah tipe generik,

03:44.330 --> 03:46.900
tipe generik yang dibangun ke dalam TypeScript.

03:46.900 --> 03:50.440
Sebuah tipe yang terhubung dengan tipe lain, dimana kita

03:50.440 --> 03:53.980
ingin mengetahui tipe kita yang mana sehingga TypeScript

03:53.980 --> 03:56.810
dapat memberikan dukungan yang lebih baik.

03:56.810 --> 03:57.910
Karena di sini misalnya,

03:57.910 --> 04:01.510
jika kita tahu bahwa apa yang kita simpan di sana adalah string,

04:01.510 --> 04:04.380
maka kita tahu kapan pun saya mengakses elemen dalam

04:04.380 --> 04:06.143
larik itu, saya dapat melakukan

04:07.100 --> 04:09.410
hal-hal string dengannya.

04:09.410 --> 04:12.260
Saya dapat memanggil semua method string ini

04:12.260 --> 04:15.280
misalnya dan TypeScript tidak akan mengeluh karena

04:15.280 --> 04:18.220
ia tahu, larik ini menyimpan string.

04:18.220 --> 04:20.410
Itulah ide dari tipe generik.

04:20.410 --> 04:23.230
Tipe tertentu dalam hal ini tipe array mungkin

04:23.230 --> 04:26.780
saja bekerja lebih baik atau bekerja sama sekali jika Anda

04:26.780 --> 04:29.040
memberikan informasi tambahan tentang

04:29.040 --> 04:33.430
tipe data yang disediakan dalam tipe array ini dan tentu saja, tipe array

04:33.430 --> 04:36.590
hanyalah salah satu contoh.

04:36.590 --> 04:39.840
Tipe generik lain yang dibangun ke dalam TypeScript

04:39.840 --> 04:42.130
adalah tipe promise.

04:42.130 --> 04:45.470
Sekarang, janji adalah fitur JavaScript, bukan?

04:45.470 --> 04:46.970
Ini bukan fitur TypeScript.

04:46.970 --> 04:49.437
Anda dapat membuat janji dalam JavaScript dan

04:49.437 --> 04:52.000
jika Anda tidak yakin apa itu janji, terlampir

04:52.000 --> 04:53.870
Anda menemukan tautannya.

04:53.870 --> 04:58.150
Sebuah janji dapat dibuat dengan menggunakan new promise.

04:58.150 --> 05:00.640
Sekali lagi, ini adalah fungsi konstruktor, kelas

05:00.640 --> 05:03.270
yang dibangun ke dalam JavaScript dan fungsi konstruktor

05:03.270 --> 05:05.870
janji mengambil satu argumen yang merupakan fungsi

05:05.870 --> 05:07.640
yang kemudian pada gilirannya akan

05:07.640 --> 05:10.650
mendapatkan dua argumen yang pada akhirnya menjadi fungsi

05:10.650 --> 05:12.580
resolve dan reject.

05:12.580 --> 05:15.180
Sekarang ini akan diteruskan secara otomatis

05:15.180 --> 05:17.790
kepada kita oleh JavaScript di browser.

05:17.790 --> 05:22.400
Dan kemudian di dalam promise kita bisa misalnya mengatur timer dan kemudian

05:22.400 --> 05:25.640
di dalam fungsi callback dari timer tersebut, kita bisa

05:25.640 --> 05:28.140
menyelesaikan outer promise.

05:28.140 --> 05:30.140
Jadi di sini, di fungsi callback

05:30.140 --> 05:34.823
ini, kita bisa memanggil resolve dan mengatakan ini sudah selesai.

05:36.500 --> 05:41.020
Sekarang ketika kita melakukannya, janji ini di sini menciptakan objek baru, objek

05:41.020 --> 05:43.860
janji yang disimpan dalam konstanta janji.

05:43.860 --> 05:47.700
Sekarang, konstanta janji ini sebenarnya memiliki tipe tertentu.

05:47.700 --> 05:49.470
Ini bertipe promise dan sekali

05:49.470 --> 05:51.130
lagi, Anda melihat tanda kurung

05:51.130 --> 05:56.130
sudut ini karena janji ini pada akhirnya akan menyelesaikan sesuatu.

05:56.480 --> 05:58.930
Sekarang di sini dikatakan unknown karena TypeScript

05:58.930 --> 06:01.470
tidak sepenuhnya dapat memahami bahwa kita sebenarnya

06:01.470 --> 06:03.880
akan menyelesaikan ke string di sini.

06:03.880 --> 06:05.870
Tetapi oleh karena itu kita bisa mengatakan bahwa

06:05.870 --> 06:08.120
ini adalah sebuah janji, yang pada akhirnya akan menghasilkan

06:08.120 --> 06:11.450
string dan kita melakukannya dengan menggunakan tipe generik kita lagi.

06:11.450 --> 06:14.030
Tipe utamanya adalah promise, tetapi promise

06:14.030 --> 06:16.120
seperti halnya array, bekerja sama

06:16.120 --> 06:18.380
dengan tipe-tipe lainnya.

06:18.380 --> 06:22.000
Array menggunakan tipe lain karena data yang tersimpan di dalamnya, data

06:22.000 --> 06:23.350
dari tipe tertentu, dan promise

06:23.350 --> 06:25.640
bekerja sama dengan tipe lain karena pada akhirnya

06:25.640 --> 06:29.750
ia mengembalikan beberapa data dari beberapa tipe dan dalam hal ini adalah promise

06:29.750 --> 06:31.140
yang pada akhirnya mengembalikan

06:31.140 --> 06:32.940
string.

06:32.940 --> 06:34.470
Sekarang, sekali lagi, mengapa hal itu berguna?

06:34.470 --> 06:37.550
Mengapa informasi tipe ekstra ini berguna?

06:37.550 --> 06:40.350
Nah, jika kita hanya memiliki tipe janji di sini dan itu tidak

06:40.350 --> 06:41.430
akan diizinkan tetapi

06:41.430 --> 06:44.770
jika kita mengatakan janji tipe apa pun, yang pada dasarnya akan sama

06:44.770 --> 06:46.870
dengan tipe tidak akan tahu tipe generik jika

06:46.870 --> 06:48.390
tidak akan memiliki informasi

06:48.390 --> 06:51.280
tentang apa yang kita dapatkan kembali.

06:51.280 --> 06:53.340
Nah kemudian pada janji ini tentu saja, kita bisa menggunakannya

06:53.340 --> 06:55.750
seperti yang bisa kita lakukan pada semua janji dan pada akhirnya

06:55.750 --> 06:57.770
kita akan mendapatkan beberapa data tetapi kita tidak

06:57.770 --> 06:59.770
tahu apa-apa tentang data itu.

06:59.770 --> 07:02.500
Saya tidak bisa memanggil metode string di atasnya, misalnya.

07:02.500 --> 07:04.850
Yah saya bisa karena ada dalam kasus ini tetapi saya

07:04.850 --> 07:07.590
tidak mendapatkan dukungan TypeScript tertentu.

07:07.590 --> 07:11.313
Saya juga bisa mencoba berbagai hal di atasnya, yang pasti tidak akan berhasil.

07:12.170 --> 07:13.800
Misalnya, jika kita membalikkan ini

07:13.800 --> 07:15.220
dan kita mengembalikan angka di

07:15.220 --> 07:17.320
sini, saya masih bisa memanggil metode string di

07:17.320 --> 07:19.390
sini karena TypeScript tidak memiliki informasi

07:19.390 --> 07:22.640
tentang data yang pada akhirnya akan dihasilkan oleh janji ini.

07:22.640 --> 07:24.070
Sekarang dengan tipe generik,

07:24.070 --> 07:26.280
kita memberikan informasi itu ke TypeScript.

07:26.280 --> 07:28.160
Kita dapat memberitahu TypeScript bahwa

07:28.160 --> 07:30.240
promise ini pada akhirnya akan menghasilkan

07:30.240 --> 07:32.840
string atau dalam hal ini, angka dan kemudian TypeScript

07:32.840 --> 07:34.940
dapat memperingatkan kita di sini.

07:34.940 --> 07:37.390
Jika saya mencoba untuk menyimpan ini, ini akan memberi

07:37.390 --> 07:40.870
kita kesalahan karena ia tahu hei janji ini pada akhirnya akan menghasilkan

07:40.870 --> 07:44.092
angka dan Anda dapat memanggil split pada itu.

07:44.092 --> 07:48.010
Jadi kita mendapatkan keamanan tipe yang lebih baik dengan tipe generik.

07:48.010 --> 07:50.510
Jadi, Anda benar-benar fleksibel mengenai apa yang Anda

07:50.510 --> 07:52.720
lakukan dengan informasi tipe generik itu.

07:52.720 --> 07:54.830
Sebuah larik mengetahui data mana yang disimpan, sebuah

07:54.830 --> 07:57.140
janji mengetahui data mana yang dikembalikan.

07:57.140 --> 07:59.840
Jika Anda membangun kelas atau fungsi generik Anda sendiri, Anda mungkin melakukan

07:59.840 --> 08:02.140
sesuatu yang sama sekali berbeda dari yang ada di sana.

08:02.140 --> 08:04.570
Tetapi pada akhirnya tipe generik membantu Anda

08:04.570 --> 08:06.970
untuk mendapatkan informasi tipe tambahan jika

08:06.970 --> 08:10.640
Anda memiliki kelas yang lebih kompleks atau fungsi yang lebih kompleks

08:10.640 --> 08:14.240
yang melakukan sesuatu dengan data yang masuk, dengan cara yang tidak

08:14.240 --> 08:16.020
terlalu peduli tentang data yang berasal

08:16.020 --> 08:18.700
dari satu tipe tertentu, tetapi di mana Anda ingin menyimpan

08:18.700 --> 08:21.500
informasi tipe dari data yang masuk untuk mendapatkan

08:21.500 --> 08:24.850
dukungan TypeScript yang lebih baik setiap kali Anda bekerja dengan

08:24.850 --> 08:27.590
tipe generik Anda.

08:27.590 --> 08:30.450
Jadi, kapan pun Anda bekerja dengan janji itu, atau larik

08:30.450 --> 08:33.270
data, pada dasarnya itulah ide dari generik.

08:33.270 --> 08:36.300
Jadi ini di sini, semua dibangun secara generik.

08:36.300 --> 08:37.460
Mari kita komentari itu.

08:37.460 --> 08:40.450
Sekarang mari kita bangun kata tipe generik kita sendiri.

08:40.450 --> 08:42.653
Mari kita gunakan tipe generik kita sendiri.
