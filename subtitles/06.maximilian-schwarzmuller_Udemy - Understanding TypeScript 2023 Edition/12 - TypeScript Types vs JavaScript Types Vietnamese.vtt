WEBVTT

00:00.000 --> 00:02.410
(im lặng) -: Vậy là chúng ta đã thấy TypeScript

00:02.410 --> 00:04.190
có thể giúp chúng ta như thế nào

00:04.190 --> 00:06.200
trong quá trình phát triển.

00:06.200 --> 00:10.560
Bây giờ, chúng ta cũng biết rằng có một kiểu số trong JavaScript.

00:10.560 --> 00:14.010
Và chúng ta có thể thấy nó với kiểu toán tử được tích hợp sẵn.

00:14.010 --> 00:15.781
Điều này hiện không dành riêng cho

00:15.781 --> 00:17.560
TypeScript, đây là một toán tử và

00:17.560 --> 00:20.420
từ khóa tích hợp được hỗ trợ bởi JavaScript.

00:20.420 --> 00:22.910
Chúng ta có thể sử dụng nó để lấy kiểu của một giá trị nào đó.

00:22.910 --> 00:27.050
Vì vậy, ở đây, chúng ta có thể điều khiển loại khóa số một.

00:27.050 --> 00:27.992
Và những gì chúng tôi sẽ

00:27.992 --> 00:30.780
thấy nếu chúng tôi làm điều đó là ngay sau khi chúng tôi biên dịch mã

00:30.780 --> 00:32.623
này, để chúng tôi chạy mã được cập nhật.

00:33.780 --> 00:37.040
Ở đây, chúng tôi in số ra bàn điều khiển.

00:37.040 --> 00:39.330
Bây giờ chúng tôi làm điều đó, nhờ kết quả đầu ra này

00:39.330 --> 00:41.180
ở đây và nhờ loại toán tử và trong Vanilla

00:41.180 --> 00:43.770
JavaScript, không có TypeScript, chúng tôi có thể sử

00:43.770 --> 00:46.710
dụng điều đó để luôn cải thiện chức năng của mình ở đây.

00:46.710 --> 00:51.500
Chúng tôi có thể kiểm tra xem loại số có bằng số không.

00:51.500 --> 00:54.300
Xin lỗi, ý tôi là loại n1, nếu nó

00:54.300 --> 00:56.350
bằng số và chúng ta cũng

00:56.350 --> 01:00.710
có thể kiểm tra xem loại n2 có bằng số không.

01:00.710 --> 01:02.349
và chỉ thực hiện thao tác

01:02.349 --> 01:05.220
của chúng tôi ở đây nếu đó là một lỗi khác hoặc

01:05.220 --> 01:07.860
làm ngược lại và kiểm tra xem nó không bằng

01:07.860 --> 01:10.820
nhau hay nếu n2 không bằng nhau.

01:10.820 --> 01:13.230
Và nếu một trong hai không phải là số,

01:13.230 --> 01:16.360
thì chúng tôi có thể đưa ra một lỗi mới mà chúng

01:16.360 --> 01:19.690
tôi nói là nhập sai. Đây thực sự sẽ là một cách

01:19.690 --> 01:22.300
không phải TypeScript để đảm bảo rằng chúng

01:22.300 --> 01:25.700
ta không thể gọi hàm này bằng một chuỗi ở đây.

01:25.700 --> 01:26.760
Nếu tôi làm điều này ngay

01:26.760 --> 01:29.060
bây giờ và tôi biên dịch lại, chúng tôi sẽ gặp lỗi TypeScript,

01:29.060 --> 01:30.830
nhưng bây giờ hãy bỏ qua điều đó.

01:30.830 --> 01:31.730
Nếu chúng tôi chạy lại điều

01:31.730 --> 01:33.100
này, chúng tôi sẽ nhận được đầu vào không

01:33.100 --> 01:34.940
chính xác, chúng tôi đang tự ném mình.

01:34.940 --> 01:38.080
Vì vậy, bây giờ chúng tôi đã khắc phục tình trạng rối loạn chức năng trong

01:38.080 --> 01:39.930
JavaScript, nó bị lỗi trong thời gian chạy,

01:39.930 --> 01:41.970
nhưng lỗi ở đây có thể tốt hơn là hiển thị kết quả

01:41.970 --> 01:44.950
đầu ra không chính xác mà chúng tôi đã có trước đó.

01:44.950 --> 01:47.640
Vì vậy, đây sẽ là một cách kiểm tra đầu vào chỉ bằng

01:47.640 --> 01:48.715
JavaScript.

01:48.715 --> 01:50.640
Bạn không cần TypeScript cho việc đó.

01:50.640 --> 01:53.200
Đó là mã JavaScript thông thường.

01:53.200 --> 01:54.033
Nhưng tất nhiên, phương

01:54.033 --> 01:55.160
pháp này có nhược điểm.

01:55.160 --> 01:57.160
Đôi khi đó là điều đúng đắn để làm.

01:57.160 --> 02:01.440
Đôi khi, bạn chỉ có thể xác thực một số đầu vào nhất định trong thời gian chạy.

02:01.440 --> 02:03.150
Nhưng nhược điểm là ở đây, chúng

02:03.150 --> 02:05.480
tôi đang kiểm tra thứ gì đó mà chúng tôi thực sự

02:05.480 --> 02:08.950
có thể tránh được trong quá trình phát triển với TypeScript.

02:08.950 --> 02:11.180
Vì vậy, có, chúng tôi đang ném một lỗi.

02:11.180 --> 02:14.210
Và trong ứng dụng của chúng tôi, chúng tôi có thể đã tích

02:14.210 --> 02:16.860
hợp các biện pháp mà sau đó có thể quay lại một số hành

02:16.860 --> 02:19.080
vi khác để lưu ứng dụng đang chạy.

02:19.080 --> 02:20.750
Tuy nhiên, chúng tôi vẫn đưa ra

02:20.750 --> 02:24.180
một lỗi, điều này thực sự không cần thiết xảy ra ngay từ đầu.

02:24.180 --> 02:27.350
Chúng tôi có thể ngăn chặn nó bằng TypeScript.

02:27.350 --> 02:28.830
Và ở đây, chúng ta thực sự thấy sự khác

02:28.830 --> 02:30.400
biệt giữa JavaScript và TypeScript,

02:30.400 --> 02:31.450
khi nói đến các loại.

02:31.450 --> 02:33.750
JavaScript được nhập động, điều đó

02:33.750 --> 02:35.610
có nghĩa là chúng ta hoàn toàn

02:35.610 --> 02:36.880
có thể có một biến mà

02:36.880 --> 02:39.100
ban đầu có thể chứa một số, sau đó chúng

02:39.100 --> 02:41.600
ta sẽ gán một chuỗi cho biến đó.

02:41.600 --> 02:44.500
Và đó là lý do tại sao chúng ta phải gõ tắt toán tử để

02:44.500 --> 02:48.024
chúng ta có thể kiểm tra loại hiện tại của thứ gì đó trong thời

02:48.024 --> 02:50.124
gian chạy nếu chúng ta có một số mã phụ

02:50.124 --> 02:52.267
thuộc vào một loại nhất định.

02:52.267 --> 02:53.570
Mặt khác, TypeScript

02:53.570 --> 02:55.094
được nhập tĩnh, có nghĩa

02:55.094 --> 02:58.480
là chúng tôi xác định các loại biến và tham số kết

02:58.480 --> 03:01.740
thúc trong quá trình phát triển, chúng không đột

03:01.740 --> 03:04.980
ngột thay đổi trong thời gian chạy.

03:04.980 --> 03:05.813
Tất nhiên, bây giờ,

03:05.813 --> 03:09.090
vì TypeScript được biên dịch sang JavaScript, nên về mặt lý

03:09.090 --> 03:10.660
thuyết, chúng có thể.

03:10.660 --> 03:12.510
Nhưng nếu chúng ta sử dụng TypeScript

03:12.510 --> 03:13.790
và chúng ta viết mã trong

03:13.790 --> 03:17.530
đó chúng ta đột nhiên gán một loại dữ liệu mới vào một biến, nơi mà

03:17.530 --> 03:18.810
trước đây chúng ta đã nói

03:18.810 --> 03:19.840
rằng đây phải là một

03:19.840 --> 03:22.900
số chẳng hạn, và bây giờ chúng ta đang gán một chuỗi,

03:22.900 --> 03:25.810
thì chúng ta sẽ nhận được một lỗi trong quá trình phát

03:25.810 --> 03:27.480
triển, do đó chúng tôi buộc phải

03:27.480 --> 03:29.670
rõ ràng về các loại, thứ gì đó có thể hoặc

03:29.670 --> 03:32.120
không thể giữ.

03:32.120 --> 03:33.710
Đó là sự khác biệt ở đây.

03:33.710 --> 03:36.620
Vì vậy, chúng tôi thực sự không muốn sử dụng các triển khai

03:36.620 --> 03:38.330
hoặc giải pháp như vậy, nếu chúng

03:38.330 --> 03:40.810
tôi có thể tránh điều đó bằng TypeScript.

03:40.810 --> 03:42.200
Tuy nhiên, điều quan trọng

03:42.200 --> 03:43.890
là phải biết rằng JavaScript

03:43.890 --> 03:46.400
Tất nhiên, biết về khái niệm các loại.

03:46.400 --> 03:48.740
Nó biết về một số loại như số,

03:48.740 --> 03:50.640
chuỗi và Boolean.

03:50.640 --> 03:52.300
Nhưng sử dụng điều đó luôn có nghĩa là chúng

03:52.300 --> 03:53.540
tôi chỉ có thể thất bại trong

03:53.540 --> 03:56.400
thời gian chạy thay vì trong quá trình phát triển, đây là nơi tốt hơn

03:56.400 --> 03:58.700
cho chúng tôi với tư cách là nhà phát triển.

03:58.700 --> 04:01.550
Nó cho phép chúng tôi sửa lỗi sớm hơn.

04:01.550 --> 04:02.840
Ngoài ra, JavaScript

04:02.840 --> 04:05.410
chỉ biết về một vài loại.

04:05.410 --> 04:07.170
Như bạn sẽ học trong suốt khóa học này.

04:07.170 --> 04:10.540
TypeScript biết nhiều loại hơn JavaScript.

04:10.540 --> 04:14.450
Vì vậy, việc kiểm tra thời gian chạy thực sự không linh hoạt hoặc không

04:14.450 --> 04:18.030
mạnh mẽ như những gì chúng ta có thể làm với TypeScript.

04:18.030 --> 04:19.490
Và vì tất cả những lý do này, cách

04:19.490 --> 04:20.660
tiếp cận này thực sự không

04:20.660 --> 04:22.550
phải là cách chúng tôi muốn sử dụng ở đây.

04:22.550 --> 04:26.540
Đôi khi, có thể hữu ích khi lấy loại trong thời gian chạy.

04:26.540 --> 04:28.790
Nhưng đôi khi, như trong ví dụ này, tốt

04:28.790 --> 04:31.740
hơn hết là lấy nó trong quá trình phát triển.

04:31.740 --> 04:34.280
Tất nhiên, điều quan trọng duy nhất cần nhận ra,

04:34.280 --> 04:36.070
chỉ là với TypeScript, bạn chỉ được

04:36.070 --> 04:38.670
hỗ trợ trong quá trình phát triển chứ không phải trong

04:38.670 --> 04:39.596
thời gian chạy, bởi

04:39.596 --> 04:41.610
vì các tính năng và kiểm tra TypeScript

04:41.610 --> 04:44.650
này không được tích hợp vào công cụ JavaScript để logic không

04:44.650 --> 04:47.590
thể thực thi trong trình duyệt , nó chỉ có thể thực thi trong

04:47.590 --> 04:49.416
quá trình phát triển khi bạn biên dịch

04:49.416 --> 04:51.223
mã của mình.
