WEBVTT

00:02.160 --> 00:06.440
教师：这是一个实际项目中的相同示例｡

00:06.440 --> 00:08.550
您会发现这个简单的项目, 索引HTML文件和JavaScript文件,

00:08.550 --> 00:13.340
在一个子文件中附加到这个视频｡

00:13.340 --> 00:16.900
您可以简单地打开此文件, 然后打开索引HTML文件｡ 

00:16.900 --> 00:20.890
您也可以在选择的任何文本编辑器中开启程式码｡

00:20.890 --> 00:22.160
在这里, 我使用VisualStudioCode,

00:22.160 --> 00:26.250
稍后我将在本模块中返回到我的确切设置｡

00:26.250 --> 00:31.180
现在, 您可以使用任何文本编辑器打开这两个文本文件｡

00:31.180 --> 00:34.110
现在你会发现这个JavaScript文件,

00:34.110 --> 00:37.000
它与这个索引HTML文件交互｡

00:37.000 --> 00:43.698
然后是索引HTML文件, 您会发现两个输入和按钮以及导入到此处的任何JavaScript文件｡

00:43.698 --> 00:45.843
我们基本上接触到了这些元素｡ 

00:45.843 --> 00:47.968
然后, 我们在这里有一个函数,

00:47.968 --> 00:50.020
在按钮上有一个事件侦听器,

00:50.020 --> 00:53.830
它触发该函数, 并在控制台中记录该函数的结果｡

00:53.830 --> 00:56.750
现在, 如果我们简单地打开索引HTML文件,

00:56.750 --> 01:00.701
在Windows资源管理器或Mac Finder中双击它,

01:00.701 --> 01:05.150
使其在浏览器中打开, 您将看到以下内容｡

01:05.150 --> 01:07.250
两个输入和添加按钮,

01:07.250 --> 01:11.170
在这里我打开了浏览器开发工具以及｡

01:11.170 --> 01:13.760
例如, 如果您在这里输入10和5,

01:13.760 --> 01:19.420
您可能会在右边看到15, 但实际上您看到的是105｡

01:19.420 --> 01:23.460
这向我们展示了JavaScript的一个弱点｡ 

01:23.460 --> 01:25.890
这不是技术错误｡ 

01:25.890 --> 01:28.050
这不是抛出的错误,

01:28.050 --> 01:31.640
而是应用程序中的逻辑错误｡

01:31.640 --> 01:33.986
那么, 这个错误是从哪里来的呢？

01:33.986 --> 01:37.490
在JavaScript中, 我访问这两个输入,

01:37.490 --> 01:45.300
当单击按钮时, 最后我获得这两个输入元素的值, 并将它们传递到这里进行相加｡

01:45.300 --> 01:46.970
在这里, 重要的是要知道,

01:46.970 --> 01:50.100
在JavaScript中, 当你访问一个input元素的值时,

01:50.100 --> 01:53.130
它总是一个字符串｡

01:53.130 --> 01:55.790
无论是哪种类型的输入, 始终为｡ 

01:55.790 --> 01:59.633
无论是否为数字类型, 它都是字符串｡ 

02:00.645 --> 02:05.890
所以我在函数的最后传递了两个字符串, 如果你在JavaScript中添加两个字符串,

02:05.890 --> 02:09.570
它们会被连接起来而不是数学上的相加.

02:09.570 --> 02:14.210
这就是为什么我们看到105, 10和5连接在一起｡ 

02:14.210 --> 02:17.090
这就是JavaScript的问题所在｡ 

02:17.090 --> 02:19.980
这正是TypeScript可以帮助我们的地方｡ 

02:19.980 --> 02:24.380
如果没有TypeScript, 我们当然可以在这里添加一个if检查,

02:24.380 --> 02:28.048
检查numone的类型是否等于number｡

02:28.048 --> 02:37.390
如果numtwo的类型等于number, 如果是这样的话我就这样返回我的计算结果,

02:37.390 --> 02:47.428
否则我可能会抛出一个错误或者我至少通过在每个参数前面加一个加号来把两者都转换成数字.

02:47.428 --> 02:50.510
这是我们可以编写的代码｡ 

02:50.510 --> 02:53.023
在JavaScript中可能比这更精细一点｡ 

02:53.023 --> 02:57.130
这样我们就可以确保我们把数字或者输入转换成数字,

02:57.130 --> 03:00.670
如果它们还不是数字的话｡

03:00.670 --> 03:02.430
这样, 如果我重新加载并重复,

03:02.430 --> 03:07.590
现在我们得到15, 因为我们修改了代码｡

03:07.590 --> 03:09.350
当然我们可以用JavaScript来实现｡ 

03:09.350 --> 03:10.970
这是一个普通的JavaScript,

03:10.970 --> 03:13.440
没有TypeScript的味道｡

03:13.440 --> 03:16.640
但是我们为一个错误写了一些额外的代码,

03:16.640 --> 03:19.048
我实际上想首先防止这个错误｡

03:19.048 --> 03:22.210
我不想发生这种事｡ 

03:22.210 --> 03:26.260
我想确保我们甚至不能在这里传递字符串来添加,

03:26.260 --> 03:31.020
因为add应该是一个只对数字进行操作的函数｡

03:31.020 --> 03:35.650
所以在这里我们不需要检查是否得到了一个数字｡

03:35.650 --> 03:38.500
所以我想让这个函数保持以前的状态｡

03:38.500 --> 03:41.630
我想要这个函数, 就像这样｡ 

03:41.630 --> 03:44.003
而这正是TypeScript可以帮助我们的地方｡ 

03:45.088 --> 03:48.900
所以TypeScript可以在我刚才展示的情况下帮助我们｡

03:48.900 --> 03:52.690
现在, 为了了解它如何帮助我们, 让我们安装它｡ 

03:52.690 --> 03:56.590
打字稿语言也是如此｡  你可以点击下载｡ 

03:56.590 --> 03:58.540
在那里您将学习如何安装它｡ 

03:58.540 --> 04:00.250
实际上, 我们将使用此命令安装它,

04:01.136 --> 04:02.880
该命令使用NPM工具,

04:02.880 --> 04:06.750
NPM工具是Node JS包的一部分｡

04:06.750 --> 04:10.210
因此, 即使我们不打算在这里编写Node

04:10.210 --> 04:12.910
JS代码, 我们仍然需要安装Node

04:12.910 --> 04:17.770
JS, 因为在后台, 我们使用的一些工具也会使用它｡

04:17.770 --> 04:21.780
当我们安装Node JS时, 我们也会安装NPM, 即Node

04:21.780 --> 04:29.200
Package Manager, 这是一个我们可以用来在我们的机器上全局安装TypeScript的工具｡

04:29.200 --> 04:31.452
因此, 只需访问节点即可｡  org和那里,

04:31.452 --> 04:34.220
安装你在这里找到的最新版本｡

04:34.220 --> 04:35.723
只需单击此按钮｡ 

04:36.586 --> 04:39.420
然后, 它将下载并安装, 或者您可以逐步完成该安装程序｡

04:39.420 --> 04:42.360
所有操作系统都支持此功能｡ 

04:42.360 --> 04:45.300
一旦安装了Node JS,

04:45.300 --> 04:47.936
就可以运行此命令｡

04:47.936 --> 04:51.440
只需打开常规终端或命令提示符,

04:51.440 --> 04:54.800
然后复制该命令｡

04:54.800 --> 04:59.412
重要的是, 在Mac和Linux上, 您可能需要在此前面添加sudo以获得正确的权限｡

04:59.412 --> 05:02.810
在Windows上, 不需要这样做｡ 

05:02.810 --> 05:06.810
因此, 只需确保随后使用此命令安装TypeScript｡

05:06.810 --> 05:09.372
输入密码, 以防系统提示您输入密码｡ 

05:09.372 --> 05:12.176
这样, 您就在计算机上全局安装了TypeScript,

05:12.176 --> 05:15.430
这意味着什么？

05:15.430 --> 05:17.696
已安装类型脚本｡ 

05:17.696 --> 05:20.810
现在请记住TypeScript是一种编程语言,

05:20.810 --> 05:22.750
但它只是一种可以工作的编程语言,

05:22.750 --> 05:28.137
因为我们还有这个编译器, 这个编译成JavaScript的工具｡

05:28.137 --> 05:31.310
最后, 我们在这里安装的是编译器和它需要了解的一切,

05:31.310 --> 05:33.296
以理解TypeScript代码,

05:33.296 --> 05:39.020
将其转换为JavaScript｡

05:39.020 --> 05:41.036
这样, 我们就安装了编译器,

05:41.036 --> 05:50.870
现在就可以运行TSC命令, 该命令调用TypeScript编译器将TypeScript文件编译为JavaScript｡

05:50.870 --> 05:56.563
为了在我们的项目中看到这一点, 让我们简单地使用ts添加一个新文件｡

05:56.563 --> 05:56.563
例如TS｡ 

05:56.563 --> 05:58.677
任何 名称 ,  但 扩展 名 应为 ｡  ts,

05:58.677 --> 06:03.677
代表TypeScript｡

06:05.100 --> 06:07.651
现在 , 让 我们 将 JavaScript 代码 复制

06:07.651 --> 06:09.850
到 TypeScript 文件 中 ｡

06:09.850 --> 06:14.280
在VisualStudioCode中, 我立即得到了一些错误, 我们现在将修复这些错误｡

06:14.280 --> 06:16.379
这 是 TypeScript 的 一大 优势 ｡ 

06:16.379 --> 06:18.915
如果您使用的是正确的IDE, 我强烈建议您使用VisualStudioCode,

06:18.915 --> 06:24.420
稍后我会再讨论这个问题｡

06:24.420 --> 06:30.230
这样, 在TypeScript文件内部工作时, 您就已经在IDE中获得了很好的支持｡

06:30.230 --> 06:36.910
在这里, 它基本上已经让TypeScript分析我的代码并识别一些弱点｡

06:36.910 --> 06:39.720
这很好, 因为这正是我想要的｡ 

06:39.720 --> 06:44.003
在这个例子中, 我删除了JavaScript的JS文件｡

06:45.952 --> 06:48.360
这样, 一些错误就消失了,

06:48.360 --> 06:53.230
因为它确定了一些常量等在多个文件中使用｡

06:53.230 --> 06:55.787
但它仍然给我一个错误在那里｡ 

06:55.787 --> 07:00.108
比如, 你看到的是, 它不确定是否真的有一个值属性｡

07:00.108 --> 07:03.200
这是一个我以前在JavaScript中甚至没有考虑过的错误,

07:03.200 --> 07:05.720
但这是真的｡

07:05.720 --> 07:08.350
我在这里按ID选择一个元素｡ 

07:08.350 --> 07:11.680
现在, TypeScript无法知道这是否真的有效｡ 

07:11.680 --> 07:13.160
也许我这里有个错字｡ 

07:13.160 --> 07:15.940
在这种情况下, 我将无法选择图元｡ 

07:15.940 --> 07:17.704
这个元素根本不会存在于页面上｡ 

07:17.704 --> 07:20.164
因此, 我们可能有一个打字错误和TypeScript不分析您的HTML代码,

07:20.164 --> 07:22.472
以找出是否这样做的工作｡

07:22.472 --> 07:24.468
首先, 这可能会失败｡ 

07:24.468 --> 07:30.910
但是, 即使它成功了, 我们在那里选择了一个元素, 它也不必是一个输入元素｡

07:30.910 --> 07:37.450
它可以是任何其他元素, 并且大多数HTML元素都没有可以访问的value属性｡

07:37.450 --> 07:38.630
这已经很棒了｡ 

07:38.630 --> 07:41.372
TypeScript迫使我们更明确,

07:41.372 --> 07:46.130
更清楚地了解我们的意图, 并仔细检查我们的代码｡

07:46.130 --> 07:49.820
比如这里, 你不需要理解所有的语法｡

07:49.820 --> 07:52.172
我们将在整个课程中一步一步地学习｡ 

07:52.172 --> 07:55.660
但例如, 在这里, 我们可以让TypeScript知道,

07:55.660 --> 08:00.080
我们确信我们将通过添加感叹号来获得一个元素｡

08:00.080 --> 08:04.170
这基本上是告诉TypeScript这永远不会产生null｡ 

08:04.170 --> 08:06.370
这将始终查找元素｡ 

08:06.370 --> 08:10.350
作为一个开发人员, 我当然知道这总是会找到一个元素,

08:10.350 --> 08:11.920
因为我仔细检查了ID,

08:11.920 --> 08:14.763
我看到是的, 我在这里有那个ID｡

08:15.610 --> 08:19.500
现在除此之外, 我还知道它将永远是一个输入元素｡

08:19.500 --> 08:22.408
因此, 我们可以使用一种称为类型转换的语法作为HTML输入元素,

08:22.408 --> 08:30.327
我将在后面更详细地解释它, 让TypeScript知道这将是哪种类型的元素｡

08:30.327 --> 08:32.926
我们也可以把这个应用到第二个元素上｡ 

08:32.926 --> 08:37.510
这里要说清楚, 这是TypeScript语法｡

08:37.510 --> 08:39.520
我可以在这里使用这个感叹号,

08:39.520 --> 08:41.600
我可以在这里使用这个类型转换,

08:41.600 --> 08:44.786
因为我们在一个｡ ts文件中, 我们在TypeScript文件中｡ 

08:44.786 --> 08:48.380
我们将把它编译成JavaScript｡ 

08:48.380 --> 08:51.050
这在普通JavaScript中不起作用｡ 

08:51.050 --> 08:53.427
这在那里是不可用的｡ 

08:53.427 --> 08:56.300
这样, 我们就不得不更清楚自己的意图,

08:56.300 --> 08:58.460
真正地思考我们的代码并仔细检查它,

08:58.460 --> 09:01.060
这是很好的｡

09:01.060 --> 09:03.160
但这还不是最大的优势｡ 

09:04.270 --> 09:06.820
最大的优点是增加了类型｡ 

09:06.820 --> 09:09.630
毕竟, 这就是TypeScript的名字｡ 

09:09.630 --> 09:14.204
这里我并不是说这个函数操作的数据类型｡

09:14.204 --> 09:20.126
如果我们将鼠标悬停在其中一个参数上, 我们会看到这里的任何内容｡

09:20.126 --> 09:22.828
最后, 这是TypeScript对我们说,

09:22.828 --> 09:24.880
“我不知道里面有什么｡ 它可以是任何类型的值｡ 

09:24.880 --> 09:27.162
现在我们可以在TypeScript文件中添加一个更显式的类型｡ 

09:27.162 --> 09:31.960
因此, 不是在JavaScript文件中, 而是在TypeScript文件中, 通过在此处添加冒号,

09:31.960 --> 09:33.806
然后指定类型｡

09:33.806 --> 09:38.580
例如, 数字｡ 

09:38.580 --> 09:40.730
在这里做这个, 在这里做这个｡ 

09:40.730 --> 09:43.300
通过这个编译器理解的额外语法,

09:43.300 --> 09:47.928
我们告诉TypeScript这个是数字类型,

09:47.928 --> 09:50.960
这个是数字类型.

09:50.960 --> 09:54.010
因此, 现在我们再次得到一个错误｡ 

09:54.010 --> 09:58.060
顺便说一句, 我们并不是只在IDE中得到这个错误｡

09:58.060 --> 09:59.370
如果我们试图编译这段代码,

09:59.370 --> 10:01.940
我们也会得到它, 因为这是我们最终需要做的,

10:01.940 --> 10:03.820
对吗？

10:03.820 --> 10:05.326
为了编译这个, 我将打开一个终端｡ 

10:05.326 --> 10:10.760
这里我只是打开集成到IDE中的终端或命令提示符｡

10:10.760 --> 10:13.683
这是常规的系统命令提示符｡ 

10:14.947 --> 10:19.533
我在这里使用的常规系统命令终端也已经导航到了这个文件夹｡

10:20.510 --> 10:22.446
因此, 如果您没有使用一些内置的IDE终端,

10:22.446 --> 10:33.960
您可以使用常规的IDE终端, 但CD导航到您添加TypeScript文件的解压启动文件夹｡

10:33.960 --> 10:36.300
一旦进入该文件夹, 您就可以运行TSC｡ 

10:36.300 --> 10:42.980
这将调用我们之前使用破折号ts安装的TypeScript编译器｡

10:42.980 --> 10:42.980
ts.

10:42.980 --> 10:47.980
如果你运行这个程序, 你会得到一个错误｡ 

10:47.990 --> 10:50.728
您仍然会得到一个JavaScript文件,

10:50.728 --> 10:53.267
因为默认情况下TypeScript仍然会将其编译为JavaScript,

10:53.267 --> 11:00.050
您还将在本课程的后面部分学习如何禁止此操作｡

11:00.050 --> 11:02.900
但是在这样做的时候会给你一个编译器错误｡ 

11:02.900 --> 11:09.070
它告诉你字符串类型的参数不能赋值给数字类型的参数｡

11:09.070 --> 11:18.930
所以这里的问题是TypeScript知道我们在input元素的value属性上得到的是一个字符串｡

11:18.930 --> 11:23.130
在IDE中也可以看到这一点｡ 

11:23.130 --> 11:24.786
我们不能把这个传递给add,

11:24.786 --> 11:28.130
因为我们不需要字符串, 我们需要一个数字｡

11:28.130 --> 11:31.026
所以我们必须修正这个问题, 比如说, 把它转换成一个数字,

11:31.026 --> 11:33.600
在这里加上一个加号｡

11:33.600 --> 11:39.708
一旦我们这样做了, 我们就可以通过重复那个命令再次编译这个代码,

11:39.708 --> 11:42.406
现在它编译没有错误｡

11:42.406 --> 11:45.225
它使用TypeScript提供给我们｡  JavaScript文件, 现在它再次显示一些错误,

11:45.225 --> 11:53.090
因为它不明白它永远不会在这里同时使用这两个文件｡

11:54.028 --> 11:55.373
同样, 在本课程后面的部分中,

11:56.466 --> 11:58.530
我们将在配置后对这些内容进行改进｡

11:58.530 --> 12:00.428
我们现在可以忽略这一点｡ 

12:00.428 --> 12:01.261
它给我这个文件｡ 

12:02.588 --> 12:04.348
如果我们打开这个, 我们会看到一些有趣的东西｡ 

12:04.348 --> 12:06.210
我们看到, 在那里, 当然, 我们的类型消失了｡ 

12:06.210 --> 12:08.690
这里的石膏没了｡ 

12:08.690 --> 12:11.280
我们又有了普通JavaScript｡ 

12:11.280 --> 12:13.308
因此, 如果我们看一下这里的TypeScript文件,

12:13.308 --> 12:16.250
我们会看到这里有所有这些不错的添加｡

12:16.250 --> 12:18.786
但正如我提到的, 这些只是TypeScript特性｡ 

12:18.786 --> 12:22.130
当您编译为JavaScript时, 它们用于评估代码并查找潜在的错误,

12:22.130 --> 12:29.090
但随后它们被剥离, 我们得到的是常规JavaScript作为输出｡

12:29.090 --> 12:37.010
现在我们可以转到索引HTML文件并使用ts导入｡

12:37.010 --> 12:37.010
这很重要｡ 

12:37.010 --> 12:43.550
始终导入JavaScript文件, 因为浏览器无法运行TypeScript｡

12:43.550 --> 12:45.990
我们需要导入编译的结果｡ 

12:45.990 --> 12:49.480
现在, 如果我们重新加载它, 我们就有了工作代码,

12:49.480 --> 12:52.108
因为现在, 我们有了正确的JavaScript代码,

12:52.108 --> 13:01.110
我们通过在将输入传递给函数之前对其进行转换来修复这个问题｡

13:01.110 --> 13:03.010
但是, 我们能够修复这些问题,

13:03.986 --> 13:06.087
因为我们在这里的类型注释｡

13:06.087 --> 13:10.720
正如您所看到的, 我们还必须以更简洁的方式编写代码的其他部分｡

13:10.720 --> 13:13.220
这就是为什么TypeScript是惊人的｡ 

13:13.220 --> 13:15.400
它迫使我们编写更好､ 更干净､

13:15.400 --> 13:17.880
更不易出错的代码｡
