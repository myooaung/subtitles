WEBVTT

00:02.190 --> 00:04.860
-: أريد أن أبدأ بميزة مساحة الاسم.

00:04.860 --> 00:06.810
الآن لأريكم كيف يعمل

00:06.810 --> 00:09.980
، سألتقط هاتين الواجهتين هنا.

00:09.980 --> 00:11.480
واجهات السحب والإفلات ،

00:11.480 --> 00:14.140
قم بقصها من التطبيق. ts وإضافة ملف

00:14.140 --> 00:19.140
جديد ، اسحب واجهات. ts على سبيل المثال.

00:21.270 --> 00:25.180
الآن يمكننا لصقها هناك والآن لاستخدام مساحات الأسماء

00:25.180 --> 00:29.140
، كل ما علينا فعله هو إضافة مساحة اسم الكلمة الرئيسية

00:31.645 --> 00:33.620
ثم الأقواس المتعرجة.

00:33.620 --> 00:35.880
الآن علينا أيضًا إعطاء مساحة الاسم

00:35.880 --> 00:39.590
هذه اسمًا وهنا سأسميها واجهات DD للسحب والإفلات ، الاسم

00:39.590 --> 00:41.660
متروك لك رغم ذلك.

00:41.660 --> 00:43.640
الآن ، هذا العام هو ميزة TypeScript

00:43.640 --> 00:45.250
، وليس ميزة JavaScript.

00:45.250 --> 00:47.750
لم يتم تجميعها إلى Vanilla JavaScript

00:47.750 --> 00:50.340
لأنه لا يوجد مكافئ مباشر لها.

00:50.340 --> 00:54.860
بدلاً من ذلك ، ستقوم TypeScript بتجميعها بشكل أساسي إلى كائن يمكنك

00:54.860 --> 00:55.693
قوله.

00:55.693 --> 00:57.490
إلى كائن حيث يتم تخزين الأشياء

00:57.490 --> 01:00.440
التي ستضعها في مساحة الاسم على الخصائص

01:00.440 --> 01:02.140
، ولكن لا داعي للقلق بشأن

01:02.140 --> 01:06.960
ذلك لأن كل حل للوصول إلى هذه الخصائص وأن كل شيء سيعمل سيتم الاهتمام

01:06.960 --> 01:10.640
به بواسطة TypeScript.

01:10.640 --> 01:13.940
لذا يمكننا الآن نقل هذه الواجهات إلى مساحة الاسم

01:13.940 --> 01:16.130
وبذلك نكون على وشك الانتهاء.

01:16.130 --> 01:18.040
الآن لدينا مشكلة واحدة ، ومع

01:18.040 --> 01:22.280
ذلك ، فإن هذه الواجهات متاحة الآن فقط في مساحة الاسم هذه.

01:22.280 --> 01:23.113
بالمناسبة

01:23.113 --> 01:25.530
، لا يمكنك فقط وضع واجهات في مساحة

01:25.530 --> 01:27.070
اسم ، يمكنك وضع أي شيء

01:27.070 --> 01:28.057
هناك ، فئات ،

01:28.057 --> 01:30.780
ثوابت ، كل ما تريد.

01:30.780 --> 01:33.900
كل ما تريد يمكن وضعه في مساحة الاسم.

01:33.900 --> 01:35.630
لذلك يمكنك في الأساس التفاف مساحة

01:35.630 --> 01:37.150
اسم حول أي كود لديك.

01:37.150 --> 01:39.830
لكن المشكلة التي نواجهها هي أن هذه

01:39.830 --> 01:41.140
الميزات ، هذه الواجهات

01:41.140 --> 01:44.800
متوفرة الآن فقط داخل مساحة الاسم تلك.

01:44.800 --> 01:47.280
الآن كما ترى ، ليس لدينا أي شيء آخر هناك.

01:47.280 --> 01:49.010
الآن بالطبع يمكننا إعادة

01:49.010 --> 01:51.600
الكود الذي يعتمد عليهم إلى مساحة الاسم

01:51.600 --> 01:53.370
هذه ، ولكن بعد ذلك مرة أخرى

01:53.370 --> 01:56.960
سوف نفجر هذا لأنه اتضح أن لدينا فئة طويلة جدًا تعتمد

01:56.960 --> 01:58.940
على هذه الواجهات.

01:58.940 --> 02:02.900
لدينا فئة قائمة المشروع وفئة عنصر المشروع.

02:02.900 --> 02:05.260
إنها تعتمد على هذه الواجهات ، لذلك

02:05.260 --> 02:08.922
سيكون هناك الكثير لإضافته إلى مساحة الاسم هذه.

02:08.922 --> 02:10.205
لذلك ، ما يمكنك القيام

02:10.205 --> 02:14.210
به هو أنه يمكنك إضافة الكلمة الأساسية للتصدير أمام واجهة

02:14.210 --> 02:16.850
لتصدير ميزة من مساحة الاسم.

02:16.850 --> 02:19.680
ما يعنيه هذا الآن هو أن هذه الواجهات متوفرة

02:19.680 --> 02:22.110
الآن داخل مساحة الاسم هذه ، ولكن

02:22.110 --> 02:24.487
أيضًا خارج هذا الملف.

02:24.487 --> 02:26.100
وسنرى كيف يعمل هذا في

02:26.100 --> 02:28.510
ثانية ، ولكن مع ذلك نصنع هذه الواجهة

02:28.510 --> 02:30.710
أو أي شيء نقوم بتصديره.

02:30.710 --> 02:32.815
لا يقتصر هذا على الواجهات

02:32.815 --> 02:36.610
المتاحة بالطبع خارج هذا الملف أيضًا إذا قمنا

02:36.610 --> 02:41.140
باستيراد أو استخدام مساحة الاسم هذه بشكل أساسي.

02:41.140 --> 02:41.973
وبالطبع مرة أخرى

02:41.973 --> 02:44.580
لا يمكنك فقط تصدير واجهات في مساحة اسم ولكن

02:44.580 --> 02:45.636
أي شيء آخر.

02:45.636 --> 02:48.010
الآن مع ذلك ، السؤال هو ، كيف يمكننا استيراد مساحة

02:48.010 --> 02:52.410
الاسم هذه الآن مرة أخرى إلى التطبيق.

02:52.410 --> 02:52.410
ولهذا

02:52.410 --> 02:56.210
السبب ، يحتوي TypeScript على صيغة خاصة يمكنك استخدامها.

02:56.210 --> 02:57.867
دعنا نعود إلى الجزء العلوي من التطبيق. ts والآن يمكنك

02:57.867 --> 03:01.440
إضافة ثلاث شرطات مائلة للأمام ، وثلاثة مهمة ، وليس اثنتين

03:01.440 --> 03:03.690
فقط لأن هذا في الواقع ليس تعليقًا عاديًا

03:03.690 --> 03:06.150
ما نقوم بإنشائه الآن ، سيكون هذا في الواقع

03:06.150 --> 03:07.330
عبارة عن بناء جملة

03:07.330 --> 03:10.280
تم التقاطه بواسطة TypeScript تعليقًا خاصًا ،

03:10.280 --> 03:13.110
يمكنك القول أن TypeScript يفهم ما إذا كان يبدأ

03:13.110 --> 03:15.500
بثلاث شرطات مائلة.

03:15.500 --> 03:19.301
هناك تكتب علامة XML ذاتية الإغلاق ، لذا

03:19.301 --> 03:21.600
فإن قوس فتح الزاوية ، ثم

03:21.600 --> 03:24.530
قوس إغلاق الزاوية المائلة للأمام

03:24.530 --> 03:25.790
وفي مسارها المرجعي

03:25.790 --> 03:32.370
يساوي ثم هنا اسم الملف الذي تريد استيراده.

03:32.370 --> 03:35.217
في حالتي هنا ، واجهات السحب. ts.

03:39.330 --> 03:42.550
الآن ، يتم فهم هذا والتقاطه بواسطة TypeScript لأنه كما

03:42.550 --> 03:45.220
ذكرت مع الشرطات المائلة الثلاثة في البداية

03:45.220 --> 03:47.560
، فإنه بناء جملة خاص يفهمه TypeScript

03:47.560 --> 03:50.110
تمامًا كما يفهم هذا الشيء المرجعي.

03:50.110 --> 03:51.960
هذا ليس فانيلا جافا سكريبت

03:51.960 --> 03:53.970
فانيلا جافا سكريبت لا تلاحظه

03:53.970 --> 03:58.480
وهذا ليس ما سيبدو عليه بمجرد تجميعه.

03:58.480 --> 04:00.430
الآن ، ما الذي يحققه بالرغم من ذلك؟

04:00.430 --> 04:05.070
هذا يحقق أن مساحة الاسم هذه واجهات DD متاحة الآن في

04:05.070 --> 04:07.104
التطبيق. ts.

04:07.104 --> 04:08.920
ومع ذلك ، إذا قمت بالتمرير لأسفل

04:08.920 --> 04:11.040
، فسترى أن المحررين لا يزالون يشكون وإذا

04:11.040 --> 04:12.250
حاولنا حفظها لأننا جميعًا

04:12.250 --> 04:14.300
نرتكب أخطاء تجميع جيدة.

04:14.300 --> 04:16.410
لذلك ، لا يبدو أنه متاح.

04:16.410 --> 04:19.730
لا يبدو أن الواجهة القابلة للسحب متاحة هنا.

04:19.730 --> 04:22.386
حسنًا ، هناك شيء خاص حول مساحات الأسماء.

04:22.386 --> 04:25.840
يمكنك استخدامها لتقسيم الكود الخاص بك وتذكر

04:25.840 --> 04:27.930
عندما قلت سابقًا أن ما لديك

04:27.930 --> 04:29.610
في مساحة الاسم يمكن استخدامه

04:29.610 --> 04:32.557
من أي مكان في مساحة الاسم هذه.

04:32.557 --> 04:34.157
حسنًا ، اتضح أنه يمكنك

04:34.157 --> 04:37.580
تقسيم مساحات الأسماء عبر ملفات متعددة عن طريق

04:37.580 --> 04:39.110
تصدير أشياء في مساحة

04:39.110 --> 04:42.330
اسم ثم استخدام بناء جملة الاستيراد الخاص هذا

04:42.330 --> 04:45.230
، ولكن عليك بعد ذلك وضع الأشياء التي تريد

04:45.230 --> 04:48.250
استخدام شيء ما من مساحة اسم الاستيراد هذه

04:48.250 --> 04:50.180
أو من هذا الملف المستورد في

04:50.180 --> 04:51.797
نفس مساحة الاسم.

04:51.797 --> 04:55.050
ومن ثم ربما لا تكون واجهات DD هي الاسم الأفضل.

04:55.050 --> 04:58.010
ربما قمنا للتو بتسمية التطبيق.

04:58.010 --> 04:59.740
الآن ، إذا قمنا بتسمية التطبيق هنا ، فيمكننا

04:59.740 --> 05:01.670
الانتقال إلى التطبيق. ts وإنشاء مساحة

05:01.670 --> 05:04.180
اسم بنفس الاسم هنا ، تطبيق مساحة

05:04.180 --> 05:05.630
الاسم.

05:05.630 --> 05:06.890
والآن في الوقت الحالي

05:06.890 --> 05:10.750
، دعنا نضع كل شيء هنا في مساحة الاسم هذه والآن ترى أن الخطأ

05:10.750 --> 05:12.610
قد اختفى ولا توجد نقاط حمراء

05:12.610 --> 05:14.300
على اليمين.

05:14.300 --> 05:15.513
ومع ذلك ، إذا قمت بحفظ

05:15.513 --> 05:17.850
ذلك ، فسيظل هناك أخطاء هنا.

05:17.850 --> 05:22.850
على سبيل المثال ، لا يتم استخدام قائمة المشروع النهائي هذه.

05:25.010 --> 05:26.300
حسنًا ، هذا صحيح

05:26.300 --> 05:28.210
أنا لا أستخدم ذلك.

05:28.210 --> 05:29.600
أنا لست بحاجة إليه أيضًا

05:29.600 --> 05:32.610
، لذلك يمكننا ببساطة إزالة هذه المفاهيم هنا.

05:32.610 --> 05:35.190
مع ذلك ، إذا حفظنا هذا ، فقد

05:35.190 --> 05:38.040
تم تجميعه الآن بدون أخطاء.

05:38.040 --> 05:39.880
السؤال فقط ما هي نتيجة

05:39.880 --> 05:41.920
هذا التجميع؟

05:41.920 --> 05:44.260
هل لدينا ملف أو ملفان الآن؟

05:44.260 --> 05:46.170
حسنًا ، دعنا نلقي نظرة على

05:46.170 --> 05:49.380
مجلد القرص وهناك ترى أن لديك ملف App JS ثم بعض

05:49.380 --> 05:50.780
التعليمات البرمجية

05:50.780 --> 05:53.980
هنا وملف JS لواجهة السحب والإفلات.

05:53.980 --> 05:56.690
نتيجة لذلك ، حصلنا على ملفين.

05:56.690 --> 05:59.500
الآن ملف واجهة dragon drop فارغ بالفعل

05:59.500 --> 06:00.830
لأنك علمت أن الواجهات

06:00.830 --> 06:04.360
لا يتم تجميعها بشكل أساسي لأي شيء.

06:04.360 --> 06:07.300
لا يوجد مكافئ جافا سكريبت للواجهة.

06:07.300 --> 06:09.270
إنها ميزة TypeScript خالصة.

06:09.270 --> 06:12.370
لذلك يمكننا استيراده باستخدام بناء جملة TypeScript

06:12.370 --> 06:15.509
هنا لاستخدامه والحصول على جميع تحسينات النوع التي

06:15.509 --> 06:17.300
تعلمناها ولكن في الإنتاج لا

06:17.300 --> 06:20.060
يهم ما إذا كان في ملف منفصل أم لا.

06:20.060 --> 06:21.840
إذن بعيدًا عن المسار ، السؤال

06:21.840 --> 06:26.380
هو ماذا لو وضعنا الآن شيئًا موجودًا في الإنتاج ، وهو موجود بالفعل

06:26.380 --> 06:30.000
في JavaScript أيضًا في ملف منفصل.

06:30.000 --> 06:33.373
على سبيل المثال ، هل التعداد وفئة المشروع

06:35.520 --> 06:36.470
هنا ، سأحصل

06:36.470 --> 06:37.610
على كليهما ، وأنشئ

06:37.610 --> 06:41.410
ملفًا جديدًا ، ونموذج شرطة المشروع TS ، وأضع

06:41.410 --> 06:46.040
تعداد حالة مشروعي وفئة المشروع هناك.

06:46.040 --> 06:47.420
الآن تمامًا كما كان من

06:47.420 --> 06:49.070
قبل يمكننا إضافة مساحة اسم

06:49.070 --> 06:50.590
هنا ، يجب أن يكون الاسم هو

06:50.590 --> 06:51.790
التطبيق ، لذلك يجب أن

06:51.790 --> 06:54.020
يتم استخدام مساحة الاسم حيث نريد أيضًا

06:54.020 --> 06:57.340
استخدامها وعلينا تصدير هذه الميزات هناك ، حتى نتمكن

06:57.340 --> 06:59.450
من استخدامها في ملفات أخرى في نفس

06:59.450 --> 07:00.440
مساحة الاسم ، ولكن

07:00.440 --> 07:02.640
ملفات أخرى أيضًا.

07:02.640 --> 07:03.980
الآن مرة أخرى في التطبيق. ts ، علينا

07:03.980 --> 07:05.900
استيراد هذا الملف الثاني.

07:05.900 --> 07:07.890
لذلك سأكرر هذا الاستيراد

07:07.890 --> 07:11.515
وكل نموذج شرطة الاستيراد ts.

07:11.515 --> 07:13.800
إذا قمت بحفظ ذلك وتم تجميعه الآن

07:13.800 --> 07:16.610
ونرى ملف JavaScript نموذج مشروع.

07:16.610 --> 07:18.184
وهناك ، نرى بعض

07:18.184 --> 07:19.490
الرموز.

07:19.490 --> 07:22.770
السؤال هو هل تطبيقنا يعمل الآن؟

07:22.770 --> 07:24.620
لذلك ، دعنا نعيد تحميله

07:25.480 --> 07:27.587
ودعنا نحاول إضافة مشروع هنا

07:27.587 --> 07:29.903
وسترى ، حصلنا على خطأ.

07:29.903 --> 07:33.183
لا يمكن قراءة الخاصية النشطة لـ undefined.

07:34.120 --> 07:36.090
والسبب في ذلك ببساطة هو

07:36.090 --> 07:38.854
أن ملفاتنا مجمعة بشكل مستقل.

07:38.854 --> 07:41.410
توجد مساحات الأسماء في عالم TypeScript

07:41.410 --> 07:44.640
كما قلت ، لا يوجد مكافئ لـ JavaScript لها.

07:44.640 --> 07:47.430
لذا فإن المشكلة التي نواجهها هنا هي أنه في عالم TypeScript

07:47.430 --> 07:48.263
، كل شيء رائع لأن

07:48.263 --> 07:51.610
TypeScript قادر على إيجاد كل الأشياء التي نحتاجها.

07:51.610 --> 07:52.800
على سبيل المثال ،

07:52.800 --> 07:54.420
عندما أقول مشروع هنا ،

07:54.420 --> 07:56.310
عندما أشرت إلى نوع المشروع

07:56.310 --> 07:58.130
هنا في فئة حالة المشروع ، نوع

07:58.130 --> 07:59.310
المشروع هذا ، يتم

07:59.310 --> 08:00.610
تحديد فئة المشروع

08:00.610 --> 08:02.840
هذه في نموذج المشروع.

08:02.840 --> 08:06.020
الآن لا تشكو TypeScript من عدم اكتمالك لأننا

08:06.020 --> 08:07.570
نقوم باستيراد هذا النموذج

08:07.570 --> 08:10.250
، ولكن الاستيراد هنا يعني فقط أننا نخبر

08:10.250 --> 08:13.960
TypeScript بمكان العثور على هذا النوع بمجرد تجميعه

08:13.960 --> 08:15.810
في JavaScript ، يتم تدمير قطع

08:15.810 --> 08:18.150
الاتصال بشكل أساسي.

08:18.150 --> 08:20.840
لذلك في كود JavaScript عند التنفيذ

08:20.840 --> 08:23.230
وعندما نحاول إنشاء مشروع جديد عن

08:23.230 --> 08:25.130
طريق إنشاء مثيل للمشروع

08:25.130 --> 08:27.430
، لا تجد JavaScript فئة المشروع

08:27.430 --> 08:29.610
هذه أو وظيفة المُنشئ.

08:29.610 --> 08:32.980
لذلك علينا أن نتأكد من استمرارنا في قطع الاتصال.

08:32.980 --> 08:35.420
ولهذا يمكننا الذهاب إلى

08:35.420 --> 08:39.640
TS (غمغمة) وهناك حدد خيار الملف هذا.

08:39.640 --> 08:40.740
يمكننا التعليق

08:40.740 --> 08:43.010
على هذا والفكرة وراء الملف

08:43.010 --> 08:45.540
الخارجي هي أنك تخبر TypeScript

08:45.540 --> 08:48.620
أنه يجب أن يربط مساحات الأسماء.

08:48.620 --> 08:49.670
إذاً هذه المراجع

08:49.670 --> 08:51.740
، التي تحتوي عليها أثناء التجميع

08:51.740 --> 08:53.950
في ملف JavaScript واحد بدلاً من

08:53.950 --> 08:56.970
تجميع ملفات JavaScript متعددة.

08:56.970 --> 08:59.210
لذلك هنا بالنسبة للملف الخارجي ، يمكننا القول

08:59.210 --> 09:02.350
إننا نريد أن يكون لدينا ملف في مجلد القرص ، والذي أطلقنا عليه

09:02.350 --> 09:04.770
اسم حزمة ربما. js وإذا فعلنا ذلك

09:05.630 --> 09:07.050
وحفظناه ، فسنحصل في

09:07.050 --> 09:08.700
الواقع على خطأ هنا.

09:09.650 --> 09:10.710
سنحصل على خطأ

09:12.300 --> 09:14.410
مفاده أن AMD ووحدات النظام

09:14.410 --> 09:17.250
فقط مدعومة جنبًا إلى جنب مع الملف.

09:17.250 --> 09:19.540
الآن ، لسنا بحاجة إلى فهم كل شيء هنا

09:19.540 --> 09:23.160
، فهناك طرق مختلفة لتحميل أو تجميع ملفات JavaScript

09:23.160 --> 09:26.120
مختلفة في ملف واحد لأسباب تاريخية وكيفية

09:26.120 --> 09:28.770
تطويرها كلها ، ويمكنك معرفة المزيد حول

09:28.770 --> 09:31.250
هذه الأنواع المجمعة المختلفة في مورد

09:31.250 --> 09:33.700
مرفق إذا كنت تريد ذلك ، لست بحاجة إلى

09:33.700 --> 09:35.340
ذلك.

09:35.340 --> 09:36.800
لذلك ، ما نحتاج إلى القيام

09:36.800 --> 09:38.120
به هنا هو تحديد الوحدة

09:38.120 --> 09:40.470
النمطية التي تم تمييزها بالفعل كخطأ هنا

09:40.470 --> 09:41.598
، ليس لـ JS المشتركة

09:41.598 --> 09:43.943
، ولكن لـ AMD على سبيل المثال.

09:45.400 --> 09:47.700
إذا فعلنا ذلك ، فسيتم تجميعه بدون مشاكل

09:47.700 --> 09:50.010
على الرغم من أنه لا يزال يشكو هنا ، لكنه

09:50.010 --> 09:52.140
لم يكتشف أنني قمت بتغييره والآن

09:52.140 --> 09:53.860
ما يحدث هو في الواقع وجود ملف

09:53.860 --> 09:56.570
JS لحزمة جديدة في التوزيع.

09:56.570 --> 10:00.310
إذا قمت بإزالة جميع ملفات JavaScript في مجلد القرص

10:00.310 --> 10:04.680
وأعدت تشغيل TSC dash ، فسنقوم بمعالجتها حتى يتمكن المحول

10:04.680 --> 10:05.580
البرمجي من رؤية

10:05.580 --> 10:08.600
ملف JS الخاص بالحزمة فقط.

10:08.600 --> 10:11.530
سيحتوي هذا الملف على جميع الكود الخاص

10:11.530 --> 10:13.250
بنا في الإصدار المترجم

10:13.250 --> 10:15.400
والمترجم ، وبالتالي الآن في

10:15.400 --> 10:20.300
فهرس HTML ، علينا فقط استيراد حزمة JS هنا بدلاً من App JS.

10:20.300 --> 10:23.610
وإذا قمنا بذلك وقمنا بإعادة التحميل هنا ، فلدينا

10:23.610 --> 10:25.830
تطبيق يعمل مرة أخرى حيث يمكننا

10:25.830 --> 10:28.260
استخدام السحب والإفلات لكل شيء لأنه

10:28.260 --> 10:30.410
الآن كل شيء في ملف واحد ، ولكن فقط

10:30.410 --> 10:32.661
في النتيجة النهائية.

10:32.661 --> 10:34.230
أثناء التطوير ، لدينا

10:34.230 --> 10:36.260
مساحات الأسماء هذه هنا ، وهي

10:36.260 --> 10:39.030
خطوة واحدة في الاتجاه الصحيح لأنها

10:39.030 --> 10:41.970
بالفعل أكثر قابلية للإدارة.

10:41.970 --> 10:44.350
الآن دعنا نقسم هذا إلى المزيد من الملفات

10:44.350 --> 10:48.283
قبل أن نلقي نظرة على متوسط وحدات TS لخيار التقسيم.
