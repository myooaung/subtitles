WEBVTT

00:02.170 --> 00:05.580
講師：今､ インターフェースやクラスの話が多く出ていました｡

00:05.580 --> 00:07.390
それでは､ JavaScriptが実際に何を生成し､

00:07.390 --> 00:15.290
インターフェイスの代わりとして提供しているのか､ その裏側を覗いてみましょう｡

00:15.290 --> 00:20.560
クラスコードの場合､ 結局はコンパイルするバージョンに依存することを学びました｡

00:20.560 --> 00:27.160
ここでtsの競合でes6用にコンパイルした場合､ 我々の出力はclassキーワードを使うことになります｡

00:27.160 --> 00:29.330
ここではes5用にコンパイルしているので､ その代わり､

00:29.330 --> 00:33.420
最後にconstructやfunctionを使ったこの回避策を見ることができます｡

00:33.420 --> 00:36.670
しかし､ インターフェースはどうなるのでしょうか｡ 

00:36.670 --> 00:38.720
では､ アプリを見てみましょう｡  jsファイルです｡ 

00:38.720 --> 00:41.780
そして､ そこには何も見えません｡ 

00:41.780 --> 00:46.360
私たちのインターフェイスの翻訳が表示されることはありません｡ 

00:46.360 --> 00:49.410
AddFn､ Named､ Greetable｡ 

00:49.410 --> 00:52.970
こういうのは､ アプリではどこにもないんですよね｡  js.

00:52.970 --> 00:55.440
ここにある関数は､ personオブジェクトのコンストラクタ関数です｡

00:55.440 --> 01:03.500
つまり､ 基本的にはpersonクラスの翻訳と､ その他のコードです｡

01:03.500 --> 01:06.680
どのインターフェイスでも､ リファレンスは見つかりません｡ 

01:06.680 --> 01:08.240
それには､ ちゃんとした理由があるんです｡ 

01:08.240 --> 01:11.350
インターフェイスの翻訳がない｡ 

01:11.350 --> 01:13.650
JavaScriptはこの機能を知らない｡ 

01:13.650 --> 01:15.550
これは純粋なTypeScriptの機能であり､

01:15.550 --> 01:18.830
開発とコンパイル時にのみ利用可能です｡

01:18.830 --> 01:21.640
だから､ コードの改善に活用できるのです｡ 

01:21.640 --> 01:26.010
そのため､ より良いコードを書くための純粋な開発機能であり､

01:26.010 --> 01:34.100
明確なルールに従った明確な構造化されたコードです｡

01:34.100 --> 01:38.720
実行時には､ これらのインターフェイスの痕跡は残りません｡ 

01:38.720 --> 01:41.760
コードにはインターフェイスに関連するものは一切表示されず､

01:41.760 --> 01:47.130
関数､ クラス､ その他のコードはすべて出力でコンパイルされます｡

01:47.130 --> 01:50.020
インターフェイスは単に捨てられただけ､ とも言えます｡ 

01:50.020 --> 01:54.340
コンパイル時にコードをチェックするために使用され､ その後は無視されます｡

01:54.340 --> 01:56.690
彼らにとってはアウトプットするものがないのです｡ 
