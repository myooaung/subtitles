WEBVTT

00:02.210 --> 00:04.920
Narrador: Agora, um tipo especial de guarda-tipo,

00:04.920 --> 00:05.753
você poderia dizer,

00:05.753 --> 00:07.940
ou algo que ajuda você com guardas-tipo,

00:07.940 --> 00:10.000
é a união discriminada.

00:10.000 --> 00:11.300
E agora, o que é isso?

00:11.300 --> 00:13.310
É um padrão, que pode ser usado quando

00:13.310 --> 00:15.030
se trabalha com tipos de sindicatos,

00:15.030 --> 00:18.900
o que facilita a implementação de guardas de tipo.

00:18.900 --> 00:22.000
Ela está disponível quando se trabalha com tipos de objetos.

00:22.000 --> 00:24.580
Deixe-me mostrar-lhe como funciona.

00:24.580 --> 00:26.850
Digamos que temos um par de interfaces, e isto

00:26.850 --> 00:28.450
poderia ser também classes, mas

00:28.450 --> 00:29.950
aqui vou para interfaces para

00:29.950 --> 00:32.193
mostrar que funciona com essas também.

00:33.170 --> 00:34.803
E ali tenho meu pássaro, que

00:36.480 --> 00:38.830
tem uma velocidade de vôo, que deve ser

00:38.830 --> 00:40.973
do tipo número, digamos, do tipo.

00:42.660 --> 00:45.890
E eu também tenho meu cavalo, que tem

00:45.890 --> 00:50.310
uma velocidade de solo ou de corrida, que deve ser

00:50.310 --> 00:51.913
do tipo número.

00:53.130 --> 00:55.430
Portanto, temos aqui estas duas interfaces.

00:55.430 --> 00:58.800
Agora criamos nosso próprio tipo de união,

00:58.800 --> 00:59.633
animal, que

01:00.750 --> 01:03.370
é ou um pássaro ou um cavalo.

01:03.370 --> 01:05.743
E como antes, podemos ter uma função,

01:06.740 --> 01:08.480
mover um animal que toma um

01:09.800 --> 01:13.040
animal como insumo, que é do tipo animal, assim usando

01:13.040 --> 01:14.800
nosso tipo de união.

01:14.800 --> 01:19.800
E agora lá dentro, quero dizer que me movendo com velocidade, e agora,

01:19.990 --> 01:21.050
é claro, preciso

01:21.050 --> 01:25.180
acessar ou velocidade de vôo ou velocidade de corrida.

01:25.180 --> 01:27.730
Agora, é claro, poderíamos ter dado apenas um nome à velocidade.

01:27.730 --> 01:30.840
Mas este é apenas um exemplo simplificado de um caso de

01:30.840 --> 01:33.900
uso real que você pode enfrentar, onde você tem algumas

01:33.900 --> 01:37.390
interfaces ou objetos em geral, que são meio relacionados,

01:37.390 --> 01:40.500
mas que têm propriedades ou métodos diferentes.

01:40.500 --> 01:42.050
Portanto, aqui, é a propriedade da

01:42.050 --> 01:43.900
velocidade, que na verdade é diferente.

01:43.900 --> 01:46.780
Portanto, não pode acessar a velocidade de vôo aqui porque, é claro,

01:46.780 --> 01:49.240
nem todos os animais têm uma velocidade de vôo.

01:49.240 --> 01:51.210
Agora podemos fazer o que aprendemos antes.

01:51.210 --> 01:56.063
Podemos verificar se a velocidade de vôo está em animais aqui.

01:58.240 --> 02:01.063
E se este for o caso, podemos executar este código.

02:01.960 --> 02:04.470
Agora esta é uma abordagem que podemos adotar,

02:04.470 --> 02:07.430
mas quanto mais animais potenciais lá chegarmos, mais

02:07.430 --> 02:09.233
coisas teremos que verificar.

02:10.880 --> 02:14.100
Também podemos digitar errado aqui nesta corda.

02:14.100 --> 02:15.810
Podemos esquecer um E, por exemplo,

02:15.810 --> 02:18.460
e nos perguntarmos por que isso não funcionará.

02:18.460 --> 02:20.410
Agora, não podemos usar instância daqui

02:20.410 --> 02:22.570
porque estou rompendo com interfaces.

02:22.570 --> 02:27.490
Como expliquei, a instância animal do pássaro não funcionará porque os

02:27.490 --> 02:29.680
dados são uma interface, que não

02:29.680 --> 02:31.840
é compilada para JavaScript.

02:31.840 --> 02:33.970
Portanto, em tempo de execução, isto não estará

02:33.970 --> 02:36.210
disponível como uma função de construtor.

02:36.210 --> 02:37.690
Portanto, isto não funciona.

02:37.690 --> 02:40.380
Agora podemos construir aqui uma união discriminada,

02:40.380 --> 02:42.460
dando cada interface.

02:42.460 --> 02:45.380
Portanto, todo objeto que deveria fazer parte

02:45.380 --> 02:47.130
da União, e bens extras.

02:47.130 --> 02:48.640
Você pode usar qualquer nome que quiser.

02:48.640 --> 02:51.490
Muitas vezes você usa o tipo, ou digite aqui.

02:51.490 --> 02:55.090
Vou procurar o tipo, e nomear este pássaro.

02:55.090 --> 02:57.480
Agora importante, estamos negociando uma interface aqui.

02:57.480 --> 03:02.480
Portanto, este não é, na verdade, um valor para o tipo de propriedade.

03:02.650 --> 03:05.410
Em vez disso, este é um tipo literal como você aprendeu,

03:05.410 --> 03:09.110
onde o tipo deve segurar um cordel, que deve ser um pássaro.

03:09.110 --> 03:10.880
Portanto, esta é uma atribuição

03:10.880 --> 03:15.000
de tipo, onde restringimos o valor que pode ser armazenado no tipo

03:15.000 --> 03:17.590
exatamente a este valor de cadeia.

03:17.590 --> 03:19.810
E depois faça o mesmo com o cavalo, apenas

03:19.810 --> 03:22.283
com o cavalo como um tipo literal.

03:23.400 --> 03:25.060
Agora aqui, em nossa

03:25.060 --> 03:27.550
função, podemos usar uma declaração

03:27.550 --> 03:29.840
de interruptor e ligar o tipo

03:29.840 --> 03:32.280
de ponto animal.

03:32.280 --> 03:34.080
Cada animal tem um tipo de propriedade

03:34.080 --> 03:36.330
porque o acrescentamos a todas as interfaces

03:36.330 --> 03:38.350
que compõem nosso animal.

03:38.350 --> 03:40.730
E então aqui podemos ter um par de casos em

03:40.730 --> 03:42.330
que conseguimos até mesmo

03:42.330 --> 03:44.990
a conclusão automática porque o TypeScript

03:44.990 --> 03:49.040
e nossa IDE entende que o tipo só pode ser de pássaro ou cavalo.

03:49.040 --> 03:51.050
E se for um pássaro, então poderíamos

03:51.050 --> 03:55.003
definir alguma velocidade variável interna, digamos,

03:55.900 --> 03:58.860
velocidade de vôo do ponto animal e, em seguida,

03:59.880 --> 04:02.250
quebrar.

04:02.250 --> 04:05.183
Caso contrário, se o caso for cavalo, definimos

04:06.830 --> 04:11.753
velocidade igual à velocidade do ponto de corrida dos animais.

04:14.150 --> 04:17.490
E lá depois podemos consolar o registro, movendo-se

04:17.490 --> 04:20.843
em velocidade mais velocidade.

04:22.490 --> 04:26.540
Se eu agora chamo, movimentar animal com um animal que eu crio na

04:26.540 --> 04:30.300
mosca aqui, onde eu defino o tipo para pássaro e eu só permito

04:30.300 --> 04:32.810
o uso de pássaro ou cavalo, então eu tenho

04:32.810 --> 04:34.930
que definir minha velocidade de vôo

04:36.140 --> 04:39.210
e, a propósito, o TypeScript até reconhece que um

04:39.210 --> 04:42.050
conceito de velocidade de vôo aqui para tentar

04:42.050 --> 04:44.220
fazer isso e definir isso para 10,

04:44.220 --> 04:48.980
ele reclama que isso não está disponível para o tipo pássaro.

04:48.980 --> 04:51.360
Se eu a defino para a velocidade de vôo,

04:51.360 --> 04:55.120
como funciona, se a salvarmos, ela produz isto corretamente,

04:55.120 --> 04:57.700
e também compila sem erros.

04:57.700 --> 04:59.530
Agora esta é uma união discriminada

04:59.530 --> 05:04.060
porque temos uma propriedade comum em cada objeto que compõe nossa

05:04.060 --> 05:08.040
união, que descreve esse objeto, para que possamos usar essa

05:08.040 --> 05:11.490
propriedade que descreve esse objeto em nosso cheque

05:11.490 --> 05:16.490
para ter 100% de segurança e entender quais propriedades estão disponíveis

05:16.770 --> 05:21.930
para tal objeto e quais propriedades não estão.

05:21.930 --> 05:24.500
Portanto, este é um novo padrão útil que você

05:24.500 --> 05:28.060
pode usar ao trabalhar com objetos e com tipos de sindicatos.

05:28.060 --> 05:30.340
E até funciona com interfaces porque

05:30.340 --> 05:33.630
esta interface força cada objeto que você constrói

05:33.630 --> 05:37.050
com base nesta interface, a ter este tipo.

05:37.050 --> 05:39.400
Assim, em vez de verificar a existência

05:39.400 --> 05:41.200
de um determinado bem, ou em vez

05:41.200 --> 05:43.660
de usar uma instância de, usamos um bem que

05:43.660 --> 05:46.310
sabemos que existe para verificar com que tipo

05:46.310 --> 05:49.020
de objetos estamos trabalhando.

05:49.020 --> 05:51.930
Também eliminamos o perigo de erros de digitação porque

05:51.930 --> 05:54.730
o TypeScript entende que os únicos casos que podemos

05:54.730 --> 05:58.480
ter aqui, para tipo animal, são de pássaros e cavalos e por isso nos dá esta

05:58.480 --> 06:00.810
arte de completar e se você introduzisse um

06:00.810 --> 06:02.770
erro de digitação, nós receberíamos

06:02.770 --> 06:04.690
imediatamente um erro.

06:04.690 --> 06:06.780
Portanto, este é um padrão muito útil quando

06:06.780 --> 06:09.333
se trabalha com objetos e tipos de sindicatos.
