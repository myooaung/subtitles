WEBVTT

00:02.280 --> 00:04.510
Eğitmen: Az önce erişim değiştiricileri hakkında öğrendiklerinizle

00:04.510 --> 00:06.483
bağlantılı bir başka değiştirici daha var.

00:07.572 --> 00:09.590
Bu da readonly değiştiricisi.

00:09.590 --> 00:11.310
Diyelim ki sadece private veya

00:11.310 --> 00:14.220
public olması gerekmeyen, aynı zamanda başlatıldıktan

00:14.220 --> 00:18.130
sonra değişmemesi gereken belirli alanlarımız var.

00:18.130 --> 00:21.410
Örneğin, kimlik bundan sonra değişmemelidir.

00:21.410 --> 00:23.520
Değişmemesi gerektiğini açıkça belirtmek

00:23.520 --> 00:25.670
için buraya readonly de ekleyebilirsiniz.

00:25.670 --> 00:27.890
Bunu da buraya ekleyebilirdiniz.

00:27.890 --> 00:30.920
Yani burada da private readonly yazmanız gerekirdi.

00:30.920 --> 00:33.990
Şimdi readonly anahtar sözcüğü, tıpkı private ve public gibi,

00:33.990 --> 00:35.710
TypeScript tarafından tanıtılmıştır,

00:35.710 --> 00:37.920
JavaScript'te mevcut değildir.

00:37.920 --> 00:39.910
Bundan sonra özelliğine yazmaya

00:39.910 --> 00:43.180
çalışırsanız başarısız olmanızı sağlar.

00:43.180 --> 00:45.690
Dolayısıyla, bunu yalnızca başlatma sırasında

00:45.690 --> 00:48.620
bir kez kullanabilirsiniz, ancak daha sonra, diyelim

00:48.620 --> 00:52.430
ki addEmployee için, herhangi bir nedenle id'yi d2 olarak değiştirmeye

00:52.430 --> 00:54.200
çalışıyorum, burada bir hata alıyoruz,

00:54.200 --> 00:57.790
id'ye atama yapamıyorum çünkü readonly.

00:57.790 --> 01:00.800
Böylece, belirli bir özelliğin yalnızca bir kez başlatılması

01:00.800 --> 01:04.160
ve daha sonra değiştirilmemesi gerektiğini gerçekten netleştirmek

01:04.160 --> 01:05.920
için ekstra güvenlik ekler; bu, nesnelerinizdeki

01:05.920 --> 01:10.240
belirli özellikler için oldukça sık karşılaştığınız bir gereksinimdir.

01:10.240 --> 01:12.630
Dolayısıyla bu, yine ekstra tip güvenliği sağlayabilir

01:12.630 --> 01:14.910
ve niyetinizi çok net bir şekilde ortaya koyabilir.

01:14.910 --> 01:16.320
Elbette her zaman, "Kodu

01:16.320 --> 01:18.350
yazan benim, istemediğim hiçbir şeyi

01:18.350 --> 01:20.470
yapmayacağım" diyebilirsiniz.

01:20.470 --> 01:23.060
Yine de kodunuzu tanımlarken çok net olmanız

01:23.060 --> 01:24.630
iyi olacaktır.

01:24.630 --> 01:28.320
Çünkü a, kodunuz üzerinde çalışmaya birkaç hafta ara verirseniz

01:28.320 --> 01:31.280
ne yapmak istediğinizi unutabilirsiniz ve b, bir

01:31.280 --> 01:32.270
ekipte çalışıyor

01:32.270 --> 01:34.340
veya kodunuzu başkalarıyla paylaşıyor

01:34.340 --> 01:36.550
olabilirsiniz.

01:36.550 --> 01:39.390
Ve genellikle niyetinizi çok net bir şekilde ortaya

01:39.390 --> 01:42.460
koyan açık ve net kod yazmak iyi bir fikirdir.

01:42.460 --> 01:44.280
Ve readonly bu konuda size yardımcı olabilir,

01:44.280 --> 01:47.230
çünkü hedefinizin ne olduğunu çok net bir şekilde ortaya koyar.

01:47.230 --> 01:49.570
Uygulamaya bir göz atacak olursak. js, bahsettiğim gibi,

01:49.570 --> 01:53.050
ne private ne public ne de read only görüyoruz, çünkü bunların

01:53.050 --> 01:55.780
hepsi sadece TypeScript'te var, JavaScript'te

01:55.780 --> 01:57.610
değil.

01:57.610 --> 02:01.420
Ayrıca ilginç olan farklı bir şey daha görüyoruz,

02:01.420 --> 02:04.580
metotlar kurucu fonksiyonumuzun prototipine

02:04.580 --> 02:06.490
ekleniyor.

02:06.490 --> 02:08.830
Şimdi bunun için prototiplerin ne olduğunu bilmeniz

02:08.830 --> 02:10.730
gerekiyor ve bunları bu kursta tanıtmak

02:10.730 --> 02:12.520
biraz fazla olacaktır.

02:12.520 --> 02:14.140
Prototiplere dalabileceğiniz bazı

02:14.140 --> 02:16.070
kaynakları ekte bulabilirsiniz.

02:16.070 --> 02:18.490
Bu, JavaScript'in, özellikle de sınıflar

02:18.490 --> 02:22.210
olmadan önceki JavaScript'in önemli bir parçasıdır ve bir JavaScript

02:22.210 --> 02:24.670
geliştiricisiyseniz prototipleri anlamaktan

02:24.670 --> 02:26.490
zarar gelmez.

02:26.490 --> 02:29.030
Yine de burada daha derinlere inmeyeceğim

02:29.030 --> 02:31.160
çünkü bu saf bir JavaScript konusu,

02:31.160 --> 02:33.020
TypeScript'e özgü değil.

02:33.020 --> 02:34.150
Aslında TypeScript'te

02:34.150 --> 02:36.510
prototiplerle genellikle daha az çalışırız, çünkü

02:36.510 --> 02:38.780
sınıflarla daha fazlasını yapabiliriz.

02:38.780 --> 02:42.560
Bununla bağlantılı olarak, bir başka önemli sınıf kavramımız daha

02:42.560 --> 02:43.503
var: Kalıtım.
