WEBVTT

00:02.230 --> 00:03.280
Eğitmen: Jeneriklerle

00:03.280 --> 00:04.930
ilgili temel bilgileri öğrendik umarım,

00:04.930 --> 00:07.150
şimdi kısıtlamalara veya ekleyebileceğiniz belirli

00:07.150 --> 00:09.250
bir kısıtlama türüne biraz daha derinlemesine

00:09.250 --> 00:10.400
dalalım.

00:10.400 --> 00:12.680
Bunun için extractAndConvert adını vereceğim

00:12.680 --> 00:16.293
başka bir fonksiyonu, genel bir fonksiyonu takas edeceğim.

00:18.700 --> 00:21.550
Buradaki fonksiyonun ana fikri, ilk argüman

00:21.550 --> 00:24.120
olarak bir nesne almamız ve ikinci

00:24.120 --> 00:26.340
parametrenin de sonuçta bir anahtar

00:26.340 --> 00:28.413
olmasıdır.

00:30.050 --> 00:32.570
Şimdi nesnede bu anahtarın değerini döndürmek istiyorum,

00:32.570 --> 00:35.310
bunu da bu varsayılan JavaScript gösterimiyle yapabiliriz.

00:35.310 --> 00:36.310
Köşeli parantezleri

00:36.310 --> 00:38.200
bir nesnede özellik olarak kullanmak, ancak

00:38.200 --> 00:39.840
bu TypeScript'e özgü bir şey değildir,

00:39.840 --> 00:42.010
bu yine Vanilla JavaScript'tir.

00:42.010 --> 00:43.000
Bu nedenle, burada bir

00:43.000 --> 00:44.580
nesneye sahip olmak istediğimizi

00:44.580 --> 00:48.460
ve anahtar için bir dizeye sahip olmak istediğimizi söyleyebiliriz, diyelim.

00:48.460 --> 00:50.160
Şimdi burada bir hata alıyorum,

00:50.160 --> 00:52.000
çünkü burada sonuçta bilmediğimiz

00:52.000 --> 00:54.500
şey, burada elde ettiğimiz nesnenin gerçekten

00:54.500 --> 00:57.510
bu anahtara sahip olup olmayacağıdır.

00:57.510 --> 00:59.410
TypeScript'in bu garip hatayla

00:59.410 --> 01:01.430
bize söylediği şey budur.

01:01.430 --> 01:02.530
Örneğin burada,

01:02.530 --> 01:05.700
bunu diyelim ki boş bir nesne ve ardından ad ile

01:05.700 --> 01:09.770
çağırmanın sonucunu konsol günlüğüne kaydedebilirim.

01:09.770 --> 01:12.600
Bu arada buna extractAndConvert adını veriyorum,

01:12.600 --> 01:16.025
çünkü bunu konsol günlüğü olmadan çağırmak ve sadece Value,

01:16.025 --> 01:18.600
colon, plus demek istiyorum.

01:18.600 --> 01:19.660
Ancak bu sadece bir yan not,

01:19.660 --> 01:22.450
bu alınan verilerle sonunda bizi başıboş bırakıyorum.

01:22.450 --> 01:23.840
Ancak buradaki asıl sorun, bu şekilde

01:23.840 --> 01:25.160
çağırabilirim ve ilk parametre

01:26.091 --> 01:28.020
olarak bir nesne ve ardından ikinci parametre

01:28.020 --> 01:29.890
olarak bir dize iletir.

01:29.890 --> 01:31.430
Ancak doğru bir şekilde, TypeScript

01:31.430 --> 01:33.200
bana sonuçta bu anahtarın bu nesnede var olduğunun

01:33.200 --> 01:35.193
garanti edilmediğini söylüyor.

01:36.420 --> 01:39.920
Şimdi bunu garanti altına almak için burada yine jenerik tipler kullanabiliriz.

01:39.920 --> 01:41.620
Bir T tipimiz olduğunu söyleyebiliriz ve bu

01:41.620 --> 01:43.130
bizim buradaki nesnemiz olacaktır.

01:43.130 --> 01:46.550
Nesneyi genişletir diyebiliriz.

01:46.550 --> 01:48.363
Ama U yazmamız da gerekiyor.

01:49.440 --> 01:52.850
Buradaki anahtarımız, diyelim ki, sonuçta T-tipimizin

01:52.850 --> 01:56.320
bir anahtarı olmak zorundadır.

01:56.320 --> 01:58.210
Yani bu nesnenin, anahtar olarak ikinci

01:58.210 --> 02:01.560
bir parametre olarak burada elde ettiğimiz şeyin bu ilk türün

02:01.560 --> 02:04.890
bir özelliği olduğunu garanti etmek istiyoruz.

02:04.890 --> 02:09.130
Ve bunun için T'nin uzayan anahtarı diyebiliriz.

02:11.550 --> 02:13.540
Şimdi burada hatanın ortadan kalktığını

02:13.540 --> 02:15.370
görüyorsunuz ve bunun yerine aşağıdaki

02:15.370 --> 02:17.930
hatayı alıyorum çünkü şimdi burada TypeScript'e ilk

02:17.930 --> 02:21.800
parametrenin herhangi bir tür nesne olması gerektiğini ve ikinci parametrenin

02:21.800 --> 02:23.610
de bu nesnedeki herhangi bir tür anahtar

02:23.610 --> 02:25.870
olması gerektiğini bildiriyorum.

02:25.870 --> 02:28.480
Ve burada, evet her türlü nesneyi geçiriyoruz, ancak

02:28.480 --> 02:30.430
burada bir isim anahtarımız yok.

02:30.430 --> 02:34.990
Bu hata yalnızca bir ad anahtarı eklediğimde ortadan kalkacak.

02:34.990 --> 02:37.990
Dolayısıyla, TypeScript'e bu doğru yapıya sahip olduğumuzdan

02:37.990 --> 02:41.800
emin olmak istediğimizi söylemek için buradaki keyoff anahtar sözcüğü

02:41.800 --> 02:45.730
ile genel türleri kullanabileceğimiz tüm zamanlar budur ve bu elbette

02:45.730 --> 02:47.460
gerçekten yararlıdır, çünkü sonunda

02:47.460 --> 02:49.120
var olmayan bir özellik olarak

02:49.120 --> 02:51.160
exe etmeye çalıştığımız bu işlevi çağırmaya

02:51.160 --> 02:53.390
çalıştığımız aptalca hatalar yapmadığımızdan

02:53.390 --> 02:56.740
emin olmamızı sağlar.

02:56.740 --> 02:58.140
Yani bu işe yarıyor.

02:58.140 --> 02:59.870
Ancak burada 'age' olarak exe yapmaya çalışırsam,

02:59.870 --> 03:01.570
örneğin yine bir hata alıyorum.

03:02.890 --> 03:05.560
O halde bunu tekrar 'isim' olarak değiştirelim.
