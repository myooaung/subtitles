WEBVTT

00:02.200 --> 00:03.970
Instructor: Esto es todo para este módulo.

00:03.970 --> 00:06.080
Obviamente, el JavaScript moderno también tiene un par

00:06.080 --> 00:07.790
de otras características interesantes.

00:07.790 --> 00:09.810
Por ejemplo, voy a cubrir las clases en

00:09.810 --> 00:11.120
el módulo de clase y en general

00:11.120 --> 00:13.470
esto no es un curso de JavaScript.

00:13.470 --> 00:16.540
No quiero aburrirte con toneladas de conocimientos de

00:16.540 --> 00:19.030
JavaScript que no se relacionan realmente

00:19.030 --> 00:20.140
con TypeScript.

00:20.140 --> 00:22.700
Quería mencionar estas características específicas porque

00:22.700 --> 00:24.650
es bueno saber que TypeScript nos ayuda a utilizar

00:24.650 --> 00:28.210
estas características de una manera que todavía se ejecuta en los navegadores

00:28.210 --> 00:29.580
más antiguos.

00:29.580 --> 00:32.920
Porque eso es algo que nunca debes olvidar.

00:32.920 --> 00:35.600
Su código se compila.

00:35.600 --> 00:38.690
Actualmente, tengo el objetivo establecido en ES6 y por

00:38.690 --> 00:41.540
lo tanto si comprobamos la carpeta dist vemos las constantes

00:41.540 --> 00:44.280
en están disponibles en el archivo JS de la aplicación

00:44.280 --> 00:46.030
también.

00:46.030 --> 00:48.070
Objeto de estructuración, hay una manera

00:48.070 --> 00:50.600
de gustar esto allí porque todas estas características

00:50.600 --> 00:52.480
son compatibles en ES6.

00:52.480 --> 00:55.230
Si estableciera el objetivo a ES5 y comentara las

00:55.230 --> 00:56.590
librerías ahora, para que

00:56.590 --> 00:58.680
se importen las librerías correctas

00:58.680 --> 01:00.930
para el objetivo ES5, lo que ocurrirá por

01:00.930 --> 01:03.680
defecto, verás que el código generado ahora se ve

01:03.680 --> 01:05.290
bastante diferente.

01:05.290 --> 01:08.140
Es mucho más largo porque ahora estamos usando var

01:08.140 --> 01:09.810
y TypeScript tuvo que encontrar

01:09.810 --> 01:12.960
soluciones para ciertas sintaxis que no son compatibles

01:12.960 --> 01:14.730
con ES5 JavaScript.

01:14.730 --> 01:18.240
Por ejemplo, se ha eliminado la sintaxis de estructuración.

01:18.240 --> 01:21.140
Así que eso es algo importante que siempre hay que tener en cuenta.

01:21.140 --> 01:23.490
TypeScript compila tu código, no

01:23.490 --> 01:26.440
sólo de las características de TypeScript

01:26.440 --> 01:29.210
a JavaScript normal, sino todas ellas

01:29.210 --> 01:33.000
de JavaScript moderno a JavaScript antiguo si le dices

01:33.000 --> 01:35.433
a TypeScript que lo haga.
