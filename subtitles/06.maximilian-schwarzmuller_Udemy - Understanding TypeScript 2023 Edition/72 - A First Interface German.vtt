WEBVTT

00:02.802 --> 00:04.030
Kursleiter: Nachdem wir nun die Klassen behandelt

00:04.030 --> 00:05.910
haben, wollen wir uns nun die Schnittstellen ansehen.

00:05.910 --> 00:09.510
Wir werden die app ts-Datei in classes umbenennen und eine neue

00:09.510 --> 00:11.230
app ts-Datei hinzufügen, die

00:11.230 --> 00:13.730
anschließend zu app js kompiliert wird.

00:13.730 --> 00:15.130
Und in dieser app ts-Datei werden

00:15.130 --> 00:17.026
wir nun in die Schnittstellen eintauchen.

00:17.026 --> 00:19.850
Was ist eine Schnittstelle?

00:19.850 --> 00:21.640
Nun, in ihrer einfachsten Version

00:21.640 --> 00:25.470
beschreibt eine Schnittstelle die Struktur eines Objekts.

00:25.470 --> 00:28.502
Wir können sie verwenden, um zu beschreiben, wie ein Objekt aussehen soll.

00:28.502 --> 00:29.856
Ich möchte Ihnen ein Beispiel geben.

00:29.856 --> 00:32.990
Wir erstellen eine Schnittstelle mit dem Schlüsselwort

00:32.990 --> 00:37.510
interface, das es nur in Typescript, nicht aber in Vanilla JavaScript gibt.

00:37.510 --> 00:39.600
Nennen wir sie nun Person.

00:39.600 --> 00:41.140
Auch hier beginne ich, wie im

00:41.140 --> 00:43.150
Unterricht, mit einem Großbuchstaben,

00:43.150 --> 00:46.820
kein Muss, sondern eine Empfehlung und eine Konvention.

00:46.820 --> 00:47.910
Darin können wir nun

00:47.910 --> 00:51.160
festlegen, wie ein Personenobjekt aussehen soll.

00:51.160 --> 00:52.480
Im Gegensatz zu einer Klasse werden

00:52.480 --> 00:54.930
wir dies jedoch nicht als Blaupause verwenden.

00:54.930 --> 00:57.543
Als benutzerdefinierter Typ könnten wir sagen.

00:58.490 --> 01:00.690
Hier könnte man sagen, dass eine Person einen Namen,

01:00.690 --> 01:01.860
der vom Typ String ist, und

01:01.860 --> 01:04.300
ein Alter, das vom Typ Zahl ist, haben könnte.

01:04.300 --> 01:05.140
Wie Sie hier sehen

01:05.140 --> 01:08.020
können, füge ich Eigenschaften oder Felddefinitionen hinzu,

01:08.020 --> 01:09.970
in denen ich die Namen der Eigenschaften und

01:09.970 --> 01:13.440
die Typen der Werte, die dort gespeichert werden sollen, festlege.

01:13.440 --> 01:16.560
Was wir hier nicht haben, sind die konkreten Werte.

01:16.560 --> 01:17.730
Das haben wir also nicht.

01:17.730 --> 01:20.510
Und wenn wir versuchen würden, hier einen Standardwert zuzuweisen,

01:20.510 --> 01:21.810
würden wir einen Fehler erhalten,

01:21.810 --> 01:25.290
dass eine Schnittstelle keinen Initialisierer haben kann.

01:25.290 --> 01:27.540
Wir können also nur die Struktur definieren,

01:27.540 --> 01:29.610
nicht aber die konkreten Werte.

01:29.610 --> 01:32.930
Wir können hier auch eine Methode hinzufügen, z. B. Gruß.

01:32.930 --> 01:34.470
Genau wie bei den Eigenschaften

01:34.470 --> 01:37.440
fügen wir hier jedoch nicht die eigentliche Methode hinzu,

01:37.440 --> 01:39.610
sondern nur die Struktur, sozusagen die

01:39.610 --> 01:41.020
Beschreibung.

01:41.020 --> 01:42.670
Wie es aussehen sollte.

01:42.670 --> 01:46.600
Und um eine Methode zu definieren, die ein Personenobjekt haben soll,

01:46.600 --> 01:49.470
fügen wir den Namen der Methode hinzu, dann Klammern,

01:49.470 --> 01:50.920
dann den Rückgabetyp.

01:50.920 --> 01:52.210
Zum Beispiel weiß, und in Klammern

01:52.210 --> 01:53.260
können Sie alle Argumente

01:53.260 --> 01:55.310
angeben, die Sie haben möchten.

01:55.310 --> 01:57.740
Wie eine Phrase, die ein Typ sein sollte.

01:57.740 --> 02:01.920
Auch hier nur der Name des Arguments und dann der Typ.

02:01.920 --> 02:03.610
Dann der Rückgabetyp der Methode.

02:03.610 --> 02:06.450
Natürlich müssen Sie keine Parameter hinzufügen.

02:06.450 --> 02:09.080
Was können wir nun mit dieser Personenschnittstelle tun?

02:09.080 --> 02:11.360
Was ist die Idee dahinter?

02:11.360 --> 02:12.610
Damit können wir jetzt

02:12.610 --> 02:14.810
zum Beispiel ein Objekt prüfen.

02:14.810 --> 02:18.020
Wir könnten eine Variable haben, Benutzer eins, und

02:18.020 --> 02:19.130
sagen wir mal, aus irgendeinem

02:19.130 --> 02:22.620
Grund initialisieren wir sie nicht sofort.

02:22.620 --> 02:25.660
Wir wollen dort schließlich ein Objekt

02:25.660 --> 02:28.490
speichern, das diese Struktur hat.

02:28.490 --> 02:30.710
Dann können wir dem Benutzer eins einen Typ zuweisen,

02:30.710 --> 02:31.830
z. B. Person.

02:31.830 --> 02:34.604
Wir können unsere Schnittstelle als Typ verwenden.

02:34.604 --> 02:38.410
Wenn ich nun dem Benutzer eins einen Wert zuweise, muss es sich um ein Objekt

02:38.410 --> 02:39.730
handeln, da Schnittstellen

02:39.730 --> 02:42.780
zur Definition von Objekten verwendet werden.

02:42.780 --> 02:45.560
Und es muss ein Objekt sein mit einer Eigenschaft

02:45.560 --> 02:47.190
name, die eine Zeichenkette

02:47.190 --> 02:49.850
enthalten muss, einer Eigenschaft age, die eine

02:49.850 --> 02:53.102
Zahl enthalten muss, und einer Methode greet, die ein Argument

02:53.102 --> 02:56.920
phrase annehmen und dann auch nichts zurückgeben muss.

02:56.920 --> 02:57.830
Hier in diesem Objekt

02:57.830 --> 02:59.360
können wir einen Namen hinzufügen.

02:59.360 --> 03:00.730
Max, zum Beispiel.

03:00.730 --> 03:03.010
Hier fügen wir nun den konkreten Wert hinzu,

03:03.010 --> 03:06.310
und dieser muss von dem dort definierten Typ sein.

03:06.310 --> 03:08.160
Jetzt durch ein Komma getrennt, und das

03:08.160 --> 03:11.110
ist ein Unterschied zu unserer Schnittstellendefinition.

03:11.110 --> 03:16.110
Dort trennen wir unsere Schlüssel und Eigenschaften mit Semikolons.

03:16.470 --> 03:18.430
Aber dort unten, wenn wir unser Objekt erstellen,

03:18.430 --> 03:21.390
verwenden wir genau wie in Vanilla JavaScript ein Komma.

03:21.390 --> 03:25.570
Dann ein Alter, und natürlich auch die Begrüßungsmethode.

03:25.570 --> 03:27.550
Die greet-Methode muss, wie Sie gelernt

03:27.550 --> 03:32.020
haben, eine Methode sein, die einen Parameter, phrase, annimmt, der eine Zeichenkette

03:32.020 --> 03:33.790
sein muss, und bei der ich dann phrase

03:33.790 --> 03:36.134
plus ein paar Leerzeichen plus dies in die

03:36.134 --> 03:41.134
Konsole loggen möchte. Name.

03:41.210 --> 03:43.930
Dies könnte eine Implementierung der Methode "greet" sein.

03:43.930 --> 03:45.670
Was da drin ist, spielt keine Rolle mehr.

03:45.670 --> 03:48.210
Es ist nur wichtig, dass wir diesen einen Parameter

03:48.210 --> 03:49.270
haben, der ein String

03:49.270 --> 03:51.290
ist, und dass wir nichts zurückgeben.

03:51.290 --> 03:54.090
Dies wäre nun ein gültiges User-One-Objekt,

03:54.090 --> 03:58.150
da es die Definition unserer Schnittstelle erfüllt.

03:58.150 --> 03:59.040
Deshalb können

03:59.040 --> 04:00.940
wir jetzt natürlich zum Beispiel

04:00.940 --> 04:04.020
greet anrufen und sagen, hallo, ich bin, und danach

04:04.020 --> 04:06.220
sollten wir Name drucken.

04:06.220 --> 04:08.300
Wenn ich das jetzt speichere und dann neu

04:08.300 --> 04:10.330
lade, sehen wir, hallo, ich bin Max.

04:10.330 --> 04:12.840
Und das kommt von unserer Begrüßungsmethode.

04:12.840 --> 04:14.090
Dies ist eine Schnittstelle.

04:14.090 --> 04:18.280
Sie ermöglicht es uns, die Struktur eines Objekts zu definieren.

04:18.280 --> 04:21.140
Wir können ihn als Typ für die Typprüfung von Objekten

04:21.140 --> 04:24.453
verwenden, die diese Struktur haben müssen.
