WEBVTT

00:02.150 --> 00:04.320
Anlatıcı: TypeScript ile bir React

00:04.320 --> 00:07.220
Uygulaması oluşturmak söz konusu olduğunda,

00:07.220 --> 00:10.800
elbette hem React kodumuzu, yani örneğin JSX gibi şeyleri

00:10.800 --> 00:13.730
işleyebilen ve React kodumuzu derleyen ve

00:13.730 --> 00:17.480
optimize eden hem de aynı zamanda TypeScript'i anlayabilen

00:17.480 --> 00:21.500
ve TypeScript'i JavaScript'e derleyebilen bir proje kurulumuna

00:21.500 --> 00:25.320
ihtiyacımız var.

00:25.320 --> 00:27.430
Böyle bir projeyi kendi başımıza oluşturmak

00:27.430 --> 00:28.750
oldukça zor olabilir ve bu

00:28.750 --> 00:31.940
nedenle, React ekibi tarafından yönetilen ve React projeleri

00:31.940 --> 00:34.080
oluşturmak için kullanabileceğimiz bir

00:34.080 --> 00:36.420
araç olan Create React App'in kutudan çıkar çıkmaz

00:36.420 --> 00:39.110
TypeScript'i desteklemesi iyi bir şey.

00:39.110 --> 00:42.110
Google'da Create React App TypeScript için arama yapabilir

00:42.110 --> 00:44.590
ve bu girişi resmi Create React App dokümantasyonunda

00:44.590 --> 00:47.000
bulabilirsiniz.

00:47.000 --> 00:49.140
Burada, mevcut bir projeye TypeScript'i

00:49.140 --> 00:51.540
nasıl ekleyebileceğinizi, bu adımları

00:51.540 --> 00:54.850
veya Create React App and TypeScript ile nasıl yeni bir proje

00:54.850 --> 00:57.290
oluşturabileceğinizi öğreneceksiniz ve

00:57.290 --> 01:00.400
burada TypeScript'i de destekleyen yeni bir React projesi

01:00.400 --> 01:03.030
oluşturmak için kopyalayabileceğiniz bir

01:03.030 --> 01:05.680
komut görüyorsunuz.

01:05.680 --> 01:07.020
Şimdi, bunu burada kullanacağım

01:07.020 --> 01:11.110
ve burada zaten kullanmak istediğim bir klasördeyim.

01:11.110 --> 01:13.210
Bu sadece bu proje için kullanmak istediğim

01:13.210 --> 01:14.790
proje klasörüdür.

01:14.790 --> 01:16.900
Ve sonra bu komutu yapıştıracağız.

01:16.900 --> 01:17.740
Ve bu durumda, zaten

01:17.740 --> 01:20.970
içinde bulunduğum klasörü kullanmak istediğim için, burada

01:20.970 --> 01:22.710
da terminalimde, proje adını bir

01:22.710 --> 01:25.190
nokta ile değiştireceğim, böylece yeni bir

01:25.190 --> 01:27.590
alt klasör oluşturup projeyi bunun içinde

01:27.590 --> 01:29.550
oluşturmayacak, bunun yerine bu klasörü

01:29.550 --> 01:31.730
kullanacak.

01:31.730 --> 01:33.720
Bu elbette isteğe bağlıdır.

01:33.720 --> 01:35.850
Ayrıca bu komutun her zaman çalışmadığını

01:35.850 --> 01:38.070
fark ettiğimi de söylemek isterim.

01:38.070 --> 01:41.390
Bazen normal bir JavaScript projesi oluşturur.

01:41.390 --> 01:42.590
Bunu düzeltmek için Create

01:42.590 --> 01:46.343
React App'i makinenize global olarak yükleyebilirsiniz.

01:47.340 --> 01:49.140
npm install -g create-react-app

01:49.140 --> 01:54.140
komutunu çalıştırarak basitçe yapabileceğiniz bir şey, Mac ve Linux'ta bunun önüne bir

01:54.780 --> 01:56.560
sudo eklemeniz gerekebilir.

01:56.560 --> 01:59.360
Ve bu makinenize yüklendiğinde, aslında bu komutu

01:59.360 --> 02:03.010
burada çalıştırabilirsiniz, ancak npx olmadan, tıpkı bunun

02:03.010 --> 02:05.920
gibi ve sonra kesinlikle çalışmalıdır.

02:05.920 --> 02:07.270
Burada yapacağım şey bu,

02:07.270 --> 02:09.320
ancak normalde, Node ile birlikte zaten

02:09.320 --> 02:12.250
yüklediğimiz npm aracının bir parçası olan npx aracını

02:12.250 --> 02:18.840
kullanarak yüklemeden de çalışmalıdır.

02:18.840 --> 02:18.840
kursun başlarında js.

02:18.840 --> 02:23.250
Şimdilik buradaki klasörün içine yeni bir proje yerleştiriyor.

02:23.250 --> 02:27.460
Ve bu projede, tüm kodlarımızı TypeScript ile yazabileceğimiz

02:27.460 --> 02:31.070
bir React uygulaması kuracak.

02:31.070 --> 02:32.460
O yüzden bunun bitmesini bekleyelim.

02:32.460 --> 02:34.610
Bakalım bu bize ne verecek.

02:34.610 --> 02:36.010
Ve bitti.

02:36.010 --> 02:37.930
Şimdi elimizdekilere bir göz atalım.

02:37.930 --> 02:41.000
TypeScript olmadan bir React Uygulaması oluşturduğunuzda sahip

02:41.000 --> 02:43.970
olduğunuz yapıyla temelde aynı olduğunu fark edebileceğiniz

02:43.970 --> 02:45.500
bir klasörümüz var.

02:45.500 --> 02:48.790
Ancak tsconfig'i zaten görebiliyoruz. json dosyası.

02:48.790 --> 02:51.020
Bu arada, bu dosyayı düzenleyebilir ve ihtiyaçlarınıza

02:51.020 --> 02:52.940
göre ince ayar yapabilirsiniz.

02:52.940 --> 02:55.250
Sonuçta bu yapılandırmayı nasıl değiştireceğinizi

02:55.250 --> 02:57.120
kursun başlarında öğrendiniz.

02:57.120 --> 02:58.460
Yine de varsayılan yapılandırma

02:58.460 --> 03:01.160
çoğu kullanım durumu için iyi olmalıdır.

03:01.160 --> 03:02.950
Şimdi kaynak kodumuzu yazacağımız

03:02.950 --> 03:05.230
src klasörünü keşfedersek, bir

03:05.230 --> 03:08.550
grup . tsx dosyaları var.

03:08.550 --> 03:11.900
Kursta şimdiye kadar, ... ile çalışmadık. tsx dosyaları, ancak

03:11.900 --> 03:13.787
yalnızca . ts dosyaları. tsx burada basitçe

03:13.787 --> 03:17.800
seçilmiştir, çünkü bunlar sadece TypeScript kodu yazamayacağınız

03:17.800 --> 03:22.000
dosyalardır, ancak tüm JSX kodu, JavaScript'inizin içine HTML

03:22.000 --> 03:25.570
işaretlemesi yazdığınız özel React, JavaScript sözdizimidir

03:25.570 --> 03:29.930
veya bu durumda TypeScript kodu.

03:29.930 --> 03:32.880
Burada elde ettiğimiz şey bu.

03:32.880 --> 03:34.920
Şimdi bu dosyalarda, bazı TypeScript

03:34.920 --> 03:36.500
sözdizimlerini zaten görebiliyoruz,

03:36.500 --> 03:38.800
örneğin burada, bir tür atamamız var, bu türe

03:38.800 --> 03:41.480
daha sonra daha yakından bakacağım, ancak şimdilik,

03:41.480 --> 03:43.880
burada açıkça TypeScript kullandığımızı hemen

03:43.880 --> 03:45.780
görebiliriz.

03:45.780 --> 03:49.290
Bununla birlikte, bu başlangıç klasör yapısını biraz temizleyeyim

03:49.290 --> 03:50.680
ve sonra birlikte çok basit

03:50.680 --> 03:52.730
bir React Uygulaması oluşturalım ve bunu

03:52.730 --> 03:56.150
yaparken, TypeScript'i React ile nasıl kullanabileceğimizi

03:56.150 --> 03:57.550
keşfedelim.

03:57.550 --> 04:01.000
Bu yüzden ilk olarak App'teki temizliğe

04:01.000 --> 04:02.950
odaklanalım. tsx, logo içe aktarımını kaldıracağım ve

04:02.950 --> 04:06.860
buradaki div'imdeki tüm içeriği kaldıracağım

04:06.860 --> 04:09.380
ve bu nedenle sadece bu div'i tutacağım.

04:09.380 --> 04:12.020
Uygulamayı da kaldıracağım. css içe aktarma, App'ten

04:12.020 --> 04:15.530
kurtulma. css dosyası ve App. Test. tsx dosyasının yanı

04:15.530 --> 04:19.560
sıra logo. svg ve serviceWorker. ts dosyaları, bunların

04:19.560 --> 04:23.470
hepsini kaldırın.

04:23.470 --> 04:25.500
Dizinde. tsx, bu serviceWorker içe aktarımını kaldıracağım,

04:25.500 --> 04:29.060
çünkü burada serviceWorker'larla

04:29.060 --> 04:32.100
çalışmayacağız, aşağıdaki kodu kaldıracağım ve bu kurulumla

04:32.100 --> 04:34.530
ve dizinde sonlandıracağım. css Tüm bunları temizleyeceğim ve sadece

04:34.530 --> 04:38.870
sans-serif yazı tipi ailesi ayarlamak

04:38.870 --> 04:40.610
istediğim bir HTML stili ve

04:40.610 --> 04:43.140
ardından kenar boşluğundan kurtulmak istediğim

04:43.140 --> 04:48.820
bir gövde stili oluşturacağım, tıpkı bunun gibi, çok basit bir stil.

04:48.820 --> 04:50.763
Ve bununla birlikte, üzerinde çalışmak istediğim

04:52.790 --> 04:54.540
bir başlangıç düzenimiz var.

04:54.540 --> 04:55.840
Şimdi tekrar, bundan bahsettim,

04:55.840 --> 04:57.370
ancak tüm bunlar size bir şey söylemiyorsa,

04:57.370 --> 04:59.710
bu daha önce hiç görmediğiniz bir sözdizimiyse, o zaman

04:59.710 --> 05:02.200
kesinlikle önce bazı React kaynaklarına dalın.

05:02.200 --> 05:05.610
Bu modülde odaklanacağımız şey bu değil, bu modülde

05:05.610 --> 05:08.130
React'i öğrenmeyeceksiniz.

05:08.130 --> 05:11.010
Ancak bununla birlikte, tüm değişikliklerimizi kaydedelim

05:11.010 --> 05:12.920
ve şimdi devam edelim ve biraz React ve

05:12.920 --> 05:15.680
Typhon kodu yazmaya başlayalım ve bu iki şeyin birlikte

05:15.680 --> 05:17.980
nasıl çalıştığını öğrenelim.
