WEBVTT

00:02.390 --> 00:04.530
المعلم: الآن يمكن إرسال الطلبات

00:04.530 --> 00:06.890
بدون حزمة طرف ثالث.

00:06.890 --> 00:10.140
في JavaScript الحديث في المتصفحات الحديثة

00:10.140 --> 00:11.910
، يجب عليك إحضار API.

00:11.910 --> 00:13.620
هذا مضمّن في المتصفحات

00:13.620 --> 00:16.710
، وهي وظيفة متاحة عالميًا ويمكنك استخدامها

00:16.710 --> 00:19.600
لإرسال الطلبات إلى عناوين URL.

00:19.600 --> 00:22.450
الآن لا يوجد شيء يتحدث ضد واجهة برمجة التطبيقات

00:22.450 --> 00:24.870
هذه ، إلى جانب حقيقة أن معالجة الأخطاء يمكن

00:24.870 --> 00:27.210
أن تكون ثقيلة بعض الشيء معها.

00:27.210 --> 00:29.250
لكني أرغب أيضًا في ممارسة استخدام

00:29.250 --> 00:31.123
مكتبات الطرف الثالث.

00:31.960 --> 00:36.070
لذلك ، سوف نستخدم حزمة أكسيوس المشهورة جدًا.

00:36.070 --> 00:38.510
هذه حزمة يمكنك استخدامها في JavaScript

00:38.510 --> 00:43.510
وبالتالي في TypeScript أيضًا لإرسال طلبات HTTP.

00:43.880 --> 00:47.263
لذلك نحتاج فقط إلى تثبيت أكسيوس لبدء استخدامه.

00:48.100 --> 00:51.080
لهذا في مشروعنا حيث يمكننا استخدام NPM

00:51.080 --> 00:54.150
لإدارة التبعيات ، يمكننا تشغيل npm install

00:54.150 --> 00:57.620
و dash و dash حفظ axios تمامًا مثل هذا وسيؤدي ذلك

00:57.620 --> 01:00.520
الآن إلى تثبيت حزمة axios.

01:00.520 --> 01:04.750
بعد تثبيت هذا ، يمكننا الآن استيراد أكسيوس هنا ، واستيراد

01:04.750 --> 01:07.390
محاور من أكسيوس ، وسترى شيئًا مثيرًا

01:07.390 --> 01:09.170
للاهتمام.

01:09.170 --> 01:12.090
إذا بدأت الآن في استخدام هذا وقمت بكتابة نقطة هنا

01:12.090 --> 01:13.990
، فسأحصل على الإكمال التلقائي.

01:13.990 --> 01:16.290
وعلى سبيل المثال ، لديك طريقة get هنا والتي

01:16.290 --> 01:18.523
سترسل طلب الحصول على عنوان URL.

01:19.850 --> 01:23.150
لذا فقد حصلنا هنا بالفعل على دعم TypeScript مدمج.

01:23.150 --> 01:25.640
وإذا ذهبنا إلى وحدات العقدة

01:25.640 --> 01:29.670
وألقينا نظرة على حزمة أكسيوس ، ها هي.

01:29.670 --> 01:33.970
سترى أنه يوجد هناك فهرس. ملف dts.

01:33.970 --> 01:38.970
لذلك قام مؤلفو مكتبة axios بالفعل بتجميع

01:39.430 --> 01:43.750
مكتبتهم مع حزمة ترجمة TypeScript.

01:43.750 --> 01:47.440
هناك ، يتم شرح كل شيء لـ TypeScript.

01:47.440 --> 01:50.120
تشرح هذه الحزمة أو هذا الملف هنا بشكل أساسي

01:50.120 --> 01:53.660
لـ TypeScript ما يمكن لمكتبة JavaScript القيام به والأنواع

01:53.660 --> 01:55.600
التي تستخدمها.

01:55.600 --> 01:59.100
الآن بعض المكتبات تفعل ذلك و axios هو واحد منهم.

01:59.100 --> 02:02.070
يمكنك معرفة ما إذا كانت المكتبة تفعل ذلك أم لا ، إذا

02:02.070 --> 02:03.420
بدأت في استخدامه.

02:03.420 --> 02:05.520
إذا لم تحصل على دعم الإكمال التلقائي

02:05.520 --> 02:07.930
ولديك الكثير من أخطاء الترجمة ، فربما

02:07.930 --> 02:10.750
تحتاج إلى تثبيت أنواع إضافية.

02:10.750 --> 02:12.970
إذا حصلت على دعم جيد كما نفعل هنا

02:12.970 --> 02:16.120
ولن تحصل على أي أخطاء في الترجمة بعد ذلك ، فهذا

02:16.120 --> 02:18.140
يعني أنك قد حصلت بالفعل على مكتبة

02:18.140 --> 02:20.170
بها ترجمات كتابة مضمنة.

02:20.170 --> 02:23.120
وبالتالي ، لا تحتاج إلى تثبيت أي أنواع إضافية.

02:23.120 --> 02:26.240
من الجيد معرفة ولدينا هنا مثال رائع.

02:26.240 --> 02:27.800
لذلك نظرًا لأننا قمنا بتضمين الدعم

02:27.800 --> 02:30.410
، يمكننا البدء في استخدام الوصول على الفور.

02:30.410 --> 02:34.350
وأريد إرسال طلب HTTP إلى عنوان URL هذا الآن.

02:34.350 --> 02:37.980
فلننسخ عنوان URL هذا ودعنا ندخله هنا.

02:37.980 --> 02:40.220
وسأدخلها بين backticks

02:40.220 --> 02:42.440
لإنشاء قالب حرفي ، بحيث

02:42.440 --> 02:45.880
يمكنهم بسهولة تبديل أجزاء من هذه السلسلة

02:45.880 --> 02:49.050
بالديناميكية لقيم أخرى.

02:49.050 --> 02:51.730
لذلك دعونا نلصق هذه السلسلة ، إنها طويلة

02:51.730 --> 02:55.460
جدًا ولنبدأ باستبدال مفتاح API الخاص بك في النهاية بمفتاح

02:55.460 --> 02:59.210
Google API الذي قمنا بتخزينه في هذا الثابت.

02:59.210 --> 03:01.690
لهذا ، نظرًا لأن هذا نموذج حرفي ، يمكننا

03:01.690 --> 03:04.110
إضافة علامة الدولار ، والأقواس المتعرجة

03:04.110 --> 03:09.110
، ثم الإشارة إلى مفتاح Google API لاستخدام هذا الثابت.

03:10.820 --> 03:13.240
بالإضافة إلى ذلك ، دعنا نتبادل هذا العنوان.

03:13.240 --> 03:15.500
هنا حصلنا على عنوان وهمي تم إدخاله

03:15.500 --> 03:17.130
وبالطبع هناك أريد استخدام

03:17.130 --> 03:19.300
العنوان الذي أدخله المستخدم.

03:19.300 --> 03:22.540
الآن فقط ملاحظة مهمة واحدة ، هذا العنوان ، بالطبع

03:22.540 --> 03:24.910
، هو بالضبط النص الذي أدخله المستخدم

03:24.910 --> 03:27.560
ويمكن أن يحتوي على أحرف خاصة ومسافات

03:27.560 --> 03:30.650
بيضاء وفواصل وغير ذلك الكثير.

03:30.650 --> 03:32.250
ولا يتم دعم كل هذه

03:32.250 --> 03:35.580
الأحرف والرموز في عناوين URL.

03:35.580 --> 03:37.750
لذلك نحن بحاجة إلى تحويل هذه السلسلة

03:37.750 --> 03:40.550
المدخلة إلى سلسلة متوافقة مع URL.

03:40.550 --> 03:43.810
ولحسن الحظ ، فإن TypeScript و JavaScript

03:43.810 --> 03:46.940
يحتويان على وظيفة مضمنة تساعدنا

03:46.940 --> 03:50.460
في ذلك ، وهي وظيفة تشفير URI.

03:50.460 --> 03:53.020
يمكننا استدعاء ذلك وتمرير سلسلة إليه

03:53.020 --> 03:54.770
وسيؤدي ذلك إلى تحويل هذه

03:54.770 --> 03:57.460
السلسلة إلى سلسلة متوافقة مع URL.

03:57.460 --> 03:59.845
وبذلك حصلنا على عنوان URL النهائي

03:59.845 --> 04:01.600
الذي يمكننا إرسال الطلب

04:01.600 --> 04:04.900
إليه لاستعادة إحداثياتنا.

04:04.900 --> 04:07.390
الآن الحصول على يعطينا وعدًا بالطبع

04:07.390 --> 04:10.620
، إرسال مثل هذا الطلب كمهمة غير متزامنة.

04:10.620 --> 04:13.430
وهناك لدينا سجل ثم إذا نجح ذلك

04:13.430 --> 04:15.690
أو اكتشفنا إذا كان لدينا

04:15.690 --> 04:18.620
خطأ فني أو رمز استجابة خطأ.

04:18.620 --> 04:21.560
لذلك سنقوم هنا بالتحكم في تسجيل أي أخطاء قد نواجهها

04:21.560 --> 04:24.710
في هذه المرحلة ، لأنه عادة يجب أن ننجح.

04:24.710 --> 04:27.820
وبالتالي ، هنا ، أتوقع ردي في الكتلة

04:27.820 --> 04:32.400
آنذاك وأريد أيضًا تسجيل هذه الاستجابة بعد ذلك.

04:32.400 --> 04:35.820
والآن مع ذلك ، أود أن أقول ، دعونا نرى ما يعطينا هذا.

04:35.820 --> 04:39.720
دعنا نعيد تشغيل NPM لنبدأ في طرح عملية webpack مرة أخرى والبدء

04:39.720 --> 04:40.953
في بناء هذا.

04:42.120 --> 04:43.790
ودعنا نعود إلى تطبيقنا

04:43.790 --> 04:47.220
وندخل مكانًا هنا مثل شارع Sixth.

04:47.220 --> 04:50.090
إذا قمت بالضغط على Search Address ، فسترى بعد فترة من

04:50.090 --> 04:51.480
الوقت تحصل على ناتج هنا.

04:51.480 --> 04:53.660
وهناك يجب أن يكون لديك رمز الحالة

04:53.660 --> 04:56.120
200 مما يعني أن الطلب قد نجح.

04:56.120 --> 04:59.090
ولديك حقل بيانات يحتوي على البيانات

04:59.090 --> 05:01.240
التي يرد عليها الخادم.

05:01.240 --> 05:03.890
يحتوي حقل البيانات هذا على حقل نتائج وفيه

05:03.890 --> 05:06.570
لدينا مصفوفة ، كما يمكنك أن تقول.

05:06.570 --> 05:10.690
في تلك المصفوفة ، حصلنا على عنصرين ، يختلف العدد.

05:10.690 --> 05:13.770
وهذه هي النتائج التي وجدها Google بشكل أساسي.

05:13.770 --> 05:16.740
وعادة ما تكون النتيجة الأولى هي الأفضل.

05:16.740 --> 05:18.790
لذلك إذا ألقيت نظرة على ذلك ، فسنرى على

05:18.790 --> 05:20.460
سبيل المثال العنوان المنسق.

05:20.460 --> 05:22.520
لذا فإن العنوان الذي وجدته Google

05:22.520 --> 05:23.790
لهذا العنوان الذي أدخلناه

05:23.790 --> 05:26.570
، هو أكثر اكتمالًا قليلاً مما أدخلناه.

05:26.570 --> 05:29.300
وحصلنا على مفتاح الهندسة هنا.

05:29.300 --> 05:31.880
وإذا قمنا بتوسيع هذا ، فسنلاحظ بدوره

05:31.880 --> 05:35.240
أنه يحتوي على مفتاح موقع وهذا أخيرًا كائن

05:35.240 --> 05:37.540
بالإحداثيات التي نهتم بها ،

05:37.540 --> 05:39.700
وخط العرض وخط الطول.

05:39.700 --> 05:43.000
لذا في النهاية ، علينا أن نتعمق في البيانات

05:43.000 --> 05:47.390
والنتائج ثم هناك النتيجة الأولى ، الهندسة ، والموقع ، وسيكون

05:47.390 --> 05:50.030
لدينا كائن بخط عرض وخط طول.

05:50.030 --> 05:52.840
وسنكون قادرين بعد ذلك على عرض خط الطول

05:52.840 --> 05:55.240
وخط العرض على الخريطة لاحقًا.

05:55.240 --> 05:57.430
حتى الآن ، دعنا فقط نستخرج

05:57.430 --> 05:59.360
هذا ودعنا نحصل على إحداثياتنا

05:59.360 --> 06:04.360
من خلال الوصول إلى نتائج نقطة بيانات الاستجابة.

06:04.600 --> 06:09.600
ثم هناك أول موقع نقطة للنتيجة الهندسية النقطية ، لذا فعليًا

06:11.200 --> 06:13.093
التعمق في هذا.

06:15.130 --> 06:16.880
الآن ما ستلاحظه بالطبع ، هو

06:16.880 --> 06:19.850
أنه في حين أن TypeScript لا يشكو هنا ، فإننا أيضًا

06:19.850 --> 06:23.280
لا نحصل على دعم TypeScript جيدًا هنا ، أليس كذلك؟

06:23.280 --> 06:25.740
إذا قمت بكتابة نقطة هنا ، فهذا لا يعني

06:25.740 --> 06:27.620
وجود خاصية النتائج.

06:27.620 --> 06:30.350
وبالفعل ، يمكنني محاولة الوصول إلى

06:30.350 --> 06:33.840
أي شيء هنا ، حتى شيء غير موجود في الاستجابة وهذا

06:33.840 --> 06:34.820
أمر منطقي.

06:34.820 --> 06:38.010
كيف يمكن لـ TypeScript معرفة الرد على

06:38.010 --> 06:40.920
أي عنوان URL أرسل طلبًا إليه؟

06:40.920 --> 06:42.810
TypeScript لا يمضي قدمًا

06:42.810 --> 06:44.970
ويرسل الطلب أثناء التطوير

06:44.970 --> 06:46.510
لمعرفة ما يوجد هناك

06:46.510 --> 06:49.170
، وهذا أيضًا لن يكون جيدًا.

06:49.170 --> 06:51.400
لكن يمكننا إخبار TypeScript

06:51.400 --> 06:53.950
بما نتوقعه في الاستجابة لأن طريقة

06:53.950 --> 06:58.950
get هذه هي في الواقع طريقة عامة وهناك أي شيء هنا ، وهذا هو في الواقع

06:59.040 --> 07:02.830
نوع الاستجابة التي نتوقع الحصول عليها.

07:02.830 --> 07:06.880
لذا هنا ، يمكنني إضافة نوع الرد الخاص بي

07:06.880 --> 07:11.270
ويمكنني إخبار TypeScript أن ما أتوقعه هو كائن

07:11.270 --> 07:15.260
به مفتاح نتائج ، والذي بدوره ، هو مصفوفة

07:15.260 --> 07:18.330
مليئة بالكائنات ، حيث يحتوي كل

07:18.330 --> 07:22.170
كائن على مفتاح هندسي ، والذي يكون بعد

07:22.170 --> 07:24.330
ذلك في المنعطف هو كائن

07:24.330 --> 07:28.160
، له مفتاح موقع ، والذي بدوره يكون كائنًا

07:28.160 --> 07:31.170
، له خط عرض ، وهو رقم ، وخط طول ، وهو

07:31.170 --> 07:33.510
رقم.

07:33.510 --> 07:36.030
لذلك بالتأكيد نوع معقد تمامًا.

07:36.030 --> 07:39.400
ولكن مع ذلك ، إذا كتبنا نقطة هنا ، فسأحصل على الإكمال التلقائي

07:39.400 --> 07:42.220
ويفهم TypeScript ما أقوم بالوصول إليه هنا.

07:42.220 --> 07:44.860
وبالطبع ، يمكننا أيضًا سحب هذا النوع من هنا

07:44.860 --> 07:46.620
وإنشاء اسم مستعار خاص بنا.

07:46.620 --> 07:50.497
ربما هنا ، جوجل استجابة الترميز الجغرافي.

07:53.220 --> 07:55.380
سيكون هذا هو النوع المخصص الخاص بي هنا

07:55.380 --> 07:58.420
، وبعد ذلك يمكنني إخبار TypeScript أنني أتوقع هنا

07:58.420 --> 08:01.540
الحصول على استجابة الترميز الجغرافي من Google.

08:01.540 --> 08:03.900
الآن ، بالطبع ، تحتوي الاستجابة فعليًا

08:03.900 --> 08:07.020
على أكثر من مجرد مصفوفة النتائج ، فهي تحتوي أيضًا على

08:07.020 --> 08:09.460
رمز حالة ولديها أيضًا العديد من الحقول الأخرى

08:09.460 --> 08:13.040
في كل عنصر من عناصر مصفوفة النتائج ، ثم الهندسة.

08:13.040 --> 08:17.030
الآن ، بالطبع ، يمكنك ببساطة إضافة كل هذه الحقول إلى

08:18.210 --> 08:21.330
النوع المخصص الخاص بك هنا ، ولكن هنا أريد

08:21.330 --> 08:25.640
حقًا التركيز فقط على القيم التي أهتم بها بنشاط.

08:25.640 --> 08:27.360
وبالتالي ، هناك حقلاً واحد

08:27.360 --> 08:30.900
آخر سأضيفه ، وهذه هي الحالة بجوار النتائج.

08:30.900 --> 08:34.520
لذا هنا في المستوى الأعلى ، حصلنا على الحالة وستكون تلك

08:34.520 --> 08:35.500
عبارة عن سلسلة

08:35.500 --> 08:38.390
تخبرنا ما إذا كانت Google قد نجحت أم لا.

08:38.390 --> 08:41.810
وستكون الحالة في الواقع إما على ما

08:41.810 --> 08:44.010
يرام أو بضع قيم أخرى.

08:44.010 --> 08:46.910
هذه في الأساس عبارة عن رسالة حالة تستجيب لها

08:46.910 --> 08:50.020
Google لإخبارنا بما إذا كانت قد نجحت في جلب الإحداثيات

08:50.020 --> 08:51.890
لهذا العنوان أم لا.

08:51.890 --> 08:54.000
وبالطبع ، في المستندات الرسمية

08:54.000 --> 08:57.280
، يمكننا معرفة نوع الردود التي قد نعود إليها هنا.

08:57.280 --> 08:58.900
إذا قمت بالتمرير لأسفل قليلاً

08:58.900 --> 09:01.070
والنقر فوق فهم الاستجابة ، فستتعرف

09:01.070 --> 09:04.240
على ما بداخل الرد الذي تحصل عليه ، وبالتالي انقر فوق

09:04.240 --> 09:07.000
استجابات الترميز الجغرافي.

09:07.000 --> 09:08.580
ثم في أكواد الحالة ، نتعرف

09:08.580 --> 09:11.090
على أكواد الحالة المتاحة.

09:11.090 --> 09:15.090
على سبيل المثال ، لم نحصل جميعًا على أي نتائج إذا لم يتم العثور على شيء.

09:15.090 --> 09:16.850
حصلنا أيضًا على رمزين آخرين

09:16.850 --> 09:19.223
، لكني هنا لا أهتم سوى بهذين الرمزين.

09:20.200 --> 09:23.310
لذلك أخبرت TypeScript أنه هنا ، أحصل على رمز الحالة

09:23.310 --> 09:24.890
وهو أحد هاتين القيمتين.

09:24.890 --> 09:27.480
الآن مرة أخرى ، قد يكون لها قيمة رقمية أيضًا

09:27.480 --> 09:29.830
، لكن هذا جيد بالنسبة لي هنا.

09:29.830 --> 09:31.640
كما قلت ، يمكنك بالطبع كتابة

09:31.640 --> 09:33.700
هذا بطريقة أكثر اكتمالاً.

09:33.700 --> 09:36.230
الآن مع إضافة ذلك ، في الأسفل هناك في الكتلة

09:36.230 --> 09:41.230
آنذاك ، يمكننا التحقق مما إذا كانت حالة نقطة بيانات الاستجابة ليست على ما يرام ،

09:41.580 --> 09:44.120
مما يعني حدوث خطأ ما ، وفي هذه الحالة ، يمكننا

09:44.120 --> 09:46.710
طرح خطأ هنا ، وبالتالي سننتهي في المصيد حظر

09:46.710 --> 09:48.090
حيث يمكننا إعداد بعض معالجة

09:48.090 --> 09:49.810
الأخطاء.

09:49.810 --> 09:54.280
لذلك سنقوم هنا بإلقاء خطأ لا يمكن جلب الموقع.

09:54.280 --> 09:57.080
ثم هنا في معالج الأخطاء للقيام بشيء ما

09:57.080 --> 09:59.150
، يمكننا إرسال تنبيه حيث نخرج

09:59.150 --> 10:01.230
رسالة الخطأ على الأقل.

10:01.230 --> 10:04.660
هذا بالطبع ، فقط بعض معالجة الأخطاء الأساسية للغاية.

10:04.660 --> 10:06.950
وإلا إذا كانت لدينا استجابة ناجحة ، فسنقوم

10:06.950 --> 10:09.910
بإحضار إحداثياتنا هنا والآن يمكننا استخدام هذه الإحداثيات

10:09.910 --> 10:12.113
لإخراجها على الخريطة.
