WEBVTT

00:02.150 --> 00:03.930
Eğitmen: Böylece ilk POST isteğimizi

00:03.930 --> 00:06.120
ekledik, bir TODO oluşturabiliyoruz.

00:06.120 --> 00:07.250
Şimdi daha fazla rotamız var.

00:07.250 --> 00:10.170
Ayrıca oluşturduğumuz tüm TODOS'lara hizmet edecek bir rotamız var.

00:10.170 --> 00:11.750
Kodunuzu her değiştirdiğinizde ve

00:11.750 --> 00:14.160
kaydettiğinizde TODOS'unuzun sıfırlanacağını lütfen

00:14.160 --> 00:16.630
unutmayın, çünkü bu sunucunuzu yeniden başlatır ve

00:16.630 --> 00:18.920
bellekte depolanan her şeyi kaybeder ve biz sadece

00:18.920 --> 00:21.330
bellekteki TODOS'umuzu yönetiyoruz.

00:21.330 --> 00:23.560
Bu sadece burada sahte uygulamada sahip olduğumuz

00:23.560 --> 00:24.930
bir şey, gerçek bir uygulamada,

00:24.930 --> 00:28.200
elbette bunu gerçek bir veritabanında depolar, oradan getirirsiniz

00:28.200 --> 00:30.280
ve bu nedenle hayatta kalır.

00:30.280 --> 00:35.060
Bununla birlikte, burada getTodos adında yeni bir fonksiyon oluşturabiliriz ve

00:35.060 --> 00:38.030
bu burada bir RequestHandler olacaktır, böylece tüm

00:38.030 --> 00:39.740
parametrelerin türlerini ayrı

00:39.740 --> 00:42.330
ayrı ayarlamak zorunda kalmazsınız.

00:42.330 --> 00:46.120
Ve sonra orada, todos'larımın olduğu bazı JSON verilerini

00:46.120 --> 00:49.560
döndürdüğüm bir yanıt döndürmek istiyorum ve orada,

00:49.560 --> 00:52.420
sadece TODOs dizime ulaşmak ve bunu istemciye

00:52.420 --> 00:54.330
geri göndermek istiyorum ve zaten

00:54.330 --> 00:56.530
hepsi bu olabilir.

00:56.530 --> 00:57.810
Elbette, bunu değiştirebilirsiniz,

00:57.810 --> 00:59.640
belki farklı bir mantığa sahip olmak

00:59.640 --> 01:03.120
istersiniz, belki önce TODOS'u sıralamak istersiniz veya bunun gibi

01:03.120 --> 01:06.690
bir şey ama bu en basit haliyle zaten burada ihtiyacımız olan tek şey,

01:06.690 --> 01:10.530
TODOS'umuzu döndürüyor, yani çok basit bir işlev.

01:10.530 --> 01:13.240
TODOS rotalarında, şimdi sadece bunu bağlamamız gerekiyor.

01:13.240 --> 01:17.680
Şimdi getTodos'u da kontrolörümüzden içe aktaralım

01:17.680 --> 01:20.640
ve bu rota ile buraya bağlayalım.

01:20.640 --> 01:23.430
Ve bununla birlikte, şimdi bunu kaydedersek, halihazırda

01:23.430 --> 01:25.250
iş başında görebiliriz.

01:25.250 --> 01:29.860
Geri dönüp http://localhost:3000/todos/ adresine

01:29.860 --> 01:34.860
yeni bir istek, bir GET isteği oluşturursak ve bunu gönderirsek,

01:39.400 --> 01:41.410
boş bir dizi geri alırız,

01:41.410 --> 01:44.400
şimdi bu neden?

01:44.400 --> 01:46.750
Kodu her değiştirdiğimizde ve sunucu bu nedenle

01:46.750 --> 01:48.010
yeniden başlatıldığında

01:48.010 --> 01:49.750
TODOS'un temizleneceğini söylemiştim,

01:49.750 --> 01:51.470
bu nedenle şimdi sunucuyu yeniden başlatmadan

01:51.470 --> 01:54.110
yeni bir TODO oluşturmalıyız.

01:54.110 --> 01:57.360
Ve eğer bu TODO'yu oluşturduysak ve şimdi TODOS'larımızı

01:57.360 --> 02:01.770
alıyorsak, oluşturulan TODO'yu burada da ID, seri 9811 ve benzeri

02:01.770 --> 02:04.380
ile görürüz.

02:04.380 --> 02:05.960
Yani bu zaten işe yarıyor.

02:05.960 --> 02:08.980
Madem bu konuya girdik, yama ve silme üzerinde de çalışalım

02:08.980 --> 02:10.590
ve tabii ki kendi mantığınızla

02:10.590 --> 02:12.680
bir şeyler üretmekten çekinmeyin.

02:12.680 --> 02:14.970
Sonunda, artık bunun için ihtiyacınız olan tüm yapı

02:14.970 --> 02:16.130
taşlarına sahipsiniz.

02:16.130 --> 02:18.480
Tabii ki artık birlikte de yapacağız.

02:19.390 --> 02:21.570
Şimdi burada yama isteğine yeni

02:21.570 --> 02:24.350
bir denetleyici işlevi ekleyelim.

02:24.350 --> 02:29.350
export const updateTodo, RequestHandler tipindedir ve zaten bildiğimiz

02:30.660 --> 02:34.680
bu formatta bir fonksiyon tutmalıdır.

02:34.680 --> 02:37.310
Burada amaç, gelen talepten yeni TODO

02:37.310 --> 02:40.630
ile ilgili verileri çıkarmak ve ardından TODO'yu

02:40.630 --> 02:44.140
bu yeni verilerle güncellemektir.

02:44.140 --> 02:47.240
Şimdi, buradaki rotamızın bir parçası olarak dinamik bir segmentimiz

02:47.240 --> 02:48.900
olduğunu lütfen unutmayın.

02:48.900 --> 02:51.140
Bu kimlik segmentimiz var.

02:51.140 --> 02:54.610
Böylece URL'den çıkarabileceğimiz bir şey, bu

02:54.610 --> 02:58.750
dinamik segment için somut bir değer çıkarılabilir.

02:58.750 --> 03:02.147
Yani burada gelen isteğimizde, istek params'ımızdan

03:03.172 --> 03:07.987
todoId'yi alabilirsiniz. id,. Kimlik, çünkü burada seçtiğim isim bu.

03:07.987 --> 03:11.660
Burada farklı bir isim seçtiyseniz, orada da farklı bir isim

03:11.660 --> 03:13.060
kullanmanız gerekir.

03:13.060 --> 03:15.810
Şimdi, burada destek türleri yok, değil mi?

03:15.810 --> 03:18.410
Params, any türündedir.

03:18.410 --> 03:20.450
Artık türler bu String'i ayrıştırabildiği

03:20.450 --> 03:23.400
ve içinde ne olduğunu anlayabildiği için.

03:23.400 --> 03:25.460
Dolayısıyla, daha iyi destek türleri elde

03:25.460 --> 03:28.920
etmek için, aslında buradaki RequestHandler'ın genel bir tür olduğunu

03:28.920 --> 03:32.880
kullanabilir ve köşeli parantezler ekleyebilir ve temel olarak TypeScript'e

03:32.880 --> 03:35.880
hangi parametrelere sahip olacağını söyleyebiliriz.

03:35.880 --> 03:37.800
Bunu basitçe bir nesneye ayarlıyoruz ve

03:37.800 --> 03:39.300
artık URL'de sahip olduğumuz tüm

03:39.300 --> 03:42.180
ebeveynlerimizin bir anahtar değer haritasına sahibiz.

03:42.180 --> 03:43.830
Örneğin, sonunda bir String

03:43.830 --> 03:46.730
tutan bir ID parametremiz var.

03:46.730 --> 03:48.610
Bu, buraya ekleyebileceğimiz bir şeydir ve şimdi otomatik

03:48.610 --> 03:50.230
tamamlama elde ettiğimizi ve TypeScript'in

03:50.230 --> 03:52.560
bunun bir String olacağını bildiğini göreceksiniz.

03:52.560 --> 03:55.520
Yani bu genel türü kullanmak daha iyi.

03:55.520 --> 03:58.640
Şimdi, ID'ye sahibiz, ayrıca istek gövdesinden bir şeye

03:58.640 --> 04:01.050
ihtiyacımız var, kesin olmak gerekirse, istek

04:01.050 --> 04:03.560
gövdesinden yeni metne ihtiyacımız var.

04:03.560 --> 04:08.130
Böylece updatedText istek gövdesinden alınabilir ve şimdi tekrar,

04:08.130 --> 04:11.700
gövdede bir text özelliği olacağını ve bunun String türünde

04:11.700 --> 04:14.100
olacağını açıkça belirtmek için burada

04:14.100 --> 04:16.910
typecasting kullanalım.

04:16.910 --> 04:19.750
Daha sonra metni geri alalım.

04:19.750 --> 04:22.373
Ve şimdi TODOS dizimizdeki TODO'yu orada güncelleyebiliriz.

04:23.830 --> 04:27.720
Bunun için, güncellemek istediğimiz TODO'nun indeksini

04:27.720 --> 04:28.710
bulalım.

04:28.710 --> 04:30.808
todoIndex, TODOS'a ulaşarak ve findIndex

04:30.808 --> 04:33.760
ile TODOS dizisindeki her öğe üzerinde bazı mantıklar

04:33.760 --> 04:36.090
çalıştırabiliriz.

04:36.090 --> 04:38.060
Ve orada her todo'ya bakıyoruz ve todo

04:38.060 --> 04:40.010
id burada sahip olduğumuz todoId'ye

04:40.010 --> 04:44.300
eşitse, bunun güncellemek istediğimiz TODO olduğunu biliyoruz.

04:44.300 --> 04:47.140
Şimdi, eğer bu bir nedenden dolayı eksi bir olması

04:47.140 --> 04:50.550
gerekiyorsa, bu TODO'yu bulamadığımız anlamına gelir,

04:50.550 --> 04:52.610
bu yüzden eğer bu sıfırdan küçükse,

04:52.610 --> 04:56.960
bir şeylerin yanlış gittiğini biliyoruz ve bu durumda, "TODO bulunamadı!"

04:56.960 --> 04:59.630
dediğim yeni bir hata atacağım.

04:59.630 --> 05:03.633
Bu da varsayılan hata işleme ara yazılımımızı burada

05:04.760 --> 05:06.130
tetiklemelidir.

05:06.130 --> 05:08.633
Şimdi bu if kontrolünü geçersek, TODO'yu

05:09.870 --> 05:12.450
bulduk demektir ve o zaman TODOS dizimizdeki

05:12.450 --> 05:15.040
bu indeksteki todo'yu, eski kimliği koruduğumuz

05:15.040 --> 05:18.960
yeni bir TODO olacak şekilde güncelleyebiliriz.

05:18.960 --> 05:23.270
Yani TODOS'a eriştiğimiz yer, todoIndex. id, yani eski ID'ye erişiyoruz ve onu saklıyoruz,

05:23.270 --> 05:27.030
ancak burada ayarladığım

05:27.030 --> 05:31.713
metni elbette bu şekilde atamıyoruz.

05:32.870 --> 05:34.570
Ancak burada ayarladığımız metin artık updatedText'tir.

05:34.570 --> 05:38.750
Bu, buradaki TODO'nun yerini alır ve bundan sonra

05:38.750 --> 05:41.340
örneğin Güncellendi gibi bir

05:41.340 --> 05:45.280
mesajla bir yanıt gönderebiliriz.

05:45.280 --> 05:47.053
Ve burada da giden yanıta

05:47.990 --> 05:51.470
updatedTodo'yu ekleriz ve bunu, artık yeni değeri

05:51.470 --> 05:55.090
tutan TODOS todoIndex'e eşit olarak ayarlarız.

05:55.090 --> 05:59.090
Bu, burada güncelleme mantığımızda yaptığımız bir şey, elbette

05:59.090 --> 06:02.430
bazı kukla kodlar çünkü hala bu bellekteki TODOS dizisiyle

06:02.430 --> 06:03.960
çalışıyoruz, ancak burada

06:03.960 --> 06:07.150
TypeScript'i nasıl kullandığımızı gösteriyor ve asıl

06:07.150 --> 06:09.060
önemli olan da bu.

06:09.060 --> 06:11.100
Şimdi bu güncelleme işlevini deneyelim.

06:11.100 --> 06:13.620
Bunun için Postman'a geri dönebiliriz ve sonunda,

06:13.620 --> 06:16.260
şimdi bir PATCH isteği göndermek istiyorum, çünkü

06:16.260 --> 06:19.960
rotalarda bu yama isteğini bu rotaya bekliyoruz.

06:19.960 --> 06:23.460
Ve bundan bahsetmişken, belki de önce bu rotayı

06:23.460 --> 06:24.293
bu denetleyici

06:24.293 --> 06:26.490
işlevine bağlamalıyız.

06:26.490 --> 06:28.850
Şimdi rota dosyasına gidip updateTodo'yu

06:28.850 --> 06:33.420
içe aktaralım ve bu bağlantıyı burada kuralım.

06:33.420 --> 06:35.590
Bundan sonra devam edebilir ve bu talebi gönderebiliriz.

06:35.590 --> 06:38.570
Şimdi Postman'a geri dönelim, PATCH göndermek

06:38.570 --> 06:41.890
istediğimiz şeydir ve sonra http://localhost:3000/todos

06:41.890 --> 06:46.320
ve şimdi URL'nin bir parçası olarak güncellemek istediğimiz

06:46.320 --> 06:49.430
TODO fikri.

06:49.430 --> 06:50.573
Şimdi bir şeyler kaydettiğimiz için,

06:51.500 --> 06:54.970
bazı değişiklikleri kaydettiğimiz için, sunucumuz yeniden başlatıldı, bu nedenle tüm TODOS zaten kaybolacak.

06:54.970 --> 06:58.890
Öncelikle, yeni bir TODO oluşturmak için bu POST isteğini

06:58.890 --> 07:01.150
yeniden gönderelim.

07:01.150 --> 07:02.450
Ve sonra burada o TODO'nun kimliğini aldık.

07:02.450 --> 07:05.170
Şimdi bu kimliği buraya, bu URL'ye ekleyebiliriz.

07:05.170 --> 07:08.800
Ayrıca sunucuya göndermek istediğimiz bu yeni veriyi ayarlayacağımız

07:08.800 --> 07:11.780
JSON türünde bir gövde de ekleyeceğim.

07:11.780 --> 07:15.560
Şimdi güncelleme denetleyicimizde, gelen

07:15.560 --> 07:18.570
istek gövdesinde metin adlı bir alan

07:18.570 --> 07:20.970
aradığımı unutmayın.

07:20.970 --> 07:22.900
Bu yüzden bunu yine gönderdiğimiz JSON

07:22.900 --> 07:24.580
verisinde sağlamalıyız.

07:24.580 --> 07:26.690
Kursu bir ay içinde bitirin,

07:26.690 --> 07:29.440
bu bizim yeni metnimiz olabilir.

07:29.440 --> 07:31.520
Şimdi bunu gönderirsek, güncellendiğini görürüz.

07:31.520 --> 07:35.210
Ve şimdi tüm TODOS'ları alırsam, hala sadece bir TODO

07:35.210 --> 07:37.180
olduğunu görürüz, ancak sadece

07:37.180 --> 07:39.430
metin değişmiştir.

07:39.430 --> 07:41.623
Şimdi bu çalışıyor, TODO'yu da güncelleyebiliyoruz.

07:42.950 --> 07:46.470
Ayrıca, örneğin buradaki son rakamı silerek var olmayan bir id'ye

07:46.470 --> 07:48.780
sahip olursam ne olacağını kontrol edelim,

07:48.780 --> 07:50.620
o zaman 500 türündeki hata yanıtımda

07:50.620 --> 07:53.430
Could not find todo ifadesini alırım.

07:53.430 --> 07:57.670
Bu da iyi görünüyor.

07:57.670 --> 07:59.660
Son adım olarak, bir TODO'yu silmek için bir fonksiyon ekleyelim.

07:59.660 --> 08:03.800
Bu yüzden controllers klasöründe, RequestHandler türünde olan

08:03.800 --> 08:07.210
deleteTodo adlı bir sabiti dışa aktaracağım.

08:07.210 --> 08:11.460
Ve yine, isteğimizi, yanıtımızı ve ardından bir sonraki

08:11.460 --> 08:14.040
işlevi burada alıyoruz.

08:14.040 --> 08:17.320
Ve burada, şimdi TODO'yu bulmak ve

08:17.320 --> 08:20.270
basitçe kaldırmak istiyorum.

08:20.270 --> 08:21.543
Bunun için, aslında TODO'nun kimliğini

08:22.380 --> 08:25.090
ve ardından dizini aldığımız bu kodu kopyalayabiliriz.

08:25.090 --> 08:29.360
Güncellenmiş metni çıkardığımız o satırdan kurtulun çünkü bir DELETE

08:29.360 --> 08:32.210
isteği için istek gövdesi olmayacaktır, ancak

08:32.210 --> 08:35.660
URL rotamızın bir parçası olan TODO'nun kimliğine ihtiyacımız

08:35.660 --> 08:37.400
var.

08:37.400 --> 08:40.340
Ve sonra indeksi buluruz ve indeksi aldıktan sonra,

08:40.340 --> 08:43.530
TODO'lara gidebilir, splice yöntemini çağırabilir ve

08:43.530 --> 08:47.350
todoIndex'teki todo'yu ve yalnızca o todo'yu kaldırabiliriz.

08:47.350 --> 08:51.620
Daha sonra da "Todo silindi!" şeklinde bir

08:51.620 --> 08:54.040
yanıt gönderebiliriz. Aynen böyle.

08:54.040 --> 08:58.490
Bu bizim silme mantığımız olabilir.

08:58.490 --> 08:59.380
Şimdi bunu bağlamanın

08:59.380 --> 09:01.760
zamanı geldi, bu yüzden routes klasöründe, deleteTodo'yu

09:01.760 --> 09:04.560
TODOs denetleyicilerinden içe aktaralım ve oraya bağlayalım.

09:04.560 --> 09:07.440
Ve bu bağlıyken, şimdi bunu kaydedersek, yine bir TODO eklememiz

09:08.340 --> 09:09.963
gerekir çünkü tüm TODO'lar her sunucu

09:11.120 --> 09:14.370
yeniden başlatıldığında temizlenir, işte burada.

09:14.370 --> 09:16.720
Kimliği kopyala.

09:16.720 --> 09:20.550
Ve şimdi DELETE isteğini gönderelim.

09:20.550 --> 09:22.680
Bu yüzden http:/localhost:3000/todos/this

09:22.680 --> 09:24.980
id adresine yeni bir DELETE isteği gönderin.

09:24.980 --> 09:27.160
Gövde eklenmesine gerek yoktur.

09:27.160 --> 09:32.160
Gönder'e tıklayın ve çalışsın.

09:32.800 --> 09:34.880
Tekrar gönderirsem, az önce sildiğimiz

09:34.880 --> 09:37.180
için bulunamadı hatası alıyoruz.

09:37.180 --> 09:39.950
Ve eğer tüm TODOS'ları alırsak, bu boş bir

09:39.950 --> 09:41.570
dizi ve bu olmalıdır.

09:41.570 --> 09:42.723
Yani bu artık çalışıyor

09:42.723 --> 09:45.550
ve bu temelde bu basit Node ve Express uygulamasına

09:45.550 --> 09:46.750
TypeScript ile eklenen

09:46.750 --> 09:49.550
bir CRUD işlevidir.

09:49.550 --> 09:50.990
Elbette bu oldukça önemsiz bir uygulama, ancak

09:50.990 --> 09:52.940
bize TypeScript'in bazı kullanımlarını gösteriyor.

09:52.940 --> 09:56.060
Bu kursun geri kalanında çalıştığınızda size tanıdık

09:56.060 --> 09:58.870
gelecek bir kod yazdığımızı ve orada öğrendiğiniz

09:58.870 --> 10:00.480
tüm özellikleri kullandığımızı

10:00.480 --> 10:02.000
gösteriyor.

10:02.000 --> 10:04.750
Ve tıpkı React bölümünde olduğu gibi, önemli olan da budur.

10:04.750 --> 10:07.610
TypeScript hakkında öğrendiğiniz her şeyi

10:07.610 --> 10:10.110
burada da kullanabilirsiniz, çünkü sonuçta

10:10.110 --> 10:11.520
normal JavaScript koduna

10:11.520 --> 10:14.990
derlenecek ve biz de bunu sunacağız.
