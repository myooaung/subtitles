WEBVTT

00:02.140 --> 00:04.980
-: Quindi si possono usare i tipi per i parametri delle

00:04.980 --> 00:06.750
funzioni e per il valore di ritorno

00:06.750 --> 00:08.100
della funzione.

00:08.100 --> 00:10.420
Ora, per passare a un livello superiore, cosa

00:10.420 --> 00:14.820
succederebbe se il tipo di funzione fosse anch'esso un tipo di funzione.

00:14.820 --> 00:17.170
Ora vorrei chiarire cosa intendo.

00:17.170 --> 00:19.333
Supponiamo di avere una variabile "combinevalues" e che

00:21.360 --> 00:24.200
questa variabile, per impostazione predefinita, abbia un tipo "any". Come avete imparato, "qualsiasi" non è molto utile.

00:24.200 --> 00:26.860
Quello che voglio fare alla fine è impostare

00:26.860 --> 00:29.617
'combinevalues' uguale a 'add. Quindi voglio memorizzare la funzione 'add',

00:29.617 --> 00:32.600
un puntatore a questa funzione 'add', in 'combinevalues',

00:32.600 --> 00:35.330
in modo che alla fine si possa fare il log della

00:35.330 --> 00:37.430
console, combinare i valori ed eseguire

00:37.430 --> 00:39.160
'combinevalues' come una funzione

00:39.160 --> 00:41.580
con 8 e 8.

00:41.580 --> 00:44.520
Ora, se lo salvo e lo eseguo, dopo averlo

00:44.520 --> 00:47.480
compilato, quindi ho compilato questo

00:47.480 --> 00:51.150
file e poi lo lascio ricaricare, otterremo 16

00:51.150 --> 00:52.130
qui.

00:52.130 --> 00:54.660
Quindi, funziona e ci aspettiamo che funzioni, perché si tratta di

00:54.660 --> 00:55.840
normale codice JavaScript.

00:55.840 --> 00:58.820
Possiamo memorizzare un puntatore a una funzione,

00:58.820 --> 01:00.880
in una variabile numerica, e poi l'offerta

01:00.880 --> 01:03.350
esegue questa variabile come una funzione,

01:03.350 --> 01:05.440
perché, beh, punta alla funzione,

01:05.440 --> 01:07.300
giusto?

01:07.300 --> 01:08.580
Quindi possiamo eseguire quella funzione, attraverso quella variabile.

01:08.580 --> 01:09.910
Il problema di questo

01:09.910 --> 01:13.250
snippet, dal punto di vista di TypeScript, è che

01:13.250 --> 01:15.900
'combinevalues' è qualsiasi.

01:15.900 --> 01:19.640
Quindi, se imposto 'combinevalues' a un numero, dopo, ovviamente, non

01:19.640 --> 01:20.670
possiamo compilare

01:20.670 --> 01:24.520
questo purtroppo, perché TypeScript non ha la possibilità di rilevare che

01:24.520 --> 01:27.910
questo è indesiderato o che potrebbe causare un problema.

01:27.910 --> 01:30.543
Ma in fase di esecuzione si otterrebbe un errore, perché

01:30.543 --> 01:34.230
ovviamente si è cercato di eseguire 'combinevalues' come funzione, quando

01:34.230 --> 01:36.220
in realtà si tratta di un numero.

01:36.220 --> 01:39.090
Ora vogliamo evitarlo e per questo dobbiamo essere chiari

01:39.090 --> 01:42.080
sul fatto che 'combinevalues' conterrà una funzione.

01:42.080 --> 01:44.870
Il primo passo in questa direzione

01:44.870 --> 01:48.650
è quello di impostare il tipo qui, su function.

01:48.650 --> 01:50.550
Function è un tipo fornito

01:50.550 --> 01:54.770
da TypeScript e questo chiarisce che qualsiasi cosa memorizziamo

01:54.770 --> 01:57.940
qui deve essere una funzione.

01:57.940 --> 02:00.870
Pertanto, qui ricevo un errore, perché 5 è un numero

02:00.870 --> 02:02.230
e non una funzione.

02:02.230 --> 02:05.350
E se lo commento, possiamo compilarlo, altrimenti otterremmo

02:05.350 --> 02:06.660
un errore in fase di compilazione,

02:06.660 --> 02:09.670
e ora viene eseguito di nuovo come previsto.

02:09.670 --> 02:12.860
Quindi questo è buono, ma non è perfetto perché ora diciamo

02:12.860 --> 02:15.380
che questa dovrebbe essere una funzione,

02:15.380 --> 02:17.940
ma potrebbe anche impostare 'combinevalues'

02:17.940 --> 02:21.460
uguale a 'printResult', ad esempio qui.

02:21.460 --> 02:25.290
Ovviamente TypeScript non si lamenterebbe perché 'printResult'

02:25.290 --> 02:27.150
è una funzione, ma ovviamente non

02:27.150 --> 02:29.600
è una funzione che accetta due argomenti.

02:29.600 --> 02:32.620
Quindi, se compilo questo, TypeScript non si lamenterà.

02:32.620 --> 02:34.800
Ma se ricarichiamo, vediamo undefined qui e Result 8.

02:34.800 --> 02:38.720
Quindi non ottengo il risultato desiderato perché

02:38.720 --> 02:42.470
ho memorizzato la funzione sbagliata.

02:42.470 --> 02:45.980
Anche in questo caso, sarebbe bello se TypeScript

02:45.980 --> 02:47.350
ce lo dicesse.

02:47.350 --> 02:49.980
TypeScript non può informarci su questo, perché tutto ciò che

02:49.980 --> 02:51.340
abbiamo detto a TypeScript è che

02:51.340 --> 02:54.410
vogliamo memorizzare una funzione lì e questo è chiaramente il caso.

02:54.410 --> 02:58.040
Quindi sarebbe bene essere più precisi su come dovrebbe

02:58.040 --> 03:00.550
apparire la funzione che vogliamo

03:00.550 --> 03:03.810
memorizzare in 'combinevalues'. Ed è qui che entrano in gioco i tipi di funzione.

03:03.810 --> 03:07.200
I tipi di funzione sono tipi che descrivono una funzione

03:07.200 --> 03:08.380
per quanto riguarda

03:08.380 --> 03:11.900
i parametri e il valore di ritorno di tale funzione.

03:11.900 --> 03:15.690
Un tipo di funzione viene creato con questa notazione di funzione a freccia

03:15.690 --> 03:18.360
che conoscete da JavaScript o almeno si avvicina

03:18.360 --> 03:19.870
a questa notazione.

03:19.870 --> 03:23.710
Non si aggiungono le parentesi graffe perché non

03:23.710 --> 03:25.530
si sta creando una funzione

03:25.530 --> 03:28.890
freccia, ma un tipo di funzione.

03:28.890 --> 03:31.610
A destra di questa freccia, si specifica il tipo

03:31.610 --> 03:33.690
di ritorno della funzione che si desidera

03:33.690 --> 03:35.450
memorizzare qui.

03:35.450 --> 03:37.180
Dovrebbe essere il numero.

03:37.180 --> 03:40.840
Ora stiamo dicendo che 'combinevalues' accetta qualsiasi funzione

03:40.840 --> 03:42.640
che non richiede parametri e restituisce

03:42.640 --> 03:44.120
un numero.

03:44.120 --> 03:47.200
Naturalmente, questo non è del tutto ciò che vogliamo.

03:47.200 --> 03:50.430
Vogliamo assicurarci che 'combinevalues' accetti una funzione o sia in

03:50.430 --> 03:51.840
grado di memorizzare funzioni che

03:51.840 --> 03:54.180
accettano 2 numeri e restituiscono un numero.

03:54.180 --> 03:57.130
E per questo possiamo aggiungere

03:57.130 --> 04:01.400
dei parametri a questo tipo di funzione.

04:01.400 --> 04:02.400
Non è necessario che i nomi

04:02.400 --> 04:05.040
dei parametri corrispondano a quelli di prima, ma solo ai tipi.

04:05.040 --> 04:06.020
Quindi potremmo avere

04:06.020 --> 04:09.060
a che deve essere di tipo number e b che deve essere di tipo number.

04:09.060 --> 04:10.510
Ora, quello che stiamo dicendo

04:10.510 --> 04:14.070
a TypeScript è che 'combinevalues' dovrebbe accettare qualsiasi

04:14.070 --> 04:15.660
funzione che prenda due parametri,

04:15.660 --> 04:18.322
dove ogni parametro è un numero, e dove la funzione

04:18.322 --> 04:22.930
nel suo complesso restituisce un numero.

04:22.930 --> 04:24.350
Ed è per questo che TypeScript non si lamenta

04:24.350 --> 04:27.780
se memorizziamo 'add' nei valori combine, perché 'add' è una funzione che soddisfa perfettamente

04:27.780 --> 04:29.690
questa definizione di tipo.

04:29.690 --> 04:33.380
Ma si lamenta di 'printResult' perché 'printResult',

04:33.380 --> 04:36.890
come ci dice qui, è una funzione con un solo argomento,

04:36.890 --> 04:40.632
che è un numero, e non viene restituito nulla, mentre

04:40.632 --> 04:44.360
ci aspettiamo di ottenere una funzione con due

04:44.360 --> 04:48.690
argomenti, dove ogni argomento è un numero e viene restituito

04:48.690 --> 04:52.310
un numero.

04:52.310 --> 04:55.810
Abbiamo quindi una mancata corrispondenza e se provassimo

04:55.810 --> 04:58.700
a compilare questo codice, otterremmo un

04:58.700 --> 05:00.480
errore nel compilatore e potremmo

05:00.480 --> 05:03.440
risolvere il problema solo rimuovendo questa

05:03.440 --> 05:06.270
riga di codice.

05:06.270 --> 05:07.110
Ora siamo in grado di ricompilarlo senza errori.

05:07.110 --> 05:10.930
E ora funziona come previsto.

05:10.930 --> 05:12.060
I tipi di funzione ci

05:12.060 --> 05:15.140
permettono di descrivere il tipo di funzione che vogliamo

05:15.140 --> 05:17.413
utilizzare da qualche parte.

05:18.290 --> 05:20.887
Sia che si tratti di un valore atteso in un parametro,

05:20.887 --> 05:23.890
per creare una funzione con qualche richiamo, o, come in questo

05:23.890 --> 05:25.420
caso, di una variabile.
