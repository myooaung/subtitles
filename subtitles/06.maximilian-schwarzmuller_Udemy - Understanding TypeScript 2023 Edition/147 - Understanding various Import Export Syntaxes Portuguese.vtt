WEBVTT

00:02.310 --> 00:04.270
Instrutor: Portanto, estamos usando módulos ES.

00:04.270 --> 00:06.470
Acontece que existem algumas variações dessa

00:06.470 --> 00:08.550
sintaxe de exportação e importação que

00:08.550 --> 00:10.100
você deve estar ciente.

00:10.100 --> 00:12.276
Por exemplo, você pode agrupar as importações.

00:12.276 --> 00:14.300
Vamos dizer aqui na entrada do projeto,

00:14.300 --> 00:15.870
onde estou importando duas coisas

00:15.870 --> 00:18.060
do arquivo de validação aqui.

00:18.060 --> 00:22.030
Você pode querer agrupar tudo isso em um único objeto onde você

00:22.030 --> 00:25.493
pode então chamar ponto validável e ponto validável,

00:25.493 --> 00:29.170
para que você não tenha que chamar validar desta forma.

00:29.170 --> 00:30.940
Talvez você queira chamar assim,

00:30.940 --> 00:33.510
mas se você tivesse uma função com o mesmo nome

00:33.510 --> 00:35.210
e ano ou algo parecido e quisesse

00:35.210 --> 00:36.719
evitar um choque de nomes ou

00:36.719 --> 00:38.250
deixar claro que isto pertence

00:38.250 --> 00:40.292
a algum tipo de pacote, você poderia

00:40.292 --> 00:42.069
agrupar isso.

00:42.069 --> 00:45.090
Para agrupar importações você não as importa assim

00:45.090 --> 00:49.150
com o aparelho encaracolado, mas em vez disso você usa uma estrela aqui,

00:49.150 --> 00:51.970
o que significa importar tudo daquele arquivo,

00:51.970 --> 00:55.080
como e depois qualquer pseudônimo de sua escolha, por

00:55.080 --> 00:57.192
exemplo, a validação.

00:57.192 --> 00:59.280
Agora você tem que ir aos lugares onde

00:59.280 --> 01:01.070
você usa algo daquele arquivo e

01:01.070 --> 01:05.470
usá-lo como uma validação de objeto. validável.

01:05.470 --> 01:07.920
Assim, tudo o que é exportado naquele arquivo

01:07.920 --> 01:10.400
que você agora agrupa com este nome aqui é acessado

01:10.400 --> 01:12.341
através da notação de pontos.

01:12.341 --> 01:15.700
Portanto, validação. validável até o fim e depois também

01:15.700 --> 01:18.830
lá embaixo onde temos a função de validação é claro que

01:18.830 --> 01:25.197
é validação. validar, validação. validar, e validação.

01:25.197 --> 01:25.197
validar.

01:25.197 --> 01:29.604
E com isso você verá que a validação funciona bem.

01:29.604 --> 01:32.490
Portanto, o agrupamento é uma coisa que você pode fazer.

01:32.490 --> 01:34.960
Essa coisa do pseudônimo aqui também é algo

01:34.960 --> 01:36.890
que você pode fazer em geral.

01:36.890 --> 01:38.830
Você não está gostando de autobind como

01:38.830 --> 01:41.270
este, você quer ter um caráter capital no início?

01:41.270 --> 01:45.360
Bem, você pode simplesmente atribuir um pseudônimo com a palavra-chave aqui.

01:45.360 --> 01:48.150
Dentro do aparelho encaracolado, você também pode usá-lo.

01:48.150 --> 01:50.431
Então você renomeia esta importação e somente esta importação.

01:50.431 --> 01:54.350
Não se renomeia no arquivo original, é claro.

01:54.350 --> 01:58.390
Só é importado com um nome diferente neste arquivo aqui.

01:58.390 --> 02:01.280
Portanto, agora, em vez de usar autobind com letra

02:01.280 --> 02:05.780
minúscula, aqui temos que usar nosso nome alternativo com a maiúscula A.

02:05.780 --> 02:09.150
Portanto, isso pode ser outra característica agradável para evitar conflitos

02:09.150 --> 02:11.570
de nomes se você tivesse outra coisa chamada autobind

02:11.570 --> 02:14.543
com a minúscula a no mesmo arquivo, por exemplo.

02:16.180 --> 02:20.010
Você também pode trabalhar com exportações padrão.

02:20.010 --> 02:22.926
Se você tem um arquivo que só exporta uma coisa,

02:22.926 --> 02:25.120
digamos, um componente básico.

02:25.120 --> 02:28.020
Na verdade, temos muitos arquivos que só exportam uma coisa.

02:28.020 --> 02:29.240
Mas digamos aqui neste

02:29.240 --> 02:31.360
arquivo que não queremos exportá-lo

02:31.360 --> 02:33.770
assim, uma exportação assim chamada, porque

02:33.770 --> 02:37.330
importamos pelo nome aqui no aparelho de atadura.

02:37.330 --> 02:40.258
Precisamos usar o nome exato que usamos aqui.

02:40.258 --> 02:42.170
Se você não quiser fazer isso, basta

02:42.170 --> 02:45.140
adicionar outra palavra-chave, padrão.

02:45.140 --> 02:48.940
E isto diz ao JavaScript que esta é a principal, bem,

02:48.940 --> 02:52.064
a exportação padrão deste arquivo.

02:52.064 --> 02:55.929
Você ainda poderia ter aqui outras exportações nomeadas

02:55.929 --> 02:58.500
que seriam permitidas.

02:58.500 --> 03:01.220
Whoops, por exemplo, uma constante aqui que seria

03:01.220 --> 03:02.120
permitida.

03:02.120 --> 03:04.750
Você pode ter exportado com nome e exportação padrão

03:04.750 --> 03:06.130
misturados no mesmo arquivo,

03:06.130 --> 03:07.800
mas se você usar uma exportação

03:07.800 --> 03:11.440
padrão, você só pode ter uma exportação padrão por arquivo.

03:11.440 --> 03:14.210
Portanto, aqui eu tenho minha exportação padrão e agora nos

03:14.210 --> 03:16.926
arquivos onde eu importei, você não a importa pelo nome.

03:16.926 --> 03:19.900
Você só pode importar exportações nomeadas pelo nome.

03:19.900 --> 03:22.639
Por exemplo, que algo constante acrescentou.

03:22.639 --> 03:24.743
Em vez disso, você importa seu padrão simplesmente

03:24.743 --> 03:28.600
escolhendo qualquer nome de sua escolha agora, que não precisa corresponder

03:28.600 --> 03:32.400
ao nome que você usou no arquivo exportado.

03:32.400 --> 03:34.354
Portanto, você não precisa usar componentes agora.

03:34.354 --> 03:37.037
Você poderia usar apenas Cmp, por exemplo, aqui agora.

03:37.037 --> 03:40.700
E importá-la desta forma, sem o aparelho de amarrar.

03:40.700 --> 03:44.127
Também não há nenhuma estrela, portanto, não vou importar tudo.

03:44.127 --> 03:46.827
Eu estou apenas importando o padrão.

03:46.827 --> 03:49.460
Portanto, isto só está disponível se o arquivo do qual

03:49.460 --> 03:52.210
você está importando tiver uma exportação padrão.

03:52.210 --> 03:53.850
Porque isto diz JavaScript,

03:53.850 --> 03:58.010
hey, eu quero usar a exportação padrão desse arquivo.

03:58.010 --> 04:00.520
Então aqui eu posso nomear este Cmp, é claro.

04:00.520 --> 04:02.569
Ou, eu tenho que usar o Cmp, é claro, agora.

04:02.569 --> 04:04.509
O componente não é mais permitido porque

04:04.509 --> 04:06.666
não vou importá-lo com esse nome.

04:06.666 --> 04:09.710
Naturalmente, agora também precisamos ajustar isso no item de projeto

04:09.710 --> 04:10.675
e na lista de projetos.

04:10.675 --> 04:12.486
Usamos a exportação padrão.

04:12.486 --> 04:14.515
Vou me ater ao componente aqui, mas você

04:14.515 --> 04:16.540
não precisa, como acabei de mostrar.

04:16.540 --> 04:18.300
Você pode usar qualquer nome que

04:18.300 --> 04:21.900
quiser aqui, mas por simplicidade, eu usarei componente aqui.

04:21.900 --> 04:24.075
A exportação por padrão pode ser agradável se você

04:24.075 --> 04:25.740
tiver apenas uma coisa por arquivo.

04:25.740 --> 04:29.080
No entanto, eu pessoalmente prefiro exportações nomeadas,

04:29.080 --> 04:31.075
porque você obtém auto-completamento,

04:31.075 --> 04:33.590
você impõe um padrão claro de nomenclatura,

04:33.590 --> 04:37.290
se outro desenvolvedor importa sua classe ou sua coisa exportada,

04:37.290 --> 04:40.460
ele tem que usar seu nome, o que normalmente é bom porque isso

04:40.460 --> 04:41.870
lhe permite impor certas

04:41.870 --> 04:43.290
convenções de nomenclatura

04:43.290 --> 04:46.579
através de uma equipe ou organização.

04:46.579 --> 04:49.840
E portanto, eu pessoalmente gosto de exportações nomeadas, mas

04:49.840 --> 04:51.740
é claro que você deve estar ciente da exportação

04:51.740 --> 04:53.340
padrão também, que você pode usar

04:53.340 --> 04:54.853
dessa forma.
