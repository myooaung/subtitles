WEBVTT

00:02.220 --> 00:03.053
- 我们继续

00:03.053 --> 00:04.950
这里有outFile选项,

00:04.950 --> 00:09.440
现在这个选项对我们来说并不重要, 它现在不起作用｡

00:09.440 --> 00:12.340
我们更感兴趣的是outDIR和rootDir｡ 

00:12.340 --> 00:17.640
您的项目越大, 您可能就越需要组织文件｡

00:17.640 --> 00:24.120
通常, 您不希望将文件放在根级项目文件夹中｡

00:24.120 --> 00:28.080
相反, 您在项目中经常看到的是, 您有一个source文件夹,

00:28.080 --> 00:29.790
还有一个dist文件夹, next,

00:29.790 --> 00:31.240
next｡

00:31.240 --> 00:37.800
dist文件夹负责保存所有输出, 比如所有JavaScript文件.

00:37.800 --> 00:41.380
源文件夹可能包含所有TypeScript文件｡ 

00:41.380 --> 00:44.643
因此, 我们可以将TypeScript文件移动到源文件夹中,

00:44.643 --> 00:47.430
如果我现在删除JavaScript文件夹,

00:47.430 --> 00:49.891
我们就会遇到这样的问题：如果我们编译所有内容,

00:49.891 --> 00:55.768
这些TypeScript文件都会被编译, 因为TypeScript, 编译器确实会查看子文件夹,

00:55.768 --> 01:00.050
但输出文件位于输入文件旁边｡

01:00.050 --> 01:03.660
例如, 我们可以使用outDir来控制这一点｡

01:03.660 --> 01:10.900
如果我们设置了outDir, 我们就可以用编译器告诉这些类型所创建的文件应该存储在哪里｡

01:10.900 --> 01:13.580
我们可以将其设置为dist｡ 

01:13.580 --> 01:17.037
现在, 如果我们这样做, 那么如果您运行chia seed, 您将看到JavaScript文件,

01:17.037 --> 01:23.170
实际上, 没有放在source文件夹中, 而是放在dist文件夹中｡

01:23.170 --> 01:28.540
现在我们只需要调整我们的指数｡  html文件, 并指向dist/app｡

01:28.540 --> 01:28.540
js和dist/分析｡

01:28.540 --> 01:33.880
js或可替换地移动索引｡

01:33.880 --> 01:33.880
html文件到dist文件夹中,

01:33.880 --> 01:37.550
但是我们的def服务器现在就不能正常工作了｡

01:37.550 --> 01:39.875
因此, 我们只需调整这些导入,

01:39.875 --> 01:48.480
这样, 我们就得到了一个仍在工作的应用程序, 如您所见, 但现在具有更清晰的项目结构｡

01:48.480 --> 01:51.530
好的一面是, 如果我们有一个子文件夹,

01:51.530 --> 01:52.980
比如说分析文件夹,

01:52.980 --> 01:54.893
其中有TypeScript文件,

01:54.893 --> 02:03.300
那么如果我们重新编译, 不管是使用此命令还是监视模式, 源文件夹的文件夹结构都将复制到dist文件夹中,

02:03.300 --> 02:16.640
当然, 非常方便, 因为这样可以确保导入文件的方式基本上与在源文件夹中导入文件的方式相同, 这样就可以保留在源文件夹中设置的结构｡

02:16.640 --> 02:18.800
现在您还可以设置根目录,

02:18.800 --> 02:25.202
并在存储文件的文件夹（如本例中的source）中专门设置根目录,

02:25.202 --> 02:30.030
以确保编译器的类型不会在我们的文件夹中查找｡

02:30.030 --> 02:31.530
这也是你可以用下面的include选项做的事情,

02:31.530 --> 02:34.003
对吗？

02:34.870 --> 02:36.007
但是有了根目录,

02:36.007 --> 02:38.781
编译器的类型将不仅仅是查看源文件夹,

02:38.781 --> 02:47.880
它还确保您在那里设置的项目结构保存在dist文件夹中｡

02:47.880 --> 02:50.020
如您所见, 它之前默认是这样做的, 但请记住,

02:50.020 --> 02:54.280
在此之前, 它将在此处包含任何TypeScript文件, 即源代码的所有开头,

02:54.280 --> 02:55.699
因此, 例如, 如果您临时将其注释掉,

02:55.699 --> 03:03.280
如果我们在顶层有一个用户文件夹, 其中包含一个用户｡

03:03.280 --> 03:03.280
ts文件,

03:03.280 --> 03:06.170
其中用户名为Max, 假设编译该文件,

03:06.170 --> 03:11.420
您将只看到dist文件夹中用户文件夹｡

03:11.420 --> 03:17.200
现在也包括了源文件夹, 因为现在我们在更高的级别上有了一个typescript文件,

03:17.200 --> 03:21.780
因此typescript编译器认为我们的整个项目再次是输入,

03:21.780 --> 03:25.970
它复制了它在dist文件夹中找到的文件夹结构｡

03:25.970 --> 03:32.660
当然, 这不是我们想要的, 而这正是rootDir选项可以帮助我们的地方｡

03:32.660 --> 03:34.020
现在, 如果我们将其设置为source,

03:34.020 --> 03:38.630
即使我们在根级别上有其他包含TypeScript文件的文件夹, 它们也不会包括在输出中,

03:38.630 --> 03:43.780
并且源文件夹本身也不会突然结束｡

03:43.780 --> 03:46.480
因此, 您通常会设置rootDir和outDir,

03:46.480 --> 03:52.040
以明确输入文件所在的位置以及输出文件的生成位置｡

03:52.040 --> 03:54.870
如果我们继续, 我们可以忽略复合｡ 

03:54.870 --> 03:57.010
我们可以看看removeComments｡ 

03:57.010 --> 03:58.780
应该很清楚, 如果你设置了这个,

03:58.780 --> 04:00.850
那么你在TypeScript文件中的任何注释,

04:00.850 --> 04:08.000
都会在编译的JavaScript文件中被删除｡

04:08.000 --> 04:12.970
所以如果我在里面注释这个代码, 编译代码, 你会看到一个应用程序｡

04:12.970 --> 04:12.970
ts, 我有一个评论｡ 

04:12.970 --> 04:14.990
一个应用程序｡  js, 它不在那里｡ 

04:14.990 --> 04:18.330
因此, 您可以这样做, 使您的文件更小,

04:18.330 --> 04:20.950
努力可能是一个很好的选择｡

04:20.950 --> 04:23.820
如果您不想生成任何JavaScript文件,

04:23.820 --> 04:25.600
也可以设置noEmit｡

04:25.600 --> 04:27.130
这听起来可能很奇怪,

04:27.130 --> 04:29.190
因为这是TypeScript的想法,

04:29.190 --> 04:35.030
但如果你只想检查你的文件是否正确, 但你不想写所有这些输出文件, 以节省一些时间,

04:35.030 --> 04:47.903
例如, 在一个更大的项目中, 那么你可以设置为“true”, 让编译器检查你的文件, 并报告任何潜在的错误, 而不实际创建一个输出文件｡

04:47.903 --> 04:50.490
importHelpers对我们来说并不重要,

04:50.490 --> 04:52.065
在这里我们可以忽略它｡

04:52.065 --> 04:54.570
downlevelIteration是一个高级选项｡ 

04:54.570 --> 05:00.295
当您将代码编译为旧版本的JavaScript并使用四个循环时,

05:00.295 --> 05:02.690
这很有趣｡

05:02.690 --> 05:08.378
然后在一些罕见的情况下, 您可能会遇到编译无法正常工作的问题｡

05:08.378 --> 05:10.440
这个选项, 如果你打开它,

05:10.440 --> 05:12.770
给你一个更精确的编译, 这将工作在这些利基情况下,

05:12.770 --> 05:20.097
因此, 你可能会认为你应该总是打开它, 但它也会输出更多的那些代码｡

05:20.097 --> 05:21.880
因此, 只有当您有循环,

05:21.880 --> 05:25.110
并且您看到生成的代码突然与其应该的循环行为不同时,

05:25.110 --> 05:29.023
才应该打开此选项｡
