WEBVTT

00:02.210 --> 00:04.920
Narrateur : Maintenant, un type spécial de garde de type,

00:04.920 --> 00:05.753
vous pourriez dire,

00:05.753 --> 00:07.940
ou quelque chose qui vous aide avec les gardes

00:07.940 --> 00:10.000
de type, est l'union discriminée.

00:10.000 --> 00:11.300
Maintenant, qu'est-ce que c'est ?

00:11.300 --> 00:13.310
Il s'agit d'un modèle, que vous pouvez utiliser

00:13.310 --> 00:15.030
lorsque vous travaillez avec des types

00:15.030 --> 00:18.900
d'union, qui facilite l'implémentation des gardes de type.

00:18.900 --> 00:22.000
Elle est disponible lorsque vous travaillez avec des types d'objets.

00:22.000 --> 00:24.580
Laissez-moi vous montrer comment cela fonctionne.

00:24.580 --> 00:26.850
Disons que nous avons quelques interfaces, et il pourrait

00:26.850 --> 00:28.450
s'agir de classes aussi, mais ici je vais

00:28.450 --> 00:29.950
opter pour les interfaces pour montrer

00:29.950 --> 00:32.193
que cela fonctionne aussi avec elles.

00:33.170 --> 00:34.803
Et là, j'ai mon oiseau, qui

00:36.480 --> 00:38.830
a une vitesse de vol, qui devrait être

00:38.830 --> 00:40.973
de type nombre, disons.

00:42.660 --> 00:45.890
Et j'ai aussi mon cheval, qui a une vitesse

00:45.890 --> 00:50.310
au sol ou une vitesse de course, qui devrait être de type

00:50.310 --> 00:51.913
numéro.

00:53.130 --> 00:55.430
Nous avons donc ces deux interfaces ici.

00:55.430 --> 00:58.800
Maintenant nous créons notre propre type d'union,

00:58.800 --> 00:59.633
animal, qui

01:00.750 --> 01:03.370
est soit un oiseau soit un cheval.

01:03.370 --> 01:05.743
Et comme précédemment, nous pourrions avoir

01:06.740 --> 01:08.480
une fonction, move animal, qui

01:09.800 --> 01:13.040
prend un animal en entrée, de type animal, et qui utilise

01:13.040 --> 01:14.800
donc notre type union.

01:14.800 --> 01:19.800
Et maintenant, là-dedans, je veux dire se déplacer avec vitesse, et maintenant

01:19.990 --> 01:21.050
bien sûr, je dois

01:21.050 --> 01:25.180
accéder soit à la vitesse de vol, soit à la vitesse de course.

01:25.180 --> 01:27.730
Maintenant, bien sûr, nous aurions pu simplement l'appeler vitesse.

01:27.730 --> 01:30.840
Mais il ne s'agit que d'un exemple simplifié d'un cas d'utilisation

01:30.840 --> 01:33.900
réel auquel vous pourriez être confronté, où vous avez des interfaces

01:33.900 --> 01:37.390
ou des objets en général, qui sont en quelque sorte liés mais qui ont des

01:37.390 --> 01:40.500
propriétés ou des méthodes différentes.

01:40.500 --> 01:42.050
Donc ici, c'est la propriété de la

01:42.050 --> 01:43.900
vitesse, qui est en fait différente.

01:43.900 --> 01:46.780
Il ne peut donc pas accéder à la vitesse de vol ici car, bien sûr,

01:46.780 --> 01:49.240
tous les animaux n'ont pas une vitesse de vol.

01:49.240 --> 01:51.210
Maintenant nous pouvons faire ce que nous avons appris avant.

01:51.210 --> 01:56.063
Nous pouvons vérifier si la vitesse de vol est animale ici.

01:58.240 --> 02:01.063
Et si c'est le cas, nous pouvons exécuter ce code.

02:01.960 --> 02:04.470
C'est une approche que nous pouvons adopter,

02:04.470 --> 02:07.430
mais plus il y a d'animaux potentiels, plus il y a

02:07.430 --> 02:09.233
de choses à vérifier.

02:10.880 --> 02:14.100
On peut aussi faire des fautes de frappe ici dans cette chaîne.

02:14.100 --> 02:15.810
Nous pouvons oublier un E, par exemple,

02:15.810 --> 02:18.460
et nous demander pourquoi cela ne fonctionne pas.

02:18.460 --> 02:20.410
Maintenant, nous ne pouvons pas utiliser instance of ici

02:20.410 --> 02:22.570
parce que je suis en train de rompre avec les interfaces.

02:22.570 --> 02:27.490
Comme je l'ai expliqué, l'instance animal de bird ne fonctionnera pas car

02:27.490 --> 02:29.680
data est une interface, qui n'est

02:29.680 --> 02:31.840
pas compilée en JavaScript.

02:31.840 --> 02:33.970
Ainsi, au moment de l'exécution, cette fonction ne sera

02:33.970 --> 02:36.210
pas disponible en tant que fonction de construction.

02:36.210 --> 02:37.690
Donc, par conséquent, cela ne fonctionne pas.

02:37.690 --> 02:40.380
Maintenant nous pouvons construire un syndicat discriminé

02:40.380 --> 02:42.460
ici en donnant chaque interface.

02:42.460 --> 02:45.380
Donc tous les objets qui devraient faire partie de l'Union,

02:45.380 --> 02:47.130
et les biens supplémentaires.

02:47.130 --> 02:48.640
Vous pouvez utiliser le nom que vous voulez.

02:48.640 --> 02:51.490
On utilise souvent "kind" ou "type" ici.

02:51.490 --> 02:55.090
Je vais aller pour le type, et nommer cet oiseau.

02:55.090 --> 02:57.480
Maintenant important, nous échangeons une interface ici.

02:57.480 --> 03:02.480
Ce n'est donc pas une valeur pour la propriété type.

03:02.650 --> 03:05.410
Il s'agit plutôt d'un type littéral, comme vous l'avez

03:05.410 --> 03:09.110
appris, où type doit contenir une chaîne, qui doit être un oiseau.

03:09.110 --> 03:10.880
Il s'agit donc d'une affectation

03:10.880 --> 03:15.000
de type, où nous réduisons la valeur qui peut être stockée dans le type

03:15.000 --> 03:17.590
à exactement cette valeur de chaîne.

03:17.590 --> 03:19.810
Et ensuite, faites la même chose pour le cheval,

03:19.810 --> 03:22.283
mais avec le cheval comme type littéral.

03:23.400 --> 03:25.060
Maintenant, ici, dans notre

03:25.060 --> 03:27.550
fonction, nous pouvons utiliser une

03:27.550 --> 03:29.840
instruction switch et basculer sur

03:29.840 --> 03:32.280
le type de point animal.

03:32.280 --> 03:34.080
Chaque animal possède une propriété

03:34.080 --> 03:36.330
de type car nous l'avons ajoutée à toutes les interfaces

03:36.330 --> 03:38.350
qui composent notre animal.

03:38.350 --> 03:40.730
Et puis ici, nous pouvons avoir quelques cas

03:40.730 --> 03:42.330
où nous obtenons même la complétion

03:42.330 --> 03:44.990
automatique parce que TypeScript et notre IDE

03:44.990 --> 03:49.040
comprennent que le type ne peut être que oiseau ou cheval.

03:49.040 --> 03:51.050
Et s'il s'agit d'un oiseau, nous

03:51.050 --> 03:55.003
pourrions définir une certaine vitesse variable interne pour,

03:55.900 --> 03:58.860
disons, la vitesse de vol d'un point d'animal

03:59.880 --> 04:02.250
et nous arrêter ensuite.

04:02.250 --> 04:05.183
Sinon, s'il s'agit d'un cheval, nous fixons

04:06.830 --> 04:11.753
une vitesse égale à la vitesse de course du point de l'animal.

04:14.150 --> 04:17.490
Et là, on peut consigner en console, en

04:17.490 --> 04:20.843
se déplaçant à vitesse plus vitesse.

04:22.490 --> 04:26.540
Si j'appelle maintenant, déplacer l'animal avec un animal que

04:26.540 --> 04:30.300
j'ai créé à la volée ici, où je fixe le type à oiseau et je n'autorise

04:30.300 --> 04:32.810
que l'utilisation de l'oiseau ou du cheval,

04:32.810 --> 04:34.930
alors je dois définir ma vitesse de

04:36.140 --> 04:39.210
vol et d'ailleurs, TypeScript reconnaît même qu'un

04:39.210 --> 04:42.050
concept de vitesse de course ici pour essayer

04:42.050 --> 04:44.220
de le faire et le fixer à 10, il se plaint

04:44.220 --> 04:48.980
que ce n'est pas disponible pour le type oiseau.

04:48.980 --> 04:51.360
Si je le règle sur la vitesse de vol, cependant

04:51.360 --> 04:55.120
cela fonctionne, si nous sauvegardons cela, il sort ceci correctement,

04:55.120 --> 04:57.700
et compile également sans erreurs.

04:57.700 --> 04:59.530
Il s'agit d'une union discriminée

04:59.530 --> 05:04.060
parce que nous avons une propriété commune dans chaque objet qui compose

05:04.060 --> 05:08.040
notre union, qui décrit cet objet, de sorte que nous pouvons utiliser

05:08.040 --> 05:11.490
cette propriété qui décrit cet objet dans notre vérification

05:11.490 --> 05:16.490
pour avoir une sécurité de type à 100% et comprendre quelles propriétés sont disponibles

05:16.770 --> 05:21.930
pour un tel objet et quelles propriétés ne le sont pas.

05:21.930 --> 05:24.500
Il s'agit donc d'un nouveau modèle utile que vous pouvez

05:24.500 --> 05:28.060
utiliser lorsque vous travaillez avec des objets et des types d'union.

05:28.060 --> 05:30.340
Et cela fonctionne même avec les interfaces,

05:30.340 --> 05:33.630
car cette interface oblige tous les objets que vous construisez

05:33.630 --> 05:37.050
sur la base de cette interface à avoir ce type.

05:37.050 --> 05:39.400
Ainsi, au lieu de vérifier l'existence d'une

05:39.400 --> 05:41.200
propriété donnée, ou d'utiliser

05:41.200 --> 05:43.660
l'instance de, nous utilisons une propriété dont

05:43.660 --> 05:46.310
nous connaissons l'existence pour vérifier le type

05:46.310 --> 05:49.020
d'objets avec lequel nous travaillons.

05:49.020 --> 05:51.930
Nous éliminons également le risque d'erreur de frappe parce

05:51.930 --> 05:54.730
que TypeScript comprend que les seuls cas que nous pouvons

05:54.730 --> 05:58.480
avoir ici, pour le type d'animal, sont oiseau et cheval et donc il nous donne

05:58.480 --> 06:00.810
cet art de l'achèvement et si vous introduisez

06:00.810 --> 06:02.770
une faute de frappe, nous aurons immédiatement

06:02.770 --> 06:04.690
une erreur.

06:04.690 --> 06:06.780
Il s'agit donc d'un modèle très utile pour

06:06.780 --> 06:09.333
travailler avec des objets et des types d'union.
