WEBVTT

00:02.090 --> 00:02.923
Narrador: Para hacer

00:02.923 --> 00:04.750
cosas más avanzadas con los decoradores

00:04.750 --> 00:07.340
tendrás que tener en cuenta que algunos decoradores,

00:07.340 --> 00:09.200
por ejemplo, los decoradores de clases

00:09.200 --> 00:11.700
pero también los decoradores de métodos, por ejemplo,

00:11.700 --> 00:14.650
en realidad también son capaces de devolver algo.

00:14.650 --> 00:16.570
Ahora, no voy a devolver nada a ningún

00:16.570 --> 00:17.510
decorador.

00:17.510 --> 00:18.430
No me refiero a la

00:18.430 --> 00:20.010
función del decorador, que

00:20.010 --> 00:22.460
se devuelve en la fábrica del decorador.

00:22.460 --> 00:23.701
Realmente me refiero a un valor

00:23.701 --> 00:26.040
de retorno dentro de la función del decorador, y no

00:26.040 --> 00:28.890
tenemos ningún valor de este tipo en ninguna parte.

00:28.890 --> 00:31.559
Ahora en la función WithTemplate, en esta función

00:31.559 --> 00:34.670
decoradora WithTemplate, debería decir, podríamos

00:34.670 --> 00:36.930
añadir ese valor de retorno.

00:36.930 --> 00:38.520
Y lo que puedes devolver y lo que

00:38.520 --> 00:40.430
TypeScript es capaz de utilizar, depende

00:40.430 --> 00:43.660
del tipo de decorador con el que estés trabajando.

00:43.660 --> 00:44.990
Aquí, estamos trabajando

00:44.990 --> 00:47.270
con un decorador que se añade a una clase,

00:47.270 --> 00:48.750
y en tal función de decorador,

00:48.750 --> 00:51.677
puede devolver una nueva función constructora, que

00:51.677 --> 00:53.800
sustituirá a la antigua.

00:53.800 --> 00:55.590
Por lo tanto, que sustituirá a la clase

00:55.590 --> 00:58.330
a la que ha añadido a decorador se podría decir.

00:58.330 --> 01:01.073
Así que aquí podemos devolver una nueva función,

01:01.073 --> 01:02.490
una nueva función constructora,

01:02.490 --> 01:06.370
o simplemente devolver una nueva clase, al final, porque una clase,

01:06.370 --> 01:08.280
la palabra clave class, nos permite

01:08.280 --> 01:11.150
utilizar este azúcar sintáctico para crear dicha

01:11.150 --> 01:13.360
función constructora, y la clase que

01:13.360 --> 01:17.463
creo aquí no necesita tener un nombre, pero podemos y debemos extender

01:17.463 --> 01:22.250
el constructor que estamos obteniendo aquí.

01:22.250 --> 01:23.730
Así que lo que estoy haciendo

01:23.730 --> 01:25.848
aquí ahora es en mi función decoradora

01:25.848 --> 01:28.060
aquí, estoy devolviendo una nueva clase,

01:28.060 --> 01:29.270
y de nuevo ten en cuenta

01:29.270 --> 01:30.910
que es sólo azúcar sintáctico

01:30.910 --> 01:32.770
para una función constructora, así

01:32.770 --> 01:35.400
que estoy devolviendo una función constructora,

01:35.400 --> 01:38.830
al final, que se basa en la función constructora original, para

01:38.830 --> 01:42.610
que yo mantenga todas las propiedades de mi clase original, de mi función

01:42.610 --> 01:44.810
constructora original, no necesariamente

01:44.810 --> 01:47.010
tenemos que hacer eso, pero no quiero perder

01:47.010 --> 01:50.520
mis propiedades aquí, así que lo haré.

01:50.520 --> 01:53.670
Y aquí podemos añadir nuevas funcionalidades.

01:53.670 --> 01:56.716
Por ejemplo, y tendré que cambiar algunos nombres aquí,

01:56.716 --> 02:00.340
puedo añadir una nueva función constructora ahí, y para evitar confusiones,

02:00.340 --> 02:01.500
cambiaré el nombre del

02:01.500 --> 02:04.040
constructor que tengo aquí.

02:04.040 --> 02:06.640
Así que la clase en la que he añadido este

02:06.640 --> 02:09.620
decorador, voy a nombrar esto aquí, originalConstructor

02:12.889 --> 02:15.690
y copiar que todo aquí.

02:15.690 --> 02:18.950
Y ahora, en lugar de esta función constructora aquí, tengo

02:18.950 --> 02:20.853
que llamar a super para llamar a esta

02:20.853 --> 02:24.530
función constructora original desde dentro de ella, porque si añades

02:24.530 --> 02:25.430
una función constructora

02:25.430 --> 02:27.410
en una clase que extiende otra clase,

02:27.410 --> 02:29.920
que es, al final, lo que estamos haciendo aquí,

02:29.920 --> 02:33.630
entonces tienes que llamar a super.

02:33.630 --> 02:36.108
Y ahora aquí puedes escribir cualquier lógica que quieras.

02:36.108 --> 02:40.040
Y, por ejemplo, aquí, podríamos mover esta lógica de renderización

02:40.040 --> 02:42.782
de la plantilla aquí, fuera de nuestra función

02:42.782 --> 02:45.620
decoradora en esta nueva función constructora

02:45.620 --> 02:49.020
que estamos devolviendo aquí.

02:49.020 --> 02:50.960
Así que de nuevo, realmente tener en cuenta

02:50.960 --> 02:52.550
que estamos creando una clase aquí que

02:52.550 --> 02:53.383
al final sólo crea una

02:53.383 --> 02:54.540
función constructora con

02:54.540 --> 02:55.833
esta lógica en ella.

02:56.670 --> 02:58.850
Así que ahora lo que estoy tratando de

02:58.850 --> 03:01.367
hacer es, trato de reemplazar la clase.

03:01.367 --> 03:04.298
La función constructora a la que añadimos nuestro

03:04.298 --> 03:07.550
decorador con una nueva clase, con una nueva función constructora,

03:07.550 --> 03:10.290
en la que sigo ejecutando la lógica antigua, pero

03:10.290 --> 03:12.920
en la que también añado mi propia lógica nueva,

03:12.920 --> 03:14.670
y por lo tanto, ahora la plantilla

03:14.670 --> 03:17.450
en realidad sólo debe ser renderizada al DOM si

03:17.450 --> 03:21.340
realmente instancio mi objeto aquí.

03:21.340 --> 03:22.890
Y no todo el tiempo, cuando

03:22.890 --> 03:25.180
se ejecuta esta función del decorador,

03:25.180 --> 03:26.340
que como aprendiste,

03:26.340 --> 03:29.620
sucede tan pronto como definimos la clase.

03:29.620 --> 03:31.010
Ahora un pequeño ajuste aquí,

03:31.010 --> 03:34.290
no llamo a mi constructor original aquí, en su lugar podemos simplemente

03:34.290 --> 03:37.380
acceder a esto. name para obtener el

03:37.380 --> 03:40.180
valor de la propiedad name de la instancia

03:40.180 --> 03:42.750
que estamos creando.

03:42.750 --> 03:45.120
Ahora tenemos una pequeña queja por ahí abajo

03:45.120 --> 03:47.750
respecto a que los tipos no son correctos.

03:47.750 --> 03:51.330
Sin embargo, para arreglar esto, podemos convertir nuestra función

03:51.330 --> 03:53.990
decoradora en una función genérica donde obtenemos

03:53.990 --> 03:57.113
un tipo, y establecemos esto como el tipo del constructor

03:58.090 --> 03:59.820
original, y ahora dejamos claro

03:59.820 --> 04:01.668
que esto será básicamente una función

04:01.668 --> 04:05.780
constructora, y podemos dejar esto claro asignando un tipo especial, un

04:05.780 --> 04:09.260
tipo de objeto, donde establecemos una nueva propiedad, esto

04:09.260 --> 04:11.610
es un nombre de reserva por supuesto, pero

04:11.610 --> 04:17.760
le dice a TypeScript que al final esto será un objeto que puede ser newed.

04:17.760 --> 04:19.690
Así que eso será una función constructora,

04:19.690 --> 04:22.170
una función que podemos llamar con la palabra clave

04:22.170 --> 04:24.380
new para generar un nuevo objeto.

04:24.380 --> 04:27.410
Y esta nueva función, este nuevo método, que el objeto T

04:27.410 --> 04:30.660
se basa en tendrá, obtendrá cualquier cantidad de argumentos,

04:30.660 --> 04:33.520
así que estoy usando parámetros de descanso aquí para

04:33.520 --> 04:35.380
aceptar tantos argumentos como quieras,

04:35.380 --> 04:37.290
para que sean realmente flexibles

04:37.290 --> 04:39.840
en cuanto a los argumentos que se pueden pasar al

04:39.840 --> 04:42.200
constructor de la clase que estamos tratando

04:42.200 --> 04:44.000
de cambiar.

04:45.420 --> 04:46.430
Añade la nueva función

04:46.430 --> 04:49.063
que al final devolverá un objeto aquí.

04:50.140 --> 04:53.500
Ahora debería copiar esa definición del parámetro restante a mi constructor,

04:53.500 --> 04:55.680
para que este constructor también sea capaz

04:55.680 --> 04:57.640
de aceptar todos los argumentos que podamos

04:57.640 --> 05:00.260
obtener, para que podamos, básicamente, instanciar

05:00.260 --> 05:02.380
Persona con cualquier argumento que quieras

05:02.380 --> 05:04.380
pasar aquí.

05:04.380 --> 05:06.610
Con los argumentos que podamos necesitar también

05:06.610 --> 05:09.279
aquí, en la función constructora original.

05:09.279 --> 05:11.600
Y con esto el único problema que nos encontraremos

05:11.600 --> 05:14.021
es que no sabemos que existe dicha propiedad

05:14.021 --> 05:16.250
name, y correctamente así, no sabemos a qué

05:16.250 --> 05:19.639
clase añadiremos este decorador WithTemplate, por lo que no sabemos

05:19.639 --> 05:23.951
si habrá una propiedad name en la clase a la que lo añadamos.

05:23.951 --> 05:25.560
Pero, podemos arreglar esto

05:25.560 --> 05:27.140
simplemente diciéndole a

05:27.140 --> 05:30.200
TypeScript que el objeto en el que se basa T, por lo que

05:30.200 --> 05:32.773
nuestra función constructora original, no

05:32.773 --> 05:35.530
producirá cualquier objeto, sino que en realidad

05:35.530 --> 05:37.460
producirá un objeto con una propiedad

05:37.460 --> 05:41.140
name que será de tipo string y que es correcta.

05:41.140 --> 05:44.922
Nuestro decorador WithTemplate se añade a una clase, que tendrá

05:44.922 --> 05:46.250
una propiedad name.

05:46.250 --> 05:47.300
Si comentara esto,

05:47.300 --> 05:48.133
obtendríamos un

05:48.133 --> 05:50.740
error, porque ahora intentaríamos añadir este

05:50.740 --> 05:53.460
decorador a una clase que no cumple este criterio

05:53.460 --> 05:55.543
pero aquí, esto sí lo cumple.

05:55.543 --> 05:58.790
Ahora, tengo un error aquí cuando trato de compilar esto, porque

05:58.790 --> 06:00.630
no estoy usando args aquí, podemos

06:00.630 --> 06:02.660
cambiar esto a un _ para decirle a typescript

06:02.660 --> 06:04.930
que sabemos que no lo usamos y que queremos ignorar

06:04.930 --> 06:06.230
esto.

06:06.230 --> 06:08.050
Este es un nombre de parámetro válido,

06:08.050 --> 06:10.678
es sólo un nombre especial que typescript toma

06:10.678 --> 06:13.220
como un parámetro Lo entiendo, necesito aceptarlo,

06:13.220 --> 06:15.260
pero no lo usaré.

06:15.260 --> 06:18.273
Y con eso, todo se compila y si recargamos, ves,

06:19.440 --> 06:22.420
seguimos viendo a Max en la página aquí.

06:22.420 --> 06:23.910
Lo interesante es que, si

06:23.910 --> 06:25.480
ahora eliminamos ese código

06:25.480 --> 06:27.060
donde instanciamos Persona

06:27.060 --> 06:28.440
si comento esto para que

06:28.440 --> 06:30.740
sólo encuentre una clase Persona, pero

06:30.740 --> 06:33.550
nunca la instancie en ningún sitio, ves que al

06:33.550 --> 06:36.890
recargarse no vemos a Max en la pantalla.

06:36.890 --> 06:39.467
Todos los decoradores se siguen ejecutando,

06:39.467 --> 06:42.410
pero ya no renderizamos nada en la pantalla.

06:42.410 --> 06:43.243
Y la razón de esto,

06:43.243 --> 06:46.340
es que ahora mejoramos nuestro decorador aquí

06:46.340 --> 06:49.520
aún más, aprovechando su característica donde

06:49.520 --> 06:52.360
podemos devolver un nuevo valor o en este caso

06:52.360 --> 06:55.350
una nueva función constructora.

06:55.350 --> 06:57.205
En el caso del decorador de clases.

06:57.205 --> 07:00.780
Esta es una nueva función constructora, o una nueva clase, que,

07:00.780 --> 07:03.040
como he explicado, es sólo azúcar sintáctico

07:03.040 --> 07:04.300
para la función constructora,

07:04.300 --> 07:06.750
y esta función constructora, por lo tanto,

07:06.750 --> 07:09.070
reemplaza nuestra clase original, nuestra

07:09.070 --> 07:12.160
función constructora original.

07:12.160 --> 07:15.220
Ahora, como he llamado a super aquí, guardamos

07:15.220 --> 07:17.610
la función original.

07:17.610 --> 07:19.690
Guardamos la clase original, todo lo que

07:19.690 --> 07:22.540
inicializamos aquí básicamente sigue ocurriendo,

07:22.540 --> 07:25.530
porque lo hago en mi constructor de reemplazo también,

07:25.530 --> 07:27.480
y extiendo la clase original.

07:27.480 --> 07:30.420
Así que guardamos todo lo que había en la clase original.

07:30.420 --> 07:31.550
No tienes que hacerlo,

07:31.550 --> 07:32.670
pero yo lo hago aquí,

07:32.670 --> 07:35.560
porque no quiero perder esos datos originales.

07:35.560 --> 07:36.850
Pero, detrás de las escenas,

07:36.850 --> 07:39.770
reemplazo la clase con mi nueva clase personalizada

07:39.770 --> 07:42.370
aquí, y eso nos permite agregar lógica extra, que

07:42.370 --> 07:45.600
debe ejecutarse cuando la clase es instanciada.

07:45.600 --> 07:49.090
Y ahora, de repente, somos capaces de añadir lógica que

07:49.090 --> 07:52.410
no se ejecuta cuando la clase está definida, sino cuando

07:52.410 --> 07:54.660
la clase es instanciada.

07:54.660 --> 07:57.150
Por lo tanto, este debería ser un gran primer

07:57.150 --> 08:01.860
ejemplo de todo el poder que puedes desatar con los decoradores si realmente entiendes

08:01.860 --> 08:04.480
lo que puedes hacer con ellos.

08:04.480 --> 08:06.800
Y no se pueden definir sólo como funciones,

08:06.800 --> 08:09.970
y no se pueden definir sólo con funciones factoriales.

08:09.970 --> 08:12.600
En algunos decoradores, como el decorador de

08:12.600 --> 08:14.400
clase, también puede devolver

08:14.400 --> 08:17.650
algo para reemplazar la cosa a la que agregó el decorador

08:17.650 --> 08:19.470
en nuestro caso la clase, con una

08:19.470 --> 08:23.000
nueva clase que puede implementar la vieja clase pero también

08:23.000 --> 08:25.711
agregar su nueva lógica personalizada.

08:25.711 --> 08:28.004
Y con eso, si comentamos esto de nuevo,

08:28.004 --> 08:30.240
volvemos a renderizar a Max en la pantalla

08:30.240 --> 08:31.570
con nuestra propia clase

08:31.570 --> 08:35.793
que reemplaza, o que extiende y reemplaza a la vieja clase.
