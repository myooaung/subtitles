WEBVTT

00:02.270 --> 00:03.103
Instructeur : Pour cela,

00:03.103 --> 00:04.620
j'ai un petit projet de départ pour vous.

00:04.620 --> 00:05.610
Vous le trouverez ci-joint.

00:05.610 --> 00:07.070
C'est le même projet de départ que

00:07.070 --> 00:08.810
nous avons utilisé encore et encore.

00:08.810 --> 00:12.080
Vous démarrez le serveur de développement avec

00:12.080 --> 00:15.510
npm-start et ensuite j'ai lancé la compilation TypeScript

00:15.510 --> 00:19.830
en mode veille avec tsc-w dans un terminal séparé.

00:19.830 --> 00:22.890
Donc ici, dans mon terminal intégré, j'ai deux onglets.

00:22.890 --> 00:24.390
L'un d'entre eux contient le serveur

00:24.390 --> 00:26.070
de développement, que vous devez maintenir

00:26.070 --> 00:27.670
en fonctionnement afin qu'il surveille

00:27.670 --> 00:30.720
les changements, recharge la page et maintienne le serveur en fonctionnement,

00:30.720 --> 00:32.820
et un autre onglet dans lequel se trouve l'observateur

00:32.820 --> 00:35.530
de compilation TypeScript.

00:35.530 --> 00:36.930
Maintenant, avec ça, nous pouvons travailler

00:36.930 --> 00:39.400
dans l'application. ts, qui est vide pour l'instant,

00:39.400 --> 00:41.520
et commencer à y écrire du code. Je veux commencer

00:41.520 --> 00:42.990
tout de suite par définir une

00:42.990 --> 00:45.603
classe que nous pouvons utiliser.

00:46.490 --> 00:49.420
Pour ce faire, nous utilisons le mot-clé class, comme

00:49.420 --> 00:51.340
ça, puis le nom de la classe et là, disons

00:51.340 --> 00:54.030
que nous construisons une application, une application

00:54.030 --> 00:56.880
web, une interface utilisateur pour un outil web

00:56.880 --> 01:00.700
qui nous permet de gérer les différents départements que nous pouvons

01:00.700 --> 01:04.100
avoir dans notre entreprise.

01:04.100 --> 01:05.770
Peut-être que nous sommes en train de construire

01:05.770 --> 01:08.440
une sorte d'outil interne à l'entreprise, quel qu'il soit, et que

01:08.440 --> 01:11.290
nous avons besoin d'avoir plusieurs départements sur place.

01:11.290 --> 01:13.790
Nous pourrions utiliser des objets pour

01:13.790 --> 01:16.320
gérer les données des différents départements

01:16.320 --> 01:19.960
et nous pourrions également ajouter des méthodes à chaque

01:19.960 --> 01:21.980
objet afin de rendre ces informations

01:21.980 --> 01:24.020
sur l'écran. Pour simplifier la

01:24.020 --> 01:26.980
création de ces différents objets de département

01:26.980 --> 01:33.000
qui se ressemblent tous, il faut créer une classe de département.

01:33.000 --> 01:35.690
Nous pourrions donc nommer cette classe Département.

01:35.690 --> 01:36.830
Le nom est totalement libre.

01:36.830 --> 01:40.030
La convention veut qu'il commence par une majuscule pour

01:40.030 --> 01:42.720
bien montrer qu'il s'agit d'une classe.

01:42.720 --> 01:45.670
Maintenant, si vous avez été dans le développement JavaScript

01:45.670 --> 01:48.270
pendant une longue période, vous connaissez peut-être

01:48.270 --> 01:50.090
l'idée des fonctions de constructeur,

01:50.090 --> 01:52.140
et les classes sont en fait un sucre syntaxique

01:52.140 --> 01:53.920
pour cela, mais nous verrons cela une

01:53.920 --> 01:56.980
fois que nous aurons compilé notre code.

01:56.980 --> 01:59.220
Nous avons donc ici notre classe Département et maintenant

01:59.220 --> 02:02.080
dans celle-ci nous pourrions avoir une propriété de nom.

02:02.080 --> 02:04.010
Vous pouvez l'ajouter comme

02:04.010 --> 02:07.290
ça, sans aucun let ou const devant, directement

02:07.290 --> 02:09.840
dans la classe, et bien sûr, vous pouvez

02:09.840 --> 02:12.550
aussi lui attribuer un type.

02:12.550 --> 02:14.690
Pour ce faire, vous ajoutez deux points ici, puis

02:14.690 --> 02:17.920
le type de chaîne de caractères, par exemple, et c'est important.

02:17.920 --> 02:21.150
Cela peut ressembler à un objet mais ce n'est pas un objet.

02:21.150 --> 02:23.240
Dans un objet, vous utilisez des paires clé-valeur

02:23.240 --> 02:25.520
avec deux points pour avoir un nom de clé et ensuite

02:25.520 --> 02:27.000
la valeur de la clé.

02:27.000 --> 02:28.810
Ici, ce n'est pas le cas.

02:28.810 --> 02:32.250
C'est ce qu'on appelle le champ d'une classe.

02:32.250 --> 02:34.680
Vous créez une classe avec des accolades également,

02:34.680 --> 02:37.110
mais ici il ne s'agit pas d'une paire clé-valeur,

02:37.110 --> 02:39.120
cela définit simplement le nom d'une

02:39.120 --> 02:41.040
clé que vous aurez dans l'objet que

02:41.040 --> 02:43.530
vous créerez sur la base de la classe et vous

02:43.530 --> 02:48.530
définissez le type de valeur que cette clé contiendra à la fin.

02:48.550 --> 02:52.363
Vous pouvez également définir une valeur initiale avec le paramètre = 'DEFAULT',

02:53.840 --> 02:55.920
mais ce n'est pas nécessaire.

02:55.920 --> 02:59.050
Au lieu de cela, une autre chose que l'on trouve souvent

02:59.050 --> 03:03.410
dans les classes est une fonction spéciale, appelée méthode.

03:03.410 --> 03:06.780
Les fonctions dans les objets sont simplement appelées méthodes,

03:06.780 --> 03:09.410
ce qui est la méthode du constructeur.

03:09.410 --> 03:12.500
Nous pouvons l'ajouter comme ceci et c'est un mot réservé.

03:12.500 --> 03:16.170
Constructor est un mot clé réservé compris par TypeScript

03:16.170 --> 03:18.390
et par le JavaScript moderne également.

03:18.390 --> 03:22.480
Il s'agit essentiellement d'une fonction liée à cette classe

03:22.480 --> 03:25.840
et à tout objet que vous créez sur la base de la classe,

03:25.840 --> 03:29.640
qui est exécutée lorsque l'objet est créé.

03:29.640 --> 03:33.500
Cela vous permet donc d'effectuer un travail d'initialisation

03:33.500 --> 03:35.700
pour l'objet que vous construisez.

03:35.700 --> 03:38.280
Là-dedans, vous pourriez accepter un argument.

03:38.280 --> 03:41.910
Nommons-le n, qui pourrait aussi être de type string,

03:41.910 --> 03:45.620
et stockons-le dans le champ name ici. Vous pouvez aussi

03:45.620 --> 03:47.000
le faire en accédant

03:47.000 --> 03:49.050
à name avec le mot-clé this et en

03:49.050 --> 03:51.200
stockant n dans ce champ.

03:51.200 --> 03:55.200
Ce que cela fait, c'est qu'il définit la valeur du champ

03:55.200 --> 03:58.630
nom, également appelé propriété so de la propriété

03:58.630 --> 04:01.180
nom, à la valeur que vous obtenez sur

04:01.180 --> 04:04.550
n quand un objet département est créé.

04:04.550 --> 04:07.030
Maintenant, comment pouvons-nous créer un tel objet de département ?

04:07.030 --> 04:08.890
Rien de plus facile que ça.

04:08.890 --> 04:13.110
En dehors de la classe que vous avez créée en utilisant le mot-clé new

04:13.110 --> 04:16.200
qui est également intégré à TypeScript et JavaScript,

04:16.200 --> 04:18.410
vous répétez le nom de la classe, puis

04:18.410 --> 04:20.160
vous ajoutez des parenthèses

04:20.160 --> 04:22.440
et cela crée un nouvel objet département,

04:22.440 --> 04:26.240
mais le constructeur est appelé à ce moment-là lorsque vous exécutez

04:26.240 --> 04:29.620
cette classe comme ceci avec le mot-clé new et le constructeur

04:29.620 --> 04:33.440
prend un argument, une chaîne.

04:33.440 --> 04:35.600
Maintenant, vous passez les arguments

04:35.600 --> 04:39.800
du constructeur à cet appel de département ici, donc entre ces parenthèses.

04:39.800 --> 04:41.640
Nous pourrions donc l'appeler "Comptabilité",

04:41.640 --> 04:44.730
car nous construisons peut-être le département de la comptabilité ici.

04:44.730 --> 04:46.100
Cela va maintenant créer

04:46.100 --> 04:49.800
un nouvel objet JavaScript basé sur ce modèle.

04:49.800 --> 04:53.910
Donc maintenant nous pouvons stocker ceci dans une constante par exemple et

04:53.910 --> 04:58.010
ensuite dans la console. log. la comptabilité ici pour voir ce que nous obtenons.

04:58.010 --> 04:59.620
Si nous l'enregistrons, puis

04:59.620 --> 05:02.020
retournons à notre page et jetons un coup d'œil

05:02.020 --> 05:03.780
à la console de développement dans

05:03.780 --> 05:05.660
les outils de défense, nous devrions

05:05.660 --> 05:07.930
voir notre objet Département.

05:07.930 --> 05:10.000
Il s'agit d'un objet JavaScript

05:10.000 --> 05:13.770
ordinaire, auquel est attaché ce type de département, et qui,

05:13.770 --> 05:15.290
au final, est un objet avec

05:15.290 --> 05:18.140
une paire clé-valeur, où la clé est le nom, car

05:18.140 --> 05:20.270
c'est ce que nous avons défini ici,

05:20.270 --> 05:23.110
et la valeur est la comptabilité.

05:23.110 --> 05:25.530
Nous avons cette valeur de comptabilité

05:25.530 --> 05:27.460
ici parce que nous la passons comme

05:27.460 --> 05:29.560
argument au constructeur.

05:29.560 --> 05:31.770
Nous acceptons une telle chaîne de

05:31.770 --> 05:34.830
caractères, nous restaurons la valeur dans ce champ

05:34.830 --> 05:38.400
et les champs sont finalement juste traduits en propriétés,

05:38.400 --> 05:41.890
l'objet basé sur la classe aura ensuite.

05:41.890 --> 05:44.480
Voici donc comment nous pouvons créer une classe

05:44.480 --> 05:46.570
simple et quelle est l'idée générale.

05:46.570 --> 05:50.143
Voyons maintenant ce que nous obtenons réellement en JavaScript.
