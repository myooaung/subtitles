WEBVTT

1
00:00:02.230 --> 00:00:04.860
<v Instructor>Loosely related to the idea of a Tuple</v>

2
00:00:04.860 --> 00:00:09.760
is the idea of having a couple of specific identifiers,

3
00:00:09.760 --> 00:00:12.710
global constants you might be working with in your app,

4
00:00:12.710 --> 00:00:15.020
which you want to represent as numbers,

5
00:00:15.020 --> 00:00:18.530
but to which you want to assign a human readable label.

6
00:00:18.530 --> 00:00:20.500
And for that, you have the Enum type.

7
00:00:20.500 --> 00:00:23.800
Again, that does exist in some upper programming languages.

8
00:00:23.800 --> 00:00:25.780
JavaScript doesn't know it though.

9
00:00:25.780 --> 00:00:26.613
It looks like this.

10
00:00:26.613 --> 00:00:28.110
This is how you create a enum.

11
00:00:28.110 --> 00:00:30.540
You use the enum keyword, which only exists

12
00:00:30.540 --> 00:00:33.060
in TypeScript world, not in JavaScript,

13
00:00:33.060 --> 00:00:34.840
there after you have curly braces,

14
00:00:34.840 --> 00:00:36.810
and then your identifiers.

15
00:00:36.810 --> 00:00:39.141
And this type, which is added by TypeScript

16
00:00:39.141 --> 00:00:42.030
gives you an enumerated list.

17
00:00:42.030 --> 00:00:45.070
So these labels are in the end, just translated to numbers

18
00:00:45.070 --> 00:00:48.580
starting at zero, where you have human readable labels

19
00:00:48.580 --> 00:00:50.133
you can work with in your code.

20
00:00:51.310 --> 00:00:53.500
To show you an example, let's go back here

21
00:00:53.500 --> 00:00:55.620
to our person with its role.

22
00:00:55.620 --> 00:00:58.010
I'll copy that code and then comment it out

23
00:00:58.010 --> 00:00:59.710
because I'm going to change it a bit.

24
00:00:59.710 --> 00:01:01.600
And then here, I'll get rid of that

25
00:01:01.600 --> 00:01:05.380
explicit type assignment and instead go back to inference,

26
00:01:05.380 --> 00:01:07.150
because I'll now change role.

27
00:01:07.150 --> 00:01:10.330
And now let's say we want to have a admin, an author

28
00:01:10.330 --> 00:01:12.350
and maybe a read only user.

29
00:01:12.350 --> 00:01:14.750
The admin should have an ID of zero,

30
00:01:14.750 --> 00:01:18.660
read only user has one, author has two.

31
00:01:18.660 --> 00:01:21.160
Now of course, we can store that exactly like this

32
00:01:21.160 --> 00:01:22.550
with these numbers.

33
00:01:22.550 --> 00:01:24.830
One downside is that we can always add a number

34
00:01:24.830 --> 00:01:26.670
for which we might not have a role

35
00:01:26.670 --> 00:01:30.320
and if we then later in our code, try to extract the role

36
00:01:30.320 --> 00:01:33.392
and using the if check does might lead to errors.

37
00:01:33.392 --> 00:01:37.160
And in addition, we, as a developer have a hard time

38
00:01:37.160 --> 00:01:39.690
to understand which role this user has.

39
00:01:39.690 --> 00:01:41.310
Was it to the author?

40
00:01:41.310 --> 00:01:43.020
Or was it the read on the user?

41
00:01:43.020 --> 00:01:46.140
You might forget this after making longer pauses,

42
00:01:46.140 --> 00:01:48.810
when working in bigger teams, and so on.

43
00:01:48.810 --> 00:01:50.540
So as a developer, you might want

44
00:01:50.540 --> 00:01:54.310
human readable identifiers, something like ADMIN,

45
00:01:54.310 --> 00:01:58.630
and READ ONLY USER, something like that.

46
00:01:58.630 --> 00:02:00.240
Now, of course, we could use that,

47
00:02:00.240 --> 00:02:02.880
we could work with such string values.

48
00:02:02.880 --> 00:02:06.100
The problem is if we then later needed an if check,

49
00:02:06.100 --> 00:02:11.100
we check if person role is equal to, was it READ_ONLY_USER?

50
00:02:12.260 --> 00:02:13.500
Or was it one word?

51
00:02:13.500 --> 00:02:15.380
Was it with underscores?

52
00:02:15.380 --> 00:02:17.440
You see, then we have to remember

53
00:02:17.440 --> 00:02:19.020
how we wrote these strings,

54
00:02:19.020 --> 00:02:20.970
which exact text we have in there.

55
00:02:20.970 --> 00:02:24.330
Because this string with the dashes between the words

56
00:02:24.330 --> 00:02:27.430
is of course, not the same as this string.

57
00:02:27.430 --> 00:02:29.973
So here, we would never make it in there,

58
00:02:31.150 --> 00:02:36.120
is read only if you try to compile and print that,

59
00:02:36.120 --> 00:02:39.170
because, well, the check simply doesn't yield true.

60
00:02:39.170 --> 00:02:42.150
We don't have that as a role on person, hence, we don't get

61
00:02:42.150 --> 00:02:43.930
the output here in the console.

62
00:02:43.930 --> 00:02:47.290
So string identifiers, also have downsides.

63
00:02:47.290 --> 00:02:50.340
Now for such scenarios, it's quite common in JavaScript

64
00:02:50.340 --> 00:02:52.340
to define global constants.

65
00:02:52.340 --> 00:02:55.580
For example, admin, which then hold certain values

66
00:02:55.580 --> 00:02:58.053
like numbers or strings,

67
00:02:58.980 --> 00:03:00.060
both as possible.

68
00:03:00.060 --> 00:03:01.700
Numbers, of course can save us

69
00:03:01.700 --> 00:03:04.370
some extra code and bits in memory.

70
00:03:04.370 --> 00:03:09.370
And there we might have ADMIN, READ_ONLY and AUTHOR

71
00:03:09.390 --> 00:03:10.870
like this and down there,

72
00:03:10.870 --> 00:03:13.750
we then just have to use that role.

73
00:03:13.750 --> 00:03:16.460
Now the advantage of that is that we can use this everywhere

74
00:03:16.460 --> 00:03:17.343
in our code.

75
00:03:18.230 --> 00:03:22.600
And therefore here for example, if I run this code,

76
00:03:22.600 --> 00:03:23.680
if I compile it

77
00:03:25.260 --> 00:03:28.570
and then we let this reload, we see as admin here,

78
00:03:28.570 --> 00:03:31.520
so this works and this is a common pattern in JavaScript.

79
00:03:31.520 --> 00:03:34.190
Downside is that now again, role is inferred

80
00:03:34.190 --> 00:03:37.290
to be just a number, so we could store any number in there

81
00:03:37.290 --> 00:03:39.630
even a number which we don't support.

82
00:03:39.630 --> 00:03:42.450
And in addition, we have to define all these constants,

83
00:03:42.450 --> 00:03:44.060
we have to manage them.

84
00:03:44.060 --> 00:03:45.920
This is where a enum can save us work.

85
00:03:45.920 --> 00:03:48.730
This is totally fine, but a enum makes it easier.

86
00:03:48.730 --> 00:03:50.970
We create a enum with the enum keyword,

87
00:03:50.970 --> 00:03:54.250
we can name it Role, convention is to start

88
00:03:54.250 --> 00:03:55.550
with the uppercase character

89
00:03:55.550 --> 00:03:58.620
because the enum also is a custom type.

90
00:03:58.620 --> 00:04:01.760
It's your first custom type, we're going to write many more

91
00:04:01.760 --> 00:04:03.860
in this course, this is the first one.

92
00:04:03.860 --> 00:04:06.560
And then after the name of the type you want to assign

93
00:04:06.560 --> 00:04:09.520
to this enum, you add curly braces, just like that,

94
00:04:09.520 --> 00:04:14.040
no colon, no equal sign, just curly braces after the name.

95
00:04:14.040 --> 00:04:15.800
Then a semicolon.

96
00:04:15.800 --> 00:04:19.433
And now in here, you can assign your values like admin,

97
00:04:20.650 --> 00:04:21.973
read only,

98
00:04:22.950 --> 00:04:24.300
and author.

99
00:04:24.300 --> 00:04:28.180
And behind the scenes this here receives the number zero,

100
00:04:28.180 --> 00:04:31.780
this here number one, this here number two.

101
00:04:31.780 --> 00:04:34.650
And then here, you can access Role.ADMIN,

102
00:04:34.650 --> 00:04:37.840
like on an object, you access your identifier.

103
00:04:37.840 --> 00:04:40.380
And you can use that anywhere else in your code as well,

104
00:04:40.380 --> 00:04:43.890
here we can check if the role is AUTHOR,

105
00:04:43.890 --> 00:04:46.710
and then print author and of course, we shouldn't see that

106
00:04:46.710 --> 00:04:50.630
if I run that now because we assigned a role of ADMIN here.

107
00:04:50.630 --> 00:04:53.333
But the key takeaway is that we did all of that

108
00:04:53.333 --> 00:04:57.490
with the help of the enum, which assigns labels to numbers.

109
00:04:57.490 --> 00:04:59.210
If we have a look at that in JavaScript.

110
00:04:59.210 --> 00:05:02.830
So in the compiled code, we see this is how it's rebuilt.

111
00:05:02.830 --> 00:05:05.080
In the end, it's rebuilt with an if here.

112
00:05:05.080 --> 00:05:07.940
So function which executes itself.

113
00:05:07.940 --> 00:05:11.770
And Role here simply is managed as an object in the end,

114
00:05:11.770 --> 00:05:14.550
which has admin property a read only property

115
00:05:14.550 --> 00:05:17.330
and AUTHOR property, where we then store

116
00:05:17.330 --> 00:05:19.970
our number values here, you could say.

117
00:05:19.970 --> 00:05:21.960
So it's a bit more complex than that, but that's what

118
00:05:21.960 --> 00:05:24.210
TypeScript in the end does here to replicate

119
00:05:24.210 --> 00:05:26.700
this enum construct in JavaScript code,

120
00:05:26.700 --> 00:05:28.560
when it compiles the code.

121
00:05:28.560 --> 00:05:30.700
Here as a developer, we simply have

122
00:05:30.700 --> 00:05:32.680
these conveniently created numbers.

123
00:05:32.680 --> 00:05:34.290
If you hover over them, you'll see the number

124
00:05:34.290 --> 00:05:36.520
which we'll store it in there and you can use

125
00:05:36.520 --> 00:05:39.883
these numbers here in a human readable way.

126
00:05:40.750 --> 00:05:42.840
Now for enums, you're also not restricted

127
00:05:42.840 --> 00:05:44.790
to the default behavior.

128
00:05:44.790 --> 00:05:47.470
Let's say for some reason, you don't want to start with zero

129
00:05:47.470 --> 00:05:50.533
as a starting number, then you can add an equal sign here

130
00:05:50.533 --> 00:05:54.080
after your identifier and enter any other number

131
00:05:54.080 --> 00:05:56.610
and now admin is assigned to the number five

132
00:05:56.610 --> 00:05:59.610
and the other identifiers after the identifier

133
00:05:59.610 --> 00:06:02.150
where you assign the value, pick up on that,

134
00:06:02.150 --> 00:06:04.580
and simply increment this starting value.

135
00:06:04.580 --> 00:06:08.140
So now we have fine, six, seven, instead of zero, one, two.

136
00:06:08.140 --> 00:06:10.642
You of course, also can assign your own values

137
00:06:10.642 --> 00:06:14.820
to all these identifiers, if you need your own numbers.

138
00:06:14.820 --> 00:06:17.070
You're also not restricted to numbers,

139
00:06:17.070 --> 00:06:19.390
you can also go with text here, or even mix it

140
00:06:19.390 --> 00:06:21.950
like I'm doing it here, anything goes there,

141
00:06:21.950 --> 00:06:24.900
but often the default of incrementing numbers

142
00:06:24.900 --> 00:06:28.530
that start at zero is what you want, but if you need

143
00:06:28.530 --> 00:06:31.530
a different behavior, if you want to use a string in here,

144
00:06:31.530 --> 00:06:34.850
and then a number here, and here a number as well

145
00:06:34.850 --> 00:06:37.890
or maybe a number string, then you can absolutely

146
00:06:37.890 --> 00:06:40.880
do that, the advantage is, you define it up there,

147
00:06:40.880 --> 00:06:44.700
and then thereafter, you always just refer to your Role type

148
00:06:44.700 --> 00:06:46.400
to this custom type you created,

149
00:06:46.400 --> 00:06:48.270
to this custom enum you created.

150
00:06:48.270 --> 00:06:50.320
And you use that in your if checks

151
00:06:50.320 --> 00:06:52.970
and your type assignments, and you're good.

152
00:06:52.970 --> 00:06:56.090
That's the power of the enum and it's a great construct

153
00:06:56.090 --> 00:06:59.420
whenever you need identifiers that are human readable

154
00:06:59.420 --> 00:07:03.173
and have some mapped value behind the scenes.

