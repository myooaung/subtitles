WEBVTT

00:02.160 --> 00:04.930
مدرس: هذا هو نفس المثال بشكل أساسي

00:04.930 --> 00:06.440
في مشروع حقيقي.

00:06.440 --> 00:08.550
ستجد هذا المشروع البسيط ، ملف

00:08.550 --> 00:11.270
فهرس HTML وملف JavaScript هذا ، مرفقًا

00:11.270 --> 00:13.340
بهذا الفيديو في ملف فرعي.

00:13.340 --> 00:16.900
يمكنك ببساطة فتح هذا ثم فتح ملف فهرس HTML.

00:16.900 --> 00:18.610
يمكنك أيضًا فتح الكود

00:18.610 --> 00:20.890
في أي محرر نصوص تختاره.

00:20.890 --> 00:22.160
أنا هنا أستخدم VisualStudioCode

00:22.160 --> 00:25.000
، وسأعود إلى الإعداد الدقيق الخاص بي لاحقًا في هذه

00:25.000 --> 00:26.250
الوحدة.

00:26.250 --> 00:29.250
في الوقت الحالي ، يمكنك فقط فتح هذين الملفين النصيين

00:29.250 --> 00:31.180
باستخدام أي محرر نصوص.

00:31.180 --> 00:34.110
الآن ما ستجده هناك هو ملف JavaScript هذا

00:34.110 --> 00:37.000
، والذي يتفاعل مع ملف فهرس HTML هذا.

00:37.000 --> 00:38.830
ثم ملف فهرس HTML هذا ، ستجد

00:38.830 --> 00:41.050
مدخلين والزر وأي ملف JavaScript

00:41.050 --> 00:43.698
يتم استيراده هنا.

00:43.698 --> 00:45.843
نحن نتواصل بشكل أساسي مع هذه العناصر.

00:45.843 --> 00:47.968
ثم لدينا وظيفة هنا ومستمع حدث

00:47.968 --> 00:50.020
على الزر الذي يقوم بتشغيل الوظيفة

00:50.020 --> 00:53.830
ويسجل نتيجة الوظيفة هنا في وحدة التحكم.

00:53.830 --> 00:56.750
الآن ، إذا فتحنا ملف فهرس HTML هذا ،

00:56.750 --> 01:00.701
بالنقر المزدوج عليه في Windows Explorer أو Mac

01:00.701 --> 01:03.220
Finder حتى يتم فتحه في المتصفح

01:03.220 --> 01:05.150
، ما ستراه هو هذا.

01:05.150 --> 01:07.250
المدخلان وزر الإضافة

01:07.250 --> 01:11.170
وهنا فتحت أدوات مطور المتصفح أيضًا.

01:11.170 --> 01:13.760
الآن إذا أدخلت 10 و 5 هنا على سبيل المثال

01:13.760 --> 01:16.640
، فقد تتوقع رؤية 15 كنتيجة هنا على اليمين

01:16.640 --> 01:19.420
ولكن بدلاً من ذلك سترى 105.

01:19.420 --> 01:23.460
وهذا يوضح لنا ضعف جافا سكريبت هنا.

01:23.460 --> 01:25.890
هذا ليس خطأ تقني.

01:25.890 --> 01:28.050
إنه ليس خطأ يتم طرحه

01:28.050 --> 01:31.640
، ولكنه خطأ منطقي في تطبيقنا.

01:31.640 --> 01:33.986
الآن من أين يأتي هذا الخطأ؟

01:33.986 --> 01:37.490
حسنًا هنا في JavaScript ، وصلت إلى هذين المدخلين

01:37.490 --> 01:39.612
وعندما يتم النقر فوق الزر ، أحصل

01:39.612 --> 01:41.920
في النهاية على قيم عنصري الإدخال

01:41.920 --> 01:45.300
وأقوم بتمريرهما هنا لإضافتهما.

01:45.300 --> 01:46.970
وهنا من المهم أن تعرف

01:46.970 --> 01:50.100
أنه في JavaScript عندما تصل إلى قيمة عنصر

01:50.100 --> 01:53.130
الإدخال ، فإنها دائمًا سلسلة.

01:53.130 --> 01:55.790
دائمًا ، بغض النظر عن نوع الإدخال هذا.

01:55.790 --> 01:59.633
إذا كان هذا من النوع رقم أم لا ، فهو دائمًا سلسلة.

02:00.645 --> 02:03.995
لذا فأنا أمرر سلسلتين إلى هذه الوظيفة في النهاية

02:03.995 --> 02:05.890
، وإذا أضفت سلسلتين في JavaScript

02:05.890 --> 02:09.570
، فسيتم تجميعهما بدلاً من إضافتهما رياضيًا.

02:09.570 --> 02:14.210
لهذا السبب نرى 105 و 10 وخمسة متسلسلة.

02:14.210 --> 02:17.090
هذه هي مشكلة JavaScript هنا.

02:17.090 --> 02:19.980
وهذا شيء يمكن أن يساعدنا فيه TypeScript.

02:19.980 --> 02:22.360
الآن بدون TypeScript ، يمكننا بالطبع

02:22.360 --> 02:24.380
إضافة علامة if هنا والتحقق

02:24.380 --> 02:28.048
مما إذا كان نوع الرقم واحد يساوي عددًا.

02:28.048 --> 02:33.048
وإذا كان نوع العدد اثنين يساوي عددًا ، وإذا كانت هذه

02:34.030 --> 02:37.390
هي الحالة ، فسأعيد حسابي بهذا الشكل

02:37.390 --> 02:40.588
، وإلا فقد أخطأ أو أقوم بتحويل كليهما

02:40.588 --> 02:43.304
إلى أرقام عن طريق إضافة علامة

02:43.304 --> 02:47.428
زائد أمام كل معلمة هنا .

02:47.428 --> 02:50.510
الآن هذا بعض الكود يمكننا كتابته.

02:50.510 --> 02:53.023
ربما يكون أكثر دقة من ذلك في JavaScript.

02:53.023 --> 02:57.130
وبهذا نتأكد من أننا نقوم بتحويل الأرقام أو المدخلات

02:57.130 --> 03:00.670
إلى أرقام إذا لم تكن أرقامًا بعد.

03:00.670 --> 03:02.430
وبهذا ، إذا أعدت تحميل

03:02.430 --> 03:05.220
هذا وكررت هذا ، فسنحصل الآن على

03:05.220 --> 03:07.590
15 بسبب تغيير الكود.

03:07.590 --> 03:09.350
لذلك بالطبع يمكننا القيام بذلك في JavaScript.

03:09.350 --> 03:10.970
وهذا هو الفانيليا جافا

03:10.970 --> 03:13.440
سكريبت ، لا شيء من نوع TypeScript.

03:13.440 --> 03:16.640
لكننا كتبنا بعض التعليمات البرمجية الإضافية لخطأ

03:16.640 --> 03:19.048
أود بالفعل منعه في المقام الأول.

03:19.048 --> 03:22.210
لا أريد أن يحدث هذا.

03:22.210 --> 03:26.260
أريد أن أتأكد من أنه لا يمكننا حتى تمرير السلاسل هنا لإضافتها

03:26.260 --> 03:28.930
لأن الإضافة يجب أن تكون دالة تعمل فقط على

03:29.890 --> 03:31.020
الأرقام.

03:31.020 --> 03:32.570
حتى لا نحتاج إلى التحقق

03:33.428 --> 03:35.650
مما إذا كنا نحصل على رقم أم لا.

03:35.650 --> 03:37.000
لذلك أريد أن أبقي هذه الوظيفة في

03:37.000 --> 03:38.500
الحالة التي كانت عليها من قبل.

03:38.500 --> 03:41.630
أريد هذه الوظيفة هنا ، تمامًا مثل هذا.

03:41.630 --> 03:44.003
وهذا هو المكان الذي يمكن أن تساعدنا فيه TypeScript.

03:45.088 --> 03:45.921
لذلك يمكن أن تساعدنا

03:45.921 --> 03:48.900
TypeScript في مثل هذه المواقف التي عرضتها للتو.

03:48.900 --> 03:52.690
الآن لنرى كيف يساعدنا ، دعنا نثبته.

03:52.690 --> 03:56.590
حتى على الكتابة المطبوعة. org ، يمكنك النقر فوق تنزيل.

03:56.590 --> 03:58.540
وهناك ستتعلم كيفية تثبيته.

03:58.540 --> 04:00.250
وسنقوم بالفعل بتثبيته

04:01.136 --> 04:02.880
باستخدام هذا الأمر الذي

04:02.880 --> 04:06.750
يستخدم أداة NPM وأداة NPM هي جزء من حزمة Node JS.

04:06.750 --> 04:10.210
لذلك على الرغم من أننا لن نكتب كود Node JS هنا ، ما زلنا

04:10.210 --> 04:12.910
بحاجة إلى تثبيت Node JS ببساطة لأنه خلف

04:12.910 --> 04:14.760
الكواليس سيتم استخدامه أيضًا

04:14.760 --> 04:17.770
بواسطة بعض الأدوات التي نستخدمها.

04:17.770 --> 04:21.780
وعندما نقوم بتثبيت Node JS ، نقوم أيضًا بتثبيت NPM ، Node

04:21.780 --> 04:24.956
Package Manager ، وهي أداة يمكننا استخدامها

04:24.956 --> 04:29.200
بعد ذلك لتثبيت TypeScript عالميًا على أجهزتنا.

04:29.200 --> 04:31.452
لذلك ببساطة قم بزيارة nodejs. org وهناك ، قم

04:31.452 --> 04:34.220
بتثبيت أحدث إصدار تجده هنا.

04:34.220 --> 04:35.723
ببساطة اضغط على هذا الزر.

04:36.586 --> 04:38.276
سيتم بعد ذلك تنزيله وتثبيته أو يمكنك

04:38.276 --> 04:39.420
استعراض هذا المثبت.

04:39.420 --> 04:42.360
إنه مدعوم لجميع أنظمة التشغيل.

04:42.360 --> 04:45.300
وبمجرد تثبيت Node JS ، ستتمكن

04:45.300 --> 04:47.936
من تشغيل هذا الأمر.

04:47.936 --> 04:51.440
ما عليك سوى فتح الجهاز العادي أو موجه

04:51.440 --> 04:54.800
الأوامر ثم نسخه في هذا الأمر.

04:54.800 --> 04:57.223
هام ، في نظامي Mac و Linux ، قد تحتاج إلى إضافة sudo

04:57.223 --> 04:59.412
أمام هذا للحصول على الأذونات الصحيحة.

04:59.412 --> 05:02.810
في Windows ، لن يكون هذا مطلوبًا.

05:02.810 --> 05:05.100
لذلك تأكد من تثبيت TypeScript

05:05.100 --> 05:06.810
باستخدام هذا الأمر.

05:06.810 --> 05:09.372
أدخل كلمة المرور الخاصة بك في حالة مطالبتك بها.

05:09.372 --> 05:12.176
وبهذا ، تم تثبيت TypeScript عالميًا

05:12.176 --> 05:15.430
على جهازك ، فماذا يعني هذا الآن؟

05:15.430 --> 05:17.696
تم تثبيت TypeScript.

05:17.696 --> 05:20.810
تذكر الآن أن TypeScript هي لغة برمجة ، لكنها

05:20.810 --> 05:22.750
لغة برمجة تعمل فقط لأن لدينا

05:22.750 --> 05:25.212
أيضًا هذا المجمع ، هذه الأداة التي

05:25.212 --> 05:28.137
يتم تجميعها في JavaScript.

05:28.137 --> 05:31.310
لذلك في النهاية ، ما قمنا بتثبيته هنا

05:31.310 --> 05:33.296
، هو المترجم وكل ما يحتاج

05:33.296 --> 05:36.116
إلى معرفته لفهم كود TypeScript

05:36.116 --> 05:39.020
لتحويله إلى JavaScript.

05:39.020 --> 05:41.036
مع هذا ، لدينا برنامج التحويل

05:41.036 --> 05:44.460
البرمجي مثبتًا ويمكننا تشغيل أمر TSC الآن

05:44.460 --> 05:47.210
الذي يستدعي مترجم TypeScript هذا

05:47.210 --> 05:50.870
لتجميع ملف TypeScript إلى JavaScript.

05:50.870 --> 05:54.140
لرؤية هذا في هذا المشروع الذي عملنا عليه ، دعنا ببساطة نضيف ملفًا

05:54.140 --> 05:56.563
جديدًا باستخدام ts. ts على سبيل المثال.

05:56.563 --> 05:58.677
أي اسم تريده ولكن الامتداد يجب أن يكون. ts والتي

05:58.677 --> 06:03.677
تعني TypeScript.

06:05.100 --> 06:07.651
الآن ، دعنا ننسخ كود JavaScript

06:07.651 --> 06:09.850
في ملف TypeScript.

06:09.850 --> 06:13.100
هنا في VisualStudioCode ، أحصل على الفور على بعض الأخطاء

06:13.100 --> 06:14.280
التي سنصلحها الآن.

06:14.280 --> 06:16.379
وهذه ميزة رائعة لـ TypeScript.

06:16.379 --> 06:18.915
إذا كنت تستخدم IDE الصحيح ، وتوصيتي

06:18.915 --> 06:22.710
القوية حقًا هي VisualStudioCode ، وسأعود إلى

06:22.710 --> 06:24.420
ذلك لاحقًا.

06:24.420 --> 06:27.810
ثم تحصل بالفعل على دعم كبير في IDE عند العمل

06:27.810 --> 06:30.230
داخل ملفات TypeScript.

06:30.230 --> 06:34.710
هنا ، بالفعل ، يسمح لـ TypeScript أساسًا بتحليل الكود الخاص

06:34.710 --> 06:36.910
بي وتحديد بعض نقاط الضعف.

06:36.910 --> 06:39.720
وهو أمر رائع ، لأن هذا بالضبط ما أريده.

06:39.720 --> 06:42.110
لذا هنا في هذا المثال ، اسمحوا لي أن أحذف

06:42.110 --> 06:44.003
ملف JavaScript فقط JS.

06:45.952 --> 06:48.360
ومع ذلك ، اختفت بعض الأخطاء لأنها

06:48.360 --> 06:50.539
حددت استخدام بعض الثوابت وما

06:50.539 --> 06:53.230
إلى ذلك في ملفات متعددة.

06:53.230 --> 06:55.787
لكنه لا يزال يعطيني خطأ هناك.

06:55.787 --> 06:57.700
وما تراه ، على سبيل المثال ، هو أنه ليس متأكدًا

06:57.700 --> 07:00.108
مما إذا كانت هناك بالفعل خاصية ذات قيمة.

07:00.108 --> 07:03.200
الآن هذا خطأ لم أفكر فيه من قبل في

07:03.200 --> 07:05.720
JavaScript ، لكنه صحيح.

07:05.720 --> 07:08.350
أنا أحدد عنصرًا بالمعرف هنا.

07:08.350 --> 07:11.680
الآن لا يمكن لـ TypeScript معرفة ما إذا كان هذا سيعمل حقًا.

07:11.680 --> 07:13.160
ربما لدي خطأ مطبعي هنا.

07:13.160 --> 07:15.940
في هذه الحالة ، لن أتمكن من تحديد عنصر.

07:15.940 --> 07:17.704
هذا العنصر ببساطة لن يكون موجودًا على الصفحة.

07:17.704 --> 07:20.164
لذلك قد يكون لدينا خطأ إملائي ولا يقوم TypeScript بتحليل

07:20.164 --> 07:22.472
كود HTML الخاص بك لمعرفة ما إذا كان هذا يعمل.

07:22.472 --> 07:24.468
لذلك من ناحية ، قد يفشل هذا.

07:24.468 --> 07:28.740
ولكن حتى إذا نجحت وقمنا بتحديد عنصر هناك ، فلا يجب

07:28.740 --> 07:30.910
أن يكون عنصر إدخال.

07:30.910 --> 07:34.720
يمكن أن يكون أي عنصر آخر ومعظم عناصر HTML ليس لها

07:34.720 --> 07:37.450
خاصية قيمة يمكنك الوصول إليها.

07:37.450 --> 07:38.630
وهذا بالفعل رائع.

07:38.630 --> 07:41.372
يُجبرنا TypeScript على أن نكون أكثر وضوحًا

07:41.372 --> 07:44.060
، وأن نكون أكثر وضوحًا بشأن نوايانا وأن

07:44.060 --> 07:46.130
نتحقق مرة أخرى من الكود.

07:46.130 --> 07:48.100
وعلى سبيل المثال هنا ، ولست بحاجة

07:48.100 --> 07:49.820
إلى فهم كل هذه البنية.

07:49.820 --> 07:52.172
سوف نتعلمها خطوة بخطوة خلال الدورة.

07:52.172 --> 07:55.660
ولكن على سبيل المثال هنا يمكننا السماح لـ TypeScript بمعرفة

07:55.660 --> 07:58.204
أننا على يقين من أننا سنحصل على عنصر عن طريق

07:58.204 --> 08:00.080
إضافة علامة تعجب.

08:00.080 --> 08:04.170
هذا يخبر TypeScript أساسًا أن هذا لن ينتج عنه قيمة خالية أبدًا.

08:04.170 --> 08:06.370
سيجد هذا دائمًا عنصرًا.

08:06.370 --> 08:08.420
وبصفتي مطورًا ، فأنا أعلم بالطبع

08:08.420 --> 08:10.350
أن هذا سيجد دائمًا عنصرًا لأنني

08:10.350 --> 08:11.920
تحققت من المعرف مرتين

08:11.920 --> 08:14.763
وأرى نعم ، لدي هذا المعرف هنا.

08:15.610 --> 08:17.270
الآن بالإضافة إلى ذلك ، أعلم

08:17.270 --> 08:19.500
أيضًا أنه سيكون دائمًا عنصر إدخال.

08:19.500 --> 08:22.408
لذلك يمكننا استخدام عنصر إدخال HTML ، بناء جملة

08:22.408 --> 08:25.470
يسمى typecasting والذي سأشرح أيضًا بمزيد من التفصيل

08:25.470 --> 08:27.746
لاحقًا ، للسماح لـ TypeScript بمعرفة

08:27.746 --> 08:30.327
نوع العنصر الذي سيكون.

08:30.327 --> 08:32.926
يمكننا تطبيق هذا على العنصر الثاني أيضًا.

08:32.926 --> 08:35.650
حتى أكون واضحًا حقًا هنا ، هذا هو بناء

08:35.650 --> 08:37.510
جملة TypeScript.

08:37.510 --> 08:39.520
يمكنني استخدام علامة التعجب هذه

08:39.520 --> 08:41.600
هنا ويمكنني استخدام هذا التلبيس

08:41.600 --> 08:44.786
هنا لأننا في ملف. ts ، فنحن في ملف TypeScript.

08:44.786 --> 08:48.380
سنقوم بترجمة هذا إلى JavaScript.

08:48.380 --> 08:51.050
هذا لن يعمل في الفانيليا جافا سكريبت.

08:51.050 --> 08:53.427
هذا غير متوفر هناك.

08:53.427 --> 08:56.300
مع هذا ، نحن مجبرون على أن نكون أكثر وضوحًا بشأن نوايانا

08:56.300 --> 08:58.460
والتفكير حقًا في الكود الخاص بنا والتحقق

08:58.460 --> 09:01.060
منه مرة أخرى ، وهو أمر رائع.

09:01.060 --> 09:03.160
لكن هذه ليست أكبر ميزة.

09:04.270 --> 09:06.820
أكبر ميزة هي إضافة الأنواع.

09:06.820 --> 09:09.630
هذا ما يعطي TypeScript اسمه ، بعد كل شيء.

09:09.630 --> 09:12.282
وهنا لا أقول أي شيء عن أنواع البيانات التي

09:12.282 --> 09:14.204
تعمل عليها هذه الوظيفة.

09:14.204 --> 09:17.886
إذا قمنا بالتمرير فوق أحد هذه المعلمات ،

09:17.886 --> 09:20.126
فإننا نرى هذا أي شيء هنا.

09:20.126 --> 09:22.828
وفي النهاية ، هذا ما يقوله لنا تيب سكريبت

09:22.828 --> 09:24.880
، "لا أعرف ماذا يوجد هناك. يمكن أن يكون أي نوع من القيمة.

09:24.880 --> 09:27.162
يمكننا الآن إضافة نوع أكثر وضوحًا في ملفات TypeScript.

09:27.162 --> 09:31.960
لذلك ليس في ملفات JavaScript ولكن في ملفات TypeScript ، عن طريق إضافة نقطتين

09:31.960 --> 09:33.806
هنا ثم تحديد النوع.

09:33.806 --> 09:38.580
على سبيل المثال ، الرقم.

09:38.580 --> 09:40.730
افعل هذا هنا وافعل هذا هنا

09:40.730 --> 09:43.300
باستخدام هذا التركيب الإضافي الذي يستخدمه

09:43.300 --> 09:45.246
TypeScript ، والذي يفهمه هذا المترجم

09:45.246 --> 09:47.928
، فإننا نخبر TypeScript أن هذا سيكون من النوع

09:47.928 --> 09:50.960
رقم وسيكون من النوع number.

09:50.960 --> 09:54.010
وبالتالي الآن حصلنا على خطأ هنا مرة أخرى.

09:54.010 --> 09:56.126
وبالمناسبة ، لا نحصل فقط

09:56.126 --> 09:58.060
على هذا الخطأ في IDE.

09:58.060 --> 09:59.370
نحصل عليه أيضًا إذا حاولنا

09:59.370 --> 10:01.940
تجميع هذا الرمز لأن هذا في النهاية ما نحتاج

10:01.940 --> 10:03.820
إلى القيام به ، أليس كذلك؟

10:03.820 --> 10:05.326
الآن لتجميع هذا ، سأفتح Terminal.

10:05.326 --> 10:08.670
وهنا أقوم فقط بفتح المحطة الطرفية أو موجه الأوامر

10:08.670 --> 10:10.760
المدمج في IDE هذا.

10:10.760 --> 10:13.683
إنه موجه أوامر النظام العادي.

10:14.947 --> 10:16.530
محطة أوامر النظام العادية التي

10:16.530 --> 10:18.110
كنت أستخدمها هنا أيضًا ، انتقلت

10:18.110 --> 10:19.533
بالفعل إلى هذا المجلد.

10:20.510 --> 10:22.446
لذلك إذا كنت لا تستخدم

10:22.446 --> 10:27.420
بعض طرفية IDE المضمنة ، فيمكنك استخدام جهازك العادي ولكن

10:27.420 --> 10:30.265
القرص المضغوط انتقل إلى مجلد البداية

10:30.265 --> 10:33.960
المستخرج حيث أضفت ملف TypeScript.

10:33.960 --> 10:36.300
وبمجرد أن تكون في هذا المجلد ، يمكنك تشغيل TSC.

10:36.300 --> 10:38.888
سيؤدي ذلك إلى استدعاء برنامج التحويل البرمجي

10:38.888 --> 10:42.980
TypeScript الذي قمنا بتثبيته مسبقًا على استخدام dash ts. ts.

10:42.980 --> 10:47.980
وإذا قمت بتشغيل هذا ، فسوف تحصل بالفعل على خطأ.

10:47.990 --> 10:50.728
ستستمر في الحصول على ملف JavaScript

10:50.728 --> 10:53.267
، لأن TypeScript افتراضيًا سيستمر

10:53.267 --> 10:57.460
في تجميعه إلى JavaScript ، وستتعلم أيضًا كيفية منع ذلك لاحقًا

10:57.460 --> 11:00.050
في تلك الدورة التدريبية.

11:00.050 --> 11:02.900
لكنه يعطيك خطأ في المترجم أثناء القيام بذلك.

11:02.900 --> 11:05.904
يخبرك أن وسيطة نوع السلسلة غير قابلة

11:05.904 --> 11:09.070
للتخصيص لمعلمة من النوع رقم.

11:09.070 --> 11:13.128
لذا فإن المشكلة هنا هي أن TypeScript يفهم أن ما نحصل

11:13.128 --> 11:16.550
عليه من خاصية القيمة لعنصر الإدخال الخاص

11:16.550 --> 11:18.930
بنا سيكون سلسلة نصية.

11:18.930 --> 11:23.130
نرى هذا أيضًا هنا في IDE.

11:23.130 --> 11:24.786
ولا يمكننا تمرير هذا للجمع

11:24.786 --> 11:28.130
لأننا هناك ، لا نريد سلسلة ، نريد رقمًا.

11:28.130 --> 11:31.026
لذا يتعين علينا إصلاح ذلك ، على سبيل المثال ، عن طريق

11:31.026 --> 11:33.600
تحويل هذا إلى رقم هنا عن طريق إضافة موجب.

11:33.600 --> 11:36.790
وبمجرد القيام بذلك ، يمكننا تجميع هذا

11:36.790 --> 11:39.708
الرمز مرة أخرى بتكرار هذا الأمر والآن

11:39.708 --> 11:42.406
يتم تجميعه بدون أخطاء.

11:42.406 --> 11:45.225
يعطينا هذا باستخدام TypeScript. JavaScript والآن يعرض بعض الأخطاء

11:45.225 --> 11:49.030
مرة أخرى لأنه لا يفهم أنه

11:49.030 --> 11:50.690
لن يستخدم كلا الملفين

11:50.690 --> 11:53.090
في نفس الوقت هنا.

11:54.028 --> 11:55.373
مرة أخرى ، هذا كل شيء سوف يتحسن

11:56.466 --> 11:58.530
لاحقًا في الدورة بمجرد تكوين هذا.

11:58.530 --> 12:00.428
يمكننا تجاهل هذا الآن.

12:00.428 --> 12:01.261
لذلك يعطيني هذا الملف.

12:02.588 --> 12:04.348
وإذا فتحنا هذا ، سنرى شيئًا مثيرًا للاهتمام هنا.

12:04.348 --> 12:06.210
نرى أنه هناك ، بالطبع ، اختفت أنواعنا.

12:06.210 --> 12:08.690
ذهب هذا الصب هنا.

12:08.690 --> 12:11.280
لدينا الفانيليا جافا سكريبت مرة أخرى.

12:11.280 --> 12:13.308
لذلك إذا ألقينا نظرة على ملف TypeScript الخاص

12:13.308 --> 12:16.250
بنا هنا ، فإننا نرى أنه لدينا كل هذه الإضافات الرائعة.

12:16.250 --> 12:18.786
ولكن كما ذكرت ، هذه مجرد ميزات TypeScript.

12:18.786 --> 12:22.130
عندما تقوم بالتجميع إلى JavaScript ، يتم استخدامها لتقييم

12:22.130 --> 12:24.600
التعليمات البرمجية الخاصة بك والعثور على الأخطاء

12:24.600 --> 12:26.770
المحتملة ، ولكن بعد ذلك يتم تجريدها ونحصل

12:26.770 --> 12:29.090
على JavaScript منتظم كمخرج.

12:29.090 --> 12:33.960
لذا يمكننا الآن الانتقال إلى ملف فهرس HTML الخاص

12:33.960 --> 12:37.010
بنا والاستيراد باستخدام ts. js وهذا مهم.

12:37.010 --> 12:41.230
قم دائمًا باستيراد ملفات JavaScript

12:41.230 --> 12:43.550
لأن المتصفح لا يمكنه تشغيل TypeScript.

12:43.550 --> 12:45.990
نحن بحاجة إلى استيراد نتيجة تجميعنا.

12:45.990 --> 12:49.480
والآن بعد ذلك ، إذا أعدنا تحميل هذا ، فلدينا كود

12:49.480 --> 12:52.108
العمل الخاص بنا لأنه لدينا الآن كود

12:52.108 --> 12:55.750
JavaScript مناسب حيث قمنا بإصلاح هذه المشكلة عن

12:55.750 --> 12:57.970
طريق إرسال مدخلاتنا قبل تمريرها

12:59.410 --> 13:01.110
إلى الوظيفة.

13:01.110 --> 13:03.010
لكننا تمكنا من إصلاح هذه المشكلات

13:03.986 --> 13:06.087
بسبب نوع التعليقات التوضيحية هنا.

13:06.087 --> 13:08.100
وكما رأيت ، كان علينا كتابة بعض الأجزاء

13:08.100 --> 13:10.720
الأخرى من الكود بطريقة أوضح أيضًا.

13:10.720 --> 13:13.220
وهذا هو السبب في أن TypeScript مدهش.

13:13.220 --> 13:15.400
إنه يجبرنا على كتابة كود أفضل

13:15.400 --> 13:17.880
وأنظف وأقل عرضة للخطأ.
