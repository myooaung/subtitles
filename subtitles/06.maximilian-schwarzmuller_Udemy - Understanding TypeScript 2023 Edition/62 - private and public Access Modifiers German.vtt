WEBVTT

00:02.040 --> 00:04.180
Lehrerin: Das war also ein sehr einfacher Unterricht.

00:04.180 --> 00:05.930
Bei der Erstellung von Klassen

00:05.930 --> 00:08.400
wird es oft noch komplexer.

00:08.400 --> 00:10.800
Und vielleicht möchten Sie dort mehr Daten speichern.

00:10.800 --> 00:15.160
Nehmen wir an, eine Abteilung soll nur Mitarbeiter haben.

00:15.160 --> 00:18.160
Das könnte ein Array sein, und anfangs könnte

00:18.160 --> 00:20.290
es ein leeres Array sein.

00:20.290 --> 00:23.520
Und um auch ein bisschen genauer zu sein, was Sie darin

00:23.520 --> 00:24.980
speichern wollen, könnte

00:24.980 --> 00:28.800
es ein String-Array sein, um es relativ einfach zu halten.

00:28.800 --> 00:31.733
Jetzt könnten wir hier eine Methode addEmployee haben.

00:33.030 --> 00:36.880
Dort wollen wir einen Angestellten als Argument, was in unserem Beispiel

00:36.880 --> 00:39.430
einfach eine Zeichenkette sein sollte.

00:39.430 --> 00:42.650
Dann können wir das einstellen. Mitarbeiter. drücken.

00:42.650 --> 00:48.373
Schieben Sie also mit diesem Code einen neuen Mitarbeiter in unser Mitarbeiter-Array.

00:50.750 --> 00:52.683
Jetzt können wir noch eine weitere Methode

00:53.666 --> 00:55.749
hinzufügen, printEmployeeInformation.

01:00.508 --> 01:05.508
Und da möchte ich trösten. log(this. Mitarbeiter. Länge) und ich möchte

01:07.766 --> 01:12.766
auch trösten. log(this. Mitarbeiter) selbst.

01:15.510 --> 01:18.480
Wenn wir jetzt hier nach unten gehen, können wir diesen Code hier

01:18.480 --> 01:20.560
auskommentieren, was wieder zu einem Bruch führen

01:20.560 --> 01:24.070
würde, weil wir wieder nicht die Abteilungsbeschreibung mit unserem Objekt

01:24.070 --> 01:25.870
dort unten zusammenbringen.

01:25.870 --> 01:29.200
Stattdessen können wir hier, in der Buchhaltung, einen

01:29.200 --> 01:32.234
Mitarbeiter hinzufügen, sagen wir Max.

01:32.234 --> 01:35.400
Und ein weiterer Mitarbeiter, sagen wir Manu.

01:35.400 --> 01:37.690
Und neben der Beschreibung möchte ich

01:37.690 --> 01:41.520
dort auch meine Mitarbeiterinformationen hinterlegen.

01:41.520 --> 01:44.600
Wenn wir dies speichern, sollten wir diese Ausgabe erhalten,

01:44.600 --> 01:47.830
zwei Angestellte und hier einige Informationen.

01:47.830 --> 01:50.240
Das ist alles schön zu haben.

01:50.240 --> 01:52.700
Ein Problem, das wir mit dieser Klasse haben,

01:52.700 --> 01:55.960
ist, dass wir Mitarbeiter von außen ändern könnten, nicht

01:55.960 --> 01:58.160
nur mit add employee, sondern indem wir

01:58.160 --> 02:01.710
direkt auf die Eigenschaft des Mitarbeiters zugreifen, so wie

02:01.710 --> 02:04.430
wir es übrigens auch für den Namen tun können.

02:04.430 --> 02:07.630
Wir könnten also auch in die Buchhaltung gehen und dann

02:07.630 --> 02:10.560
die Angestellten ansprechen und vielleicht einen

02:10.560 --> 02:13.870
weiteren Angestellten bei Index zwei hinzufügen, und

02:13.870 --> 02:16.400
dann gibt es eine Anna, so wie das.

02:16.400 --> 02:18.210
Wenn wir das tun und das Geld sparen, bekommen

02:18.210 --> 02:20.290
wir drei Mitarbeiter und wir bekommen Anna.

02:20.290 --> 02:22.710
Jetzt denken Sie vielleicht, na toll, es gibt noch einen anderen Weg.

02:22.710 --> 02:25.230
Wenn Sie komplexere Anwendungen erstellen, möchten

02:25.230 --> 02:27.980
Sie so etwas in der Regel jedoch vermeiden.

02:27.980 --> 02:30.930
Sie wollen sicherstellen, dass es einen klaren Weg gibt, eine

02:30.930 --> 02:34.870
Möglichkeit, Ihre Klasse zu verwenden, und dass solche Dinge, alternative Möglichkeiten,

02:34.870 --> 02:38.530
sie zu verwenden, nicht wirklich unterstützt werden.

02:38.530 --> 02:41.230
Denn wenn Sie in einem größeren Team arbeiten, wird

02:41.230 --> 02:42.920
ein Kollege diesen Ansatz für

02:42.920 --> 02:45.700
das Hinzufügen eines Mitarbeiters verwenden und

02:45.700 --> 02:48.050
ein anderer Kollege diesen Ansatz.

02:48.050 --> 02:49.280
Und das wollen Sie nicht.

02:49.280 --> 02:52.640
Sie wollen eine einheitliche Vorgehensweise für diese Aufgabe.

02:52.640 --> 02:55.960
Auch, weil Sie vielleicht in der Methode add employee mehr

02:55.960 --> 02:58.420
tun, als ihn nur dem Array hinzuzufügen.

02:58.420 --> 02:59.770
Vielleicht möchten Sie hier

02:59.770 --> 03:02.400
zunächst einmal eine Bestätigung usw. erhalten.

03:02.400 --> 03:04.940
Es kann also sein, dass Sie dort zusätzlichen Code

03:04.940 --> 03:06.610
haben, der einfach nicht ausgeführt

03:06.610 --> 03:09.470
wird, wenn Sie dem Array mit dieser Zeile hier direkt einen

03:09.470 --> 03:12.970
neuen Wert zuweisen oder einen neuen Wert hinzufügen.

03:12.970 --> 03:16.000
Sie wollen also nicht zulassen, dass Mitarbeiter

03:16.000 --> 03:19.884
von außerhalb der Klasse auf diese Weise zugänglich sind.

03:19.884 --> 03:22.340
Und TypeScript deckt Sie ab.

03:22.340 --> 03:26.760
Sie können Mitarbeiter hier in eine private Eigenschaft, ein privates

03:26.760 --> 03:30.580
Feld verwandeln, indem Sie ein privates Schlüsselwort

03:30.580 --> 03:32.220
davor setzen.

03:32.220 --> 03:34.303
Privat bedeutet, dass Mitarbeiter

03:34.303 --> 03:38.030
jetzt eine Eigenschaft sind, auf die nur innerhalb der

03:38.030 --> 03:41.210
Klasse, also innerhalb des kreativen Objekts,

03:41.210 --> 03:43.480
zugegriffen werden kann.

03:43.480 --> 03:46.700
So kann jede Methode innerhalb der Abteilungsklasse

03:46.700 --> 03:49.770
weiterhin mit Mitarbeitern arbeiten.

03:49.770 --> 03:52.570
Aber Sie können nicht mehr auf diese Weise zugreifen.

03:52.570 --> 03:54.710
Hier sehen Sie, dass ich jetzt eine Fehlermeldung erhalte.

03:54.710 --> 03:57.280
Wenn ich versuche, dies zu speichern, erhalte ich einen Kompilierungsfehler,

03:57.280 --> 03:59.870
der besagt, dass die Eigenschaft "Mitarbeiter" privat ist

03:59.870 --> 04:03.550
und nur innerhalb der Klasse "Abteilung" zugänglich ist.

04:03.550 --> 04:07.100
So erzwingen wir nun, dass Mitarbeiter, die dieser Abteilung

04:07.100 --> 04:09.370
hinzugefügt werden sollen, die Methode

04:09.370 --> 04:12.690
addEmployee verwenden müssen.

04:12.690 --> 04:16.760
Denn sie erhalten eine Fehlermeldung, wenn sie so einen Code schreiben.

04:16.760 --> 04:20.460
Dies ist ein so genannter Modifikator, das private Schlüsselwort.

04:20.460 --> 04:23.470
Und neben privat gibt es auch öffentlich, was allerdings

04:23.470 --> 04:25.000
der Standard ist.

04:25.000 --> 04:26.590
Sie müssen keine Öffentlichkeit hinzufügen.

04:26.590 --> 04:29.590
Ein solcher Name ist also genau dasselbe wie ein Name

04:29.590 --> 04:31.650
mit vorangestelltem "public".

04:31.650 --> 04:34.300
Der Unterschied besteht darin, dass öffentliche Grundstücke

04:34.300 --> 04:36.350
von außen zugänglich sind.

04:36.350 --> 04:40.350
So könnte ich zum Beispiel hier auch auf den Namen zugreifen und

04:40.350 --> 04:43.600
einen neuen Namen vergeben, wenn ich das wollte.

04:43.600 --> 04:45.260
Das ist möglich.

04:45.260 --> 04:49.270
Bei Privatgrundstücken ist dies hier nicht möglich.

04:49.270 --> 04:51.580
Wir können sie nur von innen heraus nutzen.

04:51.580 --> 04:52.800
Technisch gesehen kennt

04:52.800 --> 04:55.700
JavaScript übrigens kein public und private.

04:55.700 --> 04:59.630
Nur in sehr modernen Versionen, die vor kurzem hinzugefügt

04:59.630 --> 05:01.320
wurden, gibt es so etwas.

05:01.320 --> 05:03.650
In der Vergangenheit kannte JavaScript keine privaten

05:03.650 --> 05:05.690
oder öffentlichen Eigenschaften.

05:05.690 --> 05:08.520
Alle Grundstücke waren dort immer öffentlich.

05:08.520 --> 05:10.630
TypeScript führt diese Funktion

05:10.630 --> 05:13.561
ein, die aber natürlich nicht zur Laufzeit funktioniert,

05:13.561 --> 05:16.620
da JavaScript bis vor kurzem nur öffentliche Eigenschaften

05:16.620 --> 05:18.780
kannte.

05:18.780 --> 05:21.290
Diese Zeile hier ist also ein eingefrorener Fehler während

05:21.290 --> 05:23.130
der TypeScript-Kompilierung.

05:23.130 --> 05:27.000
Wenn Sie ihn dennoch in JavaScript kompilieren, wird dieser

05:27.000 --> 05:30.140
Code zur Laufzeit ohne Fehler ausgeführt, da

05:30.140 --> 05:32.800
JavaScript selbst dieses Konzept bis vor

05:32.800 --> 05:34.900
kurzem nicht kannte.

05:34.900 --> 05:37.350
Abhängig von der Version, für die Sie kompilieren, kennt

05:37.350 --> 05:38.720
er sie also immer noch nicht.

05:38.720 --> 05:40.770
Und deshalb unterstützt TypeScript dies

05:40.770 --> 05:42.980
nur, weil es dies während der Kompilierung und

05:42.980 --> 05:44.650
nicht zur Laufzeit überprüft.

05:44.650 --> 05:47.370
Damit können wir jedoch Code wie diesen vermeiden und jeden

05:47.370 --> 05:49.863
dazu zwingen, saubereren Code zu schreiben.
