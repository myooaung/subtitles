WEBVTT

00:02.340 --> 00:04.100
Narrador: Então, começamos com os genéricos

00:04.100 --> 00:06.670
e esperamos que fique claro o que o TypeScript faz aqui,

00:06.670 --> 00:10.240
passamos algumas informações extras para a função de fusão, para que possamos

00:10.240 --> 00:12.130
trabalhar de uma maneira melhor com o resultado

00:12.130 --> 00:14.370
da função de fusão.

00:14.370 --> 00:16.540
Normalmente é para isso que os genéricos existem.

00:16.540 --> 00:19.890
Eles permitem que você continue trabalhando com seus dados

00:19.890 --> 00:21.960
de forma ideal no TypeScript.

00:21.960 --> 00:23.820
Agora, neste caso, aqui, no entanto,

00:23.820 --> 00:25.810
teríamos um problema se eu passasse

00:25.810 --> 00:28.570
por aqui, digamos apenas um número 30 aqui.

00:28.570 --> 00:30.470
Naturalmente, o TypeScript agora lança

00:30.470 --> 00:32.010
um erro, porque tentou acessar a idade,

00:32.010 --> 00:33.870
mas acessar o nome funcionaria.

00:33.870 --> 00:37.100
No entanto, se salvarmos isso, ele se compila sem erros, e se

00:37.100 --> 00:39.710
eu imprimir o objeto fundido em geral, vemos que

00:39.710 --> 00:41.610
o que recebo de volta são apenas hobbies

00:41.610 --> 00:43.910
e nome no meu objeto, o que faz sentido porque

00:43.910 --> 00:46.570
30 é um número, e quando passamos isso como um segundo

00:46.570 --> 00:48.010
argumento para atribuir um

00:48.010 --> 00:50.080
objeto, o que no final estamos fazendo

00:50.080 --> 00:51.920
aqui, bem, então isso simplesmente

00:51.920 --> 00:54.590
falha silenciosamente.

00:54.590 --> 00:57.860
O Javascript não atira um erro, ele não reclama.

00:57.860 --> 01:00.460
Mas é claro, também não funde 30 no objeto

01:00.460 --> 01:02.270
recém-criado, você vê que

01:02.270 --> 01:04.690
não há 30 neste objeto.

01:04.690 --> 01:06.540
Agora, como o JavaScript o faria?

01:06.540 --> 01:08.470
Como 30 não é um objeto, um objeto

01:08.470 --> 01:12.150
atribuído somente é capaz de fundir diferentes objetos

01:12.150 --> 01:14.090
uns com os outros.

01:14.090 --> 01:15.410
Então o que no final queremos salvar?

01:15.410 --> 01:17.600
Bem, nós não nos importamos com o tipo exato,

01:17.600 --> 01:20.040
não nos importamos com a estrutura exata do objeto

01:20.040 --> 01:22.980
que você está fornecendo aqui para U e T.

01:22.980 --> 01:26.600
Mas o que nos interessa é que ambos os parâmetros,

01:26.600 --> 01:31.370
ambos os tipos T e U, devem ser qualquer tipo de objeto, mas devem

01:31.370 --> 01:34.420
ser um objeto em todos os momentos.

01:34.420 --> 01:36.830
E atualmente, não estamos dizendo isso.

01:36.830 --> 01:37.820
Atualmente, estamos apenas

01:37.820 --> 01:40.110
dizendo, eles devem ser de qualquer tipo, não me importo.

01:40.110 --> 01:41.750
Agora, muitas vezes, isso não está bem.

01:41.750 --> 01:45.060
Se você quiser restringir os tipos de T e U aqui, resolva

01:45.060 --> 01:46.683
seus tipos genéricos.

01:47.830 --> 01:51.540
Você pode fazer isso com restrições de tipo.

01:51.540 --> 01:55.170
Para tipos genéricos, você pode estabelecer certas restrições

01:55.170 --> 01:58.280
em relação aos tipos em que seus tipos genéricos podem

01:58.280 --> 02:01.120
se basear e o faz com a palavra-chave estendida aqui

02:01.120 --> 02:05.150
nos parênteses angulares após o tipo que você quer restringir.

02:05.150 --> 02:07.410
Portanto, aqui poderíamos dizer objeto

02:07.410 --> 02:09.020
extensível, e com isso estou

02:09.020 --> 02:12.740
dizendo, o tipo T pode ser qualquer objeto com qualquer estrutura,

02:12.740 --> 02:15.340
mas tem que ser um objeto.

02:15.340 --> 02:17.480
Podemos fazer o mesmo para a U.

02:17.480 --> 02:19.040
E se eu fizer isso, você

02:19.040 --> 02:21.820
vê agora eu já recebo um erro aqui na IDE.

02:21.820 --> 02:23.980
E se eu tentar salvar isso, também

02:23.980 --> 02:26.150
recebo um erro no compilador, porque

02:26.150 --> 02:28.640
o argumento do tipo 30 aqui não é atribuível

02:28.640 --> 02:31.133
ao objeto do tipo.

02:32.080 --> 02:34.480
Portanto, esse é, é claro, o comportamento que queremos aqui.

02:34.480 --> 02:38.190
Agora somos forçados a passar em um objeto novamente,

02:38.190 --> 02:39.940
opa, assim.

02:39.940 --> 02:41.990
Agora somos forçados a passar isto novamente,

02:41.990 --> 02:43.680
e por isso melhoramos esta função porque

02:43.680 --> 02:45.290
agora ela realmente funciona.

02:45.290 --> 02:48.980
E sabemos que a atribuição de objetos quer dois objetos.

02:48.980 --> 02:51.000
Por isso, no final, queremos garantir

02:51.000 --> 02:52.820
que recebemos dois objetos aqui,

02:52.820 --> 02:56.370
estabelecendo certas restrições em nossos tipos genéricos.

02:56.370 --> 02:58.630
E estas restrições aqui podem ser qualquer coisa.

02:58.630 --> 03:01.290
Você pode se referir a objetos, a fios, você poderia

03:01.290 --> 03:03.730
usar seu próprio tipo se o tivesse.

03:03.730 --> 03:06.700
Você também pode usar tipos de sindicatos aqui se quiser, você

03:06.700 --> 03:08.470
é realmente flexível lá, você pode

03:08.470 --> 03:10.510
definir as restrições que quiser.

03:10.510 --> 03:12.620
E, é claro, não é preciso restringir todos

03:12.620 --> 03:13.720
os tipos genéricos.

03:13.720 --> 03:16.560
Se você quiser apenas restringir a U, você pode fazer isso.

03:16.560 --> 03:19.620
Neste exemplo, só faz sentido restringir ambos porque

03:19.620 --> 03:22.880
a atribuição de objetos quer dois objetos aqui, mas você

03:22.880 --> 03:24.640
é realmente flexível lá.

03:24.640 --> 03:26.620
É importante estar atento a esse conceito

03:26.620 --> 03:28.440
de restrições, pois isso permite

03:28.440 --> 03:30.560
trabalhar melhor com tipos genéricos

03:30.560 --> 03:32.640
de uma forma otimizada, o que evita erros

03:32.640 --> 03:34.810
desnecessários ou comportamentos estranhos

03:34.810 --> 03:37.513
como os que tínhamos antes.
