WEBVTT

1
00:00:02.160 --> 00:00:05.373
<v ->So back in our project, if you want to use webpack there,</v>

2
00:00:07.223 --> 00:00:09.948
I will first of all quit my compilation and that current

3
00:00:09.948 --> 00:00:10.870
development server, and then stat,

4
00:00:10.870 --> 00:00:13.440
make sure we can use webpack there.

5
00:00:13.440 --> 00:00:16.420
Now since this is already a file of the package dot json

6
00:00:16.420 --> 00:00:19.462
file, we can use NPM to install more dependencies

7
00:00:19.462 --> 00:00:21.050
into this project.

8
00:00:21.050 --> 00:00:23.410
So simply, more third party libraries

9
00:00:23.410 --> 00:00:24.940
we need in this project.

10
00:00:24.940 --> 00:00:28.610
And here I don't mean third party libraries which provide

11
00:00:28.610 --> 00:00:31.480
a certain functionalities using our code,

12
00:00:31.480 --> 00:00:33.930
but instead third party libraries that help us

13
00:00:33.930 --> 00:00:37.157
set up a project workflow and configuration

14
00:00:37.157 --> 00:00:40.430
that makes development very efficient for us.

15
00:00:40.430 --> 00:00:45.110
We do this with NPM installed, dash dash safe dash dev

16
00:00:45.110 --> 00:00:48.600
to indicate that it's a development only dependency,

17
00:00:48.600 --> 00:00:53.600
and then webpack webpack dash CLI,

18
00:00:53.713 --> 00:00:58.713
webpack dash dev dash server typescript and ts loader.

19
00:01:01.030 --> 00:01:03.040
So that's a bunch of packages and I will say

20
00:01:03.040 --> 00:01:04.800
what they do in a second.

21
00:01:04.800 --> 00:01:06.680
So let's first of all hit enter and make sure

22
00:01:06.680 --> 00:01:08.485
these are all now all getting installed

23
00:01:08.485 --> 00:01:10.801
into our project here, and thereafter we'll have a look

24
00:01:10.801 --> 00:01:14.100
at each package and see why we installed it,

25
00:01:14.100 --> 00:01:16.290
so let's wait for this to finish.

26
00:01:16.290 --> 00:01:18.530
So it did finish installing for me here,

27
00:01:18.530 --> 00:01:21.710
and now with that, let's analyze what we installed.

28
00:01:21.710 --> 00:01:25.380
In package dot json, the new dev dependencies section,

29
00:01:25.380 --> 00:01:27.063
or it already existed, but now we have a lot

30
00:01:27.063 --> 00:01:29.474
of new packages there I should say,

31
00:01:29.474 --> 00:01:31.290
these packages were added.

32
00:01:31.290 --> 00:01:33.690
Now what do all these packages do?

33
00:01:33.690 --> 00:01:35.460
Let's start with webpack.

34
00:01:35.460 --> 00:01:37.580
Webpack is the tool I just talked about,

35
00:01:37.580 --> 00:01:40.080
it's the heart of this entire setup

36
00:01:40.080 --> 00:01:41.780
we're now going to create.

37
00:01:41.780 --> 00:01:43.980
It is a tool that allows us to

38
00:01:43.980 --> 00:01:47.150
plug in certain functionalities to bundle our code

39
00:01:47.150 --> 00:01:49.210
and also to transform our code.

40
00:01:49.210 --> 00:01:52.470
And that transform our code part is important,

41
00:01:52.470 --> 00:01:54.740
we're having a typescript project here right?

42
00:01:54.740 --> 00:01:56.620
Now of course we could certainly use webpack

43
00:01:56.620 --> 00:02:00.220
to then bundle together all the JavaScript output,

44
00:02:00.220 --> 00:02:03.310
but it would be even nicer if webpack would do both.

45
00:02:03.310 --> 00:02:06.250
Transform our typescript code to JavaScript,

46
00:02:06.250 --> 00:02:10.180
and then actually emit a bundled Javascript file,

47
00:02:10.180 --> 00:02:13.420
and webpack is able to do that thankfully.

48
00:02:13.420 --> 00:02:16.610
We need the webpack CLI to run webpack commands

49
00:02:16.610 --> 00:02:18.922
in our project, and the webpack dev server

50
00:02:18.922 --> 00:02:21.603
to have that built in development server,

51
00:02:21.603 --> 00:02:24.286
which starts webpack under the hood,

52
00:02:24.286 --> 00:02:27.056
which watches our files for changes,

53
00:02:27.056 --> 00:02:30.180
automatically triggers webpack to recompile

54
00:02:30.180 --> 00:02:34.760
when something changes, and which auto serves our page.

55
00:02:34.760 --> 00:02:37.300
And then we got typescript and typescript loader,

56
00:02:37.300 --> 00:02:39.460
the ts loader here.

57
00:02:39.460 --> 00:02:42.850
Now we already installed typescript globally on our machine,

58
00:02:42.850 --> 00:02:46.208
which is why we are able to run tsc dash w.

59
00:02:46.208 --> 00:02:49.760
Now it is a good practice to auto install a copy of

60
00:02:49.760 --> 00:02:53.450
typescript per project, so that for this project,

61
00:02:53.450 --> 00:02:56.000
you got a specific typescript version.

62
00:02:56.000 --> 00:02:58.320
The advantages that if you ever change your

63
00:02:58.320 --> 00:03:01.624
global typescript version, you don't break your project

64
00:03:01.624 --> 00:03:05.170
version, your project setup if there we're breaking

65
00:03:05.170 --> 00:03:07.280
changes in typescript itself,

66
00:03:07.280 --> 00:03:10.340
so we can lock in a specific version of typescript

67
00:03:10.340 --> 00:03:13.880
for a project, that's why we installed it separately here.

68
00:03:13.880 --> 00:03:16.440
And the ts loader now is a package which will

69
00:03:16.440 --> 00:03:18.380
work together with webpack.

70
00:03:18.380 --> 00:03:21.068
The ts loader is a package that tells webpack

71
00:03:21.068 --> 00:03:24.396
how to convert typescript code to Javascript,

72
00:03:24.396 --> 00:03:29.180
so that webpack is able to do both, compile our code,

73
00:03:29.180 --> 00:03:30.920
with the help of typescript loader,

74
00:03:30.920 --> 00:03:33.370
which in turn of course uses the typescript compiler

75
00:03:33.370 --> 00:03:36.665
under the hood, and then webpack also is able to bundle

76
00:03:36.665 --> 00:03:41.580
our emitted javascript files into a bundled js file

77
00:03:41.580 --> 00:03:44.260
into one bundled code file.

78
00:03:44.260 --> 00:03:47.440
Well, and with that, let's simply get started

79
00:03:47.440 --> 00:03:50.852
and let's set up a webpack project so that we can use

80
00:03:50.852 --> 00:03:53.223
webpack for all these nice things.

