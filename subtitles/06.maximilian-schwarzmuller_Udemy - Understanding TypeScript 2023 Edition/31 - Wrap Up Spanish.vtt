WEBVTT

00:02.150 --> 00:04.220
-: Ahora, con esto, hemos echado un vistazo

00:04.220 --> 00:07.410
a todos los tipos del núcleo y a los fundamentos de TypeScript.

00:07.410 --> 00:11.640
Esperamos que ahora entiendas cómo creamos y asignamos tipos,

00:11.640 --> 00:14.427
cómo asignamos tipos a las variables y a

00:14.427 --> 00:17.510
los parámetros, y por qué lo hacemos.

00:17.510 --> 00:20.740
Cómo las asignaciones de tipos y los tipos podrían diferir de las

00:20.740 --> 00:24.770
comprobaciones de tipos de JavaScript que JavaScript utiliza tipos en tiempo de

00:24.770 --> 00:27.310
ejecución, y TypeScript utiliza tipos estáticos

00:27.310 --> 00:29.400
que importan durante el desarrollo.

00:29.400 --> 00:31.710
Que el código JavaScript construido, por lo

00:31.710 --> 00:34.410
tanto, no incluye ninguna asignación de tipo.

00:34.410 --> 00:36.550
Por supuesto, incluye cualquier comprobación

00:36.550 --> 00:39.060
de tipo, porque eso es código JavaScript normal,

00:39.060 --> 00:41.730
pero algo como esto de aquí...

00:43.050 --> 00:44.910
esto simplemente no está permitido en JavaScript.

00:44.910 --> 00:46.280
Esta sintaxis no es compatible.

00:46.280 --> 00:47.960
Eso es sólo TypeScript.

00:47.960 --> 00:49.550
Así que espero que quede claro.

00:49.550 --> 00:52.740
Y luego echamos un vistazo a los números, cadenas, booleanos en

00:52.740 --> 00:55.750
los tipos de función y el establecimiento de los tipos de retorno,

00:55.750 --> 00:58.510
los tipos de argumento, y también la descripción del tipo

00:58.510 --> 01:00.160
de una función en general que puede

01:00.160 --> 01:02.490
ser útil si usted quiere tener una variable que

01:02.490 --> 01:04.780
eventualmente tiene una función.

01:04.780 --> 01:07.890
Hemos echado un vistazo a los objetos y a las matrices y a los enums

01:07.890 --> 01:10.140
y a cómo eso puede ser interesante y ayudarte.

01:10.140 --> 01:12.030
Lo mismo ocurre con las tuplas.

01:12.030 --> 01:16.160
Y ahora también hemos echado un vistazo a los alias, los alias de tipos,

01:16.160 --> 01:18.605
donde puedes combinar tipos complejos

01:18.605 --> 01:21.220
en alias que puedes reutilizar.

01:21.220 --> 01:23.840
Hemos visto los tipos literales y los tipos

01:23.840 --> 01:25.840
de unión, que pueden ser útiles para

01:25.840 --> 01:29.550
escenarios en los que se espera más de un tipo posible.

01:29.550 --> 01:33.455
Y ahora al final también hemos echado un vistazo a los desconocidos

01:33.455 --> 01:35.956
y a los nunca, que son tipos de nicho pero

01:35.956 --> 01:39.430
que aún en su nicho pueden ser muy útiles.

01:39.430 --> 01:40.970
Ahora, con estos fundamentos,

01:40.970 --> 01:43.180
profundizaremos en aspectos individuales

01:43.180 --> 01:45.630
y, por supuesto, también exploraremos otros tipos

01:45.630 --> 01:49.163
y construcciones de JavaScript donde los tipos pueden ser útiles.
