WEBVTT

00:02.130 --> 00:04.110
Instructeur: We hebben hier onze ontwikkelingsworkflow

00:04.110 --> 00:06.137
voor Webpack voorbereid, geconfigureerd

00:06.137 --> 00:08.490
voor de Webpack dev server, de modus ingesteld

00:08.490 --> 00:10.840
op ontwikkeling, en source maps ingesteld om onze

00:10.840 --> 00:13.210
debug-ervaring te verbeteren, om ons betere foutmeldingen

00:13.210 --> 00:16.570
te geven enzovoort.

00:16.570 --> 00:20.150
Voor productie, dus wanneer we onze code willen voorbereiden om hem

00:20.150 --> 00:23.260
te uploaden naar een server waar hij vervolgens wordt geserveerd

00:23.260 --> 00:27.070
aan onze eindgebruikers, willen we meestal een andere workflow.

00:27.070 --> 00:28.790
Daarom voeg ik een nieuwe config toe genaamd

00:28.790 --> 00:31.820
webpack. config. prod. js.

00:31.820 --> 00:33.210
Deze naam is niet aan u omdat

00:33.210 --> 00:36.043
Webpack er standaard niet naar zal zoeken.

00:36.880 --> 00:39.710
We zullen hem zeggen dat hij er zo naar moet zoeken.

00:39.710 --> 00:41.920
Voordat we het vertellen, laten we

00:41.920 --> 00:44.708
alle ontwikkelingsinstellingen kopiëren

00:44.708 --> 00:48.480
naar deze configuratie. prod bestand, maar laten we het nu verfijnen.

00:48.480 --> 00:51.150
We kunnen bijvoorbeeld de modus op productie zetten.

00:51.150 --> 00:54.380
Dit zal Webpack vertellen om deze optimalisaties uit

00:54.380 --> 00:56.550
te voeren, onze code te minen enzovoort,

00:56.550 --> 00:59.220
dus u wilt dit hier zeker instellen.

00:59.220 --> 01:00.440
We laten de ingang.

01:00.440 --> 01:02.910
In de uitvoer kunnen we ons niet ontdoen van het publieke

01:02.910 --> 01:05.860
pad omdat dat nodig was voor de Webpack dev server.

01:05.860 --> 01:08.810
Nu zullen we het hier niet gebruiken, want voor productie

01:08.810 --> 01:10.430
willen we het Webpack script

01:10.430 --> 01:12.940
uitvoeren en onze uitvoer naar schijf schrijven

01:12.940 --> 01:16.900
en niet tijdelijk serveren op een lokaal draaiende server.

01:16.900 --> 01:19.350
We kunnen devtool op none zetten om hier

01:19.350 --> 01:22.090
geen bronkaarten te genereren, omdat we die

01:22.090 --> 01:24.913
in productie misschien niet nodig hebben.

01:26.140 --> 01:30.160
Nu kan de rest blijven zoals het is, maar we zullen meer toevoegen.

01:30.160 --> 01:34.620
Hier onderaan wil ik een plugins entry toevoegen en deze op

01:34.620 --> 01:36.220
een array zetten.

01:36.220 --> 01:41.070
Plugins zijn extra uitbreidingen of, nou ja, plugins die u kunt toevoegen

01:41.070 --> 01:43.020
aan uw Webpack workflow die in

01:43.020 --> 01:46.080
principe worden toegepast op de gehele uitvoer,

01:46.080 --> 01:47.820
op het gehele project.

01:47.820 --> 01:50.190
Regels en modules worden specifiek

01:50.190 --> 01:52.870
per bestand toegepast.

01:52.870 --> 01:57.260
Plugins worden toegepast op de algemene workflow.

01:57.260 --> 01:58.730
Hier wil ik een plugin toevoegen

01:58.730 --> 02:00.620
die automatisch alles in de dist map

02:00.620 --> 02:04.370
verwijdert voordat daar een nieuwe uitvoer wordt geschreven, zodat

02:04.370 --> 02:06.540
we altijd alleen de laatste, meest recente

02:06.540 --> 02:09.410
uitvoer in de dist map hebben.

02:09.410 --> 02:11.900
Daarvoor installeer ik een gloednieuw

02:11.900 --> 02:16.900
pakket met --save-dev en dat is de clean-webpack-plugin.

02:19.090 --> 02:21.900
En dit zal ons helpen de dist map op te ruimen,

02:21.900 --> 02:26.360
in ons geval, wanneer we ons project opnieuw opbouwen.

02:26.360 --> 02:29.820
Dus met dat geïnstalleerd, laten we het hier boven importeren.

02:29.820 --> 02:32.090
Ik noem het CleanPlugin en importeer

02:32.090 --> 02:36.400
het door require clean-webpack-plugin en met het geïnstalleerd

02:36.400 --> 02:39.810
in de plugins array onderaan, roepen we gewoon new

02:39.810 --> 02:44.073
CleanPlugin aan. CleanWebpackPlugin en installeer

02:45.422 --> 02:46.500
deze.

02:46.500 --> 02:49.660
Dit is een constructorfunctie en nu instantiëren.

02:49.660 --> 02:51.650
Dit is alles wat u hier moet doen en dit zal

02:51.650 --> 02:53.260
uiteindelijk Webpack vertellen

02:53.260 --> 02:56.490
dat alvorens het iets wegschrijft naar DEZE uitvoermap, het alles

02:56.490 --> 02:58.593
zal wissen wat zich daar bevindt.

02:59.440 --> 03:02.020
Nu hebben we de afgewerkte productie workflow.

03:02.020 --> 03:04.620
Om het te gebruiken, gaan we naar het pakket. json en laten we daar

03:04.620 --> 03:07.280
dit bouwscript aanpassen.

03:07.280 --> 03:10.510
Hier wil ik Wepback vertellen om dit prod bestand te gebruiken,

03:10.510 --> 03:13.110
dit productie configuratiebestand en dat doen

03:13.110 --> 03:15.160
we door --config toe te voegen en dan

03:16.730 --> 03:21.140
webpack. config. prod. js hier.

03:21.140 --> 03:23.610
Dit moet hier de bestandsnaam zijn die u koos en dit instrueert

03:23.610 --> 03:27.000
Webpack om dit configuratiebestand te gebruiken in plaats van het standaard

03:27.000 --> 03:29.730
Webpack. config. js bestand waar

03:29.730 --> 03:32.030
het normaal naar zoekt.

03:32.030 --> 03:34.600
Als u nu npn run build uitvoert, zal het uw app

03:34.600 --> 03:36.700
bouwen voor productie, wat betekent

03:36.700 --> 03:39.950
dat het u deze geoptimaliseerde uitvoer geeft.

03:39.950 --> 03:42.460
Dus als je wacht, hier hebben we de bundel. js bestand en dit

03:42.460 --> 03:45.110
is nu echt de geoptimaliseerde code

03:45.110 --> 03:47.880
gebouwd voor productie en dit samen met

03:47.880 --> 03:50.980
je index. html bestand en de app. css bestand is

03:50.980 --> 03:53.800
wat u hier op een server zou zetten als u uw

03:53.800 --> 03:56.393
toepassing wilt implementeren.

03:57.260 --> 04:00.440
Dit is ook het einde van deze module.

04:00.440 --> 04:02.140
Laat me nu samenvatten wat we geleerd hebben.
