WEBVTT

00:02.290 --> 00:03.910
ผู้สอน: เพื่อบอก Webpack ว่าจะทำอย่างไรกับไฟล์

00:03.910 --> 00:08.830
TypeScript เราจำเป็นต้องเพิ่มรายการใหม่ให้กับวัตถุการกำหนดค่าที่นี่

00:08.830 --> 00:11.510
และนั่นคือคุณสมบัติของโมดูล

00:11.510 --> 00:14.020
โมดูลยังใช้วัตถุ JavaScript

00:14.020 --> 00:15.470
เพื่อกำหนดค่า

00:15.470 --> 00:17.440
โมดูลในตอนท้ายเป็นเพียงไฟล์ ดังนั้นเราจะบอก

00:17.440 --> 00:22.940
Webpack ถึงวิธีการทำงานกับไฟล์ที่พบ เช่นเดียวกับแอป

00:22.940 --> 00:22.940
ts

00:22.940 --> 00:27.290
และเมื่อเข้าใจไฟล์นั้นแล้ว จะจัดการกับการนำเข้าทั้งหมดในไฟล์ได้อย่างไร

00:27.290 --> 00:29.800
Webpack ควรจัดการกับไฟล์เหล่านี้อย่างไร?

00:29.800 --> 00:37.300
เราบอก Webpack โดยการเพิ่มกฎอาร์เรย์ที่นี่ เพราะคุณสามารถตั้งกฎหลายข้อที่ควรใช้กับไฟล์ทั้งหมด

00:37.300 --> 00:40.690
เราต้องการเพียงหนึ่งเดียว แต่ในโครงการที่ซับซ้อนมากขึ้น

00:40.690 --> 00:44.030
ซึ่งคุณต้องการใช้ Webpack เพื่อจัดการไฟล์ CSS หรือรูปภาพ

00:44.030 --> 00:46.140
หรืออะไรทำนองนั้น คุณสามารถเพิ่มกฎเพิ่มเติมสำหรับไฟล์ประเภทต่างๆ

00:46.140 --> 00:49.220
ได้

00:49.220 --> 00:53.840
และดังที่ได้กล่าวไว้ก่อนหน้านี้ เอกสารอย่างเป็นทางการเป็นที่ที่ดีในการเรียนรู้เพิ่มเติมเกี่ยวกับตัวโหลด

00:53.840 --> 00:55.730
ซึ่งท้ายที่สุดแล้วคุณจะใช้เพื่อสอน Webpack

00:55.730 --> 00:57.980
เพิ่มเติมเกี่ยวกับไฟล์ต่างๆ และเพื่อเรียนรู้เพิ่มเติมเกี่ยวกับ

00:57.980 --> 00:59.720
Webpack โดยทั่วไป

00:59.720 --> 01:02.560
ที่นี่เราจะเพิ่มตัวโหลดดังกล่าวจริง

01:02.560 --> 01:06.110
ตัวโหลดเป็นเพียงแพ็คเกจที่บอก Webpack ถึงวิธีจัดการกับไฟล์บางไฟล์

01:06.110 --> 01:07.780
และแน่นอนว่าเรามีตัวโหลด

01:07.780 --> 01:11.520
ts ซึ่งช่วยให้เราบอก Webpack ว่าควรจัดการกับไฟล์ TypeScript

01:11.520 --> 01:13.690
อย่างไร

01:13.690 --> 01:16.850
ดังนั้นเราจึงเพิ่มกฎซึ่งเป็นเพียงวัตถุ JavaScript

01:16.850 --> 01:19.720
โดยที่ก่อนอื่นเราเพิ่มคุณสมบัติการทดสอบ

01:19.720 --> 01:22.950
ข้อมูลนี้อธิบายถึงการทดสอบที่ Webpack จะดำเนินการกับไฟล์ใด

01:22.950 --> 01:28.550
ๆ ที่พบเพื่อดูว่ากฎนี้มีผลกับไฟล์นั้นหรือไม่

01:28.550 --> 01:31.080
และการทดสอบที่นี่เป็นนิพจน์ทั่วไป

01:31.080 --> 01:33.610
และฉันอยากจะบอก Webpack ว่าไฟล์ใดๆ

01:33.610 --> 01:38.913
ที่ลงท้ายด้วย . ควรใช้ ts หรือควรจัดการโดยกฎนี้

01:39.860 --> 01:42.940
นิพจน์ทั่วไปที่ตรวจสอบนามสกุลไฟล์สามารถใช้เครื่องหมายแบ็กสแลชที่นี่

01:42.940 --> 01:47.550
จากนั้นตามด้วย . ts แล้วก็เครื่องหมายดอลลาร์

01:47.550 --> 01:50.840
นี่คือนิพจน์ทั่วไปของเราที่จะบอก Webpack ว่าคุณต้องการตรวจสอบไฟล์ที่ลงท้ายด้วย

01:50.840 --> 01:54.593
. ท.

01:55.560 --> 01:58.810
จากนั้น คุณต้องระบุด้วยว่า Webpack ควรทำอย่างไรกับไฟล์เหล่านั้น

01:58.810 --> 02:02.590
และคุณทำเช่นนั้นโดยใช้คีย์เวิร์ด use ที่นี่

02:02.590 --> 02:05.290
และที่นั่น คุณระบุว่าตัวโหลด Webpack

02:05.290 --> 02:07.590
ควรใช้ ts-loader ในกรณีของฉัน

02:07.590 --> 02:10.600
ดังนั้นเราจึงบอก Webpack ว่าไฟล์ TypeScript ใด ๆ ที่พบควรได้รับการจัดการโดยตัวโหลด

02:10.600 --> 02:16.010
TypeScript ซึ่งจะรู้ว่าต้องทำอย่างไรกับไฟล์ดังกล่าว

02:16.010 --> 02:17.680
ts-loader จะใช้ tsconfig

02:17.680 --> 02:20.330
โดยอัตโนมัติ json ไว้ในบัญชี ดังนั้นเราจึงไม่จำเป็นต้องระบุการกำหนดค่าเพิ่มเติมใดๆ

02:20.330 --> 02:23.430
ที่นี่

02:23.430 --> 02:26.050
เพียงการกำหนดค่าเดียวที่ไม่เสียหาย

02:26.050 --> 02:29.910
ไม่รวมโมดูลโหนดเป็นนิพจน์ทั่วไป เพื่อที่ Webpack

02:29.910 --> 02:33.773
จะไม่พยายามค้นหาโมดูลโหนด

02:35.130 --> 02:38.400
ด้วยเหตุนี้เราจึงจำเป็นต้องเพิ่มการกำหนดค่าพิเศษหนึ่งรายการที่นี่หลังจากการกำหนดค่าโมดูล

02:38.400 --> 02:42.800
และนั่นคือคีย์แก้ไข

02:42.800 --> 02:49.750
เราบอก Webpack ว่านามสกุลไฟล์ใดที่จะเพิ่มในการนำเข้าที่พบ

02:49.750 --> 02:52.440
ฉันบอกว่า Webpack จะเพิ่มส่วนขยายด้วยตัวของมันเอง

02:52.440 --> 02:56.160
และโดยค่าเริ่มต้น มันจะมองหา . ไฟล์.js

02:56.160 --> 02:59.220
ตอนนี้เราต้องการให้ Webpack ค้นหาไฟล์. ts จากนั้นในการแก้ปัญหานี้

02:59.220 --> 03:01.280
เราสามารถเพิ่มคุณสมบัติส่วนขยาย

03:01.280 --> 03:08.390
ตั้งค่าเท่ากับอาร์เรย์ และบอก Webpack ว่าควรค้นหา .

03:08.390 --> 03:08.390
ts

03:08.390 --> 03:10.640
เช่นเดียวกับไฟล์ . ไฟล์.js

03:10.640 --> 03:18.723
ดังนั้นตอนนี้ Webpack จะค้นหาไฟล์ดังกล่าวโดยพื้นฐานแล้วรวมไฟล์ทั้งหมดที่มีนามสกุลเหล่านี้ซึ่งคุณกำลังนำเข้าเข้าด้วยกัน

03:19.760 --> 03:26.150
และนั่นคือการตั้งค่าของเราเกือบจะเสร็จสิ้นในขณะนี้ อย่างน้อยที่สุดไฟล์การกำหนดค่าของเราก็เกือบจะเสร็จสิ้นแล้ว

03:26.150 --> 03:28.730
ด้วยสิ่งนั้นเราควรไปที่ tsconfig เช่นกันและตรวจสอบให้แน่ใจว่าคุณตั้งค่า

03:28.730 --> 03:33.070
sourceMap เป็นจริง

03:33.070 --> 03:35.210
สิ่งนี้จะช่วยเราดีบักโค้ดของเรา และ Webpack

03:35.210 --> 03:37.130
ก็สนับสนุนสิ่งนี้เช่นกัน

03:37.130 --> 03:41.340
ตอนนี้เราต้องเพิ่มรายการด้วย บางทีที่นี่ด้านล่างเอาต์พุต

03:41.340 --> 03:43.710
และนั่นคือคีย์ devtool

03:43.710 --> 03:47.210
ค่าควรเป็น inline-source-map

03:47.210 --> 03:48.510
เป็นสตริง

03:48.510 --> 03:51.620
สิ่งนี้จะบอก Webpack ว่าจะมีการสร้างซอร์สแมปแล้ว

03:51.620 --> 03:53.700
ซึ่งควรแยกและเชื่อมต่ออย่างถูกต้องกับบันเดิลที่สร้างขึ้น

03:53.700 --> 04:03.603
ดังนั้นในขณะที่เราได้รับบันเดิลดังกล่าว เรายังคงมีประสบการณ์การพัฒนาที่ยอดเยี่ยม

04:05.830 --> 04:09.823
ตอนนี้เราสามารถใช้ Webpack ได้ และคำถามคือเราจะใช้มันอย่างไร?

04:11.000 --> 04:16.650
วิธีใช้ง่ายๆคือไปที่แพ็คเกจ json และเพิ่มสคริปต์ที่นั่น

04:16.650 --> 04:18.440
ตัวอย่างเช่นสร้าง

04:18.440 --> 04:21.620
คุณสามารถตั้งชื่ออะไรก็ได้ที่คุณต้องการที่นี่ในส่วนสคริปต์

04:21.620 --> 04:23.930
จากนั้นเรียกใช้ Webpack

04:23.930 --> 04:26.453
เพียงพิมพ์ webpack แบบนี้

04:27.560 --> 04:29.880
ตอนนี้ให้ไปที่โฟลเดอร์ dist และสุดท้ายให้ลบทุกอย่างที่อยู่ในนั้น

04:29.880 --> 04:32.993
และด้วยการบันทึกนั้น ตอนนี้รัน npm run build

04:34.000 --> 04:38.663
และมาดูกันว่าใช้ได้หรือไม่

04:39.970 --> 04:43.000
และล้มเหลว...

04:45.440 --> 04:47.800
ใช่ ฉันแค่พิมพ์ผิด ซึ่งไม่ควรเป็น

04:47.800 --> 04:51.440
devtools แต่เป็น devtool ตรงนี้

04:51.440 --> 04:53.830
ดังนั้นให้เปลี่ยนเป็น devtool ในไฟล์คอนฟิกูเรชัน

04:53.830 --> 04:56.143
และตอนนี้เรามาสร้างการรัน npm ซ้ำ

04:59.500 --> 05:02.620
และคุณสามารถเพิกเฉยต่อคำเตือนที่คุณได้รับที่นี่

05:02.620 --> 05:04.230
คุณจะเห็นว่าในไฟล์ dist

05:04.230 --> 05:06.410
คุณมีไฟล์ js รวมอยู่ด้วย

05:06.410 --> 05:09.960
และสิ่งที่คุณเห็นในนั้นก็คือโค้ดที่อ่านไม่ออกเลยทีเดียว

05:09.960 --> 05:14.060
เพราะเรามีการลดขนาดลงจริงที่นี่

05:14.060 --> 05:18.680
ดังนั้นนี่จึงเป็นรหัสที่ปรับให้เหมาะสมแล้วเช่นกัน

05:18.680 --> 05:21.410
ตอนนี้ก่อนที่เราจะดูว่าเราสามารถทำงานกับการกำหนดค่าต่างๆ

05:21.410 --> 05:26.120
ได้อย่างไร เรามาไปที่ดัชนีกันก่อน

05:26.120 --> 05:26.120
html

05:26.120 --> 05:30.350
และปรับการนำเข้าของเราที่นี่และมัดจุด

05:30.350 --> 05:30.350
js

05:30.350 --> 05:32.220
และในขณะนี้ เนื่องจากเรายังไม่ได้ใช้ Webpack

05:32.220 --> 05:38.480
Dev Server เรามาเรียกใช้ npm start เพื่อเรียกดัชนีนั้นขึ้นมา

05:38.480 --> 05:38.480
html อีกครั้ง

05:38.480 --> 05:40.510
และถ้าคุณโหลดหน้านี้ใหม่อีกครั้ง

05:40.510 --> 05:44.890
คุณจะเห็นว่ามันใช้งานได้!

05:44.890 --> 05:46.610
หากเราป้อนบางสิ่งที่นี่

05:46.610 --> 05:49.230
โปรเจ็กต์ของเราจะทำงานตามที่ควร และอิมพอร์ตไฟล์

05:49.230 --> 05:56.200
js ที่รวมไว้ที่นี่ ดังนั้นมีเพียงไฟล์เดียวแทนที่จะเป็นไฟล์แต่ละไฟล์ทั้งหมด

05:56.200 --> 05:59.020
และนั่นคือการปรับปรุงแล้ว

05:59.020 --> 06:01.640
ที่นี่เรามีรหัสที่รวมไว้ซึ่งหลีกเลี่ยงคำขอ

06:01.640 --> 06:05.410
htp ที่ไม่จำเป็นเหล่านี้ทั้งหมด

06:05.410 --> 06:07.690
และถ้าคุณไปที่แท็บซอร์ส และคุณต้องการดีบักโค้ดของคุณ

06:07.690 --> 06:09.420
คุณจะพบโฟลเดอร์ Webpack นี้

06:09.420 --> 06:12.770
และในนั้นมีโฟลเดอร์ซอร์ส และคุณสามารถไปที่ไฟล์ TypeScript

06:12.770 --> 06:15.300
ของคุณได้

06:15.300 --> 06:19.090
และตัวอย่างเช่น ที่นี่ บนอินพุตโปรเจ็กต์ คุณสามารถตั้งค่าจุดพักที่นี่บน

06:19.090 --> 06:27.680
GatherUserInput และถ้าคุณกดปุ่มตอนนี้ ปุ่มจะหยุดชั่วคราว และคุณสามารถดีบักโค้ดของคุณได้

06:27.680 --> 06:31.200
และนั่นคือแผนที่ต้นทางที่เข้ามา ซึ่งช่วยให้เราพัฒนาได้อย่างแท้จริง

06:31.200 --> 06:34.050
และทำให้ชีวิตการเป็นนักพัฒนาของเราง่ายขึ้น

06:34.050 --> 06:37.520
เราได้รับโค้ดที่ปรับให้เหมาะสมนี้ แต่ต้องขอบคุณซอร์สแมปที่ทำให้เราดีบักโค้ด

06:37.520 --> 06:40.750
TypeScript ดั้งเดิมของเราได้ที่นี่

06:40.750 --> 06:43.260
ดังนั้นเราจึงมีการตั้งค่าที่ค่อนข้างน่าทึ่งอยู่แล้ว

06:43.260 --> 06:48.440
ซึ่งให้การเพิ่มประสิทธิภาพมากมาย ตอนนี้เรามาทำให้เสร็จและตรวจสอบให้แน่ใจว่าเรามี

06:48.440 --> 06:52.050
Webpack Dev Server รวมอยู่ด้วย และจากนั้นเรามีเวิร์กโฟลว์สองเวิร์กโฟลว์

06:52.050 --> 06:54.440
เวิร์กโฟลว์หนึ่งสำหรับการผลิต และอีกเวิร์กโฟลว์สำหรับการพัฒนา

06:54.440 --> 06:58.443
.
