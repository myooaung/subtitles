WEBVTT

00:02.220 --> 00:03.660
解说员：现在, 为了开始,

00:03.660 --> 00:12.220
我想确保我不必在这里重新运行此命令;这个TFC命令在每次更改后指向一个文件｡

00:12.220 --> 00:17.640
因为现在, 每当我在这里, 在我的TypeScript文件中更改了一些东西,

00:17.640 --> 00:25.270
我想在我的输出文件中反映出来, 在这个网页上, 我们必须保存文件, 再次运行编译,

00:25.270 --> 00:33.270
然后重新加载这个文件;或者, 如果我们运行了NPM启动进程, 这是我们应该有的,

00:33.270 --> 00:46.200
那么至少我们的浏览器会自动重新加载, 如果我们不直接打开文件, 而是在本地主机上：3000.

00:46.200 --> 00:48.910
尽管如此, 即使自动重新加载,

00:48.910 --> 00:52.760
我们仍然必须手动重新运行编译命令｡

00:52.760 --> 00:54.730
因此, 为了消除这种情况,

00:54.730 --> 00:56.620
我们可以进入监视模式｡

00:56.620 --> 01:01.160
这意味着我们可以让TypeScript监视一个文件, 只要该文件发生更改,

01:01.160 --> 01:04.980
TypeScript就会重新编译｡

01:04.980 --> 01:07.260
因此, 我们仍然可以运行相同的命令,

01:07.260 --> 01:10.560
但现在我们在末尾添加--watch,

01:10.560 --> 01:14.010
或者只运行-w｡

01:14.010 --> 01:17.950
如果我们这样做了, 那么我们就处于监视模式,

01:17.950 --> 01:20.940
现在, 每当我们改变了那里的任何东西,

01:20.940 --> 01:22.120
我们保存了它,

01:22.120 --> 01:25.610
所以磁盘上的文件在技术上也改变了, 你看,

01:25.610 --> 01:28.773
这会自动重新编译, 当然, 这也意味着,

01:28.773 --> 01:37.790
如果我们做了任何不允许的事情, 比如, 重新分配给一个常量, 然后是一个错误的类型｡

01:37.790 --> 01:39.320
当然, 每当我们尝试这样做时,

01:39.320 --> 01:40.940
它都会重新编译, 但随后,

01:40.940 --> 01:46.290
就像我们手动运行命令一样, 我们会在下面看到编译错误｡

01:46.290 --> 01:49.510
所以, 手表模式已经是一个很大的改进｡ 

01:49.510 --> 01:55.180
缺点是我们仍然必须在这里专门针对这个文件｡

01:55.180 --> 01:58.980
当然, 目前这是我们正在处理的唯一文件,

01:58.980 --> 02:00.940
但通常在较大的项目中,

02:00.940 --> 02:02.973
情况不一定如此｡
