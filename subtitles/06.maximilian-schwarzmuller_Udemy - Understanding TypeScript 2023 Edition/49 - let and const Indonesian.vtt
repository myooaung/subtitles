WEBVTT

00:02.090 --> 00:04.730
Instruktur: Sekarang sebelum kita menyelami fitur apa pun, terlampir

00:04.730 --> 00:07.002
pada kuliah ini, Anda akan menemukan tautan ke halaman ini.

00:07.002 --> 00:11.350
Halaman ini pada dasarnya mencantumkan semua fitur JavaScript yang

00:11.350 --> 00:13.610
kurang lebih modern, browser mana

00:13.610 --> 00:16.770
yang mendukung fitur-fitur ini dan juga kompiler

00:16.770 --> 00:19.700
mana yang mendukung fitur-fitur ini.

00:19.700 --> 00:23.150
Dan di sana Anda juga menemukan TypeScript, TypeScript dikombinasikan

00:23.150 --> 00:25.310
dengan core-js, yang merupakan penyedia

00:25.310 --> 00:27.210
polyfill.

00:27.210 --> 00:28.820
Tetapi secara umum ini menggambarkan

00:28.820 --> 00:32.070
apa yang TypeScript dapat kompilasi.

00:32.070 --> 00:34.110
Sekarang Anda selalu dapat menggunakan sumber

00:34.110 --> 00:35.990
daya ini jika Anda mencari fitur tertentu seperti,

00:35.990 --> 00:37.960
katakanlah, kata kunci const, Di mana Anda ingin

00:37.960 --> 00:40.860
tahu apakah TypeScript bekerja dengan itu atau tidak.

00:40.860 --> 00:43.340
Kemudian Anda dapat melihat cara kerjanya,

00:43.340 --> 00:46.580
dan batasan apa saja, browser mana yang mendukung ini.

00:46.580 --> 00:48.250
Ini juga, omong-omong, memberi Anda

00:48.250 --> 00:51.090
petunjuk mengenai browser mana yang mungkin ingin Anda targetkan,

00:51.090 --> 00:53.967
mengenai target TypeScript, dan sebagainya.

00:53.967 --> 00:55.260
Jadi, ini adalah sumber daya

00:55.260 --> 00:58.600
hebat yang memungkinkan Anda untuk beralih di antara berbagai iterasi

00:58.600 --> 01:01.940
JavaScript, dan fitur yang diperkenalkan setiap iterasi, dan bagaimana

01:01.940 --> 01:04.220
fitur-fitur ini didukung.

01:04.220 --> 01:06.140
Jadi, gunakan ini sebagai sumber untuk mengetahui

01:06.140 --> 01:08.800
apa yang bisa Anda gunakan, apa yang bisa Anda kompilasi, dan target

01:08.800 --> 01:11.060
mana yang mungkin perlu Anda tetapkan.

01:11.060 --> 01:14.060
Dan dengan itu, mari kita mulai dengan salah satu perkenalan

01:14.060 --> 01:17.030
yang paling penting dan jelas, dan sering digunakan, Next-Gen

01:17.030 --> 01:19.260
JavaScript ditambahkan.

01:19.260 --> 01:21.780
Ngomong-ngomong, dengan Next-Gen JavaScript,

01:21.780 --> 01:24.700
maksud saya, ES6 atau yang lebih baru.

01:24.700 --> 01:27.860
Dan itulah yang saya bicarakan.

01:27.860 --> 01:32.750
Ini memungkinkan Anda untuk mendefinisikan konstanta atau variabel.

01:32.750 --> 01:35.350
Perbedaannya adalah bahwa konstanta, jadi

01:35.350 --> 01:38.730
variabel yang didefinisikan dengan kata kunci const tidak

01:38.730 --> 01:39.910
dapat diubah.

01:39.910 --> 01:42.410
Jika Anda mencoba untuk menetapkan nilai baru di sini bahkan

01:42.410 --> 01:44.270
jika nilai tersebut memiliki tipe yang benar,

01:44.270 --> 01:47.220
Anda akan mendapatkan error karena itu adalah konstanta.

01:47.220 --> 01:48.280
Sekarang, ini adalah kesalahan

01:48.280 --> 01:50.200
yang dibentuk oleh TypeScript.

01:50.200 --> 01:53.340
Dalam Vanilla JavaScript, Anda akan mendapatkan kesalahan oleh browser ketika

01:53.340 --> 01:55.100
Anda menjalankan kode Anda di sini, dan itulah

01:55.100 --> 01:57.280
ide di balik TypeScript, seperti yang Anda pelajari,

01:57.280 --> 02:00.410
kami sudah mendapatkan kesalahan saat Anda menulis kode, karena itu, tentu

02:00.410 --> 02:02.990
saja, lebih baik bagi kami sebagai pengembang.

02:02.990 --> 02:04.930
Ini memungkinkan kita untuk memperbaiki

02:04.930 --> 02:07.820
kode ini lebih awal sebelum mengujinya di konsol.

02:07.820 --> 02:11.330
Jadi oleh karena itu di sini, jika kita menghapusnya atau mengomentari baris

02:11.330 --> 02:12.830
ini, sekarang ia akan dikompilasi

02:12.830 --> 02:14.400
ulang dan, oleh karena itu, kita

02:14.400 --> 02:17.130
juga tidak mendapatkan kesalahan di browser.

02:17.130 --> 02:20.860
Jadi, itu konst. Let adalah variabel yang dapat diubah,

02:20.860 --> 02:23.620
dan oleh karena itu, tentu saja, mirip dengan var.

02:23.620 --> 02:27.260
Var juga masih ada karena JavaScript bekerja sedemikian rupa sehingga

02:27.260 --> 02:29.550
fitur-fiturnya tidak tiba-tiba dihilangkan,

02:29.550 --> 02:33.460
karena browser yang lebih lama dan skripnya mungkin rusak.

02:33.460 --> 02:35.160
Tetapi Anda tidak boleh menggunakan var lagi.

02:35.160 --> 02:37.860
Dan mengapa Anda tidak boleh menggunakan var lagi?

02:37.860 --> 02:39.670
Maksud saya, masuk akal bahwa kita memiliki

02:39.670 --> 02:42.520
const, karena itu benar-benar menambahkan fitur baru, konstanta.

02:42.520 --> 02:43.380
Tetapi mengapa membiarkan?

02:43.380 --> 02:45.380
Mengapa mereka memperkenalkan kata kunci baru di sini?

02:45.380 --> 02:47.223
Mengapa mereka tidak berpegang teguh pada var?

02:48.280 --> 02:51.460
Let dan const memiliki satu perbedaan penting dengan var.

02:51.460 --> 02:53.300
Nah, perbedaan yang jelas untuk const adalah

02:53.300 --> 02:55.240
nilainya tidak bisa diubah, tetapi untuk let,

02:55.240 --> 02:57.040
kita juga mendapatkan perbedaan.

02:57.040 --> 03:00.930
Dan itulah ruang lingkup di mana variabel ini tersedia.

03:00.930 --> 03:04.363
Sekarang Anda harus mengetahui konsep cakupan ini dalam JavaScript.

03:05.609 --> 03:09.260
Dan dengan var, Anda memiliki lingkup global dan fungsi.

03:09.260 --> 03:10.700
Itu berarti bahwa variabel

03:10.700 --> 03:12.550
yang Anda definisikan di luar fungsi

03:12.550 --> 03:15.340
tersedia di mana-mana dalam skrip Anda.

03:15.340 --> 03:17.410
Variabel-variabel yang didefinisikan di dalam

03:17.410 --> 03:19.370
fungsi hanya tersedia di dalam fungsi itu.

03:19.370 --> 03:22.610
Contohnya, di sini. Jika saya memiliki

03:22.610 --> 03:27.610
fungsi tambah, dan mungkin ada dua angka, a dan b.

03:27.670 --> 03:29.750
Kemudian kita bisa menambahkan variabel di sana

03:29.750 --> 03:32.280
dengan var result, katakanlah, dan kita set result = a +

03:32.280 --> 03:34.730
b kemudian, lalu kita kembalikan hasilnya, dan tentu

03:34.730 --> 03:36.230
saja, kita bisa saja menulis ini

03:36.230 --> 03:38.430
dengan cara yang lebih singkat tetapi saya ingin

03:38.430 --> 03:40.570
menunjukkan apa yang dilakukan var.

03:40.570 --> 03:41.860
Dan ini akan baik-baik saja.

03:41.860 --> 03:43.012
Dan hasilnya hanya akan tersedia

03:43.012 --> 03:44.188
di dalam fungsi ini.

03:44.188 --> 03:47.723
Jika saya mencoba untuk konsol log hasil di sini yang

03:47.723 --> 03:49.470
akan gagal karena hanya tersedia

03:49.470 --> 03:52.190
dalam lingkup fungsi ini.

03:52.190 --> 03:53.970
Jika saya mendefinisikannya di luar var harbor

03:53.970 --> 03:56.610
semuanya berfungsi karena sekarang tersedia secara global, oleh karena

03:56.610 --> 03:58.180
itu di sini saya dapat mengaksesnya.

03:58.180 --> 04:00.220
Dan juga, cara JavaScript bekerja, Anda

04:00.220 --> 04:03.580
dapat mengakses variabel pada level yang lebih tinggi.

04:03.580 --> 04:05.210
Jadi, di dalam fungsi, Anda bisa bekerja

04:05.210 --> 04:08.260
dengan variabel yang memiliki scope ke fungsi ini, tetapi semua

04:08.260 --> 04:11.100
variabel memiliki scope yang lebih tinggi, seperti scope

04:11.100 --> 04:12.563
global di sini.

04:13.580 --> 04:14.980
Jadi, itu var.

04:14.980 --> 04:19.180
Sekarang untuk let, perilakunya secara umum sama.

04:19.180 --> 04:21.580
Ini berhasil dan ini berhasil.

04:21.580 --> 04:23.800
Jadi, secara umum sama saja untuk membiarkan.

04:23.800 --> 04:27.180
Tetapi perbedaan penting adalah bahwa untuk var, Anda benar-benar

04:27.180 --> 04:30.860
hanya memiliki ruang lingkup global dan fungsi.

04:30.860 --> 04:32.460
Bagaimana dengan pernyataan if?

04:32.460 --> 04:36.720
Jika kita memeriksa usia > 20 di sini, dan kemudian di sana kita membuat

04:36.720 --> 04:38.889
variabel, isOld, dan mengaturnya

04:38.889 --> 04:41.190
ke true, maka jika konsol log isOld

04:41.190 --> 04:44.500
di sini kita mendapatkan kesalahan dalam TypeScript,

04:44.500 --> 04:46.270
tetapi sebenarnya kita tidak

04:46.270 --> 04:50.090
akan mendapatkannya di JavaScript.

04:50.090 --> 04:53.620
Kode ini di sini, jika Anda mengambilnya hanya untuk melihat bahwa kode ini

04:53.620 --> 04:56.280
berfungsi, dan pindah ke alat pengembang JavaScript di

04:56.280 --> 04:57.190
konsol sana, dan kita

04:57.190 --> 04:59.120
tempelkan di sana dan tekan enter, Anda

04:59.120 --> 05:00.970
melihat true dicetak di sini.

05:01.830 --> 05:02.960
Dan memang, jika Anda mencoba

05:02.960 --> 05:05.040
mengakses isOld, Anda mendapatkan true.

05:05.040 --> 05:08.380
Jadi, variabel isOld ini, didaftarkan secara global, dan

05:08.380 --> 05:10.530
tidak hanya di dalam pernyataan if.

05:10.530 --> 05:11.700
Karena dengan var,

05:11.700 --> 05:13.080
JavaScript tidak mengenal

05:13.080 --> 05:15.860
cakupan lain selain fungsi dan global.

05:15.860 --> 05:17.400
Dan itu berubah dengan membiarkan.

05:17.400 --> 05:19.690
Sekarang, seperti yang saya katakan, TypeScript tetap mengeluh,

05:19.690 --> 05:21.600
karena ini bukan kode yang baik untuk ditulis, tetapi

05:21.600 --> 05:23.170
secara teknis, itu akan berhasil.

05:23.170 --> 05:25.100
Dengan membiarkan, hal itu berubah.

05:25.100 --> 05:26.350
Sekarang dengan let, ini

05:26.350 --> 05:29.880
benar-benar hanya tersedia di dalam tanda kurung kurawal ini.

05:29.880 --> 05:32.300
Karena let dan const memperkenalkan konsep baru

05:32.300 --> 05:33.540
yang disebut block scope,

05:33.540 --> 05:36.550
yang berarti variabel atau konstanta selalu tersedia di

05:36.550 --> 05:40.420
blok di mana Anda mendefinisikannya atau di blok yang lebih rendah.

05:40.420 --> 05:43.060
Dan sebuah blok pada dasarnya selalu merupakan cuplikan yang

05:43.060 --> 05:44.900
dikelilingi dengan kurung kurawal, seperti

05:44.900 --> 05:46.710
yang Anda miliki untuk pernyataan if, dalam

05:46.710 --> 05:48.760
sebuah loop for, dalam sebuah fungsi, atau bahkan,

05:48.760 --> 05:50.590
itu mungkin, jika Anda hanya menambahkan

05:50.590 --> 05:52.670
kurung kurawal seperti ini.

05:52.670 --> 05:54.230
Variabel apa pun yang didefinisikan

05:54.230 --> 05:56.760
di sini hanya akan tersedia di blok itu.

05:56.760 --> 05:57.700
Dan itu hal yang baik

05:57.700 --> 06:00.000
karena memaksa Anda untuk menulis kode yang lebih

06:00.000 --> 06:02.470
bersih dan menghindari situasi seperti ini.

06:02.470 --> 06:03.640
Jadi hanya untuk memberikan bukti

06:03.640 --> 06:05.530
bahwa ada perbedaan di browser, jika saya menyalin kode

06:05.530 --> 06:09.750
ini menggunakan let, dan saya memuat ulang halaman saya di sini, dan sekarang saya memasukkan ini di sini, Anda lihat saya

06:09.750 --> 06:14.706
mendapatkan kesalahan bahwa isOld tidak didefinisikan.

06:14.706 --> 06:14.706
Kami tidak mendapatkan error sebelumnya.

06:14.706 --> 06:19.706
Memang, jika saya mencoba mengeluarkan isOld, saya mendapatkan error itu lagi.

06:20.070 --> 06:21.060
Jadi itulah perbedaannya.

06:21.060 --> 06:23.370
Dan oleh karena itu, let dan const lebih baik, bukan

06:23.370 --> 06:25.740
hanya karena kita mendapatkan fitur konstan ini, tetapi

06:25.740 --> 06:29.150
juga karena kita dipaksa untuk menulis kode yang lebih bersih.

06:29.150 --> 06:30.130
Jadi, izinkan saya mengomentari hal ini

06:30.130 --> 06:31.230
untuk membuatnya berfungsi kembali.
