WEBVTT

00:02.400 --> 00:04.350
Eğitmen: İsim alanları oldukça

00:04.350 --> 00:07.240
güzel, ancak mükemmel olmaları gerekmiyor.

00:07.240 --> 00:09.680
Son derste her bir dosyaya tüm askı durumlarını

00:09.680 --> 00:13.290
manuel olarak eklediğim bir sorun gördük.

00:13.290 --> 00:15.620
Proje listesinden kaldırdığımda, sürükleyip

00:15.620 --> 00:17.340
bıraktığımda, örneğin evet, hala

00:17.340 --> 00:18.900
hatasız derleniyor.

00:18.900 --> 00:20.350
Bu ideal değil.

00:20.350 --> 00:22.360
Şimdi, başka bir dosyanın burada ihtiyaç duyduğum

00:22.360 --> 00:25.047
sürükle-bırak modelini içe aktarıp aktarmadığına bağlı

00:25.047 --> 00:27.550
olarak çalışabilir veya çalışmayabilir.

00:27.550 --> 00:29.100
Ki burada da durum böyle.

00:29.100 --> 00:31.533
Yani teknik olarak, bunu kaldırdıktan sonra

00:31.533 --> 00:33.200
bile burada çalışıyor.

00:33.200 --> 00:35.580
Ama bu harika değil, oldukça tehlikeli.

00:35.580 --> 00:38.560
Bir dosyanın bunu bizim için halledeceğine güvenirsek,

00:38.560 --> 00:41.990
o zaman kıçımızı kurtaran o dosyayı siler veya değiştirirsek,

00:41.990 --> 00:44.830
aniden tamamen ilgisiz bir şeyi değiştiririz

00:44.830 --> 00:49.240
ve uygulamamız çalışmayı durdurur.

00:49.240 --> 00:51.420
Bunu kesinlikle istemiyoruz.

00:51.420 --> 00:53.900
Bu nedenle, hangi dosyadan neyi içe aktardığımızı

00:53.900 --> 00:58.050
açıkça belirten içe ve dışa aktarmalarımız olsaydı iyi olurdu.

00:58.050 --> 00:59.660
Ve burada bir şeye ihtiyacımız

00:59.660 --> 01:01.120
varsa, örneğin Drag Target,

01:01.120 --> 01:03.400
ve bunu açıkça içe aktarmıyorsak, bir

01:03.400 --> 01:04.840
hata alırız.

01:04.840 --> 01:06.450
Temelde istediğimiz de bu.

01:06.450 --> 01:10.235
Ve bu davranışı ES6 modülleri ile elde ederiz.

01:10.235 --> 01:12.930
Şimdi, ES6 modülleri dünya türünün dışında

01:12.930 --> 01:14.800
da mevcuttur, modern tarayıcılar

01:14.800 --> 01:17.340
bunları yerel olarak destekler, tarayıcı

01:17.340 --> 01:19.630
daha sonra yürütüldüğünde temel olarak

01:19.630 --> 01:22.960
bir dosyanın tüm askılarını indirecektir.

01:22.960 --> 01:25.150
Ancak tipler de bunları içe aktarabilir ve

01:25.150 --> 01:28.350
daha sonra bunları kullandığımızda ilk tip desteğini alır.

01:28.350 --> 01:31.007
Şimdi ES6 modülleri nasıl çalışır?

01:31.007 --> 01:33.600
Yine sürükle ve bırak ile başlayalım.

01:33.600 --> 01:35.240
Saf bir tür özelliği olan şu

01:35.240 --> 01:37.360
isim alanı olayını kaldıralım.

01:37.360 --> 01:40.030
Yine de ihracat anahtar kelimesi kalsın.

01:40.030 --> 01:42.150
Export anahtar kelimesi sadece isim

01:42.150 --> 01:44.290
boşlukları ile çalışmak için değil,

01:44.290 --> 01:46.980
aslında typ script tarafından önemli olan varsayılan

01:46.980 --> 01:49.800
bir Java script sözdizimidir.

01:49.800 --> 01:52.360
Bu, bu interfazı ve buradakini de bu dosyadan

01:52.360 --> 01:53.600
dışa aktardığınız

01:53.600 --> 01:56.870
ve daha sonra başka bir dosyaya aktarabileceğiniz

01:56.870 --> 01:58.460
anlamına gelir.

01:58.460 --> 02:01.290
Bizim durumumuzda, proje öğesi ve proje listesi dosyalarında

02:01.290 --> 02:02.980
buna ihtiyacımız var.

02:02.980 --> 02:05.230
Şimdi proje öğesi ile başlayalım.

02:05.230 --> 02:09.030
ES modülünden bir şeyi içe aktarmak için, bu ES modülü sentaksıyla,

02:09.030 --> 02:11.450
herhangi bir gerçek kod yazmaya başlamadan

02:11.450 --> 02:16.110
önce dosyanın en üstünde veya en üstüne yakın bir yerde içe aktarmayı

02:16.110 --> 02:18.970
belirtirsiniz.

02:18.970 --> 02:23.240
Şuradan içe aktar ve ardından içe aktardığınız dosyadan

02:23.240 --> 02:26.220
göreli bir yol ile bu dosyayı işaret

02:26.220 --> 02:27.320
edin.

02:27.320 --> 02:29.340
Yani bu durumda iki nokta ve bir eğik çizgi ile

02:29.340 --> 02:31.030
I seviyesine çıkmamız gerekiyor.

02:31.030 --> 02:32.509
Böylece kaynak klasöründeyiz ve

02:32.509 --> 02:35.550
sonra buraya modüller klasörüne gitmemiz ve sürükle ve bırak özelliğini

02:35.550 --> 02:37.450
içe aktarmamız gerekiyor.

02:37.450 --> 02:40.480
Şimdi önemli, buraya nokta JS ekleyin, çünkü

02:40.480 --> 02:43.480
bu zaten derlenmiş gibi içe aktarmanız gerekir,

02:43.480 --> 02:46.470
çünkü bu vanilla Java script'e alınacaktır

02:46.470 --> 02:49.130
ve daha sonra orada Java script aramalıdır,

02:49.130 --> 02:50.860
bu yüzden Java script dosyaları

02:50.860 --> 02:55.010
için nokta JS'nin eklenmesi gerekir.

02:55.010 --> 02:57.560
Şimdi oradan bir şey içe aktarıyorsunuz ve bunun için

02:57.560 --> 02:59.320
arasına küme parantezleri ekliyorsunuz

02:59.320 --> 03:01.500
ve bu dosyadan ne içe aktarmak istediğinizi

03:01.500 --> 03:03.150
belirtiyorsunuz.

03:03.150 --> 03:06.430
Orada zaten otomatik tamamlama alıyorum, sürüklenebiliri

03:06.430 --> 03:08.480
içe aktarmak istiyorum.

03:08.480 --> 03:10.910
Şimdi draggable burada mevcut ve types

03:10.910 --> 03:14.430
bunun mevcut olmadığını görüyor ve mutlu oluyor.

03:14.430 --> 03:16.860
Şimdi her şeyi çalışma zamanında gösterilebilecek şekilde dönüştürmemiz

03:16.860 --> 03:17.930
gerekiyor.

03:17.930 --> 03:20.370
Öyleyse buradaki isim boşluğundan da kurtulalım.

03:20.370 --> 03:22.340
Şimdi küme parantezini de kapatmanız gerekiyor.

03:22.340 --> 03:24.870
Ve şimdi örneğin burada şimdi istediğimizi alıyoruz,

03:24.870 --> 03:27.540
hatalar alıyoruz, bileşen hatası alıyoruz, proje,

03:27.540 --> 03:29.650
bunların hepsi eksik.

03:29.650 --> 03:31.890
Öyleyse tüm bunları ihraç ve ithal edelim.

03:31.890 --> 03:33.220
Örneğin temel bileşende isim alanından

03:33.220 --> 03:34.540
kurtulun, dışa aktarma anahtar

03:34.540 --> 03:36.810
kelimesini öğrendiğiniz gibi tutun.

03:36.810 --> 03:38.270
Kapanış küme parantezinden

03:38.270 --> 03:40.810
kurtulun ve yeniden biçimlendirip içe aktarın.

03:40.810 --> 03:43.380
İsim alanından her zaman kurtulabiliriz.

03:43.380 --> 03:45.760
Ve buradaki tüm referansları, aslında herhangi bir yerde

03:45.760 --> 03:48.803
sahip olduğunuz tüm referans ithalatlarını silebilirsiniz.

03:51.300 --> 03:53.593
Tüm isim boşluğu küme parantezlerinden kurtulun.

03:55.010 --> 03:56.950
Proje listesi, tüm isim boşluklarından ve

03:56.950 --> 03:58.466
referanslardan kurtulun, aşağıdaki

03:58.466 --> 04:00.690
kapatıcı küme parantezinden kurtulun.

04:00.690 --> 04:03.320
Ve dekoratörler, isim boşluğundan ve kapanış

04:03.320 --> 04:05.330
küme parantezinden kurtulun ve sürükle

04:05.330 --> 04:07.940
ve bırak, zaten ondan kurtulduk.

04:07.940 --> 04:10.230
Proje, isim boşluğundan ve kapanış küme

04:10.230 --> 04:11.920
parantezinden kurtulun.

04:11.920 --> 04:14.460
Proje şaşırtıcı olmayan bir şekilde isim alanından

04:14.460 --> 04:16.223
ve kapanıştan kurtuldu.

04:18.390 --> 04:22.620
Kıvırcık ayraç burada aslında projenin başka bir dosya tarafından içe

04:22.620 --> 04:24.740
aktarılmasına güveniyorduk, burada

04:24.740 --> 04:26.620
ona referansım yoktu.

04:26.620 --> 04:28.770
İşte bahsettiğim tehlikeli davranış

04:28.770 --> 04:29.880
buydu.

04:29.880 --> 04:31.871
İçe aktarmasaydık veya başka bir dosyadaki

04:31.871 --> 04:35.120
ad alanında proje parçamıza referans vermeseydik bu başarısız

04:35.120 --> 04:36.710
olabilirdi.

04:36.710 --> 04:39.090
Yani bu kesinlikle ideal değildi.

04:39.090 --> 04:41.560
Ama bununla birlikte yeniden düzenlememize devam edelim.

04:41.560 --> 04:44.430
Doğrulamada, buradaki isim boşluğundan ve alttaki

04:44.430 --> 04:46.050
tüm kapatıcı küme parantezlerinden

04:46.050 --> 04:47.550
kurtulun.

04:47.550 --> 04:49.150
Ve son olarak bir uygulama TS, bu

04:49.150 --> 04:51.503
ithalatlardan ve isim alanından kurtulun.

04:52.700 --> 04:55.350
Şimdi her yerde hatalar var ama şimdi baştan

04:55.350 --> 04:56.988
başlayabiliriz.

04:56.988 --> 04:59.560
Şimdi temel bileşende baştan başlayalım.

04:59.560 --> 05:01.610
Bu iyi görünüyor, şikayet etmiyor istediği

05:01.610 --> 05:03.700
her şeye sahip gibi görünüyor.

05:03.700 --> 05:06.250
Proje ithalatı, şikayet ediyor.

05:06.250 --> 05:08.450
Örneğin orada bileşenlere ihtiyacımız var.

05:08.450 --> 05:12.070
Şimdi en üste bir içe aktarma ekleyelim ve bileşeni

05:12.070 --> 05:15.830
nokta eğik çizgi temel bileşeninden içe aktaralım.

05:15.830 --> 05:18.410
Aynı klasörde bir şey varsa bu şekilde nispeten

05:18.410 --> 05:19.990
içe aktarırsınız.

05:19.990 --> 05:22.370
Başta nokta eğik çizgi, sonra dosya adı

05:22.370 --> 05:24.490
ve sonra hepsi önemli nokta JS.

05:24.490 --> 05:26.753
Sondaki nokta JS'yi unutmayın.

05:28.100 --> 05:30.250
Şimdi burada da validatable interphase'e

05:31.170 --> 05:34.650
ve validate metoduna, auto mind'e ve project state'e

05:34.650 --> 05:36.810
ihtiyacımız var.

05:36.810 --> 05:39.140
Öyleyse tüm bunları içe aktaralım,

05:39.140 --> 05:44.080
nokta eğik çizgiden içe aktaralım veya hayır bir seviye yukarı çıkalım,

05:44.080 --> 05:46.149
sonra kullanalım, sonra doğrulama

05:46.149 --> 05:49.460
nokta JS, Bu Dosyadan içe aktaralım, validatable

05:49.460 --> 05:52.100
ve validate işlevi ve otomatik bağlamayı

05:53.010 --> 05:56.250
içe aktaralım, bir seviye yukarı çıkalım dekoratörler

05:56.250 --> 06:00.350
otomatik bağlama JS.

06:00.350 --> 06:02.600
Ve son olarak proje durumunu

06:02.600 --> 06:05.220
bir seviye yukarı çıkarak içe aktaralım

06:05.220 --> 06:07.580
proje durumu JS .

06:07.580 --> 06:11.000
Oradan dışa aktardığımız proje durumu sabitini

06:11.000 --> 06:13.250
içe aktarabiliriz.

06:13.250 --> 06:15.390
Şimdi bu dosyanın çalışması için ihtiyacımız olan

06:15.390 --> 06:16.773
tüm içe aktarmalar bunlar.

06:18.190 --> 06:20.480
Şimdi proje maddesine geçelim.

06:20.480 --> 06:23.270
Orada autobind'e ihtiyacımız var, bileşene ihtiyacımız var,

06:23.270 --> 06:24.853
proje modeline ihtiyacımız var.

06:24.853 --> 06:26.700
O halde tüm bunları ekleyelim.

06:26.700 --> 06:30.520
Örneğin proje modelini dot dot slash

06:30.520 --> 06:34.523
models project JS'den içe aktaralım.

06:35.580 --> 06:38.080
Aynı klasörde bulunan bileşeni

06:39.340 --> 06:41.110
de ekleyelim.

06:41.110 --> 06:45.530
Bu yüzden dot slash temel bileşen JS'yi ve auto bind'ı

06:45.530 --> 06:49.020
içe aktarın, auto bind'ı dot dot slash

06:50.790 --> 06:55.790
dekoratörleri auto bind JS'den içe aktaralım.

06:56.020 --> 06:59.383
Ve şimdi bu dosya da ihtiyacı olan her şeye sahip.

07:01.260 --> 07:03.410
Şimdi proje listesine geçelim.

07:03.410 --> 07:06.610
Burada proje listesinde de bileşene ihtiyacımız var, bu

07:06.610 --> 07:10.250
yüzden aslında bunu proje öğesinden buraya kopyalayacağız ve TS

07:10.250 --> 07:14.260
proje listesine ekleyeceğiz, ancak burada draggoble'a ihtiyacımız

07:14.260 --> 07:16.120
yok, bunun yerine hedefi sürüklemeye

07:16.120 --> 07:19.420
ihtiyacımız var, bu yüzden bunu içe aktaralım.

07:19.420 --> 07:22.307
Ayrıca proje durumuna da

07:22.307 --> 07:24.550
ihtiyacımız var.

07:24.550 --> 07:26.540
Evet, ihtiyacımız olan şeyler bunlar.

07:26.540 --> 07:28.780
Ve ayrıca proje öğesi sınıfı.

07:28.780 --> 07:31.030
Böylece proje model dosyasından proje durumunu

07:31.030 --> 07:32.720
da içe aktarabiliriz.

07:32.720 --> 07:35.340
Aynı dosyadan birden fazla dışa aktarılan

07:35.340 --> 07:36.840
şeyi, burada gördüğünüz

07:36.840 --> 07:38.730
gibi bu küme parantezleri arasında

07:38.730 --> 07:41.740
virgülle ayırarak içe aktarabilirsiniz.

07:41.740 --> 07:45.910
Ayrıca proje durumu sabitini state klasöründen, proje

07:46.790 --> 07:48.790
durumu JS'den içe aktarıyoruz

07:48.790 --> 07:52.470
ve ayrıca son olarak, burada en altta ihtiyacımız

07:52.470 --> 07:54.790
olan proje öğesi sınıfını içe

07:54.790 --> 07:57.130
aktarıyoruz.

07:57.130 --> 08:01.770
Yani proje öğesini nokta eğik çizgi proje öğesi nokta

08:01.770 --> 08:03.623
JS'den içe aktarın.

08:06.810 --> 08:08.280
O zaman devam edelim.

08:08.280 --> 08:11.280
Autobind iyi, proje durumu orada şikayet ediyor,

08:11.280 --> 08:13.600
proje modeline ihtiyacımız var.

08:13.600 --> 08:15.740
Bu yüzden en üstte bir seviye

08:16.820 --> 08:20.300
yukarı çıkarak proje nokta JS modellerini

08:20.300 --> 08:22.823
içe aktaralım.

08:24.450 --> 08:27.630
Ayrıca burada proje durumunu kullanıyoruz, bu yüzden

08:27.630 --> 08:29.573
bunu aynı dosyadan içe aktaralım'

08:32.320 --> 08:33.960
Ve bununla birlikte, son olarak,

08:33.960 --> 08:35.660
proje girdisini içe aktarmamız

08:35.660 --> 08:38.810
gereken uygulama TS dosyasını alıyoruz.

08:38.810 --> 08:43.610
nokta eğik çizgi bileşenlerinden proje girişi.

08:43.610 --> 08:48.030
JS ve proje listesi JS'den proje listesi' Şimdi bunu

08:49.290 --> 08:52.280
kaydettiysek, hatasız derlenmelidir

08:52.280 --> 08:54.330
ve şimdi ithalat ve ihracatlarımızı

08:54.330 --> 09:00.823
düzenlemek için ES6 modüllerini kullanıyoruz.

09:02.640 --> 09:05.460
Tarayıcıya baktığımızda ise bir

09:05.460 --> 09:07.040
hata alıyoruz.

09:07.040 --> 09:09.390
Şimdi bunun nedeni, dist klasörünü kontrol edersek

09:09.390 --> 09:12.013
bundle JS dosyamızı doğru almış olmamızdır.

09:13.040 --> 09:15.900
Şimdi TS yapılandırmasını tekrar değiştirmemiz gerekiyor.

09:15.900 --> 09:19.070
Burada AMD yerine ES yirmi

09:19.070 --> 09:22.420
on beş kullanmalıyız.

09:22.420 --> 09:25.710
Than temel olarak ES modüllerini tanıtan agma

09:25.710 --> 09:27.240
betiği sürümü olan ES6'nın

09:27.240 --> 09:29.300
kod sözcüğüdür.

09:29.300 --> 09:31.260
Yani temel olarak kod tipine içe aktarımlarımızı

09:31.260 --> 09:34.480
hiçbir şeye dönüştürmemesini, olduğu gibi tutmasını

09:34.480 --> 09:36.240
söylüyoruz.

09:36.240 --> 09:39.250
Modern tarayıcılar bunu anlayacaktır.

09:39.250 --> 09:41.290
Bu yüzden bu önemlidir, ayrıca burada ES6

09:41.290 --> 09:43.433
veya daha yüksek bir hedefiniz olduğundan

09:44.950 --> 09:47.530
emin olun' Şimdi ayrıca out dosyasını tekrar yorumlamanız

09:47.530 --> 09:50.670
gerekir, çünkü bu ES modülleri ile desteklenmez.

09:50.670 --> 09:53.590
Ve bununla birlikte dist klasöründe elde edeceğiniz şey

09:53.590 --> 09:56.610
temelde kaynak klasörünüzün bir kopyasıdır, ancak Java komut

09:56.610 --> 09:58.690
dosyası dosyalarıyla birlikte.

09:58.690 --> 10:00.480
Şimdi de index HDML dosyasına geri

10:00.480 --> 10:03.120
dönmemiz ve app JS'yi tekrar içe aktarmamız gerekiyor,

10:03.120 --> 10:04.840
çünkü artık dist klasöründe bir

10:04.840 --> 10:06.350
app JS dosyamız var.

10:06.350 --> 10:08.910
Ve yine bu uygulama JS dosyasında içe aktarma ifadeleriniz

10:08.910 --> 10:11.180
olacaktır, çünkü bahsettiğim gibi, bu Java script,

10:11.180 --> 10:13.830
modern Java script motorları ve modern tarayıcılar tarafından

10:13.830 --> 10:15.900
desteklenmektedir.

10:15.900 --> 10:17.440
Bu nedenle tarayıcı bu içe aktarmaları

10:17.440 --> 10:19.440
sizin için çözecektir.

10:19.440 --> 10:22.430
Şimdi bunu yeniden yüklersek, yine

10:22.430 --> 10:24.240
bir hata alırız.

10:24.240 --> 10:27.310
Bir modül dışında import deyimi kullanılamaz.

10:27.310 --> 10:30.630
Modern tarayıcılar bu sintex'i destekler ancak kullanmak

10:30.630 --> 10:33.150
istediğinizi onlara söylemeniz gerekir.

10:33.150 --> 10:37.470
Ve onlara buradaki (mırıldanmalar) ifadesini kaldırarak ve bunun yerine bu imports

10:37.470 --> 10:39.670
ifadelerini içeren bir dosyayı içe aktardığınız

10:39.670 --> 10:42.777
script etiketinde söyleyebilirsiniz.

10:42.777 --> 10:46.313
Type equals modülünü kullanırsınız.

10:47.300 --> 10:50.450
Şimdi bunu güvenli hale getirirseniz, bunun çalıştığını

10:50.450 --> 10:53.440
görürsünüz ve şimdi buraya bir şey eklersek tekrar

10:53.440 --> 10:56.120
çalışan bir uygulama elde ederiz.

10:56.120 --> 10:58.910
Bu arada ağ sekmesini incelerseniz, yeniden

10:58.910 --> 11:01.680
yüklediğinizde bir sürü ağ isteğinin devam

11:01.680 --> 11:05.290
ettiğini göreceksiniz, biraz uzaklaştırırsam daha

11:05.290 --> 11:07.410
iyi görebiliriz.

11:07.410 --> 11:10.340
Tüm Java script dosyalarımız burada talep edilmektedir.

11:10.340 --> 11:12.810
Bunlar, ithalatımızla karşılaştığında tarayıcı tarafından

11:12.810 --> 11:14.780
otomatik olarak talep edilir.

11:14.780 --> 11:16.967
Böylece uygulama JS ile başlar, ardından

11:16.967 --> 11:19.410
proje giriş JS'sine aktarımı görür.

11:19.410 --> 11:21.990
Burada ve dolayısıyla elbette bir sonraki talep proje

11:21.990 --> 11:23.160
girişine gider.

11:23.160 --> 11:25.410
Aynı şeyi proje listesi için de yapar.

11:25.410 --> 11:27.360
Şimdi proje girişinde örneğin

11:27.360 --> 11:29.422
temel bileşen JS'den bir giriş görecektir,

11:29.422 --> 11:31.450
bu yüzden prob temel bileşen JS'yi

11:31.450 --> 11:33.400
de içe aktarır.

11:33.400 --> 11:35.530
Bu tarayıcı tarafından yapılır, biz

11:35.530 --> 11:38.170
de bundan faydalanırız ve şimdi dosyalarımızı

11:38.170 --> 11:40.850
bölmenin başka bir yoluna sahibiz, ancak ek

11:40.850 --> 11:43.750
bir avantajla her dosyadan neye ihtiyacımız olduğunu

11:43.750 --> 11:45.850
açıkça belirtiriz ve bir içe aktarmayı

11:45.850 --> 11:49.100
atlarsak, type-script bize bağırır, önceki yaklaşımda

11:49.100 --> 11:51.127
bunu yapmadı, bu yaklaşımın aslında

11:51.127 --> 11:53.400
benim tavsiyem olmasının ve içe ve dışa

11:53.400 --> 11:58.870
aktarmanın defacto standart yolu olmasının nedeni budur.

11:58.870 --> 12:00.710
Şimdi, daha önce başka projelerde,

12:00.710 --> 12:03.850
örneğin bir angular projesinde type script ile çalıştıysanız,

12:03.850 --> 12:06.380
burada bir dosya uzantısı belirtmek zorunda kalmamaya

12:06.380 --> 12:07.980
da alışmış olabilirsiniz Web paketi

12:07.980 --> 12:12.210
ve bir fatura aracı eklediğimizde bunu da atlayabileceğiz.

12:12.210 --> 12:14.580
Buna sahip olmadığımız ve dosyalarımızı içe aktarmak

12:14.580 --> 12:16.870
için tarayıcıya güvendiğimiz sürece, bu ekstra

12:16.870 --> 12:18.833
uzantıyı eklemeniz gerekir.
