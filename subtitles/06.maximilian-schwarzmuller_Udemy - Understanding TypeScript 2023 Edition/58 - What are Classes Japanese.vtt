WEBVTT

00:02.100 --> 00:07.040
講師：クラスを理解するために､ オブジェクト指向プログラミングを理解しましょう｡

00:07.040 --> 00:12.560
さて､ あなたの知識のレベルにもよりますが､ もしあなたが最新のJavaScriptや他のプログラミング言語を使っていたなら､

00:12.560 --> 00:22.270
クラスが何のためにあるのか､ OOPオブジェクト指向プログラミングが何なのかについて知っているかもしれませんね｡

00:22.270 --> 00:24.570
そのため､ この講義を飛ばして､

00:24.570 --> 00:27.720
コードを書く部分に飛ぶことも可能です｡

00:27.720 --> 00:29.330
そうでなければ､ このことを理解することが重要なので､

00:29.330 --> 00:32.200
ぜひお付き合いください｡

00:32.200 --> 00:35.240
オブジェクト指向プログラミングの考え方は､

00:35.240 --> 00:38.550
クラスが重要であることがおわかりいただけると思いますが､

00:38.550 --> 00:43.110
コードの中で現実の実体を扱うと言うことです｡

00:43.110 --> 00:47.370
少なくとも開発者としてコードを推論しやすくするために､

00:47.370 --> 00:56.250
現実のものにできるだけ似せたオブジェクトでコード内のものを扱うようにします｡

00:56.250 --> 01:01.270
例えば､ オンラインショップを構築し､ そこに商品リストを用意することがあります｡

01:01.270 --> 01:08.140
したがって､ 商品リストを管理するために必要なすべてを備えた商品リスト・オブジェクトで作業するのがよいでしょう｡

01:08.140 --> 01:13.370
リストそのものであるリードプロダクトに商品を追加するメソッドです｡

01:13.370 --> 01:18.360
例えば､ サービスやデータベースから取得した商品のリストをレンダリングし､

01:18.360 --> 01:22.840
管理する役割を持つオブジェクトがこれにあたる｡

01:22.840 --> 01:27.260
つまり､ レンダリングやフェッチ､ 管理ロジックはすべてこの製品に集約されているわけです｡

01:27.260 --> 01:29.420
今のは製品リストです｡ 

01:29.420 --> 01:32.510
私たちが作っているウェブサイトへのプログラムでは､

01:32.510 --> 01:36.000
個々の製品との連携も必要かもしれませんね｡

01:36.000 --> 01:39.540
そのため､ 1つの商品を管理するためのオブジェクト､

01:39.540 --> 01:43.930
または複数のオブジェクトが必要かもしれません｡

01:43.930 --> 01:47.180
その商品の詳細を保持し､ レンダリングし､ カートに入れることができる､

01:47.180 --> 01:51.260
といったようなことです｡

01:51.260 --> 01:54.900
ユーザーインターフェースを画面に表示する場合､ JavaScript､

01:54.900 --> 02:00.550
つまりTypeScriptで管理することになりますが､ これを商品リストと商品オブジェクトで実装すると､

02:00.550 --> 02:07.760
基礎データの管理だけでなく､ 画面にコンテンツを表示するためのロジックを保持することができます｡

02:07.760 --> 02:11.940
そしてもちろん､ この2つのオブジェクトはある種の関連性を持っています｡

02:11.940 --> 02:18.040
また､ 画面上にショッピングカートオブジェクトがあり､ ショッピングカードのレンダリングと管理を担当することもあります｡

02:18.040 --> 02:20.380
もちろん､ 製品にもつながっています｡ 

02:20.380 --> 02:22.930
それゆえ､ ショッピングカードのレンダリング､

02:22.930 --> 02:28.073
注文､ サーバーとの通信など､ 必要なロジックをすべて保持しているのです｡

02:28.073 --> 02:31.190
だから､ 私たちが作っているアプリケーションをどう考えるか､

02:31.190 --> 02:33.010
その1つの方法でしょう｡

02:33.010 --> 02:37.670
いかにして人間として納得のいく論理的なピースに分割するか｡

02:37.670 --> 02:40.320
そして､ TypeScriptやJavaScriptのコードでは､

02:40.320 --> 02:42.920
ほとんどの最新のプログラミング言語では､ プロパティやメソッドを保持する､

02:42.920 --> 02:50.640
より複雑なデータ構造であるオブジェクトがあるため､ これが積極的にサポートされているのです｡

02:50.640 --> 02:53.340
もちろん､ JavaScriptにもありますよ｡ 

02:53.340 --> 02:57.310
でも､ それを手助けしてくれる授業もあるかもしれませんね｡ 

02:57.310 --> 02:59.100
さて､ 授業はどのような考えで行われているのでしょうか｡ 

02:59.100 --> 03:00.740
また､ インスタンスとは何でしょうか？

03:00.740 --> 03:02.030
このようなオブジェクトを取得し､

03:02.030 --> 03:04.690
オブジェクト指向のアプローチに従えば､

03:04.690 --> 03:13.750
アプリやアプリケーションのロジックを､ ロジックの一部を管理するこのようなオブジェクトに分割することを検討できます｡

03:13.750 --> 03:17.000
さて､ このオブジェクトを使うという考えと関連して､

03:17.000 --> 03:23.910
もちろんJavaScriptにもオブジェクトは存在します｡

03:23.910 --> 03:27.470
オブジェクトは､ 私たちがコードで扱う具体的なものです｡ 

03:27.470 --> 03:33.450
メソッドを実行するためのデータを格納するために使用するデータ構造です｡

03:33.450 --> 03:36.570
クラスはオブジェクトの設計図である｡ 

03:36.570 --> 03:40.880
クラスは､ オブジェクトがどのように見えるか､ どのようなデータを保持するか､

03:40.880 --> 03:42.230
どのようなメソッドを持つべきかを定義し､

03:42.230 --> 03:48.240
そのクラスに基づいてオブジェクトを簡単に構築できるようにするものである｡

03:48.240 --> 03:51.830
そして､ これをクラスのインスタンスと呼びます｡ 

03:51.830 --> 03:54.830
つまり､ オブジェクトは､ あるクラスをベースにしていれば､

03:54.830 --> 03:56.850
そのクラスのインスタンスになるわけで､

03:56.850 --> 04:04.090
同じクラスをベースにして､ 同じ構造､ 同じメソッドを持つ複数のオブジェクトを素早く複製することができるのです｡

04:04.090 --> 04:07.280
つまり､ クラスは､ オブジェクトがどのように見えるか､ どのようなプロパティやメソッドを持つか､

04:07.280 --> 04:10.170
などを定義するのに役立つのです｡

04:10.170 --> 04:14.920
つまり､ オブジェクトの作成を高速化するためにクラスが存在するのです｡ 

04:14.920 --> 04:20.070
そして､ すでにご存知のオブジェクト・リテラル表記を使うという単純な代替手段です｡

04:20.070 --> 04:21.330
単純に楽をしているだけなのです｡ 

04:21.330 --> 04:24.620
クラスは､ 一般に同じ構造と同じメソッドを持ち､

04:24.620 --> 04:32.780
そこに格納されるデータの詳細が異なるだけの複数のオブジェクトを簡単に作成できるようにするものである｡

04:32.780 --> 04:36.670
例えば､ 複数の人物をオブジェクトで表現したいとします｡

04:36.670 --> 04:39.330
まあ､ 一人ひとりに名前と年齢があって､

04:39.330 --> 04:40.830
価値観は違うかもしれませんが､

04:40.830 --> 04:43.310
大まかな構造は同じです｡

04:43.310 --> 04:44.500
という理屈なんですね｡ 

04:44.500 --> 04:46.113
実際に見てみましょう｡ 
