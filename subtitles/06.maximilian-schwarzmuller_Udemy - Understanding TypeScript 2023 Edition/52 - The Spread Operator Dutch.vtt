WEBVTT

00:02.250 --> 00:04.530
Instructeur: We hebben ook nuttige

00:04.530 --> 00:09.240
functies met betrekking tot arrays en objecten en hoe we de gegevens

00:09.240 --> 00:13.600
die zijn opgeslagen in arrays en objecten kunnen ophalen.

00:13.600 --> 00:17.180
Laten we daarvoor een nieuwe array toevoegen, laten we zeggen

00:17.180 --> 00:19.880
hobby's en dat kan een array van strings zijn.

00:22.520 --> 00:26.700
Zoals sport en koken hier en nu kunnen we natuurlijk

00:26.700 --> 00:33.030
elementen opvragen per index hier, zoals dit bijvoorbeeld.

00:33.030 --> 00:36.150
Maar, je moet deze basis JavaScript dingen weten.

00:36.150 --> 00:40.310
Next Gen JavaScript, introduceert een leuke functie als we alle

00:41.172 --> 00:43.910
waarden van een array willen extraheren.

00:43.910 --> 00:44.990
Wanneer heb je dat nodig?

00:44.990 --> 00:48.670
Laten we zeggen dat je de actieve hobby's hebt

00:48.670 --> 00:53.670
en dat is een reeks waar ik wandelen als hobby heb, en nu wil ik sport

00:54.200 --> 00:56.510
en koken toevoegen.

00:56.510 --> 00:58.960
Nu kunnen we een item toevoegen aan actieve hobby's

00:58.960 --> 01:01.290
door push aan te roepen, voor het geval je je

01:01.290 --> 01:05.620
afvraagt hoe ik kan pushen naar een constante, bedenk dan dat arrays objecten zijn

01:05.620 --> 01:08.130
en objecten referentiewaarden.

01:08.130 --> 01:11.010
Als we drukken, veranderen we een geheugen, maar niet het adres.

01:11.010 --> 01:14.150
Als dit je niets zegt, kijk dan naar de extra bronnen die

01:14.150 --> 01:17.390
ik bij deze lezing heb gevoegd over dat onderwerp, dus terug

01:17.390 --> 01:20.170
naar dit voorbeeld dan, we kunnen hier pushen, maar

01:20.170 --> 01:24.120
pushen, als we de hobby's pushen, voegen we hobby's toe als een nieuwe

01:24.120 --> 01:27.540
array in de array, dus als een nieuwe geneste array.

01:27.540 --> 01:30.920
Welke types het eigenlijk zou detecteren, het vertelt me

01:30.920 --> 01:33.690
dat als ik een string array wil toevoegen aan een

01:33.690 --> 01:36.143
array van strings, dat niet in orde is.

01:37.110 --> 01:40.390
Dus in plaats daarvan neemt push enkelvoudige waarden

01:40.390 --> 01:44.450
aan, zodat we hobby's nul kunnen doorgeven, eigenlijk neemt push

01:44.450 --> 01:47.450
zelfs een onbeperkt aantal argumenten aan, zodat

01:47.450 --> 01:51.240
we meerdere items tegelijk kunnen pushen.

01:51.240 --> 01:54.013
Maar dat is een beetje omslachtig en daar komt de Spread Operator

01:54.013 --> 01:54.890
om de hoek kijken.

01:54.890 --> 01:57.700
Het ziet er zo uit, het zijn drie puntjes en ja dit ziet

01:57.700 --> 02:00.850
er vreemd uit maar dit is een geldige JavaScript Operator

02:00.850 --> 02:04.770
ondersteund door [Hypescript? ] en daarna specificeren we

02:04.770 --> 02:09.547
of wijzen we naar de array of het object, zoals je ook zult leren, dat

02:09.547 --> 02:11.700
we willen verspreiden.

02:11.700 --> 02:15.160
Dus wat dit doet is, het vertelt JavaScript op het einde, want dat

02:15.160 --> 02:17.690
is een Vanilla JavaScript Operator beschikbaar

02:17.690 --> 02:21.070
in Modern JavaScript, dus het vertelt JavaScript om alle elementen

02:21.070 --> 02:25.500
na de array eruit te halen en ze in feite toe te voegen als een lijst van waarden, dus

02:25.500 --> 02:28.530
niet als een array maar een lijst van individuele waarden

02:28.530 --> 02:31.900
op de plaats waar je een Operator hebt gebruikt, dus hier is bijvoorbeeld

02:31.900 --> 02:33.950
een lijst van argumenten doorgegeven

02:33.950 --> 02:36.090
aan push en nu een plaats waar je dat zou

02:36.090 --> 02:39.180
kunnen gebruiken is direct wanneer je een nieuwe array

02:39.180 --> 02:41.740
maakt.

02:41.740 --> 02:46.220
Daar kun je ook een bestaande array verspreiden in die array.

02:46.220 --> 02:48.950
Dus wanneer u een door komma's gescheiden lijst van waarden

02:48.950 --> 02:51.460
nodig hebt, kunt u de Spread Operator gebruiken met een

02:51.460 --> 02:54.360
array om zo'n door komma's gescheiden lijst te krijgen.

02:54.360 --> 02:56.660
Dat is het idee van de Spread Operator

02:56.660 --> 02:59.230
en daarom is het echt nuttig om elementen uit

02:59.230 --> 03:00.663
een array te halen.

03:01.860 --> 03:04.380
De Spread Operator, dat alles bestaat

03:04.380 --> 03:07.880
niet alleen op arrays, maar ook op objecten.

03:07.880 --> 03:10.990
Laten we zeggen dat we een persoon hebben met een naamsleutel,

03:10.990 --> 03:14.070
Max en een h-sleutel die 30 is, en nu willen we een gekopieerde

03:14.070 --> 03:16.640
persoon maken.

03:16.640 --> 03:19.060
Als we zo een persoon toewijzen, kopiÃ«ren

03:19.060 --> 03:22.680
we eigenlijk de pointer naar dit persoon-object in

03:22.680 --> 03:25.000
het geheugen naar deze kopie person

03:25.000 --> 03:27.050
constante.

03:27.050 --> 03:30.470
En nogmaals, controleer mijn bijgevoegde referentiewaarde

03:30.470 --> 03:32.360
bronnen als dat je niet veel zegt.

03:32.360 --> 03:36.190
Dus we maken niet echt een kopie van dat object.

03:36.190 --> 03:38.610
Om nu een echte kopie te maken, kunnen we de spread

03:38.610 --> 03:40.880
operator met objecten gebruiken.

03:40.880 --> 03:43.400
We maken een nieuw object met accolades

03:43.400 --> 03:46.510
en dan gebruiken we de Spread Operator, drie puntjes

03:46.510 --> 03:49.630
met ons eerste object dat u wilt kopiÃ«ren.

03:49.630 --> 03:52.970
Wat dit nu doet is alle elementen eruit halen, maar natuurlijk

03:52.970 --> 03:56.310
zijn de elementen hier sleutelwaardeparen en geen losse

03:56.310 --> 03:58.630
waarden zoals bij een array.

03:58.630 --> 04:00.550
Hier hebben we sleutel-waarde paren.

04:00.550 --> 04:04.110
Dus deze sleutelwaardeparen worden daaruit gehaald

04:04.110 --> 04:08.010
en kunnen dan overal worden gebruikt waar je sleutelwaardeparen

04:08.010 --> 04:11.310
nodig hebt, wat meestal een object is waar je ze nooit

04:11.310 --> 04:12.920
aan toevoegt.

04:12.920 --> 04:15.447
Dus daarom worden aan dit anders lege object nu

04:15.447 --> 04:19.100
de sleutelwaardeparen van persoon toegevoegd, en aangezien we hier

04:19.100 --> 04:21.240
een nieuw object hebben gemaakt, en alleen

04:21.240 --> 04:23.700
sleutelwaardeparen toevoegen, hebben we een

04:23.700 --> 04:27.310
perfecte kopie van het oorspronkelijke object en niet alleen van

04:27.310 --> 04:29.080
de pointer die naar het object in

04:29.080 --> 04:30.803
het geheugen wijst.
