WEBVTT

00:02.130 --> 00:02.963
Instrutor: Assim, cobrimos

00:02.963 --> 00:05.180
alguns dos tipos de núcleo que o TypeScript conhece.

00:05.180 --> 00:06.590
Agora vamos seguir em frente.

00:06.590 --> 00:09.140
Para isso, renomearei app. ts aqui para objs-arrays-enums,

00:09.140 --> 00:11.670
ou o que você quiser nomear, basicamente para que ainda tenhamos

00:11.670 --> 00:12.750
esse arquivo, mas eu criarei

00:12.750 --> 00:17.130
um aplicativo novinho em folha.

00:17.130 --> 00:17.130
ts

00:17.130 --> 00:18.860
para que tenhamos um arquivo vazio novamente,

00:18.860 --> 00:20.500
no qual possamos trabalhar.

00:20.500 --> 00:22.550
Agora, neste arquivo, quero mergulhar em

00:22.550 --> 00:25.790
outro tipo interessante que você encontrará em TypeScript.

00:25.790 --> 00:28.640
E esse é o tipo de sindicato.

00:28.640 --> 00:30.190
O que é isso agora?

00:30.190 --> 00:33.000
Voltemos à nossa função de adição, que escrevemos anteriormente,

00:33.000 --> 00:34.490
vou copiá-la e passá-la para

00:34.490 --> 00:37.270
a aplicação. ts.

00:37.270 --> 00:39.190
Livre-se desse comentário aqui, e aqui

00:39.190 --> 00:42.940
em adição, vamos fechar o básico. ts para que possamos nos livrar

00:42.940 --> 00:44.170
desse erro.

00:44.170 --> 00:47.970
Aqui, além disso, quero agora ser mais flexível em relação

00:47.970 --> 00:49.920
ao que aceitamos aqui.

00:49.920 --> 00:52.570
Eu também vou me livrar do showResultado e da

00:52.570 --> 00:54.370
frase, não preciso disso.

00:54.370 --> 00:55.690
E a única coisa que eu quero

00:55.690 --> 00:58.590
fazer é calcular um resultado e devolvê-lo.

00:58.590 --> 01:01.960
Mas eu quero ser mais flexível em relação aos insumos.

01:01.960 --> 01:06.045
Anteriormente, nós nos certificávamos de trabalhar apenas com números.

01:06.045 --> 01:09.357
Agora, digamos que realmente nomeamos esta combinação

01:09.357 --> 01:13.190
e ela deve funcionar tanto com números quanto com cordas.

01:13.190 --> 01:15.710
Como acontece que podemos combinar números

01:15.710 --> 01:18.595
e cordas com este operador mais, a única diferença

01:18.595 --> 01:21.650
é que em um cenário, recebemos de volta um número

01:21.650 --> 01:24.030
como resultado, no outro cenário recebemos

01:24.030 --> 01:27.120
uma corda concatenada, como na verdade já vimos

01:27.120 --> 01:30.150
no início deste módulo.

01:30.150 --> 01:32.040
Mas agora eu quero permitir este comportamento,

01:32.040 --> 01:33.950
porque você pode ter uma aplicação onde

01:33.950 --> 01:36.740
você quer ter uma função de combinação flexível que funcione

01:36.740 --> 01:38.963
com números e cordas.

01:39.830 --> 01:42.360
Portanto, também vou nomear esta

01:42.360 --> 01:47.340
entrada1 aqui, e esta entrada2, e combinar estas duas agora.

01:47.340 --> 01:49.740
Mas é claro que teremos um problema, neste

01:49.740 --> 01:53.180
momento definimos os dois parâmetros como sendo números.

01:53.180 --> 01:56.050
Isto significa que podemos chamar esta função, desde que

01:56.050 --> 01:58.190
que queiramos trabalhar com números.

01:58.190 --> 01:59.130
Digamos que, lá embaixo,

01:59.130 --> 02:01.640
estamos criando uma nova constante, a combinação de Ágios.

02:02.931 --> 02:04.690
E aí eu chamo de combinar

02:04.690 --> 02:09.602
e passar em 30 e 26 anos aqui como idades em qualquer aplicação que

02:09.602 --> 02:12.000
estejamos construindo.

02:12.000 --> 02:15.014
Outro após o console de log combinadoAges, bem, não

02:15.014 --> 02:17.240
deve ser muito surpreendente que se agora

02:17.240 --> 02:19.830
compilarmos este arquivo aqui, e depois recarregarmos

02:19.830 --> 02:22.360
esta página, teremos 56.

02:22.360 --> 02:24.690
Então isto funciona, obtemos este número.

02:24.690 --> 02:26.710
Mas, é claro, temos um problema se

02:26.710 --> 02:28.838
tentarmos criar um cordel aqui.

02:28.838 --> 02:31.610
Nomes combinados, por exemplo.

02:31.610 --> 02:36.033
Se eu tentar combinar Max e Anna aqui, então, bem, imediatamente

02:37.230 --> 02:39.630
recebemos um erro aqui de que Max não

02:39.630 --> 02:42.320
é atribuível ao número do tipo porque isto,

02:42.320 --> 02:44.350
é claro, é uma corda.

02:44.350 --> 02:45.790
Agora, é claro, poderíamos mudar

02:45.790 --> 02:47.750
isso para aceitar cordas em vez de números,

02:47.750 --> 02:50.130
mas agora a primeira chamada de função falharia.

02:50.130 --> 02:52.750
E é aí que os tipos de sindicatos podem nos ajudar.

02:52.750 --> 02:55.692
Se temos algum lugar em nossa aplicação, seja

02:55.692 --> 02:58.810
um parâmetro de uma função ou uma constante ou uma

02:58.810 --> 03:01.700
variável que estamos usando em algum lugar, onde

03:01.700 --> 03:05.030
aceitamos dois tipos diferentes de valores.

03:05.030 --> 03:07.410
Bem, então, um tipo de sindicato pode nos ajudar.

03:07.410 --> 03:09.800
Para dizer ao TypeScript que

03:09.800 --> 03:12.690
estamos bem com um número ou um fio,

03:12.690 --> 03:14.220
usamos o número e depois

03:14.220 --> 03:17.710
o símbolo do tubo aqui, e depois o outro tipo

03:17.710 --> 03:20.660
que também aceitamos.

03:20.660 --> 03:22.340
E você pode ter mais de dois tipos, você

03:22.340 --> 03:25.220
pode aceitar aqui tantos tipos quantos você precisar.

03:25.220 --> 03:27.050
Portanto, aqui eu só preciso

03:27.050 --> 03:28.880
de dois, e é com esse tipo de atribuição

03:28.880 --> 03:31.720
que eu irei, número ou string.

03:31.720 --> 03:33.690
Agora eu recebo um erro aqui, que

03:33.690 --> 03:35.930
o operador plus não pode ser aplicado

03:35.930 --> 03:39.120
aos tipos string ou número e string ou número.

03:39.120 --> 03:41.500
Isso não é totalmente correto, isto deve

03:41.500 --> 03:44.350
funcionar, porque podemos usar o operador plus

03:44.350 --> 03:46.670
tanto com números como com cordas.

03:46.670 --> 03:49.600
Mas o TypeScript só vê que temos um tipo de sindicato

03:49.600 --> 03:52.540
aqui, e não analisa o que está no tipo de sindicato,

03:52.540 --> 03:56.010
apenas vê: "Certo, você está esperando vários tipos.

03:56.010 --> 03:57.530
Talvez isso inclua tipos

03:57.530 --> 03:59.460
em que eu não possa usar o operador

03:59.460 --> 04:01.640
plus, por isso vou reclamar aqui. Agora, felizmente, podemos contornar esse problema.

04:01.640 --> 04:05.410
Podemos adicionar aqui nossa verificação do tipo

04:05.410 --> 04:07.910
de tempo de execução e ver se o tipo

04:07.910 --> 04:11.240
de input1 é igual a número e se o tipo de input2

04:12.750 --> 04:15.170
é igual a número, e então mover este

04:16.530 --> 04:21.283
cálculo para lá, agora apenas uma melhoria, vamos criar resultado

04:24.100 --> 04:26.410
como uma variável de início se verificar,

04:26.410 --> 04:28.510
por causa do escopo de bloqueio,

04:28.510 --> 04:33.880
para que esta seja uma variável disponível em toda a função, e então apenas

04:33.880 --> 04:37.873
atribuir um novo valor ali.

04:37.873 --> 04:40.310
Portanto, agora aqui verificamos se temos dois números.

04:40.310 --> 04:42.818
E, portanto, o TypeScript sabe que aqui,

04:42.818 --> 04:45.890
input1 e input2 serão ambos números.

04:45.890 --> 04:49.790
Agora vamos acrescentar uma outra verificação aqui.

04:49.790 --> 04:53.900
E aí podemos definir o resultado igual à entrada1. tostring, convertendo-o explicitamente

04:53.900 --> 04:56.913
em uma corda,

04:58.550 --> 05:00.570
e input2. de tostring.

05:00.570 --> 05:02.880
E isto também será bom para TypeScript

05:02.880 --> 05:04.160
e JavaScript, porque podemos concatenar

05:04.160 --> 05:05.700
duas cadeias.

05:05.700 --> 05:08.220
Então agora temos quase o mesmo cálculo, mas deixamos

05:08.220 --> 05:10.800
claro que aqui, trabalharemos sempre com números,

05:10.800 --> 05:12.110
aqui trabalharemos sempre

05:12.110 --> 05:13.590
com cordas, e então retornamos

05:13.590 --> 05:15.730
o resultado.

05:15.730 --> 05:17.490
E agora, com isso, se nós consertarmos

05:17.490 --> 05:20.870
os nomes combinados lá embaixo, e compilarmos este arquivo,

05:20.870 --> 05:25.350
veremos que uma vez que revisitarmos nossa página, teremos os números combinados

05:25.350 --> 05:35.090
lá, que foram simplesmente adicionados juntos e, portanto, obtemos um número como resultado, e dois nomes combinados aqui.

05:35.090 --> 05:36.850
Portanto, é assim que podemos usar os

05:36.850 --> 05:40.830
tipos de união para sermos mais flexíveis em relação ao que fazemos em uma função,

05:40.830 --> 05:43.770
por exemplo, ou em qualquer outro lugar em nosso código.

05:43.770 --> 05:45.920
Esta verificação do tipo de tempo de execução

05:45.920 --> 05:49.520
extra nem sempre será necessária quando você trabalha com tipos de sindicatos,

05:49.520 --> 05:51.230
mas muitas vezes será porque com tipos

05:51.230 --> 05:54.090
de sindicatos, você pode ser mais flexível, por exemplo, nos

05:54.090 --> 05:56.350
parâmetros que você aceita, mas então você pode

05:56.350 --> 05:58.170
ter lógica diferente em sua função com

05:58.170 --> 06:00.940
base no tipo exato que você está recebendo.

06:00.940 --> 06:03.730
Para que sua função seja capaz de trabalhar com vários

06:03.730 --> 06:05.640
tipos de valores, mas que depois faça

06:05.640 --> 06:07.810
coisas ligeiramente diferentes, dependendo

06:07.810 --> 06:10.320
do tipo que você está recebendo.

06:10.320 --> 06:12.410
Tantas vezes, você pode precisar de tal verificação

06:12.410 --> 06:15.270
de tempo de execução ao trabalhar com tipos de sindicatos, mas nem

06:15.270 --> 06:16.700
sempre precisará dela.

06:16.700 --> 06:18.490
Você certamente também encontrará situações

06:18.490 --> 06:20.900
em programas TypeScript onde você pode usar um tipo de

06:20.900 --> 06:24.060
sindicato sem uma verificação de tipo de tempo de execução.

06:24.060 --> 06:25.870
Isso depende realmente da lógica que você está escrevendo.
