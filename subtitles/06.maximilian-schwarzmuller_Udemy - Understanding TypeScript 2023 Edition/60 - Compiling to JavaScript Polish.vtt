WEBVTT

00:02.510 --> 00:04.490
Instruktor: Z naszą podstawową klasą, jeśli teraz przejdziemy

00:04.490 --> 00:07.570
do folderu dist i sprawdzimy aplikację. js, widzimy co jest

00:07.570 --> 00:10.110
generowane w JavaScript, a tam

00:10.110 --> 00:13.560
widać, że mamy w zasadzie ten sam kod.

00:13.560 --> 00:17.870
Dwie ważne różnice to, że pole nazwa, które mamy

00:17.870 --> 00:20.870
tutaj nie istnieje tak jak tutaj

00:20.870 --> 00:22.230
w klasie.

00:22.230 --> 00:25.460
Byłoby to faktycznie obsługiwane w nowoczesnym JavaScript,

00:25.460 --> 00:27.910
ale zależy to od wersji JavaScript, dla której

00:27.910 --> 00:29.130
budujesz.

00:29.130 --> 00:33.450
Więc w samym ES6 nie jest to obsługiwane w rzeczywistości.

00:33.450 --> 00:35.430
I oczywiście to, co jest niesamowite, to

00:35.430 --> 00:37.360
oglądanie, to przypisywanie typów.

00:37.360 --> 00:39.760
Mamy jednak naszą logikę konstrukcyjną

00:39.760 --> 00:43.870
i rzeczywiście w ten sposób dodajemy właściwości do tworzonych

00:43.870 --> 00:48.150
obiektów w Vanilla JavaScript, gdy nie używamy najnowszej

00:48.150 --> 00:51.570
wersji JavaScript, gdzie ta składnia pola byłaby

00:51.570 --> 00:54.470
również obsługiwana.

00:54.470 --> 00:56.480
Więc to jest to, co mam w JavaScript.

00:56.480 --> 00:58.710
Teraz robi się ciekawie jednak jeśli

00:58.710 --> 01:02.080
przejdziemy do tsconfig. json i przełączamy cel

01:02.080 --> 01:05.970
z ES5 na ES6 i wykomentowujemy lib tutaj.

01:05.970 --> 01:08.190
Tak, że poprawne i zalecane biblioteki

01:08.190 --> 01:10.870
są dodawane przez TypeScript automatycznie.

01:10.870 --> 01:14.090
Jeżeli teraz zapiszesz ten plik konfiguracyjny i wrócisz do aplikacji. js widzisz coś

01:14.090 --> 01:16.350
zupełnie innego.

01:16.350 --> 01:18.810
I to jest dość ciekawe, co widzimy tutaj.

01:18.810 --> 01:20.960
Co my tu mamy?

01:20.960 --> 01:23.290
Cóż, to co w końcu mamy tutaj

01:23.290 --> 01:26.453
to tak zwana funkcja konstruktora.

01:27.299 --> 01:31.600
Funkcja konstruktora jest czymś, co jest wbudowane

01:31.600 --> 01:33.770
w JavaScript, który w zasadzie

01:33.770 --> 01:35.520
był tam od zawsze, można

01:35.520 --> 01:40.230
powiedzieć, i jest to Vanilla nienowoczesny sposób JavaScript

01:40.230 --> 01:44.480
na tworzenie projektów obiektów.

01:44.480 --> 01:47.100
Jest to funkcja, która jest wywoływana za

01:47.100 --> 01:50.890
pomocą słowa kluczowego new i nagle, w magiczny sposób, ta

01:50.890 --> 01:53.640
funkcja, mimo że nie ma wewnątrz deklaracji

01:53.640 --> 01:55.850
return, zwraca coś, jak widzisz, kiedy

01:55.850 --> 01:57.540
ją wywołujemy.

01:57.540 --> 01:59.730
Zwraca on obiekt.

01:59.730 --> 02:03.110
Nowy obiekt, który będzie posiadał właściwość name.

02:03.110 --> 02:04.940
Więc ta koncepcja nie jest nowa, nie

02:04.940 --> 02:08.680
jest wprowadzona przez nowoczesny JavaScript lub przez TypeScript.

02:08.680 --> 02:12.500
Pomysł posiadania blueprintów dla obiektów jest

02:12.500 --> 02:15.180
w JavaScript od bardzo dawna.

02:15.180 --> 02:19.070
W przeszłości jednak musieliśmy używać funkcji konstruktora, a ponieważ

02:19.070 --> 02:21.870
mogło to być nieco nieintuicyjne, zwłaszcza dla

02:21.870 --> 02:24.520
programistów, którzy mogli pracować z różnymi

02:24.520 --> 02:26.600
językami programowania.

02:26.600 --> 02:30.510
Nowoczesny JavaScript wprowadził ideę klas tej czystszej

02:30.510 --> 02:34.950
składni, a TypeScript obsługuje to również.

02:34.950 --> 02:38.180
I ze względu na potężną kompilację TypeScript, możesz wybrać,

02:38.180 --> 02:40.830
gdziekolwiek chcesz go skompilować, starszy styl,

02:40.830 --> 02:44.130
który oczywiście działa w większej liczbie przeglądarek lub

02:44.130 --> 02:48.280
do tego bardziej nowoczesnego stylu ES6, który widzieliśmy wcześniej.

02:48.280 --> 02:51.700
Który wygląda bardzo podobnie jak ten tutaj.

02:51.700 --> 02:54.500
Kluczowe jest to, że mamy tę funkcję wbudowaną

02:54.500 --> 02:57.300
w JavaScript i wspieraną przez TypeScript, że

02:57.300 --> 03:00.163
możemy zdefiniować blueprints obiektów.
