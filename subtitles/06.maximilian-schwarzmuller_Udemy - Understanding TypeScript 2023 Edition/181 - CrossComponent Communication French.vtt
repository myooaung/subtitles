WEBVTT

00:02.230 --> 00:05.130
Enseignant : Nous voulons maintenant faire passer le texte que nous

00:05.130 --> 00:07.960
avons saisi ici du composant NewTodo au composant application.

00:07.960 --> 00:09.690
Pourquoi le composant d'application ?

00:09.690 --> 00:11.160
Car c'est notre composant

00:11.160 --> 00:13.610
qui a un lien direct avec les composants

00:13.610 --> 00:16.340
NewTodo et TodoList.

00:16.340 --> 00:19.320
Donc, ici je veux ajouter une nouvelle fonction et je

00:20.800 --> 00:24.560
vais la nommer todoAddHandler, le nom est à votre convenance, j'aime

00:24.560 --> 00:25.393
juste utiliser

00:25.393 --> 00:27.990
cette convention d'avoir le handler à la fin si

00:27.990 --> 00:31.390
c'est une fonction qui se déclenche sur un événement.

00:31.390 --> 00:34.330
Et ici je m'attends à obtenir le texte, comme une chaîne,

00:34.330 --> 00:37.970
c'est notre fonction donc nous pouvons nous attendre à ça.

00:37.970 --> 00:40.720
Et je veux qu'on ajoute ça comme une tâche à faire ici.

00:40.720 --> 00:42.270
Maintenant, bien sûr, puisque vous connaissez

00:42.270 --> 00:45.230
React, vous savez que la mise à jour de ce tableau seul ne fera pas l'affaire,

00:45.230 --> 00:47.440
cela ne rendra pas ce composant à nouveau, donc nous devrons

00:47.440 --> 00:49.360
utiliser une certaine gestion d'état ici pour que

00:49.360 --> 00:51.900
cela fonctionne, avant de faire cela cependant, assurons-nous

00:51.900 --> 00:53.040
qu'au moins nous obtenons la

00:53.040 --> 00:54.750
valeur de cette fonction.

00:54.750 --> 00:57.460
Nous allons donc enregistrer le texte ici, puis nous nous concentrerons

00:57.460 --> 01:00.133
sur la gestion de son état dans un deuxième temps.

01:01.000 --> 01:03.020
Pour cela, nous devons nous assurer

01:03.020 --> 01:05.850
que cette fonction todoAddHandler peut être

01:05.850 --> 01:09.050
appelée depuis le composant NewTodo, car c'est

01:09.050 --> 01:12.113
là que nous ajoutons le todo à la fin.

01:13.090 --> 01:15.370
Maintenant, comment faire pour que cette fonction puisse

01:15.370 --> 01:17.860
être appelée depuis l'intérieur de ce composant ?

01:17.860 --> 01:22.300
Nous passons un pointeur à cette fonction à ce composant.

01:22.300 --> 01:25.640
Donc, ici, nous pourrions ajouter un nom de propriété, onAddTodo, et

01:25.640 --> 01:27.280
vous pouvez le nommer comme vous le

01:27.280 --> 01:28.560
souhaitez, je l'ai juste nommé

01:28.560 --> 01:32.030
comme ça parce que cela va se produire sur un événement, un événement que

01:32.030 --> 01:34.600
nous contrôlons bien sûr, mais quand même.

01:34.600 --> 01:38.030
Et ici je veux faire suivre todoAddHandler donc je passe

01:38.030 --> 01:40.600
un pointeur à cette fonction, je ne l'exécute

01:40.600 --> 01:42.120
pas ici, je passe juste un

01:42.120 --> 01:44.620
pointeur à cette fonction, dans onAddTodo

01:44.620 --> 01:49.240
de sorte qu'au lieu de NewTodo sur props, que nous pouvons obtenir ici, nous

01:49.240 --> 01:52.230
pouvons appeler ceci, de sorte que nous pouvons

01:52.230 --> 01:56.220
appeler props. Mais, bien sûr, TypeScript

01:56.220 --> 01:59.640
n'aime pas cela parce qu'il ne sait pas

01:59.640 --> 02:01.730
qu'il y aura une prop onAddTodo

02:01.730 --> 02:03.440
sur nos props ici et

02:03.440 --> 02:08.240
comment une telle prop ressemblerait.

02:08.240 --> 02:11.670
Ainsi, tout comme dans TodoList, nous devons mettre en place une interface

02:11.670 --> 02:14.540
ou simplement une définition de type de nos props.

02:14.540 --> 02:18.200
Donc, allons dans NewTodo et peut-être, encore une fois, ajouter une interface,

02:18.200 --> 02:20.820
vous pourriez aussi ajouter un type de cours et je vais

02:20.820 --> 02:23.060
le faire ici pour mélanger les choses.

02:23.060 --> 02:25.380
En général, j'opte toujours pour une interface, mais

02:25.380 --> 02:27.660
l'utilisation d'un type est également possible.

02:27.660 --> 02:30.493
Donc, pour utiliser un type ici, nous pouvons le nommer

02:31.357 --> 02:33.820
NewTodoProps et le type est un type d'objet

02:33.820 --> 02:36.830
où je veux avoir un prop onAddTodo et ceci, à son tour,

02:36.830 --> 02:39.120
sera un type de fonction, il pointera vers

02:39.120 --> 02:40.753
une fonction.

02:41.720 --> 02:44.290
Vous définirez des types de fonctions comme celle-ci,

02:44.290 --> 02:46.760
comme vous l'avez appris, ce sera une fonction qui

02:46.760 --> 02:48.850
ne renvoie rien mais qui attend un périmètre

02:48.850 --> 02:51.410
et ce sera le texte que l'utilisateur a entré.

02:51.410 --> 02:54.023
Donc, le texte Todo qui est de type string, c'est

02:55.120 --> 02:57.123
ce que cette fonction attend.

02:58.920 --> 03:01.770
Maintenant, mettons cela sur ce type générique ici et pointons

03:01.770 --> 03:03.103
sur NewTodoProps.

03:04.510 --> 03:08.620
Et avec ça, on peut appeler onAddTodo et passer une chaîne.

03:08.620 --> 03:11.470
Et s'il essayait de passer un nombre ici, par exemple, nous obtiendrions

03:11.470 --> 03:14.730
bien sûr une erreur parce que nous avons clairement défini que l'argument

03:14.730 --> 03:17.590
doit être une chaîne de caractères ici.

03:17.590 --> 03:18.733
Donc, inversons ça.

03:20.550 --> 03:24.630
Avec cela, si nous entrons à nouveau un nouvel objectif, le terminer dans un mois,

03:24.630 --> 03:27.150
nous voyons à nouveau un journal ici, mais maintenant

03:27.150 --> 03:28.690
il vient du composant de l'application,

03:28.690 --> 03:30.750
comme vous pouvez clairement le dire, parce

03:30.750 --> 03:34.170
que nous avons ajouté ce journal ici.

03:34.170 --> 03:37.380
Donc cette communication entre le composant NewTodo et

03:37.380 --> 03:39.480
le composant app ici fonctionne.

03:39.480 --> 03:42.750
Et avec cela, implémentons une certaine gestion de l'état ici et, encore

03:42.750 --> 03:44.160
une fois, c'est aussi quelque chose

03:44.160 --> 03:46.850
que vous pouvez essayer vous-même d'abord si vous voulez,

03:46.850 --> 03:49.670
pour vous assurer que nous rendons les todos dans l'état de sorte

03:49.670 --> 03:52.170
que chaque fois que nous mettons à jour nos todos nous rendons

03:52.170 --> 03:54.460
aussi à nouveau ce composant.

03:54.460 --> 03:56.263
Nous ferons cela dans le prochain cours.
