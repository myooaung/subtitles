WEBVTT

1
00:00:02.251 --> 00:00:03.380
<v Instructor>Another nice feature</v>

2
00:00:03.380 --> 00:00:05.350
related to properties and methods,

3
00:00:05.350 --> 00:00:08.000
which exists also in JavaScript

4
00:00:08.000 --> 00:00:10.010
when you're using ES6 or later,

5
00:00:10.010 --> 00:00:11.180
but all the the typescripts

6
00:00:11.180 --> 00:00:14.010
are static properties and methods.

7
00:00:14.010 --> 00:00:17.520
Static properties and methods allow you to add properties

8
00:00:17.520 --> 00:00:20.620
and methods to classes which are not accessed

9
00:00:20.620 --> 00:00:22.530
on an instance of the class,

10
00:00:22.530 --> 00:00:26.080
so where you don't need to call new class name first,

11
00:00:26.080 --> 00:00:28.950
but which you access directly on the class.

12
00:00:28.950 --> 00:00:31.350
This is often used for utility functions

13
00:00:31.350 --> 00:00:35.922
that you want to group or map to a class logically,

14
00:00:35.922 --> 00:00:40.860
or global constants which you also wanna store in a class.

15
00:00:40.860 --> 00:00:43.270
An example built into JavaScript,

16
00:00:43.270 --> 00:00:46.050
which is not defined by typescript and not defined by you,

17
00:00:46.050 --> 00:00:48.290
but part of JavaScript in the browser

18
00:00:48.290 --> 00:00:51.170
is the Math constructor function,

19
00:00:51.170 --> 00:00:53.220
or class if you wanna call it like this,

20
00:00:53.220 --> 00:00:55.500
that's globally available in JavaScript,

21
00:00:55.500 --> 00:00:59.210
where you can access pi as a constant value

22
00:00:59.210 --> 00:01:01.400
to give you that pi number,

23
00:01:01.400 --> 00:01:05.050
or functions, or methods to be precise,

24
00:01:05.050 --> 00:01:08.610
like pow to calculate the power of something.

25
00:01:08.610 --> 00:01:10.530
These are methods and properties

26
00:01:10.530 --> 00:01:13.370
which you don't access on the instance of Math.

27
00:01:13.370 --> 00:01:16.310
You don't have to call new math first.

28
00:01:16.310 --> 00:01:19.830
Indeed that won't work, but you access these properties

29
00:01:19.830 --> 00:01:22.360
in methods directly on the class itself.

30
00:01:22.360 --> 00:01:25.340
So Math acts more like a name space

31
00:01:25.340 --> 00:01:27.370
as a grouping mechanism here

32
00:01:27.370 --> 00:01:28.640
and that's a common use case

33
00:01:28.640 --> 00:01:30.480
for static methods and properties

34
00:01:30.480 --> 00:01:33.650
and you can add them to your own classes as well.

35
00:01:33.650 --> 00:01:36.770
Let's say on Department we want to have a method

36
00:01:36.770 --> 00:01:40.050
that helps us create employees

37
00:01:40.050 --> 00:01:43.450
and that is something we might wanna be able to access

38
00:01:43.450 --> 00:01:45.390
without instantiating Department,

39
00:01:45.390 --> 00:01:46.890
because we typically instantiate

40
00:01:46.890 --> 00:01:49.970
our more specialized versions, IT department,

41
00:01:49.970 --> 00:01:51.290
and accounting department

42
00:01:51.290 --> 00:01:54.710
and we don't really wanna instantiate Department

43
00:01:54.710 --> 00:01:56.890
just to call a utility method

44
00:01:56.890 --> 00:01:58.490
and therefore we can add a method here,

45
00:01:58.490 --> 00:02:03.490
create Employee, let's say, where we want to get the name,

46
00:02:03.680 --> 00:02:05.750
which is a string as an argument

47
00:02:05.750 --> 00:02:07.621
and there we wanna return something.

48
00:02:07.621 --> 00:02:10.230
Now to make that a static method,

49
00:02:10.230 --> 00:02:12.920
which we can access without instantiating this class,

50
00:02:12.920 --> 00:02:16.250
we add the static keyword in front of this method

51
00:02:16.250 --> 00:02:18.549
and then in here we maybe return an object

52
00:02:18.549 --> 00:02:23.549
where we have the name property mapped to this name value.

53
00:02:25.170 --> 00:02:27.010
Now of course that's a very simple method,

54
00:02:27.010 --> 00:02:28.690
but you get the idea.

55
00:02:28.690 --> 00:02:31.960
Now to use that we could go down there

56
00:02:31.960 --> 00:02:33.490
where we execute our code

57
00:02:33.490 --> 00:02:36.940
and now let's say we want a new employee, employee1.

58
00:02:39.300 --> 00:02:41.020
Well then we can just get this

59
00:02:41.020 --> 00:02:46.020
with Department.createEmployee and pass in Max for example

60
00:02:46.920 --> 00:02:50.680
and if I then console.log(employee1)

61
00:02:50.680 --> 00:02:53.170
we should see an object with the name of Max.

62
00:02:53.170 --> 00:02:55.630
So if I save that, indeed here

63
00:02:55.630 --> 00:02:58.240
this is the employee we just created.

64
00:02:58.240 --> 00:03:01.200
So this would be a typical example for a static method.

65
00:03:01.200 --> 00:03:04.870
We call it directly on the class, without the new keyword,

66
00:03:04.870 --> 00:03:06.360
and therefore we use the class

67
00:03:06.360 --> 00:03:09.030
as a grouping mechanism you could say

68
00:03:09.030 --> 00:03:11.630
and if you would want to add a static property,

69
00:03:11.630 --> 00:03:13.470
you could do that as well.

70
00:03:13.470 --> 00:03:17.950
If you had something like the fiscalYear here

71
00:03:19.730 --> 00:03:22.040
that you currently wanna use in your company,

72
00:03:22.040 --> 00:03:24.980
you could set this to, let's say, 2020

73
00:03:24.980 --> 00:03:27.310
and then again to make it available

74
00:03:27.310 --> 00:03:28.560
without instantiating this

75
00:03:28.560 --> 00:03:30.810
you could add static in front of this property,

76
00:03:30.810 --> 00:03:33.950
or in front of that field and now access that.

77
00:03:33.950 --> 00:03:36.560
So now down there console.log.(mycreatedemployee).

78
00:03:38.050 --> 00:03:42.420
Here we can also access Department.fiscal.Year

79
00:03:43.900 --> 00:03:46.190
just like that without instantiating it

80
00:03:46.190 --> 00:03:47.150
and if we save that,

81
00:03:47.150 --> 00:03:51.130
unsurprisingly we'll see 2020 being logged here.

82
00:03:51.130 --> 00:03:53.347
So these are static methods and properties.

83
00:03:53.347 --> 00:03:55.250
One important word about them,

84
00:03:55.250 --> 00:03:56.947
or one thing you should keep in mind.

85
00:03:56.947 --> 00:03:59.067
When you add them on a class,

86
00:03:59.067 --> 00:04:03.370
you can't access them from inside your non static parts.

87
00:04:03.370 --> 00:04:04.870
So if you feel like

88
00:04:04.870 --> 00:04:08.150
accessing the fiscalYear here in the constructor,

89
00:04:08.150 --> 00:04:10.375
and you wanna console.log it here,

90
00:04:10.375 --> 00:04:13.490
this, as you can see will not work.

91
00:04:13.490 --> 00:04:15.600
I'm getting an error here that

92
00:04:15.600 --> 00:04:18.690
the property fiscalYear is a static member.

93
00:04:18.690 --> 00:04:20.976
We can't access this here because the constructor

94
00:04:20.976 --> 00:04:24.290
and basically anything in there, all the methods as well,

95
00:04:24.290 --> 00:04:26.530
which are not marked with static,

96
00:04:26.530 --> 00:04:29.427
and you can't mark the constructor as static, by the way,

97
00:04:29.427 --> 00:04:32.430
will not be able to access static properties,

98
00:04:32.430 --> 00:04:34.770
because this does refer

99
00:04:34.770 --> 00:04:37.660
to the instance created based on the class

100
00:04:37.660 --> 00:04:41.450
while the static property is not available on instance

101
00:04:41.450 --> 00:04:44.150
because the whole idea behind static properties

102
00:04:44.150 --> 00:04:47.780
and static methods is that they're detached from instances.

103
00:04:47.780 --> 00:04:50.930
So of course you can't access them with the this keyword.

104
00:04:50.930 --> 00:04:53.940
If you would want to use the static property

105
00:04:53.940 --> 00:04:56.080
or method from inside the class,

106
00:04:56.080 --> 00:04:59.380
you would have to use the class name here to access it.

107
00:04:59.380 --> 00:05:01.337
This gives you access to static properties

108
00:05:01.337 --> 00:05:04.290
and methods all from inside the class.

109
00:05:04.290 --> 00:05:06.593
That's one important thing to keep in mind.

