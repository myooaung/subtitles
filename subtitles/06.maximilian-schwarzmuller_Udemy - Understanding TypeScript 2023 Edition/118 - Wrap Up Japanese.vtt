WEBVTT

00:02.273 --> 00:06.190
講師：デコレータをどのように扱うのか､ どのように設定するのか､

00:06.190 --> 00:07.340
どのようなことができるのか､

00:07.340 --> 00:11.367
デコレータで何ができるのか､ いろいろと見てきました｡

00:11.367 --> 00:15.260
これで､ デコレータの複雑さだけでなく､ その威力や考え方､

00:15.260 --> 00:18.898
使い方をご理解いただけると思います｡

00:18.898 --> 00:28.590
デコレータは自分で作れるだけでなく､ デコレータに依存するパッケージやフレームワークの豊富なエコシステムが存在します｡

00:28.590 --> 00:30.670
例えば､ クラスvalidator｡ 

00:30.670 --> 00:32.789
ts class validator」で検索すると､

00:32.789 --> 00:41.680
基本的に私たちが取り組んだ独自の検証ロジックをより精巧に実装したパッケージが見つかります｡

00:41.680 --> 00:44.140
このパッケージは､ 作業中のどのプロジェクトにも追加することができます｡

00:44.140 --> 00:45.960
そして､ ここで実行するので､ ご覧のように､

00:45.960 --> 00:51.660
たくさんのデコレーターやデコレーター・ファクトリーを単純にインポートすることができます｡

00:51.660 --> 00:55.650
バリデータに応じて､

00:55.650 --> 01:01.530
追加設定をするかしないかを決めて､

01:01.530 --> 01:08.950
裏側でレジストリを管理します｡

01:08.950 --> 01:14.150
そして､ パッケージからインポートしたvalidateメソッドを実行し､

01:14.150 --> 01:20.540
オブジェクトを渡すと､ クラスで設定したすべての検証ロジックが適用されます｡

01:20.540 --> 01:22.840
つまり､ 基本的には今やったことを､ より多くのバリデータを使って､

01:22.840 --> 01:27.830
重い仕事をすべて代わりにやってくれているのです｡

01:27.830 --> 01:30.630
しかし､ もちろん､ ここでもっと素朴なバージョンで自分たちで作ったのですから､

01:30.630 --> 01:34.143
これが一般的にどのように機能するかを理解するのに役立ちます｡

01:35.010 --> 01:36.490
さて､ このパッケージ以外にも､ もちろん､

01:36.490 --> 01:38.370
例えばAngularもあります｡

01:38.370 --> 01:39.541
Angularは､

01:39.541 --> 01:43.942
先ほど述べたように､ デコレーターに大きく依存するフレームワークです｡

01:43.942 --> 01:46.480
このコンポーネント・デコレーターのように､

01:46.480 --> 02:00.170
動的なHTMLコードを割り当て､ Angularが追加した特別な構文でクラスのプロパティもタップして､ 画面に動的なコンテンツをレンダリングすることができます｡

02:00.170 --> 02:03.360
つまり､ Angularはこれらのデコレータを提供するだけではなく､

02:03.360 --> 02:06.250
デコレータはAngularの中核的な部分なのです｡

02:06.250 --> 02:07.280
そして最後に､

02:07.280 --> 02:10.130
NestJSも紹介したいと思います｡

02:10.130 --> 02:15.487
NestJSは､ Node.NETのためのサーバサイドJavaScriptフレームワークです｡

02:15.487 --> 02:15.487
jsもtypescriptを多用しており､

02:15.487 --> 02:20.010
こちらもデコレータを採用しています｡

02:20.010 --> 02:23.270
ここでは､ コントローラやルート､ HTTPリクエストでユーザが使用するメソッド､

02:23.270 --> 02:36.890
特定の機能を起動するためのデコレータ､ さらにリクエストからデータを抽出するためのデコレータなど､ さまざまなデコレータを定義します｡

02:36.890 --> 02:39.150
このフレームワークもまた､ すべてのデコレータを提供します｡

02:39.150 --> 02:41.370
このデコレータをプロパティやメソッド､

02:41.370 --> 02:52.828
クラスに追加するだけで､ 追加の機能を追加でき､ フレームワークがコードを実行するときにそれを考慮するようになります｡

02:52.828 --> 02:55.417
ここでもデコレーターはメタプログラミングに使われ､

02:55.417 --> 02:59.070
追加の設定やロジックを追加します｡ このメタプログラミングは､

02:59.070 --> 03:09.886
この場合､ あなたのコードを実行する､ あるいはあなたのコードと一緒に動作するフレームワークのコードによって考慮されます｡

03:09.886 --> 03:12.000
そして､ デコラティブなものはこれでおしまい｡ 

03:12.000 --> 03:14.110
これで､ デコレーターで何ができるのか､ なぜデコレーターが非常に役立つのか､

03:14.110 --> 03:19.563
そして一般的にどのように機能するのか､ その概要をご理解いただけると幸いです｡
