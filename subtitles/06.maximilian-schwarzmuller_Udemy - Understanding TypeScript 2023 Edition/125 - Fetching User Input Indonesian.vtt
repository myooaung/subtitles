WEBVTT

00:02.150 --> 00:06.180
Instruktur: Jadi kita bisa mengumpulkan nilai input judul kita dan

00:06.180 --> 00:07.420
mencetaknya ke konsol,

00:07.420 --> 00:10.160
tetapi tentu saja, bukan itu ide utamanya.

00:10.160 --> 00:13.940
Sebaliknya, idenya adalah bahwa kita mengumpulkan semua nilai input kita,

00:13.940 --> 00:15.420
memvalidasinya dengan cepat,

00:15.420 --> 00:17.890
dan kemudian melakukan sesuatu dengannya.

00:17.890 --> 00:20.598
Untuk itu, saya akan menambahkan metode baru

00:20.598 --> 00:21.860
lagi, metode privat

00:21.860 --> 00:25.700
lainnya, karena saya hanya akan memanggilnya dari dalam kelas,

00:25.700 --> 00:28.530
dan itu adalah metode gatherUserInput.

00:28.530 --> 00:30.460
Nama sepenuhnya terserah Anda.

00:30.460 --> 00:33.240
Gagasan saya adalah bahwa metode ini dipanggil di sini.

00:33.240 --> 00:35.230
Setelah kita mencegah default, ini pada

00:35.230 --> 00:38.980
dasarnya harus menjangkau semua input kita di sini, mengumpulkan input

00:38.980 --> 00:40.870
pengguna di sana, memvalidasinya,

00:40.870 --> 00:43.060
dan kemudian mengembalikannya.

00:43.060 --> 00:45.950
Sehingga di sini, saya mendapatkan userInput

00:45.950 --> 00:50.090
saya, yang bisa berupa tuple dengan judul, deskripsi, dan

00:50.090 --> 00:53.810
orang-orang, sebagai nilai tuple gratis.

00:53.810 --> 00:55.510
Sebenarnya, saya suka ide itu.

00:55.510 --> 00:57.800
Jadi, mari kita sudah mendefinisikan tipe pengembalian di sini.

00:57.800 --> 00:59.880
Tipe pengembalian adalah tuple.

00:59.880 --> 01:02.620
Sekarang apakah Anda ingat bagaimana tuple didefinisikan?

01:02.620 --> 01:05.630
Bagaimana tipe tuple didefinisikan?

01:05.630 --> 01:08.620
Ini bukan string, tanda kurung siku.

01:08.620 --> 01:12.260
Itu berarti Anda mengembalikan larik string.

01:12.260 --> 01:14.550
Malahan, saya ingin mengatakan bahwa

01:14.550 --> 01:18.160
saya mengembalikan sebuah larik yang terdiri dari tepat

01:18.160 --> 01:21.510
X elemen-elemen dari tepat ketiga jenis ini.

01:21.510 --> 01:23.650
Dan untuk itu, Anda menetapkan tipe pengembalian

01:23.650 --> 01:27.160
di sini, dua tanda kurung siku, dan kemudian di dalam tanda kurung siku,

01:27.160 --> 01:30.240
Anda menambahkan elemen yang berbeda, dan tipe elemen.

01:30.240 --> 01:32.900
Misalnya, string, string, dan angka.

01:32.900 --> 01:37.130
Dengan itu, Anda mengatakan bahwa metode ini di sini mengembalikan tuple, yang memiliki

01:37.130 --> 01:38.510
tiga elemen, di mana elemen

01:38.510 --> 01:40.300
pertama adalah string, elemen kedua

01:40.300 --> 01:41.820
adalah string, dan elemen ketiga

01:41.820 --> 01:44.080
sebenarnya adalah angka.

01:44.080 --> 01:46.360
Dan sekarang kita bisa menambahkan beberapa logika pada

01:46.360 --> 01:48.540
metode ini untuk membuat hal itu menjadi benar.

01:48.540 --> 01:52.670
Jadi untuk itu, pertama-tama mari kita dapatkan judul yang dimasukkan

01:52.670 --> 01:57.210
dari titleInputElement ini. nilai.

01:57.210 --> 01:58.340
Dan kita bisa mengulanginya.

01:58.340 --> 02:01.920
Kita juga menginginkan deskripsi yang dimasukkan dari descriptionInputElement

02:01.920 --> 02:05.100
ini. nilai, dan jumlah orang

02:05.100 --> 02:09.510
yang dimasukkan, atau hanya orang yang dimasukkan dari

02:09.510 --> 02:12.440
peopleInputElement ini.

02:12.440 --> 02:13.870
Sekarang saya menyimpan ini dalam

02:13.870 --> 02:15.490
konstanta sehingga saya tidak selalu harus

02:15.490 --> 02:17.640
mengulangi ekspresi yang lebih panjang ini.

02:17.640 --> 02:19.370
Sekarang, kita bisa memvalidasi ini.

02:19.370 --> 02:21.500
Validasi sepele adalah memeriksa

02:21.500 --> 02:24.850
apakah enteredTitle. trim, Jadi menghapus

02:24.850 --> 02:27.610
ruang lebar X di awal dan akhir.

02:27.610 --> 02:30.560
Length sama dengan nol, atau jika

02:30.560 --> 02:35.350
enteredDescription. panjang trim sama dengan

02:35.350 --> 02:41.520
nol, atau jika enteredPeople.

02:41.520 --> 02:41.520
panjang

02:41.520 --> 02:44.380
trim sama dengan nol.

02:44.380 --> 02:48.410
Itu akan memeriksa bahwa tidak ada input yang kosong.

02:48.410 --> 02:50.330
Sekarang, ini tidak memeriksa semua yang

02:50.330 --> 02:51.860
mungkin ingin kita periksa.

02:51.860 --> 02:54.770
Kita tidak memeriksa apakah orang yang dimasukkan

02:54.770 --> 02:57.160
adalah, katakanlah, angka positif.

02:57.160 --> 03:00.170
Kami tidak dapat menetapkan panjang minimum.

03:00.170 --> 03:02.190
Kita harus menambahkan lebih banyak kondisi di

03:02.190 --> 03:04.050
sini, dan sementara kita bisa melakukan ini,

03:04.050 --> 03:06.820
ini tidak benar-benar menjadi solusi yang dapat diskalakan.

03:06.820 --> 03:09.110
Jika kita memiliki bagian dalam aplikasi di mana

03:09.110 --> 03:11.550
kita juga ingin memvalidasi input pengguna, kita

03:11.550 --> 03:14.440
selalu harus mengulang pernyataan if yang panjang.

03:14.440 --> 03:18.390
Jadi, saya akan segera menghadirkan solusi validasi yang lebih

03:18.390 --> 03:21.960
cerdas atau solusi validasi yang lebih terukur.

03:21.960 --> 03:23.780
Untuk saat ini, kita bisa membiarkannya seperti ini.

03:23.780 --> 03:26.190
Anda sudah bisa memikirkan hal ini, dan tentu

03:26.190 --> 03:28.520
saja setelah kuliah ini di sini, berhenti

03:28.520 --> 03:32.220
sejenak dan pikirkan bagaimana Anda bisa mengalihdayakan ini ke dalam

03:32.220 --> 03:34.670
fungsi validasi terpisah yang dapat dikonfigurasi,

03:34.670 --> 03:38.350
dan bagaimana tipe dapat membantu Anda di sana.

03:38.350 --> 03:41.370
Pasti ada banyak pendekatan yang memungkinkan, dan saya akan

03:41.370 --> 03:44.040
berbagi dengan Anda dalam ceramah berikutnya.

03:44.040 --> 03:45.620
Tetapi sebelum kita sampai ke

03:45.620 --> 03:48.350
sana, mari kita gunakan pendekatan sepele ini di

03:48.350 --> 03:52.130
sini dan melakukan sesuatu jika semua kondisi ini terpenuhi.

03:52.130 --> 03:53.620
Sekarang jika kita membuatnya

03:53.620 --> 03:56.000
ke dalam blok if ini, kita tahu setidaknya satu validasi

03:56.000 --> 03:57.350
gagal, dan kemudian kita dapat

03:57.350 --> 04:01.833
melalui peringatan, di mana kita mengatakan Input tidak valid, silakan coba lagi.

04:03.450 --> 04:04.910
Lain, jika kita tidak berhasil

04:04.910 --> 04:06.200
masuk ke sana, kita tahu

04:06.200 --> 04:08.600
kita memiliki input yang valid, jika tidak,

04:08.600 --> 04:11.310
saya ingin mengembalikan tuple saya.

04:11.310 --> 04:14.170
Jadi di sini, saya ingin mengembalikan judul

04:14.170 --> 04:17.090
yang dimasukkan, deskripsi yang dimasukkan,

04:17.090 --> 04:19.660
dan juga orang yang dimasukkan.

04:19.660 --> 04:20.630
Sekarang seperti yang

04:20.630 --> 04:21.850
bisa Anda katakan, jenis kelompok

04:21.850 --> 04:24.210
tidak senang, karena orang yang masuk harus berupa angka,

04:24.210 --> 04:25.370
bukan teks.

04:25.370 --> 04:27.410
Dan sebenarnya, semua yang Anda

04:27.410 --> 04:28.720
ekstrak dari properti

04:28.720 --> 04:32.350
nilai elemen input akan berupa teks secara default.

04:32.350 --> 04:34.520
Jadi untuk mengubahnya menjadi angka,

04:34.520 --> 04:38.060
kita bisa memanggil parseFloat, misalnya, atau cukup menambahkan

04:38.060 --> 04:40.610
plus di depannya, dan ini akan mengubahnya

04:40.610 --> 04:42.850
menjadi angka, dan tetap saja kelompok

04:42.850 --> 04:45.430
tipe tidak senang karena, yah, kita tidak

04:45.430 --> 04:48.910
selalu mengembalikan tuple.

04:48.910 --> 04:50.830
Bagaimana dengan bagian ini di sini?

04:50.830 --> 04:52.310
Jika kita berhasil masuk ke dalam blok

04:52.310 --> 04:53.510
if, kita menampilkan peringatan,

04:53.510 --> 04:55.820
tetapi kita tidak mengembalikan tuple.

04:55.820 --> 04:59.810
Nah, ada berbagai hal yang bisa kita lakukan sebagai gantinya.

04:59.810 --> 05:03.460
Kita bisa saja tidak mengembalikan apa pun, seperti ini.

05:03.460 --> 05:06.320
Atau, kita bisa melemparkan error.

05:06.320 --> 05:08.360
Kemudian, kita sebenarnya tidak akan mengembalikan

05:08.360 --> 05:11.100
apa pun, tetapi kita akan melempar kesalahan dalam kasus itu.

05:11.100 --> 05:12.820
Sekarang, saya tidak ingin melempar kesalahan di

05:12.820 --> 05:15.570
sini karena saya tidak benar-benar ingin menerapkan penanganan kesalahan,

05:15.570 --> 05:18.090
jadi apa yang akan saya lakukan adalah saya hanya akan menambahkan pernyataan

05:18.090 --> 05:20.100
kembali, tetapi tentu saja ini bukan tuple.

05:20.100 --> 05:23.110
Jadi sebenarnya, tipe return di sini adalah tuple,

05:23.110 --> 05:25.923
atau sebenarnya tidak terdefinisi.

05:27.320 --> 05:29.040
Namun sekarang, seperti yang Anda pelajari,

05:29.040 --> 05:30.750
Anda tidak boleh menggunakan undefined di sini

05:30.750 --> 05:32.550
sebagai tipe pengembalian pada fungsi.

05:32.550 --> 05:34.040
Sebaliknya, gunakan void.

05:34.040 --> 05:35.410
Ini hampir sama, tetapi

05:35.410 --> 05:37.040
eksklusif untuk fungsi, dan

05:37.040 --> 05:39.350
ini memberi tahu TypeScript bahwa ini

05:39.350 --> 05:44.350
adalah fungsi yang memiliki setidaknya cabang yang tidak mengembalikan nilai apa

05:45.230 --> 05:46.930
pun seperti yang ini.

05:46.930 --> 05:49.160
Di sini kita juga tentu saja menggunakan tipe union

05:49.160 --> 05:51.240
karena kita memiliki kedua kemungkinan.

05:51.240 --> 05:53.170
Kita mungkin tidak mengembalikan apa-apa,

05:53.170 --> 05:55.660
atau kita benar-benar mengembalikan tuple.

05:55.660 --> 05:57.510
Jadi sekarang, kita memiliki gatherUserInput

05:57.510 --> 05:59.370
dan userInput di sana untuk semua

05:59.370 --> 06:01.670
tidak terdefinisi pada akhirnya atau itu

06:01.670 --> 06:04.130
adalah tuple itu.

06:04.130 --> 06:07.640
Jadi sekarang, sebelum kita melanjutkan dan meningkatkan validasi,

06:07.640 --> 06:09.620
mari kita bangun userInput itu.

06:09.620 --> 06:12.480
Ketika kita mengumpulkan userInput di bawah sana, kita sekarang

06:12.480 --> 06:14.820
memiliki userInput itu, dan sekarang kita dapat

06:14.820 --> 06:17.050
memeriksa apakah itu adalah tuple.

06:17.050 --> 06:19.820
Sekarang masalahnya adalah pada saat runtime, kita tidak

06:19.820 --> 06:22.620
memiliki cara untuk memeriksa apakah itu tuple.

06:22.620 --> 06:25.200
Tidak ada instanceof yang bisa kita gunakan.

06:25.200 --> 06:28.560
Tidak ada tipe Tuple yang bisa kita periksa.

06:28.560 --> 06:31.020
Kita juga tidak dapat memeriksa apakah

06:33.803 --> 06:36.053
typof userInput sama dengan tuple karena

06:37.130 --> 06:40.050
itu tidak ada dalam Vanilla JavaScript.

06:40.050 --> 06:41.850
String memang ada misalnya,

06:41.850 --> 06:44.950
tetapi tuple bukanlah tipe JavaScript.

06:44.950 --> 06:47.020
Jadi untuk mengecek apakah itu tuple,

06:47.020 --> 06:48.900
kita harus ingat bahwa tuple pada

06:48.900 --> 06:50.990
akhirnya hanya dihapus.

06:50.990 --> 06:52.750
Mereka istimewa di TypeScript,

06:52.750 --> 06:54.860
tetapi begitu kita berada di tanah

06:54.860 --> 06:55.940
JavaScript, mereka

06:55.940 --> 06:58.320
hanya dihapus karena gagasan tuple di

06:58.320 --> 06:59.950
mana jumlah elemen dan jenis

06:59.950 --> 07:02.000
elemen tetap benar-benar hanya

07:02.000 --> 07:04.470
ada di TypeScript.

07:04.470 --> 07:05.930
Jadi, selama runtime, yang

07:05.930 --> 07:09.370
perlu kita periksa di sini adalah apakah itu array, dan untuk

07:09.370 --> 07:12.950
itu, kita dapat menggunakan objek array dalam JavaScript,

07:12.950 --> 07:15.180
dan di sana metode isArray.

07:15.180 --> 07:17.500
Itu adalah metode yang dibangun ke dalam Vanilla JavaScript yang

07:17.500 --> 07:20.290
memungkinkan kita untuk memeriksa apakah ini di sini adalah sebuah array.

07:20.290 --> 07:23.200
Kita tahu itu tidak terdefinisi atau tuple.

07:23.200 --> 07:24.630
Tuple adalah sebuah array, jadi

07:24.630 --> 07:26.000
jika ini mengembalikan true,

07:26.000 --> 07:27.400
kita mendapatkan tuple.

07:27.400 --> 07:31.010
Dan kemudian di sini, kita dapat menggunakan penataan misalnya untuk

07:31.010 --> 07:34.070
mendapatkan judul, deskripsi, dan orang-orang dari input

07:34.070 --> 07:35.560
pengguna, dan kemudian melakukan

07:35.560 --> 07:37.720
sesuatu dengan input itu.

07:37.720 --> 07:39.230
Misalnya untuk saat

07:39.230 --> 07:42.623
ini, konsol. log judul, deskripsi, dan orang.

07:43.980 --> 07:46.060
Jika kita melakukan semua itu dan kita menyimpan

07:46.060 --> 07:47.950
semuanya, itu mengkompilasi tanpa kesalahan,

07:47.950 --> 07:49.870
dan jika kita kembali ke sini, dan saya klik di

07:49.870 --> 07:51.310
proyek seperti ini, saya mendapatkan

07:51.310 --> 07:53.050
input yang tidak valid.

07:53.050 --> 07:54.580
Jika saya memasukkan Hello, masih

07:54.580 --> 07:56.950
mendapatkannya karena kami tidak punya deskripsi.

07:56.950 --> 07:58.890
Ini adalah deskripsi.

07:58.890 --> 08:00.180
Kami masih mendapatkannya tentu

08:00.180 --> 08:02.940
saja, tetapi jika sekarang saya juga memasukkan sesuatu ke dalam

08:02.940 --> 08:05.220
orang, ini berfungsi dan kami mencetak ini di sini.

08:05.220 --> 08:09.330
Sekarang, tentu saja itu merupakan langkah bagus ke arah yang benar.

08:09.330 --> 08:10.990
Kita belum sepenuhnya berada di sana.

08:10.990 --> 08:13.330
Seperti yang saya katakan, kita bisa meningkatkan validasi.

08:13.330 --> 08:16.230
Hanya satu hal yang ingin saya lakukan segera sebelum kita melakukan

08:16.230 --> 08:20.070
itu, saya ingin menghapus semua input setelah kita mengklik ADD PROJECT.

08:20.070 --> 08:22.440
Jadi saya ingin mengosongkan semua input lagi.

08:22.440 --> 08:25.290
Nah untuk itu, kita bisa menambahkan method private baru, clearInput

08:25.290 --> 08:27.043
atau clearInputs, dan di sana, kita bisa

08:28.210 --> 08:32.740
mengatur titleInputElement ini. sama dengan string kosong

08:32.740 --> 08:34.130
dan ulangi itu untuk

08:36.200 --> 08:38.980
input lainnya juga.

08:38.980 --> 08:41.960
Jadi di sini, kita memiliki descriptionInputElement, dan

08:41.960 --> 08:44.250
di sini, kita memiliki peopleInputElement, dan

08:44.250 --> 08:48.190
sekarang, jika kita memanggil ini. clearInputs di sini, kita harus

08:48.190 --> 08:50.200
memastikan bahwa formulir dihapus

08:50.200 --> 08:51.730
setelah dikirimkan.

08:51.730 --> 08:52.870
Jadi, jika kita mencoba

08:52.870 --> 08:54.380
ini lagi, masukkan sesuatu di

08:54.380 --> 08:56.230
sini, Anda lihat itu dicetak di sini,

08:56.230 --> 08:57.740
dan formulirnya dihapus.

08:57.740 --> 09:00.720
Dengan itu, secara umum saya senang dengan cara kami menangani hal

09:00.720 --> 09:03.300
ini, tetapi sekarang saya ingin meningkatkan validasi

09:03.300 --> 09:06.970
dan menulis ini dengan cara yang lebih dapat digunakan kembali dan terukur.

09:06.970 --> 09:07.840
Seperti yang sudah saya

09:07.840 --> 09:10.320
sebutkan, silakan lakukan ini sendiri terlebih dulu.

09:10.320 --> 09:11.530
Dalam kuliah berikutnya, kita akan

09:11.530 --> 09:12.580
melakukannya bersama-sama.
