WEBVTT

00:02.230 --> 00:04.930
講師：さて､ ジェネリックスの基本は理解できたと思いますので､

00:04.930 --> 00:07.150
次は制約について､ あるいは追加できる特定のタイプの制約について､

00:07.150 --> 00:10.400
もう少し掘り下げてみましょう｡

00:10.400 --> 00:12.680
そのために､ さらに別の関数､ つまり汎用的な関数､

00:12.680 --> 00:16.293
extractAndConvertという名前をつけて取引することにする｡

00:18.700 --> 00:24.120
この関数の考え方は､ 第1引数としてオブジェクトを取得し､

00:24.120 --> 00:28.413
第2引数は最終的にキーとなる｡

00:30.050 --> 00:32.570
ここで､ オブジェクトの中のそのキーの値を返したいのですが､

00:32.570 --> 00:35.310
これはJavaScriptのこのデフォルトの記法でできます｡

00:35.310 --> 00:36.310
角括弧を使ってオブジェクトのプロパティとしてexeしているが､

00:36.310 --> 00:38.200
これはTypeScript固有のものではなく､

00:38.200 --> 00:42.010
またVanilla JavaScriptのものである｡

00:42.010 --> 00:44.580
したがって､ ここではオブジェクトを用意し､

00:44.580 --> 00:48.460
キーには文字列を指定することにします｡

00:48.460 --> 00:57.510
なぜなら､ 最終的に得られるオブジェクトが本当にそのキーを持つかどうかがわからないからです｡

00:57.510 --> 01:01.430
TypeScriptがこの奇妙なエラーで伝えていることは以上です｡

01:01.430 --> 01:02.530
例えば､ ここでは､

01:02.530 --> 01:09.770
空のオブジェクトと名前を指定してこれを呼び出した結果をコンソールログに記録することができます｡

01:09.770 --> 01:12.600
ちなみに､ このextractAndConvertというのは､

01:12.600 --> 01:18.600
コンソールログなしで､ 単にValue, colon, plusと呼び出したいからです｡

01:18.600 --> 01:19.660
でも､ それはあくまで副次的なもので､

01:19.660 --> 01:22.450
最終的にはその取得したデータで迷走を返しているんです｡

01:22.450 --> 01:23.840
しかし､ ここでの一番の問題は､ このように呼び出すと､

01:23.840 --> 01:25.160
最初のパラメータとしてオブジェクトが渡され､

01:26.091 --> 01:29.890
次に2番目のパラメータとして文字列が渡されることです｡

01:29.890 --> 01:35.193
しかし正しくは､ 結局このキーがこのオブジェクトに存在することは保証されないとTypeScriptは教えてくれる｡

01:36.420 --> 01:39.920
さて､ これを保証するために､ ここでも汎用型を使うことができる｡ 

01:39.920 --> 01:43.130
Tという型があり､ それがここでのオブジェクトになります｡

01:43.130 --> 01:46.550
エクステンド・オブジェクトと言える｡ 

01:46.550 --> 01:48.363
でも､ Uと打つことも必要です｡ 

01:49.440 --> 01:56.320
ここで言うキーは､ 最終的にはT型のキーでなければならないのですが｡

01:56.320 --> 01:58.210
つまり､ このオブジェクトの､

01:58.210 --> 02:04.890
2番目のパラメータとして得られるものが､ 最初の型のプロパティであることを保証したいのです｡

02:04.890 --> 02:09.130
そして､ そのためにTのキーを伸ばすと言うことができます｡ 

02:11.550 --> 02:13.540
これは､ TypeScriptに､

02:13.540 --> 02:25.870
最初のパラメータは任意の種類のオブジェクトで､ 2番目のパラメータはそのオブジェクトの任意の種類のキーであることを知らせているためです｡

02:25.870 --> 02:28.480
そしてここでは､ そう､ あらゆる種類のオブジェクトを渡しているのですが､

02:28.480 --> 02:30.430
そこには名前キーがないのです｡

02:30.430 --> 02:34.990
このエラーは､ nameキーを追加した途端､ 解消されます｡ 

02:34.990 --> 02:37.990
もちろんこれは本当に便利なもので､

02:37.990 --> 02:49.120
この関数を呼び出そうとして､ 最終的に存在しないプロパティとして呼び出そうとするような､

02:49.120 --> 02:56.740
間抜けな間違いをしないようにするためです｡

02:56.740 --> 02:58.140
だから､ これは有効なのです｡ 

02:58.140 --> 02:59.870
しかし､ ここで'age'としてexeしようとすると､

02:59.870 --> 03:01.570
またもやエラーになるなど｡

03:02.890 --> 03:05.560
そこで､ これを「名前」に切り替えてみましょう｡ 
