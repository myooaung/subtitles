WEBVTT

00:02.540 --> 00:05.610
教师：接下来, 我想学习函数重载,

00:05.610 --> 00:08.050
这个特性允许我们定义多个函数签名,

00:08.050 --> 00:13.840
也就是说, 为同一个函数定义多个函数签名｡

00:13.840 --> 00:20.340
这仅仅意味着我们可以有多种可能的方法来调用一个带有不同参数的函数,

00:20.340 --> 00:24.300
例如, 然后在该函数内部做一些事情｡

00:24.300 --> 00:29.060
函数重载可以帮助我们的一个很好的例子可以在上面看到｡

00:29.060 --> 00:32.090
我们之前写的这个add函数, 它的作用是取两个可组合的值,

00:32.090 --> 00:43.450
也就是字符串或数字, 然后你可以看到返回类型TypeScript推断这里所有的都是可组合的.

00:43.450 --> 00:47.960
这仅仅意味着TypeScript理解它返回的也是字符串或数字,

00:47.960 --> 00:52.880
但实际上, 如果你仔细想想, 这并不是真的｡

00:52.880 --> 00:55.280
我的意思是, 从技术上讲, 这是正确的,

00:55.280 --> 00:57.620
但是我们知道如果我们传入两个数字,

00:57.620 --> 00:59.400
返回类型将始终是数字｡

00:59.400 --> 01:03.950
如果我们至少传入一个字符串, 则返回类型将是string｡

01:03.950 --> 01:05.460
这有什么关系呢？

01:05.460 --> 01:08.225
记住add函数是这样写的｡ 

01:08.225 --> 01:11.060
实际上, 你可以注释掉下面的所有内容,

01:11.060 --> 01:15.390
然后在函数的正下方添加一些新代码｡

01:15.390 --> 01:18.670
如果我现在通过调用add得到结果,

01:18.670 --> 01:23.390
我传入1和5, 你会看到结果是可组合的｡

01:23.390 --> 01:30.390
其结果是TypeScript不知道result是数字还是字符串｡

01:30.390 --> 01:34.510
如果我们传递字符串的话, 这可能真的很重要｡ 

01:34.510 --> 01:41.750
如果我把马克斯·施瓦兹放在这里, 这就可以了, 但我还是可以组合的.

01:41.750 --> 01:46.120
结果就是我不能调用result上的字符串函数,

01:46.120 --> 01:50.600
我不能调用split, 比如说, 在空格上拆分｡

01:50.600 --> 01:52.870
我知道这是可行的, 因为我知道当我像这样调用函数时,

01:52.870 --> 02:05.620
我会让它进入if分支, 我会得到一个字符串, 所以我知道结果会保存字符串, 但TypeScript只知道它保存的是字符串或数字｡

02:05.620 --> 02:11.340
当然, 我们可以在这里使用类型转换, 告诉TypeScript我们得到的是一个字符串｡

02:11.340 --> 02:16.040
我们可以使用前面学习的类型转换语法来实现这一点｡

02:16.040 --> 02:18.840
但是, 我认为这样做并不是最佳的, 因为我们必须在这里写更多的代码,

02:18.840 --> 02:27.740
即使我们希望TypeScript理解当我们像这样调用这个函数时, 我们总是会得到一个字符串｡

02:27.740 --> 02:30.890
但是TypeScript在这里并没有很好地分析我们的代码,

02:30.890 --> 02:35.000
而这正是函数重载可以帮助我们的地方｡

02:35.000 --> 02:38.730
一个函数重载就是在主函数的正上方写上function,

02:38.730 --> 02:54.080
也就是说, 用相同的名字, 所以你在这里基本上重复这一行, 但是没有花括号, 也没有左右花括号, 现在你想用特定的类型number和number,

02:54.080 --> 03:03.410
然后是find返回类型, 当你至少得到一个数字的时候.

03:03.410 --> 03:06.643
我们可以说, 返回类型是数字.

03:08.840 --> 03:10.980
所以现在我们对TypeScript说,

03:10.980 --> 03:17.180
如果我们调用这个函数, 并且两个参数都是数字, 那么这个函数返回一个数字｡

03:17.180 --> 03:19.430
当然, 这不是JavaScript中的语法,

03:19.430 --> 03:24.430
它将在编译过程中被TypeScript删除｡

03:24.430 --> 03:31.380
但是TypeScript将这个函数信息和这个函数声明合并在一起,

03:31.380 --> 03:35.550
基本上结合了这两行的知识｡

03:35.550 --> 03:43.790
现在它知道了, 我们可以用可组合类型的A和B或者用数字类型的A和B来调用这个函数｡

03:43.790 --> 03:47.060
顺便说一下, 你也可以在重载中添加更多或更少的参数,

03:47.060 --> 03:50.100
你在那里真的很灵活｡

03:50.100 --> 03:53.640
你也可以在这里添加add函数, 只需要一个数字,

03:53.640 --> 04:03.270
然后返回一个数字, 如果我们在其他重载中也把B设为可选的, 这也是可行的.

04:03.270 --> 04:05.254
因为最终你当然需要确保你的代码在这里总是有效的,

04:05.254 --> 04:10.850
并且你最终会收到你需要的所有参数｡

04:10.850 --> 04:15.170
所以B在这里是可选的, 然后你会看到这个是有效的,

04:15.170 --> 04:19.550
现在我们只需要解决B可能是可选的问题｡

04:19.550 --> 04:21.390
但是我不需要它, 所以我会去掉它,

04:21.390 --> 04:27.200
只留下这个, 但是我也不想在用字符串调用它的时候有一个重载.

04:27.200 --> 04:30.060
所以我会在这里添加另一个add函数重载,

04:30.060 --> 04:38.460
其中A是字符串, B是字符串, 然后我很清楚我们返回的是字符串.

04:38.460 --> 04:43.660
顺便说一下, 在这些重载行后面添加分号是一个很好的做法｡

04:43.660 --> 04:46.560
所以现在我说如果我们用两个数字调用这个函数,

04:46.560 --> 04:49.100
我们总是会得到一个数字｡

04:49.100 --> 04:52.170
如果我们用两个字符串调用它, 我们总是得到一个字符串｡ 

04:52.170 --> 04:54.510
如果我们用一个字符串和一个数字来调用它,

04:54.510 --> 04:59.410
我们技术上也总是得到一个字符串, 但是我不想在这里添加所有这些可能的组合,

04:59.410 --> 05:03.173
当然我可以添加更多的, 然后在这里也添加数字, 或者我们可能有的另一个组合,

05:04.040 --> 05:07.500
就是这个｡

05:07.500 --> 05:10.060
我想现在我确实把所有的组合都加进去了｡ 

05:10.060 --> 05:12.540
现在我在这里列出所有可能的值组合,

05:12.540 --> 05:16.040
以及每种情况下的返回值｡

05:16.040 --> 05:18.260
现在, 你可以看到下面的错误消失了,

05:18.260 --> 05:20.520
因为现在TypeScript知道,

05:20.520 --> 05:25.623
如果我们用这两个字符串值调用add, 结果将是字符串类型｡

05:25.623 --> 05:31.100
如果我将鼠标悬停在add上, 您会看到有三个额外的重载可用｡

05:31.100 --> 05:32.980
这里我用两个字符串调用add,

05:32.980 --> 05:36.630
但是TypeScript知道还有其他三种调用方法｡

05:36.630 --> 05:39.450
例如, 用一个字符串和一个数字,

05:39.450 --> 05:41.340
在这种情况下, 我得到一个字符串,

05:41.340 --> 05:46.340
用一个数字和一些字符串, 或者用两个数字｡

05:47.430 --> 05:48.630
这样也行｡ 

05:48.630 --> 05:50.210
当然我不能调用split,

05:50.210 --> 05:54.630
因为TypeScript正确地识别出当我用两个数字调用这个函数时, 我会得到一个数字,

05:54.630 --> 05:58.253
而在一个数字上你不能调用split｡

05:59.260 --> 06:04.060
这些都是函数重载, 它们可以帮助你解决像这样的情况,

06:04.060 --> 06:08.590
TypeScript不能自己正确地推断返回类型,

06:08.590 --> 06:16.033
在这里你可以清楚地知道, 你的函数中可能支持的不同组合, 返回了什么｡
