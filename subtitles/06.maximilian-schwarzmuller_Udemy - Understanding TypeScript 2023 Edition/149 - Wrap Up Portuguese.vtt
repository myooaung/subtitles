WEBVTT

00:02.350 --> 00:04.720
-: E é tudo para os módulos.

00:04.720 --> 00:08.850
Agora o uso de módulos é uma característica super útil e importante,

00:08.850 --> 00:11.130
pois permite escrever códigos mais manejáveis

00:11.130 --> 00:14.550
e manejáveis. Ter tudo isso em um arquivo é uma

00:14.550 --> 00:16.360
bagunça e realmente não é uma opção

00:16.360 --> 00:19.360
para nada além de projetos realmente minúsculos.

00:19.360 --> 00:22.350
O uso de namespaces ou módulos ES sempre existe

00:22.350 --> 00:24.710
para uma alternativa muito melhor.

00:24.710 --> 00:27.620
Uma vez que garante, cada arquivo por si só é relativamente

00:27.620 --> 00:30.780
pequeno e, portanto, permanece manejável.

00:30.780 --> 00:33.470
E ainda assim, você acaba com toda aquela

00:33.470 --> 00:36.690
grande aplicação que você quer ter no final.

00:36.690 --> 00:38.580
Agora, quando se trata destas

00:38.580 --> 00:42.883
duas abordagens, Namespaces e módulos ES, a recomendação clara é

00:42.883 --> 00:46.520
ES módulos, porque você obtém aquele tipo extra de segurança,

00:46.520 --> 00:48.910
e você garante que cada arquivo, tem que

00:48.910 --> 00:52.210
especificar claramente o que ele quer.

00:52.210 --> 00:54.270
Com namespaces, bastava que um arquivo

00:54.270 --> 00:56.280
importasse algo, que outro arquivo

00:56.280 --> 00:58.350
também precisasse.

00:58.350 --> 00:59.970
As desvantagens disso, se aquele

00:59.970 --> 01:02.230
arquivo, que importou a coisa, for removido,

01:02.230 --> 01:05.640
aquele outro arquivo também se quebra, sem que você perceba.

01:05.640 --> 01:08.774
Pelo menos, sem que você perceba antes de executar o código.

01:08.774 --> 01:11.340
Assim, portanto, utilize os módulos ES.

01:11.340 --> 01:14.250
Use namespaces em projetos menores, ou se por

01:14.250 --> 01:18.100
alguma razão você não puder usar os módulos ES, E você não pode

01:18.100 --> 01:19.970
usar outro bundler, o que traduziria

01:19.970 --> 01:24.290
tais módulos. Ao código não-módulo, que todos os trabalhos

01:24.290 --> 01:26.360
e todos os navegadores.

01:26.360 --> 01:30.070
Mas além disso, os módulos ES são utilizados de fato.

01:30.070 --> 01:31.748
E o que acabo de dizer é importante.

01:31.748 --> 01:34.828
Estes módulos aqui, agora da maneira como os usamos,

01:34.828 --> 01:37.620
só funcionam em navegadores modernos.

01:37.620 --> 01:39.670
Porque confiamos no navegador, para basicamente

01:39.670 --> 01:42.640
importar todos esses arquivos. Certo?

01:42.640 --> 01:44.675
Agora, é claro que queremos construir

01:44.675 --> 01:48.940
aplicações com digitação, que também rodam em todos os navegadores.

01:48.940 --> 01:52.090
Internet Explorer 9, por exemplo.

01:52.090 --> 01:54.130
Lá isso não seria apoiado.

01:54.130 --> 01:55.730
Esta sintaxe, não é suportada ali.

01:55.730 --> 01:57.410
Portanto, o aplicativo não seria executado lá.

01:57.410 --> 01:59.160
Podemos também estar usando algumas outras

01:59.160 --> 02:01.280
características que não são suportadas ali, mas principalmente

02:01.280 --> 02:03.840
isto aqui não é suportado em todos os navegadores.

02:03.840 --> 02:06.250
Portanto, para que isso funcione em todos os navegadores, podemos

02:06.250 --> 02:09.283
usar uma ferramenta de agrupamento. Podemos usar o Webpack, por exemplo.

02:09.283 --> 02:12.431
Para agrupar isso em um único arquivo JavaScript.

02:12.431 --> 02:15.810
Assim, durante o desenvolvimento, temos esta experiência de

02:15.810 --> 02:19.060
digitação múltipla e forte, mas quando enviamos nosso código,

02:19.060 --> 02:21.310
na verdade temos apenas um arquivo.

02:21.310 --> 02:23.600
E agora, a vantagem de enviar um arquivo

02:23.600 --> 02:25.676
em vez de todos esses arquivos que temos

02:25.676 --> 02:28.177
aqui, é que também temos a certeza de que o navegador

02:28.177 --> 02:31.181
não precisa baixar tantos arquivos.

02:31.181 --> 02:33.630
Porque cada arquivo que tem que ser baixado, é

02:33.630 --> 02:37.010
uma viagem extra de ida e volta. Na aba de rede das ferramentas de desenvolvimento,

02:37.010 --> 02:38.510
você pode realmente ver isso.

02:38.510 --> 02:40.650
A área que você vê esta carta da cachoeira,

02:40.650 --> 02:42.230
e você vê esta pequena caixa

02:42.230 --> 02:44.520
branca no início de cada bloco.

02:44.520 --> 02:46.380
Este é basicamente o tempo necessário

02:46.380 --> 02:48.506
para configurar o pedido do HDP.

02:48.506 --> 02:51.807
Portanto, mesmo que os arquivos que estamos baixando sejam muito

02:51.807 --> 02:54.700
pequenos, como você pode dizer, isto ainda leva algum tempo

02:54.700 --> 02:56.900
porque toda a configuração extra redundante,

02:56.900 --> 02:59.100
para cada solicitação do HDP.

02:59.100 --> 03:02.330
Portanto, fazer menos solicitações é uma boa idéia de qualquer forma,

03:02.330 --> 03:04.640
independentemente do suporte do navegador.

03:04.640 --> 03:08.370
Portanto, por estas duas razões, suporte ao navegador e menos solicitações,

03:08.370 --> 03:11.000
daremos uma olhada no empacotamento, com Webpack, na

03:11.000 --> 03:12.453
próxima seção do curso.
