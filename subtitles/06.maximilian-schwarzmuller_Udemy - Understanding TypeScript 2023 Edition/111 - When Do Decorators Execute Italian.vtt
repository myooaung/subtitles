WEBVTT

00:02.440 --> 00:04.260
-: Prima di immergerci in altri esempi,

00:04.260 --> 00:05.433
cerchiamo di capire l'ordine

00:05.433 --> 00:07.940
di esecuzione dei decoratori.

00:07.940 --> 00:10.530
E qui è importante capire che, prima di tutto,

00:10.530 --> 00:11.950
sono tutti in esecuzione

00:11.950 --> 00:13.710
senza che noi istanziamo questo

00:13.710 --> 00:15.396
prodotto.

00:15.396 --> 00:16.600
O, in altre parole,

00:16.600 --> 00:18.300
se creo un prodotto qui

00:18.300 --> 00:19.670
con, nuovo prodotto,

00:19.670 --> 00:21.233
libro, per 19 dollari,

00:21.233 --> 00:24.563
e creo un altro prodotto qui, libro due per

00:24.563 --> 00:26.660
29 dollari.

00:26.660 --> 00:27.887
questo si è conformato

00:27.887 --> 00:29.970
senza errori del mio codice decoratore

00:29.970 --> 00:31.730
qui non funziona più spesso.

00:31.730 --> 00:35.350
Quindi non è importante l'istanziazione di questa classe.

00:35.350 --> 00:36.680
Tutti questi decoratori,

00:36.680 --> 00:38.452
non importa se si tratta di un decoratore

00:38.452 --> 00:41.810
di proprietà, di un decoratore di metodo, di un decoratore di accessi

00:41.810 --> 00:43.620
o di un decoratore di parametri, sono

00:43.620 --> 00:46.770
stati tutti eseguiti quando si è definita questa classe e questo

00:46.770 --> 00:48.930
è importante da capire.

00:48.930 --> 00:50.960
Non si tratta di decoratori che vengono eseguiti

00:50.960 --> 00:53.190
in fase di esecuzione quando si chiama un metodo

00:53.190 --> 00:55.100
o si lavora con una proprietà.

00:55.100 --> 00:57.190
Non è questo che fanno.

00:57.190 --> 00:59.360
Questi decoratori permettono invece di fare

00:59.360 --> 01:01.875
un ulteriore lavoro di impostazione dietro le quinte,

01:01.875 --> 01:04.397
quando viene definita una classe.

01:04.397 --> 01:06.590
Torniamo al concetto di metaprogrammazione che

01:06.590 --> 01:08.070
ho spiegato prima, giusto.

01:08.070 --> 01:10.200
Questa è l'idea alla base dei decoratori

01:10.200 --> 01:12.410
o il loro caso d'uso principale.

01:12.410 --> 01:15.520
Non sono ascoltatori di eventi che si aggiungono a qualcosa in modo che

01:15.520 --> 01:17.100
quando si lavora con una proprietà si

01:17.100 --> 01:18.490
possa eseguire del codice.

01:18.490 --> 01:19.740
Si può far funzionare

01:19.740 --> 01:21.069
qualcosa del genere con

01:21.069 --> 01:23.740
i decoratori, ma modificando qualcosa dietro

01:23.740 --> 01:24.977
le quinte, mentre il

01:24.977 --> 01:26.756
decoratore stesso è solo una

01:26.756 --> 01:29.710
funzione che viene eseguita quando la classe è

01:29.710 --> 01:33.233
definita, quando la classe viene (borbottata) e si può

01:33.233 --> 01:35.010
usare il decoratore per fare

01:35.010 --> 01:37.460
un po' di lavoro dietro le quinte, per impostare

01:37.460 --> 01:39.890
del codice che dovrebbe essere eseguito

01:39.890 --> 01:43.660
ogni volta che viene chiamato.

01:43.660 --> 01:47.310
Per aggiungere meta-dati extra o memorizzare alcuni dati su una proprietà

01:47.310 --> 01:50.030
da qualche altra parte nel progetto o nella libreria

01:50.030 --> 01:51.696
che si sta creando.

01:51.696 --> 01:54.075
Questo è ciò per cui si possono usare i decoratori

01:54.075 --> 01:55.756
e questo è tutto lo schema che

01:55.756 --> 01:58.420
vedrete quando vi mostrerò questi esempi di

01:58.420 --> 02:00.320
ciò che potreste costruire con

02:00.320 --> 02:02.290
i decoratori.

02:02.290 --> 02:04.740
Aggiungono funzionalità aggiuntive dietro

02:04.740 --> 02:06.200
le quinte, che a volte possono

02:06.200 --> 02:08.060
essere eseguite quando si fa qualcosa

02:08.060 --> 02:14.313
con la classe o con il metodo, ma che possono anche fare cose completamente diverse.

02:15.240 --> 02:17.860
Questo è importante per il nostro esempio

02:17.860 --> 02:21.320
di persona di prima con il decoratore di template.

02:21.320 --> 02:22.980
Questo non aggiunge questo modello

02:22.980 --> 02:25.160
ogni volta che istanziamo una persona.

02:25.160 --> 02:27.890
Lo aggiunge ogni volta che definiamo questa classe.

02:27.890 --> 02:29.820
Per modificare questo comportamento, dovremmo

02:29.820 --> 02:31.650
aggiungere una logica aggiuntiva all'interno

02:31.650 --> 02:33.140
della nostra funzione decoratore.

02:33.140 --> 02:35.980
E magari memorizzare questo modello in qualche

02:35.980 --> 02:38.441
altra struttura di dati del nostro progetto,

02:38.441 --> 02:41.380
in cui poi inseriamo la scheda ogni volta che creiamo

02:41.380 --> 02:43.650
una nuova persona.

02:43.650 --> 02:45.278
In pratica, lo impostiamo quando

02:45.278 --> 02:47.240
definiamo la classe, ma poi lo memorizziamo

02:47.240 --> 02:48.400
internamente dietro

02:48.400 --> 02:52.350
le quinte e possiamo usarlo quando vogliamo.

02:52.350 --> 02:54.160
In questo momento, il rendering avviene

02:54.160 --> 02:55.380
sempre quando si definisce

02:55.380 --> 02:57.610
la classe, non quando si crea una nuova istanza.

02:57.610 --> 02:59.570
Questo è il modo in cui i decoratori vengono

02:59.570 --> 03:00.403
eseguiti e, come

03:00.403 --> 03:01.940
ho detto, ora vi mostrerò un paio

03:01.940 --> 03:04.504
di esempi in cui sfruttiamo i decoratori in generale

03:04.504 --> 03:06.900
e il loro tempo di esecuzione per fare alcune belle

03:06.900 --> 03:08.883
cose con loro.
