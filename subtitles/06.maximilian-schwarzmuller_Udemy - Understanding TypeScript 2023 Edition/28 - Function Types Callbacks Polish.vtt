WEBVTT

00:02.440 --> 00:05.170
Instruktor: Teraz mówiąc o callbackach i

00:05.170 --> 00:08.400
typach funkcji, tam działa to całkiem podobnie.

00:08.400 --> 00:10.550
Powiedzmy, że mamy nową funkcję

00:11.800 --> 00:14.990
tam na górze addAndHandle, powiedzmy.

00:14.990 --> 00:18.420
Tam oczekujemy, że otrzymamy dwie liczby, a następnie chcę również

00:19.740 --> 00:22.320
uzyskać funkcję wywołania zwrotnego tutaj.

00:22.320 --> 00:24.480
Czyli funkcja, która jest przekazywana i jest

00:24.480 --> 00:26.670
argumentem, który powinien coś zrobić z wynikiem,

00:26.670 --> 00:29.930
to tutaj moglibyśmy wygenerować wynik oczywiście.

00:29.930 --> 00:31.060
Ale nie tylko zwracając

00:31.060 --> 00:33.290
go, ale zamiast tego chcę wywołać funkcję

00:33.290 --> 00:35.670
wywołania zwrotnego i przekazać wynik.

00:35.670 --> 00:36.990
Teraz dla tego chcę być naprawdę

00:36.990 --> 00:39.270
jasny, że callback powinien być funkcją.

00:39.270 --> 00:42.190
Więc znowu używam tej definicji typu funkcji,

00:42.190 --> 00:45.640
która może nie zwraca niczego, ale przyjmuje

00:45.640 --> 00:49.650
liczbę jako argument, ponieważ przekazujemy jej liczbę

00:49.650 --> 00:51.280
tutaj.

00:51.280 --> 00:52.740
Tak więc funkcja callback,

00:52.740 --> 00:55.870
funkcja, którą przekazujemy do tej funkcji jako

00:55.870 --> 00:58.460
parametr powinna przyjąć liczbę.

00:58.460 --> 01:01.890
Teraz na dole wywołalibyśmy addAndHandle, przekazali

01:01.890 --> 01:05.240
10 i 20, a następnie przekazali funkcję.

01:05.240 --> 01:07.570
Na przykład, anonimowa funkcja tutaj.

01:07.570 --> 01:09.710
Więc teraz tutaj, kiedy wywołujemy funkcję,

01:09.710 --> 01:11.470
to oczywiście nie jest typ funkcji, ale

01:11.470 --> 01:13.620
konkretna wartość, którą przekazujemy dla tego

01:13.620 --> 01:15.150
trzeciego argumentu.

01:15.150 --> 01:18.870
Więc to teraz jest anonimowa funkcja tworząca

01:18.870 --> 01:22.300
tu i tam wiemy, że dostaniemy liczbę.

01:22.300 --> 01:23.810
Może nazwijmy to wynikiem tutaj

01:23.810 --> 01:26.110
i wtedy możemy zrobić z tym co chcemy.

01:26.110 --> 01:27.623
I teraz, jeśli skompilujesz

01:28.570 --> 01:31.120
to, widzimy ten dziennik na dole, 30, który jest

01:31.120 --> 01:33.540
wynikiem naszej funkcji callback, którą przekazaliśmy

01:33.540 --> 01:35.600
do addAndHandle, gdzie addAndHandle

01:35.600 --> 01:38.250
łączy się z dwoma liczbami, a następnie wywołuje

01:38.250 --> 01:39.850
callback, gdzie callback musi

01:39.850 --> 01:43.200
spełnić ten warunek tutaj.

01:43.200 --> 01:45.870
Zaletą tego, że definiujemy tutaj definicję funkcji

01:45.870 --> 01:49.490
callback jest to, że wewnątrz funkcji, którą przekazujemy są typy callback,

01:49.490 --> 01:52.240
które są w stanie wywnioskować, że result będzie liczbą,

01:52.240 --> 01:54.000
a co za tym idzie moglibyśmy tutaj

01:54.000 --> 01:56.620
zrobić cokolwiek z result.

01:56.620 --> 01:58.090
Co mogliśmy zrobić z liczbą

01:58.090 --> 02:00.990
bez wyraźnego podawania typu tutaj, ponieważ TypeScript

02:00.990 --> 02:03.226
wie, że wynik będzie liczbą, ponieważ zrobiliśmy

02:03.226 --> 02:04.970
to naprawdę jasno, że callback otrzyma

02:04.970 --> 02:08.473
jeden argument, który jest liczbą.

02:09.310 --> 02:12.170
Stąd, jeśli oczekiwalibyśmy drugiego argumentu tutaj

02:12.170 --> 02:13.060
w callbacku, dostalibyśmy

02:13.060 --> 02:15.460
błąd, ponieważ dobrze wiemy, callback, którego

02:15.460 --> 02:18.630
oczekujemy w naszej funkcji addAndHandle powinien mieć tylko

02:18.630 --> 02:20.500
jeden argument.

02:20.500 --> 02:22.420
Więc jeśli następnie przekażemy funkcję

02:22.420 --> 02:23.950
wywołania zwrotnego, która przyjmuje

02:23.950 --> 02:26.240
drugi argument, to wyraźnie jest to błąd.

02:26.240 --> 02:28.250
Jedyną rzeczą, której TypeScript nie podnosi,

02:28.250 --> 02:30.280
jest to, że zwracamy coś tutaj.

02:30.280 --> 02:33.690
Jeśli wynik zwrotny i callback rzeczywiście zwraca coś, mimo

02:33.690 --> 02:34.767
że wyraźnie zaznaczyliśmy,

02:34.767 --> 02:37.300
że nie powinien nic zwracać.

02:37.300 --> 02:41.180
To jednak nie jest błąd ani błąd w TypeScript.

02:41.180 --> 02:43.150
Tak naprawdę dzieje się to celowo.

02:43.150 --> 02:46.000
Określając void w naszym typie wywołania zwrotnego,

02:46.000 --> 02:49.520
zasadniczo mówimy, że zignorujemy wszelkie wyniki, które możesz

02:49.520 --> 02:50.910
zwrócić tutaj.

02:50.910 --> 02:54.030
Więc zasadniczo mówimy w addAndHandle, gdzie otrzymujemy

02:54.030 --> 02:56.020
tę funkcję zwrotną, nie będziemy

02:56.020 --> 02:58.080
robić nic z typem zwrotu.

02:58.080 --> 03:00.600
Dlatego będziesz mógł zwrócić coś tutaj

03:00.600 --> 03:03.550
bez kary, ale wiesz, ponieważ jest to wyraźnie

03:03.550 --> 03:06.850
określone tutaj na typie callback, że callback nie

03:06.850 --> 03:09.230
zrobi nic z wartością, którą możesz

03:09.230 --> 03:10.870
zwrócić tutaj.

03:10.870 --> 03:13.543
Tak, że addAndHandle wewnątrz funkcji

03:13.543 --> 03:15.680
nie zrobi nic z tą wartością, którą

03:15.680 --> 03:17.120
możesz zwrócić.

03:17.120 --> 03:19.620
I to jest oczywiście przydatna informacja.

03:19.620 --> 03:21.270
Można by się spodziewać, że

03:21.270 --> 03:25.710
tutaj robimy coś z wartością zwracaną przez callback, a określając ten

03:25.710 --> 03:29.000
typ tutaj, sprawiamy, że jest naprawdę jasne, że wewnątrz

03:29.000 --> 03:31.520
addAndHandle nie jesteśmy zainteresowani

03:31.520 --> 03:33.920
żadną wartością zwrotną.

03:33.920 --> 03:36.410
Więc to nie zmusza cię do przekazania wywołania zwrotnego,

03:36.410 --> 03:38.260
które nie zwraca niczego.

03:38.260 --> 03:40.830
Po prostu mówi, że wszystko, co możesz zwrócić, nie

03:40.830 --> 03:42.200
zostanie wykorzystane.

03:42.200 --> 03:44.070
W przypadku parametrów jest oczywiście inaczej.

03:44.070 --> 03:45.540
Tam jest to wymuszone, ponieważ

03:45.540 --> 03:48.310
tutaj naprawdę ma znaczenie, że wiesz, czy przekazujesz

03:48.310 --> 03:51.720
callback, który oczekuje więcej parametrów.

03:51.720 --> 03:53.490
Cóż, wtedy dostaniesz błąd lub

03:53.490 --> 03:55.350
nie otrzymasz wyniku, który chcesz,

03:55.350 --> 03:57.740
ponieważ podaję tylko jeden wynik.

03:57.740 --> 04:01.290
Więc tam nie możemy po prostu zignorować tego, co możesz chcieć, jak to

04:01.290 --> 04:02.840
jest w przypadku typu zwrotu.

04:02.840 --> 04:05.506
Ignorujemy to tutaj w przypadku przekazywania czegoś

04:05.506 --> 04:08.750
w miejscu, gdzie odpowiada za to funkcja addAndHandle, ponieważ

04:08.750 --> 04:10.920
to właśnie tam wywoływany jest callback.

04:10.920 --> 04:13.210
To dlatego parametry są wymuszane, a TypeScript

04:13.210 --> 04:15.060
jest naprawdę surowy w odniesieniu

04:15.060 --> 04:17.150
do liczby i typu parametrów funkcji wywołania

04:17.150 --> 04:19.508
zwrotnego i dlaczego tak naprawdę nie dba o

04:19.508 --> 04:21.253
typ powrotu.
