WEBVTT

00:02.400 --> 00:04.390
Istruttore: Abbiamo reso il nostro

00:04.390 --> 00:07.240
primo modulo, ma noterete che lo stile è un po' fuori

00:07.240 --> 00:09.200
posto, cioè il modulo sembra a posto,

00:09.200 --> 00:11.910
ma una certa distanza tra i bordi dello schermo e

00:11.910 --> 00:13.870
il modulo sarebbe gradita.

00:13.870 --> 00:15.830
Se ci si immerge nell'app. css, si noterà

00:15.830 --> 00:18.360
che c'è un selettore ID per

00:18.360 --> 00:21.050
l'input dell'utente.

00:21.050 --> 00:23.330
Se aggiungiamo alcuni margini, non sembra male,

00:23.330 --> 00:28.060
quindi in realtà possiamo fare un'applicazione.

00:28.060 --> 00:28.060
quando

00:28.060 --> 00:31.740
creiamo il nostro elemento o quando vi accediamo.

00:31.740 --> 00:34.520
Possiamo raggiungere l'elemento e aggiungere

00:34.520 --> 00:36.840
un ID, che sarà inserito dall'utente.

00:36.840 --> 00:39.740
In questo modo ci si assicurerà che l'elemento reso abbia questo

00:39.740 --> 00:42.800
ID, quindi se questo viene ricaricato l'aspetto è molto più bello.

00:42.800 --> 00:45.100
Se si esamina la profondità del browser,

00:45.100 --> 00:49.320
si vede l'ID e questo è il motivo del miglioramento dello stile.

00:49.320 --> 00:51.940
Con questo stiamo già facendo il passo successivo,

00:51.940 --> 00:54.010
stiamo interagendo con l'elemento.

00:54.010 --> 00:56.980
Questa non è l'unica interazione che voglio fare.

00:56.980 --> 00:58.770
Dato che abbiamo un modulo,

00:58.770 --> 01:01.870
voglio avere accesso ai diversi input del modulo,

01:01.870 --> 01:05.910
in modo da poter leggere i valori quando il modulo viene inviato

01:05.910 --> 01:08.800
e da impostare un ascoltatore di eventi per

01:08.800 --> 01:12.160
l'invio e validare l'input dell'utente.

01:12.160 --> 01:15.720
Quindi abbiamo bisogno di accedere al pulsante o al modulo nel suo

01:15.720 --> 01:19.180
complesso per ascoltare l'invio e a tutti gli elementi di input

01:19.180 --> 01:21.273
per ottenere gli ultimi valori.

01:22.360 --> 01:25.440
Per questo, prima di collegare tutto, ma dopo

01:25.440 --> 01:28.500
aver assegnato il mio ID all'elemento qui,

01:28.500 --> 01:32.210
voglio avere accesso ai diversi input in quell'elemento

01:32.210 --> 01:35.980
del form e voglio memorizzarli come proprietà di questa

01:35.980 --> 01:39.820
classe, quindi aggiungerò altri campi lassù e il primo

01:39.820 --> 01:44.570
campo potrebbe essere un campo titleInputElement.

01:44.570 --> 01:47.167
Il tipo sarà HTMLInputElement scrivere questo,

01:48.060 --> 01:50.410
e non ci servirà solo una volta che avremo

01:50.410 --> 01:52.770
bisogno di altri due campi simili.

01:52.770 --> 01:55.900
Abbiamo un campo descriptionInputElement che

01:55.900 --> 01:57.550
è di tipo HTMLInputElement

01:58.520 --> 02:02.730
e abbiamo bisogno anche di un campo peopleInputElement.

02:02.730 --> 02:06.240
Ora possiamo popolare questi campi qui nel costruttore,

02:06.240 --> 02:09.500
con questo titleInputElement che è impostato uguale

02:09.500 --> 02:11.510
a questo. quindi all'elemento

02:11.510 --> 02:13.120
form, tenendo sempre

02:13.120 --> 02:16.390
presente che questo è l'elemento form, al selettore

02:16.390 --> 02:21.350
di query e poi alla query per l'elemento title.

02:21.350 --> 02:25.000
E se si guarda ancora una volta all'indice. html vediamo che abbiamo

02:25.000 --> 02:28.410
il titolo dell'ID di questo elemento, quindi

02:28.410 --> 02:30.420
possiamo interrogarlo, quindi

02:30.420 --> 02:33.323
in app. Nel selettore della query

02:33.323 --> 02:37.210
possiamo usare #title per selezionare l'elemento ID del titolo

02:37.210 --> 02:39.750
e memorizzarlo in titleInputElement.

02:39.750 --> 02:44.070
Ora, come sapete, proprio come nel caso di document get element by ID, typescript

02:44.070 --> 02:46.230
non ha alcuna possibilità di capire che

02:46.230 --> 02:49.090
il selettore di query sta per restituire un elemento

02:49.090 --> 02:50.650
di input.

02:50.650 --> 02:53.780
Quindi, per dire al dattiloscritto, userò di nuovo il casting

02:53.780 --> 02:56.020
e lo getterò in un elemento di input e poi potremo

02:56.020 --> 02:58.270
ripetere questo passaggio due volte e firmare

02:58.270 --> 03:00.672
anche l'elemento descriptionInputElement

03:00.672 --> 03:03.240
e l'elemento peopleInputElement.

03:03.240 --> 03:06.600
Cercare gli ID appropriati nell'indice. file html, che sono sorprendentemente,

03:06.600 --> 03:12.190
credo, la descrizione e le persone, e aggiungerli al dattiloscritto.

03:12.190 --> 03:16.120
Quindi qui cerchiamo l'elemento ID descrizione

03:16.120 --> 03:17.720
e qui le persone.

03:17.720 --> 03:19.510
E con questo abbiamo accesso a tutti

03:19.510 --> 03:22.687
questi elementi all'interno della nostra classe, o all'interno

03:22.687 --> 03:26.593
di ogni oggetto che viene creato sulla base della classe.

03:27.600 --> 03:29.870
Ora dobbiamo solo aggiungere un ascoltatore

03:29.870 --> 03:33.330
al nostro elemento, al nostro modulo.

03:33.330 --> 03:38.330
Per questo aggiungerò un altro metodo privato configure, che non è necessario aggiungere,

03:38.440 --> 03:39.790
ma ancora una volta voglio

03:39.790 --> 03:43.130
mantenere la separazione in cui fondamentalmente facciamo

03:43.130 --> 03:47.900
la selezione e l'impostazione approssimativa nel costruttore.

03:47.900 --> 03:49.340
E poi l'inserimento

03:49.340 --> 03:52.210
o la messa a punto in metodi separati.

03:52.210 --> 03:53.900
E nel metodo configure la mia idea

03:53.900 --> 03:57.000
è di impostare un ascoltatore di eventi, quindi possiamo

03:57.000 --> 03:58.970
raggiungere questo elemento che è il

03:58.970 --> 04:01.830
form e aggiungere un ascoltatore di eventi.

04:01.830 --> 04:04.570
Ora, poiché typescript sa che l'elemento

04:04.570 --> 04:08.580
è un form HTML, ci offre il completamento automatico quando vogliamo

04:08.580 --> 04:10.770
ascoltare l'evento submit, il che

04:10.770 --> 04:12.250
è ottimo.

04:12.250 --> 04:15.520
Ora dobbiamo solo legare questo metodo a un metodo e per questo

04:15.520 --> 04:17.840
aggiungerò un altro metodo privato, privato

04:17.840 --> 04:20.650
perché non accederò mai a questo metodo dall'esterno

04:20.650 --> 04:23.460
della classe, ma solo dall'interno.

04:23.460 --> 04:26.970
Che chiamerò submitHandler, il nome dipende totalmente da voi.

04:26.970 --> 04:29.740
Questo dovrebbe essere un metodo che riceve un oggetto evento,

04:29.740 --> 04:32.750
perché lo legheremo a questo ascoltatore di eventi.

04:32.750 --> 04:34.880
Quindi possiamo puntare su questo...

04:36.460 --> 04:38.713
gestore dell'invio.

04:40.180 --> 04:42.080
Ora lo regoliamo per assicurarci che

04:42.992 --> 04:45.040
prima di collegare tutte le chiamate configuri

04:45.040 --> 04:46.730
ed esegua questo metodo privato,

04:46.730 --> 04:49.330
di nuovo privato, quindi dall'interno della classe

04:49.330 --> 04:50.500
possiamo ovviamente raggiungerlo,

04:50.500 --> 04:53.660
dall'esterno si otterrebbe un errore di dattiloscritto, quindi

04:53.660 --> 04:56.000
ora questo metodo dovrebbe attivarsi ogni volta

04:56.000 --> 04:59.290
che il form viene inviato.

04:59.290 --> 05:02.010
Nel gestore del submit voglio accedere

05:02.010 --> 05:05.520
ai diversi valori di input, convalidarli

05:05.520 --> 05:07.710
e poi naturalmente fare qualcosa

05:07.710 --> 05:10.310
con gli input.

05:10.310 --> 05:12.700
Ci preoccuperemo in seguito della parte relativa

05:12.700 --> 05:15.480
all'azione, ma per ora limitiamoci ad accedere ad essi.

05:15.480 --> 05:18.430
Per questo, innanzitutto, chiamerò l'evento. preventDefault per impedire

05:18.430 --> 05:20.620
l'invio di un modulo predefinito,

05:20.620 --> 05:23.890
che provocherebbe l'invio di una richiesta HTTP,

05:23.890 --> 05:25.820
che non voglio, e poi, per vedere

05:25.820 --> 05:32.730
come funziona, stampiamo la console.

05:32.730 --> 05:32.730
registra

05:32.730 --> 05:36.250
il valore di questo elemento titolo, per stampare ciò che è attualmente presente nell'elemento di input titolo.

05:36.250 --> 05:39.010
Se lo salviamo, si vede che compila senza errori, quindi

05:39.010 --> 05:40.560
la situazione è buona.

05:40.560 --> 05:44.670
Se ora andiamo nella console e inseriamo "Hello! e clicchiamo su aggiungi progetto, la cosa buona è che non è stato inviato,

05:44.670 --> 05:49.440
la cosa cattiva è che riceviamo un errore, "Impossibile leggere la proprietà

05:49.440 --> 05:51.657
'value' di undefined. Cosa c'è di sbagliato qui?

05:51.657 --> 05:54.620
Il problema è che questa parola chiave in submitHandler

05:54.620 --> 05:56.173
non punta alla classe.

05:57.730 --> 06:02.230
Perché?

06:02.230 --> 06:06.420
Per il modo in cui funzionano JavaScript e typescript, leghiamo

06:06.420 --> 06:07.760
il metodo qui all'ascoltatore

06:07.760 --> 06:11.770
di eventi e quando leghiamo qualcosa a un evento o con l'aiuto

06:11.770 --> 06:14.680
di un ascoltatore di eventi, questo è qualcosa

06:14.680 --> 06:17.480
per cui il metodo, che verrà eseguito, sarà

06:17.480 --> 06:19.740
legato a qualcos'altro, in questo

06:19.740 --> 06:24.210
caso all'obiettivo corrente dell'evento.

06:24.210 --> 06:27.270
Pertanto, l'estremità di questo metodo

06:27.270 --> 06:31.060
non punterà alla classe, quando il metodo viene attivato

06:31.060 --> 06:35.130
su un evento con un ascoltatore di eventi.

06:35.130 --> 06:38.150
Ora, la soluzione consiste nel chiamare

06:38.150 --> 06:40.360
bind qui su submitHandler per

06:40.360 --> 06:43.980
preconfigurare il modo in cui questa funzione verrà

06:43.980 --> 06:46.949
eseguita in futuro e il primo parametro che

06:46.949 --> 06:51.070
possiamo passare a bind è quello a cui la parola chiave this

06:51.070 --> 06:52.880
farà riferimento all'interno

06:52.880 --> 06:56.450
della funzione da eseguire.

06:56.450 --> 06:59.760
E qui passo questo, il che significa che questo all'interno

06:59.760 --> 07:02.920
di submitHandler farà riferimento alla stessa cosa a

07:02.920 --> 07:05.750
cui si riferisce questo in questo contesto.

07:05.750 --> 07:10.030
E dato che lo chiamiamo nel contesto di configure, che chiamiamo

07:10.030 --> 07:13.660
con questo configure, questo fine di configure

07:13.660 --> 07:17.500
farà riferimento alla classe e, grazie a bind, farà

07:17.500 --> 07:19.880
riferimento anche alla classe

07:19.880 --> 07:22.870
fine di submitHandler.

07:22.870 --> 07:24.830
Quindi, se ora salviamo

07:24.830 --> 07:28.890
questo file, lo ricarichiamo e inseriamo

07:28.890 --> 07:30.743
"Ciao! " qui, ora si vede

07:32.840 --> 07:33.673
"Ciao! " viene stampato qui quando

07:33.673 --> 07:35.600
si invia il modulo.

07:35.600 --> 07:37.510
Quindi ora questo problema è risolto

07:37.510 --> 07:38.770
e lo stiamo affrontando in modo corretto.

07:38.770 --> 07:40.210
Ma forse c'è un modo migliore,

07:40.210 --> 07:43.650
o un modo alternativo che tutti abbiamo imparato a conoscere.

07:43.650 --> 07:46.330
Forse uno che usa i decoratori, quindi è

07:46.330 --> 07:49.430
l'occasione per mettere di nuovo in pausa e provare

07:49.430 --> 07:51.970
a risolvere questo binding con i decoratori,

07:51.970 --> 07:54.300
perché è qualcosa che abbiamo imparato

07:54.300 --> 07:57.900
nella sezione dei decoratori.
