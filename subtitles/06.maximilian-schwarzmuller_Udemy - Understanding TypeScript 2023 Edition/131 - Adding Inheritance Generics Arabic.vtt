WEBVTT

00:02.410 --> 00:04.290
مدرس: إذن حان الوقت لبعض

00:04.290 --> 00:06.370
الميراث وللفئة الأساسية.

00:06.370 --> 00:09.189
أرغب في إضافة فئة أساسية ، تحتوي بشكل أساسي على templateElement

00:09.189 --> 00:12.090
، و hostElement ، وعنصر بداخلها ، والتي تقوم بهذه المهمة

00:12.090 --> 00:16.810
في تحديد العناصر في dom ، والتي تحتوي على طريقة attach ، والتي نحتاجها دائمًا ، وما إلى

00:16.810 --> 00:18.520
ذلك.

00:18.520 --> 00:22.540
إذن الذي يدير بشكل أساسي كل هذه الوظائف المشتركة

00:22.540 --> 00:26.630
، والتي تشترك فيها فئاتنا التي تقدم شيئًا ما

00:26.630 --> 00:28.220
إلى دوم.

00:28.220 --> 00:30.880
لذلك ، فوق ProjectInput الخاص

00:30.880 --> 00:35.650
بي ، وكذلك فئة ProjectList ، لذلك بشكل أساسي هنا ، سأضيف

00:35.650 --> 00:38.250
فئة المكون الأساسية.

00:38.250 --> 00:41.540
الآن ، الاسم متروك لك ، لكنني سأطلق عليه اسم مكون ، لأنك

00:41.540 --> 00:44.090
قد تعرف هذا المصطلح من React أو Angular

00:44.090 --> 00:45.870
، إذا كنت تعمل مع ذلك ، وحتى إذا

00:45.870 --> 00:47.590
لم تعمل مع ذلك ، فيمكنك التفكير

00:47.590 --> 00:49.873
في هذه فئات مثل UI ، مكونات واجهة المستخدم

00:50.770 --> 00:53.950
، والتي تعرضها على الشاشة.

00:53.950 --> 00:57.950
وكل مكون هو في النهاية كائن قابل للتصيير ، وله

00:57.950 --> 00:59.970
بعض الوظائف التي تسمح

00:59.970 --> 01:01.370
لنا بتقديمه.

01:01.370 --> 01:05.260
ثم تضيف الحالات الملموسة ، أو الفئات الموروثة

01:05.260 --> 01:10.260
، وظائف إضافية يحتاجها هذا المكون المحدد.

01:10.300 --> 01:14.370
إذن ما الذي يدخل في فئة المكونات العامة إذن؟

01:14.370 --> 01:17.590
حسنًا ، أود أن أقول هذه العناصر الثلاثة بالتأكيد.

01:17.590 --> 01:21.390
templateElement و hostElement و element.

01:21.390 --> 01:23.590
الآن ، لدينا مشكلة هنا ، مع ذلك

01:23.590 --> 01:25.470
، فيما يتعلق بالأنواع.

01:25.470 --> 01:28.320
سيكون templateElement دائمًا عبارة عن HTMLTemplateElement

01:29.160 --> 01:31.980
، ولكن ليس من الضروري دائمًا أن يكون hostElement

01:31.980 --> 01:35.410
عبارة عن div ، على سبيل المثال ، عندما نضيف فئة عنصر مشروع ،

01:35.410 --> 01:37.160
سنعرض ذلك في ProjectList ، وليس

01:37.160 --> 01:40.550
حتى الجذر div الخاص بنا مباشرةً هنا ، لذلك هذا ليس دائمًا عنصر

01:40.550 --> 01:42.360
div.

01:42.360 --> 01:45.220
وهذا هنا ، حسنًا ، دائمًا ما يكون HTMLElement

01:45.220 --> 01:47.040
، يمكننا بالتأكيد تسوية ذلك

01:47.040 --> 01:50.540
، ولكن ، كما في حالة فئة ProjectInput ، نعلم بالفعل

01:50.540 --> 01:52.560
أنه في مكان ما شكل معين منه ، إنه

01:52.560 --> 01:55.230
HTMLFormElement.

01:55.230 --> 01:57.540
لذلك سنفقد هذه المعلومات الإضافية

01:57.540 --> 02:00.320
، إذا قصرنا أنفسنا دائمًا على وجود عنصر

02:00.320 --> 02:02.130
HTMLE فقط هناك ، دون تخزين

02:02.130 --> 02:05.220
معلومات أكثر تحديدًا.

02:05.220 --> 02:07.690
فكيف يمكننا التغلب على ذلك؟

02:07.690 --> 02:10.050
حسنًا ، ليس فقط باستخدام الميراث

02:10.050 --> 02:12.920
، ولكن بإنشاء فئة عامة هنا ، حيث عندما

02:12.920 --> 02:15.230
نرث منها ، يمكننا تعيين الأنواع

02:15.230 --> 02:17.680
الملموسة.

02:17.680 --> 02:20.940
لذلك ، نضيف أقواس زاوية بعد اسم الفئة ،

02:20.940 --> 02:23.550
ثم نضيف معرّفين من اختيارنا ، مثل

02:23.550 --> 02:26.690
T و U ، وهما من الخيارات الشائعة.

02:26.690 --> 02:30.110
والآن ، يمكننا أيضًا إضافة بعض القيود هنا

02:30.110 --> 02:34.820
، والقول إن T سيكون بالتأكيد نوعًا من HTMLElement.

02:34.820 --> 02:36.770
يمكن أن يكون مجرد HTMLElement

02:36.770 --> 02:38.970
، أو نسخة أكثر تحديدًا منه.

02:38.970 --> 02:41.870
والشيء نفسه ينطبق على U.

02:41.870 --> 02:44.780
ثم هنا ، نعلم أن عنصر المضيف سيكون من النوع T

02:44.780 --> 02:46.690
، وسيكون العنصر من النوع U.

02:46.690 --> 02:48.660
والآن ، كلما ورثنا من هذه الفئة

02:48.660 --> 02:50.970
، يمكننا تحديد الأنواع الملموسة ، حتى

02:50.970 --> 02:52.930
نتمكن من العمل مع أنواع مختلفة

02:52.930 --> 02:54.780
في أماكن مختلفة حيث نرث.

02:56.050 --> 02:58.053
الآن ، دعنا نضيف مُنشئًا هنا أيضًا.

02:58.910 --> 03:01.080
في هذا المنشئ ، سنحتاج إلى

03:01.080 --> 03:03.060
القليل من المعلومات.

03:03.060 --> 03:05.950
نحتاج إلى معرفة معرف القالب الخاص بنا ، حتى

03:05.950 --> 03:08.030
نعرف كيفية تحديده ، ويجب أن يكون

03:08.030 --> 03:09.750
ذلك عبارة عن سلسلة.

03:09.750 --> 03:11.590
نحتاج إلى معرفة hostElementId

03:11.590 --> 03:13.050
، والذي يجب أن يكون سلسلة

03:13.050 --> 03:15.833
نصية أيضًا ، حتى نعرف مكان تقديم هذا المكون.

03:17.440 --> 03:20.505
وأريد أيضًا الحصول على معرف عنصر جديد ، حتى

03:20.505 --> 03:22.590
نحصل على معرف يجب تخصيصه للعنصر

03:22.590 --> 03:24.350
الذي تم عرضه حديثًا.

03:24.350 --> 03:26.020
هذا ، مع ذلك ، اختياري ، والذي

03:26.020 --> 03:28.210
أشير إليه بإضافة علامة استفهام

03:28.210 --> 03:29.690
بعد المعلمة.

03:29.690 --> 03:31.940
سيكون البديل هو قبول غير محدد

03:31.940 --> 03:34.050
هنا كنوع ، لكنني سأستخدم

03:34.050 --> 03:36.470
علامة الاستفهام فقط.

03:36.470 --> 03:38.510
والآن ، مع ذلك في المُنشئ ، يمكننا

03:38.510 --> 03:39.793
، بشكل أساسي ، الحصول

03:40.640 --> 03:42.083
على هذا الرمز هنا ، ووضعه

03:43.810 --> 03:46.950
في مُنشئ فئة المكون ، حتى نخزن القالب templateElement

03:46.950 --> 03:48.940
، ولكن ، بالطبع ، الآن المعرف

03:48.940 --> 03:52.060
، الذي نحن الوصول إلى هنا ، هو معرف القالب ، وهذا

03:52.060 --> 03:57.450
هو السبب في أنني أحصل على هذا كوسيطة في المنشئ.

03:57.450 --> 04:00.060
وبالنسبة لـ hostElement ، المعرف هنا ، بالطبع

04:00.060 --> 04:02.733
، هو hostElementId الخاص بنا ، مثل هذا.

04:04.790 --> 04:07.930
من المهم أيضًا ، بالطبع ، فيما يتعلق بالإرسال هنا

04:07.930 --> 04:10.230
، أننا نعلم أن هذا سيكون من النوع T ،

04:10.230 --> 04:12.580
لأن T هنا هو هذا النوع العام ، الذي نخزنه

04:12.580 --> 04:15.420
أو نستخدمه لعنصر المضيف ، لذلك يمكننا هنا

04:15.420 --> 04:17.163
اختياره بالفعل.

04:18.160 --> 04:20.253
وبهذا ، نختار العناصر.

04:21.130 --> 04:22.940
يمكننا أيضًا الحصول على المزيد من التعليمات البرمجية.

04:22.940 --> 04:26.650
هذا الرمز هنا ، حيث نقوم باستيراد عقدة وما إلى ذلك ، وحيث

04:26.650 --> 04:30.130
نقوم بتعيين المعرف ، يمكننا الحصول على كل ذلك.

04:30.130 --> 04:32.520
لذلك دعونا ننسخ ذلك هنا ، ونضيفه

04:32.520 --> 04:35.317
إلى مُنشئ صنف المكون أيضًا.

04:35.317 --> 04:37.640
عقدة مستوردة ، ثم قمنا بتعيين عنصر

04:37.640 --> 04:41.080
، والعنصر هنا له هذا النوع العام U ، لذلك عندما نلقي

04:41.080 --> 04:43.000
هذا هنا ، نعلم أنه سيكون هذا

04:43.000 --> 04:46.870
النوع من النوع U هنا ، لذلك يجب أن نلقيه إلى U.

04:46.870 --> 04:49.090
هذا استخدام جيد للأدوية العامة هنا ، مما

04:49.090 --> 04:51.993
يجعل فئة المكونات هذه قابلة لإعادة الاستخدام حقًا.

04:53.060 --> 04:55.200
الآن ، بخصوص الهوية.

04:55.200 --> 04:58.200
هذا ما نحصل عليه هنا ، العنصر الجديد.

04:58.200 --> 05:00.590
الآن ، بالطبع قد لا يكون لدينا هذا دائمًا ، لأنه

05:00.590 --> 05:02.150
اختياري ، لذلك يجب أن نتحقق مما

05:02.150 --> 05:03.870
إذا كان لدينا بالفعل.

05:03.870 --> 05:06.070
لذا ، إذا كان newElementId شيءًا

05:06.070 --> 05:07.650
، وفقط إذا كان شيئًا ، عندها

05:07.650 --> 05:09.710
فقط سأحاول تعيينه ، وإلا فإننا لن

05:09.710 --> 05:10.543
نجربه ، لأنه عندئذٍ

05:10.543 --> 05:13.023
ليس لدينا معرف لتعيينه.

05:14.420 --> 05:16.300
حسنًا ، مع ذلك ، لدينا المُنشئ.

05:16.300 --> 05:19.160
الآن دعنا نستخدم وظيفة إرفاق هنا.

05:19.160 --> 05:21.970
لذلك دعونا ننسخ التابع attach

05:21.970 --> 05:25.470
من أحد الأصناف الأخرى ونضيفها هنا ،

05:25.470 --> 05:28.473
كطريقة خاصة ، في فئة المكون.

05:32.690 --> 05:35.640
يمكننا بعد ذلك أيضًا تسمية هذا. إرفاق في نهاية

05:35.640 --> 05:38.540
منشئ فئة المكون.

05:38.540 --> 05:39.960
الآن ، هنا نريد إضافة

05:39.960 --> 05:42.570
عنصر ، لكننا لا نعرف مكان إضافته ، لذا

05:42.570 --> 05:44.193
فهذه في الواقع بعض المعلومات

05:44.193 --> 05:46.450
الإضافية التي يجب أن نحضرها هنا

05:46.450 --> 05:49.450
، كمتحول رابع في المُنشئ ، يمكن أن يكون إدخال

05:52.430 --> 05:54.200
Atstart اسمًا ، وهذا هو منطقي

05:54.200 --> 05:56.680
، دعنا نقول.

05:56.680 --> 06:00.190
وعلينا تحريك ذلك أمام المعلمة الاختيارية الخاصة بنا.

06:00.190 --> 06:02.230
يجب أن تكون المعلمات الاختيارية دائمًا هي الأخيرة

06:02.230 --> 06:03.980
، لأن الأشخاص قد يتجاهلونها.

06:03.980 --> 06:06.680
لذلك ، لا يمكن أن تأتي المعلمات المطلوبة

06:06.680 --> 06:09.220
بعد هذه المعلمات الاختيارية.

06:09.220 --> 06:13.533
ثم يتم إعادة توجيه insertAtStart لإرفاق ، هناك ، insertAtBeginning

06:14.615 --> 06:18.740
، يمكنك أيضًا إعادة استخدام insertAtStart ، أنا فقط أستخدم

06:18.740 --> 06:21.350
اسمًا مختلفًا هنا لتجنب الالتباس ، ويتم

06:21.350 --> 06:23.470
تلقيه كمنطق منطقي.

06:23.470 --> 06:28.040
ثم هنا ، نتحقق مما إذا كان insertAtBeginning صحيحًا

06:28.040 --> 06:32.920
، إذا كان كذلك ، فعندئذ هنا ، لدينا بداية لاحقة ، وإلا فإننا

06:32.920 --> 06:34.887
سنكون قد انتهينا.

06:36.770 --> 06:39.653
نحن الآن مرنون فيما يتعلق بكيفية إدراج هذا.

06:42.980 --> 06:46.570
أريد أيضًا أن أضع علامة على هذه الفئة الآن كفئة مجردة ، لأنه

06:46.570 --> 06:49.600
لا يجب على الأشخاص أبدًا إنشاء مثيل لها بشكل مباشر

06:49.600 --> 06:52.560
، بدلاً من ذلك ، يجب استخدامها دائمًا للوراثة.

06:52.560 --> 06:56.090
لذا أمام الفصل ، أقوم بإضافة الكلمة المفتاحية المجردة.

06:56.090 --> 06:58.750
هذا يضمن أنه لا يمكننا الآن إنشاء مثيل له.

06:58.750 --> 07:01.963
إذا حاولنا القيام بذلك ، فإن TypeScript سيصرخ علينا.

07:04.070 --> 07:06.490
سأضيف أيضًا طريقتين أخريين ، وهذه

07:06.490 --> 07:08.410
هي طريقة التكوين ، وكذلك طريقة

07:08.410 --> 07:10.840
العرض renderContent.

07:10.840 --> 07:13.430
وسأضيفها كطريقة مجردة ، مما يعني

07:13.430 --> 07:16.463
أن التنفيذ الملموس مفقود هنا ، لكننا

07:18.000 --> 07:21.080
الآن ، بشكل أساسي ، نفرض أي فئة ترث من

07:21.080 --> 07:22.670
المكون ، لإضافة هاتين

07:22.670 --> 07:25.980
الطريقتين وإتاحتهما.

07:25.980 --> 07:27.220
أقوم بإضافة هذا هنا

07:27.220 --> 07:29.390
فقط ، بحيث إذا نظر شخص آخر إلى الكود

07:29.390 --> 07:31.460
الخاص بنا ، فيمكنه أو هي الحصول على

07:31.460 --> 07:34.150
فهم جيد لماهية الفكرة وراء فئة المكون.

07:34.150 --> 07:36.340
أنه يقوم بجميع عمليات التصيير

07:36.340 --> 07:38.530
العامة ، أو إرفاق المكون ، ولكن

07:38.530 --> 07:40.790
يجب أن يحدث المحتوى والتكوين

07:40.790 --> 07:43.840
الملموسان في المكان الذي نرثه.

07:43.840 --> 07:47.670
ملاحظة جانبية ، لا يمكن أن يكون لديك طرق خاصة ومجردة.

07:47.670 --> 07:49.660
لذا يجب حذف الخصوصية هنا ، وهذا

07:49.660 --> 07:52.000
غير مسموح به بواسطة TypeScript.

07:52.000 --> 07:54.590
حسنًا ، وبهذا ، يمكننا توسيع المكون

07:54.590 --> 07:56.480
هنا في قائمة المشروع ، والآن

07:56.480 --> 07:59.130
نتخلص من هذه الخصائص الثلاث.

07:59.130 --> 08:00.640
نحتفظ بالمشاريع المخصصة

08:00.640 --> 08:03.520
، لأن ذلك خاص بقائمة المشاريع.

08:03.520 --> 08:06.620
نريد الآن أيضًا تحديد القيم الملموسة

08:06.620 --> 08:09.560
التي يجب توصيلها لأنواعنا العامة.

08:09.560 --> 08:12.410
ونحن نعلم ، إذا عدنا عن هذا ، فإننا نعلم

08:12.410 --> 08:16.540
أنه سيكون لدينا عنصر HTMLDivElement و HTMLElement

08:16.540 --> 08:19.313
، لذلك سأقوم هنا بتمرير HTMLDivElement

08:20.410 --> 08:22.800
، و HTMLElement ، مثل هذا ، ثم التخلص

08:22.800 --> 08:25.830
من هذه الخصائص الثلاثة.

08:25.830 --> 08:29.510
في المُنشئ ، لسنا بحاجة إلى ذلك هنا الآن ، ولكن بدلاً من ذلك

08:29.510 --> 08:32.550
نحتاج إلى استدعاء super في البداية ، لاستدعاء

08:32.550 --> 08:35.130
مُنشئ الفئة الأساسية ، ومن أجل ذلك ، نحتاج

08:35.130 --> 08:38.080
إلى تمرير بعض المعلومات إلى المُنشئ الفائق

08:38.080 --> 08:40.840
، نحتاج لتمرير بعض المعلومات.

08:40.840 --> 08:42.753
معرّف out templateElement

08:44.050 --> 08:45.850
، hostElementId ، ما إذا كنا

08:45.850 --> 08:47.870
نريد إدخال هذا في بداية hostElement

08:47.870 --> 08:50.140
، وربما المعرف الذي يجب تعيينه للعنصر

08:50.140 --> 08:51.920
الجديد.

08:51.920 --> 08:54.038
إذن هذا هو معرف القالب الخاص

08:54.038 --> 08:57.811
بنا ، وبهذا يمكننا التخلص من هذا هنا.

08:57.811 --> 09:01.292
ثم هنا ، hostElement ، كان هذا المعرف تطبيقًا ، حتى نتمكن

09:01.292 --> 09:02.670
من التخلص من هذا.

09:02.670 --> 09:04.260
نحتفظ بالمشاريع المخصصة

09:04.260 --> 09:06.400
، لأننا ما زلنا بحاجة إليها هنا.

09:06.400 --> 09:08.193
نتخلص من هذا هنا ، لكن

09:10.150 --> 09:13.050
فيما يتعلق بمعرف العنصر الجديد

09:13.050 --> 09:16.850
، أريد تمرير ذلك كمعامل رابع في الواقع.

09:16.850 --> 09:19.040
العنصر الثالث هو المكان الذي يجب

09:19.040 --> 09:22.400
إدراج هذا فيه ، وهنا ، نستخدمه لإدخال هذا قبل النهاية

09:22.400 --> 09:25.890
، لذلك في الواقع ما أريد إدراجه هنا كمعامل لقيمة

09:25.890 --> 09:29.170
insertAtStart هو خطأ ، لأنه لا يجب إدخاله في البداية

09:29.170 --> 09:32.283
، ولكن في نهايةالمطاف.

09:36.000 --> 09:38.940
الآن ، ما زلت بالتأكيد أرغب في إعداد مستمعي هنا.

09:38.940 --> 09:40.730
لا أحتاج إلى استدعاء attach ، على

09:40.730 --> 09:44.410
الرغم من ذلك ، سيحدث ذلك في الفئة الأساسية ، في المكون الأساسي.

09:44.410 --> 09:46.253
سأسمي RenderContent بالرغم من ذلك.

09:47.870 --> 09:50.010
وهنا لا يجب استخدام هذا النوع ، ولكن

09:50.010 --> 09:52.100
اكتب فقط ، لأننا لا نستطيع استخدام

09:52.100 --> 09:54.410
هذا قبل الانتهاء من الجري.

09:54.410 --> 09:55.490
هذه ليست مشكلة على الرغم

09:55.490 --> 09:57.690
من ذلك ، لأننا تلقينا الكتابة كوسيطة.

09:57.690 --> 09:59.680
الآن ، ترى أنني ما زلت أحصل على

09:59.680 --> 10:03.487
خطأ هنا ، لأن لدينا طريقة إرفاق هنا في ProjectList ، وهذا

10:03.487 --> 10:05.410
يتعارض مع طريقة attach لدينا

10:05.410 --> 10:07.330
في الفئة الأساسية.

10:07.330 --> 10:10.600
لذلك دعونا نتخلص من طريقة الإرفاق هذه هنا.

10:10.600 --> 10:14.024
الآن ما زلنا نحصل على خطأ ، لأنك ترى ، عرض المحتوى

10:14.024 --> 10:16.060
خاص هنا ، لكننا نحدده كطريقة

10:16.060 --> 10:18.270
عامة هنا ، أود أن يكون أسلوبًا

10:18.270 --> 10:20.240
خاصًا ، لكن الأساليب المجردة

10:20.240 --> 10:22.860
الخاصة غير مدعومة.

10:22.860 --> 10:25.680
لذلك سأقوم بإزالة الكلمة الرئيسية الخاصة هنا ،

10:25.680 --> 10:28.170
والآن مع ذلك ، لدينا مشكلة واحدة هنا ، وهي أننا

10:28.170 --> 10:30.510
لا نمتلك طريقة التكوين هذه ، والتي وعدت أننا

10:30.510 --> 10:31.990
سنحصل عليها هنا.

10:31.990 --> 10:33.650
حسنًا ، دعنا نضيفها.

10:33.650 --> 10:38.500
لذا هنا ، بالإضافة إلى RenderConfig ، يمكننا إضافة التهيئة ، على الرغم

10:38.500 --> 10:40.510
من أنني لا أفعل أي شيء هنا.

10:40.510 --> 10:42.950
بدلاً من ذلك ، يمكنك تحويل هذا هنا إلى طريقة

10:42.950 --> 10:46.000
اختيارية عن طريق إضافة علامة استفهام ، ثم لست مجبرًا

10:46.000 --> 10:47.520
على إضافتها.

10:47.520 --> 10:50.380
هنا ، سأضيفها لأننا يمكن أن نجادل أيضًا

10:50.380 --> 10:53.210
أننا ، بالنسبة لقائمة المشروع ، نضع

10:53.210 --> 10:56.490
هذا الرمز حيث قمنا بإعداد مستمعنا هنا ، في

10:56.490 --> 10:58.530
الواقع في التكوين.

10:58.530 --> 11:00.810
حتى نتمكن من الوصول إلى التكوين

11:00.810 --> 11:03.320
، ثم القيام بعملنا هنا ، إعداد

11:03.320 --> 11:05.220
المستمع.

11:05.220 --> 11:06.610
والآن ، علينا فقط التأكد

11:06.610 --> 11:10.653
من أننا نسمي عرض المحتوى ، ولكن أيضًا يتم تكوينه على هذا النحو.

11:12.730 --> 11:14.440
في حال كنت تتساءل لماذا لا أستدعى

11:14.440 --> 11:16.450
config و renderContent هنا في فئة

11:16.450 --> 11:18.560
abstract في المُنشئ ، حسنًا ، يمكننا

11:18.560 --> 11:19.993
ذلك ، لكن قد تكون لدينا مشكلة

11:21.780 --> 11:23.720
في ذلك الوقت.

11:23.720 --> 11:26.760
إذا استدعينا هذا في فئة المكوِّن

11:26.760 --> 11:30.770
، فقد نطلق على طريقة في الصنف الموروث ، لذلك في

11:30.770 --> 11:33.240
الفئة التي توسع المكون ، حيث

11:33.240 --> 11:36.810
يعتمد العرض أو التهيئة على شيء قد يُنشئ

11:36.810 --> 11:39.410
فيه مُنشئ الصنف الوراثي شيئًا

11:39.410 --> 11:41.540
ما ، فقط بعد انتهاء مُنشئ

11:41.540 --> 11:44.710
الفئة الأساسية ، والذي يعتمد على عرض

11:44.710 --> 11:48.100
المحتوى و / أو التكوين.

11:48.100 --> 11:50.690
هذا هو السبب في أنه من الأكثر أمانًا ، بشكل أساسي

11:50.690 --> 11:52.410
، التأكد من أن الفئة الموروثة يجب

11:52.410 --> 11:55.410
أن تستدعي هذه الطرق بدلاً من الفئة الأساسية التي تستدعي

11:55.410 --> 11:56.860
هذه الطرق لنا.

11:57.980 --> 12:01.280
لذلك ، قمنا بإعادة هيكلة فئة ProjectList

12:01.280 --> 12:05.040
للاستفادة من الميراث ومنطقنا المشترك.

12:05.040 --> 12:07.730
لنفعل الشيء نفسه بالنسبة لـ ProjectInput الآن.

12:07.730 --> 12:13.170
هناك ، نريد أيضًا توسيع المكون.

12:13.170 --> 12:14.900
استخدم الطبيعة العامة

12:14.900 --> 12:19.430
لذلك ، وهناك ، لدينا HTMLDivElement لعنصر المضيف

12:19.430 --> 12:23.980
، و HTMLFormElement للعنصر الذي يتم تقديمه.

12:23.980 --> 12:27.210
بذلك ، يمكننا التخلص من هذه الخصائص الثلاث هنا ، لذلك

12:27.210 --> 12:28.310
دعونا نفعل ذلك.

12:28.310 --> 12:30.090
نحتفظ بهذه الخصائص الثلاث ، بالطبع

12:30.090 --> 12:32.140
، لأنها خاصة بـ ProjectInput.

12:33.040 --> 12:35.310
ثم يتعين علينا استدعاء super هنا

12:35.310 --> 12:38.320
، وللتفوق نقوم بتمرير معرف القالب ، وهو ProjectInput

12:38.320 --> 12:39.900
، معرف عنصر المضيف ، وهو

12:39.900 --> 12:41.970
app ، insertB قبل أن يكون هنا

12:41.970 --> 12:45.270
صحيحًا ، لأنني أريد إدخال هذا العنصر الذي تم إنشاؤه

12:45.270 --> 12:47.620
حديثًا في البداية هنا لفئة ProjectInput

12:47.620 --> 12:50.510
هذه.

12:50.510 --> 12:53.110
وبعد ذلك ، newElementId ، حسنًا ، هذا هو

12:53.110 --> 12:55.170
إدخال المستخدم ، لذا يجب علينا

12:55.170 --> 12:56.913
أيضًا إعادة توجيهه.

12:57.844 --> 12:59.400
باستخدام هذا ، يمكننا التخلص

12:59.400 --> 13:03.480
من هذا الرمز ، ومن هذا الرمز ، وكل هذا الرمز هنا في الواقع.

13:03.480 --> 13:05.240
بالطبع ، احتفظ بهذا الرمز هنا.

13:05.240 --> 13:07.820
ومع ذلك ، يمكننا أيضًا القول بأننا قد

13:07.820 --> 13:09.860
وضعنا هذا في التكوين ربما.

13:09.860 --> 13:12.100
لذلك دعنا ننتقل إلى طريقة التهيئة

13:12.100 --> 13:13.660
، التي لدينا هنا بالفعل

13:13.660 --> 13:17.683
، ونضيف مستمعينا هنا أو إعداد الخاصية هنا للتهيئة.

13:18.880 --> 13:20.780
بالطبع ، دعنا نتخلص من الإرفاق

13:20.780 --> 13:24.450
، لأن هذا الآن شيء تفعله الفئة الأساسية لنا ، ودعنا

13:24.450 --> 13:26.980
نتحقق مما لا يعجبه TypeScript ، بالطبع

13:26.980 --> 13:29.690
يجب أن نتخلص من المرفق هنا.

13:29.690 --> 13:32.520
ونعم ، في الواقع شيء واحد لا تحبه TypeScript

13:32.520 --> 13:35.090
، وهي تشتكي الآن من عدم تهيئة هذه

13:35.090 --> 13:37.190
الحقول في المُنشئ ، لأنها

13:37.190 --> 13:40.380
لا تفهم أو لا تتحقق من أن التكوين يسمى

13:40.380 --> 13:42.260
في المُنشئ ويقوم بهذه

13:42.260 --> 13:44.770
التهيئة.

13:44.770 --> 13:47.500
لذا لإرضاء TypeScript ، سأقوم في الواقع

13:47.500 --> 13:50.550
بإعادة هذه التهيئة من التكوين مباشرة

13:50.550 --> 13:52.170
إلى المنشئ.

13:52.170 --> 13:54.190
من الناحية الفنية ، فإن النتيجة هي نفسها تمامًا

13:54.190 --> 13:55.953
، ولكن الآن لن تشتكي TypeScript.

13:56.800 --> 13:59.240
ومع ذلك ، سيشتكي من أن لدينا

14:00.440 --> 14:02.310
طريقة تكوين خاصة ، لذا

14:02.310 --> 14:05.910
كما كان من قبل ، يجب علينا تغيير هذا ، وتحويل

14:05.910 --> 14:08.940
التهيئة إلى طريقة عامة.

14:08.940 --> 14:11.460
الآن ، هذا ليس أمرًا لا بد منه ، ولكنه نوع من العرف

14:11.460 --> 14:13.000
أن يكون لديك طريقتك العامة

14:13.000 --> 14:14.570
أولاً ، ولهذا السبب سأقوم بتحريكها

14:14.570 --> 14:17.240
فوق الأساليب الخاصة الأخرى هنا.

14:17.240 --> 14:19.370
وبالطبع ، يشتكي الآن أيضًا من

14:19.370 --> 14:21.990
أنه ليس لدينا طريقة عرض المحتوى.

14:21.990 --> 14:25.020
الآن ، سأضيف واحدًا ، لمجرد أننا بحاجة إلى ذلك.

14:25.020 --> 14:26.780
نحن هنا لا نقوم بأي شيء فيه ، لذا

14:26.780 --> 14:28.890
فهو ليس مطلوبًا من الناحية الفنية

14:28.890 --> 14:31.053
، لكننا الآن نلبي صنفنا الأساسي.

14:32.260 --> 14:34.603
ملاحظة جانبية ، عرض المحتوى ، والتكوين

14:35.550 --> 14:39.590
، في فئة ProjectList ، يمكن أيضًا نقلها فوق تلك الطريقة الخاصة

14:39.590 --> 14:43.230
هنا للأسباب نفسها بالضبط ، لهذه الاتفاقية التي ذكرتها

14:43.230 --> 14:45.123
للتو.

14:46.440 --> 14:49.870
وبهذا ، قمنا أيضًا بإعادة هيكلة ProjectInput ،

14:49.870 --> 14:51.780
للاستفادة من الميراث والسماح

14:51.780 --> 14:55.330
للفئة الأساسية بالقيام بالكثير من العمل.

14:55.330 --> 14:57.670
دعونا نرى ما إذا كان هذا كل شيء يعمل الآن.

14:57.670 --> 15:00.710
إذا حفظنا ذلك ، فإنه يجمع دون أخطاء

15:00.710 --> 15:02.740
، ويبدو أنه يعمل بشكل جيد

15:02.740 --> 15:05.870
، فهل هذا العمل هو السؤال.

15:05.870 --> 15:07.810
وهذا يبدو جيدًا جدًا.

15:07.810 --> 15:09.720
إنه يعمل بنفس الطريقة كما كان

15:09.720 --> 15:11.600
من قبل ، ولكن لدينا الآن كود

15:11.600 --> 15:14.240
أنظف ، حيث نستفيد من إعادة استخدام الكود

15:14.240 --> 15:15.850
، بفضل الوراثة.

15:15.850 --> 15:18.540
الآن ، إنه ليس المكان الوحيد الذي يمكننا أن نرث فيه.

15:18.540 --> 15:20.610
أريد أن أنهي هذه المحاضرة

15:20.610 --> 15:24.230
هنا بإعادة هيكلة حالة مشروعنا.

15:24.230 --> 15:26.240
من الناحية الفنية ، لا نحتاج إلى

15:26.240 --> 15:29.450
الميراث ، لأن لدينا فقط هذه الحالة الفردية التي

15:29.450 --> 15:31.230
نديرها في هذا التطبيق بأكمله

15:31.230 --> 15:33.130
، لكن تخيل تطبيقًا أكبر ، حيث

15:33.130 --> 15:35.310
لديك حالات مختلفة متعددة.

15:35.310 --> 15:37.240
واحد لحالة المستخدم ، سواء

15:37.240 --> 15:39.290
قام المستخدم بتسجيل الدخول

15:39.290 --> 15:43.030
وما إلى ذلك ، واحد للمشاريع ، واحد لعربة التسوق.

15:43.030 --> 15:45.600
الآن ، ستلاحظ أن بعض ميزات فئة الولاية

15:45.600 --> 15:48.080
الخاصة بك هي نفسها دائمًا.

15:48.080 --> 15:50.520
على وجه التحديد ، مجموعة المستمعين

15:50.520 --> 15:52.780
وطريقة addListener.

15:52.780 --> 15:54.730
لذا يمكننا أيضًا استخدام فئة أساسية هنا.

15:55.650 --> 15:58.170
يمكننا استخدام حالة فئة هنا ، وهذه

15:58.170 --> 16:01.230
الفئة بها مصفوفة مستمعين ، وهذه الفئة

16:01.230 --> 16:04.640
لديها أيضًا طريقة addListeners ، لذلك سنقطع

16:04.640 --> 16:07.120
كلاهما من ProjectState ، ونضيفه

16:07.120 --> 16:09.160
إلى الحالة.

16:09.160 --> 16:12.610
الآن ، هذا يعني أيضًا أننا ، بالطبع ، لا نعرف ما

16:12.610 --> 16:14.700
إذا كان المستمع سيعيد بالفعل

16:14.700 --> 16:16.720
مجموعة من المشاريع.

16:16.720 --> 16:18.253
في الواقع هنا ، بالنسبة

16:19.110 --> 16:20.760
لنوع الوظيفة هذا ،

16:20.760 --> 16:24.740
أريد أيضًا الحصول على نوع عام بالفعل.

16:24.740 --> 16:27.440
حتى نتمكن من ضبط هذا من الخارج.

16:27.440 --> 16:28.483
يمكننا القيام بذلك

16:29.790 --> 16:31.623
، يمكننا كتابة نوع عام ، مثل هذا

16:32.680 --> 16:35.730
هنا ، نوع مخصص ، وهو عام ، يمكننا إضافة أقواس الزاوية

16:35.730 --> 16:38.410
بعد اسم النوع الخاص بنا ، واستخدام معرف من

16:38.410 --> 16:40.150
اختيارنا ، ثم إعادة استخدام

16:40.150 --> 16:42.460
هذا النوع هنا.

16:42.460 --> 16:44.960
الآن ، يمكننا جعل الحالة عامة ، يمكننا

16:44.960 --> 16:46.320
استخدام نفس المعرف

16:46.320 --> 16:49.530
، لأنه بناء مختلف عن النوع المخصص لدينا.

16:49.530 --> 16:53.520
ثم هنا ، عندما نقول إننا نريد قائمة المستمعين ، علينا

16:53.520 --> 16:56.780
إخبار TypeScript بالنوع العام الذي يستخدمه

16:56.780 --> 16:58.850
المستمعون لكائن الحالة هذا

16:58.850 --> 17:01.510
الذي نقوم بإنشائه.

17:01.510 --> 17:03.850
وهذا يعني ببساطة أنه يمكننا إعادة

17:03.850 --> 17:06.490
توجيه النوع العام هنا ، وهنا.

17:06.490 --> 17:09.410
لذلك عندما نقوم الآن بتوسيع الحالة ، علينا تحديد

17:09.410 --> 17:12.630
نوع البيانات التي ستعمل بها هذه الحالة ، وبدلاً من

17:12.630 --> 17:14.930
الحالة ، يتم إعادة توجيهها إلى النوع

17:14.930 --> 17:17.680
المخصص للمستمع ، هذه هي الفكرة.

17:17.680 --> 17:19.580
وكيف نستخدم كل ذلك؟

17:19.580 --> 17:21.950
حسنًا ، هناك في الأسفل ، في فئة ProjectState

17:21.950 --> 17:24.930
، نقوم ببساطة بتوسيع فئة State ، والآن ، نقدم

17:24.930 --> 17:27.900
قيمة ، وقيمة ملموسة لهذا الحامل النائب العام

17:27.900 --> 17:30.040
، وهنا ، هذه القيمة الملموسة هي

17:30.040 --> 17:32.480
Project ، لأن ProjectState هذه تدور

17:32.480 --> 17:36.510
حول إدارة التخمين ماذا؟

17:36.510 --> 17:37.393
المشاريع.

17:38.970 --> 17:41.650
الآن ، المُنشئ الخاص هنا لديه مشكلة

17:41.650 --> 17:43.390
، كما يمكنك أن تقول ، لأننا

17:43.390 --> 17:45.160
لا نسمي super.

17:45.160 --> 17:46.930
حسنًا ، يجب أن نفعل ذلك بالتأكيد ، دعنا

17:46.930 --> 17:48.350
نطلق على كلمة super هنا ، هذا

17:48.350 --> 17:49.800
كل ما علينا فعله هناك.

17:50.640 --> 17:53.490
وهنا ، إذا قمنا بالتمرير لأسفل ، حيث

17:53.490 --> 17:55.880
نذهب من خلال المستمعين ، نرى

17:55.880 --> 17:57.890
أن المستمعين خاصون ، وهو

17:57.890 --> 18:00.240
خاص في صفنا الأساسي.

18:00.240 --> 18:01.860
الآن ، هذا يعني أنه لا يمكننا الوصول

18:01.860 --> 18:03.580
إليه إلا من داخل الفئة الأساسية.

18:03.580 --> 18:06.760
لكنك تعلمت عن معدِّل وصول آخر ،

18:06.760 --> 18:09.380
مشابه للخاص ، ولكنه يسمح

18:09.380 --> 18:12.900
أيضًا بالوصول من وراثة الفئات ، وسيكون

18:12.900 --> 18:14.990
ذلك محميًا.

18:14.990 --> 18:17.200
يعني المحمي أنه لا يزال لا يمكن

18:17.200 --> 18:18.930
الوصول إليه من خارج الفصل

18:18.930 --> 18:23.030
، ولكن يمكن الوصول إليه من أي فئة يرثها.

18:23.030 --> 18:24.740
مع ذلك ، دعونا نحفظ كل ذلك ، يجب

18:24.740 --> 18:26.650
أن يتم تجميعه على ما يرام.

18:26.650 --> 18:28.940
ودعنا نختبر هذا بسرعة ، وهذا يبدو

18:28.940 --> 18:31.790
جيدًا ، لذلك يعمل كما كان من قبل ، ولكن الآن

18:31.790 --> 18:34.160
، مرة أخرى ، برمز أجمل قليلاً ، باستخدام

18:34.160 --> 18:36.420
الوراثة والأدوية أيضًا لإدارة

18:36.420 --> 18:38.363
دولتنا.
