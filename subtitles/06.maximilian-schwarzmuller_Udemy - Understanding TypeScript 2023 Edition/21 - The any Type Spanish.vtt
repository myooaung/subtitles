WEBVTT

00:02.260 --> 00:03.960
Instructor: Con esto, casi hemos terminado

00:03.960 --> 00:04.920
con los tipos básicos.

00:04.920 --> 00:07.470
Hay un tipo más, que ya vimos, y es

00:07.470 --> 00:09.390
el tipo cualquiera.

00:09.390 --> 00:11.480
El tipo any es el tipo más flexible que

00:11.480 --> 00:13.310
se puede asignar en TypeScript.

00:13.310 --> 00:16.710
Este tipo no le dice nada a TypeScript.

00:16.710 --> 00:19.960
Básicamente significa que puedes almacenar cualquier tipo de valor allí.

00:19.960 --> 00:22.031
No tenemos ninguna asignación de tipo específica.

00:22.031 --> 00:25.260
TypeScript básicamente nunca te gritará

00:25.260 --> 00:27.040
cuando uses alguno.

00:27.040 --> 00:28.030
De vuelta en nuestro código

00:28.030 --> 00:31.360
aquí, si me gustaría establecer el tipo de actividades favoritas a cualquiera,

00:31.360 --> 00:32.870
no obtendría un error.

00:32.870 --> 00:36.580
Si lo establece en cualquier array, al menos le digo a TypeScript que

00:36.580 --> 00:39.220
las actividades favoritas son un array de algo.

00:39.220 --> 00:41.460
Por lo tanto, si almacenara un solo valor allí,

00:41.460 --> 00:42.830
obtendría un error.

00:42.830 --> 00:44.500
Pero mientras sea un array,

00:44.500 --> 00:46.638
puedo almacenar lo que quiera ahí.

00:46.638 --> 00:49.840
Así que cualquiera es realmente flexible.

00:49.840 --> 00:52.070
Y esto puede sonar muy bien al principio,

00:52.070 --> 00:54.060
pero en realidad es una gran desventaja

00:54.060 --> 00:58.290
y hay que evitarla absolutamente siempre que sea posible.

00:58.290 --> 01:00.170
Porque cualquiera le quita básicamente

01:00.170 --> 01:02.512
todas las ventajas que le da TypeScript.

01:02.512 --> 01:04.380
Te da la misma experiencia que tienes

01:04.380 --> 01:06.430
con el JavaScript de vainilla donde

01:06.430 --> 01:10.480
también tienes que cualquier tipo en todo por así decirlo.

01:10.480 --> 01:13.820
Any básicamente se asegura de que el compilador de TypeScript

01:13.820 --> 01:16.020
no pueda comprobar nada, porque si cualquier

01:16.020 --> 01:19.180
propiedad o cualquier variable puede almacenar cualquier

01:19.180 --> 01:20.818
valor, entonces no hay mucho

01:20.818 --> 01:23.687
que comprobar, ¿verdad?

01:23.687 --> 01:27.130
Así que usted puede utilizar cualquier como un fallback si usted

01:27.130 --> 01:30.270
tiene algún valor, algún tipo de datos donde realmente no se

01:30.270 --> 01:31.810
puede saber qué tipo de datos se

01:31.810 --> 01:33.820
almacena allí y donde entonces tal vez

01:33.820 --> 01:37.050
están utilizando algunos controles de tiempo de ejecución,

01:37.050 --> 01:40.440
como lo hicimos aquí, en tiempo de ejecución para limitar lo que

01:40.440 --> 01:42.660
quiere hacer para ciertos valores.

01:42.660 --> 01:44.600
Entonces puedes ir con cualquiera.

01:44.600 --> 01:48.210
Pero en otros casos, realmente quieres evitarlo.

01:48.210 --> 01:51.120
Si tiene la posibilidad de saber con qué tipo de datos

01:51.120 --> 01:54.090
está trabajando, sea explícito al respecto.

01:54.090 --> 01:56.780
Deja que la inferencia de TypeScript haga su trabajo o establece

01:56.780 --> 01:58.817
explícitamente tus propios tipos.

01:58.817 --> 02:01.783
No recurras a ninguno si no lo necesitas.
