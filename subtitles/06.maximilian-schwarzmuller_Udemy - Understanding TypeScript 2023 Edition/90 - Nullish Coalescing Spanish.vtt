WEBVTT

00:02.300 --> 00:04.800
Instructor: Ahora, vagamente relacionado con el encadenamiento

00:04.800 --> 00:06.930
opcional, tenemos otra buena característica en TypeScript,

00:06.930 --> 00:09.550
que nos ayuda a tratar con datos nulos.

00:09.550 --> 00:12.820
Y esa característica se llama coalescencia nula.

00:12.820 --> 00:15.900
Ahora imagina que tienes unos datos, una

00:15.900 --> 00:17.530
entrada, en la que no sabes

00:17.530 --> 00:19.830
con certeza si es nula o indefinida

00:19.830 --> 00:23.320
o si es realmente un dato válido.

00:23.320 --> 00:28.180
Por ejemplo, userInput podría ser null digamos.

00:28.180 --> 00:31.040
Ahora, de nuevo, aquí, codificamos esto en TypeScript,

00:31.040 --> 00:33.580
por lo tanto TypeScript sabe que esto es nulo,

00:33.580 --> 00:36.500
pero si estás obteniendo esto a través de alguna API

00:36.500 --> 00:38.650
DOM, donde no lo sabes con certeza, o si

00:38.650 --> 00:41.320
estás obteniendo esto de un back-end, entonces

00:41.320 --> 00:42.970
puede que no lo sepas de antemano

00:42.970 --> 00:46.510
y TypeScript podría no saber si esto es nulo o no.

00:46.510 --> 00:50.650
Si luego quieres almacenar esto en alguna otra constante o variable

00:50.650 --> 00:52.803
como storedData, es posible que quieras

00:54.090 --> 00:56.150
asegurarte de que si es nulo, almacenes

00:56.150 --> 00:58.760
un valor de reserva.

00:58.760 --> 01:03.560
Ahora puedes hacerlo con el operador lógico OR, donde almacenas un valor

01:03.560 --> 01:05.330
por defecto, donde consigues

01:05.330 --> 01:06.740
que el segundo valor del

01:06.740 --> 01:08.940
primero sea indefinido o nulo, si

01:08.940 --> 01:11.550
es falso para ser exactos.

01:11.550 --> 01:13.690
El problema con este enfoque

01:13.690 --> 01:17.110
es que si esto no es nulo o indefinido, sino digamos

01:17.110 --> 01:18.960
una cadena vacía, se trata

01:18.960 --> 01:21.740
como un valor falso, y por lo tanto ese

01:21.740 --> 01:25.600
valor por defecto, de reserva, se activará.

01:25.600 --> 01:28.850
Así que si consuelo. log storedData aquí,

01:28.850 --> 01:31.700
verá que esto imprime DEFAULT.

01:31.700 --> 01:33.430
Ahora bien, puede que eso sea lo que quieras,

01:33.430 --> 01:36.540
y en ese caso, esta es una solución perfectamente válida.

01:36.540 --> 01:38.800
Pero si quieres mantener esa entrada del usuario,

01:38.800 --> 01:40.730
o cualquier dato con el que estés trabajando,

01:40.730 --> 01:44.110
a menos que realmente sea nulo o indefinido, entonces necesitas

01:44.110 --> 01:45.530
otro enfoque porque aquí lo

01:45.530 --> 01:48.970
trataríamos como falso y usaríamos el fallback.

01:48.970 --> 01:51.720
Pero tal vez usted quiere mantener una entrada vacía sólo null

01:51.720 --> 01:54.370
o indefinido debe ser manejado de manera diferente.

01:54.370 --> 01:56.390
Para ello, TypeScript también tiene

01:56.390 --> 01:58.780
un operador, el operador de doble signo de interrogación,

01:58.780 --> 02:02.210
esto se llama el operador de coalescencia nula.

02:02.210 --> 02:05.250
Y significa que si esto es nulo o indefinido,

02:05.250 --> 02:06.730
y realmente sólo eso,

02:06.730 --> 02:09.180
no una cadena vacía, no cero, realmente

02:09.180 --> 02:11.540
sólo nulo o indefinido, entonces usaremos

02:11.540 --> 02:13.370
el fallback.

02:13.370 --> 02:16.700
Si no es nulo o indefinido, usaremos ese valor.

02:16.700 --> 02:19.220
Así que en este escenario aquí, esto compila, y usted

02:19.220 --> 02:21.400
ve, hemos almacenado la cadena vacía, por lo

02:21.400 --> 02:23.060
tanto, no estoy imprimiendo nada

02:23.060 --> 02:24.720
aquí, esta es la cadena vacía.

02:24.720 --> 02:26.060
Si esto por otro lado, digamos,

02:26.060 --> 02:28.550
es indefinido aquí, y guardo esto, ves, ahora

02:28.550 --> 02:30.400
dice DEFAULT, porque gracias a este

02:30.400 --> 02:32.980
operador de doble signo de interrogación, volvemos

02:32.980 --> 02:35.500
a este, bueno, fallback y por lo tanto aquí tenemos

02:35.500 --> 02:38.320
otra característica muy útil que puede ayudarte a

02:38.320 --> 02:40.580
tratar con valores nulos o indefinidos con

02:40.580 --> 02:42.773
gracia.
