WEBVTT

00:02.150 --> 00:06.180
Eğitmen: Böylece başlık giriş değerimizi toplayabilir ve konsola

00:06.180 --> 00:07.420
yazdırabiliriz, ancak

00:07.420 --> 00:10.160
tabii ki asıl fikir bu değil.

00:10.160 --> 00:13.940
Bunun yerine, fikir tüm girdi değerlerimizi bir araya getirmemiz, bunları

00:13.940 --> 00:15.420
hızlı bir şekilde doğrulamamız

00:15.420 --> 00:17.890
ve ardından bunlarla bir şeyler yapmamızdır.

00:17.890 --> 00:20.598
Bunun için yeni bir yöntem daha ekleyeceğim,

00:20.598 --> 00:21.860
başka bir özel yöntem,

00:21.860 --> 00:25.700
çünkü onu yalnızca sınıfın içinden çağıracağım ve bu da

00:25.700 --> 00:28.530
gatherUserInput yöntemi.

00:28.530 --> 00:30.460
İsim tamamen size kalmış.

00:30.460 --> 00:33.240
Benim fikrim, bu yöntemin burada çağrılmasıdır.

00:33.240 --> 00:35.230
Varsayılanı engelledikten sonra,

00:35.230 --> 00:38.980
bu temel olarak buradaki tüm girdilerimize ulaşmalı, buradaki kullanıcı

00:38.980 --> 00:40.870
girdisini toplamalı, doğrulamalı

00:40.870 --> 00:43.060
ve sonra geri döndürmelidir.

00:43.060 --> 00:45.950
Böylece burada, serbest tuple değerleri

00:45.950 --> 00:50.090
olarak başlık, açıklama ve kişileri içeren bir tuple

00:50.090 --> 00:53.810
olabilen userInput'umu elde ettim.

00:53.810 --> 00:55.510
Aslında bu fikri sevdim.

00:55.510 --> 00:57.800
Öyleyse, burada bir dönüş türü tanımlayalım.

00:57.800 --> 00:59.880
Dönüş türü bir tuple'dır.

00:59.880 --> 01:02.620
Şimdi bir tuple'ın nasıl tanımlandığını hatırlıyor musunuz?

01:02.620 --> 01:05.630
Bir tuple'ın türü nasıl tanımlanır?

01:05.630 --> 01:08.620
Dize değil, köşeli parantez.

01:08.620 --> 01:12.260
Bu, dizelerden oluşan bir dizi döndürdüğünüz anlamına gelir.

01:12.260 --> 01:14.550
Bunun yerine, tam olarak bu

01:14.550 --> 01:18.160
üç tipte tam olarak X elemandan oluşan bir dizi

01:18.160 --> 01:21.510
döndürdüğümü söylemek istiyorum.

01:21.510 --> 01:23.650
Bunun için, burada dönüş türünü ayarlarsınız,

01:23.650 --> 01:27.160
iki köşeli parantez ve ardından köşeli parantezlerin içine farklı

01:27.160 --> 01:30.240
öğeleri ve öğe türlerini eklersiniz.

01:30.240 --> 01:32.900
Örneğin, string, string ve number.

01:32.900 --> 01:37.130
Bununla, bu yöntemin üç öğeli bir tuple döndürdüğünü söylüyorsunuz;

01:37.130 --> 01:38.510
burada ilk öğe bir dize,

01:38.510 --> 01:41.820
ikinci öğe bir dize ve üçüncü öğe aslında bir

01:41.820 --> 01:44.080
sayıdır.

01:44.080 --> 01:46.360
Şimdi bu metoda biraz mantık ekleyerek bunun

01:46.360 --> 01:48.540
doğru olmasını sağlayabiliriz.

01:48.540 --> 01:52.670
Bunun için öncelikle bu titleInputElement'ten

01:52.670 --> 01:57.210
girilen başlığı alalım. değer.

01:57.210 --> 01:58.340
Ve bunu tekrarlayabiliriz.

01:58.340 --> 02:01.920
Ayrıca bu descriptionInputElement'ten kursun girilen açıklamasını

02:01.920 --> 02:05.100
da istiyoruz. değeri ve enteredPeople

02:05.100 --> 02:09.510
miktarı veya bu peopleInputElement'ten sadece

02:09.510 --> 02:12.440
enteredPeople.

02:12.440 --> 02:13.870
Şimdi bunu sabitlerde sakladım,

02:13.870 --> 02:15.490
böylece bu uzun ifadeleri her zaman

02:15.490 --> 02:17.640
tekrarlamak zorunda kalmayacağım.

02:17.640 --> 02:19.370
Şimdi, bunu doğrulayabiliriz.

02:19.370 --> 02:21.500
Önemsiz bir doğrulama, enteredTitle öğesinin olup

02:21.500 --> 02:24.850
olmadığını kontrol etmek olacaktır. kırpın, Yani X'in başındaki

02:24.850 --> 02:27.610
ve sonundaki geniş boşluğu kaldırın.

02:27.610 --> 02:30.560
Uzunluk sıfıra eşitse veya

02:30.560 --> 02:35.350
girilenAçıklama. trim uzunluğu sıfıra eşitse

02:35.350 --> 02:41.520
veya enteredPeople.

02:41.520 --> 02:41.520
trim

02:41.520 --> 02:44.380
uzunluğu sıfıra eşittir.

02:44.380 --> 02:48.410
Bu, hiçbir girdinin boş olmadığını kontrol eder.

02:48.410 --> 02:50.330
Yine de kontrol etmek isteyebileceğimiz

02:50.330 --> 02:51.860
her şeyi kontrol etmez.

02:51.860 --> 02:54.770
Girilen kişilerin diyelim ki pozitif bir sayı

02:54.770 --> 02:57.160
olup olmadığını kontrol etmiyoruz.

02:57.160 --> 03:00.170
Minimum bir uzunluk belirleyemiyoruz.

03:00.170 --> 03:02.190
Buraya giderek daha fazla koşul eklememiz

03:02.190 --> 03:04.050
gerekecek ve bunu yapabilsek de, bu gerçekten

03:04.050 --> 03:06.820
ölçeklenebilir bir çözüm olmayacaktır.

03:06.820 --> 03:09.110
Uygulamada kullanıcı girdisini doğrulamak

03:09.110 --> 03:11.550
istediğimiz bölümlerimiz varsa, her zaman uzun

03:11.550 --> 03:14.440
if ifadelerini tekrarlamak zorunda kalırız.

03:14.440 --> 03:18.390
Bu yüzden yakında daha akıllı bir doğrulama çözümü veya daha

03:18.390 --> 03:21.960
ölçeklenebilir bir doğrulama çözümü bulacağım.

03:21.960 --> 03:23.780
Şimdilik bu şekilde bırakabiliriz.

03:23.780 --> 03:26.190
Bunu zaten düşünebilirsiniz ve tabii ki

03:26.190 --> 03:28.520
bu dersten sonra durup bunu yapılandırılabilir

03:28.520 --> 03:32.220
ayrı bir doğrulama işlevinde nasıl dış kaynak olarak kullanabileceğinizi

03:32.220 --> 03:34.670
ve türlerin size bu konuda nasıl yardımcı

03:34.670 --> 03:38.350
olabileceğini düşünebilirsiniz.

03:38.350 --> 03:41.370
Kesinlikle pek çok olası yaklaşım var ve ben de bir sonraki

03:41.370 --> 03:44.040
derste kendi yaklaşımımı sizlerle paylaşacağım.

03:44.040 --> 03:45.620
Ancak oraya varmadan önce,

03:45.620 --> 03:48.350
aslında buradaki önemsiz yaklaşımı kullanalım

03:48.350 --> 03:52.130
ve tüm bu koşullar yerine getirilirse bir şeyler yapalım.

03:52.130 --> 03:53.620
Şimdi bu if bloğuna girersek,

03:53.620 --> 03:56.000
en az bir doğrulamanın başarısız olduğunu

03:56.000 --> 03:57.350
biliriz ve ardından Geçersiz

03:57.350 --> 04:01.833
girdi, lütfen tekrar deneyin dediğimiz uyarıdan geçebiliriz.

04:03.450 --> 04:04.910
Aksi takdirde, oraya giremezsek,

04:04.910 --> 04:06.200
geçerli bir girdimiz

04:06.200 --> 04:08.600
olduğunu biliriz, aksi takdirde, tuple'ımı

04:08.600 --> 04:11.310
döndürmek istiyorum.

04:11.310 --> 04:14.170
Burada, girilen başlığı, girilen

04:14.170 --> 04:17.090
açıklamayı ve ayrıca girilen kişileri

04:17.090 --> 04:19.660
döndürmek istiyorum.

04:19.660 --> 04:20.630
Şimdi anlayabileceğiniz

04:20.630 --> 04:21.850
gibi, tipler grubu mutlu

04:21.850 --> 04:24.210
değil, çünkü girilen kişiler bir sayı olmalı,

04:24.210 --> 04:25.370
metin değil.

04:25.370 --> 04:27.410
Ve aslında, bir girdi öğesinin değer

04:27.410 --> 04:28.720
özelliğinden çıkardığınız

04:28.720 --> 04:32.350
her şey varsayılan olarak metin olacaktır.

04:32.350 --> 04:34.520
Bunu bir sayıya dönüştürmek

04:34.520 --> 04:38.060
için, örneğin parseFloat'ı çağırabiliriz veya

04:38.060 --> 04:40.610
önüne bir artı ekleyebiliriz ve bu

04:40.610 --> 04:42.850
onu bir sayıya dönüştürecektir

04:42.850 --> 04:45.430
ve yine de tür grubu mutlu değildir

04:45.430 --> 04:48.910
çünkü her zaman bir tuple döndürmeyiz.

04:48.910 --> 04:50.830
Peki ya burası?

04:50.830 --> 04:52.310
Eğer if bloğuna girersek

04:52.310 --> 04:53.510
bir uyarı gösteriyoruz,

04:53.510 --> 04:55.820
ancak bir tuple döndürmüyoruz.

04:55.820 --> 04:59.810
Bunun yerine yapabileceğimiz çeşitli şeyler var.

04:59.810 --> 05:03.460
Bunun gibi hiçbir şey döndürmeyebiliriz.

05:03.460 --> 05:06.320
Alternatif olarak, bir hata da verebiliriz.

05:06.320 --> 05:08.360
O zaman, aslında hiçbir şey döndürmeyeceğiz,

05:08.360 --> 05:11.100
ancak bu durumda bir hata atacağız.

05:11.100 --> 05:12.820
Şimdi, burada bir hata atmak istemiyorum

05:12.820 --> 05:15.570
çünkü gerçekten hata işleme uygulamak istemiyorum, bu yüzden

05:15.570 --> 05:18.090
yapacağım şey sadece bir return deyimi eklemek olacak,

05:18.090 --> 05:20.100
ama tabii ki bu bir tuple değil.

05:20.100 --> 05:23.110
Yani aslında, buradaki dönüş türü bir tuple'dır

05:23.110 --> 05:25.923
veya aslında tanımsızdır.

05:27.320 --> 05:29.040
Ancak, öğrendiğiniz gibi, fonksiyonlarda

05:29.040 --> 05:32.550
dönüş türü olarak undefined kullanmamalısınız.

05:32.550 --> 05:34.040
Bunun yerine void kullanın.

05:34.040 --> 05:35.410
Neredeyse aynıdır,

05:35.410 --> 05:37.040
ancak fonksiyonlara özeldir

05:37.040 --> 05:39.350
ve TypeScript'e bunun, bunun gibi

05:39.350 --> 05:44.350
herhangi bir değer döndürmeyen en az bir dalı olan bir fonksiyon olduğunu

05:45.230 --> 05:46.930
söyler.

05:46.930 --> 05:49.160
Burada da elbette bir union tipi kullanıyoruz

05:49.160 --> 05:51.240
çünkü her iki olasılığa da sahibiz.

05:51.240 --> 05:53.170
Hiçbir şey döndürmeyebiliriz

05:53.170 --> 05:55.660
ya da aslında bir tuple döndürürüz.

05:55.660 --> 05:57.510
Şimdi, gatherUserInput

05:57.510 --> 05:59.370
ve userInput'umuz var,

05:59.370 --> 06:01.670
çünkü hepsi ya sonunda tanımlanmamış

06:01.670 --> 06:04.130
ya da o tuple.

06:04.130 --> 06:07.640
Şimdi, devam etmeden ve doğrulamayı geliştirmeden önce,

06:07.640 --> 06:09.620
bu userInput'u geliştirelim.

06:09.620 --> 06:12.480
UserInput'u orada topladığımızda, artık userInput

06:12.480 --> 06:14.820
şeyine sahibiz ve şimdi bunun bir tuple olup

06:14.820 --> 06:17.050
olmadığını kontrol edebiliriz.

06:17.050 --> 06:19.820
Şimdi sorun şu ki, çalışma zamanında bunun bir tuple

06:19.820 --> 06:22.620
olup olmadığını kontrol etmenin bir yolu yok.

06:22.620 --> 06:25.200
Kullanabileceğimiz bir instanceof yok.

06:25.200 --> 06:28.560
Kontrol edebileceğimiz bir Tuple türü yok.

06:28.560 --> 06:31.020
Ayrıca typof userInput'un tuple'a eşit olup

06:33.803 --> 06:36.053
olmadığını da kontrol edemeyiz çünkü

06:37.130 --> 06:40.050
bu Vanilla JavaScript'te mevcut değildir.

06:40.050 --> 06:41.850
Örneğin String vardır, ancak

06:41.850 --> 06:44.950
tuple bir JavaScript türü değildir.

06:44.950 --> 06:47.020
Dolayısıyla, bir tuple olup olmadığını kontrol

06:47.020 --> 06:48.900
etmek için, sonunda tuple'ların sadece

06:48.900 --> 06:50.990
silindiğini hatırlamamız gerekir.

06:50.990 --> 06:52.750
TypeScript'te özeldirler,

06:52.750 --> 06:55.940
ancak JavaScript dünyasına girdiğimizde silinirler

06:55.940 --> 06:58.320
çünkü öğe sayısının ve öğe türlerinin

06:58.320 --> 06:59.950
sabit olduğu bir tuple fikri

06:59.950 --> 07:02.000
gerçekten sadece TypeScript'te

07:02.000 --> 07:04.470
vardır.

07:04.470 --> 07:05.930
Dolayısıyla, çalışma zamanı

07:05.930 --> 07:09.370
sırasında, burada kontrol etmemiz gereken tek şey bir dizi olup

07:09.370 --> 07:12.950
olmadığıdır ve bunun için JavaScript'te dizi nesnesini ve orada isArray

07:12.950 --> 07:15.180
yöntemini kullanabiliriz.

07:15.180 --> 07:17.500
Bu, Vanilla JavaScript'te yerleşik olarak bulunan ve bunun

07:17.500 --> 07:20.290
bir dizi olup olmadığını kontrol etmemizi sağlayan bir yöntemdir.

07:20.290 --> 07:23.200
Ya tanımsız ya da bir tuple olduğunu biliyoruz.

07:23.200 --> 07:24.630
Bir tuple bir dizidir, bu nedenle

07:24.630 --> 07:26.000
true döndürürse tuple'ı elde

07:26.000 --> 07:27.400
etmiş oluruz.

07:27.400 --> 07:31.010
Ve sonra burada, örneğin kullanıcı girdisinden başlığı, açıklamayı

07:31.010 --> 07:34.070
ve kişileri almak için yapılandırmayı kullanabilir

07:34.070 --> 07:35.560
ve ardından bu girdiyle bir

07:35.560 --> 07:37.720
şeyler yapabiliriz.

07:37.720 --> 07:39.230
Örneğin şimdilik

07:39.230 --> 07:42.623
konsol. günlük başlığı, açıklama ve kişiler.

07:43.980 --> 07:46.060
Bunların hepsini yaparsak ve hepsini

07:46.060 --> 07:47.950
kaydedersek, hiçbir hata olmadan

07:47.950 --> 07:49.870
derlenir ve buraya geri dönersek ve

07:49.870 --> 07:51.310
projeye bu şekilde tıklarsam,

07:51.310 --> 07:53.050
geçersiz girdi alırım.

07:53.050 --> 07:54.580
Merhaba'yı girersem, yine

07:54.580 --> 07:56.950
de alırım çünkü açıklamamız yok.

07:56.950 --> 07:58.890
Bu bir açıklama.

07:58.890 --> 08:00.180
Tabii ki hala alıyoruz

08:00.180 --> 08:02.940
ama şimdi insanlara da bir şey girersem, bu işe yarıyor

08:02.940 --> 08:05.220
ve bunu buraya yazdırıyoruz.

08:05.220 --> 08:09.330
Bu elbette doğru yönde atılmış güzel bir adım.

08:09.330 --> 08:10.990
Henüz tam olarak o noktada değiliz.

08:10.990 --> 08:13.330
Dediğim gibi, doğrulamayı geliştirebiliriz.

08:13.330 --> 08:16.230
Bunu yapmadan önce hemen yapmak istediğim bir şey var,

08:16.230 --> 08:20.070
PROJE EKLE'ye tıkladıktan sonra tüm girdileri temizlemek istiyorum.

08:20.070 --> 08:22.440
Bu yüzden tüm girişleri tekrar boşaltmak istiyorum.

08:22.440 --> 08:25.290
Şimdi bunun için, clearInput veya clearInputs adında yeni

08:25.290 --> 08:27.043
bir özel yöntem ekleyebilir ve orada

08:28.210 --> 08:32.740
bu titleInputElement'i ayarlayabiliriz. değerini boş bir dizeye eşitleyin

08:32.740 --> 08:34.130
ve bunu diğer girdiler

08:36.200 --> 08:38.980
için de tekrarlayın.

08:38.980 --> 08:41.960
Yani burada, descriptionInputElement'imiz var ve

08:41.960 --> 08:44.250
burada, peopleInputElement'imiz var

08:44.250 --> 08:48.190
ve şimdi, eğer bunu çağırırsak. clearInputs burada, form gönderildikten

08:48.190 --> 08:51.730
sonra temizlendiğinden emin olmalıyız.

08:51.730 --> 08:52.870
Bunu tekrar denersek,

08:52.870 --> 08:54.380
buraya bir şey girersek, buraya

08:54.380 --> 08:56.230
yazdırıldığını ve formun temizlendiğini

08:56.230 --> 08:57.740
görürsünüz.

08:57.740 --> 09:00.720
Bununla birlikte, bunu nasıl ele aldığımızdan genel olarak memnunum,

09:00.720 --> 09:03.300
ancak şimdi doğrulamayı geliştirmek ve bunu daha yeniden

09:03.300 --> 09:06.970
kullanılabilir, ölçeklenebilir bir şekilde yazmak istiyorum.

09:06.970 --> 09:07.840
Bahsettiğim gibi, bunu

09:07.840 --> 09:10.320
önce kendi başınıza yapmaktan kesinlikle çekinmeyin.

09:10.320 --> 09:11.530
Bir sonraki derste bunu birlikte

09:11.530 --> 09:12.580
yapacağız.
