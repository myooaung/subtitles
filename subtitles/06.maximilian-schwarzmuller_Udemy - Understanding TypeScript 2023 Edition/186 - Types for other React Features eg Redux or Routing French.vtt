WEBVTT

00:02.100 --> 00:04.390
Instructeur : Maintenant, bien sûr, dans les applications

00:04.390 --> 00:08.640
React plus importantes, vous travaillez avec plus que juste useRef et useState.

00:08.640 --> 00:10.950
Pour comprendre comment vous utilisez TypeScript à cet

00:10.950 --> 00:13.460
endroit, il est toujours utile de survoler simplement les fonctions

00:13.460 --> 00:15.180
que vous appelez, donc les autres crochets

00:15.180 --> 00:17.090
avec lesquels vous travaillez.

00:17.090 --> 00:20.010
Par exemple, si vous avez besoin de l'outil useEffect ici,

00:20.010 --> 00:22.660
dans le composant NewTodo, pour une raison quelconque,

00:22.660 --> 00:26.330
vous pouvez l'appeler et simplement le survoler par la suite, pour comprendre

00:26.330 --> 00:29.010
avec quels types il fonctionne.

00:29.010 --> 00:30.960
Par exemple, que le premier argument est

00:30.960 --> 00:33.720
un EffectCallback, qui est une fonction spéciale, où TypeScript

00:33.720 --> 00:37.100
vous avertira si vous le configurez incorrectement, que le deuxième

00:37.100 --> 00:38.610
argument est soit rien, soit un

00:38.610 --> 00:41.480
tableau de n'importe quoi, des choses comme ça, cela vous aidera

00:41.480 --> 00:42.997
toujours, vous apprendrez aussi

00:42.997 --> 00:45.930
que useEffect ne renvoie rien, par exemple, et sur useState,

00:45.930 --> 00:49.200
où j'ai mentionné que vous obtenez toujours un tableau avec exactement

00:49.200 --> 00:52.410
deux éléments, eh bien, vous voyez aussi qu'ici, useState renvoie

00:52.410 --> 00:56.310
un tableau, c'est ce que nous voyons ici, crochet ouvrant et fermant, où le premier

00:56.310 --> 00:59.140
élément est de votre type générique, donc une liste de Todos,

00:59.140 --> 01:01.750
parce que c'est votre instantané de l'état, le deuxième

01:01.750 --> 01:08.600
élément est un React.

01:08.600 --> 01:08.600
La

01:08.600 --> 01:11.370
fonction de répartition ici à la fin, c'est ce qui se passe ici.

01:11.370 --> 01:12.690
Cela peut donc être utile.

01:12.690 --> 01:15.490
Peut-être travaillez-vous également avec Redux.

01:15.490 --> 01:19.660
Heureusement, si vous vous plongez dans leur documentation, vous trouverez

01:19.660 --> 01:21.360
également des instructions

01:21.360 --> 01:24.530
sur l'utilisation de Redux avec TypeScript.

01:24.530 --> 01:27.430
Ici, sous Recettes, vous trouverez Utilisation avec TypeScript,

01:27.430 --> 01:30.710
et là, vous pouvez apprendre comment vous pouvez ajouter des types

01:30.710 --> 01:33.270
à vos actions, et à vos réducteurs, et à votre gestion

01:33.270 --> 01:35.540
d'état avec Redux.

01:35.540 --> 01:38.650
C'est vraiment simple, pas du tout complexe, et cela ajoute

01:38.650 --> 01:41.520
beaucoup de sécurité au niveau des types.

01:41.520 --> 01:43.230
Peut-être utilisez-vous

01:43.230 --> 01:47.110
aussi le paquet React Router, ce paquet ici.

01:47.110 --> 01:52.040
Vous n'y trouverez pas de notations TypeScript spécifiques. Bien entendu, vous pouvez également

01:52.040 --> 01:54.020
installer ce paquet dans votre projet

01:54.020 --> 01:55.340
avec npm install dash dash

01:55.340 --> 01:58.770
save react dash router dash dom, qui est la commande que vous utiliserez

01:58.770 --> 02:00.740
généralement pour installer ce paquet

02:00.740 --> 02:03.720
dans votre projet React.

02:03.720 --> 02:07.000
Donc cela va ajouter le paquet react-router-dom.

02:07.000 --> 02:10.250
Mais ce paquet n'a pas d'instructions spéciales pour

02:10.250 --> 02:12.430
les types sur sa page ici, vous ne trouverez

02:12.430 --> 02:14.720
rien de spécifique à TypeScript ici, du

02:14.720 --> 02:17.570
moins au moment où j'enregistre ceci.

02:17.570 --> 02:19.163
Néanmoins, nous pouvons bien sûr

02:19.163 --> 02:21.250
l'utiliser dans un projet TypeScript et bénéficier

02:21.250 --> 02:23.920
d'une bonne prise en charge des types.

02:23.920 --> 02:25.800
Maintenant qu'il est installé, vous

02:25.800 --> 02:29.360
remarquerez que si j'importe à partir de react-router-dom, je n'ai

02:29.360 --> 02:31.880
pas vraiment un grand support de type.

02:31.880 --> 02:33.870
Par exemple, si j'essaie d'importer quelque

02:33.870 --> 02:36.870
chose ici, j'obtiens déjà un avertissement, qui ne pouvait pas

02:36.870 --> 02:39.210
trouver une déclaration pour le module react-router-dom,

02:39.210 --> 02:42.730
de sorte qu'il n'a pas trouvé d'informations de type ici.

02:42.730 --> 02:45.420
Pour corriger cela, bien sûr, nous pouvons faire quelque

02:45.420 --> 02:48.450
chose que nous avons fait avant, npm install dash dash save

02:48.450 --> 02:52.530
dash dev, at types, slash react dash router dash dom, donc nous annulons les types

02:52.530 --> 02:54.620
de recherche at ici, et nous sommes bons à

02:54.620 --> 02:56.860
nouveau, c'est une astuce que vous avez déjà

02:56.860 --> 02:59.097
appris, au début du cours, mais bien sûr, il n'y

02:59.097 --> 03:02.010
a pas besoin de l'oublier, juste parce que nous avons un projet

03:02.010 --> 03:03.920
où beaucoup de choses fonctionnent déjà

03:03.920 --> 03:06.790
avec TypeScript hors de la boîte.

03:06.790 --> 03:08.140
Si nous ajoutons ensuite quelque

03:08.140 --> 03:10.810
chose qui ne fonctionne pas avec TypeScript, comme celui-ci, nous

03:10.810 --> 03:13.700
pouvons l'ajouter comme ceci, et maintenant il est au courant de Route,

03:13.700 --> 03:15.380
il est au courant de toutes les autres fonctionnalités

03:15.380 --> 03:17.270
de ce paquet également.

03:17.270 --> 03:21.070
C'est ainsi que vous pouvez facilement ajouter un support pour cela, également.

03:21.070 --> 03:23.560
Si ce n'est pas le cas, installez-le

03:23.560 --> 03:26.010
et voyez s'il dispose d'une prise

03:26.010 --> 03:29.030
en charge intégrée des types, afin d'obtenir

03:29.030 --> 03:31.590
au moins une bonne prise en charge

03:31.590 --> 03:33.720
de l'autocomplétion et de la

03:33.720 --> 03:37.350
compilation. Si ce n'est pas le cas, installez un

03:37.350 --> 03:39.090
paquet de types, comme

03:39.090 --> 03:42.080
nous l'avons fait ici.

03:42.080 --> 03:43.980
Et c'est vraiment tout pour ce module, et

03:43.980 --> 03:46.410
c'est ainsi que vous pouvez utiliser TypeScript, et

03:46.410 --> 03:49.920
toutes ses fonctionnalités étonnantes dans une application React, et bien

03:49.920 --> 03:52.450
sûr, tout ce que vous apprenez dans ce cours, s'applique

03:52.450 --> 03:54.370
également à une application React.

03:54.370 --> 03:56.380
Vous pouvez utiliser toutes les fonctionnalités de

03:56.380 --> 03:59.130
TypeScript que vous avez apprises dans ce cours, dans un projet React.
