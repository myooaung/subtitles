WEBVTT

1
00:00:02.310 --> 00:00:03.143
<v Instructor>For this,</v>

2
00:00:03.143 --> 00:00:05.860
I'm back in the general project setup we worked on before.

3
00:00:05.860 --> 00:00:09.180
You'll find it attached in the index.html file

4
00:00:09.180 --> 00:00:10.940
and the app.ts file.

5
00:00:10.940 --> 00:00:15.410
And in there, I wanna dive right in with intersection types.

6
00:00:15.410 --> 00:00:19.570
Intersection types allow us to combine other types.

7
00:00:19.570 --> 00:00:23.280
Let's say we have a type admin,

8
00:00:23.280 --> 00:00:25.430
which is an object type, so again,

9
00:00:25.430 --> 00:00:28.170
this is not creating an object here, we're defining a type,

10
00:00:28.170 --> 00:00:30.340
so I'm just defining a type definition here

11
00:00:31.200 --> 00:00:35.560
and admin should have a name, which is a string, let's say,

12
00:00:35.560 --> 00:00:38.230
and an admin should also have

13
00:00:39.910 --> 00:00:44.370
privileges, and that should be a string array, for example.

14
00:00:44.370 --> 00:00:47.010
Now, we could've created this with an interface

15
00:00:47.010 --> 00:00:48.950
but here I am doing it with a type

16
00:00:49.810 --> 00:00:54.470
and now I have another type, general employee type,

17
00:00:54.470 --> 00:00:59.130
let's say, and there I also have a name, string.

18
00:00:59.130 --> 00:01:02.890
I have no privilege, but I have a start date.

19
00:01:02.890 --> 00:01:04.380
That could be of type date.

20
00:01:04.380 --> 00:01:07.350
We haven't seen that before but date is a type

21
00:01:07.350 --> 00:01:10.340
that is supported by the script based on the data object

22
00:01:10.340 --> 00:01:12.163
that is built in JavaScript.

23
00:01:13.730 --> 00:01:17.580
So now we want to create a new type here,

24
00:01:17.580 --> 00:01:21.120
an elevated employee, let's say,

25
00:01:21.120 --> 00:01:23.900
which should be the combination of these two types.

26
00:01:23.900 --> 00:01:26.470
Of course, we could create it manually by simply

27
00:01:26.470 --> 00:01:28.770
defining an object type, which has a name,

28
00:01:28.770 --> 00:01:31.750
which has a start date, and which has privilege,

29
00:01:31.750 --> 00:01:34.120
but if we have these two types already,

30
00:01:34.120 --> 00:01:37.540
then we can also just combine this by saying admin

31
00:01:37.540 --> 00:01:42.000
and, so we use the ampersand symbol here, employee.

32
00:01:42.000 --> 00:01:44.370
And now the result is a new object type

33
00:01:44.370 --> 00:01:46.390
which must have both.

34
00:01:46.390 --> 00:01:50.470
So if I have my employee, E one, which should be of type

35
00:01:50.470 --> 00:01:54.770
elevated employee, then I can store an object in there

36
00:01:54.770 --> 00:01:57.440
which must have a name property,

37
00:01:57.440 --> 00:02:00.113
which must have a privilege property,

38
00:02:02.510 --> 00:02:07.510
create server, and which also must have a start date

39
00:02:07.890 --> 00:02:08.800
with new data.

40
00:02:08.800 --> 00:02:10.070
Create a new data object

41
00:02:10.070 --> 00:02:12.700
which simply is the current timestamp.

42
00:02:12.700 --> 00:02:15.610
So this is now a simple way of combining two types.

43
00:02:15.610 --> 00:02:17.740
Now, I will say that intersection types

44
00:02:17.740 --> 00:02:21.550
are closely related to interface inheritance

45
00:02:21.550 --> 00:02:24.320
because of course we could've achieved the same here

46
00:02:24.320 --> 00:02:28.590
by using an interface admin

47
00:02:29.620 --> 00:02:32.420
and then an interface employee,

48
00:02:32.420 --> 00:02:34.700
and then we could also use an intersection type

49
00:02:34.700 --> 00:02:38.853
on these interfaces or we create a third interface,

50
00:02:40.100 --> 00:02:44.040
elevated employee, which extends

51
00:02:47.230 --> 00:02:50.653
employee and admin.

52
00:02:52.700 --> 00:02:54.520
Therefore if I now comment this out,

53
00:02:54.520 --> 00:02:56.830
we would have the exact same effect.

54
00:02:56.830 --> 00:02:58.550
Now, arguably, that's a bit more code.

55
00:02:58.550 --> 00:03:01.750
One reason why we maybe would prefer to use

56
00:03:01.750 --> 00:03:04.280
types here instead of interfaces,

57
00:03:04.280 --> 00:03:06.300
but the relation definitely is very close

58
00:03:06.300 --> 00:03:09.770
and you could absolutely use interfaces for this example.

59
00:03:09.770 --> 00:03:13.040
However, it is worth noting that whilst intersection types

60
00:03:13.040 --> 00:03:15.600
can be especially useful when used in conjunction

61
00:03:15.600 --> 00:03:18.240
with object types as we're doing it here,

62
00:03:18.240 --> 00:03:20.910
you can use them with any types.

63
00:03:20.910 --> 00:03:22.683
So if you had some other type,

64
00:03:23.655 --> 00:03:28.450
combinable, let's say, that's either a string or a number,

65
00:03:28.450 --> 00:03:29.940
so we have a union type here

66
00:03:29.940 --> 00:03:32.380
with the string or number base types

67
00:03:32.380 --> 00:03:34.770
and then we had a numeric type here,

68
00:03:34.770 --> 00:03:38.660
which is either a number or a boolean,

69
00:03:38.660 --> 00:03:43.660
well then, we could have our, let's say, universal type here

70
00:03:43.730 --> 00:03:48.160
by intersecting combinable with numeric

71
00:03:48.160 --> 00:03:49.800
and in the end, types could then see

72
00:03:49.800 --> 00:03:51.950
the universal of course is of type number

73
00:03:51.950 --> 00:03:54.730
because that is the only intersection we have here

74
00:03:54.730 --> 00:03:56.520
but if you had more intersections,

75
00:03:56.520 --> 00:03:59.830
then this would be the type that is assigned universal

76
00:03:59.830 --> 00:04:03.050
so it could also be a union type, which is the intersection

77
00:04:03.050 --> 00:04:04.940
of these two union types.

78
00:04:04.940 --> 00:04:07.800
So the intersection operator can be used with

79
00:04:07.800 --> 00:04:11.790
any types and it then simply builds the intersection

80
00:04:11.790 --> 00:04:12.980
of these types.

81
00:04:12.980 --> 00:04:14.330
In the case of a union type,

82
00:04:14.330 --> 00:04:17.300
that is basically the types they have in common.

83
00:04:17.300 --> 00:04:18.890
In the case of object types,

84
00:04:18.890 --> 00:04:22.220
it's simply the combination of these object properties,

85
00:04:22.220 --> 00:04:23.510
so to say.

86
00:04:23.510 --> 00:04:25.960
So these are intersection types.

87
00:04:25.960 --> 00:04:27.360
Can sometimes be useful.

88
00:04:27.360 --> 00:04:29.050
You'll not use them all the time

89
00:04:29.050 --> 00:04:31.570
but you definitely can encounter situations

90
00:04:31.570 --> 00:04:35.010
where you can express something in a simpler or shorter way

91
00:04:35.010 --> 00:04:37.230
by using intersection types.

92
00:04:37.230 --> 00:04:39.520
Now just to prove that this all works,

93
00:04:39.520 --> 00:04:42.050
let me open up a new tab here in my terminal

94
00:04:42.050 --> 00:04:45.390
and run TSC dash W to start the watch mode

95
00:04:45.390 --> 00:04:47.770
so that I don't just have to only go into live server

96
00:04:47.770 --> 00:04:49.850
but I actually also build my code.

97
00:04:49.850 --> 00:04:51.210
Now if I reload once here,

98
00:04:51.210 --> 00:04:53.200
we see this runs without errors

99
00:04:53.200 --> 00:04:55.443
and it also compiles without errors.

