WEBVTT

00:02.160 --> 00:04.860
Presentador: Así que ahora que vimos otro buen ejemplo de cómo

00:04.860 --> 00:06.440
podemos trabajar con decoradores,

00:06.440 --> 00:09.040
hay un último ejemplo en el que quiero profundizar.

00:09.040 --> 00:11.997
Y eso son los decoradores para la validación.

00:11.997 --> 00:14.560
Para ello, al final del archivo,

00:14.560 --> 00:17.733
añadiré otra nueva clase aquí.

00:18.780 --> 00:20.530
Eso podría ser un curso.

00:20.530 --> 00:23.903
Ahora un curso debe tener un título, que es una cadena.

00:25.430 --> 00:27.483
Y quizás un precio, que es un número.

00:29.730 --> 00:32.640
Entonces aquí tenemos un constructor donde obtenemos

00:32.640 --> 00:34.440
ambos valores aquí y deliberadamente

00:35.550 --> 00:37.780
no estoy usando el atajo aquí, para poder

00:37.780 --> 00:40.953
agregar fácilmente decoradores de propiedades.

00:42.690 --> 00:44.560
A continuación, establezco este título

00:44.560 --> 00:46.653
igual a t, y este precio igual a p.

00:47.990 --> 00:50.530
Ahora, por supuesto, cuando queremos instanciar este

00:50.530 --> 00:53.610
curso, tenemos que pasar un título válido y un precio válido.

00:53.610 --> 00:56.730
Pero un escenario común que puedes encontrar en

00:56.730 --> 00:59.630
algunas aplicaciones es que obtienes datos,

00:59.630 --> 01:03.340
digamos de un recurso web y obtienes datos donde supones

01:03.340 --> 01:05.854
que tienes un par de cursos digamos, pero

01:05.854 --> 01:08.110
no lo sabes con certeza.

01:08.110 --> 01:12.839
O, otro escenario posible, dejas que los usuarios introduzcan los datos y simplemente

01:12.839 --> 01:15.490
quieres asignar esos datos y negociar un nuevo curso

01:15.490 --> 01:18.370
con los datos introducidos por el usuario y asumes que

01:18.370 --> 01:21.280
son correctos, pero no tienes garantía de que sean correctos

01:21.280 --> 01:22.500
y por lo tanto quieres validar

01:22.500 --> 01:24.210
la entrada.

01:24.210 --> 01:26.380
Ese es el escenario que quiero fingir aquí.

01:26.380 --> 01:29.940
Digamos que en nuestro archivo html índice, tenemos un simple formulario

01:30.894 --> 01:32.840
aquí y no voy a estilo, por lo que ahora

01:32.840 --> 01:36.074
será que hermosa, pero tenemos un simple formulario aquí

01:36.074 --> 01:41.074
con la entrada de tipo de texto y un marcador de posición de título, woops, curso, título y

01:41.390 --> 01:44.620
un id de digamos título y por debajo de eso tenemos una entrada

01:44.620 --> 01:46.870
de número donde el tipo es todo el texto, pero

01:46.870 --> 01:50.605
es el precio del curso y el id es el precio.

01:50.605 --> 01:55.030
Y luego tenemos nuestro botón donde enviamos esto.

01:55.030 --> 02:00.030
Así que el botón es de tipo submit.

02:00.040 --> 02:02.780
Así que un formulario muy sencillo y como he dicho no es tan bonito

02:02.780 --> 02:04.280
si le echamos un vistazo aquí, pero

02:04.280 --> 02:06.070
tiene todo lo que necesitamos.

02:06.070 --> 02:08.763
Ahora, vamos a conectar un oyente al formulario aquí.

02:09.830 --> 02:14.780
Así que aquí tengo mi courseForm que puedo obtener con document, querySelector,

02:14.780 --> 02:18.840
form y añado el signo de exclamación porque sé que voy a obtener uno

02:18.840 --> 02:21.910
para que esto no sea nulo, y luego en el formulario podemos

02:21.910 --> 02:25.050
addEventListener, el listener del evento submit y

02:26.390 --> 02:29.300
luego obtenemos el objeto del evento pasado a la

02:29.300 --> 02:32.360
función que asigné automáticamente.

02:32.360 --> 02:35.450
Ahí quiero llamar al evento preventDefault, para que no se envíe

02:35.450 --> 02:38.030
el formulario y no se envíe ninguna petición http.

02:38.030 --> 02:40.570
Y luego queremos extraer los datos

02:40.570 --> 02:42.910
para el título y para el precio.

02:42.910 --> 02:45.779
Por lo tanto, el título puede ser extraído por

02:45.779 --> 02:49.700
llegar a documento, querySelector, o en realidad desde que

02:49.700 --> 02:54.700
asignamos un id, getElementById, título y sabemos que esto será un HTMLInputElement

02:55.560 --> 02:59.760
por lo que podemos utilizar typecasting para que typescript saber

02:59.760 --> 03:01.700
acerca de esto, y el precio es

03:01.700 --> 03:06.174
documento, getElementById, precio y también podemos convertir

03:06.174 --> 03:09.672
esto en un InputElement.

03:09.672 --> 03:11.320
Y en realidad allí para estos son los

03:11.320 --> 03:14.520
elementos por lo que vamos a cambiar el nombre de las constantes a titleEL

03:14.520 --> 03:17.779
y priceEl y para obtener el título concreto ahora podemos ir a titleEl,

03:17.779 --> 03:20.930
el acceso a la propiedad de valor y para obtener el precio, podemos

03:20.930 --> 03:23.400
hacer lo mismo para el priceElement y obtener el valor

03:23.400 --> 03:25.260
allí también, y quiero tener que añadir

03:25.260 --> 03:26.840
como un número, por lo que añadir el

03:26.840 --> 03:30.060
más delante de él para convertirlo en un número.

03:30.060 --> 03:34.017
Eso es todo, pero ahora quiero crear un nuevo curso

03:34.017 --> 03:36.090
con esa información.

03:36.090 --> 03:39.060
Así que aquí tenemos el curso creado donde

03:39.060 --> 03:43.850
puedo llamar a nuevo curso y le paso el título y el precio.

03:43.850 --> 03:46.770
Ahora typescript acepta esto, porque el título será una cadena

03:46.770 --> 03:48.640
y como convierto esta entrada en un número,

03:48.640 --> 03:50.200
el precio será un número.

03:50.200 --> 03:54.160
Así que, si luego registro en la consola, el curso creado a partir de entonces, podemos

03:54.160 --> 03:55.530
comprobar si esto funciona.

03:55.530 --> 03:58.693
Guardemos eso, recarguemos, tal vez limpiemos la consola para que

03:58.693 --> 04:00.680
podamos ver claramente la salida, y luego

04:00.680 --> 04:02.400
agreguemos un nuevo curso aquí.

04:02.400 --> 04:05.785
Javascript la guía completa cuesta 199 dólares

04:05.785 --> 04:08.010
y parece que esto funciona.

04:08.010 --> 04:11.010
Ahora bien, lamentablemente esto sólo funciona

04:11.010 --> 04:13.290
si no introduzco nada.

04:13.290 --> 04:16.600
Si ahora hago clic en guardar, vemos que este curso está creado.

04:16.600 --> 04:19.820
Ahora, esto técnicamente es un curso válido, pero por supuesto,

04:19.820 --> 04:23.121
no es realmente válido para nuestra aplicación.

04:23.121 --> 04:26.220
Probablemente queramos tener un título que no esté

04:26.220 --> 04:28.620
vacío y un precio que sea mayor que cero.

04:28.620 --> 04:30.660
Así que queremos añadir la validación.

04:30.660 --> 04:32.670
Por supuesto, podemos añadir simplemente

04:32.670 --> 04:37.130
una comprobación if aquí y comprobar si el título, el recorte, la longitud es mayor que cero,

04:37.130 --> 04:38.830
lo que significa que no está vacío y

04:38.830 --> 04:41.100
donde también validamos el precio.

04:41.100 --> 04:43.870
Pero eso significa que cada vez que creamos un nuevo

04:43.870 --> 04:47.880
curso, tenemos que añadir la lógica de validación aquí antes de añadirlo.

04:47.880 --> 04:49.990
¿No sería bueno que la lógica de validación

04:49.990 --> 04:51.910
se incluyera en la clase del curso, con

04:51.910 --> 04:53.940
la ayuda de decoradores, tal vez?

04:53.940 --> 04:56.770
Y eso es exactamente lo que quiero hacer aquí.

04:56.770 --> 04:59.910
Ahora sólo daré una idea básica de cómo podríamos

04:59.910 --> 05:01.447
implementar esto, en el

05:01.447 --> 05:04.861
próximo módulo te mostraré un paquete de ejemplo

05:04.861 --> 05:08.270
que hace esto de una manera más elaborada y que luego

05:08.270 --> 05:10.010
usaremos todos allí para

05:10.010 --> 05:12.080
jugar un poco con él.

05:12.080 --> 05:14.530
Ahora sin embargo aquí quiero implementar

05:14.530 --> 05:16.300
esto con mis propios decoradores

05:16.300 --> 05:19.370
y añadiré un decorador requerido aquí y añadiremos

05:19.370 --> 05:24.433
otra función decoradora que llamaré PositiveNumber.

05:26.710 --> 05:28.510
Así que tengo dos decoradores aquí.

05:28.510 --> 05:31.240
Y ahora mi idea es que podemos añadirlos aquí

05:31.240 --> 05:35.369
a nuestras propiedades, por ejemplo Requerido delante del título,

05:35.369 --> 05:40.369
y positiveNumber delante del precio y typescript tipo de registros de este

05:41.740 --> 05:44.020
en algún lugar y luego tenemos una tercera

05:44.020 --> 05:49.020
función, validar a la que podemos pasar un objeto por lo que cualquier objeto

05:49.490 --> 05:54.490
y typescript entonces tiene una mirada en el proyecto, encuentra cualquier

05:55.120 --> 05:58.780
validación que se registró en esta clase para este objeto

05:58.780 --> 06:03.410
antes y aplica nuestra lógica de validación.

06:03.410 --> 06:05.480
Esa es la idea que tengo aquí.

06:05.480 --> 06:08.240
Por lo tanto, esto podría ser parte de una biblioteca de terceros que

06:08.240 --> 06:11.170
estamos exponiendo a usted y, a continuación, sólo la importación requerida

06:11.170 --> 06:14.620
número positivo y validar a la primera configuración de los validadores y, a continuación,

06:14.620 --> 06:16.750
en algún momento llamar a validar.

06:16.750 --> 06:18.634
Así que por ejemplo aquí cuando

06:18.634 --> 06:22.462
creamos el curso, podemos llamar a validar y pasar

06:22.462 --> 06:31.660
en el createdCourse y si esto no es cierto, así que digamos que esto debe devolver verdadero o falso, si esto no es cierto,

06:31.660 --> 06:35.040
entonces lanzamos un error o mostrar una alerta,

06:35.040 --> 06:42.960
la entrada no válida por favor, inténtelo de nuevo y sólo en caso contrario continuamos.

06:42.960 --> 06:43.870
Así que esa es mi idea.

06:43.870 --> 06:46.540
Que podemos llamar validar, esto devuelve verdadero o falso.

06:46.540 --> 06:48.793
Verdadero si es válido, falso si no es válido

06:48.793 --> 06:51.670
y por lo tanto podemos utilizar el resultado.

06:51.670 --> 06:53.730
Por lo tanto, tenemos un par de cosas que hacer.

06:53.730 --> 06:56.290
Tenemos que asegurarnos de que cuando añadimos un decorador

06:56.290 --> 06:59.350
aquí, esto se almacena de alguna manera en algún lugar.

06:59.350 --> 07:00.970
Una vez más, tenga en cuenta que esto

07:00.970 --> 07:02.950
podría ser parte de nuestra propia biblioteca

07:02.950 --> 07:05.710
de terceros, por lo que en ella podríamos tener algún tipo

07:05.710 --> 07:10.050
de almacenamiento que es almacena que para esta clase y esta propiedad de título, por ejemplo,

07:10.050 --> 07:12.480
queremos que se requiere.

07:12.480 --> 07:15.630
Y en validar, podemos entonces comprobar si en el almacenamiento

07:15.630 --> 07:19.026
para el objeto que tenemos, para la clase en la que se basa el objeto

07:19.026 --> 07:21.990
tenemos un validador registrado para el título, para el

07:21.990 --> 07:23.330
precio, etc.

07:23.330 --> 07:25.260
Y luego ejecutamos nuestra lógica de validación.

07:25.260 --> 07:26.453
Esa es mi idea.
