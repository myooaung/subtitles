WEBVTT

00:02.180 --> 00:04.432
- ：现在, 我想在这里澄清一下,

00:04.432 --> 00:09.030
一个常见的混淆来源是泛型和联合类型之间的区别｡

00:09.030 --> 00:11.950
你为什么把这两个人搞混了？

00:11.950 --> 00:14.440
比如说, 我们这里的数据存储｡ 

00:14.440 --> 00:16.260
如果我们接受基于这些类型的泛型类型,

00:16.260 --> 00:23.750
我们也可以重写为, "我们想在这里存储字符串, 或者数字, 或者布尔值,

00:23.750 --> 00:27.610
对吧？ 我们可以存储它, 或者更准确地说, 用括号把它括起来,

00:27.610 --> 00:32.660
这样我们就可以把这两种类型中的任何一种都当作数组｡

00:32.660 --> 00:35.040
当然, 我们也可以说, "当我们添加一个项时,

00:35.040 --> 00:37.017
得到的是一个字符串, 一个数字,

00:37.017 --> 00:41.120
或者一个布尔值, 当我们删除它时, 得到的是一样的.

00:41.120 --> 00:41.120
那么, 这种方法有什么问题呢？

00:41.120 --> 00:43.007
乍一看, 它可能看起来像是实现了同样的目标, 但实际上,

00:44.424 --> 00:45.880
它做了一些完全不同的事情｡

00:45.880 --> 00:49.630
这里我们要说的是, 我们在这里存储任何类型的数据,

00:49.630 --> 00:53.710
只要它是字符串数组, 数字数组或布尔数组,

00:53.710 --> 01:02.930
我们也在这里添加任何类型的数据, 字符串, 数字或布尔数组, 删除也是一样的｡

01:02.930 --> 01:06.650
现在, 我们已经有一些错误了, 因为我不能再用一种通用的方式初始化它了｡

01:06.650 --> 01:09.830
但是, 除此之外, 它的工作｡ 

01:09.830 --> 01:14.420
问题是, 对于上面的一个, 我们不是说它是一个字符串数组,

01:14.420 --> 01:18.260
或者是一个数字数组, 或者是一个布尔数组.

01:18.260 --> 01:20.630
这就是说, 我们有一个数组,

01:20.630 --> 01:24.190
它可以混合字符串, 数字和布尔值｡

01:24.190 --> 01:26.290
所以如果你想说一个字符串数组,

01:26.290 --> 01:30.190
或者一个数字数组, 我们就必须说字符串数组,

01:30.190 --> 01:34.403
数字数组, 或者布尔数组｡

01:34.403 --> 01:36.020
好吧, 我们可以这么做, 但现在我们有一个问题｡ 

01:36.020 --> 01:39.100
现在, 我们要添加一个字符串, 一个数字或者一个布尔值,

01:39.100 --> 01:41.660
但是根据我们实际设置的数据数组,

01:41.660 --> 01:52.320
不管是数字数组, 还是布尔数组, 还是字符串数组, 我们不允许添加数字, 布尔值或者字符串.

01:52.320 --> 01:55.870
如果我们把它设为字符串数组, 那么我们就不能在这里加数字｡

01:55.870 --> 01:57.833
然而, 在这里, 我可以使用任何参数,

01:57.833 --> 01:59.800
只要它是数字､ 布尔值或字符串｡

01:59.800 --> 02:02.850
因此, 问题就出在Union类型上｡ 

02:02.850 --> 02:08.380
每次调用此方法或此方法时, 我们都接受这些值中的任何一个｡

02:08.380 --> 02:11.053
所以我们不是说, "不管什么时候,

02:11.053 --> 02:14.250
我们使用这个类, 你都必须选择一种类型,

02:14.250 --> 02:15.397
并坚持使用它,

02:15.397 --> 02:18.150
而是说, 不管什么时候, 你调用这个方法,

02:18.150 --> 02:21.830
你都可以随意使用这些类型.

02:21.830 --> 02:23.440
这不是我们想要的

02:23.440 --> 02:26.150
如果我将其恢复到以前的设置, 在那里我们使用泛型类型,

02:26.150 --> 02:33.050
然后我们得到一个不同的设置｡

02:33.050 --> 02:39.450
在这里, 我们说你必须选择一次你想要存储的数据类型,

02:39.450 --> 02:43.950
然后你只允许添加确切类型的数据｡

02:43.950 --> 02:45.750
比如说, 如果我在这里添加一个数字,

02:45.750 --> 02:48.523
我会得到一个错误, 因为这不是一个字符串,

02:49.710 --> 02:56.170
它表明我只想在这里管理字符串, 当我设置泛型类型时｡

02:56.170 --> 02:57.810
这就是联合类型和泛型类型之间的区别｡ 

02:57.810 --> 03:01.250
如果你想有一个函数, 每次调用它的时候都可以用这些类型中的一种来调用,

03:01.250 --> 03:06.920
那么联合类型是很好的｡

03:06.920 --> 03:08.690
如果您想锁定某个类型,

03:08.690 --> 03:11.570
泛型类型是很好的选择｡

03:11.570 --> 03:15.510
在创建的整个类实例中使用相同的类型｡

03:15.510 --> 03:18.380
在整个函式中使用相同的型别｡ 

03:18.380 --> 03:20.070
这就是您想要泛型型别的地方｡ 

03:20.070 --> 03:25.850
当您可以灵活地为每个方法调用和每个函数调用使用不同的类型时,

03:25.850 --> 03:28.120
您需要联合类型｡

03:28.120 --> 03:30.810
然后, 可以使用联合类型｡ 

03:30.810 --> 03:33.470
泛型型别会锁定型别｡ 
