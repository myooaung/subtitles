WEBVTT

00:02.410 --> 00:04.290
Eğitmen: Şimdi biraz kalıtım

00:04.290 --> 00:06.370
ve bir temel sınıf zamanı.

00:06.370 --> 00:09.189
Temelde templateElement, hostElement, içinde

00:09.189 --> 00:12.090
bir element olan, dom'daki elementleri seçme

00:12.090 --> 00:15.430
işini yapan, her zaman ihtiyacımız olan attach metoduna

00:15.430 --> 00:16.810
sahip bir temel sınıf eklemek

00:16.810 --> 00:18.520
istiyorum.

00:18.520 --> 00:22.540
Yani temelde dom'a bir şeyler işleyen sınıflarımızın

00:22.540 --> 00:26.630
ortak olarak sahip olduğu tüm bu paylaşılan işlevleri

00:26.630 --> 00:28.220
yönetir.

00:28.220 --> 00:30.880
Bunun için ProjectInput ve ProjectList

00:30.880 --> 00:35.650
sınıfımın üzerine, yani temel olarak buraya Bileşen Temel

00:35.650 --> 00:38.250
Sınıfını ekleyeceğim.

00:38.250 --> 00:41.540
Şimdi, isim size kalmış, ama ben Component olarak adlandıracağım,

00:41.540 --> 00:44.090
çünkü bu terimi React veya Angular'dan biliyor olabilirsiniz,

00:44.090 --> 00:45.870
eğer bunlarla çalıştıysanız, ve bunlarla

00:45.870 --> 00:47.590
çalışmadıysanız bile, bu sınıfları

00:47.590 --> 00:49.873
ekrana işlediğiniz UI, kullanıcı arayüzü bileşenleri

00:50.770 --> 00:53.950
olarak düşünebilirsiniz.

00:53.950 --> 00:57.950
Ve her bileşen sonuçta, onu oluşturmamızı sağlayan bazı işlevlere

00:57.950 --> 01:01.370
sahip, oluşturulabilir bir nesnedir.

01:01.370 --> 01:05.260
Daha sonra somut örnekler veya miras alınan sınıflar,

01:05.260 --> 01:10.260
bu belirli bileşenin ihtiyaç duyduğu ekstra işlevleri ekler.

01:10.300 --> 01:14.370
Peki o zaman genel Bileşen sınıfına ne giriyor?

01:14.370 --> 01:17.590
Bu üç unsuru kesinlikle söyleyebilirim.

01:17.590 --> 01:21.390
templateElement, hostElement ve element.

01:21.390 --> 01:23.590
Ancak burada türlerle ilgili

01:23.590 --> 01:25.470
bir sorunumuz var.

01:25.470 --> 01:28.320
templateElement her zaman bir HTMLTemplateElement olacaktır,

01:29.160 --> 01:31.980
ancak hostElement her zaman bir div olmak zorunda değildir,

01:31.980 --> 01:35.410
örneğin, bir proje öğesi sınıfı ekleyeceğimiz zaman, bunu bir ProjectList

01:35.410 --> 01:37.160
içinde oluşturacağız ve doğrudan

01:37.160 --> 01:42.360
buradaki kök div'imiz bile değil, bu yüzden bu her zaman bir div değildir.

01:42.360 --> 01:45.220
Ve buradaki, her zaman bir HTMLElement'tir, buna

01:45.220 --> 01:47.040
kesinlikle karar verebiliriz,

01:47.040 --> 01:50.540
ancak ProjectInput sınıfında olduğu gibi, aslında bunun

01:50.540 --> 01:52.560
belirli bir formu olduğunu biliyoruz,

01:52.560 --> 01:55.230
bu bir HTMLFormElement'tir.

01:55.230 --> 01:57.540
Dolayısıyla, daha spesifik bilgileri

01:57.540 --> 02:00.320
saklamadan kendimizi her zaman sadece bir HTMLElement

02:00.320 --> 02:02.130
bulundurmakla sınırlarsak

02:02.130 --> 02:05.220
bu ekstra bilgiyi kaybederiz.

02:05.220 --> 02:07.690
Peki bunu nasıl aşabiliriz?

02:07.690 --> 02:10.050
Sadece kalıtım kullanarak değil,

02:10.050 --> 02:12.920
burada genel bir sınıf oluşturarak, ondan

02:12.920 --> 02:15.230
miras aldığımızda somut türleri

02:15.230 --> 02:17.680
ayarlayabiliriz.

02:17.680 --> 02:20.940
Bunun için, sınıf adından sonra köşeli parantezler

02:20.940 --> 02:23.550
ekleriz ve ardından, T ve U gibi yaygın seçimler

02:23.550 --> 02:26.690
olabilecek iki tanımlayıcı seçeriz.

02:26.690 --> 02:30.110
Şimdi de buraya bazı kısıtlamalar ekleyebilir ve

02:30.110 --> 02:34.820
T'nin kesinlikle bir tür HTMLElement olacağını söyleyebiliriz.

02:34.820 --> 02:36.770
Sadece bir HTMLElement veya bunun daha

02:36.770 --> 02:38.970
spesifik bir versiyonu olabilir.

02:38.970 --> 02:41.870
Aynı şey U için de geçerlidir.

02:41.870 --> 02:44.780
Ve burada, hostElement'in T tipinde olacağını ve elemanın

02:44.780 --> 02:46.690
U tipinde olacağını biliyoruz.

02:46.690 --> 02:48.660
Ve şimdi, bu sınıftan miras aldığımızda,

02:48.660 --> 02:50.970
somut türleri belirleyebiliriz, böylece miras

02:50.970 --> 02:52.930
aldığımız farklı yerlerde farklı türlerle

02:52.930 --> 02:54.780
çalışabiliriz.

02:56.050 --> 02:58.053
Şimdi de buraya bir kurucu ekleyelim.

02:58.910 --> 03:01.080
Bu kurucuda, biraz bilgiye

03:01.080 --> 03:03.060
ihtiyacımız olacak.

03:03.060 --> 03:05.950
Şablonumuzun kimliğini bilmemiz gerekir, böylece

03:05.950 --> 03:08.030
onu nasıl seçeceğimizi biliriz ve

03:08.030 --> 03:09.750
bu bir dize olmalıdır.

03:09.750 --> 03:11.590
Bu bileşeni nerede oluşturacağımızı

03:11.590 --> 03:13.050
bilmemiz için bir dize olması

03:13.050 --> 03:15.833
gereken hostElementId değerini de bilmemiz gerekir.

03:17.440 --> 03:20.505
Ayrıca bir newElementId almak istiyorum, böylece yeni

03:20.505 --> 03:22.590
oluşturulan öğeye atanması gereken

03:22.590 --> 03:24.350
bir kimlik elde edeceğiz.

03:24.350 --> 03:26.020
Ancak bu isteğe bağlıdır ve parametrenin

03:26.020 --> 03:28.210
arkasına bir soru işareti ekleyerek bunu

03:28.210 --> 03:29.690
belirtiyorum.

03:29.690 --> 03:31.940
Alternatif olarak burada undefined'ı da

03:31.940 --> 03:34.050
bir tür olarak kabul edebilirdik, ancak

03:34.050 --> 03:36.470
ben sadece soru işaretini kullanacağım.

03:36.470 --> 03:38.510
Ve şimdi, kurucuda bununla birlikte,

03:38.510 --> 03:39.793
temel olarak, bu kodu

03:40.640 --> 03:42.083
buradan alabilir ve Component

03:43.810 --> 03:46.950
sınıfının kurucusuna koyabiliriz, böylece templateElement'i

03:46.950 --> 03:48.940
saklayabiliriz, ancak elbette,

03:48.940 --> 03:52.060
şimdi burada aldığımız ID, bu templateId'dir, bu

03:52.060 --> 03:57.450
yüzden bunu kurucuda bir argüman olarak alıyorum.

03:57.450 --> 04:00.060
Ve hostElement için, buradaki ID, elbette,

04:00.060 --> 04:02.733
hostElementId'mizdir, bunun gibi.

04:04.790 --> 04:07.930
Ayrıca, elbette, buradaki dökümle ilgili olarak, bunun

04:07.930 --> 04:10.230
T tipinde olacağını biliyoruz, çünkü buradaki

04:10.230 --> 04:12.580
T, hostElement'imiz için sakladığımız veya

04:12.580 --> 04:15.420
kullandığımız bu genel tiptir, bu yüzden burada zaten

04:15.420 --> 04:17.163
döküm yapabiliriz.

04:18.160 --> 04:20.253
Ve bununla birlikte, öğeleri seçiyoruz.

04:21.130 --> 04:22.940
Daha fazla kod da alabiliriz.

04:22.940 --> 04:26.650
Buradaki kod, bir düğümü içe aktardığımız ve ID'yi ayarladığımız

04:26.650 --> 04:30.130
yer, bunların hepsini yakalayabiliriz.

04:30.130 --> 04:32.520
Şimdi bunu buraya kopyalayalım ve Component

04:32.520 --> 04:35.317
sınıfının kurucusuna da ekleyelim.

04:35.317 --> 04:37.640
importedNode, sonra element'i ayarlarız

04:37.640 --> 04:41.080
ve buradaki element bu genel U tipine sahiptir, bu yüzden bunu

04:41.080 --> 04:43.000
buraya döktüğümüzde, buradaki U

04:43.000 --> 04:46.870
tipi olacağını biliyoruz, bu yüzden onu U'ya dökmeliyiz.

04:46.870 --> 04:49.090
Burada jeneriklerin iyi bir kullanımı söz konusudur ve bu

04:49.090 --> 04:51.993
da Component sınıfını gerçekten yeniden kullanılabilir hale getirir.

04:53.060 --> 04:55.200
Şimdi, kimlikle ilgili.

04:55.200 --> 04:58.200
Burada elde ettiğimiz şey newElementId'dir.

04:58.200 --> 05:00.590
Elbette buna her zaman sahip olmayabiliriz, çünkü isteğe

05:00.590 --> 05:02.150
bağlıdır, bu yüzden sahip olup olmadığımızı

05:02.150 --> 05:03.870
kontrol etmeliyiz.

05:03.870 --> 05:06.070
Yani newElementId bir şeyse ve yalnızca

05:06.070 --> 05:07.650
bir şeyse, ancak o zaman atamayı

05:07.650 --> 05:10.543
deneyeceğim, aksi takdirde denemeyeceğiz, çünkü

05:10.543 --> 05:13.023
o zaman atayacak bir kimliğimiz yok.

05:14.420 --> 05:16.300
Bununla birlikte, kurucumuz var.

05:16.300 --> 05:19.160
Şimdi burada attach fonksiyonunu kullanalım.

05:19.160 --> 05:21.970
O halde attach yöntemini diğer sınıflarımızdan

05:21.970 --> 05:25.470
birinden kopyalayalım ve buraya, Component sınıfına

05:25.470 --> 05:28.473
özel bir yöntem olarak ekleyelim.

05:32.690 --> 05:35.640
Daha sonra bunu da çağırabiliriz. Component sınıfının

05:35.640 --> 05:38.540
kurucusunun sonuna eklenir.

05:38.540 --> 05:39.960
Şimdi, burada bir öğe eklemek

05:39.960 --> 05:42.570
istiyoruz, ancak nereye eklenmesi gerektiğini

05:42.570 --> 05:44.193
bilmiyoruz, bu yüzden aslında

05:44.193 --> 05:46.450
burada almamız gereken bazı ekstra bilgiler

05:46.450 --> 05:49.450
var, yapıcıda dördüncü bir argüman olarak, insert

05:52.430 --> 05:54.200
Atstart bir isim olabilir ve bu

05:54.200 --> 05:56.680
bir boolean diyelim.

05:56.680 --> 06:00.190
Ve bunu isteğe bağlı parametremizin önüne taşımalıyız.

06:00.190 --> 06:02.230
İsteğe bağlı parametreler her zaman en sonda yer almalıdır,

06:02.230 --> 06:03.980
çünkü insanlar bunları atlayabilir.

06:03.980 --> 06:06.680
Bu nedenle, gerekli parametreleriniz bu isteğe

06:06.680 --> 06:09.220
bağlı parametrelerden sonra gelemez.

06:09.220 --> 06:13.533
Ve insertAtStart daha sonra attach'e iletilir, orada insertAtBeginning,

06:14.615 --> 06:18.740
insertAtStart'ı da tekrar kullanabilirsiniz, karışıklığı önlemek

06:18.740 --> 06:21.350
için burada farklı bir isim kullanıyorum, bir

06:21.350 --> 06:23.470
boolean olarak alınır.

06:23.470 --> 06:28.040
Ve sonra burada, insertAtBeginning'in doğru olup olmadığını kontrol

06:28.040 --> 06:32.920
ediyoruz, eğer doğruysa, o zaman burada afterbegin var, aksi takdirde

06:32.920 --> 06:34.887
beforeend var.

06:36.770 --> 06:39.653
Şimdi bunun nasıl yerleştirileceği konusunda esnek davranıyoruz.

06:42.980 --> 06:46.570
Ayrıca bu sınıfı şimdi soyut bir sınıf olarak işaretlemek istiyorum,

06:46.570 --> 06:49.600
çünkü insanlar bunu asla doğrudan örneklememeli, bunun

06:49.600 --> 06:52.560
yerine her zaman miras için kullanılmalıdır.

06:52.560 --> 06:56.090
Bu yüzden class'ın önüne abstract anahtar sözcüğünü ekliyorum.

06:56.090 --> 06:58.750
Bu, artık onu örnekleyemeyeceğimizden emin olmamızı sağlar.

06:58.750 --> 07:01.963
Eğer bunu yapmaya çalışırsak, TypeScript bize bağıracaktır.

07:04.070 --> 07:06.490
Ayrıca iki yöntem daha ekleyeceğim,

07:06.490 --> 07:08.410
bunlar configure yöntemi ve

07:08.410 --> 07:10.840
renderContent yöntemidir.

07:10.840 --> 07:13.430
Ve bunu soyut bir yöntem olarak ekleyeceğim,

07:13.430 --> 07:16.463
yani somut uygulama burada eksik, ancak şimdi, temel

07:18.000 --> 07:21.080
olarak, bileşenden miras alan herhangi bir sınıfı bu

07:21.080 --> 07:22.670
iki yöntemi eklemeye ve bunları

07:22.670 --> 07:25.980
kullanılabilir hale getirmeye zorluyoruz.

07:25.980 --> 07:27.220
Bunu sadece buraya ekliyorum,

07:27.220 --> 07:29.390
böylece başka biri kodumuza bakarsa,

07:29.390 --> 07:31.460
Component sınıfının arkasındaki fikrin

07:31.460 --> 07:34.150
ne olduğunu iyi anlayabilir.

07:34.150 --> 07:36.340
Tüm genel oluşturma işlemlerini veya

07:36.340 --> 07:38.530
bileşenin eklenmesini yapar, ancak

07:38.530 --> 07:40.790
somut içerik ve yapılandırmanın miras

07:40.790 --> 07:43.840
aldığımız yerde gerçekleşmesi gerekir.

07:43.840 --> 07:47.670
Ek not, özel, soyut yöntemlere sahip olamazsınız.

07:47.670 --> 07:49.660
Bu yüzden private öğesinin burada atlanması

07:49.660 --> 07:52.000
gerekir, TypeScript buna izin vermez.

07:52.000 --> 07:54.590
Bu sayede, ProjectList üzerindeki Component

07:54.590 --> 07:56.480
öğesini genişletebilir ve artık

07:56.480 --> 07:59.130
bu üç özellikten kurtulabiliriz.

07:59.130 --> 08:00.640
ProjeListesi'ne özgü olduğu

08:00.640 --> 08:03.520
için atanmışProjeler'i saklıyoruz.

08:03.520 --> 08:06.620
Ayrıca şimdi jenerik tiplerimiz için takılması gereken

08:06.620 --> 08:09.560
somut değerleri de belirtmek istiyoruz.

08:09.560 --> 08:12.410
Bunu geri döndürürsek, bir HTMLDivElement

08:12.410 --> 08:16.540
ve bir HTMLElement'e sahip olacağımızı biliyoruz, bu yüzden

08:16.540 --> 08:19.313
burada HTMLDivElement ve HTMLElement'i

08:20.410 --> 08:22.800
bu şekilde geçireceğim ve ardından

08:22.800 --> 08:25.830
bu üç özellikten kurtulacağım.

08:25.830 --> 08:29.510
Yapıcıda, artık burada buna ihtiyacımız yok, bunun yerine

08:29.510 --> 08:32.550
başlangıçta süper'i çağırmamız, temel sınıfın

08:32.550 --> 08:35.130
yapıcısını çağırmamız ve bunun için süper

08:35.130 --> 08:38.080
yapıcıya bazı bilgileri aktarmamız gerekiyor,

08:38.080 --> 08:40.840
bazı bilgileri aktarmamız gerekiyor.

08:40.840 --> 08:42.753
TemplateElement'in kimliği, hostElementId,

08:44.050 --> 08:45.850
bunu hostElement'in başına eklemek

08:45.850 --> 08:47.870
isteyip istemediğimiz ve potansiyel

08:47.870 --> 08:51.920
olarak yeni öğeye atanması gereken kimlik.

08:51.920 --> 08:54.038
İşte şablon kimliğimiz

08:54.038 --> 08:57.811
ve bununla buradan kurtulabiliriz.

08:57.811 --> 09:01.292
Sonra burada, hostElement, bu ID app idi, bu yüzden bundan

09:01.292 --> 09:02.670
kurtulabiliriz.

09:02.670 --> 09:04.260
AtanmışProjeler'i tutuyoruz,

09:04.260 --> 09:06.400
çünkü burada hala buna ihtiyacımız var.

09:06.400 --> 09:08.193
Burada bundan kurtuluyoruz,

09:10.150 --> 09:13.050
ancak yeni öğenin kimliğiyle ilgili olarak, bunu

09:13.050 --> 09:16.850
aslında dördüncü bir parametre olarak geçmek istiyorum.

09:16.850 --> 09:19.040
Üçüncüsü, bunun nereye eklenmesi gerektiğidir

09:19.040 --> 09:22.400
ve burada, bunu sondan önce eklemek için kullanırız, bu nedenle

09:22.400 --> 09:25.890
aslında buraya insertAtStart değeri için bir parametre olarak

09:25.890 --> 09:29.170
eklemek istediğim şey yanlıştır, çünkü başlangıçta değil,

09:29.170 --> 09:32.283
sonunda eklenmelidir.

09:36.000 --> 09:38.940
Şimdi, kesinlikle hala dinleyicimi burada kurmak istiyorum.

09:38.940 --> 09:40.730
Yine de attach'i çağırmama gerek

09:40.730 --> 09:44.410
yok, bu temel sınıfta, temel bileşende gerçekleşecek.

09:44.410 --> 09:46.253
Yine de renderContent'i çağıracağım.

09:47.870 --> 09:50.010
Ve burada bu türü kullanmamalıyız, sadece

09:50.010 --> 09:52.100
yazmalıyız, çünkü süper çalışmayı bitirmeden

09:52.100 --> 09:54.410
önce bunu kullanamayız.

09:54.410 --> 09:55.490
Yine de bu sorun değil,

09:55.490 --> 09:57.690
çünkü tipi bir argüman olarak aldık.

09:57.690 --> 09:59.680
Şimdi, burada hala bir hata aldığımı

09:59.680 --> 10:03.487
görüyorsunuz, çünkü ProjectList'te bir attach metodumuz var ve bu,

10:03.487 --> 10:05.410
temel sınıfta sahip olduğumuz attach

10:05.410 --> 10:07.330
metoduyla çakışıyor.

10:07.330 --> 10:10.600
O halde bu ekleme yönteminden kurtulalım.

10:10.600 --> 10:14.024
Şimdi hala bir hata alıyoruz, çünkü gördüğünüz gibi renderContent

10:14.024 --> 10:16.060
burada private, ancak biz onu burada public

10:16.060 --> 10:18.270
bir yöntem olarak belirtiyoruz, private bir

10:18.270 --> 10:20.240
yöntem olmasını isterdim, ancak private

10:20.240 --> 10:22.860
abstract yöntemler desteklenmiyor.

10:22.860 --> 10:25.680
Bu yüzden buradaki private anahtar sözcüğünü kaldıracağım ve

10:25.680 --> 10:28.170
şimdi bununla birlikte, burada sahip olacağımıza söz verdiğim

10:28.170 --> 10:30.510
yapılandırma yöntemine sahip olmadığımız bir sorunla

10:30.510 --> 10:31.990
baş başa kalıyoruz.

10:31.990 --> 10:33.650
Pekala, ekleyelim.

10:33.650 --> 10:38.500
Yani burada, renderConfig'in yanı sıra, burada hiçbir şey yapmıyor olsam

10:38.500 --> 10:40.510
da configure ekleyebiliriz.

10:40.510 --> 10:42.950
Alternatif olarak, buraya bir soru işareti ekleyerek

10:42.950 --> 10:46.000
bunu isteğe bağlı bir yöntem haline getirebilirsiniz, o zaman eklemek

10:46.000 --> 10:47.520
zorunda kalmazsınız.

10:47.520 --> 10:50.380
Buraya ekleyeceğim çünkü ProjectList

10:50.380 --> 10:53.210
için dinleyicimizi ayarladığımız kodu

10:53.210 --> 10:56.490
aslında configure içine koyduğumuzu da iddia

10:56.490 --> 10:58.530
edebiliriz.

10:58.530 --> 11:00.810
Böylece yapılandırmaya ulaşabilir

11:00.810 --> 11:03.320
ve ardından burada dinleyici kurulumunu

11:03.320 --> 11:05.220
gerçekleştirebiliriz.

11:05.220 --> 11:06.610
Ve şimdi, renderContent'i çağırdığımızdan

11:06.610 --> 11:10.653
emin olmalıyız, ancak aynı zamanda şu şekilde yapılandırmalıyız.

11:12.730 --> 11:14.440
Neden configure ve renderContent'i

11:14.440 --> 11:16.450
burada soyut sınıfta contructor'da

11:16.450 --> 11:18.560
çağırmadığımı merak ediyorsanız, bunu

11:18.560 --> 11:19.993
yapabiliriz, ancak o zaman

11:21.780 --> 11:23.720
bir sorunumuz olabilir.

11:23.720 --> 11:26.760
Bunu Component sınıfında çağırırsak, miras

11:26.760 --> 11:30.770
alan sınıfta bir yöntem çağırabiliriz, yani Component'i

11:30.770 --> 11:33.240
genişleten bir sınıfta, renderContent

11:33.240 --> 11:36.810
veya configure'un miras alan sınıfın contructor'ının

11:36.810 --> 11:39.410
aslında sadece temel sınıf contructor'ı

11:39.410 --> 11:41.540
bittikten sonra renderContent

11:41.540 --> 11:44.710
ve / veya configure'un dayandığı bir şeye dayandığı

11:44.710 --> 11:48.100
bir şey ayarlayabiliriz.

11:48.100 --> 11:50.690
Bu nedenle, temel sınıfın bu yöntemleri

11:50.690 --> 11:52.410
bizim için çağırması yerine,

11:52.410 --> 11:55.410
miras alan sınıfın bu yöntemleri çağırması daha

11:55.410 --> 11:56.860
güvenlidir.

11:57.980 --> 12:01.280
Böylece, ProjectList sınıfını kalıtımdan ve paylaşılan

12:01.280 --> 12:05.040
mantığımızdan yararlanacak şekilde yeniden yapılandırdık.

12:05.040 --> 12:07.730
Şimdi aynı şeyi ProjectInput için yapalım.

12:07.730 --> 12:13.170
Orada da Component'i genişletmek istiyoruz.

12:13.170 --> 12:14.900
Bunun genel doğasını

12:14.900 --> 12:19.430
kullanın ve orada, hostElement için HTMLDivElement'e

12:19.430 --> 12:23.980
ve işlenen öğe için HTMLFormElement'e sahibiz.

12:23.980 --> 12:27.210
Bununla birlikte, buradaki üç özellikten kurtulabiliriz, o

12:27.210 --> 12:28.310
halde bunu yapalım.

12:28.310 --> 12:30.090
Bu üç özelliği elbette ProjectInput'a

12:30.090 --> 12:32.140
özgü oldukları için saklıyoruz.

12:33.040 --> 12:35.310
Daha sonra burada super'i çağırmamız

12:35.310 --> 12:38.320
gerekiyor ve super'e ProjectInput olan şablonun

12:38.320 --> 12:39.900
ID'sini, app olan ana öğenin

12:39.900 --> 12:41.970
ID'sini aktarıyoruz, insertBefore

12:41.970 --> 12:45.270
burada true, çünkü bu ProjectInput sınıfı için yeni

12:45.270 --> 12:47.620
oluşturulan öğeyi en başa eklemek

12:47.620 --> 12:50.510
istiyorum.

12:50.510 --> 12:53.110
Ve sonra, newElementId, işte bu kullanıcı

12:53.110 --> 12:55.170
girdisidir, bu yüzden bunu da

12:55.170 --> 12:56.913
iletmeliyiz.

12:57.844 --> 12:59.400
Bununla, bu koddan, bu

12:59.400 --> 13:03.480
koddan ve aslında buradaki tüm bu koddan kurtulabiliriz.

13:03.480 --> 13:05.240
Tabii ki, bu kodu burada saklayın.

13:05.240 --> 13:07.820
Bununla birlikte, bunu belki de yapılandırmaya

13:07.820 --> 13:09.860
koyduğumuzu da iddia edebiliriz.

13:09.860 --> 13:12.100
Şimdi burada zaten sahip olduğumuz configure

13:12.100 --> 13:13.660
yöntemine gidelim ve dinleyicilerimizi

13:13.660 --> 13:17.683
buraya ya da özellik kurulumumuzu yapılandırmak için buraya ekleyelim.

13:18.880 --> 13:20.780
Elbette, attach'tan kurtulalım,

13:20.780 --> 13:24.450
çünkü bu artık temel sınıfın bizim için yaptığı bir şey ve TypeScript'in

13:24.450 --> 13:26.980
neyi sevmediğini kontrol edelim, elbette buradaki

13:26.980 --> 13:29.690
attach'tan kurtulmalıyız.

13:29.690 --> 13:32.520
Ve evet, aslında TypeScript'in sevmediği bir

13:32.520 --> 13:35.090
şey var, artık bu alanların contructor'da

13:35.090 --> 13:37.190
ilklendirilmediğinden şikayet ediyor,

13:37.190 --> 13:40.380
çünkü configure'un contructor'da çağrıldığını ve

13:40.380 --> 13:42.260
bu ilklendirmeyi yaptığını anlamıyor

13:42.260 --> 13:44.770
veya kontrol etmiyor.

13:44.770 --> 13:47.500
TypeScript'i tatmin etmek için, bu başlatma

13:47.500 --> 13:50.550
işlemlerini configure'dan doğrudan yapıcıya

13:50.550 --> 13:52.170
taşıyacağım.

13:52.170 --> 13:54.190
Teknik olarak sonuç tamamen aynıdır, ancak artık

13:54.190 --> 13:55.953
TypeScript şikayet etmeyecektir.

13:56.800 --> 13:59.240
Bununla birlikte, özel bir configure yöntemimiz

14:00.440 --> 14:02.310
olduğundan şikayet edecektir,

14:02.310 --> 14:05.910
bu nedenle daha önce olduğu gibi bunu değiştirmeli ve configure'u

14:05.910 --> 14:08.940
genel bir yönteme dönüştürmeliyiz.

14:08.940 --> 14:11.460
Şimdi, bu bir zorunluluk değildir, ancak önce genel

14:11.460 --> 14:13.000
yöntemlerinizi kullanmak bir

14:13.000 --> 14:14.570
tür gelenektir, bu yüzden onu burada

14:14.570 --> 14:17.240
diğer özel yöntemlerin üzerine taşıyacağım.

14:17.240 --> 14:19.370
Ve tabii ki, şimdi de bir renderContent

14:19.370 --> 14:21.990
metodumuz olmadığından şikayet ediyor.

14:21.990 --> 14:25.020
Şimdi, sırf ihtiyacımız olduğu için bir tane ekleyeceğim.

14:25.020 --> 14:26.780
Burada içinde hiçbir şey yapmıyoruz,

14:26.780 --> 14:28.890
bu yüzden teknik olarak gerekli değil, ancak

14:28.890 --> 14:31.053
şimdi temel sınıfımızı tatmin ediyoruz.

14:32.260 --> 14:34.603
Ek not, ProjectList sınıfındaki

14:35.550 --> 14:39.590
renderContent ve configure da aynı nedenlerle, az önce

14:39.590 --> 14:43.230
bahsettiğim bu kural için buradaki özel yöntemin

14:43.230 --> 14:45.123
üzerine taşınabilir.

14:46.440 --> 14:49.870
Ve bununla birlikte, kalıtımdan yararlanmak ve işin çoğunu

14:49.870 --> 14:51.780
temel sınıfın yapmasına izin vermek

14:51.780 --> 14:55.330
için ProjectInput'u da yeniden yapılandırdık.

14:55.330 --> 14:57.670
Bakalım şimdi hepsi çalışıyor mu?

14:57.670 --> 15:00.710
Bunu kaydedersek, hatasız derlenir,

15:00.710 --> 15:02.740
iyi çalışıyor gibi görünür,

15:02.740 --> 15:05.870
bu yüzden soru bu işe yarar mı?

15:05.870 --> 15:07.810
Ve bu oldukça iyi görünüyor.

15:07.810 --> 15:09.720
Öncekiyle aynı şekilde çalışır,

15:09.720 --> 15:11.600
ancak şimdi kalıtım sayesinde kodun

15:11.600 --> 15:14.240
yeniden kullanımından yararlandığımız daha

15:14.240 --> 15:15.850
temiz bir kodumuz var.

15:15.850 --> 15:18.540
Miras alabileceğimiz tek yer burası değil.

15:18.540 --> 15:20.610
Projemizin durumunu da yeniden

15:20.610 --> 15:24.230
düzenleyerek bu dersi burada sonlandırmak istiyorum.

15:24.230 --> 15:26.240
Teknik olarak, burada kalıtıma ihtiyacımız

15:26.240 --> 15:29.450
yok, çünkü tüm uygulamada yönettiğimiz tek bir durum var,

15:29.450 --> 15:31.230
ancak birden fazla farklı durumunuzun

15:31.230 --> 15:33.130
olduğu daha büyük bir uygulama hayal

15:33.130 --> 15:35.310
edin.

15:35.310 --> 15:37.240
Biri kullanıcı durumu için, kullanıcının

15:37.240 --> 15:39.290
giriş yapıp yapmadığı vb. için, biri

15:39.290 --> 15:43.030
projeler için, biri de alışveriş sepeti için.

15:43.030 --> 15:45.600
Şimdi, durum sınıfınızın bazı özelliklerinin

15:45.600 --> 15:48.080
her zaman aynı olduğunu fark edeceksiniz.

15:48.080 --> 15:50.520
Özellikle, bu dinleyici dizisi

15:50.520 --> 15:52.780
ve addListener yöntemi.

15:52.780 --> 15:54.730
Dolayısıyla burada bir temel sınıf da kullanabiliriz.

15:55.650 --> 15:58.170
Burada bir State sınıfı kullanabiliriz

15:58.170 --> 16:01.230
ve bu sınıfın bir listeners dizisi vardır ve bu

16:01.230 --> 16:04.640
sınıfın da bir addListeners yöntemi vardır, bu yüzden

16:04.640 --> 16:07.120
her ikisini de ProjectState'ten kesip

16:07.120 --> 16:09.160
State'e ekleyeceğiz.

16:09.160 --> 16:12.610
Şimdi, bu aynı zamanda, elbette, dinleyicimizin gerçekten bir

16:12.610 --> 16:14.700
proje dizisi döndürüp döndürmeyeceğini

16:14.700 --> 16:16.720
bilmediğimiz anlamına gelir.

16:16.720 --> 16:18.253
Yani aslında burada,

16:19.110 --> 16:20.760
bu fonksiyon tipi için,

16:20.760 --> 16:24.740
aslında genel bir tipe de sahip olmak istiyorum.

16:24.740 --> 16:27.440
Böylece bunu dışarıdan ayarlayabiliriz.

16:27.440 --> 16:28.483
Bunu yapabiliriz, buradaki

16:29.790 --> 16:31.623
gibi genel bir tür yazabiliriz, genel

16:32.680 --> 16:35.730
olan özel bir tür, tür adımızdan sonra açılı parantezleri

16:35.730 --> 16:38.410
ekleyebilir, seçtiğimiz bir tanımlayıcıyı kullanabilir

16:38.410 --> 16:40.150
ve ardından bu türü burada yeniden

16:40.150 --> 16:42.460
kullanabiliriz.

16:42.460 --> 16:44.960
Şimdi, State'i genel yapabiliriz, aynı tanımlayıcıyı

16:44.960 --> 16:46.320
kullanabiliriz, çünkü bu

16:46.320 --> 16:49.530
bizim özel tipimizden farklı bir yapıdır.

16:49.530 --> 16:53.520
Ve burada, bir dinleyici listesine sahip olmak istediğimizi söylediğimizde,

16:53.520 --> 16:56.780
TypeScript'e oluşturduğumuz bu State nesnesi için dinleyicilerin

16:56.780 --> 16:58.850
hangi genel türü kullandığını söylememiz

16:58.850 --> 17:01.510
gerekir.

17:01.510 --> 17:03.850
Bu da basitçe genel tipimizi buraya ve

17:03.850 --> 17:06.490
buraya iletebileceğimiz anlamına gelir.

17:06.490 --> 17:09.410
Şimdi state'i genişlettiğimizde, bu state'in

17:09.410 --> 17:12.630
birlikte çalışacağı veri türünü belirtmemiz gerekir

17:12.630 --> 17:14.930
ve state yerine bu daha sonra dinleyici

17:14.930 --> 17:17.680
özel türümüze iletilir, fikir budur.

17:17.680 --> 17:19.580
Peki tüm bunları nasıl kullanacağız?

17:19.580 --> 17:21.950
Aşağıda, ProjectState sınıfında, State

17:21.950 --> 17:24.930
sınıfını basitçe genişletiyoruz ve şimdi, bu

17:24.930 --> 17:27.900
genel yer tutucu için bir değer, somut bir değer

17:27.900 --> 17:30.040
sağlıyoruz ve burada, bu somut değer

17:30.040 --> 17:32.480
Project'tir, çünkü bu ProjectState tamamen

17:32.480 --> 17:36.510
tahmin edin neyi yönetmekle ilgilidir?

17:36.510 --> 17:37.393
Projeler.

17:38.970 --> 17:41.650
Şimdi, sizin de anlayabileceğiniz gibi buradaki

17:41.650 --> 17:43.390
özel kurucuda bir sorun var, çünkü

17:43.390 --> 17:45.160
super'i çağırmıyoruz.

17:45.160 --> 17:46.930
Bunu kesinlikle yapmalıyız, buraya

17:46.930 --> 17:48.350
süper çağıralım, orada yapmamız

17:48.350 --> 17:49.800
gereken tek şey bu.

17:50.640 --> 17:53.490
Ve burada, dinleyicileri incelediğimiz yeri

17:53.490 --> 17:55.880
aşağı kaydırırsak, dinleyicilerin

17:55.880 --> 17:57.890
özel olduğunu ve temel sınıfımızda

17:57.890 --> 18:00.240
özel olduğunu görürüz.

18:00.240 --> 18:01.860
Bu da ona yalnızca temel sınıfın içinden

18:01.860 --> 18:03.580
erişebileceğimiz anlamına gelir.

18:03.580 --> 18:06.760
Ancak private'a benzeyen, ancak miras alan

18:06.760 --> 18:09.380
sınıflardan erişime de izin veren başka

18:09.380 --> 18:12.900
bir erişim değiştiricisini öğrendiniz ve bu da protected

18:12.900 --> 18:14.990
olacaktır.

18:14.990 --> 18:17.200
Korumalı olması, sınıf dışından hala

18:17.200 --> 18:18.930
erişilemediği, ancak miras

18:18.930 --> 18:23.030
alan herhangi bir sınıftan erişilebileceği anlamına gelir.

18:23.030 --> 18:24.740
Bununla birlikte, tüm bunları kaydedelim,

18:24.740 --> 18:26.650
sorunsuz bir şekilde derlenmesi gerekir.

18:26.650 --> 18:28.940
Bunu hızlıca test edelim ve iyi görünüyor,

18:28.940 --> 18:31.790
yani daha önce olduğu gibi çalışıyor, ancak şimdi

18:31.790 --> 18:34.160
yine biraz daha güzel bir kodla, durum yönetimimiz

18:34.160 --> 18:38.363
için de kalıtım ve jenerikleri kullanıyoruz.
