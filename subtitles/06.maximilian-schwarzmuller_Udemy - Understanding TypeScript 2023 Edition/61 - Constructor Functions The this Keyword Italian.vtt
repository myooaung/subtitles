WEBVTT

00:02.160 --> 00:03.330
Presentatore: Ora le

00:03.330 --> 00:06.080
classi e tutte le funzioni costruttore che esistono

00:06.080 --> 00:09.280
da più tempo non hanno solo proprietà che si possono usare

00:09.280 --> 00:12.780
per definire la struttura generale dell'oggetto.

00:12.780 --> 00:14.770
È inoltre possibile aggiungere metodi.

00:14.770 --> 00:17.460
In realtà abbiamo il metodo del costruttore.

00:17.460 --> 00:19.620
Ma questa è solo una funzione di utilità,

00:19.620 --> 00:22.940
che viene chiamata quando si istanzia la classe.

00:22.940 --> 00:25.584
Ricordate che in passato avevamo solo funzioni costruttore,

00:25.584 --> 00:28.100
ora abbiamo questo zucchero sintattico ma abbiamo ancora

00:28.100 --> 00:30.460
la funzione construct a che possiamo aggiungere per

00:30.460 --> 00:33.300
eseguire qualsiasi codice di inizializzazione.

00:33.300 --> 00:36.350
Si potrebbero anche aggiungere un paio di funzioni o metodi

00:36.350 --> 00:38.600
che vengono poi chiamati e che possono essere

00:38.600 --> 00:40.980
richiamati sull'oggetto creato.

00:40.980 --> 00:44.000
Per esempio, un metodo di descrizione qui nella nostra

00:44.000 --> 00:46.000
classe di dipartimento.

00:46.000 --> 00:47.994
Ora, un metodo viene aggiunto in

00:47.994 --> 00:49.382
questo modo, il nome del

00:49.382 --> 00:53.270
metodo, poi niente due punti, niente segno di uguale, invece,

00:53.270 --> 00:56.090
parentesi e poi parentesi graffe.

00:56.090 --> 00:59.070
Le parentesi accettano tutti gli argomenti necessari.

00:59.070 --> 01:00.780
Diciamo che qui non ce n'è bisogno,

01:00.780 --> 01:03.330
altrimenti si potrebbero aggiungere dei parametri

01:03.330 --> 01:05.150
come in una normale funzione.

01:05.150 --> 01:07.280
In genere, però, è sempre necessario

01:07.280 --> 01:10.000
un corpo di funzione o un corpo di metodo tra

01:10.000 --> 01:12.020
le parentesi graffe.

01:12.020 --> 01:14.693
Qui si definisce la logica del metodo.

01:15.580 --> 01:19.570
E qui si potrebbe inserire il nome del dipartimento

01:19.570 --> 01:22.410
con un po' di informazioni in più.

01:22.410 --> 01:26.230
Naturalmente possiamo farlo qui con la console. ad esempio, il reparto,

01:26.230 --> 01:30.620
i due punti e poi forse il nome.

01:30.620 --> 01:32.100
Tuttavia, questo non funzionerebbe.

01:32.100 --> 01:34.570
Questo cercherà il nome di una variabile,

01:34.570 --> 01:37.710
che deve esistere all'interno del metodo descritto o

01:37.710 --> 01:40.860
all'esterno della classe come variabile globale.

01:40.860 --> 01:42.470
E come vedete se scegliesse age,

01:42.470 --> 01:44.433
otterrei un errore per name Non lo faccio,

01:44.433 --> 01:46.540
non lo ottengo perché in realtà c'è una variabile

01:46.540 --> 01:50.100
name globale nel browser nell'oggetto window.

01:50.100 --> 01:53.030
Tuttavia, questo non si riferirebbe a questa proprietà

01:53.030 --> 01:57.130
name, ma a una variabile name globale esterna a questa classe.

01:57.130 --> 01:59.599
Per fare riferimento a una proprietà o a un metodo

01:59.599 --> 02:01.930
della classe dall'interno della stessa, dobbiamo

02:01.930 --> 02:03.590
usare la parola chiave this, come

02:03.590 --> 02:05.630
facciamo qui nel costruttore.

02:05.630 --> 02:08.980
In genere si fa riferimento all'istanza concreta

02:08.980 --> 02:12.400
di questa classe che è stata creata.

02:12.400 --> 02:14.240
Con la notazione a punti, possiamo

02:14.240 --> 02:16.600
accedere a tutte le proprietà e ai metodi di

02:16.600 --> 02:17.650
questa istanza.

02:17.650 --> 02:19.555
In questo caso, questo. nome.

02:19.555 --> 02:24.555
Quindi se ora, laggiù, chiamo la contabilità. descrivere in questo modo.

02:24.583 --> 02:28.110
La parola chiave this, quando viene eseguita, farà riferimento

02:28.110 --> 02:30.920
all'oggetto contabile concreto costruito

02:30.920 --> 02:33.730
sulla base di questa classe.

02:33.730 --> 02:35.530
Quindi, se ora lo salvo e lo ricarico,

02:35.530 --> 02:38.570
dovremmo vedere questo risultato, che ovviamente presenta

02:38.570 --> 02:40.420
un errore di battitura, ma in generale

02:40.420 --> 02:42.110
funziona.

02:42.110 --> 02:43.944
Correggiamo ora il refuso.

02:43.944 --> 02:46.190
Ecco come aggiungere un metodo.

02:46.190 --> 02:48.166
Ora una parola importante su questa parola chiave.

02:48.166 --> 02:50.600
Come probabilmente sapete, se avete lavorato

02:50.600 --> 02:54.890
un po' con JavaScript, la parola chiave this può essere complicata.

02:54.890 --> 02:56.090
Per esempio, se

02:56.090 --> 03:00.090
aggiungo un altro oggetto qui, copia della contabilità,

03:01.480 --> 03:03.350
e questo è il nostro oggetto

03:03.350 --> 03:06.430
che ha solo il metodo describe e oso puntare

03:06.430 --> 03:11.270
alla contabilità. descrivere.

03:11.270 --> 03:15.470
Poi se chiamo accountingcopy. descrivere come metodo, cosa

03:15.470 --> 03:17.150
pensate che accadrà?

03:17.150 --> 03:19.200
Credi che otterremo un errore?

03:19.200 --> 03:21.200
Non otteniamo alcun errore di compilazione,

03:21.200 --> 03:22.927
ma la compilazione va benissimo.

03:22.927 --> 03:26.360
Ma in fase di esecuzione, vediamo un dipartimento non definito.

03:26.360 --> 03:28.780
Il motivo è che sto aggiungendo una proprietà

03:28.780 --> 03:32.010
describe a questo oggetto, che viene creato con l'oggetto

03:32.010 --> 03:34.040
letterale, non basato su questa

03:34.040 --> 03:37.888
classe, ma solo come oggetto fittizio, non basato su alcuna

03:37.888 --> 03:41.420
classe specifica definita.

03:41.420 --> 03:44.360
Il valore di questa proprietà describe

03:44.360 --> 03:49.000
è un puntatore al metodo describe del mio oggetto contabile.

03:49.000 --> 03:52.168
Quindi sto indicando questo metodo per trovare

03:52.168 --> 03:54.690
questo oggetto concreto.

03:54.690 --> 03:56.240
Non lo sto eseguendo.

03:56.240 --> 03:57.723
Quindi non passo il valore dell'esecuzione

03:57.723 --> 04:00.410
di questa funzione alla descrizione.

04:00.410 --> 04:04.090
In realtà sto passando la funzione stessa da descrivere qui.

04:04.090 --> 04:06.430
Quindi, quando chiamo describe qui sulla copia,

04:06.430 --> 04:08.950
il metodo viene effettivamente eseguito e tutto funziona

04:08.950 --> 04:10.440
correttamente.

04:10.440 --> 04:13.690
Il problema è che quando questo metodo viene eseguito,

04:13.690 --> 04:17.040
non farà riferimento all'oggetto di cui il metodo faceva

04:17.040 --> 04:19.170
parte in origine, quindi non all'oggetto

04:19.170 --> 04:21.140
contabile.

04:21.140 --> 04:22.350
Invece, questo, e questa

04:22.350 --> 04:25.050
è una buona regola empirica che si può memorizzare,

04:25.050 --> 04:27.900
si riferisce tipicamente alla cosa che è responsabile

04:27.900 --> 04:29.650
della chiamata di un metodo.

04:29.650 --> 04:32.190
E la responsabilità di chiamare il metodo describe,

04:32.190 --> 04:34.880
in questo caso, è la copia contabile.

04:34.880 --> 04:39.160
Perché chiamiamo descrivere sulla copia contabile.

04:39.160 --> 04:42.320
Quindi si riferirà alla cosa davanti al punto qui, che è

04:42.320 --> 04:43.980
la copia della contabilità.

04:43.980 --> 04:47.530
Si tratta però di un oggetto che non ha la proprietà name.

04:47.530 --> 04:49.678
Quindi, quando accedo a questo. ricevo un errore

04:49.678 --> 04:53.968
perché questo non fa riferimento a un oggetto con

04:53.968 --> 04:56.610
una proprietà name.

04:56.610 --> 04:59.220
Quindi il nome ci rende davvero indefiniti.

04:59.220 --> 05:02.260
Ecco perché ottengo questo strano risultato.

05:02.260 --> 05:04.310
È una cosa che bisogna tenere presente,

05:04.310 --> 05:07.470
non solo in TypeScript, ma anche in JavaScript.

05:07.470 --> 05:09.540
E naturalmente può accadere

05:09.540 --> 05:11.500
anche in TypeScript.

05:11.500 --> 05:13.940
Ora, per ovviare al problema "this",

05:13.940 --> 05:16.660
si può aggiungere un parametro al metodo

05:16.660 --> 05:18.150
describe, chiamato

05:18.150 --> 05:19.730
this.

05:19.730 --> 05:21.380
Si tratta di un parametro speciale,

05:21.380 --> 05:25.334
un'istruzione speciale compresa da TypeScript.

05:25.334 --> 05:28.430
Se si aggiunge un parametro chiamato this qui,

05:28.430 --> 05:31.420
che non è realmente un parametro previsto,

05:31.420 --> 05:36.010
si può comunque chiamare describe senza passare alcun valore.

05:36.010 --> 05:38.476
Invece, questo viene interpretato

05:38.476 --> 05:42.980
da TypeScript come un suggerimento a cui riferirsi.

05:42.980 --> 05:45.960
Ora è importante assegnare un tipo a questo elemento.

05:45.960 --> 05:48.810
E il tipo qui, in questo caso, dovrebbe essere il

05:48.810 --> 05:51.780
nostro tipo di classe, quindi il dipartimento.

05:51.780 --> 05:53.840
Quello che voglio dire è che quando

05:53.840 --> 05:56.250
describe viene eseguito all'interno

05:56.250 --> 05:59.375
di describe, quindi in questo caso qui, dovrebbe

05:59.375 --> 06:02.550
sempre fare riferimento a un'istanza basata sulla

06:02.550 --> 06:05.040
classe del dipartimento.

06:05.040 --> 06:09.160
Quindi un oggetto che alla fine sarà di tipo dipartimento.

06:09.160 --> 06:12.370
E quindi ora otteniamo un errore laggiù, otteniamo

06:12.370 --> 06:14.140
un errore qui, perché quello

06:14.140 --> 06:16.012
che abbiamo qui è che quando

06:16.012 --> 06:19.800
chiamiamo describe qui su accounting copy, non lo stiamo

06:19.800 --> 06:24.100
chiamando su un'istanza di department.

06:24.100 --> 06:26.350
Pertanto, questo sarà violato.

06:26.350 --> 06:29.540
In questo caso, non farà riferimento a un

06:29.540 --> 06:32.250
oggetto di tipo dipartimento.

06:32.250 --> 06:34.690
Quindi aggiungiamo un po' di sicurezza di

06:34.690 --> 06:36.920
tipo in più, aggiungendo questo parametro

06:36.920 --> 06:39.450
fittizio, perché ora se provo a salvarlo, ottengo

06:39.450 --> 06:42.480
un errore relativo a questa riga qui.

06:42.480 --> 06:44.950
Perché ora, in effetti, si potrebbe eseguire del codice

06:44.950 --> 06:47.030
che non funzionerebbe come previsto.

06:47.030 --> 06:49.260
Quindi dobbiamo risolvere questo problema,

06:49.260 --> 06:51.140
per esempio aggiungendo una proprietà

06:52.040 --> 06:55.290
name, perché ora TypeScript vede Ok, l'oggetto su cui

06:55.290 --> 06:57.702
si sta chiamando describe, ora ha una proprietà

06:57.702 --> 07:02.702
name, proprio come ci si aspetta che abbia, perché è basato sull'oggetto department,

07:03.840 --> 07:08.070
che ha anch'esso una proprietà name.

07:08.070 --> 07:10.790
Quindi ora TypeScript sarebbe contento perché abbiamo

07:10.790 --> 07:12.270
aggiunto il nome.

07:12.270 --> 07:14.934
Se lo rimuovo, viene restituito l'errore

07:14.934 --> 07:17.277
con il nome, ma questo funziona ed evita

07:17.277 --> 07:19.750
l'output indefinito di prima.

07:19.750 --> 07:22.770
È quindi importante capire questo aspetto.

07:22.770 --> 07:26.140
È importante essere consapevoli di questo miglioramento che si può

07:26.140 --> 07:28.410
aggiungere al codice per assicurarsi di catturare

07:28.410 --> 07:31.190
comportamenti indesiderati come quelli che si sono verificati

07:31.190 --> 07:32.993
in precedenza.
