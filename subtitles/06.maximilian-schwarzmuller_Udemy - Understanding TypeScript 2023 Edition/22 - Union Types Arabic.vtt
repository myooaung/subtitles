WEBVTT

00:02.130 --> 00:02.963
المدرب: لذلك قمنا بتغطية

00:02.963 --> 00:05.180
نوعين من الأنواع الأساسية التي يعرفها TypeScript.

00:05.180 --> 00:06.590
الآن دعنا ننتقل.

00:06.590 --> 00:09.140
لذلك ، سأعيد تسمية التطبيق. ts هنا لـ objs-arrays-enums

00:09.140 --> 00:11.670
، أو أيًا كان ما تريد تسميته ، بحيث لا يزال لدينا

00:11.670 --> 00:12.750
هذا الملف ، لكنني سأقوم

00:12.750 --> 00:17.130
بإنشاء تطبيق جديد تمامًا.

00:17.130 --> 00:17.130
ts

00:17.130 --> 00:18.860
حتى يكون لدينا ملف فارغ مرة أخرى

00:18.860 --> 00:20.500
يمكننا العمل فيه.

00:20.500 --> 00:22.550
الآن في هذا الملف ، أريد الغوص في

00:22.550 --> 00:25.790
نوع آخر مثير للاهتمام ستجده في TypeScript.

00:25.790 --> 00:28.640
وهذا هو نوع الاتحاد.

00:28.640 --> 00:30.190
الآن ما هذا؟

00:30.190 --> 00:33.000
دعنا نعود إلى وظيفة الإضافة ، التي كتبناها

00:33.000 --> 00:34.490
سابقًا ، سأقوم بنسخها ونقلها

00:34.490 --> 00:37.270
إلى التطبيق. ts.

00:37.270 --> 00:39.190
تخلص من هذا التعليق هنا ، وهنا

00:39.190 --> 00:42.940
أضف ، دعنا نغلق الأساسيات. حتى نتخلص من هذا

00:42.940 --> 00:44.170
الخطأ.

00:44.170 --> 00:47.970
هنا بالإضافة إلى ذلك ، أريد الآن أن أكون أكثر مرونة

00:47.970 --> 00:49.920
فيما يتعلق بما نقبله هنا.

00:49.920 --> 00:52.570
سأتخلص أيضًا من showResult والعبارة

00:52.570 --> 00:54.370
، لست بحاجة إلى ذلك.

00:54.370 --> 00:55.690
والشيء الوحيد الذي أريد

00:55.690 --> 00:58.590
القيام به هو أنني أريد حساب نتيجة وإعادتها.

00:58.590 --> 01:01.960
لكني أريد أن أكون أكثر مرونة فيما يتعلق بالمدخلات.

01:01.960 --> 01:06.045
في السابق ، تأكدنا من أننا نعمل فقط مع الأرقام.

01:06.045 --> 01:09.357
لنفترض الآن أننا قمنا بالفعل بتسمية هذا

01:09.357 --> 01:13.190
الجمع ويجب أن يعمل مع كل من الأرقام والسلاسل.

01:13.190 --> 01:15.710
لأنه اتضح أنه يمكننا الجمع بين كل من الأرقام

01:15.710 --> 01:18.595
والسلاسل باستخدام عامل التشغيل الإضافي هذا

01:18.595 --> 01:21.650
، فإن الاختلاف الوحيد هو أنه في أحد السيناريوهات

01:21.650 --> 01:24.030
، نحصل على رقم نتيجة لذلك ، في السيناريو

01:24.030 --> 01:27.120
الآخر نحصل على سلسلة متسلسلة ، كما رأينا بالفعل

01:27.120 --> 01:30.150
في وقت مبكر في هذه الوحدة.

01:30.150 --> 01:32.040
لكنني الآن أريد السماح بهذا

01:32.040 --> 01:33.950
السلوك ، لأنه يمكن أن يكون لديك

01:33.950 --> 01:36.740
تطبيق حيث تريد الحصول على وظيفة تجميع مرنة

01:36.740 --> 01:38.963
تعمل مع الأرقام والسلاسل.

01:39.830 --> 01:42.360
لذلك سأقوم أيضًا بتسمية هذا الإدخال

01:42.360 --> 01:47.340
1 هنا ، وهذا الإدخال 2 ، ودمج هذين الإدخالين الآن.

01:47.340 --> 01:49.740
لكن سيكون لدينا مشكلة واحدة بالطبع ،

01:49.740 --> 01:53.180
الآن قمنا بتعيين كلا البارامترات لتكون أرقامًا.

01:53.180 --> 01:56.050
هذا يعني أنه يمكننا استدعاء هذه الوظيفة ، طالما

01:56.050 --> 01:58.190
أننا نريد التعامل مع الأرقام.

01:58.190 --> 01:59.130
لنفترض في الأسفل

01:59.130 --> 02:01.640
، أننا ننشئ ثابتًا جديدًا يجمع الأعمار.

02:02.931 --> 02:04.690
وهناك أسمي الدمج

02:04.690 --> 02:09.602
والمرور في 30 و 26 هنا كأعمار في أي تطبيق

02:09.602 --> 02:12.000
نقوم ببنائه.

02:12.000 --> 02:15.014
آخر بعد سجل وحدة التحكم مجتمعة الأعمار ، حسنًا

02:15.014 --> 02:17.240
، لا ينبغي أن يكون مفاجئًا جدًا أنه

02:17.240 --> 02:19.830
إذا قمنا الآن بتجميع هذا الملف هنا ، ثم أعدنا

02:19.830 --> 02:22.360
تحميل هذه الصفحة ، فسنحصل على 56.

02:22.360 --> 02:24.690
إذن هذا يعمل ، نحصل على هذا الرقم.

02:24.690 --> 02:26.710
لكن بالطبع ، لدينا مشكلة إذا

02:26.710 --> 02:28.838
حاولنا إنشاء سلسلة هنا.

02:28.838 --> 02:31.610
الجمع بين الأسماء ، على سبيل المثال.

02:31.610 --> 02:36.033
إذا حاولت دمج Max و Anna هنا ، حسنًا ، سنحصل على الفور

02:37.230 --> 02:39.630
على خطأ هنا يفيد بأن Max غير قابل

02:39.630 --> 02:42.320
للتخصيص لكتابة رقم لأن هذا بالطبع

02:42.320 --> 02:44.350
عبارة عن سلسلة.

02:44.350 --> 02:45.790
الآن بالطبع ، يمكننا تغيير

02:45.790 --> 02:47.750
هذا لقبول السلاسل بدلاً من الأرقام

02:47.750 --> 02:50.130
، ولكن الآن سيفشل استدعاء الوظيفة الأول.

02:50.130 --> 02:52.750
وهذا هو المكان الذي يمكن أن تساعدنا فيه أنواع النقابات.

02:52.750 --> 02:55.692
إذا كان لدينا مكان ما في تطبيقنا

02:55.692 --> 02:58.810
، سواء كان ذلك معلمة دالة أو ثابتًا

02:58.810 --> 03:01.700
أو متغيرًا نستخدمه في مكان ما ،

03:01.700 --> 03:05.030
حيث نقبل نوعين مختلفين من القيم.

03:05.030 --> 03:07.410
حسنًا ، يمكن أن يساعدنا نوع الاتحاد.

03:07.410 --> 03:09.800
لإخبار TypeScript بأننا

03:09.800 --> 03:12.690
على ما يرام مع أي رقم أو سلسلة

03:12.690 --> 03:14.220
، نستخدم الرقم

03:14.220 --> 03:17.710
ثم رمز الأنبوب هنا ، ثم النوع الآخر

03:17.710 --> 03:20.660
الذي نقبله أيضًا.

03:20.660 --> 03:22.340
ويمكن أن يكون لديك أكثر

03:22.340 --> 03:25.220
من نوعين ، يمكنك قبول أي عدد تريده هنا.

03:25.220 --> 03:27.050
لذا هنا ، أنا بحاجة إلى اثنين

03:27.050 --> 03:28.880
فقط ، وهذا هو تعيين النوع المتاح

03:28.880 --> 03:31.720
الذي سأذهب معه ، الرقم أو السلسلة.

03:31.720 --> 03:33.690
تلقيت الآن خطأً هنا ، وهو أنه

03:33.690 --> 03:35.930
لا يمكن تطبيق عامل الجمع على أنواع

03:35.930 --> 03:39.120
السلسلة أو الرقم والسلسلة أو الرقم.

03:39.120 --> 03:41.500
هذا في الواقع ليس صحيحًا تمامًا ، يجب

03:41.500 --> 03:44.350
أن يعمل هذا ، لأنه يمكننا استخدام عامل الجمع

03:44.350 --> 03:46.670
مع كل من الأرقام والسلاسل.

03:46.670 --> 03:49.600
لكن TypeScript يرى فقط أن لدينا نوعًا موحدًا

03:49.600 --> 03:52.540
هنا ، ولا يقوم بتحليل ما هو موجود في نوع الاتحاد

03:52.540 --> 03:56.010
، إنه يرى فقط ، "حسنًا ، أنت تتوقع أنواعًا متعددة.

03:56.010 --> 03:57.530
ربما يتضمن ذلك الأنواع التي

03:57.530 --> 03:59.460
لا يمكنني فيها استخدام عامل التشغيل

03:59.460 --> 04:01.640
plus ، ومن ثم سأشتكي هنا. الآن لحسن الحظ ، يمكننا حل هذه المشكلة بالرغم من ذلك.

04:01.640 --> 04:05.410
يمكننا إضافة التحقق من نوع وقت التشغيل الخاص

04:05.410 --> 04:07.910
بنا هنا ومعرفة ما إذا كان نوع

04:07.910 --> 04:11.240
الإدخال 1 يساوي الرقم وما إذا كان typeof

04:12.750 --> 04:15.170
input2 يساوي عددًا ، ثم نقل هذا

04:16.530 --> 04:21.283
الحساب إلى هناك ، والآن هناك تحسين واحد فقط ، فلنقم بإنشاء

04:24.100 --> 04:26.410
النتيجة كمتغير متغير إذا تحقق

04:26.410 --> 04:28.510
، بسبب تحديد نطاق القفل ،

04:28.510 --> 04:33.880
بحيث يكون هذا متغيرًا متاحًا في الوظيفة بأكملها ، ثم قم فقط بتعيين

04:33.880 --> 04:37.873
قيمة جديدة هناك.

04:37.873 --> 04:40.310
والآن نتحقق هنا مما إذا كان لدينا رقمان.

04:40.310 --> 04:42.818
وبالتالي يعرف TypeScript أنه هنا

04:42.818 --> 04:45.890
، سيكون كل من الإدخال 1 والمدخل 2 أرقامًا.

04:45.890 --> 04:49.790
الآن دعنا نضيف علامة أخرى هنا.

04:49.790 --> 04:53.900
وهناك يمكننا تعيين نتيجة مساوية لـ input1. tostring ، وتحويل هذا بشكل صريح

04:53.900 --> 04:56.913
إلى سلسلة ،

04:58.550 --> 05:00.570
و input2. إلى سلسلة.

05:00.570 --> 05:02.880
وسيكون هذا أيضًا جيدًا بالنسبة

05:02.880 --> 05:04.160
إلى TypeScript و JavaScript

05:04.160 --> 05:05.700
، لأنه يمكننا ربط سلسلتين.

05:05.700 --> 05:08.220
الآن لدينا نفس العملية الحسابية تقريبًا

05:08.220 --> 05:10.800
، لكننا أوضحنا أنه هنا ، سنعمل دائمًا

05:10.800 --> 05:12.110
مع الأرقام ، هنا سنعمل

05:12.110 --> 05:13.590
دائمًا مع السلاسل ، ثم

05:13.590 --> 05:15.730
نعيد النتيجة.

05:15.730 --> 05:17.490
والآن بعد ذلك ، إذا قمنا

05:17.490 --> 05:20.870
بالتحكم في تسجيل الأسماء المجمعة هناك ، وقمنا

05:20.870 --> 05:25.350
بتجميع هذا الملف ، فسنرى أنه بمجرد أن نعيد زيارة صفحتنا ، حصلنا

05:25.350 --> 05:27.210
على الأرقام المجمعة هناك

05:27.210 --> 05:29.278
، والتي تمت إضافتها معًا ومن

05:29.278 --> 05:33.150
ثم نحصل على رقم نتيجة لذلك ، واثنين من الأسماء المدمجة

05:33.150 --> 05:35.090
هنا.

05:35.090 --> 05:36.850
هذه هي الطريقة التي يمكننا بها استخدام

05:36.850 --> 05:40.830
أنواع الاتحاد لنكون أكثر مرونة فيما يتعلق بما نقوم به في وظيفة ، على سبيل المثال

05:40.830 --> 05:43.770
، أو في أي مكان آخر في التعليمات البرمجية الخاصة بنا.

05:43.770 --> 05:45.920
لن يكون التحقق من نوع وقت التشغيل الإضافي

05:45.920 --> 05:49.520
مطلوبًا دائمًا عند العمل مع أنواع الاتحاد ، ولكن غالبًا ما

05:49.520 --> 05:51.230
يكون ذلك لأنه مع أنواع الاتحاد

05:51.230 --> 05:54.090
، يمكنك أن تكون أكثر مرونة في ، على سبيل المثال ،

05:54.090 --> 05:56.350
المعلمات التي تقبلها ، ولكن بعد ذلك قد

05:56.350 --> 05:58.170
يكون لديك منطق مختلف في تعتمد على

05:58.170 --> 06:00.940
النوع الدقيق الذي تحصل عليه.

06:00.940 --> 06:03.730
بحيث تكون وظيفتك قادرة على العمل مع أنواع

06:03.730 --> 06:05.640
متعددة من القيم ولكنها تقوم

06:05.640 --> 06:07.810
بأشياء مختلفة قليلاً بناءً على

06:07.810 --> 06:10.320
النوع الذي تحصل عليه.

06:10.320 --> 06:12.410
في كثير من الأحيان ، قد تحتاج إلى فحص

06:12.410 --> 06:15.270
وقت التشغيل عند العمل مع أنواع الاتحاد ، لكنك

06:15.270 --> 06:16.700
لن تحتاجه دائمًا.

06:16.700 --> 06:18.490
ستواجه بالتأكيد أيضًا مواقف

06:18.490 --> 06:20.900
في برامج TypeScript حيث يمكنك استخدام

06:20.900 --> 06:24.060
نوع union بدون التحقق من نوع وقت التشغيل.

06:24.060 --> 06:25.870
يعتمد الأمر حقًا على المنطق الذي تكتبه.
