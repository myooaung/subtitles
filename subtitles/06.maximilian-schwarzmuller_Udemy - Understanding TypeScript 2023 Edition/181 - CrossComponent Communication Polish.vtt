WEBVTT

00:02.230 --> 00:05.130
Wykładowca: Więc teraz chcemy pobrać nasz wprowadzony

00:05.130 --> 00:07.960
tutaj tekst z komponentu NewTodo do komponentu app.

00:07.960 --> 00:09.690
Dlaczego do komponentu aplikacji?

00:09.690 --> 00:11.160
Ponieważ jest to nasz komponent,

00:11.160 --> 00:13.610
który ma bezpośrednie połączenie zarówno

00:13.610 --> 00:16.340
z NewTodo jak i z komponentem TodoList.

00:16.340 --> 00:19.320
Więc, tutaj chcę dodać nową funkcję i nazwę ją todoAddHandler,

00:20.800 --> 00:25.393
nazwa zależy od ciebie, po prostu lubię używać konwencji posiadania handler

00:25.393 --> 00:27.990
na końcu, jeśli jest to funkcja, która uruchamia

00:27.990 --> 00:31.390
się na zdarzeniu.

00:31.390 --> 00:34.330
I w tym miejscu spodziewam się otrzymać tekst, jako

00:34.330 --> 00:37.970
string, to nasza funkcja więc możemy się tego spodziewać.

00:37.970 --> 00:40.720
I ja wtedy chcemy dodać to jako todo tutaj.

00:40.720 --> 00:42.270
Teraz, oczywiście, ponieważ znasz

00:42.270 --> 00:45.230
React wiesz, że aktualizacja tej tablicy sama w sobie nie zrobi sztuczki,

00:45.230 --> 00:47.440
to nie zrenderuje tego komponentu, więc będziemy musieli

00:47.440 --> 00:49.360
użyć trochę zarządzania stanem tutaj, aby to

00:49.360 --> 00:53.040
zadziałało, zanim jednak to zrobimy, upewnijmy się, że przynajmniej dostaniemy wartość

00:53.040 --> 00:54.750
do tej funkcji.

00:54.750 --> 00:57.460
Zalogujmy więc tekst tutaj, a następnie możemy skupić się

00:57.460 --> 01:00.133
na jego części zarządzania stanem jako drugim kroku.

01:01.000 --> 01:03.020
Aby to uzyskać, musimy upewnić

01:03.020 --> 01:05.850
się, że funkcja todoAddHandler może być

01:05.850 --> 01:09.050
wywołana z wnętrza komponentu NewTodo, ponieważ

01:09.050 --> 01:12.113
tam właśnie dodajemy todo na końcu.

01:13.090 --> 01:15.370
Jak sprawić, by ta funkcja była wywoływana

01:15.370 --> 01:17.860
z wnętrza komponentu?

01:17.860 --> 01:22.300
Do tego komponentu przekazujemy wskaźnik na tę funkcję.

01:22.300 --> 01:25.640
Więc tutaj możemy dodać nazwę właściwości, onAddTodo, i możesz

01:25.640 --> 01:27.280
ją nazwać jakkolwiek chcesz, ja

01:27.280 --> 01:28.560
po prostu nazwałem ją tak,

01:28.560 --> 01:32.030
ponieważ to w zasadzie stanie się po zdarzeniu, zdarzeniu, które

01:32.030 --> 01:34.600
kontrolujemy oczywiście, ale nadal.

01:34.600 --> 01:38.030
I tutaj chcę przekazać todoAddHandler, więc przekazuję

01:38.030 --> 01:40.600
wskaźnik na tę funkcję, nie wykonuję jej

01:40.600 --> 01:42.120
tutaj, tylko przekazuję

01:42.120 --> 01:44.620
wskaźnik na tę funkcję, do onAddTodo,

01:44.620 --> 01:49.240
żeby zamiast NewTodo na propsie, który możemy tutaj dostać, wywołać

01:49.240 --> 01:56.220
to, żebyśmy mogli wywołać props.

01:56.220 --> 01:56.220
onAddTodo

01:56.220 --> 01:59.640
tutaj i przekazuje wpisany tekst, taki jest zamysł, Ale oczywiście

01:59.640 --> 02:01.730
TypeScriptowi się to nie podoba, bo

02:01.730 --> 02:03.440
nie wie, że na naszym propsie tutaj

02:03.440 --> 02:08.240
będzie prop onAddTodo i jak taki prop miałby wyglądać.

02:08.240 --> 02:11.670
Tak więc, podobnie jak w TodoList, musimy ustawić interfejs

02:11.670 --> 02:14.540
lub po prostu definicję typu naszych rekwizytów.

02:14.540 --> 02:18.200
Więc, przejdźmy do NewTodo i może, znowu, dodaj interfejs,

02:18.200 --> 02:20.820
możesz również dodać typ kursu i zrobię to

02:20.820 --> 02:23.060
tutaj, aby wymieszać rzeczy.

02:23.060 --> 02:25.380
Typowo zawsze poszedłbym na interfejs, ale

02:25.380 --> 02:27.660
użycie typu jest również w porządku.

02:27.660 --> 02:30.493
Tak więc, aby użyć tutaj typu możemy nazwać

02:31.357 --> 02:33.820
go NewTodoProps i typ jest typem obiektu,

02:33.820 --> 02:36.830
gdzie chcę mieć prop onAddTodo, a ten z kolei będzie

02:36.830 --> 02:39.120
typem funkcji, będzie wskazywał na

02:39.120 --> 02:40.753
funkcję.

02:41.720 --> 02:44.290
Będziesz definiował typy funkcji takie jak ta, jak

02:44.290 --> 02:46.760
się nauczyłeś, będzie to funkcja, która nic nie

02:46.760 --> 02:48.850
zwraca, ale która oczekuje jednego obwodu

02:48.850 --> 02:51.410
i będzie to tekst, który wpisał użytkownik.

02:51.410 --> 02:54.023
Tak więc tekst Todo, który jest typu string, tego

02:55.120 --> 02:57.123
właśnie oczekuje ta funkcja.

02:58.920 --> 03:01.770
Teraz ustawmy to na ten typ generyczny tutaj i wskażmy

03:01.770 --> 03:03.103
na NewTodoProps.

03:04.510 --> 03:08.620
A dzięki temu możemy wywołać onAddTodo i przekazać ciąg znaków.

03:08.620 --> 03:11.470
I jeśli próbowałby przekazać tutaj liczbę, na przykład,

03:11.470 --> 03:14.730
my, oczywiście, otrzymalibyśmy błąd, ponieważ wyraźnie zdefiniowaliśmy,

03:14.730 --> 03:17.590
że argument musi być ciągiem tam na górze.

03:17.590 --> 03:18.733
Więc, przywróćmy to.

03:20.550 --> 03:24.630
Dzięki temu, jeśli znowu wprowadzimy nowy cel, zakończymy go w ciągu

03:24.630 --> 03:27.150
jednego miesiąca, znowu widzimy tutaj log,

03:27.150 --> 03:28.690
ale teraz pochodzi on z komponentu

03:28.690 --> 03:30.750
aplikacji, jak możesz wyraźnie powiedzieć,

03:30.750 --> 03:34.170
ponieważ dodaliśmy ten log tutaj.

03:34.170 --> 03:37.380
Więc ta komunikacja między komponentem NewTodo a komponentem

03:37.380 --> 03:39.480
aplikacji tutaj działa.

03:39.480 --> 03:42.750
Z tego powodu, zaimplementujmy tutaj zarządzanie stanem i, ponownie,

03:42.750 --> 03:44.160
jest to również coś, co możesz

03:44.160 --> 03:46.850
wypróbować na własną rękę, jeśli chcesz, aby upewnić

03:46.850 --> 03:49.670
się, że renderujemy todos w stanie, tak, że za każdym razem,

03:49.670 --> 03:52.170
gdy aktualizujemy nasze todos, również renderujemy

03:52.170 --> 03:54.460
ten komponent.

03:54.460 --> 03:56.263
Zróbmy to w następnym wykładzie.
