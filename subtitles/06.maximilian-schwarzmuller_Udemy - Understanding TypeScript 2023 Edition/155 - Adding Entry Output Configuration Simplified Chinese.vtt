WEBVTT

00:01.538 --> 00:07.086
解说员：首先, 让我们转到tsconfig｡

00:07.086 --> 00:07.086
json文件,

00:07.086 --> 00:09.965
因为我们需要确保配置了某些内容｡

00:09.965 --> 00:12.780
确保此处的目标实际上设置为es5或es6,

00:12.780 --> 00:16.286
这由您决定｡

00:16.286 --> 00:19.423
这取决于您计划支持哪些浏览器｡ 

00:19.423 --> 00:26.543
因为在最后webpack和类型加载器将使用这个目标来决定你的代码应该如何转换｡

00:26.543 --> 00:32.480
您的代码类型是否应该转换为同样可以在旧版浏览器中运行的Java脚本代码？

00:32.480 --> 00:37.811
或者像es6一样, 只在更新的浏览器上运行的代码？

00:37.811 --> 00:44.110
然后应将模块设置为es2015或es6, 以便设置正确｡

00:44.110 --> 00:49.110
此外, 您还需要验证您的outDir｡ 

00:50.560 --> 00:53.520
我会把它保存到dist, 但是如果你想把你的代码编译到一个不同的目录,

00:53.520 --> 00:55.997
你可以改变它｡

00:55.997 --> 00:59.378
你不需要根目录了, 因为webpack将接管那里,

00:59.378 --> 01:05.014
webpack将确定你的根文件在哪里｡

01:05.014 --> 01:07.660
因此, 一般来说, 这些设置应该是好的｡ 

01:07.660 --> 01:09.525
如果有些事情没有按照我们希望的方式进行,

01:09.525 --> 01:12.487
我们可以在以后对它们进行调整｡

01:12.487 --> 01:19.848
这样, 让我们在tsconfig旁边添加一个新的配置文件｡

01:19.848 --> 01:19.848
json, 这就是网络包｡  配置 js文件中｡ 

01:19.848 --> 01:24.150
请确保您确实这样命名它, 因为这是webpack将自动查找的文件,

01:24.150 --> 01:30.220
它甚至会告诉webpack如何使用我们的项目｡

01:30.220 --> 01:34.568
因为webpack是一个需要配置才能在这里正常工作的工具｡

01:34.568 --> 01:37.568
那么, 我们在这个网络包中做些什么呢？ 配置文件？

01:37.568 --> 01:40.338
此配置文件使用JavaScript,

01:40.338 --> 01:43.288
实际上它使用节点｡ js特征｡ 

01:43.288 --> 01:46.747
所以我们要使用节点｡  js导出语法, 如下所示,

01:46.747 --> 01:50.379
然后导出一个JavaScript对象｡

01:50.379 --> 01:53.538
它将是webpack拾取的配置对象｡ 

01:53.538 --> 01:59.648
如果你以前没见过, 这就是你如何导出节点中的内容｡

01:59.648 --> 01:59.648
js环境中创建｡ 

01:59.648 --> 02:02.877
这里我们导出一个JavaScript对象｡ 

02:02.877 --> 02:05.920
现在webpack需要几条信息｡ 

02:05.920 --> 02:14.585
最重要的是, 它需要知道整个项目从哪个文件开始;你的切入点在哪里｡

02:14.585 --> 02:17.370
在我们的案例中, 这就是应用程序｡  ts文件中｡ 

02:17.370 --> 02:18.922
首先应执行此文件,

02:18.922 --> 02:20.981
然后webpack将查看此文件中的导入,

02:20.981 --> 02:30.219
并转到这些文件, 查看它们的导入以及导入文件的导入, 依此类推｡

02:30.219 --> 02:33.461
直到它知道您的项目最终使用的所有文件｡ 

02:33.461 --> 02:36.201
然后它会检查文件内容, 比如这里的内容,

02:36.201 --> 02:44.290
以及所有文件中的所有内容, 并在ts的帮助下编译它们｡

02:44.290 --> 02:44.290
加载程序包｡ 

02:44.290 --> 02:50.421
现在, 要使webpack在这里正常工作, 您实际上现在应该删除所有｡

02:50.421 --> 02:50.421
js扩展名｡

02:51.598 --> 02:57.885
我们以前需要它, 当我们使用内置在ts中的本机浏览器时｡

02:57.885 --> 02:57.885
模块功能,

02:57.885 --> 03:01.130
但使用webpack时不需要这些扩展｡

03:01.130 --> 03:03.664
因为webpack实际上会自动查找｡  js和某些其他扩展文件｡ 

03:03.664 --> 03:09.270
所以你不应该在这里添加它们, 否则webpack会寻找带有双扩展名的文件,

03:09.270 --> 03:10.716
这是你不想要的｡

03:10.716 --> 03:13.655
所以除去｡  js在这里所有这些导入, 一旦你这样做,

03:13.655 --> 03:21.370
保存所有这些文件, 以确保你的变化被应用｡

03:21.370 --> 03:31.320
现在回到Webpack｡  配置 js, 现在应该在这个导出的对象中添加一个entry属性｡

03:31.320 --> 03:32.740
并指向｡  /src/应用程序｡  在我们的示例中为Ts｡ 

03:32.740 --> 03:37.740
所以在你的项目的根入口文件｡ 

03:38.680 --> 03:42.444
接下来在此处添加一个输出键｡ 

03:42.444 --> 03:45.880
这里的输出现在是一个对象｡ 

03:45.880 --> 03:48.051
在这里我们首先指定文件名｡ 

03:48.051 --> 03:52.998
这将是最终生成的单个JavaScript文件｡

03:52.998 --> 03:57.350
这里我们将它命名为bundle｡  js, 但是你可以给它取任何你想要的名字｡

03:57.350 --> 03:58.788
应用程序 js, 或者任何你想要的｡ 

03:58.788 --> 04:01.709
您也可以在这里添加动态部分,

04:01.709 --> 04:05.171
例如内容散列, 告诉webpack自动为每个构建创建一个唯一的散列,

04:05.171 --> 04:11.829
这可以帮助您在浏览器中进行缓存｡

04:11.829 --> 04:13.578
但同样, 您可以在Webpack文档中了解更多信息｡ 

04:13.578 --> 04:16.229
这里我们不需要它, 所以我们只命名文件包｡  js的｡ 

04:16.229 --> 04:19.779
除了文件名之外, 您还需要指定路径,

04:19.779 --> 04:23.320
输出应写入到该路径｡

04:23.320 --> 04:28.900
当然, 这应该与你在ts中的路径相匹配｡

04:28.900 --> 04:28.900
配置 js文件以避免错误｡ 

04:28.900 --> 04:32.970
所以到了这个文件夹｡ 

04:32.970 --> 04:34.189
现在不像在ts里｡  config, js文件,

04:34.189 --> 04:37.010
您不应该编写｡ /dist在这里｡ 

04:37.010 --> 04:39.819
Webpack需要此处的绝对路径｡ 

04:39.819 --> 04:42.099
我们可以用一个节点来构建一个｡  js模块中｡ 

04:42.099 --> 04:45.669
为此, 我们可以使用节点｡  js import语法,

04:45.669 --> 04:48.880
其中使用了必需的关键字,

04:48.880 --> 04:51.280
并导入path模块｡

04:51.280 --> 04:56.050
您不需要将其安装为库, 因为它是核心节点｡

04:56.050 --> 04:56.050
js模块,

04:56.050 --> 05:02.149
如果您有节点, 则该模块已经存在｡ js安装, 因为我们在前面的课程中已经安装过了｡

05:02.149 --> 05:04.966
现在可以使用path调用resolve方法,

05:04.966 --> 05:11.280
这允许您构建到某个文件夹的绝对路径｡

05:11.280 --> 05:15.320
为此, 我们使用了一个特殊的常量__dirname常量,

05:15.320 --> 05:17.236
它在节点中全局可用｡ js环境中创建｡ 

05:17.236 --> 05:21.150
正如我所说, webpack使用节点 js来执行您的文件｡ 

05:21.150 --> 05:24.692
然后作为第二个参数dist,

05:24.692 --> 05:27.433
最后dist只是构造了一个到dist文件夹的绝对路径,

05:27.433 --> 05:33.190
webpack随后使用该路径在那里写入输出｡

05:33.190 --> 05:35.452
这样你就有了一个入口点和一个输出点,

05:35.452 --> 05:40.743
但是你不告诉webpack如何处理你的TypeScript文件｡

05:40.743 --> 05:42.553
因为默认情况下webpack不知道这一点,

05:42.553 --> 05:45.140
默认情况下它只是一个捆绑器｡

05:45.140 --> 05:51.261
任何额外的功能, 如编译TypeScript到JavaScript必须教webpack｡

05:51.261 --> 05:53.452
下节课我们会讲这个｡ 
