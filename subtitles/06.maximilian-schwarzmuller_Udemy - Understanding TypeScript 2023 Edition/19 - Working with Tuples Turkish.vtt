WEBVTT

00:02.460 --> 00:05.590
-: Yani diziler desteklenir ve sayılar, dizeler, booleonlar,

00:05.590 --> 00:07.620
nesneler ve dizilerle birlikte.

00:07.620 --> 00:11.400
Dizilerindeki nesneler örneğinde öğreneceğiniz gibi, TypeScript'te

00:11.400 --> 00:15.100
desteklenen temel değerler veya değer türleri, JavaScript

00:15.100 --> 00:17.884
nos'ları var, TypeScript çok daha fazla işlev

00:17.884 --> 00:22.720
sunuyor, ancak bu biraz daha gelişmiş, bu yüzden daha sonra buna bir göz atacağız,

00:22.720 --> 00:26.810
ancak önceki derslerde öğreneceklerinizle bu çekirdek türler

00:26.810 --> 00:30.140
bile destekleniyor.

00:30.140 --> 00:33.540
Şimdi TypeScript, örneğin tuple tipi gibi vanilla

00:33.540 --> 00:37.840
Java script'ten bilmediğimiz birkaç yeni kavram, yeni

00:37.840 --> 00:40.300
tipler barındırıyor.

00:40.300 --> 00:44.360
Şimdi tuple'ları diğer programlama dillerinden biliyor olabilirsiniz,

00:44.360 --> 00:46.570
JavaScript'te yoktur.

00:46.570 --> 00:49.570
Örneğin, bu bir tuple'dır ve siz de bunun bir dizi olduğunu

00:49.570 --> 00:52.290
söyleyebilirsiniz. Bu bir dizidir, ancak

00:52.290 --> 00:54.520
sabit uzunlukta bir dizidir ve aslında

00:54.520 --> 00:58.650
sadece sabit uzunlukta değil, aynı zamanda sabit tiptedir.

00:58.650 --> 01:00.730
Peki bu nerede işe yarayabilir?

01:00.730 --> 01:03.350
Diyelim ki burada, kişimizde, aslında

01:03.350 --> 01:07.830
tam olarak iki elemanlı bir dizi olan rol adlı bir dizi

01:07.830 --> 01:11.160
özelliğimiz var, burada birincisi diyelim

01:11.160 --> 01:14.184
ki iki gibi sayısal bir tanımlayıcı ve

01:14.184 --> 01:18.547
ikincisi bir dize tanımlayıcı ve yazar gibi insan tarafından

01:18.547 --> 01:22.765
okunabilir bir açıklama.

01:22.765 --> 01:26.496
Şimdi bu her zaman tam olarak iki öğeye sahip olmalıdır çünkü

01:26.496 --> 01:30.100
yazdığımız bu uygulamadaki bir kullanıcı ya da kişi diyelim

01:30.100 --> 01:32.720
ki yalnızca bir role sahip olabilir ve bir

01:32.720 --> 01:35.185
rol yalnızca iki öğeden oluşur.

01:35.185 --> 01:37.400
Elbette burada bir optik kullanabilirdik,

01:37.400 --> 01:39.090
ancak bazı nedenlerden dolayı,

01:39.090 --> 01:41.744
ilk elemanı her zaman sayısal tanımlayıcı ve ikinci

01:41.744 --> 01:43.118
elemanı her zaman dize tanımlayıcı

01:43.118 --> 01:47.570
veya açıklama veya nasıl adlandırmak isterseniz öyle olan tam olarak iki elemanlı bir

01:47.570 --> 01:50.220
diziye sahip olmak istiyoruz.

01:50.220 --> 01:52.420
Şimdi, bunun üzerine gelirsek TypeScript

01:52.420 --> 01:55.730
aslında daha önce görmediğimiz bu garip türü çıkarır,

01:55.730 --> 01:58.550
Aslında, TypeScript, dizeleri veya sayıları

01:58.550 --> 02:01.250
bile tutabilen bir dizimiz olduğunu anlar, bu

02:01.250 --> 02:03.440
bir birlik türüdür ve bunlara daha sonra

02:03.440 --> 02:06.710
bakacağız. Temel çıkarım, TypeScript'in

02:06.710 --> 02:09.950
bunun bu tür değerlere sahip bir dizi olması gerektiğini

02:09.950 --> 02:11.668
anlamasıdır.

02:11.668 --> 02:14.580
Ölü olan çıkışlar Bu kodu çalıştırabiliriz,

02:14.580 --> 02:18.780
kişi rolü, itme, yönetici.

02:18.780 --> 02:20.250
Şimdi bizim uygulamamız için bu

02:20.250 --> 02:21.970
mantıklı olmayabilir çünkü sadece iki

02:21.970 --> 02:23.960
öğeye ihtiyacımız olduğunu biliyoruz.

02:23.960 --> 02:25.790
TypeScript hala yalnızca iki öğe

02:25.790 --> 02:28.963
istediğimizi bilmiyor. Ayrıca kişi rolünü,

02:28.963 --> 02:33.283
birinci indeksli ikinci öğeyi de bir sayı olacak şekilde

02:33.283 --> 02:35.200
değiştirebiliriz.

02:35.200 --> 02:38.010
TypeScript yalnızca rolün string veya number array

02:38.010 --> 02:42.360
türünde olması gerektiğini bildiği için bu işe yarayacaktır ve bu nedenle burada

02:42.360 --> 02:44.700
ikinci öğeye bir sayı atamaya ve dolayısıyla

02:44.700 --> 02:46.870
onu bir sayıyla değiştirmeye izin verilecektir

02:46.870 --> 02:48.680
çünkü burada genellikle kullanabileceğimiz

02:48.680 --> 02:52.580
türler hakkında bir şeyler söylüyoruz.

02:52.580 --> 02:55.040
Tam olarak bu yapıya sahip olmak istediğimizi biliyoruz.

02:55.040 --> 02:58.094
İki öğe, ilk öğe sayı, ikinci öğe dize, ancak

02:58.094 --> 03:01.770
TypeScript bunu yapmaz. Böyle bir senaryo için bir

03:01.770 --> 03:05.865
tuple mükemmel olurdu. Rol türünü açıkça ayarlayarak

03:05.865 --> 03:10.865
TypeScript'e rolün ne olması gerektiğini söyleyebiliriz.

03:11.010 --> 03:13.230
Burada da TypeScript'in fototipleme

03:13.230 --> 03:16.600
yapmadığı, ancak bizim bunu açıkça geçersiz kılmak istediğimiz

03:16.600 --> 03:19.927
bir örneğimiz var. Şimdi burada, person'dan

03:19.927 --> 03:23.041
sonra iki nokta üst üste koyarak açık bir nesne türü

03:23.041 --> 03:27.023
ekleyebiliriz, ardından küme parantezleri ve ardından isimler

03:27.023 --> 03:31.180
bir dize, yaş bir sayı ve hobiler bir dize dizisi olmalıdır.

03:31.180 --> 03:33.740
Yani hepsi TypeScript tarafından çıkarıldığı gibi.

03:33.740 --> 03:35.401
Yani bunun için bu açık ödevi

03:35.401 --> 03:36.827
istemezdik ve öğrendiğiniz

03:36.827 --> 03:38.789
gibi kötü olurdu.

03:38.789 --> 03:40.470
Ancak şimdi, çıkarımın istediğimiz

03:40.470 --> 03:43.565
şekilde çalışmadığı bir senaryomuz var ve rolü

03:43.565 --> 03:47.510
bir tuple olarak ayarlamak istiyoruz.

03:47.510 --> 03:49.730
Şimdi iki dize dizisi veya sayı dizisi ayarlamak

03:49.730 --> 03:51.660
ya da daha önce burada üçüncü olmayan aynı

03:51.660 --> 03:55.180
türü kullanmak yerine, şimdi özel bir tür kullanabiliriz.

03:55.180 --> 03:56.810
Yine köşeli parantezler kullanıyoruz,

03:56.810 --> 04:01.710
ancak şimdi köşeli parantezlerin içine sayı, ardından virgül ve ardından dize

04:01.710 --> 04:03.637
ekliyoruz.

04:03.637 --> 04:07.340
Şimdi bu, burada bir tuple türünü işaretler.

04:07.340 --> 04:10.729
Tuple, TypeScript'in anladığı özel bir yapıdır, Java'da

04:10.729 --> 04:13.310
komut dosyası normal bir dizi olacaktır, ancak

04:13.310 --> 04:15.750
TypeScript ile geliştirme sırasında, buradaki

04:15.750 --> 04:18.190
gibi kodlarla hata alırız.

04:18.190 --> 04:20.313
Şimdi tuple'lar ne işe yarar?

04:21.620 --> 04:23.564
Buradaki, TypeScript'e, tam olarak

04:23.564 --> 04:27.195
iki öğeli özel bir diziye sahip olmak istediğimi söyler,

04:27.195 --> 04:30.160
çünkü orada tam olarak iki türüm var ve ilk öğe bir

04:30.160 --> 04:32.020
sayı olmalıdır.

04:32.020 --> 04:35.436
İkinci öğe bir string olmalıdır, dolayısıyla

04:35.436 --> 04:39.033
bu kodu burada derlersek, 10'un burada bir tür

04:40.663 --> 04:45.000
olarak atanamayacağına ilişkin bir hata alırım, çünkü

04:45.000 --> 04:48.346
ikinci değer olarak bir string olmasını istiyoruz

04:48.346 --> 04:50.822
ve eğer 10'u burada ikinci bir değer

04:50.822 --> 04:52.660
olarak atarsam, o zaman

04:52.660 --> 04:56.544
açıkça bu kurala uymamış olurum.

04:56.544 --> 05:01.544
Bunu yorumlarsanız ve derlersek, bu çalışır.

05:02.240 --> 05:06.290
Bu biraz garip çünkü burada itme neden işe yarıyor, çünkü hepimiz

05:06.290 --> 05:08.610
rolün tam olarak iki öğeye sahip olması

05:08.610 --> 05:11.901
gerektiğini söylüyoruz, öyleyse neden admin'i burada

05:11.901 --> 05:14.980
rol dizisine itebiliyoruz.

05:14.980 --> 05:19.300
Push aslında tuple'larda izin verilen bir istisnadır.

05:19.300 --> 05:22.410
Ne yazık ki TypeScript bu hatayı yakalayamaz,

05:22.410 --> 05:24.840
ancak en azından burada yanlış bir değer

05:24.840 --> 05:28.570
atamadığımızdan emin olur ve push dışında, uzunlukla

05:28.570 --> 05:31.500
ilgili bazı destekler de alırız.

05:31.500 --> 05:33.671
Eğer bu rolü yeni bir değere ayarlarsak.

05:33.671 --> 05:36.420
Örneğin, boş bir diziye izin verilmez, tam olarak

05:36.420 --> 05:39.710
yukarıda tanımladığımız yapıya sahip bir diziye izin

05:39.710 --> 05:43.510
verilir, Eğer buraya fazladan bir eleman eklersem.

05:43.510 --> 05:45.880
Sonra yine bir hata alırız.

05:45.880 --> 05:49.300
Yani bu şekilde atarsak uzunluk uygulanır, ancak bir itme

05:49.300 --> 05:50.720
vb. için uygulanmaz.

05:50.720 --> 05:52.840
Bu, farkında olmanız gereken bir şeydir,

05:52.840 --> 05:55.580
ancak yine de bu desteği ve bu desteği almak oldukça

05:55.580 --> 05:57.899
güzeldir ve bir dizide tam olarak X miktarda

05:57.899 --> 06:02.240
değere ihtiyaç duyduğunuz bir senaryonuz varsa ve her bir değerin türünü

06:02.240 --> 06:05.130
önceden biliyorsanız, uygulamanızda daha da fazla

06:05.130 --> 06:07.900
katılık elde etmek için dizi yerine bir tuple'ı

06:07.900 --> 06:11.313
düşünmek isteyebilirsiniz, böylece çalıştığınız veri

06:11.313 --> 06:17.543
türü ve beklediğiniz veri türü hakkında daha da net olabilirsiniz.
