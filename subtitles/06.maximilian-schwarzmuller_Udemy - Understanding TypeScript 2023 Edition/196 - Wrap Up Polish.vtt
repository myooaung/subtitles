WEBVTT

00:02.320 --> 00:04.290
Wykładowca: A więc to tyle jeśli chodzi o ten moduł.

00:04.290 --> 00:05.660
Dowiedziałeś się, jak

00:05.660 --> 00:08.480
możesz używać typescript w aplikacji node express,

00:08.480 --> 00:11.940
że możesz zainstalować dodatkowe typy dla express i dla node,

00:11.940 --> 00:13.230
aby uzyskać świetną obsługę

00:13.230 --> 00:16.320
typescript w swoich plikach.

00:16.320 --> 00:18.570
Że piszesz podanie tak, jak byś

00:18.570 --> 00:19.990
je zawsze pisał.

00:19.990 --> 00:21.790
Ale że na przykład twoja składnia

00:21.790 --> 00:23.720
importu i eksportu różni się i że możesz

00:23.720 --> 00:26.120
oczywiście używać typów, a także każdej innej

00:26.120 --> 00:29.300
funkcji typescript, o której się dowiesz.

00:29.300 --> 00:31.080
Możesz użyć interfejsów, możesz

00:31.080 --> 00:33.080
użyć dekoratorów, możesz użyć

00:33.080 --> 00:35.480
eNoms i QPUlls i wszystkiego, co jest

00:35.480 --> 00:37.840
wyłączne dla typescript.

00:37.840 --> 00:39.310
To wszystko działa tutaj, ponieważ

00:39.310 --> 00:42.650
piszemy tutaj zwykłą aplikację typescript i zostaje ona skompilowana

00:42.650 --> 00:46.070
za pomocą normalnego kompilatora typescript do zwykłego kodu

00:46.070 --> 00:48.050
Javascript.

00:48.050 --> 00:52.750
Kod Javascript, który następnie jest wykonywany za pomocą node JS.

00:52.750 --> 00:54.450
Teraz, jeśli chcesz mieć więcej przykładów,

00:54.450 --> 00:57.720
jak pracować z typescript i node express, możesz oczywiście, dla

00:57.720 --> 00:58.910
jednego, po prostu google

00:58.910 --> 01:01.210
dla node express typescript, aby znaleźć więcej

01:01.210 --> 01:02.840
przykładów.

01:02.840 --> 01:04.600
Ale mogę też gorąco polecić

01:04.600 --> 01:06.980
sprawdzenie NestJS.

01:06.980 --> 01:10.390
Jest to węzeł. js framework, który obejmuje typescript,

01:10.390 --> 01:13.270
podczas gdy możesz sprawić, by node express działał z

01:13.270 --> 01:15.310
typescriptem, jak widziałeś w tym module,

01:15.310 --> 01:18.010
jest to framework, który daje ci projekty, projekty

01:18.010 --> 01:21.740
node, z obsługą typescript po wyjęciu z pudełka.

01:21.740 --> 01:24.490
I obejmuje wszystkie te cechy typescript,

01:24.490 --> 01:26.960
takie jak dekoratory i tak dalej.

01:26.960 --> 01:30.910
Dzięki NestJS możesz budować aplikacje webowe typu node,

01:30.910 --> 01:34.390
rest API, ale także aplikacje, w których renderujesz

01:34.390 --> 01:36.440
widoki czy graphQL API.

01:36.440 --> 01:38.930
To wszystko można zbudować za pomocą node. js, ale także z typescript

01:38.930 --> 01:41.110
i ten projekt mocno wykorzystuje

01:41.110 --> 01:43.380
funkcje takie jak dekoratory,

01:43.380 --> 01:46.950
interfejsy i tak dalej.

01:46.950 --> 01:50.200
Więc zdecydowanie sprawdź NestJS, jeśli chcesz zbudować aplikację

01:50.200 --> 01:53.580
internetową po stronie usług za pomocą węzła i typescript.

01:53.580 --> 01:56.660
To świetny framework, naprawdę zabawny w użyciu i wykorzystuje

01:56.660 --> 02:00.350
wszystkie fajne funkcje, jakie ma do zaoferowania typescript.

02:00.350 --> 02:03.630
Więc nie jest potrzebna żadna instalacja typu niestandardowego,

02:03.630 --> 02:05.310
obejścia lub coś w tym stylu.

02:05.310 --> 02:08.913
Tutaj otrzymujesz świetną obsługę maszynopisu po wyjęciu z pudełka.
