WEBVTT

00:02.310 --> 00:04.270
Instruktor: Czyli korzystamy z modułów ES.

00:04.270 --> 00:06.470
Okazuje się, że istnieją pewne odmiany

00:06.470 --> 00:08.550
tej składni eksportu i importu, o których

00:08.550 --> 00:10.100
powinieneś wiedzieć.

00:10.100 --> 00:12.276
Na przykład, możesz połączyć importy w pakiet.

00:12.276 --> 00:14.300
Lets say tutaj w projekcie wejściowym,

00:14.300 --> 00:15.870
gdzie importuję dwie rzeczy

00:15.870 --> 00:18.060
z pliku walidacji tutaj.

00:18.060 --> 00:22.030
Możesz chcieć zgrupować to wszystko w jeden obiekt, gdzie następnie

00:22.030 --> 00:25.493
możesz wywołać dot validatable i dot validate, aby nie

00:25.493 --> 00:29.170
musieć wywoływać validate w ten sposób.

00:29.170 --> 00:30.940
Może chcesz to nazwać w ten sposób,

00:30.940 --> 00:33.510
ale jeśli miałeś powiedzmy funkcję o tej samej

00:33.510 --> 00:35.210
nazwie i roku lub cokolwiek takiego

00:35.210 --> 00:36.719
i chcesz uniknąć kolizji nazw

00:36.719 --> 00:38.250
lub chcesz, aby było jasne,

00:38.250 --> 00:40.292
że należy to do jakiegoś pakietu, możesz

00:40.292 --> 00:42.069
to zgrupować.

00:42.069 --> 00:45.090
Aby pogrupować importy, nie importujesz ich w ten

00:45.090 --> 00:49.150
sposób, z nawiasami klamrowymi, ale zamiast tego używasz gwiazdki

00:49.150 --> 00:51.970
tutaj, co oznacza import wszystkiego z tego

00:51.970 --> 00:55.080
pliku, jako, a następnie dowolny alias z wyboru,

00:55.080 --> 00:57.192
na przykład, walidacja.

00:57.192 --> 00:59.280
Teraz musisz przejść do miejsc, w których

00:59.280 --> 01:01.070
używasz czegoś z tego pliku i użyć

01:01.070 --> 01:05.470
go jak walidacji obiektu. walidowalny.

01:05.470 --> 01:07.920
Tak więc wszystko, co jest eksportowane w tym pliku,

01:07.920 --> 01:10.400
który teraz grupujesz pod tą nazwą tutaj, jest dostępne

01:10.400 --> 01:12.341
poprzez notację kropkową.

01:12.341 --> 01:15.700
Czyli walidacja. validatable all the way and then

01:15.700 --> 01:18.830
also down there where we have the validate function it's of

01:18.830 --> 01:22.786
course validation. walidacja, walidacja. walidacja, oraz

01:22.786 --> 01:25.197
walidacja. ważne.

01:25.197 --> 01:29.604
A dzięki temu zobaczysz, że dobrze walidacja działa.

01:29.604 --> 01:32.490
Więc grupowanie to jedna rzecz, którą możesz zrobić.

01:32.490 --> 01:34.960
Ta rzecz alias tutaj jest również czymś,

01:34.960 --> 01:36.890
co możesz zrobić w ogóle.

01:36.890 --> 01:38.830
Nie podoba Ci się taki autobind,

01:38.830 --> 01:41.270
chcesz mieć na początku wielką literę?

01:41.270 --> 01:45.360
Cóż, możesz po prostu przypisać alias ze słowem kluczowym as tutaj.

01:45.360 --> 01:48.150
Wewnątrz nawiasów klamrowych możesz go również użyć.

01:48.150 --> 01:50.431
Następnie zmieniasz nazwę tego importu i tylko tego importu.

01:50.431 --> 01:54.350
Nie zmieniasz nazwy w oryginalnym pliku oczywiście.

01:54.350 --> 01:58.390
Jest tylko zaimportowany pod inną nazwą w tym pliku tutaj.

01:58.390 --> 02:01.280
Więc teraz zamiast używać autobind z małą

02:01.280 --> 02:05.780
literą a tutaj musimy użyć naszej nazwy aliasu z dużą literą A.

02:05.780 --> 02:09.150
Więc to może być kolejna miła funkcja, aby uniknąć konfliktów

02:09.150 --> 02:11.570
nazw, jeśli miałeś inną rzecz o nazwie autobind

02:11.570 --> 02:14.543
z małą literą a w tym samym pliku, na przykład.

02:16.180 --> 02:20.010
Możesz również pracować z domyślnymi eksportami.

02:20.010 --> 02:22.926
Jeśli masz plik, który eksportuje tylko jedną rzecz,

02:22.926 --> 02:25.120
powiedzmy base-component.

02:25.120 --> 02:28.020
Właściwie mamy wiele plików, które eksportują tylko jedną rzecz.

02:28.020 --> 02:29.240
Ale powiedzmy, że tutaj

02:29.240 --> 02:31.360
w tym pliku nie chcemy eksportować go w ten

02:31.360 --> 02:33.770
sposób, czyli tak zwanym eksportem nazwanym,

02:33.770 --> 02:37.330
bo zaimportowaliśmy po nazwie tutaj w nawiasach klamrowych.

02:37.330 --> 02:40.258
Musimy użyć dokładnie tej nazwy, której użyliśmy tutaj.

02:40.258 --> 02:42.170
Jeśli nie chcesz tego robić, po prostu

02:42.170 --> 02:45.140
dodajesz kolejne słowo kluczowe, domyślne.

02:45.140 --> 02:48.940
I to mówi JavaScriptowi, że jest to główny,

02:48.940 --> 02:52.064
cóż, domyślny eksport tego pliku.

02:52.064 --> 02:55.929
Można by tu jeszcze mieć inne nazwane eksporty,

02:55.929 --> 02:58.500
które byłyby dozwolone.

02:58.500 --> 03:01.220
Whoops, na przykład stała tutaj, która byłaby

03:01.220 --> 03:02.120
dozwolona.

03:02.120 --> 03:04.750
Możesz mieć nazwane i domyślne eksporty mieszane

03:04.750 --> 03:06.130
w tym samym pliku, ale jeśli

03:06.130 --> 03:07.800
używasz domyślnego eksportu,

03:07.800 --> 03:11.440
możesz mieć tylko jeden domyślny eksport na plik.

03:11.440 --> 03:14.210
Więc tutaj mam mój domyślny eksport i teraz w plikach, w których

03:14.210 --> 03:16.926
zaimportowałem, nie importujesz go po nazwie.

03:16.926 --> 03:19.900
Można importować tylko nazwane eksporty po nazwie.

03:19.900 --> 03:22.639
Na przykład, że dodano coś stałego.

03:22.639 --> 03:24.743
Zamiast tego importujesz swoje domyślne

03:24.743 --> 03:28.600
po prostu wybierając teraz dowolną nazwę, która nie musi odpowiadać

03:28.600 --> 03:32.400
nazwie użytej w wyeksportowanym pliku.

03:32.400 --> 03:34.354
Więc nie musisz teraz używać komponentu.

03:34.354 --> 03:37.037
Możesz użyć po prostu Cmp na przykład tutaj teraz.

03:37.037 --> 03:40.700
I zaimportuj go w ten sposób, bez nawiasów klamrowych.

03:40.700 --> 03:44.127
Nie ma również gwiazdki, więc nie importuję wszystkiego.

03:44.127 --> 03:46.827
Ja właśnie importuję domyślne.

03:46.827 --> 03:49.460
Dlatego jest to dostępne tylko wtedy, gdy plik,

03:49.460 --> 03:52.210
z którego importujesz, ma domyślny eksport.

03:52.210 --> 03:53.850
Ponieważ to mówi JavaScriptowi,

03:53.850 --> 03:58.010
hej, chcę użyć domyślnego eksportu tego pliku.

03:58.010 --> 04:00.520
Wtedy tutaj mogę nazwać to Cmp, oczywiście.

04:00.520 --> 04:02.569
Albo, muszę użyć Cmp, oczywiście teraz.

04:02.569 --> 04:04.509
Komponent nie jest już dozwolony, ponieważ

04:04.509 --> 04:06.666
nie importuję go po tej nazwie.

04:06.666 --> 04:09.710
Oczywiście teraz musimy to również podrasować w project-item

04:09.710 --> 04:10.675
i project-list.

04:10.675 --> 04:12.486
Korzystamy z domyślnego eksportu.

04:12.486 --> 04:14.515
Będę się tutaj trzymał komponentu, ale

04:14.515 --> 04:16.540
nie musisz, jak właśnie pokazałem.

04:16.540 --> 04:18.300
Możesz użyć dowolnej nazwy, którą

04:18.300 --> 04:21.900
chcesz tutaj, ale dla uproszczenia użyję tutaj komponentu.

04:21.900 --> 04:24.075
Domyślny eksport może być miły, jeśli masz

04:24.075 --> 04:25.740
tylko jedną rzecz na plik.

04:25.740 --> 04:29.080
Osobiście wolę jednak nazwany eksport, ponieważ otrzymujesz

04:29.080 --> 04:31.075
autouzupełnianie, wymuszasz jasny

04:31.075 --> 04:33.590
wzór nazewnictwa, jeśli inny programista

04:33.590 --> 04:37.290
importuje twoją klasę lub twoją wyeksportowaną rzecz, musi

04:37.290 --> 04:43.290
użyć twojej nazwy, co zwykle jest dobre, ponieważ pozwala wymusić pewne konwencje nazewnictwa

04:43.290 --> 04:46.579
w całym zespole lub organizacji.

04:46.579 --> 04:49.840
I dlatego osobiście lubię nazwane eksporty, ale oczywiście

04:49.840 --> 04:51.740
powinieneś być świadomy również domyślnego

04:51.740 --> 04:53.340
eksportu, którego możesz użyć

04:53.340 --> 04:54.853
w ten sposób.
