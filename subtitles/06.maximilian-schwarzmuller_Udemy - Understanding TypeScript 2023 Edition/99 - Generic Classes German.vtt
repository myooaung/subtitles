WEBVTT

00:02.270 --> 00:04.390
Kursleiter: Okay, genug über generische Funktionen.

00:04.390 --> 00:06.490
Wir werden sie während des gesamten Kurses und

00:06.490 --> 00:08.150
des gesamten Projekts verwenden.

00:08.150 --> 00:10.390
Das sollte also immer klarer werden, je

00:10.390 --> 00:11.890
mehr wir damit arbeiten.

00:11.890 --> 00:14.823
Der Grundgedanke ist jetzt hoffentlich schon klar.

00:15.660 --> 00:18.490
Generische Funktionen sind aber nicht alles, was wir verwenden

00:18.490 --> 00:20.550
können, wir haben auch generische Klassen und

00:20.550 --> 00:21.560
deshalb wollen wir sehen,

00:21.560 --> 00:23.740
wie wir eine solche generische Klasse erstellen

00:23.740 --> 00:25.170
und warum wir das tun können, warum

00:25.170 --> 00:27.760
das für uns nützlich sein könnte.

00:27.760 --> 00:31.950
Wir könnten hier eine Speicherklasse anlegen.

00:31.950 --> 00:36.060
Eine Klasse, sagen wir, die eine private Eigenschaft data hat.

00:36.060 --> 00:38.850
die am Ende ein Array von Daten enthalten wird.

00:38.850 --> 00:40.940
Dann gibt es eine addItem-Methode, die

00:40.940 --> 00:44.200
unser Element aufnimmt, das mit push zu den Daten hinzugefügt

00:44.200 --> 00:45.763
werden soll, sagen wir mal.

00:48.570 --> 00:50.830
Und wir haben eine removeItem-Methode,

00:50.830 --> 00:52.173
die unser Element nimmt,

00:53.010 --> 00:57.740
wo wir dies sagen könnten. Daten. splice und dann müssen

00:57.740 --> 01:01.730
wir nur den indexOff(item) hier holen und ein Element

01:01.730 --> 01:02.910
splitten.

01:02.910 --> 01:06.030
So können wir ein Element aus einem Array entfernen.

01:06.030 --> 01:07.873
Und natürlich getItems, das, sagen wir mal,

01:09.750 --> 01:13.120
eine Kopie von diesem zurückgibt. Daten, z. B. mit dem Spread-Operator,

01:13.120 --> 01:15.770
den Sie kennen gelernt haben.

01:16.610 --> 01:17.443
Jetzt können wir das tun,

01:17.443 --> 01:19.450
und wir erhalten hier eine Reihe von Fehlern.

01:19.450 --> 01:20.500
Wir erhalten eine Reihe

01:20.500 --> 01:23.900
von Fehlern, zum einen, weil der Name Storage ein reservierter Name ist, also

01:23.900 --> 01:25.230
nennen wir ihn Datastorage.

01:25.230 --> 01:26.620
Das ist leicht loszuwerden.

01:26.620 --> 01:27.920
Jetzt bekommen wir auch hier einen

01:27.920 --> 01:29.400
Fehler, weil wir nichts über die Art

01:29.400 --> 01:30.880
der Daten sagen, die wir speichern,

01:30.880 --> 01:32.960
und welchen Typ das Element hier hat.

01:32.960 --> 01:35.870
Und das ist genau der Punkt, an dem wir dies in eine generische Klasse

01:35.870 --> 01:38.860
umwandeln können, denn die Art der Daten kann Ihnen egal sein.

01:38.860 --> 01:40.880
Wir wollen sicherstellen, dass es sich um einheitliche

01:40.880 --> 01:42.410
Daten handelt, also entweder nur um

01:42.410 --> 01:44.830
Strings, nur um Zahlen oder nur um Objekte.

01:44.830 --> 01:47.550
Aber abgesehen davon ist es mir egal.

01:47.550 --> 01:50.820
Hier könnten wir dies also in eine generische Klasse umwandeln,

01:50.820 --> 01:53.300
indem wir spitze Klammern nach dem Klassennamen

01:53.300 --> 01:56.330
hinzufügen und dann wieder T, U, was auch immer Sie als Bezeichner

01:56.330 --> 02:00.110
verwenden wollen, und dies hier als generischen Typ hinzufügen.

02:00.110 --> 02:01.083
Hier können wir sagen,

02:01.083 --> 02:04.490
dass es sich um ein Array des Typs T handelt, in dem also Daten dieses

02:04.490 --> 02:07.413
generischen Typs gespeichert werden.

02:07.413 --> 02:09.670
Deshalb fügen wir hier solche Daten hinzu,

02:09.670 --> 02:12.400
und wir versuchen, solche Daten hier zu entfernen.

02:12.400 --> 02:15.140
Und daher erhalten wir hier Elemente korrekt abgeleitet

02:15.140 --> 02:18.490
wird, um ein Array von generischen Typen zurück.

02:18.490 --> 02:20.860
Und jetzt können wir verschiedene Speicher

02:20.860 --> 02:24.690
erstellen, wir können hier unseren String oder unseren TextStorage

02:24.690 --> 02:29.500
haben, indem wir new DataStorage aufrufen und den generischen Typ hier auf den Typ

02:29.500 --> 02:31.250
String setzen.

02:31.250 --> 02:33.070
Und dann kann ich hier in textStorage addItem

02:33.070 --> 02:34.340
aufrufen, und wenn ich versuche,

02:34.340 --> 02:36.410
eine Zahl hinzuzufügen, erhalte ich einen Fehler,

02:36.410 --> 02:37.513
weil ich sage, dass dies ein

02:37.513 --> 02:40.800
DataStorage sein wird, das nur Stings speichert.

02:40.800 --> 02:45.800
Ich kann also Max hier speichern, vielleicht auch Manu, und dann

02:46.830 --> 02:51.450
textStorage aufrufen. removeItem('Max') und dann

02:51.450 --> 02:55.073
console. Protokoll. textStorage. getItems.

02:56.520 --> 02:58.870
Und das sollte alles funktionieren, wenn wir das speichern,

02:58.870 --> 03:00.300
weil es ein generischer Typ ist,

03:00.300 --> 03:03.103
und in der Tat haben wir am Ende nur Manu da drin.

03:04.400 --> 03:08.240
Dies wäre also eine einfache generische Klasse, die wir erstellen können.

03:08.240 --> 03:10.500
Warum sollten wir nun eine solche generische Klasse bauen?

03:10.500 --> 03:11.770
Wie gesagt, vielleicht

03:11.770 --> 03:14.220
wollen wir ja nicht nur Texte speichern,

03:14.220 --> 03:18.950
sondern auch Zahlen in einem anderen Datenspeicher.

03:18.950 --> 03:21.510
Dann könnte ich also einen solchen DataStorage erstellen, und

03:21.510 --> 03:23.810
wenn ich diesen auf "number" setze, wird sichergestellt,

03:23.810 --> 03:26.250
dass wir diesem Storage nur Zahlen hinzufügen können.

03:26.250 --> 03:28.330
Natürlich könnten wir auch einen Speicher einrichten, in dem

03:28.330 --> 03:30.520
wir beides zulassen, indem wir einen Union-Typ verwenden.

03:30.520 --> 03:32.550
Wir haben also die volle Flexibilität,

03:32.550 --> 03:36.470
aber wir geben dem Typ einige zusätzliche Informationen, die

03:36.470 --> 03:38.490
diese Klasse sowohl flexibel als

03:38.490 --> 03:41.450
auch stark typisiert machen.

03:41.450 --> 03:43.470
Genauso wie wir es mit Funktionen hatten.

03:43.470 --> 03:46.910
Wirklich flexibel und trotzdem perfekte Typenunterstützung.

03:46.910 --> 03:49.900
Das ist die ganze Idee hinter den generischen Typen.

03:49.900 --> 03:52.680
Hier können wir das mit der DataStorage-Klasse tun,

03:52.680 --> 03:53.750
indem wir Zeichenketten,

03:53.750 --> 03:55.130
Zahlen oder was immer wir wollen,

03:55.130 --> 03:56.513
speichern.

03:57.790 --> 04:01.300
Wir haben allerdings ein Problem mit unserer dataStorage-Klasse.

04:01.300 --> 04:04.880
Sagen wir, ich habe hier meinen Objektspeicher, jetzt kann ich

04:04.880 --> 04:07.090
einen neuen DataStorage erstellen und

04:07.090 --> 04:10.490
sagen, dass ich dort Objekte speichern möchte, richtig, ich

04:10.490 --> 04:12.270
möchte Objekte speichern und natürlich

04:12.270 --> 04:17.270
können wir zum Objektspeicher gehen und ein Element hinzufügen.

04:17.300 --> 04:20.460
Sagen wir, ein Objekt, das ich habe, heißt dort Max.

04:20.460 --> 04:22.920
Lassen Sie uns auch ein anderes Objekt speichern,

04:22.920 --> 04:24.760
in dem ich Manu speichere.

04:24.760 --> 04:26.770
Nehmen wir an, wir machen etwas in unserem

04:26.770 --> 04:28.310
Code, und zu einem späteren

04:28.310 --> 04:29.740
Zeitpunkt möchte ich das

04:29.740 --> 04:34.100
Element entfernen, und zwar das Element mit dem Namen "Manu".

04:34.100 --> 04:37.863
Und dann möchte ich trösten. Protokoll. objStorage. getItems.

04:39.450 --> 04:40.550
Genau so.

04:40.550 --> 04:41.883
Wenn wir das speichern, sehen

04:42.920 --> 04:45.840
wir, dass wir dort ein Objekt haben, das Max heißt.

04:45.840 --> 04:47.470
Das sieht also gut aus.

04:47.470 --> 04:49.140
Nun, das ist nicht wirklich gut.

04:49.140 --> 04:52.490
Nehmen wir an, ich möchte Max jetzt entfernen, dann

04:52.490 --> 04:55.740
sollte Manu im Datenspeicher übrig bleiben.

04:55.740 --> 04:59.653
Wenn ich also nachlade, ist es immer noch Max.

05:00.550 --> 05:03.660
Das Problem ist nun, dass wir hier mit Objekten arbeiten,

05:03.660 --> 05:07.350
und wie Sie wissen, sind Objekte in JavaScript Referenztypen.

05:07.350 --> 05:09.440
Legen Sie nun an, um eine zusätzliche Ressource zu finden,

05:09.440 --> 05:11.460
die es Ihnen ermöglicht, in die Referenz einzutauchen.

05:11.460 --> 05:12.730
Während primitive Werte, hier

05:12.730 --> 05:14.650
gehe ich davon aus, dass Sie den Unterschied

05:14.650 --> 05:16.970
kennen, weil es ein Kern-JavaScript Sache, völlig

05:16.970 --> 05:19.060
unabhängig von Typescript ist.

05:19.060 --> 05:20.600
Das Problem ist, dass die Art

05:20.600 --> 05:22.300
und Weise, wie unsere Klasse mit

05:22.300 --> 05:26.243
dieser Logik, wie Daten entfernt und identifiziert werden, aufgebaut ist,

05:27.080 --> 05:29.580
wir nicht wirklich gute Arbeit leisten, wenn wir

05:29.580 --> 05:32.200
mit nicht-primitiven Werten arbeiten.

05:32.200 --> 05:35.130
Also, wenn wir mit Objekten oder Arrays arbeiten, weil indexOf,

05:35.130 --> 05:37.840
wenn wir in einem Objekt hier übergeben, wird es nicht funktionieren,

05:37.840 --> 05:40.910
weil technisch dies ein neues Objekt ist.

05:40.910 --> 05:43.800
Es könnte so aussehen, aber es funktioniert nicht, weil es sich

05:43.800 --> 05:46.520
technisch gesehen um ein brandneues Objekt im Speicher handelt

05:46.520 --> 05:48.290
und eine andere Adresse hat.

05:48.290 --> 05:52.110
Und in der Tat hier, JavaScript wird für die Adresse suchen

05:52.110 --> 05:54.930
und im Grunde nicht finden, so was es dann tut,

05:54.930 --> 05:58.453
ist es entfernt das letzte Element in dem Array hier, weil

05:59.510 --> 06:01.473
dies am Ende gibt -1.

06:02.419 --> 06:06.070
IndexOf gibt -1 zurück, auch wenn es nichts findet.

06:06.070 --> 06:07.990
Das heißt, es beginnt am Ende des Arrays, das

06:07.990 --> 06:09.770
ist normales Javascript-Verhalten und

06:09.770 --> 06:11.921
entfernt das letzte Element des Arrays.

06:11.921 --> 06:14.190
Das ist der Grund, warum es bei Manu funktioniert hat,

06:14.190 --> 06:16.810
es hat nicht wirklich funktioniert, es hat versehentlich funktioniert,

06:16.810 --> 06:19.880
aber warum es bei Max nicht funktioniert, wir entfernen jetzt immer das

06:19.880 --> 06:21.760
letzte Element des Arrays, da wir es nicht identifizieren

06:21.760 --> 06:23.670
können.

06:23.670 --> 06:25.890
Eine Möglichkeit, das zumindest zu beheben,

06:25.890 --> 06:29.140
besteht darin, zu prüfen, ob wir unser Element gefunden

06:29.140 --> 06:32.260
haben. Wir können also prüfen, ob dieser Code hier gleich

06:32.260 --> 06:36.260
-1 ist, was bedeutet, dass wir es nicht gefunden haben.

06:36.260 --> 06:37.360
Dann können wir zurückkehren

06:37.360 --> 06:40.780
und sicherstellen, dass wir nicht versehentlich den falschen Artikel entfernen.

06:40.780 --> 06:42.900
Aber natürlich haben wir diese Leiste jetzt repariert, aber

06:42.900 --> 06:44.850
wir haben immer noch nicht diesen inneren Zustand, in

06:44.850 --> 06:46.580
dem es mit Objekten funktionieren würde.

06:46.580 --> 06:48.890
Nun, der einzige Weg, wie es mit Objekten funktionieren könnte,

06:48.890 --> 06:51.740
ist, wenn wir genau das gleiche Objekt noch einmal übergeben.

06:51.740 --> 06:55.700
Wenn ich also mein Max-Objekt in einer Konstanten gespeichert hätte,

06:55.700 --> 06:58.840
wie hier, und hier das Max-Objekt übergebe.

06:58.840 --> 07:02.050
Und wenn ich das gleiche hier mache, dann benutze ich wirklich das gleiche,

07:02.050 --> 07:05.330
genau das gleiche Objekt, das gleiche Objekt im Speicher, und deshalb würde

07:05.330 --> 07:06.540
es jetzt funktionieren.

07:06.540 --> 07:08.930
Das wäre die einzige Möglichkeit, dies zu erreichen.

07:08.930 --> 07:12.340
Daher wäre es hier vielleicht besser, dafür zu sorgen,

07:12.340 --> 07:16.150
dass dies wirklich nur mit primitiven Werten funktioniert.

07:16.150 --> 07:20.100
Wir könnten also sagen, dass T String, Number und vielleicht

07:20.100 --> 07:24.010
auch alle Booleschen Werte erweitert.

07:24.010 --> 07:25.990
Wir sagen also im Grunde, dass DataStorage

07:25.990 --> 07:27.920
nur mit diesen Typen arbeiten sollte.

07:27.920 --> 07:30.470
Daher sind Objekte nicht mehr erlaubt.

07:30.470 --> 07:32.500
Das könnte hier besser sein, denn wir bräuchten

07:32.500 --> 07:35.220
einen spezielleren DataStorage, der dann wahrscheinlich

07:35.220 --> 07:38.290
wiederum nur mit Objekten und nicht mit primitiven Werten

07:38.290 --> 07:40.080
arbeitet.

07:40.080 --> 07:42.430
Zur Feinabstimmung unserer Abfragelogik hier, um vielleicht

07:42.430 --> 07:44.800
auf einige iD in der Position zu prüfen, die entfernt werden

07:44.800 --> 07:45.880
sollte.

07:45.880 --> 07:46.970
So wie es hier funktioniert,

07:46.970 --> 07:48.910
funktioniert es wirklich nur für primitive Typen,

07:48.910 --> 07:52.320
so dass die Festlegung einer solchen Einschränkung definitiv eine gute Idee ist.

07:52.320 --> 07:55.610
Und damit, wenn wir es gespeichert haben, nachdem wir das auskommentiert haben,

07:55.610 --> 07:57.253
funktioniert es natürlich wieder.

07:58.810 --> 08:00.540
Natürlich kann man auch hier

08:00.540 --> 08:02.620
mehr als einen Gattungstyp haben,

08:02.620 --> 08:04.310
das ist hoffentlich klar.

08:04.310 --> 08:05.910
Wenn Sie mit Klassen arbeiten, sind

08:05.910 --> 08:07.600
Sie nicht auf einen Typ beschränkt.

08:07.600 --> 08:09.610
Und Sie können auch Methoden haben, die

08:09.610 --> 08:13.080
anstelle von Klassen ihre eigenen generischen Typen haben.

08:13.080 --> 08:16.630
Sie könnten also neue generische Typen in Klassenmethoden einführen, wenn Sie einen

08:16.630 --> 08:18.010
generischen Typ haben, der nur in

08:18.010 --> 08:19.750
einer bestimmten Methode benötigt wird

08:19.750 --> 08:21.580
und nicht in der gesamten Klasse.

08:21.580 --> 08:23.000
Sie sind also sehr flexibel.

08:23.000 --> 08:25.570
Sie können Einschränkungen überall verwenden,

08:25.570 --> 08:28.100
und im Allgemeinen sind generische Typen

08:28.100 --> 08:30.240
dazu da, Ihnen das Leben leichter zu

08:30.240 --> 08:33.900
machen und Ihnen die perfekte Kombination aus voller Flexibilität

08:33.900 --> 08:36.010
zu bieten.

08:36.010 --> 08:39.310
Wir können hier jeden beliebigen primitiven Wert und die Typsicherheit

08:39.310 --> 08:40.900
verwenden, da wir genau wissen,

08:40.900 --> 08:42.820
was in diesem DataStorage gespeichert

08:42.820 --> 08:44.710
ist und was in diesem DataStorage gespeichert

08:44.710 --> 08:46.770
wird.

08:46.770 --> 08:50.660
Diese Kombination ist also das Großartige, das uns die

08:50.660 --> 08:52.283
Gattungen bieten.
