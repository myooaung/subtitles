WEBVTT

00:02.300 --> 00:03.133
Instructor: Así que, por supuesto,

00:03.133 --> 00:05.250
nuestro objetivo no es sólo registrar esa identificación.

00:05.250 --> 00:09.340
En cambio, quiero extraer el ID del proyecto aquí en el registro,

00:09.340 --> 00:11.110
en el manejador de la caída.

00:11.110 --> 00:15.410
Y con eso, el objetivo es realmente mover el proyecto ahora, o cambiar

00:15.410 --> 00:18.910
el estado del proyecto, para ser precisos.

00:18.910 --> 00:21.400
¿Cómo podemos hacerlo?

00:21.400 --> 00:26.063
Bueno, en nuestro estado, yo diría, en nuestro estado de proyecto, donde

00:26.950 --> 00:30.000
actualmente tenemos un método addProject, también

00:30.000 --> 00:33.160
necesitamos un método moveProject.

00:33.160 --> 00:35.060
Y el objetivo de este método será

00:35.060 --> 00:38.550
básicamente cambiar el estado de un proyecto.

00:38.550 --> 00:40.180
Por supuesto, también podrías llamarlo,

00:40.180 --> 00:42.970
SwitchProjectStatus, o lo que quieras, pero como estamos

00:42.970 --> 00:44.390
haciendo drag-and-drop lo voy

00:44.390 --> 00:46.440
a llamar MoveProject.

00:46.440 --> 00:49.470
Así, en MoveProject el objetivo es mover un proyecto

00:49.470 --> 00:53.860
de la lista en la que está actualmente, a una nueva lista.

00:53.860 --> 00:55.460
Ahora bien, esto no siempre significa

00:55.460 --> 00:58.030
que tengamos que cambiar el estado del proyecto

00:58.030 --> 01:00.480
de activo a terminado y viceversa.

01:00.480 --> 01:02.870
Después de todo, un usuario podría estar haciendo

01:02.870 --> 01:05.060
esto, arrastrar y soltar en la misma caja.

01:05.060 --> 01:07.120
Así que, si entonces activamos siempre

01:07.120 --> 01:10.680
un método que cambie el estado, tendríamos un efecto inesperado

01:10.680 --> 01:12.690
en el que al soltar en la misma casilla

01:12.690 --> 01:15.754
se sigue cambiando el proyecto a la otra casilla.

01:15.754 --> 01:18.972
Así que en lugar de eso, en MoveProject, realmente

01:18.972 --> 01:23.402
tenemos que saber qué proyecto mover, y qué caja es la nueva caja.

01:23.402 --> 01:24.235
Entonces, cuál es el nuevo estado.

01:25.940 --> 01:28.190
Así que espero obtener el ID del proyecto

01:28.190 --> 01:31.410
aquí, que debería ser una cadena, y el nuevo estado.

01:31.410 --> 01:34.130
Y el nuevo estado aquí, por supuesto, puede

01:34.130 --> 01:36.410
ser del tipo ProjectStatus.

01:38.580 --> 01:40.803
Y luego dentro de MoveProject,

01:41.692 --> 01:44.320
quiero encontrar un proyecto con ese

01:44.320 --> 01:46.830
ID en mi matriz de proyectos.

01:46.830 --> 01:49.090
Así que aquí, en este conjunto de proyectos,

01:49.090 --> 01:51.680
y luego cambiar su estado.

01:51.680 --> 01:54.580
Así que para eso podemos llegar a este proyecto,

01:54.580 --> 01:57.450
encontrar un proyecto allí, y el método de búsqueda

01:57.450 --> 01:59.440
es perfecto para eso.

01:59.440 --> 02:01.210
Se ejecuta en cada elemento de este array,

02:01.210 --> 02:02.680
nos da acceso a cada elemento, y luego

02:02.680 --> 02:03.970
tenemos que devolver true si es

02:03.970 --> 02:05.770
el elemento que estamos buscando.

02:05.770 --> 02:07.150
Y quiero devolver true si

02:07.150 --> 02:09.860
el ID del elemento que estamos viendo actualmente

02:09.860 --> 02:12.830
es igual al projectId que estoy recibiendo como argumento

02:12.830 --> 02:15.420
aquí, entonces tenemos el elemento que debe cambiar,

02:15.420 --> 02:17.470
y allí en este elemento, sólo tenemos

02:17.470 --> 02:21.070
que cambiar el estado al nuevo estado.

02:21.070 --> 02:22.653
Ahora esto podría ser nulo, así

02:23.490 --> 02:26.490
que aquí voy a llamar a esto, proyecto, almacenado como

02:26.490 --> 02:28.080
ahora constante llamado proyecto,

02:28.080 --> 02:30.550
y comprobar si el proyecto existe.

02:30.550 --> 02:34.160
Y si existe, entonces quiero establecer el estado

02:34.160 --> 02:39.160
igual al nuevo estado aquí. Así de simple.

02:39.250 --> 02:42.900
Esto ya cambiará el objeto en el array y básicamente

02:42.900 --> 02:45.643
hemos terminado con él.

02:46.970 --> 02:50.010
Sin embargo, no hemos terminado del todo.

02:50.010 --> 02:52.250
Ahora tenemos que avisar a todos, a todos

02:52.250 --> 02:56.040
nuestros oyentes, de que algo ha cambiado en nuestro proyecto, y que

02:56.040 --> 02:57.870
deben volver a renderizar.

02:57.870 --> 02:59.980
Así que tenemos que ir a través de todos los

02:59.980 --> 03:01.910
oyentes de nuevo, y ya que repetiríamos

03:01.910 --> 03:04.080
el código aquí, voy a externalizar esto

03:04.080 --> 03:07.920
en un nuevo método privado, updateListeners podría ser un nombre viable,

03:07.920 --> 03:10.490
y allí voy a tener este bucle for, donde vamos a través

03:10.490 --> 03:13.660
de todos los oyentes y luego hacer algo.

03:13.660 --> 03:15.890
Y entonces llamaré a este updateListeners

03:15.890 --> 03:17.430
tanto desde el addProject,

03:17.430 --> 03:20.890
como desde el método moveProject.

03:20.890 --> 03:23.033
Aquí, sólo si cambiamos algo.

03:24.350 --> 03:26.100
Así que ahora todos los oyentes se activarán.

03:26.100 --> 03:28.980
Y si recuerdas, un oyente en nuestra aplicación

03:28.980 --> 03:33.010
aquí, básicamente lleva a la lista a rerender sus elementos.

03:33.010 --> 03:35.310
Así que eso funcionará exactamente como debería,

03:35.310 --> 03:37.940
o debería funcionar exactamente como debería.

03:37.940 --> 03:40.640
Así que ahora tenemos que moveProject método, allí

03:40.640 --> 03:43.730
abajo en el controlador de caída, ahora podemos usar esto.

03:43.730 --> 03:46.390
Ahora podemos utilizar el projectState,

03:46.390 --> 03:49.670
llamar a moveProject, y pasar el ID del proyecto,

03:49.670 --> 03:52.296
y ahora el nuevo estado del proyecto.

03:52.296 --> 03:54.190
Y el nuevo estado del proyecto

03:54.190 --> 03:57.880
depende de la lista en la que lo dejemos.

03:57.880 --> 03:59.630
Así que, quiero auto-enlazar mi

04:00.760 --> 04:01.790
manejador de caída,

04:01.790 --> 04:04.050
de modo que la palabra clave este en el manejador

04:04.050 --> 04:06.020
de caída se refiere a la clase circundante,

04:06.020 --> 04:08.500
y esta clase circundante es una lista de proyectos

04:08.500 --> 04:10.320
que, si usted recuerda, tendrá una

04:10.320 --> 04:13.020
propiedad de tipo aquí, estamos almacenando aquí,

04:13.020 --> 04:15.820
estamos teniendo un tipo, la propiedad, y que es activo

04:15.820 --> 04:18.120
o terminado.

04:18.120 --> 04:21.000
Así que ahora sólo tenemos que traducir activo o terminado

04:21.000 --> 04:22.640
a nuestros valores de enum.

04:22.640 --> 04:24.850
Así que aquí, paso en esto. y compruebo si

04:24.850 --> 04:27.230
es igual a activo, en cuyo caso,

04:27.230 --> 04:31.580
pasamos a ProjectStatus. Activo, como el nuevo estado

04:31.580 --> 04:33.750
del proyecto, porque ese es

04:33.750 --> 04:36.190
el estado de la lista a la que movimos

04:36.190 --> 04:38.160
el proyecto.

04:38.160 --> 04:41.733
En caso contrario, pasamos el estado del proyecto. Terminado, y déjame reformularlo

04:42.660 --> 04:45.423
para que sea más fácil de leer.

04:46.730 --> 04:48.110
Con eso vamos a intentarlo.

04:48.110 --> 04:52.440
Guardemos todo, y agreguemos un nuevo proyecto aquí, y ahora lo

04:52.440 --> 04:56.620
arrastramos a proyectos terminados y se cambia, y lo mismo y si

04:56.620 --> 04:58.270
lo muevo hacia atrás.

04:58.270 --> 05:02.320
Si suelto aquí en proyectos activos, nada cambia.

05:02.320 --> 05:04.400
Ahora verás, si inspeccionas el

05:04.400 --> 05:08.100
DOM, que técnicamente se rerenderiza, lo que podría no ser

05:08.100 --> 05:11.450
ideal, así que podríamos pensar en idear alguna solución

05:11.450 --> 05:15.290
que compruebe si el estado realmente cambió, y si no lo hizo,

05:15.290 --> 05:17.400
no actualizamos, eso es algo que podemos

05:17.400 --> 05:18.890
hacer.

05:18.890 --> 05:22.620
Pero desde el punto de vista de la interfaz de usuario, se actualiza tal y como debería.

05:22.620 --> 05:24.570
Ahora añadamos también un segundo

05:24.570 --> 05:27.120
proyecto y veamos si eso destruye algo,

05:27.120 --> 05:29.260
si todo sigue funcionando, y yo

05:29.260 --> 05:31.750
diría que parece decente, a mí me parece

05:31.750 --> 05:33.720
bastante bien.

05:33.720 --> 05:37.120
Todo parece funcionar exactamente como debería.

05:37.120 --> 05:40.230
Así que arrastrando y soltando funciona bien aquí,

05:40.230 --> 05:42.600
pero hay una mejora que mencioné en el

05:42.600 --> 05:46.305
estado del proyecto, en moveProject, cuando llamé a este

05:46.305 --> 05:49.470
updateListeners, podemos comprobar si realmente

05:49.470 --> 05:51.920
cambiamos el estado.

05:51.920 --> 05:54.150
Así que aquí podemos comprobar si el proyecto,

05:54.150 --> 05:57.940
así que si encontramos uno, y si entonces el estado del proyecto, es

05:57.940 --> 06:00.270
diferente del nuevo estado, y sólo entonces

06:00.270 --> 06:03.830
cambiamos el estado y actualizamos los oyentes.

06:03.830 --> 06:06.060
Si el estado es el mismo no lo hacemos y

06:06.060 --> 06:09.310
evitamos el innecesario ciclo de rerenderización.

06:09.310 --> 06:10.143
Así que ahora con

06:10.143 --> 06:12.900
eso, si lo guardamos y añadimos rápidamente un nuevo

06:12.900 --> 06:14.790
proyecto, verás que si inspecciono

06:14.790 --> 06:18.190
los elementos aquí y observas la L-I y compruebas si esto parpadea,

06:18.190 --> 06:21.800
lo que significa que se rerenderizaría, aquí no parpadea, sólo parpadea

06:21.800 --> 06:24.490
el droppable, la clase que acabamos de añadir, pero

06:24.490 --> 06:27.970
la L-I no parpadea si la suelto en la misma caja, sólo parpadea si

06:27.970 --> 06:30.990
la muevo a una caja diferente.

06:30.990 --> 06:34.460
Y debería parpadear entonces porque entonces sí que lo hemos movido.

06:34.460 --> 06:36.180
Así que ahora optimizamos esto un

06:36.180 --> 06:39.050
poco, y ahora tenemos el trabajo de arrastrar y soltar

06:39.050 --> 06:42.223
aquí, todo construido y potenciado con y por TypeScript.
