WEBVTT

00:02.040 --> 00:04.180
Enseignant : Donc c'était une classe très basique.

00:04.180 --> 00:05.930
Lorsque l'on construit des classes,

00:05.930 --> 00:08.400
elles deviennent souvent plus complexes que cela.

00:08.400 --> 00:10.800
Et vous pourriez vouloir y stocker plus de données.

00:10.800 --> 00:15.160
Disons qu'un département doit tous avoir des employés.

00:15.160 --> 00:18.160
Il peut s'agir d'un tableau, et initialement, il

00:18.160 --> 00:20.290
peut s'agir d'un tableau vide.

00:20.290 --> 00:23.520
Et pour être un peu plus précis sur ce que vous voulez y stocker,

00:23.520 --> 00:24.980
il pourrait s'agir d'un tableau

00:24.980 --> 00:28.800
de chaînes de caractères pour rester relativement simple.

00:28.800 --> 00:31.733
Maintenant, nous pourrions avoir une méthode ici addEmployee.

00:33.030 --> 00:36.880
Là, nous voulons un employé comme argument, qui devrait juste

00:36.880 --> 00:39.430
être une chaîne dans notre exemple.

00:39.430 --> 00:42.650
Alors on peut régler ça. employés. pousser.

00:42.650 --> 00:47.320
Donc, ajoutez un nouvel employé à notre tableau d'employés

00:47.320 --> 00:48.373
avec ce code.

00:50.750 --> 00:52.683
Maintenant, nous pouvons également ajouter une

00:53.666 --> 00:55.749
autre méthode, printEmployeeInformation.

01:00.508 --> 01:05.508
Et là, je veux consoler. log(this. employés. longueur) et je veux

01:07.766 --> 01:12.766
aussi consoler. log(this. employés) lui-même.

01:15.510 --> 01:18.480
Maintenant, si nous descendons ici, nous pouvons commenter

01:18.480 --> 01:20.560
ce code ici, qui serait à nouveau cassé

01:20.560 --> 01:24.070
parce que nous ne correspondons pas à la description du département

01:24.070 --> 01:25.870
avec notre objet ici.

01:25.870 --> 01:29.200
Et à la place ici, sur ce département de comptabilité,

01:29.200 --> 01:32.234
nous pouvons ajouter un employé, disons Max.

01:32.234 --> 01:35.400
Et un autre employé, disons Manu.

01:35.400 --> 01:37.690
Et puis, en plus de le décrire, je veux

01:37.690 --> 01:41.520
aussi y mettre les informations sur mes employés.

01:41.520 --> 01:44.600
Si nous sauvegardons ceci, nous devrions obtenir cette

01:44.600 --> 01:47.830
sortie, deux employés et voici quelques informations.

01:47.830 --> 01:50.240
Maintenant, c'est bien d'avoir tout ça.

01:50.240 --> 01:52.700
Un problème que nous avons avec cette classe

01:52.700 --> 01:55.960
est que nous pourrions changer les employés de l'extérieur,

01:55.960 --> 01:58.160
non seulement avec add employee, mais en

01:58.160 --> 02:01.710
accédant directement à la propriété de l'employé, tout comme nous

02:01.710 --> 02:04.430
pouvons le faire pour le nom, d'ailleurs.

02:04.430 --> 02:07.630
Donc, ce que je veux dire, c'est que nous pourrions aussi

02:07.630 --> 02:10.560
aller à la comptabilité, et ensuite toucher les employés,

02:10.560 --> 02:13.870
et peut-être ajouter un autre employé à l'indice deux,

02:13.870 --> 02:16.400
et il passe un Anna, comme ça.

02:16.400 --> 02:18.210
Si on fait ça et qu'on l'économise,

02:18.210 --> 02:20.290
on a trois employés et on a Anna.

02:20.290 --> 02:22.710
Maintenant, vous pourriez penser, bien super, nous avons un autre moyen.

02:22.710 --> 02:25.230
Lors de la création d'applications plus complexes,

02:25.230 --> 02:27.980
il est préférable d'éviter ce genre de situation.

02:27.980 --> 02:30.930
Il faut s'assurer qu'il n'y a qu'un seul chemin clair, qu'une

02:30.930 --> 02:34.870
seule façon d'utiliser votre classe, et que des choses comme ça, des façons

02:34.870 --> 02:37.280
alternatives de l'utiliser, ne sont pas vraiment

02:37.280 --> 02:38.530
supportées.

02:38.530 --> 02:41.230
Parce que si vous travaillez dans une équipe plus grande,

02:41.230 --> 02:42.920
un collègue va utiliser cette approche

02:42.920 --> 02:45.700
pour ajouter un employé et un autre collègue pourrait

02:45.700 --> 02:48.050
utiliser cette approche.

02:48.050 --> 02:49.280
Et tu ne veux pas ça.

02:49.280 --> 02:52.640
Vous voulez avoir une manière uniforme de le faire.

02:52.640 --> 02:55.960
Aussi, parce que peut-être dans la méthode d'ajout d'un employé, vous

02:55.960 --> 02:58.420
faites plus que simplement l'ajouter au tableau.

02:58.420 --> 02:59.770
Peut-être que vous voulez

02:59.770 --> 03:02.400
d'abord avoir une certaine validation etc. ici.

03:02.400 --> 03:04.940
Il se peut donc que vous ayez du code supplémentaire,

03:04.940 --> 03:06.610
qui ne s'exécute pas si vous assignez

03:06.610 --> 03:09.470
directement une nouvelle valeur ou si vous ajoutez une

03:09.470 --> 03:12.970
nouvelle valeur au tableau avec cette ligne ici.

03:12.970 --> 03:16.000
Donc vous ne voulez pas permettre que les employés

03:16.000 --> 03:19.884
soient accessibles comme ça de l'extérieur de la classe.

03:19.884 --> 03:22.340
Et TypeScript vous couvre.

03:22.340 --> 03:26.760
Vous pouvez transformer les employés en une propriété

03:26.760 --> 03:30.580
privée, un champ privé, en ajoutant le mot clé "private"

03:30.580 --> 03:32.220
devant.

03:32.220 --> 03:34.303
Maintenant, ce que private signifie,

03:34.303 --> 03:38.030
c'est que les employés sont maintenant une propriété, qui n'est

03:38.030 --> 03:41.210
accessible que de l'intérieur de la classe, donc de l'intérieur

03:41.210 --> 03:43.480
de l'objet créatif.

03:43.480 --> 03:46.700
Ainsi, toute méthode à l'intérieur de la classe département

03:46.700 --> 03:49.770
est capable de travailler avec les employés.

03:49.770 --> 03:52.570
Mais tu ne peux plus accéder comme ça.

03:52.570 --> 03:54.710
Ici, vous voyez que j'ai maintenant une erreur.

03:54.710 --> 03:57.280
Si j'essaie de l'enregistrer, je reçois une erreur

03:57.280 --> 03:59.870
de compilation indiquant que la propriété "employees"

03:59.870 --> 04:03.550
est privée et uniquement accessible dans la classe "department".

04:03.550 --> 04:07.100
Maintenant, nous forçons les gens à utiliser

04:07.100 --> 04:09.370
la méthode addEmployee pour

04:09.370 --> 04:12.690
ajouter des employés à ce département.

04:12.690 --> 04:16.760
Parce qu'ils obtiennent une erreur s'ils écrivent un code comme celui-ci.

04:16.760 --> 04:20.460
C'est ce qu'on appelle un modificateur ici, le mot-clé privé.

04:20.460 --> 04:23.470
Et en plus de privé, nous avons aussi public, qui est

04:23.470 --> 04:25.000
le défaut cependant.

04:25.000 --> 04:26.590
Vous n'avez pas besoin d'ajouter du public.

04:26.590 --> 04:29.590
Ainsi, un nom comme celui-ci est exactement le même

04:29.590 --> 04:31.650
qu'un nom précédé de public.

04:31.650 --> 04:34.300
La différence est que les propriétés publiques

04:34.300 --> 04:36.350
sont accessibles de l'extérieur.

04:36.350 --> 04:40.350
Ainsi, par exemple ici, je pourrais également contacter le nom

04:40.350 --> 04:43.600
et attribuer un nouveau nom ici si je le voulais.

04:43.600 --> 04:45.260
C'est possible.

04:45.260 --> 04:49.270
Pour les propriétés privées, ceci n'est pas possible.

04:49.270 --> 04:51.580
On ne peut les utiliser que de l'intérieur.

04:51.580 --> 04:52.800
Techniquement, d'ailleurs,

04:52.800 --> 04:55.700
JavaScript ne connaît pas les termes public et privé.

04:55.700 --> 04:59.630
Ce n'est que dans les versions très modernes ajoutées récemment

04:59.630 --> 05:01.320
qu'une telle chose existe.

05:01.320 --> 05:03.650
Dans le passé, JavaScript ne connaissait pas

05:03.650 --> 05:05.690
les propriétés privées ou publiques.

05:05.690 --> 05:08.520
Toutes les propriétés y étaient toujours publiques.

05:08.520 --> 05:10.630
TypeScript introduit cette fonctionnalité,

05:10.630 --> 05:13.561
qui ne fonctionne bien sûr pas pendant l'exécution,

05:13.561 --> 05:16.620
car JavaScript ne connaissait jusqu'à récemment que les

05:16.620 --> 05:18.780
propriétés publiques.

05:18.780 --> 05:21.290
Donc cette ligne ici, erreur figée pendant

05:21.290 --> 05:23.130
la compilation de TypeScript.

05:23.130 --> 05:27.000
Si vous le compilez néanmoins en JavaScript, ce code s'exécutera toujours

05:27.000 --> 05:30.140
au moment de l'exécution sans erreur car, une fois encore,

05:30.140 --> 05:32.800
le JavaScript seul, jusqu'à récemment, ne connaissait

05:32.800 --> 05:34.900
pas ce concept.

05:34.900 --> 05:37.350
Donc, selon la version pour laquelle vous compilez,

05:37.350 --> 05:38.720
il ne le saura toujours pas.

05:38.720 --> 05:40.770
Et donc, TypeScript ne prend en charge que cela

05:40.770 --> 05:42.980
parce qu'il le vérifie pendant la compilation,

05:42.980 --> 05:44.650
et non au moment de l'exécution.

05:44.650 --> 05:47.370
Avec elle, cependant, nous pouvons éviter ce genre de code

05:47.370 --> 05:49.863
et obliger tout le monde à écrire un code plus propre.
