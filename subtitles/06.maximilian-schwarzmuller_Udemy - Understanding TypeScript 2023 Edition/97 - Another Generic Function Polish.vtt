WEBVTT

00:02.140 --> 00:03.620
-: Więc kontynuujmy ćwiczenia

00:03.620 --> 00:06.220
z tymi rodzajami generycznymi, ponieważ wiem, że mogą

00:06.220 --> 00:08.305
być dziwne, aby owinąć głowę; W końcu są naprawdę

00:08.305 --> 00:09.970
proste chociaż.

00:09.970 --> 00:12.180
Stwórzmy średnią funkcję generyczną,

00:12.180 --> 00:14.810
policz i wydrukuj.

00:14.810 --> 00:19.810
Teraz ta funkcja powinna przyjąć jakiś argument, jakiś parametr.

00:20.330 --> 00:23.470
Nazwijmy go elementem, ale nazwa jest naprawdę zależna

00:23.470 --> 00:26.530
od ciebie, który powinien być typu ogólnego.

00:26.530 --> 00:28.340
Bo ja naprawdę mam gdzieś ten typ,

00:28.340 --> 00:30.380
przynajmniej w pewnych aspektach.

00:30.380 --> 00:33.400
Powiedzmy więc, że mamy jeden typ generyczny w tej

00:33.400 --> 00:35.800
funkcji i nasz parametr jest tego typu.

00:35.800 --> 00:38.350
To, nawiasem mówiąc, wszystko, co typowe dla typów generycznych.

00:38.350 --> 00:40.030
Jeśli masz funkcję generyczną, to

00:40.030 --> 00:42.180
często twój parametr będzie tego typu.

00:42.180 --> 00:43.890
Nie musi być, ale często tak właśnie

00:43.890 --> 00:45.890
pracuje się z funkcjami generycznymi, jak

00:45.890 --> 00:46.920
zobaczysz, gdy będziesz

00:46.920 --> 00:49.080
miał z nimi coraz więcej doświadczenia.

00:49.080 --> 00:50.670
Więc tutaj mamy count i print

00:50.670 --> 00:52.350
z naszym typem generycznym tutaj,

00:52.350 --> 00:54.430
a element jest tego typu.

00:54.430 --> 00:56.500
Teraz to, co chcę tutaj zwrócić,

00:56.500 --> 01:00.300
to nienda tuple z dwoma elementami, gdzie pierwszym elementem

01:00.300 --> 01:03.190
powinien być sam mój element, a drugim elementem

01:03.190 --> 01:07.070
powinien być ciąg znaków opisu.

01:07.070 --> 01:10.160
Może nazwiemy to count i opiszemy, dlatego.

01:10.160 --> 01:15.160
Więc tutaj dostałem mój tekst opisu, a tutaj powiem, że got

01:15.410 --> 01:19.890
no value, i chcę tego użyć, jeśli przekażemy element,

01:19.890 --> 01:22.620
który nie ma długości.

01:22.620 --> 01:25.570
Ponieważ mój pomysł z count i describe polega na tym, że możemy

01:25.570 --> 01:29.040
przekazać tablicę lub ciąg znaków, a my otrzymujemy z powrotem ilość

01:29.040 --> 01:32.040
znaków lub elementów w tym ciągu lub tablicy.

01:32.040 --> 01:34.040
Więc jeśli mamy pusty łańcuch

01:34.040 --> 01:37.440
lub pustą tablicę, chcę użyć got no value, ale

01:37.440 --> 01:42.440
tutaj, jeśli sprawdzę, że długość kropki elementu jest większa

01:43.210 --> 01:46.170
niż zero, to chcę ustawić tekst opisu

01:47.430 --> 01:52.430
na got plus długość kropki elementu plus elementy.

01:55.850 --> 01:58.100
Możesz być jeszcze bardziej szczegółowy

01:58.100 --> 02:03.100
i sprawdzić, czy długość jest równa jeden tutaj, a następnie powiedzieć,

02:06.590 --> 02:11.590
że dostał jeden element, w przeciwnym razie, jeśli długość elementu jest

02:11.720 --> 02:13.750
większa niż jeden, mamy tekst opisu

02:13.750 --> 02:18.750
równy got plus elementy długości elementu, tak że dostaliśmy formę liczby

02:18.990 --> 02:21.173
mnogiej w prawo.

02:22.850 --> 02:25.220
Teraz tutaj tekst opisu jest dla drugiego elementu

02:25.220 --> 02:27.040
i powrót tutaj. Teraz już widać

02:27.040 --> 02:29.480
tu typy narzekające na długość.

02:29.480 --> 02:32.350
Bo nie jest jasne, że element ma długość.

02:32.350 --> 02:34.770
Może więc trzeba jasno powiedzieć, że tak jest.

02:34.770 --> 02:38.430
Możemy to zrobić tworząc nowy interfejs lub typ niestandardowy

02:38.430 --> 02:41.060
ze słowem kluczowym type tutaj i tutaj pójdę

02:41.060 --> 02:44.750
na interfejs, który nazwę lengthy, który w końcu po prostu

02:44.750 --> 02:47.440
gwarantuje, że mamy obiekt z właściwością

02:47.440 --> 02:50.820
length, która powinna dać liczbę w końcu.

02:50.820 --> 02:52.870
A potem tutaj możemy ustawić ograniczenie i powiedzieć,

02:52.870 --> 02:54.740
że mówi, że T rozszerza długość.

02:54.740 --> 02:57.710
Więc wiemy, że cokolwiek dostaniemy, będziemy mieli właściwość

02:57.710 --> 03:01.053
length i tablica lub ciąg znaków miałby właściwość length.

03:02.030 --> 03:07.030
Teraz tutaj mogę konsola log policzyć i opisać

03:07.500 --> 03:11.240
i przekazać, powiedzmy, hi there.

03:11.240 --> 03:14.280
Teraz to działa, ponieważ ciąg ma właściwość długości.

03:14.280 --> 03:15.290
To nie jest obiekt.

03:15.290 --> 03:17.310
Jest to ciąg znaków, ale za kulisami Javascript

03:17.310 --> 03:19.980
konwertuje to na obiekt w locie, można powiedzieć, i dodaje właściwość

03:19.980 --> 03:23.940
length, gdy jej potrzebujemy.

03:23.940 --> 03:23.940
Dlatego

03:23.940 --> 03:26.960
też możemy śmiało nazwać go tak. Typ script w pierwszej kolejności,

03:26.960 --> 03:31.370
że tutaj zwracamy tablicę, w której znajduje się albo string albo element

03:31.370 --> 03:33.580
typu T. Teraz chcę mieć tuple,

03:33.580 --> 03:36.060
więc będę bardziej konkretny tutaj i ustawię typ

03:36.060 --> 03:39.110
zwrotu, aby był zasadniczo tablicą z dokładnie dwoma elementami,

03:39.110 --> 03:41.330
gdzie pierwszy element będzie typu T, a drugi

03:41.330 --> 03:43.850
element będzie typu string.

03:43.850 --> 03:46.270
Więc teraz mówię, że zwracamy tutaj tuple,

03:46.270 --> 03:49.360
gdzie pierwszym elementem będzie, cóż, dowolny element

03:49.360 --> 03:52.010
naszego typu generycznego, a drugim elementem

03:52.010 --> 03:54.110
będzie ciąg znaków.

03:54.110 --> 03:56.820
Teraz z tym, jeśli zapiszemy to, jest rekompilowany

03:56.820 --> 04:00.330
bez błędów i drukuje hi there, got nine elements, ponieważ mamy

04:00.330 --> 04:02.330
tam dziewięć znaków.

04:04.320 --> 04:06.890
Możemy też wywołać to z tablicą, gdzie mamy

04:06.890 --> 04:09.530
sport i gotowanie, a teraz zobaczysz, że

04:09.530 --> 04:12.460
dostaliśmy dwa elementy jako tekst opisu, albo

04:12.460 --> 04:15.990
z pustą tablicą oczywiście, w którym to przypadku, jeśli

04:15.990 --> 04:18.660
zapiszę, że dostaliśmy żadnej wartości,

04:18.660 --> 04:22.500
ale nie będziemy mogli tego wywołać na przykład z liczbą,

04:22.500 --> 04:24.103
ponieważ liczba nie ma właściwości

04:24.103 --> 04:28.090
length i dlatego to nie działa.

04:28.090 --> 04:32.900
Tak więc, tutaj znowu mamy naszą funkcję generyczną.

04:32.900 --> 04:35.043
Idea jest podobna do funkcji wcześniej.

04:35.043 --> 04:38.680
Chcemy trochę niespecjalnie określić rodzaj danych, które tutaj

04:38.680 --> 04:40.540
otrzymujemy. Tak naprawdę nie obchodzi

04:40.540 --> 04:43.180
nas, czy jest to ciąg, czy jest to tablica, czy cokolwiek innego,

04:43.180 --> 04:45.610
co ma właściwość length. Dbamy tylko o to, że ma właściwość

04:45.610 --> 04:47.930
length, a następnie chcemy coś z nią zrobić, ponieważ

04:47.930 --> 04:49.980
polegamy na właściwości length w naszym kodzie,

04:49.980 --> 04:51.970
więc musimy zagwarantować, że mamy to, ale

04:51.970 --> 04:53.540
poza tym naprawdę nie mamy żadnego

04:53.540 --> 04:55.370
interesu w tym, jaki typ danych otrzymujemy

04:55.370 --> 04:59.490
tutaj.

04:59.490 --> 04:59.490
Nie

04:59.490 --> 05:01.820
chcę blokować tego do łańcucha lub do tablicy i nie

05:01.820 --> 05:04.220
chcę tworzyć grupy przeciążeń, aby obsłużyć wszystkie

05:04.220 --> 05:05.830
różne możliwe typy.

05:05.830 --> 05:08.124
Nie chcę również tworzyć bardzo długiego

05:08.124 --> 05:10.970
typu unii tutaj, ponieważ mogę zapomnieć o typach, które

05:10.970 --> 05:13.610
mają właściwość długości, lub jeśli utworzę własny

05:13.610 --> 05:16.220
obiekt z właściwością długości, mogę nie pozwolić

05:16.220 --> 05:18.640
na to, jeśli ograniczę to tutaj, aby być typu,

05:18.640 --> 05:21.580
string i array lub cokolwiek takiego.

05:21.580 --> 05:23.500
Więc dlatego chcę być bardziej elastyczny

05:23.500 --> 05:25.380
i z typami generycznymi możemy być

05:25.380 --> 05:27.550
tym, nie dbamy o dokładny typ.

05:27.550 --> 05:30.080
Tutaj, dzięki ograniczeniu, dbam

05:30.080 --> 05:33.363
tylko o to, że ma właściwość długości.
