WEBVTT

00:02.540 --> 00:05.610
Eğitmen: Şimdi, bir ve aynı işlev için birden

00:05.610 --> 00:08.050
fazla işlev imzası tanımlamamıza olanak

00:08.050 --> 00:11.450
tanıyan bir özellik olan işlev aşırı yüklemelerini

00:11.450 --> 00:13.840
incelemek istiyorum.

00:13.840 --> 00:17.080
Bu da basitçe, örneğin bir fonksiyonu farklı parametrelerle çağırmanın

00:17.080 --> 00:20.340
birden fazla olası yoluna sahip olabileceğimiz ve daha sonra bu

00:20.340 --> 00:24.300
fonksiyonun içinde bir şeyler yapabileceğimiz anlamına gelir.

00:24.300 --> 00:26.540
Fonksiyon aşırı yüklemelerinin bize yardımcı olabileceği

00:26.540 --> 00:29.060
iyi bir örnek biraz daha yukarıda görülebilir.

00:29.060 --> 00:32.090
Daha önce yazdığımız bu add fonksiyonu, iki

00:32.090 --> 00:35.940
birleştirilebilir değer alır, yani dizeler veya sayılar

00:35.940 --> 00:37.960
alır ve TypeScript'in burada

00:37.960 --> 00:39.830
döndürdüğü dönüş türünü gördüğünüz

00:39.830 --> 00:43.450
gibi hepsi birleştirilebilirdir.

00:43.450 --> 00:45.370
Bu basitçe, TypeScript'in döndürdüğü

00:45.370 --> 00:47.960
şeyin de bir dize veya sayı olduğunu anladığı

00:47.960 --> 00:51.080
anlamına gelir, ancak aslında düşünürseniz, bu gerçekten

00:51.080 --> 00:52.880
doğru değildir.

00:52.880 --> 00:55.280
Yani, teknik olarak doğru, ancak iki sayı

00:55.280 --> 00:57.620
girdiğimizde dönüş türünün her zaman sayı

00:57.620 --> 00:59.400
olacağını biliyoruz.

00:59.400 --> 01:01.940
En az bir dize geçirirsek dönüş

01:01.940 --> 01:03.950
türü dize olacaktır.

01:03.950 --> 01:05.460
Peki bu neden önemli olabilir?

01:05.460 --> 01:08.225
Add fonksiyonunun şu şekilde yazıldığını unutmayın.

01:08.225 --> 01:11.060
Ve aslında aşağıdaki her şeyi yorumlayabilir

01:11.060 --> 01:15.390
ve fonksiyonun hemen altına yeni bir kod ekleyebilirsiniz.

01:15.390 --> 01:18.670
Şimdi burada add'i çağırarak sonucumu elde edersem, bir ve beş

01:18.670 --> 01:21.870
değerlerini geçiyorum, sonucun birleştirilebilir tipte

01:21.870 --> 01:23.390
olduğunu görüyorsunuz.

01:23.390 --> 01:27.010
Bunun bir sonucu olarak TypeScript, sonucun

01:27.010 --> 01:30.390
bir sayı mı yoksa dize mi olduğunu bilmez.

01:30.390 --> 01:34.510
Şimdi, eğer dizeler halinde geçiyorsak bu gerçekten önemli olabilir.

01:34.510 --> 01:39.510
Max Schwarz'ı buraya aktarırsam, bu işe yarar ancak yine de birleştirilebilir

01:39.700 --> 01:41.750
geri alırım.

01:41.750 --> 01:43.990
Sonuç olarak, sonuç üzerinde dize

01:43.990 --> 01:46.120
işlevlerini çağıramıyorum, örneğin

01:46.120 --> 01:50.600
beyaz boşluğu bölmek için split'i çağıramıyorum.

01:50.600 --> 01:52.870
Bunun işe yarayacağını biliyorum, çünkü

01:52.870 --> 01:55.270
fonksiyonu bu şekilde çağırdığımda, bunu

01:55.270 --> 01:57.200
if dalına dönüştüreceğimi ve bir dize

01:57.200 --> 01:59.980
geri alacağımı biliyorum, bu nedenle sonuçların

01:59.980 --> 02:03.030
dizeyi tutacağını biliyorum, ancak TypeScript sadece

02:03.030 --> 02:05.620
bir dize veya sayı tuttuğunu biliyor.

02:05.620 --> 02:08.350
Elbette, burada type casting kullanabilir ve TypeScript'e

02:08.350 --> 02:11.340
geri aldığımız şeyin bir string olduğunu söyleyebiliriz.

02:11.340 --> 02:13.930
Bunu daha önce öğrendiğiniz type casting

02:13.930 --> 02:16.040
sözdizimi ile yapabiliriz.

02:16.040 --> 02:18.840
Yine de, bunu yapmamızın uygun olmadığını iddia ediyorum,

02:18.840 --> 02:21.800
çünkü TypeScript'in bu işlevi bu şekilde çağırdığımızda

02:21.800 --> 02:24.560
her zaman bir dize alacağımızı anlamasını beklememize

02:24.560 --> 02:26.070
rağmen burada daha fazla kod yazmamız

02:26.070 --> 02:27.740
gerekiyor.

02:27.740 --> 02:30.890
Ancak TypeScript burada kodumuzu yeterince iyi analiz etmiyor

02:30.890 --> 02:33.700
ve işte bu noktada bir fonksiyon aşırı yüklemesi bize

02:33.700 --> 02:35.000
yardımcı olabilir.

02:35.000 --> 02:38.730
Bir fonksiyon aşırı yüklemesi, ana fonksiyonunuzun hemen

02:38.730 --> 02:41.880
üzerine aynı isimde fonksiyon yazarak yazılır,

02:41.880 --> 02:46.683
bu nedenle temel olarak bu satırı burada tekrarlarsınız, ancak küme parantezleri

02:47.880 --> 02:50.890
olmadan, bundan sonra küme parantezleri açılmaz

02:50.890 --> 02:54.080
ve kapanmaz ve şimdi burada belirli sayı ve sayı

02:54.080 --> 02:57.980
türlerini ve ardından en az bir sayı aldığınızda bu durum

02:57.980 --> 03:03.410
için find dönüş türünü kullanmak istiyorsunuz.

03:03.410 --> 03:06.643
Ve o zaman dönüş türünün sayı olduğunu söyleyebiliriz.

03:08.840 --> 03:10.980
Şimdi bununla TypeScript'e diyoruz

03:10.980 --> 03:14.980
ki, bu fonksiyonu çağırırsak ve her iki argüman da bir sayı ise, bu

03:14.980 --> 03:17.180
fonksiyon bir sayı döndürür.

03:17.180 --> 03:19.430
Bu elbette JavaScript'te çalışacak bir sözdizimi

03:19.430 --> 03:22.480
değildir, derleme sürecinde TypeScript tarafından ortadan

03:22.480 --> 03:24.430
kaldırılacaktır.

03:24.430 --> 03:28.480
Ancak TypeScript bu fonksiyon bilgisini ve buradaki fonksiyon

03:28.480 --> 03:31.380
bildirimini bir araya getirir ve temel olarak

03:31.380 --> 03:33.640
buradaki iki satırın bilgisini

03:33.640 --> 03:35.550
birleştirir.

03:35.550 --> 03:38.590
Ve şimdi tamam, bu işlevi burada birleştirilebilir

03:38.590 --> 03:41.490
türden A ve B ile veya sayı türünden A ve B ile

03:41.490 --> 03:43.790
çağırabiliriz.

03:43.790 --> 03:47.060
Bu arada, aşırı yüklemelerinizde buraya daha fazla veya daha az parametre

03:47.060 --> 03:50.100
de ekleyebilirsiniz, bu konuda gerçekten esneksiniz.

03:50.100 --> 03:53.640
Ayrıca buraya add fonksiyonunu eklersiniz ve

03:53.640 --> 03:57.620
sadece bir sayı bekler ve bir sayı döndürürsünüz ve

03:57.620 --> 04:01.210
diğer aşırı yüklerimizde de B'yi isteğe bağlı

04:01.210 --> 04:03.270
yaparsak bu da çalışır.

04:03.270 --> 04:05.254
Çünkü sonuçta elbette buradaki kodunuzun

04:05.254 --> 04:08.630
her zaman çalıştığından ve sonunda ihtiyacınız olan tüm argümanları

04:08.630 --> 04:10.850
aldığınızdan emin olmanız gerekir.

04:10.850 --> 04:13.610
Yani B burada isteğe bağlı olacak, o zaman bunun işe yaradığını

04:13.610 --> 04:15.170
görüyorsunuz, şimdi elbette B'nin

04:15.170 --> 04:17.850
orada potansiyel olarak isteğe bağlı olması etrafında

04:17.850 --> 04:19.550
çalışmamız gerekecek.

04:19.550 --> 04:21.390
Ancak buna ihtiyacım yok, bu yüzden bundan

04:21.390 --> 04:24.460
kurtulacağım ve sadece bunu bırakacağım, ancak bunu dizelerle

04:24.460 --> 04:27.200
çağırdığımızda bir aşırı yükleme de istemedim.

04:27.200 --> 04:30.060
Bu yüzden buraya A'nın bir dize ve B'nin bir dize

04:30.060 --> 04:33.450
olduğu başka bir add fonksiyonu yüklemesi ekleyeceğim

04:33.450 --> 04:36.090
ve böylece döndürdüğümüz şeyin bir dize olacağı

04:36.090 --> 04:38.460
konusunda oldukça net olacağım.

04:38.460 --> 04:40.280
Bu arada, buradaki aşırı yük satırlarından

04:40.280 --> 04:43.660
sonra noktalı virgül eklemek iyi bir uygulamadır.

04:43.660 --> 04:46.560
Şimdi bununla diyorum ki, eğer bu fonksiyonu iki sayı ile

04:46.560 --> 04:49.100
çağırırsak, her zaman bir sayı geri alırız.

04:49.100 --> 04:52.170
İki dizeyle çağırırsak, her zaman bir dize geri alırız.

04:52.170 --> 04:54.510
Bir dize ve bir sayı ile çağırırsak, teknik olarak

04:54.510 --> 04:57.853
her zaman bir dize geri alırız, ancak tüm bu olası kombinasyonları

04:57.853 --> 04:59.410
buraya eklemek istemiyorum, elbette

04:59.410 --> 05:01.240
daha fazlasını ekleyebilirim ve sonra

05:01.240 --> 05:03.173
buraya sayı ekleyebilirim veya sahip

05:04.040 --> 05:07.500
olabileceğimiz diğer kombinasyon, ki bu da budur.

05:07.500 --> 05:10.060
Sanırım şimdi tüm kombinasyonları ekledim.

05:10.060 --> 05:12.540
Ve şimdi burada tüm potansiyel değer kombinasyonlarını

05:12.540 --> 05:16.040
ve her durumda ne döndürdüğümüzü listeliyorum.

05:16.040 --> 05:18.260
Şimdi bununla birlikte, aşağıdaki hatanın ortadan

05:18.260 --> 05:20.520
kalktığını görüyorsunuz çünkü artık TypeScript,

05:20.520 --> 05:24.790
her ikisi de string olan bu iki değerle add'i çağırırsak sonuçların string türünde olacağını

05:24.790 --> 05:25.623
biliyor.

05:25.623 --> 05:28.510
Ve eğer eklentinin üzerine gelirsem, üç ek aşırı

05:28.510 --> 05:31.100
yüklemenin mevcut olduğunu görürsünüz.

05:31.100 --> 05:32.980
Burada add öğesini iki dizeyle çağırıyorum,

05:32.980 --> 05:35.560
ancak TypeScript bunu çağırmanın üç farklı yolu daha olduğunu

05:35.560 --> 05:36.630
biliyor.

05:36.630 --> 05:39.450
Örneğin, bir dize ve bir sayı ile,

05:39.450 --> 05:41.340
bu durumda bir dize,

05:41.340 --> 05:46.340
bir sayı ve bir dize veya iki sayı ile geri alırım.

05:47.430 --> 05:48.630
Bu da işe yarayabilir.

05:48.630 --> 05:50.210
O zaman elbette split'i çağıramam

05:50.210 --> 05:52.650
çünkü TypeScript, bunu iki sayıyla çağırdığımda

05:52.650 --> 05:54.630
bir sayı alacağımı ve bir sayı üzerinde

05:54.630 --> 05:58.253
split'i çağıramayacağınızı doğru bir şekilde tanımlar.

05:59.260 --> 06:02.010
Yani bunlar fonksiyon aşırı yüklemeleridir ve TypeScript'in

06:02.010 --> 06:04.060
dönüş türünü kendi başına doğru bir şekilde

06:04.060 --> 06:06.780
çıkaramayacağı buradaki gibi durumlarda size yardımcı

06:06.780 --> 06:08.590
olabilirler, burada fonksiyonunuzda

06:08.590 --> 06:11.660
destekleyebileceğiniz farklı kombinasyonlar için neyin

06:11.660 --> 06:16.033
döndürüldüğü konusunda gerçekten net olabilirsiniz.
