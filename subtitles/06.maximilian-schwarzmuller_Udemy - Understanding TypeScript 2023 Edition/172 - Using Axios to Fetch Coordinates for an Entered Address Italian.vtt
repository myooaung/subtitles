WEBVTT

00:02.390 --> 00:04.530
Istruttore: ora l'invio di richieste è possibile

00:04.530 --> 00:06.890
senza un pacchetto di terze parti.

00:06.890 --> 00:10.140
Nei moderni browser JavaScript, è necessario

00:10.140 --> 00:11.910
recuperare le API.

00:11.910 --> 00:13.620
È integrata nei browser, è una

00:13.620 --> 00:16.710
funzione disponibile a livello globale e può essere

00:16.710 --> 00:19.600
utilizzata per inviare richieste agli URL.

00:19.600 --> 00:22.450
Non c'è nulla che sia contrario a questa API, a

00:22.450 --> 00:24.870
parte il fatto che la gestione degli errori

00:24.870 --> 00:27.210
può essere un po' macchinosa.

00:27.210 --> 00:29.250
Ma voglio anche fare pratica con l'uso

00:29.250 --> 00:31.123
di librerie di terze parti.

00:31.960 --> 00:36.070
Pertanto, utilizzeremo il popolarissimo pacchetto axios.

00:36.070 --> 00:38.510
È un pacchetto che si può usare in JavaScript

00:38.510 --> 00:43.510
e quindi anche in TypeScript per inviare richieste HTTP.

00:43.880 --> 00:47.263
Quindi dobbiamo solo installare axios per iniziare a usarlo.

00:48.100 --> 00:51.080
Per questo, nel nostro progetto in cui possiamo

00:51.080 --> 00:54.150
usare NPM per gestire le dipendenze, possiamo eseguire

00:54.150 --> 00:57.620
npm install, dash, dash save axios in questo modo e questo

00:57.620 --> 01:00.520
installerà il pacchetto axios.

01:00.520 --> 01:04.750
Con questa installazione, possiamo ora importare axios qui,

01:04.750 --> 01:07.390
importare axios da axios, e vedremo qualcosa

01:07.390 --> 01:09.170
di interessante.

01:09.170 --> 01:12.090
Se ora inizio a usare questo e digito un punto qui, ottengo

01:12.090 --> 01:13.990
il completamento automatico.

01:13.990 --> 01:16.290
Ad esempio, abbiamo un metodo get che

01:16.290 --> 01:18.523
invia una richiesta di get a un URL.

01:19.850 --> 01:23.150
Quindi abbiamo un supporto integrato per TypeScript.

01:23.150 --> 01:25.640
Se andiamo su node modules e diamo

01:25.640 --> 01:29.670
un'occhiata al pacchetto axios, eccolo qui.

01:29.670 --> 01:33.970
Vedrete che lì c'è un indice. dts.

01:33.970 --> 01:38.970
Quindi gli autori della libreria axios hanno già fornito la loro libreria

01:39.430 --> 01:43.750
insieme a un pacchetto di traduzione TypeScript.

01:43.750 --> 01:47.440
Lì, tutto viene spiegato in TypeScript.

01:47.440 --> 01:50.120
Questo pacchetto o questo file spiega sostanzialmente

01:50.120 --> 01:53.660
a TypeScript cosa è in grado di fare questa libreria JavaScript

01:53.660 --> 01:55.600
e quali tipi utilizza.

01:55.600 --> 01:59.100
Ora alcune librerie lo fanno e axios è una di queste.

01:59.100 --> 02:02.070
Si capisce subito se una libreria fa questo o no,

02:02.070 --> 02:03.420
se si inizia a usarla.

02:03.420 --> 02:05.520
Se non si ottiene il supporto per il completamento

02:05.520 --> 02:07.930
automatico e si ottengono molti errori di compilazione,

02:07.930 --> 02:10.750
probabilmente è necessario installare tipi aggiuntivi.

02:10.750 --> 02:12.970
Se si ottiene un buon supporto come

02:12.970 --> 02:16.120
qui e non si ottengono errori di compilazione, allora

02:16.120 --> 02:18.140
si ha già una libreria con traduzioni

02:18.140 --> 02:20.170
di tipo integrate.

02:20.170 --> 02:23.120
Pertanto, non è necessario installare alcun tipo aggiuntivo.

02:23.120 --> 02:26.240
Buono a sapersi e qui abbiamo un ottimo esempio.

02:26.240 --> 02:27.800
Quindi, dato che abbiamo un supporto integrato,

02:27.800 --> 02:30.410
possiamo iniziare a usare l'accesso immediatamente.

02:30.410 --> 02:34.350
Ora voglio inviare una richiesta HTTP a questo URL.

02:34.350 --> 02:37.980
Copiamo questo URL e inseriamolo qui.

02:37.980 --> 02:40.220
E lo inserirò tra i backtick per

02:40.220 --> 02:42.440
creare un template letterale,

02:42.440 --> 02:45.880
in modo da poter facilmente scambiare parti di questa

02:45.880 --> 02:49.050
stringa con altri valori dinamici.

02:49.050 --> 02:51.730
Incolliamo quindi la stringa, che è piuttosto lunga,

02:51.730 --> 02:55.460
e iniziamo sostituendo la chiave API alla fine con la nostra chiave

02:55.460 --> 02:59.210
API di Google, che abbiamo memorizzato in questa costante.

02:59.210 --> 03:01.690
Poiché si tratta di un template letterale, possiamo

03:01.690 --> 03:04.110
aggiungere il segno del dollaro, le parentesi

03:04.110 --> 03:09.110
graffe e quindi indicare la chiave API di Google per utilizzare questa costante.

03:10.820 --> 03:13.240
Inoltre, scambiamo questo indirizzo.

03:13.240 --> 03:15.500
Qui è stato inserito un indirizzo fittizio e

03:15.500 --> 03:17.130
naturalmente si vuole utilizzare

03:17.130 --> 03:19.300
l'indirizzo inserito dall'utente.

03:19.300 --> 03:22.540
Una nota importante: questo indirizzo, ovviamente,

03:22.540 --> 03:24.910
è esattamente il testo inserito dall'utente

03:24.910 --> 03:27.560
e può contenere caratteri speciali, spazi

03:27.560 --> 03:30.650
bianchi, virgole e molto altro.

03:30.650 --> 03:32.250
E non tutti questi caratteri

03:32.250 --> 03:35.580
e simboli sono supportati negli URL.

03:35.580 --> 03:37.750
Dobbiamo quindi convertire la stringa

03:37.750 --> 03:40.550
inserita in una stringa compatibile con l'URL.

03:40.550 --> 03:43.810
E fortunatamente, TypeScript e JavaScript in particolare

03:43.810 --> 03:46.940
hanno una funzione integrata che ci aiuta in questo

03:46.940 --> 03:50.460
senso, la funzione encode URI.

03:50.460 --> 03:53.020
Possiamo chiamarlo e passargli una stringa,

03:53.020 --> 03:54.770
che verrà convertita in una

03:54.770 --> 03:57.460
stringa compatibile con gli URL.

03:57.460 --> 03:59.845
Abbiamo così ottenuto l'URL finito

03:59.845 --> 04:01.600
a cui inviare la richiesta

04:01.600 --> 04:04.900
per ottenere le nostre coordinate.

04:04.900 --> 04:07.390
Ora get ci fornisce una promessa perché, ovviamente,

04:07.390 --> 04:10.620
l'invio di tale richiesta è un'attività asincrona.

04:10.620 --> 04:13.430
E poi abbiamo un registro se questo ha successo

04:13.430 --> 04:15.690
o se abbiamo un errore tecnico o

04:15.690 --> 04:18.620
un codice di risposta di errore.

04:18.620 --> 04:21.560
A questo punto, registreremo nella console tutti gli errori

04:21.560 --> 04:24.710
che potremmo ricevere, perché normalmente dovremmo riuscire.

04:24.710 --> 04:27.820
Pertanto, mi aspetto la mia risposta nel blocco

04:27.820 --> 04:32.400
then e voglio anche registrare questa risposta then.

04:32.400 --> 04:35.820
Quindi, ora, direi di vedere cosa ci offre questo.

04:35.820 --> 04:39.720
Eseguiamo nuovamente NPM start per richiamare il processo webpack e iniziare

04:39.720 --> 04:40.953
a costruirlo.

04:42.120 --> 04:43.790
Torniamo alla nostra applicazione

04:43.790 --> 04:47.220
e inseriamo un luogo come la Sixth Avenue.

04:47.220 --> 04:50.090
Se premo Indirizzo di ricerca, dopo un po' si ottiene

04:50.090 --> 04:51.480
un risultato qui.

04:51.480 --> 04:53.660
Si dovrebbe ottenere un codice di stato 200, che

04:53.660 --> 04:56.120
significa che la richiesta è andata a buon fine.

04:56.120 --> 04:59.090
E si ha un campo dati che contiene i dati

04:59.090 --> 05:01.240
con cui il server risponde.

05:01.240 --> 05:03.890
Questo campo dati ha un campo risultati e al suo

05:03.890 --> 05:06.570
interno abbiamo un array, come si può notare.

05:06.570 --> 05:10.690
In questo array abbiamo un paio di elementi, il cui numero varia.

05:10.690 --> 05:13.770
E questi sono sostanzialmente i risultati trovati da Google.

05:13.770 --> 05:16.740
E il primo risultato è in genere il migliore.

05:16.740 --> 05:18.790
Quindi, se si dà un'occhiata a questo, si vede, ad

05:18.790 --> 05:20.460
esempio, l'indirizzo formattato.

05:20.460 --> 05:22.520
Quindi l'indirizzo che Google ha trovato per questo

05:22.520 --> 05:23.790
indirizzo che abbiamo inserito,

05:23.790 --> 05:26.570
è un po' più completo di quello che abbiamo inserito.

05:26.570 --> 05:29.300
E qui abbiamo la chiave geometrica.

05:29.300 --> 05:31.880
Se lo espandiamo, vediamo che a sua volta ha

05:31.880 --> 05:35.240
una chiave di localizzazione e che alla fine è un oggetto

05:35.240 --> 05:37.540
con le coordinate che ci interessano,

05:37.540 --> 05:39.700
una latitudine e una longitudine.

05:39.700 --> 05:43.000
Quindi, alla fine, dobbiamo scavare nei dati, nei risultati

05:43.000 --> 05:47.390
e poi il primo risultato, la geometria, la posizione e avremo un oggetto con

05:47.390 --> 05:50.030
una latitudine e una longitudine.

05:50.030 --> 05:52.840
In seguito potremo visualizzare la latitudine

05:52.840 --> 05:55.240
e la longitudine su una mappa.

05:55.240 --> 05:57.430
Quindi, per ora, estraiamo questo

05:57.430 --> 05:59.360
e otteniamo le nostre coordinate

05:59.360 --> 06:04.360
accedendo ai risultati di response dot data dot.

06:04.600 --> 06:09.600
E poi c'è il primo risultato, la posizione del punto geometrico, per cui è necessario

06:11.200 --> 06:13.093
approfondire questo aspetto.

06:15.130 --> 06:16.880
Ora, quello che si noterà è

06:16.880 --> 06:19.850
che mentre TypeScript non si lamenta, non c'è

06:19.850 --> 06:23.280
nemmeno un buon supporto per TypeScript, giusto?

06:23.280 --> 06:25.740
Se digito un punto qui, non suggerisce l'esistenza

06:25.740 --> 06:27.620
di una proprietà di risultati.

06:27.620 --> 06:30.350
E in effetti, posso provare ad accedere a qualsiasi

06:30.350 --> 06:33.840
cosa qui, anche a qualcosa che non esiste nella risposta, e questo

06:33.840 --> 06:34.820
ha senso.

06:34.820 --> 06:38.010
Come fa TypeScript a sapere cosa ci sarà nella risposta

06:38.010 --> 06:40.920
di qualsiasi URL a cui si invia una richiesta?

06:40.920 --> 06:42.810
TypeScript non va avanti e invia

06:42.810 --> 06:44.970
la richiesta durante lo sviluppo per

06:44.970 --> 06:46.510
scoprire cosa c'è dentro,

06:46.510 --> 06:49.170
anche questo non sarebbe un bene.

06:49.170 --> 06:51.400
Ma possiamo dire a TypeScript cosa ci

06:51.400 --> 06:53.950
aspettiamo di trovare nella risposta, perché

06:53.950 --> 06:58.950
questo metodo get è in realtà un metodo generico e c'è qualsiasi cosa qui, che è in realtà

06:59.040 --> 07:02.830
il tipo di risposta che ci aspettiamo di ottenere.

07:02.830 --> 07:06.880
Quindi, posso aggiungere il mio tipo di risposta e

07:06.880 --> 07:11.270
posso dire a TypeScript che ciò che mi aspetto è un oggetto

07:11.270 --> 07:15.260
che ha una chiave results, che a sua volta è un array

07:15.260 --> 07:18.330
pieno di oggetti, dove ogni oggetto ha

07:18.330 --> 07:22.170
una chiave geometry, che a sua volta è un oggetto,

07:22.170 --> 07:24.330
che ha una chiave location,

07:24.330 --> 07:28.160
che a sua volta è un oggetto, che ha una latitudine,

07:28.160 --> 07:31.170
che è un numero, e una longitudine, che

07:31.170 --> 07:33.510
è un numero.

07:33.510 --> 07:36.030
Si tratta quindi di un tipo decisamente complesso.

07:36.030 --> 07:39.400
Ma se digitiamo un punto qui, ottengo il completamento automatico

07:39.400 --> 07:42.220
e TypeScript capisce a cosa sto accedendo.

07:42.220 --> 07:44.860
Naturalmente, possiamo anche estrarre questo tipo da

07:44.860 --> 07:46.620
qui e creare il nostro alias di tipo.

07:46.620 --> 07:50.497
Forse qui, la risposta di Google alla geocodifica.

07:53.220 --> 07:55.380
Questo sarebbe il mio tipo personalizzato

07:55.380 --> 07:58.420
e poi posso dire a TypeScript che qui mi aspetto di ottenere

07:58.420 --> 08:01.540
la risposta di Google geocoding.

08:01.540 --> 08:03.900
Naturalmente, la risposta non contiene

08:03.900 --> 08:07.020
solo l'array di risultati, ma anche un codice di

08:07.020 --> 08:09.460
stato e altri campi in ogni elemento dell'array

08:09.460 --> 08:13.040
di risultati, quindi la geometria.

08:13.040 --> 08:17.030
Naturalmente, si possono aggiungere tutti questi campi

08:18.210 --> 08:21.330
al tipo personalizzato, ma qui voglio concentrarmi

08:21.330 --> 08:25.640
solo sui valori che mi interessano attivamente.

08:25.640 --> 08:27.360
C'è quindi un altro campo che

08:27.360 --> 08:30.900
aggiungerò, ovvero lo stato accanto ai risultati.

08:30.900 --> 08:34.520
Quindi, qui in alto, abbiamo lo stato, che sarà una stringa

08:34.520 --> 08:35.500
che ci dirà se Google

08:35.500 --> 08:38.390
ha avuto successo o meno.

08:38.390 --> 08:41.810
E lo stato sarà effettivamente ok o un

08:41.810 --> 08:44.010
paio di altri valori.

08:44.010 --> 08:46.910
Si tratta in pratica di un messaggio di stato con cui

08:46.910 --> 08:50.020
Google ci dice se è riuscito o meno a recuperare le coordinate

08:50.020 --> 08:51.890
di questo indirizzo.

08:51.890 --> 08:54.000
E naturalmente, nei documenti ufficiali possiamo

08:54.000 --> 08:57.280
apprendere che tipo di risposte potremmo ricevere qui.

08:57.280 --> 08:58.900
Se si scorre un po' più in basso

08:58.900 --> 09:01.070
e si fa clic su Comprendere la risposta, si

09:01.070 --> 09:04.240
apprende cosa c'è all'interno della risposta ricevuta e quindi

09:04.240 --> 09:07.000
si fa clic su Geocodifica delle risposte.

09:07.000 --> 09:08.580
E poi, in Codici di stato, si

09:08.580 --> 09:11.090
conoscono i codici di stato disponibili.

09:11.090 --> 09:15.090
Ad esempio, tutti abbiamo ottenuto zero risultati se non è stato trovato nulla.

09:15.090 --> 09:16.850
Abbiamo anche un paio di altri codici,

09:16.850 --> 09:19.223
ma qui mi interessano solo questi due.

09:20.200 --> 09:23.310
Quindi dico a TypeScript che qui ottengo un codice di stato che

09:23.310 --> 09:24.890
è uno di questi due valori.

09:24.890 --> 09:27.480
Anche in questo caso, potrebbe avere un valore

09:27.480 --> 09:29.830
numerico, ma per me va bene così.

09:29.830 --> 09:31.640
Come ho detto, è possibile scriverlo

09:31.640 --> 09:33.700
in modo più completo.

09:33.700 --> 09:36.230
Ora, con questa aggiunta, nel blocco then, possiamo

09:36.230 --> 09:41.230
verificare se response dot data dot status non è ok, il che significa che qualcosa è andato storto

09:41.580 --> 09:44.120
e, in questo caso, possiamo lanciare un errore

09:44.120 --> 09:46.710
e quindi ci ritroveremo nel blocco catch, dove potremo

09:46.710 --> 09:48.090
impostare la gestione degli

09:48.090 --> 09:49.810
errori.

09:49.810 --> 09:54.280
Quindi verrà lanciato un errore: "Impossibile recuperare la posizione".

09:54.280 --> 09:57.080
E poi qui, nel gestore degli errori, possiamo lanciare

09:57.080 --> 09:59.150
un avviso in cui viene visualizzato almeno

09:59.150 --> 10:01.230
il messaggio di errore.

10:01.230 --> 10:04.660
Naturalmente, si tratta solo di una gestione degli errori molto elementare.

10:04.660 --> 10:06.950
Altrimenti, se la risposta è positiva,

10:06.950 --> 10:09.910
recuperiamo le nostre coordinate e ora possiamo usarle

10:09.910 --> 10:12.113
per visualizzarle su una mappa.
