WEBVTT

00:02.200 --> 00:04.080
مدرس: حان الوقت لملف جديد آخر.

00:04.080 --> 00:09.080
سأعيد تسمية التطبيق. هنا إلى الأسماء المستعارة للاتحاد. ts ، وأضف تطبيقًا

00:11.100 --> 00:13.760
جديدًا. ts حيث يمكننا البدء

00:13.760 --> 00:16.370
من الصفر مرة أخرى ، أغلق الملف الآخر.

00:16.370 --> 00:20.660
والآن أريد أن أتعمق أكثر في الوظائف.

00:20.660 --> 00:22.640
الآن ، بالطبع ، مع وظائف تعمل بالفعل.

00:22.640 --> 00:24.940
على سبيل المثال ، هنا في ملف الأسماء المستعارة

00:24.940 --> 00:26.340
الاتحاد مع وظيفة الجمع.

00:26.340 --> 00:29.260
وعلى سبيل المثال ، رأيت أنه بالنسبة للوظائف

00:29.260 --> 00:32.520
، يمكنك تعيين أنواع لمعلمات الوظائف.

00:32.520 --> 00:34.310
حسنًا ، اتضح أن هناك المزيد الذي

00:34.310 --> 00:36.483
يمكنك القيام به مع الوظائف والأنواع.

00:37.590 --> 00:40.430
لذلك سأعيد إنشاء وظيفة الإضافة الخاصة بي ،

00:40.430 --> 00:43.373
والتي تقبل ببساطة الأرقام ، وليس السلاسل.

00:44.270 --> 00:48.340
وهو ما يفعل شيئًا واحدًا بسيطًا ، فهو يعيد n واحد زائد n اثنان ، لذلك

00:48.340 --> 00:49.513
ليس صعبًا جدًا.

00:51.004 --> 00:53.740
كما ذكرت ، يمكننا تعيين أنواع للمعلمات

00:53.740 --> 00:55.180
، وهذا ليس جديدًا.

00:55.180 --> 00:57.030
ومع ذلك ، فإن الوظيفة

00:57.030 --> 01:01.050
بشكل عام لها نوع آخر مهم ، ولها نوع إرجاع.

01:01.050 --> 01:03.990
وهنا يتم الاستدلال على نوع الإرجاع بواسطة TypeScript.

01:03.990 --> 01:06.490
يمكننا رؤيته إذا كنا نحوم فوق الإضافة.

01:06.490 --> 01:10.760
هنا في النهاية ، يصف النقطتان بعد قائمة المعلمات

01:10.760 --> 01:14.190
، وهذا هنا ، نوع الإرجاع للوظيفة.

01:14.190 --> 01:16.800
لذلك نوع القيمة التي تم إرجاعها.

01:16.800 --> 01:20.020
هنا ، سأعيد إضافة n واحد و n اثنين.

01:20.020 --> 01:23.050
وبما أن كلا المدخلات عبارة عن أرقام ، فإن TypeScript

01:23.050 --> 01:24.930
قادرة على استنتاج أن نتيجة هذا

01:24.930 --> 01:26.770
ستكون رقمًا ، وبما أننا نعيدها

01:26.770 --> 01:28.820
، فإن نوع الإرجاع لبيانات الوظيفة

01:28.820 --> 01:30.830
هذه سيكون رقمًا.

01:30.830 --> 01:33.320
إذا قمت بربطها كسلاسل هنا ، مع

01:33.320 --> 01:35.363
toString على سبيل المثال

01:36.550 --> 01:39.030
، فإن TypeScript ستستنتج بشكل

01:39.030 --> 01:41.900
صحيح أننا نعيد سلسلة هنا.

01:41.900 --> 01:44.350
الآن بالطبع ، يمكننا دائمًا تعيين نوع

01:44.350 --> 01:46.910
إرجاع هنا بشكل صريح عن طريق إضافة نقطتين

01:46.910 --> 01:48.490
بعد قائمة المعلمات ، ثم

01:48.490 --> 01:51.263
النوع الذي تريد إرجاعه ، مثل الرقم.

01:52.850 --> 01:54.560
سيكون هذا من نفس النوع الذي تم استنتاجه.

01:54.560 --> 01:56.760
إذا قمت ، على سبيل المثال ، بتعيين

01:56.760 --> 02:00.020
هذا على سلسلة ، فسأحصل على خطأ هنا ، لأنه من الواضح

02:00.020 --> 02:03.540
أن حسابي هنا لا يتطابق مع نوع الإرجاع الموصوف.

02:03.540 --> 02:06.480
الآن تمامًا كما هو الحال مع المتغيرات ، من الجيد

02:06.480 --> 02:10.080
ترك TypeScript يقوم بعمله فيما يتعلق باستدلال النوع.

02:10.080 --> 02:12.610
وإذا لم يكن لديك سبب محدد لتعيين

02:12.610 --> 02:14.810
النوع بشكل صريح ، فلا يجب عليك

02:14.810 --> 02:17.090
بالتالي تعيين النوع ، وبدلاً

02:17.090 --> 02:20.470
من ذلك تدع TypeScript يستنتج النوع.

02:20.470 --> 02:22.660
فيما يتعلق بأنواع الإرجاع ، هناك

02:22.660 --> 02:25.910
نوع واحد مثير للاهتمام لم نشهده من قبل ، والذي قد

02:25.910 --> 02:27.530
يكون جديدًا بالنسبة لك

02:27.530 --> 02:30.240
إذا كان عليك تجربة لغات برمجة أخرى.

02:30.240 --> 02:31.200
لأنه نوع غير موجود

02:31.200 --> 02:33.250
بالفعل في JavaScript.

02:33.250 --> 02:35.180
إنه نوع الفراغ.

02:35.180 --> 02:38.160
لنفترض أن لدينا طريقة printResult.

02:38.160 --> 02:41.190
هناك نحصل على وسيطة رقمية ، والتي

02:41.190 --> 02:44.120
يجب أن تكون رقمًا جيدًا.

02:44.120 --> 02:47.510
وهناك ، أريد أن أعزّي. سجل الأسطوانات.

02:47.510 --> 02:49.450
وأريد المواساة. سجلها كجزء من سلسلة

02:49.450 --> 02:52.150
، حيث أقول النتيجة بالإضافة إلى الأسطوانات.

02:52.150 --> 02:53.670
الآن سيتم ربط هذا بسلسلة

02:53.670 --> 02:56.090
واحدة طويلة ، وسيتم إخراجها.

02:56.090 --> 02:57.777
والآن يمكنني استدعاء printResult.

02:57.777 --> 03:01.020
وعلى سبيل المثال ، قم بتمرير نتيجة استدعاء

03:01.020 --> 03:05.010
دالة الجمع ، مع خمسة زائد ، لنقل 12.

03:05.010 --> 03:07.670
لذلك أقوم بتنفيذ عملية الجمع هنا ، مع رقمين.

03:07.670 --> 03:10.160
ونتيجة لذلك ، فإن ما يضيف عوائد ،

03:10.160 --> 03:13.130
يتم تمريره كوسيطة إلى printResult.

03:13.130 --> 03:15.780
وهذا يجب طباعته على وحدة التحكم.

03:15.780 --> 03:19.150
إذا قمنا الآن بتجميع هذا ثم ألقينا نظرة عليه في

03:19.150 --> 03:21.110
صفحتنا ، أو على صفحتنا هنا

03:21.110 --> 03:24.280
، فسنرى النتيجة 17 ، والتي تبدو منطقية.

03:24.280 --> 03:25.660
الآن الشيء المثير للاهتمام

03:25.660 --> 03:27.640
هنا هو نوع إرجاع printResult.

03:27.640 --> 03:30.353
ما هو نوع الإرجاع هنا؟

03:31.240 --> 03:33.240
لذا ربما تعتقد أنه سلسلة ، لأنني

03:33.240 --> 03:35.150
أقوم بإنشاء سلسلة هنا.

03:35.150 --> 03:37.360
لكن ضع في اعتبارك ، نحن لا نعيد هذا.

03:37.360 --> 03:39.400
نحن لا نعيد أي شيء هنا.

03:39.400 --> 03:42.010
وبالتالي فإن هذه الوظيفة printResult

03:42.010 --> 03:44.990
هنا لها نوع إرجاع خاص ، باطل.

03:44.990 --> 03:47.910
الآن قد تلاحظ عدم وجود نوع إرجاع من

03:47.910 --> 03:49.830
لغات البرمجة الأخرى.

03:49.830 --> 03:52.230
هناك لديك شيء مثل هذا.

03:52.230 --> 03:53.940
لا يعرف JavaScript ذلك

03:53.940 --> 03:56.740
حقًا ، أو ليس له اسم لهذا الموقف.

03:56.740 --> 03:58.590
TypeScript ، مع ذلك ، يفعل.

03:58.590 --> 04:01.840
إذن ، هذه الوظيفة هنا لها نوع إرجاع من الفراغ.

04:01.840 --> 04:04.065
وبالطبع ، لا تحتاج إلى تحديد ذلك هنا.

04:04.065 --> 04:06.440
استنتاج TypeScript قام بعمله.

04:06.440 --> 04:07.630
لكني أريد أن أوضح

04:07.630 --> 04:09.610
حقًا أن هذا يحتوي على نوع الإرجاع

04:09.610 --> 04:13.730
الفارغ ، ولهذا السبب أقوم بإضافته هنا ، لأغراض العرض.

04:13.730 --> 04:17.070
الآن ، يعني الفراغ حقًا أن هذه الوظيفة

04:17.070 --> 04:21.020
لا تحتوي على تعليمة عودة ، ولا تُرجع أي شيء.

04:21.020 --> 04:24.540
يكمل بنجاح ، يقوم بعمله.

04:24.540 --> 04:28.170
ينفذ الكود الخاص به ، ولا يسفر عن خطأ

04:28.170 --> 04:32.550
أو شيء من هذا القبيل ، لكنه لا يعيد شيئًا.

04:32.550 --> 04:34.990
هذا هو نوع العودة الفارغة.

04:34.990 --> 04:37.330
الآن تقنيًا في JavaScript ، بالطبع ، إذا

04:37.330 --> 04:39.490
أردنا التحكم. سجل نتيجة printResult

04:39.490 --> 04:43.550
هنا وأنا الآن أقوم بترجمة هذا ، ونرى ما يحصل على الإخراج

04:43.550 --> 04:46.270
هنا على الصفحة.

04:46.270 --> 04:49.480
نرى أن غير محدد يتم إرجاعه من خلال ذلك.

04:49.480 --> 04:51.540
لذلك من الناحية الفنية ، وهذا

04:51.540 --> 04:56.450
مثير للاهتمام حقًا ، في JavaScript ، إذا استخدمنا القيمة المرجعة

04:56.450 --> 05:00.830
لدالة لا تُرجع أي شيء ، فإننا نحصل على غير مُعرَّف كقيمة.

05:00.830 --> 05:03.730
وكما تعلم على الأرجح ، فإن undefined في JavaScript

05:03.730 --> 05:05.720
هو في الواقع قيمة حقيقية.

05:05.720 --> 05:08.430
قيمة تحصل عليها ، على سبيل المثال ، أيضًا

05:08.430 --> 05:11.880
إذا حاولت الوصول إلى خاصية على كائن غير موجود.

05:11.880 --> 05:13.670
إذن هنا نحصل على الفراغ ، على الرغم

05:13.670 --> 05:16.680
من أن هذا يعود من الناحية الفنية غير محدد.

05:16.680 --> 05:19.020
ولجعل الأمر أكثر إرباكًا

05:19.020 --> 05:23.300
، يعد undefined نوعًا في TypeScript.

05:23.300 --> 05:25.640
يمكنك الحصول على undefined كنوع.

05:25.640 --> 05:29.570
وعلى سبيل المثال ، يمكن أن يتلقى متغير جديد تمامًا

05:30.770 --> 05:33.270
، someValue ، غير معرف كنوع ، ولن

05:33.270 --> 05:34.700
تحصل على خطأ.

05:34.700 --> 05:37.380
سيكون هذا المتغير الآن غير محدد إلى الأبد.

05:37.380 --> 05:39.970
ما مدى فائدة ذلك سؤال مختلف.

05:39.970 --> 05:43.720
لكن undefined هو نوع صالح في TypeScript.

05:43.720 --> 05:46.600
ومع ذلك ، هنا ترى أننا حصلنا على خطأ.

05:46.600 --> 05:48.010
وقد حصلنا على خطأ

05:48.010 --> 05:51.690
لأنه لا يُسمح للدالة بإرجاع غير محددة.

05:51.690 --> 05:53.300
من الناحية الفنية هو كذلك بالطبع

05:53.300 --> 05:56.850
، لكن TypeScript يفكر في الوظائف بشكل مختلف قليلاً.

05:56.850 --> 06:00.200
يجب استخدام void هنا إذا كانت الدالة لا تُرجع

06:00.200 --> 06:04.300
شيئًا ، وليست غير مُعرَّفة ، لأنك مع الفراغ توضح أن

06:04.300 --> 06:05.940
هذه الدالة لا تحتوي عمدًا

06:05.940 --> 06:08.260
على تعليمة إرجاع.

06:08.260 --> 06:10.690
إذا كنت ستقول غير محدد هنا ،

06:10.690 --> 06:13.460
فستتوقع TypeScript أن يكون لديك

06:13.460 --> 06:17.080
عبارة إرجاع حيث لا تقوم بإرجاع قيمة.

06:17.080 --> 06:18.660
هذا هو الاختلاف التقني.

06:18.660 --> 06:20.670
الآن ترى أنني لا أحصل على خطأ.

06:20.670 --> 06:22.860
من منظور JavaScript

06:22.860 --> 06:26.610
، هذا هو في الأساس نفس هذا.

06:26.610 --> 06:29.050
لكن TypeScript يقوم بعمل تمايز هنا ، وبالتالي

06:29.050 --> 06:31.240
فإن الفراغ هو النوع الذي تريد استخدامه

06:31.240 --> 06:33.760
إذا لم يكن لديك تعليمة إرجاع.

06:33.760 --> 06:37.200
يمكن استخدام غير محدد ، والذي نادرًا ما تحتاج

06:37.200 --> 06:41.100
إليه ، بصراحة ، إذا عدت دون إرجاع قيمة فعلية.

06:41.100 --> 06:45.750
ولكن مرة أخرى ، هذه حالة استخدام نادرة ، ويمكنك استخدام void مع عبارة

06:45.750 --> 06:47.560
إرجاع مثل هذه أيضًا.

06:47.560 --> 06:49.040
لن تحصل على خطأ.

06:49.040 --> 06:50.610
وبشكل افتراضي ، ستستخدم

06:50.610 --> 06:52.770
دائمًا الفراغ في هذا السيناريو.

06:52.770 --> 06:54.680
ما لم يكن لديك حقًا وظيفة يجب

06:54.680 --> 06:56.750
أن تنتج غير محددة ، وتريد أن تكون

06:56.750 --> 06:58.620
واضحًا بشأن ذلك.

06:58.620 --> 07:01.430
لكن مرة أخرى ، نادرًا ما يكون هذا هو الحال.

07:01.430 --> 07:03.620
أريد فقط أن أتأكد هنا ، من أنك تفهم

07:03.620 --> 07:05.870
الفرق بين الفراغ وغير المحدد ،

07:05.870 --> 07:08.160
وأن الفراغ هو المعيار الذي ستستخدمه

07:08.160 --> 07:10.930
في جميع السيناريوهات تقريبًا حيث يكون

07:10.930 --> 07:13.450
لديك وظيفة لا تُرجع قيمة ، ويمكنك تعيينها

07:13.450 --> 07:15.770
صراحة.

07:15.770 --> 07:18.780
ولكن بالطبع ، يمكن لـ TypeScript أيضًا الاستدلال عليه

07:18.780 --> 07:20.440
، كما لو كان قادرًا هنا أيضًا.

07:20.440 --> 07:23.083
لقد أضفت هذا للتو لأغراض العرض هنا.
