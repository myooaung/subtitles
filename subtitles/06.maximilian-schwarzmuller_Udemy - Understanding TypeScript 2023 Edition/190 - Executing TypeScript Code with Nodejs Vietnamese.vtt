WEBVTT

00:02.200 --> 00:03.210
Người hướng dẫn: Vì vậy, hãy

00:03.210 --> 00:05.520
bắt đầu với TypeScript và Node. js và vì thế, về cơ bản,

00:05.520 --> 00:08.660
tôi đang ở trong một thư mục mới trống ở đây, chỉ có

00:08.660 --> 00:10.610
một số tệp cấu hình ở đó và hãy bắt

00:10.610 --> 00:12.140
đầu thật đơn giản.

00:12.140 --> 00:15.020
Hãy thêm một ứng dụng. tập tin ts ở đây.

00:15.020 --> 00:17.370
Tất nhiên, bạn có thể đặt tên theo cách bạn muốn.

00:17.370 --> 00:19.180
Và trong đó, hãy viết một số mã mà chúng

00:19.180 --> 00:22.220
ta muốn thực thi với Node. js, nhưng nơi chúng

00:22.220 --> 00:24.980
tôi muốn sử dụng TypeScript.

00:24.980 --> 00:26.350
Một kịch bản đơn giản có thể là

00:26.350 --> 00:28.910
chúng ta vừa ghi lại một thứ gì đó trên bảng điều khiển.

00:28.910 --> 00:30.450
Điều này hoạt động trong trình duyệt, nhưng

00:30.450 --> 00:33.350
điều này cũng hoạt động với Node. js.

00:33.350 --> 00:35.840
Bây giờ hãy chắc chắn rằng bạn đã cài đặt Node. js, mà bạn chắc chắn

00:35.840 --> 00:37.220
nên có nếu bạn theo dõi

00:37.220 --> 00:38.740
khóa học đó vì chúng tôi

00:38.740 --> 00:42.077
đã sử dụng nó trong NPM với Webpack và với nhiều

00:42.077 --> 00:43.910
công cụ và thư viện khác mà

00:43.910 --> 00:46.710
chúng tôi đã cài đặt với NPM.

00:46.710 --> 00:48.480
Vì vậy, bạn nên có Node. js đã được cài đặt.

00:48.480 --> 00:50.300
Và nếu bạn đã cài đặt nó, bạn có

00:50.300 --> 00:52.130
thể thực thi tệp này nếu bạn biên

00:52.130 --> 00:54.110
dịch nó thành JavaScript.

00:54.110 --> 00:57.000
Vì vậy, nếu tôi chạy ứng dụng tsc. ts và tôi sản xuất

00:57.000 --> 01:00.360
ứng dụng của mình. js, tôi có thể thực hiện

01:00.360 --> 01:02.890
điều này với nút và tôi in một cái

01:02.890 --> 01:04.503
gì đó ở đây.

01:06.550 --> 01:08.990
Bây giờ khi tôi xóa ứng dụng. js và tôi cố gắng

01:08.990 --> 01:11.890
thực thi app. ts bằng nút, bạn sẽ

01:11.890 --> 01:13.810
thấy điều gì đó kỳ lạ.

01:13.810 --> 01:15.070
Điều này cũng hoạt động.

01:15.070 --> 01:18.010
Vì vậy, nếu nút có khả năng thực thi TypeScript?

01:18.010 --> 01:20.380
Không, nó không phải và điều đó thực sự quan trọng.

01:20.380 --> 01:23.210
Nó chỉ không quan tâm đến phần mở rộng của tệp, nhưng bất

01:23.210 --> 01:25.260
cứ thứ gì nó tìm thấy trong tệp thì nó coi như

01:25.260 --> 01:27.420
một JavaScript thông thường và điều này ở đây

01:27.420 --> 01:30.180
không sử dụng bất kỳ tính năng nào của TypeScript, vì vậy

01:30.180 --> 01:31.370
nó hoạt động.

01:31.370 --> 01:34.340
Điều đó sẽ thay đổi nếu chúng tôi thêm nội dung khác vào đây.

01:34.340 --> 01:36.400
Giả sử thay vào đó, chúng ta có một

01:36.400 --> 01:37.370
biến tuổi, là một

01:37.370 --> 01:40.080
số và ở đây tôi đặt giá trị này là 30, sau đó tôi

01:40.080 --> 01:42.250
điều khiển. đăng nhập tuổi ở đây.

01:42.250 --> 01:44.840
Tất nhiên, đây là mã TypeScript hợp lệ.

01:44.840 --> 01:46.790
Nhưng nếu chúng tôi cố gắng thực hiện điều này với

01:46.790 --> 01:48.370
nút, bạn sẽ thấy chúng tôi gặp lỗi.

01:48.370 --> 01:52.450
Vì vậy, nút không có khả năng phân tích cú pháp và biên dịch TypeScript,

01:52.450 --> 01:54.210
nó chỉ coi mọi tệp bạn thực

01:54.210 --> 01:56.960
thi với nó là JavaScript.

01:56.960 --> 01:59.030
Và nếu bạn không sử dụng bất kỳ tính năng TypeScript

01:59.030 --> 02:01.100
nào trong tệp, vâng thì nó vẫn hoạt động.

02:01.100 --> 02:02.950
Nhưng nếu bạn làm, nó sẽ không hoạt động.

02:02.950 --> 02:04.920
Sau đó, bạn luôn phải biên dịch tệp

02:04.920 --> 02:06.550
thành JavaScript trước, để

02:06.550 --> 02:08.960
sau đó thực thi tệp JavaScript, tệp này chỉ

02:08.960 --> 02:11.350
có mã JavaScript hợp lệ trong đó.

02:11.350 --> 02:13.030
Điều đó thực sự quan trọng để hiểu.

02:13.030 --> 02:15.890
Nút không thực thi TypeScript.

02:15.890 --> 02:20.710
Bây giờ bạn thực sự có thể cài đặt một gói, ts-node, cuối cùng cung cấp

02:20.710 --> 02:24.230
cho bạn trình biên dịch TypeScript đó, kết hợp với

02:24.230 --> 02:27.880
nút thực thi, bạn có thể nói, để bạn có thể cài đặt một

02:27.880 --> 02:30.320
công cụ trên toàn cầu, mà bạn có thể

02:30.320 --> 02:34.170
sử dụng để chạy các tệp TypeScript chỉ như vậy.

02:34.170 --> 02:35.210
Nhưng đằng sau hậu

02:35.210 --> 02:37.620
trường, nó sẽ thực hiện việc biên dịch cho

02:37.620 --> 02:39.440
bạn và thực thi mã biên dịch.

02:39.440 --> 02:42.610
Vì vậy, về cơ bản, nó kết hợp bước tsc và nút

02:42.610 --> 02:43.890
thành một bước.

02:43.890 --> 02:46.060
Vì vậy, đây là một gói bạn có thể sử dụng

02:46.060 --> 02:49.150
nhưng trong khi điều này có thể tốt cho việc phát triển,

02:49.150 --> 02:52.330
sản xuất, để thực sự phục vụ các tệp của bạn trên một số

02:52.330 --> 02:54.850
máy chủ web, trên một số máy chủ web, điều

02:54.850 --> 02:56.950
này có thể không lý tưởng, bởi vì mỗi

02:56.950 --> 02:59.910
lần có bước biên dịch bổ sung này mã của bạn được thực

02:59.910 --> 03:02.160
thi, chỉ cần thêm một chút chi phí bổ sung,

03:02.160 --> 03:06.110
điều này tốt trong quá trình phát triển, nhưng bạn có thể không muốn

03:06.110 --> 03:07.970
mã của mình sẵn sàng sản xuất và

03:07.970 --> 03:09.890
bạn thực sự muốn phân phối mã ở đâu

03:09.890 --> 03:12.090
đó.

03:12.090 --> 03:13.260
Do đó, trong mô-đun này, chúng

03:13.260 --> 03:15.950
tôi sẽ không sử dụng nút ts và chúng tôi sẽ không cố gắng thực

03:15.950 --> 03:18.180
thi bất kỳ tệp TypeScript nào bằng nút.

03:18.180 --> 03:21.570
Thay vào đó, tôi sẽ chỉ cho bạn một thiết lập mà chúng ta có

03:21.570 --> 03:24.520
thể sử dụng để xây dựng một ứng dụng web cấp tốc nút

03:24.520 --> 03:26.150
hoặc API còn lại tại đây, chỉ

03:26.150 --> 03:29.130
với TypeScript và trình biên dịch TypeScript và

03:29.130 --> 03:31.343
nút vanilla. js.
