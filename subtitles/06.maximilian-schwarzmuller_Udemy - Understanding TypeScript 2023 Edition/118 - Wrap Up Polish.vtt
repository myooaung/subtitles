WEBVTT

00:02.273 --> 00:05.100
Instruktor: Mieliśmy spojrzenie na wiele dekoratorów,

00:05.100 --> 00:06.190
jak pracujesz z nimi,

00:06.190 --> 00:07.340
jak możesz je skonfigurować,

00:07.340 --> 00:09.940
jak możesz robić rzeczy z nimi, co możesz zrobić

00:09.940 --> 00:11.367
z nimi.

00:11.367 --> 00:15.260
To, mam nadzieję, pokazuje złożoność, ale także moc dekoratorów

00:15.260 --> 00:17.340
i jak możesz myśleć o nich, jak możesz

00:17.340 --> 00:18.898
ich używać.

00:18.898 --> 00:22.370
Nie tylko jesteś w stanie tworzyć własne dekoratory, ale

00:22.370 --> 00:24.208
także istnieje bogaty ekosystem

00:24.208 --> 00:28.590
pakietów i frameworków, które opierają się na dekoratorach.

00:28.590 --> 00:30.670
Na przykład klasa validator.

00:30.670 --> 00:32.789
Jeśli wyszukujesz "ts class validator",

00:32.789 --> 00:35.480
znajdziesz pakiet, który w zasadzie ma bardziej

00:35.480 --> 00:37.960
rozbudowaną implementację naszej własnej,

00:37.960 --> 00:41.680
niestandardowej logiki walidacji, nad którą pracowaliśmy.

00:41.680 --> 00:44.140
Ten pakiet można dodać do dowolnego projektu, nad

00:44.140 --> 00:45.960
którym pracujesz, a następnie możesz

00:45.960 --> 00:48.030
po prostu zaimportować garść dekoratorów

00:48.030 --> 00:49.930
lub fabryk dekoratorów, jak widać, ponieważ

00:49.930 --> 00:51.660
wykonujemy je tutaj.

00:51.660 --> 00:53.350
Dodaj je do swoich właściwości,

00:53.350 --> 00:55.650
z lub bez jakiejś dodatkowej konfiguracji,

00:55.650 --> 00:57.530
w zależności od walidatora, który to

00:57.530 --> 00:59.163
jest, a za kulisami to będzie zarządzać

00:59.163 --> 01:01.530
takim rejestrem, można powiedzieć, takim obiektem

01:01.530 --> 01:03.509
konfiguracyjnym w końcu, przechowuj

01:03.509 --> 01:07.070
swoją konfigurację walidatora dla różnych właściwości w twoich różnych

01:07.070 --> 01:08.950
klasach.

01:08.950 --> 01:11.810
A następnie daj ci metodę validate, którą również

01:11.810 --> 01:14.150
importujesz z pakietu, którą możesz wykonać

01:14.150 --> 01:16.656
i przekazać swój obiekt, aby zastosować całą

01:16.656 --> 01:19.020
logikę sprawdzania poprawności, którą ustawiłeś

01:19.020 --> 01:20.540
w klasie.

01:20.540 --> 01:22.840
Więc to w zasadzie robi to, co właśnie zrobiliśmy,

01:22.840 --> 01:26.000
tylko z większą ilością walidatorów i z całym ciężkim liftingiem

01:26.000 --> 01:27.830
wykonanym za ciebie.

01:27.830 --> 01:29.170
Ale oczywiście pomaga zrozumieć,

01:29.170 --> 01:30.630
jak to ogólnie działa, ponieważ

01:30.630 --> 01:32.370
zbudowaliśmy go na własną rękę tutaj,

01:32.370 --> 01:34.143
w bardziej naiwnej wersji.

01:35.010 --> 01:36.490
Teraz oprócz tego pakietu mamy

01:36.490 --> 01:38.370
oczywiście jeszcze Angulara, np.

01:38.370 --> 01:39.541
Angular jest frameworkiem,

01:39.541 --> 01:41.502
o którym wspomniałem wcześniej,

01:41.502 --> 01:43.942
który w dużej mierze opiera się na dekoratorach,

01:43.942 --> 01:46.480
takich jak ten dekorator komponentów, który

01:46.480 --> 01:49.214
pozwala na przypisanie dynamicznego kodu HTML,

01:49.214 --> 01:51.301
który wykorzystuje właściwości twoich

01:51.301 --> 01:54.720
klas, za pomocą specjalnej składni dodanej przez Angular,

01:54.720 --> 02:00.170
aby następnie wyrenderować dynamiczną treść na ekranie.

02:00.170 --> 02:01.780
Więc tutaj Angular robi więcej

02:01.780 --> 02:03.360
niż tylko oferuje te dekoratory,

02:03.360 --> 02:06.250
ale dekoratory są podstawową częścią Angulara.

02:06.250 --> 02:07.280
I na koniec, ale nie

02:07.280 --> 02:10.130
mniej ważne, chcę również pokazać wam NestJS.

02:10.130 --> 02:13.190
NestJS to framework JavaScript po stronie serwera

02:13.190 --> 02:15.487
dla Node. js, który również

02:15.487 --> 02:20.010
mocno wykorzystuje typescript, a to również obejmuje dekoratory.

02:20.010 --> 02:23.270
Tam używasz dekoratorów do definiowania kontrolerów,

02:23.270 --> 02:26.730
a także tras, metod, których użytkownicy muszą używać na swoich

02:26.730 --> 02:30.400
żądaniach HTTP, aby wywołać pewne funkcje, a także wiele innych

02:30.400 --> 02:32.687
dekoratorów, których możesz użyć do wyodrębnienia

02:32.687 --> 02:36.890
danych z przychodzących żądań i tak dalej.

02:36.890 --> 02:39.150
Więc tutaj ten framework również oferuje

02:39.150 --> 02:41.370
wszystkie te dekoratory dla ciebie, tak

02:41.370 --> 02:44.640
że możesz po prostu dodać je do swoich właściwości, do swoich

02:44.640 --> 02:46.257
metod, do swoich klas i dodać

02:46.257 --> 02:48.590
dodatkową funkcjonalność, którą framework

02:48.590 --> 02:50.060
z kolei bierze pod uwagę podczas

02:50.060 --> 02:52.828
wykonywania twojego kodu.

02:52.828 --> 02:55.417
Więc tutaj znowu dekoratory są używane do

02:55.417 --> 02:59.070
metaprogramowania, aby dodać dodatkową konfigurację,

02:59.070 --> 03:02.977
dodatkową logikę, która następnie jest brana pod uwagę przez,

03:02.977 --> 03:05.700
w tym przypadku, kod poza frameworkiem, który

03:05.700 --> 03:07.580
wykonuje twój kod lub który współpracuje

03:07.580 --> 03:09.886
z twoim kodem.

03:09.886 --> 03:12.000
I to jest właśnie to dla dekoratorów.

03:12.000 --> 03:14.110
To, miejmy nadzieję, daje ci dobry przegląd

03:14.110 --> 03:16.090
tego, co możesz zrobić z dekoratorami,

03:16.090 --> 03:17.830
dlaczego mogą być bardzo pomocne

03:17.830 --> 03:19.563
i jak ogólnie działają.
