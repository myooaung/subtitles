WEBVTT

00:02.130 --> 00:05.620
-: لهذا المرفق تجد مشروع البداية القديم الجيد

00:05.620 --> 00:08.470
، لقد بدأت بالفعل الخادم مع NPM start.

00:08.470 --> 00:12.320
وعملية مشاهدة TypeScript مع TSC-W.

00:12.320 --> 00:14.870
وأول شيء نحتاج إلى تهيئته هناك

00:14.870 --> 00:18.030
في ملف tsconfig ، تأكد من ضبط هدفك

00:18.030 --> 00:21.620
على es6 وبعد ذلك ، إذا قمت بالتمرير لأسفل

00:21.620 --> 00:24.230
، تأكد من إضافة سطر الديكور التجريبي

00:24.230 --> 00:26.720
هذا هنا.

00:26.720 --> 00:28.380
وأضف فاصلة أمام هذا وبعد

00:28.380 --> 00:31.700
ذلك يمكنك تنسيق تلقائي لتنسيق كل هذا بشكل صحيح.

00:31.700 --> 00:34.020
هذا مهم وإلا فلن تتمكن من استخدام

00:34.020 --> 00:36.000
المصممين في مشروعك.

00:36.000 --> 00:37.250
لذا تأكد من تعديل ملف

00:37.250 --> 00:40.540
tsconfig الخاص بك. json بشكل مناسب.

00:40.540 --> 00:42.630
وبهذا يمكننا الغوص وكتابة أول مصمم

00:42.630 --> 00:46.980
ديكور لدينا هنا في التطبيق. ts.

00:46.980 --> 00:50.950
وأريد أن أبدأ بمصمم ديكور يمكننا إضافته إلى الفصل.

00:50.950 --> 00:54.530
الآن كل ما يتعلق بمصممي الديكور بشكل عام هو الفصول الدراسية

00:54.530 --> 00:55.363
، ولكن هذا هو مصمم

00:55.363 --> 00:58.220
الديكور الذي سنضيفه إلى الفصل ككل.

00:58.220 --> 01:00.730
لذلك ، لنفترض أن لدينا فصلًا

01:00.730 --> 01:04.360
، شخصًا ، فئة تافهة جدًا ، حيث لدينا اسم.

01:04.360 --> 01:07.530
ربما بقيمة Max ، تمت تهيئتها مسبقًا هنا.

01:07.530 --> 01:10.520
حيث لدينا وظيفة منشئ حيث أقوم فقط بتسجيل

01:10.520 --> 01:12.600
إنشاء كائن شخص ، حتى نرى أن

01:12.600 --> 01:14.763
هذا يتم تنفيذه.

01:15.880 --> 01:19.363
وبعد ذلك بالطبع يمكننا إنشاء شخص جديد هنا ، باستخدام

01:20.760 --> 01:22.910
كلمة رئيسية جديدة ، مثل هذه.

01:22.910 --> 01:24.030
وإذا أردنا ذلك ، يمكننا

01:24.030 --> 01:26.490
بالطبع تسجيل هذا الشخص المخلوق.

01:26.490 --> 01:28.330
وهذا لا ينبغي أن يحمل أي

01:28.330 --> 01:29.430
مفاجآت ، إذا حفظنا

01:29.430 --> 01:32.090
كل ذلك ، فإنه يجمع دون أخطاء.

01:32.090 --> 01:33.700
وإذا قمنا بزيارة صفحتنا

01:33.700 --> 01:36.670
، على Localhost: 3000 ، في وحدة تحكم JavaScript

01:36.670 --> 01:38.900
، نرى إنشاء كائن شخص يأتي من

01:38.900 --> 01:41.140
المُنشئ.

01:41.140 --> 01:44.603
ونحن ، بالطبع ، نرى جميعًا الشخص نفسه هنا.

01:45.810 --> 01:49.550
الآن هناك ، في هذا المثال ، لم يشاركنا أي مصمم ديكور.

01:49.550 --> 01:51.000
دعونا نغير هذا.

01:51.000 --> 01:53.370
في الجزء العلوي من الملف ، دعنا نضيف مصممًا.

01:53.370 --> 01:56.060
والمزين ، وهو أمر مهم حقًا أن نفهمه ،

01:56.060 --> 01:58.080
هو في النهاية مجرد وظيفة.

01:58.080 --> 02:01.280
وظيفة تقوم بتطبيقها على شيء ما ، على سبيل

02:01.280 --> 02:03.530
المثال ، لفصل بطريقة معينة.

02:03.530 --> 02:04.750
لذلك دعونا ننشئ وظيفة

02:04.750 --> 02:09.523
هنا ، باستخدام الكلمة الأساسية للوظيفة ، وسأطلق عليها اسم المسجل.

02:10.390 --> 02:13.290
الآن هذه دالة ، الشيء المميز الوحيد

02:13.290 --> 02:15.570
هنا هو أنني أبدأ بحرف كبير.

02:15.570 --> 02:16.492
هذا ليس أمرًا لا

02:16.492 --> 02:20.200
بد منه بالمناسبة ، ليس عليك استخدام حرف بداية كبير ، يمكنك

02:20.200 --> 02:22.470
استخدام حرف صغير أيضًا ، يمكنك فقط

02:22.470 --> 02:25.610
رؤية الكثير من المصممين هناك في المكتبات التي

02:25.610 --> 02:27.680
قد تستخدمها باستخدام الأحرف الكبيرة

02:27.680 --> 02:30.030
في البداية الشخصيات وبالتالي ، سأفعل

02:30.030 --> 02:32.200
الشيء نفسه هنا.

02:32.200 --> 02:35.450
لذا ، فإن وظيفة المسجل هنا هي وظيفة

02:35.450 --> 02:39.330
ويمكننا تطبيقها كديكور كما ستظهر.

02:39.330 --> 02:42.730
الآن دعنا نضيف سجل دخول إلى وحدة التحكم هنا ، التسجيل ، حتى نتمكن

02:42.730 --> 02:44.730
من معرفة متى تعمل هذه الوظيفة.

02:44.730 --> 02:47.300
لأنني لن أسميها مباشرة.

02:47.300 --> 02:50.330
بدلاً من ذلك ، أريد إضافته كديكور لهذه الفئة.

02:50.330 --> 02:53.710
ونقوم بذلك عن طريق إضافة الرمز

02:53.710 --> 02:57.370
@ هنا أمام الفصل ثم الوظيفة هنا.

02:57.370 --> 02:58.440
تماما مثل هذا.

02:58.440 --> 03:00.320
الآن بعض الأشياء الخاصة هنا.

03:00.320 --> 03:03.780
الرمز @ هنا هو معرّف خاص يراه TypeScript

03:03.780 --> 03:06.170
أو يتعرف عليه.

03:06.170 --> 03:09.110
وبعد ذلك يجب أن يشير الشيء الموجود بعد الرمز

03:09.110 --> 03:11.010
@ مباشرةً إلى دالة.

03:11.010 --> 03:13.460
لا تنفذه ، ولكن أشر إليه ، والذي يجب

03:13.460 --> 03:15.800
أن يكون الديكور الخاص بك.

03:15.800 --> 03:17.400
الآن هنا ترى أن Logger يقبل

03:17.400 --> 03:20.650
عددًا قليلاً جدًا من الحجج لاستخدامها كمصمم هنا.

03:20.650 --> 03:23.010
الشيء الجيد هو أن TypeScript تدرك أنني

03:23.010 --> 03:24.930
أريد استخدامها كمصمم هنا.

03:24.930 --> 03:27.980
الشيء السيئ هو أننا لا نمرر بما يكفي من الحجج.

03:27.980 --> 03:31.000
وبالفعل ، يتلقى المصممون الحجج.

03:31.000 --> 03:34.870
يعتمد عدد الحجج على المكان الذي تستخدم فيه المصمم.

03:34.870 --> 03:39.710
هنا ، بالنسبة لمصمم الديكور ، نضيف إلى الفصل حجة واحدة.

03:39.710 --> 03:42.910
هذا هو الهدف من هذا المصمم ، إذا جاز التعبير

03:42.910 --> 03:46.160
، وهو وظيفة المُنشئ لدينا.

03:46.160 --> 03:49.020
لذا يمكننا القول أننا حصلنا على دالة

03:49.020 --> 03:51.240
هنا كوسيطة في النهاية.

03:51.240 --> 03:54.110
يمكننا أيضًا تسمية مُنشئها ، لأننا في

03:54.110 --> 03:56.650
النهاية سنحصل على دالة المُنشئ الخاصة

03:56.650 --> 03:59.550
بنا من هذه الفئة ، أو أي فئة نضيف إليها هذا

03:59.550 --> 04:01.470
المصمم كوسيطة.

04:01.470 --> 04:06.310
دعونا أيضا نعزي. سجل ذلك حتى نتمكن من الحصول

04:06.310 --> 04:09.650
على نظرة ثاقبة حول حجة المُنشئ هنا.

04:09.650 --> 04:10.550
ودعنا نحفظ هذا.

04:10.550 --> 04:12.750
وكما ترى فإنه يجمع دون أخطاء.

04:12.750 --> 04:14.750
وإذا ألقينا نظرة الآن على مخرجاتنا

04:14.750 --> 04:16.580
، فإننا نرى الكود القديم من قبل

04:16.580 --> 04:18.590
، لكننا نرى أيضًا إخراج التسجيل ،

04:18.590 --> 04:20.810
ووظيفة المُنشئ هذه يتم تسجيلها.

04:20.810 --> 04:22.760
حسنًا ، نحن في الواقع نرى الفصل بأكمله

04:22.760 --> 04:24.520
هنا ، لكن الفصول في النهاية ليست

04:24.520 --> 04:27.670
سوى بعض السكر التكتيكي على وظائف المُنشئ.

04:27.670 --> 04:31.450
يرجى أيضًا ملاحظة أن مخرجات الزخرفة لدينا

04:31.450 --> 04:35.030
، والتسجيل ، وهذه الفئة أو سجل وظيفة المُنشئ

04:35.030 --> 04:39.460
هنا تتم طباعتها أولاً ، قبل أن نرى إنشاء كائن شخص وكائن

04:39.460 --> 04:41.540
شخص لدينا.

04:41.540 --> 04:44.360
لأن ، في الواقع ، مصممي الديكور وهذا

04:44.360 --> 04:48.430
أمر مهم حقًا ، ينفذ المصممون عندما يتم تحديد فصلك.

04:48.430 --> 04:50.530
ليس عندما يتم إنشاء مثيل لها.

04:50.530 --> 04:53.020
لا تحتاج إلى إنشاء مثيل لفصلك على الإطلاق.

04:53.020 --> 04:55.760
يمكننا إزالة هذا الرمز لإنشاء مثيل للفصل

04:55.760 --> 04:58.780
الدراسي ، وسنظل نحصل على ناتج الزخرفة هذا.

04:58.780 --> 05:02.210
لذا فإن المصمم يعمل عندما يعثر JavaScript على تعريف

05:02.210 --> 05:05.660
الفصل الخاص بك ، تعريف دالة الباني الخاص بك.

05:05.660 --> 05:08.580
ليس عند استخدام وظيفة المُنشئ هذه لإنشاء

05:08.580 --> 05:10.070
مثيل لكائن.

05:10.070 --> 05:13.280
من المهم حقًا فهم ذلك.

05:13.280 --> 05:15.170
لذلك هذا هو أول مصمم لدينا.

05:15.170 --> 05:16.670
إنها ليست الطريقة الوحيدة

05:16.670 --> 05:19.063
التي يمكننا من خلالها إنشاء مصمم ديكور.
