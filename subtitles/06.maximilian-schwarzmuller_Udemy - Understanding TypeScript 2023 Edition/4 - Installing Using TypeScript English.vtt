WEBVTT

1
00:00:02.160 --> 00:00:04.930
<v Instructor>Here is this same example basically</v>

2
00:00:04.930 --> 00:00:06.440
in a real project.

3
00:00:06.440 --> 00:00:08.550
You'll find this simple project,

4
00:00:08.550 --> 00:00:11.270
the index HTML file and this JavaScript file,

5
00:00:11.270 --> 00:00:13.340
attached to this video in a subfile.

6
00:00:13.340 --> 00:00:16.900
You can simply open this and then open the index HTML file.

7
00:00:16.900 --> 00:00:18.610
You can also open the code

8
00:00:18.610 --> 00:00:20.890
in any text editor of your choice.

9
00:00:20.890 --> 00:00:22.160
Here I'm using VisualStudioCode,

10
00:00:22.160 --> 00:00:25.000
and I will come back to my exact setup

11
00:00:25.000 --> 00:00:26.250
later in this module.

12
00:00:26.250 --> 00:00:29.250
For now, you can just open these two text files

13
00:00:29.250 --> 00:00:31.180
with any text editor.

14
00:00:31.180 --> 00:00:34.110
Now what you'll find in there is this JavaScript file,

15
00:00:34.110 --> 00:00:37.000
which interacts with this index HTML file.

16
00:00:37.000 --> 00:00:38.830
And then that index HTML file,

17
00:00:38.830 --> 00:00:41.050
you'll find two inputs and the button

18
00:00:41.050 --> 00:00:43.698
and any JavaScript file which gets imported here.

19
00:00:43.698 --> 00:00:45.843
We basically reach out to these elements.

20
00:00:45.843 --> 00:00:47.968
Then we have a function here and an event listener

21
00:00:47.968 --> 00:00:50.020
on the button that triggers the function

22
00:00:50.020 --> 00:00:53.830
and logs the result of the function here in the console.

23
00:00:53.830 --> 00:00:56.750
Now, if we simply open that index HTML file,

24
00:00:56.750 --> 00:01:00.701
by double clicking on it in the Windows Explorer

25
00:01:00.701 --> 00:01:03.220
or the Mac Finder so that it opens up in a browser,

26
00:01:03.220 --> 00:01:05.150
what you'll see is this.

27
00:01:05.150 --> 00:01:07.250
The two inputs and the add button

28
00:01:07.250 --> 00:01:11.170
and here I opened the browser developer tools as well.

29
00:01:11.170 --> 00:01:13.760
Now if you enter 10 and five here for example,

30
00:01:13.760 --> 00:01:16.640
you might expect to see 15 as a result here

31
00:01:16.640 --> 00:01:19.420
on the right but instead you see 105.

32
00:01:19.420 --> 00:01:23.460
And this shows us a weakness of JavaScript here.

33
00:01:23.460 --> 00:01:25.890
This is not a technical error.

34
00:01:25.890 --> 00:01:28.050
It's not an error which is thrown,

35
00:01:28.050 --> 00:01:31.640
but it's a logical error in our application.

36
00:01:31.640 --> 00:01:33.986
Now where is this error coming from, though?

37
00:01:33.986 --> 00:01:37.490
Well here in JavaScript, I reach out

38
00:01:37.490 --> 00:01:39.612
to these two inputs and when the button is clicked,

39
00:01:39.612 --> 00:01:41.920
in the end I get the values of the two input elements

40
00:01:41.920 --> 00:01:45.300
and I pass them here to add.

41
00:01:45.300 --> 00:01:46.970
And here it's important to know

42
00:01:46.970 --> 00:01:50.100
that in JavaScript when you access the value

43
00:01:50.100 --> 00:01:53.130
of an input element, it's always a string.

44
00:01:53.130 --> 00:01:55.790
Always, no matter which type of input this is.

45
00:01:55.790 --> 00:01:59.633
If this is of type number or not, it's always a string.

46
00:02:00.645 --> 00:02:03.995
So I'm passing in two strings to this function the end,

47
00:02:03.995 --> 00:02:05.890
and if you add two strings in JavaScript,

48
00:02:05.890 --> 00:02:09.570
they get concatenated instead of added mathematically.

49
00:02:09.570 --> 00:02:14.210
Which is why we see 105, 10 and five concatenated.

50
00:02:14.210 --> 00:02:17.090
This is the issue with JavaScript here.

51
00:02:17.090 --> 00:02:19.980
And this is something where TypeScript can help us.

52
00:02:19.980 --> 00:02:22.360
Now without TypeScript, we could of course

53
00:02:22.360 --> 00:02:24.380
add an if check here and check

54
00:02:24.380 --> 00:02:28.048
if the type of num one is equal to number.

55
00:02:28.048 --> 00:02:33.048
And if the type of num two is equal to number,

56
00:02:34.030 --> 00:02:37.390
and if that is the case then I return my calculation

57
00:02:37.390 --> 00:02:40.588
like this, else I might throw an error

58
00:02:40.588 --> 00:02:43.304
or I at least convert both to numbers

59
00:02:43.304 --> 00:02:47.428
by adding a plus in front of each parameter here.

60
00:02:47.428 --> 00:02:50.510
Now this is some code we could write.

61
00:02:50.510 --> 00:02:53.023
Maybe a bit more refined than this in JavaScript.

62
00:02:53.023 --> 00:02:57.130
And with that we would ensure that we convert numbers

63
00:02:57.130 --> 00:03:00.670
or the inputs to numbers if they're not numbers yet.

64
00:03:00.670 --> 00:03:02.430
So with that, if I reload this

65
00:03:02.430 --> 00:03:05.220
and I repeat this, now we get 15

66
00:03:05.220 --> 00:03:07.590
because of our changed code.

67
00:03:07.590 --> 00:03:09.350
So of course we can do this in JavaScript.

68
00:03:09.350 --> 00:03:10.970
And this is vanilla JavaScript,

69
00:03:10.970 --> 00:03:13.440
nothing TypeScript-ish about it.

70
00:03:13.440 --> 00:03:16.640
But we wrote some extra code for an error

71
00:03:16.640 --> 00:03:19.048
which I actually would like to prevent in the first place.

72
00:03:19.048 --> 00:03:22.210
I don't want that this happens.

73
00:03:22.210 --> 00:03:26.260
I want to make sure that we can't even pass strings here

74
00:03:26.260 --> 00:03:28.930
to add because add should be a function

75
00:03:29.890 --> 00:03:31.020
that only operates on numbers.

76
00:03:31.020 --> 00:03:32.570
So that in there we don't need

77
00:03:33.428 --> 00:03:35.650
to check whether we get a number or not.

78
00:03:35.650 --> 00:03:37.000
So I want to keep this function

79
00:03:37.000 --> 00:03:38.500
in the state it was before.

80
00:03:38.500 --> 00:03:41.630
I want this function here, just like this.

81
00:03:41.630 --> 00:03:44.003
And that is where TypeScript can help us.

82
00:03:45.088 --> 00:03:45.921
So TypeScript can help us

83
00:03:45.921 --> 00:03:48.900
in such situations as I just showed.

84
00:03:48.900 --> 00:03:52.690
Now in order to see how it helps us, let's install it.

85
00:03:52.690 --> 00:03:56.590
So on typescriptlang.org, you can click on download.

86
00:03:56.590 --> 00:03:58.540
And there you'll learn how to install it.

87
00:03:58.540 --> 00:04:00.250
And we will actually install it

88
00:04:01.136 --> 00:04:02.880
with this command which uses the NPM tool

89
00:04:02.880 --> 00:04:06.750
and the NPM tool is part of the Node JS package.

90
00:04:06.750 --> 00:04:10.210
So even though we're not going to write Node JS code here,

91
00:04:10.210 --> 00:04:12.910
we still need to install Node JS

92
00:04:12.910 --> 00:04:14.760
simply because behind the scenes

93
00:04:14.760 --> 00:04:17.770
that will also be used by some tools we use.

94
00:04:17.770 --> 00:04:21.780
And when we install Node JS, we also install NPM,

95
00:04:21.780 --> 00:04:24.956
the Node Package Manager, a tool which we then can use

96
00:04:24.956 --> 00:04:29.200
to install TypeScript globally on our machine.

97
00:04:29.200 --> 00:04:31.452
So simply visit nodejs.org and there,

98
00:04:31.452 --> 00:04:34.220
install the latest version you find here.

99
00:04:34.220 --> 00:04:35.723
Simply click on this button.

100
00:04:36.586 --> 00:04:38.276
It will then download and install

101
00:04:38.276 --> 00:04:39.420
or you can walk through that installer.

102
00:04:39.420 --> 00:04:42.360
It is supported for all operating systems.

103
00:04:42.360 --> 00:04:45.300
And once you have Node JS installed,

104
00:04:45.300 --> 00:04:47.936
you will be able to run this command.

105
00:04:47.936 --> 00:04:51.440
Simply open up your normal terminal

106
00:04:51.440 --> 00:04:54.800
or command prompt and then copy in that command.

107
00:04:54.800 --> 00:04:57.223
Important, on Mac and Linux, you might need

108
00:04:57.223 --> 00:04:59.412
to add sudo in front of this to get the right permissions.

109
00:04:59.412 --> 00:05:02.810
On Windows, this will not be required.

110
00:05:02.810 --> 00:05:05.100
So simply make sure you then install TypeScript

111
00:05:05.100 --> 00:05:06.810
with this command.

112
00:05:06.810 --> 00:05:09.372
Enter your password in case you should be prompted for it.

113
00:05:09.372 --> 00:05:12.176
And with that, you got TypeScript installed globally

114
00:05:12.176 --> 00:05:15.430
on your machine, now what does this mean?

115
00:05:15.430 --> 00:05:17.696
TypeScript installed.

116
00:05:17.696 --> 00:05:20.810
Now remember that TypeScript is a programming language,

117
00:05:20.810 --> 00:05:22.750
but it's only a programming language

118
00:05:22.750 --> 00:05:25.212
that works because we also have this compiler,

119
00:05:25.212 --> 00:05:28.137
this tool which compiles into JavaScript.

120
00:05:28.137 --> 00:05:31.310
So in the end, what we installed here,

121
00:05:31.310 --> 00:05:33.296
it is the compiler and everything it needs

122
00:05:33.296 --> 00:05:36.116
to know to understand TypeScript code

123
00:05:36.116 --> 00:05:39.020
to convert it to JavaScript.

124
00:05:39.020 --> 00:05:41.036
So with this, we have the compiler installed

125
00:05:41.036 --> 00:05:44.460
and we can run the TSC command now

126
00:05:44.460 --> 00:05:47.210
which invokes this TypeScript compiler

127
00:05:47.210 --> 00:05:50.870
to compile a TypeScript file to JavaScript.

128
00:05:50.870 --> 00:05:54.140
So to see this in this project we worked on,

129
00:05:54.140 --> 00:05:56.563
let's simply add a new file using ts.ts for example.

130
00:05:56.563 --> 00:05:58.677
Any name you want, but the extension should be .ts

131
00:05:58.677 --> 00:06:03.677
which stands for TypeScript.

132
00:06:05.100 --> 00:06:07.651
Now, let's copy that JavaScript code

133
00:06:07.651 --> 00:06:09.850
into the TypeScript file.

134
00:06:09.850 --> 00:06:13.100
Here in VisualStudioCode, I immediately get some errors

135
00:06:13.100 --> 00:06:14.280
which we now will fix.

136
00:06:14.280 --> 00:06:16.379
And this is one great advantage of TypeScript.

137
00:06:16.379 --> 00:06:18.915
If you're using the right IDE,

138
00:06:18.915 --> 00:06:22.710
and my strong recommendation really is VisualStudioCode,

139
00:06:22.710 --> 00:06:24.420
and I will come back to that later.

140
00:06:24.420 --> 00:06:27.810
Then you already get great support in the IDE

141
00:06:27.810 --> 00:06:30.230
when working inside of TypeScript files.

142
00:06:30.230 --> 00:06:34.710
Here, already, it basically lets TypeScript analyze my code

143
00:06:34.710 --> 00:06:36.910
and identifies some weaknesses.

144
00:06:36.910 --> 00:06:39.720
Which is great, because that's exactly what I want.

145
00:06:39.720 --> 00:06:42.110
So here in this example, let me delete

146
00:06:42.110 --> 00:06:44.003
the JavaScript only JS file.

147
00:06:45.952 --> 00:06:48.360
And with that, some of the errors are gone

148
00:06:48.360 --> 00:06:50.539
because it identified that some constants

149
00:06:50.539 --> 00:06:53.230
and so on were used in multiple files.

150
00:06:53.230 --> 00:06:55.787
But it still gives me an error down there.

151
00:06:55.787 --> 00:06:57.700
And what you see, for example,

152
00:06:57.700 --> 00:07:00.108
is that it's not sure if there really is a value property.

153
00:07:00.108 --> 00:07:03.200
Now that's a mistake I didn't even consider before

154
00:07:03.200 --> 00:07:05.720
in JavaScript, but it's true.

155
00:07:05.720 --> 00:07:08.350
I'm selecting an element by ID here.

156
00:07:08.350 --> 00:07:11.680
Now TypeScript can't know if this will really work.

157
00:07:11.680 --> 00:07:13.160
Maybe I have a typo in here.

158
00:07:13.160 --> 00:07:15.940
In this case, I wouldn't be able to select an element.

159
00:07:15.940 --> 00:07:17.704
This element simply wouldn't exist on the page.

160
00:07:17.704 --> 00:07:20.164
So we might have a typo and TypeScript does not analyze

161
00:07:20.164 --> 00:07:22.472
your HTML code to find out if this works.

162
00:07:22.472 --> 00:07:24.468
So for one, this might fail.

163
00:07:24.468 --> 00:07:28.740
But even if it succeeds and we select an element there,

164
00:07:28.740 --> 00:07:30.910
it doesn't have to be an input element.

165
00:07:30.910 --> 00:07:34.720
It could be any other element and most HTML elements

166
00:07:34.720 --> 00:07:37.450
don't have a value property you can access.

167
00:07:37.450 --> 00:07:38.630
And this already is great.

168
00:07:38.630 --> 00:07:41.372
TypeScript forces us to be more explicit,

169
00:07:41.372 --> 00:07:44.060
to be clearer about our intentions

170
00:07:44.060 --> 00:07:46.130
and to double check our code.

171
00:07:46.130 --> 00:07:48.100
And for example here, and you don't need

172
00:07:48.100 --> 00:07:49.820
to understand all that syntax.

173
00:07:49.820 --> 00:07:52.172
We will learn it step by step throughout the course.

174
00:07:52.172 --> 00:07:55.660
But for example here we could let TypeScript know

175
00:07:55.660 --> 00:07:58.204
that we are sure that we will get an element

176
00:07:58.204 --> 00:08:00.080
by adding an exclamation mark.

177
00:08:00.080 --> 00:08:04.170
This basically tells TypeScript this will never yield null.

178
00:08:04.170 --> 00:08:06.370
This will always find an element.

179
00:08:06.370 --> 00:08:08.420
And as a developer, I of course know

180
00:08:08.420 --> 00:08:10.350
that this will always find an element

181
00:08:10.350 --> 00:08:11.920
because I double checked the ID

182
00:08:11.920 --> 00:08:14.763
and I see yeah, I have that ID here.

183
00:08:15.610 --> 00:08:17.270
Now in addition, I also know

184
00:08:17.270 --> 00:08:19.500
it will always be an input element.

185
00:08:19.500 --> 00:08:22.408
So we can use as HTML input element,

186
00:08:22.408 --> 00:08:25.470
a syntax called typecasting which I will also explain

187
00:08:25.470 --> 00:08:27.746
in greater detail later, to let TypeScript know

188
00:08:27.746 --> 00:08:30.327
which type of element this will be.

189
00:08:30.327 --> 00:08:32.926
We can apply this to the second element as well.

190
00:08:32.926 --> 00:08:35.650
So just to be really clear here,

191
00:08:35.650 --> 00:08:37.510
this is TypeScript syntax.

192
00:08:37.510 --> 00:08:39.520
I can use this exclamation mark here

193
00:08:39.520 --> 00:08:41.600
and I can use this typecasting here

194
00:08:41.600 --> 00:08:44.786
because we are in a .ts file, we are in a TypeScript file.

195
00:08:44.786 --> 00:08:48.380
We will compile this to JavaScript.

196
00:08:48.380 --> 00:08:51.050
This would not work in the vanilla JavaScript.

197
00:08:51.050 --> 00:08:53.427
This is not available there.

198
00:08:53.427 --> 00:08:56.300
With this, we are forced to be clearer

199
00:08:56.300 --> 00:08:58.460
about our intentions and to really think

200
00:08:58.460 --> 00:09:01.060
about our code and double check it, which is great.

201
00:09:01.060 --> 00:09:03.160
But that's not even the biggest advantage.

202
00:09:04.270 --> 00:09:06.820
The biggest advantage is the addition of types.

203
00:09:06.820 --> 00:09:09.630
That is what gives TypeScript its name, after all.

204
00:09:09.630 --> 00:09:12.282
And here I'm not saying anything

205
00:09:12.282 --> 00:09:14.204
about the types of data this function operations on.

206
00:09:14.204 --> 00:09:17.886
If we hover over one of these parameters,

207
00:09:17.886 --> 00:09:20.126
we see this anything here.

208
00:09:20.126 --> 00:09:22.828
And in the end, this is TypeScript saying to us,

209
00:09:22.828 --> 00:09:24.880
"I don't know what's in there."

210
00:09:24.880 --> 00:09:27.162
It could be any type of value.

211
00:09:27.162 --> 00:09:31.960
Now we can add a more explicit type in TypeScript files.

212
00:09:31.960 --> 00:09:33.806
So not in JavaScript files but in TypeScript files,

213
00:09:33.806 --> 00:09:38.580
by adding a colon here and then specifying the type.

214
00:09:38.580 --> 00:09:40.730
For example, number.

215
00:09:40.730 --> 00:09:43.300
Doing this here and doing this here.

216
00:09:43.300 --> 00:09:45.246
With this extra syntax which TypeScript,

217
00:09:45.246 --> 00:09:47.928
which this compiler understands,

218
00:09:47.928 --> 00:09:50.960
we're telling TypeScript that this here

219
00:09:50.960 --> 00:09:54.010
will be of type number and this will be of type number.

220
00:09:54.010 --> 00:09:56.126
And therefore now we get an error here again.

221
00:09:56.126 --> 00:09:58.060
And we don't just get this error

222
00:09:58.060 --> 00:09:59.370
in the IDE, by the way.

223
00:09:59.370 --> 00:10:01.940
We also get it if we try to compile

224
00:10:01.940 --> 00:10:03.820
this code because that is ultimately

225
00:10:03.820 --> 00:10:05.326
what we need to do, right?

226
00:10:05.326 --> 00:10:08.670
Now to compile this, I will open a terminal.

227
00:10:08.670 --> 00:10:10.760
And here I'm just opening my terminal

228
00:10:10.760 --> 00:10:13.683
or command prompt which is integrated into this IDE.

229
00:10:14.947 --> 00:10:16.530
It's the regular system command prompt.

230
00:10:16.530 --> 00:10:18.110
The regular system command terminal

231
00:10:18.110 --> 00:10:19.533
I was using here as well,

232
00:10:20.510 --> 00:10:22.446
just already navigated into this folder.

233
00:10:22.446 --> 00:10:27.420
So if you are not using some built-in IDE terminal,

234
00:10:27.420 --> 00:10:30.265
you can use your regular one but CD navigate

235
00:10:30.265 --> 00:10:33.960
into that extracted starting folder

236
00:10:33.960 --> 00:10:36.300
where you added your TypeScript file.

237
00:10:36.300 --> 00:10:38.888
And once you are in that folder, you can run TSC.

238
00:10:38.888 --> 00:10:42.980
That will invoke this TypeScript compiler

239
00:10:42.980 --> 00:10:47.980
we installed earlier on using dash ts.ts.

240
00:10:47.990 --> 00:10:50.728
And if you run this, you will actually get an error.

241
00:10:50.728 --> 00:10:53.267
You will still get a JavaScript file,

242
00:10:53.267 --> 00:10:57.460
because by default TypeScript will still compile it

243
00:10:57.460 --> 00:11:00.050
to JavaScript, you will also learn how

244
00:11:00.050 --> 00:11:02.900
to suppress this later in that course.

245
00:11:02.900 --> 00:11:05.904
But it gives you a compiler error while doing so.

246
00:11:05.904 --> 00:11:09.070
It tells you that argument of type string

247
00:11:09.070 --> 00:11:13.128
is not assignable to parameter of type number.

248
00:11:13.128 --> 00:11:16.550
So the problem here is that TypeScript understands

249
00:11:16.550 --> 00:11:18.930
that what we get on the value property

250
00:11:18.930 --> 00:11:23.130
of our input element will be a string.

251
00:11:23.130 --> 00:11:24.786
We also see this here in the IDE.

252
00:11:24.786 --> 00:11:28.130
And we can't pass this to add because there,

253
00:11:28.130 --> 00:11:31.026
we don't want a string, we want a number.

254
00:11:31.026 --> 00:11:33.600
So we have to fix this by, for example,

255
00:11:33.600 --> 00:11:36.790
converting this to a number here by adding a plus.

256
00:11:36.790 --> 00:11:39.708
And as soon as we do this, we can compile

257
00:11:39.708 --> 00:11:42.406
this code again by repeating that command

258
00:11:42.406 --> 00:11:45.225
and now it compiles without errors.

259
00:11:45.225 --> 00:11:49.030
It gives us this using TypeScript.JavaScript file

260
00:11:49.030 --> 00:11:50.690
and now it shows some errors again

261
00:11:50.690 --> 00:11:53.090
because it doesn't understand that it will never

262
00:11:54.028 --> 00:11:55.373
use both files at the same time here.

263
00:11:56.466 --> 00:11:58.530
Again, this is all something which will get better

264
00:11:58.530 --> 00:12:00.428
later in the course once we configure this.

265
00:12:00.428 --> 00:12:01.261
We can ignore this for now.

266
00:12:02.588 --> 00:12:04.348
So it gives me this file.

267
00:12:04.348 --> 00:12:06.210
And if we open this, we see something interesting in here.

268
00:12:06.210 --> 00:12:08.690
We see that there, of course, our types are gone.

269
00:12:08.690 --> 00:12:11.280
This casting here is gone.

270
00:12:11.280 --> 00:12:13.308
We have vanilla JavaScript again.

271
00:12:13.308 --> 00:12:16.250
So if we have a look at our TypeScript file here,

272
00:12:16.250 --> 00:12:18.786
we see that there we have all these nice additions.

273
00:12:18.786 --> 00:12:22.130
But as I mentioned, these are just TypeScript features.

274
00:12:22.130 --> 00:12:24.600
When you compile to JavaScript,

275
00:12:24.600 --> 00:12:26.770
they are used to evaluate your code

276
00:12:26.770 --> 00:12:29.090
and to find potential errors, but then they are stripped out

277
00:12:29.090 --> 00:12:33.960
and we get regular JavaScript as output.

278
00:12:33.960 --> 00:12:37.010
So now we can go to our index HTML file

279
00:12:37.010 --> 00:12:41.230
and import using ts.js and that's important.

280
00:12:41.230 --> 00:12:43.550
Always import JavaScript files

281
00:12:43.550 --> 00:12:45.990
because the browser can't run TypeScript.

282
00:12:45.990 --> 00:12:49.480
We need to import the result of our compilation.

283
00:12:49.480 --> 00:12:52.108
And now with that, if we reload this,

284
00:12:52.108 --> 00:12:55.750
we have our working code because now,

285
00:12:55.750 --> 00:12:57.970
we have proper JavaScript code

286
00:12:59.410 --> 00:13:01.110
where we fixed this issue by casting our inputs

287
00:13:01.110 --> 00:13:03.010
before we passed them to the function.

288
00:13:03.986 --> 00:13:06.087
But we were able to fix these issues

289
00:13:06.087 --> 00:13:08.100
because of our type annotations here.

290
00:13:08.100 --> 00:13:10.720
And as you saw, we had to write some other parts

291
00:13:10.720 --> 00:13:13.220
of the code in a cleaner way as well.

292
00:13:13.220 --> 00:13:15.400
And that is why TypeScript is amazing.

293
00:13:15.400 --> 00:13:17.880
It forces us to write better, cleaner,

294
00:13:17.880 --> 00:13:20.023
and less error-prone code.

