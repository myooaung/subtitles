WEBVTT

00:02.170 --> 00:03.290
Instructeur : On a beaucoup

00:03.290 --> 00:05.580
parlé d'interfaces et de classes maintenant.

00:05.580 --> 00:07.390
Regardons maintenant sous

00:07.390 --> 00:11.650
le capot et voyons ce que JavaScript produit réellement

00:11.650 --> 00:15.290
ou offre comme alternative à l'interface.

00:15.290 --> 00:17.450
Nous avons appris que pour le code de classe, au

00:17.450 --> 00:20.560
final, cela dépend de la version pour laquelle nous compilons.

00:20.560 --> 00:24.280
Si vous compilez pour es6 ici dans le conflit ts, alors notre

00:24.280 --> 00:27.160
sortie utiliserait le mot clé class.

00:27.160 --> 00:29.330
Puisque nous avons compilé pour es5 ici, nous voyons

00:29.330 --> 00:31.880
plutôt cette solution de contournement en utilisant construct

00:31.880 --> 00:33.420
ou des fonctions à la fin.

00:33.420 --> 00:36.670
Mais que se passe-t-il pour les interfaces ?

00:36.670 --> 00:38.720
Eh bien, jetons un coup d'œil à l'application. fichier js.

00:38.720 --> 00:41.780
Et là, vous ne voyez rien.

00:41.780 --> 00:46.360
Vous ne verrez pas de traductions pour nos interfaces.

00:46.360 --> 00:49.410
AddFn, Named, Greetable.

00:49.410 --> 00:52.970
On ne trouve ces choses nulle part dans l'application. js.

00:52.970 --> 00:55.440
Vous trouvez juste notre fonction ici, vous trouvez

00:55.440 --> 00:59.180
notre fonction de construction pour l'objet personne, donc essentiellement

00:59.180 --> 01:03.500
cette traduction pour la classe personne, et l'autre code.

01:03.500 --> 01:06.680
Vous ne trouvez aucune référence à aucune interface.

01:06.680 --> 01:08.240
Et il y a une bonne raison à cela.

01:08.240 --> 01:11.350
Il n'y a pas de traduction pour les interfaces.

01:11.350 --> 01:13.650
JavaScript ne connaît pas cette fonctionnalité.

01:13.650 --> 01:15.550
Il s'agit d'une fonctionnalité purement TypeScript,

01:15.550 --> 01:18.830
disponible uniquement pendant le développement et la compilation.

01:18.830 --> 01:21.640
Vous pouvez donc l'utiliser pour améliorer votre code.

01:21.640 --> 01:23.970
Aucun résultat ne se retrouvera dans vos

01:23.970 --> 01:26.010
fichiers JavaScript. Il s'agit donc

01:26.010 --> 01:28.390
d'une fonction de développement pure qui

01:28.390 --> 01:30.700
vous aide à écrire un meilleur code, un code

01:30.700 --> 01:34.100
clairement structuré suivant des règles claires.

01:34.100 --> 01:38.720
Au moment de l'exécution, aucune trace ne sera laissée de ces interfaces.

01:38.720 --> 01:41.760
Vous ne verrez rien concernant les interfaces dans votre

01:41.760 --> 01:44.710
code, seulement les fonctions, les classes, et tout

01:44.710 --> 01:47.130
le reste du code est compilé en sortie.

01:47.130 --> 01:50.020
On pourrait dire que les interfaces sont tout simplement abandonnées.

01:50.020 --> 01:53.170
Ils sont utilisés pendant la compilation pour vérifier votre code et ensuite

01:53.170 --> 01:54.340
ils sont ignorés.

01:54.340 --> 01:56.690
Il n'y a rien qui puisse être produit pour eux.
