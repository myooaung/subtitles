WEBVTT

00:02.150 --> 00:06.180
Instruktor: Jesteśmy więc w stanie zebrać naszą wartość wejściową tytułu

00:06.180 --> 00:07.420
i wydrukować ją do konsoli,

00:07.420 --> 00:10.160
ale oczywiście nie o to ostatecznie chodzi.

00:10.160 --> 00:13.940
Zamiast tego pomysł polega na tym, że zbieramy wszystkie nasze wartości

00:13.940 --> 00:15.420
wejściowe, szybko je zatwierdzamy,

00:15.420 --> 00:17.890
a następnie robimy coś z nimi.

00:17.890 --> 00:20.598
W tym celu dodam jeszcze jedną nową metodę,

00:20.598 --> 00:21.860
kolejną prywatną,

00:21.860 --> 00:25.700
bo będę ją wywoływał tylko z wnętrza klasy, a jest to

00:25.700 --> 00:28.530
metoda gatherUserInput.

00:28.530 --> 00:30.460
Nazwa jest całkowicie zależna od Ciebie.

00:30.460 --> 00:33.240
Mój pomysł polega na tym, że ta metoda zostaje wywołana tutaj.

00:33.240 --> 00:35.230
Po tym, jak zapobiegliśmy domyślnemu,

00:35.230 --> 00:38.980
powinno to w zasadzie dotrzeć do wszystkich naszych wejść tutaj, zebrać

00:38.980 --> 00:40.870
dane wejściowe użytkownika tam, sprawdzić

00:40.870 --> 00:43.060
je, a następnie zwrócić.

00:43.060 --> 00:45.950
Tak, że tutaj dostałem mój userInput,

00:45.950 --> 00:50.090
który może być tuple z tytułem, opisem i ludźmi,

00:50.090 --> 00:53.810
jako wolne wartości tuple.

00:53.810 --> 00:55.510
Właściwie, to podoba mi się ten pomysł.

00:55.510 --> 00:57.800
Zatem już tutaj zdefiniujmy typ zwrotny.

00:57.800 --> 00:59.880
Typem zwrotnym jest tuple.

00:59.880 --> 01:02.620
Czy teraz pamiętasz, jak definiuje się krotkę?

01:02.620 --> 01:05.630
Jak definiowany jest typ krotki?

01:05.630 --> 01:08.620
To nie jest ciąg, nawiasy kwadratowe.

01:08.620 --> 01:12.260
Oznacza to, że zwracasz tablicę ciągów znaków.

01:12.260 --> 01:14.550
Zamiast tego chcę powiedzieć,

01:14.550 --> 01:18.160
że zwracam tablicę dokładnie X elementów

01:18.160 --> 01:21.510
dokładnie tych trzech typów.

01:21.510 --> 01:23.650
W tym celu ustawiasz typ zwrotu tutaj,

01:23.650 --> 01:27.160
dwa nawiasy kwadratowe, a następnie wewnątrz nawiasów kwadratowych

01:27.160 --> 01:30.240
dodajesz różne elementy i typy elementów.

01:30.240 --> 01:32.900
Na przykład string, ciąg znaków i liczba.

01:32.900 --> 01:37.130
Z tym, mówisz, że ta metoda tutaj zwraca tuple, który ma trzy elementy,

01:37.130 --> 01:38.510
gdzie pierwszy element

01:38.510 --> 01:40.300
jest ciągiem, drugi element jest

01:40.300 --> 01:41.820
ciągiem, a trzeci element

01:41.820 --> 01:44.080
jest w rzeczywistości liczbą.

01:44.080 --> 01:46.360
A teraz możemy dodać trochę logiki do tej

01:46.360 --> 01:48.540
metody, aby to stało się prawdą.

01:48.540 --> 01:52.670
Więc w tym celu najpierw pobierzmy wprowadzony tytuł

01:52.670 --> 01:57.210
z tego titleInputElement. wartość.

01:57.210 --> 01:58.340
I możemy to powtórzyć.

01:58.340 --> 02:05.100
Chcemy również uzyskać wpisany opis kursu z tego elementu descriptionInputElement.

02:05.100 --> 02:05.100
wartość

02:05.100 --> 02:09.510
i ilość enteredPeople, lub tylko enteredPeople z tego

02:09.510 --> 02:12.440
peopleInputElement.

02:12.440 --> 02:13.870
Teraz przechowywałem to w

02:13.870 --> 02:15.490
stałych, aby nie musieć zawsze

02:15.490 --> 02:17.640
powtarzać tych dłuższych wyrażeń.

02:17.640 --> 02:19.370
Teraz możemy to zatwierdzić.

02:19.370 --> 02:21.500
Trywialną walidacją byłoby sprawdzenie,

02:21.500 --> 02:24.850
czy enteredTitle. trym, Czyli usunięcie szerokiej

02:24.850 --> 02:27.610
przestrzeni X na początku i na końcu.

02:27.610 --> 02:30.560
Length jest równa zero, lub jeśli

02:30.560 --> 02:35.350
enteredDescription. trim length jest równe zero,

02:35.350 --> 02:41.520
lub jeśli enteredPeople.

02:41.520 --> 02:41.520
długość

02:41.520 --> 02:44.380
trymu jest równa zeru.

02:44.380 --> 02:48.410
To sprawdziłoby, że żadne wejście nie jest puste.

02:48.410 --> 02:50.330
Nie sprawdza on jednak wszystkiego, co

02:50.330 --> 02:51.860
moglibyśmy chcieć sprawdzić.

02:51.860 --> 02:54.770
Nie sprawdzamy, czy wpisane osoby są,

02:54.770 --> 02:57.160
powiedzmy, liczbą dodatnią.

02:57.160 --> 03:00.170
Nie jesteśmy w stanie ustalić minimalnej długości.

03:00.170 --> 03:02.190
Musielibyśmy tutaj dodawać coraz więcej

03:02.190 --> 03:04.050
warunków i chociaż możemy to zrobić,

03:04.050 --> 03:06.820
nie byłoby to naprawdę skalowalne rozwiązanie.

03:06.820 --> 03:09.110
Jeśli mamy nasze części w aplikacji, w której chcemy

03:09.110 --> 03:11.550
również zatwierdzić dane wejściowe użytkownika,

03:11.550 --> 03:14.440
zawsze musimy powtarzać długie oświadczenia if.

03:14.440 --> 03:18.390
Więc wkrótce wymyślę inteligentniejsze rozwiązanie walidacji

03:18.390 --> 03:21.960
lub bardziej skalowalne rozwiązanie walidacji.

03:21.960 --> 03:23.780
Na razie możemy to tak zostawić.

03:23.780 --> 03:26.190
Możesz już o tym pomyśleć chociaż,

03:26.190 --> 03:28.520
i oczywiście po tym wykładzie tutaj,

03:28.520 --> 03:32.220
wstrzymaj się i pomyśl, jak mógłbyś zlecić to w oddzielną

03:32.220 --> 03:34.670
funkcję walidacji, która jest konfigurowalna,

03:34.670 --> 03:38.350
i jak typy mogłyby ci tam pomóc.

03:38.350 --> 03:41.370
Możliwych podejść jest zdecydowanie wiele, a ja w kolejnym

03:41.370 --> 03:44.040
wykładzie podzielę się z Wami moim.

03:44.040 --> 03:45.620
Ale zanim zrobimy to tam, faktycznie

03:45.620 --> 03:48.350
użyjmy tego trywialnego podejścia tutaj i zróbmy

03:48.350 --> 03:52.130
coś, jeśli wszystkie te warunki są spełnione.

03:52.130 --> 03:53.620
Teraz, jeśli zrobimy to w tym

03:53.620 --> 03:56.000
bloku if, wiemy, że co najmniej jedna walidacja

03:56.000 --> 03:57.350
nie powiodła się, a następnie

03:57.350 --> 04:01.833
możemy poprzez alert, gdzie mówimy Invalid input, please try again.

04:03.450 --> 04:04.910
Else, jeśli nie zrobimy

04:04.910 --> 04:06.200
tego tam, wiemy, że

04:06.200 --> 04:08.600
mamy prawidłowe dane wejściowe,

04:08.600 --> 04:11.310
else, chcę zwrócić mój tuple.

04:11.310 --> 04:14.170
Czyli tutaj chcę zwrócić wpisany

04:14.170 --> 04:17.090
tytuł, wpisany opis, a także

04:17.090 --> 04:19.660
wpisane osoby.

04:19.660 --> 04:20.630
Teraz jak widać jednak

04:20.630 --> 04:21.850
grupa typów nie jest zadowolona,

04:21.850 --> 04:25.370
bo wpisani ludzie powinni być numerem, a nie tekstem.

04:25.370 --> 04:27.410
I właściwie wszystko, co wyodrębnisz

04:27.410 --> 04:28.720
z właściwości value elementu

04:28.720 --> 04:32.350
wejściowego, będzie domyślnie tekstem.

04:32.350 --> 04:34.520
Tak więc, aby przekształcić to

04:34.520 --> 04:38.060
w liczbę, możemy wywołać parseFloat, na przykład,

04:38.060 --> 04:40.610
lub po prostu dodać plus przed nim, a

04:40.610 --> 04:42.850
to przekształci go w liczbę, a nadal

04:42.850 --> 04:45.430
grupa typów nie jest zadowolona, ponieważ,

04:45.430 --> 04:48.910
cóż, nie zawsze zwracamy krotkę.

04:48.910 --> 04:50.830
A co z tą częścią tutaj?

04:50.830 --> 04:52.310
Jeśli zrobimy to w bloku

04:52.310 --> 04:53.510
if, pokazujemy alert,

04:53.510 --> 04:55.820
ale nie zwracamy klepki.

04:55.820 --> 04:59.810
Cóż, są różne rzeczy, które moglibyśmy zrobić zamiast tego.

04:59.810 --> 05:03.460
Możemy po prostu nie zwracać nic, tak jak w tym przypadku.

05:03.460 --> 05:06.320
Alternatywnie, możemy rzucić błąd.

05:06.320 --> 05:08.360
Wtedy faktycznie nic byśmy nie zwrócili,

05:08.360 --> 05:11.100
ale w takim przypadku rzucimy błąd.

05:11.100 --> 05:12.820
Teraz nie chcę rzucać błędu tutaj, ponieważ

05:12.820 --> 05:15.570
tak naprawdę nie chcę implementować obsługi błędów, więc

05:15.570 --> 05:18.090
to, co zrobię, to po prostu dodam deklarację return, ale

05:18.090 --> 05:20.100
oczywiście nie jest to tuple.

05:20.100 --> 05:23.110
Więc tak naprawdę typem zwrotnym jest tuple,

05:23.110 --> 05:25.923
czyli właściwie jest niezdefiniowany.

05:27.320 --> 05:29.040
Teraz jednak, jak się nauczyłeś, nie

05:29.040 --> 05:30.750
powinieneś używać undefined tutaj

05:30.750 --> 05:32.550
jako typu zwrotnego na funkcjach.

05:32.550 --> 05:34.040
Zamiast tego użyj void.

05:34.040 --> 05:35.410
To prawie to samo, ale

05:35.410 --> 05:37.040
wyłączne dla funkcji,

05:37.040 --> 05:39.350
a to mówi TypeScriptowi, że jest

05:39.350 --> 05:44.350
to funkcja, która ma co najmniej gałąź, która nie zwraca żadnej wartości,

05:45.230 --> 05:46.930
tak jak ta.

05:46.930 --> 05:49.160
Tutaj również oczywiście używamy typu union,

05:49.160 --> 05:51.240
ponieważ mamy obie możliwości.

05:51.240 --> 05:53.170
Możemy nie zwrócić nic, lub

05:53.170 --> 05:55.660
faktycznie zwrócić tuple.

05:55.660 --> 05:57.510
Więc teraz mamy gatherUserInput

05:57.510 --> 05:59.370
i userInput tam dla wszystkich

05:59.370 --> 06:01.670
jest albo niezdefiniowany na końcu,

06:01.670 --> 06:04.130
albo jest tym tuple.

06:04.130 --> 06:07.640
Więc teraz, zanim przejdziemy dalej i poprawimy walidację,

06:07.640 --> 06:09.620
zbudujmy na tym userInput.

06:09.620 --> 06:12.480
Kiedy zbieramy userInput tam na dole, mamy teraz

06:12.480 --> 06:14.820
tę rzecz userInput, a teraz możemy sprawdzić,

06:14.820 --> 06:17.050
czy jest to tuple.

06:17.050 --> 06:19.820
Teraz problem jest w runtime, nie mamy sposobu

06:19.820 --> 06:22.620
na sprawdzenie, czy jest to tuple.

06:22.620 --> 06:25.200
Nie ma żadnego instanceof, którego moglibyśmy użyć.

06:25.200 --> 06:28.560
Nie ma typu Tuple, który moglibyśmy sprawdzić.

06:28.560 --> 06:31.020
Nie możemy również sprawdzić, czy typof

06:33.803 --> 06:36.053
userInput jest równy tuple, ponieważ

06:37.130 --> 06:40.050
nie istnieje to w Vanilla JavaScript.

06:40.050 --> 06:41.850
String istnieje na przykład,

06:41.850 --> 06:44.950
ale tuple nie jest typem JavaScript.

06:44.950 --> 06:47.020
Aby więc sprawdzić, czy jest to klepka,

06:47.020 --> 06:48.900
musimy pamiętać, że klepki na końcu

06:48.900 --> 06:50.990
są po prostu wymazane.

06:50.990 --> 06:52.750
Są one specjalne w TypeScript,

06:52.750 --> 06:54.860
ale kiedy jesteśmy w krainie JavaScript,

06:54.860 --> 06:55.940
są po prostu wymazane,

06:55.940 --> 06:58.320
ponieważ idea klepki, w której liczba

06:58.320 --> 06:59.950
elementów i typy elementów

06:59.950 --> 07:02.000
są stałe, naprawdę istnieje tylko

07:02.000 --> 07:04.470
w TypeScript.

07:04.470 --> 07:05.930
Czyli w czasie runtime

07:05.930 --> 07:09.370
musimy tutaj tylko sprawdzić, czy jest to tablica,

07:09.370 --> 07:12.950
a do tego możemy użyć obiektu array w JavaScript,

07:12.950 --> 07:15.180
a tam metody isArray.

07:15.180 --> 07:17.500
To jest metoda wbudowana w Vanilla JavaScript,

07:17.500 --> 07:20.290
która pozwala nam sprawdzić, czy to tutaj jest tablicą.

07:20.290 --> 07:23.200
Wiemy, że jest to albo niezdefiniowane, albo tuple.

07:23.200 --> 07:24.630
A tuple to tablica, więc

07:24.630 --> 07:26.000
jeśli to zwróci true,

07:26.000 --> 07:27.400
to mamy tuple.

07:27.400 --> 07:31.010
A następnie tutaj możemy użyć strukturyzacji na przykład, aby

07:31.010 --> 07:34.070
uzyskać tytuł, opis i ludzi z danych wejściowych użytkownika,

07:34.070 --> 07:35.560
a następnie zrobić coś z tymi

07:35.560 --> 07:37.720
danymi wejściowymi.

07:37.720 --> 07:39.230
Na przykład na teraz,

07:39.230 --> 07:42.623
konsola. tytuł dziennika, opis i osoby.

07:43.980 --> 07:46.060
Jeśli zrobimy to wszystko i zapiszemy,

07:46.060 --> 07:47.950
to kompiluje się bez błędów, a jeśli

07:47.950 --> 07:49.870
wrócimy tutaj i kliknę na projekt w ten

07:49.870 --> 07:51.310
sposób, otrzymam nieprawidłowe

07:51.310 --> 07:53.050
dane wejściowe.

07:53.050 --> 07:54.580
Jak wpiszę Halo, to nadal dostaje,

07:54.580 --> 07:56.950
bo nie dostaliśmy żadnego opisu.

07:56.950 --> 07:58.890
To jest opis.

07:58.890 --> 08:00.180
Nadal oczywiście dostajemy,

08:00.180 --> 08:02.940
ale jeśli teraz też wpisuję coś do ludzi, to działa

08:02.940 --> 08:05.220
i drukujemy to tutaj.

08:05.220 --> 08:09.330
Teraz to oczywiście miły krok w dobrym kierunku.

08:09.330 --> 08:10.990
Jeszcze nie do końca jesteśmy na miejscu.

08:10.990 --> 08:13.330
Jak powiedziałem, możemy poprawić walidację.

08:13.330 --> 08:16.230
Tylko jedną rzecz chcę zrobić od razu, zanim to zrobimy,

08:16.230 --> 08:20.070
chcę wyczyścić wszystkie wejścia po kliknięciu ADD PROJECT.

08:20.070 --> 08:22.440
Chcę więc ponownie opróżnić wszystkie wejścia.

08:22.440 --> 08:25.290
Teraz do tego możemy dodać nową metodę prywatną, clearInput

08:25.290 --> 08:27.043
lub clearInputs, i tam możemy ustawić

08:28.210 --> 08:32.740
ten titleInputElement. wartość równa pustemu łańcuchowi

08:32.740 --> 08:34.130
i powtórz to również

08:36.200 --> 08:38.980
dla innych wejść.

08:38.980 --> 08:41.960
Więc tutaj mamy descriptionInputElement,

08:41.960 --> 08:44.250
a tutaj mamy peopleInputElement,

08:44.250 --> 08:48.190
a teraz, jeśli nazwiemy to. clearInputs tutaj, powinniśmy upewnić

08:48.190 --> 08:50.200
się, że formularz zostanie wyczyszczony

08:50.200 --> 08:51.730
po jego przesłaniu.

08:51.730 --> 08:52.870
Więc jeśli spróbujemy tego

08:52.870 --> 08:54.380
ponownie, wpiszemy coś tutaj, widzisz,

08:54.380 --> 08:56.230
że jest to wydrukowane tutaj, a formularz

08:56.230 --> 08:57.740
jest wyczyszczony.

08:57.740 --> 09:00.720
Z tym, jestem ogólnie zadowolony z tego, jak sobie z tym poradziliśmy,

09:00.720 --> 09:03.300
ale teraz chcę poprawić walidację i napisać to w bardziej

09:03.300 --> 09:06.970
wielokrotnego użytku, skalowalny sposób.

09:06.970 --> 09:07.840
Jak wspomniałem, zdecydowanie

09:07.840 --> 09:10.320
nie krępujcie się najpierw zrobić tego na własną rękę.

09:10.320 --> 09:11.530
W następnym wykładzie zrobimy

09:11.530 --> 09:12.580
to wspólnie.
