WEBVTT

00:02.060 --> 00:06.410
Kursleiter: Typescript stellt JavaScript viele Typen zur Verfügung.

00:06.410 --> 00:10.100
JavaScript selbst kennt auch einige Datentypen, auf die ich in diesem

00:10.100 --> 00:12.230
Modul noch zurückkommen werde, aber Typescript

00:12.230 --> 00:14.950
fügt noch viele weitere Typen hinzu, und wie Sie in

00:14.950 --> 00:17.380
diesem Kurs lernen werden, können Sie mit Typescript

00:17.380 --> 00:21.110
auch Ihre eigenen Typen schreiben.

00:21.110 --> 00:24.320
Beginnen wir mit einigen der Kerntypen, die JavaScript

00:24.320 --> 00:26.250
bereits kennt und die auch von Typescript

00:26.250 --> 00:28.289
unterstützt werden, und sehen wir

00:28.289 --> 00:30.550
uns an, was der Unterschied zwischen

00:30.550 --> 00:33.380
JavaScript, das den Typ kennt, und Typescript,

00:33.380 --> 00:36.800
das diesen Typ verwendet, bedeutet.

00:36.800 --> 00:38.287
Einer der wichtigsten Typen, mit

00:38.287 --> 00:41.740
denen wir in JavaScript und Typescript arbeiten, ist der Zahlentyp.

00:41.740 --> 00:45.220
In JavaScript, und das gilt auch für Typescript,

00:45.220 --> 00:47.290
gibt es nur einen Zahlentyp.

00:47.290 --> 00:50.750
Es gibt keinen speziellen Typ für Ganzzahlen oder Fließkommazahlen.

00:50.750 --> 00:55.520
Stattdessen würden diese Werte hier alle Zahlen sein.

00:55.520 --> 00:58.180
Die Eins wäre eine Zahl ohne Nachkommastelle.

00:58.180 --> 01:01.640
5. 3 ist offensichtlich ein Wert mit einer

01:01.640 --> 01:04.532
Nachkommastelle und alle diese Werte sind vom Typ Zahl.

01:04.532 --> 01:08.180
Andere Programmiersprachen haben spezielle Integer-Typen

01:08.180 --> 01:10.480
und Float- oder Double-Typen.

01:10.480 --> 01:11.980
Bei JavaScript ist das nicht

01:11.980 --> 01:14.120
der Fall und bei Typescript auch nicht.

01:14.120 --> 01:16.070
Wir haben also den Zahlentyp, den

01:16.070 --> 01:19.810
wir aus JavaScript kennen, auch als Typ in Typescript.

01:19.810 --> 01:23.950
Wir haben auch den Datentyp String, und das ist Text, den Sie auf eine der drei folgenden

01:23.950 --> 01:26.370
Arten definieren können: mit einfachen Anführungszeichen,

01:26.370 --> 01:28.285
mit doppelten Anführungszeichen oder

01:28.285 --> 01:30.950
auch mit Backticks.

01:30.950 --> 01:34.720
Die letzte Notation mit Backticks ist eine spezielle Syntax,

01:34.720 --> 01:38.640
die in modernem JavaScript und auch in Typescript zur Verfügung

01:38.640 --> 01:42.440
steht. Sie erlaubt es uns, so genannte Template-Literale zu

01:42.440 --> 01:44.550
schreiben, also normale Strings,

01:44.550 --> 01:47.520
in die man dynamisch Daten einfügen kann.

01:47.520 --> 01:49.240
Strings sind also einfach

01:49.240 --> 01:53.000
Text, und JavaScript kennt die Typen von Stringwerten.

01:53.000 --> 01:55.000
Dies gilt auch für Typescript.

01:55.000 --> 01:57.240
Nicht zuletzt ist einer der wichtigsten Datentypen,

01:57.240 --> 01:59.790
den JavaScript kennt und den auch Typescript unterstützt,

01:59.790 --> 02:02.250
der boolesche Datentyp.

02:02.250 --> 02:03.810
Das wäre wahr oder falsch, und das

02:03.810 --> 02:06.610
ist beim Programmieren natürlich super wichtig, besonders

02:06.610 --> 02:08.920
wenn man mit IF-Anweisungen arbeitet.

02:08.920 --> 02:10.970
Hier haben wir diese beiden Werte,

02:10.970 --> 02:13.690
und das ist wichtig, denn in JavaScript kennen

02:13.690 --> 02:17.520
Sie vielleicht auch die Idee von wahrheitsgemäßen und falschen

02:17.520 --> 02:22.190
Werten, zum Beispiel, dass Null, die Zahl Null, ein falscher Wert ist.

02:22.190 --> 02:25.510
Wenn Sie ihn in einer IF-Bedingung verwenden, wird er als falsch behandelt.

02:25.510 --> 02:28.560
Der boolesche Datentyp kennt eigentlich nur die beiden Werte

02:28.560 --> 02:31.230
true oder false, und das gilt nicht nur für Typescript,

02:31.230 --> 02:33.160
sondern auch für JavaScript.

02:33.160 --> 02:35.532
Dieses wahrheitslose, falsche Konzept, das Sie

02:35.532 --> 02:38.280
kennen sollten, hat nichts mit Datentypen zu tun.

02:38.280 --> 02:40.840
Das ist die Arbeit hinter den Kulissen.

02:40.840 --> 02:43.030
JavaScript fügt zur Laufzeit, wenn

02:43.030 --> 02:46.510
es bestimmte Werte sieht, und IF-Bedingungen hinzu.

02:46.510 --> 02:48.530
Mit Zahlen, Zeichenketten und Booleschen Werten haben

02:48.530 --> 02:50.060
wir also ein paar Kerndatentypen.

02:50.060 --> 02:51.450
Natürlich sind das nicht alle,

02:51.450 --> 02:53.410
es gibt auch Objekte und so weiter, aber

02:53.410 --> 02:54.617
konzentrieren wir uns

02:54.617 --> 02:57.330
auf diese Typen und sehen wir uns an, was Typescript

02:57.330 --> 03:00.930
mit ihnen macht oder was wir mit ihrer Hilfe tun können.

03:00.930 --> 03:02.620
Dazu gehe ich zurück zu dem Projekt,

03:02.620 --> 03:05.190
das wir im ersten Kursmodul gesehen haben, und dort

03:05.190 --> 03:07.600
habe ich Ihnen gezeigt, dass alles, was Sie jetzt

03:07.600 --> 03:10.320
tun müssen, ist, npm start in einem Terminal auszuführen

03:10.320 --> 03:12.280
und in diesen Projektordner zu navigieren,

03:12.280 --> 03:15.130
um diesen Live-Entwicklungsserver zu starten, der

03:15.130 --> 03:18.110
immer dann neu geladen wird, wenn wir etwas ändern, und

03:18.110 --> 03:22.300
hier habe ich diese localhost:3000-Adresse in einem neuen Tab meines Browsers

03:22.300 --> 03:24.890
geöffnet.

03:24.890 --> 03:26.070
Richtig, ich bekomme eine Fehlermeldung,

03:26.070 --> 03:28.300
weil ich noch keine App-Tray als Datei habe.

03:28.300 --> 03:30.380
Natürlich werden Sie feststellen, dass dieses

03:30.380 --> 03:32.280
Startprojekt, das an diesen Vortrag angehängt

03:32.280 --> 03:34.400
ist, eine solche App-Tray-Datei erhält, die

03:34.400 --> 03:37.590
wir hier in unsere Index-HTML-Datei zu importieren versuchen, sobald

03:37.590 --> 03:42.050
wir die App kompilieren. ts von Typescript zu JavaScript und wir können das

03:42.050 --> 03:45.070
in einem neuen Tab des Terminals tun, so dass wir diesen Prozess laufen

03:45.070 --> 03:46.860
lassen und stattdessen einen neuen Tab öffnen,

03:46.860 --> 03:51.117
indem wir einfach tsc app ausführen. ts und was dies tut, ist, es kompiliert

03:53.920 --> 03:56.630
die Typescript-Datei und spuckt eine JavaScript-Datei

03:56.630 --> 03:58.680
aus, und sobald das passiert, können

03:58.680 --> 04:01.570
wir diese Seite neu laden und wir bekommen die Zeit,

04:01.570 --> 04:05.520
um loszulegen... Ausgabe hier.

04:05.520 --> 04:08.000
So, jetzt haben wir dieses Setup hier, wo wir

04:08.000 --> 04:10.620
etwas Typescript-Code schreiben können und

04:10.620 --> 04:14.650
dann kompilieren Sie es zu JavaScript-Code, um zu sehen, was es tut.

04:14.650 --> 04:17.000
Jetzt, in der Typescript-Datei, werde ich den

04:17.000 --> 04:18.870
Inhalt loswerden, denn jetzt möchte

04:18.870 --> 04:21.820
ich in diese Kerndatentypen eintauchen, die ich Ihnen gerade

04:21.820 --> 04:23.720
auf der Folie gezeigt habe, damit Sie

04:23.720 --> 04:27.230
verstehen, wie man mit ihnen in Typescript arbeitet.

04:27.230 --> 04:29.430
Lassen Sie uns ganz einfach anfangen.

04:29.430 --> 04:32.240
Sagen wir, wir haben eine neue Funktion, add, und

04:32.240 --> 04:34.990
dort erwarten wir zwei Zahlen, n1 und addieren

04:34.990 --> 04:38.610
zwei, und das gibt n1 plus n2 zurück, einfach so, eine sehr einfache

04:38.610 --> 04:42.370
Funktion, nichts Typescript-artiges daran.

04:42.370 --> 04:46.080
Jetzt haben wir zwei Zahlen, mit denen wir arbeiten wollen.

04:46.080 --> 04:49.800
Das könnte hier Nummer 1 sein, die, sagen wir, fünf ist, und

04:49.800 --> 04:54.680
auch Nummer 2, die vielleicht 2 ist. 8, was immer Sie wollen,

04:54.680 --> 04:57.060
zwei Zahlen hier.

04:57.060 --> 04:59.820
Jetzt können wir natürlich und nicht sehr überraschend

04:59.820 --> 05:02.950
addieren oder die Funktion add aufrufen und Nummer1 und Nummer2

05:02.950 --> 05:05.280
als Argumente an diese Funktion übergeben, das

05:05.280 --> 05:07.320
Ergebnis vielleicht in einer neuen Konstante

05:07.320 --> 05:10.360
speichern, und dann, um etwas auf dem Bildschirm zu sehen, können

05:10.360 --> 05:15.080
wir die Konsole benutzen.

05:15.080 --> 05:15.080
protokollieren Sie das Ergebnis.

05:15.080 --> 05:20.080
Wenn wir das tun, und ich diese Datei mit tsc app neu kompiliere. ts, dann sollte diese Seite bereits

05:20.270 --> 05:22.730
automatisch neu geladen werden.

05:22.730 --> 05:24.350
Wenn das nicht der Fall ist, können Sie natürlich manuell

05:24.350 --> 05:27.010
neu laden, und Sie sollten 7 sehen. 8.

05:27.010 --> 05:30.250
Sie denken jetzt vielleicht, das ist doch nichts Besonderes, oder?

05:30.250 --> 05:33.650
Dies ist ein ziemlich einfaches JavaScript-Snippet,

05:33.650 --> 05:37.330
und in der Tat hat es nichts Typescript-artiges an sich.

05:37.330 --> 05:39.450
Nun, lassen Sie uns etwas tun, das dieses

05:39.450 --> 05:41.900
Snippet in normalem JavaScript bremst.

05:41.900 --> 05:45.100
Sagen wir, diese Eingabe hier ist eigentlich keine Zahl,

05:45.100 --> 05:48.530
sondern ein Text, eine Fünf in Text, und wenn wir das jetzt

05:48.530 --> 05:49.880
speichern und unseren

05:49.880 --> 05:53.380
Kompilierungsbefehl hier erneut ausführen, werden Sie sehen,

05:53.380 --> 05:56.110
dass ich, sobald die Seite hier neu geladen wird,

05:56.110 --> 05:59.530
52 erhalte. 8 als Ausgang, und das ist offensichtlich

05:59.530 --> 06:02.200
nicht das richtige Ergebnis dieser Addition.

06:02.200 --> 06:04.500
Wissen Sie nun, warum wir diese Ausgabe in

06:04.500 --> 06:06.450
normalem JavaScript erhalten, das

06:06.450 --> 06:08.670
wir schließlich hier ausführen?

06:08.670 --> 06:10.150
Nun, wir bekommen diese Ausgabe,

06:10.150 --> 06:14.710
weil dies nicht das Ergebnis der mathematischen Addition ist, sondern dies stattdessen

06:14.710 --> 06:17.760
als String verkettet, weil diese Eingabe, hier, fünf, ein

06:17.760 --> 06:21.060
String ist und dann sieht JavaScript, "Okay, ich habe einen String,

06:21.060 --> 06:23.997
"Ich füge etwas zu diesem String hinzu, während sicherlich,

06:23.997 --> 06:27.667
"dieses Etwas sollte auch in einen String konvertiert werden, "so

06:27.667 --> 06:34.190
dass insgesamt, ich habe einen String, "weil der erste Wert ein String war," und daher, was JavaScript tut, ist, es konvertiert

06:34.190 --> 06:39.240
2.

06:39.240 --> 06:39.240
8

06:39.240 --> 06:42.720
von einer Zahl zu einer Zeichenkette, verkettet eine längere Zeichenkette aus fünf und 2. 8, was 52

06:42.720 --> 06:46.700
ergibt. 8, als Zeichenkette und gibt diese zurück.

06:46.700 --> 06:49.490
Es wird also nicht auf mathematische Weise behandelt,

06:49.490 --> 06:50.850
sondern als Zeichenkette,

06:50.850 --> 06:52.900
und mit JavaScript kann das passieren.

06:52.900 --> 06:54.037
Nun könnten Sie natürlich denken: "Warum

06:54.037 --> 06:55.427
sollte ich einen solchen Code schreiben?

06:55.427 --> 06:58.160
"Ich bin der Entwickler, warum sollte ich diesen Fehler machen? Nun, vielleicht sind Sie nicht derjenige, der diesen Fehler begeht.

06:58.160 --> 07:01.230
Vielleicht wird dies aus einer Benutzereingabe geholt und

07:01.230 --> 07:04.180
Sie haben einen kleinen Fehler in Ihren Code eingebaut, bei

07:04.180 --> 07:06.690
dem Sie vergessen haben, dies umzuwandeln, oder

07:06.690 --> 07:09.350
Sie arbeiten in einem Team und haben mehrere Skriptdateien,

07:09.350 --> 07:12.460
die zusammenarbeiten, und ein anderer Entwickler hat einen

07:12.460 --> 07:14.740
solchen Fehler eingebaut.

07:14.740 --> 07:17.270
Es ist nicht unmöglich, solche Fehler zu machen,

07:17.270 --> 07:20.110
aber es kann schwierig sein, sie aufzuspüren.

07:20.110 --> 07:22.340
Hier ist es natürlich ziemlich offensichtlich, dass

07:22.340 --> 07:24.010
etwas schief gelaufen ist, weil wir ein einfaches

07:24.010 --> 07:26.400
Skript haben, aber in einem größeren Skript erkennt man vielleicht

07:26.400 --> 07:28.320
nicht einmal sofort, dass hier etwas schief gelaufen

07:28.320 --> 07:31.520
ist, und genau dabei kann uns Typescript helfen.

07:31.520 --> 07:33.720
In dieser Funktion können wir unseren

07:33.720 --> 07:36.390
Parametern Typenzuweisungen hinzufügen.

07:36.390 --> 07:38.820
Wir können Typescript mitteilen, dass

07:38.820 --> 07:42.280
diese beiden Parameter vom Typ number sein sollen und nicht

07:42.280 --> 07:45.340
vom Typ I don't care which is the default.

07:45.340 --> 07:47.535
Dazu fügen wir hier nach dem Wert, dem

07:47.535 --> 07:50.300
wir einen Typ zuweisen wollen, einen Doppelpunkt

07:50.300 --> 07:52.890
ein, in diesem Fall also nach dem Parameternamen

07:52.890 --> 07:55.220
und dem Namen des Typs.

07:55.220 --> 07:57.140
Einer der unterstützten Namen ist zum Beispiel number.

07:57.140 --> 08:00.560
Neben number gibt es auch string oder Boolean,

08:00.560 --> 08:03.480
aber darauf kommen wir noch zurück.

08:03.480 --> 08:05.990
Im Moment brauchen wir eine Zahl, und zwar

08:05.990 --> 08:07.750
nicht nur für den ersten Parameter,

08:07.750 --> 08:10.530
sondern auch für den zweiten.

08:10.530 --> 08:12.010
Also, auch hier können wir einen

08:12.010 --> 08:16.150
Doppelpunkt hinzufügen, und dann eine Zahl, und jetzt sagen wir zu Typescript:

08:16.150 --> 08:18.367
"Hey, beide Parameter hier sollten vom Typ

08:18.367 --> 08:22.147
Zahl sein, "die Übergabe von Werten eines anderen Typs ist nicht erlaubt",

08:22.147 --> 08:25.530
und in der Tat, meine IDE beschwert sich hier schon, weil Visual

08:25.530 --> 08:28.360
Studio Code eingebaute Typescript-Unterstützung hat,

08:28.360 --> 08:32.510
aber selbst wenn wir das übersehen würden, sobald ich das neu kompiliere, indem

08:32.510 --> 08:34.260
ich tsc app. ts, Sie werden sehen,

08:34.260 --> 08:39.193
wir bekommen einen Fehler.

08:40.040 --> 08:41.670
Wir erhalten die Fehlermeldung "Argument

08:41.670 --> 08:42.697
des Typs '"5" kann nicht

08:42.697 --> 08:46.250
einem Parameter des Typs 'number' zugewiesen werden", und es wird sogar

08:46.250 --> 08:48.660
angezeigt, wo das passiert ist, und es wird eine Zeilennummer

08:48.660 --> 08:51.140
angegeben, Zeile acht, und es wird im Grunde das Gleiche

08:51.140 --> 08:54.430
angezeigt, was die IDE hier anzeigt.

08:54.430 --> 08:56.740
Falls wir es also in der IDE übersehen haben,

08:56.740 --> 08:58.707
führt das Kompilieren jetzt zu einem

08:58.707 --> 09:01.340
Fehler, und das ist das Wichtige an Typescript.

09:01.340 --> 09:03.284
Es hilft uns nur bei der Zusammenstellung.

09:03.284 --> 09:06.220
JavaScript wird nicht so verändert, dass es zur Laufzeit anders

09:06.220 --> 09:10.110
funktioniert, da die Browser keine eingebaute Typescript-Unterstützung haben.

09:10.110 --> 09:13.510
Es kann uns nur während der Entwicklung helfen, bevor wir unseren

09:13.510 --> 09:15.700
Typescript-Code in JavaScript kompilieren,

09:15.700 --> 09:19.310
aber dort ist es extrem nützlich, weil es einen zusätzlichen Schritt hinzufügt,

09:19.310 --> 09:21.520
eine zusätzliche Sicherheitsprüfung, bei

09:21.520 --> 09:25.560
der wir herausfinden: "Oh, wir haben einen Fehler gemacht.

09:25.560 --> 09:28.407
"Hier, das sollte keine Zeichenkette sein, sondern

09:28.407 --> 09:31.660
eine Zahl", und wir können das korrigieren und sind gut.

09:31.660 --> 09:34.210
Das ist die Aufgabe von Typescript.

09:34.210 --> 09:35.670
Es hilft Ihnen bei der Entwicklung.

09:35.670 --> 09:37.390
Ihr Laufzeitcode wird dadurch nicht verändert.

09:37.390 --> 09:40.130
Hier wurde sogar mit den Standardeinstellungen unser

09:40.130 --> 09:42.800
Fehler kompiliert, obwohl er während der Kompilierung

09:42.800 --> 09:44.700
erkannt wurde, und es wurde eine Datei

09:44.700 --> 09:47.220
erstellt, die zu dem falschen Ergebnis führt, weil

09:47.220 --> 09:50.690
Typescript hier standardmäßig nicht eingreift.

09:50.690 --> 09:53.560
Später werden Sie erfahren, wie Sie dafür sorgen können, dass dies der Fall ist,

09:53.560 --> 09:56.300
aber standardmäßig wird die Kompilierung nicht einmal blockiert.

09:56.300 --> 09:59.260
Dennoch schreit es Sie an und weist Sie auf diesen

09:59.260 --> 10:03.570
Fehler hin, damit Sie ihn beheben und solche Fehler hier vermeiden

10:03.570 --> 10:04.850
können.

10:04.850 --> 10:07.450
Übrigens, stellen Sie sicher, dass

10:07.450 --> 10:09.020
Sie keine App haben. js und app. ts zur gleichen Zeit öffnen.

10:09.020 --> 10:11.950
Hier kann es in der IDE zu Fehlern kommen, die

10:11.950 --> 10:13.470
sich auf doppelte Funktionsimplementierungen beziehen.

10:13.470 --> 10:15.830
Das Schließen der JavaScript-Datei behebt dieses Problem.
