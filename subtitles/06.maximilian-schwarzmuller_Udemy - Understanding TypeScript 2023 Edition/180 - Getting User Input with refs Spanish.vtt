WEBVTT

00:02.240 --> 00:04.870
Presentador: Así que tenemos nuestro primer componente añadido.

00:04.870 --> 00:06.090
Añadamos una segunda.

00:06.090 --> 00:09.970
NuevoTodo. tsx es un nombre de archivo.

00:09.970 --> 00:13.060
Ahí, por supuesto, importamos react de react.

00:13.060 --> 00:16.170
Y, por supuesto, también podrías construir componentes basados en clases.

00:16.170 --> 00:18.270
Esto también es totalmente compatible,

00:18.270 --> 00:22.410
pero voy a utilizar este estilo moderno de componentes funcionales solamente.

00:22.410 --> 00:24.070
Así que aquí tenemos de nuevo una función

00:24.070 --> 00:26.180
que formará nuestro componente más tarde.

00:26.180 --> 00:29.258
Y exporto NewTodo como mi defecto y vamos a añadir una

00:29.258 --> 00:31.260
asignación de tipo y vamos a dejar claro

00:31.260 --> 00:33.021
que este será un componente de

00:33.021 --> 00:34.410
función de tipo.

00:34.410 --> 00:35.800
Y por lo tanto, por supuesto

00:35.800 --> 00:38.220
aquí, nos falta un poco de código jsx devuelto.

00:38.220 --> 00:39.730
Así que aquí voy a devolver un formulario

00:39.730 --> 00:42.030
donde quiero añadir todos los controles que necesito para

00:42.030 --> 00:43.780
que el usuario pueda añadir nuevos todos.

00:45.060 --> 00:48.650
Ahora vamos a añadir este nuevo componente de tareas en el componente de la aplicación.

00:48.650 --> 00:53.650
Así que aquí podemos importar NewTodo desde . /componentes/NuevoTodo y simplemente

00:55.130 --> 00:58.095
añadirlo aquí en lugar del comentario.

00:58.095 --> 01:00.520
NewTodo como un componente de auto-cierre,

01:00.520 --> 01:02.790
porque ahora mismo no estamos pasando nada

01:02.790 --> 01:04.750
entre las etiquetas de apertura y

01:04.750 --> 01:07.784
cierre y tampoco tenemos ningún props aquí, al menos

01:07.784 --> 01:09.263
por el momento.

01:10.140 --> 01:11.540
Así que en lugar de este componente,

01:11.540 --> 01:13.330
ahora podemos añadir una entrada

01:13.330 --> 01:16.190
y también a partir de entonces un botón.

01:16.190 --> 01:18.117
Así que añadir un div aquí en realidad

01:18.117 --> 01:20.020
en la que quiero tener una etiqueta

01:20.020 --> 01:24.880
con atributos htmlFor para apuntar a digamos, "todo-texto".

01:24.880 --> 01:26.560
Todo esto es sólo el marcado

01:26.560 --> 01:31.250
aquí, donde digo "Todo Text" y luego elemento de entrada de tipo texto

01:31.250 --> 01:35.170
con un id de "todo text", para que la etiqueta y la entrada

01:35.170 --> 01:36.900
están conectados correctamente

01:36.900 --> 01:39.640
semánticamente.

01:39.640 --> 01:41.440
Y debajo de ese div aquí, en lugar

01:41.440 --> 01:43.120
del formulario voy a añadir un botón

01:43.120 --> 01:44.437
donde digo, "ADD TODO",

01:45.297 --> 01:47.970
Y ese botón debe ser de tipo submit para que, bueno,

01:47.970 --> 01:49.670
envíe el formulario.

01:49.670 --> 01:51.900
Este es un formulario muy básico que podemos utilizar

01:51.900 --> 01:53.143
para añadir un nuevo Todo.

01:54.580 --> 01:57.060
Ahora, vamos a asegurarnos de que esto

01:57.060 --> 01:59.660
funciona y para ello tenemos que aplicar

01:59.660 --> 02:01.820
un par de pasos diferentes.

02:01.820 --> 02:05.020
Necesitamos obtener lo que el usuario haya introducido aquí

02:05.020 --> 02:08.550
y luego necesitamos reenviar lo que el usuario introduzca aquí al

02:08.550 --> 02:09.810
componente de la aplicación

02:09.810 --> 02:13.330
porque es donde gestionaremos nuestros todos más tarde.

02:13.330 --> 02:16.150
Así que, en primer lugar, vamos a reaccionar a la presentación de formularios, tal vez.

02:16.150 --> 02:18.050
Podemos añadir una nueva función,

02:18.050 --> 02:20.300
por lo que una función en el componente funcional,

02:20.300 --> 02:22.720
pero que ahora será una función regular, que

02:22.720 --> 02:27.720
vamos a llamar, "todoSubmitsHandler", cualquier nombre que desee.

02:28.210 --> 02:29.990
Esta es una función que debe dispararse

02:29.990 --> 02:31.860
cada vez que se envíe este formulario.

02:31.860 --> 02:35.571
Así que podemos enlazarlo a la proposición onSubmit aquí al final,

02:35.571 --> 02:38.770
todoSubmitsHandler, no lo ejecutamos, sólo lo señalamos,

02:38.770 --> 02:40.900
para que se ejecute por nosotros cada

02:40.900 --> 02:43.810
vez que se envíe este formulario.

02:43.810 --> 02:46.270
Ahora aquí obtenemos un objeto de evento y el objeto

02:46.270 --> 02:49.507
de evento es de tipo react. EventoFormulario.

02:51.290 --> 02:54.010
Ahora ahí quiero llamar a event prevent default para

02:54.010 --> 02:55.780
evitar ese defecto, que es enviar

02:55.780 --> 02:59.280
una petición real al servidor que sirve esta aplicación.

02:59.280 --> 03:01.520
Por supuesto, no es cuando quiero que ocurra.

03:01.520 --> 03:04.680
Quiero manejar esta solicitud sólo aquí en JavaScript y

03:04.680 --> 03:08.350
por lo tanto este navegador por defecto tiene que ser impedido.

03:08.350 --> 03:09.770
Ahora con eso prevenido, podemos

03:09.770 --> 03:12.610
obtener lo que el usuario introdujo en la entrada y para

03:12.610 --> 03:15.250
esto tenemos dos maneras diferentes.

03:15.250 --> 03:18.310
Podemos manejar el estado de la entrada aquí, con

03:18.310 --> 03:20.970
un tipo de enlace de dos vías, o usamos una referencia,

03:20.970 --> 03:23.170
para extraer lo que el usuario ingresó

03:23.170 --> 03:26.520
aquí cuando el formulario es enviado.

03:26.520 --> 03:28.410
Me decantaré por este último enfoque porque,

03:28.410 --> 03:30.420
de todos modos, veremos la gestión de estados

03:30.420 --> 03:33.470
en acción en el componente de la aplicación en un segundo.

03:33.470 --> 03:37.340
Para configurar dicha ref, importamos el hook useRef de react,

03:37.340 --> 03:40.580
y los hooks son funciones especiales que puedes ejecutar

03:40.580 --> 03:45.290
y componentes de funciones para añadir ciertas funcionalidades al componente

03:45.290 --> 03:48.101
y cuando ejecutamos useRef aquí, lo que obtenemos

03:48.101 --> 03:51.190
de vuelta es un objeto Ref, que podemos almacenar

03:51.190 --> 03:53.730
en una constante y lo llamaré, "textInputRef"

03:53.730 --> 03:57.310
en realidad.

03:57.310 --> 04:00.176
Y podemos, por ejemplo, utilizar dicha referencia para

04:00.176 --> 04:04.980
asignarla a un elemento dom y luego interactuar con ese elemento dom desde dentro de nuestro

04:04.980 --> 04:06.500
código aquí arriba.

04:06.500 --> 04:08.800
Así que, por ejemplo, cuando se envía ese formulario.

04:09.680 --> 04:11.510
Configuramos dicha conexión añadiendo

04:11.510 --> 04:14.020
la proposición especial Ref a cualquier elemento

04:14.020 --> 04:16.580
html de tu elección y apuntando a ese objeto que

04:16.580 --> 04:19.150
hemos creado aquí arriba.

04:19.150 --> 04:21.530
Así que añade textInputRef.

04:21.530 --> 04:23.540
Esto crea una conexión aquí.

04:23.540 --> 04:27.380
Sin embargo, ya ves de nuevo que a TypeScript no le gusta esto.

04:27.380 --> 04:30.110
Porque useRef resulta ser una

04:30.110 --> 04:33.250
función genérica también.

04:33.250 --> 04:35.270
Ahora qué tipo podríamos pasarle.

04:35.270 --> 04:37.340
¿Qué sería interesante saber aquí?

04:37.340 --> 04:39.200
Bueno sería interesante saber que

04:39.200 --> 04:42.030
tipo de datos se almacenarán dentro del gráfico

04:42.030 --> 04:43.970
y ya que señalas el elemento de entrada,

04:43.970 --> 04:47.880
tendremos un elemento de entrada html almacenado ahí.

04:47.880 --> 04:50.420
Ahora sólo tendríamos que proporcionar un valor por defecto

04:50.420 --> 04:51.840
a la Ref cuando se está configurando

04:51.840 --> 04:53.190
y allí proporcionaremos null,

04:53.190 --> 04:54.710
porque cuando el componente se renderiza

04:54.710 --> 04:56.360
por primera vez, cuando este código se

04:56.360 --> 04:57.380
ejecuta, por supuesto esto

04:57.380 --> 04:59.460
no se ha renderizado allí abajo, así que entonces

04:59.460 --> 05:01.590
esto no apuntará a nada.

05:01.590 --> 05:03.350
Sin embargo, una vez que se haya realizado,

05:03.350 --> 05:04.950
la conexión se establecerá y entonces

05:04.950 --> 05:07.040
este Ref funcionará.

05:07.040 --> 05:09.453
Y ahora aquí, en el todoSubmitHandler, podemos obtener

05:10.342 --> 05:15.342
el texto introducido utilizando textInputRef. actual, eso es algo que siempre hay

05:15.500 --> 05:17.973
que introducir cuando se trabaja

05:17.973 --> 05:21.440
con un árbitro, . valor por supuesto aquí porque

05:21.440 --> 05:24.530
trabajamos con el elemento de entrada html.

05:24.530 --> 05:27.940
Sin embargo, aquí el problema es que esto podría ser nulo.

05:27.940 --> 05:29.630
Es un problema que ya conocemos, lo

05:29.630 --> 05:31.790
tuvimos al principio del curso también cuando

05:31.790 --> 05:33.370
seleccionamos algo en un Dom y lo

05:33.370 --> 05:34.630
tenemos aquí también, porque

05:34.630 --> 05:37.020
TypeScript no puede saber con certeza que esta conexión

05:37.020 --> 05:38.800
está establecida.

05:38.800 --> 05:40.580
Lo sabemos, escribimos el código, pero

05:40.580 --> 05:43.050
TypeScript desgraciadamente no entiende que sí

05:43.050 --> 05:45.300
establecemos una conexión ahí abajo.

05:46.310 --> 05:48.920
Así que, para arreglar esto podemos añadir un signo de exclamación

05:48.920 --> 05:51.350
aquí, para decirle de nuevo a TypeScript que esto estará

05:51.350 --> 05:54.350
bien, que esto se establecerá, y estamos bien.

05:54.350 --> 05:56.130
Por cierto TypeScript es correcto

05:56.130 --> 05:58.920
si llamáramos a todoSubmitHandler aquí, esto se llamaría

05:58.920 --> 06:00.590
el adelante, esto se renderizó

06:00.590 --> 06:02.410
por primera vez y entonces de hecho

06:02.410 --> 06:05.000
esto no sería inicializado todavía.

06:05.000 --> 06:07.910
Sólo sabemos que será inicializado con certeza porque sabemos

06:07.910 --> 06:09.730
que esto sólo será llamado cuando el formulario

06:09.730 --> 06:10.830
sea enviado y eso sólo puede

06:10.830 --> 06:13.830
ocurrir después de que esto haya sido renderizado.

06:13.830 --> 06:16.120
Así que sabemos cómo funciona nuestro código.

06:16.120 --> 06:18.360
Esto nunca será nulo.

06:18.360 --> 06:20.810
Si hubiera alguna otra posibilidad, habría

06:20.810 --> 06:22.780
que utilizar un if-check aquí para comprobar

06:22.780 --> 06:26.030
si textInputRef. actual es nulo y si lo

06:26.030 --> 06:27.620
es, haz algo más.

06:27.620 --> 06:29.550
Pero aquí esto no puede ocurrir.

06:29.550 --> 06:31.230
Así que con eso estamos extrayendo

06:31.230 --> 06:34.640
un valor y podemos consolar. registre esto aquí para ver si funciona.

06:34.640 --> 06:37.040
Pero, por supuesto, esta no es la configuración final entonces.

06:37.040 --> 06:40.900
Así que guardemos esto, entremos aquí, terminemos

06:40.900 --> 06:44.590
en un mes y agreguemos todo, y lo vemos aquí en

06:44.590 --> 06:47.970
los registros de la consola.

06:47.970 --> 06:50.310
Esto está funcionando como debería.

06:50.310 --> 06:51.910
Y con esto funcionando como debería,

06:51.910 --> 06:55.460
ahora vamos a asegurarnos de llevar ese valor al componente de la aplicación.

06:55.460 --> 06:58.820
Si conoces a algunos reaccionan definitivamente probarlo por su cuenta en primer lugar.

06:58.820 --> 07:00.963
Lo haremos juntos en la próxima conferencia.
