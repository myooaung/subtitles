WEBVTT

00:02.400 --> 00:04.350
Instructor: Los espacios para los nombres son

00:04.350 --> 00:07.240
bastante agradables, pero no son necesariamente perfectos.

00:07.240 --> 00:09.680
En la última clase vimos un problema en el

00:09.680 --> 00:13.290
que añadí manualmente todas las pendencias a cada archivo.

00:13.290 --> 00:15.620
Cuando quito, arrastro y suelto de la lista de

00:15.620 --> 00:17.340
proyectos, sí por ejemplo, sigue

00:17.340 --> 00:18.900
compilando sin errores.

00:18.900 --> 00:20.350
Esto no es lo ideal.

00:20.350 --> 00:22.360
Ahora bien, puede que funcione o no, dependiendo

00:22.360 --> 00:25.047
de si algún otro archivo importa el modelo de arrastre

00:25.047 --> 00:27.550
que, al final, necesito aquí.

00:27.550 --> 00:29.100
Lo que aquí sería el caso.

00:29.100 --> 00:31.533
Así que técnicamente, incluso después de eliminar

00:31.533 --> 00:33.200
esto, funciona aquí.

00:33.200 --> 00:35.580
Pero esto no es genial, es bastante peligroso.

00:35.580 --> 00:38.560
Si confiamos en que algún archivo se encargará de

00:38.560 --> 00:41.990
ello por nosotros, pues si luego borramos o cambiamos ese

00:41.990 --> 00:44.830
archivo que nos salvó el culo, de repente cambiamos

00:44.830 --> 00:47.740
algo totalmente ajeno y nuestra aplicación deja

00:47.740 --> 00:49.240
de funcionar.

00:49.240 --> 00:51.420
Definitivamente no queremos eso.

00:51.420 --> 00:53.900
Así que sería bueno que tuviéramos importaciones

00:53.900 --> 00:58.050
y exportaciones que indicaran claramente qué importamos de qué archivo.

00:58.050 --> 00:59.660
Y si necesitamos algo aquí, Drag

00:59.660 --> 01:01.120
Target por ejemplo, y no lo

01:01.120 --> 01:03.400
estamos importando explícitamente, obtenemos

01:03.400 --> 01:04.840
un error.

01:04.840 --> 01:06.450
Eso es básicamente lo que queremos.

01:06.450 --> 01:10.235
Y obtenemos este comportamiento con los módulos ES6.

01:10.235 --> 01:12.930
Ahora, los módulos ES6 también existen fuera del

01:12.930 --> 01:14.800
tipo del mundo, los navegadores modernos

01:14.800 --> 01:17.340
los soportan de forma nativa, donde el navegador

01:17.340 --> 01:19.630
entonces básicamente descargará todas las

01:19.630 --> 01:22.960
pendencias de un archivo cuando se ejecute.

01:22.960 --> 01:25.150
Pero los tipos también podrían importarlos

01:25.150 --> 01:28.350
y luego obtener el soporte de tipo inicial cuando los usemos.

01:28.350 --> 01:31.007
¿Cómo funcionan los módulos ES6?

01:31.007 --> 01:33.600
Empecemos de nuevo con la función de arrastrar y soltar.

01:33.600 --> 01:35.240
Quitemos eso del espacio de nombres

01:35.240 --> 01:37.360
que es una confeción de tipos pura.

01:37.360 --> 01:40.030
Pero mantengamos la palabra clave de exportación.

01:40.030 --> 01:42.150
La palabra clave de exportación no es sólo el allí para

01:42.150 --> 01:44.290
trabajar con los espacios de nombres, es en realidad

01:44.290 --> 01:46.980
una sintaxis por defecto de la secuencia de comandos de Java que

01:46.980 --> 01:49.800
es todo tan importante por la secuencia de comandos de tipo.

01:49.800 --> 01:52.360
Significa que exportas esta interfase

01:52.360 --> 01:53.600
y esta de aquí también

01:53.600 --> 01:56.870
desde este archivo y puedes importarla a otro

01:56.870 --> 01:58.460
archivo.

01:58.460 --> 02:01.290
En nuestro caso lo necesitamos en los archivos de elementos de

02:01.290 --> 02:02.980
proyecto y de lista de proyectos.

02:02.980 --> 02:05.230
Ahora vamos a empezar con el elemento del proyecto.

02:05.230 --> 02:09.030
Para importar algo del módulo ES para que con ese módulo ES synthax,

02:09.030 --> 02:11.450
se especifica la importación en la parte

02:11.450 --> 02:14.440
superior del archivo o cerca de la parte superior

02:14.440 --> 02:16.110
del archivo antes de empezar

02:16.110 --> 02:18.970
a escribir cualquier código real.

02:18.970 --> 02:23.240
Importar desde y luego apuntas a ese archivo con una ruta relativa

02:23.240 --> 02:27.320
desde el archivo en el que estás importando.

02:27.320 --> 02:29.340
Así que en este caso tenemos que subir de

02:29.340 --> 02:31.030
nivel con dos puntos y una barra.

02:31.030 --> 02:32.509
Así que estamos en la carpeta de

02:32.509 --> 02:35.550
origen, y luego tenemos que ir aquí a la carpeta de módulos y la

02:35.550 --> 02:37.450
importación de arrastrar y soltar.

02:37.450 --> 02:40.480
Ahora importante, añadir punto JS aquí, porque

02:40.480 --> 02:43.480
usted necesita para importar como si esto ya se

02:43.480 --> 02:46.470
compiló, porque esto se tomará en vanilla Java

02:46.470 --> 02:49.130
script y luego debe buscar Java script allí

02:49.130 --> 02:50.860
así que para los archivos de

02:50.860 --> 02:53.580
Java script por lo que el punto JS necesita

02:53.580 --> 02:55.010
ser añadido.

02:55.010 --> 02:57.560
Ahora importas algo de ahí y para ello

02:57.560 --> 02:59.320
añades llaves entre las que

02:59.320 --> 03:01.500
especificas lo que quieres importar

03:01.500 --> 03:03.150
de ese archivo.

03:03.150 --> 03:06.430
Ahí ya me sale el autocompletado que quiero

03:06.430 --> 03:08.480
importar arrastrando.

03:08.480 --> 03:10.910
Ahora draggable está disponible aquí

03:10.910 --> 03:14.430
y types ve que no está disponible y se alegra.

03:14.430 --> 03:16.860
Ahora tenemos que convertir todo para que se pueda mostrar

03:16.860 --> 03:17.930
en tiempo de ejecución.

03:17.930 --> 03:20.370
Así que vamos a deshacernos del espacio de nombres aquí también.

03:20.370 --> 03:22.340
Ahora hay que cerrar también la abrazadera rizada.

03:22.340 --> 03:24.870
Y ahora, por ejemplo, aquí tenemos lo que queremos,

03:24.870 --> 03:27.540
tenemos errores, tenemos error de componente,

03:27.540 --> 03:29.650
proyecto, todo esto falta.

03:29.650 --> 03:31.890
Así que vamos a exportar e importar todas estas cosas.

03:31.890 --> 03:33.220
Por ejemplo, en el componente base,

03:33.220 --> 03:34.540
elimine el espacio del nombre, mantenga

03:34.540 --> 03:36.810
la palabra clave de exportación como ha aprendido.

03:36.810 --> 03:38.270
Deshazte de la llave de cierre

03:38.270 --> 03:40.810
y reformatea y proyecta la importación.

03:40.810 --> 03:43.380
Siempre podemos deshacernos del espacio de nombres.

03:43.380 --> 03:45.760
Y todas las referencias aquí, en realidad puede eliminar

03:45.760 --> 03:48.803
todas las importaciones de referencia que tiene en cualquier lugar.

03:51.300 --> 03:53.593
Deshazte de todas las llaves de espacio de nombre.

03:55.010 --> 03:56.950
Lista de proyectos, deshacerse de todo el

03:56.950 --> 03:58.466
espacio de nombres y las referencias,

03:58.466 --> 04:00.690
deshacerse de la llave de cierre de allí.

04:00.690 --> 04:03.320
Y los decoradores, deshacerse del espacio

04:03.320 --> 04:05.330
de nombre y la llave de cierre y arrastrar

04:05.330 --> 04:07.940
y soltar, ya nos deshicimos de él.

04:07.940 --> 04:10.230
Proyecto, deshazte del espacio del nombre

04:10.230 --> 04:11.920
y de la llave de cierre.

04:11.920 --> 04:14.460
El proyecto se quedó, como es lógico, sin el espacio

04:14.460 --> 04:16.223
del nombre y el cierre.

04:18.390 --> 04:22.620
Rizo corchete aquí en realidad estábamos confiando en el proyecto de ser

04:22.620 --> 04:24.740
importado por algún otro archivo, no

04:24.740 --> 04:26.620
tenía referencias a él aquí.

04:26.620 --> 04:28.770
Así que ese era el comportamiento peligroso

04:28.770 --> 04:29.880
del que hablaba.

04:29.880 --> 04:31.871
Esto podría haber fallado si no importáramos

04:31.871 --> 04:35.120
o si no hiciéramos referencia a nuestra parte del proyecto en el espacio

04:35.120 --> 04:36.710
de nombres en algún otro archivo.

04:36.710 --> 04:39.090
Así que definitivamente no era lo ideal.

04:39.090 --> 04:41.560
Pero con eso vamos a continuar nuestra refactorización.

04:41.560 --> 04:44.430
En la validación aquí deshacerse del espacio de nombre

04:44.430 --> 04:46.050
aquí y todo el cierre curly brace

04:46.050 --> 04:47.550
aquí en la parte inferior.

04:47.550 --> 04:49.150
Y por último, pero no menos importante, una aplicación

04:49.150 --> 04:51.503
TS, deshacerse de estas importaciones y del espacio de nombres.

04:52.700 --> 04:55.350
Así que ahora tenemos errores por todas partes, pero

04:55.350 --> 04:56.988
ahora podemos empezar de nuevo.

04:56.988 --> 04:59.560
Ahora vamos a empezar de nuevo en el componente base.

04:59.560 --> 05:01.610
Esto tiene buena pinta, no se queja

05:01.610 --> 05:03.700
parece tener todo lo que quiere.

05:03.700 --> 05:06.250
La importación de proyectos, bueno, se queja.

05:06.250 --> 05:08.450
Por ejemplo, allí necesitamos un componente.

05:08.450 --> 05:12.070
Así que vamos a añadir una importación en la parte superior y vamos

05:12.070 --> 05:15.830
a importar el componente de la base de la barra de puntos.

05:15.830 --> 05:18.410
Así se importa relativamente si algo está

05:18.410 --> 05:19.990
en la misma carpeta.

05:19.990 --> 05:22.370
Barra oblicua al principio, luego el nombre del archivo

05:22.370 --> 05:24.490
y luego todo es importante punto JS.

05:24.490 --> 05:26.753
No olvides el punto JS al final.

05:28.100 --> 05:30.250
Ahora también necesitamos la interfase

05:31.170 --> 05:34.650
validable aquí y el método validar, auto mente y estado

05:34.650 --> 05:36.810
del proyecto.

05:36.810 --> 05:39.140
Así que vamos a importar todas estas

05:39.140 --> 05:44.080
cosas vamos a importar de la barra de puntos, o no subir un nivel a continuación,

05:44.080 --> 05:46.149
la utilización a continuación,

05:46.149 --> 05:49.460
la validación de punto JS, vamos a importar de Ese

05:49.460 --> 05:52.100
archivo, validatable y la función de validación

05:53.010 --> 05:56.250
y la importación de auto bind de, subiendo un nivel

05:56.250 --> 06:00.350
decoradores autobind JS.

06:00.350 --> 06:02.600
Y por último pero no menos importante el

06:02.600 --> 06:05.220
estado del proyecto vamos a importar de subir

06:05.220 --> 06:07.580
un nivel el estado del proyecto JS .

06:07.580 --> 06:11.000
Desde allí podemos importar la constante de estado del

06:11.000 --> 06:13.250
proyecto que exportamos allí.

06:13.250 --> 06:15.390
Estas son todas las importaciones que necesitamos

06:15.390 --> 06:16.773
para que este archivo funcione.

06:18.190 --> 06:20.480
Así que pasemos ahora al tema del proyecto.

06:20.480 --> 06:23.270
Allí necesitamos el autoenlace necesitamos el componente necesitamos

06:23.270 --> 06:24.853
el modelo del proyecto.

06:24.853 --> 06:26.700
Así que vamos a añadir todas estas cosas.

06:26.700 --> 06:30.520
Por ejemplo, vamos a importar el modelo de proyecto

06:30.520 --> 06:34.523
del proyecto JS de dot slash models.

06:35.580 --> 06:38.080
Añadamos también el componente que

06:39.340 --> 06:41.110
vive en la misma carpeta .

06:41.110 --> 06:45.530
Así que importa el componente base JS de dot

06:45.530 --> 06:49.020
slash y auto bind, vamos a importar

06:50.790 --> 06:55.790
auto bind de dot slash decorators auto bind JS.

06:56.020 --> 06:59.383
Y ahora este archivo aquí también tiene todo lo que necesita.

07:01.260 --> 07:03.410
Ahora pasemos a la lista de proyectos.

07:03.410 --> 07:06.610
Aquí, en la lista de proyectos, también necesitamos el

07:06.610 --> 07:10.250
componente como on, así que lo copiaremos aquí desde el elemento

07:10.250 --> 07:14.260
del proyecto y lo añadiremos a la lista de proyectos TS, pero no necesitamos

07:14.260 --> 07:16.120
arrastrarlo aquí, sino arrastrarlo

07:16.120 --> 07:19.420
al objetivo, así que vamos a importarlo.

07:19.420 --> 07:22.307
Y además necesitamos el estado

07:22.307 --> 07:24.550
del proyecto.

07:24.550 --> 07:26.540
Sí, estas son las cosas que necesitamos.

07:26.540 --> 07:28.780
Y también la clase de elemento del proyecto.

07:28.780 --> 07:31.030
Así que desde el archivo del modelo de proyecto también podemos

07:31.030 --> 07:32.720
importar el estado del proyecto.

07:32.720 --> 07:35.340
Puede importar varias cosas exportadas de un

07:35.340 --> 07:36.840
mismo archivo simplemente

07:36.840 --> 07:38.730
separándolas con una coma entre

07:38.730 --> 07:41.740
estas llaves, tal como lo está viendo aquí.

07:41.740 --> 07:45.910
También importamos la constante de estado del proyecto desde la carpeta

07:46.790 --> 07:48.790
de estado, estado del proyecto JS

07:48.790 --> 07:52.470
y también importamos por último, pero no menos importante,

07:52.470 --> 07:54.790
aquí en el fondo lo necesitamos, la clase

07:54.790 --> 07:57.130
de elemento del proyecto.

07:57.130 --> 08:01.770
Así que importa el elemento del proyecto desde el punto JS del

08:01.770 --> 08:03.623
elemento del proyecto.

08:06.810 --> 08:08.280
Así que sigamos adelante.

08:08.280 --> 08:11.280
Autobind está bien, el estado del proyecto se queja de

08:11.280 --> 08:13.600
que necesitamos el modelo del proyecto.

08:13.600 --> 08:15.740
Así que en la parte superior

08:16.820 --> 08:20.300
vamos a importar el proyecto de subir un nivel

08:20.300 --> 08:22.823
modelos proyecto punto JS.

08:24.450 --> 08:27.630
También estamos utilizando el estado del proyecto aquí, así que vamos

08:27.630 --> 08:29.573
a importar que a partir de ese mismo archivo'

08:32.320 --> 08:33.960
Y con eso, por último, pero no menos importante

08:33.960 --> 08:35.660
tenemos el archivo TS de la aplicación

08:35.660 --> 08:38.810
allí tenemos que importar la entrada del proyecto.

08:38.810 --> 08:43.610
de los componentes de la barra de puntos de la entrada del proyecto.

08:43.610 --> 08:48.030
JS y la lista de proyectos de la lista de proyectos JS' Si ahora

08:49.290 --> 08:52.280
guardamos esto debería compilar sin errores

08:52.280 --> 08:54.330
y ahora estamos usando módulos

08:54.330 --> 09:00.823
ES6 para organizar nuestras importaciones y exportaciones.

09:02.640 --> 09:05.460
Sin embargo, si echamos un vistazo al navegador

09:05.460 --> 09:07.040
tenemos un error.

09:07.040 --> 09:09.390
Ahora la razón es que si revisamos la carpeta dist

09:09.390 --> 09:12.013
tenemos nuestro archivo bundle JS correcto.

09:13.040 --> 09:15.900
Ahora tenemos que volver a cambiar la configuración del TS.

09:15.900 --> 09:19.070
Para uno de ellos, ahora no deberíamos

09:19.070 --> 09:22.420
usar AMD sino ES veinticinco.

09:22.420 --> 09:25.710
Than es básicamente la palabra clave para ES6, que fue

09:25.710 --> 09:27.240
la versión de agma script

09:27.240 --> 09:29.300
que introdujo los módulos ES.

09:29.300 --> 09:31.260
Así que básicamente le estamos diciendo

09:31.260 --> 09:34.480
al tipo de script que no transforme nuestras importaciones en nada,

09:34.480 --> 09:36.240
que las mantenga como están.

09:36.240 --> 09:39.250
Los navegadores modernos lo entenderán.

09:39.250 --> 09:41.290
Así que eso es importante, también asegúrate

09:41.290 --> 09:43.433
de que tienes un objetivo de ES6 o superior aquí'

09:44.950 --> 09:47.530
Ahora también debes comentar el archivo out de nuevo,

09:47.530 --> 09:50.670
porque eso no es compatible con los módulos ES.

09:50.670 --> 09:53.590
Y con eso lo que obtienes en la carpeta dist es básicamente

09:53.590 --> 09:56.610
una réplica de tu carpeta fuente pero con archivos

09:56.610 --> 09:58.690
de script Java.

09:58.690 --> 10:00.480
Así que ahora también tenemos que volver

10:00.480 --> 10:03.120
al archivo HDML del índice e importar la app JS de nuevo,

10:03.120 --> 10:04.840
porque ahora tenemos un archivo de app

10:04.840 --> 10:06.350
JS en la carpeta dist.

10:06.350 --> 10:08.910
Y de nuevo este archivo JS de la aplicación tendrá sus declaraciones

10:08.910 --> 10:11.180
de importación allí, porque, como he mencionado, esto

10:11.180 --> 10:13.830
es soportado por Java script, por los motores modernos de Java script

10:13.830 --> 10:15.900
y por los navegadores modernos.

10:15.900 --> 10:17.440
Por lo tanto, el navegador resolverá

10:17.440 --> 10:19.440
estas importaciones por ti.

10:19.440 --> 10:22.430
Así que si ahora recargamos esto, eh seguimos

10:22.430 --> 10:24.240
obteniendo un error.

10:24.240 --> 10:27.310
No se puede utilizar la sentencia import fuera de un módulo.

10:27.310 --> 10:30.630
Bueno, los navegadores modernos soportan este sintexto pero

10:30.630 --> 10:33.150
tienes que decirles que quieres usarlo.

10:33.150 --> 10:37.470
Y se lo dices quitando el (murmullo) aquí y en su lugar en la etiqueta script,

10:37.470 --> 10:39.670
donde importas un archivo que tiene

10:39.670 --> 10:42.777
estas declaraciones de importación.

10:42.777 --> 10:46.313
Se utiliza el tipo igual al módulo.

10:47.300 --> 10:50.450
Si ahora se asegura esto, se ve que esto funciona

10:50.450 --> 10:53.440
y ahora si añadimos algo aquí conseguimos que

10:53.440 --> 10:56.120
la aplicación funcione de nuevo.

10:56.120 --> 10:58.910
Ahora bien, si inspeccionas la pestaña de

10:58.910 --> 11:01.680
red por cierto verás que si recargas, hay un

11:01.680 --> 11:05.290
montón de peticiones de red en marcha, si alejo un poco

11:05.290 --> 11:07.410
el zoom podemos verlo mejor.

11:07.410 --> 11:10.340
Aquí se solicitan todos nuestros archivos de script Java.

11:10.340 --> 11:12.810
Son solicitados automáticamente por el navegador

11:12.810 --> 11:14.780
cuando encuentra nuestra importación.

11:14.780 --> 11:16.967
Así que comienza con la JS de la aplicación, luego

11:16.967 --> 11:19.410
ve la importación a la JS de entrada del proyecto.

11:19.410 --> 11:21.990
Aquí y por lo tanto, por supuesto, la siguiente solicitud va

11:21.990 --> 11:23.160
a la entrada del proyecto.

11:23.160 --> 11:25.410
También hace lo mismo con la lista de proyectos.

11:25.410 --> 11:27.360
Ahora en la entrada del proyecto por

11:27.360 --> 11:29.422
ejemplo vería una entrada del componente

11:29.422 --> 11:31.450
base JS por lo que también importa prob

11:31.450 --> 11:33.400
componente base JS.

11:33.400 --> 11:35.530
Así que eso lo hace el navegador aquí

11:35.530 --> 11:38.170
lo aprovechamos y ahora tenemos otra forma de

11:38.170 --> 11:40.850
dividir nuestros archivos pero con la ventaja

11:40.850 --> 11:43.750
adicional de que declaramos claramente lo que necesitamos

11:43.750 --> 11:45.850
de cada archivo y si omitimos una importación,

11:45.850 --> 11:49.100
type-script nos grita, cosa que no hacía con el enfoque

11:49.100 --> 11:51.127
anterior, por lo que este enfoque

11:51.127 --> 11:53.400
es en realidad mi recomendación y por lo

11:53.400 --> 11:58.870
que es la forma estándar de facto de importar y exportar.

11:58.870 --> 12:00.710
Ahora, si usted ha trabajado con el tipo de secuencia

12:00.710 --> 12:03.850
de comandos antes en otros proyectos, digamos en un proyecto angular, también

12:03.850 --> 12:06.380
podría estar acostumbrado a no tener que especificar una extensión

12:06.380 --> 12:07.980
de archivo aquí Bueno, también vamos a ser

12:07.980 --> 12:09.270
capaces de omitir que una vez que

12:09.270 --> 12:10.820
se agrega el paquete web y una herramienta

12:10.820 --> 12:12.210
de factura.

12:12.210 --> 12:14.580
Mientras no tengamos eso y confiemos en el navegador

12:14.580 --> 12:16.870
para importar nuestros archivos es necesario

12:16.870 --> 12:18.833
añadir esa extensión extra.
