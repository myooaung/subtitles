WEBVTT

1
00:00:02.220 --> 00:00:03.053
<v ->Let's move on.</v>

2
00:00:03.053 --> 00:00:04.950
We got the outFile option here,

3
00:00:04.950 --> 00:00:07.730
now this option does not matter to us right now,

4
00:00:07.730 --> 00:00:09.440
it won't work right now.

5
00:00:09.440 --> 00:00:12.340
More interesting to us is outDIR and rootDir.

6
00:00:12.340 --> 00:00:14.720
The bigger your project gets,

7
00:00:14.720 --> 00:00:17.640
the more you might want to organize your files.

8
00:00:17.640 --> 00:00:19.690
Typically, you don't just want to have your files

9
00:00:19.690 --> 00:00:21.770
lie around here in your

10
00:00:21.770 --> 00:00:24.120
root level project folder.

11
00:00:24.120 --> 00:00:26.580
Instead, what you often will see in projects is

12
00:00:26.580 --> 00:00:28.080
that you have a source folder,

13
00:00:28.080 --> 00:00:29.790
and you have a dist folder,

14
00:00:29.790 --> 00:00:31.240
next, next.

15
00:00:31.240 --> 00:00:35.690
So, the dist folder has the job of holding all the output,

16
00:00:35.690 --> 00:00:37.800
so all the JavaScript files, let's say.

17
00:00:37.800 --> 00:00:41.380
And the source folder might hold all our TypeScript files.

18
00:00:41.380 --> 00:00:44.643
So we can move the TypeScript files into the source folder,

19
00:00:44.643 --> 00:00:47.430
and if I now delete the JavaScript folder,

20
00:00:47.430 --> 00:00:49.891
we have the problem that if we compile everything,

21
00:00:49.891 --> 00:00:53.167
these TypeScript files are compiled because TypeScript,

22
00:00:53.167 --> 00:00:55.768
the compiler does look into sub-folders,

23
00:00:55.768 --> 00:01:00.050
but the output sits next to our input files.

24
00:01:00.050 --> 00:01:02.760
And that's something we can control with the outDir,

25
00:01:02.760 --> 00:01:03.660
for example.

26
00:01:03.660 --> 00:01:07.117
If we set outDir, we can tell the types with the compiler

27
00:01:07.117 --> 00:01:10.900
where the created file should be stored.

28
00:01:10.900 --> 00:01:13.580
We could set this to dist.

29
00:01:13.580 --> 00:01:17.037
Now if we do that, then if you run chia seed

30
00:01:17.037 --> 00:01:19.560
you will see that the JavaScript files, indeed,

31
00:01:19.560 --> 00:01:21.500
are not placed in the source folder,

32
00:01:21.500 --> 00:01:23.170
but in the dist folder.

33
00:01:23.170 --> 00:01:26.340
Now we just have to adjust our index.html file,

34
00:01:26.340 --> 00:01:28.540
and there point at dist/app.js

35
00:01:28.540 --> 00:01:31.630
and dist/analytics.js or alternatively

36
00:01:31.630 --> 00:01:33.880
move the index.html file into the dist folder

37
00:01:33.880 --> 00:01:36.172
but then our def server wouldn't work correctly

38
00:01:36.172 --> 00:01:37.550
anymore right now.

39
00:01:37.550 --> 00:01:39.875
So let's just adjust these imports

40
00:01:39.875 --> 00:01:44.140
and with that, we got a working application still,

41
00:01:44.140 --> 00:01:45.270
as you see,

42
00:01:45.270 --> 00:01:48.480
but now with a cleaner project structure.

43
00:01:48.480 --> 00:01:49.650
Now the good thing is,

44
00:01:49.650 --> 00:01:51.530
if we had a sub-folder here,

45
00:01:51.530 --> 00:01:52.980
an analytics folder, let's say,

46
00:01:52.980 --> 00:01:54.893
and we had our TypeScript file in there,

47
00:01:54.893 --> 00:01:57.350
then if we re-compile,

48
00:01:57.350 --> 00:01:59.540
and it does not matter if you do it with this command

49
00:01:59.540 --> 00:02:00.373
or the watch mode,

50
00:02:00.373 --> 00:02:03.300
this folder structure you have the source folder

51
00:02:03.300 --> 00:02:05.640
will all be replicated in the dist folder

52
00:02:05.640 --> 00:02:07.370
which is, of course, very convenient

53
00:02:07.370 --> 00:02:08.813
because that makes sure that

54
00:02:08.813 --> 00:02:12.670
you can import the files basically as you would import them

55
00:02:12.670 --> 00:02:14.110
in the source folder, as well,

56
00:02:14.110 --> 00:02:16.640
so that the structure you set up there is kept.

57
00:02:16.640 --> 00:02:18.800
Now you can also set the root directory

58
00:02:18.800 --> 00:02:21.230
and set this specifically at the folder

59
00:02:21.230 --> 00:02:23.800
where your files are stored in,

60
00:02:23.800 --> 00:02:25.202
like in this example, source,

61
00:02:25.202 --> 00:02:28.560
to make sure that the types of compiler does not

62
00:02:28.560 --> 00:02:30.030
look in our folders.

63
00:02:30.030 --> 00:02:31.530
That's also something you can do

64
00:02:31.530 --> 00:02:34.003
with the include option down there, right?

65
00:02:34.870 --> 00:02:36.007
But with root directory,

66
00:02:36.007 --> 00:02:38.781
the types of compiler will not just look

67
00:02:38.781 --> 00:02:41.450
only at that source folder

68
00:02:41.450 --> 00:02:44.700
it also makes sure that the project structure,

69
00:02:44.700 --> 00:02:45.680
you set up there,

70
00:02:45.680 --> 00:02:47.880
is kept in a dist folder.

71
00:02:47.880 --> 00:02:50.020
Now it did so by default before, as you saw,

72
00:02:50.020 --> 00:02:51.820
but keep in mind that before

73
00:02:51.820 --> 00:02:54.280
it would have included any TypeScript files here,

74
00:02:54.280 --> 00:02:55.699
all the outset of source,

75
00:02:55.699 --> 00:02:58.830
so, for example, if you comment this out temporarily

76
00:02:58.830 --> 00:03:01.500
if we had a user folder here on the top level

77
00:03:01.500 --> 00:03:03.280
with a user.ts file

78
00:03:03.280 --> 00:03:06.170
where we have a user name of Max let's say,

79
00:03:06.170 --> 00:03:07.750
then if we compile this,

80
00:03:07.750 --> 00:03:09.752
you will all just see that user folder

81
00:03:09.752 --> 00:03:11.420
in the dist folder.

82
00:03:11.420 --> 00:03:13.810
And now the source folder is included as well

83
00:03:13.810 --> 00:03:17.200
because now we have a typescript file on a higher level

84
00:03:17.200 --> 00:03:19.950
and therefore the typescript compiler thinks that

85
00:03:19.950 --> 00:03:21.780
our whole project again is the input

86
00:03:21.780 --> 00:03:24.920
and it replicates the folder structure it finds there

87
00:03:24.920 --> 00:03:25.970
in the dist folder.

88
00:03:25.970 --> 00:03:28.960
Now that's, of course, not what we would want

89
00:03:28.960 --> 00:03:30.120
and that's where the

90
00:03:30.976 --> 00:03:32.660
rootDir option helps us.

91
00:03:32.660 --> 00:03:34.020
Now if we set this to source,

92
00:03:34.020 --> 00:03:35.950
even if we had other folders

93
00:03:35.950 --> 00:03:38.630
with TypeScript files in there on the root level

94
00:03:38.630 --> 00:03:40.400
they would not be included in the output

95
00:03:40.400 --> 00:03:41.830
and the source folder itself

96
00:03:41.830 --> 00:03:43.780
would not suddenly end up there.

97
00:03:43.780 --> 00:03:46.480
So often you set both rootDir and outDir

98
00:03:46.480 --> 00:03:49.650
to be really clear regarding where you input files live

99
00:03:49.650 --> 00:03:52.040
and where your output files would be generated in.

100
00:03:52.040 --> 00:03:54.870
If we move on, we can ignore composite.

101
00:03:54.870 --> 00:03:57.010
We can have a look at removeComments.

102
00:03:57.010 --> 00:03:58.780
Should be pretty clear if you set this,

103
00:03:58.780 --> 00:04:00.850
then any comments

104
00:04:00.850 --> 00:04:04.450
you might have in your TypeScript files,

105
00:04:04.450 --> 00:04:08.000
will be removed in the compiled JavaScript files.

106
00:04:08.000 --> 00:04:11.200
So if I comment this in and I compile my code,

107
00:04:11.200 --> 00:04:12.970
you see an app.ts, I have a comment.

108
00:04:12.970 --> 00:04:14.990
An app.js, it's not there.

109
00:04:14.990 --> 00:04:18.330
So you can do that to make your files smaller

110
00:04:18.330 --> 00:04:20.950
and the effort might be a nice option.

111
00:04:20.950 --> 00:04:23.820
You can also set noEmit if you don't want to

112
00:04:23.820 --> 00:04:25.600
generate any JavaScript files.

113
00:04:25.600 --> 00:04:27.130
Now this might sound strange

114
00:04:27.130 --> 00:04:29.190
because that's the idea of TypeScript,

115
00:04:29.190 --> 00:04:30.700
but if you just want to check

116
00:04:30.700 --> 00:04:32.420
whether your files are correct

117
00:04:32.420 --> 00:04:35.030
but you don't want to write all these output files,

118
00:04:35.030 --> 00:04:37.680
to save some time, for example, in a bigger project,

119
00:04:37.680 --> 00:04:39.120
then you could set this to "true"

120
00:04:39.120 --> 00:04:41.792
to just have the types of compiler

121
00:04:41.792 --> 00:04:45.460
check your files and report any potential errors

122
00:04:45.460 --> 00:04:47.903
without actually creating an output file.

123
00:04:47.903 --> 00:04:50.490
importHelpers is not really important to us,

124
00:04:50.490 --> 00:04:52.065
here we can ignore that.

125
00:04:52.065 --> 00:04:54.570
downlevelIteration is an advanced option.

126
00:04:54.570 --> 00:04:57.150
It is interesting when you

127
00:04:57.150 --> 00:05:00.295
compile your code to older versions of JavaScript

128
00:05:00.295 --> 00:05:02.690
and you work with four loops.

129
00:05:02.690 --> 00:05:05.798
Then in some rare scenarios, you could run into issues

130
00:05:05.798 --> 00:05:08.378
where the compilation doesn't work correctly.

131
00:05:08.378 --> 00:05:10.440
This option, if you turn it on,

132
00:05:10.440 --> 00:05:12.770
give you a more exact compilation,

133
00:05:12.770 --> 00:05:15.280
which will work in these niche cases,

134
00:05:15.280 --> 00:05:17.210
so therefore you might think you should always turn it on,

135
00:05:17.210 --> 00:05:20.097
but it will also the output more where those code.

136
00:05:20.097 --> 00:05:21.880
So you should only turn this on

137
00:05:21.880 --> 00:05:25.110
if you have loops and you see that your generated code

138
00:05:25.110 --> 00:05:27.700
suddenly behaves differently than it should

139
00:05:27.700 --> 00:05:29.023
regarding those loops.

