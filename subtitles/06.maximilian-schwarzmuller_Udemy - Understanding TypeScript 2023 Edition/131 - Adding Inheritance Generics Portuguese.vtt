WEBVTT

00:02.410 --> 00:04.290
Instrutor: Portanto, tempo para alguma

00:04.290 --> 00:06.370
herança e para uma classe base.

00:06.370 --> 00:09.189
Quero acrescentar uma classe base, que basicamente tem

00:09.189 --> 00:12.090
o templateElement, hostElement, um elemento que faz este

00:12.090 --> 00:15.430
trabalho de seleção de elementos na cúpula, que tem o método de anexação,

00:15.430 --> 00:16.810
que sempre precisamos, e assim

00:16.810 --> 00:18.520
por diante.

00:18.520 --> 00:22.540
Assim, que basicamente gerencia todas essas funcionalidades

00:22.540 --> 00:26.630
compartilhadas, que nossas classes que de fato tornam algo em

00:26.630 --> 00:28.220
comum para o dom.

00:28.220 --> 00:30.880
Então, para isso, acima de meu ProjectInput,

00:30.880 --> 00:35.650
e também da classe ProjectList, então basicamente aqui, eu acrescentarei

00:35.650 --> 00:38.250
a Classe Base de Componentes.

00:38.250 --> 00:41.540
Agora, o nome é com você, mas eu vou nomeá-lo Componente, porque você

00:41.540 --> 00:44.090
pode conhecer este termo de Reagir ou Angular, se você

00:44.090 --> 00:45.870
trabalhar com isso, e mesmo que você não

00:45.870 --> 00:47.590
tenha trabalhado com isso, você pode

00:47.590 --> 00:49.873
pensar nestas classes como UI, componentes de

00:50.770 --> 00:53.950
interface de usuário, que você renderiza para a tela.

00:53.950 --> 00:57.950
E cada componente é no final um objeto renderizável, que tem algumas

00:57.950 --> 00:59.970
funcionalidades que nos permitem

00:59.970 --> 01:01.370
renderizá-lo.

01:01.370 --> 01:05.260
E então as instâncias concretas, ou as classes herdadas, acrescentam

01:05.260 --> 01:10.260
a funcionalidade extra que este componente específico necessita.

01:10.300 --> 01:14.370
Então, o que vai para a classe geral de Componentes?

01:14.370 --> 01:17.590
Bem, eu diria que estes três elementos, com certeza.

01:17.590 --> 01:21.390
modeloElement, hostElement, e elemento.

01:21.390 --> 01:23.590
Agora, porém, temos aqui um problema

01:23.590 --> 01:25.470
em relação aos tipos.

01:25.470 --> 01:28.320
O templateElement será sempre um HTMLTemplateElement,

01:29.160 --> 01:31.980
mas o hostElement nem sempre tem que ser um div, por exemplo,

01:31.980 --> 01:35.410
quando adicionarmos uma classe de item de projeto, vamos renderizar

01:35.410 --> 01:37.160
isso em uma ProjectList, e nem mesmo

01:37.160 --> 01:40.550
diretamente nosso div de raiz aqui, então isso nem sempre é um

01:40.550 --> 01:42.360
div.

01:42.360 --> 01:45.220
E isto aqui, bem, é sempre um HTMLElement, certamente

01:45.220 --> 01:47.040
podemos nos acomodar a isso,

01:47.040 --> 01:50.540
mas, como no caso da classe ProjectInput, na verdade sabemos

01:50.540 --> 01:52.560
que é uma forma específica dela,

01:52.560 --> 01:55.230
é um HTMLFormElement.

01:55.230 --> 01:57.540
Assim, perderíamos esta informação

01:57.540 --> 02:00.320
extra, se nos limitássemos a ter sempre apenas

02:00.320 --> 02:02.130
um HTMLElement ali, sem armazenar

02:02.130 --> 02:05.220
informações mais específicas.

02:05.220 --> 02:07.690
Então, como podemos contornar isso?

02:07.690 --> 02:10.050
Bem, não apenas usando a herança,

02:10.050 --> 02:12.920
mas criando uma classe genérica aqui, onde

02:12.920 --> 02:15.230
quando herdamos dela, podemos definir

02:15.230 --> 02:17.680
os tipos concretos.

02:17.680 --> 02:20.940
Para isso, adicionamos colchetes de ângulo após o nome da

02:20.940 --> 02:23.550
classe e, em seguida, dois identificadores de

02:23.550 --> 02:26.690
nossa escolha, como T e U, que seriam escolhas comuns.

02:26.690 --> 02:30.110
E agora, também podemos acrescentar algumas restrições

02:30.110 --> 02:34.820
aqui, e dizer que o T certamente será algum tipo de HTMLElement.

02:34.820 --> 02:36.770
Pode ser apenas um HTMLElement, ou

02:36.770 --> 02:38.970
uma versão mais específica do mesmo.

02:38.970 --> 02:41.870
E o mesmo é válido para a U.

02:41.870 --> 02:44.780
E então aqui, sabemos que o elemento hospedeiroElement será

02:44.780 --> 02:46.690
do tipo T, e o elemento será do tipo U.

02:46.690 --> 02:48.660
E agora, sempre que herdamos desta classe,

02:48.660 --> 02:50.970
podemos especificar os tipos concretos, para que

02:50.970 --> 02:52.930
possamos trabalhar com diferentes tipos em

02:52.930 --> 02:54.780
diferentes lugares onde herdamos.

02:56.050 --> 02:58.053
Agora, vamos também acrescentar aqui um construtor.

02:58.910 --> 03:01.080
Naquele construtor, vamos precisar

03:01.080 --> 03:03.060
de um pouco de informação.

03:03.060 --> 03:05.950
Precisamos conhecer a identificação de nosso modelo,

03:05.950 --> 03:08.030
para que saibamos como selecioná-lo,

03:08.030 --> 03:09.750
e isso deve ser um fio.

03:09.750 --> 03:11.590
Precisamos conhecer o hostElementId,

03:11.590 --> 03:13.050
que também precisa ser um fio,

03:13.050 --> 03:15.833
para que saibamos onde renderizar este componente.

03:17.440 --> 03:20.505
E também quero obter um NewElementId, para que possamos obter

03:20.505 --> 03:22.590
uma identificação que deve ser atribuída

03:22.590 --> 03:24.350
ao elemento recém-entregue.

03:24.350 --> 03:26.020
Isto, entretanto, é opcional, o que

03:26.020 --> 03:28.210
eu sinalizo adicionando um ponto de interrogação

03:28.210 --> 03:29.690
após o parâmetro.

03:29.690 --> 03:31.940
A alternativa seria também aceitar aqui

03:31.940 --> 03:34.050
como um tipo indefinido, mas vou apenas

03:34.050 --> 03:36.470
usar o ponto de interrogação.

03:36.470 --> 03:38.510
E agora, com isso no construtor, podemos,

03:38.510 --> 03:39.793
basicamente, obter este

03:40.640 --> 03:42.083
código aqui, e colocá-lo

03:43.810 --> 03:46.950
em nosso construtor da classe Componente, para que armazenemos

03:46.950 --> 03:48.940
o templateElement, mas, é claro, agora

03:48.940 --> 03:52.060
o ID, que estamos obtendo aqui, é esse templateId, e é por

03:52.060 --> 03:57.450
isso que estou obtendo isto como um argumento no construtor.

03:57.450 --> 04:00.060
E para o hostElement, o ID aqui, é claro,

04:00.060 --> 04:02.733
é nosso hostElementId, como este.

04:04.790 --> 04:07.930
Também importante, é claro, em relação à fundição aqui,

04:07.930 --> 04:10.230
sabemos que esta será do tipo T, porque T

04:10.230 --> 04:12.580
aqui é este tipo genérico, que armazenamos

04:12.580 --> 04:15.420
ou que usamos para nosso hostElement, então aqui

04:15.420 --> 04:17.163
já podemos fundi-lo.

04:18.160 --> 04:20.253
E com isso, estamos selecionando elementos.

04:21.130 --> 04:22.940
Também podemos pegar mais código.

04:22.940 --> 04:26.650
Esse código aqui, onde importamos um nó e assim por diante, e onde

04:26.650 --> 04:30.130
colocamos a identificação, podemos agarrar tudo isso.

04:30.130 --> 04:32.520
Portanto, vamos copiar isso aqui, e acrescentar

04:32.520 --> 04:35.317
isto também ao construtor da classe Componente.

04:35.317 --> 04:37.640
importadoNode, então definimos o elemento,

04:37.640 --> 04:41.080
e o elemento aqui tem este tipo genérico U, então quando lançamos

04:41.080 --> 04:43.000
isto aqui, sabemos que será este

04:43.000 --> 04:46.870
tipo U aqui, então devemos lançá-lo para U.

04:46.870 --> 04:49.090
Isso é um bom uso de genéricos aqui, o que torna

04:49.090 --> 04:51.993
esta classe de Componentes realmente reutilizável.

04:53.060 --> 04:55.200
Agora, em relação à identificação.

04:55.200 --> 04:58.200
Isto é o que recebemos aqui, o newElementId.

04:58.200 --> 05:00.590
Agora, é claro que podemos não ter isso sempre,

05:00.590 --> 05:02.150
porque é opcional, então devemos

05:02.150 --> 05:03.870
verificar se o temos.

05:03.870 --> 05:06.070
Portanto, se o newElementId é uma coisa, e só se

05:06.070 --> 05:07.650
for uma coisa, só então tentarei atribuí-lo,

05:07.650 --> 05:10.543
caso contrário não o tentaremos, porque então não temos nenhuma

05:10.543 --> 05:13.023
identificação para atribuir.

05:14.420 --> 05:16.300
Bem, com isso, temos o construtor.

05:16.300 --> 05:19.160
Agora vamos usar a função de anexar aqui.

05:19.160 --> 05:21.970
Portanto, vamos copiar o método anexo de uma

05:21.970 --> 05:25.470
de nossas outras classes e adicioná-lo aqui, como um

05:25.470 --> 05:28.473
método privado, na classe Componente.

05:32.690 --> 05:35.640
Podemos então chamar isso também. anexar ao final do

05:35.640 --> 05:38.540
construtor da classe Componente.

05:38.540 --> 05:39.960
Agora, aqui queremos

05:39.960 --> 05:42.570
adicionar um elemento, mas não sabemos

05:42.570 --> 05:44.193
onde ele deve ser adicionado,

05:44.193 --> 05:46.450
de modo que na verdade são algumas informações

05:46.450 --> 05:54.200
extras que devemos buscar aqui, como quarto argumento no contrutor, inserir Atstart poderia ser um nome, e isso é um booleano,

05:54.200 --> 05:56.680
digamos.

05:56.680 --> 06:00.190
E devemos passar isso em frente ao nosso parâmetro opcional.

06:00.190 --> 06:02.230
Os parâmetros opcionais devem ser sempre os últimos,

06:02.230 --> 06:03.980
porque as pessoas podem omiti-los.

06:03.980 --> 06:06.680
Seus parâmetros obrigatórios, portanto, não podem

06:06.680 --> 06:09.220
vir depois destes parâmetros opcionais.

06:09.220 --> 06:13.533
E insertAtStart é então encaminhado para anexar, lá, insertAtBeginning,

06:14.615 --> 06:18.740
você também poderia reutilizar insertAtStart, estou apenas usando

06:18.740 --> 06:21.350
um nome diferente aqui para evitar confusão,

06:21.350 --> 06:23.470
é recebido como um booleano.

06:23.470 --> 06:28.040
E então aqui, verificamos se a inserção no início é verdadeira,

06:28.040 --> 06:32.920
se é, então aqui, temos pós-início, caso contrário, temos antes

06:32.920 --> 06:34.887
de terminar.

06:36.770 --> 06:39.653
Agora somos flexíveis quanto à forma como isto se insere.

06:42.980 --> 06:46.570
Também quero marcar esta classe agora como uma classe abstrata, porque

06:46.570 --> 06:49.600
as pessoas nunca devem instanciá-la diretamente, ao invés

06:49.600 --> 06:52.560
disso, ela deve ser sempre usada para herança.

06:52.560 --> 06:56.090
Portanto, em frente à aula, eu acrescento a palavra-chave abstrata.

06:56.090 --> 06:58.750
Isto faz com que agora não possamos instanciar isso.

06:58.750 --> 07:01.963
Se tentássemos fazer isso, o TypeScript gritaria para nós.

07:04.070 --> 07:06.490
Também acrescentarei mais dois métodos,

07:06.490 --> 07:08.410
e esse é o método de configuração,

07:08.410 --> 07:10.840
e também o método de renderContent.

07:10.840 --> 07:13.430
E vou adicioná-lo como um método abstrato, o que

07:13.430 --> 07:16.463
significa que a implementação concreta está faltando

07:18.000 --> 07:21.080
aqui, mas agora nós, basicamente, forçamos qualquer classe

07:21.080 --> 07:22.670
herdada do componente, a adicionar

07:22.670 --> 07:25.980
estes dois métodos e a tê-los disponíveis.

07:25.980 --> 07:27.220
Estou apenas acrescentando

07:27.220 --> 07:29.390
isto aqui, para que se alguém olhar para nosso

07:29.390 --> 07:31.460
código, ele ou ela possa ter uma boa compreensão

07:31.460 --> 07:34.150
do que é a idéia por trás da classe Componente.

07:34.150 --> 07:36.340
Que ele faça toda a renderização geral,

07:36.340 --> 07:38.530
ou a fixação do componente, mas que o conteúdo

07:38.530 --> 07:40.790
concreto e a configuração então precisa

07:40.790 --> 07:43.840
acontecer no local onde herdamos.

07:43.840 --> 07:47.670
Nota lateral, você não pode ter métodos particulares e abstratos.

07:47.670 --> 07:49.660
Por isso, a privacidade tem que ser omitida

07:49.660 --> 07:52.000
aqui, o que não é permitido pelo TypeScript.

07:52.000 --> 07:54.590
Bem, e com isso, podemos estender o Componente

07:54.590 --> 07:56.480
aqui na ProjectList, e agora nos

07:56.480 --> 07:59.130
livrarmos dessas três propriedades.

07:59.130 --> 08:00.640
Mantemos os projetos designados,

08:00.640 --> 08:03.520
porque isso é específico para a Lista de Projetos.

08:03.520 --> 08:06.620
Agora também queremos especificar os valores concretos que

08:06.620 --> 08:09.560
devem ser conectados para nossos tipos genéricos.

08:09.560 --> 08:12.410
E sabemos, se revertermos isto, sabemos

08:12.410 --> 08:16.540
que teremos um HTMLDivElement e um HTMLElement, então aqui

08:16.540 --> 08:19.313
vou passar em HTMLDivElement, e HTMLElement,

08:20.410 --> 08:22.800
como este, e depois me livrar destas

08:22.800 --> 08:25.830
três propriedades.

08:25.830 --> 08:29.510
No construtor, agora não precisamos disso aqui, mas, em vez disso,

08:29.510 --> 08:32.550
precisamos chamar de super no início, chamar o contrutor

08:32.550 --> 08:35.130
da classe base, e para isso, precisamos passar

08:35.130 --> 08:38.080
algumas informações para o super contrutor, precisamos

08:38.080 --> 08:40.840
passar algumas informações.

08:40.840 --> 08:42.753
O ID do modeloElement, o hostElementId,

08:44.050 --> 08:45.850
se queremos inserir isto no início

08:45.850 --> 08:47.870
do hostElement, e, potencialmente,

08:47.870 --> 08:51.920
o ID que deve ser atribuído ao novo elemento.

08:51.920 --> 08:54.038
Portanto, aqui está nosso modelo de

08:54.038 --> 08:57.811
identificação, e com isso podemos nos livrar disto aqui.

08:57.811 --> 09:01.292
Então aqui, o hostElement, esse ID era app, para que possamos

09:01.292 --> 09:02.670
nos livrar disso.

09:02.670 --> 09:04.260
Nós mantemos os projetos designados,

09:04.260 --> 09:06.400
porque ainda precisamos disso aqui.

09:06.400 --> 09:08.193
Nós nos livramos disso aqui,

09:10.150 --> 09:13.050
mas, em relação à identificação do novo elemento,

09:13.050 --> 09:16.850
quero passar isso como um quarto parâmetro na verdade.

09:16.850 --> 09:19.040
A terceira é onde isto deve ser inserido,

09:19.040 --> 09:22.400
e aqui, usamos para inserir isto antes do final, então

09:22.400 --> 09:25.890
na verdade o que eu quero inserir aqui como parâmetro para

09:25.890 --> 09:29.170
o valor do insertAtStart é falso, porque ele não deve

09:29.170 --> 09:32.283
ser inserido no início, mas no final.

09:36.000 --> 09:38.940
Agora, eu certamente ainda quero montar meu ouvinte aqui.

09:38.940 --> 09:40.730
No entanto, não preciso chamar

09:40.730 --> 09:44.410
o anexo, isso acontecerá na classe base, no componente base.

09:44.410 --> 09:46.253
No entanto, vou chamar o renderContent.

09:47.870 --> 09:50.010
E aqui não devemos usar este tipo, mas apenas

09:50.010 --> 09:52.100
digitar, porque não podemos usar isto antes

09:52.100 --> 09:54.410
de terminarmos de funcionar super bem.

09:54.410 --> 09:55.490
Mas isso não é problema,

09:55.490 --> 09:57.690
porque recebemos o tipo como argumento.

09:57.690 --> 09:59.680
Agora, você vê que ainda recebo um

09:59.680 --> 10:03.487
erro aqui, porque temos um método de anexo aqui no ProjectList,

10:03.487 --> 10:05.410
e isso choca com o método de anexo

10:05.410 --> 10:07.330
que temos na classe base.

10:07.330 --> 10:10.600
Portanto, vamos nos livrar deste método de anexação aqui.

10:10.600 --> 10:14.024
Agora ainda temos um erro, porque você vê, renderContent é privado

10:14.024 --> 10:16.060
aqui, mas nós o especificamos como um

10:16.060 --> 10:18.270
método público aqui, eu adoraria tê-lo como

10:18.270 --> 10:20.240
um método privado, mas métodos abstratos

10:20.240 --> 10:22.860
privados não são suportados.

10:22.860 --> 10:25.680
Portanto, vou remover a palavra-chave privada aqui, e agora

10:25.680 --> 10:28.170
com isso, ficamos com um problema aqui, que não estamos

10:28.170 --> 10:30.510
tendo esse método de configuração, que eu prometi

10:30.510 --> 10:31.990
que teríamos aqui.

10:31.990 --> 10:33.650
Bem, vamos acrescentar.

10:33.650 --> 10:38.500
Portanto, aqui, além de renderConfig, poderíamos acrescentar configure, mesmo que

10:38.500 --> 10:40.510
eu não esteja fazendo nada aqui.

10:40.510 --> 10:42.950
Alternativamente, você poderia converter isto aqui para

10:42.950 --> 10:46.000
ser um método opcional, adicionando um ponto de interrogação, então, você

10:46.000 --> 10:47.520
não é forçado a adicioná-lo.

10:47.520 --> 10:50.380
Aqui, vou acrescentar porque também poderíamos

10:50.380 --> 10:53.210
argumentar que nós, para a ProjectList, colocamos

10:53.210 --> 10:56.490
esse código onde colocamos nosso ouvinte aqui, na verdade

10:56.490 --> 10:58.530
em configuração.

10:58.530 --> 11:00.810
Assim, podemos estender a mão para configurar,

11:00.810 --> 11:03.320
e depois fazer nossa coisa aqui, aquela configuração

11:03.320 --> 11:05.220
de ouvinte.

11:05.220 --> 11:06.610
E agora, devemos apenas nos certificar

11:06.610 --> 11:10.653
de que chamamos renderContent, mas também configurar desta forma.

11:12.730 --> 11:14.440
Caso você esteja se perguntando por que

11:14.440 --> 11:16.450
não estou chamando configurar e renderizarContent

11:16.450 --> 11:18.560
aqui na classe abstrata do contrutor, bem, nós

11:18.560 --> 11:19.993
poderíamos fazer isso, mas podemos

11:21.780 --> 11:23.720
ter um problema então.

11:23.720 --> 11:26.760
Se chamarmos isso na classe Componente, então,

11:26.760 --> 11:30.770
podemos chamar um método na classe herdeira, então em uma classe

11:30.770 --> 11:33.240
que estende Componente, onde renderContent

11:33.240 --> 11:36.810
ou configurar depende de algo em que o contrutor da classe

11:36.810 --> 11:39.410
herdeira, na verdade, talvez configure

11:39.410 --> 11:41.540
algo, somente após o contrutor da

11:41.540 --> 11:44.710
classe base ter terminado, que renderContent e

11:44.710 --> 11:48.100
ou configurar dependem.

11:48.100 --> 11:50.690
É por isso que é mais seguro, basicamente, garantir

11:50.690 --> 11:52.410
que a classe herdeira tenha que

11:52.410 --> 11:55.410
chamar estes métodos em vez de a classe base chamar estes

11:55.410 --> 11:56.860
métodos para nós.

11:57.980 --> 12:01.280
Com isso, reestruturamos a classe ProjectList para

12:01.280 --> 12:05.040
tirar proveito da herança e de nossa lógica compartilhada.

12:05.040 --> 12:07.730
Vamos fazer o mesmo para o ProjectInput agora.

12:07.730 --> 12:13.170
Ali, queremos também estender o Componente.

12:13.170 --> 12:14.900
Use a natureza genérica

12:14.900 --> 12:19.430
disso, e aí temos o HTMLDivElement para o hostElement, e

12:19.430 --> 12:23.980
o HTMLFormElement para o elemento que é renderizado.

12:23.980 --> 12:27.210
Com isso, podemos nos livrar dessas três propriedades aqui, então

12:27.210 --> 12:28.310
vamos fazer isso.

12:28.310 --> 12:30.090
Mantemos estas três propriedades, é claro,

12:30.090 --> 12:32.140
porque são específicas do ProjectInput.

12:33.040 --> 12:35.310
Temos então que chamar super aqui,

12:35.310 --> 12:38.320
e para super passar o ID do modelo, que é ProjectInput,

12:38.320 --> 12:39.900
o ID do elemento hospedeiro,

12:39.900 --> 12:41.970
que é app, insertBefore aqui é verdade,

12:41.970 --> 12:45.270
porque eu quero inserir aquele elemento recém-criado

12:45.270 --> 12:50.510
no início aqui para esta classe ProjectInput.

12:50.510 --> 12:53.110
E então, newElementId, bem, que aqui é a entrada

12:53.110 --> 12:55.170
do usuário, então também devemos

12:55.170 --> 12:56.913
encaminhar isso.

12:57.844 --> 12:59.400
Com isto, podemos nos livrar

12:59.400 --> 13:03.480
deste código, deste código, e de todo este código aqui na verdade.

13:03.480 --> 13:05.240
É claro, mantenha este código aqui.

13:05.240 --> 13:07.820
No entanto, poderíamos também argumentar que colocamos

13:07.820 --> 13:09.860
isto na configuração talvez.

13:09.860 --> 13:12.100
Então vamos ao método de configuração, que já

13:12.100 --> 13:13.660
temos aqui, e acrescentemos nossos

13:13.660 --> 13:17.683
ouvintes aqui ou nossa configuração de propriedade aqui para configurar.

13:18.880 --> 13:20.780
Claro, vamos nos livrar do anexo,

13:20.780 --> 13:24.450
porque isso agora é algo que a classe base faz por nós, e vamos verificar

13:24.450 --> 13:26.980
o que o TypeScript não gosta, é claro que devemos

13:26.980 --> 13:29.690
nos livrar do anexo aqui.

13:29.690 --> 13:32.520
E sim, na verdade uma coisa que o TypeScript não

13:32.520 --> 13:35.090
gosta, ele agora reclama que estes campos

13:35.090 --> 13:37.190
não são inicializados no contrutor,

13:37.190 --> 13:40.380
porque ele não entende ou não verifica se a configuração

13:40.380 --> 13:42.260
é chamada no contrutor e faz esta

13:42.260 --> 13:44.770
inicialização.

13:44.770 --> 13:47.500
Então, para satisfazer o TypeScript, eu vou realmente

13:47.500 --> 13:50.550
mover estas inicializações de volta da configuração diretamente

13:50.550 --> 13:52.170
para o construtor.

13:52.170 --> 13:54.190
Tecnicamente, o resultado é exatamente o mesmo,

13:54.190 --> 13:55.953
mas agora o TypeScript não vai reclamar.

13:56.800 --> 13:59.240
Ele reclamará, entretanto, que temos

14:00.440 --> 14:02.310
um método de configuração privado,

14:02.310 --> 14:05.910
portanto, como antes, devemos mudar isso, e transformar

14:05.910 --> 14:08.940
a configuração em um método público.

14:08.940 --> 14:11.460
Agora, não é uma obrigação, mas é uma espécie de convenção

14:11.460 --> 14:13.000
para ter seus métodos públicos primeiro,

14:13.000 --> 14:14.570
e é por isso que eu vou colocá-los acima

14:14.570 --> 14:17.240
dos outros métodos privados aqui.

14:17.240 --> 14:19.370
E, é claro, agora também reclama que

14:19.370 --> 14:21.990
não temos um método de renderContent.

14:21.990 --> 14:25.020
Agora, vou acrescentar um, só porque é necessário.

14:25.020 --> 14:26.780
Aqui não estamos fazendo nada nele,

14:26.780 --> 14:28.890
então tecnicamente não é necessário, mas

14:28.890 --> 14:31.053
agora satisfazemos nossa classe base.

14:32.260 --> 14:34.603
Nota lateral, renderContent, e configurar,

14:35.550 --> 14:39.590
na classe ProjectList, também podem ser movidos acima desse método privado

14:39.590 --> 14:43.230
aqui, exatamente pelas mesmas razões, para esta convenção que

14:43.230 --> 14:45.123
acabei de mencionar.

14:46.440 --> 14:49.870
E com isso, também reestruturamos o ProjectInput,

14:49.870 --> 14:51.780
para aproveitar a herança e

14:51.780 --> 14:55.330
deixar a classe base fazer muito do trabalho.

14:55.330 --> 14:57.670
Vamos ver se tudo isso agora funciona.

14:57.670 --> 15:00.710
Se salvarmos isso, ele se compila sem

15:00.710 --> 15:02.740
erros, parece funcionar

15:02.740 --> 15:05.870
bem, então este trabalho é a questão.

15:05.870 --> 15:07.810
E isso parece muito bom.

15:07.810 --> 15:09.720
Funciona da mesma forma que antes,

15:09.720 --> 15:11.600
mas agora temos um código mais limpo,

15:11.600 --> 15:14.240
onde aproveitamos a reutilização do código,

15:14.240 --> 15:15.850
graças à herança.

15:15.850 --> 15:18.540
Agora, não é o único lugar onde podemos herdar.

15:18.540 --> 15:20.610
Quero concluir esta palestra

15:20.610 --> 15:24.230
aqui, refazendo também o estado do nosso projeto.

15:24.230 --> 15:26.240
Tecnicamente, lá não precisamos de

15:26.240 --> 15:29.450
herança, pois só temos este único estado que administramos

15:29.450 --> 15:31.230
em toda esta aplicação, mas imagine

15:31.230 --> 15:33.130
uma aplicação maior, onde você tem

15:33.130 --> 15:35.310
vários estados diferentes.

15:35.310 --> 15:37.240
Um para o estado do usuário, se o

15:37.240 --> 15:39.290
usuário está logado e assim por diante,

15:39.290 --> 15:43.030
um para os projetos, um para um carrinho de compras.

15:43.030 --> 15:45.600
Agora, você notará que algumas características

15:45.600 --> 15:48.080
de sua classe estadual são sempre as mesmas.

15:48.080 --> 15:50.520
Especificamente, esse conjunto de ouvintes,

15:50.520 --> 15:52.780
e o método addListener.

15:52.780 --> 15:54.730
Portanto, também poderíamos usar uma classe base aqui.

15:55.650 --> 15:58.170
Poderíamos usar um Estado de classe aqui,

15:58.170 --> 16:01.230
e essa classe tem uma matriz de ouvintes, e essa

16:01.230 --> 16:04.640
classe também tem um método addListeners, então vamos

16:04.640 --> 16:07.120
cortar ambos do ProjectState, e adicioná-lo

16:07.120 --> 16:09.160
ao Estado.

16:09.160 --> 16:12.610
Agora, isso também significa que nós, é claro, não sabemos

16:12.610 --> 16:14.700
se nosso ouvinte irá realmente devolver

16:14.700 --> 16:16.720
uma série de projetos.

16:16.720 --> 16:18.253
Portanto, na verdade

16:19.110 --> 16:20.760
aqui, para este tipo de função,

16:20.760 --> 16:24.740
eu também quero ter um tipo genérico na verdade.

16:24.740 --> 16:27.440
Para que possamos definir isto de fora.

16:27.440 --> 16:28.483
Podemos fazer isso, podemos

16:29.790 --> 16:31.623
escrever um tipo genérico, como este

16:32.680 --> 16:35.730
aqui, um tipo personalizado, que é genérico, podemos adicionar

16:35.730 --> 16:38.410
os parênteses angulares após nosso nome de tipo, usar um

16:38.410 --> 16:40.150
identificador de nossa escolha, e então

16:40.150 --> 16:42.460
reutilizar esse tipo aqui.

16:42.460 --> 16:44.960
Agora, podemos tornar o Estado genérico, podemos usar

16:44.960 --> 16:46.320
o mesmo identificador, porque

16:46.320 --> 16:49.530
é uma construção diferente do nosso tipo personalizado.

16:49.530 --> 16:53.520
E então aqui, quando dizemos que queremos ter uma lista de ouvintes,

16:53.520 --> 16:56.780
temos que dizer TypeScript que tipo genérico os ouvintes

16:56.780 --> 16:58.850
usam para este objeto estatal que

16:58.850 --> 17:01.510
estamos criando.

17:01.510 --> 17:03.850
E isso significa simplesmente que podemos

17:03.850 --> 17:06.490
enviar nosso tipo genérico aqui, e aqui.

17:06.490 --> 17:09.410
Assim, quando agora estendemos o estado, temos de especificar

17:09.410 --> 17:12.630
o tipo de dados com os quais este estado irá trabalhar e, em vez de

17:12.630 --> 17:14.930
estado, este então é encaminhado ao nosso tipo

17:14.930 --> 17:17.680
personalizado de ouvinte, essa é a idéia.

17:17.680 --> 17:19.580
E como usamos tudo isso?

17:19.580 --> 17:21.950
Bem, lá embaixo, na classe ProjectState,

17:21.950 --> 17:24.930
nós simplesmente estendemos a classe State, e agora,

17:24.930 --> 17:27.900
fornecemos um valor, um valor concreto para aquele

17:27.900 --> 17:30.040
genérico detentor do lugar, e aqui, este

17:30.040 --> 17:32.480
valor concreto é Project, porque este ProjectState

17:32.480 --> 17:36.510
tem tudo a ver com administrar adivinhe o quê?

17:36.510 --> 17:37.393
Projetos.

17:38.970 --> 17:41.650
Agora, o construtor privado aqui tem um problema,

17:41.650 --> 17:43.390
como você pode dizer, porque não

17:43.390 --> 17:45.160
estamos chamando de super.

17:45.160 --> 17:46.930
Bem, definitivamente devemos fazer isso,

17:46.930 --> 17:48.350
vamos chamar de super aqui, é tudo

17:48.350 --> 17:49.800
o que temos que fazer lá.

17:50.640 --> 17:53.490
E aqui, se descermos, onde passamos

17:53.490 --> 17:55.880
pelos ouvintes, vemos que os ouvintes

17:55.880 --> 17:57.890
são privados, e é privado em

17:57.890 --> 18:00.240
nossa classe base.

18:00.240 --> 18:01.860
Agora, isso significa que só podemos

18:01.860 --> 18:03.580
acessá-la de dentro da classe base.

18:03.580 --> 18:06.760
Mas você tomou conhecimento de outro modificador

18:06.760 --> 18:09.380
de acesso, que é semelhante ao privado,

18:09.380 --> 18:12.900
mas também permite o acesso de classes herdadas, e

18:12.900 --> 18:14.990
que seria protegido.

18:14.990 --> 18:17.200
Protegido significa que ainda não

18:17.200 --> 18:18.930
pode ser acessado de fora da

18:18.930 --> 18:23.030
classe, mas pode ser acessado de qualquer classe que herde.

18:23.030 --> 18:24.740
Com isso, vamos salvar tudo isso,

18:24.740 --> 18:26.650
ele deve compilar muito bem.

18:26.650 --> 18:28.940
E vamos testar isso rapidamente, e isso está

18:28.940 --> 18:31.790
parecendo bom, de modo que funciona como antes, mas agora,

18:31.790 --> 18:34.160
novamente, com um código um pouco mais agradável,

18:34.160 --> 18:36.420
usando herança e genéricos também para nossa

18:36.420 --> 18:38.363
administração estadual.
