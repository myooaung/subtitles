WEBVTT

00:02.160 --> 00:05.070
-: Şu anda webpack-dev sunucusunu kullanmıyorum.

00:05.070 --> 00:07.680
Şimdi kullanmak ise çok kolay.

00:07.680 --> 00:10.030
Sadece pakete ihtiyacımız var. json dosyası ve

00:10.030 --> 00:12.430
şimdi orada "lite-server" yerine

00:12.430 --> 00:17.380
"webpack-dev-server" kullanalım, bunun gibi.

00:17.380 --> 00:20.020
Ve şimdi npm start'ı tekrar başlatalım.

00:20.020 --> 00:21.560
Şimdi göreceğiniz şey, bunun

00:21.560 --> 00:23.610
artık yerel ana bilgisayar 8080'de çalışan

00:23.610 --> 00:25.780
bir sunucuyu döndürdüğü ve webpack derleme

00:25.780 --> 00:28.330
iş akışını döndürdüğüdür.

00:28.330 --> 00:30.060
Şimdi yerel ana bilgisayar 8080'i ziyaret

00:30.060 --> 00:32.020
ederseniz projemizi orada görürüz.

00:32.020 --> 00:33.860
Şimdi ilginç olan şey, kodda bir

00:33.860 --> 00:35.510
şey değiştirirsek, örneğin,

00:35.510 --> 00:38.520
ERA konsol günlüğünü burada ayarlarsanız, Ve kaydedilir

00:38.520 --> 00:41.200
ve sonra burada alt kısmı izlerseniz, yeniden derlendiğini

00:41.200 --> 00:43.160
görürsünüz.

00:43.160 --> 00:46.450
Ancak, yeniden yüklerseniz günlüğü burada göremezsiniz Ve ayrıca

00:46.450 --> 00:47.860
kaynaklar sekmesinde, webpack

00:47.860 --> 00:49.130
kaynak sekmesinde, uygulamaya

00:49.130 --> 00:51.920
giderseniz. ts, günlüğü burada göremezsiniz.

00:51.920 --> 00:54.820
Yani aslında doğru kodu yüklemedi.

00:54.820 --> 00:58.790
Bu paketi silersem bu daha net hale gelir. js dosyası burada.

00:58.790 --> 01:01.513
Şimdi bu npm start işlemini yeniden başlatırsam,

01:02.630 --> 01:04.750
hala çalıştığını göreceksiniz ve bu

01:04.750 --> 01:08.090
arada, dist klasörünün şimdi boş kaldığını merak etmeyin,

01:08.090 --> 01:10.240
webpack-dev sunucu modunda paket yalnızca

01:10.240 --> 01:13.020
bellekte oluşturulur, bu yüzden oradadır ve dev

01:13.020 --> 01:15.840
sunucusu tarafından yüklenir, ancak aslında

01:15.840 --> 01:18.490
dist'e yazılmaz.

01:18.490 --> 01:20.270
Ancak yeniden yüklediğinizde bu sayfanın

01:20.270 --> 01:22.180
da çöktüğünü göreceksiniz.

01:22.180 --> 01:24.050
Şimdi, dosyanın orada olacağını

01:24.050 --> 01:27.080
söyledim, ama orada gibi görünmüyor, değil mi?

01:27.080 --> 01:29.120
Şimdi dediğim gibi dist'te eksik ve tabii ki dist/bundle'dan

01:29.120 --> 01:35.130
içe aktarıyoruz. js ve dizin.

01:35.130 --> 01:35.130
html,

01:35.130 --> 01:36.810
ama gerçekten de hafızada oluşturulduğuna inanabilirsiniz.

01:36.810 --> 01:38.450
Sorun şu ki, şu anda her

01:38.450 --> 01:41.640
şey doğru şekilde bağlanmamış durumda.

01:41.640 --> 01:45.330
Bunu ayarlamak için webpack'e gitmeliyiz. Yapılandır. js dosyasını

01:45.330 --> 01:50.330
açın ve orada, çıktıda, aslında bir publicPath anahtarı

01:50.350 --> 01:53.647
ekleyin ve bunu "dist. Şimdi bunu kaydedip yeniden başlatırsanız, şimdi yeniden

01:56.250 --> 01:59.120
yüklendiğini ve şimdi burada "Merhaba" yı gördüğünüzü

01:59.120 --> 02:00.670
göreceksiniz.

02:00.670 --> 02:02.400
Kaynaklar sekmesinde artık

02:02.400 --> 02:05.320
doğru çıktıyı da görebilirsiniz.

02:05.320 --> 02:06.580
Nokta klasörüne giderseniz,

02:06.580 --> 02:07.860
kaynak uygulaması. Konsol günlüğü ifadesini görürsünüz.

02:07.860 --> 02:11.270
Ve şimdi uygulamaya gidersem. 'yi seçin ve bunu silin, yeniden oluşturulur ve artık

02:11.270 --> 02:13.893
konsol günlüğü ifadesi orada değildir.

02:15.220 --> 02:18.460
Bu sadece webpack-dev sunucusunun çıktının

02:18.460 --> 02:20.410
nereye yazıldığını ve dizine

02:20.410 --> 02:22.970
göre nerede olduğunu gerçekten anlaması

02:22.970 --> 02:26.520
için gereken ek bir yapılandırmadır. html dosyası.

02:26.520 --> 02:29.910
Çünkü webpack-dev sunucusu

02:29.910 --> 02:32.180
varsayılan olarak bir dizin sunar. html dosyasını, bu betiği burada çalıştırdığınızda

02:32.180 --> 02:34.030
aynı klasörde bulur.

02:34.030 --> 02:37.550
Bu doğru, ancak o zaman dist klasörüne bağlantıyı

02:37.550 --> 02:40.520
doğru yapmaz, bu yüzden webpack-dev sunucusuna

02:40.520 --> 02:42.030
publicPath ile assestlerimizi,

02:42.030 --> 02:44.970
yani bundle'ımızı nerede bulacağımızı bildirmemiz

02:44.970 --> 02:48.040
gerekir. js dosyası bu durumda.

02:48.040 --> 02:50.960
Şimdi geliştirme sunucusundan çıkarsak,

02:50.960 --> 02:52.370
burada geliştirme modunda uygulamak

02:52.370 --> 02:53.790
istediğim bir ayar daha var.

02:53.790 --> 02:56.080
Ve bunu dışa aktarılan nesnenin en üstünde yapacağım.

02:56.080 --> 02:59.180
Modu "geliştirme" olarak ayarlayacağım. Bu, sonuçta webpack'e burada geliştirme için inşa ettiğimizi

02:59.180 --> 03:01.800
ve geliştirme deneyimimizi iyileştirmek için

03:01.800 --> 03:03.550
daha az optimizasyon yapacağını,

03:03.550 --> 03:05.590
hata ayıklamayı daha da kolaylaştıracağını

03:05.590 --> 03:11.420
ve örneğin bize daha anlamlı hata mesajları vereceğini söyleyecektir.

03:11.420 --> 03:12.950
Bu yüzden geliştirme aşamasında

03:12.950 --> 03:16.420
bu anahtarı da kesinlikle buraya eklemek istiyoruz.

03:16.420 --> 03:17.840
Bu ve webpack-dev sunucusunun yapılandırılmasıyla

03:17.840 --> 03:20.110
birlikte artık geliştirme iş akışını tamamlamış oluyoruz.

03:20.110 --> 03:22.880
Şimdi üretim için bu iş akışını biraz ayarlamamız

03:22.880 --> 03:25.570
gerekecek çünkü orada farklı bir çıktı

03:25.570 --> 03:27.100
istiyoruz.
