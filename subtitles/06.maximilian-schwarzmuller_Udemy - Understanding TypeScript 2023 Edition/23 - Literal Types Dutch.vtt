WEBVTT

00:02.350 --> 00:03.921
Dus, nu, we hebben vakbondstypes hier.

00:03.921 --> 00:07.440
Laten we voortbouwen op dat idee van union types en ook

00:07.440 --> 00:09.764
Literal types introduceren.

00:09.764 --> 00:14.290
Letterlijke types zijn types waarbij je niet alleen zegt dat een bepaalde

00:14.290 --> 00:16.436
variabele of parameter een getal

00:16.436 --> 00:19.700
of een string moet bevatten, maar waarbij je heel duidelijk

00:19.700 --> 00:21.230
bent over de exacte waarde

00:21.230 --> 00:23.800
die hij moet bevatten.

00:23.800 --> 00:26.064
Dat zagen we al vroeg hier in de basis.

00:26.064 --> 00:28.408
Const nummer twee, bijvoorbeeld.

00:28.408 --> 00:32.098
Als ik daar overheen ga, zie je dat het type dat werd afgeleid

00:32.098 --> 00:35.680
geen nummer is, maar 2. 8.

00:35.680 --> 00:37.290
En de typengroep heeft dit

00:37.290 --> 00:41.220
concrete getal als type afgeleid, omdat het een constante is.

00:41.220 --> 00:43.810
Het zal nooit veranderen en daarom weet de typengroep dat de waarde

00:43.810 --> 00:48.211
die ik hier heb toegekend het exacte type is dat ik heb. Dus natuurlijk is dit een getal,

00:48.211 --> 00:52.796
je zou kunnen zeggen 2. 8 is afgeleid van het getal type, maar

00:52.796 --> 00:56.320
het is een specifiek getal. En dit geldt niet alleen

00:56.320 --> 00:59.160
voor getallen, maar ook voor strings

00:59.160 --> 01:02.860
enzovoort. En vooral voor strijkers kan het heel nuttig zijn.

01:02.860 --> 01:07.420
Laten we zeggen dat we hier in onze gecombineerde functie getallen of tekenreeksen verwachten

01:07.420 --> 01:10.190
en we combineren ze anders op basis van wat we krijgen,

01:10.190 --> 01:13.756
maar we willen de aanroeper van de functie ook toestaan te bepalen

01:13.756 --> 01:18.756
hoe het resultaat moet worden teruggegeven, zodat we in principe een conversie van getal naar

01:18.880 --> 01:25.370
tekenreeks of andersom kunnen forceren.

01:25.370 --> 01:25.370
We

01:25.370 --> 01:29.740
zouden dit kunnen doen met de derde parameter en we zouden die laten we zeggen resultaat

01:29.740 --> 01:33.208
type of resultaat conversie of hoe je het ook wilt noemen en ik wil dit

01:33.208 --> 01:37.240
beschrijven met een string. Dus ik zet dit op

01:37.240 --> 01:41.122
type string. Nu is mijn idee dat ik hier

01:41.122 --> 01:45.625
kan combineren met twee nummers en bijvoorbeeld een string

01:45.625 --> 01:50.625
"als-nummer" kan doorgeven en het is helemaal aan jou welke identifier

01:50.630 --> 01:55.630
je hier gebruikt. Daaronder hebben we misschien "als-tekst"

01:56.260 --> 01:59.357
maar dan hebben we misschien een andere combinatie

02:02.910 --> 02:07.310
hier CombinedStringAges waar ik twee strings doorgeef maar toch dit "als-getal"

02:07.310 --> 02:10.030
wil uitvoeren en dit zou een geval zijn waar de

02:10.030 --> 02:13.540
derde parameter nuttig kan zijn om een conversie te forceren

02:13.540 --> 02:17.050
want als ik hier twee strings doorgeef zouden we het normaal

02:17.050 --> 02:19.950
gesproken in deze else-tak maken en het aan elkaar

02:19.950 --> 02:24.730
rijgen en ik zou dit in plaats daarvan als een getal willen retourneren zodat ik

02:24.730 --> 02:34.030
ook de gecombineerde string-agenten hier kan loggen.

02:34.030 --> 02:34.030
Dus

02:34.030 --> 02:37.512
nu hoeven we alleen maar rekening te houden met deze identifiers in onze functie door resultConversion

02:37.512 --> 02:41.730
op te nemen in onze if-controles. De vraag is nu wat we precies willen

02:41.730 --> 02:45.700
doen; willen we ervoor zorgen dat we deze twee strings kunnen dwingen

02:45.700 --> 02:49.930
om als getallen te worden opgeteld of willen we het resultaat, ongeacht

02:49.930 --> 02:54.012
of het een wiskundige berekening of een aaneenschakeling van strings

02:54.012 --> 03:03.039
was, dwingen om te worden omgezet in een tekst of een getal.

03:03.039 --> 03:03.039
Als

03:03.039 --> 03:05.960
we een conversie willen forceren, kunnen we hier

03:05.960 --> 03:10.382
de if-controle toevoegen en controleren of de resultaatconversie gelijk

03:10.382 --> 03:15.340
is aan "als-getal" en als dat het geval is, wil ik het resultaat teruggeven met een plus

03:15.340 --> 03:18.826
ervoor die het converteert naar een getal, het alternatief

03:18.826 --> 03:21.230
zou bijvoorbeeld parseFloat zijn, maar

03:22.800 --> 03:24.420
hier ga ik gewoon voor de plus

03:24.420 --> 03:29.420
omdat dit een beetje korter is en anders wil ik het resultaat teruggeven aanString om

03:30.156 --> 03:33.593
een uitvoer als tekenreeks te forceren.

03:34.570 --> 03:38.883
Dus nu doen we de berekening op basis van het echte type dat we krijgen, maar

03:38.883 --> 03:42.300
dan converteren we naar resultaat dat is één manier om dat te

03:42.300 --> 03:46.360
doen en als we dat opslaan en dan dit bestand compileren, zien we dit is het

03:47.470 --> 03:51.020
resultaat dat ik krijg en we krijgen die uitvoer bijvoorbeeld

03:51.020 --> 03:54.759
voor onze tekenreekscombinatie hier omdat zoals ik zei, de combinatie

03:54.759 --> 03:58.520
zelf de berekening zogezegd wordt uitgevoerd op basis van het type

03:58.520 --> 04:02.530
dat we invoeren en dat hier tekenreeks is, dus we voegen het samen en dan

04:02.530 --> 04:05.860
converteren we gewoon naar resultaat.

04:05.860 --> 04:09.593
De alternatieve logica zou zijn om het type hier te controleren

04:09.593 --> 04:14.320
en een andere operatie uit te voeren op basis van het terugkeertype dat

04:14.320 --> 04:19.180
we hier specificeren. We kunnen dit dus weglaten en in plaats

04:19.180 --> 04:22.600
daarvan hier zeggen dat als het type van invoer één een

04:22.600 --> 04:26.230
getal is en het type van invoer twee een getal is, of als resultConversion

04:27.890 --> 04:30.865
gelijk is aan "as-number" dan wil ik waarden als

04:30.865 --> 04:35.865
deze combineren en om deze fout te voorkomen, forceer ik hier de conversie naar

04:35.930 --> 04:38.794
getallen door een plus toe te voegen voor elke

04:38.794 --> 04:42.970
invoer zodat elke invoer wordt geconverteerd naar een getal en

04:42.970 --> 04:45.490
gegarandeerd een getal is voordat ik ze

04:45.490 --> 04:48.490
combineer.

04:48.490 --> 04:51.130
Kanttekening: als je strings invoert die

04:51.130 --> 04:54.610
niet in een getal kunnen worden omgezet, dus iets als Max

04:54.610 --> 04:58.800
bijvoorbeeld, dan krijg je een NaN, Not a Number als resultaat.

04:58.800 --> 05:00.280
Nou dan in het andere geval,

05:00.280 --> 05:03.170
zodat we geen "as-nummer" hebben, of dat

05:03.170 --> 05:07.976
we gewoon geen nummer ingangen hebben, dan maken we het in dit blok hier

05:07.976 --> 05:12.390
en nu met dat als ik hier weer resultaat geef, en dan slaan we dit

05:12.390 --> 05:16.230
op en hercompileren, dan zien we een andere uitvoer op

05:16.230 --> 05:20.230
onze pagina. Nu krijgen we 56 in deze twee regels hier omdat

05:20.230 --> 05:22.945
we nu niet het resultaat converteren, dus we converteren niet

05:22.945 --> 05:26.300
de samengevoegde string voor deze regel, maar in plaats daarvan doen we

05:26.300 --> 05:31.970
de conversie voordat we de twee waarden combineren.

05:31.970 --> 05:31.970
Dus

05:31.970 --> 05:34.760
het is aan jou welke logica je wilt toepassen. Ik wil eigenlijk het concept

05:34.760 --> 05:37.551
van de letterlijke types, dat ik aan het begin van deze lezing

05:37.551 --> 05:41.180
heb beschreven, nader bekijken. Ik geef een "as-nummer" en "as-tekst"

05:41.180 --> 05:44.157
door en de downs van een bedrijf dat we nu als ontwikkelaar

05:44.157 --> 05:47.600
deze waarden moeten onthouden.

05:47.600 --> 05:50.450
We moeten ervoor zorgen dat we hier geen type missen.

05:50.450 --> 05:54.010
Nu zouden we een e-num kunnen gebruiken om dat te verbeteren, maar als

05:54.010 --> 05:57.754
we hier slechts twee waarden hebben, "als-tekst" of "als-getal", dan zou

05:57.754 --> 06:00.940
misschien al het zoeken een letterlijk type kunnen zijn.

06:00.940 --> 06:04.173
We zouden kunnen zeggen "dit moet geen string

06:04.173 --> 06:09.173
zijn, het moet "als-getal" of "als-tekst" zijn", dus gebruiken we een

06:09.870 --> 06:12.090
union-type gecombineerd met letterlijke

06:12.090 --> 06:15.573
types. Letterlijke types zijn de types

06:15.573 --> 06:17.987
die gebaseerd zijn op je kerntypes string,

06:17.987 --> 06:20.933
getal enzovoort, maar dan heb je een specifieke

06:20.933 --> 06:24.750
versie van het type. Dus hier staan we specifiek deze twee

06:24.750 --> 06:27.960
snaren toe, geen enkele snaar, alleen deze twee snaren.

06:27.960 --> 06:31.460
We willen dus een string voor de resultaatconversie, maar het moet één

06:31.460 --> 06:34.207
van deze twee waarden zijn. Elke andere stringwaarde

06:34.207 --> 06:37.560
is niet toegestaan, dus dat is het idee achter een literal type en

06:37.560 --> 06:40.747
vaak zul je dit gebruiken in de context van het union type omdat

06:40.747 --> 06:43.700
je niet slechts één exacte waarde wilt toestaan, je zou het

06:43.700 --> 06:46.500
kunnen hard coderen in je code als dat het geval zou zijn,

06:46.500 --> 06:49.544
maar je wilt twee of meer mogelijke waarden hebben.

06:49.544 --> 06:52.580
In dit geval hebben we twee mogelijke waarden.

06:52.580 --> 06:56.240
Dus nu krijgen we gegarandeerd resultaatconversie die ofwel

06:56.240 --> 07:00.288
"als-getal" ofwel "als-tekst" is en bijvoorbeeld hier, als ik

07:00.288 --> 07:03.800
dit nu probeer te vergelijken met as-numbe omdat ik hier

07:03.800 --> 07:07.256
een typefout heb, kan de typengroep me hier in de IDE vertellen

07:07.256 --> 07:10.360
en natuurlijk alles wat we opslaan en compileren

07:10.360 --> 07:15.360
hier in de terminal omdat het weet dat as-numbe zonder een r aan het eind nooit een

07:15.830 --> 07:18.940
geldige waarde zal zijn voor resultaatConversie

07:18.940 --> 07:24.563
omdat ik dit unie-type met deze letterlijke types heb ingesteld.

07:25.550 --> 07:27.593
Dus nu hebben we weer wat extra typeveiligheid

07:27.593 --> 07:31.590
en zorgen we ervoor dat we dit niet verkeerd kunnen gebruiken.

07:31.590 --> 07:34.720
Hetzelfde geldt natuurlijk voor het doorgeven van een waarde. Als we hier een typefout maken,

07:34.720 --> 07:38.747
krijgen we een fout, alleen als we "als-nummer" of "als-tekst"

07:38.747 --> 07:41.947
gebruiken, mogen we dit compileren zoals je het ziet

07:41.947 --> 07:45.470
en nu compileren, dit werkt en we krijgen dezelfde uitvoer

07:45.470 --> 07:49.562
als voorheen hier. Dit zijn dus letterlijke types die vooral

07:49.562 --> 07:52.193
nuttig zijn in combinatie met union-types.
