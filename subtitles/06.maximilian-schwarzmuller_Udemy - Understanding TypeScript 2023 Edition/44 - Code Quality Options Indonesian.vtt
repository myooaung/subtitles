WEBVTT

00:02.220 --> 00:03.053
Instruktur: Sekarang

00:03.053 --> 00:04.883
jika Anda melanjutkan, kita punya lebih banyak

00:04.883 --> 00:07.920
pilihan, noUnusedLocals, noUnusedParameters, noImplicitReturns.

00:07.920 --> 00:10.470
Ini membantu Anda dengan kualitas kode, pada dasarnya.

00:10.470 --> 00:13.110
TypeScript akan mengeluh jika Anda memiliki variabel

00:13.110 --> 00:15.930
tertentu yang tidak digunakan dan sebagainya.

00:15.930 --> 00:20.930
Jadi jika kita mengaktifkan ketiga opsi ini, misalnya, opsi ini membantu Anda

00:21.711 --> 00:24.230
dengan pernyataan Switch, di mana Anda

00:24.230 --> 00:26.270
mungkin lupa kata kunci break.

00:26.270 --> 00:28.880
Tetapi jika kita mengaktifkan ketiga opsi ini, apa yang

00:28.880 --> 00:31.760
akan dikeluhkan TypeScript adalah, misalnya, jika Anda memiliki

00:31.760 --> 00:33.600
variabel nama pengguna di sini, secara

00:33.600 --> 00:36.730
lokal dalam fungsi ini, dan Anda tidak menggunakannya.

00:36.730 --> 00:39.490
Anda lihat, ini memiliki garis kuning berlekuk-lekuk

00:39.490 --> 00:41.500
karena ini bukan kesalahan, sungguh.

00:41.500 --> 00:43.179
Ini lebih seperti peringatan atau petunjuk.

00:43.179 --> 00:45.643
Jadi jika saya compile di sini, Anda akan melihat sekarang,

00:47.750 --> 00:49.500
bagaimanapun, saya mendapatkan error

00:49.500 --> 00:51.900
karena TypeScript hanya mengenal error.

00:51.900 --> 00:54.140
Dan di sana kita melihat bahwa nama pengguna dideklarasikan,

00:54.140 --> 00:57.080
tetapi nilainya tidak pernah dibaca karena kita memastikan bahwa

00:57.080 --> 01:00.550
kita tidak ingin variabel lokal yang tidak digunakan.

01:00.550 --> 01:02.483
Variabel global yang tidak digunakan,

01:03.440 --> 01:06.340
jadi jika saya memiliki sesuatu seperti appId di sini, diperbolehkan

01:06.340 --> 01:09.130
karena TypeScript tidak dapat mengetahui apakah Anda mungkin

01:09.130 --> 01:12.370
membutuhkan nilai yang didefinisikan secara global dalam file skrip

01:12.370 --> 01:13.870
lain.

01:13.870 --> 01:14.980
Jadi oleh karena itu hal ini diperbolehkan,

01:14.980 --> 01:17.280
tetapi dalam fungsi di mana tidak ada tempat lain di mana Anda

01:17.280 --> 01:20.010
bisa membutuhkannya, TypeScript akan mengeluh sekarang jika Anda memiliki

01:20.010 --> 01:22.020
kode yang tidak digunakan.

01:22.020 --> 01:23.540
Dan itu pada umumnya merupakan ide yang bagus.

01:23.540 --> 01:26.021
Memungkinkan Anda untuk menghapus kode yang tidak digunakan tersebut.

01:26.021 --> 01:28.510
Hal yang sama berlaku untuk parameter yang tidak digunakan.

01:28.510 --> 01:31.350
Jika Anda akan mengambil H di sini di mana satu, tentu saja,

01:31.350 --> 01:33.050
bind rusak sekarang, tetapi bahkan

01:33.050 --> 01:35.970
jika kita mengoper ini dalam karya ini, tetapi sekarang, sekali

01:35.970 --> 01:39.220
lagi, TypeScript dan oleh karena itu ID memberi tahu kita bahwa ini

01:39.220 --> 01:41.780
tidak digunakan dan baik ini, jadi mungkin Anda harus

01:41.780 --> 01:44.293
menghapusnya atau mulai menggunakannya.

01:45.238 --> 01:48.173
Jadi itu tidak adaUnusedParameters.

01:48.173 --> 01:51.365
Dan noImplicitReturns berarti bahwa kita akan mendapatkan

01:51.365 --> 01:55.620
error jika kita memiliki fungsi yang terkadang mengembalikan sesuatu dan

01:55.620 --> 01:57.130
terkadang tidak.

01:57.130 --> 02:00.913
Katakanlah kita memiliki fungsi lain, add, di mana kita mendapatkan

02:01.912 --> 02:02.940
dua angka.

02:02.940 --> 02:05.906
Angka dan n2 adalah angka.

02:05.906 --> 02:10.906
Dan, tentu saja kita bisa mengembalikan n1 ditambah n2.

02:14.030 --> 02:15.710
Tetapi katakanlah kita, untuk beberapa

02:15.710 --> 02:18.518
alasan, memeriksa apakah n1 ditambah n2 lebih besar dari

02:18.518 --> 02:21.800
nol, karena kita hanya ingin mengembalikan jika kita memiliki hasil

02:21.800 --> 02:23.700
yang lebih besar dari nol.

02:23.700 --> 02:25.040
Kemudian kita menginginkan nilai yang dikembalikan.

02:25.040 --> 02:26.940
Jika tidak, kita tidak ingin mengembalikan apa pun.

02:26.940 --> 02:28.170
Kami tidak ingin kembali.

02:28.170 --> 02:30.550
Nah, kemudian kita mendapatkan peringatan karena pengaturan

02:30.550 --> 02:32.598
ekstra dengan noImplicitReturns.

02:32.598 --> 02:36.401
TypeScript mendeteksi bahwa tidak semua cabang dalam fungsi ini mengarah

02:36.401 --> 02:38.760
ke pernyataan kembali dan karena pengaturan kita,

02:38.760 --> 02:40.650
hal itu tidak diperbolehkan.

02:40.650 --> 02:44.150
Setidaknya kita harus sengaja tidak mengembalikan apapun di sini dengan

02:44.150 --> 02:45.790
menambahkan kata kunci return.

02:45.790 --> 02:48.260
Menghilangkannya saja tidak diperbolehkan di sini.

02:48.260 --> 02:49.730
Hal ini diperbolehkan jika Anda memiliki

02:49.730 --> 02:52.446
fungsi yang tidak mengembalikan apa pun, tanpa cabang, tetapi jika

02:52.446 --> 02:54.520
Anda memiliki setidaknya satu kasus di mana fungsi

02:54.520 --> 02:56.423
Anda mengembalikan sesuatu, maka Anda harus

02:56.423 --> 02:58.770
memastikan bahwa Anda mengembalikan sesuatu dalam semua

02:58.770 --> 02:59.933
kasus.

03:01.830 --> 03:03.130
Dan dengan itu, kita sudah mendekati akhir

03:03.130 --> 03:04.240
dari penelusuran konfigurasi ini.

03:04.240 --> 03:06.526
Kita bisa mengabaikan moduleResolution di sini.

03:06.526 --> 03:08.933
Semua opsi ini sebenarnya cukup canggih, yang

03:08.933 --> 03:10.830
tidak penting bagi kami di sini, tidak

03:10.830 --> 03:13.510
penting bagi Anda dalam banyak proyek.

03:13.510 --> 03:16.600
Source Map Options (Opsi Peta Sumber) memungkinkan Anda untuk mengubah peta sumber

03:16.600 --> 03:18.180
yang telah kita lihat sebelumnya.

03:18.180 --> 03:21.440
Jadi file-file terjemahan ini dari JavaScript ke TypeScript.

03:21.440 --> 03:23.720
Biasanya pengaturan default seharusnya baik-baik saja

03:23.720 --> 03:26.000
di sini, jadi jika Anda tidak tahu apa yang Anda ubah dan

03:26.000 --> 03:27.010
mengapa Anda melakukannya,

03:27.010 --> 03:29.470
Anda biasanya tidak perlu mengubah apa pun di sini.

03:29.470 --> 03:31.512
Dan mengenai opsi-opsi eksperimental

03:31.512 --> 03:34.380
ini, saya akan melihatnya, khususnya pada

03:34.380 --> 03:37.010
experimentalDecorators, nanti dalam

03:37.010 --> 03:38.910
modul decorators.

03:38.910 --> 03:41.810
Hal ini pada dasarnya memungkinkan fitur-fitur tertentu untuk

03:41.810 --> 03:45.060
digunakan dalam TypeScript yang benar-benar eksperimental, di mana

03:45.060 --> 03:48.271
tidak yakin apakah fitur tersebut akan berakhir di JavaScript pada

03:48.271 --> 03:50.270
suatu waktu di masa depan dan di mana Anda

03:50.270 --> 03:52.940
masih mungkin ingin bekerja dengannya.

03:52.940 --> 03:55.220
Kemudian Anda secara eksplisit harus memberi tahu TypeScript

03:55.220 --> 03:57.070
bahwa Anda ingin bekerja dengan fitur-fitur ini

03:57.070 --> 03:59.390
dan Anda dapat melakukannya dengan konfigurasi itu.

03:59.390 --> 04:01.880
Tetapi sekali lagi, saya akan kembali ke sana.

04:01.880 --> 04:04.170
Dan oleh karena itu sekarang, kita berjalan melalui file ini,

04:04.170 --> 04:05.870
banyak opsi yang dapat Anda atur di sana.

04:05.870 --> 04:08.222
Dan seiring dengan berkembangnya TypeScript, Anda biasanya

04:08.222 --> 04:10.612
juga mendapatkan lebih banyak opsi yang ditambahkan di

04:10.612 --> 04:13.837
sini, oleh karena itu dokumen resmi selalu merupakan tempat yang tepat untuk

04:13.837 --> 04:16.160
menyelam lebih dalam dan untuk memastikan bahwa Anda

04:16.160 --> 04:18.210
tidak melewatkan opsi menarik yang mungkin membantu

04:18.210 --> 04:20.343
Anda dalam proyek Anda.
