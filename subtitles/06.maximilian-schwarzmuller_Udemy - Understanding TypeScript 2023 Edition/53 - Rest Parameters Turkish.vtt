WEBVTT

00:02.060 --> 00:04.880
Erkek: Yayılma operatörü ile ilgili olan

00:04.880 --> 00:07.060
dinlenme parametreleridir.

00:07.060 --> 00:10.374
Bunun için de yine ekleme işlevimi değiştireceğim.

00:10.374 --> 00:13.870
Bu yüzden, hiçbir şeyin bozulmaması için buradaki

00:13.870 --> 00:15.780
tüm kodu yorumlayacağım.

00:15.780 --> 00:20.520
Ve ekleme işlevimi, işlev tuşu sözcüğünü ok işlevi olarak istediğiniz

00:20.520 --> 00:22.760
herhangi bir sözdizimiyle yeniden

00:22.760 --> 00:23.830
ekleyin.

00:23.830 --> 00:26.360
Ama şimdi özel bir işlevim olsun istiyorum.

00:26.360 --> 00:29.100
İki değerle kısıtlamak istemiyorum, kullanıcının

00:29.100 --> 00:31.340
girdiği kadar çok değer ekleyebilmek

00:31.340 --> 00:33.290
istiyorum.

00:33.290 --> 00:37.700
Böylece temel olarak bu şekilde ekle diyebiliriz,

00:37.700 --> 00:42.700
beş, on, iki, üç nokta yedi ve benzeri, istediğiniz kadar

00:42.880 --> 00:44.530
değerle.

00:44.530 --> 00:46.691
Eğer 10 değerle çağırmak isterseniz,

00:46.691 --> 00:48.090
bu da mümkün olmalıdır.

00:48.090 --> 00:51.160
Ancak elbette şu anda açıkça görebileceğiniz

00:51.160 --> 00:52.600
gibi bu mümkün değil.

00:52.600 --> 00:54.290
Typescript bana bir hata veriyor

00:54.290 --> 00:57.760
ve bu doğru, çünkü burada hiçbir argüman kabul etmiyorum.

00:57.760 --> 01:00.336
Elbette burada argümanları kabul edebilir ve doğru

01:00.336 --> 01:02.210
türleri atayabilirim, ancak daha sonra

01:02.210 --> 01:04.300
bunu beş ile çağırırsam ne olur?

01:04.300 --> 01:06.330
Dediğim gibi, esnek olmak istiyorum.

01:06.330 --> 01:08.850
İşte burada dinlenme parametreleri devreye girer.

01:08.850 --> 01:13.111
Bir değer listesi beklediğiniz yerde, yani aktarmak istediğiniz

01:13.111 --> 01:15.270
yerde değil, ancak gelen değerler

01:15.270 --> 01:18.308
olarak kabul etmek istediğiniz yerde, üç nokta

01:18.308 --> 01:20.360
ve ardından sayılar gibi istediğiniz

01:20.360 --> 01:24.043
herhangi bir adı da kullanabilirsiniz.

01:25.630 --> 01:27.430
Şimdi bunun yapacağı

01:27.430 --> 01:31.470
şey, gelen tüm parametreleri veya genellikle

01:31.470 --> 01:34.920
gelen değer listesini, virgülle ayrılmış

01:34.920 --> 01:39.350
değer listesini bir dizide birleştirmektir.

01:39.350 --> 01:40.940
Buradaki sayılar bir dizi olacaktır,

01:40.940 --> 01:44.460
ancak elbette varsayılan olarak herhangi bir değer türü, yani herhangi

01:44.460 --> 01:46.920
bir değerle dolu bir dizi olacaktır ve yapmamız gereken

01:46.920 --> 01:49.680
bu değildir, daha açık olmalıyız.

01:49.680 --> 01:53.200
Ve burada şöyle diyebiliriz: "Bu bir sayı dizisi olacak. İşte böyle.

01:53.200 --> 01:54.430
Şimdi doğru türü tanımlıyoruz

01:54.430 --> 01:56.420
ve şimdi bu sayı dizisiyle çalışıyoruz.

01:56.420 --> 01:58.710
Şimdi bunu birkaç farklı şekilde özetleyebiliriz.

01:58.710 --> 02:01.880
Bir sonuç değişkeni ve ardından dört döngü ile çalışabiliriz

02:01.880 --> 02:04.110
çünkü sayılar bir dizidir.

02:04.110 --> 02:06.863
Yani burada sayılar arasında döngü yapabilir

02:06.863 --> 02:09.260
ve bunu sonuca ekleyebiliriz.

02:09.260 --> 02:11.519
Ya da diziler üzerinde kullanılabilen reduce yöntemini kullanırız.

02:11.519 --> 02:15.620
Reduce, bir dizideki her öğe üzerinde bir işlem gerçekleştirecek,

02:15.620 --> 02:19.030
bir sonuç döndürecek ve ardından bu sonuçları birbirine

02:19.030 --> 02:20.940
ekleyecek şekilde çalışır.

02:20.940 --> 02:24.310
Bunun için azaltılacak bir fonksiyon ve ardından burada

02:24.310 --> 02:27.160
sıfır olan bir başlangıç değeri sağlarsınız.

02:27.160 --> 02:31.093
Ve sonra reduce'a aktardığınız bu fonksiyon iki

02:31.093 --> 02:33.430
argüman alır ve bu mevcut sonuçtur

02:33.430 --> 02:35.920
diyebilirsiniz.

02:35.920 --> 02:38.968
Ve baktığımız mevcut değer, dizinin

02:38.968 --> 02:42.640
her bir değeri olacaktır.

02:42.640 --> 02:45.350
Ve sonra burada cuResult'ı döndürebilirsiniz, bu ilk

02:45.350 --> 02:48.290
çalıştırma için buradaki başlangıç değeri olacaktır.

02:48.290 --> 02:51.497
Artı curValue.

02:51.497 --> 02:52.703
Ve bunu yaparsanız, genel olarak burada bir sayı dönecektir.

02:53.859 --> 02:57.920
Yani burada genel olarak indirgenmiş sayıların sonucunu döndürebiliriz

02:57.920 --> 03:01.160
ve dolayısıyla buradaki add değişkeni veya sabiti,

03:01.160 --> 03:04.790
sonuçta bir sayı dizisi değil, birkaç sayı alan bir fonksiyon

03:04.790 --> 03:07.320
tutacaktır.

03:07.320 --> 03:10.650
Ancak geri kalan parametreler nedeniyle, daha sonra

03:10.650 --> 03:13.690
işlevin içinde bir dizi halinde birleştirilen ve

03:13.690 --> 03:16.510
sonunda sayıyı döndüren bir sayı listesi.

03:16.510 --> 03:18.550
O halde şimdilik her şeyi kaydedersek,

03:18.550 --> 03:20.350
hepsi çalışmalı ve sonucu, buradaki

03:20.350 --> 03:23.350
küçük toplamamızın toplamını görmeliyiz.

03:23.350 --> 03:26.250
İşte bu, sınırsız sayıda argüman kabul etmek

03:26.250 --> 03:28.430
için gerçekten kullanışlı bir özellik

03:28.430 --> 03:31.400
olan dinlenme parametreleridir.

03:31.400 --> 03:34.210
Push yöntemi gibi birkaç yerleşik yöntem

03:34.210 --> 03:36.680
de tam olarak bu şekilde çalışır.

03:36.680 --> 03:38.540
Gördüğünüz gibi, push burada garip bir parametre tanımına sahip.

03:38.540 --> 03:42.560
Biz de tam olarak bunu öğrendik.

03:42.560 --> 03:44.250
Push burada, dizelerle

03:44.250 --> 03:48.490
dolu bir dizi olan bu dizi için birkaç öğe alır.

03:48.490 --> 03:50.400
Birkaç tel gerekiyor.

03:50.400 --> 03:51.730
Ve bu, bir dizgi dizisi aldığı

03:51.730 --> 03:54.060
anlamına gelmez, bunun yerine burada geri kalan

03:54.060 --> 03:56.400
parametrelerle, virgülle ayrılmış bir dizgi

03:56.400 --> 03:58.580
listesi alır, bu da sundurma dışında bir diziye

03:58.580 --> 04:01.260
birleştirilir ve dahili olarak işlenir.

04:01.260 --> 04:03.100
Geri kalan parametreler sözdizimi budur.

04:03.100 --> 04:06.276
Bu arada bunu tuple'larla bile birleştirebilirsiniz.

04:06.276 --> 04:10.370
Birden fazla argümanı desteklemek istediğinizi biliyorsanız,

04:10.370 --> 04:15.370
ancak kaç tane olacağını biliyorsanız, yani sınırsız bir liste değilse,

04:16.520 --> 04:18.420
o zaman orada bir tuple türü de

04:18.420 --> 04:20.392
kullanabilirsiniz.

04:20.392 --> 04:23.430
Örneğin, "Burada ücretsiz numaralarımı kabul ediyorum. Ve tabii ki fonksiyonu çağırırken

04:23.430 --> 04:28.430
buradaki dördüncü argümanı kaldırmam gerekiyor.

04:28.460 --> 04:30.910
Çünkü artık her biri sayı olan üç argüman almak istediğim

04:30.910 --> 04:32.240
konusunda oldukça netim.

04:32.240 --> 04:33.830
Elbette buraya sadece üç bağımsız

04:33.830 --> 04:36.980
parametre ekleyebilirdik, ancak bu sözdizimi yine de serbest parametreleri

04:36.980 --> 04:39.030
eklemekten biraz daha kısa veya kurulumu daha

04:39.030 --> 04:40.720
kolay olabilir.

04:40.720 --> 04:43.090
Bu gerçekten uygulamanıza ve gereksinimlerinize bağlıdır.

04:43.090 --> 04:46.919
Burada bu kurulumdan uzaklaşacağım ve daha genel

04:46.919 --> 04:51.320
olacağım ve aldığım kadar argüman kabul edeceğim çünkü

04:51.320 --> 04:55.210
bu fonksiyon için gerçekten de sonsuz sayıda argümanı

04:55.210 --> 04:57.864
işleyebiliyorum.
