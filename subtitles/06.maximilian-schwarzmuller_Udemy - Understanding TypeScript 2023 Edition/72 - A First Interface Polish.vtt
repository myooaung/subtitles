WEBVTT

00:02.802 --> 00:04.030
Instruktor: Teraz, gdy pokryliśmy

00:04.030 --> 00:05.910
klasy, przyjrzyjmy się interfejsom.

00:05.910 --> 00:09.510
Zamierzamy zmienić nazwę pliku app ts na classes i dodać

00:09.510 --> 00:11.230
nowy plik app ts, podczas gdy

00:11.230 --> 00:13.730
dalej będzie kompilowany do app js.

00:13.730 --> 00:15.130
I w tym pliku app ts, zanurkujemy

00:15.130 --> 00:17.026
teraz w interfejsy.

00:17.026 --> 00:19.850
Co to jest interfejs?

00:19.850 --> 00:21.640
Otóż w najprostszej wersji

00:21.640 --> 00:25.470
interfejs opisuje strukturę obiektu.

00:25.470 --> 00:28.502
Możemy go użyć do opisania, jak dany obiekt powinien wyglądać.

00:28.502 --> 00:29.856
Pozwól, że pokażę ci przykład.

00:29.856 --> 00:32.990
Tworzymy interfejs za pomocą słowa kluczowego interface,

00:32.990 --> 00:37.510
które istnieje tylko w typescript, a nie w vanilla JavaScript.

00:37.510 --> 00:39.600
Teraz nazwijmy ją osobą.

00:39.600 --> 00:41.140
Znowu, tak jak na zajęciach,

00:41.140 --> 00:43.150
zaczynam od wielkiej litery,

00:43.150 --> 00:46.820
nie jest to must do, ale zalecenie i konwencja.

00:46.820 --> 00:47.910
Teraz w nim możemy

00:47.910 --> 00:51.160
zdefiniować jak ma wyglądać obiekt osoby.

00:51.160 --> 00:52.480
Teraz w przeciwieństwie do klasy,

00:52.480 --> 00:54.930
nie będziemy jednak używać tego jako wzorca.

00:54.930 --> 00:57.543
Po prostu jako typ niestandardowy, moglibyśmy powiedzieć.

00:58.490 --> 01:00.690
Tutaj można powiedzieć, że osoba może mieć

01:00.690 --> 01:01.860
imię, które jest typu

01:01.860 --> 01:04.300
string, i wiek, który jest typu number.

01:04.300 --> 01:05.140
Jak widać tutaj,

01:05.140 --> 01:08.020
dodaję właściwości lub definicje pól, gdzie

01:08.020 --> 01:09.970
mam nazwy właściwości i typy

01:09.970 --> 01:13.440
wartości, które będą tam przechowywane.

01:13.440 --> 01:16.560
To, czego tu nie mamy, to konkretne wartości.

01:16.560 --> 01:17.730
Więc nie mamy tego.

01:17.730 --> 01:20.510
A gdybyśmy spróbowali przypisać tutaj wartość

01:20.510 --> 01:21.810
domyślną, otrzymalibyśmy

01:21.810 --> 01:25.290
błąd, że interfejs nie może mieć inicjalizatora.

01:25.290 --> 01:27.540
Możemy więc zdefiniować tylko strukturę,

01:27.540 --> 01:29.610
a nie konkretne wartości.

01:29.610 --> 01:32.930
Możemy tutaj również dodać metodę, np. greet.

01:32.930 --> 01:34.470
Podobnie jak w przypadku

01:34.470 --> 01:37.440
właściwości, nie dodajemy tutaj faktycznej

01:37.440 --> 01:39.610
metody, ale tylko strukturę, opis,

01:39.610 --> 01:41.020
że tak powiem.

01:41.020 --> 01:42.670
Jak to powinno wyglądać.

01:42.670 --> 01:46.600
A żeby zdefiniować metodę, którą powinien mieć obiekt person,

01:46.600 --> 01:49.470
dodajemy nazwę metody, potem nawias, potem

01:49.470 --> 01:50.920
return type.

01:50.920 --> 01:52.210
Na przykład biały, a w nawiasie

01:52.210 --> 01:53.260
możesz mieć dowolne

01:53.260 --> 01:55.310
argumenty, które chcesz mieć.

01:55.310 --> 01:57.740
Jak fraza, która powinna być typem.

01:57.740 --> 02:01.920
Ponownie, po prostu nazwa argumentu, a następnie typ.

02:01.920 --> 02:03.610
Następnie typ zwrotny metody.

02:03.610 --> 02:06.450
Oczywiście, nie musisz dodawać parametrów.

02:06.450 --> 02:09.080
Co możemy teraz zrobić z tym interfejsem osoby?

02:09.080 --> 02:11.360
Jaki jest pomysł na jego realizację?

02:11.360 --> 02:12.610
Cóż, możemy teraz użyć tego

02:12.610 --> 02:14.810
do sprawdzenia typu obiektu, na przykład.

02:14.810 --> 02:18.020
Moglibyśmy mieć zmienną, użytkownik jeden, i powiedzmy,

02:18.020 --> 02:19.130
że z jakiegoś powodu

02:19.130 --> 02:22.620
nie inicjalizujemy natychmiast.

02:22.620 --> 02:25.660
Chcemy po prostu ostatecznie przechowywać

02:25.660 --> 02:28.490
tam obiekt, który ma taką strukturę.

02:28.490 --> 02:30.710
Następnie możemy przypisać typ do użytkownika pierwszego,

02:30.710 --> 02:31.830
którym może być osoba.

02:31.830 --> 02:34.604
Możemy użyć naszego interfejsu jako typu.

02:34.604 --> 02:38.410
A teraz, gdy przypisuję wartość do użytkownika pierwszego, musi

02:38.410 --> 02:39.730
to być obiekt, ponieważ

02:39.730 --> 02:42.780
interfejsy są używane do definiowania obiektów.

02:42.780 --> 02:45.560
I musi to być obiekt z właściwością name, która

02:45.560 --> 02:47.190
musi zawierać ciąg znaków,

02:47.190 --> 02:49.850
właściwością age, która musi zawierać liczbę,

02:49.850 --> 02:53.102
i metodą greet, która musi przyjąć argument w postaci

02:53.102 --> 02:56.920
frazy, a następnie również zwrócić nic.

02:56.920 --> 02:57.830
Tutaj w tym obiekcie

02:57.830 --> 02:59.360
możemy dodać nazwę.

02:59.360 --> 03:00.730
Max, na przykład.

03:00.730 --> 03:03.010
Teraz tutaj dodajemy konkretną wartość

03:03.010 --> 03:06.310
i musi ona być tego typu zdefiniowanego tam na górze.

03:06.310 --> 03:08.160
Teraz oddzielone przecinkiem, a to

03:08.160 --> 03:11.110
różnica w stosunku do naszej definicji interfejsu.

03:11.110 --> 03:16.110
Tam oddzielamy nasze klucze i właściwości średnikami.

03:16.470 --> 03:18.430
Ale na dole, kiedy tworzymy nasz obiekt,

03:18.430 --> 03:21.390
tak jak w vanilla JavaScript używamy przecinka.

03:21.390 --> 03:25.570
Następnie wiek, no i oczywiście również metoda pozdrowień.

03:25.570 --> 03:27.550
Teraz metoda greet, jak się nauczyłeś,

03:27.550 --> 03:32.020
musi być metodą, która przyjmuje jeden parametr, frazę, która musi być ciągiem

03:32.020 --> 03:33.790
znaków, a gdzie następnie chcę

03:33.790 --> 03:36.134
konsolę logu frazy plus trochę białej

03:36.134 --> 03:41.134
przestrzeni plus to. nazwa.

03:41.210 --> 03:43.930
Może to być jedna implementacja metody greet.

03:43.930 --> 03:45.670
Teraz to, co tam jest, nie ma znaczenia.

03:45.670 --> 03:48.210
Jego ważne jest tylko to, że mamy ten jeden parametr,

03:48.210 --> 03:49.270
który jest ciągiem znaków,

03:49.270 --> 03:51.290
i że nic nie zwracamy.

03:51.290 --> 03:54.090
Teraz byłby to poprawny obiekt user one,

03:54.090 --> 03:58.150
ponieważ spełnia on tę definicję naszego interfejsu.

03:58.150 --> 03:59.040
Dlatego oczywiście

03:59.040 --> 04:00.940
możemy teraz na przykład zadzwonić

04:00.940 --> 04:04.020
do greet i powiedzieć hi there, I am, a następnie powinniśmy

04:04.020 --> 04:06.220
wydrukować nazwę.

04:06.220 --> 04:08.300
Jeśli teraz zapiszemy to, a następnie ponownie

04:08.300 --> 04:10.330
załadujemy, zobaczymy hi there I am Max.

04:10.330 --> 04:12.840
I to pochodzi z naszej metody pozdrawiania.

04:12.840 --> 04:14.090
To jest interfejs.

04:14.090 --> 04:18.280
Dzięki niej możemy określić strukturę obiektu.

04:18.280 --> 04:21.140
Możemy go użyć jako typ do sprawdzenia typu

04:21.140 --> 04:24.453
dla obiektów, które muszą mieć tę strukturę.
