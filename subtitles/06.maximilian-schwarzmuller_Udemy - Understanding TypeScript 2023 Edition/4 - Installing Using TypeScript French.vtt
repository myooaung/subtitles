WEBVTT

00:02.160 --> 00:04.930
Instructeur : Voici ce même exemple dans

00:04.930 --> 00:06.440
un projet réel.

00:06.440 --> 00:08.550
Vous trouverez ce projet simple, le fichier

00:08.550 --> 00:11.270
HTML d'index et ce fichier JavaScript, joints à cette

00:11.270 --> 00:13.340
vidéo dans un sous-fichier.

00:13.340 --> 00:16.900
Vous pouvez simplement l'ouvrir et ensuite ouvrir le fichier HTML de l'index.

00:16.900 --> 00:18.610
Vous pouvez également ouvrir le code

00:18.610 --> 00:20.890
dans l'éditeur de texte de votre choix.

00:20.890 --> 00:22.160
J'utilise ici VisualStudioCode,

00:22.160 --> 00:25.000
et je reviendrai sur ma configuration exacte plus tard dans

00:25.000 --> 00:26.250
ce module.

00:26.250 --> 00:29.250
Pour l'instant, vous pouvez simplement ouvrir ces deux fichiers texte

00:29.250 --> 00:31.180
avec n'importe quel éditeur de texte.

00:31.180 --> 00:34.110
Ce que vous trouverez là-dedans est ce fichier JavaScript,

00:34.110 --> 00:37.000
qui interagit avec ce fichier HTML d'index.

00:37.000 --> 00:38.830
Et ensuite, dans ce fichier HTML d'index,

00:38.830 --> 00:41.050
vous trouverez deux entrées et le bouton et tout

00:41.050 --> 00:43.698
fichier JavaScript qui est importé ici.

00:43.698 --> 00:45.843
Nous nous adressons essentiellement à ces éléments.

00:45.843 --> 00:47.968
Nous avons ensuite une fonction ici et un écouteur

00:47.968 --> 00:50.020
d'événements sur le bouton qui déclenche la

00:50.020 --> 00:53.830
fonction et enregistre le résultat de la fonction ici dans la console.

00:53.830 --> 00:56.750
Maintenant, si nous ouvrons simplement ce fichier HTML

00:56.750 --> 01:00.701
d'index, en double-cliquant dessus dans l'Explorateur Windows ou le

01:00.701 --> 01:03.220
Finder Mac pour qu'il s'ouvre dans un navigateur,

01:03.220 --> 01:05.150
voici ce que vous verrez.

01:05.150 --> 01:07.250
Les deux entrées et le bouton d'ajout

01:07.250 --> 01:11.170
et ici j'ai ouvert les outils de développement du navigateur aussi.

01:11.170 --> 01:13.760
Maintenant, si vous entrez 10 et cinq ici par exemple,

01:13.760 --> 01:16.640
vous pourriez vous attendre à voir 15 comme résultat

01:16.640 --> 01:19.420
ici à droite, mais à la place vous voyez 105.

01:19.420 --> 01:23.460
Et cela nous montre une faiblesse de JavaScript ici.

01:23.460 --> 01:25.890
Il ne s'agit pas d'une erreur technique.

01:25.890 --> 01:28.050
Ce n'est pas une erreur qui est lancée,

01:28.050 --> 01:31.640
mais c'est une erreur logique dans notre application.

01:31.640 --> 01:33.986
Mais d'où vient cette erreur ?

01:33.986 --> 01:37.490
Ici, en JavaScript, j'accède à ces deux entrées et lorsque

01:37.490 --> 01:39.612
le bouton est cliqué, je récupère

01:39.612 --> 01:41.920
les valeurs des deux éléments d'entrée

01:41.920 --> 01:45.300
et je les passe ici pour les ajouter.

01:45.300 --> 01:46.970
Il est important de savoir qu'en

01:46.970 --> 01:50.100
JavaScript, lorsque vous accédez à la valeur d'un élément

01:50.100 --> 01:53.130
d'entrée, il s'agit toujours d'une chaîne.

01:53.130 --> 01:55.790
Toujours, quel que soit le type d'entrée.

01:55.790 --> 01:59.633
Que ce soit de type nombre ou non, c'est toujours une chaîne de caractères.

02:00.645 --> 02:03.995
Je passe donc deux chaînes à cette fonction à la fin, et si vous ajoutez

02:03.995 --> 02:05.890
deux chaînes en JavaScript, elles sont

02:05.890 --> 02:09.570
concaténées au lieu d'être ajoutées mathématiquement.

02:09.570 --> 02:14.210
C'est pourquoi nous voyons 105, 10 et cinq concaténés.

02:14.210 --> 02:17.090
C'est le problème avec JavaScript ici.

02:17.090 --> 02:19.980
Et c'est là que TypeScript peut nous aider.

02:19.980 --> 02:22.360
Sans TypeScript, nous pourrions bien

02:22.360 --> 02:24.380
sûr ajouter une vérification if

02:24.380 --> 02:28.048
ici et vérifier si le type de num one est égal à number.

02:28.048 --> 02:33.048
Et si le type de num deux est égal à nombre, et si c'est le cas alors

02:34.030 --> 02:37.390
je retourne mon calcul comme ceci, sinon je

02:37.390 --> 02:40.588
pourrais jeter une erreur ou je convertis

02:40.588 --> 02:43.304
au moins les deux en nombres en ajoutant

02:43.304 --> 02:47.428
un plus devant chaque paramètre ici.

02:47.428 --> 02:50.510
Voici un code que nous pourrions écrire.

02:50.510 --> 02:53.023
Peut-être un peu plus raffiné que cela en JavaScript.

02:53.023 --> 02:57.130
Et avec cela, nous nous assurerons de convertir les chiffres ou les entrées

02:57.130 --> 03:00.670
en chiffres s'ils ne sont pas encore des chiffres.

03:00.670 --> 03:02.430
Donc avec ça, si je recharge

03:02.430 --> 03:05.220
et que je répète ça, maintenant nous obtenons

03:05.220 --> 03:07.590
15 à cause de notre code modifié.

03:07.590 --> 03:09.350
Donc, bien sûr, nous pouvons le faire en JavaScript.

03:09.350 --> 03:10.970
Et c'est du JavaScript classique,

03:10.970 --> 03:13.440
rien de TypeScript à ce sujet.

03:13.440 --> 03:16.640
Mais nous avons écrit un peu de code supplémentaire pour une erreur

03:16.640 --> 03:19.048
que je voudrais en fait empêcher en premier lieu.

03:19.048 --> 03:22.210
Je ne veux pas que ça arrive.

03:22.210 --> 03:26.260
Je veux m'assurer que nous ne pouvons même pas passer des chaînes de caractères

03:26.260 --> 03:28.930
à add, car add devrait être une fonction qui n'opère

03:29.890 --> 03:31.020
que sur des nombres.

03:31.020 --> 03:32.570
De sorte que là, nous n'avons pas besoin

03:33.428 --> 03:35.650
de vérifier si nous obtenons un nombre ou non.

03:35.650 --> 03:37.000
Donc je veux garder cette fonction

03:37.000 --> 03:38.500
dans l'état où elle était avant.

03:38.500 --> 03:41.630
Je veux cette fonction ici, juste comme ça.

03:41.630 --> 03:44.003
Et c'est là que TypeScript peut nous aider.

03:45.088 --> 03:45.921
Donc TypeScript peut

03:45.921 --> 03:48.900
nous aider dans de telles situations comme je viens de le montrer.

03:48.900 --> 03:52.690
Maintenant, afin de voir comment il nous aide, installons-le.

03:52.690 --> 03:56.590
Donc sur typescriptlang. org, vous pouvez cliquer sur télécharger.

03:56.590 --> 03:58.540
Et là, vous apprendrez à l'installer.

03:58.540 --> 04:00.250
Et nous allons l'installer avec

04:01.136 --> 04:02.880
cette commande qui utilise l'outil

04:02.880 --> 04:06.750
NPM et l'outil NPM fait partie du paquetage Node JS.

04:06.750 --> 04:10.210
Donc, même si nous n'allons pas écrire de code Node JS ici, nous devons

04:10.210 --> 04:12.910
quand même installer Node JS simplement parce que,

04:12.910 --> 04:14.760
dans les coulisses, il sera également

04:14.760 --> 04:17.770
utilisé par certains outils que nous utilisons.

04:17.770 --> 04:21.780
Et lorsque nous installons Node JS, nous installons également NPM, le

04:21.780 --> 04:24.956
Node Package Manager, un outil que nous pouvons ensuite

04:24.956 --> 04:29.200
utiliser pour installer TypeScript globalement sur notre machine.

04:29.200 --> 04:31.452
Il suffit donc de visiter nodejs. org et là, installez

04:31.452 --> 04:34.220
la dernière version que vous trouverez ici.

04:34.220 --> 04:35.723
Il suffit de cliquer sur ce bouton.

04:36.586 --> 04:38.276
Il sera ensuite téléchargé et installé ou vous pouvez passer

04:38.276 --> 04:39.420
par le programme d'installation.

04:39.420 --> 04:42.360
Il est pris en charge par tous les systèmes d'exploitation.

04:42.360 --> 04:45.300
Et une fois que vous avez installé Node JS, vous serez

04:45.300 --> 04:47.936
en mesure d'exécuter cette commande.

04:47.936 --> 04:51.440
Il suffit d'ouvrir votre terminal normal ou votre invite

04:51.440 --> 04:54.800
de commande, puis de copier cette commande.

04:54.800 --> 04:57.223
Important : sous Mac et Linux, il se peut que vous deviez ajouter

04:57.223 --> 04:59.412
sudo devant pour obtenir les bonnes permissions.

04:59.412 --> 05:02.810
Sous Windows, cela ne sera pas nécessaire.

05:02.810 --> 05:05.100
Il suffit donc de s'assurer que vous installez ensuite

05:05.100 --> 05:06.810
TypeScript avec cette commande.

05:06.810 --> 05:09.372
Saisissez votre mot de passe au cas où vous seriez invité à le saisir.

05:09.372 --> 05:12.176
Et avec cela, vous avez TypeScript installé globalement

05:12.176 --> 05:15.430
sur votre machine, maintenant qu'est-ce que cela signifie ?

05:15.430 --> 05:17.696
TypeScript installé.

05:17.696 --> 05:20.810
N'oubliez pas que TypeScript est un langage de programmation,

05:20.810 --> 05:22.750
mais ce n'est qu'un langage de programmation

05:22.750 --> 05:25.212
qui fonctionne parce que nous avons également ce compilateur,

05:25.212 --> 05:28.137
cet outil qui compile en JavaScript.

05:28.137 --> 05:31.310
Donc au final, ce que nous avons installé ici, c'est

05:31.310 --> 05:33.296
le compilateur et tout ce qu'il

05:33.296 --> 05:36.116
doit savoir pour comprendre le code TypeScript

05:36.116 --> 05:39.020
afin de le convertir en JavaScript.

05:39.020 --> 05:41.036
Ainsi, le compilateur est installé

05:41.036 --> 05:44.460
et nous pouvons maintenant exécuter la commande TSC

05:44.460 --> 05:47.210
qui invoque ce compilateur TypeScript pour

05:47.210 --> 05:50.870
compiler un fichier TypeScript en JavaScript.

05:50.870 --> 05:54.140
Donc pour voir cela dans le projet sur lequel nous avons travaillé, ajoutons simplement un

05:54.140 --> 05:56.563
nouveau fichier en utilisant ts. ts par exemple.

05:56.563 --> 05:58.677
Le nom que vous voulez, mais l'extension doit être . ts, qui

05:58.677 --> 06:03.677
signifie TypeScript.

06:05.100 --> 06:07.651
Maintenant, copions ce code JavaScript

06:07.651 --> 06:09.850
dans le fichier TypeScript.

06:09.850 --> 06:13.100
Ici, dans VisualStudioCode, j'obtiens immédiatement quelques erreurs que nous

06:13.100 --> 06:14.280
allons maintenant corriger.

06:14.280 --> 06:16.379
Et c'est l'un des grands avantages de TypeScript.

06:16.379 --> 06:18.915
Si vous utilisez le bon IDE, et je vous

06:18.915 --> 06:22.710
recommande vivement VisualStudioCode, sur lequel je

06:22.710 --> 06:24.420
reviendrai plus tard.

06:24.420 --> 06:27.810
Vous bénéficiez donc déjà d'une excellente prise en charge dans l'EDI lorsque

06:27.810 --> 06:30.230
vous travaillez dans des fichiers TypeScript.

06:30.230 --> 06:34.710
Ici, déjà, il laisse essentiellement TypeScript analyser mon code et identifier

06:34.710 --> 06:36.910
certaines faiblesses.

06:36.910 --> 06:39.720
Ce qui est génial, parce que c'est exactement ce que je veux.

06:39.720 --> 06:42.110
Donc ici dans cet exemple, laissez-moi supprimer

06:42.110 --> 06:44.003
le fichier JavaScript seulement JS.

06:45.952 --> 06:48.360
Et avec cela, certaines des erreurs ont disparu parce

06:48.360 --> 06:50.539
qu'il a identifié que certaines constantes et ainsi

06:50.539 --> 06:53.230
de suite étaient utilisées dans plusieurs fichiers.

06:53.230 --> 06:55.787
Mais ça me donne toujours une erreur en bas.

06:55.787 --> 06:57.700
Et ce que vous voyez, par exemple, c'est qu'il n'est

06:57.700 --> 07:00.108
pas sûr qu'il y ait vraiment une propriété de valeur.

07:00.108 --> 07:03.200
C'est une erreur que je n'avais même pas envisagée auparavant

07:03.200 --> 07:05.720
dans JavaScript, mais c'est vrai.

07:05.720 --> 07:08.350
Je sélectionne un élément par ID ici.

07:08.350 --> 07:11.680
Maintenant, TypeScript ne peut pas savoir si cela va vraiment fonctionner.

07:11.680 --> 07:13.160
J'ai peut-être une coquille ici.

07:13.160 --> 07:15.940
Dans ce cas, je ne serais pas en mesure de sélectionner un élément.

07:15.940 --> 07:17.704
Cet élément n'existerait tout simplement pas sur la page.

07:17.704 --> 07:20.164
Il se peut donc que nous ayons une faute de frappe et que TypeScript n'analyse

07:20.164 --> 07:22.472
pas votre code HTML pour savoir si cela fonctionne.

07:22.472 --> 07:24.468
Donc, pour une fois, ça pourrait échouer.

07:24.468 --> 07:28.740
Mais même si elle réussit et que nous sélectionnons un élément à cet endroit, il ne doit pas nécessairement

07:28.740 --> 07:30.910
s'agir d'un élément d'entrée.

07:30.910 --> 07:34.720
Il pourrait s'agir de n'importe quel autre élément et la plupart des éléments HTML n'ont

07:34.720 --> 07:37.450
pas de propriété de valeur à laquelle vous pouvez accéder.

07:37.450 --> 07:38.630
Et ça, c'est déjà génial.

07:38.630 --> 07:41.372
TypeScript nous oblige à être plus explicite,

07:41.372 --> 07:44.060
à être plus clair sur nos intentions et à

07:44.060 --> 07:46.130
revérifier notre code.

07:46.130 --> 07:48.100
Et par exemple ici, et vous n'avez pas besoin

07:48.100 --> 07:49.820
de comprendre toute cette syntaxe.

07:49.820 --> 07:52.172
Nous l'apprendrons étape par étape tout au long du cours.

07:52.172 --> 07:55.660
Mais par exemple ici, nous pourrions faire savoir à TypeScript

07:55.660 --> 07:58.204
que nous sommes sûrs d'obtenir un élément en ajoutant

07:58.204 --> 08:00.080
un point d'exclamation.

08:00.080 --> 08:04.170
Cela indique à TypeScript que le résultat ne sera jamais nul.

08:04.170 --> 08:06.370
Ceci trouvera toujours un élément.

08:06.370 --> 08:08.420
Et en tant que développeur, je sais bien

08:08.420 --> 08:10.350
sûr que cela va toujours trouver un élément

08:10.350 --> 08:11.920
parce que j'ai vérifié deux fois

08:11.920 --> 08:14.763
l'ID et je vois que oui, j'ai cet ID ici.

08:15.610 --> 08:17.270
Maintenant, en plus, je sais aussi

08:17.270 --> 08:19.500
que ce sera toujours un élément d'entrée.

08:19.500 --> 08:22.408
Nous pouvons donc utiliser comme élément d'entrée HTML,

08:22.408 --> 08:25.470
une syntaxe appelée typecasting que j'expliquerai également

08:25.470 --> 08:27.746
plus en détail plus tard, pour faire savoir à

08:27.746 --> 08:30.327
TypeScript quel type d'élément ce sera.

08:30.327 --> 08:32.926
Nous pouvons également appliquer ce principe au deuxième élément.

08:32.926 --> 08:35.650
Donc, juste pour être vraiment clair ici, c'est

08:35.650 --> 08:37.510
la syntaxe TypeScript.

08:37.510 --> 08:39.520
Je peux utiliser ce point d'exclamation

08:39.520 --> 08:41.600
ici et je peux utiliser ce typage ici parce

08:41.600 --> 08:44.786
que nous sommes dans une... ts, nous sommes dans un fichier TypeScript.

08:44.786 --> 08:48.380
Nous allons compiler cela en JavaScript.

08:48.380 --> 08:51.050
Cela ne fonctionnerait pas dans la version vanille de JavaScript.

08:51.050 --> 08:53.427
Ce n'est pas disponible là-bas.

08:53.427 --> 08:56.300
Cela nous oblige à être plus clairs sur nos intentions,

08:56.300 --> 08:58.460
à réfléchir à notre code et à le vérifier,

08:58.460 --> 09:01.060
ce qui est formidable.

09:01.060 --> 09:03.160
Mais ce n'est même pas le plus gros avantage.

09:04.270 --> 09:06.820
Le plus grand avantage est l'ajout de types.

09:06.820 --> 09:09.630
C'est ce qui donne son nom à TypeScript, après tout.

09:09.630 --> 09:12.282
Et ici, je ne dis rien sur les types de données sur lesquelles

09:12.282 --> 09:14.204
cette fonction opère.

09:14.204 --> 09:17.886
Si nous passons la souris sur l'un de ces paramètres, nous

09:17.886 --> 09:20.126
voyons ce quelque chose ici.

09:20.126 --> 09:22.828
Et au final, c'est TypeScript qui nous dit : "Je

09:22.828 --> 09:24.880
ne sais pas ce qu'il y a là-dedans. Il peut s'agir de n'importe quel type de valeur.

09:24.880 --> 09:27.162
Nous pouvons maintenant ajouter un type plus explicite dans les fichiers TypeScript.

09:27.162 --> 09:31.960
Donc pas dans les fichiers JavaScript mais dans les fichiers TypeScript, en ajoutant un deux-points

09:31.960 --> 09:33.806
ici et en spécifiant ensuite le type.

09:33.806 --> 09:38.580
Par exemple, le numéro.

09:38.580 --> 09:40.730
Faire ça ici et faire ça ici.

09:40.730 --> 09:43.300
Avec cette syntaxe supplémentaire que TypeScript,

09:43.300 --> 09:45.246
que ce compilateur comprend, nous

09:45.246 --> 09:47.928
disons à TypeScript que ceci sera du type nombre

09:47.928 --> 09:50.960
et ceci sera du type nombre.

09:50.960 --> 09:54.010
Et donc maintenant nous avons à nouveau une erreur ici.

09:54.010 --> 09:56.126
Et nous n'obtenons pas seulement cette

09:56.126 --> 09:58.060
erreur dans l'IDE, d'ailleurs.

09:58.060 --> 09:59.370
Nous l'obtenons également

09:59.370 --> 10:01.940
si nous essayons de compiler ce code, car c'est finalement

10:01.940 --> 10:03.820
ce que nous devons faire, non ?

10:03.820 --> 10:05.326
Maintenant pour compiler ceci, je vais ouvrir un terminal.

10:05.326 --> 10:08.670
Et là, j'ouvre simplement mon terminal ou l'invite de commande

10:08.670 --> 10:10.760
qui est intégrée dans cet IDE.

10:10.760 --> 10:13.683
C'est l'invite de commande normale du système.

10:14.947 --> 10:16.530
Le terminal de commande du système

10:16.530 --> 10:18.110
normal que j'ai utilisé ici aussi,

10:18.110 --> 10:19.533
a déjà navigué dans ce dossier.

10:20.510 --> 10:22.446
Ainsi, si vous n'utilisez pas

10:22.446 --> 10:27.420
de terminal IDE intégré, vous pouvez utiliser votre terminal habituel, mais

10:27.420 --> 10:30.265
naviguez dans le dossier de départ extrait

10:30.265 --> 10:33.960
où vous avez ajouté votre fichier TypeScript.

10:33.960 --> 10:36.300
Et une fois que vous êtes dans ce dossier, vous pouvez lancer TSC.

10:36.300 --> 10:38.888
Cela invoquera le compilateur TypeScript

10:38.888 --> 10:42.980
que nous avons installé plus tôt en utilisant dash ts. ts.

10:42.980 --> 10:47.980
Et si vous exécutez ceci, vous obtiendrez une erreur.

10:47.990 --> 10:50.728
Vous obtiendrez tout de même un fichier JavaScript,

10:50.728 --> 10:53.267
car par défaut, TypeScript le compilera en

10:53.267 --> 10:57.460
JavaScript. Vous apprendrez également comment supprimer cette fonction

10:57.460 --> 11:00.050
plus tard dans ce cours.

11:00.050 --> 11:02.900
Mais il vous donne une erreur de compilation en le faisant.

11:02.900 --> 11:05.904
Il vous indique que l'argument de type string n'est

11:05.904 --> 11:09.070
pas assignable au paramètre de type number.

11:09.070 --> 11:13.128
Le problème ici est que TypeScript comprend que ce que nous

11:13.128 --> 11:16.550
obtenons sur la propriété valeur de notre élément

11:16.550 --> 11:18.930
d'entrée sera une chaîne.

11:18.930 --> 11:23.130
Nous le voyons également ici dans l'IDE.

11:23.130 --> 11:24.786
Et on ne peut pas passer ça à add

11:24.786 --> 11:28.130
parce que là, on ne veut pas une chaîne, on veut un nombre.

11:28.130 --> 11:31.026
Nous devons donc corriger cela, par exemple en convertissant

11:31.026 --> 11:33.600
ce chiffre en un nombre ici en ajoutant un plus.

11:33.600 --> 11:36.790
Et dès que nous faisons cela, nous pouvons compiler

11:36.790 --> 11:39.708
ce code à nouveau en répétant cette commande et

11:39.708 --> 11:42.406
maintenant il compile sans erreurs.

11:42.406 --> 11:45.225
Il nous donne ça en utilisant TypeScript. JavaScript et maintenant il affiche à nouveau des

11:45.225 --> 11:49.030
erreurs parce qu'il ne comprend pas

11:49.030 --> 11:50.690
qu'il ne pourra jamais utiliser

11:50.690 --> 11:53.090
les deux fichiers en même temps.

11:54.028 --> 11:55.373
Encore une fois, c'est quelque chose qui sera amélioré

11:56.466 --> 11:58.530
plus tard dans le cours, une fois que nous l'aurons configuré.

11:58.530 --> 12:00.428
Nous pouvons ignorer cela pour le moment.

12:00.428 --> 12:01.261
Donc ça me donne ce fichier.

12:02.588 --> 12:04.348
Et si on ouvre ça, on voit quelque chose d'intéressant là-dedans.

12:04.348 --> 12:06.210
Nous voyons que là, bien sûr, nos types sont partis.

12:06.210 --> 12:08.690
Ce casting là est parti.

12:08.690 --> 12:11.280
Nous avons à nouveau du JavaScript à la vanille.

12:11.280 --> 12:13.308
Donc, si nous jetons un coup d'œil à notre fichier TypeScript

12:13.308 --> 12:16.250
ici, nous voyons que nous avons tous ces ajouts intéressants.

12:16.250 --> 12:18.786
Mais comme je l'ai mentionné, il ne s'agit que de fonctionnalités TypeScript.

12:18.786 --> 12:22.130
Lorsque vous compilez en JavaScript, ils sont utilisés pour évaluer

12:22.130 --> 12:24.600
votre code et trouver des erreurs potentielles,

12:24.600 --> 12:26.770
mais ils sont ensuite supprimés et nous obtenons

12:26.770 --> 12:29.090
du JavaScript normal en sortie.

12:29.090 --> 12:33.960
Nous pouvons maintenant aller dans notre fichier HTML d'index

12:33.960 --> 12:37.010
et l'importer à l'aide de ts. js et c'est important.

12:37.010 --> 12:41.230
Il faut toujours importer les fichiers JavaScript

12:41.230 --> 12:43.550
car le navigateur ne peut pas exécuter TypeScript.

12:43.550 --> 12:45.990
Nous devons importer le résultat de notre compilation.

12:45.990 --> 12:49.480
Et maintenant, si nous rechargeons cette page, nous avons notre

12:49.480 --> 12:52.108
code qui fonctionne parce que maintenant, nous

12:52.108 --> 12:55.750
avons un code JavaScript correct où nous avons résolu ce problème

12:55.750 --> 12:57.970
en coulant nos entrées avant de les passer

12:59.410 --> 13:01.110
à la fonction.

13:01.110 --> 13:03.010
Mais nous avons pu résoudre ces problèmes

13:03.986 --> 13:06.087
grâce à nos annotations de type ici.

13:06.087 --> 13:08.100
Et comme vous l'avez vu, nous avons dû écrire d'autres

13:08.100 --> 13:10.720
parties du code d'une manière plus propre également.

13:10.720 --> 13:13.220
Et c'est pourquoi TypeScript est étonnant.

13:13.220 --> 13:15.400
Elle nous oblige à écrire un code meilleur,

13:15.400 --> 13:17.880
plus propre et moins sujet aux erreurs.
