WEBVTT

00:02.220 --> 00:04.550
-: Ich spreche von einem Dekorator, den wir hinzufügen

00:04.550 --> 00:07.350
können, der automatisch das Schlüsselwort "this" bindet,

00:07.350 --> 00:09.930
so dass wir hier nicht bind aufrufen müssen.

00:09.930 --> 00:12.500
Offensichtlich ist der Aufruf von bind hier keine große

00:12.500 --> 00:14.160
Sache, wenn nichts falsch damit ist,

00:14.160 --> 00:16.460
aber wir wollen auch üben, was wir gelernt haben,

00:16.460 --> 00:20.220
und wenn wir dies an vielen, vielen Stellen in unserer App tun müssen, könnte

00:20.220 --> 00:22.730
ein Decorator, den wir einfach hinzufügen können,

00:22.730 --> 00:24.970
tatsächlich einfacher sein.

00:24.970 --> 00:27.100
Also, lassen Sie uns das hier loswerden.

00:27.100 --> 00:30.010
Stattdessen füge ich oberhalb der Klasse hier

00:30.010 --> 00:33.010
den Auto-Bind-Dekorator ein und füge hier noch

00:33.010 --> 00:34.920
ein paar Kommentare hinzu, um

00:34.920 --> 00:38.750
die Datei wenigstens ein bisschen zu organisieren.

00:38.750 --> 00:40.490
ProjectInput-Klasse

00:42.260 --> 00:44.790
Was ist also ein Dekorator?

00:44.790 --> 00:46.770
Ein Dekorator ist eine Funktion, richtig?

00:46.770 --> 00:48.130
Und Sie können es entweder mit

00:48.130 --> 00:51.383
der Funktionsdekoration hier oder als Funktionsausdruck finden.

00:52.490 --> 00:54.780
Hier verwende ich also eine Funktionsdekoration

00:54.780 --> 00:57.780
und nenne sie autobind, der Name ist Ihnen überlassen.

00:57.780 --> 01:01.670
Und dieser Dekorator wird freie Argumente erhalten, das Ziel, den

01:01.670 --> 01:03.173
Namen der Methode, an die

01:04.430 --> 01:06.430
er gebunden ist, denn ich werde hier

01:06.430 --> 01:09.083
einen Methodendekorator erstellen.

01:09.980 --> 01:12.960
Und auch der Deskriptor

01:12.960 --> 01:15.720
dieser Methode.

01:15.720 --> 01:18.370
Äh, Eigenschaftsdeskriptor, weil Methoden letztlich

01:18.370 --> 01:22.760
nur Eigenschaften sind, Eigenschaften, die Funktionen enthalten.

01:22.760 --> 01:24.400
Warum ist dies nun ein Methodendekorator?

01:24.400 --> 01:29.210
Denn die Idee ist, dass wir es zu submitHandler wie diese hinzufügen

01:29.210 --> 01:32.210
können, und fertig mit ihm.

01:32.210 --> 01:33.680
Das ist die Idee.

01:33.680 --> 01:35.500
Wir sind noch nicht ganz so weit, aber

01:35.500 --> 01:38.143
so sollte es letztendlich funktionieren.

01:39.090 --> 01:42.950
Damit das funktioniert, gehen wir zurück zu unserer Funktion

01:42.950 --> 01:46.880
da oben und was muss dann in den Funktionskörper?

01:46.880 --> 01:49.490
Nun, dort möchte ich zunächst einmal Zugang

01:49.490 --> 01:51.950
zur ursprünglichen Methode erhalten.

01:51.950 --> 01:56.593
Mit Deskriptor. Wert, so dass wir die Methode speichern,

01:56.593 --> 01:59.380
die wir ursprünglich definiert haben.

01:59.380 --> 02:03.540
Dann möchte ich hier meinen angepassten Deskriptor erstellen,

02:03.540 --> 02:04.873
der ein Objekt ist.

02:06.650 --> 02:11.090
Ich werde PropertyDescriptor eingeben.

02:11.090 --> 02:13.880
Wobei configurable auf true gesetzt werden sollte, so

02:13.880 --> 02:15.910
dass wir es jederzeit ändern können.

02:15.910 --> 02:17.573
Und wo wir dann einen Getter brauchen.

02:18.510 --> 02:21.770
Und in diesem Getter, hier, der ausgeführt werden soll, wenn

02:21.770 --> 02:24.270
Sie versuchen, auf die Funktion zuzugreifen.

02:24.270 --> 02:27.710
Wir werden die gebundene Funktion hier einrichten, indem wir die ursprüngliche

02:27.710 --> 02:29.220
Methode verwenden, die wir dort

02:29.220 --> 02:31.030
oben extrahieren.

02:31.030 --> 02:34.063
Und dies als bindend zu bezeichnen.

02:35.370 --> 02:36.203
Dann möchte ich

02:37.860 --> 02:40.170
diese gebundene Funktion zurückgeben, und

02:40.170 --> 02:41.603
das sollte alles sein.

02:42.510 --> 02:44.190
Und insgesamt werde ich natürlich

02:44.190 --> 02:46.620
den angepassten Deskriptor in diesem Methodendekorator

02:46.620 --> 02:48.653
zurückgeben.

02:49.510 --> 02:52.880
Jetzt erhalten wir einen Fehler mit dem submitHandler.

02:52.880 --> 02:56.020
Die experimentelle Unterstützung für Dekoratoren ist eine Funktion,

02:56.020 --> 02:57.960
die grundsätzlich aktiviert werden muss.

02:57.960 --> 03:00.400
Wir sollten also zur Datei tsconfig gehen und

03:00.400 --> 03:02.320
dort einfach nach unten scrollen.

03:02.320 --> 03:05.770
Sie sollten die Option "experimentalDecorators" finden, die Sie

03:05.770 --> 03:07.450
einfach auskommentieren.

03:07.450 --> 03:09.980
Und setzen Sie ein Komma davor.

03:09.980 --> 03:14.183
Speichern Sie diese und starten Sie den Kompilierungsprozess der Typen neu.

03:15.180 --> 03:17.700
Nun, es zeigt mir immer noch einige Fehler hier, wenn

03:17.700 --> 03:18.913
ich dies erweitern, die methodName

03:20.212 --> 03:23.170
deklariert ist, aber sein Wert wird nie gelesen.

03:23.170 --> 03:25.410
In App. ts Zeile vier.

03:25.410 --> 03:26.760
Es bezieht sich auf dieses hier,

03:26.760 --> 03:29.020
ich habe dieses Argument, das ich hier erhalten habe,

03:29.020 --> 03:30.940
das ich eigentlich nie benutzt habe.

03:30.940 --> 03:34.370
Das Gleiche gilt für Target, das habe ich nie benutzt.

03:34.370 --> 03:36.343
Nun gibt es zwei Möglichkeiten, dieses Problem zu lösen.

03:37.200 --> 03:39.610
Eine Möglichkeit besteht darin, in die tsconfig

03:39.610 --> 03:42.813
zu gehen und hier unsere strengen Regeln zu lockern.

03:44.160 --> 03:46.740
noUnusedParameters, wenn wir dies auf false setzen, lassen

03:46.740 --> 03:49.090
wir tatsächlich unbenutzte Parameter zu.

03:49.090 --> 03:50.670
Also, das wäre eine Sache,

03:50.670 --> 03:52.910
oder Sie verwenden spezielle Namen

03:52.910 --> 03:54.053
Unterstrich, und

03:55.180 --> 03:56.653
Unterstrich zwei.

03:57.770 --> 04:01.860
Dies ist eigentlich ein Hinweis für Typescript und Javascript, dass Sie sich bewusst

04:01.860 --> 04:03.130
sind, dass Sie diese Werte

04:03.130 --> 04:04.800
nicht verwenden werden, aber Sie müssen

04:04.800 --> 04:05.930
sie akzeptieren, weil Sie

04:05.930 --> 04:08.740
das Argument brauchen, nach dem sie suchen.

04:08.740 --> 04:11.810
Wenn Sie dies nun speichern, wird es ohne Fehler kompiliert,

04:11.810 --> 04:14.700
und wenn wir zurückgehen und hier "Hallo" eingeben

04:14.700 --> 04:17.040
und dies abschicken, funktioniert es dank

04:17.040 --> 04:20.060
unseres Auto-Bind-Dekorators immer noch.

04:20.060 --> 04:23.120
Das zeigt hoffentlich auch, dass dieser Dekorateur

04:23.120 --> 04:24.950
wirklich nützlich sein kann.

04:24.950 --> 04:27.530
Das ist natürlich ein bisschen mehr Arbeit,

04:27.530 --> 04:29.510
als nur bind aufzurufen.

04:29.510 --> 04:32.120
Aber stellen Sie sich vor, dass dies auf immer mehr Methoden angewendet

04:32.120 --> 04:33.820
wird, die alle gebunden werden müssen.

04:33.820 --> 04:36.140
Dadurch, dass Sie die Bindung nicht manuell aufrufen

04:36.140 --> 04:38.140
müssen, können Sie wieder etwas Zeit sparen

04:38.140 --> 04:40.430
und auch einige potenzielle Fehler vermeiden, wenn

04:40.430 --> 04:42.343
Sie es einfach vergessen haben.
