WEBVTT

00:02.390 --> 00:04.530
Instructor: Ahora es posible enviar

00:04.530 --> 00:06.890
solicitudes sin un paquete de terceros.

00:06.890 --> 00:10.140
En el JavaScript moderno, en los navegadores modernos,

00:10.140 --> 00:11.910
hay que buscar la API.

00:11.910 --> 00:13.620
Esto está incorporado en los navegadores,

00:13.620 --> 00:16.710
es una función disponible globalmente y puedes usarla

00:16.710 --> 00:19.600
para enviar peticiones a las URLs.

00:19.600 --> 00:22.450
Ahora no hay nada que hable en contra de esta API,

00:22.450 --> 00:24.870
además del hecho de que el manejo de errores

00:24.870 --> 00:27.210
puede ser un poco torpe con ella.

00:27.210 --> 00:29.250
Pero también quiero practicar el uso

00:29.250 --> 00:31.123
de bibliotecas de terceros.

00:31.960 --> 00:36.070
Por lo tanto, utilizaremos el popular paquete axios.

00:36.070 --> 00:38.510
Se trata de un paquete que puedes utilizar

00:38.510 --> 00:43.510
en JavaScript y, por tanto, también en TypeScript para enviar peticiones HTTP.

00:43.880 --> 00:47.263
Así que sólo tenemos que instalar axios para empezar a usarlo.

00:48.100 --> 00:51.080
Para esto en nuestro proyecto donde podemos

00:51.080 --> 00:54.150
usar NPM para gestionar las dependencias, podemos

00:54.150 --> 00:57.620
ejecutar npm install, dash, dash save axios así y esto

00:57.620 --> 01:00.520
instalará ahora el paquete axios.

01:00.520 --> 01:04.750
Con esto instalado, ahora podemos importar axios aquí,

01:04.750 --> 01:07.390
importar axios desde axios, y verás

01:07.390 --> 01:09.170
algo interesante.

01:09.170 --> 01:12.090
Si ahora empiezo a usar esto y escribo un punto aquí,

01:12.090 --> 01:13.990
obtengo el autocompletado.

01:13.990 --> 01:16.290
Y por ejemplo, tienes un método get aquí

01:16.290 --> 01:18.523
que enviará una petición get a una URL.

01:19.850 --> 01:23.150
Así que aquí tenemos soporte incorporado para TypeScript.

01:23.150 --> 01:25.640
Y si vamos a los módulos del nodo

01:25.640 --> 01:29.670
y echamos un vistazo al paquete axios, aquí está.

01:29.670 --> 01:33.970
Verás que ahí dentro hay un índice. archivo dts.

01:33.970 --> 01:38.970
Por lo tanto, los autores de la biblioteca axios ya han incluido su biblioteca

01:39.430 --> 01:43.750
junto con un paquete de traducción de TypeScript.

01:43.750 --> 01:47.440
Allí se explica todo a TypeScript.

01:47.440 --> 01:50.120
Este paquete o este archivo aquí básicamente explica

01:50.120 --> 01:53.660
a TypeScript lo que esta biblioteca JavaScript es capaz de hacer

01:53.660 --> 01:55.600
y qué tipos utiliza.

01:55.600 --> 01:59.100
Ahora algunas bibliotecas lo hacen y axios es una de ellas.

01:59.100 --> 02:02.070
Si empiezas a utilizar una biblioteca, te darás cuenta rápidamente

02:02.070 --> 02:03.420
de si lo hace o no.

02:03.420 --> 02:05.520
Si no tienes soporte de autocompletado

02:05.520 --> 02:07.930
y tienes muchos errores de compilación, probablemente

02:07.930 --> 02:10.750
necesites instalar tipos adicionales.

02:10.750 --> 02:12.970
Si tienes un buen soporte como el que tenemos

02:12.970 --> 02:16.120
aquí y no obtienes errores de compilación a partir de entonces,

02:16.120 --> 02:18.140
entonces ya tienes una biblioteca con traducciones

02:18.140 --> 02:20.170
de tipos incorporadas.

02:20.170 --> 02:23.120
Y por lo tanto, no necesita instalar ningún tipo adicional.

02:23.120 --> 02:26.240
Es bueno saberlo y aquí tenemos un gran ejemplo.

02:26.240 --> 02:27.800
Así que, como tenemos soporte incorporado,

02:27.800 --> 02:30.410
podemos empezar a utilizar el acceso de inmediato.

02:30.410 --> 02:34.350
Y ahora quiero enviar una petición HTTP a esta URL.

02:34.350 --> 02:37.980
Así que copiemos esta URL e introduzcámosla aquí.

02:37.980 --> 02:40.220
Y lo introduciré entre signos de retroceso

02:40.220 --> 02:42.440
para crear un literal de plantilla, de

02:42.440 --> 02:45.880
modo que puedan intercambiar fácilmente partes de esta

02:45.880 --> 02:49.050
cadena por dinámicas para otros valores.

02:49.050 --> 02:51.730
Así que vamos a pegar esa cadena, es bastante larga

02:51.730 --> 02:55.460
y vamos a empezar reemplazando su clave de API al final con nuestra

02:55.460 --> 02:59.210
clave de API de Google que almacenamos en esta constante.

02:59.210 --> 03:01.690
Para ello, dado que se trata de un literal de

03:01.690 --> 03:04.110
plantilla, podemos añadir el signo de dólar,

03:04.110 --> 03:09.110
llaves y luego apuntar a la clave de la API de Google para utilizar esta constante.

03:10.820 --> 03:13.240
Además, vamos a intercambiar esta dirección.

03:13.240 --> 03:15.500
Aquí tenemos una dirección ficticia introducida

03:15.500 --> 03:17.130
y por supuesto ahí quiero usar la

03:17.130 --> 03:19.300
dirección que el usuario introdujo.

03:19.300 --> 03:22.540
Ahora sólo una nota importante, esta dirección, por supuesto,

03:22.540 --> 03:24.910
es exactamente el texto que el usuario introdujo

03:24.910 --> 03:27.560
y que ofreció puede contener caracteres especiales,

03:27.560 --> 03:30.650
espacios en blanco, comas, y mucho más.

03:30.650 --> 03:32.250
Y no todos estos caracteres

03:32.250 --> 03:35.580
y símbolos son compatibles con las URL.

03:35.580 --> 03:37.750
Así que tenemos que convertir esta cadena

03:37.750 --> 03:40.550
introducida en una cadena compatible con la URL.

03:40.550 --> 03:43.810
Y por suerte, TypeScript y JavaScript específicamente

03:43.810 --> 03:46.940
tiene una función incorporada que nos ayuda

03:46.940 --> 03:50.460
con eso, la función encode URI.

03:50.460 --> 03:53.020
Podemos llamarlo y pasarle una cadena

03:53.020 --> 03:54.770
y esto convertirá esta cadena

03:54.770 --> 03:57.460
en una cadena compatible con la URL.

03:57.460 --> 03:59.845
Con esto tenemos la URL terminada a

03:59.845 --> 04:01.600
la que podemos enviar la petición

04:01.600 --> 04:04.900
para recuperar nuestras coordenadas.

04:04.900 --> 04:07.390
Ahora get nos da una promesa porque, por supuesto,

04:07.390 --> 04:10.620
el envío de dicha solicitud como una tarea asíncrona.

04:10.620 --> 04:13.430
Y ahí tenemos un registro entonces si esto tiene

04:13.430 --> 04:15.690
éxito o captura si tenemos un error técnico

04:15.690 --> 04:18.620
o un código de respuesta de error.

04:18.620 --> 04:21.560
Así que aquí registraremos por consola cualquier error que podamos

04:21.560 --> 04:24.710
obtener en este punto, porque normalmente deberíamos tener éxito.

04:24.710 --> 04:27.820
Y por lo tanto aquí, voy a esperar mi respuesta en el

04:27.820 --> 04:32.400
bloque de entonces y también quiero registrar esta respuesta entonces.

04:32.400 --> 04:35.820
Así que ahora con eso, yo diría, vamos a ver lo que nos da esto.

04:35.820 --> 04:39.720
Volvamos a ejecutar NPM start para que aparezca el proceso de webpack de nuevo y empecemos

04:39.720 --> 04:40.953
a construir esto.

04:42.120 --> 04:43.790
Y volvamos a nuestra aplicación

04:43.790 --> 04:47.220
y entremos en un lugar como la Sexta Avenida.

04:47.220 --> 04:50.090
Si le doy a Buscar Dirección, verás que después de un rato

04:50.090 --> 04:51.480
te sale una salida aquí.

04:51.480 --> 04:53.660
Y ahí deberías tener un código de estado de

04:53.660 --> 04:56.120
200 que significa que la solicitud tuvo éxito.

04:56.120 --> 04:59.090
Y tienes un campo de datos que contiene los datos

04:59.090 --> 05:01.240
con los que responde el servidor.

05:01.240 --> 05:03.890
Ese campo de datos tiene un campo de resultados

05:03.890 --> 05:06.570
y ahí tenemos un array, como puedes ver.

05:06.570 --> 05:10.690
En esa matriz, tenemos un par de elementos, el número varía.

05:10.690 --> 05:13.770
Y estos son básicamente los resultados que encontró Google.

05:13.770 --> 05:16.740
Y el primer resultado suele ser el mejor.

05:16.740 --> 05:18.790
Así que si echas un vistazo a eso, vemos por ejemplo,

05:18.790 --> 05:20.460
la dirección formateada.

05:20.460 --> 05:22.520
Así que la dirección que Google ha encontrado para

05:22.520 --> 05:23.790
esta dirección que hemos introducido,

05:23.790 --> 05:26.570
es un poco más completa que la que hemos introducido.

05:26.570 --> 05:29.300
Y aquí tenemos la clave de la geometría.

05:29.300 --> 05:31.880
Y si ampliamos esto, vemos que a su vez tiene

05:31.880 --> 05:35.240
una clave de localización y ésta finalmente es un objeto

05:35.240 --> 05:37.540
con las coordenadas que nos interesan,

05:37.540 --> 05:39.700
una latitud y una longitud.

05:39.700 --> 05:43.000
Así que al final, tenemos que perforar en los datos, los resultados

05:43.000 --> 05:47.390
y luego allí el primer resultado, la geometría, la ubicación y vamos a tener un

05:47.390 --> 05:50.030
objeto con una latitud y longitud.

05:50.030 --> 05:52.840
Y luego podremos representar esta latitud

05:52.840 --> 05:55.240
y longitud en un mapa.

05:55.240 --> 05:57.430
Así que por ahora, vamos a extraer

05:57.430 --> 05:59.360
esto y vamos a obtener nuestras

05:59.360 --> 06:04.360
coordenadas accediendo a los resultados de los puntos de respuesta.

06:04.600 --> 06:09.600
Y luego allí el primer resultado punto geometría ubicación, por lo que realmente

06:11.200 --> 06:13.093
la perforación en este.

06:15.130 --> 06:16.880
Ahora lo que notarás, por supuesto,

06:16.880 --> 06:19.850
es que mientras TypeScript no se queja aquí, tampoco

06:19.850 --> 06:23.280
tenemos un buen soporte para TypeScript, ¿verdad?

06:23.280 --> 06:25.740
Si escribo un punto aquí, no está sugiriendo que

06:25.740 --> 06:27.620
haya una propiedad de resultados.

06:27.620 --> 06:30.350
Y efectivamente, podría intentar acceder a cualquier

06:30.350 --> 06:33.840
cosa aquí, incluso a algo que no existe en la respuesta y eso tiene

06:33.840 --> 06:34.820
sentido.

06:34.820 --> 06:38.010
¿Cómo podría TypeScript saber qué habrá en la respuesta de

06:38.010 --> 06:40.920
cualquier URL a la que esté enviando una petición?

06:40.920 --> 06:42.810
TypeScript no se adelanta y

06:42.810 --> 06:44.970
envía la petición durante el desarrollo

06:44.970 --> 06:46.510
para saber qué hay ahí,

06:46.510 --> 06:49.170
eso tampoco sería tan bueno.

06:49.170 --> 06:51.400
Pero podemos decirle a TypeScript lo

06:51.400 --> 06:53.950
que esperamos que haya en la respuesta porque

06:53.950 --> 06:58.950
este método get en realidad es un método genérico y hay cualquier cosa aquí, que es en

06:59.040 --> 07:02.830
realidad el tipo de la respuesta que esperamos obtener.

07:02.830 --> 07:06.880
Así que aquí, puedo añadir mi tipo de respuesta y puedo

07:06.880 --> 07:11.270
decirle a TypeScript que lo que espero es un objeto que tiene

07:11.270 --> 07:15.260
una clave de resultados, que luego, a su vez, es una matriz

07:15.260 --> 07:18.330
llena de objetos, donde cada objeto tiene

07:18.330 --> 07:22.170
una clave de geometría, que luego, a su vez, es un objeto,

07:22.170 --> 07:24.330
que tiene una clave de ubicación,

07:24.330 --> 07:28.160
que luego, a su vez, es un objeto, que tiene una latitud,

07:28.160 --> 07:31.170
que es un número, y una longitud, que es un

07:31.170 --> 07:33.510
número.

07:33.510 --> 07:36.030
Así que definitivamente es un tipo bastante complejo.

07:36.030 --> 07:39.400
Pero con eso, si escribimos un punto aquí, obtengo el autocompletado

07:39.400 --> 07:42.220
y TypeScript entiende lo que estoy accediendo aquí.

07:42.220 --> 07:44.860
Y por supuesto, también podemos sacar este tipo de aquí y

07:44.860 --> 07:46.620
crear nuestro propio alias de tipo.

07:46.620 --> 07:50.497
Tal vez aquí, la respuesta de geocodificación de Google.

07:53.220 --> 07:55.380
Ese sería mi tipo personalizado aquí,

07:55.380 --> 07:58.420
y entonces puedo decirle a TypeScript que aquí espero

07:58.420 --> 08:01.540
obtener esa respuesta de geocodificación de Google.

08:01.540 --> 08:03.900
Ahora, por supuesto, en realidad la respuesta contiene

08:03.900 --> 08:07.020
más que la matriz de resultados, también tiene un código de estado

08:07.020 --> 08:09.460
y también tiene otros múltiples campos en cada elemento

08:09.460 --> 08:13.040
de la matriz de resultados, entonces la geometría.

08:13.040 --> 08:17.030
Ahora, por supuesto, usted puede simplemente añadir todos estos campos

08:18.210 --> 08:21.330
a su tipo personalizado aquí, pero aquí realmente sólo

08:21.330 --> 08:25.640
quiero centrarse en los valores que estoy activamente interesado en.

08:25.640 --> 08:27.360
Y, por lo tanto, hay en realidad otro

08:27.360 --> 08:30.900
campo que voy a añadir, y es el estado junto a los resultados.

08:30.900 --> 08:34.520
Así que aquí en el nivel superior, tenemos el estado y

08:34.520 --> 08:35.500
que será una cadena

08:35.500 --> 08:38.390
que nos dice si Google tuvo éxito o no.

08:38.390 --> 08:41.810
Y el estado será realmente bien o un

08:41.810 --> 08:44.010
par de otros valores.

08:44.010 --> 08:46.910
Se trata básicamente de un mensaje de estado con el que Google

08:46.910 --> 08:50.020
responde para indicarnos si ha conseguido obtener las coordenadas

08:50.020 --> 08:51.890
de esta dirección o no.

08:51.890 --> 08:54.000
Y, por supuesto, en los documentos oficiales

08:54.000 --> 08:57.280
podemos saber qué tipo de respuestas podemos obtener aquí.

08:57.280 --> 08:58.900
Si te desplazas un poco hacia abajo

08:58.900 --> 09:01.070
y haces clic en entender la respuesta, te enteras

09:01.070 --> 09:04.240
de lo que hay dentro de la respuesta que te devuelven y, por tanto,

09:04.240 --> 09:07.000
haces clic en geocodificar las respuestas.

09:07.000 --> 09:08.580
Y luego, en los códigos de estado,

09:08.580 --> 09:11.090
nos enteramos de los códigos de estado disponibles.

09:11.090 --> 09:15.090
Por ejemplo, todos obtuvimos cero resultados si no se encontró nada.

09:15.090 --> 09:16.850
También tenemos un par de códigos

09:16.850 --> 09:19.223
más, pero aquí sólo me importan estos dos.

09:20.200 --> 09:23.310
Así que le digo a TypeScript que aquí, obtengo un código de estado

09:23.310 --> 09:24.890
que es uno de estos dos valores.

09:24.890 --> 09:27.480
Ahora, de nuevo, podría tener un valor numérico

09:27.480 --> 09:29.830
también, pero esto es bueno para mí aquí.

09:29.830 --> 09:31.640
Como he dicho, por supuesto que se puede

09:31.640 --> 09:33.700
escribir esto de una manera más completa.

09:33.700 --> 09:36.230
Ahora con eso añadido, ahí abajo en el bloque then,

09:36.230 --> 09:41.230
podemos comprobar si response dot data dot status no está bien, lo que significa que algo ha ido

09:41.580 --> 09:44.120
mal y en ese caso, podemos lanzar un error aquí y por

09:44.120 --> 09:46.710
lo tanto terminaremos en el bloque catch donde podríamos

09:46.710 --> 09:48.090
establecer algún manejo de

09:48.090 --> 09:49.810
errores.

09:49.810 --> 09:54.280
Así que aquí lanzaremos un error "could not fetch location".

09:54.280 --> 09:57.080
Y luego aquí en el manejador de error para hacer algo,

09:57.080 --> 09:59.150
podemos lanzar una alerta donde la salida

09:59.150 --> 10:01.230
del mensaje de error por lo menos.

10:01.230 --> 10:04.660
Esto es, por supuesto, sólo un manejo de errores muy básico.

10:04.660 --> 10:06.950
De lo contrario, si tenemos una respuesta exitosa,

10:06.950 --> 10:09.910
obtenemos nuestras coordenadas aquí y ahora podemos utilizar estas

10:09.910 --> 10:12.113
coordenadas para mostrarlas en un mapa.
