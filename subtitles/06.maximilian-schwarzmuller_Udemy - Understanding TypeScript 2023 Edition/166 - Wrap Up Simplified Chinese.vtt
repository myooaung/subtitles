WEBVTT

00:02.150 --> 00:05.480
解说员：这就是本模块的内容｡ 

00:05.480 --> 00:10.130
显然, 有大量的第三方库可以使用｡

00:10.130 --> 00:15.806
您可以在类验证器和类转换器包中探索更多内容｡

00:15.806 --> 00:21.410
但是这里的想法并不是要深入研究这些软件包的所有特性｡

00:21.410 --> 00:24.300
我宁愿让你自己去探索｡ 

00:24.300 --> 00:27.983
这个想法是让你对两件重要的事情有一种感觉：第一件事是,

00:27.983 --> 00:36.719
通过TypeScript, 您可以毫无问题地使用像Lodash这样的常规JavaScript包｡

00:36.719 --> 00:39.350
你可能会得到错误的最初, 请记住,

00:39.350 --> 00:41.767
技术上它的工作虽然｡

00:41.767 --> 00:45.244
但是, 您也可以通过导入正确的类型来解决这些编译错误,

00:45.244 --> 00:51.500
最终将JavaScript正确转换为TypeScript｡

00:51.500 --> 00:54.590
所有主流和流行的JavaScript库都有这样的翻译包,

00:54.590 --> 00:59.180
甚至很多小型JavaScript库也有｡

00:59.180 --> 01:02.221
您还可能使用JavaScript库,

01:02.221 --> 01:07.110
其中包含这些翻译文件, 这些DTS文件已经内置｡

01:07.110 --> 01:10.713
当然, 您不需要安装这样的翻译之后.

01:11.550 --> 01:14.350
好吧, 除了这些Vanilla的工作, 库可能需要翻译,

01:14.350 --> 01:17.094
你也可能有像Class Transformer这样的库,

01:17.094 --> 01:20.610
它在Vanilla JavaScript中工作得很好,

01:20.610 --> 01:31.400
在现代的Vanilla JavaScript中, 至少你也有类, 但它所有的工作, 没有任何额外的翻译和TypeScript项目｡

01:31.400 --> 01:34.960
然后我们有类验证器之类的包｡ 

01:34.960 --> 01:38.440
它们真正包含了TypeScript特有的功能,

01:38.440 --> 01:44.840
并为您提供了一种全新的方式来思考您的项目和解决某些问题｡

01:44.840 --> 01:47.603
在这个例子中, 通过使用装饰器｡ 

01:48.680 --> 01:51.080
了解所有这些事情是超级重要的,

01:51.080 --> 01:55.253
并给你所有的灵活性, 你需要为您的未来项目｡
