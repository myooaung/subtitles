WEBVTT

00:02.802 --> 00:04.030
Instructeur: Nu we klassen hebben

00:04.030 --> 00:05.910
behandeld, laten we eens kijken naar interfaces.

00:05.910 --> 00:09.510
We gaan het app ts bestand hernoemen naar classes en een nieuw app

00:09.510 --> 00:11.230
ts bestand toevoegen, terwijl

00:11.230 --> 00:13.730
hierna wordt gecompileerd naar app js.

00:13.730 --> 00:15.130
En in dit app ts bestand

00:15.130 --> 00:17.026
duiken we nu in interfaces.

00:17.026 --> 00:19.850
Wat is een interface?

00:19.850 --> 00:21.640
Welnu, in zijn eenvoudigste versie

00:21.640 --> 00:25.470
beschrijft een interface de structuur van een object.

00:25.470 --> 00:28.502
We kunnen het gebruiken om te beschrijven hoe een object eruit moet zien.

00:28.502 --> 00:29.856
Ik zal je een voorbeeld laten zien.

00:29.856 --> 00:32.990
We maken een interface met het interface keyword,

00:32.990 --> 00:37.510
dat alleen bestaat in typescript, niet in vanilla JavaScript.

00:37.510 --> 00:39.600
Laten we het nu persoon noemen.

00:39.600 --> 00:41.140
Nogmaals, net als in een

00:41.140 --> 00:43.150
les, begin ik met een hoofdletter,

00:43.150 --> 00:46.820
geen must do maar een aanbeveling en een conventie.

00:46.820 --> 00:47.910
Daarin kunnen we definiëren

00:47.910 --> 00:51.160
hoe een persoonsobject eruit moet zien.

00:51.160 --> 00:52.480
Maar in tegenstelling tot een

00:52.480 --> 00:54.930
klasse, gebruiken we dit niet als blauwdruk.

00:54.930 --> 00:57.543
Gewoon als een aangepast type, zouden we kunnen zeggen.

00:58.490 --> 01:00.690
Hier zou je kunnen zeggen dat een persoon een naam

01:00.690 --> 01:01.860
kan hebben, die van het type

01:01.860 --> 01:04.300
string is, en een leeftijd die van het type nummer is.

01:04.300 --> 01:05.140
Zoals u hier kunt

01:05.140 --> 01:08.020
zien, voeg ik eigenschappen of velddefinities toe, waarbij

01:08.020 --> 01:09.970
ik de namen van de eigenschappen en de

01:09.970 --> 01:13.440
types van de waarden die daarin zullen worden opgeslagen.

01:13.440 --> 01:16.560
Wat we hier niet hebben zijn de concrete waarden.

01:16.560 --> 01:17.730
Dus we hebben dit niet.

01:17.730 --> 01:20.510
En als we hier een standaardwaarde zouden proberen toe te

01:20.510 --> 01:21.810
wijzen, zouden we een foutmelding

01:21.810 --> 01:25.290
krijgen dat een interface geen initialisator kan hebben.

01:25.290 --> 01:27.540
We kunnen dus alleen de structuur definiëren,

01:27.540 --> 01:29.610
niet de concrete waarden.

01:29.610 --> 01:32.930
We kunnen hier ook een methode toevoegen, groet bijvoorbeeld.

01:32.930 --> 01:34.470
Net als bij eigenschappen

01:34.470 --> 01:37.440
voegen we hier echter niet de eigenlijke methode toe,

01:37.440 --> 01:39.610
maar alleen de structuur, de beschrijving

01:39.610 --> 01:41.020
zogezegd.

01:41.020 --> 01:42.670
Hoe het eruit moet zien.

01:42.670 --> 01:46.600
En om een methode te definiëren die een persoonsobject zou moeten hebben,

01:46.600 --> 01:49.470
voegen we de naam van de methode toe, dan haakjes, dan

01:49.470 --> 01:50.920
retourneertype.

01:50.920 --> 01:52.210
Bijvoorbeeld, wit, en tussen

01:52.210 --> 01:53.260
haakjes kun je alle argumenten

01:53.260 --> 01:55.310
hebben die je wilt.

01:55.310 --> 01:57.740
Zoals een zin die een type zou moeten zijn.

01:57.740 --> 02:01.920
Nogmaals, alleen de naam van het argument en dan het type.

02:01.920 --> 02:03.610
Dan het terugkeertype van de methode.

02:03.610 --> 02:06.450
Je hoeft natuurlijk geen parameters toe te voegen.

02:06.450 --> 02:09.080
Wat kunnen we nu doen met deze persoon interface?

02:09.080 --> 02:11.360
Wat is het idee erachter?

02:11.360 --> 02:12.610
We kunnen dit nu gebruiken

02:12.610 --> 02:14.810
om bijvoorbeeld een object te controleren.

02:14.810 --> 02:18.020
We kunnen een variabele hebben, gebruiker één, en

02:18.020 --> 02:19.130
laten we zeggen dat

02:19.130 --> 02:22.620
we om een of andere reden niet meteen initialiseren.

02:22.620 --> 02:25.660
We willen er uiteindelijk een object in

02:25.660 --> 02:28.490
opslaan, dat deze structuur heeft.

02:28.490 --> 02:30.710
Dan kunnen we aan gebruiker één een type toekennen, dat

02:30.710 --> 02:31.830
persoon zou kunnen zijn.

02:31.830 --> 02:34.604
We kunnen onze interface als type gebruiken.

02:34.604 --> 02:38.410
En als ik nu een waarde toeken aan gebruiker één, moet het een object

02:38.410 --> 02:39.730
zijn, omdat interfaces

02:39.730 --> 02:42.780
worden gebruikt om objecten te definiëren.

02:42.780 --> 02:45.560
En het moet een object zijn met een name property,

02:45.560 --> 02:47.190
die een string moet bevatten,

02:47.190 --> 02:49.850
een age property, die een getal moet bevatten,

02:49.850 --> 02:53.102
en een greet method die een phrase argument moet aannemen

02:53.102 --> 02:56.920
en dan ook niets moet teruggeven.

02:56.920 --> 02:57.830
Hier in dit object

02:57.830 --> 02:59.360
kunnen we een naam toevoegen.

02:59.360 --> 03:00.730
Max, bijvoorbeeld.

03:00.730 --> 03:03.010
Nu voegen we de concrete waarde toe en

03:03.010 --> 03:06.310
die moet van het daarboven gedefinieerde type zijn.

03:06.310 --> 03:08.160
Nu gescheiden door een komma, en

03:08.160 --> 03:11.110
dat is een verschil met onze interface definitie.

03:11.110 --> 03:16.110
Daar scheiden we onze sleutels en eigenschappen met puntkomma's.

03:16.470 --> 03:18.430
Maar daar beneden, als we ons object maken,

03:18.430 --> 03:21.390
gebruiken we net als in vanille JavaScript een komma.

03:21.390 --> 03:25.570
Dan een leeftijd, en natuurlijk ook de begroetingsmethode.

03:25.570 --> 03:27.550
Nu moet de groet-methode, zoals

03:27.550 --> 03:32.020
je geleerd hebt, een methode zijn die één parameter neemt, phrase,

03:32.020 --> 03:33.790
die een string moet zijn, en

03:33.790 --> 03:36.134
waar ik dan console log phrase plus

03:36.134 --> 03:41.134
wat witruimte plus dit. naam.

03:41.210 --> 03:43.930
Dit zou één uitvoering van de groet-methode kunnen zijn.

03:43.930 --> 03:45.670
Het maakt niet uit wat er in zit.

03:45.670 --> 03:48.210
Het is alleen belangrijk dat we die ene parameter

03:48.210 --> 03:49.270
hebben, een string,

03:49.270 --> 03:51.290
en dat we niets teruggeven.

03:51.290 --> 03:54.090
Nu zou dit een geldig user one object zijn,

03:54.090 --> 03:58.150
omdat het voldoet aan deze definitie van onze interface.

03:58.150 --> 03:59.040
Daarom kunnen

03:59.040 --> 04:00.940
we nu natuurlijk bijvoorbeeld

04:00.940 --> 04:04.020
groeten en zeggen hoi daar ben ik, en daarna moeten

04:04.020 --> 04:06.220
we naam afdrukken.

04:06.220 --> 04:08.300
Als we dat nu opslaan en dan opnieuw

04:08.300 --> 04:10.330
laden, zien we hoi daar ben ik Max.

04:10.330 --> 04:12.840
En dat komt van onze begroetingsmethode.

04:12.840 --> 04:14.090
Dit is een interface.

04:14.090 --> 04:18.280
Hiermee kunnen we de structuur van een object definiëren.

04:18.280 --> 04:21.140
We kunnen het gebruiken als een type-controle

04:21.140 --> 04:24.453
voor objecten die deze structuur moeten hebben.
