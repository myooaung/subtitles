WEBVTT

00:02.251 --> 00:03.380
Instructor: Ein weiteres

00:03.380 --> 00:05.350
nettes Feature im Zusammenhang mit Eigenschaften

00:05.350 --> 00:08.000
und Methoden, die es auch in JavaScript gibt, wenn Sie

00:08.000 --> 00:11.180
ES6 oder später verwenden, aber alle Typskripte sind statische

00:11.180 --> 00:14.010
Eigenschaften und Methoden.

00:14.010 --> 00:17.520
Mit statischen Eigenschaften und Methoden können Sie Klassen Eigenschaften

00:17.520 --> 00:20.620
und Methoden hinzufügen, auf die nicht über eine Instanz der

00:20.620 --> 00:22.530
Klasse zugegriffen wird, auf die Sie

00:22.530 --> 00:26.080
also nicht erst den neuen Klassennamen aufrufen müssen, sondern auf

00:26.080 --> 00:28.950
die Sie direkt über die Klasse zugreifen.

00:28.950 --> 00:31.350
Dies wird häufig für Hilfsfunktionen verwendet,

00:31.350 --> 00:35.922
die Sie gruppieren oder logisch einer Klasse zuordnen möchten, oder für globale

00:35.922 --> 00:40.860
Konstanten, die Sie ebenfalls in einer Klasse speichern möchten.

00:40.860 --> 00:43.270
Ein Beispiel, das in JavaScript eingebaut

00:43.270 --> 00:46.050
ist, das nicht von typescript und nicht von Ihnen

00:46.050 --> 00:48.290
definiert wird, aber Teil von JavaScript

00:48.290 --> 00:51.170
im Browser ist, ist die Math-Konstruktorfunktion

00:51.170 --> 00:53.220
oder Klasse, wenn Sie es so nennen

00:53.220 --> 00:55.500
wollen, die global in JavaScript verfügbar

00:55.500 --> 00:59.210
ist, wo Sie auf pi als konstanten Wert zugreifen können, um die

00:59.210 --> 01:01.400
Zahl pi zu erhalten, oder Funktionen

01:01.400 --> 01:05.050
oder Methoden, um genau zu sein, wie pow, um die Potenz von etwas

01:05.050 --> 01:08.610
zu berechnen.

01:08.610 --> 01:10.530
Dies sind Methoden und Eigenschaften, auf

01:10.530 --> 01:13.370
die Sie in der Instanz von Math nicht zugreifen können.

01:13.370 --> 01:16.310
Sie müssen nicht erst neue Matheaufgaben stellen.

01:16.310 --> 01:19.830
Das funktioniert zwar nicht, aber Sie greifen auf diese Eigenschaften

01:19.830 --> 01:22.360
in Methoden direkt in der Klasse selbst zu.

01:22.360 --> 01:25.340
Math fungiert hier also eher wie ein Namensraum als Gruppierungsmechanismus,

01:25.340 --> 01:27.370
und das ist ein üblicher Anwendungsfall

01:27.370 --> 01:28.640
für statische Methoden und

01:28.640 --> 01:30.480
Eigenschaften, und Sie können sie auch

01:30.480 --> 01:33.650
Ihren eigenen Klassen hinzufügen.

01:33.650 --> 01:36.770
Nehmen wir an, wir möchten in der Abteilung eine Methode haben,

01:36.770 --> 01:40.050
die uns hilft, Mitarbeiter zu erstellen, und das ist etwas, auf

01:40.050 --> 01:43.450
das wir zugreifen können möchten, ohne die Abteilung zu instanziieren,

01:43.450 --> 01:45.390
denn wir instanziieren typischerweise

01:45.390 --> 01:46.890
unsere spezielleren Versionen,

01:46.890 --> 01:51.290
die IT-Abteilung und die Buchhaltungsabteilung, und wir möchten die Abteilung

01:51.290 --> 01:58.490
nicht wirklich instanziieren, nur um eine Hilfsmethode aufzurufen, und deshalb können wir hier eine Methode hinzufügen, sagen wir,

01:58.490 --> 02:03.490
create Employee, wo wir den Namen erhalten möchten, der ein String als Argument ist, und dort

02:03.680 --> 02:07.621
möchten wir etwas zurückgeben.

02:07.621 --> 02:10.230
Um diese Methode zu einer statischen Methode

02:10.230 --> 02:12.920
zu machen, auf die wir zugreifen können, ohne die

02:12.920 --> 02:16.250
Klasse zu instanziieren, fügen wir das Schlüsselwort static

02:16.250 --> 02:18.549
vor der Methode ein und geben ein Objekt

02:18.549 --> 02:23.549
zurück, bei dem wir die Eigenschaft name auf den Wert name abgebildet haben.

02:25.170 --> 02:27.010
Das ist natürlich eine sehr einfache Methode,

02:27.010 --> 02:28.690
aber Sie verstehen die Idee.

02:28.690 --> 02:31.960
Um das zu nutzen, könnten wir dort unten unseren

02:31.960 --> 02:33.490
Code ausführen und einen

02:33.490 --> 02:36.940
neuen Mitarbeiter, employee1, anlegen.

02:39.300 --> 02:41.020
Nun, dann können wir das einfach

02:41.020 --> 02:46.020
mit dem Ministerium klären. createEmployee und übergebe zum Beispiel

02:46.920 --> 02:50.680
Max und wenn ich dann console. log(employee1) sollten wir

02:50.680 --> 02:53.170
ein Objekt mit dem Namen Max sehen.

02:53.170 --> 02:55.630
Wenn ich das also speichere, ist das hier der

02:55.630 --> 02:58.240
Mitarbeiter, den wir gerade erstellt haben.

02:58.240 --> 03:01.200
Dies wäre also ein typisches Beispiel für eine statische Methode.

03:01.200 --> 03:04.870
Wir rufen es direkt in der Klasse auf, ohne das Schlüsselwort new, und

03:04.870 --> 03:06.360
verwenden die Klasse sozusagen

03:06.360 --> 03:09.030
als Gruppierungsmechanismus, und wenn Sie eine

03:09.030 --> 03:11.630
statische Eigenschaft hinzufügen möchten, können

03:11.630 --> 03:13.470
Sie auch das tun.

03:13.470 --> 03:17.950
Wenn Sie etwas wie das fiscalYear hier haben, das Sie derzeit in Ihrem Unternehmen

03:19.730 --> 03:22.040
verwenden möchten, könnten Sie dies auf,

03:22.040 --> 03:24.980
sagen wir, 2020 setzen und dann wieder, um es verfügbar

03:24.980 --> 03:27.310
zu machen, ohne dies zu instanziieren, könnten

03:27.310 --> 03:28.560
Sie static vor dieser Eigenschaft

03:28.560 --> 03:30.810
oder vor diesem Feld hinzufügen und jetzt

03:30.810 --> 03:33.950
darauf zugreifen.

03:33.950 --> 03:36.560
Jetzt also die Konsole da unten. Protokoll. (mycreatedemployee).

03:38.050 --> 03:42.420
Hier können wir auch auf die Abteilung zugreifen. Steuern. Jahr einfach so, ohne es zu

03:43.900 --> 03:46.190
instanziieren, und wenn wir das speichern,

03:46.190 --> 03:47.150
werden wir überraschenderweise

03:47.150 --> 03:51.130
sehen, dass 2020 hier protokolliert wird.

03:51.130 --> 03:53.347
Es handelt sich also um statische Methoden und Eigenschaften.

03:53.347 --> 03:55.250
Ein wichtiges Wort über sie, oder eine

03:55.250 --> 03:56.947
Sache, die Sie beachten sollten.

03:56.947 --> 03:59.067
Wenn man sie einer Klasse hinzufügt,

03:59.067 --> 04:03.370
kann man aus den nicht statischen Teilen nicht auf sie zugreifen.

04:03.370 --> 04:04.870
Wenn Sie also auf das fiscalYear

04:04.870 --> 04:08.150
hier im Konstruktor zugreifen möchten, und Sie möchten

04:08.150 --> 04:10.375
Konsole. Loggen Sie es hier ein,

04:10.375 --> 04:13.490
das wird, wie Sie sehen können, nicht funktionieren.

04:13.490 --> 04:15.600
Ich erhalte hier einen Fehler, dass die

04:15.600 --> 04:18.690
Eigenschaft fiscalYear ein statisches Mitglied ist.

04:18.690 --> 04:20.976
Wir können hier nicht darauf zugreifen, weil

04:20.976 --> 04:24.290
der Konstruktor und im Grunde alles darin, auch alle Methoden, die

04:24.290 --> 04:26.530
nicht mit static gekennzeichnet sind, und Sie

04:26.530 --> 04:29.427
können den Konstruktor übrigens nicht als statisch kennzeichnen,

04:29.427 --> 04:32.430
nicht auf statische Eigenschaften zugreifen können, weil

04:32.430 --> 04:34.770
sich dies auf die Instanz bezieht, die auf der Grundlage

04:34.770 --> 04:37.660
der Klasse erstellt wurde, während die statische Eigenschaft

04:37.660 --> 04:41.450
auf der Instanz nicht verfügbar ist, weil die ganze Idee hinter statischen

04:41.450 --> 04:44.150
Eigenschaften und statischen Methoden ist, dass sie

04:44.150 --> 04:47.780
von Instanzen losgelöst sind.

04:47.780 --> 04:50.930
Daher können Sie natürlich nicht mit dem Schlüsselwort this auf sie zugreifen.

04:50.930 --> 04:53.940
Wenn Sie die statische Eigenschaft oder Methode innerhalb

04:53.940 --> 04:56.080
der Klasse verwenden möchten, müssen Sie

04:56.080 --> 04:59.380
hier den Klassennamen verwenden, um darauf zuzugreifen.

04:59.380 --> 05:01.337
Dadurch haben Sie Zugriff auf statische

05:01.337 --> 05:04.290
Eigenschaften und Methoden innerhalb der Klasse.

05:04.290 --> 05:06.593
Das ist ein wichtiger Punkt, den man im Auge behalten sollte.
