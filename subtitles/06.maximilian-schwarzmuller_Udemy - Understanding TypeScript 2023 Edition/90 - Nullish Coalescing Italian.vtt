WEBVTT

00:02.300 --> 00:04.800
Istruttore: Ora, in relazione al concatenamento opzionale,

00:04.800 --> 00:06.930
abbiamo un'altra bella caratteristica in TypeScript,

00:06.930 --> 00:09.550
che ci aiuta a gestire i dati nulli.

00:09.550 --> 00:12.820
Questa caratteristica è chiamata coalescenza nulla.

00:12.820 --> 00:15.900
Immaginate di avere dei dati, degli input,

00:15.900 --> 00:17.530
di cui non sapete con certezza

00:17.530 --> 00:19.830
se siano nulli o indefiniti o se siano

00:19.830 --> 00:23.320
effettivamente dei dati validi.

00:23.320 --> 00:28.180
Ad esempio, userInput potrebbe essere nullo.

00:28.180 --> 00:31.040
Ora, anche in questo caso, abbiamo inserito il codice

00:31.040 --> 00:33.580
in TypeScript, quindi TypeScript sa che questo

00:33.580 --> 00:36.500
è nullo, ma se si recupera questo dato tramite un'API DOM,

00:36.500 --> 00:38.650
dove non lo si sa con certezza, o se si ottiene

00:38.650 --> 00:41.320
questo dato da un back-end, allora si potrebbe non

00:41.320 --> 00:42.970
saperlo in anticipo e TypeScript

00:42.970 --> 00:46.510
potrebbe non sapere se questo è nullo o meno.

00:46.510 --> 00:50.650
Se poi si vuole memorizzare questo valore in qualche altra costante

00:50.650 --> 00:52.803
o variabile, come storedData, è bene

00:54.090 --> 00:56.150
assicurarsi che, se è nullo, si memorizzi

00:56.150 --> 00:58.760
un valore di riserva.

00:58.760 --> 01:03.560
Ora è possibile farlo con l'operatore logico OR, dove si memorizza un valore

01:03.560 --> 01:05.330
predefinito, dove si ottiene

01:05.330 --> 01:06.740
che il secondo valore

01:06.740 --> 01:08.940
del primo è indefinito o nullo, se

01:08.940 --> 01:11.550
è falso per essere precisi.

01:11.550 --> 01:13.690
Il problema di questo approccio

01:13.690 --> 01:17.110
è che se questo valore non è nullo o indefinito, ma, per

01:17.110 --> 01:18.960
esempio, una stringa vuota,

01:18.960 --> 01:21.740
viene trattato come un valore falso e quindi

01:21.740 --> 01:25.600
il valore predefinito di ripiego entra in gioco.

01:25.600 --> 01:28.850
Quindi se io console. log storedData qui, si

01:28.850 --> 01:31.700
vedrà che questo stampa DEFAULT.

01:31.700 --> 01:33.430
Forse è proprio questo che

01:33.430 --> 01:36.540
volete e in tal caso la soluzione è perfetta.

01:36.540 --> 01:38.800
Ma se si vuole mantenere l'input dell'utente

01:38.800 --> 01:40.730
o qualsiasi dato con cui si sta lavorando,

01:40.730 --> 01:44.110
a meno che non sia davvero nullo o indefinito, allora è necessario un

01:44.110 --> 01:45.530
altro approccio, perché in questo

01:45.530 --> 01:48.970
caso lo tratteremmo come falso e useremmo il fallback.

01:48.970 --> 01:51.720
Ma forse si vuole mantenere un input vuoto, solo che null o

01:51.720 --> 01:54.370
undefined dovrebbero essere gestiti in modo diverso.

01:54.370 --> 01:56.390
Per questo, TypeScript ha anche

01:56.390 --> 01:58.780
un operatore, il doppio punto interrogativo,

01:58.780 --> 02:02.210
chiamato operatore di coalescenza nullish.

02:02.210 --> 02:05.250
Significa che se questo è null o undefined,

02:05.250 --> 02:06.730
e solo questo, non una

02:06.730 --> 02:09.180
stringa vuota, non zero, solo null

02:09.180 --> 02:11.540
o undefined, allora useremo il

02:11.540 --> 02:13.370
fallback.

02:13.370 --> 02:16.700
Se non è nullo o indefinito, useremo quel valore.

02:16.700 --> 02:19.220
Quindi, in questo scenario, la compilazione avviene

02:19.220 --> 02:21.400
e, come vedete, abbiamo memorizzato la stringa

02:21.400 --> 02:23.060
vuota, quindi non sto stampando nulla,

02:23.060 --> 02:24.720
questa è la stringa vuota.

02:24.720 --> 02:26.060
Se invece questo, diciamo,

02:26.060 --> 02:28.550
è indefinito e lo salvo, vedete che ora c'è

02:28.550 --> 02:30.400
scritto DEFAULT, perché grazie

02:30.400 --> 02:32.980
a questo doppio punto interrogativo, torniamo

02:32.980 --> 02:35.500
a questo, beh, ripiego e quindi abbiamo un'altra

02:35.500 --> 02:38.320
funzione molto utile che può aiutarvi a gestire

02:38.320 --> 02:42.773
con grazia i valori nulli o indefiniti.
