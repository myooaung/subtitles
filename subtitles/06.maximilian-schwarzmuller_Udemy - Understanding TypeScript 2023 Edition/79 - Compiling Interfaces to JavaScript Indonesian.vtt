WEBVTT

00:02.170 --> 00:03.290
Instruktur: Ada banyak pembicaraan

00:03.290 --> 00:05.580
tentang antarmuka dan kelas sekarang.

00:05.580 --> 00:07.390
Sekarang mari kita lihat di

00:07.390 --> 00:11.650
bawah tenda dan melihat apa yang sebenarnya dihasilkan atau ditawarkan

00:11.650 --> 00:15.290
JavaScript sebagai alternatif antarmuka.

00:15.290 --> 00:17.450
Kami belajar bahwa untuk kode kelas, pada

00:17.450 --> 00:20.560
akhirnya itu tergantung pada versi yang kita kompilasi.

00:20.560 --> 00:24.280
Jika Anda mengkompilasi untuk es6 di sini dalam konflik ts, maka

00:24.280 --> 00:27.160
output kita akan menggunakan kata kunci class.

00:27.160 --> 00:29.330
Karena kita meng-compile untuk es5 di sini,

00:29.330 --> 00:31.880
kita malah melihat solusi ini menggunakan konstruk

00:31.880 --> 00:33.420
atau fungsi pada akhirnya.

00:33.420 --> 00:36.670
Namun, apa yang terjadi untuk antarmuka?

00:36.670 --> 00:38.720
Nah, mari kita lihat aplikasinya. file js.

00:38.720 --> 00:41.780
Dan di sana Anda tidak melihat apa-apa.

00:41.780 --> 00:46.360
Anda tidak akan melihat terjemahan apa pun untuk antarmuka kami.

00:46.360 --> 00:49.410
AddFn, Named, Greetable.

00:49.410 --> 00:52.970
Anda tidak menemukan hal-hal ini di mana pun dalam aplikasi. js.

00:52.970 --> 00:55.440
Anda hanya menemukan fungsi kita di sini,

00:55.440 --> 00:59.180
Anda menemukan fungsi konstruktor kita untuk objek orang, jadi

00:59.180 --> 01:02.320
pada dasarnya terjemahan itu untuk kelas orang, dan

01:02.320 --> 01:03.500
kode lainnya.

01:03.500 --> 01:06.680
Anda tidak menemukan referensi pada antarmuka apa pun.

01:06.680 --> 01:08.240
Dan ada alasan bagus untuk itu.

01:08.240 --> 01:11.350
Tidak ada terjemahan untuk antarmuka.

01:11.350 --> 01:13.650
JavaScript tidak tahu tentang fitur ini.

01:13.650 --> 01:15.550
Ini adalah fitur TypeScript murni,

01:15.550 --> 01:18.830
hanya tersedia selama pengembangan dan kompilasi.

01:18.830 --> 01:21.640
Jadi, Anda dapat menggunakannya untuk meningkatkan kode Anda.

01:21.640 --> 01:23.970
Tidak ada output untuk itu yang akan berakhir

01:23.970 --> 01:26.010
di file JavaScript Anda, jadi oleh karena

01:26.010 --> 01:28.390
itu ini adalah fitur pengembangan murni yang membantu

01:28.390 --> 01:30.700
Anda menulis kode yang lebih baik, kode yang terstruktur

01:30.700 --> 01:34.100
dengan jelas mengikuti aturan yang jelas.

01:34.100 --> 01:38.720
Pada saat runtime, tidak ada jejak yang tersisa dari antarmuka ini.

01:38.720 --> 01:41.760
Anda tidak akan melihat apa pun yang terkait dengan antarmuka

01:41.760 --> 01:44.710
dalam kode Anda, hanya fungsi, kelas, dan semua kode lainnya

01:44.710 --> 01:47.130
yang dikompilasi dalam output.

01:47.130 --> 01:50.020
Antarmuka dibuang begitu saja, bisa dibilang.

01:50.020 --> 01:53.170
Mereka digunakan selama kompilasi untuk memeriksa kode Anda dan kemudian

01:53.170 --> 01:54.340
mereka diabaikan.

01:54.340 --> 01:56.690
Tidak ada yang akan menjadi output bagi mereka.
