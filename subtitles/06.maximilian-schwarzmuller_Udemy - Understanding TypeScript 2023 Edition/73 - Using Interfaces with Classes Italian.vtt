WEBVTT

00:02.260 --> 00:05.180
Istruttore: Ora, se torniamo a questa interfaccia,

00:05.180 --> 00:08.230
la domanda è: perché ne abbiamo bisogno?

00:08.230 --> 00:10.160
Non sarebbe la stessa cosa se

00:10.160 --> 00:13.420
aggiungessimo un tipo personalizzato qua e là?

00:13.420 --> 00:15.580
La differenza è solo che dobbiamo aggiungere

00:15.580 --> 00:18.470
un segno di uguale e poi dire che il tipo Person è un oggetto

00:18.470 --> 00:19.940
che assomiglia a questo?

00:19.940 --> 00:21.490
E in effetti, se lo salviamo,

00:21.490 --> 00:23.220
viene compilato senza errori.

00:23.220 --> 00:26.740
Quindi possiamo sostituire la nostra interfaccia con questo

00:26.740 --> 00:28.490
tipo e funziona come prima.

00:28.490 --> 00:31.290
Allora perché abbiamo un'interfaccia?

00:31.290 --> 00:32.277
Beh, un'interfaccia

00:32.277 --> 00:35.310
e un tipo personalizzato non sono esattamente la stessa

00:35.310 --> 00:39.260
cosa, mentre spesso si possono usare in modo intercambiabile e si può usare

00:39.260 --> 00:42.130
un'interfaccia invece di un tipo personalizzato o

00:42.130 --> 00:43.520
viceversa.

00:43.520 --> 00:45.720
Ci sono anche alcune differenze.

00:45.720 --> 00:47.400
Beh, una differenza naturale è che le

00:47.400 --> 00:49.070
interfacce possono essere usate solo

00:49.070 --> 00:51.470
per descrivere la struttura di un oggetto; si possono

00:51.470 --> 00:53.780
usare i tipi anche per questo, ma invece di un tipo personalizzato,

00:53.780 --> 00:55.250
si possono memorizzare anche altre

00:55.250 --> 00:56.800
cose, come i tipi di unione e così via,

00:56.800 --> 01:00.350
come abbiamo fatto all'inizio del corso.

01:00.350 --> 01:03.740
Sembra che il tipo sia più flessibile, ma il

01:03.740 --> 01:08.510
rovescio della medaglia è che l'interfaccia è più chiara.

01:08.510 --> 01:10.870
Quando si definisce qualcosa come interfaccia,

01:10.870 --> 01:12.900
è chiarissimo che si vuole definire

01:12.900 --> 01:15.580
la struttura di un oggetto con quella.

01:15.580 --> 01:18.360
In effetti, quando si tratta di definire i tipi di

01:18.360 --> 01:21.630
oggetti, è più frequente vedere interfacce in giro.

01:21.630 --> 01:23.800
Poi, si vedono i tipi personalizzati.

01:23.800 --> 01:26.410
Ora, un'altra cosa che si può fare con le interfacce,

01:26.410 --> 01:27.530
ma che si può fare solo

01:27.530 --> 01:30.090
con i tipi personalizzati, è implementare

01:30.090 --> 01:33.360
un'interfaccia in una classe.

01:33.360 --> 01:34.820
Cosa intendiamo con questo?

01:34.820 --> 01:38.360
Il motivo per cui spesso si lavora con le interfacce è

01:38.360 --> 01:40.550
che un'interfaccia può essere usata

01:40.550 --> 01:43.750
come un contratto che una classe può implementare

01:43.750 --> 01:46.400
e a cui la classe deve aderire.

01:46.400 --> 01:48.150
Cosa intendiamo con questo?

01:48.150 --> 01:52.390
Supponiamo che la nostra interfaccia non sia un'interfaccia

01:52.390 --> 01:53.970
Persona con il nome e

01:53.970 --> 01:57.690
l'età, ma che la chiamiamo Greetable.

01:57.690 --> 01:59.270
Ora, questo potrebbe sembrare

01:59.270 --> 02:01.090
un nome strano, ma alla fine dice

02:01.090 --> 02:03.560
solo che ogni oggetto che deve essere trattato

02:03.560 --> 02:06.310
come Greetable deve essere un oggetto con un

02:06.310 --> 02:09.251
nome e con un metodo greet.

02:09.251 --> 02:10.783
Quindi, potremmo dire che

02:10.783 --> 02:14.630
questa variabile user1 dovrebbe contenere un oggetto Greetable

02:14.630 --> 02:16.730
e ovviamente ora otteniamo un errore

02:16.730 --> 02:19.930
perché abbiamo più di un semplice name e greet.

02:19.930 --> 02:22.000
Ma se vogliamo usare questa interfaccia

02:22.000 --> 02:25.860
per condividerla tra più classi, dobbiamo assicurarci

02:25.860 --> 02:27.410
che ogni classe che aderisce

02:27.410 --> 02:30.860
a questa interfaccia abbia una proprietà name e un

02:30.860 --> 02:33.410
metodo greet.

02:33.410 --> 02:35.730
Quindi, ora possiamo aggiungere una classe Person, il cui nome

02:35.730 --> 02:36.970
è di nuovo disponibile perché abbiamo

02:36.970 --> 02:38.540
rinominato l'interfaccia.

02:38.540 --> 02:40.790
E ora, diciamo che il dattiloscritto e

02:40.790 --> 02:45.480
questa classe dovrebbero fondamentalmente aderire a questa interfaccia.

02:45.480 --> 02:48.350
Deve implementare questa interfaccia.

02:48.350 --> 02:53.000
Deve seguire il contratto impostato da questa interfaccia.

02:53.000 --> 02:55.260
Per farlo, aggiungiamo la parola chiave implements

02:55.260 --> 02:56.930
dopo il nome della classe.

02:56.930 --> 02:59.280
E poi, il nome della nostra interfaccia, Greetable.

03:00.420 --> 03:02.780
È possibile implementare più di un'interfaccia.

03:02.780 --> 03:04.710
È una differenza rispetto all'eredità.

03:04.710 --> 03:07.270
Si può ereditare solo da una classe, ma si possono

03:07.270 --> 03:09.370
implementare più interfacce, semplicemente

03:09.370 --> 03:12.730
separandole con una virgola, quindi si può avere un'altra

03:12.730 --> 03:16.000
interfaccia, se ne abbiamo una.

03:16.000 --> 03:17.710
Qui, però, ne ho solo uno.

03:17.710 --> 03:20.350
Ora, l'implicazione di questo è che riceviamo

03:20.350 --> 03:21.740
un errore perché la nostra

03:21.740 --> 03:25.200
classe non implementa correttamente l'interfaccia.

03:25.200 --> 03:27.240
Non ha la proprietà name,

03:27.240 --> 03:29.690
non ha il metodo greet.

03:29.690 --> 03:33.960
Ora dobbiamo impostarlo nella nostra classe, magari con

03:33.960 --> 03:35.610
un costruttore in cui

03:35.610 --> 03:38.173
otteniamo un valore per il nome e poi

03:39.010 --> 03:41.260
lo impostiamo in questo modo,

03:41.260 --> 03:44.380
aggiungendo anche il nostro metodo greet

03:44.380 --> 03:48.080
in cui potremmo avere questa logica.

03:48.080 --> 03:50.780
Ora, nella nostra classe, possiamo avere di più.

03:50.780 --> 03:52.340
Possiamo avere più campi,

03:52.340 --> 03:53.920
più metodi, possiamo estendere

03:53.920 --> 03:56.030
questa classe, possiamo lavorare

03:56.030 --> 03:59.170
con questa classe come sempre.

03:59.170 --> 04:02.640
Ma siamo costretti a implementare correttamente questo metodo per

04:02.640 --> 04:04.400
avere questa proprietà name, perché

04:04.400 --> 04:07.040
stiamo implementando questa interfaccia.

04:07.040 --> 04:09.740
Per questo motivo, le interfacce sono spesso utilizzate

04:09.740 --> 04:13.870
per condividere le funzionalità tra classi diverse, senza che queste siano

04:13.870 --> 04:16.550
implementate concretamente.

04:16.550 --> 04:19.240
Non si possono avere implementazioni o valori all'interno

04:19.240 --> 04:22.450
delle interfacce, ma per quanto riguarda la struttura, le caratteristiche

04:22.450 --> 04:24.980
che una classe dovrebbe avere.

04:24.980 --> 04:28.120
È un po' come lavorare con le classi astratte, quindi,

04:28.120 --> 04:29.640
con la differenza che un'interfaccia

04:29.640 --> 04:33.520
non ha alcun dettaglio di implementazione, mentre le classi

04:33.520 --> 04:37.160
astratte possono essere un misto di "devi sovrascrivere

04:37.160 --> 04:39.330
queste parti" e "ho un'implementazione

04:39.330 --> 04:42.470
concreta".

04:42.470 --> 04:43.730
Questa è una differenza

04:43.730 --> 04:46.860
importante tra interfacce e classi astratte.

04:46.860 --> 04:47.850
Ora, però, abbiamo

04:47.850 --> 04:49.790
qui la nostra classe di persone.

04:49.790 --> 04:53.910
Ora, l'utente1 può essere creato usando new

04:53.910 --> 04:55.930
Person e inserendo il

04:55.930 --> 04:58.090
nome, ad esempio.

04:58.090 --> 04:59.730
E ora, vediamo che va bene che

04:59.730 --> 05:02.300
abbiamo questa età qui in user1, perché abbiamo

05:02.300 --> 05:05.870
imbarcato user1 in base a Person, Person implementa Greetable

05:05.870 --> 05:07.540
e si possono aggiungere più

05:07.540 --> 05:10.440
Greetable in una classe, ma si devono soddisfare

05:10.440 --> 05:15.120
le condizioni stabilite dall'interfaccia.

05:15.120 --> 05:17.130
Quindi ora, se salviamo tutto, abbiamo

05:17.130 --> 05:18.730
un codice valido e se registriamo

05:18.730 --> 05:23.040
il nostro utente1 con console. vediamo che si tratta di un normale

05:23.040 --> 05:25.430
oggetto con l'età e il nome in questo

05:25.430 --> 05:27.590
caso, ma l'aspetto fondamentale

05:27.590 --> 05:32.770
è che si basa su una classe che implementa l'interfaccia.

05:32.770 --> 05:35.550
E si può quindi utilizzare l'interfaccia come tipo.

05:35.550 --> 05:37.780
Naturalmente, avremmo potuto impostare il tipo

05:37.780 --> 05:40.580
Person, ma come si vede, l'uso del tipo Greetable qui funziona,

05:40.580 --> 05:42.200
perché l'oggetto Person che memorizziamo

05:42.200 --> 05:46.300
nella classe user1 alla fine è basato sull'interfaccia Greetable.

05:46.300 --> 05:47.750
Implementa questo aspetto.

05:47.750 --> 05:49.820
Questa è un'altra potente funzione.

05:49.820 --> 05:53.690
È possibile utilizzare un'interfaccia come tipo di una costante

05:53.690 --> 05:58.010
o di una variabile, che in realtà memorizzerà un'altra classe di un

05:58.010 --> 06:02.330
altro tipo, che a sua volta si basa sul tipo di interfaccia perché la

06:02.330 --> 06:03.950
implementa.

06:03.950 --> 06:06.530
Queste sono le interfacce in breve.

06:06.530 --> 06:08.643
Sono incluse molte potenti funzioni.
