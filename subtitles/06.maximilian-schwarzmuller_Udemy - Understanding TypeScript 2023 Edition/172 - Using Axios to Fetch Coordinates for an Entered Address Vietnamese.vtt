WEBVTT

00:02.390 --> 00:04.530
Người hướng dẫn: Bây giờ có thể gửi yêu

00:04.530 --> 00:06.890
cầu mà không cần gói của bên thứ ba.

00:06.890 --> 00:10.140
Trong JavaScript hiện đại trong các trình duyệt hiện

00:10.140 --> 00:11.910
đại, bạn phải tìm nạp API.

00:11.910 --> 00:13.620
Tính năng này được tích hợp trong

00:13.620 --> 00:16.710
trình duyệt, đây là chức năng khả dụng trên toàn cầu và bạn có

00:16.710 --> 00:19.600
thể sử dụng chức năng này để gửi yêu cầu tới các URL.

00:19.600 --> 00:22.450
Bây giờ không có gì phản đối API này,

00:22.450 --> 00:24.870
ngoài thực tế là việc xử lý lỗi

00:24.870 --> 00:27.210
có thể hơi rắc rối với nó.

00:27.210 --> 00:29.250
Nhưng tôi cũng muốn thực hành cách

00:29.250 --> 00:31.123
sử dụng thư viện của bên thứ ba.

00:31.960 --> 00:36.070
Do đó, chúng tôi sẽ sử dụng gói axios rất phổ biến.

00:36.070 --> 00:38.510
Đây là một gói bạn có thể sử dụng trong

00:38.510 --> 00:43.510
JavaScript và do đó, cả trong TypeScript để gửi các yêu cầu HTTP.

00:43.880 --> 00:47.263
Vì vậy, chúng ta chỉ cần cài đặt axios để bắt đầu sử dụng nó.

00:48.100 --> 00:51.080
Đối với điều này trong dự án của chúng tôi, nơi chúng

00:51.080 --> 00:54.150
tôi có thể sử dụng NPM để quản lý các phụ thuộc, chúng tôi

00:54.150 --> 00:57.620
có thể chạy npm install, dash, dash save axios giống như thế

00:57.620 --> 01:00.520
này và điều này bây giờ sẽ cài đặt gói axios.

01:00.520 --> 01:04.750
Với cài đặt này, giờ đây chúng ta có thể nhập axios tại đây,

01:04.750 --> 01:07.390
nhập axios từ axios và bạn sẽ thấy

01:07.390 --> 01:09.170
điều gì đó thú vị.

01:09.170 --> 01:12.090
Nếu bây giờ tôi bắt đầu sử dụng cái này và tôi gõ một dấu chấm ở đây,

01:12.090 --> 01:13.990
tôi sẽ nhận được tự động hoàn thành.

01:13.990 --> 01:16.290
Và ví dụ, bạn có một phương thức get ở đây

01:16.290 --> 01:18.523
sẽ gửi một yêu cầu get tới một URL.

01:19.850 --> 01:23.150
Vì vậy, ở đây chúng tôi thực sự đã hỗ trợ TypeScript tích hợp sẵn.

01:23.150 --> 01:25.640
Và nếu chúng ta đi đến các mô-đun

01:25.640 --> 01:29.670
nút và xem xét gói axios, thì nó đây.

01:29.670 --> 01:33.970
Bạn sẽ thấy rằng trong đó, có một chỉ mục. tập tin dts.

01:33.970 --> 01:38.970
Vì vậy, các tác giả thư viện axios đã gói thư viện của

01:39.430 --> 01:43.750
họ cùng với gói dịch TypeScript như vậy.

01:43.750 --> 01:47.440
Trong đó, mọi thứ được giải thích cho TypeScript.

01:47.440 --> 01:50.120
Gói này hoặc tệp này ở đây về cơ bản giải thích

01:50.120 --> 01:53.660
cho TypeScript thư viện JavaScript này có thể làm gì

01:53.660 --> 01:55.600
và nó sử dụng loại nào.

01:55.600 --> 01:59.100
Bây giờ một số thư viện làm điều đó và axios là một trong số đó.

01:59.100 --> 02:02.070
Bạn có thể biết khá nhanh liệu một thư viện có làm điều này hay không,

02:02.070 --> 02:03.420
nếu bạn bắt đầu sử dụng nó.

02:03.420 --> 02:05.520
Nếu bạn không nhận được hỗ trợ tự động

02:05.520 --> 02:07.930
hoàn thành và gặp nhiều lỗi biên dịch,

02:07.930 --> 02:10.750
có thể bạn cần cài đặt các loại bổ sung.

02:10.750 --> 02:12.970
Nếu bạn nhận được sự hỗ trợ tốt như chúng

02:12.970 --> 02:16.120
tôi làm ở đây và bạn sẽ không gặp phải lỗi biên dịch nào sau

02:16.120 --> 02:18.140
đó, thì bạn đã có một thư viện với các

02:18.140 --> 02:20.170
bản dịch kiểu được tích hợp sẵn.

02:20.170 --> 02:23.120
Và do đó, bạn không cần cài đặt thêm bất kỳ loại nào.

02:23.120 --> 02:26.240
Thật tốt khi biết và ở đây chúng tôi có một ví dụ tuyệt vời.

02:26.240 --> 02:27.800
Vì vậy, vì chúng tôi đã tích hợp hỗ trợ nên

02:27.800 --> 02:30.410
chúng tôi có thể bắt đầu sử dụng quyền truy cập ngay lập tức.

02:30.410 --> 02:34.350
Và tôi muốn gửi yêu cầu HTTP tới URL này ngay bây giờ.

02:34.350 --> 02:37.980
Vì vậy, hãy sao chép URL này và nhập nó vào đây.

02:37.980 --> 02:40.220
Và tôi sẽ nhập nó giữa các lần đánh

02:40.220 --> 02:42.440
dấu ngược để tạo một mẫu theo nghĩa

02:42.440 --> 02:45.880
đen, để họ có thể dễ dàng hoán đổi các phần của chuỗi

02:45.880 --> 02:49.050
này thành động cho các giá trị khác.

02:49.050 --> 02:51.730
Vì vậy, hãy dán vào chuỗi đó, nó khá dài và

02:51.730 --> 02:55.460
hãy bắt đầu bằng cách thay thế khóa API của bạn ở cuối bằng

02:55.460 --> 02:59.210
khóa Google API mà chúng tôi đã lưu trữ trong hằng số này.

02:59.210 --> 03:01.690
Đối với điều này, vì đây là một mẫu chữ,

03:01.690 --> 03:04.110
chúng ta có thể thêm ký hiệu đô la, dấu

03:04.110 --> 03:09.110
ngoặc nhọn, sau đó trỏ vào khóa Google API để sử dụng hằng số này.

03:10.820 --> 03:13.240
Ngoài ra, hãy trao đổi địa chỉ này.

03:13.240 --> 03:15.500
Ở đây chúng tôi đã nhập một địa chỉ giả

03:15.500 --> 03:17.130
và tất nhiên ở đó tôi muốn sử

03:17.130 --> 03:19.300
dụng địa chỉ mà người dùng đã nhập.

03:19.300 --> 03:22.540
Bây giờ chỉ cần một lưu ý quan trọng, tất nhiên, địa

03:22.540 --> 03:24.910
chỉ này chính xác là văn bản mà người dùng

03:24.910 --> 03:27.560
đã nhập và họ cung cấp có thể chứa các ký tự

03:27.560 --> 03:30.650
đặc biệt, khoảng trắng, dấu phẩy, v.v.

03:30.650 --> 03:32.250
Và không phải tất cả các

03:32.250 --> 03:35.580
ký tự và biểu tượng này đều được hỗ trợ trong URL.

03:35.580 --> 03:37.750
Vì vậy, chúng tôi cần chuyển đổi chuỗi

03:37.750 --> 03:40.550
đã nhập này thành chuỗi tương thích với URL.

03:40.550 --> 03:43.810
Và may mắn thay, TypeScript và JavaScript

03:43.810 --> 03:46.940
đặc biệt có một hàm tích hợp sẵn giúp chúng

03:46.940 --> 03:50.460
ta làm điều đó, đó là hàm mã hóa URI.

03:50.460 --> 03:53.020
Chúng ta có thể gọi nó và chuyển một chuỗi tới

03:53.020 --> 03:54.770
nó và thao tác này sẽ chuyển chuỗi

03:54.770 --> 03:57.460
này thành một chuỗi tương thích với URL.

03:57.460 --> 03:59.845
Cùng với đó, chúng tôi đã nhận được

03:59.845 --> 04:01.600
URL đã hoàn thành mà chúng

04:01.600 --> 04:04.900
tôi có thể gửi yêu cầu lấy lại tọa độ của mình.

04:04.900 --> 04:07.390
Tất nhiên, bây giờ get cho chúng ta một lời

04:07.390 --> 04:10.620
hứa vì gửi một yêu cầu như một tác vụ không đồng bộ.

04:10.620 --> 04:13.430
Và ở đó chúng tôi có nhật ký sau đó nếu điều này

04:13.430 --> 04:15.690
thành công hoặc nắm bắt nếu chúng tôi

04:15.690 --> 04:18.620
gặp lỗi kỹ thuật hoặc mã phản hồi lỗi.

04:18.620 --> 04:21.560
Vì vậy, ở đây chúng tôi sẽ ghi nhật ký bảng điều khiển bất kỳ lỗi nào mà chúng

04:21.560 --> 04:24.710
tôi có thể gặp phải vào thời điểm này, vì thông thường chúng tôi sẽ thành công.

04:24.710 --> 04:27.820
Và do đó, ở đây, tôi sẽ mong đợi phản hồi của mình

04:27.820 --> 04:32.400
trong khối then và tôi cũng muốn ghi lại phản hồi này sau đó.

04:32.400 --> 04:35.820
Vì vậy, bây giờ với điều đó, tôi muốn nói, hãy xem điều này mang lại cho chúng ta điều gì.

04:35.820 --> 04:39.720
Hãy chạy lại NPM start để hiển thị lại quy trình webpack đó và bắt đầu xây

04:39.720 --> 04:40.953
dựng quy trình này.

04:42.120 --> 04:43.790
Và hãy quay lại ứng dụng của

04:43.790 --> 04:47.220
chúng ta và nhập một địa điểm ở đây như Sixth Avenue.

04:47.220 --> 04:50.090
Nếu tôi nhấn Tìm kiếm Địa chỉ, bạn sẽ thấy sau một lúc, bạn

04:50.090 --> 04:51.480
sẽ nhận được kết quả ở đây.

04:51.480 --> 04:53.660
Và ở đó bạn sẽ có mã trạng thái là 200,

04:53.660 --> 04:56.120
nghĩa là yêu cầu đã thành công.

04:56.120 --> 04:59.090
Và bạn có một trường dữ liệu chứa dữ

04:59.090 --> 05:01.240
liệu mà máy chủ trả lời.

05:01.240 --> 05:03.890
Trường dữ liệu đó có trường kết quả và trong đó

05:03.890 --> 05:06.570
chúng tôi có một mảng, như bạn có thể biết.

05:06.570 --> 05:10.690
Trong mảng đó, chúng tôi có một vài mục, số lượng khác nhau.

05:10.690 --> 05:13.770
Và về cơ bản đây là những kết quả mà Google tìm thấy.

05:13.770 --> 05:16.740
Và kết quả đầu tiên thường là kết quả tốt nhất.

05:16.740 --> 05:18.790
Vì vậy, nếu bạn nhìn vào đó, chúng ta sẽ thấy

05:18.790 --> 05:20.460
ví dụ, địa chỉ được định dạng.

05:20.460 --> 05:22.520
Vì vậy, địa chỉ mà Google tìm thấy cho địa chỉ

05:22.520 --> 05:23.790
này mà chúng tôi đã nhập, nó

05:23.790 --> 05:26.570
hoàn chỉnh hơn một chút so với những gì chúng tôi đã nhập.

05:26.570 --> 05:29.300
Và chúng tôi có chìa khóa hình học ở đây.

05:29.300 --> 05:31.880
Và nếu chúng ta mở rộng điều này, chúng ta

05:31.880 --> 05:35.240
sẽ thấy rằng đến lượt nó có một khóa vị trí và đây cuối

05:35.240 --> 05:37.540
cùng là một đối tượng có tọa độ mà chúng

05:37.540 --> 05:39.700
ta quan tâm, vĩ độ và kinh độ.

05:39.700 --> 05:43.000
Vì vậy, cuối cùng, chúng ta phải đi sâu vào dữ liệu,

05:43.000 --> 05:47.390
kết quả và sau đó là kết quả đầu tiên, hình học, vị trí và chúng ta sẽ

05:47.390 --> 05:50.030
có một đối tượng có kinh độ và vĩ độ.

05:50.030 --> 05:52.840
Và chúng ta sẽ có thể hiển thị vĩ độ và kinh

05:52.840 --> 05:55.240
độ này trên bản đồ sau này.

05:55.240 --> 05:57.430
Vì vậy, bây giờ, hãy giải nén

05:57.430 --> 05:59.360
cái này và lấy tọa độ của chúng

05:59.360 --> 06:04.360
ta bằng cách truy cập kết quả chấm dữ liệu dấu chấm phản hồi.

06:04.600 --> 06:09.600
Và sau đó là kết quả đầu tiên về vị trí chấm hình học dấu chấm, vì vậy hãy thực

06:11.200 --> 06:13.093
sự đi sâu vào vấn đề này.

06:15.130 --> 06:16.880
Tất nhiên, bây giờ điều bạn sẽ nhận

06:16.880 --> 06:19.850
thấy là trong khi TypeScript không phàn nàn ở đây, thì chúng

06:19.850 --> 06:23.280
tôi cũng không nhận được hỗ trợ TypeScript tốt ở đây, phải không?

06:23.280 --> 06:25.740
Nếu tôi nhập dấu chấm ở đây, điều đó không có

06:25.740 --> 06:27.620
nghĩa là có thuộc tính kết quả.

06:27.620 --> 06:30.350
Và thực sự, tôi có thể cố gắng truy cập bất cứ thứ

06:30.350 --> 06:33.840
gì ở đây, ngay cả thứ không tồn tại trên phản hồi và điều đó

06:33.840 --> 06:34.820
có ý nghĩa.

06:34.820 --> 06:38.010
Làm cách nào để TypeScript biết điều gì sẽ xảy ra trong phản

06:38.010 --> 06:40.920
hồi của bất kỳ URL nào mà tôi đang gửi yêu cầu tới?

06:40.920 --> 06:42.810
TypeScript không tiếp tục và

06:42.810 --> 06:44.970
gửi yêu cầu trong quá trình phát triển

06:44.970 --> 06:46.510
để tìm hiểu những gì trong

06:46.510 --> 06:49.170
đó, điều đó cũng sẽ không tốt.

06:49.170 --> 06:51.400
Nhưng chúng ta có thể cho TypeScript

06:51.400 --> 06:53.950
biết những gì chúng ta mong đợi trong phản

06:53.950 --> 06:58.950
hồi vì phương thức get này thực sự là một phương thức chung và có bất kỳ thứ gì ở đây,

06:59.040 --> 07:02.830
đó thực sự là loại phản hồi mà chúng ta mong đợi nhận được.

07:02.830 --> 07:06.880
Vì vậy, ở đây, tôi có thể thêm loại phản hồi của mình

07:06.880 --> 07:11.270
và tôi có thể nói với TypeScript rằng những gì tôi mong

07:11.270 --> 07:15.260
đợi là một đối tượng có khóa kết quả, sau đó, là một

07:15.260 --> 07:18.330
mảng chứa đầy các đối tượng, trong đó

07:18.330 --> 07:22.170
mọi đối tượng đều có khóa hình học, sau đó trong

07:22.170 --> 07:24.330
lần lượt là một đối tượng,

07:24.330 --> 07:28.160
có một khóa vị trí, sau đó lần lượt là một đối tượng,

07:28.160 --> 07:33.510
có vĩ độ, là một số và kinh độ, là một số.

07:33.510 --> 07:36.030
Vì vậy, chắc chắn là một loại khá phức tạp.

07:36.030 --> 07:39.400
Nhưng cùng với đó, nếu chúng ta nhập một dấu chấm ở đây, tôi sẽ tự động hoàn

07:39.400 --> 07:42.220
thành và TypeScript hiểu những gì tôi đang truy cập ở đây.

07:42.220 --> 07:44.860
Và tất nhiên, chúng ta cũng có thể lấy loại này ra khỏi đây

07:44.860 --> 07:46.620
và tạo bí danh loại của riêng mình.

07:46.620 --> 07:50.497
Có thể ở đây, phản hồi mã hóa địa lý của Google.

07:53.220 --> 07:55.380
Đó sẽ là loại tùy chỉnh của tôi ở đây và

07:55.380 --> 07:58.420
sau đó tôi có thể nói với TypeScript rằng ở đây tôi

07:58.420 --> 08:01.540
mong nhận được phản hồi mã hóa địa lý của Google.

08:01.540 --> 08:03.900
Tất nhiên, bây giờ, trên thực tế, phản

08:03.900 --> 08:07.020
hồi không chỉ chứa mảng kết quả, nó còn có mã trạng

08:07.020 --> 08:09.460
thái và nó cũng có nhiều trường khác trong

08:09.460 --> 08:13.040
mỗi mục của mảng kết quả, sau đó là hình học.

08:13.040 --> 08:17.030
Tất nhiên, bây giờ, bạn có thể chỉ cần thêm tất cả các trường này

08:18.210 --> 08:21.330
vào loại tùy chỉnh của mình tại đây, nhưng ở đây tôi

08:21.330 --> 08:25.640
thực sự chỉ muốn tập trung vào các giá trị mà tôi thực sự quan tâm.

08:25.640 --> 08:27.360
Và do đó, thực sự có một trường

08:27.360 --> 08:30.900
khác mà tôi sẽ thêm vào, đó là trạng thái bên cạnh kết quả.

08:30.900 --> 08:34.520
Vì vậy, ngay ở cấp cao nhất, chúng tôi có trạng thái và đó sẽ là một

08:34.520 --> 08:35.500
chuỗi cho chúng tôi

08:35.500 --> 08:38.390
biết liệu Google có thành công hay không.

08:38.390 --> 08:41.810
Và trạng thái thực sự sẽ ổn hoặc một

08:41.810 --> 08:44.010
vài giá trị khác.

08:44.010 --> 08:46.910
Về cơ bản, đây là một thông báo trạng thái mà Google phản

08:46.910 --> 08:50.020
hồi để cho chúng tôi biết liệu Google có tìm nạp thành công

08:50.020 --> 08:51.890
tọa độ cho địa chỉ này hay không.

08:51.890 --> 08:54.000
Và tất nhiên, trong các tài liệu chính thức, chúng

08:54.000 --> 08:57.280
tôi có thể tìm hiểu loại phản hồi nào mà chúng tôi có thể nhận được tại đây.

08:57.280 --> 08:58.900
Nếu bạn cuộn xuống một chút

08:58.900 --> 09:01.070
và nhấp vào hiểu phản hồi, bạn sẽ biết

09:01.070 --> 09:04.240
nội dung bên trong phản hồi mà bạn nhận được và do

09:04.240 --> 09:07.000
đó nhấp vào phản hồi mã hóa địa lý.

09:07.000 --> 09:08.580
Và sau đó trên mã trạng thái,

09:08.580 --> 09:11.090
chúng ta tìm hiểu về các mã trạng thái có sẵn.

09:11.090 --> 09:15.090
Ví dụ: tất cả chúng tôi đều không có kết quả nếu không tìm thấy gì.

09:15.090 --> 09:16.850
Chúng tôi cũng có một số mã khác, nhưng

09:16.850 --> 09:19.223
ở đây tôi thực sự chỉ quan tâm đến hai mã này.

09:20.200 --> 09:23.310
Vì vậy, tôi nói với TypeScript rằng ở đây, tôi nhận được mã trạng thái

09:23.310 --> 09:24.890
là một trong hai giá trị này.

09:24.890 --> 09:27.480
Bây giờ một lần nữa, nó cũng có thể có giá trị

09:27.480 --> 09:29.830
số, nhưng điều này tốt cho tôi ở đây.

09:29.830 --> 09:31.640
Như tôi đã nói, tất nhiên bạn có thể viết

09:31.640 --> 09:33.700
điều này theo cách hoàn chỉnh hơn.

09:33.700 --> 09:36.230
Bây giờ với điều đó đã được thêm vào, ở dưới đó trong

09:36.230 --> 09:41.230
khối then, chúng ta có thể kiểm tra xem trạng thái chấm dữ liệu của dấu chấm phản hồi có ổn không, điều

09:41.580 --> 09:44.120
đó có nghĩa là đã xảy ra sự cố và trong trường hợp đó,

09:44.120 --> 09:46.710
chúng ta có thể đưa ra lỗi ở đây và do đó chúng ta sẽ bị

09:46.710 --> 09:48.090
bắt chặn nơi chúng tôi có thể

09:48.090 --> 09:49.810
thiết lập một số xử lý lỗi.

09:49.810 --> 09:54.280
Vì vậy, ở đây chúng tôi sẽ đưa ra lỗi không thể tìm nạp vị trí.

09:54.280 --> 09:57.080
Và sau đó ở đây trong trình xử lý lỗi để làm điều gì đó,

09:57.080 --> 09:59.150
chúng ta có thể đưa ra một cảnh báo nơi chúng

09:59.150 --> 10:01.230
ta xuất thông báo lỗi ít nhất.

10:01.230 --> 10:04.660
Tất nhiên, đây chỉ là một số xử lý lỗi rất cơ bản.

10:04.660 --> 10:06.950
Mặt khác, nếu chúng tôi có phản hồi thành công, chúng

10:06.950 --> 10:09.910
tôi sẽ tìm nạp tọa độ của mình tại đây và bây giờ chúng tôi có thể sử dụng

10:09.910 --> 10:12.113
các tọa độ này để xuất chúng trên bản đồ.
