WEBVTT

00:02.450 --> 00:05.030
Instructeur : Laissons maintenant de côté les surcharges de

00:05.030 --> 00:09.010
fonctions et laissez-moi vous présenter une autre fonctionnalité très intéressante.

00:09.010 --> 00:13.350
Et c'est le chaînage facultatif.

00:13.350 --> 00:16.720
Disons que vous avez une application où vous

00:16.720 --> 00:21.603
obtenez des données d'un backend, d'une base de données ou de toute

00:21.603 --> 00:26.350
autre source où vous ne savez pas avec certitude si une certaine

00:26.350 --> 00:29.500
propriété est définie dans un objet.

00:29.500 --> 00:33.920
Disons que nous avons fetchedUserData et que fetchedUserData pourrait être un objet concernant

00:33.920 --> 00:36.380
un utilisateur que nous avons récupéré.

00:36.380 --> 00:39.705
Là, nous pourrions avoir un ID, nous pourrions

00:39.705 --> 00:44.705
avoir un nom, Max, et nous pourrions aussi attendre une autre propriété,

00:45.730 --> 00:50.550
job, qui est un objet qui a un titre et qui a aussi une description,

00:50.550 --> 00:53.950
ma propre entreprise.

00:53.950 --> 00:56.900
Maintenant, si nous obtenons des données comme celles-ci, nous pouvons bien sûr travailler avec elles.

00:56.900 --> 01:00.150
Maintenant, vous pouvez faire des choses plus complexes,

01:00.150 --> 01:03.940
mais ici, pour commencer, disons que tout ce que je fais est de

01:03.940 --> 01:06.871
télécharger le titre du poste ici.

01:06.871 --> 01:09.940
Maintenant, si nous sauvegardons cela avec notre serveur

01:09.940 --> 01:12.880
de développement en marche et la compilation en mode veille,

01:12.880 --> 01:14.420
j'obtiens CEO ici.

01:14.420 --> 01:17.395
Cependant, si nous récupérons ces données à

01:17.395 --> 01:22.395
partir d'un backend, pour une raison quelconque, nous ne récupérons peut-être

01:23.080 --> 01:27.690
pas toutes les données dont nous avons besoin, ou certaines données

01:27.690 --> 01:30.490
ne sont pas définies à ce stade.

01:30.490 --> 01:34.730
Dans des applications plus complexes et plus importantes, vous travaillez

01:34.730 --> 01:39.240
parfois avec des structures comportant des données imbriquées, où vous ne

01:39.240 --> 01:42.650
savez pas avec certitude si une propriété d'un objet est

01:42.650 --> 01:45.340
définie ou si elle est indéfinie.

01:45.340 --> 01:49.680
Donc, ici, disons que le travail n'existe pas, pour une raison quelconque, nous ne le récupérons

01:49.680 --> 01:53.180
pas, ici, bien sûr, j'obtiens une erreur, maintenant TypeScript se plaint

01:53.180 --> 01:55.930
de cela parce qu'il sait qu'il n'y a pas de propriété travail

01:55.930 --> 01:57.843
maintenant.

01:57.843 --> 02:01.347
Le problème est qu'il sait que pour ces données, il ne saurait pas

02:01.347 --> 02:05.660
s'il s'agit de données que nous allons chercher dans un fichier qui n'est pas contrôlé

02:05.660 --> 02:09.720
par TypeScript ou, comme je viens de le dire, si nous allons chercher ces données

02:09.720 --> 02:12.530
dans le backend et que nous ne savons pas avec certitude

02:12.530 --> 02:15.550
quelles données seront retournées.

02:15.550 --> 02:18.150
Maintenant, si vous ne savez pas si c'est défini ou non,

02:18.150 --> 02:21.730
ce que nous pouvons faire en JavaScript ordinaire est d'essayer d'accéder

02:21.730 --> 02:25.098
à job et si cela fonctionne, nous continuons et nous accédons à title.

02:25.098 --> 02:29.450
C'est la façon dont JavaScript vérifie si quelque chose existe avant

02:29.450 --> 02:33.520
de plonger plus profondément dans cet objet potentiel et si c'est

02:33.520 --> 02:37.110
indéfini, ce code ne s'exécute jamais et nous avons donc une

02:37.110 --> 02:39.400
erreur d'exécution plus large.

02:39.400 --> 02:42.410
Encore une fois ici, TypeScript sait bien sûr que ce travail

02:42.410 --> 02:45.180
n'existe pas, mais s'il est récupéré d'une source

02:45.180 --> 02:48.470
que TypeScript ne peut pas consulter, comme le résultat d'une

02:48.470 --> 02:52.910
requête HTTP, ce serait le moyen le plus sûr d'éviter les erreurs d'exécution

02:52.910 --> 02:54.920
en JavaScript.

02:54.920 --> 02:58.110
Maintenant, si cela existe, nous obtenons le même résultat que précédemment.

02:58.110 --> 03:01.400
S'il n'existe pas, nous n'obtenons pas d'erreur d'exécution,

03:01.400 --> 03:02.233
du moins.

03:02.233 --> 03:07.020
Avec TypeScript, vous avez en fait un moyen plus agréable de le faire.

03:07.020 --> 03:10.520
Vous avez l'opérateur de chaînage optionnel.

03:10.520 --> 03:15.320
Vous pouvez ajouter un point d'interrogation après la chose dont vous n'êtes pas sûr qu'elle

03:15.320 --> 03:16.880
soit définie ou non.

03:16.880 --> 03:21.600
Du moins si vous utilisez la version 3 de TypeScript. 7 ou plus.

03:21.600 --> 03:24.770
Ici, mon IDE n'aime pas cela, mais c'est une syntaxe

03:24.770 --> 03:26.300
supportée alors.

03:26.300 --> 03:30.370
Cela indique à TypeScript si ce titre existe, s'il existe, il accède à l'emploi et

03:30.370 --> 03:33.450
donc ici nous pouvons ajouter ce point d'interrogation et donc

03:33.450 --> 03:36.314
accéder au titre uniquement si l'emploi est défini.

03:36.314 --> 03:39.300
Maintenant, si nous faisons cela, j'obtiens toujours une erreur

03:39.300 --> 03:42.490
ici si j'essaie de le compiler parce que TypeScript sait toujours avec

03:42.490 --> 03:44.510
certitude que le travail n'existe pas.

03:44.510 --> 03:47.370
Mais s'il ne le sait pas ou si je le commente,

03:47.370 --> 03:51.840
il compile très bien et tout s'exécute comme avant.

03:51.840 --> 03:56.400
Ainsi, cet opérateur de chaînage optionnel nous aide à accéder en toute

03:56.400 --> 04:00.730
sécurité aux propriétés et aux objets imbriqués dans nos données

04:00.730 --> 04:03.610
d'objet. Si l'élément situé devant le point

04:03.610 --> 04:07.061
d'interrogation n'est pas défini, il n'y accèdera pas

04:07.061 --> 04:10.910
et ne provoquera donc pas d'erreur d'exécution, mais il ne

04:10.910 --> 04:12.420
continuera pas.

04:12.420 --> 04:15.210
Donc, en coulisses, cela est essentiellement compilé

04:15.210 --> 04:18.380
en un contrôle if qui vérifie si cela existe avant d'essayer

04:18.380 --> 04:19.213
d'y accéder.
