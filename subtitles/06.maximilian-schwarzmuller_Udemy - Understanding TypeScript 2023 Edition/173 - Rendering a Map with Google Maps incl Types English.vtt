WEBVTT

1
00:00:02.120 --> 00:00:05.300
<v Man>So how can we output the coordinates on a map now?</v>

2
00:00:05.300 --> 00:00:08.180
For that again, we'll use a Google API.

3
00:00:08.180 --> 00:00:10.690
If you search for Google JavaScript Maps,

4
00:00:10.690 --> 00:00:13.810
or Google JS Maps, you'll find the official docs

5
00:00:13.810 --> 00:00:16.970
for the google JavaScript Google Maps API.

6
00:00:16.970 --> 00:00:19.660
And here you'll learn how you can use Google Maps

7
00:00:19.660 --> 00:00:22.020
in your web application to render a map.

8
00:00:22.020 --> 00:00:24.720
And it's really straight-forward and simple.

9
00:00:24.720 --> 00:00:27.280
First of all we need to add this script here,

10
00:00:27.280 --> 00:00:31.720
which will add this Google Maps SDK to our application.

11
00:00:31.720 --> 00:00:34.220
So simply grab that script, and add it to your

12
00:00:34.220 --> 00:00:38.210
index html file, above your script.

13
00:00:38.210 --> 00:00:40.670
Now important, we don't install this NPM,

14
00:00:40.670 --> 00:00:42.920
because it's not published to NPM,

15
00:00:42.920 --> 00:00:45.900
hence we use this CDN link, which pulls the script,

16
00:00:45.900 --> 00:00:48.140
directly from Google's servers.

17
00:00:48.140 --> 00:00:51.560
And here we need to setup our API_KEY.

18
00:00:51.560 --> 00:00:54.390
Now that's of course the API_KEY we already have here

19
00:00:54.390 --> 00:00:57.430
the typescript file, so we can just copy that

20
00:00:57.430 --> 00:01:02.170
into index html and replace YOUR_API_KEY with it.

21
00:01:02.170 --> 00:01:06.120
And also get rid of this "&amp;callback=initMap"

22
00:01:06.120 --> 00:01:07.150
thing at the end,

23
00:01:07.150 --> 00:01:10.240
this would trigger a function as soon as this map is loaded,

24
00:01:10.240 --> 00:01:13.430
or as this SDK is loaded, and that's not

25
00:01:13.430 --> 00:01:14.843
something I want here.

26
00:01:15.840 --> 00:01:19.760
So, with that, we're loading this SDK,

27
00:01:19.760 --> 00:01:22.820
and now we can use it, and here's where we'll

28
00:01:22.820 --> 00:01:24.250
have a problem.

29
00:01:24.250 --> 00:01:26.210
I want to use it render a map,

30
00:01:26.210 --> 00:01:28.710
and rendering a map is actually straight forward.

31
00:01:28.710 --> 00:01:31.070
In the official docs, we see that in the end

32
00:01:31.070 --> 00:01:33.870
we have to instantiate this google.maps.Map

33
00:01:33.870 --> 00:01:36.870
constructor function, pass a center to it,

34
00:01:36.870 --> 00:01:38.960
which is essentially...

35
00:01:38.960 --> 00:01:41.720
This pair of coordinates we're getting from the back,

36
00:01:41.720 --> 00:01:43.250
and add a zoom level.

37
00:01:43.250 --> 00:01:45.820
So we can just copy this,

38
00:01:45.820 --> 00:01:48.710
and then here once we've got the coordinates,

39
00:01:48.710 --> 00:01:50.010
execute this code,

40
00:01:50.010 --> 00:01:53.750
and maybe store map here in a constant named "Map."

41
00:01:53.750 --> 00:01:55.117
But of course we get an error here.

42
00:01:55.117 --> 00:01:57.600
"Cannot find name google,"

43
00:01:57.600 --> 00:02:01.320
and that makes sense, this will not be available globally,

44
00:02:01.320 --> 00:02:03.380
but typescript doesn't know that.

45
00:02:03.380 --> 00:02:06.300
It will be available globally, because of this

46
00:02:06.300 --> 00:02:08.343
JavaScript SDK we're importing.

47
00:02:09.390 --> 00:02:12.270
But of course typescript doesn't know this.

48
00:02:12.270 --> 00:02:14.200
You'll learn what you can do there,

49
00:02:14.200 --> 00:02:19.200
you can of course use "declare var google,"

50
00:02:19.990 --> 00:02:21.020
and set this to any.

51
00:02:21.020 --> 00:02:22.887
With that you're telling typescript,

52
00:02:22.887 --> 00:02:26.480
"It's fine, this will exist, don't worry."

53
00:02:26.480 --> 00:02:29.060
We can do that, and the error goes away.

54
00:02:29.060 --> 00:02:31.370
Now we can also use our coordinates here,

55
00:02:31.370 --> 00:02:33.480
instead of the hard-coded ones,

56
00:02:33.480 --> 00:02:36.430
and if we also want to render a marker,

57
00:02:36.430 --> 00:02:37.930
that's also possible.

58
00:02:37.930 --> 00:02:39.517
In the official docs, simply click on,

59
00:02:39.517 --> 00:02:41.520
"Adding a map with a marker,"

60
00:02:41.520 --> 00:02:44.600
we learn, that adding a marker is straight-forward

61
00:02:44.600 --> 00:02:47.223
we just use the map created,

62
00:02:49.040 --> 00:02:50.950
and create a marker with this command,

63
00:02:50.950 --> 00:02:52.980
and point at this map.

64
00:02:52.980 --> 00:02:56.130
So we'll just copy this code snippet here,

65
00:02:56.130 --> 00:02:59.160
and back in our code, after we created the map,

66
00:02:59.160 --> 00:03:01.160
I create my marker like this,

67
00:03:01.160 --> 00:03:04.173
and the position here again are my coordinates.

68
00:03:05.040 --> 00:03:06.600
So this will now render a map,

69
00:03:06.600 --> 00:03:08.580
and place a marker on it.

70
00:03:08.580 --> 00:03:10.350
The only remaining thing is that,

71
00:03:10.350 --> 00:03:12.350
we need to ensure that this map

72
00:03:12.350 --> 00:03:14.010
is rendered in the right place.

73
00:03:14.010 --> 00:03:16.670
By default it looks for a element with an I.D. "map"

74
00:03:16.670 --> 00:03:18.720
and that is what we have here.

75
00:03:18.720 --> 00:03:20.470
But if you chose a different I.D. here,

76
00:03:20.470 --> 00:03:23.473
make sure to adjust this in your typescript code.

77
00:03:24.610 --> 00:03:26.890
With that if we save this,

78
00:03:26.890 --> 00:03:30.640
it compiles without errors,

79
00:03:30.640 --> 00:03:33.450
and now if I enter an address here,

80
00:03:33.450 --> 00:03:35.320
it should render this.

81
00:03:35.320 --> 00:03:38.650
So this is working, and we can adjust the zoom level here,

82
00:03:38.650 --> 00:03:40.370
to be zoomed in a bit more,

83
00:03:40.370 --> 00:03:42.910
for example changed it to 16,

84
00:03:42.910 --> 00:03:45.640
and now if we try this we can see it a bit clearer.

85
00:03:45.640 --> 00:03:47.480
But it is working, and that is what we can tell.

86
00:03:47.480 --> 00:03:50.420
We can scroll around, and use this map.

87
00:03:50.420 --> 00:03:53.340
This is all nice, but it's not optimal.

88
00:03:53.340 --> 00:03:56.760
Of course it works, thanks to "declare var google,"

89
00:03:56.760 --> 00:03:58.810
we're not getting any errors.

90
00:03:58.810 --> 00:04:01.550
But we're also not getting any type support.

91
00:04:01.550 --> 00:04:02.960
IF I introduce an error,

92
00:04:02.960 --> 00:04:06.730
if I for example refer to ".map" instead of ".maps"

93
00:04:06.730 --> 00:04:08.860
it compiles without issues,

94
00:04:08.860 --> 00:04:11.280
and it only crashes in production thereafter.

95
00:04:11.280 --> 00:04:13.150
If I try to render a map.

96
00:04:13.150 --> 00:04:16.493
Now I get an error here, caught by our error handler.

97
00:04:17.470 --> 00:04:19.770
So this is of course not what we want.

98
00:04:19.770 --> 00:04:22.880
We want type support, we wanna handle dump mistakes

99
00:04:22.880 --> 00:04:27.380
like this, during development, and not at runtime.

100
00:04:27.380 --> 00:04:31.080
So how can we ensure the typescript knows Google Maps?

101
00:04:31.080 --> 00:04:32.470
Types to the rescue.

102
00:04:32.470 --> 00:04:34.160
If you search for "types google maps,"

103
00:04:34.160 --> 00:04:37.350
you find various packages, which adds types for,

104
00:04:37.350 --> 00:04:38.800
well, Google Maps.

105
00:04:38.800 --> 00:04:41.050
Now we didn't install the Google Maps package

106
00:04:41.050 --> 00:04:44.130
through NPM, but we can still install types

107
00:04:44.130 --> 00:04:46.160
for that package through NPM.

108
00:04:46.160 --> 00:04:48.790
And here I'll go for this first package,

109
00:04:48.790 --> 00:04:51.560
and simply install that into our project.

110
00:04:51.560 --> 00:04:54.030
So let's go back, quick development server,

111
00:04:54.030 --> 00:04:56.400
and run "npm install --save-dev

112
00:04:58.613 --> 00:05:01.560
"@types/googlemaps," one word.

113
00:05:01.560 --> 00:05:03.303
That was the name of this package.

114
00:05:04.200 --> 00:05:08.410
This will now install global types for this package.

115
00:05:08.410 --> 00:05:11.500
So now if I restart this with NPM start,

116
00:05:11.500 --> 00:05:15.180
let's see if we have a better situation.

117
00:05:15.180 --> 00:05:18.090
If I remove this "declare var" thing here,

118
00:05:18.090 --> 00:05:19.940
or I comment it out.

119
00:05:19.940 --> 00:05:23.290
It still compiles, now this google maps thing here

120
00:05:23.290 --> 00:05:27.010
is detected, and if I try to access ".map" here,

121
00:05:27.010 --> 00:05:29.880
I get an error, I also get auto-completion now

122
00:05:29.880 --> 00:05:32.410
and it sees, "Yes, there is a maps thing."

123
00:05:32.410 --> 00:05:35.100
It also tells me that this map constructor,

124
00:05:35.100 --> 00:05:38.660
needs a "Div" or an "Element" where it should render

125
00:05:38.660 --> 00:05:40.270
the map as first argument,

126
00:05:40.270 --> 00:05:42.850
and then some options for the map.

127
00:05:42.850 --> 00:05:45.170
So this is now working here, as it should.

128
00:05:45.170 --> 00:05:47.600
And this is of course a great step forward,

129
00:05:47.600 --> 00:05:51.170
because now we have our working application,

130
00:05:51.170 --> 00:05:53.490
and it did work before as well.

131
00:05:53.490 --> 00:05:56.050
But now it works also with types,

132
00:05:56.050 --> 00:05:58.500
and with a proper type support.

133
00:05:58.500 --> 00:06:00.690
And this staffer is another great practice,

134
00:06:00.690 --> 00:06:03.700
for how you build applications with type script

135
00:06:03.700 --> 00:06:06.250
and use certain types of features,

136
00:06:06.250 --> 00:06:08.470
but it's especially a great practice for how

137
00:06:08.470 --> 00:06:11.540
you can work with third party libraries.

138
00:06:11.540 --> 00:06:15.421
Some, like "axios" bring their own types.

139
00:06:15.421 --> 00:06:18.810
Others, aren't even installed with NPM,

140
00:06:18.810 --> 00:06:21.320
and yet you can add types with an

141
00:06:21.320 --> 00:06:23.230
appropriate types package.

142
00:06:23.230 --> 00:06:25.620
I hope this module was helpful,

143
00:06:25.620 --> 00:06:27.040
for understanding this,

144
00:06:27.930 --> 00:06:30.650
and for all future projects you might be working on,

145
00:06:30.650 --> 00:06:33.230
where you most likely will also work,

146
00:06:33.230 --> 00:06:35.363
with certain third party libraries.

