WEBVTT

00:02.230 --> 00:04.860
Người hướng dẫn: Liên quan một cách lỏng lẻo

00:04.860 --> 00:09.760
đến ý tưởng về Tuple là ý tưởng về việc có một vài số nhận dạng cụ thể, các hằng số toàn

00:09.760 --> 00:12.710
cầu mà bạn có thể đang làm việc với ứng dụng của mình,

00:12.710 --> 00:15.020
mà bạn muốn biểu thị dưới dạng số nhưng bạn

00:15.020 --> 00:18.530
muốn chỉ định một con người có thể đọc được. nhãn mác.

00:18.530 --> 00:20.500
Và đối với điều đó, bạn có loại Enum.

00:20.500 --> 00:23.800
Một lần nữa, điều đó tồn tại trong một số ngôn ngữ lập trình cao hơn.

00:23.800 --> 00:25.780
Mặc dù vậy, JavaScript không biết điều đó.

00:25.780 --> 00:26.613
Nó trông như thế này.

00:26.613 --> 00:28.110
Đây là cách bạn tạo một enum.

00:28.110 --> 00:30.540
Bạn sử dụng từ khóa enum, chỉ tồn tại trong thế

00:30.540 --> 00:33.060
giới TypeScript, không có trong JavaScript,

00:33.060 --> 00:34.840
ở đó sau khi bạn có dấu ngoặc nhọn

00:34.840 --> 00:36.810
và sau đó là số nhận dạng của bạn.

00:36.810 --> 00:39.141
Và loại này, được TypeScript thêm vào,

00:39.141 --> 00:42.030
cung cấp cho bạn một danh sách liệt kê.

00:42.030 --> 00:45.070
Vì vậy, những nhãn này cuối cùng chỉ được dịch sang các số bắt

00:45.070 --> 00:48.580
đầu từ 0, nơi bạn có các nhãn có thể đọc được bằng con người mà bạn có thể

00:48.580 --> 00:50.133
làm việc với mã của mình.

00:51.310 --> 00:53.500
Để cho bạn thấy một ví dụ, hãy quay lại đây với

00:53.500 --> 00:55.620
con người của chúng ta với vai trò của nó.

00:55.620 --> 00:58.010
Tôi sẽ sao chép mã đó và sau đó nhận xét nó vì

00:58.010 --> 00:59.710
tôi sẽ thay đổi nó một chút.

00:59.710 --> 01:01.600
Và sau đó, ở đây, tôi sẽ loại bỏ phép

01:01.600 --> 01:05.380
gán rõ ràng đó và thay vào đó quay lại suy luận, bởi vì bây giờ tôi

01:05.380 --> 01:07.150
sẽ thay đổi vai trò.

01:07.150 --> 01:10.330
Và bây giờ, giả sử chúng ta muốn có quản trị viên, tác giả

01:10.330 --> 01:12.350
và có thể là người dùng chỉ đọc.

01:12.350 --> 01:14.750
Quản trị viên phải có ID bằng

01:14.750 --> 01:18.660
0, người dùng chỉ đọc có một, tác giả có hai.

01:18.660 --> 01:21.160
Tất nhiên, bây giờ, chúng ta có thể lưu trữ chính xác như

01:21.160 --> 01:22.550
thế này với những con số này.

01:22.550 --> 01:24.830
Một nhược điểm là chúng tôi luôn có thể thêm

01:24.830 --> 01:26.670
một số mà chúng tôi có thể không có

01:26.670 --> 01:30.320
vai trò và nếu sau đó chúng tôi nhập mã của mình, hãy thử trích xuất vai

01:30.320 --> 01:33.392
trò và sử dụng kiểm tra nếu không có thể dẫn đến lỗi.

01:33.392 --> 01:37.160
Ngoài ra, chúng tôi, với tư cách là nhà phát triển, rất khó

01:37.160 --> 01:39.690
hiểu người dùng này có vai trò gì.

01:39.690 --> 01:41.310
Là nó cho các tác giả?

01:41.310 --> 01:43.020
Hay nó đã được đọc trên người dùng?

01:43.020 --> 01:46.140
Bạn có thể quên điều này sau khi tạm dừng lâu hơn,

01:46.140 --> 01:48.810
khi làm việc trong các nhóm lớn hơn, v.v.

01:48.810 --> 01:50.540
Vì vậy, với tư cách là nhà phát

01:50.540 --> 01:54.310
triển, bạn có thể muốn các số nhận dạng có thể đọc được của con người,

01:54.310 --> 01:58.630
chẳng hạn như QUẢN TRỊ VIÊN và NGƯỜI DÙNG CHỈ ĐỌC, đại loại như vậy.

01:58.630 --> 02:00.240
Bây giờ, tất nhiên, chúng ta có thể sử dụng

02:00.240 --> 02:02.880
nó, chúng ta có thể làm việc với các giá trị chuỗi như vậy.

02:02.880 --> 02:06.100
Vấn đề là nếu sau đó chúng tôi cần kiểm tra if, chúng tôi sẽ

02:06.100 --> 02:11.100
kiểm tra xem vai trò của người đó có bằng không, đó có phải là READ_ONLY_USER không?

02:12.260 --> 02:13.500
Hay đó là một từ?

02:13.500 --> 02:15.380
Là nó với dấu gạch dưới?

02:15.380 --> 02:17.440
Bạn thấy đấy, sau đó chúng ta phải nhớ chúng ta

02:17.440 --> 02:19.020
đã viết những chuỗi này như thế nào,

02:19.020 --> 02:20.970
chúng ta có văn bản chính xác nào trong đó.

02:20.970 --> 02:24.330
Bởi vì chuỗi này với các dấu gạch ngang giữa các

02:24.330 --> 02:27.430
từ là tất nhiên, không giống như chuỗi này.

02:27.430 --> 02:29.973
Vì vậy, ở đây, chúng tôi sẽ không bao giờ đưa

02:31.150 --> 02:36.120
nó vào đó, nó chỉ được đọc nếu bạn cố gắng biên dịch và in nó, bởi vì, tốt, việc kiểm

02:36.120 --> 02:39.170
tra đơn giản là không mang lại kết quả đúng.

02:39.170 --> 02:42.150
Chúng tôi không có vai trò đó đối với người, do đó, chúng tôi không nhận

02:42.150 --> 02:43.930
được đầu ra ở đây trong bảng điều khiển.

02:43.930 --> 02:47.290
Vì vậy, định danh chuỗi, cũng có nhược điểm.

02:47.290 --> 02:50.340
Bây giờ đối với các kịch bản như vậy, việc xác định các hằng số toàn

02:50.340 --> 02:52.340
cầu là khá phổ biến trong JavaScript.

02:52.340 --> 02:55.580
Ví dụ: quản trị viên, sau đó giữ các giá trị

02:55.580 --> 02:58.053
nhất định như số hoặc chuỗi, cả hai

02:58.980 --> 03:00.060
đều có thể.

03:00.060 --> 03:01.700
Tất nhiên, các con số có thể giúp

03:01.700 --> 03:04.370
chúng ta tiết kiệm thêm một số mã và bit trong bộ nhớ.

03:04.370 --> 03:09.370
Và ở đó chúng ta có thể có ADMIN, READ_ONLY và AUTHOR như thế này

03:09.390 --> 03:10.870
và ở dưới kia, sau đó

03:10.870 --> 03:13.750
chúng ta chỉ cần sử dụng vai trò đó.

03:13.750 --> 03:16.460
Bây giờ, lợi thế của điều đó là chúng ta có thể sử dụng điều này ở mọi nơi

03:16.460 --> 03:17.343
trong mã của mình.

03:18.230 --> 03:22.600
Và do đó, ở đây chẳng hạn, nếu tôi chạy mã này, nếu tôi biên dịch nó và sau đó chúng tôi

03:22.600 --> 03:23.680
để mã này tải lại, chúng

03:25.260 --> 03:28.570
tôi sẽ xem với tư cách là quản trị viên ở đây, vì vậy mã này hoạt

03:28.570 --> 03:31.520
động và đây là mẫu phổ biến trong JavaScript.

03:31.520 --> 03:34.190
Nhược điểm là bây giờ một lần nữa, vai trò được suy ra

03:34.190 --> 03:37.290
chỉ là một số, vì vậy chúng tôi có thể lưu trữ bất kỳ số nào trong

03:37.290 --> 03:39.630
đó ngay cả một số mà chúng tôi không hỗ trợ.

03:39.630 --> 03:42.450
Ngoài ra, chúng ta phải xác định tất cả các hằng số này,

03:42.450 --> 03:44.060
chúng ta phải quản lý chúng.

03:44.060 --> 03:45.920
Đây là nơi mà một enum có thể giúp chúng ta tiết kiệm công việc.

03:45.920 --> 03:48.730
Điều này là hoàn toàn tốt, nhưng một enum làm cho nó dễ dàng hơn.

03:48.730 --> 03:50.970
Chúng ta tạo một enum với từ khóa enum,

03:50.970 --> 03:54.250
chúng ta có thể đặt tên cho nó là Vai trò, quy ước là

03:54.250 --> 03:55.550
bắt đầu bằng ký tự viết

03:55.550 --> 03:58.620
hoa vì enum cũng là một loại tùy chỉnh.

03:58.620 --> 04:01.760
Đây là loại tùy chỉnh đầu tiên của bạn, chúng tôi sẽ viết nhiều hơn nữa

04:01.760 --> 04:03.860
trong khóa học này, đây là loại đầu tiên.

04:03.860 --> 04:06.560
Và sau tên của loại bạn muốn gán cho enum

04:06.560 --> 04:09.520
này, bạn thêm dấu ngoặc nhọn, cứ như vậy, không

04:09.520 --> 04:14.040
dấu hai chấm, không dấu bằng, chỉ dấu ngoặc nhọn sau tên.

04:14.040 --> 04:15.800
Sau đó, một dấu chấm phẩy.

04:15.800 --> 04:19.433
Và bây giờ tại đây, bạn có thể chỉ định các giá trị của mình

04:20.650 --> 04:21.973
như quản trị viên, chỉ

04:22.950 --> 04:24.300
đọc và tác giả.

04:24.300 --> 04:28.180
Và đằng sau hậu trường cái này ở đây nhận số 0, cái

04:28.180 --> 04:31.780
này ở đây là số một, cái này ở đây là số hai.

04:31.780 --> 04:34.650
Và sau đó tại đây, bạn có thể truy cập Vai trò. ADMIN, giống như trên

04:34.650 --> 04:37.840
một đối tượng, bạn truy cập mã định danh của mình.

04:37.840 --> 04:40.380
Và bạn cũng có thể sử dụng nó ở bất kỳ nơi nào khác trong mã

04:40.380 --> 04:43.890
của mình, ở đây chúng tôi có thể kiểm tra xem vai trò có phải là TÁC GIẢ hay không,

04:43.890 --> 04:46.710
sau đó là tác giả in và tất nhiên, chúng tôi sẽ không thấy điều đó

04:46.710 --> 04:50.630
nếu tôi chạy nó ngay bây giờ vì chúng tôi đã chỉ định vai trò QUẢN TRỊ VIÊN tại đây .

04:50.630 --> 04:53.333
Nhưng điểm mấu chốt là chúng tôi đã làm tất

04:53.333 --> 04:57.490
cả những điều đó với sự trợ giúp của enum, thứ gán nhãn cho các số.

04:57.490 --> 04:59.210
Nếu chúng ta xem xét điều đó trong JavaScript.

04:59.210 --> 05:02.830
Vì vậy, trong mã được biên dịch, chúng tôi thấy đây là cách nó được xây dựng lại.

05:02.830 --> 05:05.080
Cuối cùng, nó được xây dựng lại với một nếu ở đây.

05:05.080 --> 05:07.940
Vì vậy, chức năng thực thi chính nó.

05:07.940 --> 05:11.770
Và Vai trò ở đây cuối cùng chỉ đơn giản là được quản lý như một đối tượng,

05:11.770 --> 05:14.550
có thuộc tính quản trị viên là thuộc tính chỉ đọc và

05:14.550 --> 05:17.330
thuộc tính AUTHOR, sau đó chúng tôi lưu trữ các giá

05:17.330 --> 05:19.970
trị số của mình ở đây, bạn có thể nói như vậy.

05:19.970 --> 05:21.960
Vì vậy, nó phức tạp hơn thế một chút, nhưng

05:21.960 --> 05:24.210
đó là điều TypeScript cuối cùng thực hiện

05:24.210 --> 05:26.700
ở đây để sao chép cấu trúc enum này trong mã JavaScript,

05:26.700 --> 05:28.560
khi nó biên dịch mã.

05:28.560 --> 05:30.700
Ở đây với tư cách là nhà phát triển, chúng tôi chỉ

05:30.700 --> 05:32.680
cần có những con số được tạo thuận tiện này.

05:32.680 --> 05:34.290
Nếu bạn di chuột qua chúng, bạn sẽ

05:34.290 --> 05:36.520
thấy số mà chúng tôi sẽ lưu trữ ở đó và bạn có thể

05:36.520 --> 05:39.883
sử dụng những số này ở đây theo cách mà con người có thể đọc được.

05:40.750 --> 05:42.840
Bây giờ đối với enums, bạn cũng không bị

05:42.840 --> 05:44.790
hạn chế đối với hành vi mặc định.

05:44.790 --> 05:47.470
Giả sử vì một số lý do, bạn không muốn bắt đầu

05:47.470 --> 05:50.533
bằng số 0 làm số bắt đầu, thì bạn có thể thêm dấu bằng

05:50.533 --> 05:54.080
ở đây sau số nhận dạng của mình và nhập bất kỳ số nào khác và

05:54.080 --> 05:56.610
bây giờ quản trị viên được gán cho số năm

05:56.610 --> 05:59.610
và các số nhận dạng khác sau mã định danh nơi bạn

05:59.610 --> 06:02.150
chỉ định giá trị, chọn giá trị đó và chỉ cần

06:02.150 --> 06:04.580
tăng giá trị bắt đầu này.

06:04.580 --> 06:08.140
Vì vậy, bây giờ chúng ta có tốt, sáu, bảy, thay vì không, một, hai.

06:08.140 --> 06:10.642
Tất nhiên, bạn cũng có thể gán giá trị của riêng

06:10.642 --> 06:14.820
mình cho tất cả các số nhận dạng này, nếu bạn cần số của riêng mình.

06:14.820 --> 06:17.070
Bạn cũng không bị hạn chế đối với các

06:17.070 --> 06:19.390
số, bạn cũng có thể nhập văn bản ở đây hoặc

06:19.390 --> 06:21.950
thậm chí trộn nó như tôi đang làm ở đây, bất

06:21.950 --> 06:24.900
cứ thứ gì ở đó, nhưng thường thì mặc định của các số

06:24.900 --> 06:28.530
tăng dần bắt đầu từ 0 là điều bạn muốn, nhưng nếu bạn cần một

06:28.530 --> 06:31.530
hành vi khác, nếu bạn muốn sử dụng một chuỗi ở đây,

06:31.530 --> 06:34.850
sau đó là một số ở đây, và ở đây cũng là một số hoặc có thể

06:34.850 --> 06:37.890
là một chuỗi số, thì bạn hoàn toàn có thể làm điều đó,

06:37.890 --> 06:40.880
lợi thế là bạn xác định nó ở đó, và sau đó, bạn luôn

06:40.880 --> 06:44.700
chỉ tham chiếu loại Vai trò của mình với loại tùy chỉnh mà bạn đã

06:44.700 --> 06:46.400
tạo, với enum tùy chỉnh này

06:46.400 --> 06:48.270
mà bạn đã tạo.

06:48.270 --> 06:50.320
Và bạn sử dụng điều đó trong kiểm

06:50.320 --> 06:52.970
tra if và bài tập loại của mình, và bạn ổn.

06:52.970 --> 06:56.090
Đó là sức mạnh của enum và nó là một cấu trúc tuyệt vời

06:56.090 --> 06:59.420
bất cứ khi nào bạn cần số nhận dạng mà con người có thể đọc

06:59.420 --> 07:03.173
được và có một số giá trị được ánh xạ đằng sau hậu trường.
