WEBVTT

00:02.290 --> 00:03.910
Instructeur: Dus om Webpack te vertellen

00:03.910 --> 00:06.710
wat te doen met TypeScript bestanden, moeten we hier een nieuw item

00:06.710 --> 00:08.830
toevoegen aan het configuratie object.

00:08.830 --> 00:11.510
En dat is de module eigenschap.

00:11.510 --> 00:14.020
Module neemt ook een JavaScript-object om het vervolgens

00:14.020 --> 00:15.470
te configureren.

00:15.470 --> 00:17.440
Een module is uiteindelijk gewoon een bestand,

00:17.440 --> 00:20.520
dus hier vertellen we Webpack hoe het moet werken met de bestanden die het

00:20.520 --> 00:22.940
vindt, zoals bij de app. ts bestand, en zodra

00:22.940 --> 00:25.520
het dat bestand begrijpt, hoe om te gaan met

00:25.520 --> 00:27.290
alle invoer in het bestand.

00:27.290 --> 00:29.800
Dus hoe moet Webpack omgaan met deze bestanden?

00:29.800 --> 00:33.640
Wel, we vertellen Webpack door hier een rules array toe te voegen, omdat je meerdere

00:33.640 --> 00:35.430
regels kunt instellen die op alle bestanden

00:35.430 --> 00:37.300
moeten worden toegepast.

00:37.300 --> 00:40.690
Hier hebben we er maar één nodig, maar in meer complexe projecten, waar

00:40.690 --> 00:44.030
u Webpack ook wil gebruiken om CSS-bestanden, of afbeeldingen, of iets

00:44.030 --> 00:46.140
dergelijks af te handelen, kunt u meer regels

00:46.140 --> 00:49.220
toevoegen voor verschillende soorten bestanden.

00:49.220 --> 00:51.500
En zoals eerder vermeld, zijn de officiële docs een

00:51.500 --> 00:53.840
geweldige plaats om meer te leren over loaders, die je

00:53.840 --> 00:55.730
uiteindelijk gebruikt om Webpack meer te leren

00:55.730 --> 00:57.980
over verschillende bestanden, en om meer te leren

00:57.980 --> 00:59.720
over Webpack in het algemeen.

00:59.720 --> 01:02.560
Dus hier zullen we een dergelijke lader toevoegen.

01:02.560 --> 01:06.110
Een loader is gewoon een pakket dat Webpack vertelt hoe het moet omgaan

01:06.110 --> 01:07.780
met bepaalde bestanden, en natuurlijk

01:07.780 --> 01:09.960
hebben we hier de ts loader, die ons helpt Webpack

01:09.960 --> 01:11.520
te vertellen hoe het moet omgaan

01:11.520 --> 01:13.690
met TypeScript bestanden.

01:13.690 --> 01:16.850
We voegen dus een regel toe die gewoon een JavaScript-object

01:16.850 --> 01:19.720
is, waar we allereerst een testeigenschap toevoegen.

01:19.720 --> 01:22.950
Dit beschrijft een test die Webpack zal uitvoeren op elk

01:22.950 --> 01:26.510
bestand dat het vindt om na te gaan of deze regel hier van toepassing

01:26.510 --> 01:28.550
is op dat bestand of niet.

01:28.550 --> 01:31.080
En de test hier is een reguliere expressie.

01:31.080 --> 01:33.610
En daar wil ik Webpack vertellen dat elk

01:33.610 --> 01:36.950
bestand dat eindigt op . ts moeten worden gebruikt of door

01:36.950 --> 01:38.913
deze regel moeten worden behandeld.

01:39.860 --> 01:42.940
Een reguliere expressie die controleert op de bestandsextensie kan hier

01:42.940 --> 01:47.550
een backslash gebruiken, en dan . en dan een dollarteken.

01:47.550 --> 01:50.840
Dit is onze reguliere expressie die Webpack vertelt dat je wilt controleren

01:50.840 --> 01:54.593
op bestanden die eindigen op . ts.

01:55.560 --> 01:58.810
Dan moet je ook specificeren wat Webpack met die bestanden

01:58.810 --> 02:02.590
moet doen, en dat doe je hier met het use keyword.

02:02.590 --> 02:05.290
En daar specificeert u de loader die Webpack moet

02:05.290 --> 02:07.590
gebruiken, in mijn geval ts-loader.

02:07.590 --> 02:10.600
We vertellen Webpack dus dat elk TypeScript-bestand dat het vindt,

02:10.600 --> 02:12.720
behandeld moet worden door de TypeScript-lader,

02:12.720 --> 02:16.010
die dan op zijn beurt weet wat hij met zo'n bestand moet doen.

02:16.010 --> 02:17.680
De ts-loader zal automatisch

02:17.680 --> 02:20.330
de tsconfig meenemen. json bestand in aanmerking genomen,

02:20.330 --> 02:23.430
zodat we hier geen extra configuratie hoeven op te geven.

02:23.430 --> 02:26.050
Slechts één configuratie die nooit kwaad

02:26.050 --> 02:29.910
kan, sluit node modules uit als een reguliere expressie zodat

02:29.910 --> 02:33.773
Webpack ook niet probeert te kijken in node modules.

02:35.130 --> 02:38.400
Daarmee moeten we één extra configuratie toevoegen

02:38.400 --> 02:42.800
na de moduleconfiguratie, en dat is de resolve key.

02:42.800 --> 02:47.800
Daar vertellen we Webpack welke bestandsextensies het toevoegt aan

02:47.820 --> 02:49.750
de imports die het vindt.

02:49.750 --> 02:52.440
Ik zei dat Webpack zelf extensies zou toevoegen,

02:52.440 --> 02:56.160
en standaard zal het zoeken naar . js bestanden.

02:56.160 --> 02:59.220
Nu willen we dat Webpack zoekt naar . ts bestanden, en dan voor hier

02:59.220 --> 03:01.280
in resolve, kunnen we een extensions property

03:01.280 --> 03:05.390
toevoegen, ingesteld als gelijk aan een array, en Webpack vertellen dat het

03:05.390 --> 03:08.390
moet zoeken naar . ts-bestanden

03:08.390 --> 03:10.640
en . js bestanden.

03:10.640 --> 03:13.360
Dus nu zal Webpack in principe zoeken naar dergelijke

03:13.360 --> 03:16.900
bestanden en dan alle bestanden bundelen die deze extensies hebben,

03:16.900 --> 03:18.723
die u importeert.

03:19.760 --> 03:22.770
En daarmee is onze opstelling voorlopig bijna klaar,

03:22.770 --> 03:24.690
ons configuratiebestand voorlopig

03:24.690 --> 03:26.150
tenminste.

03:26.150 --> 03:28.730
Daarmee moeten we ook naar tsconfig

03:28.730 --> 03:33.070
gaan, en daar zorgen dat je sourceMap op true zet.

03:33.070 --> 03:35.210
Dit zal ons helpen bij het debuggen van onze

03:35.210 --> 03:37.130
code, en Webpack ondersteunt dit ook.

03:37.130 --> 03:39.850
Daar moeten we nu ook gewoon een item toevoegen,

03:39.850 --> 03:41.340
misschien hier onder output,

03:41.340 --> 03:43.710
en dat is een devtool sleutel.

03:43.710 --> 03:47.210
En daar moet de waarde inline-source-map zijn

03:47.210 --> 03:48.510
als een string.

03:48.510 --> 03:51.620
Dit vertelt Webpack dan dat er reeds gegenereerde bronkaarten

03:51.620 --> 03:53.700
zullen zijn, die het moet extraheren

03:53.700 --> 03:57.210
en in principe correct moet aansluiten op de bundel die het genereert,

03:57.210 --> 04:00.170
zodat we weliswaar zo'n bundel krijgen, maar toch een

04:00.170 --> 04:03.603
goede ontwikkelingservaring hebben.

04:05.830 --> 04:08.360
Nu kunnen we daarmee Webpack gebruiken, en de vraag

04:08.360 --> 04:09.823
is hoe gebruiken we dat?

04:11.000 --> 04:14.720
Een eenvoudige manier om het te gebruiken is om naar het pakket te gaan. json bestand, en laten we daar

04:14.720 --> 04:16.650
een script toevoegen.

04:16.650 --> 04:18.440
Bijvoorbeeld, bouwen.

04:18.440 --> 04:19.810
Je kunt het elke naam geven

04:19.810 --> 04:21.620
die je wilt in de scripts sectie.

04:21.620 --> 04:23.930
En daar gewoon Webpack uitvoeren,

04:23.930 --> 04:26.453
dus gewoon webpack typen zoals dit.

04:27.560 --> 04:29.880
Laten we nu ook naar de dist map gaan, en

04:29.880 --> 04:32.993
uiteindelijk alles verwijderen wat daar staat, en

04:34.000 --> 04:36.870
met dat opslaan, nu npm run build uitvoeren en eens

04:36.870 --> 04:38.663
kijken of dat werkt.

04:39.970 --> 04:43.000
En het mislukt...

04:45.440 --> 04:47.800
Ja, ik heb gewoon een typfout gemaakt,

04:47.800 --> 04:51.440
dat moet niet devtools zijn, maar devtool hier.

04:51.440 --> 04:53.830
Dus verander dit in devtool in het configuratiebestand

04:53.830 --> 04:56.143
en laten we nu npm run build herhalen.

04:59.500 --> 05:02.620
En daarmee kun je de waarschuwing die je hier krijgt negeren.

05:02.620 --> 05:04.230
Je zult zien dat je in het dist-bestand

05:04.230 --> 05:06.410
een gebundeld js-bestand hebt.

05:06.410 --> 05:08.150
En wat je daar ziet is ook al

05:08.150 --> 05:09.960
behoorlijk onleesbare code,

05:09.960 --> 05:14.060
want we hebben deze minificatie in actie hier eigenlijk.

05:14.060 --> 05:18.680
Dus dit is eigenlijk ook al deze geoptimaliseerde code.

05:18.680 --> 05:21.410
Voordat we zien hoe we ook hier met verschillende

05:21.410 --> 05:23.490
configuraties kunnen werken, gaan we

05:23.490 --> 05:26.120
eerst naar de index. html bestand, en passen

05:26.120 --> 05:27.510
onze importen hier en

05:27.510 --> 05:30.350
punt bundel aan. js, en voor het moment,

05:30.350 --> 05:32.220
aangezien we Webpack Dev Server

05:32.220 --> 05:35.140
nog niet gebruiken, laten we npm start draaien

05:35.140 --> 05:38.480
om die index op te halen. html bestand opnieuw.

05:38.480 --> 05:40.510
En als je nu deze pagina

05:40.510 --> 05:44.890
opnieuw laadt, zie je dat dit werkt!

05:44.890 --> 05:46.610
Als we hier iets invoeren, werkt

05:46.610 --> 05:49.230
ons project zoals het hoort, en importeert

05:49.230 --> 05:52.030
het hier het gebundelde js-bestand, dus slechts

05:52.030 --> 05:56.200
één bestand in plaats van al deze afzonderlijke bestanden.

05:56.200 --> 05:59.020
En dat is al een verbetering.

05:59.020 --> 06:01.640
Hier hebben we al de gebundelde code

06:01.640 --> 06:05.410
die al deze onnodige htp-verzoeken vermijdt.

06:05.410 --> 06:07.690
En als je trouwens naar de sources tab gaat,

06:07.690 --> 06:09.420
en je wil je code debuggen, dan vind

06:09.420 --> 06:11.250
je deze Webpack map, en daarin een

06:11.250 --> 06:12.770
source map, en daar kan je naar

06:12.770 --> 06:15.300
je TypeScript bestanden gaan.

06:15.300 --> 06:19.090
En bijvoorbeeld, hier, op project-input, kunt u ook

06:19.090 --> 06:22.110
een breekpunt instellen op gatherUserInput,

06:22.110 --> 06:24.970
en als u nu op de knop drukt, pauzeert hij daar,

06:24.970 --> 06:27.680
en kunt u uw code debuggen.

06:27.680 --> 06:29.650
En dat zijn de bronkaarten die binnenkomen,

06:29.650 --> 06:31.200
die ons echt helpen bij het ontwikkelen

06:31.200 --> 06:34.050
en die ons leven als ontwikkelaar makkelijker maken.

06:34.050 --> 06:37.520
We hebben deze geoptimaliseerde code, maar dankzij de bronkaarten kunnen

06:37.520 --> 06:40.750
we hier onze oorspronkelijke TypeScript-code debuggen.

06:40.750 --> 06:43.260
Dus we hebben al een vrij geweldige setup,

06:43.260 --> 06:46.280
die ons al veel optimalisaties geeft, laten we

06:46.280 --> 06:48.440
dit nu afmaken en ervoor zorgen dat

06:48.440 --> 06:52.050
we daadwerkelijk de Webpack Dev Server inbegrepen hebben,

06:52.050 --> 06:54.440
en dan hebben we eigenlijk twee workflows,

06:54.440 --> 06:58.443
een voor productie, en een voor ontwikkeling.
