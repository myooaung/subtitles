WEBVTT

00:02.160 --> 00:05.070
-: Im Moment benutze ich nicht den webpack-dev Server.

00:05.070 --> 00:07.680
Jetzt ist die Verwendung jedoch sehr einfach.

00:07.680 --> 00:10.030
Wir müssen nur das Paket abgeben. json-Datei und

00:10.030 --> 00:12.430
verwenden Sie dort statt "lite-server"

00:12.430 --> 00:17.380
nun "webpack-dev-server", etwa so.

00:17.380 --> 00:20.020
Und jetzt starten wir wieder npm start.

00:20.020 --> 00:21.560
Sie werden sehen, dass dies

00:21.560 --> 00:23.610
nun einen Server auf dem lokalen

00:23.610 --> 00:25.780
Host 8080 hochfährt und den Webpack-Build-Workflow

00:25.780 --> 00:28.330
hochfährt.

00:28.330 --> 00:30.060
Wenn Sie nun den lokalen Host 8080 besuchen,

00:30.060 --> 00:32.020
sehen wir dort unser Projekt.

00:32.020 --> 00:33.860
Das Interessante ist jetzt, wenn wir

00:33.860 --> 00:35.510
etwas im Code ändern, zum Beispiel,

00:35.510 --> 00:38.520
wenn Sie das ERA-Konsolenprotokoll hier anpassen, und

00:38.520 --> 00:41.200
es wird gespeichert und dann sehen Sie hier unten,

00:41.200 --> 00:43.160
wie es neu kompiliert wird.

00:43.160 --> 00:46.450
Wenn Sie jedoch neu laden, sehen Sie das Protokoll hier nicht. Und auch in der

00:46.450 --> 00:47.860
Registerkarte Quellen, in der Registerkarte

00:47.860 --> 00:49.130
Webpack-Quellen, wenn Sie auf

00:49.130 --> 00:51.920
app gehen. ts, Sie sehen das Protokoll hier nicht.

00:51.920 --> 00:54.820
Es wurde also tatsächlich nicht der richtige Code geladen.

00:54.820 --> 00:58.790
Dies wird deutlicher, wenn ich dieses Bündel lösche. js-Datei hier.

00:58.790 --> 01:01.513
Wenn ich jetzt diesen npm-Startprozess neu starte,

01:02.630 --> 01:04.750
werden Sie sehen, dass es immer noch funktioniert,

01:04.750 --> 01:08.090
und übrigens, wundern Sie sich nicht, dass der dist-Ordner jetzt

01:08.090 --> 01:10.240
leer bleibt, im webpack-dev-Server-Modus

01:10.240 --> 01:13.020
wird das Bundle nur im Speicher generiert, also ist es

01:13.020 --> 01:15.840
da und wird vom dev-Server geladen, aber es wird nicht wirklich

01:15.840 --> 01:18.490
in die dist geschrieben.

01:18.490 --> 01:20.270
Aber Sie werden sehen, dass diese Seite jetzt

01:20.270 --> 01:22.180
auch abstürzt, wenn Sie sie neu laden.

01:22.180 --> 01:24.050
Ich habe gesagt, dass die Datei da sein

01:24.050 --> 01:27.080
würde, aber es sieht nicht so aus, als ob sie da wäre, richtig?

01:27.080 --> 01:29.120
Jetzt fehlt es, wie gesagt, auf der Dist, und natürlich

01:29.120 --> 01:35.130
importieren wir von Dist/Bundle. js und Index.

01:35.130 --> 01:35.130
html,

01:35.130 --> 01:36.810
aber Sie können mir glauben, dass sie aus dem Speicher generiert wird.

01:36.810 --> 01:38.450
Das Problem ist nur, dass die

01:38.450 --> 01:41.640
Dinge im Moment nicht richtig verdrahtet sind.

01:41.640 --> 01:45.330
Um dies zu ändern, müssen wir zum Webpack gehen. Konfiguration. js-Datei und fügen

01:45.330 --> 01:50.330
Sie dort in der Ausgabe tatsächlich einen publicPath-Schlüssel

01:50.350 --> 01:53.647
hinzu und setzen Sie diesen auf "dist. Wenn Sie nun speichern und neu starten, sehen

01:56.250 --> 01:59.120
Sie, dass die Seite neu geladen wird und

01:59.120 --> 02:00.670
Sie sehen hier "Hi".

02:00.670 --> 02:02.400
Auf der Registerkarte "Quellen"

02:02.400 --> 02:05.320
sehen Sie nun auch die korrekte Ausgabe.

02:05.320 --> 02:06.580
Wenn Sie in den Ordner dot,

02:06.580 --> 02:07.860
source app gehen. ts sehen Sie die Konsolenprotokollanweisung.

02:07.860 --> 02:11.270
Und wenn ich jetzt zu app. ts und löschen Sie es, es wird neu erstellt und die Konsolenprotokollanweisung

02:11.270 --> 02:13.893
ist nun nicht mehr vorhanden.

02:15.220 --> 02:18.460
Dies ist nur eine zusätzliche Konfiguration, die notwendig

02:18.460 --> 02:20.410
ist, damit der webpack-dev Server

02:20.410 --> 02:22.970
wirklich versteht, wohin die Ausgabe geschrieben

02:22.970 --> 02:26.520
wird und wo sie relativ zum Index ist. html-Datei.

02:26.520 --> 02:29.910
Denn standardmäßig liefert

02:29.910 --> 02:32.180
der webpack-dev-Server einen Index. html-Datei, die sich im selben Ordner befindet, in dem Sie dieses

02:32.180 --> 02:34.030
Skript hier ausführen.

02:34.030 --> 02:37.550
Das ist korrekt, aber dann stellt es die Verbindung zum

02:37.550 --> 02:40.520
dist-Ordner nicht korrekt her, weshalb wir dem

02:40.520 --> 02:42.030
webpack-dev-Server mit

02:42.030 --> 02:44.970
publicPath mitteilen müssen, wo unsere Assests,

02:44.970 --> 02:48.040
also unser Bundle, zu finden sind. js-Datei in diesem Fall.

02:48.040 --> 02:50.960
Wenn wir nun den Entwicklungsserver verlassen,

02:50.960 --> 02:52.370
gibt es eine weitere Einstellung, die ich hier

02:52.370 --> 02:53.790
im Entwicklungsmodus anwenden möchte.

02:53.790 --> 02:56.080
Ich werde dies direkt am Anfang des exportierten Objekts tun.

02:56.080 --> 02:59.180
Ich werde den Modus auf "Entwicklung" einstellen. Dadurch wird webpack schließlich mitgeteilt, dass wir hier

02:59.180 --> 03:01.800
für die Entwicklung bauen und dass es weniger Optimierungen

03:01.800 --> 03:03.550
vornehmen wird, um unsere Entwicklungserfahrung

03:03.550 --> 03:05.590
zu verbessern, das Debugging noch einfacher

03:05.590 --> 03:11.420
zu machen und uns zum Beispiel aussagekräftigere Fehlermeldungen zu geben.

03:11.420 --> 03:12.950
In der Entwicklung wollen wir

03:12.950 --> 03:16.420
also auf jeden Fall auch diesen Schlüssel hier hinzufügen.

03:16.420 --> 03:17.840
Damit und mit der Konfiguration des webpack-dev-Servers

03:17.840 --> 03:20.110
erhalten wir nun den fertigen Entwicklungs-Workflow.

03:20.110 --> 03:22.880
Für die Produktion müssen wir diesen Arbeitsablauf

03:22.880 --> 03:25.570
ein wenig anpassen, da wir dort eine andere Ausgabe

03:25.570 --> 03:27.100
wünschen.
