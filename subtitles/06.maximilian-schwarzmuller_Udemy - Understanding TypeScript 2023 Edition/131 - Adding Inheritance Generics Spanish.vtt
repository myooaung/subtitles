WEBVTT

00:02.410 --> 00:04.290
Instructor: Así que es hora de algo

00:04.290 --> 00:06.370
de herencia y de una clase base.

00:06.370 --> 00:09.189
Quiero añadir una clase base, que básicamente tiene templateElement,

00:09.189 --> 00:12.090
hostElement, un elemento en él, que hace este trabajo de selección

00:12.090 --> 00:18.520
de elementos en el dom, que tiene el método attach, que siempre necesitamos, y así sucesivamente.

00:18.520 --> 00:22.540
Así que básicamente gestiona todas estas funcionalidades compartidas,

00:22.540 --> 00:26.630
que nuestras clases que realmente renderizan algo al dom tienen

00:26.630 --> 00:28.220
en común.

00:28.220 --> 00:30.880
Así que para eso, por encima de mi ProjectInput,

00:30.880 --> 00:35.650
y también la clase ProjectList, así que básicamente aquí, voy a añadir

00:35.650 --> 00:38.250
la clase base de componentes.

00:38.250 --> 00:41.540
Ahora, el nombre depende de ti, pero yo lo llamaré Componente, porque

00:41.540 --> 00:44.090
puede que conozcas este término de React o Angular,

00:44.090 --> 00:45.870
si trabajas con eso, e incluso si no

00:45.870 --> 00:47.590
trabajaste con eso, puedes pensar

00:47.590 --> 00:49.873
en estas clases como UI, componentes de interfaz

00:50.770 --> 00:53.950
de usuario, que renderizas en la pantalla.

00:53.950 --> 00:57.950
Y cada componente es al final un objeto renderizable, que tiene unas

00:57.950 --> 00:59.970
funcionalidades que nos permiten

00:59.970 --> 01:01.370
renderizarlo.

01:01.370 --> 01:05.260
Y luego las instancias concretas, o las clases heredadas,

01:05.260 --> 01:10.260
añaden la funcionalidad extra que este componente específico necesita.

01:10.300 --> 01:14.370
Entonces, ¿qué entra en la clase general de Componentes?

01:14.370 --> 01:17.590
Bueno, yo diría que estos tres elementos con seguridad.

01:17.590 --> 01:21.390
templateElement, hostElement y element.

01:21.390 --> 01:23.590
Sin embargo, aquí tenemos un problema

01:23.590 --> 01:25.470
con respecto a los tipos.

01:25.470 --> 01:28.320
El templateElement siempre será un HTMLTemplateElement,

01:29.160 --> 01:31.980
pero el hostElement no siempre tiene que ser un div, por

01:31.980 --> 01:35.410
ejemplo, cuando vamos a añadir una clase de elemento de proyecto,

01:35.410 --> 01:37.160
vamos a hacer que en un ProjectList,

01:37.160 --> 01:40.550
y no directamente incluso nuestro div raíz aquí, así que eso no es

01:40.550 --> 01:42.360
siempre un div.

01:42.360 --> 01:45.220
Y esto aquí, bueno, siempre es un HTMLElement, podemos

01:45.220 --> 01:47.040
ciertamente conformarnos con eso,

01:47.040 --> 01:50.540
pero, como en el caso de la clase ProjectInput, en realidad sabemos

01:50.540 --> 01:52.560
que es alguna forma específica de ella,

01:52.560 --> 01:55.230
es un HTMLFormElement.

01:55.230 --> 01:57.540
Así que perderíamos esta información

01:57.540 --> 02:00.320
extra, si nos limitamos a tener siempre un

02:00.320 --> 02:02.130
HTMLElement allí, sin almacenar

02:02.130 --> 02:05.220
más información específica.

02:05.220 --> 02:07.690
¿Cómo podemos evitarlo?

02:07.690 --> 02:10.050
Bueno, no sólo usando la herencia, sino

02:10.050 --> 02:12.920
creando una clase genérica aquí, donde cuando

02:12.920 --> 02:15.230
heredamos de ella, podemos establecer

02:15.230 --> 02:17.680
los tipos concretos.

02:17.680 --> 02:20.940
Para ello, añadimos paréntesis angulares después del nombre de

02:20.940 --> 02:23.550
la clase y, a continuación, dos identificadores de

02:23.550 --> 02:26.690
nuestra elección, como T y U, que serían opciones comunes.

02:26.690 --> 02:30.110
Y ahora, también podemos añadir algunas restricciones

02:30.110 --> 02:34.820
aquí, y decir que T será ciertamente algún tipo de HTMLElement.

02:34.820 --> 02:36.770
Puede ser sólo un HTMLElement, o una

02:36.770 --> 02:38.970
versión más específica del mismo.

02:38.970 --> 02:41.870
Y lo mismo ocurre con U.

02:41.870 --> 02:44.780
Y entonces aquí, sabemos que el hostElement será de tipo

02:44.780 --> 02:46.690
T, y el elemento será de tipo U.

02:46.690 --> 02:48.660
Y ahora, cada vez que heredamos de esta clase,

02:48.660 --> 02:50.970
podemos especificar los tipos concretos, de modo que

02:50.970 --> 02:52.930
podemos trabajar con diferentes tipos en diferentes

02:52.930 --> 02:54.780
lugares donde heredamos.

02:56.050 --> 02:58.053
Ahora, también vamos a añadir un constructor aquí.

02:58.910 --> 03:01.080
En ese constructor, necesitaremos

03:01.080 --> 03:03.060
un poco de información.

03:03.060 --> 03:05.950
Necesitamos saber el ID de nuestra plantilla,

03:05.950 --> 03:08.030
para saber cómo seleccionarla, y

03:08.030 --> 03:09.750
eso debe ser una cadena.

03:09.750 --> 03:11.590
Necesitamos conocer el hostElementId,

03:11.590 --> 03:13.050
que también debe ser una cadena,

03:13.050 --> 03:15.833
para saber dónde renderizar este componente.

03:17.440 --> 03:20.505
Y también quiero obtener un newElementId, para que obtengamos

03:20.505 --> 03:22.590
un ID que debe ser asignado al nuevo elemento

03:22.590 --> 03:24.350
renderizado.

03:24.350 --> 03:26.020
Sin embargo, esto es opcional, lo

03:26.020 --> 03:28.210
que señalo añadiendo un signo de interrogación

03:28.210 --> 03:29.690
después del parámetro.

03:29.690 --> 03:31.940
La alternativa sería aceptar aquí también

03:31.940 --> 03:34.050
undefined como tipo, pero me limitaré

03:34.050 --> 03:36.470
a usar el signo de interrogación.

03:36.470 --> 03:38.510
Y ahora, con eso en el constructor, podemos,

03:38.510 --> 03:39.793
básicamente, obtener este

03:40.640 --> 03:42.083
código aquí, y ponerlo en nuestro

03:43.810 --> 03:46.950
constructor de la clase Componente, para que almacenemos

03:46.950 --> 03:48.940
el templateElement, pero, por supuesto,

03:48.940 --> 03:52.060
ahora el ID, que estamos obteniendo aquí, es ese templateId,

03:52.060 --> 03:57.450
que es por lo que estoy obteniendo esto como un argumento en el constructor.

03:57.450 --> 04:00.060
Y para el hostElement, el ID aquí, por supuesto,

04:00.060 --> 04:02.733
es nuestro hostElementId, así.

04:04.790 --> 04:07.930
También es importante, por supuesto, con respecto a la fundición

04:07.930 --> 04:10.230
aquí, sabemos que esto será de tipo T, porque

04:10.230 --> 04:12.580
T aquí es este tipo genérico, que almacenamos

04:12.580 --> 04:15.420
o que utilizamos para nuestro hostElement, así que aquí

04:15.420 --> 04:17.163
podemos fundirlo ya.

04:18.160 --> 04:20.253
Y con eso, estamos seleccionando elementos.

04:21.130 --> 04:22.940
También podemos coger más código.

04:22.940 --> 04:26.650
Ese código aquí, donde importamos un nodo y demás, y donde

04:26.650 --> 04:30.130
establecemos el ID, podemos agarrar todo eso.

04:30.130 --> 04:32.520
Así que vamos a copiar esto aquí, y añadir esto

04:32.520 --> 04:35.317
al constructor de la clase Componente también.

04:35.317 --> 04:37.640
importedNode, entonces establecemos

04:37.640 --> 04:41.080
el elemento, y el elemento aquí tiene este tipo genérico U,

04:41.080 --> 04:43.000
así que cuando lanzamos esto aquí,

04:43.000 --> 04:46.870
sabemos que será ese tipo U aquí, así que debemos lanzarlo a U.

04:46.870 --> 04:49.090
Este es un buen uso de los genéricos aquí, que hace

04:49.090 --> 04:51.993
que esta clase Componente sea realmente reutilizable.

04:53.060 --> 04:55.200
Ahora, con respecto a la identificación.

04:55.200 --> 04:58.200
Esto es lo que obtenemos aquí, el newElementId.

04:58.200 --> 05:00.590
Ahora, por supuesto, puede que no siempre tengamos

05:00.590 --> 05:02.150
esto, porque es opcional, así que deberíamos

05:02.150 --> 05:03.870
comprobar si lo tenemos.

05:03.870 --> 05:06.070
Así que si newElementId es una cosa, y sólo si

05:06.070 --> 05:07.650
es una cosa, sólo entonces intentaré

05:07.650 --> 05:09.710
asignarlo, de lo contrario no lo intentamos,

05:09.710 --> 05:10.543
porque entonces

05:10.543 --> 05:13.023
no tenemos ningún ID que asignar.

05:14.420 --> 05:16.300
Bien, con eso, tenemos el constructor.

05:16.300 --> 05:19.160
Ahora vamos a utilizar la función attach aquí.

05:19.160 --> 05:21.970
Así que vamos a copiar el método attach de

05:21.970 --> 05:25.470
una de nuestras otras clases y añadirlo aquí, como

05:25.470 --> 05:28.473
un método privado, en la clase Component.

05:32.690 --> 05:35.640
Entonces también podemos llamar a esto. al final del constructor

05:35.640 --> 05:38.540
de la clase Componente.

05:38.540 --> 05:39.960
Ahora, aquí queremos añadir

05:39.960 --> 05:42.570
un elemento, pero no sabemos dónde debe ser añadido,

05:42.570 --> 05:44.193
por lo que es en realidad un poco

05:44.193 --> 05:46.450
de información extra que debemos obtener

05:46.450 --> 05:49.450
aquí, como un cuarto argumento en el constructor, insertar

05:52.430 --> 05:54.200
Atstart podría ser un nombre, y que

05:54.200 --> 05:56.680
es un booleano, digamos.

05:56.680 --> 06:00.190
Y deberíamos ponerlo delante de nuestro parámetro opcional.

06:00.190 --> 06:02.230
Los parámetros opcionales deben ir siempre en último

06:02.230 --> 06:03.980
lugar, porque la gente puede omitirlos.

06:03.980 --> 06:06.680
Por lo tanto, sus parámetros obligatorios no pueden

06:06.680 --> 06:09.220
venir después de estos parámetros opcionales.

06:09.220 --> 06:13.533
Y insertAtStart es entonces reenviado a attach, allí, insertAtBeginning,

06:14.615 --> 06:18.740
también podrías reutilizar insertAtStart, sólo estoy usando un nombre

06:18.740 --> 06:21.350
diferente aquí para evitar confusiones, se

06:21.350 --> 06:23.470
recibe como un booleano.

06:23.470 --> 06:28.040
Y luego aquí, comprobamos si insertAtBeginning es verdadero,

06:28.040 --> 06:32.920
si lo es, entonces aquí, tenemos afterbegin, de lo contrario tenemos

06:32.920 --> 06:34.887
beforeend.

06:36.770 --> 06:39.653
Ahora somos flexibles con respecto a cómo se inserta esto.

06:42.980 --> 06:46.570
También quiero marcar esta clase ahora como una clase abstracta, porque

06:46.570 --> 06:49.600
la gente nunca debe instanciarla directamente, en su lugar,

06:49.600 --> 06:52.560
siempre debe ser utilizada para la herencia.

06:52.560 --> 06:56.090
Así que delante de la clase, añado la palabra clave abstracta.

06:56.090 --> 06:58.750
Esto asegura que ahora no podemos instanciarlo.

06:58.750 --> 07:01.963
Si intentáramos hacerlo, TypeScript nos gritaría.

07:04.070 --> 07:06.490
También añadiré dos métodos más, y

07:06.490 --> 07:08.410
es el método configure, y también

07:08.410 --> 07:10.840
el método renderContent.

07:10.840 --> 07:13.430
Y lo añadiré como un método abstracto, lo que

07:13.430 --> 07:16.463
significa que la implementación concreta falta aquí,

07:18.000 --> 07:21.080
pero ahora, básicamente, forzamos a cualquier clase

07:21.080 --> 07:22.670
que herede de component, a añadir

07:22.670 --> 07:25.980
estos dos métodos y tenerlos disponibles.

07:25.980 --> 07:27.220
Sólo agrego esto aquí,

07:27.220 --> 07:29.390
para que si alguien más mira nuestro

07:29.390 --> 07:31.460
código, pueda entender bien cuál es

07:31.460 --> 07:34.150
la idea detrás de la clase Componente.

07:34.150 --> 07:36.340
Que haga todo el renderizado general, o

07:36.340 --> 07:38.530
la fijación del componente, pero que el

07:38.530 --> 07:40.790
contenido concreto y la configuración luego

07:40.790 --> 07:43.840
tenga que ocurrir en el lugar donde heredamos.

07:43.840 --> 07:47.670
Nota al margen, no puedes tener métodos privados y abstractos.

07:47.670 --> 07:49.660
Así que hay que omitir private aquí,

07:49.660 --> 07:52.000
eso no lo permite TypeScript.

07:52.000 --> 07:54.590
Bien, y con esto, podemos extender Component

07:54.590 --> 07:56.480
aquí en el ProjectList, y ahora

07:56.480 --> 07:59.130
deshacernos de estas tres propiedades.

07:59.130 --> 08:00.640
Mantenemos el assignedProjects,

08:00.640 --> 08:03.520
porque es específico de la ProjectList.

08:03.520 --> 08:06.620
Ahora también queremos especificar los valores concretos

08:06.620 --> 08:09.560
que se deben introducir para nuestros tipos genéricos.

08:09.560 --> 08:12.410
Y sabemos, si revertimos esto, sabemos

08:12.410 --> 08:16.540
que tendremos un HTMLDivElement y un HTMLElement, así

08:16.540 --> 08:19.313
que aquí voy a pasar en HTMLDivElement,

08:20.410 --> 08:22.800
y HTMLElement, así, y luego deshacerse

08:22.800 --> 08:25.830
de estas tres propiedades.

08:25.830 --> 08:29.510
En el constructor, ahora no necesitamos eso aquí, pero en cambio

08:29.510 --> 08:32.550
necesitamos llamar a super al principio, para llamar

08:32.550 --> 08:35.130
al constructor de la clase base, y a eso, necesitamos

08:35.130 --> 08:38.080
pasar alguna información al supercontructor, necesitamos

08:38.080 --> 08:40.840
pasar alguna información.

08:40.840 --> 08:42.753
El ID de nuestro templateElement,

08:44.050 --> 08:45.850
el hostElementId, si queremos insertarlo

08:45.850 --> 08:47.870
al principio del hostElement, y, potencialmente,

08:47.870 --> 08:51.920
el ID que debe asignarse al nuevo elemento.

08:51.920 --> 08:54.038
Así que aquí está nuestro ID de la

08:54.038 --> 08:57.811
plantilla, y con eso podemos deshacernos de esto aquí.

08:57.811 --> 09:01.292
Entonces aquí, el hostElement, ese ID era app, así que podemos

09:01.292 --> 09:02.670
deshacernos de esto.

09:02.670 --> 09:04.260
Mantenemos el assignedProjects,

09:04.260 --> 09:06.400
porque todavía lo necesitamos aquí.

09:06.400 --> 09:08.193
Nos deshacemos de esto aquí,

09:10.150 --> 09:13.050
pero, con respecto a la ID para el nuevo elemento,

09:13.050 --> 09:16.850
quiero pasar eso como un cuarto parámetro en realidad.

09:16.850 --> 09:19.040
El tercero es donde esto debe ser insertado,

09:19.040 --> 09:22.400
y aquí, usamos para insertar esto antes del final, así que

09:22.400 --> 09:25.890
en realidad lo que quiero insertar aquí como un parámetro para

09:25.890 --> 09:29.170
el valor de insertAtStart es falso, porque no debe ser insertado

09:29.170 --> 09:32.283
al principio, sino al final.

09:36.000 --> 09:38.940
Ahora, ciertamente todavía quiero establecer mi oyente aquí.

09:38.940 --> 09:40.730
Sin embargo, no necesito llamar

09:40.730 --> 09:44.410
a attach, eso ocurrirá en la clase base, en el componente base.

09:44.410 --> 09:46.253
Sin embargo, llamaré a renderContent.

09:47.870 --> 09:50.010
Y aquí no deberíamos usar este tipo, sino sólo

09:50.010 --> 09:52.100
el tipo, porque no podemos usar esto antes

09:52.100 --> 09:54.410
de que se termine de ejecutar el súper.

09:54.410 --> 09:55.490
Pero eso no es un problema,

09:55.490 --> 09:57.690
porque recibimos el tipo como argumento.

09:57.690 --> 09:59.680
Ahora, ves que todavía tengo un error

09:59.680 --> 10:03.487
aquí, porque tenemos un método attach aquí en ProjectList, y eso

10:03.487 --> 10:05.410
choca con el método attach que tenemos

10:05.410 --> 10:07.330
en la clase base.

10:07.330 --> 10:10.600
Así que vamos a deshacernos de este método de fijación aquí.

10:10.600 --> 10:14.024
Ahora todavía obtenemos un error, porque ves, renderContent es

10:14.024 --> 10:16.060
privado aquí, pero lo especificamos como

10:16.060 --> 10:18.270
un método público aquí, me encantaría tenerlo

10:18.270 --> 10:20.240
como privado, pero los métodos abstractos

10:20.240 --> 10:22.860
privados no están soportados.

10:22.860 --> 10:25.680
Así que voy a eliminar la palabra clave privada aquí, y ahora

10:25.680 --> 10:28.170
con eso, nos quedamos con un problema aquí, que no estamos

10:28.170 --> 10:30.510
teniendo ese método de configuración, que prometí

10:30.510 --> 10:31.990
que tendríamos aquí.

10:31.990 --> 10:33.650
Bueno, vamos a añadirlo.

10:33.650 --> 10:38.500
Así que aquí, además de renderConfig, podríamos añadir configure, aunque

10:38.500 --> 10:40.510
no estoy haciendo nada aquí.

10:40.510 --> 10:42.950
Alternativamente, usted podría convertir esto aquí para ser

10:42.950 --> 10:46.000
un método opcional mediante la adición de un signo de interrogación, entonces,

10:46.000 --> 10:47.520
usted no está obligado a añadirlo.

10:47.520 --> 10:50.380
Aquí, lo añadiré porque también podríamos argumentar

10:50.380 --> 10:53.210
que nosotros, para el ProjectList, ponemos ese

10:53.210 --> 10:56.490
código donde configuramos nuestro listener aquí, realmente

10:56.490 --> 10:58.530
en configure.

10:58.530 --> 11:00.810
Así que podemos llegar a configurar,

11:00.810 --> 11:03.320
y luego hacer lo nuestro aquí, que la configuración

11:03.320 --> 11:05.220
del oyente.

11:05.220 --> 11:06.610
Y ahora, sólo debemos asegurarnos

11:06.610 --> 11:10.653
de llamar a renderContent, pero también configurar así.

11:12.730 --> 11:14.440
En caso de que te preguntes por qué no estoy

11:14.440 --> 11:16.450
llamando a configure y renderContent aquí

11:16.450 --> 11:18.560
en la clase abstracta en el constructor, bueno,

11:18.560 --> 11:19.993
podríamos esto, pero podríamos

11:21.780 --> 11:23.720
tener un problema entonces.

11:23.720 --> 11:26.760
Si llamamos a esto en la clase Componente, entonces,

11:26.760 --> 11:30.770
podríamos llamar a un método en la clase heredera, así que en una

11:30.770 --> 11:33.240
clase que extiende Componente, donde renderContent

11:33.240 --> 11:36.810
o configure depende de algo donde el constructor de la clase

11:36.810 --> 11:39.410
heredera en realidad tal vez establece algo,

11:39.410 --> 11:41.540
sólo después de que el constructor

11:41.540 --> 11:44.710
de la clase base terminó, que renderContent y o configure

11:44.710 --> 11:48.100
dependen.

11:48.100 --> 11:50.690
Por eso es más seguro, básicamente, asegurarse de

11:50.690 --> 11:52.410
que la clase heredera tiene que llamar

11:52.410 --> 11:55.410
a estos métodos en lugar de que la clase base llame a estos métodos

11:55.410 --> 11:56.860
por nosotros.

11:57.980 --> 12:01.280
Así que con eso, reestructuramos la clase ProjectList

12:01.280 --> 12:05.040
para aprovechar la herencia y nuestra lógica compartida.

12:05.040 --> 12:07.730
Hagamos ahora lo mismo con ProjectInput.

12:07.730 --> 12:13.170
Ahí también queremos ampliar Componente.

12:13.170 --> 12:14.900
Utiliza la naturaleza genérica

12:14.900 --> 12:19.430
de eso, y ahí, tenemos el HTMLDivElement para el hostElement, y

12:19.430 --> 12:23.980
el HTMLFormElement para el elemento que se renderiza.

12:23.980 --> 12:27.210
Con eso, podemos deshacernos de estas tres propiedades aquí, así

12:27.210 --> 12:28.310
que vamos a hacer eso.

12:28.310 --> 12:30.090
Mantenemos estas tres propiedades, por supuesto,

12:30.090 --> 12:32.140
porque son específicas de ProjectInput.

12:33.040 --> 12:35.310
Luego tenemos que llamar a super aquí,

12:35.310 --> 12:38.320
y a super le pasamos el ID de la plantilla, que es

12:38.320 --> 12:39.900
ProjectInput, el ID del elemento

12:39.900 --> 12:41.970
anfitrión, que es app, insertBefore

12:41.970 --> 12:45.270
aquí es true, porque quiero insertar ese elemento recién

12:45.270 --> 12:47.620
creado al principio aquí para esta clase

12:47.620 --> 12:50.510
ProjectInput.

12:50.510 --> 12:53.110
Y luego, newElementId, bueno, que aquí es

12:53.110 --> 12:55.170
la entrada del usuario, por lo que

12:55.170 --> 12:56.913
también debe remitir que.

12:57.844 --> 12:59.400
Con esto, podemos deshacernos

12:59.400 --> 13:03.480
de este código, de este código, y de todo este código aquí en realidad.

13:03.480 --> 13:05.240
Por supuesto, mantenga este código aquí.

13:05.240 --> 13:07.820
Sin embargo, también podríamos argumentar

13:07.820 --> 13:09.860
que lo configuramos tal vez.

13:09.860 --> 13:12.100
Así que vamos a bajar al método configure, que

13:12.100 --> 13:13.660
ya tenemos aquí, y añadir nuestros

13:13.660 --> 13:16.790
oyentes aquí o nuestra configuración de la propiedad aquí para

13:16.790 --> 13:17.683
configurar.

13:18.880 --> 13:20.780
Por supuesto, vamos a deshacernos de

13:20.780 --> 13:24.450
attach, porque eso es ahora algo que la clase base hace por nosotros, y vamos

13:24.450 --> 13:26.980
a comprobar lo que no le gusta a TypeScript, por supuesto

13:26.980 --> 13:29.690
deberíamos deshacernos del attach aquí.

13:29.690 --> 13:32.520
Y sí, de hecho una cosa que no le gusta a TypeScript,

13:32.520 --> 13:35.090
ahora se queja de que estos campos no se inicializan

13:35.090 --> 13:37.190
en el constructor, porque no entiende

13:37.190 --> 13:44.770
o no comprueba que se llame a configure en el constructor y haga esta inicialización.

13:44.770 --> 13:47.500
Así que para satisfacer a TypeScript, voy a mover

13:47.500 --> 13:50.550
estas inicializaciones de nuevo desde configure a la

13:50.550 --> 13:52.170
derecha en el constructor.

13:52.170 --> 13:54.190
Técnicamente, el resultado es exactamente el mismo,

13:54.190 --> 13:55.953
pero ahora TypeScript no se quejará.

13:56.800 --> 13:59.240
Sin embargo, se quejará de que tenemos

14:00.440 --> 14:02.310
un método configure privado,

14:02.310 --> 14:05.910
por lo que, al igual que antes, debemos cambiarlo y convertir

14:05.910 --> 14:08.940
configure en un método público.

14:08.940 --> 14:11.460
Ahora, no es una obligación, pero es una especie de convención

14:11.460 --> 14:13.000
para tener sus métodos públicos en

14:13.000 --> 14:14.570
primer lugar, por lo que voy a mover

14:14.570 --> 14:17.240
por encima de los otros métodos privados aquí.

14:17.240 --> 14:19.370
Y, por supuesto, ahora también se queja

14:19.370 --> 14:21.990
de que no tenemos un método renderContent.

14:21.990 --> 14:25.020
Ahora, voy a añadir uno, sólo porque es necesario.

14:25.020 --> 14:26.780
Aquí no estamos haciendo nada en él,

14:26.780 --> 14:28.890
así que técnicamente no es necesario, pero

14:28.890 --> 14:31.053
ahora satisfacemos nuestra clase base.

14:32.260 --> 14:34.603
Nota al margen, renderContent, y configure,

14:35.550 --> 14:39.590
en la clase ProjectList, también se puede mover por encima de ese método

14:39.590 --> 14:43.230
privado aquí por las mismas razones exactas, para esta convención

14:43.230 --> 14:45.123
que acabo de mencionar.

14:46.440 --> 14:49.870
Y con eso, también reestructuramos ProjectInput,

14:49.870 --> 14:51.780
para aprovechar la herencia

14:51.780 --> 14:55.330
y dejar que la clase base haga gran parte del trabajo.

14:55.330 --> 14:57.670
Vamos a ver si ahora todo funciona.

14:57.670 --> 15:00.710
Si guardamos eso, se compila sin errores,

15:00.710 --> 15:02.740
parece funcionar bien, así

15:02.740 --> 15:05.870
que la pregunta es si esto funciona.

15:05.870 --> 15:07.810
Y eso se ve bastante bien.

15:07.810 --> 15:09.720
Funciona igual que antes, pero ahora

15:09.720 --> 15:11.600
tenemos un código más limpio, donde

15:11.600 --> 15:14.240
aprovechamos la reutilización de código, gracias

15:14.240 --> 15:15.850
a la herencia.

15:15.850 --> 15:18.540
Ahora bien, no es el único lugar donde podemos heredar.

15:18.540 --> 15:20.610
Quiero concluir esta conferencia aquí

15:20.610 --> 15:24.230
también refactorizando el estado de nuestro proyecto.

15:24.230 --> 15:26.240
Técnicamente, allí no necesitamos la herencia,

15:26.240 --> 15:29.450
porque sólo tenemos este único estado que manejamos en toda esta

15:29.450 --> 15:31.230
aplicación, pero imagina una aplicación

15:31.230 --> 15:33.130
más grande, donde tienes múltiples estados

15:33.130 --> 15:35.310
diferentes.

15:35.310 --> 15:37.240
Uno para el estado del usuario,

15:37.240 --> 15:39.290
si está conectado y demás, uno para

15:39.290 --> 15:43.030
los proyectos, uno para el carrito de la compra.

15:43.030 --> 15:45.600
Ahora, usted notará que algunas características

15:45.600 --> 15:48.080
de su clase de estado son siempre las mismas.

15:48.080 --> 15:50.520
En concreto, ese array de listeners,

15:50.520 --> 15:52.780
y el método addListener.

15:52.780 --> 15:54.730
Así que también podríamos usar una clase base aquí.

15:55.650 --> 15:58.170
Podríamos usar una clase State aquí,

15:58.170 --> 16:01.230
y esa clase tiene un array de listeners, y esa

16:01.230 --> 16:04.640
clase también tiene un método addListeners, así

16:04.640 --> 16:07.120
que cortaremos ambos de ProjectState,

16:07.120 --> 16:09.160
y lo añadiremos a State.

16:09.160 --> 16:12.610
Ahora bien, eso también significa que, por supuesto, no sabemos

16:12.610 --> 16:14.700
si nuestro oyente devolverá realmente

16:14.700 --> 16:16.720
una matriz de proyectos.

16:16.720 --> 16:18.253
Así que en realidad aquí,

16:19.110 --> 16:20.760
para este tipo de función,

16:20.760 --> 16:24.740
también quiero tener un tipo genérico en realidad.

16:24.740 --> 16:27.440
Para que podamos establecer esto desde el exterior.

16:27.440 --> 16:28.483
Podemos hacer eso, podemos

16:29.790 --> 16:31.623
escribir un tipo genérico, como esto aquí,

16:32.680 --> 16:35.730
un tipo personalizado, que es genérico, podemos añadir los paréntesis

16:35.730 --> 16:38.410
angulares después de nuestro nombre de tipo, utilizar un

16:38.410 --> 16:40.150
identificador de nuestra elección, y

16:40.150 --> 16:42.460
luego reutilizar ese tipo aquí.

16:42.460 --> 16:44.960
Ahora, podemos hacer que State sea genérico, podemos usar

16:44.960 --> 16:46.320
el mismo identificador, porque

16:46.320 --> 16:49.530
es una construcción diferente a nuestro tipo personalizado.

16:49.530 --> 16:53.520
Y luego aquí, cuando decimos que queremos tener una lista de oyentes,

16:53.520 --> 16:56.780
tenemos que decirle a TypeScript qué tipo genérico

16:56.780 --> 16:58.850
usan los oyentes para este objeto

16:58.850 --> 17:01.510
State que estamos creando.

17:01.510 --> 17:03.850
Y eso significa simplemente que podemos

17:03.850 --> 17:06.490
reenviar nuestro tipo genérico aquí, y aquí.

17:06.490 --> 17:09.410
Así que cuando ahora extendemos el estado, tenemos que

17:09.410 --> 17:12.630
especificar el tipo de datos con los que este estado trabajará,

17:12.630 --> 17:14.930
y en lugar del estado, esto se reenvía a nuestro

17:14.930 --> 17:17.680
tipo personalizado de oyente, esa es la idea.

17:17.680 --> 17:19.580
¿Y cómo utilizamos todo eso?

17:19.580 --> 17:21.950
Bueno, ahí abajo, en la clase ProjectState,

17:21.950 --> 17:24.930
simplemente extendemos la clase State, y ahora, proporcionamos

17:24.930 --> 17:27.900
un valor, un valor concreto para ese marcador de posición

17:27.900 --> 17:30.040
genérico, y aquí, este valor concreto

17:30.040 --> 17:32.480
es Project, porque este ProjectState se

17:32.480 --> 17:36.510
trata de gestionar ¿adivina qué?

17:36.510 --> 17:37.393
Proyectos.

17:38.970 --> 17:41.650
Ahora, el constructor privado aquí tiene un problema,

17:41.650 --> 17:43.390
como puedes ver, porque no estamos

17:43.390 --> 17:45.160
llamando a super.

17:45.160 --> 17:46.930
Bueno, definitivamente deberíamos hacer

17:46.930 --> 17:48.350
eso, llamemos al super aquí, eso es

17:48.350 --> 17:49.800
todo lo que tenemos que hacer allí.

17:50.640 --> 17:53.490
Y aquí, si nos desplazamos hacia abajo, donde

17:53.490 --> 17:55.880
vamos a través de los oyentes, vemos

17:55.880 --> 17:57.890
oyentes es privado, y es privado

17:57.890 --> 18:00.240
en nuestra clase base.

18:00.240 --> 18:01.860
Ahora, eso significa que sólo podemos acceder

18:01.860 --> 18:03.580
a ella desde dentro de la clase base.

18:03.580 --> 18:06.760
Pero aprendiste sobre otro modificador de acceso,

18:06.760 --> 18:09.380
que es similar a private, pero que también

18:09.380 --> 18:12.900
permite el acceso desde las clases que heredan, y eso

18:12.900 --> 18:14.990
sería protected.

18:14.990 --> 18:17.200
Protegido significa que todavía no se

18:17.200 --> 18:18.930
puede acceder desde fuera de

18:18.930 --> 18:23.030
la clase, pero se puede acceder desde cualquier clase que herede.

18:23.030 --> 18:24.740
Con eso, vamos a guardar todo

18:24.740 --> 18:26.650
eso, debería compilar bien.

18:26.650 --> 18:28.940
Y vamos a probar rápidamente esto, y eso se ve

18:28.940 --> 18:31.790
bien, por lo que funciona como antes, pero ahora, de nuevo,

18:31.790 --> 18:34.160
con un código un poco más agradable, utilizando

18:34.160 --> 18:36.420
la herencia y los genéricos también para nuestra

18:36.420 --> 18:38.363
gestión del estado.
