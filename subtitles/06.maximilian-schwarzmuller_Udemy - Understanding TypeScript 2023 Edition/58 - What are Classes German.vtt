WEBVTT

00:02.100 --> 00:04.890
Instructor: Um Klassen zu verstehen, müssen wir die objektorientierte

00:04.890 --> 00:07.040
Programmierung verstehen.

00:07.040 --> 00:10.050
Je nach Ihrem Kenntnisstand und wenn Sie mit modernem

00:10.050 --> 00:12.560
JavaScript und vielleicht auch mit anderen

00:12.560 --> 00:15.340
Programmiersprachen gearbeitet haben, wissen

00:15.340 --> 00:18.320
Sie vielleicht, wozu Klassen da sind und worum es bei

00:18.320 --> 00:22.270
der objektorientierten Programmierung (OOP) geht.

00:22.270 --> 00:24.570
Daher können Sie diese Vorlesung auch überspringen

00:24.570 --> 00:27.720
und direkt zu den Teilen übergehen, in denen wir Code schreiben.

00:27.720 --> 00:29.330
Ansonsten bleiben Sie auf jeden

00:29.330 --> 00:32.200
Fall bei mir, denn es ist wichtig, dies zu verstehen.

00:32.200 --> 00:35.240
Die Idee hinter der objektorientierten Programmierung

00:35.240 --> 00:38.550
und den Klassen ist, wie Sie sehen werden, dass Sie

00:38.550 --> 00:43.110
in Ihrem Code sozusagen mit realen Entitäten arbeiten.

00:43.110 --> 00:47.370
Damit Sie in Ihrem Code mit Objekten arbeiten, die realen

00:47.370 --> 00:52.110
Objekten so weit wie möglich ähneln, um es Ihnen als Entwickler

00:52.110 --> 00:54.410
leichter zu machen, über Ihren

00:54.410 --> 00:56.250
Code nachzudenken.

00:56.250 --> 00:59.150
Wir könnten zum Beispiel einen Online-Shop aufbauen

00:59.150 --> 01:01.270
und dort eine Produktliste haben.

01:01.270 --> 01:05.190
Wir sollten daher mit einem Produktlistenobjekt arbeiten, das alles enthält,

01:05.190 --> 01:08.140
was wir zur Verwaltung einer Produktliste benötigen.

01:08.140 --> 01:11.570
Eine Methode zum Hinzufügen von Produkten zu den Leitprodukten,

01:11.570 --> 01:13.370
der Liste selbst.

01:13.370 --> 01:15.670
So könnte es sich beispielsweise um ein Objekt handeln,

01:15.670 --> 01:18.360
das für die Darstellung und Verwaltung einer Liste von Produkten

01:18.360 --> 01:19.540
zuständig ist, die aus einem

01:19.540 --> 01:22.840
Dienst oder einer Datenbank abgerufen wurden.

01:22.840 --> 01:25.530
Dieses Produkt enthält also die gesamte Rendering-,

01:25.530 --> 01:27.260
Abruf- und Verwaltungslogik.

01:27.260 --> 01:29.420
Das ist mal eine Produktliste.

01:29.420 --> 01:32.510
In unserem Programm für die Website, die wir erstellen, müssen

01:32.510 --> 01:33.870
wir möglicherweise auch mit

01:33.870 --> 01:36.000
dem einzelnen Produkt arbeiten.

01:36.000 --> 01:39.540
Wir könnten also auch ein Objekt oder mehrere Objekte haben wollen; eines

01:39.540 --> 01:40.960
für jedes Produkt, das für die

01:40.960 --> 01:43.930
Verwaltung des einzelnen Produkts verantwortlich ist.

01:43.930 --> 01:47.180
Es könnte die Details zu diesem Produkt enthalten und wiedergeben,

01:47.180 --> 01:49.830
uns vielleicht erlauben, es in den Warenkorb zu legen,

01:49.830 --> 01:51.260
und dergleichen mehr.

01:51.260 --> 01:54.900
Wenn wir also die Benutzeroberfläche auf den Bildschirm zeichnen wollen, wollen

01:54.900 --> 01:57.010
wir das über JavaScript und damit über TypeScript

01:57.010 --> 01:58.740
verwalten. Dann könnten wir das mit einer

01:58.740 --> 02:00.550
Produktliste und einem Produktobjekt implementieren,

02:00.550 --> 02:02.970
das die Logik für die Verwaltung der zugrunde liegenden

02:02.970 --> 02:05.370
Daten, aber auch für die Darstellung des Inhalts auf dem

02:05.370 --> 02:07.760
Bildschirm enthält.

02:07.760 --> 02:10.010
Und natürlich stehen diese beiden Objekte

02:10.010 --> 02:11.940
in einem gewissen Zusammenhang.

02:11.940 --> 02:14.790
Möglicherweise haben wir auch ein Einkaufswagen-Objekt auf unserem Bildschirm,

02:14.790 --> 02:16.410
das für die Darstellung und Verwaltung der Einkaufskarte

02:16.410 --> 02:18.040
verantwortlich ist.

02:18.040 --> 02:20.380
Das hängt natürlich auch mit dem Produkt zusammen.

02:20.380 --> 02:22.930
Und deshalb enthält sie die gesamte Logik, die wir brauchen,

02:22.930 --> 02:24.880
um unsere Einkaufskarte zu rendern, Bestellungen

02:24.880 --> 02:27.240
aufzugeben und mit dem Server zu kommunizieren und so

02:27.240 --> 02:28.073
weiter.

02:28.073 --> 02:31.190
Das wäre also eine Möglichkeit, wie wir über die Anwendung, die

02:31.190 --> 02:33.010
wir aufbauen, nachdenken können.

02:33.010 --> 02:35.590
Wie können wir sie in logische Teile zerlegen,

02:35.590 --> 02:37.670
die für uns Menschen Sinn ergeben?

02:37.670 --> 02:40.320
Und im Code in TypeScript und JavaScript, in den

02:40.320 --> 02:42.920
meisten modernen Programmiersprachen, wird

02:42.920 --> 02:46.750
dies aktiv unterstützt, weil wir Objekte haben, die komplexere Datenstrukturen

02:46.750 --> 02:48.900
sind, die Eigenschaften und Methoden

02:48.900 --> 02:50.640
enthalten.

02:50.640 --> 02:53.340
Und natürlich haben wir das auch in JavaScript.

02:53.340 --> 02:57.310
Aber wir könnten auch Klassen haben, die uns dabei helfen.

02:57.310 --> 02:59.100
Was ist nun die Idee hinter dem Unterricht?

02:59.100 --> 03:00.740
Und was sind Instanzen?

03:00.740 --> 03:02.030
Wenn wir diese Objekte erhalten

03:02.030 --> 03:04.690
und diesen objektorientierten Ansatz verfolgen,

03:04.690 --> 03:07.500
können wir in Erwägung ziehen, unsere Anwendung oder

03:07.500 --> 03:11.130
unsere Anwendungslogik in solche Objekte aufzuteilen, die Teile

03:11.130 --> 03:13.750
unserer Logik verwalten.

03:13.750 --> 03:17.000
Jetzt verbunden mit der Idee der Verwendung dieser Objekte,

03:17.000 --> 03:19.340
die natürlich existieren in JavaScript

03:19.340 --> 03:23.910
können wir Objekte gibt es als die Idee der mit Klassen zu verwenden.

03:23.910 --> 03:27.470
Objekte sind die konkreten Dinge, mit denen wir in unserem Code arbeiten.

03:27.470 --> 03:30.380
Die Datenstrukturen, die wir zum Speichern von Daten verwenden,

03:30.380 --> 03:33.450
um Methoden zu speichern, mit denen wir Methoden ausführen.

03:33.450 --> 03:36.570
Klassen sind Entwürfe für Objekte.

03:36.570 --> 03:40.880
Mit Hilfe von Klassen können wir definieren, wie Objekte aussehen sollen; welche Daten

03:40.880 --> 03:42.230
sie enthalten sollen, welche

03:42.230 --> 03:44.070
Methoden sie haben sollen, so dass wir

03:44.070 --> 03:48.240
auf der Grundlage dieser Klassen leicht Objekte erstellen können.

03:48.240 --> 03:51.830
Und diese nennen wir dann Instanzen der Klassen.

03:51.830 --> 03:54.830
Ein Objekt ist also eine Instanz einer Klasse, wenn es auf einer

03:54.830 --> 03:56.850
solchen Klasse basiert, so dass wir schnell

03:56.850 --> 03:59.900
mehrere Objekte mit der gleichen Struktur und den gleichen

03:59.900 --> 04:02.230
Methoden auf der Grundlage der gleichen Klassen

04:02.230 --> 04:04.090
replizieren können.

04:04.090 --> 04:07.280
Mit Hilfe von Klassen können wir also definieren, wie Objekte aussehen sollen,

04:07.280 --> 04:10.170
welche Eigenschaften und Methoden sie haben und so weiter.

04:10.170 --> 04:14.920
Es gibt also Klassen, um die Erstellung von Objekten zu beschleunigen.

04:14.920 --> 04:16.160
Und es ist einfach eine Alternative

04:16.160 --> 04:20.070
zur Verwendung der Ihnen bereits bekannten Objektliteralschreibweise.

04:20.070 --> 04:21.330
Sie machen es einfach einfacher.

04:21.330 --> 04:24.620
Klassen machen es einfach einfacher, mehrere Objekte zu erstellen,

04:24.620 --> 04:26.900
die im Allgemeinen die gleiche Struktur und die

04:26.900 --> 04:28.030
gleichen Methoden haben

04:28.030 --> 04:31.500
und sich vielleicht nur in den genauen Daten unterscheiden, die darin

04:31.500 --> 04:32.780
gespeichert sind.

04:32.780 --> 04:34.540
Nehmen wir an, wir haben mehrere Personen,

04:34.540 --> 04:36.670
die wir mit Objekten darstellen wollen.

04:36.670 --> 04:39.330
Nun, jede Person mag einen Namen und ein Alter haben, die

04:39.330 --> 04:40.830
Werte werden sich unterscheiden,

04:40.830 --> 04:43.310
die allgemeine Struktur ist die gleiche.

04:43.310 --> 04:44.500
Das ist also die Theorie.

04:44.500 --> 04:46.113
Schauen wir uns das in der Praxis an.
