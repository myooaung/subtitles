WEBVTT

00:02.220 --> 00:03.053
Instructeur : Maintenant,

00:03.053 --> 00:04.883
si vous avancez, nous avons plus d'options,

00:04.883 --> 00:07.920
noUnusedLocals, noUnusedParameters, noImplicitReturns.

00:07.920 --> 00:10.470
Cela vous aide à améliorer la qualité du code, essentiellement.

00:10.470 --> 00:13.110
TypeScript se plaindra si vous avez certaines

00:13.110 --> 00:15.930
variables inutilisées et ainsi de suite.

00:15.930 --> 00:20.930
Donc si nous activons ces trois options, par exemple, cette option vous aide avec

00:21.711 --> 00:24.230
les instructions Switch, où vous pourriez

00:24.230 --> 00:26.270
oublier le mot-clé break.

00:26.270 --> 00:28.880
Mais si nous activons ces trois options, TypeScript

00:28.880 --> 00:31.760
se plaindra, par exemple, si vous avez une variable de

00:31.760 --> 00:33.600
nom d'utilisateur ici, localement

00:33.600 --> 00:36.730
dans cette fonction, et que vous ne l'utilisez pas.

00:36.730 --> 00:39.490
Vous voyez, il y a des lignes jaunes ondulées parce que

00:39.490 --> 00:41.500
ce n'est pas vraiment une erreur.

00:41.500 --> 00:43.179
C'est plutôt un avertissement ou un indice.

00:43.179 --> 00:45.643
Donc si je compile ici, vous verrez maintenant, cependant,

00:47.750 --> 00:49.500
j'obtiens une erreur parce que TypeScript

00:49.500 --> 00:51.900
ne connaît que les erreurs.

00:51.900 --> 00:54.140
Et là, nous voyons que le nom d'utilisateur est

00:54.140 --> 00:57.080
déclaré, mais que sa valeur n'est jamais lue car nous nous sommes

00:57.080 --> 01:00.550
assurés que nous ne voulions pas de variables locales inutilisées.

01:00.550 --> 01:02.483
Les variables globales inutilisées, donc

01:03.440 --> 01:06.340
si j'avais quelque chose comme appId ici, sont cependant autorisées

01:06.340 --> 01:09.130
parce que TypeScript ne peut pas savoir si vous avez peut-être

01:09.130 --> 01:12.370
besoin de cette valeur définie globalement dans un autre fichier de

01:12.370 --> 01:13.870
script.

01:13.870 --> 01:14.980
C'est donc autorisé, mais

01:14.980 --> 01:17.280
dans une fonction où il n'y a aucun autre endroit où

01:17.280 --> 01:20.010
vous pourriez en avoir besoin, TypeScript se plaindra maintenant

01:20.010 --> 01:22.020
si vous avez du code inutilisé.

01:22.020 --> 01:23.540
Et c'est généralement une bonne idée.

01:23.540 --> 01:26.021
Permet de supprimer ce code inutilisé.

01:26.021 --> 01:28.510
Il en va de même pour les paramètres non utilisés.

01:28.510 --> 01:31.350
Si vous voulez prendre un H ici où l'un, bien sûr, bind est

01:31.350 --> 01:33.050
cassé maintenant, mais même si nous

01:33.050 --> 01:35.970
passons ceci dans cela fonctionne, mais maintenant, encore

01:35.970 --> 01:39.220
une fois, TypeScript et donc l'ID nous dit que ceci est inutilisé

01:39.220 --> 01:41.780
et soit ceci, donc peut-être que vous devriez le supprimer

01:41.780 --> 01:44.293
ou commencer à l'utiliser.

01:45.238 --> 01:48.173
Donc, il n'y a pas de paramètres inutilisés.

01:48.173 --> 01:51.365
Et noImplicitReturns signifie que nous obtiendrons

01:51.365 --> 01:55.620
une erreur si nous avons une fonction qui renvoie parfois quelque chose

01:55.620 --> 01:57.130
et parfois non.

01:57.130 --> 02:00.913
Disons que nous avons une autre fonction, add, où nous obtenons

02:01.912 --> 02:02.940
deux nombres.

02:02.940 --> 02:05.906
Nombre et n2 est un nombre.

02:05.906 --> 02:10.906
Et, bien sûr, nous pouvons retourner n1 plus n2.

02:14.030 --> 02:15.710
Mais disons que, pour une raison

02:15.710 --> 02:18.518
quelconque, nous vérifions si n1 plus n2 est supérieur

02:18.518 --> 02:21.800
à zéro, parce que nous voulons seulement retourner si nous avons

02:21.800 --> 02:23.700
un résultat supérieur à zéro.

02:23.700 --> 02:25.040
Ensuite, nous voulons une valeur de retour.

02:25.040 --> 02:26.940
Sinon, nous voulons ne rien renvoyer.

02:26.940 --> 02:28.170
Nous ne voulons pas de retour.

02:28.170 --> 02:30.550
Eh bien, nous recevons un avertissement à cause de ce paramètre

02:30.550 --> 02:32.598
supplémentaire avec noImplicitReturns.

02:32.598 --> 02:36.401
TypeScript détecte que toutes les branches de cette fonction ne mènent pas à

02:36.401 --> 02:38.760
une déclaration de retour et, en raison de notre

02:38.760 --> 02:40.650
paramètre, cela n'est pas autorisé.

02:40.650 --> 02:44.150
Nous devons au moins délibérément ne rien renvoyer ici en ajoutant

02:44.150 --> 02:45.790
le mot clé return.

02:45.790 --> 02:48.260
L'omettre n'est pas autorisé ici.

02:48.260 --> 02:49.730
Il est permis si vous avez une fonction

02:49.730 --> 02:52.446
qui ne renvoie rien, dans aucune branche, mais si vous avez

02:52.446 --> 02:54.520
au moins un cas où votre fonction renvoie quelque

02:54.520 --> 02:56.423
chose, alors vous devez vous assurer que

02:56.423 --> 02:59.933
vous renvoyez quelque chose dans tous les cas.

03:01.830 --> 03:03.130
Et avec cela, nous approchons de la fin de cette

03:03.130 --> 03:04.240
visite guidée de la configuration.

03:04.240 --> 03:06.526
Nous pouvons ignorer le moduleResolution ici.

03:06.526 --> 03:08.933
Toutes ces options sont en fait assez avancées, qui n'ont

03:08.933 --> 03:10.830
pas d'importance pour nous ici, qui n'ont

03:10.830 --> 03:13.510
pas d'importance pour vous dans beaucoup de projets.

03:13.510 --> 03:16.600
Les options de carte source vous permettent d'ajuster les cartes sources que

03:16.600 --> 03:18.180
nous avons examinées précédemment.

03:18.180 --> 03:21.440
Donc ces fichiers de traduction de JavaScript à TypeScript.

03:21.440 --> 03:23.720
En général, les paramètres par défaut devraient convenir

03:23.720 --> 03:26.000
ici, donc si vous ne savez pas ce que vous changez et pourquoi

03:26.000 --> 03:27.010
vous le faites, vous n'avez

03:27.010 --> 03:29.470
généralement pas besoin de modifier quoi que ce soit ici.

03:29.470 --> 03:31.512
Et en ce qui concerne ces options expérimentales,

03:31.512 --> 03:34.380
j'y jetterai un coup d'œil, plus précisément à experimentalDecorators,

03:34.380 --> 03:38.910
plus tard dans le module des décorateurs.

03:38.910 --> 03:41.810
Cela permet essentiellement d'utiliser certaines fonctionnalités

03:41.810 --> 03:45.060
dans TypeScript qui sont vraiment expérimentales, pour lesquelles

03:45.060 --> 03:48.271
il n'est pas sûr qu'elles se retrouvent dans JavaScript à un moment

03:48.271 --> 03:50.270
donné dans le futur et pour lesquelles vous

03:50.270 --> 03:52.940
pourriez quand même vouloir travailler.

03:52.940 --> 03:55.220
Ensuite, vous devez explicitement dire à TypeScript que

03:55.220 --> 03:57.070
vous voulez travailler avec ces fonctionnalités

03:57.070 --> 03:59.390
et vous pouvez le faire avec cette configuration.

03:59.390 --> 04:01.880
Mais encore une fois, je reviendrai sur ce point.

04:01.880 --> 04:04.170
Et donc maintenant, nous parcourons ce fichier, beaucoup

04:04.170 --> 04:05.870
d'options que vous pouvez définir ici.

04:05.870 --> 04:08.222
Et au fur et à mesure que TypeScript se développe, vous

04:08.222 --> 04:10.612
obtenez généralement de plus en plus d'options ajoutées

04:10.612 --> 04:13.837
ici, donc les docs officiels sont toujours un excellent endroit pour plonger

04:13.837 --> 04:16.160
plus profondément et s'assurer que vous ne manquez

04:16.160 --> 04:18.210
pas une option intéressante qui pourrait vous

04:18.210 --> 04:20.343
aider dans votre projet.
