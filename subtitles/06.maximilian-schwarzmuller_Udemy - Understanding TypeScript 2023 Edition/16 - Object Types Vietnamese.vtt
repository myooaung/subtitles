WEBVTT

00:02.280 --> 00:03.780
Giảng viên: Hãy tìm hiểu sâu

00:03.780 --> 00:06.450
hơn về các loại cốt lõi mà TypeScript hỗ trợ.

00:06.450 --> 00:09.800
Loại thú vị tiếp theo là loại đối tượng.

00:09.800 --> 00:13.100
Bây giờ, bạn đã biết các đối tượng trong JavaScript, chúng trông như thế này.

00:13.100 --> 00:14.690
Bạn có dấu ngoặc nhọn và sau đó bạn

00:14.690 --> 00:16.350
có các cặp giá trị khóa trong đó và

00:16.350 --> 00:20.460
các giá trị như vậy cũng sẽ được coi là loại đối tượng trong TypeScript, do đó, bất

00:20.460 --> 00:22.250
kỳ đối tượng JavaScript nào cũng thuộc

00:22.250 --> 00:23.620
loại đối tượng.

00:23.620 --> 00:28.410
Mặc dù tôi đã nói rằng có nhiều phiên bản cụ thể hơn của các đối tượng trong

00:28.410 --> 00:30.030
TypeScript để bạn có thể

00:30.030 --> 00:32.514
nói rằng đây không phải là bất kỳ đối tượng

00:32.514 --> 00:35.108
nào, đây là một đối tượng phải có các thuộc

00:35.108 --> 00:37.260
tính này hoặc phải dựa trên hàm tạo

00:37.260 --> 00:39.490
này hoặc hàm tạo kia.

00:39.490 --> 00:41.322
Nhưng chúng ta sẽ đạt được điều đó từng bước một.

00:41.322 --> 00:45.110
Để đi sâu vào các đối tượng, trước hết tôi sẽ đổi tên ứng dụng. ts ở đây và tôi sẽ đổi

00:45.110 --> 00:49.770
tên nó thành basics. đây.

00:49.770 --> 00:52.058
Và thêm một ứng dụng mới. ts, sau đó sẽ ghi

00:52.058 --> 00:55.400
đè lên ứng dụng cũ. js sau khi chúng tôi biên dịch

00:55.400 --> 00:58.600
nó, giờ đây chúng tôi có thể đi sâu vào các đối tượng.

00:58.600 --> 01:01.110
Và hãy bắt đầu bằng cách tạo một đối tượng cơ bản

01:01.110 --> 01:03.902
ở đây, giả sử một người có dấu ngoặc nhọn ở đây.

01:03.902 --> 01:05.870
Và chúng tôi đặt tên này.

01:05.870 --> 01:08.230
Ở đây tôi sẽ đi với Maximilian

01:08.230 --> 01:10.700
vì đó là tên của tôi và 30 tuổi.

01:10.700 --> 01:14.930
Bây giờ, tất nhiên chúng ta có thể an ủi. log person ở đây và nếu chúng ta

01:14.930 --> 01:18.375
làm như vậy, và chúng ta biên dịch cái này thì không

01:18.375 --> 01:23.010
có gì ngạc nhiên, chúng ta sẽ thấy đối tượng đó được in ở đây trong bảng

01:23.010 --> 01:24.536
điều khiển.

01:24.536 --> 01:27.284
Bây giờ, những gì chúng ta cũng có thể làm trong

01:27.284 --> 01:31.690
JavaScript là chúng ta có thể thử truy cập, giả sử, biệt hiệu, một thuộc

01:31.690 --> 01:33.970
tính không tồn tại ở đây.

01:33.970 --> 01:37.320
Bây giờ bạn thấy ngay rằng TypeScript không hài lòng lắm về

01:37.320 --> 01:39.820
điều đó, và do đó IDE của tôi cho tôi biết.

01:39.820 --> 01:42.302
Nó cho tôi biết rằng biệt danh thuộc tính

01:42.302 --> 01:44.050
không tồn tại trên loại đó.

01:44.050 --> 01:47.642
Vì vậy, nếu chúng tôi lưu nó và tôi cố gắng biên dịch nó, chúng

01:47.642 --> 01:49.907
tôi thực sự gặp lỗi tương tự ở dưới đó.

01:49.907 --> 01:52.210
Trình biên dịch TypeScript không thích điều này

01:52.210 --> 01:54.401
và nó cho tôi biết rằng chúng tôi không có thuộc

01:54.401 --> 01:56.430
tính biệt danh trên đối tượng này.

01:56.430 --> 01:59.813
Nó phát hiện ra rằng chúng tôi không có thuộc tính biệt hiệu

01:59.813 --> 02:02.936
này bởi vì nếu chúng tôi di chuột qua người, nó suy ra,

02:02.936 --> 02:05.710
chúng tôi có thể thấy có dấu hai chấm sau người,

02:05.710 --> 02:07.970
do đó, sau tên biến hoặc tên hằng.

02:07.970 --> 02:11.030
Nó suy ra rằng đây là loại dữ liệu được lưu

02:11.030 --> 02:12.110
trữ trong đó.

02:12.110 --> 02:14.181
Bây giờ đó không chỉ là đối tượng, như bạn có thể nói.

02:14.181 --> 02:16.349
Đó là một đối tượng cụ thể.

02:16.349 --> 02:18.920
Đó là một đối tượng có khóa tên, trong đó

02:18.920 --> 02:21.430
kiểu, lần lượt, phải là một chuỗi.

02:21.430 --> 02:24.700
Và khóa tuổi, trong đó loại phải là số.

02:24.700 --> 02:27.116
Và trên thực tế, điều này có thể gây nhầm lẫn ở đây.

02:27.116 --> 02:31.100
Điều này, ở đây, rõ ràng trông giống như một đối tượng JavaScript.

02:31.100 --> 02:33.980
Dấu ngoặc nhọn, cặp giá trị khóa.

02:33.980 --> 02:36.020
Chà, điều quan trọng đầu tiên cần thấy ở đây

02:36.020 --> 02:38.520
là chúng ta có một dấu chấm phẩy ở đây sau mỗi dòng.

02:38.520 --> 02:40.580
Chúng tôi không có điều đó trong một đối tượng JavaScript.

02:40.580 --> 02:41.750
Chúng tôi có một dấu phẩy ở đây.

02:41.750 --> 02:44.160
Và thực sự, đây không phải là một đối tượng JavaScript

02:44.160 --> 02:45.940
ở đây được tạo ở đâu đó.

02:45.940 --> 02:50.600
Đây là loại đối tượng được suy ra bởi TypeScript và các loại đối tượng

02:50.600 --> 02:53.914
được viết gần giống như các đối tượng, nhưng tất

02:53.914 --> 02:57.106
nhiên chúng ta không có các cặp giá trị khóa ở đó,

02:57.106 --> 02:59.239
mà là các cặp loại khóa.

02:59.239 --> 03:02.840
Các loại đối tượng ở đó để mô tả, tốt, loại

03:02.840 --> 03:06.064
đối tượng đang được sử dụng ở đâu đó.

03:06.064 --> 03:07.653
Chúng ta có thể chung chung hơn.

03:07.653 --> 03:10.420
Tôi có thể gán rõ ràng một loại

03:10.420 --> 03:13.640
ở đây cho hằng số của đối tượng.

03:13.640 --> 03:16.100
Đối tượng là một trong những loại tích hợp sẵn,

03:16.100 --> 03:17.460
giống như số và chuỗi, và bây

03:17.460 --> 03:21.030
giờ nếu tôi di chuột qua đây, chúng ta sẽ thấy những người thuộc loại

03:21.030 --> 03:24.000
đối tượng và bây giờ TypeScript thực sự chỉ quan tâm đến

03:24.000 --> 03:26.430
thực tế rằng đây là một loại đối tượng.

03:26.430 --> 03:28.423
Tuy nhiên, bây giờ, khi chúng tôi biên

03:28.423 --> 03:32.808
dịch cái này, chúng tôi gặp lỗi đó, vì TypeScript vẫn phân tích mã của chúng tôi

03:32.808 --> 03:35.490
và thấy rằng chúng tôi cố gắng truy cập thứ gì đó

03:35.490 --> 03:36.666
không tồn tại ở đó, nhưng

03:36.666 --> 03:39.770
điều quan trọng là phải hiểu rằng tất cả đều bắt đầu với

03:39.770 --> 03:42.140
loại đối tượng chung nhất này .

03:42.140 --> 03:44.660
Nhưng thường thì bạn muốn cụ thể hơn thế.

03:44.660 --> 03:47.623
Bạn không chỉ muốn làm việc với loại đối tượng chung chung đó.

03:47.623 --> 03:50.284
Bạn thực sự muốn nhận được sự hỗ trợ đầy đủ.

03:50.284 --> 03:53.550
Ví dụ: ngay bây giờ, nếu tôi thêm một dấu chấm ở đây và tôi xem phần

03:53.550 --> 03:55.570
tự động hoàn thành của mình, tôi không

03:55.570 --> 03:58.080
nhận được sự trợ giúp nào từ IDE của mình.

03:58.080 --> 04:00.303
Lý do cho điều đó là tất cả những gì chúng

04:00.303 --> 04:04.230
ta nói với IDE là chúng ta có một giá trị ở đây, trực tiếp, thuộc

04:04.230 --> 04:05.860
loại đối tượng.

04:05.860 --> 04:08.300
Thật vậy, bây giờ chúng tôi thực sự cũng

04:08.300 --> 04:10.210
gặp lỗi nếu tôi cố truy cập tên.

04:10.210 --> 04:12.270
Tên tồn tại ở đây, phải không?

04:12.270 --> 04:14.120
Nhưng những gì chúng tôi nói với TypeScript

04:14.120 --> 04:16.601
ở đây là chúng tôi chỉ có một đối tượng mà chúng tôi không cung

04:16.601 --> 04:18.889
cấp bất kỳ thông tin nào của mình cho TypeScript.

04:18.889 --> 04:21.739
Vì vậy, trên thực tế, TypeScript không hỗ trợ bất kỳ

04:21.739 --> 04:24.750
loại thuộc tính nào vì chúng tôi không cho nó biết bất

04:24.750 --> 04:26.210
cứ điều gì về đối tượng.

04:26.210 --> 04:28.050
Vì vậy, chúng ta nên cụ thể hơn.

04:28.050 --> 04:32.000
Và chúng tôi cụ thể hơn bằng cách đặt một loại đối tượng cụ thể.

04:32.000 --> 04:34.795
Điều mà TypeScript cũng tự động suy ra.

04:34.795 --> 04:38.548
Chúng tôi làm điều này bằng cách thêm dấu ngoặc nhọn

04:38.548 --> 04:43.370
ở đây sau dấu hai chấm, sau const hoặc tên biến của chúng tôi.

04:43.370 --> 04:46.213
Vì vậy, điều này ở đây không tạo ra một đối tượng JavaScript mới.

04:46.213 --> 04:48.460
Điều này thực sự sẽ bị loại bỏ khỏi mã

04:48.460 --> 04:50.310
JavaScript đã biên dịch.

04:50.310 --> 04:52.643
Thay vào đó, đây chỉ là ký hiệu của TypeScript

04:52.643 --> 04:55.855
về một loại đối tượng chuyên biệt, có thể nói như vậy.

04:55.855 --> 04:59.422
Vì vậy, loại đối tượng nơi chúng tôi cung cấp một số thông

04:59.422 --> 05:01.434
tin về cấu trúc của đối tượng.

05:01.434 --> 05:04.520
Bây giờ, bằng cách chỉ gán một cặp dấu ngoặc nhọn trống làm

05:04.520 --> 05:07.440
kiểu, về cơ bản chúng ta làm tương tự như với đối tượng.

05:07.440 --> 05:09.765
Chúng tôi nói với TypeScript rằng đây là một số đối tượng.

05:09.765 --> 05:12.740
Bây giờ chúng ta có thể cụ thể hơn mặc dù.

05:12.740 --> 05:16.550
Chúng ta có thể thêm các mục nhập giá trị khóa ở đây, tuy nhiên không

05:16.550 --> 05:19.694
phải giá trị khóa mà thay vào đó là loại khóa.

05:19.694 --> 05:22.800
Vì vậy, ở đây chúng ta có thể nói rằng đối tượng

05:22.800 --> 05:25.091
nên được lưu trữ trong người phải

05:25.091 --> 05:28.197
có thuộc tính tên và giá trị của thuộc tính

05:28.197 --> 05:31.140
tên đó phải có kiểu chuỗi.

05:31.140 --> 05:33.795
Vì vậy, ở đây chúng tôi mô tả loại giá trị

05:33.795 --> 05:36.440
mà cuối cùng sẽ được lưu trữ trong tên.

05:36.440 --> 05:39.320
Bây giờ, nhân tiện, bạn thấy tôi đang gặp lỗi ở đây.

05:39.320 --> 05:41.090
Bởi vì những gì tôi đang nói với TypeScript

05:41.090 --> 05:43.489
bây giờ là người của tôi nên có một đối tượng

05:43.489 --> 05:45.900
có chính xác một cặp giá trị khóa, trong đó khóa

05:45.900 --> 05:48.626
là tên và giá trị của khóa đó là chuỗi, nhưng chúng

05:48.626 --> 05:52.730
tôi đã không chỉ định một đối tượng có hai cặp giá trị khóa .

05:52.730 --> 05:55.020
Tên, chứa một chuỗi, điều đó tốt,

05:55.020 --> 05:58.500
nhưng tuổi, chứa một số, và điều đó sẽ không ổn.

05:58.500 --> 06:01.140
Vì vậy, ở đây chúng tôi phải điều chỉnh điều này bằng cách

06:01.140 --> 06:03.520
thêm dấu chấm phẩy và sau đó thêm một cặp giá trị khóa

06:03.520 --> 06:06.300
khác ở đây, nơi chúng tôi nói rằng tuổi phải thuộc loại số.

06:06.300 --> 06:09.670
Vì vậy, không phải 30 ở đây, mà thực sự sẽ được hỗ trợ trong TypeScript,

06:09.670 --> 06:12.673
mà chúng tôi giới hạn nó ở một số cụ thể, nhưng sau đó chúng tôi

06:12.673 --> 06:15.600
sẽ gặp sự cố ngay khi chúng tôi thay đổi điều đó.

06:15.600 --> 06:19.060
Thay vào đó, ở đây tôi chỉ muốn nói tuổi nên là một con số nào đó.

06:19.060 --> 06:22.360
Và bây giờ, về cơ bản, chúng tôi đang chỉ định rõ ràng TypeScript

06:22.360 --> 06:24.870
giống như đã suy luận trước đó.

06:24.870 --> 06:26.900
Như bạn đã biết, đó không phải là một cách thực

06:26.900 --> 06:28.570
hành tốt, nhưng để hiểu các loại đối tượng,

06:28.570 --> 06:29.940
tôi muốn thực hiện ở đây.

06:29.940 --> 06:32.315
Tuy nhiên, đây là điều bạn có thể làm.

06:32.315 --> 06:37.010
Tốt hơn là để TypeScript suy luận điều này như chúng

06:37.010 --> 06:40.440
ta đã làm trước đây, như thế này.

06:40.440 --> 06:42.351
Bây giờ, chỉ để hiển thị một điều

06:42.351 --> 06:45.450
gì đó thú vị, nếu tôi quay lại mã dưới mức tối ưu

06:45.450 --> 06:47.970
này, nơi chúng tôi chỉ định rõ ràng một

06:47.970 --> 06:49.920
loại TypeScript sẽ có thể suy

06:49.920 --> 06:54.920
ra, nếu chúng tôi biên dịch mã này, tất nhiên là nó hoạt động.

06:55.180 --> 06:56.900
Chúng ta có thể truy cập thuộc tính name, nhưng

06:56.900 --> 06:59.077
nếu sau đó chúng ta xem app. js, chúng tôi thấy

06:59.077 --> 07:01.220
phép gán kiểu này đã bị xóa ở đây.

07:01.220 --> 07:03.417
Và đó, tất nhiên, nên được mong đợi.

07:03.417 --> 07:06.290
Như tôi đã đề cập, các kiểu và phép gán kiểu không phải

07:06.290 --> 07:08.120
là một phần của JavaScript.

07:08.120 --> 07:09.460
Chúng chỉ là TypeScript.

07:09.460 --> 07:10.800
Tôi chỉ muốn trình bày điều này

07:10.800 --> 07:12.840
một lần nữa để làm rõ rằng cú pháp này ở đây không

07:12.840 --> 07:15.080
tạo ra một số đối tượng JavaScript, nằm ở đâu đó trong

07:15.080 --> 07:16.485
mã của chúng tôi.

07:16.485 --> 07:21.263
Đây chỉ là cách trình bày của TypeScript về một loại đối tượng giúp

07:21.263 --> 07:24.570
TypeScript hiểu được các đối tượng mà bạn đang

07:24.570 --> 07:25.900
làm việc.

07:25.900 --> 07:29.950
Tất nhiên, cú pháp tốt hơn là cú pháp này, như bạn đã học.
