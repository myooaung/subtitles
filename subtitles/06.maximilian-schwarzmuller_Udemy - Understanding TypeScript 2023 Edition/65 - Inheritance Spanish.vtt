WEBVTT

00:02.300 --> 00:03.830
Instructor: Aquí trabajamos bastante

00:03.830 --> 00:07.350
con nuestro departamento y yo creé mi departamento de contabilidad.

00:07.350 --> 00:09.610
Ahora, para la aplicación que estamos construyendo,

00:09.610 --> 00:12.120
podríamos necesitar departamentos, por supuesto, pero

00:12.120 --> 00:14.320
podríamos necesitar más información para los

00:14.320 --> 00:16.660
tipos específicos de departamentos.

00:16.660 --> 00:18.830
Podemos tener un departamento de informática,

00:18.830 --> 00:22.680
que tiene una identificación, que tiene un nombre, que tiene empleados, pero

00:22.680 --> 00:24.900
que también tiene administradores, algo que

00:24.900 --> 00:28.180
sólo tiene el departamento de informática, por ejemplo.

00:28.180 --> 00:30.340
Podemos tener el departamento de contabilidad,

00:30.340 --> 00:34.280
que también puede tener un ID, un nombre y empleados, pero también

00:34.280 --> 00:37.470
puede tener, digamos, informes.

00:37.470 --> 00:41.030
Una serie de informes que genera, y así sucesivamente.

00:41.030 --> 00:44.541
Así que podría tener algunas propiedades base y también métodos que todos

00:44.541 --> 00:46.970
los departamentos deberían tener, pero luego podríamos

00:46.970 --> 00:49.050
tener versiones especializadas de estos departamentos

00:49.050 --> 00:51.900
con sus propias propiedades y métodos específicos que sólo

00:51.900 --> 00:54.660
ese departamento podría tener.

00:54.660 --> 00:58.100
Una herencia puede ayudarnos a implementar algo así.

00:58.100 --> 01:00.010
Entonces, ¿cómo podemos utilizar la herencia aquí?

01:00.010 --> 01:01.670
Bueno, tenemos nuestro departamento de clase.

01:01.670 --> 01:05.130
Ahora vamos a crear estos departamentos especializados.

01:05.130 --> 01:08.483
Así que aquí podríamos tener un departamento de informática de clase.

01:09.610 --> 01:14.010
Y en esta clase aquí, quiero utilizar el nombre y el ID y los empleados

01:14.010 --> 01:17.270
del departamento general, pero quiero añadir mis

01:17.270 --> 01:19.537
propias características.

01:19.537 --> 01:21.970
Ahora podemos heredar la clase departamento utilizando

01:21.970 --> 01:24.270
la palabra clave extends aquí y luego la clase

01:24.270 --> 01:25.970
que queremos heredar.

01:25.970 --> 01:27.530
En este caso, es el departamento.

01:27.530 --> 01:30.600
Ahora, es importante que sólo se puede heredar de una clase,

01:30.600 --> 01:33.010
por lo que no se puede heredar de varias clases,

01:33.010 --> 01:34.660
si es que se necesita.

01:34.660 --> 01:38.070
Así que ahora, aquí, estoy heredando de departamento y

01:38.070 --> 01:40.700
una consecuencia es que si ahora creo un departamento

01:40.700 --> 01:44.560
de TI aquí, de hecho puedo llamarlo así, con este tipo de constructor,

01:44.560 --> 01:46.640
a pesar de que la clase de departamento

01:46.640 --> 01:49.400
de TI está vacía.

01:49.400 --> 01:52.830
Si guardamos eso, efectivamente vemos que funciona

01:52.830 --> 01:55.152
como antes, porque cuando heredamos

01:55.152 --> 01:59.610
de otra clase, la clase que hereda automáticamente obtiene todo lo que

01:59.610 --> 02:02.870
la clase base, departamento en este caso, tiene, incluyendo

02:02.870 --> 02:06.072
su constructor, así que mientras no añadamos un constructor

02:06.072 --> 02:11.072
dedicado para esta clase heredada, así que para esta subclase, el constructor

02:11.130 --> 02:20.800
de la clase base, así que este constructor se utiliza automáticamente cuando instanciamos nuestra subclase.

02:20.800 --> 02:25.170
Así que al final llamamos mágicamente al constructor de la clase base con los

02:25.170 --> 02:27.562
argumentos que estamos pasando aquí.

02:27.562 --> 02:30.350
Ahora podemos añadir nuestro propio constructor, sin embargo,

02:30.350 --> 02:33.570
mediante la adición de constructor aquí en el departamento de TI y ahora

02:33.570 --> 02:35.800
ves que estoy recibiendo errores.

02:35.800 --> 02:38.580
Por un lado, ahora, por supuesto, deberíamos aceptar los datos

02:38.580 --> 02:40.850
que estamos recibiendo aquí, aunque podríamos argumentar

02:40.850 --> 02:44.120
que el nombre no debería ser algo que tengamos que pasar aquí.

02:44.120 --> 02:46.430
Y no debería ser también contable.

02:46.430 --> 02:49.110
Pero en cambio aquí, el nombre del departamento,

02:49.110 --> 02:52.563
ya que es la clase de departamento de TI, siempre puede ser TI.

02:53.700 --> 02:56.910
Sin embargo, todavía quiero aceptar mi

02:56.910 --> 03:01.130
ID, pero ahora quiero esencialmente reenviar que al

03:01.130 --> 03:04.120
igual que el nombre fijo de TI, al constructor

03:04.120 --> 03:06.420
de departamento.

03:06.420 --> 03:09.240
Y para ello tenemos una palabra clave especial que podemos,

03:09.240 --> 03:11.120
y en este caso debemos, utilizar.

03:11.120 --> 03:13.210
Y eso es súper.

03:13.210 --> 03:15.580
Siempre que añadas tu propio constructor

03:15.580 --> 03:18.400
en una clase que hereda de otra, tienes que añadir

03:18.400 --> 03:21.200
super en la clase heredera y tienes que ejecutarlo

03:21.200 --> 03:23.790
como una función.

03:23.790 --> 03:28.070
Super aquí llama al constructor de la clase base, por lo que el

03:28.070 --> 03:31.300
constructor del departamento en este caso.

03:31.300 --> 03:33.690
Y ahora el otro super toma los argumentos

03:33.690 --> 03:37.630
del constructor de la clase padre, el ID y el nombre.

03:37.630 --> 03:41.060
Así que aquí puedo reenviar el ID, así que el ID que estoy

03:41.060 --> 03:44.360
recibiendo aquí se pasa a super, y puedo codificar

03:44.360 --> 03:46.860
un valor para el nombre, como IT.

03:46.860 --> 03:48.840
Así que esto llamará al constructor

03:48.840 --> 03:52.500
de la clase base desde dentro de la subclase.

03:52.500 --> 03:55.310
Ahora, importante, tienes que llamar a super primero

03:55.310 --> 03:58.220
en tu constructor antes de hacer algo con la palabra

03:58.220 --> 03:59.700
clave "this".

03:59.700 --> 04:03.860
Así que si planeas asignar cualquier otra propiedad especial aquí tienes

04:03.860 --> 04:06.670
que hacerlo después de llamar a super.

04:06.670 --> 04:10.346
Y, de hecho, quiero añadir aquí mis propias propiedades especiales.

04:10.346 --> 04:13.528
Podríamos añadir a nuestros administradores aquí.

04:13.528 --> 04:17.800
Digamos que como privado, o como público, en realidad.

04:17.800 --> 04:20.878
Como propiedad pública, admins,

04:20.878 --> 04:25.630
y que debería ser un array de cadenas, digamos.

04:25.630 --> 04:27.780
Pues entonces no quiero reenviar

04:27.780 --> 04:31.460
esto a mi clase base porque la clase departamento no

04:31.460 --> 04:34.670
quiere ningún dato del administrador.

04:34.670 --> 04:38.800
En su lugar, quiero almacenar esto en una propiedad del departamento

04:38.800 --> 04:42.150
de TI por lo que aquí podemos entonces añadir admins como

04:42.150 --> 04:44.922
un campo que toma un par de administradores y almacenar

04:44.922 --> 04:47.290
admins allí, o porque estoy usando público

04:47.290 --> 04:49.070
aquí, ya estoy usando ese acceso

04:49.070 --> 04:52.020
directo donde una propiedad del mismo nombre se

04:52.020 --> 04:55.160
creará y los datos que alimentamos en este argumento

04:55.160 --> 05:00.148
se almacena en esa propiedad creada automáticamente.

05:00.148 --> 05:03.710
Todavía para dejar claro que primero hay que llamar

05:03.710 --> 05:07.610
a super, tomaré el camino más largo, añadiré admins aquí,

05:07.610 --> 05:12.610
así, y luego aquí diré, esto. admins = administradores.

05:13.260 --> 05:15.160
De nuevo, el atajo sería más corto.

05:15.160 --> 05:17.830
Hago esto aquí para mostrar y dejar bien claro

05:17.830 --> 05:21.020
que si estás usando algo que utiliza la palabra clave

05:21.020 --> 05:24.480
"this" tienes que hacerlo después de llamar a super.

05:24.480 --> 05:27.640
Y con eso si guardamos eso, me va a dar un error, porque no estoy

05:27.640 --> 05:29.530
pasando ningún admin, así que vamos

05:29.530 --> 05:30.920
a hacer eso aquí.

05:30.920 --> 05:33.920
Max es el único administrador que paso aquí.

05:33.920 --> 05:36.950
Ahora podemos guardar eso y compilarlo sin errores y ahora

05:36.950 --> 05:39.910
aquí, efectivamente vemos nuestro departamento aquí.

05:39.910 --> 05:41.840
Ahora tiene el nombre de IT.

05:41.840 --> 05:44.670
Y si registramos por consola todo el departamento,

05:44.670 --> 05:49.670
y podemos cambiar el nombre de contabilidad por el de TI y luego por el

05:50.220 --> 05:54.250
de consola. regístrese aquí.

05:54.250 --> 05:57.570
Por supuesto, el cambio de nombre era opcional, sólo tiene más sentido, dado

05:57.570 --> 06:00.160
que estamos construyendo un departamento de TI aquí.

06:00.160 --> 06:02.510
Ahora que la consola ha registrado todo el departamento,

06:02.510 --> 06:06.110
efectivamente vemos que tenemos administradores, pero también tenemos

06:06.110 --> 06:11.110
empleados y todo lo que he configurado en mi clase de departamento aquí.

06:12.000 --> 06:13.990
Así que esa es la herencia en acción,

06:13.990 --> 06:16.520
una característica muy útil, porque ahora, por

06:16.520 --> 06:20.770
supuesto, también podemos crear nuestro departamento de contabilidad aquí

06:20.770 --> 06:23.260
extendiendo departamento y allí podemos entonces

06:23.260 --> 06:27.030
añadir nuestras cosas específicas de contabilidad.

06:27.030 --> 06:29.540
Así que todavía podemos utilizar un constructor

06:29.540 --> 06:31.700
aquí, y ahora tal vez con el acceso

06:31.700 --> 06:34.400
directo, aceptar un par de informes aquí

06:34.400 --> 06:36.170
que podría ser una propiedad

06:36.170 --> 06:40.950
privada y luego tenemos addReport que toma el texto, que debe ser una cadena,

06:40.950 --> 06:45.360
y luego llegamos a los informes aquí y empujar el texto como un elemento

06:45.360 --> 06:49.430
en el informe y tal vez también tenemos getReports aquí y allí sólo

06:49.430 --> 06:56.990
consola.

06:56.990 --> 06:56.990
log (este. informes)

06:57.563 --> 07:00.860
o lo nombramos printReports, por lo que tiene más sentido.

07:00.860 --> 07:02.720
Y ahora tendríamos una versión muy especial

07:02.720 --> 07:04.890
de un departamento con dos métodos que el departamento

07:04.890 --> 07:06.740
base no tiene y con una propiedad extra

07:06.740 --> 07:08.100
que el departamento base no

07:08.100 --> 07:09.840
tiene.

07:09.840 --> 07:13.000
Y aún así, recibimos todo del departamento base.

07:13.000 --> 07:15.560
El nombre, que estableceré aquí como contabilidad,

07:15.560 --> 07:17.950
y el ID, que también remitimos al constructor

07:17.950 --> 07:20.260
del departamento base.

07:20.260 --> 07:22.120
Y con eso, ahí abajo, si creamos

07:22.120 --> 07:24.770
nuestra contabilidad aquí con el nuevo

07:24.770 --> 07:27.510
AccountingDepartment, podemos introducir

07:27.510 --> 07:31.750
nuestro ID y luego nuestros informes.

07:31.750 --> 07:34.340
Digamos que es una matriz vacía inicialmente.

07:34.340 --> 07:39.340
Luego podemos llamar a addReport, algo salió mal, nunca tan bien por supuesto,

07:40.550 --> 07:43.446
en la contabilidad supongo, y luego también

07:43.446 --> 07:48.446
podemos imprimir nuestros informes aquí como eso y con todo eso se compila

07:50.070 --> 07:52.630
muy bien y obtenemos el informe aquí

07:52.630 --> 07:55.710
y vemos, el departamento de TI por ejemplo, no

07:55.710 --> 07:58.890
tendría ningún informe.

07:58.890 --> 08:01.820
El departamento de contabilidad lo hace por herencia,

08:01.820 --> 08:05.623
donde heredamos ciertas características y añadimos las nuestras.
