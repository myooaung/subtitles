WEBVTT

1
00:00:02.220 --> 00:00:05.760
<v ->As a next step, I wanna work on these types here,</v>

2
00:00:05.760 --> 00:00:09.900
the any type I'm using here for my assigned projects,

3
00:00:09.900 --> 00:00:11.320
for the listeners here,

4
00:00:11.320 --> 00:00:14.980
and also for the projects in the project state.

5
00:00:14.980 --> 00:00:19.030
Of course, here, I don't wanna work with any,

6
00:00:19.030 --> 00:00:20.740
it would make more sense to have

7
00:00:20.740 --> 00:00:25.660
a dedicated project class or project type, which we can use.

8
00:00:25.660 --> 00:00:27.760
And indeed, I will create a class for that

9
00:00:29.070 --> 00:00:29.903
project

10
00:00:31.390 --> 00:00:32.450
type,

11
00:00:32.450 --> 00:00:34.890
simply by using class project

12
00:00:34.890 --> 00:00:38.740
so that we have a way of building project objects,

13
00:00:38.740 --> 00:00:41.570
which always have the same structure.

14
00:00:41.570 --> 00:00:44.760
Right now I'm doing it down there with the literal notation.

15
00:00:44.760 --> 00:00:47.920
The downside of that, of course, is that we have to remember

16
00:00:47.920 --> 00:00:50.490
that it's description and not Desc.

17
00:00:50.490 --> 00:00:52.410
that we need an ID, which is a string,

18
00:00:52.410 --> 00:00:53.470
and so on.

19
00:00:53.470 --> 00:00:56.440
So that's where a custom type can help us

20
00:00:56.440 --> 00:00:59.750
and I'll create a class and not an interface

21
00:00:59.750 --> 00:01:02.300
or a Custom type with the type keyword

22
00:01:02.300 --> 00:01:05.470
because I want to be able to instantiate it.

23
00:01:05.470 --> 00:01:07.960
So how should such a class look like

24
00:01:07.960 --> 00:01:10.700
or such a project look like to be precise?

25
00:01:10.700 --> 00:01:12.320
Well, I'll add a constructor

26
00:01:12.320 --> 00:01:17.280
and then use this shortcut of assigning arguments

27
00:01:17.280 --> 00:01:19.100
or parameters to the constructor,

28
00:01:19.100 --> 00:01:22.310
which then automatically become properties as well,

29
00:01:22.310 --> 00:01:24.460
by adding the accessor at the beginning,

30
00:01:24.460 --> 00:01:25.650
Public, in this case,

31
00:01:25.650 --> 00:01:28.250
and then the name of the argument and property,

32
00:01:28.250 --> 00:01:29.450
and then the type.

33
00:01:29.450 --> 00:01:33.100
And here every project should have an ID.

34
00:01:33.100 --> 00:01:34.990
Every project should have a title,

35
00:01:34.990 --> 00:01:37.330
which also is a string, just like the ID.

36
00:01:37.330 --> 00:01:38.690
It should have a description,

37
00:01:38.690 --> 00:01:39.920
which is a string,

38
00:01:39.920 --> 00:01:43.540
it should have a People property,

39
00:01:43.540 --> 00:01:44.420
which is a number

40
00:01:44.420 --> 00:01:47.440
that's the number of people assigned to a project.

41
00:01:47.440 --> 00:01:49.580
And one thing I also want to add,

42
00:01:49.580 --> 00:01:51.640
which we didn't have thus far,

43
00:01:51.640 --> 00:01:53.580
is actually a project status.

44
00:01:53.580 --> 00:01:56.920
Because right now when we add a project here,

45
00:01:56.920 --> 00:01:58.680
it appears in both lists.

46
00:01:58.680 --> 00:02:01.530
Now, I want to add status to a project

47
00:02:01.530 --> 00:02:03.630
which of course can be changed

48
00:02:03.630 --> 00:02:07.470
so that we actually can filter for active projects

49
00:02:07.470 --> 00:02:11.470
in the first box and finished projects in a second box.

50
00:02:11.470 --> 00:02:15.000
So to be only show the right projects at every box.

51
00:02:15.000 --> 00:02:19.890
So for that I'll add another public property here, status.

52
00:02:19.890 --> 00:02:21.280
And now the question of course is

53
00:02:21.280 --> 00:02:23.985
which type should this status have?

54
00:02:23.985 --> 00:02:28.240
Now we could use a union type with two literal types

55
00:02:28.240 --> 00:02:31.170
Active and Finished what we used earlier already.

56
00:02:31.170 --> 00:02:33.280
But here, I always want to introduce

57
00:02:33.280 --> 00:02:36.890
or reintroduce another type you learned about,

58
00:02:36.890 --> 00:02:38.320
and that's the Enum.

59
00:02:38.320 --> 00:02:41.890
The Enum perfect here because we have exactly two options.

60
00:02:41.890 --> 00:02:44.950
And here in the context of this project object,

61
00:02:44.950 --> 00:02:48.740
we also don't need a text which makes sense to humans,

62
00:02:48.740 --> 00:02:50.270
which we store as a value,

63
00:02:50.270 --> 00:02:52.341
but we really just need some identifier.

64
00:02:52.341 --> 00:02:56.140
So here I'll add a new Enum project status.

65
00:02:56.140 --> 00:02:59.810
And I want to have two values there,

66
00:02:59.810 --> 00:03:02.890
Active and Finished.

67
00:03:02.890 --> 00:03:05.440
And then here, this status will be of type

68
00:03:05.440 --> 00:03:08.610
project status just like that.

69
00:03:08.610 --> 00:03:11.003
This is now my project class.

70
00:03:11.900 --> 00:03:14.220
With that here, we can say that this is an array

71
00:03:14.220 --> 00:03:17.820
of projects using that project class.

72
00:03:17.820 --> 00:03:20.351
And of course, when we create a project here,

73
00:03:20.351 --> 00:03:24.780
we do that by using new project

74
00:03:24.780 --> 00:03:25.613
project,

75
00:03:25.613 --> 00:03:26.620
not project state.

76
00:03:26.620 --> 00:03:30.310
And here to project we forward an ID in this case,

77
00:03:30.310 --> 00:03:32.200
as mentioned before,

78
00:03:32.200 --> 00:03:35.370
a random number which we convert to a string,

79
00:03:35.370 --> 00:03:36.720
then the title,

80
00:03:36.720 --> 00:03:38.210
then the description,

81
00:03:38.210 --> 00:03:41.930
then the NUM of People here,

82
00:03:41.930 --> 00:03:45.080
and then also, of course, that's status, right.

83
00:03:45.080 --> 00:03:49.950
And one thing I want to have here in this application

84
00:03:49.950 --> 00:03:53.180
in this demo project is that every new project

85
00:03:53.180 --> 00:03:54.830
by default is active.

86
00:03:54.830 --> 00:03:57.040
So when we create a new project here,

87
00:03:57.040 --> 00:04:00.064
we assign projectstatus.active

88
00:04:00.064 --> 00:04:02.990
here as a value for the status

89
00:04:02.990 --> 00:04:05.230
with that, we have to project which we add.

90
00:04:05.230 --> 00:04:06.720
And now there's one other place

91
00:04:06.720 --> 00:04:08.450
where we need the project class.

92
00:04:08.450 --> 00:04:11.220
And that is here in project List class

93
00:04:11.220 --> 00:04:13.474
there, we have the Assign projects property.

94
00:04:13.474 --> 00:04:17.240
And of course, that should always be an array of projects.

95
00:04:17.240 --> 00:04:19.530
Now with that we're using Beta typing.

96
00:04:19.530 --> 00:04:22.810
And one advantage is that here in render projects,

97
00:04:22.810 --> 00:04:26.360
we now also get auto completion here, for example.

98
00:04:26.360 --> 00:04:29.020
And we would also get an error,

99
00:04:29.020 --> 00:04:31.300
a compilation error if we try to save that,

100
00:04:31.300 --> 00:04:33.100
because now TypeScript understands

101
00:04:33.100 --> 00:04:35.360
with which types we're working here.

102
00:04:35.360 --> 00:04:39.040
So that's the project Class and how we can use that.

103
00:04:39.040 --> 00:04:41.760
Project class isn't the only class However,

104
00:04:41.760 --> 00:04:44.230
we also have the Listener here.

105
00:04:44.230 --> 00:04:48.630
And for that, I'll add a new custom type Listener.

106
00:04:48.630 --> 00:04:50.390
The name is of course up to you.

107
00:04:50.390 --> 00:04:54.280
And I just use a type here because I wanna basically

108
00:04:54.280 --> 00:04:58.260
encode a function type with one word.

109
00:04:58.260 --> 00:04:59.640
So what do we mean with that?

110
00:04:59.640 --> 00:05:03.270
Well, of course, a listener here in our application

111
00:05:03.270 --> 00:05:05.370
is just a function, right?

112
00:05:05.370 --> 00:05:07.160
What we stored in the listeners array

113
00:05:07.160 --> 00:05:08.960
is just a bunch of functions

114
00:05:08.960 --> 00:05:11.060
Add Listener pushes a new function,

115
00:05:11.060 --> 00:05:12.200
and when something changes,

116
00:05:12.200 --> 00:05:14.190
we execute that function.

117
00:05:14.190 --> 00:05:17.610
So here a listener is really just a function.

118
00:05:17.610 --> 00:05:22.610
But it is a function that receives our

119
00:05:22.870 --> 00:05:23.703
items,

120
00:05:23.703 --> 00:05:27.113
certain items in our case and array of projects.

121
00:05:28.500 --> 00:05:30.410
And that then does something with it.

122
00:05:30.410 --> 00:05:32.480
Now to be precise here, of course,

123
00:05:32.480 --> 00:05:33.550
to define a function type,

124
00:05:33.550 --> 00:05:35.200
we don't have curly braces here,

125
00:05:35.200 --> 00:05:37.440
but instead as you learned the return type,

126
00:05:37.440 --> 00:05:38.780
and that will be wide,

127
00:05:38.780 --> 00:05:41.880
which means we don't care about any value

128
00:05:41.880 --> 00:05:44.090
that Listener function might return.

129
00:05:44.090 --> 00:05:46.140
In the place where we work with listeners.

130
00:05:46.140 --> 00:05:47.940
We don't need any return type.

131
00:05:47.940 --> 00:05:49.810
We just want to ensure that

132
00:05:49.810 --> 00:05:51.880
whoever passes as such a listener

133
00:05:51.880 --> 00:05:55.870
expects to get some items when the listener fires.

134
00:05:55.870 --> 00:05:58.530
With that here, we can say that Listeners

135
00:05:58.530 --> 00:06:02.760
is an array of listener well functions in the end.

136
00:06:02.760 --> 00:06:05.670
And here, when I push listener function,

137
00:06:05.670 --> 00:06:08.480
I need to make clear that it's not just any function,

138
00:06:08.480 --> 00:06:10.630
but that it's a type of listener,

139
00:06:10.630 --> 00:06:12.350
then everything works.

140
00:06:12.350 --> 00:06:14.530
Now in the place where we use Add Listener,

141
00:06:14.530 --> 00:06:16.180
which is down there,

142
00:06:16.180 --> 00:06:17.650
we now also, of course,

143
00:06:17.650 --> 00:06:19.869
can enhance our typing and make it clear that here,

144
00:06:19.869 --> 00:06:23.440
we will actually get a bunch of projects.

145
00:06:23.440 --> 00:06:27.220
So now with that, we set up our listener,

146
00:06:27.220 --> 00:06:32.210
we added the project type, and that changes nothing here.

147
00:06:32.210 --> 00:06:35.120
If we now add something that works,

148
00:06:35.120 --> 00:06:36.900
and if I add a second item,

149
00:06:36.900 --> 00:06:38.880
that still gets added besides

150
00:06:38.880 --> 00:06:40.530
the first item being added again,

151
00:06:40.530 --> 00:06:43.230
as well, and we're not doing any filtering

152
00:06:43.230 --> 00:06:45.260
in any of the lists at all.

153
00:06:45.260 --> 00:06:48.600
So before we continue working on our parts,

154
00:06:48.600 --> 00:06:50.570
let's make sure we're not having

155
00:06:50.570 --> 00:06:53.990
this duplication here inside of a single list,

156
00:06:53.990 --> 00:06:57.640
and also not the duplication across both boxes here,

157
00:06:57.640 --> 00:06:58.610
but that instead,

158
00:06:58.610 --> 00:07:01.030
only active projects are Showing up here

159
00:07:01.030 --> 00:07:02.940
and only finished projects

160
00:07:02.940 --> 00:07:06.450
and therefore initially no projects show up here

161
00:07:06.450 --> 00:07:08.010
in finished projects.

162
00:07:08.010 --> 00:07:09.623
So let's fix that.

