WEBVTT

00:02.350 --> 00:04.720
-ーー そして､ モジュールはこれで終了です｡ 

00:04.720 --> 00:08.850
モジュールを使うことで､ より保守的で管理しやすいコードを書くことができるようになるので､

00:08.850 --> 00:14.550
非常に便利で重要な機能です｡

00:14.550 --> 00:14.550
すべてを1つのファイルにまとめてしまうと､

00:16.360 --> 00:19.360
混乱しますし､ 本当に小さなプロジェクト以外では選択肢に入りません｡

00:19.360 --> 00:22.350
これまで名前空間やESモジュールを使用することは､

00:22.350 --> 00:24.710
より良い代替のためにあります｡

00:24.710 --> 00:27.620
そのため､ 各ファイルは比較的小さく､

00:27.620 --> 00:30.780
管理しやすい状態に保たれます｡

00:30.780 --> 00:36.690
それでも､ 最終的にはその全体が､ 自分の望む大きなアプリケーションになるんですね｡

00:36.690 --> 00:38.580
名前空間とESモジュール､

00:38.580 --> 00:42.883
この2つのアプローチに関して言えば､ 明らかにESモジュールを推奨します｡

00:42.883 --> 00:46.520
なぜなら､ 型安全性が向上し､ すべてのファイルが､

00:46.520 --> 00:52.210
何を望んでいるかを明確に指定しなければならないからです｡

00:52.210 --> 00:54.270
名前空間を使えば､ あるファイルが何かをインポートすれば､

00:54.270 --> 00:56.280
それが別のファイルにも必要なものであれば､

00:56.280 --> 00:58.350
それで十分だったのです｡

00:58.350 --> 00:59.970
このため､ インポートした1つのファイルを削除すると､

00:59.970 --> 01:05.640
気づかないうちに他のファイルも壊れてしまうという欠点があります｡

01:05.640 --> 01:08.774
少なくとも､ コードを実行する前に気づかれることはないでしょう｡ 

01:08.774 --> 01:11.340
だから､ だから､ ESモジュールを使ってください｡ 

01:11.340 --> 01:14.250
小規模なプロジェクトでは名前空間を使うか､ 何らかの理由で ES

01:14.250 --> 01:24.290
モジュールを使えない場合､ またそのようなモジュールを翻訳してくれる他のバンドルが使えない場合です｡

01:24.290 --> 01:24.290
全ての作品と全てのブラウザに対応するノンモジュールコードへ｡

01:26.360 --> 01:30.070
でも､ それ以外は本当にモジュール､ ESモジュールを使うんです｡ 

01:30.070 --> 01:31.748
そして､ 今言ったことが重要なのです｡ 

01:31.748 --> 01:37.620
これらのモジュールは､ 今のところモダンブラウザでしか使えません｡

01:37.620 --> 01:39.670
なぜなら､ 私たちは基本的にこれらのファイルをすべてインポートするために､

01:39.670 --> 01:42.640
ブラウザに依存しているからです｡ そうだろ？

01:42.640 --> 01:44.675
さて､ もちろん私たちは､ typescriptを使って､

01:44.675 --> 01:48.940
すべてのブラウザで動作するアプリケーションを作りたいと思っています｡

01:48.940 --> 01:52.090
例えば､ Internet Explorer 9など｡ 

01:52.090 --> 01:54.130
そこでは､ これは支持されないでしょう｡ 

01:54.130 --> 01:55.730
このSyntaxは､ 現地ではサポートされていません｡ 

01:55.730 --> 01:57.410
そこで､ アプリが実行されなくなるのです｡ 

01:57.410 --> 01:59.160
また､ そこでサポートされていない他の機能を使用している場合もありますが､

01:59.160 --> 02:03.840
主にこちらの機能はすべてのブラウザでサポートされているわけではありません｡

02:03.840 --> 02:09.283
そこで､ それをすべてのブラウザで動作させるために､ バンドルツールを利用することができます｡

02:09.283 --> 02:09.283
例えば､ Webpackを使うことができます｡ 

02:09.283 --> 02:12.431
それを1つのJavaScriptファイルに束ねること｡ 

02:12.431 --> 02:15.810
そのため､ 開発中は複数のファイルや強力なタイピングを体験することができますが､

02:15.810 --> 02:21.310
コードを出荷するときには､ 実際には1つのファイルしかありません｡

02:21.310 --> 02:25.676
そして､ ここにあるすべてのファイルの代わりに1つのファイルを送信することで､

02:25.676 --> 02:31.181
ブラウザが多くのファイルをダウンロードする必要がないことを保証しています｡

02:31.181 --> 02:37.010
なぜなら､ ファイルをダウンロードするたびに､ 余分な往復が発生してしまうからです｡

02:37.010 --> 02:37.010
開発ツールのネットワークタブで､

02:37.010 --> 02:38.510
実際に確認することができます｡

02:38.510 --> 02:40.650
このウォーターフォール図を見て､

02:40.650 --> 02:44.520
ブロックの最初に小さな白いボックスがありますよね｡

02:44.520 --> 02:48.506
これは基本的に､ HDPリクエストのセットアップにかかる時間です｡

02:48.506 --> 02:51.807
ですから､ ダウンロードするファイルは非常に小さいのですが､

02:51.807 --> 02:54.700
それでも､ HDPのリクエストごとに冗長な追加設定を行うため､

02:54.700 --> 02:59.100
ある程度の時間がかかってしまいます｡

02:59.100 --> 03:02.330
だから､ ブラウザのサポートに関係なく､ リクエストを少なくすることは､

03:02.330 --> 03:04.640
とにかく良いアイデアなのです｡

03:04.640 --> 03:08.370
そこで､ ブラウザのサポートとリクエストの減少という2つの理由から､

03:08.370 --> 03:12.453
次の講座ではWebpackを使ったバンドリングについて見ていきます｡
