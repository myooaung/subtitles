WEBVTT

00:02.210 --> 00:03.450
Männlicher Kursleiter: Neben

00:03.450 --> 00:06.170
Eigenschaften kann man auch Dekoratoren zu Accessoren hinzufügen,

00:06.170 --> 00:09.200
und ich werde eine neue Dekoratorfunktion erstellen, da diese nun

00:09.200 --> 00:11.660
freie Argumente erhalten wird.

00:11.660 --> 00:16.430
Log2, es wird auch das Ziel, die wiederum entweder der Prototyp, wenn wir mit einer

00:16.430 --> 00:18.330
Instanz Accessor zu tun haben,

00:18.330 --> 00:21.290
oder wenn wir mit einem statischen zu tun haben, wird

00:21.290 --> 00:23.360
es die Konstruktorfunktion sein,

00:23.360 --> 00:24.960
so dass wir nicht wissen, wir

00:24.960 --> 00:27.290
werden vom Typ any sein.

00:27.290 --> 00:32.290
Dann haben wir den Namen des Mitglieds, mit dem wir es zu tun haben.

00:32.410 --> 00:35.030
Also der Name des Accessors am Ende.

00:35.030 --> 00:38.683
Und wir haben hier auch den Eigenschaftsdeskriptor, der vom

00:39.580 --> 00:42.030
Typ Eigenschaftsdeskriptor sein wird.

00:42.030 --> 00:44.600
Das ist der in TypeScript integrierte Typ.

00:44.600 --> 00:49.600
Dort loggen wir also den Accessor Decorator und dann werde ich auch

00:50.030 --> 00:54.210
das Ziel auf der Konsole loggen, dann vielleicht neue

00:54.210 --> 00:56.470
Zeilen, um sie in der Ausgabe

00:56.470 --> 01:01.470
lesbarer zu machen, den Namen und auch den Deskriptor.

01:01.720 --> 01:05.890
Fügen wir nun log2 zum Setter hinzu, und sehen wir, was

01:05.890 --> 01:07.350
wir erhalten.

01:07.350 --> 01:10.733
Wenn wir das speichern, sehen Sie dort unten den Accessor

01:10.733 --> 01:14.090
Decorator, der hier ausgeführt wird.

01:14.090 --> 01:19.090
Wir haben unseren Prototyp wieder bekommen, genauso wie einen Schwabbel für die Immobilie.

01:19.320 --> 01:23.570
Dann haben wir den Namen unseres Accessors, in diesem Fall Preis.

01:23.570 --> 01:24.900
Nicht unterstrichener Preis,

01:24.900 --> 01:27.890
also nicht die Eigenschaft, mit der es intern zu tun hat.

01:27.890 --> 01:30.570
Stattdessen wirklich der Name des Accessors selbst.

01:30.570 --> 01:33.630
Und wir haben hier einen Eigenschaftsdeskriptor, wo wir

01:33.630 --> 01:36.240
sehen, dass zum Beispiel eine Setter-Funktion definiert

01:36.240 --> 01:37.600
ist, eine Getter-Funktion

01:37.600 --> 01:41.990
nicht, denn für den Preis habe ich nur einen Setter, keinen Getter.

01:41.990 --> 01:44.320
Und wir sehen, dass sie nicht aufzählbar, aber

01:44.320 --> 01:45.680
konfigurierbar ist.

01:45.680 --> 01:47.810
So können wir diese Definition hier

01:47.810 --> 01:51.000
zum Beispiel ändern, löschen und so weiter.

01:51.000 --> 01:54.520
Das alles gibt es, und so können wir einen Dekorator zu einem Accessor

01:54.520 --> 01:56.650
hinzufügen, und auf was wir dann innerhalb

01:56.650 --> 01:58.920
dieses Dekorators zugreifen können.

01:58.920 --> 02:00.910
Neben Eigenschaften und Accessors haben

02:00.910 --> 02:04.350
wir jetzt auch Methoden und können Methoden Dekoratoren hinzufügen.

02:04.350 --> 02:09.350
Hier füge ich also Log3 hinzu, und füge das zu meiner Methode dort unten hinzu,

02:09.430 --> 02:11.970
um den Preis mit Text zu erhalten.

02:11.970 --> 02:13.220
Und nun stellt sich natürlich

02:13.220 --> 02:17.323
die Frage, welche Argumente ein solcher Methodendekorator erhält?

02:18.180 --> 02:22.230
Ein Methodendekorator erhält auch freie Argumente, wobei das

02:22.230 --> 02:25.520
Ziel wiederum, wenn es sich um eine Instanzmethode

02:25.520 --> 02:28.420
handelt, der Prototyp des Objekts ist.

02:28.420 --> 02:31.150
Wenn es sich um eine statische Methode handelt, die

02:31.150 --> 02:34.993
Konstruktorfunktion wie zuvor, dann der Name der Methode hier, also

02:36.450 --> 02:39.380
eigentlich eine Zeichenkette oder ein Symbol.

02:39.380 --> 02:44.380
Und auch der Deskriptor am Ende, der Eigenschaftsdeskriptor.

02:44.490 --> 02:46.140
Dies sind die freien Argumente, die wir hier erhalten,

02:46.140 --> 02:48.110
und Sie sehen, dass dies die gleichen Argumente sind wie

02:48.110 --> 02:49.410
in unserem Accessor.

02:49.410 --> 02:51.630
In der Tat könnten wir diese auch wiederverwenden,

02:51.630 --> 02:54.340
aber ich werde eine neue erstellen, damit ich hier

02:54.340 --> 02:57.483
den Methodendekorator drucken kann.

02:59.020 --> 03:00.840
Wenn ich dies nun speichere, wird es ausgeführt

03:01.980 --> 03:04.410
und Sie sehen hier, dass unser Methodendekorator

03:04.410 --> 03:07.880
ausgeführt wird und dann erhalten wir hier unseren Prototyp, das gleiche

03:07.880 --> 03:09.380
Objekt wie zuvor.

03:09.380 --> 03:11.310
Hier erhalten wir den Namen der

03:11.310 --> 03:14.700
Methode und hier den Deskriptor dieser Methode.

03:14.700 --> 03:17.440
Das Verhalten ist im Grunde dasselbe wie zuvor, nur der Deskriptor

03:17.440 --> 03:19.400
ist ein wenig anders, da es sich um einen Methoden-Deskriptor

03:19.400 --> 03:20.950
und nicht um einen Accessor-Deskriptor

03:20.950 --> 03:22.550
handelt.

03:22.550 --> 03:25.720
Wir haben hier einen Wert und eine beschreibbare Eigenschaft.

03:25.720 --> 03:27.750
Zuvor gab es für den Accessor-Deskriptor

03:27.750 --> 03:28.860
get und set.

03:28.860 --> 03:30.910
Aber das ist nur ein Java-Script-Unterschied,

03:30.910 --> 03:33.088
nichts TypeScript-spezifisches.

03:33.088 --> 03:38.088
Hier haben wir also unsere dritte Dekorfunktion, die wir nun der Methode

03:38.150 --> 03:40.070
hinzugefügt haben.

03:40.070 --> 03:43.390
Der letzte Dekorator, den wir hinzufügen können, ist ein Parameter.

03:43.390 --> 03:45.260
Also lassen Sie uns das jetzt tun.

03:45.260 --> 03:47.550
Dazu erstelle ich hier eine weitere Funktion,

03:47.550 --> 03:51.269
Log4, und füge Log4 zu diesem einen Parameter hinzu, den ich hier erhalte,

03:51.269 --> 03:53.660
tax, und Sie können natürlich zu jedem Parameter,

03:53.660 --> 03:57.130
den Sie erhalten, eine Funktion hinzufügen.

03:57.130 --> 03:59.560
Das müssen Sie nicht, aber Sie können sie unabhängig voneinander

03:59.560 --> 04:02.990
zu jedem Parameter hinzufügen, dem Sie einen Dekorator hinzufügen wollen.

04:02.990 --> 04:06.419
Was bekommt nun ein Parameterdekorator als Argumente?

04:06.419 --> 04:10.790
Nun, es wird das gleiche Ziel wie zuvor.

04:10.790 --> 04:12.520
Das nächste Argument, das wir erhalten, ist der

04:12.520 --> 04:14.100
Name, und zwar nicht der Name des Parameters,

04:14.100 --> 04:17.310
sondern der Name der Methode, in der wir diesen Parameter verwendet haben.

04:17.310 --> 04:20.530
Also im Grunde das Gleiche wie im bisherigen Methodendekorator.

04:20.530 --> 04:22.170
Aber das letzte Argument ist anders.

04:22.170 --> 04:24.250
Dies ist nun nicht mehr der Eigenschaftsdeskriptor,

04:24.250 --> 04:30.100
sondern die Position dieses Arguments, also die Nummer des Arguments.

04:30.100 --> 04:32.763
Hier wäre dies zum Beispiel das erste Argument.

04:35.310 --> 04:38.670
Kopieren wir das also wieder hierher und

04:38.670 --> 04:43.550
fügen das alles in den Log4-Parameterdekorator ein.

04:43.550 --> 04:45.410
Lassen Sie uns auch hier die Position ausgeben,

04:45.410 --> 04:47.170
damit wir sehen können, was da drin ist.

04:47.170 --> 04:50.960
Wenn wir es jetzt speichern, sehen wir unseren Parameterdekorator dort oben, nicht

04:50.960 --> 04:53.480
die allerletzte Ausgabe, weil die Ausführungsreihenfolge

04:53.480 --> 04:55.630
anders ist, aber wir sehen unseren Parameterdekorator

04:55.630 --> 04:57.180
hier und dann hier.

04:57.180 --> 04:59.530
Wir haben den Prototyp wie zuvor bekommen.

04:59.530 --> 05:00.860
Wir haben den Namen der Methode,

05:00.860 --> 05:02.190
in der wir diesen Parameter

05:02.190 --> 05:04.770
verwendet haben, und dann den Index dieses Arguments,

05:04.770 --> 05:06.240
und der beginnt bei Null, also

05:06.240 --> 05:09.070
hat das erste Argument hier eine Nummer von Null, einen

05:09.070 --> 05:10.360
Index von Null, und das ist

05:10.360 --> 05:12.740
unser Parameterdekorator.

05:12.740 --> 05:14.920
Das sind also all die Stellen, an denen wir Dekoratoren

05:14.920 --> 05:16.370
und TypeScript hinzufügen können,

05:16.370 --> 05:18.570
und wir können verschiedene Dinge mit ihnen tun.

05:18.570 --> 05:20.450
Ich werde Ihnen in diesem Modul hier

05:20.450 --> 05:21.660
ein paar Beispiele zeigen,

05:21.660 --> 05:24.813
und ich werde Ihnen auch Bibliotheken oder Frameworks

05:24.813 --> 05:28.380
zeigen, die von Dekoratoren regen Gebrauch machen.

05:28.380 --> 05:30.550
Ich zeige Ihnen, was sie mit Dekorateuren machen,

05:30.550 --> 05:34.583
um Ihnen eine Vorstellung von der Macht zu geben, die Dekorateure haben können.
