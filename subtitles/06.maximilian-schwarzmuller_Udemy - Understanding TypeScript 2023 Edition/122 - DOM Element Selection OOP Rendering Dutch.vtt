WEBVTT

00:02.300 --> 00:03.420
Tutor: Om te beginnen,

00:03.420 --> 00:07.060
voer ik hier npm start uit om die ontwikkelingsserver op te starten.

00:07.060 --> 00:09.384
Die dient het HTML-bestand en de menutab,

00:09.384 --> 00:13.434
tsc-w om soorten compilatie te starten in watch mode, zodat

00:13.434 --> 00:17.988
ons app JavaScript-bestand continu wordt herbouwd en we het kunnen

00:17.988 --> 00:21.740
bekijken in de lopende applicatie.

00:21.740 --> 00:24.480
Op dit moment ziet onze applicatie er natuurlijk niet al te mooi uit.

00:24.480 --> 00:26.340
Het is een lege pagina.

00:26.340 --> 00:27.850
Dus om te beginnen zijn

00:27.850 --> 00:30.250
er veel manieren om dat te doen.

00:30.250 --> 00:35.040
Nu wil ik beginnen met dit formulier zichtbaar te maken.

00:35.040 --> 00:36.660
En nu, er zijn vele manieren, zal ik

00:36.660 --> 00:38.790
eigenlijk deze applicatie schrijven in een object

00:38.790 --> 00:40.208
georiÃ«nteerde aanpak.

00:40.208 --> 00:43.303
Dat is 100% optioneel, maar omdat we geleerd

00:43.303 --> 00:46.080
hebben over klassen en zo, wil ik eigenlijk

00:46.080 --> 00:48.083
laten zien hoe dit werkt en daarom

00:48.083 --> 00:51.140
zal ik deze aanpak gebruiken.

00:51.140 --> 00:51.973
Dus in de app key

00:51.973 --> 00:55.510
voeg ik een nieuwe klasse toe en noem die Project Input, hoewel

00:55.510 --> 00:59.120
je de naam van de klasse natuurlijk helemaal zelf mag kiezen.

00:59.120 --> 01:00.570
In deze klasse moet ons

01:00.570 --> 01:04.590
doel zijn, toegang te krijgen tot dit sjabloon en tot het formulier

01:04.590 --> 01:08.220
daarin, en toegang te krijgen tot deze div hier, en dan uiteindelijk

01:08.220 --> 01:11.710
ons sjabloon in die div te renderen.

01:11.710 --> 01:15.160
Dus de inhoud van het sjabloon, het formulier in die div.

01:15.160 --> 01:17.130
Dat moet ons doel zijn.

01:17.130 --> 01:18.850
Om dit te bereiken, voeg ik hier

01:18.850 --> 01:20.588
in Project Input een constructor

01:20.588 --> 01:23.450
toe waar ik uiteindelijk toegang wil krijgen tot

01:23.450 --> 01:25.920
mijn sjabloon en tot de plaats waar het moet

01:25.920 --> 01:27.970
worden weergegeven.

01:28.830 --> 01:33.310
En voor dit hier voeg ik twee eigenschappen on the fly

01:33.310 --> 01:37.460
toe, de template element eigenschap en dan ook de

01:37.460 --> 01:40.180
host element eigenschap.

01:40.180 --> 01:42.420
De namen zijn 100% aan jou.

01:42.420 --> 01:44.990
Uiteindelijk is mijn idee dat het host-element

01:44.990 --> 01:46.970
een verwijzing bevat naar het element

01:46.970 --> 01:49.650
waar ik de inhoud van mijn template wil weergeven,

01:49.650 --> 01:51.427
en het template-element geeft me

01:51.427 --> 01:54.050
toegang tot de template die deze inhoud bevat.

01:54.050 --> 01:56.120
Om nu toegang te krijgen tot dat sjabloon,

01:56.120 --> 01:59.690
laten we eens kijken naar index html en zien hoe we het sjabloon met het

01:59.690 --> 02:01.870
formulier kunnen identificeren.

02:01.870 --> 02:04.050
Het heeft deze project-input ID, dus

02:04.050 --> 02:06.120
dat lijkt een goede strategie.

02:06.120 --> 02:08.510
Dus hier kunnen we document getElementById

02:08.510 --> 02:11.022
project-input gebruiken.

02:11.022 --> 02:15.410
Dit geeft ons toegang tot dit sjabloonelement.

02:15.410 --> 02:17.820
Nu, een paar belangrijke dingen.

02:17.820 --> 02:21.320
Hier krijgen we een foutmelding dat template element een eigenschap

02:21.320 --> 02:23.900
is die niet bestaat op project-input.

02:23.900 --> 02:28.140
Om hier vanaf te komen, moeten we het eigenlijk als een nieuw

02:28.140 --> 02:31.610
veld hier direct in de klasse toevoegen.

02:31.610 --> 02:34.050
Dan kunnen we het veilig toewijzen.

02:34.050 --> 02:36.040
Nu wil ik ook duidelijk zijn over het type dat

02:36.040 --> 02:37.450
daarin wordt opgeslagen.

02:37.450 --> 02:41.070
En dat wordt een HTML template element.

02:41.070 --> 02:43.270
Dit type is globaal beschikbaar

02:43.270 --> 02:47.380
omdat ik in het tsconfig js bestand de DOM als lib heb toegevoegd

02:47.380 --> 02:50.360
en dat voegt al deze DOM types, al deze HTML

02:50.360 --> 02:55.493
element types als typescript toe aan het hele project.

02:57.280 --> 03:00.400
Nu geeft dit echter een nieuwe fout, je ziet dat dit uiteindelijk

03:00.400 --> 03:03.110
null kan zijn als we het element op ID krijgen,

03:03.110 --> 03:04.760
natuurlijk weten we dat het

03:04.760 --> 03:08.510
niet zal mislukken maar typescript heeft geen kans om dit te weten

03:08.510 --> 03:09.850
omdat het ons html-bestand

03:09.850 --> 03:12.757
niet gaat analyseren.

03:12.757 --> 03:16.210
Dus misschien bestaat er geen element met dit ID en

03:16.210 --> 03:18.210
zou dit dus nul opleveren.

03:18.210 --> 03:20.680
Nu zeggen we hier dat we er geen nul in opslaan,

03:20.680 --> 03:23.920
maar alleen het HTML template element.

03:23.920 --> 03:25.800
Dus, om dit gevaar uit te sluiten,

03:25.800 --> 03:29.470
moeten we typescript vertellen dat dit nooit null zal zijn.

03:29.470 --> 03:31.290
En weet je hoe je dit kunt doen?

03:31.290 --> 03:33.580
Je kunt hier een uitroepteken toevoegen.

03:33.580 --> 03:35.020
Een alternatief is natuurlijk,

03:35.020 --> 03:36.170
om dit ook te laten

03:36.170 --> 03:37.820
zien, als u er niet zeker van

03:37.820 --> 03:41.640
bent, om het op te slaan als laten we zeggen in een constante

03:41.640 --> 03:46.640
en dan te controleren of het sjabloonelement waar is, dus of het niet null is

03:46.900 --> 03:48.600
en het dan op te slaan binnen

03:48.600 --> 03:51.490
die if-controle hier.

03:51.490 --> 03:52.720
Nu krijgen we nog steeds een

03:52.720 --> 03:54.190
fout, maar dat wordt een andere

03:54.190 --> 03:55.840
fout, waar ik later op terugkom.

03:55.840 --> 03:58.060
Voorlopig is dit voldoende als

03:58.060 --> 03:59.650
we niet zeker zijn.

03:59.650 --> 04:01.930
Maar hier weet ik het zeker.

04:01.930 --> 04:02.763
En trouwens, als je niet

04:02.763 --> 04:03.596
zeker bent, moet je in

04:03.596 --> 04:06.000
het andere geval natuurlijk voor een fallback zorgen.

04:06.000 --> 04:08.530
Maar hier weet ik zeker dat we zo'n element krijgen en

04:08.530 --> 04:10.544
daarom kunnen we daarna gewoon een uitroepteken

04:10.544 --> 04:11.803
toevoegen om het typoscript

04:11.803 --> 04:13.710
te vertellen, "Alles goed.

04:13.710 --> 04:17.300
We krijgen toegang tot een element met dat ID. Zoals ik al zei, hebben we nog een andere

04:17.300 --> 04:18.133
fout.

04:18.133 --> 04:20.220
Eigenschap inhoud ontbreekt in type HTML element.

04:20.220 --> 04:24.270
Het probleem hier is dat we typescript vertellen dat we een

04:24.270 --> 04:27.140
template element gaan opslaan dat van het

04:27.140 --> 04:29.550
type html template element is.

04:29.550 --> 04:32.160
En dat zal inderdaad het geval zijn.

04:32.160 --> 04:34.800
Nu weet getElementById natuurlijk

04:34.800 --> 04:38.730
niet welk element het uiteindelijk zal teruggeven.

04:38.730 --> 04:41.130
Het weet alleen dat het een of ander html element zou

04:41.130 --> 04:43.920
zijn, maar niet welke gespecialiseerde versie ervan.

04:43.920 --> 04:46.600
Als het een div, een paragraaf, een knop of zoals in

04:46.600 --> 04:48.720
dit geval een template-element is.

04:48.720 --> 04:51.387
getElementById heeft geen kans om dat te weten.

04:51.387 --> 04:54.590
Dus om typoscript te vertellen over het type dat

04:54.590 --> 04:57.460
we natuurlijk ook met zekerheid weten.

04:57.460 --> 05:00.660
We kunnen type casting gebruiken.

05:00.660 --> 05:02.260
Je hebt dit ook geleerd.

05:02.260 --> 05:03.730
Er zijn twee syntaxen die u kunt gebruiken.

05:03.730 --> 05:05.950
De haakjes aan het begin en dan

05:05.950 --> 05:07.690
het type waarnaar je dit

05:07.690 --> 05:10.130
wilt casten, vertellen typeScript,

05:10.130 --> 05:11.847
"Hey!

05:11.847 --> 05:12.700
Het ding, de uitdrukking

05:12.700 --> 05:15.840
die hierna komt, zal van dat type zijn. of u voegt een HTML-sjabloonelement toe, wat de aanpak

05:15.840 --> 05:17.650
is die ik zou gebruiken.

05:17.650 --> 05:21.200
En daarmee garandeer je aan typescript dat wat

05:21.200 --> 05:23.040
je hier ophaalt niet null

05:23.040 --> 05:25.700
is en van dit type zal zijn.

05:25.700 --> 05:27.950
Er wordt veel gesproken over het selecteren hiervan, maar het is een gemeenschappelijke

05:30.027 --> 05:30.860
taak en het is belangrijk om

05:30.860 --> 05:32.016
dit goed te doen.

05:32.016 --> 05:33.630
Laten we nu verder gaan met het element gastheer.

05:33.630 --> 05:35.563
Hier moeten we ook het host-element

05:36.890 --> 05:39.360
toevoegen als een veld en we weten dat het

05:39.360 --> 05:43.350
host-element, wanneer we onze project-input willen renderen,

05:43.350 --> 05:45.960
uiteindelijk deze div zal zijn.

05:45.960 --> 05:48.560
Daar wil ik mijn vorm weergeven.

05:48.560 --> 05:51.410
Dus, hier kunnen we zeggen HTML div element.

05:51.410 --> 05:54.000
Dat is het type element waaraan we dit gaan toevoegen.

05:54.000 --> 05:57.730
We kunnen ook wat minder specifiek zijn en gewoon HTML-element

05:57.730 --> 06:00.260
zeggen, want hier maakt het me echt niet

06:00.260 --> 06:02.740
uit of het een div is of niet.

06:02.740 --> 06:04.970
Maar aangezien we het met zekerheid

06:04.970 --> 06:08.400
weten, waarom voegen we het niet toe?

06:08.400 --> 06:10.250
Nu wil ik natuurlijk toegang krijgen tot

06:10.250 --> 06:11.263
die div waar dit moet worden

06:12.110 --> 06:14.850
toegevoegd en als we even naar de index kijken. html bestand, zien we dat we deze div weer kunnen identificeren

06:14.850 --> 06:16.530
aan de hand van de ID.

06:16.530 --> 06:18.970
De app ID in dit geval.

06:18.970 --> 06:19.945
Dus nu, terug in app ts,

06:19.945 --> 06:24.640
kunnen we document getElementById nog een keer gebruiken en het element met het id app bereiken.

06:24.640 --> 06:28.780
Nu hebben we dezelfde problemen als eerder, dit kan null

06:28.780 --> 06:32.920
zijn, dus moeten we het uitroepteken toevoegen omdat we

06:32.920 --> 06:35.112
opnieuw met zekerheid weten

06:35.112 --> 06:39.620
dat het niet zo zal zijn, en getElementById weet niet dat dit

06:39.620 --> 06:42.283
een HTML div element zal zijn, dus moeten

06:43.430 --> 06:46.030
we dit hier ook casten.

06:46.030 --> 06:48.150
En daarmee kunnen we nu vinden hoe we toegang

06:48.150 --> 06:51.210
krijgen tot alle elementen die we nodig hebben.

06:51.210 --> 06:53.990
Nou, dat was veel gepraat.

06:53.990 --> 06:56.070
Daarmee hebben we helaas niet veel bereikt.

06:56.070 --> 06:59.140
We hebben toegang tot deze elementen,

06:59.140 --> 07:01.970
maar we renderen er niets.

07:01.970 --> 07:03.940
Dus laten we daarmee doorgaan.

07:03.940 --> 07:05.790
Daarvoor moeten we de inhoud van dit template-element

07:05.790 --> 07:08.020
importeren, dus eigenlijk importeren wat er

07:08.020 --> 07:11.760
in de template-tags staat en dit naar de DOM renderen.

07:11.760 --> 07:15.520
We kunnen dit hier in de constructor doen, want mijn

07:15.520 --> 07:17.603
idee, en dat is natuurlijk maar

07:18.510 --> 07:20.270
mijn idee, kun je ook anders

07:20.270 --> 07:21.870
opzetten.

07:21.870 --> 07:22.940
Maar mijn idee is dat wanneer

07:22.940 --> 07:24.550
we een nieuwe instantie van deze klasse

07:24.550 --> 07:26.430
maken, ik onmiddellijk een formulier wil renderen

07:26.430 --> 07:28.250
dat bij deze instantie hoort.

07:28.250 --> 07:30.190
Dus we doen het meteen in de constructeur.

07:30.190 --> 07:31.770
Daar kunnen we onze geÃ¯mporteerde

07:31.770 --> 07:34.420
node of geÃ¯mporteerde HTML-inhoud of hoe

07:34.420 --> 07:37.430
je het ook wilt noemen, die we kunnen krijgen met

07:37.430 --> 07:40.627
document importNode en dat is een methode voorzien

07:40.627 --> 07:44.917
op het globale documentobject en aan importNode geef je een pointer

07:45.860 --> 07:49.260
door naar je template-element.

07:49.260 --> 07:52.650
Dus dit template element uiteindelijk, of om precies te zijn niet

07:52.650 --> 07:54.410
het element maar dot inhoud daar.

07:54.410 --> 07:57.010
Content is een eigenschap die bestaat

07:57.010 --> 08:00.891
op HTML template elementen en die eenvoudigweg een

08:00.891 --> 08:05.320
verwijzing geeft naar de inhoud van een template.

08:05.320 --> 08:07.480
Dus naar de HTML code tussen de template tekst.

08:07.480 --> 08:09.520
ImportNode neemt ook een tweede

08:09.520 --> 08:13.306
argument dat bepaalt of deze met een diepe kloon moet worden

08:13.306 --> 08:15.670
geÃ¯mporteerd of niet.

08:15.670 --> 08:17.940
Dus alle niveaus van nesting binnen het sjabloon en ik wil dat

08:17.940 --> 08:19.630
zeker doen dus ik zal hier waar voorzien.

08:19.630 --> 08:22.570
Nu hebben we de importNode en zoals je zult zien

08:22.570 --> 08:26.340
is dit van het type documentfragment dat typescript automatisch

08:26.340 --> 08:28.830
aannam of afleidde.

08:28.830 --> 08:30.770
Nu kunnen we die importNode gebruiken,

08:30.770 --> 08:34.910
en natuurlijk wil ik die gebruiken om inhoud te renderen.

08:34.910 --> 08:36.960
Daarvoor voeg ik een nieuwe methode

08:36.960 --> 08:40.970
toe, een private methode die ik attach zal noemen.

08:40.970 --> 08:42.810
Dat hoef je niet te doen, ik wil alleen

08:42.810 --> 08:45.150
mijn selectie en rendering logica splitsen.

08:45.150 --> 08:46.390
Binnen attach zal

08:46.390 --> 08:51.270
ik uitreiken naar het host element, dus de plaats waar ik mijn inhoud wil

08:51.270 --> 08:52.820
renderen en insertAdjacentElement

08:52.820 --> 08:54.930
aanroepen, wat een standaardmethode

08:54.930 --> 08:57.840
is die de browser uiteindelijk in JavaScript

08:57.840 --> 09:00.770
levert.

09:00.770 --> 09:02.980
Om het HTML-element een aangrenzend

09:02.980 --> 09:04.340
element in te voegen, wordt

09:04.340 --> 09:08.778
eerst een beschrijving genomen van waar het moet worden ingevoegd, dus daar

09:08.778 --> 09:13.180
kun je het invoegen na het begin van het element waarop je je richt, dus direct

09:13.180 --> 09:17.850
na de openingstag van het hostelement, voor het begin of voor de openingstag,

09:17.850 --> 09:20.870
voor de eindtag of na de eindtag.

09:20.870 --> 09:23.570
En hier ga ik voor na begin om het direct

09:23.570 --> 09:27.020
aan het begin van de openingstag in te voegen.

09:27.020 --> 09:30.580
En dan het ding dat ik wil invoegen is mijn importedNode

09:30.580 --> 09:33.053
echter, ten eerste is dat een constante

09:34.900 --> 09:39.140
die alleen beschikbaar is in de constructor en ten tweede

09:39.140 --> 09:42.970
is dat een documentfragment.

09:42.970 --> 09:44.630
We konden het zo niet invoegen.

09:44.630 --> 09:46.896
In plaats daarvan moeten we daar toegang krijgen tot het concrete

09:46.896 --> 09:48.240
HTML-element, dat we kunnen opslaan

09:48.240 --> 09:49.800
in een ander property-element.

09:49.800 --> 09:52.770
Wat we ook moeten toevoegen als een veld daarboven

09:52.770 --> 09:55.560
dat van het type HTML element kan zijn of in ons

09:55.560 --> 09:58.270
geval eigenlijk, we weten dat het binnen het

09:58.270 --> 10:02.500
sjabloon hier zal zijn, dus het zal een formulier zijn.

10:02.500 --> 10:05.790
Dat is het eerste element in het sjabloon.

10:05.790 --> 10:07.010
Dus hier kunnen we zeggen

10:07.010 --> 10:09.470
dat het een HTML formulier element wordt,

10:09.470 --> 10:10.960
en dan hier, dit element is

10:10.960 --> 10:15.200
gelijk aan importNode firstElementChild, nu hoeven we alleen nog maar

10:15.200 --> 10:20.106
typescript te vertellen dat dit een HTML formulier element wordt.

10:20.106 --> 10:22.199
Dit element is nu de concrete eigenschap

10:22.199 --> 10:25.510
die wijst naar het knooppunt dat we willen invoegen.

10:25.510 --> 10:28.360
Dus daar beneden, in insertAdjacentElement,

10:28.360 --> 10:31.110
voegen we dit element in.

10:31.110 --> 10:33.690
Nu moeten we er alleen voor zorgen dat we

10:33.690 --> 10:36.350
hier in de constructor, aan het einde, attach

10:36.350 --> 10:38.460
aanroepen, dus deze private attach

10:38.460 --> 10:39.950
methode, zodat deze code

10:39.950 --> 10:42.260
ook wordt uitgevoerd.

10:42.260 --> 10:44.290
En nu met alle opmaak,

10:44.290 --> 10:46.620
ziet mijn code er zo uit.

10:46.620 --> 10:48.200
Dus dat is nu de projectinvoerklasse,

10:48.200 --> 10:51.460
en in theorie, wanneer we die instantiÃ«ren, zou het formulier

10:51.460 --> 10:53.950
moeten renderen.

10:53.950 --> 10:56.920
Laten we het eens proberen.

10:56.920 --> 10:59.440
Onder de klasse maken we gewoon een nieuwe constante, prjInput

10:59.440 --> 11:01.120
bijvoorbeeld, de naam is aan jou.

11:01.120 --> 11:05.415
En noem het nieuwe project Input als volgt.

11:05.415 --> 11:08.930
En als we dat nu opslaan, zou het opnieuw moeten compileren

11:08.930 --> 11:11.783
en laden en als u teruggaat naar de browser,

11:11.783 --> 11:14.160
zou u inderdaad dat formulier hier

11:14.160 --> 11:16.050
moeten zien.

11:16.050 --> 11:17.990
Dat is mooi, want daarmee hebben

11:17.990 --> 11:20.660
we de eerste belangrijke stap gezet.

11:20.660 --> 11:22.450
We hebben onze vorm

11:22.450 --> 11:26.930
weergegeven en ook al ontbreekt er veel, dat

11:26.930 --> 11:29.150
is beter dan niets.

11:29.150 --> 11:31.630
Dit formulier komt uit het index html bestand en

11:31.630 --> 11:33.010
wordt weergegeven met behulp

11:33.010 --> 11:36.430
van onze object georiÃ«nteerde typescript code daarboven.
