WEBVTT

00:02.190 --> 00:05.030
Instructeur: We hebben dus webpack toegevoegd, een zeer belangrijk

00:05.030 --> 00:08.070
hulpmiddel waarmee we onze verschillende bestanden kunnen bundelen

00:08.070 --> 00:09.690
tot één bundel.

00:09.690 --> 00:12.090
Dit helpt ons echt het aantal HTTP-verzoeken

00:12.090 --> 00:14.500
te verminderen en kan dus onze toepassing

00:14.500 --> 00:16.500
versnellen.

00:16.500 --> 00:19.840
Als je met veel individuele bestanden werkt, wat je meestal

00:19.840 --> 00:22.270
doet bij grotere projecten, zijn tools als

00:22.270 --> 00:24.360
webpack een must-use en webpack is de

00:24.360 --> 00:26.910
belangrijkste en meest prominente tool die

00:26.910 --> 00:28.200
je daarbij helpt, dus daarom

00:28.200 --> 00:31.190
is dat de tool die ik hier wilde laten zien.

00:31.190 --> 00:33.730
Je ziet dat webpack zeer configureerbaar is en zoals

00:33.730 --> 00:36.190
ik al meerdere keren heb gezegd, zijn de officiële

00:36.190 --> 00:39.630
docs van webpack de plaats om naartoe te gaan om er alles over te leren.

00:39.630 --> 00:42.120
Over verschillende laders, verschillende foutinstellingen

00:42.120 --> 00:44.770
die je kunt instellen en hoe het werkt, in het algemeen.

00:44.770 --> 00:47.109
Dus, duik zeker in deze documentatie

00:47.109 --> 00:49.660
als je een webpack meester wil worden en

00:49.660 --> 00:52.720
een meer uitgebreide setup wil hebben.

00:52.720 --> 00:55.610
Onze basisopstelling hier laat ons echter al toe

00:55.610 --> 00:58.200
TypeScript bestanden te compileren met webpack

00:58.200 --> 01:00.940
en vervolgens alle output te bundelen in één enkele

01:00.940 --> 01:03.820
bundel. js bestand.

01:03.820 --> 01:06.500
En we hebben ook een configuratie voor ontwikkeling

01:06.500 --> 01:09.050
ingesteld die het debuggen gemakkelijker maakt

01:09.050 --> 01:11.510
en ons meer nuttige foutmeldingen geeft.

01:11.510 --> 01:13.250
En we krijgen een productieopstelling

01:13.250 --> 01:15.570
die ons een sterk geoptimaliseerde code geeft

01:15.570 --> 01:17.840
die we vervolgens naar een server zouden kunnen

01:17.840 --> 01:21.160
deployen om er zo weinig mogelijk code naartoe te sturen.

01:21.160 --> 01:22.210
En dat is het.

01:22.210 --> 01:25.740
webpack is echt een kerntool en in staat zijn om het te gebruiken

01:25.740 --> 01:26.573
en een configuratie

01:26.573 --> 01:30.260
te hebben die echt gewoon werkt, is super belangrijk.

01:30.260 --> 01:33.800
Het is dus een must-use in elk modern project, zou ik zeggen,

01:33.800 --> 01:36.710
en in deze module leert u hoe u ermee aan de slag kunt

01:36.710 --> 01:38.763
in uw TypeScript-projecten.
