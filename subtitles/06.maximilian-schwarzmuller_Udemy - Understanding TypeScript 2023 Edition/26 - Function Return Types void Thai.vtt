WEBVTT

00:02.200 --> 00:04.080
ผู้สอน: ได้เวลาสำหรับไฟล์ใหม่อีกไฟล์หนึ่ง

00:04.080 --> 00:13.760
ฉันจะเปลี่ยนชื่อแอป ts ที่นี่เพื่อนามแฝงสหภาพ ts และเพิ่มแอปใหม่

00:13.760 --> 00:13.760
ts

00:13.760 --> 00:16.370
ที่เราสามารถเริ่มต้นใหม่อีกครั้ง ปิดไฟล์อื่น

00:16.370 --> 00:20.660
และตอนนี้ฉันอยากจะเจาะลึกลงไปในฟังก์ชั่น

00:20.660 --> 00:22.640
แน่นอนว่าตอนนี้ทำงานกับฟังก์ชั่นแล้ว

00:22.640 --> 00:26.340
ตัวอย่างเช่น ที่นี่ในไฟล์นามแฝงสหภาพที่มีฟังก์ชันการรวม

00:26.340 --> 00:32.520
ตัวอย่างเช่น คุณเห็นว่าสำหรับฟังก์ชัน คุณสามารถกำหนดประเภทให้กับพารามิเตอร์ของฟังก์ชันได้

00:32.520 --> 00:36.483
ปรากฎว่ามีฟังก์ชันและประเภทอีกเล็กน้อยที่คุณสามารถทำได้

00:37.590 --> 00:40.430
เพื่อสิ่งนั้น ฉันจะสร้างฟังก์ชันเพิ่มขึ้นมาใหม่

00:40.430 --> 00:43.373
ซึ่งรับเฉพาะตัวเลข ไม่ใช่สตริง

00:44.270 --> 00:49.513
ซึ่งทำสิ่งง่ายๆ หนึ่งอย่าง มันจะคืนค่า n หนึ่งบวก n สอง จึงไม่ยุ่งยากเกินไป

00:51.004 --> 00:53.740
อย่างที่ฉันได้กล่าวไปแล้ว เราสามารถกำหนดประเภทให้กับพารามิเตอร์ได้

00:53.740 --> 00:55.180
ซึ่งไม่ใช่เรื่องใหม่

00:55.180 --> 00:57.030
อย่างไรก็ตาม ฟังก์ชันโดยรวมมีประเภทอื่นที่สำคัญประเภทหนึ่ง

00:57.030 --> 01:01.050
มีประเภทส่งคืน

01:01.050 --> 01:03.990
และนี่คือประเภทการส่งคืนที่สรุปโดย TypeScript

01:03.990 --> 01:06.490
เราสามารถเห็นได้ถ้าเราวางเมาส์เหนือ add

01:06.490 --> 01:14.190
ในตอนท้าย เครื่องหมายทวิภาคหลังรายการพารามิเตอร์ ในที่นี้อธิบายถึงประเภทการคืนค่าของฟังก์ชัน

01:14.190 --> 01:16.800
ดังนั้นประเภทของค่าที่ส่งคืน

01:16.800 --> 01:20.020
ที่นี่ ฉันคืนค่าการบวกของ n หนึ่งและ n สอง

01:20.020 --> 01:23.050
และเนื่องจากอินพุตทั้งสองนี้เป็นตัวเลข TypeScript

01:23.050 --> 01:24.930
จึงสามารถอนุมานได้ว่าผลลัพธ์ของค่านี้จะเป็นตัวเลข

01:24.930 --> 01:30.830
และเมื่อเราส่งคืนค่านั้น ชนิดที่ส่งคืนของข้อมูลฟังก์ชันนี้จะเป็นตัวเลข

01:30.830 --> 01:33.320
หากคุณจะเชื่อมพวกมันเป็นสตริงที่นี่ด้วย

01:33.320 --> 01:35.363
toString ตัวอย่างเช่น TypeScript

01:36.550 --> 01:41.900
จะอนุมานได้อย่างถูกต้องว่าเราส่งคืนสตริงที่นี่

01:41.900 --> 01:44.350
แน่นอนว่าตอนนี้ เราสามารถกำหนดประเภทการส่งคืนได้อย่างชัดเจนที่นี่

01:44.350 --> 01:48.490
โดยการเพิ่มเครื่องหมายทวิภาคหลังรายการพารามิเตอร์ แล้วตามด้วยประเภทที่คุณต้องการส่งคืน

01:48.490 --> 01:51.263
เช่น ตัวเลข

01:52.850 --> 01:54.560
นี่จะเป็นประเภทเดียวกับที่อนุมาน

01:54.560 --> 01:56.760
ตัวอย่างเช่น ถ้าฉันตั้งค่านี้เป็นสตริง

01:56.760 --> 02:03.540
ฉันจะได้รับข้อผิดพลาดที่นี่ เพราะเห็นได้ชัดว่าการคำนวณของฉันที่นี่ไม่ตรงกับประเภทผลตอบแทนที่อธิบายไว้

02:03.540 --> 02:06.480
เช่นเดียวกับตัวแปร คุณควรปล่อยให้

02:06.480 --> 02:10.080
TypeScript ทำงานเกี่ยวกับการอนุมานประเภท

02:10.080 --> 02:14.810
และหากคุณไม่มีเหตุผลเฉพาะในการตั้งค่าประเภทอย่างชัดเจน

02:14.810 --> 02:17.090
คุณจึงไม่ควรตั้งค่าประเภท แต่ปล่อยให้

02:17.090 --> 02:20.470
TypeScript อนุมานประเภทแทน

02:20.470 --> 02:22.660
เกี่ยวกับประเภทการส่งคืน มีประเภทที่น่าสนใจประเภทหนึ่งที่เราไม่เคยเห็นมาก่อน

02:22.660 --> 02:30.240
และประเภทใดที่อาจเป็นของใหม่สำหรับคุณหากคุณต้องมีประสบการณ์กับภาษาโปรแกรมอื่น

02:30.240 --> 02:31.200
เพราะมันเป็นประเภทที่ไม่มีใน

02:31.200 --> 02:33.250
JavaScript จริงๆ

02:33.250 --> 02:35.180
เป็นประเภทโมฆะ

02:35.180 --> 02:38.160
สมมติว่าเรามีเมธอด printResult

02:38.160 --> 02:44.120
เราได้รับอาร์กิวเมนต์ตัวเลขซึ่งควรเป็นตัวเลข

02:44.120 --> 02:47.510
และในนั้นฉันต้องการปลอบใจ หมายเลขบันทึก

02:47.510 --> 02:52.150
และฉันต้องการปลอบใจ บันทึกเป็นส่วนหนึ่งของสตริงโดยที่ฉันพูดว่าผลลัพธ์บวกจำนวน

02:52.150 --> 02:56.090
ตอนนี้สิ่งนี้จะถูกต่อเข้ากับสตริงยาวหนึ่งสตริงและจะถูกส่งออก

02:56.090 --> 02:57.777
และตอนนี้ฉันสามารถเรียก printResult

02:57.777 --> 03:01.020
ตัวอย่างเช่น ส่งผ่านผลลัพธ์ของการเรียกฟังก์ชันเพิ่มของฉัน

03:01.020 --> 03:05.010
โดยบวกด้วยห้า สมมุติว่าได้ 12

03:05.010 --> 03:07.670
ฉันกำลังดำเนินการบวกที่นี่ด้วยตัวเลขสองตัว

03:07.670 --> 03:10.160
และผลลัพธ์ของสิ่งนั้น สิ่งที่เพิ่มกลับ

03:10.160 --> 03:13.130
จะถูกส่งผ่านเป็นอาร์กิวเมนต์ไปยัง printResult

03:13.130 --> 03:15.780
และนั่นควรพิมพ์ไปที่คอนโซล

03:15.780 --> 03:19.150
หากตอนนี้เรารวบรวมสิ่งนี้แล้วดูสิ่งนั้นในหน้าของเรา

03:19.150 --> 03:21.110
หรือบนหน้าของเราที่นี่ เราเห็นผลลัพธ์

03:21.110 --> 03:24.280
17 ซึ่งสมเหตุสมผล

03:24.280 --> 03:25.660
ตอนนี้สิ่งที่น่าสนใจที่นี่คือประเภทการส่งคืนของ

03:25.660 --> 03:27.640
printResult

03:27.640 --> 03:30.353
คุณคิดว่าประเภทการคืนสินค้าที่นี่คืออะไร

03:31.240 --> 03:35.150
คุณอาจคิดว่ามันเป็นสตริง เพราะผมสร้างสตริงตรงนี้

03:35.150 --> 03:37.360
แต่โปรดจำไว้ว่าเราจะไม่คืนสินค้านี้

03:37.360 --> 03:39.400
เราจะไม่คืนอะไรที่นี่

03:39.400 --> 03:42.010
ดังนั้นฟังก์ชัน printResult ที่นี่จึงมีประเภทการส่งคืนพิเศษ

03:42.010 --> 03:44.990
โมฆะ

03:44.990 --> 03:47.910
ตอนนี้คุณอาจสังเกตเห็น void return type

03:47.910 --> 03:49.830
จากภาษาโปรแกรมอื่นๆ

03:49.830 --> 03:52.230
คุณมีบางอย่างเช่นนี้

03:52.230 --> 03:56.740
JavaScript ไม่รู้จริงๆ หรือไม่มีชื่อสำหรับสถานการณ์นี้จริงๆ

03:56.740 --> 03:58.590
อย่างไรก็ตาม TypeScript ทำ

03:58.590 --> 04:01.840
ดังนั้น ฟังก์ชันนี้จึงมีประเภทการคืนค่าเป็นโมฆะ

04:01.840 --> 04:04.065
และแน่นอน คุณไม่จำเป็นต้องระบุที่นี่

04:04.065 --> 04:06.440
การอนุมานของ TypeScript ทำหน้าที่ของมัน

04:06.440 --> 04:07.630
แต่ฉันต้องการทำให้ชัดเจนจริงๆ

04:07.630 --> 04:09.610
ว่าสิ่งนี้มีประเภทการคืนค่าเป็นโมฆะ

04:09.610 --> 04:13.730
ซึ่งเป็นเหตุผลที่ฉันเพิ่มที่นี่เพื่อวัตถุประสงค์ในการสาธิต

04:13.730 --> 04:17.070
ตอนนี้ โมฆะจริง ๆ แล้วหมายความว่าฟังก์ชันนี้ไม่มีคำสั่งส่งคืน

04:17.070 --> 04:21.020
มันไม่ส่งคืนอะไรเลย

04:21.020 --> 04:24.540
มันสำเร็จ มันทำหน้าที่ของมัน

04:24.540 --> 04:28.170
มันรันโค้ดของมัน มันไม่ได้ทำให้เกิดข้อผิดพลาดหรืออะไรทำนองนั้น

04:28.170 --> 04:32.550
แต่ก็ไม่ส่งคืนอะไรเลย

04:32.550 --> 04:34.990
นั่นคือประเภทการคืนค่าเป็นโมฆะ

04:34.990 --> 04:39.490
ตอนนี้ในทางเทคนิคแล้วใน JavaScript แน่นอนว่าหากเราจะคอนโซล

04:39.490 --> 04:39.490
บันทึกผลลัพธ์ของ

04:39.490 --> 04:46.270
printResult ที่นี่ และตอนนี้ฉันคอมไพล์แล้ว และเราจะเห็นสิ่งที่ได้รับในหน้านี้

04:46.270 --> 04:49.480
เราเห็นว่า undefined ถูกส่งคืนโดยสิ่งนั้น

04:49.480 --> 04:51.540
ในทางเทคนิคแล้ว และนั่นเป็นสิ่งที่น่าสนใจมาก

04:51.540 --> 04:56.450
ใน JavaScript ถ้าเราใช้ return value ของฟังก์ชันที่ไม่ return อะไรเลย

04:56.450 --> 05:00.830
เราจะได้รับ undefined เป็นค่า

05:00.830 --> 05:03.730
และอย่างที่คุณคงทราบกันดีว่า undefined ใน

05:03.730 --> 05:05.720
JavaScript นั้นเป็นค่าจริง

05:05.720 --> 05:11.880
ตัวอย่างเช่น ค่าที่คุณจะได้รับหากคุณพยายามเข้าถึงคุณสมบัติบนวัตถุที่ไม่มีอยู่จริง

05:11.880 --> 05:16.680
ดังนั้นที่นี่เราจึงถือเป็นโมฆะ แม้ว่าในทางเทคนิคแล้วสิ่งนี้จะคืนค่าที่ไม่ได้กำหนดก็ตาม

05:16.680 --> 05:19.020
และตอนนี้เพื่อทำให้สับสนยิ่งขึ้น

05:19.020 --> 05:23.300
undefined คือประเภทใน TypeScript

05:23.300 --> 05:25.640
คุณสามารถกำหนดเป็นประเภทได้

05:25.640 --> 05:29.570
ตัวอย่างเช่น ตัวแปรใหม่เอี่ยม someValue สามารถรับ undefined

05:30.770 --> 05:34.700
เป็นประเภทได้ และคุณจะไม่ได้รับข้อผิดพลาด

05:34.700 --> 05:37.380
ตัวแปรนี้จะไม่ถูกกำหนดตลอดไป

05:37.380 --> 05:39.970
ประโยชน์ที่อาจเป็นไปได้เป็นคำถามอื่น

05:39.970 --> 05:43.720
แต่ undefined เป็นประเภทที่ถูกต้องใน TypeScript

05:43.720 --> 05:46.600
อย่างไรก็ตาม คุณจะเห็นว่าเราได้รับข้อผิดพลาด

05:46.600 --> 05:48.010
และเราได้รับข้อผิดพลาดเนื่องจากฟังก์ชันไม่ได้รับอนุญาตให้ส่งคืน

05:48.010 --> 05:51.690
undefined

05:51.690 --> 05:53.300
แน่นอนว่าในทางเทคนิคมี แต่

05:53.300 --> 05:56.850
TypeScript คิดเกี่ยวกับฟังก์ชั่นต่างออกไปเล็กน้อย

05:56.850 --> 06:00.200
คุณควรใช้ void ที่นี่หากฟังก์ชันไม่ส่งคืนสิ่งใด

06:00.200 --> 06:05.940
และไม่ได้กำหนด เนื่องจาก void คุณระบุชัดเจนว่าฟังก์ชันนี้จงใจไม่มีคำสั่ง

06:05.940 --> 06:08.260
return

06:08.260 --> 06:10.690
หากคุณจะบอกว่า undefined ที่นี่

06:10.690 --> 06:13.460
TypeScript จะคาดหวังให้คุณมีคำสั่ง

06:13.460 --> 06:17.080
return โดยที่คุณจะไม่ส่งคืนค่า

06:17.080 --> 06:18.660
นั่นคือความแตกต่างทางเทคนิค

06:18.660 --> 06:20.670
ตอนนี้คุณเห็นว่าฉันไม่ได้รับข้อผิดพลาด

06:20.670 --> 06:22.860
จากมุมมองของ JavaScript

06:22.860 --> 06:26.610
สิ่งนี้ก็เหมือนกับสิ่งนี้

06:26.610 --> 06:29.050
แต่ TypeScript สร้างความแตกต่างที่นี่

06:29.050 --> 06:31.240
ดังนั้น void จึงเป็นประเภทที่คุณต้องการใช้หากคุณไม่มีคำสั่ง

06:31.240 --> 06:33.760
return

06:33.760 --> 06:41.100
อันที่จริงแล้ว Undefined ซึ่งคุณแทบไม่ต้องใช้เลย สามารถนำมาใช้ได้หากคุณส่งคืนโดยไม่ส่งคืนมูลค่าที่แท้จริง

06:41.100 --> 06:45.750
แต่อีกครั้ง นี่เป็นกรณีการใช้งานที่หายาก และคุณสามารถใช้ void กับคำสั่ง

06:45.750 --> 06:47.560
return แบบนี้ได้เช่นกัน

06:47.560 --> 06:49.040
คุณจะไม่ได้รับข้อผิดพลาด

06:49.040 --> 06:50.610
และตามค่าเริ่มต้น คุณจะใช้

06:50.610 --> 06:52.770
void ในสถานการณ์นี้เสมอ

06:52.770 --> 06:54.680
เว้นแต่คุณจะมีฟังก์ชันที่ควรสร้าง

06:54.680 --> 06:58.620
undefined และคุณต้องการความชัดเจนเกี่ยวกับสิ่งนั้น

06:58.620 --> 07:01.430
แต่อีกครั้งที่ไม่ค่อยจะเป็นอย่างนั้น

07:01.430 --> 07:03.620
ฉันแค่ต้องการให้แน่ใจว่าคุณเข้าใจความแตกต่างระหว่าง

07:03.620 --> 07:10.930
void และ undefined ซึ่ง void เป็นมาตรฐานที่คุณจะใช้ในทุกสถานการณ์ที่คุณมีฟังก์ชันที่ไม่ส่งคืนค่า

07:10.930 --> 07:15.770
และคุณสามารถกำหนดได้ มันอย่างชัดเจน

07:15.770 --> 07:20.440
แต่แน่นอนว่า TypeScript ก็สามารถอนุมานได้เช่นเดียวกับที่นี่เช่นกัน

07:20.440 --> 07:23.083
ฉันเพิ่งเพิ่มสิ่งนี้เพื่อวัตถุประสงค์ในการสาธิตที่นี่
