WEBVTT

00:02.450 --> 00:04.810
Instruktur: Jadi sekarang setelah kita memahami

00:04.810 --> 00:07.850
bagaimana kita dapat mengelola file kita dengan compiler,

00:07.850 --> 00:09.870
mari kita selami opsi compiler, karena

00:09.870 --> 00:11.300
itu sangat menarik.

00:11.300 --> 00:13.860
Hal ini memungkinkan kita untuk mengontrol

00:13.860 --> 00:16.620
bagaimana kode TypeScript kita dikompilasi,

00:16.620 --> 00:18.360
jadi tidak hanya file yang mana,

00:18.360 --> 00:20.920
tetapi juga bagaimana file yang dikompilasi

00:20.920 --> 00:23.230
diperlakukan oleh TypeScript.

00:23.230 --> 00:26.760
Dan di sana Anda lihat, kami memiliki banyak opsi.

00:26.760 --> 00:29.560
Anda mendapat penjelasan singkat di samping opsi-opsi ini.

00:29.560 --> 00:32.450
Beberapa penjelasan bisa dibilang sangat samar.

00:32.450 --> 00:34.210
Yang lainnya cukup jelas.

00:34.210 --> 00:36.450
Dan saya akan mengatakan bahwa banyak dari opsi-opsi

00:36.450 --> 00:39.950
ini, sebagian besar opsi ini tidak akan menjadi masalah di sebagian besar proyek.

00:39.950 --> 00:43.900
Jadi, Anda tidak akan menetapkan semua opsi ini, bahkan tidak mendekati.

00:43.900 --> 00:46.070
Anda biasanya bisa mengabaikan banyak opsi ini.

00:46.070 --> 00:48.765
Sekarang saya akan mengambil opsi-opsi penting di sini

00:48.765 --> 00:50.230
sepanjang kursus ini, karena beberapa

00:50.230 --> 00:52.140
opsi hanya masuk akal ketika kita belajar

00:52.140 --> 00:53.911
tentang fitur tertentu.

00:53.911 --> 00:55.940
Dan saya ingin menyelami beberapa

00:55.940 --> 00:57.250
opsi sekarang juga.

00:57.250 --> 01:00.840
Dan untuk itu, mari kita telusuri file dari atas ke bawah dan melihat apa

01:00.840 --> 01:02.340
yang kita dapatkan di sana.

01:02.340 --> 01:04.410
Mari kita mulai dengan opsi target.

01:04.410 --> 01:07.230
Seperti yang Anda lihat, ini sebenarnya sudah ditetapkan secara default.

01:07.230 --> 01:08.750
Ini tidak dikomentari.

01:08.750 --> 01:10.780
Dan apa yang Anda lakukan dengan opsi

01:10.780 --> 01:15.530
ini adalah Anda memberi tahu TypeScript untuk versi JavaScript target mana yang ingin

01:15.530 --> 01:16.970
Anda kompilasi kodenya.

01:16.970 --> 01:18.850
Karena apa yang dilakukan TypeScript

01:18.850 --> 01:21.600
tidak hanya mengkompilasi fitur-fitur baru

01:21.600 --> 01:23.500
seperti anotasi tipe yang tidak

01:23.500 --> 01:26.960
ada dalam JavaScript ke kode JavaScript.

01:26.960 --> 01:29.667
Jadi, tidak hanya menjaga

01:29.667 --> 01:33.270
agar ini di sini berfungsi.

01:33.270 --> 01:37.530
Ini juga mengkompilasi kode ke JavaScript yang

01:37.530 --> 01:41.370
berjalan di sekumpulan browser tertentu.

01:41.370 --> 01:43.798
Dan pada dasarnya Anda mendefinisikan browser

01:43.798 --> 01:46.980
mana yang mendukung kode kompilasi dengan mengatur target.

01:46.980 --> 01:49.520
Target default di sini dalam proyek ini seperti

01:49.520 --> 01:52.430
yang Anda lihat, target awal yang disiapkan adalah es5,

01:52.430 --> 01:55.517
yang berarti semua jenis kode dikompilasi ke bawah.

01:55.517 --> 01:57.550
Kita sebenarnya bisa melihat itu.

01:57.550 --> 02:00.770
Jika saya menjalankan TSC di sini untuk mengkompilasi semua file saya,

02:00.770 --> 02:03.260
kita lihat di aplikasi. ts Saya menggunakan let dan const,

02:03.260 --> 02:05.732
tetapi dalam aplikasi. js, kita lihat var.

02:05.732 --> 02:09.890
Dan itu terjadi karena kita punya target es5 dan

02:09.890 --> 02:13.816
di dunia es5, kita tidak punya let and const.

02:13.816 --> 02:16.810
Jadi hal yang baik di sini adalah bahwa kita dapat menggunakan

02:16.810 --> 02:20.650
TypeScript untuk menghasilkan kode yang berfungsi di browser lama juga.

02:20.650 --> 02:22.930
Tapi itu benar-benar terserah pada penggunaan jika kita ingin melakukan itu.

02:22.930 --> 02:25.550
Mungkin kita tidak ingin melakukannya dengan TypeScript,

02:25.550 --> 02:27.670
karena mungkin kita punya beberapa build tool

02:27.670 --> 02:30.560
lain yang kemudian akan menangani transpilasi JavaScript dan

02:30.560 --> 02:33.290
oleh karena itu kita tidak ingin TypeScript melakukan itu,

02:33.290 --> 02:35.340
atau mungkin kita ingin mengirimkan kode yang

02:35.340 --> 02:37.030
hanya berfungsi di browser modern karena

02:37.030 --> 02:41.170
kita tahu aplikasi kita hanya akan berjalan di browser modern.

02:41.170 --> 02:44.160
Dan oleh karena itu, opsi alternatif dapat dilihat di sini

02:44.160 --> 02:46.070
jika Anda menghapus nilai dan kemudian

02:46.070 --> 02:48.080
di sini di vscode setidaknya, jika Anda

02:48.080 --> 02:51.300
menekan Control + Space untuk mendapatkan pelengkapan otomatis,

02:51.300 --> 02:54.180
Anda melihat banyak saran dan Anda melihat semua nilai

02:54.180 --> 02:56.450
yang tersedia di sini.

02:56.450 --> 02:58.700
Sekarang seiring berjalannya waktu, hal ini tentu

02:58.700 --> 03:01.900
saja akan berubah karena kami telah merilis versi JavaScript baru.

03:01.900 --> 03:03.785
Anda melihat kami menetapkan ini ke es5 sebelumnya.

03:03.785 --> 03:06.150
Jika Anda tidak menentukan target sama sekali,

03:06.150 --> 03:09.520
maka saat ini, TypeScript mengkompilasi ke es3 bahkan, sehingga

03:09.520 --> 03:12.200
mendukung versi yang lebih lama.

03:12.200 --> 03:15.130
Tetapi Anda juga bisa menggunakan es6, yang lebih

03:15.130 --> 03:17.510
modern, yang, misalnya, mendukung const

03:17.510 --> 03:19.310
dan membiarkan atau mengambil

03:19.310 --> 03:24.310
versi yang lebih baru lagi, es6 setara dengan es2015, hanya sebagai catatan.

03:24.870 --> 03:27.480
Jadi, jika kita mengatur ini ke es6, misalnya, dan saya

03:27.480 --> 03:29.580
menjalankan kembali perintah tsc setelah

03:29.580 --> 03:32.460
mengubah tsconfig. json, Anda akan melihatnya

03:32.460 --> 03:35.440
sekarang di aplikasi. js, kami mendapat let dan const,

03:35.440 --> 03:38.130
karena sekarang itu didukung di sana.

03:38.130 --> 03:39.340
Jadi, itu terserah Anda.

03:39.340 --> 03:41.720
Tentu saja, semakin modern versi JavaScript

03:41.720 --> 03:43.641
yang Anda pilih di sini, semakin ringkas

03:43.641 --> 03:47.450
kode yang Anda hasilkan karena TypeScript harus mengkompilasi kode

03:47.450 --> 03:50.440
yang semakin sedikit, atau harus bekerja di sekitar fitur

03:50.440 --> 03:54.010
yang tidak ada dalam situasi yang lebih sedikit, dan oleh karena

03:54.010 --> 03:56.190
itu, kode yang dikompilasi biasanya dilakukan

03:56.190 --> 03:59.560
lebih ringkas dan lebih pendek.

03:59.560 --> 04:01.150
Jadi itulah targetnya.

04:01.150 --> 04:02.623
Bagaimana dengan opsi lainnya?
