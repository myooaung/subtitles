WEBVTT

00:02.490 --> 00:03.860
Istruttore maschile: Quindi abbiamo impostato

00:03.860 --> 00:04.860
l'IDE, che è importante.

00:04.860 --> 00:07.780
Ora impostiamo anche un progetto iniziale, che utilizzeremo

00:07.780 --> 00:09.370
nel corso di questo corso nei

00:09.370 --> 00:11.250
diversi moduli.

00:11.250 --> 00:13.230
In pratica, un progetto con

00:13.230 --> 00:16.110
cui iniziare ogni modulo del corso per poi

00:16.110 --> 00:18.339
scrivervi il nostro codice.

00:18.339 --> 00:20.730
Come si vedrà nel corso di questo corso, la scrittura

00:20.730 --> 00:24.330
di codice non richiede in generale una configurazione complessa.

00:24.330 --> 00:28.330
Ma qui voglio un progetto in cui si possa scrivere codice, compilarlo

00:28.330 --> 00:31.490
e poi vedere immediatamente l'output di quel codice

00:31.490 --> 00:33.530
nel browser.

00:33.530 --> 00:36.970
A tale scopo, aggiungerò innanzitutto un nuovo file HTML di indice.

00:36.970 --> 00:39.520
Si può aggiungere in qualsiasi cartella vuota;

00:39.520 --> 00:42.620
gli altri due file o cartelle che si vedono qui sono solo

00:42.620 --> 00:45.530
file di configurazione per git, nel caso si usi il controllo

00:45.530 --> 00:47.460
di versione, e per il mio editor, che

00:47.460 --> 00:50.200
imposta il livello di zoom.

00:50.200 --> 00:51.670
Questo è tutto ciò che ho qui.

00:51.670 --> 00:54.930
Ma in quel file HTML di indice, ora lo inizializzerò

00:54.930 --> 00:56.750
con uno scheletro di base.

00:56.750 --> 00:58.390
E per i singoli utenti è

00:58.390 --> 01:02.770
sufficiente digitare HTML, scegliere l'opzione html:5 e, se

01:02.770 --> 01:04.200
non si ottiene questo

01:04.200 --> 01:06.820
menu, premere control e spazio.

01:06.820 --> 01:09.600
Scegliere l'opzione html:5 e premere invio

01:09.600 --> 01:11.740
per ottenere questo scheletro.

01:11.740 --> 01:14.670
Potremmo inserire la comprensione di TypeScript come

01:14.670 --> 01:16.722
titolo, ma non ha molta importanza.

01:16.722 --> 01:21.150
La cosa più importante è che qui si aggiunge un tag script

01:21.150 --> 01:25.000
nella sezione head e si aggiunge un sorgente e si punta

01:25.000 --> 01:29.020
all'applicazione. js e aggiungere l'attributo defer.

01:29.020 --> 01:32.270
Cerca di importare un'applicazione. js, che ovviamente

01:32.270 --> 01:34.520
al momento non esiste.

01:34.520 --> 01:35.530
E poi, naturalmente,

01:35.530 --> 01:37.960
lo eseguirà, se lo trova.

01:37.960 --> 01:41.210
Questo ci permette di visualizzare le nostre modifiche, le

01:41.210 --> 01:44.790
modifiche al codice, direttamente sullo schermo del browser.

01:44.790 --> 01:47.410
O se stiamo solo registrando qualcosa nella console,

01:47.410 --> 01:49.560
negli strumenti def del browser.

01:49.560 --> 01:52.250
Successivamente, aggiungerò un'applicazione. file ts.

01:52.250 --> 01:54.170
Questo è il file, un file TypeScript, in

01:54.170 --> 01:55.530
cui scrivere del codice.

01:55.530 --> 01:58.580
E lì, ad esempio, si può registrare il

01:58.580 --> 02:01.580
codice qui, o quello che si vuole.

02:01.580 --> 02:03.780
Qui si può registrare tutto ciò che si vuole.

02:03.780 --> 02:06.870
E se lo si fa, si può compilare questo file con TypeScript,

02:06.870 --> 02:09.280
che abbiamo installato in precedenza; per

02:09.280 --> 02:10.880
questo si può aprire il terminale

02:10.880 --> 02:13.070
e integrarlo nell'editor qui.

02:13.070 --> 02:16.580
E scrivere semplicemente tsc app. ts.

02:16.580 --> 02:18.490
Questo compila il file TypeScript e genera

02:18.490 --> 02:20.610
un'applicazione. js, che è il file

02:20.610 --> 02:22.530
che stiamo importando.

02:22.530 --> 02:25.160
E se ora aprite questo indice. file html, si vede qualsiasi

02:25.160 --> 02:27.120
cosa succeda qui.

02:27.120 --> 02:29.800
Dai il via alla logica che hai scritto qui dentro.

02:29.800 --> 02:32.340
Si tratta di logica che manipola qualcosa sulla

02:32.340 --> 02:34.410
dom o, come in questo caso, di logica

02:34.410 --> 02:37.870
che viene semplicemente bloccata sulla console.

02:37.870 --> 02:41.700
In questo caso ho aperto questo file HTML nel browser.

02:41.700 --> 02:44.460
È sufficiente fare doppio clic su di esso al di fuori dell'IDE.

02:44.460 --> 02:47.960
Quindi nel normale Esplora risorse di Windows o nel Finder del Mac.

02:47.960 --> 02:49.910
E poi magari aprire gli strumenti per gli

02:49.910 --> 02:51.830
sviluppatori, se si sta registrando qualcosa

02:51.830 --> 02:54.010
nella console, e si vedrà il log qui.

02:54.010 --> 02:56.690
Ora, questo è bello, ma ogni volta che cambiamo

02:56.690 --> 03:00.470
qualcosa nel nostro codice, dobbiamo ricompilare manualmente,

03:00.470 --> 03:02.340
e questo è ciò che è per ora.

03:02.340 --> 03:04.300
Cambierà più avanti nel corso.

03:04.300 --> 03:07.970
Ma dobbiamo anche ricaricare manualmente questa pagina.

03:07.970 --> 03:10.140
Per velocizzare l'operazione e assicurarsi

03:10.140 --> 03:11.940
di non doverla fare ogni volta che

03:11.940 --> 03:13.900
si cambia qualcosa, aggiungeremo

03:13.900 --> 03:17.890
un altro strumento a questa configurazione fittizia, che useremo per

03:17.890 --> 03:19.500
tutto il corso, in modo che ciò

03:19.500 --> 03:22.360
avvenga automaticamente.

03:22.360 --> 03:23.720
Per installare questo

03:23.720 --> 03:26.430
strumento, eseguiamo npm init.

03:26.430 --> 03:29.830
Nella cartella del progetto è disponibile il comando

03:29.830 --> 03:32.113
npm, se è stato installato node JS.

03:32.960 --> 03:36.050
Assicuratevi di visitare nodejs. org e scaricare e installare

03:36.050 --> 03:39.690
l'ultima versione che trovate qui.

03:39.690 --> 03:43.040
Per il momento non scriveremo alcun codice node JS, ma node JS

03:43.040 --> 03:45.960
viene fornito con lo strumento NPM, che si può usare per

03:45.960 --> 03:48.610
installare dipendenze di terze parti o strumenti

03:48.610 --> 03:51.210
utili per accelerare il nostro sviluppo.

03:51.210 --> 03:53.840
E per questo motivo, ne abbiamo bisogno qui.

03:53.840 --> 03:55.970
Quindi, una volta installato, si può eseguire

03:55.970 --> 03:57.800
npm init nella cartella del progetto.

03:57.800 --> 03:58.740
Basta premere invio e

03:58.740 --> 04:00.560
si può rispondere a tutte queste domande con

04:00.560 --> 04:03.570
le impostazioni predefinite, semplicemente premendo invio.

04:03.570 --> 04:06.780
Una volta completata l'operazione, si ottiene un pacchetto. json che assomiglia

04:06.780 --> 04:08.150
a questo.

04:08.150 --> 04:12.500
Ora è possibile eseguire npm install per installare una dipendenza esclusiva

04:12.500 --> 04:14.410
di questo progetto.

04:14.410 --> 04:16.210
Quindi, per installare uno strumento,

04:16.210 --> 04:17.730
si potrebbe dire, che si potrebbe

04:17.730 --> 04:22.520
usare in questo progetto, -: -save-dev per contrassegnarlo come una dipendenza solo di sviluppo,

04:22.520 --> 04:24.580
quindi uno strumento che ci aiuta durante

04:24.580 --> 04:26.610
lo sviluppo e non contiene codice, che verrà

04:26.610 --> 04:29.930
eseguito come parte del nostro codice principale.

04:29.930 --> 04:33.470
Il nome dello strumento è lite-server.

04:33.470 --> 04:37.103
Se si preme invio qui, si installa questo strumento aggiuntivo.

04:38.230 --> 04:42.000
Una volta terminata questa operazione, entrate nel vostro pacchetto. e nella parte degli script, aggiungere

04:42.000 --> 04:44.390
una virgola e aggiungere un nuovo script

04:44.390 --> 04:46.870
che chiameremo start.

04:46.870 --> 04:49.029
Quindi, come valore tra doppi

04:49.029 --> 04:51.570
apici, inserire lite-server.

04:51.570 --> 04:54.580
Quindi il nome del pacchetto che è stato aggiunto qui.

04:54.580 --> 04:57.550
Se ora si preme invio, si può eseguire npm start per

04:57.550 --> 04:59.400
avviare lo script di avvio.

04:59.400 --> 05:02.530
Il server lite è un semplice server di sviluppo, che serve

05:02.530 --> 05:05.430
sempre l'indice. file html accanto

05:05.430 --> 05:08.410
alla pagina. json, quindi questo file.

05:08.410 --> 05:13.410
E serve la vostra applicazione su questo URL che vedete qui, localhost:3000

05:13.620 --> 05:16.143
per impostazione predefinita.

05:17.440 --> 05:19.690
E poi si può visitare questa località.

05:19.690 --> 05:23.090
È sufficiente inserire localhost:3000 nel browser.

05:23.090 --> 05:24.860
E ora il codice viene eseguito qui.

05:24.860 --> 05:26.170
E perché è meglio?

05:26.170 --> 05:28.840
Ora la pagina verrà ricaricata automaticamente ogni

05:28.840 --> 05:32.180
volta che un altro file in questa directory viene modificato.

05:32.180 --> 05:35.130
Quindi se, ad esempio, aggiungo un punto esclamativo qui,

05:35.130 --> 05:40.323
lo salvo e poi lo compilo di nuovo con tsc app.

05:40.323 --> 05:40.323
TS

05:42.270 --> 05:43.580
e si torna al browser, si vede

05:43.580 --> 05:45.340
subito l'ultimo output, perché si è

05:45.340 --> 05:47.230
ricaricato automaticamente.

05:47.230 --> 05:49.620
E questo ci risparmia semplicemente il lavoro supplementare

05:49.620 --> 05:51.690
di ricaricare manualmente.

05:51.690 --> 05:54.540
È importante che il processo di avvio di npm rimanga

05:54.540 --> 05:57.450
in esecuzione per tutto il tempo in cui si lavora

05:57.450 --> 06:00.210
al progetto, finché si scrive codice che si vuole

06:00.210 --> 06:02.800
vedere eseguito nel browser.

06:02.800 --> 06:03.633
Una volta terminato,

06:03.633 --> 06:06.450
si può sempre chiudere questo processo con control

06:06.450 --> 06:08.200
C, ma una volta fatto ciò, il progetto

06:08.200 --> 06:11.600
non verrà più servito sotto l'host locale 3000.

06:11.600 --> 06:13.980
Quindi, mantenetelo attivo e funzionante finché scrivete

06:13.980 --> 06:15.650
codice e apportate modifiche.

06:15.650 --> 06:17.510
Con questo, lo cambierò di nuovo, ma questo

06:17.510 --> 06:19.200
dipende totalmente da voi.

06:19.200 --> 06:21.480
Questa è l'impostazione del progetto che utilizzerò

06:21.480 --> 06:22.410
per tutto il corso.

06:22.410 --> 06:24.200
Lo troverete anche allegato, naturalmente,

06:24.200 --> 06:25.530
nella forma finita.

06:25.530 --> 06:27.250
Solo una nota importante.

06:27.250 --> 06:30.330
Se si scarica il progetto iniziale allegato, o qualsiasi

06:30.330 --> 06:32.500
altra istantanea del corso, o qualsiasi

06:32.500 --> 06:35.900
altra istantanea del codice che si trova in qualsiasi punto

06:35.900 --> 06:38.920
del corso, si otterrà un download che non include la

06:38.920 --> 06:41.070
cartella node modules.

06:41.070 --> 06:42.590
Si tratta di una cartella enorme,

06:42.590 --> 06:45.250
che alla fine contiene tutti i pacchetti di terze parti

06:45.250 --> 06:46.970
e le loro dipendenze.

06:46.970 --> 06:49.840
E poiché è così grande, di solito lo cancello,

06:49.840 --> 06:52.260
perché si può ricreare facilmente eseguendo

06:52.260 --> 06:54.080
npm install.

06:54.080 --> 06:56.640
Quindi, se scaricate uno dei miei allegati,

06:56.640 --> 06:59.010
navigate nella cartella estratta e in questa

06:59.010 --> 07:01.530
cartella eseguite npm install.

07:01.530 --> 07:03.341
Questo installerà tutte le dipendenze

07:03.341 --> 07:06.110
e ricreerà la cartella node modules.

07:06.110 --> 07:07.280
Una volta fatto questo,

07:07.280 --> 07:08.610
si può lanciare npm start o fare

07:08.610 --> 07:11.330
qualsiasi cosa si voglia fare in questo progetto.

07:11.330 --> 07:13.360
E con questo, abbiamo la configurazione del progetto che

07:13.360 --> 07:14.750
utilizzeremo per tutto il corso.

07:14.750 --> 07:16.810
Ora non perdiamo altro tempo

07:16.810 --> 07:18.303
e iniziamo.
