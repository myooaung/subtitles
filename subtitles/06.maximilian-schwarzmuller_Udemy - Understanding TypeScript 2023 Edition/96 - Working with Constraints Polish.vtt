WEBVTT

00:02.340 --> 00:04.100
Narrator: Więc zaczęliśmy od generics

00:04.100 --> 00:06.670
i mam nadzieję, że jest jasne, co TypeScript robi

00:06.670 --> 00:10.240
tutaj, przekazujemy pewne dodatkowe informacje do funkcji łączenia,

00:10.240 --> 00:12.130
abyśmy mogli pracować w lepszy sposób

00:12.130 --> 00:14.370
z wynikiem funkcji łączenia.

00:14.370 --> 00:16.540
Po to zwykle są generyki.

00:16.540 --> 00:19.890
Dzięki nim możesz kontynuować pracę z danymi w optymalny

00:19.890 --> 00:21.960
sposób TypeScript.

00:21.960 --> 00:23.820
Teraz, w tym przypadku, tutaj, mielibyśmy

00:23.820 --> 00:25.810
jednak problem, gdybym przekazał,

00:25.810 --> 00:28.570
powiedzmy, tylko liczbę 30 tutaj.

00:28.570 --> 00:30.470
Oczywiście TypeScript rzuca teraz błąd, ponieważ

00:30.470 --> 00:32.010
próbował uzyskać dostęp do wieku,

00:32.010 --> 00:33.870
ale dostęp do nazwy działałby.

00:33.870 --> 00:37.100
Niemniej jednak, jeśli zapiszemy to, kompiluje się bez błędów,

00:37.100 --> 00:39.710
a jeśli wydrukuję ogólny scalony obiekt, widzimy,

00:39.710 --> 00:41.610
że to, co dostaję z powrotem, to tylko

00:41.610 --> 00:43.910
hobby i nazwa w moim obiekcie, co ma sens, ponieważ

00:43.910 --> 00:46.570
30 jest liczbą, a kiedy przekazaliśmy to jako drugi

00:46.570 --> 00:48.010
argument do przypisania obiektu,

00:48.010 --> 00:51.920
co w końcu robimy tutaj, cóż, wtedy to po prostu kończy się niepowodzeniem

00:51.920 --> 00:54.590
w milczeniu.

00:54.590 --> 00:57.860
JavaScript nie rzuca błędu, nie narzeka.

00:57.860 --> 01:00.460
Ale oczywiście nie łączy też 30 do nowo

01:00.460 --> 01:02.270
utworzonego obiektu, widać,

01:02.270 --> 01:04.690
że w tym obiekcie nie ma 30.

01:04.690 --> 01:06.540
Teraz, jak JavaScript miałby to zrobić?

01:06.540 --> 01:08.470
Ponieważ 30 nie jest obiektem,

01:08.470 --> 01:12.150
przypisanie obiektu tylko jest w stanie połączyć różne

01:12.150 --> 01:14.090
obiekty ze sobą.

01:14.090 --> 01:15.410
Więc co my w końcu chcemy uratować?

01:15.410 --> 01:17.600
Cóż, nie obchodzi nas dokładny typ,

01:17.600 --> 01:20.040
nie obchodzi nas dokładna struktura obiektu,

01:20.040 --> 01:22.980
który dostarczasz tutaj dla U i T.

01:22.980 --> 01:26.600
Ale to, na czym nam zależy, to fakt, że oba parametry,

01:26.600 --> 01:31.370
oba typy T i U powinny być dowolnym obiektem, ale powinny być

01:31.370 --> 01:34.420
obiektem przez cały czas.

01:34.420 --> 01:36.830
A obecnie nie mówimy o tym.

01:36.830 --> 01:37.820
Obecnie mówimy tylko, że

01:37.820 --> 01:40.110
powinny być każdego rodzaju, nie obchodzi mnie to.

01:40.110 --> 01:41.750
Teraz często, to nie jest w porządku.

01:41.750 --> 01:45.060
Chcesz ograniczyć typy T i U tutaj, rozwiąż swoje

01:45.060 --> 01:46.683
typy generyczne.

01:47.830 --> 01:51.540
Możesz to zrobić za pomocą ograniczeń typu.

01:51.540 --> 01:55.170
Dla typów generycznych możesz ustawić pewne ograniczenia dotyczące

01:55.170 --> 01:58.280
typów, na których mogą opierać się twoje typy generyczne

01:58.280 --> 02:01.120
i robisz to za pomocą rozszerzonego słowa kluczowego

02:01.120 --> 02:05.150
tutaj w nawiasach kątowych po typie, który chcesz ograniczyć.

02:05.150 --> 02:07.410
Więc tutaj moglibyśmy powiedzieć

02:07.410 --> 02:09.020
extends object, a z tym mówię,

02:09.020 --> 02:12.740
że typ T może być dowolnym obiektem o dowolnej strukturze,

02:12.740 --> 02:15.340
ale musi być obiektem.

02:15.340 --> 02:17.480
My możemy zrobić to samo dla U.

02:17.480 --> 02:19.040
A jeśli to zrobię, to widzisz

02:19.040 --> 02:21.820
teraz już dostaję błąd tutaj w IDE.

02:21.820 --> 02:23.980
A jeśli spróbuję to zapisać, otrzymam

02:23.980 --> 02:26.150
również błąd w kompilatorze, ponieważ

02:26.150 --> 02:28.640
argument typu 30 tutaj nie jest przypisany

02:28.640 --> 02:31.133
do typu obiektu.

02:32.080 --> 02:34.480
Więc to jest, oczywiście, zachowanie, którego chcemy tutaj.

02:34.480 --> 02:38.190
Teraz jesteśmy zmuszeni do ponownego przekazania obiektu,

02:38.190 --> 02:39.940
whoops, jak to.

02:39.940 --> 02:41.990
Teraz jesteśmy zmuszeni do przekazania tego ponownie,

02:41.990 --> 02:43.680
a zatem poprawiamy tę funkcję, ponieważ

02:43.680 --> 02:45.290
teraz naprawdę działa.

02:45.290 --> 02:48.980
I wiemy, że object assign chce dwóch obiektów.

02:48.980 --> 02:51.000
Więc w końcu chcemy zagwarantować, że

02:51.000 --> 02:52.820
otrzymamy tutaj dwa obiekty, ustawiając

02:52.820 --> 02:56.370
pewne ograniczenia na naszych typach generycznych.

02:56.370 --> 02:58.630
A te ograniczenia tutaj to może być wszystko.

02:58.630 --> 03:01.290
Możesz odwoływać się do obiektów, do ciągów, mógłbyś

03:01.290 --> 03:03.730
użyć własnego typu, gdybyś go miał.

03:03.730 --> 03:06.700
Możesz również użyć typów unii tutaj, jeśli chcesz, jesteś naprawdę

03:06.700 --> 03:08.470
elastyczny tam, możesz ustawić dowolne

03:08.470 --> 03:10.510
ograniczenia, które chcesz.

03:10.510 --> 03:12.620
I oczywiście nie musisz ograniczać wszystkich

03:12.620 --> 03:13.720
typów generycznych.

03:13.720 --> 03:16.560
Jeśli chcesz tylko ograniczyć U, możesz to zrobić.

03:16.560 --> 03:19.620
W tym przykładzie po prostu ma sens ograniczanie obu, ponieważ

03:19.620 --> 03:22.880
object assign chce dwóch obiektów tutaj, ale jesteś naprawdę

03:22.880 --> 03:24.640
elastyczny tam.

03:24.640 --> 03:26.620
Ważne jest jednak, aby zdawać sobie sprawę

03:26.620 --> 03:28.440
z tej koncepcji ograniczeń, ponieważ

03:28.440 --> 03:30.560
pozwala to na pracę z typami generycznymi

03:30.560 --> 03:32.640
w lepszy, optymalny sposób, co pozwala uniknąć

03:32.640 --> 03:34.810
niepotrzebnych błędów lub dziwnych zachowań,

03:34.810 --> 03:37.513
jakie mieliśmy wcześniej.
