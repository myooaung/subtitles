WEBVTT

00:02.120 --> 00:05.300
Hoe kunnen we nu de coördinaten op een kaart zetten?

00:05.300 --> 00:08.180
Ook daarvoor gebruiken we een Google API.

00:08.180 --> 00:10.690
Als u zoekt naar Google JavaScript Maps,

00:10.690 --> 00:13.810
of Google JS Maps, vindt u de officiële documenten

00:13.810 --> 00:16.970
voor de google JavaScript Google Maps API.

00:16.970 --> 00:19.660
En hier leert u hoe u Google Maps in uw webtoepassing

00:19.660 --> 00:22.020
kunt gebruiken om een kaart te renderen.

00:22.020 --> 00:24.720
En het is heel eenvoudig.

00:24.720 --> 00:27.280
Allereerst moeten we hier dit script toevoegen,

00:27.280 --> 00:31.720
dat deze Google Maps SDK zal toevoegen aan onze applicatie.

00:31.720 --> 00:34.220
Dus pak dat script, en voeg het

00:34.220 --> 00:38.210
toe aan je index html bestand, boven je script.

00:38.210 --> 00:40.670
Nu belangrijk, we installeren deze NPM niet,

00:40.670 --> 00:42.920
omdat het niet gepubliceerd is bij NPM,

00:42.920 --> 00:45.900
daarom gebruiken we deze CDN link, die het script direct

00:45.900 --> 00:48.140
van Google's servers haalt.

00:48.140 --> 00:51.560
En hier moeten we onze API_KEY instellen.

00:51.560 --> 00:54.390
Nu is dat natuurlijk de API_KEY die we hier al hebben

00:54.390 --> 00:57.430
in het typescript bestand, dus die kunnen we gewoon

00:57.430 --> 01:02.170
kopiëren naar index html en daar YOUR_API_KEY door vervangen.

01:02.170 --> 01:06.120
En haal ook dit "&amp;callback=initMap" ding aan het einde weg,

01:06.120 --> 01:07.150
dit zou een functie

01:07.150 --> 01:10.240
activeren zodra deze kaart wordt geladen, of

01:10.240 --> 01:13.430
als deze SDK wordt geladen, en dat is niet iets wat

01:13.430 --> 01:14.843
ik hier wil.

01:15.840 --> 01:19.760
Dus, daarmee laden we deze SDK, en nu kunnen

01:19.760 --> 01:22.820
we hem gebruiken, en hier hebben we

01:22.820 --> 01:24.250
een probleem.

01:24.250 --> 01:26.210
Ik wil het gebruiken om een kaart te renderen,

01:26.210 --> 01:28.710
en het renderen van een kaart is eigenlijk eenvoudig.

01:28.710 --> 01:31.070
In de officiële documenten zien we dat we uiteindelijk deze google

01:31.070 --> 01:33.870
moeten instantiëren. kaarten. Map constructor

01:33.870 --> 01:36.870
functie, geef er een centrum aan door,

01:36.870 --> 01:38.960
wat in wezen...

01:38.960 --> 01:41.720
Dit paar coördinaten krijgen we van de achterkant, en we

01:41.720 --> 01:43.250
voegen een zoomniveau toe.

01:43.250 --> 01:45.820
Dus we kunnen dit gewoon kopiëren, en dan hier,

01:45.820 --> 01:48.710
zodra we de coördinaten hebben, deze code uitvoeren,

01:48.710 --> 01:50.010
en misschien de kaart

01:50.010 --> 01:53.750
hier opslaan in een constante genaamd "Kaart. Maar natuurlijk krijgen we hier een fout.

01:53.750 --> 01:55.117
"Kan naam google niet vinden,"

01:55.117 --> 01:57.600
en dat is logisch, dit zal niet wereldwijd

01:57.600 --> 02:01.320
beschikbaar zijn, maar typescript weet dat niet.

02:01.320 --> 02:03.380
Het zal wereldwijd beschikbaar zijn,

02:03.380 --> 02:06.300
vanwege deze JavaScript SDK die we importeren.

02:06.300 --> 02:08.343
Maar typescript weet dit natuurlijk niet.

02:09.390 --> 02:12.270
Je leert daar wat je kunt doen, je

02:12.270 --> 02:14.200
kunt natuurlijk "declare

02:14.200 --> 02:19.200
var google," gebruiken en dit instellen op any.

02:19.990 --> 02:21.020
Daarmee zeg je tegen typoscript:

02:21.020 --> 02:22.887
"Het is goed, dit zal bestaan, maak je geen zorgen. We kunnen dat doen, en de fout gaat weg.

02:22.887 --> 02:26.480
Nu kunnen we hier ook onze coördinaten gebruiken,

02:26.480 --> 02:29.060
in plaats van de hard gecodeerde, en

02:29.060 --> 02:31.370
als we ook een marker willen weergeven,

02:31.370 --> 02:33.480
kan dat ook.

02:33.480 --> 02:36.430
In de officiële documenten, klik gewoon op, "Een kaart

02:36.430 --> 02:37.930
met een marker toevoegen,"

02:37.930 --> 02:39.517
leren we, dat het toevoegen van

02:39.517 --> 02:41.520
een marker eenvoudig is, we gebruiken

02:41.520 --> 02:44.600
gewoon de gemaakte kaart, en maken een marker met dit commando,

02:44.600 --> 02:47.223
en wijzen naar deze kaart.

02:49.040 --> 02:50.950
Dus we kopiëren dit stukje code

02:50.950 --> 02:52.980
hier, en terug in onze code, nadat

02:52.980 --> 02:56.130
we de kaart hebben gemaakt, maak ik mijn marker zoals

02:56.130 --> 02:59.160
dit, en de positie hier zijn mijn coördinaten.

02:59.160 --> 03:01.160
Dus dit zal nu een kaart renderen,

03:01.160 --> 03:04.173
en er een marker op plaatsen.

03:05.040 --> 03:06.600
We moeten er alleen voor zorgen

03:06.600 --> 03:08.580
dat deze kaart op de juiste plaats

03:08.580 --> 03:10.350
wordt weergegeven.

03:10.350 --> 03:12.350
Het zoekt standaard naar een element met een I. D. "kaart" en dat is wat

03:12.350 --> 03:14.010
we hier hebben.

03:14.010 --> 03:16.670
Maar als je een andere I kiest. D. hier, zorg ervoor

03:16.670 --> 03:18.720
dat je dit aanpast in je typescript code.

03:18.720 --> 03:20.470
Als we dit

03:20.470 --> 03:23.473
opslaan, compileert het zonder fouten,

03:24.610 --> 03:26.890
en als ik nu een adres invoer,

03:26.890 --> 03:30.640
zou het dit moeten weergeven.

03:30.640 --> 03:33.450
Dus dit werkt, en we kunnen het zoomniveau hier aanpassen,

03:33.450 --> 03:35.320
om wat meer in te zoomen, bijvoorbeeld

03:35.320 --> 03:38.650
veranderd in 16, en als we dit nu proberen kunnen we het wat duidelijker

03:38.650 --> 03:40.370
zien.

03:40.370 --> 03:42.910
Maar het werkt, en dat kunnen we zien.

03:42.910 --> 03:45.640
We kunnen rondscrollen, en deze kaart gebruiken.

03:45.640 --> 03:47.480
Dit is allemaal leuk, maar niet optimaal.

03:47.480 --> 03:50.420
Natuurlijk werkt het, dankzij "declare

03:50.420 --> 03:53.340
var google," krijgen we geen fouten.

03:53.340 --> 03:56.760
Maar we krijgen ook geen enkele vorm van steun.

03:56.760 --> 03:58.810
Als ik een fout introduceer,

03:58.810 --> 04:01.550
als ik bijvoorbeeld verwijs naar ". map" in plaats van ". maps" compileert het zonder problemen, en

04:01.550 --> 04:02.960
het crasht alleen daarna

04:02.960 --> 04:06.730
in productie.

04:06.730 --> 04:08.860
Als ik een kaart probeer te renderen.

04:08.860 --> 04:11.280
Nu krijg ik hier een fout, opgevangen door onze error handler.

04:11.280 --> 04:13.150
Dus dit is natuurlijk niet wat we willen.

04:13.150 --> 04:16.493
We willen type-ondersteuning, we willen dumpfouten als deze aanpakken, tijdens

04:17.470 --> 04:19.770
de ontwikkeling, en niet tijdens runtime.

04:19.770 --> 04:22.880
Dus hoe kunnen we ervoor zorgen dat het typoscript Google Maps kent?

04:22.880 --> 04:27.380
Typen om te redden.

04:27.380 --> 04:31.080
Als u zoekt naar "types google maps," vindt u verschillende pakketten,

04:31.080 --> 04:32.470
die types toevoegen voor,

04:32.470 --> 04:34.160
nou ja, Google Maps.

04:34.160 --> 04:37.350
Nu hebben we het Google Maps pakket niet via NPM geïnstalleerd,

04:37.350 --> 04:38.800
maar we kunnen nog steeds types

04:38.800 --> 04:41.050
voor dat pakket installeren via NPM.

04:41.050 --> 04:44.130
En hier ga ik voor dit eerste pakket, en installeer

04:44.130 --> 04:46.160
dat gewoon in ons project.

04:46.160 --> 04:48.790
Dus laten we teruggaan, snelle ontwikkelingsserver,

04:48.790 --> 04:51.560
en "npm install --save-dev "@types/googlemaps,"

04:51.560 --> 04:54.030
één woord uitvoeren.

04:54.030 --> 04:56.400
Dat was de naam van dit pakket.

04:58.613 --> 05:01.560
Dit zal nu globale types voor dit pakket installeren.

05:01.560 --> 05:03.303
Dus als ik dit nu opnieuw opstart

05:04.200 --> 05:08.410
met NPM start, laten we eens kijken of we een betere situatie hebben.

05:08.410 --> 05:11.500
Als ik dit "declare var" ding

05:11.500 --> 05:15.180
hier verwijder, of het weglaat.

05:15.180 --> 05:18.090
Het compileert nog steeds, nu wordt dit google maps ding hier gedetecteerd,

05:18.090 --> 05:19.940
en als ik probeer toegang te krijgen tot ". kaart" hier, krijg ik een fout,

05:19.940 --> 05:23.290
ik krijg nu ook auto-aanvulling en het ziet, "Ja,

05:23.290 --> 05:27.010
er is een kaarten ding. Het vertelt me ook dat deze map constructor,

05:27.010 --> 05:29.880
een "Div" of een "Element" nodig heeft waar het de kaart

05:29.880 --> 05:32.410
moet weergeven als eerste argument, en dan enkele

05:32.410 --> 05:35.100
opties voor de kaart.

05:35.100 --> 05:38.660
Dus dit werkt nu hier, zoals het hoort.

05:38.660 --> 05:40.270
En dit is natuurlijk een grote

05:40.270 --> 05:42.850
stap vooruit, want nu hebben we onze werkende applicatie,

05:42.850 --> 05:45.170
en die werkte voorheen ook al.

05:45.170 --> 05:47.600
Maar nu werkt het ook met types,

05:47.600 --> 05:51.170
en met een goede type-ondersteuning.

05:51.170 --> 05:53.490
En deze staffer is nog een goede oefening,

05:53.490 --> 05:56.050
voor hoe je applicaties bouwt met type script

05:56.050 --> 05:58.500
en bepaalde soorten functies gebruikt, maar

05:58.500 --> 06:00.690
het is vooral een goede oefening voor hoe

06:00.690 --> 06:03.700
je kunt werken met bibliotheken van derden.

06:03.700 --> 06:06.250
Sommige, zoals "axios" brengen hun eigen types mee.

06:06.250 --> 06:08.470
Andere zijn niet eens geïnstalleerd

06:08.470 --> 06:11.540
met NPM, en toch kun je types toevoegen

06:11.540 --> 06:15.421
met een geschikt types-pakket.

06:15.421 --> 06:18.810
Ik hoop dat deze module nuttig was om dit te begrijpen, en voor

06:18.810 --> 06:21.320
alle toekomstige projecten waaraan u misschien

06:21.320 --> 06:23.230
werkt, waar u waarschijnlijk ook

06:23.230 --> 06:25.620
zult werken met bepaalde bibliotheken van

06:25.620 --> 06:27.040
derden.
