WEBVTT

00:02.220 --> 00:04.550
-: Ik heb het over een decorator, die we kunnen

00:04.550 --> 00:07.350
toevoegen die automatisch het "dit" sleutelwoord

00:07.350 --> 00:09.930
bindt, zodat we hier niet hoeven te binden.

00:09.930 --> 00:12.500
Nu is het oproepen van bind hier geen groot ding

00:12.500 --> 00:14.160
als er niets mis mee is, maar we

00:14.160 --> 00:16.460
willen ook oefenen wat we geleerd hebben

00:16.460 --> 00:20.220
en als we dit op veel plaatsen in onze app moeten doen, kan een decorator,

00:20.220 --> 00:22.730
die we gewoon kunnen toevoegen, eigenlijk

00:22.730 --> 00:24.970
gemakkelijker zijn.

00:24.970 --> 00:27.100
Dus, laten we dit hier wegwerken.

00:27.100 --> 00:30.010
En in plaats daarvan, boven de klasse hier,

00:30.010 --> 00:33.010
voeg ik de auto bind decorator toe en ik voeg

00:33.010 --> 00:34.920
hier wat commentaar toe om dit

00:34.920 --> 00:38.750
bestand een beetje overzichtelijk te houden.

00:38.750 --> 00:40.490
ProjectInput Klasse

00:42.260 --> 00:44.790
Dus, wat is een decorator?

00:44.790 --> 00:46.770
Een decorator is een functie, toch?

00:46.770 --> 00:48.130
En je kunt het vinden met de

00:48.130 --> 00:51.383
functie-versiering hier of als een functie-expressie.

00:52.490 --> 00:54.780
Dus, hier gebruik ik een functiedecoratie,

00:54.780 --> 00:57.780
en ik noem het autobind, naam is aan jou.

00:57.780 --> 01:01.670
En deze decorator krijgt als vrije argumenten het doel,

01:01.670 --> 01:03.173
de methode naam waaraan

01:04.430 --> 01:06.430
hij gebonden is, want ik ga hier

01:06.430 --> 01:09.083
een methode decorator maken.

01:09.980 --> 01:12.960
En ook de beschrijving

01:12.960 --> 01:15.720
van die methode.

01:15.720 --> 01:18.370
Uh, property descriptor omdat methoden uiteindelijk

01:18.370 --> 01:22.760
gewoon properties zijn, eigenschappen die functies bevatten.

01:22.760 --> 01:24.400
Nu, waarom is dit een methode decorator?

01:24.400 --> 01:29.210
Want het idee is dat we het kunnen toevoegen aan submitHandler

01:29.210 --> 01:32.210
zoals dit, en er klaar mee zijn.

01:32.210 --> 01:33.680
Dat is het idee.

01:33.680 --> 01:35.500
Nu zijn we er nog niet helemaal, maar

01:35.500 --> 01:38.143
dit is hoe het uiteindelijk zou moeten werken.

01:39.090 --> 01:42.950
Laten we teruggaan naar onze functie en wat

01:42.950 --> 01:46.880
moet er dan in het functiehuis komen?

01:46.880 --> 01:49.490
Nou, daarin wil ik eerst toegang

01:49.490 --> 01:51.950
tot de originele methode.

01:51.950 --> 01:56.593
Met descriptor. waarde, zodat we de methode opslaan waarmee

01:56.593 --> 01:59.380
we die oorspronkelijk gedefinieerd hebben.

01:59.380 --> 02:03.540
Dan wil ik mijn aangepaste descriptor maken, wat

02:03.540 --> 02:04.873
een object is.

02:06.650 --> 02:11.090
Ik typ PropertyDescriptor, eigenlijk.

02:11.090 --> 02:13.880
Waar configureerbaar moet worden ingesteld op waar, zodat

02:13.880 --> 02:15.910
we het altijd kunnen veranderen.

02:15.910 --> 02:17.573
En waar we dan een getter nodig hebben.

02:18.510 --> 02:21.770
En in die getter, hier, die moet worden uitgevoerd als

02:21.770 --> 02:24.270
je de functie probeert te benaderen.

02:24.270 --> 02:27.710
Wij zullen hier de grensfunctie instellen, door gebruik te maken

02:27.710 --> 02:29.220
van de oorspronkelijke methode

02:29.220 --> 02:31.030
die wij daarboven uittrekken.

02:31.030 --> 02:34.063
En dit oproepen.

02:35.370 --> 02:36.203
Dan wil ik die

02:37.860 --> 02:40.170
gebonden functie terug, en dat zou

02:40.170 --> 02:41.603
alles moeten zijn.

02:42.510 --> 02:44.190
En globaal gezien zal ik dus

02:44.190 --> 02:46.620
de aangepaste descriptor teruggeven

02:46.620 --> 02:48.653
in die method decorator.

02:49.510 --> 02:52.880
Nu krijgen we daarmee een foutmelding, op de submitHandler.

02:52.880 --> 02:56.020
Dat, experimentele ondersteuning voor decorateurs is een functie die

02:56.020 --> 02:57.960
in principe moet worden ingeschakeld.

02:57.960 --> 03:00.400
Dus moeten we naar het tsconfig bestand gaan,

03:00.400 --> 03:02.320
en daar naar beneden scrollen.

03:02.320 --> 03:05.770
U zou de optie "experimentalDecorators" moeten vinden en dat

03:05.770 --> 03:07.450
gewoon als commentaar geven.

03:07.450 --> 03:09.980
En zet er een komma voor.

03:09.980 --> 03:14.183
Sla dat op, en start dan het compilatieproces van de types opnieuw.

03:15.180 --> 03:17.700
Nu laat het me hier nog steeds fouten zien, als ik dit uitbreid,

03:17.700 --> 03:18.913
wordt de methodName gedeclareerd,

03:20.212 --> 03:23.170
maar de waarde ervan wordt nooit gelezen.

03:23.170 --> 03:25.410
In app. lijn vier.

03:25.410 --> 03:26.760
Het verwijst naar dit hier,

03:26.760 --> 03:29.020
ik kreeg dit argument, dat ik hier kreeg dat

03:29.020 --> 03:30.940
ik eigenlijk nooit gebruikt heb.

03:30.940 --> 03:34.370
Hetzelfde geldt voor target, dat heb ik nooit gebruikt.

03:34.370 --> 03:36.343
Er zijn twee manieren om dit op te lossen.

03:37.200 --> 03:39.610
Eén manier is om naar de tsconfig te gaan,

03:39.610 --> 03:42.813
en onze striktheidsregels te versoepelen.

03:44.160 --> 03:46.740
noUnusedParameters, als we dit op false zetten staan

03:46.740 --> 03:49.090
we eigenlijk ongebruikte parameters toe.

03:49.090 --> 03:50.670
Dus, dit zou één ding zijn,

03:50.670 --> 03:54.053
of je gebruikt speciale namen underscore, en underscore

03:55.180 --> 03:56.653
twee.

03:57.770 --> 04:01.860
Dit is eigenlijk, een hint voor typescript en javascript dat je weet dat je

04:01.860 --> 04:03.130
deze waarden niet gaat

04:03.130 --> 04:04.800
gebruiken, maar dat je ze moet

04:04.800 --> 04:05.930
accepteren omdat je

04:05.930 --> 04:08.740
het argument nodig hebt waarnaar ze verwijzen.

04:08.740 --> 04:11.810
Als u dit nu opslaat, compileert dit zonder fouten

04:11.810 --> 04:14.700
en als we teruggaan en hier hallo invoeren en

04:14.700 --> 04:17.040
dit indienen, werkt het nu nog steeds

04:17.040 --> 04:20.060
dankzij onze auto bind decorator.

04:20.060 --> 04:23.120
Wat hopelijk ook aantoont dat deze decorateur

04:23.120 --> 04:24.950
echt nut kan hebben.

04:24.950 --> 04:27.530
Nu is hier natuurlijk wat meer werk,

04:27.530 --> 04:29.510
dan alleen bind oproepen.

04:29.510 --> 04:32.120
Maar stel je voor dat dit wordt gebruikt voor steeds meer methoden

04:32.120 --> 04:33.820
die allemaal gebonden moeten zijn.

04:33.820 --> 04:36.140
Dat u dit niet handmatig hoeft op te roepen, kan

04:36.140 --> 04:38.140
u dan weer wat tijd besparen, en ook wat

04:38.140 --> 04:40.430
potentiële fouten voorkomen in gevallen waarin

04:40.430 --> 04:42.343
u het gewoon bent vergeten.
