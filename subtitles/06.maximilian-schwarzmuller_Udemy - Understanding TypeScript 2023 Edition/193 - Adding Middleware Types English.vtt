WEBVTT

1
00:00:02.210 --> 00:00:04.200
<v Instructor>So we got this basic dummy server</v>

2
00:00:04.200 --> 00:00:05.490
up and running, but this server

3
00:00:05.490 --> 00:00:08.380
is not doing anything useful of course.

4
00:00:08.380 --> 00:00:11.430
Now, I said I want to build a very simple rest API,

5
00:00:11.430 --> 00:00:13.110
and for that, I will actually create

6
00:00:13.110 --> 00:00:15.570
a new sub-folder in the source folder,

7
00:00:15.570 --> 00:00:16.830
which I'll name routes.

8
00:00:16.830 --> 00:00:19.870
In there, I will add a file that should handle

9
00:00:19.870 --> 00:00:22.540
a certain set of routes of this rest API,

10
00:00:22.540 --> 00:00:25.710
and now it's up to you which kind of API you want to build.

11
00:00:25.710 --> 00:00:28.520
I will build a todo API here,

12
00:00:28.520 --> 00:00:30.770
if you took the React in TypeScript section,

13
00:00:30.770 --> 00:00:32.140
that sounds sounds familiar to you

14
00:00:32.140 --> 00:00:34.530
because there we built a todo app too,

15
00:00:34.530 --> 00:00:36.820
this is totally detached from that section though,

16
00:00:36.820 --> 00:00:38.710
it will not work together with React,

17
00:00:38.710 --> 00:00:41.250
of course you could connect it though on your own,

18
00:00:41.250 --> 00:00:43.870
but here I will build such a simple todo API

19
00:00:43.870 --> 00:00:46.620
simply so that we see how TypeScript works

20
00:00:46.620 --> 00:00:48.350
with Node and Express.

21
00:00:48.350 --> 00:00:51.400
The application we're building is not too complex,

22
00:00:51.400 --> 00:00:54.760
but it will contain a lot of interesting concepts.

23
00:00:54.760 --> 00:00:57.080
So here, we'll add my todo routes by adding

24
00:00:57.080 --> 00:01:01.800
a todos.ts file in the routes folder,

25
00:01:01.800 --> 00:01:04.570
and in there, I now wanna use Express.js

26
00:01:04.570 --> 00:01:06.630
to register some routes.

27
00:01:06.630 --> 00:01:09.730
For that, I'll import something from Express,

28
00:01:09.730 --> 00:01:13.700
and that something is now actually the router.

29
00:01:13.700 --> 00:01:16.160
Now the common JS syntax for that typically

30
00:01:16.160 --> 00:01:20.950
is that you import Express by using require express,

31
00:01:20.950 --> 00:01:23.550
and then in a new line, you often see code

32
00:01:23.550 --> 00:01:25.673
where we do this here.

33
00:01:27.090 --> 00:01:28.180
Now that's something you can do,

34
00:01:28.180 --> 00:01:30.130
but here I'll just import it like that.

35
00:01:31.130 --> 00:01:34.120
Now this gives us a router, and we can simply call

36
00:01:34.120 --> 00:01:36.750
Router here as a function, and this allows us

37
00:01:36.750 --> 00:01:39.300
to register middleware, so in the end,

38
00:01:39.300 --> 00:01:41.980
routes endpoints for incoming requests

39
00:01:41.980 --> 00:01:45.540
where we then execute some logic upon these requests.

40
00:01:45.540 --> 00:01:48.980
Now for the todo app, I want to register some basic routes,

41
00:01:48.980 --> 00:01:53.700
a post route at slash nothing where we can add a new todo,

42
00:01:53.700 --> 00:01:55.760
so here we'll need some code,

43
00:01:55.760 --> 00:01:58.860
some function which then adds a todo somewhere,

44
00:01:58.860 --> 00:02:01.250
for now I'll just specify no code at all,

45
00:02:01.250 --> 00:02:03.380
just setup the route in general here.

46
00:02:03.380 --> 00:02:05.110
So we have the post request,

47
00:02:05.110 --> 00:02:08.770
then a get request, get all todos let's say,

48
00:02:08.770 --> 00:02:12.900
then also let's say patch request to update a todo,

49
00:02:12.900 --> 00:02:15.520
and there I expect to get the id,

50
00:02:15.520 --> 00:02:19.280
a dynamic segment in the URL, and then here also

51
00:02:19.280 --> 00:02:22.700
a delete request to delete a todo by id.

52
00:02:22.700 --> 00:02:25.720
These are my routes, and now we can export

53
00:02:25.720 --> 00:02:28.620
the configured router as a default in this file.

54
00:02:28.620 --> 00:02:30.930
Now nothing will happen on these routes, right?

55
00:02:30.930 --> 00:02:32.510
I haven't set up any function

56
00:02:32.510 --> 00:02:35.830
that would execute when a request reaches these endpoints,

57
00:02:35.830 --> 00:02:38.620
but we at least now know which routes we want,

58
00:02:38.620 --> 00:02:41.740
we'll add the functions in a second step later.

59
00:02:41.740 --> 00:02:44.100
For now, let's just connect the router here,

60
00:02:44.100 --> 00:02:48.320
the configured routes to our running server here in app.ts,

61
00:02:48.320 --> 00:02:53.211
and to do that, we just import our, lets say todoRoutes

62
00:02:53.211 --> 00:02:54.290
from ./routes/todos.

63
00:02:56.040 --> 00:02:58.910
So we're importing that exported router

64
00:02:58.910 --> 00:03:01.610
in todos into app.ts,

65
00:03:01.610 --> 00:03:03.390
and now here, we need to connect it

66
00:03:03.390 --> 00:03:08.340
to our running Express application by using app.use,

67
00:03:08.340 --> 00:03:10.800
and then let's say we want to forward all requests

68
00:03:10.800 --> 00:03:14.600
that start with /todos to our todoRoutes,

69
00:03:14.600 --> 00:03:17.210
so requests targeting a different URL

70
00:03:17.210 --> 00:03:18.703
will not be handled there.

71
00:03:19.920 --> 00:03:23.730
Speaking of handling, in the Express middleware setup here

72
00:03:23.730 --> 00:03:25.983
which we're using, we can also setup a middleware

73
00:03:25.983 --> 00:03:29.030
that will handle errors, so any errors

74
00:03:29.030 --> 00:03:31.660
that might be thrown anywhere in our code,

75
00:03:31.660 --> 00:03:33.610
and we do this with app.use,

76
00:03:33.610 --> 00:03:37.470
and then we set up such a typical middleware function here

77
00:03:37.470 --> 00:03:40.640
where we get the request, response, and a next function,

78
00:03:40.640 --> 00:03:45.430
and again, this all requires you to know some Express.js

79
00:03:45.430 --> 00:03:48.330
and to know Node.js, I'll not dive into

80
00:03:48.330 --> 00:03:51.160
exactly how middleware works in Express

81
00:03:51.160 --> 00:03:52.970
and what middleware is.

82
00:03:52.970 --> 00:03:54.960
So that's a regular middleware function here

83
00:03:54.960 --> 00:03:57.150
as you should know it from Express.js,

84
00:03:57.150 --> 00:03:59.050
and you probably also know

85
00:03:59.050 --> 00:04:02.310
that there is an alternative to that function,

86
00:04:02.310 --> 00:04:04.680
a function that takes four parameters

87
00:04:04.680 --> 00:04:07.350
where the first parameter is a potential error,

88
00:04:07.350 --> 00:04:10.720
and now this is a error handling middleware function,

89
00:04:10.720 --> 00:04:13.530
which will be fired automatically by Express

90
00:04:13.530 --> 00:04:15.290
if in any other middleware

91
00:04:15.290 --> 00:04:18.750
prior to this one you have an error.

92
00:04:18.750 --> 00:04:21.200
So this is my error handling middleware function,

93
00:04:21.200 --> 00:04:23.380
and you see, we got a bunch of errors here.

94
00:04:23.380 --> 00:04:26.260
A bunch of errors because this all of type any

95
00:04:26.260 --> 00:04:29.030
and we're also not using all of these values,

96
00:04:29.030 --> 00:04:33.080
but let me make it clear which kind of types we have here.

97
00:04:33.080 --> 00:04:35.510
This will be of type Error,

98
00:04:35.510 --> 00:04:39.890
this will be of type express.Request,

99
00:04:39.890 --> 00:04:43.020
or you simply import Request here

100
00:04:43.020 --> 00:04:45.540
as an extra named import from express,

101
00:04:45.540 --> 00:04:46.670
this also works if you got

102
00:04:46.670 --> 00:04:49.310
the Express types installed which we do,

103
00:04:49.310 --> 00:04:54.310
then here we also got the Response, and a NextFunction here,

104
00:04:54.490 --> 00:04:56.310
and then we can adjust our types here,

105
00:04:56.310 --> 00:04:59.230
this is now of type Request, this is of type Response,

106
00:04:59.230 --> 00:05:01.420
and this is this NextFunction

107
00:05:01.420 --> 00:05:03.650
which we can execute to let the request

108
00:05:03.650 --> 00:05:06.680
continue its journey to the next middleware in line.

109
00:05:06.680 --> 00:05:08.590
Now that's our error handling middleware,

110
00:05:08.590 --> 00:05:10.820
it will fire whenever we have an error

111
00:05:10.820 --> 00:05:13.030
in one of our other middlewares, and in here,

112
00:05:13.030 --> 00:05:15.000
we could send back a response with

113
00:05:15.000 --> 00:05:17.690
let's say JSON data where we have a message

114
00:05:17.690 --> 00:05:22.690
which is error.message, and where we maybe also set,

115
00:05:22.855 --> 00:05:24.630
err.message I mean,

116
00:05:24.630 --> 00:05:28.510
and where we maybe also set a status code of 500,

117
00:05:28.510 --> 00:05:29.610
and of course, you can have

118
00:05:29.610 --> 00:05:32.460
a more elaborate error handling functionality

119
00:05:32.460 --> 00:05:35.020
than I do have it here, but with that,

120
00:05:35.020 --> 00:05:38.830
we added our routes, we added our error handling middleware,

121
00:05:38.830 --> 00:05:40.670
why don't we add some logic

122
00:05:40.670 --> 00:05:43.103
to this API now in the next lecture.

