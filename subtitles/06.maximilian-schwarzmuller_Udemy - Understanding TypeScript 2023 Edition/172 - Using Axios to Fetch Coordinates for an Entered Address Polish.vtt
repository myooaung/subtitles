WEBVTT

00:02.390 --> 00:04.530
Instruktor: Teraz wysyłanie próśb jest

00:04.530 --> 00:06.890
możliwe bez pakietu firm trzecich.

00:06.890 --> 00:10.140
W nowoczesnym JavaScript w nowoczesnych przeglądarkach

00:10.140 --> 00:11.910
musisz pobrać API.

00:11.910 --> 00:13.620
Jest to wbudowane w przeglądarki,

00:13.620 --> 00:16.710
jest to funkcja dostępna globalnie i możesz jej użyć

00:16.710 --> 00:19.600
do wysyłania żądań do adresów URL.

00:19.600 --> 00:22.450
Teraz nie ma nic, co przemawia przeciwko temu

00:22.450 --> 00:24.870
API, poza tym, że obsługa błędów może

00:24.870 --> 00:27.210
być z nim nieco niezgrabna.

00:27.210 --> 00:29.250
Ale chcę również ćwiczyć korzystanie

00:29.250 --> 00:31.123
z bibliotek stron trzecich.

00:31.960 --> 00:36.070
Dlatego też wykorzystamy bardzo popularny pakiet axios.

00:36.070 --> 00:38.510
Jest to pakiet, którego możesz użyć

00:38.510 --> 00:43.510
w JavaScript, a zatem również w TypeScript, aby wysłać żądania HTTP.

00:43.880 --> 00:47.263
Musimy więc tylko zainstalować axios, aby zacząć go używać.

00:48.100 --> 00:51.080
W tym celu w naszym projekcie, gdzie możemy użyć

00:51.080 --> 00:54.150
NPM do zarządzania zależnościami, możemy uruchomić

00:54.150 --> 00:57.620
npm install, dash, dash save axios właśnie tak i to teraz

00:57.620 --> 01:00.520
zainstaluje pakiet axios.

01:00.520 --> 01:04.750
Mając to zainstalowane, możemy teraz zaimportować axios tutaj,

01:04.750 --> 01:07.390
importować axios z axios, a zobaczysz coś

01:07.390 --> 01:09.170
interesującego.

01:09.170 --> 01:12.090
Jeśli teraz zacznę używać tego i wpiszę tutaj kropkę,

01:12.090 --> 01:13.990
otrzymam autokompletację.

01:13.990 --> 01:16.290
I na przykład masz tutaj metodę get, która

01:16.290 --> 01:18.523
wyśle żądanie get do adresu URL.

01:19.850 --> 01:23.150
Więc tutaj faktycznie mamy wbudowaną obsługę TypeScript.

01:23.150 --> 01:25.640
A jeśli przejdziemy do modułów

01:25.640 --> 01:29.670
węzła i spojrzymy na pakiet axios, oto on.

01:29.670 --> 01:33.970
Zobaczysz, że tam, w środku, jest indeks. plik dts.

01:33.970 --> 01:38.970
Tak więc autorzy biblioteki axios już spięli swoją bibliotekę

01:39.430 --> 01:43.750
razem z takim pakietem do tłumaczenia TypeScript.

01:43.750 --> 01:47.440
W nim wszystko jest wyjaśnione do TypeScript.

01:47.440 --> 01:50.120
Ten pakiet lub ten plik tutaj w zasadzie wyjaśnia

01:50.120 --> 01:53.660
TypeScriptowi, co ta biblioteka JavaScript jest w stanie zrobić

01:53.660 --> 01:55.600
i jakich typów używa.

01:55.600 --> 01:59.100
Teraz niektóre biblioteki to robią i axios jest jednym z nich.

01:59.100 --> 02:02.070
Możesz dość szybko powiedzieć, czy biblioteka robi to, czy nie, jeśli

02:02.070 --> 02:03.420
zaczniesz z niej korzystać.

02:03.420 --> 02:05.520
Jeśli nie otrzymujesz wsparcia autouzupełniania

02:05.520 --> 02:07.930
i dostałeś dużo błędów kompilacji, prawdopodobnie

02:07.930 --> 02:10.750
musisz zainstalować dodatkowe typy.

02:10.750 --> 02:12.970
Jeśli otrzymasz dobre wsparcie, takie jak

02:12.970 --> 02:16.120
my tutaj, i nie otrzymasz żadnych błędów kompilacji po tym,

02:16.120 --> 02:18.140
cóż, wtedy masz już bibliotekę z wbudowanymi

02:18.140 --> 02:20.170
tłumaczeniami typów.

02:20.170 --> 02:23.120
A co za tym idzie, nie trzeba instalować żadnych dodatkowych typów.

02:23.120 --> 02:26.240
Dobrze wiedzieć i tu mamy świetny przykład.

02:26.240 --> 02:27.800
Więc skoro mamy wbudowane wsparcie,

02:27.800 --> 02:30.410
możemy od razu zacząć korzystać z dostępu.

02:30.410 --> 02:34.350
I chcę teraz wysłać żądanie HTTP do tego adresu URL.

02:34.350 --> 02:37.980
Skopiujmy więc ten adres URL i wprowadźmy go tutaj.

02:37.980 --> 02:40.220
I wprowadzę go między backticks,

02:40.220 --> 02:42.440
aby utworzyć szablon literalny,

02:42.440 --> 02:45.880
aby mogli łatwo zamienić części tego ciągu na

02:45.880 --> 02:49.050
dynamiczne dla innych wartości.

02:49.050 --> 02:51.730
Wklejmy więc ten ciąg, jest on dość długi i

02:51.730 --> 02:55.460
zacznijmy od zastąpienia swojego klucza API na końcu naszym

02:55.460 --> 02:59.210
kluczem API Google, który zapisaliśmy w tej stałej.

02:59.210 --> 03:01.690
W tym celu, ponieważ jest to szablon literalny,

03:01.690 --> 03:04.110
możemy dodać znak dolara, nawias klamrowy,

03:04.110 --> 03:09.110
a następnie wskazać klucz API Google, aby użyć tej stałej.

03:10.820 --> 03:13.240
Dodatkowo zamieńmy ten adres.

03:13.240 --> 03:15.500
Tutaj mamy wpisany atrapę adresu i oczywiście

03:15.500 --> 03:17.130
tam chcę użyć adresu, który

03:17.130 --> 03:19.300
wpisał użytkownik.

03:19.300 --> 03:22.540
Teraz tylko jedna ważna uwaga, ten adres, oczywiście,

03:22.540 --> 03:24.910
jest dokładnie tekst, który użytkownik

03:24.910 --> 03:27.560
wprowadził i oferowane mogą zawierać znaki specjalne,

03:27.560 --> 03:30.650
białe spacje, przecinki i wiele innych.

03:30.650 --> 03:32.250
I nie wszystkie te znaki

03:32.250 --> 03:35.580
i symbole są obsługiwane w adresach URL.

03:35.580 --> 03:37.750
Musimy więc przekonwertować ten wprowadzony

03:37.750 --> 03:40.550
ciąg na ciąg zgodny z adresem URL.

03:40.550 --> 03:43.810
I na szczęście TypeScript i JavaScript w

03:43.810 --> 03:46.940
szczególności ma wbudowaną funkcję, która

03:46.940 --> 03:50.460
pomaga nam w tym, funkcja encode URI.

03:50.460 --> 03:53.020
Możemy to wywołać i przekazać do niego ciąg

03:53.020 --> 03:54.770
znaków, a to spowoduje konwersję

03:54.770 --> 03:57.460
tego ciągu na ciąg zgodny z adresem URL.

03:57.460 --> 03:59.845
Dzięki temu otrzymaliśmy gotowy adres

03:59.845 --> 04:01.600
URL, do którego możemy wysłać

04:01.600 --> 04:04.900
żądanie, aby uzyskać z powrotem nasze współrzędne.

04:04.900 --> 04:07.390
Teraz get daje nam obietnicę, bo oczywiście wysłanie

04:07.390 --> 04:10.620
takiego żądania jako zadania asynchronicznego.

04:10.620 --> 04:13.430
I tam mamy potem log, jeśli to się uda

04:13.430 --> 04:15.690
lub catch, jeśli mamy błąd techniczny

04:15.690 --> 04:18.620
lub kod odpowiedzi na błąd.

04:18.620 --> 04:21.560
Więc tutaj będziemy konsoli logować wszelkie błędy, które możemy uzyskać

04:21.560 --> 04:24.710
w tym momencie, ponieważ normalnie powinniśmy odnieść sukces.

04:24.710 --> 04:27.820
I dlatego tutaj będę oczekiwał mojej odpowiedzi

04:27.820 --> 04:32.400
w bloku then i chcę również zalogować tę odpowiedź then.

04:32.400 --> 04:35.820
Więc teraz z tym, powiedziałbym, zobaczmy, co to daje.

04:35.820 --> 04:39.720
Ponownie uruchommy NPM start, aby przywołać proces webpack ponownie i rozpocząć

04:39.720 --> 04:40.953
budowanie tego.

04:42.120 --> 04:43.790
I wróćmy do naszej aplikacji

04:43.790 --> 04:47.220
i wprowadźmy tutaj takie miejsce jak Szósta Aleja.

04:47.220 --> 04:50.090
Jeśli uderzę w Search Address, zobaczysz po chwili, że

04:50.090 --> 04:51.480
otrzymasz wyjście tutaj.

04:51.480 --> 04:53.660
I tam powinieneś mieć kod statusu 200,

04:53.660 --> 04:56.120
który oznacza, że żądanie się udało.

04:56.120 --> 04:59.090
I masz pole danych, które przechowuje dane,

04:59.090 --> 05:01.240
z którymi serwer odpowiada.

05:01.240 --> 05:03.890
To pole danych ma pole wyników, a w nim mamy

05:03.890 --> 05:06.570
tablicę, jak możesz powiedzieć.

05:06.570 --> 05:10.690
W tej tablicy mamy kilka elementów, ich liczba jest różna.

05:10.690 --> 05:13.770
I to są w zasadzie wyniki, które znalazł Google.

05:13.770 --> 05:16.740
A pierwszy wynik jest zazwyczaj najlepszy.

05:16.740 --> 05:18.790
Jeśli więc przyjrzymy się temu, widzimy na

05:18.790 --> 05:20.460
przykład sformatowany adres.

05:20.460 --> 05:22.520
Czyli adres, który Google znalazł dla tego

05:22.520 --> 05:23.790
adresu, który wpisaliśmy,

05:23.790 --> 05:26.570
jest trochę bardziej kompletny niż to, co wpisaliśmy.

05:26.570 --> 05:29.300
I mamy tu klucz do geometrii.

05:29.300 --> 05:31.880
A jeśli to rozwiniemy, to zobaczymy, że z kolei

05:31.880 --> 05:35.240
ma klucz lokalizacji, a ten w końcu jest obiektem o interesujących

05:35.240 --> 05:37.540
nas współrzędnych, szerokości i długości

05:37.540 --> 05:39.700
geograficznej.

05:39.700 --> 05:43.000
Czyli na koniec musimy się wwiercić w dane, wyniki i tam

05:43.000 --> 05:47.390
pierwszy wynik, geometria, lokalizacja i będziemy mieli obiekt z szerokością

05:47.390 --> 05:50.030
i długością geograficzną.

05:50.030 --> 05:52.840
I będziemy mogli później renderować tę szerokość

05:52.840 --> 05:55.240
i długość geograficzną na mapie.

05:55.240 --> 05:57.430
Więc na razie po prostu wyodrębnijmy

05:57.430 --> 05:59.360
to i uzyskajmy nasze współrzędne,

05:59.360 --> 06:04.360
uzyskując dostęp do odpowiedzi dane kropka wyniki.

06:04.600 --> 06:09.600
A potem tam pierwszy wynik geometria kropka lokalizacja, więc naprawdę

06:11.200 --> 06:13.093
wiercenie się w tym.

06:15.130 --> 06:16.880
Teraz, co oczywiście zauważysz,

06:16.880 --> 06:19.850
jest to, że podczas gdy TypeScript nie narzeka tutaj, nie

06:19.850 --> 06:23.280
mamy również dobrego wsparcia TypeScript tutaj, prawda?

06:23.280 --> 06:25.740
Jeśli wpiszę tu kropkę, to nie sugeruje, że

06:25.740 --> 06:27.620
istnieje właściwość results.

06:27.620 --> 06:30.350
I rzeczywiście, mógłbym próbować uzyskać dostęp

06:30.350 --> 06:33.840
do wszystkiego tutaj, nawet czegoś, co nie istnieje w odpowiedzi

06:33.840 --> 06:34.820
i to ma sens.

06:34.820 --> 06:38.010
Jak TypeScript wiedziałby, co będzie w odpowiedzi dowolnego

06:38.010 --> 06:40.920
adresu URL, do którego wysyłam żądanie?

06:40.920 --> 06:42.810
TypeScript nie idzie do przodu i

06:42.810 --> 06:44.970
nie wysyła żądania podczas rozwoju,

06:44.970 --> 06:46.510
aby dowiedzieć się, co tam

06:46.510 --> 06:49.170
jest, to również nie byłoby takie dobre.

06:49.170 --> 06:51.400
Ale możemy powiedzieć TypeScriptowi,

06:51.400 --> 06:53.950
czego oczekujemy w odpowiedzi, ponieważ ta metoda

06:53.950 --> 06:58.950
get faktycznie jest metodą generyczną i jest tutaj dowolna rzecz, która jest w rzeczywistości

06:59.040 --> 07:02.830
typem odpowiedzi, którą spodziewamy się uzyskać.

07:02.830 --> 07:06.880
Więc tutaj mogę dodać mój typ odpowiedzi i mogę powiedzieć

07:06.880 --> 07:11.270
TypeScriptowi, że to, czego oczekuję, to obiekt, który ma

07:11.270 --> 07:15.260
klucz wyników, który z kolei jest tablicą pełną obiektów,

07:15.260 --> 07:18.330
gdzie każdy obiekt ma klucz geometrii, który

07:18.330 --> 07:22.170
z kolei jest obiektem, który ma klucz lokalizacji,

07:22.170 --> 07:24.330
który z kolei jest obiektem,

07:24.330 --> 07:28.160
który ma szerokość geograficzną, która jest liczbą,

07:28.160 --> 07:33.510
i długość geograficzną, która jest liczbą.

07:33.510 --> 07:36.030
Więc zdecydowanie dość złożony typ.

07:36.030 --> 07:39.400
Ale z tym, jeśli wpiszemy tutaj kropkę, otrzymam autouzupełnienie

07:39.400 --> 07:42.220
i TypeScript rozumie, do czego mam dostęp tutaj.

07:42.220 --> 07:44.860
I oczywiście możemy też wyciągnąć ten typ stąd

07:44.860 --> 07:46.620
i stworzyć własny alias typu.

07:46.620 --> 07:50.497
Może tutaj, odpowiedź Google geocoding.

07:53.220 --> 07:55.380
To byłby mój niestandardowy typ tutaj,

07:55.380 --> 07:58.420
a następnie mogę powiedzieć TypeScript, że tutaj oczekuję,

07:58.420 --> 08:01.540
że otrzymam tę odpowiedź geokodowania Google.

08:01.540 --> 08:03.900
Teraz, oczywiście, faktycznie odpowiedź

08:03.900 --> 08:07.020
zawiera więcej niż tylko tablicę wyników, ma również kod

08:07.020 --> 08:09.460
statusu i ma również wiele innych pól w każdym

08:09.460 --> 08:13.040
elemencie tablicy wyników, a następnie geometrię.

08:13.040 --> 08:17.030
Teraz, oczywiście, możesz po prostu dodać wszystkie te pola do swojego

08:18.210 --> 08:21.330
typu niestandardowego tutaj, ale tutaj naprawdę chcę

08:21.330 --> 08:25.640
skupić się na wartościach, którymi jestem aktywnie zainteresowany.

08:25.640 --> 08:27.360
I dlatego właściwie jest jeszcze

08:27.360 --> 08:30.900
jedno pole, które dodam, a jest nim status przy wynikach.

08:30.900 --> 08:34.520
Więc tutaj na najwyższym poziomie mamy status i to będzie

08:34.520 --> 08:35.500
ciąg, który mówi

08:35.500 --> 08:38.390
nam, czy Google udało się, czy nie.

08:38.390 --> 08:41.810
I status faktycznie będzie albo ok, albo

08:41.810 --> 08:44.010
kilka innych wartości.

08:44.010 --> 08:46.910
Jest to w zasadzie komunikat o stanie, z którym Google

08:46.910 --> 08:50.020
odpowiada, aby powiedzieć nam, czy udało się pobrać współrzędne

08:50.020 --> 08:51.890
dla tego adresu, czy nie.

08:51.890 --> 08:54.000
I oczywiście w oficjalnych docs możemy dowiedzieć

08:54.000 --> 08:57.280
się, jakiego rodzaju odpowiedzi możemy otrzymać z powrotem tutaj.

08:57.280 --> 08:58.900
Jeśli przewiniesz trochę w dół

08:58.900 --> 09:01.070
i klikniesz na zrozumienie odpowiedzi, dowiesz

09:01.070 --> 09:04.240
się, co jest wewnątrz odpowiedzi, którą otrzymasz z powrotem,

09:04.240 --> 09:07.000
a zatem kliknij odpowiedzi geokodowania.

09:07.000 --> 09:08.580
A następnie na kodach statusu

09:08.580 --> 09:11.090
poznajemy dostępne kody statusu.

09:11.090 --> 09:15.090
Na przykład wszyscy otrzymaliśmy zerowe wyniki, jeśli nic nie zostało znalezione.

09:15.090 --> 09:16.850
Dostaliśmy też kilka innych kodów, ale

09:16.850 --> 09:19.223
tutaj tak naprawdę zależy mi tylko na tych dwóch.

09:20.200 --> 09:23.310
Więc mówię TypeScriptowi, że tutaj dostaję kod statusu, który jest

09:23.310 --> 09:24.890
jedną z tych dwóch wartości.

09:24.890 --> 09:27.480
Teraz znowu może mieć również wartość liczbową,

09:27.480 --> 09:29.830
ale to jest dobre dla mnie tutaj.

09:29.830 --> 09:31.640
Jak już wspomniałem, można oczywiście

09:31.640 --> 09:33.700
napisać to w pełniejszy sposób.

09:33.700 --> 09:36.230
Teraz po dodaniu tego, na dole w bloku then, możemy

09:36.230 --> 09:41.230
sprawdzić, czy response dot data dot status nie jest w porządku, co oznacza, że coś poszło

09:41.580 --> 09:44.120
nie tak i w takim przypadku możemy rzucić tutaj

09:44.120 --> 09:46.710
błąd i dlatego skończymy w bloku catch, gdzie

09:46.710 --> 09:48.090
moglibyśmy ustawić jakąś

09:48.090 --> 09:49.810
obsługę błędów.

09:49.810 --> 09:54.280
Więc tutaj rzucimy błąd could not fetch location.

09:54.280 --> 09:57.080
A potem tutaj w error handlerze, żeby coś zrobić, możemy

09:57.080 --> 09:59.150
rzucić alert, gdzie wyprowadzamy przynajmniej

09:59.150 --> 10:01.230
komunikat o błędzie.

10:01.230 --> 10:04.660
Jest to oczywiście tylko pewna bardzo podstawowa obsługa błędów.

10:04.660 --> 10:06.950
W przeciwnym razie, jeśli mamy odpowiedź sukcesu,

10:06.950 --> 10:09.910
pobieramy nasze współrzędne tutaj i teraz możemy użyć tych współrzędnych,

10:09.910 --> 10:12.113
aby wyprowadzić je na mapę.
