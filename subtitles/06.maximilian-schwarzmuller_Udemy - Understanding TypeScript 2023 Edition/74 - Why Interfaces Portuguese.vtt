WEBVTT

00:02.250 --> 00:04.870
-: Então, agora que conhecemos essas características

00:04.870 --> 00:07.960
poderosas, uma questão óbvia é: por que usaríamos isso?

00:07.960 --> 00:09.610
Por que isso é útil?

00:09.610 --> 00:12.200
Bem, ele é útil em situações como esta, onde sabemos

00:12.200 --> 00:13.780
que queremos ter um certo conjunto

00:13.780 --> 00:15.820
de funcionalidades.

00:15.820 --> 00:18.750
Digamos um método de saudação, e queremos garantir

00:18.750 --> 00:21.910
que uma cláusula tenha tal método de saudação, e outra

00:21.910 --> 00:24.450
cláusula tenha também talvez, bem, então,

00:24.450 --> 00:26.360
podemos implementar uma interface

00:26.360 --> 00:29.570
que força a existência deste método.

00:29.570 --> 00:32.690
Então podemos facilmente compartilhar funcionalidades entre

00:32.690 --> 00:35.850
as cláusulas, e cada cláusula tem que adicionar sua própria implementação,

00:35.850 --> 00:38.060
o código exato que deve ser executado quando

00:38.060 --> 00:39.450
o método é chamado, mas aplicamos

00:39.450 --> 00:43.280
uma certa estrutura com a ajuda de interfaces.

00:43.280 --> 00:46.400
Isto pode ser útil se não tivermos outras partes de nosso

00:46.400 --> 00:48.550
código que dependam dessa estrutura.

00:48.550 --> 00:51.680
Aqui, definimos user1 para ser do tipo Greetable, e com isso

00:51.680 --> 00:55.240
dizemos que não nos importamos com o que está dentro do usuário, mas

00:55.240 --> 00:57.840
o que tem que estar lá dentro é um método de saudação,

00:57.840 --> 00:59.730
e sabemos que tem que estar lá dentro

00:59.730 --> 01:03.510
porque o que quer que armazenemos no user1 tem que ser greetable.

01:03.510 --> 01:07.350
Isso nos permite escrever um código verdadeiramente poderoso e flexível

01:07.350 --> 01:09.840
onde não precisamos saber tudo sobre um objeto,

01:09.840 --> 01:11.710
ou tudo sobre uma cláusula, mas apenas

01:11.710 --> 01:14.710
sabemos que o que estou recebendo aqui no usuário1 tem que ter

01:14.710 --> 01:16.210
um método de saudação.

01:16.210 --> 01:18.850
Não nos interessa se a Pessoa tem mais alguma coisa,

01:18.850 --> 01:20.630
aqui estamos interessados em saudar,

01:20.630 --> 01:22.400
por isso nos enviamos à Greetable,

01:22.400 --> 01:25.180
e portanto não podemos armazenar nada no usuário1 que

01:25.180 --> 01:27.190
não tenha um método de saudação, porque

01:27.190 --> 01:30.770
a Greetable força o que quer que seja que você se baseie nela a ter tal método

01:30.770 --> 01:32.333
de saudação.
