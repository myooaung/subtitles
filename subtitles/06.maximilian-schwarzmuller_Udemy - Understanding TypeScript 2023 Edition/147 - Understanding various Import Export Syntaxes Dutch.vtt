WEBVTT

00:02.310 --> 00:04.270
Dus we gebruiken ES modules.

00:04.270 --> 00:06.470
Het blijkt dat er enkele variaties

00:06.470 --> 00:08.550
van die export en import syntax zijn

00:08.550 --> 00:10.100
die u moet kennen.

00:10.100 --> 00:12.276
U kunt bijvoorbeeld importen bundelen.

00:12.276 --> 00:14.300
Laten we zeggen dat ik hier in de projectinvoer

00:14.300 --> 00:15.870
twee dingen importeer uit

00:15.870 --> 00:18.060
het validatiebestand.

00:18.060 --> 00:22.030
Misschien wil je dat allemaal groeperen in één object waar

00:22.030 --> 00:25.493
je dan dot validatable en dot validate kunt aanroepen,

00:25.493 --> 00:29.170
zodat je validate niet zo hoeft aan te roepen.

00:29.170 --> 00:30.940
Misschien wilt u het zo noemen, maar

00:30.940 --> 00:33.510
als u laten we zeggen een functie had met dezelfde naam

00:33.510 --> 00:35.210
en hetzelfde jaar of iets dergelijks

00:35.210 --> 00:36.719
en u wilt voorkomen dat de naam

00:36.719 --> 00:38.250
botst of u wilt duidelijk maken

00:38.250 --> 00:40.292
dat dit bij een soort pakket hoort, dan zou

00:40.292 --> 00:42.069
u dat kunnen groeperen.

00:42.069 --> 00:45.090
Om importen te groeperen importeer je ze niet zoals

00:45.090 --> 00:49.150
dit met de accolades, maar in plaats daarvan gebruik je hier een sterretje,

00:49.150 --> 00:51.970
wat betekent dat je alles uit dat bestand importeert,

00:51.970 --> 00:57.192
als en dan een alias naar keuze, bijvoorbeeld validatie.

00:57.192 --> 00:59.280
Nu moet je naar de plaatsen gaan waar je

00:59.280 --> 01:01.070
iets uit dat bestand gebruikt en het

01:01.070 --> 01:05.470
gebruiken als een objectvalidatie. valideerbaar.

01:05.470 --> 01:07.920
Dus alles wat geëxporteerd wordt in dat bestand

01:07.920 --> 01:10.400
dat u nu groepeert onder deze naam hier, is toegankelijk

01:10.400 --> 01:12.341
via de puntnotatie.

01:12.341 --> 01:15.700
Dus validatie. helemaal valideerbaar en dan ook

01:15.700 --> 01:18.830
nog daar beneden waar we de valideer functie hebben is het natuurlijk

01:18.830 --> 01:25.197
validatie. valideren, valideren. en valideren.

01:25.197 --> 01:25.197
geldig.

01:25.197 --> 01:29.604
En daarmee zul je zien, goed valideren werkt.

01:29.604 --> 01:32.490
Dus groeperen is één ding dat je kunt doen.

01:32.490 --> 01:34.960
Dat alias ding hier is ook iets wat je

01:34.960 --> 01:36.890
in het algemeen kunt doen.

01:36.890 --> 01:38.830
Je houdt niet van autobinding,

01:38.830 --> 01:41.270
je wilt een hoofdletter aan het begin?

01:41.270 --> 01:45.360
Nou, u kunt gewoon een alias toewijzen met het als sleutelwoord hier.

01:45.360 --> 01:48.150
Binnen de accolades kun je het ook gebruiken.

01:48.150 --> 01:50.431
Dan hernoem je deze import en alleen deze import.

01:50.431 --> 01:54.350
Je hernoemt het natuurlijk niet in het originele bestand.

01:54.350 --> 01:58.390
Het is alleen geïmporteerd onder een andere naam in dit bestand hier.

01:58.390 --> 02:01.280
Dus in plaats van autobind te gebruiken met een kleine

02:01.280 --> 02:05.780
letter a moeten we nu onze aliasnaam gebruiken met de hoofdletter A.

02:05.780 --> 02:09.150
Dat kan dus een andere leuke functie zijn om naamsconflicten te voorkomen

02:09.150 --> 02:11.570
als je bijvoorbeeld in hetzelfde bestand een ander

02:11.570 --> 02:14.543
ding had met de naam autobind en de kleine letter a.

02:16.180 --> 02:20.010
U kunt ook werken met standaard exports.

02:20.010 --> 02:22.926
Als je een bestand hebt dat maar één ding exporteert,

02:22.926 --> 02:25.120
laten we zeggen basiscomponent.

02:25.120 --> 02:28.020
Eigenlijk hebben we veel bestanden die maar één ding exporteren.

02:28.020 --> 02:29.240
Maar laten we zeggen dat

02:29.240 --> 02:31.360
we hier in dit bestand niet zo willen exporteren,

02:31.360 --> 02:33.770
een zogenaamde export op naam, omdat we hier

02:33.770 --> 02:37.330
in de accolades op naam hebben geïmporteerd.

02:37.330 --> 02:40.258
We moeten de exacte naam gebruiken die we hier hebben gebruikt.

02:40.258 --> 02:42.170
Als je dat niet wilt doen, voeg je

02:42.170 --> 02:45.140
gewoon een ander sleutelwoord toe, default.

02:45.140 --> 02:48.940
En dit vertelt JavaScript dat dit de belangrijkste, nou

02:48.940 --> 02:52.064
ja, de standaard export van dit bestand is.

02:52.064 --> 02:55.929
U zou hier nog steeds andere exporten met naam kunnen

02:55.929 --> 02:58.500
hebben die zijn toegestaan.

02:58.500 --> 03:01.220
Whoops, bijvoorbeeld een constante hier die toegestaan

03:01.220 --> 03:02.120
zou zijn.

03:02.120 --> 03:04.750
U kunt in hetzelfde bestand exporten met naam en standaardexporten

03:04.750 --> 03:07.800
hebben, maar als u een standaardexport gebruikt, kunt u slechts

03:07.800 --> 03:11.440
één standaardexport per bestand hebben.

03:11.440 --> 03:14.210
Dus hier heb ik mijn standaard export en nu in de bestanden

03:14.210 --> 03:16.926
waar ik geïmporteerd heb, importeer je het niet op naam.

03:16.926 --> 03:19.900
U kunt alleen met naam genoemde exporten importeren.

03:19.900 --> 03:22.639
Bijvoorbeeld, dat er iets constant wordt toegevoegd.

03:22.639 --> 03:24.743
In plaats daarvan importeert u nu uw standaard

03:24.743 --> 03:28.600
door een willekeurige naam te kiezen, die niet hoeft overeen te komen met

03:28.600 --> 03:30.890
de naam die u in het geëxporteerde bestand

03:30.890 --> 03:32.400
hebt gebruikt.

03:32.400 --> 03:34.354
Dus je hoeft nu geen component te gebruiken.

03:34.354 --> 03:37.037
Je zou hier nu bijvoorbeeld gewoon Cmp kunnen gebruiken.

03:37.037 --> 03:40.700
En importeer het zo, zonder accolades.

03:40.700 --> 03:44.127
Er is ook geen ster, dus ik importeer niet alles.

03:44.127 --> 03:46.827
Ik importeer alleen de standaard.

03:46.827 --> 03:49.460
Daarom is dit alleen beschikbaar als het bestand

03:49.460 --> 03:52.210
waaruit u importeert een standaardexport heeft.

03:52.210 --> 03:53.850
Want dit vertelt JavaScript,

03:53.850 --> 03:58.010
hé, ik wil de standaard export van dat bestand gebruiken.

03:58.010 --> 04:00.520
Dan kan ik dit Cmp noemen, natuurlijk.

04:00.520 --> 04:02.569
Of, ik moet Cmp gebruiken, natuurlijk nu.

04:02.569 --> 04:04.509
Component is niet meer toegestaan omdat

04:04.509 --> 04:06.666
ik het niet importeer onder die naam.

04:06.666 --> 04:09.710
Natuurlijk moeten we dit nu ook tweaken in project-item en

04:09.710 --> 04:10.675
project-list.

04:10.675 --> 04:12.486
Wij gebruiken de standaard uitvoer.

04:12.486 --> 04:14.515
Ik blijf hier bij component, maar dat

04:14.515 --> 04:16.540
hoeft niet, zoals ik net liet zien.

04:16.540 --> 04:18.300
Je zou hier elke naam kunnen gebruiken

04:18.300 --> 04:21.900
die je wilt, maar voor de eenvoud gebruik ik hier component.

04:21.900 --> 04:24.075
Standaard uitvoer kan prettig zijn als je

04:24.075 --> 04:25.740
maar één ding per bestand hebt.

04:25.740 --> 04:29.080
Persoonlijk geef ik echter de voorkeur aan exports op naam,

04:29.080 --> 04:31.075
omdat je dan autocompletie krijgt,

04:31.075 --> 04:33.590
je dwingt een duidelijk naamgevingspatroon

04:33.590 --> 04:37.290
af, en als een andere ontwikkelaar jouw klasse of geëxporteerde

04:37.290 --> 04:40.460
ding importeert, moet hij jouw naam gebruiken, wat meestal

04:40.460 --> 04:41.870
goed is omdat je zo bepaalde

04:41.870 --> 04:43.290
naamgevingsconventies

04:43.290 --> 04:46.579
in een team of organisatie kunt afdwingen.

04:46.579 --> 04:49.840
En daarom hou ik persoonlijk van exports op naam, maar

04:49.840 --> 04:51.740
je moet natuurlijk ook de standaardexport

04:51.740 --> 04:54.853
kennen, die je zo kunt gebruiken.
