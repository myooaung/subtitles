WEBVTT

00:02.240 --> 00:04.870
Presentatore: Abbiamo aggiunto il nostro primo componente.

00:04.870 --> 00:06.090
Aggiungiamone un secondo.

00:06.090 --> 00:09.970
NewTodo. tsx è un nome di file.

00:09.970 --> 00:13.060
Naturalmente, importiamo react da react.

00:13.060 --> 00:16.170
E naturalmente si possono costruire anche componenti basati sulle classi.

00:16.170 --> 00:18.270
Anche questo è pienamente supportato,

00:18.270 --> 00:22.410
ma utilizzerò solo lo stile moderno dei componenti funzionali.

00:22.410 --> 00:24.070
Anche qui abbiamo una funzione che costituirà

00:24.070 --> 00:26.180
il nostro componente in seguito.

00:26.180 --> 00:29.258
Esporto NewTodo come predefinito e aggiungo un'assegnazione

00:29.258 --> 00:31.260
di tipo e chiariamo che questo sarà

00:31.260 --> 00:34.410
un componente di tipo function.

00:34.410 --> 00:35.800
E quindi, ovviamente, qui

00:35.800 --> 00:38.220
manca un po' di codice jsx restituito.

00:38.220 --> 00:39.730
Quindi restituirò un modulo in cui voglio

00:39.730 --> 00:42.030
aggiungere tutti i controlli necessari per consentire all'utente

00:42.030 --> 00:43.780
di aggiungere nuovi todos.

00:45.060 --> 00:48.650
Ora aggiungiamo questo nuovo componente todo nel componente app.

00:48.650 --> 00:53.650
Qui possiamo importare NewTodo da . /components/NewTodo e aggiungerlo

00:55.130 --> 00:58.095
semplicemente qui al posto del commento.

00:58.095 --> 01:00.520
NewTodo come componente autochiudente,

01:00.520 --> 01:02.790
perché al momento non stiamo passando

01:02.790 --> 01:04.750
nulla tra i tag di apertura e di chiusura

01:04.750 --> 01:07.784
e non abbiamo nemmeno oggetti di scena, almeno al

01:07.784 --> 01:09.263
momento.

01:10.140 --> 01:11.540
Quindi, al posto di questo

01:11.540 --> 01:13.330
componente, possiamo aggiungere

01:13.330 --> 01:16.190
un input e successivamente un pulsante.

01:16.190 --> 01:18.117
Aggiungiamo qui un div in cui

01:18.117 --> 01:20.020
voglio avere un'etichetta

01:20.020 --> 01:24.880
con gli attributi htmlFor per puntare, diciamo, a "todo-text".

01:24.880 --> 01:26.560
Questo è solo markup, in

01:26.560 --> 01:31.250
cui dico "Todo Text" e poi elemento di input di tipo text con un id

01:31.250 --> 01:35.170
di "todo text", in modo che l'etichetta e l'input siano

01:35.170 --> 01:36.900
collegati correttamente

01:36.900 --> 01:39.640
dal punto di vista semantico.

01:39.640 --> 01:41.440
E al di sotto di questo div, al posto del

01:41.440 --> 01:43.120
modulo, aggiungerò un pulsante con

01:43.120 --> 01:44.437
la scritta "AGGIUNGI TODO"

01:45.297 --> 01:47.970
e questo pulsante dovrà essere di tipo submit, in modo

01:47.970 --> 01:49.670
da inviare il modulo.

01:49.670 --> 01:51.900
Questo è un modulo di base che possiamo usare per

01:51.900 --> 01:53.143
aggiungere un nuovo Todo.

01:54.580 --> 01:57.060
Ora, assicuriamoci che tutto questo

01:57.060 --> 01:59.660
funzioni e per questo abbiamo un paio di

01:59.660 --> 02:01.820
passi diversi da applicare.

02:01.820 --> 02:05.020
Dobbiamo ottenere ciò che l'utente ha inserito qui

02:05.020 --> 02:08.550
e poi dobbiamo inoltrare ciò che l'utente ha inserito qui

02:08.550 --> 02:09.810
al componente app, perché

02:09.810 --> 02:13.330
è lì che gestiremo i nostri todos in seguito.

02:13.330 --> 02:16.150
Quindi, prima di tutto, reagiamo all'invio del modulo.

02:16.150 --> 02:18.050
Possiamo aggiungere una nuova

02:18.050 --> 02:20.300
funzione, quindi una funzione nel componente

02:20.300 --> 02:22.720
funzionale, ma che ora sarà una funzione

02:22.720 --> 02:27.720
normale, che chiameremo "todoSubmitsHandler", con qualsiasi nome.

02:28.210 --> 02:29.990
Si tratta di una funzione che dovrebbe essere attivata

02:29.990 --> 02:31.860
ogni volta che il modulo viene inviato.

02:31.860 --> 02:35.571
Possiamo quindi legarlo al prop onSubmit qui alla fine, todoSubmitsHandler,

02:35.571 --> 02:38.770
senza eseguirlo, solo puntandolo, in modo che venga

02:38.770 --> 02:40.900
eseguito per noi ogni volta che il

02:40.900 --> 02:43.810
form viene inviato.

02:43.810 --> 02:46.270
Qui otteniamo un oggetto evento e l'oggetto

02:46.270 --> 02:49.507
evento è di tipo react. FormEvent.

02:51.290 --> 02:54.010
Ora voglio richiamare l'evento prevent default per evitare

02:54.010 --> 02:55.780
che questo default, ovvero l'invio di

02:55.780 --> 02:58.300
una richiesta reale al server che serve l'applicazione,

02:58.300 --> 02:59.280
venga evitato.

02:59.280 --> 03:01.520
Naturalmente non è il momento in cui voglio che accada.

03:01.520 --> 03:04.680
Voglio gestire questa richiesta solo qui in JavaScript e quindi

03:04.680 --> 03:08.350
questa impostazione predefinita del browser deve essere impedita.

03:08.350 --> 03:09.770
Ora, con questo prevenuto, possiamo

03:09.770 --> 03:12.610
ottenere qualsiasi cosa l'utente abbia inserito nell'input

03:12.610 --> 03:15.250
e per questo abbiamo due modi diversi.

03:15.250 --> 03:18.310
Possiamo gestire lo stato dell'input qui, in un certo senso

03:18.310 --> 03:20.970
con un binding bidirezionale, oppure usare un ref,

03:20.970 --> 03:23.170
un riferimento, per estrarre ciò che l'utente

03:23.170 --> 03:25.010
ha inserito qui quando il modulo viene

03:25.010 --> 03:26.520
inviato.

03:26.520 --> 03:28.410
Sceglierò quest'ultimo approccio,

03:28.410 --> 03:30.420
perché tra poco vedremo la gestione

03:30.420 --> 03:33.470
dello stato nel componente dell'applicazione.

03:33.470 --> 03:37.340
Per impostare un ref di questo tipo, importiamo l'hook useRef

03:37.340 --> 03:40.580
da react; gli hook sono funzioni speciali che si possono

03:40.580 --> 03:44.010
eseguire sui componenti funzionali per aggiungere

03:44.010 --> 03:45.290
determinate funzionalità

03:45.290 --> 03:48.101
al componente e quando eseguiamo useRef qui,

03:48.101 --> 03:51.190
ciò che otteniamo è un oggetto Ref, che possiamo

03:51.190 --> 03:53.730
memorizzare in una costante e che chiameremo

03:53.730 --> 03:57.310
"textInputRef".

03:57.310 --> 04:00.176
E possiamo, per esempio, usare questo riferimento per

04:00.176 --> 04:04.980
assegnarlo a un elemento dom e poi interagire con quell'elemento dom dall'interno del nostro

04:04.980 --> 04:06.500
codice qui sopra.

04:06.500 --> 04:08.800
Quindi, ad esempio, quando il modulo viene inviato.

04:09.680 --> 04:11.510
Per creare una connessione di questo

04:11.510 --> 04:14.020
tipo, aggiungiamo il prop speciale Ref a qualsiasi

04:14.020 --> 04:16.580
elemento html di vostra scelta e puntiamo all'oggetto

04:16.580 --> 04:19.150
che abbiamo creato qui sopra.

04:19.150 --> 04:21.530
Aggiungere quindi textInputRef.

04:21.530 --> 04:23.540
Qui si crea un collegamento.

04:23.540 --> 04:27.380
Tuttavia, come si può notare, a TypeScript questo non piace.

04:27.380 --> 04:30.110
Perché anche useRef risulta

04:30.110 --> 04:33.250
essere una funzione generica.

04:33.250 --> 04:35.270
Ora, quale tipo possiamo passargli.

04:35.270 --> 04:37.340
Cosa sarebbe interessante sapere?

04:37.340 --> 04:39.200
Sarebbe interessante sapere quale

04:39.200 --> 04:42.030
tipo di dati sarà memorizzato all'interno del grafico

04:42.030 --> 04:43.970
e, dato che si indica l'elemento di input,

04:43.970 --> 04:47.880
avremo un elemento di input html memorizzato lì dentro.

04:47.880 --> 04:50.420
Ora dovremmo fornire un valore predefinito al Ref

04:50.420 --> 04:51.840
quando viene impostato e forniremo

04:51.840 --> 04:53.190
null, perché quando il componente

04:53.190 --> 04:54.710
viene reso per la prima volta,

04:54.710 --> 04:57.380
quando questo codice viene eseguito, ovviamente

04:57.380 --> 04:59.460
questo non è stato reso, quindi non punterà

04:59.460 --> 05:01.590
a nulla.

05:01.590 --> 05:03.350
Tuttavia, una volta eseguita questa

05:03.350 --> 05:04.950
operazione, la connessione verrà

05:04.950 --> 05:07.040
stabilita e l'arbitro funzionerà.

05:07.040 --> 05:09.453
Ora, nel todoSubmitHandler, possiamo ottenere

05:10.342 --> 05:15.342
il testo inserito utilizzando textInputRef. corrente, è sempre qualcosa che

05:15.500 --> 05:17.973
si deve inserire quando si lavora

05:17.973 --> 05:21.440
con un arbitro, . ovviamente qui perché lavoriamo

05:21.440 --> 05:24.530
con l'elemento di input html.

05:24.530 --> 05:27.940
Tuttavia, il problema è che questo potrebbe essere nullo.

05:27.940 --> 05:29.630
È un problema che conosciamo già, lo abbiamo

05:29.630 --> 05:31.790
riscontrato all'inizio del corso quando abbiamo

05:31.790 --> 05:33.370
selezionato qualcosa in un Dom e lo riscontriamo

05:33.370 --> 05:34.630
anche qui, perché TypeScript

05:34.630 --> 05:37.020
non può sapere con certezza che questa connessione è stata

05:37.020 --> 05:38.800
stabilita.

05:38.800 --> 05:40.580
Lo sappiamo, abbiamo scritto il codice,

05:40.580 --> 05:43.050
ma TypeScript purtroppo non capisce che si stabilisce

05:43.050 --> 05:45.300
una connessione laggiù.

05:46.310 --> 05:48.920
Quindi, per risolvere questo problema, possiamo aggiungere un

05:48.920 --> 05:51.350
punto esclamativo qui, per dire ancora una volta a TypeScript

05:51.350 --> 05:54.350
che questo andrà bene, che questo sarà impostato e che siamo a posto.

05:54.350 --> 05:56.130
A proposito, TypeScript è corretto:

05:56.130 --> 05:58.920
se chiamassimo todoSubmitHandler qui, questo verrebbe

05:58.920 --> 06:00.590
chiamato nel momento in cui viene

06:00.590 --> 06:02.410
reso per la prima volta e quindi non

06:02.410 --> 06:05.000
sarebbe ancora inizializzato.

06:05.000 --> 06:07.910
Sappiamo solo che sarà inizializzato con certezza, perché

06:07.910 --> 06:09.730
sappiamo che sarà richiamato solo quando

06:09.730 --> 06:10.830
il modulo sarà inviato

06:10.830 --> 06:13.830
e ciò può avvenire solo dopo che questo è stato reso.

06:13.830 --> 06:16.120
Così conosciamo il funzionamento del nostro codice.

06:16.120 --> 06:18.360
Questo non sarà mai nullo.

06:18.360 --> 06:20.810
Se ci fosse un'altra possibilità, si dovrebbe

06:20.810 --> 06:22.780
usare un controllo if per verificare

06:22.780 --> 06:26.030
se textInputRef. corrente è nullo e se lo è,

06:26.030 --> 06:27.620
fare qualcos'altro.

06:27.620 --> 06:29.550
Ma qui questo non può accadere.

06:29.550 --> 06:31.230
Quindi estraiamo un valore e

06:31.230 --> 06:34.640
possiamo usare la console. registrate qui per vedere se funziona.

06:34.640 --> 06:37.040
Ma naturalmente questo non è l'assetto definitivo.

06:37.040 --> 06:40.900
Quindi salviamo questo, inseriamo qui, finiamo

06:40.900 --> 06:44.590
tra un mese e aggiungiamo todo, e lo vedremo

06:44.590 --> 06:47.970
qui nei log della console.

06:47.970 --> 06:50.310
Funziona come dovrebbe.

06:50.310 --> 06:51.910
E dopo aver fatto funzionare il tutto come

06:51.910 --> 06:55.460
si deve, assicuriamoci di portare il valore al componente dell'applicazione.

06:55.460 --> 06:58.820
Se conoscete qualche reazione, provatela prima da soli.

06:58.820 --> 07:00.963
Lo faremo insieme nella prossima lezione.
