WEBVTT

00:02.040 --> 00:04.180
ครู: นั่นคือชั้นเรียนพื้นฐานมาก

00:04.180 --> 00:05.930
ตอนนี้เมื่อสร้างชั้นเรียน

00:05.930 --> 00:08.400
พวกเขามักจะซับซ้อนกว่านั้น

00:08.400 --> 00:10.800
และคุณอาจต้องการเก็บข้อมูลมากกว่านี้

00:10.800 --> 00:15.160
สมมติว่าทุกแผนกควรมีพนักงาน

00:15.160 --> 00:20.290
นั่นอาจเป็นอาร์เรย์ และในตอนแรกอาจเป็นอาร์เรย์ว่าง

00:20.290 --> 00:24.980
และเพื่อให้แม่นยำยิ่งขึ้นเกี่ยวกับสิ่งที่คุณต้องการจัดเก็บในนั้น

00:24.980 --> 00:28.800
อาจเป็นสตริงอาร์เรย์เพื่อให้ค่อนข้างง่าย

00:28.800 --> 00:31.733
ตอนนี้เราสามารถมีวิธีการที่นี่ addEmployee

00:33.030 --> 00:39.430
เราต้องการพนักงานเป็นอาร์กิวเมนต์ ซึ่งควรเป็นสตริงในตัวอย่างของเรา

00:39.430 --> 00:42.650
จากนั้นเราสามารถตั้งค่านี้ พนักงาน. ดัน.

00:42.650 --> 00:48.373
ดังนั้นให้ส่งพนักงานใหม่เข้าสู่อาร์เรย์พนักงานของเราด้วยรหัสนี้

00:50.750 --> 00:52.683
ตอนนี้เรายังสามารถเพิ่มวิธีอื่นได้อีก

00:53.666 --> 00:55.749
คือ printEmployeeInformation

01:00.508 --> 01:12.766
และที่นั่นฉันต้องการปลอบใจ บันทึก(นี้. พนักงาน. ความยาว) และฉันต้องการปลอบใจด้วย

01:12.766 --> 01:12.766
บันทึก(นี้. พนักงาน) นั่นเอง

01:15.510 --> 01:20.560
ตอนนี้ถ้าเราลงไปที่นี่ ตอนนี้เราสามารถแสดงความคิดเห็นเกี่ยวกับรหัสนี้ที่นี่ได้

01:20.560 --> 01:25.870
ซึ่งจะพังอีกครั้งเพราะเราไม่เหมาะกับคำอธิบายแผนกกับวัตถุของเราที่นั่น

01:25.870 --> 01:29.200
และที่นี่ ในแผนกบัญชีนี้ เราสามารถเพิ่มพนักงานได้

01:29.200 --> 01:32.234
สมมติว่าแม็กซ์

01:32.234 --> 01:35.400
และพนักงานอีกคนสมมุติว่ามนู

01:35.400 --> 01:41.520
และนอกจากการอธิบายแล้ว ฉันยังต้องการข้อมูลพนักงานของฉันในนั้นด้วย

01:41.520 --> 01:44.600
ถ้าเราบันทึกสิ่งนี้ เราควรได้ผลลัพธ์นี้

01:44.600 --> 01:47.830
พนักงานสองคน และนี่คือข้อมูลบางส่วน

01:47.830 --> 01:50.240
ตอนนี้เป็นสิ่งที่ดีที่จะมี

01:50.240 --> 01:52.700
ปัญหาหนึ่งที่เรามีกับคลาสนี้คือเราสามารถเปลี่ยนพนักงานจากภายนอกได้

01:52.700 --> 01:58.160
ไม่เพียงแค่เพิ่มพนักงานเท่านั้น แต่ด้วยการเข้าถึงทรัพย์สินของพนักงานโดยตรง

01:58.160 --> 02:04.430
เช่นเดียวกับที่เราทำในนามได้เช่นกัน

02:04.430 --> 02:07.630
ที่ฉันหมายถึงคือ เราสามารถไปที่บัญชีได้ด้วย

02:07.630 --> 02:13.870
แล้วติดต่อกับพนักงาน และอาจเพิ่มพนักงานอีกคนที่ดัชนีสอง แล้วก็ผ่านแอนนา

02:13.870 --> 02:16.400
แบบนั้น

02:16.400 --> 02:18.210
ถ้าเราทำอย่างนั้นและช่วยมันไว้ได้

02:18.210 --> 02:20.290
เราจะได้พนักงานสามคนและได้แอนนา

02:20.290 --> 02:22.710
ตอนนี้คุณอาจคิดว่า เยี่ยมมาก เรามีวิธีอื่น

02:22.710 --> 02:25.230
เมื่อสร้างแอปพลิเคชันที่ซับซ้อนมากขึ้น

02:25.230 --> 02:27.980
คุณมักจะต้องการหลีกเลี่ยงสิ่งนี้

02:27.980 --> 02:30.930
คุณต้องการให้แน่ใจว่ามีเส้นทางเดียวที่ชัดเจน

02:30.930 --> 02:38.530
วิธีหนึ่งในการใช้ชั้นเรียนของคุณ และวิธีอื่นๆ แบบนั้นไม่ได้รับการสนับสนุนจริงๆ

02:38.530 --> 02:42.920
เพราะถ้าคุณทำงานในทีมที่ใหญ่กว่า เพื่อนร่วมงานคนหนึ่งจะใช้แนวทางนี้ในการเพิ่มพนักงาน

02:42.920 --> 02:48.050
และเพื่อนร่วมงานอีกคนหนึ่งอาจใช้วิธีนี้

02:48.050 --> 02:49.280
และคุณไม่ต้องการสิ่งนี้

02:49.280 --> 02:52.640
คุณต้องการมีวิธีเดียวในการทำเช่นนี้

02:52.640 --> 02:58.420
นอกจากนี้ เนื่องจากบางทีในวิธีเพิ่มพนักงาน คุณทำได้มากกว่าแค่เพิ่มลงในอาร์เรย์

02:58.420 --> 02:59.770
ก่อนอื่นคุณอาจต้องการมีการตรวจสอบ

02:59.770 --> 03:02.400
ฯลฯ ที่นี่

03:02.400 --> 03:04.940
ดังนั้นคุณอาจมีโค้ดพิเศษอยู่ในนั้น

03:04.940 --> 03:12.970
ซึ่งจะไม่ทำงานหากคุณกำหนดค่าใหม่โดยตรงหรือเพิ่มค่าใหม่ให้กับอาร์เรย์ด้วยบรรทัดนี้

03:12.970 --> 03:19.884
ดังนั้นคุณไม่ต้องการอนุญาตให้พนักงานสามารถเข้าถึงได้จากนอกห้องเรียน

03:19.884 --> 03:22.340
และ TypeScript ช่วยคุณได้

03:22.340 --> 03:26.760
คุณสามารถเปลี่ยนพนักงานที่นี่ให้เป็นทรัพย์สินส่วนตัว

03:26.760 --> 03:32.220
ฟิลด์ส่วนตัวได้โดยการเพิ่มคำสำคัญส่วนตัวข้างหน้า

03:32.220 --> 03:34.303
ตอนนี้ความหมายส่วนตัวคือตอนนี้พนักงานเป็นทรัพย์สิน

03:34.303 --> 03:38.030
ซึ่งสามารถเข้าถึงได้จากภายในชั้นเรียนเท่านั้น

03:38.030 --> 03:43.480
ดังนั้นจากภายในวัตถุสร้างสรรค์

03:43.480 --> 03:49.770
ดังนั้นวิธีการใด ๆ ในชั้นเรียนของแผนกยังคงสามารถทำงานกับพนักงานได้

03:49.770 --> 03:52.570
แต่คุณไม่สามารถเข้าถึงได้อีกต่อไป

03:52.570 --> 03:54.710
ที่นี่คุณเห็นว่าฉันได้รับข้อผิดพลาด

03:54.710 --> 03:57.280
หากฉันพยายามบันทึกสิ่งนี้ ฉันได้รับข้อผิดพลาดในการรวบรวมว่าคุณสมบัติ

03:57.280 --> 03:59.870
'พนักงาน' เป็นส่วนตัวและเข้าถึงได้ภายในคลาส

03:59.870 --> 04:03.550
'แผนก' เท่านั้น

04:03.550 --> 04:09.370
ตอนนี้เราบังคับว่าเมื่อควรเพิ่มพนักงานในแผนกนี้

04:09.370 --> 04:12.690
คนต้องใช้เมธอด addEmployee

04:12.690 --> 04:16.760
เนื่องจากพวกเขาได้รับข้อผิดพลาดหากพวกเขาเขียนโค้ดแบบนี้

04:16.760 --> 04:20.460
นี่คือสิ่งที่เรียกว่าการปรับเปลี่ยนที่นี่ คำสำคัญส่วนตัว

04:20.460 --> 04:23.470
และนอกจากส่วนตัวแล้ว เรายังมีสาธารณะด้วย

04:23.470 --> 04:25.000
ซึ่งเป็นค่าเริ่มต้น

04:25.000 --> 04:26.590
คุณไม่จำเป็นต้องเพิ่มสาธารณะ

04:26.590 --> 04:31.650
ดังนั้นชื่อแบบนี้จึงเหมือนกับชื่อที่มีสาธารณะอยู่ข้างหน้า

04:31.650 --> 04:36.350
ข้อแตกต่างคือทรัพย์สินสาธารณะสามารถเข้าถึงได้จากภายนอก

04:36.350 --> 04:43.600
ตัวอย่างเช่น ที่นี่ ฉันสามารถติดต่อเพื่อตั้งชื่อและกำหนดชื่อใหม่ได้ที่นี่หากต้องการ

04:43.600 --> 04:45.260
ที่เป็นไปได้

04:45.260 --> 04:49.270
สำหรับคุณสมบัติส่วนตัว ที่นี่ไม่สามารถทำได้

04:49.270 --> 04:51.580
เราสามารถใช้ได้จากภายในเท่านั้น

04:51.580 --> 04:52.800
ในทางเทคนิคแล้ว JavaScript

04:52.800 --> 04:55.700
ไม่รู้จักสาธารณะและส่วนตัว

04:55.700 --> 04:59.630
เฉพาะในเวอร์ชันที่ทันสมัยเท่านั้นที่เพิ่มสิ่งดังกล่าวเมื่อเร็ว

04:59.630 --> 05:01.320
ๆ นี้

05:01.320 --> 05:05.690
ในอดีต JavaScript ไม่รู้จักคุณสมบัติส่วนตัวหรือสาธารณะ

05:05.690 --> 05:08.520
คุณสมบัติทั้งหมดเป็นสาธารณะเสมอที่นั่น

05:08.520 --> 05:10.630
TypeScript แนะนำคุณสมบัตินี้

05:10.630 --> 05:13.561
ซึ่งแน่นอนว่าใช้งานไม่ได้ระหว่างรันไทม์

05:13.561 --> 05:18.780
เนื่องจาก JavaScript เพิ่งรู้จักคุณสมบัติสาธารณะ

05:18.780 --> 05:21.290
ดังนั้นบรรทัดนี้ที่นี่ หยุดข้อผิดพลาดระหว่างการรวบรวม

05:21.290 --> 05:23.130
TypeScript

05:23.130 --> 05:27.000
หากคุณคอมไพล์เป็น JavaScript โค้ดนี้จะยังคงทำงานขณะรันไทม์โดยไม่มีข้อผิดพลาด

05:27.000 --> 05:34.900
เนื่องจากเป็น JavaScript ในตัวของมันเอง จนกระทั่งเมื่อเร็วๆ นี้ไม่รู้จักแนวคิดนี้

05:34.900 --> 05:37.350
ดังนั้นขึ้นอยู่กับเวอร์ชันที่คุณกำลังคอมไพล์

05:37.350 --> 05:38.720
มันยังไม่ทราบ

05:38.720 --> 05:40.770
และด้วยเหตุนี้ TypeScript จึงรองรับสิ่งนี้เท่านั้น

05:40.770 --> 05:44.650
เนื่องจากจะตรวจสอบระหว่างการคอมไพล์ ไม่ใช่รันไทม์

05:44.650 --> 05:49.863
อย่างไรก็ตาม เราสามารถหลีกเลี่ยงโค้ดแบบนี้และบังคับให้ทุกคนเขียนโค้ดที่สะอาดขึ้นได้
