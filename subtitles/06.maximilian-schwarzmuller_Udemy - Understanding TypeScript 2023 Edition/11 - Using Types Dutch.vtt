WEBVTT

00:02.060 --> 00:06.410
Instructeur: Typescript biedt vele types aan JavaScript.

00:06.410 --> 00:10.100
Nu kent JavaScript zelf ook enkele datatypes, en daar kom

00:10.100 --> 00:12.230
ik in deze module nog op terug, maar

00:12.230 --> 00:14.950
Typescript voegt veel meer types toe, en zoals

00:14.950 --> 00:17.380
je ook in deze cursus zult leren, kun je

00:17.380 --> 00:21.110
met Typescript ook je eigen types schrijven.

00:21.110 --> 00:24.320
Laten we nu beginnen met enkele van de Core Types,

00:24.320 --> 00:26.250
die JavaScript al kent en die

00:26.250 --> 00:28.289
Typescript ook ondersteunt,

00:28.289 --> 00:30.550
en we zullen ook bekijken wat het verschil

00:30.550 --> 00:33.380
is tussen JavaScript, dat het type kent,

00:33.380 --> 00:36.800
en Typescript, dat type gebruikt.

00:36.800 --> 00:38.287
Een van de kerntypen waarmee

00:38.287 --> 00:41.740
we in JavaScript en Typescript werken, is het getaltype.

00:41.740 --> 00:45.220
Nu, in JavaScript, en hetzelfde geldt voor Typescript,

00:45.220 --> 00:47.290
is er maar één getalstype.

00:47.290 --> 00:50.750
Er is geen speciaal type voor integers of floats.

00:50.750 --> 00:55.520
In plaats daarvan zouden deze waarden hier, allemaal getallen zijn.

00:55.520 --> 00:58.180
Eén is een getal zonder decimaal.

00:58.180 --> 01:01.640
5. 3 is uiteraard één met een decimaal

01:01.640 --> 01:04.532
en al deze waarden zijn van het type getal.

01:04.532 --> 01:08.180
Andere programmeertalen hebben speciale integer

01:08.180 --> 01:10.480
types en float- of dubbeltypes.

01:10.480 --> 01:11.980
JavaScript heeft dat

01:11.980 --> 01:14.120
niet en Typescript ook niet.

01:14.120 --> 01:16.070
We hebben dus het cijfertype, dat

01:16.070 --> 01:19.810
we kennen uit JavaScript, ook als type, in Typescript.

01:19.810 --> 01:23.950
We hebben ook het gegevenstype string, en dat is tekst, die je kunt definiëren

01:23.950 --> 01:26.370
op een van deze drie manieren, met enkele aanhalingstekens,

01:26.370 --> 01:28.285
met dubbele aanhalingstekens, of

01:28.285 --> 01:30.950
ook met backticks.

01:30.950 --> 01:34.720
De laatste notatie met backticks is een speciale syntaxis,

01:34.720 --> 01:38.640
voorzien in modern JavaScript en ook in Typescript, waarmee

01:38.640 --> 01:42.440
we zogenaamde template literals kunnen schrijven, dat zijn

01:42.440 --> 01:44.550
normale strings waarin je dynamisch

01:44.550 --> 01:47.520
wat gegevens kunt injecteren.

01:47.520 --> 01:49.240
Dus, strings zijn gewoon

01:49.240 --> 01:53.000
tekst en JavaScript kent string-waardetypes.

01:53.000 --> 01:55.000
Typescript doet dat ook.

01:55.000 --> 01:57.240
Last but not least, een van de kerngegevens

01:57.240 --> 01:59.790
die JavaScript kent en die Typescript ook ondersteunt,

01:59.790 --> 02:02.250
is het Booleaanse gegevenstype.

02:02.250 --> 02:03.810
Dat zou waar of onwaar zijn, en

02:03.810 --> 02:06.610
dat is natuurlijk superbelangrijk bij programmeren,

02:06.610 --> 02:08.920
vooral als je met IF statements werkt.

02:08.920 --> 02:10.970
Hier hebben we deze twee waarden,

02:10.970 --> 02:13.690
en dat is belangrijk, want in JavaScript ken

02:13.690 --> 02:17.520
je misschien ook het idee van waarheidsgetrouwe en falsy waarden,

02:17.520 --> 02:22.190
bijvoorbeeld dat nul, het getal nul, een falsy waarde is.

02:22.190 --> 02:25.510
Als u het gebruikt in een IF-voorwaarde, wordt het behandeld als onwaar.

02:25.510 --> 02:28.560
Het Booleaanse gegevenstype kent echter eigenlijk alleen deze twee

02:28.560 --> 02:31.230
waarden, waar of onwaar, en dat geldt niet alleen voor Typescript,

02:31.230 --> 02:33.160
maar ook voor JavaScript.

02:33.160 --> 02:35.532
Dit waarheidsgetrouwe, vage concept, dat je

02:35.532 --> 02:38.280
moet kennen, heeft niets te maken met datatypes.

02:38.280 --> 02:40.840
Dat is werk achter de schermen.

02:40.840 --> 02:43.030
JavaScript voegt runtime toe, wanneer

02:43.030 --> 02:46.510
het bepaalde waarden ziet, en IF-condities.

02:46.510 --> 02:48.530
Met getallen, strings en Booleans krijgen

02:48.530 --> 02:50.060
we dus een paar kerngegevens.

02:50.060 --> 02:51.450
Natuurlijk niet allemaal,

02:51.450 --> 02:53.410
we hebben ook objecten en dergelijke,

02:53.410 --> 02:54.617
maar laten we ons concentreren

02:54.617 --> 02:57.330
op deze types en kijken wat Typescript ermee doet, of

02:57.330 --> 03:00.930
wat we ermee kunnen doen, met behulp van Typescript.

03:00.930 --> 03:02.620
Hiervoor ga ik terug naar het

03:02.620 --> 03:05.190
project, dat we in de eerste cursusmodule zagen,

03:05.190 --> 03:07.600
en daar liet ik zien dat alles wat je nu moet

03:07.600 --> 03:10.320
doen, is npm start uitvoeren in een terminal,

03:10.320 --> 03:12.280
navigeren naar deze projectmap,

03:12.280 --> 03:15.130
om deze live ontwikkelingsserver op te starten,

03:15.130 --> 03:18.110
die telkens opnieuw wordt geladen als we iets veranderen,

03:18.110 --> 03:22.300
en hier heb ik dit localhost:3000 adres geopend in het nieuwe tabblad

03:22.300 --> 03:24.890
van mijn browser.

03:24.890 --> 03:26.070
Klopt, ik krijg een foutmelding,

03:26.070 --> 03:28.300
omdat ik nog geen app-lade als bestand heb.

03:28.300 --> 03:30.380
Natuurlijk krijgt dit startproject,

03:30.380 --> 03:32.280
allemaal bijgevoegd bij deze lezing,

03:32.280 --> 03:34.400
zo'n app tray als bestand, dat we hier

03:34.400 --> 03:37.590
proberen te importeren in ons index html bestand, zodra

03:37.590 --> 03:42.050
we app compileren. ts van Typescript naar JavaScript en we kunnen dat doen

03:42.050 --> 03:45.070
in een nieuw tabblad van de terminal, zodat we dit proces draaiende houden

03:45.070 --> 03:46.860
en in plaats daarvan een nieuw tabblad openen,

03:46.860 --> 03:51.117
door simpelweg tsc app uit te voeren. ts en wat dit doet is, het compileert

03:53.920 --> 03:56.630
het Typescript bestand en spuugt een JavaScript

03:56.630 --> 03:58.680
bestand uit, en zodra dat gebeurd

03:58.680 --> 04:01.570
is, kunnen we deze pagina herladen en krijgen we

04:01.570 --> 04:05.520
de Tijd om te beginnen... output hier.

04:05.520 --> 04:08.000
Zo, nu hebben we deze opstelling hier, waar

04:08.000 --> 04:10.620
we wat Typescript code kunnen schrijven en

04:10.620 --> 04:14.650
dan compileren naar JavaScript code, om te zien wat het doet.

04:14.650 --> 04:17.000
Nu, met dat in het Typescript bestand, zal

04:17.000 --> 04:18.870
ik eigenlijk de inhoud daar weghalen,

04:18.870 --> 04:21.820
omdat ik nu wil duiken in deze kern data types, die ik

04:21.820 --> 04:23.720
je net liet zien op de dia, zodat je

04:23.720 --> 04:27.230
begrijpt hoe je ermee kunt werken in Typescript.

04:27.230 --> 04:29.430
Laten we heel eenvoudig beginnen.

04:29.430 --> 04:32.240
Laten we zeggen, we hebben een nieuwe functie,

04:32.240 --> 04:34.990
add, en daar verwachten we twee getallen, n1

04:34.990 --> 04:38.610
en add two, en die geven n1 plus n2 terug, gewoon zo, heel eenvoudige

04:38.610 --> 04:42.370
functie, niets Typescript-achtigs aan.

04:42.370 --> 04:46.080
Nu hebben we twee getallen waarmee we willen werken.

04:46.080 --> 04:49.800
Dat kan hier nummer 1 zijn, wat bijvoorbeeld vijf is, en

04:49.800 --> 04:54.680
ook nummer 2, wat misschien 2 is. 8, wat je maar wilt, twee

04:54.680 --> 04:57.060
nummers hier.

04:57.060 --> 04:59.820
Nu, uiteraard en niet erg verrassend, kunnen we

04:59.820 --> 05:02.950
toevoegen, of de add-functie aanroepen en nummer1 en

05:02.950 --> 05:05.280
nummer2 als argumenten aan deze functie

05:05.280 --> 05:07.320
doorgeven, het resultaat opslaan in

05:07.320 --> 05:10.360
een nieuwe constante misschien, en dan kunnen we, om

05:10.360 --> 05:15.080
iets op het scherm te zien, console.

05:15.080 --> 05:15.080
log het resultaat.

05:15.080 --> 05:20.080
Als we dat doen, en ik hercompileer dit bestand met tsc app. ts, dan zou deze pagina automatisch

05:20.270 --> 05:22.730
moeten herladen.

05:22.730 --> 05:24.350
Zo niet, dan kunt u natuurlijk handmatig

05:24.350 --> 05:27.010
herladen en zou u 7 moeten zien. 8.

05:27.010 --> 05:30.250
Nu denk je misschien, dat is toch niet zo bijzonder?

05:30.250 --> 05:33.650
Dit is een vrij eenvoudig JavaScript-fragment

05:33.650 --> 05:37.330
en er is inderdaad niets Typescript-achtigs aan.

05:37.330 --> 05:39.450
Wel, laten we iets doen dat dat fragment

05:39.450 --> 05:41.900
in normale JavaScript remt.

05:41.900 --> 05:45.100
Laten we zeggen dat deze invoer hier eigenlijk

05:45.100 --> 05:48.530
geen getal is, maar tekst, een vijf in tekst, en als

05:48.530 --> 05:49.880
we dat nu opslaan, en

05:49.880 --> 05:53.380
ons compilatiecommando hier opnieuw uitvoeren,

05:53.380 --> 05:56.110
zul je zien dat, zodra deze pagina hier herlaadt,

05:56.110 --> 05:59.530
ik 52 krijg. 8 als uitgang en dat is duidelijk

05:59.530 --> 06:02.200
niet het juiste resultaat van deze toevoeging.

06:02.200 --> 06:04.500
Weet je waarom we deze uitvoer krijgen

06:04.500 --> 06:06.450
in normaal JavaScript, dat we uiteindelijk

06:06.450 --> 06:08.670
hier uitvoeren?

06:08.670 --> 06:10.150
Nou, we krijgen deze uitvoer,

06:10.150 --> 06:14.710
want dit is niet het resultaat van de wiskundige optelling, maar in plaats daarvan

06:14.710 --> 06:17.760
wordt dit samengevoegd als een string, omdat deze invoer,

06:17.760 --> 06:21.060
hier, vijf, een string is en dan ziet JavaScript, "Oké, ik

06:21.060 --> 06:23.997
heb een string, "ik voeg iets toe aan deze string,

06:23.997 --> 06:27.667
terwijl zeker, "dit iets moet ook worden omgezet in een string,

06:27.667 --> 06:32.097
"zodat ik in totaal een string heb, "omdat de eerste waarde een string was,"

06:32.097 --> 06:34.190
en dus, wat JavaScript doet, is, het

06:34.190 --> 06:39.240
converteert 2.

06:39.240 --> 06:39.240
8

06:39.240 --> 06:42.720
van een getal naar een tekenreeks, voegt een langere tekenreeks samen van vijf en 2. 8, dus

06:42.720 --> 06:46.700
52. 8, als een string en geeft dat terug.

06:46.700 --> 06:49.490
Dus, het behandelt dit niet op een wiskundige manier, maar

06:49.490 --> 06:50.850
in plaats daarvan als een string,

06:50.850 --> 06:52.900
en met JavaScript kan dit gebeuren.

06:52.900 --> 06:54.037
Nu zou je natuurlijk kunnen denken:

06:54.037 --> 06:55.427
"Waarom zou ik zulke code schrijven?

06:55.427 --> 06:58.160
"Ik ben de ontwikkelaar, waarom zou ik deze fout maken? Misschien ben jij niet degene die deze fout maakt.

06:58.160 --> 07:01.230
Misschien wordt dit opgehaald uit gebruikersinvoer

07:01.230 --> 07:04.180
en heb je een kleine fout in je code geïntroduceerd, waarbij

07:04.180 --> 07:06.690
je bent vergeten dit te transformeren, of je

07:06.690 --> 07:09.350
werkt in een team en je hebt een paar scriptbestanden

07:09.350 --> 07:12.460
die samenwerken, en een andere ontwikkelaar heeft zo'n

07:12.460 --> 07:14.740
fout geïntroduceerd.

07:14.740 --> 07:17.270
Het is niet onmogelijk dergelijke fouten te

07:17.270 --> 07:20.110
maken, maar het kan moeilijk zijn ze op te sporen.

07:20.110 --> 07:22.340
Hier is het natuurlijk vrij duidelijk dat er iets

07:22.340 --> 07:24.010
fout is gegaan, omdat we een basisscript

07:24.010 --> 07:26.400
hebben, maar in een groter script herken je misschien

07:26.400 --> 07:28.320
niet eens meteen dat hier iets fout is gegaan,

07:28.320 --> 07:31.520
en dat is waar Typescript ons kan helpen.

07:31.520 --> 07:33.720
We kunnen in deze functie typetoewijzingen

07:33.720 --> 07:36.390
toevoegen aan onze parameters.

07:36.390 --> 07:38.820
We kunnen Typescript vertellen

07:38.820 --> 07:42.280
dat deze twee parameters van het type nummer

07:42.280 --> 07:45.340
moeten zijn en niet van het type.

07:45.340 --> 07:47.535
Dat doen we dus door hier een dubbele punt

07:47.535 --> 07:50.300
toe te voegen na de waarde waaraan we een type willen

07:50.300 --> 07:52.890
toekennen, dus in dit geval na de parameternaam

07:52.890 --> 07:55.220
en dan de naam van het type.

07:55.220 --> 07:57.140
Nummer zou bijvoorbeeld een van de ondersteunde namen zijn.

07:57.140 --> 08:00.560
Naast nummer heb je ook string, of Boolean,

08:00.560 --> 08:03.480
maar daar komen we nog op terug.

08:03.480 --> 08:05.990
Op dit moment hebben we een getal nodig

08:05.990 --> 08:07.750
en niet alleen op de eerste

08:07.750 --> 08:10.530
parameter hier, maar ook op de tweede.

08:10.530 --> 08:12.010
Dus, ook hier kunnen we een dubbele

08:12.010 --> 08:16.150
punt toevoegen, en dan nummer, en nu, wat we tegen Typescript zeggen, is, "Hey,

08:16.150 --> 08:18.367
beide parameters hier, moeten van het type

08:18.367 --> 08:22.147
nummer zijn, "waarden van een ander type doorgeven is niet toegestaan,"

08:22.147 --> 08:25.530
en inderdaad, mijn IDE klaagt hier al, omdat Visual Studio Code ingebouwde

08:25.530 --> 08:28.360
Typescript ondersteuning heeft, maar zelfs als we dit

08:28.360 --> 08:34.260
over het hoofd zouden zien, zodra ik dit hercompileer, door tsc app opnieuw te starten.

08:34.260 --> 08:34.260
ts,

08:34.260 --> 08:39.193
je zult zien, we krijgen een foutmelding.

08:40.040 --> 08:41.670
We krijgen een foutmelding: "Argument

08:41.670 --> 08:42.697
van het type '"5" is

08:42.697 --> 08:46.250
niet toewijsbaar aan een parameter van het type 'nummer', en het

08:46.250 --> 08:48.660
toont ons zelfs waar dit gebeurde en geeft ons

08:48.660 --> 08:51.140
een regelnummer, regel acht, en het toont ons

08:51.140 --> 08:54.430
in feite hetzelfde als wat de IDE hier toont.

08:54.430 --> 08:56.740
Dus, voor het geval we het over het hoofd zagen in

08:56.740 --> 08:58.707
de IDE, gooit het compileren ervan nu een

08:58.707 --> 09:01.340
fout, en dat is het belangrijkste van Typescript.

09:01.340 --> 09:03.284
Het helpt ons alleen tijdens het compileren.

09:03.284 --> 09:06.220
Het verandert JavaScript niet om anders te werken tijdens runtime,

09:06.220 --> 09:10.110
omdat browsers geen ingebouwde Typescript-ondersteuning hebben.

09:10.110 --> 09:13.510
Het kan ons alleen helpen tijdens de ontwikkeling, voordat

09:13.510 --> 09:15.700
we onze Typescript code compileren naar

09:15.700 --> 09:19.310
JavaScript, maar daar is het uiterst nuttig, omdat het een extra

09:19.310 --> 09:21.520
stap toevoegt, een extra sanity check,

09:21.520 --> 09:25.560
waar we hier ontdekken, "Oh, we hebben een fout gemaakt.

09:25.560 --> 09:28.407
"Hier, dit zou geen string moeten zijn, dit zou een nummer

09:28.407 --> 09:31.660
moeten zijn", en we kunnen dit oplossen en we zijn goed.

09:31.660 --> 09:34.210
Dit is wat Typescript doet.

09:34.210 --> 09:35.670
Het helpt je tijdens de ontwikkeling.

09:35.670 --> 09:37.390
Het verandert uw runtime code niet.

09:37.390 --> 09:40.130
Inderdaad, zelfs met de standaardinstellingen compileerde

09:40.130 --> 09:42.800
het hier onze fout, ook al detecteerde het die tijdens

09:42.800 --> 09:44.700
het compileren, en creëerde het een bestand

09:44.700 --> 09:47.220
dat het verkeerde resultaat veroorzaakt, omdat

09:47.220 --> 09:50.690
Typescript hier standaard niet ingrijpt.

09:50.690 --> 09:53.560
Later zul je leren hoe je daarvoor kunt zorgen, maar standaard

09:53.560 --> 09:56.300
wordt het compileren niet eens geblokkeerd.

09:56.300 --> 09:59.260
Toch schreeuwt het je toe en wijst het je op deze

09:59.260 --> 10:03.570
fout, zodat je die kunt herstellen, en zodat je zulke fouten hier

10:03.570 --> 10:04.850
kunt vermijden.

10:04.850 --> 10:07.450
Trouwens, zorg ervoor dat je

10:07.450 --> 10:09.020
geen app hebt. js en app. en gaan tegelijkertijd open.

10:09.020 --> 10:11.950
Je zou hier fouten kunnen krijgen in de IDE,

10:11.950 --> 10:13.470
met betrekking tot dubbele functie-implementaties.

10:13.470 --> 10:15.830
Het sluiten van het JavaScript-bestand lost dit op.
