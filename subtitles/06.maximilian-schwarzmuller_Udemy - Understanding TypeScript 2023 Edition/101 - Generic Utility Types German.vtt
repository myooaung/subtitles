WEBVTT

00:02.330 --> 00:04.870
Erzähler: Da wir gerade von allgemeineren

00:04.870 --> 00:06.970
Typen sprechen, könnten Sie als kleinen

00:06.970 --> 00:11.410
Bonus sagen, dass ich Ihnen ein paar eingebaute Typen zeigen möchte.

00:11.410 --> 00:15.740
Typescript wird mit Typen ausgeliefert, die generische Typen verwenden

00:15.740 --> 00:17.240
oder generische Typen sind,

00:17.240 --> 00:20.350
die uns bestimmte Nutzfunktionen bieten.

00:20.350 --> 00:22.050
Es handelt sich also um einen kleinen Bonus,

00:22.050 --> 00:22.920
und von Zeit zu Zeit können

00:22.920 --> 00:25.550
diese speziellen Typen sehr nützlich sein.

00:25.550 --> 00:26.840
Im Anhang finden Sie einen Link

00:26.840 --> 00:30.680
zur vollständigen Dokumentation aller eingebauten Dienstprogrammtypen.

00:30.680 --> 00:33.810
Ich möchte Ihnen nur ein paar Beispiele nennen.

00:33.810 --> 00:36.010
Wie alle diese Arten von Dingen existieren

00:36.010 --> 00:38.610
auch diese Arten nur in den Arten der Welt und

00:38.610 --> 00:41.300
daher nur vor der Zusammenstellung.

00:41.300 --> 00:43.460
Aber während dieses Kompilierungsschritts

00:43.460 --> 00:48.130
können sie Ihnen zusätzliche Typsicherheit oder zusätzliche Flexibilität bieten.

00:48.130 --> 00:51.670
Zum Beispiel gibt es den eingebauten Teiltyp.

00:51.670 --> 00:55.580
Sagen wir, wir haben einen neuen Typ, und Sie Schnittstelle, die wir finden

00:55.580 --> 00:58.480
oder eine benutzerdefinierte Art wirklich keine Rolle,

00:58.480 --> 00:59.493
CourseGoal.

01:00.660 --> 01:03.780
Das CourseGoal hat einen Titel, der eine Zeichenkette

01:03.780 --> 01:06.930
sein sollte, und eine Beschreibung, die alle eine Zeichenkette

01:06.930 --> 01:09.040
sein sollten.

01:09.040 --> 01:14.040
Vielleicht haben wir auch completeUntil Eigenschaft, die ein Datum ist.

01:15.290 --> 01:17.961
Jetzt wollen wir eine Funktion haben, sagen wir,

01:17.961 --> 01:21.500
createCourseGoal, die uns ein solches Objekt erstellt.

01:21.500 --> 01:23.380
Natürlich hätten wir diese Klasse auch selbst erstellen können.

01:23.380 --> 01:26.290
Aber wir haben eine solche Funktion, weil wir in dieser Funktion

01:26.290 --> 01:28.740
einige Daten aus einer Datenbank oder was auch

01:28.740 --> 01:30.590
immer einlesen könnten.

01:30.590 --> 01:32.110
Wir haben also diese Funktion.

01:32.110 --> 01:33.330
Und am Ende möchte

01:33.330 --> 01:37.890
ich meinen Titel erhalten, der ein String ist, ich könnte

01:37.890 --> 01:42.320
meine Beschreibung erhalten, die ein String ist, und ich

01:42.320 --> 01:47.150
hoffe, dass ich mein Datum erhalte, das ein Date ist.

01:47.150 --> 01:49.680
In dieser Funktion könnten wir natürlich ein Objekt zurückgeben,

01:49.680 --> 01:51.740
aber wir haben gerade all diese Dinge eingerichtet.

01:51.740 --> 01:55.340
Wir setzen also title auf title, description auf description

01:55.340 --> 01:57.840
und completeUntil auf date.

01:57.840 --> 02:00.760
Wir könnten all das tun, und wenn wir dann definieren,

02:00.760 --> 02:03.890
dass diese Funktion immer ein CourseGoal zurückgibt,

02:03.890 --> 02:07.120
hätten wir eine korrekt eingerichtete Funktion.

02:07.120 --> 02:08.420
Aus irgendeinem Grund machen

02:08.420 --> 02:09.530
wir das aber nicht so, wir

02:09.530 --> 02:11.623
machen das nicht alles in einem Schritt.

02:12.680 --> 02:13.870
Stattdessen möchte

02:13.870 --> 02:17.340
ich zunächst eine Variable erstellen, die ein leeres

02:17.340 --> 02:18.700
Objekt enthält.

02:18.700 --> 02:22.620
Und dann füge ich hier Schritt für Schritt meinen Titel ein.

02:22.620 --> 02:26.420
Ich möchte hier meine Beschreibung hinzufügen.

02:26.420 --> 02:31.303
Und ich möchte hier mein Datum hinzufügen.

02:33.640 --> 02:36.420
Jetzt hier bekomme ich Fehler, weil natürlich, ich kann nicht

02:36.420 --> 02:39.170
festlegen, Titel ist keine Eigenschaft dieses Objekts.

02:39.170 --> 02:41.930
Und während dies in Vanilla JavaScript funktioniert,

02:41.930 --> 02:45.410
mag TypeScript das spontane Hinzufügen nicht wirklich.

02:45.410 --> 02:47.810
Wir könnten also sagen, dass dies hier vom Typ

02:47.810 --> 02:49.300
CourseGoal sein sollte.

02:49.300 --> 02:51.040
TypeScript beschwert sich nicht darüber,

02:51.040 --> 02:53.640
sondern über die Tatsache, dass es sich um ein leeres Objekt

02:53.640 --> 02:56.223
handelt, das eindeutig nicht zu unserem Typ hier passt.

02:57.070 --> 02:58.360
Am Ende möchte ich es also zurückgeben

02:58.360 --> 03:01.000
und all diese Dinge Schritt für Schritt hinzufügen,

03:01.000 --> 03:04.570
vielleicht weil wir eine zusätzliche Validierung vor jedem Schritt haben,

03:04.570 --> 03:07.590
und deshalb muss man es so hinzufügen.

03:07.590 --> 03:12.390
Hier kann der partielle Typ sehr nützlich sein.

03:12.390 --> 03:17.390
Wir könnten sagen, dass das CourseGoal hier ein partieller Typ sein sollte, der dank der

03:17.580 --> 03:18.413
generischen Typen

03:18.413 --> 03:21.600
letztendlich ein CourseGoal enthalten wird.

03:21.600 --> 03:24.200
Damit wird TypeScript mitgeteilt, dass

03:24.200 --> 03:28.260
dies ein Objekt ist, das am Ende ein courseGoal sein wird.

03:28.260 --> 03:32.090
Aber zunächst wickelt die partielle Art unseren eigenen Typ ein und

03:32.090 --> 03:35.740
ändert ihn in einen Typ, bei dem alle diese Eigenschaften optional

03:35.740 --> 03:36.620
sind.

03:36.620 --> 03:39.440
Das ist, was teilweise tut einer dieser eingebauten Typen,

03:39.440 --> 03:40.670
Typescript liefert mit.

03:40.670 --> 03:44.270
Es wird also ein Typ daraus, der auch ein Objekttyp ist, bei dem alle Eigenschaften

03:44.270 --> 03:45.713
optional sind.

03:45.713 --> 03:49.290
Daher können wir dies zunächst auf ein leeres Objekt setzen

03:49.290 --> 03:53.030
und trotzdem all diese Dinge Schritt für Schritt hinzufügen.

03:53.030 --> 03:54.880
Das einzige Problem ist, dass wir

03:54.880 --> 03:58.130
dies am Ende nicht zurückgeben können, weil es jetzt immer

03:58.130 --> 04:02.130
noch vom Typ partial CourseGoal und nicht vom Typ CourseGoal ist.

04:02.130 --> 04:04.630
Wir können dies beheben, indem wir dies in courseGoal mit typecasting

04:04.630 --> 04:07.480
umwandeln, da wir wissen, dass wir zu diesem Zeitpunkt alle Daten hinzugefügt

04:07.480 --> 04:08.990
haben werden.

04:08.990 --> 04:11.667
Es handelt sich also um ein echtes Kursziel und nicht um ein Teilziel.

04:11.667 --> 04:13.510
Und natürlich ist das ein bisschen erfunden.

04:13.510 --> 04:15.500
Es kann aber auch Szenarien geben,

04:15.500 --> 04:18.220
in denen Sie einen Ihrer Objekttypen, eine

04:18.220 --> 04:19.650
Ihrer Schnittstellen

04:19.650 --> 04:23.530
vorübergehend auf optional umstellen wollen.

04:23.530 --> 04:25.540
Um sicherzustellen, dass alle Eigenschaften

04:25.540 --> 04:28.170
dort nur vorübergehend optional sein können.

04:28.170 --> 04:31.223
Und mit dem partiellen Typ können Sie das tun.

04:32.370 --> 04:35.920
Und nie eingebauten Utility-Typ, die Sie haben,

04:35.920 --> 04:40.170
ist der Typ nur lesen, die alle sehr nützlich sein kann.

04:40.170 --> 04:42.623
Nehmen wir an, wir haben ein Array von Namen.

04:43.460 --> 04:46.330
Und da drin habe ich Max und Sports.

04:46.330 --> 04:47.420
TypeScript folgert korrekt,

04:47.420 --> 04:49.860
dass es sich um ein String-Array handelt.

04:49.860 --> 04:50.960
Was können wir jetzt tun?

04:50.960 --> 04:52.690
Wir können natürlich Manu darauf

04:53.700 --> 04:55.400
setzen, und vielleicht sollte ich

04:55.400 --> 04:58.340
das in Anna, die keinen Sport treibt, ändern, um einen Namen

04:58.340 --> 04:59.720
darin zu haben.

04:59.720 --> 05:00.553
Das funktioniert also.

05:00.553 --> 05:01.386
Angenommen, ich möchte

05:01.386 --> 05:04.230
sicherstellen, dass es sich um ein gesperrtes Array handelt.

05:04.230 --> 05:06.260
Mehr können wir hier nicht hinzufügen.

05:06.260 --> 05:07.870
Und wir können hier immer mehr hinzufügen,

05:07.870 --> 05:11.690
aber zumindest möchte ich, dass Typescript mich anschreit, wenn ich es versuche.

05:11.690 --> 05:13.730
Nun, hier können wir den Nur-Lese-Typ

05:13.730 --> 05:18.730
verwenden, wir könnten dies auf Nur-Lese-String-Array einstellen.

05:18.930 --> 05:20.510
Damit sagen wir TypeScript, dass

05:20.510 --> 05:23.030
wir hier ein Array von Strings speichern.

05:23.030 --> 05:25.830
Aber es ist auch ein Array von Strings, das nur gelesen werden kann.

05:25.830 --> 05:28.210
Wenn wir also versuchen, mit push etwas

05:28.210 --> 05:31.600
hinzuzufügen oder mit pop etwas zu entfernen, erhalten

05:31.600 --> 05:32.760
wir Fehler, weil wir

05:32.760 --> 05:34.810
diese Dinge mit diesem Array nicht

05:34.810 --> 05:36.320
tun dürfen.

05:36.320 --> 05:38.760
Und dies ist übrigens nicht auf Arrays beschränkt,

05:38.760 --> 05:41.610
Sie können auch read only auf ein Objekt anwenden.

05:41.610 --> 05:43.990
Zum Beispiel als schreibgeschützt zu vermarkten,

05:43.990 --> 05:46.860
so dass Sie die Eigenschaften nicht ändern oder neue Eigenschaften

05:46.860 --> 05:49.920
zu diesem Objekt hinzufügen können.

05:49.920 --> 05:52.240
Das kann also sehr, sehr praktisch sein

05:52.240 --> 05:56.510
und gibt Ihnen mehr Flexibilität oder eine genauere Vorstellung

05:56.510 --> 05:59.490
davon, was Sie in Ihrem Code tun wollen.

05:59.490 --> 06:01.380
All dies sind nur Hilfstypen, die nur

06:01.380 --> 06:03.610
in der TypeScript-Welt existieren.

06:03.610 --> 06:05.881
Sie werden also nicht zu irgendetwas kompiliert.

06:05.881 --> 06:09.400
Aber während der Kompilierung geben sie Ihnen zusätzliche Strenge, oder

06:09.400 --> 06:12.410
zusätzliche Prüfungen oder überspringen bestimmte Prüfungen,

06:12.410 --> 06:14.800
wie wir es mit teilweise getan haben.

06:14.800 --> 06:17.170
Jetzt haben Sie mehr als nur Lesezugriff und Teilzugriff.

06:17.170 --> 06:19.730
Und wie bereits erwähnt, finden Sie im Anhang die Dokumentation

06:19.730 --> 06:22.420
zu einer vollständigen Liste dieser Dienstprogramme.

06:22.420 --> 06:25.580
In bestimmten Situationen können sie sehr nützlich sein, und deshalb

06:25.580 --> 06:28.350
wollte ich sie Ihnen auf keinen Fall vorenthalten.

06:28.350 --> 06:30.500
Aber stattdessen sollten Sie sie kennen, damit

06:30.500 --> 06:34.060
Sie sie verwenden können, wenn Sie etwas sperren müssen, oder wie im Fall

06:34.060 --> 06:36.980
des teilweisen Öffnens von etwas oder mit all den anderen,

06:36.980 --> 06:39.690
die ich hier nicht besprochen habe, wenn Sie eine andere

06:39.690 --> 06:42.570
Operation haben, die mit einem dieser eingebauten Dienstprogrammtypen

06:42.570 --> 06:45.140
verbessert werden kann.

06:45.140 --> 06:47.670
Und diese Hilfstypen sind alle generisch,

06:47.670 --> 06:49.170
denn sie nehmen einen

06:49.170 --> 06:52.580
anderen Wert beliebigen Typs und machen etwas

06:52.580 --> 06:54.190
mit ihm.

06:54.190 --> 06:57.970
Sie setzen alles auf optional, sperren es und kümmern sich nicht

06:57.970 --> 07:01.330
darum, ob es sich um ein Array oder ein Objekt oder ein Array

07:01.330 --> 07:04.430
von Strings, ein Array von Zahlen usw. handelt.

07:04.430 --> 07:06.000
Deshalb sind sie generisch.

07:06.000 --> 07:09.520
Und zusammen mit den oberen eingebauten Generika, die wir zuvor gesehen haben,

07:09.520 --> 07:10.790
und Ihren eigenen Generika.

07:10.790 --> 07:13.780
Dies hilft Ihnen nun hoffentlich wieder zu verstehen, warum

07:13.780 --> 07:16.793
Generika nützlich sein können und warum es sie gibt.
