WEBVTT

1
00:00:02.330 --> 00:00:04.870
<v Narrator>Speaking of more generic types,</v>

2
00:00:04.870 --> 00:00:06.970
as a little bonus, you could say,

3
00:00:06.970 --> 00:00:11.410
I wanna point your direction at a couple of built-in types.

4
00:00:11.410 --> 00:00:15.740
Typescript ships with, which utilize generic types

5
00:00:15.740 --> 00:00:17.240
or which are generic types,

6
00:00:17.240 --> 00:00:20.350
that give us certain utility functionalities.

7
00:00:20.350 --> 00:00:22.050
So just a little bonus here,

8
00:00:22.050 --> 00:00:22.920
and from time to time

9
00:00:22.920 --> 00:00:25.550
these special types might come in handy.

10
00:00:25.550 --> 00:00:26.840
Now, attached you'll find a link

11
00:00:26.840 --> 00:00:30.680
to the full documentation of all the built-in utility types.

12
00:00:30.680 --> 00:00:33.810
Here, I just wanna give you a few examples.

13
00:00:33.810 --> 00:00:36.010
Now just as all these type things,

14
00:00:36.010 --> 00:00:38.610
these types only exist in types of the world

15
00:00:38.610 --> 00:00:41.300
and therefore, only prior to compilation.

16
00:00:41.300 --> 00:00:43.460
But during this compilation step,

17
00:00:43.460 --> 00:00:48.130
they can give you extra type safety or extra flexibility.

18
00:00:48.130 --> 00:00:51.670
For example, there is the built-in partial type.

19
00:00:51.670 --> 00:00:55.580
Let's say we have a new type, and you interface which

20
00:00:55.580 --> 00:00:58.480
we will find or a custom type really doesn't matter,

21
00:00:58.480 --> 00:00:59.493
CourseGoal.

22
00:01:00.660 --> 00:01:03.780
The CourseGoal does have a title,

23
00:01:03.780 --> 00:01:06.930
which should be a string and let's say a description,

24
00:01:06.930 --> 00:01:09.040
which should all be a string.

25
00:01:09.040 --> 00:01:14.040
Maybe we also have completeUntil property, which is a Date.

26
00:01:15.290 --> 00:01:17.961
Now we wanna have a function, let's say,

27
00:01:17.961 --> 00:01:21.500
createCourseGoal, which creates us such an object.

28
00:01:21.500 --> 00:01:23.380
Of course, we could have created that class as well.

29
00:01:23.380 --> 00:01:26.290
But we have such a function because in that function,

30
00:01:26.290 --> 00:01:28.740
we might be drawing in some data from a database,

31
00:01:28.740 --> 00:01:30.590
or whatever it is.

32
00:01:30.590 --> 00:01:32.110
So we have this function.

33
00:01:32.110 --> 00:01:33.330
And in the end here,

34
00:01:33.330 --> 00:01:37.890
I want to get my title, which is a string,

35
00:01:37.890 --> 00:01:42.320
I might get my description, which is a string,

36
00:01:42.320 --> 00:01:47.150
and I hopefully get my date, which is a Date.

37
00:01:47.150 --> 00:01:49.680
Now in that function, of course, we could return an object

38
00:01:49.680 --> 00:01:51.740
but we just set up all these things.

39
00:01:51.740 --> 00:01:55.340
So where we set title to title, description to description

40
00:01:55.340 --> 00:01:57.840
and completeUntil to date.

41
00:01:57.840 --> 00:02:00.760
We could do all of that and if we then define that this

42
00:02:00.760 --> 00:02:03.890
function will always return a CourseGoal,

43
00:02:03.890 --> 00:02:07.120
we would have a correctly setup function.

44
00:02:07.120 --> 00:02:08.420
Now for some reason let's say we're

45
00:02:08.420 --> 00:02:09.530
not doing it like this though,

46
00:02:09.530 --> 00:02:11.623
we're not doing this all in one step.

47
00:02:12.680 --> 00:02:13.870
Instead, what I wanna do is,

48
00:02:13.870 --> 00:02:17.340
I wanna start by creating a variable here,

49
00:02:17.340 --> 00:02:18.700
which holds an empty object.

50
00:02:18.700 --> 00:02:22.620
And then step by step, I want to add my title here.

51
00:02:22.620 --> 00:02:26.420
I want to add my description here.

52
00:02:26.420 --> 00:02:31.303
And I want to add my date here.

53
00:02:33.640 --> 00:02:36.420
Now here I'm getting errors because of course,

54
00:02:36.420 --> 00:02:39.170
I can't set title this is not a property of this object.

55
00:02:39.170 --> 00:02:41.930
And while this works in vanilla JavaScript,

56
00:02:41.930 --> 00:02:45.410
TypeScript doesn't really like that on the fly adding here.

57
00:02:45.410 --> 00:02:47.810
So we might wanna say that this should be of type

58
00:02:47.810 --> 00:02:49.300
CourseGoal here.

59
00:02:49.300 --> 00:02:51.040
Now, TypeScript is not complaining about this,

60
00:02:51.040 --> 00:02:53.640
but about the fact that this is an empty object,

61
00:02:53.640 --> 00:02:56.223
which clearly is not fitting our type here.

62
00:02:57.070 --> 00:02:58.360
So in the end, I want to return it

63
00:02:58.360 --> 00:03:01.000 line:15% 
and I want to add all these things step by step,

64
00:03:01.000 --> 00:03:04.570 line:15% 
maybe because we have extra validation before each step,

65
00:03:04.570 --> 00:03:07.590
and therefore one to add it like this.

66
00:03:07.590 --> 00:03:12.390
Now here's where the partial type can come in handy.

67
00:03:12.390 --> 00:03:17.390
We could say the CourseGoal here should be a partial type,

68
00:03:17.580 --> 00:03:18.413
which in the end,

69
00:03:18.413 --> 00:03:21.600
thanks to generic types will hold a courseGoal.

70
00:03:21.600 --> 00:03:24.200
Now what this does is it tells TypeScript that,

71
00:03:24.200 --> 00:03:28.260
this is an object which in the end will be a courseGoal.

72
00:03:28.260 --> 00:03:32.090
But initially, partial kind of wraps our own type,

73
00:03:32.090 --> 00:03:35.740
and changes it to a type where all these properties

74
00:03:35.740 --> 00:03:36.620
are optional.

75
00:03:36.620 --> 00:03:39.440
That's what partial does one of these built-in types,

76
00:03:39.440 --> 00:03:40.670
Typescript ships with.

77
00:03:40.670 --> 00:03:44.270
So it turns this into a type, which is also an object type,

78
00:03:44.270 --> 00:03:45.713
where all the properties are optional.

79
00:03:45.713 --> 00:03:49.290
Therefore, we can set this to an empty object initially,

80
00:03:49.290 --> 00:03:53.030
and still add all these things step by step.

81
00:03:53.030 --> 00:03:54.880
The only problem is that in the end,

82
00:03:54.880 --> 00:03:58.130
we can't return this because now it's still of type

83
00:03:58.130 --> 00:04:02.130
partial CourseGoal, and not of type CourseGoal.

84
00:04:02.130 --> 00:04:04.630
We can fix this by converting this to courseGoal

85
00:04:04.630 --> 00:04:07.480
with typecasting, because we know at this point of time,

86
00:04:07.480 --> 00:04:08.990
we will have added all the data.

87
00:04:08.990 --> 00:04:11.667
So it will be a real courseGoal and not a partial one.

88
00:04:11.667 --> 00:04:13.510
And of course, this is a bit made up.

89
00:04:13.510 --> 00:04:15.500
But you could have scenarios like this,

90
00:04:15.500 --> 00:04:18.220
where you want to temporarily switch

91
00:04:18.220 --> 00:04:19.650
one of your object types,

92
00:04:19.650 --> 00:04:23.530
one of your interfaces to be optional only.

93
00:04:23.530 --> 00:04:25.540
To make sure that all the properties in there

94
00:04:25.540 --> 00:04:28.170
can be optional only temporarily.

95
00:04:28.170 --> 00:04:31.223
And then the partial type would allow you to do that.

96
00:04:32.370 --> 00:04:35.920
And never built-in utility type which you have

97
00:04:35.920 --> 00:04:40.170
is the read only type that can all be very useful.

98
00:04:40.170 --> 00:04:42.623
Let's say we have an array of names.

99
00:04:43.460 --> 00:04:46.330
And in there I got Max and Sports.

100
00:04:46.330 --> 00:04:47.420
Now, correctly TypeScript

101
00:04:47.420 --> 00:04:49.860
infers that this is a string array.

102
00:04:49.860 --> 00:04:50.960
Now what can we do?

103
00:04:50.960 --> 00:04:52.690
We can of course push

104
00:04:53.700 --> 00:04:55.400
Manu on there,

105
00:04:55.400 --> 00:04:58.340
and probably I should change this to Anna not sports

106
00:04:58.340 --> 00:04:59.720
to have a name in there.

107
00:04:59.720 --> 00:05:00.553
So this works.

108
00:05:00.553 --> 00:05:01.386
Now let's say however,

109
00:05:01.386 --> 00:05:04.230
I want to make sure that this is a locked array.

110
00:05:04.230 --> 00:05:06.260
We can't add more here.

111
00:05:06.260 --> 00:05:07.870
And we can always add more here,

112
00:05:07.870 --> 00:05:11.690
but at least I want Typescript to yell at me if I try it.

113
00:05:11.690 --> 00:05:13.730
Well, that's where we can use the read only type,

114
00:05:13.730 --> 00:05:18.730
we could set this to read only string array.

115
00:05:18.930 --> 00:05:20.510
With that we tell TypeScript,

116
00:05:20.510 --> 00:05:23.030
well, what we store here is, it's an array of strings.

117
00:05:23.030 --> 00:05:25.830
But it's also an array of strings, which is read only.

118
00:05:25.830 --> 00:05:28.210
So when we try to add something with push,

119
00:05:28.210 --> 00:05:31.600
or if we try to remove something with pop,

120
00:05:31.600 --> 00:05:32.760
we get errors,

121
00:05:32.760 --> 00:05:34.810
because we're not allowed to do these things

122
00:05:34.810 --> 00:05:36.320
with this array.

123
00:05:36.320 --> 00:05:38.760
And this is not limited to arrays by the way,

124
00:05:38.760 --> 00:05:41.610
you can also use read only on an object.

125
00:05:41.610 --> 00:05:43.990
For example, to market as read only,

126
00:05:43.990 --> 00:05:46.860
so that you are not allowed to change the properties

127
00:05:46.860 --> 00:05:49.920
or add new properties to this object.

128
00:05:49.920 --> 00:05:52.240
So this can also be very, very handy

129
00:05:52.240 --> 00:05:56.510
and give you more flexibility or be more precise

130
00:05:56.510 --> 00:05:59.490
about what you're aiming to do in your code.

131
00:05:59.490 --> 00:06:01.380
Now, all these are just utility types

132
00:06:01.380 --> 00:06:03.610
that only exist in TypeScript world.

133
00:06:03.610 --> 00:06:05.881
So they're not compiled to anything.

134
00:06:05.881 --> 00:06:09.400
But during compilation, they give you extra strictness,

135
00:06:09.400 --> 00:06:12.410
or extra checks or skip certain checks

136
00:06:12.410 --> 00:06:14.800
as we did it with partial.

137
00:06:14.800 --> 00:06:17.170
Now you've got more than read only and partial.

138
00:06:17.170 --> 00:06:19.730
And as I mentioned attached you find the documentation to a

139
00:06:19.730 --> 00:06:22.420
full list of these utility types.

140
00:06:22.420 --> 00:06:25.580
In certain scenarios, they can come in really handy,

141
00:06:25.580 --> 00:06:27.460
and therefore, I definitely did not want

142
00:06:27.460 --> 00:06:28.350
to hide them from you.

143
00:06:28.350 --> 00:06:30.500
But instead, you should be aware of them so that

144
00:06:30.500 --> 00:06:34.060
you can use them when you need to lock something down,

145
00:06:34.060 --> 00:06:36.980
or as in the case of partial open anything up

146
00:06:36.980 --> 00:06:39.690
or with all the other ones which I didn't discuss here,

147
00:06:39.690 --> 00:06:42.570
if you've got some other operation which can be enhanced

148
00:06:42.570 --> 00:06:45.140
with one of these built-in utility types.

149
00:06:45.140 --> 00:06:47.670
And these utility types are all generic,

150
00:06:47.670 --> 00:06:49.170
because what they do is

151
00:06:49.170 --> 00:06:52.580
they take some other value which is of any type

152
00:06:52.580 --> 00:06:54.190
and do something with it.

153
00:06:54.190 --> 00:06:57.970
They set everything to optional, they lock it down,

154
00:06:57.970 --> 00:07:01.330
not caring about whether this is an array or object

155
00:07:01.330 --> 00:07:04.430
or an array of strings, array of numbers, and so on.

156
00:07:04.430 --> 00:07:06.000
That's why these are generic.

157
00:07:06.000 --> 00:07:09.520
And together with the upper built-in generics we saw earlier

158
00:07:09.520 --> 00:07:10.790
and your own generics.

159
00:07:10.790 --> 00:07:13.780
This now hopefully all again helps you understand

160
00:07:13.780 --> 00:07:16.793
why generics can be useful in why they exist.

