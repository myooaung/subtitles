WEBVTT

00:02.310 --> 00:04.270
教师：所以我们使用ES模块｡ 

00:04.270 --> 00:06.470
事实证明, 导出和导入语法有一些变化,

00:06.470 --> 00:10.100
您应该注意这些变化｡

00:10.100 --> 00:12.276
例如, 您可以捆绑导入｡ 

00:12.276 --> 00:14.300
比如在项目输入中,

00:14.300 --> 00:18.060
我从验证文件导入两个内容｡

00:18.060 --> 00:25.493
你可能想把所有这些组合到一个对象中, 然后你可以调用点validatable和点validate,

00:25.493 --> 00:29.170
这样你就不必像这样调用validate了｡

00:29.170 --> 00:30.940
也许你想这样称呼它,

00:30.940 --> 00:33.510
但是如果你有一个同名的, 年份的函数,

00:33.510 --> 00:42.069
或者类似的函数, 你想避免名字冲突, 或者你想清楚地表明它属于某个包, 你可以把它分组.

00:42.069 --> 00:45.090
要对导入进行分组, 您不能像这样用大括号导入它们,

00:45.090 --> 00:49.150
而是在这里使用一个星号, 表示导入该文件中的所有内容,

00:49.150 --> 00:51.970
as, 然后是您选择的任何别名,

00:51.970 --> 00:57.192
例如, validation｡

00:57.192 --> 01:01.070
现在, 您必须转到使用该文件中的某些内容的地方,

01:01.070 --> 01:05.470
并将其用作对象验证｡ 可验证的

01:05.470 --> 01:07.920
因此, 在该文件中导出的所有内容,

01:07.920 --> 01:12.341
现在您将其分组在此名称下, 通过点符号访问｡

01:12.341 --> 01:15.700
所以验证｡  一直都是可验证的, 下面还有validate函数,

01:15.700 --> 01:22.786
当然是验证｡

01:22.786 --> 01:22.786
验证, 验证｡  验证和确认｡

01:22.786 --> 01:25.197
验证｡ 

01:25.197 --> 01:29.604
你会看到, 验证是有效的｡ 

01:29.604 --> 01:32.490
所以分组是你可以做的一件事｡ 

01:32.490 --> 01:36.890
一般情况下, 您也可以使用别名｡

01:36.890 --> 01:38.830
你不喜欢这样的自动绑定,

01:38.830 --> 01:41.270
你想在开头有一个大写字母吗？

01:41.270 --> 01:45.360
您可以简单地在这里用as关键字指定alias｡ 

01:45.360 --> 01:48.150
在花括号内, 您也可以使用它｡ 

01:48.150 --> 01:50.431
然后重命名此导入, 且仅重命名此导入｡ 

01:50.431 --> 01:54.350
当然, 您不会在原始文件中重命名它｡ 

01:54.350 --> 01:58.390
它只是以不同的名称导入到这里的文件中｡ 

01:58.390 --> 02:01.280
所以现在, 我们必须使用大写字母A的别名,

02:01.280 --> 02:05.780
而不是使用小写字母A的自动绑定｡

02:05.780 --> 02:09.150
因此, 这是另一个很好的特性, 可以避免名称冲突, 例如,

02:09.150 --> 02:11.570
如果在同一个文件中有另一个名为autobind的文件,

02:11.570 --> 02:14.543
其中包含小写的a｡

02:16.180 --> 02:20.010
也可以使用默认导出｡ 

02:20.010 --> 02:22.926
如果你有一个只导出一个东西的文件,

02:22.926 --> 02:25.120
比如说基础组件｡

02:25.120 --> 02:28.020
实际上, 我们有很多文件只导出一个内容｡ 

02:28.020 --> 02:29.240
但在这个文件中,

02:29.240 --> 02:37.330
我们不想这样导出, 也就是所谓的命名导出, 因为我们是按大括号中的名称导入的.

02:37.330 --> 02:40.258
我们需要使用我们在这里使用的确切名称｡ 

02:40.258 --> 02:45.140
如果您不想这样做, 只需添加另一个关键字default｡

02:45.140 --> 02:48.940
这告诉JavaScript这是这个文件的主要的,

02:48.940 --> 02:52.064
默认的导出｡

02:52.064 --> 02:58.500
您仍然可以在此处使用其他允许的已命名导出｡

02:58.500 --> 03:02.120
哎呀, 比如这里的一个常数, 它是允许的｡

03:02.120 --> 03:06.130
可以在同一文件中混合使用命名输出与默认输出,

03:06.130 --> 03:07.800
但如果使用默认输出,

03:07.800 --> 03:11.440
则每个文件只能有一个默认输出｡

03:11.440 --> 03:14.210
这里我有我的默认导出, 现在在我导入的文件中,

03:14.210 --> 03:16.926
你不按名称导入它｡

03:16.926 --> 03:19.900
只能按名称导入命名导出｡ 

03:19.900 --> 03:22.639
比如说, 那东西不断的加上去｡ 

03:22.639 --> 03:24.743
您现在只需选择任意名称即可导入默认值,

03:24.743 --> 03:32.400
该名称不必与导出文件中使用的名称相匹配｡

03:32.400 --> 03:34.354
所以现在不必使用组件｡ 

03:34.354 --> 03:37.037
你可以用Cmp来举例｡ 

03:37.037 --> 03:40.700
然后像这样导入, 不带花括号｡ 

03:40.700 --> 03:44.127
也没有星星, 所以我没有进口一切｡ 

03:44.127 --> 03:46.827
我只是导入默认值｡ 

03:46.827 --> 03:49.460
因此, 仅当从中导入的文件具有默认导出时,

03:49.460 --> 03:52.210
此选项才可用｡

03:52.210 --> 03:53.850
因为这告诉JavaScript,

03:53.850 --> 03:58.010
我想使用这个文件的默认导出.

03:58.010 --> 04:00.520
当然, 我可以将其命名为Cmp｡ 

04:00.520 --> 04:02.569
或者, 我必须使用Cmp, 当然现在｡ 

04:02.569 --> 04:06.666
组件不再被允许, 因为我没有按该名称导入它｡

04:06.666 --> 04:10.675
当然, 我们现在还需要在project-item和project-list中对此进行调整｡

04:10.675 --> 04:12.486
我们使用默认导出｡ 

04:12.486 --> 04:14.515
我将在这里坚持使用组件, 但您不必这样做,

04:14.515 --> 04:16.540
正如我刚才所示｡

04:16.540 --> 04:18.300
您可以在这里使用任何名称,

04:18.300 --> 04:21.900
但是为了简单起见, 我在这里使用component｡

04:21.900 --> 04:25.740
如果每个文件只有一个内容, 那么默认导出会很好｡

04:25.740 --> 04:29.080
我个人更喜欢命名的导出, 因为你可以自动完成,

04:29.080 --> 04:31.075
你强制一个明确的命名模式,

04:31.075 --> 04:37.290
如果另一个开发人员导入你的类或你导出的东西, 他必须使用你的名字,

04:37.290 --> 04:46.579
这通常是好的, 因为这允许你在团队或组织中强制某些命名约定｡

04:46.579 --> 04:51.740
因此, 我个人喜欢命名导出, 但当然您也应该知道默认导出,

04:51.740 --> 04:54.853
您可以这样使用它｡
