WEBVTT

00:02.260 --> 00:03.960
Istruttore: Con questo, abbiamo quasi finito

00:03.960 --> 00:04.920
con i tipi fondamentali.

00:04.920 --> 00:07.470
Esiste un altro tipo, che abbiamo già

00:07.470 --> 00:09.390
visto, ed è il tipo any.

00:09.390 --> 00:11.480
Il tipo any è il tipo più flessibile che si

00:11.480 --> 00:13.310
possa assegnare in TypeScript.

00:13.310 --> 00:16.710
Questo tipo non dice nulla a TypeScript.

00:16.710 --> 00:19.960
In pratica, significa che è possibile memorizzare qualsiasi tipo di valore.

00:19.960 --> 00:22.031
Non abbiamo un'assegnazione di tipo specifico.

00:22.031 --> 00:25.260
TypeScript non vi sgriderà mai quando

00:25.260 --> 00:27.040
ne usate uno.

00:27.040 --> 00:28.030
Nel nostro codice,

00:28.030 --> 00:31.360
se impostassi il tipo di attività preferita su qualsiasi,

00:31.360 --> 00:32.870
non otterrei un errore.

00:32.870 --> 00:36.580
Se lo imposta su un array qualsiasi, almeno dico a TypeScript che le

00:36.580 --> 00:39.220
attività preferite sono un array di qualcosa.

00:39.220 --> 00:41.460
Quindi, se volessi memorizzare un solo valore,

00:41.460 --> 00:42.830
otterrei un errore.

00:42.830 --> 00:44.500
Ma finché si tratta di un array,

00:44.500 --> 00:46.638
posso memorizzarvi quello che voglio.

00:46.638 --> 00:49.840
Quindi, qualsiasi cosa è davvero flessibile.

00:49.840 --> 00:52.070
Questo può sembrare fantastico all'apparenza,

00:52.070 --> 00:54.060
ma in realtà è un grosso svantaggio

00:54.060 --> 00:58.290
e va assolutamente evitato quando possibile.

00:58.290 --> 01:00.170
Perché qualsiasi cosa toglie praticamente

01:00.170 --> 01:02.512
tutti i vantaggi offerti da TypeScript.

01:02.512 --> 01:04.380
Si ha la stessa esperienza che

01:04.380 --> 01:06.430
si ha con JavaScript vanilla, dove

01:06.430 --> 01:10.480
si deve anche digitare qualsiasi cosa su tutto, per così dire.

01:10.480 --> 01:13.820
Any fa in modo che il compilatore TypeScript non possa

01:13.820 --> 01:16.020
controllare nulla, perché se qualsiasi

01:16.020 --> 01:19.180
proprietà o variabile può memorizzare qualsiasi

01:19.180 --> 01:20.818
valore, allora non c'è molto

01:20.818 --> 01:23.687
da controllare, giusto?

01:23.687 --> 01:27.130
Quindi si può usare qualsiasi come ripiego se si hanno alcuni

01:27.130 --> 01:30.270
valori, alcuni tipi di dati per i quali non si può sapere

01:30.270 --> 01:31.810
quale tipo di dati sarà memorizzato

01:31.810 --> 01:33.820
e per i quali si utilizzano alcuni

01:33.820 --> 01:37.050
controlli di runtime, come abbiamo fatto qui, in fase

01:37.050 --> 01:40.440
di esecuzione per restringere il campo di azione per alcuni

01:40.440 --> 01:42.660
valori.

01:42.660 --> 01:44.600
Allora si può scegliere qualsiasi cosa.

01:44.600 --> 01:48.210
Ma in altri casi, è meglio evitare di farlo.

01:48.210 --> 01:51.120
Se avete la possibilità di sapere con quale tipo di dati

01:51.120 --> 01:54.090
state lavorando, siate espliciti al riguardo.

01:54.090 --> 01:56.780
Lasciare che l'inferenza di TypeScript faccia il suo lavoro

01:56.780 --> 01:58.817
o impostare esplicitamente i propri tipi.

01:58.817 --> 02:01.783
Non ricorrete a nessuno se non è necessario.
