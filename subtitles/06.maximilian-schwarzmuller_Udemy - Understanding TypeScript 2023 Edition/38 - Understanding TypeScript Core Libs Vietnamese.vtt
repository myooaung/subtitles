WEBVTT

00:02.190 --> 00:03.570
-: Chúng tôi cũng có mô-đun ở đây.

00:03.570 --> 00:06.050
Bây giờ, mô-đun là một tùy chọn mà tôi sẽ bỏ qua

00:06.050 --> 00:07.540
ngay bây giờ, vì nó thực sự chỉ

00:07.540 --> 00:10.830
có ý nghĩa khi chúng ta tìm hiểu về các mô-đun trong TypeScript

00:10.830 --> 00:13.400
và cách chúng ta có thể kết nối nhiều tệp.

00:13.400 --> 00:15.350
Vì vậy, bây giờ chúng ta hãy bỏ qua điều đó.

00:15.350 --> 00:17.250
Lib là một điều thú vị mặc dù.

00:17.250 --> 00:20.890
Lib là một tùy chọn cho phép bạn chỉ định những

00:20.890 --> 00:25.650
đối tượng và tính năng mặc định nào mà TypeScript biết.

00:25.650 --> 00:28.580
Ý tôi là những thứ như làm việc với dom.

00:28.580 --> 00:31.930
Giả sử trong index. html, chúng tôi có một nút và trên nút

00:31.930 --> 00:33.700
này, chúng tôi nói, "Nhấp vào tôi. Bây giờ, khi chúng tôi nhấp vào nút này,

00:33.700 --> 00:35.100
chúng tôi chỉ muốn in tin nhắn.

00:35.100 --> 00:36.610
Bây giờ, trong ứng dụng. ts chúng ta có thể chọn nút này.

00:36.610 --> 00:39.820
Chúng tôi có thể truy cập vào

00:39.820 --> 00:41.420
nút này bằng tài liệu. querySelector.

00:43.808 --> 00:44.641
Ví dụ, chọn nút đầu tiên chúng tôi tìm thấy.

00:44.641 --> 00:48.130
Bây giờ nếu chúng ta làm điều đó thì nó hoạt động.

00:48.130 --> 00:51.580
Chúng tôi không nhận được loại lỗi nào ở đây.

00:51.580 --> 00:53.000
Vì vậy, nếu tôi đi đến nút của

00:53.000 --> 00:58.000
mình và thêm một EventListener ở đây, tôi thực sự gặp lỗi ở đây vì TypeScript không biết chắc

00:58.390 --> 01:00.990
liệu chúng ta có tìm thấy nút ở đây hay không.

01:00.990 --> 01:04.010
Hiện tại, chúng ta có thể giải quyết vấn đề đó bằng một dấu

01:04.010 --> 01:07.310
chấm than, sau dòng này và tôi sẽ quay lại chính xác điều này sẽ

01:07.310 --> 01:08.860
làm gì trong tương lai.

01:08.860 --> 01:11.320
Về cơ bản, nó nói với TypeScript, "Đừng

01:11.320 --> 01:13.667
lo lắng", một nút như vậy sẽ tồn tại.

01:13.667 --> 01:15.097
"Chúng tôi sẽ nhận được một giá trị ở đây. Vì vậy, bây giờ chúng ta có thể thêm một sự kiện nhấp chuột ở đây.

01:15.097 --> 01:17.360
Và sau đó tìm một số chức năng ẩn

01:17.360 --> 01:19.470
danh có thể ở nơi console. đã nhấp vào nhật ký.

01:19.470 --> 01:21.670
Bây giờ, điều thú vị ở đây không nhiều đến mức

01:21.670 --> 01:24.920
tôi phải thêm dấu chấm than, như

01:24.920 --> 01:26.450
tôi đã nói là tôi sẽ quay lại vấn

01:26.450 --> 01:29.310
đề đó, nhưng nếu tôi chạy tsc thì nó chỉ biên dịch.

01:29.310 --> 01:31.150
Bây giờ, TypeScript có nên

01:31.150 --> 01:34.840
phàn nàn rằng tài liệu không xác định ở đây không?

01:34.840 --> 01:38.370
Làm thế nào để nó biết rằng chúng ta có sẵn một tài liệu, hằng

01:38.370 --> 01:39.690
hoặc biến như vậy?

01:39.690 --> 01:43.290
Làm thế nào để nó biết rằng ngay cả khi chúng ta có sẵn nó

01:43.290 --> 01:45.610
thì nó vẫn giữ một đối tượng có phương

01:45.610 --> 01:48.350
thức querySelector của chúng ta?

01:48.350 --> 01:50.010
Làm cách nào để biết nút đó là thứ có

01:50.010 --> 01:51.690
phương thức addEventListener?

01:51.690 --> 01:55.932
Làm thế nào để TypeScript biết tất cả những điều đó?

01:55.932 --> 01:57.120
Bây giờ bạn có thể nói, "Tất nhiên nó biết. Bởi vì trong Vanilla JavaScript,

01:57.120 --> 01:59.290
đây sẽ là mã hợp lệ nhưng hãy nhớ rằng khi bạn viết

01:59.290 --> 02:01.430
mã TypeScript, bạn không nhất thiết phải viết

02:01.430 --> 02:03.290
mã đó cho trình duyệt.

02:03.290 --> 02:05.580
Bạn có thể đang viết Node. js với TypeScript

02:05.580 --> 02:08.080
và thực sự điều này

02:08.080 --> 02:11.310
sẽ không hoạt động.

02:11.310 --> 02:13.200
Vì vậy, lý do tại sao tùy chọn

02:13.200 --> 02:14.630
này hoạt động là tùy chọn lib này và như bạn thấy,

02:14.630 --> 02:18.280
nó thậm chí không được đặt ở đây, nhưng nếu nó không được đặt thì một số giá trị mặc định sẽ được giả định.

02:18.280 --> 02:21.940
Nếu giá trị mặc định không được đặt tùy thuộc vào mục

02:21.940 --> 02:24.420
tiêu JavaScript của bạn tại đây và

02:24.420 --> 02:28.180
đối với es6, theo mặc định, nó bao gồm tất cả các tính

02:28.180 --> 02:31.536
năng khả dụng trên toàn cầu trong es6.

02:31.536 --> 02:33.270
Ví dụ: đối tượng Bản đồ có sẵn trong es6.

02:33.270 --> 02:35.940
Do đó, sẽ không có gì phàn nàn nếu bạn sử dụng Bản đồ.

02:35.940 --> 02:40.120
Vì vậy, nó giả định rằng tất cả các tính năng của es6

02:40.120 --> 02:45.120
có sẵn trên toàn cầu trong JavaScript, rằng chúng cũng có

02:46.400 --> 02:48.700
sẵn trong TypeScript.

02:50.677 --> 02:51.780
Ngoài ra, nó giả định

02:51.780 --> 02:54.530
rằng tất cả các API DOM đều khả dụng.

02:54.530 --> 02:57.070
Nhân tiện, bạn sẽ tìm thấy các mô tả chi tiết về tất

02:57.070 --> 03:00.670
cả các tùy chọn này trong hộp chính thức được liên kết trong bài giảng

03:00.670 --> 03:01.740
ở cuối mô-đun này.

03:01.740 --> 03:04.550
Vì vậy, tóm lại, nếu tùy chọn lib không được đặt, một

03:04.550 --> 03:07.300
số giá trị mặc định sẽ được giả định và đây thường là

03:07.300 --> 03:09.490
những giá trị mặc định bạn cần để TypeScript

03:09.490 --> 03:11.520
chạy trong trình duyệt.

03:11.520 --> 03:13.760
Vì vậy, tất cả API của DOM đã biến mất.

03:13.760 --> 03:16.030
Nếu chúng tôi nhận xét điều này trong

03:16.030 --> 03:19.014
và bây giờ tôi biên dịch mọi thứ, tôi chắc chắn gặp

03:19.014 --> 03:20.670
lỗi, vì bây giờ họ đang nhận

03:20.670 --> 03:24.780
xét nó trong đó chúng tôi không còn cài đặt mặc định nữa.

03:24.780 --> 03:26.010
Thay vào đó, bây giờ chúng ta nói, "Này,

03:26.010 --> 03:28.050
vui lòng bao gồm" một số thư viện mặc định," một số định nghĩa kiểu

03:28.050 --> 03:30.370
mặc định mà bạn có thể nói, mà tôi sẽ cung cấp cho bạn trong mảng này.

03:30.370 --> 03:32.437
Và, như bạn thấy, tôi không chuyển

03:32.437 --> 03:36.330
bất kỳ mô tả nào, bất kỳ đường dẫn nào, bất kỳ giá trị nào ở đây.

03:36.330 --> 03:39.470
Và do đó, những gì tôi đang nói với TypeScript bây giờ

03:39.470 --> 03:43.213
là, "Này, về tất cả các giá trị mặc định, bạn biết đấy," hãy tính

03:44.162 --> 03:45.050
đến điều này. Và, bạn biết đấy, không có gì.

03:45.050 --> 03:46.920
Vì vậy, chỉ khi điều đó được nhận xét, thì nó

03:46.920 --> 03:50.037
mới hoạt động, vì khi đó TypeScript sẽ nhận một số giá trị mặc định.

03:50.037 --> 03:51.770
Nếu tôi đặt mặc định một cách rõ ràng,

03:51.770 --> 03:53.580
thì dĩ nhiên, TypeScript sẽ tuân thủ

03:53.580 --> 03:55.300
những gì tôi đang đặt ở đây.

03:55.300 --> 03:57.410
Và ở đây chẳng hạn, nó không biết tài liệu,

03:57.410 --> 03:59.740
Nó thậm chí không biết bảng điều khiển ở đây.

03:59.740 --> 04:01.600
Vì vậy, do đó, chúng tôi muốn đặt hai giá

04:01.600 --> 04:02.680
trị hợp lý hơn này và một

04:02.680 --> 04:05.410
lần nữa, nếu bạn nhấn vào không gian điều khiển và ở đây bạn

04:05.410 --> 04:07.343
sẽ nhận được tự động hoàn thành.

04:08.900 --> 04:10.930
Ví dụ, ở đó chúng ta có thể thêm dom.

04:10.930 --> 04:12.360
Đó là một mã định danh và có một số mã định danh được

04:12.360 --> 04:13.800
xác định trước mà TypeScript hiểu được, một lần nữa,

04:13.800 --> 04:15.800
bạn sẽ tìm thấy một danh sách đầy đủ trong các tài liệu chính thức.

04:15.800 --> 04:18.280
Các tài liệu cho tùy chọn này cũng

04:18.280 --> 04:21.070
được đính kèm với bài giảng này.

04:21.070 --> 04:22.840
Vì vậy, đây là mã định danh mà TypeScript

04:22.840 --> 04:26.070
hiểu được và đó là mã định danh về cơ bản sẽ mở khóa tất cả các API

04:26.070 --> 04:27.750
DOM trong TypeScript, để TypeScript

04:27.750 --> 04:30.100
hiểu bạn đang làm gì ở đây.

04:30.100 --> 04:32.680
Vì vậy, bây giờ, bạn đã thấy nó biết bảng

04:32.680 --> 04:35.150
điều khiển, nó biết tài liệu, v.v.

04:35.150 --> 04:37.040
Vì vậy, bây giờ vì chúng tôi đang làm

04:37.040 --> 04:40.100
việc với JavaScript thế hệ tiếp theo, chúng tôi cũng nên

04:40.100 --> 04:42.550
thêm tùy chọn es6 để TypeScript cũng hiểu được

04:42.550 --> 04:45.400
tất cả các tùy chọn es6 có sẵn trên toàn cầu.

04:45.400 --> 04:47.896
Và bạn cũng nên thêm dom. iterable và

04:47.896 --> 04:50.830
scripthost.

04:50.830 --> 04:54.130
Với điều đó ở đây, chúng tôi sẽ mở khóa tất cả các tính năng JavaScript

04:54.130 --> 04:56.540
cốt lõi mà bạn muốn hoạt động và nhân tiện, đây là

04:56.540 --> 05:00.620
thiết lập mặc định chính xác mà bạn nhận được

05:00.620 --> 05:02.530
khi đặt mục tiêu thành es6.

05:02.530 --> 05:05.250
Vì vậy, nếu bạn nhận xét điều này trong và thiết lập nó

05:05.250 --> 05:07.360
như thế này, thì bạn có hành vi chính xác giống

05:07.360 --> 05:09.980
như thể bạn hoàn toàn không chỉ định lib.

05:09.980 --> 05:13.550
Bây giờ, ở đây tôi sẽ nhận xét rằng mặc dù và với điều

05:13.550 --> 05:15.860
đó, điều này sẽ biên dịch.

05:15.860 --> 05:17.959
Một lần nữa, cài đặt này hơi thừa,

05:17.959 --> 05:20.920
chỉ muốn giải thích những gì nó làm.
