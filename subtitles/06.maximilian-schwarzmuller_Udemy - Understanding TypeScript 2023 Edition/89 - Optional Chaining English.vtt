WEBVTT

1
00:00:02.450 --> 00:00:05.030
<v Instructor>Let's step away from function overloads now</v>

2
00:00:05.030 --> 00:00:09.010
and let me introduce one other very neat feature.

3
00:00:09.010 --> 00:00:13.350
And that is optional chaining.

4
00:00:13.350 --> 00:00:16.720
Let's say you have an application where you're getting

5
00:00:16.720 --> 00:00:21.603
data from a backend from a database or from any source

6
00:00:21.603 --> 00:00:26.350
where you don't know with certainty if in an object

7
00:00:26.350 --> 00:00:29.500
a certain property is defined.

8
00:00:29.500 --> 00:00:33.920
Let's say we have fetchedUserData and fetchedUserData

9
00:00:33.920 --> 00:00:36.380
could be an object about a user we fetched.

10
00:00:36.380 --> 00:00:39.705
There we might have an ID we might have a name Max

11
00:00:39.705 --> 00:00:44.705
and we also might expect another property job which is

12
00:00:45.730 --> 00:00:50.550
an object which has a title and which then also has

13
00:00:50.550 --> 00:00:53.950
a description, my own company.

14
00:00:53.950 --> 00:00:56.900
Now if we get data like this of course we can work with it.

15
00:00:56.900 --> 00:01:00.150
Now you might do more complex things but here for a start

16
00:01:00.150 --> 00:01:03.940
let's say all I'm doing is I'm actually uploading

17
00:01:03.940 --> 00:01:06.871
the job title here right.

18
00:01:06.871 --> 00:01:09.940
Now if we saved that with our development server up

19
00:01:09.940 --> 00:01:12.880
and running and compilation running in watch mode,

20
00:01:12.880 --> 00:01:14.420
I get CEO here.

21
00:01:14.420 --> 00:01:17.395
Now that's far that's not too fancy, however,

22
00:01:17.395 --> 00:01:22.395
if we are fetching this from a backend, for whatever reason

23
00:01:23.080 --> 00:01:27.690
maybe we don't fetch all the data we need, maybe some data

24
00:01:27.690 --> 00:01:30.490
is not set at this point.

25
00:01:30.490 --> 00:01:34.730
In bigger more complex applications you certainly sometimes

26
00:01:34.730 --> 00:01:39.240
work with structured with nested data where you don't know

27
00:01:39.240 --> 00:01:42.650
with certainty if some property on an object is set

28
00:01:42.650 --> 00:01:45.340
or if it's maybe undefined.

29
00:01:45.340 --> 00:01:49.680
So here let's say job does not exist here for whatever

30
00:01:49.680 --> 00:01:53.180
reason we're not fetching it, here of course I get an error

31
00:01:53.180 --> 00:01:55.930
now TypeScript complains about this because it knows that

32
00:01:55.930 --> 00:01:57.843
there is no job property now.

33
00:01:57.843 --> 00:02:01.347
The problem is it knows for this data it wouldn't know

34
00:02:01.347 --> 00:02:05.660
if that were data we're fetching from some file that's

35
00:02:05.660 --> 00:02:09.720
not controlled from TypeScript or as I just said if we're

36
00:02:09.720 --> 00:02:12.530
maybe fetching this from the backend and we don't know

37
00:02:12.530 --> 00:02:15.550
with certainty which data will be returned.

38
00:02:15.550 --> 00:02:18.150
Now if you wouldn't know whether that's defined or not,

39
00:02:18.150 --> 00:02:21.730
what we can do in regular JavaScript is we can try to access

40
00:02:21.730 --> 00:02:25.098
job and if that works we continue and we access title.

41
00:02:25.098 --> 00:02:29.450
This is the JavaScript way of checking whether something

42
00:02:29.450 --> 00:02:33.520
exists before we then dive deeper into that potential

43
00:02:33.520 --> 00:02:37.110
object and if that is undefined, this code never runs

44
00:02:37.110 --> 00:02:39.400
and hence we have wider run time error.

45
00:02:39.400 --> 00:02:42.410
Again here TypeScript of course knows that job does not

46
00:02:42.410 --> 00:02:45.180
exist, but if this would be fetched from some source

47
00:02:45.180 --> 00:02:48.470
where TypeScript can't look into like the result of a HTTP

48
00:02:48.470 --> 00:02:52.910
request, this would be the secure way of avoiding run time

49
00:02:52.910 --> 00:02:54.920
errors in JavaScript.

50
00:02:54.920 --> 00:02:58.110
Now if this does exist we get the same output as before.

51
00:02:58.110 --> 00:03:01.400
If it does not exist, we don't get a run time error

52
00:03:01.400 --> 00:03:02.233
at least.

53
00:03:02.233 --> 00:03:07.020
With TypeScript, you actually got a nicer way of doing that.

54
00:03:07.020 --> 00:03:10.520
You got the optional chaining operator.

55
00:03:10.520 --> 00:03:15.320
You can add a question mark after the thing you're not sure

56
00:03:15.320 --> 00:03:16.880
whether it's defined or not.

57
00:03:16.880 --> 00:03:21.600
At least if you're using TypeScript version 3.7 or higher.

58
00:03:21.600 --> 00:03:24.770
Here my IDE doesn't like this, but this is a supported

59
00:03:24.770 --> 00:03:26.300
syntax then.

60
00:03:26.300 --> 00:03:30.370
This tells TypeScript does this exist, if it does access job

61
00:03:30.370 --> 00:03:33.450
and hence here we can add that question mark and therefore

62
00:03:33.450 --> 00:03:36.314
only access title if job is defined.

63
00:03:36.314 --> 00:03:39.300
Now if we do that I still get an error here if I try

64
00:03:39.300 --> 00:03:42.490
to compile it because TypeScript still knows with certainty

65
00:03:42.490 --> 00:03:44.510
that job does not exist.

66
00:03:44.510 --> 00:03:47.370
But if it wouldn't know that or if I comment this in

67
00:03:47.370 --> 00:03:51.840
this compiles just fine and all that executes as before.

68
00:03:51.840 --> 00:03:56.400
So this optional chaining operator here helps us safely

69
00:03:56.400 --> 00:04:00.730
access nested properties and nested objects in our object

70
00:04:00.730 --> 00:04:03.610
data and if the thing in front of the question mark

71
00:04:03.610 --> 00:04:07.061
is undefined it will not access the thing thereafter

72
00:04:07.061 --> 00:04:10.910
and therefore will not throw a runtime error but instead

73
00:04:10.910 --> 00:04:12.420
it will just not continue.

74
00:04:12.420 --> 00:04:15.210
So behind the scenes this is basically compiled to an if

75
00:04:15.210 --> 00:04:18.380
check which checks whether that exists before it tries

76
00:04:18.380 --> 00:04:19.213
to access this.

