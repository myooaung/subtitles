WEBVTT

00:02.440 --> 00:04.260
-: Bevor wir in weitere Beispiele eintauchen,

00:04.260 --> 00:05.433
sollten wir die Reihenfolge

00:05.433 --> 00:07.940
verstehen, in der die Dekoratoren durchlaufen.

00:07.940 --> 00:10.530
Und hier ist es wichtig zu verstehen, dass sie

00:10.530 --> 00:11.950
zunächst einmal alle laufen,

00:11.950 --> 00:13.710
ohne dass wir dieses Produkt

00:13.710 --> 00:15.396
instanziieren.

00:15.396 --> 00:16.600
Oder anders ausgedrückt:

00:16.600 --> 00:18.300
Wenn ich hier ein Produkt

00:18.300 --> 00:19.670
mit dem neuen Produkt

00:19.670 --> 00:21.233
Buch für 19 Dollar anlege

00:21.233 --> 00:24.563
und hier ein weiteres Produkt, Buch zwei für 29

00:24.563 --> 00:26.660
Dollar.

00:26.660 --> 00:27.887
dies erfüllt ohne Fehler

00:27.887 --> 00:29.970
meiner Dekorator-Code hier nicht

00:29.970 --> 00:31.730
mehr oft laufen.

00:31.730 --> 00:35.350
Es kommt also nicht auf die Instanziierung dieser Klasse an.

00:35.350 --> 00:36.680
Alle diese Dekoratoren, egal

00:36.680 --> 00:38.452
ob es sich um einen Eigenschaftsdekorator,

00:38.452 --> 00:41.810
einen Methodendekorator, einen Zugriffsdekorator oder einen Parameterdekorator

00:41.810 --> 00:43.620
handelt, wurden alle ausgeführt, als

00:43.620 --> 00:48.930
Sie diese Klasse definiert haben, und das ist wichtig zu verstehen.

00:48.930 --> 00:50.960
Dies sind keine Dekoratoren, die zur Laufzeit

00:50.960 --> 00:53.190
ausgeführt werden, wenn Sie die Methode aufrufen

00:53.190 --> 00:55.100
oder mit einer Eigenschaft arbeiten.

00:55.100 --> 00:57.190
Das ist nicht ihre Aufgabe.

00:57.190 --> 00:59.360
Stattdessen erlauben diese Dekoratoren,

00:59.360 --> 01:01.875
zusätzliche Arbeit hinter den Kulissen zu erledigen,

01:01.875 --> 01:04.397
wenn eine Klasse definiert wird.

01:04.397 --> 01:06.590
Zurück zu dem Konzept der Metaprogrammierung, das

01:06.590 --> 01:08.070
ich vorhin erklärt habe, richtig.

01:08.070 --> 01:10.200
Das ist die Idee hinter den Dekoratoren

01:10.200 --> 01:12.410
oder das ist ihr Hauptanwendungsfall.

01:12.410 --> 01:15.520
Es sind keine Ereignislisten, die Sie zu etwas hinzufügen, damit Sie bei

01:15.520 --> 01:17.100
der Arbeit mit einer Eigenschaft einen

01:17.100 --> 01:18.490
Code ausführen können.

01:18.490 --> 01:19.740
Man kann so etwas mit

01:19.740 --> 01:21.069
Dekoratoren machen,

01:21.069 --> 01:23.740
aber indem man etwas hinter den Kulissen verändert,

01:23.740 --> 01:24.977
aber der Dekorator selbst

01:24.977 --> 01:26.756
ist wirklich nur eine Funktion,

01:26.756 --> 01:29.710
die ausgeführt wird, wenn die Klasse definiert

01:29.710 --> 01:35.010
ist, wenn die (murmelt) und man kann dann den Dekorator benutzen, um etwas hinter den

01:35.010 --> 01:39.890
Kulissen zu machen, um dann etwas Code einzurichten, der ausgeführt werden

01:39.890 --> 01:43.660
soll, wenn er aufgerufen wird.

01:43.660 --> 01:47.310
Um zusätzliche Metadaten hinzuzufügen oder einige Daten über eine Eigenschaft an

01:47.310 --> 01:50.030
anderer Stelle in Ihrem Projekt oder in Ihrer Bibliothek zu speichern,

01:50.030 --> 01:51.696
die Sie gerade erstellen.

01:51.696 --> 01:54.075
Das ist es, wofür man Dekoratoren verwenden

01:54.075 --> 01:55.756
kann, und das ist das ganze Muster,

01:55.756 --> 01:58.420
das Sie sehen werden, wenn ich Ihnen jetzt diese

01:58.420 --> 02:00.320
Beispiele zeige, was Sie mit Dekoratoren

02:00.320 --> 02:02.290
bauen können.

02:02.290 --> 02:04.740
Sie fügen hinter den Kulissen zusätzliche

02:04.740 --> 02:06.200
Funktionen hinzu, die dann

02:06.200 --> 02:08.060
manchmal ausgeführt werden können,

02:08.060 --> 02:10.530
wenn Sie etwas mit Ihrer Klasse oder Ihrer Methode

02:10.530 --> 02:12.740
tun, die aber auch ganz andere Dinge tun

02:12.740 --> 02:14.313
können.

02:15.240 --> 02:17.860
Das ist alles wichtig für unser Personenbeispiel

02:17.860 --> 02:21.320
von vorhin mit dem Vorlagendekorator.

02:21.320 --> 02:22.980
Dadurch wird diese Vorlage nicht hinzugefügt,

02:22.980 --> 02:25.160
wenn wir hier eine Person instanziieren.

02:25.160 --> 02:27.890
Sie wird hinzugefügt, wenn wir diese Klasse definieren.

02:27.890 --> 02:29.820
Um dieses Verhalten zu ändern, müssten wir

02:29.820 --> 02:31.650
eine zusätzliche Logik in unsere Decorator-Funktion

02:31.650 --> 02:33.140
einbauen.

02:33.140 --> 02:35.980
Und um diese Vorlage vielleicht einfach in einer

02:35.980 --> 02:38.441
anderen Datenstruktur unseres Projekts

02:38.441 --> 02:41.380
zu speichern, die wir dann immer dann aufrufen, wenn

02:41.380 --> 02:43.650
wir hier eine neue Person anlegen.

02:43.650 --> 02:45.278
Wir richten dies also im Grunde nur ein,

02:45.278 --> 02:47.240
wenn wir die Klasse definieren, aber dann

02:47.240 --> 02:48.400
speichern wir es intern hinter

02:48.400 --> 02:49.890
den Kulissen und können es dann verwenden,

02:49.890 --> 02:52.350
wenn wir es verwenden wollen.

02:52.350 --> 02:54.160
Im Moment wird dies immer bei der Definition

02:54.160 --> 02:55.380
der Klasse gemacht, nicht

02:55.380 --> 02:57.610
wenn Sie eine neue Instanz erstellen.

02:57.610 --> 02:59.570
Das ist die Art und Weise, wie Dekoratoren ausgeführt

02:59.570 --> 03:00.403
werden und wie ich schon

03:00.403 --> 03:01.940
sagte, werde ich Ihnen jetzt ein paar

03:01.940 --> 03:04.504
Beispiele zeigen, in denen wir die Vorteile von Dekoratoren

03:04.504 --> 03:06.900
im Allgemeinen und ihrer Ausführungszeit nutzen, um einige

03:06.900 --> 03:08.883
nette Dinge mit ihnen zu tun.
