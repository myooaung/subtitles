WEBVTT

00:02.160 --> 00:05.373
- ：回到我们的项目中, 如果你想在那里使用webpack,

00:07.223 --> 00:13.440
我将首先退出我的编译和当前的开发服务器, 然后启动, 确保我们可以在那里使用webpack｡

00:13.440 --> 00:16.420
现在, 由于这已经是包. json文件的一个文件,

00:16.420 --> 00:21.050
我们可以使用NPM将更多的依赖项安装到这个项目中｡

00:21.050 --> 00:24.940
简单来说, 我们需要更多的第三方库｡

00:24.940 --> 00:28.610
这里我指的不是使用我们的代码提供特定功能的第三方库,

00:28.610 --> 00:33.930
而是帮助我们设置项目工作流和配置的第三方库,

00:33.930 --> 00:40.430
这些库使我们的开发非常高效｡

00:40.430 --> 00:45.110
我们在安装了NPM的情况下执行此操作, dash dash safe dash

00:45.110 --> 00:48.600
dev表明它是一个仅用于开发的依赖项, 然后是webpack

00:48.600 --> 00:53.600
webpack dash CLI､ webpack dash dev dash server

00:53.713 --> 00:58.713
typescript和ts loader｡

01:01.030 --> 01:04.800
这是一堆软件包, 我马上会介绍它们的功能｡

01:04.800 --> 01:06.680
首先, 我们按下Enter键,

01:06.680 --> 01:08.485
确保所有这些程序包都已安装到我们的项目中,

01:08.485 --> 01:16.290
然后, 我们将查看每个程序包, 并了解我们安装它的原因, 让我们等待此操作完成｡

01:16.290 --> 01:21.710
它确实完成了安装, 现在让我们分析一下我们安装了什么｡

01:21.710 --> 01:25.380
在package dot json中, 新的dev dependencies部分,

01:25.380 --> 01:31.290
或者它已经存在了, 但是现在我们有很多新的包, 我应该说, 这些包是添加的｡

01:31.290 --> 01:33.690
这些软件包都有什么作用？

01:33.690 --> 01:35.460
让我们从Webpack开始｡ 

01:35.460 --> 01:37.580
Webpack就是我刚才提到的工具,

01:37.580 --> 01:41.780
它是我们现在要创建的整个设置的核心｡

01:41.780 --> 01:43.980
它是一个工具, 允许我们插入某些功能来捆绑我们的代码,

01:43.980 --> 01:49.210
也可以转换我们的代码｡

01:49.210 --> 01:52.470
转换我们的代码部分很重要, 我们在这里有一个打字稿项目,

01:52.470 --> 01:54.740
对吗？

01:54.740 --> 01:56.620
当然, 我们当然可以使用webpack将所有JavaScript输出捆绑在一起,

01:56.620 --> 02:03.310
但如果webpack能够同时完成这两项工作, 那就更好了｡

02:03.310 --> 02:06.250
将我们的typescript代码转换为JavaScript,

02:06.250 --> 02:10.180
然后实际发出一个捆绑的Javascript文件, 谢天谢地,

02:10.180 --> 02:13.420
webpack能够做到这一点｡

02:13.420 --> 02:18.922
我们需要webpack CLI来运行项目中的webpack命令,

02:18.922 --> 02:21.603
并且webpack dev服务器需要内置开发服务器,

02:21.603 --> 02:30.180
该服务器在后台启动webpack, 监视文件的更改, 在发生更改时自动触发webpack重新编译,

02:30.180 --> 02:34.760
并且自动提供页面｡

02:34.760 --> 02:37.300
然后我们得到了打字稿和打字稿加载程序,

02:37.300 --> 02:39.460
这里是ts加载程序｡

02:39.460 --> 02:42.850
现在我们已经在机器上全局安装了typescript,

02:42.850 --> 02:46.208
这就是为什么我们能够运行tsc dash w｡

02:46.208 --> 02:49.760
现在, 为每个项目自动安装一份打印脚本副本是一个很好的做法,

02:49.760 --> 02:56.000
这样对于这个项目, 您就可以获得一个特定的打印脚本版本｡

02:56.000 --> 02:58.320
优点是, 如果您更改了全局打字稿版本,

02:58.320 --> 03:01.624
您不会破坏您的项目版本, 您的项目设置,

03:01.624 --> 03:13.880
如果我们正在破坏打字稿本身的更改, 因此我们可以锁定项目的特定打字稿版本, 这就是我们在这里单独安装它的原因｡

03:13.880 --> 03:18.380
而ts加载程序现在是一个包, 将与webpack一起工作｡

03:18.380 --> 03:24.396
ts loader是一个告诉webpack如何将typescript代码转换为Javascript的包,

03:24.396 --> 03:30.920
这样webpack就能够同时完成这两项工作, 在typescript loader的帮助下编译我们的代码, 当然,

03:30.920 --> 03:41.580
typescript loader反过来又在幕后使用了typescript编译器, 然后webpack还能够将我们发出的javascript文件捆绑到一个捆绑的js文件中,

03:41.580 --> 03:44.260
捆绑到一个捆绑的代码文件中｡

03:44.260 --> 03:47.440
好了, 让我们简单地开始, 让我们建立一个webpack项目,

03:47.440 --> 03:53.223
这样我们就可以使用webpack来做所有这些好事情｡
