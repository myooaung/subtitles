WEBVTT

00:02.050 --> 00:04.090
Instructor: Entonces, ¿qué desventaja tenemos?

00:04.090 --> 00:06.030
Este es el proyecto en el que trabajamos,

00:06.030 --> 00:08.020
dividido en múltiples archivos

00:08.020 --> 00:12.390
usando estas importaciones de módulos ES6 aquí.

00:12.390 --> 00:15.620
Ahora, vamos a construir este proyecto y para

00:15.620 --> 00:18.400
ello, como hicimos antes, podemos ejecutar

00:18.400 --> 00:21.930
npm-start para traer el servidor lite.

00:21.930 --> 00:24.710
Y por supuesto, muy importante en una nueva pestaña,

00:24.710 --> 00:26.367
toda la ejecución de tsc-dash para

00:27.820 --> 00:31.430
iniciar la compilación de TypeScript en modo de vigilancia.

00:31.430 --> 00:35.590
Esto nos da nuestro proyecto y si ahora abrimos la pestaña de Red en las herramientas

00:35.590 --> 00:39.570
de desarrollo del navegador y recargamos este archivo, veremos el inconveniente

00:39.570 --> 00:42.360
que tenemos aquí o el problema que tenemos con esta

00:42.360 --> 00:44.840
configuración.

00:44.840 --> 00:47.490
Vemos un montón de peticiones HTTP.

00:47.490 --> 00:49.160
Ahora usted puede ignorar los últimos aquí

00:49.160 --> 00:51.380
estos vienen de nuestro servidor de desarrollo.

00:51.380 --> 00:58.290
Pero todas estas nuestras peticiones aquí a la aplicación. js, proyecto-entrada.

00:58.290 --> 00:58.290
js, lista de proyectos. js, componente base. js

00:58.290 --> 01:00.960
y en eso está el problema.

01:00.960 --> 01:04.610
Notarás que todos estos archivos no son tan grandes, son

01:04.610 --> 01:06.320
relativamente pequeños.

01:06.320 --> 01:07.590
Así que, por supuesto,

01:07.590 --> 01:11.010
está bien, pero tenemos un montón de peticiones HTTP aquí.

01:11.010 --> 01:12.600
¿Cuál es el problema con eso?

01:12.600 --> 01:15.070
El problema con eso se puede ver si echamos

01:15.070 --> 01:17.810
un vistazo a esa cascada aquí a la derecha.

01:17.810 --> 01:20.330
Cada petición HTTP que hay que hacer, por supuesto,

01:20.330 --> 01:22.470
lleva un poco de tiempo.

01:22.470 --> 01:24.480
Los archivos tardan en descargarse,

01:24.480 --> 01:27.760
pero como no son tan grandes, no es un problema.

01:27.760 --> 01:31.390
Pero cada petición HTTP tiene como una sobrecarga

01:31.390 --> 01:34.540
base, una duración base que siempre toma.

01:34.540 --> 01:38.570
Esta pequeña caja que ves delante de estos gráficos aquí.

01:38.570 --> 01:41.250
Eso es casi el tiempo que requiere el navegador

01:41.250 --> 01:43.910
para configurar esa solicitud y enviarla.

01:43.910 --> 01:46.280
Así, mientras que la descarga real del archivo

01:46.280 --> 01:49.600
puede ser relativamente rápida, el establecimiento de la

01:49.600 --> 01:52.860
solicitud, el trabajo en el servidor, que sirve el archivo

01:52.860 --> 01:55.310
y todo eso lleva algún tiempo.

01:55.310 --> 01:57.890
Y ahora aquí tenemos una configuración muy rápida porque

01:57.890 --> 02:00.310
todo está sucediendo en nuestra máquina.

02:00.310 --> 02:03.020
Tenemos un servidor de desarrollo local de todos.

02:03.020 --> 02:06.160
Si despliegas eso en la web, tener tantas peticiones

02:06.160 --> 02:08.690
puede realmente introducir mucha latencia

02:08.690 --> 02:11.140
y ralentizar tu proyecto sólo por la gran

02:11.140 --> 02:14.760
cantidad de peticiones HTTP realizadas.

02:14.760 --> 02:17.280
Así que si podemos encontrar una solución

02:17.280 --> 02:21.370
para reducir esa cantidad de peticiones HTTP, sería increíble.

02:21.370 --> 02:24.020
Y ahí es donde entra en juego webpack.

02:24.020 --> 02:28.190
Puedes ir a webpack. js. org, para saber más al respecto.

02:28.190 --> 02:30.290
Al final webpack es una herramienta

02:30.290 --> 02:33.750
que nos ayudará a empaquetar nuestros archivos.

02:33.750 --> 02:36.530
Y realmente puedo recomendar su extensa y completa

02:36.530 --> 02:39.980
documentación que encuentras en su página.

02:39.980 --> 02:42.300
Si quieres aprender todo sobre webpack.

02:42.300 --> 02:44.820
En este curso, utilizaremos algunas características seleccionadas

02:44.820 --> 02:46.563
que nos ayudan con TypeScript.

02:47.560 --> 02:49.850
¿Qué es exactamente webpack?

02:49.850 --> 02:53.850
Es una herramienta de agrupación, y podría decirse que de orquestación de la construcción.

02:53.850 --> 02:56.190
Es una herramienta que nos ayuda a reducir

02:56.190 --> 02:59.560
la cantidad de peticiones HTTP agrupando el código.

02:59.560 --> 03:03.010
Así que escribimos el código dividido en varios archivos,

03:03.010 --> 03:05.390
pero webpack luego toma todos estos archivos

03:05.390 --> 03:07.050
y los agrupa.

03:07.050 --> 03:10.050
Y además webpack es capaz de hacer más.

03:10.050 --> 03:13.920
También optimizará nuestro código y nos permitirá añadir más pasos

03:13.920 --> 03:17.760
de construcción, más herramientas de construcción, por ejemplo,

03:17.760 --> 03:20.410
para ayudarnos con los archivos CSS y demás.

03:20.410 --> 03:23.180
Sin embargo, no es eso lo que veremos en este módulo,

03:23.180 --> 03:26.220
porque quiero centrarme en webpack y TypeScript.

03:26.220 --> 03:28.710
Así que, en primer lugar, echemos un vistazo a nuestra configuración

03:28.710 --> 03:30.700
normal en la que no usamos webpack.

03:30.700 --> 03:32.800
Ahí tenemos múltiples archivos TypeScript

03:32.800 --> 03:34.870
pero si luego usamos estas importaciones,

03:34.870 --> 03:36.920
obtenemos múltiples peticiones HTTP,

03:36.920 --> 03:40.220
lo cual no es tan bueno por las razones que mencioné.

03:40.220 --> 03:43.450
Además, un tema al que no he echado un vistazo antes

03:43.450 --> 03:47.670
es que también es muy probable que tengamos un código no optimizado,

03:47.670 --> 03:51.290
lo que significa que no es lo más pequeño posible.

03:51.290 --> 03:53.330
Sin duda podemos optimizar más el código

03:53.330 --> 03:55.750
acortando los nombres de las funciones, etc.

03:55.750 --> 03:58.690
Y, por supuesto, queremos una herramienta que lo haga automáticamente,

03:58.690 --> 04:01.030
para no tener que trabajar manualmente con un

04:01.030 --> 04:03.000
código ilegible.

04:03.000 --> 04:06.080
Queremos escribir un código perfectamente legible como desarrollador.

04:06.080 --> 04:07.850
Pero sería estupendo que tuviéramos

04:07.850 --> 04:10.740
una herramienta que acortara este código y lo hiciera

04:10.740 --> 04:14.960
lo más pequeño posible, que utilizara nombres de variables y funciones lo más

04:14.960 --> 04:17.170
cortos posible, para que enviáramos el

04:17.170 --> 04:19.130
menor código posible.

04:19.130 --> 04:22.940
Porque menos código significa que los usuarios pueden descargarlo más rápido,

04:22.940 --> 04:25.530
lo que significa que nuestra aplicación puede arrancar

04:25.530 --> 04:27.600
más rápido en nuestras máquinas.

04:27.600 --> 04:29.440
Y además, nuestra configuración

04:29.440 --> 04:32.860
actual, tenemos este servidor de desarrollo extra, lite-server

04:32.860 --> 04:35.150
que es un paquete extra instalado, que tenemos

04:35.150 --> 04:36.860
que girar.

04:36.860 --> 04:39.320
No sería un pequeño bonus, un bonito bonus si tuviéramos

04:39.320 --> 04:42.280
un solo comando y que lo hiciera todo, construir nuestro proyecto,

04:42.280 --> 04:45.360
pero también hacer girar tal servidor, que automáticamente

04:45.360 --> 04:48.170
recargue nuestra página web cada vez que cambiemos un archivo

04:48.170 --> 04:50.713
en nuestro proyecto.

04:51.550 --> 04:54.270
Bueno, y ahí es donde webpack puede ayudarnos.

04:54.270 --> 04:57.240
Agrupa nuestro código para que tengamos menos importaciones

04:57.240 --> 05:00.670
en lugar de tener algunos, bueno paquetes de código que enviamos,

05:00.670 --> 05:05.100
nos ayuda a optimizar nuestro código, minificarlo como se llama, para que enviemos

05:05.100 --> 05:06.717
menos código y nuestros usuarios

05:06.717 --> 05:10.130
tengan menos código para descargar.

05:10.130 --> 05:12.530
Y también podemos añadir fácilmente más pasos de

05:12.530 --> 05:15.750
compilación si queremos, podemos añadir un servidor de desarrollo,

05:15.750 --> 05:19.270
pero también podemos hacer muchas otras cosas si realmente queremos

05:19.270 --> 05:22.160
y los docs oficiales de webpack son el lugar para ir si quieres

05:22.160 --> 05:24.130
aprender todo sobre ello.

05:24.130 --> 05:27.880
Con eso, vamos a ver un ejemplo de configuración en nuestro proyecto y vamos

05:27.880 --> 05:30.433
a aprender cómo podríamos utilizar webpack allí.
