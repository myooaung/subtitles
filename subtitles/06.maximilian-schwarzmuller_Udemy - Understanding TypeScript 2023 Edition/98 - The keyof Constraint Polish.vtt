WEBVTT

00:02.230 --> 00:03.280
Instruktor: Więc mamy podstawy

00:03.280 --> 00:04.930
o generics w dół miejmy nadzieję, teraz

00:04.930 --> 00:07.150
zanurkujmy trochę głębiej w ograniczeniach, lub w

00:07.150 --> 00:09.250
jednym konkretnym rodzaju ograniczenia, które

00:09.250 --> 00:10.400
można dodać.

00:10.400 --> 00:12.680
W tym celu wymienię jeszcze jedną funkcję,

00:12.680 --> 00:16.293
funkcję generyczną, którą nazwę extractAndConvert.

00:18.700 --> 00:21.550
Idea tej funkcji tutaj jest taka,

00:21.550 --> 00:24.120
że dostajemy obiekt jako pierwszy

00:24.120 --> 00:26.340
argument, a drugi parametr

00:26.340 --> 00:28.413
to w końcu klucz.

00:30.050 --> 00:32.570
Teraz chcę zwrócić wartość dla tego klucza w obiekcie, co

00:32.570 --> 00:35.310
możemy zrobić za pomocą tej domyślnej notacji JavaScript.

00:35.310 --> 00:36.310
Używanie nawiasów kwadratowych

00:36.310 --> 00:38.200
do exe jako właściwości w obiekcie, ale to

00:38.200 --> 00:39.840
nic specyficznego dla TypeScript,

00:39.840 --> 00:42.010
to znowu Vanilla JavaScript.

00:42.010 --> 00:43.000
Teraz dlatego tutaj

00:43.000 --> 00:44.580
moglibyśmy powiedzieć, że tutaj

00:44.580 --> 00:48.460
chcemy mieć obiekt, a dla klucza chcemy mieć ciąg znaków, powiedzmy.

00:48.460 --> 00:50.160
Teraz tutaj jednak dostaję błąd,

00:50.160 --> 00:52.000
bo to, czego nie wiemy tutaj ostatecznie,

00:52.000 --> 00:54.500
to czy obiekt, który tutaj dostaniemy, rzeczywiście

00:54.500 --> 00:57.510
będzie miał ten klucz.

00:57.510 --> 00:59.410
To jest koniec tego, co TypeScript

00:59.410 --> 01:01.430
mówi nam z tym dziwnym błędem.

01:01.430 --> 01:02.530
Na przykład tutaj,

01:02.530 --> 01:05.700
mogłem konsolowo zalogować wynik wywołania

01:05.700 --> 01:09.770
tego z powiedzmy pustym obiektem, a następnie nazwą.

01:09.770 --> 01:12.600
I tutaj przy okazji nazywam to extractAndConvert,

01:12.600 --> 01:16.025
bo chcę to wywołać bez logu konsoli i po prostu powiedzieć

01:16.025 --> 01:18.600
Value, colon, plus.

01:18.600 --> 01:19.660
Ale to tylko poboczna uwaga

01:19.660 --> 01:22.450
zwracam nam błądzenie w końcu z tymi odzyskanymi danymi.

01:22.450 --> 01:23.840
Ale głównym problemem tutaj jest

01:23.840 --> 01:25.160
to, że mógłbym go wywołać w ten

01:26.091 --> 01:28.020
sposób i przekazałby obiekt jako pierwszy parametr,

01:28.020 --> 01:29.890
a następnie ciąg jako drugi.

01:29.890 --> 01:31.430
Ale poprawnie TypeScript mówi

01:31.430 --> 01:33.200
mi, że w końcu nie jest gwarantowane,

01:33.200 --> 01:35.193
że ten klucz istnieje w tym obiekcie.

01:36.420 --> 01:39.920
Teraz, aby to zagwarantować, możemy ponownie użyć tutaj typów generycznych.

01:39.920 --> 01:41.620
Możemy powiedzieć, że mamy typ T i

01:41.620 --> 01:43.130
to będzie nasz obiekt tutaj.

01:43.130 --> 01:46.550
Możemy powiedzieć: extends object.

01:46.550 --> 01:48.363
Ale dostaliśmy też typ U.

01:49.440 --> 01:52.850
Nasz klucz tutaj powiedzmy, który w końcu

01:52.850 --> 01:56.320
musi być kluczem naszego typu T chociaż.

01:56.320 --> 01:58.210
Więc tego obiektu, chcemy zagwarantować,

01:58.210 --> 02:01.560
że to, co otrzymujemy tutaj jako drugi parametr jako klucz,

02:01.560 --> 02:04.890
jest właściwością tego pierwszego typu.

02:04.890 --> 02:09.130
I za to możemy powiedzieć przedłuża się klucz T.

02:11.550 --> 02:13.540
I teraz widzisz, że błąd zniknął tutaj,

02:13.540 --> 02:15.370
a zamiast tego mam błąd na dole, ponieważ

02:15.370 --> 02:17.930
teraz informuję TypeScript tutaj, że pierwszy

02:17.930 --> 02:21.800
parametr powinien być dowolnym rodzajem obiektu, a drugi parametr

02:21.800 --> 02:23.610
powinien być dowolnym rodzajem

02:23.610 --> 02:25.870
klucza w tym obiekcie.

02:25.870 --> 02:28.480
A tutaj, owszem przekazujemy dowolny obiekt,

02:28.480 --> 02:30.430
ale nie mamy tam klucza nazwy.

02:30.430 --> 02:34.990
Ten błąd zniknie tylko wtedy, gdy dodam klucz nazwy.

02:34.990 --> 02:37.990
Więc to są wszystkie czasy, dla których możemy używać typów

02:37.990 --> 02:41.800
generycznych dla z tym słowem keyoff keyword tutaj również, aby powiedzieć

02:41.800 --> 02:45.730
TypeScriptowi, że chcemy się upewnić, że mamy tę poprawną strukturę, a to oczywiście

02:45.730 --> 02:47.460
jest naprawdę przydatne, bo pozwala

02:47.460 --> 02:49.120
nam zapewnić, że nie popełniamy głupich

02:49.120 --> 02:51.160
błędów, gdzie próbujemy wywołać tę funkcję,

02:51.160 --> 02:53.390
którą w końcu próbowaliśmy wyegzekwować jako

02:53.390 --> 02:56.740
właściwość, która nie istnieje.

02:56.740 --> 02:58.140
Więc to działa.

02:58.140 --> 02:59.870
Ale jeśli spróbuję exe jako 'age'

02:59.870 --> 03:01.570
tutaj, znowu dostaję błąd, np.

03:02.890 --> 03:05.560
Przełączmy więc to z powrotem na "nazwę" dlatego.
