WEBVTT

00:02.210 --> 00:04.920
Narrator: Teraz specjalnym typem strażnika typu,

00:04.920 --> 00:05.753
można powiedzieć,

00:05.753 --> 00:07.940
lub coś, co pomaga ci w strażnikach typu,

00:07.940 --> 00:10.000
jest dyskryminowany związek.

00:10.000 --> 00:11.300
Co to jest.

00:11.300 --> 00:13.310
Jest to wzór, którego możesz użyć

00:13.310 --> 00:15.030
podczas pracy z typami unii,

00:15.030 --> 00:18.900
który ułatwia implementację strażników typu.

00:18.900 --> 00:22.000
Jest on dostępny podczas pracy z typami obiektów.

00:22.000 --> 00:24.580
Pozwól, że pokażę ci, jak to działa.

00:24.580 --> 00:26.850
Powiedzmy, że mamy kilka interfejsów, a

00:26.850 --> 00:28.450
to może być również klasy, ale

00:28.450 --> 00:29.950
tutaj pójdę na interfejsy,

00:29.950 --> 00:32.193
aby pokazać, że działa również z tymi.

00:33.170 --> 00:34.803
I tam mam swojego ptaka, który

00:36.480 --> 00:38.830
ma prędkość lotu, która powinna być

00:38.830 --> 00:40.973
typu liczba, powiedzmy.

00:42.660 --> 00:45.890
I mam też swojego konia, który ma prędkość

00:45.890 --> 00:50.310
w terenie lub prędkość biegu, która powinna mieć numer

00:50.310 --> 00:51.913
typu.

00:53.130 --> 00:55.430
Mamy więc tutaj te dwa interfejsy.

00:55.430 --> 00:58.800
Teraz tworzymy nasz własny typ unii, zwierzę,

00:58.800 --> 00:59.633
Które jest

01:00.750 --> 01:03.370
albo ptakiem albo koniem.

01:03.370 --> 01:05.743
I tak jak wcześniej, możemy mieć funkcję, przenieś

01:06.740 --> 01:08.480
zwierzę, która przyjmuje zwierzę

01:09.800 --> 01:13.040
jako wejście, które jest typu zwierzęcego, Więc używając

01:13.040 --> 01:14.800
naszego typu unii.

01:14.800 --> 01:19.800
I teraz tam chcę powiedzieć poruszanie się z prędkością, a teraz oczywiście

01:19.990 --> 01:21.050
muszę mieć dostęp

01:21.050 --> 01:25.180
albo do prędkości latania, albo do prędkości biegu.

01:25.180 --> 01:27.730
Teraz oczywiście mogliśmy po prostu nazwać to prędkością.

01:27.730 --> 01:30.840
Ale to tylko uproszczony przykład prawdziwego przypadku

01:30.840 --> 01:33.900
użycia, z którym możesz się zmierzyć, gdzie masz kilka

01:33.900 --> 01:37.390
interfejsów lub obiektów w ogóle, które są w pewnym sensie powiązane,

01:37.390 --> 01:40.500
ale mają różne właściwości lub metody.

01:40.500 --> 01:42.050
Więc tutaj jest to właściwość speed,

01:42.050 --> 01:43.900
która faktycznie jest inna.

01:43.900 --> 01:46.780
Więc nie może mieć tutaj dostępu do prędkości lotu, bo oczywiście

01:46.780 --> 01:49.240
nie wszystkie zwierzęta mają prędkość lotu.

01:49.240 --> 01:51.210
Teraz możemy zrobić to, czego nauczyliśmy się wcześniej.

01:51.210 --> 01:56.063
Możemy sprawdzić, czy prędkość lotu jest w zwierzęciu tutaj.

01:58.240 --> 02:01.063
A jeśli tak jest, to możemy wykonać ten kod.

02:01.960 --> 02:04.470
Teraz jest to podejście, które możemy przyjąć, ale

02:04.470 --> 02:07.430
im więcej potencjalnych zwierząt tam dostaniemy, tym więcej

02:07.430 --> 02:09.233
rzeczy musimy sprawdzić.

02:10.880 --> 02:14.100
Możemy również pomylić się tutaj w tym ciągu.

02:14.100 --> 02:15.810
Możemy zapomnieć na przykład o

02:15.810 --> 02:18.460
E i zastanawiać się, dlaczego to nie zadziała.

02:18.460 --> 02:20.410
Teraz nie możemy użyć instancji tutaj,

02:20.410 --> 02:22.570
ponieważ łamię się z interfejsami.

02:22.570 --> 02:27.490
Jak wyjaśniłem, zwierzęca instancja ptaka nie będzie działać, ponieważ dane

02:27.490 --> 02:29.680
są interfejsem, który nie jest skompilowany

02:29.680 --> 02:31.840
do JavaScript.

02:31.840 --> 02:33.970
Więc w czasie biegu nie będzie to dostępne

02:33.970 --> 02:36.210
jako funkcja konstruktora.

02:36.210 --> 02:37.690
Więc dlatego to nie działa.

02:37.690 --> 02:40.380
Teraz możemy zbudować tutaj związek dyskryminowany,

02:40.380 --> 02:42.460
dając każdy interfejs.

02:42.460 --> 02:45.380
Czyli każdy obiekt, który powinien wchodzić w skład Unii,

02:45.380 --> 02:47.130
a także dodatkowy majątek.

02:47.130 --> 02:48.640
Możesz użyć dowolnej nazwy, którą chcesz.

02:48.640 --> 02:51.490
Często używa się tutaj kind, czyli typ.

02:51.490 --> 02:55.090
Pójdę za typem i nazwę tego ptaka.

02:55.090 --> 02:57.480
Teraz ważne, handlujemy tutaj interfejsem.

02:57.480 --> 03:02.480
Więc to właściwie nie jest wartość dla właściwości type.

03:02.650 --> 03:05.410
To zamiast tego jest typem literalnym, jak się nauczyłeś,

03:05.410 --> 03:09.110
gdzie typ musi trzymać ciąg, który musi być ptakiem.

03:09.110 --> 03:10.880
Jest to więc przypisanie typu,

03:10.880 --> 03:15.000
w którym zawężamy wartość, która może być przechowywana w typie, do

03:15.000 --> 03:17.590
dokładnie tej wartości łańcuchowej.

03:17.590 --> 03:19.810
A następnie zrób to samo dla konia ,

03:19.810 --> 03:22.283
tylko z koniem jako typem dosłownym.

03:23.400 --> 03:25.060
Teraz tutaj, w naszej

03:25.060 --> 03:27.550
funkcji, możemy użyć instrukcji

03:27.550 --> 03:29.840
switch i włączyć typ animal

03:29.840 --> 03:32.280
dot.

03:32.280 --> 03:34.080
Każde zwierzę ma właściwość type,

03:34.080 --> 03:36.330
ponieważ dodaliśmy ją do wszystkich interfejsów

03:36.330 --> 03:38.350
tworzących nasze zwierzę.

03:38.350 --> 03:40.730
A następnie tutaj możemy mieć kilka przypadków,

03:40.730 --> 03:42.330
w których nawet otrzymamy automatyczne

03:42.330 --> 03:44.990
uzupełnianie, ponieważ TypeScript i nasze IDE rozumieją,

03:44.990 --> 03:49.040
że typ może być tylko albo ptakiem albo koniem.

03:49.040 --> 03:51.050
A jeśli to ptak, to moglibyśmy

03:51.050 --> 03:55.003
ustawić jakąś wewnętrzną zmienną prędkość na

03:55.900 --> 03:58.860
powiedzmy prędkość lotu animal dot

03:59.880 --> 04:02.250
i potem przerwać.

04:02.250 --> 04:05.183
W przeciwnym razie, jeśli przypadek dotyczy

04:06.830 --> 04:11.753
konia, ustawiamy prędkość równą prędkości biegu kropki zwierzęcia.

04:14.150 --> 04:17.490
I tam po możemy konsolować log, poruszając

04:17.490 --> 04:20.843
się z prędkością plus prędkość.

04:22.490 --> 04:26.540
Jeśli teraz zadzwonię, przenieś zwierzę ze zwierzęciem,

04:26.540 --> 04:30.300
które tworzę w locie tutaj, gdzie ustawiam typ na ptaka

04:30.300 --> 04:32.810
i zezwalam tylko na użycie ptaka lub

04:32.810 --> 04:34.930
konia, to muszę ustawić prędkość

04:36.140 --> 04:39.210
lotu i przy okazji TypeScript nawet rozpoznaje,

04:39.210 --> 04:42.050
że koncepcja prędkości biegu tutaj, aby

04:42.050 --> 04:44.220
spróbować to zrobić i ustawić to

04:44.220 --> 04:48.980
na 10, skarży się, że nie jest to dostępne dla typu ptaka.

04:48.980 --> 04:51.360
Jeśli ustawię go na prędkość latania,

04:51.360 --> 04:55.120
jakkolwiek działa, jeśli zapiszemy to, wyprowadza to poprawnie,

04:55.120 --> 04:57.700
a także kompiluje bez błędów.

04:57.700 --> 04:59.530
Teraz jest to dyskryminowana

04:59.530 --> 05:04.060
unia, ponieważ mamy jedną wspólną właściwość w każdym obiekcie, który

05:04.060 --> 05:08.040
tworzy nasz związek, który opisuje ten obiekt, więc możemy

05:08.040 --> 05:11.490
użyć tej właściwości, która opisuje ten obiekt w naszej

05:11.490 --> 05:16.490
kontroli, aby mieć 100% bezpieczeństwa typu i zrozumieć, które właściwości

05:16.770 --> 05:19.870
są dostępne dla takiego obiektu, a które właściwości

05:19.870 --> 05:21.930
nie są.

05:21.930 --> 05:24.500
Jest to więc nowatorski przydatny wzór, który

05:24.500 --> 05:28.060
możesz wykorzystać podczas pracy z obiektami i z typami unii.

05:28.060 --> 05:30.340
I działa nawet z interfejsami, ponieważ

05:30.340 --> 05:33.630
ten interfejs wymusza każdy obiekt, który budujesz

05:33.630 --> 05:37.050
w oparciu o ten interfejs, aby mieć ten typ.

05:37.050 --> 05:39.400
Więc zamiast sprawdzać istnienie danej

05:39.400 --> 05:41.200
właściwości, lub zamiast używać

05:41.200 --> 05:43.660
instancji, używamy właściwości, o której

05:43.660 --> 05:46.310
wiemy, że istnieje, aby sprawdzić, z jakim

05:46.310 --> 05:49.020
typem obiektów pracujemy.

05:49.020 --> 05:51.930
Eliminujemy również niebezpieczeństwo pomyłki, ponieważ

05:51.930 --> 05:54.730
TypeScript rozumie, że jedyne przypadki, jakie możemy

05:54.730 --> 05:58.480
mieć tutaj, w przypadku typu zwierzęcego, to ptak i koń i stąd daje nam

05:58.480 --> 06:00.810
tę sztukę uzupełniania i jeśli wprowadzilibyśmy

06:00.810 --> 06:02.770
literówkę, to od razu dostalibyśmy

06:02.770 --> 06:04.690
błąd.

06:04.690 --> 06:06.780
Więc dlatego jest to bardzo przydatny

06:06.780 --> 06:09.333
wzór podczas pracy z obiektami i typami unii.
