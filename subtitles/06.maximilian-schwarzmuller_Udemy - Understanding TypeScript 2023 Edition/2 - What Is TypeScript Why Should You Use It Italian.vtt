WEBVTT

00:02.350 --> 00:04.170
Istruttore: Cos'è TypeScript?

00:04.170 --> 00:06.860
Di cosa si tratta, perché dovremmo usarlo?

00:06.860 --> 00:10.820
TypeScript è un superset di JavaScript.

00:10.820 --> 00:12.190
Che cosa significa?

00:12.190 --> 00:14.250
Ciò significa che TypeScript è in definitiva

00:14.250 --> 00:16.370
un linguaggio, un linguaggio di programmazione,

00:16.370 --> 00:18.710
che si basa su JavaScript.

00:18.710 --> 00:20.940
Non si tratta di un linguaggio nuovo, ma

00:20.940 --> 00:23.980
di un linguaggio che prende il linguaggio JavaScript

00:23.980 --> 00:27.450
e lo arricchisce di nuove caratteristiche e vantaggi.

00:27.450 --> 00:31.720
Si potrebbe dire che rende la scrittura di codice JavaScript più facile

00:31.720 --> 00:32.840
e più potente.

00:32.840 --> 00:35.624
Ma abbiamo un enorme svantaggio.

00:35.624 --> 00:39.786
TypeScript non può essere eseguito da ambienti JavaScript

00:39.786 --> 00:41.760
come il browser.

00:41.760 --> 00:44.270
I browser non possono eseguire TypeScript

00:44.270 --> 00:48.486
e, ad esempio, Node. js non può eseguire TypeScript, quindi

00:48.486 --> 00:52.250
gli ambienti in cui è possibile eseguire JavaScript non supportano

00:52.250 --> 00:54.080
TypeScript.

00:54.080 --> 00:56.140
Qual è l'idea alla base di TypeScript?

00:56.140 --> 01:00.760
È una versione migliore di JavaScript e non possiamo usarla?

01:00.760 --> 01:02.130
Beh, non proprio.

01:02.130 --> 01:06.050
TypeScript è un linguaggio di programmazione, ma anche uno strumento.

01:06.050 --> 01:10.049
È un potente compilatore che viene eseguito sul codice

01:10.049 --> 01:14.410
per compilare il codice dattiloscritto in JavaScript.

01:14.410 --> 01:16.540
Quindi, il risultato che si ottiene

01:16.540 --> 01:20.260
scrivendo codice in TypeScript è JavaScript.

01:20.260 --> 01:22.870
Ma non si è scritto quel codice JavaScript,

01:22.870 --> 01:24.900
si è scritto codice TypeScript con

01:24.900 --> 01:27.480
tutte le nuove funzionalità e tutti i vantaggi,

01:27.480 --> 01:30.670
e si ottiene normale codice JavaScript.

01:30.670 --> 01:33.810
Questo naturalmente porta a una domanda importante:

01:33.810 --> 01:36.710
come può TypeScript aggiungere nuove funzionalità

01:36.710 --> 01:40.630
se alla fine si ottiene il normale JavaScript?

01:40.630 --> 01:43.460
La risposta è che il compilatore di TypeScript

01:43.460 --> 01:47.710
compila queste nuove funzionalità in workaround JavaScript, quindi

01:47.710 --> 01:50.670
alla fine potrebbe darvi una sintassi migliore,

01:50.670 --> 01:52.890
un modo più semplice di fare qualcosa,

01:52.890 --> 01:56.571
e poi compilerà quel modo migliore e più semplice in uno snippet

01:56.571 --> 01:59.820
JavaScript più complesso, che dovreste scrivere

01:59.820 --> 02:02.060
altrimenti.

02:02.060 --> 02:03.230
Quindi non è una magia,

02:03.230 --> 02:06.790
ovviamente non può aggiungere ciò che non è possibile fare nel linguaggio

02:06.790 --> 02:08.610
JavaScript, ma può aggiungere nuove

02:08.610 --> 02:11.150
funzionalità che sono semplicemente più facili

02:11.150 --> 02:15.020
da usare, una sintassi più gradevole, cose del genere.

02:15.020 --> 02:17.470
Inoltre, TypeScript, ovviamente,

02:17.470 --> 02:20.900
fa una cosa importante, che il nome già implica.

02:20.900 --> 02:22.740
Aggiunge tipi, aggiunge una

02:22.740 --> 02:26.230
funzione al linguaggio JavaScript, che vedremo da

02:26.230 --> 02:28.750
vicino tra un secondo, che vi darà la possibilità,

02:28.750 --> 02:31.541
come sviluppatori, di identificare gli

02:31.541 --> 02:35.070
errori nel vostro codice prima che lo script venga eseguito

02:35.070 --> 02:38.480
e che l'errore si verifichi in fase di esecuzione

02:38.480 --> 02:41.350
nel browser.

02:41.350 --> 02:44.320
Quindi, non solo fornisce alcune nuove funzionalità

02:44.320 --> 02:46.690
e modi migliori di fare qualcosa, ma offre

02:46.690 --> 02:50.240
anche un controllo degli errori aggiuntivo che consente di individuare

02:50.240 --> 02:54.153
e risolvere tempestivamente, durante lo sviluppo, gli errori che altrimenti

02:54.153 --> 02:58.370
si verificherebbero come errori di runtime.

02:58.370 --> 03:00.600
Quindi, perché dovremmo usare TypeScript?

03:00.600 --> 03:02.570
Consideriamo questo esempio, una

03:02.570 --> 03:06.710
funzione JavaScript piuttosto semplice che somma due numeri.

03:06.710 --> 03:08.760
Ora, quando lo chiamo, notate che sto

03:08.760 --> 03:11.810
passando due stringhe invece di due numeri e vi mostrerò

03:11.810 --> 03:14.810
un esempio reale in cui una cosa del genere potrebbe

03:14.810 --> 03:18.090
accadere realisticamente in un secondo.

03:18.090 --> 03:20.270
Quindi, stiamo chiamando questa funzione

03:20.270 --> 03:22.519
con due stringhe e il risultato è un comportamento

03:22.519 --> 03:27.240
probabilmente indesiderato, perché se si aggiungono due stringhe, JavaScript

03:27.240 --> 03:29.596
le concatena invece di eseguire un calcolo

03:29.596 --> 03:32.780
matematico.

03:32.780 --> 03:36.310
Quindi, il risultato non sarebbe cinque, ma ventitré,

03:36.310 --> 03:38.980
una stringa concatenata dei due numeri.

03:38.980 --> 03:41.690
Questo è un errore che si può avere in JavaScript,

03:41.690 --> 03:43.530
non è un errore tecnico, probabilmente

03:43.530 --> 03:46.720
non si otterrà un errore di runtime, ma si ha un errore

03:46.720 --> 03:49.832
logico nel codice.

03:49.832 --> 03:52.820
E questo, ovviamente, può portare a enormi problemi nelle

03:52.820 --> 03:55.870
applicazioni web che si scrivono con JavaScript.

03:55.870 --> 03:59.360
Ora, naturalmente, in JavaScript abbiamo strategie di mitigazione,

03:59.360 --> 04:02.541
potremmo aggiungere un controllo if nella funzione per verificare

04:02.541 --> 04:05.440
i tipi di input in fase di runtime, potremmo anche convalidare

04:05.440 --> 04:08.240
e sanificare l'input dell'utente e, anche se vorremmo

04:08.240 --> 04:10.670
fare tutto questo, sarebbe bello se potessimo

04:10.670 --> 04:15.840
catturare errori come questo già durante lo sviluppo.

04:15.840 --> 04:19.220
E fortunatamente questo è possibile con TypeScript, perché gli

04:19.220 --> 04:21.810
sviluppatori possono scrivere codice non valido

04:21.810 --> 04:23.970
e introdurre bot di questo tipo in JavaScript,

04:23.970 --> 04:26.160
e con TypeScript abbiamo uno strumento che

04:26.160 --> 04:30.060
ci aiuta a scrivere codice migliore e a evitare questi problemi.

04:30.060 --> 04:31.910
Diamo quindi un'occhiata più da vicino.
