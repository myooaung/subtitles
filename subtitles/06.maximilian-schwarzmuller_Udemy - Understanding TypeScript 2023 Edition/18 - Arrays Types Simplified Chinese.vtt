WEBVTT

00:02.170 --> 00:08.300
- ：除了对象, JavaScript中还有数组, 这是非常重要的数据类型｡

00:08.300 --> 00:10.810
正如您所知, 数组在JavaScript中是这样创建的,

00:10.810 --> 00:12.560
您可以在其中存储任何数据：数字､

00:12.560 --> 00:15.970
字符串､ 布尔值､ 对象､ 其他数组, 你可以有嵌套数组,

00:15.970 --> 00:19.380
毕竟, 你也可以混合数据｡

00:19.380 --> 00:23.200
您可以将字符串和数字混合在一个数组中｡ 

00:23.200 --> 00:25.570
而且TypeScript也支持数组｡ 

00:25.570 --> 00:29.260
支持任何JavaScript数组, 该数组的类型可以是灵活的,

00:29.260 --> 00:32.140
也可以是严格的｡

00:32.140 --> 00:35.200
现在, 让我们在TypeScript中看看这一点｡ 

00:35.200 --> 00:38.760
在这里的应用程序｡  假设我们的人也有一个爱好键,

00:38.760 --> 00:45.660
当然我们也可以有一个变量或一个恒定的对象之外的爱好｡

00:45.660 --> 00:50.853
所以, 在对象内部和外部使用数组是完全一样的｡

00:51.950 --> 00:54.780
这里我们有爱好, 比如说,

00:54.780 --> 00:58.140
爱好可以是运动, 烹饪.

00:58.140 --> 01:01.150
这里有两个元素, 你们可以看出,

01:01.150 --> 01:03.620
这些元素是字符串.

01:03.620 --> 01:10.630
现在如果我们把鼠标悬停在爱好上, TypeScript就正确地检测到了距离型字符串数组｡

01:10.630 --> 01:12.500
这是一种您以前从未见过的语法,

01:12.500 --> 01:16.140
但这是TypeScript描述数据数组的方式｡

01:16.140 --> 01:21.340
方括号前面是存储在其中的数据类型｡

01:21.340 --> 01:23.530
现在这是类型, 类型的组推断｡ 

01:23.530 --> 01:25.810
它看到这里有一个数组, 里面只有字符串,

01:25.810 --> 01:31.940
所以它推断hobbits应该是一个字符串数组.

01:31.940 --> 01:34.903
事实上, 对于业余爱好来说, 这很有意义｡ 

01:36.210 --> 01:41.040
当然, 也可以显式设置变量的类型｡ 

01:41.040 --> 01:44.720
如果我们要添加一个新的变量favorite activities,

01:45.580 --> 01:53.140
并且最初它应该是空的, 那么我们可能需要显式地设置存储在其中的数据类型｡

01:53.140 --> 01:57.570
假设它是一个字符串数组, 那么我们可以重复刚才看到的内容;类型字符串,

01:57.570 --> 02:03.330
然后是方括号, 这告诉TypeScript我们在这里存储的不仅仅是一个字符串,

02:03.330 --> 02:05.990
而是一个字符串数组｡

02:05.990 --> 02:12.183
事实上, 如果我试图在那里只存储体育, 我会得到一个错误｡

02:12.183 --> 02:12.183
我得到了一个错误,

02:12.183 --> 02:15.650
因为这里是一个单一的字符串, 而不是一个字符串数组｡

02:15.650 --> 02:19.370
当然, 如果我把它放在方括号中, 并有效地创建一个数组,

02:19.370 --> 02:22.610
我就不会得到错误｡

02:22.610 --> 02:25.870
如果我加了一个数字, 我还是会得到一个错误,

02:25.870 --> 02:29.220
比如说, 因为我们把它定义为一个字符串数组.

02:29.220 --> 02:31.290
这里, 我们有一个混合数组｡ 

02:31.290 --> 02:34.920
它是一个字符串和数字的数组, 所以它不起作用,

02:34.920 --> 02:37.180
在这里也不受支持｡

02:37.180 --> 02:43.120
如果我们希望支持这种混合数组, 一种解决方案是在此处使用“any”｡

02:43.120 --> 02:45.880
“any”类型是TypeScript中的一种特殊类型,

02:45.880 --> 02:47.610
我们稍后会详细介绍它, 它基本上意味着,

02:47.610 --> 02:50.530
可以做任何你想做的事情｡

02:50.530 --> 02:55.630
当然, 这是一个你不想经常使用的类型, 因为你会失去TypeScript给你带来的好处,

02:55.630 --> 03:00.140
你回到JavaScript世界, 在那里你也可以在任何地方使用任何值｡

03:00.140 --> 03:08.710
所以“any”确实很灵活, 但这种灵活性的代价是基本上放弃了TypeScript提供的所有好处｡

03:08.710 --> 03:10.840
这里我要回到字符串, 因为我不想在这里有一个数字,

03:10.840 --> 03:12.530
所以我们可以去掉这个数字,

03:12.530 --> 03:14.933
这样就好了.

03:15.900 --> 03:18.830
数组也给了我们一个很好的例子, 实际上就像对象和它们的属性一样,

03:18.830 --> 03:25.730
TypeScript的类型推理是多么的动态｡

03:25.730 --> 03:28.750
如果我们在底部添加一个for循环, 我们想访问person的所有爱好,

03:28.750 --> 03:33.220
我们当然可以使用一个传统的for循环, 其中包含person的for const

03:33.220 --> 03:38.220
hobby｡ 访问hobby属性, 检查所有的hobby,

03:38.620 --> 03:42.793
将每次迭代的每个hobby存储在这个常量中,

03:43.690 --> 03:50.090
然后我们可以在这里查阅log hobby.

03:50.090 --> 03:52.000
这并不复杂, 这是我们从JavaScript中知道的,

03:52.000 --> 03:53.710
对吧｡

03:53.710 --> 03:58.280
如果我现在编译这个应用程序｡  ts文件, 我们从这一行得到名字,

03:58.280 --> 04:04.750
然后打印两个爱好.

04:04.750 --> 04:07.800
但有趣的是, 在hobby上, 我们可以访问任何东西,

04:07.800 --> 04:11.040
我们可以访问任何字符串｡

04:11.040 --> 04:14.210
例如, 对于UpperCase, 我得到了这个自动完成,

04:14.210 --> 04:16.230
TypeScript没有抱怨｡

04:16.230 --> 04:18.070
它为什么不抱怨？

04:18.070 --> 04:25.830
因为它知道, 爱好是字符串数组类型的, 所以当我访问person时｡

04:25.830 --> 04:25.830
hobtors,

04:25.830 --> 04:29.700
TypeScript的推论会侦测到hobtors将是字串数组｡

04:29.700 --> 04:33.450
所以hobby, 在优势方面, 被正确地识别为字符串,

04:33.450 --> 04:36.000
因为我们遍历了一个字符串数组,

04:36.000 --> 04:40.510
每个值都必须是字符串.

04:40.510 --> 04:46.490
因此类型为我们提供了很大的支持, 允许我们用hobby做任何可以用字符串做的事情,

04:46.490 --> 04:50.050
因为它肯定地知道hobby会是一个字符串,

04:50.050 --> 04:53.810
因为我们在那里设置了类型｡

04:53.810 --> 04:56.300
这真的很灵活, 当然, 这是一个很好的功能,

04:56.300 --> 05:01.360
使编写代码变得更容易, 更灵活和安全｡

05:01.360 --> 05:08.570
例如, 如果它试图访问hobby, 我们将在此处得到一个错误｡

05:08.570 --> 05:08.570
如果我认为这是一个数组的话｡ 

05:08.570 --> 05:12.060
map方法可用于数组, 但不能用于字符串｡ 

05:12.060 --> 05:14.540
在这里, 正确的, 再次, 一个错误,

05:14.540 --> 05:17.810
map不存在于类型字符串上, 因为它不存在｡

05:17.810 --> 05:21.290
这里我们得到了一个错误, 这很好, 因为这是错误的,

05:21.290 --> 05:27.343
这里我们看到TypeScript的推理非常非常出色｡
