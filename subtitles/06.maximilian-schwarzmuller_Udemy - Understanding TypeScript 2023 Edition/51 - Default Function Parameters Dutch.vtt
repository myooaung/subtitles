WEBVTT

00:02.170 --> 00:03.830
Laten we het bij functies houden.

00:03.830 --> 00:07.120
Een andere leuke eigenschap die beschikbaar is in modern JavaScript

00:07.120 --> 00:09.450
is dat je standaard argumenten kunt toekennen

00:09.450 --> 00:11.033
aan functieparameters.

00:11.880 --> 00:13.830
Laten we zeggen dat we in onze add-functie

00:13.830 --> 00:17.720
om een of andere reden een standaardwaarde voor b willen.

00:17.720 --> 00:20.180
Dus we weten dat we twee getallen willen kunnen optellen.

00:20.180 --> 00:23.850
Maar indien u deze functie aanroept met slechts één getal,

00:23.850 --> 00:28.130
gaan we uit van een standaard voor het tweede argument, of voor

00:28.130 --> 00:29.990
de tweede parameter.

00:29.990 --> 00:32.120
Dat kunnen we doen door hier in de parameterlijst een gelijkheidsteken

00:32.120 --> 00:34.980
toe te voegen en dan onze standaardwaarde in te stellen.

00:34.980 --> 00:36.920
Wat natuurlijk bij ons type moet passen.

00:36.920 --> 00:40.020
Bijvoorbeeld één of wat de standaard zou moeten zijn.

00:40.020 --> 00:42.770
En nu kunnen we deze functie aanroepen met slechts

00:42.770 --> 00:44.080
één argument.

00:44.080 --> 00:46.700
Dus ik zou het zo kunnen aanroepen en TypeScript zou niet

00:46.700 --> 00:48.830
klagen omdat het detecteert dat we hier een

00:48.830 --> 00:50.200
standaard argument hebben

00:50.200 --> 00:51.860
dat dan voor b wordt genomen.

00:51.860 --> 00:53.910
En daarom krijg ik hier een uitvoer

00:53.910 --> 00:58.910
van zes omdat mijn standaard b één is en ik voeg er vijf aan toe, wat zes maakt Nu, een

00:59.130 --> 01:03.113
belangrijke opmerking over standaard argumenten hier.

01:04.010 --> 01:07.090
Ze moeten als laatste op de lijst staan.

01:07.090 --> 01:10.710
Als je bijvoorbeeld een standaard argument aan a toekent, hebben

01:10.710 --> 01:12.640
we een probleem. Waarom?

01:12.640 --> 01:15.290
Omdat standaardargumenten niet worden overgeslagen wanneer

01:15.290 --> 01:16.840
je een functie aanroept.

01:16.840 --> 01:19.490
Dus als ik hier een functie aanroep met één argument,

01:19.490 --> 01:21.990
dan worden de argumenten die ik hier doorgeef in

01:21.990 --> 01:25.060
dezelfde volgorde doorgegeven aan de parameters.

01:25.060 --> 01:27.240
Dus het aanroepen van de functie met één argument,

01:27.240 --> 01:29.900
vijf in dit geval, geeft dit ene argument door aan het eerste

01:29.900 --> 01:32.400
argument hier in de parameterlijst.

01:32.400 --> 01:34.150
En aangezien het tweede argument

01:34.150 --> 01:37.660
geen standaardwaarde heeft, is het niet optioneel.

01:37.660 --> 01:40.920
En dus geven we helemaal geen tweede argument.

01:40.920 --> 01:43.730
Dus TypeScript, of JavaScript eigenlijk, kijkt

01:43.730 --> 01:46.800
niet naar je functiedefinitie en raadt dat je waarschijnlijk

01:46.800 --> 01:50.650
het standaard argument wil overslaan en je waarde wil geven aan het

01:50.650 --> 01:53.290
niet-standaard argument.

01:53.290 --> 01:55.740
In plaats daarvan houdt hij zich gewoon aan de orde.

01:55.740 --> 01:59.720
En daarom moet u de standaardwaarden van rechts instellen.

01:59.720 --> 02:01.830
Zorg er dus voor dat de parameters

02:01.830 --> 02:04.010
waarvoor u geen standaardargumenten

02:04.010 --> 02:07.523
aanvaardt, vóór uw standaardparameters komen.
