WEBVTT

00:02.390 --> 00:04.530
Instructeur : Il est maintenant possible

00:04.530 --> 00:06.890
d'envoyer des demandes sans paquet tiers.

00:06.890 --> 00:10.140
En JavaScript moderne, dans les navigateurs modernes,

00:10.140 --> 00:11.910
vous devez récupérer l'API.

00:11.910 --> 00:13.620
Cette fonction est intégrée aux navigateurs,

00:13.620 --> 00:16.710
elle est disponible dans le monde entier et vous pouvez l'utiliser

00:16.710 --> 00:19.600
pour envoyer des demandes à des URL.

00:19.600 --> 00:22.450
Rien ne s'oppose à cette API, si ce n'est

00:22.450 --> 00:24.870
le fait que la gestion des erreurs

00:24.870 --> 00:27.210
peut être un peu maladroite.

00:27.210 --> 00:29.250
Mais je veux aussi m'entraîner à l'utilisation

00:29.250 --> 00:31.123
de bibliothèques tierces.

00:31.960 --> 00:36.070
Nous utiliserons donc le très populaire paquet axios.

00:36.070 --> 00:38.510
Il s'agit d'un paquet que vous pouvez utiliser

00:38.510 --> 00:43.510
en JavaScript et donc aussi en TypeScript pour envoyer des requêtes HTTP.

00:43.880 --> 00:47.263
Il nous suffit donc d'installer axios pour commencer à l'utiliser.

00:48.100 --> 00:51.080
Pour cela, dans notre projet où nous pouvons utiliser

00:51.080 --> 00:54.150
NPM pour gérer les dépendances, nous pouvons exécuter

00:54.150 --> 00:57.620
npm install, dash, dash save axios comme ceci et cela va maintenant

00:57.620 --> 01:00.520
installer le paquet axios.

01:00.520 --> 01:04.750
Avec cette installation, nous pouvons maintenant importer axios ici, importer

01:04.750 --> 01:07.390
axios depuis axios, et vous verrez quelque chose

01:07.390 --> 01:09.170
d'intéressant.

01:09.170 --> 01:12.090
Si je commence maintenant à utiliser ceci et que je tape un point

01:12.090 --> 01:13.990
ici, j'obtiens l'autocomplétion.

01:13.990 --> 01:16.290
Et par exemple, vous avez ici une méthode get

01:16.290 --> 01:18.523
qui enverra une requête get à une URL.

01:19.850 --> 01:23.150
Nous avons donc ici un support intégré pour TypeScript.

01:23.150 --> 01:25.640
Et si nous allons dans les modules de

01:25.640 --> 01:29.670
nœuds et que nous jetons un œil au paquet axios, le voici.

01:29.670 --> 01:33.970
Vous verrez qu'à l'intérieur, il y a un index. fichier dts.

01:33.970 --> 01:38.970
Les auteurs de la bibliothèque axios ont donc déjà regroupé leur bibliothèque

01:39.430 --> 01:43.750
avec un tel paquet de traduction TypeScript.

01:43.750 --> 01:47.440
Là, tout est expliqué à TypeScript.

01:47.440 --> 01:50.120
Ce paquet ou ce fichier explique essentiellement

01:50.120 --> 01:53.660
à TypeScript ce que cette bibliothèque JavaScript est capable de

01:53.660 --> 01:55.600
faire et quels types elle utilise.

01:55.600 --> 01:59.100
Maintenant, certaines bibliothèques le font et axios est l'une d'entre elles.

01:59.100 --> 02:02.070
Vous pouvez dire assez rapidement si une bibliothèque fait cela ou non,

02:02.070 --> 02:03.420
si vous commencez à l'utiliser.

02:03.420 --> 02:05.520
Si vous n'obtenez pas de support pour l'autocomplétion

02:05.520 --> 02:07.930
et que vous avez beaucoup d'erreurs de compilation, vous

02:07.930 --> 02:10.750
devez probablement installer des types supplémentaires.

02:10.750 --> 02:12.970
Si vous bénéficiez d'un bon support, comme c'est le

02:12.970 --> 02:16.120
cas ici, et que vous ne rencontrez pas d'erreurs de compilation par la suite,

02:16.120 --> 02:18.140
alors vous disposez déjà d'une bibliothèque avec

02:18.140 --> 02:20.170
des traductions de types intégrées.

02:20.170 --> 02:23.120
Et donc, vous n'avez pas besoin d'installer des types supplémentaires.

02:23.120 --> 02:26.240
C'est bon à savoir et nous avons ici un excellent exemple.

02:26.240 --> 02:27.800
Comme nous disposons d'un support intégré,

02:27.800 --> 02:30.410
nous pouvons commencer à utiliser l'accès immédiatement.

02:30.410 --> 02:34.350
Et je veux envoyer une requête HTTP à cette URL maintenant.

02:34.350 --> 02:37.980
Copions donc cette URL et entrons-la ici.

02:37.980 --> 02:40.220
Et je l'introduirai entre les guillemets

02:40.220 --> 02:42.440
pour créer un modèle littéral, afin

02:42.440 --> 02:45.880
qu'ils puissent facilement échanger des parties de cette

02:45.880 --> 02:49.050
chaîne contre des valeurs dynamiques.

02:49.050 --> 02:51.730
Collons donc cette chaîne, qui est assez longue,

02:51.730 --> 02:55.460
et commençons par remplacer votre clé API à la fin par notre clé

02:55.460 --> 02:59.210
API Google que nous avons stockée dans cette constante.

02:59.210 --> 03:01.690
Pour cela, comme il s'agit d'un modèle littéral,

03:01.690 --> 03:04.110
nous pouvons ajouter le signe dollar, les

03:04.110 --> 03:09.110
accolades, puis indiquer la clé API de Google pour utiliser cette constante.

03:10.820 --> 03:13.240
De plus, échangeons cette adresse.

03:13.240 --> 03:15.500
Ici, nous avons saisi une adresse fictive

03:15.500 --> 03:17.130
et, bien sûr, je veux utiliser

03:17.130 --> 03:19.300
l'adresse saisie par l'utilisateur.

03:19.300 --> 03:22.540
Maintenant, une remarque importante, cette adresse, bien sûr,

03:22.540 --> 03:24.910
est exactement le texte que l'utilisateur a saisi

03:24.910 --> 03:27.560
et qu'il a proposé peut contenir des caractères spéciaux,

03:27.560 --> 03:30.650
des espaces, des virgules, et bien plus encore.

03:30.650 --> 03:32.250
Et tous ces caractères et

03:32.250 --> 03:35.580
symboles ne sont pas pris en charge dans les URL.

03:35.580 --> 03:37.750
Nous devons donc convertir cette chaîne

03:37.750 --> 03:40.550
saisie en une chaîne compatible avec l'URL.

03:40.550 --> 03:43.810
Heureusement, TypeScript et JavaScript

03:43.810 --> 03:46.940
disposent d'une fonction intégrée qui nous

03:46.940 --> 03:50.460
aide à cet égard, la fonction encode URI.

03:50.460 --> 03:53.020
Nous pouvons l'appeler et lui passer une chaîne de

03:53.020 --> 03:54.770
caractères et cela convertira cette

03:54.770 --> 03:57.460
chaîne en une chaîne compatible avec l'URL.

03:57.460 --> 03:59.845
Avec cela, nous avons obtenu l'URL finie

03:59.845 --> 04:01.600
à laquelle nous pouvons envoyer

04:01.600 --> 04:04.900
la requête pour récupérer nos coordonnées.

04:04.900 --> 04:07.390
Maintenant, get nous donne une promesse parce que, bien

04:07.390 --> 04:10.620
sûr, l'envoi d'une telle demande comme une tâche asynchrone.

04:10.620 --> 04:13.430
Et là, nous avons un journal si cela réussit

04:13.430 --> 04:15.690
ou si nous avons une erreur technique

04:15.690 --> 04:18.620
ou un code de réponse d'erreur.

04:18.620 --> 04:21.560
Nous allons donc consigner dans la console toute erreur que nous pourrions

04:21.560 --> 04:24.710
obtenir à ce stade, car normalement nous devrions réussir.

04:24.710 --> 04:27.820
Et donc ici, je vais attendre ma réponse dans

04:27.820 --> 04:32.400
le bloc then et je veux aussi enregistrer cette réponse then.

04:32.400 --> 04:35.820
Donc maintenant avec ça, je dirais, voyons ce que ça donne.

04:35.820 --> 04:39.720
Réexécutons NPM start pour relancer le processus webpack et commencer

04:39.720 --> 04:40.953
la construction.

04:42.120 --> 04:43.790
Et retournons à notre application

04:43.790 --> 04:47.220
et entrons un endroit ici comme la 6ème avenue.

04:47.220 --> 04:50.090
Si j'appuie sur Rechercher l'adresse, vous verrez qu'au bout d'un moment,

04:50.090 --> 04:51.480
vous aurez une sortie ici.

04:51.480 --> 04:53.660
Et là, vous devriez avoir un code d'état

04:53.660 --> 04:56.120
de 200 qui signifie que la demande a réussi.

04:56.120 --> 04:59.090
Et vous avez un champ de données qui contient les données

04:59.090 --> 05:01.240
avec lesquelles le serveur répond.

05:01.240 --> 05:03.890
Ce champ de données a un champ de résultats et dans celui-ci

05:03.890 --> 05:06.570
nous avons un tableau, comme vous pouvez le voir.

05:06.570 --> 05:10.690
Dans ce tableau, nous avons quelques éléments, le nombre varie.

05:10.690 --> 05:13.770
Et ce sont essentiellement les résultats que Google a trouvés.

05:13.770 --> 05:16.740
Et le premier résultat est généralement le meilleur.

05:16.740 --> 05:18.790
Donc si vous regardez ça, nous voyons par

05:18.790 --> 05:20.460
exemple, l'adresse formatée.

05:20.460 --> 05:22.520
Donc l'adresse que Google a trouvée pour cette adresse

05:22.520 --> 05:23.790
que nous avons saisie, elle est

05:23.790 --> 05:26.570
un peu plus complète que celle que nous avons saisie.

05:26.570 --> 05:29.300
Et on a la clé géométrique ici.

05:29.300 --> 05:31.880
Et si nous développons ceci, nous voyons qu'il y a

05:31.880 --> 05:35.240
à son tour une clé de localisation et que celle-ci est finalement

05:35.240 --> 05:37.540
un objet avec les coordonnées qui nous intéressent,

05:37.540 --> 05:39.700
une latitude et une longitude.

05:39.700 --> 05:43.000
Donc au final, il faut forer dans les données, les résultats

05:43.000 --> 05:47.390
et puis là le premier résultat, la géométrie, la localisation et on aura un objet

05:47.390 --> 05:50.030
avec une latitude et une longitude.

05:50.030 --> 05:52.840
Et nous pourrons ensuite restituer cette latitude

05:52.840 --> 05:55.240
et cette longitude sur une carte.

05:55.240 --> 05:57.430
Donc pour l'instant, extrayons

05:57.430 --> 05:59.360
simplement ceci et obtenons

05:59.360 --> 06:04.360
nos coordonnées en accédant à la réponse point données point résultats.

06:04.600 --> 06:09.600
Et puis là, le premier résultat, la géométrie du point, l'emplacement du point, donc

06:11.200 --> 06:13.093
il faut vraiment creuser ça.

06:15.130 --> 06:16.880
Ce que vous remarquerez bien sûr,

06:16.880 --> 06:19.850
c'est que si TypeScript ne se plaint pas ici, nous n'avons

06:19.850 --> 06:23.280
pas non plus de bon support TypeScript, n'est-ce pas ?

06:23.280 --> 06:25.740
Si je tape un point ici, cela ne suggère pas qu'il

06:25.740 --> 06:27.620
y a une propriété de résultats.

06:27.620 --> 06:30.350
Et en effet, je pourrais essayer d'accéder à n'importe

06:30.350 --> 06:33.840
quoi ici, même à quelque chose qui n'existe pas sur la réponse et cela

06:33.840 --> 06:34.820
a du sens.

06:34.820 --> 06:38.010
Comment TypeScript peut-il savoir ce qui sera dans la réponse

06:38.010 --> 06:40.920
de toute URL à laquelle j'envoie une requête ?

06:40.920 --> 06:42.810
TypeScript ne va pas envoyer la

06:42.810 --> 06:44.970
requête pendant le développement pour

06:44.970 --> 06:46.510
découvrir ce qu'il y a dedans,

06:46.510 --> 06:49.170
ce ne serait pas non plus très bon.

06:49.170 --> 06:51.400
Mais nous pouvons dire à TypeScript

06:51.400 --> 06:53.950
ce que nous attendons de la réponse parce

06:53.950 --> 06:58.950
que cette méthode get est en fait une méthode générique et il y a n'importe quoi ici,

06:59.040 --> 07:02.830
c'est en fait le type de la réponse que nous attendons.

07:02.830 --> 07:06.880
Donc ici, je peux ajouter mon type de réponse et je

07:06.880 --> 07:11.270
peux dire à TypeScript que ce que j'attends est un objet

07:11.270 --> 07:15.260
qui a une clé de résultats, qui à son tour, est un tableau

07:15.260 --> 07:18.330
plein d'objets, où chaque objet a une

07:18.330 --> 07:22.170
clé de géométrie, qui à son tour est un objet, qui

07:22.170 --> 07:24.330
a une clé d'emplacement, qui

07:24.330 --> 07:28.160
à son tour est un objet, qui a une latitude, qui est

07:28.160 --> 07:31.170
un nombre, et une longitude, qui est un

07:31.170 --> 07:33.510
nombre.

07:33.510 --> 07:36.030
Il s'agit donc d'un type assez complexe.

07:36.030 --> 07:39.400
Mais avec cela, si nous tapons un point ici, j'obtiens l'autocomplétion

07:39.400 --> 07:42.220
et TypeScript comprend ce à quoi j'accède ici.

07:42.220 --> 07:44.860
Et bien sûr, nous pouvons aussi extraire ce type d'ici

07:44.860 --> 07:46.620
et créer notre propre alias de type.

07:46.620 --> 07:50.497
Peut-être ici, réponse de Google sur le géocodage.

07:53.220 --> 07:55.380
Ce serait mon type personnalisé ici,

07:55.380 --> 07:58.420
et ensuite je peux dire à TypeScript qu'ici je m'attends

07:58.420 --> 08:01.540
à obtenir cette réponse de géocodage Google.

08:01.540 --> 08:03.900
Bien entendu, la réponse ne contient pas

08:03.900 --> 08:07.020
seulement le tableau des résultats, mais aussi un code

08:07.020 --> 08:09.460
d'état et plusieurs autres champs dans chaque

08:09.460 --> 08:13.040
élément du tableau des résultats, puis la géométrie.

08:13.040 --> 08:17.030
Bien sûr, vous pouvez simplement ajouter tous ces champs

08:18.210 --> 08:21.330
à votre type personnalisé, mais ici, je veux

08:21.330 --> 08:25.640
me concentrer sur les valeurs qui m'intéressent vraiment.

08:25.640 --> 08:27.360
Et donc il y a en fait un autre champ

08:27.360 --> 08:30.900
que je vais ajouter, et c'est le statut à côté des résultats.

08:30.900 --> 08:34.520
Donc ici, au niveau supérieur, nous avons le statut et

08:34.520 --> 08:35.500
ce sera une chaîne

08:35.500 --> 08:38.390
qui nous dira si Google a réussi ou non.

08:38.390 --> 08:41.810
Et le statut sera en fait soit correct, soit

08:41.810 --> 08:44.010
une ou deux autres valeurs.

08:44.010 --> 08:46.910
Il s'agit essentiellement d'un message d'état que Google

08:46.910 --> 08:50.020
envoie pour nous indiquer s'il a réussi ou non à récupérer les

08:50.020 --> 08:51.890
coordonnées de cette adresse.

08:51.890 --> 08:54.000
Et bien sûr, dans les documents officiels, nous

08:54.000 --> 08:57.280
pouvons apprendre quel type de réponses nous pourrions recevoir ici.

08:57.280 --> 08:58.900
Si vous descendez un peu et cliquez

08:58.900 --> 09:01.070
sur comprendre la réponse, vous apprenez

09:01.070 --> 09:04.240
ce que contient la réponse que vous recevez et vous cliquez

09:04.240 --> 09:07.000
donc sur géocoder les réponses.

09:07.000 --> 09:08.580
Puis, dans la section sur les codes d'état,

09:08.580 --> 09:11.090
nous découvrons les codes d'état disponibles.

09:11.090 --> 09:15.090
Par exemple, nous avons tous obtenu un résultat nul si rien n'a été trouvé.

09:15.090 --> 09:16.850
Nous avons également obtenu quelques autres

09:16.850 --> 09:19.223
codes, mais ici je ne m'intéresse vraiment qu'à ces deux-là.

09:20.200 --> 09:23.310
Donc je dis à TypeScript qu'ici, je reçois un code d'état qui

09:23.310 --> 09:24.890
est l'une de ces deux valeurs.

09:24.890 --> 09:27.480
Encore une fois, il pourrait avoir une valeur numérique

09:27.480 --> 09:29.830
également, mais cela me convient ici.

09:29.830 --> 09:31.640
Comme je l'ai dit, vous pouvez bien sûr

09:31.640 --> 09:33.700
écrire ceci de manière plus complète.

09:33.700 --> 09:36.230
Maintenant, avec cet ajout, en bas dans le bloc then, nous

09:36.230 --> 09:41.230
pouvons vérifier si la réponse point data point status n'est pas correcte, ce qui signifie que quelque chose

09:41.580 --> 09:44.120
a mal tourné et dans ce cas, nous pouvons lancer une erreur

09:44.120 --> 09:46.710
ici et donc nous nous retrouverons dans le bloc catch où

09:46.710 --> 09:48.090
nous pourrons mettre en place

09:48.090 --> 09:49.810
une gestion des erreurs.

09:49.810 --> 09:54.280
Donc ici, nous allons lancer une erreur qui ne peut pas récupérer l'emplacement.

09:54.280 --> 09:57.080
Et puis ici, dans le gestionnaire d'erreur, nous pouvons

09:57.080 --> 09:59.150
lancer une alerte où nous affichons au

09:59.150 --> 10:01.230
moins le message d'erreur.

10:01.230 --> 10:04.660
Il ne s'agit bien sûr que d'une gestion très basique des erreurs.

10:04.660 --> 10:06.950
Sinon, si nous avons une réponse positive, nous récupérons

10:06.950 --> 10:09.910
nos coordonnées ici et maintenant nous pouvons utiliser ces coordonnées

10:09.910 --> 10:12.113
pour les afficher sur une carte.
