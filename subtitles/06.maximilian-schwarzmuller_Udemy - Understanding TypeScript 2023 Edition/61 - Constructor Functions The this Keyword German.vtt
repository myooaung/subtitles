WEBVTT

00:02.160 --> 00:03.330
Moderator: Nun haben

00:03.330 --> 00:06.080
Klassen und alle Konstruktorfunktionen, die es

00:06.080 --> 00:09.280
schon länger gibt, nicht nur Eigenschaften, mit denen man

00:09.280 --> 00:12.780
die allgemeine Struktur des Objekts definieren kann.

00:12.780 --> 00:14.770
Sie können auch Methoden hinzufügen.

00:14.770 --> 00:17.460
Wir haben dort tatsächlich die Konstruktormethode.

00:17.460 --> 00:19.620
Aber das ist nur eine Hilfsfunktion, die

00:19.620 --> 00:22.940
aufgerufen wird, wenn Sie die Klasse instanziieren.

00:22.940 --> 00:25.584
Erinnern Sie sich daran, dass wir früher nur Konstruktorfunktionen

00:25.584 --> 00:28.100
hatten. Jetzt haben wir diesen syntaktischen Zucker, aber wir

00:28.100 --> 00:30.460
haben immer noch die Funktion construct a, die wir hinzufügen

00:30.460 --> 00:33.300
können, um jeden Initialisierungscode auszuführen.

00:33.300 --> 00:36.350
Vielleicht möchten Sie auch ein paar Funktionen oder

00:36.350 --> 00:38.600
Methoden hinzufügen, die Sie dann mit dem

00:38.600 --> 00:40.980
erstellten Objekt aufrufen können.

00:40.980 --> 00:44.000
Zum Beispiel eine Beschreibungsmethode hier in

00:44.000 --> 00:46.000
unserer Abteilungsklasse.

00:46.000 --> 00:47.994
Jetzt wird eine Methode wie folgt hinzugefügt,

00:47.994 --> 00:49.382
der Name der Methode, dann

00:49.382 --> 00:53.270
kein Doppelpunkt, kein Gleichheitszeichen stattdessen, Klammern

00:53.270 --> 00:56.090
und dann geschweifte Klammern.

00:56.090 --> 00:59.070
Die Klammern enthalten alle Argumente, die Sie benötigen.

00:59.070 --> 01:00.780
Nehmen wir an, wir brauchen keine,

01:00.780 --> 01:03.330
sonst könnten Sie Parameter hinzufügen, so wie Sie

01:03.330 --> 01:05.150
es bei einer normalen Funktion tun.

01:05.150 --> 01:07.280
Und was Sie in der Regel immer brauchen, ist

01:07.280 --> 01:10.000
ein Funktionskörper oder ein Methodenkörper zwischen

01:10.000 --> 01:12.020
den geschweiften Klammern.

01:12.020 --> 01:14.693
Hier definieren Sie nun die Logik Ihrer Methode.

01:15.580 --> 01:19.570
Und dort sollten wir vielleicht den Namen der Abteilung mit ein paar

01:19.570 --> 01:22.410
zusätzlichen Informationen ausgeben.

01:22.410 --> 01:26.230
Wir können dies natürlich hier mit der Konsole tun. Protokoll, zum Beispiel

01:26.230 --> 01:30.620
Abteilung, Doppelpunkt und dann vielleicht Name.

01:30.620 --> 01:32.100
Dies würde jedoch nicht funktionieren.

01:32.100 --> 01:34.570
Dies würde nach einem Variablennamen suchen,

01:34.570 --> 01:37.710
der innerhalb der beschriebenen Methode oder außerhalb

01:37.710 --> 01:40.860
der Klasse als globale Variable existieren muss.

01:40.860 --> 01:42.470
Und wie Sie sehen, wenn es wählte Alter,

01:42.470 --> 01:44.433
bekomme ich einen Fehler für den Namen, den ich

01:44.433 --> 01:46.540
nicht tun, bekomme ich nicht, weil es tatsächlich

01:46.540 --> 01:50.100
eine globale Namensvariable im Browser in das Fenster-Objekt ist.

01:50.100 --> 01:53.030
Dies würde sich jedoch nicht auf diese Eigenschaft name beziehen,

01:53.030 --> 01:57.130
sondern auf eine globale Namensvariable außerhalb dieser Klasse.

01:57.130 --> 01:59.599
Um auf eine Klasseneigenschaft oder -methode innerhalb

01:59.599 --> 02:01.930
der Klasse zu verweisen, müssen wir das this-Schlüsselwort

02:01.930 --> 02:03.590
verwenden, wie wir es hier im Konstruktor

02:03.590 --> 02:05.630
tun.

02:05.630 --> 02:08.980
Diese verweist dann in der Regel auf die konkrete

02:08.980 --> 02:12.400
Instanz dieser Klasse, die erstellt wurde.

02:12.400 --> 02:14.240
Und dort können wir mit der Punktnotation

02:14.240 --> 02:16.600
auf alle Eigenschaften und Methoden dieser Instanz

02:16.600 --> 02:17.650
zugreifen.

02:17.650 --> 02:19.555
In diesem Fall das hier. Name.

02:19.555 --> 02:24.555
Wenn ich also jetzt da unten die Buchhaltung anrufe. so beschreiben.

02:24.583 --> 02:28.110
Das Schlüsselwort this verweist bei der Ausführung von this

02:28.110 --> 02:30.920
auf das konkrete Buchhaltungsobjekt, das auf der

02:30.920 --> 02:33.730
Grundlage dieser Klasse erstellt wurde.

02:33.730 --> 02:35.530
Wenn ich das nun speichere und neu

02:35.530 --> 02:38.570
lade, sollten wir diese Ausgabe hier sehen, die natürlich

02:38.570 --> 02:40.420
einen Tippfehler hat, aber im Allgemeinen

02:40.420 --> 02:42.110
funktioniert sie.

02:42.110 --> 02:43.944
Korrigieren wir nun den Tippfehler hier.

02:43.944 --> 02:46.190
So können wir also eine Methode hinzufügen.

02:46.190 --> 02:48.166
Was ist nun wichtig an diesem Schlüsselwort?

02:48.166 --> 02:50.600
Wie Sie wahrscheinlich wissen, wenn Sie schon ein

02:50.600 --> 02:54.890
wenig mit JavaScript gearbeitet haben, kann das Schlüsselwort this kompliziert sein.

02:54.890 --> 02:56.090
Wenn ich zum Beispiel

02:56.090 --> 03:00.090
ein weiteres Objekt hier hinzufügen würde, Buchhaltung kopieren

03:01.480 --> 03:03.350
und dies ist unser Objekt, das

03:03.350 --> 03:06.430
nur die Methode beschreiben hat und ich wage es,

03:06.430 --> 03:11.270
auf Buchhaltung zu zeigen. beschreiben.

03:11.270 --> 03:15.470
Wenn ich dann accountingcopy aufrufe. als Methode beschreiben, was wird Ihrer

03:15.470 --> 03:17.150
Meinung nach passieren?

03:17.150 --> 03:19.200
Glauben Sie, dass wir eine Fehlermeldung erhalten werden?

03:19.200 --> 03:21.200
Wir erhalten sicherlich keinen Kompilierungsfehler,

03:21.200 --> 03:22.927
der sich problemlos kompilieren lässt.

03:22.927 --> 03:26.360
Aber zur Laufzeit sehen wir die Abteilung undefiniert.

03:26.360 --> 03:28.780
Der Grund dafür ist, dass ich diesem Objekt, das

03:28.780 --> 03:32.010
mit dem Objektliteral erstellt wird, eine Beschreibungseigenschaft

03:32.010 --> 03:34.040
hinzufüge, und zwar nicht auf der Grundlage

03:34.040 --> 03:37.888
dieser Klasse, sondern einfach als Dummy-Objekt, das nicht auf einer bestimmten

03:37.888 --> 03:41.420
von Ihnen definierten Klasse basiert.

03:41.420 --> 03:44.360
Und dann ist der Wert für diese describe-Eigenschaft

03:44.360 --> 03:49.000
ein Zeiger auf die describe-Methode in meinem Buchhaltungsobjekt.

03:49.000 --> 03:52.168
Ich zeige also auf diese Methode hier, um nach

03:52.168 --> 03:54.690
diesem konkreten Objekt zu suchen.

03:54.690 --> 03:56.240
Ich führe sie nicht aus.

03:56.240 --> 03:57.723
Ich übergebe also nicht den Wert

03:57.723 --> 04:00.410
dieser Funktionsausführung zu beschreiben.

04:00.410 --> 04:04.090
Ich übergehe hier wirklich die Funktion selbst, um sie zu beschreiben.

04:04.090 --> 04:06.430
Wenn ich dann describe hier auf der Kopie aufrufe,

04:06.430 --> 04:08.950
wird die Methode tatsächlich ausgeführt und alles

04:08.950 --> 04:10.440
funktioniert korrekt.

04:10.440 --> 04:13.690
Das Problem ist nur, dass sich diese Methode, wenn sie ausgeführt

04:13.690 --> 04:17.040
wird, nicht auf das Objekt bezieht, zu dem die Methode ursprünglich

04:17.040 --> 04:21.140
gehörte, also nicht auf das Buchhaltungsobjekt.

04:21.140 --> 04:22.350
Stattdessen bezieht sich

04:22.350 --> 04:25.050
dies, und das ist eine gute Faustregel, die Sie sich merken

04:25.050 --> 04:27.900
können, normalerweise auf das Ding, das für den Aufruf einer

04:27.900 --> 04:29.650
Methode verantwortlich ist.

04:29.650 --> 04:32.190
Und verantwortlich für den Aufruf der Methode

04:32.190 --> 04:34.880
describe ist in diesem Fall accounting copy.

04:34.880 --> 04:39.160
Denn wir rufen auf, die Buchhaltung zu kopieren.

04:39.160 --> 04:42.320
Dies bezieht sich also auf das, was vor dem Punkt steht, nämlich

04:42.320 --> 04:43.980
die Buchhaltung Copy.

04:43.980 --> 04:47.530
Dabei handelt es sich jedoch um ein Objekt, das keine Namenseigenschaft hat.

04:47.530 --> 04:49.678
Wenn ich also darauf zugreife. name, erhalte ich

04:49.678 --> 04:53.968
eine Fehlermeldung, weil dies nicht auf ein Objekt mit einer

04:53.968 --> 04:56.610
Eigenschaft name verweist.

04:56.610 --> 04:59.220
Der Name ist also in der Tat undefiniert.

04:59.220 --> 05:02.260
Und deshalb erhalte ich diese seltsame Ausgabe.

05:02.260 --> 05:04.310
Das ist eine Sache, die man im Auge behalten

05:04.310 --> 05:07.470
muss, nicht nur in TypeScript, sondern auch in JavaScript.

05:07.470 --> 05:09.540
Und natürlich kann es Ihnen deshalb

05:09.540 --> 05:11.500
auch in TypeScript passieren.

05:11.500 --> 05:13.940
Um dieses "this"-Problem zu umgehen,

05:13.940 --> 05:16.660
können Sie der describe-Methode einen

05:16.660 --> 05:18.150
Parameter hinzufügen,

05:18.150 --> 05:19.730
der this heißt.

05:19.730 --> 05:21.380
Das ist ein spezieller Parameter,

05:21.380 --> 05:25.334
eine spezielle Anweisung, die von TypeScript verstanden wird.

05:25.334 --> 05:28.430
Wenn Sie hier einen Parameter mit dem Namen this hinzufügen,

05:28.430 --> 05:31.420
der nicht wirklich ein erwarteter Parameter ist, können

05:31.420 --> 05:36.010
Sie describe trotzdem aufrufen, ohne einen Wert zu übergeben.

05:36.010 --> 05:38.476
Stattdessen wird dies von TypeScript

05:38.476 --> 05:42.980
als Hinweis darauf interpretiert, worauf es sich beziehen soll.

05:42.980 --> 05:45.960
Und jetzt ist es wichtig, diesem einen Typ zuzuordnen.

05:45.960 --> 05:48.810
Und der Typ hier, in diesem Fall sollte unsere

05:48.810 --> 05:51.780
Klasse Typ hier so Abteilung sein.

05:51.780 --> 05:53.840
Was ich damit sagen will, ist, wenn

05:53.840 --> 05:56.250
describe innerhalb von describe ausgeführt

05:56.250 --> 05:59.375
wird, also in diesem Fall hier, sollte es sich immer

05:59.375 --> 06:02.550
auf eine Instanz beziehen, die auf der Abteilungsklasse

06:02.550 --> 06:05.040
basiert.

06:05.040 --> 06:09.160
Also ein Objekt, das am Ende vom Typ Abteilung wäre.

06:09.160 --> 06:12.370
Und deshalb bekommen wir jetzt tatsächlich einen

06:12.370 --> 06:14.140
Fehler da unten, wir bekommen

06:14.140 --> 06:16.012
einen Fehler hier, weil wir,

06:16.012 --> 06:19.800
wenn wir describe hier auf accounting copy aufrufen, wir

06:19.800 --> 06:24.100
es nicht auf eine Instanz von department aufrufen.

06:24.100 --> 06:26.350
Es wird also dagegen verstoßen.

06:26.350 --> 06:29.540
Dies bezieht sich in diesem Fall nicht auf

06:29.540 --> 06:32.250
ein Objekt vom Typ Abteilung.

06:32.250 --> 06:34.690
Hier fügen wir also etwas zusätzliche Typsicherheit

06:34.690 --> 06:36.920
hinzu, indem wir diesen Dummy-Parameter hinzufügen,

06:36.920 --> 06:39.450
denn wenn ich jetzt versuche, dies zu speichern, erhalte

06:39.450 --> 06:42.480
ich einen Fehler im Zusammenhang mit dieser Zeile hier.

06:42.480 --> 06:44.950
Denn jetzt würden wir in der Tat einen Code ausführen, der

06:44.950 --> 06:47.030
nicht wie erwartet funktionieren würde.

06:47.030 --> 06:49.260
Wir müssen das also beheben, indem wir zum

06:49.260 --> 06:51.140
Beispiel hier eine name-Eigenschaft

06:52.040 --> 06:55.290
hinzufügen, damit das funktioniert, weil TypeScript jetzt

06:55.290 --> 06:57.702
sieht, dass das Objekt, das Sie describe aufrufen,

06:57.702 --> 07:02.702
jetzt eine name-Eigenschaft hat, genau wie es das erwartet, weil es auf dem department-Objekt

07:03.840 --> 07:05.803
basiert, das auch eine name-Eigenschaft

07:05.803 --> 07:08.070
hat.

07:08.070 --> 07:10.790
Hier würde sich TypeScript also freuen, weil wir

07:10.790 --> 07:12.270
Namen hinzugefügt haben.

07:12.270 --> 07:14.934
Wenn ich sie entferne, erhalten wir den Fehler zurück

07:14.934 --> 07:17.277
mit Namen, aber das funktioniert, und wir vermeiden

07:17.277 --> 07:19.750
diese undefinierte Ausgabe von vorher.

07:19.750 --> 07:22.770
Es ist also wichtig, dies zu verstehen.

07:22.770 --> 07:26.140
Und es ist wichtig, sich dieser Verbesserung bewusst zu sein, die Sie

07:26.140 --> 07:28.410
in Ihren Code einbauen können, um sicherzustellen,

07:28.410 --> 07:31.190
dass Sie unerwünschte Verhaltensweisen abfangen, wie wir

07:31.190 --> 07:32.993
sie vorhin unten hatten.
