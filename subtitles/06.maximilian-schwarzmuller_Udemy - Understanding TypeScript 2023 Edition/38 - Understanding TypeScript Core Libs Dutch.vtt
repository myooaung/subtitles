WEBVTT

00:02.190 --> 00:03.570
-We hebben hier ook een module.

00:03.570 --> 00:06.050
Nu, module is een optie die ik voor nu oversla,

00:06.050 --> 00:07.540
omdat het echt pas zin heeft

00:07.540 --> 00:10.830
als we leren over modules in TypeScript en hoe we meerdere

00:10.830 --> 00:13.400
bestanden kunnen verbinden.

00:13.400 --> 00:15.350
Dus laten we dat voor nu negeren.

00:15.350 --> 00:17.250
Lib is wel een interessante.

00:17.250 --> 00:20.890
Lib is een optie waarmee u kunt aangeven welke

00:20.890 --> 00:25.650
standaard objecten en functies TypeScript kent.

00:25.650 --> 00:28.580
Daarmee bedoel ik dingen als werken met de dom.

00:28.580 --> 00:31.930
Laten we zeggen in index. html we hebben een knop en op deze

00:31.930 --> 00:33.700
knop zeggen we, "Klik me. Als we nu op deze knop klikken, willen we

00:33.700 --> 00:35.100
alleen het bericht afdrukken.

00:35.100 --> 00:36.610
Nu, in app. ts kunnen we deze knop selecteren.

00:36.610 --> 00:39.820
We kunnen toegang krijgen tot

00:39.820 --> 00:41.420
deze knop met document. querySelector.

00:43.808 --> 00:44.641
Bijvoorbeeld, door de eerste knop te selecteren vinden we.

00:44.641 --> 00:48.130
Als we dat doen dan werkt dit.

00:48.130 --> 00:51.580
We krijgen hier geen soorten fouten.

00:51.580 --> 00:53.000
Dus als ik naar mijn knop ga

00:53.000 --> 00:58.000
en hier een EventListener toevoeg, krijg ik hier eigenlijk een foutmelding omdat TypeScript

00:58.390 --> 01:00.990
niet zeker weet of we hier een knop vinden.

01:00.990 --> 01:04.010
Voorlopig kunnen we dat omzeilen met een uitroepteken

01:04.010 --> 01:07.310
na deze regel en ik kom in de toekomst terug op wat dit

01:07.310 --> 01:08.860
precies doet.

01:08.860 --> 01:11.320
Het vertelt TypeScript in feite: "Maak je

01:11.320 --> 01:13.667
geen zorgen, zo'n knop zal bestaan.

01:13.667 --> 01:15.097
"We zullen hier een waarde krijgen. Dus nu kunnen we hier een klikgebeurtenis toevoegen.

01:15.097 --> 01:17.360
En zoek dan een anonieme functie

01:17.360 --> 01:19.470
misschien waar een console. log geklikt.

01:19.470 --> 01:21.670
Nu, het interessante hier is niet zozeer dat ik

01:21.670 --> 01:24.920
het uitroepteken moest toevoegen,

01:24.920 --> 01:26.450
zoals ik al zei kom ik daar nog op terug,

01:26.450 --> 01:29.310
maar dat als ik tsc uitvoer dit gewoon compileert.

01:29.310 --> 01:31.150
Moet TypeScript nu niet

01:31.150 --> 01:34.840
klagen dat het document hier onbekend is?

01:34.840 --> 01:38.370
Hoe weet het dat we zo'n document, constante of variabele beschikbaar

01:38.370 --> 01:39.690
hebben?

01:39.690 --> 01:43.290
Hoe weet het dat, zelfs als we dat beschikbaar hebben,

01:43.290 --> 01:45.610
het een object bevat dat onze querySelector

01:45.610 --> 01:48.350
methode heeft?

01:48.350 --> 01:50.010
Hoe weet het dat de knop iets is dat addEventListener

01:50.010 --> 01:51.690
methode heeft?

01:51.690 --> 01:55.932
Hoe weet TypeScript dat allemaal?

01:55.932 --> 01:57.120
Nu zou je kunnen zeggen, "Natuurlijk weet het dat. Want in Vanilla JavaScript

01:57.120 --> 01:59.290
zou dit geldige code zijn, maar bedenk dat wanneer

01:59.290 --> 02:01.430
je TypeScript-code schrijft, je die niet noodzakelijkerwijs

02:01.430 --> 02:03.290
voor de browser schrijft.

02:03.290 --> 02:05.580
Je zou je Node. js applicatie met TypeScript

02:05.580 --> 02:08.080
en daar zou dit inderdaad

02:08.080 --> 02:11.310
allemaal niet werken.

02:11.310 --> 02:13.200
Dus, de reden waarom dit werkt

02:13.200 --> 02:14.630
is deze lib-optie en zoals je ziet is die hier

02:14.630 --> 02:18.280
niet eens ingesteld, maar als die niet is ingesteld dan worden sommige standaardwaarden aangenomen.

02:18.280 --> 02:21.940
Als het niet is ingesteld, hangen de standaardwaarden

02:21.940 --> 02:24.420
af van uw JavaScript-doel hier,

02:24.420 --> 02:28.180
en voor es6 bevat het standaard alle functies die

02:28.180 --> 02:31.536
globaal beschikbaar zijn in es6.

02:31.536 --> 02:33.270
Bijvoorbeeld het Map object dat beschikbaar is in es6.

02:33.270 --> 02:35.940
Daarom zou het niet klagen als je Map gebruikt.

02:35.940 --> 02:40.120
Het gaat er dus van uit dat alle es6-functies die globaal

02:40.120 --> 02:45.120
beschikbaar zijn gemaakt in JavaScript, ook beschikbaar zijn

02:46.400 --> 02:48.700
in TypeScript.

02:50.677 --> 02:51.780
En bovendien gaat het

02:51.780 --> 02:54.530
ervan uit dat alle DOM API's beschikbaar zijn.

02:54.530 --> 02:57.070
De gedetailleerde beschrijvingen van al deze opties

02:57.070 --> 03:00.670
vindt u overigens in de officiële doos die in de lezing aan het eind van deze

03:00.670 --> 03:01.740
module is gelinkt.

03:01.740 --> 03:04.550
Dus, lang verhaal kort, als de lib optie niet is ingesteld worden

03:04.550 --> 03:07.300
sommige standaardwaarden aangenomen en dit zijn typisch

03:07.300 --> 03:09.490
de standaardwaarden die je nodig hebt om TypeScript

03:09.490 --> 03:11.520
te laten draaien in de browser.

03:11.520 --> 03:13.760
Dus alle DOM API's zijn verdwenen.

03:13.760 --> 03:16.030
Als we dit becommentariëren en ik

03:16.030 --> 03:19.014
compileer nu alles, dan krijg ik zeker een fout,

03:19.014 --> 03:20.670
want nu ze het becommentariëren

03:20.670 --> 03:24.780
hebben we de standaardinstellingen niet meer.

03:24.780 --> 03:26.010
In plaats daarvan zeggen we nu: "Hé, voeg

03:26.010 --> 03:28.050
alsjeblieft "enkele standaardbibliotheken" toe, enkele standaard

03:28.050 --> 03:30.370
typedefinities zou je kunnen zeggen, die ik je in deze array zal geven.

03:30.370 --> 03:32.437
En, zoals je ziet, geef ik hier

03:32.437 --> 03:36.330
geen beschrijving, geen paden, geen waarden door.

03:36.330 --> 03:39.470
En daarom zeg ik nu tegen TypeScript: "Hé, wat betreft

03:39.470 --> 03:43.213
alle defaults, weet je, "hou hier alsjeblieft rekening

03:44.162 --> 03:45.050
mee. En, weet je, niets.

03:45.050 --> 03:46.920
Dus, alleen als dat wordt uitgecommentarieerd,

03:46.920 --> 03:50.037
werkt het, omdat TypeScript dan een aantal standaardwaarden aanneemt.

03:50.037 --> 03:51.770
Als ik de standaard expliciet instel,

03:51.770 --> 03:53.580
dan houdt TypeScript zich natuurlijk

03:53.580 --> 03:55.300
aan wat ik hier instel.

03:55.300 --> 03:57.410
En hier bijvoorbeeld, kent het geen document,

03:57.410 --> 03:59.740
het kent zelfs de console niet.

03:59.740 --> 04:01.600
Dus daarom willen we deze twee meer redelijke

04:01.600 --> 04:02.680
waarden instellen en,

04:02.680 --> 04:05.410
nogmaals, als je op control spatie drukt, en hier krijg

04:05.410 --> 04:07.343
je auto completion.

04:08.900 --> 04:10.930
Daar kunnen we bijvoorbeeld dom.

04:10.930 --> 04:12.360
Dat is een identifier en er zijn enkele voorgedefinieerde

04:12.360 --> 04:13.800
identifiers, die TypeScript begrijpt, nogmaals,

04:13.800 --> 04:15.800
u vindt een volledige lijst in de officiële docs.

04:15.800 --> 04:18.280
De documenten voor deze optie

04:18.280 --> 04:21.070
zijn ook bij deze lezing gevoegd.

04:21.070 --> 04:22.840
Dit is dus een identifier die TypeScript

04:22.840 --> 04:26.070
begrijpt en die in principe alle DOM API's in TypeScript

04:26.070 --> 04:27.750
ontsluit, zodat TypeScript

04:27.750 --> 04:30.100
begrijpt wat je hier doet.

04:30.100 --> 04:32.680
Dus nu zie je al dat het console kent,

04:32.680 --> 04:35.150
het kent document, enzovoort.

04:35.150 --> 04:37.040
Aangezien we nu met Next-Gen

04:37.040 --> 04:40.100
JavaScript werken, moeten we ook de es6 optie toevoegen,

04:40.100 --> 04:42.550
zodat TypeScript ook alle globaal beschikbare

04:42.550 --> 04:45.400
es6 opties begrijpt.

04:45.400 --> 04:47.896
En het is ook een goed idee om dom toe te voegen. iterable en

04:47.896 --> 04:50.830
scripthost.

04:50.830 --> 04:54.130
Hiermee ontgrendelen we alle kernfuncties van JavaScript

04:54.130 --> 04:56.540
die u wilt gebruiken, en dit is trouwens de

04:56.540 --> 05:00.620
exacte standaardinstelling die u

05:00.620 --> 05:02.530
krijgt als u doel op es6 zet.

05:02.530 --> 05:05.250
Dus, als je dit becommentarieert en het zo instelt,

05:05.250 --> 05:07.360
heb je precies hetzelfde gedrag als wanneer

05:07.360 --> 05:09.980
je lib helemaal niet specificeert.

05:09.980 --> 05:13.550
Nu, hier zal ik dat wel becommentariëren en daarmee

05:13.550 --> 05:15.860
zal dit compileren.

05:15.860 --> 05:17.959
Nogmaals, dit is een beetje overbodig,

05:17.959 --> 05:20.920
ik wil alleen uitleggen wat het doet.
