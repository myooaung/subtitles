WEBVTT

00:02.160 --> 00:05.373
-: Also zurück in unserem Projekt, wenn Sie Webpack dort verwenden möchten, werde

00:07.223 --> 00:09.948
ich zunächst meine Kompilierung und den aktuellen Entwicklungsserver

00:09.948 --> 00:10.870
beenden, und dann stat,

00:10.870 --> 00:13.440
stellen Sie sicher, dass wir Webpack dort verwenden können.

00:13.440 --> 00:16.420
Da dies nun bereits eine Datei der package dot json-Datei ist,

00:16.420 --> 00:19.462
können wir NPM verwenden, um weitere Abhängigkeiten in dieses

00:19.462 --> 00:21.050
Projekt zu installieren.

00:21.050 --> 00:23.410
Wir brauchen also einfach mehr Bibliotheken von Drittanbietern

00:23.410 --> 00:24.940
in diesem Projekt.

00:24.940 --> 00:28.610
Und damit meine ich nicht Bibliotheken von Drittanbietern, die bestimmte

00:28.610 --> 00:31.480
Funktionen unter Verwendung unseres Codes bereitstellen,

00:31.480 --> 00:33.930
sondern Bibliotheken von Drittanbietern, die uns

00:33.930 --> 00:37.157
helfen, einen Projekt-Workflow und eine Konfiguration einzurichten,

00:37.157 --> 00:40.430
die die Entwicklung für uns sehr effizient macht.

00:40.430 --> 00:45.110
Wir tun dies mit installiertem NPM, dash dash safe dash dev,

00:45.110 --> 00:48.600
um anzuzeigen, dass es sich um eine reine Entwicklungsabhängigkeit

00:48.600 --> 00:53.600
handelt, und dann webpack webpack dash CLI, webpack dash dev dash

00:53.713 --> 00:58.713
server typescript und ts loader.

01:01.030 --> 01:03.040
Das sind also eine ganze Reihe von Paketen, und ich

01:03.040 --> 01:04.800
werde gleich sagen, was sie bewirken.

01:04.800 --> 01:06.680
Drücken wir also erst einmal die Eingabetaste

01:06.680 --> 01:08.485
und stellen sicher, dass alle diese

01:08.485 --> 01:10.801
Pakete in unser Projekt installiert werden,

01:10.801 --> 01:14.100
und danach schauen wir uns jedes Paket an und sehen, warum wir

01:14.100 --> 01:16.290
es installiert haben.

01:16.290 --> 01:18.530
Damit ist die Installation für mich abgeschlossen,

01:18.530 --> 01:21.710
und nun wollen wir analysieren, was wir installiert haben.

01:21.710 --> 01:25.380
In package dot json, dem Abschnitt new dev dependencies, oder er existierte

01:25.380 --> 01:27.063
bereits, aber jetzt haben wir dort

01:27.063 --> 01:29.474
eine Menge neuer Pakete, ich sollte sagen, diese

01:29.474 --> 01:31.290
Pakete wurden hinzugefügt.

01:31.290 --> 01:33.690
Was bewirken nun all diese Pakete?

01:33.690 --> 01:35.460
Beginnen wir mit Webpack.

01:35.460 --> 01:37.580
Webpack ist das Tool, über das ich gerade gesprochen

01:37.580 --> 01:40.080
habe. Es ist das Herzstück dieses gesamten Setups, das

01:40.080 --> 01:41.780
wir jetzt erstellen werden.

01:41.780 --> 01:43.980
Es handelt sich um ein Werkzeug, das es uns ermöglicht,

01:43.980 --> 01:47.150
bestimmte Funktionalitäten einzubauen, um unseren Code zu bündeln und

01:47.150 --> 01:49.210
auch um unseren Code zu transformieren.

01:49.210 --> 01:52.470
Und das transformiert unseren Code-Teil ist wichtig, wir haben

01:52.470 --> 01:54.740
hier ein Typescript-Projekt, richtig?

01:54.740 --> 01:56.620
Nun könnten wir natürlich auch webpack

01:56.620 --> 02:00.220
verwenden, um die gesamte JavaScript-Ausgabe zu bündeln, aber es

02:00.220 --> 02:03.310
wäre noch schöner, wenn webpack beides tun würde.

02:03.310 --> 02:06.250
Transformieren Sie unsere Typescript-Code zu JavaScript,

02:06.250 --> 02:10.180
und dann tatsächlich emittieren eine gebündelte Javascript-Datei,

02:10.180 --> 02:13.420
und Webpack ist in der Lage, dass zum Glück zu tun.

02:13.420 --> 02:16.610
Wir brauchen das webpack CLI, um webpack-Befehle in unserem

02:16.610 --> 02:18.922
Projekt auszuführen, und den webpack dev

02:18.922 --> 02:21.603
server, um den eingebauten Entwicklungsserver

02:21.603 --> 02:24.286
zu haben, der webpack unter der Haube startet,

02:24.286 --> 02:27.056
der unsere Dateien auf Änderungen überwacht, der

02:27.056 --> 02:30.180
webpack automatisch zum Neukompilieren anregt, wenn

02:30.180 --> 02:34.760
sich etwas ändert, und der unsere Seite automatisch ausliefert.

02:34.760 --> 02:37.300
Und dann haben wir typescript und typescript

02:37.300 --> 02:39.460
loader, den ts loader hier.

02:39.460 --> 02:42.850
Nun haben wir typescript bereits global auf unserem Rechner

02:42.850 --> 02:46.208
installiert, weshalb wir tsc dash w ausführen können.

02:46.208 --> 02:49.760
Es ist eine gute Praxis, eine Kopie von Typescript pro Projekt

02:49.760 --> 02:53.450
automatisch zu installieren, so dass Sie für dieses Projekt eine

02:53.450 --> 02:56.000
bestimmte Typescript-Version haben.

02:56.000 --> 02:58.320
Das hat den Vorteil, dass man, wenn man

02:58.320 --> 03:01.624
die globale Version von Typescript ändert, die Projektversion,

03:01.624 --> 03:05.170
das Projekt-Setup nicht kaputt macht, wenn man Änderungen

03:05.170 --> 03:07.280
an Typescript selbst vornimmt, so

03:07.280 --> 03:10.340
dass man eine bestimmte Version von Typescript

03:10.340 --> 03:13.880
für ein Projekt festlegen kann.

03:13.880 --> 03:16.440
Und der ts-Loader ist jetzt ein Paket, das mit

03:16.440 --> 03:18.380
Webpack zusammenarbeitet.

03:18.380 --> 03:21.068
Der ts-Loader ist ein Paket, das Webpack sagt,

03:21.068 --> 03:24.396
wie man Typescript-Code in Javascript umwandelt, so dass

03:24.396 --> 03:29.180
Webpack in der Lage ist, beides zu tun, unseren Code mit Hilfe des Typescript-Loaders

03:29.180 --> 03:30.920
zu kompilieren, der wiederum

03:30.920 --> 03:33.370
natürlich den Typescript-Compiler unter

03:33.370 --> 03:36.665
der Haube verwendet, und dann ist Webpack auch in der Lage,

03:36.665 --> 03:41.580
unsere emittierten Javascript-Dateien in eine gebündelte js-Datei in eine gebündelte

03:41.580 --> 03:44.260
Code-Datei zu bündeln.

03:44.260 --> 03:47.440
Nun, und damit fangen wir einfach an und richten ein

03:47.440 --> 03:50.852
Webpack-Projekt ein, damit wir Webpack für all diese

03:50.852 --> 03:53.223
schönen Dinge nutzen können.
