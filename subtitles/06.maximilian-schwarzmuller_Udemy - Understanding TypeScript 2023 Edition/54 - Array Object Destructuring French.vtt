WEBVTT

00:02.100 --> 00:04.870
Instructeur : Restons-en aux tableaux et aux objets.

00:04.870 --> 00:06.750
Une autre syntaxe importante, que vous

00:06.750 --> 00:09.160
verrez souvent dans les projets JavaScript et Typescript

00:09.160 --> 00:10.440
modernes, est la déstructuration

00:10.440 --> 00:13.133
des tableaux et des objets.

00:14.180 --> 00:15.013
Comment cela fonctionne-t-il ?

00:15.013 --> 00:17.220
Commençons par le tableau que nous avons,

00:17.220 --> 00:20.220
le tableau des hobbies qui a deux hobbies.

00:20.220 --> 00:22.200
Disons que vous voulez extraire ces

00:22.200 --> 00:26.340
deux hobbies et les stocker dans des variables ou des constantes.

00:26.340 --> 00:28.891
Bien sûr, nous pouvons faire cela

00:28.891 --> 00:32.340
avec hobby un égal hobbies pour l'index zéro,

00:32.340 --> 00:33.470
qui est le premier

00:33.470 --> 00:34.820
élément.

00:34.820 --> 00:38.720
Et la même chose peut-être avec le hobby deux pour les hobbies à l'indice un.

00:38.720 --> 00:40.500
Cela permettra d'extraire ces deux

00:40.500 --> 00:43.330
éléments et de les stocker dans des constantes.

00:43.330 --> 00:44.720
Cela nous a pris deux lignes de code,

00:44.720 --> 00:46.710
et plus vous voulez récupérer d'éléments, plus

00:46.710 --> 00:48.493
cela nous prend de lignes de code.

00:49.340 --> 00:51.690
La déstructuration des tableaux nous permet de le raccourcir.

00:51.690 --> 00:53.090
Avec la déstructuration des

00:53.090 --> 00:56.250
tableaux, qui fonctionne également avec let, et pas seulement

00:56.250 --> 00:59.760
avec const, vous ajoutez des crochets à gauche du signe égal, ce qui est

00:59.760 --> 01:01.400
un endroit inhabituel.

01:01.400 --> 01:02.900
Je n'ai jamais vu ça avant.

01:02.900 --> 01:04.780
Et sur le côté droit, vous avez le tableau,

01:04.780 --> 01:06.480
que vous voulez déstructurer.

01:06.480 --> 01:08.430
Maintenant, déstructurer signifie vraiment

01:08.430 --> 01:10.470
que vous retirez des éléments du tableau.

01:10.470 --> 01:13.570
Et ici, à gauche entre ces crochets, vous les stockez dans

01:13.570 --> 01:15.040
des constantes, ou si vous

01:15.040 --> 01:17.250
utilisez let, dans des variables.

01:17.250 --> 01:21.170
Donc ici, nous pourrions avoir un hobby 1 et un hobby 2.

01:21.170 --> 01:23.000
Et ce que fait cette syntaxe, c'est qu'elle

01:23.000 --> 01:25.640
parcourt le tableau des hobbies, prend le premier

01:25.640 --> 01:26.920
élément et le stocke dans

01:26.920 --> 01:29.050
une constante avec ce nom, prend le second

01:29.050 --> 01:30.290
élément et le stocke dans

01:30.290 --> 01:32.320
une constante avec ce nom.

01:32.320 --> 01:35.490
Vous pouvez même ajouter des paramètres de repos

01:35.490 --> 01:38.720
ici et avoir les hobbies restants ici au cas où le tableau

01:38.720 --> 01:42.130
des hobbies aurait plus d'éléments que deux.

01:42.130 --> 01:46.260
Ensuite, tous les éléments restants que vous n'avez pas sortis dans le hobby

01:46.260 --> 01:48.070
un ou le hobby deux seront stockés

01:48.070 --> 01:51.290
dans un nouveau tableau appelé hobbies restants.

01:51.290 --> 01:54.090
Ils seront donc fusionnés dans un nouveau tableau.

01:54.090 --> 01:57.940
D'ailleurs, la déstructuration ne modifie pas le tableau d'origine.

01:57.940 --> 02:02.940
Donc si on console. log hobbies, hobby un, et hobby deux ici, vous verrez

02:04.260 --> 02:06.840
que hobbies est toujours l'ancien tableau.

02:06.840 --> 02:08.840
Ce n'est pas vide ou quelque chose comme ça.

02:08.840 --> 02:11.780
Ainsi, les valeurs que nous avons retirées entre guillemets

02:11.780 --> 02:14.870
sont simplement copiées dans de nouvelles constantes ou variables,

02:14.870 --> 02:17.720
et ne sont pas vraiment retirées du tableau.

02:17.720 --> 02:18.980
Ça, c'est de la déstructuration de tableau.

02:18.980 --> 02:20.600
Il en va de même pour les objets.

02:20.600 --> 02:21.690
Nous avons notre personne ici.

02:21.690 --> 02:23.440
Disons maintenant que nous voulons stocker

02:23.440 --> 02:26.630
le nom et l'âge dans des constantes autonomes, ou variables.

02:26.630 --> 02:28.480
Tout comme la déstructuration des tableaux,

02:28.480 --> 02:31.840
la déstructuration des objets fonctionne à la fois avec const et let.

02:31.840 --> 02:33.010
Ici, je vais aller avec const.

02:33.010 --> 02:34.930
Et maintenant nous pouvons utiliser

02:34.930 --> 02:37.090
des accolades à gauche du signe égal.

02:37.090 --> 02:38.883
Bien qu'une nouvelle syntaxe, je suppose.

02:39.920 --> 02:43.750
Et avoir notre objet, ou la variable pointant vers l'objet sur

02:43.750 --> 02:44.890
le côté droit.

02:44.890 --> 02:46.110
Au fait, notez bien que

02:46.110 --> 02:48.770
ce n'est pas un type d'objet que j'assigne ici.

02:48.770 --> 02:51.200
Je n'ai pas de colon ici.

02:51.200 --> 02:54.080
Il s'agit simplement d'accolades comme celle-ci

02:54.080 --> 02:58.210
sur le côté gauche, sans deux points après le nom d'une constante.

02:58.210 --> 03:01.000
Je n'attribue donc pas le type de la valeur qui pourrait

03:01.000 --> 03:02.720
être stockée à une constante.

03:02.720 --> 03:05.470
Je n'utilise qu'une syntaxe spéciale.

03:05.470 --> 03:08.450
En effet, ici, nous pouvons également nous

03:08.450 --> 03:11.340
référer aux noms de propriétés que nous avons

03:11.340 --> 03:13.920
dans un objet, par exemple, le nom et l'âge,

03:13.920 --> 03:18.030
pour extraire les valeurs de ces clés de person et les stocker

03:18.030 --> 03:21.283
dans des constantes du même nom.

03:23.290 --> 03:24.390
Maintenant, j'obtiens

03:24.390 --> 03:27.820
des erreurs parce qu'au sommet, j'ai déjà une variable âge.

03:27.820 --> 03:30.890
Et le nom s'avère être une variable disponible globalement qui

03:30.890 --> 03:32.173
existe de toute façon.

03:33.240 --> 03:34.940
La solution de contournement

03:34.940 --> 03:38.313
consisterait donc à utiliser un nom de clé différent,

03:40.240 --> 03:41.920
par exemple firstName.

03:41.920 --> 03:45.020
Et maintenant nous pouvons extraire la valeur de cette clé ici.

03:45.020 --> 03:46.900
Voici donc comment fonctionne la déstructuration des objets.

03:46.900 --> 03:50.110
Ce qui est important ici, c'est que pour la déstructuration d'un

03:50.110 --> 03:52.260
tableau, les éléments sont retirés dans

03:52.260 --> 03:55.110
l'ordre, car un tableau est une liste ordonnée.

03:55.110 --> 03:58.110
Dans les objets, l'ordre n'est pas toujours garanti, et par

03:58.110 --> 04:00.720
conséquent, nous ne sortons pas les éléments par position,

04:00.720 --> 04:02.070
mais par nom de clé.

04:02.070 --> 04:04.790
Ainsi, les valeurs, ou les noms que vous spécifiez

04:04.790 --> 04:05.930
ici entre les accolades,

04:05.930 --> 04:07.630
ne sont pas arbitraires.

04:07.630 --> 04:09.700
Vous ne pouvez pas trouver de noms ici.

04:09.700 --> 04:13.860
Il doit s'agir de noms de propriétés que vous trouvez dans l'objet, afin que

04:13.860 --> 04:16.010
les valeurs de ces clés puissent être extraites

04:16.010 --> 04:18.160
de l'objet. Elles sont ensuite stockées

04:18.160 --> 04:20.600
dans des constantes ou des variables du même

04:20.600 --> 04:21.880
nom.

04:21.880 --> 04:24.120
Si vous souhaitez remplacer ce nom, vous pouvez

04:24.120 --> 04:25.970
le faire en ajoutant deux points ici.

04:25.970 --> 04:28.050
Encore une fois, il ne s'agit pas d'une affectation de type ici.

04:28.050 --> 04:29.680
Elle met juste un nouveau nom.

04:29.680 --> 04:31.970
Il s'agit donc d'une syntaxe JavaScript, qui

04:31.970 --> 04:33.820
n'a rien à voir avec Typescript.

04:33.820 --> 04:35.370
Donc, ici, nous pourrions

04:35.370 --> 04:38.750
stocker ceci dans une constante userName par exemple.

04:38.750 --> 04:39.840
Et donc, par la suite,

04:39.840 --> 04:44.040
nous pouvons nous consoler. enregistre le nom d'utilisateur et l'âge,

04:44.040 --> 04:45.290
mais pas le prénom, parce

04:45.290 --> 04:47.870
qu'il a fondamentalement remplacé le prénom par le

04:47.870 --> 04:50.900
nom d'utilisateur dans la constante que nous créons lorsque

04:50.900 --> 04:52.790
nous extrayons des valeurs ici.

04:52.790 --> 04:55.880
L'âge n'est pas écrasé, nous pouvons donc l'utiliser comme ça.

04:55.880 --> 04:58.183
Encore une fois, il ne s'agit pas d'une mission de type ici.

04:58.183 --> 05:00.210
C'est la syntaxe JavaScript,

05:00.210 --> 05:03.680
où nous renommons par alias une propriété que nous

05:03.680 --> 05:05.500
tirons de personne.

05:05.500 --> 05:07.430
De plus, comme précédemment avec le tableau,

05:07.430 --> 05:09.840
l'objet personne lui-même n'a pas changé.

05:09.840 --> 05:13.380
Nous ne faisons que copier ces valeurs à partir de l'objet.

05:13.380 --> 05:15.643
Et donc, nous obtenons cette sortie ici.
