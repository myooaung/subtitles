WEBVTT

00:02.060 --> 00:04.710
Une fois les propriétés statiques éliminées,

00:04.710 --> 00:07.000
revenons à l'héritage et à un concept

00:07.000 --> 00:08.743
qui lui est lié.

00:08.743 --> 00:11.740
Une autre façon d'ajouter des méthodes aux classes

00:11.740 --> 00:14.280
dont vous prévoyez d'hériter.

00:14.280 --> 00:16.660
Voici notre classe Département et comme vous le

00:16.660 --> 00:19.200
savez, nous en héritons pour le département informatique

00:19.200 --> 00:21.360
et le département comptable.

00:21.360 --> 00:23.470
Maintenant, nous avons cette méthode describe

00:23.470 --> 00:26.160
ici dans notre classe Department, et donc nous pouvons

00:26.160 --> 00:28.850
l'appeler sur n'importe quelle instance, basée sur

00:28.850 --> 00:31.850
IT Department et Accounting Department parce que ces classes

00:31.850 --> 00:34.560
sont basées sur Department, et elles ont accès à toutes

00:34.560 --> 00:36.560
les propriétés et méthodes de la classe

00:36.560 --> 00:39.523
de base Department.

00:40.380 --> 00:43.850
Maintenant, comme vous l'avez appris, vous pouvez remplacer les méthodes.

00:43.850 --> 00:46.550
Ainsi, par exemple, ici, dans le département de

00:46.550 --> 00:50.030
la comptabilité, nous pourrions ajouter notre propre version

00:50.030 --> 00:51.900
de la méthode de description, où

00:51.900 --> 00:56.880
je veux faire quelque chose de différent, où peut-être quand je dis ID du département de

00:56.880 --> 01:00.443
la comptabilité, et ensuite ID de distorsion d'accès.

01:02.040 --> 01:03.140
Maintenant, cela ne fonctionnerait

01:03.140 --> 01:06.960
pas ici, parce que l'ID est une propriété privée de Department et donc, nous

01:06.960 --> 01:10.400
devons la transformer en une propriété protégée afin qu'elle soit

01:10.400 --> 01:12.590
disponible dans les classes basées sur cette

01:12.590 --> 01:14.750
classe également.

01:14.750 --> 01:16.210
Mais avec ça, ça devrait marcher.

01:16.210 --> 01:19.080
Et si j'appelle maintenant describe on accounting,

01:19.080 --> 01:20.540
ce que nous pouvons faire,

01:20.540 --> 01:23.650
bien sûr, commentons peut-être ces deux lignes, et à la

01:23.650 --> 01:27.460
place, appelons accounting. décrivant en bas, nous devrions

01:27.460 --> 01:29.300
voir cette nouvelle sortie, et

01:29.300 --> 01:33.340
en effet, nous voyons l'ID du département de comptabilité, d2.

01:33.340 --> 01:36.570
Maintenant, bien sûr, nous pouvons aussi remplacer la méthode de description

01:36.570 --> 01:38.900
dans le département informatique.

01:38.900 --> 01:43.240
Mais parfois, il ne suffit pas d'offrir la possibilité de remplacer

01:43.240 --> 01:46.440
une méthode, car elle existe toujours.

01:46.440 --> 01:50.430
Vous voulez plutôt forcer les développeurs travaillant avec une certaine

01:50.430 --> 01:53.390
classe ou étendant une certaine classe à implémenter

01:53.390 --> 01:54.820
une certaine méthode ou à surcharger

01:54.820 --> 01:56.840
une certaine méthode.

01:56.840 --> 01:58.360
Quand ferais-tu ça ?

01:58.360 --> 02:01.690
Eh bien, chaque fois que vous voulez vous assurer qu'une certaine

02:01.690 --> 02:05.670
méthode est disponible dans toutes les classes basées sur une classe de base

02:05.670 --> 02:07.320
dans ce cas Département.

02:07.320 --> 02:10.550
Mais il faut aussi savoir que l'implémentation exacte dépendra

02:10.550 --> 02:14.220
de la version spécifique, donc quand vous pouvez fournir une méthode

02:14.220 --> 02:17.340
générale, mais que vous voulez faire respecter l'existence

02:17.340 --> 02:20.240
de cette méthode, les classes qui héritent devront

02:20.240 --> 02:22.410
fournir leur propre implémentation parce

02:22.410 --> 02:24.270
que vous ne pouvez pas fournir une

02:24.270 --> 02:28.520
implémentation par défaut dans la classe de base.

02:28.520 --> 02:30.150
Ainsi, dans une telle situation,

02:30.150 --> 02:34.600
vous pouvez avoir une méthode vide dans votre classe de base et maintenant

02:34.600 --> 02:38.460
forcer toutes les classes basées sur cette classe à ajouter et

02:38.460 --> 02:40.810
à surcharger cette méthode et vous pouvez

02:40.810 --> 02:44.880
le faire en ajoutant le mot clé abstract ici.

02:44.880 --> 02:46.630
Si vous ajoutez abstract ici, vous

02:46.630 --> 02:49.840
voyez que nous obtenons une erreur, car cela n'est disponible que

02:49.840 --> 02:51.440
dans une classe abstraite.

02:51.440 --> 02:54.220
Donc si vous avez une méthode ou plus avec abstract

02:54.220 --> 02:57.390
devant la méthode, vous devez ajouter abstract ici devant

02:57.390 --> 03:00.400
class aussi et maintenant, nous sommes bons à ce sujet,

03:00.400 --> 03:01.690
mais maintenant vous voyez

03:01.690 --> 03:03.740
que j'ai une erreur ici.

03:03.740 --> 03:05.650
Describe ne peut pas avoir d'implémentation

03:05.650 --> 03:07.850
car il est marqué comme abstrait.

03:07.850 --> 03:10.340
Vous devez supprimer les accolades, ajouter

03:10.340 --> 03:14.030
un point-virgule et, à la place, ajouter le type de retour que

03:14.030 --> 03:16.820
cela devrait avoir, dans ce cas, blanc.

03:16.820 --> 03:18.400
Maintenant, vous définissez

03:18.400 --> 03:21.970
simplement l'apparence de cette méthode et sa structure,

03:21.970 --> 03:25.230
mais vous ne dites rien d'autre.

03:25.230 --> 03:27.990
Maintenant, cependant, nous obtenons une erreur dans

03:27.990 --> 03:31.120
le département informatique parce qu'il ne met pas en œuvre le

03:31.120 --> 03:33.640
membre abstrait hérité describe, ce qui signifie

03:33.640 --> 03:36.330
que nous ne proposons pas la méthode describe ici.

03:36.330 --> 03:38.410
Et nous devons le faire parce que nous sommes

03:38.410 --> 03:41.000
basés sur la classe Department, qui est abstraite, et

03:41.000 --> 03:42.860
qui a une telle méthode abstraite.

03:42.860 --> 03:45.220
Ce qui signifie que cette méthode doit être implémentée

03:45.220 --> 03:48.623
par toute classe basée sur la classe Department.

03:49.620 --> 03:51.420
Donc maintenant, ici au département informatique,

03:51.420 --> 03:53.820
nous devons ajouter une méthode de description.

03:53.820 --> 03:58.820
Et là, nous pouvons maintenant consigner le département informatique dans une console,

03:59.040 --> 04:01.120
et faire ce que nous voulons.

04:01.120 --> 04:03.070
Il peut s'agir de la même mise en œuvre que celle que

04:03.070 --> 04:04.900
nous avons au département de la comptabilité,

04:04.900 --> 04:07.440
mais il peut aussi s'agir d'une mise en œuvre différente.

04:07.440 --> 04:10.040
Maintenant, avec cela, nous pouvons sauvegarder cela et il se recompile,

04:10.040 --> 04:12.850
et nous obtenons presque la même sortie que précédemment.

04:12.850 --> 04:15.240
Mais maintenant nous avons deux implémentations

04:15.240 --> 04:18.090
différentes de la méthode describe dans nos différentes

04:18.090 --> 04:20.020
classes basées sur le département.

04:20.020 --> 04:23.600
L'abstrait peut donc être très utile si vous voulez imposer

04:23.600 --> 04:27.120
que toutes les classes basées sur une autre classe, partagent

04:27.120 --> 04:30.260
une méthode ou une propriété commune, vous pouvez également

04:30.260 --> 04:33.150
avoir des propriétés abstraites.

04:33.150 --> 04:34.260
Mais en même temps, vous

04:34.260 --> 04:36.510
voulez vous assurer que vous n'avez pas à fournir

04:36.510 --> 04:39.170
la valeur concrète, l'implémentation concrète dans

04:39.170 --> 04:41.000
la classe de base, mais au lieu de cela,

04:41.000 --> 04:43.440
la classe héritière doit le faire.

04:43.440 --> 04:45.970
Également importantes, les classes abstraites.

04:45.970 --> 04:49.200
Les classes marquées comme abstraites avec ce mot-clé peuvent

04:49.200 --> 04:51.420
donc être instanciées elles-mêmes.

04:51.420 --> 04:54.240
Donc tu ne peux pas instancier le département maintenant.

04:54.240 --> 04:57.440
En fait, il s'agit simplement d'une classe dont il faut

04:57.440 --> 05:01.800
hériter pour pouvoir instancier les classes qui en héritent, et les classes

05:01.800 --> 05:05.230
qui en héritent sont obligées de fournir des implémentations

05:05.230 --> 05:09.040
concrètes pour, dans ce cas, décrire la méthode en suivant la structure

05:09.040 --> 05:11.770
que vous avez exposée ici.

05:11.770 --> 05:15.750
Donc, avec ce mot-clé qui se réfère à une instance de Department ou à une instance,

05:15.750 --> 05:19.930
d'une manière ou d'une autre basée sur Department, y compris les classes héritées

05:19.930 --> 05:21.530
qui pourraient se trouver entre

05:21.530 --> 05:23.610
les deux, et qui ne renvoie rien...
