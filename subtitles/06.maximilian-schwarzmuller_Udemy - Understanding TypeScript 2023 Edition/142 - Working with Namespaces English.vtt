WEBVTT

1
00:00:02.190 --> 00:00:04.860
<v ->I want to start with the namespace feature.</v>

2
00:00:04.860 --> 00:00:06.810
Now to show you how it works,

3
00:00:06.810 --> 00:00:09.980
I will grab these two interfaces here.

4
00:00:09.980 --> 00:00:11.480
The drag and drop interfaces,

5
00:00:11.480 --> 00:00:14.140
cut them from app.ts and add a new file,

6
00:00:14.140 --> 00:00:19.140
dragdropinterfaces.ts for example.

7
00:00:21.270 --> 00:00:25.180
Now we can paste it in there and now to use namespaces,

8
00:00:25.180 --> 00:00:29.140
all we have to do is we have to add the keyword namespace

9
00:00:31.645 --> 00:00:33.620
and then curly braces.

10
00:00:33.620 --> 00:00:35.880
Now we also have to give this namespace a name

11
00:00:35.880 --> 00:00:39.590
and here I'll name it DD Interfaces for a drag and drop,

12
00:00:39.590 --> 00:00:41.660
the name is up to you though.

13
00:00:41.660 --> 00:00:43.640
Now, this year is a TypeScript feature,

14
00:00:43.640 --> 00:00:45.250
not a JavaScript feature.

15
00:00:45.250 --> 00:00:47.750
It is not compiled to Vanilla JavaScript

16
00:00:47.750 --> 00:00:50.340
because there is no direct equivalent for it.

17
00:00:50.340 --> 00:00:54.860
Instead TypeScript will basically compile it to an object

18
00:00:54.860 --> 00:00:55.693
you could say.

19
00:00:55.693 --> 00:00:57.490
To an object where the things you will put

20
00:00:57.490 --> 00:01:00.440
into the namespace then are stored on properties,

21
00:01:00.440 --> 00:01:02.140
but you won't have to worry about that

22
00:01:02.140 --> 00:01:06.960
because all the resolving of access to these properties

23
00:01:06.960 --> 00:01:09.360
and that everything works will be taken care of

24
00:01:09.360 --> 00:01:10.640
by TypeScript.

25
00:01:10.640 --> 00:01:13.940
So now we can move these interfaces into the namespace

26
00:01:13.940 --> 00:01:16.130
and with that we're almost done.

27
00:01:16.130 --> 00:01:18.040
Now we have one problem, however,

28
00:01:18.040 --> 00:01:22.280
these interfaces are now only available in this namespace.

29
00:01:22.280 --> 00:01:23.113
By the way,

30
00:01:23.113 --> 00:01:25.530
you can not just put interfaces into a namespace

31
00:01:25.530 --> 00:01:27.070
you can put anything in there,

32
00:01:27.070 --> 00:01:28.057
classes,

33
00:01:28.057 --> 00:01:29.720
constants,

34
00:01:29.720 --> 00:01:30.780
whatever you want.

35
00:01:30.780 --> 00:01:33.900
Whatever you want can be put in a namespace.

36
00:01:33.900 --> 00:01:35.630
So basically you can wrap a namespace

37
00:01:35.630 --> 00:01:37.150
around any code you have.

38
00:01:37.150 --> 00:01:39.830
But the problem we have is that these features,

39
00:01:39.830 --> 00:01:41.140
these interfaces here

40
00:01:41.140 --> 00:01:44.800
are now only available inside of that namespace.

41
00:01:44.800 --> 00:01:47.280
Now as you see, we have nothing else in there.

42
00:01:47.280 --> 00:01:49.010
Now of course we could bring the code

43
00:01:49.010 --> 00:01:51.600
that depends on them back into this namespace,

44
00:01:51.600 --> 00:01:53.370
but then again we would blow to this

45
00:01:53.370 --> 00:01:56.960
because turns out we have quite long class

46
00:01:56.960 --> 00:01:58.940
that depends on these interfaces.

47
00:01:58.940 --> 00:02:02.900
We have the project list class and the project item class.

48
00:02:02.900 --> 00:02:05.260
They depend on these interfaces,

49
00:02:05.260 --> 00:02:08.922
so there would be a lot we have to add to that namespace.

50
00:02:08.922 --> 00:02:10.205
Therefore, what you can do

51
00:02:10.205 --> 00:02:14.210
is you can add the export keyword in front of an interface

52
00:02:14.210 --> 00:02:16.850
to export a feature from a namespace.

53
00:02:16.850 --> 00:02:19.680
Now what this means is that now these interfaces

54
00:02:19.680 --> 00:02:22.110
are available inside of this namespace,

55
00:02:22.110 --> 00:02:24.487
but also outside of this file.

56
00:02:24.487 --> 00:02:26.100
And we'll see how this works in a second,

57
00:02:26.100 --> 00:02:28.510
but with that we make this interface

58
00:02:28.510 --> 00:02:30.710
or whatever we are exporting.

59
00:02:30.710 --> 00:02:32.815
This is not restricted to interfaces of course

60
00:02:32.815 --> 00:02:36.610
available outside of this file as well

61
00:02:36.610 --> 00:02:41.140
if we then basically import or use that namespace.

62
00:02:41.140 --> 00:02:41.973
And of course again

63
00:02:41.973 --> 00:02:44.580
you cannot just export interfaces in a namespace

64
00:02:44.580 --> 00:02:45.636
but anything.

65
00:02:45.636 --> 00:02:48.010
Now with that, the question just is,

66
00:02:48.010 --> 00:02:50.310
how do we import this namespace

67
00:02:50.310 --> 00:02:52.410
now back into app.ts

68
00:02:52.410 --> 00:02:56.210
and for that, TypeScript has special syntax you can use.

69
00:02:56.210 --> 00:02:57.867
Let's back to the top of app.ts

70
00:02:57.867 --> 00:03:01.440
and now here you add three forward slashes,

71
00:03:01.440 --> 00:03:03.690
important three, not just two

72
00:03:03.690 --> 00:03:06.150
because this is actually not a normal comment

73
00:03:06.150 --> 00:03:07.330
what we're creating now

74
00:03:07.330 --> 00:03:10.280
this will actually be syntax picked up by TypeScript

75
00:03:10.280 --> 00:03:13.110
a special comment, you could say TypeScript understands

76
00:03:13.110 --> 00:03:15.500
if it starts with three slashes.

77
00:03:15.500 --> 00:03:19.301
There you write a self-closing XML tag,

78
00:03:19.301 --> 00:03:21.600
so opening angle bracket,

79
00:03:21.600 --> 00:03:24.530
then forward slash closing angle bracket

80
00:03:24.530 --> 00:03:25.790
and in their

81
00:03:25.790 --> 00:03:29.220
reference path equals

82
00:03:29.220 --> 00:03:32.370
and then here the name of the file you want to import.

83
00:03:32.370 --> 00:03:35.217
In my case here dragdropinterfaces.ts.

84
00:03:39.330 --> 00:03:42.550
Now, this is understood and picked up by TypeScript

85
00:03:42.550 --> 00:03:45.220
because as I mentioned with the three starting slashes,

86
00:03:45.220 --> 00:03:47.560
it's a special syntax TypeScript understands

87
00:03:47.560 --> 00:03:50.110
just as it understands this reference thing.

88
00:03:50.110 --> 00:03:51.960
This is not Vanilla JavaScript

89
00:03:51.960 --> 00:03:53.970
Vanilla JavaScript does not notice

90
00:03:53.970 --> 00:03:58.480
and this is not what it will look like once it is compiled.

91
00:03:58.480 --> 00:04:00.430
Now, what does does achieve though?

92
00:04:00.430 --> 00:04:05.070
This achieves that now this namespace DD Interfaces

93
00:04:05.070 --> 00:04:07.104
is available in app.ts.

94
00:04:07.104 --> 00:04:08.920
However, if you scroll down,

95
00:04:08.920 --> 00:04:11.040
you see my editors still complains

96
00:04:11.040 --> 00:04:12.250
and if we tried to save it

97
00:04:12.250 --> 00:04:14.300
as we all do good compilation errors.

98
00:04:14.300 --> 00:04:16.410
So, it doesn't seem to be available.

99
00:04:16.410 --> 00:04:19.730
The draggable interface doesn't seem to be available here.

100
00:04:19.730 --> 00:04:22.386
Well, there is a special thing about namespaces.

101
00:04:22.386 --> 00:04:25.840
You can use them to split your code

102
00:04:25.840 --> 00:04:27.930
and remember when I said earlier

103
00:04:27.930 --> 00:04:29.610
that what you have in a namespace

104
00:04:29.610 --> 00:04:32.557
can be used from anywhere in that namespace.

105
00:04:32.557 --> 00:04:34.157
Well, it turns out

106
00:04:34.157 --> 00:04:37.580
you can split namespaces across multiple files

107
00:04:37.580 --> 00:04:39.110
by exporting things in a namespace

108
00:04:39.110 --> 00:04:42.330
and then using this special import syntax,

109
00:04:42.330 --> 00:04:45.230
but you then have to put the things

110
00:04:45.230 --> 00:04:48.250
that want to use something from that import namespace

111
00:04:48.250 --> 00:04:50.180
or from that imported file

112
00:04:50.180 --> 00:04:51.797
into the same namespace.

113
00:04:51.797 --> 00:04:55.050
Hence maybe DD Interfaces is not the best name.

114
00:04:55.050 --> 00:04:58.010
Maybe we just named as App.

115
00:04:58.010 --> 00:04:59.740
Now, if we named as app here,

116
00:04:59.740 --> 00:05:01.670
we can go to app.ts

117
00:05:01.670 --> 00:05:04.180
and create a namespace of the same name here,

118
00:05:04.180 --> 00:05:05.630
namespace App.

119
00:05:05.630 --> 00:05:06.890
And now for the moment,

120
00:05:06.890 --> 00:05:10.750
let's put everything here into that namespace

121
00:05:10.750 --> 00:05:12.610
and now you see the error is gone

122
00:05:12.610 --> 00:05:14.300
There are no red dots on the right.

123
00:05:14.300 --> 00:05:15.513
However, if I saved that,

124
00:05:15.513 --> 00:05:17.850
I'll still get errors here.

125
00:05:17.850 --> 00:05:22.850
For example, that finished project list is not used.

126
00:05:25.010 --> 00:05:26.300
Well, that is correct

127
00:05:26.300 --> 00:05:28.210
I am not using that.

128
00:05:28.210 --> 00:05:29.600
I am not needing it either,

129
00:05:29.600 --> 00:05:32.610
so we can simply remove these concepts here.

130
00:05:32.610 --> 00:05:35.190
With that, if we saved this,

131
00:05:35.190 --> 00:05:38.040
now it compiled without errors.

132
00:05:38.040 --> 00:05:39.880
The question just is

133
00:05:39.880 --> 00:05:41.920
what's the result of this compilation?

134
00:05:41.920 --> 00:05:44.260
Do we have one or two files now?

135
00:05:44.260 --> 00:05:46.170
Well, let's have a look at the disc folder

136
00:05:46.170 --> 00:05:49.380
and there you see you've got an App JS file

137
00:05:49.380 --> 00:05:50.780
and then some code here

138
00:05:50.780 --> 00:05:53.980
and a drag and drop interface JS file.

139
00:05:53.980 --> 00:05:56.690
So we've got two files as a result.

140
00:05:56.690 --> 00:05:59.500
Now the dragon drop interface file actually is pretty empty

141
00:05:59.500 --> 00:06:00.830
because you learned

142
00:06:00.830 --> 00:06:04.360
that interfaces are basically not compiled to anything.

143
00:06:04.360 --> 00:06:07.300
There is no JavaScript equivalent for an interface.

144
00:06:07.300 --> 00:06:09.270
It's a pure TypeScript feature.

145
00:06:09.270 --> 00:06:12.370
So we can import it with the TypeScript syntax here

146
00:06:12.370 --> 00:06:15.509
to use it and get all the type improvements we learned

147
00:06:15.509 --> 00:06:17.300
but in production

148
00:06:17.300 --> 00:06:20.060
it doesn't matter if it's in a separate file or not.

149
00:06:20.060 --> 00:06:21.840
So off course, the question is

150
00:06:21.840 --> 00:06:26.380
what if we now put something that does exist in production,

151
00:06:26.380 --> 00:06:28.630
that does exist in JavaScript as well

152
00:06:28.630 --> 00:06:30.000
into a separate file.

153
00:06:30.000 --> 00:06:33.373
For example, does enum and the project class here,

154
00:06:35.520 --> 00:06:36.470
I'll grab both,

155
00:06:36.470 --> 00:06:37.610
create a new file,

156
00:06:37.610 --> 00:06:41.410
project dash model TS

157
00:06:41.410 --> 00:06:46.040
and put my project status enum and project class in there.

158
00:06:46.040 --> 00:06:47.420
Now just as before

159
00:06:47.420 --> 00:06:49.070
we can add a namespace here,

160
00:06:49.070 --> 00:06:50.590
the name has to be App,

161
00:06:50.590 --> 00:06:51.790
so it has to be done namespace

162
00:06:51.790 --> 00:06:54.020
where we then also want to use it

163
00:06:54.020 --> 00:06:57.340
and we have to export these features in there,

164
00:06:57.340 --> 00:06:59.450
so that we can use them in other files

165
00:06:59.450 --> 00:07:00.440
in the same namespace,

166
00:07:00.440 --> 00:07:02.640
but an other files as well.

167
00:07:02.640 --> 00:07:03.980
Now back in app.ts,

168
00:07:03.980 --> 00:07:05.900
we have to import that second file.

169
00:07:05.900 --> 00:07:07.890
So I'll duplicate this import

170
00:07:07.890 --> 00:07:11.515
and all the import project dash model ts.

171
00:07:11.515 --> 00:07:13.800
if I saved that and now is compiled

172
00:07:13.800 --> 00:07:16.610
and we see a project model JavaScript file.

173
00:07:16.610 --> 00:07:18.184
And in there,

174
00:07:18.184 --> 00:07:19.490
we see some code.

175
00:07:19.490 --> 00:07:22.770
The question is does our application now work?

176
00:07:22.770 --> 00:07:24.620
For that, let's reload it

177
00:07:25.480 --> 00:07:27.587
and let's try adding a project here

178
00:07:27.587 --> 00:07:29.070
and you see,

179
00:07:29.070 --> 00:07:29.903
we get an error.

180
00:07:29.903 --> 00:07:33.183
Cannot read property active of undefined.

181
00:07:34.120 --> 00:07:36.090
The reason for that simply is that

182
00:07:36.090 --> 00:07:38.854
our files are compiled standalone.

183
00:07:38.854 --> 00:07:41.410
Namespaces exist in TypeScript world

184
00:07:41.410 --> 00:07:44.640
as I said, there is no JavaScript equivalence for it.

185
00:07:44.640 --> 00:07:47.430
So the problem we have here is that in TypeScript world,

186
00:07:47.430 --> 00:07:48.263
everything is great

187
00:07:48.263 --> 00:07:51.610
because TypeScript is able to find all the things we need.

188
00:07:51.610 --> 00:07:52.800
For example,

189
00:07:52.800 --> 00:07:54.420
when I say project here,

190
00:07:54.420 --> 00:07:56.310
when I referenced the project type here

191
00:07:56.310 --> 00:07:58.130
on the project state class,

192
00:07:58.130 --> 00:07:59.310
this project type,

193
00:07:59.310 --> 00:08:00.610
this project class

194
00:08:00.610 --> 00:08:02.840
is defined in the project model.

195
00:08:02.840 --> 00:08:06.020
Now TypeScript does not complain your incompletion

196
00:08:06.020 --> 00:08:07.570
because we import that model,

197
00:08:07.570 --> 00:08:10.250
but import here really just means

198
00:08:10.250 --> 00:08:13.960
we tell TypeScript where to find that type

199
00:08:13.960 --> 00:08:15.810
once it is compiled to JavaScript,

200
00:08:15.810 --> 00:08:18.150
disconnection is basically destroyed.

201
00:08:18.150 --> 00:08:20.840
So in JavaScript code when is executes

202
00:08:20.840 --> 00:08:23.230
and when we then try to create a new project

203
00:08:23.230 --> 00:08:25.130
by instantiating project,

204
00:08:25.130 --> 00:08:27.430
JavaScript doesn't find this project class

205
00:08:27.430 --> 00:08:29.610
or constructor function.

206
00:08:29.610 --> 00:08:32.980
So we have to make sure we carry over disconnection.

207
00:08:32.980 --> 00:08:35.420
And for that we can go to the TS (mumbles)

208
00:08:35.420 --> 00:08:39.640
and there set this out file option.

209
00:08:39.640 --> 00:08:40.740
We can comment this in

210
00:08:40.740 --> 00:08:43.010
and the idea behind the out file

211
00:08:43.010 --> 00:08:45.540
is that you tell TypeScript

212
00:08:45.540 --> 00:08:48.620
that it should concatenate namespaces.

213
00:08:48.620 --> 00:08:49.670
So these references,

214
00:08:49.670 --> 00:08:51.740
which it has during compilation

215
00:08:51.740 --> 00:08:53.950
into one single JavaScript file

216
00:08:53.950 --> 00:08:56.970
instead of compiling multiple JavaScript files.

217
00:08:56.970 --> 00:08:59.210
So here for out file we can say

218
00:08:59.210 --> 00:09:02.350
we want to have a file in the disc folder,

219
00:09:02.350 --> 00:09:04.770
which we named maybe bundle.js

220
00:09:05.630 --> 00:09:07.050
And if we do that and save that,

221
00:09:07.050 --> 00:09:08.700
we'll actually get an error here.

222
00:09:09.650 --> 00:09:10.710
We'll get an error

223
00:09:12.300 --> 00:09:14.410
that only AMD and system modules

224
00:09:14.410 --> 00:09:17.250
are supported alongside out file.

225
00:09:17.250 --> 00:09:19.540
Now, we don't need to understand everything here

226
00:09:19.540 --> 00:09:23.160
There basically are different ways of loading

227
00:09:23.160 --> 00:09:26.120
or bundling different JavaScript files into one

228
00:09:26.120 --> 00:09:28.770
for historic reasons and how it is all developed

229
00:09:28.770 --> 00:09:31.250
and you can learn more about these different bundled types

230
00:09:31.250 --> 00:09:33.700
in an attached resource if you want to,

231
00:09:33.700 --> 00:09:35.340
you don't need to though.

232
00:09:35.340 --> 00:09:36.800
So basically what we need to do here

233
00:09:36.800 --> 00:09:38.120
is we need to set module

234
00:09:38.120 --> 00:09:40.470
which is already highlighted as an error here,

235
00:09:40.470 --> 00:09:41.598
not to common JS,

236
00:09:41.598 --> 00:09:43.943
but to AMD for example.

237
00:09:45.400 --> 00:09:47.700
If we do that, it compiles without issues

238
00:09:47.700 --> 00:09:50.010
even though it's still complains here,

239
00:09:50.010 --> 00:09:52.140
but it didn't pick up that I changed it

240
00:09:52.140 --> 00:09:53.860
and now what happens is actually

241
00:09:53.860 --> 00:09:56.570
that there is a new bundle JS file in dist.

242
00:09:56.570 --> 00:10:00.310
If I remove all JavaScript files in the disc folder

243
00:10:00.310 --> 00:10:04.680
and I restart my TSC dash we process

244
00:10:04.680 --> 00:10:05.580
so the compiler

245
00:10:05.580 --> 00:10:08.600
you'll see only that bundle JS file is generated.

246
00:10:08.600 --> 00:10:11.530
This file will hold all our code in the compiled

247
00:10:11.530 --> 00:10:13.250
and translated version

248
00:10:13.250 --> 00:10:15.400
and therefore now in index HTML,

249
00:10:15.400 --> 00:10:20.300
we just have to import bundle JS here instead of App JS.

250
00:10:20.300 --> 00:10:23.610
And if we do so and we reload here,

251
00:10:23.610 --> 00:10:25.830
we have a working application again

252
00:10:25.830 --> 00:10:28.260
where we can use drag and drop everything

253
00:10:28.260 --> 00:10:30.410
because now it's all in one file,

254
00:10:30.410 --> 00:10:32.661
but only in the final result.

255
00:10:32.661 --> 00:10:34.230
During development,

256
00:10:34.230 --> 00:10:36.260
we have these namespaces here,

257
00:10:36.260 --> 00:10:39.030
which is one step in the right direction

258
00:10:39.030 --> 00:10:41.970
because it is already as a bit more manageable.

259
00:10:41.970 --> 00:10:44.350
Now let's split this into even more files

260
00:10:44.350 --> 00:10:47.250
before we then have a look at the average splitting option

261
00:10:47.250 --> 00:10:48.283
TS modules.

