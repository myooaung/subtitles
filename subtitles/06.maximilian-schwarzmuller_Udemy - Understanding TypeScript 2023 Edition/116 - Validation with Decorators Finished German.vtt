WEBVTT

00:02.320 --> 00:05.210
Instructor: Um dies zu implementieren, werde ich zunächst

00:05.210 --> 00:08.217
eine Schnittstelle ValidatorConfig erstellen, in der ich den

00:09.550 --> 00:12.680
Speicher, mit dem ich arbeiten möchte, konfigurieren möchte.

00:12.680 --> 00:15.130
Meine Idee ist es, ein paar Eigenschaften zu haben, und

00:15.130 --> 00:17.653
deshalb verwende ich hier diese Indexschreibweise.

00:19.720 --> 00:21.450
Diese sind im Grunde genommen Zeichenketten,

00:21.450 --> 00:23.440
deren Wert ein weiteres Objekt ist.

00:23.440 --> 00:26.380
Denn dies wäre im Grunde der Klassenname, für den wir

00:26.380 --> 00:29.570
einige geprüfte Eigenschaften registrieren wollen.

00:29.570 --> 00:31.700
Und dann haben wir in dem Objekt, das wir

00:31.700 --> 00:34.580
dort speichern, die konkreten Eigenschaften der Klasse,

00:34.580 --> 00:37.010
die mit Validatoren versehen sind.

00:37.010 --> 00:40.610
Hier haben wir also die validierbare Eigenschaft, wenn Sie

00:40.610 --> 00:42.240
es so nennen wollen, die auch

00:42.240 --> 00:44.660
ein String-Schlüssel sein wird.

00:44.660 --> 00:47.350
Und dann sollte der Wert dafür ein Array von

00:47.350 --> 00:50.010
Strings sein, in dem wir im Grunde so etwas wie

00:52.420 --> 00:55.490
erforderlich, positiv und so weiter haben.

00:55.490 --> 00:57.460
So etwas könnte hier als Liste von

00:57.460 --> 00:59.323
Prüfern hinzugefügt werden.

01:00.300 --> 01:05.300
Nun können wir hier unsere registeredValidators-Konfiguration erstellen, die vom Typ

01:05.790 --> 01:07.950
ValidatorConfig sein sollte, was zunächst

01:07.950 --> 01:09.640
ein leeres Objekt ist.

01:09.640 --> 01:11.500
Denn zu Beginn, wenn die App startet, wenn

01:11.500 --> 01:13.920
unsere Drittanbieter-Bibliothek geladen wird, sind

01:13.920 --> 01:16.293
noch keine Validatoren registriert worden.

01:17.640 --> 01:19.920
Nun, und dann wollen wir hier in unseren

01:19.920 --> 01:23.490
Regisseuren etwas zu diesem Register hinzufügen.

01:23.490 --> 01:28.020
Beachten Sie, dass eine Eigenschaftsdekoratorfunktion zwei Argumente erhält:

01:28.020 --> 01:31.010
das Ziel, das der Prototyp des Objekts ist, auf dem die

01:31.010 --> 01:33.910
Eigenschaft sitzt, oder die Konstruktorfunktion,

01:33.910 --> 01:37.340
wenn es sich um eine statische Eigenschaft handelt, und den

01:37.340 --> 01:39.300
Eigenschaftsnamen.

01:39.300 --> 01:40.710
Dies sind die beiden Argumente,

01:40.710 --> 01:44.370
die wir hier erhalten, wir erhalten nicht den Deskriptor für Eigenschaften.

01:44.370 --> 01:46.760
Jetzt können wir zu unseren registrierten Validatoren gehen

01:46.760 --> 01:51.463
und dort einen neuen Eintrag für target hinzufügen. Konstrukteur.

01:52.730 --> 01:56.070
Der Prototyp der Instanz, mit der wir arbeiten, hat einen Konstruktorschlüssel,

01:56.070 --> 01:58.430
der auf die Konstruktorfunktion verweist,

01:58.430 --> 02:02.610
die zur Erstellung unseres Objekts verwendet wurde.

02:02.610 --> 02:04.690
Und das wird im Grunde so etwas wie ein Kurs

02:04.690 --> 02:06.120
hier sein, so dass der Name der

02:06.120 --> 02:08.460
Konstruktorfunktion am Ende von diesem Konstruktor

02:08.460 --> 02:10.560
abgerufen werden kann.

02:10.560 --> 02:11.900
Da es sich bei dem Konstruktor um eine

02:11.900 --> 02:13.400
Funktion handelt, können wir die Eigenschaft

02:13.400 --> 02:15.900
name verwenden, die bei jeder Funktion in JavaScript vorhanden

02:15.900 --> 02:18.310
ist, um den Funktionsnamen zu erhalten, und dies wird dann zum

02:18.310 --> 02:20.620
Beispiel der Name des Kurses sein.

02:20.620 --> 02:23.390
Jetzt registrieren wir den Klassennamen als Schlüssel

02:23.390 --> 02:25.030
in registrierten Validatoren.

02:25.030 --> 02:28.130
Und der Wert dafür sollte dann ein anderes Objekt sein.

02:28.130 --> 02:30.630
Ich setze dies also gleich mit einem anderen Objekt hier.

02:30.630 --> 02:32.390
Und in diesem Objekt habe ich auch eine

02:32.390 --> 02:34.640
dynamisch zugewiesene Eigenschaft, in der ich

02:34.640 --> 02:37.400
meinen propName verwende, also die Eigenschaft, für die

02:37.400 --> 02:40.190
ich einen Validator als Schlüssel hinzufügen möchte.

02:40.190 --> 02:42.310
Der Wert hier ist ein Array von Strings,

02:42.310 --> 02:45.530
und hier werde ich required als String hinzufügen.

02:45.530 --> 02:47.920
Dies ist natürlich ein sehr naiver Validierer.

02:47.920 --> 02:50.000
Wenn wir bereits andere Validatoren für diese Eigenschaft

02:50.000 --> 02:52.830
registriert hätten, würde ich sie jetzt hier überschreiben.

02:52.830 --> 02:54.900
Es wäre also besser, zunächst alle vorhandenen

02:54.900 --> 02:58.360
Prüfer abzurufen und sie dann in dieses Array zu kopieren und nur die erforderlichen

02:58.360 --> 03:01.320
Prüfer zu diesem vorhandenen Array hinzuzufügen.

03:01.320 --> 03:02.870
Auch hier werde ich, um etwas Zeit

03:02.870 --> 03:04.740
zu sparen und nur die allgemeine Idee zu

03:04.740 --> 03:06.873
zeigen, diesen naiveren Ansatz wählen.

03:07.980 --> 03:11.180
Damit haben wir die erforderliche Anmerkung, aber lassen

03:11.180 --> 03:14.690
Sie uns nun an der Anmerkung für die positive Zahl arbeiten.

03:14.690 --> 03:16.730
Und natürlich ist das im Grunde das Gleiche.

03:16.730 --> 03:21.410
Ich kopiere diesen Code, aber ich setze ihn hier auf positiv oder was auch immer für einen Bezeichner

03:21.410 --> 03:23.600
Sie verwenden wollen, und natürlich müssen

03:23.600 --> 03:25.010
wir sicherstellen, dass wir

03:25.010 --> 03:27.650
die richtigen Argumente akzeptieren.

03:27.650 --> 03:30.990
Zusammen mit dem, was wir bisher hinzugefügt haben, registrieren

03:30.990 --> 03:34.420
wir diese Eigenschaften und ihre Validatoren in unserer globalen

03:34.420 --> 03:38.640
Konfiguration, wenn diese Klasse definiert ist.

03:38.640 --> 03:41.460
Jetzt müssen wir nur noch an der Validierungsfunktion arbeiten.

03:41.460 --> 03:43.400
Die validate-Funktion sollte alle registrierten

03:43.400 --> 03:46.240
Prüfer durchlaufen und dann grundsätzlich verschiedene

03:46.240 --> 03:50.340
Logiken ausführen, je nachdem, welche Prüfer sie findet.

03:50.340 --> 03:54.857
Hier möchte ich also zunächst einmal die Konfiguration für das konkrete

03:54.857 --> 03:57.600
Objekt abrufen, mit dem wir es zu tun haben.

03:57.600 --> 04:00.390
Dazu müssen wir herausfinden, auf welcher Konstruktorfunktion

04:00.390 --> 04:04.277
das Objekt basiert, und dann die Validierungskonfiguration oder die Eigenschaftsvalidierungszuordnungen

04:04.277 --> 04:09.070
abrufen, die wir für dieses Objekt eingerichtet haben.

04:09.070 --> 04:11.960
Ich werde dieses Objekt also Validatoren nennen,

04:11.960 --> 04:14.520
oder vielleicht objValidatorConfig.

04:14.520 --> 04:17.110
Und wir greifen hier auf die registrierten Validierer zu und greifen auf

04:17.110 --> 04:22.110
eine Eigenschaft zu, die obj sein sollte. Konstrukteur. Name, dieselbe Logik wie zuvor, wir

04:23.900 --> 04:27.060
greifen auf die Konstruktoreigenschaft zu, die auf dem Prototyp des

04:27.060 --> 04:28.980
Objekts vorhanden ist, und daher können

04:28.980 --> 04:31.720
wir dank der Funktionsweise von JavaScript direkt auf das

04:31.720 --> 04:33.340
Objekt zugreifen, und dank der Prototyp-Kette

04:33.340 --> 04:35.050
werden wir dann auf den Prototyp zugreifen,

04:35.050 --> 04:36.710
wenn wir die Konstruktoreigenschaft

04:36.710 --> 04:38.920
auf dem Objekt selbst nicht finden können, und

04:38.920 --> 04:41.580
das wird funktionieren.

04:41.580 --> 04:43.840
Und deshalb haben wir jetzt den Konstruktornamen

04:43.840 --> 04:46.970
und wir finden heraus, dass zum Beispiel dieser Kurs hier auf

04:46.970 --> 04:49.050
dieser Kursklasse basiert.

04:49.050 --> 04:51.290
Wir suchen also nach jeder Validator-Konfiguration,

04:51.290 --> 04:52.800
die wir für die Kursklasse haben.

04:52.800 --> 04:55.910
Jetzt sehen wir uns also im Grunde dieses Objekt an.

04:55.910 --> 04:58.207
Dies ist jetzt in objValidatorConfig.

04:59.310 --> 05:01.540
Natürlich könnten wir dies nicht finden, wenn wir

05:01.540 --> 05:03.270
versuchen, unser Objekt zu validieren,

05:03.270 --> 05:05.110
für das nichts registriert wurde.

05:05.110 --> 05:08.270
Wenn wir also keine Validator-Konfiguration haben, wenn

05:08.270 --> 05:11.640
wir dort nichts finden, möchte ich true zurückgeben, denn dann

05:11.640 --> 05:14.010
ist dies sicherlich gültig, richtig?

05:14.010 --> 05:15.330
Es gibt nichts zu validieren,

05:15.330 --> 05:18.350
also ist das Objekt sicherlich gültig.

05:18.350 --> 05:20.900
Andernfalls, wenn wir es finden, möchte ich, dass

05:20.900 --> 05:24.910
es durch dieses innere Objekt hier mit einer for in-Schleife läuft.

05:24.910 --> 05:27.580
Damit durchlaufe ich meine Eigenschaften,

05:27.580 --> 05:29.560
für die ich Validatoren registriert

05:29.560 --> 05:33.007
habe, mit const prop in objValidatorConfig.

05:34.380 --> 05:36.950
Damit habe ich Zugriff auf alle Eigenschaftsnamen,

05:36.950 --> 05:39.630
für die wir dann Validatoren haben könnten.

05:39.630 --> 05:41.180
Jetzt muss ich natürlich alle Validatoren

05:41.180 --> 05:43.970
durchgehen, die wir für eine Eigenschaft haben könnten.

05:43.970 --> 05:45.230
Dies sollte immer ein Array sein,

05:45.230 --> 05:47.680
auch wenn wir nur einen Validator hinzugefügt haben.

05:47.680 --> 05:49.530
Wir können hier also eine for-of-Schleife

05:49.530 --> 05:53.040
verwenden und den konkreten Validator, den wir haben, für die objValidatorConfig

05:53.040 --> 05:56.930
für diese bestimmte Eigenschaft abrufen.

05:56.930 --> 06:00.560
Jetzt bekommen wir also Dinge wie "positiv" oder "erforderlich", die dann in

06:00.560 --> 06:02.963
der Validator-Konstante gespeichert werden.

06:04.080 --> 06:06.110
Und dann könnten wir hier eine Switch-Anweisung haben,

06:06.110 --> 06:08.030
oder natürlich externe Funktionen aufrufen, je

06:08.030 --> 06:09.810
nachdem, welchen Validator wir finden.

06:09.810 --> 06:12.130
Aber hier werde ich mit einer eingebauten switch-Anweisung

06:12.130 --> 06:16.620
arbeiten, den Validator einschalten und dann grundsätzlich verschiedene Fälle haben.

06:16.620 --> 06:19.683
Zum Beispiel der hier geforderte Fall.

06:20.800 --> 06:22.163
Ups, etwa so.

06:23.470 --> 06:28.950
Hier möchte ich true zurückgeben, wenn unsere Eigenschaft, die wir betrachten,...

06:28.950 --> 06:33.260
Diese Eigenschaft dieses Objekts hat also einen nicht leeren Wert.

06:33.260 --> 06:38.260
Ich werde also true zurückgeben, wenn obj prop wahr ist.

06:39.170 --> 06:42.010
Und um dies in einen echten wahren oder falschen Wert umzuwandeln,

06:42.010 --> 06:44.420
können wir den Operator double bang verwenden.

06:44.420 --> 06:46.840
Ich höre immer wieder Beschwerden darüber, dass das Programm

06:46.840 --> 06:49.440
nicht weiß, ob ein Objekt diese Eigenschaft hat, also sollten

06:49.440 --> 06:51.220
wir das hier in any ändern, um diese zusätzliche

06:51.220 --> 06:53.560
Flexibilität zu erhalten.

06:53.560 --> 06:56.150
Natürlich kann man hier auch an den Typen arbeiten.

06:56.150 --> 07:00.480
Und zum Beispiel, auch Ihre Bezeichner hier in klar definierte Typen,

07:00.480 --> 07:03.430
wo Enums Sie arbeiten und vielleicht auch die Typisierung

07:03.430 --> 07:05.490
hier zu verbessern.

07:05.490 --> 07:07.420
Aber um ehrlich zu sein, da ich möchte, dass dies

07:07.420 --> 07:09.960
mit jedem Objekt funktioniert, ist es schwierig, dies so zu

07:09.960 --> 07:11.810
verbessern, dass TypeScript es mag.

07:11.810 --> 07:13.330
Wir könnten mit generischen

07:13.330 --> 07:16.800
Typen arbeiten, aber dann müssten wir uns irgendwie darauf beschränken,

07:16.800 --> 07:19.740
welche Objekte die generischen Typen erweitern und

07:19.740 --> 07:22.110
daher akzeptieren sollten.

07:22.110 --> 07:25.850
Es wäre also am besten, wenn wir hier wirklich flexibel wären und

07:25.850 --> 07:27.880
viele verschiedene Objekte in diese

07:27.880 --> 07:30.640
Validierungsfunktion aufnehmen könnten.

07:30.640 --> 07:32.270
Nun zurück zum Schaltersegment,

07:32.270 --> 07:34.750
der erforderliche Fall ist ein möglicher Fall, wir

07:34.750 --> 07:37.650
haben auch den positiven Fall, den wir behandeln wollen.

07:37.650 --> 07:39.280
Und dort möchte ich true zurückgeben,

07:39.280 --> 07:43.770
wenn die betrachtete Eigenschaft größer als Null ist.

07:43.770 --> 07:47.260
Wenn also das Objekt prop größer als Null ist, wird true zurückgegeben,

07:47.260 --> 07:50.463
andernfalls wird false zurückgegeben.

07:52.890 --> 07:55.730
Wenn wir es nun nicht in diesen for-Block schaffen oder

07:55.730 --> 07:57.970
wenn wir irgendwie eine Schleife haben, die

07:57.970 --> 07:59.310
nichts durchläuft, weil wir

07:59.310 --> 08:01.500
keine Validatoren registriert haben, haben

08:01.500 --> 08:04.130
wir hier ein leeres Array oder so etwas übergeben,

08:04.130 --> 08:06.350
wenn Sie es also über diese for-Schleife hinaus

08:06.350 --> 08:10.280
schaffen, werde ich standardmäßig true zurückgeben.

08:10.280 --> 08:12.800
Und jetzt geben wir unter allen Umständen etwas zurück,

08:12.800 --> 08:14.503
und wir können validieren.

08:15.450 --> 08:19.253
Damit wollen wir mal sehen, ob es funktioniert, wenn wir das jetzt speichern und unsere App

08:23.610 --> 08:26.330
hier neu laden und ich versuche, das abzuschicken, bekommen wir eine

08:26.330 --> 08:29.400
Fehlermeldung, ungültige Eingabe, bitte versuchen Sie es erneut.

08:29.400 --> 08:30.780
Wenn ich hier einen Text eingebe:

08:30.780 --> 08:34.793
JavaScript The Complete Guide, erhalte ich trotzdem diese Meldung, weil

08:35.940 --> 08:38.100
meine Nummer falsch ist.

08:38.100 --> 08:40.440
Wenn ich hier minus eins eingebe, bekommen wir auch

08:40.440 --> 08:42.020
das, weil das nicht positiv ist.

08:42.020 --> 08:45.020
Wenn ich jedoch eine positive Zahl eingebe, funktioniert es.

08:45.020 --> 08:48.230
Wenn ich eine positive Zahl habe, aber das erste Feld leer

08:48.230 --> 08:49.860
ist, dann funktioniert das auch,

08:49.860 --> 08:52.190
daran müssen wir noch arbeiten.

08:52.190 --> 08:54.600
Lassen Sie uns also herausfinden, was das Problem ist.

08:54.600 --> 08:57.380
Und um das herauszufinden, füge ich hier ein kleines Konsolenprotokoll

08:57.380 --> 09:00.720
ein und protokolliere die Eigenschaft, die wir gerade betrachten.

09:00.720 --> 09:02.340
Wir könnten natürlich auch Haltepunkte und Entwicklerwerkzeuge

09:02.340 --> 09:03.513
verwenden.

09:04.820 --> 09:07.410
Wenn ich hier auf "Speichern" klicke, wird als

09:07.410 --> 09:09.250
erstes der Preis validiert, und

09:09.250 --> 09:10.623
danach hören wir auf.

09:11.530 --> 09:15.100
Der Preis ist also die erste Eigenschaft, die validiert wird.

09:15.100 --> 09:16.980
Und das ist das Interessante hier, der

09:16.980 --> 09:20.090
Preis ist eigentlich die einzige Eigenschaft, die hier zählt,

09:20.090 --> 09:22.230
weil wir in validieren zurückkehren.

09:22.230 --> 09:25.840
Das bedeutet, dass wir beim ersten Mal, wenn wir einen Prüfer finden,

09:25.840 --> 09:29.050
der wahr oder falsch zurückgibt, sofort zurückkehren und

09:29.050 --> 09:31.480
uns nicht um die anderen Prüfer kümmern.

09:31.480 --> 09:33.320
Im falschen Fall ist das in Ordnung, denn

09:33.320 --> 09:35.360
wenn ein Element falsch ist, wenn eine Eigenschaft

09:35.360 --> 09:37.450
falsch ist, ungültig ist, dann ist es in Ordnung,

09:37.450 --> 09:40.140
wenn wir uns die anderen gar nicht ansehen.

09:40.140 --> 09:42.590
Aber für den echten Fall ist das ein Problem.

09:42.590 --> 09:44.970
Wenn wir beim ersten Mal, wenn eine Eigenschaft

09:44.970 --> 09:49.410
unsere Erwartungen erfüllt, "true" zurückgeben, haben wir ein Problem.

09:49.410 --> 09:51.540
Wir sollten dies also durch eine isValid-Eigenschaft

09:51.540 --> 09:55.130
erweitern, die zunächst true ist.

09:55.130 --> 09:56.780
Ist eine gültige Variable, meine ich.

09:56.780 --> 10:01.780
Und dann setzen wir hier isValid gleich isValid und dies hier,

10:03.857 --> 10:08.857
und das gleiche hier unten, setzen dies gleich dies.

10:09.570 --> 10:11.290
Damit wir nicht sofort zurückkehren,

10:11.290 --> 10:14.750
aktualisieren wir nur isValid und brechen danach ab, um nicht

10:14.750 --> 10:16.700
durchzufallen.

10:16.700 --> 10:19.200
Das Ergebnis ist, dass am Ende nach all diesen

10:19.200 --> 10:22.710
Schleifen isValid entweder immer noch true ist, aber sobald eine

10:22.710 --> 10:25.710
dieser Überprüfungen hier false ist, wird dank der Funktionsweise

10:25.710 --> 10:27.530
von JavaScript der gesamte isValid-Wert

10:27.530 --> 10:29.670
false sein, weil true in Kombination mit

10:29.670 --> 10:33.000
false false zurückkommt.

10:33.000 --> 10:36.020
Und dann sollten wir dort unten isValid zurückgeben.

10:36.020 --> 10:39.330
Damit stellen wir sicher, dass alle Eigenschaften geprüft werden

10:39.330 --> 10:42.433
und nicht nur die erste, die JavaScript untersucht.

10:43.320 --> 10:45.460
Dies wird jedoch nicht unser einziges Problem sein,

10:45.460 --> 10:47.750
wir haben hier auch ein Problem, wenn wir uns ansehen,

10:47.750 --> 10:50.480
wie wir unsere Validierungslogik registrieren.

10:50.480 --> 10:53.720
Ich überschreibe immer die registrierten Prüfer für

10:53.720 --> 10:57.130
einen bestimmten Klassennamen mit einem neuen Objekt.

10:57.130 --> 11:00.050
Stattdessen sollten wir hier alle vorhandenen Validatoren hinzufügen,

11:00.050 --> 11:01.630
damit wir das nicht tun.

11:01.630 --> 11:04.140
Wir haben zum Beispiel den Spread-Operator, der alle

11:04.140 --> 11:08.130
vorhandenen Schlüssel-Wert-Paare für diesen Klassennamen in den registrierten

11:08.130 --> 11:10.870
Validatoren nimmt und diese zuerst hinzufügt, bevor wir

11:10.870 --> 11:14.413
unseren eigenen hinzufügen, natürlich auch dort unten.

11:16.890 --> 11:18.733
Wenn wir dies nun speichern und zu unserer Anwendung

11:19.650 --> 11:21.980
zurückkehren, können wir das Ergebnis sehen.

11:21.980 --> 11:24.150
Wenn ich beide leer habe, sind wir gescheitert.

11:24.150 --> 11:26.280
Wenn wir einen gültigen Preis eingeben, aber einen

11:26.280 --> 11:28.490
ungültigen Titel haben, schlagen wir fehl.

11:28.490 --> 11:31.510
Wenn beides zutrifft, sind wir erfolgreich.

11:31.510 --> 11:35.570
Wenn wir einen gültigen Titel, aber keinen Preis haben, scheitern wir.

11:35.570 --> 11:37.230
Auch mit einem negativen Preis.

11:37.230 --> 11:39.170
Und deshalb sieht das für mich jetzt gut

11:39.170 --> 11:42.280
aus und das ist jetzt unsere erste naive Implementierung, wie

11:42.280 --> 11:44.500
ein solcher Validator mit Hilfe von TypeScript-Dekoratoren

11:44.500 --> 11:46.670
funktionieren könnte.

11:46.670 --> 11:49.150
Und denken Sie daran, dass all das hier, all die Dekoratoren,

11:49.150 --> 11:52.310
die Validierungsfunktion und die Registrierung, vor Ihnen verborgen

11:52.310 --> 11:53.590
bleiben würden.

11:53.590 --> 11:55.820
Das könnte ein Teil einer Bibliothek eines Drittanbieters

11:55.820 --> 11:56.780
sein, an der Sie arbeiten,

11:56.780 --> 11:59.250
natürlich in einer aufwändigeren Form als die, die Sie wahrscheinlich

11:59.250 --> 12:01.300
mit Ihren Endnutzern teilen.

12:01.300 --> 12:04.160
Und Sie, als Endbenutzer, würden einfach diese Dinge importieren,

12:04.160 --> 12:06.800
diese Dekoratoren hinzufügen und validate aufrufen,

12:06.800 --> 12:08.840
und Sie hätten dann eine sehr bequeme Möglichkeit,

12:08.840 --> 12:11.763
Ihren Klassen Validierung hinzuzufügen.
