WEBVTT

00:02.290 --> 00:03.280
Người hướng dẫn: Vì vậy,

00:03.280 --> 00:06.110
hãy bắt đầu với ứng dụng Node Typescript của chúng ta.

00:06.110 --> 00:08.750
Bây giờ, bạn có thể nghĩ rằng chúng tôi cần một thiết

00:08.750 --> 00:11.170
lập phức tạp với webpack, v.v., nhưng thực tế

00:11.170 --> 00:12.410
chúng tôi không cần.

00:12.410 --> 00:16.270
Chúng ta sẽ chỉ sử dụng lệnh tsc để biên dịch các tệp của mình.

00:16.270 --> 00:18.160
Và sau đó, chúng ta có thể sử dụng lệnh nút để

00:18.160 --> 00:19.890
thực thi các tệp đã biên dịch của mình.

00:19.890 --> 00:21.700
Đó là tất cả những gì chúng ta cần ở đây.

00:21.700 --> 00:25.960
Tuy nhiên, tôi sẽ thiết lập một dự án ở đây với npm init đơn giản để chúng

00:25.960 --> 00:28.810
ta có được một gói. json vì chúng ta sẽ tạo một

00:28.810 --> 00:32.250
ứng dụng Node bình thường ở đây, chúng ta sẽ cài đặt một số gói

00:32.250 --> 00:36.240
của bên thứ ba như Express. js.

00:36.240 --> 00:38.470
Và tôi cũng muốn cài đặt thêm một công cụ giúp

00:38.470 --> 00:40.950
đơn giản hóa quá trình phát triển của chúng tôi.

00:40.950 --> 00:44.630
Vì vậy, hãy chạy npm init tại đây trong bất kỳ thư mục trống nào bạn chọn.

00:44.630 --> 00:48.190
Bạn có thể xác nhận tất cả các cài đặt mặc định tại đây nếu muốn và sau

00:48.190 --> 00:50.540
đó, bạn sẽ có một gói. json sẽ trông

00:50.540 --> 00:52.750
giống như thế này.

00:52.750 --> 00:56.210
Bây giờ, hãy chạy tsc --init tại đây để khởi tạo dự

00:56.210 --> 00:59.390
án này dưới dạng dự án TypeScript để bạn có được

00:59.390 --> 01:01.860
tệp tsconfig. json mà bây giờ bạn

01:01.860 --> 01:04.313
có thể tìm thấy trong tệp tests.

01:05.770 --> 01:09.020
Và ở đó, tôi đã có sự điều chỉnh đầu tiên mà tôi muốn thực hiện.

01:09.020 --> 01:13.300
Ví dụ, mục tiêu ở đây có thể dễ dàng được đặt thành es2018 tùy thuộc vào phiên

01:13.300 --> 01:16.090
bản nút bạn đang sử dụng nhưng nếu bạn đang sử dụng

01:16.090 --> 01:17.750
phiên bản mới nhất, cú pháp

01:17.750 --> 01:19.630
JavaScript hiện đại này chắc chắn

01:19.630 --> 01:21.380
sẽ được hỗ trợ.

01:21.380 --> 01:24.220
Mô-đun có thể ở mức commonjs, nhưng sau đó, tôi

01:24.220 --> 01:27.460
cũng muốn thêm moduleResolution vào đây và đặt mô-đun

01:27.460 --> 01:29.010
này thành node.

01:29.010 --> 01:33.350
Điều này chỉ đơn giản là cho TypeScript biết các tệp và quá trình nhập khác nhau của

01:33.350 --> 01:35.483
bạn sẽ hoạt động cùng nhau như thế nào.

01:36.410 --> 01:37.640
Và chúng tôi cần đặt cái này thành

01:37.640 --> 01:40.020
nút để đảm bảo rằng mọi thứ hoạt động chính xác.

01:40.020 --> 01:42.470
Tôi cũng sẽ đặt outDir của mình tại đây, nhận

01:42.470 --> 01:44.790
xét điều này trong và đặt nó thành dist,

01:44.790 --> 01:46.990
và rootDir của tôi thành src vì tôi muốn

01:46.990 --> 01:49.600
tách mã nguồn bản thảo của mình.

01:49.600 --> 01:50.700
Và sau đó, đầu ra sẽ

01:50.700 --> 01:53.170
là các tệp JavaScript thực tế mà chúng ta

01:53.170 --> 01:55.733
có thể thực thi với sự trợ giúp của nút.

01:56.820 --> 01:58.850
Ngoài ra, tôi ổn với chế độ nghiêm ngặt, nhưng

01:58.850 --> 02:00.710
tất nhiên, bạn có thể tinh chỉnh tất cả điều

02:00.710 --> 02:03.030
này theo nhu cầu và sở thích cá nhân của mình.

02:03.030 --> 02:06.320
Rốt cuộc thì bạn đã học được tất cả những điều đó trong suốt khóa học này.

02:06.320 --> 02:08.830
Và cùng với đó, chúng ta có thể lưu cấu hình này.

02:08.830 --> 02:11.070
Nhân tiện, bạn cũng sẽ thấy thiết lập bắt đầu rất

02:11.070 --> 02:12.460
cơ bản này được đính kèm.

02:12.460 --> 02:14.120
Bạn có thể lưu cấu hình này.

02:14.120 --> 02:16.170
Và tôi cũng sẽ tạo một thư mục src

02:16.170 --> 02:18.130
nơi chúng tôi sẽ viết mã nguồn,

02:18.130 --> 02:20.230
mã nguồn bản thảo của chúng tôi.

02:20.230 --> 02:23.020
Và đó là phần mà bây giờ tôi muốn đi sâu vào.

02:23.020 --> 02:26.370
Bây giờ chúng ta sẽ xây dựng ứng dụng của mình với TypeScript

02:26.370 --> 02:27.960
trong thư mục src.

02:27.960 --> 02:30.200
Và vì chúng tôi sẽ xây dựng một máy chủ web đơn giản và chúng

02:30.200 --> 02:32.920
tôi cũng muốn sử dụng Express. js ở đó, trước hết

02:32.920 --> 02:36.120
tôi sẽ cài đặt một số phụ thuộc ở đây.

02:36.120 --> 02:38.440
Với npm install --save, tôi muốn

02:38.440 --> 02:41.040
cài đặt express ở đây, đây là khung Express

02:41.040 --> 02:44.100
cho Node. js mà bạn, tất nhiên, không phải

02:44.100 --> 02:45.680
lúc nào cũng cần nhưng ở đây,

02:45.680 --> 02:48.440
tôi muốn xây dựng một ứng dụng Node Express.

02:48.440 --> 02:51.500
Và nó sẽ cài đặt gói body-parser giúp chúng

02:51.500 --> 02:54.403
ta phân tích các nội dung yêu cầu đến.

02:55.290 --> 02:58.180
Hiện tại, đó là vấn đề liên quan đến phụ thuộc sản xuất của tôi.

02:58.180 --> 03:00.110
Chúng tôi có thể bổ sung thêm sau.

03:00.110 --> 03:01.523
Vì vậy, hãy nhấn vào đây.

03:02.960 --> 03:04.120
Và với cài đặt đó,

03:04.120 --> 03:07.540
chúng ta hãy xem xét các phụ thuộc phát triển.

03:07.540 --> 03:11.450
Tôi sẽ cài đặt những cái đó với npm install --save-dev, và ở đó,

03:11.450 --> 03:13.330
tôi muốn cài đặt modem, một công

03:13.330 --> 03:16.340
cụ cho phép chúng tôi thực thi một tệp bằng Node,

03:16.340 --> 03:18.210
nhưng sau đó cũng xem tệp và thư

03:18.210 --> 03:19.820
mục chứa tệp đó. như tất cả

03:19.820 --> 03:22.690
các thư mục con cho các thay đổi.

03:22.690 --> 03:24.050
Bất cứ khi nào một tệp thay

03:24.050 --> 03:26.030
đổi, nó sẽ khởi động lại máy chủ Node.

03:26.030 --> 03:27.620
Điều này đơn giản sẽ tăng tốc độ

03:27.620 --> 03:29.510
phát triển vì nó sẽ tự động khởi động

03:29.510 --> 03:31.490
lại máy chủ ứng dụng Node của chúng tôi

03:31.490 --> 03:33.500
mỗi khi chúng tôi thay đổi mã nguồn.

03:33.500 --> 03:36.180
Chúng ta cần khởi động lại máy chủ khi mã thay đổi vì nếu

03:36.180 --> 03:39.430
không, máy chủ của chúng tôi vẫn chạy trên mã cũ, nhưng việc khởi

03:39.430 --> 03:41.340
động lại thủ công rất khó chịu nên chúng

03:41.340 --> 03:44.190
tôi không thể tăng tốc việc này bằng gật đầu.

03:44.190 --> 03:47.323
Và hiện tại, đó thực sự là nó.

03:49.290 --> 03:50.340
Vì vậy, hãy nhấn enter tại

03:50.340 --> 03:52.360
đây và cài đặt phụ thuộc phát triển này.

03:52.360 --> 03:54.760
Nó sẽ không phải là thứ cuối cùng chúng ta cần trong khóa

03:54.760 --> 03:56.660
học này, nhưng hiện tại, chúng ta vẫn ổn.

03:56.660 --> 03:58.830
Vì vậy, hãy đợi cho đến khi điều này kết thúc.

03:58.830 --> 04:00.130
Vậy là quá trình cài đặt

04:00.130 --> 04:01.450
đã hoàn tất, bây giờ hãy

04:01.450 --> 04:04.773
bắt đầu viết và tạo một ứng dụng Node Express rất cơ bản.
