WEBVTT

00:02.120 --> 00:04.590
Instructor: Como mencioné en la última conferencia, el

00:04.590 --> 00:06.080
modo de vigilancia es un gran comienzo,

00:06.080 --> 00:08.910
pero ¿qué pasa si tenemos más de un archivo TypeScript?

00:08.910 --> 00:13.370
¿Y si también tenemos una analítica? ts donde hipotéticamente

00:13.370 --> 00:18.370
enviamos los datos analíticos a nuestro servidor?

00:18.530 --> 00:21.430
Ahora, aquí para tener cualquier cosa ahí, voy

00:21.430 --> 00:24.240
a poner una consola. pero, por supuesto, usted

00:24.240 --> 00:26.710
podría estar enviando peticiones HTTP a su

00:26.710 --> 00:29.180
servicio de análisis aquí como he dicho.

00:29.180 --> 00:32.685
Así que digamos que también importamos este archivo

00:32.685 --> 00:36.420
aquí en nuestro índice. archivo html.

00:36.420 --> 00:40.320
Si apuntamos a la analítica. js que aún no existe pero que existirá

00:40.320 --> 00:41.730
después de la compilación,

00:41.730 --> 00:44.760
entonces podríamos estar cargando estos dos archivos

00:44.760 --> 00:46.660
y por supuesto, queremos compilar

00:46.660 --> 00:48.950
ambos archivos cada vez que uno de ellos

00:48.950 --> 00:50.900
cambie.

00:50.900 --> 00:52.490
Ahora, para eso, sería bueno

00:52.490 --> 00:55.320
si pudiéramos entrar en algún modo de vigilancia general

00:55.320 --> 00:57.630
donde simplemente ejecutamos tsc así sin

00:57.630 --> 00:59.790
apuntar a un archivo y simplemente observa

00:59.790 --> 01:02.480
toda nuestra carpeta de proyecto y recompila cualquier

01:02.480 --> 01:05.823
archivo TypeScript que pueda cambiar.

01:06.720 --> 01:08.960
Pues bien, resulta que esto es posible.

01:08.960 --> 01:11.340
Para ello sólo tenemos que decirle

01:11.340 --> 01:15.020
a TypeScript que este es un proyecto que debe ser gestionado

01:15.020 --> 01:16.750
con TypeScript y lo hacemos

01:16.750 --> 01:18.980
en primer lugar, y sólo tenemos

01:18.980 --> 01:20.700
que hacer esto una vez, ejecutando

01:20.700 --> 01:23.710
tsc --init.

01:23.710 --> 01:26.170
Así que no estoy apuntando a un archivo específico

01:26.170 --> 01:29.540
aquí, sólo ejecuto tsc y luego --init aquí y de nuevo, esto sólo

01:29.540 --> 01:31.230
se requiere una vez.

01:31.230 --> 01:33.530
Inicializará este proyecto en el que se ejecuta

01:33.530 --> 01:36.390
este comando como un proyecto TypeScript.

01:36.390 --> 01:39.910
Eso significa que ahora básicamente le dirá a TypeScript que todo

01:39.910 --> 01:41.850
en la carpeta donde se ejecuta este

01:41.850 --> 01:44.160
comando y por lo tanto es importante que usted

01:44.160 --> 01:46.470
navegó en la carpeta correcta antes de ejecutar

01:46.470 --> 01:48.070
este comando con el terminal

01:48.070 --> 01:50.550
incorporado aquí en VS Code.

01:50.550 --> 01:52.910
Automáticamente estoy en esta carpeta del proyecto

01:52.910 --> 01:55.740
donde están mis archivos para que este proyecto sea gestionado

01:55.740 --> 01:57.370
por TypeScript.

01:57.370 --> 01:58.400
Así que vamos a pulsar Enter

01:58.400 --> 02:02.634
y lo que esto hace es que crea este tsconfig. json.

02:02.634 --> 02:06.580
Esto básicamente es el indicador para TypeScript de que el proyecto

02:06.580 --> 02:09.950
en el que se encuentra este archivo y todas las subcarpetas

02:09.950 --> 02:12.239
de esta carpeta deben ser gestionadas

02:12.239 --> 02:14.710
por TypeScript.

02:14.710 --> 02:16.080
Ahora, si echamos un vistazo a este

02:16.080 --> 02:17.860
archivo, vemos que hay un montón de opciones,

02:17.860 --> 02:19.330
la mayoría de ellas comentadas, sólo

02:19.330 --> 02:22.090
están ahí para que veas que puedes establecerlas y tienes una breve

02:22.090 --> 02:24.500
explicación aquí también, pero no tenemos que preocuparnos

02:24.500 --> 02:26.380
por ellas ahora.

02:26.380 --> 02:29.040
Nos sumergiremos en ellos en un segundo.

02:29.040 --> 02:31.610
Por el momento, vamos a cerrar este archivo

02:32.800 --> 02:35.100
aquí y vamos a ver lo que esto nos da,

02:35.100 --> 02:36.550
porque lo que nos da es

02:36.550 --> 02:39.870
que ahora podemos ejecutar sólo tsc como este sin

02:39.870 --> 02:42.610
apuntar a un archivo específico.

02:42.610 --> 02:45.550
Y lo que esto hará es decirle a TypeScript que

02:45.550 --> 02:49.080
siga adelante y compile todos los archivos TypeScript

02:49.080 --> 02:53.090
para que todos los . ts archivos que puede encontrar en este

02:53.090 --> 02:54.770
proyecto por lo que si pulso Enter

02:54.770 --> 02:56.830
aquí, usted ve, esto toma un tiempo, y ahora

02:56.830 --> 03:02.620
lo que tenemos es esta analítica. js y esta aplicación.

03:02.620 --> 03:02.620
archivo js.

03:02.620 --> 03:05.160
Ahora, la analítica. js fue creado por TypeScript

03:05.160 --> 03:10.060
porque encontró que tenemos la analítica.

03:10.060 --> 03:10.060
ts

03:10.060 --> 03:13.390
y, como he dicho, ahora compilará todos los archivos TypeScript

03:13.390 --> 03:14.730
del proyecto.

03:14.730 --> 03:17.660
Y, por supuesto, también se puede combinar con el modo reloj.

03:17.660 --> 03:20.630
Puedes ejecutar tsc -w o --watch como mostré

03:20.630 --> 03:23.420
antes y esto entrará en modo de vigilancia

03:23.420 --> 03:26.970
para todos los archivos TypeScript.

03:26.970 --> 03:29.590
Así que ahora cada vez que cambie uno de ellos

03:29.590 --> 03:31.920
y lo guarde, se recompilará.

03:31.920 --> 03:33.840
Recompilará ese archivo que cambió

03:33.840 --> 03:36.100
y por lo tanto, todo el cambio reflejado

03:36.100 --> 03:37.800
en el archivo JavaScript.

03:37.800 --> 03:38.633
Y ya está aquí.

03:38.633 --> 03:41.430
Si vuelvo a mi página, vemos el envío de datos también

03:41.430 --> 03:44.463
porque ahora la analítica. ts.
