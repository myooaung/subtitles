WEBVTT

00:02.050 --> 00:04.090
講師：では､ どのようなデメリットがあるのでしょうか？

00:04.090 --> 00:06.030
このES6モジュールのインポートを使って､

00:06.030 --> 00:12.390
複数のファイルに分割して作業したプロジェクトがこちらです｡

00:12.390 --> 00:15.620
さて､ 実際にこのプロジェクトをビルドしてみましょう｡

00:15.620 --> 00:18.400
そのために､ 前回と同様に npm-start

00:18.400 --> 00:21.930
を実行して lite-server を立ち上げます｡

00:21.930 --> 00:26.367
もちろん､ 新しいタブで､ ウォッチモードでTypeScriptのコンパイルを起動するために､

00:27.820 --> 00:31.430
tsc-dashを実行することも非常に重要です｡

00:31.430 --> 00:35.590
ブラウザの開発者ツールで「ネットワーク」タブを開き､

00:35.590 --> 00:44.840
このファイルを再読み込みすると､ この設定の欠点や問題点を確認することができます｡

00:44.840 --> 00:47.490
HTTPリクエストの束が見える｡ 

00:47.490 --> 00:49.160
最後のものは無視していただいて結構ですが､

00:49.160 --> 00:51.380
これらは開発用サーバーから送られてきたものです｡

00:51.380 --> 00:58.290
しかし､ これらはすべて､ 私たちがアプリに求めるものです｡  js､ project-input｡

00:58.290 --> 00:58.290
js､ project-list｡  js､ base-component｡  jsと､

00:58.290 --> 01:00.960
それが問題なのです｡

01:00.960 --> 01:06.320
これらのファイルはすべてそれほど大きくなく､ 比較的小さいことがおわかりいただけると思います｡

01:06.320 --> 01:07.590
もちろんそれでいいのですが､

01:07.590 --> 01:11.010
ここにはたくさんのHTTPリクエストがあります｡

01:11.010 --> 01:12.600
さて､ それの何が問題なのでしょうか？

01:12.600 --> 01:17.810
その問題点は､ 右の滝を見ればわかるでしょう｡

01:17.810 --> 01:22.470
HTTPリクエストのたびに当然ながら少し時間がかかる｡

01:22.470 --> 01:24.480
ファイルのダウンロードに時間がかかりますが､

01:24.480 --> 01:27.760
それほど大きなファイルではないので､ 問題ありません｡

01:27.760 --> 01:31.390
しかし､ すべてのHTTPリクエストには基本的なオーバーヘッドがあり､

01:31.390 --> 01:34.540
常にかかる基本的な時間があります｡

01:34.540 --> 01:38.570
このグラフの前にある小さな箱がそうです｡ 

01:38.570 --> 01:43.910
これは､ ブラウザがリクエストをセットアップして送信するのに必要な時間に近い｡

01:43.910 --> 01:46.280
そのため､ 実際のファイルのダウンロードは比較的速いかもしれませんが､

01:46.280 --> 01:55.310
リクエストの設定や､ ファイルを提供するサーバーでの作業など､ すべてに時間がかかります｡

01:55.310 --> 01:57.890
そして今､ 私たちのマシン上ですべてが行われているため､

01:57.890 --> 02:00.310
非常に高速なセットアップが実現しました｡

02:00.310 --> 02:03.020
ローカル開発サーバーを手に入れました｡ 

02:03.020 --> 02:08.690
これをウェブに展開すると､ 大量のHTTPリクエストが発生するため､

02:08.690 --> 02:14.760
遅延が発生し､ プロジェクトが遅くなる可能性があります｡

02:14.760 --> 02:17.280
だから､ そのHTTPリクエストの量を減らす解決策が見つかれば､

02:17.280 --> 02:21.370
それは素晴らしいことです｡

02:21.370 --> 02:24.020
そこで登場するのがwebpackです｡ 

02:24.020 --> 02:28.190
webpackに行けばいいんです｡  js. orgをご覧ください｡ 

02:28.190 --> 02:33.750
結局のところ､ webpackはファイルをバンドルするためのツールなのです｡

02:33.750 --> 02:39.980
また､ 彼らのページで見られる､ 広範囲で包括的なドキュメントも本当にお勧めできます｡

02:39.980 --> 02:42.300
webpackのすべてを学びたいなら｡ 

02:42.300 --> 02:46.563
この講座では､ TypeScriptで役立つ機能を厳選してご紹介します｡

02:47.560 --> 02:49.850
では､ webpackとはいったい何なのでしょうか？

02:49.850 --> 02:53.850
バンドルであり､ ビルドオーケストレーションツールと言えるでしょう｡ 

02:53.850 --> 02:59.560
コードを束ねることでHTTPリクエストの量を減らしてくれるツールなんだ｡

02:59.560 --> 03:07.050
つまり､ 複数のファイルに分割されたコードを書いても､ webpackがそれらのファイルをすべてまとめてくれるのです｡

03:07.050 --> 03:10.050
さらに､ webpackはもっと多くのことができるのです｡ 

03:10.050 --> 03:13.920
コードの最適化もできますし､ ビルドのステップやビルドツールを増やして､

03:13.920 --> 03:20.410
たとえばCSSファイルなどを支援することも可能です｡

03:20.410 --> 03:23.180
このモジュールでは､ webpackとTypeScriptに焦点を当てたいので､

03:23.180 --> 03:26.220
それは見ていません｡

03:26.220 --> 03:30.700
ではまず､ webpackを使わない通常の設定を見てみましょう｡

03:30.700 --> 03:32.800
そこで､ 複数のTypeScriptファイルを用意するのですが､

03:32.800 --> 03:40.220
これらのimportを使用すると､ 複数のHTTPリクエストが発生することになり､ 先ほど述べた理由からあまり良いとは言えません｡

03:40.220 --> 03:43.450
さらに､ 私がこれまで見てこなかったトピックとして､

03:43.450 --> 03:47.670
最適化されていないコードがある可能性も非常に高く､ それはつまり､

03:47.670 --> 03:51.290
可能な限り小さくなっていないことを意味するのです｡

03:51.290 --> 03:55.750
関数名を短くするなどして､ よりコードを最適化できることは確かです｡

03:55.750 --> 03:58.690
もちろん､ 読めないコードを手作業で処理する必要がないように､

03:58.690 --> 04:03.000
これを自動的に行ってくれるツールが欲しいですね｡

04:03.000 --> 04:06.080
私たちは､ 開発者として完璧に読みやすいコードを書きたいのです｡ 

04:06.080 --> 04:07.850
しかし､ このコードを短縮して､

04:07.850 --> 04:10.740
できるだけ小さな変数名や関数名にして､

04:10.740 --> 04:19.130
できるだけ少ないコードで出荷できるようなツールがあれば､ とても便利です｡

04:19.130 --> 04:22.940
なぜなら､ コードが少ないということは､ ユーザーがより速くダウンロードできるということであり､

04:22.940 --> 04:27.600
それは私たちのマシン上で私たちのアプリケーションがより速く起動することを意味するからです｡

04:27.600 --> 04:29.440
さらに､ 現在のセットアップでは､

04:29.440 --> 04:32.860
追加のパッケージであるlite-serverという開発用サーバーがインストールされており､

04:32.860 --> 04:36.860
これをスピンアップする必要があります｡

04:36.860 --> 04:39.320
1つのコマンドで､ プロジェクトの構築はもちろん､

04:39.320 --> 04:45.360
プロジェクトのファイルを変更するたびに自動的にウェブサイトを再読み込みするようなサーバーを立ち上げることができれば､

04:45.360 --> 04:50.713
ちょっとしたボーナスにはならないでしょう｡

04:51.550 --> 04:54.270
そこで､ webpackが役に立ちます｡ 

04:54.270 --> 04:57.240
コードをバンドルすることで､ インポート数を減らし､

04:57.240 --> 05:00.670
代わりに出荷するコードをバンドルし､ コードの最適化､

05:00.670 --> 05:10.130
いわゆるminifyを行い､ 出荷するコードを減らし､ ユーザーがダウンロードするコードを減らせるようにします｡

05:10.130 --> 05:15.750
また､ ビルドのステップを増やそうと思えば簡単に増やせますし､

05:15.750 --> 05:19.270
開発サーバを追加することもできますが､

05:19.270 --> 05:24.130
本当に必要であれば他にもいろいろなことができます｡

05:24.130 --> 05:30.433
それでは､ 私たちのプロジェクトでのセットアップ例を見て､ そこでどのようにwebpackを使うことができるかを学びましょう｡
