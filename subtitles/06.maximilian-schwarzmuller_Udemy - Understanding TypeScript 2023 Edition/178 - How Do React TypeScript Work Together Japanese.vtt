WEBVTT

00:02.130 --> 00:03.970
講師：まず､ npm startで開発サーバーを起動します｡

00:03.970 --> 00:10.940
このプロセスは､ ファイルの変更を監視するため､ 常に起動しておく必要があります｡

00:10.940 --> 00:13.270
そして､ 何か変更があった場合､ 具体的に変更を保存すると､

00:13.270 --> 00:20.090
コードの種類をJavaScriptに再コンパイルし､ JSXをJavaScriptに再コンパイルし､

00:20.090 --> 00:27.630
最終的に､ reactアプリケーションを構築してローカルホスト3000で提供します｡

00:27.630 --> 00:31.800
この出力で､ Devコンソールで動作しているのがわかると思います｡

00:31.800 --> 00:34.340
もちろん､ Appでは何もレンダリングしないので､

00:34.340 --> 00:36.700
あまり見えません｡ tsx現時点では｡ 

00:36.700 --> 00:38.170
もちろん､ それは変わっていくでしょう｡ 

00:38.170 --> 00:39.420
そして､ これが起動したら､

00:39.420 --> 00:43.580
今度はコードを書いたり､ 得られたものを分析したりしましょう｡

00:43.580 --> 00:46.750
インデックスに tsx 特別なものはないんですよね？

00:46.750 --> 00:49.060
これは通常のJavaScriptのコードです｡ 

00:49.060 --> 00:52.950
アプリで｡  tsxでは､ このタイプの割り当てが見られますが､

00:52.950 --> 00:57.980
そこで分かるのは､ この奇妙なタイプをAppに割り当てたということです｡

00:57.980 --> 01:02.480
さて､ その型をちょっと無視すると､ 実際にAppに何が格納されているのか？

01:02.480 --> 01:04.840
まあ､ 関数､ 矢印関数ですが､ それでも普通の関数です､

01:04.840 --> 01:07.290
したがって｡

01:07.290 --> 01:12.570
なぜこの型は機能しないのか､ なぜこの型は私たちが学んだ機能型の一つではないのか｡

01:12.570 --> 01:14.030
まあ､ フードの下にあるのですが､

01:14.030 --> 01:21.070
これはreactが提供する型であり､ 今はもちろんreact typesパッケージで提供される重要なものです｡

01:21.070 --> 01:26.070
ノードモジュールに行くと､ @typesフォルダがあり､ その中にたくさんの型があります｡

01:26.390 --> 01:28.470
また､ ここにはreactの型があり､

01:28.470 --> 01:32.600
すべてのreact-domの型があります｡

01:32.600 --> 01:35.840
そして最終的には､ この型は暗黙のうちにreact typesフォルダから自動的にインポートされる､

01:35.840 --> 01:39.340
と言えるでしょう｡

01:39.340 --> 01:40.870
さて､ このタイプは何でしょう？

01:40.870 --> 01:44.490
FCは単にファンクションコンポーネントの略です｡ 

01:44.490 --> 01:47.570
また､ これより長い形もありますので､ そちらを代用することもできます｡

01:47.570 --> 01:49.240
まさに同じタイプですね｡ 

01:49.240 --> 01:51.090
もう1つは単なるショートカットで､

01:51.090 --> 01:54.300
これはAppに格納するものは関数でなければならないと定義していますが､

01:54.300 --> 02:00.550
reactの関数コンポーネントとして適格な関数です｡

02:00.550 --> 02:07.420
もちろん､ クラスベースのコンポーネントも書けますし､

02:07.420 --> 02:12.720
クラシックコンポーネントもあります｡

02:12.720 --> 02:14.670
さて､ これはJSXを返す関数なので関数コンポーネントですが､

02:14.670 --> 02:20.850
これがreactで関数コンポーネントが作られる方法です｡

02:20.850 --> 02:24.180
もし､ このreturn文を一時的に削除すると､ これを保存してコンパイルしようとしたときに､

02:24.180 --> 02:28.800
エラーが発生する可能性があります｡

02:28.800 --> 02:34.960
なぜなら､ TypeScriptに「ここに関数コンポーネントを格納したい」と伝えているのに､

02:34.960 --> 02:38.520
格納しているのは普通の関数だけで､ JSXを返す関数など､

02:38.520 --> 02:42.800
react要素として適格なものは何もないからだ｡

02:42.800 --> 02:45.810
したがって､ これは無効であり､ 我々はそれを修正しなければならないだろう｡

02:45.810 --> 02:50.360
ここですでに､ TypeScriptによってプロジェクトが少し改善されたことがわかります｡

02:50.360 --> 02:52.500
これによって型安全性が向上し､

02:52.500 --> 02:58.353
例えば無効なコンポーネントを作成するような状況でも実行できるようになります｡

02:59.200 --> 03:03.230
余談ですが､ このreturn文を忘れるなんて非現実的だと思われるかもしれませんが､

03:03.230 --> 03:11.070
複数のif文と異なるreturn文でより大きなコンポーネントを構築することを考慮してみてください｡

03:11.070 --> 03:19.130
TypeScriptは､ 実行中にクラッシュする可能性のある状況よりも､

03:19.130 --> 03:23.710
少し早めに警告を発してくれます｡

03:23.710 --> 03:25.620
というわけで､ TypeScriptが何かをやっているわけですが､

03:25.620 --> 03:27.740
話はこれくらいにしておきましょう｡

03:27.740 --> 03:28.690
ここでは比較的簡単なアプリを作りたいと思います｡

03:28.690 --> 03:39.480
ToDoアプリで､ かなり古典的ですが､ TypeScriptを使ったreactのコアなコンセプトを実践できるToDoアプリです｡

03:39.480 --> 03:44.363
というわけで､ 次回の講義では､ 実際に最初のカスタムコンポーネントを始めてみましょう｡
