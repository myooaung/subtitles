WEBVTT

00:02.220 --> 00:03.053
المدرب: الآن

00:03.053 --> 00:04.920
، لقد ذكرت أن الواجهات تستخدم

00:04.920 --> 00:07.114
لتعريف بنية الكائن.

00:07.114 --> 00:09.690
الآن ، يمكن أيضًا استخدام الواجهات

00:09.690 --> 00:11.750
لتحديد بنية الوظيفة.

00:11.750 --> 00:14.330
لذلك بشكل أساسي كبديل لأنواع الوظائف التي

00:14.330 --> 00:15.578
تعلمتها بالفعل.

00:15.578 --> 00:17.890
تمامًا مثل التنشيط السريع ، يمكننا

00:17.890 --> 00:20.090
تحديد نوع الوظيفة ، على سبيل المثال

00:20.090 --> 00:23.305
، بنوع مخصص مع نوع الكلمة الأساسية.

00:23.305 --> 00:26.380
AddFn لوظيفة add والتي يمكن أن تحتوي

00:26.380 --> 00:29.350
بعد ذلك على تعريف دالة مثل هذا.

00:29.350 --> 00:30.830
يجب أن يُرجع رقمًا

00:30.830 --> 00:32.370
ويجب أن يأخذ وسيطتين

00:32.370 --> 00:35.970
حيث تكون كل وسيطة أيضًا من النوع رقم.

00:35.970 --> 00:39.310
الآن ، يمكننا إنشاء وظيفة جديدة نضيفها

00:39.310 --> 00:42.860
هنا وهي من النوع AddFn وعندما لا نقوم بتهيئتها

00:42.860 --> 00:45.040
ولكن نقوم بتعيين وظيفتنا

00:45.040 --> 00:46.580
لاحقًا ، ثم بالطبع

00:46.580 --> 00:49.470
، علينا التأكد من أن هذه الوظيفة تأخذ

00:49.470 --> 00:51.300
وسيطتين من النوع number

00:51.300 --> 00:55.170
و هناك ، نعيد أيضًا رقمًا.

00:55.170 --> 00:56.360
هذا شيء يمكننا القيام به.

00:56.360 --> 00:57.843
هذا ما تعلمته بالفعل.

00:57.843 --> 01:01.760
الآن ، يمكنك أيضًا استخدام واجهة كبديل لهذا

01:01.760 --> 01:03.077
النوع المخصص.

01:03.077 --> 01:06.860
توجد واجهات لتحديد بنية الكائن كما علمتك ، لكن

01:06.860 --> 01:08.240
في النهاية ، الوظائف

01:08.240 --> 01:10.220
هي مجرد كائنات ، وبالتالي

01:10.220 --> 01:12.720
هذا استثناء صغير.

01:12.720 --> 01:15.350
يمكنك إنشاء أنواع وظائف مع واجهات.

01:15.350 --> 01:18.930
لذلك تقوم بإنشاء واجهة ، قم بتسميتها AddFn

01:18.930 --> 01:20.930
لتظل بهذا الاسم هنا.

01:20.930 --> 01:23.720
والآن هناك ، يمكنك تحديد جزء الوظيفة

01:23.720 --> 01:28.300
عن طريق إضافة الأقواس فقط مع الوسيطات ، أ: رقم ،

01:28.300 --> 01:31.150
ب: رقم ، على سبيل المثال ، ثم نقطتان

01:31.150 --> 01:33.980
، ليس سهمًا ولكن نقطتان هنا مع

01:33.980 --> 01:36.810
نوع الإرجاع.

01:36.810 --> 01:39.780
لذا في النهاية ، كما لو كنت تحدد طريقة

01:39.780 --> 01:41.630
كما نفعلها هنا مع الترحيب

01:41.630 --> 01:45.710
، باستثناء أننا لا نضيف الآن اسمًا للطريقة.

01:45.710 --> 01:47.880
لذلك لدينا وظيفة مجهولة إذا

01:47.880 --> 01:49.300
كنت تريد تسميتها

01:49.300 --> 01:52.000
على هذا النحو في واجهة AddFn ويتفهم

01:52.000 --> 01:55.250
TypeScript هذا التركيب الخاص لهذه الوظيفة

01:55.250 --> 01:57.800
المجهولة في واجهتك ويفهم أنك تريد

01:57.800 --> 02:00.410
استخدام هذه الواجهة كنوع دالة وهذا

02:00.410 --> 02:02.070
هو الشكل الذي يجب أن تبدو

02:02.070 --> 02:05.360
عليه وظيفتك مثل.

02:05.360 --> 02:07.650
الآن يمكننا استخدام AddFn هنا

02:07.650 --> 02:10.440
، وفي الواقع ، إذا كنت سأحاول قبول سلسلة

02:10.440 --> 02:11.640
هنا ، فسنحصل على

02:11.640 --> 02:13.786
خطأ لأن هذا غير قابل للتخصيص

02:13.786 --> 02:17.060
، نحتاج إلى رقم بدلاً من سلسلة.

02:17.060 --> 02:19.670
لذلك فهو ببساطة بديل لهذا النوع المخصص.

02:19.670 --> 02:23.010
بالطبع ، سأجادل هنا أن استخدام النوع المخصص ربما

02:23.010 --> 02:25.020
يكون أكثر شيوعًا ، كما أنه أقصر

02:25.020 --> 02:26.470
قليلاً ولكنه بناء جملة

02:26.470 --> 02:28.340
بديل جيد يجب أن تكون على دراية

02:28.340 --> 02:30.870
به ، خاصة إذا واجهت هذا في مشروع ما وفقدت

02:30.870 --> 02:35.265
ما هذا يعني ، هذه الطريقة المجهولة الغريبة.

02:35.265 --> 02:38.993
حسنًا ، إنها في النهاية مجرد نوع وظيفة مخصصة.
