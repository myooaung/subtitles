WEBVTT

00:02.050 --> 00:04.370
Instructeur : Nous ne pouvons pas ignorer les modules

00:04.370 --> 00:05.880
isolés, mais il y a une autre option,

00:05.880 --> 00:08.000
qui n'est en fait même pas mentionnée ici, mais

00:08.000 --> 00:10.810
que je veux quand même mentionner moi-même.

00:10.810 --> 00:14.680
Et c'est l'option "pas d'émission en cas d'erreur".

00:14.680 --> 00:16.200
Vous pouvez définir cette option

00:16.200 --> 00:18.820
sur true ou false et la valeur par défaut est false.

00:18.820 --> 00:19.653
Maintenant, qu'est-ce que ça fait ?

00:19.653 --> 00:21.330
Si nous le mettons à false, laissez-moi vous

00:21.330 --> 00:23.050
montrer où cela pourrait poser problème.

00:23.050 --> 00:26.530
C'est un problème si nous introduisons une erreur ou cela peut

00:26.530 --> 00:27.590
être un problème.

00:27.590 --> 00:30.690
Disons que j'ai mon bouton et que j'enlève ce

00:30.690 --> 00:32.410
point d'exclamation.

00:32.410 --> 00:34.750
Maintenant, même si nous ne comprenons pas entièrement

00:34.750 --> 00:38.030
ce qui se passe, le problème ici est simplement que TypeScript ne sait

00:38.030 --> 00:40.610
pas que nous avons certainement un bouton ici.

00:40.610 --> 00:42.790
Après tout, lorsqu'on demande un bouton, il se peut

00:42.790 --> 00:45.990
qu'on n'en obtienne pas un s'il n'y a pas d'élément dans le DOM qui satisfasse

00:45.990 --> 00:47.540
ce sélecteur, alors ceci retournera

00:47.540 --> 00:48.800
maintenant.

00:48.800 --> 00:50.910
Et c'est essentiellement ce dont TypeScript se plaint.

00:50.910 --> 00:54.849
Ici, nous accédons à quelque chose sur un objet potentiellement

00:54.849 --> 00:57.200
nul et ce n'est pas bon.

00:57.200 --> 00:59.300
C'est une erreur que nous avons ici.

00:59.300 --> 01:02.120
Si nous compilons notre code, nous obtenons également

01:02.120 --> 01:04.770
cette erreur ici dans la console.

01:04.770 --> 01:08.210
Néanmoins, le fichier est créé.

01:08.210 --> 01:11.660
Donc même si je supprime l'application. jsfile, il sera recréé.

01:11.660 --> 01:13.910
Donc même si nous avons une erreur, TypeScript

01:13.910 --> 01:16.300
crée un fichier JavaScript.

01:16.300 --> 01:18.740
Cela peut être voulu ou non.

01:18.740 --> 01:21.360
Vous avez peut-être une erreur dans votre fichier TypeScript et vous ne

01:21.360 --> 01:22.980
savez pas vraiment comment la contourner,

01:22.980 --> 01:26.000
mais vous savez que cela ne posera pas de problème dans l'application finale.

01:26.000 --> 01:29.410
Comme ici, même si on ne sait pas pour le point d'exclamation.

01:29.410 --> 01:31.577
Eh bien, si nous ne connaissons pas le point d'exclamation,

01:31.577 --> 01:35.900
nous ne saurons peut-être pas comment désactiver cette erreur, en gros.

01:35.900 --> 01:39.630
Mais nous savons quand même que cela va fonctionner dans notre page ici.

01:39.630 --> 01:41.890
Nous pourrions donc être en mesure de le

01:41.890 --> 01:43.630
compiler malgré une erreur.

01:43.630 --> 01:45.570
Mais, bien sûr, en réalité, vous devez

01:45.570 --> 01:48.850
viser des projets sans erreur et préférer apprendre comment

01:48.850 --> 01:51.720
contourner ce problème plutôt que de l'ignorer.

01:51.720 --> 01:54.590
Néanmoins, vous pouvez définir cette valeur sur false

01:54.590 --> 01:57.590
ou ne pas la définir du tout, car false est la valeur par

01:57.590 --> 02:00.687
défaut, si vous êtes d'accord pour générer des fichiers

02:00.687 --> 02:02.590
JavaScript en cas d'erreur.

02:02.590 --> 02:04.240
Cependant, si vous mettez

02:04.240 --> 02:07.700
cette valeur à true, les fichiers problématiques ne seront

02:07.700 --> 02:09.100
pas générés.

02:09.100 --> 02:10.910
Si je refais maintenant ce...

02:12.440 --> 02:15.110
Vous voyez, rien n'est généré en fait.

02:15.110 --> 02:18.180
Même les analyses. Le fichier ts n'est

02:18.180 --> 02:21.440
pas sorti à cet endroit si nous avons un contenu

02:21.440 --> 02:26.440
autre que la console. vous voyez qu'il n'est pas généré.

02:26.550 --> 02:27.560
Et la raison en est que

02:27.560 --> 02:29.600
nous avons une erreur dans le fichier.

02:29.600 --> 02:32.940
Et si un fichier ne parvient pas à compiler, aucun fichier

02:32.940 --> 02:34.300
ne sera omis.

02:34.300 --> 02:35.810
Nous devons donc nous assurer

02:35.810 --> 02:38.850
de corriger cette erreur avant que TypeScript ne compile

02:38.850 --> 02:40.890
à nouveau des fichiers pour nous.

02:40.890 --> 02:43.530
Et, par conséquent, c'est une option que j'aime généralement

02:43.530 --> 02:46.830
définir parce que je ne suis pas intéressé à obtenir des fichiers JavaScript

02:46.830 --> 02:49.703
si j'ai encore des erreurs dans mes fichiers TypeScript.
