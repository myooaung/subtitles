WEBVTT

00:02.290 --> 00:04.300
Quindi avete visto TypeScript

00:04.300 --> 00:06.700
in azione e offre grandi vantaggi.

00:06.700 --> 00:10.570
Rende molto più semplice la scrittura di codice pulito.

00:10.570 --> 00:14.060
TypeScript aggiunge tipi e dati super importanti.

00:14.060 --> 00:16.810
Con i tipi dobbiamo essere molto più espliciti

00:16.810 --> 00:20.970
su come funzionano le cose e possiamo evitare molti errori non

00:20.970 --> 00:24.460
accettati e non necessari usando i tipi.

00:24.460 --> 00:27.640
Inoltre, possiamo usare IDE moderni che hanno un supporto

00:27.640 --> 00:31.070
integrato per i tipi, in grado di riconoscere questi tipi

00:31.070 --> 00:33.130
e di fornire un completamento automatico

00:33.130 --> 00:36.940
migliore e errori integrati che vengono visualizzati prima

00:36.940 --> 00:39.570
ancora di compilare il codice, perché comprendono

00:39.570 --> 00:43.050
anche TypeScript.

00:43.050 --> 00:46.870
Ma oltre ai tipi e agli enormi vantaggi che si ottengono

00:46.870 --> 00:49.660
con l'uso dei tipi, TypeScript offre anche

00:49.660 --> 00:51.410
altre funzionalità.

00:51.410 --> 00:55.170
Possiamo utilizzare alcune funzionalità di JavaScript di nuova generazione,

00:55.170 --> 00:58.340
che possiamo scrivere e utilizzare nei nostri file TypeScript

00:58.340 --> 01:01.890
e che verranno poi compilate in codice JavaScript per risolvere problemi

01:01.890 --> 01:05.630
che funzionano anche con i browser più vecchi.

01:05.630 --> 01:08.170
Se conoscete Bevel, che è uno strumento che

01:08.170 --> 01:11.120
ci permette di farlo anche con Vanilla JavaScript,

01:11.120 --> 01:14.680
è un po' come questo, ma già integrato in TypeScript.

01:14.680 --> 01:18.350
Possiamo utilizzare le moderne funzionalità di JavaScript e continuare a produrre

01:18.350 --> 01:21.773
e distribuire codice che funzioni anche con i browser più vecchi.

01:22.610 --> 01:25.210
TypeScript aggiunge anche alcune caratteristiche

01:25.210 --> 01:26.930
che solo TypeScript comprende,

01:26.930 --> 01:29.070
come le interfacce e i generici.

01:29.070 --> 01:32.560
Si tratta di funzioni che si compilano in JavaScript, ma non

01:32.560 --> 01:35.360
è necessario che lo facciano, perché sono funzioni

01:35.360 --> 01:39.610
che ci aiutano durante lo sviluppo, che ci danno errori più chiari e ci

01:39.610 --> 01:42.200
aiutano a evitare altri errori.

01:42.200 --> 01:45.660
Quindi aggiunge anche altre funzioni su questo fronte, oltre ai Tipi

01:45.660 --> 01:47.950
che abbiamo già imparato a conoscere.

01:47.950 --> 01:50.900
Ci fornisce anche alcune funzionalità di metaprogrammazione,

01:50.900 --> 01:53.700
come i decoratori, su cui ho un intero modulo in

01:53.700 --> 01:55.850
questo corso in cui capirete cosa sono

01:55.850 --> 01:59.520
esattamente i decoratori, perché sono così meta e perché sono

01:59.520 --> 02:01.790
sorprendenti.

02:01.790 --> 02:04.230
TypeScript è altamente configurabile.

02:04.230 --> 02:06.390
Non l'abbiamo configurato finora,

02:06.390 --> 02:09.350
ma ho un intero modulo del corso in cui parliamo

02:09.350 --> 02:12.510
solo del compilatore e di come configurarlo.

02:12.510 --> 02:15.700
È possibile regolare con precisione il sistema in base

02:15.700 --> 02:18.960
alle proprie esigenze, rendendolo più rigido o meno rigido

02:18.960 --> 02:23.310
e assicurandosi che si comporti esattamente nel modo desiderato.

02:23.310 --> 02:26.790
E con il Modern Tooling con gli IDE moderni si ottiene

02:26.790 --> 02:30.610
anche il supporto per progetti non-TypeScript.

02:30.610 --> 02:33.700
L'IDE che avete appena visto, visual studio code, offre

02:33.700 --> 02:37.740
persino un supporto migliore per i file JavaScript semplici, perché è

02:37.740 --> 02:41.010
in grado di utilizzare alcune funzionalità di TypeScript

02:41.010 --> 02:44.710
senza che l'utente utilizzi esplicitamente TypeScript.

02:44.710 --> 02:47.640
Si tratta quindi di un vantaggio gratuito che si ottiene

02:47.640 --> 02:49.810
quando si conosce TypeScript e si utilizzano

02:49.810 --> 02:52.020
strumenti moderni.

02:52.020 --> 02:54.830
Ci sono molte ragioni per usare TypeScript e probabilmente

02:54.830 --> 02:57.460
è il motivo per cui avete seguito questo corso.

02:57.460 --> 03:00.360
In questo corso lo impareremo passo dopo passo e scopriremo

03:00.360 --> 03:03.663
tutte le incredibili funzionalità che aggiunge.
