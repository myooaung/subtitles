WEBVTT

00:02.270 --> 00:03.103
講師：そのために､

00:03.103 --> 00:04.620
ちょっとした企画を用意しました｡

00:04.620 --> 00:05.610
添付されているのがわかります｡ 

00:05.610 --> 00:08.810
何度も何度も使い回したスタートダッシュのプロジェクトです｡

00:08.810 --> 00:12.080
npm-startで開発サーバーを起動し､

00:12.080 --> 00:19.830
別ターミナルでtsc-wでウォッチモードでTypeScriptのコンパイルを開始しました｡

00:19.830 --> 00:22.890
この内蔵ターミナルには､ 2つのタブがあります｡ 

00:22.890 --> 00:24.390
1つは開発用サーバーで､

00:24.390 --> 00:26.070
変更を監視してページを再読み込みし､

00:26.070 --> 00:27.670
サーバーを稼働させ続ける必要があります｡

00:27.670 --> 00:35.530
もう1つのタブでは､ TypeScriptコンパイルウォッチャーを稼働させています｡

00:35.530 --> 00:39.400
これで､ アプリでの作業ができるようになりました｡

00:39.400 --> 00:39.400
のファイルを作成し､

00:39.400 --> 00:45.603
そこにコードを書き始めます｡ すぐにでも使えるクラスを定義することから始めたいと思います｡

00:46.490 --> 01:04.100
例えば､ 社内にあるさまざまな部署を管理するためのウェブツールのユーザーインターフェイスを構築するとします｡

01:04.100 --> 01:05.770
もしかしたら､ 何か会社の内部ツールを作っていて､

01:05.770 --> 01:11.290
そこに複数の部署が必要なのかもしれません｡

01:11.290 --> 01:19.960
ここで､ 異なる部門のデータを管理するためにオブジェクトを使用することができます｡

01:19.960 --> 01:24.020
そして､ 部門情報を画面にレンダリングするために､

01:24.020 --> 01:33.000
各オブジェクトにメソッドを追加することができます｡

01:33.000 --> 01:35.690
そこで､ このクラスをDepartmentと名付けることができる｡ 

01:35.690 --> 01:36.830
名前は完全におまかせです｡ 

01:36.830 --> 01:42.720
慣例として､ クラスであることを明確にするために大文字で始まる｡

01:42.720 --> 01:48.270
さて､ JavaScriptの開発を長くやっている人なら､

01:48.270 --> 01:56.980
コンストラクタ関数のアイデアを知っているかもしれません｡

01:56.980 --> 01:59.220
Departmentというクラスがあり､

01:59.220 --> 02:02.080
その中にnameプロパティがあります｡

02:02.080 --> 02:04.010
このように､ letやconstを前に付けずに､

02:04.010 --> 02:12.550
直接クラスに追加できます｡ もちろん､ これに型を割り当てることもできます｡

02:12.550 --> 02:14.690
そのためには､ ここにコロンをつけて､ それから文字列のような型をつけるのですが､

02:14.690 --> 02:17.920
これが重要です｡

02:17.920 --> 02:21.150
これはオブジェクトのように見えるかもしれませんが､ オブジェクトではありません｡ 

02:21.150 --> 02:23.240
オブジェクトでは､ キーと値のペアをコロンで区切って､

02:23.240 --> 02:27.000
キー名とそのキーに対応する値を持ちます｡

02:27.000 --> 02:28.810
ここではそれがない｡ 

02:28.810 --> 02:32.250
これはいわゆるクラスのフィールドである｡ 

02:32.250 --> 02:34.680
中括弧で囲んだクラスを作成しますが､

02:34.680 --> 02:37.110
ここではキーと値のペアではなく､

02:37.110 --> 02:48.530
クラスに基づいて作成するオブジェクトのキーの名前を定義し､ 最後にそのキーが持つ値の型を定義するだけです｡

02:48.550 --> 02:52.363
ここで= 'DEFAULT'を使って初期値を設定することもできますが､

02:53.840 --> 02:55.920
その必要はありません｡

02:55.920 --> 02:59.050
その代わり､ もうひとつ､ 一般的にクラスで持っているのは､

02:59.050 --> 03:03.410
そこにある特殊な関数､ いわゆるメソッドです｡

03:03.410 --> 03:09.410
オブジェクトの中の関数は単にメソッドと呼ばれ､ これがコンストラクタ・メソッドとなる｡

03:09.410 --> 03:12.500
このように追加することができ､ これは予約語です｡ 

03:12.500 --> 03:18.390
コンストラクタはTypeScriptや最近のJavaScriptで理解されている予約キーワードで､

03:18.390 --> 03:29.640
本質的にはこのクラスに結びついた関数であり､ クラスに基づいて作成したオブジェクトに結びつき､ オブジェクトが作成されるときに実行されるものである｡

03:29.640 --> 03:35.700
このため､ 基本的には構築するオブジェクトの初期化作業を行うことができます｡

03:35.700 --> 03:38.280
今､ その中であなたは議論を受け入れることができました｡ 

03:38.280 --> 03:41.910
nという名前をつけて､ それをnameフィールドに格納するか､

03:41.910 --> 03:51.200
thisキーワードでnameにアクセスし､ そこにnを格納します｡

03:51.200 --> 03:55.200
これは､ nameフィールド（nameプロパティのsoプロパティとも呼ばれる）の値を､

03:55.200 --> 04:04.550
departmentオブジェクトが作成されたときにnで取得する値に設定するものです｡

04:04.550 --> 04:07.030
さて､ このような部門オブジェクトを作るにはどうしたらよいのだろうか｡ 

04:07.030 --> 04:08.890
これほど簡単なことはない｡ 

04:08.890 --> 04:20.160
TypeScriptとJavaScriptに組み込まれているnewキーワードを使って作成したクラスの外側で､

04:20.160 --> 04:22.440
クラス名を繰り返し､

04:22.440 --> 04:33.440
括弧を追加して､ 新しいdepartmentオブジェクトを作成します｡

04:33.440 --> 04:35.600
ここで､ コンストラクタの引数をこの部門呼び出しに渡しますので､

04:35.600 --> 04:39.800
これらの括弧の間です｡

04:39.800 --> 04:44.730
ここでは､ 経理部門を構築するため､ 「Accounting」と名付けることができるかもしれません｡

04:44.730 --> 04:49.800
これで､ このブループリントに基づいて新しいJavaScriptオブジェクトが作成されるようになりました｡

04:49.800 --> 04:58.010
これで､ 例えば定数に格納してコンソールすることができますね｡

04:58.010 --> 04:58.010
ログを表示します｡  会計はこちら

04:58.010 --> 04:59.620
これを保存して､ このページに戻り､

04:59.620 --> 05:07.930
defツールの開発コンソールを見てみると､ ここにDepartmentオブジェクトがあるはずです｡

05:07.930 --> 05:10.000
これは通常のJavaScriptのオブジェクトで､

05:10.000 --> 05:23.110
Department型と呼ばれるものがついていて､ 最終的にはキーと値のペアを1つ持つオブジェクトになります｡

05:23.110 --> 05:27.460
このAccountingの値はコンストラクタの引数として渡しているので､

05:27.460 --> 05:29.560
ここで持っています｡

05:29.560 --> 05:31.770
我々はこのような文字列を受け入れ､

05:31.770 --> 05:34.830
このフィールドとフィールドの値を復元している最終的には単にプロパティに変換され､

05:34.830 --> 05:41.890
クラスに基づいてオブジェクトは､ 後に持っているでしょう｡

05:41.890 --> 05:44.480
つまり､ これが簡単なクラスの作り方であり､

05:44.480 --> 05:46.570
一般的な考え方なのです｡

05:46.570 --> 05:50.143
では､ 実際にJavaScriptでどのようなものが得られるか見てみましょう｡ 
