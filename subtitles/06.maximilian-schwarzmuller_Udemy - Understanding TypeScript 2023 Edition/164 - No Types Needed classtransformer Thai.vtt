WEBVTT

00:02.270 --> 00:04.040
ผู้สอน: ดังนั้นเราจึงดูที่ Lodash

00:04.040 --> 00:05.900
ซึ่งเป็นไลบรารีของบุคคลที่สามที่สร้างด้วย

00:05.900 --> 00:08.270
JavaScript สำหรับ JavaScript

00:08.270 --> 00:13.287
คุณยังพบไลบรารีของบุคคลที่สามบางรายการที่มีสคริปต์ประเภทและคุณลักษณะของสคริปต์ประเภทจริงๆ

00:13.287 --> 00:21.230
และมอบวิธีใหม่ในการเขียนโค้ดที่ใช้งานได้เพราะคุณกำลังทำงานกับสคริปต์ประเภท

00:21.230 --> 00:24.950
ตัวอย่างหนึ่งคือตัวแปลงคลาส ตัวอย่างที่ดียิ่งขึ้นคือตัวตรวจสอบความถูกต้องของคลาส

00:24.950 --> 00:28.067
เราจะดูทั้งสองที่นี่

00:28.067 --> 00:31.360
แต่เริ่มจากคลาสทรานส์ฟอร์เมอร์กันก่อน

00:31.360 --> 00:35.870
สมมติว่าในโปรเจ็กต์ของเราตรงนี้ ฉันมีโมเดล โมเดลข้อมูล

00:35.870 --> 00:38.150
ตั้งชื่อมันว่า 'ผลิตภัณฑ์'

00:38.150 --> 00:43.820
ตอนนี้ฉันจะตั้งชื่อผลิตภัณฑ์ แบบอย่าง. ts แต่คุณสามารถตั้งชื่อไฟล์นี้ได้ตามต้องการ

00:43.820 --> 00:48.820
แนวคิดของฉันคือในไฟล์นี้ ฉันกำหนดคลาสสำหรับผลิตภัณฑ์

00:49.420 --> 00:52.180
ดังนั้นฉันจึงอธิบายว่าผลิตภัณฑ์ควรมีลักษณะอย่างไร

00:52.180 --> 00:55.550
ตัวอย่างเช่น มีชื่อเรื่องเป็นสตริงและราคาเป็นตัวเลข

00:55.550 --> 01:02.120
จากนั้นฉันเพิ่มฟังก์ชันคอนสตรัคเตอร์ที่สามารถเริ่มต้นได้ทั้งสองอย่าง

01:02.120 --> 01:07.120
สตริง เพิ่มราคา แล้วผมบอกว่าชื่อนี้เท่ากับ 't' และราคานี้

01:07.210 --> 01:09.360
ราคาเท่ากับ 'p'

01:09.360 --> 01:14.423
และแน่นอนว่าเราสามารถใช้การเริ่มต้นทางลัดโดยที่เราใช้ตัวสร้างเท่านั้น

01:16.150 --> 01:20.400
ถ้าอย่างนั้น สมมติว่าเรามีเมธอดอยู่เสมอ รับข้อมูลที่ฉันส่งคืนอาร์เรย์

01:20.400 --> 01:30.850
สมมติว่าองค์ประกอบแรกคือชื่อเรื่อง และองค์ประกอบที่สองคือสตริงที่จริง ๆ แล้วฉันมีเครื่องหมายดอลลาร์

01:30.850 --> 01:37.833
แล้วแทรกเข้าไปในสตริงนี้ ราคานี้

01:39.030 --> 01:43.030
โมเดลง่ายๆ ตรงนี้ เป็นคลาสที่ง่ายมาก

01:43.030 --> 01:49.590
และตอนนี้เราสามารถใช้คลาสนี้ในแอปได้หากต้องการ

01:49.590 --> 01:49.590
ดังนั้นฉันจะกำจัด

01:49.590 --> 01:58.920
Lodash และนำเข้าผลิตภัณฑ์จาก . /ผลิตภัณฑ์. รุ่น ตอนนี้คุณต้องแน่ใจว่าสิ่งนี้ในรุ่นผลิตภัณฑ์คุณส่งออกคลาสนี้จริง

01:58.920 --> 02:07.890
ๆ มิฉะนั้นคุณจะไม่สามารถนำเข้าได้และที่นี่เราต้องส่งออกผลิตภัณฑ์เช่นนี้เพราะฉันใช้การส่งออกที่มีชื่อที่นี่โดยเพิ่มคำหลักการส่งออกใน

02:07.890 --> 02:11.950
หน้าชั้นเรียน

02:11.950 --> 02:16.497
แน่นอนว่าตอนนี้เราสามารถสร้างผลิตภัณฑ์ใหม่

02:18.150 --> 02:23.150
หนังสือราคา 12 เล่ม 99 และหลังจากนั้น ฉันคอนโซลล็อก

02:24.080 --> 02:28.190
p1 รับข้อมูล และเราควรบันทึกอาร์เรย์นี้

02:28.190 --> 02:31.390
ดังนั้น หากตอนนี้เราเรียกใช้ npm start here เว็บแพ็ค

02:31.390 --> 02:37.340
dev ของเราจะเริ่มทำงาน และเราควรเห็นอาร์เรย์ที่สวยงามพร้อมข้อมูลเกี่ยวกับหนังสือเล่มนี้

02:37.340 --> 02:39.463
ดังนั้นถ้าฉันโหลดที่นี่ มันคือที่นี่

02:40.630 --> 02:43.170
แน่นอนว่าตอนนี้มันไม่แฟนซีเกินไป ใช้งานได้

02:43.170 --> 02:44.930
แต่นั่นไม่ใช่สิ่งใหม่

02:44.930 --> 02:49.610
ตอนนี้สถานการณ์ทั่วไปในแอปที่ใหญ่กว่าคือคุณอาจกำลังดาวน์โหลดข้อมูลบางอย่าง

02:49.610 --> 02:54.490
เช่น จากเซิร์ฟเวอร์ คุณกำลังดึงข้อมูลจากเซิร์ฟเวอร์ส่วนหลัง จากนั้นเซิร์ฟเวอร์จะส่งคืนข้อมูล

02:54.490 --> 03:01.560
json บางส่วนที่คุณส่งผ่าน ซึ่งอาจเป็นรายการ ของสินค้า.

03:01.560 --> 03:05.520
ดังนั้นที่นี่เราอาจมีผลิตภัณฑ์ที่เราได้รับจากเซิร์ฟเวอร์

03:05.520 --> 03:10.520
จากนั้นเราจึงมีชื่อ พรม และราคา 29 99 แล้วเราก็มีเล่มนี้ด้วย

03:13.047 --> 03:18.047
ชื่อเรื่อง หนังสือ แล้วก็ราคา

03:18.120 --> 03:22.830
10 99 ขอบอกว่า.

03:22.830 --> 03:25.310
นั่นเป็นอาร์เรย์ข้อมูลง่ายๆ

03:25.310 --> 03:27.730
ที่เราได้รับจากส่วนหลัง

03:27.730 --> 03:30.590
แน่นอนว่าสิ่งเหล่านี้เป็นวัตถุ JavaScript

03:30.590 --> 03:33.730
แต่ไม่ใช่อินสแตนซ์ของรุ่นผลิตภัณฑ์ของเรา

03:33.730 --> 03:37.220
และนั่นเป็นสถานการณ์ทั่วไปที่คุณได้รับข้อมูลเป็น json

03:37.220 --> 03:42.850
โดยไม่มีข้อมูลที่แนบมา เช่น ฟังก์ชันคอนสตรัคเตอร์ที่คุณเขียนโค้ดส่วนหน้าอยู่

03:42.850 --> 03:46.770
เซิร์ฟเวอร์ของคุณรู้เรื่องนั้นและ json ก็เป็นรูปแบบที่เพียงแค่ส่งข้อมูลพื้นฐาน

03:46.770 --> 03:53.540
คุณไม่มีข้อมูลเมตาที่สมบูรณ์ให้กับวัตถุที่แนบมาด้วย

03:53.540 --> 03:56.300
หรืออย่างน้อยคุณจะต้องทำด้วยตนเอง

03:56.300 --> 04:03.310
กล่าวอีกนัยหนึ่ง ผลิตภัณฑ์ที่เราได้รับในที่นี้คือวัตถุที่ไม่มีวิธีการรับข้อมูล

04:03.310 --> 04:08.230
ตามธรรมเนียมแล้ว ถ้าคุณต้องการแปลงสิ่งนี้เป็นอินสแตนซ์ของโมเดลของคุณ

04:08.230 --> 04:12.680
คุณจะต้องทำด้วยตนเอง

04:12.680 --> 04:17.680
คุณสามารถมีผลิตภัณฑ์ที่โหลดได้ ซึ่งสมมติว่าใช้ผลิตภัณฑ์ เรียกใช้เมธอด map และในทุกผลิตภัณฑ์ในอาร์เรย์นั้น

04:19.260 --> 04:30.680
เราจะส่งคืนผลิตภัณฑ์ใหม่สำหรับผลิตภัณฑ์

04:30.680 --> 04:30.680
ชื่อเรื่องและผลิตภัณฑ์ ราคา

04:34.330 --> 04:40.230
และหลังจากนั้นเราจะมีอาร์เรย์ที่เต็มไปด้วยอินสแตนซ์ของฟังก์ชันคอนสตรัคเตอร์ของผลิตภัณฑ์จริง

04:40.230 --> 04:43.163
และจากนั้นเราสามารถวนซ้ำได้ โหลดผลิตภัณฑ์แล้วเข้าไปที่นั่น

04:44.330 --> 04:51.083
ตัวอย่างเช่น คอนโซลล็อกโปร

04:51.083 --> 04:51.083
ได้รับข้อมูล.

04:52.150 --> 04:56.010
นี่คือวิธีที่เราสามารถแปลงอาร์เรย์หรือวัตถุวานิลลา

04:56.010 --> 05:00.070
JavaScript ที่ไม่มีชื่อเดียวให้เป็นอินสแตนซ์ของฟังก์ชันคอนสตรัคเตอร์ได้ด้วยตนเอง

05:00.070 --> 05:05.000
และด้วยเหตุนี้เราจะได้รับผลลัพธ์นี้

05:05.000 --> 05:07.220
การทำเช่นนี้ด้วยตนเองเป็นเรื่องยุ่งยาก

05:07.220 --> 05:09.590
มันเป็นขั้นตอนเพิ่มเติมมากมายที่นี่

05:09.590 --> 05:12.710
แน่นอนว่านี่เป็นเพียงการแปลงง่ายๆ

05:12.710 --> 05:16.690
นั่นคือสิ่งที่แพ็คเกจหม้อแปลงคลาสสามารถช่วยเราได้

05:16.690 --> 05:19.330
มันทำให้ง่ายมาก

05:19.330 --> 05:22.390
ที่นั่น เรายังกำหนดคลาสในสคริปต์ประเภทในกรณีของเราที่นี่

05:22.390 --> 05:25.010
จากนั้นเราอาจได้รับข้อมูลบางอย่าง

05:25.010 --> 05:29.340
สมมติว่ามาจากเซิร์ฟเวอร์ จากนั้นเราสามารถเรียกวิธีอำนวยความสะดวกง่ายๆ

05:29.340 --> 05:36.893
และมันจะแปลงข้อมูลของเราเป็นแบบจำลองที่เหมาะสมโดยอัตโนมัติ

05:38.100 --> 05:40.030
ก่อนอื่นมารัน nmp install

05:40.030 --> 05:44.840
class transformer--save แบบนี้ และเมื่อเสร็จแล้วให้รัน

05:45.730 --> 05:47.820
npm install reflect-metadata--save

05:47.820 --> 05:54.470
A package แพ็คเกจนี้ในตอนท้ายขึ้นอยู่กับ

05:54.470 --> 05:57.460
ดังนั้น เรามานำเข้าสิ่งนี้ด้วย และเนื่องจากมันแนะนำเราที่นี่ในคำแนะนำการตั้งค่าที่นี่ด้วย

05:57.460 --> 06:11.410
ให้นำเข้าข้อมูลเมตาสะท้อนในไฟล์รายการเส้นทางของคุณ ในกรณีของฉันที่นี่ในแอป

06:11.410 --> 06:11.410
ts

06:11.410 --> 06:14.970
ฉันนำเข้าไลบรารีของบุคคลที่สามที่เราเพิ่งติดตั้งเป็นการอ้างอิงของไลบรารีของเรา

06:14.970 --> 06:18.610
ตอนนี้คำว่าไม่มีขั้นตอน js ดังนั้นเราจึงสามารถข้ามขั้นตอนนี้ได้

06:18.610 --> 06:30.090
ในเบราว์เซอร์เรายังคงต้องติดตั้งแพ็คเกจเดียวกันและการเพิ่มการนำเข้านี้ที่นี่ก็ใช้ได้เพราะเราใช้เว็บแพ็กและตอนนี้เราก็พร้อมแล้ว

06:30.090 --> 06:35.090
และตอนนี้เราสามารถนำเข้าบางอย่างจากคลาสทรานสฟอร์มเมอร์แล้วสิ่งนั้นก็คือเมธอด

06:36.290 --> 06:40.210
'ธรรมดาถึงคลาส'

06:40.210 --> 06:42.630
แพ็คเกจนี้ยังมีอีกสองสามวิธี

06:42.630 --> 06:45.200
คุณสามารถเรียนรู้เพิ่มเติมเกี่ยวกับพวกเขาได้ที่นี่ในเอกสารอย่างเป็นทางการ

06:45.200 --> 06:49.060
แต่ 'ธรรมดาในชั้นเรียน' เป็นวิธีการหลัก

06:49.060 --> 06:54.060
คุณสามารถใช้ที่นี่เพื่อตั้งค่าผลิตภัณฑ์ที่โหลดของคุณ

06:55.150 --> 06:58.230
แทนที่จะทำด้วยตนเองที่นี่เหมือนที่เราทำก่อนหน้านี้ เราสามารถตั้งค่าผลิตภัณฑ์ที่โหลดเท่ากับธรรมดาไปยังคลาส

06:58.230 --> 07:03.760
และตอนนี้ส่งอาร์กิวเมนต์สองรายการที่นี่

07:03.760 --> 07:08.070
อาร์กิวเมนต์แรกคือคลาสที่เราต้องการแปลงเป็น

07:08.070 --> 07:10.190
ในกรณีของฉันที่นี่ ผลิตภัณฑ์

07:10.190 --> 07:15.560
และฉันไม่ได้ยกตัวอย่างหรือเรียกมันว่าฉันแค่ชี้ไปที่ชั้นเรียนนั้น

07:15.560 --> 07:19.460
อาร์กิวเมนต์ที่สองคือข้อมูลที่เราต้องการแปลง

07:19.460 --> 07:23.520
ในกรณีของฉันนี่คือผลิตภัณฑ์

07:23.520 --> 07:34.090
และตอนนี้สิ่งที่แพ็คเกจนี้จะทำคือมันจะผ่านอาร์เรย์นี้แปลงทุกออบเจ็กต์วานิลลาจาวาสคริปต์ธรรมดาที่นี่เป็นอินสแตนซ์ของคลาสนี้

07:34.090 --> 07:40.330
ดังนั้นหากเราบันทึกสิ่งนี้และเรียกใช้ npm start อีกครั้ง เว็บเพจที่เริ่มต้นเซิร์ฟเวอร์จะบู๊ตอีกครั้ง

07:40.330 --> 07:43.270
และควรสร้างโปรเจ็กต์นี้โดยไม่มีข้อผิดพลาด

07:43.270 --> 07:46.540
ถ้าฉันโหลดหน้านี้ซ้ำ ฉันจะได้รับผลลัพธ์เหมือนเดิม

07:46.540 --> 07:51.870
แต่แน่นอนว่ามีโค้ดน้อยลงจากฝั่งของเรา เพราะเรากำลังใช้แพ็คเกจนี้อยู่

07:51.870 --> 08:04.280
และที่น่าทึ่งเกี่ยวกับแพ็คเกจนี้คือมันใช้งานได้ดีที่นี่เพราะมันสร้างขึ้นจากสคริปต์ประเภทและใช้สคริปต์ประเภทและใช้ข้อเท็จจริงที่ว่าเรามีคลาสที่นั่นซึ่งเราสามารถชี้ได้

08:04.280 --> 08:08.730
แต่ตามจริงแล้วแพ็คเกจนี้ทำงานได้ดีกับสคริปต์ประเภท

08:08.730 --> 08:12.600
แต่ไม่ได้ใช้คุณสมบัติเฉพาะของสคริปต์ประเภท

08:12.600 --> 08:16.630
ตัวอย่างคลาสยังมีอยู่ในวานิลลา JavaScript

08:16.630 --> 08:20.170
แม้ว่าสิ่งนี้จะได้รับการพัฒนาสำหรับสคริปต์ประเภทเป็นหลัก

08:20.170 --> 08:23.610
แต่ก็ใช้งานได้จริงในวานิลลา JavaScript

08:23.610 --> 08:26.633
นั่นจะไม่เป็นความจริงสำหรับแพ็คเกจถัดไป
