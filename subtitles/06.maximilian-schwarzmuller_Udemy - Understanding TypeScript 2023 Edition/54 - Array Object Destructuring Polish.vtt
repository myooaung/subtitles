WEBVTT

00:02.100 --> 00:04.870
Instruktor: Pozostańmy przy tablicach i obiektach.

00:04.870 --> 00:06.750
Inną ważną składnią, którą zobaczysz

00:06.750 --> 00:09.160
dużo w nowoczesnych projektach JavaScript,

00:09.160 --> 00:10.440
a także Typescript, jest

00:10.440 --> 00:13.133
destrukcja tablic i obiektów.

00:14.180 --> 00:15.013
Jak to działa?

00:15.013 --> 00:17.220
Cóż, zacznijmy od naszej tablicy, którą otrzymaliśmy,

00:17.220 --> 00:20.220
tablicy hobbies, która otrzymała dwa hobby.

00:20.220 --> 00:22.200
Powiedzmy, że chcesz wyodrębnić

00:22.200 --> 00:26.340
te dwa hobby i przechowywać je w zmiennych lub stałych.

00:26.340 --> 00:28.891
Oczywiście możemy to zrobić z hobby

00:28.891 --> 00:32.340
one equal hobbies dla indeksu zero, który jest

00:32.340 --> 00:34.820
pierwszym elementem.

00:34.820 --> 00:38.720
I to samo może z hobby drugim dla hobby przy indeksie pierwszym.

00:38.720 --> 00:40.500
Spowoduje to wyciągnięcie tych

00:40.500 --> 00:43.330
dwóch elementów i przechowywanie ich w stałych.

00:43.330 --> 00:44.720
Zajęło nam to dwie linie kodu,

00:44.720 --> 00:46.710
a im więcej elementów chcemy pobrać, tym

00:46.710 --> 00:48.493
więcej linii kodu nam to zajmie.

00:49.340 --> 00:51.690
Destrukcja tablicowa pozwala nam ją skrócić.

00:51.690 --> 00:53.090
Z destrukcją tablicową, która

00:53.090 --> 00:56.250
działa również z let przy okazji nie tylko z const, dodajesz

00:56.250 --> 00:59.760
nawiasy kwadratowe po lewej stronie znaku równości, co jest nietypowym

00:59.760 --> 01:01.400
miejscem.

01:01.400 --> 01:02.900
Nie widziałem tego wcześniej.

01:02.900 --> 01:04.780
A po prawej stronie masz tablicę, którą

01:04.780 --> 01:06.480
chcesz destrukturyzować.

01:06.480 --> 01:08.430
Teraz destructure naprawdę oznacza,

01:08.430 --> 01:10.470
że wyciągasz elementy z tablicy.

01:10.470 --> 01:13.570
A tutaj po lewej stronie między tymi nawiasami kwadratowymi,

01:13.570 --> 01:15.040
przechowujesz je w stałych,

01:15.040 --> 01:17.250
lub jeśli używasz let, w zmiennych.

01:17.250 --> 01:21.170
Więc tutaj moglibyśmy wtedy mieć hobby pierwsze i hobby drugie.

01:21.170 --> 01:23.000
A to, co robi ta składnia, to przechodzi

01:23.000 --> 01:25.640
przez tablicę hobby, bierze pierwszy element

01:25.640 --> 01:26.920
i przechowuje go w stałej

01:26.920 --> 01:29.050
o tej nazwie, bierze drugi element,

01:29.050 --> 01:30.290
przechowuje go w stałej

01:30.290 --> 01:32.320
o tej nazwie.

01:32.320 --> 01:35.490
Możesz nawet dodać tutaj parametry odpoczynku

01:35.490 --> 01:38.720
i mieć pozostałe hobby tutaj, w przypadku gdy tablica

01:38.720 --> 01:42.130
hobby miała więcej elementów niż tylko dwa.

01:42.130 --> 01:46.260
Następnie wszystkie pozostałe elementy, których nie wyciągnąłeś do hobby

01:46.260 --> 01:48.070
pierwszego lub hobby drugiego, zostaną

01:48.070 --> 01:51.290
zapisane w nowej tablicy o nazwie pozostałe hobby.

01:51.290 --> 01:54.090
Zostaną więc one połączone w nową tablicę.

01:54.090 --> 01:57.940
Przy okazji destrukturyzacja nie zmienia oryginalnej tablicy.

01:57.940 --> 02:02.940
Jeśli więc pocieszamy. zaloguj hobbies, hobby jeden, i hobby dwa tutaj,

02:04.260 --> 02:06.840
zobaczysz, że hobbies to wciąż stara tablica.

02:06.840 --> 02:08.840
Nie jest pusta ani nic takiego.

02:08.840 --> 02:11.780
Tak więc wartości, które wyciągnęliśmy w cudzysłowie,

02:11.780 --> 02:14.870
są naprawdę tylko kopiowane do nowych stałych lub zmiennych,

02:14.870 --> 02:17.720
a nie naprawdę usuwane z tablicy.

02:17.720 --> 02:18.980
Teraz to jest destrukturyzacja tablicy.

02:18.980 --> 02:20.600
To samo mamy w przypadku obiektów.

02:20.600 --> 02:21.690
Mamy tu naszą osobę.

02:21.690 --> 02:23.440
Teraz powiedzmy, że chcemy przechowywać

02:23.440 --> 02:26.630
imię i wiek w samodzielnych stałych, czyli zmiennych.

02:26.630 --> 02:28.480
Podobnie jak destrukcja tablicowa,

02:28.480 --> 02:31.840
destrukcja obiektowa działa zarówno z const jak i let.

02:31.840 --> 02:33.010
Tutaj pójdę z const.

02:33.010 --> 02:34.930
A teraz możemy użyć nawiasów klamrowych

02:34.930 --> 02:37.090
po lewej stronie znaku równości.

02:37.090 --> 02:38.883
Chociaż nowa składnia, jak sądzę.

02:39.920 --> 02:43.750
I mieć nasz obiekt, lub zmienną wskazującą na obiekt po prawej

02:43.750 --> 02:44.890
stronie.

02:44.890 --> 02:46.110
Teraz przy okazji zwróć uwagę,

02:46.110 --> 02:48.770
że to nie jest typ obiektu, który tutaj przypisuję.

02:48.770 --> 02:51.200
Nie mam tu dwukropka.

02:51.200 --> 02:54.080
To naprawdę tylko kręcone nawiasy klamrowe, takie

02:54.080 --> 02:58.210
jak po lewej stronie, bez dwukropka po jakiejś stałej nazwie.

02:58.210 --> 03:01.000
Więc nie przypisuję typu wartości, która mogłaby

03:01.000 --> 03:02.720
być przechowywana stała.

03:02.720 --> 03:05.470
Naprawdę używam tylko specjalnej składni.

03:05.470 --> 03:08.450
Ponieważ tutaj teraz również możemy odwoływać

03:08.450 --> 03:11.340
się do nazw właściwości, które mamy w obiekcie,

03:11.340 --> 03:13.920
na przykład nazwisko i wiek, aby wyciągnąć

03:13.920 --> 03:18.030
wartości dla tych kluczy z osoby i przechowywać je w stałych

03:18.030 --> 03:21.283
o tej samej nazwie.

03:23.290 --> 03:24.390
Teraz tutaj dostaję

03:24.390 --> 03:27.820
błędy, ponieważ na samej górze mam już zmienną age.

03:27.820 --> 03:30.890
A nazwa okazuje się być globalnie dostępną zmienną,

03:30.890 --> 03:32.173
która i tak istnieje.

03:33.240 --> 03:34.940
Więc tam, obejściem byłoby

03:34.940 --> 03:38.313
naprawdę po prostu użycie innej nazwy klucza tutaj,

03:40.240 --> 03:41.920
firstName, na przykład.

03:41.920 --> 03:45.020
I teraz możemy wyciągnąć wartość według tego klucza tutaj.

03:45.020 --> 03:46.900
Tak więc w ten sposób działa destrukcja obiektów.

03:46.900 --> 03:50.110
Ważną rzeczą tutaj jest dla destrukcji tablicowej, elementy

03:50.110 --> 03:52.260
są wyciągane w kolejności, ponieważ

03:52.260 --> 03:55.110
tablica jest uporządkowaną listą.

03:55.110 --> 03:58.110
W obiektach kolejność nie zawsze jest gwarantowana, dlatego

03:58.110 --> 04:00.720
nie wyciągamy elementów według pozycji, ale według

04:00.720 --> 04:02.070
nazwy klucza.

04:02.070 --> 04:04.790
Tak więc wartości lub nazwy, które określasz tutaj

04:04.790 --> 04:05.930
między nawiasami klamrowymi,

04:05.930 --> 04:07.630
nie są dowolne.

04:07.630 --> 04:09.700
Nie można tu wymyślać nazwisk.

04:09.700 --> 04:13.860
Muszą to być nazwy właściwości, które znajdziesz w obiekcie, aby wartości

04:13.860 --> 04:16.010
dla tych kluczy można było wyciągnąć

04:16.010 --> 04:18.160
z obiektu A następnie są one przechowywane

04:18.160 --> 04:21.880
w stałych lub zmiennych o tej samej nazwie.

04:21.880 --> 04:24.120
Jeśli chciałbyś zastąpić tę nazwę, możesz to

04:24.120 --> 04:25.970
zrobić za pomocą dwukropka tutaj.

04:25.970 --> 04:28.050
Ponownie, nie chodzi tu o przypisanie typu.

04:28.050 --> 04:29.680
Po prostu ustawia nową nazwę.

04:29.680 --> 04:31.970
Więc to wszystko jest składnia JavaScript,

04:31.970 --> 04:33.820
nie ma nic wspólnego z Typescript.

04:33.820 --> 04:35.370
Więc tutaj moglibyśmy

04:35.370 --> 04:38.750
przechowywać to na przykład w stałej userName.

04:38.750 --> 04:39.840
I dlatego potem

04:39.840 --> 04:44.040
możemy się pocieszać. rejestruje userName i wiek, ale nie

04:44.040 --> 04:45.290
firstName, ponieważ

04:45.290 --> 04:47.870
zasadniczo nadpisał firstName, aby uzyskać

04:47.870 --> 04:50.900
nazwę userName w stałej, którą tworzymy, gdy wyciągamy

04:50.900 --> 04:52.790
wartości tutaj.

04:52.790 --> 04:55.880
Wiek nie jest nadpisywany, więc możemy go tak używać.

04:55.880 --> 04:58.183
Ponownie, nie chodzi tu o zadanie typu.

04:58.183 --> 05:00.210
To jest składnia JavaScript,

05:00.210 --> 05:03.680
gdzie alias zmieniamy nazwę właściwości, którą

05:03.680 --> 05:05.500
wyciągamy z osoby.

05:05.500 --> 05:07.430
Również, tak jak wcześniej z tablicą,

05:07.430 --> 05:09.840
sam obiekt osoby nie uległ zmianie.

05:09.840 --> 05:13.380
Tak naprawdę po prostu kopiujemy te wartości z obiektu.

05:13.380 --> 05:15.643
I dlatego otrzymujemy to wyjście tutaj.
