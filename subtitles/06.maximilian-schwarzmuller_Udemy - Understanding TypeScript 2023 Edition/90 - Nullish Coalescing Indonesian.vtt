WEBVTT

00:02.300 --> 00:04.800
Instruktur: Sekarang secara longgar terkait dengan optional

00:04.800 --> 00:06.930
chaining, kita punya fitur bagus lainnya di TypeScript,

00:06.930 --> 00:09.550
yang membantu kita menangani data nullish.

00:09.550 --> 00:12.820
Dan fitur itu disebut penggabungan nullish.

00:12.820 --> 00:15.900
Sekarang bayangkan Anda memiliki beberapa data, beberapa

00:15.900 --> 00:17.530
input, di mana Anda tidak tahu

00:17.530 --> 00:19.830
dengan pasti apakah itu null atau undefined

00:19.830 --> 00:23.320
atau apakah itu benar-benar bagian data yang valid.

00:23.320 --> 00:28.180
Misalnya, userInput bisa saja null, katakanlah.

00:28.180 --> 00:31.040
Sekarang, sekali lagi, di sini, kita meng-kode keras ini ke dalam

00:31.040 --> 00:33.580
TypeScript, oleh karena itu TypeScript tahu bahwa ini

00:33.580 --> 00:36.500
adalah null, tetapi jika Anda mengambil ini melalui beberapa

00:36.500 --> 00:38.650
API DOM, di mana Anda tidak mengetahuinya secara

00:38.650 --> 00:41.320
pasti, atau jika Anda mendapatkan ini dari back-end, maka

00:41.320 --> 00:42.970
Anda mungkin tidak tahu sebelumnya

00:42.970 --> 00:46.510
dan TypeScript mungkin tidak tahu apakah ini null atau tidak.

00:46.510 --> 00:50.650
Jika Anda kemudian ingin menyimpan ini di beberapa konstanta atau variabel

00:50.650 --> 00:52.803
lain seperti storedData, Anda mungkin

00:54.090 --> 00:56.150
ingin memastikan bahwa jika null,

00:56.150 --> 00:58.760
Anda menyimpan nilai fallback.

00:58.760 --> 01:03.560
Sekarang Anda dapat melakukannya dengan operator OR logis, di mana Anda menyimpan

01:03.560 --> 01:05.330
default, di mana Anda mendapatkan

01:05.330 --> 01:06.740
nilai kedua dari yang pertama

01:06.740 --> 01:08.940
tidak terdefinisi atau null, jika

01:08.940 --> 01:11.550
salah tepatnya.

01:11.550 --> 01:13.690
Masalah dengan pendekatan ini adalah,

01:13.690 --> 01:17.110
jika ini sebenarnya bukan null atau tidak terdefinisi, tetapi

01:17.110 --> 01:18.960
katakanlah string kosong, itu

01:18.960 --> 01:21.740
diperlakukan sebagai nilai salah, dan oleh karena

01:21.740 --> 01:25.600
itu default, nilai fallback akan mulai berlaku.

01:25.600 --> 01:28.850
Jadi jika saya menghibur. log storedData di sini, Anda

01:28.850 --> 01:31.700
akan melihat bahwa ini mencetak DEFAULT.

01:31.700 --> 01:33.430
Sekarang, mungkin itu yang Anda inginkan,

01:33.430 --> 01:36.540
dan dalam hal itu, ini adalah solusi yang sangat bagus.

01:36.540 --> 01:38.800
Tetapi jika Anda ingin menyimpan input pengguna,

01:38.800 --> 01:40.730
atau data apa pun yang Anda kerjakan, kecuali

01:40.730 --> 01:44.110
jika benar-benar null atau undefined, maka Anda memerlukan pendekatan

01:44.110 --> 01:45.530
lain karena di sini kita akan memperlakukan

01:45.530 --> 01:48.970
ini sebagai false dan menggunakan fallback.

01:48.970 --> 01:51.720
Tetapi mungkin Anda ingin menjaga input kosong hanya null

01:51.720 --> 01:54.370
atau undefined harus ditangani secara berbeda.

01:54.370 --> 01:56.390
Untuk itu, TypeScript juga memiliki

01:56.390 --> 01:58.780
operator, operator tanda tanya ganda,

01:58.780 --> 02:02.210
ini disebut operator penggabungan nullish.

02:02.210 --> 02:05.250
Dan itu berarti jika ini null atau undefined, dan benar-benar

02:05.250 --> 02:06.730
hanya itu, bukan string kosong,

02:06.730 --> 02:09.180
bukan nol, benar-benar hanya null atau undefined,

02:09.180 --> 02:13.370
maka kita akan menggunakan fallback.

02:13.370 --> 02:16.700
Jika tidak null atau undefined, kita akan menggunakan nilai itu.

02:16.700 --> 02:19.220
Jadi dalam skenario ini di sini, ini mengkompilasi, dan

02:19.220 --> 02:21.400
Anda lihat, kami menyimpan string kosong, oleh karena

02:21.400 --> 02:23.060
itu, saya tidak mencetak apa pun di sini,

02:23.060 --> 02:24.720
ini adalah string kosong.

02:24.720 --> 02:26.060
Jika ini di sisi lain, katakanlah,

02:26.060 --> 02:28.550
tidak terdefinisi di sini, dan saya menyimpan ini,

02:28.550 --> 02:30.400
Anda lihat, sekarang tertulis DEFAULT,

02:30.400 --> 02:32.980
karena berkat operator tanda tanya ganda ini, kita kembali

02:32.980 --> 02:35.500
ke ini, yah, fallback dan oleh karena itu di sini kita

02:35.500 --> 02:38.320
mendapat fitur lain yang sangat berguna yang dapat membantu

02:38.320 --> 02:40.580
Anda menangani nilai nullish atau undefined

02:40.580 --> 02:42.773
dengan anggun.
