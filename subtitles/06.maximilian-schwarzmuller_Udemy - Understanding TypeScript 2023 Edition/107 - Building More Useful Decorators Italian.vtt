WEBVTT

00:02.480 --> 00:06.780
Uomo: Ora, con la conoscenza delle funzioni di fabbrica o dei decoratori

00:06.780 --> 00:10.523
di fabbrica, possiamo fare cose piuttosto interessanti.

00:11.570 --> 00:16.240
Potremmo scambiare una nuova fabbrica di decoratori con un modello,

00:16.240 --> 00:17.693
ad esempio.

00:19.400 --> 00:21.590
E qui mi aspetto di ottenere un modello,

00:21.590 --> 00:23.780
che dovrebbe essere una stringa.

00:23.780 --> 00:28.780
E un hookId, che dovrebbe essere una stringa.

00:28.870 --> 00:32.050
Poi, qui, restituisco la mia funzione anonima, che è il decoratore

00:32.050 --> 00:34.800
vero e proprio, come avete imparato.

00:34.800 --> 00:37.440
Perché, ancora una volta, ho una fabbrica di decoratori.

00:37.440 --> 00:40.570
E lì voglio rendere un modello, che dovrebbe

00:40.570 --> 00:42.530
essere un codice HTML, in

00:42.530 --> 00:46.590
un punto della dom, dove trovo questo hookId.

00:46.590 --> 00:49.160
Ora possiamo passare all'indice. html e aggiungere un posto simile,

00:49.160 --> 00:51.250
in modo da poter vedere che funziona.

00:51.250 --> 00:54.483
Possiamo aggiungere un div qui, con un id di app, forse.

00:55.430 --> 00:59.560
E poi in app. ts, invece di logger, aggiungo

00:59.560 --> 01:01.357
WithTemplate.

01:02.570 --> 01:05.130
Per ora passiamo una stringa vuota come primo parametro e un'applicazione

01:05.130 --> 01:06.810
come secondo parametro.

01:06.810 --> 01:09.313
Quindi, questo ID che ho assegnato al div qui.

01:10.170 --> 01:12.400
E ora all'interno di questa funzione interna c'è il nostro

01:12.400 --> 01:13.830
decoratore vero e proprio.

01:13.830 --> 01:16.540
All'interno di questa funzione decoratore,

01:16.540 --> 01:19.500
voglio raggiungere l'elemento.

01:19.500 --> 01:24.500
All'elemento di aggancio con il documento. getElementById.

01:25.662 --> 01:29.390
Per l'hookId che riceviamo qui come argomento.

01:29.390 --> 01:33.480
E se HookEl è una cosa che esiste, allora voglio accedere

01:34.330 --> 01:37.960
al suo innerHTML e impostarlo uguale a template,

01:37.960 --> 01:39.920
diciamo.

01:39.920 --> 01:41.440
Naturalmente si tratta di una configurazione

01:41.440 --> 01:43.640
molto semplice, ma che dovrebbe funzionare.

01:43.640 --> 01:45.460
Ora, non mi interessa il costruttore.

01:45.460 --> 01:48.110
E per dire al dattiloscritto che non mi interessa, posso aggiungere

01:48.110 --> 01:50.370
un trattino basso come nome, che in pratica segnala

01:50.370 --> 01:52.007
al dattiloscritto: "Sì, so che ricevo

01:52.007 --> 01:54.580
questo argomento, ma non mi serve".

01:54.580 --> 01:56.170
Devo però specificarlo.

01:56.170 --> 01:58.920
Quindi, con questa sottolineatura, vi dico che ne sono

01:58.920 --> 02:00.850
a conoscenza, ma che non la userò. Perché, per ora, tutto ciò che voglio

02:00.850 --> 02:02.300
fare è rendere quest'anno.

02:02.300 --> 02:04.033
Ora, quando aggiungiamo WithTemplate,

02:05.580 --> 02:07.750
possiamo aggiungere un tag h1, My Person

02:07.750 --> 02:10.400
Object, come questo.

02:10.400 --> 02:14.570
Inoltre, chiudetelo.

02:14.570 --> 02:15.653
E se ora lo salviamo, si compila senza errori.

02:19.130 --> 02:22.380
E in effetti, qui si vede che questo è stato reso sullo schermo.

02:22.380 --> 02:26.350
E questo spero vi mostri il potere

02:26.350 --> 02:29.720
che avete con i decoratori.

02:29.720 --> 02:31.720
Si possono costruire decoratori molto avanzati,

02:31.720 --> 02:34.780
come questo, che improvvisamente fa qualche magia dietro le quinte.

02:34.780 --> 02:38.500
Ed è questo che intendo con metaprogrammazione.

02:38.500 --> 02:41.260
Qui aggiungiamo un po' di logica, che potremmo esporre

02:41.260 --> 02:43.930
se si trattasse di una libreria di terze parti da

02:43.930 --> 02:46.190
condividere con altri utenti.

02:46.190 --> 02:47.890
Potremmo esporlo come parte della

02:47.890 --> 02:50.350
libreria e chiunque utilizzi la nostra libreria

02:50.350 --> 02:52.630
può importare questa funzione decoratrice

02:52.630 --> 02:54.910
e aggiungerla a una classe per rendere magicamente

02:54.910 --> 02:57.408
un contenuto all'improvviso.

02:57.408 --> 03:00.500
E naturalmente, non siete nemmeno limitati a farlo.

03:00.500 --> 03:02.980
Se si vuole restituire il nome che fa parte

03:02.980 --> 03:05.340
della classe quando viene istanziata,

03:05.340 --> 03:07.850
si può fare anche questo.

03:07.850 --> 03:09.570
Qui otteniamo il nostro costruttore: Function, dopotutto.

03:09.570 --> 03:12.427
Ora possiamo creare una nuova persona qui, chiamando

03:14.190 --> 03:16.010
il nostro costruttore, perché

03:16.010 --> 03:18.660
questo è il nostro costruttore: Function qui,

03:18.660 --> 03:20.380
dopo tutto.

03:20.380 --> 03:23.820
Convertiamolo in any, in modo che il dattiloscritto lo consenta

03:23.820 --> 03:26.570
e non pensi che sia una funzione normale.

03:26.570 --> 03:29.240
E poi potremmo andare al nostro elemento

03:29.240 --> 03:31.880
hook e cercare un tag h1, che ovviamente

03:31.880 --> 03:35.160
nella pratica non sarà sempre presente.

03:35.160 --> 03:36.070
Ma a scopo dimostrativo, presumo

03:36.070 --> 03:37.330
che ne avremo sempre uno qui.

03:37.330 --> 03:39.820
Ops, e dovrei sempre chiudere il

03:39.820 --> 03:42.330
tag h1 laggiù ora che lo vedo.

03:42.330 --> 03:43.850
E poi qui, con un punto esclamativo,

03:43.850 --> 03:46.750
sempre supponendo di trovare sempre un elemento h1,

03:46.750 --> 03:49.900
possiamo impostare un textContent pari a p. nome.

03:49.900 --> 03:53.660
Se lo faccio e lo salvo,

03:53.660 --> 03:56.010
ora viene emesso il nome, che

03:56.010 --> 03:59.400
fa parte dell'oggetto qui nel modello.

03:59.400 --> 04:01.540
È una cosa che si può fare e, naturalmente,

04:01.540 --> 04:03.420
si possono scrivere decoratori molto

04:03.420 --> 04:06.010
più elaborati di quello che sto facendo qui.

04:06.010 --> 04:07.840
Si consideri Angular, un framework molto

04:07.840 --> 04:09.550
popolare che utilizza il typescript.

04:09.550 --> 04:12.270
Utilizzano decoratori, come questo decoratore

04:12.270 --> 04:15.740
di componenti, per consentire di passare un oggetto

04:15.740 --> 04:18.420
in cui si specificano cose come il modello

04:18.420 --> 04:21.020
per discomponent.

04:21.020 --> 04:21.930
E il selettore nella

04:21.930 --> 04:23.950
dom in cui questo template deve essere reso.

04:23.950 --> 04:25.760
Questo è relativamente vicino a quello che abbiamo definito qui.

04:25.760 --> 04:28.170
Un modello e poi un luogo in cui deve essere reso.

04:28.170 --> 04:31.230
È inutile dire che i decoratori di Angular

04:31.230 --> 04:33.760
sono molto più avanzati ed elaborati

04:33.760 --> 04:36.550
del nostro decoratore di base.

04:36.550 --> 04:38.740
Tuttavia, l'idea di fondo è la stessa.

04:38.740 --> 04:41.660
Angular mette a disposizione i decoratori, in

04:41.660 --> 04:43.900
modo da poter specificare del codice

04:43.900 --> 04:46.700
HTML, che può essere collegato alla classe del

04:46.700 --> 04:49.470
componente e che sarà reso alla dom quando questo

04:49.470 --> 04:51.760
componente viene reso.

04:51.760 --> 04:53.830
Se non sapete come funziona Angular,

04:53.830 --> 04:55.850
non è un problema.

04:55.850 --> 04:57.060
Bisogna solo capire che funziona

04:57.060 --> 04:58.700
con le classi e i decoratori e poi fa sostanzialmente

04:58.700 --> 05:01.300
quello che abbiamo fatto qui.

05:01.300 --> 05:03.600
Questa è un'altra cosa che si può fare con i decoratori

05:03.600 --> 05:06.400
o, come in questo caso, con le fabbriche di decoratori.

05:06.400 --> 05:09.220
Perché questo ci permette di inserire quel

05:09.220 --> 05:12.210
conflitto in più di cui abbiamo bisogno.

05:12.210 --> 05:13.610
Ed è anche quello che intendevo con metaprogrammazione.

05:13.610 --> 05:16.590
Stiamo creando cose, stiamo creando funzioni di decoro,

05:16.590 --> 05:21.130
che si potrebbe dire abbiano un certo impatto sull'utente finale.

05:21.130 --> 05:24.840
Nel doppio rendering NP o in qualcosa sullo schermo.

05:24.840 --> 05:27.510
Ma lo facciamo con uno strumento che esponiamo

05:27.510 --> 05:29.090
agli altri sviluppatori.

05:29.090 --> 05:31.370
Perché questo decoratore è uno strumento che

05:31.370 --> 05:33.970
gli altri sviluppatori devono usare, aggiungendolo

05:33.970 --> 05:36.000
a una classe in questo esempio.

05:36.000 --> 05:38.580
Altrimenti, non servirebbe a nulla.

05:38.580 --> 05:40.300
Perciò forniamo agli sviluppatori

05:40.300 --> 05:43.490
utilità aggiuntive, che gli altri sviluppatori possono

05:43.490 --> 05:46.590
usare, per esempio, per rendere comodamente qualcosa

05:46.590 --> 05:49.050
sullo schermo per una classe che dà.

05:49.050 --> 05:50.590
È la stessa cosa che fa Angular in questo

05:50.590 --> 05:52.940
caso, in modo più avanzato, ed è qualcosa per cui i classificatori

05:52.940 --> 05:54.220
sono perfetti.
