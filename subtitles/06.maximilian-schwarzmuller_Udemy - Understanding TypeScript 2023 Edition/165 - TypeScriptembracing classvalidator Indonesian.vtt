WEBVTT

00:02.130 --> 00:03.630
Narator: Jadi kita telah melihat

00:03.630 --> 00:06.210
Lodash, yang merupakan paket JavaScript vanila di mana

00:06.210 --> 00:08.360
kita perlu menginstal beberapa terjemahan.

00:08.360 --> 00:10.310
Dan kita telah melihat class-transformer,

00:10.310 --> 00:13.530
yang juga bekerja di JavaScript vanilla, tetapi juga

00:13.530 --> 00:17.328
bekerja dengan sangat baik di TypeScript.

00:17.328 --> 00:20.330
Sekarang mari kita lihat class-validator.

00:20.330 --> 00:24.540
Ini sekarang adalah paket yang benar-benar memanfaatkan TypeScript.

00:24.540 --> 00:28.300
Ini dibangun di atas konsep dekorator TypeScript, dan

00:28.300 --> 00:32.340
memberi kita cara baru untuk bekerja dengan mereka, atau

00:32.340 --> 00:34.330
setidaknya hampir baru.

00:34.330 --> 00:38.230
Jika Anda mengikuti modul dekorator saya dalam kursus ini, Anda akan

00:38.230 --> 00:41.200
benar-benar melihat sesuatu di sini dalam kuliah

00:41.200 --> 00:44.150
ini, yang kami bangun sendiri di sana juga.

00:44.150 --> 00:47.100
Namun sekarang, dengan perpustakaan pihak ketiga ini, kita tidak

00:47.100 --> 00:49.330
perlu menemukan kembali roda dari awal, kita tidak

00:49.330 --> 00:51.193
perlu membangunnya sendiri.

00:51.193 --> 00:53.320
Dan pustaka ini juga bisa dibilang,

00:53.320 --> 00:55.710
sedikit lebih rumit daripada solusi

00:55.710 --> 00:57.830
kita di modul dekorator.

00:57.830 --> 01:00.026
Saya berbicara tentang validasi.

01:00.026 --> 01:02.870
Ini adalah paket yang memungkinkan kita untuk menambahkan

01:02.870 --> 01:06.390
aturan validasi dengan bantuan beberapa dekorator, di dalam kelas

01:06.390 --> 01:08.590
dan kemudian setiap kali kita menginstansiasi

01:08.590 --> 01:09.920
kelas seperti itu, kita benar-benar

01:09.920 --> 01:12.610
dapat memvalidasinya untuk aturan yang kita atur di

01:12.610 --> 01:15.610
sana dengan bantuan dekorator.

01:15.610 --> 01:18.960
Sekarang untuk memulai kita hanya perlu mengimpor paket ini di sini.

01:18.960 --> 01:23.130
Jadi npm install class-validator --save, dan setelah

01:23.130 --> 01:26.130
itu kita bisa langsung mulai.

01:26.130 --> 01:29.220
Jadi saya akan me-restart webpack-dev-server, dan untuk

01:29.220 --> 01:30.600
menggunakan paket ini, kita

01:30.600 --> 01:33.580
harus menambahkan beberapa dekorator ke model, jadi ke

01:33.580 --> 01:35.740
kelas-kelas di mana kita ingin memvalidasi

01:35.740 --> 01:37.490
properti tertentu.

01:37.490 --> 01:39.730
Jadi dalam kasus saya di sini di model produk,

01:39.730 --> 01:43.240
saya akan mengimpor sesuatu dari class-validator.

01:43.240 --> 01:45.110
Dan sekarang sekali lagi, jika

01:45.110 --> 01:47.360
Anda mengikuti modul dekorator dalam

01:47.360 --> 01:49.640
kursus ini, ini adalah konsep yang sudah

01:49.640 --> 01:52.870
saya bangun dari awal di sana tanpa paket ini.

01:52.870 --> 01:56.270
Tetapi tentu saja kami membangun dalam versi yang sangat naif

01:56.270 --> 01:57.840
dan dasar, dengan paket ini kami

01:57.840 --> 02:01.200
tidak perlu membangunnya sendiri dan juga lebih rumit.

02:01.200 --> 02:02.770
Sekarang dari class-validator,

02:02.770 --> 02:04.820
kita bisa mengimpor dekorator tertentu.

02:04.820 --> 02:05.893
Misalnya,

02:07.139 --> 02:08.630
IsNotEmpty,

02:08.630 --> 02:11.410
atau juga, IsNumber.

02:11.410 --> 02:13.500
Kita juga bisa mengimpor IsPositive.

02:15.940 --> 02:18.940
Sekarang kita bisa menambahkannya ke properti yang ingin kita validasi.

02:18.940 --> 02:20.900
Jadi di sini misalnya pada judul,

02:20.900 --> 02:24.220
kita bisa menambahkan IsNotEmpty sebagai dekorator seperti

02:24.220 --> 02:26.390
ini, dan ini semua adalah pabrik dekorator,

02:26.390 --> 02:29.610
jadi Anda harus selalu menjalankannya.

02:29.610 --> 02:31.318
Dan juga di

02:31.318 --> 02:37.380
sini, IsNumber dan IsPositive.

02:37.380 --> 02:38.763
Mari kita jalankan itu.

02:40.250 --> 02:41.730
Sekarang untuk menggunakan dekorator di

02:41.730 --> 02:44.730
sini, Anda juga harus pergi ke tsconfig. js, dan pastikan Anda

02:44.730 --> 02:49.550
mengaktifkan dekorator eksperimental di sana.

02:49.550 --> 02:51.593
Setelah itu, simpan ini, dan sekarang

02:52.750 --> 02:55.040
area-area di sini juga harus hilang.

02:55.040 --> 02:57.300
Kita juga perlu me-restart server dev, sehingga server

02:57.300 --> 03:00.840
itu mengambil tsconfig yang baru. konversi js.

03:00.840 --> 03:02.650
Jadi sekarang kita menambahkan aturan-aturan

03:02.650 --> 03:04.768
ini, aturan-aturan validasi di sini.

03:04.768 --> 03:07.710
Pada dasarnya kita mengatakan bahwa judul tidak boleh

03:07.710 --> 03:11.830
berupa string kosong dan angkanya harus berupa angka positif.

03:11.830 --> 03:13.980
Sekarang kita bisa membuat produk

03:13.980 --> 03:15.119
baru di sini, katakanlah

03:15.119 --> 03:16.870
di sana, newProd, di mana kita

03:16.870 --> 03:19.078
memanggil produk baru dan saya memberikan

03:19.078 --> 03:21.720
string kosong untuk judul, dan kemudian minus

03:21.720 --> 03:25.210
5. 99 untuk nomornya.

03:25.210 --> 03:26.700
Jika saya kemudian menghibur. log newProd,

03:27.576 --> 03:29.920
getInformation, dan jalankan

03:29.920 --> 03:31.730
ini, mari kita lihat

03:31.730 --> 03:34.830
di mana ia bekerja.

03:34.830 --> 03:35.683
Oke, simpan itu.

03:37.840 --> 03:40.040
Huh, ini berhasil.

03:40.040 --> 03:42.330
Nah, kita belum sepenuhnya sampai di sana.

03:42.330 --> 03:46.470
Dengan dekorator kami, kami menetapkan aturan.

03:46.470 --> 03:49.560
Tetapi, para dekorator ini sendiri tidak berbuat banyak.

03:49.560 --> 03:52.880
Sebaliknya, kita sekarang juga harus mengimpor

03:52.880 --> 03:56.190
metode validator dari class-validator.

03:56.190 --> 03:57.300
Jadi dari paket ini,

03:57.300 --> 03:59.840
kita mengimpor validate dan kita harus mengeksekusi

03:59.840 --> 04:02.260
ini pada instance konkret, dari kelas di

04:02.260 --> 04:05.750
mana kita menambahkan dekorator kita.

04:05.750 --> 04:07.300
Jadi dalam kasus ini di sini,

04:07.300 --> 04:12.020
kita dapat menjalankan validate dan mengoper newProd ke sana.

04:12.020 --> 04:14.670
Dan validate kemudian akan mengembalikan

04:14.670 --> 04:19.150
promise yang sebenarnya mungkin menghasilkan kesalahan validasi.

04:19.150 --> 04:21.440
Jadi kita bisa menambahkan di sini, jika Anda berada

04:21.440 --> 04:23.080
dalam fungsi pelonggaran, Anda juga

04:23.080 --> 04:25.680
bisa menggunakan bobot tunggal tentunya.

04:25.680 --> 04:27.920
Dan di sini kita mendapatkan kembali kesalahan

04:27.920 --> 04:30.093
yang ditemukan fungsi validasi ini.

04:30.980 --> 04:31.813
Sekarang yang

04:31.813 --> 04:34.950
penting, kita selalu berakhir di then meskipun ada error,

04:34.950 --> 04:36.560
jadi jika ada error validasi,

04:36.560 --> 04:38.420
kita tidak masuk ke catch block,

04:38.420 --> 04:41.120
kita selalu masuk ke then block.

04:41.120 --> 04:44.360
Sekarang di sini kita sekarang dapat memeriksa apakah kesalahan,

04:44.360 --> 04:45.980
yang merupakan Array, panjang

04:45.980 --> 04:48.400
titik lebih besar dari nol.

04:48.400 --> 04:51.300
Yang berarti ada kesalahan validasi.

04:51.300 --> 04:52.910
Dalam hal ini kita bisa mencatat

04:53.750 --> 04:56.700
kesalahan validasi, dan mungkin juga mengeluarkan

04:56.700 --> 04:59.200
kesalahan yang kita temukan.

04:59.200 --> 05:01.820
Jadi konsol. log error, dan sebaliknya

05:01.820 --> 05:03.700
dalam kasus saya di sini, saya akan

05:03.700 --> 05:05.290
mencatat informasinya.

05:05.290 --> 05:06.580
Sekarang tentu saja tergantung pada

05:06.580 --> 05:09.100
aplikasi yang Anda bangun apa yang ingin Anda lakukan di sini.

05:09.100 --> 05:10.860
Anda mungkin ingin menampilkan peringatan

05:10.860 --> 05:13.790
kepada pengguna dalam kasus ini di sini jika ada kesalahan.

05:13.790 --> 05:15.360
Anda mungkin ingin mengatur ulang input, apa

05:15.360 --> 05:16.520
pun yang ingin Anda lakukan.

05:16.520 --> 05:19.690
Di sini, saya hanya akan mencatat sesuatu ke konsol.

05:19.690 --> 05:22.080
Dan jika kita sekarang menyimpannya, Anda

05:22.080 --> 05:24.870
akan melihat kesalahan validasi, dan kemudian di

05:24.870 --> 05:27.830
sini sebuah array dari kesalahan yang ditemukan.

05:27.830 --> 05:31.890
Sebagai contoh kesalahan pertama adalah pada properti

05:31.890 --> 05:34.770
title, yang seharusnya tidak kosong.

05:34.770 --> 05:38.290
Dan kesalahan kedua adalah pada properti harga, bahwa

05:38.290 --> 05:41.150
harga harus berupa bilangan positif.

05:41.150 --> 05:44.950
Dan inilah betapa mudahnya Anda dapat menambahkan validasi

05:44.950 --> 05:47.960
yang cukup kuat ke proyek Anda dengan pendekatan

05:47.960 --> 05:50.170
berbasis dekorator ini.

05:50.170 --> 05:53.190
Terkait dengan apa yang kita lakukan sebelumnya dalam

05:53.190 --> 05:54.530
kursus ini, dan modul dekorator,

05:54.530 --> 05:56.062
tetapi seperti yang saya sebutkan

05:56.062 --> 05:59.890
beberapa kali, lebih rumit dengan banyak aturan bawaan, dan Anda dapat

05:59.890 --> 06:01.190
mempelajari semua itu tentu

06:01.190 --> 06:03.610
saja dalam dokumen paket ini, dan tanpa menemukan

06:03.610 --> 06:06.350
kembali roda.

06:06.350 --> 06:09.300
Jadi paket class-validator benar-benar merupakan paket

06:09.300 --> 06:10.930
yang kuat yang harus Anda ketahui

06:10.930 --> 06:14.693
jika Anda membangun proyek yang lebih besar dengan TypeScript.
