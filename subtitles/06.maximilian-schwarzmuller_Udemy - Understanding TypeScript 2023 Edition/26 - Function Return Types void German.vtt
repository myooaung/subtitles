WEBVTT

00:02.200 --> 00:04.080
Ausbilder: Zeit für eine weitere neue Datei.

00:04.080 --> 00:09.080
Ich werde die App umbenennen. ts hier, um Aliasnamen zu vereinigen. ts, und fügen Sie eine neue

00:11.100 --> 00:13.760
Anwendung hinzu. ts-Datei, in der wir wieder von

00:13.760 --> 00:16.370
vorne beginnen können, schließen Sie die andere Datei.

00:16.370 --> 00:20.660
Und jetzt möchte ich hier ein bisschen tiefer in die Funktionen eintauchen.

00:20.660 --> 00:22.640
Jetzt, natürlich, mit bereits mit Funktionen gearbeitet.

00:22.640 --> 00:24.940
Zum Beispiel hier in der Datei union aliases

00:24.940 --> 00:26.340
mit der Funktion combine.

00:26.340 --> 00:29.260
Sie haben zum Beispiel gesehen, dass Sie bei Funktionen

00:29.260 --> 00:32.520
den Parametern von Funktionen Typen zuweisen können.

00:32.520 --> 00:34.310
Nun, es hat sich herausgestellt, dass man mit Funktionen

00:34.310 --> 00:36.483
und Typen noch ein bisschen mehr machen kann.

00:37.590 --> 00:40.430
Dafür werde ich meine Add-Funktion neu erstellen,

00:40.430 --> 00:43.373
die nur Zahlen und keine Zeichenketten akzeptiert.

00:44.270 --> 00:48.340
Das macht eine einfache Sache, es gibt n eins plus n zwei zurück, also nicht

00:48.340 --> 00:49.513
zu kompliziert.

00:51.004 --> 00:53.740
Wie ich bereits erwähnt habe, können wir Parametern Typen

00:53.740 --> 00:55.180
zuweisen, das ist nicht neu.

00:55.180 --> 00:57.030
Die Funktion insgesamt hat jedoch

00:57.030 --> 01:01.050
noch einen weiteren wichtigen Typ, nämlich einen Rückgabetyp.

01:01.050 --> 01:03.990
Und hier wird der Rückgabetyp von TypeScript hergeleitet.

01:03.990 --> 01:06.490
Wir können es sehen, wenn wir den Mauszeiger über add bewegen.

01:06.490 --> 01:10.760
Hier am Ende, der Doppelpunkt nach der Parameterliste, das hier,

01:10.760 --> 01:14.190
beschreibt den Rückgabetyp der Funktion.

01:14.190 --> 01:16.800
Also der Typ des zurückgegebenen Wertes.

01:16.800 --> 01:20.020
Hier gebe ich die Addition von n eins und n zwei zurück.

01:20.020 --> 01:23.050
Und da beide Eingaben Zahlen sind, kann TypeScript daraus

01:23.050 --> 01:24.930
schließen, dass das Ergebnis eine Zahl

01:24.930 --> 01:26.770
sein wird, und da wir es zurückgeben,

01:26.770 --> 01:28.820
dass der Rückgabetyp dieser Funktionsdaten

01:28.820 --> 01:30.830
eine Zahl sein wird.

01:30.830 --> 01:33.320
Wenn Sie sie hier als Strings verketten würden,

01:33.320 --> 01:35.363
zum Beispiel mit toString, dann würde

01:36.550 --> 01:39.030
TypeScript korrekt folgern, dass wir hier

01:39.030 --> 01:41.900
einen String zurückgeben.

01:41.900 --> 01:44.350
Natürlich können wir hier immer explizit einen Rückgabetyp

01:44.350 --> 01:46.910
zuweisen, indem wir einen Doppelpunkt nach der Parameterliste

01:46.910 --> 01:48.490
und dann den Typ, den Sie zurückgeben

01:48.490 --> 01:51.263
wollen, wie z. B. Zahl, hinzufügen.

01:52.850 --> 01:54.560
Dies wäre derselbe Typ wie inferred.

01:54.560 --> 01:56.760
Wenn ich dies zum Beispiel auf string setze, würde

01:56.760 --> 02:00.020
ich hier einen Fehler erhalten, da meine Berechnung hier offensichtlich

02:00.020 --> 02:03.540
nicht mit dem beschriebenen Rückgabetyp übereinstimmt.

02:03.540 --> 02:06.480
Genau wie bei den Variablen ist es nun eine gute Idee, TypeScript

02:06.480 --> 02:10.080
seine Arbeit bezüglich der Typinferenz machen zu lassen.

02:10.080 --> 02:12.610
Und wenn Sie keinen spezifischen Grund für

02:12.610 --> 02:14.810
die explizite Festlegung des Typs haben,

02:14.810 --> 02:17.090
sollten Sie den Typ nicht festlegen und

02:17.090 --> 02:20.470
stattdessen TypeScript den Typ herleiten lassen.

02:20.470 --> 02:22.660
Bei den Rückgabetypen gibt es jedoch einen interessanten

02:22.660 --> 02:25.910
Typ, den wir bisher noch nicht gesehen haben und der für Sie ganz neu

02:25.910 --> 02:27.530
sein könnte, wenn Sie Erfahrung mit

02:27.530 --> 02:30.240
anderen Programmiersprachen haben.

02:30.240 --> 02:31.200
Denn es handelt sich um einen

02:31.200 --> 02:33.250
Typ, der in JavaScript nicht wirklich existiert.

02:33.250 --> 02:35.180
Es ist der Typ "Leere".

02:35.180 --> 02:38.160
Nehmen wir an, wir haben die Methode printResult.

02:38.160 --> 02:41.190
Dort erhalten wir ein Zahlenargument,

02:41.190 --> 02:44.120
das eine, nun ja, Zahl sein sollte.

02:44.120 --> 02:47.510
Und dort möchte ich trösten. log num.

02:47.510 --> 02:49.450
Und ich möchte trösten. es als Teil einer Zeichenkette

02:49.450 --> 02:52.150
protokollieren, wobei ich Ergebnis plus Zahl sage.

02:52.150 --> 02:53.670
Dies wird nun zu einer langen

02:53.670 --> 02:56.090
Zeichenkette verkettet und ausgegeben.

02:56.090 --> 02:57.777
Und jetzt kann ich printResult aufrufen.

02:57.777 --> 03:01.020
Und geben Sie zum Beispiel das Ergebnis meines Aufrufs

03:01.020 --> 03:05.010
der Additionsfunktion mit fünf plus, sagen wir 12, durch.

03:05.010 --> 03:07.670
Ich führe hier also eine Addition mit zwei Zahlen aus.

03:07.670 --> 03:10.160
Und das Ergebnis, also das, was add zurückgibt,

03:10.160 --> 03:13.130
wird dann als Argument an printResult übergeben.

03:13.130 --> 03:15.780
Und das sollte auf der Konsole ausgegeben werden.

03:15.780 --> 03:19.150
Wenn wir das jetzt kompilieren und uns das dann auf unserer Seite

03:19.150 --> 03:21.110
oder auf unserer Seite hier anschauen,

03:21.110 --> 03:24.280
sehen wir das Ergebnis 17, was ja auch Sinn macht.

03:24.280 --> 03:25.660
Das Interessante hier ist

03:25.660 --> 03:27.640
der Rückgabetyp von printResult.

03:27.640 --> 03:30.353
Was würden Sie vermuten, ist der Rückgabetyp hier?

03:31.240 --> 03:33.240
Vielleicht denken Sie, dass es eine Zeichenkette

03:33.240 --> 03:35.150
ist, weil ich hier eine Zeichenkette erzeuge.

03:35.150 --> 03:37.360
Aber denken Sie daran, dass wir das nicht zurückgeben werden.

03:37.360 --> 03:39.400
Wir werden hier nichts zurückgeben.

03:39.400 --> 03:42.010
Und deshalb hat diese printResult-Funktion

03:42.010 --> 03:44.990
hier einen speziellen Rückgabetyp, void.

03:44.990 --> 03:47.910
Vielleicht kennen Sie den Rückgabetyp void aus anderen

03:47.910 --> 03:49.830
Programmiersprachen.

03:49.830 --> 03:52.230
Das sieht dann ungefähr so aus.

03:52.230 --> 03:53.940
JavaScript weiß das nicht wirklich,

03:53.940 --> 03:56.740
oder hat keinen Namen für diese Situation.

03:56.740 --> 03:58.590
TypeScript hingegen schon.

03:58.590 --> 04:01.840
Diese Funktion hier hat also den Rückgabetyp void.

04:01.840 --> 04:04.065
Und natürlich müssen Sie das hier nicht angeben.

04:04.065 --> 04:06.440
Die Inferenz von TypeScript hat ihre Aufgabe erfüllt.

04:06.440 --> 04:07.630
Aber ich möchte wirklich

04:07.630 --> 04:09.610
klarstellen, dass dies den Rückgabetyp

04:09.610 --> 04:13.730
void hat, weshalb ich ihn hier zu Demozwecken hinzufüge.

04:13.730 --> 04:17.070
Ungültig bedeutet eigentlich nur, dass diese Funktion

04:17.070 --> 04:21.020
keine Rückgabeanweisung hat, sie gibt nichts zurück.

04:21.020 --> 04:24.540
Sie wird erfolgreich abgeschlossen, sie erfüllt ihre Aufgabe.

04:24.540 --> 04:28.170
Es führt seinen Code aus, es gibt keinen Fehler

04:28.170 --> 04:32.550
oder ähnliches, aber es gibt auch nichts zurück.

04:32.550 --> 04:34.990
Das ist der Rückgabetyp void.

04:34.990 --> 04:37.330
Nun technisch in JavaScript, natürlich, wenn

04:37.330 --> 04:39.490
wir Konsole würde. protokollieren Sie

04:39.490 --> 04:43.550
das Ergebnis von printResult hier und ich kompiliere das jetzt, und wir

04:43.550 --> 04:46.270
sehen, was hier auf der Seite ausgegeben wird.

04:46.270 --> 04:49.480
Wir sehen, dass dadurch undefiniert zurückgegeben wird.

04:49.480 --> 04:51.540
Technisch gesehen, und das ist wirklich

04:51.540 --> 04:56.450
interessant, erhalten wir in JavaScript, wenn wir den Rückgabewert einer Funktion

04:56.450 --> 05:00.830
verwenden, die nichts zurückgibt, den Wert undefiniert.

05:00.830 --> 05:03.730
Und wie Sie wahrscheinlich wissen, ist "undefined"

05:03.730 --> 05:05.720
in JavaScript ein echter Wert.

05:05.720 --> 05:08.430
Ein Wert, den Sie z. B. auch erhalten, wenn Sie versuchen,

05:08.430 --> 05:11.880
auf eine Eigenschaft eines Objekts zuzugreifen, das nicht existiert.

05:11.880 --> 05:13.670
Hier erhalten wir also void, auch

05:13.670 --> 05:16.680
wenn dies technisch gesehen undefiniert ist.

05:16.680 --> 05:19.020
Und um es noch verwirrender zu machen,

05:19.020 --> 05:23.300
ist undefined in TypeScript tatsächlich ein Typ.

05:23.300 --> 05:25.640
Sie können undefiniert als Typ haben.

05:25.640 --> 05:29.570
Eine brandneue Variable, someValue, kann zum Beispiel den

05:30.770 --> 05:33.270
Typ undefined erhalten, ohne dass ein

05:33.270 --> 05:34.700
Fehler auftritt.

05:34.700 --> 05:37.380
Diese Variable wird nun einfach für immer undefiniert sein.

05:37.380 --> 05:39.970
Wie nützlich das sein könnte, ist eine andere Frage.

05:39.970 --> 05:43.720
Aber undefined ist ein gültiger Typ in TypeScript.

05:43.720 --> 05:46.600
Hier sehen Sie jedoch, dass wir einen Fehler erhalten.

05:46.600 --> 05:48.010
Und wir bekommen einen Fehler,

05:48.010 --> 05:51.690
weil eine Funktion nicht undefiniert zurückgeben darf.

05:51.690 --> 05:53.300
Technisch gesehen natürlich

05:53.300 --> 05:56.850
schon, aber TypeScript denkt über Funktionen ein wenig anders.

05:56.850 --> 06:00.200
Sie sollten hier void verwenden, wenn eine Funktion nichts

06:00.200 --> 06:04.300
zurückgibt und nicht undefiniert ist, denn mit void machen Sie deutlich,

06:04.300 --> 06:05.940
dass diese Funktion absichtlich

06:05.940 --> 06:08.260
keine Rückgabeanweisung hat.

06:08.260 --> 06:10.690
Wenn Sie hier undefiniert sagen würden, dann

06:10.690 --> 06:13.460
würde TypeScript erwarten, dass Sie eine Return-Anweisung

06:13.460 --> 06:17.080
haben, bei der Sie einfach keinen Wert zurückgeben.

06:17.080 --> 06:18.660
Das ist der technische Unterschied.

06:18.660 --> 06:20.670
Sie sehen also, dass ich keine Fehlermeldung erhalte.

06:20.670 --> 06:22.860
Aus der Sicht von JavaScript

06:22.860 --> 06:26.610
ist dies im Grunde dasselbe wie das hier.

06:26.610 --> 06:29.050
Aber TypeScript macht hier eine Unterscheidung,

06:29.050 --> 06:31.240
und daher ist void der Typ, den Sie verwenden sollten,

06:31.240 --> 06:33.760
wenn Sie keine Rückgabeanweisung haben.

06:33.760 --> 06:37.200
Undefined, das Sie nur selten benötigen werden, kann verwendet werden,

06:37.200 --> 06:41.100
wenn Sie zurückkehren, ohne einen tatsächlichen Wert zurückzugeben.

06:41.100 --> 06:45.750
Aber auch dies ist ein seltener Anwendungsfall, und Sie könnten void mit einer Return-Anweisung

06:45.750 --> 06:47.560
wie diese auch verwenden.

06:47.560 --> 06:49.040
Sie würden keine Fehlermeldung erhalten.

06:49.040 --> 06:50.610
Und standardmäßig würden Sie in diesem

06:50.610 --> 06:52.770
Szenario eigentlich immer void verwenden.

06:52.770 --> 06:54.680
Es sei denn, Sie haben wirklich eine Funktion,

06:54.680 --> 06:56.750
die undefiniert sein sollte, und Sie wollen

06:56.750 --> 06:58.620
sich darüber im Klaren sein.

06:58.620 --> 07:01.430
Aber auch das wird selten der Fall sein.

07:01.430 --> 07:03.620
Ich möchte hier nur sicherstellen, dass Sie den

07:03.620 --> 07:05.870
Unterschied zwischen void und undefined verstehen,

07:05.870 --> 07:08.160
dass void der Standard ist, den Sie in so ziemlich

07:08.160 --> 07:10.930
allen Szenarien verwenden werden, in denen Sie eine Funktion

07:10.930 --> 07:13.450
haben, die keinen Wert zurückgibt, und dass Sie sie

07:13.450 --> 07:15.770
explizit zuweisen können.

07:15.770 --> 07:18.780
Aber natürlich kann TypeScript das auch ableiten, so wie

07:18.780 --> 07:20.440
es auch hier möglich wäre.

07:20.440 --> 07:23.083
Ich habe dies hier nur zu Demonstrationszwecken hinzugefügt.
