WEBVTT

00:02.090 --> 00:07.002
ผู้สอน: ในตอนนี้ ก่อนที่เราจะลงลึกถึงคุณสมบัติใดๆ คุณจะพบลิงก์ไปยังหน้านี้ที่แนบมากับการบรรยายนี้

00:07.002 --> 00:11.350
หน้านี้แสดงรายการคุณลักษณะ JavaScript ที่ทันสมัยทั้งหมดไม่มากก็น้อย

00:11.350 --> 00:19.700
ซึ่งเบราว์เซอร์ใดสนับสนุนคุณลักษณะเหล่านี้และคอมไพเลอร์ใดสนับสนุนคุณลักษณะเหล่านี้ด้วย

00:19.700 --> 00:23.150
และคุณจะพบ TypeScript, TypeScript รวมกับ

00:23.150 --> 00:27.210
core-js ซึ่งเป็นผู้ให้บริการโพลีฟิล

00:27.210 --> 00:28.820
แต่โดยทั่วไปจะอธิบายถึงสิ่งที่

00:28.820 --> 00:32.070
TypeScript สามารถคอมไพล์ได้

00:32.070 --> 00:34.110
ตอนนี้คุณสามารถใช้แหล่งข้อมูลนี้ได้ทุกเมื่อ

00:34.110 --> 00:35.990
หากคุณกำลังมองหาฟีเจอร์เฉพาะ เช่น คีย์เวิร์ด

00:35.990 --> 00:37.960
const ซึ่งคุณต้องการทราบว่า TypeScript

00:37.960 --> 00:40.860
ทำงานร่วมกับสิ่งนั้นได้หรือไม่

00:40.860 --> 00:43.340
จากนั้นคุณจะเห็นว่ามันใช้งานอย่างไร และมีข้อจำกัดใดบ้าง

00:43.340 --> 00:46.580
เบราว์เซอร์ใดบ้างที่รองรับสิ่งนี้

00:46.580 --> 00:51.090
นอกจากนี้ยังให้คำแนะนำเกี่ยวกับเบราว์เซอร์ที่คุณอาจต้องการกำหนดเป้าหมาย

00:51.090 --> 00:53.967
เกี่ยวกับเป้าหมาย TypeScript และอื่นๆ

00:53.967 --> 00:58.600
ดังนั้น นี่เป็นแหล่งข้อมูลที่ยอดเยี่ยมซึ่งช่วยให้คุณสลับไปมาระหว่างการวนซ้ำแบบต่างๆ

00:58.600 --> 01:04.220
ของ JavaScript และฟีเจอร์การวนซ้ำแต่ละรายการที่แนะนำ และวิธีรองรับฟีเจอร์เหล่านี้

01:04.220 --> 01:06.140
ดังนั้นจงใช้ข้อมูลนี้เป็นแหล่งข้อมูลเพื่อดูว่าคุณสามารถใช้อะไรได้บ้าง

01:06.140 --> 01:11.060
คอมไพล์อะไรได้บ้าง และเป้าหมายใดที่คุณอาจต้องตั้งค่า

01:11.060 --> 01:14.060
และด้วยเหตุนี้ เรามาเริ่มกันที่หนึ่งในคำแนะนำที่สำคัญและชัดเจนที่สุด

01:14.060 --> 01:19.260
และใช้บ่อยที่สุด นั่นคือ Next-Gen JavaScript ที่เพิ่มเข้ามา

01:19.260 --> 01:21.780
อย่างไรก็ตาม ด้วย Next-Gen JavaScript

01:21.780 --> 01:24.700
ฉันหมายถึง ES6 หรือใหม่กว่านั้น

01:24.700 --> 01:27.860
และนั่นคือสิ่งที่ผมกำลังพูดถึง

01:27.860 --> 01:32.750
ช่วยให้คุณสามารถกำหนดค่าคงที่หรือตัวแปรได้

01:32.750 --> 01:35.350
ข้อแตกต่างคือค่าคงที่ ดังนั้นตัวแปรที่กำหนดด้วยคีย์เวิร์ด

01:35.350 --> 01:39.910
const จึงไม่สามารถเปลี่ยนแปลงได้

01:39.910 --> 01:42.410
หากคุณพยายามกำหนดค่าใหม่ที่นี่แม้ว่าจะมีประเภทที่ถูกต้องก็ตาม

01:42.410 --> 01:47.220
คุณจะได้รับข้อผิดพลาดเนื่องจากเป็นค่าคงที่

01:47.220 --> 01:48.280
ต่อไปนี้เป็นข้อผิดพลาดที่เกิดจาก

01:48.280 --> 01:50.200
TypeScript

01:50.200 --> 01:53.340
ในวานิลลา JavaScript คุณจะได้รับข้อผิดพลาดจากเบราว์เซอร์เมื่อคุณรันโค้ดที่นี่

01:53.340 --> 01:55.100
และนั่นคือแนวคิดเบื้องหลัง TypeScript

01:55.100 --> 02:02.990
อย่างที่คุณได้เรียนรู้ เราได้รับข้อผิดพลาดแล้วในขณะที่คุณเขียนโค้ด เพราะแน่นอนว่าดีกว่า สำหรับเราในฐานะนักพัฒนา

02:02.990 --> 02:07.820
ช่วยให้เราสามารถแก้ไขรหัสนี้ก่อนหน้านี้ก่อนที่จะทดสอบในคอนโซล

02:07.820 --> 02:11.330
ดังนั้นที่นี่ หากเราลบออกหรือแสดงความคิดเห็นในบรรทัดนี้

02:11.330 --> 02:12.830
ตอนนี้คอมไพล์ใหม่และด้วยเหตุนี้

02:12.830 --> 02:17.130
เราจึงไม่พบข้อผิดพลาดในเบราว์เซอร์เช่นกัน

02:17.130 --> 02:20.860
นั่นเป็นข้อยุติ Let เป็นตัวแปรที่สามารถเปลี่ยนแปลงได้

02:20.860 --> 02:23.620
และแน่นอนว่ามันคล้ายกับ var

02:23.620 --> 02:27.260
Var ยังคงมีอยู่เนื่องจาก JavaScript ทำงานในลักษณะที่ฟีเจอร์ต่างๆ

02:27.260 --> 02:33.460
ไม่ได้ถูกนำออกไปในทันที เนื่องจากเบราว์เซอร์รุ่นเก่าและสคริปต์อาจใช้งานไม่ได้

02:33.460 --> 02:35.160
แต่คุณไม่ควรใช้ var อีกต่อไป

02:35.160 --> 02:37.860
แล้วทำไมคุณถึงไม่ควรใช้ var อีกต่อไป?

02:37.860 --> 02:39.670
ฉันหมายความว่า มันสมเหตุสมผลแล้วที่เรามี

02:39.670 --> 02:42.520
const เพราะนั่นเพิ่มคุณสมบัติใหม่เข้าไป นั่นคือค่าคงที่

02:42.520 --> 02:43.380
แต่ทำไมปล่อยให้?

02:43.380 --> 02:45.380
เหตุใดพวกเขาจึงแนะนำคำหลักใหม่ที่นี่

02:45.380 --> 02:47.223
ทำไมพวกเขาถึงไม่ติด var?

02:48.280 --> 02:51.460
Let และ Const มีความแตกต่างที่สำคัญอย่างหนึ่งสำหรับ var

02:51.460 --> 02:53.300
ความแตกต่างที่ชัดเจนสำหรับ const คือค่าไม่สามารถเปลี่ยนแปลงได้

02:53.300 --> 02:57.040
แต่สำหรับ let เราก็ได้รับความแตกต่างเช่นกัน

02:57.040 --> 03:00.930
และนั่นคือขอบเขตที่ตัวแปรนี้สามารถใช้ได้

03:00.930 --> 03:04.363
ตอนนี้คุณควรทราบแนวคิดของขอบเขตใน JavaScript แล้ว

03:05.609 --> 03:09.260
และด้วย var คุณจะมีขอบเขตส่วนกลางและขอบเขตของฟังก์ชัน

03:09.260 --> 03:15.340
ซึ่งหมายความว่าตัวแปรที่คุณกำหนดนอกฟังก์ชันนั้นมีอยู่ทุกที่ในสคริปต์ของคุณ

03:15.340 --> 03:19.370
ตัวแปรที่กำหนดภายในฟังก์ชันจะใช้ได้เฉพาะในฟังก์ชันนั้นเท่านั้น

03:19.370 --> 03:22.610
ตัวอย่างเช่นที่นี่ ถ้าฉันมีฟังก์ชันบวก

03:22.610 --> 03:27.610
และอาจมีเลขสองตัวคือ a และ b

03:27.670 --> 03:29.750
จากนั้นเราสามารถเพิ่มตัวแปรในนั้นด้วยผลลัพธ์

03:29.750 --> 03:32.280
var สมมุติว่า และเราตั้งค่าผลลัพธ์ = a + b

03:32.280 --> 03:34.730
แล้ว จากนั้นเราก็ส่งกลับผลลัพธ์ และแน่นอน

03:34.730 --> 03:38.430
เราสามารถเขียนสิ่งนี้ให้สั้นลงได้ แต่ฉันต้องการแสดงอะไร

03:38.430 --> 03:40.570
วาร์ไม่

03:40.570 --> 03:41.860
และนี่คงจะดี

03:41.860 --> 03:44.188
และผลลัพธ์จะมีอยู่ในฟังก์ชันนี้เท่านั้น

03:44.188 --> 03:52.190
ถ้าฉันพยายามปลอบใจผลลัพธ์ของบันทึกที่นี่ นั่นจะล้มเหลวเพราะมันใช้ได้เฉพาะในขอบเขตของฟังก์ชันนี้เท่านั้น

03:52.190 --> 03:53.970
ถ้าฉันกำหนดมันนอก var harbour ทุกอย่างทำงานได้เพราะตอนนี้มีให้บริการทั่วโลก

03:53.970 --> 03:58.180
ดังนั้นฉันสามารถเข้าถึงได้ที่นี่

03:58.180 --> 04:00.220
นอกจากนี้ วิธีการทำงานของ JavaScript

04:00.220 --> 04:03.580
ทำให้คุณสามารถเข้าถึงตัวแปรในระดับที่สูงขึ้นได้

04:03.580 --> 04:08.260
ดังนั้น ภายในฟังก์ชัน คุณสามารถทำงานกับตัวแปรขอบเขตของฟังก์ชันนี้ได้

04:08.260 --> 04:12.563
แต่ตัวแปรทั้งหมดมีขอบเขตที่สูงกว่า เช่น ขอบเขตส่วนกลางที่นี่

04:13.580 --> 04:14.980
นั่นคือ var

04:14.980 --> 04:19.180
ตอนนี้ปล่อยให้พฤติกรรมโดยทั่วไปเหมือนกัน

04:19.180 --> 04:21.580
งานนี้และงานนี้

04:21.580 --> 04:23.800
โดยทั่วไปจะเหมือนกันสำหรับการปล่อยให้

04:23.800 --> 04:27.180
แต่ข้อแตกต่างที่สำคัญคือสำหรับ var คุณมีเพียง

04:27.180 --> 04:30.860
global และ functions scope เท่านั้น

04:30.860 --> 04:32.460
งบ if ล่ะ?

04:32.460 --> 04:36.720
หากเราตรวจสอบอายุ > 20 ที่นี่ จากนั้นสร้างตัวแปร

04:36.720 --> 04:38.889
isOld และตั้งค่าเป็นจริง

04:38.889 --> 04:41.190
จากนั้นหากบันทึกของคอนโซลเป็นเก่า

04:41.190 --> 04:46.270
เราจะได้รับข้อผิดพลาดใน TypeScript แต่จริงๆ แล้วเราจะไม่พบข้อผิดพลาดใน

04:46.270 --> 04:50.090
JavaScript

04:50.090 --> 04:53.620
โค้ดนี้ถ้าคุณคว้ามาเพื่อดูว่ามันใช้งานได้ และย้ายไปที่เครื่องมือสำหรับนักพัฒนา

04:53.620 --> 05:00.970
JavaScript ในนั้นในคอนโซล และเราวางมันในนั้นและกด Enter คุณจะเห็นว่ามีการพิมพ์จริงที่นี่

05:01.830 --> 05:02.960
และแน่นอน หากคุณพยายามเข้าถึง

05:02.960 --> 05:05.040
isOld คุณก็จะพบว่าเป็นจริง

05:05.040 --> 05:08.380
ดังนั้น ตัวแปร isOld นี้จึงมีการลงทะเบียนแบบโกลบอล

05:08.380 --> 05:10.530
ไม่ใช่เฉพาะภายในคำสั่ง if

05:10.530 --> 05:11.700
เนื่องจาก var ทำให้

05:11.700 --> 05:15.860
JavaScript ไม่รู้จักขอบเขตอื่นนอกจากฟังก์ชันและส่วนกลาง

05:15.860 --> 05:17.400
และการเปลี่ยนแปลงด้วยการให้

05:17.400 --> 05:19.690
อย่างที่ฉันพูดไป TypeScript ก็ยังบ่นอยู่ดี เพราะนี่ไม่ใช่โค้ดที่ดีที่จะเขียน

05:19.690 --> 05:23.170
แต่ในทางเทคนิคแล้ว มันจะใช้งานได้

05:23.170 --> 05:25.100
ด้วยการปล่อยให้การเปลี่ยนแปลงนั้น

05:25.100 --> 05:29.880
ตอนนี้ให้สิ่งนี้ใช้ได้เฉพาะในวงเล็บปีกกาเหล่านี้เท่านั้น

05:29.880 --> 05:33.540
เนื่องจาก let และ const นำเสนอแนวคิดใหม่ที่เรียกว่าขอบเขตบล็อก

05:33.540 --> 05:40.420
ซึ่งหมายความว่าตัวแปรหรือค่าคงที่จะพร้อมใช้งานเสมอในบล็อกที่คุณกำหนดหรือในบล็อกที่ต่ำกว่า

05:40.420 --> 05:44.900
และโดยพื้นฐานแล้ว บล็อกจะเป็นตัวอย่างข้อมูลที่ล้อมรอบด้วยวงเล็บปีกกาเสมอ

05:44.900 --> 05:46.710
ดังที่คุณมีไว้สำหรับคำสั่ง if

05:46.710 --> 05:48.760
ในคำสั่ง for วนซ้ำ ในฟังก์ชัน หรือแม้กระทั่ง

05:48.760 --> 05:52.670
เป็นไปได้ ถ้าคุณเพิ่มวงเล็บปีกกาแบบนี้

05:52.670 --> 05:56.760
ตัวแปรใด ๆ ที่กำหนดไว้ที่นี่จะมีอยู่ในบล็อกนั้นเท่านั้น

05:56.760 --> 06:02.470
และนั่นเป็นสิ่งที่ดีเพราะมันบังคับให้คุณเขียนโค้ดที่สะอาดกว่าและหลีกเลี่ยงสถานการณ์เช่นนี้

06:02.470 --> 06:05.530
ดังนั้นเพื่อเป็นการพิสูจน์ว่ามีความแตกต่างในเบราว์เซอร์ ถ้าฉันคัดลอกโค้ดนี้โดยใช้คำสั่งอนุญาต

06:05.530 --> 06:14.706
และโหลดหน้าใหม่ที่นี่ และตอนนี้ฉันป้อนสิ่งนี้ที่นี่ คุณจะเห็นข้อผิดพลาดว่า isOld ไม่ได้กำหนดไว้

06:14.706 --> 06:14.706
เราไม่ได้รับข้อผิดพลาดมาก่อน

06:14.706 --> 06:19.706
ถ้าฉันพยายามส่งออก isOld ฉันได้รับข้อผิดพลาดนั้นอีกครั้ง

06:20.070 --> 06:21.060
นั่นคือความแตกต่าง

06:21.060 --> 06:23.370
ดังนั้น let และ const จึงดีกว่า ไม่ใช่แค่เพราะเราได้รับคุณสมบัติคงที่นี้

06:23.370 --> 06:29.150
แต่ยังเพราะเราถูกบังคับให้เขียนโค้ดที่สะอาดกว่าด้วย

06:29.150 --> 06:31.230
ดังนั้นให้ฉันแสดงความคิดเห็นเพื่อให้มันใช้งานได้อีกครั้ง
