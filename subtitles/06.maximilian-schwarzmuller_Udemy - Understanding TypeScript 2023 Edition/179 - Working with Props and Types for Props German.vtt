WEBVTT

00:02.170 --> 00:04.780
-: Das Ziel ist es also, eine To-Do-Listen-Komponente zu erstellen,

00:04.780 --> 00:06.330
und deshalb füge ich hier im Quellordner

00:06.330 --> 00:08.600
einen neuen Unterordner, components, und darin eine

00:08.600 --> 00:11.280
"to-doList" hinzu. tsx"-Datei, die meine Aufgabenlistenkomponente

00:11.280 --> 00:13.690
enthalten würde.

00:13.690 --> 00:15.370
Um eine React-Komponente zu erstellen,

00:15.370 --> 00:17.030
müssen wir React aus "react" importieren,

00:17.030 --> 00:20.250
sonst funktioniert JXS in dieser Datei nicht.

00:20.250 --> 00:22.820
Dann erstelle ich meine To-Do-Listenkonstante, die

00:22.820 --> 00:24.530
eine Pfeilfunktion speichert. Natürlich

00:24.530 --> 00:26.990
muss dies keine Pfeilfunktion sein, man kann auch eine

00:26.990 --> 00:30.320
Funktion mit dem Schlüsselwort function verwenden.

00:30.320 --> 00:33.160
Jetzt exportieren wir das.

00:33.160 --> 00:36.500
Nutzen wir nun unsere zusätzlichen Typescript-Funktionen und setzen

00:36.500 --> 00:39.370
wir den Typ auf react. fc, um anzuzeigen, dass es sich

00:39.370 --> 00:42.010
nicht um eine reguläre Funktion, sondern um eine funktionale

00:42.010 --> 00:43.950
Komponente handeln sollte.

00:43.950 --> 00:46.920
Daher erhalten wir einen Fehler, weil wir nichts zurückgeben,

00:46.920 --> 00:49.790
das als React-Element qualifiziert ist.

00:49.790 --> 00:53.250
Hier sollten wir also, sagen wir, eine ungeordnete Liste zurückgeben.

00:53.250 --> 00:54.850
Da ich hier eine Liste rendern möchte,

00:54.850 --> 00:58.000
ist die Rückgabe einer ungeordneten Liste im Moment sinnvoll.

00:58.000 --> 01:02.740
Nun möchte ich in dieser ungeordneten Liste Listenelemente ausgeben.

01:02.740 --> 01:07.230
Hier könnten wir also erwarten, dass wir unsere Aufgaben bekommen, und das ist ein

01:07.230 --> 01:09.240
Array, und in einem Array haben wir ein

01:09.240 --> 01:11.690
Objekt, in dem jedes Element eine ID hat.

01:11.690 --> 01:15.627
Sagen wir t1 für Aufgabe eins und einen Text

01:15.627 --> 01:18.100
wie "Beende den Kurs. Dies ist nur ein Element, aber Sie können natürlich

01:18.100 --> 01:18.933
mehrere solcher

01:18.933 --> 01:20.800
Objekte in diesem Array haben.

01:20.800 --> 01:22.010
Hier in unserer Liste können wir dann dynamisch

01:22.010 --> 01:24.620
To-Dos ausgeben und sie in eine Liste von Listenelementen übertragen.

01:24.620 --> 01:29.620
Hier gehen wir also durch alle To-Dos, das ist natürlich eine eingebaute JavaScript-Funktion,

01:30.250 --> 01:35.070
die Map-Funktion, und wir geben ein Listenelement für jedes Element in

01:35.070 --> 01:37.740
diesem Array zurück, und in diesem Listenelement

01:37.740 --> 01:41.530
setze ich "To-Do". text" als Inhalt des Listenelements und fügen Sie diese spezielle Schlüsselreaktion

01:41.530 --> 01:45.570
hinzu, die React eigentlich bei wiederholten,

01:45.570 --> 01:49.620
nebeneinander liegenden Elementen haben möchte.

01:49.620 --> 01:51.980
Hier sollten wir etwas Einzigartiges wählen, und die

01:51.980 --> 01:54.130
ID sollte ein eindeutiger Bezeichner sein.

01:54.130 --> 01:57.710
Damit haben wir eine Liste von Aufgaben erstellt.

01:57.710 --> 02:00.470
Integrieren wir nun die To-Do-Listen-Komponente

02:00.470 --> 02:02.860
in die App-Komponente und können dafür

02:02.860 --> 02:05.520
natürlich in die App-Komponente gehen, "TodoList"

02:05.520 --> 02:06.930
aus ". /components/TodoList"

02:06.930 --> 02:11.530
wie hier, die ". tsx"-Erweiterung wird automatisch durch den Build-Workflow hinzugefügt,

02:11.530 --> 02:14.350
den wir hier unter der Haube verwenden.

02:14.350 --> 02:17.160
Und dann hier innerhalb unserer div, können wir

02:17.160 --> 02:18.850
"TodoList" wie das machen.

02:18.850 --> 02:21.440
Wenn wir dies nun speichern und zur laufenden Seite

02:21.440 --> 02:24.190
zurückkehren, sehen wir diese eine Aufgabe hier.

02:24.190 --> 02:25.870
Das Styling ist schrecklich und wir können

02:25.870 --> 02:29.350
später ein besseres Styling hinzufügen, aber für den Moment sollte das ausreichen.

02:29.350 --> 02:31.680
Dies ist jedoch nicht wirklich realistisch.

02:31.680 --> 02:35.620
Wenn wir diese Aufgabenliste erstellen, möchte ich später in der Lage sein, neue

02:35.620 --> 02:37.950
Aufgaben mit einer separaten Komponente hinzuzufügen,

02:37.950 --> 02:40.063
die wir noch nicht haben.

02:40.063 --> 02:42.920
Und wahrscheinlich werden wir die To-Dos hier

02:42.920 --> 02:45.570
in dieser App-Komponente verwalten, weil

02:45.570 --> 02:48.810
wir hier eine Komponente haben, die To-Dos hinzufügt,

02:48.810 --> 02:53.020
und diese Komponente wird in der Lage sein, mit dieser App-Komponente

02:53.020 --> 02:55.280
zu kommunizieren.

02:55.280 --> 02:56.690
Hier verwalten wir dann unser

02:56.690 --> 02:59.650
Array von To-Dos und fügen To-Dos zu diesem Array hinzu oder

02:59.650 --> 03:01.510
löschen To-Dos aus diesem Array.

03:01.510 --> 03:04.220
An die To-Do-Liste übergeben wir dann dieses Array.

03:04.220 --> 03:06.930
Auch wenn wir es noch nicht verwalten, würden wir das Array

03:06.930 --> 03:09.270
"todos" wahrscheinlich nicht in der Aufgabenliste,

03:09.270 --> 03:11.660
sondern in der App-Komponente haben.

03:11.660 --> 03:15.010
Es ist realistischer, dass dieses Array später hier landen wird, also können

03:15.010 --> 03:16.740
wir es bereits hierher verschieben.

03:16.740 --> 03:20.093
Jetzt müssen wir sie an "TodoList" übergeben. Hierfür können wir natürlich Requisiten verwenden.

03:20.930 --> 03:23.600
Auf der To-Do-Liste könnten Sie also eine Item-Prop haben,

03:23.600 --> 03:25.640
der Name ist natürlich uns überlassen, denn

03:25.640 --> 03:28.370
wir definieren diese Komponente, wir können festlegen,

03:28.370 --> 03:30.350
wie ihre Prop benannt werden soll.

03:30.350 --> 03:32.100
Wir können unser "todos"-Array einfügen.

03:32.100 --> 03:35.010
Jetzt sehen wir bereits, dass die IDE dies nicht mag und wenn ich versuche,

03:35.010 --> 03:37.820
dies zu speichern, erhalten wir auch einen Kompilierungsfehler.

03:37.820 --> 03:40.650
Wir haben einen Kompilierungsfehler erhalten,

03:40.650 --> 03:45.400
weil die Eigenschaft "items" beim Typ whatever nicht existiert.

03:45.400 --> 03:47.830
Sie existiert also im Grunde nicht auf diesem Kreuzungstyp

03:47.830 --> 03:50.440
hier, der letztlich die Struktur der von "TodoList" empfangenen

03:50.440 --> 03:52.070
Requisiten definiert. Denn wenn man Typescript mit React verwendet,

03:52.070 --> 03:55.300
muss man sich über die Typen, mit denen man arbeitet, im Klaren sein.

03:55.300 --> 03:59.470
Das bedeutet nicht nur, dass man typescript mitteilt, dass es sich um eine spezielle

03:59.470 --> 04:02.110
Art von Funktion handelt, nein, es bedeutet auch,

04:02.110 --> 04:05.250
dass man typescript mitteilt, wie diese Requisiten aussehen

04:05.250 --> 04:08.360
sollen und wie sie strukturiert sind, wenn man sich auf Requisiten

04:08.360 --> 04:11.020
in einer Komponente verlässt.

04:11.020 --> 04:14.860
In der To-Do-Listen-Komponente erhalten wir also Requisiten,

04:14.860 --> 04:17.420
das ist normales React.

04:17.420 --> 04:19.400
Und bei den Requisiten haben wir wahrscheinlich das Eigentum an unseren Gegenständen.

04:19.400 --> 04:23.530
Wir haben also eine Requisite mit dem Namen "items", und

04:23.530 --> 04:26.200
das ist in der Tat das, was ich hier oben

04:26.200 --> 04:30.323
gesagt habe: "Ich habe diese items-Requisite. Das Problem ist nun, dass dies technisch funktionieren würde, aber typescript

04:31.420 --> 04:33.430
bricht noch nicht ab.

04:33.430 --> 04:35.067
Wir haben typescript nicht wirklich gesagt, dass

04:35.067 --> 04:37.140
unsere Requisite hier eine "items"-Eigenschaft haben soll.

04:37.140 --> 04:39.503
Dazu können wir die Tatsache nutzen,

04:39.503 --> 04:41.950
dass dieser Funktionskomponententyp

04:41.950 --> 04:45.063
hier eigentlich ein generischer Typ ist.

04:45.063 --> 04:46.913
Ein generischer Typ, in dem wir alle zusätzlichen Requisiten

04:47.840 --> 04:50.510
neben dem Standardrequisit der Kinder definieren können, das jede Komponente

04:50.510 --> 04:52.170
hat und das wir hier erwarten.

04:52.170 --> 04:54.250
Wir können also hier spitze Klammern hinzufügen

04:54.250 --> 04:58.132
und unser Objekt hinzufügen, das die Struktur dieses "props"-Objekts beschreibt,

04:58.132 --> 05:00.710
das wir hier bekommen, oder, um unseren Code schlanker

05:00.710 --> 05:03.670
zu halten, tun wir dies in einer zusätzlichen Schnittstelle

05:03.670 --> 05:06.170
hier und das ist völlig optional.

05:06.170 --> 05:09.670
Hier könnten wir also unsere To-Do-Liste als Requisiten verwenden, und

05:09.670 --> 05:12.350
dies beschreibt, wie unsere Requisiten aussehen.

05:12.350 --> 05:15.120
Und hier erwarte ich einen "items"-Schlüssel,

05:15.120 --> 05:18.260
wo wir ein Array von Objekten haben, wo jedes Objekt eine

05:18.260 --> 05:20.510
ID hat, die eine Zeichenkette ist, und

05:20.510 --> 05:23.380
einen Text hat, der eine Zeichenkette ist.

05:23.380 --> 05:26.120
Das sind die Daten, die wir hier verwalten.

05:26.120 --> 05:30.020
Wir haben ein Array von Objekten mit einem ID-String

05:30.020 --> 05:32.850
und einem Text-String.

05:32.850 --> 05:34.370
Das ist, was ich erwarte, um hier zu bekommen

05:34.370 --> 05:36.070
ist "Requisiten" ein Array von solchen Objekten

05:36.070 --> 05:38.940
und wenn wir hier sind, können wir jetzt auf diese To-Do-Liste Requisiten-Schnittstelle

05:38.940 --> 05:40.700
und jetzt alles in Ordnung ist. Nun versteht Typescript, dass

05:40.700 --> 05:42.670
wir hier Requisiten bekommen, wo

05:42.670 --> 05:45.040
wir eine Item Requisite haben werden und

05:45.040 --> 05:48.640
dass diese Item Requisite ein Array sein wird, wo wir einen ID-Schlüssel

05:48.640 --> 05:52.145
und einen Textschlüssel auf jedem

05:52.145 --> 05:55.000
Arrayelement haben werden.

05:55.000 --> 05:56.920
Wenn wir dies nun speichern, wird es kompiliert, und

05:56.920 --> 05:58.870
wir erhalten wieder die funktionierende Ausgabe.

05:58.870 --> 05:59.850
Auch hier wird also Typescript mit React verwendet.

05:59.850 --> 06:02.390
Wir verwenden es nicht nur, um React oder Typescript mitzuteilen,

06:02.390 --> 06:04.188
dass es sich um eine funktionale Komponente

06:04.188 --> 06:06.830
handelt, sondern auch um die Requisiten, die diese Komponente

06:06.830 --> 06:10.000
schließlich erhält, und das hilft uns sehr bei der Typsicherheit.

06:10.000 --> 06:13.490
Es verhindert, dass ich hier versehentlich denke,

06:13.490 --> 06:15.130
dass es "todos" heißt. Nein, dies wird nicht unterstützt, wir erhalten eine Fehlermeldung.

06:15.130 --> 06:19.060
Es sind Gegenstände.

06:19.060 --> 06:21.165
Sie alle werden sehen, dass sie hier automatisch vervollständigt werden.

06:21.165 --> 06:23.330
Die Codierung wird also viel einfacher, wenn man

06:23.330 --> 06:24.910
hier mit Typescript arbeitet. Und das ist natürlich der ganze Vorteil von Typescript:

06:24.910 --> 06:27.160
Es vereinfacht die Codierung, es vermeidet unnötige Fehler und wie man sieht,

06:27.160 --> 06:28.400
tut es das auch in einer React-App.

06:28.400 --> 06:30.670
Aber natürlich sind wir noch nicht fertig.

06:30.670 --> 06:34.420
Im Moment ändern sich unsere Aufgaben hier nie, und

06:34.420 --> 06:36.640
das möchte ich ändern,

06:36.640 --> 06:39.930
ich möchte eine Komponente haben, die es uns

06:39.930 --> 06:44.120
ermöglicht, neue Aufgaben hinzuzufügen.

06:44.120 --> 06:46.080
Daran sollten wir also als nächstes arbeiten.
