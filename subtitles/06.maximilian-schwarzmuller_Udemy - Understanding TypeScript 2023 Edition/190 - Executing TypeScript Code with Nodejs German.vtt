WEBVTT

00:02.200 --> 00:03.210
Kursleiter: Fangen wir also

00:03.210 --> 00:05.520
mit TypeScript und Node an. js und dafür bin ich im Wesentlichen

00:05.520 --> 00:08.660
in einem leeren neuen Ordner hier, nur einige Konfigurationsdateien

00:08.660 --> 00:12.140
dort, und lassen Sie uns sehr einfach beginnen.

00:12.140 --> 00:15.020
Fügen wir eine App hinzu. ts-Datei hier ein.

00:15.020 --> 00:17.370
Sie können ihn natürlich nennen, wie Sie wollen.

00:17.370 --> 00:19.180
Und dort schreiben wir etwas Code, den

00:19.180 --> 00:22.220
wir mit Node ausführen wollen. js, aber wo wir TypeScript

00:22.220 --> 00:24.980
verwenden wollen.

00:24.980 --> 00:26.350
Ein einfaches Skript könnte sein,

00:26.350 --> 00:28.910
dass wir einfach etwas auf der Konsole protokollieren.

00:28.910 --> 00:30.450
Dies funktioniert im Browser,

00:30.450 --> 00:33.350
aber auch mit Node. js.

00:33.350 --> 00:35.840
Stellen Sie nun sicher, dass Sie Node. js installiert, was Sie

00:35.840 --> 00:37.220
auf jeden Fall haben sollten,

00:37.220 --> 00:38.740
wenn Sie diesen Kurs besucht

00:38.740 --> 00:42.077
haben, da wir es in NPM mit Webpack und mit vielen anderen Tools

00:42.077 --> 00:43.910
und Bibliotheken, die wir bereits

00:43.910 --> 00:46.710
mit NPM installiert haben, verwendet haben.

00:46.710 --> 00:48.480
Sie sollten also Node. js installiert.

00:48.480 --> 00:50.300
Und wenn Sie es installiert haben, können

00:50.300 --> 00:52.130
Sie diese Datei ausführen, wenn Sie

00:52.130 --> 00:54.110
sie in JavaScript kompilieren.

00:54.110 --> 00:57.000
Wenn ich also tsc app ausführe. ts, und ich produziere

00:57.000 --> 01:00.360
meine App. js-Datei, daher kann ich

01:00.360 --> 01:02.890
diese mit Node ausführen und hier

01:02.890 --> 01:04.503
etwas ausgeben.

01:06.550 --> 01:08.990
Wenn ich die App jetzt lösche. js-Datei und ich versuche,

01:08.990 --> 01:11.890
die App auszuführen. ts mit Knoten, werden

01:11.890 --> 01:13.810
Sie etwas Seltsames sehen.

01:13.810 --> 01:15.070
Das funktioniert auch.

01:15.070 --> 01:18.010
Wenn also Node in der Lage ist, TypeScript auszuführen?

01:18.010 --> 01:20.380
Nein, das stimmt nicht, und das ist wirklich wichtig.

01:20.380 --> 01:23.210
Es kümmert sich einfach nicht um die Dateierweiterung,

01:23.210 --> 01:25.260
sondern behandelt alles, was es in der Datei

01:25.260 --> 01:27.420
findet, als reguläres JavaScript, und dieses

01:27.420 --> 01:30.180
hier verwendet keine TypeScript-Funktionen, also funktioniert

01:30.180 --> 01:31.370
es.

01:31.370 --> 01:34.340
Das ändert sich, wenn wir hier andere Inhalte hinzufügen.

01:34.340 --> 01:36.400
Nehmen wir an, dass wir stattdessen eine Altersvariable

01:36.400 --> 01:37.370
haben, die eine Zahl

01:37.370 --> 01:40.080
ist, und dann setze ich sie hier auf 30, und dann konsultiere

01:40.080 --> 01:42.250
ich. Alter hier protokollieren.

01:42.250 --> 01:44.840
Dies ist natürlich ein gültiger TypeScript-Code.

01:44.840 --> 01:46.790
Wenn wir aber versuchen, dies mit Node auszuführen,

01:46.790 --> 01:48.370
werden wir einen Fehler erhalten.

01:48.370 --> 01:52.450
Node ist also nicht in der Lage, TypeScript zu parsen und zu kompilieren, sondern

01:52.450 --> 01:54.210
behandelt einfach jede Datei, die

01:54.210 --> 01:56.960
Sie damit ausführen, als JavaScript.

01:56.960 --> 01:59.030
Und wenn Sie keine TypeScript-Funktionen in der

01:59.030 --> 02:01.100
Datei verwenden, dann funktioniert es auch.

02:01.100 --> 02:02.950
Aber wenn Sie das tun, wird es nicht funktionieren.

02:02.950 --> 02:04.920
Sie müssen die Datei immer zuerst in

02:04.920 --> 02:06.550
JavaScript kompilieren, um dann

02:06.550 --> 02:08.960
die JavaScript-Datei, die nur gültigen JavaScript-Code

02:08.960 --> 02:11.350
enthält, auszuführen.

02:11.350 --> 02:13.030
Das ist wirklich wichtig zu verstehen.

02:13.030 --> 02:15.890
Node führt TypeScript nicht aus.

02:15.890 --> 02:20.710
Jetzt können Sie ein Paket, ts-node, installieren, das Ihnen den TypeScript-Compiler

02:20.710 --> 02:24.230
in Kombination mit der ausführbaren Datei node zur Verfügung

02:24.230 --> 02:27.880
stellt, so dass Sie ein globales Tool installieren können,

02:27.880 --> 02:30.320
mit dem Sie TypeScript-Dateien einfach

02:30.320 --> 02:34.170
so ausführen können.

02:34.170 --> 02:35.210
Aber hinter den Kulissen

02:35.210 --> 02:37.620
wird es dann einfach die Kompilierung für Sie übernehmen

02:37.620 --> 02:39.440
und den Kompiliercode ausführen.

02:39.440 --> 02:42.610
Es kombiniert also im Grunde den tsc- und den Knotenschritt

02:42.610 --> 02:43.890
in einem Schritt.

02:43.890 --> 02:46.060
Es handelt sich also um ein Paket, das Sie verwenden

02:46.060 --> 02:49.150
können, aber während dies für die Entwicklung nett sein mag, ist

02:49.150 --> 02:52.330
es für die Produktion, um Ihre Dateien wirklich auf einem Webserver,

02:52.330 --> 02:54.850
auf einem Webhoster, auszuliefern, wahrscheinlich

02:54.850 --> 02:56.950
nicht ideal, weil dieser zusätzliche Kompilierungsschritt

02:56.950 --> 02:59.910
jedes Mal, wenn Ihr Code ausgeführt wird, einfach ein bisschen

02:59.910 --> 03:02.160
zusätzlichen Overhead hinzufügt, was während

03:02.160 --> 03:12.090
der Entwicklung in Ordnung ist, was Sie aber wahrscheinlich nicht wollen, wenn Ihr Code produktionsreif ist und Sie ihn wirklich irgendwo ausliefern wollen.

03:12.090 --> 03:13.260
Daher werden wir in diesem

03:13.260 --> 03:15.950
Modul ts-node nicht verwenden und nicht versuchen, TypeScript-Dateien

03:15.950 --> 03:18.180
mit node auszuführen.

03:18.180 --> 03:21.570
Stattdessen zeige ich Ihnen hier ein Setup, mit dem Sie eine Node-Express-Webanwendung

03:21.570 --> 03:26.150
oder eine Rest-API erstellen können, und zwar nur mit TypeScript und dem TypeScript-Compiler

03:26.150 --> 03:31.343
und Vanilla Node.

03:31.343 --> 03:31.343
js.
