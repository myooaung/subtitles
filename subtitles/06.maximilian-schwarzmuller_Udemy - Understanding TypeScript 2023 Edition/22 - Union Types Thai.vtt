WEBVTT

00:02.130 --> 00:02.963
ผู้สอน: ดังนั้นเราจึงพูดถึงประเภทหลักๆ

00:02.963 --> 00:05.180
2-3 ประเภทที่ TypeScript รู้

00:05.180 --> 00:06.590
ตอนนี้ไปกันเถอะ

00:06.590 --> 00:09.140
เพื่อสิ่งนั้น ฉันจะเปลี่ยนชื่อแอป มาที่นี่เพื่อ objs-arrays-enums

00:09.140 --> 00:12.750
หรืออะไรก็ตามที่คุณต้องการตั้งชื่อ โดยพื้นฐานแล้วเรายังมีไฟล์นั้นอยู่

00:12.750 --> 00:17.130
แต่ฉันจะสร้างแอปใหม่

00:17.130 --> 00:17.130
ts

00:17.130 --> 00:20.500
เพื่อให้เรามีไฟล์ว่างที่เราสามารถทำงานได้อีกครั้ง

00:20.500 --> 00:22.550
ตอนนี้ในไฟล์นี้ ฉันต้องการเจาะลึกอีกประเภทที่น่าสนใจซึ่งคุณจะพบใน

00:22.550 --> 00:25.790
TypeScript

00:25.790 --> 00:28.640
และนั่นคือประเภทของสหภาพแรงงาน

00:28.640 --> 00:30.190
ตอนนี้คืออะไร?

00:30.190 --> 00:33.000
กลับมาที่ฟังก์ชันเพิ่มที่เราเขียนไว้ก่อนหน้านี้

00:33.000 --> 00:37.270
ฉันจะคัดลอกและย้ายไปยังแอป

00:37.270 --> 00:37.270
ท.

00:37.270 --> 00:39.190
กำจัดความคิดเห็นนั้นที่นี่ และที่นี่

00:39.190 --> 00:44.170
เรามาปิดพื้นฐานกันดีกว่า ts เพื่อให้เรากำจัดข้อผิดพลาดนั้น

00:44.170 --> 00:49.920
นอกจากนี้ ตอนนี้ฉันต้องการมีความยืดหยุ่นมากขึ้นเกี่ยวกับสิ่งที่เรายอมรับที่นี่

00:49.920 --> 00:54.370
ฉันจะกำจัด showResult และวลีด้วย ฉันไม่ต้องการสิ่งนั้น

00:54.370 --> 00:58.590
และสิ่งเดียวที่ฉันต้องการทำคือต้องการคำนวณผลลัพธ์และส่งคืน

00:58.590 --> 01:01.960
แต่ฉันต้องการที่จะมีความยืดหยุ่นมากขึ้นเกี่ยวกับปัจจัยการผลิต

01:01.960 --> 01:06.045
ก่อนหน้านี้ เราตรวจสอบให้แน่ใจว่าเราจะทำงานกับตัวเลขเท่านั้น

01:06.045 --> 01:09.357
สมมติว่าเราตั้งชื่อการรวมนี้จริง

01:09.357 --> 01:13.190
ๆ และควรใช้ได้กับทั้งตัวเลขและสตริง

01:13.190 --> 01:18.595
เนื่องจากกลายเป็นว่าเราสามารถรวมทั้งตัวเลขและสตริงด้วยตัวดำเนินการบวกนี้

01:18.595 --> 01:21.650
ข้อแตกต่างเพียงอย่างเดียวคือในสถานการณ์หนึ่ง

01:21.650 --> 01:24.030
เราได้ผลลัพธ์เป็นตัวเลข ในอีกสถานการณ์หนึ่ง

01:24.030 --> 01:27.120
เราได้สตริงที่ต่อกัน ดังที่เราเห็นก่อนหน้านี้แล้ว

01:27.120 --> 01:30.150
ในโมดูลนี้

01:30.150 --> 01:32.040
แต่ตอนนี้ฉันต้องการอนุญาตพฤติกรรมนี้

01:32.040 --> 01:38.963
เพราะคุณอาจมีแอปพลิเคชันที่คุณต้องการให้มีฟังก์ชันการรวมกันที่ยืดหยุ่นซึ่งทำงานกับตัวเลขและสตริงได้

01:39.830 --> 01:42.360
ดังนั้นฉันจะตั้งชื่ออินพุต 1 นี้ที่นี่

01:42.360 --> 01:47.340
และอินพุต 2 นี้ด้วย และรวมทั้งสองเข้าด้วยกันตอนนี้

01:47.340 --> 01:53.180
แต่เราจะมีปัญหาหนึ่งแน่นอน ตอนนี้เราตั้งค่าพารามิเตอร์ทั้งสองเป็นตัวเลข

01:53.180 --> 01:58.190
ซึ่งหมายความว่าเราสามารถเรียกใช้ฟังก์ชันนี้ได้ตราบเท่าที่เราต้องการทำงานกับตัวเลข

01:58.190 --> 01:59.130
สมมติว่าข้างล่างนี้

01:59.130 --> 02:01.640
เรากำลังสร้างค่าคงที่ใหม่ รวมกันอายุ

02:02.931 --> 02:04.690
และที่นั่นฉันเรียกการรวมและส่งผ่านใน

02:04.690 --> 02:12.000
30 และ 26 ที่นี่เป็นอายุในทุกแอปพลิเคชันที่เรากำลังสร้าง

02:12.000 --> 02:15.014
อีกอันหลังจากบันทึกของคอนโซล combinationAges

02:15.014 --> 02:19.830
ก็ไม่น่าแปลกใจเกินไปที่ถ้าเราคอมไพล์ไฟล์นี้ที่นี่ แล้วโหลดหน้านี้ซ้ำ

02:19.830 --> 02:22.360
เราจะได้ 56

02:22.360 --> 02:24.690
ได้ผล เราได้เลขนี้มา

02:24.690 --> 02:28.838
แต่แน่นอน เรามีปัญหาถ้าเราพยายามสร้างสตริงที่นี่

02:28.838 --> 02:31.610
ตัวอย่างเช่นชื่อรวม

02:31.610 --> 02:36.033
ถ้าฉันพยายามรวม Max และ Anna ไว้ที่นี่ เราก็พบข้อผิดพลาดทันทีที่นี่ว่า

02:37.230 --> 02:39.630
Max ไม่สามารถกำหนดให้พิมพ์ตัวเลขได้

02:39.630 --> 02:44.350
เพราะแน่นอนว่านี่คือสตริง

02:44.350 --> 02:45.790
แน่นอน ตอนนี้เราสามารถเปลี่ยนสิ่งนี้ให้ยอมรับสตริงแทนตัวเลขได้

02:45.790 --> 02:50.130
แต่ตอนนี้การเรียกใช้ฟังก์ชันครั้งแรกจะล้มเหลว

02:50.130 --> 02:52.750
และนั่นคือสิ่งที่ประเภทของสหภาพสามารถช่วยเราได้

02:52.750 --> 03:01.700
ถ้าเรามีสถานที่ในแอปพลิเคชันของเรา ไม่ว่าจะเป็นพารามิเตอร์ของฟังก์ชันหรือค่าคงที่หรือตัวแปรที่เราใช้ที่ไหนสักแห่ง

03:01.700 --> 03:05.030
ซึ่งเรายอมรับค่าที่แตกต่างกันสองประเภท

03:05.030 --> 03:07.410
ประเภทของสหภาพแรงงานสามารถช่วยเราได้

03:07.410 --> 03:12.690
ในการบอก TypeScript ว่าเราสามารถใช้ทั้งตัวเลขหรือสตริงได้

03:12.690 --> 03:14.220
เราใช้ตัวเลขและสัญลักษณ์ไปป์ที่นี่

03:14.220 --> 03:20.660
จากนั้นจึงใช้ประเภทอื่นที่เรายอมรับด้วย

03:20.660 --> 03:22.340
และคุณสามารถมีมากกว่าสองประเภท

03:22.340 --> 03:25.220
คุณสามารถรับได้มากเท่าที่คุณต้องการที่นี่

03:25.220 --> 03:27.050
ตรงนี้ ฉันต้องการแค่สองอัน

03:27.050 --> 03:28.880
และนั่นคือการกำหนดประเภทที่ฉันจะใช้

03:28.880 --> 03:31.720
ตัวเลขหรือสตริง

03:31.720 --> 03:33.690
ตอนนี้ฉันได้รับข้อผิดพลาดที่นี่

03:33.690 --> 03:35.930
ซึ่งไม่สามารถใช้ตัวดำเนินการบวกกับประเภทสตริงหรือตัวเลข

03:35.930 --> 03:39.120
และสตริงหรือตัวเลขได้

03:39.120 --> 03:41.500
จริง ๆ แล้วไม่ถูกต้องทั้งหมด สิ่งนี้น่าจะใช้ได้

03:41.500 --> 03:46.670
เพราะเราสามารถใช้ตัวดำเนินการบวกกับทั้งตัวเลขและสตริง

03:46.670 --> 03:49.600
แต่ TypeScript เห็นแค่ว่าเรามี union type ที่นี่

03:49.600 --> 03:52.540
และมันไม่ได้วิเคราะห์ว่ามีอะไรอยู่ใน union type

03:52.540 --> 03:56.010
มันแค่เห็นว่า "เอาล่ะ คุณคาดว่าจะมีหลายประเภท

03:56.010 --> 03:59.460
อาจรวมถึงประเภทที่ฉันไม่สามารถใช้ตัวดำเนินการบวก

03:59.460 --> 04:01.640
ดังนั้นฉันจะบ่นที่นี่ โชคดีที่เราสามารถแก้ไขปัญหานั้นได้

04:01.640 --> 04:05.410
เราสามารถเพิ่มการตรวจสอบประเภทรันไทม์ของเราที่นี่และดูว่าอินพุต

04:05.410 --> 04:07.910
1 ประเภทที่เท่ากับตัวเลขหรือไม่

04:07.910 --> 04:15.170
และถ้าประเภทอินพุต 2 เท่ากับตัวเลขหรือไม่ จากนั้นย้ายการคำนวณนี้ไปไว้ที่นั่น ตอนนี้เป็นการปรับปรุงเพียงครั้งเดียว

04:16.530 --> 04:37.873
ลองสร้างผลลัพธ์เป็นตัวแปรเริ่มต้นของสิ่งนั้น ถ้า ตรวจสอบ เนื่องจากการล็อคขอบเขต เพื่อให้ตัวแปรนี้เป็นตัวแปรที่มีอยู่ในฟังก์ชันทั้งหมด จากนั้นจึงกำหนดค่าใหม่ในนั้น

04:37.873 --> 04:40.310
ทีนี้เรามาตรวจสอบว่าเรามีตัวเลขสองตัวหรือไม่

04:40.310 --> 04:42.818
ดังนั้น TypeScript จึงรู้ว่าในที่นี้

04:42.818 --> 04:45.890
input1 และ input2 ทั้งคู่จะเป็นตัวเลข

04:45.890 --> 04:49.790
ทีนี้มาเพิ่มการตรวจสอบอื่นที่นี่

04:49.790 --> 04:56.913
และเราสามารถตั้งค่าผลลัพธ์เท่ากับ input1 tostring แปลงสิ่งนี้เป็นสตริงอย่างชัดเจน

04:58.550 --> 05:00.570
และ input2 สตริง

05:00.570 --> 05:02.880
และสิ่งนี้จะใช้ได้กับ TypeScript

05:02.880 --> 05:05.700
และ JavaScript ด้วย เพราะเราสามารถเชื่อมสองสตริงเข้าด้วยกันได้

05:05.700 --> 05:08.220
ตอนนี้เรามีการคำนวณเกือบจะเหมือนกัน

05:08.220 --> 05:10.800
แต่เราระบุชัดเจนว่าที่นี่ เราจะทำงานกับตัวเลขเสมอ

05:10.800 --> 05:15.730
ที่นี่เราจะทำงานกับสตริงเสมอ แล้วเราจะส่งคืนผลลัพธ์

05:15.730 --> 05:17.490
และในตอนนี้ ถ้าเราคอนโซลบันทึกชื่อที่รวมกันลงไป

05:17.490 --> 05:27.210
และเราคอมไพล์ไฟล์นี้ เราจะเห็นว่าเมื่อเรากลับมาที่เพจของเราอีกครั้ง เราก็ได้ตัวเลขที่รวมกันตรงนั้น ซึ่งบวกกันง่ายๆ

05:27.210 --> 05:35.090
และด้วยเหตุนี้เราจึงได้ตัวเลข เป็นผลให้และสองชื่อรวมกันที่นี่

05:35.090 --> 05:40.830
นี่คือวิธีที่เราสามารถใช้ประเภทสหภาพเพื่อให้มีความยืดหยุ่นมากขึ้นเกี่ยวกับสิ่งที่เราทำในฟังก์ชัน

05:40.830 --> 05:43.770
เช่น หรือที่อื่นๆ ในโค้ดของเรา

05:43.770 --> 05:45.920
การตรวจสอบประเภทรันไทม์เพิ่มเติมนี้ไม่จำเป็นเสมอไปเมื่อคุณทำงานกับประเภทยูเนี่ยน

05:45.920 --> 05:54.090
แต่มักจะเป็นเพราะประเภทยูเนี่ยน คุณสามารถมีความยืดหยุ่นมากกว่าในพารามิเตอร์ที่คุณยอมรับ แต่จากนั้นคุณอาจมีตรรกะที่แตกต่างกันในของคุณ

05:54.090 --> 06:00.940
ฟังก์ชันขึ้นอยู่กับประเภทที่คุณได้รับ

06:00.940 --> 06:03.730
เพื่อให้ฟังก์ชันของคุณสามารถทำงานกับค่าหลายประเภทได้

06:03.730 --> 06:05.640
แต่จากนั้นจะทำสิ่งต่าง ๆ

06:05.640 --> 06:10.320
เล็กน้อยขึ้นอยู่กับประเภทที่คุณได้รับ

06:10.320 --> 06:12.410
บ่อยครั้งที่คุณอาจต้องการการตรวจสอบรันไทม์เมื่อทำงานกับประเภทสหภาพ

06:12.410 --> 06:16.700
แต่คุณไม่จำเป็นต้องใช้เสมอไป

06:16.700 --> 06:18.490
คุณจะพบสถานการณ์ในโปรแกรม

06:18.490 --> 06:24.060
TypeScript อย่างแน่นอน ซึ่งคุณสามารถใช้ประเภทร่วมโดยไม่ต้องตรวจสอบประเภทรันไทม์

06:24.060 --> 06:25.870
มันขึ้นอยู่กับตรรกะที่คุณกำลังเขียน
