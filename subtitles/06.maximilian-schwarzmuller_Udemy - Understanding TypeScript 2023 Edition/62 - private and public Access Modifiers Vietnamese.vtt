WEBVTT

00:02.040 --> 00:04.180
Giáo viên: Vì vậy, đó là một lớp học rất cơ bản.

00:04.180 --> 00:05.930
Bây giờ khi xây dựng các lớp,

00:05.930 --> 00:08.400
chúng thường phức tạp hơn thế.

00:08.400 --> 00:10.800
Và bạn có thể muốn lưu trữ nhiều dữ liệu hơn trong đó.

00:10.800 --> 00:15.160
Giả sử tất cả các bộ phận nên có nhân viên.

00:15.160 --> 00:18.160
Đó có thể là một mảng và ban đầu nó có

00:18.160 --> 00:20.290
thể là một mảng trống.

00:20.290 --> 00:23.520
Và cũng chính xác hơn một chút về những gì bạn muốn

00:23.520 --> 00:24.980
lưu trữ trong đó, nó có

00:24.980 --> 00:28.800
thể là một mảng chuỗi để giữ cho nó tương đối đơn giản.

00:28.800 --> 00:31.733
Bây giờ chúng ta có thể có một phương thức ở đây addEmployee.

00:33.030 --> 00:36.880
Ở đó, chúng tôi muốn một nhân viên làm đối số, đối số này chỉ

00:36.880 --> 00:39.430
là một chuỗi trong ví dụ của chúng tôi.

00:39.430 --> 00:42.650
Sau đó, chúng ta có thể thiết lập điều này. người lao động. đẩy.

00:42.650 --> 00:47.320
Vì vậy, hãy đẩy một nhân viên mới vào mảng nhân viên của chúng tôi

00:47.320 --> 00:48.373
bằng mã này.

00:50.750 --> 00:52.683
Bây giờ chúng ta cũng có thể thêm một phương

00:53.666 --> 00:55.749
thức khác, printEmployeeInformation.

01:00.508 --> 01:05.508
Và ở đó tôi muốn an ủi. nhật ký (cái này. người lao động. length) và tôi

01:07.766 --> 01:12.766
cũng muốn console. nhật ký (cái này. nhân viên) của chính mình.

01:15.510 --> 01:18.480
Bây giờ nếu chúng ta đi xuống đây, bây giờ chúng ta có

01:18.480 --> 01:20.560
thể nhận xét mã này ở đây, mã này sẽ bị

01:20.560 --> 01:24.070
hỏng một lần nữa vì chúng ta lại không khớp mô tả bộ phận với đối

01:24.070 --> 01:25.870
tượng của mình ở dưới đó.

01:25.870 --> 01:29.200
Và thay vào đó, ở đây, trong phòng kế toán này, chúng

01:29.200 --> 01:32.234
ta có thể thêm một nhân viên, chẳng hạn như Max.

01:32.234 --> 01:35.400
Và một nhân viên khác, chẳng hạn như Manu.

01:35.400 --> 01:37.690
Và rồi bên cạnh việc mô tả nó, tôi

01:37.690 --> 01:41.520
cũng muốn lấy thông tin nhân viên của mình ở dưới đó.

01:41.520 --> 01:44.600
Nếu chúng ta lưu cái này, chúng ta sẽ nhận được kết

01:44.600 --> 01:47.830
quả này, hai nhân viên và đây là một số thông tin.

01:47.830 --> 01:50.240
Bây giờ đó là tất cả tốt đẹp để có.

01:50.240 --> 01:52.700
Một vấn đề chúng ta gặp phải với lớp này là chúng

01:52.700 --> 01:55.960
ta có thể thay đổi nhân viên từ bên ngoài, không chỉ bằng

01:55.960 --> 01:58.160
cách thêm nhân viên, mà bằng cách truy

01:58.160 --> 02:01.710
cập trực tiếp vào thuộc tính của nhân viên, nhân tiện, chúng

02:01.710 --> 02:04.430
ta cũng có thể làm điều đó đối với tên.

02:04.430 --> 02:07.630
Vì vậy, ý tôi là chúng ta cũng có thể đến phòng

02:07.630 --> 02:10.560
kế toán, sau đó tiếp cận với nhân viên,

02:10.560 --> 02:13.870
và có thể thêm một nhân viên khác ở chỉ số hai,

02:13.870 --> 02:16.400
và có một Anna, như thế.

02:16.400 --> 02:18.210
Nếu chúng tôi làm điều đó và chúng tôi tiết kiệm được

02:18.210 --> 02:20.290
nó, chúng tôi sẽ có ba nhân viên và chúng tôi có Anna.

02:20.290 --> 02:22.710
Bây giờ bạn có thể nghĩ, thật tuyệt, chúng ta có một cách khác.

02:22.710 --> 02:25.230
Chà, khi xây dựng các ứng dụng phức tạp hơn,

02:25.230 --> 02:27.980
bạn thường muốn tránh những thứ như thế này.

02:27.980 --> 02:30.930
Bạn muốn đảm bảo rằng có một đường dẫn rõ ràng,

02:30.930 --> 02:34.870
một cách sử dụng lớp học của bạn và những thứ tương tự như vậy,

02:34.870 --> 02:37.280
những cách sử dụng thay thế, không thực

02:37.280 --> 02:38.530
sự được hỗ trợ.

02:38.530 --> 02:41.230
Bởi vì nếu bạn đang làm việc trong một nhóm lớn hơn,

02:41.230 --> 02:42.920
thì một đồng nghiệp sẽ sử dụng phương

02:42.920 --> 02:45.700
pháp này để thêm nhân viên và một đồng nghiệp khác

02:45.700 --> 02:48.050
có thể sử dụng phương pháp này.

02:48.050 --> 02:49.280
Và bạn không muốn điều này.

02:49.280 --> 02:52.640
Bạn muốn có một cách thống nhất để làm điều này.

02:52.640 --> 02:55.960
Ngoài ra, vì có thể trong phương thức thêm nhân viên, bạn

02:55.960 --> 02:58.420
làm nhiều việc hơn là chỉ thêm nó vào mảng.

02:58.420 --> 02:59.770
Có thể trước hết bạn

02:59.770 --> 03:02.400
muốn có một số xác thực, v.v. tại đây.

03:02.400 --> 03:04.940
Vì vậy, bạn có thể có thêm mã trong đó, mã

03:04.940 --> 03:06.610
này đơn giản là không thực

03:06.610 --> 03:09.470
thi nếu bạn trực tiếp gán một giá trị mới hoặc

03:09.470 --> 03:12.970
thêm một giá trị mới vào mảng bằng dòng này tại đây.

03:12.970 --> 03:16.000
Vì vậy, bạn không muốn cho phép nhân viên

03:16.000 --> 03:19.884
có thể truy cập như thế này từ bên ngoài lớp học.

03:19.884 --> 03:22.340
Và TypeScript đã bảo vệ bạn.

03:22.340 --> 03:26.760
Bạn có thể biến những nhân viên ở đây thành một tài sản riêng,

03:26.760 --> 03:30.580
một lĩnh vực riêng bằng cách thêm từ khóa private

03:30.580 --> 03:32.220
vào trước nó.

03:32.220 --> 03:34.303
Bây giờ điều riêng tư có nghĩa

03:34.303 --> 03:38.030
là các nhân viên hiện là một thuộc tính, chỉ có thể

03:38.030 --> 03:41.210
truy cập được từ bên trong lớp, do đó, từ bên

03:41.210 --> 03:43.480
trong đối tượng sáng tạo.

03:43.480 --> 03:46.700
Vì vậy, bất kỳ phương pháp nào bên trong lớp bộ

03:46.700 --> 03:49.770
phận vẫn có thể hoạt động với nhân viên.

03:49.770 --> 03:52.570
Nhưng bạn không thể truy cập như thế này nữa.

03:52.570 --> 03:54.710
Ở đây bạn thấy tôi đang gặp lỗi.

03:54.710 --> 03:57.280
Nếu tôi cố lưu cái này, tôi sẽ gặp lỗi biên

03:57.280 --> 03:59.870
dịch rằng thuộc tính 'nhân viên' là riêng

03:59.870 --> 04:03.550
tư và chỉ có thể truy cập được trong 'bộ phận' của lớp.

04:03.550 --> 04:07.100
Vì vậy, bây giờ chúng tôi buộc rằng khi nhân viên

04:07.100 --> 04:09.370
được thêm vào bộ phận này, mọi người

04:09.370 --> 04:12.690
phải sử dụng phương thức addEmployee.

04:12.690 --> 04:16.760
Bởi vì họ sẽ gặp lỗi nếu họ viết mã như thế này.

04:16.760 --> 04:20.460
Đây được gọi là công cụ sửa đổi ở đây, từ khóa riêng tư.

04:20.460 --> 04:23.470
Và bên cạnh chế độ riêng tư, chúng tôi cũng có chế độ công khai,

04:23.470 --> 04:25.000
đây là chế độ mặc định.

04:25.000 --> 04:26.590
Bạn không cần thêm public.

04:26.590 --> 04:29.590
Vì vậy, tên như thế này hoàn toàn giống với tên

04:29.590 --> 04:31.650
có công khai ở phía trước.

04:31.650 --> 04:34.300
Sự khác biệt là các thuộc tính công cộng có

04:34.300 --> 04:36.350
thể truy cập được từ bên ngoài.

04:36.350 --> 04:40.350
Vì vậy, ví dụ ở đây, tôi cũng có thể liên hệ để đặt tên

04:40.350 --> 04:43.600
và gán một tên mới ở đây nếu tôi muốn.

04:43.600 --> 04:45.260
Điều đó là có thể.

04:45.260 --> 04:49.270
Đối với tài sản tư nhân, điều này ở đây là không thể.

04:49.270 --> 04:51.580
Chúng ta chỉ có thể sử dụng chúng từ bên trong.

04:51.580 --> 04:52.800
Nhân tiện, về mặt kỹ thuật,

04:52.800 --> 04:55.700
JavaScript không biết công khai và riêng tư.

04:55.700 --> 04:59.630
Chỉ trong các phiên bản rất hiện đại được thêm vào gần đây, một

04:59.630 --> 05:01.320
thứ như vậy mới tồn tại.

05:01.320 --> 05:03.650
Trước đây, JavaScript không biết thuộc

05:03.650 --> 05:05.690
tính riêng tư hay công khai.

05:05.690 --> 05:08.520
Tất cả các tài sản luôn được công khai ở đó.

05:08.520 --> 05:10.630
TypeScript giới thiệu tính năng này,

05:10.630 --> 05:13.561
tuy nhiên, tính năng này không hoạt động trong thời

05:13.561 --> 05:16.620
gian chạy, vì JavaScript cho đến gần đây chỉ biết

05:16.620 --> 05:18.780
các thuộc tính công khai.

05:18.780 --> 05:21.290
Vì vậy, dòng này ở đây, lỗi cố định trong quá

05:21.290 --> 05:23.130
trình biên dịch TypeScript.

05:23.130 --> 05:27.000
Tuy nhiên, nếu bạn biên dịch nó thành JavaScript, mã này sẽ vẫn thực

05:27.000 --> 05:30.140
thi trong thời gian chạy mà không có lỗi vì một lần nữa,

05:30.140 --> 05:32.800
JavaScript của chính nó, cho đến gần đây vẫn

05:32.800 --> 05:34.900
chưa biết đến khái niệm này.

05:34.900 --> 05:37.350
Vì vậy, tùy thuộc vào phiên bản bạn đang biên dịch,

05:37.350 --> 05:38.720
nó vẫn không biết điều đó.

05:38.720 --> 05:40.770
Và do đó, TypeScript chỉ hỗ trợ điều này vì

05:40.770 --> 05:42.980
nó kiểm tra nó trong quá trình biên dịch chứ không

05:42.980 --> 05:44.650
phải trong thời gian chạy.

05:44.650 --> 05:47.370
Tuy nhiên, với nó, chúng ta có thể tránh mã như thế

05:47.370 --> 05:49.863
này và buộc mọi người viết mã sạch hơn.
