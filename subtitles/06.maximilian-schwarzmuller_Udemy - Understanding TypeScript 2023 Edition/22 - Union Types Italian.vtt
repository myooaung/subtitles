WEBVTT

00:02.130 --> 00:02.963
Istruttore: Abbiamo affrontato

00:02.963 --> 00:05.180
un paio di tipi fondamentali che TypeScript conosce.

00:05.180 --> 00:06.590
Ora andiamo avanti.

00:06.590 --> 00:09.140
Per questo, rinominerò l'applicazione. ts qui a objs-arrays-enums,

00:09.140 --> 00:11.670
o qualsiasi altro nome si voglia dare, in modo

00:11.670 --> 00:12.750
da avere ancora quel

00:12.750 --> 00:15.080
file, ma creerò un'applicazione nuova di

00:15.080 --> 00:17.130
zecca. ts, in modo da avere

00:17.130 --> 00:18.860
di nuovo un file vuoto su

00:18.860 --> 00:20.500
cui lavorare.

00:20.500 --> 00:22.550
Ora, in questo file, voglio approfondire

00:22.550 --> 00:25.790
un altro tipo interessante che troverete in TypeScript.

00:25.790 --> 00:28.640
E questo è il tipo di sindacato.

00:28.640 --> 00:30.190
Che cos'è?

00:30.190 --> 00:33.000
Torniamo alla nostra funzione add, che abbiamo scritto

00:33.000 --> 00:34.490
in precedenza, la copierò e

00:34.490 --> 00:37.270
la sposterò in app. ts.

00:37.270 --> 00:39.190
Sbarazzatevi di questo commento qui,

00:39.190 --> 00:42.940
e qui su add, chiudiamo le basi. in modo da eliminare

00:42.940 --> 00:44.170
l'errore.

00:44.170 --> 00:47.970
Qui in add, ora voglio essere più flessibile riguardo

00:47.970 --> 00:49.920
a ciò che accettiamo qui.

00:49.920 --> 00:52.570
Eliminerò anche showResult e phrase,

00:52.570 --> 00:54.370
non ne ho bisogno.

00:54.370 --> 00:55.690
L'unica cosa che voglio

00:55.690 --> 00:58.590
fare è calcolare un risultato e restituirlo.

00:58.590 --> 01:01.960
Ma voglio essere più flessibile per quanto riguarda gli input.

01:01.960 --> 01:06.045
In precedenza, ci siamo assicurati di lavorare solo con i numeri.

01:06.045 --> 01:09.357
Ora diciamo che diamo un nome a questa combinazione che

01:09.357 --> 01:13.190
dovrebbe funzionare sia con i numeri che con le stringhe.

01:13.190 --> 01:15.710
Perché si scopre che possiamo combinare sia

01:15.710 --> 01:18.595
numeri che stringhe con questo operatore plus, l'unica

01:18.595 --> 01:21.650
differenza è che in uno scenario otteniamo un numero

01:21.650 --> 01:24.030
come risultato, nell'altro scenario otteniamo

01:24.030 --> 01:27.120
una stringa concatenata, come in realtà abbiamo già visto

01:27.120 --> 01:30.150
all'inizio di questo modulo.

01:30.150 --> 01:32.040
Ma ora voglio consentire questo comportamento,

01:32.040 --> 01:33.950
perché si potrebbe avere un'applicazione

01:33.950 --> 01:36.740
in cui si vuole avere una funzione di combinazione flessibile

01:36.740 --> 01:38.963
che funzioni con numeri e stringhe.

01:39.830 --> 01:42.360
Pertanto, nominerò anche questo

01:42.360 --> 01:47.340
input1 e questo input2 e combinerò questi due elementi.

01:47.340 --> 01:49.740
Ma ci sarà un problema: in questo momento

01:49.740 --> 01:53.180
abbiamo impostato entrambi i parametri come numeri.

01:53.180 --> 01:56.050
Ciò significa che possiamo chiamare questa funzione,

01:56.050 --> 01:58.190
purché vogliamo lavorare con i numeri.

01:58.190 --> 01:59.130
Diciamo che laggiù stiamo

01:59.130 --> 02:01.640
creando una nuova costante, combinedAges.

02:02.931 --> 02:04.690
E qui chiamo combinare

02:04.690 --> 02:09.602
e passare in 30 e 26 come età in qualsiasi applicazione che

02:09.602 --> 02:12.000
stiamo costruendo.

02:12.000 --> 02:15.014
Un altro log dopo il log della console combinedAges,

02:15.014 --> 02:17.240
beh, non dovrebbe essere troppo sorprendente

02:17.240 --> 02:19.830
che se ora compiliamo questo file e ricarichiamo

02:19.830 --> 02:22.360
questa pagina, otterremo 56.

02:22.360 --> 02:24.690
Quindi funziona, otteniamo questo numero.

02:24.690 --> 02:26.710
Ma naturalmente abbiamo un problema se

02:26.710 --> 02:28.838
cerchiamo di creare una stringa qui.

02:28.838 --> 02:31.610
Nomi combinati, ad esempio.

02:31.610 --> 02:36.033
Se provo a combinare Max e Anna qui, otterremo immediatamente

02:37.230 --> 02:39.630
un errore: Max non è assegnabile

02:39.630 --> 02:42.320
al tipo number, perché questo, ovviamente,

02:42.320 --> 02:44.350
è una stringa.

02:44.350 --> 02:45.790
Naturalmente, potremmo cambiare questa

02:45.790 --> 02:47.750
impostazione per accettare stringhe invece di numeri,

02:47.750 --> 02:50.130
ma la prima chiamata di funzione fallirebbe.

02:50.130 --> 02:52.750
Ed è qui che i sindacalisti possono aiutarci.

02:52.750 --> 02:55.692
Se nella nostra applicazione abbiamo un punto,

02:55.692 --> 02:58.810
sia esso un parametro di una funzione o una costante

02:58.810 --> 03:01.700
o una variabile che stiamo usando da qualche parte,

03:01.700 --> 03:05.030
in cui accettiamo due tipi diversi di valori.

03:05.030 --> 03:07.410
Allora un sindacalista può aiutarci.

03:07.410 --> 03:09.800
Per dire a TypeScript che

03:09.800 --> 03:12.690
ci va bene sia un numero che una stringa,

03:12.690 --> 03:14.220
usiamo numero e poi

03:14.220 --> 03:17.710
il simbolo pipe qui, e poi l'altro tipo

03:17.710 --> 03:20.660
che accettiamo.

03:20.660 --> 03:22.340
E si possono avere più di due tipi,

03:22.340 --> 03:25.220
si possono accettare tutti i tipi di cui si ha bisogno.

03:25.220 --> 03:27.050
In questo caso, però, me ne servono

03:27.050 --> 03:28.880
solo due ed è l'assegnazione del tipo

03:28.880 --> 03:31.720
consentito che sceglierò, numero o stringa.

03:31.720 --> 03:33.690
Ora ricevo un errore: l'operatore

03:33.690 --> 03:35.930
plus non può essere applicato ai tipi

03:35.930 --> 03:39.120
stringa o numero e stringa o numero.

03:39.120 --> 03:41.500
In realtà non è del tutto corretto, dovrebbe

03:41.500 --> 03:44.350
funzionare, perché possiamo usare l'operatore plus

03:44.350 --> 03:46.670
sia con i numeri che con le stringhe.

03:46.670 --> 03:49.600
Ma TypeScript vede solo che abbiamo un tipo

03:49.600 --> 03:52.540
di unione e non analizza cosa c'è nel tipo di

03:52.540 --> 03:56.010
unione, vede solo "Ok, ci si aspetta più tipi".

03:56.010 --> 03:57.530
Forse questo include tipi

03:57.530 --> 03:59.460
in cui non posso usare l'operatore

03:59.460 --> 04:01.640
plus, quindi mi lamenterò qui. Ora, fortunatamente, possiamo aggirare questo problema.

04:01.640 --> 04:05.410
Possiamo aggiungere il nostro controllo di tipo a runtime

04:05.410 --> 04:07.910
e vedere se input1 typeof that è uguale

04:07.910 --> 04:11.240
a number e se typeof input2 è uguale a number, e quindi

04:12.750 --> 04:15.170
spostare questo calcolo lì dentro;

04:16.530 --> 04:21.283
ora solo un miglioramento, creiamo il risultato come variabile all'inizio

04:24.100 --> 04:26.410
di questo controllo if, a causa del

04:26.410 --> 04:28.510
lock scoping, in modo che questa

04:28.510 --> 04:33.880
sia una variabile disponibile nell'intera funzione, e quindi assegniamo un

04:33.880 --> 04:37.873
nuovo valore lì dentro.

04:37.873 --> 04:40.310
Ora verifichiamo se abbiamo due numeri.

04:40.310 --> 04:42.818
E quindi TypeScript sa che qui, input1

04:42.818 --> 04:45.890
e input2 saranno entrambi numeri.

04:45.890 --> 04:49.790
Ora aggiungiamo un altro controllo qui.

04:49.790 --> 04:53.900
E possiamo impostare il risultato come input1. tostring, che converte esplicitamente

04:53.900 --> 04:56.913
in stringa, e

04:58.550 --> 05:00.570
input2. tostring.

05:00.570 --> 05:02.880
E questo andrà bene anche per TypeScript

05:02.880 --> 05:04.160
e JavaScript, perché possiamo concatenare

05:04.160 --> 05:05.700
due stringhe.

05:05.700 --> 05:08.220
Ora abbiamo quasi lo stesso calcolo, ma abbiamo

05:08.220 --> 05:10.800
chiarito che qui lavoreremo sempre con i numeri,

05:10.800 --> 05:12.110
qui lavoreremo sempre

05:12.110 --> 05:13.590
con le stringhe e poi restituiremo

05:13.590 --> 05:15.730
il risultato.

05:15.730 --> 05:17.490
Ora, se registriamo su console

05:17.490 --> 05:20.870
i nomi combinati laggiù e compiliamo questo file,

05:20.870 --> 05:25.350
vedremo che una volta rivisitata la nostra pagina, abbiamo ottenuto

05:25.350 --> 05:27.210
i numeri combinati, che sono

05:27.210 --> 05:29.278
stati semplicemente sommati e

05:29.278 --> 05:31.460
quindi abbiamo ottenuto un numero

05:31.460 --> 05:33.150
come risultato e due nomi

05:33.150 --> 05:35.090
combinati qui.

05:35.090 --> 05:36.850
Ecco come possiamo usare i tipi di unione

05:36.850 --> 05:40.830
per essere più flessibili riguardo a ciò che facciamo in una funzione, ad esempio,

05:40.830 --> 05:43.770
o in qualsiasi altro punto del nostro codice.

05:43.770 --> 05:45.920
Questo controllo extra del tipo in fase di runtime

05:45.920 --> 05:49.520
non sarà sempre necessario quando si lavora con i tipi di unione, ma spesso

05:49.520 --> 05:51.230
lo sarà perché con i tipi di unione

05:51.230 --> 05:54.090
si può essere più flessibili, ad esempio per quanto riguarda

05:54.090 --> 05:56.350
i parametri accettati, ma si potrebbe avere

05:56.350 --> 05:58.170
una logica diversa nella funzione in

05:58.170 --> 06:00.940
base al tipo esatto che si ottiene.

06:00.940 --> 06:03.730
In modo che la funzione sia in grado di lavorare

06:03.730 --> 06:05.640
con più tipi di valori, ma che faccia

06:05.640 --> 06:07.810
cose leggermente diverse a seconda

06:07.810 --> 06:10.320
del tipo di valore ottenuto.

06:10.320 --> 06:12.410
Spesso potrebbe essere necessario un controllo

06:12.410 --> 06:15.270
di runtime quando si lavora con i tipi di unione, ma non sempre

06:15.270 --> 06:16.700
è necessario.

06:16.700 --> 06:18.490
Nei programmi TypeScript si incontreranno

06:18.490 --> 06:20.900
sicuramente anche situazioni in cui è possibile utilizzare

06:20.900 --> 06:24.060
un tipo union senza un controllo di tipo a runtime.

06:24.060 --> 06:25.870
Dipende dalla logica con cui si scrive.
