WEBVTT

00:02.270 --> 00:03.850
Instrutor: Então, estamos

00:03.850 --> 00:07.450
usando os tipos centrais de número, booleano e cordel.

00:07.450 --> 00:10.840
E aqui na lista de parâmetros desta função, estamos

00:10.840 --> 00:13.970
sempre atribuindo explicitamente os tipos com

00:13.970 --> 00:16.540
um dois pontos após o nome do parâmetro,

00:16.540 --> 00:18.410
e depois o nome do tipo.

00:18.410 --> 00:21.350
Portanto, aqui, os nomes são número, booleano, cordel.

00:21.350 --> 00:23.100
E caso você estivesse se perguntando,

00:23.100 --> 00:25.420
estes são agora identificadores especiais.

00:25.420 --> 00:28.530
Esta sintaxe geral, aqui, é uma sintaxe especial que é adicionada

00:28.530 --> 00:30.170
pelo TypeScript.

00:30.170 --> 00:32.900
Não faz parte do código JavaScript compilado.

00:32.900 --> 00:35.040
Se verificarmos esse código aqui, essas

00:35.040 --> 00:37.280
atribuições de tipo desapareceram, porque

00:37.280 --> 00:39.530
o JavaScript não as suporta.

00:39.530 --> 00:42.390
Esta coisa de dois pontos depois de uma variável, ou

00:42.390 --> 00:43.920
depois de um parâmetro.

00:43.920 --> 00:46.320
E depois número e booleano e cordel.

00:46.320 --> 00:48.290
Estas palavras-chave especiais.

00:48.290 --> 00:50.840
Isto é introduzido pelo TypeScript.

00:50.840 --> 00:53.500
O compilador TypeScript o entende.

00:53.500 --> 00:55.480
A IDE aqui suporta TypeScript e, portanto,

00:55.480 --> 00:58.580
não reclama sobre estas palavras-chave especiais.

00:58.580 --> 01:01.760
O JavaScript não entende esta sintaxe.

01:01.760 --> 01:04.590
Ele não entende um dois pontos após um parâmetro, ou um

01:04.590 --> 01:06.560
dois pontos após uma variável, e então

01:06.560 --> 01:09.190
o número especial ou palavra-chave string.

01:09.190 --> 01:11.540
O JavaScript não entende isto e, portanto, isto

01:11.540 --> 01:13.560
não faz parte da saída do JavaScript.

01:13.560 --> 01:15.920
É realmente apenas usado pelo compilador TypeScript.

01:15.920 --> 01:18.130
E então, bem, é um compilador porque

01:18.130 --> 01:21.820
converte este código para código JavaScript.

01:21.820 --> 01:24.880
Nota lateral, você também vê que ele troca constante por

01:24.880 --> 01:27.700
var, mas isso é algo ao qual voltarei mais tarde.

01:27.700 --> 01:30.590
Portanto, temos aqui nossas atribuições de tipo explícitas

01:30.590 --> 01:33.060
e isso só é entendido pelo TypeScript.

01:33.060 --> 01:35.763
Ótimo, por que não os temos lá embaixo?

01:36.880 --> 01:39.890
Não tenho aqui atribuições de tipo explícitas.

01:39.890 --> 01:41.180
E, a propósito, também não

01:41.180 --> 01:43.450
aqui quando calculamos o resultado, por exemplo,

01:43.450 --> 01:45.530
porque o TypeScript tem um recurso embutido

01:45.530 --> 01:48.400
que é chamado de inferência de tipo.

01:48.400 --> 01:51.000
Isto significa que o TypeScript faz o

01:51.000 --> 01:53.010
seu melhor, e faz um bom trabalho

01:53.010 --> 01:56.400
lá, para entender que tipo você tem em uma determinada

01:56.400 --> 01:58.860
variável ou constante.

01:58.860 --> 02:02.300
E aqui, por exemplo, compreende que o número1

02:02.300 --> 02:05.780
será sempre do tipo número no final, porque você

02:05.780 --> 02:08.020
o inicializa com um número.

02:08.020 --> 02:09.950
Agora, isto na verdade é uma constante, portanto

02:09.950 --> 02:11.740
é ainda mais específico do que isso.

02:11.740 --> 02:15.350
E o tipo que ele identifica aqui não é um número qualquer,

02:15.350 --> 02:17.490
é o número cinco.

02:17.490 --> 02:20.110
Porque você não poderá atribuir um novo número,

02:20.110 --> 02:23.870
ou um novo valor a um valor constante de qualquer forma.

02:23.870 --> 02:25.840
Se você mudasse isto para uma variável,

02:25.840 --> 02:28.460
então se você usasse let em vez disso, então, claro,

02:28.460 --> 02:30.180
isto não quebraria nada.

02:30.180 --> 02:32.940
Podemos usar uma variável ali, pode não ser a melhor prática

02:32.940 --> 02:34.540
porque este valor nunca muda, mas

02:34.540 --> 02:36.210
também não é horrível.

02:36.210 --> 02:38.260
Mas agora se pairarmos sobre isto, vemos que

02:38.260 --> 02:41.210
o TypeScript não diz, está bem, isto tem que ser um cinco.

02:41.210 --> 02:45.510
Mas ainda assim detecta que o tipo aqui é um número.

02:45.510 --> 02:49.260
Agora, nós poderíamos absolutamente escrever este código aqui por nossa conta.

02:49.260 --> 02:51.970
Podemos adicionar dois pontos após o nome da variável

02:51.970 --> 02:53.870
no lado esquerdo do sinal de igual,

02:53.870 --> 02:55.590
e depois o nome do tipo.

02:55.590 --> 02:56.880
Portanto, basicamente o

02:56.880 --> 02:59.470
mesmo que fizemos nos parâmetros desta função.

02:59.470 --> 03:01.860
Mas, isto é redundante e também não

03:01.860 --> 03:04.620
é considerado como uma boa prática.

03:04.620 --> 03:06.790
Porque o TypeScript é capaz de inferir

03:06.790 --> 03:09.990
perfeitamente este tipo a partir daí.

03:09.990 --> 03:13.690
Portanto, atribuir isto não é uma boa idéia.

03:13.690 --> 03:16.420
Isto só muda se você criar esta variável de uma

03:16.420 --> 03:18.053
forma não atribuída.

03:19.000 --> 03:22.130
Assim, se você não o inicializar imediatamente.

03:22.130 --> 03:25.700
Então, é uma boa prática dizer ao TypeScript qual

03:25.700 --> 03:29.070
valor será eventualmente armazenado ali.

03:29.070 --> 03:32.590
Para que, mais tarde, você lhe atribua um valor, e é claro que aqui é

03:32.590 --> 03:34.080
um pouco redundante dividir

03:34.080 --> 03:35.320
isso em duas linhas.

03:35.320 --> 03:37.800
Estou fazendo isso apenas para fins de demonstração.

03:37.800 --> 03:39.480
Mas agora se eu atribuir isto aqui,

03:39.480 --> 03:42.460
isto quebra porque eu disse antecipadamente ao TypeScript

03:42.460 --> 03:44.630
que isto será do tipo número.

03:44.630 --> 03:45.610
Você não tem que fazer isso.

03:45.610 --> 03:47.420
Também funciona se você não fizer isso.

03:47.420 --> 03:50.330
Mas agora você também poderia adicionar estes cinco

03:50.330 --> 03:51.630
e não receberia um erro

03:51.630 --> 03:53.470
porque você não está dizendo nada

03:53.470 --> 03:55.350
sobre o tipo que será armazenado

03:55.350 --> 03:56.975
nesta variável e, portanto,

03:56.975 --> 03:59.630
o TypeScript permite qualquer tipo.

03:59.630 --> 04:02.600
Se ao invés disso você acrescentar o número de dois pontos aqui,

04:02.600 --> 04:05.417
você estará dizendo ao TypeScript: "Ei, eventualmente,

04:05.417 --> 04:07.370
"um número será armazenado ali". E, portanto, se mais tarde você armazenar

04:07.370 --> 04:10.060
outra coisa ali, como neste caso onde armazenamos uma

04:10.060 --> 04:12.470
string, você receberá um erro aqui na IDE, e, claro,

04:12.470 --> 04:15.170
também se você compilou seu código.

04:15.170 --> 04:17.570
Vamos receber o erro que já vimos antes.

04:17.570 --> 04:20.253
Assim, é assim que você pode atribuir tipos.

04:22.300 --> 04:24.920
Agora, mesmo que o TypeScript apenas inferisse um tipo,

04:24.920 --> 04:27.830
e deixe-me corrigir isso, ele irá gritar com você se você quebrar

04:27.830 --> 04:29.310
esse tipo inferido.

04:29.310 --> 04:32.720
Na verdade, é errado dizer que mesmo porque,

04:32.720 --> 04:35.670
é claro que sim, por que não faria isso?

04:35.670 --> 04:37.000
A inferência de tipo existe para você salvar

04:37.000 --> 04:39.750
seu código, para evitar que você tenha que atribuir manualmente um tipo.

04:39.750 --> 04:42.730
É claro que o TypeScript grita para você se depois

04:42.730 --> 04:44.520
você usar um tipo errado, um

04:44.520 --> 04:46.510
tipo que ele não inferiu.

04:46.510 --> 04:48.640
Por exemplo, aqui se o resultadoPhrase

04:48.640 --> 04:52.460
é criado com let para que seja variável, então o TypeScript aqui

04:52.460 --> 04:54.000
infere que este será do tipo

04:54.000 --> 04:57.670
string porque nós o inicializamos com uma string.

04:57.670 --> 04:59.850
Portanto, isto é basicamente o equivalente

04:59.850 --> 05:03.060
a não inicializar, e definir o tipo por conta própria, e depois

05:03.060 --> 05:04.970
atribuir um valor mais tarde.

05:04.970 --> 05:07.410
Agora, se mudarmos o resultadoFrase para,

05:07.410 --> 05:12.310
digamos, zero aqui, por qualquer razão que possamos querer fazer isso, bem, então

05:12.310 --> 05:15.660
recebemos um erro aqui que o tipo zero não é atribuível

05:15.660 --> 05:17.330
do tipo string.

05:17.330 --> 05:21.210
E isso faz sentido, certo?

05:21.210 --> 05:22.690
O TypeScript inferiu que queremos

05:22.690 --> 05:25.430
armazenar um fio, agora estamos tentando armazenar um

05:25.430 --> 05:27.290
número, recebemos um erro.

05:27.290 --> 05:28.530
Esse é o trabalho, a tarefa principal do TypeScript.

05:28.530 --> 05:33.000
Verificar os tipos e gritar conosco se estivermos usando-os

05:33.000 --> 05:35.280
incorretamente.
