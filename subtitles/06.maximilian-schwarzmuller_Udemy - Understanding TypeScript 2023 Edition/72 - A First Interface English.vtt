WEBVTT

1
00:00:02.802 --> 00:00:04.030
<v Instructor>Now that we covered classes,</v>

2
00:00:04.030 --> 00:00:05.910
let's have a look at interfaces.

3
00:00:05.910 --> 00:00:09.510
We are going to rename the app ts file to classes

4
00:00:09.510 --> 00:00:11.230
and add a new app ts file,

5
00:00:11.230 --> 00:00:13.730
while hereafter will be compiled to app js.

6
00:00:13.730 --> 00:00:15.130
And in this app ts file,

7
00:00:15.130 --> 00:00:17.026
we'll now dive into interfaces.

8
00:00:17.026 --> 00:00:19.850
What is an interface?

9
00:00:19.850 --> 00:00:21.640
Well, in its simplest version,

10
00:00:21.640 --> 00:00:25.470
an interface describes the structure of an object.

11
00:00:25.470 --> 00:00:28.502
We can use it to describe how an object should look like.

12
00:00:28.502 --> 00:00:29.856
Let me show you an example.

13
00:00:29.856 --> 00:00:32.990
We create an interface with the interface keyword,

14
00:00:32.990 --> 00:00:37.510
which only exists in typescript, not in vanilla JavaScript.

15
00:00:37.510 --> 00:00:39.600
Now let's name it person.

16
00:00:39.600 --> 00:00:41.140
Again, just like in a class,

17
00:00:41.140 --> 00:00:43.150
I start with a capital character,

18
00:00:43.150 --> 00:00:46.820
not a must do but a recommendation and a convention.

19
00:00:46.820 --> 00:00:47.910
Now in there,

20
00:00:47.910 --> 00:00:51.160
we can define how a person object should look like.

21
00:00:51.160 --> 00:00:52.480
Now unlike a class,

22
00:00:52.480 --> 00:00:54.930
we'll not use this as a blueprint, however.

23
00:00:54.930 --> 00:00:57.543
Just as a custom type, we could say.

24
00:00:58.490 --> 00:01:00.690
Here, you could say a person could have a name,

25
00:01:00.690 --> 00:01:01.860
which is of type string,

26
00:01:01.860 --> 00:01:04.300
and an age which is of type number.

27
00:01:04.300 --> 00:01:05.140
As you can see here,

28
00:01:05.140 --> 00:01:08.020
I add properties or field definitions,

29
00:01:08.020 --> 00:01:09.970
where I have the names of the properties

30
00:01:09.970 --> 00:01:13.440
and the types of the values that'll be stored in there.

31
00:01:13.440 --> 00:01:16.560
What we don't have here are the concrete values.

32
00:01:16.560 --> 00:01:17.730
So we don't have this.

33
00:01:17.730 --> 00:01:20.510
And if we were to try and assign a default value here,

34
00:01:20.510 --> 00:01:21.810
we would get an error

35
00:01:21.810 --> 00:01:25.290
that an interface cannot have an initializer.

36
00:01:25.290 --> 00:01:27.540
So we can just define the structure,

37
00:01:27.540 --> 00:01:29.610
not the concrete values.

38
00:01:29.610 --> 00:01:32.930
We can also add a method here, greet for example.

39
00:01:32.930 --> 00:01:34.470
Now just as with properties,

40
00:01:34.470 --> 00:01:37.440
we don't add the actual method here though

41
00:01:37.440 --> 00:01:39.610
but just the structure,

42
00:01:39.610 --> 00:01:41.020
the description so to speak.

43
00:01:41.020 --> 00:01:42.670
How it should look like.

44
00:01:42.670 --> 00:01:46.600
And to define a method which a person object should have,

45
00:01:46.600 --> 00:01:49.470
we add the name of the method, then parentheses,

46
00:01:49.470 --> 00:01:50.920
then return type.

47
00:01:50.920 --> 00:01:52.210
For example, white,

48
00:01:52.210 --> 00:01:53.260
and in parentheses

49
00:01:53.260 --> 00:01:55.310
you could have any arguments you wanna have.

50
00:01:55.310 --> 00:01:57.740
Like a phrase which should be a type.

51
00:01:57.740 --> 00:02:01.920
Again, just the name of the argument and then the type.

52
00:02:01.920 --> 00:02:03.610
Then the return type of the method.

53
00:02:03.610 --> 00:02:06.450
Of course, you don't have to add parameters.

54
00:02:06.450 --> 00:02:09.080
What can we now do with this person interface?

55
00:02:09.080 --> 00:02:11.360
What's the idea behind it?

56
00:02:11.360 --> 00:02:12.610
Well, we can now use this

57
00:02:12.610 --> 00:02:14.810
to type check an object, for example.

58
00:02:14.810 --> 00:02:18.020
We could have a variable, user one,

59
00:02:18.020 --> 00:02:19.130
and let's say

60
00:02:19.130 --> 00:02:22.620
for some reason we don't initialize immediately.

61
00:02:22.620 --> 00:02:25.660
We just wanna eventually store an object in there,

62
00:02:25.660 --> 00:02:28.490
which has this structure.

63
00:02:28.490 --> 00:02:30.710
Then we can assign a type to user one,

64
00:02:30.710 --> 00:02:31.830
which could be person.

65
00:02:31.830 --> 00:02:34.604
We can use our interface as a type.

66
00:02:34.604 --> 00:02:38.410
And now when I assign a value to user one,

67
00:02:38.410 --> 00:02:39.730
it has to be an object

68
00:02:39.730 --> 00:02:42.780
because interfaces are used to define objects.

69
00:02:42.780 --> 00:02:45.560
And it has to be an object with a name property,

70
00:02:45.560 --> 00:02:47.190
which must hold a string,

71
00:02:47.190 --> 00:02:49.850
an age property, which must hold a number,

72
00:02:49.850 --> 00:02:53.102
and a greet method which must take a phrase argument

73
00:02:53.102 --> 00:02:56.920
and then also return nothing.

74
00:02:56.920 --> 00:02:57.830
Here in this object,

75
00:02:57.830 --> 00:02:59.360
we can add a name.

76
00:02:59.360 --> 00:03:00.730
Max, for example.

77
00:03:00.730 --> 00:03:03.010
Now here we add the concrete value

78
00:03:03.010 --> 00:03:06.310
and it has to be of that type defined up there.

79
00:03:06.310 --> 00:03:08.160
Now separated with a comma,

80
00:03:08.160 --> 00:03:11.110
and that's a difference from our interface definition.

81
00:03:11.110 --> 00:03:16.110
There we separate our keys and properties with semi-colons.

82
00:03:16.470 --> 00:03:18.430
But down there, when we create our object,

83
00:03:18.430 --> 00:03:21.390
just as in vanilla JavaScript we use a comma.

84
00:03:21.390 --> 00:03:25.570
Then an age, and of course, also the greet method.

85
00:03:25.570 --> 00:03:27.550
Now the greet method, as you learned,

86
00:03:27.550 --> 00:03:32.020
has to be a method which takes one parameter, phrase,

87
00:03:32.020 --> 00:03:33.790
which has to be a string,

88
00:03:33.790 --> 00:03:36.134
and where I then want to console log

89
00:03:36.134 --> 00:03:41.134
phrase plus some white space plus this.name.

90
00:03:41.210 --> 00:03:43.930
This could be one implementation of the greet method.

91
00:03:43.930 --> 00:03:45.670
Now what's in there doesn't matter.

92
00:03:45.670 --> 00:03:48.210
Its just important that we have this one parameter,

93
00:03:48.210 --> 00:03:49.270
which is a string,

94
00:03:49.270 --> 00:03:51.290
and that we return nothing.

95
00:03:51.290 --> 00:03:54.090
Now this would be a valid user one object

96
00:03:54.090 --> 00:03:58.150
because it satisfies this definition of our interface.

97
00:03:58.150 --> 00:03:59.040
Therefore, of course,

98
00:03:59.040 --> 00:04:00.940
we can now for example call greet

99
00:04:00.940 --> 00:04:04.020
and say hi there, I am,

100
00:04:04.020 --> 00:04:06.220
and thereafter we should print name.

101
00:04:06.220 --> 00:04:08.300
If now save that and then reload,

102
00:04:08.300 --> 00:04:10.330
we see hi there I am Max.

103
00:04:10.330 --> 00:04:12.840
And that's coming from our greet method.

104
00:04:12.840 --> 00:04:14.090
This is an interface.

105
00:04:14.090 --> 00:04:18.280
It allows us to define the structure of an object.

106
00:04:18.280 --> 00:04:21.140
We can use it as a type to type check

107
00:04:21.140 --> 00:04:24.453
for objects that must have this structure.

