WEBVTT

00:02.110 --> 00:03.890
Instructeur : Donc maintenant, après

00:03.890 --> 00:07.820
toutes ces fonctionnalités où nous avons travaillé avec les types eux-mêmes,

00:07.820 --> 00:10.340
pour ainsi dire, où nous avons travaillé sur les types

00:10.340 --> 00:13.880
de vérification, les types de coût, revenons aux fonctionnalités qui nous

00:13.880 --> 00:16.110
aident à monter un code flexible.

00:16.110 --> 00:17.930
Bien sûr, on écrit toujours les deux types.

00:17.930 --> 00:20.150
Il s'agit de typescript après tout, mais pas

00:20.150 --> 00:23.520
tellement axé sur les types, maintenant nous pouvons les gérer.

00:23.520 --> 00:25.830
Et pour cela, je vais commencer par les types d'index,

00:25.830 --> 00:29.040
une fonctionnalité qui nous permet de créer des objets plus flexibles

00:29.040 --> 00:31.150
en ce qui concerne les propriétés qu'ils peuvent

00:31.150 --> 00:33.010
contenir.

00:33.010 --> 00:34.485
Qu'est-ce que je veux dire par là ?

00:34.485 --> 00:36.813
Disons que vous écrivez une application dans

00:36.813 --> 00:39.680
laquelle vous validez une entrée utilisateur.

00:39.680 --> 00:41.810
Vous avez donc plusieurs champs de saisie

00:41.810 --> 00:44.603
et, en fonction de ce que l'utilisateur saisit et du

00:44.603 --> 00:46.682
champ en question, vous pouvez stocker

00:46.682 --> 00:50.490
et éventuellement afficher différents messages d'erreur.

00:50.490 --> 00:52.520
Par exemple, s'il s'agit d'un champ de courrier électronique,

00:52.520 --> 00:54.360
vous voulez vérifier qui est dans le courrier

00:54.360 --> 00:55.590
électronique et si ce n'est pas

00:55.590 --> 00:59.830
le cas, vous voulez ajouter un message d'erreur approprié au conteneur d'erreur.

00:59.830 --> 01:01.133
C'est donc par là que je vais commencer.

01:01.133 --> 01:06.133
Je vais avoir mon conteneur d'erreurs d'interface ici.

01:07.570 --> 01:09.530
Et cela devrait être un objet, d'où l'utilisation

01:09.530 --> 01:11.400
d'une interface ici, mais il devrait

01:11.400 --> 01:14.090
être flexible quant à ce qu'il contient.

01:14.090 --> 01:15.680
En fin de compte, mon objectif est

01:15.680 --> 01:17.692
qu'avec cela nous puissions traiter les objets

01:17.692 --> 01:20.782
où nous avons un identifiant d'erreur, qui pourrait être l'idéal

01:20.782 --> 01:23.700
si le champ de saisie auquel l'erreur appartient.

01:23.700 --> 01:26.581
Par exemple, l'email. Et ensuite une chaîne

01:26.581 --> 01:31.581
d'erreur, un email non valide. Et puis nous avons une autre propriété.

01:32.130 --> 01:35.610
Disons le nom d'utilisateur et une chaîne d'erreur

01:35.610 --> 01:37.150
pourrait être stockée

01:37.150 --> 01:39.280
dans ce champ de saisie si celui-ci

01:39.280 --> 01:41.611
est incorrect.

01:41.611 --> 01:45.770
Doit commencer par un caractère.

01:45.770 --> 01:49.170
Quelque chose comme ça devrait être stocké dans cet objet.

01:49.170 --> 01:51.992
Le problème, c'est que je ne sais pas à l'avance quels

01:51.992 --> 01:55.320
seront les noms exacts des propriétés que nous aurons là.

01:55.320 --> 01:58.021
Vous pourriez dire, eh bien nous aurons l'email et le nom d'utilisateur,

01:58.021 --> 02:01.650
mais pour ma part, je veux que ce soit un conteneur flexible.

02:01.650 --> 02:03.150
Je veux pouvoir l'utiliser sur

02:03.150 --> 02:05.350
n'importe quel formulaire de ma page Web.

02:05.350 --> 02:07.560
Et je pourrais avoir différents formulaires avec

02:07.560 --> 02:10.157
différentes entrées avec différents identifiants.

02:10.157 --> 02:12.741
Je ne veux donc pas me limiter à nos

02:12.741 --> 02:16.150
erreurs d'email et de nom d'utilisateur.

02:16.150 --> 02:18.461
De plus, même si nous n'avons toujours eu que des entrées

02:18.461 --> 02:20.859
d'email et de nom d'utilisateur et que nous voulons

02:20.859 --> 02:23.291
juste stocker les erreurs pour celles-ci.

02:23.291 --> 02:27.461
Que faire si l'email est invalide et non le nom d'utilisateur ?

02:27.461 --> 02:30.912
Bien sûr, dans cet objet, nous pourrions stocker null comme valeur pour

02:30.912 --> 02:34.421
un nom d'utilisateur, mais j'aimerais simplement l'omettre.

02:34.421 --> 02:37.232
Ainsi, avons-nous un objet qui ne contient que des

02:37.232 --> 02:40.419
propriétés pour les entrées où nous avons une erreur ?

02:40.419 --> 02:42.960
Ainsi, nous pouvons également parcourir cet objet en

02:42.960 --> 02:46.260
boucle avec une boucle de quatre pour lire toutes les erreurs que nous

02:46.260 --> 02:48.200
avons obtenues par exemple et ne pas avoir

02:48.200 --> 02:51.112
de propriétés qui ne stockent pas réellement une erreur.

02:51.112 --> 02:53.261
Pour résumer, j'ai besoin d'un objet

02:53.261 --> 02:56.861
dont le type de valeur est assez clair pour moi.

02:56.861 --> 03:00.260
Il devrait s'agir d'une chaîne de caractères, mais là, je

03:00.260 --> 03:02.190
n'avance pas le nombre de propriétés

03:02.190 --> 03:05.320
que j'aurai et le nom que ces propriétés auront.

03:05.320 --> 03:08.171
Et pour un tel scénario, nous pouvons utiliser des types d'index.

03:08.171 --> 03:10.760
Vous définissez un type d'index en utilisant des crochets ici.

03:10.760 --> 03:14.730
Rappelez-vous que normalement nous devrions écrire le nom de la propriété ici, mais maintenant

03:14.730 --> 03:16.280
nous utilisons des crochets.

03:16.280 --> 03:21.280
Ensuite, n'importe quel nom de votre choix, par exemple clé ou accessoire.

03:23.581 --> 03:28.581
Puis, un deux-points. Et ensuite le type de valeur de la propriété.

03:29.010 --> 03:30.010
Et puis un objet.

03:30.010 --> 03:33.760
Vous ne pouvez pas avoir de chaînes de caractères, de nombres ou de symboles comme propriété.

03:33.760 --> 03:37.660
Par exemple, vous ne pouvez pas utiliser de booléen ici. Ce n'est pas autorisé.

03:37.660 --> 03:40.504
Mais vous pouvez utiliser une chaîne ici.

03:40.504 --> 03:43.190
Cela signifie simplement que tout objet que je construirai

03:43.190 --> 03:46.330
ultérieurement sur la base de cette interface de conteneur

03:46.330 --> 03:51.083
d'erreurs devra avoir des propriétés, qui sont des chaînes de caractères.

03:52.120 --> 03:53.928
Le nom d'utilisateur, par exemple, sera une chaîne de caractères

03:53.928 --> 03:55.899
valide même si je ne le mets pas entre guillemets.

03:55.899 --> 03:59.980
Ensuite, nous ajoutons un deux-points. Et ensuite le type de valeur, qui est une chaîne

03:59.980 --> 04:01.629
de caractères. Donc avec ça, je dis

04:01.629 --> 04:04.320
que je ne connais pas le nom exact de la propriété.

04:04.320 --> 04:07.620
Je ne connais pas non plus le nombre de propriétés.

04:07.620 --> 04:10.608
Je sais juste que chaque propriété qui est ajoutée à cet objet, qui

04:10.608 --> 04:13.459
est basé sur le conteneur d'erreurs, doit avoir un nom de propriété

04:13.459 --> 04:16.959
qui peut être interprété comme une chaîne de caractères et la valeur de la propriété

04:16.959 --> 04:23.080
doit également être une chaîne de caractères.

04:23.080 --> 04:23.080
C'est ce que je dis ici.

04:23.080 --> 04:28.080
Maintenant, avec cela, nous pouvons également ajouter des propriétés prédéfinies,

04:29.560 --> 04:31.906
cependant, seulement si elles sont du

04:31.906 --> 04:35.339
même type que ceci ici. Nous pourrions donc ajouter un ID qui est un type de chaîne de caractères.

04:35.339 --> 04:39.760
Et ensuite, tout objet que nous construisons et qui adhère à cette interface doit avoir

04:39.760 --> 04:43.360
une propriété ID et peut ajouter autant d'autres propriétés qu'il le souhaite,

04:43.360 --> 04:47.370
mais nous ne pouvons pas définir ID à un nombre ici, par exemple, parce que nous avons

04:47.370 --> 04:49.277
un type d'index ici.

04:49.277 --> 04:53.033
C'est donc une restriction que nous avons si nous construisons un tel objet.

04:55.240 --> 04:56.550
Alors maintenant, quelle est la conséquence ?

04:56.550 --> 05:00.080
Maintenant nous pouvons créer un sac d'erreur par exemple qui est

05:00.080 --> 05:02.390
de type conteneur d'erreur qui est donc un

05:02.390 --> 05:05.150
objet et il serait valide comme ceci parce que nous

05:05.150 --> 05:07.440
n'avons pas à ajouter de propriétés.

05:07.440 --> 05:10.340
C'est tout ce qui est valable. Mais bien sûr, nous pouvons maintenant en ajouter.

05:10.340 --> 05:13.380
Par exemple, l'email n'est pas un email valide.

05:13.380 --> 05:15.780
Et c'est bon. Ce ne serait pas correct si j'attribuais

05:15.780 --> 05:17.093
plutôt un nombre ici, car nous

05:17.093 --> 05:19.133
disons que chaque propriété doit avoir un type

05:19.133 --> 05:23.001
de valeur de type chaîne. Nous devons donc utiliser une chaîne de caractères ici.

05:23.001 --> 05:25.940
Si j'utilise un nombre ici, cela fonctionnera car il peut également

05:25.940 --> 05:28.610
être interprété comme une chaîne de caractères.

05:28.610 --> 05:30.883
Je peux donc aussi utiliser un nombre comme type de clé

05:30.883 --> 05:33.031
ici si je le souhaite. Je suis assez libre quant

05:33.031 --> 05:35.981
à ce que j'utilise ici. Si vous pouviez changer

05:35.981 --> 05:40.981
le type d'accessoire en numéro, alors vous pourriez le faire et ce serait

05:42.130 --> 05:44.810
correct. Mais ce ne serait pas le cas,

05:44.810 --> 05:46.470
car l'email n'est pas un numéro.

05:46.470 --> 05:48.170
Cela ne peut pas être converti en un nombre.

05:48.170 --> 05:51.550
Il peut être traité comme une chaîne de caractères, mais pas comme un nombre.

05:51.550 --> 05:54.870
C'est ainsi que vous contrôlez le type de propriétés, ou les noms

05:54.870 --> 05:56.990
de propriétés, que vous autorisez.

05:56.990 --> 05:59.493
Et ici, j'en ai fait un pour permettre les noms de propriétés de type chaîne.

05:59.493 --> 06:02.264
Ainsi, tout ce qui peut être converti en chaîne de caractères est

06:02.264 --> 06:04.740
un nom de propriété valide. Et la valeur doit aussi être

06:04.740 --> 06:06.413
une chaîne de caractères.

06:06.413 --> 06:08.021
Et comme je l'ai dit, bien sûr, nous

06:08.021 --> 06:10.632
pouvons maintenant ajouter plusieurs valeurs ici,

06:10.632 --> 06:12.830
plusieurs valeurs je devrais dire.

06:12.830 --> 06:17.263
Doit commencer par une majuscule.

06:18.170 --> 06:21.220
Voici donc un sac d'erreurs que nous pouvons construire à l'aide

06:21.220 --> 06:22.722
du conteneur d'erreurs, qui nous

06:22.722 --> 06:25.392
donne cette flexibilité supplémentaire : nous n'avons

06:25.392 --> 06:27.522
pas besoin de savoir à l'avance quels noms

06:27.522 --> 06:30.740
de propriétés nous voulons utiliser et combien de propriétés

06:30.740 --> 06:32.653
nous avons besoin.
