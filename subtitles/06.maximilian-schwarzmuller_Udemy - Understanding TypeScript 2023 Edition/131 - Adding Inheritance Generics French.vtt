WEBVTT

00:02.410 --> 00:04.290
Instructeur : Il est donc temps de faire de

00:04.290 --> 00:06.370
l'héritage et de créer une classe de base.

00:06.370 --> 00:09.189
Je veux ajouter une classe de base, qui a essentiellement

00:09.189 --> 00:12.090
templateElement, hostElement, un élément en elle, qui fait

00:12.090 --> 00:15.430
ce travail de sélection des éléments dans le dom, qui a la méthode attach,

00:15.430 --> 00:16.810
dont nous avons toujours besoin,

00:16.810 --> 00:18.520
et ainsi de suite.

00:18.520 --> 00:22.540
Il gère donc toutes ces fonctionnalités partagées, que

00:22.540 --> 00:26.630
nos classes qui rendent réellement quelque chose au domaine

00:26.630 --> 00:28.220
ont en commun.

00:28.220 --> 00:30.880
Donc pour cela, au-dessus de mon ProjectInput,

00:30.880 --> 00:35.650
et aussi de la classe ProjectList, donc essentiellement ici, je vais ajouter

00:35.650 --> 00:38.250
la classe de base du composant.

00:38.250 --> 00:41.540
Maintenant, le nom vous appartient, mais je vais l'appeler Component,

00:41.540 --> 00:44.090
parce que vous connaissez peut-être ce terme de React ou

00:44.090 --> 00:45.870
Angular, si vous travaillez avec cela,

00:45.870 --> 00:47.590
et même si vous n'avez pas travaillé avec

00:47.590 --> 00:49.873
cela, vous pouvez penser à ces classes comme UI, composants

00:50.770 --> 00:53.950
d'interface utilisateur, que vous rendez à l'écran.

00:53.950 --> 00:57.950
Et chaque composant est en fin de compte un objet pouvant être rendu, qui possède

00:57.950 --> 00:59.970
certaines fonctionnalités permettant

00:59.970 --> 01:01.370
de le rendre.

01:01.370 --> 01:05.260
Ensuite, les instances concrètes, ou les classes héritées, ajoutent

01:05.260 --> 01:10.260
des fonctionnalités supplémentaires dont ce composant spécifique a besoin.

01:10.300 --> 01:14.370
Alors, qu'est-ce qui entre dans la classe des composants généraux ?

01:14.370 --> 01:17.590
Eh bien, je dirais ces trois éléments pour sûr.

01:17.590 --> 01:21.390
templateElement, hostElement et element.

01:21.390 --> 01:23.590
Cependant, nous avons ici un problème

01:23.590 --> 01:25.470
concernant les types.

01:25.470 --> 01:28.320
Le templateElement sera toujours un HTMLTemplateElement,

01:29.160 --> 01:31.980
mais le hostElement ne doit pas toujours être un div, par

01:31.980 --> 01:35.410
exemple, lorsque nous ajouterons une classe d'élément de projet,

01:35.410 --> 01:37.160
nous le rendrons dans une ProjectList,

01:37.160 --> 01:40.550
et pas directement même notre div racine ici, donc ce n'est pas toujours

01:40.550 --> 01:42.360
un div.

01:42.360 --> 01:45.220
Et ici, eh bien, c'est toujours un HTMLElement, on peut

01:45.220 --> 01:47.040
certainement s'entendre là-dessus,

01:47.040 --> 01:50.540
mais, comme dans le cas de la classe ProjectInput, nous savons en

01:50.540 --> 01:52.560
fait que c'est une forme spécifique de

01:52.560 --> 01:55.230
celle-ci, c'est un HTMLFormElement.

01:55.230 --> 01:57.540
Nous perdrions donc ces informations

01:57.540 --> 02:00.320
supplémentaires si nous nous limitions à toujours

02:00.320 --> 02:02.130
avoir un HTMLElement, sans stocker

02:02.130 --> 02:05.220
d'informations plus spécifiques.

02:05.220 --> 02:07.690
Alors comment pouvons-nous contourner cela ?

02:07.690 --> 02:10.050
Eh bien, en n'utilisant pas seulement l'héritage,

02:10.050 --> 02:12.920
mais en créant une classe générique ici, où lorsque

02:12.920 --> 02:15.230
nous héritons d'elle, nous pouvons définir

02:15.230 --> 02:17.680
les types concrets.

02:17.680 --> 02:20.940
Pour cela, nous ajoutons des crochets après le nom de la

02:20.940 --> 02:23.550
classe, puis deux identifiants de notre choix,

02:23.550 --> 02:26.690
comme T et U, qui seraient des choix courants.

02:26.690 --> 02:30.110
Et maintenant, nous pouvons également ajouter quelques

02:30.110 --> 02:34.820
contraintes ici, et dire que T sera certainement une sorte de HTMLElement.

02:34.820 --> 02:36.770
Il peut s'agir d'un simple HTMLElement, ou

02:36.770 --> 02:38.970
d'une version plus spécifique de celui-ci.

02:38.970 --> 02:41.870
Et il en va de même pour U.

02:41.870 --> 02:44.780
Et puis ici, nous savons que le hostElement sera de type

02:44.780 --> 02:46.690
T, et que l'élément sera de type U.

02:46.690 --> 02:48.660
Et maintenant, chaque fois que nous héritons de cette

02:48.660 --> 02:50.970
classe, nous pouvons spécifier les types concrets, de sorte que

02:50.970 --> 02:52.930
nous pouvons travailler avec différents types dans

02:52.930 --> 02:54.780
les différents endroits où nous héritons.

02:56.050 --> 02:58.053
Maintenant, ajoutons aussi un constructeur ici.

02:58.910 --> 03:01.080
Dans ce constructeur, nous aurons besoin

03:01.080 --> 03:03.060
d'un peu d'information.

03:03.060 --> 03:05.950
Nous devons connaître l'ID de notre modèle, afin de

03:05.950 --> 03:08.030
savoir comment le sélectionner, et

03:08.030 --> 03:09.750
cela doit être une chaîne.

03:09.750 --> 03:11.590
Nous devons connaître le hostElementId,

03:11.590 --> 03:13.050
qui doit également être une chaîne,

03:13.050 --> 03:15.833
afin de savoir où rendre ce composant.

03:17.440 --> 03:20.505
Et je veux également obtenir un newElementId, de sorte que nous

03:20.505 --> 03:22.590
obtenions un ID qui doit être attribué à l'élément

03:22.590 --> 03:24.350
nouvellement rendu.

03:24.350 --> 03:26.020
Cette option est toutefois facultative,

03:26.020 --> 03:28.210
ce que je signale en ajoutant un point d'interrogation

03:28.210 --> 03:29.690
après le paramètre.

03:29.690 --> 03:31.940
L'alternative serait d'accepter également

03:31.940 --> 03:34.050
undefined ici comme type, mais je vais juste

03:34.050 --> 03:36.470
utiliser le point d'interrogation.

03:36.470 --> 03:38.510
Et maintenant, avec cela dans le constructeur,

03:38.510 --> 03:39.793
nous pouvons, fondamentalement,

03:40.640 --> 03:42.083
obtenir ce code ici, et le mettre

03:43.810 --> 03:46.950
dans notre constructeur de la classe Component, de sorte que

03:46.950 --> 03:48.940
nous stockons le templateElement, mais,

03:48.940 --> 03:52.060
bien sûr, maintenant l'ID, que nous obtenons ici, est ce templateId,

03:52.060 --> 03:57.450
c'est pourquoi je l'obtiens comme un argument dans le constructeur.

03:57.450 --> 04:00.060
Et pour le hostElement, l'ID ici, bien sûr,

04:00.060 --> 04:02.733
est notre hostElementId, comme ceci.

04:04.790 --> 04:07.930
Il est également important, bien sûr, en ce qui concerne le casting

04:07.930 --> 04:10.230
ici, nous savons que ce sera de type T, parce que

04:10.230 --> 04:12.580
T ici est ce type générique, que nous stockons ou

04:12.580 --> 04:15.420
que nous utilisons pour notre hostElement, donc ici nous

04:15.420 --> 04:17.163
pouvons déjà le cast.

04:18.160 --> 04:20.253
Et avec ça, on sélectionne des éléments.

04:21.130 --> 04:22.940
Nous pouvons également obtenir plus de code.

04:22.940 --> 04:26.650
Ce code ici, où nous importons un nœud et ainsi de suite, et où

04:26.650 --> 04:30.130
nous définissons l'ID, nous pouvons saisir tout cela.

04:30.130 --> 04:32.520
Copions cela ici, et ajoutons-le également

04:32.520 --> 04:35.317
au constructeur de la classe Component.

04:35.317 --> 04:37.640
importedNode, puis nous définissons

04:37.640 --> 04:41.080
l'élément, et l'élément ici a ce type générique U, donc quand

04:41.080 --> 04:43.000
nous le coulons ici, nous savons

04:43.000 --> 04:46.870
que ce sera ce type U ici, donc nous devons le couler en U.

04:46.870 --> 04:49.090
C'est une bonne utilisation des génériques ici,

04:49.090 --> 04:51.993
qui rend cette classe Component vraiment réutilisable.

04:53.060 --> 04:55.200
Maintenant, concernant l'identification.

04:55.200 --> 04:58.200
C'est ce que nous obtenons ici, le newElementId.

04:58.200 --> 05:00.590
Bien entendu, il se peut que nous ne disposions pas toujours de cette

05:00.590 --> 05:02.150
information, car elle est facultative, mais

05:02.150 --> 05:03.870
nous devons vérifier si nous l'avons.

05:03.870 --> 05:06.070
Donc si newElementId est une chose, et seulement

05:06.070 --> 05:07.650
si c'est une chose, alors seulement

05:07.650 --> 05:09.710
j'essaierai de l'assigner, sinon nous n'essayons

05:09.710 --> 05:10.543
pas, parce qu'alors

05:10.543 --> 05:13.023
nous n'avons pas d'ID à assigner.

05:14.420 --> 05:16.300
Eh bien, avec ça, nous avons le constructeur.

05:16.300 --> 05:19.160
Maintenant, utilisons la fonction d'attachement ici.

05:19.160 --> 05:21.970
Copions donc la méthode attach de l'une de

05:21.970 --> 05:25.470
nos autres classes et ajoutons-la ici, en tant que méthode

05:25.470 --> 05:28.473
privée, dans la classe Component.

05:32.690 --> 05:35.640
Nous pouvons alors également appeler cela. à la fin du constructeur

05:35.640 --> 05:38.540
de la classe Component.

05:38.540 --> 05:39.960
Maintenant, ici nous voulons

05:39.960 --> 05:42.570
ajouter un élément, mais nous ne savons pas où il doit

05:42.570 --> 05:44.193
être ajouté, donc c'est en fait une

05:44.193 --> 05:46.450
information supplémentaire que nous devons

05:46.450 --> 05:49.450
récupérer ici, comme quatrième argument dans le contructeur,

05:52.430 --> 05:54.200
insert Atstart pourrait être un nom,

05:54.200 --> 05:56.680
et c'est un booléen, disons.

05:56.680 --> 06:00.190
Et nous devrions le déplacer devant notre paramètre optionnel.

06:00.190 --> 06:02.230
Les paramètres facultatifs doivent toujours être placés

06:02.230 --> 06:03.980
en dernier, car les gens peuvent les omettre.

06:03.980 --> 06:06.680
Vos paramètres obligatoires ne peuvent donc pas

06:06.680 --> 06:09.220
venir après ces paramètres facultatifs.

06:09.220 --> 06:13.533
Et insertAtStart est ensuite transmis à attach, là, insertAtBeginning,

06:14.615 --> 06:18.740
vous pourriez aussi réutiliser insertAtStart, j'utilise juste un

06:18.740 --> 06:21.350
nom différent ici pour éviter toute confusion,

06:21.350 --> 06:23.470
est reçu comme un booléen.

06:23.470 --> 06:28.040
Et puis ici, nous vérifions si insertAtBeginning est vrai,

06:28.040 --> 06:32.920
si c'est le cas, alors ici, nous avons afterbegin, sinon nous

06:32.920 --> 06:34.887
avons beforeend.

06:36.770 --> 06:39.653
Maintenant, nous sommes flexibles en ce qui concerne la façon dont cela est inséré.

06:42.980 --> 06:46.570
Je veux aussi marquer cette classe maintenant comme une classe abstraite, parce

06:46.570 --> 06:49.600
que les gens ne devraient jamais l'instancier directement, au lieu

06:49.600 --> 06:52.560
de cela, elle devrait toujours être utilisée pour l'héritage.

06:52.560 --> 06:56.090
Donc devant la classe, j'ajoute le mot clé abstract.

06:56.090 --> 06:58.750
Cela permet de s'assurer que maintenant nous ne pouvons pas l'instancier.

06:58.750 --> 07:01.963
Si nous essayions de le faire, TypeScript nous crierait dessus.

07:04.070 --> 07:06.490
Je vais également ajouter deux autres méthodes,

07:06.490 --> 07:08.410
à savoir la méthode configure et

07:08.410 --> 07:10.840
la méthode renderContent.

07:10.840 --> 07:13.430
Et je l'ajouterai en tant que méthode abstraite, ce

07:13.430 --> 07:16.463
qui signifie que l'implémentation concrète est absente ici,

07:18.000 --> 07:21.080
mais que nous forçons maintenant, fondamentalement, toute

07:21.080 --> 07:22.670
classe héritant de component,

07:22.670 --> 07:25.980
à ajouter ces deux méthodes et à les rendre disponibles.

07:25.980 --> 07:27.220
J'ajoute simplement ceci

07:27.220 --> 07:29.390
ici, afin que si quelqu'un d'autre regarde notre

07:29.390 --> 07:31.460
code, il ou elle puisse avoir une bonne compréhension

07:31.460 --> 07:34.150
de l'idée derrière la classe Component.

07:34.150 --> 07:36.340
Il effectue le rendu général ou la fixation

07:36.340 --> 07:38.530
du composant, mais le contenu concret

07:38.530 --> 07:40.790
et la configuration doivent être réalisés

07:40.790 --> 07:43.840
à l'endroit où nous héritons.

07:43.840 --> 07:47.670
Remarque : vous ne pouvez pas avoir de méthodes privées et abstraites.

07:47.670 --> 07:49.660
Donc, private doit être omis ici,

07:49.660 --> 07:52.000
ce n'est pas autorisé par TypeScript.

07:52.000 --> 07:54.590
Bien, et avec cela, nous pouvons étendre Component

07:54.590 --> 07:56.480
ici sur la ProjectList, et maintenant

07:56.480 --> 07:59.130
se débarrasser de ces trois propriétés.

07:59.130 --> 08:00.640
Nous gardons les assignedProjects,

08:00.640 --> 08:03.520
parce que c'est spécifique à la ProjectList.

08:03.520 --> 08:06.620
Nous voulons aussi maintenant spécifier les valeurs concrètes

08:06.620 --> 08:09.560
qui doivent être branchées pour nos types génériques.

08:09.560 --> 08:12.410
Et nous savons, si nous revenons en arrière,

08:12.410 --> 08:16.540
que nous aurons un HTMLDivElement et un HTMLElement, donc ici

08:16.540 --> 08:19.313
je vais passer dans HTMLDivElement, et HTMLElement,

08:20.410 --> 08:22.800
comme ceci, et ensuite me débarrasser

08:22.800 --> 08:25.830
de ces trois propriétés.

08:25.830 --> 08:29.510
Dans le constructeur, nous n'avons pas besoin de cela ici, mais à la place

08:29.510 --> 08:32.550
nous devons appeler super au début, pour appeler le contructeur

08:32.550 --> 08:35.130
de la classe de base, et pour cela, nous devons passer

08:35.130 --> 08:38.080
quelques informations au super contructeur, nous devons

08:38.080 --> 08:40.840
passer quelques informations.

08:40.840 --> 08:42.753
L'ID de notre templateElement, l'hostElementId,

08:44.050 --> 08:45.850
si nous voulons l'insérer au début

08:45.850 --> 08:47.870
de l'hostElement, et, éventuellement,

08:47.870 --> 08:51.920
l'ID qui doit être attribué au nouvel élément.

08:51.920 --> 08:54.038
Voici donc l'ID de notre modèle,

08:54.038 --> 08:57.811
et avec cela nous pouvons nous débarrasser de ceci.

08:57.811 --> 09:01.292
Puis ici, le hostElement, cet ID était app, donc on peut

09:01.292 --> 09:02.670
s'en débarrasser.

09:02.670 --> 09:04.260
Nous conservons les assignedProjects,

09:04.260 --> 09:06.400
car nous en avons encore besoin ici.

09:06.400 --> 09:08.193
Nous nous débarrassons de cela

09:10.150 --> 09:13.050
ici, mais, en ce qui concerne l'ID pour le nouvel élément,

09:13.050 --> 09:16.850
je veux le passer comme un quatrième paramètre en fait.

09:16.850 --> 09:19.040
Le troisième est l'endroit où il doit

09:19.040 --> 09:22.400
être inséré, et ici, nous avons l'habitude de l'insérer avant

09:22.400 --> 09:25.890
la fin, donc en fait ce que je veux insérer ici comme paramètre

09:25.890 --> 09:29.170
pour la valeur insertAtStart est false, parce qu'il ne

09:29.170 --> 09:31.380
doit pas être inséré au début, mais à la

09:31.380 --> 09:32.283
fin.

09:36.000 --> 09:38.940
Maintenant, je veux certainement encore mettre en place mon auditeur ici.

09:38.940 --> 09:40.730
Je n'ai pas besoin d'appeler attach,

09:40.730 --> 09:44.410
cela se fera dans la classe de base, dans le composant de base.

09:44.410 --> 09:46.253
Je vais cependant appeler renderContent.

09:47.870 --> 09:50.010
Et ici, nous ne devrions pas utiliser ce type, mais

09:50.010 --> 09:52.100
juste le type, parce que nous ne pouvons pas utiliser

09:52.100 --> 09:54.410
ce type avant que super ait fini de fonctionner.

09:54.410 --> 09:55.490
Mais ce n'est pas un problème,

09:55.490 --> 09:57.690
car nous avons reçu le type comme argument.

09:57.690 --> 09:59.680
Maintenant, vous voyez que j'obtiens toujours

09:59.680 --> 10:03.487
une erreur ici, parce que nous avons une méthode d'attachement ici dans ProjectList, et qui

10:03.487 --> 10:05.410
entre en conflit avec la méthode d'attachement

10:05.410 --> 10:07.330
que nous avons dans la classe de base.

10:07.330 --> 10:10.600
Débarrassons-nous donc de cette méthode d'attachement.

10:10.600 --> 10:14.024
Maintenant, nous avons toujours une erreur, parce que vous voyez, renderContent

10:14.024 --> 10:16.060
est privé ici, mais nous le spécifions comme

10:16.060 --> 10:18.270
une méthode publique ici, j'aimerais l'avoir comme

10:18.270 --> 10:20.240
une méthode privée, mais les méthodes abstraites

10:20.240 --> 10:22.860
privées ne sont pas supportées.

10:22.860 --> 10:25.680
Je vais donc supprimer le mot-clé private ici, et maintenant avec

10:25.680 --> 10:28.170
cela, il nous reste un problème ici, c'est que nous n'avons

10:28.170 --> 10:30.510
pas cette méthode de configuration, que j'ai promis

10:30.510 --> 10:31.990
que nous aurions ici.

10:31.990 --> 10:33.650
Eh bien, ajoutons-le.

10:33.650 --> 10:38.500
Donc ici, en plus de renderConfig, nous pourrions ajouter configure,

10:38.500 --> 10:40.510
même si je ne fais rien ici.

10:40.510 --> 10:42.950
Vous pouvez également convertir cette méthode en une méthode

10:42.950 --> 10:46.000
facultative en ajoutant un point d'interrogation. Ainsi, vous n'êtes

10:46.000 --> 10:47.520
pas obligé de l'ajouter.

10:47.520 --> 10:50.380
Ici, je vais l'ajouter parce que nous pourrions

10:50.380 --> 10:53.210
aussi argumenter que nous, pour la ProjectList,

10:53.210 --> 10:56.490
mettons ce code où nous configurons notre écouteur ici,

10:56.490 --> 10:58.530
en fait dans configure.

10:58.530 --> 11:00.810
Donc nous pouvons atteindre la configuration,

11:00.810 --> 11:03.320
et ensuite faire notre truc ici, la configuration

11:03.320 --> 11:05.220
de l'écouteur.

11:05.220 --> 11:06.610
Et maintenant, nous devons juste

11:06.610 --> 11:10.653
nous assurer que nous appelons renderContent, mais aussi configurer comme ceci.

11:12.730 --> 11:14.440
Au cas où vous vous demanderiez pourquoi

11:14.440 --> 11:16.450
je n'appelle pas configure et renderContent ici,

11:16.450 --> 11:18.560
dans la classe abstraite, dans le contructeur, eh

11:18.560 --> 11:19.993
bien, nous pourrions le faire, mais

11:21.780 --> 11:23.720
nous pourrions alors avoir un problème.

11:23.720 --> 11:26.760
Si nous appelons cette méthode dans la classe Component,

11:26.760 --> 11:30.770
alors, nous pourrions appeler une méthode dans la classe héritière,

11:30.770 --> 11:33.240
donc dans une classe qui étend Component,

11:33.240 --> 11:36.810
où renderContent ou configure s'appuie sur quelque chose où

11:36.810 --> 11:39.410
le contructeur de la classe héritière met en

11:39.410 --> 11:41.540
place quelque chose, seulement après

11:41.540 --> 11:44.710
que le contructeur de la classe de base ait terminé, dont

11:44.710 --> 11:48.100
renderContent et/ou configure dépendent.

11:48.100 --> 11:50.690
C'est pourquoi il est plus sûr, en gros, de s'assurer

11:50.690 --> 11:52.410
que la classe héritière doit appeler

11:52.410 --> 11:55.410
ces méthodes au lieu que la classe de base les appelle

11:55.410 --> 11:56.860
pour nous.

11:57.980 --> 12:01.280
Ainsi, nous avons restructuré la classe ProjectList

12:01.280 --> 12:05.040
pour tirer parti de l'héritage et de notre logique partagée.

12:05.040 --> 12:07.730
Faisons la même chose pour ProjectInput maintenant.

12:07.730 --> 12:11.790
Là, nous voulons également étendre

12:11.790 --> 12:13.170
Component.

12:13.170 --> 12:14.900
Utilisez la nature générique

12:14.900 --> 12:19.430
de cet élément, et là, nous avons le HTMLDivElement pour le hostElement,

12:19.430 --> 12:23.980
et le HTMLFormElement pour l'élément qui est rendu.

12:23.980 --> 12:27.210
Avec cela, nous pouvons nous débarrasser de ces trois propriétés ici,

12:27.210 --> 12:28.310
alors faisons-le.

12:28.310 --> 12:30.090
Nous gardons ces trois propriétés, bien sûr,

12:30.090 --> 12:32.140
parce qu'elles sont spécifiques à ProjectInput.

12:33.040 --> 12:35.310
Nous devons ensuite appeler super

12:35.310 --> 12:38.320
ici, et à super nous passons l'ID du modèle, qui

12:38.320 --> 12:39.900
est ProjectInput, l'ID de

12:39.900 --> 12:41.970
l'élément hôte, qui est app, insertBefore

12:41.970 --> 12:45.270
ici est vrai, parce que je veux insérer cet élément

12:45.270 --> 12:47.620
nouvellement créé au début ici pour

12:47.620 --> 12:50.510
cette classe ProjectInput.

12:50.510 --> 12:53.110
Et puis, newElementId, eh bien, c'est l'entrée

12:53.110 --> 12:55.170
de l'utilisateur, donc nous devrions

12:55.170 --> 12:56.913
également le transmettre.

12:57.844 --> 12:59.400
Avec cela, nous pouvons nous

12:59.400 --> 13:03.480
débarrasser de ce code, de ce code, et de tout ce code ici en fait.

13:03.480 --> 13:05.240
Bien sûr, gardez ce code ici.

13:05.240 --> 13:07.820
Cependant, on peut aussi dire que nous avons

13:07.820 --> 13:09.860
peut-être configuré cela.

13:09.860 --> 13:12.100
Descendons donc à la méthode configure, que

13:12.100 --> 13:13.660
nous avons déjà ici, et ajoutons

13:13.660 --> 13:16.790
nos listeners ici ou notre configuration de propriété ici pour

13:16.790 --> 13:17.683
configurer.

13:18.880 --> 13:20.780
Bien sûr, débarrassons-nous de attach,

13:20.780 --> 13:24.450
parce que c'est maintenant quelque chose que la classe de base fait pour nous,

13:24.450 --> 13:26.980
et vérifions ce que TypeScript n'aime pas, bien sûr

13:26.980 --> 13:29.690
nous devrions nous débarrasser de l'attach ici.

13:29.690 --> 13:32.520
Et oui, en fait une chose que TypeScript n'aime pas,

13:32.520 --> 13:35.090
il se plaint maintenant que ces champs ne sont

13:35.090 --> 13:37.190
pas initialisés dans le contructeur,

13:37.190 --> 13:40.380
parce qu'il ne comprend pas ou ne vérifie pas que configure

13:40.380 --> 13:42.260
est appelé dans le contructeur et

13:42.260 --> 13:44.770
fait cette initialisation.

13:44.770 --> 13:47.500
Donc pour satisfaire TypeScript, je vais déplacer

13:47.500 --> 13:50.550
ces initialisations de configure directement dans

13:50.550 --> 13:52.170
le constructeur.

13:52.170 --> 13:54.190
Techniquement, le résultat est exactement le même, mais

13:54.190 --> 13:55.953
maintenant TypeScript ne se plaindra pas.

13:56.800 --> 13:59.240
Il se plaindra, cependant, que nous avons

14:00.440 --> 14:02.310
une méthode privée configure,

14:02.310 --> 14:05.910
donc comme précédemment, nous devons changer cela, et transformer

14:05.910 --> 14:08.940
configure en une méthode publique.

14:08.940 --> 14:11.460
Maintenant, ce n'est pas une obligation, mais c'est une sorte

14:11.460 --> 14:13.000
de convention d'avoir vos méthodes publiques

14:13.000 --> 14:14.570
en premier, c'est pourquoi je vais les

14:14.570 --> 14:17.240
déplacer au-dessus des autres méthodes privées ici.

14:17.240 --> 14:19.370
Et, bien sûr, maintenant il se plaint aussi

14:19.370 --> 14:21.990
que nous n'avons pas de méthode renderContent.

14:21.990 --> 14:25.020
Maintenant, je vais en ajouter un, juste parce que nous en avons besoin.

14:25.020 --> 14:26.780
Ici nous ne faisons rien dedans, donc techniquement

14:26.780 --> 14:28.890
ce n'est pas nécessaire, mais maintenant nous satisfaisons

14:28.890 --> 14:31.053
notre classe de base.

14:32.260 --> 14:34.603
Note secondaire, renderContent, et configure,

14:35.550 --> 14:39.590
dans la classe ProjectList, peut également être déplacé au-dessus de cette méthode

14:39.590 --> 14:43.230
privée ici pour les mêmes raisons exactes, pour cette convention que je

14:43.230 --> 14:45.123
viens de mentionner.

14:46.440 --> 14:49.870
Et avec cela, nous avons également restructuré ProjectInput,

14:49.870 --> 14:51.780
pour profiter de l'héritage et laisser

14:51.780 --> 14:55.330
la classe de base faire une grande partie du travail.

14:55.330 --> 14:57.670
Voyons si tout cela fonctionne maintenant.

14:57.670 --> 15:00.710
Si nous sauvegardons cela, il compile sans erreurs,

15:00.710 --> 15:02.740
semble fonctionner correctement,

15:02.740 --> 15:05.870
la question est de savoir si cela fonctionne.

15:05.870 --> 15:07.810
Et ça a l'air plutôt bien.

15:07.810 --> 15:09.720
Il fonctionne de la même manière qu'avant,

15:09.720 --> 15:11.600
mais nous avons maintenant un code plus

15:11.600 --> 15:14.240
propre, où nous profitons de la réutilisation du code,

15:14.240 --> 15:15.850
grâce à l'héritage.

15:15.850 --> 15:18.540
Maintenant, ce n'est pas le seul endroit où nous pouvons hériter.

15:18.540 --> 15:20.610
Je veux conclure cette conférence

15:20.610 --> 15:24.230
ici en refactorant également l'état de notre projet.

15:24.230 --> 15:26.240
Techniquement, nous n'avons pas besoin

15:26.240 --> 15:29.450
de l'héritage, car nous n'avons qu'un seul état à gérer dans toute

15:29.450 --> 15:31.230
l'application, mais imaginez une

15:31.230 --> 15:33.130
application plus grande, où vous avez

15:33.130 --> 15:35.310
plusieurs états différents.

15:35.310 --> 15:37.240
Un pour l'état de l'utilisateur, pour

15:37.240 --> 15:39.290
savoir si l'utilisateur est connecté

15:39.290 --> 15:43.030
et ainsi de suite, un pour les projets, un pour le panier d'achat.

15:43.030 --> 15:45.600
Maintenant, vous remarquerez que certaines caractéristiques

15:45.600 --> 15:48.080
de votre classe d'état sont toujours les mêmes.

15:48.080 --> 15:50.520
Plus précisément, ce tableau d'écouteurs,

15:50.520 --> 15:52.780
et la méthode addListener.

15:52.780 --> 15:54.730
Nous pourrions donc aussi utiliser une classe de base ici.

15:55.650 --> 15:58.170
Nous pourrions utiliser une classe State

15:58.170 --> 16:01.230
ici, et cette classe a un tableau de listeners, et

16:01.230 --> 16:04.640
cette classe a aussi une méthode addListeners, donc nous

16:04.640 --> 16:07.120
allons couper les deux de ProjectState,

16:07.120 --> 16:09.160
et les ajouter à State.

16:09.160 --> 16:12.610
Maintenant, cela signifie également que nous ne savons pas

16:12.610 --> 16:14.700
si notre écouteur retournera effectivement

16:14.700 --> 16:16.720
un tableau de projets.

16:16.720 --> 16:18.253
Donc en fait ici, pour

16:19.110 --> 16:20.760
ce type de fonction,

16:20.760 --> 16:24.740
je veux aussi avoir un type générique en fait.

16:24.740 --> 16:27.440
Pour qu'on puisse régler ça de l'extérieur.

16:27.440 --> 16:28.483
Nous pouvons le faire,

16:29.790 --> 16:31.623
nous pouvons écrire un type générique,

16:32.680 --> 16:35.730
comme ici, un type personnalisé, qui est générique, nous pouvons

16:35.730 --> 16:38.410
ajouter les crochets après le nom de notre type, utiliser

16:38.410 --> 16:40.150
un identifiant de notre choix, puis

16:40.150 --> 16:42.460
réutiliser ce type ici.

16:42.460 --> 16:44.960
Maintenant, nous pouvons rendre l'État générique, nous pouvons

16:44.960 --> 16:46.320
utiliser le même identifiant, car

16:46.320 --> 16:49.530
il s'agit d'une construction différente de notre type personnalisé.

16:49.530 --> 16:53.520
Et puis ici, lorsque nous disons que nous voulons avoir une liste d'écouteurs,

16:53.520 --> 16:56.780
nous devons indiquer à TypeScript quel type générique

16:56.780 --> 16:58.850
les écouteurs utilisent pour cet objet

16:58.850 --> 17:01.510
State que nous créons.

17:01.510 --> 17:03.850
Et cela signifie simplement que nous pouvons

17:03.850 --> 17:06.490
transmettre notre type générique ici, et ici.

17:06.490 --> 17:09.410
Ainsi, lorsque nous étendons l'état, nous devons spécifier

17:09.410 --> 17:12.630
le type de données avec lequel cet état fonctionnera, et au lieu

17:12.630 --> 17:14.930
de l'état, il est transmis à notre type personnalisé

17:14.930 --> 17:17.680
d'auditeur, c'est l'idée.

17:17.680 --> 17:19.580
Et comment utiliser tout cela ?

17:19.580 --> 17:21.950
Eh bien, en bas, dans la classe ProjectState,

17:21.950 --> 17:24.930
nous étendons simplement la classe State, et maintenant,

17:24.930 --> 17:27.900
nous fournissons une valeur, une valeur concrète pour

17:27.900 --> 17:30.040
ce titulaire de place générique, et ici,

17:30.040 --> 17:32.480
cette valeur concrète est Project, parce que

17:32.480 --> 17:36.510
ce ProjectState est tout au sujet de la gestion de devinez quoi ?

17:36.510 --> 17:37.393
Projets.

17:38.970 --> 17:41.650
Maintenant, le constructeur privé ici a un problème,

17:41.650 --> 17:43.390
comme vous pouvez le voir, parce que

17:43.390 --> 17:45.160
nous n'appelons pas super.

17:45.160 --> 17:46.930
Eh bien, nous devrions certainement faire

17:46.930 --> 17:48.350
ça, appelons Super ici, c'est tout

17:48.350 --> 17:49.800
ce que nous avons à faire là.

17:50.640 --> 17:53.490
Et ici, si nous faisons défiler vers le bas, où nous

17:53.490 --> 17:55.880
passons par les écouteurs, nous voyons

17:55.880 --> 17:57.890
que listeners est privé, et c'est

17:57.890 --> 18:00.240
privé dans notre classe de base.

18:00.240 --> 18:01.860
Maintenant, cela signifie que nous ne pouvons

18:01.860 --> 18:03.580
y accéder que depuis la classe de base.

18:03.580 --> 18:06.760
Mais vous avez appris l'existence d'un autre modificateur

18:06.760 --> 18:09.380
d'accès, qui est similaire à private, mais

18:09.380 --> 18:12.900
qui permet également l'accès des classes héritantes, et

18:12.900 --> 18:14.990
qui serait protected.

18:14.990 --> 18:17.200
Protégé signifie qu'on ne peut toujours

18:17.200 --> 18:18.930
pas y accéder depuis l'extérieur

18:18.930 --> 18:23.030
de la classe, mais qu'on peut y accéder depuis toute classe qui en hérite.

18:23.030 --> 18:24.740
Avec ça, sauvegardons tout ça,

18:24.740 --> 18:26.650
ça devrait compiler très bien.

18:26.650 --> 18:28.940
Et testons rapidement cela, et cela semble bon,

18:28.940 --> 18:31.790
donc cela fonctionne comme avant, mais maintenant, à nouveau,

18:31.790 --> 18:34.160
avec un code un peu plus agréable, en utilisant

18:34.160 --> 18:36.420
l'héritage et les génériques également pour

18:36.420 --> 18:38.363
notre gestion d'état.
