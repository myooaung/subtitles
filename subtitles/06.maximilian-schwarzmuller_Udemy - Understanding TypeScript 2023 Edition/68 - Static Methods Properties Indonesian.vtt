WEBVTT

00:02.251 --> 00:03.380
Instruktur: Fitur bagus

00:03.380 --> 00:05.350
lainnya yang terkait dengan properti

00:05.350 --> 00:08.000
dan metode, yang juga ada di JavaScript saat Anda

00:08.000 --> 00:10.010
menggunakan ES6 atau yang lebih baru,

00:10.010 --> 00:11.180
tetapi semua typescripts

00:11.180 --> 00:14.010
adalah properti dan metode statis.

00:14.010 --> 00:17.520
Properti dan metode statis memungkinkan Anda untuk menambahkan

00:17.520 --> 00:20.620
properti dan metode ke kelas yang tidak diakses pada

00:20.620 --> 00:22.530
instance kelas, jadi di mana Anda

00:22.530 --> 00:26.080
tidak perlu memanggil nama kelas baru terlebih dahulu, tetapi

00:26.080 --> 00:28.950
yang Anda akses langsung pada kelas.

00:28.950 --> 00:31.350
Ini sering digunakan untuk fungsi utilitas

00:31.350 --> 00:35.922
yang ingin Anda kelompokkan atau petakan ke kelas secara logis, atau

00:35.922 --> 00:40.860
konstanta global yang juga ingin Anda simpan dalam kelas.

00:40.860 --> 00:43.270
Contoh yang dibangun ke dalam JavaScript,

00:43.270 --> 00:46.050
yang tidak didefinisikan oleh typescript dan tidak

00:46.050 --> 00:48.290
didefinisikan oleh Anda, tetapi bagian

00:48.290 --> 00:51.170
dari JavaScript di browser adalah fungsi konstruktor

00:51.170 --> 00:53.220
Matematika, atau kelas jika Anda ingin

00:53.220 --> 00:55.500
menyebutnya seperti ini, yang tersedia

00:55.500 --> 00:59.210
secara global di JavaScript, di mana Anda dapat mengakses pi sebagai

00:59.210 --> 01:01.400
nilai konstan untuk memberi Anda angka

01:01.400 --> 01:05.050
pi itu, atau fungsi, atau metode tepatnya, seperti pow untuk menghitung

01:05.050 --> 01:08.610
kekuatan sesuatu.

01:08.610 --> 01:10.530
Ini adalah metode dan properti

01:10.530 --> 01:13.370
yang tidak Anda akses pada instance Math.

01:13.370 --> 01:16.310
Anda tidak harus memanggil matematika baru terlebih dahulu.

01:16.310 --> 01:19.830
Memang hal itu tidak akan berhasil, tetapi Anda mengakses properti-properti ini dalam

01:19.830 --> 01:22.360
metode-metode secara langsung pada kelas itu sendiri.

01:22.360 --> 01:25.340
Jadi Math bertindak lebih seperti ruang nama sebagai mekanisme

01:25.340 --> 01:27.370
pengelompokan di sini dan itu adalah kasus

01:27.370 --> 01:28.640
penggunaan umum untuk metode

01:28.640 --> 01:30.480
dan properti statis dan Anda dapat menambahkannya

01:30.480 --> 01:33.650
ke kelas Anda sendiri juga.

01:33.650 --> 01:36.770
Katakanlah pada Departemen kita ingin memiliki metode yang

01:36.770 --> 01:40.050
membantu kita membuat karyawan dan itu adalah sesuatu yang

01:40.050 --> 01:43.450
mungkin ingin kita akses tanpa menginstansiasi Departemen,

01:43.450 --> 01:45.390
karena kita biasanya menginstansiasi

01:45.390 --> 01:46.890
versi yang lebih terspesialisasi,

01:46.890 --> 01:49.970
departemen TI, dan departemen akuntansi dan kita tidak

01:49.970 --> 01:51.290
benar-benar ingin menginstansiasi

01:51.290 --> 01:54.710
Departemen hanya untuk memanggil metode utilitas dan oleh karena

01:54.710 --> 01:58.490
itu kita dapat menambahkan metode di sini, buat Karyawan, katakanlah,

01:58.490 --> 02:07.621
di mana kita ingin mendapatkan nama, yang merupakan string sebagai argumen dan di sana kita ingin mengembalikan sesuatu.

02:07.621 --> 02:10.230
Sekarang untuk membuat metode statis, yang dapat

02:10.230 --> 02:12.920
kita akses tanpa menginstansiasi kelas ini, kita

02:12.920 --> 02:16.250
tambahkan kata kunci statis di depan metode ini dan kemudian

02:16.250 --> 02:18.549
di sini kita mungkin mengembalikan objek

02:18.549 --> 02:23.549
di mana kita memiliki properti nama yang dipetakan ke nilai nama ini.

02:25.170 --> 02:27.010
Tentu saja itu adalah metode yang sangat sederhana,

02:27.010 --> 02:28.690
tetapi Anda mendapatkan idenya.

02:28.690 --> 02:31.960
Sekarang untuk menggunakan itu kita bisa pergi ke sana di mana kita

02:31.960 --> 02:33.490
mengeksekusi kode kita dan sekarang

02:33.490 --> 02:36.940
katakanlah kita menginginkan karyawan baru, karyawan1.

02:39.300 --> 02:41.020
Kalau begitu kita bisa mendapatkan

02:41.020 --> 02:46.020
ini dengan Departemen. createEmployee dan masukkan Max misalnya

02:46.920 --> 02:50.680
dan jika saya kemudian konsol. log(employee1) kita akan melihat

02:50.680 --> 02:53.170
sebuah objek dengan nama Max.

02:53.170 --> 02:55.630
Jadi jika saya simpan itu, memang di sini ini

02:55.630 --> 02:58.240
adalah karyawan yang baru saja kita buat.

02:58.240 --> 03:01.200
Jadi, ini akan menjadi contoh tipikal untuk metode statis.

03:01.200 --> 03:04.870
Kita memanggilnya secara langsung pada kelas, tanpa kata kunci baru, dan oleh

03:04.870 --> 03:06.360
karena itu kita menggunakan kelas

03:06.360 --> 03:09.030
sebagai mekanisme pengelompokan yang bisa Anda katakan

03:09.030 --> 03:11.630
dan jika Anda ingin menambahkan properti statis, Anda

03:11.630 --> 03:13.470
bisa melakukannya juga.

03:13.470 --> 03:17.950
Jika Anda memiliki sesuatu seperti fiscalYear di sini yang saat ini ingin Anda gunakan

03:19.730 --> 03:22.040
di perusahaan Anda, Anda dapat mengaturnya

03:22.040 --> 03:24.980
ke, katakanlah, 2020 dan sekali lagi untuk membuatnya

03:24.980 --> 03:27.310
tersedia tanpa menginstansiasi ini, Anda

03:27.310 --> 03:28.560
dapat menambahkan statis

03:28.560 --> 03:30.810
di depan properti ini, atau di depan bidang

03:30.810 --> 03:33.950
itu dan sekarang mengaksesnya.

03:33.950 --> 03:36.560
Jadi sekarang di bawah sana konsol. log. (mycreatedemployee).

03:38.050 --> 03:42.420
Di sini kita juga bisa mengakses Departemen. fiskal. Year seperti itu tanpa

03:43.900 --> 03:46.190
menginstansiasi dan jika kita menyimpannya,

03:46.190 --> 03:47.150
secara mengejutkan

03:47.150 --> 03:51.130
kita akan melihat 2020 dicatat di sini.

03:51.130 --> 03:53.347
Jadi, ini adalah metode dan properti statis.

03:53.347 --> 03:55.250
Satu kata penting tentang mereka, atau

03:55.250 --> 03:56.947
satu hal yang harus Anda ingat.

03:56.947 --> 03:59.067
Ketika Anda menambahkannya pada sebuah

03:59.067 --> 04:03.370
kelas, Anda tidak dapat mengaksesnya dari dalam bagian non statis Anda.

04:03.370 --> 04:04.870
Jadi jika Anda merasa ingin

04:04.870 --> 04:08.150
mengakses fiscalYear di sini di konstruktor, dan Anda

04:08.150 --> 04:10.375
ingin konsol. log di sini, ini,

04:10.375 --> 04:13.490
seperti yang Anda lihat tidak akan berfungsi.

04:13.490 --> 04:15.600
Saya mendapatkan kesalahan di sini

04:15.600 --> 04:18.690
bahwa properti fiscalYear adalah anggota statis.

04:18.690 --> 04:20.976
Kita tidak dapat mengakses ini di sini karena

04:20.976 --> 04:24.290
konstruktor dan pada dasarnya apa pun di sana, semua metode

04:24.290 --> 04:26.530
juga, yang tidak ditandai dengan statis,

04:26.530 --> 04:29.427
dan Anda tidak dapat menandai konstruktor sebagai

04:29.427 --> 04:32.430
statis, omong-omong, tidak akan dapat mengakses properti

04:32.430 --> 04:34.770
statis, karena ini mengacu pada instance

04:34.770 --> 04:37.660
yang dibuat berdasarkan kelas sementara properti

04:37.660 --> 04:41.450
statis tidak tersedia pada instance karena seluruh ide di balik properti

04:41.450 --> 04:44.150
statis dan metode statis adalah bahwa mereka terlepas

04:44.150 --> 04:47.780
dari instance.

04:47.780 --> 04:50.930
Jadi tentu saja Anda tidak dapat mengaksesnya dengan kata kunci ini.

04:50.930 --> 04:53.940
Jika Anda ingin menggunakan properti atau metode

04:53.940 --> 04:56.080
statis dari dalam kelas, Anda harus

04:56.080 --> 04:59.380
menggunakan nama kelas di sini untuk mengaksesnya.

04:59.380 --> 05:01.337
Ini memberi Anda akses ke properti

05:01.337 --> 05:04.290
dan metode statis semua dari dalam kelas.

05:04.290 --> 05:06.593
Itulah satu hal penting yang perlu diingat.
