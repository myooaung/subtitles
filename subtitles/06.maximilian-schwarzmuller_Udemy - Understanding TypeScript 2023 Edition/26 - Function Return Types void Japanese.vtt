WEBVTT

00:02.200 --> 00:04.080
講師：また新しいファイルの時間です｡ 

00:04.080 --> 00:13.760
アプリ名を変更する ユニオンエイリアスはこちら ts､ 新しいアプリを追加します｡

00:13.760 --> 00:13.760
tsファイルを作成し､

00:13.760 --> 00:16.370
もう一方のファイルを閉じて､ また一からやり直すことができます｡

00:16.370 --> 00:20.660
そして､ ここでは､ 関数についてもう少し深く掘り下げてみたいと思います｡ 

00:20.660 --> 00:22.640
さて､ もちろん､ すでに働いている機能で｡ 

00:22.640 --> 00:24.940
例えば､ ここではcombine関数を使ったunion

00:24.940 --> 00:26.340
aliasesファイルで｡

00:26.340 --> 00:32.520
また､ 例えば､ 関数の場合､ 関数のパラメータに型を割り当てることができることはお分かりいただけたと思います｡

00:32.520 --> 00:36.483
さて､ 関数と型を使ってできることはもう少しあることがわかりました｡

00:37.590 --> 00:43.373
そのために､ 文字列ではなく､ 単純に数字を受け取るadd関数を作り直します｡

00:44.270 --> 00:49.513
これは単純なことで､ n1+n2を返すので､ それほど難しいことではありません｡

00:51.004 --> 00:53.740
先ほど述べたように､ パラメータに型を割り当てることができますが､

00:53.740 --> 00:55.180
これは新しいことではありません｡

00:55.180 --> 00:57.030
しかし､ 関数全体では､ もう一つ重要な型があり､

00:57.030 --> 01:01.050
それは戻り値の型を持つことである｡

01:01.050 --> 01:03.990
そして､ ここでは戻り値の型はTypeScriptによって推論される｡ 

01:03.990 --> 01:06.490
addにカーソルを合わせると表示されます｡ 

01:06.490 --> 01:14.190
最後に､ パラメータリストの後のコロン､ ここが関数の戻り値の型を記述しています｡

01:14.190 --> 01:16.800
だから､ 返される値の型｡ 

01:16.800 --> 01:20.020
ここでは､ n 1とn 2の足し算を返しています｡ 

01:20.020 --> 01:24.930
そして､ これらの入力はどちらも数字なので､ TypeScriptはこの結果が数字になること､

01:24.930 --> 01:30.830
そしてそれを返すので､ この関数データの戻り値の型が数字になることを推論することができる｡

01:30.830 --> 01:33.320
ここで､ 例えばtoStringで文字列として連結すると､

01:33.320 --> 01:41.900
TypeScriptはここで文字列を返していると正しく推論してくれる｡

01:41.900 --> 01:44.350
もちろん､ パラメータリストの後にコロンを付けて､

01:44.350 --> 01:51.263
数値のように返したい型を明示的に指定することも可能です｡

01:52.850 --> 01:54.560
これは､ inferredと同じ型になる｡ 

01:54.560 --> 01:56.760
例えば､ これを文字列に設定すると､

01:56.760 --> 02:00.020
ここでエラーが発生します｡ 明らかに､ ここでの計算が､

02:00.020 --> 02:03.540
記述した戻り値の型と一致しないからです｡

02:03.540 --> 02:10.080
さて､ 変数の場合と同様に､ 型推論に関してはTypeScriptに任せるとよいでしょう｡

02:10.080 --> 02:12.610
また､ 明示的に型を設定する特別な理由がない場合は､

02:12.610 --> 02:20.470
型を設定せず､ TypeScriptに型を推論させるべきである｡

02:20.470 --> 02:22.660
しかし､ 戻り値の型については､ 今まで見たことのない面白い型があり､

02:22.660 --> 02:30.240
他のプログラミング言語を経験したことがある人にとっては､ まったく新しい型かもしれない｡

02:30.240 --> 02:33.250
なぜなら､ JavaScriptには実在しない型だからです｡

02:33.250 --> 02:35.180
ボイドタイプです｡ 

02:35.180 --> 02:38.160
例えば､ printResultメソッドがあるとします｡ 

02:38.160 --> 02:41.190
そこで､ 数値の引数を取得します｡ これは､

02:41.190 --> 02:44.120
まあ､ 数値であるべきです｡

02:44.120 --> 02:47.510
そして､ その中で､ コンソールをしたい｡  log num.

02:47.510 --> 02:49.450
そして､ コンソールしたい｡  を文字列の一部として記録し､

02:49.450 --> 02:52.150
ここでresultとnumを言う｡

02:52.150 --> 02:56.090
これで､ 1つの長い文字列に連結されて出力されるわけです｡

02:56.090 --> 02:57.777
そして､ printResultを呼び出すことができるようになりました｡ 

02:57.777 --> 03:01.020
例えば､ add関数の呼び出しの結果､

03:01.020 --> 03:05.010
5と12を足したものを渡します｡

03:05.010 --> 03:07.670
そこで､ ここでは2つの数字でaddを実行しています｡ 

03:07.670 --> 03:10.160
そして､ その結果､ つまりaddが返すものが､

03:10.160 --> 03:13.130
printResultの引数として渡される｡

03:13.130 --> 03:15.780
そして､ それがコンソールにプリントされるはずです｡ 

03:15.780 --> 03:19.150
これをコンパイルして､ このページで見てみると､

03:19.150 --> 03:24.280
結果17となり､ 納得がいきます｡

03:24.280 --> 03:27.640
さて､ ここで興味深いのは､ printResultの戻り値の型です｡

03:27.640 --> 03:30.353
ここで､ 戻り値の型は何だと思いますか？

03:31.240 --> 03:33.240
つまり､ ここで文字列を作成しているので､

03:33.240 --> 03:35.150
文字列だと思うのかもしれません｡

03:35.150 --> 03:37.360
でも､ これは返さないということを肝に銘じておいてください｡ 

03:37.360 --> 03:39.400
ここでは何も返さない｡ 

03:39.400 --> 03:44.990
したがって､ このprintResult関数の戻り値はvoidという特殊な型になっています｡

03:44.990 --> 03:49.830
さて､ 他のプログラミング言語ではvoid戻り値型に気づくかもしれません｡

03:49.830 --> 03:52.230
そこに､ こんなものがあるんですね｡ 

03:52.230 --> 03:53.940
JavaScriptは､ そのことをよく分かっていないというか､

03:53.940 --> 03:56.740
この状況に名前をつけていないんです｡

03:56.740 --> 03:58.590
しかし､ TypeScriptはそうなっています｡ 

03:58.590 --> 04:01.840
つまり､ 確かにこの関数の戻り値の型はvoidです｡ 

04:01.840 --> 04:04.065
もちろん､ ここで指定する必要もない｡ 

04:04.065 --> 04:06.440
TypeScriptの推論が仕事をした｡ 

04:06.440 --> 04:07.630
しかし､ この関数が

04:07.630 --> 04:09.610
void 型の戻り値を持つことを明確にしたいので､

04:09.610 --> 04:13.730
デモのためにここに追加しています｡

04:13.730 --> 04:17.070
さて､ voidというのは､ この関数がreturnステートメントを持たない､

04:17.070 --> 04:21.020
何も返さないということを意味しています｡

04:21.020 --> 04:24.540
正常に完了し､ 役目を終えた｡ 

04:24.540 --> 04:28.170
コードを実行し､ エラーも何も発生しないが､

04:28.170 --> 04:32.550
その後何も返さない｡

04:32.550 --> 04:34.990
それがvoid戻り値型です｡ 

04:34.990 --> 04:39.490
さて､ 技術的にはJavaScriptで､ もちろん､ もし私たちがコンソールする場合｡

04:39.490 --> 04:39.490
の結果をここに記録し､

04:39.490 --> 04:46.270
これをコンパイルすると､ このページに何が出力されるかを見ることができます｡

04:46.270 --> 04:49.480
それによってundefinedが返されることがわかる｡ 

04:49.480 --> 04:51.540
技術的には､ JavaScriptでは､

04:51.540 --> 05:00.830
何も返さない関数の戻り値を使うと､ 値としてundefinedが得られるというのが面白いところです｡

05:00.830 --> 05:03.730
そして､ ご存知の方も多いと思いますが､ JavaScriptのundefinedは､

05:03.730 --> 05:05.720
実は本当の値なのです｡

05:05.720 --> 05:11.880
例えば､ 存在しないオブジェクトのプロパティにアクセスしようとしたときにも得られる値です｡

05:11.880 --> 05:13.670
つまり､ 技術的には未定義を返すのですが､

05:13.670 --> 05:16.680
ここではvoidを取得します｡

05:16.680 --> 05:23.300
さらに混乱させるのは､ undefinedはTypeScriptでは型の一つであるということだ｡

05:23.300 --> 05:25.640
型としてundefinedを持つことができる｡ 

05:25.640 --> 05:29.570
また､ 例えば､ 真新しい変数someValueは､ 型としてundefinedを受け取ることができ､

05:30.770 --> 05:34.700
エラーは発生しません｡

05:34.700 --> 05:37.380
この変数は今後､ 永遠に未定義になるだけです｡ 

05:37.380 --> 05:39.970
それがどれだけ役に立つかは別問題ですが｡ 

05:39.970 --> 05:43.720
しかし､ TypeScriptではundefinedは有効な型である｡ 

05:43.720 --> 05:46.600
それにもかかわらず､ ここでエラーが発生していることがわかります｡ 

05:46.600 --> 05:48.010
そして､ 関数が未定義を返すことは許されないので､

05:48.010 --> 05:51.690
エラーが発生しています｡

05:51.690 --> 05:53.300
技術的にはもちろんそうなのですが､

05:53.300 --> 05:56.850
TypeScriptは関数について少し違った考え方をしています｡

05:56.850 --> 06:00.200
関数が何も返さない場合､ undefinedではなくvoidを使うべきです｡

06:00.200 --> 06:08.260
voidを使うと､ この関数は意図的にreturn文を持っていないことが明確になるからです｡

06:08.260 --> 06:10.690
もしここでundefinedと言った場合､

06:10.690 --> 06:17.080
TypeScriptはreturn文で値を返さないことを想定している｡

06:17.080 --> 06:18.660
そこが技術的な違いです｡ 

06:18.660 --> 06:20.670
これで､ エラーが出ないことがお分かりいただけたと思います｡ 

06:20.670 --> 06:22.860
JavaScriptの観点からは､

06:22.860 --> 06:26.610
基本的にこれと同じです｡

06:26.610 --> 06:29.050
しかし､ TypeScriptはここで差別化を図り､

06:29.050 --> 06:33.760
returnステートメントがない場合はvoidを使うようにしています｡

06:33.760 --> 06:37.200
Undefinedは､ 正直言ってほとんど必要ないのですが､

06:37.200 --> 06:41.100
実際の値を返さずにreturnする場合に使うことができます｡

06:41.100 --> 06:47.560
しかし､ これも稀なユースケースで､ このようにreturn文でvoidを使うことも可能です｡

06:47.560 --> 06:49.040
エラーになることはないでしょう｡ 

06:49.040 --> 06:50.610
そして､ デフォルトでは､ このシナリオでは､

06:50.610 --> 06:52.770
実際には常にvoidを使用することになります｡

06:52.770 --> 06:54.680
ただし､ 本当に未定義を返すべき関数があり､

06:54.680 --> 06:58.620
そのことを明確にしたい場合は別です｡

06:58.620 --> 07:01.430
しかし､ やはり､ そうなることはほとんどないでしょう｡ 

07:01.430 --> 07:05.870
ここで確認しておきたいのは､ voidとundefinedの違いです｡

07:05.870 --> 07:08.160
voidは､ 値を返さない関数がある場合､

07:08.160 --> 07:10.930
ほとんどすべてのシナリオで使用する標準的なもので､

07:10.930 --> 07:15.770
明示的に代入することが可能です｡

07:15.770 --> 07:18.780
しかし､ もちろんTypeScriptも､ ここでもそうであるように､

07:18.780 --> 07:20.440
推論することができる｡

07:20.440 --> 07:23.083
ここでは､ デモ用に追加しただけです｡ 
