WEBVTT

00:02.340 --> 00:04.020
Instruktor: Jesteśmy już prawie po podstawach

00:04.020 --> 00:06.240
dotyczących TypeScript i podstawowych typów.

00:06.240 --> 00:10.130
Są jeszcze dwa rodzaje, o których dobrze jest wiedzieć,

00:10.130 --> 00:13.170
bo będą miały znaczenie od czasu do czasu.

00:13.170 --> 00:16.603
Pierwszy typ to typ nieznany.

00:17.860 --> 00:20.350
W tym celu nazwę ten plik twoimi funkcjami. ts i dodać nową

00:20.350 --> 00:23.343
aplikację. ts i w nim, powiedzmy,

00:24.290 --> 00:28.620
że mamy nową zmienną, userInput, i jest

00:28.620 --> 00:32.143
ona typu unknown.

00:32.143 --> 00:34.850
Nie jest typu any, który byłby domyślny, ale nieznany,

00:34.850 --> 00:36.690
który jest innym typem wprowadzonym

00:36.690 --> 00:38.500
przez TypeScript.

00:38.500 --> 00:40.950
Może być nieznany, ponieważ nie wiemy jeszcze, co

00:40.950 --> 00:42.950
użytkownik ostatecznie wprowadzi.

00:42.950 --> 00:45.593
Jeśli jest to liczba, jeśli jest to ciąg znaków, nie wiemy.

00:46.770 --> 00:48.960
Teraz interesującą rzeczą w nieznanym typie

00:48.960 --> 00:51.020
jest to, że możemy przechowywać tam dowolną

00:51.020 --> 00:54.630
wartość bez otrzymywania błędów, więc to wszystko jest dozwolone.

00:54.630 --> 00:57.660
Jeśli teraz skompiluję mój plik tutaj, widzisz,

00:57.660 --> 01:00.290
że nie dostaję żadnego błędu kompilacji.

01:00.290 --> 01:01.910
Czyli póki co jest tak samo,

01:01.910 --> 01:03.820
jak gdybyśmy nie przypisali tutaj

01:03.820 --> 01:05.260
typu i stąd mamy typ any

01:05.260 --> 01:08.610
lub gdybyśmy jawnie ustawili any jako typ.

01:08.610 --> 01:11.810
Ale i tak nieznane jest inne niż każde.

01:11.810 --> 01:15.430
To tutaj działa, ale napotkamy problemy, jeśli mam

01:15.430 --> 01:19.660
inną zmienną, powiedzmy userName, która powinna być ciągiem

01:19.660 --> 01:20.890
znaków.

01:20.890 --> 01:22.860
I to jest niezainicjalizowane

01:22.860 --> 01:27.200
tutaj, ale potem tutaj chcę ustawić userName równe userInput.

01:27.200 --> 01:29.150
Teraz widzisz, że dostajemy błąd.

01:29.150 --> 01:33.010
Typ unknown nie jest możliwy do przypisania do typu string.

01:33.010 --> 01:34.590
Tak więc, userName chce ciąg

01:34.590 --> 01:37.990
i oczywiście nieznany nie jest gwarantowany jako ciąg.

01:37.990 --> 01:41.620
Tutaj przypisałem jeden, ale to tylko przypadek w tej kolejce.

01:41.620 --> 01:44.460
userInput technicznie może mieć dowolną wartość,

01:44.460 --> 01:46.490
ponieważ jest nieznany.

01:46.490 --> 01:47.640
Teraz interesującą rzeczą

01:47.640 --> 01:51.060
jest to, że jeśli przełączę nieznane na any, ten błąd znika, ponieważ

01:51.060 --> 01:53.900
any jest najbardziej elastycznym typem w TypeScript

01:53.900 --> 01:56.810
i zasadniczo wyłącza wszystkie sprawdzanie typu i TypeScript

01:56.810 --> 02:00.950
po prostu mówi: "Poddaję się, rób, co chcesz". Unknown jest nieco bardziej restrykcyjne niż any.

02:00.950 --> 02:05.510
Z unknown, musimy najpierw sprawdzić typ, który jest aktualnie

02:05.510 --> 02:08.820
przechowywany w userInput, zanim będziemy

02:08.820 --> 02:12.200
mogli przypisać go do np. zmiennej, która

02:12.200 --> 02:14.400
chce string.

02:14.400 --> 02:16.180
Tak więc, ponieważ ciąg jest tutaj

02:16.180 --> 02:18.110
pożądany, moglibyśmy sprawdzić,

02:18.110 --> 02:23.110
czy typ userInput jest równy string i TypeScript wykryje to sprawdzenie i zrozumie, że tutaj,

02:23.650 --> 02:26.020
co jest przechowywane w userName, ponieważ

02:26.020 --> 02:29.790
kończy się z tej instrukcji if, gdzie sprawdzam, czy userInput jest

02:29.790 --> 02:31.830
typu string, userInput jest gwarantowane,

02:31.830 --> 02:34.680
że jest ciągiem i dlatego mogę bezpiecznie przypisać

02:34.680 --> 02:36.920
go do userName.

02:36.920 --> 02:39.990
Więc potrzebuję takiego dodatkowego sprawdzenia

02:39.990 --> 02:42.670
typu tutaj z unknown, aby móc przypisać

02:42.670 --> 02:47.560
nieznaną wartość do wartości z ustalonym typem i dlatego unknown

02:47.560 --> 02:50.530
jest lepszym wyborem nad dowolnym, jeśli

02:50.530 --> 02:54.780
wiesz, że nie mogę powiedzieć dokładnie, jaki typ sklepu

02:54.780 --> 02:56.930
tam, może to być liczba, może

02:56.930 --> 02:59.450
to być ciąg, ale wiem, co chcę z nim

02:59.450 --> 03:02.910
zrobić ostatecznie.

03:02.910 --> 03:05.470
Cóż, po prostu dodaj dodatkowe sprawdzenie, aby

03:05.470 --> 03:07.440
upewnić się, że to, co chcesz zrobić,

03:07.440 --> 03:10.240
może być zrobione, więc jeśli chcesz pracować z ciągiem,

03:10.240 --> 03:12.160
masz ciąg i jesteś dobry.

03:12.160 --> 03:14.690
A wtedy unknown jest lepsze niż jakiekolwiek,

03:14.690 --> 03:18.720
bo daje pewność, że nie wolno ci wszystkiego, ale masz przynajmniej

03:18.720 --> 03:20.930
jakiś typ sprawdzający.

03:20.930 --> 03:23.260
Oczywiście, jeśli masz szansę z góry wiedzieć,

03:23.260 --> 03:25.990
że userInput jest zawsze ciągiem, lub zawsze ciągiem

03:25.990 --> 03:28.150
lub liczbą, cóż wtedy powinieneś użyć

03:28.150 --> 03:30.000
string lub takiego typu unii zamiast

03:30.000 --> 03:31.680
unknown.

03:31.680 --> 03:34.460
Tak więc, unknown still to typ, którego nie powinieneś używać

03:34.460 --> 03:36.010
cały czas, ale jest lepszy niż jakikolwiek

03:36.010 --> 03:37.460
z opisanych powodów.
