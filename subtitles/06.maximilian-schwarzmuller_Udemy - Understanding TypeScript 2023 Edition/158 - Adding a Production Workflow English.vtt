WEBVTT

1
00:00:02.130 --> 00:00:04.110
<v Instructor>We prepared our development workflow</v>

2
00:00:04.110 --> 00:00:06.137
for Webpack here, configuring it

3
00:00:06.137 --> 00:00:08.490
for the Webpack dev server, setting the mode

4
00:00:08.490 --> 00:00:10.840
to development, and setting up source maps

5
00:00:10.840 --> 00:00:13.210
to improve our debugging experience,

6
00:00:13.210 --> 00:00:16.570
to give us better error messages and so on.

7
00:00:16.570 --> 00:00:20.150
Now for production, so when we want to prepare our code

8
00:00:20.150 --> 00:00:23.260
to upload it to a server where it then will be served

9
00:00:23.260 --> 00:00:27.070
to our end users, we typically want a different workflow.

10
00:00:27.070 --> 00:00:28.790
Therefore I'll add a new config

11
00:00:28.790 --> 00:00:31.820
called webpack.config.prod.js.

12
00:00:31.820 --> 00:00:33.210
This name is not up to you

13
00:00:33.210 --> 00:00:36.043
because Webpack will not look for it by default.

14
00:00:36.880 --> 00:00:39.710
We'll tell it to look for it in a second, though.

15
00:00:39.710 --> 00:00:41.920
Before we tell it, let's actually copy

16
00:00:41.920 --> 00:00:44.708
all of the development setup here over

17
00:00:44.708 --> 00:00:48.480
to this config.prod file but now let's fine tune it.

18
00:00:48.480 --> 00:00:51.150
We can set mode to production, for example.

19
00:00:51.150 --> 00:00:54.380
This will tell Webpack to do these optimizations,

20
00:00:54.380 --> 00:00:56.550
minify our code and so on,

21
00:00:56.550 --> 00:00:59.220
so you definitely want to set this here.

22
00:00:59.220 --> 00:01:00.440
We'll leave entry.

23
00:01:00.440 --> 00:01:02.910
In output we can't get rid of the public path

24
00:01:02.910 --> 00:01:05.860
because that was required for the Webpack dev server.

25
00:01:05.860 --> 00:01:08.810
Now we will not use it here, because for production,

26
00:01:08.810 --> 00:01:10.430
we want to run the Webpack script

27
00:01:10.430 --> 00:01:12.940
and generate our output written to disc

28
00:01:12.940 --> 00:01:16.900
and not served temporarily on a locally running server.

29
00:01:16.900 --> 00:01:19.350
We can set devtool to none

30
00:01:19.350 --> 00:01:22.090
to not generate any source maps here

31
00:01:22.090 --> 00:01:24.913
because in production we might not need them.

32
00:01:26.140 --> 00:01:30.160
Now the rest can stay as it is, but we will add more.

33
00:01:30.160 --> 00:01:34.620
At the bottom here, I want to add a plugins entry

34
00:01:34.620 --> 00:01:36.220
and set this to an array.

35
00:01:36.220 --> 00:01:41.070
Plugins are extra extensions or, well, plugins

36
00:01:41.070 --> 00:01:43.020
you can add to your Webpack workflow

37
00:01:43.020 --> 00:01:46.080
which will basically be applied to the entire output,

38
00:01:46.080 --> 00:01:47.820
to the entire project.

39
00:01:47.820 --> 00:01:50.190
Rules and module specifically

40
00:01:50.190 --> 00:01:52.870
are applied on a per file level.

41
00:01:52.870 --> 00:01:57.260
Plugins are applied to the general workflow.

42
00:01:57.260 --> 00:01:58.730
Here I want to add a plugin

43
00:01:58.730 --> 00:02:00.620
which automatically deletes everything

44
00:02:00.620 --> 00:02:04.370
in the dist folder before a new output is written there

45
00:02:04.370 --> 00:02:06.540
so that we always just have the latest,

46
00:02:06.540 --> 00:02:09.410
most recent output in the dist folder.

47
00:02:09.410 --> 00:02:11.900
For that, I'll install a brand new package

48
00:02:11.900 --> 00:02:16.900
with --save-dev and that's the clean-webpack-plugin.

49
00:02:19.090 --> 00:02:21.900
And this will help us clean up the dist folder,

50
00:02:21.900 --> 00:02:26.360
in our case, whenever we rebuild our project.

51
00:02:26.360 --> 00:02:29.820
So with that installed, let's import it here at the top.

52
00:02:29.820 --> 00:02:32.090
I'll name it CleanPlugin and import it by

53
00:02:32.090 --> 00:02:36.400
require clean-webpack-plugin

54
00:02:36.400 --> 00:02:39.810
and with it installed in the plugins array at the bottom,

55
00:02:39.810 --> 00:02:44.073
we just call new CleanPlugin.CleanWebpackPlugin

56
00:02:45.422 --> 00:02:46.500
and instantiate this.

57
00:02:46.500 --> 00:02:49.660
This is a constructor function and now instantiate it.

58
00:02:49.660 --> 00:02:51.650
This is all you need to do here

59
00:02:51.650 --> 00:02:53.260
and this will in the end tell Webpack

60
00:02:53.260 --> 00:02:56.490
that before it writes something to thIS output folder,

61
00:02:56.490 --> 00:02:58.593
it will clear everything that is in there.

62
00:02:59.440 --> 00:03:02.020
Now we got the finished production workflow.

63
00:03:02.020 --> 00:03:04.620
Now to use it, let's go to package.json

64
00:03:04.620 --> 00:03:07.280
and there let's adjust this build script.

65
00:03:07.280 --> 00:03:10.510
Here I want to tell Wepback to use this prod file,

66
00:03:10.510 --> 00:03:13.110
this production configuration file

67
00:03:13.110 --> 00:03:15.160
and we do so by adding --config

68
00:03:16.730 --> 00:03:21.140
and then webpack.config.prod.js here.

69
00:03:21.140 --> 00:03:23.610
This here should be whichever file name you chose

70
00:03:23.610 --> 00:03:27.000
and this instructs Webpack to use this configuration file

71
00:03:27.000 --> 00:03:29.730
instead of the default Webpack.config.js

72
00:03:29.730 --> 00:03:32.030
file it normally looks for.

73
00:03:32.030 --> 00:03:34.600
With that if you now run npn run build,

74
00:03:34.600 --> 00:03:36.700
it will build your app for production

75
00:03:36.700 --> 00:03:39.950
which means it gives you this optimized output.

76
00:03:39.950 --> 00:03:42.460
So if you wait, here we got the bundle.js file

77
00:03:42.460 --> 00:03:45.110
and this is now really the optimized code

78
00:03:45.110 --> 00:03:47.880
built for production and this together

79
00:03:47.880 --> 00:03:50.980
with your index.html file and the app.css file

80
00:03:50.980 --> 00:03:53.800
is what you would put onto a server here

81
00:03:53.800 --> 00:03:56.393
if you want to deploy your application.

82
00:03:57.260 --> 00:04:00.440
This is also the end of this module.

83
00:04:00.440 --> 00:04:02.140
Now let me sum up what we learned.

