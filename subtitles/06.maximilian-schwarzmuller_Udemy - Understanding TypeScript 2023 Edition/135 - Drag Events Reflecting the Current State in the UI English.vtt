WEBVTT

1
00:00:02.320 --> 00:00:03.570
<v Instructor>To make it droppable,</v>

2
00:00:03.570 --> 00:00:05.090
we have to go to the clause,

3
00:00:05.090 --> 00:00:07.730
or to the component in our application,

4
00:00:07.730 --> 00:00:11.600
which should in the end act as a drag target.

5
00:00:11.600 --> 00:00:14.120
So here Project List class is the right clause

6
00:00:14.120 --> 00:00:15.870
and there we can implement our second

7
00:00:15.870 --> 00:00:17.150
interface which we added,

8
00:00:17.150 --> 00:00:20.130
the Drag Target interface.

9
00:00:20.130 --> 00:00:23.550
Now, just as the draggable interface,

10
00:00:23.550 --> 00:00:26.510
this forces us to add certain methods.

11
00:00:26.510 --> 00:00:30.600
To be precise here, we need to add the drag over handler,

12
00:00:30.600 --> 00:00:33.500
the drop handler, and the drag leave handler.

13
00:00:33.500 --> 00:00:34.540
So, let's do that.

14
00:00:34.540 --> 00:00:38.640
Maybe all right here below the constructor above configure.

15
00:00:38.640 --> 00:00:40.080
The exact place is up to you,

16
00:00:40.080 --> 00:00:42.880
the order of methods does not matter.

17
00:00:42.880 --> 00:00:45.680
So here I will add the drag over handler,

18
00:00:45.680 --> 00:00:49.730
where we get our drag event.

19
00:00:49.730 --> 00:00:51.850
I will then add the drop handler here,

20
00:00:51.850 --> 00:00:54.203
where we also get our drag event.

21
00:00:55.710 --> 00:00:59.130
And last but not least, the drag leave handler,

22
00:00:59.130 --> 00:01:02.260
where we also get a drag event.

23
00:01:02.260 --> 00:01:05.410
Now these events, by the way, hold different kinds of data,

24
00:01:05.410 --> 00:01:08.594
but they're all based on the case core event type.

25
00:01:08.594 --> 00:01:11.860
Now we get a couple of different things to do.

26
00:01:11.860 --> 00:01:15.120
Let's start with the drag over handler maybe.

27
00:01:15.120 --> 00:01:18.770
In the drag over handler, I wanna change the appearance

28
00:01:18.770 --> 00:01:21.900
of my box or of the unordered list in there,

29
00:01:21.900 --> 00:01:24.470
to visualize that this is a droppable area.

30
00:01:24.470 --> 00:01:26.960
Because right now when we drag around element,

31
00:01:26.960 --> 00:01:30.200
we get no clue of where we can drop it, right?

32
00:01:30.200 --> 00:01:33.410
Nothing changes on the UI, so I wanna change this.

33
00:01:33.410 --> 00:01:35.950
To change this I'll add a certain css clause

34
00:01:35.950 --> 00:01:38.680
to the unordered list, which you you find in app.css.

35
00:01:38.680 --> 00:01:42.080
The droppable clause which will change the background color

36
00:01:42.080 --> 00:01:45.460
and therefore in here, for a start,

37
00:01:45.460 --> 00:01:49.070
we just need to get access to our unordered list element.

38
00:01:49.070 --> 00:01:53.850
We can do so by reaching out to this element, querySelectror

39
00:01:53.850 --> 00:01:57.380
uL and add an exclamation mark because there will

40
00:01:57.380 --> 00:01:59.440
always be an unordered list there, even if

41
00:01:59.440 --> 00:02:00.963
it hold no elements yet.

42
00:02:02.560 --> 00:02:05.570
We just have to make sure that this key word works here

43
00:02:05.570 --> 00:02:08.600
and we can do so by autobinding this here

44
00:02:08.600 --> 00:02:11.050
to make sure that this keyword is bound

45
00:02:11.050 --> 00:02:12.840
to the surrounding clause.

46
00:02:12.840 --> 00:02:15.610
Then with the list elements selected, we can use

47
00:02:15.610 --> 00:02:19.550
the clause list property of dom elements,

48
00:02:19.550 --> 00:02:22.090
so this is Vanilla JavaScript here again,

49
00:02:22.090 --> 00:02:26.080
and call the add method there to add the droppable clause

50
00:02:26.080 --> 00:02:27.540
to it.

51
00:02:27.540 --> 00:02:29.360
Now with that, we of course have to make sure that

52
00:02:29.360 --> 00:02:33.000
the dragOverHandler actually is fired when we drag something

53
00:02:33.000 --> 00:02:37.333
over this element here, over this rendered section.

54
00:02:39.090 --> 00:02:42.400
To do that in the configure method, where we already have

55
00:02:42.400 --> 00:02:46.020
one listener here, listening to our state changes,

56
00:02:46.020 --> 00:02:50.280
I will also register listeners on the element itself.

57
00:02:50.280 --> 00:02:53.380
The first EventListener there is, of course, the drag over

58
00:02:53.380 --> 00:02:54.760
event and I'll bind this

59
00:02:54.760 --> 00:02:58.090
to the dragOverHandler, unsurprisingly.

60
00:02:58.090 --> 00:03:01.060
Then I'll repeat this because I also want to listen

61
00:03:01.060 --> 00:03:03.740
to the dragLeave event and bind this

62
00:03:03.740 --> 00:03:06.870
to the dragLeaveHandler and to the drop event

63
00:03:06.870 --> 00:03:08.700
and bind this to the dropHandler

64
00:03:08.700 --> 00:03:10.583
because we'll also need that later.

65
00:03:11.580 --> 00:03:16.500
So, with that, we've got this drag over event listener

66
00:03:16.500 --> 00:03:18.797
and the dragOverHandler connected,

67
00:03:18.797 --> 00:03:21.780
but we also got some errors in the code now.

68
00:03:21.780 --> 00:03:24.610
Well, that should be the unused event objects here,

69
00:03:24.610 --> 00:03:27.430
so for the moment, to satisfy typescript,

70
00:03:27.430 --> 00:03:28.810
let's just blank them out.

71
00:03:28.810 --> 00:03:31.477
We'll need them later, but for the moment,

72
00:03:31.477 --> 00:03:33.690
to make this work, let's blank them out

73
00:03:33.690 --> 00:03:35.677
by using underscores here to tell typescript,

74
00:03:35.677 --> 00:03:37.670
"We're fine not using them at the moment."

75
00:03:37.670 --> 00:03:38.950
Now this compiles

76
00:03:38.950 --> 00:03:42.910
and now back in the project, when we add a new project here,

77
00:03:42.910 --> 00:03:45.320
and I drag this, you see when I drag this

78
00:03:45.320 --> 00:03:49.620
over finished projects, the background here got light blue.

79
00:03:49.620 --> 00:03:53.270
Here over active projects, it got light rose,

80
00:03:53.270 --> 00:03:56.220
like a slight pink color.

81
00:03:56.220 --> 00:03:58.650
Just to show this again, if I reload, you see now

82
00:03:58.650 --> 00:04:02.670
we have white backgrounds in the projects, whoops,

83
00:04:02.670 --> 00:04:06.490
and as soon as I start dragging, this here gets light pink

84
00:04:06.490 --> 00:04:09.470
background and when I drag it over finished projects,

85
00:04:09.470 --> 00:04:13.360
the box background changes to light blue.

86
00:04:13.360 --> 00:04:16.050
Now it never changes back to white because we never

87
00:04:16.050 --> 00:04:19.480
removed that droppable clause, but it is a first step.

88
00:04:19.480 --> 00:04:21.700
Of course, dropping still does not work.

89
00:04:21.700 --> 00:04:23.890
Dropping it here does not add the project

90
00:04:23.890 --> 00:04:25.300
because how would it?

91
00:04:25.300 --> 00:04:28.200
We haven't added any logic for this.

92
00:04:28.200 --> 00:04:33.200
So let's make sure to also update the styling when we stop,

93
00:04:33.410 --> 00:04:36.390
when we leave the element.

94
00:04:36.390 --> 00:04:39.670
When we basically drag it over here and then go away.

95
00:04:39.670 --> 00:04:42.640
Make sure that the blue background goes away in that case,

96
00:04:42.640 --> 00:04:44.870
that's what I want to do next.

97
00:04:44.870 --> 00:04:47.020
For that we can use the dragLeaverHandler here

98
00:04:47.020 --> 00:04:50.990
because that will fire whenever we leave this element

99
00:04:50.990 --> 00:04:53.019
with our dragged element.

100
00:04:53.019 --> 00:04:57.550
Now there I of course also want to get access

101
00:04:57.550 --> 00:05:01.420
to my unordered list, so I'll copy that code,

102
00:05:01.420 --> 00:05:05.553
but then there, I wanna remove the droppable clause.

103
00:05:06.448 --> 00:05:11.220
We should now also autobind this so that the this keyword

104
00:05:11.220 --> 00:05:13.120
here refers to the surrounding clause.

105
00:05:14.040 --> 00:05:17.740
If we save that, we add a new element here.

106
00:05:17.740 --> 00:05:18.773
Let's give it a try.

107
00:05:20.310 --> 00:05:23.740
If I start dragging, you see we have our background here

108
00:05:24.610 --> 00:05:27.120
and if I leave, it goes away.

109
00:05:27.120 --> 00:05:29.930
So now the background really is updated.

110
00:05:29.930 --> 00:05:33.670
You see some flickering here because the dragLeave event

111
00:05:33.670 --> 00:05:37.190
also fires if you go from having the mouse cursor

112
00:05:37.190 --> 00:05:40.960
over the background to having it over a rendered element,

113
00:05:40.960 --> 00:05:42.500
but that should be fine here.

114
00:05:42.500 --> 00:05:43.620
It's no big deal here.

115
00:05:43.620 --> 00:05:47.320
So actually, we got the desired effect, I would say.

116
00:05:47.320 --> 00:05:50.950
So the UI is updated just the way it should now,

117
00:05:50.950 --> 00:05:53.140
but of course we're not able to drop

118
00:05:53.140 --> 00:05:54.700
and really transfer data,

119
00:05:54.700 --> 00:05:56.303
so that will be the next step.

