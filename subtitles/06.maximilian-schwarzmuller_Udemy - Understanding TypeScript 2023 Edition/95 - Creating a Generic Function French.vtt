WEBVTT

00:02.190 --> 00:04.480
Donc, pour commencer avec nos propres génériques.

00:04.480 --> 00:06.820
Ci-dessous le code commenté.

00:06.820 --> 00:09.210
Je vais commencer par une fonction générique.

00:09.210 --> 00:11.430
Vous pouvez construire des classes et des fonctions

00:11.430 --> 00:15.350
génériques. Je vais vous montrer les deux et je vais commencer par une fonction.

00:15.350 --> 00:17.490
Maintenant, disons que nous voulons

00:17.490 --> 00:22.490
avoir une fonction qui fusionne deux objets et renvoie un nouvel objet.

00:23.660 --> 00:25.380
Nous pourrions donc l'appeler ici "fusion".

00:25.380 --> 00:28.803
Et nous voulons obtenir l'objet A et l'objet B en entrée.

00:30.010 --> 00:33.990
Bien sûr, nous pourrions écrire cette fonction d'une certaine manière.

00:33.990 --> 00:36.660
Nous pourrions dire que ceci est de type

00:36.660 --> 00:39.033
objet et ceci est de type objet.

00:39.960 --> 00:41.760
Et ce que fait cette fonction, c'est

00:41.760 --> 00:45.200
qu'elle renvoie le résultat de l'assignation de l'objet.

00:45.200 --> 00:48.130
Où j'obtiens l'objet A et l'objet B.

00:48.130 --> 00:50.230
Alors bien sûr, puisque nous avons cette méthode d'assignation

00:50.230 --> 00:53.000
d'objet déjà intégrée dans le javascript normal.

00:53.000 --> 00:55.820
Nous pourrions nous demander si nous avons vraiment besoin d'une fonction de fusion,

00:55.820 --> 00:58.140
mais bien sûr, vous pourriez faire un travail supplémentaire ici.

00:58.140 --> 01:00.480
Vous pourriez l'enrichir d'informations supplémentaires,

01:00.480 --> 01:01.833
d'options supplémentaires et,

01:01.833 --> 01:04.730
en fin de compte, il ne s'agit que d'une démo, d'un exemple.

01:04.730 --> 01:07.510
Donc ce serait valide, nous pourrions appeler

01:07.510 --> 01:11.830
la fusion ici, et consigner son résultat dans la console, comme ceci.

01:11.830 --> 01:15.130
Et ensuite on passe un objet qui a une clé de nom et

01:15.130 --> 01:17.570
un deuxième objet qui a un âge et si on

01:17.570 --> 01:20.010
exécute ça et qu'on enregistre ça.

01:20.010 --> 01:22.780
Ici, dans le navigateur, nous obtenons effectivement cette sortie.

01:22.780 --> 01:24.280
Donc on a cet objet de fusion.

01:24.280 --> 01:27.050
Maintenant cela fonctionne, le

01:27.050 --> 01:29.660
problème que nous avons avec cela

01:31.660 --> 01:33.300
est que si nous essayons

01:33.300 --> 01:38.097
de stocker cette fusion nom max, et âge 30.

01:39.620 --> 01:44.620
Si nous essayons de stocker ceci ici, je ne peux pas accéder au nom sur le résultat, je

01:45.770 --> 01:48.730
ne peux pas accéder à l'âge sur les résultats de cet

01:48.730 --> 01:50.020
objet fusionné.

01:50.020 --> 01:52.360
Même si nous savons que les deux existeront.

01:52.360 --> 01:54.830
Parce que typescript ne le sait pas.

01:54.830 --> 01:57.100
Typescript ne peut pas le savoir.

01:57.100 --> 01:59.310
Parce que nous lui disons simplement, tu vas obtenir un

01:59.310 --> 02:02.370
objet et à la fin nous avons tapé en premier que nous retournons un objet.

02:02.370 --> 02:04.790
Ce qui est correct, mais qui n'apporte pas toutes

02:04.790 --> 02:07.810
les informations que nous pourrions utiliser ici.

02:07.810 --> 02:09.970
Maintenant, bien sûr, nous pouvons toujours faire

02:09.970 --> 02:12.080
un casting de type, nous pouvons dire à Typescript

02:12.080 --> 02:14.220
que ce que nous récupérons est un objet où nous avons

02:14.220 --> 02:15.960
une clé de nom et une clé d'âge.

02:15.960 --> 02:19.020
Mais c'est vraiment encombrant si nous devons faire ça.

02:19.020 --> 02:21.420
Donc ici, les génériques peuvent nous aider.

02:21.420 --> 02:23.750
Nous transformons cette fonction en une fonction générique

02:23.750 --> 02:26.470
en ajoutant ces parenthèses angulaires après le nom de la fonction.

02:26.470 --> 02:29.740
Et ensuite, nous définissons les identifiants Q.

02:29.740 --> 02:33.190
En général, on commence par T, pour type.

02:33.190 --> 02:35.600
Mais vous pouvez utiliser n'importe quel identifiant ici,

02:35.600 --> 02:37.730
il n'est pas nécessaire qu'il s'agisse d'un caractère

02:37.730 --> 02:39.860
unique mais la convention est d'utiliser un caractère

02:39.860 --> 02:42.250
unique et typiquement, si vous n'avez qu'un seul type générique,

02:42.250 --> 02:43.690
vous le nommez T.

02:43.690 --> 02:46.640
Et puis vous dites, eh bien ce type générique ici, il est maintenant disponible

02:46.640 --> 02:48.510
à l'intérieur de cette fonction.

02:48.510 --> 02:51.453
On peut donc dire que ce que nous obtenons ici est de type T.

02:53.090 --> 02:55.740
Ça a l'air étrange, on y arrivera sans problème.

02:55.740 --> 02:57.280
Maintenant, nous avons deux arguments dont

02:57.280 --> 02:59.570
nous ne savons pas exactement à quoi ils ressembleront.

02:59.570 --> 03:02.450
Je vais donc accepter un deuxième type générique ici.

03:02.450 --> 03:04.340
Il suffit d'ajouter une virgule dans les

03:04.340 --> 03:07.400
parenthèses angulaires, Et puis on continue dans l'alphabet.

03:07.400 --> 03:10.490
Ainsi, le deuxième paramètre ou type générique

03:10.490 --> 03:15.490
que vous pouvez utiliser dans une fonction s'appelle généralement U.

03:15.630 --> 03:18.560
On peut donc dire qu'il s'agit du type U.

03:18.560 --> 03:22.100
Ok, maintenant, qu'est-ce que ça nous apporte ?

03:22.100 --> 03:25.450
Eh bien, beaucoup en fait, comme vous pouvez le voir avec

03:25.450 --> 03:28.620
cette seule fonction si vous survolez la fusion, typescript

03:28.620 --> 03:33.230
déduit que cette fonction renvoie l'intersection de T et U.

03:33.230 --> 03:36.800
Et nous pourrions bien sûr aussi le définir explicitement comme ceci mais nous

03:36.800 --> 03:38.040
n'avons même pas besoin de

03:38.040 --> 03:42.010
le faire parce que object assign retourne une intersection et donc puisque nous avons

03:42.010 --> 03:44.150
retourné un résultat de object assign, typescript

03:44.150 --> 03:45.740
comprend automatiquement que cette

03:45.740 --> 03:48.390
fonction retourne l'intersection.

03:48.390 --> 03:50.320
En quoi est-ce utile alors ?

03:50.320 --> 03:52.510
Si nous survolons maintenant l'objet fusionné,

03:52.510 --> 03:54.260
nous voyons qu'avec ce seul type de

03:54.260 --> 03:56.450
script, il comprend que ce que nous stockons

03:56.450 --> 03:59.230
dans l'objet fusionné est l'intersection de ces deux

03:59.230 --> 04:01.690
types d'objets, parce qu'il voit que nous passons

04:01.690 --> 04:04.220
dans ces objets, qui sont de ces types d'objets qu'il

04:04.220 --> 04:06.100
déduit.

04:06.100 --> 04:08.840
Chaîne de nom et numéro d'âge.

04:08.840 --> 04:11.590
Et que notre fonction renvoie l'intersection.

04:11.590 --> 04:13.630
Pourquoi est-il capable de déduire cela maintenant

04:13.630 --> 04:16.313
et pas avec l'objet que nous avions auparavant ?

04:17.220 --> 04:19.560
Parce que l'objet est un type très peu spécifique.

04:19.560 --> 04:22.490
Nous disons n'importe quel objet et oui donc typescript est

04:22.490 --> 04:24.530
capable de déduire que nous retournons l'intersection

04:24.530 --> 04:26.600
d'objet et d'objet.

04:26.600 --> 04:29.570
Mais l'intersection de deux objets inconnus n'est

04:29.570 --> 04:32.270
qu'un nouvel objet inconnu qui n'offre aucune

04:32.270 --> 04:35.420
information de type supplémentaire à Typescript.

04:35.420 --> 04:38.170
Avec les types génériques, ce que nous disons

04:38.170 --> 04:43.170
à Typescript, c'est que ces deux paramètres peuvent être et seront souvent de types

04:43.282 --> 04:47.100
différents. Ainsi, Typescript est capable de comprendre que

04:47.100 --> 04:49.690
nous ne travaillons pas simplement avec un

04:49.690 --> 04:53.150
type d'objet aléatoire, mais que nous allons obtenir des

04:53.150 --> 04:55.250
données de type différent.

04:55.250 --> 04:56.940
Et que cette fonction renvoie

04:56.940 --> 04:59.770
globalement l'intersection de ces données.

04:59.770 --> 05:01.773
Et donc, le script est capable de comprendre

05:01.773 --> 05:04.390
que ce que nous stockons ici dans l'objet fusionné

05:04.390 --> 05:07.910
est une telle intersection des données de ces deux entrées.

05:07.910 --> 05:09.530
Parce que maintenant, nous n'avons

05:09.530 --> 05:14.423
pas seulement affaire à des objets inconnus, mais à des types très spécifiques.

05:15.330 --> 05:20.150
Et donc maintenant, si je console le log de l'objet fusionné ici, cela fonctionne

05:20.150 --> 05:22.980
sans erreur comme vous pouvez le voir.

05:22.980 --> 05:26.770
Ici, j'en imprime 30 à cause des types génériques.

05:26.770 --> 05:29.040
Nous donnons à typescript l'information supplémentaire

05:29.040 --> 05:31.950
que nous ne savons pas exactement les types seront sûrs, il

05:31.950 --> 05:34.780
y aura des objets ici nous pouvons le dire.

05:34.780 --> 05:36.550
Mais nous ne savons pas si c'est un objet avec une

05:36.550 --> 05:38.640
clé de nom, avec une clé d'âge, avec une clé de hobbies.

05:38.640 --> 05:41.130
Nous ne savons pas et nous ne nous soucions pas, nous

05:41.130 --> 05:43.360
ne nous soucions pas de l'objet exact ici, nous

05:43.360 --> 05:46.050
ne voulons pas spécifier que cela doit être de ce type.

05:46.050 --> 05:47.490
Parce qu'alors, tout d'un coup,

05:47.490 --> 05:50.520
si j'ajoute des hobbies, nous aurions un problème.

05:50.520 --> 05:52.540
Je ne veux donc pas être aussi restrictif.

05:52.540 --> 05:54.480
Je veux juste dire que c'est de n'importe quel

05:54.480 --> 05:56.940
type, ce qui ne m'intéresse pas, mais c'est très probablement

05:56.940 --> 05:58.590
un type différent de celui-ci.

05:58.590 --> 06:00.860
Et si c'était la même chose, ce serait bien aussi.

06:00.860 --> 06:03.030
Mais Typescript comprend que nous avons

06:03.030 --> 06:06.530
des types spécifiques pour ces deux paramètres et que nous retournons

06:06.530 --> 06:08.800
l'intersection des deux.

06:08.800 --> 06:12.660
Au lieu d'avoir n'importe quel objet non spécifique ici.

06:12.660 --> 06:14.770
Maintenant, la magie ici n'est pas seulement

06:14.770 --> 06:16.210
que nous disons à Typecript que

06:16.210 --> 06:18.410
nous avons deux types différents ici.

06:18.410 --> 06:20.740
Mais ces types ne sont pas gravés dans la pierre lorsque

06:20.740 --> 06:22.870
nous définissons cette fonction, mais ils sont

06:22.870 --> 06:25.810
définis dynamiquement lorsque nous appelons la fonction.

06:25.810 --> 06:27.430
Donc, ici, nous appelons la fonction

06:27.430 --> 06:30.560
et typescript déduit les types des deux arguments.

06:30.560 --> 06:33.890
Pour T, il remplit essentiellement un type d'objet avec un objet ayant une propriété

06:33.890 --> 06:36.677
nom qui contient une chaîne de caractères et une propriété hobbies

06:36.677 --> 06:39.600
qui contient un tableau de chaînes de caractères.

06:39.600 --> 06:43.290
Et pour U, il remplit un type d'objet avec

06:43.290 --> 06:47.990
la propriété age où age est de type nombre.

06:47.990 --> 06:51.030
Maintenant, lorsque nous appelons à nouveau cette fonction

06:51.030 --> 06:53.890
dans une autre ligne et que nous transmettons différents

06:53.890 --> 06:57.090
objets et que je stocke cela dans une nouvelle constante avec

06:57.090 --> 06:59.920
un nouveau nom, alors bien sûr, différents types sont

06:59.920 --> 07:03.130
remplis pour T et U pour cet appel de fonction.

07:03.130 --> 07:05.350
Vous pouvez également indiquer spécifiquement

07:05.350 --> 07:07.780
à Typescript les types qu'il doit remplir en

07:07.780 --> 07:09.110
ajoutant des crochets après

07:09.110 --> 07:11.320
le nom de la fonction lorsque vous l'appelez,

07:11.320 --> 07:13.010
puis vous indiquerez vos propres

07:13.010 --> 07:15.200
types pour T et U.

07:15.200 --> 07:18.030
Nous pourrions dire à Typescript que T doit être de type

07:18.030 --> 07:20.180
string pour cet appel de fonction et que U doit

07:20.180 --> 07:22.710
être de type number mais, bien sûr, Typescript se

07:22.710 --> 07:23.950
plaindrait des valeurs

07:23.950 --> 07:25.940
concrètes que nous passons ici.

07:25.940 --> 07:28.270
Parce qu'il est clair que ce n'est pas une chaîne de caractères

07:28.270 --> 07:30.190
et que si nous corrigeons cela, il est clair

07:30.190 --> 07:32.280
que ce ne serait pas de type nombre.

07:32.280 --> 07:34.650
Donc ici, nous pourrions être très spécifiques

07:34.650 --> 07:38.620
et dire que le premier argument ou le type T pour être précis pour

07:38.620 --> 07:41.700
cet appel de fonction sera un type d'objet où nous

07:41.700 --> 07:45.310
avons une propriété nom qui est de type string et une propriété

07:45.310 --> 07:48.850
hobbies qui est de type string array.

07:48.850 --> 07:52.970
Et le type concret pour U, pour cet appel de fonction sera un objet

07:52.970 --> 07:55.800
où nous avons une propriété âge qui devrait

07:55.800 --> 07:57.320
être de type nombre.

07:57.320 --> 08:00.220
Et maintenant nous serions bien et il n'y aurait

08:00.220 --> 08:02.730
plus d'erreurs et cela fonctionnerait.

08:02.730 --> 08:05.060
Mais c'est redondant, vous pouvez absolument

08:05.060 --> 08:07.310
le faire et il est important de comprendre

08:07.310 --> 08:10.070
que c'est en fin de compte ce que sont les génériques,

08:10.070 --> 08:12.990
que vous pouvez remplir différents types concrets pour

08:12.990 --> 08:15.170
différents appels de fonction.

08:15.170 --> 08:16.930
Mais nous n'avons pas besoin de le faire

08:16.930 --> 08:20.110
ici, car Typescript déduit simplement les types des valeurs que

08:20.110 --> 08:22.170
nous passons comme arguments.

08:22.170 --> 08:25.120
Et ensuite, il place les types inférés

08:25.120 --> 08:28.240
pour T et U pour cet appel de fonction.

08:28.240 --> 08:31.283
C'est ainsi que les génériques fonctionnent dans les coulisses en fin de compte.
