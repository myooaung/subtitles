WEBVTT

00:02.130 --> 00:06.137
教师：我们在这里准备了Webpack的开发工作流,

00:06.137 --> 00:08.490
为Webpack开发服务器配置它,

00:08.490 --> 00:16.570
将模式设置为开发, 并设置源映射以改善调试体验, 提供更好的错误消息等｡

00:16.570 --> 00:20.150
现在, 对于生产, 当我们要准备代码以将其上传到服务器,

00:20.150 --> 00:27.070
然后将其提供给最终用户时, 我们通常需要不同的工作流｡

00:27.070 --> 00:31.820
因此, 我将添加一个名为webpack的新配置｡

00:31.820 --> 00:31.820
配置 产品 js的｡ 

00:31.820 --> 00:36.043
此名称不由您决定, 因为默认情况下Webpack不会查找它｡

00:36.880 --> 00:39.710
不过, 我们会让它马上去找｡ 

00:39.710 --> 00:48.480
在我们讲述之前, 让我们将这里的所有开发设置实际复制到此配置｡

00:48.480 --> 00:48.480
prod文件, 但现在让我们对其进行微调｡ 

00:48.480 --> 00:51.150
例如, 我们可以设置生产模式｡ 

00:51.150 --> 00:54.380
这将告诉Webpack进行这些优化,

00:54.380 --> 00:59.220
缩小我们的代码等等, 所以你肯定要在这里设置它｡

00:59.220 --> 01:00.440
我们留下入口｡ 

01:00.440 --> 01:05.860
在输出中, 我们不能去掉公共路径, 因为Webpack开发服务器需要公共路径｡

01:05.860 --> 01:08.810
现在我们将不在这里使用它, 因为对于生产,

01:08.810 --> 01:12.940
我们希望运行Webpack脚本并生成写入磁盘的输出,

01:12.940 --> 01:16.900
而不是临时在本地运行的服务器上提供｡

01:16.900 --> 01:19.350
我们可以将devtool设置为none,

01:19.350 --> 01:24.913
这样就不会在这里生成任何源代码映射, 因为在生产中我们可能不需要它们｡

01:26.140 --> 01:30.160
现在剩下的可以保持原样, 但我们会增加更多｡ 

01:30.160 --> 01:36.220
在底部这里, 我想添加一个插件条目, 并将其设置为数组｡

01:36.220 --> 01:43.020
插件是额外的扩展, 或者说, 您可以添加到Webpack工作流程中的插件,

01:43.020 --> 01:46.080
这些插件基本上将应用于整个输出,

01:46.080 --> 01:47.820
整个项目｡

01:47.820 --> 01:52.870
规则和模块专门应用于每个文件级别｡

01:52.870 --> 01:57.260
插件应用于常规工作流｡ 

01:57.260 --> 01:58.730
在这里我想添加一个插件,

01:58.730 --> 02:04.370
它会在新的输出被写入dist文件夹之前自动删除dist文件夹中的所有内容,

02:04.370 --> 02:09.410
以便我们总是在dist文件夹中拥有最新的输出｡

02:09.410 --> 02:11.900
为此, 我将安装一个全新的包--save-dev,

02:11.900 --> 02:16.900
这就是clean-webpack-plugin｡

02:19.090 --> 02:21.900
这将帮助我们清理dist文件夹,

02:21.900 --> 02:26.360
在我们的情况下, 每当我们重建我们的项目｡

02:26.360 --> 02:29.820
安装后, 让我们在顶部导入它｡ 

02:29.820 --> 02:32.090
我将其命名为CleanPlugin, 并通过require

02:32.090 --> 02:36.400
clean-webpack-plugin导入它, 将其安装在底部的插件数组中,

02:36.400 --> 02:44.073
我们将其命名为new CleanPlugin｡

02:44.073 --> 02:44.073
CleanWebpackPlugin并将其实例化

02:46.500 --> 02:49.660
这是一个构造函数, 现在实例化它｡ 

02:49.660 --> 02:51.650
这就是您需要在这里做的所有事情,

02:51.650 --> 02:53.260
这将在最后告诉Webpack,

02:53.260 --> 02:58.593
在它将一些东西写入到这个输出文件夹之前, 它将清除那里的所有内容｡

02:59.440 --> 03:02.020
现在我们有了完整的生产工作流程｡ 

03:02.020 --> 03:07.280
现在要用它, 我们去包吧｡  json, 然后调整这个构建脚本｡

03:07.280 --> 03:10.510
在这里, 我想告诉Wepback使用这个prod文件, 这个生产配置文件,

03:10.510 --> 03:21.140
我们通过添加--config和webpack来实现｡

03:21.140 --> 03:21.140
配置 产品 在这里｡ 

03:21.140 --> 03:29.730
此处的名称应该是您选择的任何文件名, 这将指示Webpack使用此配置文件而不是默认Webpack｡

03:29.730 --> 03:29.730
配置 js文件中查找｡

03:32.030 --> 03:34.600
有了它, 如果你现在运行npn run build,

03:34.600 --> 03:39.950
它会为生产构建你的应用程序, 这意味着它会给你这个优化的输出｡

03:39.950 --> 03:45.110
所以如果你等一下, 这里我们有一捆｡  js文件, 这是为生产而构建的优化代码,

03:45.110 --> 03:50.980
这与索引一起｡

03:50.980 --> 03:50.980
html文件和应用程序｡  css文件是您在部署应用程序时放置在服务器上的文件｡

03:57.260 --> 04:00.440
本模块到此结束｡ 

04:00.440 --> 04:02.140
现在让我总结一下我们所学到的｡ 
