WEBVTT

00:02.260 --> 00:03.920
Explicatif : Il est temps de gérer l'état

00:03.920 --> 00:05.340
du composant App, car lorsque nous

00:05.340 --> 00:07.240
mettons à jour le tableau comme ceci, le composant

00:07.240 --> 00:08.880
ne sera pas rendu à nouveau.

00:08.880 --> 00:10.530
C'est comme ça que React fonctionne.

00:10.530 --> 00:12.590
Dans notre composant de fonction, nous pouvons

00:12.590 --> 00:15.000
gérer l'état avec le crochet useState.

00:15.000 --> 00:16.820
Et encore une fois, si vous ne savez

00:16.820 --> 00:18.750
pas cela ou si les composants d'état ou

00:18.750 --> 00:21.120
de fonction ou les hooks ne vous disent rien, consultez

00:21.120 --> 00:23.810
certainement des ressources dédiées à React comme

00:23.810 --> 00:26.480
mon cours React, the complete guide.

00:26.480 --> 00:29.870
Donc, maintenant je veux gérer mes todos ici avec un état, et pour

00:29.870 --> 00:31.760
cela je vais effacer ce todo factice

00:31.760 --> 00:33.060
avec lequel j'ai commencé,

00:33.060 --> 00:36.430
et à la place initialiser l'état en appelant useState et à cela

00:36.430 --> 00:39.080
cependant, je peux passer mon tableau vide comme

00:39.080 --> 00:41.210
valeur d'état de départ de sorte qu'initialement

00:41.210 --> 00:44.510
mon état est un tableau vide.

00:44.510 --> 00:47.100
Maintenant, useState renvoie toujours un tableau

00:47.100 --> 00:49.370
avec exactement deux éléments.

00:49.370 --> 00:52.070
Le premier élément est le dernier instantané d'état

00:52.070 --> 00:53.630
pour ce cycle de rendu.

00:53.630 --> 00:55.070
Et le deuxième argument, le deuxième

00:55.070 --> 00:56.720
élément du tableau, est une fonction

00:56.720 --> 00:58.860
permettant de mettre à jour cet état et de rendre

00:58.860 --> 01:01.110
à nouveau le composant.

01:01.110 --> 01:02.660
Nous pouvons utiliser la restructuration

01:02.660 --> 01:05.060
des tableaux, que nous avons apprise plus tôt dans le cours,

01:05.060 --> 01:07.060
pour extraire ces deux éléments et les stocker

01:07.060 --> 01:09.230
dans des constantes distinctes.

01:09.230 --> 01:10.900
Et puis ici nous avons les todos

01:10.900 --> 01:13.103
et disons une fonction nommée setTodos.

01:14.920 --> 01:16.820
Avec cela, nous avons toujours notre

01:16.820 --> 01:19.530
tableau de todos et maintenant ici dans le todoAddHandler,

01:19.530 --> 01:21.480
je veux appeler setTodos et définir

01:21.480 --> 01:24.430
mon tableau de todos à un nouveau tableau, qui a le nouveau

01:24.430 --> 01:27.373
todoText ajouté à lui.

01:28.240 --> 01:29.283
Pour cela, nous

01:30.400 --> 01:32.130
pouvons bien sûr passer dans

01:32.130 --> 01:34.100
un nouveau tableau et ajouter

01:34.100 --> 01:36.530
un nouvel objet, disons avec un ID,

01:36.530 --> 01:38.540
où nous créons un ID aléatoire

01:38.540 --> 01:42.530
avec Math. random(). toString.

01:42.530 --> 01:44.830
Ce n'est pas vraiment unique, mais c'est suffisant

01:44.830 --> 01:46.620
ici, et nous avons aussi notre texte, qui

01:46.620 --> 01:48.760
est la valeur du texte que je reçois ici.

01:48.760 --> 01:51.910
Mais bizarrement, j'ai une erreur ici.

01:51.910 --> 01:54.790
Et l'erreur que nous obtenons est que cet argument

01:54.790 --> 01:56.860
n'est pas assignable.

01:56.860 --> 01:59.630
En fait, c'est quelque chose qui s'attend

01:59.630 --> 02:01.970
à avoir un tableau de rien du tout.

02:01.970 --> 02:03.590
Et ce n'est, bien sûr, pas ce que vous voulez ici.

02:03.590 --> 02:06.010
Nous ne voulons pas avoir un éventail de rien comme état.

02:06.010 --> 02:07.110
Pourquoi cela se produit-il ?

02:07.950 --> 02:11.800
Parce qu'ici, lorsque j'initialise useState avec un tableau vide,

02:11.800 --> 02:15.040
TypeScript déduit à quoi ressemblera notre état, si je

02:15.040 --> 02:17.060
l'initialise avec une chaîne, TypeScript

02:17.060 --> 02:20.130
déduira que mon état est une chaîne.

02:20.130 --> 02:23.010
Donc, si j'enlève temporairement ceci et que je passe un texte,

02:23.010 --> 02:24.123
il sera accepté.

02:25.160 --> 02:26.137
Si je le passe dans un tableau,

02:26.137 --> 02:28.260
TypeScript s'attend à ce que ce soit un tableau

02:28.260 --> 02:30.080
mais pas un tableau de quoi que ce soit, mais

02:30.080 --> 02:32.000
toujours un tableau vide.

02:32.000 --> 02:36.070
Donc un tableau de rien du tout, ce que bien sûr je ne veux pas ici.

02:36.070 --> 02:38.050
Pour résoudre ce problème, nous devons dire à

02:38.050 --> 02:40.460
React à quoi ressemblera notre domaine au fil du temps.

02:40.460 --> 02:42.920
Et pour cela, nous pouvons à nouveau utiliser useState

02:42.920 --> 02:44.630
qui est une fonction générique, car

02:44.630 --> 02:48.080
nous pouvons passer dans la structure de notre domaine.

02:48.080 --> 02:51.240
Donc, quel est le type de données de notre état, et là

02:51.240 --> 02:54.200
nous pouvons passer que notre état devrait être

02:54.200 --> 02:56.253
un tableau d'objets, pour être précis

02:57.210 --> 02:59.570
un tableau d'objets où nous avons une propriété

02:59.570 --> 03:02.750
ID qui est une chaîne, et une propriété text, qui est

03:02.750 --> 03:04.860
une chaîne.

03:04.860 --> 03:08.050
Et maintenant, cette mise à jour de l'état est autorisée.

03:08.050 --> 03:10.100
Il est bien sûr possible de l'écrire ici, mais comme nous en aurons

03:10.100 --> 03:12.410
besoin à différents endroits dans l'application, je vais créer un

03:12.410 --> 03:16.710
nouveau fichier et le nommer todo. modèle. ts.

03:16.710 --> 03:18.210
Le nom du fichier est à votre discrétion.

03:18.210 --> 03:19.940
Et ici, je veux exporter essentiellement

03:19.940 --> 03:21.710
une interface nommée Todo où je veux

03:21.710 --> 03:24.080
juste décrire comment notre ID Todo devrait ressembler

03:24.080 --> 03:25.440
dans mon application. Je veux

03:25.440 --> 03:27.430
avoir un ID de type string, et une propriété

03:27.430 --> 03:30.190
texte de type string.

03:30.190 --> 03:34.420
Et avec cette exportation ici dans le composant de l'application,

03:34.420 --> 03:35.900
nous pouvons l'importer,

03:35.900 --> 03:38.210
donc ici nous pouvons importer Todo

03:39.080 --> 03:42.543
de . /todo. modèle.

03:43.900 --> 03:46.720
Et ici, nous avons simplement un tableau de todos

03:46.720 --> 03:49.550
qui est bien sûr plus court et plus facile à lire.

03:49.550 --> 03:51.480
Et maintenant notre mise à jour de l'état fonctionne toujours,

03:51.480 --> 03:52.870
mais c'est un peu plus propre.

03:52.870 --> 03:55.100
Et comme vous le voyez, c'est vraiment important

03:55.100 --> 03:57.210
ici lorsque vous travaillez avec quelque chose

03:57.210 --> 03:59.170
comme un tableau où les types de contenu pour

03:59.170 --> 04:01.860
quel type de données vous voulez stocker cela éventuellement,

04:01.860 --> 04:04.270
si vous l'initialisez avec un tableau vide.

04:04.270 --> 04:06.250
Avec ceci, cependant, cela fonctionne.

04:06.250 --> 04:07.450
L'inconvénient, bien sûr,

04:07.450 --> 04:09.910
c'est que notre logique de mise à jour de l'état n'est

04:09.910 --> 04:13.670
pas correcte, parce qu'à l'heure actuelle, j'écrase toujours le tableau existant

04:13.670 --> 04:17.400
de todos avec un nouveau tableau qui ne comporte qu'un seul élément.

04:17.400 --> 04:20.110
Et à la place, je veux l'écraser avec un nouveau tableau

04:20.110 --> 04:23.730
qui contient tous les anciens éléments ainsi que le nouvel élément.

04:23.730 --> 04:26.583
Nous allons donc ajuster cette logique dans le prochain cours.
