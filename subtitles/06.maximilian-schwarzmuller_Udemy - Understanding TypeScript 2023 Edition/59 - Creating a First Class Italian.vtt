WEBVTT

00:02.270 --> 00:03.103
Istruttore: Per questo

00:03.103 --> 00:04.620
ho un piccolo progetto iniziale per voi.

00:04.620 --> 00:05.610
Lo trovate in allegato.

00:05.610 --> 00:07.070
È lo stesso progetto di partenza

00:07.070 --> 00:08.810
che abbiamo utilizzato più volte.

00:08.810 --> 00:12.080
Si avvia il server di sviluppo con npm-start

00:12.080 --> 00:15.510
e poi ho avviato la compilazione di TypeScript

00:15.510 --> 00:19.830
in modalità watch con tsc-w in un terminale separato.

00:19.830 --> 00:22.890
Quindi nel mio terminale integrato ho due schede.

00:22.890 --> 00:24.390
Una con il server di sviluppo, che

00:24.390 --> 00:26.070
si dovrebbe mantenere attivo e funzionante,

00:26.070 --> 00:27.670
in modo che osservi le modifiche e

00:27.670 --> 00:30.720
ricarichi la pagina e mantenga il server attivo e funzionante,

00:30.720 --> 00:32.820
e un'altra scheda in cui ho il watcher di compilazione

00:32.820 --> 00:35.530
di TypeScript in esecuzione.

00:35.530 --> 00:39.400
Ora possiamo lavorare nell'applicazione.

00:39.400 --> 00:39.400
ts,

00:39.400 --> 00:41.520
che al momento è vuoto, e iniziare a scrivere un

00:41.520 --> 00:42.990
po' di codice; voglio iniziare

00:42.990 --> 00:45.603
subito definendo una classe che possiamo usare.

00:46.490 --> 00:49.420
Lo facciamo usando la parola chiave class, proprio

00:49.420 --> 00:51.340
così, e poi il nome della classe e

00:51.340 --> 00:54.030
diciamo che stiamo costruendo un'applicazione,

00:54.030 --> 00:56.880
un'applicazione web, un'interfaccia utente per

00:56.880 --> 01:00.700
qualche strumento web che ci permette di gestire i diversi reparti

01:00.700 --> 01:04.100
che potremmo avere nella nostra azienda.

01:04.100 --> 01:05.770
Forse stiamo costruendo un qualche

01:05.770 --> 01:08.440
strumento interno all'azienda, qualunque esso

01:08.440 --> 01:11.290
sia, e abbiamo bisogno di più dipartimenti.

01:11.290 --> 01:13.790
Ora, potremmo usare degli oggetti per gestire

01:13.790 --> 01:16.320
i dati dei diversi dipartimenti e potremmo anche

01:16.320 --> 01:19.960
aggiungere dei metodi a ciascun oggetto, in modo da poter rendere

01:19.960 --> 01:21.980
le informazioni sul dipartimento sullo

01:21.980 --> 01:24.020
schermo; per semplificare la creazione

01:24.020 --> 01:26.980
di questi diversi oggetti di dipartimento, che avranno

01:26.980 --> 01:33.000
tutti lo stesso aspetto, è necessario creare una classe di dipartimento.

01:33.000 --> 01:35.690
Potremmo quindi chiamare questa classe Dipartimento.

01:35.690 --> 01:36.830
Il nome dipende totalmente da voi.

01:36.830 --> 01:40.030
La convenzione prevede che inizi con un carattere maiuscolo,

01:40.030 --> 01:42.720
per chiarire che si tratta di una classe.

01:42.720 --> 01:45.670
Ora, se siete in giro per lo sviluppo di JavaScript da

01:45.670 --> 01:48.270
più tempo, potreste conoscere l'idea delle funzioni

01:48.270 --> 01:50.090
costitutive e le classi alla fine

01:50.090 --> 01:52.140
sono uno zucchero sintattico per questo,

01:52.140 --> 01:53.920
si potrebbe dire, ma lo vedremo una

01:53.920 --> 01:56.980
volta compilato il nostro codice.

01:56.980 --> 01:59.220
Quindi abbiamo la nostra classe Dipartimento

01:59.220 --> 02:02.080
e ora al suo interno potremmo avere una proprietà name.

02:02.080 --> 02:04.010
Si può aggiungere così, senza

02:04.010 --> 02:07.290
alcun let o const davanti, direttamente nella classe

02:07.290 --> 02:09.840
e poi, naturalmente, si può anche assegnare

02:09.840 --> 02:12.550
un tipo a questa classe.

02:12.550 --> 02:14.690
Lo si fa aggiungendo i due punti qui

02:14.690 --> 02:17.920
e poi il tipo, ad esempio stringa, che è importante.

02:17.920 --> 02:21.150
Potrebbe sembrare un oggetto, ma non è un oggetto.

02:21.150 --> 02:23.240
In un oggetto si usano coppie chiave-valore

02:23.240 --> 02:25.520
con i due punti per avere il nome della chiave e poi

02:25.520 --> 02:27.000
il valore della chiave.

02:27.000 --> 02:28.810
Qui non è così.

02:28.810 --> 02:32.250
Si tratta di un cosiddetto campo di una classe.

02:32.250 --> 02:34.680
Si crea una classe con le parentesi graffe,

02:34.680 --> 02:37.110
ma in questo caso non si tratta di una coppia

02:37.110 --> 02:39.120
chiave-valore, ma solo di definire

02:39.120 --> 02:41.040
il nome di una chiave che si avrà

02:41.040 --> 02:43.530
nell'oggetto che si creerà in base alla classe

02:43.530 --> 02:48.530
e di definire il tipo di valore che la chiave conterrà alla fine.

02:48.550 --> 02:52.363
È anche possibile impostare un valore iniziale con l'opzione = 'DEFAULT',

02:53.840 --> 02:55.920
ma non è necessario farlo.

02:55.920 --> 02:59.050
Un'altra cosa che si trova comunemente nelle

02:59.050 --> 03:03.410
classi è una funzione speciale, un cosiddetto metodo.

03:03.410 --> 03:06.780
Le funzioni negli oggetti si chiamano semplicemente metodi,

03:06.780 --> 03:09.410
e questo è il metodo del costruttore.

03:09.410 --> 03:12.500
Possiamo aggiungerla in questo modo e questa è una parola riservata.

03:12.500 --> 03:16.170
Il costruttore è una parola chiave riservata, compresa da

03:16.170 --> 03:18.390
TypeScript e anche dal JavaScript moderno,

03:18.390 --> 03:22.480
e si tratta essenzialmente di una funzione legata a questa classe

03:22.480 --> 03:25.840
e a qualsiasi oggetto creato in base alla classe, che viene

03:25.840 --> 03:29.640
eseguita quando l'oggetto viene creato.

03:29.640 --> 03:33.500
Questo permette di fare un po' di lavoro di inizializzazione per

03:33.500 --> 03:35.700
l'oggetto che si sta costruendo.

03:35.700 --> 03:38.280
Ora, lì dentro si potrebbe accettare un'argomentazione.

03:38.280 --> 03:41.910
Chiamiamolo n, che potrebbe anche essere di tipo stringa,

03:41.910 --> 03:45.620
e poi memorizziamolo nel campo name o possiamo farlo

03:45.620 --> 03:47.000
raggiungendo name con

03:47.000 --> 03:49.050
la parola chiave this e memorizzando

03:49.050 --> 03:51.200
n in esso.

03:51.200 --> 03:55.200
Ciò che fa è impostare il valore del campo name, chiamato

03:55.200 --> 03:58.630
anche proprietà so della proprietà name, al

03:58.630 --> 04:01.180
valore che si ottiene su n quando viene

04:01.180 --> 04:04.550
creato un oggetto dipartimento.

04:04.550 --> 04:07.030
Come si può creare un oggetto di questo tipo?

04:07.030 --> 04:08.890
Niente di più facile.

04:08.890 --> 04:13.110
Al di fuori della classe creata usando la parola chiave new, anch'essa

04:13.110 --> 04:16.200
presente in TypeScript e JavaScript, si ripete

04:16.200 --> 04:18.410
il nome della classe, si aggiungono

04:18.410 --> 04:20.160
le parentesi e si crea un nuovo

04:20.160 --> 04:22.440
oggetto dipartimento, ma il costruttore

04:22.440 --> 04:26.240
viene chiamato a questo punto, quando si esegue la classe

04:26.240 --> 04:29.620
con la parola chiave new e il costruttore prende un

04:29.620 --> 04:33.440
parametro, una stringa.

04:33.440 --> 04:35.600
Ora si passano gli argomenti del costruttore

04:35.600 --> 04:39.800
a questa chiamata di dipartimento, quindi tra queste parentesi.

04:39.800 --> 04:41.640
Potremmo quindi chiamarlo Contabilità,

04:41.640 --> 04:44.730
perché forse qui stiamo costruendo il dipartimento di contabilità.

04:44.730 --> 04:46.100
Ora verrà creato un nuovo

04:46.100 --> 04:49.800
oggetto JavaScript basato su questo blueprint.

04:49.800 --> 04:53.910
Ora possiamo memorizzare questo dato in una costante, ad esempio,

04:53.910 --> 04:58.010
e poi nella console. log. contabilità qui per vedere cosa otteniamo.

04:58.010 --> 04:59.620
Se ora lo salviamo e poi torniamo

04:59.620 --> 05:02.020
alla nostra pagina e diamo un'occhiata alla

05:02.020 --> 05:03.780
console di sviluppo qui negli strumenti

05:03.780 --> 05:05.660
di def, dovremmo vedere il nostro oggetto

05:05.660 --> 05:07.930
Dipartimento qui.

05:07.930 --> 05:10.000
È un normale oggetto JavaScript,

05:10.000 --> 05:13.770
con questo tipo di dipartimento collegato e alla fine è un

05:13.770 --> 05:15.290
oggetto con una coppia chiave-valore,

05:15.290 --> 05:18.140
dove la chiave è il nome, perché è quello che

05:18.140 --> 05:20.270
abbiamo definito qui sopra, e il

05:20.270 --> 05:23.110
valore è Accounting.

05:23.110 --> 05:25.530
Abbiamo questo valore di Accounting

05:25.530 --> 05:27.460
qui perché lo passiamo come argomento

05:27.460 --> 05:29.560
al costruttore.

05:29.560 --> 05:31.770
Si accetta una stringa di questo tipo,

05:31.770 --> 05:34.830
ripristinando il valore in questo campo e i campi

05:34.830 --> 05:38.400
sono alla fine solo tradotti in proprietà, che l'oggetto

05:38.400 --> 05:41.890
basato sulla classe avrà in seguito.

05:41.890 --> 05:44.480
Ecco come creare una classe semplice

05:44.480 --> 05:46.570
e qual è l'idea generale.

05:46.570 --> 05:50.143
Vediamo ora cosa si ottiene effettivamente in JavaScript.
