WEBVTT

00:02.340 --> 00:04.100
Abbiamo iniziato con i generici

00:04.100 --> 00:06.670
e speriamo che sia chiaro cosa fa TypeScript: passa

00:06.670 --> 00:10.240
alcune informazioni extra nella funzione di fusione, in modo da

00:10.240 --> 00:12.130
poter lavorare meglio con il risultato

00:12.130 --> 00:14.370
della funzione di fusione.

00:14.370 --> 00:16.540
In genere i generici servono proprio a questo.

00:16.540 --> 00:19.890
Permettono di continuare a lavorare con i dati in modo

00:19.890 --> 00:21.960
ottimale con TypeScript.

00:21.960 --> 00:23.820
In questo caso, però, si verificherebbe

00:23.820 --> 00:25.810
un problema se inserissi, ad esempio,

00:25.810 --> 00:28.570
solo il numero 30.

00:28.570 --> 00:30.470
Naturalmente, TypeScript ora lancia un errore,

00:30.470 --> 00:32.010
perché ha cercato di accedere all'età,

00:32.010 --> 00:33.870
ma l'accesso al nome funzionerebbe.

00:33.870 --> 00:37.100
Ciononostante, se lo salviamo, viene compilato senza errori

00:37.100 --> 00:39.710
e se stampo l'oggetto complessivo unito, vediamo

00:39.710 --> 00:41.610
che quello che ottengo è solo hobby

00:41.610 --> 00:43.910
e nome nel mio oggetto, il che ha senso perché

00:43.910 --> 00:46.570
30 è un numero e quando lo passiamo come secondo

00:46.570 --> 00:48.010
argomento all'assegnazione

00:48.010 --> 00:50.080
dell'oggetto, cosa che alla fine stiamo

00:50.080 --> 00:51.920
facendo qui, beh, questo fallisce

00:51.920 --> 00:54.590
silenziosamente.

00:54.590 --> 00:57.860
JavaScript non lancia un errore, non si lamenta.

00:57.860 --> 01:00.460
Ma naturalmente non fonde 30 nell'oggetto

01:00.460 --> 01:02.270
appena creato: non c'è 30

01:02.270 --> 01:04.690
in questo oggetto.

01:04.690 --> 01:06.540
Ora, come farebbe JavaScript a farlo?

01:06.540 --> 01:08.470
Poiché 30 non è un oggetto,

01:08.470 --> 01:12.150
un'assegnazione di oggetti è in grado di unire tra

01:12.150 --> 01:14.090
loro oggetti diversi.

01:14.090 --> 01:15.410
Quindi, alla fine, cosa vogliamo salvare?

01:15.410 --> 01:17.600
Non ci interessa il tipo esatto, non

01:17.600 --> 01:20.040
ci interessa la struttura esatta dell'oggetto

01:20.040 --> 01:22.980
che state fornendo qui per U e T.

01:22.980 --> 01:26.600
Ma ciò che ci interessa è che entrambi i parametri,

01:26.600 --> 01:31.370
entrambi i tipi T e U, siano qualsiasi tipo di oggetto, ma che

01:31.370 --> 01:34.420
siano sempre un oggetto.

01:34.420 --> 01:36.830
E al momento non lo stiamo dicendo.

01:36.830 --> 01:37.820
Attualmente, diciamo solo

01:37.820 --> 01:40.110
che dovrebbero essere di qualsiasi tipo, non mi interessa.

01:40.110 --> 01:41.750
Spesso questo non va bene.

01:41.750 --> 01:45.060
Qui si vogliono limitare i tipi di T e U, risolvendo

01:45.060 --> 01:46.683
i tipi generici.

01:47.830 --> 01:51.540
È possibile farlo con i vincoli di tipo.

01:51.540 --> 01:55.170
Per i tipi generici, si possono impostare alcuni vincoli relativi

01:55.170 --> 01:58.280
ai tipi su cui si possono basare i tipi generici e lo

01:58.280 --> 02:01.120
si fa con la parola chiave estesa, qui tra le parentesi

02:01.120 --> 02:05.150
angolari dopo il tipo che si vuole vincolare.

02:05.150 --> 02:07.410
Quindi potremmo dire che estende l'oggetto

02:07.410 --> 02:09.020
e con questo sto dicendo che

02:09.020 --> 02:12.740
il tipo T può essere qualsiasi oggetto con qualsiasi struttura,

02:12.740 --> 02:15.340
ma deve essere un oggetto.

02:15.340 --> 02:17.480
Possiamo fare lo stesso per voi.

02:17.480 --> 02:19.040
E se lo faccio, vedo

02:19.040 --> 02:21.820
già un errore nell'IDE.

02:21.820 --> 02:23.980
E se provo a salvarlo, ottengo anche

02:23.980 --> 02:26.150
un errore nel compilatore, perché

02:26.150 --> 02:28.640
l'argomento di tipo 30 non è assegnabile

02:28.640 --> 02:31.133
al tipo di oggetto.

02:32.080 --> 02:34.480
Questo è, ovviamente, il comportamento che vogliamo.

02:34.480 --> 02:38.190
Ora siamo costretti a passare di nuovo un oggetto,

02:38.190 --> 02:39.940
come questo.

02:39.940 --> 02:41.990
Ora siamo costretti a passarlo di nuovo e quindi

02:41.990 --> 02:43.680
miglioriamo questa funzione perché

02:43.680 --> 02:45.290
ora funziona davvero.

02:45.290 --> 02:48.980
E sappiamo che l'assegnazione degli oggetti vuole due oggetti.

02:48.980 --> 02:51.000
Quindi, alla fine, vogliamo garantire

02:51.000 --> 02:52.820
l'ottenimento di due oggetti,

02:52.820 --> 02:56.370
impostando alcuni vincoli sui nostri tipi generici.

02:56.370 --> 02:58.630
E questi vincoli possono essere qualsiasi cosa.

02:58.630 --> 03:01.290
Si può fare riferimento a oggetti, a stringhe, si

03:01.290 --> 03:03.730
può usare il proprio tipo se lo si possiede.

03:03.730 --> 03:06.700
Se si vuole, si possono usare anche i tipi di unione; in questo caso

03:06.700 --> 03:08.470
si è molto flessibili e si possono impostare

03:08.470 --> 03:10.510
tutti i vincoli che si vogliono.

03:10.510 --> 03:12.620
E naturalmente non è necessario vincolare tutti

03:12.620 --> 03:13.720
i tipi generici.

03:13.720 --> 03:16.560
Se volete solo limitare la U, potete farlo.

03:16.560 --> 03:19.620
In questo esempio, ha senso vincolare entrambi, perché

03:19.620 --> 03:22.880
l'assegnazione degli oggetti vuole due oggetti, ma è

03:22.880 --> 03:24.640
davvero flessibile.

03:24.640 --> 03:26.620
È comunque importante conoscere

03:26.620 --> 03:28.440
il concetto di vincoli, perché

03:28.440 --> 03:30.560
consente di lavorare con i tipi generici

03:30.560 --> 03:32.640
in modo ottimale, evitando errori

03:32.640 --> 03:34.810
inutili o comportamenti strani come

03:34.810 --> 03:37.513
quelli precedenti.
