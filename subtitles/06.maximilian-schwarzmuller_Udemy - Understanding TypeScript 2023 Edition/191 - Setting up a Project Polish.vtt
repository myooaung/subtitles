WEBVTT

00:02.290 --> 00:03.280
Instruktor: Zacznijmy

00:03.280 --> 00:06.110
więc od naszej aplikacji Node typescript.

00:06.110 --> 00:08.750
Teraz możesz pomyśleć, że potrzebujemy teraz skomplikowanej

00:08.750 --> 00:11.170
konfiguracji z webpackiem i tak dalej, ale w rzeczywistości

00:11.170 --> 00:12.410
nie.

00:12.410 --> 00:16.270
Do kompilacji naszych plików użyjemy po prostu polecenia tsc.

00:16.270 --> 00:18.160
A następnie możemy użyć polecenia node, aby

00:18.160 --> 00:19.890
wykonać nasze skompilowane pliki.

00:19.890 --> 00:21.700
To wszystko, czego nam tu potrzeba.

00:21.700 --> 00:25.960
Mimo to skonfiguruję tutaj projekt z npm init po prostu, abyśmy

00:25.960 --> 00:28.810
otrzymali pakiet. plik json, ponieważ ponieważ

00:28.810 --> 00:32.250
stworzymy tutaj normalną aplikację Node, zainstalujemy niektóre pakiety

00:32.250 --> 00:36.240
stron trzecich, takie jak Express. słoiki.

00:36.240 --> 00:38.470
I chcę też zainstalować jedno dodatkowe narzędzie,

00:38.470 --> 00:40.950
które upraszcza nasz proces rozwoju.

00:40.950 --> 00:44.630
Więc uruchom npm init tutaj w dowolnym pustym folderze do wyboru.

00:44.630 --> 00:48.190
Możesz potwierdzić wszystkie domyślne ustawienia tutaj, jeśli chcesz, a tam po,

00:48.190 --> 00:50.540
będziesz miał pakiet. plik json, który powinien

00:50.540 --> 00:52.750
wyglądać coś takiego.

00:52.750 --> 00:56.210
Teraz uruchom również tsc --init, aby zainicjować

00:56.210 --> 00:59.390
ten projekt jako projekt typescriptowy, aby uzyskać

00:59.390 --> 01:01.860
tsconfig. plik json, który teraz

01:01.860 --> 01:04.313
możesz znaleźć w swoich wymaganiach.

01:05.770 --> 01:09.020
A tam już mam pierwszą korektę, którą chcę wprowadzić.

01:09.020 --> 01:13.300
Cel tutaj może być łatwo ustawiony na przykład na es2018 w zależności od wersji

01:13.300 --> 01:16.090
węzła, z której korzystasz, ale jeśli używasz najnowszego,

01:16.090 --> 01:17.750
ta nowoczesna składnia JavaScript

01:17.750 --> 01:21.380
powinna być zdecydowanie obsługiwana.

01:21.380 --> 01:24.220
Moduł może pozostać w commonjs, ale wtedy

01:24.220 --> 01:27.460
chcę również dodać moduleResolution tutaj i ustawić

01:27.460 --> 01:29.010
to na węzeł.

01:29.010 --> 01:33.350
To po prostu mówi typescriptowi, jak twoje różne pliki i importy

01:33.350 --> 01:35.483
będą ze sobą współpracować.

01:36.410 --> 01:37.640
I musimy ustawić to na node,

01:37.640 --> 01:40.020
aby upewnić się, że wszystko działa poprawnie.

01:40.020 --> 01:42.470
Ustawię również mój outDir tutaj, zakomentuj

01:42.470 --> 01:44.790
to i ustaw na dist, a mój rootDir na src,

01:44.790 --> 01:46.990
ponieważ chcę oddzielić mój kod

01:46.990 --> 01:49.600
źródłowy typescript.

01:49.600 --> 01:50.700
A następnie wyjście,

01:50.700 --> 01:53.170
które będzie rzeczywistymi plikami JavaScript,

01:53.170 --> 01:55.733
które możemy wykonać za pomocą node.

01:56.820 --> 01:58.850
Poza tym pasuje mi tryb ścisły, ale oczywiście

01:58.850 --> 02:00.710
można to wszystko dostroić do swoich

02:00.710 --> 02:03.030
osobistych potrzeb i upodobań.

02:03.030 --> 02:06.320
O tym wszystkim dowiedziałeś się przecież w trakcie tego kursu.

02:06.320 --> 02:08.830
I dzięki temu możemy zapisać tę konfigurację.

02:08.830 --> 02:11.070
Znajdziesz też ten bardzo podstawowy setup startowy

02:11.070 --> 02:12.460
załączony przy okazji.

02:12.460 --> 02:14.120
Można zapisać tę konfigurację.

02:14.120 --> 02:16.170
I utworzę też folder src, w którym

02:16.170 --> 02:18.130
będziemy pisać nasz kod źródłowy,

02:18.130 --> 02:20.230
nasz kod źródłowy typescript.

02:20.230 --> 02:23.020
I to jest ta część, w której teraz chcę się zanurzyć.

02:23.020 --> 02:26.370
Teraz zbudujemy naszą aplikację z typescriptem

02:26.370 --> 02:27.960
w folderze src.

02:27.960 --> 02:30.200
A ponieważ zbudujemy prosty serwer WWW i chcemy

02:30.200 --> 02:32.920
też użyć Express. js tam, będę, po pierwsze,

02:32.920 --> 02:36.120
zainstalować kilka zależności tutaj.

02:36.120 --> 02:38.440
Z npm install --save, chcę zainstalować

02:38.440 --> 02:41.040
express tutaj, który jest frameworkiem

02:41.040 --> 02:44.100
Express dla Node. js, którego oczywiście nie

02:44.100 --> 02:45.680
zawsze potrzebujesz, ale tutaj

02:45.680 --> 02:48.440
chcę zbudować aplikację Node Express.

02:48.440 --> 02:51.500
I zainstaluje pakiet body-parser, który pomaga

02:51.500 --> 02:54.403
nam parsować ciała przychodzących żądań.

02:55.290 --> 02:58.180
Na razie to tyle, jeśli chodzi o moje zależności produkcyjne.

02:58.180 --> 03:00.110
Być może później dodamy kolejne.

03:00.110 --> 03:01.523
Więc uderzmy w enter tutaj.

03:02.960 --> 03:04.120
I z tym zainstalowanym,

03:04.120 --> 03:07.540
spójrzmy na zależności programistyczne.

03:07.540 --> 03:11.450
Te zainstaluję za pomocą npm install --save-dev, a tam chcę zainstalować

03:11.450 --> 03:13.330
modemon, narzędzie, które pozwala

03:13.330 --> 03:16.340
nam wykonać plik za pomocą Node, ale które następnie obserwuje

03:16.340 --> 03:18.210
plik i folder, w którym ten plik się

03:18.210 --> 03:19.820
znajduje, a także wszystkie

03:19.820 --> 03:22.690
podfoldery pod kątem zmian.

03:22.690 --> 03:24.050
Za każdym razem, gdy plik się

03:24.050 --> 03:26.030
zmieni, zrestartuje serwer Node.

03:26.030 --> 03:27.620
To po prostu przyspieszy rozwój,

03:27.620 --> 03:29.510
ponieważ automatycznie zrestartuje

03:29.510 --> 03:31.490
nasz serwer aplikacji Node za każdym razem,

03:31.490 --> 03:33.500
gdy zmienimy kod źródłowy.

03:33.500 --> 03:36.180
Musimy ponownie uruchomić serwer, gdy kod się zmienia, ponieważ

03:36.180 --> 03:39.430
w przeciwnym razie nasz serwer nadal działa na starym kodzie, ale ręczne

03:39.430 --> 03:41.340
ponowne uruchomienie jest denerwujące, więc

03:41.340 --> 03:44.190
nie możemy przyspieszyć tego za pomocą nodemona.

03:44.190 --> 03:47.323
I na chwilę obecną to właściwie tyle.

03:49.290 --> 03:50.340
Więc naciśnijmy enter tutaj

03:50.340 --> 03:52.360
i zainstalujmy tę zależność rozwojową.

03:52.360 --> 03:54.760
Nie będzie to ostatni, którego potrzebujemy w tym

03:54.760 --> 03:56.660
kursie, ale na razie jest dobrze.

03:56.660 --> 03:58.830
Poczekajmy więc, aż to się skończy.

03:58.830 --> 04:00.130
Tak więc instalacja zakończyła

04:00.130 --> 04:01.450
się, a teraz zacznijmy pisać

04:01.450 --> 04:04.773
i tworzyć bardzo podstawową aplikację Node Express.
