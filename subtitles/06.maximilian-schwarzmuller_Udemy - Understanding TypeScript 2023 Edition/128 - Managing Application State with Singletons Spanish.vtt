WEBVTT

00:02.310 --> 00:04.580
Instructor: Así que llevar los proyectos de A a

00:04.580 --> 00:06.000
B es ahora nuestro objetivo.

00:06.000 --> 00:09.750
Para ser precisos, cuando los usuarios crean un nuevo proyecto,

00:09.750 --> 00:11.850
cuando introducen todos los datos,

00:11.850 --> 00:15.790
queremos crear un nuevo objeto de proyecto al final, que luego emitimos

00:15.790 --> 00:18.830
en nuestra clase de lista de proyectos como parte de

00:18.830 --> 00:20.460
la lista desordenada, que se

00:20.460 --> 00:21.990
renderiza allí.

00:21.990 --> 00:23.299
Esa es la idea.

00:23.299 --> 00:26.350
Por supuesto, una forma trivial de implementar esto podría

00:26.350 --> 00:28.890
ser simplemente ir al lugar donde se introduce

00:28.890 --> 00:30.830
la entrada del usuario y luego aquí

00:30.830 --> 00:34.513
utilizar el documento. getElementbyId, para llegar

00:36.100 --> 00:39.410
a esa lista desordenada que renderizamos como parte

00:39.410 --> 00:42.270
de nuestra clase de lista de proyectos, que tiene

00:42.270 --> 00:44.470
este ID aquí, así que lista de proyectos

00:44.470 --> 00:49.110
activos o lista de proyectos terminados, y luego simplemente llegar a

00:49.110 --> 00:51.090
eso y añadir un nuevo elemento

00:51.090 --> 00:52.760
a ella.

00:52.760 --> 00:54.770
Pero esa no es realmente la idea de

00:54.770 --> 00:57.250
cómo quiero construir esta aplicación.

00:57.250 --> 00:59.800
Quiero construirlo de una manera orientada

00:59.800 --> 01:02.530
a objetos donde tenemos nuestras diferentes

01:02.530 --> 01:06.500
clases que trabajan juntas de una manera reactiva donde creamos

01:06.500 --> 01:08.200
una nueva clase y luego algo

01:08.200 --> 01:10.550
sucede en el dom.

01:10.550 --> 01:12.730
Donde llamamos a un método de una clase

01:12.730 --> 01:14.650
y luego esta clase hace algo.

01:14.650 --> 01:16.980
Así es como quiero que funcionen estas cosas.

01:16.980 --> 01:19.560
Ahora, por supuesto, podríamos añadir un método

01:19.560 --> 01:21.550
a la clase de la lista de proyectos, digamos

01:21.550 --> 01:24.120
que añado el método del proyecto.

01:24.120 --> 01:25.890
Ese método debería ser llamado cuando

01:25.890 --> 01:28.200
un proyecto debe ser añadido y renderizado, y tendríamos

01:28.200 --> 01:30.700
que encontrar alguna manera de llamarlo desde dentro

01:30.700 --> 01:32.940
de la entrada del proyecto.

01:32.940 --> 01:34.820
Para ello, podríamos asegurarnos de

01:34.820 --> 01:37.940
que pasamos referencias a nuestra lista aquí, al constructor

01:37.940 --> 01:40.330
de la entrada del proyecto, para que desde dentro

01:40.330 --> 01:42.810
de la clase de entrada del proyecto, podamos trabajar

01:42.810 --> 01:45.290
con estas instancias concretas y llamar a los métodos

01:45.290 --> 01:47.570
de estas instancias.

01:47.570 --> 01:50.260
Porque eso es lo que tendríamos que hacer.

01:50.260 --> 01:52.050
Esa sería una forma viable,

01:52.050 --> 01:54.400
sin duda un enfoque que podrías adoptar,

01:54.400 --> 01:58.680
pero quiero adoptar un enfoque aún más abstracto.

01:58.680 --> 02:01.393
Un enfoque aún más interesante en mi opinión.

02:02.330 --> 02:06.210
Construiré una clase que gestione el estado de nuestra aplicación,

02:06.210 --> 02:08.110
es decir, una clase que gestione

02:08.110 --> 02:11.187
nuestros proyectos, o cualquier estado que necesitemos

02:11.187 --> 02:15.530
gestionar en la aplicación, que además nos permita luego establecer

02:15.530 --> 02:18.660
listeners en las diferentes partes de la app que

02:18.660 --> 02:21.670
nos interesen.

02:21.670 --> 02:24.540
Este es un patrón que puede sonarte familiar

02:24.540 --> 02:27.050
si has trabajado con frameworks como Angular

02:27.050 --> 02:29.820
o librerías como React y Redux.

02:29.820 --> 02:33.423
Que tienes un objeto de gestión de estado global y sólo

02:33.423 --> 02:35.443
escuchas los cambios.

02:35.443 --> 02:37.480
Eso es lo que quiero implementar aquí.

02:37.480 --> 02:39.620
Por supuesto, es sólo una forma de hacerlo,

02:39.620 --> 02:41.660
pero creo que es una forma bastante interesante,

02:41.660 --> 02:43.680
y por eso quiero mostrarla.

02:43.680 --> 02:45.908
Así que en la parte superior del archivo

02:45.908 --> 02:50.350
ts de la aplicación, voy a añadir una clase de gestión del estado del proyecto.

02:50.350 --> 02:53.347
Y lo llamaré simplemente projectState;

02:54.820 --> 02:57.210
me parece un nombre sensato.

02:57.210 --> 02:59.900
Ahora la idea aquí es que en esta clase

02:59.900 --> 03:03.760
tenemos una propiedad o un campo, un campo privado,

03:03.760 --> 03:06.570
proyectos, que contiene una matriz

03:06.570 --> 03:08.800
de proyectos.

03:08.800 --> 03:12.000
Ahora también tenemos que definir cómo debe ser un proyecto, lo haremos

03:12.000 --> 03:13.360
en el siguiente paso, por ahora

03:13.360 --> 03:15.830
sólo diré que es un array de cualquier cosa, que por

03:15.830 --> 03:18.710
supuesto no es perfecto, no es definitivo, pero quiero centrarme

03:18.710 --> 03:22.240
en esa solución de gestión de estados por ahora.

03:22.240 --> 03:25.653
Así que tenemos esta lista de proyectos aquí.

03:26.530 --> 03:30.163
Ahora mi objetivo es que quiero añadir un elemento a esa

03:30.163 --> 03:35.163
lista cada vez que, bueno, haga clic en ese botón de añadir proyecto aquí.

03:36.940 --> 03:39.970
Para que esto funcione, dentro de la clase de estado del

03:39.970 --> 03:43.460
proyecto, añadiré un método de añadir proyecto, uno público.

03:43.460 --> 03:45.560
Y ahí espero obtener el título, que

03:45.560 --> 03:47.060
debe ser una cadena, la descripción,

03:47.060 --> 03:49.390
que debe ser una cadena, y también el

03:49.390 --> 03:53.250
número de personas que trabajan en el proyecto, que debe ser

03:53.250 --> 03:55.220
un número.

03:55.220 --> 03:58.450
Entonces aquí, podemos crear un nuevo proyecto con la

03:58.450 --> 04:00.950
notación literal del objeto por ahora.

04:00.950 --> 04:03.950
Donde debemos tener algún ID para cada proyecto para que podamos

04:03.950 --> 04:06.050
identificarlo de forma única, y voy a generar

04:06.050 --> 04:12.100
un ID aquí usando matemáticas.

04:12.100 --> 04:12.100
aleatorio(). toString.

04:12.100 --> 04:14.960
Ahora un número aleatorio no es realmente un ID único,

04:14.960 --> 04:17.880
puedes generar el mismo número más de una vez, pero es

04:17.880 --> 04:19.300
muy poco probable, y para

04:19.300 --> 04:22.570
nuestros propósitos de demostración aquí servirá.

04:22.570 --> 04:25.170
Ahora, además de que cada proyecto debe tener un título y allí

04:25.170 --> 04:28.370
se almacenará ese argumento del título que estamos recibiendo.

04:28.370 --> 04:30.913
Lo mismo para la descripción, donde almacenaré

04:31.960 --> 04:33.830
la descripción.

04:33.830 --> 04:37.693
Y mi pueblo donde guardaré el número de personas.

04:39.700 --> 04:43.440
Este, por ahora, es el proyecto que quiero almacenar.

04:43.440 --> 04:45.000
Así que una vez que lo creamos aquí,

04:45.000 --> 04:48.020
podemos llegar a la matriz de proyectos en el estado de los proyectos,

04:48.020 --> 04:48.853
que es privado, pero

04:48.853 --> 04:50.320
desde dentro de la clase, que es

04:50.320 --> 04:51.530
este método, podemos acceder

04:51.530 --> 04:53.340
a él por supuesto.

04:53.340 --> 04:55.900
Y ahí quiero añadir este nuevo proyecto y

04:55.900 --> 05:00.380
para ello podemos simplemente empujar nuestro nuevo proyecto a él.

05:00.380 --> 05:03.350
Ahora, con eso, podemos añadir un proyecto.

05:03.350 --> 05:07.027
Pero todavía, por supuesto, tenemos un par de preguntas poco claras.

05:07.027 --> 05:12.027
¿Cómo llamamos a add project desde dentro de nuestra clase donde recogemos la entrada

05:12.750 --> 05:14.650
del usuario desde dentro del submit

05:14.650 --> 05:15.990
handler?

05:15.990 --> 05:17.940
¿Cómo llamamos al proyecto Add?

05:17.940 --> 05:21.730
¿Y cómo pasamos esa lista de proyectos actualizada

05:21.730 --> 05:25.690
cada vez que cambia a la clase de lista de proyectos?

05:25.690 --> 05:29.230
Estos son los dos problemas a los que, por supuesto, nos enfrentamos en este momento.

05:29.230 --> 05:31.840
Bueno, una cosa que voy a hacer aquí,

05:31.840 --> 05:36.499
es que voy a crear una instancia de estado del proyecto aquí.

05:36.499 --> 05:39.720
Una instancia global, que podríamos utilizar desde todo

05:39.720 --> 05:42.760
el archivo, y lo haré justo después de crear esa clase.

05:42.760 --> 05:47.050
Así que aquí tengo mi constante de estado del proyecto donde

05:47.050 --> 05:50.370
instanciar el estado del proyecto así.

05:50.370 --> 05:52.400
De esta manera esta es una constante

05:52.400 --> 05:54.620
global que puede ser usada en cualquier

05:54.620 --> 05:58.000
parte del archivo, así que hablar con esa clase es ahora súper

05:58.000 --> 06:01.660
simple, sólo tienes que usar esta constante global aquí.

06:01.660 --> 06:04.850
Incluso podemos utilizar una característica que todos hemos aprendido,

06:04.850 --> 06:06.430
el constructor privado, para garantizar

06:06.430 --> 06:09.170
que se trata de una clase singleton.

06:09.170 --> 06:11.950
Podemos crear un constructor privado aquí y luego tenemos

06:11.950 --> 06:14.300
otra propiedad privada aquí, instancia, que

06:14.300 --> 06:16.670
es de tipo estado del proyecto, por lo que el

06:16.670 --> 06:18.933
mismo tipo de esta clase es de.

06:20.640 --> 06:24.360
Y luego añadimos un método de instancia get aquí, un método

06:24.360 --> 06:26.390
estático en realidad, donde comprobamos

06:26.390 --> 06:30.050
si este . es una cosa, y para ello, esto

06:30.050 --> 06:31.020
también tiene que

06:31.020 --> 06:33.970
ser una instancia estática, una propiedad estática,

06:33.970 --> 06:35.800
quiero decir.

06:35.800 --> 06:37.100
Si esto es una cosa, si lo

06:37.100 --> 06:39.550
es, devolvemos esto . por lo que devolvemos

06:39.550 --> 06:42.230
la única instancia obtenida, de lo contrario

06:42.230 --> 06:44.590
creamos una nueva.

06:44.590 --> 06:45.423
Por lo

06:45.423 --> 06:50.423
demás, este . será igual al nuevo estado del proyecto.

06:50.450 --> 06:52.963
Y luego devolvemos esto . instancia.

06:54.740 --> 07:00.903
Ahora con eso, podemos llamar a la instancia de abajo, así, ProjectState.

07:00.903 --> 07:00.903
getInstance,

07:02.650 --> 07:04.390
y se garantiza que siempre se

07:04.390 --> 07:06.560
trabajará con el mismo objeto y que

07:06.560 --> 07:11.700
siempre habrá un solo objeto del tipo en toda la aplicación.

07:11.700 --> 07:12.840
Que es la idea aquí, porque

07:12.840 --> 07:17.503
sólo quiero tener un objeto de gestión de estado para nuestro proyecto.

07:17.503 --> 07:19.570
Así que este es el estado del proyecto con

07:19.570 --> 07:21.563
este constructor singleton ahora.

07:22.730 --> 07:25.890
Así que ahora tenemos nuestra constante de estado del proyecto.

07:25.890 --> 07:28.040
Vamos a bajar a la clase de entrada del proyecto, por

07:28.040 --> 07:30.270
lo tanto, donde recogemos la entrada del usuario.

07:30.270 --> 07:33.950
Aquí, podemos llamar a projectState. addProject y remitir el título,

07:33.950 --> 07:37.830
la descripción y las personas, que obtenemos de recoger

07:37.830 --> 07:40.960
la entrada del usuario en el final.

07:40.960 --> 07:43.920
Así que ahora este proyecto debe ser creado.

07:43.920 --> 07:47.140
Ahora sólo tenemos que empujar esa información que

07:47.140 --> 07:51.530
tenemos un nuevo proyecto a nuestra clase de lista de proyectos, porque

07:51.530 --> 07:53.840
esa es la clase que es responsable de

07:53.840 --> 07:56.500
la salida de algo a la pantalla.

07:56.500 --> 07:59.450
Y para ello quiero establecer un patrón de suscripción

07:59.450 --> 08:00.350
al final.

08:00.350 --> 08:03.020
Donde dentro del estado de nuestro proyecto

08:03.020 --> 08:05.730
manejamos una lista de listeners, es decir,

08:05.730 --> 08:08.690
una lista de funciones al final, que deben ser

08:08.690 --> 08:11.600
llamadas cada vez que algo cambia.

08:11.600 --> 08:12.433
Así que para eso

08:12.433 --> 08:15.830
añadiré otra propiedad privada aquí, oyentes.

08:15.830 --> 08:18.810
Y los oyentes será una matriz vacía y por ahora,

08:18.810 --> 08:22.130
de nuevo, sólo una matriz de cualquier cosa que vamos

08:22.130 --> 08:25.543
a especificar esto en mayor detalle más adelante.

08:26.760 --> 08:31.382
Ahora también quiero tener un método aquí addListener

08:31.382 --> 08:35.590
donde obtengo una función de escucha, por lo que este

08:35.590 --> 08:39.150
debe ser una función en el final aquí.

08:39.150 --> 08:41.370
Y entonces añadiré esto a mis oyentes.

08:41.370 --> 08:43.970
Así que empujamos la función de escucha

08:43.970 --> 08:46.500
aquí a, bueno, la matriz de oyentes.

08:46.500 --> 08:49.580
Ahora bien, ¿cuál es la idea de tener esa matriz de oyentes?

08:49.580 --> 08:51.110
Es una matriz de funciones, de

08:51.110 --> 08:53.070
referencias a funciones, ¿verdad?

08:53.070 --> 08:55.250
La idea es que cada vez que algo cambia, como

08:55.250 --> 08:57.310
aquí cuando añadimos un nuevo proyecto,

08:57.310 --> 08:59.790
llamamos a todas las funciones de escucha.

08:59.790 --> 09:03.050
Así que hacemos un bucle a través de todos los oyentes, de este

09:03.050 --> 09:04.720
oyente, por lo que a través de todas

09:04.720 --> 09:07.330
las funciones de los oyentes, y luego, ya que estos

09:07.330 --> 09:09.520
son referencias de función, podemos ejecutar

09:09.520 --> 09:11.593
esto como una función.

09:13.010 --> 09:14.630
Y a esa función le pasamos lo que

09:14.630 --> 09:18.620
sea relevante para ella, en función del estado que estemos gestionando,

09:18.620 --> 09:20.130
que en este caso, en esta clase

09:20.130 --> 09:22.020
por supuesto, es nuestra lista de

09:22.020 --> 09:23.280
proyectos.

09:23.280 --> 09:27.983
Este es el estado del que es responsable esta clase.

09:29.100 --> 09:29.933
Así que aquí,

09:30.980 --> 09:33.050
reenvío este proyecto y llamaré

09:33.050 --> 09:35.170
a slice sobre él para que sólo devuelva

09:35.170 --> 09:39.100
una copia de ese array y no el array original.

09:39.100 --> 09:41.880
Para que no se pueda editar desde el lugar de donde

09:41.880 --> 09:44.210
proviene la función de escucha.

09:44.210 --> 09:45.760
Porque los arrays y los objetos

09:45.760 --> 09:48.110
son valores de referencia en Javascript,

09:48.110 --> 09:50.490
por lo que si pasamos el array original, podríamos

09:50.490 --> 09:52.600
editarlo desde fuera y también por el mismo

09:52.600 --> 09:54.380
lado, si le empujamos algo desde

09:54.380 --> 09:57.020
dentro de esta clase, ya cambiaría en todos los demás

09:57.020 --> 09:59.830
lugares de la aplicación, pero estos lugares no se

09:59.830 --> 10:03.540
darían cuenta realmente de que ha cambiado, por lo que podría introducir

10:03.540 --> 10:05.630
bugs extraños si pasamos alrededor de

10:05.630 --> 10:08.270
la referencia original, que es por lo que paso alrededor

10:08.270 --> 10:12.770
de la nueva copia, un nuevo array aquí.

10:12.770 --> 10:15.390
Así que ahora cada función de escucha se ejecuta

10:15.390 --> 10:19.400
y obtiene nuestra copia, nuestra nueva copia de proyectos.

10:19.400 --> 10:21.380
Ahora sólo tenemos que ir a los lugares

10:21.380 --> 10:23.800
donde queremos ser informados de los cambios,

10:23.800 --> 10:26.560
en nuestro caso, la clase de la lista de proyectos

10:26.560 --> 10:29.030
aquí, y configurar tal oyente.

10:29.030 --> 10:32.880
Así que aquí, en el constructor de la clase de la lista de proyectos,

10:32.880 --> 10:35.546
antes de adjuntar y renderizar el contenido,

10:35.546 --> 10:38.010
voy a llegar a projectState y llamar addListener

10:38.010 --> 10:40.110
aquí para registrar básicamente

10:40.110 --> 10:43.720
una función de escucha aquí.

10:43.720 --> 10:46.150
Ahora un listener, como dije, es una función,

10:46.150 --> 10:49.100
así que tenemos que pasar una función a addListener.

10:49.100 --> 10:51.210
Porque los oyentes que estamos manejando

10:51.210 --> 10:52.610
aquí en el estado del proyecto,

10:52.610 --> 10:54.680
eso es sólo una lista de funciones, que eventualmente

10:54.680 --> 10:57.773
llamaremos cuando algo cambie ¿verdad?

10:58.840 --> 11:01.110
Así que tendré que pasar una

11:01.110 --> 11:04.990
función a mi función addListener aquí.

11:04.990 --> 11:07.520
Aquí estoy pasando una función de flecha anónima.

11:07.520 --> 11:10.770
Y esa función obtendrá una lista de proyectos

11:10.770 --> 11:14.400
cuando sea llamada desde dentro de projectState.

11:14.400 --> 11:17.430
Así que obtenemos una lista de proyectos, sabemos que, dentro

11:17.430 --> 11:19.160
de este cuerpo de la función, podemos

11:19.160 --> 11:21.560
entonces utilizar esta lista de proyectos.

11:21.560 --> 11:26.046
Y aquí voy a añadir un nuevo campo a la lista de proyectos, assignedProjects tal

11:26.046 --> 11:28.410
vez, que es de tipo cualquier matriz, por

11:28.410 --> 11:30.310
lo que cualquier cosa en una matriz,

11:30.310 --> 11:32.357
y la matriz de cualquier valor, bueno,

11:32.357 --> 11:34.010
por supuesto, también voy a especificar

11:34.010 --> 11:37.630
esto en mayor detalle más adelante.

11:37.630 --> 11:39.890
Entonces aquí podemos decir que este proyecto

11:39.890 --> 11:41.780
asignado es igual a los proyectos.

11:41.780 --> 11:44.240
Así que a los proyectos que estamos consiguiendo.

11:44.240 --> 11:45.870
Ahora aquí para deshacerse de ese

11:45.870 --> 11:47.280
error de tipo implícito, tengo

11:47.280 --> 11:49.900
que tener claro que esto será realmente un array de

11:49.900 --> 11:51.563
cualquier cosa aquí.

11:52.610 --> 11:55.020
Así que ahora estoy añadiendo los proyectos que

11:55.020 --> 11:57.660
me llegan porque algo ha cambiado en mi estado.

11:57.660 --> 11:59.490
Aquí a mis proyectos asignados donde

11:59.490 --> 12:00.530
no lo estoy añadiendo,

12:00.530 --> 12:02.350
estoy anulando los proyectos asignados

12:02.350 --> 12:04.170
con los nuevos proyectos.

12:04.170 --> 12:08.223
Y luego mi idea es renderizar todos estos proyectos.

12:09.080 --> 12:10.883
Para ello podemos añadir un

12:11.951 --> 12:15.080
nuevo método; renderPrjects, por ejemplo.

12:15.080 --> 12:16.920
Que quiero llamar desde

12:16.920 --> 12:20.063
aquí, este renderProjects, así.

12:22.230 --> 12:24.120
Termina fuera de renderProjects.

12:24.120 --> 12:27.480
Voy a llegar a esta lista aquí, a la derecha, asignamos que la

12:27.480 --> 12:30.150
identificación cuando se hace el contenido, que

12:30.150 --> 12:31.290
hacemos aquí.

12:31.290 --> 12:34.440
Parece que lo hacemos después de llamar a renderProjects, pero ten

12:34.440 --> 12:36.640
en cuenta, que termina fuera de una función, que

12:36.640 --> 12:38.470
sólo se llamará eventualmente una vez

12:38.470 --> 12:40.230
que se añadan nuevos proyectos.

12:40.230 --> 12:43.510
Así que en realidad renderContent se ejecutará primero.

12:43.510 --> 12:47.090
Y por lo tanto, en renderProjects podemos confiar en este ID

12:47.090 --> 12:49.370
que se asigna a una lista desordenada,

12:49.370 --> 12:53.030
así que aquí podemos agarrar esto y obtener nuestro elemento

12:53.030 --> 12:58.030
de la lista mediante el uso de documento. getElementbyId y luego simplemente paso

12:58.469 --> 13:00.790
este identificador ID usando el tipo de

13:00.790 --> 13:03.690
esta clase concreta de lista de proyectos.

13:03.690 --> 13:08.563
Y luego también usando, bueno el resto de este ID que generamos.

13:09.580 --> 13:11.130
Y a esa lista o en esa lista

13:11.130 --> 13:14.170
quiero rendir todos los proyectos que tenemos.

13:14.170 --> 13:17.670
Por lo tanto, voy a repasar aquí todos los

13:17.670 --> 13:21.060
elementos de este proyecto asignado.

13:21.060 --> 13:23.150
Y luego para cada elemento quiero añadir algo

13:23.150 --> 13:23.983
a la lista y vamos a

13:23.983 --> 13:25.380
refinar esto más tarde.

13:25.380 --> 13:29.787
Por el momento, sólo llamaré a appendChild aquí en mi elemento

13:30.890 --> 13:32.480
de la lista.

13:32.480 --> 13:34.490
Por cierto aquí deberíamos añadir un signo de

13:34.490 --> 13:36.970
exclamación para dejar claro que esto no será nulo.

13:36.970 --> 13:41.970
También podemos lanzar esto a un elemento de lista HTML UL, así que a un elemento

13:42.000 --> 13:43.560
de lista desordenada porque

13:43.560 --> 13:45.420
eso es lo que será.

13:45.420 --> 13:47.530
Y luego podemos añadir el niño aquí y que

13:47.530 --> 13:49.740
debe ser un nuevo elemento de la lista, por

13:49.740 --> 13:51.980
lo que aquí podemos crear nuestro elemento

13:51.980 --> 13:56.160
de la lista con el documento. createElement LI.

13:56.160 --> 13:58.350
Y en ese elemento de la lista aquí, sólo se establecerá

13:58.350 --> 14:03.950
el contenido de texto igual al proyecto Elemento.

14:03.950 --> 14:03.950
título.

14:03.950 --> 14:06.240
Cada elemento del proyecto será un proyecto

14:06.240 --> 14:09.940
tal y como lo creamos ahí arriba en el estado del proyecto, por lo que será

14:09.940 --> 14:11.350
un objeto de este tipo, y por

14:11.350 --> 14:13.100
lo tanto tendrá un título.

14:14.210 --> 14:15.940
Ahora con eso si bajamos ahí tenemos

14:15.940 --> 14:18.880
nuestro elemento de la lista que ahora se agrega aquí.

14:18.880 --> 14:20.730
Y con eso ya casi estamos, quedando

14:20.730 --> 14:22.340
arreglado aquí, configuro

14:22.340 --> 14:23.740
ese campo, pero en el constructor

14:23.740 --> 14:27.080
luego nunca lo referencio.

14:27.080 --> 14:29.090
Sólo aquí en mi función de escucha, pero como

14:29.090 --> 14:31.230
se ha mencionado, esto no se ejecuta inmediatamente

14:31.230 --> 14:32.640
en el constructor.

14:32.640 --> 14:37.640
Así que lo que voy a hacer aquí es que voy a establecer este proyectos asignados igual a una

14:38.970 --> 14:41.200
matriz vacía aquí inicialmente, por lo

14:41.200 --> 14:44.450
que estamos todos contentos y esto se inicializa.

14:44.450 --> 14:45.510
Ahora, si guardamos

14:45.510 --> 14:47.780
esto, debería compilar sin errores.

14:47.780 --> 14:50.400
Y ahora si añadimos algo aquí,

14:50.400 --> 14:51.993
¿funciona?

14:53.480 --> 14:56.270
Efectivamente, lo vemos aparecer en nuestras listas.

14:56.270 --> 14:58.270
En ambas listas por el momento porque

14:58.270 --> 15:00.847
no tenemos una lógica de filtrado y demás.

15:00.847 --> 15:03.210
Y eso es algo que podemos arreglar más adelante,

15:03.210 --> 15:04.710
pero funciona, y eso es lo

15:04.710 --> 15:06.220
importante.

15:06.220 --> 15:08.390
Sin embargo, también tenemos un error aquí.

15:08.390 --> 15:10.260
Si añado un segundo elemento, duplicamos

15:10.260 --> 15:12.370
el último elemento y añadimos los nuevos elementos,

15:12.370 --> 15:13.880
así que eso es algo que tendremos

15:13.880 --> 15:15.490
que arreglar.

15:15.490 --> 15:17.653
Y estas son todas las cosas que abordaremos,

15:17.653 --> 15:21.270
pero ahora al menos somos capaces de dar salida a algo con eso, vamos

15:21.270 --> 15:24.450
a sumergirnos en todas las mejoras como ser más claro acerca

15:24.450 --> 15:27.160
de los tipos que estamos utilizando, evitando la

15:27.160 --> 15:29.150
salida duplicada, y muchas otras cosas

15:29.150 --> 15:30.733
también.
