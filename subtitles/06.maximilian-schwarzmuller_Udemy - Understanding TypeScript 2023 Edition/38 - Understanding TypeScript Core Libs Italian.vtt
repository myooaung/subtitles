WEBVTT

00:02.190 --> 00:03.570
-: Anche qui abbiamo il modulo.

00:03.570 --> 00:06.050
Ora, il modulo è un'opzione che salterò

00:06.050 --> 00:07.540
per ora, perché ha davvero

00:07.540 --> 00:10.830
senso solo dopo aver imparato a conoscere i moduli in

00:10.830 --> 00:13.400
TypeScript e a collegare più file.

00:13.400 --> 00:15.350
Quindi, per ora, ignoriamo questo aspetto.

00:15.350 --> 00:17.250
Lib è comunque interessante.

00:17.250 --> 00:20.890
Lib è un'opzione che consente di specificare quali

00:20.890 --> 00:25.650
oggetti e funzioni predefinite TypeScript conosce.

00:25.650 --> 00:28.580
Con questo intendo cose come la collaborazione con il dom.

00:28.580 --> 00:31.930
Diciamo in indice. html abbiamo un pulsante e su questo

00:31.930 --> 00:33.700
pulsante diciamo: "Cliccami". Ora, quando facciamo clic su questo pulsante, vogliamo

00:33.700 --> 00:35.100
solo stampare il messaggio.

00:35.100 --> 00:36.610
Ora, nell'app. ts possiamo selezionare questo pulsante.

00:36.610 --> 00:39.820
Possiamo accedere a questo pulsante

00:39.820 --> 00:41.420
con un documento. querySelector.

00:43.808 --> 00:44.641
Ad esempio, selezionando il primo pulsante che troviamo.

00:44.641 --> 00:48.130
Se lo facciamo, allora funziona.

00:48.130 --> 00:51.580
Non ci sono tipi di errore in questo caso.

00:51.580 --> 00:53.000
Quindi, se vado al mio

00:53.000 --> 00:58.000
pulsante e aggiungo un EventListener qui, ottengo un errore perché TypeScript

00:58.390 --> 01:00.990
non sa se c'è un pulsante qui.

01:00.990 --> 01:04.010
Per ora possiamo ovviare a questo problema con un punto

01:04.010 --> 01:07.310
esclamativo, dopo questa riga, e tornerò in futuro su cosa

01:07.310 --> 01:08.860
fa esattamente.

01:08.860 --> 01:11.320
In pratica dice a TypeScript: "Non preoccupatevi,

01:11.320 --> 01:13.667
"un tale pulsante esisterà".

01:13.667 --> 01:15.097
"Otterremo un valore qui. Ora possiamo aggiungere un evento click qui.

01:15.097 --> 01:17.360
E poi trovare una funzione anonima,

01:17.360 --> 01:19.470
magari in una console. log cliccato.

01:19.470 --> 01:21.670
Ora, la cosa interessante non è tanto che

01:21.670 --> 01:24.920
ho dovuto aggiungere il punto

01:24.920 --> 01:26.450
esclamativo, come ho già detto,

01:26.450 --> 01:29.310
ma che se eseguo tsc questo viene compilato.

01:29.310 --> 01:31.150
Ora, TypeScript non dovrebbe

01:31.150 --> 01:34.840
lamentarsi del fatto che il documento è sconosciuto?

01:34.840 --> 01:38.370
Come fa a sapere che è disponibile un documento, una costante o una variabile

01:38.370 --> 01:39.690
di questo tipo?

01:39.690 --> 01:43.290
Come fa a sapere che, anche se è disponibile,

01:43.290 --> 01:45.610
contiene un oggetto che ha il

01:45.610 --> 01:48.350
nostro metodo querySelector?

01:48.350 --> 01:50.010
Come fa a sapere che il pulsante è qualcosa

01:50.010 --> 01:51.690
che ha il metodo addEventListener?

01:51.690 --> 01:55.932
Come fa TypeScript a sapere tutto questo?

01:55.932 --> 01:57.120
Ora si potrebbe dire: "Certo che lo sa. Perché in Vanilla JavaScript

01:57.120 --> 01:59.290
questo sarebbe codice valido, ma si tenga presente

01:59.290 --> 02:01.430
che quando si scrive codice TypeScript, non lo si scrive

02:01.430 --> 02:03.290
necessariamente per il browser.

02:03.290 --> 02:05.580
Si potrebbe scrivere il proprio Node. applicazione js con TypeScript

02:05.580 --> 02:08.080
e in effetti tutto questo

02:08.080 --> 02:11.310
non funzionerebbe.

02:11.310 --> 02:13.200
Quindi, il motivo per cui funziona

02:13.200 --> 02:14.630
è questa opzione lib e come si vede non è nemmeno

02:14.630 --> 02:18.280
impostata qui, ma se non è impostata, vengono assunte alcune impostazioni predefinite.

02:18.280 --> 02:21.940
Se non è impostato, le impostazioni predefinite dipendono

02:21.940 --> 02:24.420
dal target di JavaScript; per es6, per

02:24.420 --> 02:28.180
impostazione predefinita, include tutte le funzionalità

02:28.180 --> 02:31.536
disponibili globalmente in es6.

02:31.536 --> 02:33.270
Ad esempio, l'oggetto Mappa, disponibile in es6.

02:33.270 --> 02:35.940
Pertanto non si lamenterebbe se si utilizzasse Map.

02:35.940 --> 02:40.120
Quindi si presuppone che tutte le caratteristiche di

02:40.120 --> 02:45.120
es6 rese disponibili globalmente in JavaScript siano disponibili

02:46.400 --> 02:48.700
anche in TypeScript.

02:50.677 --> 02:51.780
Inoltre, presuppone

02:51.780 --> 02:54.530
che tutte le API DOM siano disponibili.

02:54.530 --> 02:57.070
Troverete le descrizioni dettagliate di tutte queste

02:57.070 --> 03:00.670
opzioni nel riquadro ufficiale collegato alla lezione alla fine di questo

03:00.670 --> 03:01.740
modulo.

03:01.740 --> 03:04.550
Quindi, per farla breve, se l'opzione lib non è impostata,

03:04.550 --> 03:07.300
vengono assunte alcune impostazioni predefinite, che

03:07.300 --> 03:09.490
di solito sono quelle necessarie per far funzionare

03:09.490 --> 03:11.520
TypeScript nel browser.

03:11.520 --> 03:13.760
Quindi, tutte le API DOM sono state eliminate.

03:13.760 --> 03:16.030
Se lo commentiamo e ora compilo

03:16.030 --> 03:19.014
tutto, otterrò sicuramente un errore, perché

03:19.014 --> 03:20.670
ora che lo commentano non

03:20.670 --> 03:24.780
abbiamo più le impostazioni predefinite.

03:24.780 --> 03:26.010
Invece, ora diciamo: "Ehi, per favore

03:26.010 --> 03:28.050
includi "alcune librerie predefinite", alcune definizioni

03:28.050 --> 03:30.370
di tipi predefinite, che ti darò in questo array.

03:30.370 --> 03:32.437
E, come vedete, non sto passando

03:32.437 --> 03:36.330
nessuna descrizione, nessun percorso, nessun valore.

03:36.330 --> 03:39.470
Pertanto, quello che sto dicendo a TypeScript è: "Ehi,

03:39.470 --> 03:43.213
per quanto riguarda le impostazioni predefinite, ti prego di tenerne

03:44.162 --> 03:45.050
conto". E, insomma, niente.

03:45.050 --> 03:46.920
Quindi, solo se viene commentato, funziona,

03:46.920 --> 03:50.037
perché poi TypeScript assumerà alcune impostazioni predefinite.

03:50.037 --> 03:51.770
Se imposto il valore predefinito in modo

03:51.770 --> 03:53.580
esplicito, ovviamente TypeScript si atterrà

03:53.580 --> 03:55.300
a ciò che sto impostando qui.

03:55.300 --> 03:57.410
E qui, per esempio, non conosce il documento,

03:57.410 --> 03:59.740
non conosce nemmeno la console.

03:59.740 --> 04:01.600
Vogliamo quindi impostare due valori

04:01.600 --> 04:02.680
più ragionevoli e, di

04:02.680 --> 04:05.410
nuovo, se premete lo spazio di controllo, otterrete

04:05.410 --> 04:07.343
il completamento automatico.

04:08.900 --> 04:10.930
Ad esempio, si potrebbe aggiungere la dom.

04:10.930 --> 04:12.360
Si tratta di un identificatore e ci sono alcuni identificatori

04:12.360 --> 04:13.800
predefiniti, che TypeScript comprende; anche in questo

04:13.800 --> 04:15.800
caso, troverete un elenco completo nella documentazione ufficiale.

04:15.800 --> 04:18.280
I documenti relativi a questa opzione

04:18.280 --> 04:21.070
sono allegati a questa lezione.

04:21.070 --> 04:22.840
Quindi, questo è un identificatore che

04:22.840 --> 04:26.070
TypeScript capisce ed è un identificatore che fondamentalmente sblocca

04:26.070 --> 04:27.750
tutte le API DOM in TypeScript, in modo

04:27.750 --> 04:30.100
che TypeScript capisca cosa si sta facendo qui.

04:30.100 --> 04:32.680
Quindi, come vedete, conosce la console,

04:32.680 --> 04:35.150
il documento e così via.

04:35.150 --> 04:37.040
Quindi, dato che stiamo lavorando con

04:37.040 --> 04:40.100
Next-Gen JavaScript, dovremmo aggiungere anche l'opzione

04:40.100 --> 04:42.550
es6, in modo che TypeScript comprenda anche tutte

04:42.550 --> 04:45.400
le opzioni es6 disponibili a livello globale.

04:45.400 --> 04:47.896
Ed è anche una buona idea aggiungere la dom. iterabile e

04:47.896 --> 04:50.830
scripthost.

04:50.830 --> 04:54.130
In questo modo si sbloccano tutte le funzioni fondamentali di JavaScript

04:54.130 --> 04:56.540
che si vogliono utilizzare e questa, tra l'altro, è l'esatta

04:56.540 --> 05:00.620
configurazione predefinita che si ottiene quando

05:00.620 --> 05:02.530
si imposta il target su es6.

05:02.530 --> 05:05.250
Quindi, se si commenta questo elemento e lo si imposta in questo

05:05.250 --> 05:07.360
modo, si ha esattamente lo stesso comportamento

05:07.360 --> 05:09.980
che si avrebbe se non si specificasse affatto lib.

05:09.980 --> 05:13.550
Ora, commenterò il tutto e con

05:13.550 --> 05:15.860
questo compilerò.

05:15.860 --> 05:17.959
Anche in questo caso, l'impostazione

05:17.959 --> 05:20.920
è un po' ridondante, ma voglio solo spiegare cosa fa.
