WEBVTT

00:02.170 --> 00:03.830
Vamos nos ater às funções.

00:03.830 --> 00:07.120
Outra característica agradável que está disponível no JavaScript

00:07.120 --> 00:09.450
moderno é que você pode atribuir argumentos padrão

00:09.450 --> 00:11.033
aos parâmetros de função.

00:11.880 --> 00:13.830
Digamos aqui em nossa função de

00:13.830 --> 00:17.720
adição, por alguma razão, queríamos um valor padrão para b.

00:17.720 --> 00:20.180
Portanto, sabemos que queremos ser capazes de somar dois números juntos.

00:20.180 --> 00:23.850
Mas caso você chame esta função com apenas um número,

00:23.850 --> 00:28.130
assumiremos um padrão para o segundo argumento, ou para o

00:28.130 --> 00:29.990
segundo parâmetro.

00:29.990 --> 00:32.120
Podemos fazê-lo adicionando um sinal de igualdade

00:32.120 --> 00:34.980
aqui na lista de parâmetros e depois definindo nosso valor padrão.

00:34.980 --> 00:36.920
Que, naturalmente, tem que corresponder ao nosso tipo.

00:36.920 --> 00:40.020
Por exemplo, um ou o que quer que seja o padrão.

00:40.020 --> 00:42.770
E agora isto nos permite chamar esta função com

00:42.770 --> 00:44.080
apenas um argumento.

00:44.080 --> 00:46.700
Então eu poderia chamá-lo assim e o TypeScript não

00:46.700 --> 00:48.830
reclamaria porque ele detecta que temos

00:48.830 --> 00:50.200
aqui um argumento padrão

00:50.200 --> 00:51.860
que é então tomado para b.

00:51.860 --> 00:53.910
E, portanto, aqui eu tenho uma

00:53.910 --> 00:58.910
saída de seis porque meu b padrão é um e eu adiciono cinco, o que faz seis Agora,

00:59.130 --> 01:03.113
uma nota importante sobre os argumentos padrão aqui.

01:04.010 --> 01:07.090
Eles têm que estar em último lugar na lista.

01:07.090 --> 01:10.710
Se você atribuir um argumento padrão a um, por exemplo, nós

01:10.710 --> 01:12.640
teremos um problema, por quê?

01:12.640 --> 01:15.290
Porque os argumentos padrão não são ignorados quando

01:15.290 --> 01:16.840
se chama uma função.

01:16.840 --> 01:19.490
Portanto, se eu chamar uma função aqui com um argumento,

01:19.490 --> 01:21.990
então os argumentos que estou passando aqui são

01:21.990 --> 01:25.060
passados para os parâmetros na mesma ordem.

01:25.060 --> 01:27.240
Assim, chamar a função com um argumento,

01:27.240 --> 01:29.900
cinco neste caso, passa este argumento para o primeiro

01:29.900 --> 01:32.400
argumento aqui na lista de parâmetros.

01:32.400 --> 01:34.150
E como o segundo argumento

01:34.150 --> 01:37.660
não é fornecido com um padrão, ele não é opcional.

01:37.660 --> 01:40.920
E, portanto, não fornecemos nenhum segundo argumento.

01:40.920 --> 01:43.730
Portanto, o TypeScript, ou JavaScript na verdade,

01:43.730 --> 01:46.800
não olha para a definição de sua função e adivinha

01:46.800 --> 01:50.650
que você provavelmente quer pular o argumento padrão e fornecer

01:50.650 --> 01:53.290
seu valor ao não-defaltado.

01:53.290 --> 01:55.740
Em vez disso, ele simplesmente adere ao pedido.

01:55.740 --> 01:59.720
E, portanto, você deve estabelecer padrões a partir da direita.

01:59.720 --> 02:01.830
Portanto, certifique-se de que os parâmetros

02:01.830 --> 02:04.010
para os quais você não aceita argumentos padrão

02:04.010 --> 02:07.523
venham primeiro, antes de seus parâmetros padrão.
