WEBVTT

1
00:00:02.320 --> 00:00:04.500
<v Instructor>Now that we learned about private and public,</v>

2
00:00:04.500 --> 00:00:07.650
I also wanna turn name into a private property.

3
00:00:07.650 --> 00:00:09.700
And now here we have a little bit of a,

4
00:00:09.700 --> 00:00:10.730
not really an issue,

5
00:00:10.730 --> 00:00:12.730
but a little bit of a inconvenience.

6
00:00:12.730 --> 00:00:14.540
We have that name field here,

7
00:00:14.540 --> 00:00:16.810
then we get a value for it here in the constructor,

8
00:00:16.810 --> 00:00:19.350
and then we store that value for that field

9
00:00:19.350 --> 00:00:21.920
here in the constructor, in the field.

10
00:00:21.920 --> 00:00:22.900
We can do that,

11
00:00:22.900 --> 00:00:25.820
and it's certainly very clear what we're doing here.

12
00:00:25.820 --> 00:00:29.690
But, in a lot of use cases, you'll have a lot of classes

13
00:00:29.690 --> 00:00:31.810
where all the properties you have,

14
00:00:31.810 --> 00:00:33.210
all the fields you have,

15
00:00:33.210 --> 00:00:35.010
are initialized to the constructor.

16
00:00:35.010 --> 00:00:36.520
And therefore, often,

17
00:00:36.520 --> 00:00:39.870
you might find yourself writing a couple of properties,

18
00:00:39.870 --> 00:00:42.090
a couple of fields like this at the top

19
00:00:42.090 --> 00:00:44.270
<v ->no matter if they're private or public -</v>

20
00:00:44.270 --> 00:00:46.320
and then you just repeat all of that

21
00:00:46.320 --> 00:00:47.993
down there in the constructor,

22
00:00:49.030 --> 00:00:52.860
just to then initialize these values here

23
00:00:52.860 --> 00:00:55.110
in the constructor function.

24
00:00:55.110 --> 00:00:57.080
You don't have to do that.

25
00:00:57.080 --> 00:01:01.690
Instead of doing this double-initialization code here,

26
00:01:01.690 --> 00:01:05.220
you can get rid of your field definitions up there.

27
00:01:05.220 --> 00:01:07.150
And now you see you will get an error.

28
00:01:07.150 --> 00:01:09.040
But you can also get rid of this here,

29
00:01:09.040 --> 00:01:12.970
and instead, now simply add the access modifier

30
00:01:12.970 --> 00:01:15.130
in front of the parameter.

31
00:01:15.130 --> 00:01:17.950
So if it should be public, add public.

32
00:01:17.950 --> 00:01:20.290
Let's say, for the name, we keep it public now.

33
00:01:20.290 --> 00:01:23.530
If it should be private, add private.

34
00:01:23.530 --> 00:01:25.250
Here, you have to add public

35
00:01:25.250 --> 00:01:30.250
because this now is an explicit instruction for typescript,

36
00:01:30.370 --> 00:01:32.880
that tells typescript that you want to

37
00:01:32.880 --> 00:01:36.450
not just get these arguments here in the constructor,

38
00:01:36.450 --> 00:01:39.880
but that you want to create properties for this class

39
00:01:39.880 --> 00:01:41.950
with the exact same names.

40
00:01:41.950 --> 00:01:45.350
And therefore, here, we should also rename n to name.

41
00:01:45.350 --> 00:01:47.600
So that the name property is created

42
00:01:47.600 --> 00:01:49.250
on the creator class.

43
00:01:49.250 --> 00:01:51.250
So this is simply a shortcut

44
00:01:51.250 --> 00:01:54.270
for this double-initialization code here.

45
00:01:54.270 --> 00:01:56.340
Where you had to find your fields,

46
00:01:56.340 --> 00:01:57.930
and then store the value,

47
00:01:57.930 --> 00:02:00.110
now we're doing it all in one go.

48
00:02:00.110 --> 00:02:02.690
We define which arguments the constructor takes,

49
00:02:02.690 --> 00:02:04.430
and then for every argument

50
00:02:04.430 --> 00:02:07.290
which has such a access modifier in front of it,

51
00:02:07.290 --> 00:02:09.630
a property of the same name is created,

52
00:02:09.630 --> 00:02:11.480
and the value for the argument

53
00:02:11.480 --> 00:02:14.420
is stored in that created property.

54
00:02:14.420 --> 00:02:17.750
So now we just have to fix our department creation here,

55
00:02:17.750 --> 00:02:20.780
and add an ID because I added this new argument.

56
00:02:20.780 --> 00:02:22.230
And now what you'll see is

57
00:02:22.230 --> 00:02:25.640
that when we call describe down there,

58
00:02:25.640 --> 00:02:28.113
and I do actually, I'll put the ID there as well,

59
00:02:29.130 --> 00:02:32.640
maybe by changing this department user string,

60
00:02:32.640 --> 00:02:34.160
literal here,

61
00:02:34.160 --> 00:02:34.993
Department

62
00:02:37.410 --> 00:02:38.890
this.id

63
00:02:40.205 --> 00:02:42.450
and then here this.name,

64
00:02:42.450 --> 00:02:45.380
you will see that this all still works.

65
00:02:45.380 --> 00:02:47.360
It compiles without errors here.

66
00:02:47.360 --> 00:02:49.980
And here we get the output with our ID

67
00:02:49.980 --> 00:02:51.710
and with our name.

68
00:02:51.710 --> 00:02:53.480
Because of that little shortcut,

69
00:02:53.480 --> 00:02:55.563
we also saved some code for all of that.

