WEBVTT

00:02.200 --> 00:04.920
演讲者：这就是Typescript的类､

00:04.920 --> 00:07.510
属性和继承｡

00:07.510 --> 00:08.343
正如我提到的,

00:08.343 --> 00:12.490
这些特性虽然在Javascript中普遍得到支持,

00:12.490 --> 00:14.230
但在现代JavaScript中,

00:14.230 --> 00:21.060
当然除了类型赋值之外, 也除了受保护的私有公有｡

00:21.060 --> 00:24.770
这些关键字实际上仅在Typescript中可用｡ 

00:24.770 --> 00:28.560
但是, 这并不是你可以用类做的全部事情｡ 

00:28.560 --> 00:29.940
无论何时需要的功能,

00:29.940 --> 00:32.840
你也有在vanilla JavaScript中,

00:32.840 --> 00:38.610
其中也支持在Typescript中, 是getter和setter｡

00:38.610 --> 00:42.050
现在, 我们以会计部门为例,

00:42.050 --> 00:43.390
假设我们有一份最后的报告,

00:43.390 --> 00:47.450
即财产报告｡

00:47.450 --> 00:51.630
这是一个私有属性, 它是一个字符串类型,

00:51.630 --> 00:53.310
所以我们有它｡

00:53.310 --> 00:56.480
然后我们在这里初始化它,

00:56.480 --> 01:01.480
作为我们的reports属性顺序参数,

01:02.270 --> 01:04.880
它们是第一个值｡

01:04.880 --> 01:07.877
当然, 如果我们传入空的报告数组,

01:07.877 --> 01:09.890
它基本上是未定义的｡

01:09.890 --> 01:17.010
现在, 当我们添加一个报告时, 我希望将最后一个报告设置为文本｡

01:17.010 --> 01:20.440
这就是我们添加到reports数组中的内容｡ 

01:20.440 --> 01:26.250
现在最后一个报告是私有的, 所以我们可以从这个方法里面访问它,

01:26.250 --> 01:30.240
但是我们不能从外面用点标记来访问它｡

01:30.240 --> 01:33.440
现在, 我们可以添加一个getter, 使其仍然可以访问｡ 

01:33.440 --> 01:36.020
getter基本上是一个属性,

01:36.020 --> 01:38.670
当您检索值时, 您可以在其中执行函数或方法,

01:38.670 --> 01:44.460
并允许您作为开发人员添加更复杂的逻辑｡

01:44.460 --> 01:47.560
在这里, 您可以使用get关键字创建一个getter,

01:47.560 --> 01:49.250
然后使用您选择的任何名称｡

01:49.250 --> 01:54.180
通常与您尝试控制访问的属性密切相关｡

01:54.180 --> 01:58.180
例如, 在这里, 我们可以将其命名为最新报告｡ 

01:58.180 --> 01:59.340
什么都行｡ 

01:59.340 --> 02:01.630
现在, 重要的是, 它的定义就像一个方法｡ 

02:01.630 --> 02:04.260
所以你要加上圆括号, 然后是大括号｡ 

02:04.260 --> 02:07.250
在这里, 你必须返回一些东西,

02:07.250 --> 02:11.990
这很重要getter方法, 必须返回一些东西.

02:11.990 --> 02:14.610
所以你可以返回最后一个报告,

02:14.610 --> 02:16.660
然后我们把它封装起来,

02:16.660 --> 02:19.570
因为现在可以公开访问了｡

02:19.570 --> 02:22.720
但通常您需要更复杂的逻辑｡ 

02:22.720 --> 02:27.600
这里我们可以检查这里是否有一个值, 如果这是真的｡

02:27.600 --> 02:28.960
如果它不是未定义的,

02:28.960 --> 02:34.440
那么我们希望返回最后一个报告, 否则我们可能希望返回一些不同的逻辑, 例如,

02:34.440 --> 02:37.850
假设否则我们抛出一个错误消息, 其中包含throw

02:37.850 --> 02:42.650
new error, no reports found｡

02:42.650 --> 02:46.650
所以现在我们给这个属性添加了更多的逻辑, 更复杂的逻辑,

02:46.650 --> 02:51.500
当我们想检索它的时候, 我们不能直接通过点符号检索这个属性,

02:51.500 --> 02:57.240
但是我们可以把它作为一个属性来最终运行这个逻辑｡

02:57.240 --> 02:58.810
那么, 这将如何工作呢？

02:58.810 --> 03:02.170
在那里, 我创建了我的会计部门｡ 

03:02.170 --> 03:07.120
在我添加我的报告之前, 如果我试图控制台日志,

03:07.120 --> 03:08.693
会计｡ 这是最新报道,

03:09.630 --> 03:11.010
也是最重要

03:11.010 --> 03:13.902
哦, 会计 最新报道

03:13.902 --> 03:16.890
现在, 重要的是, 您要将其作为属性来访问｡ 

03:16.890 --> 03:18.690
所以这里没有括号｡ 

03:18.690 --> 03:20.570
您不能将其作为方法执行｡ 

03:20.570 --> 03:24.460
您只需像访问普通属性一样访问它,

03:24.460 --> 03:27.890
在后台, 它将执行该方法.

03:27.890 --> 03:31.670
如果我在添加报告之前尝试了这个方法, 我们会看到,

03:31.670 --> 03:35.440
这个方法重建时没有错误, 重新编译时也没有错误,

03:35.440 --> 03:38.550
但是这里会抛出一个错误, 这是我们自定义的,

03:38.550 --> 03:48.310
没有发现报告的错误, 因为还没有添加报告, 因为使用了这个方法作为getter, 访问这个方法并执行它.

03:48.310 --> 03:51.560
如果我们没有报告, 我们就不会进入这个IF检查,

03:51.560 --> 03:52.830
或者进入这个IF语句,

03:52.830 --> 03:55.693
因此这里的这一行就开始了｡

03:56.590 --> 04:00.250
另一种方法是, 如果我们在添加报告后将其下移,

04:00.250 --> 04:02.210
那么我们当然可以保存它,

04:02.210 --> 04:08.400
这样就不会再出现错误, 而是输出最后一个报告｡

04:08.400 --> 04:09.750
所以这是一个吸气剂｡ 

04:09.750 --> 04:12.190
您还可以添加一个setter｡ 

04:12.190 --> 04:14.550
添加setter的方式几乎相同｡ 

04:14.550 --> 04:16.290
您可以使用set关键字,

04:16.290 --> 04:18.630
然后再使用您选择的任何名称｡

04:18.630 --> 04:22.870
通常是与应该设置的属性相关的名称｡

04:22.870 --> 04:25.570
因此, 在这里我将重新使用最近报告

04:25.570 --> 04:29.150
这样我们就可以用它来读取和设置一个值｡

04:29.150 --> 04:31.850
同样, 您将其定义为方法｡

04:31.850 --> 04:34.850
但现在, 这需要一个论证｡ 

04:34.850 --> 04:38.630
用户应传入的值｡ 

04:38.630 --> 04:40.940
这里应该有一个字符串值,

04:40.940 --> 04:46.160
现在你可以在这里运行任何你想存储它的逻辑｡

04:46.160 --> 04:48.530
现在, 由于我们在这里传递了一个最近报告的值,

04:48.530 --> 04:53.080
我在最后希望执行添加报告｡

04:53.080 --> 04:55.370
因此这里setter可以简单地作为add

04:55.370 --> 04:57.140
report方法的替代方法｡

04:57.140 --> 05:01.280
在这里, 我们可以访问此添加报告｡ 

05:01.280 --> 05:03.760
这是必需的, 因为我们在类的内部｡ 

05:03.760 --> 05:07.280
我们先指涉类别, 然后在这里指涉这个类别的方法｡ 

05:07.280 --> 05:10.380
现在我们可以在这里进行数值转换｡ 

05:10.380 --> 05:12.310
现在我们可以添加一个更复杂的逻辑,

05:12.310 --> 05:16.130
同时检查value是否可能未定义, 如果是false,

05:16.130 --> 05:24.020
然后返回或抛出一个新的you错误, 我们说请传入一个有效的值｡

05:24.020 --> 05:26.140
我们也可以这样做｡ 

05:26.140 --> 05:29.010
现在我们还使用了setter｡ 

05:29.010 --> 05:31.330
有了这个, 我们可以测试它｡ 

05:31.330 --> 05:36.570
在下面, 我可以添加最近的报告｡

05:36.570 --> 05:38.780
我可以在会计上访问它, 就像这样,

05:38.780 --> 05:42.300
我们可以从它读取, 但是现在通过添加一个等号,

05:42.300 --> 05:47.150
我们试图给它设置一个值, 这将触发这个setter方法｡

05:47.150 --> 05:52.383
再次强调, 我们不把它作为一个方法来执行, 而只是像访问一个属性一样访问它.

05:53.220 --> 05:58.770
现在这里如果我传入一个空字符串, 那么从技术上讲我们确实传入了一个字符串,

05:58.770 --> 06:02.760
但是空字符串会被视为false, 看这里.

06:02.760 --> 06:04.950
因此, 我们现在应该得到一个错误｡ 

06:04.950 --> 06:09.850
所以如果我保存这行代码, 如果我保存添加了这行代码的代码,

06:11.120 --> 06:14.530
我们会得到这个错误, 请传入一个有效值｡

06:14.530 --> 06:17.010
如果我传入了一个有效的值,

06:17.010 --> 06:23.900
比如说, 我在这里输入了年终报告, 现在我保存它｡

06:23.900 --> 06:29.620
现在您将看到所有工作和年终报告是我们报告列表的一部分｡

06:29.620 --> 06:31.150
这些是getter和setter,

06:31.150 --> 06:35.390
它们非常适合封装逻辑, 也非常适合添加额外的逻辑, 当你试图读取属性,

06:35.390 --> 06:40.243
或者试图设置属性时, 它们应该运行｡
