WEBVTT

00:02.200 --> 00:03.840
Instructor: Así es como podemos

00:03.840 --> 00:06.290
manejar múltiples archivos con TypeScript.

00:06.290 --> 00:08.870
Ahora, una palabra acerca de tener múltiples archivos,

00:08.870 --> 00:11.500
cuando trabajas con múltiples archivos como lo estamos

00:11.500 --> 00:15.280
haciendo aquí, también puedes importarlos entre sí con módulos, que tal vez

00:15.280 --> 00:18.180
conozcas de JavaScript vainilla, allí tenemos módulos también,

00:18.180 --> 00:20.770
es algo que cubriré en una sección dedicada de este curso

00:20.770 --> 00:25.560
sin embargo, por ahora, sólo tenemos dos archivos que no se importan entre sí, pero que en cambio

00:25.560 --> 00:31.040
se importan en el índice.

00:31.040 --> 00:31.040
html.

00:31.040 --> 00:32.990
Ahora con eso fuera del camino, sin

00:32.990 --> 00:35.930
embargo, sabemos que podemos manejar esto como un proyecto

00:35.930 --> 00:39.060
y que podemos compilar varios archivos aquí.

00:39.060 --> 00:41.910
Ahora echemos un vistazo al tsconfig. json porque este es

00:41.910 --> 00:45.660
un archivo crucial para la gestión de este proyecto,

00:45.660 --> 00:48.100
esencialmente le dice a TypeScript

00:48.100 --> 00:51.290
cómo debe compilar estos archivos.

00:51.290 --> 00:55.260
Ahora, antes de sumergirnos en las compilerOptions donde, como

00:55.260 --> 00:56.470
su nombre indica, podemos

00:56.470 --> 00:59.620
configurar cómo se comporta el compilador, desplacémonos

00:59.620 --> 01:02.220
hacia abajo hasta el lugar que está antes de

01:02.220 --> 01:03.760
la llave de cierre pero después

01:03.760 --> 01:08.340
de esta llave de cierre anidada, y veamos algunas de las opciones que podemos

01:08.340 --> 01:11.910
añadir aquí que no afectan al compilador o al comportamiento

01:11.910 --> 01:14.190
de los pasos de compilación, sino a cómo

01:14.190 --> 01:18.410
funciona el compilador con este proyecto, porque allí, por ejemplo,

01:18.410 --> 01:23.410
puedes establecer una opción de exclusión.

01:23.700 --> 01:26.770
Ahora bien, si añades excluir aquí, eso será un array,

01:26.770 --> 01:30.450
y lo que puedes introducir aquí son rutas de acceso a archivos

01:30.450 --> 01:33.480
que no deben ser incluidos en la compilación cuando

01:33.480 --> 01:36.400
ejecutes TSC en todo el proyecto.

01:36.400 --> 01:38.010
Así que, por ejemplo, aquí podríamos decir

01:38.010 --> 01:41.137
que queremos excluir la analítica. ts de la compilación, y por supuesto,

01:41.137 --> 01:43.390
esto no tiene mucho sentido aquí, pero sólo

01:43.390 --> 01:45.300
para mostrar cómo funciona.

01:45.300 --> 01:49.350
Si hacemos eso y ahora volvemos a ejecutar tsc, y en primer lugar borro

01:49.350 --> 01:51.600
analytics. js para que podamos ver

01:51.600 --> 01:53.730
si se recrea, si ahora ejecutamos tsc o tsc

01:53.730 --> 01:59.810
en modo de vigilancia, no se ve ninguna analítica.

01:59.810 --> 01:59.810
js,

01:59.810 --> 02:02.060
y la razón es que estamos excluyendo ese archivo.

02:02.060 --> 02:03.340
Ahora, por supuesto, para

02:03.340 --> 02:04.670
este archivo, esto no tiene

02:04.670 --> 02:07.250
mucho sentido porque típicamente quiero incluirlo,

02:07.250 --> 02:09.360
pero si tuvieras un archivo que por alguna

02:09.360 --> 02:12.440
razón no debería ser compilado, puedes excluirlo así.

02:12.440 --> 02:14.210
También puedes trabajar con comodines,

02:14.210 --> 02:15.810
y por ejemplo, si tuvieras un archivo

02:15.810 --> 02:20.810
que se llama analytics. dev. ts y realmente no quieres compilar

02:20.850 --> 02:22.900
eso, podrías decir que todos los archivos

02:22.900 --> 02:25.770
que terminan en dev. ts no deben ser compilados, y

02:25.770 --> 02:27.790
puedes hacerlo añadiendo también un asterisco

02:27.790 --> 02:29.620
aquí, que es un comodín básicamente,

02:29.620 --> 02:31.630
y ahora TypeScript ignorará cualquier

02:31.630 --> 02:36.470
archivo que tenga .

02:36.470 --> 02:36.470
dev. ncluye.

02:36.470 --> 02:40.037
También podría añadir asterisco, asterisco, barra aquí,

02:40.037 --> 02:43.080
y eso significaría que cualquier archivo con ese patrón

02:43.080 --> 02:45.770
en cualquier carpeta será ignorado.

02:45.770 --> 02:47.420
Así que estas son cosas que puedes

02:47.420 --> 02:49.220
configurar aquí, lo único que quiero

02:49.220 --> 02:51.500
configurar aquí, y es una configuración que encontrarás

02:51.500 --> 02:54.103
a menudo, es que quiero excluir node_modules, y la idea

02:55.409 --> 02:58.260
aquí es que no quiero compilar ningún archivo TypeScript

02:58.260 --> 03:01.373
que pueda tener dentro de node_modules.

03:02.449 --> 03:05.080
Ahora, node_modules es esa carpeta que contiene

03:05.080 --> 03:07.160
todas las dependencias que instalamos

03:07.160 --> 03:09.570
aquí en el paquete. json y las dependencias

03:09.570 --> 03:11.890
de estas dependencias, y por lo tanto, estas

03:11.890 --> 03:14.660
son las bibliotecas de terceros que estamos importando,

03:14.660 --> 03:16.810
que no queremos tocar, y si alguna de estas

03:16.810 --> 03:18.510
bibliotecas debe enviar algún código

03:18.510 --> 03:20.630
TypeScript, entonces ciertamente no queremos

03:20.630 --> 03:22.690
compilarlo, sólo ralentizará nuestro

03:22.690 --> 03:25.840
proceso de compilación, y en el peor de los casos, podría incluso

03:25.840 --> 03:29.200
romper nuestro proyecto.

03:29.200 --> 03:30.370
Así que por lo tanto, es

03:30.370 --> 03:33.330
bastante común para excluir node_modules aquí, aunque voy

03:33.330 --> 03:36.510
a decir, si usted no especifica la opción de exclusión en absoluto,

03:36.510 --> 03:41.420
node_modules se excluye automáticamente como una configuración predeterminada, por lo que

03:41.420 --> 03:43.980
realmente no es necesario añadir esta opción aquí,

03:43.980 --> 03:48.520
esto sería el valor predeterminado, sólo quiero mostrar que excluir existe y cómo se podría

03:48.520 --> 03:50.570
utilizar si la única cosa que desea excluir

03:50.570 --> 03:53.404
es node_modules, usted no tiene que añadir la clave de exclusión

03:53.404 --> 03:55.670
en absoluto.

03:55.670 --> 03:58.500
Sin embargo, si lo añades, debes establecer node_modules

03:58.500 --> 04:01.400
porque, de lo contrario, no lo excluirá.

04:01.400 --> 04:04.570
Ahora, además de excluir, también tenemos incluir,

04:04.570 --> 04:06.630
e incluir te permite hacer lo contrario,

04:06.630 --> 04:09.570
te permite decirle específicamente a TypeScript

04:09.570 --> 04:12.730
qué archivos quieres incluir en el proceso de compilación,

04:12.730 --> 04:16.380
y cualquier cosa que no esté listada aquí no se compilará, así

04:16.380 --> 04:20.620
que si apunto a app. ts aquí, verás que si vuelvo a ejecutar tsc, tampoco

04:20.620 --> 04:25.570
obtendremos ninguna analítica. ts, o no hay análisis.

04:25.570 --> 04:25.570
archivo js debería decir.

04:25.570 --> 04:26.403
¿Por qué?

04:26.403 --> 04:29.230
Porque la analítica. js no está incluido en include,

04:29.230 --> 04:32.370
y como he dicho, si ponemos la clave de inclusión, entonces realmente

04:32.370 --> 04:33.970
tenemos que incluir todo lo que

04:33.970 --> 04:35.810
queremos compilar.

04:35.810 --> 04:40.080
Así que, por supuesto, aquí también podríamos añadir la analítica. ts aquí, y con esa adición, empezaríamos

04:40.080 --> 04:46.740
y lo compilaríamos, como ves ahora, tenemos la analítica.

04:46.740 --> 04:46.740
js,

04:46.740 --> 04:49.650
o como alternativa, especificamos aquí una carpeta completa que

04:49.650 --> 04:52.560
normalmente contiene los archivos que queremos compilar.

04:52.560 --> 04:55.520
Excluir, por cierto, si se establece junto a incluir

04:55.520 --> 04:57.160
filtrará hacia abajo incluir,

04:57.160 --> 05:00.290
así que si excluimos alguna subcarpeta de una carpeta

05:00.290 --> 05:01.740
que es parte de incluir, entonces

05:01.740 --> 05:04.980
esa subcarpeta excluida será excluida, así que básicamente

05:04.980 --> 05:08.720
compilamos incluir menos excluir.

05:08.720 --> 05:10.420
Ahora, por supuesto, aquí no quiero establecer

05:10.420 --> 05:12.520
include, quiero compilar todos los archivos de

05:12.520 --> 05:15.050
TypeScript, y por lo tanto no tengo que preocuparme por eso,

05:15.050 --> 05:17.200
excluir node_modules es todo lo que necesito, y como

05:17.200 --> 05:18.930
he explicado, teóricamente ni siquiera

05:18.930 --> 05:20.280
necesito añadir eso porque eso

05:20.280 --> 05:22.423
estaría excluido por defecto.

05:23.260 --> 05:25.310
Ahora también tienes una opción de archivos,

05:25.310 --> 05:27.560
esto te permite apuntar a los archivos individuales,

05:27.560 --> 05:30.870
así que es un poco como incluir con la diferencia de que aquí no puedes

05:30.870 --> 05:34.200
especificar carpetas enteras que quieres incluir, en su lugar sólo

05:34.200 --> 05:36.020
especificas los archivos individuales

05:36.020 --> 05:38.220
que quieres compilar, esto podría ser una opción

05:38.220 --> 05:40.710
para proyectos más pequeños donde sabes que sólo

05:40.710 --> 05:48.560
trabajarás con archivos libres, y por alguna razón tienes un par de otros archivos TypeScript que no quieres tocar, entonces puedes establecer la lista

05:48.560 --> 05:51.340
de archivos así.

05:51.340 --> 05:53.360
Sin embargo, es posible que no necesites

05:53.360 --> 05:55.740
esa configuración tan a menudo.

05:55.740 --> 05:58.530
Y por lo tanto, eso es todo con las opciones básicas de

05:58.530 --> 06:00.910
compilación o gestión de proyectos aquí.

06:00.910 --> 06:03.900
Ahora, por supuesto, hay mucho más que podemos especificar,

06:03.900 --> 06:08.230
mucho más que podemos especificar sobre el propio compilador y cómo se comporta

06:08.230 --> 06:10.793
durante el paso de compilación.
