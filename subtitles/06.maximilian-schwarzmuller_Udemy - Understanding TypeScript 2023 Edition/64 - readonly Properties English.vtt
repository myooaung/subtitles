WEBVTT

1
00:00:02.280 --> 00:00:04.510
<v Instructor>Kind of related to what you just learned</v>

2
00:00:04.510 --> 00:00:06.483
about access modifiers, is another modifier.

3
00:00:07.572 --> 00:00:09.590
And that's the readonly modifier.

4
00:00:09.590 --> 00:00:11.310
Let's say we have certain fields,

5
00:00:11.310 --> 00:00:14.220
which should not just be private or public,

6
00:00:14.220 --> 00:00:18.130
they also shouldn't change after their initialization.

7
00:00:18.130 --> 00:00:21.410
For example, the id should not change thereafter.

8
00:00:21.410 --> 00:00:23.520
To make it clear that it shouldn't change,

9
00:00:23.520 --> 00:00:25.670
you can add readonly here as well.

10
00:00:25.670 --> 00:00:27.890
And you could have added that up here as well.

11
00:00:27.890 --> 00:00:30.920
So here you would have also written private readonly.

12
00:00:30.920 --> 00:00:33.990
Now the readonly keyword, just like private and public,

13
00:00:33.990 --> 00:00:35.710
is introduced by TypeScript,

14
00:00:35.710 --> 00:00:37.920
it does not exist in JavaScript.

15
00:00:37.920 --> 00:00:39.910
It makes sure that if you try to write

16
00:00:39.910 --> 00:00:43.180
to its property thereafter, you fail.

17
00:00:43.180 --> 00:00:45.690
So you can only use it once during initialization

18
00:00:45.690 --> 00:00:48.620
but thereafter, let's say for addEmployee,

19
00:00:48.620 --> 00:00:52.430
for whatever reason, I try to change id to d2,

20
00:00:52.430 --> 00:00:54.200
you see, we get an error here,

21
00:00:54.200 --> 00:00:57.790
that I can't assign to id because it's readonly.

22
00:00:57.790 --> 00:01:00.800
So this adds some extra safety to make it really clear

23
00:01:00.800 --> 00:01:04.160
that a certain property should only be initialized once

24
00:01:04.160 --> 00:01:05.920
and shouldn't change thereafter,

25
00:01:05.920 --> 00:01:08.860
a requirement you have quite often for certain properties

26
00:01:08.860 --> 00:01:10.240
in your objects.

27
00:01:10.240 --> 00:01:12.630
So this can add extra type safety again,

28
00:01:12.630 --> 00:01:14.910
and make your intentions very clear.

29
00:01:14.910 --> 00:01:16.320
Of course, you can always say,

30
00:01:16.320 --> 00:01:18.350
Well, I'm the one writing the code,

31
00:01:18.350 --> 00:01:20.470
I won't do anything I don't want.

32
00:01:20.470 --> 00:01:23.060
Well, it's still good to be very clear

33
00:01:23.060 --> 00:01:24.630
when you define your code.

34
00:01:24.630 --> 00:01:28.320
Because a, you might forget what you wanted to do

35
00:01:28.320 --> 00:01:31.280
if you pause working on your code for a couple of weeks,

36
00:01:31.280 --> 00:01:32.270
or whatever it is,

37
00:01:32.270 --> 00:01:34.340
and b, you might be working in a team

38
00:01:34.340 --> 00:01:36.550
or sharing your code with other people.

39
00:01:36.550 --> 00:01:39.390
And it's generally a good idea to write clear

40
00:01:39.390 --> 00:01:42.460
and explicit code that makes your intention very clear.

41
00:01:42.460 --> 00:01:44.280
And readonly can help you there,

42
00:01:44.280 --> 00:01:47.230
because it makes it very clear what your goal is.

43
00:01:47.230 --> 00:01:49.570
If we have a look at app.js, as I mentioned,

44
00:01:49.570 --> 00:01:53.050
we see neither private nor public, nor read only,

45
00:01:53.050 --> 00:01:55.780
because that all only exists in TypeScript,

46
00:01:55.780 --> 00:01:57.610
not in JavaScript.

47
00:01:57.610 --> 00:02:01.420
We also see something different which is also interesting,

48
00:02:01.420 --> 00:02:04.580
the methods are added to the prototype

49
00:02:04.580 --> 00:02:06.490
of our constructor function.

50
00:02:06.490 --> 00:02:08.830
Now for this, you need to know what prototypes are,

51
00:02:08.830 --> 00:02:10.730
and introducing those in this course

52
00:02:10.730 --> 00:02:12.520
would be a little bit too much.

53
00:02:12.520 --> 00:02:14.140
Attached you find some resources

54
00:02:14.140 --> 00:02:16.070
where you can dive into prototypes.

55
00:02:16.070 --> 00:02:18.490
It's an important part of JavaScript,

56
00:02:18.490 --> 00:02:22.210
especially of JavaScript before we had classes,

57
00:02:22.210 --> 00:02:24.670
and it doesn't hurt to understand prototypes

58
00:02:24.670 --> 00:02:26.490
if you're a JavaScript developer.

59
00:02:26.490 --> 00:02:29.030
Still here, I will not dive deeper into them

60
00:02:29.030 --> 00:02:31.160
because it's a pure JavaScript topic,

61
00:02:31.160 --> 00:02:33.020
not specific to TypeScript.

62
00:02:33.020 --> 00:02:34.150
Indeed in TypeScript,

63
00:02:34.150 --> 00:02:36.510
we typically work less with prototypes,

64
00:02:36.510 --> 00:02:38.780
because we can do more with classes.

65
00:02:38.780 --> 00:02:42.560
And related to that, we got another important class concept,

66
00:02:42.560 --> 00:02:43.503
Inheritance.

