WEBVTT

00:02.440 --> 00:05.170
Instruktur: Sekarang berbicara tentang callback

00:05.170 --> 00:08.400
dan tipe fungsi, di sana cara kerjanya hampir sama.

00:08.400 --> 00:10.550
Katakanlah kita memiliki fungsi

00:11.800 --> 00:14.990
baru di atas sana addAndHandle, katakanlah.

00:14.990 --> 00:18.420
Di sana kita berharap mendapatkan dua angka dan kemudian saya juga

00:19.740 --> 00:22.320
ingin mendapatkan fungsi callback di sini.

00:22.320 --> 00:24.480
Jadi fungsi yang dilewatkan dan merupakan argumen

00:24.480 --> 00:26.670
yang harus melakukan sesuatu dengan hasilnya,

00:26.670 --> 00:29.930
maka di sini kita bisa menghasilkan hasilnya, tentu saja.

00:29.930 --> 00:31.060
Tetapi tidak hanya mengembalikannya,

00:31.060 --> 00:33.290
tetapi saya ingin memanggil fungsi callback

00:33.290 --> 00:35.670
dan meneruskan hasilnya.

00:35.670 --> 00:36.990
Sekarang untuk itu, saya ingin benar-benar

00:36.990 --> 00:39.270
jelas bahwa callback harus berupa fungsi.

00:39.270 --> 00:42.190
Jadi sekali lagi, saya menggunakan definisi

00:42.190 --> 00:45.640
tipe fungsi yang mungkin tidak mengembalikan apa pun

00:45.640 --> 00:49.650
tetapi mengambil angka sebagai argumen karena kita melewatkannya

00:49.650 --> 00:51.280
angka di sini.

00:51.280 --> 00:52.740
Jadi fungsi callback,

00:52.740 --> 00:55.870
fungsi yang kita operkan ke dalam fungsi ini sebagai

00:55.870 --> 00:58.460
parameter harus menerima angka.

00:58.460 --> 01:01.890
Sekarang di bawah sana, kita akan memanggil addAndHandle,

01:01.890 --> 01:05.240
memasukkan 10 dan 20 dan kemudian memasukkan fungsi.

01:05.240 --> 01:07.570
Misalnya, fungsi anonim di sini.

01:07.570 --> 01:09.710
Jadi sekarang di sini, ketika kita memanggil

01:09.710 --> 01:11.470
fungsi, ini tentu saja, bukan tipe fungsi

01:11.470 --> 01:13.620
tetapi nilai konkret yang kita masukkan untuk

01:13.620 --> 01:15.150
argumen ketiga ini.

01:15.150 --> 01:18.870
Jadi, ini sekarang di sini adalah fungsi anonim yang dibuat di

01:18.870 --> 01:22.300
sini dan di sana kita tahu kita akan mendapatkan angka.

01:22.300 --> 01:23.810
Mungkin menamainya sebagai hasil di sini

01:23.810 --> 01:26.110
dan kemudian kita bisa melakukan apa pun yang kita inginkan.

01:26.110 --> 01:27.623
Dan sekarang jika Anda mengkompilasi

01:28.570 --> 01:31.120
ini, kita melihat log ini di bawah sana, 30, yang

01:31.120 --> 01:33.540
merupakan hasil dari fungsi callback kita yang

01:33.540 --> 01:35.600
kita berikan ke addAndHandle di mana addAndHandle

01:35.600 --> 01:38.250
menggabungkan dua angka dan kemudian memanggil

01:38.250 --> 01:39.850
callback di mana callback harus

01:39.850 --> 01:43.200
memenuhi kondisi ini di sini.

01:43.200 --> 01:45.870
Keuntungan dari kita mendefinisikan definisi fungsi

01:45.870 --> 01:49.490
callback di sini adalah bahwa di dalam fungsi yang kita operasikan itu adalah

01:49.490 --> 01:52.240
tipe callback yang dapat menyimpulkan bahwa hasilnya akan

01:52.240 --> 01:54.000
menjadi angka dan karenanya kita bisa

01:54.000 --> 01:56.620
melakukan apa saja dengan hasil di sini.

01:56.620 --> 01:58.090
Apa yang bisa kita lakukan dengan

01:58.090 --> 02:00.990
angka tanpa secara eksplisit menyatakan tipe di sini karena

02:00.990 --> 02:03.226
TypeScript tahu hasilnya akan berupa angka karena

02:03.226 --> 02:04.970
kita membuatnya sangat jelas bahwa callback

02:04.970 --> 02:08.473
akan mendapatkan satu argumen yang merupakan angka.

02:09.310 --> 02:12.170
Oleh karena itu, jika kita mengharapkan argumen kedua di sini

02:12.170 --> 02:13.060
dalam callback, kita

02:13.060 --> 02:15.460
akan mendapatkan error karena kita tahu dengan baik,

02:15.460 --> 02:18.630
callback yang kita harapkan dalam fungsi addAndHandle kita hanya

02:18.630 --> 02:20.500
boleh memiliki satu argumen.

02:20.500 --> 02:22.420
Jadi, jika kita kemudian mengoper fungsi

02:22.420 --> 02:23.950
callback yang mengambil argumen

02:23.950 --> 02:26.240
kedua, itu jelas merupakan kesalahan.

02:26.240 --> 02:28.250
Satu-satunya hal yang TypeScript tidak ambil adalah

02:28.250 --> 02:30.280
jika kita mengembalikan sesuatu di sini.

02:30.280 --> 02:33.690
Jika hasil balik dan callback memang mengembalikan sesuatu, meskipun

02:33.690 --> 02:34.767
kita telah menjelaskan

02:34.767 --> 02:37.300
bahwa ia tidak seharusnya mengembalikan apapun.

02:37.300 --> 02:41.180
Namun, ini bukan kesalahan atau bug dalam TypeScript.

02:41.180 --> 02:43.150
Ini sebenarnya terjadi dengan sengaja.

02:43.150 --> 02:46.000
Dengan menentukan void di sini pada jenis callback kita, pada

02:46.000 --> 02:49.520
dasarnya kita mengatakan bahwa kita akan mengabaikan hasil apa pun yang mungkin

02:49.520 --> 02:50.910
Anda kembalikan di sini.

02:50.910 --> 02:54.030
Jadi pada dasarnya kita mengatakan di addAndHandle, di mana kita mendapatkan

02:54.030 --> 02:56.020
fungsi callback itu, kita tidak akan melakukan

02:56.020 --> 02:58.080
apa pun dengan tipe pengembalian.

02:58.080 --> 03:00.600
Itulah mengapa Anda akan dapat mengembalikan sesuatu

03:00.600 --> 03:03.550
di sini tanpa hukuman tetapi Anda tahu, karena ini didefinisikan

03:03.550 --> 03:06.850
dengan jelas di sini pada tipe callback, bahwa callback tidak akan

03:06.850 --> 03:09.230
melakukan apa pun dengan nilai yang mungkin Anda

03:09.230 --> 03:10.870
kembalikan di sini.

03:10.870 --> 03:13.543
Sehingga addAndHandle di dalam fungsi tidak akan

03:13.543 --> 03:15.680
melakukan apa pun dengan nilai yang mungkin

03:15.680 --> 03:17.120
Anda kembalikan.

03:17.120 --> 03:19.620
Dan itu tentu saja merupakan informasi yang berguna.

03:19.620 --> 03:21.270
Anda mungkin berharap bahwa di

03:21.270 --> 03:25.710
sini, kita melakukan sesuatu dengan nilai yang dikembalikan oleh callback, dan

03:25.710 --> 03:29.000
dengan menentukan tipe ini di sini, kita membuatnya sangat

03:29.000 --> 03:31.520
jelas bahwa di dalam addAndHandle kita tidak

03:31.520 --> 03:33.920
tertarik pada nilai balik apa pun.

03:33.920 --> 03:36.410
Jadi, ini tidak memaksa Anda untuk mengoper callback

03:36.410 --> 03:38.260
yang tidak mengembalikan apa pun.

03:38.260 --> 03:40.830
Ini hanya memberi tahu Anda bahwa apa pun yang mungkin Anda kembalikan

03:40.830 --> 03:42.200
tidak akan digunakan.

03:42.200 --> 03:44.070
Untuk parameternya, tentu saja berbeda.

03:44.070 --> 03:45.540
Di sana ini diberlakukan karena

03:45.540 --> 03:48.310
di sini sangat penting bahwa Anda tahu jika Anda mengoper

03:48.310 --> 03:51.720
callback yang mengharapkan lebih banyak parameter.

03:51.720 --> 03:53.490
Nah, maka Anda akan mendapatkan error atau

03:53.490 --> 03:55.350
Anda tidak akan mendapatkan hasil yang Anda

03:55.350 --> 03:57.740
inginkan karena saya hanya memberikan satu hasil.

03:57.740 --> 04:01.290
Jadi di sana kita tidak bisa mengabaikan apa yang mungkin Anda inginkan seperti

04:01.290 --> 04:02.840
halnya untuk tipe pengembalian.

04:02.840 --> 04:05.506
Kita abaikan itu di sini untuk mengoper sesuatu

04:05.506 --> 04:08.750
di mana fungsi addAndHandle bertanggung jawab untuk itu karena

04:08.750 --> 04:10.920
di situlah callback dipanggil.

04:10.920 --> 04:13.210
Inilah sebabnya mengapa parameter diberlakukan

04:13.210 --> 04:15.060
dan TypeScript sangat ketat mengenai

04:15.060 --> 04:17.150
jumlah dan jenis parameter fungsi callback

04:17.150 --> 04:19.508
dan mengapa tidak terlalu peduli dengan tipe

04:19.508 --> 04:21.253
pengembalian.
