WEBVTT

00:02.100 --> 00:04.890
Instruktur: Untuk memahami kelas-kelas, mari kita pahami

00:04.890 --> 00:07.040
pemrograman berorientasi objek.

00:07.040 --> 00:10.050
Sekarang, tergantung pada tingkat pengetahuan Anda dan

00:10.050 --> 00:12.560
jika Anda bekerja dengan JavaScript modern dan

00:12.560 --> 00:15.340
mungkin juga beberapa bahasa pemrograman lainnya,

00:15.340 --> 00:18.320
Anda mungkin menyadari untuk apa kelas-kelas itu ada dan

00:18.320 --> 00:22.270
apa yang dimaksud dengan pemrograman berorientasi objek OOP.

00:22.270 --> 00:24.570
Jadi karena itu, Anda juga dapat melewatkan kuliah

00:24.570 --> 00:27.720
ini untuk langsung melompat ke bagian di mana kita menulis kode.

00:27.720 --> 00:29.330
Kalau tidak, pasti tetap bersama

00:29.330 --> 00:32.200
saya karena penting untuk memahami hal ini.

00:32.200 --> 00:35.240
Ide di balik pemrograman berorientasi objek dan kelas

00:35.240 --> 00:38.550
akan menjadi penting untuk itu seperti yang akan Anda lihat,

00:38.550 --> 00:41.630
adalah bahwa Anda bekerja dengan entitas kehidupan nyata

00:41.630 --> 00:43.110
dalam kode Anda.

00:43.110 --> 00:47.370
Sehingga Anda bekerja dengan hal-hal dalam kode Anda dengan objek-objek

00:47.370 --> 00:52.110
yang menyerupai objek kehidupan nyata sejauh mungkin setidaknya untuk memudahkan

00:52.110 --> 00:54.410
Anda sebagai pengembang untuk bernalar

00:54.410 --> 00:56.250
tentang kode Anda.

00:56.250 --> 00:59.150
Misalnya, kita mungkin sedang membangun toko online dan di

00:59.150 --> 01:01.270
sana kita mungkin memiliki daftar produk.

01:01.270 --> 01:05.190
Oleh karena itu, kita mungkin ingin bekerja dengan objek daftar produk, yang memiliki

01:05.190 --> 01:08.140
semua yang kita butuhkan untuk mengelola daftar produk.

01:08.140 --> 01:11.570
Metode untuk menambahkan produk ke produk utama,

01:11.570 --> 01:13.370
daftar itu sendiri.

01:13.370 --> 01:15.670
Jadi, misalnya, ini mungkin sebuah objek

01:15.670 --> 01:18.360
yang bertanggung jawab untuk merender daftar produk

01:18.360 --> 01:19.540
dan untuk mengelolanya,

01:19.540 --> 01:22.840
yang diambil dari layanan atau dari database.

01:22.840 --> 01:25.530
Jadi, produk ini menampung semua logika rendering

01:25.530 --> 01:27.260
dan fetching serta manajemen.

01:27.260 --> 01:29.420
Nah, itulah daftar produk.

01:29.420 --> 01:32.510
Dalam program kita ke dalam situs web yang sedang kita bangun, kita

01:32.510 --> 01:33.870
mungkin juga perlu bekerja

01:33.870 --> 01:36.000
dengan produk individual sekalipun.

01:36.000 --> 01:39.540
Jadi kita mungkin juga menginginkan sebuah objek atau beberapa objek;

01:39.540 --> 01:40.960
satu untuk setiap produk yang

01:40.960 --> 01:43.930
bertanggung jawab untuk mengelola produk tunggal.

01:43.930 --> 01:47.180
Ini mungkin menyimpan dan membuat detail tentang produk itu, mungkin

01:47.180 --> 01:49.830
memungkinkan kita untuk menambahkannya ke keranjang,

01:49.830 --> 01:51.260
hal-hal seperti itu.

01:51.260 --> 01:54.900
Jadi ketika kita ingin menggambar antarmuka pengguna ke layar, kita ingin

01:54.900 --> 01:57.010
mengelolanya melalui JavaScript dan oleh karena

01:57.010 --> 01:58.740
itu melalui TypeScript, maka kita dapat

01:58.740 --> 02:00.550
mengimplementasikan ini dengan daftar

02:00.550 --> 02:02.970
produk dan objek produk yang memegang logika untuk

02:02.970 --> 02:05.370
mengelola data yang mendasarinya, tetapi juga untuk

02:05.370 --> 02:07.760
merender konten di layar.

02:07.760 --> 02:10.010
Dan tentu saja, oleh karena itu, kedua

02:10.010 --> 02:11.940
objek ini akan saling terkait.

02:11.940 --> 02:14.790
Kita mungkin juga memiliki objek keranjang belanja di layar kita,

02:14.790 --> 02:16.410
yang bertanggung jawab untuk merender

02:16.410 --> 02:18.040
dan mengelola kartu belanja.

02:18.040 --> 02:20.380
Ini tentu saja juga terkait dengan produk.

02:20.380 --> 02:22.930
Dan oleh karena itu, ia memegang semua logika yang kita butuhkan

02:22.930 --> 02:24.880
untuk membuat kartu belanja kita, melakukan

02:24.880 --> 02:28.073
pemesanan dan berkomunikasi dengan server dan sebagainya.

02:28.073 --> 02:31.190
Jadi, itu akan menjadi salah satu cara bagaimana kita bisa berpikir tentang

02:31.190 --> 02:33.010
aplikasi yang sedang kita bangun.

02:33.010 --> 02:35.590
Bagaimana kita bisa membaginya menjadi potongan-potongan

02:35.590 --> 02:37.670
logis yang masuk akal bagi kita sebagai manusia.

02:37.670 --> 02:40.320
Dan dalam kode di TypeScript dan JavaScript, di

02:40.320 --> 02:42.920
sebagian besar bahasa pemrograman modern, ini

02:42.920 --> 02:46.750
didukung secara aktif karena kami memiliki objek yang merupakan struktur

02:46.750 --> 02:48.900
data yang lebih kompleks yang memiliki

02:48.900 --> 02:50.640
properti dan metode.

02:50.640 --> 02:53.340
Dan tentu saja kita juga memilikinya dalam JavaScript.

02:53.340 --> 02:57.310
Tetapi kita mungkin juga memiliki kelas yang membantu kita dengan itu.

02:57.310 --> 02:59.100
Sekarang apa ide di balik kelas?

02:59.100 --> 03:00.740
Dan apakah contoh-contoh itu?

03:00.740 --> 03:02.030
Ketika kita mendapatkan objek-objek

03:02.030 --> 03:04.690
ini dan ketika mengikuti pendekatan berorientasi objek

03:04.690 --> 03:07.500
ini, kita dapat mempertimbangkan untuk membagi aplikasi

03:07.500 --> 03:11.130
kita atau logika aplikasi kita ke dalam objek-objek tersebut yang mengelola

03:11.130 --> 03:13.750
bagian-bagian dari logika kita.

03:13.750 --> 03:17.000
Sekarang terkait dengan ide menggunakan objek-objek ini

03:17.000 --> 03:19.340
yang tentu saja ada di JavaScript, kita dapat

03:19.340 --> 03:23.910
menggunakan objek-objek di sana sebagai ide untuk memiliki kelas.

03:23.910 --> 03:27.470
Objek adalah hal-hal konkret yang kita kerjakan dalam kode kita.

03:27.470 --> 03:30.380
Struktur data yang kita gunakan untuk menyimpan data

03:30.380 --> 03:33.450
untuk menyimpan metode untuk mengeksekusi metode.

03:33.450 --> 03:36.570
Kelas adalah cetak biru untuk objek.

03:36.570 --> 03:40.880
Kelas-kelas memungkinkan kita untuk mendefinisikan bagaimana objek seharusnya terlihat;

03:40.880 --> 03:42.230
data apa yang harus mereka pegang,

03:42.230 --> 03:44.070
metode apa yang harus mereka miliki, sehingga

03:44.070 --> 03:48.240
kita dapat dengan mudah membangun objek berdasarkan kelas-kelas ini.

03:48.240 --> 03:51.830
Dan kita kemudian menyebutnya sebagai instance dari kelas-kelas tersebut.

03:51.830 --> 03:54.830
Jadi sebuah objek adalah instance dari sebuah kelas jika

03:54.830 --> 03:56.850
didasarkan pada kelas tersebut, sehingga

03:56.850 --> 03:59.900
kita dapat dengan cepat mereplikasi beberapa objek dengan

03:59.900 --> 04:02.230
struktur yang sama dengan metode yang sama berdasarkan

04:02.230 --> 04:04.090
kelas yang sama.

04:04.090 --> 04:07.280
Jadi, kelas membantu kita mendefinisikan bagaimana objek seharusnya terlihat,

04:07.280 --> 04:10.170
properti dan metode apa yang mereka miliki, dan seterusnya.

04:10.170 --> 04:14.920
Jadi, kelas-kelas ada untuk mempercepat pembuatan objek.

04:14.920 --> 04:16.160
Dan ini hanyalah sebuah alternatif

04:16.160 --> 04:20.070
untuk menggunakan notasi objek literal yang sudah Anda ketahui.

04:20.070 --> 04:21.330
Mereka hanya membuatnya lebih mudah.

04:21.330 --> 04:24.620
Kelas hanya memudahkan untuk membuat beberapa objek yang

04:24.620 --> 04:26.900
secara umum memiliki struktur yang sama

04:26.900 --> 04:28.030
dan metode yang sama,

04:28.030 --> 04:31.500
dan yang mungkin hanya berbeda dalam detail data yang disimpan

04:31.500 --> 04:32.780
di sana.

04:32.780 --> 04:34.540
Katakanlah kita memiliki beberapa

04:34.540 --> 04:36.670
orang yang ingin kita wakili dengan objek.

04:36.670 --> 04:39.330
Nah, setiap orang mungkin memiliki nama

04:39.330 --> 04:40.830
dan usia, nilainya akan

04:40.830 --> 04:43.310
berbeda, struktur umumnya sama.

04:43.310 --> 04:44.500
Jadi itulah teorinya.

04:44.500 --> 04:46.113
Mari kita lihat dalam praktiknya.
