WEBVTT

00:02.200 --> 00:04.920
Pembicara: Jadi itulah kelas, properti,

00:04.920 --> 00:07.510
dan pewarisan dengan Typescript.

00:07.510 --> 00:08.343
Dan seperti yang

00:08.343 --> 00:10.260
saya sebutkan, fitur-fitur ini meskipun

00:10.260 --> 00:12.490
secara umum didukung dalam Javascript,

00:12.490 --> 00:14.230
dalam Javascript modern, tentu

00:14.230 --> 00:16.940
saja dengan pengecualian type assignments, dan

00:16.940 --> 00:21.060
juga dengan pengecualian protected private public.

00:21.060 --> 00:24.770
Kata kunci ini benar-benar hanya tersedia dalam Typescript.

00:24.770 --> 00:28.560
Sekarang, tidak semua yang bisa Anda lakukan dengan kelas-kelas.

00:28.560 --> 00:29.940
Setiap kali fitur yang

00:29.940 --> 00:32.840
dibutuhkan, yang juga Anda miliki di vanilla

00:32.840 --> 00:35.670
JavaScript, yang juga didukung di Typescript,

00:35.670 --> 00:38.610
adalah getter dan setter.

00:38.610 --> 00:42.050
Sekarang mari kita lihat bahwa di sini di departemen

00:42.050 --> 00:43.390
akuntansi misalnya,

00:43.390 --> 00:47.450
katakanlah kita memiliki laporan terakhir, properti.

00:47.450 --> 00:51.630
Yang merupakan properti pribadi, dan itu adalah tipe string,

00:51.630 --> 00:53.310
jadi kita memilikinya.

00:53.310 --> 00:56.480
Dan kemudian di sini kita menginisialisasi ini,

00:56.480 --> 01:01.480
untuk menjadi argumen pesanan properti laporan kami yang kami dapatkan di

01:02.270 --> 01:04.880
sini dan itu adalah nilai pertama.

01:04.880 --> 01:07.877
Yang tentu saja pada dasarnya tidak terdefinisi jika kita mengoper

01:07.877 --> 01:09.890
dan mengosongkan larik laporan.

01:09.890 --> 01:14.680
Sekarang ketika kita menambahkan laporan, maka saya ingin mengatur laporan

01:14.680 --> 01:17.010
terakhir ini, sama dengan teks.

01:17.010 --> 01:20.440
Yang mana yang kita tambahkan ke array laporan kita.

01:20.440 --> 01:23.890
Sekarang laporan terakhir bersifat privat, jadi kita bisa

01:23.890 --> 01:26.250
mengaksesnya dari dalam metode ini, tetapi

01:26.250 --> 01:28.590
kita tidak akan bisa mengaksesnya dari luar

01:28.590 --> 01:30.240
dengan notasi titik.

01:30.240 --> 01:33.440
Sekarang kita bisa menambahkan getter, untuk tetap membuatnya bisa diakses.

01:33.440 --> 01:36.020
Getter pada dasarnya adalah properti, di mana Anda

01:36.020 --> 01:38.670
mengeksekusi fungsi atau metode, ketika Anda mengambil

01:38.670 --> 01:40.910
nilai dan itu memungkinkan Anda sebagai pengembang

01:40.910 --> 01:42.380
untuk menambahkan logika yang

01:42.380 --> 01:44.460
lebih kompleks.

01:44.460 --> 01:47.560
Di sini, Anda membuat getter dengan menggunakan kata kunci get, dan

01:47.560 --> 01:49.250
kemudian nama apa pun pilihan Anda.

01:49.250 --> 01:51.810
Biasanya terkait erat dengan properti yang

01:51.810 --> 01:54.180
Anda coba kendalikan aksesnya.

01:54.180 --> 01:58.180
Misalnya di sini kita bisa menamakannya laporan terbaru.

01:58.180 --> 01:59.340
Hal seperti itu.

01:59.340 --> 02:01.630
Sekarang yang penting ini didefinisikan seperti metode.

02:01.630 --> 02:04.260
Jadi, Anda menambahkan tanda kurung dan kemudian kurung kurawal.

02:04.260 --> 02:07.250
Dan sekarang di sini, Anda harus mengembalikan

02:07.250 --> 02:11.990
sesuatu, yang penting metode getter, harus mengembalikan sesuatu.

02:11.990 --> 02:14.610
Jadi, Anda bisa mengembalikan laporan terakhir

02:14.610 --> 02:16.660
ini, dan kemudian kami semacam merangkum

02:16.660 --> 02:19.570
ini, karena ini dapat diakses publik sekarang.

02:19.570 --> 02:22.720
Tetapi seringkali Anda ingin memiliki logika yang lebih kompleks di sini.

02:22.720 --> 02:26.240
Jadi di sini kita bisa memeriksa apakah kita memiliki nilai di sini, jadi

02:26.240 --> 02:27.600
jika ini adalah kebenaran.

02:27.600 --> 02:28.960
Jika tidak terdefinisi, maka

02:28.960 --> 02:31.520
kita ingin mengembalikan laporan terakhir, jika

02:31.520 --> 02:34.440
tidak kita mungkin ingin mengembalikan beberapa logika

02:34.440 --> 02:37.850
yang berbeda, misalnya katakanlah jika tidak kita melempar pesan

02:37.850 --> 02:42.650
kesalahan dengan melempar kesalahan baru, tidak ada laporan yang ditemukan.

02:42.650 --> 02:46.650
Jadi sekarang kita menambahkan lebih banyak logika, logika yang lebih kompleks,

02:46.650 --> 02:49.200
ke properti ini dan ketika kita ingin mengambilnya,

02:49.200 --> 02:51.500
kita tidak bisa langsung mengambil properti ini

02:51.500 --> 02:55.290
melalui notasi titik, tetapi kita dapat menggunakan ini sebagai properti untuk

02:55.290 --> 02:57.240
menjalankan logika ini.

02:57.240 --> 02:58.810
Jadi, bagaimana cara kerjanya?

02:58.810 --> 03:02.170
Nah di bawah sana, di mana saya membuat departemen Akuntansi saya.

03:02.170 --> 03:07.120
Sebelum saya menambahkan laporan saya, jika saya mencoba untuk Console log,

03:07.120 --> 03:08.693
akuntansi. laporan terbaru,

03:09.630 --> 03:11.010
dan sekarang penting.

03:11.010 --> 03:13.902
Ups, akuntansi. laporan terbaru.

03:13.902 --> 03:16.890
Dan sekarang penting bagi Anda untuk mengakses ini sebagai properti.

03:16.890 --> 03:18.690
Jadi, tidak ada tanda kurung di sini.

03:18.690 --> 03:20.570
Anda tidak mengeksekusi ini sebagai metode.

03:20.570 --> 03:23.030
Anda hanya mengaksesnya seperti properti

03:23.030 --> 03:24.460
biasa, dan di balik layar,

03:24.460 --> 03:27.890
ini akan mengeksekusi metode ini di atas sana.

03:27.890 --> 03:31.670
Jadi jika saya mencoba ini sekarang sebelum kita menambahkan laporan kita, Kita

03:31.670 --> 03:33.940
akan melihat bahwa ini dibangun kembali tanpa kesalahan,

03:33.940 --> 03:35.440
dikompilasi ulang tanpa kesalahan,

03:35.440 --> 03:38.550
tetapi tentu saja di sini kesalahan dilemparkan, itu adalah kesalahan

03:38.550 --> 03:40.820
kustom kami tidak ada laporan yang ditemukan, karena

03:40.820 --> 03:42.820
belum ada laporan yang ditambahkan, dan karena

03:42.820 --> 03:45.370
menggunakan ini sebagai pengambil, mengakses metode

03:45.370 --> 03:48.310
ini dan menjalankannya.

03:48.310 --> 03:51.560
Jika kita tidak memiliki laporan, kita tidak akan sampai ke pemeriksaan

03:51.560 --> 03:52.830
IF ini, atau ke dalam pernyataan

03:52.830 --> 03:55.693
IF ini, dan oleh karena itu baris ini di sini, akan masuk.

03:56.590 --> 04:00.250
Sebagai alternatif jika kita memindahkannya ke bawah, setelah kita

04:00.250 --> 04:02.210
menambahkan laporan, maka tentu saja

04:02.210 --> 04:04.100
kita dapat menyimpannya, dan kita tidak

04:04.100 --> 04:05.730
lagi mendapatkan error, tetapi

04:05.730 --> 04:08.400
kita mengeluarkan laporan terakhir ini.

04:08.400 --> 04:09.750
Jadi itu adalah getter.

04:09.750 --> 04:12.190
Dan Anda juga bisa menambahkan setter.

04:12.190 --> 04:14.550
Setter ditambahkan hampir dengan cara yang sama.

04:14.550 --> 04:16.290
Anda menggunakan kata kunci set,

04:16.290 --> 04:18.630
dan sekali lagi nama apa pun pilihan Anda.

04:18.630 --> 04:21.940
biasanya nama yang terkait dengan properti yang harus

04:21.940 --> 04:22.870
disetel.

04:22.870 --> 04:25.570
Jadi di sini saya akan menggunakan kembali laporan terbaru.

04:25.570 --> 04:27.840
Sehingga kita bisa menggunakan ini baik untuk membaca nilai

04:27.840 --> 04:29.150
maupun untuk menetapkan nilai.

04:29.150 --> 04:30.090
Dan sekali lagi, Anda mendefinisikan

04:30.090 --> 04:31.850
ini seperti sebuah metode.

04:31.850 --> 04:34.850
Tetapi sekarang, hal ini perlu diperdebatkan.

04:34.850 --> 04:38.630
Nilai yang akan dimasukkan pengguna.

04:38.630 --> 04:40.940
Di sini harus ada nilai string, dan sekarang

04:40.940 --> 04:44.110
di sini Anda dapat menjalankan logika apa pun yang Anda

04:44.110 --> 04:46.160
inginkan untuk menyimpan ini.

04:46.160 --> 04:48.530
Sekarang di sini karena mengoper nilai untuk

04:48.530 --> 04:51.890
laporan terbaru, saya pada akhirnya ingin mengeksekusi laporan

04:51.890 --> 04:53.080
tambahan.

04:53.080 --> 04:55.370
Jadi di sini setter bisa menjadi alternatif

04:55.370 --> 04:57.140
untuk metode add report.

04:57.140 --> 05:01.280
Jadi di sini kita bisa mengakses laporan add ini.

05:01.280 --> 05:03.760
Ini diperlukan karena kita berada di dalam kelas.

05:03.760 --> 05:07.280
Kita merujuk ke kelas, dan kemudian ke metode kelas ini di sini.

05:07.280 --> 05:10.380
Dan sekarang kita bisa meneruskan nilai di sini.

05:10.380 --> 05:12.310
Sekarang kita bisa menambahkan logika

05:12.310 --> 05:16.130
yang lebih kompleks, dan juga memeriksa apakah nilai mungkin tidak didefinisikan

05:16.130 --> 05:19.810
jika salah, dan kemudian hanya mengembalikan atau melemparkan kesalahan

05:19.810 --> 05:24.020
baru, di mana kita mengatakan tolong masukkan nilai yang valid.

05:24.020 --> 05:26.140
Itu adalah sesuatu yang juga bisa kita lakukan.

05:26.140 --> 05:29.010
Dan sekarang kita juga menggunakan setter di sini.

05:29.010 --> 05:31.330
Dengan tambahan itu, kita bisa mengujinya.

05:31.330 --> 05:33.193
Di bawah sana, saya bisa menambahkan

05:35.400 --> 05:36.570
laporan terbaru.

05:36.570 --> 05:38.780
Saya bisa mengakses ini pada accounting, dan seperti

05:38.780 --> 05:40.770
ini kita akan membaca darinya, tetapi sekarang

05:40.770 --> 05:42.300
dengan menambahkan tanda sama dengan,

05:42.300 --> 05:44.520
kita mencoba untuk menetapkan nilai untuk itu,

05:44.520 --> 05:47.150
dan itu akan memicu metode setter ini.

05:47.150 --> 05:50.090
Sekali lagi sebelum kita tidak mengeksekusinya sebagai metode,

05:50.090 --> 05:52.383
tetapi cukup mengaksesnya seperti properti.

05:53.220 --> 05:56.030
Sekarang di sini jika saya mengoper string kosong,

05:56.030 --> 05:58.770
maka secara teknis kita memang mengoper string, tetapi

05:58.770 --> 06:02.760
string kosong akan diperlakukan sebagai false, lihat di sini.

06:02.760 --> 06:04.950
Dan oleh karena itu, sekarang kita seharusnya mendapatkan error.

06:04.950 --> 06:07.450
Jadi jika saya menyimpan baris kode ini, jika saya menyimpan

06:07.450 --> 06:09.850
kode dengan baris kode yang ditambahkan ini, kami

06:11.120 --> 06:14.530
mendapatkan kesalahan ini, harap masukkan nilai yang valid.

06:14.530 --> 06:17.010
Jika saya memasukkan nilai yang valid,

06:17.010 --> 06:22.010
jika saya mengatakan laporan akhir tahun di sini misalnya, dan sekarang

06:22.250 --> 06:23.900
saya simpan ini.

06:23.900 --> 06:27.210
Sekarang Anda akan melihat ini semua berfungsi dan laporan akhir

06:27.210 --> 06:29.620
tahun adalah bagian dari daftar laporan kami.

06:29.620 --> 06:31.150
Jadi ini adalah getter dan setter,

06:31.150 --> 06:33.620
yang bisa sangat bagus untuk mengenkapsulasi logika,

06:33.620 --> 06:35.390
dan untuk menambahkan logika ekstra, yang

06:35.390 --> 06:38.050
harus dijalankan ketika Anda mencoba membaca properti, atau

06:38.050 --> 06:40.243
ketika Anda mencoba mengatur properti.
