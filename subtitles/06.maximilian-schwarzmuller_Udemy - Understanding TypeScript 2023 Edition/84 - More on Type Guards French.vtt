WEBVTT

00:02.220 --> 00:04.080
- : Maintenant, les types d'intersection sont une chose.

00:04.080 --> 00:05.470
Cependant, une autre fonctionnalité

00:05.470 --> 00:07.800
est plus souvent utilisée, à savoir les gardes de type, une

00:07.800 --> 00:10.590
fonctionnalité que nous avons en fait déjà un peu utilisée.

00:10.590 --> 00:12.400
Utilisons Combinable ici.

00:12.400 --> 00:15.560
Il s'agit d'un type d'union où nous avons soit une chaîne, soit un nombre,

00:15.560 --> 00:18.020
et les gardes de type nous aident avec les types d'union

00:18.020 --> 00:21.050
parce que, bien qu'il soit agréable d'avoir la flexibilité, souvent

00:21.050 --> 00:23.610
vous avez besoin de savoir quel type exact vous obtenez

00:23.610 --> 00:26.200
maintenant au moment de l'exécution.

00:26.200 --> 00:28.630
Disons que nous avons ici notre fonction

00:28.630 --> 00:33.070
add où je reçois un nombre qui doit être de type Combinable, donc une chaîne

00:33.070 --> 00:35.100
ou un nombre, et, par conséquent,

00:35.100 --> 00:37.990
je vais le nommer a ici, et puis j'ai un autre argument

00:37.990 --> 00:39.520
qui doit également être Combinable,

00:39.520 --> 00:42.110
donc un nombre ou une chaîne, et puis je veux

00:42.110 --> 00:44.640
retourner a plus b.

00:44.640 --> 00:47.020
Or, nous avons vu dans le passé que cela ne fonctionne pas.

00:47.020 --> 00:51.320
Au lieu de cela, nous devons maintenant vérifier si typeof

00:51.320 --> 00:53.740
a est égal à string, par exemple,

00:55.660 --> 01:01.000
ou si typeof b est égal à string, et si c'est le cas, nous retournons

01:01.000 --> 01:04.681
a. toString plus b. toString.

01:04.681 --> 01:06.750
Nous concaténons donc ces deux chaînes

01:06.750 --> 01:09.570
; sinon, si elles ne sont pas incluses dans l'instruction

01:09.570 --> 01:11.510
if, nous renvoyons a plus b comme ceci,

01:11.510 --> 01:13.270
car le groupe de types sait maintenant

01:13.270 --> 01:15.620
que a et b doivent être des nombres ici, car si au

01:15.620 --> 01:18.230
moins l'un d'entre eux n'était pas un nombre, nous

01:18.230 --> 01:19.710
serions ici.

01:19.710 --> 01:22.890
En effet, nous avons souvent

01:22.890 --> 01:25.280
des fonctions qui fonctionnent

01:25.280 --> 01:27.980
avec deux ou trois types

01:27.980 --> 01:32.550
différents et, par conséquent, un type

01:32.550 --> 01:34.830
union est parfait, mais

01:34.830 --> 01:38.160
ce que vous faites exactement

01:38.160 --> 01:40.570
avec les valeurs dépend

01:40.570 --> 01:51.670
du type, comme ici, où nous concaténons ou ajoutons mathématiquement.

01:51.670 --> 01:55.310
Maintenant, il s'agit d'une protection de type utilisant typeof.

01:55.310 --> 01:58.970
Vous pouvez également écrire d'autres types de gardes de type.

01:58.970 --> 02:00.880
et pour cela, revenons à mes types d'administrateur

02:00.880 --> 02:03.050
et d'employé, où j'ai obtenu des privilèges

02:03.050 --> 02:04.950
sur l'administrateur et startDate

02:04.950 --> 02:06.943
sur l'employé.

02:08.590 --> 02:11.810
Nous avons maintenant l'ElevatedEmployee qui combine les deux.

02:11.810 --> 02:14.980
Maintenant, créez également un autre type ici.

02:14.980 --> 02:16.330
C'est l'employé inconnu.

02:18.000 --> 02:21.940
Il s'agit soit d'un employé, soit d'un administrateur.

02:21.940 --> 02:25.540
Nous avons donc un type d'union utilisant mes deux types d'objets personnalisés.

02:25.540 --> 02:28.173
Donc l'employé inconnu est l'un des deux.

02:29.230 --> 02:32.003
Maintenant, nous pourrions avoir une fonction, printEmployeeInformation,

02:34.620 --> 02:36.420
où je dois passer un employé, et qui devrait

02:36.420 --> 02:39.660
être du type employé inconnu.

02:39.660 --> 02:41.610
Maintenant, ici, je veux consoler. enregistrer diverses

02:41.610 --> 02:44.030
informations sur l'employé.

02:44.030 --> 02:47.210
Par exemple, le nom de l'emp. nom, ce qui fonctionnera

02:47.210 --> 02:48.580
sans problème car les

02:48.580 --> 02:52.140
deux types d'employés ont une propriété nom.

02:52.140 --> 02:56.730
Mais je veux aussi consoler. enregistrer les privilèges

02:58.160 --> 03:01.520
en accédant à emp. privileges, et ici j'ai déjà

03:01.520 --> 03:04.350
des problèmes dans l'autocomplétion parce

03:04.350 --> 03:07.100
que TypeScript ne peut pas confirmer que ceci

03:07.100 --> 03:09.890
existe toujours sur l'argument, parce que

03:09.890 --> 03:13.540
le UnknownEmployee pourrait être un employé normal qui

03:13.540 --> 03:16.260
n'a pas de propriété privileges.

03:16.260 --> 03:18.330
Seul l'administrateur l'a.

03:18.330 --> 03:20.100
Donc maintenant, nous avons besoin d'un gardien de type ici.

03:20.100 --> 03:24.530
Le problème est qu'avec typeof, on ne gagnera rien.

03:24.530 --> 03:26.830
Si nous vérifions le type d'employé, ce sera

03:26.830 --> 03:29.470
juste un objet au moment de l'exécution.

03:29.470 --> 03:31.380
Cela ne nous dit pas s'il a cette propriété

03:31.380 --> 03:32.940
ou non, cependant.

03:32.940 --> 03:34.960
Par conséquent, si je déplace le code dans ce

03:34.960 --> 03:37.430
contrôle if, TypeScript n'est pas plus heureux qu'avant

03:37.430 --> 03:39.750
car un objet est, eh bien, juste un objet.

03:39.750 --> 03:41.920
Ça ne nous dit rien sur les propriétés.

03:41.920 --> 03:44.980
Nous ne pouvons pas vérifier s'il s'agit du type Employee

03:44.980 --> 03:48.130
car ce n'est pas un type que JavaScript connaît, et gardez

03:48.130 --> 03:49.840
à l'esprit que cette vérification

03:49.840 --> 03:52.560
s'exécute au moment de l'exécution et utilise

03:52.560 --> 03:56.190
JavaScript, donc nous ne pouvons comparer le typeof que nous obtenons

03:56.190 --> 03:58.010
avec les types que JavaScript connaît,

03:58.010 --> 04:01.920
et ce serait objet, chaîne, nombre, et booléen, et notre type personnalisé

04:01.920 --> 04:05.610
n'en fait pas partie.

04:05.610 --> 04:07.950
Cela n'existe que dans le monde de TypeScript,

04:07.950 --> 04:11.020
pas dans le monde du JavaScript compilé.

04:11.020 --> 04:13.990
Donc, par conséquent, cela ne fonctionne pas non plus.

04:13.990 --> 04:17.960
Ici, notre solution de rechange consiste à utiliser une autre vérification si.

04:17.960 --> 04:20.240
Nous savons que nous voulons accéder aux

04:20.240 --> 04:25.240
privilèges, nous pourrions donc vérifier si les privilèges des employés existent.

04:26.400 --> 04:28.560
Le problème est que TypeScript ne nous

04:28.560 --> 04:30.690
permet pas du tout d'accéder à cette

04:30.690 --> 04:33.550
propriété, ni même de la vérifier comme ceci, mais

04:33.550 --> 04:36.200
il existe un autre moyen de la vérifier.

04:36.200 --> 04:40.000
Nous pouvons utiliser les mots-clés in qui sont intégrés dans JavaScript.

04:40.000 --> 04:43.120
Nous pouvons vérifier si le privilège, maintenant

04:43.120 --> 04:46.690
écrit sous forme de chaîne, est dans emp.

04:46.690 --> 04:49.130
Il s'agit d'un code JavaScript qui permet

04:49.130 --> 04:53.480
de vérifier si ceci existe en tant que propriété de l'employé, et si

04:53.480 --> 04:58.380
c'est le cas, TypeScript détecte cette vérification ici, et, par conséquent,

04:58.380 --> 05:01.200
nous permet d'accéder à cette propriété à l'intérieur

05:01.200 --> 05:04.543
de cette vérification if ici.

05:05.852 --> 05:08.380
Et nous pouvons répéter cela pour la startDate,

05:08.380 --> 05:12.240
et, par conséquent, vérifier si la startDate est une propriété ici,

05:12.240 --> 05:15.710
et nous pouvons, par conséquent, également l'éditer dans cette

05:16.970 --> 05:18.730
vérification si.

05:18.730 --> 05:23.687
Maintenant, avec cela, si nous appelons printEmployeeInformation, et

05:24.650 --> 05:28.363
que nous passons dans l'employé que nous avons créé, e1,

05:31.410 --> 05:34.860
vous verrez que cela s'est compilé sans erreurs et,

05:34.860 --> 05:37.430
en effet, sort les privilèges et, bien,

05:37.430 --> 05:40.730
aussi ici les données devraient juste dire Date de

05:40.730 --> 05:42.530
début ici, bien sûr.

05:42.530 --> 05:45.820
Mais avec cela, il nous donne le résultat que nous attendons.

05:45.820 --> 05:48.590
Et d'autre part, si nous introduisons un employé

05:48.590 --> 05:50.950
qui n'a pas tous ces champs, par exemple,

05:50.950 --> 05:53.090
si nous en créons un à la volée qui n'a qu'une

05:53.090 --> 05:56.383
startDate mais pas de privilèges, alors tout fonctionne

05:57.850 --> 06:00.370
et est compilé sans erreurs, et nous n'imprimons

06:00.370 --> 06:03.160
simplement rien sur les privilèges à cause de ce contrôle

06:03.160 --> 06:05.723
if que nous avons là.

06:07.650 --> 06:09.800
Lorsque vous travaillez avec des classes,

06:09.800 --> 06:13.070
vous pouvez également utiliser un autre type de garde

06:13.070 --> 06:16.520
de type, à savoir le garde de type instanceof.

06:16.520 --> 06:21.460
Disons qu'en bas, nous avons une classe, Car, et qu'elle a une méthode

06:21.460 --> 06:23.800
de conduite où elle dit simplement

06:23.800 --> 06:26.523
console. log Driving, et nous

06:28.480 --> 06:31.750
avons une autre classe, Truck, qui a également une

06:31.750 --> 06:34.623
méthode drive, ou peut-être que vous dites

06:35.840 --> 06:38.280
Driving a truck, mais nous devons dire

06:38.280 --> 06:40.250
le nom de la méthode.

06:40.250 --> 06:43.980
Et où nous avons également une méthode loadCargo, où nous

06:43.980 --> 06:46.570
avons un montant, qui est un nombre, et

06:46.570 --> 06:49.040
puis ici j'ai juste un peu de code factice

06:49.040 --> 06:53.570
où je dis, "Chargement de la cargaison plus le montant. Quelque chose comme ça, oups, le montant, quelque chose comme ça.

06:53.570 --> 06:57.323
Nous avons donc maintenant deux classes qui, bien sûr, ont une certaine similitude,

06:58.170 --> 06:59.320
la méthode d'entraînement,

06:59.320 --> 07:02.090
mais qui ont aussi une différence.

07:02.090 --> 07:03.890
Maintenant, encore une fois,

07:03.890 --> 07:08.200
nous pouvons créer un type d'union ici, Véhicule, qui est soit une voiture

07:08.200 --> 07:13.030
soit un camion, et maintenant, disons que nous créons un nouveau véhicule, v1,

07:13.030 --> 07:18.030
qui est une nouvelle voiture, et un autre, v2, qui est un nouveau camion.

07:18.050 --> 07:21.873
Maintenant, j'ai une fonction, useVehicle, qui s'attend simplement

07:23.890 --> 07:26.443
à obtenir un véhicule, qui doit être de type

07:27.700 --> 07:29.780
véhicule, donc qui doit être de ce type

07:29.780 --> 07:31.350
d'union.

07:31.350 --> 07:34.203
Nous avons donc un véhicule, et disons que notre objectif est

07:35.420 --> 07:37.490
de faire tout ce que nous pouvons faire avec les

07:37.490 --> 07:40.040
véhicules : conduire et charger une cargaison.

07:40.040 --> 07:43.400
Donc, bien sûr, nous pouvons appeler le véhicule. conduire parce que cela existe toujours, mais pour

07:43.400 --> 07:45.420
le véhicule. loadCargo, nous avons un

07:45.420 --> 07:50.010
problème car seul un camion possède cette fonction.

07:50.010 --> 07:52.720
Une voiture n'en a pas, donc ça ne marchera pas.

07:52.720 --> 07:56.440
Maintenant, nous pouvons, bien sûr, à nouveau, vérifier si loadCargo est dans

07:56.440 --> 07:59.513
le véhicule, et si c'est le cas, nous pouvons l'utiliser.

08:00.760 --> 08:05.760
Du moins si je corrige cette coquille ici.

08:06.430 --> 08:09.480
Donc, nous sauvegardons maintenant cela et nous appelons

08:09.480 --> 08:13.230
ensuite useVehicle et passons dans v1, et puis nous l'appelons à nouveau

08:13.230 --> 08:17.400
avec v2, et je sauvegarde tout cela, il compile, et il fonctionne.

08:17.400 --> 08:21.680
C'est une façon de faire.

08:21.680 --> 08:23.340
Une autre méthode, qui peut être

08:23.340 --> 08:26.580
un peu plus élégante parce qu'elle élimine également le risque

08:26.580 --> 08:28.600
d'erreur de frappe dans cette chaîne

08:28.600 --> 08:31.920
de propriété, consiste à utiliser instanceof.

08:31.920 --> 08:34.080
Nous pouvons vérifier si le véhicule est une instance de Truck.

08:34.080 --> 08:39.080
Si c'est le cas, nous savons qu'il aura une méthode loadCargo.

08:39.360 --> 08:42.510
Un instanceof est un opérateur normal intégré

08:42.510 --> 08:45.230
dans le JavaScript classique, il ne s'agit

08:45.230 --> 08:47.430
donc pas de code TypeScript.

08:47.430 --> 08:49.280
Tout comme typeof, cette fonction fait

08:49.280 --> 08:52.250
partie de JavaScript et s'exécute au moment de l'exécution.

08:52.250 --> 08:54.290
JavaScript ne connaît pas le type Truck, mais

08:54.290 --> 08:56.780
il connaît les fonctions de construction, et les classes

08:56.780 --> 08:59.330
sont finalement simplement traduites en fonctions

08:59.330 --> 09:01.490
de construction, et TypeScript est alors capable

09:01.490 --> 09:03.400
de déterminer si un véhicule a été créé sur

09:03.400 --> 09:06.580
la base de la fonction de construction Truck.

09:06.580 --> 09:10.290
Ainsi, puisque les classes sont compilées en quelque chose que JavaScript

09:10.290 --> 09:11.970
comprend, à savoir des fonctions

09:11.970 --> 09:15.450
de construction, il est en mesure de les utiliser.

09:15.450 --> 09:17.210
Si nous utilisions une interface ici au lieu

09:17.210 --> 09:20.390
d'une classe, et donc, bien sûr, nous ne pourrions pas avoir l'implémentation

09:20.390 --> 09:21.223
ici, mais nous le ferons

09:21.223 --> 09:22.950
lorsque nous créerons un objet avec la notation

09:22.950 --> 09:25.130
littérale d'objet, alors nous ne pourrions pas utiliser

09:25.130 --> 09:27.300
instanceof parce que les interfaces, comme vous l'avez

09:27.300 --> 09:30.940
appris, ne sont pas compilées dans un code JavaScript, et donc, nous ne pouvons pas les

09:30.940 --> 09:34.370
utiliser au moment de l'exécution.

09:34.370 --> 09:37.160
Pour les classes, nous pouvons le faire car JavaScript

09:37.160 --> 09:40.010
prend en charge les classes et les fonctions de construction,

09:40.010 --> 09:42.290
et avec instanceof, vous pouvez alors savoir

09:42.290 --> 09:44.500
si un objet est basé sur cette classe.

09:44.500 --> 09:47.660
Si nous savons si c'est le cas, alors nous aurons une fonction loadCargo.

09:47.660 --> 09:51.850
Ce sont donc des gardes de type.

09:51.850 --> 09:53.480
En fin de compte, les gardes

09:53.480 --> 09:55.890
de type sont juste un terme qui décrit l'idée

09:55.890 --> 09:59.470
ou l'approche consistant à vérifier si une certaine propriété

09:59.470 --> 10:02.980
ou méthode existe avant d'essayer de l'utiliser, ou si vous

10:02.980 --> 10:06.310
pouvez faire quelque chose avec le type avant d'essayer

10:06.310 --> 10:08.470
de l'utiliser.

10:08.470 --> 10:10.220
Pour les objets, cela peut être fait

10:10.220 --> 10:15.113
avec instanceof ou avec in, pour les autres types, vous pouvez utiliser typeof, et, par conséquent,

10:16.140 --> 10:19.780
vous avez maintenant toute la flexibilité pour utiliser la flexibilité

10:19.780 --> 10:22.280
que les types d'union vous donnent et toujours écrire

10:22.280 --> 10:25.090
le code qui fait alors une chose ou l'autre basée sur le

10:25.090 --> 10:29.050
type exact que vous obtenez au moment de l'exécution.
