WEBVTT

1
00:00:02.100 --> 00:00:04.890
<v Instructor>To understand classes let's understand</v>

2
00:00:04.890 --> 00:00:07.040
object oriented programming.

3
00:00:07.040 --> 00:00:10.050
Now, depending on your level of knowledge

4
00:00:10.050 --> 00:00:12.560
and if you worked with modern JavaScript

5
00:00:12.560 --> 00:00:15.340
and maybe also some other programming languages,

6
00:00:15.340 --> 00:00:18.320
you might be aware of what classes are there for

7
00:00:18.320 --> 00:00:22.270
and what OOP object oriented programming is all about.

8
00:00:22.270 --> 00:00:24.570
So therefore you can also skip this lecture

9
00:00:24.570 --> 00:00:27.720
to jump right ahead to the parts where we write code.

10
00:00:27.720 --> 00:00:29.330
Otherwise definitely stick with me

11
00:00:29.330 --> 00:00:32.200
because it is important to understand this.

12
00:00:32.200 --> 00:00:35.240
The idea behind object oriented programming

13
00:00:35.240 --> 00:00:38.550
and classes will be important for that as you will see,

14
00:00:38.550 --> 00:00:41.630
is that you work with real-life entities

15
00:00:41.630 --> 00:00:43.110
in your code you could say.

16
00:00:43.110 --> 00:00:47.370
So that you work with things in your code with objects

17
00:00:47.370 --> 00:00:52.110
that resemble real-life objects as far as possible at least

18
00:00:52.110 --> 00:00:54.410
to make it easier for you as a developer

19
00:00:54.410 --> 00:00:56.250
to reason about your code.

20
00:00:56.250 --> 00:00:59.150
For example, we might be building an online shop

21
00:00:59.150 --> 00:01:01.270
and there we might have a product list.

22
00:01:01.270 --> 00:01:05.190
We might wanna work with a product list object therefore,

23
00:01:05.190 --> 00:01:08.140
which has everything we need to manage a product list.

24
00:01:08.140 --> 00:01:11.570
A method to add products to the lead products,

25
00:01:11.570 --> 00:01:13.370
the list itself.

26
00:01:13.370 --> 00:01:15.670
So for example this might be an object

27
00:01:15.670 --> 00:01:18.360
that is responsible for rendering a list of products

28
00:01:18.360 --> 00:01:19.540
and for managing it,

29
00:01:19.540 --> 00:01:22.840
which were fetched from a service or from a database.

30
00:01:22.840 --> 00:01:25.530
So this product holds all the rendering and fetching

31
00:01:25.530 --> 00:01:27.260
and management logic.

32
00:01:27.260 --> 00:01:29.420
Now that's a product list.

33
00:01:29.420 --> 00:01:32.510
In our program into website we're building,

34
00:01:32.510 --> 00:01:33.870
we might also need to work

35
00:01:33.870 --> 00:01:36.000
with the individual product though.

36
00:01:36.000 --> 00:01:39.540
So we might also want an object or multiple objects;

37
00:01:39.540 --> 00:01:40.960
one for each product

38
00:01:40.960 --> 00:01:43.930
that is responsible for managing the single product.

39
00:01:43.930 --> 00:01:47.180
It might hold and render the details about that product,

40
00:01:47.180 --> 00:01:49.830
maybe allow us to add it to a cart,

41
00:01:49.830 --> 00:01:51.260
things like that.

42
00:01:51.260 --> 00:01:54.900
So when we want to draw user interface to the screen,

43
00:01:54.900 --> 00:01:57.010
we wanna manage that through JavaScript

44
00:01:57.010 --> 00:01:58.740
and therefore through TypeScript,

45
00:01:58.740 --> 00:02:00.550
then we could implement this with product list

46
00:02:00.550 --> 00:02:02.970
and a product object which holds the logic

47
00:02:02.970 --> 00:02:05.370
for managing the underlying data,

48
00:02:05.370 --> 00:02:07.760
but also for rendering the content on the screen.

49
00:02:07.760 --> 00:02:10.010
And of course therefore these two objects

50
00:02:10.010 --> 00:02:11.940
would kind of be related.

51
00:02:11.940 --> 00:02:14.790
We might also have a shopping cart object on our screen,

52
00:02:14.790 --> 00:02:16.410
which is responsible for rendering

53
00:02:16.410 --> 00:02:18.040
and managing the shopping card.

54
00:02:18.040 --> 00:02:20.380
It's of course also connected to the product.

55
00:02:20.380 --> 00:02:22.930
And therefore it holds all the logic we need

56
00:02:22.930 --> 00:02:24.880
to render our shopping card,

57
00:02:24.880 --> 00:02:27.240
placing orders and communicating with the server

58
00:02:27.240 --> 00:02:28.073
and so on.

59
00:02:28.073 --> 00:02:31.190
So, that would be one way of how we could think

60
00:02:31.190 --> 00:02:33.010
about the application we're building.

61
00:02:33.010 --> 00:02:35.590
How we could split it into logical pieces

62
00:02:35.590 --> 00:02:37.670
that make sense to us as humans.

63
00:02:37.670 --> 00:02:40.320
And in code in TypeScript and JavaScript,

64
00:02:40.320 --> 00:02:42.920
in most modern programming languages,

65
00:02:42.920 --> 00:02:46.750
this is actively supported because we have objects

66
00:02:46.750 --> 00:02:48.900
which are more complex data structures

67
00:02:48.900 --> 00:02:50.640
that hold properties and methods.

68
00:02:50.640 --> 00:02:53.340
And of course we do have that in JavaScript as well.

69
00:02:53.340 --> 00:02:57.310
But we might also have classes that help us with that.

70
00:02:57.310 --> 00:02:59.100
Now what's the idea behind classes?

71
00:02:59.100 --> 00:03:00.740
And what are instances?

72
00:03:00.740 --> 00:03:02.030
When we get these objects

73
00:03:02.030 --> 00:03:04.690
and when following this object oriented approach,

74
00:03:04.690 --> 00:03:07.500
we could consider splitting our app

75
00:03:07.500 --> 00:03:11.130
or our application logic into such objects

76
00:03:11.130 --> 00:03:13.750
which manage parts of our logic.

77
00:03:13.750 --> 00:03:17.000
Now connected to the idea of using these objects

78
00:03:17.000 --> 00:03:19.340
which of course do exist in JavaScript

79
00:03:19.340 --> 00:03:23.910
we can use objects there as the idea of having classes.

80
00:03:23.910 --> 00:03:27.470
Objects are the concrete things we work with in our code.

81
00:03:27.470 --> 00:03:30.380
The data structures we use to store data

82
00:03:30.380 --> 00:03:33.450
to store methods to execute methods on.

83
00:03:33.450 --> 00:03:36.570
Classes are blueprints for objects.

84
00:03:36.570 --> 00:03:40.880
Classes allow us to define how objects should look like;

85
00:03:40.880 --> 00:03:42.230
which data they should hold,

86
00:03:42.230 --> 00:03:44.070
which methods they should have,

87
00:03:44.070 --> 00:03:48.240
so that we can easily build objects based on these classes.

88
00:03:48.240 --> 00:03:51.830
And we then call this instances of the classes.

89
00:03:51.830 --> 00:03:54.830
So an object then is an instance of a class

90
00:03:54.830 --> 00:03:56.850
if it's based on such a class,

91
00:03:56.850 --> 00:03:59.900
so that we can quickly replicate multiple objects

92
00:03:59.900 --> 00:04:02.230
with the same structure the same methods

93
00:04:02.230 --> 00:04:04.090
based on the same classes.

94
00:04:04.090 --> 00:04:07.280
So classes help us define how objects should look like,

95
00:04:07.280 --> 00:04:10.170
which properties and methods they have and so on.

96
00:04:10.170 --> 00:04:14.920
So, classes exist to speed up the creation of objects.

97
00:04:14.920 --> 00:04:16.160
And it's simply an alternative

98
00:04:16.160 --> 00:04:20.070
to using the object literal notation you already know.

99
00:04:20.070 --> 00:04:21.330
They simply make it easier.

100
00:04:21.330 --> 00:04:24.620
Classes simply make it easier to create multiple objects

101
00:04:24.620 --> 00:04:26.900
which generally have the same structure

102
00:04:26.900 --> 00:04:28.030
and the same methods,

103
00:04:28.030 --> 00:04:31.500
and which might only differ in the exact data details

104
00:04:31.500 --> 00:04:32.780
which are stored in there.

105
00:04:32.780 --> 00:04:34.540
Let's say we have multiple persons

106
00:04:34.540 --> 00:04:36.670
we wanna represent with objects.

107
00:04:36.670 --> 00:04:39.330
Well each person might have a name and an age,

108
00:04:39.330 --> 00:04:40.830
the values will differ,

109
00:04:40.830 --> 00:04:43.310
the general structure is the same.

110
00:04:43.310 --> 00:04:44.500
So that's the theory.

111
00:04:44.500 --> 00:04:46.113
Let's see it in practice.

