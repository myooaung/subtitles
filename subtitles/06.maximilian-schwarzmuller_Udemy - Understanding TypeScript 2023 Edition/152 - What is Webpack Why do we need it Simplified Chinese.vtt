WEBVTT

00:02.050 --> 00:04.090
教师：那么我们有哪些劣势呢？

00:04.090 --> 00:06.030
这是我们工作的项目,

00:06.030 --> 00:12.390
使用这里的ES6模块导入分为多个文件｡

00:12.390 --> 00:15.620
现在, 让我们实际构建这个项目, 为此, 就像我们之前所做的那样,

00:15.620 --> 00:21.930
我们可以运行npm-start来启动lite-server｡

00:21.930 --> 00:24.710
当然, 在一个新的选项卡中非常重要的是,

00:24.710 --> 00:31.430
所有运行tsc-dash以在监视模式下启动TypeScript编译｡

00:31.430 --> 00:39.570
这就给了我们项目, 如果我们现在打开浏览器开发者工具中的“网络”选项卡并重新加载该文件,

00:39.570 --> 00:44.840
我们将看到我们在这里的缺点或我们在此设置中的问题｡

00:44.840 --> 00:47.490
我们看到一堆HTTP请求｡ 

00:47.490 --> 00:49.160
现在, 您可以忽略最后一个,

00:49.160 --> 00:51.380
它们来自我们的开发服务器｡

00:51.380 --> 00:58.290
但我们所有的要求都在这里应用｡  js, 项目输入｡

00:58.290 --> 00:58.290
js, 项目列表｡  js, 基础组件｡  这就是问题所在｡

01:00.960 --> 01:04.610
您会注意到, 所有这些文件都不是很大,

01:04.610 --> 01:06.320
它们相对较小｡

01:06.320 --> 01:07.590
这当然没问题,

01:07.590 --> 01:11.010
但这里有很多HTTP请求｡

01:11.010 --> 01:12.600
这有什么问题吗？

01:12.600 --> 01:15.070
如果我们看一下右边的瀑布,

01:15.070 --> 01:17.810
就能看出问题所在｡

01:17.810 --> 01:22.470
当然, 每个需要发出的HTTP请求都需要一点时间｡

01:22.470 --> 01:24.480
下载文件需要时间, 但由于它们不是那么大,

01:24.480 --> 01:27.760
这不是问题｡

01:27.760 --> 01:31.390
但是每个HTTP请求都有一个基本的开销,

01:31.390 --> 01:34.540
一个基本的持续时间｡

01:34.540 --> 01:38.570
你在这些图表前面看到的这个小盒子｡ 

01:38.570 --> 01:43.910
这接近于浏览器设置请求并发送请求所需的时间｡

01:43.910 --> 01:46.280
因此, 虽然文件的实际下载可能相对较快,

01:46.280 --> 01:55.310
但设置请求､ 在服务器上执行工作（服务器提供文件）等都需要一些时间｡

01:55.310 --> 02:00.310
现在我们有一个非常快的设置, 因为这一切都发生在我们的机器上｡

02:00.310 --> 02:03.020
我们有本地开发服务器｡ 

02:03.020 --> 02:08.690
如果您将其部署到Web上, 那么大量的请求确实会带来大量的延迟,

02:08.690 --> 02:14.760
并且会因为HTTP请求的数量而降低项目的速度｡

02:14.760 --> 02:17.280
因此, 如果我们能找到一个解决方案来减少HTTP请求的数量,

02:17.280 --> 02:21.370
那将是惊人的｡

02:21.370 --> 02:24.020
这就是Webpack发挥作用地方

02:24.020 --> 02:28.190
您可以访问webpack｡  js的｡  org, 了解更多信息｡ 

02:28.190 --> 02:30.290
最后, webpack是一个工具,

02:30.290 --> 02:33.750
它可以帮助我们将文件捆绑在一起｡

02:33.750 --> 02:36.530
我真的可以推荐他们的广泛和全面的文档,

02:36.530 --> 02:39.980
你可以在他们的页面上找到｡

02:39.980 --> 02:42.300
如果你想了解所有关于webpack｡ 

02:42.300 --> 02:46.563
在本课程中, 我们将使用一些有助于我们使用TypeScript的精选功能｡

02:47.560 --> 02:49.850
那么, Webpack到底是什么呢？

02:49.850 --> 02:53.850
这是一个捆绑, 你可以说是构建编排工具｡ 

02:53.850 --> 02:59.560
它是一个通过将代码捆绑在一起来帮助我们减少HTTP请求数量的工具｡

02:59.560 --> 03:07.050
所以我们编写的代码被分割到多个文件中, 但是webpack会把所有这些文件捆绑在一起｡

03:07.050 --> 03:10.050
此外, Webpack还可以做更多的事情｡ 

03:10.050 --> 03:13.920
它还将优化我们的代码, 它还允许我们添加更多的构建步骤,

03:13.920 --> 03:20.410
更多的构建工具, 例如, 帮助我们处理CSS文件等｡

03:20.410 --> 03:23.180
不过 , 这 不是 我们 在 本 模块 中 要 讨论 的 内容 , 因为 我

03:23.180 --> 03:26.220
想 重点 介绍 Webpack 和 TypeScript ｡

03:26.220 --> 03:30.700
首先, 让我们看一下不使用Webpack的正常设置｡

03:30.700 --> 03:32.800
我们有多个TypeScript文件,

03:32.800 --> 03:36.920
但是如果我们使用这些导入, 我们会得到多个HTTP请求,

03:36.920 --> 03:40.220
这不是很好, 因为我提到了一些原因｡

03:40.220 --> 03:43.450
此外, 我以前没有看过的一个主题是,

03:43.450 --> 03:51.290
我们也很可能有未经优化的代码, 这意味着它不是尽可能小｡

03:51.290 --> 03:55.750
当然, 我们可以通过缩短函数名等方式进一步优化代码｡

03:55.750 --> 03:58.690
当然, 我们希望有一个工具可以自动完成这一工作,

03:58.690 --> 04:03.000
这样我们就不必太手动地处理不可读的代码｡

04:03.000 --> 04:06.080
作为开发人员, 我们希望编写完全可读的代码｡ 

04:06.080 --> 04:07.850
但是如果我们有一个工具,

04:07.850 --> 04:10.740
可以缩短代码, 使其尽可能小,

04:10.740 --> 04:19.130
使用尽可能短的变量和函数名, 这样我们就可以尽可能少地发送代码｡

04:19.130 --> 04:27.600
因为更少的代码意味着用户可以更快地下载它, 这意味着我们的应用程序可以在我们的机器上更快地启动｡

04:27.600 --> 04:29.440
此外, 我们当前的设置中还安装了一个额外的开发服务器,

04:29.440 --> 04:36.860
即lite-server, 这是一个额外的软件包, 我们必须启动它｡

04:36.860 --> 04:39.320
这不是一个小奖励, 一个很好的奖励,

04:39.320 --> 04:42.280
如果我们有一个命令, 它可以做一切, 建立我们的项目,

04:42.280 --> 04:45.360
但也旋转了这样一个服务器, 它自动重新加载我们的网站,

04:45.360 --> 04:50.713
每当我们改变我们的项目中的文件｡

04:51.550 --> 04:54.270
这就是Webpack可以帮助我们地方

04:54.270 --> 04:57.240
它捆绑我们的代码, 这样我们就有更少的导入,

04:57.240 --> 05:00.670
而不是我们有一些, 良好的代码捆绑, 我们提供,

05:00.670 --> 05:06.717
它帮助我们优化我们的代码, 缩小它, 因为它的调用, 所以我们提供更少的代码,

05:06.717 --> 05:10.130
我们的用户有更少的代码下载｡

05:10.130 --> 05:12.530
如果您愿意, 我们还可以轻松地添加更多构建步骤,

05:12.530 --> 05:15.750
我们可以添加这样的开发服务器, 但如果我们真的想做的话,

05:15.750 --> 05:19.270
我们还可以做许多其他事情, 如果您想了解所有相关信息,

05:19.270 --> 05:24.130
可以访问官方webpack文档｡

05:24.130 --> 05:30.433
接下来, 让我们看看项目中的示例设置, 并了解如何在其中使用Webpack｡
