WEBVTT

00:02.450 --> 00:05.030
Instrutor: Vamos nos afastar agora da sobrecarga

00:05.030 --> 00:09.010
de funções e deixe-me apresentar um outro recurso muito legal.

00:09.010 --> 00:13.350
E isso é um encadeamento opcional.

00:13.350 --> 00:16.720
Digamos que você tem uma aplicação onde está

00:16.720 --> 00:21.603
obtendo dados de um backend de um banco de dados ou de qualquer

00:21.603 --> 00:26.350
fonte onde você não sabe com certeza se em um objeto um determinado

00:26.350 --> 00:29.500
bem está definido.

00:29.500 --> 00:33.920
Digamos que tenhamos buscadoUserData e buscadoUserData poderia ser um

00:33.920 --> 00:36.380
objeto sobre um usuário que buscamos.

00:36.380 --> 00:39.705
Lá podemos ter uma identificação, podemos

00:39.705 --> 00:44.705
ter um nome Max e também podemos esperar outro trabalho em propriedade,

00:45.730 --> 00:50.550
que é um objeto que tem um título e que depois também tem uma descrição,

00:50.550 --> 00:53.950
minha própria empresa.

00:53.950 --> 00:56.900
Agora, se obtivermos dados como estes, é claro que podemos trabalhar com eles.

00:56.900 --> 01:00.150
Agora você pode fazer coisas mais complexas, mas

01:00.150 --> 01:03.940
aqui para começar, digamos que tudo o que estou fazendo é

01:03.940 --> 01:06.871
carregar o título do trabalho aqui mesmo.

01:06.871 --> 01:09.940
Agora, se salvarmos isso com nosso servidor de desenvolvimento

01:09.940 --> 01:12.880
em funcionamento e compilação funcionando em modo de relógio,

01:12.880 --> 01:14.420
eu recebo aqui o CEO.

01:14.420 --> 01:17.395
Agora que isso está longe de ser muito extravagante,

01:17.395 --> 01:22.395
no entanto, se estamos pegando isso de um backend, por qualquer razão, talvez

01:23.080 --> 01:27.690
não busquemos todos os dados que precisamos, talvez alguns dados não estejam

01:27.690 --> 01:30.490
definidos neste ponto.

01:30.490 --> 01:34.730
Em aplicações maiores e mais complexas, você certamente trabalha

01:34.730 --> 01:39.240
às vezes com dados estruturados com dados aninhados onde você não sabe

01:39.240 --> 01:42.650
com certeza se alguma propriedade em um objeto está definida

01:42.650 --> 01:45.340
ou se é talvez indefinida.

01:45.340 --> 01:49.680
Portanto, digamos que o emprego não existe aqui por qualquer razão que não estamos

01:49.680 --> 01:53.180
buscando, aqui é claro que recebo um erro agora o TypeScript reclama

01:53.180 --> 01:55.930
sobre isso porque sabe que não há nenhuma propriedade

01:55.930 --> 01:57.843
de emprego agora.

01:57.843 --> 02:01.347
O problema é que ele sabe para estes dados que não saberia

02:01.347 --> 02:05.660
se fossem dados que estamos buscando em algum arquivo que não é controlado

02:05.660 --> 02:09.720
pelo TypeScript ou, como acabei de dizer, se talvez estejamos buscando

02:09.720 --> 02:12.530
isto no backend e não sabemos com certeza quais

02:12.530 --> 02:15.550
dados serão devolvidos.

02:15.550 --> 02:18.150
Agora, se você não souber se isso está definido ou

02:18.150 --> 02:21.730
não, o que podemos fazer no JavaScript normal é tentar acessar o emprego

02:21.730 --> 02:25.098
e se isso funciona, continuamos e acessamos o título.

02:25.098 --> 02:29.450
Esta é a maneira JavaScript de verificar se algo existe antes de mergulharmos

02:29.450 --> 02:33.520
mais profundamente naquele objeto potencial e, se isso não estiver

02:33.520 --> 02:37.110
definido, este código nunca corre e, portanto, temos um erro

02:37.110 --> 02:39.400
de tempo de execução mais amplo.

02:39.400 --> 02:42.410
Novamente aqui o TypeScript sabe que o trabalho não

02:42.410 --> 02:45.180
existe, mas se isto fosse obtido de alguma fonte

02:45.180 --> 02:48.470
onde o TypeScript não possa ser visto como o resultado de

02:48.470 --> 02:52.910
uma solicitação HTTP, esta seria a forma segura de evitar erros de tempo de

02:52.910 --> 02:54.920
execução em JavaScript.

02:54.920 --> 02:58.110
Agora, se isto existe, obtemos o mesmo resultado de antes.

02:58.110 --> 03:01.400
Se não existir, não recebemos pelo menos um erro de tempo

03:01.400 --> 03:02.233
de execução.

03:02.233 --> 03:07.020
Com o TypeScript, você realmente tem uma maneira mais agradável de fazer isso.

03:07.020 --> 03:10.520
Você tem o operador de encadeamento opcional.

03:10.520 --> 03:15.320
Você pode acrescentar um ponto de interrogação depois do que não tem certeza

03:15.320 --> 03:16.880
se está definido ou não.

03:16.880 --> 03:21.600
Pelo menos se você estiver usando o TypeScript versão 3. 7 ou superior.

03:21.600 --> 03:24.770
Aqui minha IDE não gosta disso, mas então esta é uma

03:24.770 --> 03:26.300
sintaxe suportada.

03:26.300 --> 03:30.370
Isto diz à TypeScript que isto existe, se ela tiver acesso ao trabalho e, portanto,

03:30.370 --> 03:33.450
aqui podemos acrescentar esse ponto de interrogação e, portanto,

03:33.450 --> 03:36.314
só acessar o título se o trabalho estiver definido.

03:36.314 --> 03:39.300
Agora, se fizermos isso, ainda recebo um erro aqui se eu

03:39.300 --> 03:42.490
tentar compilá-lo porque o TypeScript ainda sabe com certeza

03:42.490 --> 03:44.510
que esse trabalho não existe.

03:44.510 --> 03:47.370
Mas se ele não souber disso ou se eu comentar

03:47.370 --> 03:51.840
isso nesta compilação, tudo bem e tudo o que executa como antes.

03:51.840 --> 03:56.400
Portanto, este operador opcional de encadeamento aqui nos ajuda a acessar com segurança

03:56.400 --> 04:00.730
propriedades aninhadas e objetos aninhados em nossos dados de objeto e, se a coisa

04:00.730 --> 04:03.610
na frente do ponto de interrogação estiver indefinida,

04:03.610 --> 04:07.061
não acessará a coisa depois disso e, portanto, não lançará um erro

04:07.061 --> 04:12.420
de tempo de execução, mas, em vez disso, simplesmente não continuará.

04:12.420 --> 04:15.210
Assim, nos bastidores, isto é basicamente compilado para

04:15.210 --> 04:18.380
uma verificação "se" que verifica se isso existe antes de tentar

04:18.380 --> 04:19.213
acessar isto.
