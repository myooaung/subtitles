WEBVTT

00:02.460 --> 00:05.590
-: Więc tablice są obsługiwane i z liczbami, ciągami,

00:05.590 --> 00:07.620
boolami, obiektami i tablicami.

00:07.620 --> 00:11.400
Mamy podstawowe wartości lub typy wartości, JavaScript nos obsługiwane

00:11.400 --> 00:15.100
w TypeScript, jak dowiesz się na przykładzie obiektów w ich tablicach,

00:15.100 --> 00:17.884
TypeScript nawet oferuje znacznie więcej funkcjonalne

00:17.884 --> 00:22.720
to tam, ale to jest trochę bardziej zaawansowane, dlatego będziemy mieć spojrzenie

00:22.720 --> 00:24.940
na to później, ale nawet te podstawowe typy

00:24.940 --> 00:26.810
z tym, co dowiesz się w poprzednich

00:26.810 --> 00:30.140
wykładach są obsługiwane.

00:30.140 --> 00:33.540
Teraz TypeScript posiada kilka nowych koncepcji,

00:33.540 --> 00:37.840
nowych typów, których nie znamy z waniliowego skryptu Javy,

00:37.840 --> 00:40.300
na przykład typ tuple.

00:40.300 --> 00:44.360
Teraz możesz znać tuple z innych języków programowania,

00:44.360 --> 00:46.570
JavaScript ich nie posiada.

00:46.570 --> 00:49.570
To jest tuple na przykład, a ty powiedziałbyś,

00:49.570 --> 00:52.290
cóż to jest tablica. Jest to tablica, ale jest

00:52.290 --> 00:54.520
to tablica o stałej długości i właściwie

00:54.520 --> 00:58.650
nie tylko stałej długości, ale także stałego typu.

00:58.650 --> 01:00.730
A gdzie to się może przydać?

01:00.730 --> 01:03.350
Powiedzmy tutaj na naszej, osobie,

01:03.350 --> 01:07.830
mamy faktycznie szereg właściwości, rola, która jest tablicą

01:07.830 --> 01:11.160
z dokładnie dwoma elementami, gdzie pierwszy

01:11.160 --> 01:14.184
jest powiedzmy identyfikatorem numerycznym

01:14.184 --> 01:18.547
jak dwa, a drugi jest identyfikatorem łańcuchowym i czytelnym

01:18.547 --> 01:22.765
dla człowieka opisem jak autor.

01:22.765 --> 01:26.496
Teraz to powinno mieć zawsze dokładnie dwa elementy, ponieważ

01:26.496 --> 01:30.100
użytkownik lub osoba w tej aplikacji, którą piszemy, powiedzmy,

01:30.100 --> 01:32.720
może mieć tylko jedną rolę, a rola składa się

01:32.720 --> 01:35.185
tylko z dwóch elementów.

01:35.185 --> 01:37.400
Oczywiście mogliśmy użyć tutaj optyki, ale

01:37.400 --> 01:39.090
z jakiegoś powodu chcemy mieć tablicę

01:39.090 --> 01:41.744
z dokładnie dwoma elementami, gdzie pierwszy element

01:41.744 --> 01:43.118
zawsze jest identyfikatorem

01:43.118 --> 01:47.570
numerycznym, a drugi element zawsze jest identyfikatorem łańcuchowym lub opisem,

01:47.570 --> 01:50.220
czy jakkolwiek chcesz to nazwać.

01:50.220 --> 01:52.420
Teraz, jeśli najedziemy na to TypeScript faktycznie

01:52.420 --> 01:55.730
wywnioskuje ten dziwny typ, którego nie widzieliśmy wcześniej, W

01:55.730 --> 01:58.550
rzeczywistości, jeśli wyłączymy środki TypeScript rozumie,

01:58.550 --> 02:01.250
że mamy tablicę, która może przechowywać nawet ciągi lub

02:01.250 --> 02:03.440
liczby, to typ unii i będziemy nurkować w tych

02:03.440 --> 02:06.710
później. Kluczową rzeczą jest to,

02:06.710 --> 02:09.950
że TypeScript rozumie, że powinna to być tablica

02:09.950 --> 02:11.668
z tymi typami wartości.

02:11.668 --> 02:14.580
Puchy, które są martwe Moglibyśmy uruchomić

02:14.580 --> 02:18.780
ten kod chociaż, osoba rola, push, admin.

02:18.780 --> 02:20.250
Teraz dla naszej aplikacji może

02:20.250 --> 02:21.970
to nie mieć sensu, ponieważ wiemy, że

02:21.970 --> 02:23.960
potrzebujemy tylko dwóch elementów.

02:23.960 --> 02:25.790
Nadal TypeScript nie wie, że chcemy

02:25.790 --> 02:28.963
tylko dwa elementy. Moglibyśmy również przełączyć

02:28.963 --> 02:33.283
rolę osoby, drugi element z indeksem pierwszym, aby był również

02:33.283 --> 02:35.200
liczbą.

02:35.200 --> 02:38.010
To zadziałałoby, ponieważ TypeScript wie tylko,

02:38.010 --> 02:42.360
że rola powinna być typu string lub number array, a zatem przypisanie liczby

02:42.360 --> 02:44.700
tutaj do drugiego elementu i dlatego zastąpienie

02:44.700 --> 02:48.680
go liczbą byłoby dozwolone, ponieważ właśnie mówimy coś o typach,

02:48.680 --> 02:52.580
których ogólnie możemy tam użyć.

02:52.580 --> 02:55.040
Wiemy, że chcemy mieć dokładnie taką strukturę.

02:55.040 --> 02:58.094
Dwa elementy, pierwszy element liczba, drugi element ciąg,

02:58.094 --> 03:01.770
ale TypeScript nie robi tego. Cóż dla takiego scenariusza,

03:01.770 --> 03:05.865
tuple byłby idealny. Możemy powiedzieć TypeScriptowi

03:05.865 --> 03:10.865
jaka powinna być rola, poprzez jawne ustawienie typu roli.

03:11.010 --> 03:13.230
Więc tutaj również mamy przykład,

03:13.230 --> 03:16.600
w którym TypeScript nie fototypuje, ale wyraźnie

03:16.600 --> 03:19.927
chcemy go nadpisać. Teraz tutaj możemy zatem dodać

03:19.927 --> 03:23.041
jawny typ obiektu poprzez dodanie dwukropka po osobie,

03:23.041 --> 03:27.023
następnie nawiasów klamrowych, a następnie nazwiska powinny być ciągiem,

03:27.023 --> 03:31.180
wiek powinien być liczbą, a hobby powinno być tablicą łańcuchów.

03:31.180 --> 03:33.740
Czyli wszystko zgodnie z wnioskowaniem przez TypeScript.

03:33.740 --> 03:35.401
Więc dla tego nie wymagalibyśmy,

03:35.401 --> 03:36.827
tego wyraźnego przydziału

03:36.827 --> 03:38.789
i jak się uczysz to byłoby źle.

03:38.789 --> 03:40.470
Ale teraz mamy scenariusz,

03:40.470 --> 03:43.565
w którym wnioskowanie nie działa w sposób,

03:43.565 --> 03:47.510
w jaki chcemy, i, chcemy ustawić rolę jako tuple.

03:47.510 --> 03:49.730
Teraz zamiast ustawiać tablicę dwóch ciągów lub

03:49.730 --> 03:51.660
tablicę liczb lub używać tego samego typu,

03:51.660 --> 03:55.180
który nie był trzeci tutaj wcześniej, możemy teraz użyć specjalnego typu.

03:55.180 --> 03:56.810
Ponownie używamy nawiasów kwadratowych,

03:56.810 --> 04:01.710
ale teraz wewnątrz poza nawiasami kwadratowymi dodajemy liczbę, a następnie przecinek, a następnie

04:01.710 --> 04:03.637
ciąg znaków.

04:03.637 --> 04:07.340
Teraz to oznacza typ tuple tutaj.

04:07.340 --> 04:10.729
Tuple jest specjalną konstrukcją, TypeScript rozumie,

04:10.729 --> 04:13.310
w Java scripted będzie normalną tablicą, ale

04:13.310 --> 04:15.750
podczas rozwoju z TypeScript, dostaniemy

04:15.750 --> 04:18.190
błędy z kodem takim jak ten tutaj.

04:18.190 --> 04:20.313
Co robią teraz krotki?

04:21.620 --> 04:23.564
To tutaj, mówi TypeScript, chcę

04:23.564 --> 04:27.195
mieć specjalną tablicę, z dokładnie dwoma elementami, ponieważ

04:27.195 --> 04:30.160
mam tam dokładnie dwa typy, a pierwszy element powinien

04:30.160 --> 04:32.020
być liczbą.

04:32.020 --> 04:35.436
Drugi element powinien być ciągiem, stąd jeśli

04:35.436 --> 04:39.033
skompilujemy ten kod tutaj, otrzymam błąd dotyczący

04:40.663 --> 04:45.000
10 nie jest przypisywalny jako typ tutaj, ponieważ chcemy

04:45.000 --> 04:48.346
mieć ciąg jako drugą wartość i jeśli następnie

04:48.346 --> 04:50.822
przypiszę 10 jako drugą wartość

04:50.822 --> 04:52.660
tutaj, to oczywiście nie

04:52.660 --> 04:56.544
przestrzegam tej zasady.

04:56.544 --> 05:01.544
Jeśli skomentujesz to i skompilujemy, to działa.

05:02.240 --> 05:06.290
To jest trochę dziwne, ponieważ dlaczego pchanie działa tutaj,

05:06.290 --> 05:08.610
ponieważ wszyscy mówimy, że rola powinna

05:08.610 --> 05:11.901
mieć dokładnie dwa elementy, więc dlaczego możemy

05:11.901 --> 05:14.980
wypchnąć admina na tablicę roli tutaj.

05:14.980 --> 05:19.300
Push faktycznie jest wyjątkiem, który jest dozwolony w tuples.

05:19.300 --> 05:22.410
Więc niestety TypeScript nie jest w stanie wyłapać

05:22.410 --> 05:24.840
tego błędu, ale przynajmniej zapewnia,

05:24.840 --> 05:28.570
że nie przypisujemy tutaj złej wartości, a poza push dostajemy

05:28.570 --> 05:31.500
również pewne wsparcie dotyczące długości.

05:31.500 --> 05:33.671
Jeśli ustawimy osobę, która pełni tę rolę na nową wartość.

05:33.671 --> 05:36.420
Na przykład, pusta tablica nie jest dozwolona, jedna

05:36.420 --> 05:39.710
z dokładnie taką strukturą, jaką zdefiniowaliśmy tam na górze,

05:39.710 --> 05:43.510
jest dozwolona, Jeśli dodałem dodatkowy element tutaj.

05:43.510 --> 05:45.880
Wtedy znów otrzymalibyśmy błąd.

05:45.880 --> 05:49.300
Czyli długość jest egzekwowana, jeśli tak przypiszemy, ale

05:49.300 --> 05:50.720
nie dla pchania itd.

05:50.720 --> 05:52.840
Jest to coś, czego musisz być świadomy,

05:52.840 --> 05:55.580
ale wciąż otrzymując to wsparcie i to wsparcie,

05:55.580 --> 05:57.899
jest całkiem miłe i jeśli masz scenariusz,

05:57.899 --> 06:02.240
w którym potrzebujesz dokładnie X ilości wartości w tablicy i znasz typ każdej

06:02.240 --> 06:05.130
wartości z góry, to możesz chcieć rozważyć tuple zamiast

06:05.130 --> 06:07.900
tablicy, aby uzyskać jeszcze większą surowość

06:07.900 --> 06:11.313
w swojej aplikacji, aby być jeszcze bardziej przejrzystym

06:11.313 --> 06:15.230
w odniesieniu do typu danych, z którymi pracujesz i typu danych, których

06:15.230 --> 06:17.543
oczekujesz.
