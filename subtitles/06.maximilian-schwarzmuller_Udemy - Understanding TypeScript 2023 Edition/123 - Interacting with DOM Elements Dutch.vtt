WEBVTT

00:02.400 --> 00:04.390
Instructeur: Dus we hebben ons eerste formulier

00:04.390 --> 00:07.240
gerenderd, maar wat je zult merken is dat de styling een beetje

00:07.240 --> 00:09.200
weg is, ik bedoel het formulier ziet er goed

00:09.200 --> 00:11.910
uit, maar wat afstand tussen de randen van ons scherm en het

00:11.910 --> 00:13.870
formulier zou mooi zijn.

00:13.870 --> 00:15.830
Als je in de app duikt. css bestand

00:15.830 --> 00:18.360
zul je zien dat we daar een user

00:18.360 --> 00:21.050
input ID selector hebben.

00:21.050 --> 00:23.330
Als we wat marges toevoegen, klinkt dat

00:23.330 --> 00:25.630
niet zo slecht, dus eigenlijk kunnen

00:25.630 --> 00:28.060
we een app doen. als we ons element

00:28.060 --> 00:31.740
hier creÃ«ren of als we er toegang toe krijgen.

00:31.740 --> 00:34.520
We kunnen het element bereiken en hier een ID toevoegen

00:34.520 --> 00:36.840
die door de gebruiker wordt ingevoerd.

00:36.840 --> 00:39.740
Dit zorgt ervoor dat het gerenderde element deze ID heeft,

00:39.740 --> 00:42.800
dus als dit herlaadt ziet dit er veel mooier uit.

00:42.800 --> 00:45.100
Als we dit inspecteren in de diepte van de

00:45.100 --> 00:49.320
browser zien we hier de ID en dat is de reden voor deze betere styling.

00:49.320 --> 00:51.940
Daarmee zijn we al bezig met de volgende stap,

00:51.940 --> 00:54.010
de interactie met het element.

00:54.010 --> 00:56.980
Dit is niet de enige interactie die ik wil doen.

00:56.980 --> 00:58.770
Omdat we hier een formulier hebben,

00:58.770 --> 01:01.870
wil ik toegang krijgen tot de verschillende formulieringangen

01:01.870 --> 01:05.910
die we hier hebben, zodat we de waarden kunnen lezen wanneer het formulier wordt

01:05.910 --> 01:08.800
verzonden, en dat we dan ook een event listener opzetten

01:08.800 --> 01:12.160
voor de verzending, en de gebruikersinvoer valideren.

01:12.160 --> 01:15.720
We hebben dus toegang nodig tot de knop of tot het formulier als geheel

01:15.720 --> 01:19.180
om te luisteren naar de indiening en tot alle invoerelementen om daar

01:19.180 --> 01:21.273
de laatste waarden vandaan te halen.

01:22.360 --> 01:25.440
Voor dat hier, voordat we alles vastmaken, maar

01:25.440 --> 01:28.500
nadat ik mijn ID aan het element hier heb toegekend,

01:28.500 --> 01:32.210
wil ik toegang krijgen tot de verschillende ingangen in

01:32.210 --> 01:35.980
dat element in dat formulier, en ik wil ze opslaan als eigenschappen

01:35.980 --> 01:39.820
van deze klasse, dus ik voeg meer velden toe en het eerste veld

01:39.820 --> 01:44.570
zou een titleInputElement veld kunnen zijn.

01:44.570 --> 01:47.167
Het type zal zijn HTMLInputElement schrijf dit, en we

01:48.060 --> 01:50.410
zullen het niet alleen nodig hebben zodra we twee

01:50.410 --> 01:52.770
andere soortgelijke velden nodig hebben.

01:52.770 --> 01:55.900
We hebben een descriptionInputElement veld dat

01:55.900 --> 01:57.550
een type HTMLInputElement

01:58.520 --> 02:02.730
is, en we hebben ook een peopleInputElement veld nodig.

02:02.730 --> 02:06.240
Nu kunnen we deze velden hier in de constructor invullen,

02:06.240 --> 02:09.500
met dit titleInputElement dat gelijk is gesteld

02:09.500 --> 02:11.510
aan dit. element, dus naar

02:11.510 --> 02:13.120
ons formulier element,

02:13.120 --> 02:16.390
altijd in gedachten houden dat is het formulier

02:16.390 --> 02:21.350
element hier, query selector en dan query voor het titel element.

02:21.350 --> 02:25.000
En als je nog eens naar de index kijkt. html zien we dat we de ID-titel

02:25.000 --> 02:28.410
van dit element hebben, zodat we daarnaar kunnen

02:28.410 --> 02:33.323
zoeken, dus in app.

02:33.323 --> 02:33.323
ts

02:33.323 --> 02:37.210
hier in de query selector kunnen we #title gebruiken om het title ID element te selecteren

02:37.210 --> 02:39.750
en dat op te slaan in titleInputElement.

02:39.750 --> 02:44.070
Nu weet je net als bij document get element by ID dat typescript

02:44.070 --> 02:46.230
niet kan begrijpen dat de query

02:46.230 --> 02:50.650
selector hier een input element gaat teruggeven.

02:50.650 --> 02:53.780
Dus om typescript te vertellen, zal ik opnieuw casting gebruiken,

02:53.780 --> 02:56.020
en dit casten naar een input element, en dan

02:56.020 --> 02:58.270
kunnen we deze stap twee keer herhalen, en

02:58.270 --> 03:00.672
ook het descriptionInputElement, en het peopleInputElement

03:00.672 --> 03:03.240
tekenen.

03:03.240 --> 03:06.600
Zoek de juiste ID's op in de index. html bestand, die verrassend

03:06.600 --> 03:10.390
genoeg, denk ik, beschrijving en mensen zijn, en voeg ze

03:10.390 --> 03:12.190
toe aan typescript.

03:12.190 --> 03:16.120
Dus hier zoeken we naar het description ID element,

03:16.120 --> 03:17.720
en hier naar mensen.

03:17.720 --> 03:19.510
En daarmee hebben we toegang

03:19.510 --> 03:22.687
tot al deze elementen binnen onze klasse hier, of

03:22.687 --> 03:26.593
binnen elk object dat wordt gemaakt op basis van de klasse.

03:27.600 --> 03:29.870
Nu hoeven we alleen nog maar een luisteraar

03:29.870 --> 03:33.330
toe te voegen aan ons element, aan ons formulier.

03:33.330 --> 03:38.330
Daarvoor voeg ik nog een private methode configure toe, die je niet hoeft

03:38.440 --> 03:39.790
toe te voegen, maar ik

03:39.790 --> 03:43.130
wil opnieuw die scheiding houden waarbij we in principe

03:43.130 --> 03:47.900
de selectie en de ruwe opstelling doen in de constructor.

03:47.900 --> 03:49.340
En dan de invoeging of de

03:49.340 --> 03:52.210
verfijning in afzonderlijke methoden.

03:52.210 --> 03:53.900
En in de configureer methode is

03:53.900 --> 03:57.000
mijn idee om een event listener op te zetten, dus hier kunnen

03:57.000 --> 03:58.970
we dit element, dat het formulier is,

03:58.970 --> 04:01.830
bereiken en een event listener toevoegen.

04:01.830 --> 04:04.570
Omdat typescript weet dat dit element een HTML

04:04.570 --> 04:08.580
formulier element is, biedt het ons autocompletion als we willen

04:08.580 --> 04:10.770
luisteren naar de submit event, wat

04:10.770 --> 04:12.250
geweldig is.

04:12.250 --> 04:15.520
Nu moeten we dit alleen nog binden aan een methode en daarvoor

04:15.520 --> 04:17.840
voeg ik nog een private methode toe, private

04:17.840 --> 04:20.650
omdat ik dit nooit van buiten de klasse ga benaderen,

04:20.650 --> 04:23.460
alleen van binnenuit.

04:23.460 --> 04:26.970
Die ik submitHandler zal noemen, de naam is geheel aan jou.

04:26.970 --> 04:29.740
Dit moet een methode zijn die een event object ontvangt,

04:29.740 --> 04:32.750
'tho omdat we het zullen binden aan deze event listener.

04:32.750 --> 04:34.880
Dus hier kunnen we naar wijzen...

04:36.460 --> 04:38.713
submit handler.

04:40.180 --> 04:42.080
Nu passen we het aan om ervoor te zorgen

04:42.992 --> 04:45.040
dat voordat we alle aanroepen configureren

04:45.040 --> 04:46.730
en deze private methode uitvoeren,

04:46.730 --> 04:49.330
opnieuw is het private dus van binnen de klasse

04:49.330 --> 04:50.500
kunnen we er natuurlijk

04:50.500 --> 04:53.660
bij, van buitenaf zou je een typescript fout krijgen, dus

04:53.660 --> 04:56.000
nu zou deze methode moeten triggeren wanneer

04:56.000 --> 04:59.290
het formulier wordt ingediend.

04:59.290 --> 05:02.010
In de submit handler wil ik hier toegang

05:02.010 --> 05:05.520
krijgen tot mijn verschillende inputwaarden,

05:05.520 --> 05:07.710
en ze valideren, en dan natuurlijk

05:07.710 --> 05:10.310
iets doen met de inputs.

05:10.310 --> 05:12.700
Nu zullen we ons later zorgen maken over het doe-gedeelte,

05:12.700 --> 05:15.480
voor nu laten we ons gewoon toegang tot hen verschaffen.

05:15.480 --> 05:18.430
Hiervoor zal ik eerst event noemen. preventDefault om te voorkomen

05:18.430 --> 05:20.620
dat het formulier standaard wordt

05:20.620 --> 05:23.890
ingediend, wat een HTTP-verzoek zou veroorzaken

05:23.890 --> 05:25.820
dat ik hier niet wil, en dan gewoon

05:25.820 --> 05:28.270
om te zien waar dit werkt, laten we de console

05:28.270 --> 05:32.730
afdrukken. log deze titel Element waarde, om af te

05:32.730 --> 05:36.250
drukken wat er momenteel in het titel invoer element staat.

05:36.250 --> 05:39.010
Als we het opslaan zie je dat het compileert zonder fouten,

05:39.010 --> 05:40.560
dus dat ziet er goed uit.

05:40.560 --> 05:44.670
En als we nu naar de console gaan en "Hallo! en klik op project toevoegen, goed is dat het niet is ingediend,

05:44.670 --> 05:49.440
slecht is dat we een fout krijgen, "Kan eigenschap 'waarde' van ongedefinieerd

05:49.440 --> 05:51.657
niet lezen. Wat gaat hier nu mis?

05:51.657 --> 05:54.620
Het probleem hier is dat, dit hier, dat dit sleutelwoord in submitHandler

05:54.620 --> 05:56.173
niet wijst naar de klasse eigenlijk.

05:57.730 --> 06:02.230
Waarom?

06:02.230 --> 06:06.420
Nou, door de manier waarop JavaScript en typescript werken, binden

06:06.420 --> 06:07.760
we de methode hier aan

06:07.760 --> 06:11.770
de event listener en wanneer we iets binden aan een event of met

06:11.770 --> 06:14.680
behulp van een event listener dan is dat iets

06:14.680 --> 06:17.480
waardoor die methode, die uitgevoerd gaat

06:17.480 --> 06:19.740
worden, gebonden zal zijn aan iets

06:19.740 --> 06:22.410
anders, in dit geval aan het huidige doel

06:22.410 --> 06:24.210
van de event.

06:24.210 --> 06:27.270
Dus dit einde van deze methode zal niet naar

06:27.270 --> 06:31.060
de klasse wijzen, wanneer de methode wordt getriggerd

06:31.060 --> 06:35.130
op een gebeurtenis met een event listener.

06:35.130 --> 06:38.150
De oplossing is nu om bind aan te roepen op submitHandler

06:38.150 --> 06:40.360
om vooraf te configureren hoe deze

06:40.360 --> 06:43.980
functie zal worden uitgevoerd wanneer deze in de toekomst

06:43.980 --> 06:46.949
wordt uitgevoerd, en het eerste argument dat

06:46.949 --> 06:52.880
we kunnen doorgeven aan bind is dan eigenlijk waar het sleutelwoord dit naar zal verwijzen

06:52.880 --> 06:56.450
in de uit te voeren functie.

06:56.450 --> 06:59.760
En hier geef ik dit door, wat betekent dat dit

06:59.760 --> 07:02.920
binnen de submitHandler naar hetzelfde

07:02.920 --> 07:05.750
verwijst als dit in deze context.

07:05.750 --> 07:10.030
En omdat we het aanroepen in de context van configure hier, die we

07:10.030 --> 07:13.660
aanroepen met deze configure, zal dit einde van configure

07:13.660 --> 07:17.500
verwijzen naar de klasse, en dankzij binden, zal het daar

07:17.500 --> 07:19.880
voor iedereen, ook verwijzen naar de

07:19.880 --> 07:22.870
klasse eindigt van de submitHandler.

07:22.870 --> 07:24.830
Dus als je dit nu hier

07:24.830 --> 07:28.890
opslaat, en we herladen, en "Hallo!"

07:28.890 --> 07:33.673
invoeren. "Hier zie je nu "Hallo!

07:33.673 --> 07:33.673
"

07:33.673 --> 07:35.600
wordt hier afgedrukt als we het formulier verzenden.

07:35.600 --> 07:37.510
Dus dit is nu opgelost

07:37.510 --> 07:38.770
en nu pakken we dit goed aan.

07:38.770 --> 07:40.210
Maar misschien is er een betere

07:40.210 --> 07:43.650
manier, of een alternatieve manier die we allemaal kennen.

07:43.650 --> 07:46.330
Misschien een met behulp van decoratoren,

07:46.330 --> 07:49.430
dus hier is je kans om dit opnieuw te pauzeren en te

07:49.430 --> 07:51.970
proberen deze binding op te lossen met decoratoren,

07:51.970 --> 07:54.300
want dat is iets waar we over geleerd

07:54.300 --> 07:57.900
hebben in het onderdeel decoratoren.
