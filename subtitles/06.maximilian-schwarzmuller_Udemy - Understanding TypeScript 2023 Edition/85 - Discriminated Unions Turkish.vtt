WEBVTT

00:02.210 --> 00:04.920
Anlatıcı: Şimdi, özel bir tür tip koruması ya da

00:04.920 --> 00:05.753
tip korumalarında

00:05.753 --> 00:07.940
size yardımcı olan bir şey diyebilirsiniz,

00:07.940 --> 00:10.000
ayrımlı birliktir.

00:10.000 --> 00:11.300
Bu ne şimdi?

00:11.300 --> 00:13.310
Bu, birlik türleriyle çalışırken

00:13.310 --> 00:15.030
kullanabileceğiniz ve tür korumalarının

00:15.030 --> 00:18.900
uygulanmasını kolaylaştıran bir kalıptır.

00:18.900 --> 00:22.000
Nesne türleri ile çalıştığınızda kullanılabilir.

00:22.000 --> 00:24.580
Size nasıl çalıştığını göstereyim.

00:24.580 --> 00:26.850
Diyelim ki birkaç arayüzümüz var ve bu sınıflar

00:26.850 --> 00:28.450
da olabilir, ancak bunlarla da

00:28.450 --> 00:29.950
çalıştığını göstermek için

00:29.950 --> 00:32.193
burada arayüzleri tercih edeceğim.

00:33.170 --> 00:34.803
Ve orada, diyelim ki sayı

00:36.480 --> 00:38.830
türünde olması gereken bir uçuş

00:38.830 --> 00:40.973
hızına sahip kuşum var.

00:42.660 --> 00:45.890
Ayrıca, zemin hızı veya koşu hızı

00:45.890 --> 00:50.310
olan ve tip numarası olması gereken bir

00:50.310 --> 00:51.913
atım var.

00:53.130 --> 00:55.430
Yani burada iki arayüzümüz var.

00:55.430 --> 00:59.633
Şimdi kendi birlik türümüz olan hayvanı yaratıyoruz,

01:00.750 --> 01:03.370
ki bu ya bir kuş ya da bir attır.

01:03.370 --> 01:05.743
Ve daha önce olduğu gibi, girdi

01:06.740 --> 01:08.480
olarak hayvan türünde

01:09.800 --> 01:13.040
bir hayvan alan move animal adlı bir fonksiyonumuz

01:13.040 --> 01:14.800
olabilir.

01:14.800 --> 01:19.800
Ve şimdi orada, hızla hareket etmek demek istiyorum ve şimdi

01:19.990 --> 01:21.050
tabii ki, ya uçma

01:21.050 --> 01:25.180
hızına ya da koşma hızına erişmem gerekiyor.

01:25.180 --> 01:27.730
Elbette buna sadece hız da diyebilirdik.

01:27.730 --> 01:30.840
Ancak bu, genel olarak birbiriyle ilişkili ancak farklı

01:30.840 --> 01:33.900
özelliklere veya yöntemlere sahip bazı arayüzlere veya

01:33.900 --> 01:37.390
nesnelere sahip olduğunuzda karşılaşabileceğiniz gerçek bir

01:37.390 --> 01:40.500
kullanım durumunun basitleştirilmiş bir örneğidir.

01:40.500 --> 01:42.050
Yani burada, aslında farklı

01:42.050 --> 01:43.900
olan hız özelliğidir.

01:43.900 --> 01:46.780
Yani burada uçma hızına erişemez çünkü elbette

01:46.780 --> 01:49.240
tüm hayvanların uçma hızı yoktur.

01:49.240 --> 01:51.210
Şimdi daha önce öğrendiklerimizi yapabiliriz.

01:51.210 --> 01:56.063
Uçuş hızının hayvanda olup olmadığını buradan kontrol edebiliriz.

01:58.240 --> 02:01.063
Ve eğer durum buysa, bu kodu çalıştırabiliriz.

02:01.960 --> 02:04.470
Bu da benimseyebileceğimiz bir yaklaşım, ancak

02:04.470 --> 02:07.430
oraya ne kadar çok potansiyel hayvan götürürsek o kadar çok

02:07.430 --> 02:09.233
şeyi kontrol etmemiz gerekir.

02:10.880 --> 02:14.100
Bu dizede de yanlış yazabiliriz.

02:14.100 --> 02:15.810
Örneğin bir E harfini unutabilir ve

02:15.810 --> 02:18.460
bunun neden işe yaramayacağını merak edebiliriz.

02:18.460 --> 02:20.410
Şimdi, burada instance of kullanamayız

02:20.410 --> 02:22.570
çünkü arayüzlerden ayrılıyorum.

02:22.570 --> 02:27.490
Açıkladığım gibi, kuşun hayvan örneği çalışmayacaktır çünkü

02:27.490 --> 02:29.680
veri JavaScript'te derlenmeyen

02:29.680 --> 02:31.840
bir arayüzdür.

02:31.840 --> 02:33.970
Dolayısıyla, çalışma zamanında bu bir kurucu

02:33.970 --> 02:36.210
işlev olarak kullanılamayacaktır.

02:36.210 --> 02:37.690
Dolayısıyla, bu işe yaramıyor.

02:37.690 --> 02:40.380
Şimdi burada her arayüzü vererek ayrımcı

02:40.380 --> 02:42.460
bir birlik oluşturabiliriz.

02:42.460 --> 02:45.380
Yani Birliğin bir parçası olması gereken her

02:45.380 --> 02:47.130
nesne ve ekstra mülk.

02:47.130 --> 02:48.640
İstediğiniz herhangi bir ismi kullanabilirsiniz.

02:48.640 --> 02:51.490
Genellikle burada kind veya type kullanırsınız.

02:51.490 --> 02:55.090
Bu kuşa bir isim vereceğim.

02:55.090 --> 02:57.480
Şimdi önemli olan, burada bir arayüz ticareti yapıyoruz.

02:57.480 --> 03:02.480
Yani bu aslında type özelliği için bir değer değildir.

03:02.650 --> 03:05.410
Bunun yerine, öğrendiğiniz gibi bu bir değişmez

03:05.410 --> 03:09.110
türdür; burada tür, kuş olması gereken bir dize tutmalıdır.

03:09.110 --> 03:10.880
Yani bu, türde saklanabilecek

03:10.880 --> 03:15.000
değeri tam olarak bu dize değeriyle daralttığımız

03:15.000 --> 03:17.590
bir tür atamasıdır.

03:17.590 --> 03:19.810
Ve sonra aynısını at için yapın, sadece

03:19.810 --> 03:22.283
atı gerçek bir tür olarak kullanın.

03:23.400 --> 03:25.060
Şimdi burada, fonksiyonumuzda

03:25.060 --> 03:27.550
bir switch deyimi kullanabilir

03:27.550 --> 03:32.280
ve hayvan nokta tipine geçebiliriz.

03:32.280 --> 03:34.080
Her hayvanın bir tip özelliği

03:34.080 --> 03:36.330
vardır çünkü bunu hayvanımızı oluşturan

03:36.330 --> 03:38.350
tüm arayüzlere ekledik.

03:38.350 --> 03:40.730
Ve burada, TypeScript ve IDE'miz türün

03:40.730 --> 03:42.330
yalnızca kuş veya at olabileceğini

03:42.330 --> 03:44.990
anladığı için otomatik tamamlama bile alabileceğimiz

03:44.990 --> 03:49.040
birkaç durumumuz olabilir.

03:49.040 --> 03:51.050
Ve eğer kuş ise, o zaman bazı

03:51.050 --> 03:55.003
dahili değişken hızları diyelim ki hayvan nokta

03:55.900 --> 03:58.860
uçuş hızına ayarlayabiliriz ve daha

03:59.880 --> 04:02.250
sonra kırabiliriz.

04:02.250 --> 04:05.183
Aksi takdirde, durum at ise, hızı

04:06.830 --> 04:11.753
hayvanın nokta koşu hızına eşit olarak ayarlarız.

04:14.150 --> 04:17.490
Ve bundan sonra hız artı hızda hareket

04:17.490 --> 04:20.843
ederek konsol günlüğü tutabiliriz.

04:22.490 --> 04:26.540
Şimdi burada anında oluşturduğum, türünü kuş olarak ayarladığım

04:26.540 --> 04:30.300
ve yalnızca kuş veya at kullanımına izin verdiğim bir hayvanla

04:30.300 --> 04:32.810
hayvanı taşı öğesini çağırırsam, uçma

04:32.810 --> 04:34.930
hızımı ayarlamam gerekir ve bu arada,

04:36.140 --> 04:39.210
TypeScript bunu yapmaya çalışmak için burada

04:39.210 --> 04:42.050
bir kavramın çalışma hızını bile tanır ve bunu

04:42.050 --> 04:44.220
10'a ayarlarsa, bunun kuş türü için

04:44.220 --> 04:48.980
mevcut olmadığından şikayet eder.

04:48.980 --> 04:51.360
Uçuş hızına ayarlarsam, nasıl çalışırsa

04:51.360 --> 04:55.120
çalışsın, bunu kaydedersek, bunu doğru şekilde çıkarır

04:55.120 --> 04:57.700
ve ayrıca hatasız derler.

04:57.700 --> 04:59.530
Şimdi bu bir ayrımlı birliktir

04:59.530 --> 05:04.060
çünkü birliğimizi oluşturan her nesnede o nesneyi tanımlayan ortak

05:04.060 --> 05:08.040
bir özelliğimiz vardır, böylece %100 tip güvenliğine sahip

05:08.040 --> 05:11.490
olmak ve böyle bir nesne için hangi özelliklerin mevcut

05:11.490 --> 05:16.490
olduğunu ve hangi özelliklerin olmadığını anlamak için kontrolümüzde

05:16.770 --> 05:21.930
bu nesneyi tanımlayan bu özelliği kullanabiliriz.

05:21.930 --> 05:24.500
Dolayısıyla bu, nesnelerle ve birlik türleriyle

05:24.500 --> 05:28.060
çalışırken kullanabileceğiniz yeni ve kullanışlı bir kalıptır.

05:28.060 --> 05:30.340
Ve hatta arayüzlerle bile çalışır

05:30.340 --> 05:33.630
çünkü bu arayüz, bu arayüze dayalı olarak oluşturduğunuz

05:33.630 --> 05:37.050
her nesneyi bu türe sahip olmaya zorlar.

05:37.050 --> 05:39.400
Bu nedenle, belirli bir özelliğin varlığını

05:39.400 --> 05:41.200
kontrol etmek yerine veya instance

05:41.200 --> 05:43.660
of kullanmak yerine, hangi tür nesnelerle çalıştığımızı

05:43.660 --> 05:46.310
kontrol etmek için var olduğunu bildiğimiz bir

05:46.310 --> 05:49.020
özelliği kullanırız.

05:49.020 --> 05:51.930
Ayrıca yanlış yazma tehlikesini de ortadan kaldırıyoruz

05:51.930 --> 05:54.730
çünkü TypeScript burada hayvan türü için sahip olabileceğimiz

05:54.730 --> 05:58.480
tek durumun kuş ve at olduğunu anlıyor ve bu nedenle bize bu tamamlama

05:58.480 --> 06:00.810
sanatını veriyor ve eğer bir yazım hatası

06:00.810 --> 06:04.690
yaparsanız, hemen bir hata alırız.

06:04.690 --> 06:06.780
Dolayısıyla bu, nesneler ve birlik türleriyle

06:06.780 --> 06:09.333
çalışırken çok kullanışlı bir modeldir.
