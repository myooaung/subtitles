WEBVTT

00:02.460 --> 00:05.590
-: Jadi array didukung dan dengan angka, string,

00:05.590 --> 00:07.620
booleon, objek dan array.

00:07.620 --> 00:11.400
Kami mendapat nilai inti atau tipe nilai, JavaScript tidak didukung

00:11.400 --> 00:15.100
dalam TypeScript, seperti yang akan Anda pelajari pada contoh objek

00:15.100 --> 00:17.884
dalam array mereka, TypeScript bahkan menawarkan

00:17.884 --> 00:21.520
lebih banyak fungsional di sana tetapi itu sedikit lebih maju, itulah

00:21.520 --> 00:22.720
sebabnya kita akan melihatnya

00:22.720 --> 00:24.940
nanti, tetapi bahkan tipe inti ini dengan

00:24.940 --> 00:26.810
apa yang akan Anda pelajari di kuliah

00:26.810 --> 00:30.140
sebelumnya didukung.

00:30.140 --> 00:33.540
Sekarang TypeScript memegang beberapa konsep

00:33.540 --> 00:37.840
baru, tipe baru, yang tidak kita ketahui dari vanilla Java

00:37.840 --> 00:40.300
script misalnya, tipe tuple.

00:40.300 --> 00:44.360
Sekarang Anda mungkin tahu tuple dari bahasa pemrograman lain,

00:44.360 --> 00:46.570
JavaScript tidak memilikinya.

00:46.570 --> 00:49.570
Ini adalah tuple misalnya, dan Anda akan mengatakan,

00:49.570 --> 00:52.290
nah ini adalah array. Ini adalah larik, tetapi

00:52.290 --> 00:54.520
ini adalah larik dengan panjang tetap

00:54.520 --> 00:58.650
dan sebenarnya bukan hanya panjang tetap tetapi juga tipe tetap.

00:58.650 --> 01:00.730
Dan di mana ini bisa berguna?

01:00.730 --> 01:03.350
Katakanlah di sini pada, person, kita

01:03.350 --> 01:07.830
sebenarnya memiliki sejumlah properti, role, yang merupakan

01:07.830 --> 01:11.160
array dengan tepat dua elemen, di mana yang pertama

01:11.160 --> 01:14.184
adalah katakanlah pengenal numerik seperti

01:14.184 --> 01:18.547
dua dan yang kedua adalah pengenal string dan deskripsi yang

01:18.547 --> 01:22.765
dapat dibaca manusia seperti penulis.

01:22.765 --> 01:26.496
Sekarang ini harus selalu memiliki tepat dua elemen karena pengguna

01:26.496 --> 01:30.100
atau orang dalam aplikasi yang kita tulis ini, katakanlah

01:30.100 --> 01:32.720
hanya dapat memiliki satu peran dan peran hanya

01:32.720 --> 01:35.185
terdiri dari dua elemen.

01:35.185 --> 01:37.400
Tentu saja kita bisa menggunakan optic di sini,

01:37.400 --> 01:39.090
tetapi untuk beberapa alasan kita

01:39.090 --> 01:41.744
ingin memiliki array dengan tepat dua elemen di mana

01:41.744 --> 01:43.118
elemen pertama selalu merupakan

01:43.118 --> 01:47.570
pengenal numerik dan elemen kedua selalu merupakan pengenal string atau deskripsi atau

01:47.570 --> 01:50.220
bagaimanapun Anda ingin menyebutnya.

01:50.220 --> 01:52.420
Sekarang, jika kita mengarahkan kursor ke atas TypeScript

01:52.420 --> 01:55.730
ini sebenarnya menginfersikan tipe aneh ini yang belum pernah kita lihat sebelumnya,

01:55.730 --> 01:58.550
Faktanya, jika kita dis berarti TypeScript memahami bahwa kita memiliki

01:58.550 --> 02:01.250
array yang mungkin menyimpan bahkan string atau angka, ini adalah

02:01.250 --> 02:06.710
tipe union dan kita akan menyelaminya nanti.

02:06.710 --> 02:06.710
Kunci

02:06.710 --> 02:09.950
utamanya adalah TypeScript memahami bahwa ini harus berupa array dengan

02:09.950 --> 02:11.668
jenis-jenis nilai ini.

02:11.668 --> 02:14.580
Downs yang mati Kita bisa menjalankan

02:14.580 --> 02:18.780
kode ini, peran orang, push, admin.

02:18.780 --> 02:20.250
Sekarang untuk aplikasi kita, hal

02:20.250 --> 02:21.970
ini mungkin tidak masuk akal karena kita

02:21.970 --> 02:23.960
tahu bahwa kita hanya membutuhkan dua elemen.

02:23.960 --> 02:25.790
Tetap saja TypeScript tidak tahu bahwa kita

02:25.790 --> 02:28.963
hanya menginginkan dua elemen. Kita juga bisa mengganti

02:28.963 --> 02:33.283
peran orang, elemen kedua dengan indeks satu menjadi

02:33.283 --> 02:35.200
angka juga.

02:35.200 --> 02:38.010
Ini akan bekerja karena TypeScript hanya tahu bahwa

02:38.010 --> 02:42.360
role harus bertipe string atau array angka, dan oleh karena itu menetapkan angka

02:42.360 --> 02:44.700
di sini ke elemen kedua dan oleh karena itu menggantinya

02:44.700 --> 02:46.870
dengan angka akan diizinkan karena kita

02:46.870 --> 02:48.680
hanya mengatakan sesuatu tentang

02:48.680 --> 02:52.580
tipe yang umumnya dapat kita gunakan di sana.

02:52.580 --> 02:55.040
Kami tahu, kami ingin memiliki struktur yang persis seperti itu.

02:55.040 --> 02:58.094
Dua elemen, elemen pertama angka, elemen kedua string, tetapi

02:58.094 --> 03:01.770
TypeScript tidak melakukan itu. Nah untuk skenario seperti

03:01.770 --> 03:05.865
itu, tuple akan sempurna. Kita dapat memberitahu TypeScript

03:05.865 --> 03:10.865
role apa yang seharusnya, dengan secara eksplisit mengatur jenis role.

03:11.010 --> 03:13.230
Jadi di sini kita juga memiliki contoh di

03:13.230 --> 03:16.600
mana TypeScript tidak membuat fototipe, tetapi kita secara eksplisit

03:16.600 --> 03:19.927
ingin menimpanya. Sekarang di sini kita dapat menambahkan

03:19.927 --> 03:23.041
tipe objek eksplisit dengan menambahkan titik dua setelah

03:23.041 --> 03:27.023
person, kemudian kurung kurawal dan kemudian nama harus berupa string,

03:27.023 --> 03:31.180
usia harus berupa angka dan hobi harus berupa array string.

03:31.180 --> 03:33.740
Jadi semua seperti yang disimpulkan oleh TypeScript.

03:33.740 --> 03:35.401
Jadi untuk itu, kami tidak akan memerlukan,

03:35.401 --> 03:36.827
tugas eksplisit ini dan seperti yang

03:36.827 --> 03:38.789
Anda pelajari itu akan menjadi buruk.

03:38.789 --> 03:40.470
Tetapi sekarang kita memiliki

03:40.470 --> 03:43.565
skenario, di mana inferensi tidak bekerja seperti yang

03:43.565 --> 03:47.510
kita inginkan, dan, kita ingin mengatur role menjadi tuple.

03:47.510 --> 03:49.730
Sekarang alih-alih menetapkan dua larik string atau

03:49.730 --> 03:51.660
larik angka atau menggunakan tipe yang sama yang

03:51.660 --> 03:55.180
tidak ketiga di sini sebelumnya, kita sekarang dapat menggunakan tipe khusus.

03:55.180 --> 03:56.810
Kita menggunakan tanda kurung

03:56.810 --> 04:01.710
siku lagi, tetapi sekarang di dalam tanda kurung siku kita menambahkan angka, lalu

04:01.710 --> 04:03.637
koma dan kemudian string.

04:03.637 --> 04:07.340
Sekarang ini menandai jenis tuple di sini.

04:07.340 --> 04:10.729
Sebuah tuple adalah konstruksi khusus, TypeScript mengerti, di Java

04:10.729 --> 04:13.310
scripted akan menjadi array normal, tetapi selama pengembangan

04:13.310 --> 04:15.750
dengan TypeScript, kita akan mendapatkan kesalahan

04:15.750 --> 04:18.190
dengan kode seperti ini di sini.

04:18.190 --> 04:20.313
Sekarang, apa yang dilakukan tupel?

04:21.620 --> 04:23.564
Ini di sini, memberi tahu TypeScript,

04:23.564 --> 04:27.195
saya ingin memiliki array khusus, dengan tepat dua elemen, karena

04:27.195 --> 04:30.160
saya memiliki tepat dua jenis di sana dan elemen pertama

04:30.160 --> 04:32.020
harus berupa angka.

04:32.020 --> 04:35.436
Elemen kedua harus berupa string, oleh karena itu, jika

04:35.436 --> 04:39.033
kita mengkompilasi kode ini di sini, saya mendapatkan

04:40.663 --> 04:45.000
kesalahan terkait 10 yang tidak dapat ditetapkan sebagai tipe di sini,

04:45.000 --> 04:48.346
karena kita ingin memiliki string sebagai nilai kedua

04:48.346 --> 04:50.822
dan jika saya kemudian menetapkan 10 sebagai

04:50.822 --> 04:52.660
nilai kedua di sini, maka saya

04:52.660 --> 04:56.544
jelas tidak mengikuti aturan ini.

04:56.544 --> 05:01.544
Jika Anda mengomentari ini dan kami kompilasi, ini berfungsi.

05:02.240 --> 05:06.290
Itu agak aneh karena mengapa mendorong bekerja di sini, karena kita

05:06.290 --> 05:08.610
semua mengatakan bahwa peran harus memiliki

05:08.610 --> 05:11.901
tepat dua elemen, jadi mengapa kita bisa mendorong admin

05:11.901 --> 05:14.980
ke dalam larik peran di sini.

05:14.980 --> 05:19.300
Push sebenarnya adalah pengecualian yang diperbolehkan dalam tupel.

05:19.300 --> 05:22.410
Jadi sayangnya TypeScript tidak dapat menangkap kesalahan

05:22.410 --> 05:24.840
ini, tetapi setidaknya ini memastikan bahwa kita

05:24.840 --> 05:28.570
tidak memberikan nilai yang salah di sini, dan di luar push, kita juga mendapatkan

05:28.570 --> 05:31.500
beberapa dukungan mengenai panjangnya.

05:31.500 --> 05:33.671
Jika kita menetapkan orang yang berperan ke nilai baru.

05:33.671 --> 05:36.420
Misalnya, larik kosong tidak diperbolehkan, larik

05:36.420 --> 05:39.710
dengan struktur yang kita definisikan di atas sana, diperbolehkan,

05:39.710 --> 05:43.510
Jika saya menambahkan elemen ekstra di sini.

05:43.510 --> 05:45.880
Kemudian kita akan kembali mendapatkan kesalahan.

05:45.880 --> 05:49.300
Jadi, panjangnya diberlakukan jika kita menetapkannya seperti ini, tetapi tidak

05:49.300 --> 05:50.720
untuk mendorong dan seterusnya.

05:50.720 --> 05:52.840
Ini adalah sesuatu yang harus Anda waspadai,

05:52.840 --> 05:55.580
tetapi tetap mendapatkan dukungan ini dan dukungan

05:55.580 --> 05:57.899
ini, cukup bagus dan jika Anda memiliki skenario

05:57.899 --> 06:02.240
di mana Anda membutuhkan jumlah nilai X yang tepat dalam sebuah larik dan Anda tahu

06:02.240 --> 06:05.130
jenis setiap nilai sebelumnya, maka Anda mungkin ingin

06:05.130 --> 06:07.900
mempertimbangkan tuple alih-alih larik untuk mendapatkan

06:07.900 --> 06:11.313
lebih banyak keketatan ke dalam aplikasi Anda agar lebih jelas

06:11.313 --> 06:17.543
tentang jenis data yang Anda kerjakan dan jenis data yang Anda harapkan.
