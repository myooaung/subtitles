WEBVTT

00:02.090 --> 00:04.730
Instructeur : Avant de nous plonger dans les fonctionnalités, vous

00:04.730 --> 00:07.002
trouverez en annexe de ce cours un lien vers cette page.

00:07.002 --> 00:11.350
Cette page répertorie toutes les fonctionnalités plus

00:11.350 --> 00:13.610
ou moins modernes de JavaScript,

00:13.610 --> 00:16.770
les navigateurs et les compilateurs qui

00:16.770 --> 00:19.700
les prennent en charge.

00:19.700 --> 00:23.150
Et là, vous trouvez également TypeScript, TypeScript

00:23.150 --> 00:25.310
combiné à core-js, qui est un fournisseur

00:25.310 --> 00:27.210
de polyfill.

00:27.210 --> 00:28.820
Mais généralement, cela

00:28.820 --> 00:32.070
décrit ce que TypeScript est capable de compiler.

00:32.070 --> 00:34.110
Maintenant, vous pouvez toujours utiliser cette

00:34.110 --> 00:35.990
ressource si vous recherchez une fonctionnalité

00:35.990 --> 00:37.960
spécifique comme, disons, le mot-clé const, où

00:37.960 --> 00:40.860
vous voulez savoir si TypeScript fonctionne avec cela ou non.

00:40.860 --> 00:43.340
Vous pourrez alors voir comment cela fonctionne avec cela, et quelles

00:43.340 --> 00:46.580
sont les restrictions, quels sont les navigateurs qui supportent cela.

00:46.580 --> 00:48.250
Au passage, cela vous donne également

00:48.250 --> 00:51.090
un indice concernant les navigateurs que vous pourriez vouloir

00:51.090 --> 00:53.967
cibler, concernant la cible TypeScript, etc.

00:53.967 --> 00:55.260
Il s'agit donc d'une excellente

00:55.260 --> 00:58.600
ressource qui vous permet de passer d'une itération à l'autre de JavaScript, de

00:58.600 --> 01:01.940
connaître les fonctionnalités introduites par chaque itération et la manière

01:01.940 --> 01:04.220
dont ces fonctionnalités sont prises en charge.

01:04.220 --> 01:06.140
Utilisez-le donc comme une ressource pour

01:06.140 --> 01:08.800
savoir ce que vous pouvez utiliser, ce que vous pouvez compiler

01:08.800 --> 01:11.060
et quels objectifs vous devez fixer.

01:11.060 --> 01:14.060
Et avec cela, commençons par l'une des introductions les

01:14.060 --> 01:17.030
plus importantes et les plus évidentes, et souvent utilisées,

01:17.030 --> 01:19.260
le JavaScript Next-Gen ajouté.

01:19.260 --> 01:21.780
Au fait, par Next-Gen JavaScript,

01:21.780 --> 01:24.700
j'entends ES6 ou plus récent.

01:24.700 --> 01:27.860
Et c'est de ça, ou plutôt de ça, que je parle.

01:27.860 --> 01:32.750
Il vous permet de définir des constantes ou des variables.

01:32.750 --> 01:35.350
La différence est que les constantes, donc

01:35.350 --> 01:38.730
les variables définies avec le mot clé const ne peuvent pas

01:38.730 --> 01:39.910
être modifiées.

01:39.910 --> 01:42.410
Si vous essayez d'assigner une nouvelle valeur ici,

01:42.410 --> 01:44.270
même si elle a le type correct, vous obtiendrez

01:44.270 --> 01:47.220
une erreur parce que c'est une constante.

01:47.220 --> 01:48.280
Maintenant, c'est d'ailleurs

01:48.280 --> 01:50.200
une erreur qui est formée par TypeScript.

01:50.200 --> 01:53.340
Dans Vanilla JavaScript, vous obtiendriez une erreur du navigateur lorsque

01:53.340 --> 01:55.100
vous exécutez votre code ici, et c'est l'idée

01:55.100 --> 01:57.280
derrière TypeScript, comme vous l'avez appris, nous

01:57.280 --> 02:00.410
obtenons une erreur déjà pendant que vous écrivez le code, parce que, bien

02:00.410 --> 02:02.990
sûr, c'est mieux pour nous en tant que développeur.

02:02.990 --> 02:04.930
Cela nous permet de corriger ce code

02:04.930 --> 02:07.820
plus tôt avant de le tester dans la console.

02:07.820 --> 02:11.330
Donc, ici, si nous supprimons ou commentons cette ligne,

02:11.330 --> 02:12.830
il se recompile et, par conséquent,

02:12.830 --> 02:14.400
nous n'obtenons pas d'erreur

02:14.400 --> 02:17.130
dans le navigateur, ainsi.

02:17.130 --> 02:20.860
Donc, c'est la constance. Let est une variable qui peut être modifiée,

02:20.860 --> 02:23.620
et donc, bien sûr, elle est similaire à var.

02:23.620 --> 02:27.260
Le Var existe aussi toujours parce que JavaScript fonctionne de telle sorte que

02:27.260 --> 02:29.550
les fonctionnalités ne sont pas soudainement supprimées,

02:29.550 --> 02:33.460
car alors les anciens navigateurs et leurs scripts pourraient se casser.

02:33.460 --> 02:35.160
Mais vous ne devriez plus utiliser var.

02:35.160 --> 02:37.860
Et pourquoi ne plus utiliser var ?

02:37.860 --> 02:39.670
Je veux dire, il est logique que nous ayons const, parce

02:39.670 --> 02:42.520
que cela ajoute vraiment une nouvelle fonctionnalité, les constantes.

02:42.520 --> 02:43.380
Mais pourquoi laisser faire ?

02:43.380 --> 02:45.380
Pourquoi ont-ils introduit un nouveau mot-clé ici ?

02:45.380 --> 02:47.223
Pourquoi ne pas s'en tenir au var ?

02:48.280 --> 02:51.460
Let et const ont une différence importante avec var.

02:51.460 --> 02:53.300
Eh bien, la différence évidente pour const est

02:53.300 --> 02:55.240
que la valeur ne peut pas être modifiée, mais pour

02:55.240 --> 02:57.040
let, nous avons également une différence.

02:57.040 --> 03:00.930
Et c'est la portée dans laquelle cette variable est disponible.

03:00.930 --> 03:04.363
Vous devez maintenant connaître le concept de scopes en JavaScript.

03:05.609 --> 03:09.260
Et avec var, vous avez une portée globale et une portée de fonction.

03:09.260 --> 03:10.700
Cela signifie que les variables

03:10.700 --> 03:12.550
que vous définissez en dehors des fonctions

03:12.550 --> 03:15.340
sont disponibles partout dans vos scripts.

03:15.340 --> 03:17.410
Les variables définies à l'intérieur des fonctions

03:17.410 --> 03:19.370
ne sont disponibles que dans cette fonction.

03:19.370 --> 03:22.610
Par exemple, ici. Si j'avais une fonction

03:22.610 --> 03:27.610
add, et qu'il y avait deux nombres, a et b.

03:27.670 --> 03:29.750
Ensuite, nous pouvons ajouter une variable

03:29.750 --> 03:32.280
avec var result, disons, et nous définissons result

03:32.280 --> 03:34.730
= a + b then, et ensuite nous retournons result,

03:34.730 --> 03:36.230
et bien sûr, nous aurions pu écrire

03:36.230 --> 03:38.430
ceci de manière plus courte mais je veux montrer

03:38.430 --> 03:40.570
ce que fait var.

03:40.570 --> 03:41.860
Et ce serait bien.

03:41.860 --> 03:43.012
Et le résultat ne serait disponible qu'à

03:43.012 --> 03:44.188
l'intérieur de cette fonction.

03:44.188 --> 03:47.723
Si j'essaie de consigner le résultat dans la console ici, cela

03:47.723 --> 03:49.470
échouera car il n'est disponible

03:49.470 --> 03:52.190
que dans la portée de cette fonction.

03:52.190 --> 03:53.970
Si je le définis en dehors de var harbor, tout

03:53.970 --> 03:56.610
fonctionne parce que maintenant il est disponible globalement,

03:56.610 --> 03:58.180
donc je peux y accéder ici.

03:58.180 --> 04:00.220
Et aussi, la façon dont JavaScript fonctionne,

04:00.220 --> 04:03.580
vous pouvez accéder aux variables à un niveau plus élevé.

04:03.580 --> 04:05.210
Ainsi, à l'intérieur d'une fonction,

04:05.210 --> 04:08.260
vous pouvez travailler avec des variables dont la portée est celle de cette

04:08.260 --> 04:11.100
fonction, mais toutes les variables ont une portée supérieure, comme

04:11.100 --> 04:12.563
la portée globale ici.

04:13.580 --> 04:14.980
Donc, c'est var.

04:14.980 --> 04:19.180
Maintenant, pour le let, le comportement est généralement le même.

04:19.180 --> 04:21.580
Ça marche et ça marche.

04:21.580 --> 04:23.800
Donc, c'est généralement la même chose pour let.

04:23.800 --> 04:27.180
Mais une différence importante est que pour les var, vous n'avez

04:27.180 --> 04:30.860
vraiment qu'une portée globale et une portée de fonctions.

04:30.860 --> 04:32.460
Qu'en est-il des instructions if ?

04:32.460 --> 04:36.720
Si nous vérifions que l'âge est supérieur à 20 ans ici, et que nous

04:36.720 --> 04:38.889
créons une variable, isOld, et que

04:38.889 --> 04:41.190
nous lui attribuons la valeur true,

04:41.190 --> 04:44.500
alors si la console enregistre isOld ici, nous obtenons

04:44.500 --> 04:46.270
une erreur en TypeScript,

04:46.270 --> 04:50.090
mais nous n'en aurions pas en JavaScript.

04:50.090 --> 04:53.620
Ce code ici, si vous le saisissez juste pour voir s'il fonctionne, et que vous

04:53.620 --> 04:56.280
vous déplacez vers les outils de développement JavaScript

04:56.280 --> 04:57.190
dans la console, et que

04:57.190 --> 04:59.120
vous le collez là et appuyez sur Entrée, vous

04:59.120 --> 05:00.970
voyez que true est imprimé ici.

05:01.830 --> 05:02.960
Et en effet, si vous essayez

05:02.960 --> 05:05.040
d'accéder à isOld, vous obtenez true.

05:05.040 --> 05:08.380
Ainsi, cette variable isOld est enregistrée globalement, et pas seulement

05:08.380 --> 05:10.530
à l'intérieur de l'instruction if.

05:10.530 --> 05:11.700
Car avec var, JavaScript

05:11.700 --> 05:13.080
ne connaît pas d'autres

05:13.080 --> 05:15.860
scopes que les fonctions et global.

05:15.860 --> 05:17.400
Et cela change avec let.

05:17.400 --> 05:19.690
Maintenant, comme je l'ai dit, TypeScript se plaint néanmoins,

05:19.690 --> 05:21.600
car ce n'est pas un bon code à écrire, mais techniquement,

05:21.600 --> 05:23.170
cela fonctionnerait.

05:23.170 --> 05:25.100
Avec let, ça change.

05:25.100 --> 05:26.350
Maintenant, avec let, ce

05:26.350 --> 05:29.880
n'est vraiment disponible qu'à l'intérieur de ces accolades.

05:29.880 --> 05:32.300
Parce que let et const ont introduit un nouveau concept

05:32.300 --> 05:33.540
appelé portée du bloc, ce qui

05:33.540 --> 05:36.550
signifie qu'une variable ou une constante est toujours disponible

05:36.550 --> 05:40.420
dans le bloc dans lequel vous la définissez ou dans tout bloc inférieur.

05:40.420 --> 05:43.060
Et un bloc est toujours un extrait entouré d'accolades,

05:43.060 --> 05:44.900
comme c'est le cas pour une instruction

05:44.900 --> 05:46.710
if, dans une boucle for, dans une

05:46.710 --> 05:48.760
fonction, ou même, c'est possible,

05:48.760 --> 05:50.590
si vous ajoutez des accolades comme

05:50.590 --> 05:52.670
ceci.

05:52.670 --> 05:54.230
Toute variable définie ici

05:54.230 --> 05:56.760
ne sera disponible que dans ce bloc.

05:56.760 --> 05:57.700
Et c'est une bonne chose

05:57.700 --> 06:00.000
car cela vous oblige à écrire un code plus propre

06:00.000 --> 06:02.470
et à éviter des situations comme celle-ci.

06:02.470 --> 06:03.640
Pour prouver qu'il y a une différence

06:03.640 --> 06:05.530
dans le navigateur, si je copie ce code en utilisant

06:05.530 --> 06:09.750
let, et que je recharge ma page ici, et que je l'entre ici, vous voyez que j'obtiens une erreur indiquant

06:09.750 --> 06:14.706
que isOld n'est pas défini.

06:14.706 --> 06:14.706
Nous n'avons pas eu d'erreur avant.

06:14.706 --> 06:19.706
En effet, si j'ai essayé de sortir isOld, j'obtiens à nouveau cette erreur.

06:20.070 --> 06:21.060
C'est donc la différence.

06:21.060 --> 06:23.370
Et donc, let et const sont meilleurs, non seulement parce

06:23.370 --> 06:25.740
que nous obtenons cette fonctionnalité de constance,

06:25.740 --> 06:29.150
mais aussi parce que nous sommes obligés d'écrire un code plus propre.

06:29.150 --> 06:30.130
Laissez-moi donc commenter ceci

06:30.130 --> 06:31.230
pour que ça fonctionne à nouveau.
