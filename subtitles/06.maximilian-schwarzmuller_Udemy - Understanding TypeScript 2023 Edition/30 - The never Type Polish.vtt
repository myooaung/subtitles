WEBVTT

00:02.220 --> 00:03.760
Instruktor: Ostatnim ciekawym

00:03.760 --> 00:07.490
typem, który chcę pokazać w tym module jest typ never.

00:07.490 --> 00:10.660
Teraz zobaczyliśmy funkcję, która zwracała void.

00:10.660 --> 00:13.058
Więc to nigdy nic nie zwraca.

00:13.058 --> 00:17.380
Nigdy nie jest inny typ funkcji może zwrócić.

00:17.380 --> 00:19.240
I może to zabrzmi dziwnie.

00:19.240 --> 00:21.110
Przyjrzyjmy się, jak to działa.

00:21.110 --> 00:24.662
Załóżmy, że mamy funkcję generateError.

00:24.662 --> 00:28.280
Tutaj spodziewam się, że otrzymam komunikat, który jest ciągiem

00:28.280 --> 00:31.610
znaków i być może jakiś kod błędu, który może być liczbą.

00:31.610 --> 00:33.700
Teraz wewnątrz tej funkcji, powiedzmy,

00:33.700 --> 00:35.130
że rzucamy błąd.

00:35.130 --> 00:37.760
Więc to powinno być zasadniczo funkcją

00:37.760 --> 00:41.500
użytkową, która generuje obiekty błędów i rzuca je.

00:41.500 --> 00:42.990
Więc tutaj możemy rzucić obiekt,

00:42.990 --> 00:44.380
co możemy zrobić w JavaScript.

00:44.380 --> 00:47.366
Możemy rzucić dowolny obiekt lub dowolną wartość jako

00:47.366 --> 00:49.930
błąd, a to powinno mieć właściwość message,

00:49.930 --> 00:53.990
w której przechowuję wartość mojego argumentu message tutaj.

00:53.990 --> 00:56.390
I chcę mieć właściwość kodu błędu, powiedzmy,

00:56.390 --> 00:59.417
że wymazać słowo, argument kodu w .

01:00.330 --> 01:02.390
Tak jest z funkcją invalid,

01:02.390 --> 01:06.600
którą możemy wywołać na przykład z informacją

01:06.600 --> 01:09.640
error occurred i kodem 500.

01:09.640 --> 01:12.213
Jeśli to zrobimy i skompilujemy ten plik tutaj,

01:14.120 --> 01:17.080
widzimy, że po przeładowaniu tego dostajemy nasz

01:17.080 --> 01:19.150
błąd, dobrze jak błąd tutaj.

01:19.150 --> 01:21.670
I może to brzmi dość abstrakcyjnie, ale w rzeczywistości

01:21.670 --> 01:22.850
tak nie jest.

01:22.850 --> 01:24.640
Posiadanie funkcji użytkowych takich

01:24.640 --> 01:27.850
jak ta byłoby dość standardowe w większych aplikacjach, w

01:27.850 --> 01:30.270
których nie chcesz ręcznie rzucać błędu w 10

01:30.270 --> 01:32.540
różnych miejscach aplikacji, i gdzie chcesz

01:32.540 --> 01:35.380
sięgnąć po jedną wygodną funkcję, która buduje obiekt

01:35.380 --> 01:37.450
błędu dla ciebie i może również rzuca go

01:37.450 --> 01:39.350
natychmiast, dzięki czemu możesz

01:39.350 --> 01:42.300
wywołać tę funkcję z różnymi danymi wejściowymi, ale

01:42.300 --> 01:44.690
zawsze masz rzucony błąd.

01:44.690 --> 01:47.010
Teraz interesującą rzeczą w tej funkcji

01:47.010 --> 01:49.048
jest to, że nie tylko zwraca void.

01:49.048 --> 01:52.385
Właściwie mogę określić, że zwraca void, ponieważ

01:52.385 --> 01:54.545
oczywiście zwraca nic, ale właściwie

01:54.545 --> 01:58.030
nie zwraca tylko nic, jeśli jesteśmy całkowicie

01:58.030 --> 02:02.630
szczerzy, ta funkcja zwraca nigdy.

02:02.630 --> 02:05.518
Funkcja ta nigdy nie wytwarza wartości zwrotnej.

02:05.518 --> 02:08.860
Jeśli próbowałbym przywrócić wartość zwracaną tutaj,

02:08.860 --> 02:11.193
w wyniku dziennika konsoli, a następnie

02:12.040 --> 02:16.240
skompiluję mój kod w tym execute, widzimy, że nie ma undefined

02:16.240 --> 02:19.630
jest rejestrowany tutaj, ponieważ ponieważ błąd

02:19.630 --> 02:22.220
jest rzucany, to zasadniczo zawiesza

02:22.220 --> 02:25.330
nasz skrypt, można powiedzieć.

02:25.330 --> 02:27.080
To anuluje nasz scenariusz.

02:27.080 --> 02:30.290
I tak będzie zawsze w przypadku tej funkcji.

02:30.290 --> 02:32.210
Oczywiście możemy zawinąć go w try catch,

02:32.210 --> 02:34.260
abyśmy mogli nadal kontynuować w tym skrypcie,

02:34.260 --> 02:37.620
ale ta funkcja zasadniczo nigdy nie produkuje wartości.

02:37.620 --> 02:41.060
Ta funkcja zawsze zawiesza skrypt lub tę

02:41.060 --> 02:42.910
część skryptu, jeśli

02:42.910 --> 02:44.720
używasz try catch, i dlatego

02:44.720 --> 02:47.910
nigdy nie zwraca niczego.

02:47.910 --> 02:50.400
I stąd typem powrotnym tej funkcji

02:50.400 --> 02:54.483
faktycznie jest nie tylko void, ale także never.

02:55.710 --> 02:56.700
Teraz interesującą rzeczą

02:56.700 --> 02:59.060
jest to, że jeśli zawiesisz się nad nim bez przypisania

02:59.060 --> 03:01.680
nigdy, widzisz, że typ inferencyjny jest void.

03:01.680 --> 03:05.410
Alls ponieważ never jest nowszym typem, istnieje już od

03:05.410 --> 03:07.060
jakiegoś czasu, ale nie był

03:07.060 --> 03:10.000
wbudowany w pierwsze wersje TypeScript, dlatego

03:10.000 --> 03:12.620
void jest typowo zakładany i nie jest straszne

03:12.620 --> 03:15.417
pozostawienie go na tym.

03:15.417 --> 03:17.740
Ale możesz być bardzo jasny i wyraźnie

03:17.740 --> 03:21.470
ustawić never jako typ zwracany, aby było naprawdę jasne,

03:21.470 --> 03:24.490
że to nigdy nie zwraca niczego.

03:24.490 --> 03:26.770
Tak więc z perspektywy jakości kodu, może

03:26.770 --> 03:29.560
to być bardziej jasne w odniesieniu do twoich intencji

03:29.560 --> 03:30.680
i sprawić, że będzie

03:30.680 --> 03:32.330
naprawdę jasne dla naszych programistów

03:32.330 --> 03:35.850
czytających twój kod, że ta funkcja ma na celu nigdy nie zwracać

03:35.850 --> 03:40.954
niczego i zasadniczo rozbić lub złamać twój skrypt lub tę część skryptu.

03:40.954 --> 03:43.890
Inną funkcją, która nigdy nie zwróci, przy

03:43.890 --> 03:47.190
okazji, byłaby funkcja z nieskończoną pętlą.

03:47.190 --> 03:49.370
Więc jeśli mamy while (true) tam, to tworzy

03:49.370 --> 03:51.060
nieskończoną pętlę, a zatem również

03:51.060 --> 03:52.790
byłaby to funkcja, która nigdy

03:52.790 --> 03:54.410
nie zwraca.

03:54.410 --> 03:56.070
Funkcja błędu tutaj, lub funkcja,

03:56.070 --> 03:58.852
która generuje zamrożony błąd prawdopodobnie jest bardziej

03:58.852 --> 04:01.305
powszechnym przypadkiem użycia, chociaż.

04:01.305 --> 04:04.500
Więc nigdy, również ciekawy typ, który możesz

04:04.500 --> 04:06.230
użyć na funkcjach dla przypadków

04:06.230 --> 04:08.553
takich jak ten tutaj.
