WEBVTT

00:02.240 --> 00:04.870
Zo, we hebben onze eerste component toegevoegd.

00:04.870 --> 00:06.090
Laten we een tweede toevoegen.

00:06.090 --> 00:09.970
NewTodo. tsx is een bestandsnaam.

00:09.970 --> 00:13.060
Daarin importeren we natuurlijk react uit react.

00:13.060 --> 00:16.170
En je zou natuurlijk ook op klassen gebaseerde componenten kunnen bouwen.

00:16.170 --> 00:18.270
Dit is ook volledig ondersteund, maar

00:18.270 --> 00:22.410
ik zal deze moderne functionele componenten alleen stijl gebruiken.

00:22.410 --> 00:24.070
Dus ook hier hebben we een functie

00:24.070 --> 00:26.180
die later onze component zal vormen.

00:26.180 --> 00:29.258
En ik exporteer NewTodo als mijn standaard en laten we een

00:29.258 --> 00:31.260
typetoewijzing toevoegen en duidelijk

00:31.260 --> 00:33.021
maken dat dit een typefunctiecomponent

00:33.021 --> 00:34.410
wordt.

00:34.410 --> 00:35.800
En daarom missen we hier

00:35.800 --> 00:38.220
natuurlijk wat teruggegeven jsx code.

00:38.220 --> 00:39.730
Hier komt dus een formulier waar ik alle

00:39.730 --> 00:42.030
controles wil toevoegen die ik nodig heb om de gebruiker in staat

00:42.030 --> 00:43.780
te stellen nieuwe todo's toe te voegen.

00:45.060 --> 00:48.650
Laten we nu deze nieuwe todo component toevoegen aan de app component.

00:48.650 --> 00:53.650
Dus hier kunnen we NewTodo importeren uit . /components/NewTodo en voeg het hier

00:55.130 --> 00:58.095
gewoon toe in plaats van de opmerking.

00:58.095 --> 01:00.520
NewTodo als een zelfsluitende component,

01:00.520 --> 01:02.790
omdat we op dit moment niets doorgeven

01:02.790 --> 01:04.750
tussen de openings- en sluitingstags

01:04.750 --> 01:07.784
en we hebben hier ook geen rekwisieten, op dit moment

01:07.784 --> 01:09.263
althans.

01:10.140 --> 01:11.540
Dus in plaats van deze

01:11.540 --> 01:13.330
component kunnen we nu een

01:13.330 --> 01:16.190
ingang toevoegen en daarna ook een knop.

01:16.190 --> 01:18.117
Dus voeg hier eigenlijk een div

01:18.117 --> 01:20.020
toe waarin ik een label wil hebben

01:20.020 --> 01:24.880
met htmlFor attributen om te wijzen naar laten we zeggen, "todo-tekst".

01:24.880 --> 01:26.560
Dit is allemaal gewoon

01:26.560 --> 01:31.250
markup hier, waar ik zeg "Todo Tekst" en dan invoerelement van

01:31.250 --> 01:35.170
het type tekst met een id van "todo tekst", zodat het

01:35.170 --> 01:36.900
label en de invoer correct

01:36.900 --> 01:39.640
semantisch verbonden zijn.

01:39.640 --> 01:41.440
En onder die div hier, in plaats van

01:41.440 --> 01:43.120
het formulier voeg ik een knop toe

01:43.120 --> 01:44.437
waar ik zeg, "ADD TODO", En

01:45.297 --> 01:47.970
die knop moet van het type submit zijn zodat het, nou

01:47.970 --> 01:49.670
ja, het formulier verzendt.

01:49.670 --> 01:51.900
Dit is nu een heel eenvoudig formulier waarmee we een nieuwe

01:51.900 --> 01:53.143
Todo kunnen toevoegen.

01:54.580 --> 01:57.060
Laten we er nu voor zorgen dat dit werkt

01:57.060 --> 01:59.660
en daarvoor moeten we een paar verschillende

01:59.660 --> 02:01.820
stappen toepassen.

02:01.820 --> 02:05.020
We moeten krijgen wat de gebruiker hier invoert en

02:05.020 --> 02:08.550
we moeten datgene wat de gebruiker hier invoert doorsturen

02:08.550 --> 02:09.810
naar de app component,

02:09.810 --> 02:13.330
want daar zullen we later onze todo's beheren.

02:13.330 --> 02:16.150
Dus laten we eerst even reageren op het indienen van formulieren misschien.

02:16.150 --> 02:18.050
We kunnen een nieuwe functie toevoegen,

02:18.050 --> 02:20.300
dus een functie in de functionele component,

02:20.300 --> 02:22.720
maar dat wordt nu een gewone functie, die

02:22.720 --> 02:27.720
we "todoSubmitsHandler" zullen noemen, welke naam je maar wilt.

02:28.210 --> 02:29.990
Dit is een functie die moet afgaan wanneer

02:29.990 --> 02:31.860
dit formulier wordt verzonden.

02:31.860 --> 02:35.571
Dus we kunnen het binden aan de onSubmit prop hier op het einde,

02:35.571 --> 02:38.770
todoSubmitsHandler, niet uitvoeren, alleen aanwijzen,

02:38.770 --> 02:40.900
zodat het voor ons wordt uitgevoerd

02:40.900 --> 02:43.810
wanneer dit formulier wordt verzonden.

02:43.810 --> 02:46.270
Nu krijgen we hier een gebeurtenisobject en het gebeurtenisobject

02:46.270 --> 02:49.507
is van het type react. FormEvent.

02:51.290 --> 02:54.010
Nu wil ik daar event prevent default aanroepen om die

02:54.010 --> 02:55.780
standaard te voorkomen, namelijk

02:55.780 --> 02:58.300
een echt verzoek sturen naar de server die deze

02:58.300 --> 02:59.280
app bedient.

02:59.280 --> 03:01.520
Dat wil ik natuurlijk niet.

03:01.520 --> 03:04.680
Ik wil dit verzoek alleen hier in JavaScript behandelen

03:04.680 --> 03:08.350
en daarom moet deze browser standaard voorkomen worden.

03:08.350 --> 03:09.770
Met dat voorkomen kunnen we krijgen

03:09.770 --> 03:12.610
wat de gebruiker in de invoer heeft ingevoerd en daarvoor

03:12.610 --> 03:15.250
hebben we twee verschillende manieren.

03:15.250 --> 03:18.310
We kunnen ofwel de status van de invoer hier beheren, soort van

03:18.310 --> 03:20.970
bidirectionele binding, of we gebruiken een ref, een

03:20.970 --> 03:23.170
referentie, om eruit te halen wat de gebruiker

03:23.170 --> 03:25.010
hier heeft ingevoerd wanneer het formulier

03:25.010 --> 03:26.520
is verzonden.

03:26.520 --> 03:28.410
Ik kies voor de laatste aanpak,

03:28.410 --> 03:30.420
omdat we zo meteen toch state management

03:30.420 --> 03:33.470
in actie zullen zien in de app component.

03:33.470 --> 03:37.340
Om zo'n ref op te zetten, importeren we de useRef hook van react,

03:37.340 --> 03:40.580
en hooks zijn speciale functies die je kunt uitvoeren

03:40.580 --> 03:44.010
en functiecomponenten om bepaalde functionaliteiten

03:44.010 --> 03:45.290
toe te voegen aan de component

03:45.290 --> 03:48.101
en als we hier useRef uitvoeren, is wat we terugkrijgen

03:48.101 --> 03:53.730
een Ref object, dat we kunnen opslaan in een constante en ik zal het eigenlijk "textInputRef"

03:53.730 --> 03:57.310
noemen.

03:57.310 --> 04:00.176
En we kunnen zo'n referentie bijvoorbeeld gebruiken

04:00.176 --> 04:04.980
om die toe te wijzen aan een dom-element en dan met dat dom-element interageren vanuit

04:04.980 --> 04:06.500
onze code hier boven.

04:06.500 --> 04:08.800
Dus bijvoorbeeld, als dat formulier wordt ingediend.

04:09.680 --> 04:11.510
We zetten zo'n verbinding op door

04:11.510 --> 04:14.020
de speciale Ref prop toe te voegen aan een html

04:14.020 --> 04:16.580
element naar keuze en te wijzen naar dat object

04:16.580 --> 04:19.150
dat we hierboven hebben gemaakt.

04:19.150 --> 04:21.530
Dus voeg textInputRef toe.

04:21.530 --> 04:23.540
Dat schept een band hier.

04:23.540 --> 04:27.380
Je ziet echter al weer dat TypeScript hier niet van houdt.

04:27.380 --> 04:30.110
Want useRef blijkt ook een

04:30.110 --> 04:33.250
generieke functie te zijn.

04:33.250 --> 04:35.270
Welk type kunnen we er nu aan geven.

04:35.270 --> 04:37.340
Wat zou hier interessant zijn om te weten?

04:37.340 --> 04:39.200
Het zou interessant zijn om te weten

04:39.200 --> 04:42.030
welke gegevens in de grafiek worden opgeslagen, en

04:42.030 --> 04:43.970
aangezien u wijst op het invoerelement,

04:43.970 --> 04:47.880
hebben we daar een html-invoerelement in opgeslagen.

04:47.880 --> 04:50.420
Nu zouden we allemaal een standaardwaarde moeten geven

04:50.420 --> 04:51.840
aan de Ref wanneer die wordt ingesteld

04:51.840 --> 04:53.190
en daar geven we null, want wanneer

04:53.190 --> 04:54.710
de component voor de allereerste

04:54.710 --> 04:56.360
keer wordt weergegeven, wanneer deze

04:56.360 --> 04:57.380
code wordt uitgevoerd,

04:57.380 --> 04:59.460
is dit natuurlijk nog niet weergegeven, dus dan

04:59.460 --> 05:01.590
wijst dit nergens naar.

05:01.590 --> 05:03.350
Zodra dit echter is weergegeven,

05:03.350 --> 05:04.950
wordt de verbinding tot stand

05:04.950 --> 05:07.040
gebracht en werkt deze Ref.

05:07.040 --> 05:09.453
En nu kunnen we hier in de todoSubmitHandler de ingevoerde

05:10.342 --> 05:15.342
tekst krijgen door textInputRef te gebruiken. stroom, dat is altijd iets wat

05:15.500 --> 05:17.973
je moet invoeren als je met een

05:17.973 --> 05:21.440
Ref werkt, . waarde natuurlijk hier omdat

05:21.440 --> 05:24.530
we werken met het html input element.

05:24.530 --> 05:27.940
Maar hier is het probleem dat dit nietig zou kunnen zijn.

05:27.940 --> 05:29.630
Het is een probleem dat we al kennen,

05:29.630 --> 05:31.790
dat hadden we vroeg in de cursus ook toen we iets

05:31.790 --> 05:33.370
selecteerden in een Dom en dat hebben

05:33.370 --> 05:34.630
we hier ook, omdat TypeScript

05:34.630 --> 05:37.020
niet met zekerheid kan weten dat die verbinding

05:37.020 --> 05:38.800
tot stand komt.

05:38.800 --> 05:40.580
We weten het, we hebben de code geschreven,

05:40.580 --> 05:43.050
maar TypeScript begrijpt helaas niet dat we daar beneden

05:43.050 --> 05:45.300
een verbinding tot stand brengen.

05:46.310 --> 05:48.920
Dus, om dit op te lossen kunnen we hier een uitroepteken

05:48.920 --> 05:51.350
toevoegen, om TypeScript opnieuw te vertellen dat

05:51.350 --> 05:54.350
dit in orde komt, dat dit wordt ingesteld, en we zijn goed.

05:54.350 --> 05:56.130
Tussen haakjes TypeScript is correct

05:56.130 --> 05:58.920
als we hier todoSubmitHandler zouden aanroepen, dit zou

05:58.920 --> 06:00.590
de forward worden aangeroepen, dit

06:00.590 --> 06:02.410
werd voor het eerst gerenderd en dan zou

06:02.410 --> 06:05.000
dit inderdaad nog niet geïnitialiseerd zijn.

06:05.000 --> 06:07.910
We weten alleen met zekerheid dat het geïnitialiseerd wordt, omdat

06:07.910 --> 06:09.730
we weten dat dit pas wordt aangeroepen als

06:09.730 --> 06:10.830
het formulier wordt ingediend,

06:10.830 --> 06:13.830
en dat kan pas gebeuren nadat dit is gerenderd.

06:13.830 --> 06:16.120
Dus we weten hoe onze code werkt.

06:16.120 --> 06:18.360
Dit zal nooit nul zijn.

06:18.360 --> 06:20.810
Als er een andere mogelijkheid zou zijn, zou u hier

06:20.810 --> 06:22.780
een if-check moeten gebruiken om te controleren

06:22.780 --> 06:26.030
of textInputRef. current null is en zo ja,

06:26.030 --> 06:27.620
doe dan iets anders.

06:27.620 --> 06:29.550
Maar hier kan dat niet gebeuren.

06:29.550 --> 06:31.230
Dus daarmee halen we een waarde eruit

06:31.230 --> 06:34.640
en kunnen we de console gebruiken. log dit hier om te zien of het werkt.

06:34.640 --> 06:37.040
Maar dit is dan natuurlijk niet de definitieve opzet.

06:37.040 --> 06:40.900
Dus laten we dit opslaan, laten we hier invoeren,

06:40.900 --> 06:44.590
maak het af in een maand en voeg todo toe, en we

06:44.590 --> 06:47.970
zien het hier in de console logs.

06:47.970 --> 06:50.310
Dat werkt zoals het hoort.

06:50.310 --> 06:51.910
En nu het werkt zoals het hoort, laten

06:51.910 --> 06:55.460
we ervoor zorgen dat we die waarde naar de app component krijgen.

06:55.460 --> 06:58.820
Als je wat weet te reageren moet je het zeker eerst zelf proberen.

06:58.820 --> 07:00.963
We doen het samen in de volgende lezing.
