WEBVTT

00:02.130 --> 00:04.110
Instruktor: Przygotowaliśmy nasz workflow

00:04.110 --> 00:06.137
deweloperski dla Webpacka tutaj, konfigurując

00:06.137 --> 00:08.490
go dla serwera Webpack dev, ustawiając tryb na

00:08.490 --> 00:10.840
rozwój i ustawiając mapy źródeł, aby poprawić

00:10.840 --> 00:13.210
nasze doświadczenie debugowania, aby dać nam

00:13.210 --> 00:16.570
lepsze komunikaty o błędach i tak dalej.

00:16.570 --> 00:20.150
Teraz dla produkcji, więc kiedy chcemy przygotować nasz kod, aby przesłać

00:20.150 --> 00:23.260
go na serwer, gdzie następnie będzie on serwowany naszym użytkownikom

00:23.260 --> 00:27.070
końcowym, zazwyczaj chcemy innego przepływu pracy.

00:27.070 --> 00:28.790
Dlatego dodam nowy config o nazwie

00:28.790 --> 00:31.820
webpack. konfig. prod. słoiki.

00:31.820 --> 00:33.210
Ta nazwa nie zależy od Ciebie,

00:33.210 --> 00:36.043
ponieważ Webpack domyślnie nie będzie jej szukał.

00:36.880 --> 00:39.710
Za chwilę jednak powiemy mu, żeby go szukał.

00:39.710 --> 00:41.920
Zanim to powiemy, skopiujmy

00:41.920 --> 00:44.708
wszystkie ustawienia deweloperskie

00:44.708 --> 00:48.480
do tego configu. ale teraz dopracujmy go.

00:48.480 --> 00:51.150
Możemy ustawić tryb na przykład na produkcję.

00:51.150 --> 00:54.380
To powie Webpackowi, aby zrobił te optymalizacje, zminifikował

00:54.380 --> 00:56.550
nasz kod i tak dalej, więc zdecydowanie

00:56.550 --> 00:59.220
chcesz ustawić to tutaj.

00:59.220 --> 01:00.440
Zostawimy wpis.

01:00.440 --> 01:02.910
W wyjściu nie możemy pozbyć się ścieżki publicznej,

01:02.910 --> 01:05.860
ponieważ było to wymagane dla serwera Webpack dev.

01:05.860 --> 01:08.810
Teraz nie będziemy go tutaj używać, ponieważ na produkcję

01:08.810 --> 01:10.430
chcemy uruchomić skrypt Webpack

01:10.430 --> 01:12.940
i wygenerować nasze wyjście zapisane na dysku,

01:12.940 --> 01:16.900
a nie serwowane tymczasowo na lokalnie działającym serwerze.

01:16.900 --> 01:19.350
Możemy ustawić devtool na none, aby nie generować

01:19.350 --> 01:22.090
tutaj żadnych map źródłowych, ponieważ w produkcji

01:22.090 --> 01:24.913
możemy ich nie potrzebować.

01:26.140 --> 01:30.160
Teraz reszta może pozostać taka, jaka jest, ale my dodamy więcej.

01:30.160 --> 01:34.620
Na dole tutaj chcę dodać wpis o wtyczkach i ustawić

01:34.620 --> 01:36.220
to na tablicę.

01:36.220 --> 01:41.070
Wtyczki to dodatkowe rozszerzenia lub, cóż, wtyczki, które możesz dodać do swojego

01:41.070 --> 01:43.020
przepływu pracy Webpack, który

01:43.020 --> 01:46.080
w zasadzie zostanie zastosowany do całego wyjścia,

01:46.080 --> 01:47.820
do całego projektu.

01:47.820 --> 01:50.190
Reguły i moduły są stosowane na

01:50.190 --> 01:52.870
poziomie pojedynczego pliku.

01:52.870 --> 01:57.260
Wtyczki są stosowane do ogólnego przepływu pracy.

01:57.260 --> 01:58.730
Tutaj chcę dodać wtyczkę,

01:58.730 --> 02:00.620
która automatycznie usuwa wszystko

02:00.620 --> 02:04.370
w folderze dist, zanim nowe wyjście zostanie tam napisane, abyśmy

02:04.370 --> 02:06.540
zawsze mieli tylko najnowsze, najnowsze

02:06.540 --> 02:09.410
wyjście w folderze dist.

02:09.410 --> 02:11.900
W tym celu zainstaluję zupełnie

02:11.900 --> 02:16.900
nowy pakiet z --save-dev i jest to clean-webpack-plugin.

02:19.090 --> 02:21.900
I to pomoże nam oczyścić folder dist, w naszym

02:21.900 --> 02:26.360
przypadku, za każdym razem, gdy przebudujemy nasz projekt.

02:26.360 --> 02:29.820
Więc z tym zainstalowanym, zaimportujmy go tutaj na górze.

02:29.820 --> 02:32.090
Nazwę go CleanPlugin i zaimportuję

02:32.090 --> 02:36.400
go przez require clean-webpack-plugin i mając go zainstalowanego

02:36.400 --> 02:39.810
w tablicy pluginów na dole, po prostu wywołujemy

02:39.810 --> 02:44.073
new CleanPlugin. CleanWebpackPlugin i zainicjuj

02:45.422 --> 02:46.500
to.

02:46.500 --> 02:49.660
Jest to funkcja konstruktora, a teraz ją instancjonuj.

02:49.660 --> 02:51.650
To jest wszystko co musisz zrobić tutaj

02:51.650 --> 02:53.260
i to w końcu powie Webpackowi,

02:53.260 --> 02:56.490
że zanim zapisze coś do tego folderu wyjściowego, wyczyści

02:56.490 --> 02:58.593
wszystko co tam jest.

02:59.440 --> 03:02.020
Teraz dostaliśmy gotowy workflow produkcyjny.

03:02.020 --> 03:04.620
Teraz, aby go użyć, przejdźmy do pakietu. json i tam dostosujmy

03:04.620 --> 03:07.280
ten skrypt budowy.

03:07.280 --> 03:10.510
Tutaj chcę powiedzieć Wepbackowi, żeby używał tego pliku

03:10.510 --> 03:13.110
prod, tego pliku konfiguracyjnego produkcji

03:13.110 --> 03:15.160
i robimy to dodając --config, a następnie

03:16.730 --> 03:21.140
webpack. konfig. prod. js tutaj.

03:21.140 --> 03:23.610
To tutaj powinno być dowolną nazwą pliku, którą wybrałeś,

03:23.610 --> 03:27.000
a to instruuje Webpack, aby użyć tego pliku konfiguracyjnego zamiast domyślnego

03:27.000 --> 03:29.730
Webpacka. konfig. js, którego

03:29.730 --> 03:32.030
normalnie szuka.

03:32.030 --> 03:34.600
Dzięki temu, jeśli teraz uruchomisz npn run build,

03:34.600 --> 03:36.700
zbuduje on twoją aplikację do produkcji,

03:36.700 --> 03:39.950
co oznacza, że daje ci to zoptymalizowane wyjście.

03:39.950 --> 03:42.460
Więc jeśli czekasz, tutaj mamy pakiet. js plik i to jest teraz naprawdę

03:42.460 --> 03:45.110
zoptymalizowany kod zbudowany dla produkcji i

03:45.110 --> 03:50.980
to razem z twoim indeksem.

03:50.980 --> 03:50.980
plik html oraz aplikację. Plik

03:50.980 --> 03:53.800
css jest tym, co umieściłbyś na serwerze, gdybyś

03:53.800 --> 03:56.393
chciał wdrożyć swoją aplikację.

03:57.260 --> 04:00.440
Jest to jednocześnie zakończenie tego modułu.

04:00.440 --> 04:02.140
Teraz pozwolę sobie podsumować to, czego się dowiedzieliśmy.
