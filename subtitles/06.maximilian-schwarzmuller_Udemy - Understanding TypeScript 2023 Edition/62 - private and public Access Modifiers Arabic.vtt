WEBVTT

00:02.040 --> 00:04.180
المعلم: كان ذلك فصلًا أساسيًا جدًا.

00:04.180 --> 00:05.930
الآن عند بناء الفصول الدراسية

00:05.930 --> 00:08.400
، غالبًا ما تصبح أكثر تعقيدًا من ذلك.

00:08.400 --> 00:10.800
وقد ترغب في تخزين المزيد من البيانات هناك.

00:10.800 --> 00:15.160
لنفترض أن كل قسم يجب أن يكون لديه موظفين.

00:15.160 --> 00:18.160
يمكن أن تكون مصفوفة ، وقد تكون في البداية

00:18.160 --> 00:20.290
مصفوفة فارغة.

00:20.290 --> 00:23.520
ولكي تكون أكثر دقة أيضًا حول ما تريد تخزينه

00:23.520 --> 00:24.980
هناك ، فقد تكون مصفوفة

00:24.980 --> 00:28.800
سلسلة لإبقائها بسيطة نسبيًا.

00:28.800 --> 00:31.733
الآن يمكن أن يكون لدينا طريقة هنا addEmployee.

00:33.030 --> 00:36.880
هناك نريد موظفًا كحجة ، والتي يجب أن تكون

00:36.880 --> 00:39.430
مجرد سلسلة في مثالنا.

00:39.430 --> 00:42.650
ثم يمكننا ضبط هذا. الموظفين. يدفع.

00:42.650 --> 00:47.320
لذا ادفع موظفًا جديدًا إلى مصفوفة موظفنا باستخدام

00:47.320 --> 00:48.373
هذا الرمز.

00:50.750 --> 00:52.683
الآن يمكننا أيضًا إضافة طريقة أخرى

00:53.666 --> 00:55.749
، printEmployeeInformation.

01:00.508 --> 01:05.508
وهناك أريد أن أعزّي. سجل (هذا. الموظفين. length) وأريد

01:07.766 --> 01:12.766
أيضًا تعزية. سجل (هذا. الموظفين) نفسها.

01:15.510 --> 01:18.480
الآن إذا ذهبنا إلى هنا ، فيمكننا الآن التعليق

01:18.480 --> 01:20.560
على هذا الكود هنا ، والذي سيتعطل

01:20.560 --> 01:24.070
مرة أخرى لأننا مرة أخرى لا نلائم وصف القسم مع الكائن الموجود

01:24.070 --> 01:25.870
بالأسفل هناك.

01:25.870 --> 01:29.200
وبدلاً من ذلك ، في قسم المحاسبة هذا ، يمكننا

01:29.200 --> 01:32.234
إضافة موظف ، دعنا نقول ماكس.

01:32.234 --> 01:35.400
وموظف آخر ، دعنا نقول مانو.

01:35.400 --> 01:37.690
ثم إلى جانب وصفه ، أريد أيضًا

01:37.690 --> 01:41.520
الحصول على معلومات الموظف الخاص بي هناك.

01:41.520 --> 01:44.600
إذا حفظنا هذا ، يجب أن نحصل على هذا الناتج

01:44.600 --> 01:47.830
، موظفان وإليك بعض المعلومات.

01:47.830 --> 01:50.240
الآن كل شيء جميل أن يكون.

01:50.240 --> 01:52.700
إحدى المشكلات التي نواجهها مع هذه الفئة

01:52.700 --> 01:55.960
هي أنه يمكننا تغيير الموظفين من الخارج ، ليس فقط بإضافة

01:55.960 --> 01:58.160
موظف ، ولكن عن طريق الوصول المباشر

01:58.160 --> 02:01.710
إلى ممتلكات الموظف ، تمامًا كما يمكننا القيام بذلك من

02:01.710 --> 02:04.430
أجل الاسم أيضًا ، بالمناسبة.

02:04.430 --> 02:07.630
لذا ما أعنيه هو أنه يمكننا أيضًا الذهاب

02:07.630 --> 02:10.560
إلى المحاسبة ، ثم التواصل مع الموظفين

02:10.560 --> 02:13.870
، وربما إضافة موظف آخر في المؤشر الثاني

02:13.870 --> 02:16.400
، وهناك مرر آنا ، هكذا.

02:16.400 --> 02:18.210
إذا فعلنا ذلك وحفظناه ، فسنحصل

02:18.210 --> 02:20.290
على ثلاثة موظفين ونحصل على آنا.

02:20.290 --> 02:22.710
الآن قد تعتقد ، حسنًا ، لقد حصلنا على طريقة أخرى.

02:22.710 --> 02:25.230
حسنًا ، عند إنشاء تطبيقات أكثر تعقيدًا

02:25.230 --> 02:27.980
، فأنت تريد عادةً تجنب شيء كهذا.

02:27.980 --> 02:30.930
تريد التأكد من وجود مسار واحد واضح ، وطريقة

02:30.930 --> 02:34.870
واحدة لاستخدام فصلك الدراسي ، وأن مثل هذه الأشياء ، والطرق

02:34.870 --> 02:37.280
البديلة لاستخدامه ، ليست مدعومة

02:37.280 --> 02:38.530
حقًا.

02:38.530 --> 02:41.230
لأنه إذا كنت تعمل في فريق أكبر ،

02:41.230 --> 02:42.920
فسيستخدم أحد الزملاء

02:42.920 --> 02:45.700
هذا الأسلوب لإضافة موظف وقد يستخدم

02:45.700 --> 02:48.050
زميل آخر هذا النهج.

02:48.050 --> 02:49.280
وأنت لا تريد هذا.

02:49.280 --> 02:52.640
تريد أن يكون لديك طريقة موحدة للقيام بذلك.

02:52.640 --> 02:55.960
أيضًا ، لأنه ربما في طريقة إضافة موظف ، يمكنك القيام

02:55.960 --> 02:58.420
بأكثر من مجرد إضافته إلى المصفوفة.

02:58.420 --> 02:59.770
ربما تريد أولاً وقبل كل

02:59.770 --> 03:02.400
شيء الحصول على بعض التحقق وما إلى ذلك هنا.

03:02.400 --> 03:04.940
لذلك قد يكون لديك رمز إضافي هناك ، والذي

03:04.940 --> 03:06.610
ببساطة لا يتم تنفيذه إذا

03:06.610 --> 03:09.470
قمت بتعيين قيمة جديدة مباشرة أو أضفت قيمة

03:09.470 --> 03:12.970
جديدة إلى المصفوفة بهذا السطر هنا.

03:12.970 --> 03:16.000
لذلك لا تريد السماح للموظفين

03:16.000 --> 03:19.884
بالوصول إلى مثل هذا من خارج الفصل.

03:19.884 --> 03:22.340
و TypeScript هو ما يساعدك.

03:22.340 --> 03:26.760
يمكنك تحويل الموظفين هنا إلى ملكية خاصة

03:26.760 --> 03:30.580
، حقل خاص عن طريق إضافة كلمة رئيسية

03:30.580 --> 03:32.220
خاصة أمامه.

03:32.220 --> 03:34.303
ما تعنيه الخصوصية الآن هو

03:34.303 --> 03:38.030
أن الموظفين أصبحوا الآن خاصية ، والتي لا يمكن

03:38.030 --> 03:41.210
الوصول إليها إلا من داخل الفصل ، لذلك من

03:41.210 --> 03:43.480
داخل الكائن الإبداعي.

03:43.480 --> 03:46.700
لذا فإن أي طريقة داخل فصل القسم يمكنها

03:46.700 --> 03:49.770
الاستمرار في العمل مع الموظفين.

03:49.770 --> 03:52.570
لكن لا يمكنك الوصول إلى مثل هذا بعد الآن.

03:52.570 --> 03:54.710
هنا ترى أنني أتلقى خطأ الآن.

03:54.710 --> 03:57.280
إذا حاولت حفظ هذا ، أحصل على خطأ تجميع

03:57.280 --> 03:59.870
مفاده أن خاصية "الموظفون" خاصة ولا يمكن

03:59.870 --> 04:03.550
الوصول إليها إلا من خلال "قسم" الفصل الدراسي.

04:03.550 --> 04:07.100
لذلك نحن الآن نفرض أنه عند إضافة موظفين إلى

04:07.100 --> 04:09.370
هذا القسم ، يتعين على الأشخاص

04:09.370 --> 04:12.690
استخدام طريقة addEmployee.

04:12.690 --> 04:16.760
لأنهم يحصلون على خطأ إذا كتبوا رمزًا مثل هذا.

04:16.760 --> 04:20.460
هذا ما يسمى بالمعدِّل هنا ، الكلمة الأساسية الخاصة.

04:20.460 --> 04:23.470
وإلى جانب الخصوصية ، فقد أصبحنا عامًا أيضًا ، وهذا هو

04:23.470 --> 04:25.000
الافتراضي بالرغم من ذلك.

04:25.000 --> 04:26.590
لا تحتاج إلى إضافة عامة.

04:26.590 --> 04:29.590
لذا فإن الاسم مثل هذا هو بالضبط نفس

04:29.590 --> 04:31.650
الاسم مع عام أمامه.

04:31.650 --> 04:34.300
الفرق هو أن الممتلكات العامة يمكن

04:34.300 --> 04:36.350
الوصول إليها من الخارج.

04:36.350 --> 04:40.350
لذلك على سبيل المثال هنا ، يمكنني أيضًا الوصول إلى

04:40.350 --> 04:43.600
الاسم وتعيين اسم جديد هنا إذا أردت ذلك.

04:43.600 --> 04:45.260
هذا محتمل.

04:45.260 --> 04:49.270
بالنسبة للممتلكات الخاصة ، هذا غير ممكن هنا.

04:49.270 --> 04:51.580
لا يمكننا استخدامها إلا من الداخل.

04:51.580 --> 04:52.800
بالمناسبة ، من الناحية

04:52.800 --> 04:55.700
الفنية ، لا تعرف JavaScript العامة والخاصة.

04:55.700 --> 04:59.630
فقط في الإصدارات الحديثة جدًا التي تمت إضافتها مؤخرًا

04:59.630 --> 05:01.320
، يوجد مثل هذا الشيء.

05:01.320 --> 05:03.650
في الماضي ، لم يكن JavaScript يعرف

05:03.650 --> 05:05.690
الخصائص الخاصة أو العامة.

05:05.690 --> 05:08.520
كانت جميع الممتلكات دائمًا عامة هناك.

05:08.520 --> 05:10.630
تقدم TypeScript هذه الميزة

05:10.630 --> 05:13.561
، والتي بالطبع لا تعمل أثناء وقت التشغيل

05:13.561 --> 05:16.620
، لأن JavaScript حتى وقت قريب لم يكن يعرف

05:16.620 --> 05:18.780
سوى الخصائص العامة.

05:18.780 --> 05:21.290
لذلك هذا السطر هنا ، خطأ مجمّد أثناء

05:21.290 --> 05:23.130
تجميع TypeScript.

05:23.130 --> 05:27.000
إذا قمت بترجمته إلى JavaScript مع ذلك ، فسيستمر تنفيذ

05:27.000 --> 05:30.140
هذا الرمز في وقت التشغيل دون أخطاء لأنه مرة

05:30.140 --> 05:32.800
أخرى ، لم يكن JavaScript بمفرده يعرف

05:32.800 --> 05:34.900
هذا المفهوم حتى وقت قريب.

05:34.900 --> 05:37.350
بناءً على الإصدار الذي تقوم بتجميعه ، لا

05:37.350 --> 05:38.720
يزال يتعذر معرفته.

05:38.720 --> 05:40.770
وبالتالي ، يدعم TypeScript هذا

05:40.770 --> 05:42.980
فقط لأنه يتحقق منه أثناء الترجمة

05:42.980 --> 05:44.650
، وليس في وقت التشغيل.

05:44.650 --> 05:47.370
مع ذلك ، يمكننا تجنب كود مثل هذا وإجبار

05:47.370 --> 05:49.863
الجميع على كتابة كود أنظف.
