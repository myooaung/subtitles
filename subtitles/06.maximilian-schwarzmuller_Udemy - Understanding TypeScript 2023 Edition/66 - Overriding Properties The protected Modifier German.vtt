WEBVTT

00:02.210 --> 00:04.400
So, das sind die Grundlagen der Vererbung.

00:04.400 --> 00:06.900
Wir können auch Methoden oder Eigenschaften

00:06.900 --> 00:09.810
unserer Basisklasse außer Kraft setzen.

00:09.810 --> 00:13.350
Nehmen wir also an, ich möchte in der Buchhaltung meine eigene Methode

00:13.350 --> 00:15.020
addEmployee hinzufügen.

00:15.020 --> 00:16.200
Das können wir tun.

00:16.200 --> 00:18.500
Wir können hier unsere eigene Methode hinzufügen

00:18.500 --> 00:20.120
und den Namen hier erhalten.

00:20.120 --> 00:21.330
Sagen wir.

00:21.330 --> 00:22.550
Und jetzt, hier, möchte ich eine andere

00:22.550 --> 00:23.860
Logik haben, um das hinzuzufügen.

00:23.860 --> 00:27.610
Eine zusätzliche if-Prüfung oder eine if-Prüfung, wenn name=Max,

00:27.610 --> 00:29.410
na ja, dann will ich zurück, und

00:29.410 --> 00:31.930
nicht Max als Mitarbeiter hinzufügen, weil

00:31.930 --> 00:34.770
Max dafür völlig ungeeignet ist.

00:34.770 --> 00:36.360
Andernfalls, wenn der Name nicht Max ist,

00:36.360 --> 00:38.050
möchte ich den Mitarbeiter hinzufügen.

00:38.050 --> 00:40.420
Nun stehen wir aber vor einem anderen Problem.

00:40.420 --> 00:44.520
Wenn ich versuche, diese beiden Mitarbeiter hinzuzufügen, sehen wir,

00:44.520 --> 00:47.500
dass Mitarbeiter keine bekannte Eigenschaft ist.

00:47.500 --> 00:50.510
Der Grund dafür ist, dass Arbeitnehmer privat sind.

00:50.510 --> 00:51.890
Das ist sehr wichtig.

00:51.890 --> 00:54.860
Private Eigenschaften sind nur innerhalb der Klasse

00:54.860 --> 00:57.360
zugänglich, in der sie definiert sind, und

00:57.360 --> 01:00.670
nicht in Klassen, die von dieser Klasse erben.

01:00.670 --> 01:03.530
Mitarbeiter sind also innerhalb der Abteilung verfügbar, aber

01:03.530 --> 01:06.100
nicht in Klassen, die auf der Abteilung basieren.

01:06.100 --> 01:09.040
Die Buchhaltungsabteilung hat also keinen direkten Zugang

01:09.040 --> 01:11.320
zu den Immobilien der Mitarbeiter.

01:11.320 --> 01:15.930
Wenn wir diesen Zugriff gewähren und trotzdem sicherstellen wollen, dass es sich

01:15.930 --> 01:19.840
nicht um eine Eigenschaft handelt, die von außen geändert werden kann,

01:19.840 --> 01:22.080
können wir sie auf geschützt setzen.

01:22.080 --> 01:25.760
Protected ist wie private, aber im Gegensatz zu private ist es

01:25.760 --> 01:28.280
jetzt nicht nur in dieser Klasse verfügbar,

01:28.280 --> 01:32.040
sondern auch in jeder Klasse, die diese Klasse erweitert.

01:32.040 --> 01:35.130
Jetzt können wir also von unserer Buchhaltungsabteilung

01:35.130 --> 01:37.740
aus auf die Mitarbeiter zugreifen.

01:37.740 --> 01:41.377
Hier kann ich jetzt einen Mitarbeiter hinzufügen, wenn es nicht Max ist.

01:41.377 --> 01:43.980
Wenn ich also jetzt in meiner Buchhaltung

01:43.980 --> 01:45.680
einen Mitarbeiter mit dem

01:45.680 --> 01:49.240
Namen Max hinzufügen möchte, muss ich das tun.

01:49.240 --> 01:50.480
Dies sollte nicht funktionieren.

01:50.480 --> 01:52.790
Wenn ich versuche, Manu hinzuzufügen, sollte das funktionieren.

01:52.790 --> 01:57.110
Wenn wir das nun speichern und auch hier die Mitarbeiterinformationen ausgeben

01:57.110 --> 01:59.196
und dann speichern, sollten wir sehen,

01:59.196 --> 02:00.840
dass wir tatsächlich einen Mitarbeiter

02:00.840 --> 02:03.120
haben, nämlich Manu, denn aufgrund meiner

02:03.120 --> 02:06.620
eigenen Buchhaltungsmethodenlogik für AddEmployee wurde Max

02:06.620 --> 02:08.590
nicht hinzugefügt.

02:08.590 --> 02:10.017
Das Wichtigste ist also,

02:10.017 --> 02:14.010
dass Sie A) Methoden Ihrer Basisklasse überschreiben können.

02:14.010 --> 02:16.690
Sie können Ihre eigene Implementierung hinzufügen,

02:16.690 --> 02:18.690
und diese wird dann anstelle der Implementierung

02:18.690 --> 02:21.023
der Basisklasse verwendet.

02:21.023 --> 02:25.130
Und B) müssen Sie auch den Zugang zu geschützten

02:25.130 --> 02:28.100
Eigenschaften kontrollieren.

02:28.100 --> 02:29.690
Denn wenn Sie private verwenden,

02:29.690 --> 02:32.120
sind Sie wirklich auf diese Klasse beschränkt,

02:32.120 --> 02:36.400
während protected sie immer noch von außen unzugänglich macht, aber von innerhalb

02:36.400 --> 02:39.270
von Klassen, die die Basisklasse erweitern, zugänglich

02:39.270 --> 02:41.123
macht.
