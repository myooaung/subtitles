WEBVTT

00:02.130 --> 00:05.620
-: Para ello adjunto nuestro buen proyecto de inicio,

00:05.620 --> 00:08.470
ya inicié el servidor con NPM start.

00:08.470 --> 00:12.320
Y el proceso de vigilancia de TypeScript con TSC-W.

00:12.320 --> 00:14.870
Y lo primero que tenemos que configurar allí

00:14.870 --> 00:18.030
es en un archivo tsconfig, asegúrese de que su objetivo

00:18.030 --> 00:21.620
se establece en es6 y, a continuación, si se desplaza hacia abajo,

00:21.620 --> 00:24.230
asegúrese de que usted agrega esta línea de decorador

00:24.230 --> 00:26.720
experimental aquí.

00:26.720 --> 00:28.380
Y añade una coma delante de esto y entonces

00:28.380 --> 00:31.700
puedes Autoformatear para formatear todo esto correctamente.

00:31.700 --> 00:34.020
Esto es importante, de lo contrario no podrá utilizar

00:34.020 --> 00:36.000
los decoradores en su proyecto.

00:36.000 --> 00:37.250
Así que asegúrate de

00:37.250 --> 00:40.540
ajustar tu tsconfig. json adecuadamente.

00:40.540 --> 00:42.630
Y con eso podemos sumergirnos de lleno y escribir

00:42.630 --> 00:46.980
nuestro primer decorador aquí en la aplicación. ts file.

00:46.980 --> 00:50.950
Y quiero empezar con un decorador que podemos añadir a una clase.

00:50.950 --> 00:54.530
Ahora los decoradores en general son todos sobre las clases, pero

00:54.530 --> 00:55.363
este es un decorador

00:55.363 --> 00:58.220
que vamos a añadir a la clase en su conjunto.

00:58.220 --> 01:00.730
Para ello, digamos que tenemos una clase,

01:00.730 --> 01:04.360
Persona, una clase muy trivial, donde tenemos un nombre.

01:04.360 --> 01:07.530
Tal vez con un valor de Max, pre-inicializado aquí.

01:07.530 --> 01:10.520
Donde tenemos una función constructora donde acabo

01:10.520 --> 01:12.600
de registrar Crear el objeto persona,

01:12.600 --> 01:14.763
para que veamos que esto se ejecuta.

01:15.880 --> 01:19.363
Y luego, por supuesto, podemos crear una nueva persona aquí,

01:20.760 --> 01:22.910
con una nueva palabra clave, así.

01:22.910 --> 01:24.030
Y si queremos, podemos

01:24.030 --> 01:26.490
por supuesto registrar esta persona creada.

01:26.490 --> 01:28.330
Y esto no debería deparar sorpresas,

01:28.330 --> 01:29.430
si guardamos todo

01:29.430 --> 01:32.090
eso, se compila sin errores.

01:32.090 --> 01:33.700
Y si visitamos nuestra página

01:33.700 --> 01:36.670
entonces, en Localhost: 3000, en la consola de JavaScript,

01:36.670 --> 01:38.900
vemos Crear el objeto persona que viene

01:38.900 --> 01:41.140
del constructor.

01:41.140 --> 01:44.603
Y, por supuesto, todos vemos aquí a la propia Persona.

01:45.810 --> 01:49.550
Ahora bien, en este ejemplo no tenemos decoradores involucrados.

01:49.550 --> 01:51.000
Cambiemos esto.

01:51.000 --> 01:53.370
En la parte superior del archivo vamos a añadir un decorador.

01:53.370 --> 01:56.060
Y un decorador, y esto es realmente importante de entender,

01:56.060 --> 01:58.080
es al final sólo una función.

01:58.080 --> 02:01.280
Una función que se aplica a algo, por ejemplo, a una

02:01.280 --> 02:03.530
clase de una manera determinada.

02:03.530 --> 02:04.750
Así que vamos a crear

02:04.750 --> 02:09.523
una función aquí, con la palabra clave function, y la llamaré Logger.

02:10.390 --> 02:13.290
Ahora esto es una función, lo único especial aquí es

02:13.290 --> 02:15.570
que empiezo con un carácter mayúsculo.

02:15.570 --> 02:16.492
Esto no es una obligación

02:16.492 --> 02:20.200
por cierto, no tienes que usar un carácter de inicio en mayúscula,

02:20.200 --> 02:22.470
puedes usar uno en minúscula también, simplemente

02:22.470 --> 02:25.610
ves muchos decoradores por ahí en las bibliotecas que podrías

02:25.610 --> 02:27.680
usar que usan caracteres de inicio en

02:27.680 --> 02:30.030
mayúscula y por lo tanto, voy a hacer lo mismo

02:30.030 --> 02:32.200
aquí.

02:32.200 --> 02:35.450
Por lo tanto, la función Logger aquí es una función

02:35.450 --> 02:39.330
y podemos aplicar esto como un decorador como resultará.

02:39.330 --> 02:42.730
Ahora vamos a añadir un registro de la consola aquí, Logging, para que podamos

02:42.730 --> 02:44.730
ver cuando esta función se ejecuta.

02:44.730 --> 02:47.300
Porque no lo llamaré directamente.

02:47.300 --> 02:50.330
En su lugar quiero añadirlo como un decorador a esta clase.

02:50.330 --> 02:53.710
Y lo hacemos añadiendo un símbolo @ aquí delante

02:53.710 --> 02:57.370
de la clase y luego nuestra función aquí.

02:57.370 --> 02:58.440
Así.

02:58.440 --> 03:00.320
Ahora un par de cosas especiales aquí.

03:00.320 --> 03:03.780
El símbolo @ aquí es un identificador especial

03:03.780 --> 03:06.170
que TypeScript ve o reconoce.

03:06.170 --> 03:09.110
Y entonces lo que está directamente después del símbolo

03:09.110 --> 03:11.010
@ debe apuntar a una función.

03:11.010 --> 03:13.460
No ejecutarlo, sino señalarlo,

03:13.460 --> 03:15.800
que debería ser su decorador.

03:15.800 --> 03:17.400
Ahora bien, aquí se ve que Logger entonces

03:17.400 --> 03:20.650
acepta muy pocos argumentos para ser utilizado como un decorador aquí.

03:20.650 --> 03:23.010
Así que lo bueno es que TypeScript entiende que quiero

03:23.010 --> 03:24.930
usarlo como un decorador aquí.

03:24.930 --> 03:27.980
Lo malo es que no pasamos suficientes argumentos.

03:27.980 --> 03:31.000
Y efectivamente, los decoradores reciben argumentos.

03:31.000 --> 03:34.870
El número de argumentos depende de dónde se utilice el decorador.

03:34.870 --> 03:39.710
Aquí, para un decorador que añadimos a una clase obtenemos un argumento.

03:39.710 --> 03:42.910
Ese es el objetivo de este decorador por así decirlo,

03:42.910 --> 03:46.160
que es nuestra función constructora.

03:46.160 --> 03:49.020
Así que podemos decir que obtenemos una función

03:49.020 --> 03:51.240
aquí como argumento al final.

03:51.240 --> 03:54.110
También podemos llamarlo constructor, porque al final

03:54.110 --> 03:56.650
obtendremos nuestra función constructora de

03:56.650 --> 03:59.550
esta clase, o de cualquier clase a la que añadamos este

03:59.550 --> 04:01.470
decorador como argumento.

04:01.470 --> 04:06.310
Consolémonos también. Registrar que para que podamos obtener

04:06.310 --> 04:09.650
una idea de este argumento constructor aquí.

04:09.650 --> 04:10.550
Y guardemos esto.

04:10.550 --> 04:12.750
Y como veis compila sin errores.

04:12.750 --> 04:14.750
Y si ahora echamos un vistazo a nuestra salida,

04:14.750 --> 04:16.580
vemos el antiguo código de antes, pero también

04:16.580 --> 04:18.590
vemos la salida de Logging, y esta función constructora

04:18.590 --> 04:20.810
siendo registrada.

04:20.810 --> 04:22.760
Bueno, en realidad vemos toda la clase

04:22.760 --> 04:24.520
aquí, pero las clases al final son sólo

04:24.520 --> 04:27.670
un azúcar táctico sobre las funciones del constructor.

04:27.670 --> 04:31.450
Tenga en cuenta también que la salida de nuestro decorador,

04:31.450 --> 04:35.030
Logging, y esta clase o este registro de la función del constructor

04:35.030 --> 04:39.460
aquí se imprime primero, antes de que veamos Crear objeto persona y nuestro

04:39.460 --> 04:41.540
objeto Persona.

04:41.540 --> 04:44.360
Porque, efectivamente, los decoradores y eso es realmente

04:44.360 --> 04:48.430
importante, los decoradores se ejecutan cuando se define su clase.

04:48.430 --> 04:50.530
No cuando se instala.

04:50.530 --> 04:53.020
No necesitas instanciar tu clase en absoluto.

04:53.020 --> 04:55.760
Podríamos eliminar ese código para instanciar la clase,

04:55.760 --> 04:58.780
y seguiríamos obteniendo esa salida del decorador.

04:58.780 --> 05:02.210
Así que el decorador se ejecuta cuando JavaScript encuentra su

05:02.210 --> 05:05.660
definición de clase, su definición de función constructora.

05:05.660 --> 05:08.580
No cuando usas esa función constructora para

05:08.580 --> 05:10.070
instanciar un objeto.

05:10.070 --> 05:13.280
Es muy importante entenderlo.

05:13.280 --> 05:15.170
Así que este es nuestro primer decorador.

05:15.170 --> 05:16.670
Sin embargo, no es la única

05:16.670 --> 05:19.063
forma de crear un decorado.
