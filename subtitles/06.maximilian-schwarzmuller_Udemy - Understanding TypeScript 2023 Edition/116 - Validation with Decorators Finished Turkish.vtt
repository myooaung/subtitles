WEBVTT

00:02.320 --> 00:05.210
Eğitmen: Bunu uygulamak için öncelikle çalışmak

00:05.210 --> 00:08.217
istediğim depolamayı yapılandırmak istediğim

00:09.550 --> 00:12.680
bir ValidatorConfig arayüzü oluşturacağım.

00:12.680 --> 00:15.130
Buradaki fikrim birkaç özelliğe sahip olmak ve bu nedenle

00:15.130 --> 00:17.653
burada bu indeks tipi gösterimi kullanıyorum.

00:19.720 --> 00:21.450
Bunlar temel olarak değerin başka

00:21.450 --> 00:23.440
bir nesne olduğu dizelerdir.

00:23.440 --> 00:26.380
Çünkü buradaki temel olarak, bazı doğrulanmış özellikleri

00:26.380 --> 00:29.570
kaydetmek istediğimiz sınıf adı olacaktır.

00:29.570 --> 00:31.700
Ve sonra orada sakladığımız nesnede,

00:31.700 --> 00:34.580
sınıfın kendilerine eklenmiş doğrulayıcıları

00:34.580 --> 00:37.010
olan somut özelliklerine sahibiz.

00:37.010 --> 00:40.610
Burada validatable özelliğimiz var, eğer bu şekilde adlandırmak

00:40.610 --> 00:42.240
isterseniz, bu da bir dize

00:42.240 --> 00:44.660
anahtarı olacaktır.

00:44.660 --> 00:47.350
Ve sonra bunun değeri, temelde gerekli,

00:47.350 --> 00:50.010
pozitif ve benzeri gibi bir şeye sahip

00:52.420 --> 00:55.490
olduğumuz bir dizeler dizisi olmalıdır.

00:55.490 --> 00:57.460
Dolayısıyla buraya doğrulayıcıların bir listesi

00:57.460 --> 00:59.323
olarak böyle bir şey eklenebilir.

01:00.300 --> 01:05.300
Şimdi burada, başlangıçta boş bir nesne olan ValidatorConfig türünde olması gereken

01:05.790 --> 01:07.950
registeredValidators yapılandırmamızı

01:07.950 --> 01:09.640
oluşturabiliriz.

01:09.640 --> 01:11.500
Çünkü uygulama ilk başladığında üçüncü

01:11.500 --> 01:13.920
taraf kütüphanemiz yüklendiğinde henüz hiçbir

01:13.920 --> 01:16.293
doğrulayıcı kaydedilmemiştir.

01:17.640 --> 01:19.920
Direktörlerimizle birlikte bu

01:19.920 --> 01:23.490
kayıt defterine bir şeyler eklemek istiyoruz.

01:23.490 --> 01:28.020
Şimdi, bir özellik dekoratör fonksiyonunun iki argüman aldığını

01:28.020 --> 01:31.010
unutmayın: özelliğin üzerinde bulunduğu

01:31.010 --> 01:33.910
nesnenin prototipi olan hedef veya statik

01:33.910 --> 01:37.340
bir özellik olsaydı kurucu fonksiyon ve özellik

01:37.340 --> 01:39.300
adı.

01:39.300 --> 01:40.710
Burada aldığımız iki argüman

01:40.710 --> 01:44.370
bunlardır, özellikler için tanımlayıcı almayız.

01:44.370 --> 01:46.760
Şimdi kayıtlı doğrulayıcılarımıza gidebiliriz ve

01:46.760 --> 01:51.463
orada hedef için yeni bir giriş eklemek istiyorum. kurucu.

01:52.730 --> 01:56.070
Üzerinde çalıştığımız örneğin prototipinde, nesnemizi

01:56.070 --> 01:58.430
oluşturmak için kullanılan kurucu fonksiyona

01:58.430 --> 02:02.610
işaret eden bir kurucu anahtarı olacaktır.

02:02.610 --> 02:04.690
Bu nedenle, bu temel olarak buradaki

02:04.690 --> 02:06.120
kurs gibi bir şey olacaktır,

02:06.120 --> 02:08.460
böylece sonunda bu yapıcı işlevin adı bu

02:08.460 --> 02:10.560
yapıcıdan alınabilir.

02:10.560 --> 02:11.900
Yapıcı bir fonksiyon olduğundan,

02:11.900 --> 02:13.400
fonksiyon adını almak için JavaScript'teki

02:13.400 --> 02:15.900
herhangi bir fonksiyonda bulunan name özelliğini

02:15.900 --> 02:18.310
kullanabiliriz ve bu daha sonra örneğin buradaki

02:18.310 --> 02:20.620
kurs adı olacaktır.

02:20.620 --> 02:23.390
Şimdi sınıf adını kayıtlı doğrulayıcılarda bir anahtar

02:23.390 --> 02:25.030
olarak kaydediyoruz.

02:25.030 --> 02:28.130
Ve bunun için değer başka bir nesne olmalıdır.

02:28.130 --> 02:30.630
Bu yüzden bunu burada başka bir nesneye eşit olarak ayarladım.

02:30.630 --> 02:32.390
Ve bu nesnede ayrıca propName

02:32.390 --> 02:34.640
yani doğrulayıcıyı anahtar olarak

02:34.640 --> 02:37.400
eklemek istediğim özelliği kullandığım dinamik

02:37.400 --> 02:40.190
olarak atanmış bir özelliğim var.

02:40.190 --> 02:42.310
Şimdi buradaki değer dizilerden oluşan bir

02:42.310 --> 02:45.530
dizidir ve burada required öğesini bir dize olarak ekleyeceğim.

02:45.530 --> 02:47.920
Elbette bu çok naif bir doğrulayıcıdır.

02:47.920 --> 02:50.000
Bu özellik için zaten kayıtlı başka doğrulayıcılarımız

02:50.000 --> 02:52.830
olsaydı, şimdi burada üzerine yazardım.

02:52.830 --> 02:54.900
Bu nedenle, önce mevcut doğrulayıcıları

02:54.900 --> 02:58.360
almak ve ardından bunları bu diziye kopyalamak ve yalnızca mevcut

02:58.360 --> 03:01.320
diziye gerekli olanları eklemek daha iyi olacaktır.

03:01.320 --> 03:02.870
Yine, burada biraz zaman kazanmak

03:02.870 --> 03:04.740
ve sadece genel fikri göstermek için, burada

03:04.740 --> 03:06.873
bu daha naif yaklaşıma sahip olacağım.

03:07.980 --> 03:11.180
Bununla birlikte, gerekli ek açıklamayı aldık, şimdi

03:11.180 --> 03:14.690
pozitif sayı ek açıklaması üzerinde çalışalım.

03:14.690 --> 03:16.730
Ve tabii ki, bu temelde aynı şey.

03:16.730 --> 03:21.410
Bu kodu kopyalıyorum ancak bunu burada pozitif veya kullanmak istediğiniz herhangi

03:21.410 --> 03:23.600
bir tanımlayıcı olarak ayarlıyorum ve

03:23.600 --> 03:25.010
elbette doğru argümanları

03:25.010 --> 03:27.650
kabul ettiğimizden emin olmalıyız.

03:27.650 --> 03:30.990
Böylece, şimdiye kadar eklediklerimizle birlikte,

03:30.990 --> 03:34.420
bu sınıf tanımlandığında bu özellikleri ve doğrulayıcılarını

03:34.420 --> 03:38.640
global yapılandırmamıza kaydederiz.

03:38.640 --> 03:41.460
Şimdi validate fonksiyonu üzerinde çalışmamız gerekiyor.

03:41.460 --> 03:43.400
validate fonksiyonu tüm kayıtlı doğrulayıcıları

03:43.400 --> 03:46.240
gözden geçirmeli ve ardından temel olarak bulduğu

03:46.240 --> 03:50.340
doğrulayıcılara göre farklı mantık çalıştırmalıdır.

03:50.340 --> 03:54.857
Bu yüzden burada öncelikle ele aldığımız somut nesnenin yapılandırmasını

03:54.857 --> 03:57.600
almak istiyorum.

03:57.600 --> 04:00.390
Bunun için nesnenin hangi kurucu fonksiyona dayandığını

04:00.390 --> 04:04.277
bulmamız ve ardından bu nesne için ayarladığımız doğrulama yapılandırmasını

04:04.277 --> 04:07.040
veya özellik doğrulayıcı eşlemelerini buradan almamız

04:07.040 --> 04:09.070
gerekir.

04:09.070 --> 04:11.960
Burada bu nesneye validators ya da objValidatorConfig

04:11.960 --> 04:14.520
adını vereceğim.

04:14.520 --> 04:17.110
Ve burada kayıtlı doğrulayıcılara ulaşıyoruz ve obj olması

04:17.110 --> 04:22.110
gereken bir özelliğe erişiyoruz. kurucu. adı, daha önce olduğu gibi aynı

04:23.900 --> 04:27.060
mantık, nesnenin prototipinde bulunan yapıcı özelliğine

04:27.060 --> 04:28.980
erişiyoruz ve bu nedenle JavaScript'in

04:28.980 --> 04:33.340
çalışma şekli sayesinde doğrudan nesneye erişebiliyoruz ve prototip zinciri

04:33.340 --> 04:36.710
sayesinde, yapıcı özelliğini nesnenin kendisinde bulamazsak

04:36.710 --> 04:41.580
prototipe ulaşacağız ve bu işe yarayacaktır.

04:41.580 --> 04:43.840
Bu nedenle şimdi yapıcı adını aldık

04:43.840 --> 04:46.970
ve örneğin buradaki Course'un bu Course sınıfına

04:46.970 --> 04:49.050
dayandığını öğrendik.

04:49.050 --> 04:51.290
Bu yüzden Course sınıfı için sahip olduğumuz tüm doğrulayıcı

04:51.290 --> 04:52.800
yapılandırmalarına bakarız.

04:52.800 --> 04:55.910
Şimdi temel olarak bu nesneye bakıyoruz.

04:55.910 --> 04:58.207
Bu artık objValidatorConfig içinde.

04:59.310 --> 05:01.540
Elbette, hiçbir şeyin kaydedilmediği

05:01.540 --> 05:03.270
nesnemizi doğrulamaya çalışıyorsak

05:03.270 --> 05:05.110
bunu bulamayabiliriz.

05:05.110 --> 05:08.270
Yani herhangi bir doğrulayıcı yapılandırmamız yoksa, orada

05:08.270 --> 05:11.640
bir şey bulamazsak, true döndürmek istiyorum çünkü o zaman bu

05:11.640 --> 05:14.010
kesinlikle geçerlidir, değil mi?

05:14.010 --> 05:15.330
Doğrulanacak bir şey yoktur,

05:15.330 --> 05:18.350
bu nedenle nesne kesinlikle geçerlidir.

05:18.350 --> 05:20.900
Aksi takdirde, eğer onu bulursak, buradaki

05:20.900 --> 05:24.910
iç nesne boyunca bir for in döngüsü ile döngü yapmasını istiyorum.

05:24.910 --> 05:27.580
Böylece objValidatorConfig içinde const

05:27.580 --> 05:29.560
prop ile doğrulayıcıları kaydettiğim

05:29.560 --> 05:33.007
özelliklerim arasında döngü oluşturuyorum.

05:34.380 --> 05:36.950
Bu bana, daha sonra doğrulayıcılara sahip olabileceğimiz

05:36.950 --> 05:39.630
tüm özellik adlarına erişim sağlar.

05:39.630 --> 05:41.180
Şimdi elbette bir özellik için sahip olabileceğimiz

05:41.180 --> 05:43.970
tüm doğrulayıcıları gözden geçirmem gerekiyor.

05:43.970 --> 05:45.230
Sadece bir doğrulayıcı eklenmiş

05:45.230 --> 05:47.680
olsa bile bu her zaman bir dizi olmalıdır.

05:47.680 --> 05:49.530
Şimdi burada bir for of döngüsü

05:49.530 --> 05:53.040
kullanabilir ve verilen bu özellik için objValidatorConfig

05:53.040 --> 05:56.930
için sahip olduğumuz somut doğrulayıcıyı alabiliriz.

05:56.930 --> 06:00.560
Şimdi pozitif veya gerekli gibi şeyler alıyoruz ve bunlar

06:00.560 --> 06:02.963
validator sabitinde saklanıyor.

06:04.080 --> 06:06.110
Ve sonra burada bir switch deyimimiz olabilir veya

06:06.110 --> 06:08.030
elbette hangi doğrulayıcıyı bulduğumuza bağlı

06:08.030 --> 06:09.810
olarak harici işlevleri çağırabiliriz.

06:09.810 --> 06:12.130
Ancak burada yerleşik bir switch deyimi kullanacağım,

06:12.130 --> 06:16.620
doğrulayıcıyı açacağım ve temelde farklı durumlara sahip olacağım.

06:16.620 --> 06:19.683
Örneğin, buradaki gerekli durum.

06:20.800 --> 06:22.163
Whoops, bunun gibi.

06:23.470 --> 06:27.900
Burada, eğer baktığımız mülkümüz... ise true değerini döndürmek

06:27.900 --> 06:28.950
istiyorum.

06:28.950 --> 06:33.260
Dolayısıyla, bu nesne üzerindeki bu özellik boş olmayan bir değere sahiptir.

06:33.260 --> 06:38.260
Yani nesne prop doğruysa true değerini döndüreceğim.

06:39.170 --> 06:42.010
Ve bunu gerçek bir doğru veya yanlış değere dönüştürmek için

06:42.010 --> 06:44.420
double bang operatörünü kullanabiliriz.

06:44.420 --> 06:46.840
Şimdi, nesnenin bu özelliğe sahip olup olmadığını bilmediğine

06:46.840 --> 06:49.440
dair şikayetler duyuyorum, bu yüzden burada bu ekstra esnekliği

06:49.440 --> 06:51.220
elde etmek için aslında bunu herhangi bir

06:51.220 --> 06:53.560
olarak değiştirmeliyiz.

06:53.560 --> 06:56.150
Elbette buradaki tipler üzerinde de çalışabilirsiniz.

06:56.150 --> 07:00.480
Örneğin, buradaki tanımlayıcılarınızı Enum'larla çalıştığınız açıkça

07:00.480 --> 07:03.430
tanımlanmış türlere dönüştürün ve belki de buradaki

07:03.430 --> 07:05.490
yazımı iyileştirin.

07:05.490 --> 07:07.420
Dürüst olmak gerekirse, bunun herhangi bir nesneyle

07:07.420 --> 07:09.960
çalışmasını istediğim için, bunu TypeScript'in hoşuna gidecek

07:09.960 --> 07:11.810
şekilde geliştirmek zor.

07:11.810 --> 07:13.330
Jenerik tiplerle çalışabiliriz

07:13.330 --> 07:16.800
ancak o zaman da kendimizi jenerik tiplerin hangi nesneleri

07:16.800 --> 07:19.740
genişletmesi ve kabul etmesi gerektiği konusunda

07:19.740 --> 07:22.110
kısıtlamamız gerekir.

07:22.110 --> 07:25.850
Dolayısıyla, burada gerçekten esnek olmak ve bu doğrulama işlevinde

07:25.850 --> 07:27.880
birçok farklı nesneyi kabul etmek için

07:27.880 --> 07:30.640
herhangi biri en iyi seçeneğimiz olabilir.

07:30.640 --> 07:32.270
Şimdi switch segmentine geri

07:32.270 --> 07:34.750
dönelim, gerekli durum olası bir durumdur, ayrıca

07:34.750 --> 07:37.650
ele almak istediğimiz olumlu durum da vardır.

07:37.650 --> 07:39.280
Ve orada, baktığımız özellik

07:39.280 --> 07:43.770
sıfırdan büyükse true değerini döndürmek istiyorum.

07:43.770 --> 07:47.260
Dolayısıyla, nesne prop sıfırdan büyükse, bu true

07:47.260 --> 07:50.463
döndürür, aksi takdirde bu false döndürür.

07:52.890 --> 07:55.730
Şimdi, bu for bloğuna girmezsek ya da herhangi bir

07:55.730 --> 07:57.970
doğrulayıcı kaydetmediğimiz için bir

07:57.970 --> 07:59.310
şekilde hiçbir şey üzerinden

07:59.310 --> 08:01.500
dönmeyen bir döngümüz varsa, buraya

08:01.500 --> 08:04.130
boş bir dizi ya da başka bir şey geçirdik, bu yüzden

08:04.130 --> 08:06.350
bu for döngüsünü geçerseniz, varsayılan

08:06.350 --> 08:10.280
olarak true değerini de döndüreceğim.

08:10.280 --> 08:12.800
Ve şimdi her koşulda bir şey döndürüyoruz ve doğrulamayı

08:12.800 --> 08:14.503
kullanabiliyoruz.

08:15.450 --> 08:19.253
Bununla birlikte, çalışıp çalışmadığını görelim, şimdi bunu kaydedersek ve uygulamamızı

08:23.610 --> 08:26.330
burada yeniden yüklersek ve bunu göndermeye çalışırsam bir

08:26.330 --> 08:29.400
hata alırız, geçersiz girdi lütfen tekrar deneyin.

08:29.400 --> 08:30.780
Buraya bir metin girersem:

08:30.780 --> 08:34.793
JavaScript The Complete Guide, yine de numaram yanlış olduğu

08:35.940 --> 08:38.100
için bunu alıyorum.

08:38.100 --> 08:40.440
Buraya eksi bir girersem bunu da elde ederiz

08:40.440 --> 08:42.020
çünkü bu pozitif değildir.

08:42.020 --> 08:45.020
Ancak pozitif bir sayı girersem çalışıyor.

08:45.020 --> 08:48.230
Pozitif bir sayıya sahipsem ancak ilk alan boşsa, bu

08:48.230 --> 08:49.860
da çalışır, bu yüzden üzerinde

08:49.860 --> 08:52.190
çalışmamız gereken bir şey.

08:52.190 --> 08:54.600
O zaman sorunun ne olduğunu bulalım.

08:54.600 --> 08:57.380
Ve bunu öğrenmek için aslında buraya küçük bir konsol günlüğü

08:57.380 --> 09:00.720
ekleyeceğim ve baktığımız özelliği günlüğe kaydedeceğim.

09:00.720 --> 09:02.340
Elbette kırılma noktalarını ve geliştirici

09:02.340 --> 09:03.513
araçlarını da kullanabiliriz.

09:04.820 --> 09:07.410
Şimdi burada kaydet'e tıklarsam, burada onaylanan

09:07.410 --> 09:09.250
ilk şeyin fiyat olduğunu görürsünüz

09:09.250 --> 09:10.623
ve bundan sonra dururuz.

09:11.530 --> 09:15.100
Yani fiyat, onaylanan ilk özelliktir.

09:15.100 --> 09:16.980
Ve buradaki ilginç şey de bu, fiyat

09:16.980 --> 09:20.090
aslında burada önemli olan tek özellik çünkü geçerli

09:20.090 --> 09:22.230
olarak geri dönüyoruz.

09:22.230 --> 09:25.840
Bu, doğru veya yanlış döndüren herhangi bir doğrulayıcı bulduğumuzda

09:25.840 --> 09:29.050
hemen geri döneceğimiz ve diğer doğrulayıcıları önemsemeyeceğimiz

09:29.050 --> 09:31.480
anlamına gelir.

09:31.480 --> 09:33.320
Şimdi yanlış durumunda bu sorun

09:33.320 --> 09:35.360
değil çünkü bir öğe yanlışsa, bir

09:35.360 --> 09:37.450
özellik yanlışsa, geçersizse, o

09:37.450 --> 09:40.140
zaman diğerlerine bakmasak da olur.

09:40.140 --> 09:42.590
Ancak gerçek vaka için bu bir sorun.

09:42.590 --> 09:44.970
Eğer bir mülk beklentilerimizi karşıladığı

09:44.970 --> 09:49.410
ilk seferde doğru sonuca ulaşırsak, bir sorunumuz var demektir.

09:49.410 --> 09:51.540
Bu nedenle, burada başlangıçta true olan

09:51.540 --> 09:55.130
bir isValid özelliğine sahip olarak bunu geliştirmeliyiz.

09:55.130 --> 09:56.780
Yani geçerli bir değişken.

09:56.780 --> 10:01.780
Ve burada isValid öğesini isValid öğesine eşit olarak ayarlıyoruz

10:03.857 --> 10:08.857
ve burada da aynı şekilde bunu buna eşit olarak ayarlıyoruz.

10:09.570 --> 10:11.290
Böylece hemen geri dönmeyiz,

10:11.290 --> 10:14.750
bunun yerine sadece isValid'i güncelleriz ve bundan sonra

10:14.750 --> 10:16.700
düşmemek için ara veririz.

10:16.700 --> 10:19.200
Bunun sonucunda, tüm bu döngülerden sonra

10:19.200 --> 10:22.710
isValid değeri hala true olur, ancak JavaScript'in çalışma

10:22.710 --> 10:25.710
şekli sayesinde buradaki kontrollerden biri false

10:25.710 --> 10:27.530
olduğunda, true değeri false ile

10:27.530 --> 10:29.670
birleştiğinde false değeri döneceğinden

10:29.670 --> 10:33.000
toplam isValid değeri false olur.

10:33.000 --> 10:36.020
Ve sonra aşağıda isValid döndürmeliyiz.

10:36.020 --> 10:39.330
Şimdi JavaScript'in sadece ilk baktığı özelliğin değil, tüm

10:39.330 --> 10:42.433
özelliklerin kontrol edildiğinden emin oluyoruz.

10:43.320 --> 10:45.460
Ancak bu bizim tek sorunumuz olmayacak,

10:45.460 --> 10:47.750
doğrulayıcı mantığımızı nasıl kaydettiğimize

10:47.750 --> 10:50.480
baktığımızda da burada bir sorunumuz var.

10:50.480 --> 10:53.720
Belirli bir sınıf adı için kayıtlı doğrulayıcıların

10:53.720 --> 10:57.130
üzerine her zaman yeni bir nesne yazarım.

10:57.130 --> 11:00.050
Bunun yerine, bunu yapmamak için mevcut doğrulayıcıları

11:00.050 --> 11:01.630
buraya eklemeliyiz.

11:01.630 --> 11:04.140
Örneğin, kayıtlı doğrulayıcılarda bu

11:04.140 --> 11:08.130
sınıf adı için mevcut anahtar değer çiftlerini almak ve bizimkini

11:08.130 --> 11:10.870
eklemeden önce bunu eklemek için bunun gibi

11:10.870 --> 11:14.413
yayma operatörümüz var, tabii ki orada da.

11:16.890 --> 11:18.733
Ve şimdi bununla birlikte, bunu kaydedersek

11:19.650 --> 11:21.980
ve buradaki uygulamamıza geri dönersek.

11:21.980 --> 11:24.150
Eğer ikisi de boşsa, başarısız oluruz.

11:24.150 --> 11:26.280
Geçerli bir fiyat girersek ancak geçersiz

11:26.280 --> 11:28.490
bir başlığımız varsa, başarısız oluruz.

11:28.490 --> 11:31.510
Her ikisi de geçerliyse, başarılı oluruz.

11:31.510 --> 11:35.570
Geçerli bir unvanımız varsa ancak fiyatımız yoksa başarısız oluruz.

11:35.570 --> 11:37.230
Ayrıca negatif bir fiyatla.

11:37.230 --> 11:39.170
Bu nedenle, bu bana şimdi iyi görünüyor

11:39.170 --> 11:42.280
ve bu artık TypeScript dekoratörlerinin yardımıyla böyle

11:42.280 --> 11:44.500
bir doğrulayıcının nasıl çalışabileceğine

11:44.500 --> 11:46.670
dair ilk naif uygulamamız.

11:46.670 --> 11:49.150
Buradaki tüm dekoratörlerin, validate

11:49.150 --> 11:52.310
fonksiyonunun ve kayıt defterinin sizden gizleneceğini

11:52.310 --> 11:53.590
unutmayın.

11:53.590 --> 11:55.820
Bu, üzerinde çalıştığınız üçüncü taraf bir kütüphanenin

11:55.820 --> 11:56.780
bir parçası olabilir,

11:56.780 --> 11:59.250
tabii ki muhtemelen son kullanıcılarınızla paylaştığınızdan

11:59.250 --> 12:01.300
daha ayrıntılı bir şekilde.

12:01.300 --> 12:04.160
Siz de son kullanıcı olarak bunları içe aktarır, bu dekoratörleri

12:04.160 --> 12:06.800
ekler ve validate'i çağırırsınız; böylece sınıflarınıza

12:06.800 --> 12:08.840
doğrulama eklemek için çok kullanışlı

12:08.840 --> 12:11.763
bir yol elde etmiş olursunuz.
