WEBVTT

00:02.220 --> 00:03.760
Instrutor: O último tipo interessante

00:03.760 --> 00:07.490
que eu quero mostrar neste módulo é o tipo nunca.

00:07.490 --> 00:10.660
Agora vimos uma função que retornou vazia.

00:10.660 --> 00:13.058
Para que nunca devolva nada.

00:13.058 --> 00:17.380
Nunca é possível retornar funções de outro tipo.

00:17.380 --> 00:19.240
E isso pode soar estranho.

00:19.240 --> 00:21.110
Vamos dar uma olhada em como funciona.

00:21.110 --> 00:24.662
Digamos que temos uma função generateError.

00:24.662 --> 00:28.280
Aqui eu espero receber uma mensagem, que é uma string, e talvez

00:28.280 --> 00:31.610
algum código de erro, que pode ser um número.

00:31.610 --> 00:33.700
Agora, dentro destas funções, digamos,

00:33.700 --> 00:35.130
lançamos um erro.

00:35.130 --> 00:37.760
Portanto, esta deve ser essencialmente

00:37.760 --> 00:41.500
uma função utilitária que gera objetos de erro e os atira.

00:41.500 --> 00:42.990
Portanto, aqui podemos lançar um objeto,

00:42.990 --> 00:44.380
o que podemos fazer em JavaScript.

00:44.380 --> 00:47.366
Podemos jogar qualquer objeto ou qualquer valor como

00:47.366 --> 00:49.930
um erro, e isso deve ter uma propriedade de mensagem,

00:49.930 --> 00:53.990
na qual eu guardo aqui o valor do argumento da minha mensagem.

00:53.990 --> 00:56.390
E eu quero ter uma propriedade de código de erro,

00:56.390 --> 00:59.417
digamos apagar a palavra, o argumento do código em .

01:00.330 --> 01:02.390
Assim é com a função inválida,

01:02.390 --> 01:06.600
e podemos chamar isso com um erro ocorrido, por exemplo,

01:06.600 --> 01:09.640
e um código de 500.

01:09.640 --> 01:12.213
Se fizermos isso, e compilarmos este arquivo aqui, vemos

01:14.120 --> 01:17.080
que, uma vez que este recarregamento é recarregado, recebemos

01:17.080 --> 01:19.150
nosso erro, bem como um erro aqui.

01:19.150 --> 01:21.670
E isto pode parecer bastante abstrato, mas,

01:21.670 --> 01:22.850
na verdade, não é.

01:22.850 --> 01:24.640
Ter funções de utilidade como esta

01:24.640 --> 01:27.850
seria bastante padrão em aplicações maiores onde você não quer

01:27.850 --> 01:30.270
lançar manualmente um erro em 10 lugares diferentes

01:30.270 --> 01:32.540
de sua aplicação, e onde você quer alcançar

01:32.540 --> 01:35.380
uma função conveniente que constrói o objeto de erro

01:35.380 --> 01:37.450
para você e talvez também o lança imediatamente,

01:37.450 --> 01:39.350
de modo que você pode chamar esta função

01:39.350 --> 01:42.300
com entradas diferentes, mas você sempre tem um erro sendo

01:42.300 --> 01:44.690
lançado.

01:44.690 --> 01:47.010
Agora, o interessante desta função é que

01:47.010 --> 01:49.048
ela não retorna apenas vazia.

01:49.048 --> 01:52.385
Na verdade, posso especificar que ela retorna

01:52.385 --> 01:54.545
vazia, porque é claro que não retorna

01:54.545 --> 01:58.030
nada, mas na verdade não retorna apenas nada, se formos

01:58.030 --> 02:02.630
totalmente honestos, esta função nunca retorna.

02:02.630 --> 02:05.518
Esta função nunca produz um valor de retorno.

02:05.518 --> 02:08.860
Se eu tentasse restaurar o valor de retorno aqui, em

02:08.860 --> 02:11.193
um resultado de log de console, e depois

02:12.040 --> 02:16.240
compilasse meu código nesta execução, vemos que não há nenhuma

02:16.240 --> 02:19.630
indefinição sendo registrada aqui, porque como um

02:19.630 --> 02:22.220
erro é lançado, isto essencialmente trava

02:22.220 --> 02:25.330
nosso script, pode-se dizer.

02:25.330 --> 02:27.080
Ele cancela nosso roteiro.

02:27.080 --> 02:30.290
E este será sempre o caso para esta função.

02:30.290 --> 02:32.210
É claro que podemos embrulhá-lo na tentativa

02:32.210 --> 02:34.260
de captura para que ainda possamos continuar

02:34.260 --> 02:37.620
neste roteiro, mas esta função essencialmente nunca produz um valor.

02:37.620 --> 02:41.060
Esta função sempre trava o roteiro ou esta parte

02:41.060 --> 02:42.910
do roteiro, se você estiver

02:42.910 --> 02:44.720
usando tentar pegar, e

02:44.720 --> 02:47.910
portanto nunca devolve nada.

02:47.910 --> 02:50.400
E, portanto, o tipo de retorno desta

02:50.400 --> 02:54.483
função na verdade não é apenas nulo, mas também nunca.

02:55.710 --> 02:56.700
Agora o interessante

02:56.700 --> 02:59.060
é que, se você pairar sobre ele sem atribuir

02:59.060 --> 03:01.680
nunca, você vê que o tipo inferido é nulo.

03:01.680 --> 03:05.410
Tudo isso porque nunca é um tipo mais novo, já existe há algum

03:05.410 --> 03:07.060
tempo, mas não foi incorporado

03:07.060 --> 03:10.000
nas primeiras versões do TypeScript, e, portanto,

03:10.000 --> 03:12.620
normalmente assume-se que é nulo, e não é

03:12.620 --> 03:15.417
horrível deixá-lo assim.

03:15.417 --> 03:17.740
Mas você pode ser muito claro e definir

03:17.740 --> 03:21.470
explicitamente nunca como o tipo de devolução para deixar

03:21.470 --> 03:24.490
realmente claro que isto nunca devolve nada.

03:24.490 --> 03:26.770
Portanto, de uma perspectiva de qualidade

03:26.770 --> 03:29.560
de código, isto pode ser mais claro em relação às

03:29.560 --> 03:30.680
suas intenções e deixar

03:30.680 --> 03:32.330
realmente claro para nossos

03:32.330 --> 03:35.850
desenvolvedores que esta função não pretende devolver nada,

03:35.850 --> 03:39.560
e essencialmente quebrar ou quebrar seu script, ou aquela parte

03:39.560 --> 03:40.954
do script.

03:40.954 --> 03:43.890
Outra função que, a propósito, nunca retornaria

03:43.890 --> 03:47.190
seria uma função com um loop infinito.

03:47.190 --> 03:49.370
Portanto, se tivermos enquanto (verdadeiro)

03:49.370 --> 03:51.060
lá dentro, isso cria um loop infinito

03:51.060 --> 03:52.790
e, portanto, também seria uma função

03:52.790 --> 03:54.410
que nunca retornaria.

03:54.410 --> 03:56.070
A função de erro aqui, ou a função

03:56.070 --> 03:58.852
que gera um erro congelado provavelmente é o caso

03:58.852 --> 04:01.305
mais comum de uso, no entanto.

04:01.305 --> 04:04.500
Portanto, nunca, também um tipo interessante,

04:04.500 --> 04:06.230
que você pode usar em funções

04:06.230 --> 04:08.553
para casos como este aqui.
