WEBVTT

1
00:00:02.050 --> 00:00:04.090
<v Instructor>So which disadvantage do we have?</v>

2
00:00:04.090 --> 00:00:06.030
This is the project we worked on,

3
00:00:06.030 --> 00:00:08.020
split up into multiple files

4
00:00:08.020 --> 00:00:12.390
using these ES6 module imports here.

5
00:00:12.390 --> 00:00:15.620
Now, lets actutally built this project

6
00:00:15.620 --> 00:00:18.400
and for that, as we did before,

7
00:00:18.400 --> 00:00:21.930
we can run npm-start to bring up the lite-server.

8
00:00:21.930 --> 00:00:24.710
And of course, very important in a new tab,

9
00:00:24.710 --> 00:00:26.367
all the run tsc-dash

10
00:00:27.820 --> 00:00:31.430
to start up TypeScript compilation in watch mode.

11
00:00:31.430 --> 00:00:35.590
This gives us our project and if we now open the Network tab

12
00:00:35.590 --> 00:00:39.570
in the browser developer tools and we reload this file,

13
00:00:39.570 --> 00:00:42.360
we will see the disadvantage we have here

14
00:00:42.360 --> 00:00:44.840
or the problem we have with this setup.

15
00:00:44.840 --> 00:00:47.490
We see a bunch of HTTP requests.

16
00:00:47.490 --> 00:00:49.160
Now you can ignore the last ones here

17
00:00:49.160 --> 00:00:51.380
these are coming from our development server.

18
00:00:51.380 --> 00:00:54.720
But all these our requests here to app.js,

19
00:00:54.720 --> 00:00:58.290
project-input.js, project-list.js, base-component.js

20
00:00:58.290 --> 00:01:00.960
and on that's the problem.

21
00:01:00.960 --> 00:01:04.610
You'll notice that all these files are not that large,

22
00:01:04.610 --> 00:01:06.320
they're relatively small.

23
00:01:06.320 --> 00:01:07.590
So that of course is fine

24
00:01:07.590 --> 00:01:11.010
but we have a lot of HTTP requests here.

25
00:01:11.010 --> 00:01:12.600
Now what's the problem with that?

26
00:01:12.600 --> 00:01:15.070
The problem with that can be seen if we have a look

27
00:01:15.070 --> 00:01:17.810
at that waterfall here on the right.

28
00:01:17.810 --> 00:01:20.330
Every HTTP request that needs to be made

29
00:01:20.330 --> 00:01:22.470
of course takes a little time.

30
00:01:22.470 --> 00:01:24.480
It takes time to download the files

31
00:01:24.480 --> 00:01:27.760
but since they're not that big, that's not a issue.

32
00:01:27.760 --> 00:01:31.390
But every HTTP request has like a base overhead,

33
00:01:31.390 --> 00:01:34.540
a base duration it always takes.

34
00:01:34.540 --> 00:01:38.570
This little box you see in front of these graphs here.

35
00:01:38.570 --> 00:01:41.250
That's near the time it requires the browser

36
00:01:41.250 --> 00:01:43.910
to set up that request and send it.

37
00:01:43.910 --> 00:01:46.280
So whilst the actual downloading of the file

38
00:01:46.280 --> 00:01:49.600
might be relatively fast, setting up the request,

39
00:01:49.600 --> 00:01:52.860
doing the work on the server, which serves the file and on

40
00:01:52.860 --> 00:01:55.310
that all takes some time.

41
00:01:55.310 --> 00:01:57.890
And now here we have a very fast setup

42
00:01:57.890 --> 00:02:00.310
because it's all happening on our machine.

43
00:02:00.310 --> 00:02:03.020
We got a local development server ofterall.

44
00:02:03.020 --> 00:02:06.160
If you deploy that to the web, having that many requests

45
00:02:06.160 --> 00:02:08.690
can really introduce a lot of latency

46
00:02:08.690 --> 00:02:11.140
and slow down your project just because

47
00:02:11.140 --> 00:02:14.760
of the sheer amount of HTTP requests made.

48
00:02:14.760 --> 00:02:17.280
So if we can find a solution to reduce

49
00:02:17.280 --> 00:02:21.370
that amount of HTTP requests, that would be amazing.

50
00:02:21.370 --> 00:02:24.020
And that's where webpack comes into play.

51
00:02:24.020 --> 00:02:28.190
You can go to webpack.js.org, to learn more about it.

52
00:02:28.190 --> 00:02:30.290
In the end webpack is a tool

53
00:02:30.290 --> 00:02:33.750
that will help us bundle our files together.

54
00:02:33.750 --> 00:02:36.530
And I can really recommend their extensive

55
00:02:36.530 --> 00:02:39.980
and comprehensive documentation you find on their page.

56
00:02:39.980 --> 00:02:42.300
If you wanna learn all about webpack.

57
00:02:42.300 --> 00:02:44.820
In this course, we'll use some selected features

58
00:02:44.820 --> 00:02:46.563
that help us with TypeScript.

59
00:02:47.560 --> 00:02:49.850
So what exactly is webpack?

60
00:02:49.850 --> 00:02:53.850
It's a bundling, and you could say build orchestration tool.

61
00:02:53.850 --> 00:02:56.190
It's a tool that helps us reduce the amount

62
00:02:56.190 --> 00:02:59.560
of HTTP requests by bundling code together.

63
00:02:59.560 --> 00:03:03.010
So that we write code split up across multiple files

64
00:03:03.010 --> 00:03:05.390
but webpack then takes all these files

65
00:03:05.390 --> 00:03:07.050
and bundles them together.

66
00:03:07.050 --> 00:03:10.050
And in addition webpack is capable of doing more.

67
00:03:10.050 --> 00:03:13.920
It will also optimize our code and it also allows us

68
00:03:13.920 --> 00:03:17.760
to add more build steps, more build tools, for example,

69
00:03:17.760 --> 00:03:20.410
to help us with CSS files and so on.

70
00:03:20.410 --> 00:03:23.180
That's not what we'll have a look at in this module though,

71
00:03:23.180 --> 00:03:26.220
because I wanna focus on webpack and TypeScript.

72
00:03:26.220 --> 00:03:28.710
So let's first of all have a look at our normal setup

73
00:03:28.710 --> 00:03:30.700
where we don't use webpack.

74
00:03:30.700 --> 00:03:32.800
There we have multiple TypeScript files

75
00:03:32.800 --> 00:03:34.870
but if we then use these imports,

76
00:03:34.870 --> 00:03:36.920
we get multiple HTTP requests,

77
00:03:36.920 --> 00:03:40.220
which is not that great for the reasons I mentioned.

78
00:03:40.220 --> 00:03:43.450
In addition, a topic I haven't had a look at before

79
00:03:43.450 --> 00:03:47.670
is we also very likely have unoptimized code,

80
00:03:47.670 --> 00:03:51.290
which means it's not as small as possible.

81
00:03:51.290 --> 00:03:53.330
We can certainly optimize code more

82
00:03:53.330 --> 00:03:55.750
by shortening function names and so on.

83
00:03:55.750 --> 00:03:58.690
And of course, we want a tool that does this automatically,

84
00:03:58.690 --> 00:04:01.030
so that we don't have too manually work

85
00:04:01.030 --> 00:04:03.000
with unreadable code.

86
00:04:03.000 --> 00:04:06.080
We wanna write perfectly readable code as a developer.

87
00:04:06.080 --> 00:04:07.850
But it would be great if we had a tool

88
00:04:07.850 --> 00:04:10.740
that then shortens this code and really makes it

89
00:04:10.740 --> 00:04:14.960
as small as possible, uses as short as possible variable

90
00:04:14.960 --> 00:04:17.170
and function names, so that we ship

91
00:04:17.170 --> 00:04:19.130
as little code as possible.

92
00:04:19.130 --> 00:04:22.940
Because less code means that users can download it faster,

93
00:04:22.940 --> 00:04:25.530
which means our application can start up faster

94
00:04:25.530 --> 00:04:27.600
on our machines.

95
00:04:27.600 --> 00:04:29.440
And in addition, our current setup,

96
00:04:29.440 --> 00:04:32.860
we have this extra development server, lite-server

97
00:04:32.860 --> 00:04:35.150
which is a extra package installed,

98
00:04:35.150 --> 00:04:36.860
which we have to spin up.

99
00:04:36.860 --> 00:04:39.320
It wouldn't be a little bonus, a nice bonus

100
00:04:39.320 --> 00:04:42.280
if we had one command and that would do everything,

101
00:04:42.280 --> 00:04:45.360
build our project, but also spin up such a server,

102
00:04:45.360 --> 00:04:48.170
which automatically reloads our website

103
00:04:48.170 --> 00:04:50.713
whenever we change a file in our project.

104
00:04:51.550 --> 00:04:54.270
Well, and that's where webpack can help us.

105
00:04:54.270 --> 00:04:57.240
It bundles our code so that we have less imports

106
00:04:57.240 --> 00:05:00.670
instead we have some, well code bundles that we ship,

107
00:05:00.670 --> 00:05:05.100
it helps us optimize our code, minify it as it's called,

108
00:05:05.100 --> 00:05:06.717
so that we ship less code

109
00:05:06.717 --> 00:05:10.130
and our users have less code to download.

110
00:05:10.130 --> 00:05:12.530
And we can also easily add more build steps

111
00:05:12.530 --> 00:05:15.750
if you want to, we can add such a development server

112
00:05:15.750 --> 00:05:19.270
but we can also do many other things if we realy want to

113
00:05:19.270 --> 00:05:22.160
and the official webpack docs are the place to go

114
00:05:22.160 --> 00:05:24.130
if you wanna learn all about it.

115
00:05:24.130 --> 00:05:27.880
With that, let's see an example setup in our project

116
00:05:27.880 --> 00:05:30.433
and let's learn how we could use webpack there.

