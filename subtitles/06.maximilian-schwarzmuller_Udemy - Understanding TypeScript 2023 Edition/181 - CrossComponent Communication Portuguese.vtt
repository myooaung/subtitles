WEBVTT

00:02.230 --> 00:05.130
Palestrante: Então agora queremos obter nosso texto inserido

00:05.130 --> 00:07.960
aqui do componente NewTodo para o componente app.

00:07.960 --> 00:09.690
Por que para o componente de aplicação?

00:09.690 --> 00:11.160
Porque esse é nosso componente

00:11.160 --> 00:13.610
que tem uma ligação direta tanto com o NewTodo

00:13.610 --> 00:16.340
quanto com o componente TodoList.

00:16.340 --> 00:19.320
Portanto, aqui eu quero acrescentar uma nova

00:20.800 --> 00:24.560
função e vou nomeá-la hojeoAddHandler, o nome é com você,

00:24.560 --> 00:25.393
eu só gosto de

00:25.393 --> 00:27.990
usar essa convenção de ter handler no final

00:27.990 --> 00:31.390
se for uma função que aciona sobre um evento.

00:31.390 --> 00:34.330
E aqui eu espero receber o texto, como um fio,

00:34.330 --> 00:37.970
é nossa função para que possamos esperar isto.

00:37.970 --> 00:40.720
E eu quero então acrescentar isto como um todo aqui.

00:40.720 --> 00:42.270
Agora, é claro, como você sabe Reagir você

00:42.270 --> 00:45.230
sabe que atualizar esta matriz sozinha não vai fazer o truque, isto não vai

00:45.230 --> 00:47.440
renderizar este componente, então teremos que usar alguma

00:47.440 --> 00:49.360
administração estadual aqui para fazer este trabalho,

00:49.360 --> 00:51.900
antes de fazermos isso, no entanto, vamos ter certeza de que,

00:51.900 --> 00:53.040
pelo menos, obter o valor para

00:53.040 --> 00:54.750
esta função.

00:54.750 --> 00:57.460
Portanto, vamos registrar o texto aqui e depois podemos nos concentrar

00:57.460 --> 01:00.133
em sua parte de gestão estatal como um segundo passo.

01:01.000 --> 01:03.020
Para conseguir isso aqui, precisamos

01:03.020 --> 01:05.850
ter certeza de que esta função todoAddHandler

01:05.850 --> 01:09.050
pode ser chamada de dentro do componente NewTodo porque

01:09.050 --> 01:12.113
é lá que adicionamos o todo no final.

01:13.090 --> 01:15.370
Agora, como podemos tornar esta função

01:15.370 --> 01:17.860
aqui chamável de dentro deste componente?

01:17.860 --> 01:22.300
Nós passamos um ponteiro nesta função para aquele componente.

01:22.300 --> 01:25.640
Portanto, aqui poderíamos acrescentar um nome de propriedade, onAddTodo,

01:25.640 --> 01:27.280
e você pode dar-lhe o nome que quiser,

01:27.280 --> 01:28.560
eu só o nomeio assim porque

01:28.560 --> 01:32.030
isso basicamente acontecerá em um evento, um evento que nós controlamos,

01:32.030 --> 01:34.600
é claro, mas ainda assim.

01:34.600 --> 01:38.030
E aqui eu quero reencaminhar para o onAddHandler para

01:38.030 --> 01:40.600
que eu passe um ponteiro nesta função, eu

01:40.600 --> 01:42.120
não vou executá-lo aqui,

01:42.120 --> 01:44.620
eu apenas passo um ponteiro para esta função,

01:44.620 --> 01:49.240
para o onAddTodo para que ao invés de NewTodo em adereços, que podemos obter

01:49.240 --> 01:52.230
aqui, possamos chamar isto, para que possamos

01:52.230 --> 01:56.220
chamar adereços. onAddTodo aqui e encaminhar

01:56.220 --> 01:59.640
o texto inserido, essa é a idéia, Mas, claro, o TypeScript

01:59.640 --> 02:01.730
não gosta disso porque não sabe

02:01.730 --> 02:03.440
que haverá um adereço onAddTodo

02:03.440 --> 02:06.180
em nossos adereços aqui e como seria tal

02:06.180 --> 02:08.240
adereço.

02:08.240 --> 02:11.670
Portanto, como na TodoList, temos que estabelecer uma interface ou

02:11.670 --> 02:14.540
simplesmente uma definição do tipo de nossos adereços.

02:14.540 --> 02:18.200
Então, vamos para NewTodo e talvez, novamente, adicionar uma interface,

02:18.200 --> 02:20.820
você também poderia adicionar um tipo de curso e eu farei

02:20.820 --> 02:23.060
isso aqui para misturar as coisas.

02:23.060 --> 02:25.380
Normalmente, eu sempre escolheria uma interface,

02:25.380 --> 02:27.660
mas usar um tipo também é bom.

02:27.660 --> 02:30.493
Portanto, para usar um tipo aqui podemos chamá-lo

02:31.357 --> 02:33.820
NewTodoProps e o tipo é um tipo de objeto onde

02:33.820 --> 02:36.830
eu quero ter um adereço onAddTodo e este, por sua vez,

02:36.830 --> 02:39.120
será um tipo de função, ele apontará para

02:39.120 --> 02:40.753
uma função.

02:41.720 --> 02:44.290
Você definirá tipos de funções como esta, como

02:44.290 --> 02:46.760
você aprendeu, será uma função que não retorna

02:46.760 --> 02:48.850
nada, mas que espera um perímetro e que

02:48.850 --> 02:51.410
será o texto que o usuário digitou.

02:51.410 --> 02:54.023
Portanto, o texto Todo que é do tipo string,

02:55.120 --> 02:57.123
é o que esta função espera.

02:58.920 --> 03:01.770
Agora, vamos definir isto neste tipo genérico aqui e apontar

03:01.770 --> 03:03.103
para NewTodoProps.

03:04.510 --> 03:08.620
E com isso, podemos chamar a AddTodo e passar em um fio.

03:08.620 --> 03:11.470
E se ele tentasse passar em um número aqui, por exemplo,

03:11.470 --> 03:14.730
nós, naturalmente, receberíamos um erro porque definimos claramente

03:14.730 --> 03:17.590
que o argumento tem que ser um fio lá em cima.

03:17.590 --> 03:18.733
Então, vamos reverter isto.

03:20.550 --> 03:24.630
Com isso, se entrarmos novamente em um novo objetivo, terminá-lo em

03:24.630 --> 03:27.150
um mês, vemos novamente um tronco aqui, mas

03:27.150 --> 03:28.690
agora ele vem do componente

03:28.690 --> 03:30.750
de aplicação, como você pode dizer

03:30.750 --> 03:34.170
claramente, porque adicionamos este tronco aqui.

03:34.170 --> 03:37.380
Portanto, esta comunicação entre o componente NewTodo

03:37.380 --> 03:39.480
e o componente app aqui funciona.

03:39.480 --> 03:42.750
E com isso, vamos implementar alguma gestão estatal aqui e, novamente,

03:42.750 --> 03:44.160
isto também é algo que você pode

03:44.160 --> 03:46.850
tentar por conta própria primeiro, se quiser, para ter

03:46.850 --> 03:49.670
certeza de que rendemos todos no estado para que, sempre

03:49.670 --> 03:52.170
que atualizarmos todos, também possamos renderizar

03:52.170 --> 03:54.460
novamente este componente.

03:54.460 --> 03:56.263
Vamos fazer isso na próxima palestra.
