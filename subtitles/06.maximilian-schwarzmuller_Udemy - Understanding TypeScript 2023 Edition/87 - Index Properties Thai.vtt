WEBVTT

00:02.110 --> 00:03.890
ผู้สอน: ตอนนี้ หลังจากคุณลักษณะเหล่านี้ทั้งหมดที่เราทำงานกับประเภทเอง

00:03.890 --> 00:16.110
กล่าวคือ ในส่วนที่เราทำงานเกี่ยวกับการตรวจสอบประเภท ประเภทการคิดต้นทุน เรากลับมาที่คุณลักษณะที่ช่วยให้เราใช้รหัสที่ยืดหยุ่นได้

00:16.110 --> 00:17.930
แน่นอนยังคงเขียนทั้งสองประเภท

00:17.930 --> 00:20.150
มันคือ typescript แต่ก็ไม่ได้เน้นแค่ประเภทมากนัก

00:20.150 --> 00:23.520
ตอนนี้เราสามารถจัดการมันได้แล้ว

00:23.520 --> 00:25.830
และเพื่อสิ่งนั้น ฉันอยากจะเริ่มด้วยประเภทดัชนี

00:25.830 --> 00:33.010
ซึ่งเป็นคุณลักษณะที่ช่วยให้เราสามารถสร้างวัตถุที่มีความยืดหยุ่นมากขึ้นเกี่ยวกับคุณสมบัติที่อาจมีอยู่

00:33.010 --> 00:34.485
ตอนนี้ฉันหมายความว่าอย่างไร

00:34.485 --> 00:39.680
สมมติว่าคุณเขียนแอปพลิเคชันโดยที่คุณกำลังตรวจสอบอินพุตของผู้ใช้บางส่วน

00:39.680 --> 00:44.603
ดังนั้นคุณจึงมีช่องป้อนข้อมูลหลายช่องและขึ้นอยู่กับว่าผู้ใช้ป้อนอะไรและช่องนั้นเป็นช่องใด

00:44.603 --> 00:46.682
คุณอาจต้องการจัดเก็บและแสดงข้อความแสดงข้อผิดพลาดต่างๆ

00:46.682 --> 00:50.490
ในท้ายที่สุด

00:50.490 --> 00:54.360
ตัวอย่างเช่น หากเป็นฟิลด์อีเมล คุณต้องการตรวจสอบว่าใครก็ตามที่อยู่ในอีเมล

00:54.360 --> 00:59.830
และถ้าไม่ใช่ คุณต้องเพิ่มข้อความแสดงข้อผิดพลาดที่เหมาะสมลงในที่เก็บข้อผิดพลาด

00:59.830 --> 01:01.133
นั่นคือสิ่งที่ฉันจะเริ่มด้วย

01:01.133 --> 01:06.133
ฉันจะมีคอนเทนเนอร์ข้อผิดพลาดของอินเทอร์เฟซที่นี่

01:07.570 --> 01:09.530
และนั่นควรเป็นวัตถุ ดังนั้นฉันจึงใช้อินเทอร์เฟซที่นี่

01:09.530 --> 01:14.090
แต่ควรมีความยืดหยุ่นเกี่ยวกับสิ่งที่ถืออยู่

01:14.090 --> 01:17.692
ท้ายที่สุด เป้าหมายของฉันคือการที่เราสามารถจัดการกับวัตถุที่เรามีตัวระบุข้อผิดพลาด

01:17.692 --> 01:23.700
ซึ่งอาจเหมาะที่สุดหากช่องป้อนข้อมูลที่มีข้อผิดพลาดอยู่

01:23.700 --> 01:26.581
ตัวอย่างเช่น อีเมล จากนั้นสตริงข้อผิดพลาดบางอย่าง

01:26.581 --> 01:31.581
ไม่ใช่อีเมลที่ถูกต้อง แล้วเรามีทรัพย์สินอื่น

01:32.130 --> 01:37.150
สมมติว่าชื่อผู้ใช้และสตริงข้อผิดพลาดอาจจัดเก็บช่องป้อนข้อมูลนั้น

01:37.150 --> 01:41.611
หากช่องป้อนข้อมูลไม่ถูกต้อง

01:41.611 --> 01:45.770
ต้องเริ่มต้นด้วยตัวละคร

01:45.770 --> 01:49.170
สิ่งที่ควรเก็บไว้ในวัตถุนั้น

01:49.170 --> 01:55.320
ปัญหาคือ ฉันไม่รู้ล่วงหน้าว่าชื่ออสังหาริมทรัพย์ใดที่เราจะใส่ไว้ในนั้น

01:55.320 --> 01:58.021
คุณสามารถพูดได้ว่า เราจะมีอีเมลและชื่อผู้ใช้

01:58.021 --> 02:01.650
แต่สำหรับสิ่งหนึ่ง ฉันต้องการให้เป็นคอนเทนเนอร์ที่ยืดหยุ่น

02:01.650 --> 02:05.350
ฉันต้องการใช้ในรูปแบบใดก็ได้ที่มีในหน้าเว็บของฉัน

02:05.350 --> 02:10.157
และฉันอาจมีรูปแบบที่แตกต่างกันด้วยอินพุตที่แตกต่างกันพร้อมตัวระบุที่แตกต่างกัน

02:10.157 --> 02:16.150
ดังนั้นฉันจึงไม่ต้องการจำกัดตัวเองเพียงแค่ข้อผิดพลาดของอีเมลและชื่อผู้ใช้ของเรา

02:16.150 --> 02:18.461
นอกจากนี้ แม้ว่าเราจะมีเพียงแค่การป้อนอีเมลและชื่อผู้ใช้เสมอ

02:18.461 --> 02:23.291
และเราเพียงแค่ต้องการเก็บข้อผิดพลาดไว้สำหรับสิ่งเหล่านั้น

02:23.291 --> 02:27.461
เราจะทำอย่างไรหากอีเมลไม่ถูกต้องและไม่ใช่ชื่อผู้ใช้

02:27.461 --> 02:30.912
แน่นอนว่าในวัตถุนี้ เราสามารถเก็บค่า null เป็นค่าสำหรับชื่อผู้ใช้ได้

02:30.912 --> 02:34.421
แต่ฉันขอละเว้นไว้

02:34.421 --> 02:40.419
เรามีวัตถุที่เก็บเฉพาะคุณสมบัติสำหรับอินพุตที่เรามีข้อผิดพลาดหรือไม่?

02:40.419 --> 02:46.260
ดังนั้นเราจึงสามารถวนซ้ำวัตถุนี้ด้วยการวนซ้ำสี่รอบเพื่ออ่านข้อผิดพลาดทั้งหมดที่เราได้รับ

02:46.260 --> 02:48.200
ตัวอย่างเช่น และไม่มีคุณสมบัติใด

02:48.200 --> 02:51.112
ๆ ในนั้นที่ไม่ได้เก็บข้อผิดพลาดไว้

02:51.112 --> 02:56.861
เรื่องสั้นสั้น ๆ ฉันต้องการวัตถุที่ฉันค่อนข้างชัดเจนเกี่ยวกับประเภทค่า

02:56.861 --> 03:05.320
ควรเป็นสตริง แต่ฉันไม่ได้บอกล่วงหน้าว่าฉันจะมีคุณสมบัติกี่อย่างและชื่อใดที่จะมีคุณสมบัติ

03:05.320 --> 03:08.171
และสำหรับสถานการณ์เช่นนี้ เราสามารถใช้ประเภทดัชนีได้

03:08.171 --> 03:10.760
คุณกำหนดประเภทดัชนีโดยใช้วงเล็บเหลี่ยมที่นี่

03:10.760 --> 03:16.280
โปรดจำไว้ว่าปกติเราจะเขียนชื่อคุณสมบัติที่นี่ แต่ตอนนี้เราใช้วงเล็บเหลี่ยม

03:16.280 --> 03:21.280
จากนั้นเลือกชื่อใดก็ได้ เช่น คีย์หรือพร็อพ

03:23.581 --> 03:28.581
จากนั้นเครื่องหมายจุดคู่ จากนั้นประเภทค่าของคุณสมบัติ

03:29.010 --> 03:30.010
แล้วก็วัตถุ

03:30.010 --> 03:33.760
คุณไม่สามารถมีสตริง ตัวเลข หรือสัญลักษณ์เป็นคุณสมบัติได้

03:33.760 --> 03:37.660
ตัวอย่างเช่น คุณไม่สามารถใช้บูลีนที่นี่ได้ ไม่อนุญาต

03:37.660 --> 03:40.504
แต่คุณสามารถใช้สตริงได้ที่นี่

03:40.504 --> 03:51.083
ฉันพูดง่ายๆ ว่าวัตถุใดก็ตามที่ฉันสร้างตามอินเทอร์เฟซคอนเทนเนอร์ข้อผิดพลาดนี้ในภายหลังต้องมีคุณสมบัติซึ่งเป็นสตริง

03:52.120 --> 03:55.899
ตัวอย่างเช่น ชื่อผู้ใช้จะเป็นสตริงที่ถูกต้องแม้ว่าฉันจะไม่ใส่เครื่องหมายคำพูดก็ตาม

03:55.899 --> 04:01.629
จากนั้นเราเพิ่มเครื่องหมายทวิภาค จากนั้นประเภทค่าซึ่งเป็นสตริง

04:01.629 --> 04:01.629
ดังนั้นฉันจึงบอกว่าฉันไม่รู้ชื่อคุณสมบัติที่แน่นอน

04:04.320 --> 04:07.620
ฉันไม่รู้จำนวนทรัพย์สินด้วย

04:07.620 --> 04:16.959
ฉันเพิ่งรู้ว่าทุกคุณสมบัติที่เพิ่มลงในวัตถุนี้ซึ่งอิงตามคอนเทนเนอร์ข้อผิดพลาดจะต้องมีชื่อคุณสมบัติซึ่งสามารถตีความได้ว่าเป็นสตริง

04:16.959 --> 04:23.080
และค่าของคุณสมบัติก็ต้องเป็นสตริงด้วย

04:23.080 --> 04:23.080
นั่นคือสิ่งที่ฉันพูดที่นี่

04:23.080 --> 04:35.339
ในตอนนี้ เรายังสามารถเพิ่มคุณสมบัติที่กำหนดไว้ล่วงหน้าได้ อย่างไรก็ตาม เฉพาะในกรณีที่เป็นประเภทเดียวกันกับที่นี่เท่านั้น

04:35.339 --> 04:35.339
เราจึงสามารถเพิ่ม ID ซึ่งเป็นสตริงประเภทได้

04:35.339 --> 04:39.760
จากนั้นออบเจกต์ใดๆ ที่เราสร้างซึ่งยึดติดกับอินเทอร์เฟซนี้ต้องมีคุณสมบัติ

04:39.760 --> 04:43.360
ID และสามารถเพิ่มคุณสมบัติอื่นๆ ได้มากเท่าที่ต้องการ แต่เราไม่สามารถตั้งค่า

04:43.360 --> 04:49.277
ID เป็นตัวเลขที่นี่ได้ เนื่องจากเรามีประเภทดัชนีที่นี่

04:49.277 --> 04:53.033
นั่นคือข้อจำกัดที่เรามี หากเราสร้างเช่นวัตถุ

04:55.240 --> 04:56.550
ตอนนี้ผลที่ตามมาคืออะไร?

04:56.550 --> 05:00.080
ตอนนี้เราสามารถสร้าง error bag ซึ่งเป็นประเภท

05:00.080 --> 05:02.390
error container ซึ่งเป็น object

05:02.390 --> 05:07.440
และมันก็ใช้ได้แบบนี้เพราะเราไม่ต้องเพิ่มคุณสมบัติใดๆ

05:07.440 --> 05:10.340
นั่นคือทั้งหมดที่ถูกต้อง แต่แน่นอนตอนนี้เราสามารถเพิ่มบางส่วนได้

05:10.340 --> 05:13.380
ตัวอย่างเช่น อีเมลไม่ใช่อีเมลที่ถูกต้อง

05:13.380 --> 05:17.093
และนี่เป็นเรื่องปกติ คงไม่เป็นไรถ้าฉันจะกำหนดตัวเลขตรงนี้แทน

05:17.093 --> 05:23.001
เพราะเรากำลังบอกว่าทุกพร็อพเพอร์ตี้ต้องการประเภทค่าสตริง

05:23.001 --> 05:23.001
ดังนั้นเราต้องใช้สตริงที่นี่

05:23.001 --> 05:28.610
ถ้าฉันใช้ตัวเลขที่นี่ มันจะใช้ได้ เพราะนั่นสามารถตีความเป็นสตริงได้เช่นกัน

05:28.610 --> 05:33.031
ดังนั้นฉันจึงสามารถใช้ตัวเลขเป็นประเภทคีย์ได้ที่นี่หากต้องการ

05:33.031 --> 05:33.031
ฉันค่อนข้างว่างเกี่ยวกับสิ่งที่ฉันใช้ที่นี่

05:33.031 --> 05:35.981
ถ้ามันจะเปลี่ยนประเภทเสาที่นี่เป็นตัวเลข

05:35.981 --> 05:44.810
คุณก็สามารถทำได้และก็ไม่เป็นไร

05:44.810 --> 05:44.810
แต่นี่ไม่ใช่เพราะอีเมลไม่ใช่ตัวเลข

05:46.470 --> 05:48.170
ไม่สามารถแปลงเป็นตัวเลขได้

05:48.170 --> 05:51.550
สามารถถือเป็นสตริง แต่ไม่ใช่ตัวเลข

05:51.550 --> 05:56.990
นี่คือวิธีที่คุณควบคุมประเภทของคุณสมบัติหรือชื่อคุณสมบัติที่คุณอนุญาต

05:56.990 --> 05:59.493
และที่นี่ฉันทำอย่างใดอย่างหนึ่งเพื่อให้ชื่อคุณสมบัติสตริง

05:59.493 --> 06:04.740
ดังนั้นอะไรก็ตามที่สามารถแปลงเป็นสตริงได้จึงเป็นชื่อคุณสมบัติที่ถูกต้อง

06:04.740 --> 06:04.740
จากนั้นค่าจะต้องเป็นสตริงด้วย

06:06.413 --> 06:10.632
และอย่างที่ฉันพูด แน่นอนว่าตอนนี้เราสามารถบวกค่าได้หลายค่าที่นี่

06:10.632 --> 06:12.830
ฉันควรจะบอกว่ามีหลายค่า

06:12.830 --> 06:17.263
ต้องขึ้นต้นด้วยอักษรตัวใหญ่

06:18.170 --> 06:22.722
ดังนั้น ตอนนี้จึงเป็น error bag ที่เราสามารถสร้างได้ด้วยความช่วยเหลือของ

06:22.722 --> 06:32.653
error container ซึ่งให้ความยืดหยุ่นเป็นพิเศษโดยที่เราไม่จำเป็นต้องรู้ล่วงหน้าว่าชื่อคุณสมบัติใดที่เราต้องการใช้และจำนวนคุณสมบัติที่เราต้องการ
