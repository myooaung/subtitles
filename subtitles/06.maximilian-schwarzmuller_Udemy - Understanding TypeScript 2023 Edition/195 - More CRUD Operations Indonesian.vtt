WEBVTT

00:02.150 --> 00:03.930
Instruktur: Jadi kita menambahkan permintaan

00:03.930 --> 00:06.120
POST pertama kita, kita mampu membuat TODO.

00:06.120 --> 00:07.250
Sekarang kami punya lebih banyak rute.

00:07.250 --> 00:10.170
Kami juga mendapatkan rute untuk melayani semua TODOS yang kami buat.

00:10.170 --> 00:11.750
Sekarang perlu diketahui bahwa, TODOS

00:11.750 --> 00:14.160
Anda akan direset setiap kali Anda mengubah dan menyimpan

00:14.160 --> 00:16.630
kode Anda karena itu me-restart server Anda dan itu akan

00:16.630 --> 00:18.920
kehilangan semua yang tersimpan di memori dan kami

00:18.920 --> 00:21.330
hanya mengelola TODOS kami di memori.

00:21.330 --> 00:23.560
Itu hanya sesuatu yang kita miliki di sini dalam aplikasi

00:23.560 --> 00:24.930
dummy, dalam aplikasi nyata, Anda

00:24.930 --> 00:28.200
tentu saja akan menyimpannya dalam database nyata, mengambilnya dari sana dan

00:28.200 --> 00:30.280
seterusnya dan karenanya akan bertahan.

00:30.280 --> 00:35.060
Meskipun demikian di sini, kita dapat membuat fungsi baru, getTodos dan ini

00:35.060 --> 00:38.030
akan menjadi RequestHandler di sini, jadi Anda

00:38.030 --> 00:39.740
tidak perlu mengatur tipe pada

00:39.740 --> 00:42.330
semua parameter satu per satu.

00:42.330 --> 00:46.120
Dan kemudian di sana, saya hanya ingin mengembalikan respons di mana saya

00:46.120 --> 00:49.560
mengembalikan beberapa data JSON di mana saya memiliki todos saya

00:49.560 --> 00:52.420
dan di sana, saya hanya ingin menjangkau array TODOs saya

00:52.420 --> 00:54.330
dan mengirimkannya kembali ke klien,

00:54.330 --> 00:56.530
dan itu sudah bisa semuanya.

00:56.530 --> 00:57.810
Tentu saja, Anda dapat mengubah

00:57.810 --> 00:59.640
ini, mungkin Anda ingin memiliki logika yang

00:59.640 --> 01:03.120
berbeda, mungkin Anda ingin mengurutkan TODOS terlebih dahulu atau semacamnya,

01:03.120 --> 01:06.690
tetapi ini dalam bentuknya yang paling sederhana sudah menjadi semua yang kita butuhkan

01:06.690 --> 01:10.530
di sini, mengembalikan TODOS kita, jadi fungsi yang sangat sederhana.

01:10.530 --> 01:13.240
Dalam rute TODOS, sekarang kita hanya perlu menghubungkan ini.

01:13.240 --> 01:17.680
Jadi mari kita impor getTodos dari controller kita juga dan menghubungkannya

01:17.680 --> 01:20.640
di sini dengan rute ini.

01:20.640 --> 01:23.430
Dan dengan itu, jika sekarang kita menyimpan ini, kita

01:23.430 --> 01:25.250
sudah bisa melihatnya beraksi.

01:25.250 --> 01:29.860
Jika kita kembali dan kita membuat permintaan baru, permintaan

01:29.860 --> 01:34.860
GET, ke http://localhost:3000/todos/ dan kita mengirim ini, kita

01:39.400 --> 01:41.410
mendapatkan kembali array

01:41.410 --> 01:44.400
kosong, sekarang mengapa demikian?

01:44.400 --> 01:46.750
Nah, saya katakan bahwa TODO akan dihapus setiap

01:46.750 --> 01:48.010
kali kita mengubah kode dan

01:48.010 --> 01:49.750
server harus di-restart, jadi kita

01:49.750 --> 01:51.470
harus membuat TODO baru sekarang tanpa

01:51.470 --> 01:54.110
me-restart server di antaranya sekarang.

01:54.110 --> 01:57.360
Dan jika kita membuat TODO itu dan sekarang kita mendapatkan

01:57.360 --> 02:01.770
TODOS kita, kita melihat TODO yang dibuat dengan ID, serial 9811 dan

02:01.770 --> 02:04.380
seterusnya, di sini juga.

02:04.380 --> 02:05.960
Jadi, itu sudah berhasil.

02:05.960 --> 02:08.980
Sekarang karena kita sedang membahasnya, mari kita juga mengerjakan

02:08.980 --> 02:10.590
patch dan delete dan tentu saja jangan

02:10.590 --> 02:12.680
ragu untuk membuat logika di sana sendiri.

02:12.680 --> 02:14.970
Pada akhirnya, sekarang Anda memiliki semua bahan bangunan

02:14.970 --> 02:16.130
yang Anda perlukan untuk itu.

02:16.130 --> 02:18.480
Tentu saja kita sekarang juga akan melakukannya bersama-sama.

02:19.390 --> 02:21.570
Jadi di sini sekarang pada permintaan tambalan,

02:21.570 --> 02:24.350
mari kita tambahkan fungsi pengontrol baru.

02:24.350 --> 02:29.350
export const updateTodo, yang bertipe RequestHandler dan harus memegang

02:30.660 --> 02:34.680
fungsi dalam format yang sudah kita ketahui.

02:34.680 --> 02:37.310
Dan di sana, tujuannya adalah untuk mengekstrak

02:37.310 --> 02:40.630
data tentang TODO baru dari permintaan yang masuk, dan

02:40.630 --> 02:44.140
kemudian memperbarui TODO dengan data baru itu.

02:44.140 --> 02:47.240
Sekarang, harap dicatat, bahwa sebagai bagian dari rute kita di sini,

02:47.240 --> 02:48.900
kita memiliki segmen dinamis.

02:48.900 --> 02:51.140
Kami memiliki segmen id ini.

02:51.140 --> 02:54.610
Jadi itu adalah sesuatu yang akan dapat kita ekstrak dari

02:54.610 --> 02:58.750
URL, nilai konkret untuk segmen dinamis ini dapat diekstraksi.

02:58.750 --> 03:02.147
Jadi di sini pada permintaan masuk kita, Anda bisa mendapatkan

03:03.172 --> 03:07.987
todoId, dari params permintaan kita. id,. id, karena itulah nama yang saya pilih di sini.

03:07.987 --> 03:11.660
Jika Anda memilih nama yang berbeda di sini, Anda harus menggunakan nama

03:11.660 --> 03:13.060
yang berbeda di sana.

03:13.060 --> 03:15.810
Sekarang, kita tidak mendapatkan jenis dukungan di sini, bukan?

03:15.810 --> 03:18.410
Params adalah tipe apa saja.

03:18.410 --> 03:20.450
Sekarang karena tipe dapat mengurai

03:20.450 --> 03:23.400
String ini dan memahami apa yang ada di sana.

03:23.400 --> 03:25.460
Jadi untuk mendapatkan jenis dukungan yang lebih

03:25.460 --> 03:28.920
baik, kita sebenarnya dapat memanfaatkan bahwa RequestHandler di sini adalah

03:28.920 --> 03:32.880
tipe generik dan kita dapat menambahkan tanda kurung bersudut dan pada dasarnya memberi

03:32.880 --> 03:35.880
tahu TypeScript parameter mana yang akan dimiliki.

03:35.880 --> 03:37.800
Kita cukup mengatur ini ke sebuah objek dan

03:37.800 --> 03:39.300
di sana kita sekarang memiliki peta

03:39.300 --> 03:42.180
nilai kunci dari semua orang tua yang kita miliki di URL.

03:42.180 --> 03:43.830
Jadi misalnya, bahwa kita memiliki

03:43.830 --> 03:46.730
parameter ID, yang pada akhirnya menampung String.

03:46.730 --> 03:48.610
Itu adalah sesuatu yang dapat kita tambahkan di sini dan sekarang

03:48.610 --> 03:50.230
Anda akan melihat kita mendapatkan penyelesaian

03:50.230 --> 03:52.560
otomatis dan TypeScript tahu bahwa ini akan menjadi String.

03:52.560 --> 03:55.520
Jadi itu lebih baik, menggunakan tipe generik ini.

03:55.520 --> 03:58.640
Sekarang, kita memiliki ID, kita juga memerlukan sesuatu

03:58.640 --> 04:01.050
dari badan permintaan, tepatnya, kita memerlukan

04:01.050 --> 04:03.560
teks baru dari badan permintaan.

04:03.560 --> 04:08.130
Jadi updatedText dapat diambil dari badan permintaan dan sekarang sekali

04:08.130 --> 04:11.700
lagi, mari kita gunakan typecasting di sini, untuk memperjelas

04:11.700 --> 04:14.100
bahwa akan ada properti teks di dalam badan

04:14.100 --> 04:16.910
dan ini akan bertipe String.

04:16.910 --> 04:19.750
Dan mari kita ambil teks setelahnya.

04:19.750 --> 04:22.373
Dan sekarang kita bisa memperbarui TODO dalam array TODOS kita di atas sana.

04:23.830 --> 04:27.720
Untuk itu, mari kita cari indeks TODO yang ingin kita

04:27.720 --> 04:28.710
perbarui.

04:28.710 --> 04:30.808
todoIndex, dengan menjangkau TODOS, dan

04:30.808 --> 04:33.760
dengan findIndex, kita dapat menjalankan beberapa logika

04:33.760 --> 04:36.090
pada setiap item dalam array TODOS.

04:36.090 --> 04:38.060
Dan di sana kita melihat setiap todo

04:38.060 --> 04:40.010
dan jika todo id sama dengan todoId yang

04:40.010 --> 04:44.300
kita miliki di sini, kita tahu itu adalah TODO yang ingin kita perbarui.

04:44.300 --> 04:47.140
Sekarang jika itu karena alasan tertentu harus minus

04:47.140 --> 04:50.550
satu, itu berarti kita tidak menemukan TODO itu, jadi jika itu lebih

04:50.550 --> 04:52.610
kecil dari nol pada dasarnya, kita tahu

04:52.610 --> 04:56.960
ada sesuatu yang salah dan dalam hal ini, saya akan melempar kesalahan baru di mana

04:56.960 --> 04:59.630
saya katakan, Tidak dapat menemukan todo!

04:59.630 --> 05:03.633
Dan itu kemudian harus memicu middleware penanganan kesalahan

05:04.760 --> 05:06.130
default kita di sini.

05:06.130 --> 05:08.633
Sekarang jika kita berhasil melewati pemeriksaan

05:09.870 --> 05:12.450
if ini, kita memang menemukan TODO, dan kemudian kita

05:12.450 --> 05:15.040
dapat dengan mudah memperbarui TODO pada indeks ini

05:15.040 --> 05:18.960
dalam array TODOS kita menjadi TODO baru, di mana kita menyimpan id lama.

05:18.960 --> 05:23.270
Jadi di mana kita mengakses TODOS, todoIndex. id, jadi kita mengakses ID lama dan menyimpannya, tapi

05:23.270 --> 05:27.030
teks di sini yang saya set,

05:27.030 --> 05:29.490
tentu saja kita tidak menetapkannya

05:29.490 --> 05:31.713
seperti ini.

05:32.870 --> 05:34.570
Tetapi teks di sini yang kita tetapkan, sekarang adalah updatedText.

05:34.570 --> 05:38.750
Ini menggantikan TODO di sini, dan setelah itu

05:38.750 --> 05:41.340
kita bisa mengirim kembali respons,

05:41.340 --> 05:45.280
dengan pesan, Updated, misalnya.

05:45.280 --> 05:47.053
Dan di mana kita kemudian juga menambahkan

05:47.990 --> 05:51.470
updatedTodo ke respons keluar, dan mengatur ini sama dengan, yah,

05:51.470 --> 05:55.090
TODOS todoIndex, yang sekarang memegang nilai baru.

05:55.090 --> 05:59.090
Ini adalah sesuatu yang kita panggil lakukan di sini dalam logika pemutakhiran

05:59.090 --> 06:02.430
kita, tentu saja, beberapa kode dummy karena kita masih bekerja dengan

06:02.430 --> 06:03.960
array TODOS dalam memori ini tetapi

06:03.960 --> 06:07.150
ini menunjukkan bagaimana kita menggunakan TypeScript di sini,

06:07.150 --> 06:09.060
dan itu adalah hal utama.

06:09.060 --> 06:11.100
Jadi, mari kita coba fungsi pembaruan ini sekarang.

06:11.100 --> 06:13.620
Untuk itu kita bisa kembali ke Postman, dan pada akhirnya,

06:13.620 --> 06:16.260
sekarang saya ingin mengirim permintaan PATCH, karena

06:16.260 --> 06:19.960
di routes, kita menunggu permintaan patch ini ke route ini.

06:19.960 --> 06:23.460
Dan berbicara tentang, bahwa kita mungkin juga harus menghubungkan

06:23.460 --> 06:24.293
rute ini ke fungsi

06:24.293 --> 06:26.490
pengontrol ini terlebih dahulu.

06:26.490 --> 06:28.850
Jadi, mari kita pergi ke file routes

06:28.850 --> 06:33.420
dan mengimpor updateTodo dan membuat koneksi ini di sini.

06:33.420 --> 06:35.590
Dan setelah itu, kita bisa melanjutkan dan mengirim permintaan ini.

06:35.590 --> 06:38.570
Jadi sekarang kembali ke Postman, PATCH adalah

06:38.570 --> 06:41.890
apa yang ingin kita kirimkan dan kemudian http://localhost:3000/todos

06:41.890 --> 06:46.320
dan sekarang ide TODO yang ingin kita perbarui sebagai bagian

06:46.320 --> 06:49.430
dari URL.

06:49.430 --> 06:50.573
Sekarang karena kita menyimpan sesuatu,

06:51.500 --> 06:54.970
karena kita menyimpan beberapa perubahan, server kita restart, jadi semua TODOS akan hilang.

06:54.970 --> 06:58.890
Jadi, pertama-tama mari kita kirim ulang permintaan POST

06:58.890 --> 07:01.150
itu untuk membuat TODO baru.

07:01.150 --> 07:02.450
Dan kemudian di sini kita mendapatkan ID dari TODO itu.

07:02.450 --> 07:05.170
Sekarang kita bisa menambahkan id ini di sini ke URL ini.

07:05.170 --> 07:08.800
Dan saya juga akan menambahkan body yang harus bertipe JSON, di mana kita

07:08.800 --> 07:11.780
mengatur data baru yang ingin kita kirim ke server.

07:11.780 --> 07:15.560
Sekarang perlu diingat dalam pengontrol pembaruan kita,

07:15.560 --> 07:18.570
saya mencari bidang bernama teks, dalam badan

07:18.570 --> 07:20.970
permintaan yang masuk.

07:20.970 --> 07:22.900
Jadi kita harus menyediakannya lagi di sini

07:22.900 --> 07:24.580
dalam data JSON yang kita kirimkan.

07:24.580 --> 07:26.690
Selesaikan kursus ini dalam satu bulan,

07:26.690 --> 07:29.440
ini mungkin akan menjadi teks baru kami.

07:29.440 --> 07:31.520
Jika sekarang kita mengirim ini, kita melihat bahwa ini sudah diperbarui.

07:31.520 --> 07:35.210
Dan jika sekarang saya mendapatkan semua TODO, kita juga melihat

07:35.210 --> 07:37.180
masih hanya ada satu TODO, tetapi

07:37.180 --> 07:39.430
hanya ada perubahan teks.

07:39.430 --> 07:41.623
Jadi sekarang ini bekerja, kita juga dapat memperbarui TODO.

07:42.950 --> 07:46.470
Mari kita periksa juga apa yang terjadi jika saya memiliki id yang tidak ada,

07:46.470 --> 07:48.780
misalnya, dengan menghapus digit terakhir di sini,

07:48.780 --> 07:50.620
maka saya mendapatkan, Could not find todo

07:50.620 --> 07:53.430
dalam respons kesalahan saya yang bertipe 500.

07:53.430 --> 07:57.670
Jadi, ini juga terlihat bagus.

07:57.670 --> 07:59.660
Sebagai langkah terakhir, mari kita tambahkan fungsi untuk menghapus TODO.

07:59.660 --> 08:03.800
Jadi di folder controllers, saya akan mengekspor konstanta bernama,

08:03.800 --> 08:07.210
deleteTodo, yang bertipe RequestHandler.

08:07.210 --> 08:11.460
Dan lagi, kita mendapatkan permintaan kita, respons kita, dan

08:11.460 --> 08:14.040
kemudian fungsi berikutnya di sini.

08:14.040 --> 08:17.320
Dan di sini, sekarang saya ingin menemukan

08:17.320 --> 08:20.270
TODO dan menghapusnya.

08:20.270 --> 08:21.543
Untuk itu, kita sebenarnya bisa menyalin

08:22.380 --> 08:25.090
kode ini di mana kita mendapatkan ID dari TODO dan kemudian indeksnya.

08:25.090 --> 08:29.360
Singkirkan saja baris di mana kita mengekstrak teks yang diperbarui karena

08:29.360 --> 08:32.210
untuk permintaan DELETE, tidak akan ada badan permintaan,

08:32.210 --> 08:35.660
tetapi kita perlu, id dari TODO yang merupakan bagian dari rute

08:35.660 --> 08:37.400
URL kita.

08:37.400 --> 08:40.340
Dan kemudian kita menemukan indeksnya dan setelah kita

08:40.340 --> 08:43.530
mendapatkan indeksnya, kita bisa pergi ke TODO, memanggil

08:43.530 --> 08:47.350
metode splice dan menghapus todo di todoIndex, dan hanya todo itu.

08:47.350 --> 08:51.620
Dan setelah itu, kita bisa mengirim kembali respons di mana

08:51.620 --> 08:54.040
kita mengatakan, Todo deleted! seperti itu.

08:54.040 --> 08:58.490
Ini bisa menjadi logika penghapusan kita.

08:58.490 --> 08:59.380
Sekarang saatnya untuk

08:59.380 --> 09:01.760
menghubungkan ini, jadi di folder routes, mari kita impor

09:01.760 --> 09:04.560
deleteTodo dari pengendali TODOs dan menghubungkannya di sana.

09:04.560 --> 09:07.440
Dan dengan terhubungnya ini, jika kita sekarang menyimpan ini, sekali

09:08.340 --> 09:09.963
lagi, kita perlu menambahkan TODO karena

09:11.120 --> 09:14.370
semua TODO dihapus dengan setiap server restart, jadi ini dia.

09:14.370 --> 09:16.720
Salin id itu.

09:16.720 --> 09:20.550
Dan sekarang mari kita kirimkan permintaan DELETE itu.

09:20.550 --> 09:22.680
Jadi permintaan DELETE baru di sini, ke

09:22.680 --> 09:24.980
http:/localhost:3000/todos/this id.

09:24.980 --> 09:27.160
Tidak ada tubuh yang perlu ditambahkan.

09:27.160 --> 09:32.160
Klik Send (Kirim) dan berhasil.

09:32.800 --> 09:34.880
Jika saya mengirimnya lagi, kami mendapatkan kesalahan

09:34.880 --> 09:37.180
tidak dapat menemukan karena kami baru saja menghapusnya.

09:37.180 --> 09:39.950
Dan jika kita mendapatkan semua TODOS, itu harus menjadi

09:39.950 --> 09:41.570
larik kosong dan ini.

09:41.570 --> 09:42.723
Jadi ini sekarang berfungsi

09:42.723 --> 09:45.550
dan ini pada dasarnya adalah fungsionalitas CRUD, ditambahkan

09:45.550 --> 09:46.750
dengan TypeScript di sini

09:46.750 --> 09:49.550
di aplikasi Node dan Express sederhana ini.

09:49.550 --> 09:50.990
Sekarang tentu saja itu adalah aplikasi yang cukup sepele di

09:50.990 --> 09:52.940
sini, tetapi itu sudah menunjukkan kepada kita beberapa penggunaan TypeScript.

09:52.940 --> 09:56.060
Ini menunjukkan kepada kita bahwa kita menulis kode yang seharusnya

09:56.060 --> 09:58.870
terlihat akrab bagi Anda jika Anda mengerjakan sisa kursus ini,

09:58.870 --> 10:00.480
dan bahwa kita menggunakan semua fitur

10:00.480 --> 10:02.000
yang Anda pelajari di sana.

10:02.000 --> 10:04.750
Dan sama seperti di bagian React, itu semua penting.

10:04.750 --> 10:07.610
Anda dapat menggunakan apa pun yang Anda pelajari

10:07.610 --> 10:10.110
tentang TypeScript di sini juga, karena pada

10:10.110 --> 10:11.520
akhirnya akan dikompilasi

10:11.520 --> 10:13.340
ke kode JavaScript biasa, yang kemudian

10:13.340 --> 10:14.990
kami sajikan.
