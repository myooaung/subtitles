WEBVTT

00:02.450 --> 00:04.900
教师：现在, 如果你有一个库,

00:04.900 --> 00:07.090
你不能像我们为Lodash做的那样安装类型,

00:07.090 --> 00:10.470
你该怎么办？

00:10.470 --> 00:14.440
对于Lodash, 谢天谢地, 我们有这样一个类型包,

00:14.440 --> 00:15.880
正如我提到的, 对于大多数第三方库,

00:15.880 --> 00:21.210
您都有, 但不一定是所有的｡

00:21.210 --> 00:27.320
或者, 如果您有一些其他的JavaScript代码, 比如说在您的索引中｡

00:27.320 --> 00:27.320
html文件中,

00:27.320 --> 00:29.800
您还有一些其他脚本代码, 这些代码执行stars,

00:29.800 --> 00:34.800
您可以在其中设置一些全局变量｡

00:35.350 --> 00:38.450
GLOBAL = 'THIS IS SET'类似于这样的东西,

00:38.450 --> 00:43.180
最终你会知道这将是全球可用的｡

00:43.180 --> 00:46.240
如您所知, 像这样添加的变量将被添加到全局window对象中,

00:46.240 --> 00:52.670
并且您希望在TypeScript代码中使用它们｡

00:52.670 --> 00:57.770
比如说, 这里如果我想安慰一下｡

00:57.770 --> 00:57.770
log（GLOBAL）这样,

00:57.770 --> 00:59.990
我在IDE中得到一个错误｡

00:59.990 --> 01:06.340
而且如果我运行tsc -w来开始编译, 我也会在这里得到一个错误｡

01:06.340 --> 01:11.530
所以, 它不喜欢全局的东西, 即使我们知道它会工作,

01:11.530 --> 01:15.630
因为我们的索引｡ html文件定义此全局变量｡ 

01:15.630 --> 01:18.010
而且, 由于我们已经延迟了此脚本,

01:18.010 --> 01:22.170
因此此脚本将在下面的脚本之后执行｡

01:22.170 --> 01:26.460
在这种情况下, 您可以在TypeScript中使用另一种语法,

01:26.460 --> 01:29.460
那就是您可以使用的declare命令｡

01:29.460 --> 01:34.150
例如, 您可以将某些变数宣告为TypeScript｡

01:34.150 --> 01:36.730
您可以说declare var GLOBAL,

01:36.730 --> 01:38.640
并告诉TypeScript,

01:38.640 --> 01:42.050
例如, 这将是一个字符串, 或者这是任何内容｡

01:42.050 --> 01:43.687
这基本上告诉TypeScript,

01:43.687 --> 01:47.823
“别担心, 它会存在的, ”如果我们保存了它, 我退出这个编译器,

01:49.090 --> 01:52.580
改用webpack, 我们会在页面上看到这个输出,

01:52.580 --> 02:02.270
因为它在技术上是有效的, 通过declare var, 我们也告诉TypeScript它存在｡

02:02.270 --> 02:04.420
现在, 我将删除此dmidecode,

02:04.420 --> 02:08.830
但注意declare､ 此关键字和此命令非常重要｡

02:08.830 --> 02:12.160
它允许你声明TypeScript特性或变量,

02:12.160 --> 02:14.590
你知道它们存在的地方, 或者让TypeScript知道包,

02:14.590 --> 02:23.373
全局变量, 这些是Typescript不能知道的, 但是作为一个开发人员, 你知道它们会存在｡
