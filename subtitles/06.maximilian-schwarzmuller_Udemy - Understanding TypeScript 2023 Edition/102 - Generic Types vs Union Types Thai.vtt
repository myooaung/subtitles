WEBVTT

00:02.180 --> 00:04.432
-: ตอนนี้แหล่งที่มาหนึ่งของความสับสน

00:04.432 --> 00:06.300
ฉันต้องการชี้แจงที่นี่คือความแตกต่างระหว่างประเภท

00:06.300 --> 00:09.030
Generics และ Union

00:09.030 --> 00:11.950
ทำไมคุณถึงสับสนสองคนนี้

00:11.950 --> 00:14.440
ตัวอย่างเช่น ที่เก็บข้อมูลของเราที่นี่

00:14.440 --> 00:16.260
หากเรายอมรับประเภท

00:16.260 --> 00:21.157
Generic ตามประเภทเหล่านี้ เราก็สามารถเขียนใหม่เพื่อพูดว่า

00:21.157 --> 00:23.750
"เราต้องการเก็บสตริง หรือตัวเลข

00:23.750 --> 00:32.660
หรือบูลีนไว้ที่นี่ ใช่ไหม ดังนั้น เราสามารถจัดเก็บสิ่งนั้นได้ หรือพูดให้ชัดเจนคือ ใส่สิ่งนี้ในวงเล็บเพื่อที่เราจะบอกว่าประเภทใดประเภทหนึ่งเหล่านี้เป็นอาร์เรย์

00:32.660 --> 00:35.040
แน่นอนว่าที่นี่ เราสามารถพูดได้ว่า "อืม

00:35.040 --> 00:37.017
สิ่งที่เราได้รับเมื่อเราเพิ่มรายการอาจเป็นสตริง

00:37.017 --> 00:41.120
ตัวเลข หรือบูลีน เมื่อเราลบออก มันก็เหมือนกัน

00:41.120 --> 00:41.120
ทีนี้ ปัญหาของวิธีการนี้คืออะไร?

00:41.120 --> 00:45.880
เมื่อแรกเห็นอาจดูเหมือนว่าประสบความสำเร็จเหมือนกัน แต่จริงๆ แล้วกลับทำสิ่งที่แตกต่างไปจากเดิมอย่างสิ้นเชิง

00:45.880 --> 00:49.630
สิ่งที่เรากำลังจะพูดคือ เรากำลังจัดเก็บข้อมูลชนิดใดก็ได้ในนั้น

00:49.630 --> 00:52.310
ตราบใดที่มันเป็นอาร์เรย์ของสตริง

00:52.310 --> 01:02.930
ตัวเลข หรือบูลีน จากนั้นเราก็เพิ่มข้อมูลชนิดใดก็ได้ที่นี่ ไม่ว่าจะเป็นสตริง ตัวเลข หรือบูลีนและเหมือนกันสำหรับการลบ

01:02.930 --> 01:06.650
ตอนนี้เรามีข้อผิดพลาดบางอย่างอยู่แล้ว เพราะฉันไม่สามารถเริ่มต้นสิ่งนี้ด้วยวิธีทั่วไปได้อีกต่อไป

01:06.650 --> 01:09.830
แต่นอกเหนือจากนั้นมันใช้งานได้

01:09.830 --> 01:15.890
อย่างไรก็ตาม ปัญหาคือสำหรับอันบนนี้ เราไม่ได้บอกว่านี่เป็นอาร์เรย์ของสตริง

01:15.890 --> 01:18.260
หรืออาร์เรย์ของตัวเลข หรืออาร์เรย์ของบูลีน

01:18.260 --> 01:20.630
หมายความว่า เรามีอาร์เรย์ที่สามารถมีสตริง

01:20.630 --> 01:24.190
ตัวเลข และบูลีนผสมกันได้

01:24.190 --> 01:26.290
ดังนั้น หากคุณต้องการบอกว่าเป็นอาร์เรย์ของสตริงหรืออาร์เรย์ของตัวเลข

01:26.290 --> 01:34.403
เราจะต้องพูดว่าอาร์เรย์สตริง อาร์เรย์ตัวเลข หรืออาร์เรย์บูลีน

01:34.403 --> 01:36.020
เราสามารถทำได้ แต่ตอนนี้เรามีปัญหาที่นี่

01:36.020 --> 01:46.750
ตอนนี้ เรากำลังเพิ่มสตริง ตัวเลข หรือบูลีน แต่ขึ้นอยู่กับสิ่งที่เรากำหนดให้อาร์เรย์ข้อมูลนี้เป็นอาร์เรย์ตัวเลข

01:46.750 --> 01:52.320
หรืออาร์เรย์บูลีน หรืออาร์เรย์สตริง เราไม่ได้รับอนุญาตให้เพิ่ม ตัวเลขหรือบูลีนหรือสตริง

01:52.320 --> 01:55.870
ถ้าเรากำหนดให้เป็น string array เราจะไม่สามารถบวกเลขตรงนี้ได้

01:55.870 --> 01:57.833
แต่ที่นี่ฉันสบายดีกับพารามิเตอร์ใดๆ ตราบใดที่มันเป็นตัวเลข

01:57.833 --> 01:59.800
บูลีน หรือสตริง

01:59.800 --> 02:02.850
ดังนั้นปัญหาอยู่ที่นี่กับประเภทสหภาพ

02:02.850 --> 02:08.380
เรายอมรับค่าใด ๆ เหล่านี้ทุกครั้งที่เรียกเมธอดนี้หรือเมธอดนี้

02:08.380 --> 02:11.053
ดังนั้น เราไม่ได้พูดว่า "เฮ้ เมื่อใดก็ตามที่เรากำลังทำงานกับคลาสนี้

02:11.053 --> 02:15.397
คุณต้องตัดสินใจเลือกประเภทใดประเภทหนึ่งและยึดตามนั้น

02:15.397 --> 02:18.150
แต่เราจะบอกว่า เมื่อใดก็ตามที่คุณเรียกวิธีนี้ คุณมีอิสระที่จะ

02:18.150 --> 02:21.830
ใช้ประเภทใดประเภทหนึ่งเหล่านี้

02:21.830 --> 02:23.440
นั่นไม่ใช่สิ่งที่เราต้องการที่นี่

02:23.440 --> 02:29.640
ถ้าฉันเปลี่ยนกลับเป็นการตั้งค่าก่อนหน้านี้ที่เราใช้ประเภททั่วไป

02:29.640 --> 02:33.050
เราก็มีการตั้งค่าอื่น

02:33.050 --> 02:43.950
ที่นี่ เราบอกว่าคุณต้องเลือกหนึ่งครั้งว่าคุณต้องการเก็บข้อมูลประเภทใด จากนั้นคุณจึงได้รับอนุญาตให้เพิ่มข้อมูลประเภทนั้นเท่านั้น

02:43.950 --> 02:45.750
ดังนั้น ถ้าฉันเพิ่มตัวเลข ตัวอย่างเช่น

02:45.750 --> 02:52.623
ฉันได้รับข้อผิดพลาดเพราะนั่นไม่ใช่สตริง และแสดงว่าฉันต้องการจัดการสตริงที่นี่เท่านั้น

02:53.830 --> 02:56.170
เมื่อฉันตั้งค่าประเภททั่วไป

02:56.170 --> 02:57.810
นั่นคือความแตกต่างระหว่างประเภทสหภาพและประเภททั่วไป

02:57.810 --> 03:06.920
ประเภทสหภาพอาจดีมากถ้าคุณต้องการมีฟังก์ชันที่คุณสามารถเรียกด้วยประเภทใดประเภทหนึ่งเหล่านี้ได้ทุกครั้งที่คุณเรียกใช้

03:06.920 --> 03:11.570
ประเภททั่วไปนั้นยอดเยี่ยมหากคุณต้องการล็อคประเภทใดประเภทหนึ่ง

03:11.570 --> 03:15.510
ใช้ประเภทเดียวกันตลอดทั้งอินสแตนซ์ของคลาสที่คุณสร้างขึ้น

03:15.510 --> 03:18.380
ใช้ชนิดเดียวกันตลอดทั้งฟังก์ชัน

03:18.380 --> 03:20.070
นั่นคือที่ที่คุณต้องการประเภททั่วไป

03:20.070 --> 03:25.850
คุณต้องการประเภทสหภาพเมื่อคุณมีความยืดหยุ่นในการมีประเภทที่แตกต่างกันในการเรียกใช้เมธอดทุกครั้ง

03:25.850 --> 03:28.120
กับการเรียกใช้ฟังก์ชันทุกครั้ง

03:28.120 --> 03:30.810
จากนั้น คุณสามารถใช้ประเภทสหภาพได้

03:30.810 --> 03:33.470
ประเภททั่วไปล็อคในประเภท
