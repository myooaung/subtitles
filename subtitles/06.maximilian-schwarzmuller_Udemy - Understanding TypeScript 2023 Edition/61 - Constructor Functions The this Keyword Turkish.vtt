WEBVTT

00:02.160 --> 00:03.330
Sunucu: Artık sınıflar

00:03.330 --> 00:06.080
ve daha uzun süredir var olan tüm kurucu işlevler,

00:06.080 --> 00:09.280
nesnenin genel yapısını tanımlamak için kullanabileceğiniz

00:09.280 --> 00:12.780
özelliklere sahip değildir.

00:12.780 --> 00:14.770
Ayrıca yöntem de ekleyebilirsiniz.

00:14.770 --> 00:17.460
Aslında orada kurucu metodumuz var.

00:17.460 --> 00:19.620
Ancak bu yalnızca sınıfı örneklediğinizde

00:19.620 --> 00:22.940
çağrılan bir yardımcı işlevdir.

00:22.940 --> 00:25.584
Hatırlayın, geçmişte sadece kurucu fonksiyonlarımız

00:25.584 --> 00:28.100
vardı, şimdi bu sözdizimsel şekere sahibiz ama hala

00:28.100 --> 00:30.460
herhangi bir başlatma kodunu çalıştırmak için

00:30.460 --> 00:33.300
ekleyebileceğimiz construct a fonksiyonumuz var.

00:33.300 --> 00:36.350
Ayrıca, oluşturulan nesne üzerinde çağırabileceğiniz

00:36.350 --> 00:38.600
birkaç işlev veya yöntem de eklemek

00:38.600 --> 00:40.980
isteyebilirsiniz.

00:40.980 --> 00:44.000
Örneğin, departman sınıfımızdaki bir

00:44.000 --> 00:46.000
tanımlama yöntemi.

00:46.000 --> 00:47.994
Şimdi bir yöntem şu şekilde eklenir,

00:47.994 --> 00:49.382
yöntemin adı, sonra

00:49.382 --> 00:53.270
iki nokta üst üste yok, eşittir işareti yok, parantezler

00:53.270 --> 00:56.090
ve ardından küme parantezleri.

00:56.090 --> 00:59.070
Parantezler, ihtiyaç duyabileceğiniz tüm argümanları alır.

00:59.070 --> 01:00.780
Şimdi diyelim ki burada hiç ihtiyacımız

01:00.780 --> 01:03.330
yok, aksi takdirde normal bir fonksiyonda yaptığınız gibi

01:03.330 --> 01:05.150
parametre ekleyebilirsiniz.

01:05.150 --> 01:07.280
Ve genellikle her zaman ihtiyacınız olan

01:07.280 --> 01:10.000
şey, küme parantezleri arasında bir fonksiyon gövdesi

01:10.000 --> 01:12.020
veya bir yöntem gövdesidir.

01:12.020 --> 01:14.693
Burada artık yönteminizin mantığını tanımlıyorsunuz.

01:15.580 --> 01:19.570
Ve orada departmanın adını belki biraz daha fazla bilgiyle

01:19.570 --> 01:22.410
birlikte çıkarmak isteyebiliriz.

01:22.410 --> 01:26.230
Bunu elbette burada konsol ile yapabiliriz. log, örneğin, departman,

01:26.230 --> 01:30.620
iki nokta üst üste ve sonra belki isim.

01:30.620 --> 01:32.100
Ancak bu işe yaramayacaktır.

01:32.100 --> 01:34.570
Bu, tanımlanan bu yöntemin içinde veya

01:34.570 --> 01:37.710
sınıfın dışında global bir değişken olarak bulunması

01:37.710 --> 01:40.860
gereken bir değişken adı arayacaktır.

01:40.860 --> 01:42.470
Ve gördüğünüz gibi yaşı seçerse,

01:42.470 --> 01:44.433
isim için bir hata alıyorum, bunu yapmıyorum,

01:44.433 --> 01:46.540
bunu almıyorum çünkü aslında tarayıcıda

01:46.540 --> 01:50.100
pencere nesnesinde küresel bir isim değişkeni var.

01:50.100 --> 01:53.030
Bununla birlikte, bu, buradaki name özelliğine değil,

01:53.030 --> 01:57.130
bu sınıfın dışındaki bir global name değişkenine atıfta bulunacaktır.

01:57.130 --> 01:59.599
Sınıfın içinden bir sınıf özelliğine veya yöntemine

01:59.599 --> 02:01.930
başvurmak için, burada yapıcıda yaptığımız

02:01.930 --> 02:03.590
gibi this anahtar sözcüğünü kullanmamız

02:03.590 --> 02:05.630
gerekir.

02:05.630 --> 02:08.980
Bu daha sonra tipik olarak bu sınıfın oluşturulan

02:08.980 --> 02:12.400
somut örneğine geri döner.

02:12.400 --> 02:14.240
Ve orada nokta gösterimiyle, bu

02:14.240 --> 02:16.600
örneğin tüm özelliklerine ve yöntemlerine

02:16.600 --> 02:17.650
erişebiliriz.

02:17.650 --> 02:19.555
Bu durumda, bu. İsim.

02:19.555 --> 02:24.555
Eğer şimdi, aşağıda, muhasebeyi ararsam. Böyle tarif et.

02:24.583 --> 02:28.110
this anahtar sözcüğü, this çalıştırıldığında, bu sınıfa

02:28.110 --> 02:30.920
dayalı olarak oluşturulan bu somut muhasebe

02:30.920 --> 02:33.730
nesnesine atıfta bulunacaktır.

02:33.730 --> 02:35.530
Şimdi bunu kaydedersem ve yeniden

02:35.530 --> 02:38.570
yüklersek, burada elbette bir yazım hatası olan,

02:38.570 --> 02:40.420
ancak genel olarak çalışan bu çıktıyı

02:40.420 --> 02:42.110
görmeliyiz.

02:42.110 --> 02:43.944
Şimdi buradaki yazım hatasını düzeltelim.

02:43.944 --> 02:46.190
İşte bu şekilde bir yöntem ekleyebiliriz.

02:46.190 --> 02:48.166
Şimdi bu anahtar kelime hakkında önemli bir kelime.

02:48.166 --> 02:50.600
Muhtemelen bildiğiniz gibi, JavaScript

02:50.600 --> 02:54.890
ile biraz çalıştıysanız, this anahtar sözcüğü zor olabilir.

02:54.890 --> 02:56.090
Örneğin, buraya

02:56.090 --> 03:00.090
muhasebe kopyası başka bir nesne eklersem ve bu sadece

03:01.480 --> 03:03.350
tanımlama yöntemine sahip

03:03.350 --> 03:06.430
olan nesnemizdir ve muhasebeyi göstermeye

03:06.430 --> 03:11.270
cesaret edersem. tarif et.

03:11.270 --> 03:15.470
Sonra accountingcopy'yi çağırırsam. bir yöntem olarak tanımlarsanız, ne

03:15.470 --> 03:17.150
olacağını düşünüyorsunuz?

03:17.150 --> 03:19.200
Sence bir hata alır mıyız?

03:19.200 --> 03:21.200
Derleme hatası almadığımızdan

03:21.200 --> 03:22.927
emin olabiliriz.

03:22.927 --> 03:26.360
Ancak çalışma zamanında departmanı tanımsız görüyoruz.

03:26.360 --> 03:28.780
Bunun nedeni, yaptığım şeyin nesne değişmezi

03:28.780 --> 03:32.010
ile oluşturulan bu nesneye, bu sınıfa dayalı olarak

03:32.010 --> 03:34.040
değil, tanımladığınız belirli

03:34.040 --> 03:37.888
bir sınıfa dayalı olmayan kukla bir nesne olarak bir tanımlama

03:37.888 --> 03:41.420
özelliği eklemek olmasıdır.

03:41.420 --> 03:44.360
Ve sonra bu tanımlama özelliğinin değeri,

03:44.360 --> 03:49.000
muhasebe nesnemdeki tanımlama yöntemine bir işaretçidir.

03:49.000 --> 03:52.168
Bu yüzden bu somut nesneyi bulmak için buradaki

03:52.168 --> 03:54.690
yöntemi işaret ediyorum.

03:54.690 --> 03:56.240
Onu infaz etmeyeceğim.

03:56.240 --> 03:57.723
Bu nedenle, bu işlev yürütmesinin

03:57.723 --> 04:00.410
değerini tanımlamak için aktarmıyorum.

04:00.410 --> 04:04.090
Burada açıklamak için gerçekten fonksiyonun kendisini geçiyorum.

04:04.090 --> 04:06.430
Daha sonra burada kopya üzerinde describe dediğimde,

04:06.430 --> 04:08.950
gerçekten de metodu çalıştırıyor ve her şey doğru

04:08.950 --> 04:10.440
çalışıyor.

04:10.440 --> 04:13.690
Sorun şu ki, bu yöntem yürütüldüğünde, bu yöntemin

04:13.690 --> 04:17.040
başlangıçta parçası olduğu bu nesneye, yani

04:17.040 --> 04:21.140
muhasebe nesnesine atıfta bulunmayacaktır.

04:21.140 --> 04:22.350
Bunun yerine, bu, ezberleyebileceğiniz

04:22.350 --> 04:25.050
iyi bir temel kuraldır ve genellikle bir yöntemi

04:25.050 --> 04:29.650
çağırmaktan sorumlu olan şeyi ifade eder.

04:29.650 --> 04:32.190
Ve bu durumda burada describe yöntemini çağırmaktan

04:32.190 --> 04:34.880
sorumlu olan muhasebe kopyasıdır.

04:34.880 --> 04:39.160
Çünkü muhasebe kopyasını tarif ediyoruz.

04:39.160 --> 04:42.320
Dolayısıyla bu, buradaki noktanın önündeki şeye, yani muhasebe

04:42.320 --> 04:43.980
Kopyasına atıfta bulunacaktır.

04:43.980 --> 04:47.530
Ancak bu, isim özelliği olmayan bir nesnedir.

04:47.530 --> 04:49.678
Yani buna eriştiğimde. name, name

04:49.678 --> 04:53.968
özelliğine sahip bir nesneye başvurmadığı

04:53.968 --> 04:56.610
için hata alıyorum.

04:56.610 --> 04:59.220
Yani isim bize gerçekten de tanımsız bir şey veriyor.

04:59.220 --> 05:02.260
İşte bu yüzden bu garip çıktıyı alıyorum.

05:02.260 --> 05:04.310
Aklınızda tutmanız gereken bir şey var,

05:04.310 --> 05:07.470
sadece TypeScript'te değil, bu bir JavaScript meselesi.

05:07.470 --> 05:09.540
Ve elbette, bu nedenle TypeScript'te

05:09.540 --> 05:11.500
de başınıza gelebilir.

05:11.500 --> 05:13.940
Şimdi, bu "bu" sorununu aşmak için,

05:13.940 --> 05:16.660
tanımlama yöntemine bu adı verilen

05:16.660 --> 05:19.730
bir parametre ekleyebilirsiniz.

05:19.730 --> 05:21.380
Bu, TypeScript tarafından

05:21.380 --> 05:25.334
anlaşılan özel bir parametre, özel bir talimattır.

05:25.334 --> 05:28.430
Buraya this adında bir parametre eklerseniz, bu

05:28.430 --> 05:31.420
gerçekten beklenen bir parametre değildir, yine

05:31.420 --> 05:36.010
de herhangi bir değer aktarmadan describe'i çağırabilirsiniz.

05:36.010 --> 05:38.476
Bunun yerine, bu TypeScript tarafından, bunun

05:38.476 --> 05:42.980
neye atıfta bulunulması gerektiğine ilişkin bir ipucu olarak yorumlanır.

05:42.980 --> 05:45.960
Ve şimdi buna bir tür atamak önemlidir.

05:45.960 --> 05:48.810
Ve buradaki tür, bu durumda buradaki sınıf

05:48.810 --> 05:51.780
türümüz yani departmanımız olmalıdır.

05:51.780 --> 05:53.840
Bununla söylemek istediğim

05:53.840 --> 05:56.250
şey, describe çalıştırıldığında,

05:56.250 --> 05:59.375
yani buradaki durumda, her zaman departman

05:59.375 --> 06:05.040
sınıfını temel alan bir örneğe başvurulmalıdır.

06:05.040 --> 06:09.160
Yani sonuçta departman türünde bir nesne olacaktır.

06:09.160 --> 06:12.370
Ve bu nedenle şimdi aşağıda bir hata alıyoruz, burada

06:12.370 --> 06:14.140
bir hata alıyoruz, çünkü burada

06:14.140 --> 06:16.012
sahip olduğumuz şey, burada

06:16.012 --> 06:19.800
muhasebe kopyası üzerinde tanımlamayı çağırdığımızda,

06:19.800 --> 06:24.100
bunu bir departman örneği üzerinde çağırmıyoruz.

06:24.100 --> 06:26.350
Dolayısıyla bu ihlal edilmiş olacaktır.

06:26.350 --> 06:29.540
Bu durumda, departman türünde bir nesneye

06:29.540 --> 06:32.250
başvurulmayacaktır.

06:32.250 --> 06:34.690
Burada bu sahte parametreyi ekleyerek

06:34.690 --> 06:36.920
ekstra bir tür güvenliği sağlıyoruz,

06:36.920 --> 06:39.450
çünkü şimdi bunu kaydetmeye çalıştığımda

06:39.450 --> 06:42.480
buradaki satırla ilgili bir hata alıyorum.

06:42.480 --> 06:44.950
Çünkü şimdi Gerçekten de, beklendiği gibi çalışmayan

06:44.950 --> 06:47.030
bazı kodlar çalıştıracağız.

06:47.030 --> 06:49.260
Bu nedenle, örneğin bunun çalışması için

06:49.260 --> 06:51.140
buraya bir name özelliği ekleyerek

06:52.040 --> 06:55.290
bunu düzeltmemiz gerekir çünkü artık TypeScript Okay'ı

06:55.290 --> 06:57.702
görür, describe'i çağırdığınız nesnenin

06:57.702 --> 07:02.702
artık bir name özelliği vardır, tıpkı bunun olmasını beklediği gibi çünkü bu, aynı zamanda

07:03.840 --> 07:05.803
bir name özelliği olan department

07:05.803 --> 07:08.070
nesnesini temel alır.

07:08.070 --> 07:10.790
Şimdi burada, TypeScript mutlu olacak

07:10.790 --> 07:12.270
çünkü isim ekledik.

07:12.270 --> 07:14.934
Bunu kaldırırsam, hatayı adıyla birlikte geri

07:14.934 --> 07:17.277
alırız, ancak bu işe yarar ve daha önce tanımlanmamış

07:17.277 --> 07:19.750
çıktıdan kaçınırız.

07:19.750 --> 07:22.770
Bu yüzden bunu anlamak önemlidir.

07:22.770 --> 07:26.140
Ve kodunuza ekleyebileceğiniz bu iyileştirmenin farkında

07:26.140 --> 07:28.410
olmanız, daha önce aşağıda olduğu gibi

07:28.410 --> 07:31.190
istenmeyen davranışları yakaladığınızdan emin

07:31.190 --> 07:32.993
olmak için önemlidir.
