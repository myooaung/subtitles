WEBVTT

00:02.190 --> 00:04.860
-: ฉันต้องการเริ่มต้นด้วยคุณสมบัติเนมสเปซ

00:04.860 --> 00:06.810
เพื่อแสดงให้คุณเห็นว่ามันทำงานอย่างไร

00:06.810 --> 00:09.980
ฉันจะคว้าอินเทอร์เฟซทั้งสองนี้ไว้ที่นี่

00:09.980 --> 00:11.480
อินเทอร์เฟซแบบลากและวาง

00:11.480 --> 00:14.140
ตัดออกจากแอป ts และเพิ่มไฟล์ใหม่

00:14.140 --> 00:19.140
dragdropinterfaces ตัวอย่างเช่น

00:21.270 --> 00:25.180
ตอนนี้เราสามารถวางลงในนั้นและตอนนี้เพื่อใช้เนมสเปซ

00:25.180 --> 00:33.620
สิ่งที่เราต้องทำคือเพิ่มคีย์เวิร์ดเนมสเปซและวงเล็บปีกกา

00:33.620 --> 00:35.880
ตอนนี้เราต้องตั้งชื่อเนมสเปซนี้ด้วย

00:35.880 --> 00:39.590
และที่นี่ฉันจะตั้งชื่อว่า DD Interfaces สำหรับการลากและวาง

00:39.590 --> 00:41.660
ชื่อนั้นขึ้นอยู่กับคุณ

00:41.660 --> 00:43.640
ในปีนี้เป็นฟีเจอร์ TypeScript ไม่ใช่ฟีเจอร์

00:43.640 --> 00:45.250
JavaScript

00:45.250 --> 00:47.750
มันไม่ได้คอมไพล์เป็น Vanilla JavaScript

00:47.750 --> 00:50.340
เพราะไม่มีอะไรเทียบเท่าโดยตรง

00:50.340 --> 00:55.693
โดยทั่วไปแล้ว TypeScript จะคอมไพล์เป็นวัตถุที่คุณสามารถพูดได้

00:55.693 --> 01:00.440
ไปยังออบเจกต์ซึ่งสิ่งที่คุณจะใส่ลงในเนมสเปซจะถูกจัดเก็บไว้ในคุณสมบัติ

01:00.440 --> 01:02.140
แต่คุณไม่ต้องกังวลเกี่ยวกับสิ่งนั้น

01:02.140 --> 01:10.640
เพราะการแก้ไขการเข้าถึงคุณสมบัติเหล่านี้และการทำงานทุกอย่างจะได้รับการดูแลโดย TypeScript

01:10.640 --> 01:13.940
ตอนนี้เราสามารถย้ายส่วนต่อประสานเหล่านี้ไปยังเนมสเปซได้

01:13.940 --> 01:16.130
และเกือบจะเสร็จแล้ว

01:16.130 --> 01:18.040
ตอนนี้เรามีปัญหาอย่างหนึ่ง อย่างไรก็ตาม

01:18.040 --> 01:22.280
ขณะนี้อินเทอร์เฟซเหล่านี้พร้อมใช้งานในเนมสเปซนี้เท่านั้น

01:22.280 --> 01:25.530
อีกอย่าง คุณไม่สามารถใส่อินเทอร์เฟซลงในเนมสเปซได้

01:25.530 --> 01:28.057
คุณยังสามารถใส่อะไรก็ได้ในนั้น คลาส

01:28.057 --> 01:30.780
ค่าคงที่ อะไรก็ได้ที่คุณต้องการ

01:30.780 --> 01:33.900
สิ่งที่คุณต้องการสามารถใส่ในเนมสเปซได้

01:33.900 --> 01:37.150
ดังนั้นโดยพื้นฐานแล้ว คุณสามารถใส่เนมสเปซรอบรหัสใดก็ได้ที่คุณมี

01:37.150 --> 01:39.830
แต่ปัญหาที่เรามีคือคุณสมบัติเหล่านี้

01:39.830 --> 01:44.800
อินเทอร์เฟซเหล่านี้ตอนนี้ใช้ได้เฉพาะภายในเนมสเปซนั้นเท่านั้น

01:44.800 --> 01:47.280
อย่างที่คุณเห็น เราไม่มีอะไรอื่นในนั้น

01:47.280 --> 01:51.600
แน่นอนว่าตอนนี้เราสามารถนำโค้ดที่ขึ้นอยู่กับพวกมันกลับเข้ามาในเนมสเปซนี้

01:51.600 --> 01:58.940
แต่จากนั้นอีกครั้งเราจะพังเพราะกลายเป็นว่าเรามีคลาสที่ค่อนข้างยาวซึ่งขึ้นอยู่กับอินเทอร์เฟซเหล่านี้

01:58.940 --> 02:02.900
เรามีคลาสรายการโครงการและคลาสรายการโครงการ

02:02.900 --> 02:05.260
ขึ้นอยู่กับอินเทอร์เฟซเหล่านี้

02:05.260 --> 02:08.922
ดังนั้นเราจะต้องเพิ่มจำนวนมากในเนมสเปซนั้น

02:08.922 --> 02:16.850
ดังนั้น สิ่งที่คุณทำได้คือเพิ่มคีย์เวิร์ดส่งออกหน้าอินเทอร์เฟซเพื่อส่งออกฟีเจอร์จากเนมสเปซ

02:16.850 --> 02:22.110
สิ่งนี้หมายความว่าขณะนี้อินเทอร์เฟซเหล่านี้พร้อมใช้งานภายในเนมสเปซนี้

02:22.110 --> 02:24.487
แต่ยังอยู่นอกไฟล์นี้ด้วย

02:24.487 --> 02:26.100
และเราจะเห็นวิธีการทำงานในอีกไม่กี่วินาที

02:26.100 --> 02:30.710
แต่ด้วยการที่เราสร้างอินเทอร์เฟซนี้หรืออะไรก็ตามที่เรากำลังส่งออก

02:30.710 --> 02:36.610
ซึ่งไม่ได้จำกัดเฉพาะอินเทอร์เฟซที่มีอยู่ภายนอกไฟล์นี้เช่นกัน

02:36.610 --> 02:41.140
หากเรานำเข้าหรือใช้เนมสเปซนั้นโดยทั่วไป

02:41.140 --> 02:41.973
และแน่นอนอีกครั้ง

02:41.973 --> 02:44.580
คุณไม่สามารถส่งออกอินเทอร์เฟซในเนมสเปซได้

02:44.580 --> 02:45.636
แต่อะไรก็ได้

02:45.636 --> 02:52.410
ทีนี้ คำถามก็คือ เราจะนำเข้าเนมสเปซนี้กลับเข้ามาในแอปได้อย่างไร

02:52.410 --> 02:52.410
ts

02:52.410 --> 02:56.210
และสำหรับสิ่งนั้น TypeScript มีไวยากรณ์พิเศษที่คุณสามารถใช้ได้

02:56.210 --> 02:57.867
กลับไปที่ด้านบนของแอพ ts และตอนนี้คุณเพิ่มเครื่องหมายทับสามอัน

02:57.867 --> 03:03.690
สำคัญสามอัน ไม่ใช่แค่สองอัน เพราะจริงๆ แล้วนี่ไม่ใช่ความคิดเห็นปกติที่เรากำลังสร้างตอนนี้

03:03.690 --> 03:15.500
นี่จะเป็นไวยากรณ์ที่ TypeScript เลือกขึ้นมาสำหรับความคิดเห็นพิเศษ คุณสามารถพูดได้ว่า TypeScript เข้าใจถ้าเป็นเช่นนั้น เริ่มต้นด้วยสามทับ

03:15.500 --> 03:19.301
ที่นั่น คุณเขียนแท็ก XML แบบปิดตัวเอง จากนั้นใส่วงเล็บมุมเปิด

03:19.301 --> 03:25.790
จากนั้นส่งต่อวงเล็บมุมปิดด้วยเครื่องหมายทับ และในเส้นทางอ้างอิงเท่ากับ

03:25.790 --> 03:32.370
และจากนั้นชื่อไฟล์ที่คุณต้องการนำเข้า

03:32.370 --> 03:35.217
ในกรณีของฉันที่นี่ dragdropinterfaces ท.

03:39.330 --> 03:45.220
ตอนนี้ TypeScript เข้าใจและเลือกสิ่งนี้เพราะอย่างที่ฉันพูดถึงด้วยเครื่องหมายทับสามอันเริ่มต้น

03:45.220 --> 03:50.110
มันเป็นไวยากรณ์พิเศษที่ TypeScript เข้าใจเช่นเดียวกับที่เข้าใจสิ่งอ้างอิงนี้

03:50.110 --> 03:51.960
นี่ไม่ใช่วานิลลาจาวาสคริปต์

03:51.960 --> 03:53.970
วานิลลาจาวาสคริปต์ไม่ได้สังเกตเห็น

03:53.970 --> 03:58.480
และนี่ไม่ใช่สิ่งที่มันจะดูเหมือนเมื่อคอมไพล์แล้ว

03:58.480 --> 04:00.430
ตอนนี้บรรลุอะไร?

04:00.430 --> 04:07.104
สิ่งนี้ทำให้สำเร็จว่าตอนนี้ส่วนต่อประสานเนมสเปซ DD นี้มีให้ใช้งานในแอพ

04:07.104 --> 04:07.104
ท.

04:07.104 --> 04:14.300
อย่างไรก็ตาม หากคุณเลื่อนลงมา คุณจะเห็นบรรณาธิการของฉันยังคงบ่นและถ้าเราพยายามบันทึกเนื่องจากเราทุกคนทำผิดพลาดในการรวบรวม

04:14.300 --> 04:16.410
ดูเหมือนว่าจะไม่สามารถใช้ได้

04:16.410 --> 04:19.730
ดูเหมือนว่าอินเทอร์เฟซแบบลากไม่ได้จะพร้อมใช้งานที่นี่

04:19.730 --> 04:22.386
มีสิ่งพิเศษเกี่ยวกับเนมสเปซ

04:22.386 --> 04:32.557
คุณสามารถใช้มันเพื่อแยกรหัสของคุณและจำไว้ว่าเมื่อฉันกล่าวไว้ก่อนหน้านี้ว่าสิ่งที่คุณมีในเนมสเปซนั้นสามารถใช้ได้จากทุกที่ในเนมสเปซนั้น

04:32.557 --> 04:34.157
ปรากฎว่าคุณสามารถแยกเนมสเปซออกเป็นหลาย

04:34.157 --> 04:51.797
ๆ ไฟล์โดยการส่งออกสิ่งต่าง ๆ ในเนมสเปซแล้วใช้ไวยากรณ์นำเข้าพิเศษนี้ แต่คุณต้องใส่สิ่งที่ต้องการใช้จากเนมสเปซนำเข้านั้นหรือจากไฟล์ที่นำเข้านั้นลงใน เนมสเปซเดียวกัน

04:51.797 --> 04:55.050
ดังนั้น DD Interfaces อาจไม่ใช่ชื่อที่ดีที่สุด

04:55.050 --> 04:58.010
บางทีเราแค่ตั้งชื่อเป็นแอพ

04:58.010 --> 04:59.740
ทีนี้ถ้าเราตั้งชื่อเป็น app ตรงนี้ เราก็เข้าไปที่

04:59.740 --> 05:04.180
app ได้เลย ts และสร้างเนมสเปซที่มีชื่อเดียวกันที่นี่

05:04.180 --> 05:05.630
แอปเนมสเปซ

05:05.630 --> 05:06.890
และในขณะนี้ ลองใส่ทุกอย่างลงในเนมสเปซนั้น

05:06.890 --> 05:14.300
และตอนนี้คุณเห็นว่าข้อผิดพลาดหายไปแล้ว ไม่มีจุดสีแดงทางด้านขวา

05:14.300 --> 05:15.513
อย่างไรก็ตาม ถ้าฉันบันทึก

05:15.513 --> 05:17.850
ฉันจะยังคงได้รับข้อผิดพลาดที่นี่

05:17.850 --> 05:22.850
ตัวอย่างเช่น รายชื่อโครงการที่เสร็จสิ้นแล้วจะไม่ถูกใช้

05:25.010 --> 05:26.300
ถูกต้องแล้ว

05:26.300 --> 05:28.210
ฉันไม่ได้ใช้มัน

05:28.210 --> 05:29.600
ฉันก็ไม่ต้องการมันเช่นกัน

05:29.600 --> 05:32.610
เราจึงสามารถลบแนวคิดเหล่านี้ได้ที่นี่

05:32.610 --> 05:38.040
ถ้าเราบันทึกสิ่งนี้ ตอนนี้มันรวบรวมโดยไม่มีข้อผิดพลาด

05:38.040 --> 05:41.920
คำถามคือผลลัพธ์ของการรวบรวมนี้คืออะไร

05:41.920 --> 05:44.260
ตอนนี้เรามีหนึ่งหรือสองไฟล์หรือไม่?

05:44.260 --> 05:46.170
ลองดูที่โฟลเดอร์ดิสก์และที่นั่นคุณเห็นว่าคุณมีไฟล์

05:46.170 --> 05:53.980
App JS แล้วก็โค้ดบางส่วนที่นี่และไฟล์ JS อินเทอร์เฟซแบบลากและวาง

05:53.980 --> 05:56.690
เราจึงได้ผลลัพธ์เป็นสองไฟล์

05:56.690 --> 06:04.360
ตอนนี้ไฟล์อินเทอร์เฟซของ dragon drop ค่อนข้างว่างเปล่าเพราะคุณได้เรียนรู้ว่าอินเทอร์เฟซนั้นไม่ได้คอมไพล์กับสิ่งใดเลย

06:04.360 --> 06:07.300
ไม่มี JavaScript ที่เทียบเท่ากับอินเทอร์เฟซ

06:07.300 --> 06:09.270
มันเป็นคุณสมบัติ TypeScript ล้วนๆ

06:09.270 --> 06:15.509
ดังนั้นเราจึงสามารถนำเข้าด้วยไวยากรณ์ TypeScript ที่นี่เพื่อใช้และรับการปรับปรุงประเภททั้งหมดที่เราได้เรียนรู้

06:15.509 --> 06:20.060
แต่ในการผลิตนั้นไม่สำคัญว่าจะอยู่ในไฟล์แยกต่างหากหรือไม่

06:20.060 --> 06:21.840
แน่นอน คำถามก็คือถ้าเราใส่บางอย่างที่มีอยู่ในการผลิต

06:21.840 --> 06:30.000
ซึ่งมีอยู่ใน JavaScript ลงในไฟล์แยกต่างหาก

06:30.000 --> 06:33.373
ตัวอย่างเช่น enum และคลาสโปรเจ็กต์อยู่ที่นี่

06:35.520 --> 06:37.610
ฉันจะคว้าทั้งสองอย่าง สร้างไฟล์ใหม่

06:37.610 --> 06:41.410
โปรเจ็กต์ dash model TS และใส่สถานะโปรเจ็กต์ของฉัน

06:41.410 --> 06:46.040
enum และคลาสโปรเจ็กต์ในนั้น

06:46.040 --> 06:49.070
เช่นเดียวกับก่อนที่เราจะเพิ่มเนมสเปซที่นี่

06:49.070 --> 06:51.790
ชื่อต้องเป็น App ดังนั้นจึงต้องทำเนมสเปซที่เราต้องการใช้ด้วย

06:51.790 --> 06:54.020
และเราต้องส่งออกคุณสมบัติเหล่านี้ในนั้น

06:54.020 --> 07:02.640
เพื่อที่เราจะสามารถใช้มันใน ไฟล์อื่นในเนมสเปซเดียวกัน แต่เป็นไฟล์อื่นด้วย

07:02.640 --> 07:05.900
ตอนนี้กลับมาในแอป ts เราต้องนำเข้าไฟล์ที่สองนั้น

07:05.900 --> 07:07.890
ดังนั้นฉันจะทำซ้ำการนำเข้านี้และแบบจำลองเส้นประโครงการนำเข้าทั้งหมด

07:07.890 --> 07:11.515
ts

07:11.515 --> 07:13.800
ถ้าฉันบันทึกไว้และตอนนี้คอมไพล์แล้ว

07:13.800 --> 07:16.610
และเราเห็นไฟล์ JavaScript ของโมเดลโปรเจ็กต์

07:16.610 --> 07:19.490
และในนั้นเราเห็นรหัสบางอย่าง

07:19.490 --> 07:22.770
คำถามคือตอนนี้ใบสมัครของเราใช้งานได้แล้วหรือยัง?

07:22.770 --> 07:24.620
เพื่อสิ่งนั้น ลองโหลดซ้ำและลองเพิ่มโครงการที่นี่

07:25.480 --> 07:29.903
แล้วคุณจะเห็นว่า เราได้รับข้อผิดพลาด

07:29.903 --> 07:33.183
ไม่สามารถอ่านคุณสมบัติที่ใช้งานอยู่ของ undefined

07:34.120 --> 07:38.854
เหตุผลก็คือไฟล์ของเราถูกรวบรวมแบบสแตนด์อโลน

07:38.854 --> 07:41.410
เนมสเปซมีอยู่ในโลกของ TypeScript อย่างที่ฉันพูด

07:41.410 --> 07:44.640
ไม่มี JavaScript ที่เทียบเท่าสำหรับมัน

07:44.640 --> 07:48.263
ดังนั้นปัญหาที่เรามีคือในโลกของ TypeScript ทุกอย่างยอดเยี่ยมเพราะ

07:48.263 --> 07:51.610
TypeScript สามารถค้นหาทุกสิ่งที่เราต้องการ

07:51.610 --> 07:54.420
ตัวอย่างเช่น เมื่อฉันพูดถึงโปรเจ็กต์ที่นี่

07:54.420 --> 07:58.130
เมื่อฉันอ้างอิงประเภทโปรเจ็กต์ที่นี่ในคลาสสถานะโปรเจ็กต์

07:58.130 --> 07:59.310
ประเภทโปรเจ็กต์นี้

07:59.310 --> 08:02.840
คลาสโปรเจ็กต์นี้ถูกกำหนดไว้ในโมเดลโปรเจ็กต์

08:02.840 --> 08:06.020
ตอนนี้ TypeScript จะไม่บ่นความไม่สมบูรณ์ของคุณเพราะเรานำเข้าโมเดลนั้น

08:06.020 --> 08:07.570
แต่การนำเข้าที่นี่จริงๆ

08:07.570 --> 08:18.150
แล้วหมายความว่าเราบอก TypeScript ว่าจะหาประเภทนั้นได้จากที่ใดเมื่อคอมไพล์เป็น JavaScript แล้ว การตัดการเชื่อมต่อจะถูกทำลายโดยพื้นฐานแล้ว

08:18.150 --> 08:25.130
ดังนั้นในโค้ด JavaScript เมื่อดำเนินการและเมื่อเราพยายามสร้างโครงการใหม่โดยการสร้างอินสแตนซ์โครงการ

08:25.130 --> 08:29.610
JavaScript ไม่พบคลาสโครงการหรือฟังก์ชันคอนสตรัคเตอร์นี้

08:29.610 --> 08:32.980
ดังนั้นเราจึงต้องทำให้แน่ใจว่าเราขาดการเชื่อมต่อ

08:32.980 --> 08:35.420
และเพื่อที่เราจะได้ไปที่

08:35.420 --> 08:39.640
TS (พึมพำ) และตั้งค่าตัวเลือกไฟล์นี้

08:39.640 --> 08:45.540
เราสามารถแสดงความคิดเห็นในนี้และแนวคิดเบื้องหลังไฟล์ออกคือคุณบอก

08:45.540 --> 08:48.620
TypeScript ว่าควรเชื่อมต่อเนมสเปซ

08:48.620 --> 08:49.670
ดังนั้น ข้อมูลอ้างอิงเหล่านี้

08:49.670 --> 08:51.740
ซึ่งมีระหว่างการคอมไพล์เป็นไฟล์

08:51.740 --> 08:53.950
JavaScript ไฟล์เดียว แทนที่จะคอมไพล์ไฟล์

08:53.950 --> 08:56.970
JavaScript หลายไฟล์

08:56.970 --> 08:59.210
ดังนั้นที่นี่สำหรับไฟล์ออก เราสามารถพูดได้ว่าเราต้องการมีไฟล์ในโฟลเดอร์ดิสก์

08:59.210 --> 09:04.770
ซึ่งเราตั้งชื่อว่าบางทีบันเดิล

09:04.770 --> 09:04.770
js

09:05.630 --> 09:07.050
และถ้าเราทำเช่นนั้นและบันทึก

09:07.050 --> 09:08.700
เราจะได้รับข้อผิดพลาดที่นี่

09:09.650 --> 09:17.250
เราจะได้รับข้อผิดพลาดว่ารองรับเฉพาะ AMD และโมดูลระบบพร้อมกับไฟล์ออก

09:17.250 --> 09:19.540
ตอนนี้ เราไม่จำเป็นต้องเข้าใจทุกอย่างที่นี่

09:19.540 --> 09:23.160
โดยพื้นฐานแล้วมีวิธีต่างๆ ในการโหลดหรือรวมไฟล์ JavaScript ต่างๆ

09:23.160 --> 09:26.120
เข้าด้วยกันเป็นไฟล์เดียวด้วยเหตุผลทางประวัติศาสตร์

09:26.120 --> 09:31.250
และวิธีพัฒนาไฟล์ทั้งหมด และคุณสามารถเรียนรู้เพิ่มเติมเกี่ยวกับประเภทการรวมต่างๆ เหล่านี้ได้ในแหล่งข้อมูลที่แนบมา

09:31.250 --> 09:35.340
หากคุณ ต้องการคุณไม่จำเป็นต้องแม้ว่า

09:35.340 --> 09:40.470
ดังนั้นโดยพื้นฐานแล้วสิ่งที่เราต้องทำที่นี่คือเราต้องตั้งค่าโมดูลซึ่งถูกเน้นแล้วว่าเป็นข้อผิดพลาดที่นี่

09:40.470 --> 09:41.598
ไม่ใช่สำหรับ JS ทั่วไป

09:41.598 --> 09:43.943
แต่สำหรับ AMD เป็นต้น

09:45.400 --> 09:50.010
ถ้าเราทำอย่างนั้น มันจะคอมไพล์โดยไม่มีปัญหาแม้ว่ามันจะยังบ่นอยู่ที่นี่

09:50.010 --> 09:52.140
แต่มันไม่เข้าใจว่าฉันเปลี่ยนมัน

09:52.140 --> 09:53.860
และตอนนี้สิ่งที่เกิดขึ้นคือมีไฟล์

09:53.860 --> 09:56.570
JS บันเดิลใหม่อยู่ใน dist

09:56.570 --> 10:00.310
ถ้าฉันลบไฟล์ JavaScript ทั้งหมดในโฟลเดอร์ดิสก์และรีสตาร์ท

10:00.310 --> 10:05.580
TSC dash เราจะประมวลผล ดังนั้นคอมไพเลอร์คุณจะเห็นเฉพาะไฟล์บันเดิล JS

10:05.580 --> 10:08.600
เท่านั้นที่ถูกสร้างขึ้น

10:08.600 --> 10:13.250
ไฟล์นี้จะเก็บโค้ดทั้งหมดของเราในเวอร์ชันที่คอมไพล์และแปล

10:13.250 --> 10:15.400
ดังนั้นตอนนี้ในดัชนี HTML

10:15.400 --> 10:20.300
เราแค่ต้องนำเข้าบันเดิล JS ที่นี่แทน App JS

10:20.300 --> 10:23.610
และถ้าเราโหลดซ้ำที่นี่ เราก็มีแอปพลิเคชันที่ใช้งานได้อีกครั้ง

10:23.610 --> 10:25.830
ซึ่งเราสามารถใช้การลากและวางทุกอย่างได้

10:25.830 --> 10:28.260
เพราะตอนนี้ทุกอย่างอยู่ในไฟล์เดียว

10:28.260 --> 10:32.661
แต่อยู่ในผลลัพธ์สุดท้ายเท่านั้น

10:32.661 --> 10:34.230
ในระหว่างการพัฒนา เรามีเนมสเปซเหล่านี้ที่นี่

10:34.230 --> 10:36.260
ซึ่งเป็นขั้นตอนหนึ่งในทิศทางที่ถูกต้อง

10:36.260 --> 10:41.970
เนื่องจากสามารถจัดการได้มากขึ้นเล็กน้อย

10:41.970 --> 10:44.350
ตอนนี้มาแบ่งไฟล์นี้ออกเป็นไฟล์อื่นๆ

10:44.350 --> 10:48.283
มากกว่านี้ก่อนที่เราจะดูโมดูล TS ของตัวเลือกการแยกเฉลี่ย
