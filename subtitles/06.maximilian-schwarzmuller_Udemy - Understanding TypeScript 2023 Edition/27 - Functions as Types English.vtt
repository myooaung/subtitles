WEBVTT

1
00:00:02.140 --> 00:00:04.980
<v ->So you can use types for function parameters</v>

2
00:00:04.980 --> 00:00:06.750
and for the return value

3
00:00:06.750 --> 00:00:08.100
of the function.

4
00:00:08.100 --> 00:00:10.420
Now, to take it to the next level,

5
00:00:10.420 --> 00:00:14.820
what if their also were a function type itself.

6
00:00:14.820 --> 00:00:17.170
Now let me make it clear what I mean.

7
00:00:17.170 --> 00:00:19.333
Let's say we have a variable 'combinevalues'

8
00:00:21.360 --> 00:00:24.200
and this variable by default has a type of 'any.'

9
00:00:24.200 --> 00:00:26.860
Now as you learned, 'any' is not that useful.

10
00:00:26.860 --> 00:00:29.617
What I wanna do eventually is, I want to set

11
00:00:29.617 --> 00:00:32.600
'combinevalues' equal to 'add.'

12
00:00:32.600 --> 00:00:35.330
So I wanna store that 'add' function,

13
00:00:35.330 --> 00:00:37.430
a pointer at this 'add' function,

14
00:00:37.430 --> 00:00:39.160
in 'combinevalues'

15
00:00:39.160 --> 00:00:41.580
so that in the end, we can console log,

16
00:00:41.580 --> 00:00:44.520
combine values, and execute 'combinevalues'

17
00:00:44.520 --> 00:00:47.480
as a function to which it has 8 and 8.

18
00:00:47.480 --> 00:00:51.150
Now if I save that, and I execute this,

19
00:00:51.150 --> 00:00:52.130
after compiling it,

20
00:00:52.130 --> 00:00:54.660
so I've compiled this file and then we let this reload,

21
00:00:54.660 --> 00:00:55.840
we get 16 here.

22
00:00:55.840 --> 00:00:58.820
So, that works, and we would expect it to work because

23
00:00:58.820 --> 00:01:00.880
that is normal JavaScript code.

24
00:01:00.880 --> 00:01:03.350
We can store a pointer at a function,

25
00:01:03.350 --> 00:01:05.440
in a number variable, and then the offer

26
00:01:05.440 --> 00:01:07.300
execute this variable as a function,

27
00:01:07.300 --> 00:01:08.580
because, well, it points

28
00:01:08.580 --> 00:01:09.910
at the function, right?

29
00:01:09.910 --> 00:01:13.250
So we can execute that function, through that variable.

30
00:01:13.250 --> 00:01:15.900
The problem we have with this snippet here from a

31
00:01:15.900 --> 00:01:19.640
TypeScript perspective, just is that 'combinevalues'

32
00:01:19.640 --> 00:01:20.670
is any.

33
00:01:20.670 --> 00:01:24.520
So if I set 'combinevalues' to a number here thereafter,

34
00:01:24.520 --> 00:01:27.910
of course, we can't compile this unfortunately

35
00:01:27.910 --> 00:01:30.543
because TypeScript has no chance of detecting that

36
00:01:30.543 --> 00:01:34.230
this is unwanted or that this could cause a problem.

37
00:01:34.230 --> 00:01:36.220
But a run time, it would get an error

38
00:01:36.220 --> 00:01:39.090
because obviously we tried to execute 'combinevalues'

39
00:01:39.090 --> 00:01:42.080
as function, when it actually is a number.

40
00:01:42.080 --> 00:01:44.870
Now we want to avoid this, and for that we need to be clear

41
00:01:44.870 --> 00:01:48.650
that 'combinevalues' will hold a function.

42
00:01:48.650 --> 00:01:50.550
Now the first step into that direction,

43
00:01:50.550 --> 00:01:54.770
is that we set the type here, to function.

44
00:01:54.770 --> 00:01:57.940
Function is a type provided by TypeScript in the end,

45
00:01:57.940 --> 00:02:00.870
and this makes it clear that whatever we store in here

46
00:02:00.870 --> 00:02:02.230
has to be a function.

47
00:02:02.230 --> 00:02:05.350
Therefore, here I'm getting an error, because 5 is a number

48
00:02:05.350 --> 00:02:06.660
and not a function.

49
00:02:06.660 --> 00:02:09.670
And if I comment this out, we can compile this,

50
00:02:09.670 --> 00:02:12.860
otherwise we would get an error during compilation,

51
00:02:12.860 --> 00:02:15.380
and now it is again runs as expected.

52
00:02:15.380 --> 00:02:17.940
So this is good, but it's not perfect

53
00:02:17.940 --> 00:02:21.460
because now we say this should be a function,

54
00:02:21.460 --> 00:02:25.290
but it could also set 'combinevalues' equal to

55
00:02:25.290 --> 00:02:27.150
'printResult' for example here.

56
00:02:27.150 --> 00:02:29.600
And of course TypeScript would not complain because

57
00:02:29.600 --> 00:02:32.620
'printResult' is a function, but of course it's not

58
00:02:32.620 --> 00:02:34.800
a function that takes two arguments.

59
00:02:34.800 --> 00:02:38.720
So again if I compile this, TypeScript will not complain.

60
00:02:38.720 --> 00:02:42.470
But if we reload we see undefined here and Result 8.

61
00:02:42.470 --> 00:02:45.980
So I don't get the result I want because I stored

62
00:02:45.980 --> 00:02:47.350
the wrong function in there.

63
00:02:47.350 --> 00:02:49.980
Again, it would be nice if TypeScript would tell us

64
00:02:49.980 --> 00:02:51.340
about that.

65
00:02:51.340 --> 00:02:54.410
TypeScript can't inform us about this because all we said

66
00:02:54.410 --> 00:02:58.040
to TypeScript is that we want to store a function there

67
00:02:58.040 --> 00:03:00.550
and this is clearly the case.

68
00:03:00.550 --> 00:03:03.810
So it would be good if we could be more precise regarding

69
00:03:03.810 --> 00:03:07.200
how the function should look like that we want to store

70
00:03:07.200 --> 00:03:08.380
in 'combinevalues.'

71
00:03:08.380 --> 00:03:11.900
And that's where function types come in to play.

72
00:03:11.900 --> 00:03:15.690
Function types are types that describe a function

73
00:03:15.690 --> 00:03:18.360
regarding the parameters and the return value

74
00:03:18.360 --> 00:03:19.870
of that function.

75
00:03:19.870 --> 00:03:23.710
A function type is created with this arrow function

76
00:03:23.710 --> 00:03:25.530
notation you know from JavaScript

77
00:03:25.530 --> 00:03:28.890
or at least close to that notation.

78
00:03:28.890 --> 00:03:31.610
You don't add curly braces here because we aren't

79
00:03:31.610 --> 00:03:33.690
creating an arrow function here, we are creating

80
00:03:33.690 --> 00:03:35.450
a function type instead.

81
00:03:35.450 --> 00:03:37.180
Now on the right side of this arrow,

82
00:03:37.180 --> 00:03:40.840
you specify the return type of the function you eventually

83
00:03:40.840 --> 00:03:42.640
want to be able to store in here.

84
00:03:42.640 --> 00:03:44.120
That should be number.

85
00:03:44.120 --> 00:03:47.200
Now with that we're saying, 'combinevalues' accepts

86
00:03:47.200 --> 00:03:50.430
any function that takes no parameters and then

87
00:03:50.430 --> 00:03:51.840
returns a number.

88
00:03:51.840 --> 00:03:54.180
Now, that's of course not entirely what we want.

89
00:03:54.180 --> 00:03:57.130
We want to make sure that 'combinevalues' takes a function

90
00:03:57.130 --> 00:04:01.400
or is able to store functions that take 2 numbers

91
00:04:01.400 --> 00:04:02.400
and return a number.

92
00:04:02.400 --> 00:04:05.040
And for that we can add parameters here to this

93
00:04:05.040 --> 00:04:06.020
function type.

94
00:04:06.020 --> 00:04:09.060
We don't have to match the parameters names from up there,

95
00:04:09.060 --> 00:04:10.510
just types.

96
00:04:10.510 --> 00:04:14.070
So we could have a which should of type number and b

97
00:04:14.070 --> 00:04:15.660
which should be of type number.

98
00:04:15.660 --> 00:04:18.322
And now what we are saying to TypeScript is that

99
00:04:18.322 --> 00:04:22.930
'combinevalues' should accept any function that takes

100
00:04:22.930 --> 00:04:24.350
two parameters

101
00:04:24.350 --> 00:04:27.780
where each parameter is a number, and where the function

102
00:04:27.780 --> 00:04:29.690
overall then returns a number.

103
00:04:29.690 --> 00:04:33.380
And that's why TypeScript does not complain about us

104
00:04:33.380 --> 00:04:36.890
storing 'add' in combine values, because 'add'

105
00:04:36.890 --> 00:04:40.632
is a function that perfectly satisfies this type definition.

106
00:04:40.632 --> 00:04:44.360
But it does complain about 'printResult' because

107
00:04:44.360 --> 00:04:48.690
'printResult' as it tells us here, is a function of type

108
00:04:48.690 --> 00:04:52.310
one argument which is a number, nothing is returned,

109
00:04:52.310 --> 00:04:55.810
where as we actually expect to get a function with

110
00:04:55.810 --> 00:04:58.700
two arguments where each argument is a number

111
00:04:58.700 --> 00:05:00.480
and we also return a number.

112
00:05:00.480 --> 00:05:03.440
So we have a mismatch here, and if I would try to

113
00:05:03.440 --> 00:05:06.270
compile this, we therefore would get an error here,

114
00:05:06.270 --> 00:05:07.110
of course,

115
00:05:07.110 --> 00:05:10.930
in the compiler, and we only can fix this by removing

116
00:05:10.930 --> 00:05:12.060
this line of code.

117
00:05:12.060 --> 00:05:15.140
Now we are able to recompile this without errors.

118
00:05:15.140 --> 00:05:17.413
And now this runs as expected.

119
00:05:18.290 --> 00:05:20.887
So function types, allow us to describe

120
00:05:20.887 --> 00:05:23.890
which type of function specifically

121
00:05:23.890 --> 00:05:25.420
we want to use somewhere.

122
00:05:25.420 --> 00:05:27.990
Be that an expected value in a parameter,

123
00:05:27.990 --> 00:05:30.300
for create a function with some call back,

124
00:05:30.300 --> 00:05:32.303
or, like here, a variable.

