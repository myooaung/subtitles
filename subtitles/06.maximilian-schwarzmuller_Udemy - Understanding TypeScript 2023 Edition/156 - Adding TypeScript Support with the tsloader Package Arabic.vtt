WEBVTT

00:02.290 --> 00:03.910
المعلم: إذن لإخبار Webpack

00:03.910 --> 00:06.710
بما يجب فعله بملفات TypeScript ، نحتاج إلى إضافة

00:06.710 --> 00:08.830
إدخال جديد إلى كائن التكوين هنا.

00:08.830 --> 00:11.510
وهذه هي خاصية الوحدة النمطية.

00:11.510 --> 00:14.020
تأخذ الوحدة النمطية أيضًا كائن JavaScript

00:14.020 --> 00:15.470
لتكوينه بعد ذلك.

00:15.470 --> 00:17.440
الوحدة النمطية في النهاية هي مجرد ملف

00:17.440 --> 00:20.520
، لذلك نقول هنا لـ Webpack كيفية التعامل مع الملفات التي يعثر

00:20.520 --> 00:22.940
عليها ، مثل التطبيق. ts ، وبعد ذلك أيضًا بمجرد

00:22.940 --> 00:25.520
فهمه لهذا الملف ، كيفية التعامل مع جميع عمليات

00:25.520 --> 00:27.290
الاستيراد في الملف.

00:27.290 --> 00:29.800
فكيف يجب أن يتعامل Webpack مع هذه الملفات؟

00:29.800 --> 00:33.640
حسنًا ، نخبر Webpack بإضافة مجموعة قواعد هنا ، لأنه يمكنك

00:33.640 --> 00:35.430
إعداد قواعد متعددة يجب تطبيقها

00:35.430 --> 00:37.300
على جميع الملفات.

00:37.300 --> 00:40.690
هنا نحتاج فقط إلى واحد ، ولكن في المشاريع الأكثر تعقيدًا ،

00:40.690 --> 00:44.030
حيث تريد أيضًا استخدام Webpack للتعامل مع ملفات CSS أو الصور

00:44.030 --> 00:46.140
أو أي شيء من هذا القبيل ، يمكنك إضافة

00:46.140 --> 00:49.220
المزيد من القواعد لأنواع مختلفة من الملفات.

00:49.220 --> 00:51.500
وكما ذكرنا سابقًا ، تعد المستندات الرسمية مكانًا

00:51.500 --> 00:53.840
رائعًا لمعرفة المزيد عن برامج التحميل ، والتي

00:53.840 --> 00:55.730
تستخدمها في النهاية لتعليم Webpack

00:55.730 --> 00:57.980
المزيد حول الملفات المختلفة ، ولمعرفة المزيد

00:57.980 --> 00:59.720
عن Webpack بشكل عام.

00:59.720 --> 01:02.560
لذلك هنا ، سنضيف مثل هذا المحمل في الواقع.

01:02.560 --> 01:06.110
أداة التحميل هي ببساطة حزمة تخبر Webpack بكيفية التعامل مع

01:06.110 --> 01:07.780
ملفات معينة ، وبالطبع هنا ، حصلنا

01:07.780 --> 01:09.960
على أداة تحميل ts ، والتي تساعدنا على

01:09.960 --> 01:11.520
إخبار Webpack بكيفية التعامل

01:11.520 --> 01:13.690
مع ملفات TypeScript.

01:13.690 --> 01:16.850
لذلك نضيف قاعدة تكون مجرد كائن JavaScript

01:16.850 --> 01:19.720
، حيث نضيف أولاً خاصية اختبار.

01:19.720 --> 01:22.950
يصف هذا اختبار Webpack الذي سيتم إجراؤه على

01:22.950 --> 01:26.510
أي ملف يعثر عليه لمعرفة ما إذا كانت هذه القاعدة تنطبق

01:26.510 --> 01:28.550
هنا على هذا الملف أم لا.

01:28.550 --> 01:31.080
والاختبار هنا هو التعبير النمطي.

01:31.080 --> 01:33.610
وهناك أريد أن أخبر Webpack أن

01:33.610 --> 01:36.950
أي ملف ينتهي بـ. يجب استخدام ts أو يجب التعامل

01:36.950 --> 01:38.913
معها من خلال هذه القاعدة.

01:39.860 --> 01:42.940
يمكن للتعبير العادي الذي يتحقق من امتداد الملف استخدام شرطة

01:42.940 --> 01:47.550
مائلة للخلف هنا ، وبعد ذلك. ts ، ثم علامة الدولار.

01:47.550 --> 01:50.840
هذا هو تعبيرنا المعتاد الذي يخبر Webpack بعد ذلك أنك تريد التحقق

01:50.840 --> 01:54.593
من الملفات التي تنتهي بـ. ts.

01:55.560 --> 01:58.810
بعد ذلك ، عليك أيضًا تحديد ما يجب أن يفعله Webpack بهذه

01:58.810 --> 02:02.590
الملفات ، ويمكنك القيام بذلك باستخدام الكلمة الأساسية هنا.

02:02.590 --> 02:05.290
وهناك ، تحدد أن أداة التحميل Webpack يجب

02:05.290 --> 02:07.590
أن تستخدم ، في حالتي ، ts-loader.

02:07.590 --> 02:10.600
لذلك نقول لـ Webpack أن أي ملف TypeScript يعثر عليه

02:10.600 --> 02:12.720
يجب معالجته بواسطة مُحمل TypeScript

02:12.720 --> 02:16.010
والذي بدوره يعرف ما يجب فعله بمثل هذا الملف.

02:16.010 --> 02:17.680
سوف يأخذ محمل ts تلقائيًا

02:17.680 --> 02:20.330
tsconfig. json في الحساب لذلك

02:20.330 --> 02:23.430
لا نحتاج إلى تحديد أي تكوين إضافي هنا.

02:23.430 --> 02:26.050
مجرد تكوين واحد لا يضر أبدًا ،

02:26.050 --> 02:29.910
استبعد وحدات العقدة كتعبير عادي بحيث لا يحاول

02:29.910 --> 02:33.773
Webpack أيضًا البحث في وحدات العقدة.

02:35.130 --> 02:38.400
مع ذلك ، نحتاج إلى إضافة تكوين إضافي

02:38.400 --> 02:42.800
واحد هنا بعد تكوين الوحدة ، وهذا هو مفتاح الحل.

02:42.800 --> 02:47.800
هناك نخبر Webpack عن امتدادات الملفات التي يضيفها إلى الواردات

02:47.820 --> 02:49.750
التي يجدها.

02:49.750 --> 02:52.440
قلت إن Webpack سيضيف ملحقات من تلقاء نفسه

02:52.440 --> 02:56.160
، وسيبحث عنه افتراضيًا. js.

02:56.160 --> 02:59.220
الآن هنا نريد Webpack للبحث عنه. ts ، ثم هنا في الحل ، يمكننا

02:59.220 --> 03:01.280
إضافة خاصية ملحقات ، وتعيينها

03:01.280 --> 03:05.390
على أنها مساوية لمصفوفة ، وإخبار Webpack بأنه يجب أن يبحث

03:05.390 --> 03:10.640
عنها. ts وكذلك.

03:10.640 --> 03:10.640
js.

03:10.640 --> 03:13.360
لذلك ، سيبحث Webpack الآن بشكل أساسي عن مثل هذه الملفات

03:13.360 --> 03:16.900
ثم يقوم بتجميع جميع الملفات التي تحتوي على هذه الامتدادات ، والتي

03:16.900 --> 03:18.723
تقوم باستيرادها معًا.

03:19.760 --> 03:22.770
وهذا الإعداد انتهى تقريبًا في الوقت الحالي ، فقد انتهى

03:22.770 --> 03:24.690
ملف التكوين الخاص بنا تقريبًا في الوقت

03:24.690 --> 03:26.150
الحالي على الأقل.

03:26.150 --> 03:28.730
مع ذلك ، يجب أن نذهب إلى tsconfig

03:28.730 --> 03:33.070
أيضًا ، وهناك تأكد من ضبط sourceMap على true.

03:33.070 --> 03:35.210
سيساعدنا هذا في تصحيح أخطاء الكود الخاص

03:35.210 --> 03:37.130
بنا ، ويدعم Webpack هذا أيضًا.

03:37.130 --> 03:39.850
هناك الآن علينا فقط إضافة إدخال ،

03:39.850 --> 03:41.340
ربما هنا أسفل الإخراج

03:41.340 --> 03:43.710
، وهذا هو مفتاح devtool.

03:43.710 --> 03:47.210
وهناك ، يجب أن تكون القيمة inline-source-map

03:47.210 --> 03:48.510
كسلسلة.

03:48.510 --> 03:51.620
هذا يخبر Webpack أنه سيتم إنشاء خرائط

03:51.620 --> 03:53.700
مصدر بالفعل ، والتي يجب أن

03:53.700 --> 03:57.210
تستخرجها وتوصيلها بشكل صحيح بالحزمة التي

03:57.210 --> 04:00.170
تنشئها ، بحيث بينما نحصل على مثل هذه الحزمة

04:00.170 --> 04:03.603
، لا يزال لدينا تجربة تطوير رائعة.

04:05.830 --> 04:08.360
الآن مع ذلك يمكننا استخدام Webpack ، والسؤال

04:08.360 --> 04:09.823
هو كيف نستخدمه؟

04:11.000 --> 04:14.720
طريقة بسيطة لاستخدامه هي الذهاب إلى الحزمة. json ، وهناك دعونا

04:14.720 --> 04:16.650
نضيف نصًا.

04:16.650 --> 04:18.440
على سبيل المثال ، بناء.

04:18.440 --> 04:19.810
يمكنك إعطائها أي اسم تريده

04:19.810 --> 04:21.620
هنا في قسم البرامج النصية.

04:21.620 --> 04:23.930
وهناك ، ما عليك سوى تشغيل Webpack

04:23.930 --> 04:26.453
، لذا فقط اكتب webpack مثل هذا.

04:27.560 --> 04:29.880
دعنا الآن ننتقل أيضًا إلى مجلد dist

04:29.880 --> 04:32.993
، وفي النهاية قم بإزالة كل ما هو موجود هناك ، وبهذا

04:34.000 --> 04:36.870
الحفظ ، قم الآن بتشغيل npm run build ودعنا نرى

04:36.870 --> 04:38.663
ما إذا كان ذلك يعمل.

04:39.970 --> 04:43.000
وفشلت ...

04:45.440 --> 04:47.800
نعم ، لقد حصلت ببساطة على خطأ مطبعي

04:47.800 --> 04:51.440
، لا ينبغي أن يكون devtools ، ولكن devtool هنا.

04:51.440 --> 04:53.830
لذا قم بتغيير هذا إلى devtool في ملف التكوين

04:53.830 --> 04:56.143
والآن دعنا نكرر npm run build.

04:59.500 --> 05:02.620
وبهذا يمكنك تجاهل التحذير الذي تحصل عليه هنا.

05:02.620 --> 05:04.230
سترى أنه في ملف dist

05:04.230 --> 05:06.410
، لديك ملف js مجمع.

05:06.410 --> 05:08.150
وما تراه هناك أيضًا هو رمز

05:08.150 --> 05:09.960
غير قابل للقراءة تمامًا

05:09.960 --> 05:14.060
، لأن لدينا هذا التصغير قيد التنفيذ هنا في الواقع.

05:14.060 --> 05:18.680
لذلك هذا بالفعل هو بالفعل هذا الرمز الأمثل أيضًا.

05:18.680 --> 05:21.410
الآن قبل أن نرى كيف يمكننا أيضًا العمل مع تكوينات

05:21.410 --> 05:23.490
مختلفة هنا ، دعنا ننتقل بالفعل إلى

05:23.490 --> 05:26.120
الفهرس. html ، وقم بتعديل

05:26.120 --> 05:27.510
وارداتنا هنا وحزمة

05:27.510 --> 05:30.350
النقاط. js ، وفي الوقت الحالي

05:30.350 --> 05:32.220
، نظرًا لأننا لا نستخدم Webpack

05:32.220 --> 05:35.140
Dev Server حتى الآن ، فلنبدأ تشغيل npm لإحضار

05:35.140 --> 05:38.480
هذا الفهرس. html مرة أخرى.

05:38.480 --> 05:40.510
وإذا أعدت تحميل هذه

05:40.510 --> 05:44.890
الصفحة الآن ، فسترى أن هذا يعمل!

05:44.890 --> 05:46.610
إذا أدخلنا شيئًا ما هنا ،

05:46.610 --> 05:49.230
فإن مشروعنا يعمل بالطريقة التي ينبغي

05:49.230 --> 05:52.030
أن يعمل بها ، ويقوم باستيراد ملف js المجمّع

05:52.030 --> 05:56.200
هنا ، لذلك ملف واحد فقط بدلاً من كل هذه الملفات الفردية.

05:56.200 --> 05:59.020
وهذا بالفعل تعزيز.

05:59.020 --> 06:01.640
لدينا هنا بالفعل الكود المجمع

06:01.640 --> 06:05.410
الذي يتجنب كل طلبات htp غير الضرورية.

06:05.410 --> 06:07.690
وإذا انتقلت إلى علامة تبويب المصادر بالمناسبة

06:07.690 --> 06:09.420
، وأردت تصحيح التعليمات البرمجية

06:09.420 --> 06:11.250
الخاصة بك ، فستجد مجلد Webpack هذا ،

06:11.250 --> 06:12.770
وهناك مجلد مصدر ، وهناك يمكنك

06:12.770 --> 06:15.300
الانتقال إلى ملفات TypeScript الخاصة بك.

06:15.300 --> 06:19.090
وعلى سبيل المثال ، هنا ، في إدخال المشروع ، يمكنك أيضًا تعيين نقطة

06:19.090 --> 06:22.110
فاصل هنا على موقع collectUserInput ، وإذا ضغطت الآن

06:22.110 --> 06:24.970
على الزر ، فسيتم إيقافه مؤقتًا هناك ، ويمكنك تصحيح

06:24.970 --> 06:26.190
التعليمات البرمجية

06:26.190 --> 06:27.680
الخاصة بك.

06:27.680 --> 06:29.650
وهذه هي خرائط المصدر القادمة

06:29.650 --> 06:31.200
، والتي تساعدنا حقًا في

06:31.200 --> 06:34.050
التطوير وتجعل حياتنا كمطور أسهل.

06:34.050 --> 06:37.520
لقد حصلنا على هذه الشفرة المحسّنة ، ولكن بفضل خرائط المصدر ،

06:37.520 --> 06:40.750
يمكننا تصحيح شفرة TypeScript الأصلية الخاصة بنا هنا.

06:40.750 --> 06:43.260
إذن لدينا بالفعل إعدادًا رائعًا

06:43.260 --> 06:46.280
جدًا ، والذي يعطينا الكثير من التحسينات

06:46.280 --> 06:48.440
بالفعل ، والآن لننتهي من ذلك

06:48.440 --> 06:52.050
ونتأكد من أن لدينا بالفعل Webpack Dev Server مضمنًا

06:52.050 --> 06:54.440
، ومن ثم لدينا في الواقع مساران

06:54.440 --> 06:58.443
للعمل ، أحدهما للإنتاج والآخر للتطوير .
