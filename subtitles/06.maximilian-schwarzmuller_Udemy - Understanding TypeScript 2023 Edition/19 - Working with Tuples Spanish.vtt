WEBVTT

00:02.460 --> 00:05.590
-: Así que se admiten arrays y con números, cadenas,

00:05.590 --> 00:07.620
booleones, objetos y arrays.

00:07.620 --> 00:11.400
Tenemos los valores principales o tipos de valores, JavaScript nos apoyó

00:11.400 --> 00:15.100
en TypeScript, como usted aprenderá en el ejemplo de los objetos en sus

00:15.100 --> 00:17.884
matrices, TypeScript incluso ofrece mucho más funcional

00:17.884 --> 00:21.520
que está allí, pero eso es un poco más avanzado, por lo que vamos a echar

00:21.520 --> 00:22.720
un vistazo a que más tarde,

00:22.720 --> 00:24.940
pero incluso estos tipos básicos con lo que

00:24.940 --> 00:26.810
usted aprenderá en las conferencias

00:26.810 --> 00:30.140
anteriores son compatibles.

00:30.140 --> 00:33.540
Ahora TypeScript tiene como un par de nuevos conceptos,

00:33.540 --> 00:37.840
nuevos tipos, que no conocemos de vanilla Java script por ejemplo,

00:37.840 --> 00:40.300
el tipo tuple.

00:40.300 --> 00:44.360
Ahora puede que conozcas las tuplas de otros lenguajes de programación,

00:44.360 --> 00:46.570
JavaScript no las tiene.

00:46.570 --> 00:49.570
Esto es una tupla, por ejemplo, y tú dirías, bueno

00:49.570 --> 00:52.290
esto es un array. Es un array, pero es

00:52.290 --> 00:54.520
un array de longitud fija y en realidad

00:54.520 --> 00:58.650
no sólo de longitud fija sino también de tipo fijo.

00:58.650 --> 01:00.730
¿Y dónde puede ser útil?

01:00.730 --> 01:03.350
Digamos que aquí en nuestra, persona,

01:03.350 --> 01:07.830
tenemos un número de propiedad, rol, que es un array con exactamente

01:07.830 --> 01:11.160
dos elementos, donde el primero es digamos

01:11.160 --> 01:14.184
un identificador numérico como dos y el

01:14.184 --> 01:18.547
segundo es un identificador de cadena y una descripción

01:18.547 --> 01:22.765
legible por humanos como el autor.

01:22.765 --> 01:26.496
Ahora bien, esto debe tener siempre exactamente dos elementos porque

01:26.496 --> 01:30.100
un usuario o una persona en esta aplicación que estamos escribiendo,

01:30.100 --> 01:32.720
digamos que sólo puede tener un rol y un rol sólo está

01:32.720 --> 01:35.185
compuesto por dos elementos.

01:35.185 --> 01:37.400
Por supuesto que podríamos haber usado una óptica

01:37.400 --> 01:39.090
aquí, pero por alguna razón queremos

01:39.090 --> 01:41.744
tener un array con exactamente dos elementos donde el

01:41.744 --> 01:43.118
primer elemento siempre es

01:43.118 --> 01:47.570
el identificador numérico y el segundo elemento siempre es el identificador de cadena o

01:47.570 --> 01:50.220
descripción o como quieras llamarlo.

01:50.220 --> 01:52.420
Ahora, si pasamos por encima de esto, TypeScript

01:52.420 --> 01:55.730
infiere este extraño tipo que no hemos visto antes, de hecho, si

01:55.730 --> 01:58.550
dis significa que TypeScript entiende que tenemos un

01:58.550 --> 02:01.250
array que puede contener incluso cadenas o números,

02:01.250 --> 02:03.440
este un tipo de unión y nos sumergiremos en

02:03.440 --> 02:06.710
ellos más tarde. La clave es que TypeScript

02:06.710 --> 02:09.950
entiende que esto debe ser un array con estos

02:09.950 --> 02:11.668
tipos de valores.

02:11.668 --> 02:14.580
Los downs que están muertos Podemos ejecutar este código

02:14.580 --> 02:18.780
sin embargo, el papel de la persona, el empuje, el administrador.

02:18.780 --> 02:20.250
Ahora, para nuestra aplicación,

02:20.250 --> 02:21.970
esto podría no tener sentido porque sabemos

02:21.970 --> 02:23.960
que sólo necesitamos dos elementos.

02:23.960 --> 02:25.790
Todavía TypeScript no sabe que sólo

02:25.790 --> 02:28.963
queremos dos elementos. También podríamos cambiar

02:28.963 --> 02:33.283
el rol de persona, el segundo elemento con índice uno para que sea

02:33.283 --> 02:35.200
un número también.

02:35.200 --> 02:38.010
Esto funcionaría porque TypeScript sólo sabe que

02:38.010 --> 02:42.360
el rol debe ser de tipo string o array de números, y por lo tanto asignar un número

02:42.360 --> 02:44.700
aquí al segundo elemento y por lo tanto reemplazarlo

02:44.700 --> 02:46.870
por un número estaría permitido porque

02:46.870 --> 02:48.680
sólo estamos diciendo algo sobre

02:48.680 --> 02:50.886
los tipos que generalmente podemos usar

02:50.886 --> 02:52.580
ahí.

02:52.580 --> 02:55.040
Sabemos que queremos tener exactamente esa estructura.

02:55.040 --> 02:58.094
Dos elementos, primer elemento número, segundo elemento cadena,

02:58.094 --> 03:01.770
pero TypeScript no hace eso. Pues para un escenario así,

03:01.770 --> 03:05.865
una tupla sería perfecta. Podemos decirle a TypeScript

03:05.865 --> 03:10.865
qué rol debe ser, estableciendo explícitamente el tipo de rol.

03:11.010 --> 03:13.230
Así que aquí también tenemos un ejemplo

03:13.230 --> 03:16.600
en el que TypeScript no hace fototipo, pero queremos anularlo

03:16.600 --> 03:19.927
explícitamente. Por lo tanto, aquí podemos añadir

03:19.927 --> 03:23.041
un tipo de objeto explícito añadiendo dos puntos después

03:23.041 --> 03:27.023
de persona, luego las llaves y luego los nombres deben ser una cadena, la edad

03:27.023 --> 03:31.180
debe ser un número y las aficiones deben ser una matriz de cadenas.

03:31.180 --> 03:33.740
Así que todo según lo inferido por TypeScript.

03:33.740 --> 03:35.401
Así que para eso, no habríamos requerido,

03:35.401 --> 03:36.827
esta asignación explícita y como

03:36.827 --> 03:38.789
se aprende habría sido malo.

03:38.789 --> 03:40.470
Pero ahora tenemos un escenario,

03:40.470 --> 03:43.565
donde la inferencia no funciona de la manera que queremos,

03:43.565 --> 03:47.510
y, queremos establecer que el rol sea una tupla.

03:47.510 --> 03:49.730
Ahora en vez de poner un array de dos cadenas

03:49.730 --> 03:51.660
o un array de números o usar el mismo tipo

03:51.660 --> 03:55.180
que no era tercero aquí antes, podemos usar un tipo especial.

03:55.180 --> 03:56.810
Volvemos a utilizar los

03:56.810 --> 04:01.710
corchetes, pero ahora dentro de los corchetes añadimos un número,

04:01.710 --> 04:03.637
una coma y una cadena.

04:03.637 --> 04:07.340
Ahora esto marca un tipo de tupla aquí.

04:07.340 --> 04:10.729
Una tupla es una construcción especial, TypeScript la entiende,

04:10.729 --> 04:13.310
en Java el script será un array normal, pero durante

04:13.310 --> 04:15.750
el desarrollo con TypeScript, obtendremos errores

04:15.750 --> 04:18.190
con código como este de aquí.

04:18.190 --> 04:20.313
¿Y qué hacen las tuplas?

04:21.620 --> 04:23.564
Esto de aquí, le dice a TypeScript,

04:23.564 --> 04:27.195
quiero tener un array especial, con exactamente dos elementos,

04:27.195 --> 04:30.160
porque tengo exactamente dos tipos ahí y el primer elemento

04:30.160 --> 04:32.020
debe ser un número.

04:32.020 --> 04:35.436
El segundo elemento debe ser una cadena, por

04:35.436 --> 04:39.033
lo tanto, si compilamos este código aquí, obtengo

04:40.663 --> 04:45.000
un error con respecto a que 10 no es asignable como tipo aquí,

04:45.000 --> 04:48.346
porque queremos tener una cadena como segundo

04:48.346 --> 04:50.822
valor y si entonces asigno 10 como

04:50.822 --> 04:52.660
segundo valor aquí, entonces

04:52.660 --> 04:56.544
obviamente no sigo esta regla.

04:56.544 --> 05:01.544
Si se comenta esto y se compila, esto funciona.

05:02.240 --> 05:06.290
Eso es un poco extraño porque por qué empujar funciona aquí, porque

05:06.290 --> 05:08.610
todos estamos diciendo que el papel debe

05:08.610 --> 05:11.901
tener exactamente dos elementos, así que ¿por qué podemos

05:11.901 --> 05:14.980
empujar admin en la matriz de rol aquí.

05:14.980 --> 05:19.300
En realidad, el empuje es una excepción que se permite en las tuplas.

05:19.300 --> 05:22.410
Así que desafortunadamente TypeScript no puede atrapar

05:22.410 --> 05:24.840
este error, pero al menos se asegura de que no estamos

05:24.840 --> 05:28.570
asignando un valor incorrecto aquí, y fuera del push, también obtenemos

05:28.570 --> 05:31.500
algo de apoyo con respecto a la longitud.

05:31.500 --> 05:33.671
Si ponemos a la persona ese rol con un nuevo valor.

05:33.671 --> 05:36.420
Por ejemplo, un array vacío no está permitido,

05:36.420 --> 05:39.710
uno con exactamente la estructura que definimos ahí

05:39.710 --> 05:43.510
arriba, está permitido, Si añadí un elemento extra aquí.

05:43.510 --> 05:45.880
Entonces volveríamos a tener un error.

05:45.880 --> 05:49.300
Así que la longitud se cumple si la asignamos así, pero no para un empuje

05:49.300 --> 05:50.720
y así sucesivamente.

05:50.720 --> 05:52.840
Esto es algo que tienes que tener en cuenta,

05:52.840 --> 05:55.580
pero aún así obtener este soporte y este apoyo, es

05:55.580 --> 05:57.899
bastante agradable y si tienes un escenario

05:57.899 --> 06:02.240
en el que necesitas exactamente X cantidad de valores en un array y sabes el tipo

06:02.240 --> 06:05.130
de cada valor de antemano, entonces es posible que quieras

06:05.130 --> 06:07.900
considerar una tupla en lugar de un array para obtener

06:07.900 --> 06:11.313
aún más rigor en tu aplicación para ser aún más claro sobre el

06:11.313 --> 06:17.543
tipo de datos con los que estás trabajando y el tipo de datos que estás esperando.
