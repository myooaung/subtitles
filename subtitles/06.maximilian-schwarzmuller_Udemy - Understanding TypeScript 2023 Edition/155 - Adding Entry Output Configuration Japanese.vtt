WEBVTT

00:01.538 --> 00:07.086
ナレーター：まず始めに､ tsconfigにアクセスしてみましょう｡

00:07.086 --> 00:07.086
jsonファイルで､

00:07.086 --> 00:09.965
特定のものが設定されていることを確認する必要があるからです｡

00:09.965 --> 00:16.286
このターゲットは､ es5またはes6に設定されていることを確認してください｡

00:16.286 --> 00:19.423
どのブラウザに対応する予定なのかによります｡ 

00:19.423 --> 00:22.190
なぜなら､ 最終的にwebpackとloaderがこのターゲットを使って､

00:22.190 --> 00:26.543
あなたのコードがどのように変換されるべきかを決定するからです｡

00:26.543 --> 00:32.480
あなたのタイプのコードは､ 古いブラウザでも動作するJavaスクリプトのコードに変換する必要がありますか？

00:32.480 --> 00:37.811
あるいは､ es6のように､ 最近のブラウザでしか動かないコードに？

00:37.811 --> 00:44.110
Module then は es2015 または es6 に設定されているはずですので､ その設定で問題ありません｡

00:44.110 --> 00:49.110
さらに､ outDirも確認したい｡ 

00:50.560 --> 00:53.520
ここではdistにしておきますが､ コードを別のディレクトリにコンパイルしたい場合は､

00:53.520 --> 00:55.997
これを変更することができます｡

00:55.997 --> 00:59.378
ルートディレクトリはもう必要ありません｡ なぜなら､

00:59.378 --> 01:05.014
webpackがルートファイルの場所を決定してくれるからです｡

01:05.014 --> 01:07.660
ですから､ 一般的にはこの設定で問題ないでしょう｡ 

01:07.660 --> 01:09.525
もし､ 思い通りにいかないことがあれば､

01:09.525 --> 01:12.487
後からいつでも手を加えることができます｡

01:12.487 --> 01:19.848
これで､ tsconfigの隣に新しい設定ファイルを追加することができます｡

01:19.848 --> 01:19.848
jsonで､ それがwebpackです｡  コンフィグ jsファイルです｡ 

01:19.848 --> 01:24.150
なぜなら､ このファイルはwebpackが自動的に探すファイルであり､

01:24.150 --> 01:30.220
webpackが私たちのプロジェクトとどのように連携するかを教えてくれるからです｡

01:30.220 --> 01:34.568
なぜなら､ webpackはここで正しく動作するように設定する必要があるツールだからです｡

01:34.568 --> 01:37.568
では､ このwebpackで何をするかというと｡  コンフィグファイル？

01:37.568 --> 01:43.288
この設定ファイルはJavaScriptを使用していますが､ 実際にはnodeを使用しています｡

01:43.288 --> 01:43.288
jsの特徴です｡ 

01:43.288 --> 01:46.747
そこで､ ノードを使いたい｡  js exports構文で､ 次のようにすると､

01:46.747 --> 01:50.379
JavaScriptオブジェクトをエクスポートすることができます｡

01:50.379 --> 01:53.538
これはwebpackによってピックアップされる設定オブジェクトになります｡ 

01:53.538 --> 01:55.585
というわけで､ 初めてご覧になる方のために説明すると､

01:55.585 --> 01:59.648
これがノードで物事をエクスポートする方法です｡ js環境｡ 

01:59.648 --> 02:02.877
そして､ ここではJavaScriptのオブジェクトをエクスポートしています｡ 

02:02.877 --> 02:05.920
ここで､ webpackはいくつかの情報を必要とします｡ 

02:05.920 --> 02:09.840
最も重要なのは､ プロジェクト全体がどのファイルから始まるか､

02:09.840 --> 02:14.585
つまりエントリーポイントがどこかを知ることです｡

02:14.585 --> 02:17.370
私たちの場合､ それがアプリなんです｡  tsファイルです｡ 

02:17.370 --> 02:18.922
このファイルが最初に実行され､

02:18.922 --> 02:20.981
webpackが行うことは､ このファイルのimportを調べ､

02:20.981 --> 02:30.219
これらのファイルに行き､ それらのimportとimportされたファイルのimportを調べるといったことです｡

02:30.219 --> 02:33.461
最終的にあなたのプロジェクトが使用するすべてのファイルを知るまで｡ 

02:33.461 --> 02:36.201
そして､ このコンテンツはここというように､ ファイルのコンテンツを調べ､

02:36.201 --> 02:38.740
すべてのファイルのコンテンツを､ tsの助けを借りて､

02:38.740 --> 02:44.290
コンパイルしていきます｡

02:44.290 --> 02:44.290
ローダーパッケージを紹介しました｡ 

02:44.290 --> 02:46.960
さて､ ここでwebpackを正しく動作させるために､ 実際にはすべての.NET

02:46.960 --> 02:51.598
Frameworkを削除する必要があります｡ js 拡張をすべてのインポートで使用します｡

02:51.598 --> 02:57.885
以前､ tsに内蔵されたネイティブブラウザを使ったときに必要だったんです｡

02:57.885 --> 02:57.885
モジュールの機能ですが､

02:57.885 --> 03:01.130
webpackではこれらの拡張は必要ありません｡

03:01.130 --> 03:03.664
なぜなら､ webpackは実際に自動で探してくれるからです｡  js､ およびその他の特定の拡張ファイルです｡ 

03:03.664 --> 03:06.501
そうしないと､ webpack は二重の拡張子を持つファイルを探してしまうので､

03:06.501 --> 03:10.716
それは好ましくありません｡

03:10.716 --> 03:13.655
だから､ 削除する｡  を実行し､ すべてのファイルを保存して､

03:13.655 --> 03:21.370
変更が適用されたことを確認します｡

03:21.370 --> 03:31.320
さて､ 話をwebpackに戻します｡  コンフィグ jsに､ このエクスポートされたオブジェクトにentryプロパティを追加する必要があります｡

03:31.320 --> 03:32.740
と指をさす｡  /src/app. tsを例にしています｡ 

03:32.740 --> 03:37.740
そこで､ プロジェクトのルートエントリーファイルで

03:38.680 --> 03:42.444
次に､ ここに出力キーを追加します｡ 

03:42.444 --> 03:45.880
今の出力は､ ここではオブジェクトです｡ 

03:45.880 --> 03:48.051
ここでまず､ ファイル名を指定します｡ 

03:48.051 --> 03:52.998
これが最終的に生成される1つのJavaScriptファイルになります｡

03:52.998 --> 03:57.350
そして､ ここではバンドルと名付けることにします｡  jsですが､ 好きな名前をつけることができます｡

03:57.350 --> 03:58.788
アプリです｡  jsなど､ お好きなものをお使いください｡ 

03:58.788 --> 04:01.709
また､ ここに動的なパーツ､

04:01.709 --> 04:05.171
例えば content hash を追加すると､ ビルドごとに自動的に一意のハッシュを作成するように

04:05.171 --> 04:11.829
webpack に指示することができ､ ブラウザでのキャッシュに役立てることができます｡

04:11.829 --> 04:13.578
しかし､ これについてはwebpackのドキュメントで詳しく説明されています｡ 

04:13.578 --> 04:16.229
ここでは必要ないので､ bundleというファイル名にしておきます｡  js.

04:16.229 --> 04:23.320
ファイル名に加えて､ 出力を書き出すパスを指定する必要があります｡

04:23.320 --> 04:28.900
そしてもちろんそれは､ あなたのtsにあるパスと一致するはずです｡

04:28.900 --> 04:28.900
コンフィグ js ファイルを使用すると､ エラーを回避することができます｡ 

04:28.900 --> 04:32.970
だから､ このフォルダに｡ 

04:32.970 --> 04:34.189
今はtsと違って config,js ファイルに､ .NET

04:34.189 --> 04:37.010
Framework を書いてはいけません｡ /distはこちら｡ 

04:37.010 --> 04:39.819
Webpackはここで絶対パスを求めます｡ 

04:39.819 --> 04:42.099
そして､ それを構築するために､ ノードを使用することができます｡  jsモジュールです｡ 

04:42.099 --> 04:48.880
そのためには､ ノードを使うことができます｡  jsのimport構文で､ requiredキーワードを使用し､

04:48.880 --> 04:51.280
pathモジュールをimportします｡

04:51.280 --> 04:56.050
ライブラリとしてインストールする必要はなく､ コアノードとしてインストールします｡

04:56.050 --> 04:56.050
jsモジュールは､

04:56.050 --> 05:02.149
nodeをお持ちの方ならすでにお持ちのはずです｡ jsをインストールしました｡

05:02.149 --> 05:04.966
ここで､ path を使って resolve

05:04.966 --> 05:11.280
メソッドを呼び出すと､ 特定のフォルダへの絶対パスを構築することができます｡

05:11.280 --> 05:12.910
そのために､ ノード内でグローバルに利用可能な特別な定数､

05:12.910 --> 05:17.236
__dirname定数を使用します｡

05:17.236 --> 05:17.236
js環境｡ 

05:17.236 --> 05:21.150
そして､ 先ほど言ったようにwebpackはnodeを使用しています｡  jsを使用してファイルを実行します｡ 

05:21.150 --> 05:24.692
そして2番目の引数としてdistを渡します｡

05:24.692 --> 05:27.433
distはdistフォルダへの絶対パスを構築し､

05:27.433 --> 05:33.190
webpackはそれを使って出力結果をそこに書き出します｡

05:33.190 --> 05:40.743
これで入口と出口ができましたが､ TypeScriptのファイルをどう扱うかはwebpackには教えていません｡

05:40.743 --> 05:42.553
なぜなら､ デフォルトではwebpackはそのことを知らないからです｡

05:42.553 --> 05:45.140
デフォルトではただのバンドルです｡

05:45.140 --> 05:48.684
TypeScriptをJavaScriptにコンパイルするような追加機能は､

05:48.684 --> 05:51.261
webpackに教えなければならない｡

05:51.261 --> 05:53.452
それは､ 次回の講義で行います｡ 
