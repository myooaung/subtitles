WEBVTT

00:02.180 --> 00:05.590
Instructor: Volvamos a las interfaces para objetos.

00:05.590 --> 00:10.090
También puedes definir propiedades opcionales en las interfaces

00:10.090 --> 00:14.100
y también en las clases, como te mostraré.

00:14.100 --> 00:16.437
Para eso, añades el nombre de tu propiedad,

00:16.437 --> 00:20.740
digamos 'outputName' aquí, puede ser lo que quieras por supuesto, y debe

00:20.740 --> 00:22.238
ser una cadena.

00:22.238 --> 00:26.400
No quiero obligar a que todas las clases basadas en Named

00:26.400 --> 00:27.630
tengan eso.

00:27.630 --> 00:31.120
Debería ser opcional, tanto si se quiere como si no.

00:31.120 --> 00:34.289
Puede especificar una propiedad opcional añadiendo un

00:34.289 --> 00:37.670
signo de interrogación después del nombre de la propiedad.

00:37.670 --> 00:40.130
Esto le dice a Tivescript que esta propiedad

00:40.130 --> 00:44.060
podría existir en las clases que implementan esta interfaz, pero

00:44.060 --> 00:45.680
que no es necesario.

00:45.680 --> 00:48.540
Y por lo tanto, no obtenemos ningún error aquí en 'Persona'

00:48.540 --> 00:51.180
a pesar de que no tengo una propiedad de nombre de

00:51.180 --> 00:53.440
salida porque es opcional.

00:53.440 --> 00:56.072
Ahora, por supuesto, puedo añadir nombre de salida

00:56.072 --> 00:59.130
aquí e inicializar esto con algún valor o usarlo como

00:59.130 --> 01:02.800
cualquier otra propiedad, pero no tengo que hacerlo.

01:02.800 --> 01:06.720
Ahora en una clase también puedes tener una propiedad opcional.

01:06.720 --> 01:09.670
Vamos mismo nombre aquí debe ser opcional,

01:09.670 --> 01:13.840
porque tal vez no tenemos un valor aquí para N.

01:13.840 --> 01:16.010
Aquí también podemos añadir un signo de interrogación

01:16.010 --> 01:17.460
en nuestra clase.

01:17.460 --> 01:20.890
Ahora sólo tenemos que hacerlo opcional aquí en Named, de

01:20.890 --> 01:23.610
lo contrario violamos contra nuestra interfaz

01:23.610 --> 01:26.012
que obliga a esto a ser una cadena.

01:26.012 --> 01:29.000
Ahora digo que esto puede ser opcional.

01:29.000 --> 01:30.510
Así que aquí no es opcional,

01:30.510 --> 01:32.750
y aquí cuando establezco esto igual

01:32.750 --> 01:37.640
a N, sólo quiero hacer esto si N es verdadero, si se establece.

01:37.640 --> 01:40.080
Así que sólo si no es una cadena vacía, por ejemplo.

01:40.080 --> 01:43.340
De lo contrario, el nombre no se establecerá y eso

01:43.340 --> 01:46.524
está bien porque lo convertí en una propiedad opcional

01:46.524 --> 01:49.853
tanto aquí en la interfaz como en mi clase.

01:50.790 --> 01:53.070
Aquí, cuando construimos un nuevo objeto,

01:53.070 --> 01:56.203
podríamos hacerlo sin pasar un nombre.

01:57.060 --> 01:59.813
Para permitir eso, tenemos que ir al constructor

01:59.813 --> 02:02.600
y proporcionar un valor por defecto aquí o también

02:02.600 --> 02:05.120
añadir un signo de interrogación aquí.

02:05.120 --> 02:06.260
Todo esto es para permitirlo.

02:06.260 --> 02:08.800
Puede añadir parámetros opcionales proporcionando

02:08.800 --> 02:12.170
un valor por defecto o añadiendo un signo de interrogación,

02:12.170 --> 02:13.990
en cuyo caso el valor por defecto

02:13.990 --> 02:17.170
será indefinido.

02:17.170 --> 02:20.450
Y ahora podemos llamar a este constructor sin un valor porque

02:20.450 --> 02:22.446
tenemos ese parámetro opcional y

02:22.446 --> 02:25.960
porque tenemos la propiedad opcional que está bien, no necesitamos

02:25.960 --> 02:27.930
inicializarla.

02:27.930 --> 02:29.648
Y de ahí en adelante si se saluda,

02:29.648 --> 02:33.510
pues este nombre por supuesto rendirá indefinido.

02:33.510 --> 02:35.640
Así que probablemente deberíamos comprobar aquí también

02:35.640 --> 02:37.000
si tenemos un nombre, y si lo tenemos

02:37.000 --> 02:39.100
consolaremos. registre esto.

02:39.100 --> 02:42.970
Si no, nos consolamos. registrar "hola" sin ninguna referencia

02:42.970 --> 02:45.200
al nombre porque no tenemos ninguno.

02:45.200 --> 02:47.170
Si decimos que si todo compila

02:47.170 --> 02:48.840
y vemos sólo hi aquí porque

02:48.840 --> 02:51.520
no proporcionó un nombre.

02:51.520 --> 02:53.950
Así que serían propiedades opcionales

02:53.950 --> 02:56.008
tanto en una clase como en una interfaz

02:56.008 --> 02:59.910
y también en mi lista de constructores aquí.

02:59.910 --> 03:01.660
Para que quede bien claro, estas

03:01.660 --> 03:04.790
tres cosas sólo están relacionadas de forma imprecisa.

03:04.790 --> 03:07.980
Puedes una propiedad opcional en una interfaz y luego

03:07.980 --> 03:11.060
implementarla como una propiedad no opcional en

03:11.060 --> 03:11.910
la clase.

03:11.910 --> 03:14.550
A continuación, sólo tiene que asegurarse de que su lógica

03:14.550 --> 03:17.810
es tal que esto siempre se inicializa de lo contrario se obtiene un

03:17.810 --> 03:19.720
error como usted acaba de ver.

03:19.720 --> 03:22.180
O tienes una propiedad opcional en una

03:23.723 --> 03:26.870
interfaz y una propiedad opcional en tu clase,

03:26.870 --> 03:31.630
entonces no tienes que asignar un valor en todos los casos aquí.

03:31.630 --> 03:34.210
Y además y totalmente sin relación aquí, puedes tener

03:34.210 --> 03:36.020
parámetros opcionales en las funciones

03:36.020 --> 03:38.300
y por lo tanto también en los métodos incluyendo

03:38.300 --> 03:40.300
el método constructor.

03:40.300 --> 03:42.670
Los parámetros opcionales se definen con

03:42.670 --> 03:43.810
el signo de interrogación,

03:43.810 --> 03:48.040
donde el valor por defecto si no se establece es por lo tanto indefinido o simplemente

03:48.040 --> 03:51.690
asignando un valor por defecto como este.

03:51.690 --> 03:53.785
Luego, como se aprende, esto también

03:53.785 --> 03:56.960
es opcional y se asumirá el valor por defecto si no se pasa

03:56.960 --> 03:58.750
un valor más específico.

03:58.750 --> 04:00.720
Así que esto le da más flexibilidad en

04:00.720 --> 04:02.950
la forma de estructurar sus clases, y cuando

04:02.950 --> 04:04.770
hablamos de las interfaces, la forma

04:04.770 --> 04:06.860
de estructurar sus contratos las clases

04:06.860 --> 04:09.103
podrían tener que adherirse a.
