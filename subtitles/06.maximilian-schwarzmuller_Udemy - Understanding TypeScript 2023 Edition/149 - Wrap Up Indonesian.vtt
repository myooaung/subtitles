WEBVTT

00:02.350 --> 00:04.720
-: Dan itu saja untuk modul.

00:04.720 --> 00:08.850
Sekarang menggunakan modul adalah fitur yang sangat berguna dan penting karena memungkinkan

00:08.850 --> 00:11.130
Anda untuk menulis kode yang lebih mudah dipelihara

00:11.130 --> 00:14.550
dan dikelola. Memiliki semuanya dalam satu file

00:14.550 --> 00:16.360
itu berantakan dan benar-benar bukan

00:16.360 --> 00:19.360
pilihan untuk apa pun kecuali proyek yang sangat kecil.

00:19.360 --> 00:22.350
Menggunakan namespaces atau modul ES yang pernah ada

00:22.350 --> 00:24.710
untuk alternatif yang jauh lebih baik.

00:24.710 --> 00:27.620
Karena memastikan, bahwa setiap file itu sendiri relatif

00:27.620 --> 00:30.780
kecil, dan oleh karena itu tetap dapat dikelola.

00:30.780 --> 00:33.470
Dan tetap saja, pada akhirnya, Anda akan mendapatkan

00:33.470 --> 00:36.690
seluruh aplikasi besar yang ingin Anda miliki.

00:36.690 --> 00:38.580
Sekarang, ketika berbicara tentang

00:38.580 --> 00:42.883
dua pendekatan ini, Namespaces dan modul ES, rekomendasi yang jelas adalah

00:42.883 --> 00:46.520
modul ES, karena Anda mendapatkan keamanan tipe ekstra, dan Anda

00:46.520 --> 00:48.910
memastikan bahwa setiap file, harus secara

00:48.910 --> 00:52.210
jelas menspesifikasikan apa yang diinginkannya.

00:52.210 --> 00:54.270
Dengan namespaces, sudah cukup jika

00:54.270 --> 00:56.280
satu file mengimpor sesuatu, yang

00:56.280 --> 00:58.350
juga dibutuhkan oleh file lain.

00:58.350 --> 00:59.970
Kerugiannya, jika satu file,

00:59.970 --> 01:02.230
yang mengimpor benda itu dihapus,

01:02.230 --> 01:05.640
file lainnya juga rusak, tanpa Anda sadari.

01:05.640 --> 01:08.774
Setidaknya, tanpa Anda sadari sebelum Anda menjalankan kode.

01:08.774 --> 01:11.340
Jadi, oleh karena itu, gunakan modul ES.

01:11.340 --> 01:14.250
Gunakan namespaces dalam proyek-proyek yang lebih kecil, atau

01:14.250 --> 01:18.100
jika karena alasan tertentu Anda tidak dapat menggunakan modul ES, Dan Anda tidak

01:18.100 --> 01:19.970
dapat menggunakan bundler lain, yang akan

01:19.970 --> 01:24.290
menerjemahkan modul-modul tersebut. Untuk kode non modul, yang semua

01:24.290 --> 01:26.360
berfungsi dan semua browser.

01:26.360 --> 01:30.070
Tetapi selain itu penggunaan benar-benar menggunakan modul, modul ES.

01:30.070 --> 01:31.748
Dan apa yang baru saja saya katakan adalah penting.

01:31.748 --> 01:34.828
Modul-modul ini di sini, saat ini cara kita menggunakannya,

01:34.828 --> 01:37.620
hanya berfungsi di browser modern.

01:37.620 --> 01:39.670
Karena kita mengandalkan browser, untuk mengimpor

01:39.670 --> 01:42.640
semua file ini pada dasarnya. Benar?

01:42.640 --> 01:44.675
Sekarang, tentu saja kita ingin membangun

01:44.675 --> 01:48.940
aplikasi dengan typescript, yang juga berjalan di semua browser.

01:48.940 --> 01:52.090
Internet Explorer 9, misalnya.

01:52.090 --> 01:54.130
Di sana hal ini tidak akan didukung.

01:54.130 --> 01:55.730
Sintaksis ini, tidak didukung di sana.

01:55.730 --> 01:57.410
Jadi, aplikasi tidak akan berjalan di sana.

01:57.410 --> 01:59.160
Kita mungkin juga menggunakan beberapa

01:59.160 --> 02:01.280
fitur lain yang tidak didukung di sana, tetapi

02:01.280 --> 02:03.840
terutama di sini tidak didukung di semua browser.

02:03.840 --> 02:06.250
Jadi, untuk membuat itu berfungsi di semua browser, kita

02:06.250 --> 02:09.283
bisa menggunakan alat bundling. Kita bisa menggunakan Webpack misalnya.

02:09.283 --> 02:12.431
Untuk menggabungkannya menjadi satu file JavaScript.

02:12.431 --> 02:15.810
Jadi, selama pengembangan kita memiliki multi file ini, pengalaman pengetikan

02:15.810 --> 02:19.060
yang kuat, tetapi ketika kita mengirimkan kode kita, kita sebenarnya

02:19.060 --> 02:21.310
hanya memiliki satu file saja.

02:21.310 --> 02:23.600
Dan sekarang keuntungan dari pengiriman

02:23.600 --> 02:25.676
satu file, bukan semua file yang kita miliki

02:25.676 --> 02:28.177
di sini, adalah bahwa kita juga memastikan bahwa

02:28.177 --> 02:31.181
browser tidak perlu mengunduh banyak file.

02:31.181 --> 02:33.630
Karena setiap file yang harus diunduh, merupakan

02:33.630 --> 02:37.010
perjalanan pulang pergi ekstra. Di tab network pada dev tools, Anda

02:37.010 --> 02:38.510
sebenarnya bisa melihatnya.

02:38.510 --> 02:40.650
Area yang Anda lihat bagan air terjun

02:40.650 --> 02:42.230
ini, dan Anda melihat kotak

02:42.230 --> 02:44.520
putih kecil ini di awal setiap blok.

02:44.520 --> 02:46.380
Ini pada dasarnya adalah waktu penyiapan yang

02:46.380 --> 02:48.506
diperlukan untuk menyiapkan permintaan HDP.

02:48.506 --> 02:51.807
Jadi, meskipun file yang kita unduh sangat kecil seperti yang

02:51.807 --> 02:54.700
Anda ketahui, ini masih membutuhkan waktu karena semua

02:54.700 --> 02:56.900
pengaturan ekstra yang berlebihan, untuk

02:56.900 --> 02:59.100
setiap permintaan HDP.

02:59.100 --> 03:02.330
Jadi, melakukan lebih sedikit permintaan adalah ide yang

03:02.330 --> 03:04.640
bagus, terlepas dari dukungan peramban.

03:04.640 --> 03:08.370
Jadi, untuk dua alasan ini, dukungan browser dan permintaan yang lebih sedikit,

03:08.370 --> 03:11.000
kita akan melihat bundling, dengan Webpack, di bagian

03:11.000 --> 03:12.453
kursus berikutnya.
