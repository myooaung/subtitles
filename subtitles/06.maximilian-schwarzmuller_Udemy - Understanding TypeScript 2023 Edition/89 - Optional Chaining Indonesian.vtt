WEBVTT

00:02.450 --> 00:05.030
Instruktur: Mari kita menjauh dari fungsi overload

00:05.030 --> 00:09.010
sekarang dan izinkan saya memperkenalkan satu fitur lain yang sangat rapi.

00:09.010 --> 00:13.350
Dan itu adalah chaining opsional.

00:13.350 --> 00:16.720
Katakanlah Anda memiliki aplikasi di mana Anda

00:16.720 --> 00:21.603
mendapatkan data dari backend dari database atau dari sumber apa

00:21.603 --> 00:26.350
pun di mana Anda tidak tahu dengan pasti apakah dalam suatu objek

00:26.350 --> 00:29.500
properti tertentu didefinisikan.

00:29.500 --> 00:33.920
Katakanlah kita memiliki fetchedUserData dan fetchedUserData bisa menjadi

00:33.920 --> 00:36.380
objek tentang pengguna yang kita ambil.

00:36.380 --> 00:39.705
Di sana kita mungkin memiliki ID, kita mungkin memiliki

00:39.705 --> 00:44.705
nama Max dan kita juga mungkin mengharapkan pekerjaan properti lain yang

00:45.730 --> 00:50.550
merupakan objek yang memiliki judul dan yang kemudian juga memiliki

00:50.550 --> 00:53.950
deskripsi, perusahaan saya sendiri.

00:53.950 --> 00:56.900
Nah kalau kita mendapatkan data seperti ini tentu kita bisa bekerja dengannya.

00:56.900 --> 01:00.150
Sekarang Anda mungkin melakukan hal-hal yang lebih kompleks tetapi

01:00.150 --> 01:03.940
di sini sebagai permulaan katakanlah semua yang saya lakukan adalah saya

01:03.940 --> 01:06.871
benar-benar mengunggah jabatan di sini, benar.

01:06.871 --> 01:09.940
Sekarang jika kita menyimpannya dengan server pengembangan kita

01:09.940 --> 01:12.880
aktif dan berjalan dan kompilasi berjalan dalam mode tontonan,

01:12.880 --> 01:14.420
saya mendapatkan CEO di sini.

01:14.420 --> 01:17.395
Sekarang sejauh itu tidak terlalu mewah, namun,

01:17.395 --> 01:22.395
jika kita mengambil ini dari backend, untuk alasan apa pun mungkin kita

01:23.080 --> 01:27.690
tidak mengambil semua data yang kita butuhkan, mungkin beberapa data

01:27.690 --> 01:30.490
tidak disetel pada saat ini.

01:30.490 --> 01:34.730
Dalam aplikasi yang lebih besar dan lebih kompleks, Anda tentu terkadang

01:34.730 --> 01:39.240
bekerja dengan data terstruktur dengan data bersarang di mana Anda tidak tahu

01:39.240 --> 01:42.650
dengan pasti apakah beberapa properti pada suatu objek sudah

01:42.650 --> 01:45.340
disetel atau mungkin tidak terdefinisi.

01:45.340 --> 01:49.680
Jadi di sini katakanlah job tidak ada di sini karena alasan apa pun kita tidak mengambilnya,

01:49.680 --> 01:53.180
di sini tentu saja saya mendapatkan kesalahan sekarang TypeScript

01:53.180 --> 01:55.930
mengeluh tentang ini karena ia tahu bahwa tidak ada properti

01:55.930 --> 01:57.843
job sekarang.

01:57.843 --> 02:01.347
Masalahnya adalah ia tahu untuk data ini, ia tidak akan tahu jika

02:01.347 --> 02:05.660
itu adalah data yang kita ambil dari beberapa file yang tidak dikontrol dari

02:05.660 --> 02:09.720
TypeScript atau seperti yang baru saja saya katakan jika kita mungkin

02:09.720 --> 02:12.530
mengambil ini dari backend dan kita tidak tahu dengan

02:12.530 --> 02:15.550
pasti data mana yang akan dikembalikan.

02:15.550 --> 02:18.150
Sekarang jika Anda tidak tahu apakah itu didefinisikan atau tidak,

02:18.150 --> 02:21.730
apa yang dapat kita lakukan dalam JavaScript biasa adalah kita dapat mencoba mengakses

02:21.730 --> 02:25.098
pekerjaan dan jika itu berhasil kita lanjutkan dan kita mengakses judul.

02:25.098 --> 02:29.450
Ini adalah cara JavaScript untuk memeriksa apakah sesuatu itu ada sebelum kita

02:29.450 --> 02:33.520
menyelam lebih dalam ke objek potensial itu dan jika itu tidak terdefinisi,

02:33.520 --> 02:37.110
kode ini tidak pernah berjalan dan karenanya kita memiliki kesalahan

02:37.110 --> 02:39.400
waktu berjalan yang lebih luas.

02:39.400 --> 02:42.410
Sekali lagi di sini TypeScript tentu saja tahu bahwa pekerjaan

02:42.410 --> 02:45.180
itu tidak ada, tetapi jika ini akan diambil dari beberapa

02:45.180 --> 02:48.470
sumber di mana TypeScript tidak dapat melihat ke dalam seperti

02:48.470 --> 02:52.910
hasil permintaan HTTP, ini akan menjadi cara aman untuk menghindari kesalahan waktu

02:52.910 --> 02:54.920
berjalan di JavaScript.

02:54.920 --> 02:58.110
Sekarang jika ini memang ada, kita mendapatkan output yang sama seperti sebelumnya.

02:58.110 --> 03:01.400
Jika tidak ada, setidaknya kita tidak mendapatkan run

03:01.400 --> 03:02.233
time error.

03:02.233 --> 03:07.020
Dengan TypeScript, Anda sebenarnya punya cara yang lebih baik untuk melakukan itu.

03:07.020 --> 03:10.520
Anda mendapatkan operator chaining opsional.

03:10.520 --> 03:15.320
Anda dapat menambahkan tanda tanya setelah hal yang Anda tidak yakin apakah itu didefinisikan

03:15.320 --> 03:16.880
atau tidak.

03:16.880 --> 03:21.600
Setidaknya jika Anda menggunakan TypeScript versi 3. 7 atau lebih tinggi.

03:21.600 --> 03:24.770
Di sini IDE saya tidak menyukai ini, tetapi ini adalah

03:24.770 --> 03:26.300
sintaks yang didukung.

03:26.300 --> 03:30.370
Ini memberitahu TypeScript apakah ini ada, jika memang mengakses job dan karenanya

03:30.370 --> 03:33.450
di sini kita dapat menambahkan tanda tanya itu dan oleh karena

03:33.450 --> 03:36.314
itu hanya mengakses judul jika job didefinisikan.

03:36.314 --> 03:39.300
Sekarang jika kita melakukan itu, saya masih mendapatkan kesalahan

03:39.300 --> 03:42.490
di sini jika saya mencoba mengkompilasinya karena TypeScript masih tahu

03:42.490 --> 03:44.510
dengan pasti bahwa pekerjaan itu tidak ada.

03:44.510 --> 03:47.370
Tetapi jika tidak tahu atau jika saya mengomentari ini di

03:47.370 --> 03:51.840
dalam kompilasi ini baik-baik saja dan semua yang dieksekusi seperti sebelumnya.

03:51.840 --> 03:56.400
Jadi operator chaining opsional di sini membantu kita mengakses properti

03:56.400 --> 04:00.730
bersarang dan objek bersarang dalam data objek kita dengan aman dan jika

04:00.730 --> 04:03.610
hal di depan tanda tanya tidak terdefinisi, ia tidak

04:03.610 --> 04:07.061
akan mengakses hal tersebut setelahnya dan oleh karena itu

04:07.061 --> 04:12.420
tidak akan melempar kesalahan runtime tetapi tidak akan melanjutkannya.

04:12.420 --> 04:15.210
Jadi di balik layar, ini pada dasarnya dikompilasi ke pemeriksaan

04:15.210 --> 04:19.213
if yang memeriksa apakah itu ada sebelum mencoba mengakses ini.
