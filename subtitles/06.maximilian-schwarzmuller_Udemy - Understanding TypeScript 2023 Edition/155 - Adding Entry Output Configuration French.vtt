WEBVTT

00:01.538 --> 00:03.725
Narrateur : Pour commencer, allons tout

00:03.725 --> 00:07.086
d'abord dans tsconfig. json, car nous devons nous assurer

00:07.086 --> 00:09.965
que certaines choses y sont configurées.

00:09.965 --> 00:12.780
Assurez-vous que la cible ici, est effectivement

00:12.780 --> 00:16.286
fixée à es5 ou es6, c'est à vous de voir.

00:16.286 --> 00:19.423
Cela dépend des navigateurs que vous prévoyez de prendre en charge.

00:19.423 --> 00:22.190
Parce qu'au final, webpack et les types de chargeurs utiliseront

00:22.190 --> 00:24.050
cette cible pour déterminer comment

00:24.050 --> 00:26.543
votre code doit être transformé.

00:26.543 --> 00:28.960
Vos types de code doivent-ils être transformés en code

00:28.960 --> 00:32.480
Java script qui fonctionne également dans les anciens navigateurs ?

00:32.480 --> 00:36.210
Ou comme avec es6 à un code qui ne fonctionne que dans les navigateurs

00:36.210 --> 00:37.811
plus récents ?

00:37.811 --> 00:42.640
Le module doit alors être réglé sur es2015 ou es6, donc ce réglage

00:42.640 --> 00:44.110
est correct.

00:44.110 --> 00:49.110
Et en plus, vous voulez aussi vérifier votre outDir.

00:50.560 --> 00:53.520
Je vais m'en tenir à dist, mais vous pouvez changer cela si vous voulez

00:53.520 --> 00:55.997
compiler votre code dans un autre répertoire.

00:55.997 --> 00:59.378
Mais vous n'avez plus besoin de répertoire racine,

00:59.378 --> 01:02.260
car webpack s'en chargera et déterminera

01:02.260 --> 01:05.014
où se trouvent vos fichiers racine.

01:05.014 --> 01:07.660
Donc, en général, ces paramètres devraient convenir.

01:07.660 --> 01:09.525
Nous pourrons toujours les modifier ultérieurement

01:09.525 --> 01:12.487
si quelque chose ne fonctionne pas comme nous le souhaitons.

01:12.487 --> 01:15.220
Avec cela, ajoutons un nouveau fichier de configuration

01:15.220 --> 01:19.848
à côté de tsconfig. json et c'est le webpack. config. fichier js.

01:19.848 --> 01:22.368
Et assurez-vous que vous le nommez vraiment comme

01:22.368 --> 01:24.150
ceci parce que c'est le fichier que

01:24.150 --> 01:27.579
webpack cherchera automatiquement et il indiquera même à webpack

01:27.579 --> 01:30.220
comment travailler avec notre projet.

01:30.220 --> 01:32.840
Parce que webpack est un outil qui doit être configuré pour

01:32.840 --> 01:34.568
fonctionner correctement ici.

01:34.568 --> 01:37.568
Alors qu'est-ce qu'on fait dans ce webpack. fichier de configuration ?

01:37.568 --> 01:40.338
Ce fichier de configuration utilise JavaScript et

01:40.338 --> 01:43.288
en fait il utilise node. js caractéristiques.

01:43.288 --> 01:46.747
Donc nous voulons utiliser le noeud. La syntaxe d'exportation js,

01:46.747 --> 01:50.379
qui ressemble à ceci, permet d'exporter un objet JavaScript.

01:50.379 --> 01:53.538
Qui sera l'objet de configuration récupéré par webpack.

01:53.538 --> 01:55.585
Au cas où vous ne l'auriez jamais vu, c'est ainsi

01:55.585 --> 01:59.648
que vous exportez des choses dans un nœud. environnement js.

01:59.648 --> 02:02.877
Et ici nous exportons un objet JavaScript.

02:02.877 --> 02:05.920
Maintenant, webpack a besoin de quelques informations.

02:05.920 --> 02:09.840
Plus important encore, il doit savoir par quel fichier commence

02:09.840 --> 02:14.585
l'ensemble de votre projet, c'est-à-dire où se trouve votre point d'entrée.

02:14.585 --> 02:17.370
Dans notre cas, il s'agit de l'application. fichier ts.

02:17.370 --> 02:18.922
Ce fichier doit être exécuté en

02:18.922 --> 02:20.981
premier, et ce que webpack fera ensuite,

02:20.981 --> 02:24.013
c'est qu'il regardera les importations dans ce fichier et

02:24.013 --> 02:25.461
ira dans ces fichiers et regardera

02:25.461 --> 02:27.378
leurs importations et les importations

02:27.378 --> 02:30.219
des fichiers importés et ainsi de suite.

02:30.219 --> 02:33.461
Jusqu'à ce qu'il connaisse tous les fichiers que votre projet utilise à la fin.

02:33.461 --> 02:36.201
Ensuite, il va parcourir le contenu des fichiers

02:36.201 --> 02:38.740
comme ce contenu ici et tout le contenu

02:38.740 --> 02:41.690
de tous les fichiers et les compiler, avec l'aide

02:41.690 --> 02:44.290
du ts. le paquet de chargeur que j'ai mentionné.

02:44.290 --> 02:46.960
Pour que webpack fonctionne correctement, vous devez maintenant

02:46.960 --> 02:50.421
supprimer tous les fichiers . js dans tous les

02:50.421 --> 02:51.598
imports.

02:51.598 --> 02:54.400
Nous en avions besoin avant, lorsque nous utilisions le

02:54.400 --> 02:57.885
navigateur natif intégré à ts. La fonctionnalité de module, mais

02:57.885 --> 03:01.130
avec webpack vous n'avez pas besoin de ces extensions.

03:01.130 --> 03:03.664
Parce que webpack va en fait chercher automatiquement. js, et certains autres fichiers d'extension.

03:03.664 --> 03:06.501
Donc vous ne devez pas les ajouter ici, sinon webpack

03:06.501 --> 03:09.270
cherchera des fichiers avec une double extension,

03:09.270 --> 03:10.716
ce que vous ne voulez pas.

03:10.716 --> 03:13.655
Alors retirez . js sur toutes ces importations ici, et une fois que vous avez

03:13.655 --> 03:18.441
fait cela, enregistrez tous ces fichiers pour

03:18.441 --> 03:21.370
vous assurer que vos changements sont appliqués.

03:21.370 --> 03:24.043
Maintenant, revenons à webpack. config. js, là vous devez maintenant

03:24.043 --> 03:26.498
ajouter

03:26.498 --> 03:31.320
une propriété d'entrée dans cet objet exporté.

03:31.320 --> 03:32.740
Et pointer du doigt . /src/app. ts dans notre exemple.

03:32.740 --> 03:37.740
Donc à la racine du fichier d'entrée de votre projet.

03:38.680 --> 03:42.444
Ensuite, ajoutez une clé de sortie ici.

03:42.444 --> 03:45.880
Une sortie maintenant est un objet ici.

03:45.880 --> 03:48.051
Où nous spécifions tout d'abord le nom du fichier.

03:48.051 --> 03:51.120
Ce sera le seul fichier JavaScript qui

03:51.120 --> 03:52.998
sera produit à la fin.

03:52.998 --> 03:55.440
Et ici, nous l'appellerons faisceau. js, mais vous pouvez le nommer comme vous

03:55.440 --> 03:57.350
le souhaitez.

03:57.350 --> 03:58.788
App. js, ou ce que vous voulez.

03:58.788 --> 04:01.709
Vous pouvez également ajouter

04:01.709 --> 04:05.171
des parties dynamiques ici, par exemple, le hachage du contenu, pour dire

04:05.171 --> 04:08.971
à webpack de créer automatiquement un hash unique pour chaque construction, ce qui

04:08.971 --> 04:11.829
peut vous aider avec la mise en cache dans le navigateur.

04:11.829 --> 04:13.578
Mais là encore, vous pouvez en apprendre davantage à ce sujet dans la documentation de webpack.

04:13.578 --> 04:16.229
Ici, nous n'en avons pas besoin, donc nous nommerons simplement le fichier bundle. js.

04:16.229 --> 04:19.779
En plus du nom du fichier, vous devez

04:19.779 --> 04:23.320
également spécifier le chemin d'accès, où la sortie doit être écrite.

04:23.320 --> 04:26.131
Et bien sûr, cela devrait correspondre

04:26.131 --> 04:28.900
au chemin que vous avez dans vos ts. config. js pour éviter les erreurs.

04:28.900 --> 04:32.970
Donc à ce dossier.

04:32.970 --> 04:34.189
Maintenant, contrairement à ce qui se passe chez les ts. config,js, vous ne

04:34.189 --> 04:37.010
devez pas écrire . /dist ici.

04:37.010 --> 04:39.819
Webpack veut un chemin absolu ici.

04:39.819 --> 04:42.099
Et pour en construire un, nous pouvons utiliser un nœud. module js.

04:42.099 --> 04:45.669
Pour cela, nous pouvons utiliser le nœud. js, qui utilise le mot

04:45.669 --> 04:48.880
clé requis, et importe

04:48.880 --> 04:51.280
le module path.

04:51.280 --> 04:54.220
Vous n'avez pas besoin de l'installer comme une bibliothèque,

04:54.220 --> 04:56.050
c'est un nœud central. js que vous avez déjà si vous

04:56.050 --> 04:59.651
avez le module node. js installé, ce que vous faites car nous l'avons

04:59.651 --> 05:02.149
fait plus tôt dans le cours.

05:02.149 --> 05:04.966
Vous pouvez maintenant utiliser path pour appeler

05:04.966 --> 05:08.552
la méthode resolve qui vous permet de construire un chemin

05:08.552 --> 05:11.280
absolu vers un certain dossier.

05:11.280 --> 05:12.910
Pour cela, nous utilisons une constante

05:12.910 --> 05:15.320
spéciale, la constante __dirname, qui est disponible

05:15.320 --> 05:17.236
globalement dans un nœud. environnement js.

05:17.236 --> 05:21.150
Et webpack comme je l'ai dit utilise node. js pour exécuter vos fichiers.

05:21.150 --> 05:24.692
Et ensuite, comme deuxième argument,

05:24.692 --> 05:27.433
dist, à la fin, dist construit juste un chemin

05:27.433 --> 05:30.661
absolu vers le dossier dist que webpack utilise ensuite

05:30.661 --> 05:33.190
pour y écrire votre sortie.

05:33.190 --> 05:35.452
Et avec cela, vous avez un point d'entrée et

05:35.452 --> 05:38.753
un point de sortie, mais vous ne dites pas à webpack ce qu'il doit

05:38.753 --> 05:40.743
faire avec vos fichiers TypeScript.

05:40.743 --> 05:42.553
Parce que par défaut webpack ne le

05:42.553 --> 05:45.140
sait pas, par défaut c'est juste un bundler.

05:45.140 --> 05:46.884
Toute fonctionnalité supplémentaire,

05:46.884 --> 05:48.684
comme la compilation de TypeScript en

05:48.684 --> 05:51.261
JavaScript, doit être enseignée à webpack.

05:51.261 --> 05:53.452
Nous le ferons dans le prochain cours.
