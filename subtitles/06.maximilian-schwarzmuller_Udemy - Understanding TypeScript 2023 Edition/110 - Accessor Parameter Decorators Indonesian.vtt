WEBVTT

00:02.210 --> 00:03.450
Instruktur Pria: Sekarang

00:03.450 --> 00:06.170
selain properti, Anda juga dapat menambahkan dekorator ke

00:06.170 --> 00:09.200
pengakses dan di sana saya akan membuat fungsi dekorator baru karena

00:09.200 --> 00:11.660
ini sekarang akan menerima argumen gratis.

00:11.660 --> 00:16.430
Log2, ia juga akan mendapatkan target yang lagi-lagi adalah prototipe, jika kita

00:16.430 --> 00:18.330
berurusan dengan pengakses instance,

00:18.330 --> 00:21.290
atau jika kita berurusan dengan pengakses statis,

00:21.290 --> 00:23.360
itu akan menjadi fungsi konstruktor

00:23.360 --> 00:24.960
sehingga kita tidak tahu kita

00:24.960 --> 00:27.290
akan bertipe apa saja.

00:27.290 --> 00:32.290
Kemudian kita akan memiliki nama anggota yang kita hadapi.

00:32.410 --> 00:35.030
Jadi nama pengakses pada akhirnya.

00:35.030 --> 00:38.683
Dan kita juga akan memiliki deskriptor properti di sini, yang

00:39.580 --> 00:42.030
akan bertipe deskriptor properti.

00:42.030 --> 00:44.600
Itu adalah tipe yang dibangun ke dalam TypeScript.

00:44.600 --> 00:49.600
Jadi di sana, mari kita log accessor decorator dan kemudian saya

00:50.030 --> 00:54.210
juga akan konsol log target di sini, lalu mungkin baris

00:54.210 --> 00:56.470
baru untuk membuatnya lebih

00:56.470 --> 01:01.470
mudah dibaca dalam output, nama dan juga deskriptor.

01:01.720 --> 01:05.890
Sekarang mari kita tambahkan log2 ke setter di sini seperti ini dan mari kita lihat

01:05.890 --> 01:07.350
apa yang kita dapatkan.

01:07.350 --> 01:10.733
Jika kita simpan itu, Anda lihat di bawah sana Anda punya

01:10.733 --> 01:14.090
dekorator pengakses yang dieksekusi di sini.

01:14.090 --> 01:19.090
Kami mendapatkan prototipe kami lagi, sama seperti buff untuk properti.

01:19.320 --> 01:23.570
Kemudian kita mendapatkan nama pengakses kita, harga dalam hal ini.

01:23.570 --> 01:24.900
Tidak menggarisbawahi harga,

01:24.900 --> 01:27.890
jadi bukan properti yang berhubungan secara internal.

01:27.890 --> 01:30.570
Bukannya benar-benar nama pengakses itu sendiri.

01:30.570 --> 01:33.630
Dan kita punya deskriptor properti di sini di mana kita

01:33.630 --> 01:36.240
melihat bahwa fungsi setter didefinisikan misalnya,

01:36.240 --> 01:37.600
fungsi getter tidak, karena

01:37.600 --> 01:41.990
untuk harga saya hanya memiliki setter, tidak ada getter.

01:41.990 --> 01:44.320
Dan kita melihat bahwa ini tidak dapat dihitung, tetapi

01:44.320 --> 01:45.680
dapat dikonfigurasi.

01:45.680 --> 01:47.810
Sehingga kita bisa mengubah definisi ini

01:47.810 --> 01:51.000
di sini misalnya kita bisa menghapusnya dan sebagainya.

01:51.000 --> 01:54.520
Ini semua ada dan ini adalah bagaimana kita dapat menambahkan dekorator

01:54.520 --> 01:56.650
ke sebuah pengakses, dan apa yang kemudian

01:56.650 --> 01:58.920
dapat kita akses di dalam dekorator ini.

01:58.920 --> 02:00.910
Sekarang selain properti dan pengakses,

02:00.910 --> 02:04.350
kita juga punya metode dan bisa menambahkan dekorator ke metode.

02:04.350 --> 02:09.350
Jadi di sini saya akan menambahkan Log3, dan menambahkannya ke metode saya di sana

02:09.430 --> 02:11.970
untuk mendapatkan harga dengan teks.

02:11.970 --> 02:13.220
Dan sekarang pertanyaannya

02:13.220 --> 02:17.323
tentu saja adalah argumen mana yang diterima oleh dekorator metode seperti itu?

02:18.180 --> 02:22.230
Sebuah method decorator juga menerima argumen bebas, yang

02:22.230 --> 02:25.520
targetnya lagi-lagi jika itu adalah metode instance,

02:25.520 --> 02:28.420
adalah prototipe objek.

02:28.420 --> 02:31.150
Jika itu adalah metode statis, fungsi konstruktor

02:31.150 --> 02:34.993
seperti sebelumnya, maka nama metode di sini, jadi string

02:36.450 --> 02:39.380
atau simbol sebenarnya.

02:39.380 --> 02:44.380
Dan juga deskriptor di bagian akhir, deskriptor properti.

02:44.490 --> 02:46.140
Ini adalah argumen bebas yang kita dapatkan

02:46.140 --> 02:48.110
di sini, dan Anda lihat ini adalah argumen yang sama

02:48.110 --> 02:49.410
seperti di pengakses kita.

02:49.410 --> 02:51.630
Jadi memang kita juga bisa menggunakan

02:51.630 --> 02:54.340
kembali ini, tapi saya akan membuat yang baru sehingga

02:54.340 --> 02:57.483
di sini saya bisa mencetak method decorator.

02:59.020 --> 03:00.840
Sekarang dengan itu jika saya menyimpan ini,

03:01.980 --> 03:04.410
ini mengeksekusi dan Anda lihat di sini dekorator metode

03:04.410 --> 03:07.880
kita mengeksekusi dan kemudian di sini kita mendapatkan prototipe kita, objek yang

03:07.880 --> 03:09.380
sama seperti sebelumnya.

03:09.380 --> 03:11.310
Kita mendapatkan nama metodenya di

03:11.310 --> 03:14.700
sini dan kita mendapatkan deskriptor dari metode ini di sini.

03:14.700 --> 03:17.440
Jadi perilaku yang sama seperti sebelumnya pada dasarnya, hanya

03:17.440 --> 03:19.400
saja deskriptornya sedikit berbeda karena

03:19.400 --> 03:20.950
ini adalah deskriptor metode dan bukan

03:20.950 --> 03:22.550
deskriptor pengakses.

03:22.550 --> 03:25.720
Kita punya nilai dan properti yang bisa ditulis di sini.

03:25.720 --> 03:27.750
Sebelumnya pada deskriptor pengakses, kita

03:27.750 --> 03:28.860
memiliki get dan set.

03:28.860 --> 03:30.910
Tapi itu hanya perbedaan java script,

03:30.910 --> 03:33.088
tidak ada yang spesifik TypeScript.

03:33.088 --> 03:38.088
Jadi, di sini kita memiliki fungsi dekorator ketiga yang sekarang kita

03:38.150 --> 03:40.070
tambahkan ke metode.

03:40.070 --> 03:43.390
Dekorator terakhir yang bisa kita tambahkan adalah parameter.

03:43.390 --> 03:45.260
Jadi, mari kita lakukan itu sekarang.

03:45.260 --> 03:47.550
Untuk itu, saya akan membuat satu fungsi lagi

03:47.550 --> 03:51.269
di sini, Log4 dan saya ingin menambahkan Log4 ke satu parameter yang saya

03:51.269 --> 03:53.660
dapatkan di sini, pajak dan Anda dapat menambahkannya

03:53.660 --> 03:55.510
ke setiap parameter yang Anda dapatkan

03:55.510 --> 03:57.130
tentunya.

03:57.130 --> 03:59.560
Anda tidak harus melakukannya, tetapi Anda dapat menambahkannya

03:59.560 --> 04:02.990
secara independen ke parameter apa pun yang ingin Anda tambahkan dekorator.

04:02.990 --> 04:06.419
Sekarang, apa yang didapat oleh parameter dekorator sebagai argumen?

04:06.419 --> 04:10.790
Nah, targetnya sama seperti sebelumnya.

04:10.790 --> 04:12.520
Argumen berikutnya yang kita dapatkan

04:12.520 --> 04:14.100
adalah nama, dan bukan nama parameter,

04:14.100 --> 04:17.310
tetapi nama metode di mana kita menggunakan parameter ini.

04:17.310 --> 04:20.530
Jadi pada dasarnya, sama seperti pada method decorator sejauh ini.

04:20.530 --> 04:22.170
Tetapi argumen terakhir berbeda.

04:22.170 --> 04:24.250
Ini sekarang bukan deskriptor

04:24.250 --> 04:28.380
properti, tetapi ini adalah posisi argumen ini, jadi

04:28.380 --> 04:30.100
nomor argumen.

04:30.100 --> 04:32.763
Di sini misalnya, ini akan menjadi argumen pertama.

04:35.310 --> 04:38.670
Jadi sekarang lagi, mari kita salin itu di sini

04:38.670 --> 04:43.550
dan masukkan semua itu ke dalam dekorator parameter Log4.

04:43.550 --> 04:45.410
Dan mari kita keluarkan posisi di sini juga sehingga

04:45.410 --> 04:47.170
kita bisa melihat apa yang ada di sana.

04:47.170 --> 04:50.960
Jika kita sekarang menyimpannya, kita melihat parameter decorator kita di atas sana,

04:50.960 --> 04:53.480
bukan output yang paling akhir karena urutan eksekusi berbeda

04:53.480 --> 04:55.630
tetapi kita melihat parameter decorator kita di

04:55.630 --> 04:57.180
sini dan kemudian di sini.

04:57.180 --> 04:59.530
Kami mendapatkan prototipe seperti sebelumnya.

04:59.530 --> 05:00.860
Kami mendapat nama metode

05:00.860 --> 05:02.190
di mana kami menggunakan

05:02.190 --> 05:04.770
parameter ini, dan kemudian indeks argumen

05:04.770 --> 05:06.240
itu, dan itu dimulai dari

05:06.240 --> 05:09.070
nol, jadi argumen pertama memiliki angka nol di sini,

05:09.070 --> 05:10.360
indeks nol, dan itulah

05:10.360 --> 05:12.740
dekorator parameter kami.

05:12.740 --> 05:14.920
Jadi ini semua adalah tempat di mana kita dapat menambahkan

05:14.920 --> 05:16.370
decorator dan TypeScript, dan kita

05:16.370 --> 05:18.570
dapat melakukan berbagai hal dengannya.

05:18.570 --> 05:20.450
Sekarang saya akan menunjukkan kepada

05:20.450 --> 05:21.660
Anda beberapa contoh dalam

05:21.660 --> 05:24.813
modul ini di sini, dan saya juga akan menunjukkan kepada Anda perpustakaan

05:24.813 --> 05:28.380
atau kerangka kerja yang banyak menggunakan dekorator.

05:28.380 --> 05:30.550
Dan saya akan menunjukkan kepada Anda apa yang mereka lakukan

05:30.550 --> 05:34.583
dengan dekorator untuk memberi Anda gambaran tentang kekuatan yang bisa dimiliki dekorator.
