WEBVTT

00:02.350 --> 00:04.170
Người hướng dẫn: Vậy TypeScript là gì?

00:04.170 --> 00:06.860
Tất cả là về cái gì, tại sao chúng ta lại sử dụng nó?

00:06.860 --> 00:10.820
TypeScript là một Superset JavaScript.

00:10.820 --> 00:12.190
Bây giờ, điều này có nghĩa là gì?

00:12.190 --> 00:14.250
Điều đó có nghĩa là TypeScript cuối

00:14.250 --> 00:16.370
cùng là một ngôn ngữ, một ngôn ngữ lập

00:16.370 --> 00:18.710
trình, được xây dựng trên JavaScript.

00:18.710 --> 00:20.940
Nó không phải là một ngôn ngữ hoàn toàn

00:20.940 --> 00:23.980
mới, thay vào đó, nó sử dụng ngôn ngữ JavaScript

00:23.980 --> 00:27.450
và bổ sung thêm các tính năng và ưu điểm mới cho nó.

00:27.450 --> 00:31.720
Bạn có thể nói rằng nó làm cho việc viết mã JavaScript trở nên dễ dàng

00:31.720 --> 00:32.840
và mạnh mẽ hơn.

00:32.840 --> 00:35.624
Nhưng, chúng tôi có một bất lợi rất lớn.

00:35.624 --> 00:39.786
TypeScript không thể được thực thi bởi các môi trường JavaScript

00:39.786 --> 00:41.760
như trình duyệt.

00:41.760 --> 00:44.270
Các trình duyệt không thể thực thi

00:44.270 --> 00:48.486
TypeScript và ví dụ: Node. js cũng không thể thực thi TypeScript,

00:48.486 --> 00:52.250
vì vậy môi trường nơi chúng tôi có thể thực thi JavaScript không

00:52.250 --> 00:54.080
hỗ trợ TypeScript.

00:54.080 --> 00:56.140
Ý tưởng đằng sau TypeScript là gì?

00:56.140 --> 01:00.760
Đó là phiên bản JavaScript tốt hơn và chúng tôi không thể sử dụng nó?

01:00.760 --> 01:02.130
Vâng, không hoàn toàn.

01:02.130 --> 01:06.050
TypeScript là một ngôn ngữ lập trình, nhưng nó cũng là một công cụ.

01:06.050 --> 01:10.049
Đó là một trình biên dịch mạnh mẽ mà bạn chạy trên mã

01:10.049 --> 01:14.410
của mình để biên dịch mã bản thảo thành JavaScript.

01:14.410 --> 01:16.540
Vì vậy, kết quả bạn nhận được

01:16.540 --> 01:20.260
khi viết mã trong TypeScript là JavaScript.

01:20.260 --> 01:22.870
Nhưng bạn không viết mã JavaScript đó, bạn

01:22.870 --> 01:24.900
đã viết mã TypeScript với tất cả

01:24.900 --> 01:27.480
các tính năng mới và tất cả các ưu điểm, và

01:27.480 --> 01:30.670
bạn nhận được mã JavaScript bình thường.

01:30.670 --> 01:33.810
Tất nhiên, điều đó đặt ra một câu hỏi quan trọng, làm cách

01:33.810 --> 01:36.710
nào TypeScript có thể thêm các tính năng mới nếu cuối

01:36.710 --> 01:40.630
cùng những gì bạn nhận được là JavaScript thông thường?

01:40.630 --> 01:43.460
Và câu trả lời là, trình biên dịch TypeScript sẽ

01:43.460 --> 01:47.710
biên dịch các tính năng mới này thành các giải pháp thay thế JavaScript,

01:47.710 --> 01:50.670
vì vậy, cuối cùng, nó có thể cung cấp cho bạn một cú

01:50.670 --> 01:52.890
pháp đẹp hơn, một cách dễ dàng hơn để thực

01:52.890 --> 01:56.571
hiện điều gì đó và sau đó, nó sẽ biên dịch theo cách đẹp hơn, dễ dàng

01:56.571 --> 01:59.820
hơn đó thành một JavaScript phức tạp hơn đoạn trích, mà

01:59.820 --> 02:02.060
bạn sẽ phải viết khác.

02:02.060 --> 02:03.230
Vì vậy, nó không phải

02:03.230 --> 02:06.790
là phép thuật, tất nhiên nó không thể thêm những gì không thể

02:06.790 --> 02:08.610
có trong ngôn ngữ JavaScript,

02:08.610 --> 02:11.150
nhưng nó có thể thêm các tính năng mới đơn giản

02:11.150 --> 02:15.020
là dễ sử dụng hơn, cú pháp đẹp hơn, những thứ như thế này.

02:15.020 --> 02:17.470
Ngoài ra, TypeScript, tất nhiên,

02:17.470 --> 02:20.900
thực hiện một điều quan trọng mà cái tên đã ngụ ý.

02:20.900 --> 02:22.740
Nó thêm các loại, nó thêm một

02:22.740 --> 02:26.230
tính năng vào ngôn ngữ JavaScript, tại đó chúng ta sẽ

02:26.230 --> 02:28.750
xem xét kỹ lưỡng trong giây lát, điều này

02:28.750 --> 02:31.541
thực sự sẽ mang lại cho bạn với tư cách là nhà

02:31.541 --> 02:35.070
phát triển, cơ hội xác định các lỗi trong mã của bạn sớm

02:35.070 --> 02:38.480
hơn trước khi tập lệnh của bạn chạy và lỗi xảy ra trong

02:38.480 --> 02:41.350
thời gian chạy trong trình duyệt.

02:41.350 --> 02:44.320
Vì vậy, nó không chỉ cung cấp cho bạn một số tính

02:44.320 --> 02:46.690
năng mới và cách thức tốt hơn để thực

02:46.690 --> 02:50.240
hiện điều gì đó, mà còn cung cấp cho bạn thêm lỗi kiểm tra

02:50.240 --> 02:54.153
xem các lỗi mà nếu không bạn sẽ gặp phải do lỗi thời gian chạy

02:54.153 --> 02:58.370
có thể được phát hiện và sửa sớm trong quá trình phát triển.

02:58.370 --> 03:00.600
Vậy tại sao chúng ta lại sử dụng TypeScript?

03:00.600 --> 03:02.570
Hãy xem xét ví dụ này, một

03:02.570 --> 03:06.710
hàm JavaScript khá đơn giản cộng hai số.

03:06.710 --> 03:08.760
Bây giờ khi tôi gọi nó, xin lưu ý rằng

03:08.760 --> 03:11.810
tôi đang chuyển hai chuỗi thay vì hai số và tôi sẽ cho

03:11.810 --> 03:14.810
bạn thấy một ví dụ thực tế trong đó điều gì đó như thế

03:14.810 --> 03:18.090
này có thể xảy ra thực tế chỉ trong một giây.

03:18.090 --> 03:20.270
Vì vậy, chúng tôi đang gọi hàm này bằng

03:20.270 --> 03:22.519
hai chuỗi và kết quả là những gì bạn thực

03:22.519 --> 03:25.260
sự nhận được ở đây có thể là một hành vi không

03:25.260 --> 03:27.240
mong muốn, bởi vì nếu bạn thêm hai

03:27.240 --> 03:29.596
chuỗi, JavaScript sẽ nối các chuỗi thay

03:29.596 --> 03:32.780
vì thực hiện phép tính toán ở đây.

03:32.780 --> 03:36.310
Vì vậy, kết quả sẽ không phải là năm, mà là hai

03:36.310 --> 03:38.980
mươi ba, một chuỗi nối hai số.

03:38.980 --> 03:41.690
Đây là một lỗi bạn có thể gặp phải trong JavaScript,

03:41.690 --> 03:43.530
đây không phải là lỗi kỹ thuật,

03:43.530 --> 03:46.720
bạn có thể sẽ không gặp phải lỗi thời gian chạy, nhưng

03:46.720 --> 03:49.832
bạn có một lỗi logic trong mã của mình.

03:49.832 --> 03:52.820
Và điều đó, tất nhiên, có thể dẫn đến những vấn đề lớn trong

03:52.820 --> 03:55.870
các ứng dụng web mà bạn đang viết bằng JavaScript.

03:55.870 --> 03:59.360
Tất nhiên, bây giờ, trong JavaScript, chúng tôi có các chiến lược

03:59.360 --> 04:02.541
giảm thiểu, chúng tôi có thể thêm chức năng kiểm tra if để kiểm

04:02.541 --> 04:05.440
tra các loại đầu vào khi chạy, chúng tôi cũng có thể xác

04:05.440 --> 04:08.240
thực và làm sạch đầu vào của người dùng và trong khi

04:08.240 --> 04:10.670
chúng tôi có thể muốn thực hiện tất cả điều đó

04:10.670 --> 04:14.040
cũng thật tuyệt nếu chúng ta có thể bắt lỗi như thế này trong quá

04:14.040 --> 04:15.840
trình phát triển.

04:15.840 --> 04:19.220
Và may mắn thay, điều này có thể thực hiện được với TypeScript, bởi

04:19.220 --> 04:21.810
vì các nhà phát triển có thể viết mã không hợp lệ tại

04:21.810 --> 04:23.970
đây và giới thiệu các bot như thế này trong

04:23.970 --> 04:26.160
JavaScript và với TypeScript, chúng tôi

04:26.160 --> 04:30.060
có một công cụ giúp chúng tôi viết mã tốt hơn và tránh các sự cố như vậy.

04:30.060 --> 04:31.910
Vì vậy, chúng ta hãy có một cái nhìn sâu hơn về điều này.
