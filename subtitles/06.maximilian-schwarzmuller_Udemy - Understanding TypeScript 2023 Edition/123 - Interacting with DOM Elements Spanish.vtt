WEBVTT

00:02.400 --> 00:04.390
Instructor: Así que renderizamos nuestro

00:04.390 --> 00:07.240
primer formulario pero lo que notarás es que el estilo está un poco

00:07.240 --> 00:09.200
fuera, quiero decir que el formulario se ve

00:09.200 --> 00:11.910
bien, pero algo de distancia entre los bordes de nuestra pantalla

00:11.910 --> 00:13.870
y el formulario estaría bien.

00:13.870 --> 00:15.830
Si te sumerges en la aplicación css detectará

00:15.830 --> 00:18.360
que ahí tenemos un selector de

00:18.360 --> 00:21.050
ID de entrada de usuario.

00:21.050 --> 00:23.330
Si añadimos algunos márgenes, no suena tan

00:23.330 --> 00:25.630
mal, así que en realidad lo que podemos hacer

00:25.630 --> 00:28.060
es una aplicación. ts cuando creamos

00:28.060 --> 00:31.740
nuestro elemento aquí o cuando tenemos acceso a él.

00:31.740 --> 00:34.520
Podemos llegar al elemento y añadir un ID aquí

00:34.520 --> 00:36.840
que sería la entrada del usuario.

00:36.840 --> 00:39.740
Esto asegurará que el elemento renderizado tenga este ID

00:39.740 --> 00:42.800
en por lo tanto si esto se recarga esto se ve mucho más bonito.

00:42.800 --> 00:45.100
Si inspeccionamos esto en la profundidad

00:45.100 --> 00:49.320
del navegador vemos el ID aquí y esa es la razón de este mejor estilo.

00:49.320 --> 00:51.940
Con eso ya estamos haciendo el siguiente paso, estamos

00:51.940 --> 00:54.010
interactuando con el elemento.

00:54.010 --> 00:56.980
Ahora bien, esta no es la única interacción que quiero hacer.

00:56.980 --> 00:58.770
Dado que tenemos un formulario aquí

00:58.770 --> 01:01.870
quiero obtener acceso a las diferentes entradas de formulario

01:01.870 --> 01:05.910
que tenemos aquí para que podamos leer los valores cuando el formulario se presenta,

01:05.910 --> 01:08.800
y que también a continuación, establecer un oyente de eventos

01:08.800 --> 01:12.160
aquí a la presentación, y validar la entrada del usuario.

01:12.160 --> 01:15.720
Así que necesitamos acceso al botón o al formulario en general para

01:15.720 --> 01:19.180
escuchar el envío y a todos los elementos de entrada para obtener

01:19.180 --> 01:21.273
los últimos valores de allí.

01:22.360 --> 01:25.440
Para eso aquí, antes de adjuntar todo, pero después

01:25.440 --> 01:28.500
de asignar mi ID al elemento aquí, quiero tener

01:28.500 --> 01:32.210
acceso a las diferentes entradas en ese elemento en ese

01:32.210 --> 01:35.980
formulario, y quiero almacenarlos como propiedades

01:35.980 --> 01:39.820
de esta clase, así que voy a añadir más campos allí y el primer

01:39.820 --> 01:44.570
campo podría ser un campo titleInputElement.

01:44.570 --> 01:47.167
El tipo será HTMLInputElement escribir esto,

01:48.060 --> 01:50.410
y no sólo lo necesitaremos una vez que necesitamos

01:50.410 --> 01:52.770
otros dos campos similares.

01:52.770 --> 01:55.900
Tenemos un campo descriptionInputElement que

01:55.900 --> 01:57.550
es de tipo HTMLInputElement,

01:58.520 --> 02:02.730
y también necesitamos un campo peopleInputElement.

02:02.730 --> 02:06.240
Ahora podemos rellenar estos campos aquí en el constructor,

02:06.240 --> 02:09.500
con este titleInputElement que se establece igual

02:09.500 --> 02:11.510
a esto. elemento, por lo que

02:11.510 --> 02:13.120
a nuestro elemento de la forma,

02:13.120 --> 02:16.390
siempre tenga en cuenta que es el elemento de la forma aquí,

02:16.390 --> 02:21.350
selector de consulta y, a continuación, la consulta para el elemento de título.

02:21.350 --> 02:25.000
Y si de nuevo echas un vistazo al índice. html vemos ahí que tenemos

02:25.000 --> 02:28.410
el título de ID en este elemento por lo que podemos

02:28.410 --> 02:30.420
consultar por eso, así que

02:30.420 --> 02:33.323
en app. Aquí en el selector de consulta

02:33.323 --> 02:37.210
podemos usar #title para seleccionar el elemento ID del título y almacenarlo

02:37.210 --> 02:39.750
en titleInputElement.

02:39.750 --> 02:44.070
Ahora como sabes al igual que con el documento obtener elemento por ID, typescript

02:44.070 --> 02:46.230
no tiene ninguna posibilidad de entender

02:46.230 --> 02:49.090
que el selector de consulta va a devolver un elemento

02:49.090 --> 02:50.650
de entrada aquí.

02:50.650 --> 02:53.780
Así que para decirle a typescript, voy a utilizar de nuevo

02:53.780 --> 02:56.020
el casting, y lanzar esto a un elemento de entrada,

02:56.020 --> 02:58.270
y entonces podemos repetir este paso dos veces,

02:58.270 --> 03:00.672
y también firmar el descriptionInputElement,

03:00.672 --> 03:03.240
y el peopleInputElement.

03:03.240 --> 03:06.600
Busque las identificaciones correspondientes en el índice. archivo html, que son sorprendentemente,

03:06.600 --> 03:12.190
supongo, la descripción y la gente, y añadirlos a typescript.

03:12.190 --> 03:16.120
Así que aquí buscamos el elemento ID de la descripción,

03:16.120 --> 03:17.720
y aquí a las personas.

03:17.720 --> 03:19.510
Y con eso tenemos acceso a todos

03:19.510 --> 03:22.687
estos elementos dentro de nuestra clase aquí, o

03:22.687 --> 03:26.593
dentro de cada objeto que se crea basado en la clase.

03:27.600 --> 03:29.870
Ahora sólo tenemos que añadir un listener

03:29.870 --> 03:33.330
a nuestro elemento, a nuestro formulario.

03:33.330 --> 03:38.330
Para ello añadiré otro método privado configure, que no tienes que añadir

03:38.440 --> 03:39.790
pero de nuevo quiero

03:39.790 --> 03:43.130
mantener esa separación donde básicamente hacemos

03:43.130 --> 03:47.900
la selección y la configuración aproximada en el constructor.

03:47.900 --> 03:49.340
Y luego la inserción o

03:49.340 --> 03:52.210
la puesta a punto en métodos separados.

03:52.210 --> 03:53.900
Y en el método configure mi idea

03:53.900 --> 03:57.000
es configurar un listener de eventos, así que aquí podemos

03:57.000 --> 03:58.970
llegar a este elemento que es el formulario

03:58.970 --> 04:01.830
y añadir un listener de eventos.

04:01.830 --> 04:04.570
Ahora bien, como typescript sabe que ese elemento es

04:04.570 --> 04:08.580
un elemento de formulario HTML, en realidad nos ofrece autocompletar cuando

04:08.580 --> 04:10.770
queremos escuchar el evento de envío aquí,

04:10.770 --> 04:12.250
lo cual es genial.

04:12.250 --> 04:15.520
Ahora sólo tenemos que vincular esto a un método y para

04:15.520 --> 04:17.840
ello añadiré otro método privado, privado

04:17.840 --> 04:20.650
porque nunca voy a acceder a esto desde fuera

04:20.650 --> 04:23.460
de la clase, sólo desde dentro.

04:23.460 --> 04:26.970
Que llamaré submitHandler, el nombre es totalmente a su gusto.

04:26.970 --> 04:29.740
Este debe ser un método que reciba un objeto de evento,

04:29.740 --> 04:32.750
'tho porque lo enlazaremos a este oyente de eventos.

04:32.750 --> 04:34.880
Así que aquí podemos señalar esto...

04:36.460 --> 04:38.713
enviar el manipulador.

04:40.180 --> 04:42.080
Ahora lo ajustamos para asegurarnos

04:42.992 --> 04:45.040
de que antes de adjuntar toda la llamada

04:45.040 --> 04:46.730
configuremos y ejecutemos este

04:46.730 --> 04:49.330
método privado, de nuevo es privado por lo que desde

04:49.330 --> 04:50.500
dentro de la clase podemos

04:50.500 --> 04:53.660
por supuesto llegar a él, desde fuera se obtendría un error de

04:53.660 --> 04:56.000
typescript, por lo que ahora este método debería

04:56.000 --> 04:59.290
dispararse cada vez que se envíe el formulario.

04:59.290 --> 05:02.010
En el manejador de envío quiero tener acceso

05:02.010 --> 05:05.520
a mis diferentes valores de entrada aquí, y validarlos,

05:05.520 --> 05:07.710
y luego, por supuesto, hacer algo

05:07.710 --> 05:10.310
con las entradas.

05:10.310 --> 05:12.700
Ahora nos preocuparemos de la parte de hacer

05:12.700 --> 05:15.480
algo más tarde, por ahora vamos a acceder a ellos.

05:15.480 --> 05:18.430
Para ello, en primer lugar, llamaré al evento. preventDefault para evitar

05:18.430 --> 05:20.620
el envío de formularios por defecto,

05:20.620 --> 05:23.890
lo que desencadenaría el envío de una petición HTTP

05:23.890 --> 05:25.820
que no quiero aquí, y luego sólo

05:25.820 --> 05:28.270
para ver dónde funciona esto, vamos a imprimir

05:28.270 --> 05:32.730
la consola. registra este valor del elemento title, para

05:32.730 --> 05:36.250
imprimir lo que hay actualmente en el elemento de entrada title.

05:36.250 --> 05:39.010
Si lo guardamos ves que compila sin errores, así

05:39.010 --> 05:40.560
que eso tiene buena pinta.

05:40.560 --> 05:44.670
Y si ahora vamos a la consola aquí e introducimos "¡Hola! y hacemos clic en añadir proyecto, lo bueno es que no se ha enviado,

05:44.670 --> 05:49.440
lo malo es que obtenemos un error, "No se puede leer la propiedad 'valor'

05:49.440 --> 05:51.657
de undefined. ¿Qué está fallando aquí?

05:51.657 --> 05:54.620
El problema aquí es que, este aquí, que esta palabra clave en submitHandler

05:54.620 --> 05:56.173
no apunta a la clase en realidad.

05:57.730 --> 06:02.230
¿Por qué?

06:02.230 --> 06:06.420
Bueno, debido a la forma en que JavaScript y typescript funciona,

06:06.420 --> 06:07.760
enlazamos el método

06:07.760 --> 06:11.770
aquí al oyente de eventos y cuando enlazamos algo a un evento

06:11.770 --> 06:14.680
o con la ayuda de un oyente de eventos, entonces

06:14.680 --> 06:17.480
eso es algo para que el método, que va a ser

06:17.480 --> 06:19.740
ejecutado, tendrá esto ligado a algo

06:19.740 --> 06:22.410
más, en este caso al objetivo actual del

06:22.410 --> 06:24.210
evento.

06:24.210 --> 06:27.270
Así que este final de este método no

06:27.270 --> 06:31.060
apuntará a la clase, cuando el método se dispara

06:31.060 --> 06:35.130
sobre un evento con un oyente de eventos.

06:35.130 --> 06:38.150
Ahora la solución es llamar a bind aquí

06:38.150 --> 06:40.360
en submitHandler para preconfigurar

06:40.360 --> 06:43.980
cómo se va a ejecutar esta función cuando se ejecute

06:43.980 --> 06:46.949
en el futuro, y el primer argumento que

06:46.949 --> 06:52.880
podemos pasar a bind es lo que la palabra clave this hará referencia dentro

06:52.880 --> 06:56.450
de la función a ejecutar.

06:56.450 --> 06:59.760
Y aquí paso esto que significa, esto dentro

06:59.760 --> 07:02.920
de submitHandler se referirá a lo mismo que

07:02.920 --> 07:05.750
esto se refiere en este contexto.

07:05.750 --> 07:10.030
Y como lo llamamos en el contexto de configure aquí, que llamamos

07:10.030 --> 07:13.660
con este configure, esto termina fuera de configure

07:13.660 --> 07:17.500
se referirá a la clase, y gracias a bind, allí para todos,

07:17.500 --> 07:19.880
también se referirá a la clase termina

07:19.880 --> 07:22.870
fuera de la submitHandler.

07:22.870 --> 07:24.830
Así que si ahora guardamos

07:24.830 --> 07:28.890
esto aquí, y recargamos, y entramos en

07:28.890 --> 07:33.673
"¡Hola! " aquí, ahora se ve "¡Hola!

07:33.673 --> 07:33.673
"

07:33.673 --> 07:35.600
se imprime aquí cuando enviamos el formulario.

07:35.600 --> 07:37.510
Así que esto está resuelto y ahora

07:37.510 --> 07:38.770
nos ocupamos de esto adecuadamente.

07:38.770 --> 07:40.210
Pero tal vez haya una forma mejor,

07:40.210 --> 07:43.650
o una forma alternativa de la que todos nos hemos enterado.

07:43.650 --> 07:46.330
Tal vez uno usando decoradores, así que

07:46.330 --> 07:49.430
aquí tienes la oportunidad de volver a pausar

07:49.430 --> 07:51.970
esto y tratar de resolver esta unión con

07:51.970 --> 07:54.300
decoradores, porque eso es algo que

07:54.300 --> 07:57.900
aprendimos en la sección de decoradores.
