WEBVTT

00:02.240 --> 00:04.870
Sunucu: İlk bileşenimizi ekledik.

00:04.870 --> 00:06.090
İkinci bir tane daha ekleyelim.

00:06.090 --> 00:09.970
NewTodo. tsx bir dosya adıdır.

00:09.970 --> 00:13.060
Orada tabii ki react'ten react'i içe aktarıyoruz.

00:13.060 --> 00:16.170
Ve elbette sınıf tabanlı bileşenler de oluşturabilirsiniz.

00:16.170 --> 00:18.270
Bu da tamamen desteklenmektedir, ancak

00:18.270 --> 00:22.410
ben bu modern işlevsel bileşenleri yalnızca stil olarak kullanacağım.

00:22.410 --> 00:24.070
Burada da daha sonra bileşenimizi

00:24.070 --> 00:26.180
oluşturacak bir fonksiyonumuz var.

00:26.180 --> 00:29.258
NewTodo'yu varsayılan olarak dışa aktarıyorum ve bir

00:29.258 --> 00:31.260
tür ataması ekleyelim ve bunun bir

00:31.260 --> 00:33.021
tür işlevi bileşeni olacağını

00:33.021 --> 00:34.410
açıkça belirtelim.

00:34.410 --> 00:35.800
Ve bu nedenle elbette burada,

00:35.800 --> 00:38.220
geri dönen bazı jsx kodlarını kaçırıyoruz.

00:38.220 --> 00:39.730
Bu yüzden burada, kullanıcının yeni todos

00:39.730 --> 00:42.030
eklemesine izin vermek için ihtiyaç duyduğum tüm kontrolleri

00:42.030 --> 00:43.780
eklemek istediğim bir form döndüreceğim.

00:45.060 --> 00:48.650
Şimdi bu yeni todo bileşenini uygulama bileşenine ekleyelim.

00:48.650 --> 00:53.650
Yani burada NewTodo'yu . /components/NewTodo yazın

00:55.130 --> 00:58.095
ve yorum yerine buraya ekleyin.

00:58.095 --> 01:00.520
NewTodo kendi kendine kapanan bir bileşen

01:00.520 --> 01:02.790
olarak, çünkü şu anda açılış ve kapanış

01:02.790 --> 01:04.750
etiketleri arasında hiçbir şey geçirmiyoruz

01:04.750 --> 01:07.784
ve ayrıca burada herhangi bir sahne yok, en azından

01:07.784 --> 01:09.263
şu anda.

01:10.140 --> 01:11.540
Yani bu bileşen yerine

01:11.540 --> 01:13.330
artık bir girdi ve ardından

01:13.330 --> 01:16.190
da bir düğme ekleyebiliriz.

01:16.190 --> 01:18.117
Bu yüzden buraya bir div ekleyin

01:18.117 --> 01:20.020
ve burada htmlFor niteliklerine

01:20.020 --> 01:24.880
sahip bir etiketin diyelim ki "todo-text "i göstermesini istiyorum.

01:24.880 --> 01:26.560
Burada sadece "Yapılacaklar

01:26.560 --> 01:31.250
Metni" dediğim ve ardından "yapılacaklar metni" id'sine sahip

01:31.250 --> 01:35.170
metin türünde girdi öğesi kullandığım için etiket ve

01:35.170 --> 01:36.900
girdi anlamsal olarak doğru

01:36.900 --> 01:39.640
bir şekilde bağlanıyor.

01:39.640 --> 01:41.440
Ve buradaki div'in altına, form

01:41.440 --> 01:43.120
yerine "TODO EKLE" dediğim

01:43.120 --> 01:44.437
bir düğme ekleyeceğim

01:45.297 --> 01:47.970
ve bu düğme, formu göndermesi için submit türünde

01:47.970 --> 01:49.670
olmalıdır.

01:49.670 --> 01:51.900
Bu artık yeni bir Todo eklemek için kullanabileceğimiz

01:51.900 --> 01:53.143
çok temel bir form.

01:54.580 --> 01:57.060
Şimdi, bunun çalıştığından emin olalım

01:57.060 --> 01:59.660
ve bunun için aslında uygulamamız gereken

01:59.660 --> 02:01.820
birkaç farklı adım var.

02:01.820 --> 02:05.020
Kullanıcı buraya ne girdiyse onu almamız ve kullanıcının

02:05.020 --> 02:08.550
buraya girdiklerini uygulama bileşenine iletmemiz gerekiyor

02:08.550 --> 02:09.810
çünkü daha sonra yapılacak

02:09.810 --> 02:13.330
işlerimizi buradan yöneteceğiz.

02:13.330 --> 02:16.150
Bu yüzden öncelikle form gönderimine tepki verelim.

02:16.150 --> 02:18.050
Yeni bir fonksiyon ekleyebiliriz,

02:18.050 --> 02:20.300
yani fonksiyonel bileşende bir fonksiyon,

02:20.300 --> 02:22.720
ancak bu artık normal bir fonksiyon olacak

02:22.720 --> 02:27.720
ve adını "todoSubmitsHandler" koyacağız, istediğiniz herhangi bir isim.

02:28.210 --> 02:29.990
Bu, bu form her gönderildiğinde

02:29.990 --> 02:31.860
çalışması gereken bir işlevdir.

02:31.860 --> 02:35.571
Böylece bunu onSubmit prop'una bağlayabiliriz, todoSubmitsHandler,

02:35.571 --> 02:38.770
bunu çalıştırmayın, sadece işaret edin, böylece

02:38.770 --> 02:40.900
bu form her gönderildiğinde bizim

02:40.900 --> 02:43.810
için çalıştırılır.

02:43.810 --> 02:46.270
Şimdi burada bir olay nesnesi alıyoruz ve olay

02:46.270 --> 02:49.507
nesnesi react türünde. FormEvent.

02:51.290 --> 02:54.010
Şimdi, bu uygulamaya hizmet veren sunucuya gerçek bir

02:54.010 --> 02:55.780
istek göndermek olan bu varsayılanı

02:55.780 --> 02:58.300
önlemek için olay önleme varsayılanını çağırmak

02:58.300 --> 02:59.280
istiyorum.

02:59.280 --> 03:01.520
Bu tabii ki olmasını istediğim zaman değil.

03:01.520 --> 03:04.680
Bu isteği yalnızca burada JavaScript'te işlemek istiyorum

03:04.680 --> 03:08.350
ve bu nedenle bu tarayıcı varsayılanının engellenmesi gerekiyor.

03:08.350 --> 03:09.770
Şimdi bu engellendiğinde,

03:09.770 --> 03:12.610
kullanıcı girdiye ne girdiyse onu alabiliriz

03:12.610 --> 03:15.250
ve bunun için iki farklı yolumuz var.

03:15.250 --> 03:18.310
Buradaki girdinin durumunu iki yönlü bağlama ile

03:18.310 --> 03:20.970
yönetebiliriz ya da form gönderildiğinde

03:20.970 --> 03:23.170
kullanıcının buraya ne girdiğini

03:23.170 --> 03:25.010
çıkarmak için bir ref, bir referans

03:25.010 --> 03:26.520
kullanırız.

03:26.520 --> 03:28.410
Ben ikinci yaklaşımı tercih edeceğim

03:28.410 --> 03:30.420
çünkü zaten birazdan uygulama bileşeninde

03:30.420 --> 03:33.470
durum yönetimini göreceğiz.

03:33.470 --> 03:37.340
Böyle bir ref oluşturmak için, react'ten useRef kancasını

03:37.340 --> 03:40.580
içe aktarıyoruz ve kancalar, bileşene belirli

03:40.580 --> 03:44.010
işlevler eklemek için bileşenleri çalıştırabileceğiniz

03:44.010 --> 03:45.290
özel işlevlerdir ve

03:45.290 --> 03:48.101
burada useRef'i çalıştırdığımızda, geri

03:48.101 --> 03:51.190
aldığımız şey bir sabitte saklayabileceğimiz

03:51.190 --> 03:53.730
bir Ref nesnesidir ve aslında "textInputRef"

03:53.730 --> 03:57.310
olarak adlandıracağım.

03:57.310 --> 04:00.176
Örneğin, böyle bir referansı bir dom öğesine atamak

04:00.176 --> 04:04.980
için kullanabilir ve ardından buradaki kodumuzun içinden o dom öğesiyle etkileşime

04:04.980 --> 04:06.500
geçebiliriz.

04:06.500 --> 04:08.800
Örneğin, bu form gönderildiğinde.

04:09.680 --> 04:11.510
Böyle bir bağlantıyı, seçtiğiniz

04:11.510 --> 04:14.020
herhangi bir html öğesine özel Ref özelliğini

04:14.020 --> 04:16.580
ekleyerek ve burada oluşturduğumuz nesneyi

04:16.580 --> 04:19.150
işaret ederek kuruyoruz.

04:19.150 --> 04:21.530
Bu yüzden textInputRef ekleyin.

04:21.530 --> 04:23.540
Bu, burada bir bağlantı yaratır.

04:23.540 --> 04:27.380
Ancak, TypeScript'in bundan hoşlanmadığını zaten görüyorsunuz.

04:27.380 --> 04:30.110
Çünkü useRef'in de genel bir

04:30.110 --> 04:33.250
işlev olduğu ortaya çıkıyor.

04:33.250 --> 04:35.270
Şimdi ona hangi türü aktarabiliriz.

04:35.270 --> 04:37.340
Burada neyi bilmek ilginç olurdu?

04:37.340 --> 04:39.200
Grafiğin içinde ne tür verilerin

04:39.200 --> 04:42.030
saklanacağını bilmek ilginç olurdu ve girdi

04:42.030 --> 04:43.970
öğesini işaret ettiğiniz için,

04:43.970 --> 04:47.880
orada saklanan bir html girdi öğemiz olacak.

04:47.880 --> 04:50.420
Şimdi hepimiz Ref kurulurken ona varsayılan bir değer

04:50.420 --> 04:51.840
sağlamak zorundayız ve orada

04:51.840 --> 04:53.190
null değerini sağlayacağız,

04:53.190 --> 04:54.710
çünkü bileşen ilk kez oluşturulduğunda,

04:54.710 --> 04:57.380
bu kod çalıştırıldığında, elbette bu orada oluşturulmamıştır,

04:57.380 --> 05:01.590
bu yüzden bu hiçbir şeyi işaret etmeyecektir.

05:01.590 --> 05:03.350
Ancak bu yapıldıktan sonra

05:03.350 --> 05:04.950
bağlantı kurulacak ve ardından

05:04.950 --> 05:07.040
bu Ref çalışacaktır.

05:07.040 --> 05:09.453
Ve şimdi burada todoSubmitHandler'da, textInputRef

05:10.342 --> 05:15.342
kullanarak girilen metni alabiliriz. Akım, bir Ref ile çalıştığınızda

05:15.500 --> 05:17.973
her zaman girmeniz gereken

05:17.973 --> 05:21.440
bir şeydir. değeri tabii ki burada çünkü

05:21.440 --> 05:24.530
html input elementi ile çalışıyoruz.

05:24.530 --> 05:27.940
Ancak, burada sorun bunun boş olabilmesidir.

05:27.940 --> 05:29.630
Bu zaten bildiğimiz bir sorun,

05:29.630 --> 05:31.790
bunu kursun başlarında Dom'da bir şey

05:31.790 --> 05:33.370
seçtiğimizde de yaşamıştık

05:33.370 --> 05:34.630
ve burada da yaşıyoruz

05:34.630 --> 05:37.020
çünkü TypeScript bu bağlantının kurulduğunu

05:37.020 --> 05:38.800
kesin olarak bilemez.

05:38.800 --> 05:40.580
Bunu biliyoruz, kodu biz yazdık,

05:40.580 --> 05:43.050
ancak TypeScript ne yazık ki orada bir bağlantı

05:43.050 --> 05:45.300
kurduğumuzu anlamıyor.

05:46.310 --> 05:48.920
Bunu düzeltmek için buraya bir ünlem işareti ekleyerek

05:48.920 --> 05:51.350
TypeScript'e bunun iyi olacağını, bunun ayarlanacağını

05:51.350 --> 05:54.350
ve iyi olduğumuzu tekrar söyleyebiliriz.

05:54.350 --> 05:56.130
Bu arada TypeScript doğrudur,

05:56.130 --> 05:58.920
eğer burada todoSubmitHandler'ı çağırsaydık,

05:58.920 --> 06:00.590
bu ileri çağrılırdı, bu ilk

06:00.590 --> 06:02.410
kez oluşturulurdu ve sonra aslında

06:02.410 --> 06:05.000
bu henüz başlatılmazdı.

06:05.000 --> 06:07.910
Bunun kesin olarak başlatılacağını bilmemizin tek nedeni, bunun

06:07.910 --> 06:09.730
yalnızca form gönderildiğinde çağrılacağını

06:09.730 --> 06:10.830
ve bunun da ancak form oluşturulduktan

06:10.830 --> 06:13.830
sonra gerçekleşebileceğini bilmemizdir.

06:13.830 --> 06:16.120
Yani kodumuzun çalışma şeklini biliyoruz.

06:16.120 --> 06:18.360
Bu asla geçersiz olmayacaktır.

06:18.360 --> 06:20.810
Başka bir olasılık olsaydı, textInputRef öğesinin olup

06:20.810 --> 06:22.780
olmadığını kontrol etmek için burada bir if-check

06:22.780 --> 06:26.030
kullanmanız gerekirdi. current null ise başka

06:26.030 --> 06:27.620
bir şey yapın.

06:27.620 --> 06:29.550
Ama burada böyle bir şey olamaz.

06:29.550 --> 06:31.230
Böylece bir değer çıkarıyoruz

06:31.230 --> 06:34.640
ve konsola gönderebiliyoruz. Çalışıp çalışmadığını görmek için bunu buraya kaydedin.

06:34.640 --> 06:37.040
Ama tabii ki bu son durum değil.

06:37.040 --> 06:40.900
Bunu kaydedelim, buraya girelim, bir ay içinde

06:40.900 --> 06:44.590
bitirelim ve yapılacaklar ekleyelim ve burada

06:44.590 --> 06:47.970
konsol günlüklerinde görelim.

06:47.970 --> 06:50.310
Olması gerektiği gibi çalışıyor.

06:50.310 --> 06:51.910
Ve olması gerektiği gibi çalıştığına

06:51.910 --> 06:55.460
göre, şimdi bu değeri uygulama bileşenine aldığımızdan emin olalım.

06:55.460 --> 06:58.820
Eğer tepki vermeyi biliyorsanız kesinlikle önce kendi başınıza deneyin.

06:58.820 --> 07:00.963
Bir sonraki derste bunu birlikte yapacağız.
