WEBVTT

1
00:00:00.000 --> 00:00:02.410
(silence)

2
00:00:02.410 --> 00:00:04.190
<v ->So we already see how TypeScript</v>

3
00:00:04.190 --> 00:00:06.200
can help us during development.

4
00:00:06.200 --> 00:00:10.560
Now, we also know that there is a number type in JavaScript.

5
00:00:10.560 --> 00:00:14.010
And we can see it with the built in type of operator.

6
00:00:14.010 --> 00:00:15.781
This is now not TypeScript specific,

7
00:00:15.781 --> 00:00:17.560
this is a built in operator

8
00:00:17.560 --> 00:00:20.420
and keyword supported by JavaScript.

9
00:00:20.420 --> 00:00:22.910
We can use it to get the type of a certain value.

10
00:00:22.910 --> 00:00:27.050
So here, we could console lock type of number one.

11
00:00:27.050 --> 00:00:27.992
And what we'll see if we do

12
00:00:27.992 --> 00:00:30.780
that is that as soon as we compile this,

13
00:00:30.780 --> 00:00:32.623
so that we run the updated code.

14
00:00:33.780 --> 00:00:37.040
Here, we print number to the console.

15
00:00:37.040 --> 00:00:39.330
Now we do that, thanks to this output here,

16
00:00:39.330 --> 00:00:41.180
and thanks to the type of operator

17
00:00:41.180 --> 00:00:43.770
and in Vanilla JavaScript, without TypeScript,

18
00:00:43.770 --> 00:00:46.710
we could use that to always improve our function here.

19
00:00:46.710 --> 00:00:51.500
We could check if type of number is equal to number.

20
00:00:51.500 --> 00:00:54.300
Excuse me, type of n1 I mean,

21
00:00:54.300 --> 00:00:56.350
if that is equal to number,

22
00:00:56.350 --> 00:01:00.710
and we could also check if type of n2 is equal to number.

23
00:01:00.710 --> 00:01:02.349
and only perform our operation here

24
00:01:02.349 --> 00:01:05.220
if it is an otherwise thrown error

25
00:01:05.220 --> 00:01:07.860
or do the opposite and check if it's not equal,

26
00:01:07.860 --> 00:01:10.820
or if n2 is not equal.

27
00:01:10.820 --> 00:01:13.230
And if either of the two is not a number,

28
00:01:13.230 --> 00:01:16.360
then we could throw a new error where we say,

29
00:01:16.360 --> 00:01:19.690
incorrect input. This actually

30
00:01:19.690 --> 00:01:22.300
would be a non TypeScript way of ensuring

31
00:01:22.300 --> 00:01:25.700
that we can't call this function with a string here.

32
00:01:25.700 --> 00:01:26.760
If I do this now,

33
00:01:26.760 --> 00:01:29.060
and I recompile, we get our TypeScript error,

34
00:01:29.060 --> 00:01:30.830
but let's ignore that for now.

35
00:01:30.830 --> 00:01:31.730
If we rerun this,

36
00:01:31.730 --> 00:01:33.100
we get the incorrect input,

37
00:01:33.100 --> 00:01:34.940
which we're throwing ourselves.

38
00:01:34.940 --> 00:01:38.080
So now we hardened dysfunction in JavaScript,

39
00:01:38.080 --> 00:01:39.930
it fails at runtime,

40
00:01:39.930 --> 00:01:41.970
but failing might here be better

41
00:01:41.970 --> 00:01:44.950
than showing an incorrect output which we had before.

42
00:01:44.950 --> 00:01:47.640
So this would be a way of checking the inputs

43
00:01:47.640 --> 00:01:48.715
in just JavaScript.

44
00:01:48.715 --> 00:01:50.640
You don't need TypeScript for that.

45
00:01:50.640 --> 00:01:53.200
That's regular JavaScript code.

46
00:01:53.200 --> 00:01:54.033
But of course,

47
00:01:54.033 --> 00:01:55.160
this approach has downsides.

48
00:01:55.160 --> 00:01:57.160
Sometimes it's the right thing to do.

49
00:01:57.160 --> 00:02:01.440
Sometimes you only can validate certain inputs at runtime.

50
00:02:01.440 --> 00:02:03.150
But the downside is here,

51
00:02:03.150 --> 00:02:05.480
we're checking something which we actually

52
00:02:05.480 --> 00:02:08.950
can avoid during development with TypeScript.

53
00:02:08.950 --> 00:02:11.180
So yes, we're throwing an error.

54
00:02:11.180 --> 00:02:14.210
And in our application we might have built in measures

55
00:02:14.210 --> 00:02:16.860
that can then fall back to some other behavior

56
00:02:16.860 --> 00:02:19.080
to save the running application.

57
00:02:19.080 --> 00:02:20.750
But still, we're throwing an error,

58
00:02:20.750 --> 00:02:24.180
which is really not necessary to occur in the first place.

59
00:02:24.180 --> 00:02:27.350
We could have prevented it with TypeScript.

60
00:02:27.350 --> 00:02:28.830
And here, we really see the difference

61
00:02:28.830 --> 00:02:30.400
between JavaScript and TypeScript,

62
00:02:30.400 --> 00:02:31.450
when it comes to types.

63
00:02:31.450 --> 00:02:33.750
JavaScript is dynamically typed,

64
00:02:33.750 --> 00:02:35.610
which means it's perfectly fine

65
00:02:35.610 --> 00:02:36.880
that we have a variable

66
00:02:36.880 --> 00:02:39.100
which initially might hold a number,

67
00:02:39.100 --> 00:02:41.600
where we later assign a string to it.

68
00:02:41.600 --> 00:02:44.500
And that's why we have to type off operator

69
00:02:44.500 --> 00:02:48.024
so that we can check the current type of something

70
00:02:48.024 --> 00:02:50.124
at runtime if we have some code

71
00:02:50.124 --> 00:02:52.267
that depends on a certain type.

72
00:02:52.267 --> 00:02:53.570
TypeScript on the other hand,

73
00:02:53.570 --> 00:02:55.094
is statically typed,

74
00:02:55.094 --> 00:02:58.480
which means we define the types of variables

75
00:02:58.480 --> 00:03:01.740
and parameters ends on during development,

76
00:03:01.740 --> 00:03:04.980
they don't suddenly change during runtime.

77
00:03:04.980 --> 00:03:05.813
Now, of course,

78
00:03:05.813 --> 00:03:09.090
since TypeScript is compiled to JavaScript,

79
00:03:09.090 --> 00:03:10.660
they theoretically could.

80
00:03:10.660 --> 00:03:12.510
But if we use TypeScript,

81
00:03:12.510 --> 00:03:13.790
and we write code

82
00:03:13.790 --> 00:03:17.530
where we suddenly assign a new type of data into a variable,

83
00:03:17.530 --> 00:03:18.810
where we previously said

84
00:03:18.810 --> 00:03:19.840
that this should be a number,

85
00:03:19.840 --> 00:03:22.900
for example, and now we're assigning a string,

86
00:03:22.900 --> 00:03:25.810
then we get an error during development,

87
00:03:25.810 --> 00:03:27.480
so that we are forced

88
00:03:27.480 --> 00:03:29.670
to be clear regarding the types,

89
00:03:29.670 --> 00:03:32.120
something can or cannot hold.

90
00:03:32.120 --> 00:03:33.710
That's the difference here.

91
00:03:33.710 --> 00:03:36.620
So we don't really want to use implementations

92
00:03:36.620 --> 00:03:38.330
or solutions like that,

93
00:03:38.330 --> 00:03:40.810
if we can avoid it with TypeScript.

94
00:03:40.810 --> 00:03:42.200
Still, it's important to know

95
00:03:42.200 --> 00:03:43.890
that JavaScript Of course,

96
00:03:43.890 --> 00:03:46.400
knows about the concept of types.

97
00:03:46.400 --> 00:03:48.740
It knows about some types like numbers,

98
00:03:48.740 --> 00:03:50.640
string and Boolean.

99
00:03:50.640 --> 00:03:52.300
But using that always means

100
00:03:52.300 --> 00:03:53.540
that we can only fail

101
00:03:53.540 --> 00:03:56.400
at runtime instead of during development,

102
00:03:56.400 --> 00:03:58.700
which is a better place for us as a developer.

103
00:03:58.700 --> 00:04:01.550
It allows us to fix bugs earlier.

104
00:04:01.550 --> 00:04:02.840
And in addition,

105
00:04:02.840 --> 00:04:05.410
JavaScript only knows about a couple of types.

106
00:04:05.410 --> 00:04:07.170
As you will learn throughout this course.

107
00:04:07.170 --> 00:04:10.540
TypeScript knows about way more types than JavaScript.

108
00:04:10.540 --> 00:04:14.450
So does runtime checking is really not as flexible

109
00:04:14.450 --> 00:04:18.030
or not as powerful as what we can do with TypeScript.

110
00:04:18.030 --> 00:04:19.490
And for all these reasons,

111
00:04:19.490 --> 00:04:20.660
this approach is actually

112
00:04:20.660 --> 00:04:22.550
not the approach we want to use here.

113
00:04:22.550 --> 00:04:26.540
Sometimes it can be useful to get the type at runtime.

114
00:04:26.540 --> 00:04:28.790
But sometimes, like in this example,

115
00:04:28.790 --> 00:04:31.740
it's way better to get it during development.

116
00:04:31.740 --> 00:04:34.280
The only important thing to recognize of course,

117
00:04:34.280 --> 00:04:36.070
just is that with TypeScript,

118
00:04:36.070 --> 00:04:38.670
you only get to support during development,

119
00:04:38.670 --> 00:04:39.596
not at runtime,

120
00:04:39.596 --> 00:04:41.610
because these TypeScript features

121
00:04:41.610 --> 00:04:44.650
and checks are not built into the JavaScript engine

122
00:04:44.650 --> 00:04:47.590
so that logic can't execute in the browser,

123
00:04:47.590 --> 00:04:49.416
it can only execute during development

124
00:04:49.416 --> 00:04:51.223
when you compile your code.

