WEBVTT

00:02.130 --> 00:05.620
- : Pour cela, vous trouverez ci-joint notre bon vieux projet de départ,

00:05.620 --> 00:08.470
j'ai déjà démarré le serveur avec NPM start.

00:08.470 --> 00:12.320
Et le processus de veille TypeScript avec TSC-W.

00:12.320 --> 00:14.870
Et la toute première chose que nous devons configurer

00:14.870 --> 00:18.030
ici est dans un fichier tsconfig, assurez-vous que votre

00:18.030 --> 00:21.620
cible est définie sur es6 et ensuite, si vous faites défiler vers le

00:21.620 --> 00:24.230
bas, assurez-vous que vous ajoutez cette ligne

00:24.230 --> 00:26.720
de décorateur expérimental ici.

00:26.720 --> 00:28.380
Ajoutez une virgule devant et vous pourrez

00:28.380 --> 00:31.700
ensuite utiliser AutoFormat pour formater tout cela correctement.

00:31.700 --> 00:34.020
C'est important, sinon vous ne pourrez pas utiliser

00:34.020 --> 00:36.000
les décorateurs dans votre projet.

00:36.000 --> 00:37.250
Assurez-vous donc de

00:37.250 --> 00:40.540
modifier votre tsconfig. json de manière appropriée.

00:40.540 --> 00:42.630
Et avec cela, nous pouvons nous plonger dans l'écriture

00:42.630 --> 00:46.980
de notre premier décorateur ici dans l'application. fichier ts.

00:46.980 --> 00:50.950
Et je veux commencer par un décorateur que nous pouvons ajouter à une classe.

00:50.950 --> 00:54.530
Maintenant, les décorateurs en général concernent les classes, mais il s'agit

00:54.530 --> 00:55.363
d'un décorateur que

00:55.363 --> 00:58.220
nous allons ajouter à la classe dans son ensemble.

00:58.220 --> 01:00.730
Pour cela, disons que nous avons une classe,

01:00.730 --> 01:04.360
Personne, une classe très triviale, où nous avons un nom.

01:04.360 --> 01:07.530
Peut-être avec une valeur de Max, pré-initialisée ici.

01:07.530 --> 01:10.520
Où nous avons une fonction de constructeur où j'enregistre juste

01:10.520 --> 01:12.600
la création de l'objet personne, de sorte

01:12.600 --> 01:14.763
que nous voyons que cela est exécuté.

01:15.880 --> 01:19.363
Et puis, bien sûr, nous pouvons créer une nouvelle personne ici,

01:20.760 --> 01:22.910
avec un nouveau mot-clé, comme ceci.

01:22.910 --> 01:24.030
Et si nous le voulons, nous

01:24.030 --> 01:26.490
pouvons bien sûr enregistrer cette personne créée.

01:26.490 --> 01:28.330
Et cela ne devrait pas vous surprendre,

01:28.330 --> 01:29.430
si nous sauvegardons

01:29.430 --> 01:32.090
tout cela, cela compile sans erreur.

01:32.090 --> 01:33.700
Et si nous visitons notre page

01:33.700 --> 01:36.670
alors, sur Localhost : 3000, dans la console JavaScript,

01:36.670 --> 01:38.900
nous voyons Créer un objet personne qui

01:38.900 --> 01:41.140
provient du constructeur.

01:41.140 --> 01:44.603
Et nous voyons tous, bien sûr, la personne elle-même ici.

01:45.810 --> 01:49.550
Dans cet exemple, il n'y a pas de décorateurs impliqués.

01:49.550 --> 01:51.000
Changeons cela.

01:51.000 --> 01:53.370
En haut du fichier, ajoutons un décorateur.

01:53.370 --> 01:56.060
Et un décorateur, et c'est vraiment important de le comprendre,

01:56.060 --> 01:58.080
n'est finalement qu'une fonction.

01:58.080 --> 02:01.280
Une fonction que vous appliquez à quelque chose, par exemple,

02:01.280 --> 02:03.530
à une classe d'une certaine manière.

02:03.530 --> 02:04.750
Créons donc une fonction

02:04.750 --> 02:09.523
ici, avec le mot-clé function, et je vais la nommer Logger.

02:10.390 --> 02:13.290
Maintenant, c'est une fonction, la seule chose spéciale ici est

02:13.290 --> 02:15.570
que je commence avec un caractère majuscule.

02:15.570 --> 02:16.492
Ce n'est pas une obligation,

02:16.492 --> 02:20.200
vous n'êtes pas obligé d'utiliser un caractère de départ majuscule, vous

02:20.200 --> 02:22.470
pouvez aussi utiliser un caractère minuscule,

02:22.470 --> 02:25.610
vous voyez juste beaucoup de décorateurs dans les bibliothèques

02:25.610 --> 02:27.680
que vous pouvez utiliser qui utilisent des

02:27.680 --> 02:30.030
caractères de départ majuscules et donc, je vais

02:30.030 --> 02:32.200
faire la même chose ici.

02:32.200 --> 02:35.450
Ainsi, la fonction Logger est une fonction et nous pouvons

02:35.450 --> 02:39.330
l'appliquer comme un décorateur, comme nous allons le voir.

02:39.330 --> 02:42.730
Maintenant, ajoutons un journal de console ici, Logging, afin que nous puissions

02:42.730 --> 02:44.730
voir quand cette fonction s'exécute.

02:44.730 --> 02:47.300
Parce que je ne l'appellerai pas directement.

02:47.300 --> 02:50.330
Au lieu de cela, je veux l'ajouter comme un décorateur à cette classe.

02:50.330 --> 02:53.710
Et nous le faisons en ajoutant un symbole @ ici

02:53.710 --> 02:57.370
devant la classe et ensuite notre fonction ici.

02:57.370 --> 02:58.440
Comme ça.

02:58.440 --> 03:00.320
Maintenant, il y a deux choses spéciales ici.

03:00.320 --> 03:03.780
Le symbole @ est ici un identifiant spécial que

03:03.780 --> 03:06.170
TypeScript voit ou reconnaît.

03:06.170 --> 03:09.110
Et ensuite, la chose directement après le symbole @

03:09.110 --> 03:11.010
doit pointer vers une fonction.

03:11.010 --> 03:13.460
Pas l'exécuter, mais le pointer du doigt,

03:13.460 --> 03:15.800
ce qui devrait être votre décorateur.

03:15.800 --> 03:17.400
Maintenant, vous voyez ici que Logger

03:17.400 --> 03:20.650
accepte trop peu d'arguments pour être utilisé comme décorateur ici.

03:20.650 --> 03:23.010
Donc la bonne chose est que TypeScript comprend que je

03:23.010 --> 03:24.930
veux l'utiliser comme un décorateur ici.

03:24.930 --> 03:27.980
La mauvaise chose est que nous ne passons pas assez d'arguments.

03:27.980 --> 03:31.000
Et en effet, les décorateurs reçoivent des arguments.

03:31.000 --> 03:34.870
Le nombre d'arguments dépend de l'endroit où vous utilisez le décorateur.

03:34.870 --> 03:39.710
Ici, pour un décorateur que nous ajoutons à une classe, nous obtenons un argument.

03:39.710 --> 03:42.910
C'est la cible de ce décorateur pour ainsi dire,

03:42.910 --> 03:46.160
qui est notre fonction de construction.

03:46.160 --> 03:49.020
On peut donc dire que nous avons une fonction

03:49.020 --> 03:51.240
ici comme argument à la fin.

03:51.240 --> 03:54.110
Nous pouvons également l'appeler constructeur, car à la fin

03:54.110 --> 03:56.650
nous obtiendrons la fonction constructeur de cette

03:56.650 --> 03:59.550
classe, ou de n'importe quelle classe à laquelle nous ajoutons

03:59.550 --> 04:01.470
ce décorateur comme argument.

04:01.470 --> 04:06.310
Consolons aussi. enregistrez ça pour que nous puissions

04:06.310 --> 04:09.650
avoir un aperçu de l'argument du constructeur ici.

04:09.650 --> 04:10.550
Et sauvons ça.

04:10.550 --> 04:12.750
Et comme vous le voyez, il compile sans erreur.

04:12.750 --> 04:14.750
Et si nous regardons maintenant notre sortie,

04:14.750 --> 04:16.580
nous voyons l'ancien code d'avant, mais nous

04:16.580 --> 04:18.590
voyons aussi la sortie de journalisation, et cette

04:18.590 --> 04:20.810
fonction de constructeur est enregistrée.

04:20.810 --> 04:22.760
En fait, nous voyons la classe entière ici,

04:22.760 --> 04:24.520
mais les classes ne sont finalement qu'une

04:24.520 --> 04:27.670
sorte de sucre tactique sur les fonctions de construction.

04:27.670 --> 04:31.450
Notez également que la sortie de notre décorateur, Logging,

04:31.450 --> 04:35.030
et cette classe ou cette fonction constructeur log ici

04:35.030 --> 04:39.460
est imprimée en premier, avant de voir Creating person object et

04:39.460 --> 04:41.540
notre objet Person.

04:41.540 --> 04:44.360
Car, en effet, les décorateurs et c'est vraiment important,

04:44.360 --> 04:48.430
les décorateurs s'exécutent lorsque votre classe est définie.

04:48.430 --> 04:50.530
Pas quand il est instancié.

04:50.530 --> 04:53.020
Vous n'avez pas besoin d'instancier votre classe du tout.

04:53.020 --> 04:55.760
Nous pourrions supprimer le code d'instanciation de la classe,

04:55.760 --> 04:58.780
et nous obtiendrions toujours la sortie du décorateur.

04:58.780 --> 05:02.210
Le décorateur s'exécute donc lorsque JavaScript trouve votre définition

05:02.210 --> 05:05.660
de classe, votre définition de fonction de constructeur.

05:05.660 --> 05:08.580
Pas quand on utilise cette fonction constructrice pour

05:08.580 --> 05:10.070
instancier un objet.

05:10.070 --> 05:13.280
C'est vraiment important de le comprendre.

05:13.280 --> 05:15.170
C'est donc notre premier décorateur.

05:15.170 --> 05:16.670
Mais ce n'est pas la seule

05:16.670 --> 05:19.063
façon de créer un décorateur.
