WEBVTT

00:02.170 --> 00:03.830
Bleiben wir bei den Funktionen.

00:03.830 --> 00:07.120
Eine weitere nette Funktion, die in modernem JavaScript zur Verfügung

00:07.120 --> 00:09.450
steht, ist die Möglichkeit, Funktionsparametern

00:09.450 --> 00:11.033
Standardargumente zuzuweisen.

00:11.880 --> 00:13.830
Nehmen wir an, dass wir in unserer Add-Funktion

00:13.830 --> 00:17.720
aus irgendeinem Grund einen Standardwert für b haben wollen.

00:17.720 --> 00:20.180
Wir wissen also, dass wir in der Lage sein wollen, zwei Zahlen zu addieren.

00:20.180 --> 00:23.850
Falls Sie die Funktion jedoch nur mit einer Zahl aufrufen,

00:23.850 --> 00:28.130
wird für das zweite Argument oder den zweiten Parameter ein Standardwert

00:28.130 --> 00:29.990
angenommen.

00:29.990 --> 00:32.120
Wir können dies tun, indem wir hier in der Parameterliste ein

00:32.120 --> 00:34.980
Gleichheitszeichen hinzufügen und dann unseren Standardwert festlegen.

00:34.980 --> 00:36.920
Das muss natürlich zu unserem Typ passen.

00:36.920 --> 00:40.020
Zum Beispiel eins oder was auch immer der Standardwert sein sollte.

00:40.020 --> 00:42.770
Damit können wir diese Funktion mit nur einem

00:42.770 --> 00:44.080
Argument aufrufen.

00:44.080 --> 00:46.700
Ich könnte es also so aufrufen und TypeScript würde sich

00:46.700 --> 00:48.830
nicht beschweren, weil es erkennt, dass wir hier

00:48.830 --> 00:50.200
ein Standardargument haben,

00:50.200 --> 00:51.860
das dann für b genommen wird.

00:51.860 --> 00:53.910
Und deshalb bekomme ich

00:53.910 --> 00:58.910
hier eine Ausgabe von sechs, weil mein Standard b eins ist

00:59.130 --> 01:03.113
und ich fünf addiere, was sechs ergibt.

01:04.010 --> 01:07.090
Sie müssen an letzter Stelle in der Liste stehen.

01:07.090 --> 01:10.710
Wenn Sie z. B. a ein Standardargument zuweisen, haben

01:10.710 --> 01:12.640
wir ein Problem, warum?

01:12.640 --> 01:15.290
Denn Standardargumente werden nicht übersprungen, wenn

01:15.290 --> 01:16.840
Sie eine Funktion aufrufen.

01:16.840 --> 01:19.490
Wenn ich also hier eine Funktion mit einem Argument aufrufe,

01:19.490 --> 01:21.990
dann werden die Argumente, die ich hier übergebe, in

01:21.990 --> 01:25.060
der gleichen Reihenfolge an die Parameter übergeben.

01:25.060 --> 01:27.240
Der Aufruf der Funktion mit einem Argument, in

01:27.240 --> 01:29.900
diesem Fall fünf, übergibt also dieses eine Argument an

01:29.900 --> 01:32.400
das erste Argument hier in der Parameterliste.

01:32.400 --> 01:34.150
Und da das zweite Argument nicht

01:34.150 --> 01:37.660
mit einem Standardwert versehen ist, ist es nicht optional.

01:37.660 --> 01:40.920
Wir liefern also gar kein zweites Argument.

01:40.920 --> 01:43.730
TypeScript oder JavaScript schaut sich also nicht

01:43.730 --> 01:46.800
Ihre Funktionsdefinition an und vermutet, dass Sie wahrscheinlich

01:46.800 --> 01:50.650
das Standardargument überspringen und dem Nicht-Standardargument

01:50.650 --> 01:53.290
Ihren Wert zuweisen wollen.

01:53.290 --> 01:55.740
Stattdessen hält sie sich einfach an die Reihenfolge.

01:55.740 --> 01:59.720
Daher sollten Sie die Standardwerte von rechts einstellen.

01:59.720 --> 02:01.830
Stellen Sie also sicher, dass die Parameter,

02:01.830 --> 02:04.010
für die Sie keine Standardargumente akzeptieren,

02:04.010 --> 02:07.523
vor Ihren Standardparametern stehen.
