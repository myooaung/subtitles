WEBVTT

00:02.400 --> 00:04.350
مدرس: مساحات الأسماء جميلة

00:04.350 --> 00:07.240
جدًا ، لكنها ليست بالضرورة مثالية.

00:07.240 --> 00:09.680
لقد رأينا مشكلة واحدة في المحاضرة الأخيرة

00:09.680 --> 00:13.290
حيث قمت يدويًا بإضافة جميع المعلقين إلى كل ملف.

00:13.290 --> 00:15.620
عندما أقوم بالإزالة والسحب والإفلات من قائمة

00:15.620 --> 00:17.340
المشروع ، نعم على سبيل المثال ، لا

00:17.340 --> 00:18.900
يزال يتم تجميعه بدون أخطاء.

00:18.900 --> 00:20.350
هذا ليس مثاليا.

00:20.350 --> 00:22.360
الآن ، قد يعمل أو لا يعمل ، اعتمادًا على

00:22.360 --> 00:25.047
ما إذا كان بعض الملفات الأخرى تستورد نموذج السحب

00:25.047 --> 00:26.590
والإفلات الذي أحتاجه هنا في

00:26.590 --> 00:27.550
النهاية.

00:27.550 --> 00:29.100
الذي سيكون هو الحال هنا.

00:29.100 --> 00:31.533
لذلك من الناحية الفنية ، حتى بعد إزالة

00:31.533 --> 00:33.200
هذا ، فإنه يعمل هنا.

00:33.200 --> 00:35.580
لكن هذا ليس رائعًا ، إنه خطير جدًا.

00:35.580 --> 00:38.560
إذا كنا نعتمد على حقيقة أن بعض الملفات سوف تتعامل

00:38.560 --> 00:41.990
معها من أجلنا ، حسنًا إذا قمنا بعد ذلك بحذف أو تغيير

00:41.990 --> 00:44.830
هذا الملف الذي حفظ مؤخرتنا ، فإننا فجأة نغير

00:44.830 --> 00:47.740
شيئًا غير ذي صلة تمامًا ويتوقف تطبيقنا عن

00:47.740 --> 00:49.240
العمل.

00:49.240 --> 00:51.420
نحن بالتأكيد لا نريد ذلك.

00:51.420 --> 00:53.900
لذلك سيكون من الرائع لو كانت لدينا

00:53.900 --> 00:58.050
واردات وصادرات توضح بوضوح ما نستورده من أي ملف.

00:58.050 --> 00:59.660
وإذا احتجنا إلى شيء ما هنا

00:59.660 --> 01:01.120
، اسحب الهدف على سبيل

01:01.120 --> 01:03.400
المثال ، ولم نستورده بشكل صريح ،

01:03.400 --> 01:04.840
فسنحصل على خطأ.

01:04.840 --> 01:06.450
هذا هو في الأساس ما نريده.

01:06.450 --> 01:10.235
ونحصل على هذا السلوك مع وحدات ES6.

01:10.235 --> 01:12.930
الآن ، توجد وحدات ES6 أيضًا خارج نوع

01:12.930 --> 01:14.800
العالم ، وتدعمها المتصفحات

01:14.800 --> 01:17.340
الحديثة بشكل أصلي ، حيث سيقوم المتصفح

01:17.340 --> 01:19.630
بعد ذلك بتنزيل جميع حالات تعليق

01:19.630 --> 01:22.960
الملف عند تنفيذه.

01:22.960 --> 01:25.150
ولكن يمكن للأنواع أيضًا استيرادها

01:25.150 --> 01:28.350
ثم تحصل على دعم النوع الأولي عند استخدامها.

01:28.350 --> 01:31.007
الآن كيف تعمل وحدات ES6؟

01:31.007 --> 01:33.600
لنبدأ مرة أخرى بالسحب والإفلات.

01:33.600 --> 01:35.240
دعنا نزيل مساحة الاسم هذه والتي

01:35.240 --> 01:37.360
تعتبر من الأنواع الخالصة confeature.

01:37.360 --> 01:40.030
دعونا نحافظ على كلمة مفتاح التصدير بالرغم من ذلك.

01:40.030 --> 01:42.150
إن كلمة مفتاح التصدير ليست موجودة فقط

01:42.150 --> 01:44.290
للعمل مع مسافات الاسم ، بل هي في الواقع

01:44.290 --> 01:46.980
صيغة افتراضية لبرامج Java النصية والتي تعتبر

01:46.980 --> 01:49.800
كلها مهمة من خلال كتابة البرنامج النصي.

01:49.800 --> 01:52.360
هذا يعني أنك تقوم بتصدير هذا الطور

01:52.360 --> 01:53.600
البيني وهذا هنا

01:53.600 --> 01:56.870
أيضًا من هذا الملف ويمكنك بعد ذلك استيراده

01:56.870 --> 01:58.460
إلى ملف آخر.

01:58.460 --> 02:01.290
في حالتنا هنا نحتاجها في عنصر المشروع وملفات

02:01.290 --> 02:02.980
قائمة المشروع.

02:02.980 --> 02:05.230
لنبدأ الآن بعنصر المشروع.

02:05.230 --> 02:09.030
لاستيراد شيء ما من الوحدة النمطية ES بحيث باستخدام

02:09.030 --> 02:11.450
صيغة الوحدة النمطية ES ، يمكنك تحديد

02:11.450 --> 02:14.440
الاستيراد في أعلى الملف أو بالقرب من أعلى

02:14.440 --> 02:16.110
الملف قبل البدء في كتابة

02:16.110 --> 02:18.970
أي تعليمات برمجية فعلية.

02:18.970 --> 02:23.240
قم بالاستيراد منه ثم أشر إليه بمسار نسبي

02:23.240 --> 02:26.220
من الملف الذي تقوم بالاستيراد

02:26.220 --> 02:27.320
فيه.

02:27.320 --> 02:29.340
لذا في هذه الحالة ، نحتاج إلى رفع المستوى

02:29.340 --> 02:31.030
الأول بنقطتين وشرطة مائلة.

02:31.030 --> 02:32.509
حتى نكون في المجلد المصدر

02:32.509 --> 02:35.550
، ثم نحتاج إلى الانتقال إلى مجلد الوحدات النمطية

02:35.550 --> 02:37.450
واستيراد السحب والإفلات.

02:37.450 --> 02:40.480
الآن مهم ، أضف dot JS هنا ، لأنك تحتاج

02:40.480 --> 02:43.480
إلى الاستيراد كما لو كان قد تم تجميعه

02:43.480 --> 02:46.470
بالفعل ، لأنه سيتم نقله إلى نصوص Java

02:46.470 --> 02:49.130
Java ثم بعد ذلك يجب أن يبحث عن Java

02:49.130 --> 02:50.860
script هناك لملفات Java

02:50.860 --> 02:55.010
script لذلك يجب أن تكون dot JS مضاف.

02:55.010 --> 02:57.560
الآن تقوم باستيراد شيء ما من هناك

02:57.560 --> 02:59.320
ومن أجل إضافة أقواس متعرجة

02:59.320 --> 03:01.500
تحدد بينها ما تريد استيراده

03:01.500 --> 03:03.150
من هذا الملف.

03:03.150 --> 03:06.430
هناك ، حصلت بالفعل على الإكمال التلقائي وأريد

03:06.430 --> 03:08.480
استيراد قابل للسحب.

03:08.480 --> 03:10.910
يتوفر الآن قابل للسحب هنا

03:10.910 --> 03:14.430
ويرى الأنواع أنه غير متوفر وسعداء.

03:14.430 --> 03:16.860
نحتاج الآن إلى تحويل كل شيء بحيث يمكن عرضه

03:16.860 --> 03:17.930
في وقت التشغيل.

03:17.930 --> 03:20.370
لذلك دعونا نتخلص من مساحة الاسم هنا أيضًا.

03:20.370 --> 03:22.340
الآن يجب أن تغلق الدعامة المتعرجة أيضًا.

03:22.340 --> 03:24.870
والآن على سبيل المثال هنا الآن نحصل على

03:24.870 --> 03:27.540
ما نريد ، نحصل على أخطاء ، نحصل على خطأ مكون

03:27.540 --> 03:29.650
، مشروع ، كل هذا مفقود.

03:29.650 --> 03:31.890
لذلك دعونا نقوم بتصدير واستيراد كل هذه الأشياء.

03:31.890 --> 03:33.220
على سبيل المثال ، في المكون

03:33.220 --> 03:34.540
الأساسي ، تخلص من مساحة الاسم

03:34.540 --> 03:36.810
، واحتفظ بكلمة مفتاح التصدير كما تعلمت.

03:36.810 --> 03:38.270
تخلص من قوس الإغلاق المتعرج

03:38.270 --> 03:40.810
وأعد تنسيقه واستيراد المشروع.

03:40.810 --> 03:43.380
يمكننا دائمًا التخلص من مساحة الاسم.

03:43.380 --> 03:45.760
وجميع المراجع الموجودة هنا ، يمكنك بالفعل

03:45.760 --> 03:48.803
حذف جميع عمليات استيراد المراجع التي لديك في أي مكان.

03:51.300 --> 03:53.593
تخلص من جميع الأقواس المتعرجة التي تحمل اسم مساحة.

03:55.010 --> 03:56.950
قائمة المشروع ، تخلص من كل مساحة

03:56.950 --> 03:58.466
الاسم والمراجع ، تخلص من

03:58.466 --> 04:00.690
قوس الإغلاق المتعرج هناك.

04:00.690 --> 04:03.320
والمصممين ، تخلصوا من مساحة الاسم ودعامة

04:03.320 --> 04:05.330
الإغلاق المجعد والسحب والإفلات

04:05.330 --> 04:07.940
، لقد تخلصنا منها بالفعل.

04:07.940 --> 04:10.230
مشروع ، تخلص من مساحة الاسم وقوس

04:10.230 --> 04:11.920
الإغلاق المجعد.

04:11.920 --> 04:14.460
بقي المشروع مما لا يثير الدهشة التخلص

04:14.460 --> 04:16.223
من مساحة الاسم والإغلاق.

04:18.390 --> 04:22.620
دعامة مجعد هنا كنا في الواقع نعتمد على مشروع يتم استيراده

04:22.620 --> 04:24.740
بواسطة ملف آخر ، لم يكن لدي

04:24.740 --> 04:26.620
مراجع إليه هنا.

04:26.620 --> 04:28.770
لذلك كان هذا هو السلوك الخطير الذي

04:28.770 --> 04:29.880
كنت أتحدث عنه.

04:29.880 --> 04:31.871
كان من الممكن أن يفشل هذا إذا لم

04:31.871 --> 04:35.120
نستورده أو إذا لم نقم بالإشارة إلى جزء مشروعنا في

04:35.120 --> 04:36.710
مساحة الاسم في ملف آخر.

04:36.710 --> 04:39.090
لذلك لم يكن ذلك مثاليًا بشكل قاطع.

04:39.090 --> 04:41.560
ولكن مع ذلك دعونا نواصل إعادة بناء ديوننا.

04:41.560 --> 04:44.430
في التحقق من الصحة هنا ، تخلص من مساحة الاسم

04:44.430 --> 04:46.050
هنا وكل قوس الإغلاق المتعرج

04:46.050 --> 04:47.550
هنا في الأسفل.

04:47.550 --> 04:49.150
وأخيرًا وليس آخرًا تطبيق TS

04:49.150 --> 04:51.503
، تخلص من هذه الواردات ومن مساحة الاسم.

04:52.700 --> 04:55.350
والآن لدينا أخطاء في كل مكان ولكن الآن

04:55.350 --> 04:56.988
يمكننا البدء من جديد.

04:56.988 --> 04:59.560
لنبدأ الآن من جديد في المكون الأساسي.

04:59.560 --> 05:01.610
هذا يبدو جيدًا ، لا يبدو أنه

05:01.610 --> 05:03.700
يشكو لديه كل ما يريد.

05:03.700 --> 05:06.250
استيراد المشروع ، حسنا ، هو يشتكي.

05:06.250 --> 05:08.450
على سبيل المثال هناك نحن بحاجة إلى المكون.

05:08.450 --> 05:12.070
لذلك دعونا نضيف استيرادًا في الأعلى ونسمح

05:12.070 --> 05:15.830
باستيراد مكون من مكون أساسي بشرطة نقطية.

05:15.830 --> 05:18.410
هذه هي طريقة الاستيراد نسبيًا إذا كان هناك

05:18.410 --> 05:19.990
شيء ما في نفس المجلد.

05:19.990 --> 05:22.370
نقطة مائلة في البداية ، ثم اسم

05:22.370 --> 05:24.490
الملف ثم كل شيء مهم dot JS.

05:24.490 --> 05:26.753
لا تنس النقطة JS في النهاية.

05:28.100 --> 05:30.250
الآن نحتاج أيضًا إلى الطور البيني

05:31.170 --> 05:34.650
القابل للتصديق هنا وطريقة التحقق من الصحة والعقل

05:34.650 --> 05:36.810
التلقائي وحالة المشروع.

05:36.810 --> 05:39.140
لذلك دعونا نستورد كل هذه الأشياء

05:39.140 --> 05:44.080
، فلنستورد من نقطة مائلة ، أو لا نرتفع مستوى واحدًا ثم نستخدم

05:44.080 --> 05:46.149
التحقق من صحة النقطة JS ،

05:46.149 --> 05:49.460
فلنستورد من هذا الملف ، ويمكن التحقق من

05:49.460 --> 05:52.100
صحته ووظيفة التحقق من الصحة واستيراد

05:53.010 --> 05:56.250
الربط التلقائي من ، صعودًا من مستوى واحد

05:56.250 --> 06:00.350
للديكور تلقائيًا JS.

06:00.350 --> 06:02.600
وأخيرًا وليس آخرًا ، دعونا

06:02.600 --> 06:05.220
نستورد من حالة المشروع ذات

06:05.220 --> 06:07.580
المستوى الواحد JS.

06:07.580 --> 06:11.000
من هناك يمكننا استيراد حالة المشروع الثابتة

06:11.000 --> 06:13.250
التي نصدرها هناك.

06:13.250 --> 06:15.390
الآن هذه هي جميع الواردات التي نحتاجها

06:15.390 --> 06:16.773
هنا لجعل هذا الملف يعمل.

06:18.190 --> 06:20.480
لذلك دعنا ننتقل إلى عنصر المشروع الآن.

06:20.480 --> 06:23.270
هناك نحتاج إلى ربط تلقائي نحتاج إلى مكون نحتاج

06:23.270 --> 06:24.853
إلى نموذج المشروع.

06:24.853 --> 06:26.700
لذلك دعونا نضيف كل هذه الأشياء.

06:26.700 --> 06:30.520
لنستورد على سبيل المثال نموذج المشروع من

06:30.520 --> 06:34.523
مشروع نماذج النقاط المائلة للنقطة JS.

06:35.580 --> 06:38.080
دعنا أيضًا نضيف مكونًا موجودًا

06:39.340 --> 06:41.110
في نفس المجلد.

06:41.110 --> 06:45.530
لذا قم باستيراد المكون الأساسي للقطعة النقطية

06:45.530 --> 06:49.020
JS والربط التلقائي ، فلنستورد الربط التلقائي

06:50.790 --> 06:55.790
من dot dot slash decorators auto bind JS.

06:56.020 --> 06:59.383
والآن يحتوي هذا الملف هنا أيضًا على كل ما يحتاجه.

07:01.260 --> 07:03.410
الآن دعنا ننتقل إلى قائمة المشروع.

07:03.410 --> 07:06.610
هنا في قائمة المشروع ، نحتاج أيضًا إلى المكون

07:06.610 --> 07:10.250
كما هو الحال ، لذلك سنقوم بالفعل بنسخ ذلك هنا من عنصر

07:10.250 --> 07:14.260
المشروع وإضافته إلى قائمة المشروع TS ، لكننا لسنا بحاجة

07:14.260 --> 07:16.120
إلى السحب هنا ولكننا نسحب

07:16.120 --> 07:19.420
الهدف بدلاً من ذلك ، لذا دعنا نستورد ذلك .

07:19.420 --> 07:22.307
وبالإضافة إلى ذلك ، نحتاج إلى تحديد

07:22.307 --> 07:24.550
حالة المشروع للمشروع.

07:24.550 --> 07:26.540
نعم ، هذه هي الأشياء التي نحتاجها.

07:26.540 --> 07:28.780
وكذلك فئة بند المشروع.

07:28.780 --> 07:31.030
لذلك من ملف نموذج المشروع يمكننا أيضًا

07:31.030 --> 07:32.720
استيراد حالة المشروع.

07:32.720 --> 07:35.340
يمكنك استيراد عدة أشياء مُصدَّرة من أحد

07:35.340 --> 07:36.840
الملفات نفسها ببساطة

07:36.840 --> 07:38.730
عن طريق فصلها بفاصلة بين هذه

07:38.730 --> 07:41.740
الأقواس المتعرجة تمامًا كما تراها هنا.

07:41.740 --> 07:45.910
نقوم أيضًا باستيراد ثابت حالة المشروع من مجلد

07:46.790 --> 07:48.790
الحالة ، وحالة المشروع

07:48.790 --> 07:52.470
JS وأيضًا الاستيراد أخيرًا وليس آخرًا ، وهنا

07:52.470 --> 07:54.790
في الجزء السفلي نحتاج إليه

07:54.790 --> 07:57.130
، فئة عنصر المشروع.

07:57.130 --> 08:01.770
لذا ، قم باستيراد عنصر المشروع من عنصر مشروع نقطة مائلة

08:01.770 --> 08:03.623
نقطة نقطة JS.

08:06.810 --> 08:08.280
لذلك دعنا ننتقل.

08:08.280 --> 08:11.280
Autobind جيد ، حالة المشروع تشكو هناك

08:11.280 --> 08:13.600
نحتاج إلى نموذج المشروع.

08:13.600 --> 08:15.740
لذلك في الجزء العلوي ، دعونا

08:16.820 --> 08:20.300
نستورد المشروع من الصعود إلى مشروع نماذج

08:20.300 --> 08:22.823
مستوى واحد أعلى نقطة JS.

08:24.450 --> 08:27.630
نحن أيضًا نستخدم حالة المشروع هنا ، لذا دعنا

08:27.630 --> 08:29.573
نستورد ذلك من نفس الملف 'ومع

08:32.320 --> 08:33.960
ذلك ، أخيرًا وليس آخرًا

08:33.960 --> 08:35.660
، نحصل على ملف TS للتطبيق

08:35.660 --> 08:38.810
الذي نحتاجه لاستيراد مدخلات المشروع.

08:38.810 --> 08:43.610
من مدخلات المشروع المكونة من نقطة مائلة.

08:43.610 --> 08:48.030
JS وقائمة المشروع من قائمة المشاريع JS 'إذا

08:49.290 --> 08:52.280
قمنا الآن بحفظ هذا ، فيجب تجميعه

08:52.280 --> 08:54.330
بدون أخطاء ، ونحن الآن

08:54.330 --> 08:58.500
نستخدم وحدات ES6 لتنظيم عمليات الاستيراد

08:58.500 --> 09:00.823
والتصدير.

09:02.640 --> 09:05.460
إذا ألقينا نظرة على المتصفح على الرغم

09:05.460 --> 09:07.040
من وجود خطأ لدينا.

09:07.040 --> 09:09.390
الآن السبب في ذلك هو أنه إذا تحققنا من مجلد dist

09:09.390 --> 09:12.013
، فقد حصلنا على ملف JS الخاص بالحزمة بشكل صحيح.

09:13.040 --> 09:15.900
الآن نحن بحاجة إلى تبديل تهيئة TS مرة أخرى.

09:15.900 --> 09:19.070
لواحد هنا ، لا ينبغي لنا استخدام AMD الآن

09:19.070 --> 09:22.420
ولكن بدلاً من ذلك ES عشرون خمسة عشر.

09:22.420 --> 09:25.710
Than هي في الأساس كلمة الشفرة لـ ES6 والتي كانت

09:25.710 --> 09:27.240
إصدار البرنامج النصي

09:27.240 --> 09:29.300
agma الذي قدم وحدات ES.

09:29.300 --> 09:31.260
لذلك نحن نقول أساسًا أن الكتابة

09:31.260 --> 09:34.480
النصية لا تحول وارداتنا إلى أي شيء ، واحتفظ

09:34.480 --> 09:36.240
بها كما هي.

09:36.240 --> 09:39.250
المتصفحات الحديثة سوف تفهم ذلك.

09:39.250 --> 09:41.290
لذلك هذا مهم ، تأكد أيضًا من أن

09:41.290 --> 09:43.433
لديك هدف ES6 أو أعلى هنا 'يجب الآن

09:44.950 --> 09:47.530
أيضًا التعليق على الملف الخارج مرة

09:47.530 --> 09:50.670
أخرى ، لأن هذا غير مدعوم مع وحدات ES.

09:50.670 --> 09:53.590
وبهذا فإن ما تحصل عليه في مجلد dist هو في الأساس

09:53.590 --> 09:56.610
نسخة متماثلة من مجلد المصدر الخاص بك ولكن

09:56.610 --> 09:58.690
مع ملفات Java script.

09:58.690 --> 10:00.480
الآن نحتاج أيضًا إلى العودة إلى

10:00.480 --> 10:03.120
ملف الفهرس HDML واستيراد التطبيق JS مرة أخرى

10:03.120 --> 10:04.840
، لأننا حصلنا على ملف JS للتطبيق

10:04.840 --> 10:06.350
في مجلد dist الآن.

10:06.350 --> 10:08.910
ومرة أخرى ، فإن ملف JS الخاص بالتطبيق هذا سيجعلك تقوم

10:08.910 --> 10:11.180
باستيراد البيانات هناك ، لأنه ، كما ذكرت ، يتم

10:11.180 --> 10:13.830
دعم ذلك بواسطة Java script ، ومحركات Java scripting

10:13.830 --> 10:15.900
الحديثة والمتصفحات الحديثة.

10:15.900 --> 10:17.440
وسيقوم المتصفح بحل

10:17.440 --> 10:19.440
هذه الواردات نيابة عنك.

10:19.440 --> 10:22.430
لذلك إذا أعدنا تحميل هذا الآن ، هاه ما

10:22.430 --> 10:24.240
زلنا نحصل على خطأ.

10:24.240 --> 10:27.310
لا يمكن استخدام عبارة الاستيراد خارج الوحدة النمطية.

10:27.310 --> 10:30.630
تدعم المتصفحات الحديثة هذا sintex ولكن عليك

10:30.630 --> 10:33.150
إخبارهم أنك تريد استخدامه.

10:33.150 --> 10:37.470
ويمكنك إخبارهم عن طريق إزالة (الغمغمة) هنا وبدلاً من ذلك على علامة

10:37.470 --> 10:39.670
البرنامج النصي ، حيث تقوم باستيراد

10:39.670 --> 10:42.777
ملف يحتوي على عبارات الاستيراد هذه.

10:42.777 --> 10:46.313
يمكنك استخدام نوع يساوي وحدة.

10:47.300 --> 10:50.450
إذا كنت الآن آمنًا ، فسترى أن هذا يعمل

10:50.450 --> 10:53.440
والآن إذا أضفنا شيئًا ما هنا ، فسنحصل

10:53.440 --> 10:56.120
على تطبيق العمل مرة أخرى.

10:56.120 --> 10:58.910
الآن إذا قمت بفحص علامة تبويب الشبكة بالطريقة

10:58.910 --> 11:01.680
التي سترى أنه إذا قمت بإعادة التحميل ، فهناك

11:01.680 --> 11:05.290
مجموعة من طلبات الشبكة الجارية ، وإذا قمت بالتصغير قليلاً

11:05.290 --> 11:07.410
يمكننا رؤيتها بشكل أفضل.

11:07.410 --> 11:10.340
جميع ملفات جافا سكريبت لدينا مطلوبة هنا.

11:10.340 --> 11:12.810
يطلبها المتصفح تلقائيًا عندما

11:12.810 --> 11:14.780
يواجه استيرادنا.

11:14.780 --> 11:16.967
لذلك يبدأ بتطبيق JS ، ثم يرى الاستيراد

11:16.967 --> 11:19.410
إلى إدخال المشروع JS.

11:19.410 --> 11:21.990
هنا وبالتالي بالطبع يذهب الطلب التالي إلى

11:21.990 --> 11:23.160
مدخلات المشروع.

11:23.160 --> 11:25.410
كما أنه يفعل نفس الشيء لقائمة المشروع.

11:25.410 --> 11:27.360
الآن في مدخلات المشروع على سبيل

11:27.360 --> 11:29.422
المثال ، سترى مدخلات من المكون الأساسي

11:29.422 --> 11:31.450
JS وهذا هو السبب في أنها تستورد أيضًا

11:31.450 --> 11:33.400
المكون الأساسي JS.

11:33.400 --> 11:35.530
يتم ذلك عن طريق المتصفح هنا ، فنحن

11:35.530 --> 11:38.170
نستفيد منه والآن لدينا طريقة أخرى لتقسيم

11:38.170 --> 11:40.850
ملفاتنا ولكن مع الميزة الإضافية التي

11:40.850 --> 11:43.750
نذكرها بوضوح ما نحتاجه من كل ملف ، وإذا حذفنا

11:43.750 --> 11:45.850
استيرادًا ، فإن كتابة البرنامج

11:45.850 --> 11:49.100
النصي يصرخ علينا ، وهو ما لم يفعله مع النهج السابق

11:49.100 --> 11:51.127
، وهو الطريقة التي يعتبر بها

11:51.127 --> 11:53.400
هذا النهج في الواقع توصيتي ولماذا

11:53.400 --> 11:58.870
هو الطريقة المعيارية الفعلية للاستيراد والتصدير.

11:58.870 --> 12:00.710
الآن ، إذا كنت قد عملت مع كتابة البرنامج

12:00.710 --> 12:03.850
النصي من قبل في مشاريع أخرى ، دعنا نقول في مشروع زاوية ، فقد

12:03.850 --> 12:06.380
تكون معتادًا أيضًا على عدم الاضطرار إلى تحديد

12:06.380 --> 12:07.980
امتداد ملف هنا حسنًا ، سنكون قادرين

12:07.980 --> 12:09.270
أيضًا على حذف ذلك بمجرد

12:09.270 --> 12:12.210
أن نضيف حزمة الويب وأداة الفاتورة.

12:12.210 --> 12:14.580
طالما لم يكن لدينا ذلك ونعتمد على المتصفح

12:14.580 --> 12:16.870
لاستيراد ملفاتنا ، فأنت بحاجة إلى إضافة

12:16.870 --> 12:18.833
هذا الامتداد الإضافي.
