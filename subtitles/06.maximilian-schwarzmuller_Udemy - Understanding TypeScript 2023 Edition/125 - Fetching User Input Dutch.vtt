WEBVTT

00:02.150 --> 00:06.180
Instructeur: Dus we zijn in staat om onze titelinvoerwaarde te verzamelen en naar

00:06.180 --> 00:07.420
de console af te drukken, maar

00:07.420 --> 00:10.160
uiteindelijk is dat natuurlijk niet de bedoeling.

00:10.160 --> 00:13.940
In plaats daarvan is het de bedoeling dat we al onze invoerwaarden

00:13.940 --> 00:15.420
verzamelen, ze snel valideren,

00:15.420 --> 00:17.890
en er dan iets mee doen.

00:17.890 --> 00:20.598
Daarvoor voeg ik nog een nieuwe methode toe,

00:20.598 --> 00:21.860
nog een private methode,

00:21.860 --> 00:25.700
omdat ik die alleen ga aanroepen vanuit de klasse, en dat is

00:25.700 --> 00:28.530
de methode gatherUserInput.

00:28.530 --> 00:30.460
De naam is helemaal aan jou.

00:30.460 --> 00:33.240
Mijn idee is dat deze methode hier wordt aangeroepen.

00:33.240 --> 00:35.230
Nadat we de standaard hebben verhinderd,

00:35.230 --> 00:38.980
moet dit in principe al onze ingangen hier bereiken, de gebruikersinvoer

00:38.980 --> 00:40.870
daar verzamelen, valideren en dan

00:40.870 --> 00:43.060
terugsturen.

00:43.060 --> 00:45.950
Zodat ik hier mijn userInput heb, die

00:45.950 --> 00:50.090
een tupel kan zijn met de titel, de beschrijving en

00:50.090 --> 00:53.810
de mensen, als de vrije tupelwaarden.

00:53.810 --> 00:55.510
Eigenlijk vind ik dat een goed idee.

00:55.510 --> 00:57.800
Dus laten we hier alvast een terugkeertype definiëren.

00:57.800 --> 00:59.880
Het terugkeertype is een tupel.

00:59.880 --> 01:02.620
Weet je nog hoe een tupel wordt gedefinieerd?

01:02.620 --> 01:05.630
Hoe wordt het type van een tupel gedefinieerd?

01:05.630 --> 01:08.620
Het is geen string, vierkante haakjes.

01:08.620 --> 01:12.260
Dat betekent dat je een array van strings teruggeeft.

01:12.260 --> 01:14.550
In plaats daarvan wil ik zeggen

01:14.550 --> 01:18.160
dat ik een array teruggeef van precies X elementen

01:18.160 --> 01:21.510
van precies deze drie types.

01:21.510 --> 01:23.650
En daarvoor stelt u hier het terugkeertype

01:23.650 --> 01:27.160
in, twee vierkante haakjes, en dan voegt u binnen de vierkante haakjes

01:27.160 --> 01:30.240
de verschillende elementen en elementtypen toe.

01:30.240 --> 01:32.900
Bijvoorbeeld string, string en number.

01:32.900 --> 01:37.130
Daarmee zeg je dat deze methode hier een tupel teruggeeft, met drie elementen,

01:37.130 --> 01:38.510
waarbij het eerste element

01:38.510 --> 01:40.300
een string is, het tweede element

01:40.300 --> 01:41.820
een string, en het derde element

01:41.820 --> 01:44.080
eigenlijk een getal.

01:44.080 --> 01:46.360
En nu kunnen we wat logica aan deze methode

01:46.360 --> 01:48.540
toevoegen om dat waar te maken.

01:48.540 --> 01:52.670
Dus laten we daarvoor eerst de ingevoerde titel uit dit

01:52.670 --> 01:57.210
titleInputElement halen. waarde.

01:57.210 --> 01:58.340
En dat kunnen we herhalen.

01:58.340 --> 02:05.100
Wij willen ook de ingevoerde cursusbeschrijving van dit descriptionInputElement.

02:05.100 --> 02:05.100
waarde,

02:05.100 --> 02:09.510
en het aantal enteredPeople, of alleen enteredPeople van

02:09.510 --> 02:12.440
dit peopleInputElement.

02:12.440 --> 02:13.870
Nu heb ik dit opgeslagen in constanten

02:13.870 --> 02:15.490
zodat ik deze langere uitdrukkingen

02:15.490 --> 02:17.640
niet steeds hoef te herhalen.

02:17.640 --> 02:19.370
Nu kunnen we dit valideren.

02:19.370 --> 02:21.500
Een triviale validatie zou zijn om te controleren

02:21.500 --> 02:24.850
of enteredTitle. trimmen, Dus het verwijderen

02:24.850 --> 02:27.610
van X's brede ruimte aan het begin en einde.

02:27.610 --> 02:30.560
Lengte gelijk is aan nul, of als

02:30.560 --> 02:35.350
enteredDescription. trimlengte gelijk is aan

02:35.350 --> 02:41.520
nul, of als enteredPeople.

02:41.520 --> 02:41.520
trimlengte

02:41.520 --> 02:44.380
gelijk is aan nul.

02:44.380 --> 02:48.410
Dat zou controleren of geen enkele ingang leeg is.

02:48.410 --> 02:50.330
Het controleert echter niet alles

02:50.330 --> 02:51.860
wat we willen controleren.

02:51.860 --> 02:54.770
We controleren niet of de ingevoerde personen, laten

02:54.770 --> 02:57.160
we zeggen, een positief getal is.

02:57.160 --> 03:00.170
We kunnen geen minimumlengte vaststellen.

03:00.170 --> 03:02.190
We zouden hier steeds meer voorwaarden moeten

03:02.190 --> 03:04.050
toevoegen, en hoewel we dit kunnen doen,

03:04.050 --> 03:06.820
zou dit niet echt een schaalbare oplossing zijn.

03:06.820 --> 03:09.110
Als we onze onderdelen in de applicatie hebben

03:09.110 --> 03:11.550
waar we ook gebruikersinvoer willen valideren,

03:11.550 --> 03:14.440
moeten we altijd lange if statements herhalen.

03:14.440 --> 03:18.390
Dus ik kom binnenkort met een slimmere validatie oplossing

03:18.390 --> 03:21.960
of een meer schaalbare validatie oplossing.

03:21.960 --> 03:23.780
Voorlopig kunnen we het zo laten.

03:23.780 --> 03:26.190
U kunt hier echter al over nadenken, en

03:26.190 --> 03:28.520
natuurlijk na deze lezing hier even

03:28.520 --> 03:32.220
stilstaan bij hoe u dit zou kunnen uitbesteden in een aparte

03:32.220 --> 03:34.670
validatiefunctie die configureerbaar

03:34.670 --> 03:38.350
is, en hoe types u daarbij zouden kunnen helpen.

03:38.350 --> 03:41.370
Er zijn zeker veel mogelijke benaderingen, en ik zal

03:41.370 --> 03:44.040
de mijne met u delen in de volgende lezing.

03:44.040 --> 03:45.620
Maar voordat we het zover laten

03:45.620 --> 03:48.350
komen, laten we deze triviale aanpak hier gebruiken

03:48.350 --> 03:52.130
en iets doen als aan al deze voorwaarden is voldaan.

03:52.130 --> 03:53.620
Als we het nu in dit if-blok maken,

03:53.620 --> 03:56.000
weten we dat minstens één validatie mislukt is,

03:56.000 --> 03:57.350
en dan kunnen we er een waarschuwing

03:57.350 --> 04:01.833
doorheen sturen, waarin we zeggen: ongeldige invoer, probeer het opnieuw.

04:03.450 --> 04:04.910
Anders, als we er niet

04:04.910 --> 04:06.200
in komen, weten we dat

04:06.200 --> 04:08.600
we een geldige invoer hebben, anders

04:08.600 --> 04:11.310
wil ik mijn tupel teruggeven.

04:11.310 --> 04:14.170
Dus hier wil ik de ingevoerde titel, de

04:14.170 --> 04:17.090
ingevoerde beschrijving en ook de ingevoerde

04:17.090 --> 04:19.660
personen teruggeven.

04:19.660 --> 04:20.630
Maar zoals u kunt zien,

04:20.630 --> 04:21.850
is deze groep niet blij,

04:21.850 --> 04:24.210
want mensen invoeren moet een nummer zijn,

04:24.210 --> 04:25.370
geen tekst.

04:25.370 --> 04:27.410
En eigenlijk is alles wat u uit

04:27.410 --> 04:28.720
de waarde-eigenschap

04:28.720 --> 04:32.350
van een invoerelement haalt standaard tekst.

04:32.350 --> 04:34.520
Dus om dit in een getal te veranderen,

04:34.520 --> 04:38.060
kunnen we bijvoorbeeld parseFloat aanroepen, of er

04:38.060 --> 04:40.610
gewoon een plus voor zetten, en dit zal

04:40.610 --> 04:42.850
het omzetten in een getal, en nog steeds

04:42.850 --> 04:45.430
is typgroep niet gelukkig omdat, wel,

04:45.430 --> 04:48.910
we niet altijd een tupel teruggeven.

04:48.910 --> 04:50.830
Hoe zit het met dit deel hier?

04:50.830 --> 04:52.310
Als we in het if-blok komen,

04:52.310 --> 04:53.510
tonen we een waarschuwing,

04:53.510 --> 04:55.820
maar we sturen geen tupel terug.

04:55.820 --> 04:59.810
Nou, er zijn verschillende dingen die we in plaats daarvan kunnen doen.

04:59.810 --> 05:03.460
We kunnen gewoon niets teruggeven, zoals dit.

05:03.460 --> 05:06.320
Als alternatief kunnen we een foutmelding geven.

05:06.320 --> 05:08.360
Dan zouden we eigenlijk niets teruggeven,

05:08.360 --> 05:11.100
maar dan gooien we een foutmelding.

05:11.100 --> 05:12.820
Nu wil ik hier geen fout gooien, omdat

05:12.820 --> 05:15.570
ik niet echt een foutafhandeling wil implementeren,

05:15.570 --> 05:18.090
dus wat ik doe is een return statement toevoegen,

05:18.090 --> 05:20.100
maar dit is natuurlijk geen tupel.

05:20.100 --> 05:23.110
Dus eigenlijk is het terugkeertype hier een tupel,

05:23.110 --> 05:25.923
of het is eigenlijk ongedefinieerd.

05:27.320 --> 05:29.040
Nu echter, zoals je geleerd hebt,

05:29.040 --> 05:30.750
moet je hier niet undefined gebruiken

05:30.750 --> 05:32.550
als return type op functies.

05:32.550 --> 05:34.040
Gebruik in plaats daarvan void.

05:34.040 --> 05:35.410
Het is bijna hetzelfde,

05:35.410 --> 05:37.040
maar dan exclusief voor functies,

05:37.040 --> 05:39.350
en dit vertelt TypeScript dat dit een

05:39.350 --> 05:44.350
functie is die minstens een vertakking heeft die geen waarde teruggeeft zoals

05:45.230 --> 05:46.930
deze.

05:46.930 --> 05:49.160
Ook hier gebruiken we natuurlijk een union type

05:49.160 --> 05:51.240
omdat we beide mogelijkheden hebben.

05:51.240 --> 05:53.170
We kunnen niets teruggeven,

05:53.170 --> 05:55.660
of we geven een tupel terug.

05:55.660 --> 05:57.510
Dus nu hebben we gatherUserInput

05:57.510 --> 05:59.370
en userInput er voor alles

05:59.370 --> 06:01.670
is ofwel ongedefinieerd op het einde

06:01.670 --> 06:04.130
of het is die tuple.

06:04.130 --> 06:07.640
Dus nu, voordat we verder gaan en de validatie verbeteren, laten

06:07.640 --> 06:09.620
we voortbouwen op die userInput.

06:09.620 --> 06:12.480
Als we de userInput daar beneden verzamelen, hebben

06:12.480 --> 06:14.820
we nu dat userInput ding, en nu kunnen we

06:14.820 --> 06:17.050
controleren of het een tupel is.

06:17.050 --> 06:19.820
Nu is het probleem dat we bij runtime niet

06:19.820 --> 06:22.620
kunnen controleren of het een tupel is.

06:22.620 --> 06:25.200
Er is geen instanceof die we kunnen gebruiken.

06:25.200 --> 06:28.560
Er is geen Tuple type dat we kunnen controleren.

06:28.560 --> 06:31.020
We kunnen ook niet controleren of typof

06:33.803 --> 06:36.053
userInput gelijk is aan tuple, want

06:37.130 --> 06:40.050
dat bestaat niet in Vanilla JavaScript.

06:40.050 --> 06:41.850
String bestaat bijvoorbeeld

06:41.850 --> 06:44.950
wel, maar tuple is geen JavaScript-type.

06:44.950 --> 06:47.020
Dus om te controleren of het een tupel

06:47.020 --> 06:48.900
is, moeten we bedenken dat tupels uiteindelijk

06:48.900 --> 06:50.990
gewoon gewist worden.

06:50.990 --> 06:52.750
Ze zijn speciaal in TypeScript,

06:52.750 --> 06:54.860
maar eenmaal in JavaScript-land worden

06:54.860 --> 06:55.940
ze gewoon uitgewist,

06:55.940 --> 06:58.320
omdat het idee van een tupel waarbij het aantal

06:58.320 --> 06:59.950
elementen en de types van elementen

06:59.950 --> 07:02.000
vastliggen eigenlijk alleen in TypeScript

07:02.000 --> 07:04.470
bestaat.

07:04.470 --> 07:05.930
Dus, tijdens runtime hoeven

07:05.930 --> 07:09.370
we hier alleen maar te controleren of het een array is, en daarvoor

07:09.370 --> 07:12.950
kunnen we het array-object in JavaScript gebruiken, en daar

07:12.950 --> 07:15.180
de methode isArray.

07:15.180 --> 07:17.500
Dat is een methode ingebouwd in Vanilla JavaScript

07:17.500 --> 07:20.290
waarmee we kunnen controleren of dit hier een array is.

07:20.290 --> 07:23.200
We weten dat het of ongedefinieerd is of een tupel.

07:23.200 --> 07:24.630
Een tupel is een array,

07:24.630 --> 07:26.000
dus als dit waar is, hebben

07:26.000 --> 07:27.400
we de tupel.

07:27.400 --> 07:31.010
En dan kunnen we hier de structurering gebruiken om bijvoorbeeld

07:31.010 --> 07:34.070
de titel, de beschrijving, en de mensen uit de gebruikersinput

07:34.070 --> 07:35.560
te halen, en dan iets doen

07:35.560 --> 07:37.720
met die input.

07:37.720 --> 07:39.230
Bijvoorbeeld voor

07:39.230 --> 07:42.623
nu, console. log titel, beschrijving en mensen.

07:43.980 --> 07:46.060
Als we dat allemaal doen en opslaan,

07:46.060 --> 07:47.950
compileert het zonder fouten,

07:47.950 --> 07:49.870
en als we hier teruggaan, en ik klik

07:49.870 --> 07:51.310
zo op project, krijg ik ongeldige

07:51.310 --> 07:53.050
invoer.

07:53.050 --> 07:54.580
Als ik Hello invoer, krijg ik het

07:54.580 --> 07:56.950
nog steeds omdat we geen beschrijving hebben.

07:56.950 --> 07:58.890
Dit is een beschrijving.

07:58.890 --> 08:00.180
We krijgen het natuurlijk

08:00.180 --> 08:02.940
nog steeds, maar als ik nu ook iets bij mensen invoer,

08:02.940 --> 08:05.220
werkt dit en drukken we dit hier af.

08:05.220 --> 08:09.330
Dat is natuurlijk een mooie stap in de goede richting.

08:09.330 --> 08:10.990
We zijn er nog niet helemaal.

08:10.990 --> 08:13.330
Zoals ik al zei, we kunnen de validatie verbeteren.

08:13.330 --> 08:16.230
Eén ding wil ik meteen doen voordat we dat doen, ik wil

08:16.230 --> 08:20.070
alle invoer wissen nadat we op PROJECT TOEVOEGEN hebben geklikt.

08:20.070 --> 08:22.440
Dus ik wil alle ingangen weer leegmaken.

08:22.440 --> 08:25.290
Daarvoor kunnen we een nieuwe private methode toevoegen,

08:25.290 --> 08:27.043
clearInput of clearInputs, en daar

08:28.210 --> 08:32.740
kunnen we dit titleInputElement instellen. waarde gelijk aan een lege tekenreeks

08:32.740 --> 08:34.130
en herhaal dat ook

08:36.200 --> 08:38.980
voor de andere ingangen.

08:38.980 --> 08:41.960
Dus hier hebben we het descriptionInputElement,

08:41.960 --> 08:44.250
en hier hebben we het peopleInputElement,

08:44.250 --> 08:48.190
en nu, als we dit aanroepen. clearInputs hier, moeten we ervoor

08:48.190 --> 08:50.200
zorgen dat het formulier wordt gewist

08:50.200 --> 08:51.730
zodra het is verzonden.

08:51.730 --> 08:52.870
Dus als we dit opnieuw proberen,

08:52.870 --> 08:54.380
hier iets invoeren, zie je dat het

08:54.380 --> 08:56.230
hier wordt afgedrukt, en het formulier

08:56.230 --> 08:57.740
wordt gewist.

08:57.740 --> 09:00.720
Daarmee ben ik over het algemeen tevreden over hoe we dit hebben

09:00.720 --> 09:03.300
aangepakt, maar nu wil ik de validatie verbeteren

09:03.300 --> 09:06.970
en dit op een meer herbruikbare, schaalbare manier schrijven.

09:06.970 --> 09:07.840
Zoals ik al zei,

09:07.840 --> 09:10.320
voel je vrij om dit eerst zelf te doen.

09:10.320 --> 09:11.530
In de volgende lezing

09:11.530 --> 09:12.580
doen we het samen.
