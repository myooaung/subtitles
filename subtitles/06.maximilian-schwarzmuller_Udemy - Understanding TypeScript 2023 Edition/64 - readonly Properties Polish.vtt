WEBVTT

00:02.280 --> 00:04.510
Instruktor: Kind of related to what you just learned about

00:04.510 --> 00:06.483
access modifiers, is another modifier.

00:07.572 --> 00:09.590
I to jest właśnie modyfikator readonly.

00:09.590 --> 00:11.310
Powiedzmy, że mamy pewne pola,

00:11.310 --> 00:14.220
które nie tylko powinny być prywatne lub publiczne,

00:14.220 --> 00:18.130
ale także nie powinny się zmieniać po ich inicjalizacji.

00:18.130 --> 00:21.410
Na przykład id nie powinno się później zmieniać.

00:21.410 --> 00:23.520
Aby wyjaśnić, że nie powinien się zmieniać,

00:23.520 --> 00:25.670
możesz dodać readonly również tutaj.

00:25.670 --> 00:27.890
I to też można było tutaj dodać.

00:27.890 --> 00:30.920
Czyli tutaj też byś napisał private readonly.

00:30.920 --> 00:33.990
Teraz słowo kluczowe readonly, podobnie jak private i public,

00:33.990 --> 00:35.710
jest wprowadzone przez TypeScript,

00:35.710 --> 00:37.920
nie istnieje w JavaScript.

00:37.920 --> 00:39.910
Upewnia się, że jeśli spróbujesz

00:39.910 --> 00:43.180
napisać do jego właściwości później, nie uda ci się.

00:43.180 --> 00:45.690
Więc możesz użyć go tylko raz podczas inicjalizacji,

00:45.690 --> 00:48.620
ale później, powiedzmy, że dla addEmployee, z jakiegokolwiek

00:48.620 --> 00:54.200
powodu, próbuję zmienić id na d2, widzisz, dostajemy błąd tutaj, że nie mogę przypisać do id,

00:54.200 --> 00:57.790
ponieważ jest to readonly.

00:57.790 --> 01:00.800
Tak więc dodaje to pewne dodatkowe bezpieczeństwo, aby było

01:00.800 --> 01:04.160
naprawdę jasne, że pewna właściwość powinna być zainicjowana tylko

01:04.160 --> 01:05.920
raz i nie powinna się później zmienić,

01:05.920 --> 01:08.860
wymóg, który masz dość często dla niektórych właściwości

01:08.860 --> 01:10.240
w swoich obiektach.

01:10.240 --> 01:12.630
Więc to może dodać dodatkowe bezpieczeństwo typu ponownie,

01:12.630 --> 01:14.910
i zrobić twoje intencje bardzo jasne.

01:14.910 --> 01:16.320
Oczywiście zawsze możesz

01:16.320 --> 01:18.350
powiedzieć: No cóż, to ja piszę kod,

01:18.350 --> 01:20.470
nie zrobię czegoś, czego nie chcę.

01:20.470 --> 01:23.060
Cóż, nadal dobrze jest być bardzo jasnym, gdy

01:23.060 --> 01:24.630
definiujesz swój kod.

01:24.630 --> 01:28.320
Ponieważ a, możesz zapomnieć, co chciałeś zrobić, jeśli wstrzymasz

01:28.320 --> 01:31.280
pracę nad swoim kodem przez kilka tygodni, lub cokolwiek

01:31.280 --> 01:32.270
to jest, i b, możesz

01:32.270 --> 01:34.340
pracować w zespole lub dzielić swój

01:34.340 --> 01:36.550
kod z innymi ludźmi.

01:36.550 --> 01:39.390
I ogólnie dobrym pomysłem jest napisanie jasnego i wyraźnego

01:39.390 --> 01:42.460
kodu, który sprawia, że twoja intencja jest bardzo jasna.

01:42.460 --> 01:44.280
I readonly może ci tam pomóc, ponieważ

01:44.280 --> 01:47.230
sprawia, że bardzo wyraźnie widać, jaki jest twój cel.

01:47.230 --> 01:49.570
Jeśli zajrzymy do aplikacji. js, jak wspomniałem,

01:49.570 --> 01:53.050
nie widzimy ani private, ani public, ani read only, bo

01:53.050 --> 01:55.780
to wszystko istnieje tylko w TypeScript,

01:55.780 --> 01:57.610
a nie w JavaScript.

01:57.610 --> 02:01.420
Widzimy też coś innego co również jest ciekawe,

02:01.420 --> 02:04.580
metody są dodawane do prototypu naszej funkcji

02:04.580 --> 02:06.490
konstruktora.

02:06.490 --> 02:08.830
Teraz do tego trzeba wiedzieć, co to są prototypy,

02:08.830 --> 02:10.730
a wprowadzenie tych w tym kursie byłoby

02:10.730 --> 02:12.520
trochę za dużo.

02:12.520 --> 02:14.140
W załączeniu znajdziecie kilka zasobów,

02:14.140 --> 02:16.070
w których możecie zanurzyć się w prototypy.

02:16.070 --> 02:18.490
To ważna część JavaScriptu, zwłaszcza

02:18.490 --> 02:22.210
JavaScriptu, zanim mieliśmy klasy, i nie zaszkodzi zrozumieć

02:22.210 --> 02:24.670
prototypów, jeśli jesteś programistą

02:24.670 --> 02:26.490
JavaScript.

02:26.490 --> 02:29.030
Nadal tutaj, nie będę nurkował głębiej w nich, ponieważ

02:29.030 --> 02:31.160
jest to czysty temat JavaScript, nie specyficzny

02:31.160 --> 02:33.020
dla TypeScript.

02:33.020 --> 02:34.150
Rzeczywiście w TypeScript,

02:34.150 --> 02:36.510
zwykle pracujemy mniej z prototypami, ponieważ

02:36.510 --> 02:38.780
możemy zrobić więcej z klasami.

02:38.780 --> 02:43.503
I związane z tym, mamy kolejną ważną koncepcję klasy, Inheritance.
