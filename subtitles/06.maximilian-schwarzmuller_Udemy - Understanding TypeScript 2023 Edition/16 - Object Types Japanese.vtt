WEBVTT

00:02.280 --> 00:06.450
講師：TypeScriptがサポートするコアな型を深掘りしていきましょう｡

00:06.450 --> 00:09.800
次に気になるのは､ オブジェクト型です｡ 

00:09.800 --> 00:13.100
さて､ JavaScriptのオブジェクトはご存知の通り､ このような形をしています｡ 

00:13.100 --> 00:14.690
中括弧があり､ そこにキーと値のペアがありますが､

00:14.690 --> 00:16.350
このような値もTypeScriptではオブジェクト型として扱われるため､

00:16.350 --> 00:23.620
JavaScriptのオブジェクトはすべてオブジェクト型になるのです｡

00:23.620 --> 00:28.410
とはいえ､ TypeScriptにはより具体的なオブジェクトのバージョンがあり､

00:28.410 --> 00:30.030
これはただのオブジェクトではなく､

00:30.030 --> 00:32.514
このプロパティを持たなければならない､

00:32.514 --> 00:39.490
このコンストラクタ関数に基づいていなければならない､ というようなことができます｡

00:39.490 --> 00:41.322
でも､ 一歩一歩前進していきますよ｡ 

00:41.322 --> 00:49.770
オブジェクトに飛び込むために､ まずappの名前を変更します｡  をここに書いて､ これをbasicsに改名します｡

00:49.770 --> 00:49.770
tsはこちら｡ 

00:49.770 --> 00:52.058
そして､ 新しいアプリを追加する｡  ts ファイルを作成すると､

00:52.058 --> 00:55.400
古いアプリが上書きされます｡ js ファイルをコンパイルすると､

00:55.400 --> 00:58.600
オブジェクトに飛び込むことができるようになります｡

00:58.600 --> 01:01.110
まず､ 基本的なオブジェクトを作成しましょう｡

01:01.110 --> 01:03.902
ここでは､ 中括弧のついた人物とします｡

01:03.902 --> 01:05.870
そして､ これに名前をつけるのです｡ 

01:05.870 --> 01:08.230
ここでは､ 私の名前と30歳という年齢から､

01:08.230 --> 01:10.700
マクシミリアンにします｡

01:10.700 --> 01:14.930
今は､ もちろんコンソールもできます｡  をここに書き込むと､ 当然のことながら､

01:14.930 --> 01:24.536
これをコンパイルすると､ そのオブジェクトがコンソールに表示されるはずです｡

01:24.536 --> 01:27.284
さて､ JavaScriptでできることは､

01:27.284 --> 01:33.970
例えば､ ここに存在しないプロパティであるnicknameにアクセスしようとすることです｡

01:33.970 --> 01:37.320
これですぐに､ TypeScriptがあまり嬉しくないことがわかります｡

01:37.320 --> 01:39.820
それゆえ､ IDEが私に教えてくれます｡

01:39.820 --> 01:44.050
その型にはプロパティ・ニックネームが存在しないことが表示されます｡

01:44.050 --> 01:49.907
これを保存してコンパイルしようとすると､ 確かに同じエラーが発生します｡

01:49.907 --> 01:52.210
TypeScriptコンパイラはこれを好まず､

01:52.210 --> 01:54.401
このオブジェクトにはnicknameプロパティがない､

01:54.401 --> 01:56.430
と言ってきます｡

01:56.430 --> 01:59.813
なぜなら､ 推論されたpersonの上にカーソルを置くと､

01:59.813 --> 02:02.936
personの後にコロンがあるので､ 変数名や定数名の後に､

02:02.936 --> 02:07.970
このニックネーム・プロパティがないことがわかるからです｡

02:07.970 --> 02:12.110
そのため､ このようなデータが格納されていると推察される｡

02:12.110 --> 02:14.181
さて､ それはお分かりのように､ 単なるオブジェクトではありません｡ 

02:14.181 --> 02:16.349
それが具体的なオブジェクトです｡ 

02:16.349 --> 02:21.430
これは名前のキーを持つオブジェクトで､ タイプは順番に文字列でなければなりません｡

02:21.430 --> 02:24.700
そして年齢キーは､ タイプは数字でなければならない｡ 

02:24.700 --> 02:27.116
そして実は､ ここで混乱することがあります｡ 

02:27.116 --> 02:31.100
これは､ ここ､ 明らかにJavaScriptのオブジェクトのように見えます｡ 

02:31.100 --> 02:33.980
中括弧､ キーバリューのペア｡ 

02:33.980 --> 02:38.520
さて､ ここでまず重要なのは､ 各行の後にセミコロンをつけていることです｡

02:38.520 --> 02:40.580
JavaScriptのオブジェクトにはそれがないんです｡ 

02:40.580 --> 02:41.750
ここにコンマがあります｡ 

02:41.750 --> 02:45.940
そして実際､ ここではどこかで作成されたJavaScriptのオブジェクトではありません｡

02:45.940 --> 02:53.914
これはTypeScriptが推論するオブジェクト型で､ オブジェクト型はほとんどオブジェクトのように書かれるが､

02:53.914 --> 02:59.239
もちろんそこにはキーと値のペアはなく､ キー型ペアがある｡

02:59.239 --> 03:06.064
オブジェクトの種類は､ まあ､ どこかで使われているオブジェクトの種類を記述するためにあります｡

03:06.064 --> 03:07.653
もっと一般的になってもいいのでは？

03:07.653 --> 03:13.640
ここで明示的にobjectの定数に型を割り当ててもいいのだが｡

03:13.640 --> 03:17.460
Objectは数値や文字列と同じように組み込み型の一つであり､

03:17.460 --> 03:21.030
この上にカーソルを置くとobject型の人が表示され､

03:21.030 --> 03:26.430
TypeScriptはこれがobject型であるという事実だけを気にする｡

03:26.430 --> 03:28.423
というのも､ TypeScriptはコードを解析して､

03:28.423 --> 03:42.140
そこに存在しないものにアクセスしようとしていると判断するからです｡ しかし､ すべてはこの最も一般的なオブジェクト型から始まることを理解することが重要です｡

03:42.140 --> 03:44.660
しかし､ 多くの場合､ もっと具体的に説明したいものです｡ 

03:44.660 --> 03:47.623
その汎用的なオブジェクト型だけで仕事をしたいわけではないんですね｡ 

03:47.623 --> 03:50.284
本当にフルサポートを受けたいのですね｡ 

03:50.284 --> 03:55.570
例えば､ 今､ ここにドットを追加して､ オートコンプリートを見ると､

03:55.570 --> 03:58.080
IDEは全く助けてくれません｡

03:58.080 --> 04:00.303
その理由は､ IDEに伝えるのは､

04:00.303 --> 04:05.860
「ここにobject型の値がある」ということだけだからです｡

04:05.860 --> 04:08.300
確かに今､ 実際にnameにアクセスしようとすると､

04:08.300 --> 04:10.210
エラーも出ます｡

04:10.210 --> 04:12.270
ここに名前が存在するんですよね？

04:12.270 --> 04:14.120
しかし､ ここでTypeScriptに伝えているのは､

04:14.120 --> 04:18.889
TypeScriptに何も情報を与えないオブジェクトを持っているということだ｡

04:18.889 --> 04:21.739
つまり､ TypeScriptは､ オブジェクトについて何も教えないので､

04:21.739 --> 04:26.210
実はどんな種類のプロパティもサポートしていないのだ｡

04:26.210 --> 04:28.050
だから､ もっと具体的に説明すべきなんです｡ 

04:28.050 --> 04:32.000
そして､ 特定のオブジェクトタイプを設定することで､ より具体的にしています｡ 

04:32.000 --> 04:34.795
TypeScriptも自動で推論していたこと｡ 

04:34.795 --> 04:38.548
そのためには､ コロンの後に中括弧を付けて､

04:38.548 --> 04:43.370
constや変数名の後にします｡

04:43.370 --> 04:46.213
つまり､ ここでは新しいJavaScriptオブジェクトは作成されません｡ 

04:46.213 --> 04:50.310
これは実際には､ コンパイルされたJavaScriptのコードから取り除かれます｡

04:50.310 --> 04:52.643
むしろこれは､ TypeScriptが特殊なオブジェクト型を表記しているに過ぎない､

04:52.643 --> 04:55.855
とも言える｡

04:55.855 --> 05:01.434
そのため､ オブジェクトの構造に関するいくつかの情報を提供するオブジェクトのタイプの｡

05:01.434 --> 05:04.520
さて､ 空の中括弧の組だけを型として代入することで､

05:04.520 --> 05:07.440
本質的にはobjectと同じことができる｡

05:07.440 --> 05:09.765
TypeScriptに「これはあるオブジェクトだ」と伝える｡ 

05:09.765 --> 05:12.740
今はもっと具体的に説明できるようになりましたが｡ 

05:12.740 --> 05:16.550
ここで､ キーバリューの項目を追加することができますが､ キーバリューではなく､

05:16.550 --> 05:19.694
キータイプの項目を追加します｡

05:19.694 --> 05:22.800
つまり､ ここでは､ personに格納されるオブジェクトは､

05:22.800 --> 05:31.140
nameプロパティを持ち､ そのnameプロパティの値はstring型であるべきであると言うことができます｡

05:31.140 --> 05:36.440
そこで､ ここでは最終的にnameに格納される値の種類を記述する｡

05:36.440 --> 05:39.320
さて､ ところで､ ここでエラーが発生しているのがお分かりでしょうか｡ 

05:39.320 --> 05:41.090
なぜなら､ 私が今TypeScriptに伝えているのは､

05:41.090 --> 05:43.489
私の人は､ キーがnameでそのキーの値がstringである､

05:43.489 --> 05:52.730
ちょうど1つのキーバリューペアを持つオブジェクトを持っているはずですが､ 私たちは2つのキーバリューペアを持つオブジェクトを割り当てなかったからです｡

05:52.730 --> 05:55.020
文字列を保持するName､ それはいいとして､

05:55.020 --> 05:58.500
数値を保持するage､ それはダメでしょう｡

05:58.500 --> 06:03.520
そこで､ セミコロンを追加して調整し､ さらに別のキー・バリュー・ペアを追加して､

06:03.520 --> 06:06.300
ageは数値型でなければならないとします｡

06:06.300 --> 06:09.670
この30という数字は､ 実はTypeScriptでサポートされているもので､

06:09.670 --> 06:15.600
特定の数字に限定しているのですが､ それを変更するとすぐに問題が発生します｡

06:15.600 --> 06:19.060
その代わり､ ここでは年齢を何らかの数字にすべきだと言いたいだけです｡ 

06:19.060 --> 06:24.870
そして今は､ 基本的に以前と同じTypeScriptの推論を明示的に代入している｡

06:24.870 --> 06:26.900
学習したように､ それは良い方法ではないのですが､

06:26.900 --> 06:29.940
オブジェクトの型を理解するために､ ここでやってみたかったのです｡

06:29.940 --> 06:32.315
それでもこれは､ あなたにもできることです｡ 

06:32.315 --> 06:37.010
これは以前のようにTypeScriptに推論させる方が良いですね､

06:37.010 --> 06:40.440
こんな感じで｡

06:40.440 --> 06:42.351
さて､ 面白いことに､ この最適でないコードに戻ると､

06:42.351 --> 06:49.920
TypeScriptは明示的に型を割り当てることができるのですが､ このコードをコンパイルすると､

06:49.920 --> 06:54.920
当然ながら動作します｡

06:55.180 --> 06:56.900
nameプロパティにアクセスすることはできますが､

06:56.900 --> 07:01.220
次にapp. jsは､ このタイプアサインがここで削除されていることがわかります｡

07:01.220 --> 07:03.417
そしてそれは､ もちろん想定内のことであるはずです｡ 

07:03.417 --> 07:08.120
先に述べたように､ 型と型付けはJavaScriptの一部ではありません｡

07:08.120 --> 07:09.460
TypeScriptのみだそうです｡ 

07:09.460 --> 07:12.840
この構文がJavaScriptのオブジェクトを生成しているのではないことを明確にするために､

07:12.840 --> 07:16.485
もう一度この構文を示しました｡

07:16.485 --> 07:21.263
これは､ TypeScriptがオブジェクトの型を表現しているだけで､

07:21.263 --> 07:25.900
TypeScriptが扱うオブジェクトを理解するのに役立つ｡

07:25.900 --> 07:29.950
より良い構文は､ もちろん､ あなたが学んだように､ この構文です｡ 
