WEBVTT

00:02.440 --> 00:05.240
Narrador: Hemos visto cómo podemos construir cosas

00:05.240 --> 00:08.120
bastante sorprendentes con decoradores, fábricas de

00:08.120 --> 00:11.740
decoradores y también utilizando los valores de retorno de los decoradores

00:11.740 --> 00:12.790
que en los ejemplos,

00:12.790 --> 00:14.930
el decorador de clase nos permite básicamente

00:14.930 --> 00:18.740
reemplazar la clase a la que añadimos el decorador con una clase que es totalmente

00:18.740 --> 00:21.400
diferente, que se basa en la clase existente, como

00:21.400 --> 00:23.900
en nuestro caso y que por lo tanto podría añadir

00:23.900 --> 00:27.230
algunas funcionalidades.

00:27.230 --> 00:30.490
Ahora también se pueden devolver valores en otros decoradores,

00:30.490 --> 00:32.030
pero no en todos.

00:32.030 --> 00:35.430
O no en todos ellos se respeta el valor de retorno.

00:35.430 --> 00:38.150
Ahora bien, los decoradores en los que se puede devolver

00:38.150 --> 00:41.330
algo son los decoradores que se pueden añadir a los métodos y los decoradores

00:41.330 --> 00:43.540
que se añaden a los accesores.

00:43.540 --> 00:47.400
Así que aquí en el setter log 2 y log 3 en el método estos

00:47.400 --> 00:51.210
dos decoradores, log 2 y log 3 estos también podrían devolver

00:51.210 --> 00:54.080
algo y TypeScript lo usaría.

00:54.080 --> 00:58.040
Los decoradores sobre propiedades y sobre parámetros, por supuesto,

00:58.040 --> 01:00.670
también pueden devolver algo pero TypeScript

01:00.670 --> 01:02.500
lo ignorará.

01:02.500 --> 01:05.030
Por lo tanto, los valores de retorno no se admiten

01:05.030 --> 01:07.700
allí o no se utilizan para ser precisos.

01:07.700 --> 01:09.690
Ahora, ¿qué puede devolver en el tronco 3?

01:09.690 --> 01:12.680
Así que en los decoradores de métodos y en el registro 2, así

01:12.680 --> 01:15.320
que en los decoradores de accesores sin embargo.

01:15.320 --> 01:19.320
Puede devolver un nuevo descriptor de propiedad.

01:19.320 --> 01:22.050
Log 2 y log 3, que son los dos decoradores de los

01:22.050 --> 01:23.110
que hablo, ¿no?

01:23.110 --> 01:28.110
Log 2 y log 3, ambos obtienen el descriptor de la propiedad, del método, se podría

01:28.170 --> 01:30.510
decir, al que están unidos.

01:30.510 --> 01:33.034
Porque un accesorio es como un método,

01:33.034 --> 01:36.220
tienes una función que se ejecuta allí.

01:36.220 --> 01:39.072
Ahora el descriptor de la propiedad es una cosa de

01:39.072 --> 01:41.980
JavaScript, como usted sabe, si echamos un vistazo

01:41.980 --> 01:44.500
a esta página de nuevo y la recargamos vemos

01:44.500 --> 01:47.260
que, por ejemplo para nuestro decorador de accesos,

01:47.260 --> 01:50.497
el descriptor de la propiedad es este objeto aquí que tiene

01:50.497 --> 01:52.470
las propiedades configurables y

01:52.470 --> 01:54.910
enumerables y get y set.

01:54.910 --> 01:57.660
Y para el decorador del método nuestro descriptor es

01:57.660 --> 01:59.330
este objeto aquí que también tiene

01:59.330 --> 02:02.290
configurable, enumerable, valor y escribible.

02:02.290 --> 02:04.410
Y esto es JavaScript de vainilla.

02:04.410 --> 02:07.830
También tienes descriptores de propiedades en el JavaScript de vainilla.

02:07.830 --> 02:11.710
Permiten definir una propiedad con más detalle.

02:11.710 --> 02:14.430
Por supuesto puedes asignar un valor a una propiedad y como

02:14.430 --> 02:15.990
estamos hablando de un método, el

02:15.990 --> 02:17.940
valor es una función en este caso pero también

02:17.940 --> 02:20.010
puedes controlar si es escribible por lo que

02:20.010 --> 02:22.910
si se puede cambiar después de haber sido creado, después de que

02:22.910 --> 02:24.700
el objeto haya sido creado.

02:24.700 --> 02:25.950
Si es configurable, es decir,

02:25.950 --> 02:27.140
si se puede cambiar su configuración

02:27.140 --> 02:29.570
y si se puede eliminar esta propiedad.

02:29.570 --> 02:30.770
Y si es enumerable, lo que

02:30.770 --> 02:33.166
significa que si aparece cuando se hace un bucle

02:33.166 --> 02:35.410
a través de su objeto, por ejemplo.

02:35.410 --> 02:36.810
Y por lo tanto un método por ejemplo

02:36.810 --> 02:38.790
por defecto esto se establece en falso

02:38.790 --> 02:40.930
para que si se utiliza un bucle for in en un objeto

02:40.930 --> 02:44.040
este método no se imprime como una propiedad.

02:44.040 --> 02:45.240
Para un accesorio también

02:45.240 --> 02:47.180
tenemos configurable y enumerable,

02:47.180 --> 02:49.750
pero obtenemos y establecemos y ahí podrías,

02:49.750 --> 02:53.040
por supuesto, también, por ejemplo, devolver un nuevo descriptor

02:53.040 --> 02:56.180
que asigne un nuevo método set o que de repente también añada

02:56.180 --> 02:58.750
una funcionalidad get.

02:58.750 --> 03:01.585
Así que aquí en el registro 2 y en el registro

03:01.585 --> 03:05.190
3 puedes devolver un nuevo objeto descriptor al final y

03:05.190 --> 03:08.020
dejarle claro a TypeScript que lo harás devolviendo

03:08.020 --> 03:10.560
o estableciendo el tipo de retorno a la

03:10.560 --> 03:14.860
propiedad descriptor y ahí también puedes establecer la palabra

03:14.860 --> 03:17.010
clave set, la palabra clave get,

03:17.010 --> 03:22.010
la propiedad configurable o la enumerable y cambiar cómo se configura este

03:22.500 --> 03:24.800
accesorio o método.

03:24.800 --> 03:27.560
Ahora no quiero hacer eso aquí para el accessor, no

03:27.560 --> 03:29.800
hay nada interesante que podría hacer con

03:29.800 --> 03:32.520
él por lo tanto no voy a devolver un descriptor de

03:32.520 --> 03:36.400
la propiedad, pero en realidad voy a mostrar un ejemplo con el método

03:36.400 --> 03:40.080
decorador donde vamos a devolver algo y podemos construir interesante

03:40.080 --> 03:42.533
con la ayuda de decoradores.
