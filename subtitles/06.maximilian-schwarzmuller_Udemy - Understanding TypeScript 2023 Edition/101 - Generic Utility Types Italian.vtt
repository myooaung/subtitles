WEBVTT

00:02.330 --> 00:04.870
Narratore: Parlando di tipi più generici,

00:04.870 --> 00:06.970
come piccolo bonus, si potrebbe

00:06.970 --> 00:11.410
dire: voglio indicarvi un paio di tipi incorporati.

00:11.410 --> 00:15.740
Typescript viene fornito con, che utilizzano tipi generici o che

00:15.740 --> 00:17.240
sono tipi generici, che

00:17.240 --> 00:20.350
ci danno alcune funzionalità di utilità.

00:20.350 --> 00:22.050
Si tratta quindi di un piccolo bonus,

00:22.050 --> 00:22.920
e di tanto in tanto

00:22.920 --> 00:25.550
questi tipi speciali possono tornare utili.

00:25.550 --> 00:26.840
In allegato troverete un

00:26.840 --> 00:30.680
link alla documentazione completa di tutti i tipi di utilità integrati.

00:30.680 --> 00:33.810
Ecco, voglio solo farvi qualche esempio.

00:33.810 --> 00:36.010
Ora, come tutti questi tipi di cose,

00:36.010 --> 00:38.610
questi tipi esistono solo nei tipi del mondo

00:38.610 --> 00:41.300
e quindi solo prima della compilazione.

00:41.300 --> 00:43.460
Ma durante questa fase di compilazione,

00:43.460 --> 00:48.130
possono offrire una maggiore sicurezza di tipo o una maggiore flessibilità.

00:48.130 --> 00:51.670
Ad esempio, c'è il tipo built-in partial.

00:51.670 --> 00:55.580
Supponiamo di avere un nuovo tipo, e l'interfaccia che troveremo

00:55.580 --> 00:59.493
o un tipo personalizzato non ha importanza, CourseGoal.

01:00.660 --> 01:03.780
Il CourseGoal ha un titolo, che dovrebbe essere

01:03.780 --> 01:06.930
una stringa e, diciamo, una descrizione, che dovrebbe

01:06.930 --> 01:09.040
essere una stringa.

01:09.040 --> 01:14.040
Forse abbiamo anche la proprietà completeUntil, che è una Date.

01:15.290 --> 01:17.961
Ora vogliamo avere una funzione, diciamo, createCourseGoal,

01:17.961 --> 01:21.500
che ci crei un oggetto di questo tipo.

01:21.500 --> 01:23.380
Naturalmente, avremmo potuto creare anche questa classe.

01:23.380 --> 01:26.290
Ma abbiamo una funzione di questo tipo perché in essa

01:26.290 --> 01:28.740
potremmo attingere a dei dati da un database,

01:28.740 --> 01:30.590
o qualunque cosa sia.

01:30.590 --> 01:32.110
Quindi abbiamo questa funzione.

01:32.110 --> 01:33.330
Alla fine, voglio

01:33.330 --> 01:37.890
ottenere il mio titolo, che è una stringa, potrei

01:37.890 --> 01:42.320
ottenere la mia descrizione, che è una stringa,

01:42.320 --> 01:47.150
e spero di ottenere la mia data, che è un Data.

01:47.150 --> 01:49.680
Ora, in questa funzione, ovviamente, potremmo restituire un oggetto,

01:49.680 --> 01:51.740
ma abbiamo appena impostato tutte queste cose.

01:51.740 --> 01:55.340
Quindi, dove impostiamo title a title, description a

01:55.340 --> 01:57.840
description e completeUntil a date.

01:57.840 --> 02:00.760
Potremmo fare tutto questo e se poi definissimo

02:00.760 --> 02:03.890
che questa funzione restituirà sempre un CourseGoal,

02:03.890 --> 02:07.120
avremmo una funzione impostata correttamente.

02:07.120 --> 02:08.420
Ora, per qualche motivo, diciamo

02:08.420 --> 02:09.530
che non stiamo facendo così,

02:09.530 --> 02:11.623
non stiamo facendo tutto in un unico passaggio.

02:12.680 --> 02:13.870
Invece, quello che voglio

02:13.870 --> 02:17.340
fare è iniziare creando una variabile qui, che contiene un

02:17.340 --> 02:18.700
oggetto vuoto.

02:18.700 --> 02:22.620
E poi, passo dopo passo, voglio aggiungere il mio titolo qui.

02:22.620 --> 02:26.420
Voglio aggiungere qui la mia descrizione.

02:26.420 --> 02:31.303
E voglio aggiungere la mia data qui.

02:33.640 --> 02:36.420
Ora sto ricevendo degli errori perché, ovviamente, non posso

02:36.420 --> 02:39.170
impostare il titolo This is not a property of this object.

02:39.170 --> 02:41.930
E mentre questo funziona in JavaScript normale,

02:41.930 --> 02:45.410
a TypeScript non piace molto l'aggiunta al volo.

02:45.410 --> 02:47.810
Quindi potremmo dire che questo dovrebbe essere

02:47.810 --> 02:49.300
di tipo CourseGoal.

02:49.300 --> 02:51.040
Ora, TypeScript non si lamenta di

02:51.040 --> 02:53.640
questo, ma del fatto che si tratta di un oggetto vuoto,

02:53.640 --> 02:56.223
che chiaramente non si adatta al nostro tipo.

02:57.070 --> 02:58.360
Quindi, alla fine, voglio

02:58.360 --> 03:01.000
restituirlo e voglio aggiungere tutte queste cose

03:01.000 --> 03:04.570
passo dopo passo, forse perché abbiamo una validazione extra prima di

03:04.570 --> 03:07.590
ogni passo, e quindi una da aggiungere in questo modo.

03:07.590 --> 03:12.390
È qui che il tipo parziale può essere utile.

03:12.390 --> 03:17.390
Potremmo dire che il CourseGoal qui dovrebbe essere un tipo parziale, che alla

03:17.580 --> 03:18.413
fine, grazie

03:18.413 --> 03:21.600
ai tipi generici, conterrà un courseGoal.

03:21.600 --> 03:24.200
Ciò che fa è dire a TypeScript che questo

03:24.200 --> 03:28.260
è un oggetto che alla fine sarà un courseGoal.

03:28.260 --> 03:32.090
Ma inizialmente, partial avvolge il nostro tipo e lo

03:32.090 --> 03:36.620
cambia in un tipo in cui tutte le proprietà sono opzionali.

03:36.620 --> 03:39.440
Questo è ciò che fa partial, uno dei tipi incorporati di cui

03:39.440 --> 03:40.670
Typescript dispone.

03:40.670 --> 03:44.270
Quindi lo trasforma in un tipo, che è anche un tipo di oggetto, in cui tutte le

03:44.270 --> 03:45.713
proprietà sono opzionali.

03:45.713 --> 03:49.290
Pertanto, possiamo impostare inizialmente un oggetto vuoto

03:49.290 --> 03:53.030
e aggiungere tutti questi elementi passo dopo passo.

03:53.030 --> 03:54.880
L'unico problema è che alla

03:54.880 --> 03:58.130
fine non possiamo restituirlo, perché ora è ancora

03:58.130 --> 04:02.130
di tipo partial CourseGoal e non di tipo CourseGoal.

04:02.130 --> 04:04.630
Possiamo risolvere il problema convertendo questo dato in courseGoal

04:04.630 --> 04:07.480
con il typecasting, perché sappiamo che a questo punto del tempo avremo

04:07.480 --> 04:08.990
aggiunto tutti i dati.

04:08.990 --> 04:11.667
Si tratterà quindi di un vero e proprio corso-obiettivo e non di un corso parziale.

04:11.667 --> 04:13.510
E naturalmente questo è un po' inventato.

04:13.510 --> 04:15.500
Ma si possono verificare scenari

04:15.500 --> 04:18.220
come questo, in cui si vuole cambiare temporaneamente

04:18.220 --> 04:19.650
uno dei tipi di oggetto,

04:19.650 --> 04:23.530
una delle interfacce, in modo che sia solo opzionale.

04:23.530 --> 04:25.540
Per assicurarsi che tutte le proprietà presenti

04:25.540 --> 04:28.170
possano essere opzionate solo temporaneamente.

04:28.170 --> 04:31.223
Il tipo parziale consente di farlo.

04:32.370 --> 04:35.920
E non c'è mai un tipo di utilità incorporato

04:35.920 --> 04:40.170
che sia di sola lettura, che può essere molto utile.

04:40.170 --> 04:42.623
Supponiamo di avere un array di nomi.

04:43.460 --> 04:46.330
E lì ho trovato Max e Sports.

04:46.330 --> 04:47.420
Ora, TypeScript deduce

04:47.420 --> 04:49.860
correttamente che si tratta di un array di stringhe.

04:49.860 --> 04:50.960
Ora cosa possiamo fare?

04:50.960 --> 04:52.690
Possiamo ovviamente inserire

04:53.700 --> 04:55.400
Manu, e probabilmente dovrei

04:55.400 --> 04:58.340
cambiare questo punto in Anna che non fa sport per avere

04:58.340 --> 04:59.720
un nome lì dentro.

04:59.720 --> 05:00.553
Quindi funziona.

05:00.553 --> 05:01.386
Ora, però, vogliamo

05:01.386 --> 05:04.230
assicurarci che questo sia un array chiuso.

05:04.230 --> 05:06.260
Non possiamo aggiungere altro.

05:06.260 --> 05:07.870
E possiamo sempre aggiungerne

05:07.870 --> 05:11.690
altri qui, ma almeno voglio che Typescript mi sgridi se ci provo.

05:11.690 --> 05:13.730
È qui che possiamo usare il tipo

05:13.730 --> 05:18.730
di sola lettura, impostandolo come array di stringhe di sola lettura.

05:18.930 --> 05:20.510
Con questo diciamo a TypeScript, beh,

05:20.510 --> 05:23.030
quello che memorizziamo qui è un array di stringhe.

05:23.030 --> 05:25.830
Ma è anche un array di stringhe, che è di sola lettura.

05:25.830 --> 05:28.210
Quindi, quando cerchiamo di aggiungere

05:28.210 --> 05:31.600
qualcosa con push o di rimuovere qualcosa con pop, otteniamo

05:31.600 --> 05:32.760
un errore, perché non

05:32.760 --> 05:34.810
ci è consentito fare queste cose con

05:34.810 --> 05:36.320
questo array.

05:36.320 --> 05:38.760
A proposito, questo non è limitato agli array,

05:38.760 --> 05:41.610
ma si può anche usare la sola lettura su un oggetto.

05:41.610 --> 05:43.990
Ad esempio, per commercializzare come sola

05:43.990 --> 05:46.860
lettura, in modo da non poter modificare le proprietà

05:46.860 --> 05:49.920
o aggiungere nuove proprietà a questo oggetto.

05:49.920 --> 05:52.240
Quindi anche questo può essere molto,

05:52.240 --> 05:56.510
molto utile e dare maggiore flessibilità o essere più precisi

05:56.510 --> 05:59.490
su ciò che si vuole fare nel codice.

05:59.490 --> 06:01.380
Ora, tutti questi sono solo tipi di utilità

06:01.380 --> 06:03.610
che esistono solo nel mondo TypeScript.

06:03.610 --> 06:05.881
Quindi non sono compilati a nulla.

06:05.881 --> 06:09.400
Ma in fase di compilazione, vi danno una maggiore severità,

06:09.400 --> 06:12.410
o controlli extra, o saltano alcuni controlli, come

06:12.410 --> 06:14.800
abbiamo fatto con il partial.

06:14.800 --> 06:17.170
Ora non si tratta più di sola lettura o parziale.

06:17.170 --> 06:19.730
Come ho detto, in allegato trovate la documentazione

06:19.730 --> 06:22.420
di un elenco completo di questi tipi di utilità.

06:22.420 --> 06:25.580
In certi scenari possono essere davvero utili e quindi

06:25.580 --> 06:28.350
non volevo assolutamente nasconderveli.

06:28.350 --> 06:30.500
Ma è bene conoscerle per poterle usare

06:30.500 --> 06:34.060
quando si deve bloccare qualcosa, o come nel caso dell'apertura

06:34.060 --> 06:36.980
parziale di qualcosa o con tutte le altre che non

06:36.980 --> 06:39.690
ho trattato qui, se si ha qualche altra operazione

06:39.690 --> 06:42.570
che può essere migliorata con uno di questi tipi

06:42.570 --> 06:45.140
di utilità integrate.

06:45.140 --> 06:47.670
Questi tipi di utilità sono tutti

06:47.670 --> 06:49.170
generici, perché prendono

06:49.170 --> 06:54.190
un altro valore di qualsiasi tipo e ci fanno qualcosa.

06:54.190 --> 06:57.970
Impostano tutto come opzionale, lo bloccano, senza preoccuparsi

06:57.970 --> 07:01.330
se si tratta di un array o di un oggetto o di un array di

07:01.330 --> 07:04.430
stringhe, di numeri e così via.

07:04.430 --> 07:06.000
Ecco perché questi sono generici.

07:06.000 --> 07:09.520
E insieme ai generici incorporati superiori che abbiamo visto prima

07:09.520 --> 07:10.790
e ai propri generici.

07:10.790 --> 07:13.780
Si spera che tutto questo aiuti a capire perché i generici

07:13.780 --> 07:16.793
possono essere utili e perché esistono.
