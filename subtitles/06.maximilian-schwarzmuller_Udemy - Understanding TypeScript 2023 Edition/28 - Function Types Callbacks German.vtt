WEBVTT

00:02.440 --> 00:05.170
Kursleiter: Apropos Rückrufe und Funktionstypen,

00:05.170 --> 00:08.400
da funktioniert es ziemlich genau gleich.

00:08.400 --> 00:10.550
Sagen wir, wir haben eine neue Funktion

00:11.800 --> 00:14.990
dort oben, addAndHandle, sagen wir.

00:14.990 --> 00:18.420
Dort erwarten wir zwei Zahlen und dann möchte ich auch

00:19.740 --> 00:22.320
eine Rückruf-Funktion hier bekommen.

00:22.320 --> 00:24.480
Also eine Funktion, die übergeben wird und ein

00:24.480 --> 00:26.670
Argument ist, das etwas mit dem Ergebnis machen

00:26.670 --> 00:29.930
soll, dann könnten wir hier natürlich das Ergebnis erzeugen.

00:29.930 --> 00:31.060
Aber nicht nur zurückgeben,

00:31.060 --> 00:33.290
sondern stattdessen möchte ich die Callback-Funktion

00:33.290 --> 00:35.670
aufrufen und in Ergebnis übergeben.

00:35.670 --> 00:36.990
Dazu möchte ich klarstellen,

00:36.990 --> 00:39.270
dass Callback eine Funktion sein sollte.

00:39.270 --> 00:42.190
Ich verwende also wieder diese Funktionstyp-Definition,

00:42.190 --> 00:45.640
die vielleicht nichts zurückgibt, aber eine Zahl

00:45.640 --> 00:51.280
als Argument benötigt, weil wir ihr hier eine Zahl übergeben.

00:51.280 --> 00:52.740
Die Callback-Funktion, also

00:52.740 --> 00:55.870
die Funktion, die wir als Parameter an diese Funktion übergeben,

00:55.870 --> 00:58.460
sollte eine Zahl akzeptieren.

00:58.460 --> 01:01.890
Dort unten würden wir addAndHandle aufrufen, 10 und

01:01.890 --> 01:05.240
20 übergeben und dann eine Funktion einfügen.

01:05.240 --> 01:07.570
Zum Beispiel eine anonyme Funktion hier.

01:07.570 --> 01:09.710
Wenn wir nun die Funktion aufrufen, ist dies

01:09.710 --> 01:11.470
natürlich kein Funktionstyp, sondern

01:11.470 --> 01:13.620
ein konkreter Wert, den wir als drittes Argument

01:13.620 --> 01:15.150
übergeben.

01:15.150 --> 01:18.870
Das hier ist also eine anonyme Funktion, die hier erstellt wird,

01:18.870 --> 01:22.300
und wir wissen, dass wir eine Zahl erhalten werden.

01:22.300 --> 01:23.810
Vielleicht nennen wir das Ergebnis hier,

01:23.810 --> 01:26.110
und dann können wir damit machen, was wir wollen.

01:26.110 --> 01:27.623
Und wenn Sie dies nun kompilieren,

01:28.570 --> 01:31.120
sehen wir dieses Protokoll dort unten, 30, was das

01:31.120 --> 01:33.540
Ergebnis unserer Callback-Funktion ist, die

01:33.540 --> 01:35.600
wir an addAndHandle übergeben haben,

01:35.600 --> 01:38.250
wo addAndHandle zwei Zahlen kombiniert und dann

01:38.250 --> 01:39.850
den Callback aufruft, wobei der

01:39.850 --> 01:43.200
Callback diese Bedingung hier erfüllen muss.

01:43.200 --> 01:45.870
Der Vorteil der Definition der Callback-Funktion

01:45.870 --> 01:49.490
hier ist, dass innerhalb der Funktion übergeben wir es ist ein Callback-Typen,

01:49.490 --> 01:52.240
die in der Lage ist zu folgern, dass das Ergebnis eine

01:52.240 --> 01:54.000
Zahl sein wird und damit könnten wir

01:54.000 --> 01:56.620
alles tun, mit Ergebnis hier.

01:56.620 --> 01:58.090
Was wir mit einer Zahl tun können,

01:58.090 --> 02:00.990
ohne den Typ explizit anzugeben, weil TypeScript weiß,

02:00.990 --> 02:03.226
dass das Ergebnis eine Zahl sein wird, weil

02:03.226 --> 02:04.970
wir klargestellt haben, dass der

02:04.970 --> 02:08.473
Callback ein Argument erhält, das eine Zahl ist.

02:09.310 --> 02:12.170
Wenn wir also hier ein zweites Argument im Callback erwarten

02:12.170 --> 02:13.060
würden, bekämen wir

02:13.060 --> 02:15.460
eine Fehlermeldung, weil wir genau wissen, dass der

02:15.460 --> 02:18.630
Callback, den wir in unserer addAndHandle-Funktion erwarten, nur

02:18.630 --> 02:20.500
ein Argument haben sollte.

02:20.500 --> 02:22.420
Wenn wir also eine Callback-Funktion übergeben,

02:22.420 --> 02:23.950
die ein zweites Argument benötigt,

02:23.950 --> 02:26.240
ist das eindeutig ein Fehler.

02:26.240 --> 02:28.250
Das einzige, was TypeScript nicht aufnimmt,

02:28.250 --> 02:30.280
ist, wenn wir hier etwas zurückgeben.

02:30.280 --> 02:33.690
Wenn ein Ergebnis zurückgegeben wird und der Rückruf etwas zurückgibt,

02:33.690 --> 02:34.767
obwohl wir klargestellt

02:34.767 --> 02:37.300
haben, dass er nichts zurückgeben soll.

02:37.300 --> 02:41.180
Dies ist jedoch kein Fehler oder ein Bug in TypeScript.

02:41.180 --> 02:43.150
Das geschieht sogar mit Absicht.

02:43.150 --> 02:46.000
Durch die Angabe von void hier auf unsere Callback-Typ, wir sind

02:46.000 --> 02:49.520
im Wesentlichen sagen, wir ignorieren alle Ergebnisse, die Sie möglicherweise

02:49.520 --> 02:50.910
zurückgegeben werden hier.

02:50.910 --> 02:54.030
Wir sagen also im Grunde, dass wir in addAndHandle, wo wir die

02:54.030 --> 02:56.020
Callback-Funktion bekommen, nichts

02:56.020 --> 02:58.080
mit dem Rückgabetyp machen werden.

02:58.080 --> 03:00.600
Deshalb können Sie hier ungestraft etwas

03:00.600 --> 03:03.550
zurückgeben, aber Sie wissen, weil es hier

03:03.550 --> 03:06.850
klar definiert ist, dass der Rückruf nichts mit

03:06.850 --> 03:09.230
dem Wert macht, den Sie hier zurückgeben

03:09.230 --> 03:10.870
könnten.

03:10.870 --> 03:13.543
Damit addAndHandle innerhalb der Funktion nichts

03:13.543 --> 03:15.680
mit dem Wert macht, den Sie möglicherweise

03:15.680 --> 03:17.120
zurückgeben.

03:17.120 --> 03:19.620
Und das ist natürlich eine nützliche Information.

03:19.620 --> 03:21.270
Man könnte erwarten, dass wir

03:21.270 --> 03:25.710
hier etwas mit dem vom Callback zurückgegebenen Wert machen, und durch die

03:25.710 --> 03:29.000
Angabe dieses Typs hier machen wir deutlich, dass wir innerhalb

03:29.000 --> 03:31.520
von addAndHandle nicht an einem Rückgabewert

03:31.520 --> 03:33.920
interessiert sind.

03:33.920 --> 03:36.410
Sie sind also nicht gezwungen, einen Callback zu

03:36.410 --> 03:38.260
übergeben, der nichts zurückgibt.

03:38.260 --> 03:40.830
Es sagt Ihnen nur, dass alles, was Sie zurückgeben,

03:40.830 --> 03:42.200
nicht verwendet wird.

03:42.200 --> 03:44.070
Bei den Parametern ist das natürlich anders.

03:44.070 --> 03:45.540
Dort wird dies erzwungen, weil

03:45.540 --> 03:48.310
es hier wirklich darauf ankommt, dass Sie wissen, ob Sie

03:48.310 --> 03:51.720
einen Callback übergeben, der mehrere Parameter erwartet.

03:51.720 --> 03:53.490
Dann bekommst du eine Fehlermeldung

03:53.490 --> 03:55.350
oder nicht das gewünschte Ergebnis,

03:55.350 --> 03:57.740
weil ich dir nur ein Ergebnis gebe.

03:57.740 --> 04:01.290
Wir können also nicht einfach ignorieren, was Sie vielleicht wollen, wie es bei

04:01.290 --> 04:02.840
der Rückgabeart der Fall ist.

04:02.840 --> 04:05.506
Wir ignorieren das hier für die Übergabe von etwas in,

04:05.506 --> 04:08.750
wo die addAndHandle-Funktion ist dafür verantwortlich, weil das

04:08.750 --> 04:10.920
ist, wo der Callback aufgerufen wird.

04:10.920 --> 04:13.210
Aus diesem Grund werden Parameter erzwungen

04:13.210 --> 04:15.060
und TypeScript ist sehr streng, was die

04:15.060 --> 04:17.150
Anzahl und den Typ der Parameter von Callback-Funktionen

04:17.150 --> 04:21.253
angeht, und kümmert sich nicht wirklich um den Rückgabetyp.
