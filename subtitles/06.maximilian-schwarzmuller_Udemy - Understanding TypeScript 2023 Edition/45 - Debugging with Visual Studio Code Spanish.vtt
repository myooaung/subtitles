WEBVTT

00:02.170 --> 00:03.003
Instructor: Así que

00:03.003 --> 00:04.760
ahora que tenemos un proyecto correctamente

00:04.760 --> 00:08.130
configurado, vamos a profundizar un poco más en cómo puedes depurar tu proyecto

00:08.130 --> 00:10.500
o cómo puedes tener un gran flujo de desarrollo.

00:10.500 --> 00:13.560
Te muestro mi configuración básica de IDE al principio

00:13.560 --> 00:14.575
de este curso.

00:14.575 --> 00:17.750
Asegúrate de que tienes instaladas las extensiones correctas.

00:17.750 --> 00:22.750
En el caso de TypeScript, se trata de ESLint, que puede ayudarte

00:22.980 --> 00:26.410
a limpiar tu código TypeScript.

00:26.410 --> 00:29.310
Así que con la mejora de la calidad del código aunque es

00:29.310 --> 00:31.620
posible que necesite una configuración adicional

00:31.620 --> 00:33.900
para ESLint para tener un efecto.

00:33.900 --> 00:36.310
Puede ayudarte en proyectos más avanzados,

00:37.220 --> 00:38.570
pero es más interesante

00:38.570 --> 00:40.818
que eso, quieres usar Prettier para

00:40.818 --> 00:43.370
formatear automáticamente tu código

00:43.370 --> 00:45.770
y tener un código bien formateado y puede

00:45.770 --> 00:49.870
que quieras probar Debugger para Chrome porque te permite depurar

00:49.870 --> 00:53.140
tus archivos TypeScript incluso desde dentro de

00:53.140 --> 00:55.810
VS Code a través de Chrome pero sin usar las

00:55.810 --> 00:59.440
Chrome Dev Tools.

00:59.440 --> 01:01.820
Por supuesto, puedes utilizarlos también como

01:01.820 --> 01:02.653
has aprendido.

01:02.653 --> 01:05.154
Si activas sourceMaps aquí, lo cual puedes

01:05.154 --> 01:07.160
hacer siempre, obtienes estos archivos

01:07.160 --> 01:09.240
traducidos allí también, lo cual es

01:09.240 --> 01:10.429
muy bueno.

01:10.429 --> 01:14.170
Pero también puedes utilizar VS Code.

01:14.170 --> 01:15.960
Puedes colocar puntos de ruptura

01:15.960 --> 01:17.340
aquí, digamos en el clickHandler

01:17.340 --> 01:19.842
y ahora para lanzar tus archivos aquí a través

01:19.842 --> 01:24.842
de VS Code, necesitas habilitar sourceMaps también pero aun así podremos usar VS Code

01:26.100 --> 01:28.690
en lugar de las herramientas de desarrollo

01:28.690 --> 01:30.950
del navegador.

01:30.950 --> 01:34.570
Así que activa SourceMaps, coloca tu punto de

01:34.570 --> 01:38.930
interrupción y luego ve a Debug, Start Debugging.

01:38.930 --> 01:40.320
Ahora, la primera vez que ejecutes

01:40.320 --> 01:42.170
esto, debería preguntarte por el entorno

01:42.170 --> 01:45.350
y ahí con esa extensión de Debugger for Chrome instalada, deberías

01:45.350 --> 01:47.850
poder elegir Chrome.

01:47.850 --> 01:49.960
Ahora irá a un laucnh. json donde se configura

01:49.960 --> 01:53.200
cómo debe lanzarse eso y allí debe apuntar a localhost:3000

01:53.200 --> 01:56.740
porque es donde nuestro servidor de desarrollo se está ejecutando

01:56.740 --> 01:59.330
y, por supuesto, ese proceso, por lo que el proceso

01:59.330 --> 02:04.220
de inicio de npm debe estar en funcionamiento.

02:04.220 --> 02:06.910
Para apuntar a localhost:3000 allí y como webRoot,

02:06.910 --> 02:09.740
puede dejar ese marcador de posición aquí lo que significa

02:09.740 --> 02:11.890
que esta carpeta del proyecto se supone

02:11.890 --> 02:13.780
que es el anfitrión de sus archivos

02:13.780 --> 02:17.120
que es el caso y ahora compilar su código para que los sourceMaps

02:17.120 --> 02:19.780
también se generan después de establecer el sourceMaps

02:19.780 --> 02:22.470
config a true por lo que ahora tenemos estos en el

02:22.470 --> 02:25.290
código JavaScript.

02:25.290 --> 02:26.870
Entonces con su punto de ruptura añadido aquí

02:26.870 --> 02:28.400
y su lanzamiento. json configurado,

02:28.400 --> 02:30.400
vamos a ejecutar la depuración aquí.

02:30.400 --> 02:32.140
Inicie la depuración ahora de verdad

02:32.140 --> 02:34.830
y se abrirá una nueva pestaña ahora automáticamente.

02:34.830 --> 02:36.020
Esta pestaña se cerrará

02:36.020 --> 02:38.730
siempre que salga del proceso de depuración o si

02:38.730 --> 02:41.940
cierra la pestaña, el proceso de depuración saldrá.

02:41.940 --> 02:44.590
Así que ahora con eso, entras en esta vista de depuración

02:44.590 --> 02:46.790
aquí en VS Code donde puedes rastrear variables,

02:46.790 --> 02:48.230
ver ciertas expresiones y ver

02:48.230 --> 02:50.120
la pila de llamadas actual y si ahora

02:50.120 --> 02:51.910
haces clic en Click Me, deberías ser

02:51.910 --> 02:54.120
llevado de vuelta al editor y la ejecución

02:54.120 --> 02:56.590
del código se detiene en tu punto de interrupción

02:56.590 --> 02:59.630
en el archivo TypeScript y ahora puedes caminar a través del

02:59.630 --> 03:01.410
archivo de ella, inspeccionar los

03:01.410 --> 03:04.540
valores locales para esta palabra clave o para la variable de

03:04.540 --> 03:07.120
mensaje, por ejemplo, las variables de todo el script

03:07.120 --> 03:09.750
que podrías tener y las variables globales que tienes

03:09.750 --> 03:13.320
acceso a los objetos globales.

03:13.320 --> 03:15.560
Puedes ver ciertas expresiones

03:15.560 --> 03:19.290
como mensaje + múltiples signos de exclamación y bueno,

03:19.290 --> 03:22.690
entonces siempre puedes rastrear el valor que está

03:22.690 --> 03:27.483
aquí en esta ventana si quisieras así que eso funcionaría.

03:27.483 --> 03:30.480
Y usted puede ver la pila de llamadas de la función actual,

03:30.480 --> 03:33.010
por ejemplo, que se produciría en el clickHandler

03:33.010 --> 03:34.710
y ahora usted puede paso a través

03:34.710 --> 03:37.590
de su código con estos controles para pasar al siguiente

03:37.590 --> 03:39.800
paso, saltando sobre la siguiente llamada

03:39.800 --> 03:41.500
a la función, el paso en la llamada

03:41.500 --> 03:43.827
a la función o salir de la llamada a la función

03:43.827 --> 03:46.710
actual y la pila de llamadas, por supuesto, aquí se ajustará

03:46.710 --> 03:49.280
de acuerdo a eso y con eso, puede ignorar esta cosa

03:49.280 --> 03:51.920
del navegador aquí, con eso, siempre se puede reanudar

03:51.920 --> 03:56.210
la ejecución del código haciendo clic en el botón de reproducción y sólo la pausa cada

03:56.210 --> 03:58.150
vez que llegue a su punto de interrupción

03:58.150 --> 04:00.290
la próxima vez.

04:00.290 --> 04:02.080
Así es como se puede depurar el código.

04:02.080 --> 04:04.050
Puede eliminar un punto de interrupción haciendo clic en él.

04:04.050 --> 04:05.910
Así es como puedes depurar el código

04:05.910 --> 04:07.310
desde dentro de VS Code con

04:07.310 --> 04:09.728
la ayuda de las herramientas de depuración incorporadas,

04:09.728 --> 04:12.450
la extensión Chrome Debugger, la configuración derivada

04:12.450 --> 04:15.470
y los soureMaps que se establecen en tu configuración de

04:15.470 --> 04:17.743
TypeScript.
