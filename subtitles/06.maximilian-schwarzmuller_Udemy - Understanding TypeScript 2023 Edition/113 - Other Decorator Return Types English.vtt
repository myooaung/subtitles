WEBVTT

1
00:00:02.440 --> 00:00:05.240
<v Narrator>We saw how we can build quite amazing things</v>

2
00:00:05.240 --> 00:00:08.120
with decorators, decorator factories and then also

3
00:00:08.120 --> 00:00:11.740
by utilizing the return values of decorators

4
00:00:11.740 --> 00:00:12.790
which in the examples,

5
00:00:12.790 --> 00:00:14.930
the class decorator allows us to

6
00:00:14.930 --> 00:00:18.740
basically replace the class we added the decorator to

7
00:00:18.740 --> 00:00:21.400
with a class that is totally different,

8
00:00:21.400 --> 00:00:23.900
that builds up on the existing class, like in our case

9
00:00:23.900 --> 00:00:27.230
and that therefore might add some functionalities.

10
00:00:27.230 --> 00:00:30.490
Now you can return values in other decorators too

11
00:00:30.490 --> 00:00:32.030
but not in all of them.

12
00:00:32.030 --> 00:00:35.430
Or not in all them the return value is respected.

13
00:00:35.430 --> 00:00:38.150
Now, decorators where you can return something

14
00:00:38.150 --> 00:00:41.330
are the decorators you can add to methods

15
00:00:41.330 --> 00:00:43.540
and the decorators you add to accessors.

16
00:00:43.540 --> 00:00:47.400
So here on the setter log 2 and log 3 on the method

17
00:00:47.400 --> 00:00:51.210
these two decorators, log 2 and log 3 these also could

18
00:00:51.210 --> 00:00:54.080
return something and TypeScript would use it.

19
00:00:54.080 --> 00:00:58.040
The decorators on properties and on parameters

20
00:00:58.040 --> 00:01:00.670
of course, also can return something

21
00:01:00.670 --> 00:01:02.500
but TypeScript will ignore it.

22
00:01:02.500 --> 00:01:05.030
So return values are not supported there

23
00:01:05.030 --> 00:01:07.700
or are not used to be precise.

24
00:01:07.700 --> 00:01:09.690
Now what can you return on log 3?

25
00:01:09.690 --> 00:01:12.680
So on method decorators and on log 2,

26
00:01:12.680 --> 00:01:15.320
so on accessor decorators though.

27
00:01:15.320 --> 00:01:19.320
You can return a brand new property descriptor.

28
00:01:19.320 --> 00:01:22.050
Log 2 and log 3, which are the two decorators

29
00:01:22.050 --> 00:01:23.110
I'm talking about, right?

30
00:01:23.110 --> 00:01:28.110
Log 2 and log 3, both get the descriptor off the property,

31
00:01:28.170 --> 00:01:30.510
off the method, you could say, they are attached to.

32
00:01:30.510 --> 00:01:33.034
Because an accessor is kind of like a method,

33
00:01:33.034 --> 00:01:36.220
you have a function that gets executed there.

34
00:01:36.220 --> 00:01:39.072
Now the property descriptor is a JavaScript thing,

35
00:01:39.072 --> 00:01:41.980
as you know, if we have a look at this page again

36
00:01:41.980 --> 00:01:44.500
and we reload it we see that, for example

37
00:01:44.500 --> 00:01:47.260
for our accessor decorator,

38
00:01:47.260 --> 00:01:50.497
the property descriptor is this object here which has

39
00:01:50.497 --> 00:01:52.470
the configurable and enumerable

40
00:01:52.470 --> 00:01:54.910
and get and set properties.

41
00:01:54.910 --> 00:01:57.660
And for the method decorator our descriptor is

42
00:01:57.660 --> 00:01:59.330
this object here which also has

43
00:01:59.330 --> 00:02:02.290
configurable, enumerable, value and writable.

44
00:02:02.290 --> 00:02:04.410
And this is vanilla JavaScript.

45
00:02:04.410 --> 00:02:07.830
You have property descriptors in vanilla JavaScript as well.

46
00:02:07.830 --> 00:02:11.710
They allow you to define a property in more detail.

47
00:02:11.710 --> 00:02:14.430
You can of course assign a value to a property

48
00:02:14.430 --> 00:02:15.990
and since we're talking about a method,

49
00:02:15.990 --> 00:02:17.940
the value is a function in this case

50
00:02:17.940 --> 00:02:20.010
but you can also control whether it's writable

51
00:02:20.010 --> 00:02:22.910
so if it can be changed after it has been created,

52
00:02:22.910 --> 00:02:24.700
after the object has been created.

53
00:02:24.700 --> 00:02:25.950
Whether it's configurable,

54
00:02:25.950 --> 00:02:27.140
so if you can change it's

55
00:02:27.140 --> 00:02:29.570
configuration and if you can delete this property.

56
00:02:29.570 --> 00:02:30.770
And if it's enumerable,

57
00:02:30.770 --> 00:02:33.166
which means if it shows up when you loop

58
00:02:33.166 --> 00:02:35.410
through your object for example.

59
00:02:35.410 --> 00:02:36.810
And therefore a method for example

60
00:02:36.810 --> 00:02:38.790
by default this is set to false so that

61
00:02:38.790 --> 00:02:40.930
if you use a for in loop on an object

62
00:02:40.930 --> 00:02:44.040
this method is not printed as a property.

63
00:02:44.040 --> 00:02:45.240
For an accessor we also got

64
00:02:45.240 --> 00:02:47.180
configurable and enumerable,

65
00:02:47.180 --> 00:02:49.750
but we get and set and there you could of course,

66
00:02:49.750 --> 00:02:53.040
also, for example, return a new descriptor which

67
00:02:53.040 --> 00:02:56.180
assigns a brand new set method or which suddenly

68
00:02:56.180 --> 00:02:58.750
also adds a get functionality.

69
00:02:58.750 --> 00:03:01.585
So here in log 2 and log 3 you can return a new

70
00:03:01.585 --> 00:03:05.190
descriptor object in the end and make it clear

71
00:03:05.190 --> 00:03:08.020
to TypeScript that you will do so by returning

72
00:03:08.020 --> 00:03:10.560
or by setting the return type to property descriptor

73
00:03:10.560 --> 00:03:14.860
and there you can therefore also set the set keyword,

74
00:03:14.860 --> 00:03:17.010
the get keyword, the configurable or the

75
00:03:17.010 --> 00:03:22.010
enumerable property and change how this accessor

76
00:03:22.500 --> 00:03:24.800
or method is configured.

77
00:03:24.800 --> 00:03:27.560
Now I don't wanna do that here for the accessor,

78
00:03:27.560 --> 00:03:29.800
there's nothing interesting I could do with it

79
00:03:29.800 --> 00:03:32.520
therefore I will not return a property descriptor,

80
00:03:32.520 --> 00:03:36.400
but I will actually show you an example with the method

81
00:03:36.400 --> 00:03:40.080
decorator where we will return something and we can build

82
00:03:40.080 --> 00:03:42.533
interesting with the help of decorators.

