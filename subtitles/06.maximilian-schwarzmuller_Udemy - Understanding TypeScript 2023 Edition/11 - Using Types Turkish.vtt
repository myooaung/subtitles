WEBVTT

00:02.060 --> 00:06.410
Eğitmen: Typescript JavaScript'e birçok tür sağlar.

00:06.410 --> 00:10.100
Şimdi, JavaScript'in kendisi de bazı veri türlerini bilir ve

00:10.100 --> 00:12.230
bu modülde buna da geri döneceğim, ancak

00:12.230 --> 00:14.950
Typescript çok daha fazla tür ekler ve bu derste

00:14.950 --> 00:17.380
de öğreneceğiniz gibi, Typescript ayrıca

00:17.380 --> 00:21.110
kendi türlerinizi yazmanıza da olanak tanır.

00:21.110 --> 00:24.320
Şimdi, JavaScript'in zaten bildiği ve Typescript'in

00:24.320 --> 00:26.250
de desteklediği bazı Çekirdek

00:26.250 --> 00:28.289
Türlerle başlayalım ve ayrıca

00:28.289 --> 00:30.550
JavaScript'in türü bilmesi ile Typescript'in

00:30.550 --> 00:33.380
bu türü kullanması arasındaki farkın ne anlama

00:33.380 --> 00:36.800
geldiğine bir göz atalım.

00:36.800 --> 00:38.287
JavaScript ve Typescript'te

00:38.287 --> 00:41.740
birlikte çalıştığımız temel türlerden biri sayı türüdür.

00:41.740 --> 00:45.220
Şimdi, JavaScript'te ve aynı şey Typescript için de geçerlidir,

00:45.220 --> 00:47.290
yalnızca bir sayı türü vardır.

00:47.290 --> 00:50.750
Tamsayılar veya kayan sayılar için özel bir tür yoktur.

00:50.750 --> 00:55.520
Bunun yerine, buradaki değerlerin hepsi sayı olacaktır.

00:55.520 --> 00:58.180
Bir, ondalık basamağı olmayan bir sayı olacaktır.

00:58.180 --> 01:01.640
5. 3 açıkça ondalık basamaklı bir

01:01.640 --> 01:04.532
değerdir ve tüm bu değerler sayı türündedir.

01:04.532 --> 01:08.180
Diğer programlama dillerinde özel tamsayı türleri ve

01:08.180 --> 01:10.480
float veya double türleri vardır.

01:10.480 --> 01:11.980
JavaScript'te bu yoktur

01:11.980 --> 01:14.120
ve Typescript'te de yoktur.

01:14.120 --> 01:16.070
Yani, JavaScript'ten bildiğimiz

01:16.070 --> 01:19.810
sayı türüne Typescript'te de bir tür olarak sahibiz.

01:19.810 --> 01:23.950
Ayrıca string veri tipimiz de vardır ve bu, şu üç yoldan biriyle

01:23.950 --> 01:26.370
tanımlayabileceğiniz metin olacaktır:

01:26.370 --> 01:28.285
tek tırnakla, çift tırnakla

01:28.285 --> 01:30.950
ya da ters tırnakla.

01:30.950 --> 01:34.720
Geri işaretli son gösterim, modern JavaScript'te ve

01:34.720 --> 01:38.640
ayrıca Typescript'te sağlanan özel bir sözdizimidir;

01:38.640 --> 01:42.440
bu, içine dinamik olarak bazı veriler ekleyebileceğiniz

01:42.440 --> 01:44.550
normal dizeler olan şablon değişmezleri

01:44.550 --> 01:47.520
yazmamıza olanak tanır.

01:47.520 --> 01:49.240
Yani, stringler basitçe metindir

01:49.240 --> 01:53.000
ve JavaScript string değer türlerini bilir.

01:53.000 --> 01:55.000
Dizgi yazısı da bunu yapar.

01:55.000 --> 01:57.240
Son olarak, JavaScript'in bildiği ve

01:57.240 --> 01:59.790
Typescript'in de desteklediği temel veri

01:59.790 --> 02:02.250
türlerinden biri Boolean veri türüdür.

02:02.250 --> 02:03.810
Bu doğru ya da yanlış olacaktır

02:03.810 --> 02:06.610
ve programlamada, özellikle de IF deyimleriyle

02:06.610 --> 02:08.920
çalışırken bu çok önemlidir.

02:08.920 --> 02:10.970
Burada, bu iki değere sahibiz

02:10.970 --> 02:13.690
ve bu önemlidir, çünkü JavaScript'te,

02:13.690 --> 02:17.520
bu doğru ve yanlış değerler fikrini de biliyor olabilirsiniz,

02:17.520 --> 02:22.190
örneğin sıfır, sıfır sayısı, yanlış bir değerdir.

02:22.190 --> 02:25.510
Bunu bir EĞER koşulunda kullanırsanız, yanlış olarak değerlendirilir.

02:25.510 --> 02:28.560
Boolean veri türü, aslında sadece bu iki değeri bilir, doğru

02:28.560 --> 02:31.230
veya yanlış ve bu sadece Typescript için değil, JavaScript

02:31.230 --> 02:33.160
için de geçerlidir.

02:33.160 --> 02:35.532
Bilmeniz gereken bu doğru, yanlış kavram,

02:35.532 --> 02:38.280
veri türleriyle ilgili değildir.

02:38.280 --> 02:40.840
Bu perde arkası bir iş.

02:40.840 --> 02:43.030
JavaScript, belirli değerleri ve

02:43.030 --> 02:46.510
IF koşullarını gördüğünde çalışma zamanı ekler.

02:46.510 --> 02:48.530
Böylece, sayılar, dizeler ve Boolean'lar ile birkaç

02:48.530 --> 02:50.060
temel veri türüne sahip oluruz.

02:50.060 --> 02:51.450
Elbette, hepsi değil, nesnelerimiz

02:51.450 --> 02:53.410
ve benzerlerimiz de var, ancak bu türlere

02:53.410 --> 02:54.617
odaklanalım ve Typescript'in

02:54.617 --> 02:57.330
onlarla ne yaptığını veya Typescript'in yardımıyla

02:57.330 --> 03:00.930
onlarla neler yapabileceğimizi görelim.

03:00.930 --> 03:02.620
Bunun için, ilk kurs modülünde

03:02.620 --> 03:05.190
gördüğümüz projeye geri dönüyorum ve orada

03:05.190 --> 03:07.600
size tek yapmanız gerekenin bir terminalde

03:07.600 --> 03:10.320
npm start'ı çalıştırmak, bu proje klasörüne

03:10.320 --> 03:12.280
gitmek, bir şey değiştirdiğimizde

03:12.280 --> 03:15.130
yeniden yüklenecek olan bu canlı geliştirme

03:15.130 --> 03:18.110
sunucusunu açmak olduğunu gösterdim ve burada,

03:18.110 --> 03:24.890
tarayıcımın yeni sekmesinde bu localhost:3000 adresini açtım.

03:24.890 --> 03:26.070
Doğru biliyorsunuz, bir hata alıyorum

03:26.070 --> 03:28.300
çünkü henüz dosya olarak bir uygulama tepsim yok.

03:28.300 --> 03:30.380
Elbette, hepsi bu derse eklenmiş olan bu

03:30.380 --> 03:32.280
başlangıç projesinin, uygulamayı derlediğimiz

03:32.280 --> 03:34.400
anda, burada içe aktarmaya çalıştığımız

03:34.400 --> 03:37.590
index html dosyamızda böyle bir uygulama tepsisi dosyası alacağını

03:37.590 --> 03:42.050
göreceksiniz. 'i Typescript'ten JavaScript'e çevirebiliriz ve bunu

03:42.050 --> 03:45.070
terminalin yeni bir sekmesinde yapabiliriz, böylece bu işlemi çalışır

03:45.070 --> 03:46.860
durumda tutarız ve bunun yerine sadece tsc

03:46.860 --> 03:51.117
app'i çalıştırarak yeni bir sekme açarız. ts ve bunun yaptığı şey, Typescript

03:53.920 --> 03:56.630
dosyasını derlemek ve bir JavaScript dosyası

03:56.630 --> 03:58.680
çıkarmaktır ve bu gerçekleştiğinde,

03:58.680 --> 04:01.570
bu sayfayı yeniden yükleyebiliriz ve Başlama

04:01.570 --> 04:05.520
Zamanı'nı alırız... çıktı burada.

04:05.520 --> 04:08.000
Şimdi, burada bazı Typescript kodları yazabileceğimiz

04:08.000 --> 04:10.620
ve daha sonra ne yaptığını görmek için JavaScript

04:10.620 --> 04:14.650
koduna derleyebileceğimiz bu kurulumumuz var.

04:14.650 --> 04:17.000
Şimdi, Typescript dosyasında bununla birlikte,

04:17.000 --> 04:18.870
aslında oradaki içerikten kurtulacağım,

04:18.870 --> 04:21.820
çünkü şimdi, size slaytta gösterdiğim bu temel veri türlerine

04:21.820 --> 04:23.720
dalmak istiyorum, böylece Typescript'te

04:23.720 --> 04:27.230
onlarla nasıl çalışacağınızı anlayabilirsiniz.

04:27.230 --> 04:29.430
Şimdi, çok ama çok basit bir şekilde başlayalım.

04:29.430 --> 04:32.240
Diyelim ki, yeni bir fonksiyonumuz var,

04:32.240 --> 04:34.990
add, ve orada iki sayı bekliyoruz, n1 ve

04:34.990 --> 04:38.610
add two, ve bu n1 artı n2 döndürüyor, aynen böyle, çok

04:38.610 --> 04:42.370
basit bir fonksiyon, Typescript-ish bir şey değil.

04:42.370 --> 04:46.080
Şimdi, üzerinde çalışmak istediğimiz iki sayı var.

04:46.080 --> 04:49.800
Burada 1 numara, yani beş ve 2 numara, yani

04:49.800 --> 04:54.680
belki de iki olabilir. 8, ne istersen, burada

04:54.680 --> 04:57.060
iki sayı var.

04:57.060 --> 04:59.820
Şimdi, açıkçası ve çok da şaşırtıcı olmayan bir şekilde,

04:59.820 --> 05:02.950
ekleyebilir ya da add fonksiyonunu çağırabilir ve bu fonksiyona

05:02.950 --> 05:05.280
argüman olarak sayı1 ve sayı2'yi aktarabilir,

05:05.280 --> 05:07.320
sonucu belki yeni bir sabitte saklayabilir

05:07.320 --> 05:15.080
ve sonra ekranda bir şey görmek için konsolda bir şey yapabiliriz.

05:15.080 --> 05:15.080
sonucu günlüğe kaydet.

05:15.080 --> 05:20.080
Bunu yaparsak ve bu dosyayı tsc app ile yeniden derlersem. 'yi yüklediyseniz, bu sayfa otomatik

05:20.270 --> 05:22.730
olarak yeniden yüklenmelidir.

05:22.730 --> 05:24.350
Değilse, elbette manuel olarak yeniden yükleyebilirsiniz

05:24.350 --> 05:27.010
ve 7'yi görmeniz gerekir. 8.

05:27.010 --> 05:30.250
Şimdi, bunun çok da özel olmadığını düşünebilirsiniz, değil mi?

05:30.250 --> 05:33.650
Bu oldukça basit bir JavaScript parçacığıdır ve gerçekten

05:33.650 --> 05:37.330
de Typescript-ish ile ilgili hiçbir şey yoktur.

05:37.330 --> 05:39.450
Peki, bu parçacığı normal JavaScript'te

05:39.450 --> 05:41.900
frenleyecek bir şey yapalım.

05:41.900 --> 05:45.100
Diyelim ki buradaki girdi aslında bir sayı değil,

05:45.100 --> 05:48.530
bir metin, metin içinde bir beşlik ve şimdi bunu kaydedip

05:48.530 --> 05:49.880
derleme komutumuzu burada

05:49.880 --> 05:53.380
yeniden çalıştırırsak, bu sayfa yeniden yüklendiğinde

05:53.380 --> 05:59.530
52 elde ettiğimi göreceksiniz.

05:59.530 --> 05:59.530
8

05:59.530 --> 06:02.200
bir çıktıdır ve bu eklemenin doğru bir sonuç olmadığı açıktır.

06:02.200 --> 06:04.500
Şimdi, bu çıktıyı neden normal JavaScript'te

06:04.500 --> 06:06.450
aldığımızı biliyor musunuz, ki sonuçta

06:06.450 --> 06:08.670
burada çalıştırıyoruz.

06:08.670 --> 06:10.150
Bu çıktıyı alıyoruz, çünkü

06:10.150 --> 06:14.710
bu matematiksel toplamanın sonucu değil, bunun yerine bunu bir dize olarak

06:14.710 --> 06:17.760
birleştiriyor, çünkü bu girdi, burada, beş, bir

06:17.760 --> 06:21.060
dize ve sonra JavaScript şunu görüyor, "Tamam, bir dize

06:21.060 --> 06:23.997
aldım, "Bu dizeye bir şey ekliyorum, kesinlikle,

06:23.997 --> 06:27.667
"bu bir şey de bir dizeye dönüştürülmeli, "böylece genel

06:27.667 --> 06:34.190
olarak bir dize aldım, "çünkü ilk değer bir dizeydi," ve dolayısıyla JavaScript'in yaptığı şey, 2'yi

06:34.190 --> 06:39.240
dönüştürmektir.

06:39.240 --> 06:39.240
8

06:39.240 --> 06:42.720
bir sayıdan bir dizeye, beş ve 2'den daha uzun bir dizeyi birleştirir. 8, dolayısıyla

06:42.720 --> 06:46.700
52 verir. 8, bir dize olarak ve bunu döndürür.

06:46.700 --> 06:49.490
Yani, bunu matematiksel bir şekilde değil, bunun yerine

06:49.490 --> 06:50.850
bir dize olarak ele alıyor

06:50.850 --> 06:52.900
ve JavaScript ile bu olabilir.

06:52.900 --> 06:54.037
Şimdi elbette şöyle düşünebilirsiniz:

06:54.037 --> 06:55.427
"Neden böyle bir kod yazayım ki?

06:55.427 --> 06:58.160
"Ben geliştiriciyim, neden böyle bir hata yapayım ki? Belki de bu hatayı yapan siz değilsinizdir.

06:58.160 --> 07:01.230
Belki bu, bir kullanıcı girdisinden alınıyordur

07:01.230 --> 07:04.180
ve kodunuzda bunu dönüştürmeyi unuttuğunuz küçük

07:04.180 --> 07:06.690
bir hata oluşmuştur ya da bir ekipte çalışıyorsunuzdur

07:06.690 --> 07:09.350
ve birlikte çalışan birkaç kod dosyanız vardır

07:09.350 --> 07:14.740
ve başka bir geliştirici böyle bir hata oluşturmuştur.

07:14.740 --> 07:17.270
Bu tür hatalar yapmak imkansız değildir,

07:17.270 --> 07:20.110
ancak bunların izini sürmek zor olabilir.

07:20.110 --> 07:22.340
Burada, elbette, bir şeylerin yanlış gittiği oldukça

07:22.340 --> 07:24.010
açıktır, çünkü temel bir betiğimiz

07:24.010 --> 07:26.400
var, ancak daha büyük bir betikte, burada bir şeylerin

07:26.400 --> 07:28.320
yanlış gittiğini hemen fark etmeyebilirsiniz

07:28.320 --> 07:31.520
ve Typescript bize bu konuda yardımcı olabilir.

07:31.520 --> 07:33.720
Bu fonksiyonda parametrelerimize

07:33.720 --> 07:36.390
tip atamaları ekleyebiliriz.

07:36.390 --> 07:38.820
Typescript'e bu iki parametrenin sayı türünde

07:38.820 --> 07:42.280
olması gerektiğini ve varsayılanın hangisi olduğu umurumda değil

07:42.280 --> 07:45.340
türünde olmaması gerektiğini söyleyebiliriz.

07:45.340 --> 07:47.535
Bunu, bir tür atamak istediğimiz

07:47.535 --> 07:50.300
değerden sonra iki nokta üst üste ekleyerek

07:50.300 --> 07:52.890
yaparız, yani bu durumda parametre adından

07:52.890 --> 07:55.220
sonra türün adı gelir.

07:55.220 --> 07:57.140
Örneğin, number desteklenen adlardan biri olabilir.

07:57.140 --> 08:00.560
Sayının yanı sıra string veya Boolean da vardır,

08:00.560 --> 08:03.480
ancak bunlara geri döneceğiz.

08:03.480 --> 08:05.990
Şu an için sayıya ihtiyacımız var ve buna

08:05.990 --> 08:07.750
sadece ilk parametrede değil,

08:07.750 --> 08:10.530
ikinci parametrede de ihtiyacımız var.

08:10.530 --> 08:12.010
Yani, burada da iki nokta üst

08:12.010 --> 08:16.150
üste ve ardından sayı ekleyebiliriz ve şimdi, Typescript'e söylediğimiz şey,

08:16.150 --> 08:18.367
"Hey, buradaki her iki parametre de sayı türünde

08:18.367 --> 08:22.147
olmalıdır, "farklı türde değerler geçilmesine izin verilmez," ve aslında,

08:22.147 --> 08:25.530
IDE'm zaten burada şikayet ediyor, çünkü Visual Studio Code'un

08:25.530 --> 08:28.360
yerleşik Typescript desteği var, ancak bunu göz ardı

08:28.360 --> 08:34.260
etsek bile, bunu yeniden derlediğimde, tsc uygulamasını yeniden çalıştırarak.

08:34.260 --> 08:34.260
ts,

08:34.260 --> 08:39.193
göreceksiniz, bir hata alıyoruz.

08:40.040 --> 08:41.670
"Argument of type '"5" is not assignable

08:41.670 --> 08:42.697
to parameter of type

08:42.697 --> 08:46.250
'number' şeklinde bir hata alıyoruz ve hatta bize bunun nerede olduğunu

08:46.250 --> 08:48.660
gösteriyor ve bize bir satır numarası veriyor,

08:48.660 --> 08:51.140
sekizinci satır ve temelde bize aynı şeyi gösteriyor,

08:51.140 --> 08:54.430
IDE burada gösteriyor.

08:54.430 --> 08:56.740
Yani, IDE'de gözden kaçırmış olmamız durumunda,

08:56.740 --> 08:58.707
derlemek artık bir hata veriyor ve Typescript

08:58.707 --> 09:01.340
ile ilgili önemli olan şey de bu.

09:01.340 --> 09:03.284
Bu sadece derleme sırasında bize yardımcı olur.

09:03.284 --> 09:06.220
Tarayıcıların yerleşik Typescript desteği olmadığı için

09:06.220 --> 09:10.110
JavaScript'i çalışma zamanında farklı çalışacak şekilde değiştirmez.

09:10.110 --> 09:13.510
Yalnızca geliştirme sırasında, Typescript kodumuzu

09:13.510 --> 09:15.700
JavaScript'e derlemeden önce bize

09:15.700 --> 09:19.310
yardımcı olabilir, ancak orada son derece yararlıdır,

09:19.310 --> 09:21.520
çünkü ekstra bir adım, ekstra bir akıl

09:21.520 --> 09:25.560
sağlığı kontrolü ekler, burada, "Oh, bir hata yaptık.

09:25.560 --> 09:28.407
"İşte, bu bir dize olmamalı, bu bir sayı

09:28.407 --> 09:31.660
olmalı" ve bunu düzeltebiliriz ve iyiyiz.

09:31.660 --> 09:34.210
Typescript'in yaptığı budur.

09:34.210 --> 09:35.670
Geliştirme sırasında size yardımcı olur.

09:35.670 --> 09:37.390
Çalışma zamanı kodunuzu değiştirmez.

09:37.390 --> 09:40.130
Gerçekten de burada, varsayılan ayarlarla bile,

09:40.130 --> 09:42.800
derleme sırasında tespit etmesine rağmen hatamızı

09:42.800 --> 09:44.700
burada derledi ve yanlış sonuca neden

09:44.700 --> 09:47.220
olan bir dosya oluşturdu, çünkü varsayılan

09:47.220 --> 09:50.690
olarak Typescript burada devreye girmiyor.

09:50.690 --> 09:53.560
Daha sonra bunu nasıl yapabileceğinizi öğreneceksiniz,

09:53.560 --> 09:56.300
ancak varsayılan olarak derlemeyi bile engellemez.

09:56.300 --> 09:59.260
Yine de, size bağırıyor ve bu hataya işaret ediyor,

09:59.260 --> 10:04.850
böylece onu düzeltebilirsiniz ve böylece burada bu tür hatalardan kaçınabilirsiniz.

10:04.850 --> 10:07.450
Bu arada, uygulamanız olmadığından

10:07.450 --> 10:09.020
emin olun. js ve app. aynı anda açılır.

10:09.020 --> 10:11.950
Burada IDE'de yinelenen işlev uygulamaları

10:11.950 --> 10:13.470
ile ilgili hatalar alabilirsiniz.

10:13.470 --> 10:15.830
JavaScript dosyasının kapatılması bunu düzeltir.
