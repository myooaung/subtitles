WEBVTT

00:02.130 --> 00:02.963
Narrator: W tym celu

00:02.963 --> 00:05.260
znów wracam do naszego dummy Project Setup, którego

00:05.260 --> 00:06.690
używaliśmy w kółko.

00:06.690 --> 00:08.260
Tam możemy uruchomić NPM starts,

00:08.260 --> 00:10.190
aby przywołać ten serwer deweloperski.

00:10.190 --> 00:13.690
A następnie w nowym oknie terminala z serwerem uruchomionym

00:13.690 --> 00:15.260
w innym oknie terminala,

00:15.260 --> 00:17.419
uruchamiam TSC dash W, aby rozpocząć

00:17.419 --> 00:21.540
mój proces kompilacji TypeScript i utrzymać to w ruchu.

00:21.540 --> 00:23.470
Dzięki temu oczywiście mamy pustą stronę,

00:23.470 --> 00:24.560
bo nic na niej nie ma, ale

00:24.560 --> 00:27.060
teraz możemy pobawić się w pliku TS aplikacji i zacząć

00:27.060 --> 00:29.480
korzystać z generycznych.

00:29.480 --> 00:32.940
I myślę, że najłatwiej jest zrozumieć generics,

00:32.940 --> 00:35.450
jeśli spojrzymy na domyślny typ, który

00:35.450 --> 00:37.450
jest wbudowany w TypeScript,

00:37.450 --> 00:39.610
z którym faktycznie dużo pracowaliśmy,

00:39.610 --> 00:41.890
który okazuje się być generic i to

00:41.890 --> 00:44.410
będzie tablica.

00:44.410 --> 00:46.900
Załóżmy, że mamy tablicę nazwisk.

00:46.900 --> 00:50.370
Powiedzmy, że Max i Manual.

00:50.370 --> 00:51.620
Więc dostajemy tam

00:51.620 --> 00:54.610
dwie nazwy wtedy oczywiście typ stałej

00:54.610 --> 00:57.210
nazwy to tablica łańcuchów.

00:57.210 --> 00:59.610
Teraz właściwie możemy myśleć

00:59.610 --> 01:02.460
o tym, że dwa typy są połączone.

01:02.460 --> 01:05.760
Tak jak możesz mieć obiekt z różnymi właściwościami, gdzie

01:05.760 --> 01:07.700
w każdej właściwości możesz przechowywać

01:07.700 --> 01:09.310
inny typ.

01:09.310 --> 01:13.750
Tablica zawsze po prostu rzecz z różnymi danymi w nim,

01:13.750 --> 01:16.440
w tym przypadku z ciągami w nim.

01:16.440 --> 01:20.230
Więc faktycznie mamy typ tablicowy, po prostu tablicę i jeśli

01:20.230 --> 01:22.770
usunąłbym nazwy tutaj i pociął je, zobaczyłbyś,

01:22.770 --> 01:25.010
że TypeScript wywnioskowałby, że jest

01:25.010 --> 01:29.140
to tablica typu cokolwiek z dowolnymi danymi w niej.

01:29.140 --> 01:32.690
Rzeczywiście TypeScript zna typ tablicy.

01:32.690 --> 01:35.280
Więc moglibyśmy powiedzieć, to tutaj powinno

01:35.280 --> 01:37.600
być tablicą, ale jak widzisz, jeśli określiłem

01:37.600 --> 01:39.900
tak, otrzymujemy błąd, mimo że mogę powiedzieć,

01:39.900 --> 01:43.570
że ten typ tablicy, jak to istnieje do TypeScript.

01:43.570 --> 01:45.870
Widzimy jednak, że jest to typ generyczny

01:45.870 --> 01:48.710
i że wymaga jednego argumentu typu.

01:48.710 --> 01:50.950
A teraz to coś, czego jeszcze nie widzieliśmy.

01:50.950 --> 01:53.870
Nigdy wcześniej nie słyszeliśmy o typach generycznych.

01:53.870 --> 01:55.750
Teraz ta dziwna notacja tutaj,

01:55.750 --> 01:58.120
zawsze, gdy widzisz coś takiego w TypeScript,

01:58.120 --> 02:01.060
masz do czynienia z typem generycznym.

02:01.060 --> 02:05.610
Typ ogólny to typ, który jest w pewien sposób powiązany z innym

02:05.610 --> 02:08.890
typem i jest naprawdę elastyczny w odniesieniu

02:08.890 --> 02:12.920
do tego, jaki dokładnie jest ten inny typ.

02:12.920 --> 02:14.130
Brzmi trudno?

02:14.130 --> 02:16.820
Cóż, wróćmy do tego przykładu z tablicą.

02:16.820 --> 02:19.380
Wiemy, że chcemy tu przechowywać tablicę.

02:19.380 --> 02:22.250
Więc sama tablica może być typem, jest to lista

02:22.250 --> 02:24.610
danych, która sama w sobie już tworzy

02:24.610 --> 02:26.730
typ, można powiedzieć.

02:26.730 --> 02:29.770
Tak samo jak obiekt jest typem samym w sobie, nawet jeśli

02:29.770 --> 02:32.200
nie wiemy jeszcze jakie dane tam trafią.

02:32.200 --> 02:34.490
Tak więc tablica jest typem samym w sobie.

02:34.490 --> 02:38.230
Ale tablica oczywiście przechowuje tam dane

02:38.230 --> 02:39.860
określonego typu.

02:39.860 --> 02:42.690
Teraz sam typ tablicy nie dba o to, jaki typ danych

02:42.690 --> 02:44.810
jest w niej przechowywany.

02:44.810 --> 02:48.150
Typ tablicy nie dba o to, czy przechowujesz listę

02:48.150 --> 02:50.540
łańcuchów, liczb, obiektów czy

02:50.540 --> 02:52.430
danych mieszanych.

02:52.430 --> 02:54.500
Typ tablicy naprawdę nie dba, ale

02:54.500 --> 02:58.640
dba o uzyskanie przynajmniej niektórych informacji, Nawet

02:58.640 --> 03:01.200
jeśli mówisz mu, że nie wiem, ustawiając

03:01.200 --> 03:02.960
to na typ any array.

03:02.960 --> 03:05.870
To lepsze niż nieokreślenie niczego.

03:05.870 --> 03:08.330
Teraz jest to jeden ze sposobów definiowania typu tablicy, typu

03:08.330 --> 03:10.070
danych, które są tam przechowywane, a następnie

03:10.070 --> 03:11.430
nawiasów kwadratowych.

03:11.430 --> 03:14.620
Innym sposobem, który stworzyłby dokładnie ten sam typ, byłoby użycie

03:14.620 --> 03:15.830
tej rzeczy Array, a następnie

03:15.830 --> 03:17.630
tych nawiasów kątowych.

03:17.630 --> 03:20.030
I teraz między tymi nawiasami kątowymi

03:20.030 --> 03:22.340
określasz typ danych, które powinny

03:22.340 --> 03:24.140
trafić do tablicy.

03:24.140 --> 03:26.330
Na przykład ciąg znaków, a to

03:26.330 --> 03:31.330
tutaj jest w 100% to samo, co zdefiniowanie tego typu tutaj.

03:32.030 --> 03:34.950
Oczywiście tutaj można było również użyć typu union, aby

03:34.950 --> 03:37.730
powiedzieć, ta tablica przechowuje ciągi lub liczby

03:37.730 --> 03:40.850
lub użyć dowolnego, jeśli nie chcesz powiedzieć nic o typie

03:40.850 --> 03:42.970
lub jak właśnie mieliśmy to string.

03:42.970 --> 03:44.330
Jest to więc typ generyczny,

03:44.330 --> 03:46.900
typ generyczny wbudowany w TypeScript.

03:46.900 --> 03:50.440
Typ, który jest połączony z innym typem, gdzie chcemy

03:50.440 --> 03:53.980
wiedzieć, który nasz typ, który jest tak do TypeScript

03:53.980 --> 03:56.810
może dać nam lepsze wsparcie.

03:56.810 --> 03:57.910
Ponieważ tutaj na przykład,

03:57.910 --> 04:01.510
jeśli wiemy, że to, co przechowujemy w tym miejscu, będzie ciągiem,

04:01.510 --> 04:04.380
cóż, wtedy wiemy, że ilekroć mam dostęp do elementu

04:04.380 --> 04:06.143
w tej tablicy, mogę zrobić z nim

04:07.100 --> 04:09.410
rzeczy łańcuchowe.

04:09.410 --> 04:12.260
Mogę wywołać wszystkie te metody łańcuchowe na przykład

04:12.260 --> 04:15.280
i TypeScript nie będzie narzekał, ponieważ wie, dobrze,

04:15.280 --> 04:18.220
że ta tablica przechowuje ciągi.

04:18.220 --> 04:20.410
Na tym właśnie polega idea typów generycznych.

04:20.410 --> 04:23.230
Pewien typ w tym przypadku typ tablicowy może

04:23.230 --> 04:26.780
po prostu działać lepiej lub działać w ogóle, jeśli podasz

04:26.780 --> 04:29.040
dodatkową informację o typie danych,

04:29.040 --> 04:33.430
które są dostarczane w tym typie tablicowym i oczywiście typ tablicowy

04:33.430 --> 04:36.590
jest tylko jednym z przykładów.

04:36.590 --> 04:39.840
Kolejnym typem generycznym, który jest wbudowany

04:39.840 --> 04:42.130
w TypeScript jest typ promise.

04:42.130 --> 04:45.470
Teraz obietnice są cechą JavaScript, prawda?

04:45.470 --> 04:46.970
To nie jest cecha TypeScript.

04:46.970 --> 04:49.437
Możesz tworzyć obietnice w JavaScript i

04:49.437 --> 04:52.000
na wypadek, gdybyś nie był pewien, czym są

04:52.000 --> 04:53.870
obietnice, załączony link.

04:53.870 --> 04:58.150
Obietnicę można stworzyć za pomocą new promise.

04:58.150 --> 05:00.640
Ponownie, jest to funkcja konstruktora, klasa

05:00.640 --> 05:03.270
wbudowana w JavaScript i funkcja konstruktora

05:03.270 --> 05:05.870
obietnicy przyjmuje jeden argument, który

05:05.870 --> 05:07.640
sam jest funkcją, która następnie

05:07.640 --> 05:10.650
z kolei otrzyma dwa argumenty ostatecznie funkcję

05:10.650 --> 05:12.580
resolve i reject.

05:12.580 --> 05:15.180
Teraz będą one przekazywane nam automatycznie

05:15.180 --> 05:17.790
przez JavaScript w przeglądarce.

05:17.790 --> 05:22.400
A następnie w obietnicy możemy na przykład ustawić timer, a następnie

05:22.400 --> 05:25.640
w tej funkcji callback tego timera, moglibyśmy rozwiązać

05:25.640 --> 05:28.140
zewnętrzną obietnicę.

05:28.140 --> 05:30.140
Więc tutaj w tej funkcji callback,

05:30.140 --> 05:34.823
moglibyśmy wywołać resolve i powiedzieć, że to jest zrobione.

05:36.500 --> 05:41.020
Teraz, gdy to zrobimy, ta obietnica tutaj tworzy nowy obiekt, obiekt obietnicy,

05:41.020 --> 05:43.860
który jest przechowywany w stałej obietnicy.

05:43.860 --> 05:47.700
Teraz ta stała obietnicy faktycznie ma określony typ.

05:47.700 --> 05:49.470
Jest typu promise i znowu

05:49.470 --> 05:51.130
widzisz te nawiasy kątowe,

05:51.130 --> 05:56.130
ponieważ ta obietnica ostatecznie rozwiąże się na coś.

05:56.480 --> 05:58.930
Teraz tutaj mówi nieznany, ponieważ TypeScript

05:58.930 --> 06:01.470
nie jest w stanie w pełni zrozumieć, że faktycznie

06:01.470 --> 06:03.880
rozwiążemy tutaj ciąg znaków.

06:03.880 --> 06:05.870
Ale dlatego możemy powiedzieć, że jest

06:05.870 --> 06:08.120
to obietnica, która ostatecznie da ciąg znaków

06:08.120 --> 06:11.450
i robimy to, ponownie używając naszego typu generycznego.

06:11.450 --> 06:14.030
Głównym typem jest obietnica, ale obietnica,

06:14.030 --> 06:16.120
podobnie jak tablica, współpracuje

06:16.120 --> 06:18.380
z innymi typami.

06:18.380 --> 06:22.000
Tablica używała innych typów, ponieważ przechowuje w niej dane,

06:22.000 --> 06:23.350
dane pewnych typów, a obietnica

06:23.350 --> 06:25.640
działa razem z innymi typami, ponieważ ostatecznie

06:25.640 --> 06:32.940
zwraca dane jakiegoś typu i w tym przypadku jest to obietnica, która ostatecznie zwraca ciąg znaków.

06:32.940 --> 06:34.470
Teraz znowu, dlaczego jest to przydatne?

06:34.470 --> 06:37.550
Dlaczego ta dodatkowa informacja o typie jest przydatna?

06:37.550 --> 06:40.350
Cóż, gdybyśmy po prostu mieli tutaj typ obietnicy i to nie

06:40.350 --> 06:41.430
byłoby dozwolone, ale

06:41.430 --> 06:44.770
gdybyśmy powiedzieli promise of type anything, co w zasadzie byłoby

06:44.770 --> 06:46.870
takie samo jak of types nie znałoby typów generycznych,

06:46.870 --> 06:48.390
gdyby nie miało żadnych informacji

06:48.390 --> 06:51.280
o tym, co otrzymujemy z powrotem.

06:51.280 --> 06:53.340
No to na tej obietnicy oczywiście możemy

06:53.340 --> 06:55.750
je wykorzystać tak jak wszystkie obietnice

06:55.750 --> 06:57.770
i w końcu dostaniemy jakieś dane, ale

06:57.770 --> 06:59.770
nic o nich nie wiemy.

06:59.770 --> 07:02.500
Nie mogę na przykład wywołać na nim metody ciągów.

07:02.500 --> 07:04.850
Cóż mogę, ponieważ jest to dowolne w tym przypadku,

07:04.850 --> 07:07.590
ale nie dostaję żadnego konkretnego wsparcia TypeScript.

07:07.590 --> 07:11.313
Mogłabym też spróbować na nim rzeczy, które na pewno nie zadziałają.

07:12.170 --> 07:13.800
Na przykład, jeśli odwrócimy to

07:13.800 --> 07:15.220
i zwrócimy liczbę tutaj, nadal

07:15.220 --> 07:17.320
mogę wywołać metodę łańcuchową tutaj, ponieważ

07:17.320 --> 07:19.390
TypeScript nie ma informacji o danych,

07:19.390 --> 07:22.640
które ta obietnica ostatecznie przyniesie.

07:22.640 --> 07:24.070
Teraz z typami generycznymi

07:24.070 --> 07:26.280
przekazujemy te informacje do TypeScript.

07:26.280 --> 07:28.160
Możemy powiedzieć TypeScriptowi,

07:28.160 --> 07:30.240
że ta obietnica ostatecznie da ciąg

07:30.240 --> 07:32.840
lub w tym przypadku liczbę, a następnie TypeScript

07:32.840 --> 07:34.940
może nas ostrzec tutaj.

07:34.940 --> 07:37.390
Jeśli spróbuję to zapisać, da nam

07:37.390 --> 07:40.870
błąd, ponieważ wie, że hej ta obietnica w końcu

07:40.870 --> 07:44.092
da liczbę i można na niej wywołać split.

07:44.092 --> 07:48.010
Otrzymujemy więc lepsze bezpieczeństwo typu z typami generycznymi.

07:48.010 --> 07:50.510
Więc jesteś naprawdę elastyczny w odniesieniu do tego,

07:50.510 --> 07:52.720
co robisz z tymi informacjami typu ogólnego.

07:52.720 --> 07:54.830
Tablica wie, jakie dane przechowuje,

07:54.830 --> 07:57.140
obietnica wie, jakie dane zwraca.

07:57.140 --> 07:59.840
Jeśli zbudujesz własne klasy generyczne lub funkcje,

07:59.840 --> 08:02.140
możesz zrobić coś zupełnie innego niż tam.

08:02.140 --> 08:04.570
Ale w końcu typy generyczne pomagają ci

08:04.570 --> 08:06.970
uzyskać dodatkowe informacje o typie,

08:06.970 --> 08:10.640
jeśli masz bardziej złożoną klasę lub bardziej złożoną funkcję,

08:10.640 --> 08:14.240
która robi coś z danymi, które przychodzą, w sposób, w którym

08:14.240 --> 08:16.020
nie obchodzi, że dane są jednego

08:16.020 --> 08:18.700
konkretnego typu, ale gdzie chcesz przechowywać

08:18.700 --> 08:21.500
informacje o typie z przychodzących danych,

08:21.500 --> 08:24.850
aby uzyskać lepsze wsparcie TypeScript, gdy pracujesz

08:24.850 --> 08:27.590
z typem generycznym.

08:27.590 --> 08:30.450
Więc zawsze, gdy pracujesz z tą obietnicą lub tablicą

08:30.450 --> 08:33.270
danych, to jest to w zasadzie idea generics.

08:33.270 --> 08:36.300
Więc to tutaj, wszystkie zostały zbudowane w generycznych.

08:36.300 --> 08:37.460
Skomentujmy to w ten sposób.

08:37.460 --> 08:40.450
Zbudujmy teraz nasze własne słowo typu generycznego.

08:40.450 --> 08:42.653
Użyjmy naszych własnych typów generycznych.
