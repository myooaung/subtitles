WEBVTT

00:02.340 --> 00:04.100
Narrador: Así que empezamos con los

00:04.100 --> 00:06.670
genéricos y espero que esté claro lo que TypeScript hace

00:06.670 --> 00:10.240
aquí, pasamos alguna información extra a la función de fusión, para que

00:10.240 --> 00:12.130
podamos trabajar de una manera mejor con

00:12.130 --> 00:14.370
el resultado de la función de fusión.

00:14.370 --> 00:16.540
Para eso suelen estar los genéricos.

00:16.540 --> 00:19.890
Le permiten seguir trabajando con sus datos de

00:19.890 --> 00:21.960
forma óptima en TypeScript.

00:21.960 --> 00:23.820
Ahora, en este caso, aquí, sin

00:23.820 --> 00:25.810
embargo, tendríamos un problema

00:25.810 --> 00:28.570
si paso en, digamos sólo un número 30 aquí.

00:28.570 --> 00:30.470
Por supuesto, TypeScript ahora arroja un error,

00:30.470 --> 00:32.010
porque trató de acceder a la edad, pero

00:32.010 --> 00:33.870
acceder al nombre funcionaría.

00:33.870 --> 00:37.100
No obstante, si guardamos eso, compila sin errores, y si imprimo

00:37.100 --> 00:39.710
el objeto fusionado en general, vemos que lo que obtengo

00:39.710 --> 00:41.610
de vuelta es sólo hobbies y nombre en

00:41.610 --> 00:43.910
mi objeto, lo cual tiene sentido porque 30 es

00:43.910 --> 00:46.570
un número, y cuando pasamos eso como segundo argumento

00:46.570 --> 00:48.010
a la asignación de objetos,

00:48.010 --> 00:50.080
lo cual al final estamos haciendo aquí,

00:50.080 --> 00:51.920
bueno, entonces esto simplemente

00:51.920 --> 00:54.590
falla silenciosamente.

00:54.590 --> 00:57.860
JavaScript no lanza un error, no se queja.

00:57.860 --> 01:00.460
Pero claro, tampoco fusiona el 30 en el objeto

01:00.460 --> 01:02.270
recién creado, ya ves que no

01:02.270 --> 01:04.690
hay ningún 30 en este objeto.

01:04.690 --> 01:06.540
Ahora bien, ¿cómo lo haría JavaScript?

01:06.540 --> 01:08.470
Como 30 no es un objeto, una asignación

01:08.470 --> 01:12.150
de objetos sólo es capaz de fusionar diferentes objetos

01:12.150 --> 01:14.090
entre sí.

01:14.090 --> 01:15.410
Entonces, ¿qué es lo que al final queremos salvar?

01:15.410 --> 01:17.600
Bueno, no nos importa el tipo exacto,

01:17.600 --> 01:20.040
no nos importa la estructura exacta del objeto

01:20.040 --> 01:22.980
que estás proporcionando aquí para U y T.

01:22.980 --> 01:26.600
Pero lo que sí nos importa es que ambos parámetros,

01:26.600 --> 01:31.370
tanto el tipo T como el U deben ser cualquier tipo de objeto pero

01:31.370 --> 01:34.420
deben ser un objeto en todo momento.

01:34.420 --> 01:36.830
Y actualmente, no estamos diciendo eso.

01:36.830 --> 01:37.820
Actualmente, sólo decimos

01:37.820 --> 01:40.110
que deben ser de cualquier tipo, me da igual.

01:40.110 --> 01:41.750
Ahora, a menudo, eso no está bien.

01:41.750 --> 01:45.060
Aquí quieres restringir los tipos de T y U, resolver

01:45.060 --> 01:46.683
tus tipos genéricos.

01:47.830 --> 01:51.540
Puede hacerlo con las restricciones de tipo.

01:51.540 --> 01:55.170
Para los tipos genéricos, puede establecer ciertas restricciones

01:55.170 --> 01:58.280
con respecto a los tipos en los que se pueden basar sus tipos

01:58.280 --> 02:01.120
genéricos y lo hace con la palabra clave extendida aquí

02:01.120 --> 02:05.150
en los paréntesis angulados después del tipo que quiere restringir.

02:05.150 --> 02:07.410
Así que aquí podríamos decir extiende

02:07.410 --> 02:09.020
objeto, y con eso estoy diciendo,

02:09.020 --> 02:12.740
el tipo T puede ser cualquier objeto con cualquier estructura,

02:12.740 --> 02:15.340
pero tiene que ser un objeto.

02:15.340 --> 02:17.480
Podemos hacer lo mismo con U.

02:17.480 --> 02:19.040
Y si hago eso, ves que ahora

02:19.040 --> 02:21.820
ya me sale un error aquí en el IDE.

02:21.820 --> 02:23.980
Y si intento guardar eso, también

02:23.980 --> 02:26.150
me da un error en el compilador,

02:26.150 --> 02:28.640
porque el argumento de tipo 30 aquí

02:28.640 --> 02:31.133
no es asignable a tipo objeto.

02:32.080 --> 02:34.480
Así que ese es, por supuesto, el comportamiento que queremos aquí.

02:34.480 --> 02:38.190
Ahora nos vemos obligados a pasar de nuevo un

02:38.190 --> 02:39.940
objeto, vaya, así.

02:39.940 --> 02:41.990
Ahora estamos obligados a pasar esto de nuevo,

02:41.990 --> 02:43.680
y por lo tanto mejoramos esta función porque

02:43.680 --> 02:45.290
ahora realmente funciona.

02:45.290 --> 02:48.980
Y sabemos que la asignación de objetos quiere dos objetos.

02:48.980 --> 02:51.000
Así que al final, queremos garantizar

02:51.000 --> 02:52.820
que obtenemos dos objetos aquí estableciendo

02:52.820 --> 02:56.370
ciertas restricciones en nuestros tipos genéricos.

02:56.370 --> 02:58.630
Y estas limitaciones aquí pueden ser cualquier cosa.

02:58.630 --> 03:01.290
Puedes referirte a objetos, a cadenas, podrías

03:01.290 --> 03:03.730
usar tu propio tipo si lo tuvieras.

03:03.730 --> 03:06.700
También puedes usar tipos de unión aquí si quieres, eres realmente

03:06.700 --> 03:08.470
flexible allí, puedes establecer cualquier

03:08.470 --> 03:10.510
restricción que quieras.

03:10.510 --> 03:12.620
Y, por supuesto, no es necesario restringir todos

03:12.620 --> 03:13.720
los tipos genéricos.

03:13.720 --> 03:16.560
Si sólo quieres limitar la U, puedes hacerlo.

03:16.560 --> 03:19.620
En este ejemplo, sólo tiene sentido restringir ambos porque

03:19.620 --> 03:22.880
la asignación de objetos quiere dos objetos aquí, pero eres

03:22.880 --> 03:24.640
realmente flexible allí.

03:24.640 --> 03:26.620
Sin embargo, es importante tener en cuenta

03:26.620 --> 03:28.440
ese concepto de restricciones, ya

03:28.440 --> 03:30.560
que permite trabajar con tipos genéricos

03:30.560 --> 03:32.640
de una manera más óptima, lo que evita errores

03:32.640 --> 03:34.810
innecesarios o comportamientos extraños

03:34.810 --> 03:37.513
como los que teníamos antes.
