WEBVTT

1
00:00:02.273 --> 00:00:05.100
<v Instructor>We had a look at a lot of decorators,</v>

2
00:00:05.100 --> 00:00:06.190
how you work with them,

3
00:00:06.190 --> 00:00:07.340
how you can configure them,

4
00:00:07.340 --> 00:00:09.940
how you can do stuff with them,

5
00:00:09.940 --> 00:00:11.367
what you can do with them.

6
00:00:11.367 --> 00:00:15.260
This hopefully shows you the complexity but also the power

7
00:00:15.260 --> 00:00:17.340
of decorators and how you can think about them,

8
00:00:17.340 --> 00:00:18.898
how you can use them.

9
00:00:18.898 --> 00:00:22.370
You're not only able to create your own decorators,

10
00:00:22.370 --> 00:00:24.208
there also is a rich ecosystem out there

11
00:00:24.208 --> 00:00:28.590
of packages and frameworks that rely on decorators.

12
00:00:28.590 --> 00:00:30.670
For example, class validator.

13
00:00:30.670 --> 00:00:32.789
If you search for "ts class validator,"

14
00:00:32.789 --> 00:00:35.480
you find a package which basically has

15
00:00:35.480 --> 00:00:37.960
a more elaborate implementation of

16
00:00:37.960 --> 00:00:41.680
our own custom validation logic we worked on.

17
00:00:41.680 --> 00:00:44.140
This package can be added to any project

18
00:00:44.140 --> 00:00:45.960
you are working on, and then you can

19
00:00:45.960 --> 00:00:48.030
simply import a bunch of decorators

20
00:00:48.030 --> 00:00:49.930
or decorator factories, as you can see,

21
00:00:49.930 --> 00:00:51.660
since we execute them here.

22
00:00:51.660 --> 00:00:53.350
Add them to your properties,

23
00:00:53.350 --> 00:00:55.650
with or without some extra configuration,

24
00:00:55.650 --> 00:00:57.530
depending on the validator it is,

25
00:00:57.530 --> 00:00:59.163
and behind the scenes this will

26
00:00:59.163 --> 00:01:01.530
manage such a registry, you could say,

27
00:01:01.530 --> 00:01:03.509
such as configuration object in the end,

28
00:01:03.509 --> 00:01:07.070
store your validator setup for the different properties

29
00:01:07.070 --> 00:01:08.950
in your different classes.

30
00:01:08.950 --> 00:01:11.810
And then, give you a validate method,

31
00:01:11.810 --> 00:01:14.150
which you also import from the package,

32
00:01:14.150 --> 00:01:16.656
which you can execute and pass your object to,

33
00:01:16.656 --> 00:01:19.020
to apply all the validation logic

34
00:01:19.020 --> 00:01:20.540
you set up in the class.

35
00:01:20.540 --> 00:01:22.840
So it's basically doing what we just did,

36
00:01:22.840 --> 00:01:26.000
just with more validators, and with all the

37
00:01:26.000 --> 00:01:27.830
heavy lifting done for you.

38
00:01:27.830 --> 00:01:29.170
But of course it helps to understand

39
00:01:29.170 --> 00:01:30.630
how this generally works,

40
00:01:30.630 --> 00:01:32.370
since we built it on our own here,

41
00:01:32.370 --> 00:01:34.143
in a more naive version.

42
00:01:35.010 --> 00:01:36.490
Now besides this package, of course,

43
00:01:36.490 --> 00:01:38.370
we also have Angular, for example.

44
00:01:38.370 --> 00:01:39.541
Angular is a framework,

45
00:01:39.541 --> 00:01:41.502
which I mentioned earlier already,

46
00:01:41.502 --> 00:01:43.942
which heavily relies on decorators,

47
00:01:43.942 --> 00:01:46.480
like this component decorator,

48
00:01:46.480 --> 00:01:49.214
which allows you to assign

49
00:01:49.214 --> 00:01:51.301
some dynamic HTML code,

50
00:01:51.301 --> 00:01:54.720
which taps into properties of your classes as well,

51
00:01:54.720 --> 00:01:56.780
with a special syntax added by Angular,

52
00:01:56.780 --> 00:01:58.990
to then render some dynamic content

53
00:01:58.990 --> 00:02:00.170
onto the screen.

54
00:02:00.170 --> 00:02:01.780
So here Angular does more than

55
00:02:01.780 --> 00:02:03.360
just offer these decorators,

56
00:02:03.360 --> 00:02:06.250
but the decorators are a core part of Angular.

57
00:02:06.250 --> 00:02:07.280
And last, but not least,

58
00:02:07.280 --> 00:02:10.130
I also want to show you NestJS.

59
00:02:10.130 --> 00:02:13.190
NestJS is a server side JavaScript framework

60
00:02:13.190 --> 00:02:15.487
for Node.js, which also heavily utilizes

61
00:02:15.487 --> 00:02:20.010
typescript, and this also embraces decorators.

62
00:02:20.010 --> 00:02:23.270
There you use decorators to define controllers,

63
00:02:23.270 --> 00:02:26.730
and routes, the methods which users have to use

64
00:02:26.730 --> 00:02:30.400
on their HTTP requests, to trigger certain functions,

65
00:02:30.400 --> 00:02:32.687
and also a lot of other decorators you can use

66
00:02:32.687 --> 00:02:35.660
to extract data from incoming requests,

67
00:02:35.660 --> 00:02:36.890
and so on.

68
00:02:36.890 --> 00:02:39.150
So here this framework also again,

69
00:02:39.150 --> 00:02:41.370
offers all these decorators for you,

70
00:02:41.370 --> 00:02:44.640
so that you can just add them to your properties,

71
00:02:44.640 --> 00:02:46.257
to your methods, to your classes,

72
00:02:46.257 --> 00:02:48.590
and add extra functionality,

73
00:02:48.590 --> 00:02:50.060
which the framework then in turn

74
00:02:50.060 --> 00:02:52.828
also takes into account when it executes your code.

75
00:02:52.828 --> 00:02:55.417
So here again, decorators are used for

76
00:02:55.417 --> 00:02:59.070
metaprogramming to add extra configuration,

77
00:02:59.070 --> 00:03:02.977
extra logic, which then is taken into account by,

78
00:03:02.977 --> 00:03:05.700
in this case, the code off the framework,

79
00:03:05.700 --> 00:03:07.580
which executes your code or

80
00:03:07.580 --> 00:03:09.886
which works together with your code.

81
00:03:09.886 --> 00:03:12.000
And that's it for decorators.

82
00:03:12.000 --> 00:03:14.110
This hopefully gives you a good overview

83
00:03:14.110 --> 00:03:16.090
of what you can do with decorators,

84
00:03:16.090 --> 00:03:17.830
why they can be very helpful,

85
00:03:17.830 --> 00:03:19.563
and how they generally work.

