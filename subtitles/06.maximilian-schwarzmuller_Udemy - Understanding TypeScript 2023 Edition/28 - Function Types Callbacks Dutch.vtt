WEBVTT

00:02.440 --> 00:05.170
Instructeur: Nu we het hebben over callbacks en

00:05.170 --> 00:08.400
functietypes, daar werkt het ongeveer hetzelfde.

00:08.400 --> 00:10.550
Laten we zeggen dat we een nieuwe

00:11.800 --> 00:14.990
functie hebben AddAndHandle, laten we zeggen.

00:14.990 --> 00:18.420
Daar verwachten we twee getallen en dan wil ik

00:19.740 --> 00:22.320
hier ook een callback functie.

00:22.320 --> 00:24.480
Dus een functie die wordt doorgegeven en een argument

00:24.480 --> 00:26.670
is dat iets moet doen met het resultaat, dan zouden

00:26.670 --> 00:29.930
we hier natuurlijk het resultaat kunnen genereren.

00:29.930 --> 00:31.060
Maar niet alleen het retourneren,

00:31.060 --> 00:33.290
maar in plaats daarvan wil ik de callback functie

00:33.290 --> 00:35.670
aanroepen en het resultaat doorgeven.

00:35.670 --> 00:36.990
Daarvoor wil ik heel duidelijk

00:36.990 --> 00:39.270
stellen dat callback een functie moet zijn.

00:39.270 --> 00:42.190
Dus nogmaals, ik gebruik die functiedefinitie

00:42.190 --> 00:45.640
die misschien niets teruggeeft, maar wel een

00:45.640 --> 00:51.280
getal als argument neemt, omdat we het hier een getal doorgeven.

00:51.280 --> 00:52.740
Dus de terugroepfunctie,

00:52.740 --> 00:55.870
de functie die we als parameter aan deze functie doorgeven,

00:55.870 --> 00:58.460
moet een getal accepteren.

00:58.460 --> 01:01.890
Daar beneden roepen we addAndHandle op, geven

01:01.890 --> 01:05.240
10 en 20 door en geven dan een functie door.

01:05.240 --> 01:07.570
Bijvoorbeeld, een anonieme functie hier.

01:07.570 --> 01:09.710
Dus nu, als we de functie aanroepen, is

01:09.710 --> 01:11.470
dit natuurlijk geen functietype,

01:11.470 --> 01:13.620
maar een concrete waarde die we doorgeven

01:13.620 --> 01:15.150
als derde argument.

01:15.150 --> 01:18.870
Dus, dit is nu een anonieme functie die hier wordt gemaakt

01:18.870 --> 01:22.300
en daar weten we dat we een getal krijgen.

01:22.300 --> 01:23.810
Misschien hier resultaat noemen

01:23.810 --> 01:26.110
en dan kunnen we ermee doen wat we willen.

01:26.110 --> 01:27.623
En als je dit nu compileert,

01:28.570 --> 01:31.120
zien we deze log daar beneden, 30, wat het resultaat

01:31.120 --> 01:33.540
is van onze callback functie die we hebben

01:33.540 --> 01:35.600
doorgegeven aan addAndHandle waar

01:35.600 --> 01:38.250
addAndHandle twee getallen combineert en dan

01:38.250 --> 01:39.850
de callback aanroept waar de

01:39.850 --> 01:43.200
callback aan deze voorwaarde moet voldoen.

01:43.200 --> 01:45.870
Het voordeel van het hier definiëren van de callbackfunctie

01:45.870 --> 01:49.490
is dat binnen de functie die we doorgeven een callbacktype is

01:49.490 --> 01:52.240
dat kan afleiden dat het resultaat een getal zal

01:52.240 --> 01:54.000
zijn, en dus kunnen we hier alles

01:54.000 --> 01:56.620
doen met het resultaat.

01:56.620 --> 01:58.090
Wat we zouden kunnen doen met een

01:58.090 --> 02:00.990
getal zonder het type hier expliciet te vermelden, omdat TypeScript

02:00.990 --> 02:03.226
weet dat het resultaat een getal zal zijn, omdat

02:03.226 --> 02:04.970
we heel duidelijk hebben gemaakt dat

02:04.970 --> 02:08.473
de callback één argument krijgt dat een getal is.

02:09.310 --> 02:12.170
Als we dus een tweede argument zouden verwachten in de

02:12.170 --> 02:13.060
callback, zouden

02:13.060 --> 02:15.460
we een fout krijgen, omdat we weten dat de callback

02:15.460 --> 02:18.630
die we verwachten in onze addAndHandle-functie slechts één

02:18.630 --> 02:20.500
argument mag hebben.

02:20.500 --> 02:22.420
Dus als we dan een callback-functie

02:22.420 --> 02:23.950
doorgeven die een tweede argument

02:23.950 --> 02:26.240
neemt, is dat duidelijk een fout.

02:26.240 --> 02:28.250
Het enige wat TypeScript niet oppikt

02:28.250 --> 02:30.280
is als we hier iets teruggeven.

02:30.280 --> 02:33.690
Als een retourresultaat en de callback wel iets teruggeeft, ook

02:33.690 --> 02:34.767
al hebben we duidelijk

02:34.767 --> 02:37.300
gemaakt dat het niets moet teruggeven.

02:37.300 --> 02:41.180
Dit is echter geen fout of een bug in TypeScript.

02:41.180 --> 02:43.150
Het gebeurt eigenlijk expres.

02:43.150 --> 02:46.000
Door hier void te specificeren op ons callback type,

02:46.000 --> 02:49.520
zeggen we in wezen dat we alle resultaten die je hier terugstuurt

02:49.520 --> 02:50.910
zullen negeren.

02:50.910 --> 02:54.030
Dus we zeggen eigenlijk dat we in AddAndHandle, waar we

02:54.030 --> 02:56.020
die terugroepfunctie krijgen, niets

02:56.020 --> 02:58.080
doen met het terugkeertype.

02:58.080 --> 03:00.600
Daarom kun je hier ongestraft iets teruggeven,

03:00.600 --> 03:03.550
maar je weet, omdat het hier duidelijk is gedefinieerd

03:03.550 --> 03:06.850
op het callback type, dat de callback niets zal doen met

03:06.850 --> 03:10.870
de waarde die je hier zou kunnen teruggeven.

03:10.870 --> 03:13.543
Dus die addAndHandle in de functie zal niets

03:13.543 --> 03:15.680
doen met die waarde die je mogelijk

03:15.680 --> 03:17.120
teruggeeft.

03:17.120 --> 03:19.620
En dat is natuurlijk nuttige informatie.

03:19.620 --> 03:21.270
Je zou kunnen verwachten dat

03:21.270 --> 03:25.710
we hier iets doen met de waarde die de callback teruggeeft, en door dit type

03:25.710 --> 03:29.000
hier te specificeren, maken we heel duidelijk dat we

03:29.000 --> 03:31.520
binnen addAndHandle niet geïnteresseerd

03:31.520 --> 03:33.920
zijn in enige retourwaarde.

03:33.920 --> 03:36.410
Dus dit dwingt je niet om een callback door

03:36.410 --> 03:38.260
te geven die niets teruggeeft.

03:38.260 --> 03:40.830
Het vertelt je gewoon dat alles wat je terugstuurt

03:40.830 --> 03:42.200
niet gebruikt zal worden.

03:42.200 --> 03:44.070
Voor de parameters is het natuurlijk anders.

03:44.070 --> 03:45.540
Daar wordt dit afgedwongen

03:45.540 --> 03:48.310
omdat het hier echt van belang is dat je weet of je

03:48.310 --> 03:51.720
een callback doorgeeft die meer parameters verwacht.

03:51.720 --> 03:53.490
Nou, dan krijg je een foutmelding

03:53.490 --> 03:55.350
of je krijgt niet het gewenste resultaat

03:55.350 --> 03:57.740
omdat ik je maar één resultaat geef.

03:57.740 --> 04:01.290
Dus daar kunnen we niet zomaar negeren wat je zou willen, zoals

04:01.290 --> 04:02.840
bij het terugkeertype.

04:02.840 --> 04:05.506
We negeren dat hier voor het doorgeven van iets waar

04:05.506 --> 04:08.750
de addAndHandle functie verantwoordelijk voor is omdat daar

04:08.750 --> 04:10.920
de callback wordt aangeroepen.

04:10.920 --> 04:13.210
Daarom worden parameters afgedwongen en

04:13.210 --> 04:15.060
is TypeScript echt strikt wat betreft

04:15.060 --> 04:17.150
het aantal en het type parameters van

04:17.150 --> 04:19.508
callback-functies en geeft het niet echt

04:19.508 --> 04:21.253
om het terugkeertype.
