WEBVTT

00:02.310 --> 00:03.940
Homme : Donc nous avons deux problèmes,

00:03.940 --> 00:06.500
si on peut les appeler comme ça, à régler.

00:06.500 --> 00:07.820
Je veux maintenant commencer

00:07.820 --> 00:10.960
par le problème des projets qui apparaissent dans les deux boîtes.

00:10.960 --> 00:13.050
Je veux introduire un peu de filtrage

00:13.050 --> 00:15.980
et le meilleur endroit pour filtrer est, bien

00:15.980 --> 00:18.930
sûr, notre fonction d'écoute.

00:18.930 --> 00:22.743
Si nous allons à l'endroit où nous enregistrons notre auditeur,

00:26.000 --> 00:29.170
ici dans la clause de la liste des projets.

00:29.170 --> 00:32.270
Puis, ici, nous avons une liste de projets, non ?

00:32.270 --> 00:36.170
Maintenant, cette liste de projets comprend tous les projets.

00:36.170 --> 00:39.400
Maintenant, à l'intérieur de la clause de liste de projets,

00:39.400 --> 00:43.140
nous ne sommes intéressés que par les projets actifs ou terminés.

00:43.140 --> 00:44.250
Ici, au fait, nous

00:44.250 --> 00:49.103
pourrions aussi théoriquement utiliser notre enum mais, en fait, j'ai besoin

00:50.660 --> 00:53.160
des valeurs concrètes stockées dans l'enum

00:53.160 --> 00:56.440
ici ou dans le type ici et, par conséquent, ici je ne veux

00:56.440 --> 00:57.880
pas toujours utiliser un

00:57.880 --> 00:58.990
enum parce que je veux

00:58.990 --> 01:02.180
montrer les types littéraux de chaîne.

01:02.180 --> 01:06.190
Donc, ce que nous allons faire ici, dans notre fonction d'écoute, c'est

01:06.190 --> 01:08.690
qu'avant de stocker les projets et de les rendre,

01:08.690 --> 01:10.470
nous voulons les filtrer.

01:10.470 --> 01:13.020
Donc, ici nous avons nos projets pertinents,

01:13.020 --> 01:16.660
on pourrait dire, et c'est, bien sûr, les projets filtrés.

01:16.660 --> 01:19.070
La méthode de filtrage est une méthode par défaut

01:19.070 --> 01:21.460
qui existe sur tout tableau en JavaScript.

01:21.460 --> 01:23.690
Cela prend une fonction qui s'exécute ensuite

01:23.690 --> 01:26.820
sur chaque élément dans le tableau des projets et lorsque

01:26.820 --> 01:29.660
cette fonction retourne vrai, nous gardons l'élément

01:29.660 --> 01:30.940
dans un tableau nouvellement

01:30.940 --> 01:35.040
créé qui est ensuite stocké dans les projets pertinents.

01:35.040 --> 01:38.130
Si cette fonction renvoie un résultat faux, nous abandonnons l'élément,

01:38.130 --> 01:39.770
non pas dans la liste originale, mais

01:39.770 --> 01:41.660
dans la nouvelle liste qui est générée et

01:41.660 --> 01:44.230
qui est stockée dans les projets concernés.

01:44.230 --> 01:46.600
Donc, ici, nous devons retourner true ou false selon

01:46.600 --> 01:48.810
que nous voulons garder le projet ou non.

01:48.810 --> 01:52.430
Et pour cela, bien sûr, il suffit de regarder le statut.

01:52.430 --> 01:55.310
Le statut du projet est un enum et nous voulons

01:55.310 --> 01:59.070
vérifier si le statut du projet est égal au statut du projet

01:59.070 --> 02:03.590
actif si nous sommes dans une liste de projets actifs, donc si la

02:03.590 --> 02:05.790
propriété de type est active, ou

02:05.790 --> 02:07.940
si le statut du projet est terminé

02:07.940 --> 02:12.270
si nous sommes dans une liste terminée.

02:12.270 --> 02:15.430
Donc, ici, je vais écrire un véritable corps

02:15.430 --> 02:17.250
de fonction en l'entourant

02:17.250 --> 02:19.110
d'accolades, sans utiliser

02:19.110 --> 02:20.100
le raccourci de

02:20.100 --> 02:23.480
la fonction flèche, puis nous pouvons vérifier,

02:23.480 --> 02:25.540
si ce type est égal à actif, alors

02:26.800 --> 02:31.480
je veux renvoyer le résultat de cette vérification ici, sinon, et

02:31.480 --> 02:34.130
donc, simplement après cette déclaration

02:34.130 --> 02:37.150
if, je veux renvoyer la comparaison à l'état

02:37.150 --> 02:40.160
de projet terminé.

02:40.160 --> 02:42.220
Avec cela, nous obtenons nos projets pertinents

02:42.220 --> 02:43.520
que nous pouvons maintenant stocker

02:43.520 --> 02:45.490
ici, dans les projets assignés.

02:45.490 --> 02:47.070
Voyons maintenant si cela fonctionne.

02:47.070 --> 02:48.053
Si je recharge, et

02:49.310 --> 02:51.570
que nous ajoutons un projet ici, cela fonctionne-t-il

02:51.570 --> 02:52.743
?

02:54.950 --> 02:55.930
Cela fonctionne et,

02:55.930 --> 02:58.050
vous voyez, il n'est ajouté qu'aux projets

02:58.050 --> 03:00.020
actifs, pas aux projets terminés.

03:00.020 --> 03:02.390
Cependant, si j'ajoute un deuxième projet ici, nous

03:02.390 --> 03:04.740
avons toujours cette duplication en cours.

03:04.740 --> 03:08.720
Maintenant, c'est lié à la façon dont nous rendons nos projets.

03:08.720 --> 03:10.520
Dans les projets d'équarrissage,

03:10.520 --> 03:13.430
nous passons toujours en revue tous nos éléments de projet

03:13.430 --> 03:15.090
et les ajoutons à la liste.

03:15.090 --> 03:16.640
Le problème, bien sûr,

03:16.640 --> 03:19.900
c'est que nous avons peut-être déjà un élément

03:19.900 --> 03:21.950
de projet rendu à l'écran.

03:21.950 --> 03:25.020
La meilleure solution serait d'effectuer

03:25.020 --> 03:27.450
une comparaison entre ce qui a

03:27.450 --> 03:30.170
déjà été rendu et ce qui doit l'être,

03:30.170 --> 03:31.730
afin d'éviter un nouveau

03:31.730 --> 03:34.110
rendu inutile.

03:34.110 --> 03:35.760
Cependant, effectuer cette comparaison

03:35.760 --> 03:39.710
en regardant le DOM réel coûte aussi pas mal de performance.

03:39.710 --> 03:43.100
Pour cette application, il est donc parfaitement possible de prendre simplement

03:43.100 --> 03:45.250
notre élément de liste et d'effacer tout son contenu

03:45.250 --> 03:48.720
en donnant à l'HTML interne la valeur d'une chaîne vide, ce qui signifie que nous

03:48.720 --> 03:49.640
nous débarrassons de

03:49.640 --> 03:52.460
tous les éléments de la liste et que nous effectuons un nouveau

03:52.460 --> 03:53.710
rendu.

03:53.710 --> 03:56.350
Cela signifie qu'à chaque fois que nous ajoutons un nouveau

03:56.350 --> 03:58.470
projet, nous rendons tous les projets mais,

03:58.470 --> 04:00.210
pour les besoins de ce projet ici, pour

04:00.210 --> 04:01.670
cette application ici, c'est

04:01.670 --> 04:03.490
absolument parfait.

04:03.490 --> 04:05.410
Donc, maintenant avec ça, si nous sauvegardons

04:05.410 --> 04:06.987
ça, faisons un autre essai.

04:06.987 --> 04:10.540
"Est-ce que ça marche ? "est le premier projet et maintenant

04:10.540 --> 04:12.960
si j'ajoute un autre projet ici, vous voyez,

04:12.960 --> 04:14.530
il est ajouté mais l'autre

04:14.530 --> 04:17.453
projet n'est pas ajouté à nouveau.

04:18.430 --> 04:21.870
Oups et, maintenant, ici j'ai (marmonne) une erreur parce que la description

04:21.870 --> 04:23.540
n'était pas assez longue.

04:23.540 --> 04:26.230
Donc, tout cela fonctionne maintenant, comme vous pouvez

04:26.230 --> 04:28.150
le voir, et nous rendons ces projets de

04:28.150 --> 04:30.090
la manière dont ils doivent être rendus,

04:30.090 --> 04:32.170
ce qui, bien sûr, est correct.

04:32.170 --> 04:35.050
Et, avec ça, l'application ne semble pas trop mal.

04:35.050 --> 04:36.890
La seule chose qui manque est une

04:36.890 --> 04:39.550
fonctionnalité de glisser-déposer ou un moyen

04:39.550 --> 04:44.040
de faire passer des projets de cette première liste à la seconde.

04:44.040 --> 04:45.180
Nous ne produisons pas non plus vraiment

04:45.180 --> 04:46.930
les autres informations que nous avons obtenues,

04:46.930 --> 04:48.900
la description et le nombre de personnes.

04:48.900 --> 04:50.750
Donc, ce n'est pas génial non plus.

04:50.750 --> 04:54.980
Et, nous avons aussi un peu de duplication de code lorsque nous

04:54.980 --> 04:57.620
regardons la liste de projet à cette clause

04:57.620 --> 04:58.910
ici et à la clause d'entrée

04:58.910 --> 05:01.000
de projet.

05:01.000 --> 05:04.270
Dans les deux cas, nous avons un élément de modèle, un élément hôte et un élément

05:04.270 --> 05:06.970
et nous avons une méthode d'attachement et ainsi de suite.

05:06.970 --> 05:09.180
Donc, je veux améliorer le code ici et réutiliser

05:09.180 --> 05:11.800
une partie du code en utilisant l'héritage et en utilisant

05:11.800 --> 05:14.480
une clause de base et, ensuite, je veux aussi créer

05:14.480 --> 05:16.850
une clause dédiée pour chaque élément de projet

05:16.850 --> 05:18.580
où nous avons juste à instancier

05:18.580 --> 05:20.340
cette clause d'élément de projet

05:20.340 --> 05:22.200
à l'intérieur de la liste de projet

05:22.200 --> 05:23.725
au lieu d'ajouter un élément

05:23.725 --> 05:27.050
de liste manuellement, comme ceci et ensuite à l'intérieur de

05:27.050 --> 05:30.700
cette clause d'élément de projet 'à créer', cette partie d'ajout devrait

05:30.700 --> 05:34.540
se produire et ensuite je veux aussi sortir plus d'informations sur l'élément

05:34.540 --> 05:40.540
de projet, y compris sa description et le nombre de personnes assignées.

05:40.540 --> 05:42.080
Il reste donc du travail à

05:42.080 --> 05:44.520
faire et, avant de travailler sur l'élément

05:44.520 --> 05:47.120
de projet sous la forme que je souhaite, assurons-nous

05:47.120 --> 05:48.660
d'abord d'ajouter de l'héritage

05:48.660 --> 05:53.660
pour rendre notre liste de projets et notre entrée de projet, ou certaines parties

05:53.800 --> 05:57.693
de celle-ci, plus réutilisables.
