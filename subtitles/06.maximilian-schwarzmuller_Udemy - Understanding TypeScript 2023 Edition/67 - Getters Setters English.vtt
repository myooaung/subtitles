WEBVTT

1
00:00:02.200 --> 00:00:04.920
<v Speaker>So that's classes, properties,</v>

2
00:00:04.920 --> 00:00:07.510
and inheritance with Typescript.

3
00:00:07.510 --> 00:00:08.343
And as I mentioned,

4
00:00:08.343 --> 00:00:10.260
these features although generally

5
00:00:10.260 --> 00:00:12.490
are supported in Javascript,

6
00:00:12.490 --> 00:00:14.230
in modern JavaScript,

7
00:00:14.230 --> 00:00:16.940
of course with the exception of type assignments,

8
00:00:16.940 --> 00:00:21.060
and also with the exception of protected private public.

9
00:00:21.060 --> 00:00:24.770
These keywords are really only available in Typescript.

10
00:00:24.770 --> 00:00:28.560
Now it's not all what you can do with classes though.

11
00:00:28.560 --> 00:00:29.940
Whenever need feature,

12
00:00:29.940 --> 00:00:32.840
which you also have in vanilla JavaScript,

13
00:00:32.840 --> 00:00:35.670
in which is also supported in Typescript,

14
00:00:35.670 --> 00:00:38.610
are getters and setters.

15
00:00:38.610 --> 00:00:42.050
Now let's see that here on the accounting department

16
00:00:42.050 --> 00:00:43.390
for example,

17
00:00:43.390 --> 00:00:47.450
let's say we have a last report, property.

18
00:00:47.450 --> 00:00:51.630
Which is a private property, and it's a type string,

19
00:00:51.630 --> 00:00:53.310
so we have that.

20
00:00:53.310 --> 00:00:56.480
And then here we initialize this,

21
00:00:56.480 --> 00:01:01.480
to be our reports property orders argument

22
00:01:02.270 --> 00:01:04.880
we're getting here and they're the first value.

23
00:01:04.880 --> 00:01:07.877
Which of course is basically undefined if we pass in

24
00:01:07.877 --> 00:01:09.890
and empty report array.

25
00:01:09.890 --> 00:01:14.680
Now when we add a report, then I wanna set this last report,

26
00:01:14.680 --> 00:01:17.010
equal to text.

27
00:01:17.010 --> 00:01:20.440
Which is what we add to our reports array.

28
00:01:20.440 --> 00:01:23.890
Now last report is private,

29
00:01:23.890 --> 00:01:26.250
so we can access it from inside this method,

30
00:01:26.250 --> 00:01:28.590
but we won't be able to access it from outside

31
00:01:28.590 --> 00:01:30.240
with the dot notation.

32
00:01:30.240 --> 00:01:33.440
Now we can add a getter, to still make it accessible.

33
00:01:33.440 --> 00:01:36.020
A getter is basically a property,

34
00:01:36.020 --> 00:01:38.670
where you execute a function or method,

35
00:01:38.670 --> 00:01:40.910
when you retrieve a value

36
00:01:40.910 --> 00:01:42.380
and that allows you as a developer

37
00:01:42.380 --> 00:01:44.460
to add more complex logic.

38
00:01:44.460 --> 00:01:47.560
Here, you create a getter by using the get keyword,

39
00:01:47.560 --> 00:01:49.250
and then any name of your choice.

40
00:01:49.250 --> 00:01:51.810
Typically closely related to the property

41
00:01:51.810 --> 00:01:54.180
you're trying to control the access to.

42
00:01:54.180 --> 00:01:58.180
For example here we could name it most recent report.

43
00:01:58.180 --> 00:01:59.340
Anything like that.

44
00:01:59.340 --> 00:02:01.630
Now important this is defined like a method.

45
00:02:01.630 --> 00:02:04.260
So you add parenthesis and then curly braces.

46
00:02:04.260 --> 00:02:07.250
And now in here, you have to return something,

47
00:02:07.250 --> 00:02:11.990
that's important a getter method, has to return something.

48
00:02:11.990 --> 00:02:14.610
So you could return this last report,

49
00:02:14.610 --> 00:02:16.660
and then we kind of encapsulate this,

50
00:02:16.660 --> 00:02:19.570
because this is publicly accessible now.

51
00:02:19.570 --> 00:02:22.720
But often you want to have more complex logic here.

52
00:02:22.720 --> 00:02:26.240
So here we could check if we have a value here,

53
00:02:26.240 --> 00:02:27.600
so if this is truth.

54
00:02:27.600 --> 00:02:28.960
If it's not undefined,

55
00:02:28.960 --> 00:02:31.520
then we want to return last report,

56
00:02:31.520 --> 00:02:34.440
otherwise we might want to return some different logic,

57
00:02:34.440 --> 00:02:37.850
for example let's say otherwise we throw an error message

58
00:02:37.850 --> 00:02:42.650
with throw new error, no reports found.

59
00:02:42.650 --> 00:02:46.650
So now we added more logic, more complex logic,

60
00:02:46.650 --> 00:02:49.200
to this property and when we want to retrieve it,

61
00:02:49.200 --> 00:02:51.500
we can't directly retrieve this property through

62
00:02:51.500 --> 00:02:55.290
the dot notation, but we can use this as a property

63
00:02:55.290 --> 00:02:57.240
to the end run this logic.

64
00:02:57.240 --> 00:02:58.810
So how would this work?

65
00:02:58.810 --> 00:03:02.170
Well down there, where I create my Accounting department.

66
00:03:02.170 --> 00:03:07.120
Before I add my report, if I tried to Console log,

67
00:03:07.120 --> 00:03:08.693
accounting.mostrecentreport,

68
00:03:09.630 --> 00:03:11.010
and now important.

69
00:03:11.010 --> 00:03:13.902
Oops, accounting.mostrecentreport.

70
00:03:13.902 --> 00:03:16.890
And now important you access this as a property.

71
00:03:16.890 --> 00:03:18.690
So no parenthesis here.

72
00:03:18.690 --> 00:03:20.570
You don't execute this as a method.

73
00:03:20.570 --> 00:03:23.030
You just access it like a normal property,

74
00:03:23.030 --> 00:03:24.460
and behind-the-scenes,

75
00:03:24.460 --> 00:03:27.890
this will execute this method up there.

76
00:03:27.890 --> 00:03:31.670
So if I tried this now before we added our report,

77
00:03:31.670 --> 00:03:33.940
We'll see that this rebuilt without errors,

78
00:03:33.940 --> 00:03:35.440
recompiled without errors,

79
00:03:35.440 --> 00:03:38.550
but of course here an error is thrown it's our

80
00:03:38.550 --> 00:03:40.820
custom no report found error,

81
00:03:40.820 --> 00:03:42.820
because no report was added yet,

82
00:03:42.820 --> 00:03:45.370
and since using this as a getter,

83
00:03:45.370 --> 00:03:48.310
accesses this method and executes it.

84
00:03:48.310 --> 00:03:51.560
If we have no report we don't make it to this IF check,

85
00:03:51.560 --> 00:03:52.830
or into this IF statement,

86
00:03:52.830 --> 00:03:55.693
and therefore this line here, kicks in.

87
00:03:56.590 --> 00:04:00.250
As an alternative if we would move that down,

88
00:04:00.250 --> 00:04:02.210
after we added a report,

89
00:04:02.210 --> 00:04:04.100
then of course we can save that,

90
00:04:04.100 --> 00:04:05.730
and we no longer get an error,

91
00:04:05.730 --> 00:04:08.400
but instead we output this last report.

92
00:04:08.400 --> 00:04:09.750
So that's a getter.

93
00:04:09.750 --> 00:04:12.190
And you can also add a setter.

94
00:04:12.190 --> 00:04:14.550
A setter is added almost in the same way.

95
00:04:14.550 --> 00:04:16.290
You use the set keyword,

96
00:04:16.290 --> 00:04:18.630
and then again any name of your choice.

97
00:04:18.630 --> 00:04:21.940
typically a name related to the property

98
00:04:21.940 --> 00:04:22.870
which should be set.

99
00:04:22.870 --> 00:04:25.570
So here I will reuse most recent report.

100
00:04:25.570 --> 00:04:27.840
So that we can use this both to read a value

101
00:04:27.840 --> 00:04:29.150
and to set a value.

102
00:04:29.150 --> 00:04:30.090
And then again,

103
00:04:30.090 --> 00:04:31.850
you defined this like a method.

104
00:04:31.850 --> 00:04:34.850
But now, this needs to take an argument.

105
00:04:34.850 --> 00:04:38.630
The value which the user would have passed in.

106
00:04:38.630 --> 00:04:40.940
In here there should be a string value,

107
00:04:40.940 --> 00:04:44.110
and now in here you can run any logic you want

108
00:04:44.110 --> 00:04:46.160
to store this.

109
00:04:46.160 --> 00:04:48.530
Now here since were passing in a value for

110
00:04:48.530 --> 00:04:51.890
the most recent report, I in the end want to execute

111
00:04:51.890 --> 00:04:53.080
add report.

112
00:04:53.080 --> 00:04:55.370
So here a setter could simply be an alternative

113
00:04:55.370 --> 00:04:57.140
to the add report method.

114
00:04:57.140 --> 00:05:01.280
So in here we can access this add report.

115
00:05:01.280 --> 00:05:03.760
This is required since we're inside of the class.

116
00:05:03.760 --> 00:05:07.280
We refer to the class, and then to this class method here.

117
00:05:07.280 --> 00:05:10.380
And now we can just forward value here.

118
00:05:10.380 --> 00:05:12.310
Now we could add a more complex logic,

119
00:05:12.310 --> 00:05:16.130
and also check if value is maybe not defined if it's false,

120
00:05:16.130 --> 00:05:19.810
and then just return or throw a new you error,

121
00:05:19.810 --> 00:05:24.020
where we say please pass in a valid value.

122
00:05:24.020 --> 00:05:26.140
That is something we could also do.

123
00:05:26.140 --> 00:05:29.010
And now we're using a setter here as well.

124
00:05:29.010 --> 00:05:31.330
With that added we can test it.

125
00:05:31.330 --> 00:05:33.193
Down there, I could add

126
00:05:35.400 --> 00:05:36.570
most recent report.

127
00:05:36.570 --> 00:05:38.780
I could access this on accounting,

128
00:05:38.780 --> 00:05:40.770
and just like this we would read from it,

129
00:05:40.770 --> 00:05:42.300
but now by adding an equal sign,

130
00:05:42.300 --> 00:05:44.520
we're trying to set a value to that,

131
00:05:44.520 --> 00:05:47.150
and that will trigger this setter method.

132
00:05:47.150 --> 00:05:50.090
Again just before we don't execute it as a method,

133
00:05:50.090 --> 00:05:52.383
but simply access it like a property.

134
00:05:53.220 --> 00:05:56.030
Now here if I pass in an empty string,

135
00:05:56.030 --> 00:05:58.770
then we technically do pass in a string,

136
00:05:58.770 --> 00:06:02.760
but an empty string will be treated as false, see here.

137
00:06:02.760 --> 00:06:04.950
And therefore, we should now get an error.

138
00:06:04.950 --> 00:06:07.450
So if I save this line of code,

139
00:06:07.450 --> 00:06:09.850
if I save the code with this line of code added,

140
00:06:11.120 --> 00:06:14.530
we did get this error please pass in a valid value.

141
00:06:14.530 --> 00:06:17.010
If I do pass in a valid value though,

142
00:06:17.010 --> 00:06:22.010
if I say year-end report here for example,

143
00:06:22.250 --> 00:06:23.900
and I now save this.

144
00:06:23.900 --> 00:06:27.210
Now you will see this all works and year-end report

145
00:06:27.210 --> 00:06:29.620
is part of our reports list.

146
00:06:29.620 --> 00:06:31.150
So these are getters and setters,

147
00:06:31.150 --> 00:06:33.620
which can be great for encapsulating logic,

148
00:06:33.620 --> 00:06:35.390
and for adding extra logic,

149
00:06:35.390 --> 00:06:38.050
that should run when you try to read a property,

150
00:06:38.050 --> 00:06:40.243
or when you try to set a property.

