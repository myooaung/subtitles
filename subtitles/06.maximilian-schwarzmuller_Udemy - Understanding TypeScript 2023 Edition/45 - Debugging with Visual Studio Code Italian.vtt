WEBVTT

00:02.170 --> 00:03.003
Istruttore: Ora che

00:03.003 --> 00:04.760
abbiamo un progetto configurato correttamente,

00:04.760 --> 00:08.130
approfondiamo un po' come si può eseguire il debug del progetto o come si può

00:08.130 --> 00:10.500
avere un ottimo flusso di sviluppo.

00:10.500 --> 00:13.560
All'inizio di questo corso vi mostro la mia configurazione

00:13.560 --> 00:14.575
di base dell'IDE.

00:14.575 --> 00:17.750
Assicuratevi di aver installato le estensioni giuste.

00:17.750 --> 00:22.750
Per quanto riguarda TypeScript, si tratta di ESLint, che può aiutarvi

00:22.980 --> 00:26.410
con il linting del vostro codice TypeScript.

00:26.410 --> 00:29.310
Quindi, per migliorare la qualità del codice, potrebbe

00:29.310 --> 00:31.620
essere necessaria una configurazione aggiuntiva

00:31.620 --> 00:33.900
affinché ESLint abbia effetto.

00:33.900 --> 00:36.310
Può aiutarvi in progetti più avanzati,

00:37.220 --> 00:38.570
ma è ancora più interessante

00:38.570 --> 00:40.818
usare Prettier per formattare automaticamente

00:40.818 --> 00:45.770
il codice e avere un codice ben formattato e potreste provare Debugger

00:45.770 --> 00:49.870
for Chrome, che vi permette di eseguire il debug dei vostri

00:49.870 --> 00:53.140
file TypeScript anche dall'interno di VS Code

00:53.140 --> 00:55.810
attraverso Chrome, ma senza usare i Chrome

00:55.810 --> 00:59.440
Dev Tools.

00:59.440 --> 01:01.820
Naturalmente, potete usare anche questi come avete

01:01.820 --> 01:02.653
imparato.

01:02.653 --> 01:05.154
Se si abilita sourceMaps, cosa che ovviamente

01:05.154 --> 01:07.160
si può sempre fare, si ottengono anche

01:07.160 --> 01:09.240
questi file tradotti, il che è molto

01:09.240 --> 01:10.429
bello.

01:10.429 --> 01:14.170
Ma è anche possibile utilizzare VS Code.

01:14.170 --> 01:15.960
È possibile inserire punti di

01:15.960 --> 01:17.340
interruzione qui, diciamo

01:17.340 --> 01:19.842
nel clickHandler e ora per lanciare i file

01:19.842 --> 01:24.842
attraverso VS Code, è necessario abilitare anche sourceMaps, ma saremo comunque

01:26.100 --> 01:28.690
in grado di utilizzare VS Code invece dei Dev

01:28.690 --> 01:30.950
Tools del browser.

01:30.950 --> 01:34.570
Quindi attivate sourceMaps, posizionate il punto

01:34.570 --> 01:38.930
di interruzione e poi andate su Debug, Avvia il debug.

01:38.930 --> 01:40.320
La prima volta che lo si esegue,

01:40.320 --> 01:42.170
dovrebbe essere richiesto l'ambiente

01:42.170 --> 01:45.350
e, con l'estensione Debugger for Chrome installata, si dovrebbe

01:45.350 --> 01:47.850
poter scegliere Chrome.

01:47.850 --> 01:49.960
Ora si passa a un laucnh. json, dove si configura

01:49.960 --> 01:53.200
il modo in cui deve essere lanciato e si deve puntare a localhost:3000,

01:53.200 --> 01:56.740
perché è lì che è in esecuzione il nostro server di sviluppo e,

01:56.740 --> 01:59.330
naturalmente, quel processo, quindi il processo

01:59.330 --> 02:04.220
di avvio di npm, dovrebbe essere attivo e funzionante.

02:04.220 --> 02:06.910
Per puntare a localhost:3000 e come webRoot,

02:06.910 --> 02:09.740
si può lasciare questo segnaposto qui, il che significa

02:09.740 --> 02:11.890
che si presume che la cartella del progetto

02:11.890 --> 02:13.780
sia l'host dei file, il che è vero;

02:13.780 --> 02:17.120
ora compiliamo il codice in modo che vengano generate anche

02:17.120 --> 02:19.780
le sourceMaps, dopo aver impostato la configurazione

02:19.780 --> 02:22.470
sourceMaps su true, in modo da averle nel codice

02:22.470 --> 02:25.290
JavaScript.

02:25.290 --> 02:26.870
Quindi con il punto di interruzione aggiunto

02:26.870 --> 02:28.400
qui e il lancio. json configurato,

02:28.400 --> 02:30.400
eseguiamo il debug qui.

02:30.400 --> 02:32.140
Avviate ora il debug vero e proprio

02:32.140 --> 02:34.830
e si aprirà automaticamente una nuova scheda.

02:34.830 --> 02:36.020
Questa scheda viene chiusa

02:36.020 --> 02:38.730
ogni volta che si chiude il processo di debug o se si

02:38.730 --> 02:41.940
chiude la scheda, il processo di debug viene chiuso.

02:41.940 --> 02:44.590
Quindi, ora si entra in questa vista di debug in VS

02:44.590 --> 02:46.790
Code, dove si possono tracciare le variabili,

02:46.790 --> 02:48.230
osservare certe espressioni

02:48.230 --> 02:50.120
e vedere lo stack di chiamate corrente

02:50.120 --> 02:51.910
e se ora si fa clic su Click Me, si dovrebbe

02:51.910 --> 02:54.120
essere riportati nell'editor e l'esecuzione

02:54.120 --> 02:56.590
del codice si ferma al punto di interruzione nel

02:56.590 --> 03:01.410
file TypeScript e ora si può camminare attraverso il file, ispezionare i valori locali per

03:01.410 --> 03:04.540
questa parola chiave o per la variabile message, per esempio,

03:04.540 --> 03:07.120
le variabili a livello di script che si potrebbero

03:07.120 --> 03:09.750
avere e le variabili globali che hanno accesso agli

03:09.750 --> 03:13.320
oggetti globali.

03:13.320 --> 03:15.560
Si possono osservare alcune

03:15.560 --> 03:19.290
espressioni come messaggio + punti esclamativi

03:19.290 --> 03:22.690
multipli e, se si vuole, si può sempre tenere

03:22.690 --> 03:26.180
traccia del valore che si trova qui in questa

03:26.180 --> 03:27.483
finestra.

03:27.483 --> 03:30.480
Si può vedere lo stack delle chiamate di funzione correnti,

03:30.480 --> 03:33.010
per esempio, che si verificano nel clickHandler

03:33.010 --> 03:34.710
e ora si può scorrere il codice con

03:34.710 --> 03:37.590
questi controlli per passare al passo successivo, saltando

03:37.590 --> 03:39.800
la chiamata di funzione successiva, entrando

03:39.800 --> 03:41.500
nella chiamata di funzione o uscendo

03:41.500 --> 03:43.827
dalla chiamata di funzione corrente e lo stack

03:43.827 --> 03:46.710
delle chiamate, naturalmente, si regolerà in base a ciò

03:46.710 --> 03:49.280
e con ciò, si può ignorare questa cosa del browser

03:49.280 --> 03:51.920
qui, con ciò, si può sempre riprendere l'esecuzione

03:51.920 --> 03:56.210
del codice facendo clic sul pulsante play e mettere in pausa solo quando si raggiunge

03:56.210 --> 04:00.290
il punto di interruzione la volta successiva.

04:00.290 --> 04:02.080
Ecco come è possibile eseguire il debug del codice.

04:02.080 --> 04:04.050
È possibile rimuovere un punto di interruzione facendo clic su di esso.

04:04.050 --> 04:05.910
Ecco come è possibile eseguire il debug

04:05.910 --> 04:07.310
del codice dall'interno di

04:07.310 --> 04:09.728
VS Code con l'aiuto degli strumenti di debug integrati,

04:09.728 --> 04:12.450
dell'estensione Chrome Debugger, della configurazione

04:12.450 --> 04:15.470
derivata e delle soureMaps impostate nella configurazione

04:15.470 --> 04:17.743
di TypeScript.
