WEBVTT

00:02.060 --> 00:06.410
教师：Typescript为JavaScript提供了许多类型｡ 

00:06.410 --> 00:10.100
JavaScript本身也知道一些数据类型, 我会在本模块中再讲这一点,

00:10.100 --> 00:21.110
但Typescript添加了更多得类型, 在本课程中, 您还会学到, Typescript还允许您编写自己得类型.

00:21.110 --> 00:26.250
现在, 让我们从一些核心类型开始, JavaScript已经知道哪些类型,

00:26.250 --> 00:28.289
Typescript也支持哪些类型,

00:28.289 --> 00:36.800
我们还将看看JavaScript（知道类型）和Typescript（使用类型）之间的区别｡

00:36.800 --> 00:41.740
我们在JavaScript和Typescript中使用的核心类型之一是数字类型｡

00:41.740 --> 00:45.220
现在, 在JavaScript中, Typescript也是如此,

00:45.220 --> 00:47.290
只有一种数字类型｡

00:47.290 --> 00:50.750
整数或浮点数没有特殊类型｡ 

00:50.750 --> 00:55.520
相反, 这里的这些值都是数字｡ 

00:55.520 --> 00:58.180
一个是没有小数位的数字｡ 

00:58.180 --> 01:01.640
5. 3显然是带小数位的值,

01:01.640 --> 01:04.532
所有这些值都是数字类型｡

01:04.532 --> 01:10.480
其他编程语言有特殊的整数类型和浮点或双精度类型｡

01:10.480 --> 01:11.980
JavaScript没有,

01:11.980 --> 01:14.120
Typescript也没有｡

01:14.120 --> 01:16.070
我们有数字类型, 这是JavaScript中的一种类型,

01:16.070 --> 01:19.810
也是Typescript中的一种类型｡

01:19.810 --> 01:26.370
我们还有字符串数据类型, 也就是文本, 你可以用以下三种方法之一定义它,

01:26.370 --> 01:28.285
用单引号, 用双引号,

01:28.285 --> 01:30.950
或者用反引号｡

01:30.950 --> 01:38.640
最后一个反勾符号是一种特殊的语法, 在现代JavaScript和Typescript中都有提供,

01:38.640 --> 01:42.440
它允许我们编写所谓的模板文字, 这是一种普通的字符串,

01:42.440 --> 01:47.520
你可以动态地向其中注入一些数据｡

01:47.520 --> 01:49.240
因此, 字符串只是文本,

01:49.240 --> 01:53.000
JavaScript知道字符串值类型｡

01:53.000 --> 01:55.000
Typescript也是如此｡ 

01:55.000 --> 02:02.250
最后但并非最不重要的是, JavaScript知道并且Typescript也支持的核心数据类型之一是Boolean数据类型｡

02:02.250 --> 02:03.810
这是真还是假,

02:03.810 --> 02:08.920
这在编程中非常重要, 尤其是在使用IF语句时｡

02:08.920 --> 02:10.970
这里, 我们得到了这两个值,

02:10.970 --> 02:13.690
这很重要, 因为在JavaScript中,

02:13.690 --> 02:17.520
你可能也知道真值和假值的概念, 例如零,

02:17.520 --> 02:22.190
数字零, 是一个假值｡

02:22.190 --> 02:25.510
如果您在IF条件中使用它, 它会被视为false｡ 

02:25.510 --> 02:28.560
布尔数据类型只知道这两个值, true或false,

02:28.560 --> 02:33.160
这不仅是Typescript的情况, 也是JavaScript的情况｡

02:33.160 --> 02:35.532
你应该知道这个真假的概念,

02:35.532 --> 02:38.280
它与数据类型无关｡

02:38.280 --> 02:40.840
这是幕后工作｡ 

02:40.840 --> 02:43.030
JavaScript确实添加了运行时,

02:43.030 --> 02:46.510
当它看到某些值和IF条件时｡

02:46.510 --> 02:50.060
因此, 对于数字､ 字符串和布尔值, 我们得到了几种核心数据类型｡

02:50.060 --> 02:51.450
当然, 不是所有的, 我们也有对象等等,

02:51.450 --> 02:54.617
但是让我们集中在这些类型上, 看看Typescript对它们做了什么,

02:54.617 --> 03:00.930
或者在Typescript的帮助下, 我们能对它们做什么｡

03:00.930 --> 03:02.620
为此, 我回到了项目, 我们在第一个课程模块中看到过,

03:02.620 --> 03:24.890
在那里我向大家展示了现在需要做的所有事情, 就是在终端中运行npm start, 将其导航到这个项目文件夹, 以启动这个实时开发服务器, 每当我们更改内容时, 它就会重新加载｡ 在这里, 我在浏览器的新选项卡中打开了这个localhost：3000地址｡

03:24.890 --> 03:26.070
正确的知道, 我得到一个错误,

03:26.070 --> 03:28.300
因为我没有应用程序托盘作为文件, 还没有.

03:28.300 --> 03:30.380
当然, 你会发现这个开始的项目, 都是这个讲座的附件,

03:30.380 --> 03:32.280
会得到一个应用程序托盘, 比如file,

03:32.280 --> 03:34.400
我们试着在这里导入, 在我们的索引html文件中,

03:34.400 --> 03:42.050
一旦我们编译了app｡

03:42.050 --> 03:42.050
ts从Typescript转换为JavaScript,

03:42.050 --> 03:51.117
我们可以在终端的一个新标签页中执行此操作, 这样, 我们只需运行tsc应用程序, 就可以保持此进程运行并打开一个新标签页｡

03:51.117 --> 03:51.117
它会编译Typescript文件并生成一个JavaScript文件,

03:53.920 --> 04:05.520
一旦生成, 我们就可以重新加载这个页面, 这样我们就有时间开始了...

04:05.520 --> 04:05.520
输出｡ 

04:05.520 --> 04:08.000
现在我们有了这样的设置, 我们可以编写一些Typescript代码,

04:08.000 --> 04:10.620
然后将其编译为JavaScript代码,

04:10.620 --> 04:14.650
看看它能做什么｡

04:14.650 --> 04:17.000
现在, 在Typescript文件中,

04:17.000 --> 04:18.870
我将删除其中的内容, 因为现在,

04:18.870 --> 04:27.230
我想深入了解这些核心数据类型, 我刚才在幻灯片上向大家展示了这些类型, 以便大家了解如何在Typescript中使用它们｡

04:27.230 --> 04:29.430
现在, 让我们从非常非常简单的开始｡ 

04:29.430 --> 04:32.240
比如说, 我们有一个新的函数add, 我们需要两个数字,

04:32.240 --> 04:34.990
n1和add 2, 然后返回n1加上n2,

04:34.990 --> 04:42.370
就像这样, 非常简单的函数, 没有任何类似于Typescript的东西｡

04:42.370 --> 04:46.080
现在, 我们有两个数字要处理｡ 

04:46.080 --> 04:49.800
这可能是数字1, 比如说, 是5, 也可能是数字2,

04:49.800 --> 04:57.060
可能是2｡ 8, 随便你, 这里有两个数字｡

04:57.060 --> 04:59.820
现在, 很明显, 我们可以添加, 或者调用add函数,

04:59.820 --> 05:07.320
把number1和number2作为参数传递给这个函数, 把结果存储在一个新的常量中, 然后在屏幕上看到一些东西,

05:07.320 --> 05:15.080
我们可以控制｡

05:15.080 --> 05:15.080
记录结果｡ 

05:15.080 --> 05:20.080
如果我们这样做, 我用tsc应用程序重新编译这个文件｡  ts, 那么这个页面应该自动重新加载,

05:20.270 --> 05:22.730
已经｡

05:22.730 --> 05:24.350
如果没有, 你可以手动重新加载,

05:24.350 --> 05:27.010
当然, 你应该看到7｡ 8.

05:27.010 --> 05:30.250
现在, 你可能会想, 这不是太特别, 对不对？

05:30.250 --> 05:33.650
这是一个非常直接的JavaScript代码段, 实际上,

05:33.650 --> 05:37.330
Typescript-ish对此没有做什么｡

05:37.330 --> 05:41.900
好吧, 让我们做一些事情来阻止正常JavaScript中的代码片段｡

05:41.900 --> 05:45.100
比如说, 这里的输入实际上不是一个数字, 而是一些文本,

05:45.100 --> 05:49.880
文本中的一个5, 如果我们现在保存它, 并在这里重新运行我们的编译命令,

05:49.880 --> 05:59.530
你会看到, 一旦这个页面在这里重新加载, 我得到52｡

05:59.530 --> 05:59.530
8作为输出,

05:59.530 --> 06:02.200
这显然不是这个加法的正确结果｡

06:02.200 --> 06:08.670
现在, 你知道为什么我们在普通JavaScript中得到这个输出吗？我们最终在这里执行它｡

06:08.670 --> 06:10.150
我们得到了这个输出, 因为这不是数学加法的结果,

06:10.150 --> 06:14.710
而是, 它把它连接成一个字符串, 因为这个输入, 这里, 5, 是一个字符串,

06:14.710 --> 06:17.760
然后JavaScript看到, “好的, 我得到了一个字符串,

06:17.760 --> 06:23.997
“我把一些东西加到这个字符串上, 当然, “这个东西也应该被转换成一个字符串, “所以总的来说,

06:23.997 --> 06:27.667
我得到了一个字符串, “因为第一个值是字符串, ”因此,

06:27.667 --> 06:39.240
JavaScript所做的是, 将2.

06:39.240 --> 06:39.240
8从数字连接到字符串,

06:39.240 --> 06:46.700
则将5和2连接成更长的字符串｡ 8, 因此得到52｡

06:46.700 --> 06:46.700
8, 并返回该值｡ 

06:46.700 --> 06:49.490
所以, 它不是以数学的方式来处理, 而是作为一个字符串来处理,

06:49.490 --> 06:50.850
在JavaScript中,

06:50.850 --> 06:52.900
这是可以发生的｡

06:52.900 --> 06:55.427
当然, 你可能会想, “我为什么要写这样的代码？

06:55.427 --> 06:58.160
“我是开发商, 怎么会犯这种错误？ 也许你不是那个犯错误的人｡ 

06:58.160 --> 07:01.230
也许, 这是从一些用户输入中获取的,

07:01.230 --> 07:04.180
而您在代码中引入了一个小错误,

07:04.180 --> 07:06.690
您忘记了转换它, 或者您在一个团队中工作,

07:06.690 --> 07:09.350
您有几个脚本文件, 一起工作,

07:09.350 --> 07:14.740
而其他一些开发人员引入了这样的错误｡

07:14.740 --> 07:17.270
犯这样的错误并非不可能,

07:17.270 --> 07:20.110
但很难追踪｡

07:20.110 --> 07:24.010
当然, 这里很明显出了问题, 因为我们有一个基本的脚本,

07:24.010 --> 07:31.520
但在一个更大的脚本中, 您甚至可能无法立即意识到这里出了问题, 而Typescript可以帮助我们｡

07:31.520 --> 07:36.390
我们可以在这个函数中为参数添加类型赋值｡

07:36.390 --> 07:42.280
我们可以告诉Typescript这两个参数应该是number类型而不是,

07:42.280 --> 07:45.340
我不在乎哪个是默认值.

07:45.340 --> 07:47.535
我们在这里加了一个冒号,

07:47.535 --> 07:50.300
在我们要赋值的值后面, 在这个例子中,

07:50.300 --> 07:55.220
在参数名后面, 然后是类型名.

07:55.220 --> 07:57.140
例如, number将是支持的名称之一｡ 

07:57.140 --> 08:00.560
除了数字, 还有字符串, 或者布尔值,

08:00.560 --> 08:03.480
我们稍后再讲.

08:03.480 --> 08:05.990
现在, 我们需要数字,

08:05.990 --> 08:07.750
不仅仅是第一个参数,

08:07.750 --> 08:10.530
还有第二个参数｡

08:10.530 --> 08:12.010
因此, 在这里, 我们也可以添加一个冒号,

08:12.010 --> 08:16.150
然后是数字, 现在, 我们对Typescript说的是, “嘿,

08:16.150 --> 08:18.367
这里的两个参数都应该是数字类型,

08:18.367 --> 08:22.147
“不允许传入不同类型的值, ”实际上, 我的IDE已经在这里抱怨了,

08:22.147 --> 08:28.360
因为Visual Studio代码具有内置的Typescript支持, 但即使我们忽略了这一点,

08:28.360 --> 08:34.260
只要我重新编译它, 通过重新运行TSC应用程序｡

08:34.260 --> 08:34.260
ts,

08:34.260 --> 08:39.193
您会看到, 我们得到一个错误｡

08:40.040 --> 08:42.697
我们会得到一个错误,

08:42.697 --> 08:46.250
即“类型为“5”的参数无法赋值给类型为“number”的参数,

08:46.250 --> 08:48.660
它甚至向我们显示了发生这种情况的位置,

08:48.660 --> 08:51.140
并给了我们一个行号, 第8行, 它基本上向我们显示了相同的内容,

08:51.140 --> 08:54.430
IDE显示如下｡

08:54.430 --> 08:56.740
所以, 如果我们在IDE中忽略了它, 编译它,

08:56.740 --> 09:01.340
现在会抛出一个错误, 这是关于Typescript的重要事情｡

09:01.340 --> 09:03.284
它只在编译期间对我们有帮助｡ 

09:03.284 --> 09:06.220
它不会改变JavaScript在运行时的工作方式,

09:06.220 --> 09:10.110
因为浏览器没有内置的Typescript支持｡

09:10.110 --> 09:15.700
它只能在开发过程中帮助我们, 在我们将Typescript代码编译成JavaScript之前,

09:15.700 --> 09:21.520
但在这里, 它非常有用, 因为它增加了一个额外的步骤, 一个额外的健全性检查, 在这里, 我们发现, “哦,

09:21.520 --> 09:25.560
我们犯了一个错误｡

09:25.560 --> 09:28.407
"这里, 这不应该是字符串, 应该是数字",

09:28.407 --> 09:31.660
我们可以解决这个问题.

09:31.660 --> 09:34.210
这就是Typescript的作用｡ 

09:34.210 --> 09:35.670
它在开发过程中对您有帮助｡ 

09:35.670 --> 09:37.390
它不会变更您的执行阶段程式码｡ 

09:37.390 --> 09:40.130
实际上, 在这里, 即使使用默认设置, 它也编译了我们的错误,

09:40.130 --> 09:44.700
尽管它在编译过程中检测到了错误, 并创建了一个导致错误结果的文件,

09:44.700 --> 09:50.690
因为默认情况下, Typescript不会在这里进行干预｡

09:50.690 --> 09:53.560
稍后您将了解如何确保它能够阻止编译, 但在默认情况下,

09:53.560 --> 09:56.300
它甚至不会阻止编译｡

09:56.300 --> 09:59.260
尽管如此, 它还是对你大喊大叫, 指向这个错误,

09:59.260 --> 10:04.850
这样你就可以修正它, 这样你就可以在这里避免这样的错误｡

10:04.850 --> 10:09.020
顺便说一句, 确保你没有应用程序｡

10:09.020 --> 10:09.020
js和应用程序 ts同时打开｡ 

10:09.020 --> 10:13.470
在IDE中, 可能会出现有关重复函数实现得错误.

10:13.470 --> 10:15.830
关闭JavaScript文件可解决此问题｡ 
