WEBVTT

00:02.140 --> 00:04.980
-: Assim você pode usar tipos para parâmetros

00:04.980 --> 00:06.750
de função e para o valor de retorno

00:06.750 --> 00:08.100
da função.

00:08.100 --> 00:10.420
Agora, para levá-lo ao próximo

00:10.420 --> 00:14.820
nível, e se eles também fossem um tipo de função em si.

00:14.820 --> 00:17.170
Agora deixe-me deixar claro o que quero dizer.

00:17.170 --> 00:19.333
Digamos que temos uma variável 'combinevalues'

00:21.360 --> 00:24.200
e esta variável, por padrão, tem um tipo de 'any'. Agora, como você aprendeu, 'qualquer' não é tão útil assim.

00:24.200 --> 00:26.860
O que eu quero fazer, eventualmente, é definir

00:26.860 --> 00:29.617
'combinevalues' iguais a 'adicionar'. Portanto, quero armazenar essa função 'adicionar',

00:29.617 --> 00:32.600
um ponteiro nesta função 'adicionar', em 'combinevalues'

00:32.600 --> 00:35.330
para que, no final, possamos consolar o registro,

00:35.330 --> 00:39.160
combinar valores e executar 'combinevalues' como uma função para

00:39.160 --> 00:41.580
a qual tem 8 e 8.

00:41.580 --> 00:44.520
Agora, se eu salvar isso, e executar isto, depois

00:44.520 --> 00:47.480
de compilá-lo, então eu compilei este arquivo

00:47.480 --> 00:52.130
e depois deixamos este recarregamento, obtemos 16 aqui.

00:52.130 --> 00:54.660
Portanto, isso funciona, e nós esperaríamos que funcionasse porque esse

00:54.660 --> 00:55.840
é o código JavaScript normal.

00:55.840 --> 00:58.820
Podemos armazenar um ponteiro em uma função,

00:58.820 --> 01:00.880
em uma variável numérica, e então

01:00.880 --> 01:03.350
a oferta executar essa variável como uma

01:03.350 --> 01:05.440
função, porque, bem, ela aponta

01:05.440 --> 01:07.300
para a função, certo?

01:07.300 --> 01:08.580
Assim, podemos executar essa função, através dessa variável.

01:08.580 --> 01:09.910
O problema que temos

01:09.910 --> 01:13.250
com este trecho aqui sob a perspectiva do TypeScript,

01:13.250 --> 01:15.900
é que 'combinevalues' é qualquer um.

01:15.900 --> 01:19.640
Por isso, se eu definir 'combinadas' para um número aqui depois, é claro,

01:19.640 --> 01:20.670
não podemos compilar

01:20.670 --> 01:24.520
isto infelizmente porque o TypeScript não tem nenhuma chance de detectar

01:24.520 --> 01:27.910
que isto é indesejado ou que isto pode causar um problema.

01:27.910 --> 01:30.543
Mas um tempo de execução, seria um erro porque

01:30.543 --> 01:34.230
obviamente tentamos executar 'combinevalues' como função,

01:34.230 --> 01:36.220
quando na verdade é um número.

01:36.220 --> 01:39.090
Agora queremos evitar isso, e para isso precisamos ser

01:39.090 --> 01:42.080
claros de que os 'combinevalues' terão uma função.

01:42.080 --> 01:44.870
Agora o primeiro passo nessa direção,

01:44.870 --> 01:48.650
é que definimos o tipo aqui, para funcionar.

01:48.650 --> 01:50.550
Função é um tipo fornecido

01:50.550 --> 01:54.770
pelo TypeScript no final, e isto deixa claro que o que quer que

01:54.770 --> 01:57.940
armazenemos aqui tem que ser uma função.

01:57.940 --> 02:00.870
Portanto, aqui estou recebendo um erro, porque 5 é um

02:00.870 --> 02:02.230
número e não uma função.

02:02.230 --> 02:05.350
E se eu comentar isto, podemos compilar isto, caso contrário, obteríamos

02:05.350 --> 02:06.660
um erro durante a compilação,

02:06.660 --> 02:09.670
e agora ele é novamente executado como esperado.

02:09.670 --> 02:12.860
Portanto, isto é bom, mas não é perfeito porque agora

02:12.860 --> 02:15.380
dizemos que isto deveria ser uma função,

02:15.380 --> 02:17.940
mas também poderia definir 'combinevalues'

02:17.940 --> 02:21.460
iguais a 'printResult', por exemplo, aqui.

02:21.460 --> 02:25.290
E é claro que o TypeScript não reclamaria porque "printResult"

02:25.290 --> 02:27.150
é uma função, mas é claro que não

02:27.150 --> 02:29.600
é uma função que leva dois argumentos.

02:29.600 --> 02:32.620
Portanto, novamente se eu compilar isto, o TypeScript não irá reclamar.

02:32.620 --> 02:34.800
Mas se recarregarmos, vemos aqui indefinido e Resultado 8.

02:34.800 --> 02:38.720
Portanto, não obtenho o resultado que quero porque

02:38.720 --> 02:42.470
armazenei a função errada ali dentro.

02:42.470 --> 02:45.980
Mais uma vez, seria bom se o TypeScript nos falasse

02:45.980 --> 02:47.350
sobre isso.

02:47.350 --> 02:49.980
O TypeScript não pode nos informar sobre isto porque tudo

02:49.980 --> 02:51.340
o que dissemos ao TypeScript é

02:51.340 --> 02:54.410
que queremos armazenar uma função lá e este é claramente o caso.

02:54.410 --> 02:58.040
Portanto, seria bom se pudéssemos ser mais precisos

02:58.040 --> 03:00.550
quanto ao aspecto da função que queremos

03:00.550 --> 03:03.810
armazenar em 'combinevalues'. E é aí que entram os tipos de funções para jogar.

03:03.810 --> 03:07.200
Tipos de funções são tipos que descrevem uma função

03:07.200 --> 03:08.380
em relação aos parâmetros

03:08.380 --> 03:11.900
e o valor de retorno dessa função.

03:11.900 --> 03:15.690
Um tipo de função é criado com esta notação de função de seta que você

03:15.690 --> 03:18.360
conhece a partir do JavaScript ou pelo menos próximo

03:18.360 --> 03:19.870
a esta notação.

03:19.870 --> 03:23.710
Aqui não se acrescenta um aparelho encaracolado porque aqui

03:23.710 --> 03:25.530
não estamos criando uma função

03:25.530 --> 03:28.890
de seta, estamos criando um tipo de função.

03:28.890 --> 03:31.610
Agora, no lado direito desta seta, você especifica o tipo

03:31.610 --> 03:33.690
de retorno da função que você eventualmente

03:33.690 --> 03:35.450
deseja poder armazenar aqui.

03:35.450 --> 03:37.180
Isso deve ser o número.

03:37.180 --> 03:40.840
Agora com isso estamos dizendo que os 'combinevalues' aceitam qualquer

03:40.840 --> 03:42.640
função que não aceita parâmetros e depois

03:42.640 --> 03:44.120
retorna um número.

03:44.120 --> 03:47.200
Agora, é claro que isso não é inteiramente o que nós queremos.

03:47.200 --> 03:50.430
Queremos ter certeza de que os 'combinevalues' assumem uma função

03:50.430 --> 03:51.840
ou são capazes de armazenar funções

03:51.840 --> 03:54.180
que levam 2 números e retornam um número.

03:54.180 --> 03:57.130
E para isso podemos acrescentar

03:57.130 --> 04:01.400
parâmetros aqui a este tipo de função.

04:01.400 --> 04:02.400
Não temos que corresponder

04:02.400 --> 04:05.040
os nomes dos parâmetros de lá de cima, apenas tipos.

04:05.040 --> 04:06.020
Assim, poderíamos ter

04:06.020 --> 04:09.060
um que deveria ser do tipo número e b que deveria ser do tipo número.

04:09.060 --> 04:10.510
E agora o que estamos dizendo

04:10.510 --> 04:14.070
ao TypeScript é que os 'combinevalues' devem aceitar

04:14.070 --> 04:15.660
qualquer função que tome

04:15.660 --> 04:18.322
dois parâmetros onde cada parâmetro é um

04:18.322 --> 04:22.930
número, e onde a função em geral retorna então um número.

04:22.930 --> 04:24.350
E é por isso que o TypeScript não reclama

04:24.350 --> 04:27.780
que armazenamos 'adicionar' em valores combinados, porque 'adicionar' é uma função que satisfaz

04:27.780 --> 04:29.690
perfeitamente esta definição de tipo.

04:29.690 --> 04:33.380
Mas ele reclama de "printResult" porque "printResult"

04:33.380 --> 04:36.890
como nos diz aqui, é uma função do tipo um argumento

04:36.890 --> 04:40.632
que é um número, nada é retornado, onde como realmente

04:40.632 --> 04:44.360
esperamos obter uma função com dois argumentos

04:44.360 --> 04:48.690
onde cada argumento é um número e também retornamos um

04:48.690 --> 04:52.310
número.

04:52.310 --> 04:55.810
Portanto, temos um descasamento aqui, e se eu

04:55.810 --> 04:58.700
tentasse compilar isto, teríamos um

04:58.700 --> 05:00.480
erro aqui, é claro, no compilador,

05:00.480 --> 05:03.440
e só podemos corrigir isto removendo esta

05:03.440 --> 05:06.270
linha de código.

05:06.270 --> 05:07.110
Agora somos capazes de recompilar isto sem erros.

05:07.110 --> 05:10.930
E agora isto funciona como esperado.

05:10.930 --> 05:12.060
Assim, os tipos de funções,

05:12.060 --> 05:15.140
nos permitem descrever que tipo de função queremos usar

05:15.140 --> 05:17.413
especificamente em algum lugar.

05:18.290 --> 05:20.887
Seja um valor esperado em um parâmetro, para

05:20.887 --> 05:23.890
criar uma função com alguma chamada de retorno, ou,

05:23.890 --> 05:25.420
como aqui, uma variável.
