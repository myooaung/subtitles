WEBVTT

00:02.100 --> 00:04.390
Instruktor: Teraz oczywiście, w większych

00:04.390 --> 00:08.640
aplikacjach React, pracujesz z czymś więcej niż tylko useRef i useState.

00:08.640 --> 00:10.950
Aby zrozumieć, jak używasz tam TypeScript, naprawdę

00:10.950 --> 00:13.460
zawsze pomocne jest po prostu najechanie na funkcje,

00:13.460 --> 00:15.180
które wywołujesz, więc inne haki,

00:15.180 --> 00:17.090
z którymi pracujesz.

00:17.090 --> 00:20.010
Na przykład, jeśli potrzebujesz narzędzia UseEffect

00:20.010 --> 00:22.660
tutaj, w komponencie NewTodo, z jakiegokolwiek

00:22.660 --> 00:26.330
powodu, to możesz je wywołać i po prostu najechać na nie później,

00:26.330 --> 00:29.010
aby zrozumieć, z jakimi typami działa.

00:29.010 --> 00:30.960
Na przykład, że pierwszy argument to

00:30.960 --> 00:33.720
EffectCallback, czyli specjalna funkcja, gdzie TypeScript

00:33.720 --> 00:37.100
ostrzeże cię, jeśli źle ją ustawisz, że drugi argument to albo

00:37.100 --> 00:38.610
nic, albo tablica czegokolwiek,

00:38.610 --> 00:42.997
rzeczy tego typu, to zawsze ci pomoże, dowiesz się również, że useEffect nie zwraca

00:42.997 --> 00:45.930
niczego, na przykład, a na useState, gdzie wspomniałem,

00:45.930 --> 00:49.200
że zawsze otrzymujesz z powrotem tablicę z dokładnie dwoma elementami,

00:49.200 --> 00:52.410
cóż, widzisz również, że tutaj, useState zwraca tablicę, to

00:52.410 --> 01:01.750
jest to, co widzimy tutaj, nawias otwierający i zamykający, gdzie pierwszy element jest twojego typu ogólnego, więc lista Todos, ponieważ to jest twój migawka stanu, drugi

01:01.750 --> 01:08.600
element to React.

01:08.600 --> 01:08.600
Funkcja

01:08.600 --> 01:11.370
Dispatch tutaj na końcu, czyli to co się tutaj dzieje.

01:11.370 --> 01:12.690
Więc to może być przydatne.

01:12.690 --> 01:15.490
Być może pracujesz również z Reduxem.

01:15.490 --> 01:19.660
Cóż, na szczęście, jeśli zanurkujesz w ich dokumentacji, znajdziesz

01:19.660 --> 01:21.360
również instrukcje dotyczące

01:21.360 --> 01:24.530
używania Redux z TypeScript.

01:24.530 --> 01:27.430
Tutaj, pod Recipes znajdziesz Usage with TypeScript,

01:27.430 --> 01:30.710
a tam dowiesz się, jak możesz dodać typy do swoich akcji,

01:30.710 --> 01:33.270
i do swoich reduktorów, i do swojego zarządzania

01:33.270 --> 01:35.540
stanem z Redux.

01:35.540 --> 01:38.650
Jest to naprawdę proste, w ogóle nie skomplikowane

01:38.650 --> 01:41.520
i dodaje tam dużo bezpieczeństwa typu.

01:41.520 --> 01:43.230
Może używasz również

01:43.230 --> 01:47.110
pakietu React Router, tego pakietu tutaj.

01:47.110 --> 01:52.040
Tam nie znajdziesz konkretnych notacji TypeScript, cóż, oczywiście możesz to zainstalować

01:52.040 --> 01:54.020
w swoim projekcie, również za pomocą

01:54.020 --> 01:55.340
npm install dash dash save

01:55.340 --> 01:58.770
react dash router dash dom, co jest poleceniem, którego typowo

01:58.770 --> 02:00.740
użyłbyś do zainstalowania tego pakietu

02:00.740 --> 02:03.720
w swoim projekcie React.

02:03.720 --> 02:07.000
W ten sposób zostanie dodany pakiet react-router-dom.

02:07.000 --> 02:10.250
Ale ten pakiet nie ma specjalnych instrukcji dotyczących typów

02:10.250 --> 02:12.430
na swojej stronie tutaj, nie znajdziesz tutaj

02:12.430 --> 02:14.720
niczego specyficznego dla TypeScript, przynajmniej

02:14.720 --> 02:17.570
w momencie, w którym to nagrywam.

02:17.570 --> 02:19.163
Niemniej jednak, oczywiście możemy

02:19.163 --> 02:21.250
użyć tego również w projekcie TypeScript

02:21.250 --> 02:23.920
i możemy uzyskać tam dobre wsparcie typu.

02:23.920 --> 02:25.800
Teraz, z zainstalowanym, zauważysz,

02:25.800 --> 02:29.360
że jeśli importuję z react-router-dom, tak naprawdę nie mam

02:29.360 --> 02:31.880
tam świetnego wsparcia typu.

02:31.880 --> 02:33.870
Na przykład, jeśli próbuję zaimportować

02:33.870 --> 02:36.870
coś tutaj, już dostaję ostrzeżenie, że nie mógł znaleźć

02:36.870 --> 02:39.210
deklaracji dla modułu react-router-dom,

02:39.210 --> 02:42.730
więc nie znalazł żadnych informacji o typie tutaj.

02:42.730 --> 02:45.420
Aby to naprawić, oczywiście, możemy zrobić coś,

02:45.420 --> 02:48.450
co zrobiliśmy wcześniej, npm install dash dash save dash

02:48.450 --> 02:52.530
dev, at types, slash react dash router dash dom, więc anulujemy at search types

02:52.530 --> 02:54.620
tutaj, i jesteśmy znowu dobrzy, jest to

02:54.620 --> 02:56.860
sztuczka, o której już się dowiedziałeś,

02:56.860 --> 02:59.097
na początku kursu, ale oczywiście nie ma

02:59.097 --> 03:02.010
potrzeby, aby o niej zapomnieć, tylko dlatego, że mamy

03:02.010 --> 03:03.920
projekt, w którym wiele już działa

03:03.920 --> 03:06.790
z TypeScriptem po wyjęciu z pudełka.

03:06.790 --> 03:08.140
Jeśli następnie dodamy coś,

03:08.140 --> 03:10.810
co nie działa z TypeScript, jak ten, możemy dodać

03:10.810 --> 03:13.700
go w ten sposób, a teraz jest świadomy Route, jest również

03:13.700 --> 03:15.380
świadomy wszystkich innych funkcji

03:15.380 --> 03:17.270
z tego pakietu.

03:17.270 --> 03:21.070
Więc to jest jak łatwo można dodać wsparcie dla tego, jak również.

03:21.070 --> 03:23.560
I tak właśnie powinieneś ogólnie podejść do tego,

03:23.560 --> 03:26.010
zajrzeć do oficjalnych docs, sprawdzić, czy

03:26.010 --> 03:29.030
widzisz tam instrukcje dotyczące użycia z TypeScript,

03:29.030 --> 03:31.590
jeśli nie, zainstaluj go i zobacz, czy ma wbudowaną

03:31.590 --> 03:33.720
obsługę typów, abyś przynajmniej uzyskał

03:33.720 --> 03:37.350
dobre wsparcie autouzupełniania i kompilacji, a jeśli to również

03:37.350 --> 03:39.090
nie istnieje, zainstaluj pakiet

03:39.090 --> 03:42.080
typów, tak jak zrobiliśmy to tutaj.

03:42.080 --> 03:43.980
I to naprawdę jest to dla tego modułu, i

03:43.980 --> 03:46.410
to jest jak można wykorzystać TypeScript, i wszystkie

03:46.410 --> 03:49.920
jego niesamowite funkcje w aplikacji React, i oczywiście wszystko,

03:49.920 --> 03:52.450
czego nauczysz się z tego kursu, stosuje się do aplikacji

03:52.450 --> 03:54.370
React, jak również.

03:54.370 --> 03:56.380
Możesz wykorzystać wszystkie funkcje TypeScript,

03:56.380 --> 03:59.130
które poznałeś z tego kursu, w projekcie React.
