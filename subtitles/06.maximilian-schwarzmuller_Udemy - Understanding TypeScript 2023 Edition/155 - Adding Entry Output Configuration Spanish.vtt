WEBVTT

00:01.538 --> 00:03.725
Narrador: Para empezar vamos a

00:03.725 --> 00:07.086
ir primero a tsconfig. json porque ahí tenemos que asegurarnos

00:07.086 --> 00:09.965
de que ciertas cosas están configuradas.

00:09.965 --> 00:12.780
Asegúrese de que el objetivo aquí, se establece

00:12.780 --> 00:16.286
realmente a es5 o es6, que depende de usted.

00:16.286 --> 00:19.423
Depende de los navegadores que se pretenda utilizar.

00:19.423 --> 00:22.190
Porque al final webpack y los tipos que cargan utilizarán

00:22.190 --> 00:24.050
este objetivo para determinar cómo

00:24.050 --> 00:26.543
su código debe ser transformado.

00:26.543 --> 00:28.960
¿Deben transformarse sus tipos de código en código

00:28.960 --> 00:32.480
Java script que se ejecute también en los navegadores más antiguos?

00:32.480 --> 00:36.210
¿O como en el caso de es6 a un código que sólo se ejecuta en los navegadores

00:36.210 --> 00:37.811
más recientes?

00:37.811 --> 00:42.640
El módulo debe estar configurado como es2015 o es6, por lo que esa configuración

00:42.640 --> 00:44.110
está bien.

00:44.110 --> 00:49.110
Y además, también quieres verificar tu outDir.

00:50.560 --> 00:53.520
Lo mantendré a dist pero podrías cambiar esto si quieres compilar

00:53.520 --> 00:55.997
tu código en un directorio diferente.

00:55.997 --> 00:59.378
Sin embargo, ya no necesitas el directorio raíz, porque

00:59.378 --> 01:02.260
webpack se encargará de ello, y webpack determinará

01:02.260 --> 01:05.014
dónde están tus archivos raíz.

01:05.014 --> 01:07.660
Así que, en general, estos ajustes deberían estar bien.

01:07.660 --> 01:09.525
Siempre podemos modificarlos

01:09.525 --> 01:12.487
más tarde si algo no funciona como queremos.

01:12.487 --> 01:15.220
Con esto vamos a añadir un nuevo archivo de configuración

01:15.220 --> 01:19.848
junto a tsconfig. json y eso es el webpack. configurar. archivo js.

01:19.848 --> 01:22.368
Y asegúrate de nombrarlo realmente así porque

01:22.368 --> 01:24.150
este es el archivo que webpack

01:24.150 --> 01:27.579
buscará automáticamente y esto incluso le dirá a webpack

01:27.579 --> 01:30.220
cómo trabajar con nuestro proyecto.

01:30.220 --> 01:32.840
Porque webpack es una herramienta que necesita ser configurada

01:32.840 --> 01:34.568
para funcionar correctamente aquí.

01:34.568 --> 01:37.568
Entonces, ¿qué hacemos en este webpack. ¿archivo de configuración?

01:37.568 --> 01:40.338
Este archivo de configuración utiliza JavaScript y

01:40.338 --> 01:43.288
en realidad utiliza node. js características.

01:43.288 --> 01:46.747
Así que queremos utilizar el nodo. js exporta la sintaxis, que tiene

01:46.747 --> 01:50.379
el siguiente aspecto para exportar un objeto JavaScript.

01:50.379 --> 01:53.538
Que será el objeto de configuración recogido por webpack.

01:53.538 --> 01:55.585
Por si no lo has visto nunca, así es como

01:55.585 --> 01:59.648
se exportan las cosas en un nodo. js environment.

01:59.648 --> 02:02.877
Y aquí estamos exportando un objeto JavaScript.

02:02.877 --> 02:05.920
Ahora webpack necesita un par de datos.

02:05.920 --> 02:09.840
Lo más importante es saber con qué archivo comienza

02:09.840 --> 02:14.585
todo el proyecto, es decir, dónde está el punto de entrada.

02:14.585 --> 02:17.370
En nuestro caso es la aplicación. ts file.

02:17.370 --> 02:18.922
Este archivo debe ser ejecutado

02:18.922 --> 02:20.981
primero, y lo que webpack hará entonces es

02:20.981 --> 02:24.013
echar un vistazo a las importaciones en este archivo e ir a estos

02:24.013 --> 02:25.461
archivos y echar un vistazo a sus

02:25.461 --> 02:27.378
importaciones y las importaciones de

02:27.378 --> 02:30.219
los archivos importados y así sucesivamente.

02:30.219 --> 02:33.461
Hasta que conozca todos los archivos que su proyecto utiliza al final.

02:33.461 --> 02:36.201
Y luego irá a través de los contenidos de los archivos

02:36.201 --> 02:38.740
como este contenido aquí y todo el contenido

02:38.740 --> 02:41.690
en todos los archivos y compilarlos, con la ayuda

02:41.690 --> 02:44.290
de la ts. paquete del cargador que mencioné.

02:44.290 --> 02:46.960
Ahora bien, para que webpack funcione correctamente aquí deberías

02:46.960 --> 02:51.598
eliminar todos los archivos . js en todas las importaciones.

02:51.598 --> 02:54.400
Lo necesitábamos antes, cuando usábamos el navegador

02:54.400 --> 02:57.885
nativo incorporado en ts. La funcionalidad del módulo,

02:57.885 --> 03:01.130
pero con webpack no necesitas estas extensiones.

03:01.130 --> 03:03.664
Porque webpack buscará automáticamente. js, y algunos otros archivos de extensión.

03:03.664 --> 03:06.501
Así que no lo haces y no debes añadirlos aquí, de lo contrario

03:06.501 --> 03:09.270
webpack buscará archivos con doble extensión, lo

03:09.270 --> 03:10.716
cual no quieres.

03:10.716 --> 03:13.655
Por lo tanto, eliminar . js en todas estas importaciones aquí, y una vez que

03:13.655 --> 03:18.441
usted hizo que guardar todos estos archivos

03:18.441 --> 03:21.370
para asegurarse de que sus cambios se aplican.

03:21.370 --> 03:24.043
Ahora volvamos a webpack. configurar. js, ahora debe añadir una

03:24.043 --> 03:26.498
propiedad

03:26.498 --> 03:31.320
de entrada en este objeto exportado.

03:31.320 --> 03:32.740
Y señala a . /src/app. en nuestro ejemplo.

03:32.740 --> 03:37.740
Así que en el archivo de entrada raíz de su proyecto.

03:38.680 --> 03:42.444
A continuación, añada una clave de salida aquí.

03:42.444 --> 03:45.880
Una salida ahora es un objeto aquí.

03:45.880 --> 03:48.051
Donde, en primer lugar, especificamos el nombre del archivo.

03:48.051 --> 03:51.120
Este será el único archivo JavaScript que

03:51.120 --> 03:52.998
se producirá al final.

03:52.998 --> 03:55.440
Y aquí lo nombraremos paquete. js, pero puedes llamarlo como

03:55.440 --> 03:57.350
quieras.

03:57.350 --> 03:58.788
App. js, o lo que quieras.

03:58.788 --> 04:01.709
También puedes añadir partes

04:01.709 --> 04:05.171
dinámicas aquí, por ejemplo, hash de contenido, para decirle a webpack

04:05.171 --> 04:08.971
que cree automáticamente un has único para cada compilación, lo que puede ayudarte

04:08.971 --> 04:11.829
con el almacenamiento en caché en el navegador.

04:11.829 --> 04:13.578
Pero de nuevo puedes aprender más sobre esto en los documentos de webpack.

04:13.578 --> 04:16.229
Aquí no lo necesitamos, así que sólo nombraremos el paquete de archivos. js.

04:16.229 --> 04:19.779
Además del nombre del archivo, es necesario

04:19.779 --> 04:23.320
especificar la ruta en la que se debe escribir la salida.

04:23.320 --> 04:26.131
Y por supuesto que debe coincidir

04:26.131 --> 04:28.900
con la ruta que tienes en tu ts. configurar. js para evitar errores.

04:28.900 --> 04:32.970
Así que a esta carpeta.

04:32.970 --> 04:34.189
Ahora, a diferencia de lo que ocurre en el ts. config,js, no debes

04:34.189 --> 04:37.010
escribir . /dist aquí.

04:37.010 --> 04:39.819
Webpack quiere una ruta absoluta aquí.

04:39.819 --> 04:42.099
Y para construir uno podemos usar un nodo. módulo js.

04:42.099 --> 04:45.669
Para ello podemos utilizar el nodo js, que utiliza la palabra

04:45.669 --> 04:48.880
clave requerida, e importa

04:48.880 --> 04:51.280
el módulo de la ruta.

04:51.280 --> 04:54.220
No es necesario instalar esto como una biblioteca

04:54.220 --> 04:56.050
esto es un nodo de núcleo. js que ya tienes si

04:56.050 --> 04:59.651
tienes node. js instalado, lo cual haces porque lo hicimos

04:59.651 --> 05:02.149
antes en el curso.

05:02.149 --> 05:04.966
Ahora puede utilizar la ruta para llamar al

05:04.966 --> 05:08.552
método de resolución que le permite construir una ruta

05:08.552 --> 05:11.280
absoluta a una determinada carpeta.

05:11.280 --> 05:12.910
Para ello utilizamos una constante

05:12.910 --> 05:15.320
especial, la constante __dirname, que está disponible

05:15.320 --> 05:17.236
globalmente en un nodo. js environment.

05:17.236 --> 05:21.150
Y webpack como he dicho utiliza node. js para ejecutar sus archivos.

05:21.150 --> 05:24.692
Y luego como segundo argumento

05:24.692 --> 05:27.433
dist, al final dist sólo construye una ruta

05:27.433 --> 05:30.661
absoluta a la carpeta dist que webpack utiliza para

05:30.661 --> 05:33.190
escribir su salida allí.

05:33.190 --> 05:35.452
Y con eso tienes un punto de entrada y

05:35.452 --> 05:38.753
un punto de salida, pero no le dices a webpack qué hacer

05:38.753 --> 05:40.743
con tus archivos TypeScript.

05:40.743 --> 05:42.553
Porque por defecto webpack no

05:42.553 --> 05:45.140
lo sabe, por defecto es sólo un bundler.

05:45.140 --> 05:46.884
Cualquier funcionalidad extra,

05:46.884 --> 05:48.684
como la compilación de TypeScript

05:48.684 --> 05:51.261
a JavaScript tiene que ser enseñada a webpack.

05:51.261 --> 05:53.452
Lo haremos en la próxima conferencia.
