WEBVTT

00:02.250 --> 00:04.530
Instrutor: Também temos características

00:04.530 --> 00:09.240
úteis relacionadas a arrays e objetos e como podemos recuperar os

00:09.240 --> 00:13.600
dados que estão armazenados em arrays e objetos.

00:13.600 --> 00:17.180
Agora, para isso, vamos acrescentar uma nova gama de passatempos,

00:17.180 --> 00:19.880
digamos hobbies e isso pode ser uma gama de cordas.

00:22.520 --> 00:26.700
Como esportes e culinária aqui e agora obviamente

00:26.700 --> 00:31.700
podemos recuperar elementos por índice aqui, como este, por

00:31.810 --> 00:33.030
exemplo.

00:33.030 --> 00:36.150
Mas, você deve saber estas coisas básicas de JavaScript.

00:36.150 --> 00:40.310
Próximo JavaScript Gen, introduza um recurso agradável se quisermos

00:41.172 --> 00:43.910
extrair todos os valores de uma matriz.

00:43.910 --> 00:44.990
Quando você poderia precisar disso?

00:44.990 --> 00:48.670
Digamos que você tem os passatempos ativos e isso é um

00:48.670 --> 00:53.670
conjunto onde eu tenho caminhadas como hobby, e agora eu quero acrescentar

00:54.200 --> 00:56.510
esportes e culinária.

00:56.510 --> 00:58.960
Agora podemos adicionar um item aos passatempos ativos

00:58.960 --> 01:01.290
chamando push, a propósito, caso você esteja se

01:01.290 --> 01:05.620
perguntando como posso empurrar para uma constante, tenha em mente que as arrays são objetos

01:05.620 --> 01:08.130
e os objetos são valores de referência.

01:08.130 --> 01:11.010
Quando pressionamos, mudamos uma memória, mas não o endereço.

01:11.010 --> 01:14.150
Se isto não lhe disser nada, verifique os recursos adicionais

01:14.150 --> 01:17.390
que anexei a esta palestra sobre esse tópico, então voltando

01:17.390 --> 01:20.170
a este exemplo, podemos empurrar aqui, mas empurrar,

01:20.170 --> 01:24.120
se empurrarmos os passatempos, acrescentaremos passatempos como uma nova

01:24.120 --> 01:27.540
matriz na matriz, de modo que uma nova arrays aninhada.

01:27.540 --> 01:30.920
Que tipos realmente o detectariam, ele me diz que se eu

01:30.920 --> 01:33.690
quiser adicionar um conjunto de cordas a um conjunto

01:33.690 --> 01:36.143
de cordas, isso não está bem.

01:37.110 --> 01:40.390
Então, em vez disso, o push leva valores únicos para que pudéssemos

01:40.390 --> 01:44.450
passar os hobbies a zero, na verdade o push leva até mesmo uma quantidade

01:44.450 --> 01:47.450
ilimitada de argumentos para que possamos empurrar

01:47.450 --> 01:51.240
vários itens em ordem de uma só vez dessa maneira.

01:51.240 --> 01:54.013
Mas isso é um pouco complicado e é aí que entra o Spread

01:54.013 --> 01:54.890
Operator.

01:54.890 --> 01:57.700
Parece assim, são três pontos e sim isto parece

01:57.700 --> 02:00.850
estranho, mas este é um operador JavaScript válido

02:00.850 --> 02:04.770
apoiado por [Hypescript? ] e depois disso, especificamos

02:04.770 --> 02:09.547
ou apontamos para a matriz ou objeto como você também aprenderá, que

02:09.547 --> 02:11.700
queremos espalhar.

02:11.700 --> 02:15.160
Então o que isto faz é dizer JavaScript no final porque é um Vanilla

02:15.160 --> 02:17.690
JavaScript Operator disponível em JavaScript

02:17.690 --> 02:21.070
Moderno, então diz ao JavaScript para puxar todos os elementos

02:21.070 --> 02:25.500
após o array e basicamente adicioná-los como uma lista de valores, então não

02:25.500 --> 02:28.530
como um array mas como uma lista de valores individuais

02:28.530 --> 02:31.900
no lugar onde você usou um Operator, então aqui por exemplo

02:31.900 --> 02:33.950
está uma lista de argumentos passados

02:33.950 --> 02:36.090
para empurrar e agora um lugar onde você

02:36.090 --> 02:39.180
poderia usar isso é diretamente quando você cria um novo

02:39.180 --> 02:41.740
array.

02:41.740 --> 02:46.220
Aí você também pode espalhar uma matriz existente dentro dessa matriz.

02:46.220 --> 02:48.950
Portanto, basicamente sempre que você precisar de uma lista de

02:48.950 --> 02:51.460
valores separada por vírgulas, você pode usar o Spread Operator

02:51.460 --> 02:54.360
com uma matriz para obter tal lista separada por vírgulas.

02:54.360 --> 02:56.660
Essa é a idéia do Spread Operator e, portanto,

02:56.660 --> 02:59.230
é realmente útil para puxar elementos de

02:59.230 --> 03:00.663
uma matriz.

03:01.860 --> 03:04.380
O Spread Operator, tudo o que ele não existe

03:04.380 --> 03:07.880
apenas em arrays, ele também existe em objetos.

03:07.880 --> 03:10.990
Digamos que temos uma pessoa que tem uma chave

03:10.990 --> 03:14.070
de nome, Max e uma chave h que é 30 e agora queremos

03:14.070 --> 03:16.640
criar uma pessoa copiada.

03:16.640 --> 03:19.060
Agora, se simplesmente designarmos uma

03:19.060 --> 03:22.680
pessoa como esta, o que estamos fazendo é copiar o ponteiro

03:22.680 --> 03:25.000
para esta pessoa objeto em memória para

03:25.000 --> 03:27.050
esta constante de cópia.

03:27.050 --> 03:30.470
E mais uma vez, verifique meus recursos de valor de referência anexados

03:30.470 --> 03:32.360
se isso não lhe diz muito.

03:32.360 --> 03:36.190
Portanto, não estamos realmente criando uma cópia desse objeto.

03:36.190 --> 03:38.610
Agora, para criar uma cópia real, podemos usar

03:38.610 --> 03:40.880
o operador de propagação com objetos.

03:40.880 --> 03:43.400
Criamos um novo objeto com aparelho de amarrar

03:43.400 --> 03:46.510
e depois usamos o Spread Operator, três pontos com

03:46.510 --> 03:49.630
nosso primeiro objeto que você quer copiar.

03:49.630 --> 03:52.970
Agora o que isto faz é retirar todos os elementos, mas é claro

03:52.970 --> 03:56.310
que aqui os elementos são pares de valores chave e não valores

03:56.310 --> 03:58.630
individuais como uma matriz.

03:58.630 --> 04:00.550
Aqui temos os pares de valores chave.

04:00.550 --> 04:04.110
Assim, estes pares de valores chave são retirados de lá e depois

04:04.110 --> 04:08.010
podem ser usados em qualquer lugar onde você precise de pares de valores

04:08.010 --> 04:11.310
chave, o que normalmente é um objeto ao qual você nunca pode

04:11.310 --> 04:12.920
ser adicionado.

04:12.920 --> 04:15.447
Portanto, a este objeto de outra forma vazio,

04:15.447 --> 04:19.100
os pares de valor chave da pessoa são agora adicionados e como

04:19.100 --> 04:21.240
criamos um novo objeto aqui, e apenas

04:21.240 --> 04:23.700
o adicionamos aos pares de valor chave, conseguimos

04:23.700 --> 04:27.310
uma cópia perfeita do objeto original e não apenas do ponteiro

04:27.310 --> 04:30.803
que aponta para o objeto em memória.
