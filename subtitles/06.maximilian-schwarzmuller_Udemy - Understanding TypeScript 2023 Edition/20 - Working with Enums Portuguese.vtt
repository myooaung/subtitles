WEBVTT

00:02.230 --> 00:04.860
Instrutor: Livremente relacionado à idéia de

00:04.860 --> 00:09.760
um Tuple é a idéia de ter um par de identificadores específicos, constantes globais com

00:09.760 --> 00:12.710
as quais você pode estar trabalhando em seu aplicativo,

00:12.710 --> 00:15.020
que você quer representar como números, mas

00:15.020 --> 00:18.530
ao qual você quer atribuir um rótulo legível humano.

00:18.530 --> 00:20.500
E para isso, você tem o tipo Enum.

00:20.500 --> 00:23.800
Mais uma vez, isso existe em algumas linguagens de programação superiores.

00:23.800 --> 00:25.780
No entanto, o JavaScript não o conhece.

00:25.780 --> 00:26.613
É o que parece.

00:26.613 --> 00:28.110
É assim que se cria um enumero.

00:28.110 --> 00:30.540
Você usa a palavra-chave enum, que só existe

00:30.540 --> 00:33.060
no mundo TypeScript, e não no JavaScript, lá depois

00:33.060 --> 00:34.840
de ter o aparelho de atadura, e depois

00:34.840 --> 00:36.810
seus identificadores.

00:36.810 --> 00:39.141
E este tipo, que é adicionado pelo

00:39.141 --> 00:42.030
TypeScript, lhe dá uma lista enumerada.

00:42.030 --> 00:45.070
Portanto, estas etiquetas estão no final, apenas traduzidas para números

00:45.070 --> 00:48.580
que começam em zero, onde você tem etiquetas legíveis por humanos com os quais você

00:48.580 --> 00:50.133
pode trabalhar em seu código.

00:51.310 --> 00:53.500
Para mostrar-lhes um exemplo, vamos voltar

00:53.500 --> 00:55.620
aqui para nossa pessoa com seu papel.

00:55.620 --> 00:58.010
Vou copiar esse código e depois comentar

00:58.010 --> 00:59.710
porque vou mudá-lo um pouco.

00:59.710 --> 01:01.600
E depois aqui, vou me livrar dessa

01:01.600 --> 01:05.380
atribuição de tipo explícito e, em vez disso, voltar a inferir, porque

01:05.380 --> 01:07.150
agora vou mudar de função.

01:07.150 --> 01:10.330
E agora digamos que queremos ter um administrador, um autor

01:10.330 --> 01:12.350
e talvez um usuário só de leitura.

01:12.350 --> 01:14.750
O administrador deve ter um ID de zero,

01:14.750 --> 01:18.660
leia-se apenas usuário tem um, o autor tem dois.

01:18.660 --> 01:21.160
Agora, é claro, podemos armazenar isso exatamente

01:21.160 --> 01:22.550
assim com estes números.

01:22.550 --> 01:24.830
Uma desvantagem é que sempre podemos adicionar

01:24.830 --> 01:26.670
um número para o qual podemos não

01:26.670 --> 01:30.320
ter um papel e, se mais tarde, em nosso código, tentar extrair o papel

01:30.320 --> 01:33.392
e usar a verificação pode levar a erros.

01:33.392 --> 01:37.160
E, além disso, nós, como desenvolvedor, temos dificuldade para

01:37.160 --> 01:39.690
entender qual é o papel deste usuário.

01:39.690 --> 01:41.310
Foi para o autor?

01:41.310 --> 01:43.020
Ou foi a leitura no usuário?

01:43.020 --> 01:46.140
Você pode esquecer isto depois de fazer pausas mais longas, ao

01:46.140 --> 01:48.810
trabalhar em equipes maiores, e assim por diante.

01:48.810 --> 01:50.540
Portanto, como desenvolvedor,

01:50.540 --> 01:54.310
você pode querer identificadores humanos legíveis, algo

01:54.310 --> 01:58.630
como ADMIN, e LEIA APENAS UTILIZADOR, algo como isso.

01:58.630 --> 02:00.240
Agora, é claro, poderíamos usar isso,

02:00.240 --> 02:02.880
poderíamos trabalhar com tais valores de corda.

02:02.880 --> 02:06.100
O problema é que se mais tarde precisarmos de um

02:06.100 --> 02:11.100
"se", verificamos se o papel da pessoa é igual a, foi LER_ONLY_USER?

02:12.260 --> 02:13.500
Ou foi uma palavra?

02:13.500 --> 02:15.380
Foi com sublinhados?

02:15.380 --> 02:17.440
Vejam, então temos que nos lembrar como

02:17.440 --> 02:19.020
escrevemos estas cordas, que

02:19.020 --> 02:20.970
texto exato temos ali dentro.

02:20.970 --> 02:24.330
Porque este cordão com os traços entre as palavras

02:24.330 --> 02:27.430
é claro, não é o mesmo que este cordão.

02:27.430 --> 02:29.973
Portanto, aqui, nunca chegaríamos lá,

02:31.150 --> 02:36.120
é lido apenas se você tentar compilar e imprimir isso, porque, bem, o cheque

02:36.120 --> 02:39.170
simplesmente não se torna verdadeiro.

02:39.170 --> 02:42.150
Não temos isso como um papel de pessoa, portanto, não obtemos

02:42.150 --> 02:43.930
a saída aqui no console.

02:43.930 --> 02:47.290
Portanto, os identificadores de corda, também têm desvantagens.

02:47.290 --> 02:50.340
Agora, para tais cenários, é bastante comum em JavaScript

02:50.340 --> 02:52.340
definir constantes globais.

02:52.340 --> 02:55.580
Por exemplo, admin, que então detém certos valores

02:55.580 --> 02:58.053
como números ou cordas, ambos o mais

02:58.980 --> 03:00.060
possível.

03:00.060 --> 03:01.700
Números, é claro, podem nos poupar

03:01.700 --> 03:04.370
alguns códigos e bits extras na memória.

03:04.370 --> 03:09.370
E lá podemos ter ADMIN, READ_ONLY e AUTHOR como este e

03:09.390 --> 03:10.870
lá embaixo, temos

03:10.870 --> 03:13.750
apenas que usar esse papel.

03:13.750 --> 03:16.460
Agora, a vantagem disso é que podemos usar isso em todos os lugares

03:16.460 --> 03:17.343
em nosso código.

03:18.230 --> 03:22.600
E portanto aqui, por exemplo, se eu executar este código, se eu compilá-lo e então

03:22.600 --> 03:23.680
deixarmos este recarregamento,

03:25.260 --> 03:28.570
nós vemos como administrador aqui, então isto funciona e este

03:28.570 --> 03:31.520
é um padrão comum em JavaScript.

03:31.520 --> 03:34.190
O lado negativo é que agora novamente, infere-se que o papel

03:34.190 --> 03:37.290
é apenas um número, de modo que poderíamos armazenar qualquer número

03:37.290 --> 03:39.630
ali, mesmo um número que não apoiamos.

03:39.630 --> 03:42.450
Além disso, temos que definir todas essas constantes,

03:42.450 --> 03:44.060
temos que administrá-las.

03:44.060 --> 03:45.920
É aqui que um enumero pode nos salvar.

03:45.920 --> 03:48.730
Isto é totalmente bom, mas um enumerativo facilita as coisas.

03:48.730 --> 03:50.970
Criamos um enum com a palavra-chave enum,

03:50.970 --> 03:54.250
podemos nomeá-lo Papel, a convenção é começar com o caractere

03:54.250 --> 03:55.550
em maiúsculas porque o

03:55.550 --> 03:58.620
enum também é um tipo personalizado.

03:58.620 --> 04:01.760
É o seu primeiro tipo personalizado, vamos escrever muito

04:01.760 --> 04:03.860
mais neste curso, este é o primeiro.

04:03.860 --> 04:06.560
E depois do nome do tipo que você quer atribuir a esta enumeração,

04:06.560 --> 04:09.520
você acrescenta um aparelho encaracolado, assim mesmo, sem

04:09.520 --> 04:14.040
dois pontos, sem sinal de igualdade, apenas aparelho encaracolado após o nome.

04:14.040 --> 04:15.800
Em seguida, um ponto-e-vírgula.

04:15.800 --> 04:19.433
E agora, aqui, você pode atribuir seus valores

04:20.650 --> 04:21.973
como admin, read

04:22.950 --> 04:24.300
only, e autor.

04:24.300 --> 04:28.180
E nos bastidores este aqui recebe o número zero, este

04:28.180 --> 04:31.780
aqui o número um, este aqui o número dois.

04:31.780 --> 04:34.650
E então aqui, você pode acessar o Role. ADMIN, como em um objeto,

04:34.650 --> 04:37.840
você acessa seu identificador.

04:37.840 --> 04:40.380
E você pode usar isso em qualquer outro lugar em

04:40.380 --> 04:43.890
seu código também, aqui podemos verificar se o papel é AUTHOR, e

04:43.890 --> 04:46.710
então imprimir autor e, claro, não devemos ver isso

04:46.710 --> 04:50.630
se eu executar isso agora porque atribuímos um papel de ADMIN aqui.

04:50.630 --> 04:53.333
Mas a chave é que fizemos tudo isso com

04:53.333 --> 04:57.490
a ajuda do enumere, que atribui etiquetas aos números.

04:57.490 --> 04:59.210
Se dermos uma olhada nisso em JavaScript.

04:59.210 --> 05:02.830
Assim, no código compilado, vemos que é assim que ele é reconstruído.

05:02.830 --> 05:05.080
No final, ele é reconstruído com um "se" aqui.

05:05.080 --> 05:07.940
Portanto, função que se executa a si mesma.

05:07.940 --> 05:11.770
E o papel aqui é simplesmente administrado como um objeto no final, que tem como

05:11.770 --> 05:14.550
propriedade administradora uma propriedade somente de

05:14.550 --> 05:17.330
leitura e propriedade AUTHOR, onde então armazenamos nossos

05:17.330 --> 05:19.970
valores numéricos aqui, você poderia dizer.

05:19.970 --> 05:21.960
Portanto, é um pouco mais complexo do que isso,

05:21.960 --> 05:24.210
mas é isso que o TypeScript no final faz aqui para replicar

05:24.210 --> 05:26.700
esta enumeração construída em código JavaScript, quando

05:26.700 --> 05:28.560
ele compila o código.

05:28.560 --> 05:30.700
Aqui, como desenvolvedor, simplesmente temos

05:30.700 --> 05:32.680
estes números criados convenientemente.

05:32.680 --> 05:34.290
Se você pairar sobre eles, você

05:34.290 --> 05:36.520
verá o número que o armazenaremos ali e poderá

05:36.520 --> 05:39.883
usar estes números aqui de forma legível para humanos.

05:40.750 --> 05:42.840
Agora para os enumerativos, você também não

05:42.840 --> 05:44.790
está restrito ao comportamento padrão.

05:44.790 --> 05:47.470
Digamos por alguma razão, você não quer começar com

05:47.470 --> 05:50.533
zero como número inicial, então você pode adicionar um

05:50.533 --> 05:54.080
sinal de igual aqui após seu identificador e digitar qualquer outro

05:54.080 --> 05:56.610
número e agora admin é atribuído ao número cinco

05:56.610 --> 05:59.610
e os outros identificadores após o identificador onde

05:59.610 --> 06:02.150
você atribui o valor, pegue-o e simplesmente incremente

06:02.150 --> 06:04.580
este valor inicial.

06:04.580 --> 06:08.140
Então agora temos multa, seis, sete, ao invés de zero, um, dois.

06:08.140 --> 06:10.642
Naturalmente, você também pode atribuir seus próprios

06:10.642 --> 06:14.820
valores a todos esses identificadores, se precisar de seus próprios números.

06:14.820 --> 06:17.070
Você também não está restrito a números, você

06:17.070 --> 06:19.390
também pode ir com texto aqui, ou mesmo misturá-lo

06:19.390 --> 06:21.950
como eu estou fazendo aqui, qualquer coisa vai lá,

06:21.950 --> 06:24.900
mas muitas vezes o padrão de incremento de números que começam

06:24.900 --> 06:28.530
em zero é o que você quer, mas se você precisa de um comportamento diferente,

06:28.530 --> 06:31.530
se você quer usar uma string aqui, e depois um número aqui,

06:31.530 --> 06:34.850
e aqui também um número ou talvez uma string numérica, então você

06:34.850 --> 06:37.890
pode absolutamente fazer isso, a vantagem é, você o define

06:37.890 --> 06:40.880
lá em cima, e depois disso, você sempre se refere ao seu tipo

06:40.880 --> 06:48.270
de Papel a este tipo personalizado que você criou, a esta enumeração personalizada que você criou.

06:48.270 --> 06:50.320
E você usa isso em seus cheques e em

06:50.320 --> 06:52.970
suas atribuições de tipo, e você é bom.

06:52.970 --> 06:56.090
Esse é o poder do enum e é uma grande construção sempre

06:56.090 --> 06:59.420
que você precisar de identificadores que sejam legíveis

06:59.420 --> 07:03.173
por humanos e tenham algum valor mapeado nos bastidores.
