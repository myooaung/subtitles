WEBVTT

00:02.090 --> 00:05.740
Narrador: E isso é tudo para as interfaces e classes.

00:05.740 --> 00:08.190
Neste módulo, tivemos uma visão detalhada das aulas

00:08.190 --> 00:09.630
e do que podemos fazer ali.

00:09.630 --> 00:11.390
As aulas e o TypeScript,

00:11.390 --> 00:14.130
no final, apenas se baseiam em aulas para

00:14.130 --> 00:17.180
JavaScript, e eu já resumi um pouco antes

00:17.180 --> 00:18.720
neste módulo.

00:18.720 --> 00:20.710
As interfaces são uma coisa diferente.

00:20.710 --> 00:22.600
Eles só existem em TypeScript.

00:22.600 --> 00:24.670
Eles são um recurso TypeScript puro, ajudando

00:24.670 --> 00:27.390
você a escrever um código claro, claramente estruturado

00:27.390 --> 00:29.450
e muito explícito.

00:29.450 --> 00:33.010
Eles podem ajudá-lo a forçar as classes a ter certas características

00:33.010 --> 00:36.810
ou objetos em geral para ter uma certa estrutura.

00:36.810 --> 00:39.860
Eles podem ser usados como um tipo de função, como você aprendeu.

00:39.860 --> 00:42.490
Eles permitem propriedades opcionais e todos

00:42.490 --> 00:45.200
os métodos opcionais, a propósito, se você acrescentar

00:45.200 --> 00:48.290
um ponto de interrogação após o nome do método.

00:48.290 --> 00:50.190
Portanto, isso é algo que você pode usar.

00:50.190 --> 00:53.210
E, como você acabou de ver, ao ser compilado após

00:53.210 --> 00:55.870
cumprir seu papel de permitir que o TypeScript

00:55.870 --> 00:57.680
verifique seu código, nada é

00:57.680 --> 01:00.410
omitido para estas interfaces.

01:00.410 --> 01:02.300
O código é simplesmente despejado.

01:02.300 --> 01:05.080
As interfaces, no entanto, são uma característica

01:05.080 --> 01:07.420
poderosa para forçar suas classes ou

01:07.420 --> 01:09.140
seus objetos a terem uma certa

01:09.140 --> 01:12.400
estrutura e descrever claramente sua idéia de como

01:12.400 --> 01:14.810
um objeto deve se parecer.

01:14.810 --> 01:18.650
Agora, como você aprendeu, você pode substituí-los principalmente

01:18.650 --> 01:21.120
por tipos personalizados, se quiser.

01:21.120 --> 01:23.580
Você também pode implementar tipos personalizados,

01:23.580 --> 01:27.700
mas é simplesmente mais comum usar uma interface para isso, usar uma interface

01:27.700 --> 01:30.360
se você quiser descrever um objeto do que se você quiser

01:30.360 --> 01:32.180
implementá-lo.

01:32.180 --> 01:33.980
Tudo isso por razões históricas,

01:33.980 --> 01:36.490
porque nos primeiros dias do TypeScript, os tipos

01:36.490 --> 01:38.980
personalizados não podiam ser implementados

01:38.980 --> 01:40.710
ou usados como interfaces.

01:40.710 --> 01:42.610
Agora há mais flexibilidade, mas ainda

01:42.610 --> 01:45.150
é recomendável optar por interfaces se você trabalhar

01:45.150 --> 01:46.420
com objetos e se quiser descrever

01:46.420 --> 01:48.680
sua estrutura.

01:48.680 --> 01:50.620
Nós também os veremos durante todo este

01:50.620 --> 01:51.883
curso uma e outra vez.
