WEBVTT

00:02.170 --> 00:04.780
-: Amaç bir yapılacaklar listesi bileşeni oluşturmak ve bu

00:04.780 --> 00:06.330
nedenle burada kaynak klasörde yeni

00:06.330 --> 00:08.600
bir alt klasör, bileşenler ve oraya bir "yapılacaklarListesi"

00:08.600 --> 00:11.280
ekleyeceğim. tsx" dosyası, yapılacaklar

00:11.280 --> 00:13.690
listesi bileşenimi tutacaktır.

00:13.690 --> 00:15.370
Şimdi, bir react bileşeni oluşturmak

00:15.370 --> 00:17.030
için, React'i "react" den içe aktarmamız

00:17.030 --> 00:20.250
gerekiyor, aksi takdirde JXS bu dosyada çalışmayacaktır.

00:20.250 --> 00:22.820
Sonra yapılacaklar listesi sabitimi oluşturuyorum, bu

00:22.820 --> 00:24.530
sabit bir ok fonksiyonunu saklıyor ve

00:24.530 --> 00:26.990
elbette bunun bir ok fonksiyonu olması gerekmiyor, function

00:26.990 --> 00:30.320
anahtar kelimesiyle bir fonksiyon da kullanabilirsiniz.

00:30.320 --> 00:33.160
Şimdi bunu dışa aktaracağız.

00:33.160 --> 00:36.500
Şimdi ekstra typescript özelliklerimizi kullanalım ve bunun türünü

00:36.500 --> 00:39.370
react olarak ayarlayalım. fc bunun normal bir işlev

00:39.370 --> 00:42.010
değil, işlevsel bir bileşen olması gerektiğini

00:42.010 --> 00:43.950
belirtmek için.

00:43.950 --> 00:46.920
Dolayısıyla, react öğesi olarak nitelendirilebilecek

00:46.920 --> 00:49.790
bir şey döndürmediğimiz için bir hata alıyoruz.

00:49.790 --> 00:53.250
Yani burada, diyelim ki sırasız bir liste döndürmeliyiz.

00:53.250 --> 00:54.850
Burada bir liste oluşturmak istediğim

00:54.850 --> 00:58.000
için, şimdilik sırasız bir liste döndürmek mantıklı.

00:58.000 --> 01:02.740
Şimdi, bu sırasız listede, liste öğelerinin çıktısını almak istiyorum.

01:02.740 --> 01:07.230
Yani, burada, yapılacak işlerimizi almayı bekleyebiliriz ve bu bir dizidir

01:07.230 --> 01:09.240
ve bir dizide her öğenin bir kimliğe

01:09.240 --> 01:11.690
sahip olduğu bir nesnemiz vardır.

01:11.690 --> 01:15.627
Birinci yapılacak iş için t1 ve "Kursu bitir"

01:15.627 --> 01:18.100
gibi bir metin diyelim. Bu yalnızca bir öğedir, ancak elbette bu dizide

01:18.100 --> 01:18.933
bu türden birden

01:18.933 --> 01:20.800
fazla nesneniz olabilir.

01:20.800 --> 01:22.010
Burada listemizde, yapılacak işleri dinamik

01:22.010 --> 01:24.620
olarak çıkarabilir ve bunları bir liste öğeleri listesine eşleyebiliriz.

01:24.620 --> 01:29.620
Burada, tüm yapılacakları gözden geçiriyoruz, bu yerleşik bir JavaScript

01:30.250 --> 01:32.930
işlevi, tabii ki map işlevi ve bu dizideki

01:32.930 --> 01:35.070
her öğe için bir liste öğesi döndürüyoruz

01:35.070 --> 01:37.740
ve bu liste öğesinde "yapılacaklar

01:37.740 --> 01:41.530
"ı ayarlıyorum. text" ifadesini liste öğesine içerik olarak ekleyin ve React'in

01:41.530 --> 01:45.570
aslında yan yana duran tekrarlanan

01:45.570 --> 01:47.870
öğelerde istediği bu özel anahtar prop'u

01:47.870 --> 01:49.620
ekleyin.

01:49.620 --> 01:51.980
Burada, benzersiz bir şey seçmeliyiz ve ID benzersiz

01:51.980 --> 01:54.130
bir tanımlayıcı olarak nitelendirilmelidir.

01:54.130 --> 01:57.710
Bununla birlikte, yapılacaklar listesi oluşturuyoruz.

01:57.710 --> 02:00.470
Şimdi yapılacaklar listesi bileşenini uygulama

02:00.470 --> 02:02.860
bileşenine entegre edelim ve bunun için

02:02.860 --> 02:05.520
elbette uygulama bileşenine gidebilir, "TodoList"

02:05.520 --> 02:06.930
öğesini ". /components/TodoList"

02:06.930 --> 02:11.530
bu şekilde, ". tsx" uzantısı, burada kullandığımız derleme iş akışı tarafından

02:11.530 --> 02:14.350
otomatik olarak eklenecektir.

02:14.350 --> 02:17.160
Ve sonra burada div'imizin içinde "TodoList "i bu

02:17.160 --> 02:18.850
şekilde oluşturabiliriz.

02:18.850 --> 02:21.440
Şimdi bunu kaydedersek ve çalışan sayfaya geri

02:21.440 --> 02:24.190
dönersek, burada bir yapılacak iş görürüz.

02:24.190 --> 02:25.870
Stil berbat ve daha sonra daha

02:25.870 --> 02:29.350
iyi bir stil ekleyebiliriz, ancak şu an için bu iyi olmalı.

02:29.350 --> 02:31.680
Ancak bu gerçekçi bir yaklaşım değildir.

02:31.680 --> 02:35.620
Bu yapılacaklar listesi uygulamasını oluştururken, daha sonra henüz sahip

02:35.620 --> 02:37.950
olmadığımız ayrı bir bileşenle yeni yapılacaklar

02:37.950 --> 02:40.063
ekleyebilmek istiyorum.

02:40.063 --> 02:42.920
Ve muhtemelen yapılacak işleri bu uygulama

02:42.920 --> 02:45.570
bileşeninde yöneteceğiz çünkü burada,

02:45.570 --> 02:48.810
yapılacak işleri ekleyen bir bileşenimiz

02:48.810 --> 02:55.280
olacak ve bu bileşen bu uygulama bileşeniyle geri konuşabilecek.

02:55.280 --> 02:56.690
Burada, daha sonra to-dos

02:56.690 --> 02:59.650
dizimizi yönetiriz ve bu diziye to-dos ekleriz veya

02:59.650 --> 03:01.510
bu diziden to-dos sileriz.

03:01.510 --> 03:04.220
Yapılacaklar listesine daha sonra bu diziyi geçireceğiz.

03:04.220 --> 03:06.930
Dolayısıyla, henüz yönetmiyor olsak da, muhtemelen bu

03:06.930 --> 03:09.270
"yapılacaklar" dizisini yapılacaklar listesinde

03:09.270 --> 03:11.660
değil, uygulama bileşeninde tutacağız.

03:11.660 --> 03:15.010
Bu dizinin daha sonra burada sonlanacağı daha gerçekçi, bu yüzden

03:15.010 --> 03:16.740
şimdiden buraya taşıyabiliriz.

03:16.740 --> 03:20.093
Şimdi, bunu "TodoList "e aktarmamız gerekiyor. Bunun için elbette aksesuarlar kullanabiliriz.

03:20.930 --> 03:23.600
Yani yapılacaklar listesinde, bir öğe prop'unuz olabilir,

03:23.600 --> 03:25.640
isim elbette bize bağlıdır çünkü bu bileşeni

03:25.640 --> 03:28.370
tanımlıyoruz, prop'unun nasıl adlandırılması gerektiğini

03:28.370 --> 03:30.350
tanımlayabiliriz.

03:30.350 --> 03:32.100
"todos" dizimizi besleyebiliriz.

03:32.100 --> 03:35.010
Şimdi, IDE'nin bundan hoşlanmadığını zaten görüyoruz ve bunu

03:35.010 --> 03:37.820
kaydetmeye çalıştığımda da bir derleme hatası alıyoruz.

03:37.820 --> 03:40.650
"items" özelliği whatever türünde

03:40.650 --> 03:45.400
mevcut olmadığı için bir derleme hatası aldık.

03:45.400 --> 03:47.830
Dolayısıyla, temelde buradaki kesişim türünde mevcut

03:47.830 --> 03:50.440
değildir ve sonuçta "TodoList" tarafından alınan propların

03:50.440 --> 03:52.070
yapısını tanımlar. Çünkü React ile typescript kullanırken,

03:52.070 --> 03:55.300
çalıştığınız türler hakkında net olmanız gerekir.

03:55.300 --> 03:59.470
Bu sadece typescript'e bunun özel bir tür fonksiyon olduğunu söylediğiniz anlamına

03:59.470 --> 04:02.110
gelmez, hayır, aynı zamanda bazı bileşenlerde prop'lara

04:02.110 --> 04:05.250
güveniyorsanız, typescript'e bu prop'ların nasıl yapılandırıldıkları

04:05.250 --> 04:08.360
gibi nasıl görünmeleri gerektiğini söylediğiniz anlamına

04:08.360 --> 04:11.020
da gelir.

04:11.020 --> 04:14.860
Yapılacaklar listesi bileşeninde, burada prop'lar

04:14.860 --> 04:17.420
alıyoruz, doğru, bu normal React.

04:17.420 --> 04:19.400
Ve sahne malzemelerinin üzerinde muhtemelen bizim eşyalarımız var.

04:19.400 --> 04:23.530
Yani "items" adında bir prop'umuz var ve burada

04:23.530 --> 04:26.200
söylediğim şey gerçekten de

04:26.200 --> 04:30.323
buydu: "Bu items prop'una sahibim. Şimdi sorun şu ki, bu teknik olarak işe yarayabilir ancak typescript

04:31.420 --> 04:33.430
henüz iptal etmiyor.

04:33.430 --> 04:35.067
Burada typescript'e prop'umuzun bir "items"

04:35.067 --> 04:37.140
özelliğine sahip olması gerektiğini söylemedik.

04:37.140 --> 04:39.503
Bunu anlatmak için, buradaki işlev

04:39.503 --> 04:41.950
bileşeni türünün aslında genel bir

04:41.950 --> 04:45.063
tür olduğu gerçeğini kullanabiliriz.

04:45.063 --> 04:46.913
Burada beklediğimiz, her bileşenin sahip olduğu

04:47.840 --> 04:50.510
varsayılan çocuk prop'unun yanı sıra tüm ekstra prop'ları tanımlayabileceğimiz

04:50.510 --> 04:52.170
genel bir tür.

04:52.170 --> 04:54.250
Böylece buraya köşeli parantezler ekleyebilir

04:54.250 --> 04:58.132
ve buraya aldığımız bu "props" nesnesinin yapısını tanımlayan nesnemizi

04:58.132 --> 05:00.710
ekleyebiliriz veya kodumuzu daha yalın tutmak

05:00.710 --> 05:03.670
için bunu burada ekstra bir arayüzde yaparız ve bu tamamen

05:03.670 --> 05:06.170
isteğe bağlıdır.

05:06.170 --> 05:09.670
Yani burada yapılacaklar listesi aksesuarlarımız olabilir ve bu da

05:09.670 --> 05:12.350
aksesuarlarımızın nasıl göründüğünü açıklar.

05:12.350 --> 05:15.120
Ve burada, her nesnenin bir dize olan bir

05:15.120 --> 05:18.260
ID'ye ve bir dize olan bir metne sahip olduğu bir

05:18.260 --> 05:20.510
dizi nesneye sahip olduğumuz bir

05:20.510 --> 05:23.380
"items" anahtarı almayı bekliyorum.

05:23.380 --> 05:26.120
Burada yönettiğimiz veriler bunlar.

05:26.120 --> 05:30.020
Bir ID dizesi ve metin dizesi içeren

05:30.020 --> 05:32.850
bir nesne dizimiz var.

05:32.850 --> 05:34.370
Burada elde etmeyi beklediğim şey, bu

05:34.370 --> 05:36.070
tür nesnelerden oluşan bir dizi olan "props"

05:36.070 --> 05:38.940
ve eğer buradaysak, şimdi bu yapılacaklar listesi props arayüzüne işaret

05:38.940 --> 05:40.700
edebiliriz ve şimdi her şey yolunda. Şimdi typescript burada,

05:40.700 --> 05:42.670
bir items prop'umuzun olacağı

05:42.670 --> 05:45.040
prop'lar alacağımızı ve bu items

05:45.040 --> 05:48.640
prop'un her dizi elemanında bir ID anahtarımız ve

05:48.640 --> 05:52.145
bir metin anahtarımız olan

05:52.145 --> 05:55.000
bir dizi olacağını anlar.

05:55.000 --> 05:56.920
Şimdi bunu kaydedersek, derlenir

05:56.920 --> 05:58.870
ve tekrar çalışan çıktıyı alırız.

05:58.870 --> 05:59.850
Yani yine, bu React ile kullanılan bir typescript.

05:59.850 --> 06:02.390
Bunu sadece React'e veya typescript'e bunun işlevsel bir

06:02.390 --> 06:04.188
bileşen olduğunu söylemek için değil, aynı

06:04.188 --> 06:06.830
zamanda bu bileşenin sonunda alacağı prop'lar hakkında da kullanıyoruz

06:06.830 --> 06:10.000
ve bu bize tip güvenliği konusunda çok yardımcı oluyor.

06:10.000 --> 06:13.490
Burada yanlışlıkla "todos" olarak adlandırıldığını

06:13.490 --> 06:15.130
düşünmemi engelliyor. Hayır, bu desteklenmiyor, bir hata alıyoruz.

06:15.130 --> 06:19.060
Eşyalar.

06:19.060 --> 06:21.165
Hepiniz burada otomatik olarak tamamlandıklarını göreceksiniz.

06:21.165 --> 06:23.330
Yani burada typescript ile çalışırken kodlama

06:23.330 --> 06:24.910
çok daha kolay hale geliyor. Ve tabii ki typescript'in tüm avantajı da bu: kodlamayı

06:24.910 --> 06:27.160
basitleştiriyor, gereksiz hataları önlüyor ve gördüğünüz gibi bunu bir

06:27.160 --> 06:28.400
react uygulamasında da yapıyor.

06:28.400 --> 06:30.670
Tabii ki, daha işimiz bitmedi.

06:30.670 --> 06:34.420
Şu anda buradaki yapılacak işlerimiz asla değişmiyor

06:34.420 --> 06:36.640
ve ben bunu değiştirmek

06:36.640 --> 06:39.930
istiyorum, yeni yapılacak işler eklememize olanak

06:39.930 --> 06:44.120
tanıyan bir bileşene sahip olmak istiyorum.

06:44.120 --> 06:46.080
Şimdi bunun üzerinde çalışalım.
