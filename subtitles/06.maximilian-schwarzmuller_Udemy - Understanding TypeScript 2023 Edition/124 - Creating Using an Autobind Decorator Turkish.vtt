WEBVTT

00:02.220 --> 00:04.550
-: "this" anahtar kelimesini otomatik olarak bağlayan

00:04.550 --> 00:07.350
ekleyebileceğimiz bir dekoratörden bahsediyorum, böylece

00:07.350 --> 00:09.930
burada bind'ı çağırmak zorunda kalmayız.

00:09.930 --> 00:12.500
Şimdi açıkçası burada bind'ı çağırmak, yanlış

00:12.500 --> 00:14.160
bir şey yoksa büyük bir şey değil,

00:14.160 --> 00:16.460
ancak öğrendiklerimizi uygulamak istiyoruz

00:16.460 --> 00:20.220
ve bunu uygulamamızın birçok yerinde yapmamız gerekiyorsa, sadece

00:20.220 --> 00:22.730
ekleyebileceğimiz bir dekoratöre sahip olmak

00:22.730 --> 00:24.970
aslında daha kolay olabilir.

00:24.970 --> 00:27.100
Bu yüzden, buradaki bağlardan kurtulalım.

00:27.100 --> 00:30.010
Bunun yerine, buradaki sınıfın üzerine

00:30.010 --> 00:33.010
auto bind dekoratörünü ekleyeceğim ve bu

00:33.010 --> 00:34.920
dosyayı en azından biraz düzenli

00:34.920 --> 00:38.750
tutmak için buraya bazı yorumlar ekliyorum.

00:38.750 --> 00:40.490
ProjectInput Sınıfı

00:42.260 --> 00:44.790
Peki, dekoratör nedir?

00:44.790 --> 00:46.770
Dekoratör bir işlevdir, değil mi?

00:46.770 --> 00:48.130
Ve bunu ya buradaki fonksiyon

00:48.130 --> 00:51.383
dekorasyonuyla ya da bir fonksiyon ifadesi olarak bulabilirsiniz.

00:52.490 --> 00:54.780
Burada bir fonksiyon dekorasyonu kullanacağım

00:54.780 --> 00:57.780
ve buna autobind adını vereceğim, isim size kalmış.

00:57.780 --> 01:01.670
Ve bu dekoratör, bağlı olduğu metot adı olan hedefi serbest

01:01.670 --> 01:03.173
argüman olarak alacaktır,

01:04.430 --> 01:06.430
çünkü burada bir metot dekoratörü

01:06.430 --> 01:09.083
oluşturacağım.

01:09.980 --> 01:12.960
Ve ayrıca bu yöntemin

01:12.960 --> 01:15.720
tanımlayıcısı.

01:15.720 --> 01:18.370
Ah, özellik tanımlayıcısı çünkü yöntemler

01:18.370 --> 01:22.760
sonuçta sadece özelliklerdir, işlevleri tutan özellikler.

01:22.760 --> 01:24.400
Şimdi, bu neden bir yöntem dekoratörü?

01:24.400 --> 01:29.210
Çünkü fikir, bunu submitHandler'a bu şekilde ekleyebilmemiz

01:29.210 --> 01:32.210
ve bununla işimizin bitmesi.

01:32.210 --> 01:33.680
Amaç da bu.

01:33.680 --> 01:35.500
Henüz tam olarak o noktada değiliz

01:35.500 --> 01:38.143
ama sonuçta böyle olması gerekiyor.

01:39.090 --> 01:42.950
Şimdi, bunun çalışması için yukarıdaki fonksiyonumuza geri

01:42.950 --> 01:46.880
dönelim ve fonksiyon gövdesine ne girmesi gerekiyor?

01:46.880 --> 01:49.490
Orada, her şeyden önce orijinal

01:49.490 --> 01:51.950
yönteme erişmek istiyorum.

01:51.950 --> 01:56.593
Tanımlayıcı ile. değerini alırız, böylece başlangıçta

01:56.593 --> 01:59.380
tanımladığımız yöntemi saklarız.

01:59.380 --> 02:03.540
Sonra burada bir nesne olan ayarlanmış tanımlayıcımı oluşturmak

02:03.540 --> 02:04.873
istiyorum.

02:06.650 --> 02:11.090
PropertyDescriptor yazacağım aslında.

02:11.090 --> 02:13.880
Her zaman değiştirebilmemiz için yapılandırılabilir öğenin

02:13.880 --> 02:15.910
true olarak ayarlanması gerekir.

02:15.910 --> 02:17.573
Ve o zaman bir alıcıya ihtiyacımız var.

02:18.510 --> 02:21.770
Ve burada, işleve erişmeye çalıştığınızda

02:21.770 --> 02:24.270
çalıştırılması gereken getter.

02:24.270 --> 02:27.710
Burada, yukarıda çıkardığımız orijinal yöntemi

02:27.710 --> 02:29.220
kullanarak bağlı işlevi

02:29.220 --> 02:31.030
ayarlayacağız.

02:31.030 --> 02:34.063
Ve bunu bağlamak için arıyorum.

02:35.370 --> 02:36.203
Ardından, bu bağlı

02:37.860 --> 02:40.170
işlevi döndürmek istiyorum ve hepsi

02:40.170 --> 02:41.603
bu kadar olmalı.

02:42.510 --> 02:44.190
Ve elbette genel olarak, bu nedenle

02:44.190 --> 02:46.620
bu yöntem dekoratöründe ayarlanmış tanımlayıcıyı

02:46.620 --> 02:48.653
döndüreceğim.

02:49.510 --> 02:52.880
Şimdi submitHandler'da bununla ilgili bir hata alıyoruz.

02:52.880 --> 02:56.020
Dekoratörler için deneysel destek, temelde etkinleştirilmesi

02:56.020 --> 02:57.960
gereken bir özelliktir.

02:57.960 --> 03:00.400
Bu yüzden tsconfig dosyasına gitmeliyiz

03:00.400 --> 03:02.320
ve orada sadece aşağı kaydırın.

03:02.320 --> 03:05.770
"experimentalDecorators" seçeneğini bulmalısınız,

03:05.770 --> 03:07.450
sadece bunu yorumlayın.

03:07.450 --> 03:09.980
Ve önüne bir virgül ekleyin.

03:09.980 --> 03:14.183
Bunu kaydedin ve ardından tür derleme işlemini yeniden başlatın.

03:15.180 --> 03:17.700
Şimdi, burada bana hala bazı hatalar gösteriyor, eğer

03:17.700 --> 03:18.913
bunu genişletirsem, methodName

03:20.212 --> 03:23.170
bildiriliyor, ancak değeri asla okunmuyor.

03:23.170 --> 03:25.410
Uygulamada. Dördüncü hat.

03:25.410 --> 03:26.760
Burada şuna atıfta bulunuyor,

03:26.760 --> 03:29.020
buradan aldığım ve aslında hiç kullanmadığım

03:29.020 --> 03:30.940
bu argümanı aldım.

03:30.940 --> 03:34.370
Aynı şey target için de geçerli, onu hiç kullanmadım.

03:34.370 --> 03:36.343
Şimdi, bunu çözmenin iki yolu var.

03:37.200 --> 03:39.610
Bunun bir yolu tsconfig'e gitmek ve

03:39.610 --> 03:42.813
burada katılık kurallarımızı gevşetmektir.

03:44.160 --> 03:46.740
noUnusedParameters, eğer bunu false olarak ayarlarsak aslında

03:46.740 --> 03:49.090
kullanılmayan parametrelere izin vermiş oluruz.

03:49.090 --> 03:50.670
Yani, bu bir şey olabilir

03:50.670 --> 03:52.910
ya da alt çizgi ve alt çizgi

03:52.910 --> 03:56.653
iki özel adlarını kullanırsınız.

03:57.770 --> 04:01.860
Bu aslında, typescript ve javascript için bu değerleri kullanmayacağınızın farkında

04:01.860 --> 04:03.130
olduğunuza dair bir ipucudur,

04:03.130 --> 04:04.800
ancak bunları kabul etmeniz gerekir

04:04.800 --> 04:05.930
çünkü peşinde oldukları

04:05.930 --> 04:08.740
argümana ihtiyacınız vardır.

04:08.740 --> 04:11.810
Şimdi bunu kaydederseniz, bu hata olmadan derlenir

04:11.810 --> 04:14.700
ve geri dönüp buraya hello girip bunu gönderirsek,

04:14.700 --> 04:17.040
otomatik bağlama dekoratörümüz sayesinde

04:17.040 --> 04:20.060
şimdi hala çalışır.

04:20.060 --> 04:23.120
Bu da umarım bu dekoratörün gerçek bir kullanıma sahip

04:23.120 --> 04:24.950
olabileceğini gösterir.

04:24.950 --> 04:27.530
Tabii ki burada aslında bind'ı çağırmaktan

04:27.530 --> 04:29.510
biraz daha fazla iş var.

04:29.510 --> 04:32.120
Ancak bunun, hepsinin bağlanması gereken daha fazla yöntemde

04:32.120 --> 04:33.820
kullanıldığını hayal edin.

04:33.820 --> 04:36.140
Bunu manuel olarak çağırmak zorunda kalmamak

04:36.140 --> 04:38.140
size yeniden zaman kazandırabilir ve

04:38.140 --> 04:40.430
ayrıca unuttuğunuz durumlarda bazı potansiyel

04:40.430 --> 04:42.343
hataları önleyebilir.
