WEBVTT

00:02.300 --> 00:03.420
Tutor: Aby zacząć,

00:03.420 --> 00:07.060
uruchomię npm start, aby wywołać serwer deweloperski.

00:07.060 --> 00:09.384
Który służy do obsługi pliku HTML i zakładki

00:09.384 --> 00:13.434
menu, tsc-w do uruchamiania typów kompilacji w trybie watch, dzięki

00:13.434 --> 00:17.988
czemu plik JavaScript naszej aplikacji jest ciągle przebudowywany i możemy

00:17.988 --> 00:21.740
go oglądać w uruchomionej aplikacji.

00:21.740 --> 00:24.480
W tej chwili oczywiście nasza aplikacja nie wygląda zbyt wymyślnie.

00:24.480 --> 00:26.340
To pusta strona.

00:26.340 --> 00:27.850
Aby więc zacząć, można

00:27.850 --> 00:30.250
to zrobić na wiele sposobów.

00:30.250 --> 00:35.040
Teraz chcę zacząć od uczynienia tego formularza widocznym.

00:35.040 --> 00:36.660
I teraz, jest wiele sposobów,

00:36.660 --> 00:38.790
faktycznie napiszę tę aplikację w podejściu

00:38.790 --> 00:40.208
obiektowym.

00:40.208 --> 00:43.303
Co jest w 100% opcjonalne, ale ponieważ nauczyliśmy

00:43.303 --> 00:46.080
się o klasach i tak dalej, chcę faktycznie

00:46.080 --> 00:48.083
pokazać, jak to działa i dlatego

00:48.083 --> 00:51.140
użyję tego podejścia.

00:51.140 --> 00:51.973
W kluczu aplikacji

00:51.973 --> 00:55.510
dodam więc nową klasę i nazwę ją Project Input, choć nazwa

00:55.510 --> 00:59.120
klasy oczywiście zależy wyłącznie od Ciebie.

00:59.120 --> 01:00.570
W tej klasie, naszym celem

01:00.570 --> 01:04.590
jest uzyskanie dostępu do tego szablonu i formularza w nim oraz

01:04.590 --> 01:08.220
uzyskanie dostępu do tego div'a tutaj, a następnie wyrenderowanie

01:08.220 --> 01:11.710
naszego szablonu w tym div'ie na końcu.

01:11.710 --> 01:15.160
Czyli zawartość szablonu, formularza w tym divie.

01:15.160 --> 01:17.130
To musi być nasz cel.

01:17.130 --> 01:18.850
Teraz, aby to osiągnąć, tutaj

01:18.850 --> 01:20.588
w Project Input, dodam konstruktor,

01:20.588 --> 01:23.450
w którym w końcu chcę uzyskać dostęp do mojego

01:23.450 --> 01:25.920
szablonu i do miejsca, w którym powinien

01:25.920 --> 01:27.970
być renderowany.

01:28.830 --> 01:33.310
I dla tego tutaj, dodam dwie właściwości w locie z tym,

01:33.310 --> 01:37.460
właściwość elementu szablonu, a następnie również

01:37.460 --> 01:40.180
właściwość elementu hosta.

01:40.180 --> 01:42.420
Nazwy w 100% zależą od Ciebie.

01:42.420 --> 01:44.990
W końcu mój pomysł polega na tym, że element hosta przechowuje

01:44.990 --> 01:46.970
referencję do elementu, w którym chcę

01:46.970 --> 01:49.650
wyrenderować zawartość mojego szablonu, a element

01:49.650 --> 01:51.427
template daje mi dostęp do szablonu,

01:51.427 --> 01:54.050
który przechowuje tę zawartość.

01:54.050 --> 01:56.120
Teraz, aby uzyskać dostęp do tego szablonu,

01:56.120 --> 01:59.690
zajrzyjmy do index html i zobaczmy, jak możemy zidentyfikować szablon,

01:59.690 --> 02:01.870
który przechowuje formularz.

02:01.870 --> 02:04.050
Cóż, ma ten identyfikator projektu-wkładu,

02:04.050 --> 02:06.120
więc wygląda to na dobrą strategię.

02:06.120 --> 02:08.510
Więc tutaj możemy użyć document

02:08.510 --> 02:11.022
getElementById project-input.

02:11.022 --> 02:15.410
Dzięki temu mamy dostęp do tego elementu szablonu.

02:15.410 --> 02:17.820
Teraz kilka ważnych rzeczy.

02:17.820 --> 02:21.320
Tutaj otrzymujemy błąd, że element szablonu jest właściwością,

02:21.320 --> 02:23.900
która nie istnieje w projekcie-wejściu.

02:23.900 --> 02:28.140
Teraz, aby się tego pozbyć, powinniśmy właściwie dodać to

02:28.140 --> 02:31.610
jako nowe pole tutaj bezpośrednio w klasie.

02:31.610 --> 02:34.050
Wtedy możemy spokojnie przypisać do niego.

02:34.050 --> 02:36.040
Teraz tutaj chcę też jasno określić typ, który

02:36.040 --> 02:37.450
byłby tam przechowywany.

02:37.450 --> 02:41.070
I to będzie element szablonu HTML.

02:41.070 --> 02:43.270
Ten typ jest globalnie dostępny,

02:43.270 --> 02:47.380
ponieważ w pliku tsconfig js dodałem DOM jako lib i to dodaje

02:47.380 --> 02:50.360
wszystkie te typy DOM, wszystkie te typy

02:50.360 --> 02:53.777
elementów HTML jako typy typecript do całego

02:53.777 --> 02:55.493
projektu.

02:57.280 --> 03:00.400
Teraz to infuduje nowy błąd tutaj jednak widać,

03:00.400 --> 03:03.110
że w końcu to może być null, gdy dostaniemy

03:03.110 --> 03:04.760
element po ID, oczywiście

03:04.760 --> 03:08.510
wiemy, że to nie zawiedzie ale typescript nie ma szans tego

03:08.510 --> 03:09.850
wiedzieć bo nie będzie

03:09.850 --> 03:12.757
analizował naszego pliku html.

03:12.757 --> 03:16.210
Więc może żaden element o tym identyfikatorze nie istnieje

03:16.210 --> 03:18.210
i dlatego to dałoby null.

03:18.210 --> 03:20.680
Teraz tutaj mówimy, że nie przechowujemy tam

03:20.680 --> 03:23.920
null, tylko przechowujemy element szablonu HTML.

03:23.920 --> 03:25.800
Aby więc wyeliminować to niebezpieczeństwo,

03:25.800 --> 03:29.470
musimy powiedzieć typescriptowi, że to nigdy nie będzie null.

03:29.470 --> 03:31.290
A wiesz jak możesz to zrobić?

03:31.290 --> 03:33.580
Można tu dodać wykrzyknik.

03:33.580 --> 03:35.020
Alternatywą oczywiście,

03:35.020 --> 03:36.170
tylko po to, aby również

03:36.170 --> 03:37.820
pokazać to, jeśli nie byłbyś

03:37.820 --> 03:41.640
pewien, jest przechowywanie go jako powiedzmy w stałej, a następnie

03:41.640 --> 03:46.640
sprawdzenie, czy element szablonu jest prawdą, więc jeśli nie jest null, a następnie

03:46.900 --> 03:48.600
przechowywanie go wewnątrz

03:48.600 --> 03:51.490
tego sprawdzenia if tutaj.

03:51.490 --> 03:52.720
Teraz nadal dostajemy

03:52.720 --> 03:54.190
błąd, ale to będzie inny błąd,

03:54.190 --> 03:55.840
do którego wrócę później.

03:55.840 --> 03:58.060
Na razie to by załatwiło sprawę, jeśli

03:58.060 --> 03:59.650
nie jesteśmy pewni.

03:59.650 --> 04:01.930
Teraz jednak tutaj jestem pewien.

04:01.930 --> 04:02.763
A przy okazji, jeśli nie

04:02.763 --> 04:03.596
jesteś pewien, powinieneś

04:03.596 --> 04:06.000
zapewnić fallback w innym przypadku oczywiście.

04:06.000 --> 04:08.530
Ale tutaj jestem pewien, że dostaniemy taki element

04:08.530 --> 04:10.544
i dlatego możemy po prostu dodać po nim wykrzyknik,

04:10.544 --> 04:11.803
żeby powiedzieć maszynopisowi:

04:11.803 --> 04:13.710
"Wszystko dobrze.

04:13.710 --> 04:17.300
Uzyskamy dostęp do elementu o tym identyfikatorze. Teraz, jak wspomniałem, mamy jednak jeszcze jeden

04:17.300 --> 04:18.133
błąd.

04:18.133 --> 04:20.220
Brakuje zawartości właściwości w elemencie HTML typu.

04:20.220 --> 04:24.270
Problem polega na tym, że mówimy typescriptowi, że będziemy

04:24.270 --> 04:27.140
przechowywać element szablonu, który jest

04:27.140 --> 04:29.550
typu html template element.

04:29.550 --> 04:32.160
I rzeczywiście tak będzie.

04:32.160 --> 04:34.800
Teraz oczywiście getElementById

04:34.800 --> 04:38.730
nie wie, który element ostatecznie zwróci.

04:38.730 --> 04:41.130
Po prostu wie, że byłby to jakiś element html, ale

04:41.130 --> 04:43.920
nie, która specjalistyczna wersja tego elementu.

04:43.920 --> 04:46.600
Jeśli jest to div, akapit, przycisk lub jak w

04:46.600 --> 04:48.720
tym przypadku element szablonu.

04:48.720 --> 04:51.387
getElementById nie ma szans, aby to wiedzieć.

04:51.387 --> 04:54.590
Aby więc powiedzieć maszynopisowi o typie, który

04:54.590 --> 04:57.460
oczywiście też znamy z całą pewnością.

04:57.460 --> 05:00.660
Możemy zastosować rzutowanie typu.

05:00.660 --> 05:02.260
O tym też się dowiedziałeś.

05:02.260 --> 05:03.730
Istnieją dwie składnie, których możesz użyć.

05:03.730 --> 05:05.950
Nawiasy kątowe na początku,

05:05.950 --> 05:07.690
a następnie typ, na który

05:07.690 --> 05:10.130
chcesz rzucić to, że mówisz typeScript,

05:10.130 --> 05:11.847
"Hej!

05:11.847 --> 05:12.700
Rzecz, wyrażenie

05:12.700 --> 05:15.840
przychodzące po tym tutaj, to będzie tego typu. lub alternatywnie dodajesz jako element szablonu HTML, który

05:15.840 --> 05:17.650
jest podejściem, którego bym użył.

05:17.650 --> 05:21.200
I dzięki temu gwarantujesz typescriptowi, że

05:21.200 --> 05:23.040
to, co pobierasz tutaj, nie

05:23.040 --> 05:25.700
będzie null i będzie tego typu.

05:25.700 --> 05:27.950
Wiele mówi się o wyborze tego, ale jest to częste zadanie

05:30.027 --> 05:30.860
i ważne jest, aby dobrze

05:30.860 --> 05:32.016
je wykonać.

05:32.016 --> 05:33.630
Teraz przejdźmy do elementu gospodarza.

05:33.630 --> 05:35.563
Tutaj powinniśmy również dodać

05:36.890 --> 05:39.360
element hosta jako pole i wiemy, że element

05:39.360 --> 05:43.350
hosta, kiedy faktycznie chcemy wyrenderować nasz projekt-wkład,

05:43.350 --> 05:45.960
będzie w końcu tym divem tutaj.

05:45.960 --> 05:48.560
To właśnie tam chcę wyrenderować mój formularz.

05:48.560 --> 05:51.410
Tak więc, tutaj możemy powiedzieć, że element HTML div.

05:51.410 --> 05:54.000
To jest typ elementu, do którego zamierzamy to dodać.

05:54.000 --> 05:57.730
Możemy też być nieco mniej konkretni i po prostu powiedzieć element

05:57.730 --> 06:00.260
HTML, ponieważ tutaj naprawdę nie obchodzi

06:00.260 --> 06:02.740
mnie, czy jest to div, czy nie.

06:02.740 --> 06:04.970
Ale skoro wiemy to z całą

06:04.970 --> 06:08.400
pewnością, to dlaczego nie dodać?

06:08.400 --> 06:10.250
Teraz chcę uzyskać dostęp do tego div oczywiście,

06:10.250 --> 06:11.263
gdzie to powinno być

06:12.110 --> 06:14.850
dodane i jeśli mamy spojrzenie na indeks. html, widzimy, że możemy ponownie zidentyfikować

06:14.850 --> 06:16.530
ten div po ID.

06:16.530 --> 06:18.970
ID aplikacji w tym przypadku.

06:18.970 --> 06:19.945
Teraz więc, z powrotem

06:19.945 --> 06:24.640
w app ts, możemy jeszcze raz użyć document getElementById i sięgnąć do elementu o id app.

06:24.640 --> 06:28.780
Teraz mamy te same problemy co wcześniej, this może

06:28.780 --> 06:32.920
być null, więc musimy dodać wykrzyknik, bo znowu

06:32.920 --> 06:35.112
wiemy z całą pewnością, że

06:35.112 --> 06:39.620
nie będzie, a getElementById nie wie, że będzie to element

06:39.620 --> 06:42.283
HTML div, więc, powinniśmy rzucić

06:43.430 --> 06:46.030
to również tutaj.

06:46.030 --> 06:48.150
I dzięki temu możemy teraz znaleźć sposób na

06:48.150 --> 06:51.210
uzyskanie dostępu do wszystkich potrzebnych nam elementów.

06:51.210 --> 06:53.990
Cóż, dużo się o tym mówiło.

06:53.990 --> 06:56.070
Z tym niestety nie osiągnęliśmy wiele.

06:56.070 --> 06:59.140
Mamy dostęp do tych elementów, ale

06:59.140 --> 07:01.970
nic tam nie renderujemy.

07:01.970 --> 07:03.940
Kontynuujmy więc ten temat.

07:03.940 --> 07:05.790
W tym celu musimy zaimportować zawartość

07:05.790 --> 07:08.020
z tego elementu szablonu, czyli w zasadzie zaimportować

07:08.020 --> 07:10.620
to, co znajduje się wewnątrz znaczników szablonu i wyrenderować

07:10.620 --> 07:11.760
to do DOM.

07:11.760 --> 07:15.520
Możemy to zrobić właśnie tutaj w konstruktorze, ponieważ

07:15.520 --> 07:17.603
mój pomysł i oczywiście to tylko

07:18.510 --> 07:20.270
mój pomysł, możesz ustawić

07:20.270 --> 07:21.870
to inaczej.

07:21.870 --> 07:22.940
Ale mój pomysł polega na tym,

07:22.940 --> 07:24.550
że kiedy tworzymy nową instancję tej

07:24.550 --> 07:26.430
klasy, natychmiast chcę renderować formularz,

07:26.430 --> 07:28.250
który należy do tej instancji.

07:28.250 --> 07:30.190
Zrobimy to więc bezpośrednio w konstruktorze.

07:30.190 --> 07:31.770
Tam możemy uzyskać nasz importowany

07:31.770 --> 07:34.420
węzeł lub importowaną zawartość HTML lub jakkolwiek

07:34.420 --> 07:37.430
chcesz to nazwać, którą możemy uzyskać za pomocą

07:37.430 --> 07:40.627
dokumentu importNode i jest to metoda dostarczona

07:40.627 --> 07:44.917
na globalnym obiekcie dokumentu i do importNode przekazujesz wskaźnik

07:45.860 --> 07:49.260
na swój element szablonu.

07:49.260 --> 07:52.650
Więc ten element szablonu na końcu, a dokładnie nie element,

07:52.650 --> 07:54.410
ale zawartość kropki tam.

07:54.410 --> 07:57.010
Content jest właściwością, która

07:57.010 --> 08:00.891
istnieje na elementach szablonu HTML i po prostu

08:00.891 --> 08:05.320
daje odniesienie do zawartości szablonu.

08:05.320 --> 08:07.480
Czyli do kodu HTML pomiędzy tekstem szablonu.

08:07.480 --> 08:09.520
ImportNode przyjmuje również

08:09.520 --> 08:13.306
drugi argument, który określa, czy powinien zaimportować

08:13.306 --> 08:15.670
to z głębokim klonem, czy nie.

08:15.670 --> 08:17.940
Więc wszystkie poziomy zagnieżdżania wewnątrz szablonu i zdecydowanie

08:17.940 --> 08:19.630
chcę to zrobić, więc dostarczę tutaj true.

08:19.630 --> 08:22.570
Teraz mamy importowanyNode i jak zobaczysz,

08:22.570 --> 08:26.340
jest to fragment dokumentu typu, który typescript założył

08:26.340 --> 08:28.830
lub wywnioskował automatycznie.

08:28.830 --> 08:30.770
Teraz możemy użyć tego importowanego

08:30.770 --> 08:34.910
węzła i oczywiście chcę go użyć do renderowania jakiejś treści.

08:34.910 --> 08:36.960
W tym celu dodam nową

08:36.960 --> 08:40.970
metodę, prywatną, którą nazwę attach.

08:40.970 --> 08:42.810
Nie musisz tego robić, chcę tylko podzielić

08:42.810 --> 08:45.150
moją logikę wyboru i renderowania.

08:45.150 --> 08:46.390
Wewnątrz attach sięgnę

08:46.390 --> 08:51.270
do elementu hosta, a więc miejsca, w którym rzeczywiście chcę wyrenderować

08:51.270 --> 08:54.930
moją treść i wywołam insertAdjacentElement, który jest

08:54.930 --> 08:57.840
domyślną metodą udostępnianą przez przeglądarkę

08:57.840 --> 09:00.770
na końcu w JavaScript.

09:00.770 --> 09:02.980
Aby wstawić element HTML insert adjacent

09:02.980 --> 09:04.340
element, po pierwsze pobiera

09:04.340 --> 09:08.778
opis miejsca, w którym ma być wstawiony, więc tam można go wstawić po początku

09:08.778 --> 09:13.180
elementu, na który się kierujemy, więc zaraz po tagu otwierającym elementu

09:13.180 --> 09:17.850
hosta, przed początkiem lub przed tagiem otwierającym, przed tagiem końcowym

09:17.850 --> 09:20.870
lub po tagu końcowym.

09:20.870 --> 09:23.570
I tutaj pójdę po begin, aby wstawić

09:23.570 --> 09:27.020
go na samym początku tagu otwierającego.

09:27.020 --> 09:30.580
I wtedy rzeczą, którą chcę wstawić jest mój

09:30.580 --> 09:33.053
importowanyNode jednak po pierwsze

09:34.900 --> 09:39.140
jest to stała dostępna tylko w konstruktorze, a po

09:39.140 --> 09:42.970
drugie jest to fragment dokumentu.

09:42.970 --> 09:44.630
Nie mogliśmy go tak wstawić.

09:44.630 --> 09:46.896
Zamiast tego musimy uzyskać dostęp do konkretnego elementu

09:46.896 --> 09:48.240
HTML w nim, który możemy przechowywać

09:48.240 --> 09:49.800
w innym elemencie właściwości.

09:49.800 --> 09:52.770
Które musimy również dodać jako pole tam na górze,

09:52.770 --> 09:55.560
które może być typu elementu HTML lub w naszym

09:55.560 --> 09:58.270
przypadku właściwie, wiemy, że będzie wewnątrz

09:58.270 --> 10:02.500
szablonu tutaj, więc będzie to formularz.

10:02.500 --> 10:05.790
To jest pierwszy element w szablonie.

10:05.790 --> 10:07.010
Więc tutaj możemy powiedzieć,

10:07.010 --> 10:09.470
że będzie to element formularza HTML, a następnie

10:09.470 --> 10:10.960
tutaj, ten element jest równy

10:10.960 --> 10:15.200
importNode firstElementChild, teraz musimy tylko powiedzieć typescriptowi

10:15.200 --> 10:20.106
ponownie, że będzie to element formularza HTML.

10:20.106 --> 10:22.199
Teraz ten element jest już konkretną właściwością,

10:22.199 --> 10:25.510
która wskazuje na węzeł, który chcemy wstawić.

10:25.510 --> 10:28.360
Więc tam na dole, w insertAdjacentElement,

10:28.360 --> 10:31.110
wstawiamy ten element tutaj.

10:31.110 --> 10:33.690
Teraz musimy się tylko upewnić, że tutaj

10:33.690 --> 10:36.350
w konstruktorze, na końcu, że wywołamy

10:36.350 --> 10:38.460
attach, więc tę prywatną metodę

10:38.460 --> 10:39.950
attach, aby ten kod również

10:39.950 --> 10:42.260
się wykonał.

10:42.260 --> 10:44.290
A teraz z całym formatowaniem,

10:44.290 --> 10:46.620
tak wygląda mój kod.

10:46.620 --> 10:48.200
Więc to teraz jest klasa wejściowa

10:48.200 --> 10:51.460
projektu i teoretycznie, gdy ją zainstaluję, powinna

10:51.460 --> 10:53.950
wyrenderować formularz.

10:53.950 --> 10:56.920
A teraz spróbujmy.

10:56.920 --> 10:59.440
Poniżej klasy, po prostu stwórzmy nową stałą, prjInput

10:59.440 --> 11:01.120
na przykład, nazwa zależy od ciebie.

11:01.120 --> 11:05.415
I nazwij nowy projekt Wejście w taki sposób.

11:05.415 --> 11:08.930
I jeśli teraz to zapiszemy, to powinno się skompilować

11:08.930 --> 11:11.783
i przeładować, a jeśli wrócisz do przeglądarki,

11:11.783 --> 11:14.160
rzeczywiście powinieneś zobaczyć ten

11:14.160 --> 11:16.050
formularz tutaj.

11:16.050 --> 11:17.990
Więc to jest całkiem niezłe, bo dzięki

11:17.990 --> 11:20.660
temu zrobiliśmy pierwszy bardzo ważny krok.

11:20.660 --> 11:22.450
Mamy oddaną formę

11:22.450 --> 11:26.930
i mimo, że wiele brakuje, to lepsze

11:26.930 --> 11:29.150
to niż nic.

11:29.150 --> 11:31.630
Ten formularz pochodzi z pliku index html

11:31.630 --> 11:33.010
i jest renderowany za

11:33.010 --> 11:36.430
pomocą naszego obiektowego kodu typescript.
