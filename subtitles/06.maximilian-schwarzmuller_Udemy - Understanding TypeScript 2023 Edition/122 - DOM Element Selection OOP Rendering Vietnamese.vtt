WEBVTT

00:02.300 --> 00:03.420
Tutor: Để bắt đầu,

00:03.420 --> 00:07.060
ở đây tôi sẽ chạy npm start để hiển thị máy chủ phát triển đó.

00:07.060 --> 00:09.384
Phục vụ tệp HTML và tab menu, tsc-w

00:09.384 --> 00:13.434
để bắt đầu các kiểu biên dịch ở chế độ xem để tệp JavaScript

00:13.434 --> 00:17.988
ứng dụng của chúng tôi được xây dựng lại liên tục và chúng tôi có

00:17.988 --> 00:21.740
thể xem tệp đó trong ứng dụng đang chạy.

00:21.740 --> 00:24.480
Tất nhiên, ngay bây giờ, ứng dụng của chúng ta trông không quá lạ mắt.

00:24.480 --> 00:26.340
Đó là một trang trống.

00:26.340 --> 00:27.850
Vì vậy, để bắt đầu,

00:27.850 --> 00:30.250
có nhiều cách để làm điều đó.

00:30.250 --> 00:35.040
Bây giờ, tôi muốn bắt đầu với việc hiển thị biểu mẫu này.

00:35.040 --> 00:36.660
Và bây giờ, có nhiều cách, tôi

00:36.660 --> 00:38.790
sẽ thực sự viết ứng dụng này theo cách tiếp

00:38.790 --> 00:40.208
cận hướng đối tượng.

00:40.208 --> 00:43.303
Đó là 100% tùy chọn nhưng vì chúng ta đã học về

00:43.303 --> 00:46.080
các lớp học, v.v., tôi thực sự muốn chỉ

00:46.080 --> 00:48.083
ra cách thức hoạt động của nó

00:48.083 --> 00:51.140
và do đó tôi sẽ sử dụng phương pháp này.

00:51.140 --> 00:51.973
Vì vậy, trong khóa

00:51.973 --> 00:55.510
ứng dụng, tôi sẽ thêm một lớp mới và tôi sẽ đặt tên cho nó là Đầu vào

00:55.510 --> 00:59.120
dự án mặc dù tên lớp tất nhiên là hoàn toàn tùy thuộc vào bạn.

00:59.120 --> 01:00.570
Bây giờ trong lớp này,

01:00.570 --> 01:04.590
mục tiêu của chúng ta là có quyền truy cập vào mẫu này và biểu mẫu

01:04.590 --> 01:08.220
trong đó và để có quyền truy cập vào div này tại đây, sau

01:08.220 --> 01:11.710
đó kết xuất mẫu của chúng ta trong div đó ở cuối.

01:11.710 --> 01:15.160
Vì vậy, nội dung của mẫu, biểu mẫu trong div đó.

01:15.160 --> 01:17.130
Đó phải là mục tiêu của chúng tôi.

01:17.130 --> 01:18.850
Bây giờ để đạt được điều này,

01:18.850 --> 01:20.588
ở đây trong Đầu vào dự án, tôi

01:20.588 --> 01:23.450
sẽ thêm một hàm tạo mà cuối cùng tôi muốn có quyền

01:23.450 --> 01:25.920
truy cập vào mẫu của mình và đến nơi mà

01:25.920 --> 01:27.970
nó sẽ được hiển thị.

01:28.830 --> 01:33.310
Và đối với điều này ở đây, tôi sẽ nhanh chóng thêm hai

01:33.310 --> 01:37.460
thuộc tính, thuộc tính phần tử mẫu và sau đó là

01:37.460 --> 01:40.180
thuộc tính phần tử máy chủ.

01:40.180 --> 01:42.420
Tên là 100% tùy thuộc vào bạn.

01:42.420 --> 01:44.990
Cuối cùng, ý tưởng của tôi là phần tử máy chủ

01:44.990 --> 01:46.970
đó, giữ một tham chiếu đến phần tử

01:46.970 --> 01:49.650
mà cuối cùng tôi muốn hiển thị nội dung mẫu của

01:49.650 --> 01:51.427
mình và tốt, phần tử mẫu cho phép

01:51.427 --> 01:54.050
tôi truy cập vào mẫu chứa nội dung này.

01:54.050 --> 01:56.120
Bây giờ để có quyền truy cập vào mẫu

01:56.120 --> 01:59.690
đó, chúng ta hãy xem chỉ mục html và xem cách chúng tôi có

01:59.690 --> 02:01.870
thể xác định mẫu chứa biểu mẫu.

02:01.870 --> 02:04.050
Chà, nó có ID đầu vào dự án này, vì vậy

02:04.050 --> 02:06.120
đó có vẻ là một chiến lược tốt.

02:06.120 --> 02:08.510
Vì vậy, ở đây chúng ta có thể sử dụng tài

02:08.510 --> 02:11.022
liệu đầu vào dự án getElementById.

02:11.022 --> 02:15.410
Điều này cho phép chúng tôi truy cập vào phần tử mẫu này.

02:15.410 --> 02:17.820
Bây giờ, một vài điều quan trọng.

02:17.820 --> 02:21.320
Ở đây, chúng tôi gặp lỗi rằng phần tử mẫu là một thuộc

02:21.320 --> 02:23.900
tính không tồn tại trên đầu vào dự án.

02:23.900 --> 02:28.140
Bây giờ để loại bỏ điều này, chúng ta thực sự nên thêm

02:28.140 --> 02:31.610
nó như một trường mới ở đây ngay trong lớp.

02:31.610 --> 02:34.050
Sau đó, chúng ta có thể gán cho nó một cách an toàn.

02:34.050 --> 02:36.040
Bây giờ ở đây, tôi cũng muốn rõ ràng về loại

02:36.040 --> 02:37.450
sẽ được lưu trữ trong đó.

02:37.450 --> 02:41.070
Và đó sẽ là một phần tử mẫu HTML.

02:41.070 --> 02:43.270
Loại này có sẵn trên toàn cầu vì

02:43.270 --> 02:47.380
trong tệp js tsconfig, tôi đã thêm DOM dưới dạng lib và

02:47.380 --> 02:50.360
thêm tất cả các loại DOM này, tất cả các loại

02:50.360 --> 02:53.777
phần tử HTML này dưới dạng các loại bản ghi cho

02:53.777 --> 02:55.493
toàn bộ dự án.

02:57.280 --> 03:00.400
Bây giờ, điều này gây ra một lỗi mới ở đây, tuy nhiên, bạn

03:00.400 --> 03:03.110
thấy rằng cuối cùng, điều này có thể là null khi chúng

03:03.110 --> 03:04.760
tôi lấy phần tử theo ID, tất nhiên

03:04.760 --> 03:08.510
chúng tôi biết rằng nó sẽ không bị lỗi nhưng TypeScript không có cơ

03:08.510 --> 03:09.850
hội biết điều này vì nó sẽ

03:09.850 --> 03:12.757
không phân tích tệp html của chúng tôi.

03:12.757 --> 03:16.210
Vì vậy, có thể không có phần tử nào có ID này tồn tại và do đó, phần

03:16.210 --> 03:18.210
tử này sẽ mang lại giá trị rỗng.

03:18.210 --> 03:20.680
Bây giờ ở đây, chúng tôi nói rằng chúng tôi không

03:20.680 --> 03:23.920
lưu trữ null trong đó, chúng tôi chỉ lưu trữ phần tử mẫu HTML.

03:23.920 --> 03:25.800
Vì vậy, để loại bỏ mối nguy hiểm này, chúng

03:25.800 --> 03:29.470
ta phải nói với TypeScript rằng điều này sẽ không bao giờ là null.

03:29.470 --> 03:31.290
Và bạn biết làm thế nào bạn có thể làm điều này?

03:31.290 --> 03:33.580
Bạn có thể thêm một dấu chấm than ở đây.

03:33.580 --> 03:35.020
Tất nhiên, một giải

03:35.020 --> 03:36.170
pháp thay thế, chỉ

03:36.170 --> 03:37.820
để hiển thị điều này, nếu

03:37.820 --> 03:41.640
bạn không chắc chắn, là lưu trữ nó dưới dạng một hằng

03:41.640 --> 03:46.640
số và sau đó kiểm tra xem phần tử mẫu có đúng không, vì vậy nếu nó không

03:46.900 --> 03:48.600
rỗng thì hãy lưu trữ nó bên

03:48.600 --> 03:51.490
trong nếu kiểm tra ở đây.

03:51.490 --> 03:52.720
Bây giờ, chúng tôi vẫn

03:52.720 --> 03:54.190
gặp lỗi nhưng đó sẽ là một lỗi

03:54.190 --> 03:55.840
khác, tôi sẽ quay lại sau.

03:55.840 --> 03:58.060
Hiện tại, điều này sẽ thực hiện thủ thuật nếu

03:58.060 --> 03:59.650
chúng tôi không chắc chắn.

03:59.650 --> 04:01.930
Bây giờ ở đây, tuy nhiên, tôi chắc chắn.

04:01.930 --> 04:02.763
Và nhân tiện, nếu bạn

04:02.763 --> 04:03.596
không chắc chắn, tất

04:03.596 --> 04:06.000
nhiên, bạn nên cung cấp một dự phòng trong trường hợp khác.

04:06.000 --> 04:08.530
Nhưng ở đây tôi chắc chắn rằng chúng ta sẽ nhận được phần

04:08.530 --> 04:10.544
tử như vậy và do đó chúng ta có thể chỉ cần thêm

04:10.544 --> 04:11.803
một dấu chấm than sau đó để nói

04:11.803 --> 04:13.710
với bản đánh máy, "Tất cả đều tốt.

04:13.710 --> 04:17.300
Chúng tôi sẽ có quyền truy cập vào một phần tử có ID đó. Bây giờ như tôi đã đề cập, chúng tôi vẫn có một

04:17.300 --> 04:18.133
lỗi khác.

04:18.133 --> 04:20.220
Nội dung thuộc tính bị thiếu trong phần tử HTML loại.

04:20.220 --> 04:24.270
Vấn đề ở đây là chúng ta đang nói với TypeScript rằng

04:24.270 --> 04:27.140
chúng ta sẽ lưu trữ một phần tử mẫu thuộc

04:27.140 --> 04:29.550
loại phần tử mẫu html.

04:29.550 --> 04:32.160
Và thực sự đó sẽ là trường hợp.

04:32.160 --> 04:34.800
Tất nhiên, getElementById không

04:34.800 --> 04:38.730
biết cuối cùng nó sẽ trả về phần tử nào.

04:38.730 --> 04:41.130
Nó chỉ biết nó sẽ là một phần tử html nào đó chứ

04:41.130 --> 04:43.920
không biết phiên bản chuyên biệt nào của nó.

04:43.920 --> 04:46.600
Nếu đó là div, đoạn văn, nút hoặc tương tự trong

04:46.600 --> 04:48.720
trường hợp này là phần tử mẫu.

04:48.720 --> 04:51.387
getElementById không có cơ hội biết điều đó.

04:51.387 --> 04:54.590
Vì vậy, để nói với TypeScript về loại mà tất nhiên

04:54.590 --> 04:57.460
chúng ta cũng biết một cách chắc chắn.

04:57.460 --> 05:00.660
Chúng ta có thể sử dụng kiểu đúc.

05:00.660 --> 05:02.260
Bạn cũng đã học về điều này.

05:02.260 --> 05:03.730
Có hai cú pháp bạn có thể sử dụng.

05:03.730 --> 05:05.950
Dấu ngoặc nhọn ở đầu và sau đó

05:05.950 --> 05:07.690
là loại mà bạn muốn chuyển

05:07.690 --> 05:10.130
sang loại mà bạn đang nói với TypeScript,

05:10.130 --> 05:11.847
"Này!

05:11.847 --> 05:12.700
Sự vật, biểu hiện

05:12.700 --> 05:15.840
sau cái này ở đây, cái này sẽ thuộc loại đó. hoặc cách khác, bạn thêm làm phần tử mẫu HTML, đây là cách

05:15.840 --> 05:17.650
tiếp cận mà tôi sẽ sử dụng.

05:17.650 --> 05:21.200
Và với điều đó, bạn đảm bảo với TypeScript rằng

05:21.200 --> 05:23.040
những gì bạn tìm nạp ở đây

05:23.040 --> 05:25.700
sẽ không rỗng và sẽ thuộc loại này.

05:25.700 --> 05:27.950
Người ta nói nhiều về việc chọn cái này nhưng đó là một nhiệm

05:30.027 --> 05:30.860
vụ chung và điều quan

05:30.860 --> 05:32.016
trọng là phải làm đúng.

05:32.016 --> 05:33.630
Bây giờ hãy tiếp tục với phần tử máy chủ.

05:33.630 --> 05:35.563
Ở đây, chúng ta cũng nên thêm phần

05:36.890 --> 05:39.360
tử máy chủ làm trường và chúng ta biết rằng

05:39.360 --> 05:43.350
phần tử máy chủ, khi chúng ta thực sự muốn kết xuất đầu vào dự án của

05:43.350 --> 05:45.960
mình, cuối cùng sẽ là div này ở đây.

05:45.960 --> 05:48.560
Đó là nơi tôi muốn hiển thị biểu mẫu của mình.

05:48.560 --> 05:51.410
Vì vậy, ở đây chúng ta có thể nói phần tử div HTML.

05:51.410 --> 05:54.000
Đó là loại phần tử mà chúng ta sẽ thêm phần tử này vào.

05:54.000 --> 05:57.730
Chúng tôi cũng có thể ít cụ thể hơn một chút và chỉ nói phần

05:57.730 --> 06:00.260
tử HTML, bởi vì ở đây tôi thực sự không quan

06:00.260 --> 06:02.740
tâm đó có phải là div hay không.

06:02.740 --> 06:04.970
Nhưng vì chúng ta biết nó một

06:04.970 --> 06:08.400
cách chắc chắn, tại sao không thêm nó vào?

06:08.400 --> 06:10.250
Bây giờ, tôi muốn có quyền truy cập vào

06:10.250 --> 06:11.263
div đó, tất nhiên, nơi

06:12.110 --> 06:14.850
này sẽ được thêm vào và nếu chúng ta xem tệp index. html, chúng tôi thấy rằng chúng tôi có thể xác

06:14.850 --> 06:16.530
định lại div này bằng ID.

06:16.530 --> 06:18.970
ID ứng dụng trong trường hợp này.

06:18.970 --> 06:19.945
Vì vậy, bây giờ, quay lại

06:19.945 --> 06:24.640
ứng dụng ts, chúng ta có thể sử dụng tài liệu getElementById một lần nữa và tiếp cận phần tử bằng ứng dụng id.

06:24.640 --> 06:28.780
Bây giờ, chúng tôi gặp vấn đề tương tự như trước đây, điều này

06:28.780 --> 06:32.920
có thể là null, vì vậy chúng tôi phải thêm dấu chấm than vì một

06:32.920 --> 06:35.112
lần nữa, chúng tôi biết chắc chắn

06:35.112 --> 06:39.620
rằng điều đó sẽ không xảy ra và getElementById không biết rằng

06:39.620 --> 06:42.283
đây sẽ là phần tử div HTML nên , chúng ta

06:43.430 --> 06:46.030
cũng nên bỏ cái này ở đây.

06:46.030 --> 06:48.150
Và với điều đó, giờ đây chúng ta có thể tìm ra cách

06:48.150 --> 06:51.210
chúng ta có quyền truy cập vào tất cả các yếu tố chúng ta cần.

06:51.210 --> 06:53.990
Vâng, đó là rất nhiều nói về điều đó.

06:53.990 --> 06:56.070
Với điều đó thật không may, chúng tôi đã không đạt được nhiều.

06:56.070 --> 06:59.140
Chúng tôi có quyền truy cập vào các yếu tố này nhưng

06:59.140 --> 07:01.970
chúng tôi không hiển thị bất kỳ thứ gì ở đó.

07:01.970 --> 07:03.940
Vì vậy, hãy tiếp tục với điều đó.

07:03.940 --> 07:05.790
Để làm được điều đó, chúng ta cần nhập

07:05.790 --> 07:08.020
nội dung từ thành phần mẫu này, do đó, về cơ bản,

07:08.020 --> 07:10.620
hãy nhập nội dung bên trong các thẻ mẫu và hiển thị nội

07:10.620 --> 07:11.760
dung này cho DOM.

07:11.760 --> 07:15.520
Chúng ta có thể làm điều này ngay tại đây trong hàm tạo bởi vì ý tưởng

07:15.520 --> 07:17.603
của tôi và tất nhiên, đó chỉ là ý tưởng

07:18.510 --> 07:20.270
của tôi, bạn có thể thiết lập điều

07:20.270 --> 07:21.870
này theo cách khác.

07:21.870 --> 07:22.940
Nhưng ý tưởng của tôi là

07:22.940 --> 07:24.550
khi chúng ta tạo một thể hiện mới của

07:24.550 --> 07:26.430
lớp này, ngay lập tức tôi muốn hiển thị một

07:26.430 --> 07:28.250
biểu mẫu thuộc về thể hiện này.

07:28.250 --> 07:30.190
Vì vậy, chúng tôi sẽ làm điều đó ngay trong hàm tạo.

07:30.190 --> 07:31.770
Ở đó, chúng tôi có thể lấy nút

07:31.770 --> 07:34.420
đã nhập hoặc nội dung HTML đã nhập hoặc tùy

07:34.420 --> 07:37.430
theo cách bạn muốn đặt tên cho nó, mà chúng tôi có

07:37.430 --> 07:40.627
thể lấy với document importNode và đó là một phương

07:40.627 --> 07:44.917
thức được cung cấp trên đối tượng tài liệu chung và để importNode, bạn

07:45.860 --> 07:49.260
chuyển một con trỏ vào phần tử mẫu của mình.

07:49.260 --> 07:52.650
Vì vậy, phần tử mẫu này cuối cùng, hay nói chính xác là không phải

07:52.650 --> 07:54.410
phần tử mà là nội dung chấm ở đó.

07:54.410 --> 07:57.010
Nội dung là một thuộc tính tồn

07:57.010 --> 08:00.891
tại trên các thành phần mẫu HTML và nó chỉ cung

08:00.891 --> 08:05.320
cấp một tham chiếu đến nội dung của mẫu.

08:05.320 --> 08:07.480
Vì vậy, để mã HTML giữa văn bản mẫu.

08:07.480 --> 08:09.520
ImportNode cũng có một đối

08:09.520 --> 08:13.306
số thứ hai xác định xem nó có nên nhập cái này với

08:13.306 --> 08:15.670
một bản sao sâu hay không.

08:15.670 --> 08:17.940
Vì vậy, tất cả các cấp lồng nhau bên trong mẫu và tôi chắc chắn muốn làm

08:17.940 --> 08:19.630
điều đó nên tôi sẽ cung cấp thông tin đúng ở đây.

08:19.630 --> 08:22.570
Bây giờ, chúng ta có ImportNode và như

08:22.570 --> 08:26.340
bạn sẽ thấy, đây là đoạn tài liệu kiểu mà bản thảo được

08:26.340 --> 08:28.830
giả định hoặc suy ra tự động.

08:28.830 --> 08:30.770
Bây giờ chúng ta có thể sử dụng ImportNode

08:30.770 --> 08:34.910
đó, và tất nhiên tôi muốn sử dụng nó để hiển thị một số nội dung.

08:34.910 --> 08:36.960
Để làm được điều đó, tôi sẽ thêm một phương

08:36.960 --> 08:40.970
thức mới, một phương thức riêng tư mà tôi sẽ đặt tên là Đính kèm.

08:40.970 --> 08:42.810
Bạn không cần phải làm điều đó, tôi chỉ

08:42.810 --> 08:45.150
muốn tách logic lựa chọn và kết xuất của mình.

08:45.150 --> 08:46.390
Bên trong tệp đính

08:46.390 --> 08:51.270
kèm, tôi sẽ liên hệ với phần tử máy chủ lưu trữ, vì vậy, nơi tôi muốn hiển

08:51.270 --> 08:52.820
thị nội dung của mình và

08:52.820 --> 08:54.930
gọi insertAdjacentElement,

08:54.930 --> 08:57.840
một phương thức mặc định do trình duyệt cung

08:57.840 --> 09:00.770
cấp cuối cùng trong JavaScript.

09:00.770 --> 09:02.980
Để chèn phần tử HTML, hãy chèn phần

09:02.980 --> 09:04.340
tử liền kề, trước hết

09:04.340 --> 09:08.778
cần có mô tả về vị trí chèn phần tử đó, vì vậy bạn có thể chèn phần tử

09:08.778 --> 09:13.180
đó sau phần đầu của phần tử mà bạn đang nhắm mục tiêu, do đó, ngay

09:13.180 --> 09:16.680
sau thẻ mở của phần tử máy chủ, trước đó đầu hoặc trước

09:16.680 --> 09:17.850
thẻ mở, trước thẻ

09:17.850 --> 09:20.870
kết thúc hoặc sau thẻ kết thúc.

09:20.870 --> 09:23.570
Và ở đây tôi sẽ đi sau khi

09:23.570 --> 09:27.020
bắt đầu chèn nó vào đầu thẻ mở.

09:27.020 --> 09:30.580
Và sau đó, thứ tôi muốn chèn là ImportNode

09:30.580 --> 09:33.053
của mình, tuy nhiên, trước

09:34.900 --> 09:39.140
hết, đó là một hằng số chỉ có sẵn trong hàm tạo và

09:39.140 --> 09:42.970
thứ hai, đó là một đoạn tài liệu.

09:42.970 --> 09:44.630
Chúng tôi không thể chèn nó như thế này.

09:44.630 --> 09:46.896
Thay vào đó, chúng tôi cần có quyền truy cập vào phần tử HTML cụ thể

09:46.896 --> 09:48.240
trong đó, chúng tôi có thể lưu trữ phần

09:48.240 --> 09:49.800
tử này trong một phần tử thuộc tính khác.

09:49.800 --> 09:52.770
Mà chúng tôi cũng phải thêm dưới dạng một trường

09:52.770 --> 09:55.560
ở trên đó có thể thuộc loại phần tử HTML hoặc thực

09:55.560 --> 09:58.270
tế trong trường hợp của chúng tôi, chúng tôi

09:58.270 --> 10:02.500
biết nó sẽ nằm trong mẫu ở đây, vì vậy nó sẽ là một biểu mẫu.

10:02.500 --> 10:05.790
Đó là yếu tố đầu tiên trong mẫu.

10:05.790 --> 10:07.010
Vì vậy, ở đây chúng

10:07.010 --> 10:09.470
ta có thể nói nó sẽ là một phần tử biểu mẫu

10:09.470 --> 10:10.960
HTML, và sau đó ở đây, phần

10:10.960 --> 10:15.200
tử này bằng importNode firstElementChild, bây giờ chúng ta chỉ

10:15.200 --> 10:20.106
cần nói lại với TypeScript rằng đây sẽ là một phần tử biểu mẫu HTML.

10:20.106 --> 10:22.199
Bây giờ phần tử này bây giờ là thuộc

10:22.199 --> 10:25.510
tính cụ thể trỏ đến nút mà chúng ta muốn chèn.

10:25.510 --> 10:28.360
Vì vậy, ở dưới đó, trong insertAdjacentElement,

10:28.360 --> 10:31.110
chúng tôi chèn phần tử này vào đây.

10:31.110 --> 10:33.690
Bây giờ chúng ta chỉ cần đảm bảo rằng ở

10:33.690 --> 10:36.350
đây trong hàm tạo, ở cuối hàm mà chúng ta

10:36.350 --> 10:38.460
gọi là đính kèm, vì vậy phương thức

10:38.460 --> 10:39.950
đính kèm riêng tư này,

10:39.950 --> 10:42.260
để mã này cũng thực thi.

10:42.260 --> 10:44.290
Và bây giờ với tất cả các định dạng,

10:44.290 --> 10:46.620
mã của tôi trông như thế này.

10:46.620 --> 10:48.200
Vì vậy, bây giờ là lớp đầu

10:48.200 --> 10:51.460
vào của dự án và về mặt lý thuyết, khi chúng tôi khởi

10:51.460 --> 10:53.950
tạo nó, nó sẽ hiển thị biểu mẫu.

10:53.950 --> 10:56.920
Bây giờ hãy thử xem.

10:56.920 --> 10:59.440
Bên dưới lớp, chúng ta hãy tạo một hằng số mới, chẳng hạn

10:59.440 --> 11:01.120
như prjInput, tên tùy thuộc vào bạn.

11:01.120 --> 11:05.415
Và gọi dự án mới Đầu vào như thế này.

11:05.415 --> 11:08.930
Và nếu bây giờ chúng tôi lưu nó, nó sẽ biên dịch

11:08.930 --> 11:11.783
lại và tải lại và nếu bạn quay lại trình

11:11.783 --> 11:14.160
duyệt, thực sự bạn sẽ thấy biểu

11:14.160 --> 11:16.050
mẫu đó ở đây.

11:16.050 --> 11:17.990
Vì vậy, điều đó khá gọn gàng, bởi vì với điều

11:17.990 --> 11:20.660
đó, chúng tôi đã thực hiện bước đầu tiên rất quan trọng.

11:20.660 --> 11:22.450
Chúng tôi đã hiển thị

11:22.450 --> 11:26.930
biểu mẫu của mình và mặc dù còn thiếu nhiều thứ nhưng vẫn

11:26.930 --> 11:29.150
tốt hơn là không có gì.

11:29.150 --> 11:31.630
Biểu mẫu này, đến từ tệp html chỉ mục và nó được

11:31.630 --> 11:33.010
hiển thị với sự trợ giúp

11:33.010 --> 11:36.430
của mã bản thảo hướng đối tượng của chúng tôi trên đó.
