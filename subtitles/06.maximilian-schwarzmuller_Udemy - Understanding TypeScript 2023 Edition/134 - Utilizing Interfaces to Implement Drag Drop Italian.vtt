WEBVTT

00:02.190 --> 00:05.380
Istruttore: Arriviamo ora alla fine di questo progetto,

00:05.380 --> 00:09.590
che prevede la possibilità di trascinare e rilasciare un progetto

00:09.590 --> 00:12.390
che abbiamo in uno dei riquadri, ad esempio nel

00:12.390 --> 00:16.410
riquadro dei progetti attivi, nell'altro riquadro.

00:16.410 --> 00:19.310
In pratica, per passare da un progetto

00:19.310 --> 00:22.780
attivo a un progetto finito.

00:22.780 --> 00:25.430
Quindi, non si tratta solo dell'aggiornamento

00:25.430 --> 00:27.800
visivo, non si tratta solo di trascinare e

00:27.800 --> 00:31.050
rilasciare e aggiornare l'interfaccia utente, ma anche

00:31.050 --> 00:35.470
di regolare i dati dietro le quinte nella nostra classe di gestione dello stato,

00:35.470 --> 00:37.790
lo stato del progetto, in cui gestiamo un

00:37.790 --> 00:39.960
elenco di progetti alla fine, tenendo

00:39.960 --> 00:42.990
presente che ogni progetto ha una proprietà di stato e

00:42.990 --> 00:45.420
dovremo aggiornare anche quella.

00:45.420 --> 00:48.610
Quindi, dobbiamo implementare due cose: il drag

00:48.610 --> 00:51.800
and drop e l'aggiornamento dello stato e dei dati

00:51.800 --> 00:53.410
dietro le quinte.

00:53.410 --> 00:56.220
Ora iniziamo con il drag and drop e per questo

00:56.220 --> 00:59.870
implementeremo il drag and drop come lo faremmo in uno

00:59.870 --> 01:02.960
script java vanilla che, per esempio, potete

01:02.960 --> 01:04.790
conoscere nella mia guida completa

01:04.790 --> 01:06.970
agli script java.

01:06.970 --> 01:09.690
In pratica, si tratta di implementare una serie di ascoltatori

01:09.690 --> 01:11.960
di eventi e naturalmente si vedrà come funziona

01:11.960 --> 01:14.800
in questo modulo nelle prossime lezioni, ma lo implementeremo

01:14.800 --> 01:17.350
in stile dattiloscritto, quindi lo miglioreremo

01:17.350 --> 01:21.150
usando alcune caratteristiche del dattiloscritto.

01:21.150 --> 01:24.240
Quindi, iniziamo e come voglio migliorarlo con le caratteristiche

01:24.240 --> 01:25.790
del dattiloscritto?

01:25.790 --> 01:28.423
Voglio riutilizzare le interfacce.

01:29.280 --> 01:32.120
Interfacce di trascinamento, ma non solo

01:32.120 --> 01:35.470
per definire la struttura di alcuni oggetti, come

01:35.470 --> 01:39.060
abbiamo fatto in precedenza con le interfacce, bensì

01:39.060 --> 01:42.010
per definire un contratto che alcune classi

01:42.010 --> 01:44.590
possono sottoscrivere per obbligare

01:44.590 --> 01:46.970
queste classi a implementare alcuni

01:46.970 --> 01:51.980
metodi che ci aiutano con il trascinamento.

01:51.980 --> 01:55.250
Per essere precisi, sto pensando a due interfacce e, naturalmente,

01:55.250 --> 01:58.590
l'uso di queste interfacce sarà facoltativo, ma questo ci consentirà,

01:58.590 --> 02:00.920
beh, di fornire fondamentalmente del codice

02:00.920 --> 02:04.465
che costringa una classe a implementare tutto ciò di cui ha bisogno

02:04.465 --> 02:06.340
per essere trascinabile o per essere

02:06.340 --> 02:09.810
un bersaglio valido per il drop, il che, se stessimo costruendo

02:09.810 --> 02:12.960
un'applicazione più grande, potrebbe aiutarci a scrivere

02:12.960 --> 02:19.080
codice più pulito e più comprensibile, soprattutto quando lavoriamo in un team.

02:19.080 --> 02:21.710
Di quali interfacce sto parlando?

02:21.710 --> 02:23.160
Voglio avere un'interfaccia,

02:23.160 --> 02:24.617
che chiamerò draggable,

02:26.200 --> 02:28.660
e una seconda interfaccia, che chiamerò

02:28.660 --> 02:31.060
drag target.

02:31.060 --> 02:32.950
La mia idea è che possiamo aggiungere

02:32.950 --> 02:35.710
l'interfaccia trascinabile a qualsiasi classe

02:35.710 --> 02:38.030
che rende un elemento trascinabile.

02:38.030 --> 02:41.810
Nel nostro esempio, si tratta della classe dell'elemento del progetto.

02:41.810 --> 02:44.170
La classe degli elementi di progetto è responsabile

02:44.170 --> 02:46.600
del rendering di questi elementi di progetto,

02:46.600 --> 02:49.230
che dovrebbero essere i pezzi trascinabili, e delle

02:49.230 --> 02:53.320
caselle, dei progetti attivi e dei progetti finiti, per cui la classe dell'elenco

02:53.320 --> 02:57.880
dei progetti dovrebbe essere il bersaglio del trascinamento.

02:57.880 --> 03:02.100
Ora, cosa obbligano queste interfacce a essere implementate

03:02.100 --> 03:03.890
o aggiunte alle classi?

03:03.890 --> 03:05.760
Cominciamo con draggable.

03:05.760 --> 03:09.550
In questo caso, abbiamo bisogno di due ascoltatori di eventi

03:09.550 --> 03:12.540
e quindi di due gestori per questi eventi.

03:12.540 --> 03:17.070
Un gestore dell'inizio del trascinamento, che sarà un metodo, e un gestore della

03:17.070 --> 03:19.733
fine del trascinamento, perché quando si implementa

03:22.020 --> 03:24.180
il trascinamento, la cosa che si vuole

03:24.180 --> 03:26.070
trascinare richiederà un ascoltatore

03:26.070 --> 03:29.840
che ascolti l'inizio dell'evento di trascinamento e anche, potenzialmente,

03:29.840 --> 03:40.440
un ascoltatore che ascolti la fine dell'evento di trascinamento, in modo da poter fare qualsiasi tipo di aggiornamento che si voglia fare.

03:40.440 --> 03:42.580
Ora, il gestore dell'evento di avvio del trascinamento

03:42.580 --> 03:44.225
otterrà un oggetto evento, che chiameremo

03:44.225 --> 03:47.370
evento di trascinamento, che è un tipo incorporato, i tipi con

03:47.370 --> 03:51.010
le opzioni delle librerie, a causa della nostra configurazione del conflitto

03:51.010 --> 03:53.210
TS e delle librerie che stiamo aggiungendo,

03:53.210 --> 03:55.330
e non restituirà nulla, sarà un metodo che

03:55.330 --> 03:57.600
viene eseguito, ma che poi fa solo qualcosa,

03:57.600 --> 04:03.930
configura l'evento di trascinamento, per esempio, ma non restituisce nulla.

04:03.930 --> 04:06.970
Ora il gestore della fine del trascinamento riceve un evento

04:06.970 --> 04:10.730
simile, riceve anche un evento di trascinamento e non restituisce nulla.

04:10.730 --> 04:13.130
Ora, naturalmente, vedrete come li applicheremo

04:13.130 --> 04:15.810
tra pochi secondi, quindi seguitemi.

04:15.810 --> 04:17.810
Ora, che dire dell'obiettivo di trascinamento?

04:17.810 --> 04:20.530
Per quanto riguarda il bersaglio, quindi il riquadro

04:20.530 --> 04:22.620
sul quale possiamo trascinare qualcosa,

04:22.620 --> 04:26.280
ci sono tre gestori di eventi che voglio implementare.

04:26.280 --> 04:28.593
Un gestore di trascinamento,

04:29.440 --> 04:31.800
un gestore di rilascio e un

04:31.800 --> 04:34.280
gestore di abbandono.

04:34.280 --> 04:36.470
Cosa fanno queste cose?

04:36.470 --> 04:39.370
Quando si implementa il trascinamento in java script,

04:39.370 --> 04:41.960
è necessario implementare un gestore di trascinamento

04:41.960 --> 04:45.140
per segnalare al browser in java script che la cosa su cui

04:45.140 --> 04:48.060
si sta trascinando qualcosa è un bersaglio di trascinamento

04:48.060 --> 04:50.160
valido.

04:50.160 --> 04:53.840
Se non si esegue l'operazione corretta nel gestore del trascinamento,

04:53.840 --> 04:56.410
non sarà possibile effettuare il dropping.

04:56.410 --> 04:57.980
È necessario che il gestore

04:57.980 --> 05:00.760
del drop reagisca all'effettivo drop che avviene,

05:00.760 --> 05:03.960
quindi se il gestore del drag over permette il drop con il

05:03.960 --> 05:06.500
gestore del drop gestirà il drop e quindi possiamo

05:06.500 --> 05:08.650
aggiornare i nostri dati e l'interfaccia

05:08.650 --> 05:11.960
utente, ad esempio, e il gestore del drag leave può essere

05:11.960 --> 05:14.500
utile se stiamo, ad esempio, dando un feedback

05:14.500 --> 05:16.940
visivo all'utente quando trascina qualcosa

05:16.940 --> 05:19.880
sul box, ad esempio, cambiamo il colore dello sfondo,

05:19.880 --> 05:22.210
ma se non avviene il drop e invece viene annullato

05:22.210 --> 05:25.790
o l'utente allontana l'elemento, possiamo usare il gestore

05:25.790 --> 05:28.410
del drag leave per ripristinare il nostro aggiornamento

05:28.410 --> 05:32.190
visivo.

05:32.190 --> 05:36.250
Ora, tutti e tre i gestori ricevono un evento

05:36.250 --> 05:37.990
di trascinamento

05:37.990 --> 05:41.473
e non restituiscono nulla.

05:44.070 --> 05:47.250
E anche per quest'ultimo gestore.

05:47.250 --> 05:49.810
Ora abbiamo configurato alcune interfacce

05:49.810 --> 05:52.840
che da sole non fanno molto, ma ora possiamo

05:52.840 --> 05:55.710
usarle e voglio iniziare con l'elemento

05:55.710 --> 05:57.490
del progetto.

05:57.490 --> 06:00.380
Troviamo quindi la classe dell'oggetto del progetto,

06:00.380 --> 06:02.710
ecco il componente, ecco l'oggetto del progetto

06:02.710 --> 06:05.100
e ricordiamo che un'interfaccia non può essere

06:05.100 --> 06:08.540
usata solo per definire un tipo di oggetto personalizzato, ma

06:08.540 --> 06:12.290
può essere usata come contratto su una classe.

06:12.290 --> 06:15.760
Si possono chiamare implementazioni o aggiungere implementazioni qui dopo

06:15.760 --> 06:16.750
il nome della classe e dopo

06:16.750 --> 06:19.290
le potenziali estensioni che si stanno facendo e poi implementare

06:19.290 --> 06:20.900
l'interfaccia.

06:20.900 --> 06:24.340
In questo caso, l'interfaccia trascinabile.

06:24.340 --> 06:27.250
Ora, quando lo fate, ho formattato il testo in modo da inserirlo

06:27.250 --> 06:29.820
in una nuova riga per facilitarne la lettura.

06:29.820 --> 06:31.393
Quando lo si fa, si ottiene un

06:31.393 --> 06:34.460
errore che indica che la classe qui implementa in modo errato

06:34.460 --> 06:38.600
l'interfaccia, perché l'interfaccia draggable ci costringe ad aggiungere

06:38.600 --> 06:40.763
due metodi, se ricordate.

06:42.840 --> 06:44.480
Quindi, aggiungiamoli qui.

06:44.480 --> 06:46.290
Forse caricheremo un costruttore.

06:46.290 --> 06:49.550
Aggiungiamo un gestore di avvio del trascinamento

06:49.550 --> 06:53.610
che riceve un evento di tipo trascinamento e aggiungiamo anche

06:53.610 --> 06:56.500
il nostro gestore di fine trascinamento che

06:56.500 --> 06:59.143
riceve l'evento trascinamento.

06:59.990 --> 07:02.010
E ora abbiamo aggiunto questi due metodi.

07:02.010 --> 07:05.330
Ora, questo da solo non abilita il drag and drop.

07:05.330 --> 07:08.900
Ci aiuta a scrivere componenti trascinabili o classi trascinabili

07:08.900 --> 07:11.880
in modo uniforme, in modo che se aggiungiamo sempre più

07:11.880 --> 07:14.560
classi che devono essere trascinabili, avremo

07:14.560 --> 07:18.210
sempre questi metodi, il che rende più facile ragionare sul nostro

07:18.210 --> 07:20.700
codice e lavorare sul nostro codice, soprattutto

07:20.700 --> 07:22.870
quando si lavora in team, perché tutti sanno

07:22.870 --> 07:25.520
dove inserire il lavoro per l'evento di avvio del

07:25.520 --> 07:27.840
trascinamento.

07:27.840 --> 07:31.340
Ciò che non fa, ovviamente, è ascoltare un evento di avvio

07:31.340 --> 07:32.950
del trascinamento.

07:32.950 --> 07:35.010
È qualcosa che si può fare nel metodo configure,

07:35.010 --> 07:36.730
che però è già presente.

07:36.730 --> 07:38.980
Possiamo raggiungere il nostro elemento renderizzato

07:38.980 --> 07:41.090
e aggiungervi un ascoltatore di eventi, che

07:41.090 --> 07:43.890
sarà l'evento di avvio del trascinamento.

07:43.890 --> 07:45.780
L'evento di avvio del trascinamento

07:45.780 --> 07:49.190
è un evento, un evento dom predefinito del browser che si può ascoltare

07:49.190 --> 07:51.750
e il gestore che vogliamo attivare, ovviamente,

07:51.750 --> 07:53.740
è il gestore di avvio del trascinamento,

07:55.320 --> 07:57.793
che possiamo indicare qui.

07:59.080 --> 08:00.750
Ora, vogliamo anche essere sicuri che

08:00.750 --> 08:02.460
all'interno del gestore dell'avvio

08:02.460 --> 08:04.870
del trascinamento questa parola chiave si riferisca

08:04.870 --> 08:06.560
alla nostra classe e, come si impara con

08:06.560 --> 08:08.530
gli ascoltatori di eventi, per impostazione

08:08.530 --> 08:11.810
predefinita non è così, quindi potremmo usare bind qui e bind qui che sarebbe

08:11.810 --> 08:14.750
valido, ma in realtà abbiamo un modo migliore.

08:14.750 --> 08:16.900
Abbiamo aggiunto il decoratore auto bind, quindi

08:16.900 --> 08:18.550
aggiungerò questo al gestore dell'avvio

08:18.550 --> 08:20.303
del trascinamento.

08:21.210 --> 08:26.070
Ora, possiamo anche ascoltare l'evento di fine trascinamento e puntare

08:26.070 --> 08:28.530
al gestore di fine trascinamento.

08:28.530 --> 08:30.400
Si può anche aggiungere l'auto bind

08:30.400 --> 08:32.690
se si intende usare la parola chiave vis.

08:32.690 --> 08:35.830
Per il momento, mi limiterò a registrare il drag end qui,

08:35.830 --> 08:37.730
in modo da vedere che è stato attivato,

08:37.730 --> 08:40.520
perché in realtà non ho nulla di specifico da fare

08:40.520 --> 08:44.410
con questo parametro e quindi lo cancellerò e in pratica dirò a typescript

08:44.410 --> 08:47.310
che non lo sto usando.

08:47.310 --> 08:49.850
Qui, in drag start, useremo event e per il momento

08:49.850 --> 08:51.730
registreremo solo l'evento, quando

08:51.730 --> 08:53.720
questo si verifica.

08:53.720 --> 08:55.610
Tuttavia, questo da solo non basta.

08:55.610 --> 08:57.000
Se si salva tutto e si aggiunge

08:57.000 --> 08:59.230
un progetto qui, si vedrà che non è possibile

08:59.230 --> 09:01.460
trascinarlo di nuovo, giusto?

09:01.460 --> 09:04.750
Se si prova a trascinarlo, non funzionerà perché

09:04.750 --> 09:07.390
sarà necessario modificare anche

09:07.390 --> 09:09.720
qualcosa nel file HTML.

09:09.720 --> 09:11.810
Su questo elemento dell'elenco, che

09:11.810 --> 09:14.550
viene reso per ogni progetto, che è la cosa che si

09:14.550 --> 09:18.380
vuole trascinare, si deve aggiungere l'attributo trascinabile

09:18.380 --> 09:19.830
e impostarlo a true.

09:19.830 --> 09:21.040
Questo è importante.

09:21.040 --> 09:24.200
Indica al browser che questo elemento sarà trascinabile.

09:24.200 --> 09:28.430
Se lo salvate e aggiungete nuovamente un progetto, vedrete che

09:28.430 --> 09:30.400
ora questo progetto è trascinabile,

09:30.400 --> 09:32.070
è attaccato al mio mouse e

09:32.070 --> 09:35.720
ora possiamo spostarlo senza problemi.

09:35.720 --> 09:38.530
Sulla destra si nota anche che un evento di trascinamento si è

09:38.530 --> 09:41.390
attivato quando ho iniziato a trascinare e, se lascio la presa,

09:41.390 --> 09:43.860
si attiva anche l'evento di fine trascinamento.

09:43.860 --> 09:46.510
Quindi i nostri ascoltatori sono collegati e possiamo

09:46.510 --> 09:50.540
trascinare, ora possiamo lavorare sul bersaglio di caduta, quindi sulla

09:50.540 --> 09:53.200
casella in cui questo dovrebbe essere trascinabile,

09:53.200 --> 09:56.560
per aggiungere il progetto a quella casella.

09:56.560 --> 09:58.660
Una cosa che farò rapidamente

09:58.660 --> 10:02.930
è quella delle applicazioni. css, sugli elementi dell'elenco,

10:02.930 --> 10:06.550
quindi sui progetti LI, aggiungerò un colore di sfondo bianco

10:06.550 --> 10:09.810
semplicemente per poterlo vedere un po' meglio.

10:09.810 --> 10:12.350
Quindi qui, progetto LI, ho aggiunto il bianco

10:12.350 --> 10:15.800
in modo che quando trasciniamo il progetto qui, abbiamo lo

10:15.800 --> 10:17.370
sfondo bianco, così è un po'

10:17.370 --> 10:19.150
più facile da vedere.

10:19.150 --> 10:20.840
Ma questo non cambia il nostro prossimo passo.

10:20.840 --> 10:22.700
Vogliamo fare il suo dropabble.
