WEBVTT

00:02.260 --> 00:03.920
المدرب: إذن ، النقابات التمييزية.

00:03.920 --> 00:05.750
حقا ، حقا مفيد.

00:05.750 --> 00:09.060
ميزة أخرى مفيدة للغاية هي نوع الصب.

00:09.060 --> 00:12.640
تساعدك ميزة Cast casting على إخبار TypeScript

00:12.640 --> 00:15.350
بأن بعض القيم من نوع معين حيث لا تستطيع

00:15.350 --> 00:19.240
TypeScript اكتشافها بمفردها ، لكنك كمطور تعلم

00:19.240 --> 00:22.660
أن الأمر سيكون كذلك.

00:22.660 --> 00:25.030
وخير مثال على ذلك هو إذا حصلنا

00:25.030 --> 00:27.120
على X لشيء ما في دوم.

00:27.120 --> 00:29.560
لنفترض هنا أن لدينا فقرة في دوم

00:29.560 --> 00:32.180
فقرة فقط ، ولا شيء آخر هناك ، وهي فقرة

00:32.180 --> 00:33.390
فارغة.

00:33.390 --> 00:35.190
لذا من الواضح أنه إذا حفظنا ذلك

00:35.190 --> 00:37.150
، فلن نرى أي شيء هنا ، على الشاشة.

00:37.150 --> 00:38.950
الآن يمكننا الوصول إلى تلك الفقرة من

00:38.950 --> 00:40.543
داخل السيناريو الخاص بنا هنا.

00:43.160 --> 00:48.160
فقرة Const مع محدد استعلام المستند P ، على سبيل المثال.

00:49.180 --> 00:51.890
الآن عندما نستخدم محدد الاستعلام ونمرر P

00:51.890 --> 00:54.500
كمحدد لذلك يتم التحديد بواسطة علامة P ،

00:54.500 --> 00:57.070
فإن TypeScript قادر بالفعل على اكتشاف

00:57.070 --> 00:59.510
، كما يمكنك معرفة ما إذا كنت أقوم بتمرير

00:59.510 --> 01:02.480
الماوس فوقه ، سيكون هذا من نوع عنصر فقرة أو لاغٍ

01:02.480 --> 01:05.900
لأنه ربما لا يوجد مثل هذا العنصر في الصفحة ، لكن هذا شيء

01:05.900 --> 01:07.050
مختلف.

01:07.050 --> 01:09.920
دعنا نتجاهل الحالة أو الحالة الفارغة في الوقت الحالي.

01:09.920 --> 01:12.400
الشيء المهم هو أن TypeScript اكتشف

01:12.400 --> 01:14.600
بالفعل أن هذا عنصر فقرة.

01:14.600 --> 01:16.800
الآن ، يتغير هذا إذا اخترنا شيئًا

01:16.800 --> 01:18.460
آخر ، دعنا نقول معرفًا.

01:18.460 --> 01:22.020
نسمي هذا هنا إخراج الرسالة ، لذلك تحتوي هذه الفقرة

01:22.020 --> 01:23.920
على معرف إخراج الرسالة.

01:23.920 --> 01:25.890
الآن نحن كمطور بالطبع نعلم أننا قمنا

01:25.890 --> 01:28.360
بتعيين هذا المعرف لهذه الفقرة ، لكن TypeScript

01:28.360 --> 01:29.780
لا يعرف ذلك.

01:29.780 --> 01:33.020
لا يتعمق TypeScript في ملفات HTML الخاصة بنا

01:33.020 --> 01:34.590
ويقوم بتحليلها.

01:34.590 --> 01:37.360
لذلك إذا اخترنا الآن بواسطة هذا المعرف

01:37.360 --> 01:41.720
هنا ، على سبيل المثال ، مع getElementById ، فإننا نرى

01:41.720 --> 01:45.130
ما يشير إليه TypeScript وهو أن هذا مجرد عنصر

01:45.130 --> 01:49.830
HTML أو فارغ ، فهو لا يعرف أي عنصر HTML محدد.

01:49.830 --> 01:52.720
الآن ، بالنسبة للفقرة ، قد لا يهم كثيرًا ، ربما

01:52.720 --> 01:54.830
نريد فقط أن نفعل بها أشياء يمكننا

01:54.830 --> 01:57.290
القيام بها مع أي عنصر HTML ، على سبيل المثال

01:57.290 --> 01:59.990
، الوصول إلى محتواها النصي أو أي شيء من هذا

01:59.990 --> 02:01.470
القبيل.

02:01.470 --> 02:03.220
ولكن ماذا لو كان لدينا مدخلات هنا؟

02:03.220 --> 02:07.750
ماذا لو كان لدينا بالفعل نص نوع الإدخال ، ونريد الحصول على القيمة

02:07.750 --> 02:10.430
التي أدخلها المستخدم ، لذا سأعطيه معرفًا

02:10.430 --> 02:12.760
لإدخال المستخدم والآن أحدد هذا

02:12.760 --> 02:15.500
في كود TypeScript الخاص بي.

02:15.500 --> 02:17.730
لذلك أختار هنا من خلال إدخال معرف

02:17.730 --> 02:21.530
المستخدم ، ولم يعد فقرة ، ولكن userInputElement.

02:21.530 --> 02:24.023
الآن نحن كمطور ، نعلم أننا هنا ، نصل إلى

02:24.909 --> 02:26.700
عنصر الإدخال هذا ، لكن كما قلت

02:26.700 --> 02:28.530
، لا يعرف TypeScript ذلك.

02:28.530 --> 02:31.140
لا يقرأ TypeScript كود HTML الخاص بنا

02:31.140 --> 02:34.435
، لذلك يعرف TypeScript فقط أنه عنصر HTML.

02:34.435 --> 02:37.860
الآن ، إذا كنت أرغب في تعيين خاصية القيمة لهذا

02:37.860 --> 02:45.000
، فستحاول أن تفعل userInputElement.

02:45.000 --> 02:45.000
قيمة

02:45.000 --> 02:47.050
تساوي مرحبًا ، ترى أنني أتلقى خطأ بالفعل.

02:47.050 --> 02:48.960
لقد تلقيت خطأ لأنه من المحتمل

02:48.960 --> 02:50.780
أن يكون هذا الكائن فارغًا.

02:50.780 --> 02:54.220
يمكننا إصلاح هذا عن طريق إضافة علامة تعجب

02:54.220 --> 02:56.210
بعد ذلك ، وسأعود إلى هذا

02:56.210 --> 02:58.390
في غضون ثانية ، ولكن حتى ذلك

02:58.390 --> 03:01.640
الحين ما زلت أتلقى خطأ مفاده أن القيمة

03:01.640 --> 03:03.890
غير موجودة في نوع HTML Element

03:03.890 --> 03:08.343
لأن هذا النوع العام ، وهو أساسًا أي HTML عنصر له كنوع

03:08.343 --> 03:11.630
، لا يدعم الخصائص الخاصة بعناصر HTML

03:11.630 --> 03:14.510
محددة.

03:14.510 --> 03:17.540
لذلك ، سنحتاج إلى إخبار TypeScript

03:17.540 --> 03:20.860
أن ما نختاره هنا ليس فارغًا فحسب ، بل

03:20.860 --> 03:25.080
إنه أيضًا من النوع HTMLInputElement.

03:25.080 --> 03:28.240
وهذا ما يمكننا فعله باستخدام أسلوب الصب.

03:28.240 --> 03:31.153
الآن ، هناك طريقتان لكتابة الكتابة ، تركيبتان

03:31.153 --> 03:34.170
يمكننا استخدامهما ، وهما متكافئتان.

03:34.170 --> 03:36.971
الأول هو أننا نضيف شيئًا أمام الشيء

03:36.971 --> 03:41.920
الذي نريد تحويله ، أو حيث نريد إخبار TypeScript بالكتابة.

03:41.920 --> 03:44.170
نضيف أقواسًا مائلة إلى الفتح

03:44.170 --> 03:45.810
والإغلاق ، ثم نضيف بين

03:45.810 --> 03:49.480
هذين القوسين نوع الشيء بعد الأقواس المائلة.

03:49.480 --> 03:51.223
في هذه الحالة ، HTMLInputElement.

03:53.110 --> 03:54.970
وهذا النوع متاح عالميًا لأنه

03:54.970 --> 03:57.963
في ملف tsconfig الخاص بي ، أقوم بتضمين dom lib.

03:59.180 --> 04:00.810
مع ذلك ، تعرف TypeScript

04:00.810 --> 04:03.830
أن كل ما نختاره هنا بعد الأقواس الزاوية

04:03.830 --> 04:06.530
سيكون من النوع HTMLInputElement

04:06.530 --> 04:08.950
، وبالتالي لم يعد يشتكي.

04:08.950 --> 04:10.330
إذن ، هذا هو الإصدار الأول.

04:10.330 --> 04:12.830
اسمحوا لي أن أنسخ ذلك وأعلق عليه

04:12.830 --> 04:14.750
وأريكم البديل.

04:14.750 --> 04:18.000
هذا يعمل بشكل جيد للغاية ويمكنك استخدام هذا.

04:18.000 --> 04:21.210
الآن ، إذا كنت تعرف React ، مع ذلك ، فأنت

04:21.210 --> 04:24.400
تعلم أنه لديك أيضًا بنية قوسية مائلة داخل

04:24.400 --> 04:26.970
JavaScript أو TypeScript إذا

04:26.970 --> 04:29.200
كنت تستخدم ذلك لملفات React

04:29.200 --> 04:33.550
، حيث تكتب كود JSX في مكونات React الخاصة بك.

04:33.550 --> 04:36.060
الآن ، إذا كنت لا تعرف React ، فقد لا يخبرك ذلك كثيرًا.

04:36.060 --> 04:40.800
فقط كن على دراية بأن صيغة مشابهة موجودة في مشاريع React وهناك الأقواس

04:40.800 --> 04:43.320
الزاوية لا تُستخدم لتمرير أي معلومات

04:43.320 --> 04:47.480
تتعلق بالأنواع التي تستخدمها ، ولكن بدلاً من ذلك يتم تحليلها

04:47.480 --> 04:50.390
بواسطة بعض أدوات البناء ومن خلال React ، في

04:50.390 --> 04:54.390
النهاية ، لمعرفة ما تريد تريد عرضها على الشاشة.

04:54.390 --> 04:56.750
لذلك ، منفصل تمامًا عن TypeScript.

04:56.750 --> 04:59.880
حتى لا تتعارض مع صيغة JSX ، يوفر فريق

04:59.880 --> 05:01.900
TypeScript بديلاً لهذا

05:01.900 --> 05:04.350
النوع من القوس المائل.

05:04.350 --> 05:06.450
يمكنك أيضًا إضافة شيء ما بعد الشيء

05:06.450 --> 05:07.920
الذي تريد كتابته ، لذلك

05:07.920 --> 05:09.960
بعد هذا التحديد في هذه الحالة ،

05:09.960 --> 05:12.600
وهذا الشيء هو الكلمة الأساسية.

05:12.600 --> 05:14.740
ثم هنا مرة أخرى تضيف النوع الذي

05:14.740 --> 05:16.750
تريد إرسال هذا إليه.

05:16.750 --> 05:19.970
لذلك ، هذا الآن يخبر TypeScript أن التعبير

05:19.970 --> 05:23.730
الموجود أمامه ، في هذه الحالة ، هذا التعبير هنا ،

05:23.730 --> 05:27.405
سينتج عنه قيمة من النوع HTMLInputElement.

05:27.405 --> 05:30.067
لذلك ، مرة أخرى ، ليس لدينا أي خطأ.

05:30.067 --> 05:31.650
لذلك ، هذا بديل ، ويمكنك

05:31.650 --> 05:33.940
استخدام أي من الصيغتين ، مهما

05:33.940 --> 05:36.350
كان ما تفضله ، عليك فقط أن تحاول

05:36.350 --> 05:38.990
أن تكون متسقًا طوال مشروعك ثم حتى لا

05:38.990 --> 05:42.377
تقوم بالتناوب بين هاتين الصيغتين.

05:42.377 --> 05:45.220
وبهذا ، يمكنك تمرير هذه المعلومات الإضافية

05:45.220 --> 05:47.480
القيمة إلى TypeScript وإنشاء كود

05:47.480 --> 05:50.400
مثل هذا العمل ، على الرغم من أن TypeScript

05:50.400 --> 05:52.760
بمفرده لن يكون قادرًا على اكتشاف

05:52.760 --> 05:56.000
أن هذا ينتج هنا HTMLInputElement.

05:56.000 --> 05:57.940
بالطبع ، نظرًا لأنك تجبر TypeScript

05:57.940 --> 06:00.420
على استخدام هذا النوع ، فمن مسؤوليتك

06:00.420 --> 06:02.200
كمطور أن تضمن أن كل ما ينتج

06:02.200 --> 06:05.620
عن هذا التعبير سيكون من هذا النوع.

06:05.620 --> 06:07.700
خلاف ذلك ، قد تحصل على خطأ في وقت التشغيل

06:07.700 --> 06:09.920
أو سلوك غير متوقع في وقت التشغيل إذا

06:09.920 --> 06:12.780
حاولت التفاعل مع هذا العنصر بطريقة غير مدعومة

06:12.780 --> 06:14.423
في الواقع.

06:15.610 --> 06:18.060
لذا ، يعد نوع الصب ميزة قوية.

06:18.060 --> 06:20.490
إذن هل علامة التعجب هذه هنا.

06:20.490 --> 06:22.590
لقد قمت بالفعل باستكشاف هذا في وقت سابق

06:22.590 --> 06:24.820
قليلاً في الدورة التدريبية بالفعل.

06:24.820 --> 06:27.470
تسمح لنا علامة التعجب هذه بإخبار TypeScript

06:27.470 --> 06:31.090
أن التعبير الموجود أمامها لن ينتج عنه قيمة خالية أبدًا.

06:31.090 --> 06:33.170
وهذا مطلوب لبعض التعبيرات

06:33.170 --> 06:35.070
، مثل هذا هنا ، عندما تختار

06:35.070 --> 06:38.010
شيئًا من dom قد يعيد القيمة null.

06:38.010 --> 06:40.980
إذا علمنا كمطور أن هذا لن يعود فارغًا ، فيمكننا

06:40.980 --> 06:43.690
استخدام علامة التعجب هذه.

06:43.690 --> 06:45.470
خلاف ذلك ، وقد تعلمت ذلك

06:45.470 --> 06:48.248
بالفعل ، أريد فقط أن أكرر ذلك.

06:48.248 --> 06:49.380
خلاف ذلك ، إذا لم تكن متأكدًا

06:49.380 --> 06:52.600
من أن هذا لن يؤدي إلى إرجاع قيمة خالية ، فيمكنك استخدام علامة if.

06:52.600 --> 06:56.070
لذلك يمكنك التحقق مما إذا كان userInputElement صحيحًا

06:56.070 --> 06:57.510
، وبالتالي فهو ليس فارغًا

06:57.510 --> 06:59.440
، ثم استخدامه هناك.

06:59.440 --> 07:02.720
الآن ، اضطررت إلى إزالة نوع الصب في هذه الحالة لأنه إذا

07:02.720 --> 07:04.670
قمنا بالكتابة هنا ، فإننا نخبر TypeScript

07:04.670 --> 07:07.170
أيضًا أن هذا لن يكون فارغًا ، ولأنني لست متأكدًا

07:07.170 --> 07:10.470
من ذلك ، لا يمكنني الإدلاء هنا.

07:10.470 --> 07:13.120
بدلاً من ذلك ، يجب أن أفعل ذلك هنا عندما أستخدم

07:13.120 --> 07:14.290
القيمة ، وبالتالي أريد

07:14.290 --> 07:16.600
أن أفعل ذلك قبل الوصول إلى خاصية القيمة

07:16.600 --> 07:19.820
، عن طريق إضافة HTMLInputElement مثل هذا.

07:19.820 --> 07:21.530
بالطبع هذا ، مع ذلك ، سوف يفشل.

07:21.530 --> 07:24.060
هذا بناء جملة غير صالح ، قد تحاول

07:24.060 --> 07:28.030
الوصول إلى خاصية قيمة على شيء HTMLInputElement

07:28.030 --> 07:30.280
، وهذا ليس منطقيًا حتى.

07:30.280 --> 07:33.010
علينا ببساطة أن نلف هذا التعبير داخل

07:33.010 --> 07:35.670
قوسين ، ثم نتأكد من تقييم هذا أولاً

07:35.670 --> 07:37.590
، ثم نحاول الوصول إلى قيمة

07:37.590 --> 07:39.480
نتيجة هذا التعبير.

07:39.480 --> 07:41.650
والآن لدينا بديل لاستخدام

07:41.650 --> 07:42.893
علامة التعجب.
