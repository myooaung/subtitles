WEBVTT

00:02.250 --> 00:04.870
-: ตอนนี้เรารู้เกี่ยวกับคุณสมบัติที่ทรงพลังเหล่านี้แล้ว

00:04.870 --> 00:07.960
คำถามที่ชัดเจนก็คือ ทำไมเราถึงใช้สิ่งนั้น

00:07.960 --> 00:09.610
เหตุใดจึงเป็นประโยชน์

00:09.610 --> 00:15.820
มันมีประโยชน์ในสถานการณ์เช่นนี้ ที่เรารู้ว่าเราต้องการมีชุดของฟังก์ชันบางอย่าง

00:15.820 --> 00:21.910
สมมติว่าเป็นวิธีการทักทาย และเราต้องการให้แน่ใจว่าอนุประโยคมีวิธีการทักทายเช่นนั้น

00:21.910 --> 00:24.450
และอีกประโยคหนึ่งก็อาจมีวิธีนั้นเช่นกัน

00:24.450 --> 00:29.570
จากนั้น เราสามารถใช้อินเทอร์เฟซที่บังคับการมีอยู่ของวิธีนี้ได้

00:29.570 --> 00:32.690
จากนั้นเราสามารถแบ่งปันการทำงานระหว่างส่วนคำสั่งได้อย่างง่ายดาย

00:32.690 --> 00:38.060
และทุกส่วนคำสั่งจะต้องเพิ่มการใช้งานของตัวเอง โค้ดที่แน่นอนที่ควรดำเนินการเมื่อเรียกใช้เมธอด

00:38.060 --> 00:43.280
แต่เราบังคับใช้โครงสร้างบางอย่างด้วยความช่วยเหลือของอินเทอร์เฟซ

00:43.280 --> 00:48.550
ซึ่งจะมีประโยชน์หากเราไม่มีส่วนอื่นๆ ของโค้ดที่ใช้โครงสร้างนั้น

00:48.550 --> 00:51.680
ในที่นี้ เรากำหนดให้ user1 เป็นประเภท Greetable และโดยที่เราบอกว่าเราไม่สนว่า

00:51.680 --> 00:55.240
user อะไรอยู่ในนั้น แต่สิ่งที่ต้องมีในนั้นก็คือวิธีการ

00:55.240 --> 00:59.730
Greet และเรารู้ว่ามันต้องอยู่ในนั้น เพราะไม่ว่าเราจะ การจัดเก็บใน

00:59.730 --> 01:03.510
user1 จะต้องทักทายได้

01:03.510 --> 01:07.350
นั่นทำให้เราสามารถเขียนโค้ดที่ทรงพลังและยืดหยุ่นได้อย่างแท้จริง

01:07.350 --> 01:11.710
โดยที่เราไม่ต้องรู้ทุกอย่างเกี่ยวกับออบเจกต์หรือทุกอย่างเกี่ยวกับอนุประโยค

01:11.710 --> 01:14.710
แต่เราแค่รู้ว่าอะไรก็ตามที่ฉันได้รับที่นี่ใน user1

01:14.710 --> 01:16.210
จะต้องมีวิธีการทักทาย

01:16.210 --> 01:18.850
เราไม่สนใจว่า Person จะมีอะไรอีกไหม ที่นี่เราสนใจที่

01:18.850 --> 01:20.630
Greet ดังนั้นเราจึงส่งเราไปที่

01:20.630 --> 01:25.180
Greetable ดังนั้นเราจึงไม่สามารถเก็บอะไรไว้ใน User1 ซึ่งจะไม่มีวิธีการ

01:25.180 --> 01:27.190
Greet เพราะ Greetable จะบังคับอะไรก็ตามที่คุณตั้งฐาน

01:27.190 --> 01:32.333
ถึงได้มีวิธีทักทายแบบนี้
