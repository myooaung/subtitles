WEBVTT

00:02.440 --> 00:05.170
Instrutor: Agora falando em callbacks e tipos de

00:05.170 --> 00:08.400
funções, lá funciona praticamente da mesma maneira.

00:08.400 --> 00:10.550
Digamos que temos uma nova função

00:11.800 --> 00:14.990
lá em cima addAndHandle, digamos.

00:14.990 --> 00:18.420
Lá esperamos obter dois números e depois também quero obter

00:19.740 --> 00:22.320
uma função de chamada de retorno aqui.

00:22.320 --> 00:24.480
Então uma função que é passada e é um argumento

00:24.480 --> 00:26.670
que deveria fazer algo com o resultado,

00:26.670 --> 00:29.930
então aqui poderíamos gerar o resultado, é claro.

00:29.930 --> 00:31.060
Mas não apenas devolvendo-o,

00:31.060 --> 00:33.290
mas ao invés disso quero chamar a função de

00:33.290 --> 00:35.670
retorno e passar no resultado.

00:35.670 --> 00:36.990
Agora, para isso, quero ser realmente

00:36.990 --> 00:39.270
claro que a ligação de retorno deve ser uma função.

00:39.270 --> 00:42.190
Portanto, mais uma vez, estou usando aquela

00:42.190 --> 00:45.640
definição de tipo de função que talvez não retorne nada,

00:45.640 --> 00:49.650
mas que toma um número como argumento, porque estamos passando

00:49.650 --> 00:51.280
um número aqui.

00:51.280 --> 00:52.740
Portanto, a função de retorno,

00:52.740 --> 00:55.870
a função que estamos passando para esta função como parâmetro,

00:55.870 --> 00:58.460
deve aceitar um número.

00:58.460 --> 01:01.890
Agora lá embaixo, chamaríamos addAndHandle,

01:01.890 --> 01:05.240
passar em 10 e 20 e depois passar em uma função.

01:05.240 --> 01:07.570
Por exemplo, uma função anônima aqui.

01:07.570 --> 01:09.710
Portanto, agora aqui, quando chamamos a função,

01:09.710 --> 01:11.470
este não é, naturalmente, um tipo de função,

01:11.470 --> 01:13.620
mas um valor concreto que estamos passando para

01:13.620 --> 01:15.150
este terceiro argumento.

01:15.150 --> 01:18.870
Portanto, isto agora aqui é uma função anônima criada

01:18.870 --> 01:22.300
aqui e ali, sabemos que vamos receber um número.

01:22.300 --> 01:23.810
Talvez o nome do resultado aqui

01:23.810 --> 01:26.110
e então podemos fazer com ele o que quisermos.

01:26.110 --> 01:27.623
E agora se você compilar isto,

01:28.570 --> 01:31.120
vemos este registro lá embaixo, 30, que é o

01:31.120 --> 01:33.540
resultado de nossa função de callback que

01:33.540 --> 01:35.600
passamos para addAndHandle onde

01:35.600 --> 01:38.250
addAndHandle combina a dois números e depois

01:38.250 --> 01:39.850
chama a callback onde a callback

01:39.850 --> 01:43.200
tem que atender esta condição aqui.

01:43.200 --> 01:45.870
A vantagem de definirmos aqui a definição da função

01:45.870 --> 01:49.490
de callback é que dentro da função que passamos é um tipo de callback

01:49.490 --> 01:52.240
que é capaz de inferir que o resultado será um número

01:52.240 --> 01:54.000
e, portanto, poderíamos fazer

01:54.000 --> 01:56.620
qualquer coisa com resultado aqui.

01:56.620 --> 01:58.090
O que poderíamos fazer com um

01:58.090 --> 02:00.990
número sem declarar explicitamente o tipo aqui porque

02:00.990 --> 02:03.226
o TypeScript sabe que o resultado será um número

02:03.226 --> 02:04.970
porque deixamos muito claro que

02:04.970 --> 02:08.473
o retorno da chamada terá um argumento que é um número.

02:09.310 --> 02:12.170
Portanto, se esperarmos um segundo argumento aqui no

02:12.170 --> 02:13.060
retorno de chamada,

02:13.060 --> 02:15.460
receberíamos um erro porque sabemos bem, o retorno

02:15.460 --> 02:18.630
de chamada que esperamos em nossa função addAndHandle deve

02:18.630 --> 02:20.500
ter apenas um argumento.

02:20.500 --> 02:22.420
Portanto, se depois passamos em uma função

02:22.420 --> 02:23.950
de chamada de retorno que leva a um

02:23.950 --> 02:26.240
segundo argumento, isso é claramente um erro.

02:26.240 --> 02:28.250
A única coisa que o TypeScript não

02:28.250 --> 02:30.280
pega é se devolvermos algo aqui.

02:30.280 --> 02:33.690
Se um resultado de retorno e a ligação de retorno retorna algo,

02:33.690 --> 02:34.767
mesmo que tenhamos

02:34.767 --> 02:37.300
deixado claro que não deve retornar nada.

02:37.300 --> 02:41.180
Isto, entretanto, não é um erro ou um bug no TypeScript.

02:41.180 --> 02:43.150
Na verdade, isso acontece de propósito.

02:43.150 --> 02:46.000
Ao especificar o vazio aqui em nosso tipo de chamada de retorno, estamos

02:46.000 --> 02:49.520
essencialmente dizendo que vamos ignorar quaisquer resultados que você possa

02:49.520 --> 02:50.910
estar retornando aqui.

02:50.910 --> 02:54.030
Portanto, estamos basicamente dizendo em addAndHandle,

02:54.030 --> 02:56.020
onde obtemos essa função de retorno, não

02:56.020 --> 02:58.080
faremos nada com o tipo de retorno.

02:58.080 --> 03:00.600
É por isso que você será capaz de devolver

03:00.600 --> 03:03.550
algo aqui sem punição, mas você sabe, porque está

03:03.550 --> 03:06.850
claramente definido aqui no tipo de retorno, que o retorno

03:06.850 --> 03:09.230
não fará nada com o valor que você poderia

03:09.230 --> 03:10.870
devolver aqui.

03:10.870 --> 03:13.543
Para que o addAndHandle dentro da função não

03:13.543 --> 03:15.680
faça nada com esse valor que você possa

03:15.680 --> 03:17.120
estar retornando.

03:17.120 --> 03:19.620
E isso, é claro, é uma informação útil.

03:19.620 --> 03:21.270
Você pode esperar que aqui,

03:21.270 --> 03:25.710
estamos fazendo algo com o valor retornado pela chamada de retorno, e ao especificar

03:25.710 --> 03:29.000
este tipo aqui, deixamos realmente claro que dentro do

03:29.000 --> 03:31.520
addAndHandle não estamos interessados em

03:31.520 --> 03:33.920
nenhum valor de retorno.

03:33.920 --> 03:36.410
Portanto, isto não o obriga a passar em uma ligação

03:36.410 --> 03:38.260
de retorno que não devolva nada.

03:38.260 --> 03:40.830
Ele apenas lhe diz que qualquer coisa que você possa

03:40.830 --> 03:42.200
devolver não será usada.

03:42.200 --> 03:44.070
Para os parâmetros, é claro que é diferente.

03:44.070 --> 03:45.540
Lá isto é aplicado porque aqui

03:45.540 --> 03:48.310
é realmente importante que você saiba se está passando

03:48.310 --> 03:51.720
por uma ligação de retorno que espera mais parâmetros.

03:51.720 --> 03:53.490
Bem, então você receberá um erro

03:53.490 --> 03:55.350
ou não obterá o resultado que deseja

03:55.350 --> 03:57.740
porque eu só lhe dou um resultado.

03:57.740 --> 04:01.290
Portanto, lá não podemos simplesmente ignorar o que você pode querer, pois

04:01.290 --> 04:02.840
é o caso do tipo de retorno.

04:02.840 --> 04:05.506
Ignoramos isso aqui por passar algo em que a função

04:05.506 --> 04:08.750
addAndHandle é responsável por isso, porque é aí que a

04:08.750 --> 04:10.920
ligação de retorno é chamada.

04:10.920 --> 04:13.210
É por isso que os parâmetros são aplicados e

04:13.210 --> 04:15.060
o TypeScript é realmente rígido quanto

04:15.060 --> 04:17.150
ao número e tipo de parâmetros das funções

04:17.150 --> 04:19.508
de retorno e porque ele não se importa realmente

04:19.508 --> 04:21.253
com o tipo de retorno.
