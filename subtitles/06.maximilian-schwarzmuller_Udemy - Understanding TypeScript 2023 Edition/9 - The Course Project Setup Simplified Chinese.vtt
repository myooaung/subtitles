WEBVTT

00:02.490 --> 00:03.860
男教官：因此, 我们设置了IDE,

00:03.860 --> 00:04.860
这很重要｡

00:04.860 --> 00:07.780
现在, 让我们也设置一个起始项目,

00:07.780 --> 00:11.250
我们将在本课程的不同课程模块中使用它｡

00:11.250 --> 00:16.110
基本上, 我们可以通过一个项目设置开始每个课程模块,

00:16.110 --> 00:18.339
然后在那里编写代码｡

00:18.339 --> 00:20.730
正如您在本课程中所看到的,

00:20.730 --> 00:24.330
编写代码通常不需要复杂的设置｡

00:24.330 --> 00:28.330
但在这里, 我想要一个项目, 在那里我们可以编写代码,

00:28.330 --> 00:33.530
编译它, 然后立即在浏览器中看到该代码的输出｡

00:33.530 --> 00:36.970
为此, 我将首先添加一个新的索引HTML文件｡ 

00:36.970 --> 00:39.520
你可以把它添加到任何一个空的文件夹中,

00:39.520 --> 00:42.620
这里你看到的另外两个文件或文件夹只是git的配置文件,

00:42.620 --> 00:50.200
如果你使用版本控制的话, 还有我的编辑器的配置文件, 它设置缩放级别｡

00:50.200 --> 00:51.670
所以这就是我在这里的全部｡ 

00:51.670 --> 00:56.750
但是在索引HTML文件中, 我现在将用一个基本骨架初始化它｡

00:56.750 --> 00:58.390
对于那些要编写代码的人,

00:58.390 --> 01:04.200
你可以只输入HTML, 选择html：5选项, 如果你没有看到这个菜单,

01:04.200 --> 01:06.820
只要按Ctrl和空格键｡

01:06.820 --> 01:09.600
选择html：5选项, 然后按回车键,

01:09.600 --> 01:11.740
您将得到这个骨架｡

01:11.740 --> 01:14.670
我们可以在这里输入“了解TypeScript”作为标题,

01:14.670 --> 01:16.722
但这并不重要｡

01:16.722 --> 01:21.150
更重要的是, 在这里, 您可以在head部分添加一个script标记,

01:21.150 --> 01:29.020
并添加一个source和point at app｡

01:29.020 --> 01:29.020
js并添加defer属性｡ 

01:29.020 --> 01:34.520
这将尝试导入应用程序｡  js文件, 当然现在还不存在｡

01:34.520 --> 01:35.530
当然, 如果它找到了,

01:35.530 --> 01:37.960
它也会执行它｡

01:37.960 --> 01:41.210
这允许我们直接在浏览器的屏幕上查看我们的更改,

01:41.210 --> 01:44.790
我们的代码更改｡

01:44.790 --> 01:49.560
或者, 如果我们只是在浏览器def工具中将一些内容记录到控制台｡

01:49.560 --> 01:52.250
接下来, 我将添加一个应用程序｡  ts文件中｡ 

01:52.250 --> 01:54.170
这就是文件, 一个TypeScript文件,

01:54.170 --> 01:55.530
将在其中写入一些代码｡

01:55.530 --> 01:58.580
例如, 您可以在这里控制台记录您代码,

01:58.580 --> 02:01.580
或者任何您想要东西

02:01.580 --> 02:03.780
您可以在这里控制台记录您想要的任何内容｡ 

02:03.780 --> 02:09.280
如果你这样做了, 你可以用我们之前安装的TypeScript编译这个文件,

02:09.280 --> 02:10.880
这样你就可以打开终端,

02:10.880 --> 02:13.070
把它集成到这里的编辑器中｡

02:13.070 --> 02:16.580
只需编写tsc应用程序｡  ts.

02:16.580 --> 02:20.610
这将编译此TypeScript文件并生成一个应用｡

02:20.610 --> 02:20.610
js文件,

02:20.610 --> 02:22.530
这是我们在这里导入的文件｡

02:22.530 --> 02:27.120
如果你现在打开这个索引｡  html文件, 您可以看到这里发生的一切｡

02:27.120 --> 02:29.800
你把你写在这里的逻辑写出来｡ 

02:29.800 --> 02:32.340
或者是在dom上操作的逻辑,

02:32.340 --> 02:37.870
或者像这个例子, 它只是被锁定在控制台上的逻辑｡

02:37.870 --> 02:41.700
在本例中, 我在浏览器中打开了这个HTML文件｡ 

02:41.700 --> 02:44.460
您只需在IDE外部双击它即可｡ 

02:44.460 --> 02:47.960
所以在正常的Windows资源管理器, 或Mac Finder.

02:47.960 --> 02:49.910
然后, 如果您只是在控制台中记录一些内容,

02:49.910 --> 02:54.010
则可以打开您的开发人员工具, 您将在此处看到您的日志｡

02:54.010 --> 02:56.690
这很好, 但是无论何时我们在代码中做了什么改变,

02:56.690 --> 03:02.340
我们都必须手动重新编译, 这就是现在的情况｡

03:02.340 --> 03:04.300
在本课程的后面部分, 它将有所改变｡ 

03:04.300 --> 03:07.970
但我们也必须在这里手动重新加载此页面｡ 

03:07.970 --> 03:11.940
为了加快这个过程, 并确保您不必在每次更改内容时都执行此操作,

03:11.940 --> 03:22.360
我们实际上还将在此虚拟设置中添加另一个工具, 我们将在整个课程中使用它, 以便自动执行此操作｡

03:22.360 --> 03:23.720
现在要安装这样一个工具,

03:23.720 --> 03:26.430
让我们在这里运行npm init｡

03:26.430 --> 03:29.830
在此项目文件夹中, 如果安装了节点JS,

03:29.830 --> 03:32.113
则可以使用npm命令｡

03:32.960 --> 03:39.690
确保为此, 您访问了nodejs｡  org下载并安装您在此处找到的最新版本｡

03:39.690 --> 03:43.040
目前, 我们不打算编写任何节点JS代码,

03:43.040 --> 03:48.610
但节点JS附带了NPM工具, 您可以使用它来安装第三方依赖项或有用的工具,

03:48.610 --> 03:51.210
以加快我们的开发｡

03:51.210 --> 03:53.840
因此我们需要它｡ 

03:53.840 --> 03:55.970
因此, 安装了它之后, 您可以在这个项目文件夹中运行npm

03:55.970 --> 03:57.800
init｡

03:57.800 --> 03:58.740
只需按回车键,

03:58.740 --> 04:00.560
您就可以使用默认值回答所有这些问题,

04:00.560 --> 04:03.570
只需一直按回车键即可｡

04:03.570 --> 04:08.150
一旦这个完成, 它会给你一个包｡  json文件, 看起来像这样｡

04:08.150 --> 04:14.410
现在, 您可以运行npm install来安装一个专属于此项目的依赖项｡

04:14.410 --> 04:16.210
所以要安装一个工具, 你可以说,

04:16.210 --> 04:17.730
你可以在这个项目中使用,

04:17.730 --> 04:24.580
-：-save-dev将其标记为仅用于开发的依赖项, 因此是一个在开发期间帮助我们的工具,

04:24.580 --> 04:29.930
不包含任何代码, 这些代码将作为主代码的一部分执行｡

04:29.930 --> 04:33.470
工具名称为lite-server｡ 

04:33.470 --> 04:37.103
如果您在此处按Enter键, 则会安装此额外工具｡ 

04:38.230 --> 04:42.000
等这件事结束了, 就把你的包裹放进去. json文件, 并在脚本部分添加一个逗号,

04:42.000 --> 04:46.870
然后添加一个新脚本, 将其命名为start｡

04:46.870 --> 04:51.570
然后输入lite-server作为双引号内的值｡

04:51.570 --> 04:54.580
因此, 此处添加的软件包的名称｡ 

04:54.580 --> 04:57.550
如果现在按Enter键, 则可以在此处运行npm

04:57.550 --> 04:59.400
start以启动此启动脚本｡

04:59.400 --> 05:02.530
而lite服务器是一个简单的开发服务器,

05:02.530 --> 05:08.410
它始终为索引服务｡ html文件｡

05:08.410 --> 05:08.410
json文件, 所以这个文件｡ 

05:08.410 --> 05:16.143
它在这里看到的这个URL上为您的应用程序提供服务, 默认情况下为localhost：3000｡

05:17.440 --> 05:19.690
然后你就可以参观这个地方｡ 

05:19.690 --> 05:23.090
只需在浏览器中输入localhost：3000｡ 

05:23.090 --> 05:24.860
现在您的代码在这里运行｡ 

05:24.860 --> 05:26.170
为什么这样更好？

05:26.170 --> 05:28.840
现在, 只要这个目录中的另一个文件发生更改,

05:28.840 --> 05:32.180
就会自动重新加载页面｡

05:32.180 --> 05:35.130
例如, 如果我在这里添加一个感叹号, 保存它,

05:35.130 --> 05:40.323
然后用tsc应用程序再次编译它｡

05:40.323 --> 05:40.323
TS,

05:42.270 --> 05:47.230
然后你回到浏览器, 你马上就会看到最新的输出, 因为它自动重新加载了｡

05:47.230 --> 05:51.690
这就为我们节省了手动重新加载的额外工作｡

05:51.690 --> 05:54.540
现在关于这个npm启动过程很重要,

05:54.540 --> 06:00.210
只要你在你的项目上工作, 只要你在写你想在浏览器中看到执行的代码,

06:00.210 --> 06:02.800
一定要让它运行｡

06:02.800 --> 06:06.450
完成后, 您可以随时使用控件C退出此进程,

06:06.450 --> 06:11.600
但一旦这样做, 您的项目将不再由本地主机3000提供服务｡

06:11.600 --> 06:13.980
因此, 只要您在编写代码和进行更改,

06:13.980 --> 06:15.650
就应保持它的正常运行｡

06:15.650 --> 06:19.200
我会把它改回来, 但这完全取决于你｡

06:19.200 --> 06:22.410
这是我在整个课程中使用的项目设置｡

06:22.410 --> 06:25.530
当然, 在完成的表格中, 你也会发现它是附件｡

06:25.530 --> 06:27.250
有一点很重要｡ 

06:27.250 --> 06:30.330
如果您下载附加的起始项目, 或任何其他课程快照,

06:30.330 --> 06:41.070
或您在课程中任何位置找到的任何其他代码快照, 则您将获得不包含此节点模块文件夹的下载｡

06:41.070 --> 06:42.590
这是一个巨大的文件夹,

06:42.590 --> 06:46.970
最终存储所有第三方包及其依赖项｡

06:46.970 --> 06:49.840
而且由于它是如此巨大, 我通常会删除它,

06:49.840 --> 06:54.080
因为您可以通过运行npm install轻松地重新创建它｡

06:54.080 --> 06:56.640
所以如果你下载了我的一个附件, 导航到解压的文件夹,

06:56.640 --> 07:01.530
在那个文件夹中, 运行npm install｡

07:01.530 --> 07:06.110
这将安装所有依赖项并重新创建此节点模块文件夹｡

07:06.110 --> 07:07.280
一旦你完成了这个, 你就可以运行npm

07:07.280 --> 07:11.330
start或者在这个项目中做你想做的任何事情｡

07:11.330 --> 07:14.750
这样, 我们就有了这个项目设置, 我们将在整个课程中使用｡

07:14.750 --> 07:16.810
现在我们不要再浪费时间了,

07:16.810 --> 07:18.303
我们开始吧｡
