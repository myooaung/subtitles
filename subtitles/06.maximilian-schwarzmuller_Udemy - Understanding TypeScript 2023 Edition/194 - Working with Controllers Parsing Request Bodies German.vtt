WEBVTT

00:02.170 --> 00:03.860
Kursleiter: Nachdem wir nun einige Routen registriert haben,

00:03.860 --> 00:05.630
können wir nun eine Logik für diese Routen hinzufügen.

00:05.630 --> 00:07.730
Dazu füge ich einen Ordner "Controller" hinzu.

00:07.730 --> 00:08.750
Das ist kein Muss, aber

00:08.750 --> 00:11.550
ich möchte meine Logik hier in die Controller und die Routen

00:11.550 --> 00:13.650
in den Routenordner aufteilen.

00:13.650 --> 00:16.740
Und bei den Controllern werde ich auch eine ToDo hinzufügen. ts-Datei, die nun die Controller-Funktionen

00:16.740 --> 00:19.230
enthält, auf die wir in unseren Routen

00:19.230 --> 00:21.990
verweisen wollen.

00:21.990 --> 00:25.120
Hier benötige ich also eine Funktion, die ich exportieren werde,

00:25.120 --> 00:27.220
und ich werde sie als Pfeilfunktion erstellen,

00:27.220 --> 00:29.170
was allerdings kein Muss ist, und ich werde

00:29.170 --> 00:31.290
sie createTodo nennen, und es ist eine Funktion,

00:32.420 --> 00:34.510
die diese typischen Parameter erhält, die

00:34.510 --> 00:36.720
man in jeder Middleware-Funktion in Express

00:36.720 --> 00:38.830
erhält, eine Anfrage, eine Antwort und die

00:38.830 --> 00:41.297
nächste Funktion.

00:41.297 --> 00:44.550
Und wir haben gerade gesehen, woher wir die Typen bekommen können.

00:44.550 --> 00:47.190
Wir können die Funktionen request,

00:47.190 --> 00:50.460
response und next aus express importieren.

00:50.460 --> 00:52.800
Das importiert uns diese Typen.

00:52.800 --> 00:54.910
Wir können sie dann hier hinzufügen.

00:54.910 --> 00:57.230
Das Hinzufügen all dieser Typen hier, wie wir es auch

00:57.230 --> 00:59.980
in der Fehlerbehandlungs-Middleware getan haben, kann jedoch

00:59.980 --> 01:01.300
umständlich sein.

01:01.300 --> 01:03.750
Es funktioniert, aber es kann lästig sein.

01:03.750 --> 01:05.190
Es gibt also eine Abkürzung.

01:05.190 --> 01:08.220
Anstatt die Typen all dieser Parameter zu setzen, können

01:08.220 --> 01:11.160
wir TypeScript auch einfach sagen, welche Art von

01:11.160 --> 01:14.610
Funktion wir in dieser createTodo-Konstante speichern wollen,

01:14.610 --> 01:16.260
und wir können dann einfach den

01:16.260 --> 01:19.530
RequestHandler-Typ von express importieren, und dann

01:19.530 --> 01:24.340
setzen wir dies hier, createTodo, auf den Typ RequestHandler.

01:24.340 --> 01:28.780
Und jetzt sehen Sie, dass TypeScript weiß, dass wir hier eine Anfrage haben, hier haben

01:28.780 --> 01:30.560
wir eine Antwort, und hier haben wir

01:30.560 --> 01:32.590
diese nächste Funktion, weil unser RequestHandler

01:32.590 --> 01:35.730
so definiert ist, dass er so aussieht.

01:35.730 --> 01:38.080
Es handelt sich um eine Funktion mit drei Parametern,

01:38.080 --> 01:40.160
wobei der erste Parameter die Anfrage, der

01:40.160 --> 01:42.030
zweite Parameter die Antwort und der

01:42.030 --> 01:44.810
dritte Parameter die nächste Funktion ist.

01:44.810 --> 01:47.313
Das kann diese Einrichtung hier vereinfachen.

01:48.195 --> 01:49.380
RequestHandler ist natürlich

01:49.380 --> 01:51.360
immer verfügbar, weil wir die Typen für Express

01:51.360 --> 01:52.570
installiert haben und daher

01:52.570 --> 01:55.270
können wir diesen Import hier hinzufügen.

01:55.270 --> 01:57.940
Seien Sie sich bewusst, dass dieser Import immer weg sein

01:57.940 --> 01:59.960
wird, sobald dies zu JavaScript kompiliert,

01:59.960 --> 02:02.300
weil wir nur einen Typ hier importieren.

02:02.300 --> 02:05.030
Dadurch wird kein Code importiert, der ausgeführt werden könnte.

02:05.030 --> 02:06.930
Es wird lediglich ein Typ importiert.

02:06.930 --> 02:08.650
Daher wird sie bei der Kompilierung

02:08.650 --> 02:11.290
entfernt, weil sie nichts hinzufügt, was erforderlich

02:11.290 --> 02:15.860
wäre, wenn sie in normalem JavaScript ausgeführt wird.

02:15.860 --> 02:16.693
Damit habe ich

02:16.693 --> 02:18.900
aber die Funktion createTodo, und warum

02:18.900 --> 02:22.240
fügen wir hier nicht ein TODOS-Array hinzu, um einige ToDos

02:22.240 --> 02:25.530
nur im Speicher zu verwalten, versteht sich.

02:25.530 --> 02:28.310
Dies wird bei jedem Neustart unseres Servers verschwinden, da

02:28.310 --> 02:31.460
es sich letztendlich nur um eine Konstante in JavaScript handelt.

02:31.460 --> 02:32.293
Man könnte sich natürlich

02:32.293 --> 02:34.770
auch vorstellen, hier mit einer Datenbank zu kommunizieren,

02:34.770 --> 02:36.360
aber ich möchte dies einfach halten,

02:36.360 --> 02:38.630
weil es um JavaScript und TypeScript geht und nicht

02:38.630 --> 02:41.323
so sehr um Datenbankverbindungen.

02:42.390 --> 02:43.790
Hier habe ich also to dos,

02:43.790 --> 02:47.600
und jetzt möchte ich hier ein neues to do erstellen, wenn wir eine eingehende

02:47.600 --> 02:49.320
Anfrage haben, und das sollte ein

02:49.320 --> 02:51.020
neues Objekt sein, und warum erstellen

02:51.020 --> 02:52.980
wir nicht einen Blueprint für dieses

02:52.980 --> 02:55.420
Objekt, ein Modell.

02:55.420 --> 02:57.640
Ich füge also einen Modellordner

02:57.640 --> 02:59.030
hinzu, und in diesem Modellordner

02:59.030 --> 03:04.030
füge ich ein Todo hinzu. ts-Datei und exportiere hier eine Klasse, die

03:04.760 --> 03:06.250
ich Todo nenne, in der ich definiere,

03:06.250 --> 03:08.210
wie To Do aussehen soll.

03:08.210 --> 03:10.330
Dort können wir einen Konstruktor hinzufügen

03:10.330 --> 03:13.129
und auch diese TypeScript-Verknüpfung verwenden,

03:13.129 --> 03:16.440
bei der wir einen Zugriffsmodifikator wie public und dann

03:16.440 --> 03:19.360
einen Eigenschaftsnamen wie ID, der vom Typ string

03:19.360 --> 03:21.250
ist, sagen wir, und text, der ebenfalls

03:21.250 --> 03:24.050
vom Typ string ist, hinzufügen können, und dann

03:24.050 --> 03:27.470
fügt TypeScript automatisch Felder, Eigenschaften mit gleichen

03:27.470 --> 03:32.750
Namen und zugewiesenen Werten, die wir dem Konstruktor übergeben, zu diesen Feldern hinzu,

03:32.750 --> 03:37.230
wenn wir die Klasse instanziieren.

03:37.230 --> 03:38.670
Ich werde also diese Syntax verwenden,

03:38.670 --> 03:40.060
die Sie bereits in diesem Kurs

03:40.060 --> 03:41.810
kennen gelernt haben.

03:41.810 --> 03:44.660
Und jetzt in todos. ts hier im Controller

03:44.660 --> 03:47.893
können wir natürlich Todo aus, eine Ebene

03:49.020 --> 03:53.403
höher, models/todo, importieren und diesen Typ und diese

03:54.530 --> 03:58.800
Klasse jetzt hier in unserer Datei verwenden.

03:58.800 --> 04:01.320
Und es ist sowohl ein Typ als auch eine Klasse, weil es

04:01.320 --> 04:02.800
offensichtlich eine Klasse ist,

04:02.800 --> 04:05.750
und jede Klasse fungiert automatisch auch als ein Typ.

04:05.750 --> 04:08.550
Das ist auch das, was Sie in diesem Kurs gesehen haben.

04:08.550 --> 04:09.750
Hier können wir also

04:09.750 --> 04:11.910
erst einmal sagen, dass TODOS hier

04:11.910 --> 04:13.550
ein Array von to dos ist.

04:13.550 --> 04:15.480
Diese zusätzliche Anmerkung kann nicht schaden,

04:15.480 --> 04:18.590
damit wir die richtige Unterstützung erhalten, wenn wir anfangen, To Dos

04:18.590 --> 04:21.410
hinzuzufügen oder mit den To Dos in diesem Array zu arbeiten.

04:21.410 --> 04:23.610
Und hier, wenn ich ein neues zu tun, ich jetzt

04:23.610 --> 04:26.220
erstellen Sie es durch die Instanziierung dieser

04:26.220 --> 04:28.370
Klasse, und wir müssen in einer ID übergeben,

04:28.370 --> 04:32.030
und hier werde ich eine zufällige pseudo-unique ID mit Math random

04:32.030 --> 04:34.230
toString erstellen.

04:34.230 --> 04:35.270
Das ist nicht wirklich

04:35.270 --> 04:36.660
einzigartig, aber gut genug.

04:36.660 --> 04:39.170
Und jetzt für den Wert hier, dort möchte

04:39.170 --> 04:41.670
ich natürlich einige Text, den ich erwarten,

04:41.670 --> 04:45.530
um in meinem eingehenden Anfragekörper zu erhalten.

04:45.530 --> 04:48.823
Ich erwarte also, dass ich meinen Text hier erhalte,

04:49.750 --> 04:53.270
im Grunde auf Anfrage. text, so dass ich hier

04:53.270 --> 04:56.280
dann text als Wert setzen kann.

04:56.280 --> 04:57.113
Nun, das funktioniert,

04:57.113 --> 04:59.640
aber bitte beachten Sie, dass dies nur funktioniert,

04:59.640 --> 05:02.320
weil TypeScript sieht, dass dies vom Typ any ist.

05:02.320 --> 05:04.420
Er weiß nicht, dass es sich um eine Zeichenkette handelt.

05:04.420 --> 05:05.510
Und es kann es nicht wissen,

05:05.510 --> 05:08.390
denn woher soll TypeScript wissen, welche Daten Teil

05:08.390 --> 05:11.140
unserer eingehenden Anfragen sind?

05:11.140 --> 05:12.430
Das ist nicht klar.

05:12.430 --> 05:14.260
Wir geben nirgendwo an, was in

05:14.260 --> 05:17.620
den Anfragen, die wir erhalten, enthalten sein wird.

05:17.620 --> 05:19.270
Wie können wir dies nun verbessern?

05:19.270 --> 05:21.780
Nun, wir können zum Beispiel Typecasting verwenden.

05:21.780 --> 05:23.660
Typecasting ist immer eine gute Lösung,

05:23.660 --> 05:26.090
wenn man einen bestimmten Typ kennt, aber TypeScript

05:26.090 --> 05:27.360
kennt ihn nicht.

05:27.360 --> 05:30.440
Bevor wir also auf den Text zugreifen, können wir diesen in

05:30.440 --> 05:32.650
ein Objekt typisieren, das eine Texteigenschaft

05:32.650 --> 05:34.900
hat, die eine Zeichenkette ist.

05:34.900 --> 05:36.920
Da wir diese Anwendung entwickeln, wissen

05:36.920 --> 05:40.320
wir, was wir von unseren eingehenden Anfragen erwarten.

05:40.320 --> 05:42.750
Da wir also wissen, dass es eine Texteigenschaft im eingehenden

05:42.750 --> 05:44.166
Anfragebody geben wird, können

05:44.166 --> 05:46.630
wir ihn in ein solches Objekt umwandeln.

05:46.630 --> 05:51.480
Und jetzt bekommen wir hier richtige TypeScript- und auch IDE-Unterstützung.

05:51.480 --> 05:53.560
Damit fügen wir eine neue Aufgabe hinzu.

05:53.560 --> 05:55.470
Jetzt können wir auf TODOS zugreifen

05:55.470 --> 05:58.280
und die neuen Aufgaben auf dieses Array schieben.

05:58.280 --> 05:59.330
Und auch hier wird

05:59.330 --> 06:01.060
es natürlich nur als Konstante

06:01.060 --> 06:02.750
und somit nur im Speicher gespeichert,

06:02.750 --> 06:05.650
denn die Arbeit mit einer Datenbank hat nicht wirklich

06:05.650 --> 06:08.880
etwas mit Node oder TypeScript zu tun, sondern, nun ja,

06:08.880 --> 06:11.170
mit der Datenbank.

06:11.170 --> 06:14.140
Damit haben wir hier die Funktion Todo erstellen.

06:14.140 --> 06:16.400
Gehen wir nun zu den Aufgaben-Routen und

06:16.400 --> 06:19.070
importieren diese Controller-Funktion.

06:19.070 --> 06:22.030
Importieren Sie also aus dem Controller-Ordner

06:22.030 --> 06:24.000
aus der Todo-Datei und importieren

06:24.000 --> 06:26.660
Sie die Funktion create Todo und verweisen

06:26.660 --> 06:30.100
Sie auf diese Funktion hier auf der Post-Route, so dass

06:30.100 --> 06:35.100
jede Anfrage, die auf slash todos slash nichts zielt, die Funktion createTodo

06:36.060 --> 06:38.390
erreicht.

06:38.390 --> 06:39.580
Führen Sie es hier nicht aus.

06:39.580 --> 06:40.650
Zeigen Sie einfach auf ihn.

06:40.650 --> 06:43.890
Sie wird später für Sie von node und express in Ihrem laufenden

06:43.890 --> 06:45.883
Webserver ausgeführt.

06:46.880 --> 06:49.630
Jetzt haben wir also diese Funktion hier.

06:49.630 --> 06:50.900
Wir sind aber noch nicht fertig.

06:50.900 --> 06:52.290
Im Controller sollten wir alle

06:52.290 --> 06:54.360
einfach eine Antwort zurückgeben.

06:54.360 --> 06:56.720
Hier können wir also zum Beispiel eine Antwort

06:56.720 --> 06:59.420
im JSON-Format mit der JSON-Methode senden, in der

06:59.420 --> 07:02.300
wir sagen, dass die Nachricht das Todo erstellt hat oder

07:02.300 --> 07:04.040
was auch immer Sie wollen, und wir

07:04.040 --> 07:07.770
haben vielleicht den Schlüssel createdTodo, mit dem wir das neue Todo,

07:07.770 --> 07:10.520
das auf der Serverseite hinzugefügt wurde, weiterleiten,

07:10.520 --> 07:12.660
so dass wir das auch auf dem Client verwenden

07:12.660 --> 07:14.490
können.

07:14.490 --> 07:17.750
Und vielleicht setzen Sie hier auch einen Statuscode von 201, um anzuzeigen,

07:17.750 --> 07:19.700
dass wir erfolgreich waren und dass eine

07:19.700 --> 07:21.793
Ressource erstellt wurde.

07:22.680 --> 07:24.640
Jetzt müssen wir nur noch sicherstellen,

07:24.640 --> 07:28.500
dass der Körper, den wir hier zu extrahieren versuchen, tatsächlich existiert.

07:28.500 --> 07:29.770
Und für Daten und App. ts, müssen

07:29.770 --> 07:33.130
wir die Körper der eingehenden Anfragen analysieren.

07:33.130 --> 07:37.620
Dazu können wir aus dem Paket body-parser,

07:37.620 --> 07:39.220
das wir ebenfalls

07:39.220 --> 07:41.380
installiert haben,

07:41.380 --> 07:46.380
die JSON-Methode wie folgt importieren.

07:46.410 --> 07:49.170
Und dann können Sie hier diese Ausführung

07:49.170 --> 07:51.310
als Middleware registrieren.

07:51.310 --> 07:54.480
Es handelt sich also um eine Middleware, die von einem Drittanbieterpaket

07:54.480 --> 07:58.130
bereitgestellt wird, das die Körper aller eingehenden Anfragen analysiert

07:58.130 --> 08:01.570
und alle darin gefundenen JSON-Daten extrahiert, um dann den Körperschlüssel

08:01.570 --> 08:07.970
dieses Anfrageobjekts mit diesen analysierten JSON-Daten zu füllen.

08:07.970 --> 08:10.290
Das ist es, was diese JSON-Middleware

08:10.290 --> 08:12.503
aus dem body-parser-Paket tut.

08:13.890 --> 08:16.520
Und damit sollten wir einen Server haben, der in der Lage

08:16.520 --> 08:18.230
ist, neue to dos zu erstellen.

08:18.230 --> 08:22.210
Speichern Sie alle Dateien und vergewissern Sie sich, dass die Neukompilierung ohne Fehler erfolgt.

08:22.210 --> 08:26.150
Stellen Sie sicher, dass nodemon die Anwendung noch bedient. js-Datei.

08:26.150 --> 08:28.560
Und jetzt müssen wir eine Postanforderung senden.

08:28.560 --> 08:31.150
Und mit dem Browser können wir das nicht, aber

08:31.150 --> 08:34.260
wir können ein Tool dafür verwenden, Postman.

08:34.260 --> 08:35.600
Sie können einfach danach suchen

08:35.600 --> 08:38.160
und dann die Postman-App auf Ihrem System installieren.

08:38.160 --> 08:39.283
Die Nutzung ist kostenlos.

08:40.440 --> 08:41.570
Sobald Sie es installiert haben, können

08:41.570 --> 08:43.390
Sie es starten, und Sie sollten einen Bildschirm sehen,

08:43.390 --> 08:44.440
der ungefähr so aussieht.

08:44.440 --> 08:46.460
Wenn Sie ein modales Overlay sehen, können

08:46.460 --> 08:48.010
Sie es einfach schließen.

08:48.010 --> 08:50.240
Und hier können Sie nun eine neue Anfrage erstellen,

08:50.240 --> 08:51.740
indem Sie auf das Plus klicken,

08:51.740 --> 08:53.040
den Anfragetyp auswählen,

08:53.040 --> 08:55.100
in diesem Fall eine Beitragsanfrage, und

08:55.100 --> 08:56.450
die URL eingeben.

08:56.450 --> 08:58.820
Hier ist es localhost 3000, 3000 weil

08:58.820 --> 09:01.660
das der Port ist, den ich hier gewählt habe.

09:01.660 --> 09:03.100
Und dann müssen wir die

09:03.100 --> 09:06.320
Anfrage an slash todos slash nothing senden.

09:06.320 --> 09:10.000
Also hier zum Schrägstrich todos Schrägstrich nichts.

09:10.000 --> 09:12.120
Wir wollen einen Body an die Anfrage anhängen,

09:12.120 --> 09:15.440
und das sollte hier ein raw body JSON sein, um einige JSON-Daten

09:15.440 --> 09:17.010
zu senden.

09:17.010 --> 09:19.480
Und was müssen wir nun hierher schicken?

09:19.480 --> 09:21.840
Nun, was wir in der Middleware-Funktion extrahieren,

09:21.840 --> 09:22.880
also in diesem Fall, sollten

09:22.880 --> 09:24.570
wir eine Texteigenschaft als Teil

09:24.570 --> 09:27.410
unserer JSON-Daten haben, die wir senden.

09:27.410 --> 09:29.610
Fügen Sie hier also einen Text als Namen ein und

09:29.610 --> 09:31.070
dann einen beliebigen Text Ihrer

09:31.070 --> 09:33.230
Wahl, z. B. "Beenden Sie den Kurs".

09:33.230 --> 09:36.960
Wenn Sie jetzt auf "Senden" klicken, wird die Anfrage gesendet, und hier

09:36.960 --> 09:38.990
ist die Antwort, und das sieht gut aus.

09:38.990 --> 09:40.670
Wir haben das Erstellen einer Aufgabe zurück.

09:40.670 --> 09:43.600
Wir sehen die ID, die erzeugt wurde, und den Text.

09:43.600 --> 09:45.870
Unser Backend funktioniert hier also eindeutig.

09:45.870 --> 09:47.690
Und wir haben alles mit TypeScript geschrieben, aber

09:47.690 --> 09:49.880
wir stellen es als normales JavaScript zur Verfügung.

09:49.880 --> 09:51.183
Das ist der ganze Trick.
