WEBVTT

00:02.290 --> 00:03.280
Istruttore: Iniziamo

00:03.280 --> 00:06.110
con la nostra applicazione Node typescript.

00:06.110 --> 00:08.750
Ora, si potrebbe pensare che sia necessaria una configurazione

00:08.750 --> 00:11.170
complessa con webpack e così via, ma in realtà non

00:11.170 --> 00:12.410
è così.

00:12.410 --> 00:16.270
Useremo il comando tsc per compilare i nostri file.

00:16.270 --> 00:18.160
Quindi, possiamo usare il comando node per

00:18.160 --> 00:19.890
eseguire i nostri file compilati.

00:19.890 --> 00:21.700
È tutto ciò di cui abbiamo bisogno.

00:21.700 --> 00:25.960
Tuttavia, imposterò un progetto qui con npm init, in modo da ottenere

00:25.960 --> 00:28.810
un pacchetto. json perché, dato che creeremo

00:28.810 --> 00:32.250
una normale applicazione Node, installeremo alcuni pacchetti

00:32.250 --> 00:36.240
di terze parti come Express. js.

00:36.240 --> 00:38.470
E voglio anche installare un ulteriore strumento

00:38.470 --> 00:40.950
che semplifica il nostro processo di sviluppo.

00:40.950 --> 00:44.630
Eseguire quindi npm init qui, in una cartella vuota a scelta.

00:44.630 --> 00:48.190
Se volete, potete confermare tutte le impostazioni predefinite e poi

00:48.190 --> 00:50.540
avrete un pacchetto. json, che dovrebbe

00:50.540 --> 00:52.750
avere un aspetto simile a questo.

00:52.750 --> 00:56.210
Ora, eseguite anche tsc --init per inizializzare questo progetto

00:56.210 --> 00:59.390
come progetto typescript, in modo da ottenere questo

00:59.390 --> 01:01.860
tsconfig. json che ora è possibile

01:01.860 --> 01:04.313
trovare tra i propri requisiti.

01:05.770 --> 01:09.020
E lì, ho già la prima regolazione che voglio fare.

01:09.020 --> 01:13.300
Il target può essere facilmente impostato su es2018, ad esempio, a seconda

01:13.300 --> 01:16.090
della versione di node in uso, ma se si utilizza l'ultima,

01:16.090 --> 01:17.750
questa moderna sintassi JavaScript

01:17.750 --> 01:21.380
dovrebbe essere sicuramente supportata.

01:21.380 --> 01:24.220
Il modulo può rimanere in commonjs, ma poi

01:24.220 --> 01:27.460
voglio anche aggiungere moduleResolution qui

01:27.460 --> 01:29.010
e impostarlo su node.

01:29.010 --> 01:33.350
Questo indica semplicemente a typescript come i diversi file e importazioni

01:33.350 --> 01:35.483
lavoreranno insieme.

01:36.410 --> 01:37.640
E dobbiamo impostarlo su nodo

01:37.640 --> 01:40.020
per assicurarci che tutto funzioni correttamente.

01:40.020 --> 01:42.470
Imposterò anche la mia outDir, commentandola

01:42.470 --> 01:44.790
e impostandola su dist, e la mia rootDir

01:44.790 --> 01:46.990
su src, perché voglio separare il mio

01:46.990 --> 01:49.600
codice sorgente dattiloscritto.

01:49.600 --> 01:50.700
E poi l'output, che

01:50.700 --> 01:53.170
sarà l'effettivo file JavaScript che possiamo

01:53.170 --> 01:55.733
eseguire con l'aiuto di node.

01:56.820 --> 01:58.850
A parte questo, mi trovo bene con la modalità rigorosa,

01:58.850 --> 02:00.710
ma naturalmente potete regolare il tutto in base

02:00.710 --> 02:03.030
alle vostre esigenze e ai vostri gusti personali.

02:03.030 --> 02:06.320
Dopotutto, avete imparato tutto su questo argomento durante il corso.

02:06.320 --> 02:08.830
E con questo possiamo salvare la configurazione.

02:08.830 --> 02:11.070
A proposito, troverete anche questa configurazione

02:11.070 --> 02:12.460
di base allegata.

02:12.460 --> 02:14.120
È possibile salvare questa configurazione.

02:14.120 --> 02:16.170
E creerò anche una cartella src, dove scriveremo

02:16.170 --> 02:18.130
il nostro codice sorgente, il nostro codice

02:18.130 --> 02:20.230
sorgente dattiloscritto.

02:20.230 --> 02:23.020
E questa è la parte in cui voglio immergermi.

02:23.020 --> 02:26.370
Ora costruiremo la nostra applicazione con typescript

02:26.370 --> 02:27.960
nella cartella src.

02:27.960 --> 02:30.200
E poiché costruiremo un semplice server web e vogliamo

02:30.200 --> 02:32.920
anche usare Express. js lì, per prima cosa

02:32.920 --> 02:36.120
installerò alcune dipendenze qui.

02:36.120 --> 02:38.440
Con npm install --save, voglio installare

02:38.440 --> 02:41.040
express, che è il framework Express

02:41.040 --> 02:44.100
per Node. js, che ovviamente non è sempre

02:44.100 --> 02:45.680
necessario, ma qui voglio costruire

02:45.680 --> 02:48.440
un'applicazione Node Express.

02:48.440 --> 02:51.500
E installerà il pacchetto body-parser, che ci aiuta

02:51.500 --> 02:54.403
ad analizzare i corpi delle richieste in arrivo.

02:55.290 --> 02:58.180
Per ora è tutto per quanto riguarda le mie dipendenze di produzione.

02:58.180 --> 03:00.110
Potremmo aggiungerne altri in seguito.

03:00.110 --> 03:01.523
Quindi premiamo invio.

03:02.960 --> 03:04.120
Una volta installato,

03:04.120 --> 03:07.540
diamo un'occhiata alle dipendenze di sviluppo.

03:07.540 --> 03:11.450
Li installerò con npm install --save-dev e lì voglio installare modemon,

03:11.450 --> 03:13.330
uno strumento che ci permette di

03:13.330 --> 03:16.340
eseguire un file con Node, ma che poi controlla il file

03:16.340 --> 03:18.210
e la cartella in cui si trova, oltre

03:18.210 --> 03:19.820
a tutte le sottocartelle, per

03:19.820 --> 03:22.690
verificare eventuali modifiche.

03:22.690 --> 03:24.050
Ogni volta che un file viene modificato,

03:24.050 --> 03:26.030
il server Node viene riavviato.

03:26.030 --> 03:27.620
Questo velocizzerà semplicemente lo

03:27.620 --> 03:29.510
sviluppo, perché riavvierà automaticamente

03:29.510 --> 03:31.490
il nostro server di applicazioni Node ogni volta

03:31.490 --> 03:33.500
che modificheremo il codice sorgente.

03:33.500 --> 03:36.180
Abbiamo bisogno di riavviare il server quando il codice viene modificato,

03:36.180 --> 03:39.430
perché altrimenti il nostro server continua a funzionare con il vecchio codice,

03:39.430 --> 03:41.340
ma il riavvio manuale è fastidioso, quindi non

03:41.340 --> 03:44.190
possiamo velocizzare questa operazione con nodemon.

03:44.190 --> 03:47.323
E per il momento è davvero così.

03:49.290 --> 03:50.340
Quindi premiamo invio e

03:50.340 --> 03:52.360
installiamo questa dipendenza di sviluppo.

03:52.360 --> 03:54.760
Non sarà l'ultimo di cui avremo bisogno in questo

03:54.760 --> 03:56.660
corso, ma per il momento siamo a posto.

03:56.660 --> 03:58.830
Aspettiamo quindi che finisca.

03:58.830 --> 04:00.130
L'installazione è stata

04:00.130 --> 04:01.450
completata e ora iniziamo

04:01.450 --> 04:04.773
a scrivere e creare un'applicazione Node Express di base.
