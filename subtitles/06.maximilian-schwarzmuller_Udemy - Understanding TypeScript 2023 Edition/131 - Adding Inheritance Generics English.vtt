WEBVTT

1
00:00:02.410 --> 00:00:04.290
<v Instructor>So time for some inheritance</v>

2
00:00:04.290 --> 00:00:06.370
and for a base class.

3
00:00:06.370 --> 00:00:09.189
I want to add a base class, which basically has

4
00:00:09.189 --> 00:00:12.090
templateElement, hostElement, an element in it,

5
00:00:12.090 --> 00:00:15.430
which does this job of selecting elements in the dom,

6
00:00:15.430 --> 00:00:16.810
which has the attach method,

7
00:00:16.810 --> 00:00:18.520
which we always need, and so on.

8
00:00:18.520 --> 00:00:22.540
So which basically manages all these shared functionalities,

9
00:00:22.540 --> 00:00:26.630
which our classes that actually render something to the dom

10
00:00:26.630 --> 00:00:28.220
have in common.

11
00:00:28.220 --> 00:00:30.880
So for that, above my ProjectInput,

12
00:00:30.880 --> 00:00:35.650
and also the ProjectList class, so basically here,

13
00:00:35.650 --> 00:00:38.250
I'll add the Component Base Class.

14
00:00:38.250 --> 00:00:41.540
Now, the name is up to you, but I'll name it Component,

15
00:00:41.540 --> 00:00:44.090
because you might know this term from React

16
00:00:44.090 --> 00:00:45.870
or Angular, if you work with that,

17
00:00:45.870 --> 00:00:47.590
and even if you didn't work with that,

18
00:00:47.590 --> 00:00:49.873
you can think of these classes as UI,

19
00:00:50.770 --> 00:00:53.950
user interface components, which you render to the screen.

20
00:00:53.950 --> 00:00:57.950
And every component is in the end a renderable object,

21
00:00:57.950 --> 00:00:59.970
which has some functionalities

22
00:00:59.970 --> 00:01:01.370
that allow us to render it.

23
00:01:01.370 --> 00:01:05.260
And then the concrete instances, or the inherited classes,

24
00:01:05.260 --> 00:01:10.260
add extra functionality which this specific component needs.

25
00:01:10.300 --> 00:01:14.370
So what goes into the general Component class then?

26
00:01:14.370 --> 00:01:17.590
Well, I would say these three elements for sure.

27
00:01:17.590 --> 00:01:21.390
templateElement, hostElement, and element.

28
00:01:21.390 --> 00:01:23.590
Now, we do have a problem here, however,

29
00:01:23.590 --> 00:01:25.470
regarding the types.

30
00:01:25.470 --> 00:01:28.320
The templateElement will always be a HTMLTemplateElement,

31
00:01:29.160 --> 00:01:31.980
but the hostElement doesn't always have to be a div,

32
00:01:31.980 --> 00:01:35.410
for example, when we will add a project item class,

33
00:01:35.410 --> 00:01:37.160
we'll render that in a ProjectList,

34
00:01:37.160 --> 00:01:40.550
and not directly even our root div here,

35
00:01:40.550 --> 00:01:42.360
so that's not always a div.

36
00:01:42.360 --> 00:01:45.220
And this here, well, it's always an HTMLElement,

37
00:01:45.220 --> 00:01:47.040
we can certainly settle on that,

38
00:01:47.040 --> 00:01:50.540
but, like in the case of the ProjectInput class,

39
00:01:50.540 --> 00:01:52.560
we actually know that it's somewhere specific

40
00:01:52.560 --> 00:01:55.230
form of it, it's a HTMLFormElement.

41
00:01:55.230 --> 00:01:57.540
So we would lose this extra information,

42
00:01:57.540 --> 00:02:00.320
if we restrict ourselves to always having

43
00:02:00.320 --> 00:02:02.130
just an HTMLElement there,

44
00:02:02.130 --> 00:02:05.220
without storing more specific information.

45
00:02:05.220 --> 00:02:07.690
So how can we work around that?

46
00:02:07.690 --> 00:02:10.050
Well, by not just using inheritance,

47
00:02:10.050 --> 00:02:12.920
but by creating a generic class here,

48
00:02:12.920 --> 00:02:15.230
where when we inherit from it,

49
00:02:15.230 --> 00:02:17.680
we can set the concrete types.

50
00:02:17.680 --> 00:02:20.940
For that, we add angle brackets after the class name,

51
00:02:20.940 --> 00:02:23.550
and then, two identifiers of our choice,

52
00:02:23.550 --> 00:02:26.690
like T and U, which would be common choices.

53
00:02:26.690 --> 00:02:30.110
And now, we also can add some constraints here,

54
00:02:30.110 --> 00:02:34.820
and say that T will certainly be some kind of HTMLElement.

55
00:02:34.820 --> 00:02:36.770
It can be just an HTMLElement,

56
00:02:36.770 --> 00:02:38.970
or a more specific version of it.

57
00:02:38.970 --> 00:02:41.870
And the same is true for U.

58
00:02:41.870 --> 00:02:44.780
And then here, we know the hostElement will be of type T,

59
00:02:44.780 --> 00:02:46.690
and the element will be of type U.

60
00:02:46.690 --> 00:02:48.660
And now, whenever we inherit from this class,

61
00:02:48.660 --> 00:02:50.970
we can specify the concrete types,

62
00:02:50.970 --> 00:02:52.930
so that we can work with different types

63
00:02:52.930 --> 00:02:54.780
in different places where we inherit.

64
00:02:56.050 --> 00:02:58.053
Now, let's also add a constructor here.

65
00:02:58.910 --> 00:03:01.080
In that constructor, we will need

66
00:03:01.080 --> 00:03:03.060
a little bit of information.

67
00:03:03.060 --> 00:03:05.950
We need to know the ID of our template,

68
00:03:05.950 --> 00:03:08.030
so that we know how to select it,

69
00:03:08.030 --> 00:03:09.750
and that should be a string.

70
00:03:09.750 --> 00:03:11.590
We need to know the hostElementId,

71
00:03:11.590 --> 00:03:13.050
which also needs to be a string,

72
00:03:13.050 --> 00:03:15.833
so that we know where to render this component.

73
00:03:17.440 --> 00:03:20.505
And I also want to get a newElementId,

74
00:03:20.505 --> 00:03:22.590
so that we get an ID that has to be assigned

75
00:03:22.590 --> 00:03:24.350
to the newly rendered element.

76
00:03:24.350 --> 00:03:26.020
This, however, is optional,

77
00:03:26.020 --> 00:03:28.210
which I signal by adding a question mark

78
00:03:28.210 --> 00:03:29.690
after the parameter.

79
00:03:29.690 --> 00:03:31.940
The alternative would be to also accept

80
00:03:31.940 --> 00:03:34.050
undefined here as a type,

81
00:03:34.050 --> 00:03:36.470
but I'll just use the question mark.

82
00:03:36.470 --> 00:03:38.510
And now, with that in the constructor,

83
00:03:38.510 --> 00:03:39.793
we can, basically,

84
00:03:40.640 --> 00:03:42.083
get this code here,

85
00:03:43.810 --> 00:03:46.950
and put it into our constructor of the Component class,

86
00:03:46.950 --> 00:03:48.940
so that we store the templateElement,

87
00:03:48.940 --> 00:03:52.060
but, of course, now the ID, which we're getting here,

88
00:03:52.060 --> 00:03:55.400
is that templateId, which is why I'm getting this

89
00:03:55.400 --> 00:03:57.450
as a argument in the constructor.

90
00:03:57.450 --> 00:04:00.060
And for the hostElement, the ID here, of course,

91
00:04:00.060 --> 00:04:02.733
is our hostElementId, like this.

92
00:04:04.790 --> 00:04:07.930
Also important, of course, regarding the casting here,

93
00:04:07.930 --> 00:04:10.230
we know this will be of type T,

94
00:04:10.230 --> 00:04:12.580
because T here is this generic type,

95
00:04:12.580 --> 00:04:15.420
which we store or which we use for our hostElement,

96
00:04:15.420 --> 00:04:17.163
so here we can cast it already.

97
00:04:18.160 --> 00:04:20.253
And with that, we're selecting elements.

98
00:04:21.130 --> 00:04:22.940
We can also grab more code.

99
00:04:22.940 --> 00:04:26.650
That code here, where we import a node and so on,

100
00:04:26.650 --> 00:04:30.130
and where we set the ID, we can grab all of that.

101
00:04:30.130 --> 00:04:32.520
So let's copy that here, and add this

102
00:04:32.520 --> 00:04:35.317
to the constructor of the Component class as well.

103
00:04:35.317 --> 00:04:37.640
importedNode, then we set element,

104
00:04:37.640 --> 00:04:41.080
and element here has this generic type U,

105
00:04:41.080 --> 00:04:43.000
so when we cast this here, we know

106
00:04:43.000 --> 00:04:46.870
it will be that U type here, so we should cast it to U.

107
00:04:46.870 --> 00:04:49.090
That's a good use of generics here,

108
00:04:49.090 --> 00:04:51.993
which makes this Component class really reusable.

109
00:04:53.060 --> 00:04:55.200
Now, regarding the ID.

110
00:04:55.200 --> 00:04:58.200
This is what we get here, the newElementId.

111
00:04:58.200 --> 00:05:00.590
Now, of course we might not always have this,

112
00:05:00.590 --> 00:05:02.150
because it's optional,

113
00:05:02.150 --> 00:05:03.870
so we should check if we do have it.

114
00:05:03.870 --> 00:05:06.070
So if newElementId is a thing,

115
00:05:06.070 --> 00:05:07.650
and only if it is a thing,

116
00:05:07.650 --> 00:05:09.710
only then I will try to assign it,

117
00:05:09.710 --> 00:05:10.543
otherwise we don't try it,

118
00:05:10.543 --> 00:05:13.023
because then we have no ID to assign.

119
00:05:14.420 --> 00:05:16.300
Well, with that, we have the constructor.

120
00:05:16.300 --> 00:05:19.160
Now let's use the attach function here.

121
00:05:19.160 --> 00:05:21.970
So let's copy the attach method

122
00:05:21.970 --> 00:05:25.470
from one of our other classes and add it here,

123
00:05:25.470 --> 00:05:28.473
as a private method, in the Component class.

124
00:05:32.690 --> 00:05:35.640
We can then also call this.attach

125
00:05:35.640 --> 00:05:38.540
at the end of the constructor of the Component class.

126
00:05:38.540 --> 00:05:39.960
Now, here we wanna add a element,

127
00:05:39.960 --> 00:05:42.570
but we don't know where it should be added,

128
00:05:42.570 --> 00:05:44.193
so that's actually some extra information

129
00:05:44.193 --> 00:05:46.450
that we should fetch here,

130
00:05:46.450 --> 00:05:49.450
as a fourth argument in the contructor, insert

131
00:05:52.430 --> 00:05:54.200
Atstart could be a name,

132
00:05:54.200 --> 00:05:56.680
and that is a boolean, let's say.

133
00:05:56.680 --> 00:06:00.190
And we should move that in front of our optional parameter.

134
00:06:00.190 --> 00:06:02.230
Optional parameters should always be last,

135
00:06:02.230 --> 00:06:03.980
because people might omit them.

136
00:06:03.980 --> 00:06:06.680
Your required parameters, therefore, can't come

137
00:06:06.680 --> 00:06:09.220
after these optional parameters.

138
00:06:09.220 --> 00:06:12.700
And insertAtStart is then forwarded to attach,

139
00:06:12.700 --> 00:06:13.533
there,

140
00:06:14.615 --> 00:06:18.740
insertAtBeginning, you could also reuse insertAtStart,

141
00:06:18.740 --> 00:06:21.350
I'm just using a different name here to avoid confusion,

142
00:06:21.350 --> 00:06:23.470
is received as a boolean.

143
00:06:23.470 --> 00:06:28.040
And then here, we check if insertAtBeginning is true,

144
00:06:28.040 --> 00:06:32.920
if it is, then here, we have afterbegin,

145
00:06:32.920 --> 00:06:34.887
otherwise we have beforeend.

146
00:06:36.770 --> 00:06:39.653
Now we're flexible regarding how this gets inserted.

147
00:06:42.980 --> 00:06:46.570
I also want to mark this class now as a abstract class,

148
00:06:46.570 --> 00:06:49.600
because people should never directly instantiate it,

149
00:06:49.600 --> 00:06:52.560
instead, it should always be used for inheritance.

150
00:06:52.560 --> 00:06:56.090
So in front of class, I add the abstract keyword.

151
00:06:56.090 --> 00:06:58.750
This makes sure that now we can't instantiate it.

152
00:06:58.750 --> 00:07:01.963
If we would try to do so, TypeScript would yell at us.

153
00:07:04.070 --> 00:07:06.490
I will also add two more methods,

154
00:07:06.490 --> 00:07:08.410
and that's the configure method,

155
00:07:08.410 --> 00:07:10.840
and also then the renderContent method.

156
00:07:10.840 --> 00:07:13.430
And I will add it as a abstract method,

157
00:07:13.430 --> 00:07:16.463
which means the concrete implementation is missing here,

158
00:07:18.000 --> 00:07:21.080
but we now, basically, force any class

159
00:07:21.080 --> 00:07:22.670
inheriting from component,

160
00:07:22.670 --> 00:07:25.980
to add these two methods and to have them available.

161
00:07:25.980 --> 00:07:27.220
I'm just adding this here,

162
00:07:27.220 --> 00:07:29.390
so that if someone else looks at our code,

163
00:07:29.390 --> 00:07:31.460
he or she can get a good understanding

164
00:07:31.460 --> 00:07:34.150
of what the idea behind the Component class is.

165
00:07:34.150 --> 00:07:36.340
That it does all the general rendering,

166
00:07:36.340 --> 00:07:38.530
or the attachment of the component,

167
00:07:38.530 --> 00:07:40.790
but that the concrete content and configuration

168
00:07:40.790 --> 00:07:43.840
then needs to happen in the place where we inherit.

169
00:07:43.840 --> 00:07:47.670
Side note, you can't have private, abstract methods.

170
00:07:47.670 --> 00:07:49.660
So private has to be omitted here,

171
00:07:49.660 --> 00:07:52.000
that's not allowed by TypeScript.

172
00:07:52.000 --> 00:07:54.590
Well, and with this, we can extend Component

173
00:07:54.590 --> 00:07:56.480
here on the ProjectList,

174
00:07:56.480 --> 00:07:59.130
and now get rid of these three properties.

175
00:07:59.130 --> 00:08:00.640
We keep the assignedProjects,

176
00:08:00.640 --> 00:08:03.520
because that's specific to the ProjectList.

177
00:08:03.520 --> 00:08:06.620
We also now wanna specify the concrete values

178
00:08:06.620 --> 00:08:09.560
that should be plugged in for our generic types.

179
00:08:09.560 --> 00:08:12.410
And we know, if we revert this,

180
00:08:12.410 --> 00:08:16.540
we know that we'll have a HTMLDivElement and a HTMLElement,

181
00:08:16.540 --> 00:08:19.313
so here I will pass in HTMLDivElement,

182
00:08:20.410 --> 00:08:22.800
and HTMLElement, like this,

183
00:08:22.800 --> 00:08:25.830
and then get rid of these three properties.

184
00:08:25.830 --> 00:08:29.510
In the constructor, we now don't need that here,

185
00:08:29.510 --> 00:08:32.550
but instead we need to call super at the beginning,

186
00:08:32.550 --> 00:08:35.130
to call the contructor of the base class,

187
00:08:35.130 --> 00:08:38.080
and to that, we need to pass some information

188
00:08:38.080 --> 00:08:40.840
to the super contructor, we need to pass some information.

189
00:08:40.840 --> 00:08:42.753
The ID of out templateElement, the hostElementId,

190
00:08:44.050 --> 00:08:45.850
whether we wanna insert this

191
00:08:45.850 --> 00:08:47.870
at the start of the hostElement,

192
00:08:47.870 --> 00:08:50.140
and, potentially, the ID that should be assigned

193
00:08:50.140 --> 00:08:51.920
to the new element.

194
00:08:51.920 --> 00:08:54.038
So here's our template ID,

195
00:08:54.038 --> 00:08:57.811
and with that we can rid of this here.

196
00:08:57.811 --> 00:09:01.292
Then here, the hostElement, that ID was app,

197
00:09:01.292 --> 00:09:02.670
so we can get rid of this.

198
00:09:02.670 --> 00:09:04.260
We keep the assignedProjects,

199
00:09:04.260 --> 00:09:06.400
because we still need that here.

200
00:09:06.400 --> 00:09:08.193
We get rid of this here,

201
00:09:10.150 --> 00:09:13.050
but, regarding the ID for the new element,

202
00:09:13.050 --> 00:09:16.850
I wanna pass that as a fourth parameter actually.

203
00:09:16.850 --> 00:09:19.040
The third one is where this should be inserted,

204
00:09:19.040 --> 00:09:22.400
and here, we use to insert this before the end,

205
00:09:22.400 --> 00:09:25.890
so actually what I wanna insert here as a parameter

206
00:09:25.890 --> 00:09:29.170
for the insertAtStart value is false,

207
00:09:29.170 --> 00:09:31.380
because it should not be inserted at the start,

208
00:09:31.380 --> 00:09:32.283
but at the end.

209
00:09:36.000 --> 00:09:38.940
Now, I certainly still want to set up my listener here.

210
00:09:38.940 --> 00:09:40.730
I don't need to call attach though,

211
00:09:40.730 --> 00:09:44.410
that will happen in the base class, in the base component.

212
00:09:44.410 --> 00:09:46.253
I will call renderContent though.

213
00:09:47.870 --> 00:09:50.010
And here we shouldn't use this type,

214
00:09:50.010 --> 00:09:52.100
but just type, because we can't use

215
00:09:52.100 --> 00:09:54.410
this before super finished running.

216
00:09:54.410 --> 00:09:55.490
That's no problem though,

217
00:09:55.490 --> 00:09:57.690
because we received type as a argument.

218
00:09:57.690 --> 00:09:59.680
Now, you see I still get an error here,

219
00:09:59.680 --> 00:10:03.487
because we have an attach method here in ProjectList,

220
00:10:03.487 --> 00:10:05.410
and that clashes with the attach method

221
00:10:05.410 --> 00:10:07.330
we have in the base class.

222
00:10:07.330 --> 00:10:10.600
So let's get rid of this attach method here.

223
00:10:10.600 --> 00:10:14.024
Now we still get an error, because you see,

224
00:10:14.024 --> 00:10:16.060
renderContent is private here,

225
00:10:16.060 --> 00:10:18.270
but we specify it as a public method here,

226
00:10:18.270 --> 00:10:20.240
I would love to have it as a private one,

227
00:10:20.240 --> 00:10:22.860
but private abstract methods are not supported.

228
00:10:22.860 --> 00:10:25.680
So I will remove the private keyword here,

229
00:10:25.680 --> 00:10:28.170
and now with that, we're left with one issue here,

230
00:10:28.170 --> 00:10:30.510
that we're not having that configure method,

231
00:10:30.510 --> 00:10:31.990
which I promised we'd have here.

232
00:10:31.990 --> 00:10:33.650
Well, let's add it.

233
00:10:33.650 --> 00:10:38.500
So here, besides renderConfig, we could add configure,

234
00:10:38.500 --> 00:10:40.510
even though I'm not doing anything here.

235
00:10:40.510 --> 00:10:42.950
Alternatively, you could convert this here

236
00:10:42.950 --> 00:10:46.000
to be an optional method by adding a question mark,

237
00:10:46.000 --> 00:10:47.520
then, you're not forced to add it.

238
00:10:47.520 --> 00:10:50.380
Here, I will add it because we could also argue

239
00:10:50.380 --> 00:10:53.210
that we, for the ProjectList,

240
00:10:53.210 --> 00:10:56.490
put that code where we set up our listener here,

241
00:10:56.490 --> 00:10:58.530
actually into configure.

242
00:10:58.530 --> 00:11:00.810
So we can reach out to configure,

243
00:11:00.810 --> 00:11:03.320
and then do our thing here,

244
00:11:03.320 --> 00:11:05.220
that listener setup.

245
00:11:05.220 --> 00:11:06.610
And now, we should just make sure

246
00:11:06.610 --> 00:11:10.653
that we call renderContent, but also configure like this.

247
00:11:12.730 --> 00:11:14.440
In case you're wondering why I'm not calling

248
00:11:14.440 --> 00:11:16.450
configure and renderContent here

249
00:11:16.450 --> 00:11:18.560
in the abstract class in the contructor,

250
00:11:18.560 --> 00:11:19.993
well, we could this,

251
00:11:21.780 --> 00:11:23.720
but we might have a problem then.

252
00:11:23.720 --> 00:11:26.760
If we call this in the Component class,

253
00:11:26.760 --> 00:11:30.770
then, we might call a method in the inheriting class,

254
00:11:30.770 --> 00:11:33.240
so in a class that extends Component,

255
00:11:33.240 --> 00:11:36.810
where renderContent or configure relies on something

256
00:11:36.810 --> 00:11:39.410
where the contructor of the inheriting class

257
00:11:39.410 --> 00:11:41.540
actually maybe sets something up,

258
00:11:41.540 --> 00:11:44.710
only after the base class contructor finished,

259
00:11:44.710 --> 00:11:48.100
which renderContent and or configure rely on.

260
00:11:48.100 --> 00:11:50.690
That's why it's safer to, basically,

261
00:11:50.690 --> 00:11:52.410
make sure that the inheriting class

262
00:11:52.410 --> 00:11:55.410
has to call these methods instead of the base class

263
00:11:55.410 --> 00:11:56.860
calling these methods for us.

264
00:11:57.980 --> 00:12:01.280
So with that, we restructured the ProjectList class

265
00:12:01.280 --> 00:12:05.040
to take advantage of inheritance and of our shared logic.

266
00:12:05.040 --> 00:12:07.730
Let's do the same for ProjectInput now.

267
00:12:07.730 --> 00:12:11.790
There, we also want to extend

268
00:12:11.790 --> 00:12:13.170
Component.

269
00:12:13.170 --> 00:12:14.900
Use the generic nature of that,

270
00:12:14.900 --> 00:12:19.430
and there, we have the HTMLDivElement for the hostElement,

271
00:12:19.430 --> 00:12:23.980
and the HTMLFormElement for the element which gets rendered.

272
00:12:23.980 --> 00:12:27.210
With that, we can get rid of these three properties here,

273
00:12:27.210 --> 00:12:28.310
so let's do that.

274
00:12:28.310 --> 00:12:30.090
We keep these three properties, of course,

275
00:12:30.090 --> 00:12:32.140
because they're specific to ProjectInput.

276
00:12:33.040 --> 00:12:35.310
We then have to call super here,

277
00:12:35.310 --> 00:12:38.320
and to super we pass the ID of the template,

278
00:12:38.320 --> 00:12:39.900
which is ProjectInput,

279
00:12:39.900 --> 00:12:41.970
the ID of the host element, which is app,

280
00:12:41.970 --> 00:12:45.270
insertBefore here is true, because I wanna insert

281
00:12:45.270 --> 00:12:47.620
that newly created element at the beginning

282
00:12:47.620 --> 00:12:50.510
here for this ProjectInput class.

283
00:12:50.510 --> 00:12:53.110
And then, newElementId,

284
00:12:53.110 --> 00:12:55.170
well, that here is user-input,

285
00:12:55.170 --> 00:12:56.913
so we should also forward that.

286
00:12:57.844 --> 00:12:59.400
With this, we can get rid of this code,

287
00:12:59.400 --> 00:13:03.480
of this code, and of all this code here actually.

288
00:13:03.480 --> 00:13:05.240
Of course, keep this code here.

289
00:13:05.240 --> 00:13:07.820
However, we could also argue that we put this

290
00:13:07.820 --> 00:13:09.860
into configure maybe.

291
00:13:09.860 --> 00:13:12.100
So let's go down to the configure method,

292
00:13:12.100 --> 00:13:13.660
which we already have here,

293
00:13:13.660 --> 00:13:16.790
and add our listeners here or our property setup here

294
00:13:16.790 --> 00:13:17.683
to configure.

295
00:13:18.880 --> 00:13:20.780
Of course, let's get rid of attach,

296
00:13:20.780 --> 00:13:24.450
because that's now something the base class does for us,

297
00:13:24.450 --> 00:13:26.980
and let's check what TypeScript doesn't like,

298
00:13:26.980 --> 00:13:29.690
of course we should get rid of the attach here.

299
00:13:29.690 --> 00:13:32.520
And yeah, actually one thing TypeScript doesn't like,

300
00:13:32.520 --> 00:13:35.090
it now complains that these fields

301
00:13:35.090 --> 00:13:37.190
do not get initialized in the contructor,

302
00:13:37.190 --> 00:13:40.380
because it doesn't understand or it doesn't check

303
00:13:40.380 --> 00:13:42.260
that configure is called in the contructor

304
00:13:42.260 --> 00:13:44.770
and does this initialization.

305
00:13:44.770 --> 00:13:47.500
So to satisfy TypeScript, I'll actually move

306
00:13:47.500 --> 00:13:50.550
these initializations back from configure

307
00:13:50.550 --> 00:13:52.170
right into the constructor.

308
00:13:52.170 --> 00:13:54.190
Technically, the result is exactly the same,

309
00:13:54.190 --> 00:13:55.953
but now TypeScript won't complain.

310
00:13:56.800 --> 00:13:59.240
It will complain, however, that we

311
00:14:00.440 --> 00:14:02.310
do have a private configure method,

312
00:14:02.310 --> 00:14:05.910
so just as before, we should change this,

313
00:14:05.910 --> 00:14:08.940
and turn configure into a public method.

314
00:14:08.940 --> 00:14:11.460
Now, it's not a must do, but it's kind of convention

315
00:14:11.460 --> 00:14:13.000
to have your public methods first,

316
00:14:13.000 --> 00:14:14.570
which is why I will move it up

317
00:14:14.570 --> 00:14:17.240
above the other private methods here.

318
00:14:17.240 --> 00:14:19.370
And, of course, now it also complains

319
00:14:19.370 --> 00:14:21.990
that we haven't a renderContent method.

320
00:14:21.990 --> 00:14:25.020
Now, I will add one, just because we need to.

321
00:14:25.020 --> 00:14:26.780
Here we're not doing anything in it,

322
00:14:26.780 --> 00:14:28.890
so technically it's not required,

323
00:14:28.890 --> 00:14:31.053
but now we satisfy our base class.

324
00:14:32.260 --> 00:14:34.603
Side note, renderContent,

325
00:14:35.550 --> 00:14:39.590
and configure, in the ProjectList class, can also be moved

326
00:14:39.590 --> 00:14:43.230
above that private method here for the exact same reasons,

327
00:14:43.230 --> 00:14:45.123
for this convention I just mentioned.

328
00:14:46.440 --> 00:14:49.870
And with that, we also restructured ProjectInput,

329
00:14:49.870 --> 00:14:51.780
to take advantage of inheritance

330
00:14:51.780 --> 00:14:55.330
and let the base class do a lot of the job.

331
00:14:55.330 --> 00:14:57.670
Let's see whether that now all works.

332
00:14:57.670 --> 00:15:00.710
If we save that, it compiles without errors,

333
00:15:00.710 --> 00:15:02.740
seems to run fine,

334
00:15:02.740 --> 00:15:05.870
so does this work is the question.

335
00:15:05.870 --> 00:15:07.810
And that looks quite good.

336
00:15:07.810 --> 00:15:09.720
It works the same way as before,

337
00:15:09.720 --> 00:15:11.600
but now we have cleaner code,

338
00:15:11.600 --> 00:15:14.240
where we take advantage of code reusage,

339
00:15:14.240 --> 00:15:15.850
thanks to inheritance.

340
00:15:15.850 --> 00:15:18.540
Now, it's not the only place where we can inherit.

341
00:15:18.540 --> 00:15:20.610
I wanna conclude this lecture here

342
00:15:20.610 --> 00:15:24.230
by also refactoring our project's state.

343
00:15:24.230 --> 00:15:26.240
Technically, there we don't need inheritance,

344
00:15:26.240 --> 00:15:29.450
because we only have this one single state we manage

345
00:15:29.450 --> 00:15:31.230
in this entire application,

346
00:15:31.230 --> 00:15:33.130
but imagine a bigger application,

347
00:15:33.130 --> 00:15:35.310
where you have multiple different states.

348
00:15:35.310 --> 00:15:37.240
One for the user state,

349
00:15:37.240 --> 00:15:39.290
whether the user's logged in and so on,

350
00:15:39.290 --> 00:15:43.030
one for the projects, one for a shopping cart.

351
00:15:43.030 --> 00:15:45.600
Now, you will notice that some features

352
00:15:45.600 --> 00:15:48.080
of your state class are always the same.

353
00:15:48.080 --> 00:15:50.520
Specifically, that array of listeners,

354
00:15:50.520 --> 00:15:52.780
and the addListener method.

355
00:15:52.780 --> 00:15:54.730
So we could also use a base class here.

356
00:15:55.650 --> 00:15:58.170
We could use a class State here,

357
00:15:58.170 --> 00:16:01.230
and that class has a listeners array,

358
00:16:01.230 --> 00:16:04.640
and that class also has an addListeners method,

359
00:16:04.640 --> 00:16:07.120
so we'll cut both from ProjectState,

360
00:16:07.120 --> 00:16:09.160
and add it to State.

361
00:16:09.160 --> 00:16:12.610
Now, that also means that we, of course, don't know

362
00:16:12.610 --> 00:16:14.700
whether our listener will actually return

363
00:16:14.700 --> 00:16:16.720
an array of projects.

364
00:16:16.720 --> 00:16:18.253
So actually here,

365
00:16:19.110 --> 00:16:20.760
for this function type,

366
00:16:20.760 --> 00:16:24.740
I also want to have a generic type actually.

367
00:16:24.740 --> 00:16:27.440
So that we can set this from outside.

368
00:16:27.440 --> 00:16:28.483
We can do that,

369
00:16:29.790 --> 00:16:31.623
we can write a generic type,

370
00:16:32.680 --> 00:16:35.730
like this here, a custom type, which is generic,

371
00:16:35.730 --> 00:16:38.410
we can add the angle brackets after our type name,

372
00:16:38.410 --> 00:16:40.150
use an identifier of our choice,

373
00:16:40.150 --> 00:16:42.460
and then reuse that type here.

374
00:16:42.460 --> 00:16:44.960
Now, we can make State generic,

375
00:16:44.960 --> 00:16:46.320
we can use the same identifier,

376
00:16:46.320 --> 00:16:49.530
because it's a different construct than our custom type.

377
00:16:49.530 --> 00:16:53.520
And then here, when we say that we wanna have

378
00:16:53.520 --> 00:16:56.780
a list of listeners, we have to tell TypeScript

379
00:16:56.780 --> 00:16:58.850
which generic type the listeners use

380
00:16:58.850 --> 00:17:01.510
for this State object we're creating.

381
00:17:01.510 --> 00:17:03.850
And that simply means we can forward

382
00:17:03.850 --> 00:17:06.490
our generic type here, and here.

383
00:17:06.490 --> 00:17:09.410
So when we now extend state, we have to specify

384
00:17:09.410 --> 00:17:12.630
the type of data this state will work with,

385
00:17:12.630 --> 00:17:14.930
and instead of state, this then gets forwarded

386
00:17:14.930 --> 00:17:17.680
to our listener custom type, that's the idea.

387
00:17:17.680 --> 00:17:19.580
And how do we use all of that?

388
00:17:19.580 --> 00:17:21.950
Well, down there, in the ProjectState class,

389
00:17:21.950 --> 00:17:24.930
we simply extend the State class,

390
00:17:24.930 --> 00:17:27.900
and now, provide a value, a concrete value

391
00:17:27.900 --> 00:17:30.040
for that generic place holder,

392
00:17:30.040 --> 00:17:32.480
and here, this concrete value is Project,

393
00:17:32.480 --> 00:17:36.510
because this ProjectState is all about managing guess what?

394
00:17:36.510 --> 00:17:37.393
Projects.

395
00:17:38.970 --> 00:17:41.650
Now, the private constructor here

396
00:17:41.650 --> 00:17:43.390
has a problem, as you can tell,

397
00:17:43.390 --> 00:17:45.160
because we're not calling super.

398
00:17:45.160 --> 00:17:46.930
Well, we should definitely do that,

399
00:17:46.930 --> 00:17:48.350
let's call super in here,

400
00:17:48.350 --> 00:17:49.800
that's all we gotta do there.

401
00:17:50.640 --> 00:17:53.490
And here, if we scroll down,

402
00:17:53.490 --> 00:17:55.880
where we go through the listeners,

403
00:17:55.880 --> 00:17:57.890
we see listeners is private,

404
00:17:57.890 --> 00:18:00.240
and it's private in our base class.

405
00:18:00.240 --> 00:18:01.860
Now, that means we can only access it

406
00:18:01.860 --> 00:18:03.580
from inside the base class.

407
00:18:03.580 --> 00:18:06.760
But you learned about another access modifier,

408
00:18:06.760 --> 00:18:09.380
which is similar to private,

409
00:18:09.380 --> 00:18:12.900
but also allows access from inheriting classes,

410
00:18:12.900 --> 00:18:14.990
and that would be protected.

411
00:18:14.990 --> 00:18:17.200
Protected means it still can't be accessed

412
00:18:17.200 --> 00:18:18.930
from outside the class,

413
00:18:18.930 --> 00:18:23.030
but it can be accessed from any class that inherits.

414
00:18:23.030 --> 00:18:24.740
With that, let's save all of that,

415
00:18:24.740 --> 00:18:26.650
it should compile just fine.

416
00:18:26.650 --> 00:18:28.940
And let's quickly test this,

417
00:18:28.940 --> 00:18:31.790
and that's looking good, so that works as before,

418
00:18:31.790 --> 00:18:34.160
but now, again, with a bit nicer code,

419
00:18:34.160 --> 00:18:36.420
using inheritance and generics

420
00:18:36.420 --> 00:18:38.363
also for our state management.

