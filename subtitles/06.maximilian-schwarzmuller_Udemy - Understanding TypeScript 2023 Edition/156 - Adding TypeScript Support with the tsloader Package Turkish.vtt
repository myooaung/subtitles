WEBVTT

00:02.290 --> 00:03.910
Eğitmen: Webpack'e TypeScript dosyalarıyla

00:03.910 --> 00:06.710
ne yapacağını söylemek için, buradaki yapılandırma nesnesine

00:06.710 --> 00:08.830
yeni bir giriş eklememiz gerekiyor.

00:08.830 --> 00:11.510
Bu da modül özelliğidir.

00:11.510 --> 00:14.020
Modül ayrıca daha sonra yapılandırmak için bir

00:14.020 --> 00:15.470
JavaScript nesnesi alır.

00:15.470 --> 00:17.440
Sonunda bir modül sadece bir dosyadır, bu yüzden

00:17.440 --> 00:20.520
burada Webpack'e uygulamada olduğu gibi bulduğu dosyalarla nasıl çalışacağını

00:20.520 --> 00:22.940
söyleriz. ts dosyasını ve ardından bu

00:22.940 --> 00:25.520
dosyayı anladıktan sonra, dosyadaki tüm içe aktarmalarla

00:25.520 --> 00:27.290
nasıl başa çıkacağını öğrenir.

00:27.290 --> 00:29.800
Peki Webpack bu dosyalarla nasıl başa çıkmalı?

00:29.800 --> 00:33.640
Webpack'e buraya bir kurallar dizisi ekleyerek söylüyoruz, çünkü tüm dosyalara

00:33.640 --> 00:35.430
uygulanması gereken birden fazla kural

00:35.430 --> 00:37.300
ayarlayabilirsiniz.

00:37.300 --> 00:40.690
Burada sadece bir tanesine ihtiyacımız var, ancak CSS dosyalarını veya görüntüleri

00:40.690 --> 00:44.030
veya bunun gibi herhangi bir şeyi işlemek için Webpack'i kullanmak istediğiniz

00:44.030 --> 00:46.140
daha karmaşık projelerde, farklı dosya türleri

00:46.140 --> 00:49.220
için daha fazla kural ekleyebilirsiniz.

00:49.220 --> 00:51.500
Ve daha önce de belirtildiği gibi, resmi dokümanlar yükleyiciler

00:51.500 --> 00:53.840
hakkında daha fazla bilgi edinmek için harika bir yerdir ve sonunda

00:53.840 --> 00:55.730
Webpack'e farklı dosyalar hakkında daha fazla bilgi

00:55.730 --> 00:57.980
vermek ve genel olarak Webpack hakkında daha fazla bilgi edinmek

00:57.980 --> 00:59.720
için kullanırsınız.

00:59.720 --> 01:02.560
Yani burada, aslında böyle bir yükleyici ekleyeceğiz.

01:02.560 --> 01:06.110
Bir yükleyici, Webpack'e belirli dosyalarla nasıl başa çıkacağını söyleyen

01:06.110 --> 01:07.780
bir pakettir ve elbette burada, Webpack'e

01:07.780 --> 01:09.960
TypeScript dosyalarıyla nasıl başa çıkacağını

01:09.960 --> 01:11.520
söylememize yardımcı olan ts yükleyicimiz

01:11.520 --> 01:13.690
var.

01:13.690 --> 01:16.850
Bu yüzden, öncelikle bir test özelliği eklediğimiz bir

01:16.850 --> 01:19.720
JavaScript nesnesi olan bir kural ekliyoruz.

01:19.720 --> 01:22.950
Bu, Webpack'in buradaki kuralın o dosya için geçerli olup olmadığını

01:22.950 --> 01:26.510
bulmak için bulduğu herhangi bir dosya üzerinde gerçekleştireceği

01:26.510 --> 01:28.550
bir testi tanımlar.

01:28.550 --> 01:31.080
Ve buradaki test düzenli bir ifadedir.

01:31.080 --> 01:33.610
Ve orada Webpack'e . ile biten herhangi bir dosya

01:33.610 --> 01:36.950
olduğunu söylemek istiyorum. kullanılmalı veya bu kural

01:36.950 --> 01:38.913
tarafından ele alınmalıdır.

01:39.860 --> 01:42.940
Dosya uzantısını denetleyen bir düzenli ifade burada ters eğik

01:42.940 --> 01:46.260
çizgi kullanabilir ve ardından . ts, ve sonra bir dolar

01:46.260 --> 01:47.550
işareti.

01:47.550 --> 01:50.840
Bu bizim düzenli ifademizdir ve Webpack'e sonu . ile biten dosyaları

01:50.840 --> 01:54.593
kontrol etmek istediğinizi söyler. ts.

01:55.560 --> 01:58.810
Ardından, Webpack'in bu dosyalarla ne yapması gerektiğini de

01:58.810 --> 02:02.590
belirtmeniz gerekir ve bunu burada use anahtar sözcüğü ile yaparsınız.

02:02.590 --> 02:05.290
Ve orada, Webpack'in kullanması gereken yükleyiciyi

02:05.290 --> 02:07.590
belirtirsiniz, benim durumumda ts-loader.

02:07.590 --> 02:10.600
Bu yüzden Webpack'e bulduğu herhangi bir TypeScript dosyasının TypeScript

02:10.600 --> 02:12.720
yükleyicisi tarafından ele alınması gerektiğini

02:12.720 --> 02:16.010
söyleriz ve o da böyle bir dosyayla ne yapacağını bilir.

02:16.010 --> 02:17.680
ts-loader otomatik olarak tsconfig'i

02:17.680 --> 02:20.330
alacaktır. json dosyasını hesaba kattığımız

02:20.330 --> 02:23.430
için burada ekstra bir yapılandırma belirtmemize gerek yok.

02:23.430 --> 02:26.050
Asla zarar vermeyen tek bir yapılandırma,

02:26.050 --> 02:29.910
node modüllerini düzenli bir ifade olarak hariç tutun, böylece

02:29.910 --> 02:33.773
Webpack de node modüllerine bakmaya çalışmaz.

02:35.130 --> 02:38.400
Bununla birlikte, modül yapılandırmasından sonra buraya

02:38.400 --> 02:42.800
fazladan bir yapılandırma eklememiz gerekiyor ve bu da çözümleme anahtarı.

02:42.800 --> 02:47.800
Burada Webpack'e bulduğu içe aktarımlara hangi dosya uzantılarını ekleyeceğini

02:47.820 --> 02:49.750
söylüyoruz.

02:49.750 --> 02:52.440
Webpack'in uzantıları kendi başına ekleyeceğini

02:52.440 --> 02:56.160
söyledim ve varsayılan olarak . js dosyaları.

02:56.160 --> 02:59.220
Şimdi burada Webpack'in aramasını istediğimiz . ts dosyaları için bir

02:59.220 --> 03:01.280
extensions özelliği ekleyebilir,

03:01.280 --> 03:05.390
bunu bir diziye eşit olarak ayarlayabilir ve Webpack'e

03:05.390 --> 03:08.390
. ts dosyalarının

03:08.390 --> 03:10.640
yanı sıra . js dosyaları.

03:10.640 --> 03:13.360
Şimdi Webpack temel olarak bu tür dosyaları arayacak

03:13.360 --> 03:16.900
ve ardından içe aktardığınız bu uzantılara sahip tüm dosyaları

03:16.900 --> 03:18.723
bir araya getirecektir.

03:19.760 --> 03:22.770
Ve kurulumumuz şu an için neredeyse bitti, yapılandırma

03:22.770 --> 03:24.690
dosyamız en azından şu an için neredeyse

03:24.690 --> 03:26.150
bitti.

03:26.150 --> 03:28.730
Bununla birlikte tsconfig'e de gitmeli ve

03:28.730 --> 03:33.070
orada sourceMap'i true olarak ayarladığınızdan emin olmalıyız.

03:33.070 --> 03:35.210
Bu, kodumuzda hata ayıklamamıza yardımcı olacaktır

03:35.210 --> 03:37.130
ve Webpack bunu da desteklemektedir.

03:37.130 --> 03:39.850
Şimdi sadece bir giriş eklememiz gerekiyor,

03:39.850 --> 03:41.340
belki burada çıktının altında

03:41.340 --> 03:43.710
ve bu bir devtool anahtarı.

03:43.710 --> 03:47.210
Ve orada, değer bir dize olarak inline-source-map

03:47.210 --> 03:48.510
olmalıdır.

03:48.510 --> 03:51.620
Bu daha sonra Webpack'e halihazırda oluşturulmuş kaynak

03:51.620 --> 03:53.700
haritaları olacağını, bunları çıkarması

03:53.700 --> 03:57.210
ve temelde oluşturduğu pakete doğru şekilde bağlaması gerektiğini

03:57.210 --> 04:00.170
söyler, böylece böyle bir paket elde ederken, yine de

04:00.170 --> 04:03.603
harika bir geliştirme deneyimine sahip oluruz.

04:05.830 --> 04:08.360
Şimdi bununla Webpack'i kullanabiliriz ve soru şu

04:08.360 --> 04:09.823
ki onu nasıl kullanacağız?

04:11.000 --> 04:14.720
Bunu kullanmanın basit bir yolu pakete gitmektir. json dosyası ve oraya

04:14.720 --> 04:16.650
bir betik ekleyelim.

04:16.650 --> 04:18.440
Örneğin, inşa edin.

04:18.440 --> 04:19.810
Burada komut dosyaları bölümünde

04:19.810 --> 04:21.620
istediğiniz ismi verebilirsiniz.

04:21.620 --> 04:23.930
Ve orada, Webpack'i çalıştırın,

04:23.930 --> 04:26.453
yani webpack'i şu şekilde yazın.

04:27.560 --> 04:29.880
Şimdi de dist klasörüne gidelim ve orada

04:29.880 --> 04:32.993
bulunan her şeyi kaldıralım ve bu kaydetme işlemiyle

04:34.000 --> 04:36.870
şimdi npm run build'i çalıştıralım ve çalışıp çalışmadığını

04:36.870 --> 04:38.663
görelim.

04:39.970 --> 04:43.000
Ve başarısız oluyor.

04:45.440 --> 04:47.800
Evet, sadece bir yazım hatası

04:47.800 --> 04:51.440
var, devtools değil, devtool olmalı.

04:51.440 --> 04:53.830
Bu yüzden yapılandırma dosyasında bunu devtool olarak

04:53.830 --> 04:56.143
değiştirin ve şimdi npm run build'i tekrarlayalım.

04:59.500 --> 05:02.620
Ve bununla birlikte, burada aldığınız uyarıyı görmezden gelebilirsiniz.

05:02.620 --> 05:04.230
Dist dosyasında, paketlenmiş

05:04.230 --> 05:06.410
bir js dosyanız olduğunu göreceksiniz.

05:06.410 --> 05:08.150
Ve burada gördüğünüz de zaten

05:08.150 --> 05:09.960
oldukça okunamaz bir kod, çünkü

05:09.960 --> 05:14.060
burada aslında bu küçültme işlemini gerçekleştiriyoruz.

05:14.060 --> 05:18.680
Yani bu aslında zaten bu optimize edilmiş koddur.

05:18.680 --> 05:21.410
Şimdi burada farklı yapılandırmalarla nasıl çalışabileceğimizi

05:21.410 --> 05:26.120
görmeden önce, aslında dizine gidelim.

05:26.120 --> 05:26.120
html

05:26.120 --> 05:27.510
dosyası oluşturun ve içe aktarımlarımızı burada

05:27.510 --> 05:30.350
ayarlayın ve paketi işaret edin. js, ve şimdilik, henüz Webpack

05:30.350 --> 05:32.220
Dev Server kullanmadığımız için,

05:32.220 --> 05:38.480
bu dizini getirmek için npm start'ı çalıştıralım.

05:38.480 --> 05:38.480
html dosyasını tekrar açın.

05:38.480 --> 05:40.510
Ve şimdi bu sayfayı yeniden

05:40.510 --> 05:44.890
yüklerseniz, bunun çalıştığını göreceksiniz!

05:44.890 --> 05:46.610
Buraya bir şey girersek, projemiz

05:46.610 --> 05:49.230
olması gerektiği gibi çalışır ve paketlenmiş

05:49.230 --> 05:52.030
js dosyasını buraya aktarır, böylece tüm bu

05:52.030 --> 05:56.200
ayrı dosyalar yerine yalnızca bir dosya olur.

05:56.200 --> 05:59.020
Ve bu zaten bir geliştirmedir.

05:59.020 --> 06:01.640
Burada, tüm bu gereksiz htp isteklerini

06:01.640 --> 06:05.410
önleyen paketlenmiş kodumuz zaten var.

06:05.410 --> 06:07.690
Bu arada kaynaklar sekmesine giderseniz ve kodunuzda

06:07.690 --> 06:09.420
hata ayıklamak isterseniz, bu Webpack

06:09.420 --> 06:11.250
klasörünü ve orada bir kaynak klasörü

06:11.250 --> 06:12.770
bulacaksınız ve orada TypeScript

06:12.770 --> 06:15.300
dosyalarınıza gidebilirsiniz.

06:15.300 --> 06:19.090
Örneğin, burada, project-input üzerinde, gatherUserInput

06:19.090 --> 06:22.110
üzerinde bir kesme noktası da ayarlayabilirsiniz

06:22.110 --> 06:24.970
ve şimdi düğmeye basarsanız, orada duraklar ve

06:24.970 --> 06:27.680
kodunuzda hata ayıklayabilirsiniz.

06:27.680 --> 06:29.650
Ve bu, geliştirmemize gerçekten yardımcı

06:29.650 --> 06:31.200
olan ve bir geliştirici olarak hayatımızı

06:31.200 --> 06:34.050
kolaylaştıran kaynak haritaları geliyor.

06:34.050 --> 06:37.520
Bu optimize edilmiş kodu aldık, ancak kaynak haritaları sayesinde

06:37.520 --> 06:40.750
orijinal TypeScript kodumuzu burada hata ayıklayabiliriz.

06:40.750 --> 06:43.260
Yani zaten bize birçok optimizasyon

06:43.260 --> 06:46.280
sağlayan oldukça harika bir kurulumumuz

06:46.280 --> 06:48.440
var, şimdi bunu bitirelim ve Webpack

06:48.440 --> 06:52.050
Dev Server'ın dahil edildiğinden emin olalım ve

06:52.050 --> 06:54.440
aslında iki iş akışımız var, biri

06:54.440 --> 06:58.443
üretim için diğeri geliştirme için.
