WEBVTT

00:02.200 --> 00:05.520
講師：では､ さっそくTypeScriptとNodeを使ってみましょう｡

00:05.520 --> 00:05.520
そのために､

00:05.520 --> 00:12.140
私は基本的に空の新しいフォルダーを用意し､ そこにいくつかの設定ファイルを置いています｡

00:12.140 --> 00:15.020
アプリを追加してみましょう｡  tsファイルをここに入れてください｡ 

00:15.020 --> 00:17.370
もちろん､ 名前は好きなようにつけてください｡ 

00:17.370 --> 00:22.220
そして､ その中にNodeで実行したいコードを書いてみましょう｡

00:22.220 --> 00:22.220
jsですが､

00:22.220 --> 00:24.980
TypeScriptを使いたいところ｡

00:24.980 --> 00:28.910
簡単なスクリプトであれば､ 何かをコンソールログに記録するだけということも可能です｡

00:28.910 --> 00:33.350
これはブラウザで動作しますが､ Node.NETでも動作します｡

00:33.350 --> 00:33.350
js.

00:33.350 --> 00:38.740
ここで､ Nodeを取得したことを確認します｡  NPMでWebpackや他の多くのツールやライブラリと共に使用したため､

00:38.740 --> 00:46.710
このコースに従ったのであれば､ 間違いなくインストールされているはずです｡

00:46.710 --> 00:48.480
そこで､ Node.NETを導入する必要があります｡  jsをインストールしました｡ 

00:48.480 --> 00:50.300
そして､ インストールしたのなら､

00:50.300 --> 00:54.110
このファイルをJavaScriptにコンパイルすれば実行できる｡

00:54.110 --> 01:00.360
そこで､ tsc appを実行すると｡  ts､ そして私はアプリを制作します｡

01:00.360 --> 01:00.360
jsファイルなので､

01:00.360 --> 01:04.503
これをnodeで実行すると､ ここに何か表示されます｡

01:06.550 --> 01:11.890
今､ アプリを削除すると js ファイルを作成し､ アプリを実行しようとします｡

01:11.890 --> 01:11.890
ts

01:11.890 --> 01:13.810
を node と一緒に使うと､ 不思議なことがわかります｡

01:13.810 --> 01:15.070
これも有効です｡ 

01:15.070 --> 01:18.010
では､ もしnodeがTypeScriptを実行することが可能であれば？

01:18.010 --> 01:20.380
そうではなく､ それが本当に重要なのです｡ 

01:20.380 --> 01:25.260
ファイルの拡張子は気にせず､ ファイルの中にあるものを通常のJavaScriptとして扱い､

01:25.260 --> 01:27.420
ここではTypeScriptの機能を一切使っていないので､

01:27.420 --> 01:31.370
うまくいくのです｡

01:31.370 --> 01:34.340
ここに別のコンテンツを追加すれば､ それも変わってきます｡ 

01:34.340 --> 01:37.370
代わりに､ 数字であるage変数があるとします｡ ここではこれを30に設定し､

01:37.370 --> 01:42.250
コンソールします｡

01:42.250 --> 01:42.250
ログエイジはこちら

01:42.250 --> 01:44.840
もちろん､ これは有効なTypeScriptのコードです｡ 

01:44.840 --> 01:46.790
しかし､ これをnodeで実行しようとすると､

01:46.790 --> 01:48.370
エラーが発生することがわかります｡

01:48.370 --> 01:52.450
つまり､ nodeはTypeScriptをパースしたりコンパイルしたりする機能はなく､

01:52.450 --> 01:56.960
nodeで実行したすべてのファイルをJavaScriptとして扱うだけなのです｡

01:56.960 --> 01:59.030
そして､ ファイル内でTypeScriptの機能を使用していない場合は､

01:59.030 --> 02:01.100
はい､ 動作します｡

02:01.100 --> 02:02.950
でも､ そうするとうまくいかないんです｡ 

02:02.950 --> 02:06.550
有効なJavaScriptコードのみを含むJavaScriptファイルを実行するには､

02:06.550 --> 02:11.350
まずファイルをJavaScriptにコンパイルする必要があります｡

02:11.350 --> 02:13.030
それは､ 本当に大切なことです｡ 

02:13.030 --> 02:15.890
NodeはTypeScriptを実行しません｡ 

02:15.890 --> 02:24.230
ts-nodeというパッケージをインストールすることで､ TypeScriptコンパイラとnodeの実行ファイルを組み合わせて､

02:24.230 --> 02:34.170
グローバルにツールをインストールし､ TypeScriptファイルを実行することができるようになります｡

02:34.170 --> 02:35.210
しかし､ その裏では､

02:35.210 --> 02:39.440
ただコンパイルを代行して､ コンパイルコードを実行するだけです｡

02:39.440 --> 02:43.890
つまり､ 基本的にtscとノードステップを1つのステップにまとめたものです｡

02:43.890 --> 02:52.330
なぜなら､ コードが実行されるたびに余分なコンパイルステップが発生し､

02:52.330 --> 02:54.850
開発中は良いのですが､

02:54.850 --> 03:12.090
コードが生産可能な状態になり､ 本当にどこかに提供したいときには､ 余分なオーバーヘッドを追加するだけだからです｡

03:12.090 --> 03:13.260
そのため､ このモジュールではts-nodeを使用せず､

03:13.260 --> 03:18.180
nodeを使用してTypeScriptファイルを実行することはありません｡

03:18.180 --> 03:21.570
その代わりに､ TypeScriptとTypeScriptコンパイラ､ そしてvanilla

03:21.570 --> 03:31.343
nodeだけで､ node expressのWebアプリケーションやレストAPIを構築するためのセットアップを紹介します｡

03:31.343 --> 03:31.343
js.
