WEBVTT

1
00:00:02.290 --> 00:00:04.300
<v Narrator>So you saw TypeScript in action</v>

2
00:00:04.300 --> 00:00:06.700
and it offers great advantages.

3
00:00:06.700 --> 00:00:10.570
It makes writing clean code really easier.

4
00:00:10.570 --> 00:00:14.060
TypeScript adds Types and data super important.

5
00:00:14.060 --> 00:00:16.810
With Types we have to be way more explicit

6
00:00:16.810 --> 00:00:20.970
about how things work and we can avoid many unaccepted

7
00:00:20.970 --> 00:00:24.460
and unnecessary errors by using Types.

8
00:00:24.460 --> 00:00:27.640
In addition to that we also can use IDE's

9
00:00:27.640 --> 00:00:31.070
modern IDE's which have built in Types support

10
00:00:31.070 --> 00:00:33.130
which can pick up on these types

11
00:00:33.130 --> 00:00:36.940
and give us better auto completion and built in errors

12
00:00:36.940 --> 00:00:39.570
which show before we even compile the code

13
00:00:39.570 --> 00:00:43.050
because they also understand TypeScript.

14
00:00:43.050 --> 00:00:46.870
But beside the Types and the huge advantages we get alone

15
00:00:46.870 --> 00:00:49.660
by using Types we also get other features

16
00:00:49.660 --> 00:00:51.410
added by TypeScript.

17
00:00:51.410 --> 00:00:55.170
We can use certain next generation JavaScript features

18
00:00:55.170 --> 00:00:58.340
which you can write and use in our TypeScript files

19
00:00:58.340 --> 00:01:01.890
and then they will get compiled down to JavaScript code

20
00:01:01.890 --> 00:01:05.630
to workarounds that even work in older browsers.

21
00:01:05.630 --> 00:01:08.170
If you know Bevel, which is a tool that allows us

22
00:01:08.170 --> 00:01:11.120
to do that with Vanilla JavaScript as well,

23
00:01:11.120 --> 00:01:14.680
it's a bit like that, just already built into TypeScript.

24
00:01:14.680 --> 00:01:18.350
We can use modern JavaScript features and still produce

25
00:01:18.350 --> 00:01:21.773
and ship code that works in older browsers as well.

26
00:01:22.610 --> 00:01:25.210
TypeScript also adds certain features

27
00:01:25.210 --> 00:01:26.930
which only TypeScript understands,

28
00:01:26.930 --> 00:01:29.070
like Interfaces and Generics.

29
00:01:29.070 --> 00:01:32.560
These are features which compile to JavaScript

30
00:01:32.560 --> 00:01:35.360
but they don't have to because they are features

31
00:01:35.360 --> 00:01:39.610
that help us during development that give us clearer errors

32
00:01:39.610 --> 00:01:42.200
and help us avoid even more errors.

33
00:01:42.200 --> 00:01:45.660
So it even adds more features on that front besides

34
00:01:45.660 --> 00:01:47.950
the Types we already learned about.

35
00:01:47.950 --> 00:01:50.900
It also gives us certain Meta-programming features

36
00:01:50.900 --> 00:01:53.700
like Decorators on which I have a whole module

37
00:01:53.700 --> 00:01:55.850
in this course where you will understand

38
00:01:55.850 --> 00:01:59.520
what exactly Decorators are, why they are so meta,

39
00:01:59.520 --> 00:02:01.790
and why they are amazing.

40
00:02:01.790 --> 00:02:04.230
TypeScript alls is highly configurable.

41
00:02:04.230 --> 00:02:06.390
We didn't configurate it thus far

42
00:02:06.390 --> 00:02:09.350
but I have a whole module in the course where we talk

43
00:02:09.350 --> 00:02:12.510
only about the compiler and how to configure it.

44
00:02:12.510 --> 00:02:15.700
And you can really fine tune it to your requirements

45
00:02:15.700 --> 00:02:18.960
to make it stricter or looser and to ensure

46
00:02:18.960 --> 00:02:23.310
that it behaves in exactly the way you want it to behave.

47
00:02:23.310 --> 00:02:26.790
And with Modern Tooling with modern IDE's

48
00:02:26.790 --> 00:02:30.610
you even get support in non-TypeScript projects.

49
00:02:30.610 --> 00:02:33.700
The IDE you just saw, visual studio code,

50
00:02:33.700 --> 00:02:37.740
that even gives you better support in plain JavaScript files

51
00:02:37.740 --> 00:02:41.010
because it is able to use some TypeScript features

52
00:02:41.010 --> 00:02:44.710
under the hood without you explicitly using TypeScript.

53
00:02:44.710 --> 00:02:47.640
So that's a free gain you get out of the box

54
00:02:47.640 --> 00:02:49.810
when being aware of TypeScript

55
00:02:49.810 --> 00:02:52.020
and when using modern tools.

56
00:02:52.020 --> 00:02:54.830
So there are many reasons for using TypeScript

57
00:02:54.830 --> 00:02:57.460
and it's probably why you took this course.

58
00:02:57.460 --> 00:03:00.360
In this course we will now learn it step-by-step

59
00:03:00.360 --> 00:03:03.663
and we will learn all about the amazing features it adds.

