WEBVTT

00:02.490 --> 00:03.860
Dus we zetten de IDE op, wat

00:03.860 --> 00:04.860
belangrijk is.

00:04.860 --> 00:07.780
Laten we nu ook een startproject opzetten, dat we gedurende deze

00:07.780 --> 00:09.370
hele cursus in de verschillende cursusmodules

00:09.370 --> 00:11.250
zullen gebruiken.

00:11.250 --> 00:13.230
Dus eigenlijk een projectopzet waarmee

00:13.230 --> 00:16.110
we elke cursusmodule kunnen starten om daar vervolgens

00:16.110 --> 00:18.339
onze code te schrijven.

00:18.339 --> 00:20.730
Zoals je in deze cursus zult zien, is voor het schrijven

00:20.730 --> 00:24.330
van code in het algemeen geen complexe opstelling nodig.

00:24.330 --> 00:28.330
Maar hier wil ik een project waar we code kunnen schrijven, compileren,

00:28.330 --> 00:31.490
en dan onmiddellijk de uitvoer van die code in de browser

00:31.490 --> 00:33.530
kunnen zien.

00:33.530 --> 00:36.970
En daarvoor voeg ik eerst een nieuw index HTML bestand toe.

00:36.970 --> 00:39.520
En je kunt dit toevoegen in elke lege map, de twee

00:39.520 --> 00:42.620
andere bestanden of mappen die je hier ziet zijn gewoon

00:42.620 --> 00:45.530
configuratiebestanden voor git, voor het geval je

00:45.530 --> 00:47.460
versiebeheer gebruikt en voor mijn

00:47.460 --> 00:50.200
editor, die het zoomniveau instelt.

00:50.200 --> 00:51.670
Dus dat is alles wat ik hier heb.

00:51.670 --> 00:54.930
Maar in dat index HTML bestand zal ik het nu initialiseren

00:54.930 --> 00:56.750
met een basisskelet.

00:56.750 --> 00:58.390
En voor die individuele

00:58.390 --> 01:02.770
code kun je gewoon HTML typen, kies die html:5 optie, als je

01:02.770 --> 01:04.200
dit menu niet krijgt,

01:04.200 --> 01:06.820
druk dan op control en spatie.

01:06.820 --> 01:09.600
Kies de html:5 optie, en druk op enter,

01:09.600 --> 01:11.740
en je krijgt dit skelet.

01:11.740 --> 01:14.670
We zouden hier TypeScript als titel kunnen invoeren,

01:14.670 --> 01:16.722
maar dat maakt niet zoveel uit.

01:16.722 --> 01:21.150
Belangrijker is dat je hier een script tag toevoegt

01:21.150 --> 01:25.000
in je head sectie en een source toevoegt en

01:25.000 --> 01:29.020
wijst naar app. js hier en voeg het defer attribuut toe.

01:29.020 --> 01:32.270
Dit probeert een app te importeren. js bestand, dat nu natuurlijk

01:32.270 --> 01:34.520
niet bestaat.

01:34.520 --> 01:35.530
En het zal het dan natuurlijk

01:35.530 --> 01:37.960
ook uitvoeren, als het het vindt.

01:37.960 --> 01:41.210
Zo kunnen we onze wijzigingen, onze codewijzigingen,

01:41.210 --> 01:44.790
direct op het scherm in de browser bekijken.

01:44.790 --> 01:47.410
Of als we gewoon iets loggen op de console,

01:47.410 --> 01:49.560
in de browser def tools.

01:49.560 --> 01:52.250
Vervolgens zal ik een app toevoegen. ts bestand.

01:52.250 --> 01:54.170
Dat is het bestand, een TypeScript bestand, waar

01:54.170 --> 01:55.530
we wat code gaan schrijven.

01:55.530 --> 01:58.580
En daar zou je bijvoorbeeld je code kunnen

01:58.580 --> 02:01.580
loggen, of wat je maar wilt.

02:01.580 --> 02:03.780
Je kunt hier loggen wat je wilt.

02:03.780 --> 02:06.870
En als je dat doet, kun je dit bestand compileren met TypeScript,

02:06.870 --> 02:09.280
dat we eerder installeerden, daarvoor kun

02:09.280 --> 02:10.880
je de terminal openen, het integreren

02:10.880 --> 02:13.070
in de editor hier.

02:13.070 --> 02:16.580
En schrijf gewoon tsc app. ts.

02:16.580 --> 02:18.490
Dit compileert dit TypeScript-bestand

02:18.490 --> 02:20.610
en genereert een app. js bestand, wat het bestand

02:20.610 --> 02:22.530
is dat we hier importeren.

02:22.530 --> 02:25.160
En als je nu deze index opent. html bestand, zie

02:25.160 --> 02:27.120
je wat hier gebeurt.

02:27.120 --> 02:29.800
Je trapt in de logica die je hier schreef.

02:29.800 --> 02:32.340
En ofwel is dat logica die iets op de dom manipuleert,

02:32.340 --> 02:34.410
of zoals in dit geval, is het logica

02:34.410 --> 02:37.870
die gewoon op de console wordt vergrendeld.

02:37.870 --> 02:41.700
Dus in dit geval heb ik dit HTML-bestand geopend in de browser.

02:41.700 --> 02:44.460
U kunt er gewoon op dubbelklikken buiten de IDE.

02:44.460 --> 02:47.960
Dus in de normale Windows Verkenner, of de Mac Finder.

02:47.960 --> 02:49.910
En open dan misschien je ontwikkelaarstools

02:49.910 --> 02:51.830
als je gewoon iets logt op de console,

02:51.830 --> 02:54.010
en je ziet je log hier.

02:54.010 --> 02:56.690
Nu is dat mooi, maar telkens als we hier iets

02:56.690 --> 03:00.470
veranderen in onze code, moeten we handmatig hercompileren,

03:00.470 --> 03:02.340
nou dat is het voor nu.

03:02.340 --> 03:04.300
Het zal later in de cursus veranderen.

03:04.300 --> 03:07.970
Maar we moeten deze pagina ook handmatig herladen.

03:07.970 --> 03:10.140
En om dit te versnellen en ervoor te zorgen

03:10.140 --> 03:11.940
dat je dit niet telkens hoeft te

03:11.940 --> 03:13.900
doen als je iets verandert, voegen

03:13.900 --> 03:16.540
we hier nog een tool toe aan deze dummy opstelling,

03:16.540 --> 03:17.890
die we gedurende deze cursus

03:17.890 --> 03:19.500
zullen gebruiken, zodat dit

03:19.500 --> 03:22.360
automatisch gebeurt.

03:22.360 --> 03:23.720
Om zo'n tool te installeren,

03:23.720 --> 03:26.430
laten we hier npm init draaien.

03:26.430 --> 03:29.830
In deze projectmap is het commando npm beschikbaar als

03:29.830 --> 03:32.113
je node JS hebt geïnstalleerd.

03:32.960 --> 03:36.050
Zorg ervoor dat je daarvoor nodejs bezoekt. org en download en installeer

03:36.050 --> 03:39.690
de laatste versie die je hier vindt.

03:39.690 --> 03:43.040
Voorlopig gaan we geen node JS code schrijven, maar node JS komt

03:43.040 --> 03:45.960
samen met de NPM tool, die je kunt gebruiken om afhankelijkheden

03:45.960 --> 03:48.610
van derden of nuttige tools te installeren die onze

03:48.610 --> 03:51.210
ontwikkeling versnellen.

03:51.210 --> 03:53.840
En daarom hebben we hem hier nodig.

03:53.840 --> 03:55.970
Dus met dat geïnstalleerd, kun je npm init

03:55.970 --> 03:57.800
uitvoeren in deze projectmap.

03:57.800 --> 03:58.740
Druk gewoon op enter,

03:58.740 --> 04:00.560
en u kunt al deze vragen hier beantwoorden

04:00.560 --> 04:03.570
met de standaardwaarden door steeds op enter te drukken.

04:03.570 --> 04:06.780
En als dit klaar is, krijg je een pakket. json bestand dat er ongeveer

04:06.780 --> 04:08.150
zo uitziet.

04:08.150 --> 04:12.500
En nu kun je npm install uitvoeren om een afhankelijkheid te installeren die

04:12.500 --> 04:14.410
exclusief is voor dit project.

04:14.410 --> 04:16.210
Dus om een gereedschap te installeren,

04:16.210 --> 04:17.730
zou je kunnen zeggen, wat je in dit

04:17.730 --> 04:22.520
project zou kunnen gebruiken, -: -save-dev om het te markeren als een ontwikkeling alleen afhankelijkheid,

04:22.520 --> 04:24.580
dus een gereedschap dat ons helpt tijdens de

04:24.580 --> 04:26.610
ontwikkeling en geen code bevat, die zal worden

04:26.610 --> 04:29.930
uitgevoerd als onderdeel van onze hoofdcode.

04:29.930 --> 04:33.470
En de naam van het gereedschap is lite-server.

04:33.470 --> 04:37.103
Als je hier op enter drukt, installeert dit extra gereedschap.

04:38.230 --> 04:42.000
En als dit klaar is, ga je naar je pakket. json bestand en voeg in het scripts

04:42.000 --> 04:44.390
gedeelte een komma toe, en voeg een nieuw

04:44.390 --> 04:46.870
script toe dat je start noemt.

04:46.870 --> 04:49.029
En voer dan als waarde tussen dubbele

04:49.029 --> 04:51.570
aanhalingstekens lite-server in.

04:51.570 --> 04:54.580
Dus die naam van het pakket dat hier is toegevoegd.

04:54.580 --> 04:57.550
Als u nu op enter drukt, kunt u hier npm start uitvoeren

04:57.550 --> 04:59.400
om dit startscript te starten.

04:59.400 --> 05:02.530
En lite server is een eenvoudige ontwikkelingsserver, die

05:02.530 --> 05:05.430
altijd de index serveert. html bestand naast

05:05.430 --> 05:08.410
de pagina. json bestand, dus dit bestand.

05:08.410 --> 05:13.410
En het serveert uw toepassing op deze URL die u hier ziet, standaard

05:13.620 --> 05:16.143
localhost:3000.

05:17.440 --> 05:19.690
En je kunt dan gewoon deze locatie bezoeken.

05:19.690 --> 05:23.090
Voer gewoon localhost:3000 in de browser in.

05:23.090 --> 05:24.860
En nu draait je code hier.

05:24.860 --> 05:26.170
En waarom is dit beter?

05:26.170 --> 05:28.840
Wel, dit zal nu automatisch de pagina herladen

05:28.840 --> 05:32.180
wanneer een ander bestand in deze map verandert.

05:32.180 --> 05:35.130
Dus als ik bijvoorbeeld hier een uitroepteken

05:35.130 --> 05:38.180
toevoeg, en ik sla dit op, en ik compileer dit opnieuw

05:38.180 --> 05:40.323
met tsc app. TS, en je gaat terug

05:42.270 --> 05:43.580
naar de browser, zie je

05:43.580 --> 05:45.340
meteen de laatste uitvoer, omdat

05:45.340 --> 05:47.230
die automatisch herlaadt.

05:47.230 --> 05:49.620
En dat bespaart ons het extra werk

05:49.620 --> 05:51.690
van handmatig herladen.

05:51.690 --> 05:54.540
Nu belangrijk over dit npm startproces, laat

05:54.540 --> 05:57.450
het zeker draaien zolang je aan je project werkt,

05:57.450 --> 06:00.210
zolang je code schrijft die je uitgevoerd

06:00.210 --> 06:02.800
wilt zien in de browser.

06:02.800 --> 06:03.633
Als je klaar bent,

06:03.633 --> 06:06.450
kun je dit proces altijd afsluiten met control C,

06:06.450 --> 06:08.200
maar als je dat doet, wordt je project

06:08.200 --> 06:11.600
niet langer geserveerd onder lokale host 3000.

06:11.600 --> 06:13.980
Dus blijf het draaiende houden zolang je code schrijft

06:13.980 --> 06:15.650
en wijzigingen aanbrengt.

06:15.650 --> 06:17.510
Daarmee verander ik het terug,

06:17.510 --> 06:19.200
maar dat is geheel aan jou.

06:19.200 --> 06:21.480
En dit is de projectopzet die ik in deze cursus

06:21.480 --> 06:22.410
zal gebruiken.

06:22.410 --> 06:24.200
Je vindt het ook bijgevoegd, natuurlijk,

06:24.200 --> 06:25.530
in de afgewerkte vorm.

06:25.530 --> 06:27.250
Eén belangrijke opmerking.

06:27.250 --> 06:30.330
Als u het bijgevoegde startproject downloadt,

06:30.330 --> 06:32.500
of een ander snapshot van de cursus,

06:32.500 --> 06:35.900
een ander code snapshot dat u ergens in de cursus vindt,

06:35.900 --> 06:38.920
dan krijgt u een download die deze map met node-modules

06:38.920 --> 06:41.070
niet bevat.

06:41.070 --> 06:42.590
Dit is een enorme map, waarin uiteindelijk

06:42.590 --> 06:45.250
alle pakketten van derden en hun afhankelijkheden worden

06:45.250 --> 06:46.970
opgeslagen.

06:46.970 --> 06:49.840
En omdat het zo groot is, verwijder ik het meestal, omdat

06:49.840 --> 06:52.260
je het gemakkelijk opnieuw kunt maken door

06:52.260 --> 06:54.080
npm install uit te voeren.

06:54.080 --> 06:56.640
Dus als u een van mijn bijlagen downloadt,

06:56.640 --> 06:59.010
navigeert u naar de uitgepakte map, en

06:59.010 --> 07:01.530
in die map voert u npm install uit.

07:01.530 --> 07:03.341
En dit zal alle afhankelijkheden installeren

07:03.341 --> 07:06.110
en deze node modules map opnieuw aanmaken.

07:06.110 --> 07:07.280
En als je dit gedaan hebt,

07:07.280 --> 07:08.610
kun je npm start uitvoeren

07:08.610 --> 07:11.330
of doen wat je maar wilt in dit project.

07:11.330 --> 07:13.360
En daarmee hebben we dit project opgezet dat we de

07:13.360 --> 07:14.750
hele cursus zullen gebruiken.

07:14.750 --> 07:16.810
Laten we geen tijd meer verspillen

07:16.810 --> 07:18.303
en gewoon beginnen.
