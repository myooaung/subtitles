WEBVTT

00:02.320 --> 00:03.570
教师：要使其可拖放,

00:03.570 --> 00:07.730
我们必须转到子句或应用程序中的组件,

00:07.730 --> 00:11.600
它们最终应作为拖动目标｡

00:11.600 --> 00:14.120
因此, 这里的Project List类是右边的子句,

00:14.120 --> 00:17.150
我们可以在那里实现我们添加的第二个接口, 即Drag

00:17.150 --> 00:20.130
Target接口｡

00:20.130 --> 00:26.510
现在, 就像可拖动接口一样, 这迫使我们添加某些方法｡

00:26.510 --> 00:33.500
这里为了精确起见, 我们需要添加拖拽处理程序､ 放下处理程序和拖拽离开处理程序｡

00:33.500 --> 00:34.540
所以, 让我们这样做｡ 

00:34.540 --> 00:38.640
也许下面的构造函数上面的configure都在这里｡ 

00:38.640 --> 00:40.080
确切的位置由您决定,

00:40.080 --> 00:42.880
方法的顺序无关紧要｡

00:42.880 --> 00:45.680
因此, 我将在这里添加拖动处理程序,

00:45.680 --> 00:49.730
在这里我们将获得拖动事件｡

00:49.730 --> 00:51.850
然后我将在这里添加drop处理程序,

00:51.850 --> 00:54.203
在这里我们还可以获得拖动事件｡

00:55.710 --> 00:59.130
最后但并非最不重要的是, 拖动离开处理程序,

00:59.130 --> 01:02.260
在这里我们也会得到一个拖动事件｡

01:02.260 --> 01:05.410
顺便说一下, 这些事件保存不同类型的数据,

01:05.410 --> 01:08.594
但它们都基于case核心事件类型｡

01:08.594 --> 01:11.860
现在我们有几件不同的事情要做｡ 

01:11.860 --> 01:15.120
让我们从拖动处理程序开始｡ 

01:15.120 --> 01:18.770
在拖拽处理程序中, 我想改变我的框或者无序列表的外观,

01:18.770 --> 01:24.470
使其可视化为一个可拖放区域｡

01:24.470 --> 01:26.960
因为现在当我们拖动元素时,

01:26.960 --> 01:30.200
我们不知道该把它放在哪里, 对吧？

01:30.200 --> 01:33.410
UI上没有任何更改, 因此我想更改此设置｡ 

01:33.410 --> 01:35.950
为了改变这一点, 我将添加一个特定的css子句到无序列表中,

01:35.950 --> 01:38.680
你可以在app中找到它｡ css的值｡ 

01:38.680 --> 01:42.080
droppable子句将改变背景颜色,

01:42.080 --> 01:49.070
因此在这里, 首先, 我们只需要访问无序列表元素.

01:49.070 --> 01:53.850
我们可以通过访问这个元素querySerelectror

01:53.850 --> 01:57.380
uL并添加一个感叹号来实现, 因为那里总是有一个无序列表,

01:57.380 --> 02:00.963
即使它还没有包含任何元素｡

02:02.560 --> 02:05.570
我们只需要确保这个关键字在这里有效,

02:05.570 --> 02:12.840
我们可以通过在这里自动绑定这个关键字来确保这个关键字绑定到周围的子句｡

02:12.840 --> 02:15.610
选择了list元素之后, 我们就可以使用dom元素的clause

02:15.610 --> 02:27.540
list属性, 这里还是Vanilla JavaScript, 调用add方法添加droppable子句｡

02:27.540 --> 02:29.360
现在, 我们当然要确保当我们在这个元素上拖动一些东西时,

02:29.360 --> 02:37.333
在这个呈现的部分上, dragOverHandler实际上被触发了｡

02:39.090 --> 02:42.400
为了在configure方法中实现这一点,

02:42.400 --> 02:46.020
这里已经有了一个侦听器, 侦听我们的状态变化,

02:46.020 --> 02:50.280
我还将在元素本身上注册侦听器｡

02:50.280 --> 02:53.380
当然, 第一个EventListener是dragover事件,

02:53.380 --> 02:58.090
毫无疑问, 我将把它绑定到dragOverHandler｡

02:58.090 --> 03:01.060
然后我会重复这一步, 因为我还想监听dragLeave事件,

03:01.060 --> 03:03.740
并将其绑定到dragLeaveHandler和drop事件,

03:03.740 --> 03:10.583
并将其绑定到dropHandler, 因为我们稍后也会用到它.

03:11.580 --> 03:16.500
这样, 我们就连接了拖动事件侦听器和dragOverHandler,

03:16.500 --> 03:21.780
但现在代码中也出现了一些错误｡

03:21.780 --> 03:24.610
好吧, 这里应该是未使用的事件对象, 所以现在,

03:24.610 --> 03:28.810
为了满足typescript的要求, 让我们把它们清空｡

03:28.810 --> 03:31.477
我们稍后会用到它们, 但现在, 为了让这个工作正常进行,

03:31.477 --> 03:37.670
让我们在这里用下划线来告诉打字稿, “我们现在不用它们很好｡

03:37.670 --> 03:37.670
现在编译完成,

03:37.670 --> 03:38.950
回到项目中, 当我们在这里添加一个新项目时,

03:38.950 --> 03:45.320
我拖动它, 你看, 当我把它拖到完成的项目上时, 这里的背景变成了浅蓝色｡

03:45.320 --> 03:49.620
在这里超过活跃的项目, 它得到了浅玫瑰色,

03:49.620 --> 03:53.270
像一个轻微的粉红色的颜色｡

03:53.270 --> 03:56.220
再次展示一下, 如果我重新加载,

03:56.220 --> 03:58.650
你会看到现在项目中的背景是白色的,

03:58.650 --> 04:02.670
哎呀, 当我开始拖动时, 这里的背景是浅粉色的,

04:02.670 --> 04:09.470
当我把它拖到完成的项目上时, 框的背景变成了浅蓝色｡

04:09.470 --> 04:13.360
现在它永远不会变回白色, 因为我们从来没有删除那个可删除的子句,

04:13.360 --> 04:16.050
但这是第一步｡

04:16.050 --> 04:19.480
当然, 下降仍然不起作用｡ 

04:19.480 --> 04:21.700
将其拖放到此处并不会添加项目,

04:21.700 --> 04:23.890
因为它将如何添加？

04:23.890 --> 04:25.300
我们没有为此添加任何逻辑｡ 

04:25.300 --> 04:28.200
因此, 当我们停止时, 当我们离开元素时,

04:28.200 --> 04:33.200
让我们确保也更新样式｡

04:33.410 --> 04:36.390
当我们把它拖到这里, 然后走开｡ 

04:36.390 --> 04:42.640
确保蓝色背景消失, 这就是我接下来要做的｡

04:42.640 --> 04:44.870
为此, 我们可以在这里使用dragLeaverHandler,

04:44.870 --> 04:47.020
因为只要我们将这个元素与拖动的元素一起留下,

04:47.020 --> 04:50.990
它就会触发｡

04:50.990 --> 04:53.019
当然我也想访问无序列表,

04:53.019 --> 05:01.420
所以我会复制代码, 但我想去掉droppable子句.

05:01.420 --> 05:05.553
我们现在还应该自动绑定this,

05:06.448 --> 05:11.220
以便this关键字引用周围的子句｡

05:11.220 --> 05:13.120
如果我们保存它, 我们在这里添加一个新元素｡ 

05:14.040 --> 05:17.740
让我们来试试看｡ 

05:17.740 --> 05:18.773
如果我开始拖动,

05:20.310 --> 05:23.740
你会看到我们的背景在这里, 如果我离开, 它就消失了｡

05:24.610 --> 05:27.120
所以现在背景真的是更新了｡ 

05:27.120 --> 05:33.670
您在这里看到一些闪烁, 因为如果您将鼠标光标从背景上移动到呈现的元素上,

05:33.670 --> 05:40.960
也会触发dragLeave事件, 但在这里应该没有问题｡

05:40.960 --> 05:42.500
这没什么大不了的

05:42.500 --> 05:43.620
所以我想说, 实际上, 我们达到了预期的效果｡ 

05:43.620 --> 05:47.320
因此, UI按照现在的方式更新,

05:47.320 --> 05:50.950
但当然我们不能删除和真正传输数据,

05:50.950 --> 05:54.700
因此这将是下一步｡
