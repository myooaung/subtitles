WEBVTT

00:02.180 --> 00:04.432
-: Ahora bien, una fuente común de confusión,

00:04.432 --> 00:06.300
que quiero aclarar aquí, es la diferencia

00:06.300 --> 00:09.030
entre los tipos genéricos y los tipos de unión.

00:09.030 --> 00:11.950
¿Por qué se pueden confundir estas dos cosas?

00:11.950 --> 00:14.440
Bueno, por ejemplo, nuestro almacenamiento de datos aquí.

00:14.440 --> 00:16.260
Si aceptamos tipos genéricos

00:16.260 --> 00:19.240
basados en estos tipos, también podríamos

00:19.240 --> 00:21.157
reescribirlo para decir simplemente:

00:21.157 --> 00:23.750
"Bueno, queremos almacenar cadenas,

00:23.750 --> 00:27.610
o números, o booleanos aquí, ¿verdad? Así que, podríamos almacenar eso o para ser precisos, envolver

00:27.610 --> 00:30.470
esto en paréntesis para que digamos cualquiera

00:30.470 --> 00:32.660
de estos tipos como un array.

00:32.660 --> 00:35.040
Entonces aquí, por supuesto, también podríamos decir:

00:35.040 --> 00:37.017
"Bueno, lo que obtenemos aquí cuando añadimos

00:37.017 --> 00:38.420
un elemento es una cadena, un número

00:38.420 --> 00:39.740
o un booleano, cuando lo quitamos

00:39.740 --> 00:41.120
es lo mismo. ¿Cuál es el problema de este enfoque?

00:41.120 --> 00:43.007
A primera vista, podría parecer que consigue lo mismo, pero,

00:44.424 --> 00:45.880
en realidad, hace algo totalmente diferente.

00:45.880 --> 00:49.630
Lo que estamos diciendo aquí es que estamos almacenando cualquier

00:49.630 --> 00:52.310
tipo de datos allí, siempre y cuando sea una matriz

00:52.310 --> 00:53.710
de cadenas, números o booleanos,

00:53.710 --> 00:57.220
y también estamos añadiendo cualquier tipo de datos aquí,

00:57.220 --> 00:59.730
ya sea una cadena, un número o un booleano,

00:59.730 --> 01:02.930
y lo mismo para eliminar.

01:02.930 --> 01:04.670
Ahora, ya tenemos algunos errores ahí abajo, por supuesto,

01:04.670 --> 01:06.650
porque ya no puedo inicializar esto de forma genérica.

01:06.650 --> 01:09.830
Pero, aparte de eso, funciona.

01:09.830 --> 01:12.520
Ahora, el problema, sin embargo, es para uno aquí arriba,

01:12.520 --> 01:14.420
no estamos diciendo que esto es una matriz

01:14.420 --> 01:15.890
de cadenas, o una matriz de números,

01:15.890 --> 01:18.260
o una matriz de booleanos.

01:18.260 --> 01:20.630
Esto dice que tenemos un array que puede

01:20.630 --> 01:24.190
tener cadenas, números y booleanos mezclados.

01:24.190 --> 01:26.290
Así que si quieres decir un array

01:26.290 --> 01:30.190
de cadenas, o un array de números, tendríamos que decir

01:30.190 --> 01:32.100
array de cadenas, array de números,

01:32.100 --> 01:34.403
o array booleano.

01:34.403 --> 01:36.020
Bien, podemos hacerlo, pero ahora tenemos un problema.

01:36.020 --> 01:39.100
Ahora, estamos añadiendo una cadena, un número o un booleano,

01:39.100 --> 01:41.660
pero dependiendo de lo que realmente establecimos

01:41.660 --> 01:44.710
esta matriz de datos para ser, ya sea una matriz de números,

01:44.710 --> 01:46.750
o una matriz booleana, o una matriz de

01:46.750 --> 01:50.270
cadenas, no se nos permite añadir un número, o un booleano o una

01:50.270 --> 01:52.320
cadena.

01:52.320 --> 01:54.140
Si configuramos esto como un array de cadenas,

01:54.140 --> 01:55.870
entonces no podemos añadir un número aquí.

01:55.870 --> 01:57.833
Sin embargo, aquí me parece bien cualquier parámetro

01:57.833 --> 01:59.800
siempre que sea un número, un booleano o una cadena.

01:59.800 --> 02:02.850
Por lo tanto, el problema está aquí con los tipos de Unión.

02:02.850 --> 02:05.670
Aceptamos cualquiera de estos valores cada vez

02:05.670 --> 02:08.380
que se llama a este método, o a este método.

02:08.380 --> 02:11.053
Por lo tanto, no estamos diciendo, "Hey, cada vez que

02:11.053 --> 02:14.250
estamos trabajando con esta clase, usted tiene que decidir por

02:14.250 --> 02:15.397
un tipo y se adhieren a ella,

02:15.397 --> 02:18.150
en lugar estamos diciendo, cada vez que usted está llamando

02:18.150 --> 02:21.830
a este método es libre de utilizar cualquiera de estos tipos.

02:21.830 --> 02:23.440
Eso no es exactamente lo que queremos aquí.

02:23.440 --> 02:26.150
Si revierto esto a la configuración anterior

02:26.150 --> 02:29.640
en la que usamos tipos genéricos, entonces tenemos

02:29.640 --> 02:33.050
una configuración diferente.

02:33.050 --> 02:34.810
En este caso, decimos que tienes

02:37.580 --> 02:39.450
que elegir una vez qué tipo de datos

02:39.450 --> 02:42.060
quieres almacenar y luego sólo puedes añadir

02:42.060 --> 02:43.950
ese tipo exacto de datos.

02:43.950 --> 02:45.750
Así que aquí si añado un número,

02:45.750 --> 02:48.523
por ejemplo, me da un error porque eso no es una cadena

02:49.710 --> 02:52.623
y muestra que sólo quiero manejar cadenas aquí cuando

02:53.830 --> 02:54.730
establezco el tipo

02:54.730 --> 02:56.170
genérico.

02:56.170 --> 02:57.810
Esa es la diferencia entre los tipos de unión y los tipos genéricos.

02:57.810 --> 03:01.250
Los tipos de unión pueden ser geniales si quieres tener

03:01.250 --> 03:05.040
una función a la que puedas llamar con uno de estos tipos cada

03:05.040 --> 03:06.920
vez que la llames.

03:06.920 --> 03:08.690
Los tipos genéricos son excelentes

03:08.690 --> 03:11.570
si se quiere fijar un tipo determinado.

03:11.570 --> 03:13.460
Utilice el mismo tipo en toda

03:13.460 --> 03:15.510
la instancia de clase que cree.

03:15.510 --> 03:18.380
Utilice el mismo tipo en toda la función.

03:18.380 --> 03:20.070
Ahí es donde quieres el tipo genérico.

03:20.070 --> 03:23.300
Quieres tipos de unión cuando eres flexible para tener

03:23.300 --> 03:25.850
un tipo diferente con cada llamada de método,

03:25.850 --> 03:28.120
con cada llamada de función.

03:28.120 --> 03:30.810
Entonces, puede utilizar los tipos de unión.

03:30.810 --> 03:33.470
Los tipos genéricos bloquean un tipo.
