WEBVTT

00:02.130 --> 00:05.620
-: Bunun için eski güzel başlangıç projemizi ekte bulabilirsiniz,

00:05.620 --> 00:08.470
sunucuyu zaten NPM start ile başlattım.

00:08.470 --> 00:12.320
Ve TSC-W ile TypeScript izleme süreci.

00:12.320 --> 00:14.870
Ve burada yapılandırmamız gereken ilk

00:14.870 --> 00:18.030
şey tsconfig dosyasında hedefinizin es6 olarak

00:18.030 --> 00:21.620
ayarlandığından emin olmak ve ardından aşağı kaydırırsanız

00:21.620 --> 00:24.230
bu deneysel dekoratör satırını buraya eklediğinizden

00:24.230 --> 00:26.720
emin olmaktır.

00:26.720 --> 00:28.380
Bunun önüne bir virgül ekleyin ve ardından tüm

00:28.380 --> 00:31.700
bunları doğru şekilde biçimlendirmek için Otomatik Biçimlendirme yapabilirsiniz.

00:31.700 --> 00:34.020
Bu önemlidir, aksi takdirde projenizde

00:34.020 --> 00:36.000
dekoratörleri kullanamazsınız.

00:36.000 --> 00:37.250
Bu yüzden tsconfig'inizi

00:37.250 --> 00:40.540
değiştirdiğinizden emin olun. json dosyasını uygun şekilde oluşturun.

00:40.540 --> 00:42.630
Ve bununla birlikte hemen uygulamaya girebilir

00:42.630 --> 00:46.980
ve ilk dekoratörümüzü yazabiliriz. ts dosyası.

00:46.980 --> 00:50.950
Ve bir sınıfa ekleyebileceğimiz bir dekoratör ile başlamak istiyorum.

00:50.950 --> 00:54.530
Şimdi dekoratörler genel olarak sınıflarla ilgilidir, ancak

00:54.530 --> 00:55.363
bu, sınıfa bir bütün

00:55.363 --> 00:58.220
olarak ekleyeceğimiz bir dekoratördür.

00:58.220 --> 01:00.730
Bunun için, diyelim ki bir sınıfımız var,

01:00.730 --> 01:04.360
Person, çok önemsiz bir sınıf, burada bir ismimiz var.

01:04.360 --> 01:07.530
Belki burada önceden başlatılmış bir Max değeriyle.

01:07.530 --> 01:10.520
Burada bir kurucu fonksiyonumuz var, burada sadece kişi nesnesi

01:10.520 --> 01:12.600
oluşturmayı günlüğe kaydediyorum, böylece

01:12.600 --> 01:14.763
bunun yürütüldüğünü görüyoruz.

01:15.880 --> 01:19.363
Ve tabii ki burada yeni bir anahtar kelimeyle yeni bir kişi

01:20.760 --> 01:22.910
oluşturabiliriz, bunun gibi.

01:22.910 --> 01:24.030
Ve eğer istersek, yaratılan

01:24.030 --> 01:26.490
bu kişiyi elbette kaydedebiliriz.

01:26.490 --> 01:28.330
Tüm bunları kaydedersek, hatasız

01:28.330 --> 01:29.430
bir şekilde derlenmesi

01:29.430 --> 01:32.090
sürpriz olmayacaktır.

01:32.090 --> 01:33.700
Ve eğer sayfamızı ziyaret edersek,

01:33.700 --> 01:36.670
Localhost: 3000 üzerinde, JavaScript konsolunda,

01:36.670 --> 01:38.900
yapıcıdan gelen kişi nesnesinin oluşturulduğunu

01:38.900 --> 01:41.140
görürüz.

01:41.140 --> 01:44.603
Ve elbette hepimiz burada Kişinin kendisini görüyoruz.

01:45.810 --> 01:49.550
Şimdi, bu örnekte hiçbir dekoratörümüz yok.

01:49.550 --> 01:51.000
Bunu değiştirelim.

01:51.000 --> 01:53.370
Dosyanın en üstüne bir dekoratör ekleyelim.

01:53.370 --> 01:56.060
Ve bir dekoratör, ki bunu anlamak gerçekten önemlidir,

01:56.060 --> 01:58.080
sonuçta sadece bir fonksiyondur.

01:58.080 --> 02:01.280
Bir şeye, örneğin bir sınıfa belirli bir şekilde

02:01.280 --> 02:03.530
uyguladığınız bir işlev.

02:03.530 --> 02:04.750
Şimdi burada function

02:04.750 --> 02:09.523
anahtar sözcüğüyle bir fonksiyon oluşturalım ve adını Logger koyalım.

02:10.390 --> 02:13.290
Şimdi bu bir fonksiyon, buradaki tek özel

02:13.290 --> 02:15.570
şey büyük karakterle başlamam.

02:15.570 --> 02:16.492
Bu arada bu bir zorunluluk

02:16.492 --> 02:20.200
değil, büyük harfle başlayan bir karakter kullanmak zorunda değilsiniz,

02:20.200 --> 02:22.470
küçük harf de kullanabilirsiniz, sadece

02:22.470 --> 02:25.610
kütüphanelerde büyük harfle başlayan karakterler kullanan

02:25.610 --> 02:27.680
pek çok dekoratör görebilirsiniz ve

02:27.680 --> 02:32.200
bu nedenle burada da aynısını yapacağım.

02:32.200 --> 02:35.450
Dolayısıyla, buradaki Logger işlevi bir işlevdir

02:35.450 --> 02:39.330
ve bunu bir dekoratör olarak uygulayabiliriz.

02:39.330 --> 02:42.730
Şimdi buraya bir konsol günlüğü ekleyelim, Logging, böylece bu fonksiyonun

02:42.730 --> 02:44.730
ne zaman çalıştığını görebiliriz.

02:44.730 --> 02:47.300
Çünkü onu doğrudan aramayacağım.

02:47.300 --> 02:50.330
Bunun yerine bu sınıfa bir dekoratör olarak eklemek istiyorum.

02:50.330 --> 02:53.710
Bunu da sınıfın önüne bir @ sembolü ve ardından

02:53.710 --> 02:57.370
fonksiyonumuzu ekleyerek yapıyoruz.

02:57.370 --> 02:58.440
Aynen böyle.

02:58.440 --> 03:00.320
Şimdi burada birkaç özel şey var.

03:00.320 --> 03:03.780
Buradaki @ sembolü, TypeScript'in gördüğü veya tanıdığı

03:03.780 --> 03:06.170
özel bir tanımlayıcıdır.

03:06.170 --> 03:09.110
Ve @ sembolünden hemen sonra gelen şey bir fonksiyonu

03:09.110 --> 03:11.010
işaret etmelidir.

03:11.010 --> 03:13.460
Uygulamak yerine, dekoratörünüz olması

03:13.460 --> 03:15.800
gereken noktayı işaret edin.

03:15.800 --> 03:17.400
Şimdi burada Logger'ın burada bir dekoratör

03:17.400 --> 03:20.650
olarak kullanılmak için çok az argüman kabul ettiğini görüyorsunuz.

03:20.650 --> 03:23.010
İşin iyi tarafı, TypeScript burada bir dekoratör

03:23.010 --> 03:24.930
olarak kullanmak istediğimi anlıyor.

03:24.930 --> 03:27.980
Kötü olan şey, yeterince argüman iletmememiz.

03:27.980 --> 03:31.000
Ve gerçekten de dekoratörler argüman alırlar.

03:31.000 --> 03:34.870
Kaç argüman olacağı dekoratörü nerede kullandığınıza bağlıdır.

03:34.870 --> 03:39.710
Burada, bir sınıfa eklediğimiz dekoratör için bir argüman alırız.

03:39.710 --> 03:42.910
Bu dekoratörün hedefi, deyim yerindeyse,

03:42.910 --> 03:46.160
kurucu fonksiyonumuzdur.

03:46.160 --> 03:49.020
Dolayısıyla, sonunda argüman olarak burada bir fonksiyon

03:49.020 --> 03:51.240
elde ettiğimizi söyleyebiliriz.

03:51.240 --> 03:54.110
Buna yapıcı da diyebiliriz, çünkü sonuçta

03:54.110 --> 03:56.650
bu sınıfın ya da bu dekoratörü hangi sınıfa

03:56.650 --> 03:59.550
eklersek o sınıfın yapıcı fonksiyonunu argüman

03:59.550 --> 04:01.470
olarak alacağız.

04:01.470 --> 04:06.310
Ayrıca teselli edelim. Bunu günlüğe kaydedin, böylece buradaki

04:06.310 --> 04:09.650
kurucu argümanı hakkında biraz fikir edinebiliriz.

04:09.650 --> 04:10.550
Ve bunu saklayalım.

04:10.550 --> 04:12.750
Ve gördüğünüz gibi hatasız derleniyor.

04:12.750 --> 04:14.750
Ve şimdi çıktımıza bakarsak, önceki eski

04:14.750 --> 04:16.580
kodu görürüz, ancak aynı zamanda Günlük

04:16.580 --> 04:18.590
çıktısını ve bu kurucu işlevin günlüğe

04:18.590 --> 04:20.810
kaydedildiğini de görürüz.

04:20.810 --> 04:22.760
Aslında burada sınıfın tamamını görüyoruz,

04:22.760 --> 04:24.520
ancak sonuçta sınıflar sadece yapıcı

04:24.520 --> 04:27.670
fonksiyonlar üzerinde bazı taktiksel şekerlemelerdir.

04:27.670 --> 04:31.450
Ayrıca, dekoratör çıktımız olan Logging'in ve bu sınıfın

04:31.450 --> 04:35.030
ya da bu yapıcı fonksiyonun logunun, Person nesnesi

04:35.030 --> 04:39.460
oluşturmayı ve Person nesnemizi görmeden önce yazdırıldığına

04:39.460 --> 04:41.540
dikkat edin.

04:41.540 --> 04:44.360
Çünkü aslında dekoratörler ve bu gerçekten önemlidir,

04:44.360 --> 04:48.430
dekoratörler sınıfınız tanımlandığında çalışır.

04:48.430 --> 04:50.530
Örneklendiğinde değil.

04:50.530 --> 04:53.020
Sınıfınızı örneklemenize hiç gerek yoktur.

04:53.020 --> 04:55.760
Sınıfı örneklemek için bu kodu kaldırabiliriz

04:55.760 --> 04:58.780
ve yine de bu dekoratör çıktısını alırız.

04:58.780 --> 05:02.210
Yani JavaScript sınıf tanımınızı, kurucu işlev

05:02.210 --> 05:05.660
tanımınızı bulduğunda dekoratör çalışır.

05:05.660 --> 05:08.580
Bir nesneyi örneklemek için o kurucu işlevi kullandığınızda

05:08.580 --> 05:10.070
değil.

05:10.070 --> 05:13.280
Bunu anlamak gerçekten çok önemli.

05:13.280 --> 05:15.170
Bu bizim ilk dekoratörümüz.

05:15.170 --> 05:16.670
Yine de bir dekoratör oluşturmanın

05:16.670 --> 05:19.063
tek yolu bu değildir.
