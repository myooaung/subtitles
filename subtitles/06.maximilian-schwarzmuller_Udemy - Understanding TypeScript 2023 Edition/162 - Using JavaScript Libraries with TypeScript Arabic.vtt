WEBVTT

00:02.120 --> 00:05.910
-: الآن سنبدأ بمكتبة أدوات مساعدة مشهورة جدًا

00:05.910 --> 00:06.770
، Lodash.

00:06.770 --> 00:09.840
الآن ما ستتعلمه هنا يعمل بشكل أساسي كمثال

00:09.840 --> 00:13.250
على أي مكتبة جافا سكريبت تريد استخدامها.

00:13.250 --> 00:17.430
لا يهم إذا كان هذا هو Lodash أو jQuery أو أي شيء آخر.

00:17.430 --> 00:19.510
الآن ملاحظة جانبية صغيرة في هذه

00:19.510 --> 00:21.640
المرحلة ، إذا كنت مهتمًا بكيفية

00:21.640 --> 00:24.150
العمل مع React و TypeScript أو دعنا نقول

00:24.150 --> 00:26.718
Node. شبيبة. و Express و TypeScript

00:26.718 --> 00:31.350
، لقد خصصت وحدات نمطية لذلك لاحقًا في الدورة التدريبية ، لأنك ستتعلم

00:31.350 --> 00:33.760
أكثر قليلاً من مجرد إضافتها باستخدام

00:33.760 --> 00:35.730
TypeScript.

00:35.730 --> 00:40.470
ولكن بالنسبة للمكتبات الأبسط ، مثل Lodash ، مثل jQuery

00:40.470 --> 00:43.010
وإليك طريقة تعمل.

00:43.010 --> 00:45.340
لذلك نريد استخدام Lodash في مشروعنا.

00:45.340 --> 00:48.460
Lodash بالطبع هي مكتبة JavaScript.

00:48.460 --> 00:50.800
لا نحتاج إلى TypeScript لاستخدامه

00:50.800 --> 00:53.480
، يمكننا استخدامه في أي مشروع JavaScript

00:53.480 --> 00:56.770
ويمكننا تثبيته كما تتعلم هنا بشكل أساسي هنا في

00:56.770 --> 00:59.200
مستندات Lodash الرسمية.

00:59.200 --> 01:01.400
إذا كنت تستخدم npm ، وهو ما نقوم به

01:01.400 --> 01:05.390
الآن ، فيمكنك تشغيل تثبيت npm i أو npm ، وهذا مجرد نموذج قصير ،

01:05.390 --> 01:06.477
"حفظ / لوداش".

01:07.750 --> 01:10.820
إذن هنا في هذا المثال المشروع الذي يستخدم webpack

01:10.820 --> 01:12.640
بدون سير عمل إنتاجي من خلال سير

01:12.640 --> 01:14.180
عمل تطوير فقط.

01:14.180 --> 01:16.570
هناك يمكننا إضافة هذه المكتبة عن طريق تشغيل

01:16.570 --> 01:18.607
nmp install dash dash وحفظ Lodash.

01:18.607 --> 01:21.700
وسيقوم هذا الآن بتثبيته في هذا المشروع وبفضل إعداد

01:21.700 --> 01:23.500
حزمة الويب الخاصة بنا ، يمكننا

01:23.500 --> 01:26.250
فقط استيراده إلى ملفات الأكواد الخاصة بنا والاستفادة

01:26.250 --> 01:27.517
منه هناك.

01:27.517 --> 01:30.670
وسيكون هذا هو نفسه في أي مشروع JavaScript

01:30.670 --> 01:32.250
يعمل بنظام webpack.

01:32.250 --> 01:34.990
إذا كنت لا تستخدم حزمة الويب ، فبالطبع

01:34.990 --> 01:37.720
يمكنك أيضًا استخدام CDN وما إلى ذلك.

01:37.720 --> 01:40.630
ومع ذلك ، فإن ما سأعرضه لك في الخطوات التالية

01:40.630 --> 01:42.390
بعد قليل في هذه الوحدة ، سيعمل

01:42.390 --> 01:45.130
فقط في إعداد حزمة الويب.

01:45.130 --> 01:47.730
هنا لدينا إعداد webpack ، قمنا الآن بتثبيت Lodash

01:47.730 --> 01:49.320
، والآن إذا أردنا استخدامه

01:49.320 --> 01:51.510
، يمكننا ببساطة استيراده هنا.

01:51.510 --> 01:55.600
يمكننا الاستيراد ، دعنا نقول شرطة سفلية من "Lodash".

01:55.600 --> 01:57.960
هذا هو بناء الجملة الذي يجب أن يكون

01:57.960 --> 01:59.960
متاحًا مع تثبيت Lodash.

01:59.960 --> 02:03.057
ومع ذلك ، هذا الآن يعطينا خطأ بالفعل.

02:03.057 --> 02:06.850
"تعذر العثور على ملف إعلان للوحدة النمطية Lodash".

02:06.850 --> 02:09.890
وسنواجه مشكلة أخرى ، إذا كنت تريد استخدام Lodash

02:09.890 --> 02:12.230
على سبيل المثال لتبديل المصفوفة عشوائيًا

02:12.230 --> 02:16.810
، فيمكننا أيضًا التحكم في تسجيل شرطة سفلية عشوائيًا ثم تمرير مصفوفة

02:16.810 --> 02:20.430
بسيطة إلى هذا الأسلوب العشوائي.

02:20.430 --> 02:23.110
طريقة المراوغة هي طريقة يدعمها Lodash.

02:23.110 --> 02:25.790
يمكننا معرفة ذلك في الوثائق الرسمية

02:25.790 --> 02:26.820
لوداش.

02:26.820 --> 02:29.056
هناك ، إذا بحثت عن "خلط ورق اللعب" ، فستتعلم

02:29.056 --> 02:32.370
أنه يمكنك تبديل المصفوفة عشوائيًا بهذه الطريقة.

02:32.370 --> 02:37.010
لذا ، يجب أن يعمل نوعًا ما ، لكنه في الحقيقة لا يعمل بهذه

02:37.010 --> 02:39.480
الطريقة ، كما يمكنك أن تقول.

02:39.480 --> 02:43.058
إذا بدأت الآن خادم webpack الخاص بي هنا

02:43.058 --> 02:45.890
، فسنرى أن CDN تعطينا خطأ.

02:45.890 --> 02:47.077
ومرة أخرى يخبرنا

02:47.077 --> 02:50.940
أنه "لا يمكنه العثور على ملف إعلان للوحدة لوداش".

02:50.940 --> 02:54.720
لذلك ، هذا لا يعمل حقًا بالطريقة التي يجب أن يعمل بها.

02:54.720 --> 02:57.610
المشكلة الآن هي أن Lodash هي مكتبة

02:57.610 --> 02:59.930
JavaScript بسيطة.

02:59.930 --> 03:02.250
تم تصميمه باستخدام JavaScript الفانيليا

03:02.250 --> 03:05.150
، وهو مصمم لجافا سكريبت الفانيليا.

03:05.150 --> 03:08.530
يمكننا التحقق من ذلك إذا ذهبنا إلى وحدات العقدة ، حيث

03:08.530 --> 03:10.280
لدينا الكثير من التبعيات ،

03:10.280 --> 03:12.450
لأن لدينا الكثير من التبعيات لـ webpack

03:12.450 --> 03:14.220
وتبعياتها هناك.

03:14.220 --> 03:17.010
لكن هنا ، إذا بحثنا عن لودش

03:17.010 --> 03:17.930
، ها هو.

03:17.930 --> 03:21.330
ونحن نتوسع كما نرى أن هناك مجموعة من ملفات JavaScript

03:21.330 --> 03:22.750
هناك ، أليس كذلك؟

03:22.750 --> 03:26.380
وهذا موجود في كل كود مصدر لوداش.

03:26.380 --> 03:30.010
حفنة من كود JavaScript ولكن بالتأكيد لا يوجد كود TypeScript.

03:30.010 --> 03:31.750
الآن ما هي المشكلة في ذلك؟

03:31.750 --> 03:35.550
المشكلة هي أن TypeScript لا يفهم ما هو موجود

03:35.550 --> 03:37.070
في هذه الحزمة.

03:37.070 --> 03:41.020
إنه لا يفهم الطرق التي يصدر بها لوداش.

03:41.020 --> 03:43.480
الآن سترى أنه يعمل بالفعل إذا ذهبنا إلى

03:43.480 --> 03:45.500
tsconfig. json.

03:45.500 --> 03:48.740
ونتأكد من أننا نصدر مخرجات عند حدوث خطأ.

03:48.740 --> 03:52.650
لذلك إذا قمنا بتبديل "noEmitOnError" إلى "false"

03:52.650 --> 03:55.770
حتى نصدر مخرجات جديدة إذا حدث خطأ ما.

03:55.770 --> 03:57.600
في الوقت الحالي ، ابدأ هذا مرة

03:57.600 --> 04:00.230
أخرى ، في النهاية سيعطينا نفس الخطأ ، لذلك

04:00.230 --> 04:02.160
سنستمر في رؤية ذلك.

04:02.160 --> 04:05.090
ولكن إذا أعدت تحميل هذه الصفحة هنا ، فستحصل

04:05.090 --> 04:07.120
بالفعل على ناتج هنا.

04:07.120 --> 04:08.922
يمكنك تجاهل الخطأ في الأسفل

04:08.922 --> 04:12.580
هنا ، سترى ناتجًا وهو المصفوفة التي تم خلطها.

04:12.580 --> 04:14.920
كما ترى ، يبدو مختلفًا في كل مرة أقوم بإعادة التحميل.

04:14.920 --> 04:16.530
وهذا ممتع للغاية.

04:16.530 --> 04:19.770
إنه يثبت أن Lodash يعمل ، ويثبت أن هذا

04:19.770 --> 04:21.280
الرمز صحيح.

04:21.280 --> 04:24.170
لكن لسوء الحظ ، لا يفهمه TypeScript ، ولا

04:24.170 --> 04:28.400
يمكنه ذلك لأن Lodash يستخدم JavaScript وليس TypeScript.

04:28.400 --> 04:31.220
المشكلة الآن أنه لا يوجد TypeScript هو إصدار

04:31.220 --> 04:34.080
Lodash ، لذلك علينا أن نتعايش مع ذلك.

04:34.080 --> 04:37.220
وهذا سيناريو ستواجهه قليلاً.

04:37.220 --> 04:39.365
تريد استخدام مكتبة معينة تابعة لجهة

04:39.365 --> 04:42.270
خارجية ، وهي مصممة فقط لجافا سكريبت ، ومن ثم تحصل

04:42.270 --> 04:44.210
على أخطاء من هذا القبيل.

04:44.210 --> 04:46.060
هذا أمر مزعج لأنه من الناحية النظرية

04:46.060 --> 04:47.430
، يمكننا بالطبع استخدامه.

04:47.430 --> 04:49.630
TypeScript يبني على JavaScript.

04:49.630 --> 04:53.160
يمكننا استخدام أي مكتبة JavaScript في مشروع TypeScript

04:53.160 --> 04:56.150
، علينا فقط ترجمتها إلى TypeScript.

04:56.150 --> 04:58.890
وهذا لحسن الحظ ممكن.

04:58.890 --> 05:02.564
لذا اسمحوا لي أن أشغل هذا الإعداد هنا ، "noEmitOnError

05:02.564 --> 05:04.220
true".

05:04.220 --> 05:07.200
دعني أوضح لك كيف يمكننا إخبار TypeScript

05:07.200 --> 05:10.053
عن Lodash وما تقدمه.

05:11.140 --> 05:13.662
يمكنك تثبيت ما يسمى أنواع

05:13.662 --> 05:16.250
مكتبة الطرف الثالث.

05:16.250 --> 05:20.050
إذا كنت تبحث عن أنواع Lodash ، فستجد

05:20.050 --> 05:24.140
حزمة npm تسمى هنا "@ types / Lodash".

05:24.140 --> 05:26.440
هناك أيضًا ترى أمر التثبيت ، والذي

05:26.440 --> 05:28.120
سيتم تشغيله في ثانية.

05:28.120 --> 05:30.580
ولكن إذا انتقلت إلى التفاصيل ، فستجد أيضًا

05:30.580 --> 05:32.220
رابطًا إلى مستودع جيثب.

05:32.220 --> 05:36.320
إنه يرتبط بـ DefinitelyTyped ، وهو مستودع ضخم به الكثير

05:36.320 --> 05:39.260
من الترجمات لجميع أنواع مكتبات الطرف

05:39.260 --> 05:40.820
الثالث.

05:40.820 --> 05:43.120
نحن هنا في مجلد Lodash.

05:43.120 --> 05:46.590
وهناك تجد ما يسمى. dts.

05:46.590 --> 05:50.180
لذلك ليس فقط. ts لكن. دتس.

05:50.180 --> 05:53.460
هذه تسمى ملفات التصريح مما يعني أنها لا تحتوي

05:53.460 --> 05:55.760
على أي منطق حقيقي ، ولكن إذا ألقينا

05:55.760 --> 05:58.750
نظرة على الخلط. dts ، فهي تحتوي

05:58.750 --> 06:01.848
على تعليمات لـ TypeScript.

06:01.848 --> 06:05.200
إنهم يخبرون TypeScript أساسًا عن كيفية

06:05.200 --> 06:08.720
عمل شيء ما وما هو مدرج في هذه الحزمة.

06:08.720 --> 06:10.700
ويمكنك استكشاف ملفات مختلفة هنا

06:10.700 --> 06:14.280
كلها في مجلدات فرعية مختلفة ، لمعرفة المزيد عن ذلك.

06:14.280 --> 06:17.717
لذلك في النهاية ، توفر هذه الملفات ببساطة

06:17.717 --> 06:21.750
ترجمة من JavaScript عادي إلى TypeScript.

06:21.750 --> 06:23.860
لا تحتوي على أي منطق يعمل ، لكنها

06:23.860 --> 06:26.950
تحدد الأنواع التي تعمل معها هذه المكتبة.

06:26.950 --> 06:30.010
إنهم يحددون الأنواع التي تستخدمها ، والأنواع التي

06:30.010 --> 06:32.490
تعود إليك عند استدعاء طريقة ، وما إلى ذلك.

06:32.490 --> 06:35.410
يمكنك أيضا أن تكتب مثل. dts بنفسك ، وتوفر الأنواع

06:35.410 --> 06:38.510
الرسمية من المستندات دليلاً حول ذلك إذا كان

06:38.510 --> 06:40.470
هذا هو ما تهتم به.

06:40.470 --> 06:42.110
لكن بالنسبة لأنواع المشاريع الخاصة

06:42.110 --> 06:43.160
بك ، لا يتعين عليك القيام

06:43.160 --> 06:45.820
بذلك ، لأنه إذا كنت تكتب أكواد TypeScript ، فإن TypeScript

06:45.820 --> 06:48.110
بالطبع يفهم ذلك.

06:48.110 --> 06:50.310
ولكن إذا كنت تعمل مع مكتبة تابعة

06:50.310 --> 06:53.840
لجهة خارجية مكتوبة بلغة JavaScript بدون أي كود TypeScript

06:53.840 --> 06:56.860
، أو بدونها. dts ، التي تشحنها بعض

06:56.860 --> 06:59.950
مكتبات الطرف الثالث بالمناسبة ، حتى لو كانت

06:59.950 --> 07:02.240
مكتوبة بلغة JavaScript ، فإن Lodash

07:02.240 --> 07:03.960
لا تفعل ذلك.

07:03.960 --> 07:06.890
لذلك إذا كنت تعمل مع مكتبة لا تحتوي

07:06.890 --> 07:08.330
على ملفات ترجمة

07:08.330 --> 07:11.180
مضمنة ، ولم يتم كتابتها أصلاً في

07:11.180 --> 07:15.760
TypeScript ، فإن استخدام مثل هذه الحزم هو الحل.

07:15.760 --> 07:20.760
لذلك نقوم هنا بتشغيل "npm install --save @ types / Lodash".

07:21.860 --> 07:24.600
يمكنك أيضًا تشغيل "save-dev" ، لأن dev

07:24.600 --> 07:27.920
تبعية مطلوبة حقًا فقط أثناء التطوير ، لأنه بعد

07:27.920 --> 07:29.230
ذلك يتم الامتثال للشفرة

07:29.230 --> 07:30.980
من خلال JavaScript على أي

07:30.980 --> 07:32.360
حال.

07:32.360 --> 07:36.130
وهذا الآن يثبت هذه الترجمة من TypeScript

07:36.130 --> 07:38.060
لفهمها.

07:38.060 --> 07:40.630
وترى ، بمجرد تثبيت هذا

07:40.630 --> 07:42.510
، ذهب هذا الخطأ.

07:42.510 --> 07:46.220
وإذا قمت الآن بإعادة بدء تشغيل npm ، فسترى أن الخطأ

07:46.220 --> 07:48.270
لن يعود هنا أيضًا.

07:48.270 --> 07:51.640
لذلك ترى الآن أن هذا يعمل دون أي أخطاء

07:51.640 --> 07:55.190
، سواء في التجميع أو في المتصفح.

07:55.190 --> 07:57.270
من الناحية الفنية ، نجحت أيضًا من

07:57.270 --> 07:59.160
قبل ، ولكن الآن مع الترجمة ، يمكننا

07:59.160 --> 08:01.580
أيضًا استخدام TypeScript.

08:01.580 --> 08:04.660
وعلى سبيل المثال ، نحصل الآن أيضًا على كل الإكمال

08:04.660 --> 08:05.493
هنا ، في IDE.

08:05.493 --> 08:10.070
إذا قمت بكتابة نقطة هنا ، فإني أرى طرق Lodash التي يمكنني استخدامها.

08:10.070 --> 08:13.930
لذلك ، يعد هذا معلومة مهمة للغاية ، وهو شيء يجب

08:13.930 --> 08:16.400
أن تكون على دراية به بالتأكيد

08:16.400 --> 08:19.370
، والذي يسمح لك باستخدام مكتبات JavaScript

08:19.370 --> 08:21.177
عادية وعادية ، في مشروع

08:21.177 --> 08:24.220
TypeScript ، وما زلت تحصل على دعم رائع

08:24.220 --> 08:28.490
وإكمال تلقائي رائع وتجنب أخطاء.

08:28.490 --> 08:33.030
بمساعدة حزم أنواع النقل هذه ، يمكنك

08:33.030 --> 08:33.990
القول.

08:33.990 --> 08:38.990
وهذه الحزم ، التي يُطلق عليها دائمًا "types" ، ثم اسم

08:39.290 --> 08:40.860
الحزمة ، توجد أساسًا

08:40.860 --> 08:45.270
لأي مكتبة طرف ثالث شائعة يمكنك العثور عليها

08:45.270 --> 08:46.730
هناك.

08:46.730 --> 08:49.960
يمكنك دائمًا البحث عن اسم مكتبة ، ثم أنواع على

08:49.960 --> 08:51.690
سبيل المثال أنواع jQuery

08:51.690 --> 08:54.400
، ويجب أن تجد مثل هذا الإدخال.

08:54.400 --> 08:57.350
هذه هي الطريقة التي يمكنك بها العمل مع الأنواع في

08:57.350 --> 08:59.373
مكتبات JavaScript الفانيليا.
