WEBVTT

1
00:00:02.300 --> 00:00:03.420
<v Tutor>To get started,</v>

2
00:00:03.420 --> 00:00:07.060
here I'll run npm start to bring up that development server.

3
00:00:07.060 --> 00:00:09.384
Which serves the HTML file and the menu tab,

4
00:00:09.384 --> 00:00:13.434
tsc-w to start types of compilation in watch mode

5
00:00:13.434 --> 00:00:17.988
so that our app JavaScript file is continuosly rebuilt

6
00:00:17.988 --> 00:00:21.740
and we can view it in the running application.

7
00:00:21.740 --> 00:00:24.480
Right now, of course our application doesn't look too fancy.

8
00:00:24.480 --> 00:00:26.340
It's an empty page.

9
00:00:26.340 --> 00:00:27.850
So to get started,

10
00:00:27.850 --> 00:00:30.250
there are many ways of doing that.

11
00:00:30.250 --> 00:00:35.040
Now, I wanna start with making this form visible.

12
00:00:35.040 --> 00:00:36.660
And now, there are many ways,

13
00:00:36.660 --> 00:00:38.790
I will actually write this application in

14
00:00:38.790 --> 00:00:40.208
an object oriented approach.

15
00:00:40.208 --> 00:00:43.303
Which is 100% optional but since

16
00:00:43.303 --> 00:00:46.080
we learned about classes and so on,

17
00:00:46.080 --> 00:00:48.083
I wanna actually show how this works

18
00:00:48.083 --> 00:00:51.140
and therefore I will use this approach.

19
00:00:51.140 --> 00:00:51.973
So in the app key,

20
00:00:51.973 --> 00:00:55.510
I'll add a new class and I'll name it Project Input

21
00:00:55.510 --> 00:00:59.120
though the class name of course is entirely up to you.

22
00:00:59.120 --> 00:01:00.570
Now in this class,

23
00:01:00.570 --> 00:01:04.590
our goal has to be, to get access to this template

24
00:01:04.590 --> 00:01:08.220
and to the form in it and to get access to this div here,

25
00:01:08.220 --> 00:01:11.710
and then render our template in that div in the end.

26
00:01:11.710 --> 00:01:15.160
So the content of the template, the form in that div.

27
00:01:15.160 --> 00:01:17.130
That has to be our goal.

28
00:01:17.130 --> 00:01:18.850
Now to achieve this,

29
00:01:18.850 --> 00:01:20.588
here in Project Input,

30
00:01:20.588 --> 00:01:23.450
I'll add a constructor where I in the end

31
00:01:23.450 --> 00:01:25.920
wanna get access to my template and

32
00:01:25.920 --> 00:01:27.970
to the place where it should be rendered.

33
00:01:28.830 --> 00:01:33.310
And for this here, I'll add two properties on the fly

34
00:01:33.310 --> 00:01:37.460
with this, the template element property

35
00:01:37.460 --> 00:01:40.180
and then also the host element property.

36
00:01:40.180 --> 00:01:42.420
The names are 100% up to you.

37
00:01:42.420 --> 00:01:44.990
In the end my idea's that host element,

38
00:01:44.990 --> 00:01:46.970
holds a reference to the element

39
00:01:46.970 --> 00:01:49.650
where I wanna render my template content in the end

40
00:01:49.650 --> 00:01:51.427
and well, template element gives me access to

41
00:01:51.427 --> 00:01:54.050
the template that holds this content.

42
00:01:54.050 --> 00:01:56.120
Now to get access to that template,

43
00:01:56.120 --> 00:01:59.690
let's have a look at index html and see how we can identify

44
00:01:59.690 --> 00:02:01.870
the template which holds the form.

45
00:02:01.870 --> 00:02:04.050
Well it has this project-input ID,

46
00:02:04.050 --> 00:02:06.120
so that looks like a good strategy.

47
00:02:06.120 --> 00:02:08.510
So here we can use document

48
00:02:08.510 --> 00:02:11.022
getElementById project-input.

49
00:02:11.022 --> 00:02:15.410
This gives us access to this template element.

50
00:02:15.410 --> 00:02:17.820
Now, a couple of important things.

51
00:02:17.820 --> 00:02:21.320
Here we get an error that template element is a property

52
00:02:21.320 --> 00:02:23.900
which does not exist on project-input.

53
00:02:23.900 --> 00:02:28.140
Now to get rid of this, we actually should add it

54
00:02:28.140 --> 00:02:31.610
as a new field here directly in the class.

55
00:02:31.610 --> 00:02:34.050
Then we can safely assign to it.

56
00:02:34.050 --> 00:02:36.040
Now here, I also wanna be clear about the type

57
00:02:36.040 --> 00:02:37.450
which would be stored in there.

58
00:02:37.450 --> 00:02:41.070
And that will be a HTML template element.

59
00:02:41.070 --> 00:02:43.270
This type is globally available

60
00:02:43.270 --> 00:02:47.380
because in the tsconfig js file, I added the DOM as a lib

61
00:02:47.380 --> 00:02:50.360
and that adds all these DOM types,

62
00:02:50.360 --> 00:02:53.777
all these HTML element types as typescript types

63
00:02:53.777 --> 00:02:55.493
to the entire project.

64
00:02:57.280 --> 00:03:00.400
Now this infuses a new error here however,

65
00:03:00.400 --> 00:03:03.110
you see that in the end this could be null

66
00:03:03.110 --> 00:03:04.760
when we get the element by ID,

67
00:03:04.760 --> 00:03:08.510
of course we know that it won't fail but typescript

68
00:03:08.510 --> 00:03:09.850
has no chance of knowing this

69
00:03:09.850 --> 00:03:12.757
because it's not going to analyze our html file.

70
00:03:12.757 --> 00:03:16.210
So maybe no element with this ID exists

71
00:03:16.210 --> 00:03:18.210
and therefore this would yield null.

72
00:03:18.210 --> 00:03:20.680
Now here, we say we don't store null in there,

73
00:03:20.680 --> 00:03:23.920
we just store HTML template element.

74
00:03:23.920 --> 00:03:25.800
So, to eliminate this danger,

75
00:03:25.800 --> 00:03:29.470
we have to tell typescript, that this will never be null.

76
00:03:29.470 --> 00:03:31.290
And you know how you can do this?

77
00:03:31.290 --> 00:03:33.580
You can add an exclamation mark here.

78
00:03:33.580 --> 00:03:35.020
An alternative of course,

79
00:03:35.020 --> 00:03:36.170
just to also show this,

80
00:03:36.170 --> 00:03:37.820
if you would not be sure,

81
00:03:37.820 --> 00:03:41.640
is to store it as let's say in a constant

82
00:03:41.640 --> 00:03:46.640
and then check if template element is truthy,

83
00:03:46.900 --> 00:03:48.600
so if it's not null

84
00:03:48.600 --> 00:03:51.490
and then store it inside of that if check here.

85
00:03:51.490 --> 00:03:52.720
Now, we're still getting an error

86
00:03:52.720 --> 00:03:54.190
but that will be a different error,

87
00:03:54.190 --> 00:03:55.840
which I'll come back to later.

88
00:03:55.840 --> 00:03:58.060
For now this would do the trick

89
00:03:58.060 --> 00:03:59.650
if we're not sure.

90
00:03:59.650 --> 00:04:01.930
Now here, however, I am sure.

91
00:04:01.930 --> 00:04:02.763
And by the way,

92
00:04:02.763 --> 00:04:03.596
if you're not sure,

93
00:04:03.596 --> 00:04:06.000
you should provide a fallback in the else case of course.

94
00:04:06.000 --> 00:04:08.530
But here I am sure that we'll get such element

95
00:04:08.530 --> 00:04:10.544
and therefore we can simply add

96
00:04:10.544 --> 00:04:11.803
an exclamation mark thereafter to tell typescript,

97
00:04:11.803 --> 00:04:13.710
"All good.

98
00:04:13.710 --> 00:04:17.300
We will get access to an element with that ID."

99
00:04:17.300 --> 00:04:18.133
Now as I mentioned,

100
00:04:18.133 --> 00:04:20.220
we still have another error though.

101
00:04:20.220 --> 00:04:24.270
Property content is missing in type HTML element.

102
00:04:24.270 --> 00:04:27.140
The problem here is that we're telling typescript

103
00:04:27.140 --> 00:04:29.550
that we're going to store a template element which is

104
00:04:29.550 --> 00:04:32.160
of type html template element.

105
00:04:32.160 --> 00:04:34.800
And indeed that will be the case.

106
00:04:34.800 --> 00:04:38.730
Now of course, getElementById doesn't know

107
00:04:38.730 --> 00:04:41.130
which element it will return eventually.

108
00:04:41.130 --> 00:04:43.920
It just knows it would be some html element

109
00:04:43.920 --> 00:04:46.600
but not which specialized version of it.

110
00:04:46.600 --> 00:04:48.720
If its a div, a paragraph, a button

111
00:04:48.720 --> 00:04:51.387
or like in this case a template element.

112
00:04:51.387 --> 00:04:54.590
getElementById has no chance of knowing that.

113
00:04:54.590 --> 00:04:57.460
So in order to tell typescript about the type

114
00:04:57.460 --> 00:05:00.660
which we of course also know with certainty.

115
00:05:00.660 --> 00:05:02.260
We can use type casting.

116
00:05:02.260 --> 00:05:03.730
You learned about this as well.

117
00:05:03.730 --> 00:05:05.950
There are two syntaxes you can use.

118
00:05:05.950 --> 00:05:07.690
The angle brackets at the beginning

119
00:05:07.690 --> 00:05:10.130
and then the type you wanna cast this to

120
00:05:10.130 --> 00:05:11.847
with that you're telling typeScript,

121
00:05:11.847 --> 00:05:12.700
"Hey!

122
00:05:12.700 --> 00:05:15.840
The thing, the expression coming after this here,

123
00:05:15.840 --> 00:05:17.650
this will be of that type."

124
00:05:17.650 --> 00:05:21.200
or alternatively, you add as HTML template element

125
00:05:21.200 --> 00:05:23.040
which is the approach I would use.

126
00:05:23.040 --> 00:05:25.700
And with that, you guarantee to typescript

127
00:05:25.700 --> 00:05:27.950
that what you fetch here will not be null

128
00:05:30.027 --> 00:05:30.860
and will be of this type.

129
00:05:30.860 --> 00:05:32.016
A lot of talking about selecting this

130
00:05:32.016 --> 00:05:33.630
but it is a common task

131
00:05:33.630 --> 00:05:35.563
and it is important to get this right.

132
00:05:36.890 --> 00:05:39.360
Now lets continue with the host element.

133
00:05:39.360 --> 00:05:43.350
Here, we should also add host element as a field

134
00:05:43.350 --> 00:05:45.960
and we know that the host element,

135
00:05:45.960 --> 00:05:48.560
when we actually wanna render our project-input

136
00:05:48.560 --> 00:05:51.410
will in the end be this div here.

137
00:05:51.410 --> 00:05:54.000
That's where I wanna render my form.

138
00:05:54.000 --> 00:05:57.730
So, here we can say HTML div element.

139
00:05:57.730 --> 00:06:00.260
That's the type of element we're going to add this to.

140
00:06:00.260 --> 00:06:02.740
We could also be a bit less specific

141
00:06:02.740 --> 00:06:04.970
and just say HTML element,

142
00:06:04.970 --> 00:06:08.400
because here I really don't care whether its a div or not.

143
00:06:08.400 --> 00:06:10.250
But since we know it with certainty,

144
00:06:10.250 --> 00:06:11.263
why not add it?

145
00:06:12.110 --> 00:06:14.850
Now, I wanna get access to that div of course

146
00:06:14.850 --> 00:06:16.530
where this should be added

147
00:06:16.530 --> 00:06:18.970
and if we have a look at the index.html file,

148
00:06:18.970 --> 00:06:19.945
we see we can identify this div by the ID again.

149
00:06:19.945 --> 00:06:24.640
The app ID in this case.

150
00:06:24.640 --> 00:06:28.780
So now, back in app ts, we can use document getElementById

151
00:06:28.780 --> 00:06:32.920
one more time and reach out to the element with the id app.

152
00:06:32.920 --> 00:06:35.112
Now, we have the same problems as before,

153
00:06:35.112 --> 00:06:39.620
this can be null, so we have to add the exclamation mark

154
00:06:39.620 --> 00:06:42.283
because again, we know with certainty that it won't,

155
00:06:43.430 --> 00:06:46.030
and getElementById does not know that

156
00:06:46.030 --> 00:06:48.150
this will be a HTML div element so,

157
00:06:48.150 --> 00:06:51.210
we should cast this here as well.

158
00:06:51.210 --> 00:06:53.990
And with that we can now find how we get access

159
00:06:53.990 --> 00:06:56.070
to all the elements we need to.

160
00:06:56.070 --> 00:06:59.140
Well, that was a lot of talking about that.

161
00:06:59.140 --> 00:07:01.970
With that unfortunately we haven't achieved much.

162
00:07:01.970 --> 00:07:03.940
We have access to these elements

163
00:07:03.940 --> 00:07:05.790
but we are not rendering anything there.

164
00:07:05.790 --> 00:07:08.020
So let's continue with that.

165
00:07:08.020 --> 00:07:10.620
For that, we need to import the content

166
00:07:10.620 --> 00:07:11.760
off this template element,

167
00:07:11.760 --> 00:07:15.520
so basically import what's inside the template tags

168
00:07:15.520 --> 00:07:17.603
and render this to the DOM.

169
00:07:18.510 --> 00:07:20.270
We can do this right here in the constructor

170
00:07:20.270 --> 00:07:21.870
because my idea and of course,

171
00:07:21.870 --> 00:07:22.940
that's just my idea,

172
00:07:22.940 --> 00:07:24.550
you could set this up differently.

173
00:07:24.550 --> 00:07:26.430
But my idea is that when we create

174
00:07:26.430 --> 00:07:28.250
a new instance of this class,

175
00:07:28.250 --> 00:07:30.190
I immediately wanna render a form

176
00:07:30.190 --> 00:07:31.770
that belongs to this instance.

177
00:07:31.770 --> 00:07:34.420
So we'll do it right in the constructor.

178
00:07:34.420 --> 00:07:37.430
There we can get our imported node

179
00:07:37.430 --> 00:07:40.627
or imported HTML content or however you wanna name it,

180
00:07:40.627 --> 00:07:44.917
which we can get with document importNode

181
00:07:45.860 --> 00:07:49.260
and that is a method provided on the global document object

182
00:07:49.260 --> 00:07:52.650
and to importNode you pass a pointer

183
00:07:52.650 --> 00:07:54.410
at your template element.

184
00:07:54.410 --> 00:07:57.010
So this template element in the end,

185
00:07:57.010 --> 00:08:00.891
or to be precise not the element but dot content there.

186
00:08:00.891 --> 00:08:05.320
Content is a property that exists on HTML template elements

187
00:08:05.320 --> 00:08:07.480
and it simply gives a reference

188
00:08:07.480 --> 00:08:09.520
to the content of a template.

189
00:08:09.520 --> 00:08:13.306
So to the HTML code between the template text.

190
00:08:13.306 --> 00:08:15.670
ImportNode also takes a second argument

191
00:08:15.670 --> 00:08:17.940
which defines whether it should import this

192
00:08:17.940 --> 00:08:19.630
with a deep clone or not.

193
00:08:19.630 --> 00:08:22.570
So all levels of nesting inside of the template

194
00:08:22.570 --> 00:08:26.340
and I definitely wanna do that so I will provide true here.

195
00:08:26.340 --> 00:08:28.830
Now, we have the importedNode and as you'll see,

196
00:08:28.830 --> 00:08:30.770
this is of type document fragment

197
00:08:30.770 --> 00:08:34.910
which typescript assumed or inferred automatically.

198
00:08:34.910 --> 00:08:36.960
Now we can use that importedNode,

199
00:08:36.960 --> 00:08:40.970
and of course I wannna use it to render some content.

200
00:08:40.970 --> 00:08:42.810
For that I will add a new method,

201
00:08:42.810 --> 00:08:45.150
a private method which I'll name attach.

202
00:08:45.150 --> 00:08:46.390
You don't need to do that,

203
00:08:46.390 --> 00:08:51.270
I just wanna split my selection and rendering logic.

204
00:08:51.270 --> 00:08:52.820
Inside of attach,

205
00:08:52.820 --> 00:08:54.930
I will reach out to the host element,

206
00:08:54.930 --> 00:08:57.840
so the place where I do want to render my content

207
00:08:57.840 --> 00:09:00.770
and call insertAdjacentElement which is

208
00:09:00.770 --> 00:09:02.980
a default method provided by

209
00:09:02.980 --> 00:09:04.340
the browser in the end in JavaScript.

210
00:09:04.340 --> 00:09:08.778
To insert the HTML element an insert adjacent element,

211
00:09:08.778 --> 00:09:13.180
first of all takes a description of where to insert it,

212
00:09:13.180 --> 00:09:16.680
so there you can insert it after the beginning of

213
00:09:16.680 --> 00:09:17.850
the element you're targeting,

214
00:09:17.850 --> 00:09:20.870
so right after the opening tag of host element,

215
00:09:20.870 --> 00:09:23.570
before the beginning or before the opening tag,

216
00:09:23.570 --> 00:09:27.020
before the end tag or after the end tag.

217
00:09:27.020 --> 00:09:30.580
And here I'll go for after begin to insert it right

218
00:09:30.580 --> 00:09:33.053
at the beginning of the opening tag.

219
00:09:34.900 --> 00:09:39.140
And then the thing I wanna insert is my importedNode

220
00:09:39.140 --> 00:09:42.970
however, first of all that's a constant only available

221
00:09:42.970 --> 00:09:44.630
in the constructor and second,

222
00:09:44.630 --> 00:09:46.896
that's a document fragment.

223
00:09:46.896 --> 00:09:48.240
We couldn't insert it like this.

224
00:09:48.240 --> 00:09:49.800
Instead we need to get access to

225
00:09:49.800 --> 00:09:52.770
the concrete HTML element in there,

226
00:09:52.770 --> 00:09:55.560
which we can store in another property element.

227
00:09:55.560 --> 00:09:58.270
Which we also have to add as a field up there

228
00:09:58.270 --> 00:10:02.500
which can be of type HTML element or in our case actually,

229
00:10:02.500 --> 00:10:05.790
we know it will be inside of the template here,

230
00:10:05.790 --> 00:10:07.010
so it will be a form.

231
00:10:07.010 --> 00:10:09.470
That's the first element in the template.

232
00:10:09.470 --> 00:10:10.960
So here we can say it will be

233
00:10:10.960 --> 00:10:15.200
a HTML form element, and then here,

234
00:10:15.200 --> 00:10:20.106
this element is equal importNode firstElementChild,

235
00:10:20.106 --> 00:10:22.199
now we just have to tell typescript again,

236
00:10:22.199 --> 00:10:25.510
that this will be a HTML form element.

237
00:10:25.510 --> 00:10:28.360
Now this element is now the concrete property

238
00:10:28.360 --> 00:10:31.110
that points at the node we wanna insert.

239
00:10:31.110 --> 00:10:33.690
So down there, in insertAdjacentElement,

240
00:10:33.690 --> 00:10:36.350
we insert this element here.

241
00:10:36.350 --> 00:10:38.460
Now we just need to make sure

242
00:10:38.460 --> 00:10:39.950
that here in the constructor,

243
00:10:39.950 --> 00:10:42.260
at the end of it that we call attach,

244
00:10:42.260 --> 00:10:44.290
so this private attach method,

245
00:10:44.290 --> 00:10:46.620
so that this code also executes.

246
00:10:46.620 --> 00:10:48.200
And now with all the formatting,

247
00:10:48.200 --> 00:10:51.460
this is how my code looks like.

248
00:10:51.460 --> 00:10:53.950
So that now is the project input class,

249
00:10:53.950 --> 00:10:56.920
and theoretically, when we instantiate it,

250
00:10:56.920 --> 00:10:59.440
it should render the form.

251
00:10:59.440 --> 00:11:01.120
Now lets give it a try.

252
00:11:01.120 --> 00:11:05.415
Below the class, let's simply create a new constant,

253
00:11:05.415 --> 00:11:08.930
prjInput for example, name is up to you.

254
00:11:08.930 --> 00:11:11.783
And call new project Input like this.

255
00:11:11.783 --> 00:11:14.160
And if we now save that,

256
00:11:14.160 --> 00:11:16.050
it should recompile and reload

257
00:11:16.050 --> 00:11:17.990
and if you go back to the browser,

258
00:11:17.990 --> 00:11:20.660
indeed you should see that form here.

259
00:11:20.660 --> 00:11:22.450
So that's pretty neat,

260
00:11:22.450 --> 00:11:26.930
because with that, we made out first very important step.

261
00:11:26.930 --> 00:11:29.150
We have our form rendered

262
00:11:29.150 --> 00:11:31.630
and even though a lot is missing,

263
00:11:31.630 --> 00:11:33.010
that's better than nothing.

264
00:11:33.010 --> 00:11:36.430
This form, is coming from the index html file

265
00:11:36.430 --> 00:11:39.610
and it's rendered with the help of our object oriented

266
00:11:39.610 --> 00:11:41.623
typescript code up there.

