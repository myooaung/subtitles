WEBVTT

00:02.270 --> 00:03.613
Istruttore: Quindi possiamo restituire

00:03.613 --> 00:05.080
qualcosa sui decoratori di metodi e

00:05.080 --> 00:06.820
questo qualcosa dovrebbe essere un descrittore,

00:06.820 --> 00:08.920
che ci permette di cambiare il metodo o di modificare

00:08.920 --> 00:11.000
la configurazione del metodo.

00:11.000 --> 00:12.582
E questa è una cosa che voglio fare qui.

00:12.582 --> 00:15.985
Prima di tutto, andrò nel file HTML dell'indice

00:15.985 --> 00:18.540
e aggiungerò un pulsante.

00:18.540 --> 00:21.272
Click Me, un pulsante molto semplice, nella

00:21.272 --> 00:24.720
mia applicazione. ts, ora voglio assicurarmi

00:24.720 --> 00:26.104
che quando facciamo clic

00:26.104 --> 00:29.800
su questo pulsante eseguiamo un metodo su un oggetto.

00:29.800 --> 00:32.120
A questo scopo, aggiungerò semplicemente una

00:32.120 --> 00:34.600
nuova classe, prima di tutto la stampante.

00:34.600 --> 00:38.140
E lì voglio avere una proprietà message, che è solo questo

00:38.140 --> 00:41.690
lavoro, quindi una semplice stringa memorizzata e

00:41.690 --> 00:45.980
poi voglio avere un metodo show message in cui semplicemente registrare

00:45.980 --> 00:49.630
questo messaggio nella console.

00:49.630 --> 00:51.770
Naturalmente si tratta di una semplice classe

00:51.770 --> 00:53.430
fittizia, ma in ogni caso mi permette

00:53.430 --> 00:54.860
di mostrare ciò che voglio.

00:54.860 --> 00:56.550
Selezioniamo ora il pulsante per

00:56.550 --> 01:00.860
la porta, con il pulsante del selettore di query del documento e aggiungiamo

01:00.860 --> 01:02.970
un ascoltatore di eventi ad esso.

01:02.970 --> 01:05.080
Ora, prima di tutto, aggiungerò il mio punto

01:05.080 --> 01:07.800
esclamativo per chiarire a TypeScript che questo esiste,

01:07.800 --> 01:08.806
che non sarà nullo,

01:08.806 --> 01:10.990
e poi aggiungerò un ascoltatore di eventi,

01:10.990 --> 01:14.210
un ascoltatore di eventi click, e poi voglio attivare questo

01:14.210 --> 01:16.450
metodo show message qui.

01:16.450 --> 01:20.350
A tale scopo, creerò una nuova stampante qui, in questo modo,

01:20.350 --> 01:23.120
e punterò qui su p. showMessage, questa

01:23.120 --> 01:24.323
è la mia idea.

01:25.300 --> 01:27.103
Ora, se lo salviamo e torniamo alla

01:28.153 --> 01:31.440
nostra pagina e facciamo clic su questo pulsante, otterremo

01:31.440 --> 01:33.320
undefined qui, tuttavia, non avremo

01:33.320 --> 01:36.050
il nostro messaggio visualizzato.

01:36.050 --> 01:38.860
Il motivo è che con un ascoltatore di eventi,

01:38.860 --> 01:41.820
se puntiamo a una funzione che deve essere eseguita,

01:41.820 --> 01:44.240
la parola chiave this all'interno di

01:44.240 --> 01:48.260
tale funzione non avrà lo stesso contesto o riferimento che ha

01:48.260 --> 01:52.193
se chiamiamo solo p. ShowMessage, in questo

01:53.144 --> 01:56.450
caso si riferisce alla stampante.

01:56.450 --> 02:00.200
No, nello scenario in cui usiamo un ascoltatore di eventi, questo

02:00.200 --> 02:02.860
si riferirà all'obiettivo dell'evento, perché

02:02.860 --> 02:05.777
addEventListener alla fine lo lega alla funzione

02:05.777 --> 02:07.693
che deve essere eseguita all'obiettivo

02:07.693 --> 02:09.560
dell'evento.

02:09.560 --> 02:11.360
E naturalmente non lo voglio.

02:11.360 --> 02:12.570
Ora, una soluzione comune

02:12.570 --> 02:14.170
sarebbe quella di usare il metodo

02:14.170 --> 02:19.170
bind e legare showMessage a p, oppure legare questo in showMessage a p, in modo che quando

02:19.480 --> 02:22.860
viene eseguito, questo non faccia riferimento a ciò che addEventListener

02:22.860 --> 02:25.420
vuole che faccia, ma invece questo all'interno

02:25.420 --> 02:28.040
di showMessage farà riferimento a questo p,

02:28.040 --> 02:31.770
a questo oggetto qui.

02:31.770 --> 02:33.300
E se ora ricarichiamo questo

02:33.300 --> 02:36.270
punto e lo cancelliamo di nuovo, vediamo che funziona!

02:36.270 --> 02:39.240
Ora, questo è tutto JavaScript predefinito.

02:39.240 --> 02:40.790
Ora, costruiremo un decoratore,

02:40.790 --> 02:42.191
da aggiungere a questo metodo,

02:42.191 --> 02:47.191
che lo legherà automaticamente alla classe circostante, quindi all'oggetto a cui appartiene

02:47.460 --> 02:50.130
questo metodo, ogni volta che viene chiamato, indipendentemente

02:50.130 --> 02:53.440
da dove lo chiamiamo.

02:53.440 --> 02:55.974
Quindi, sopra la stampante, aggiungerò una nuova

02:55.974 --> 02:58.800
funzione e la chiamerò autobind, perché alla fine è quello

02:58.800 --> 03:01.580
che facciamo e sarà il mio decoratore autobind.

03:01.580 --> 03:03.890
Naturalmente si può anche usare il carattere iniziale

03:03.890 --> 03:05.960
maiuscolo, per rimanere in linea con gli altri nomi,

03:05.960 --> 03:07.930
ma anche in questo caso si può usare uno dei due quando

03:07.930 --> 03:10.122
si definisce una funzione decoratrice.

03:10.122 --> 03:13.300
Questo sarà già il mio decoratore e in esso si trovano

03:13.300 --> 03:15.269
un paio di argomenti.

03:15.269 --> 03:17.940
L'obiettivo, come imparerete, è qualsiasi.

03:17.940 --> 03:20.085
Si tratta del prototipo dell'oggetto

03:20.085 --> 03:22.533
con cui stiamo lavorando o della funzione costruttore,

03:22.533 --> 03:25.730
se lo aggiungiamo a un metodo statico, ma in questo caso sarà

03:25.730 --> 03:27.340
il prototipo, perché lo aggiungeremo

03:27.340 --> 03:30.200
a un metodo di istanza.

03:30.200 --> 03:32.520
Quindi abbiamo il nome del metodo o il nome della proprietà, ma

03:32.520 --> 03:33.690
dato che lo aggiungiamo a un metodo,

03:33.690 --> 03:36.330
possiamo chiamare questo nome di metodo, il che ha più senso.

03:36.330 --> 03:38.600
Se si tratta di una stringa o di un simbolo o

03:38.600 --> 03:40.229
potrebbe anche essere un numero,

03:40.229 --> 03:43.250
naturalmente, ma sappiamo che in genere lavoreremo con

03:43.250 --> 03:45.061
le stringhe, quindi possiamo anche

03:45.061 --> 03:48.470
scegliere stringa, a seconda di dove si intende aggiungere questo

03:48.470 --> 03:50.170
decoratore e di quanto debba essere

03:50.170 --> 03:52.484
generico e, infine, otteniamo il descrittore,

03:52.484 --> 03:56.340
che sarà di tipo PropertyDescriptor come alert.

03:56.340 --> 03:57.650
Ora abbiamo questi tre

03:57.650 --> 03:59.655
argomenti che abbiamo usato tutti

03:59.655 --> 04:03.540
in Log3, che era il nostro decoratore di metodi.

04:03.540 --> 04:05.970
Ora, in autobind, voglio assicurarmi

04:05.970 --> 04:08.994
che la parola chiave this sia sempre impostata sull'oggetto

04:08.994 --> 04:11.973
a cui appartiene questo metodo.

04:11.973 --> 04:14.240
Come possiamo raggiungere questo obiettivo?

04:14.240 --> 04:15.797
Prima di tutto, devo ottenere l'accesso

04:15.797 --> 04:17.880
al metodo che deve essere chiamato.

04:17.880 --> 04:20.661
Questo sarà possibile con l'aiuto del nostro descrittore,

04:20.661 --> 04:22.013
perché se ricaricate l'applicazione

04:22.013 --> 04:25.180
e date un'occhiata al descrittore del metodo, vedrete che nel

04:25.180 --> 04:27.330
descrittore c'è la proprietà value che punta

04:27.330 --> 04:29.460
alla funzione.

04:29.460 --> 04:32.240
Poiché il valore di questa proprietà è una funzione, in questo

04:32.240 --> 04:33.930
caso un metodo è solo una proprietà con

04:33.930 --> 04:35.498
una funzione come valore.

04:35.498 --> 04:38.630
La chiave valore contiene la funzione originale, quindi

04:38.630 --> 04:42.980
possiamo estrarre il metodo originale, se vogliamo chiamarlo in questo modo,

04:42.980 --> 04:47.320
accedendo al descrittore.

04:47.320 --> 04:47.320
valore.

04:47.320 --> 04:50.563
Questo ci permetterà di accedere al metodo originale.

04:51.790 --> 04:55.450
Successivamente, imposterò un nuovo descrittore adattato, che

04:55.450 --> 04:58.320
alla fine sarà quello che restituiremo in seguito.

04:58.320 --> 05:00.030
Ora questo sarà un oggetto

05:00.030 --> 05:03.620
e sarà di tipo descrittore di proprietà.

05:03.620 --> 05:06.350
Ora in questo oggetto possiamo aggiungere tutte le cose

05:06.350 --> 05:09.350
che possiamo aggiungere a un descrittore di proprietà.

05:09.350 --> 05:12.110
Per esempio, possiamo impostare questo parametro

05:12.110 --> 05:14.962
su configurable, true, impostare enumerable su false,

05:14.962 --> 05:17.130
in modo che non compaia nei cicli estranei

05:17.130 --> 05:20.310
e aggiungere un getter qui, che è nuovo.

05:20.310 --> 05:23.400
Aggiungo qui un getter, che è un metodo o una proprietà che

05:23.400 --> 05:26.150
contiene una funzione, che è la stessa, in modo da

05:27.020 --> 05:29.628
poter eseguire una logica extra quando gli utenti

05:29.628 --> 05:32.260
cercano di accedere a questa proprietà.

05:32.260 --> 05:35.170
In modo da non eseguire direttamente il valore di questa proprietà,

05:35.170 --> 05:36.633
quindi la funzione, ma da poter

05:36.633 --> 05:38.888
intervenire e fare un po' di lavoro in più prima

05:38.888 --> 05:40.850
di eseguire la funzione.

05:40.850 --> 05:41.913
L'idea è questa.

05:43.230 --> 05:46.290
Quindi non aggiungo una proprietà value a questo descrittore, ma

05:46.290 --> 05:48.660
ho solo un getter e, di nuovo, il getter è fondamentalmente

05:48.660 --> 05:51.540
come avere una proprietà value con una logica aggiuntiva che

05:51.540 --> 05:54.777
viene eseguita prima che il valore venga restituito.

05:54.777 --> 05:59.777
Ora, qui voglio avere la mia funzione vincolata, dove posso

05:59.900 --> 06:03.450
usare il metodo originale che abbiamo estratto

06:03.450 --> 06:07.100
qui sopra e chiamare bind e bind this.

06:07.100 --> 06:08.590
E ora il lascito, naturalmente,

06:08.590 --> 06:11.730
a cosa si riferisce qui?

06:11.730 --> 06:13.720
Tenere presente che si trova all'interno di

06:13.720 --> 06:17.700
questo metodo getter, quindi farà riferimento a qualsiasi cosa sia responsabile dell'attivazione

06:17.700 --> 06:19.510
di questo metodo getter.

06:19.510 --> 06:21.110
Ecco il trucco: il metodo

06:21.110 --> 06:23.700
getter sarà attivato dall'oggetto concreto

06:23.700 --> 06:27.200
a cui appartiene, quindi questo metodo all'interno

06:27.200 --> 06:29.190
del getter farà sempre riferimento

06:29.190 --> 06:33.610
all'oggetto su cui abbiamo definito il getter.

06:33.610 --> 06:36.800
Questo non sarà sovrascritto da addEventListener, perché

06:36.800 --> 06:38.965
il getter è come un ulteriore livello

06:38.965 --> 06:41.221
tra la nostra funzione in esecuzione e

06:41.221 --> 06:43.660
l'oggetto a cui appartiene e l'ascoltatore

06:43.660 --> 06:44.976
di eventi.

06:44.976 --> 06:47.683
Pertanto, questo qui farà riferimento all'oggetto

06:47.683 --> 06:51.610
su cui abbiamo originariamente definito il metodo.

06:51.610 --> 06:54.660
Quindi, possiamo tranquillamente legare questo metodo al metodo

06:54.660 --> 06:57.495
originale e assicurarci che ora questo metodo, all'interno

06:57.495 --> 07:01.170
del metodo originale, faccia riferimento allo stesso identico oggetto.

07:01.170 --> 07:04.300
Ora restituirò la funzione vincolata qui e successivamente,

07:04.300 --> 07:06.760
al di fuori di questo descrittore modificato, restituirò

07:06.760 --> 07:08.910
il descrittore modificato.

07:08.910 --> 07:10.560
Questa è la nostra funzione decoratrice,

07:10.560 --> 07:12.420
che restituisce un nuovo oggetto descrittore

07:12.420 --> 07:14.103
e quindi questo oggetto descrittore

07:14.103 --> 07:16.960
sovrascriverà il vecchio descrittore, ecco cosa farà TypeScript

07:16.960 --> 07:18.710
con esso.

07:18.710 --> 07:21.500
TypeScript sostituirà quindi il vecchio descrittore dei

07:21.500 --> 07:23.215
metodi, quindi la vecchia configurazione

07:23.215 --> 07:26.390
dei metodi, con questa nuova configurazione, che ha aggiunto un

07:26.390 --> 07:28.513
ulteriore livello di getter.

07:29.460 --> 07:33.330
Naturalmente non mi interessano i nomi dei metodi e degli obiettivi,

07:33.330 --> 07:37.500
quindi per evitare errori chiamerò questo underscore e questo underscore

07:37.500 --> 07:39.083
due.

07:40.260 --> 07:43.070
Ancora una volta, per dire a TypeScript che non sono interessato

07:43.070 --> 07:45.480
a questi valori, ma che devo accettarli.

07:45.480 --> 07:49.800
Aggiungiamo ora l'autobind a showMessage.

07:49.800 --> 07:52.203
Quindi aggiungerò l'Autobind e mi assicurerò

07:54.050 --> 07:56.490
che sia stato rimosso il bind nel listener

07:56.490 --> 07:59.236
di eventi e salverò il tutto.

07:59.236 --> 08:01.450
Ora diamo un'occhiata, facciamo

08:01.450 --> 08:04.730
clic su Click Me e vedremo che funziona!

08:04.730 --> 08:06.678
Se ricarico, funziona.

08:06.678 --> 08:09.680
Perché ora è legato correttamente.

08:09.680 --> 08:12.060
Per verificare che sia davvero il nostro

08:12.060 --> 08:13.520
decoratore a fare la differenza,

08:13.520 --> 08:15.868
se rimuovo il binding nel mio getter e

08:15.868 --> 08:17.850
nel decoratore e lo salvo, si vede

08:17.850 --> 08:20.920
che se ora si ricarica e si fa clic su Click me, si vede

08:20.920 --> 08:23.626
di nuovo undefined.

08:23.626 --> 08:26.320
Quindi è proprio questo livello getter aggiuntivo che

08:26.320 --> 08:27.389
fa il suo lavoro qui e che

08:27.389 --> 08:30.430
assicura che questo sia sempre vincolato correttamente, indipendentemente

08:30.430 --> 08:33.260
dal modo in cui si chiama showMessage.

08:33.260 --> 08:35.380
Se lo chiamiamo in questo modo direttamente sull'oggetto,

08:35.380 --> 08:38.350
funzionerà, mentre se lo chiamiamo qui in questo modo con un ascoltatore

08:38.350 --> 08:40.760
di eventi, funzionerà.

08:40.760 --> 08:42.260
Vedete quindi che funziona qui,

08:42.260 --> 08:45.070
che alla fine proviene da questa chiamata a showMessage

08:45.070 --> 08:48.266
e vedete anche che funziona se clicco sul pulsante.

08:48.266 --> 08:49.918
Questo è un esempio di come si possano

08:49.918 --> 08:52.060
utilizzare i decoratori per costruire

08:52.060 --> 08:55.190
una funzionalità piuttosto sorprendente e risparmiare

08:55.190 --> 08:58.718
il fastidio di chiamare manualmente bind ovunque.

08:58.718 --> 09:01.883
Invece, è sufficiente legarlo in questo modo.
