WEBVTT

00:02.400 --> 00:04.390
Instruktor: Tak więc wyrenderowaliśmy nasz

00:04.390 --> 00:07.240
pierwszy formularz, ale to co zauważysz to fakt, że stylizacja

00:07.240 --> 00:09.200
jest trochę nietrafiona, to znaczy formularz

00:09.200 --> 00:11.910
wygląda ok, ale jakiś dystans pomiędzy krawędziami naszego

00:11.910 --> 00:13.870
ekranu a formularzem byłby miły.

00:13.870 --> 00:15.830
Jeśli zanurzysz się w aplikacji. Plik css faktycznie

00:15.830 --> 00:18.360
wykryjecie, że mamy tam selektor

00:18.360 --> 00:21.050
ID wejścia użytkownika.

00:21.050 --> 00:23.330
Jeśli dodamy trochę marginesów, nie brzmi

00:23.330 --> 00:25.630
to zbyt źle, więc właściwie to, co możemy zrobić,

00:25.630 --> 00:28.060
to aplikacja. ts gdy tworzymy nasz

00:28.060 --> 00:31.740
element tutaj lub gdy uzyskujemy do niego dostęp.

00:31.740 --> 00:34.520
Możemy sięgnąć do elementu i dodać tutaj ID, które

00:34.520 --> 00:36.840
byłoby wejściem użytkownika.

00:36.840 --> 00:39.740
To upewni się, że renderowany element ma ten identyfikator

00:39.740 --> 00:42.800
w stąd jeśli to przeładuje to wygląda znacznie ładniej.

00:42.800 --> 00:45.100
Jeśli sprawdzimy to w głębi przeglądarki,

00:45.100 --> 00:49.320
widzimy tutaj ID i to jest powód tej lepszej stylizacji.

00:49.320 --> 00:51.940
Dzięki temu wykonujemy już kolejny krok, wchodzimy

00:51.940 --> 00:54.010
w interakcję z elementem.

00:54.010 --> 00:56.980
Teraz to nie jest jedyna interakcja, którą chcę zrobić.

00:56.980 --> 00:58.770
Ponieważ mamy tutaj formularz, chcę uzyskać

00:58.770 --> 01:01.870
dostęp do różnych wejść formularza, które mamy tutaj, abyśmy mogli

01:01.870 --> 01:05.910
odczytać wartości, gdy formularz zostanie przesłany, a także, abyśmy następnie skonfigurowali

01:05.910 --> 01:08.800
słuchacza zdarzeń tutaj do przesyłania i sprawdzania poprawności

01:08.800 --> 01:12.160
danych wejściowych użytkownika.

01:12.160 --> 01:15.720
Potrzebujemy więc dostępu do przycisku lub do formularza ogólnego, aby

01:15.720 --> 01:19.180
nasłuchiwać składania i do wszystkich elementów wejściowych, aby

01:19.180 --> 01:21.273
uzyskać stamtąd najnowsze wartości.

01:22.360 --> 01:25.440
Dla tego tutaj, zanim wszystko dołączymy, ale

01:25.440 --> 01:28.500
po tym jak przypiszę mój identyfikator do elementu

01:28.500 --> 01:32.210
tutaj, chcę uzyskać dostęp do różnych wejść w tym elemencie

01:32.210 --> 01:35.980
w tym formularzu i chcę je przechowywać jako właściwości

01:35.980 --> 01:39.820
tej klasy, więc dodam więcej pól tam na górze i pierwszym

01:39.820 --> 01:44.570
polem może być pole titleInputElement.

01:44.570 --> 01:47.167
Typem będzie HTMLInputElement napisz to, a nie

01:48.060 --> 01:50.410
będziemy go potrzebować tylko raz potrzebujemy

01:50.410 --> 01:52.770
jeszcze dwóch podobnych pól.

01:52.770 --> 01:55.900
Mamy pole descriptionInputElement, które

01:55.900 --> 01:57.550
jest typu HTMLInputElement,

01:58.520 --> 02:02.730
a także potrzebujemy pola peopleInputElement.

02:02.730 --> 02:06.240
Teraz możemy wypełnić te pola tutaj w konstruktorze,

02:06.240 --> 02:09.500
z tym titleInputElement, który jest ustawiony jako

02:09.500 --> 02:11.510
równy temu. element, więc do

02:11.510 --> 02:13.120
naszego elementu formularza,

02:13.120 --> 02:16.390
zawsze należy pamiętać, że jest to element formularza

02:16.390 --> 02:21.350
tutaj, selektor zapytania, a następnie zapytanie dla elementu title.

02:21.350 --> 02:25.000
A jeśli znów zajrzysz do indeksu. html widzimy tam, że

02:25.000 --> 02:28.410
mamy tytuł ID na tym elemencie, więc

02:28.410 --> 02:30.420
możemy zapytać o to,

02:30.420 --> 02:33.323
więc w app. ts tutaj w selektorze zapytania

02:33.323 --> 02:37.210
możemy użyć #title, aby wybrać dla elementu ID tytułu i zapisać

02:37.210 --> 02:39.750
to w titleInputElement.

02:39.750 --> 02:44.070
Teraz jak wiesz tak samo jak w przypadku document get element by

02:44.070 --> 02:46.230
ID, typescript nie ma szans zrozumieć,

02:46.230 --> 02:49.090
że selektor zapytania zwróci tutaj element

02:49.090 --> 02:50.650
wejściowy.

02:50.650 --> 02:53.780
Więc, aby powiedzieć typescript, ponownie użyję rzutowania

02:53.780 --> 02:56.020
i rzucę to do elementu wejściowego, a następnie

02:56.020 --> 02:58.270
możemy powtórzyć ten krok dwa razy, a także

02:58.270 --> 03:03.240
podpisać descriptionInputElement i peopleInputElement.

03:03.240 --> 03:06.600
Wyszukaj w indeksie odpowiednie identyfikatory. plik html, które są zaskakująco,

03:06.600 --> 03:12.190
jak się domyślam, opisem i ludźmi, i dodać je do typescript.

03:12.190 --> 03:16.120
Czyli tutaj szukamy elementu ID opisu,

03:16.120 --> 03:17.720
a tutaj osób.

03:17.720 --> 03:19.510
I dzięki temu mamy dostęp do wszystkich

03:19.510 --> 03:22.687
tych elementów wewnątrz naszej klasy lub wewnątrz każdego

03:22.687 --> 03:26.593
obiektu, który jest tworzony na podstawie tej klasy.

03:27.600 --> 03:29.870
Teraz musimy tylko dodać listener

03:29.870 --> 03:33.330
do naszego elementu, do naszego formularza.

03:33.330 --> 03:38.330
Dla tego dodam kolejną prywatną metodę configure, której nie musisz

03:38.440 --> 03:39.790
dodawać, ale znowu

03:39.790 --> 03:43.130
chcę zachować tę separację, w której zasadniczo

03:43.130 --> 03:47.900
robimy selekcję i zgrubną konfigurację w konstruktorze.

03:47.900 --> 03:49.340
A potem wstawienie lub

03:49.340 --> 03:52.210
dopracowanie w osobnych metodach.

03:52.210 --> 03:53.900
I w metodzie configure moim zamysłem

03:53.900 --> 03:57.000
jest ustawienie listenera zdarzeń, więc tutaj możemy

03:57.000 --> 03:58.970
sięgnąć do tego elementu jakim jest

03:58.970 --> 04:01.830
formularz i dodać listener zdarzeń.

04:01.830 --> 04:04.570
Teraz, ponieważ typescript wie, że ten element

04:04.570 --> 04:08.580
jest elementem formularza HTML, faktycznie oferuje nam autouzupełnianie,

04:08.580 --> 04:10.770
gdy chcemy słuchać zdarzenia submit,

04:10.770 --> 04:12.250
co jest świetne.

04:12.250 --> 04:15.520
Teraz musimy tylko powiązać to z metodą i w tym celu dodam

04:15.520 --> 04:17.840
kolejną metodę prywatną, prywatną,

04:17.840 --> 04:20.650
ponieważ nigdy nie będę miał dostępu do tego

04:20.650 --> 04:23.460
z zewnątrz klasy, tylko z wewnątrz.

04:23.460 --> 04:26.970
Który nazwę submitHandler, nazwa jest całkowicie zależna od ciebie.

04:26.970 --> 04:29.740
To powinna być metoda, która otrzymuje obiekt zdarzenia,

04:29.740 --> 04:32.750
'tho ponieważ będziemy go wiązać z tym słuchaczem zdarzeń.

04:32.750 --> 04:34.880
Więc tutaj możemy wskazać na to...

04:36.460 --> 04:38.713
submit handler.

04:40.180 --> 04:42.080
Teraz dostosowujemy to, aby upewnić

04:42.992 --> 04:45.040
się, że przed dołączeniem wszystkich wywołań

04:45.040 --> 04:46.730
skonfigurujemy i wykonamy tę prywatną

04:46.730 --> 04:49.330
metodę, ponownie jest ona prywatna, więc z wnętrza

04:49.330 --> 04:50.500
klasy możemy oczywiście

04:50.500 --> 04:53.660
do niej dotrzeć, z zewnątrz dostałbyś błąd typescriptu, więc

04:53.660 --> 04:56.000
teraz ta metoda powinna uruchomić się za każdym

04:56.000 --> 04:59.290
razem, gdy formularz zostanie przesłany.

04:59.290 --> 05:02.010
W submit handler chcę uzyskać dostęp do moich

05:02.010 --> 05:05.520
różnych wartości wejściowych tutaj, i sprawdzić ich poprawność,

05:05.520 --> 05:07.710
a następnie oczywiście zrobić coś

05:07.710 --> 05:10.310
z danymi wejściowymi.

05:10.310 --> 05:12.700
Teraz będziemy się martwić o część dotyczącą robienia

05:12.700 --> 05:15.480
czegoś później, na razie po prostu uzyskajmy do nich dostęp.

05:15.480 --> 05:18.430
W tym celu najpierw wywołam event. preventDefault, aby zapobiec

05:18.430 --> 05:20.620
domyślnemu złożeniu formularza,

05:20.620 --> 05:23.890
co spowodowałoby wysłanie żądania HTTP, którego nie

05:23.890 --> 05:25.820
chcę tutaj, a następnie tylko

05:25.820 --> 05:28.270
po to, aby zobaczyć, gdzie to działa, wydrukujmy

05:28.270 --> 05:32.730
konsolę. rejestruje tę wartość title Element, aby

05:32.730 --> 05:36.250
wydrukować to, co jest aktualnie w elemencie wejściowym title.

05:36.250 --> 05:39.010
Jeśli zapisaliśmy to widzisz, że kompiluje się bez błędów,

05:39.010 --> 05:40.560
więc to wygląda dobrze.

05:40.560 --> 05:44.670
I jeśli teraz przejdziemy do konsoli tutaj i wpiszemy "Hello! i klikamy dodaj projekt, dobre jest to, że nie został przesłany,

05:44.670 --> 05:49.440
złe jest to, że otrzymujemy błąd, "Cannot read property 'value'

05:49.440 --> 05:51.657
of undefined. Co tu jest nie tak?

05:51.657 --> 05:54.620
Problem tutaj polega na tym, że, to tutaj, że to słowo kluczowe w submitHandler

05:54.620 --> 05:56.173
nie wskazuje na klasę faktycznie.

05:57.730 --> 06:02.230
Dlaczego?

06:02.230 --> 06:06.420
Cóż, z powodu sposobu, w jaki działa JavaScript i typescript,

06:06.420 --> 06:07.760
wiążemy metodę tutaj

06:07.760 --> 06:11.770
z listenerem zdarzeń, a kiedy wiążemy coś ze zdarzeniem lub

06:11.770 --> 06:14.680
z pomocą listenera zdarzeń, to jest to coś,

06:14.680 --> 06:17.480
więc ta metoda, która zostanie wykonana,

06:17.480 --> 06:19.740
będzie miała to związane z czymś

06:19.740 --> 06:22.410
innym, w tym przypadku z bieżącym celem

06:22.410 --> 06:24.210
zdarzenia.

06:24.210 --> 06:27.270
Więc ten koniec tej metody nie będzie

06:27.270 --> 06:31.060
wskazywał na klasę, gdy metoda zostanie wywołana

06:31.060 --> 06:35.130
na zdarzeniu z listenerem zdarzeń.

06:35.130 --> 06:38.150
Teraz obejściem lub rozwiązaniem jest wywołanie

06:38.150 --> 06:40.360
bind na submitHandler, aby wstępnie

06:40.360 --> 06:43.980
skonfigurować, jak ta funkcja będzie wykonywana w przyszłości,

06:43.980 --> 06:46.949
a pierwszym argumentem, który możemy przekazać

06:46.949 --> 06:52.880
do bind jest to, do czego słowo kluczowe this będzie się odnosić wewnątrz funkcji, która

06:52.880 --> 06:56.450
ma być wykonana.

06:56.450 --> 06:59.760
I tutaj przekazuję to, co oznacza, że to wewnątrz submitHandler

06:59.760 --> 07:02.920
będzie odnosić się do tej samej rzeczy, do której odnosi

07:02.920 --> 07:05.750
się to w tym kontekście.

07:05.750 --> 07:10.030
A ponieważ wywołujemy go w kontekście configure tutaj, który

07:10.030 --> 07:13.660
wywołujemy tym configure, to końcówki z configure

07:13.660 --> 07:17.500
będą się odwoływać do klasy, a dzięki bind, będą tam dla

07:17.500 --> 07:19.880
wszystkich, również odwoływać się

07:19.880 --> 07:22.870
do klasy końcówek z submitHandler.

07:22.870 --> 07:24.830
Więc jeśli teraz zapiszemy to

07:24.830 --> 07:30.743
tutaj, i przeładujemy, i wpiszemy "Hello!

07:30.743 --> 07:30.743
"

07:32.840 --> 07:33.673
tutaj, teraz widzisz "Hello! " zostanie tu wypisany,

07:33.673 --> 07:35.600
gdy wyślemy formularz.

07:35.600 --> 07:37.510
Więc teraz jest to rozwiązane

07:37.510 --> 07:38.770
i teraz zajmujemy się tym właściwie.

07:38.770 --> 07:40.210
Ale może jest lepszy sposób,

07:40.210 --> 07:43.650
albo alternatywny, o którym wszyscy się dowiedzieliśmy.

07:43.650 --> 07:46.330
Może jeden przy użyciu dekoratorów, więc

07:46.330 --> 07:49.430
tutaj masz szansę ponownie wstrzymać to i spróbować

07:49.430 --> 07:51.970
rozwiązać to wiązanie z dekoratorami,

07:51.970 --> 07:54.300
ponieważ jest to coś, o czym dowiedzieliśmy

07:54.300 --> 07:57.900
się w sekcji dekoratorów.
