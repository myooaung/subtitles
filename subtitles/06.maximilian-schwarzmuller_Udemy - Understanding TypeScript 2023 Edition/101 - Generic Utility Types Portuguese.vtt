WEBVTT

00:02.330 --> 00:04.870
Narrador: Por falar em tipos mais genéricos,

00:04.870 --> 00:06.970
como um pequeno bônus, você poderia

00:06.970 --> 00:11.410
dizer, eu quero apontar sua direção para alguns tipos embutidos.

00:11.410 --> 00:15.740
O Typescript é enviado com, que utilizam tipos genéricos ou que são

00:15.740 --> 00:17.240
tipos genéricos, que nos

00:17.240 --> 00:20.350
dão certas funcionalidades de utilidade.

00:20.350 --> 00:22.050
Portanto, apenas um pequeno bônus

00:22.050 --> 00:22.920
aqui, e de vez em quando

00:22.920 --> 00:25.550
estes tipos especiais podem vir a ser úteis.

00:25.550 --> 00:26.840
Agora, em anexo você encontrará

00:26.840 --> 00:30.680
um link para a documentação completa de todos os tipos de utilitários embutidos.

00:30.680 --> 00:33.810
Aqui, quero apenas dar alguns exemplos.

00:33.810 --> 00:36.010
Agora, assim como todos esses tipos de

00:36.010 --> 00:38.610
coisas, esses tipos só existem em tipos do mundo

00:38.610 --> 00:41.300
e, portanto, somente antes da compilação.

00:41.300 --> 00:43.460
Mas durante esta etapa de compilação,

00:43.460 --> 00:48.130
eles podem lhe dar segurança de tipo extra ou flexibilidade extra.

00:48.130 --> 00:51.670
Por exemplo, há o tipo parcial incorporado.

00:51.670 --> 00:55.580
Digamos que temos um novo tipo, e a interface que vamos encontrar

00:55.580 --> 00:58.480
ou um tipo personalizado realmente não importa,

00:58.480 --> 00:59.493
CourseGoal.

01:00.660 --> 01:03.780
O CourseGoal tem um título, que deve ser

01:03.780 --> 01:06.930
um fio e vamos dizer uma descrição, que

01:06.930 --> 01:09.040
deve ser tudo um fio.

01:09.040 --> 01:14.040
Talvez tenhamos também uma propriedade completa até uma data.

01:15.290 --> 01:17.961
Agora queremos ter uma função, digamos,

01:17.961 --> 01:21.500
criarCourseGoal, que nos cria tal objeto.

01:21.500 --> 01:23.380
Naturalmente, poderíamos ter criado também essa classe.

01:23.380 --> 01:26.290
Mas temos essa função porque, nessa função, podemos

01:26.290 --> 01:28.740
estar extraindo alguns dados de um banco de

01:28.740 --> 01:30.590
dados, ou seja lá o que for.

01:30.590 --> 01:32.110
Portanto, temos esta função.

01:32.110 --> 01:33.330
E no final aqui,

01:33.330 --> 01:37.890
quero obter meu título, que é uma corda, posso

01:37.890 --> 01:42.320
obter minha descrição, que é uma corda, e

01:42.320 --> 01:47.150
espero obter meu par, que é uma data.

01:47.150 --> 01:49.680
Agora, nessa função, é claro, poderíamos devolver um objeto,

01:49.680 --> 01:51.740
mas acabamos de montar todas essas coisas.

01:51.740 --> 01:55.340
Assim, onde definimos título a título, descrição a descrição

01:55.340 --> 01:57.840
a descrição e completo até a data.

01:57.840 --> 02:00.760
Poderíamos fazer tudo isso e se depois definirmos

02:00.760 --> 02:03.890
que esta função sempre retornará um CourseGoal, teríamos

02:03.890 --> 02:07.120
uma função de configuração correta.

02:07.120 --> 02:08.420
Agora, por alguma razão, digamos

02:08.420 --> 02:09.530
que não estamos fazendo assim,

02:09.530 --> 02:11.623
não estamos fazendo tudo isso em um só passo.

02:12.680 --> 02:13.870
Em vez disso, o que eu

02:13.870 --> 02:17.340
quero fazer é começar criando uma variável aqui, que contém

02:17.340 --> 02:18.700
um objeto vazio.

02:18.700 --> 02:22.620
E então, passo a passo, quero acrescentar meu título aqui.

02:22.620 --> 02:26.420
Quero acrescentar aqui minha descrição.

02:26.420 --> 02:31.303
E quero acrescentar aqui meu par.

02:33.640 --> 02:36.420
Agora aqui estou recebendo erros porque, é claro, não posso

02:36.420 --> 02:39.170
definir o título, isto não é propriedade deste objeto.

02:39.170 --> 02:41.930
E enquanto isso funciona em JavaScript de baunilha,

02:41.930 --> 02:45.410
o TypeScript não gosta muito disso, adicionando aqui.

02:45.410 --> 02:47.810
Portanto, talvez queiramos dizer que este deveria

02:47.810 --> 02:49.300
ser o tipo CourseGoal aqui.

02:49.300 --> 02:51.040
Agora, o TypeScript não está reclamando

02:51.040 --> 02:53.640
disso, mas do fato de que se trata de um objeto vazio, o que

02:53.640 --> 02:56.223
claramente não se encaixa em nosso tipo aqui.

02:57.070 --> 02:58.360
Portanto, no final, quero

02:58.360 --> 03:01.000
devolvê-lo e quero acrescentar todas essas coisas

03:01.000 --> 03:04.570
passo a passo, talvez porque temos validação extra antes de cada

03:04.570 --> 03:07.590
passo e, portanto, um para adicioná-lo assim.

03:07.590 --> 03:12.390
Agora é aqui que o tipo parcial pode vir a ser útil.

03:12.390 --> 03:17.390
Poderíamos dizer que o CourseGoal aqui deveria ser um tipo parcial, que no final,

03:17.580 --> 03:18.413
graças aos tipos

03:18.413 --> 03:21.600
genéricos, realizará um CourseGoal.

03:21.600 --> 03:24.200
Agora o que isto faz é dizer ao TypeScript

03:24.200 --> 03:28.260
que, este é um objeto que, no final, será um Objetivo do Curso.

03:28.260 --> 03:32.090
Mas inicialmente, um tipo parcial envolve nosso próprio tipo

03:32.090 --> 03:36.620
e o muda para um tipo onde todas essas propriedades são opcionais.

03:36.620 --> 03:39.440
É com isso que parcialmente um desses tipos embutidos, o

03:39.440 --> 03:40.670
Typescript, é enviado.

03:40.670 --> 03:44.270
Assim, ele transforma isto em um tipo, que também é um tipo de objeto, onde todas as

03:44.270 --> 03:45.713
propriedades são opcionais.

03:45.713 --> 03:49.290
Portanto, inicialmente, podemos definir isto como um objeto

03:49.290 --> 03:53.030
vazio, e ainda adicionar todas estas coisas passo a passo.

03:53.030 --> 03:54.880
O único problema é que, no final,

03:54.880 --> 03:58.130
não podemos devolver isto porque agora ainda é do

03:58.130 --> 04:02.130
tipo CourseGoal parcial, e não do tipo CourseGoal.

04:02.130 --> 04:04.630
Podemos corrigir isto convertendo isto em courseGoal

04:04.630 --> 04:07.480
com digitação, porque sabemos que, neste momento, teremos

04:07.480 --> 04:08.990
adicionado todos os dados.

04:08.990 --> 04:11.667
Portanto, será um verdadeiro objetivo do curso e não um objetivo parcial.

04:11.667 --> 04:13.510
E, é claro, isto é um pouco inventado.

04:13.510 --> 04:15.500
Mas você pode ter cenários como

04:15.500 --> 04:18.220
este, onde você quer trocar temporariamente

04:18.220 --> 04:19.650
um de seus tipos de objetos,

04:19.650 --> 04:23.530
uma de suas interfaces para ser apenas opcional.

04:23.530 --> 04:25.540
Para garantir que todas as propriedades ali

04:25.540 --> 04:28.170
dentro possam ser opcionais apenas temporariamente.

04:28.170 --> 04:31.223
E então o tipo parcial permitiria que você fizesse isso.

04:32.370 --> 04:35.920
E nunca incorporando o tipo de utilidade que

04:35.920 --> 04:40.170
você tem é o único tipo lido que pode ser muito útil.

04:40.170 --> 04:42.623
Digamos que temos uma série de nomes.

04:43.460 --> 04:46.330
E ali tenho o Max e o Sports.

04:46.330 --> 04:47.420
Agora, o TypeScript correto

04:47.420 --> 04:49.860
infere que este é um conjunto de caracteres.

04:49.860 --> 04:50.960
O que podemos fazer agora?

04:50.960 --> 04:52.690
É claro que podemos empurrar o

04:53.700 --> 04:55.400
Manu para lá, e provavelmente

04:55.400 --> 04:58.340
eu deveria mudar isso para Anna e não esportes para

04:58.340 --> 04:59.720
ter um nome lá dentro.

04:59.720 --> 05:00.553
Portanto, isto funciona.

05:00.553 --> 05:01.386
Agora vamos dizer, no

05:01.386 --> 05:04.230
entanto, que quero ter certeza de que este é um conjunto trancado.

05:04.230 --> 05:06.260
Não podemos acrescentar mais aqui.

05:06.260 --> 05:07.870
E sempre podemos acrescentar mais

05:07.870 --> 05:11.690
aqui, mas pelo menos quero que o Typescript grite comigo se eu o tentar.

05:11.690 --> 05:13.730
Bem, é aí que podemos usar o tipo somente

05:13.730 --> 05:18.730
leitura, poderíamos definir isto para ler somente a matriz de cordas.

05:18.930 --> 05:20.510
Com isso dizemos TypeScript, bem,

05:20.510 --> 05:23.030
o que armazenamos aqui é um conjunto de cordas.

05:23.030 --> 05:25.830
Mas é também um conjunto de cordas, que é lido apenas.

05:25.830 --> 05:28.210
Assim, quando tentamos adicionar algo com

05:28.210 --> 05:31.600
empurrão, ou se tentamos remover algo com pop, recebemos

05:31.600 --> 05:32.760
erros, porque não estamos

05:32.760 --> 05:34.810
autorizados a fazer estas coisas com

05:34.810 --> 05:36.320
esta matriz.

05:36.320 --> 05:38.760
E, a propósito, isto não se limita a arrays, você

05:38.760 --> 05:41.610
também pode usar somente a leitura em um objeto.

05:41.610 --> 05:43.990
Por exemplo, para comercializar apenas como lido,

05:43.990 --> 05:46.860
para que você não tenha permissão de alterar as propriedades

05:46.860 --> 05:49.920
ou adicionar novas propriedades a este objeto.

05:49.920 --> 05:52.240
Portanto, isto também pode ser muito,

05:52.240 --> 05:56.510
muito útil e lhe dar mais flexibilidade ou ser mais preciso sobre

05:56.510 --> 05:59.490
o que você pretende fazer em seu código.

05:59.490 --> 06:01.380
Agora, todos estes são apenas tipos de utilidade

06:01.380 --> 06:03.610
que só existem no mundo TypeScript.

06:03.610 --> 06:05.881
Portanto, eles não são compilados para nada.

06:05.881 --> 06:09.400
Mas durante a compilação, eles lhe dão um rigor extra,

06:09.400 --> 06:12.410
ou cheques extras ou ignoram certos cheques, como

06:12.410 --> 06:14.800
fizemos com cheques parciais.

06:14.800 --> 06:17.170
Agora você tem mais do que apenas leitura e parcial.

06:17.170 --> 06:19.730
E, como mencionei, você encontra em anexo a documentação

06:19.730 --> 06:22.420
de uma lista completa destes tipos de utilidades.

06:22.420 --> 06:25.580
Em certos cenários, eles podem ser realmente úteis e, portanto,

06:25.580 --> 06:27.460
eu definitivamente não queria escondê-los

06:27.460 --> 06:28.350
de você.

06:28.350 --> 06:30.500
Mas ao invés disso, você deve estar ciente

06:30.500 --> 06:34.060
delas para que possa usá-las quando precisar trancar algo, ou como

06:34.060 --> 06:36.980
no caso de abrir parcialmente qualquer coisa ou com todas

06:36.980 --> 06:39.690
as outras que eu não discuti aqui, se você tiver alguma

06:39.690 --> 06:42.570
outra operação que possa ser melhorada com um desses

06:42.570 --> 06:45.140
tipos de utilitários embutidos.

06:45.140 --> 06:47.670
E estes tipos de utilidade são todos genéricos,

06:47.670 --> 06:49.170
porque o que eles fazem é

06:49.170 --> 06:52.580
pegar algum outro valor que seja de qualquer tipo e fazer

06:52.580 --> 06:54.190
algo com ele.

06:54.190 --> 06:57.970
Eles colocam tudo em opcional, eles o trancam, não se importando

06:57.970 --> 07:01.330
se este é um array ou objeto ou um array de cordas, array

07:01.330 --> 07:04.430
de números, e assim por diante.

07:04.430 --> 07:06.000
É por isso que estes são genéricos.

07:06.000 --> 07:09.520
E junto com os genéricos superiores incorporados, vimos anteriormente e

07:09.520 --> 07:10.790
seus próprios genéricos.

07:10.790 --> 07:13.780
Tudo isso agora, esperamos, ajuda a entender por que os

07:13.780 --> 07:16.793
genéricos podem ser úteis no porquê da sua existência.
