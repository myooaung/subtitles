WEBVTT

00:02.190 --> 00:04.480
Jadi, untuk memulai dengan obat generik kita sendiri.

00:04.480 --> 00:06.820
Berikut di bawah ini kode yang dikomentari.

00:06.820 --> 00:09.210
Saya akan mulai dengan fungsi generik.

00:09.210 --> 00:11.430
Anda dapat membangun kelas generik dan fungsi

00:11.430 --> 00:15.350
yang akan saya tunjukkan keduanya dan di sini saya akan mulai dengan fungsi.

00:15.350 --> 00:17.490
Sekarang katakanlah kita ingin memiliki

00:17.490 --> 00:22.490
fungsi yang pada dasarnya menggabungkan dua objek dan mengembalikan objek baru.

00:23.660 --> 00:25.380
Jadi di sini kita bisa menamakannya "merge".

00:25.380 --> 00:28.803
Dan kita ingin mendapatkan objek A dan objek B sebagai input.

00:30.010 --> 00:33.990
Sekarang tentu saja kita bisa menulis fungsi ini dengan cara tertentu.

00:33.990 --> 00:36.660
Kita bisa mengatakan ini bertipe

00:36.660 --> 00:39.033
objek dan ini bertipe objek.

00:39.960 --> 00:41.760
Dan kemudian apa yang dilakukan fungsi

00:41.760 --> 00:45.200
ini adalah, mengembalikan hasil dari objek yang ditetapkan.

00:45.200 --> 00:48.130
Di mana saya mendapatkan objek A dan objek B.

00:48.130 --> 00:50.230
Jadi tentu saja karena kita punya metode assign

00:50.230 --> 00:53.000
objek yang sudah ada di dalam javascript normal.

00:53.000 --> 00:55.820
Kita bisa berdebat jika kita benar-benar membutuhkan fungsi penggabungan, tetapi

00:55.820 --> 00:58.140
tentu saja Anda bisa melakukan pekerjaan tambahan di sini.

00:58.140 --> 01:00.480
Anda bisa memperkaya ini dengan informasi tambahan,

01:00.480 --> 01:01.833
dengan opsi tambahan dan pada

01:01.833 --> 01:04.730
akhirnya ini hanyalah demo, hanya dan contoh.

01:04.730 --> 01:07.510
Jadi ini akan valid, kita bisa memanggil

01:07.510 --> 01:11.830
merge di sini, dan console log hasilnya, seperti ini.

01:11.830 --> 01:15.130
Dan kemudian masukkan sebuah objek yang memiliki kunci nama

01:15.130 --> 01:17.570
dan objek kedua yang memiliki usia dan jika kita

01:17.570 --> 01:20.010
menjalankannya dan kita simpan ini.

01:20.010 --> 01:22.780
Di sini, di browser memang kita mendapatkan output ini.

01:22.780 --> 01:24.280
Jadi kita mendapatkan objek gabungan ini.

01:24.280 --> 01:27.050
Sekarang ini berfungsi, masalah

01:27.050 --> 01:29.660
yang kita miliki dengan itu adalah

01:31.660 --> 01:33.300
jika kita mencoba menyimpan

01:33.300 --> 01:38.097
nama gabungan ini max, dan usia 30 tahun.

01:39.620 --> 01:44.620
Jika kita mencoba menyimpan ini di sini, saya tidak bisa mengakses nama pada hasilnya,

01:45.770 --> 01:48.730
saya tidak bisa mengakses umur pada hasil di objek

01:48.730 --> 01:50.020
gabungan ini.

01:50.020 --> 01:52.360
Meskipun kita tahu bahwa keduanya akan ada.

01:52.360 --> 01:54.830
Karena typescript tidak mengetahui hal ini.

01:54.830 --> 01:57.100
Typescript tidak bisa mengetahui hal ini.

01:57.100 --> 01:59.310
Karena kita hanya memberitahukannya, Anda mendapatkan objek

01:59.310 --> 02:02.370
dan pada akhirnya diketikkan terlebih dahulu bahwa kita mengembalikan objek.

02:02.370 --> 02:04.790
Yang benar, tetapi tidak membawa semua

02:04.790 --> 02:07.810
informasi yang bisa kita gunakan di sini.

02:07.810 --> 02:09.970
Sekarang tentu saja kita selalu dapat melakukan type casting,

02:09.970 --> 02:12.080
kita dapat memberitahu typescript bahwa apa yang kita dapatkan

02:12.080 --> 02:14.220
kembali adalah sebuah objek di mana kita memiliki kunci nama

02:14.220 --> 02:15.960
dan di mana kita memiliki kunci usia.

02:15.960 --> 02:19.020
Tetapi itu benar-benar tidak praktis jika kita harus melakukan itu.

02:19.020 --> 02:21.420
Jadi di sini, obat generik bisa membantu kita.

02:21.420 --> 02:23.750
Kita mengubahnya menjadi fungsi generik dengan

02:23.750 --> 02:26.470
menambahkan tanda kurung siku ini setelah nama fungsi.

02:26.470 --> 02:29.740
Dan kemudian kita mendefinisikan pengidentifikasi Q.

02:29.740 --> 02:33.190
Biasanya Anda mulai dengan T, untuk jenis.

02:33.190 --> 02:35.600
Tetapi Anda bisa menggunakan identifier apa saja di

02:35.600 --> 02:37.730
sini, tidak harus satu karakter tetapi konvensi

02:37.730 --> 02:39.860
yang berlaku adalah menggunakan satu karakter

02:39.860 --> 02:42.250
dan biasanya, jika Anda hanya memiliki satu tipe generik,

02:42.250 --> 02:43.690
Anda menamai ini T.

02:43.690 --> 02:46.640
Dan kemudian Anda mengatakan, baik tipe generik ini di sini, ini

02:46.640 --> 02:48.510
sekarang tersedia di dalam fungsi ini.

02:48.510 --> 02:51.453
Jadi, kita bisa mengatakan bahwa apa yang kita dapatkan di sini adalah tipe T.

02:53.090 --> 02:55.740
Terlihat aneh, kita akan sampai di sana tanpa khawatir.

02:55.740 --> 02:57.280
Sekarang di sini kita mendapatkan dua argumen

02:57.280 --> 02:59.570
di mana kita tidak tahu persis bagaimana mereka akan terlihat.

02:59.570 --> 03:02.450
Jadi, saya akan menerima tipe generik kedua di sini.

03:02.450 --> 03:04.340
Cukup dengan menambahkan koma dalam tanda

03:04.340 --> 03:07.400
kurung siku, Dan kemudian kita lanjutkan saja dalam alfabet.

03:07.400 --> 03:10.490
Dan oleh karena itu, parameter atau tipe generik

03:10.490 --> 03:15.490
kedua yang mungkin Anda gunakan dalam fungsi biasanya bernama U.

03:15.630 --> 03:18.560
Jadi, kita bisa mengatakan bahwa ini adalah tipe U.

03:18.560 --> 03:22.100
Oke, sekarang apa yang dihasilkannya?

03:22.100 --> 03:25.450
Sebenarnya banyak, seperti yang Anda lihat dengan ini saja

03:25.450 --> 03:28.620
jika Anda mengarahkan kursor ke penggabungan, typescript

03:28.620 --> 03:33.230
menyimpulkan bahwa fungsi ini mengembalikan perpotongan T dan U.

03:33.230 --> 03:36.800
Dan tentu saja kita juga bisa mengatur ini secara eksplisit seperti ini tetapi

03:36.800 --> 03:38.040
kita bahkan tidak perlu melakukan

03:38.040 --> 03:42.010
itu karena object assign mengembalikan perpotongan dan oleh karena itu karena kita

03:42.010 --> 03:44.150
mengembalikan hasil object assign, typescript

03:44.150 --> 03:45.740
secara otomatis memahami bahwa fungsi

03:45.740 --> 03:48.390
ini mengembalikan perpotongan.

03:48.390 --> 03:50.320
Jadi, bagaimana hal ini bisa membantu?

03:50.320 --> 03:52.510
Nah jika sekarang kita arahkan kursor ke objek

03:52.510 --> 03:54.260
gabungan, kita melihat bahwa sekarang

03:54.260 --> 03:56.450
dengan typescript ini saja memahami bahwa apa

03:56.450 --> 03:59.230
yang kita simpan di objek gabungan adalah perpotongan dari

03:59.230 --> 04:01.690
dua jenis objek ini, karena ia melihat bahwa kita mengoper

04:01.690 --> 04:04.220
objek-objek ini, yang merupakan jenis objek ini yang

04:04.220 --> 04:06.100
diinfersikannya.

04:06.100 --> 04:08.840
String nama dan nomor usia.

04:08.840 --> 04:11.590
Dan bahwa fungsi kita mengembalikan perpotongan.

04:11.590 --> 04:13.630
Mengapa ia bisa menyimpulkan hal ini sekarang

04:13.630 --> 04:16.313
dan tidak dengan objek yang kita miliki sebelumnya?

04:17.220 --> 04:19.560
Karena objek adalah tipe yang sangat tidak spesifik.

04:19.560 --> 04:22.490
Kita mengatakan objek apa saja dan ya karena itu typescript

04:22.490 --> 04:24.530
dapat menyimpulkan bahwa kita mengembalikan

04:24.530 --> 04:26.600
perpotongan objek dan objek.

04:26.600 --> 04:29.570
Tetapi perpotongan dari dua objek yang tidak diketahui hanyalah

04:29.570 --> 04:32.270
sebuah objek baru yang tidak diketahui yang tidak menawarkan

04:32.270 --> 04:35.420
informasi tipe tambahan untuk typescript.

04:35.420 --> 04:38.170
Dengan tipe generik, apa yang kita katakan pada

04:38.170 --> 04:43.170
typescript adalah, kedua parameter ini dapat dan sering kali akan memiliki tipe

04:43.282 --> 04:47.100
yang berbeda dan oleh karena itu typescript dapat memahami bahwa

04:47.100 --> 04:49.690
kita tidak hanya bekerja dengan beberapa

04:49.690 --> 04:53.150
tipe objek acak, tetapi kita akan mendapatkan tipe data

04:53.150 --> 04:55.250
yang berbeda di sini.

04:55.250 --> 04:56.940
Dan bahwa fungsi ini secara keseluruhan

04:56.940 --> 04:59.770
akan mengembalikan perpotongan data tersebut.

04:59.770 --> 05:01.773
Dan untuk itu typescript mampu memahami

05:01.773 --> 05:04.390
bahwa apa yang kita simpan di sini dalam objek gabungan

05:04.390 --> 05:07.910
adalah seperti memotong data dari dua input ini.

05:07.910 --> 05:09.530
Karena sekarang kita tidak hanya berurusan

05:09.530 --> 05:14.423
dengan beberapa objek yang tidak diketahui di sini, tetapi dengan jenis yang sangat spesifik.

05:15.330 --> 05:20.150
Dan oleh karena itu sekarang jika saya konsol log usia objek yang digabungkan di sini ini berfungsi

05:20.150 --> 05:22.980
tanpa kesalahan seperti yang Anda ketahui.

05:22.980 --> 05:26.770
Di sini saya mencetak 30 karena tipe generik.

05:26.770 --> 05:29.040
Kita memberikan typescript informasi tambahan

05:29.040 --> 05:31.950
bahwa kita tidak tahu persis jenisnya akan pasti, akan

05:31.950 --> 05:34.780
ada objek di sini kita bisa mengatakan itu.

05:34.780 --> 05:36.550
Tapi kita tidak tahu apakah objek tersebut

05:36.550 --> 05:38.640
memiliki kunci nama, kunci umur, kunci hobi.

05:38.640 --> 05:41.130
Kita tidak tahu dan kita tidak peduli, kita tidak peduli

05:41.130 --> 05:43.360
tentang objek yang tepat di sini, kita tidak ingin

05:43.360 --> 05:46.050
menentukan bahwa ini harus dari jenis ini.

05:46.050 --> 05:47.490
Karena tiba-tiba jika saya

05:47.490 --> 05:50.520
menambahkan hobi di sana, kita akan memiliki masalah.

05:50.520 --> 05:52.540
Jadi, saya tidak ingin menjadi seketat itu.

05:52.540 --> 05:54.480
Saya hanya ingin mengatakan ini adalah jenis apa

05:54.480 --> 05:56.940
pun yang saya tidak peduli tetapi kemungkinan besar jenisnya

05:56.940 --> 05:58.590
berbeda dengan yang ini di sini.

05:58.590 --> 06:00.860
Dan jika itu akan sama, itu juga tidak masalah.

06:00.860 --> 06:03.030
Tetapi typescript memahami bahwa kita memiliki

06:03.030 --> 06:06.530
tipe khusus di sini untuk dua parameter ini dan bahwa kita mengembalikan

06:06.530 --> 06:08.800
perpotongan dari mereka.

06:08.800 --> 06:12.660
Alih-alih hanya memiliki objek yang tidak spesifik di sini.

06:12.660 --> 06:14.770
Sekarang secara khusus keajaiban di sini bukan hanya

06:14.770 --> 06:16.210
bahwa kita memberitahu typescript

06:16.210 --> 06:18.410
bahwa kita punya dua jenis yang berbeda di sini.

06:18.410 --> 06:20.740
Tetapi tipe-tipe ini tidak ditetapkan ketika kita

06:20.740 --> 06:22.870
mendefinisikan fungsi ini, tetapi mereka ditetapkan

06:22.870 --> 06:25.810
secara dinamis ketika kita memanggil fungsi tersebut.

06:25.810 --> 06:27.430
Jadi di sini kita memanggil fungsi

06:27.430 --> 06:30.560
dan typescript menginfusikan tipe untuk dua argumen.

06:30.560 --> 06:33.890
Untuk T, pada dasarnya mengisi tipe objek dengan objek

06:33.890 --> 06:36.677
dengan properti nama yang menyimpan string dan

06:36.677 --> 06:39.600
properti hobi yang menyimpan array string.

06:39.600 --> 06:43.290
Dan untuk U, ia mengisi tipe objek tipe

06:43.290 --> 06:47.990
dengan properti age di mana age bertipe number.

06:47.990 --> 06:51.030
Sekarang ketika kita memanggil fungsi ini lagi di

06:51.030 --> 06:53.890
baris lain dan kita mengoperkan objek yang berbeda

06:53.890 --> 06:57.090
dan saya menyimpannya dalam konstanta baru dengan nama

06:57.090 --> 06:59.920
baru, maka tentu saja, tipe yang berbeda diisi

06:59.920 --> 07:03.130
untuk T dan U untuk panggilan fungsi ini.

07:03.130 --> 07:05.350
Anda juga dapat secara khusus memberitahu

07:05.350 --> 07:07.780
typescript tipe mana yang harus diisi dengan menambahkan

07:07.780 --> 07:09.110
tanda kurung siku setelah

07:09.110 --> 07:11.320
nama fungsi ketika Anda memanggilnya dan

07:11.320 --> 07:13.010
kemudian Anda akan mengisi tipe

07:13.010 --> 07:15.200
Anda sendiri untuk T dan U.

07:15.200 --> 07:18.030
Kita bisa memberitahu typescript bahwa T harus bertipe string

07:18.030 --> 07:20.180
untuk pemanggilan fungsi ini dan U harus bertipe

07:20.180 --> 07:22.710
number, tetapi tentu saja typescript akan mengeluh

07:22.710 --> 07:23.950
tentang nilai konkret yang

07:23.950 --> 07:25.940
kita masukkan di sini.

07:25.940 --> 07:28.270
Karena ini jelas bukan string dan jika

07:28.270 --> 07:30.190
kita akan memperbaikinya, ini jelas

07:30.190 --> 07:32.280
tidak akan bertipe number.

07:32.280 --> 07:34.650
Jadi di sini kita bisa sangat spesifik

07:34.650 --> 07:38.620
dan mengatakan dengan baik, argumen pertama atau tipe T tepatnya

07:38.620 --> 07:41.700
untuk panggilan fungsi ini di sini adalah tipe objek

07:41.700 --> 07:45.310
di mana kita memiliki properti nama yang bertipe string dan

07:45.310 --> 07:48.850
properti hobi yang bertipe string array.

07:48.850 --> 07:52.970
Dan tipe konkret untuk U, untuk pemanggilan fungsi ini adalah sebuah

07:52.970 --> 07:55.800
objek dimana kita memiliki properti age yang harus

07:55.800 --> 07:57.320
bertipe number.

07:57.320 --> 08:00.220
Dan sekarang kita akan menjadi baik dan tidak ada

08:00.220 --> 08:02.730
kesalahan lagi dan ini akan berhasil.

08:02.730 --> 08:05.060
Tetapi ini berlebihan, Anda benar-benar dapat

08:05.060 --> 08:07.310
melakukan itu dan penting untuk memahami bahwa

08:07.310 --> 08:10.070
pada akhirnya inilah yang dimaksud dengan generik, yaitu

08:10.070 --> 08:12.990
Anda dapat mengisi tipe konkret yang berbeda untuk panggilan

08:12.990 --> 08:15.170
fungsi yang berbeda.

08:15.170 --> 08:16.930
Tetapi kita tidak perlu melakukan itu

08:16.930 --> 08:20.110
di sini karena typescript hanya menginfusikan tipe-tipe nilai yang

08:20.110 --> 08:22.170
kita passing sebagai argumen di sini.

08:22.170 --> 08:25.120
Dan kemudian menempatkan tipe-tipe yang disimpulkan

08:25.120 --> 08:28.240
untuk T dan U untuk pemanggilan fungsi ini.

08:28.240 --> 08:31.283
Begitulah cara kerja generik di balik layar pada akhirnya.
