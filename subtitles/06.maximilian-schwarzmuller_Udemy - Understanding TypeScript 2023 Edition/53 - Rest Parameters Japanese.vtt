WEBVTT

00:02.060 --> 00:04.880
男性：スプレッドオペレーターに関連するものとして､

00:04.880 --> 00:07.060
休息パラメーターがあります｡

00:07.060 --> 00:10.374
そのために､ またまたadd機能をいじる｡ 

00:10.374 --> 00:13.870
そこで､ ここまでのコードをすべてコメントアウトして､

00:13.870 --> 00:15.780
何も壊れないようにします｡

00:15.780 --> 00:20.520
そして､ 私のadd関数を､ ファンクションキーワードを矢印関数として､

00:20.520 --> 00:23.830
好きな構文で再追加してください｡

00:23.830 --> 00:26.360
でも､ 今は特別な機能を持ちたいんです｡ 

00:26.360 --> 00:33.290
2つの値に制限するのではなく､ ユーザーが渡す値の数だけ追加できるようにしたいのです｡

00:33.290 --> 00:37.700
そうすれば､ 基本的にこのように､ 5､ 10､ 2､ 3ドット7､

00:37.700 --> 00:44.530
といった具合に､ 好きなだけ値を入れてaddを呼び出すことができるようになります｡

00:44.530 --> 00:48.090
10個の値で呼び出したい場合も可能なはずです｡

00:48.090 --> 00:52.600
しかし､ 今はもちろん､ はっきりとわかるように不可能です｡

00:52.600 --> 00:54.290
Typescriptは私にエラーを与えています､

00:54.290 --> 00:57.760
そしてそれは正しいです､ なぜなら私はここで引数を受け取っていないからです｡

00:57.760 --> 01:00.336
もちろん､ ここで引数を受け取り､ 正しい型を割り当てることはできますが､

01:00.336 --> 01:04.300
その後､ 5個で呼び出したらどうでしょう｡

01:04.300 --> 01:06.330
先ほども言ったように､ 私は柔軟に対応したいのです｡ 

01:06.330 --> 01:08.850
そこで登場するのがレストパラメーターです｡ 

01:08.850 --> 01:13.111
値のリストを期待するところ､ つまり渡すところではなく､

01:13.111 --> 01:15.270
入ってくる値として受け入れるところでは､

01:15.270 --> 01:24.043
3つのドットの後に､ 数字など好きな名前を使うこともできる｡

01:25.630 --> 01:27.430
さて､ これで何をするかというと､

01:27.430 --> 01:39.350
入力されたすべてのパラメータ､ あるいは一般に入力された値のリスト（カンマ区切りのリスト）を配列にマージするのである｡

01:39.350 --> 01:40.940
もちろん､ デフォルトでは任意の値を持つ型なので､

01:40.940 --> 01:49.680
任意の値でいっぱいの配列になりますが､ それではいけません｡

01:49.680 --> 01:53.200
そして､ ここでは「数字の配列になる」と言うことができる｡  そんな感じ｡ 

01:53.200 --> 01:54.430
これで正しい型を定義できたので､

01:54.430 --> 01:56.420
今度はその数値の配列で作業します｡

01:56.420 --> 01:58.710
今､ 私たちは､ それをいくつかの方法で要約することができます｡ 

01:58.710 --> 02:04.110
numbersは配列なので､ 結果変数と4つのループで作業することができます｡

02:04.110 --> 02:09.260
つまり､ ここでは数字をループして､ それを結果に加えることができるのです｡

02:09.260 --> 02:11.519
あるいは､ 配列で利用可能なreduceメソッドを利用する｡ 

02:11.519 --> 02:15.620
Reduceは､ 配列の各要素に対して演算を行い､

02:15.620 --> 02:20.940
結果を返し､ その結果を足し合わせるという動作をする｡

02:20.940 --> 02:27.160
そのために､ 削減する関数と､ 開始値（ここではゼロ）を用意します｡

02:27.160 --> 02:31.093
そして､ この関数は引数を2つ取り､

02:31.093 --> 02:35.920
それが現在の結果であると言えるでしょう｡

02:35.920 --> 02:38.968
そして､ 見ているのは現在の値で､

02:38.968 --> 02:42.640
これは配列onesの各値になります｡

02:42.640 --> 02:45.350
そして､ ここでcuResultを返す｡

02:45.350 --> 02:48.290
最初の実行では､ ここでの初期値となる｡

02:48.290 --> 02:51.497
プラスcurValue｡ 

02:51.497 --> 02:52.703
そして､ そうすれば､ ここでの全体的な削減は数字を返します｡ 

02:53.859 --> 02:57.920
つまり､ ここでは､ 全体として数値を減らした結果を返すことができます｡

02:57.920 --> 03:01.160
したがって､ add変数（ここでは定数）は､ 最終的には､

03:01.160 --> 03:07.320
数値の配列ではなく､ いくつかの数値を受け取る関数を保持することになるのです｡

03:07.320 --> 03:10.650
しかし､ 残りのパラメータがあるため､ 数値のリスト､

03:10.650 --> 03:16.510
それが関数内部で配列にマージされ､ 最終的に数値を返します｡

03:16.510 --> 03:18.550
では､ とりあえずすべてを保存すれば､

03:18.550 --> 03:23.350
すべてうまくいき､ ここに小さな足し算の結果が表示されるはずです｡

03:23.350 --> 03:31.400
これがレストパラメーターで､ 引数を無制限に受け取れるという実に便利な機能です｡

03:31.400 --> 03:34.210
また､ プッシュ方式のようないくつかの組み込み方式は､

03:34.210 --> 03:36.680
まさにそのように機能します｡

03:36.680 --> 03:38.540
ほら､ ここのpushは､ この奇妙なパラメータ定義を持っている｡ 

03:38.540 --> 03:42.560
それはまさに､ 今わかったことです｡ 

03:42.560 --> 03:44.250
ここでのPushは､ この配列（文字列がたくさん入った配列）に対して､

03:44.250 --> 03:48.490
いくつかの項目を取ります｡

03:48.490 --> 03:50.400
弦が2本必要なんです｡ 

03:50.400 --> 03:51.730
これは文字列の配列を受け取るという意味ではなく､

03:51.730 --> 04:01.260
ここに残りのパラメータ､ 文字列のカンマ区切りリストがあり､ ポーチの外にあるものは配列にマージされ､ 内部で処理されるのです｡

04:01.260 --> 04:03.100
これが残りのパラメータシンタックスです｡ 

04:03.100 --> 04:06.276
ちなみにタプルとの組み合わせも可能です｡ 

04:06.276 --> 04:10.370
複数の引数をサポートしたいが､ それがいくつになるか分かっている場合､

04:10.370 --> 04:20.392
つまり無制限のリストでない場合､ タプル型を使うこともできます｡

04:20.392 --> 04:28.430
そして､ 例えば「私はここでマイフリーの番号を受け付けます」と言うのです｡  そして､ 関数を呼び出すときには､ もちろんここで4番目の引数を削除しなければなりません｡

04:28.460 --> 04:32.240
なぜなら､ 今私は､ それぞれが数字である3つの引数を取得したいことをはっきりと理解しているからです｡

04:32.240 --> 04:33.830
もちろん､ ここで3つの独立したパラメータを追加するだけでもよかったのですが､

04:33.830 --> 04:40.720
この構文は､ 自由なパラメータを追加するよりもまだ少し短く､ あるいは簡単にセットアップできるかもしれません｡

04:40.720 --> 04:43.090
それは､ お客様のアプリケーションと要件に依存します｡ 

04:43.090 --> 04:46.919
ここでは､ そのような設定から離れ､ より汎用的に､

04:46.919 --> 04:51.320
いくらでも引数を受け付けるようにします｡ なぜなら､

04:51.320 --> 04:57.864
この関数では､ 実際に無限の引数を扱うことができるからです｡
