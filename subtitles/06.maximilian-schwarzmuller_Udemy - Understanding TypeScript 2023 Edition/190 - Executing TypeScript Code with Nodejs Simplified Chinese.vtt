WEBVTT

00:02.200 --> 00:05.520
教师：让我们开始学习TypeScript和Node｡

00:05.520 --> 00:05.520
js,

00:05.520 --> 00:08.660
因此, 我实际上在一个空的新文件夹中, 只有一些配置文件,

00:08.660 --> 00:12.140
让我们从非常简单的开始｡

00:12.140 --> 00:15.020
让我们添加一个应用程序｡  ts文件｡ 

00:15.020 --> 00:17.370
当然, 你想怎么叫就怎么叫｡ 

00:17.370 --> 00:19.180
在这里, 我们写一些代码,

00:19.180 --> 00:24.980
用Node来执行. js, 但我们希望在其中使用TypeScript｡

00:24.980 --> 00:28.910
一个简单的脚本可以是我们只是控制台记录的东西｡

00:28.910 --> 00:30.450
这在浏览器中有效,

00:30.450 --> 00:33.350
但也适用于节点｡ js的｡ 

00:33.350 --> 00:37.220
现在, 确保你有节点｡  js, 如果您按照课程进行学习,

00:37.220 --> 00:42.077
您肯定应该安装它, 因为我们在NPM中使用了Webpack,

00:42.077 --> 00:46.710
并使用了我们已经随NPM安装的许多其他工具和库｡

00:46.710 --> 00:48.480
所以你应该有节点｡  js已安装｡ 

00:48.480 --> 00:50.300
如果你安装了它, 你可以执行这个文件,

00:50.300 --> 00:54.110
如果你把它编译成JavaScript｡

00:54.110 --> 01:00.360
所以如果我运行tsc应用程序｡  ts, 然后我制作了我的应用程序｡

01:00.360 --> 01:00.360
js文件,

01:00.360 --> 01:04.503
因此, 我可以用node执行这个命令, 并在这里打印一些内容｡

01:06.550 --> 01:11.890
现在当我删除应用程序｡  js文件, 然后我尝试执行app｡

01:11.890 --> 01:11.890
ts与节点,

01:11.890 --> 01:13.810
您会看到一些奇怪东西｡

01:13.810 --> 01:15.070
这也行得通｡ 

01:15.070 --> 01:18.010
那么节点是否能够执行TypeScript？

01:18.010 --> 01:20.380
不, 不是的, 这很重要｡ 

01:20.380 --> 01:23.210
它并不关心文件扩展名, 但不管它在文件中找到什么,

01:23.210 --> 01:25.260
它都会将其视为常规JavaScript,

01:25.260 --> 01:27.420
这里没有使用任何TypeScript特性,

01:27.420 --> 01:31.370
所以它可以正常工作.

01:31.370 --> 01:34.340
如果我们在这里添加不同的内容, 情况会发生变化｡ 

01:34.340 --> 01:36.400
假设我们有一个年龄变量, 它是一个数字,

01:36.400 --> 01:37.370
然后我把它设为30,

01:37.370 --> 01:42.250
然后我安慰一下｡

01:42.250 --> 01:42.250
此处记录时间｡ 

01:42.250 --> 01:44.840
这当然是一个有效的TypeScript代码｡ 

01:44.840 --> 01:46.790
但如果我们尝试使用node执行此操作,

01:46.790 --> 01:48.370
您将看到我们得到一个错误｡

01:48.370 --> 01:56.960
所以节点不能解析和编译TypeScript, 它只是把你用它执行的每个文件当作JavaScript｡

01:56.960 --> 01:59.030
如果您没有在文件中使用任何TypeScript特性,

01:59.030 --> 02:01.100
那么它确实可以工作｡

02:01.100 --> 02:02.950
但如果你这样做, 它不会工作｡ 

02:02.950 --> 02:04.920
您必须先将文件编译为JavaScript,

02:04.920 --> 02:06.550
然后才能执行JavaScript文件,

02:06.550 --> 02:11.350
该文件中只有有效的JavaScript代码｡

02:11.350 --> 02:13.030
这一点非常重要｡ 

02:13.030 --> 02:15.890
节点不执行TypeScript｡ 

02:15.890 --> 02:20.710
现在你可以实际安装一个包ts-node, 它最终会给你一个TypeScript编译器,

02:20.710 --> 02:34.170
结合节点可执行文件, 你可以说, 这样你就可以全局安装一个工具, 你可以用它来运行TypeScript文件｡

02:34.170 --> 02:35.210
但是在后台,

02:35.210 --> 02:39.440
它只会为您进行编译并执行编译代码｡

02:39.440 --> 02:43.890
因此, 它基本上将TSC和节点步骤合并为一个步骤｡

02:43.890 --> 02:46.060
因此, 这是一个您可以使用的包,

02:46.060 --> 02:52.330
但虽然这可能对开发､ 生产､ 在某些Web服务器或Web主机上提供文件服务很好,

02:52.330 --> 02:56.950
但这可能并不理想, 因为每次执行代码时都要执行此额外的编译步骤,

02:56.950 --> 03:12.090
只会增加一些额外的开销, 这在开发期间是可以接受的｡ 但是当您的代码已经准备好用于生产并且您确实希望将其提供给某个地方时, 您可能并不希望使用这些代码｡

03:12.090 --> 03:13.260
因此, 在本模块中, 我们不会使用ts-node,

03:13.260 --> 03:18.180
也不会尝试执行任何带有node的TypeScript文件｡

03:18.180 --> 03:21.570
相反, 我将向您展示一个设置, 我们可以使用它来构建一个node express web应用程序或rest

03:21.570 --> 03:31.343
API, 只使用TypeScript和TypeScript编译器以及vanilla节点｡

03:31.343 --> 03:31.343
js的｡ 
