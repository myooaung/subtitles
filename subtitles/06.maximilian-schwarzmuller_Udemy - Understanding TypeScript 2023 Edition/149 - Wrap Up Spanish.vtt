WEBVTT

00:02.350 --> 00:04.720
-: Y eso es todo para los módulos.

00:04.720 --> 00:08.850
Ahora, el uso de módulos es una característica súper útil e importante

00:08.850 --> 00:11.130
porque le permite escribir un código más

00:11.130 --> 00:14.550
mantenible y manejable. Tenerlo todo en un solo archivo

00:14.550 --> 00:16.360
es un lío y realmente no es una opción

00:16.360 --> 00:19.360
para nada que no sea un proyecto realmente pequeño.

00:19.360 --> 00:22.350
El uso de espacios de nombres o módulos ES es

00:22.350 --> 00:24.710
una alternativa mucho mejor.

00:24.710 --> 00:27.620
Ya que se asegura de que cada archivo por sí mismo es relativamente

00:27.620 --> 00:30.780
pequeño, y por lo tanto se mantiene manejable.

00:30.780 --> 00:33.470
Y aún así, acabas con toda esa gran

00:33.470 --> 00:36.690
aplicación que quieres tener al final.

00:36.690 --> 00:38.580
Ahora, cuando se trata de estos

00:38.580 --> 00:42.883
dos enfoques, Namespaces y módulos ES, la recomendación clara es la

00:42.883 --> 00:46.520
de los módulos ES, porque se obtiene esa seguridad de tipo

00:46.520 --> 00:48.910
extra, y se asegura que cada archivo, tiene

00:48.910 --> 00:52.210
que especificar claramente lo que quiere.

00:52.210 --> 00:54.270
Con los espacios de nombres, bastaba

00:54.270 --> 00:56.280
con que un archivo importara algo, que

00:56.280 --> 00:58.350
otro archivo también necesita.

00:58.350 --> 00:59.970
Las bajadas de esto, si ese archivo,

00:59.970 --> 01:02.230
que importó la cosa se elimina ese otro

01:02.230 --> 01:05.640
archivo también se rompe, sin que te des cuenta.

01:05.640 --> 01:08.774
Al menos, sin que te des cuenta antes de ejecutar el código.

01:08.774 --> 01:11.340
Por lo tanto, utilice los módulos ES.

01:11.340 --> 01:14.250
Use namespaces en proyectos más pequeños,

01:14.250 --> 01:18.100
o si por alguna razón no puede usar módulos ES, y no puede

01:18.100 --> 01:19.970
usar otro bundler, que traduciría

01:19.970 --> 01:24.290
dichos módulos. Para el código de no módulo, que todas

01:24.290 --> 01:26.360
las obras y todos los navegadores.

01:26.360 --> 01:30.070
Pero aparte de eso, realmente se utilizan módulos, módulos ES.

01:30.070 --> 01:31.748
Y lo que acabo de decir es importante.

01:31.748 --> 01:34.828
Estos módulos aquí, ahora mismo de la forma en que los usamos,

01:34.828 --> 01:37.620
sólo funcionan en los navegadores modernos.

01:37.620 --> 01:39.670
Porque dependemos del navegador, para importar básicamente

01:39.670 --> 01:42.640
todos estos archivos. ¿Verdad?

01:42.640 --> 01:44.675
Ahora, por supuesto, queremos construir

01:44.675 --> 01:48.940
aplicaciones con typescript, que también se ejecutan en todos los navegadores.

01:48.940 --> 01:52.090
Internet Explorer 9, por ejemplo.

01:52.090 --> 01:54.130
Allí no se apoyaría esto.

01:54.130 --> 01:55.730
Esta sintaxis, no se admite allí.

01:55.730 --> 01:57.410
Por lo tanto, la aplicación no se ejecutaría allí.

01:57.410 --> 01:59.160
Es posible que también utilicemos algunas otras

01:59.160 --> 02:01.280
características que no están soportadas allí, pero principalmente

02:01.280 --> 02:03.840
esto aquí no está soportado en todos los navegadores.

02:03.840 --> 02:06.250
Así que, para hacer que funcione en todos los navegadores, podemos

02:06.250 --> 02:09.283
utilizar una herramienta de agrupación. Podemos usar Webpack por ejemplo.

02:09.283 --> 02:12.431
Para agrupar todo eso en un solo archivo JavaScript.

02:12.431 --> 02:15.810
Así, durante el desarrollo tenemos esta experiencia de múltiples archivos,

02:15.810 --> 02:19.060
de fuerte tipificación, pero cuando enviamos nuestro código en realidad

02:19.060 --> 02:21.310
tenemos un solo archivo.

02:21.310 --> 02:23.600
Y ahora la ventaja de enviar un solo archivo

02:23.600 --> 02:25.676
en lugar de todos estos archivos que tenemos

02:25.676 --> 02:28.177
aquí, es que también nos aseguramos de que el navegador

02:28.177 --> 02:31.181
no tenga que descargar tantos archivos.

02:31.181 --> 02:33.630
Porque cada archivo que hay que descargar, es

02:33.630 --> 02:37.010
un viaje de ida y vuelta extra. En la pestaña de red de las herramientas

02:37.010 --> 02:38.510
de desarrollo, puedes ver eso.

02:38.510 --> 02:40.650
El área en la que ves este gráfico de cascada,

02:40.650 --> 02:42.230
y ves esta pequeña caja blanca

02:42.230 --> 02:44.520
al principio de cada bloque.

02:44.520 --> 02:46.380
Esto es básicamente el tiempo de preparación que

02:46.380 --> 02:48.506
se necesita para configurar la solicitud de HDP.

02:48.506 --> 02:51.807
Por lo tanto, aunque los archivos que estamos descargando son muy

02:51.807 --> 02:54.700
pequeños, como se puede ver, esto todavía lleva algo de tiempo

02:54.700 --> 02:56.900
debido a toda la configuración adicional redundante,

02:56.900 --> 02:59.100
para cada solicitud de HDP.

02:59.100 --> 03:02.330
Así que hacer menos peticiones es una buena idea de todos modos, independientemente

03:02.330 --> 03:04.640
del soporte del navegador.

03:04.640 --> 03:08.370
Así que, por estas dos razones, la compatibilidad con los navegadores y la disminución de

03:08.370 --> 03:11.000
las peticiones, echaremos un vistazo al bundling, con Webpack,

03:11.000 --> 03:12.453
en la sección del próximo curso.
