WEBVTT

00:02.140 --> 00:03.970
-Yani bizim uygulamamızda. ts dosyası için,

00:03.970 --> 00:08.100
burada bu form gönderimini kontrol etmemiz gerekir.

00:08.100 --> 00:09.070
Bunun için burada

00:09.070 --> 00:10.800
bir form sabiti oluşturacağım

00:10.800 --> 00:12.170
ve forma belge sorgu seçicisi

00:12.170 --> 00:16.080
ile ulaşarak form etiketini sorgulayacağım.

00:16.080 --> 00:17.840
Ve tüm belgede yalnızca bir form etiketimiz

00:17.840 --> 00:18.820
olduğu için, elbette

00:18.820 --> 00:20.170
bunu getireceğiz.

00:21.150 --> 00:23.500
Bu da bize forma erişim sağlar.

00:23.500 --> 00:26.163
Bu forma bir olay dinleyicisi ekleyeceğim.

00:29.630 --> 00:31.873
Ben de gönderme olayını dinleyeceğim.

00:33.290 --> 00:35.330
Şimdi bu form elbette her zaman olduğu gibi null

00:35.330 --> 00:36.163
olabilir, ancak olmayacağını

00:36.163 --> 00:37.430
biliyoruz, bu nedenle TypeScript'e

00:37.430 --> 00:39.480
bunun null olmayacağını söylemek için bu eski

00:39.480 --> 00:42.850
güzel ünlem işaretini ekleyebiliriz.

00:42.850 --> 00:45.080
Ve sonra burada olay dinleyicimiz

00:45.080 --> 00:46.490
var ve tetiklenmesi

00:46.490 --> 00:49.160
gereken bir işlev tanımlayacak ve

00:49.160 --> 00:50.440
bu da arama adresi

00:50.440 --> 00:51.710
işleyici işlevi

00:51.710 --> 00:53.610
diyelim.

00:53.610 --> 00:55.420
Ve bu form her gönderildiğinde

00:55.420 --> 00:58.160
bu işlev tetiklenmelidir.

00:58.160 --> 01:00.880
Şimdi bu fonksiyonda olay nesnesini alacağız

01:00.880 --> 01:04.900
ve öncelikle burada olay önleme varsayılanını çağıracağım.

01:04.900 --> 01:07.240
Ayrıca TypeScript'e burada bazı ipuçları

01:07.240 --> 01:09.980
verelim ve bunun bir olay olduğunu bildirelim, böylece

01:09.980 --> 01:12.370
buradaki varsayılan önleme komutunun var

01:12.370 --> 01:14.033
olacağını bilsin.

01:14.870 --> 01:17.440
Bununla form gönderimini engelliyoruz, hiçbir

01:17.440 --> 01:19.900
istek gönderilmemesini sağlıyoruz, ancak

01:19.900 --> 01:21.980
şimdi kullanıcının girdiği adrese

01:21.980 --> 01:23.630
erişmek istiyorum.

01:23.630 --> 01:24.900
Şimdi bu çok zor olmamalı,

01:24.900 --> 01:27.820
burada bir girdimiz var ve bir adres fikri var, bu

01:27.820 --> 01:30.360
yüzden sonunda girdiye girilen değeri almak

01:30.360 --> 01:31.850
istiyoruz.

01:31.850 --> 01:33.780
Ve bunu burada basitçe başka bir

01:33.780 --> 01:36.010
sabit tanımlayarak yapabiliriz, belge

01:36.010 --> 01:37.610
sorgu seçicisiyle elde ettiğimiz

01:37.610 --> 01:40.500
adres girişi veya aslında öğeyi kimliğe göre al

01:40.500 --> 01:43.210
ve sonra kimlik, bu öğeye imzalanan fikir olan

01:44.050 --> 01:47.860
adresti ve daha önce olduğu gibi bunun asla boş olmayacağını biliyoruz,

01:47.860 --> 01:52.823
bu yüzden bu ünlem işaretini buraya ekleyebiliriz.

01:53.770 --> 01:58.730
Ve bununla birlikte, adres girişi nokta değerine erişerek

01:58.730 --> 02:00.370
buraya girilen adresimizi

02:00.370 --> 02:03.700
aldık, şimdi TypeScript neden buradaki

02:05.960 --> 02:09.350
değeri sevmiyor?

02:09.350 --> 02:12.020
Çünkü burada getirdiğimiz şeyin bir html

02:12.020 --> 02:14.500
giriş öğesi olduğunu bilmiyor.

02:14.500 --> 02:16.000
Öyleyse TypeScript'e söyleyelim.

02:16.000 --> 02:18.930
Buradaki typecasting ile bunu bir html giriş

02:18.930 --> 02:20.820
elemanına dönüştürelim.

02:20.820 --> 02:23.650
Artık TypeScript buradaki değer erişiminden

02:23.650 --> 02:25.040
şikayet etmiyor ve bize

02:25.040 --> 02:26.923
girilen adresi veriyor.

02:27.770 --> 02:29.710
Ve şimdi bunu Google'ın

02:30.570 --> 02:34.180
API'sine göndermemiz gerekiyor.

02:34.180 --> 02:37.850
Bunu bir sonraki derste başka bir üçüncü parti paket yardımıyla

02:37.850 --> 02:38.943
yapalım.
