WEBVTT

00:02.230 --> 00:04.860
Istruttore: Legata all'idea di una tupla è l'idea

00:04.860 --> 00:09.760
di avere un paio di identificatori specifici, costanti globali con cui si potrebbe lavorare

00:09.760 --> 00:12.710
nella propria applicazione, che si vogliono rappresentare

00:12.710 --> 00:15.020
come numeri, ma a cui si vuole assegnare un'etichetta

00:15.020 --> 00:18.530
leggibile dall'uomo.

00:18.530 --> 00:20.500
Per questo, esiste il tipo Enum.

00:20.500 --> 00:23.800
Anche questo esiste in alcuni linguaggi di programmazione superiori.

00:23.800 --> 00:25.780
JavaScript però non lo sa.

00:25.780 --> 00:26.613
Si presenta così.

00:26.613 --> 00:28.110
Ecco come si crea un enum.

00:28.110 --> 00:30.540
Si usa la parola chiave enum, che esiste solo

00:30.540 --> 00:33.060
nel mondo TypeScript, non in JavaScript, poi

00:33.060 --> 00:34.840
ci sono le parentesi graffe e quindi

00:34.840 --> 00:36.810
gli identificatori.

00:36.810 --> 00:39.141
Questo tipo, aggiunto da TypeScript,

00:39.141 --> 00:42.030
fornisce un elenco enumerato.

00:42.030 --> 00:45.070
Quindi queste etichette vengono tradotte in numeri a partire

00:45.070 --> 00:48.580
da zero, in modo da avere etichette leggibili per l'uomo con cui lavorare

00:48.580 --> 00:50.133
nel codice.

00:51.310 --> 00:53.500
Per mostrarvi un esempio, torniamo alla

00:53.500 --> 00:55.620
nostra persona con il suo ruolo.

00:55.620 --> 00:58.010
Copio il codice e lo commento perché

00:58.010 --> 00:59.710
lo modificherò un po'.

00:59.710 --> 01:01.600
E poi qui, mi sbarazzerò dell'assegnazione

01:01.600 --> 01:05.380
esplicita del tipo e tornerò all'inferenza, perché ora cambierò

01:05.380 --> 01:07.150
ruolo.

01:07.150 --> 01:10.330
Supponiamo di voler avere un amministratore, un autore

01:10.330 --> 01:12.350
e forse un utente di sola lettura.

01:12.350 --> 01:14.750
L'amministratore dovrebbe avere un

01:14.750 --> 01:18.660
ID pari a zero, l'utente di sola lettura uno, l'autore due.

01:18.660 --> 01:21.160
Ora, naturalmente, possiamo memorizzarlo esattamente in

01:21.160 --> 01:22.550
questo modo con questi numeri.

01:22.550 --> 01:24.830
Un aspetto negativo è che possiamo sempre aggiungere

01:24.830 --> 01:26.670
un numero per il quale potremmo non avere un

01:26.670 --> 01:30.320
ruolo e se poi, in un secondo momento, nel nostro codice, cerchiamo di estrarre il ruolo

01:30.320 --> 01:33.392
e usiamo il controllo if potrebbe portare a degli errori.

01:33.392 --> 01:37.160
Inoltre, noi sviluppatori abbiamo difficoltà a capire

01:37.160 --> 01:39.690
quale ruolo abbia questo utente.

01:39.690 --> 01:41.310
Era per l'autore?

01:41.310 --> 01:43.020
O è stata la lettura dell'utente?

01:43.020 --> 01:46.140
Potreste dimenticarlo dopo aver fatto pause più lunghe,

01:46.140 --> 01:48.810
quando lavorate in team più grandi e così via.

01:48.810 --> 01:50.540
Quindi, come sviluppatori,

01:50.540 --> 01:54.310
potreste volere identificatori leggibili dall'uomo,

01:54.310 --> 01:58.630
come ADMIN e READ ONLY USER, qualcosa del genere.

01:58.630 --> 02:00.240
Ora, naturalmente, possiamo

02:00.240 --> 02:02.880
usarlo e lavorare con questi valori di stringa.

02:02.880 --> 02:06.100
Il problema è che se poi abbiamo bisogno di un controllo

02:06.100 --> 02:11.100
if, controlliamo se il ruolo della persona è uguale a, era READ_ONLY_USER?

02:12.260 --> 02:13.500
O era una parola sola?

02:13.500 --> 02:15.380
Era con i trattini bassi?

02:15.380 --> 02:17.440
Dobbiamo ricordare come abbiamo scritto

02:17.440 --> 02:19.020
queste stringhe, quale testo

02:19.020 --> 02:20.970
esatto abbiamo inserito.

02:20.970 --> 02:24.330
Perché questa stringa con i trattini tra le parole

02:24.330 --> 02:27.430
non è ovviamente uguale a questa stringa.

02:27.430 --> 02:29.973
Quindi, qui, non lo faremmo mai, è di

02:31.150 --> 02:36.120
sola lettura se si prova a compilare e a stampare, perché, beh, il controllo

02:36.120 --> 02:39.170
semplicemente non risulta vero.

02:39.170 --> 02:42.150
Non abbiamo questo ruolo come persona, quindi non otteniamo

02:42.150 --> 02:43.930
l'output nella console.

02:43.930 --> 02:47.290
Quindi gli identificatori di stringhe hanno anche degli svantaggi.

02:47.290 --> 02:50.340
Per questi scenari, è abbastanza comune in JavaScript

02:50.340 --> 02:52.340
definire costanti globali.

02:52.340 --> 02:55.580
Ad esempio, admin, che poi contiene determinati

02:55.580 --> 02:58.053
valori come numeri o stringhe, entrambi

02:58.980 --> 03:00.060
possibili.

03:00.060 --> 03:01.700
I numeri, ovviamente, possono

03:01.700 --> 03:04.370
farci risparmiare codice e bit in memoria.

03:04.370 --> 03:09.370
E lì potremmo avere ADMIN, READ_ONLY e AUTHOR come questo

03:09.390 --> 03:10.870
e lì sotto, dobbiamo

03:10.870 --> 03:13.750
solo usare quel ruolo.

03:13.750 --> 03:16.460
Il vantaggio è che possiamo usarlo ovunque nel nostro

03:16.460 --> 03:17.343
codice.

03:18.230 --> 03:22.600
Quindi, ad esempio, se eseguo questo codice, se lo compilo e

03:22.600 --> 03:23.680
poi lo ricarico,

03:25.260 --> 03:28.570
lo vediamo come admin, quindi funziona e questo

03:28.570 --> 03:31.520
è uno schema comune in JavaScript.

03:31.520 --> 03:34.190
Il rovescio della medaglia è che ora, ancora una volta, il ruolo

03:34.190 --> 03:37.290
viene dedotto come un semplice numero, quindi si potrebbe memorizzare

03:37.290 --> 03:39.630
qualsiasi numero, anche un numero non supportato.

03:39.630 --> 03:42.450
Inoltre, dobbiamo definire tutte queste costanti,

03:42.450 --> 03:44.060
dobbiamo gestirle.

03:44.060 --> 03:45.920
È qui che un enum può farci risparmiare lavoro.

03:45.920 --> 03:48.730
Questo va benissimo, ma un enum rende tutto più semplice.

03:48.730 --> 03:50.970
Creiamo un enum con la parola chiave enum,

03:50.970 --> 03:54.250
possiamo chiamarlo Ruolo, la convenzione è di iniziare con

03:54.250 --> 03:55.550
il carattere maiuscolo

03:55.550 --> 03:58.620
perché anche l'enum è un tipo personalizzato.

03:58.620 --> 04:01.760
È il primo tipo personalizzato, ne scriveremo molti altri

04:01.760 --> 04:03.860
in questo corso, ma questo è il primo.

04:03.860 --> 04:06.560
E poi, dopo il nome del tipo che si vuole assegnare a questo

04:06.560 --> 04:09.520
enum, si aggiungono le parentesi graffe, proprio così, senza

04:09.520 --> 04:14.040
due punti, senza segno di uguale, solo con le parentesi graffe dopo il nome.

04:14.040 --> 04:15.800
Poi un punto e virgola.

04:15.800 --> 04:19.433
Qui si possono assegnare valori come

04:20.650 --> 04:21.973
admin, read only

04:22.950 --> 04:24.300
e author.

04:24.300 --> 04:28.180
E dietro le quinte questo qui riceve il numero zero, questo

04:28.180 --> 04:31.780
qui il numero uno, questo qui il numero due.

04:31.780 --> 04:34.650
E poi qui, potete accedere a Role. ADMIN, come per un oggetto,

04:34.650 --> 04:37.840
si accede al proprio identificatore.

04:37.840 --> 04:40.380
E si può usare anche in qualsiasi altro punto del

04:40.380 --> 04:43.890
codice, qui possiamo controllare se il ruolo è AUTORE e poi stampare

04:43.890 --> 04:46.710
autore e, naturalmente, non dovremmo vederlo se lo

04:46.710 --> 04:50.630
eseguo ora, perché abbiamo assegnato un ruolo di ADMIN qui.

04:50.630 --> 04:53.333
Ma la cosa più importante è che abbiamo fatto tutto

04:53.333 --> 04:57.490
questo con l'aiuto dell'enum, che assegna etichette ai numeri.

04:57.490 --> 04:59.210
Se diamo un'occhiata a questo aspetto in JavaScript.

04:59.210 --> 05:02.830
Quindi, nel codice compilato, vediamo come viene ricostruito.

05:02.830 --> 05:05.080
Alla fine, viene ricostruito con un se qui.

05:05.080 --> 05:07.940
Quindi una funzione che esegue se stessa.

05:07.940 --> 05:11.770
E il ruolo qui è semplicemente gestito come un oggetto alla fine, che

05:11.770 --> 05:14.550
ha la proprietà admin, una proprietà di sola lettura

05:14.550 --> 05:17.330
e la proprietà AUTHOR, dove memorizziamo i nostri

05:17.330 --> 05:19.970
valori numerici, si potrebbe dire.

05:19.970 --> 05:21.960
È un po' più complesso di così, ma questo

05:21.960 --> 05:24.210
è ciò che TypeScript fa alla fine per replicare

05:24.210 --> 05:26.700
questo costrutto enum nel codice JavaScript,

05:26.700 --> 05:28.560
quando compila il codice.

05:28.560 --> 05:30.700
In qualità di sviluppatori, abbiamo semplicemente

05:30.700 --> 05:32.680
questi numeri opportunamente creati.

05:32.680 --> 05:34.290
Se ci passate sopra, vedrete

05:34.290 --> 05:36.520
il numero che memorizzeremo lì e potrete

05:36.520 --> 05:39.883
usare questi numeri in modo leggibile.

05:40.750 --> 05:42.840
Per quanto riguarda gli enum, non ci si può limitare

05:42.840 --> 05:44.790
al comportamento predefinito.

05:44.790 --> 05:47.470
Se per qualche motivo non si vuole iniziare con lo zero

05:47.470 --> 05:50.533
come numero iniziale, si può aggiungere un segno di uguale qui

05:50.533 --> 05:54.080
dopo l'identificatore e inserire qualsiasi altro numero e ora l'admin

05:54.080 --> 05:56.610
è assegnato al numero cinque e gli altri identificatori

05:56.610 --> 05:59.610
dopo l'identificatore, dove si assegna il valore, lo prendono

05:59.610 --> 06:02.150
in considerazione e incrementano semplicemente

06:02.150 --> 06:04.580
questo valore iniziale.

06:04.580 --> 06:08.140
Quindi ora abbiamo fine, sei, sette, invece di zero, uno, due.

06:08.140 --> 06:10.642
Naturalmente, è possibile assegnare i propri

06:10.642 --> 06:14.820
valori a tutti questi identificatori, se si ha bisogno di numeri propri.

06:14.820 --> 06:17.070
Non ci si limita ai numeri, si può anche usare

06:17.070 --> 06:19.390
del testo qui, o anche mischiarlo come sto

06:19.390 --> 06:21.950
facendo qui, qualsiasi cosa va bene, ma spesso

06:21.950 --> 06:24.900
l'incremento predefinito dei numeri che partono da

06:24.900 --> 06:28.530
zero è quello che si vuole, ma se si vuole un comportamento diverso,

06:28.530 --> 06:31.530
se si vuole usare una stringa qui, e poi un numero qui,

06:31.530 --> 06:34.850
e anche qui un numero o forse una stringa di numeri, lo si può

06:34.850 --> 06:37.890
assolutamente fare, il vantaggio è che lo si definisce

06:37.890 --> 06:40.880
lassù e poi, in seguito, si fa sempre riferimento al

06:40.880 --> 06:44.700
tipo di ruolo a questo tipo personalizzato che si è creato, a questo

06:44.700 --> 06:48.270
enum personalizzato che si è creato.

06:48.270 --> 06:50.320
E lo si usa nei controlli di tipo if

06:50.320 --> 06:52.970
e nelle assegnazioni di tipo e si è a posto.

06:52.970 --> 06:56.090
Questo è il potere dell'enum ed è un ottimo costrutto

06:56.090 --> 06:59.420
quando si ha bisogno di identificatori leggibili dall'uomo

06:59.420 --> 07:03.173
e con un valore mappato dietro le quinte.
