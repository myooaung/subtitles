WEBVTT

00:02.350 --> 00:04.170
Eğitmen: Peki TypeScript nedir?

00:04.170 --> 00:06.860
Tüm bunlar ne hakkında, neden kullanalım?

00:06.860 --> 00:10.820
TypeScript bir JavaScript Üst Kümesidir.

00:10.820 --> 00:12.190
Şimdi, bu ne anlama geliyor?

00:12.190 --> 00:14.250
Bu, TypeScript'in sonuçta JavaScript

00:14.250 --> 00:16.370
üzerine inşa edilmiş bir dil, bir programlama

00:16.370 --> 00:18.710
dili olduğu anlamına gelir.

00:18.710 --> 00:20.940
Yepyeni bir dil değildir, bunun

00:20.940 --> 00:23.980
yerine JavaScript dilini alır ve ona yeni

00:23.980 --> 00:27.450
özellikler ve avantajlar ekler.

00:27.450 --> 00:32.840
JavaScript kodu yazmayı daha kolay ve daha güçlü hale getirdiğini söyleyebiliriz.

00:32.840 --> 00:35.624
Ancak, büyük bir dezavantajımız var.

00:35.624 --> 00:39.786
TypeScript, tarayıcı gibi JavaScript ortamları tarafından

00:39.786 --> 00:41.760
yürütülemez.

00:41.760 --> 00:44.270
Tarayıcılar TypeScript'i çalıştıramaz

00:44.270 --> 00:48.486
ve örneğin Node. js de TypeScript'i çalıştıramaz,

00:48.486 --> 00:52.250
bu nedenle JavaScript'i çalıştırabildiğimiz ortamlar TypeScript'i

00:52.250 --> 00:54.080
desteklemez.

00:54.080 --> 00:56.140
TypeScript'in arkasındaki fikir nedir o zaman?

00:56.140 --> 01:00.760
JavaScript'in daha iyi bir versiyonu ve biz onu kullanamıyor muyuz?

01:00.760 --> 01:02.130
Pek sayılmaz.

01:02.130 --> 01:06.050
TypeScript bir programlama dilidir, ancak aynı zamanda bir araçtır.

01:06.050 --> 01:10.049
Bu, typescript kodunuzu JavaScript'e derlemek için kodunuz

01:10.049 --> 01:14.410
üzerinde çalıştırdığınız güçlü bir derleyicidir.

01:14.410 --> 01:16.540
Yani, TypeScript'te kod yazarken

01:16.540 --> 01:20.260
sonuç olarak elde ettiğiniz şey JavaScript'tir.

01:20.260 --> 01:22.870
Ancak bu JavaScript kodunu yazmadınız,

01:22.870 --> 01:24.900
tüm yeni özelliklere ve tüm avantajlara

01:24.900 --> 01:27.480
sahip TypeScript kodunu yazdınız ve normal

01:27.480 --> 01:30.670
JavaScript kodu elde ettiniz.

01:30.670 --> 01:33.810
Tabii ki bu önemli bir soruyu gündeme getiriyor,

01:33.810 --> 01:36.710
sonuçta elde ettiğiniz şey normal JavaScript

01:36.710 --> 01:40.630
ise TypeScript nasıl yeni özellikler ekleyebilir?

01:40.630 --> 01:43.460
Cevap şu: TypeScript derleyicisi bu yeni özellikleri

01:43.460 --> 01:47.710
JavaScript geçici çözümlerine derler, bu nedenle sonunda size daha

01:47.710 --> 01:50.670
güzel bir sözdizimi, bir şeyi yapmanın daha kolay

01:50.670 --> 01:52.890
bir yolunu verebilir ve daha sonra

01:52.890 --> 01:56.571
bu daha güzel, daha kolay yolu başka türlü yazmanız gereken

01:56.571 --> 02:02.060
daha karmaşık bir JavaScript parçacığına derleyecektir.

02:02.060 --> 02:03.230
Yani sihirli değil,

02:03.230 --> 02:06.790
elbette JavaScript dilinde mümkün olmayan şeyleri

02:06.790 --> 02:08.610
ekleyemez, ancak kullanımı

02:08.610 --> 02:11.150
daha kolay olan yeni özellikler, daha

02:11.150 --> 02:15.020
güzel sözdizimi ve bunun gibi şeyler ekleyebilir.

02:15.020 --> 02:17.470
Buna ek olarak, TypeScript, elbette,

02:17.470 --> 02:20.900
adının zaten ima ettiği önemli bir şey yapar.

02:20.900 --> 02:22.740
JavaScript diline türler

02:22.740 --> 02:26.230
ekler, birazdan yakından bakacağımız bir özellik

02:26.230 --> 02:28.750
ekler, bu da aslında bir geliştirici

02:28.750 --> 02:31.541
olarak size, kodunuz çalışmadan ve hata

02:31.541 --> 02:35.070
tarayıcıda çalışma zamanında ortaya çıkmadan

02:35.070 --> 02:38.480
önce kodunuzdaki hataları daha erken belirleme

02:38.480 --> 02:41.350
fırsatı verecektir.

02:41.350 --> 02:44.320
Dolayısıyla, size yalnızca bazı yeni özellikler

02:44.320 --> 02:46.690
ve bir şeyi yapmanın daha güzel yollarını

02:46.690 --> 02:50.240
sunmakla kalmaz, aynı zamanda aksi takdirde çalışma zamanı

02:50.240 --> 02:54.153
hataları olarak alacağınız hataların geliştirme sırasında erken

02:54.153 --> 02:58.370
yakalanıp düzeltilebileceği ekstra hata denetimi sağlar.

02:58.370 --> 03:00.600
Peki, neden TypeScript kullanalım?

03:00.600 --> 03:02.570
İki sayıyı toplayan oldukça

03:02.570 --> 03:06.710
basit bir JavaScript işlevi olan bu örneği düşünün.

03:06.710 --> 03:08.760
Şimdi bunu çağırdığımda, lütfen iki sayı

03:08.760 --> 03:11.810
yerine iki karakter dizisi geçtiğime dikkat edin ve size

03:11.810 --> 03:14.810
bir saniye içinde bunun gibi bir şeyin gerçekçi bir şekilde

03:14.810 --> 03:18.090
gerçekleşebileceği gerçek bir örnek göstereceğim.

03:18.090 --> 03:20.270
Dolayısıyla, bu işlevi iki dizeyle çağırıyoruz

03:20.270 --> 03:22.519
ve sonuç olarak burada elde edeceğiniz

03:22.519 --> 03:25.260
şey muhtemelen istenmeyen bir davranıştır, çünkü

03:25.260 --> 03:27.240
iki dizeyi eklerseniz, JavaScript

03:27.240 --> 03:29.596
burada matematiksel bir hesaplama yapmak

03:29.596 --> 03:32.780
yerine dizeleri birleştirecektir.

03:32.780 --> 03:36.310
Dolayısıyla, sonuç beş değil, iki sayının birleştirilmiş

03:36.310 --> 03:38.980
dizesi olan yirmi üç olacaktır.

03:38.980 --> 03:41.690
Bu JavaScript'te karşılaşabileceğiniz bir

03:41.690 --> 03:43.530
hatadır, teknik bir hata değildir,

03:43.530 --> 03:46.720
muhtemelen bir çalışma zamanı hatası almayacaksınız,

03:46.720 --> 03:49.832
ancak kodunuzda mantıksal bir hata var.

03:49.832 --> 03:52.820
Bu da elbette JavaScript ile yazdığınız web uygulamalarında

03:52.820 --> 03:55.870
büyük sorunlara yol açabilir.

03:55.870 --> 03:59.360
Şimdi, elbette JavaScript'te hafifletme stratejilerimiz var,

03:59.360 --> 04:02.541
çalışma zamanında girdilerin türlerini kontrol etmek için

04:02.541 --> 04:05.440
fonksiyona bir if kontrolü ekleyebiliriz, ayrıca kullanıcı

04:05.440 --> 04:08.240
girdisini doğrulayabilir ve sterilize edebiliriz

04:08.240 --> 04:10.670
ve tüm bunları yapmak isteyebilsek de, geliştirme

04:10.670 --> 04:15.840
sırasında bunun gibi hataları yakalayabilseydik iyi olurdu.

04:15.840 --> 04:19.220
Ve neyse ki TypeScript ile bu mümkün, çünkü geliştiriciler

04:19.220 --> 04:21.810
burada geçersiz kod yazabilir ve JavaScript'te

04:21.810 --> 04:23.970
bunun gibi botları tanıtabilir ve TypeScript

04:23.970 --> 04:26.160
ile daha iyi kod yazmamıza ve bu tür sorunlardan

04:26.160 --> 04:30.060
kaçınmamıza yardımcı olan bir aracımız var.

04:30.060 --> 04:31.910
Şimdi buna daha yakından bakalım.
