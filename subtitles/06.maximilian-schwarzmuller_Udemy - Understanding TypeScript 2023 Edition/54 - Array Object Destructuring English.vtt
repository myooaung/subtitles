WEBVTT

1
00:00:02.100 --> 00:00:04.870
<v Instructor>Let's stick to arrays and objects.</v>

2
00:00:04.870 --> 00:00:06.750
Another important syntax,

3
00:00:06.750 --> 00:00:09.160
which you'll see a lot in modern JavaScript

4
00:00:09.160 --> 00:00:10.440
and also Typescript projects,

5
00:00:10.440 --> 00:00:13.133
is array and object destructuring.

6
00:00:14.180 --> 00:00:15.013
How does it work?

7
00:00:15.013 --> 00:00:17.220
Well, let's start with our array which we got,

8
00:00:17.220 --> 00:00:20.220
the hobbies array which got two hobbies.

9
00:00:20.220 --> 00:00:22.200
Let's say you want to extract these two hobbies

10
00:00:22.200 --> 00:00:26.340
and store them in variables or constants.

11
00:00:26.340 --> 00:00:28.891
Of course, we can do that with

12
00:00:28.891 --> 00:00:32.340
hobby one equal hobbies

13
00:00:32.340 --> 00:00:33.470
for index zero,

14
00:00:33.470 --> 00:00:34.820
which is the first element.

15
00:00:34.820 --> 00:00:38.720
And the same maybe with hobby two for hobbies at index one.

16
00:00:38.720 --> 00:00:40.500
This will pull out these two elements

17
00:00:40.500 --> 00:00:43.330
and store them in constants.

18
00:00:43.330 --> 00:00:44.720
It took us two lines of code,

19
00:00:44.720 --> 00:00:46.710
and the more elements you want to retrieve,

20
00:00:46.710 --> 00:00:48.493
the more lines of code it takes us.

21
00:00:49.340 --> 00:00:51.690
Array destructuring allows us to shorten it.

22
00:00:51.690 --> 00:00:53.090
With array destructuring,

23
00:00:53.090 --> 00:00:56.250
which also works with let by the way not just with const,

24
00:00:56.250 --> 00:00:59.760
you add square brackets on the left side of the equal sign,

25
00:00:59.760 --> 00:01:01.400
which is an unusual place.

26
00:01:01.400 --> 00:01:02.900
Haven't seen that before.

27
00:01:02.900 --> 00:01:04.780
And on the right side you have the array,

28
00:01:04.780 --> 00:01:06.480
which you want to destructure.

29
00:01:06.480 --> 00:01:08.430
Now destructure really means

30
00:01:08.430 --> 00:01:10.470
that you pull elements out of the array.

31
00:01:10.470 --> 00:01:13.570
And here on the left side between these square brackets,

32
00:01:13.570 --> 00:01:15.040
you store them in constants,

33
00:01:15.040 --> 00:01:17.250
or if you use let, in variables.

34
00:01:17.250 --> 00:01:21.170
So here, we could then have hobby one and hobby two.

35
00:01:21.170 --> 00:01:23.000
And what this syntax does is,

36
00:01:23.000 --> 00:01:25.640
it goes through the hobbies array,

37
00:01:25.640 --> 00:01:26.920
takes the first element

38
00:01:26.920 --> 00:01:29.050
and stores it in a constant with this name,

39
00:01:29.050 --> 00:01:30.290
takes the second element,

40
00:01:30.290 --> 00:01:32.320
stores it in a constant with this name.

41
00:01:32.320 --> 00:01:35.490
You can even add rest parameters here

42
00:01:35.490 --> 00:01:38.720
and have remaining hobbies here

43
00:01:38.720 --> 00:01:42.130
in case the hobbies array had more elements than just two.

44
00:01:42.130 --> 00:01:46.260
Then all the remaining elements which you didn't pull out

45
00:01:46.260 --> 00:01:48.070
into hobby one or hobby two

46
00:01:48.070 --> 00:01:51.290
will be stored in a new array called remaining hobbies.

47
00:01:51.290 --> 00:01:54.090
So they will be merged together into a new array.

48
00:01:54.090 --> 00:01:57.940
By the way destructuring does not change the original array.

49
00:01:57.940 --> 00:02:02.940
So if we console.log hobbies, hobby one, and hobby two here,

50
00:02:04.260 --> 00:02:06.840
you will see that hobbies is still the old array.

51
00:02:06.840 --> 00:02:08.840
It's not empty or anything like that.

52
00:02:08.840 --> 00:02:11.780
So the values which we pulled out in quotes

53
00:02:11.780 --> 00:02:14.870
are really just copied into new constants or variables,

54
00:02:14.870 --> 00:02:17.720
not really removed from the array.

55
00:02:17.720 --> 00:02:18.980
Now that's array destructuring.

56
00:02:18.980 --> 00:02:20.600
We've got the same for objects.

57
00:02:20.600 --> 00:02:21.690
We've got our person here.

58
00:02:21.690 --> 00:02:23.440
Now let's say we want to store name and age

59
00:02:23.440 --> 00:02:26.630
in standalone constants, or variables.

60
00:02:26.630 --> 00:02:28.480
Just as array destructuring,

61
00:02:28.480 --> 00:02:31.840
object destructuring works with both const and let.

62
00:02:31.840 --> 00:02:33.010
Here I'll go with const.

63
00:02:33.010 --> 00:02:34.930
And now we can use curly braces

64
00:02:34.930 --> 00:02:37.090
on the left side of the equal sign.

65
00:02:37.090 --> 00:02:38.883
Although a new syntax, I guess.

66
00:02:39.920 --> 00:02:43.750
And have our object, or the variable pointing at the object

67
00:02:43.750 --> 00:02:44.890
on the right side.

68
00:02:44.890 --> 00:02:46.110
Now by the way, please note,

69
00:02:46.110 --> 00:02:48.770
this is not an object type I'm assigning here.

70
00:02:48.770 --> 00:02:51.200
I don't have a colon here.

71
00:02:51.200 --> 00:02:54.080
It's really just curly braces like this on the left side

72
00:02:54.080 --> 00:02:58.210
without a colon after some constant name.

73
00:02:58.210 --> 00:03:01.000
So I'm not assigning the type of the value

74
00:03:01.000 --> 00:03:02.720
that could be stored a constant.

75
00:03:02.720 --> 00:03:05.470
I'm really just using a special syntax.

76
00:03:05.470 --> 00:03:08.450
Because here, we now also can refer

77
00:03:08.450 --> 00:03:11.340
to property names we have in an object,

78
00:03:11.340 --> 00:03:13.920
for example, name and age,

79
00:03:13.920 --> 00:03:18.030
to pull the values for these keys out of person

80
00:03:18.030 --> 00:03:21.283
and store them in constants of the same name.

81
00:03:23.290 --> 00:03:24.390
Now here I'm getting errors

82
00:03:24.390 --> 00:03:27.820
because at the very top I already have a age variable.

83
00:03:27.820 --> 00:03:30.890
And name turns out to be a globally available variable

84
00:03:30.890 --> 00:03:32.173
which exists anyways.

85
00:03:33.240 --> 00:03:34.940
So there, the workaround would be

86
00:03:34.940 --> 00:03:38.313
to really just use a different key name here,

87
00:03:40.240 --> 00:03:41.920
firstName, for example.

88
00:03:41.920 --> 00:03:45.020
And now we can pull out the value by that key here.

89
00:03:45.020 --> 00:03:46.900
So this is how object destructuring works.

90
00:03:46.900 --> 00:03:50.110
The important thing here is for array destructuring,

91
00:03:50.110 --> 00:03:52.260
elements are pulled out in order

92
00:03:52.260 --> 00:03:55.110
because an array is an ordered list.

93
00:03:55.110 --> 00:03:58.110
In objects, the order is not always guaranteed,

94
00:03:58.110 --> 00:04:00.720
and therefore, we don't pull elements out by position,

95
00:04:00.720 --> 00:04:02.070
but by key name.

96
00:04:02.070 --> 00:04:04.790
So the values, or the names you specify here

97
00:04:04.790 --> 00:04:05.930
between the curly braces,

98
00:04:05.930 --> 00:04:07.630
are not arbitrary.

99
00:04:07.630 --> 00:04:09.700
You can't come up with names here.

100
00:04:09.700 --> 00:04:13.860
These have to be property names you find in the object,

101
00:04:13.860 --> 00:04:16.010
so that the values for these keys

102
00:04:16.010 --> 00:04:18.160
can be pulled out of the object

103
00:04:18.160 --> 00:04:20.600
And then they're stored in constants or variables

104
00:04:20.600 --> 00:04:21.880
of the same name.

105
00:04:21.880 --> 00:04:24.120
If you would want to override that name,

106
00:04:24.120 --> 00:04:25.970
you could do so with a colon here.

107
00:04:25.970 --> 00:04:28.050
Again, it's not a type assignment here.

108
00:04:28.050 --> 00:04:29.680
It just sets a new name.

109
00:04:29.680 --> 00:04:31.970
So this is all JavaScript syntax,

110
00:04:31.970 --> 00:04:33.820
has nothing to do with Typescript.

111
00:04:33.820 --> 00:04:35.370
So here we could store this

112
00:04:35.370 --> 00:04:38.750
in a userName constant for example.

113
00:04:38.750 --> 00:04:39.840
And therefore, thereafter,

114
00:04:39.840 --> 00:04:44.040
we can console.log userName and age,

115
00:04:44.040 --> 00:04:45.290
but not firstName,

116
00:04:45.290 --> 00:04:47.870
because it basically overwrote firstName

117
00:04:47.870 --> 00:04:50.900
to be named userName in the constant which we create

118
00:04:50.900 --> 00:04:52.790
when we pull out values here.

119
00:04:52.790 --> 00:04:55.880
Age is not overwritten, so we can use it like that.

120
00:04:55.880 --> 00:04:58.183
Again, this is not a type assignment here.

121
00:04:58.183 --> 00:05:00.210
This is JavaScript syntax,

122
00:05:00.210 --> 00:05:03.680
where we alias rename a property

123
00:05:03.680 --> 00:05:05.500
we're pulling out of person.

124
00:05:05.500 --> 00:05:07.430
Also, just as before with the array,

125
00:05:07.430 --> 00:05:09.840
the person object itself has not changed.

126
00:05:09.840 --> 00:05:13.380
We really just copy these values out of the object.

127
00:05:13.380 --> 00:05:15.643
And therefore, we get this output here.

