WEBVTT

00:02.280 --> 00:04.510
Giảng viên: Loại liên quan đến những gì bạn vừa học về công

00:04.510 --> 00:06.483
cụ sửa đổi truy cập, là một công cụ sửa đổi khác.

00:07.572 --> 00:09.590
Và đó là công cụ sửa đổi chỉ đọc.

00:09.590 --> 00:11.310
Giả sử chúng ta có một số trường

00:11.310 --> 00:14.220
nhất định, không chỉ là riêng tư hoặc công khai,

00:14.220 --> 00:18.130
chúng cũng không nên thay đổi sau khi khởi tạo.

00:18.130 --> 00:21.410
Ví dụ: id không được thay đổi sau đó.

00:21.410 --> 00:23.520
Để làm rõ rằng nó không nên thay đổi,

00:23.520 --> 00:25.670
bạn cũng có thể thêm chỉ đọc ở đây.

00:25.670 --> 00:27.890
Và bạn cũng có thể thêm nó vào đây.

00:27.890 --> 00:30.920
Vì vậy, ở đây bạn cũng đã viết chỉ đọc riêng tư.

00:30.920 --> 00:33.990
Giờ đây, từ khóa chỉ đọc, giống như riêng tư và công khai,

00:33.990 --> 00:35.710
được giới thiệu bởi TypeScript,

00:35.710 --> 00:37.920
nó không tồn tại trong JavaScript.

00:37.920 --> 00:39.910
Nó đảm bảo rằng nếu bạn cố gắng

00:39.910 --> 00:43.180
ghi vào thuộc tính của nó sau đó, bạn sẽ thất bại.

00:43.180 --> 00:45.690
Vì vậy, bạn chỉ có thể sử dụng nó một lần trong

00:45.690 --> 00:48.620
quá trình khởi tạo nhưng sau đó, giả sử đối với addEmployee,

00:48.620 --> 00:52.430
vì bất kỳ lý do gì, tôi cố gắng thay đổi id thành d2, bạn thấy đấy,

00:52.430 --> 00:54.200
chúng tôi gặp lỗi ở đây, tôi không

00:54.200 --> 00:57.790
thể gán cho id vì nó ở chế độ chỉ đọc.

00:57.790 --> 01:00.800
Vì vậy, điều này bổ sung thêm một số an toàn để làm rõ rằng một

01:00.800 --> 01:04.160
thuộc tính nhất định chỉ nên được khởi tạo một lần và không nên thay

01:04.160 --> 01:05.920
đổi sau đó, một yêu cầu mà bạn có khá

01:05.920 --> 01:08.860
thường xuyên đối với một số thuộc tính nhất định trong các

01:08.860 --> 01:10.240
đối tượng của mình.

01:10.240 --> 01:12.630
Vì vậy, điều này có thể thêm an toàn loại bổ sung một

01:12.630 --> 01:14.910
lần nữa và làm cho ý định của bạn rất rõ ràng.

01:14.910 --> 01:16.320
Tất nhiên, bạn luôn có thể nói,

01:16.320 --> 01:18.350
Chà, tôi là người viết mã, tôi sẽ không

01:18.350 --> 01:20.470
làm bất cứ điều gì tôi không muốn.

01:20.470 --> 01:23.060
Chà, vẫn rất tốt nếu bạn xác định mã của

01:23.060 --> 01:24.630
mình một cách rõ ràng.

01:24.630 --> 01:28.320
Bởi vì a, bạn có thể quên những gì mình muốn làm nếu bạn tạm

01:28.320 --> 01:31.280
dừng viết mã trong vài tuần hoặc bất cứ điều gì,

01:31.280 --> 01:32.270
và b, bạn có thể đang

01:32.270 --> 01:34.340
làm việc theo nhóm hoặc chia sẻ mã

01:34.340 --> 01:36.550
của mình với người khác.

01:36.550 --> 01:39.390
Và nói chung, bạn nên viết mã rõ ràng và rõ

01:39.390 --> 01:42.460
ràng để làm cho ý định của bạn rất rõ ràng.

01:42.460 --> 01:44.280
Và chỉ đọc có thể giúp bạn ở đó, bởi

01:44.280 --> 01:47.230
vì nó làm cho mục tiêu của bạn trở nên rất rõ ràng.

01:47.230 --> 01:49.570
Nếu chúng ta xem app. js, như tôi đã đề cập, chúng

01:49.570 --> 01:53.050
tôi không thấy riêng tư hay công khai, cũng như chỉ đọc, bởi vì tất

01:53.050 --> 01:55.780
cả những thứ đó chỉ tồn tại trong TypeScript, không

01:55.780 --> 01:57.610
phải trong JavaScript.

01:57.610 --> 02:01.420
Chúng tôi cũng thấy một cái gì đó khác biệt cũng thú vị,

02:01.420 --> 02:04.580
các phương thức được thêm vào nguyên mẫu của hàm

02:04.580 --> 02:06.490
xây dựng của chúng tôi.

02:06.490 --> 02:08.830
Đối với điều này, bạn cần biết nguyên mẫu là gì và

02:08.830 --> 02:10.730
việc giới thiệu những nguyên mẫu đó trong

02:10.730 --> 02:12.520
khóa học này sẽ hơi quá nhiều.

02:12.520 --> 02:14.140
Trong phần đính kèm, bạn tìm thấy một số tài

02:14.140 --> 02:16.070
nguyên nơi bạn có thể đi sâu vào các nguyên mẫu.

02:16.070 --> 02:18.490
Đó là một phần quan trọng của JavaScript,

02:18.490 --> 02:22.210
đặc biệt là JavaScript trước khi chúng tôi có các lớp học và việc

02:22.210 --> 02:24.670
hiểu các nguyên mẫu sẽ không hại gì nếu bạn là

02:24.670 --> 02:26.490
nhà phát triển JavaScript.

02:26.490 --> 02:29.030
Vẫn ở đây, tôi sẽ không đi sâu hơn vào chúng vì đây

02:29.030 --> 02:31.160
là một chủ đề JavaScript thuần túy, không

02:31.160 --> 02:33.020
dành riêng cho TypeScript.

02:33.020 --> 02:34.150
Thật vậy, trong TypeScript,

02:34.150 --> 02:36.510
chúng ta thường làm việc ít hơn với các nguyên mẫu, bởi vì

02:36.510 --> 02:38.780
chúng ta có thể làm được nhiều việc hơn với các lớp.

02:38.780 --> 02:42.560
Và liên quan đến điều đó, chúng ta có một khái niệm lớp quan trọng

02:42.560 --> 02:43.503
khác, Kế thừa.
