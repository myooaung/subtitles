WEBVTT

00:02.180 --> 00:03.710
-: Per questo allegato trovate

00:03.710 --> 00:06.590
un progetto di partenza come lo avete già visto più volte

00:06.590 --> 00:07.640
nel corso, un progetto

00:07.640 --> 00:09.140
molto banale con un indice sostanzialmente

00:09.140 --> 00:12.030
vuoto. e un'applicazione

00:12.030 --> 00:14.400
vuota. ts e qui costruiremo

00:14.400 --> 00:17.140
una piccola applicazione demo,

00:17.140 --> 00:20.350
un piccolo progetto.

00:20.350 --> 00:24.705
Ora, l'applicazione che costruiremo non sarà troppo complessa,

00:24.705 --> 00:28.080
ma sarà una bella applicazione in cui potremo essenzialmente

00:28.080 --> 00:31.480
gestire un paio di progetti, dove un progetto è essenzialmente

00:31.480 --> 00:37.582
un obiettivo, si potrebbe dire, in modo da avere elenchi di progetti e due elenchi di progetti,

00:37.582 --> 00:43.270
uno attivo e uno finito, e saremo in grado di trascinare e rilasciare elementi da

00:43.270 --> 00:49.530
un elenco all'altro e cose del genere.

00:49.530 --> 00:52.734
Naturalmente l'applicazione in sé sarà bella, ma la cosa

00:52.734 --> 00:54.619
più importante è che ci permetterà

00:54.619 --> 00:56.570
di mettere in pratica molte delle

00:56.570 --> 00:59.160
cose che abbiamo imparato finora e questo è naturalmente

00:59.160 --> 01:02.240
l'obiettivo di questo modulo.

01:02.240 --> 01:04.210
Ora, una nota importante per questo

01:04.210 --> 01:05.710
modulo: scriverò tutto

01:05.710 --> 01:07.900
il codice in un unico file in questa

01:07.900 --> 01:12.010
singola applicazione. ts e questo diventerà

01:12.010 --> 01:17.000
quindi un file molto grande.

01:17.000 --> 01:19.420
Nel modulo successivo a questo mi addentrerò

01:19.420 --> 01:21.400
in questo problema e vi mostrerò come

01:21.400 --> 01:24.660
TypeSript ci permette di dividere questo file, ma per il momento,

01:24.660 --> 01:27.030
dato che non lo sappiamo ancora e finora non

01:27.030 --> 01:29.680
abbiamo avuto problemi di dimensioni, concentriamoci

01:29.680 --> 01:32.930
sulla nostra applicazione demo.

01:32.930 --> 01:34.710
E per questo inizieremo a lavorare

01:34.710 --> 01:37.420
sull'indice. file html.

01:37.420 --> 01:39.100
In allegato troverete un nuovo

01:39.100 --> 01:42.430
file da scaricare per sostituire tutto il contenuto di questo

01:42.430 --> 01:44.650
indice iniziale. Il file html con il file

01:44.650 --> 01:46.314
scaricato e lo stesso vale per

01:46.314 --> 01:48.700
l'applicazione. css non c'è ancora un

01:48.700 --> 01:50.360
file, basta aggiungere il

01:50.360 --> 01:52.870
file che trovate allegato a questa lezione

01:52.870 --> 01:54.410
al vostro progetto, accanto

01:54.410 --> 01:57.010
a index. html perché lì

01:57.010 --> 01:59.470
abbiamo già importato.

01:59.470 --> 02:02.200
Cosa sta succedendo in questi file?

02:02.200 --> 02:04.560
Nell'indice. file html che stiamo importando

02:04.560 --> 02:06.900
l'applicazione. css per alcuni stili

02:06.900 --> 02:10.484
e per l'applicazione. js per la logica JavaScript. Naturalmente non scriveremo

02:10.484 --> 02:12.240
alcun codice JavaScript come questo, ma il codice

02:12.240 --> 02:15.589
verrà scritto nell'applicazione.

02:15.589 --> 02:15.589
ma

02:15.589 --> 02:19.658
questo verrà compilato in un file JavaScript, ovviamente.

02:19.658 --> 02:23.320
Ora nel corpo del file html si trovano un

02:23.320 --> 02:25.890
paio di tag di template.

02:25.890 --> 02:28.436
I tag template sono tag html predefiniti supportati

02:28.436 --> 02:30.427
dai browser moderni che ci permettono

02:30.427 --> 02:34.080
di specificare del codice html che non viene caricato immediatamente,

02:34.080 --> 02:36.060
che non è visibile immediatamente,

02:36.060 --> 02:37.870
che non viene renderizzato immediatamente

02:37.870 --> 02:40.600
per così dire, ma che invece può essere raggiunto

02:40.600 --> 02:46.310
tramite JavaScript e quindi anche tramite TypeScript per poi renderizzarlo quando vogliamo renderizzarlo

02:46.310 --> 02:51.911
per controllarlo con JavaScript e TypeScript e qui vedete che ho un modulo con degli input liberi,

02:51.911 --> 02:57.500
fondamentalmente un titolo, una descrizione e un input di persone in cui possiamo decidere qual è

02:57.500 --> 03:00.500
il titolo del nostro progetto, qual è la descrizione

03:00.500 --> 03:05.550
del nostro progetto e quante persone possono essere assegnate ad esso o dovrebbero essere

03:05.550 --> 03:11.386
assegnate ad esso e poi il pulsante Aggiungi progetto.

03:11.386 --> 03:13.320
Poi abbiamo un altro modello

03:13.320 --> 03:15.450
che contiene solo un elemento di

03:15.450 --> 03:18.440
elenco che sarà usato per rendere un singolo

03:18.440 --> 03:20.100
progetto nel nostro elenco

03:20.100 --> 03:22.360
di progetti che è questo modello

03:22.360 --> 03:25.176
qui, vedrete che ho un'intestazione con

03:25.176 --> 03:27.280
una sezione h2 e poi un elenco non

03:27.280 --> 03:30.150
ordinato e in effetti questo elenco non ordinato

03:30.150 --> 03:33.988
conterrà più progetti singoli basati su questo modello

03:33.988 --> 03:42.357
che renderà i dati inseriti qui attraverso il modulo in alto e tutto sarà poi aggiunto con l'aiuto di TypeScript a questo

03:42.357 --> 03:45.930
div qui con l'id "app".

03:45.930 --> 03:48.970
Ora, l'app. css contiene solo alcuni stili

03:48.970 --> 03:50.790
css che si possono naturalmente esaminare.

03:50.790 --> 03:52.130
Non mi concentrerò su questo,

03:52.130 --> 03:54.020
poiché non ha nulla a che fare con TypeScript.

03:54.020 --> 03:56.960
Ora è nostro compito scrivere del codice TypeScript che

03:56.960 --> 04:00.216
alla fine recupera qualsiasi cosa l'utente inserisca qui,

04:00.216 --> 04:03.502
beh, in realtà prima di tutto rende questo modulo, poi recupera

04:03.502 --> 04:08.390
qualsiasi cosa l'utente inserisca, convalida ciò che l'utente inserisce, in modo che il

04:08.390 --> 04:11.975
titolo, la descrizione e le persone abbiano valori validi, ascolta

04:11.975 --> 04:15.030
il clic su questo pulsante o l'invio del modulo, per essere

04:15.030 --> 04:18.440
precisi, quindi crea un nuovo progetto, quindi un nuovo oggetto

04:18.440 --> 04:29.490
JavaScript, che viene memorizzato in un array, probabilmente, dove questo array viene poi reso in questo elenco e, naturalmente, l'intero elenco deve anche essere aggiunto al dominio, quindi questi

04:29.490 --> 04:36.790
sono tutti i passaggi e, naturalmente, si tratta di un bel po' di passaggi.

04:36.790 --> 04:39.580
Ora, se vi sentite molto sicuri, cogliete l'occasione

04:39.580 --> 04:42.900
per fare una pausa e provate a implementare tutto questo

04:42.900 --> 04:45.080
da soli, indipendentemente dall'aspetto

04:45.080 --> 04:48.141
finale, in modo da avere un'impostazione in cui questo

04:48.141 --> 04:49.990
forum è visibile, in cui gli utenti

04:49.990 --> 04:51.980
possono inserire qualcosa e in cui

04:51.980 --> 04:54.295
per ogni progetto inserito viene visualizzato

04:54.295 --> 04:57.810
un elemento dell'elenco che dovrebbe essere visibile, se lo

04:57.810 --> 05:00.539
raggiungete, è già fantastico, ma naturalmente

05:00.539 --> 05:06.340
lo implementeremo passo dopo passo e poi, una volta implementato, ci assicureremo anche che vengano

05:06.340 --> 05:09.037
visualizzati gli elenchi di strumenti e che si

05:09.037 --> 05:12.620
possa passare da un progetto all'altro con il drag and drop e così

05:12.620 --> 05:15.440
via.

05:15.440 --> 05:17.993
Quindi, per prima cosa, iniziamo.
