WEBVTT

00:02.160 --> 00:05.373
-: Yani projemize geri dönersek, orada webpack kullanmak istiyorsanız,

00:07.223 --> 00:09.948
öncelikle derlememden ve mevcut geliştirme sunucusundan çıkacağım

00:09.948 --> 00:10.870
ve sonra stat, orada webpack

00:10.870 --> 00:13.440
kullanabileceğimizden emin olacağım.

00:13.440 --> 00:16.420
Şimdi bu zaten package dot json dosyasının bir dosyası olduğundan,

00:16.420 --> 00:21.050
bu projeye daha fazla bağımlılık yüklemek için NPM'yi kullanabiliriz.

00:21.050 --> 00:23.410
Yani basitçe, bu projede daha fazla üçüncü parti

00:23.410 --> 00:24.940
kütüphaneye ihtiyacımız var.

00:24.940 --> 00:28.610
Burada kastettiğim, kodumuzu kullanarak belirli işlevleri

00:28.610 --> 00:31.480
sağlayan üçüncü taraf kütüphaneleri değil, geliştirmeyi

00:31.480 --> 00:33.930
bizim için çok verimli hale getiren bir proje

00:33.930 --> 00:37.157
iş akışı ve yapılandırması oluşturmamıza yardımcı olan

00:37.157 --> 00:40.430
üçüncü taraf kütüphaneleridir.

00:40.430 --> 00:45.110
Bunu NPM yüklü olarak, sadece geliştirme bağımlılığı

00:45.110 --> 00:48.600
olduğunu belirtmek için dash dash safe dash

00:48.600 --> 00:53.600
dev ve ardından webpack webpack dash CLI, webpack dash dev

00:53.713 --> 00:58.713
dash server typescript ve ts loader ile yapıyoruz.

01:01.030 --> 01:03.040
Yani bir sürü paket var ve ne işe yaradıklarını

01:03.040 --> 01:04.800
birazdan anlatacağım.

01:04.800 --> 01:06.680
Öncelikle enter tuşuna basalım ve

01:06.680 --> 01:08.485
bunların hepsinin projemize yüklendiğinden

01:08.485 --> 01:10.801
emin olalım, daha sonra her pakete bir göz atacağız

01:10.801 --> 01:14.100
ve neden yüklediğimizi göreceğiz, bu yüzden bunun bitmesini

01:14.100 --> 01:16.290
bekleyelim.

01:16.290 --> 01:18.530
Böylece benim için yükleme tamamlandı ve şimdi

01:18.530 --> 01:21.710
bununla birlikte, neyi yüklediğimizi analiz edelim.

01:21.710 --> 01:25.380
package dot json'da, yeni dev bağımlılıkları bölümü, ya

01:25.380 --> 01:27.063
da zaten vardı, ama şimdi orada

01:27.063 --> 01:29.474
bir sürü yeni paketimiz var demeliyim,

01:29.474 --> 01:31.290
bu paketler eklendi.

01:31.290 --> 01:33.690
Şimdi tüm bu paketler ne işe yarıyor?

01:33.690 --> 01:35.460
Webpack ile başlayalım.

01:35.460 --> 01:37.580
Webpack az önce bahsettiğim araçtır,

01:37.580 --> 01:40.080
şimdi oluşturacağımız tüm bu kurulumun

01:40.080 --> 01:41.780
kalbidir.

01:41.780 --> 01:43.980
Kodumuzu paketlemek ve ayrıca kodumuzu

01:43.980 --> 01:47.150
dönüştürmek için belirli işlevleri eklememize olanak

01:47.150 --> 01:49.210
tanıyan bir araçtır.

01:49.210 --> 01:52.470
Ve kod kısmımızı dönüştürmek önemli, burada bir typescript

01:52.470 --> 01:54.740
projemiz var, değil mi?

01:54.740 --> 01:56.620
Şimdi elbette webpack'i tüm JavaScript

01:56.620 --> 02:00.220
çıktılarını bir araya getirmek için kullanabiliriz, ancak webpack

02:00.220 --> 02:03.310
her ikisini de yapsaydı daha da güzel olurdu.

02:03.310 --> 02:06.250
Typescript kodumuzu JavaScript'e dönüştürün

02:06.250 --> 02:10.180
ve ardından gerçekten paketlenmiş bir Javascript dosyası

02:10.180 --> 02:13.420
yayınlayın ve webpack bunu yapabiliyor.

02:13.420 --> 02:16.610
Projemizde webpack komutlarını çalıştırmak için webpack

02:16.610 --> 02:18.922
CLI'ya ve kaputun altında webpack'i başlatan,

02:18.922 --> 02:21.603
dosyalarımızı değişiklikler için izleyen, bir

02:21.603 --> 02:24.286
şey değiştiğinde webpack'i yeniden derlemek

02:24.286 --> 02:27.056
için otomatik olarak tetikleyen ve sayfamızı otomatik

02:27.056 --> 02:30.180
olarak sunan yerleşik geliştirme sunucusuna sahip olmak

02:30.180 --> 02:34.760
için webpack dev sunucusuna ihtiyacımız var.

02:34.760 --> 02:37.300
Ve sonra typescript ve typescript yükleyicimiz

02:37.300 --> 02:39.460
var, ts yükleyicisi burada.

02:39.460 --> 02:42.850
Şimdi typescript'i makinemize global olarak yükledik,

02:42.850 --> 02:46.208
bu yüzden tsc dash w'yi çalıştırabiliyoruz.

02:46.208 --> 02:49.760
Şimdi, her proje için typescript'in bir kopyasını otomatik olarak

02:49.760 --> 02:53.450
yüklemek iyi bir uygulamadır, böylece bu proje için belirli bir typescript

02:53.450 --> 02:56.000
sürümüne sahip olursunuz.

02:56.000 --> 02:58.320
Genel typescript sürümünüzü değiştirirseniz,

02:58.320 --> 03:01.624
typescript'in kendisindeki değişiklikleri bozuyorsak

03:01.624 --> 03:05.170
proje sürümünüzü, proje kurulumunuzu bozmamanızın avantajları,

03:05.170 --> 03:07.280
bu nedenle bir proje için belirli bir

03:07.280 --> 03:10.340
typescript sürümünü kilitleyebiliriz, bu yüzden

03:10.340 --> 03:13.880
onu burada ayrı olarak kurduk.

03:13.880 --> 03:16.440
Ve ts loader artık webpack ile birlikte

03:16.440 --> 03:18.380
çalışacak bir paket.

03:18.380 --> 03:21.068
ts loader, webpack'e typescript kodunu Javascript'e

03:21.068 --> 03:24.396
nasıl dönüştüreceğini söyleyen bir pakettir, böylece

03:24.396 --> 03:29.180
webpack her ikisini de yapabilir, typescript loader'ın yardımıyla kodumuzu

03:29.180 --> 03:30.920
derleyebilir, bu da elbette

03:30.920 --> 03:33.370
kaputun altındaki typescript derleyicisini

03:33.370 --> 03:36.665
kullanır ve webpack ayrıca yayılan javascript dosyalarımızı

03:36.665 --> 03:44.260
paketlenmiş bir js dosyasına tek bir paketlenmiş kod dosyasına paketleyebilir.

03:44.260 --> 03:47.440
Peki, bununla birlikte, basitçe başlayalım ve tüm

03:47.440 --> 03:50.852
bu güzel şeyler için webpack'i kullanabilmemiz için

03:50.852 --> 03:53.223
bir webpack projesi kuralım.
