WEBVTT

00:02.300 --> 00:03.830
Instruktur: Jadi kami bekerja dengan

00:03.830 --> 00:07.350
departemen kami sedikit di sini dan saya membuat departemen akuntansi saya.

00:07.350 --> 00:09.610
Sekarang untuk aplikasi yang sedang kita bangun,

00:09.610 --> 00:12.120
kita mungkin memerlukan departemen, tentu saja, tetapi

00:12.120 --> 00:14.320
kita mungkin memerlukan lebih banyak informasi

00:14.320 --> 00:16.660
untuk jenis-jenis departemen tertentu.

00:16.660 --> 00:18.830
Kita mungkin memiliki departemen IT,

00:18.830 --> 00:22.680
yang memiliki ID, yang memiliki nama, yang memiliki karyawan, tetapi

00:22.680 --> 00:24.900
juga memiliki administrator, sesuatu

00:24.900 --> 00:28.180
yang hanya dimiliki oleh departemen IT misalnya.

00:28.180 --> 00:30.340
Kita mungkin memiliki departemen akuntansi

00:30.340 --> 00:34.280
yang mungkin juga memiliki ID, nama, dan karyawan, tetapi mungkin

00:34.280 --> 00:37.470
juga memiliki, katakanlah, laporan.

00:37.470 --> 00:41.030
Array laporan yang dihasilkannya, dan seterusnya.

00:41.030 --> 00:44.541
Jadi, Anda mungkin memiliki beberapa properti dasar dan juga metode yang harus

00:44.541 --> 00:46.970
dimiliki oleh semua departemen, tetapi kemudian kita

00:46.970 --> 00:49.050
mungkin memiliki versi khusus dari departemen-departemen

00:49.050 --> 00:51.900
ini dengan properti dan metode spesifiknya sendiri yang hanya

00:51.900 --> 00:54.660
dimiliki oleh departemen itu.

00:54.660 --> 00:58.100
Pewarisan bisa membantu kita mengimplementasikan sesuatu seperti ini.

00:58.100 --> 01:00.010
Jadi, bagaimana kita bisa memanfaatkan pewarisan di sini?

01:00.010 --> 01:01.670
Nah, kami memiliki departemen kelas kami.

01:01.670 --> 01:05.130
Sekarang, mari kita buat departemen khusus ini.

01:05.130 --> 01:08.483
Jadi di sini kita bisa memiliki departemen IT kelas.

01:09.610 --> 01:14.010
Dan di kelas ini di sini, saya ingin memanfaatkan nama dan ID dan karyawan

01:14.010 --> 01:17.270
dari departemen umum tetapi saya ingin menambahkan

01:17.270 --> 01:19.537
fitur saya sendiri.

01:19.537 --> 01:21.970
Sekarang kita bisa mewarisi kelas departemen dengan

01:21.970 --> 01:24.270
menggunakan kata kunci extends di sini dan kemudian

01:24.270 --> 01:25.970
kelas yang ingin kita warisi.

01:25.970 --> 01:27.530
Dalam hal ini, itu adalah departemen.

01:27.530 --> 01:30.600
Sekarang, yang penting Anda hanya bisa mewarisi dari satu kelas,

01:30.600 --> 01:33.010
jadi Anda tidak bisa mewarisi dari beberapa kelas,

01:33.010 --> 01:34.660
jika Anda membutuhkannya.

01:34.660 --> 01:38.070
Jadi sekarang, di sini, saya mewarisi dari departemen dan salah

01:38.070 --> 01:40.700
satu konsekuensinya adalah jika saya sekarang

01:40.700 --> 01:44.560
membuat departemen IT di sini, saya memang bisa memanggilnya seperti

01:44.560 --> 01:46.640
ini, dengan konstruktor semacam ini,

01:46.640 --> 01:49.400
meskipun kelas departemen IT kosong.

01:49.400 --> 01:52.830
Jika kita simpan itu, kita memang melihatnya berfungsi

01:52.830 --> 01:55.152
seperti sebelumnya, karena ketika kita

01:55.152 --> 01:59.610
mewarisi dari kelas lain, kelas yang mewarisi secara otomatis mendapatkan

01:59.610 --> 02:02.870
segala sesuatu yang dimiliki kelas dasar, departemen

02:02.870 --> 02:06.072
dalam hal ini, termasuk konstruktornya, jadi selama

02:06.072 --> 02:11.072
kita tidak menambahkan konstruktor khusus untuk kelas yang diwariskan ini, jadi

02:11.130 --> 02:14.760
untuk subkelas ini, konstruktor kelas dasar, jadi konstruktor

02:14.760 --> 02:17.830
ini secara otomatis digunakan ketika kita menginstansiasi

02:17.830 --> 02:20.800
subkelas kita.

02:20.800 --> 02:25.170
Jadi kita pada akhirnya secara ajaib memanggil konstruktor kelas dasar dengan

02:25.170 --> 02:27.562
argumen yang kita berikan di sini.

02:27.562 --> 02:30.350
Sekarang kita bisa menambahkan konstruktor kita sendiri,

02:30.350 --> 02:33.570
dengan menambahkan konstruktor di sini di bagian IT dan sekarang

02:33.570 --> 02:35.800
Anda lihat saya mendapatkan error.

02:35.800 --> 02:38.580
Pertama, kita sekarang tentu saja harus menerima data yang kita

02:38.580 --> 02:40.850
dapatkan di sini, meskipun kita bisa berargumen bahwa

02:40.850 --> 02:44.120
nama seharusnya bukan sesuatu yang perlu kita masukkan di sini.

02:44.120 --> 02:46.430
Dan seharusnya tidak juga akuntansi.

02:46.430 --> 02:49.110
Tetapi sebaliknya di sini, nama departemen,

02:49.110 --> 02:52.563
karena ini adalah kelas departemen IT, bisa selalu IT.

02:53.700 --> 02:56.910
Saya masih ingin menerima ID saya,

02:56.910 --> 03:01.130
tetapi sekarang saya ingin meneruskannya

03:01.130 --> 03:04.120
seperti nama tetap IT, ke konstruktor

03:04.120 --> 03:06.420
departemen.

03:06.420 --> 03:09.240
Dan untuk itu kita memiliki kata kunci khusus yang bisa kita gunakan,

03:09.240 --> 03:11.120
dan dalam hal ini kita harus menggunakannya.

03:11.120 --> 03:13.210
Dan itu super.

03:13.210 --> 03:15.580
Setiap kali Anda menambahkan konstruktor Anda

03:15.580 --> 03:18.400
sendiri di kelas yang mewarisi dari kelas lain, Anda harus

03:18.400 --> 03:21.200
menambahkan super di kelas yang mewarisi dan Anda harus

03:21.200 --> 03:23.790
mengeksekusinya seperti sebuah fungsi.

03:23.790 --> 03:28.070
Super di sini memanggil konstruktor dari kelas dasar, jadi

03:28.070 --> 03:31.300
konstruktor departemen dalam kasus ini.

03:31.300 --> 03:33.690
Dan sekarang super lainnya mengambil

03:33.690 --> 03:37.630
argumen dari konstruktor kelas induk, ID, dan nama.

03:37.630 --> 03:41.060
Jadi di sini saya bisa meneruskan ID, jadi ID yang saya dapatkan

03:41.060 --> 03:44.360
di sini hanya diteruskan ke super, dan saya bisa meng-kode

03:44.360 --> 03:46.860
keras nilai untuk nama, seperti IT.

03:46.860 --> 03:48.840
Jadi ini sekarang akan memanggil

03:48.840 --> 03:52.500
konstruktor kelas dasar dari dalam subkelas.

03:52.500 --> 03:55.310
Sekarang, yang penting, Anda harus memanggil super terlebih

03:55.310 --> 03:58.220
dahulu dalam konstruktor Anda sebelum Anda melakukan apa pun

03:58.220 --> 03:59.700
dengan kata kunci "this".

03:59.700 --> 04:03.860
Jadi, jika Anda berencana untuk menetapkan properti khusus lainnya di sini,

04:03.860 --> 04:06.670
Anda harus melakukannya setelah memanggil super.

04:06.670 --> 04:10.346
Dan memang saya ingin menambahkan sifat khusus saya sendiri di sini.

04:10.346 --> 04:13.528
Kita bisa menambahkan admin kita di sini.

04:13.528 --> 04:17.800
Katakanlah sebagai swasta, atau sebagai publik, sebenarnya.

04:17.800 --> 04:20.878
Sebagai properti publik, admin,

04:20.878 --> 04:25.630
dan itu harus berupa array string, katakanlah.

04:25.630 --> 04:27.780
Maka saya tidak ingin meneruskan

04:27.780 --> 04:31.460
ini ke kelas dasar saya karena kelas departemen tidak

04:31.460 --> 04:34.670
menginginkan data administrator.

04:34.670 --> 04:38.800
Sebagai gantinya, saya ingin menyimpan ini dalam properti departemen

04:38.800 --> 04:42.150
TI jadi di sini kita dapat menambahkan admin sebagai bidang

04:42.150 --> 04:44.922
yang mengambil beberapa administrator dan menyimpan

04:44.922 --> 04:47.290
admin di sana, atau karena saya menggunakan

04:47.290 --> 04:49.070
publik di sini, saya sudah menggunakan

04:49.070 --> 04:52.020
pintasan itu di mana properti dengan nama yang sama

04:52.020 --> 04:55.160
akan dibuat dan data yang kita masukkan ke dalam argumen

04:55.160 --> 04:57.530
ini disimpan di properti yang dibuat secara

04:57.530 --> 05:00.148
otomatis.

05:00.148 --> 05:03.710
Masih untuk memperjelas bahwa super harus dipanggil terlebih dahulu,

05:03.710 --> 05:07.610
saya akan mengambil rute yang lebih panjang, menambahkan admin di sini, seperti

05:07.610 --> 05:12.610
itu, dan kemudian di sini katakan, ini. admin = admin.

05:13.260 --> 05:15.160
Lagi-lagi, jalan pintasnya akan lebih pendek.

05:15.160 --> 05:17.830
Saya melakukan ini di sini untuk menunjukkan dan membuatnya

05:17.830 --> 05:21.020
benar-benar jelas bahwa jika Anda menggunakan sesuatu yang menggunakan

05:21.020 --> 05:24.480
kata kunci "this" Anda harus melakukannya setelah memanggil super.

05:24.480 --> 05:27.640
Dan dengan itu jika kita menyimpannya, saya akan mendapatkan kesalahan,

05:27.640 --> 05:29.530
karena saya tidak mengoper admin apa pun, jadi

05:29.530 --> 05:30.920
mari kita lakukan itu di sini.

05:30.920 --> 05:33.920
Max adalah satu-satunya admin yang saya lewati di sini.

05:33.920 --> 05:36.950
Sekarang kita bisa menyimpannya dan menyusunnya tanpa kesalahan dan

05:36.950 --> 05:39.910
sekarang di sini, memang kita melihat departemen kita di sini.

05:39.910 --> 05:41.840
Sekarang memiliki nama IT.

05:41.840 --> 05:44.670
Dan jika kita console log seluruh departemen,

05:44.670 --> 05:49.670
dan kita mungkin dapat mengganti nama ini dari akuntansi menjadi IT dan

05:50.220 --> 05:54.250
kemudian console. catat di sini.

05:54.250 --> 05:57.570
Tentu saja mengganti nama itu opsional, hanya saja lebih masuk akal, mengingat

05:57.570 --> 06:00.160
bahwa kita sedang membangun departemen TI di sini.

06:00.160 --> 06:02.510
Sekarang saya konsol mencatat seluruh departemen,

06:02.510 --> 06:06.110
kita memang melihat kita punya admin, tetapi kita juga punya karyawan

06:06.110 --> 06:11.110
dan segala sesuatu yang saya atur di kelas departemen saya di sini.

06:12.000 --> 06:13.990
Jadi itulah inheritance in action,

06:13.990 --> 06:16.520
fitur yang sangat berguna, karena sekarang

06:16.520 --> 06:20.770
tentu saja, kita juga dapat membuat departemen akuntansi kita di sini dengan

06:20.770 --> 06:23.260
memperluas departemen dan di sana kita kemudian

06:23.260 --> 06:27.030
dapat menambahkan hal-hal spesifik akuntansi kita.

06:27.030 --> 06:29.540
Jadi kita masih bisa menggunakan konstruktor

06:29.540 --> 06:31.700
di sini, dan sekarang mungkin dengan jalan

06:31.700 --> 06:34.400
pintas, menerima beberapa laporan di sini yang

06:34.400 --> 06:36.170
mungkin menjadi properti pribadi

06:36.170 --> 06:40.950
dan kemudian kita memiliki addReport yang mengambil teks, yang seharusnya berupa string,

06:40.950 --> 06:45.360
dan kemudian kita menjangkau laporan di sini dan mendorong teks sebagai item

06:45.360 --> 06:49.430
ke dalam laporan dan mungkin kita juga memiliki getReports di sini dan di

06:49.430 --> 06:56.990
sana kita hanya konsol.

06:56.990 --> 06:56.990
log (ini. reports)

06:57.563 --> 07:00.860
atau kita menamakannya printReports, oleh karena itu lebih masuk akal.

07:00.860 --> 07:02.720
Dan sekarang kita akan memiliki versi yang sangat

07:02.720 --> 07:04.890
spesial dari sebuah departemen dengan dua metode yang

07:04.890 --> 07:06.740
tidak dimiliki oleh departemen dasar dan dengan

07:06.740 --> 07:08.100
properti ekstra yang tidak dimiliki

07:08.100 --> 07:09.840
oleh departemen dasar.

07:09.840 --> 07:13.000
Dan tetap saja, kami mendapatkan segalanya dari departemen dasar.

07:13.000 --> 07:15.560
Nama, yang akan saya setel ke accounting

07:15.560 --> 07:17.950
di sini, dan ID, yang juga kita teruskan

07:17.950 --> 07:20.260
ke konstruktor departemen dasar.

07:20.260 --> 07:22.120
Dan dengan itu, di bawah sana,

07:22.120 --> 07:24.770
jika kita membuat akuntansi kita di sini

07:24.770 --> 07:27.510
dengan AccountingDepartment baru, kita

07:27.510 --> 07:31.750
dapat memasukkan ID kita dan kemudian laporan kita.

07:31.750 --> 07:34.340
Katakanlah itu adalah larik kosong pada awalnya.

07:34.340 --> 07:39.340
Kemudian kita bisa memanggil addReport, ada yang salah, tidak pernah sebagus itu

07:40.550 --> 07:43.446
tentu saja, di bagian akuntansi saya kira, dan kemudian

07:43.446 --> 07:48.446
kita juga bisa mencetak laporan kita di sini seperti itu dan dengan semua itu terkompilasi

07:50.070 --> 07:52.630
dengan baik dan kita mendapatkan laporan di

07:52.630 --> 07:55.710
sini dan kita lihat, departemen TI misalnya, tidak

07:55.710 --> 07:58.890
akan memiliki laporan apa pun.

07:58.890 --> 08:01.820
Departemen akuntansi melakukannya karena pewarisan, di

08:01.820 --> 08:05.623
mana kami mewarisi fitur tertentu dan menambahkan fitur kami sendiri.
