WEBVTT

00:02.170 --> 00:04.780
-: Quindi, l'obiettivo è costruire un componente per la lista delle cose

00:04.780 --> 00:06.330
da fare e quindi qui, nella cartella dei sorgenti,

00:06.330 --> 00:08.600
aggiungerò una nuova sottocartella, components, e al suo interno

00:08.600 --> 00:11.280
una "to-doList". tsx", che conterrebbe il mio

00:11.280 --> 00:13.690
componente dell'elenco delle cose da fare.

00:13.690 --> 00:15.370
Ora, per costruire un componente

00:15.370 --> 00:17.030
react, dobbiamo importare React

00:17.030 --> 00:20.250
da "react", altrimenti JXS non funzionerà in questo file.

00:20.250 --> 00:22.820
Poi creo la mia costante dell'elenco delle cose da fare,

00:22.820 --> 00:24.530
che memorizza una funzione freccia

00:24.530 --> 00:26.990
e naturalmente non deve essere una funzione freccia,

00:26.990 --> 00:30.320
si può anche usare una funzione con la parola chiave function.

00:30.320 --> 00:33.160
Ora esporteremo questo.

00:33.160 --> 00:36.500
Utilizziamo ora le nostre funzioni extra di typescript e impostiamo il tipo

00:36.500 --> 00:39.370
di questo oggetto su react. fc per indicare che non

00:39.370 --> 00:42.010
si tratta di una funzione regolare, ma di

00:42.010 --> 00:43.950
un componente funzionale.

00:43.950 --> 00:46.920
Si ottiene quindi un errore perché non viene restituito

00:46.920 --> 00:49.790
qualcosa che si qualifica come elemento di reazione.

00:49.790 --> 00:53.250
Quindi qui dovremmo restituire, diciamo, un elenco non ordinato.

00:53.250 --> 00:54.850
Poiché voglio rendere un elenco,

00:54.850 --> 00:58.000
per ora ha senso restituire un elenco non ordinato.

00:58.000 --> 01:02.740
Ora, su questo elenco non ordinato, voglio produrre gli elementi dell'elenco.

01:02.740 --> 01:07.230
Quindi, qui, potremmo aspettarci di ottenere i nostri impegni, che sono

01:07.230 --> 01:09.240
un array, e in un array abbiamo un

01:09.240 --> 01:11.690
oggetto in cui ogni elemento ha un ID.

01:11.690 --> 01:15.627
Diciamo che t1 è l'attività da svolgere e un testo

01:15.627 --> 01:18.100
come "Terminare il corso". Questo è solo un elemento, ma naturalmente si possono

01:18.100 --> 01:18.933
avere più oggetti

01:18.933 --> 01:20.800
di questo tipo in questo array.

01:20.800 --> 01:22.010
Qui, nel nostro elenco, possiamo quindi

01:22.010 --> 01:24.620
produrre dinamicamente i to-dos e mapparli in un elenco di elementi dell'elenco.

01:24.620 --> 01:29.620
Quindi, passiamo in rassegna tutti i to-do, questa è una funzione JavaScript

01:30.250 --> 01:32.930
incorporata, ovviamente, la funzione map,

01:32.930 --> 01:35.070
e restituiamo un elemento della lista

01:35.070 --> 01:37.740
per ogni elemento di questo array e in questo

01:37.740 --> 01:41.530
elemento della lista, ho impostato "to-do". text" come contenuto dell'elemento dell'elenco e aggiungere questa speciale

01:41.530 --> 01:45.570
chiave di propulsione, che React vuole

01:45.570 --> 01:47.870
in realtà su elementi ripetuti che si trovano

01:47.870 --> 01:49.620
uno accanto all'altro.

01:49.620 --> 01:51.980
In questo caso, dovremmo scegliere qualcosa di unico e

01:51.980 --> 01:54.130
l'ID dovrebbe essere un identificatore unico.

01:54.130 --> 01:57.710
Con questo, stiamo creando un elenco di cose da fare.

01:57.710 --> 02:00.470
Integriamo ora il componente della lista delle cose da

02:00.470 --> 02:02.860
fare nel componente dell'app e per questo possiamo

02:02.860 --> 02:05.520
ovviamente andare nel componente dell'app, importare

02:05.520 --> 02:06.930
"TodoList" da ". /components/TodoList"

02:06.930 --> 02:11.530
come questo, il ". tsx" sarà aggiunto automaticamente dal flusso di lavoro di compilazione

02:11.530 --> 02:14.350
che stiamo utilizzando.

02:14.350 --> 02:17.160
E poi qui, all'interno del nostro div, possiamo rendere

02:17.160 --> 02:18.850
"TodoList" in questo modo.

02:18.850 --> 02:21.440
Se ora salviamo e torniamo alla pagina di

02:21.440 --> 02:24.190
esecuzione, vedremo questo impegno qui.

02:24.190 --> 02:25.870
Lo stile è pessimo e possiamo aggiungerne

02:25.870 --> 02:29.350
di migliori in seguito, ma per il momento dovrebbe andare bene.

02:29.350 --> 02:31.680
Tuttavia, questo non è molto realistico.

02:31.680 --> 02:35.620
Quando stiamo costruendo questa applicazione per gli elenchi di cose da fare, in seguito voglio

02:35.620 --> 02:37.950
essere in grado di aggiungere nuove cose da fare con un componente

02:37.950 --> 02:40.063
separato, che non abbiamo ancora.

02:40.063 --> 02:42.920
E probabilmente gestiremo i to-dos in

02:42.920 --> 02:45.570
questo componente dell'applicazione,

02:45.570 --> 02:48.810
perché qui avremo un componente che aggiunge

02:48.810 --> 02:55.280
i to-dos e che potrà parlare con questo componente dell'applicazione.

02:55.280 --> 02:56.690
Qui gestiamo il nostro array

02:56.690 --> 02:59.650
di to-dos e aggiungiamo to-dos all'array o cancelliamo

02:59.650 --> 03:01.510
to-dos dall'array.

03:01.510 --> 03:04.220
All'elenco delle cose da fare passeremo poi questo array.

03:04.220 --> 03:06.930
Quindi, anche se non lo stiamo ancora gestendo, probabilmente

03:06.930 --> 03:09.270
l'array "todos" non si trova nell'elenco delle cose

03:09.270 --> 03:11.660
da fare, ma nel componente dell'applicazione.

03:11.660 --> 03:15.010
È più realistico che questo array finisca poi qui, quindi

03:15.010 --> 03:16.740
possiamo già spostarlo qui.

03:16.740 --> 03:20.093
Ora dobbiamo passarlo a "TodoList. A questo scopo, naturalmente, possiamo utilizzare gli oggetti di scena.

03:20.930 --> 03:23.600
Quindi, nell'elenco delle cose da fare, si potrebbe avere un oggetto

03:23.600 --> 03:25.640
di proprietà, il cui nome dipende ovviamente da noi,

03:25.640 --> 03:28.370
perché stiamo definendo questo componente, e possiamo definire come

03:28.370 --> 03:30.350
deve essere chiamato il suo oggetto di proprietà.

03:30.350 --> 03:32.100
Possiamo inserire il nostro array "todos".

03:32.100 --> 03:35.010
Ora, abbiamo già visto che all'IDE non piace e se provo

03:35.010 --> 03:37.820
a salvarlo, otteniamo un errore di compilazione.

03:37.820 --> 03:40.650
Abbiamo un errore di compilazione perché

03:40.650 --> 03:45.400
la proprietà "items" non esiste sul tipo whatever.

03:45.400 --> 03:47.830
Quindi, in pratica, non esiste su questo tipo di intersezione

03:47.830 --> 03:50.440
che, alla fine, definisce la struttura degli oggetti ricevuti

03:50.440 --> 03:52.070
da "TodoList". Perché quando si usa il typescript

03:52.070 --> 03:55.300
con React, bisogna essere chiari sui tipi con cui si lavora.

03:55.300 --> 03:59.470
Questo non significa solo dire a typescript che questa è un tipo speciale

03:59.470 --> 04:02.110
di funzione, no, significa anche che se ci si

04:02.110 --> 04:05.250
affida a oggetti di scena in qualche componente, si dice

04:05.250 --> 04:08.360
a typescript come questi oggetti di scena dovrebbero

04:08.360 --> 04:11.020
apparire e come sono strutturati.

04:11.020 --> 04:14.860
Quindi, nel componente della lista delle cose da fare, riceviamo dei puntelli

04:14.860 --> 04:17.420
qui, giusto, questo è il normale React.

04:17.420 --> 04:19.400
E sugli oggetti di scena abbiamo probabilmente la proprietà del nostro oggetto.

04:19.400 --> 04:23.530
Abbiamo un oggetto chiamato "items" ed è

04:23.530 --> 04:26.200
proprio quello che ho detto

04:26.200 --> 04:30.323
qui sopra: "Ho questo oggetto items". Il problema ora è che questo tecnicamente funzionerebbe, ma il dattiloscritto

04:31.420 --> 04:33.430
non si interrompe ancora.

04:33.430 --> 04:35.067
Non abbiamo detto a typescript che il nostro

04:35.067 --> 04:37.140
oggetto deve avere una proprietà "items".

04:37.140 --> 04:39.503
Per dirlo, possiamo usare il fatto

04:39.503 --> 04:41.950
che questo tipo di componente di funzione

04:41.950 --> 04:45.063
è in realtà un tipo generico.

04:45.063 --> 04:46.913
Un tipo generico in cui si possono definire tutti

04:47.840 --> 04:50.510
gli oggetti di scena extra, oltre a quello predefinito dei figli, che ogni

04:50.510 --> 04:52.170
componente ha e che ci aspettiamo qui.

04:52.170 --> 04:54.250
Possiamo quindi aggiungere le parentesi angolari

04:54.250 --> 04:58.132
qui e aggiungere il nostro oggetto che descrive la struttura di questo oggetto "props"

04:58.132 --> 05:00.710
che stiamo ottenendo qui oppure, per mantenere il nostro

05:00.710 --> 05:03.670
codice più snello, lo facciamo in un'interfaccia aggiuntiva

05:03.670 --> 05:06.170
qui, che è totalmente opzionale.

05:06.170 --> 05:09.670
Quindi potremmo avere gli oggetti di scena della nostra lista di cose da fare

05:09.670 --> 05:12.350
e questo descrive l'aspetto dei nostri oggetti di scena.

05:12.350 --> 05:15.120
Qui mi aspetto di ottenere una chiave "items",

05:15.120 --> 05:18.260
dove abbiamo un array di oggetti in cui ogni oggetto

05:18.260 --> 05:20.510
ha un ID, che è una stringa, e ha un

05:20.510 --> 05:23.380
testo, che è una stringa.

05:23.380 --> 05:26.120
Questi sono i dati che gestiamo qui.

05:26.120 --> 05:30.020
Abbiamo un array di oggetti con una stringa

05:30.020 --> 05:32.850
di ID e una stringa di testo.

05:32.850 --> 05:34.370
Ciò che mi aspetto di ottenere è "props",

05:34.370 --> 05:36.070
un array di oggetti di questo tipo e se siamo

05:36.070 --> 05:38.940
qui, possiamo puntare all'interfaccia props dell'elenco di cose

05:38.940 --> 05:40.700
da fare e ora tutto va bene. Ora typescript capisce

05:40.700 --> 05:42.670
che qui avremo degli oggetti,

05:42.670 --> 05:45.040
dove avremo un oggetto e questo

05:45.040 --> 05:48.640
oggetto sarà un array dove abbiamo una chiave ID

05:48.640 --> 05:52.145
e una chiave testo per ogni

05:52.145 --> 05:55.000
elemento dell'array.

05:55.000 --> 05:56.920
Ora, se salviamo questo file, viene compilato

05:56.920 --> 05:58.870
e si ottiene di nuovo l'output funzionante.

05:58.870 --> 05:59.850
Quindi, ancora una volta, si tratta di typescript usato con React.

05:59.850 --> 06:02.390
Non lo usiamo solo per dire a React o a typescript che si tratta

06:02.390 --> 06:04.188
di un componente funzionale, ma anche per

06:04.188 --> 06:06.830
gli oggetti di scena che questo componente eventualmente

06:06.830 --> 06:10.000
riceve e questo ci aiuta molto con la sicurezza dei tipi.

06:10.000 --> 06:13.490
Evita che io qui pensi accidentalmente che

06:13.490 --> 06:15.130
si chiami "todos". No, non è supportato, viene visualizzato un errore.

06:15.130 --> 06:19.060
Si tratta di articoli.

06:19.060 --> 06:21.165
Tutti voi li vedrete completarsi automaticamente qui.

06:21.165 --> 06:23.330
Quindi la codifica diventa molto più semplice quando

06:23.330 --> 06:24.910
si lavora con il dattiloscritto. E questo, naturalmente, è l'intero vantaggio del dattiloscritto:

06:24.910 --> 06:27.160
semplifica la codifica, evita errori inutili e, come si può vedere, lo fa anche in

06:27.160 --> 06:28.400
un'applicazione di tipo react.

06:28.400 --> 06:30.670
Naturalmente, però, non abbiamo finito.

06:30.670 --> 06:34.420
Al momento, i nostri to-dos non cambiano mai e voglio

06:34.420 --> 06:36.640
cambiare questa

06:36.640 --> 06:39.930
situazione, voglio avere un componente che

06:39.930 --> 06:44.120
ci permetta di aggiungere nuovi to-dos.

06:44.120 --> 06:46.080
Lavoriamo quindi su questo aspetto.
