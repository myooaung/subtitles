WEBVTT

00:02.240 --> 00:04.870
Présentateur : Donc, nous avons ajouté notre premier composant.

00:04.870 --> 00:06.090
Ajoutons-en un deuxième.

00:06.090 --> 00:09.970
NewTodo. tsx est un nom de fichier.

00:09.970 --> 00:13.060
Là, bien sûr, nous importons react de react.

00:13.060 --> 00:16.170
Et vous pourriez bien sûr aussi construire des composants basés sur les classes.

00:16.170 --> 00:18.270
Cette solution est également entièrement prise

00:18.270 --> 00:22.410
en charge, mais je vais utiliser ce style moderne de composants fonctionnels uniquement.

00:22.410 --> 00:24.070
Donc, ici encore, nous avons une fonction

00:24.070 --> 00:26.180
qui constituera notre composant plus tard.

00:26.180 --> 00:29.258
J'exporte NewTodo par défaut, j'ajoute une affectation

00:29.258 --> 00:31.260
de type et je précise qu'il s'agit

00:31.260 --> 00:34.410
d'un composant de type fonction.

00:34.410 --> 00:35.800
Et donc bien sûr ici, il

00:35.800 --> 00:38.220
nous manque du code jsx retourné.

00:38.220 --> 00:39.730
Donc ici, je vais renvoyer un formulaire où je

00:39.730 --> 00:42.030
veux ajouter tous les contrôles dont j'ai besoin pour permettre à l'utilisateur

00:42.030 --> 00:43.780
d'ajouter de nouvelles tâches.

00:45.060 --> 00:48.650
Ajoutons maintenant ce nouveau composant todo dans le composant app.

00:48.650 --> 00:53.650
Donc ici, nous pouvons importer NewTodo depuis . /components/NewTodo et ajoutez-le

00:55.130 --> 00:58.095
simplement ici à la place du commentaire.

00:58.095 --> 01:00.520
NewTodo est un composant qui se ferme automatiquement,

01:00.520 --> 01:02.790
parce que pour l'instant nous ne passons rien

01:02.790 --> 01:04.750
entre les balises d'ouverture et de fermeture

01:04.750 --> 01:09.263
et nous n'avons pas non plus de props ici, du moins pour le moment.

01:10.140 --> 01:11.540
Ainsi, à la place de ce composant,

01:11.540 --> 01:13.330
nous pouvons maintenant ajouter

01:13.330 --> 01:16.190
une entrée et, par la suite, un bouton.

01:16.190 --> 01:18.117
Ajoutez donc un div ici dans lequel

01:18.117 --> 01:20.020
je veux avoir une étiquette avec

01:20.020 --> 01:24.880
des attributs htmlFor pour pointer vers, disons, "todo-text".

01:24.880 --> 01:26.560
Tout ceci n'est qu'un balisage,

01:26.560 --> 01:31.250
où je dis "Texte à faire" et où j'introduis un élément de type texte avec

01:31.250 --> 01:35.170
un id de "texte à faire", de sorte que l'étiquette et l'entrée

01:35.170 --> 01:36.900
sont correctement connectées

01:36.900 --> 01:39.640
sémantiquement.

01:39.640 --> 01:41.440
Et sous ce div ici, à la place du formulaire,

01:41.440 --> 01:43.120
je vais ajouter un bouton où je

01:43.120 --> 01:44.437
dirai "ADD TODO", et ce bouton

01:45.297 --> 01:49.670
doit être de type submit pour qu'il soumette le formulaire.

01:49.670 --> 01:51.900
Il s'agit maintenant d'un formulaire très basique que nous pouvons utiliser

01:51.900 --> 01:53.143
pour ajouter un nouveau Todo.

01:54.580 --> 01:57.060
Maintenant, assurons-nous que cela fonctionne

01:57.060 --> 01:59.660
et pour cela, nous devons appliquer plusieurs

01:59.660 --> 02:01.820
étapes différentes.

02:01.820 --> 02:05.020
Nous devons récupérer ce que l'utilisateur a saisi ici et

02:05.020 --> 02:08.550
nous devons ensuite transmettre ce que l'utilisateur a saisi

02:08.550 --> 02:09.810
ici au composant applicatif,

02:09.810 --> 02:13.330
car c'est là que nous gérerons nos tâches plus tard.

02:13.330 --> 02:16.150
Donc, tout d'abord, réagissons à la soumission du formulaire peut-être.

02:16.150 --> 02:18.050
Nous pouvons ajouter une nouvelle fonction,

02:18.050 --> 02:20.300
donc une fonction dans le composant fonctionnel,

02:20.300 --> 02:22.720
mais ce sera maintenant une fonction ordinaire,

02:22.720 --> 02:27.720
que nous nommerons "todoSubmitsHandler", le nom que vous voulez.

02:28.210 --> 02:29.990
Il s'agit d'une fonction qui doit être activée

02:29.990 --> 02:31.860
chaque fois que le formulaire est soumis.

02:31.860 --> 02:35.571
Nous pouvons donc le lier à la prop onSubmit ici à la fin, todoSubmitsHandler,

02:35.571 --> 02:38.770
ne pas l'exécuter, juste le pointer, de sorte qu'il soit

02:38.770 --> 02:40.900
exécuté pour nous chaque fois que ce

02:40.900 --> 02:43.810
formulaire est soumis.

02:43.810 --> 02:46.270
Maintenant, ici, nous obtenons un objet événement et l'objet

02:46.270 --> 02:49.507
événement est de type react. FormEvent.

02:51.290 --> 02:54.010
Maintenant, je veux appeler l'événement prevent default

02:54.010 --> 02:55.780
pour empêcher ce défaut, qui est d'envoyer

02:55.780 --> 02:59.280
une vraie requête au serveur qui sert cette application.

02:59.280 --> 03:01.520
Bien sûr, ce n'est pas le moment où je veux que ça arrive.

03:01.520 --> 03:04.680
Je veux traiter cette demande uniquement ici, en JavaScript,

03:04.680 --> 03:08.350
et il faut donc empêcher ce défaut du navigateur.

03:08.350 --> 03:09.770
Maintenant, avec ce prévenu,

03:09.770 --> 03:12.610
nous pouvons obtenir ce que l'utilisateur a entré dans l'entrée

03:12.610 --> 03:15.250
et pour cela nous avons deux façons différentes.

03:15.250 --> 03:18.310
Nous pouvons soit gérer l'état de la saisie ici, avec une

03:18.310 --> 03:20.970
sorte de liaison bidirectionnelle, soit utiliser

03:20.970 --> 03:23.170
une référence pour extraire ce que l'utilisateur

03:23.170 --> 03:25.010
a saisi ici lorsque le formulaire

03:25.010 --> 03:26.520
est soumis.

03:26.520 --> 03:28.410
Je vais opter pour cette dernière approche,

03:28.410 --> 03:30.420
car nous allons voir la gestion de l'état en action

03:30.420 --> 03:33.470
dans le composant de l'application dans une seconde de toute façon.

03:33.470 --> 03:37.340
Pour mettre en place une telle référence, nous importons le hook useRef

03:37.340 --> 03:40.580
de react, et les hooks sont des fonctions spéciales que vous

03:40.580 --> 03:44.010
pouvez exécuter et des composants de fonction pour ajouter

03:44.010 --> 03:45.290
certaines fonctionnalités

03:45.290 --> 03:48.101
au composant et lorsque nous exécutons useRef ici,

03:48.101 --> 03:51.190
ce que nous obtenons en retour est un objet Ref, que nous

03:51.190 --> 03:53.730
pouvons stocker dans une constante et je vais

03:53.730 --> 03:57.310
le nommer, "textInputRef" en fait.

03:57.310 --> 04:00.176
Et nous pouvons, par exemple, utiliser une telle référence

04:00.176 --> 04:04.980
pour l'affecter à un élément dom et interagir ensuite avec cet élément dom à partir de

04:04.980 --> 04:06.500
notre code ici.

04:06.500 --> 04:08.800
Donc par exemple, quand ce formulaire est soumis.

04:09.680 --> 04:11.510
Nous établissons une telle connexion

04:11.510 --> 04:14.020
en ajoutant l'accessoire spécial Ref à un élément

04:14.020 --> 04:16.580
html de votre choix et en pointant vers l'objet

04:16.580 --> 04:19.150
que nous avons créé ici.

04:19.150 --> 04:21.530
Ajoutez donc textInputRef.

04:21.530 --> 04:23.540
Cela crée une connexion ici.

04:23.540 --> 04:27.380
Cependant, vous voyez déjà que TypeScript n'aime pas cela.

04:27.380 --> 04:30.110
Parce que useRef s'avère être une

04:30.110 --> 04:33.250
fonction générique également.

04:33.250 --> 04:35.270
Maintenant, quel type pouvons-nous lui passer.

04:35.270 --> 04:37.340
Qu'est-ce qu'il serait intéressant de savoir ici ?

04:37.340 --> 04:39.200
Il serait intéressant de savoir quel

04:39.200 --> 04:42.030
type de données sera stocké à l'intérieur du graphique et

04:42.030 --> 04:43.970
puisque vous pointez du doigt l'élément

04:43.970 --> 04:47.880
d'entrée, nous aurons un élément d'entrée html stocké à l'intérieur.

04:47.880 --> 04:50.420
Maintenant, nous devrions tous fournir une valeur par

04:50.420 --> 04:51.840
défaut au Ref lorsqu'il est configuré

04:51.840 --> 04:53.190
et là, nous fournirons null,

04:53.190 --> 04:54.710
parce que lorsque le composant est

04:54.710 --> 04:56.360
rendu pour la toute première fois,

04:56.360 --> 04:57.380
lorsque ce code s'exécute,

04:57.380 --> 04:59.460
bien sûr, cela n'a pas été rendu ici, donc cela

04:59.460 --> 05:01.590
ne pointera vers rien.

05:01.590 --> 05:03.350
Cependant, une fois que cela a été

05:03.350 --> 05:04.950
rendu, la connexion sera établie

05:04.950 --> 05:07.040
et alors ce Ref fonctionnera.

05:07.040 --> 05:09.453
Et maintenant, ici dans le todoSubmitHandler, nous pouvons

05:10.342 --> 05:15.342
obtenir le texte saisi en utilisant textInputRef. courant, c'est toujours quelque chose

05:15.500 --> 05:17.973
que vous devez saisir lorsque vous travaillez

05:17.973 --> 05:21.440
avec un Ref, . bien sûr ici car nous travaillons

05:21.440 --> 05:24.530
avec l'élément html input.

05:24.530 --> 05:27.940
Cependant, le problème ici est que cela pourrait être nul.

05:27.940 --> 05:29.630
C'est un problème que nous connaissons déjà,

05:29.630 --> 05:31.790
nous l'avons eu au début du cours également lorsque nous

05:31.790 --> 05:33.370
avons sélectionné quelque chose dans

05:33.370 --> 05:34.630
un Dom et nous l'avons ici aussi,

05:34.630 --> 05:37.020
parce que TypeScript ne peut pas savoir avec certitude que

05:37.020 --> 05:38.800
cette connexion est établie.

05:38.800 --> 05:40.580
Nous le savons, nous avons écrit le code,

05:40.580 --> 05:43.050
mais TypeScript ne comprend malheureusement pas que

05:43.050 --> 05:45.300
nous établissons une connexion en bas.

05:46.310 --> 05:48.920
Donc, pour résoudre ce problème, nous pouvons ajouter un point

05:48.920 --> 05:51.350
d'exclamation ici, pour dire à nouveau à TypeScript que

05:51.350 --> 05:54.350
tout ira bien, que ceci sera défini, et que nous sommes bons.

05:54.350 --> 05:56.130
D'ailleurs TypeScript est correct

05:56.130 --> 05:58.920
si nous appelons todoSubmitHandler ici, cela serait

05:58.920 --> 06:00.590
appelé avant, cela a été rendu pour

06:00.590 --> 06:02.410
la première fois et alors en effet cela

06:02.410 --> 06:05.000
ne serait pas encore initialisé.

06:05.000 --> 06:07.910
Nous savons seulement qu'il sera initialisé avec certitude parce

06:07.910 --> 06:09.730
que nous savons qu'il ne sera appelé que

06:09.730 --> 06:10.830
lorsque le formulaire sera

06:10.830 --> 06:13.830
soumis et cela ne peut se produire qu'après le rendu.

06:13.830 --> 06:16.120
Nous connaissons donc la façon dont notre code fonctionne.

06:16.120 --> 06:18.360
Cela ne sera jamais nul.

06:18.360 --> 06:20.810
S'il y avait une autre possibilité, vous devriez

06:20.810 --> 06:22.780
utiliser un if-check ici pour vérifier

06:22.780 --> 06:26.030
si textInputRef. current est nul et si c'est le

06:26.030 --> 06:27.620
cas, faites autre chose.

06:27.620 --> 06:29.550
Mais ici, cela ne peut pas arriver.

06:29.550 --> 06:31.230
Donc avec ça on extrait une valeur

06:31.230 --> 06:34.640
et on peut consoler. enregistrez ceci ici pour voir si cela fonctionne.

06:34.640 --> 06:37.040
Mais bien sûr, ce n'est pas la configuration finale.

06:37.040 --> 06:40.900
Alors sauvegardons, entrons ici, terminons-le dans

06:40.900 --> 06:44.590
un mois et ajoutons une tâche à faire, et nous le voyons

06:44.590 --> 06:47.970
ici dans les journaux de la console.

06:47.970 --> 06:50.310
Cela fonctionne comme il se doit.

06:50.310 --> 06:51.910
Et comme cela fonctionne comme il se doit,

06:51.910 --> 06:55.460
assurons-nous maintenant d'obtenir cette valeur pour le composant de l'application.

06:55.460 --> 06:58.820
Si vous connaissez une réaction, essayez-la d'abord par vous-même.

06:58.820 --> 07:00.963
Nous le ferons ensemble dans le prochain cours.
