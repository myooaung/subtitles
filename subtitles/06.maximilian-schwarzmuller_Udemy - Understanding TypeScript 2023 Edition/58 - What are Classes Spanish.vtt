WEBVTT

00:02.100 --> 00:04.890
Instructor: Para entender las clases vamos a entender

00:04.890 --> 00:07.040
la programación orientada a objetos.

00:07.040 --> 00:10.050
Ahora, dependiendo de tu nivel de conocimiento

00:10.050 --> 00:12.560
y si has trabajado con JavaScript moderno

00:12.560 --> 00:15.340
y quizás también con otros lenguajes de programación,

00:15.340 --> 00:18.320
puede que sepas para qué sirven las clases y de qué

00:18.320 --> 00:22.270
trata la programación orientada a objetos OOP.

00:22.270 --> 00:24.570
Por lo tanto, también puedes saltarte esta clase

00:24.570 --> 00:27.720
para pasar directamente a las partes en las que escribimos código.

00:27.720 --> 00:29.330
Por lo demás, quédate conmigo

00:29.330 --> 00:32.200
porque es importante entender esto.

00:32.200 --> 00:35.240
La idea detrás de la programación orientada a objetos

00:35.240 --> 00:38.550
y de las clases será importante para eso como verás, es que

00:38.550 --> 00:41.630
trabajas con entidades de la vida real en tu código se

00:41.630 --> 00:43.110
podría decir.

00:43.110 --> 00:47.370
Para que trabajes con cosas en tu código con objetos que se parezcan

00:47.370 --> 00:52.110
a los de la vida real en la medida de lo posible, al menos para que te resulte

00:52.110 --> 00:54.410
más fácil como desarrollador razonar

00:54.410 --> 00:56.250
sobre tu código.

00:56.250 --> 00:59.150
Por ejemplo, podemos estar construyendo una tienda online

00:59.150 --> 01:01.270
y ahí podemos tener una lista de productos.

01:01.270 --> 01:05.190
Por lo tanto, podríamos trabajar con un objeto de lista de productos, que tiene todo

01:05.190 --> 01:08.140
lo que necesitamos para gestionar una lista de productos.

01:08.140 --> 01:11.570
Un método para añadir productos a los productos principales,

01:11.570 --> 01:13.370
la propia lista.

01:13.370 --> 01:15.670
Así, por ejemplo, podría tratarse de un objeto

01:15.670 --> 01:18.360
que se encarga de mostrar una lista de productos

01:18.360 --> 01:19.540
y de gestionarla, que

01:19.540 --> 01:22.840
se han obtenido de un servicio o de una base de datos.

01:22.840 --> 01:25.530
Así que este producto contiene toda la lógica de renderización,

01:25.530 --> 01:27.260
obtención y gestión.

01:27.260 --> 01:29.420
Eso sí que es una lista de productos.

01:29.420 --> 01:32.510
Sin embargo, en nuestro programa en el sitio web que estamos construyendo,

01:32.510 --> 01:33.870
es posible que también tengamos

01:33.870 --> 01:36.000
que trabajar con el producto individual.

01:36.000 --> 01:39.540
Así que también podríamos querer un objeto o varios objetos;

01:39.540 --> 01:40.960
uno para cada producto que

01:40.960 --> 01:43.930
se encargue de gestionar el producto único.

01:43.930 --> 01:47.180
Puede mantener y mostrar los detalles de ese producto,

01:47.180 --> 01:49.830
tal vez permitirnos añadirlo a un carrito,

01:49.830 --> 01:51.260
cosas así.

01:51.260 --> 01:54.900
Así que cuando queremos dibujar la interfaz de usuario en la pantalla, queremos manejar

01:54.900 --> 01:57.010
eso a través de JavaScript y por lo tanto a través

01:57.010 --> 01:58.740
de TypeScript, entonces podríamos implementar

01:58.740 --> 02:00.550
esto con la lista de productos y un objeto

02:00.550 --> 02:02.970
de producto que contiene la lógica para la gestión de los

02:02.970 --> 02:05.370
datos subyacentes, sino también para la representación

02:05.370 --> 02:07.760
del contenido en la pantalla.

02:07.760 --> 02:10.010
Y, por supuesto, estos dos objetos estarían

02:10.010 --> 02:11.940
en cierto modo relacionados.

02:11.940 --> 02:14.790
También podemos tener un objeto carrito de la compra en nuestra pantalla,

02:14.790 --> 02:16.410
que se encarga de renderizar y gestionar

02:16.410 --> 02:18.040
la tarjeta de compra.

02:18.040 --> 02:20.380
Por supuesto, también está relacionado con el producto.

02:20.380 --> 02:22.930
Y por lo tanto, contiene toda la lógica que necesitamos

02:22.930 --> 02:24.880
para renderizar nuestra tarjeta de compra,

02:24.880 --> 02:27.240
realizar pedidos y comunicarse con el servidor,

02:27.240 --> 02:28.073
etc.

02:28.073 --> 02:31.190
Así que esa sería una forma de pensar en la aplicación

02:31.190 --> 02:33.010
que estamos construyendo.

02:33.010 --> 02:35.590
Cómo podríamos dividirlo en piezas lógicas que tengan

02:35.590 --> 02:37.670
sentido para nosotros como humanos.

02:37.670 --> 02:40.320
Y en el código en TypeScript y JavaScript, en la mayoría

02:40.320 --> 02:42.920
de los lenguajes de programación modernos, esto

02:42.920 --> 02:46.750
es soportado activamente porque tenemos objetos que son estructuras

02:46.750 --> 02:48.900
de datos más complejas que contienen propiedades

02:48.900 --> 02:50.640
y métodos.

02:50.640 --> 02:53.340
Y, por supuesto, también lo tenemos en JavaScript.

02:53.340 --> 02:57.310
Pero también podemos tener clases que nos ayuden a ello.

02:57.310 --> 02:59.100
¿Cuál es la idea de las clases?

02:59.100 --> 03:00.740
¿Y qué son las instancias?

03:00.740 --> 03:02.030
Cuando obtenemos estos

03:02.030 --> 03:04.690
objetos y al seguir este enfoque orientado a objetos,

03:04.690 --> 03:07.500
podríamos considerar la posibilidad de dividir nuestra

03:07.500 --> 03:11.130
aplicación o nuestra lógica de aplicación en dichos objetos que gestionan

03:11.130 --> 03:13.750
partes de nuestra lógica.

03:13.750 --> 03:17.000
Ahora conectado a la idea de usar estos objetos

03:17.000 --> 03:19.340
que por supuesto existen en JavaScript

03:19.340 --> 03:23.910
podemos usar objetos allí como la idea de tener clases.

03:23.910 --> 03:27.470
Los objetos son las cosas concretas con las que trabajamos en nuestro código.

03:27.470 --> 03:30.380
Las estructuras de datos que utilizamos para almacenar

03:30.380 --> 03:33.450
datos para almacenar métodos para ejecutar métodos.

03:33.450 --> 03:36.570
Las clases son planos de objetos.

03:36.570 --> 03:40.880
Las clases nos permiten definir cómo deben ser los objetos; qué datos deben

03:40.880 --> 03:42.230
contener, qué métodos

03:42.230 --> 03:44.070
deben tener, de manera que podamos

03:44.070 --> 03:48.240
construir fácilmente objetos basados en estas clases.

03:48.240 --> 03:51.830
Y entonces llamamos a esto instancias de las clases.

03:51.830 --> 03:54.830
Así que un objeto es una instancia de una clase si se

03:54.830 --> 03:56.850
basa en tal clase, de modo que podemos

03:56.850 --> 03:59.900
replicar rápidamente múltiples objetos con la misma

03:59.900 --> 04:02.230
estructura los mismos métodos basados

04:02.230 --> 04:04.090
en las mismas clases.

04:04.090 --> 04:07.280
Así, las clases nos ayudan a definir cómo deben ser los objetos,

04:07.280 --> 04:10.170
qué propiedades y métodos tienen, etc.

04:10.170 --> 04:14.920
Así, las clases existen para acelerar la creación de objetos.

04:14.920 --> 04:16.160
Y es simplemente una alternativa

04:16.160 --> 04:20.070
al uso de la notación literal de objetos que ya conoces.

04:20.070 --> 04:21.330
Simplemente lo hacen más fácil.

04:21.330 --> 04:24.620
Las clases simplemente facilitan la creación de múltiples objetos

04:24.620 --> 04:26.900
que, por lo general, tienen la misma estructura

04:26.900 --> 04:28.030
y los mismos métodos, y

04:28.030 --> 04:31.500
que sólo pueden diferir en los detalles exactos de los datos que se almacenan

04:31.500 --> 04:32.780
en ellos.

04:32.780 --> 04:34.540
Digamos que tenemos varias personas

04:34.540 --> 04:36.670
que queremos representar con objetos.

04:36.670 --> 04:39.330
Bueno, cada persona puede tener un nombre y una edad,

04:39.330 --> 04:40.830
los valores serán diferentes,

04:40.830 --> 04:43.310
la estructura general es la misma.

04:43.310 --> 04:44.500
Así que esa es la teoría.

04:44.500 --> 04:46.113
Veámoslo en la práctica.
