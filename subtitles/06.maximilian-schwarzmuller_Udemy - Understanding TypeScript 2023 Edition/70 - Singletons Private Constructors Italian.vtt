WEBVTT

00:02.260 --> 00:04.960
-: C'è un'ultima caratteristica

00:04.960 --> 00:07.020
interessante che vorrei

00:07.020 --> 00:10.330
introdurre: i costruttori privati.

00:10.330 --> 00:13.823
Cos'è un costruttore privato e quale uso ne fa?

00:14.870 --> 00:17.700
Esiste un modello nella programmazione orientata

00:17.700 --> 00:20.460
agli oggetti che si chiama modello singleton.

00:20.460 --> 00:23.030
Il pattern singleton serve a garantire

00:23.030 --> 00:26.440
che ci sia sempre e solo un'istanza di una certa

00:26.440 --> 00:28.030
classe.

00:28.030 --> 00:30.558
Questo può essere utile in scenari in cui non

00:30.558 --> 00:33.000
si possono usare metodi o proprietà statiche

00:33.000 --> 00:34.450
o non si vuole farlo, ma allo

00:34.450 --> 00:36.440
stesso tempo si vuole essere sicuri

00:36.440 --> 00:39.600
di non poter creare più oggetti basati su una classe,

00:39.600 --> 00:40.730
ma di avere sempre esattamente

00:40.730 --> 00:44.630
un oggetto basato su una classe.

00:44.630 --> 00:47.660
Diciamo che per il nostro AccountingDepartment vogliamo

00:47.660 --> 00:51.460
assicurarci di poter creare esattamente un solo oggetto basato

00:51.460 --> 00:53.320
su questa classe, perché abbiamo

00:53.320 --> 00:56.010
esattamente un solo reparto contabile in tutta

00:56.010 --> 00:57.840
la nostra azienda.

00:57.840 --> 01:00.260
Potremmo avere più di un dipartimento IT, ma

01:00.260 --> 01:03.290
abbiamo esattamente un dipartimento contabile.

01:03.290 --> 01:05.310
Ora, per imporre questo e per evitare

01:05.310 --> 01:09.020
di chiamare manualmente new AccountingDepartment più volte,

01:09.020 --> 01:12.260
possiamo trasformare il costruttore della classe AccountingDepartment

01:12.260 --> 01:14.320
in un costruttore privato, aggiungendo

01:14.320 --> 01:18.860
la parola chiave private davanti a esso.

01:18.860 --> 01:20.560
In questo modo si assicura

01:20.560 --> 01:23.480
che non si possa chiamare "new".

01:23.480 --> 01:25.160
Qui si vede un errore perché

01:25.160 --> 01:27.620
il costruttore è privato, quindi è accessibile

01:27.620 --> 01:30.600
solo dall'interno della classe, il che sembra

01:30.600 --> 01:33.690
strano perché come si fa a entrare nella classe se

01:33.690 --> 01:37.920
non si possono più creare oggetti basati su di essa.

01:37.920 --> 01:40.490
La risposta è: metodi statici.

01:40.490 --> 01:43.610
Un metodo statico può essere richiamato sulla classe stessa,

01:43.610 --> 01:46.250
quindi non è necessario istanziarla.

01:46.250 --> 01:49.460
Quindi possiamo aggiungere un metodo statico che potremmo

01:49.460 --> 01:51.340
chiamare getInstance, il cui nome

01:51.340 --> 01:53.260
dipende totalmente da voi.

01:53.260 --> 01:56.930
Ora getInstance controllerà se esiste già un'istanza di questa

01:56.930 --> 02:00.090
classe e, in caso contrario, ne restituirà una nuova.

02:00.090 --> 02:04.300
Per questo possiamo aggiungere una nuova istanza di proprietà statica, una proprietà

02:04.300 --> 02:06.350
privata statica, quindi possiamo mettere

02:06.350 --> 02:09.200
private davanti all'istanza statica chiamata che sarà

02:09.200 --> 02:12.040
di tipo AccountingDepartment.

02:12.040 --> 02:16.570
Quindi, lì dentro, memorizzeremo un'istanza di AccountingDepartment.

02:16.570 --> 02:17.580
Ecco cosa sto dicendo:

02:17.580 --> 02:19.100
ho una proprietà statica

02:19.100 --> 02:21.410
accessibile alla classe stessa, ma solo

02:21.410 --> 02:23.310
dall'interno della classe e il

02:23.310 --> 02:25.960
valore che vi memorizziamo sarà di tipo AccountingDepartment,

02:25.960 --> 02:30.140
quindi della classe stessa.

02:30.140 --> 02:33.880
Ora possiamo usare questa proprietà di istanza in getInstance

02:33.880 --> 02:38.880
e verificare se questo. L'istanza è impostata qui all'interno di

02:39.260 --> 02:43.570
static, se la usiamo, farà riferimento alla classe stessa e quindi potremo

02:43.570 --> 02:47.610
accedere a tutte le altre proprietà statiche su di essa.

02:47.610 --> 02:51.963
L'alternativa sarebbe quella di utilizzare il nome della classe.

02:53.720 --> 02:58.450
E ora, se questo è impostato, voglio restituire questo. o ancora il nome della

02:58.450 --> 03:01.600
classe. ma questo all'interno di un

03:01.600 --> 03:04.030
metodo statico funziona, ci dà accesso alla

03:04.030 --> 03:05.680
classe stessa, a differenza di

03:05.680 --> 03:09.370
questo in un metodo non statico che ci dà accesso all'istanza con

03:09.370 --> 03:11.590
cui stiamo cercando di lavorare, non quello

03:11.590 --> 03:13.550
che stiamo facendo qui.

03:13.550 --> 03:15.660
Se però non riusciamo a entrare qui,

03:15.660 --> 03:17.290
allora non abbiamo ancora un'istanza,

03:17.290 --> 03:22.030
e allora imposto questo. quindi questa proprietà statica dell'istanza

03:22.030 --> 03:25.660
è uguale a new AccountingDepartment; possiamo usarla

03:25.660 --> 03:28.630
dall'interno, perché ora siamo all'interno

03:28.630 --> 03:32.030
di questo metodo della classe, quindi possiamo accedere

03:32.030 --> 03:35.250
al costruttore privato e passare il nostro ID e il

03:35.250 --> 03:44.830
nostro array di report e poi restituire questo.

03:44.830 --> 03:44.830
istanza qui.

03:44.830 --> 03:47.010
Quindi ora restituiamo l'istanza che

03:47.010 --> 03:48.220
potremmo già avere o,

03:48.220 --> 03:50.970
se non l'abbiamo ancora, ne creiamo una nuova.

03:50.970 --> 03:53.270
Ma questo codice, il codice contrassegnato qui,

03:53.270 --> 03:56.377
può essere eseguito solo una volta, perché una volta che abbiamo un'istanza,

03:56.377 --> 03:57.850
la inseriamo in questo blocco if

03:57.850 --> 04:00.370
e restituiamo l'istanza esistente.

04:00.370 --> 04:03.700
Quindi, se si vuole lavorare con AccountingDepartment, invece di crearlo

04:03.700 --> 04:05.940
in questo modo, si potrebbe chiamare, const accounting

04:05.940 --> 04:10.153
AccountingDepartment. getInstance, che restituisce

04:11.646 --> 04:14.850
una nuova istanza di AccountingDepartment.

04:14.850 --> 04:18.190
Ma se lo rifaccio, otterrò la stessa istanza, come si può

04:18.190 --> 04:21.103
vedere se si registra il log di console accounting

04:22.020 --> 04:23.570
e accounting2 qui.

04:23.570 --> 04:26.550
Vedrete che i due oggetti dovrebbero essere esattamente

04:26.550 --> 04:28.253
uguali, se li salviamo e li ricarichiamo,

04:30.550 --> 04:34.110
vedrete che ci sono i miei due oggetti AccountingDepartment, hanno

04:34.110 --> 04:36.690
lo stesso ID, la stessa configurazione, sono lo

04:36.690 --> 04:39.720
stesso oggetto, la stessa istanza, perché abbiamo solo

04:39.720 --> 04:41.530
un'istanza con questo modello singleton

04:41.530 --> 04:44.340
che viene creato con l'aiuto della parola chiave private

04:44.340 --> 04:47.900
davanti al costruttore.

04:47.900 --> 04:51.000
Si tratta di un approccio che, probabilmente, non verrà

04:51.000 --> 04:52.490
utilizzato sempre.

04:52.490 --> 04:55.010
Il pattern singleton può essere utile a volte,

04:55.010 --> 04:56.530
non è sempre necessario, ma vale

04:56.530 --> 04:58.700
sicuramente la pena conoscerlo perché è

04:58.700 --> 05:00.360
qualcosa di interessante che si

05:00.360 --> 05:03.290
può facilmente implementare con TypeScript grazie ai

05:03.290 --> 05:04.923
costruttori privati.
