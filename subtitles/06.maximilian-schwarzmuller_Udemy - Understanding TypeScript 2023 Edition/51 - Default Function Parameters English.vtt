WEBVTT

1
00:00:02.170 --> 00:00:03.830
Let's stick to functions.

2
00:00:03.830 --> 00:00:07.120
Another nice feature which is available in modern JavaScript

3
00:00:07.120 --> 00:00:09.450
is that you can assign default arguments

4
00:00:09.450 --> 00:00:11.033
to function parameters.

5
00:00:11.880 --> 00:00:13.830
Let's say here in our add function,

6
00:00:13.830 --> 00:00:17.720
for some reason, we wanted a default value for b.

7
00:00:17.720 --> 00:00:20.180
So we know we want to be able to add two numbers together.

8
00:00:20.180 --> 00:00:23.850
But in case you call this function with only one number,

9
00:00:23.850 --> 00:00:28.130
we'll assume a default for the second argument,

10
00:00:28.130 --> 00:00:29.990
or for the second parameter.

11
00:00:29.990 --> 00:00:32.120
We can do so by adding a equal sign here

12
00:00:32.120 --> 00:00:34.980
in the parameter list and then setting our default value.

13
00:00:34.980 --> 00:00:36.920
Which of course has to match our type.

14
00:00:36.920 --> 00:00:40.020
For example, one or whatever the default should be.

15
00:00:40.020 --> 00:00:42.770
And now this enables us to call this function

16
00:00:42.770 --> 00:00:44.080
with only one argument.

17
00:00:44.080 --> 00:00:46.700
So I could call it like this and TypeScript

18
00:00:46.700 --> 00:00:48.830
would not complain because it detects

19
00:00:48.830 --> 00:00:50.200
that we have a default argument here

20
00:00:50.200 --> 00:00:51.860
which is then taken for b.

21
00:00:51.860 --> 00:00:53.910
And therefore here I get a output of six

22
00:00:53.910 --> 00:00:58.910
because my default b is one and I add five, which makes six

23
00:00:59.130 --> 00:01:03.113
Now, one important note about default arguments here.

24
00:01:04.010 --> 00:01:07.090
They have to be last in the list.

25
00:01:07.090 --> 00:01:10.710
If you assign a default argument to a, for example,

26
00:01:10.710 --> 00:01:12.640
we'll have an issue, why?

27
00:01:12.640 --> 00:01:15.290
Because default arguments are not skipped

28
00:01:15.290 --> 00:01:16.840
when you call a function.

29
00:01:16.840 --> 00:01:19.490
So if I call a function here with one argument,

30
00:01:19.490 --> 00:01:21.990
then the arguments I'm passing in here

31
00:01:21.990 --> 00:01:25.060
are passed to the parameters in the same order.

32
00:01:25.060 --> 00:01:27.240
So calling the function with one argument,

33
00:01:27.240 --> 00:01:29.900
five in this case, passes this one argument

34
00:01:29.900 --> 00:01:32.400
to the first argument here in the parameter list.

35
00:01:32.400 --> 00:01:34.150
And since the second argument

36
00:01:34.150 --> 00:01:37.660
is not provided with a default, it's not optional.

37
00:01:37.660 --> 00:01:40.920
And hence we provide no second argument at all.

38
00:01:40.920 --> 00:01:43.730
So TypeScript, or JavaScript actually,

39
00:01:43.730 --> 00:01:46.800
does not look at your function definition

40
00:01:46.800 --> 00:01:50.650
and guess that you probably wanna skip the default argument

41
00:01:50.650 --> 00:01:53.290
and provide your value to the non-default one.

42
00:01:53.290 --> 00:01:55.740
Instead, it simply adheres to the order.

43
00:01:55.740 --> 00:01:59.720
And therefore you should set defaults from the right.

44
00:01:59.720 --> 00:02:01.830
So make sure that the parameters

45
00:02:01.830 --> 00:02:04.010
for which you don't accept default arguments

46
00:02:04.010 --> 00:02:07.523
come first before your default parameters.

