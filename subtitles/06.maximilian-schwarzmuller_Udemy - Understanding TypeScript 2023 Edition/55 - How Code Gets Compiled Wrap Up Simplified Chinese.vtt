WEBVTT

00:02.200 --> 00:03.970
教师：现在, 这是本模块的内容｡ 

00:03.970 --> 00:07.790
显然, 现代JavaScript还有其他一些简洁的特性｡

00:07.790 --> 00:09.810
例如, 我将在类模块中介绍类,

00:09.810 --> 00:13.470
一般来说, 这不是JavaScript课程｡

00:13.470 --> 00:20.140
我不想用大量与TypeScript无关的JavaScript知识来烦您｡

00:20.140 --> 00:29.580
我想提到这些特定的特性, 因为知道TypeScript帮助我们以一种在旧浏览器中仍然运行的方式使用这些特性是很好的｡

00:29.580 --> 00:32.920
因为这是你永远不能忘记的｡ 

00:32.920 --> 00:35.600
您的代码将被编译｡ 

00:35.600 --> 00:38.690
目前, 我必须将目标设置为ES6,

00:38.690 --> 00:41.540
因此, 如果我们检查dist文件夹,

00:41.540 --> 00:46.030
我们会看到常量在app JS文件中也都可用｡

00:46.030 --> 00:48.070
对象去结构化, 有一种方法可以像这样,

00:48.070 --> 00:52.480
因为ES6支持所有这些功能｡

00:52.480 --> 00:56.590
如果我将目标设置为ES5, 并且现在注释掉lib,

00:56.590 --> 01:05.290
以便默认情况下为ES5目标导入正确的库, 您将看到生成的代码现在看起来非常不同｡

01:05.290 --> 01:09.810
这是因为现在我们使用var和TypeScript必须为ES5

01:09.810 --> 01:14.730
JavaScript中不支持的某些语法找到解决办法｡

01:14.730 --> 01:18.240
例如, 删除了反结构化语法｡ 

01:18.240 --> 01:21.140
所以这是一件重要的事情, 要始终牢记在心｡ 

01:21.140 --> 01:26.440
TypeScript编译您的代码, 不仅是从TypeScript的唯一特性到常规JavaScript,

01:26.440 --> 01:29.210
而且如果您告诉TypeScript这样做,

01:29.210 --> 01:35.433
还可以编译从现代JavaScript到旧JavaScript的所有代码｡
