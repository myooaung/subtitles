WEBVTT

00:02.160 --> 00:06.060
Kursleiter: Was könnten wir also über die Validierung sagen?

00:06.060 --> 00:10.450
Nun, vielleicht sollten wir mit dem gewünschten Endergebnis beginnen.

00:10.450 --> 00:14.850
Meine Idee ist, dass wir später eine Validierungsfunktion haben,

00:14.850 --> 00:17.950
die es noch nicht gibt, aber dass wir sie später

00:17.950 --> 00:21.230
haben, der ich den eingegebenen Titel übergebe,

00:21.230 --> 00:25.360
oder eigentlich ein Konfigurationsobjekt, wo der Wert der

00:25.360 --> 00:27.900
eingegebene Titel ist, also das, was

00:27.900 --> 00:30.300
validiert werden soll.

00:30.300 --> 00:33.260
Dort habe ich dann aber auch zusätzliche Eigenschaften,

00:33.260 --> 00:37.350
die der Validierungsfunktion mitteilen, wie sie zu validieren

00:37.350 --> 00:39.130
ist.

00:39.130 --> 00:43.210
So haben wir zum Beispiel "required" hier auf "true" gesetzt,

00:43.210 --> 00:47.009
"minLength" auf "five", um fünf Zeichen zu erzwingen,

00:47.009 --> 00:48.360
und so weiter.

00:48.360 --> 00:50.040
Und dann machen wir das hier für alle

00:50.040 --> 00:51.540
drei Eingaben, und validate

00:51.540 --> 00:53.900
ist eine Funktion, die true zurückgibt, wenn

00:53.900 --> 00:56.620
sie gültig ist, und false, wenn sie nicht gültig ist,

00:56.620 --> 00:59.580
und am Ende könnten wir so etwas wie das hier haben.

00:59.580 --> 01:04.580
Oder enteredDescription und enteredPeople, das wäre

01:04.790 --> 01:06.790
in etwa die Idee.

01:06.790 --> 01:09.210
Das ist natürlich nur eine Möglichkeit der Umsetzung,

01:09.210 --> 01:11.703
aber eine, die mir sehr gut gefällt.

01:12.600 --> 01:15.320
Zu diesem Zweck werde ich am Anfang

01:15.320 --> 01:19.470
der Datei eine Validierungslogik hinzufügen.

01:19.470 --> 01:22.380
Und auch hier gibt es viele Möglichkeiten, dies zu tun.

01:22.380 --> 01:24.390
Ich werde zunächst die Struktur

01:24.390 --> 01:27.840
eines solchen validierbaren Objekts definieren.

01:27.840 --> 01:31.280
Dieses Objekt übergeben wir also an die Validierungsfunktion,

01:31.280 --> 01:33.430
denn es muss natürlich immer eine ähnliche

01:33.430 --> 01:37.820
Struktur mit einer bestimmten Anzahl von Eigenschaften haben, die vorhanden

01:37.820 --> 01:40.100
sein können, und mit bestimmten Arten

01:40.100 --> 01:44.950
von Eigenschaften, damit die Validierungsfunktion weiß, womit sie arbeitet

01:44.950 --> 01:47.400
und die Eigenschaften korrekt extrahieren

01:47.400 --> 01:49.870
kann usw.

01:49.870 --> 01:52.850
Ich werde also mit der Definition einer Schnittstelle beginnen.

01:52.850 --> 01:55.380
Wir könnten uns auch für einen benutzerdefinierten Typ entscheiden,

01:55.380 --> 01:56.550
das liegt ganz bei Ihnen.

01:56.550 --> 01:58.690
Da ich die Struktur eines Objekts definieren

01:58.690 --> 02:02.793
werde, bin ich immer ein größerer Fan davon, nur eine Schnittstelle zu definieren.

02:03.810 --> 02:06.700
Ich werde es hier Validatable nennen,

02:06.700 --> 02:09.940
weil es ein validierbares Objekt beschreibt,

02:09.940 --> 02:13.300
und es wird einen Wert haben, der eine Zeichenkette

02:13.300 --> 02:17.140
oder auch eine Zahl sein sollte.

02:17.140 --> 02:18.980
Es wird eine erforderliche Eigenschaft

02:18.980 --> 02:21.240
haben, die einen booleschen Wert hat, also

02:21.240 --> 02:22.630
true oder false.

02:22.630 --> 02:26.470
Und dann sagen wir, wir unterstützen die minLength-Validierung,

02:26.470 --> 02:28.212
die eine Zahl sein sollte, maxLength,

02:28.212 --> 02:30.220
die eine Zahl sein sollte, und auch

02:30.220 --> 02:32.510
für den Fall, dass wir eine Zahl erhalten,

02:32.510 --> 02:35.240
einen Min- und einen Max-Wert.

02:35.240 --> 02:37.417
Der Unterschied zu minLength und maxLength

02:37.417 --> 02:40.310
ist, dass hier die Länge der Zeichenkette geprüft wird,

02:40.310 --> 02:42.320
hier der Wert der Zahl, wenn er über einer

02:42.320 --> 02:43.960
bestimmten Zahl oder unter einem

02:43.960 --> 02:46.010
bestimmten Höchstwert liegt.

02:46.010 --> 02:48.870
Das sind die Eigenschaften, die ich unterstützen möchte.

02:48.870 --> 02:50.470
Abgesehen vom Wert sollten

02:50.470 --> 02:52.140
sie jedoch alle optional sein,

02:52.140 --> 02:54.410
was wir durch Hinzufügen eines Fragezeichens

02:54.410 --> 02:57.650
hinter den Namen erzwingen können.

02:57.650 --> 03:00.070
Die Alternative zur Verwendung eines Fragezeichens

03:00.070 --> 03:02.720
besteht übrigens darin, undefinierte Werte zuzulassen.

03:02.720 --> 03:04.880
Das Fragezeichen bewirkt im Grunde dasselbe.

03:04.880 --> 03:09.370
Er besagt, dass required entweder ein Boolean oder undefiniert ist.

03:09.370 --> 03:12.610
Jetzt haben wir also die validierbare Schnittstelle.

03:12.610 --> 03:13.893
Was können wir damit tun?

03:14.930 --> 03:17.893
Nun, da wir diese Schnittstelle erstellt haben,

03:18.830 --> 03:21.330
können wir die gesuchte Funktion, die

03:21.330 --> 03:24.220
Validierungsfunktion, erstellen.

03:24.220 --> 03:27.410
Das sollte ein solches validierbares Objekt erhalten.

03:27.410 --> 03:32.410
ValidatableInput ist also vom Typ Validatable.

03:32.410 --> 03:33.450
Das ist meine Idee hier.

03:33.450 --> 03:36.400
Er erhält also ein Objekt, das diese Struktur hat.

03:36.400 --> 03:38.270
Darin können wir nun prüfen,

03:38.270 --> 03:41.670
ob all diese Eigenschaften vorhanden sind, und dann

03:41.670 --> 03:44.810
die entsprechende Validierung durchführen.

03:44.810 --> 03:46.150
Was genau machen wir nun

03:46.150 --> 03:48.200
in der Validierungsfunktion?

03:48.200 --> 03:49.033
Nun, am Ende möchte

03:49.033 --> 03:50.930
ich eine Variable erstellen, isValid,

03:50.930 --> 03:52.330
die zunächst true ist.

03:52.330 --> 03:54.030
Die Standardannahme ist also, dass das,

03:54.030 --> 03:55.510
was wir bekommen, wahr ist.

03:55.510 --> 03:57.430
Aber wir setzen sie auf false,

03:57.430 --> 04:01.330
sobald mindestens eine unserer Prüfungen fehlschlägt.

04:01.330 --> 04:03.480
Beginnen wir nun mit der ersten Prüfung.

04:03.480 --> 04:06.410
Schauen wir mal, ob der validatableInput hier,

04:06.410 --> 04:08.220
dieses Argument, das wir bekommen,

04:08.220 --> 04:11.380
ob das eine erforderliche Eigenschaft hat?

04:11.380 --> 04:13.260
Wenn das nicht undefiniert ist.

04:13.260 --> 04:16.490
Wenn dies gesetzt ist und somit wahr ist, bedeutet

04:16.490 --> 04:18.630
dies, dass der Wert erforderlich

04:18.630 --> 04:20.630
ist und nicht leer sein darf.

04:20.630 --> 04:22.080
So jetzt hier, können

04:22.080 --> 04:26.160
wir isValid gleich isValid und die Art und Weise JavaScript

04:26.160 --> 04:27.700
funktioniert, stellt

04:27.700 --> 04:30.550
dies sicher, dass der neue Wert von isValid

04:30.550 --> 04:34.330
wird falsch sein, wenn die Sache nach und ist falsch.

04:34.330 --> 04:36.870
Denn wenn mindestens eines der beiden Dinge falsch ist,

04:36.870 --> 04:38.660
wird der Gesamtwert falsch sein.

04:38.660 --> 04:40.500
Jetzt ist isValid zunächst wahr,

04:40.500 --> 04:44.070
aber wenn das Ding nach dem logischen und-Operator falsch

04:44.070 --> 04:46.300
ist, wird isValid falsch sein.

04:46.300 --> 04:48.700
Und am Ende werde ich isValid zurückgeben.

04:48.700 --> 04:50.040
Was fügen wir nun also

04:50.040 --> 04:53.550
nach den beiden kaufmännischen Symbolen hinzu?

04:53.550 --> 04:57.290
Nun, ich möchte überprüfen, ob validatableInput. Wert, wenn dieser leer

04:57.290 --> 04:58.170
ist.

04:58.170 --> 05:00.530
Und dafür können wir sie abschneiden

05:00.530 --> 05:04.210
und die Länge überprüfen, oder?

05:04.210 --> 05:05.630
Nun, das Problem ist, dass wir nicht

05:05.630 --> 05:07.510
wissen, ob value eine Zeichenkette ist.

05:07.510 --> 05:09.090
Es ist eine Zeichenkette oder eine Zahl.

05:09.090 --> 05:10.910
Es ist also nicht garantiert, dass es sich um eine

05:10.910 --> 05:12.140
Zeichenkette handelt, und daher

05:12.140 --> 05:14.100
ist die Methode trim nicht immer verfügbar.

05:14.100 --> 05:17.570
Nun gibt es verschiedene Möglichkeiten, dies zu umgehen.

05:17.570 --> 05:19.600
Wir könnten einen Typschutz hinzufügen, wir könnten

05:19.600 --> 05:23.390
prüfen, ob typeof validatableInput. Wert gleich String ist, und

05:25.250 --> 05:30.250
führen Sie diese Prüfung nur dann durch, wenn er gleich ist.

05:30.920 --> 05:33.040
Aber das wäre ja auch ein bisschen überflüssig.

05:33.040 --> 05:36.120
Was wir hier tun können, ist sehr einfach.

05:36.120 --> 05:37.257
Wir können einfach sagen: "Nun,

05:37.257 --> 05:39.140
konvertiere es in eine Zeichenkette. Wenn es eine Zahl war, ist es jetzt wieder eine Zeichenkette.

05:39.140 --> 05:41.370
Wenn es sich um eine Zeichenkette handelte, änderte sich nichts.

05:41.370 --> 05:44.170
Und damit machen wir das hier.

05:44.170 --> 05:45.900
Jetzt muss ich nur noch meinen Scheck

05:45.900 --> 05:47.950
hier einfügen, um zu prüfen, ob er Null ist.

05:47.950 --> 05:50.360
Oder um genau zu sein, wenn sie nicht Null ist.

05:50.360 --> 05:53.463
Wenn sie also nicht Null ist, wird true

05:54.680 --> 05:56.810
zurückgegeben, und isValid

05:56.810 --> 05:58.740
bleibt true.

05:58.740 --> 06:00.500
Wenn es Null ist, also wenn es die Länge

06:00.500 --> 06:02.760
Null hat, wenn es leer ist, wird dies false zurückgeben

06:02.760 --> 06:04.940
und somit wird isValid false.

06:04.940 --> 06:06.890
Und wir überprüfen dies nur, wenn die erforderliche

06:06.890 --> 06:08.280
Prüfung mit der Einstellung

06:08.280 --> 06:11.190
erforderlich auf true gekennzeichnet ist.

06:11.190 --> 06:13.530
Das ist der erste Check, den ich hier durchführen möchte.

06:13.530 --> 06:15.560
Es ist natürlich nicht das einzige.

06:15.560 --> 06:17.660
Wir können fortfahren und prüfen, ob

06:17.660 --> 06:18.950
validatableInput. minLength gesetzt

06:18.950 --> 06:23.880
ist, dann sollte die erhaltene Zeichenkette

06:23.880 --> 06:25.190
eine bestimmte Mindestlänge

06:25.190 --> 06:27.050
haben.

06:27.050 --> 06:28.780
Wichtig ist, dass die Zeichenfolge eine

06:28.780 --> 06:30.440
bestimmte Mindestlänge hat.

06:30.440 --> 06:31.620
Hier geht es nicht um Zahlen, wir

06:31.620 --> 06:33.600
suchen nicht nach einem Mindestwert für eine Zahl.

06:33.600 --> 06:37.060
Hier können wir also einen Typschutz hinzufügen, den wir

06:37.060 --> 06:40.390
in diese Prüfung einbeziehen können, und prüfen, ob

06:40.390 --> 06:42.320
typeof validatableInput. Wert ist gleich

06:42.320 --> 06:46.910
String.

06:46.910 --> 06:48.460
Wenn dies nicht der Fall ist, brauchen wir diese Prüfung

06:48.460 --> 06:50.357
nicht vorzunehmen, weil es dann nichts zu prüfen gibt.

06:50.357 --> 06:52.570
Wenn unser Wert eine Zahl ist, ist das für uns nicht von Belang.

06:52.570 --> 06:55.330
Wenn wir eine Mindestlänge für eine Zahl festlegen, überspringen

06:55.330 --> 06:57.710
wir diese Prüfung im Grunde genommen, da sie nicht

06:57.710 --> 06:59.330
viel Sinn macht.

06:59.330 --> 07:01.890
Wenn wir eine Zeichenkette haben, und minLength

07:01.890 --> 07:03.420
gesetzt ist, dann möchte

07:03.420 --> 07:05.663
ich isValid gleich isValid und, und

07:06.570 --> 07:10.053
dann wieder, unsere Prüfung zu setzen.

07:11.181 --> 07:12.600
Und hier wird

07:12.600 --> 07:16.580
geprüft, ob validatableInput. Wert, von dem wir wissen, dass er eine Zeichenkette

07:16.580 --> 07:24.070
ist, ist größer als validatableInput.

07:24.070 --> 07:24.070
minLänge.

07:24.070 --> 07:28.520
Also größer als der Wert, der hier festgelegt wurde.

07:28.520 --> 07:31.660
Nun gibt es aber ein mögliches Problem, und wissen

07:31.660 --> 07:33.920
Sie, welches das sein könnte?

07:33.920 --> 07:36.163
Dies sollte im Allgemeinen funktionieren, schlägt aber fehl,

07:37.030 --> 07:38.630
wenn minLength auf Null gesetzt ist.

07:38.630 --> 07:42.210
Die Absicht des Entwicklers, den Wert auf Null zu setzen, besteht

07:42.210 --> 07:45.760
wahrscheinlich nicht darin, diese Prüfung zu überspringen,

07:45.760 --> 07:48.760
sondern zu prüfen, ob die Mindestlänge von Null tatsächlich

07:48.760 --> 07:50.170
gegeben ist.

07:50.170 --> 07:51.960
Nun, es ist wohl eine überflüssige Prüfung,

07:51.960 --> 07:53.800
weil sie im Grunde prüft, ob wir überhaupt

07:53.800 --> 07:55.850
etwas haben, was wir bereits mit der erforderlichen

07:55.850 --> 07:57.260
Prüfung tun.

07:57.260 --> 07:59.300
Es ist also kein großes Problem.

07:59.300 --> 08:01.330
Wenn Sie hier jedoch besonders sicher

08:01.330 --> 08:05.470
sein wollen, sollten wir tatsächlich prüfen, ob validatableInput.

08:05.470 --> 08:05.470
minLength ist nicht gleich undefiniert.

08:05.470 --> 08:10.470
Oder nicht gleich null, mit einem Gleichheitszeichen,

08:10.640 --> 08:17.130
das schließt null und undefiniert ein, so funktioniert JavaScript.

08:17.130 --> 08:18.890
Das ist ein bisschen sicherer, weil wir

08:18.890 --> 08:20.470
jetzt sicherstellen, dass wir diese

08:20.470 --> 08:23.010
Prüfung immer durchführen, auch wenn minLength auf Null

08:23.010 --> 08:25.140
gesetzt ist, was ein falscher Wert ist.

08:25.140 --> 08:27.222
Auch hier kann man darüber streiten, ob es sinnvoll

08:27.222 --> 08:29.740
ist, denn es ist im Grunde die gleiche Prüfung wie dort oben,

08:29.740 --> 08:32.270
aber trotzdem möchte ich sie hier durchführen.

08:32.270 --> 08:34.930
Das ist also die minLength.

08:34.930 --> 08:36.790
Jetzt kopiere ich das und mache im Grunde

08:36.790 --> 08:38.130
dasselbe für maxLength.

08:38.130 --> 08:40.720
Also wird auch hier maxLength geprüft,

08:40.720 --> 08:44.350
auch hier und auch nur für Strings.

08:44.350 --> 08:46.870
Und natürlich müssen wir hier einfach umkehren.

08:46.870 --> 08:49.280
Wir wollen sicherstellen, dass die Länge des angegebenen

08:49.280 --> 08:52.380
Wertes unter unserer maximalen Länge liegt.

08:52.380 --> 08:55.173
Tja, und jetzt bleiben noch zwei Prüfungen für Min-

08:56.810 --> 08:58.760
und Max-Wert übrig, die nur bei einer

08:58.760 --> 09:00.160
Zahl Sinn machen.

09:00.160 --> 09:03.310
Hier werde ich also eine weitere Prüfung hinzufügen und

09:03.310 --> 09:05.150
prüfen, ob validatableInput. min ist nicht gleich

09:05.150 --> 09:08.280
null.

09:09.720 --> 09:11.100
Auch hier überprüfe ich nicht nur den

09:11.100 --> 09:13.820
Wahrheitsgehalt, denn das wäre bei einem Wert von Null problematisch.

09:13.820 --> 09:17.050
Und dann prüfe ich, ob der Typ von validatableInput. Der Wert ist gleich

09:17.050 --> 09:21.770
der Zahl.

09:21.770 --> 09:23.250
Denn ich sehe nicht viel Sinn

09:23.250 --> 09:25.640
darin, dies auf eine Zeichenkette zu prüfen.

09:25.640 --> 09:26.760
Wenn Sie nach einer Zeichenkette suchen wollen,

09:26.760 --> 09:28.020
können Sie dies natürlich weglassen.

09:28.020 --> 09:29.680
Dann müssen Sie nur noch sicherstellen,

09:29.680 --> 09:32.120
dass Sie den Wert in eine Zahl umwandeln, wenn Sie ihn in dem

09:32.120 --> 09:34.380
Scheck verwenden, den wir gleich schreiben werden.

09:34.380 --> 09:35.970
Die Prüfung, die wir jetzt schreiben werden,

09:35.970 --> 09:37.220
verwendet wiederum den alten Wert

09:37.220 --> 09:39.740
von isValid und kombiniert ihn mit einer neuen Prüfung, um ihn dann

09:39.740 --> 09:41.500
wieder in isValid zu speichern.

09:41.500 --> 09:44.000
Und die neue Prüfung sollte nun unsere

09:44.000 --> 09:47.210
Zahl gut einbeziehen und prüfen, ob sie größer als

09:47.210 --> 09:48.730
der Mindestwert ist.

09:48.730 --> 09:54.650
Hier prüfe ich also, ob validatableInput. Wert größer ist als validatableInput.

09:54.650 --> 09:54.650
min.

09:54.650 --> 09:58.690
Und jetzt können wir dies für max wiederholen,

09:58.690 --> 10:02.010
also brauchen wir hier max und hier brauchen wir auch max

10:02.010 --> 10:06.190
und wir müssen dies hier in ein kleiner als Symbol ändern.

10:06.190 --> 10:10.363
Damit prüfen wir alle möglichen Szenarien, die Sie hier

10:11.920 --> 10:13.230
haben könnten.

10:13.230 --> 10:16.930
Und wir geben isValid zurück.

10:16.930 --> 10:18.710
Jetzt müssen wir nur noch Objekte erstellen,

10:19.840 --> 10:21.600
die dieser Schnittstelle entsprechen, um sie

10:21.600 --> 10:23.630
dann an die Validierungsfunktion zu senden.

10:23.630 --> 10:26.573
Gehen wir dazu zu Projekteingabe, und dort

10:28.160 --> 10:31.360
in gatherUserInput möchte ich mein validierbares

10:31.360 --> 10:34.000
Objekt konstruieren.

10:34.000 --> 10:36.360
Nebenbei bemerkt, neben einer Schnittstelle hätten wir

10:36.360 --> 10:38.420
hier natürlich auch eine Klasse erstellen können,

10:38.420 --> 10:40.870
die wir dann mit dem new-Schlüsselwort instanziieren könnten,

10:40.870 --> 10:43.570
aber ich möchte hier nur zu Übungs- und Demozwecken zeigen, wie

10:43.570 --> 10:46.070
das mit einer Schnittstelle funktioniert.

10:46.070 --> 10:48.990
Hier haben wir also unser titleValidatable,

10:48.990 --> 10:51.900
das vom Typ Validatable sein sollte.

10:52.850 --> 10:54.970
Und das ist natürlich ein Objekt, das eine

10:54.970 --> 10:56.830
Werteigenschaft haben muss.

10:56.830 --> 10:58.930
Und das ist unser eingegebener Titel.

10:58.930 --> 11:01.020
Es braucht keine anderen Eigenschaften,

11:01.020 --> 11:03.550
aber ich möchte überprüfen, ob es nicht leer

11:03.550 --> 11:06.750
ist, also setzen wir required auf true.

11:06.750 --> 11:08.743
Und dann können wir das kopieren und für

11:09.710 --> 11:12.430
die Beschreibung und für die Leute wiederholen.

11:12.430 --> 11:16.270
Und hier haben wir die Beschreibung, hoppla, die eingegebene

11:16.270 --> 11:19.250
Beschreibung, meine ich.

11:19.250 --> 11:21.880
Hier haben wir die eingetragenen Personen.

11:21.880 --> 11:24.260
Um hier genau zu sein, möchte ich eine Zahl haben.

11:24.260 --> 11:26.230
Ich wandle dies also in eine Zahl mit einem Pluszeichen um.

11:26.230 --> 11:29.020
Alle sollten erforderlich sein, aber auch hier sollten

11:29.020 --> 11:30.810
wir sagen, dass die Beschreibung eine

11:30.810 --> 11:32.890
Mindestlänge von fünf Zeichen haben sollte

11:32.890 --> 11:35.420
und für die Personen sollte das Minimum eins sein,

11:35.420 --> 11:38.823
so dass wir mindestens zwei Personen zugeordnet haben.

11:39.820 --> 11:42.030
Übrigens bleibt es Ihnen überlassen, wie Sie dies umsetzen.

11:42.030 --> 11:44.020
Natürlich können Sie in Ihrer

11:44.020 --> 11:47.200
Validierungslogik auch auf größer gleich kleiner

11:47.200 --> 11:50.080
gleich prüfen, wenn Sie das möchten.

11:50.080 --> 11:52.030
Dasselbe gilt für die Länge des Kurses.

11:52.030 --> 11:54.200
Größer gleich, kleiner gleich.

11:54.200 --> 11:56.940
Auch das ist möglich.

11:56.940 --> 11:58.660
Ich werde diese Änderungen beibehalten.

11:58.660 --> 12:00.520
Jetzt haben wir also mindestens eine und höchstens

12:00.520 --> 12:01.920
fünf Personen zugewiesen.

12:01.920 --> 12:05.253
Jetzt haben wir diese drei validierbaren Objekte,

12:06.100 --> 12:08.500
und hier übergeben wir an die Validierungsfunktion

12:08.500 --> 12:11.680
unser titleValidatable, an den zweiten Funktionsaufruf

12:11.680 --> 12:16.440
übergebe ich das descriptionValidatable und an den dritten Funktionsaufruf

12:16.440 --> 12:21.310
übergebe ich peopleValidatable.

12:21.310 --> 12:24.460
Und jetzt sollte validate true zurückgeben, wenn sie alle gültig

12:24.460 --> 12:26.380
sind, und false andernfalls.

12:26.380 --> 12:29.480
Nun möchte ich prüfen, ob mindestens eine davon

12:29.480 --> 12:32.420
fehlschlägt, indem ich prüfe, ob diese alle

12:32.420 --> 12:36.580
falsch sind, indem ich ein Ausrufezeichen davor setze, um zu

12:36.580 --> 12:38.970
prüfen, ob dies falsch ist oder dies

12:38.970 --> 12:41.560
falsch ist oder dies falsch ist.

12:41.560 --> 12:42.740
Und wenn mindestens einer von ihnen

12:42.740 --> 12:44.750
falsch ist, wenn also mindestens einer der Validierungsfunktionsaufrufe

12:44.750 --> 12:45.730
falsch zurückgibt, werden wir

12:45.730 --> 12:47.760
ihn dort einfügen und die Warnung anzeigen.

12:47.760 --> 12:49.860
Um das zu testen,

12:51.930 --> 12:54.860
gehe ich zum Index.

12:54.860 --> 12:54.860
html,

12:54.860 --> 12:56.270
denn bei den Eingaben

12:56.270 --> 12:58.210
für Personen erlaube ich eigentlich maximal

12:58.210 --> 13:00.410
10 und minimal null.

13:00.410 --> 13:01.460
Bei der Eingabe können wir also technisch gesehen ungültige Werte eingeben.

13:01.460 --> 13:05.120
Natürlich absichtlich, damit wir unsere Logik testen

13:05.120 --> 13:06.240
können.

13:06.240 --> 13:08.090
Und dort für jetzt lassen Sie uns alles

13:08.090 --> 13:10.200
speichern, kompiliert ohne Fehler.

13:10.200 --> 13:11.750
Probieren wir es jetzt aus.

13:11.750 --> 13:13.083
Wenn ich auf Projekt hinzufügen klicke,

13:13.920 --> 13:16.000
erhalte ich eine Fehlermeldung, was gut ist.

13:16.000 --> 13:17.430
Geben wir nun den Test ein, erhalten wir immer noch eine Fehlermeldung.

13:17.430 --> 13:21.370
Geben wir hier test und hier fünf ein, bekomme ich

13:21.370 --> 13:24.180
immer noch eine Fehlermeldung.

13:24.180 --> 13:25.390
Weil meine Beschreibung zu kurz ist.

13:25.390 --> 13:26.870
Wenn ich ein weiteres Zeichen eingebe,

13:26.870 --> 13:28.160
habe ich die Mindestlänge, und

13:28.160 --> 13:29.500
ich kann dies erstellen.

13:29.500 --> 13:31.210
Geben wir also, sagen wir mal, minus

13:31.210 --> 13:32.640
eine Person ein, und nun gut,

13:32.640 --> 13:34.580
html unterstützt dies nicht.

13:34.580 --> 13:37.940
Aber wenn wir eine Null oder eine Sechs eingeben, erhalten

13:37.940 --> 13:39.200
wir Fehler.

13:39.200 --> 13:42.040
Und nur wenn ich etwas zwischen eins und fünf

13:42.040 --> 13:43.840
eingebe, funktioniert es.

13:43.840 --> 13:46.100
Das scheint also zu funktionieren,

13:46.100 --> 13:49.260
und das ist auch gut so.

13:49.260 --> 13:50.240
Und das ist natürlich nur eine

13:50.240 --> 13:51.850
Möglichkeit, eine Validierung durchzuführen.

13:51.850 --> 13:53.570
Aber ein Weg, der tatsächlich jetzt ziemlich

13:53.570 --> 13:56.510
wiederverwendbar ist, könnte so auch in anderen Teilen der App verwendet

13:56.510 --> 13:59.170
werden und natürlich nutzt es die Vorteile von Typescript

13:59.170 --> 14:01.660
und bietet uns großartige Unterstützung und Typüberprüfung,

14:01.660 --> 14:04.480
um unnötige Fehler zu vermeiden.
