WEBVTT

00:02.190 --> 00:03.570
-: También tenemos módulo aquí.

00:03.570 --> 00:06.050
Ahora, el módulo es una opción que omitiré por ahora,

00:06.050 --> 00:07.540
porque realmente sólo tiene sentido

00:07.540 --> 00:10.830
una vez que aprendamos sobre los módulos en TypeScript y cómo podemos

00:10.830 --> 00:13.400
conectar múltiples archivos.

00:13.400 --> 00:15.350
Así que ignoremos eso por ahora.

00:15.350 --> 00:17.250
Sin embargo, Lib es interesante.

00:17.250 --> 00:20.890
Lib es una opción que permite especificar qué objetos

00:20.890 --> 00:25.650
y características por defecto conoce TypeScript.

00:25.650 --> 00:28.580
Con eso me refiero a cosas como trabajar con el dom.

00:28.580 --> 00:31.930
Digamos que en el índice. html tenemos un botón y en este

00:31.930 --> 00:33.700
botón decimos: "Haz clic en mí. Ahora, cuando hacemos clic en este botón sólo

00:33.700 --> 00:35.100
queremos imprimir el mensaje.

00:35.100 --> 00:36.610
Ahora, en app. n este caso, podemos seleccionar este botón.

00:36.610 --> 00:39.820
Podemos acceder a este botón

00:39.820 --> 00:41.420
con el documento. querySelector.

00:43.808 --> 00:44.641
Por ejemplo, seleccionando el primer botón que encontramos.

00:44.641 --> 00:48.130
Ahora bien, si hacemos eso, esto funciona.

00:48.130 --> 00:51.580
Aquí no hay ningún tipo de error.

00:51.580 --> 00:53.000
Así que si voy a mi botón y añado

00:53.000 --> 00:58.000
un EventListener aquí, obtengo un error aquí en realidad porque TypeScript no sabe con seguridad

00:58.390 --> 01:00.990
si encontramos un botón aquí.

01:00.990 --> 01:04.010
Por ahora podemos trabajar con un signo de exclamación,

01:04.010 --> 01:07.310
después de esta línea y volveré a lo que hace exactamente

01:07.310 --> 01:08.860
esto en el futuro.

01:08.860 --> 01:11.320
Básicamente le dice a TypeScript, "No

01:11.320 --> 01:13.667
te preocupes, "tal botón existirá.

01:13.667 --> 01:15.097
"Vamos a obtener un valor aquí. Así que ahora podemos añadir un evento de clic aquí.

01:15.097 --> 01:17.360
Y luego encontrar alguna función anónima

01:17.360 --> 01:19.470
tal vez donde una consola. registro pulsado.

01:19.470 --> 01:21.670
Ahora bien, lo interesante aquí no es tanto que haya

01:21.670 --> 01:24.920
tenido que añadir el signo de exclamación,

01:24.920 --> 01:26.450
como he dicho volveré a ello, sino

01:26.450 --> 01:29.310
que si ejecuto tsc esto simplemente se compila.

01:29.310 --> 01:31.150
Ahora, ¿no debería TypeScript

01:31.150 --> 01:34.840
quejarse de que el documento es desconocido aquí?

01:34.840 --> 01:38.370
¿Cómo sabe que disponemos de ese documento, constante

01:38.370 --> 01:39.690
o variable?

01:39.690 --> 01:43.290
¿Cómo sabe que, aunque tengamos eso disponible,

01:43.290 --> 01:45.610
contiene un objeto que tiene nuestro

01:45.610 --> 01:48.350
método querySelector?

01:48.350 --> 01:50.010
¿Cómo sabe que el botón es algo que tiene

01:50.010 --> 01:51.690
el método addEventListener?

01:51.690 --> 01:55.932
¿Cómo sabe TypeScript todo eso?

01:55.932 --> 01:57.120
Ahora podrías decir: "Por supuesto que lo sabe. Porque en Vanilla JavaScript

01:57.120 --> 01:59.290
esto sería un código válido, pero ten en cuenta que

01:59.290 --> 02:01.430
cuando escribes código TypeScript, no lo escribes

02:01.430 --> 02:03.290
necesariamente para el navegador.

02:03.290 --> 02:05.580
Podrías estar escribiendo tu Node. js con TypeScript

02:05.580 --> 02:08.080
y ahí sí que no funcionaría

02:08.080 --> 02:11.310
todo esto.

02:11.310 --> 02:13.200
Así que, la razón por la que esto

02:13.200 --> 02:14.630
funciona es esta opción lib y como usted ve que

02:14.630 --> 02:18.280
ni siquiera se establece aquí, pero si no se establece entonces algunos valores predeterminados se asume.

02:18.280 --> 02:21.940
Si no se establece, los valores predeterminados dependen

02:21.940 --> 02:24.420
de su objetivo de JavaScript aquí, y para

02:24.420 --> 02:28.180
es6, por defecto, incluye todas las características que

02:28.180 --> 02:31.536
están globalmente disponibles en es6.

02:31.536 --> 02:33.270
Por ejemplo, el objeto Map que está disponible en es6.

02:33.270 --> 02:35.940
Por lo tanto, no se quejaría si se utiliza el Mapa.

02:35.940 --> 02:40.120
Así que asume que todas las características de es6 que

02:40.120 --> 02:45.120
están disponibles globalmente en JavaScript, también están disponibles

02:46.400 --> 02:48.700
en TypeScript.

02:50.677 --> 02:51.780
Y además asume que

02:51.780 --> 02:54.530
todas las API's del DOM están disponibles.

02:54.530 --> 02:57.070
Por cierto, encontrarás las descripciones detalladas sobre

02:57.070 --> 03:00.670
todas estas opciones en el cuadro oficial que está enlazado en la conferencia al final

03:00.670 --> 03:01.740
de este módulo.

03:01.740 --> 03:04.550
Así que, resumiendo, si la opción lib no está establecida se

03:04.550 --> 03:07.300
asumen algunos valores por defecto y estos son típicamente

03:07.300 --> 03:09.490
los valores por defecto que necesitas para que

03:09.490 --> 03:11.520
TypeScript se ejecute en el navegador.

03:11.520 --> 03:13.760
Por lo tanto, todas las API de DOM han desaparecido.

03:13.760 --> 03:16.030
Si comentamos esto y ahora compilo

03:16.030 --> 03:19.014
todo definitivamente me da un error, porque

03:19.014 --> 03:20.670
ahora que lo comentan ya

03:20.670 --> 03:24.780
no tenemos la configuración por defecto.

03:24.780 --> 03:26.010
En su lugar, ahora decimos: "Oye, por favor,

03:26.010 --> 03:28.050
incluye "algunas bibliotecas por defecto", algunas definiciones

03:28.050 --> 03:30.370
de tipo por defecto se podría decir, que te daré en esta matriz.

03:30.370 --> 03:32.437
Y, como ves, no estoy pasando ninguna

03:32.437 --> 03:36.330
descripción, ningún camino, ningún valor aquí.

03:36.330 --> 03:39.470
Y por lo tanto, lo que estoy diciendo a TypeScript ahora es, "Hey,

03:39.470 --> 03:43.213
con respecto a todos los valores predeterminados, ya sabes, "por favor, tenga

03:44.162 --> 03:45.050
en cuenta esto. Y, ya sabes, nada.

03:45.050 --> 03:46.920
Por lo tanto, sólo si eso se comenta, funciona,

03:46.920 --> 03:50.037
porque entonces TypeScript asumirá algunos valores por defecto.

03:50.037 --> 03:51.770
Si establezco el valor predeterminado explícitamente,

03:51.770 --> 03:53.580
entonces TypeScript, por supuesto, se adhiere a

03:53.580 --> 03:55.300
lo que estoy estableciendo aquí.

03:55.300 --> 03:57.410
Y aquí por ejemplo, no conoce el documento,

03:57.410 --> 03:59.740
ni siquiera conoce la consola aquí.

03:59.740 --> 04:01.600
Así que por lo tanto, queremos establecer

04:01.600 --> 04:02.680
este dos valores más razonables

04:02.680 --> 04:05.410
y, de nuevo, si se pulsa el espacio de control, y aquí se obtiene

04:05.410 --> 04:07.343
la finalización automática.

04:08.900 --> 04:10.930
Por ejemplo, ahí podríamos añadir dom.

04:10.930 --> 04:12.360
Eso es un identificador y hay algunos identificadores

04:12.360 --> 04:13.800
predefinidos, que TypeScript entiende, de nuevo,

04:13.800 --> 04:15.800
encontrarás una lista completa en la documentación oficial.

04:15.800 --> 04:18.280
Los documentos de esta opción se adjuntan

04:18.280 --> 04:21.070
también a esta conferencia.

04:21.070 --> 04:22.840
Así que, este es un identificador que TypeScript

04:22.840 --> 04:26.070
entiende y es un identificador que básicamente desbloquea todas las APIs

04:26.070 --> 04:27.750
del DOM en TypeScript, para que TypeScript

04:27.750 --> 04:30.100
entienda lo que estás haciendo aquí.

04:30.100 --> 04:32.680
Así que ahora, ya ves que conoce la consola, conoce

04:32.680 --> 04:35.150
el documento, y así sucesivamente.

04:35.150 --> 04:37.040
Así que ahora, ya que estamos trabajando

04:37.040 --> 04:40.100
con Next-Gen JavaScript, también deberíamos añadir la opción

04:40.100 --> 04:42.550
es6, para que TypeScript también entienda todas

04:42.550 --> 04:45.400
las opciones es6 disponibles globalmente.

04:45.400 --> 04:50.830
Y también es una buena idea añadir dom. iterable y scripthost.

04:50.830 --> 04:54.130
Con esto aquí desbloquearíamos todas las características del núcleo de JavaScript

04:54.130 --> 04:56.540
que querrías trabajar y esto, por cierto, es la configuración

04:56.540 --> 05:00.620
exacta por defecto que obtienes cuando estableces

05:00.620 --> 05:02.530
el objetivo en es6, de todos modos.

05:02.530 --> 05:05.250
Así que, si comentas esto y lo configuras así, tienes

05:05.250 --> 05:07.360
exactamente el mismo comportamiento

05:07.360 --> 05:09.980
que si no especificas lib en absoluto.

05:09.980 --> 05:13.550
Ahora, aquí voy a comentar que en sin embargo

05:13.550 --> 05:15.860
y con eso esto va a compilar.

05:15.860 --> 05:17.959
Una vez más, establecer esto es un poco redundante,

05:17.959 --> 05:20.920
sin embargo, sólo quiero explicar lo que hace.
