WEBVTT

00:02.220 --> 00:03.053
- : Passons à autre chose.

00:03.053 --> 00:04.950
Nous avons l'option outFile ici, maintenant

00:04.950 --> 00:07.730
cette option ne nous importe pas pour le moment, elle ne fonctionnera

00:07.730 --> 00:09.440
pas pour le moment.

00:09.440 --> 00:12.340
Plus intéressants pour nous sont outDIR et rootDir.

00:12.340 --> 00:14.720
Plus votre projet prend de l'ampleur,

00:14.720 --> 00:17.640
plus vous voudrez organiser vos fichiers.

00:17.640 --> 00:19.690
En général, vous ne voulez pas que vos

00:19.690 --> 00:21.770
fichiers traînent ici, dans votre dossier

00:21.770 --> 00:24.120
de projet au niveau de la racine.

00:24.120 --> 00:26.580
Au lieu de cela, ce que vous verrez souvent dans les projets,

00:26.580 --> 00:28.080
c'est que vous avez un dossier source,

00:28.080 --> 00:29.790
et un dossier dist, puis un autre, et encore

00:29.790 --> 00:31.240
un autre.

00:31.240 --> 00:35.690
Ainsi, le dossier dist a pour fonction de contenir tous les résultats, donc tous les

00:35.690 --> 00:37.800
fichiers JavaScript, par exemple.

00:37.800 --> 00:41.380
Et le dossier source pourrait contenir tous nos fichiers TypeScript.

00:41.380 --> 00:44.643
Nous pouvons donc déplacer les fichiers TypeScript dans le dossier

00:44.643 --> 00:47.430
source, et si je supprime maintenant le dossier JavaScript,

00:47.430 --> 00:49.891
nous avons le problème que si nous compilons tout,

00:49.891 --> 00:53.167
ces fichiers TypeScript sont compilés parce que TypeScript,

00:53.167 --> 00:55.768
le compilateur regarde dans les sous-dossiers,

00:55.768 --> 01:00.050
mais la sortie se trouve à côté de nos fichiers d'entrée.

01:00.050 --> 01:02.760
Et c'est quelque chose que nous pouvons contrôler avec le outDir,

01:02.760 --> 01:03.660
par exemple.

01:03.660 --> 01:07.117
Si nous définissons outDir, nous pouvons indiquer aux types

01:07.117 --> 01:10.900
avec le compilateur où le fichier créé doit être stocké.

01:10.900 --> 01:13.580
On pourrait le régler sur dist.

01:13.580 --> 01:17.037
Si nous faisons cela, si vous exécutez chia seed, vous verrez

01:17.037 --> 01:19.560
que les fichiers JavaScript ne sont pas placés

01:19.560 --> 01:21.500
dans le dossier source, mais dans

01:21.500 --> 01:23.170
le dossier dist.

01:23.170 --> 01:26.340
Il ne nous reste plus qu'à ajuster notre indice. html, et là, pointez sur

01:26.340 --> 01:31.630
dist/app. js et dist/analytics.

01:31.630 --> 01:31.630
js

01:31.630 --> 01:33.880
ou alternativement déplacer l'index. html dans le dossier dist

01:33.880 --> 01:36.172
mais alors notre serveur def ne fonctionnerait plus

01:36.172 --> 01:37.550
correctement maintenant.

01:37.550 --> 01:39.875
Donc, ajustons ces importations et avec

01:39.875 --> 01:44.140
cela, nous avons une application qui fonctionne toujours, comme vous

01:44.140 --> 01:45.270
le voyez, mais maintenant

01:45.270 --> 01:48.480
avec une structure de projet plus propre.

01:48.480 --> 01:49.650
Maintenant, la bonne chose

01:49.650 --> 01:51.530
est que si nous avons un sous-dossier ici,

01:51.530 --> 01:52.980
un dossier analytique, disons,

01:52.980 --> 01:54.893
et que nous avons notre fichier TypeScript

01:54.893 --> 01:57.350
là-dedans, alors si nous recompilons, et cela n'a pas

01:57.350 --> 01:59.540
d'importance si vous le faites avec cette commande

01:59.540 --> 02:00.373
ou le mode veille, cette

02:00.373 --> 02:03.300
structure de dossier que vous avez le dossier source sera répliquée

02:03.300 --> 02:05.640
dans le dossier dist qui est, bien sûr, très pratique

02:05.640 --> 02:07.370
parce que cela garantit que vous pouvez

02:07.370 --> 02:08.813
importer les fichiers fondamentalement

02:08.813 --> 02:14.110
comme vous les importeriez dans le dossier source, aussi bien, de sorte que la structure que vous avez mis en place là

02:14.110 --> 02:16.640
est conservée.

02:16.640 --> 02:18.800
Maintenant, vous pouvez également définir

02:18.800 --> 02:21.230
le répertoire racine et le définir spécifiquement

02:21.230 --> 02:23.800
au dossier où vos fichiers sont stockés, comme dans

02:23.800 --> 02:25.202
cet exemple, source, pour

02:25.202 --> 02:28.560
s'assurer que les types de compilateur ne regarde pas dans nos

02:28.560 --> 02:30.030
dossiers.

02:30.030 --> 02:31.530
C'est aussi quelque chose que vous

02:31.530 --> 02:34.003
pouvez faire avec l'option d'inclusion en bas, non ?

02:34.870 --> 02:36.007
Mais avec le répertoire

02:36.007 --> 02:38.781
racine, les types de compilateurs ne se contentent

02:38.781 --> 02:41.450
pas de regarder ce dossier source, ils s'assurent

02:41.450 --> 02:44.700
également que la structure du projet, que vous avez mise en

02:44.700 --> 02:45.680
place, est conservée

02:45.680 --> 02:47.880
dans un dossier dist.

02:47.880 --> 02:50.020
Maintenant, il le faisait par défaut avant, comme vous

02:50.020 --> 02:51.820
l'avez vu, mais gardez à l'esprit qu'avant il

02:51.820 --> 02:54.280
aurait inclus tous les fichiers TypeScript ici, tout le début

02:54.280 --> 02:55.699
de la source, donc, par exemple, si

02:55.699 --> 02:58.830
vous commentez ceci temporairement si nous avions un dossier utilisateur ici

02:58.830 --> 03:03.280
au niveau supérieur avec un utilisateur.

03:03.280 --> 03:03.280
ts

03:03.280 --> 03:06.170
où nous avons un nom d'utilisateur, disons Max, alors

03:06.170 --> 03:07.750
si nous compilons ceci, vous

03:07.750 --> 03:09.752
verrez tous ce dossier utilisateur

03:09.752 --> 03:11.420
dans le dossier dist.

03:11.420 --> 03:13.810
Et maintenant, le dossier source est également inclus

03:13.810 --> 03:17.200
parce que nous avons maintenant un fichier typescript à un niveau supérieur

03:17.200 --> 03:19.950
et donc le compilateur typescript pense que notre projet

03:19.950 --> 03:21.780
entier est à nouveau l'entrée et il reproduit

03:21.780 --> 03:25.970
la structure du dossier qu'il trouve dans le dossier dist.

03:25.970 --> 03:28.960
Bien sûr, ce n'est pas ce que nous voulons et

03:28.960 --> 03:30.120
c'est là que l'option

03:30.976 --> 03:32.660
rootDir nous aide.

03:32.660 --> 03:34.020
Si nous définissons ce paramètre

03:34.020 --> 03:35.950
comme source, même si nous avons d'autres dossiers

03:35.950 --> 03:38.630
contenant des fichiers TypeScript au niveau de la racine, ils

03:38.630 --> 03:40.400
ne seront pas inclus dans la sortie et le dossier

03:40.400 --> 03:41.830
source lui-même ne se retrouvera

03:41.830 --> 03:43.780
pas soudainement là.

03:43.780 --> 03:46.480
Souvent, vous définissez à la fois rootDir et outDir

03:46.480 --> 03:49.650
pour indiquer clairement où se trouvent vos fichiers d'entrée

03:49.650 --> 03:52.040
et où sont générés vos fichiers de sortie.

03:52.040 --> 03:54.870
Si nous allons de l'avant, nous pouvons ignorer le composite.

03:54.870 --> 03:57.010
Nous pouvons jeter un coup d'oeil à removeComments.

03:57.010 --> 03:58.780
Il devrait être assez clair que si

03:58.780 --> 04:00.850
vous définissez cette option, tous les

04:00.850 --> 04:04.450
commentaires que vous pourriez avoir dans vos fichiers TypeScript

04:04.450 --> 04:08.000
seront supprimés dans les fichiers JavaScript compilés.

04:08.000 --> 04:11.200
Donc si je commente ceci et que je compile mon code, vous verrez une

04:11.200 --> 04:12.970
application. ts, j'ai un commentaire.

04:12.970 --> 04:14.990
Une application. js, ce n'est pas là.

04:14.990 --> 04:18.330
Vous pouvez donc faire cela pour réduire la taille de vos fichiers

04:18.330 --> 04:20.950
et l'effort pourrait être une bonne option.

04:20.950 --> 04:23.820
Vous pouvez également définir noEmit si vous ne souhaitez pas

04:23.820 --> 04:25.600
générer de fichiers JavaScript.

04:25.600 --> 04:27.130
Maintenant, cela peut sembler étrange

04:27.130 --> 04:29.190
parce que c'est l'idée de TypeScript, mais si

04:29.190 --> 04:30.700
vous voulez simplement vérifier

04:30.700 --> 04:32.420
si vos fichiers sont corrects, mais que

04:32.420 --> 04:35.030
vous ne voulez pas écrire tous ces fichiers de sortie, pour

04:35.030 --> 04:37.680
gagner du temps, par exemple, dans un projet plus important,

04:37.680 --> 04:39.120
alors vous pouvez définir cette

04:39.120 --> 04:41.792
option sur "true" pour que les types de compilateurs vérifient

04:41.792 --> 04:45.460
vos fichiers et signalent toute erreur potentielle sans créer réellement un

04:45.460 --> 04:47.903
fichier de sortie.

04:47.903 --> 04:50.490
importHelpers n'est pas vraiment important pour nous,

04:50.490 --> 04:52.065
ici nous pouvons l'ignorer.

04:52.065 --> 04:54.570
downlevelIteration est une option avancée.

04:54.570 --> 04:57.150
C'est intéressant lorsque vous compilez votre

04:57.150 --> 05:00.295
code vers des versions plus anciennes de JavaScript et que

05:00.295 --> 05:02.690
vous travaillez avec quatre boucles.

05:02.690 --> 05:05.798
Dans certains cas rares, vous pouvez rencontrer des problèmes lorsque

05:05.798 --> 05:08.378
la compilation ne fonctionne pas correctement.

05:08.378 --> 05:10.440
Cette option, si vous l'activez, vous donne

05:10.440 --> 05:12.770
une compilation plus exacte, qui fonctionnera

05:12.770 --> 05:15.280
dans ces cas de niche, donc vous pourriez penser que

05:15.280 --> 05:17.210
vous devriez toujours l'activer, mais

05:17.210 --> 05:20.097
il sera également la sortie plus où ces codes.

05:20.097 --> 05:21.880
Vous ne devriez donc l'activer que si vous

05:21.880 --> 05:25.110
avez des boucles et que vous constatez que le code généré se comporte soudainement

05:25.110 --> 05:27.700
différemment de ce qu'il devrait être en ce qui concerne ces

05:27.700 --> 05:29.023
boucles.
