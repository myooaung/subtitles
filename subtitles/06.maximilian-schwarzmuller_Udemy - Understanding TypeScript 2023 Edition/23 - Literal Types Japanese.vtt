WEBVTT

00:02.350 --> 00:03.921
インストラクター：さて､ ここでユニオンタイプが出てきました｡ 

00:03.921 --> 00:09.764
ここでは､ このユニオン型の考え方をベースに､ リテラル型についても紹介しましょう｡

00:09.764 --> 00:16.436
リテラル型とは､ ある変数やパラメータが､ 例えば数値や文字列を保持すべきであると言うだけでなく､

00:16.436 --> 00:23.800
それが保持すべき正確な値について非常に明確にしている型のことです｡

00:23.800 --> 00:26.064
ここベーシックでは､ 早くもそれが見えてきました｡ 

00:26.064 --> 00:28.408
例えば､ コンストNo.2｡ 

00:28.408 --> 00:32.098
そこにカーソルを合わせると､ 推測された型が数字ではなく､

00:32.098 --> 00:35.680
2であることがわかります｡ 8.

00:35.680 --> 00:37.290
そして､ タイプグループは､

00:37.290 --> 00:41.220
この具体的な数値を定数として推論しました｡

00:41.220 --> 00:43.810
これは決して変わることはなく､ したがってタイプグループは､ 私がここで割り当てた値が､

00:43.810 --> 00:52.796
私が持っている正確なタイプであることを知っています｡ もちろんこれは数字で､ 2と言ってもいいわけです｡

00:52.796 --> 00:52.796
8は数字の型から派生したものですが､

00:52.796 --> 00:56.320
具体的な数字なんです｡ また､ これは数字だけでなく､

00:56.320 --> 01:02.860
文字列などにも存在します｡

01:02.860 --> 01:02.860
そして､ 特に弦楽器には､ とても有効です｡ 

01:02.860 --> 01:10.190
しかし､ 関数の呼び出し側で結果をどのように返すかを定義できるようにして､

01:10.190 --> 01:25.370
数値から文字列への変換やその逆を強制的に行えるようにしたいと思います｡

01:25.370 --> 01:25.370
第3のパラメータでこれを行うことができ､

01:25.370 --> 01:37.240
その名前は､ 例えば結果タイプや結果変換など､ 好きなように命名することができます｡

01:37.240 --> 01:37.240
そこで､

01:37.240 --> 01:41.122
これを文字列型に設定することにします｡ ここで私が考えているのは､ 2つの数字を使ってcombineを呼び出し､

01:41.122 --> 01:55.630
例えば「as-number」という文字列を渡せば､ どの識別子を使うかは完全にあなた次第ということです｡

01:55.630 --> 01:55.630
この場合､

01:56.260 --> 01:59.357
2 つの文字列を渡すと､ 通常は else

02:02.910 --> 02:07.310
ブランチを作成してそれを結合しますが､ 代わりにこれを数値として返して､

02:07.310 --> 02:34.030
結合した文字列エージェントをここにコンソールログとして出力することができます｡

02:34.030 --> 02:34.030
そこで､

02:34.030 --> 02:41.730
ifチェックにresultConversionを含めることで､ 関数内でこれらの識別子を考慮するようにすればよいのです｡

02:41.730 --> 02:41.730
2つの文字列を強制的に数値として足し算させたいのか､

02:45.700 --> 02:49.930
それとも数学的計算や文字列の連結に関係なく､ 結果を強制的にテキストや数値に変換させたいのか､

02:49.930 --> 03:03.039
ということです｡

03:03.039 --> 03:03.039
もし強制的に変換したいのであれば､

03:05.960 --> 03:15.340
ここにifチェックを追加して､ resultの変換が「数値として」と等しいかどうかをチェックし､

03:15.340 --> 03:24.420
そうであればresultの前にプラスを付けて数値に変換して返したい｡ 代替案は例えばparseFloatだが､

03:24.420 --> 03:33.593
ここでは少し短いのでプラスにする｡

03:34.570 --> 03:38.883
このファイルを保存してコンパイルすると､

03:38.883 --> 03:42.300
このような結果が得られます｡

03:42.300 --> 03:46.360
たとえば､ 文字列の組み合わせの場合､

03:47.470 --> 03:51.020
このような出力が得られます｡

03:51.020 --> 04:05.860
先ほど言ったように､ 組み合わせ自体の計算は､ 入力した型（ここでは文字列）に基づいて行われます｡

04:05.860 --> 04:19.180
別のロジックとしては､ ここで型をチェックし､ ここで指定している戻り値の型に基づいて別の操作を行うこともできます｡

04:19.180 --> 04:19.180
そこで､

04:19.180 --> 04:22.600
これをコメントアウトして､ 代わりに､ 入力1の型が数字で､

04:22.600 --> 04:30.865
入力2の型が数字､ またはresultConversionが「as-number」に等しければ､

04:30.865 --> 04:38.794
このように値を結合したいと思います｡ このエラーを避けるために､ ここでは各入力の前にプラスを追加して､

04:38.794 --> 04:48.490
各入力が数字に変換されることを保証してからそれらを結合しています｡

04:48.490 --> 04:51.130
補足：もし数値に変換できない文字列､

04:51.130 --> 04:54.610
例えばMaxのようなものを渡すと､ 結果としてNaN,

04:54.610 --> 04:58.800
Not a Numberが返ってくるでしょう｡

04:58.800 --> 05:00.280
そうでない場合は､ "as-number

05:00.280 --> 05:03.170
"がないように､ あるいは単に数値入力がないように､

05:03.170 --> 05:07.976
このブロックにして､ ここでもう一度結果を返し､ これを保存して再コンパイルすると､

05:07.976 --> 05:20.230
ページ上に別の出力が表示されます｡

05:20.230 --> 05:20.230
なぜなら､

05:20.230 --> 05:22.945
この行では結果を変換しているのではなく､

05:22.945 --> 05:31.970
2つの値を結合する前に変換しているからです｡

05:31.970 --> 05:31.970
ですから､

05:31.970 --> 05:41.180
どのロジックを実装するかは､ あなた次第です｡ 実は､ この講義の冒頭で説明したリテラルタイプの概念をもう少し詳しく見てみたいと思います｡

05:41.180 --> 05:41.180
私は「as-number」と「as-text」を渡していますが､

05:41.180 --> 05:47.600
今は開発者としてこれらの値を記憶しておかなければならないというビジネスのデメリットがあるのです｡

05:47.600 --> 05:50.450
ここでタイプを間違えないようにしなければなりません｡ 

05:50.450 --> 05:54.010
しかし､ "as-text "と "as-number

05:54.010 --> 06:00.940
"の2つの値しかない場合､ リテラルタイプで検索することも可能かもしれません｡

06:00.940 --> 06:04.173
これはどんな文字列でもいいわけではなく､ 「数字として」「テキストとして」であるべきだ」と言えるので､

06:04.173 --> 06:15.573
リテラル型と組み合わせたユニオン型を使っているのです｡

06:15.573 --> 06:15.573
リテラル型は､

06:15.573 --> 06:17.987
文字列や数値などのコア型をベースにした型ですが､

06:17.987 --> 06:24.750
特定のバージョンの型を持つことができます｡

06:24.750 --> 06:24.750
そこで､

06:24.750 --> 06:27.960
ここでは､ どの文字列でもなく､ この2つの文字列だけを許可することにしました｡

06:27.960 --> 06:34.207
そこで､ 結果変換のための文字列が欲しいのですが､ この2つの値のどちらかでなければなりません｡

06:34.207 --> 06:34.207
それ以外の文字列は許可されません｡

06:37.560 --> 06:40.747
これはリテラル型の考え方で､

06:40.747 --> 06:49.544
ユニオン型のコンテキストで使用されることがよくあります｡

06:49.544 --> 06:52.580
この場合､ 2つの可能な値が得られました｡ 

06:52.580 --> 07:03.800
例えば､ as-numbeとas-textを比較しようとすると､

07:03.800 --> 07:10.360
タイプグループはIDEで教えてくれますし､

07:10.360 --> 07:24.563
もちろん保存してターミナルでコンパイルします｡

07:25.550 --> 07:27.593
そのため､ 今回も型安全性を高め､

07:27.593 --> 07:31.590
間違った使い方をしないようにしました｡

07:31.590 --> 07:34.720
もちろん､ 値を渡す場合も同じです｡  もしここでタイプミスがあれば､

07:34.720 --> 07:49.562
"as-number "か "as-text "を使った場合のみエラーが発生します｡

07:49.562 --> 07:49.562
つまり､

07:49.562 --> 07:52.193
これらはユニオン型と組み合わせて使うと特に便利なリテラル型なのです｡
