WEBVTT

00:02.170 --> 00:03.830
Fonksiyonlara bağlı kalalım.

00:03.830 --> 00:07.120
Modern JavaScript'te mevcut olan bir başka güzel özellik de fonksiyon

00:07.120 --> 00:11.033
parametrelerine varsayılan argümanlar atayabilmenizdir.

00:11.880 --> 00:13.830
Diyelim ki burada add fonksiyonumuzda,

00:13.830 --> 00:17.720
herhangi bir nedenle b için varsayılan bir değer istedik.

00:17.720 --> 00:20.180
Yani iki sayıyı toplayabilmek istediğimizi biliyoruz.

00:20.180 --> 00:23.850
Ancak bu fonksiyonu yalnızca bir sayı ile çağırmanız

00:23.850 --> 00:28.130
durumunda, ikinci argüman veya ikinci parametre için bir varsayılan

00:28.130 --> 00:29.990
varsayacağız.

00:29.990 --> 00:32.120
Bunu, parametre listesinde buraya bir eşittir işareti

00:32.120 --> 00:34.980
ekleyerek ve ardından varsayılan değerimizi ayarlayarak yapabiliriz.

00:34.980 --> 00:36.920
Bu da tabii ki bizim tipimize uygun olmalı.

00:36.920 --> 00:40.020
Örneğin, bir veya varsayılan ne olması gerekiyorsa.

00:40.020 --> 00:42.770
Ve şimdi bu, bu işlevi yalnızca bir argümanla

00:42.770 --> 00:44.080
çağırmamızı sağlar.

00:44.080 --> 00:46.700
Yani bu şekilde çağırabilirim ve TypeScript şikayet

00:46.700 --> 00:48.830
etmez çünkü burada varsayılan bir argümanımız

00:48.830 --> 00:50.200
olduğunu algılar ve bu argüman

00:50.200 --> 00:51.860
b için alınır.

00:51.860 --> 00:53.910
Ve bu nedenle burada altı çıktısı alıyorum

00:53.910 --> 00:58.910
çünkü varsayılan b değerim bir ve ben beş ekliyorum, bu da altı yapıyor Şimdi, burada

00:59.130 --> 01:03.113
varsayılan argümanlarla ilgili önemli bir not var.

01:04.010 --> 01:07.090
Listede son sırada olmalılar.

01:07.090 --> 01:10.710
Örneğin, a'ya varsayılan bir argüman atarsanız, bir sorunumuz

01:10.710 --> 01:12.640
olacaktır, neden?

01:12.640 --> 01:15.290
Çünkü bir fonksiyonu çağırdığınızda varsayılan

01:15.290 --> 01:16.840
argümanlar atlanmaz.

01:16.840 --> 01:19.490
Yani burada bir argümanla bir fonksiyon

01:19.490 --> 01:21.990
çağırırsam, buraya aktardığım argümanlar

01:21.990 --> 01:25.060
aynı sırayla parametrelere aktarılır.

01:25.060 --> 01:27.240
Yani fonksiyonu tek bir argümanla, bu durumda

01:27.240 --> 01:29.900
beş argümanla çağırmak, bu tek argümanı parametre

01:29.900 --> 01:32.400
listesindeki ilk argümana aktarır.

01:32.400 --> 01:34.150
Ve ikinci argüman varsayılan

01:34.150 --> 01:37.660
olarak sağlanmadığından isteğe bağlı değildir.

01:37.660 --> 01:40.920
Dolayısıyla ikinci bir argüman sunmuyoruz.

01:40.920 --> 01:43.730
Yani TypeScript ya da aslında JavaScript, fonksiyon

01:43.730 --> 01:46.800
tanımınıza bakıp muhtemelen varsayılan argümanı

01:46.800 --> 01:50.650
atlamak ve varsayılan olmayan argümana değerinizi vermek istediğinizi

01:50.650 --> 01:53.290
tahmin etmez.

01:53.290 --> 01:55.740
Bunun yerine, sadece düzene bağlı kalır.

01:55.740 --> 01:59.720
Ve bu nedenle varsayılanları sağdan ayarlamalısınız.

01:59.720 --> 02:01.830
Bu nedenle, varsayılan argümanları

02:01.830 --> 02:04.010
kabul etmediğiniz parametrelerin varsayılan

02:04.010 --> 02:07.523
parametrelerinizden önce geldiğinden emin olun.
