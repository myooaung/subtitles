WEBVTT

00:02.160 --> 00:03.740
Instrutor: Então quais são nossas opções

00:03.740 --> 00:06.440
quando queremos dividir o código em vários arquivos?

00:06.440 --> 00:10.720
Agora, na verdade, temos três opções para isso.

00:10.720 --> 00:12.680
A primeira opção seria simplesmente escrever

00:12.680 --> 00:16.110
múltiplos arquivos de código, múltiplos arquivos TypeScript.

00:16.110 --> 00:17.460
O TypeScript compilará então

00:17.460 --> 00:20.710
automaticamente todos os arquivos de código no diretório fonte

00:20.710 --> 00:23.020
e importará manualmente os arquivos de script

00:23.020 --> 00:25.000
Java compilados para HTML.

00:25.000 --> 00:26.220
Essa é uma opção e para

00:26.220 --> 00:28.970
alguns projetos isso pode ser justo, mas você teria

00:28.970 --> 00:31.780
que gerenciar todas essas importações manualmente,

00:31.780 --> 00:34.600
que podem ser incômodas e propensas a erros e, ao usar

00:34.600 --> 00:36.980
certos recursos do TypeScript, você também

00:36.980 --> 00:39.560
desiste do suporte a tipos se algum tipo estiver

00:39.560 --> 00:42.100
definido no arquivo A e você o usa no arquivo B

00:42.100 --> 00:43.670
e o TypeScript não sabe sobre

00:43.670 --> 00:46.030
essa conexão.

00:46.030 --> 00:47.480
É por isso que esta não é realmente

00:47.480 --> 00:49.290
uma grande opção para projetos maiores.

00:49.290 --> 00:52.500
Em vez disso, para projetos maiores, temos duas opções principais.

00:52.500 --> 00:55.470
Temos namespaces e pacotes de arquivos, por exemplo.

00:55.470 --> 00:59.410
Agora namespaces é um recurso TypeScript, um recurso de sintaxe,

00:59.410 --> 01:03.430
você pode adicionar código especial ao seu código para usar este

01:03.430 --> 01:04.840
recurso e ele permite

01:04.840 --> 01:08.650
basicamente agrupar códigos abaixo de um namespace e depois

01:08.650 --> 01:12.730
importar namespaces para outros arquivos.

01:12.730 --> 01:16.020
Assim, você pode ter um espaço de nomes por arquivo, por exemplo.

01:16.020 --> 01:18.790
Importe outro arquivo para outro arquivo ainda

01:18.790 --> 01:21.930
e toque naquele espaço de nomes que vive em outro arquivo

01:21.930 --> 01:24.650
daquele arquivo de importação e veremos isso na

01:24.650 --> 01:25.970
prática, caso isso não

01:25.970 --> 01:28.030
esteja totalmente claro.

01:28.030 --> 01:30.020
O TypeScript não só suporta isso,

01:30.020 --> 01:34.130
mas também agrupa os arquivos em um único arquivo, para que você, no

01:34.130 --> 01:37.230
final, escreva o código em vários arquivos que são

01:37.230 --> 01:39.560
compilados, mas eles são então importados

01:39.560 --> 01:42.750
uns para os outros para que você tenha menos importações

01:42.750 --> 01:45.190
para gerenciar e não precise gerenciar

01:45.190 --> 01:46.950
manualmente diferentes importações

01:46.950 --> 01:50.030
em um arquivo HTML.

01:50.030 --> 01:52.180
Agora uma alternativa aos namespaces

01:52.180 --> 01:55.750
e, sem dúvida, a mais importante e moderna alternativa, é usar

01:55.750 --> 02:00.750
os módulos ES6 Importação/Exportação, também conhecidos como módulos ES6, porque

02:01.870 --> 02:06.480
acontece que, totalmente separado do TypeScript, o moderno script Java tem uma

02:06.480 --> 02:09.940
solução para este problema também porque você tem este problema

02:09.940 --> 02:11.440
não apenas em projetos TypeScript,

02:11.440 --> 02:13.140
mas em qualquer projeto maior

02:13.140 --> 02:15.850
de script Java.

02:15.850 --> 02:18.200
O moderno Java script out of the box suporta declarações

02:18.200 --> 02:21.150
de importação e exportação, o que permite que você declare

02:21.150 --> 02:23.110
qual arquivo depende de qual outro arquivo

02:23.110 --> 02:24.910
e então você tem todos esses arquivos

02:24.910 --> 02:27.920
individuais, mas você não precisa gerenciar as importações

02:27.920 --> 02:30.560
manualmente, em vez disso os navegadores, os navegadores

02:30.560 --> 02:33.770
modernos fazem isso.

02:33.770 --> 02:36.020
Eles o entendem e automaticamente baixam e executam

02:36.020 --> 02:38.800
arquivos de outro arquivo, dependendo disso.

02:38.800 --> 02:41.370
Você usa a sintaxe de importação/exportação para

02:41.370 --> 02:43.470
isso e o TypeScript também suporta isso.

02:43.470 --> 02:46.870
Portanto, você pode usar o TypeScript sem nenhum problema.

02:46.870 --> 02:48.700
Você compila por arquivo, mas

02:48.700 --> 02:50.810
só precisa importar um script porque,

02:50.810 --> 02:53.680
como acabei de mencionar, os navegadores modernos

02:53.680 --> 02:56.350
sabem como buscar todas as outras dependências

02:56.350 --> 02:58.570
e você também verá isso em ação nesta

02:58.570 --> 03:00.710
seção central aqui.

03:00.710 --> 03:02.320
Agora uma nota importante aqui,

03:02.320 --> 03:03.830
com isso nós tecnicamente acabaremos

03:03.830 --> 03:06.110
com vários arquivos ainda e embora não tenhamos

03:06.110 --> 03:09.140
que gerenciar as importações manualmente, o script importa,

03:09.140 --> 03:11.550
ainda temos algumas desvantagens por causa disso

03:11.550 --> 03:13.730
porque cada arquivo que você está dependendo

03:13.730 --> 03:16.900
precisa ser baixado separadamente, o que significa mais solicitações

03:16.900 --> 03:19.460
HTTP e assim por diante e, portanto, você pode agrupar

03:19.460 --> 03:22.210
arquivos para trabalhar em vários arquivos durante o

03:22.210 --> 03:24.860
desenvolvimento, mas enviar um único arquivo para

03:24.860 --> 03:30.840
produção, mas você precisa de ferramentas de terceiros para isso, por exemplo Webpack, e eu lhe mostrarei como isso

03:30.840 --> 03:39.500
funciona também, mas em uma seção separada onde daremos uma olhada no Webpack e no TypeScript e por que o usamos e como o usamos.

03:39.500 --> 03:41.100
Por enquanto, vamos usar estas

03:41.100 --> 03:43.900
duas abordagens em sua forma básica e vamos ver

03:43.900 --> 03:45.870
como podemos melhorar nosso código

03:45.870 --> 03:48.853
dividindo-o em vários arquivos.
