WEBVTT

00:02.320 --> 00:04.290
Enseignant : C'est donc tout pour ce module.

00:04.290 --> 00:05.660
Vous avez appris comment utiliser

00:05.660 --> 00:08.480
le langage de programmation dans l'application node express, que

00:08.480 --> 00:11.940
vous pouvez installer des types supplémentaires pour express et pour node par exemple,

00:11.940 --> 00:13.230
afin d'obtenir un excellent support

00:13.230 --> 00:16.320
du langage de programmation dans vos fichiers.

00:16.320 --> 00:18.570
Que vous rédigiez la demande comme vous l'auriez

00:18.570 --> 00:19.990
toujours fait.

00:19.990 --> 00:21.790
Mais que, par exemple, votre syntaxe d'importation

00:21.790 --> 00:23.720
et d'exportation diffère et que vous pouvez

00:23.720 --> 00:26.120
bien sûr utiliser les types, ainsi que toute autre fonctionnalité

00:26.120 --> 00:29.300
de typecript que vous apprendrez.

00:29.300 --> 00:31.080
On peut utiliser des interfaces,

00:31.080 --> 00:33.080
des décorateurs, des eNoms,

00:33.080 --> 00:35.480
des QPUlls et tout ce qui est exclusif

00:35.480 --> 00:37.840
aux scripts.

00:37.840 --> 00:39.310
Tout cela fonctionne ici,

00:39.310 --> 00:42.650
car nous écrivons une application typescript normale et

00:42.650 --> 00:46.070
elle est compilée avec le compilateur typescript normal

00:46.070 --> 00:48.050
en code Javascript normal.

00:48.050 --> 00:52.750
Code Javascript qui est ensuite exécuté avec le node JS.

00:52.750 --> 00:54.450
Maintenant, si vous voulez avoir plus

00:54.450 --> 00:57.720
d'exemples sur la façon de travailler avec typescript et node express,

00:57.720 --> 00:58.910
vous pouvez bien sûr, pour

00:58.910 --> 01:01.210
un, simplement googler pour node express typescript

01:01.210 --> 01:02.840
pour trouver plus d'exemples.

01:02.840 --> 01:04.600
Mais je peux aussi fortement

01:04.600 --> 01:06.980
vous recommander de vérifier NestJS.

01:06.980 --> 01:10.390
C'est un nœud. Alors que vous pouvez faire fonctionner

01:10.390 --> 01:13.270
node express avec typescript, comme vous l'avez vu

01:13.270 --> 01:15.310
tout au long de ce module, il s'agit d'un

01:15.310 --> 01:18.010
cadre qui vous donne des projets, des projets node,

01:18.010 --> 01:21.740
avec le support de typescript dès le départ.

01:21.740 --> 01:24.490
Et il adopte toutes ces caractéristiques typographiques

01:24.490 --> 01:26.960
comme les décorateurs et ainsi de suite.

01:26.960 --> 01:30.910
Avec NestJS, vous pouvez construire des applications web de type

01:30.910 --> 01:34.390
node, des API de repos mais aussi des applications où vous rendez

01:34.390 --> 01:36.440
des vues ou des API graphQL.

01:36.440 --> 01:38.930
Vous pouvez construire tout cela avec node. js mais aussi avec

01:38.930 --> 01:41.110
typescript et ce projet utilise

01:41.110 --> 01:43.380
fortement des fonctionnalités

01:43.380 --> 01:46.950
comme les décorateurs, les interfaces, etc.

01:46.950 --> 01:50.200
Il faut donc absolument jeter un coup d'oeil à NestJS si vous voulez construire

01:50.200 --> 01:53.580
une application web côté service avec node et typescript.

01:53.580 --> 01:56.660
Il s'agit d'un excellent framework, très agréable à utiliser

01:56.660 --> 02:00.350
et qui utilise toutes les fonctionnalités intéressantes de Typescript.

02:00.350 --> 02:03.630
Il n'est donc pas nécessaire d'installer un type personnalisé, de contourner

02:03.630 --> 02:05.310
le problème ou quoi que ce soit d'autre.

02:05.310 --> 02:08.913
Ici, vous bénéficiez d'un excellent support typographique dès le départ.
