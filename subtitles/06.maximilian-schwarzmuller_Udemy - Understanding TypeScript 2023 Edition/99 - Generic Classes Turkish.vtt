WEBVTT

00:02.270 --> 00:04.390
Eğitmen: Tamam, genel fonksiyonlar hakkında bu kadar yeter.

00:04.390 --> 00:06.490
Bu kurs boyunca, tüm kurs projesi boyunca

00:06.490 --> 00:08.150
bunları hep kullanacağız.

00:08.150 --> 00:10.390
Bu yüzden üzerinde çalıştıkça daha

00:10.390 --> 00:11.890
da netleşecektir.

00:11.890 --> 00:14.823
Genel fikir umarım şimdiye kadar anlaşılmıştır.

00:15.660 --> 00:18.490
Jenerik fonksiyonlar kullanabileceğimiz her şey değildir,

00:18.490 --> 00:20.550
jenerik sınıflarımız da vardır ve bu nedenle,

00:20.550 --> 00:21.560
böyle bir jenerik sınıfı

00:21.560 --> 00:23.740
nasıl oluşturacağımızı ve bunu neden yapabileceğimizi,

00:23.740 --> 00:25.170
bunun bizim için neden yararlı

00:25.170 --> 00:27.760
olabileceğini görelim.

00:27.760 --> 00:31.950
Burada bir depolama sınıfı oluşturuyor olabiliriz.

00:31.950 --> 00:36.060
Diyelim ki özel bir veri özelliğine sahip bir sınıf.

00:36.060 --> 00:38.850
Sonunda bir veri dizisi tutacaktır.

00:38.850 --> 00:40.940
Ardından, öğemizi alan ve diyelim

00:40.940 --> 00:44.200
ki push ile verilere eklenmesi gereken bir addItem

00:44.200 --> 00:45.763
yöntemi vardır.

00:48.570 --> 00:50.830
Ve bunu söyleyebileceğimiz öğemizi

00:50.830 --> 00:52.173
alan bir removeItem

00:53.010 --> 00:57.740
yöntemimiz var. veri. splice ve sonra burada

00:57.740 --> 01:01.730
sadece indexOff(item) almamız ve bir öğeyi eklememiz

01:01.730 --> 01:02.910
gerekiyor.

01:02.910 --> 01:06.030
Bir diziden bir elemanı bu şekilde kaldırabiliriz.

01:06.030 --> 01:07.873
Ve tabii ki getItems, burada diyelim

01:09.750 --> 01:13.120
ki bunun bir kopyasını döndürür. veri, öğrendiğiniz yayma

01:13.120 --> 01:15.770
operatöründe olduğu gibi.

01:16.610 --> 01:17.443
Şimdi bunu yapabiliyoruz

01:17.443 --> 01:19.450
ve burada bir sürü hata alıyoruz.

01:19.450 --> 01:20.500
Bir sürü hata alıyoruz,

01:20.500 --> 01:23.900
şimdi Storage adı ayrılmış bir ad olduğu için Datastorage

01:23.900 --> 01:25.230
adını verelim.

01:25.230 --> 01:26.620
Ondan kurtulmak kolay.

01:26.620 --> 01:27.920
Şimdi burada da bir hata alıyoruz

01:27.920 --> 01:29.400
çünkü depoladığımız veri türü ve

01:29.400 --> 01:30.880
öğenin burada hangi türe sahip olduğu

01:30.880 --> 01:32.960
hakkında hiçbir şey söylemiyoruz.

01:32.960 --> 01:35.870
İşte tam da bu noktada bunu genel bir sınıfa dönüştürebiliriz

01:35.870 --> 01:38.860
çünkü veri türünü önemsemeyebilirsiniz.

01:38.860 --> 01:40.880
Tek tip veri olduğundan emin olmak istiyoruz,

01:40.880 --> 01:42.410
yani ya sadece dizeler, ya sadece

01:42.410 --> 01:44.830
sayılar ya da sadece nesneler.

01:44.830 --> 01:47.550
Ama bunun dışında umurumda değil.

01:47.550 --> 01:50.820
Yani burada, sınıf adından sonra köşeli parantezler ekleyerek

01:50.820 --> 01:53.300
bunu genel sınıfa dönüştürebiliriz ve sonra

01:53.300 --> 01:56.330
tekrar T, U, tanımlayıcı olarak ne kullanmak isterseniz,

01:56.330 --> 02:00.110
ve bunu buraya genel bir tür olarak ekleyebiliriz.

02:00.110 --> 02:01.083
Şimdi burada şunu

02:01.083 --> 02:04.490
söyleyebiliriz, buradaki T tipinde bir dizidir, bu yüzden

02:04.490 --> 02:07.413
içinde bu genel tipteki verileri depolar.

02:07.413 --> 02:09.670
Dolayısıyla burada bu tür verileri ekliyoruz

02:09.670 --> 02:12.400
ve burada bu tür verileri kaldırmaya çalışıyoruz.

02:12.400 --> 02:15.140
Ve bu nedenle, burada öğelerin doğru bir şekilde genel

02:15.140 --> 02:18.490
türlerden oluşan bir dizi döndürdüğü sonucuna varırız.

02:18.490 --> 02:20.860
Ve şimdi farklı depolama alanları oluşturabiliriz,

02:20.860 --> 02:24.690
new DataStorage'ı çağırarak ve bu genel türü burada string

02:24.690 --> 02:31.250
türüne ayarlayarak sting'imizi veya textStorage'ımızı burada tutabiliriz.

02:31.250 --> 02:33.070
Ve sonra burada textStorage'da addItem'ı

02:33.070 --> 02:34.340
çağırabilirim ve bir sayı

02:34.340 --> 02:36.410
eklemeye çalışırsam bir hata alırım çünkü

02:36.410 --> 02:37.513
bunun yalnızca karakterleri

02:37.513 --> 02:40.800
depolayan bir DataStorage olacağını söylüyorum.

02:40.800 --> 02:45.800
Yani, Max'i gerçekten burada saklayabilirim ve belki Manu'yu da saklayabilirim ve

02:46.830 --> 02:51.450
sonra textStorage'ı çağırabilirim. removeItem('Max') ve ardından

02:51.450 --> 02:55.073
console. Log. textStorage. getItems.

02:56.520 --> 02:58.870
Ve bunu kaydedersek hepsi çalışacaktır

02:58.870 --> 03:00.300
çünkü bu genel bir türdür

03:00.300 --> 03:03.103
ve gerçekten de sonunda sadece Manu var.

03:04.400 --> 03:08.240
Dolayısıyla bu, oluşturabileceğimiz basit bir genel sınıf olacaktır.

03:08.240 --> 03:10.500
Şimdi, neden böyle genel bir sınıf oluşturalım ki?

03:10.500 --> 03:11.770
Dediğim gibi, belki sadece

03:11.770 --> 03:14.220
metinleri saklamak istemiyoruzdur, bazı

03:14.220 --> 03:17.110
sayıları da farklı bir veri depolama alanında saklamak

03:17.110 --> 03:18.950
isteyebilirim.

03:18.950 --> 03:21.510
Böylece böyle bir DataStorage oluşturabilirim ve bunu

03:21.510 --> 03:23.810
sayı olarak ayarlamak, artık bu depolama alanına

03:23.810 --> 03:26.250
yalnızca sayı ekleyebilmemizi sağlar.

03:26.250 --> 03:28.330
Elbette, bir union tipi kullanarak her ikisine de izin

03:28.330 --> 03:30.520
verdiğimiz bir depolama alanı da oluşturabiliriz.

03:30.520 --> 03:32.550
Dolayısıyla, burada tam esnekliğe

03:32.550 --> 03:36.470
sahibiz, ancak tipe bazı ekstra bilgiler veriyoruz, bu da

03:36.470 --> 03:38.490
bunu hem esnek hem de hala güçlü

03:38.490 --> 03:41.450
tipli bir sınıf haline getiriyor.

03:41.450 --> 03:43.470
Tıpkı fonksiyonlarda olduğu gibi.

03:43.470 --> 03:46.910
Gerçekten esnek ve hala mükemmel tip desteği.

03:46.910 --> 03:49.900
Genel tiplerin arkasındaki tüm fikir budur.

03:49.900 --> 03:52.680
İşte DataStorage sınıfı ile bunu stringleri saklayarak,

03:52.680 --> 03:53.750
sayıları saklayarak

03:53.750 --> 03:56.513
ya da ne istersek onu yapabiliriz.

03:57.790 --> 04:01.300
Yine de dataStorage sınıfımızla ilgili bir sorunumuz olacak.

04:01.300 --> 04:04.880
Diyelim ki burada nesne depolama alanım var, şimdi yeni

04:04.880 --> 04:07.090
DataStorage oluşturabilir ve orada

04:07.090 --> 04:10.490
nesneleri depolamak istediğimi söyleyebilirim, doğru,

04:10.490 --> 04:12.270
nesneleri depolamak istiyorum

04:12.270 --> 04:17.270
ve tabii ki nesne depolama alanına gidip bir öğe ekleyebiliriz.

04:17.300 --> 04:20.460
Diyelim ki orada Max adında bir nesne var.

04:20.460 --> 04:22.920
Manu'yu sakladığım başka bir nesneyi

04:22.920 --> 04:24.760
de saklayalım.

04:24.760 --> 04:26.770
Diyelim ki kodumuzda bazı şeyler

04:26.770 --> 04:28.310
yapıyoruz ve daha sonra burada

04:28.310 --> 04:29.740
bir öğeyi kaldırmak isteyeceğim,

04:29.740 --> 04:34.100
burada 'Manu' adlı öğeyi kaldırmak istiyorum.

04:34.100 --> 04:37.863
Ve sonra, teselli etmek istiyorum. Log. objStorage. getItems.

04:39.450 --> 04:40.550
İşte böyle.

04:40.550 --> 04:41.883
Bunu kaydedersek, orada

04:42.920 --> 04:45.840
Max adında bir nesnemiz olduğunu görürüz.

04:45.840 --> 04:47.470
Bu iyi görünüyor, değil mi?

04:47.470 --> 04:49.140
Şimdi, bu gerçekten iyi değil.

04:49.140 --> 04:52.490
Diyelim ki burada, Max'i şimdi kaldırmak istiyorum,

04:52.490 --> 04:55.740
bu yüzden şimdi veri deposunda Manu kalmalı.

04:55.740 --> 04:59.653
Bu nedenle, eğer yeniden doldurursam, hala Max.

05:00.550 --> 05:03.660
Şimdi sorun şu ki, burada nesnelerle çalışıyoruz, bildiğiniz

05:03.660 --> 05:07.350
gibi JavaScript'teki nesneler referans türleridir.

05:07.350 --> 05:09.440
Şimdi, referansa dalmanızı sağlayan

05:09.440 --> 05:11.460
ek bir kaynak bulmak için ekleyin.

05:11.460 --> 05:12.730
İlkel değerler ise, burada

05:12.730 --> 05:14.650
farkı bildiğinizi varsayıyorum çünkü

05:14.650 --> 05:16.970
bu JavaScript'in temel bir özelliğidir ve typescript

05:16.970 --> 05:19.060
ile tamamen alakasızdır.

05:19.060 --> 05:20.600
Burada sorun, sınıfımızın

05:20.600 --> 05:22.300
verilerin nasıl kaldırılacağı

05:22.300 --> 05:26.243
ve tanımlanacağına ilişkin bu mantıkla oluşturulma şekli, ilkel

05:27.080 --> 05:29.580
olmayan değerlerle çalıştığımızda gerçekten

05:29.580 --> 05:32.200
iyi bir iş çıkarmamamızdır.

05:32.200 --> 05:35.130
Dolayısıyla, nesneler veya dizilerle çalıştığımızda,

05:35.130 --> 05:37.840
indexOf nedeniyle, buraya bir nesne geçirirsek, teknik

05:37.840 --> 05:40.910
olarak bu yeni bir nesne olduğu için çalışmayacaktır.

05:40.910 --> 05:43.800
Buna benzeyebilir ama çalışmaz çünkü bu teknik

05:43.800 --> 05:46.520
olarak bellekte yepyeni bir nesnedir ve farklı

05:46.520 --> 05:48.290
bir adrese sahiptir.

05:48.290 --> 05:52.110
Ve aslında burada, JavaScript adresi arayacak ve temelde

05:52.110 --> 05:54.930
bulamayacaktır, bu yüzden daha sonra yaptığı

05:54.930 --> 05:58.453
şey, buradaki dizideki son öğeyi kaldırmaktır, çünkü

05:59.510 --> 06:01.473
bu sonuçta -1 döndürür.

06:02.419 --> 06:06.070
IndexOf hiçbir şey bulamasa bile -1 döndürür.

06:06.070 --> 06:07.990
Yani dizinin sonundan başlar, bu normal

06:07.990 --> 06:09.770
Javascript davranışıdır ve dizinin

06:09.770 --> 06:11.921
son elemanını kaldırır.

06:11.921 --> 06:14.190
Bu yüzden Manu için çalıştı, gerçekten

06:14.190 --> 06:16.810
çalışmadı, yanlışlıkla çalıştı, ama Max için

06:16.810 --> 06:19.020
neden çalışmıyor, şimdilik dizinin

06:19.020 --> 06:19.880
son elemanını

06:19.880 --> 06:21.760
her zaman kaldırıyoruz, çünkü

06:21.760 --> 06:23.670
onu tanımlayamıyoruz.

06:23.670 --> 06:25.890
Şimdi, en azından bunu düzeltmek için

06:25.890 --> 06:29.140
bir çözüm, öğemizi bulup bulmadığımızı kontrol etmektir,

06:29.140 --> 06:32.260
bu nedenle buradaki kodun -1'e eşit olup olmadığını kontrol

06:32.260 --> 06:36.260
edebiliriz, bu da onu bulamadığımız anlamına gelir.

06:36.260 --> 06:37.360
Sonra geri dönüp yanlışlıkla

06:37.360 --> 06:40.780
yanlış ürünü çıkarmadığımızdan emin olabiliriz.

06:40.780 --> 06:42.900
Ancak elbette şimdi bu çubuğu düzelttik,

06:42.900 --> 06:44.850
ancak hala nesnelerle çalışacağı bu

06:44.850 --> 06:46.580
iç duruma sahip değiliz.

06:46.580 --> 06:48.890
Nesnelerle çalışabilmesinin tek

06:48.890 --> 06:51.740
yolu, aynı nesneyi tekrar iletmektir.

06:51.740 --> 06:55.700
Yani burada max nesnemi bunun gibi bir sabitte depolamış

06:55.700 --> 06:58.840
olsaydım ve burada max nesnesini geçseydim.

06:58.840 --> 07:02.050
Burada da aynısını yaparsam, gerçekten aynı nesneyi, bellekteki

07:02.050 --> 07:06.540
nesnenin aynısını kullanmış olurum ve bu nedenle şimdi çalışır.

07:06.540 --> 07:08.930
Bu işi yapmanın tek yolu bu olabilir.

07:08.930 --> 07:12.340
Bu nedenle, burada, bunun gerçekten sadece ilkel değerlerle

07:12.340 --> 07:16.150
çalıştığından emin olmak daha iyi bir fikir olabilir.

07:16.150 --> 07:20.100
Dolayısıyla, T'nin string, number ve belki de tüm

07:20.100 --> 07:24.010
boolean'ları eklediğini söyleyebiliriz.

07:24.010 --> 07:25.990
Yani şimdi temel olarak DataStorage'ın yalnızca bu

07:25.990 --> 07:27.920
türlerle çalışması gerektiğini söylüyoruz.

07:27.920 --> 07:30.470
Bu nedenle artık nesnelere izin verilmemektedir.

07:30.470 --> 07:32.500
Burada bu daha iyi olabilir çünkü daha

07:32.500 --> 07:35.220
özel bir DataStorage'a ihtiyacımız olacak ve

07:35.220 --> 07:38.290
bu da muhtemelen ilkel değerlerle değil sadece nesnelerle

07:38.290 --> 07:40.080
çalışacaktır.

07:40.080 --> 07:42.430
Burada geri alma mantığımıza ince ayar yapmak, belki

07:42.430 --> 07:44.800
de öğede kaldırılması gereken bazı iD'leri kontrol

07:44.800 --> 07:45.880
etmek için.

07:45.880 --> 07:46.970
Burada çalışma şekli, gerçekten

07:46.970 --> 07:48.910
sadece ilkel tipler için çalışır, bu nedenle

07:48.910 --> 07:52.320
böyle bir kısıtlama koymak kesinlikle iyi bir fikirdir.

07:52.320 --> 07:55.610
Ve bununla birlikte, bunu yorumladıktan sonra kaydettiysek,

07:55.610 --> 07:57.253
elbette yine çalışır.

07:58.810 --> 08:00.540
Şimdi söylemeye gerek yok, umarım,

08:00.540 --> 08:02.620
elbette burada da birden fazla jenerik

08:02.620 --> 08:04.310
tipiniz olabilir.

08:04.310 --> 08:05.910
Sınıflarla çalışırken tek bir

08:05.910 --> 08:07.600
türle sınırlı değilsiniz.

08:07.600 --> 08:09.610
Ayrıca, sınıflar yerine kendi genel

08:09.610 --> 08:13.080
türlerine sahip yöntemlere de sahip olabilirsiniz.

08:13.080 --> 08:16.630
Dolayısıyla, sınıfın tamamında değil de yalnızca belirli bir yöntemde

08:16.630 --> 08:18.010
ihtiyaç duyulan bir genel türünüz

08:18.010 --> 08:19.750
varsa, sınıf yöntemlerine yeni genel

08:19.750 --> 08:21.580
türler ekleyebilirsiniz.

08:21.580 --> 08:23.000
Yani orada gerçekten esneksiniz.

08:23.000 --> 08:25.570
Kısıtlamaları her yerde kullanabilirsiniz

08:25.570 --> 08:28.100
ve genel olarak jenerik tipler hayatınızı

08:28.100 --> 08:30.240
kolaylaştırmak ve size tam esnekliğin

08:30.240 --> 08:36.010
mükemmel kombinasyonunu sağlamak için vardır.

08:36.010 --> 08:39.310
Burada istediğiniz ilkel değeri ve tip güvenliğini

08:39.310 --> 08:40.900
kullanabiliriz, çünkü

08:40.900 --> 08:42.820
bu DataStorage'da neyin depolandığını

08:42.820 --> 08:44.710
ve neyin depolandığını çok iyi

08:44.710 --> 08:46.770
biliyoruz.

08:46.770 --> 08:50.660
İşte bu kombinasyon, jenerik tiplerin bize sağladığı

08:50.660 --> 08:52.283
harika bir şeydir.
