WEBVTT

00:02.200 --> 00:03.970
Kursleiter: Das war's für dieses Modul.

00:03.970 --> 00:06.080
Natürlich verfügt modernes JavaScript auch über

00:06.080 --> 00:07.790
einige andere nette Funktionen.

00:07.790 --> 00:09.810
Ich werde zum Beispiel Klassen im Klassenmodul

00:09.810 --> 00:11.120
behandeln und im Allgemeinen

00:11.120 --> 00:13.470
ist dies kein JavaScript-Kurs.

00:13.470 --> 00:16.540
Ich möchte Sie nicht mit Tonnen von JavaScript-Wissen

00:16.540 --> 00:19.030
langweilen, das sich nicht wirklich auf TypeScript

00:19.030 --> 00:20.140
bezieht.

00:20.140 --> 00:22.700
Ich wollte diese spezifischen Funktionen erwähnen,

00:22.700 --> 00:24.650
weil es gut zu wissen ist, dass TypeScript

00:24.650 --> 00:28.210
uns hilft, diese Funktionen so zu nutzen, dass sie auch in älteren Browsern

00:28.210 --> 00:29.580
funktionieren.

00:29.580 --> 00:32.920
Denn das ist etwas, das man nie vergessen darf.

00:32.920 --> 00:35.600
Ihr Code wird kompiliert.

00:35.600 --> 00:38.690
Derzeit habe ich das Ziel auf ES6 gesetzt und daher,

00:38.690 --> 00:41.540
wenn wir die dist Ordner sehen wir Konstanten

00:41.540 --> 00:44.280
auf sind alle in der app JS-Datei als auch

00:44.280 --> 00:46.030
verfügbar.

00:46.030 --> 00:48.070
Object de structuring, gibt es eine Möglichkeit,

00:48.070 --> 00:50.600
wie dies dort, weil alle diese Funktionen in ES6

00:50.600 --> 00:52.480
unterstützt werden.

00:52.480 --> 00:55.230
Wenn ich das Ziel auf ES5 setze und die lib auskommentiere,

00:55.230 --> 00:56.590
damit die richtigen libs

00:56.590 --> 00:58.680
für das ES5-Ziel importiert werden,

00:58.680 --> 01:00.930
was standardmäßig geschieht, werden Sie

01:00.930 --> 01:03.680
sehen, dass der generierte Code jetzt ganz anders

01:03.680 --> 01:05.290
aussieht.

01:05.290 --> 01:08.140
Es ist viel länger, weil wir jetzt var verwenden und

01:08.140 --> 01:09.810
TypeScript musste Workarounds

01:09.810 --> 01:12.960
für bestimmte Syntaxen finden, die in ES5 JavaScript nicht

01:12.960 --> 01:14.730
unterstützt werden.

01:14.730 --> 01:18.240
So wurde zum Beispiel die Syntax zur Strukturierung entfernt.

01:18.240 --> 01:21.140
Das ist also ein wichtiger Punkt, den man immer im Hinterkopf behalten sollte.

01:21.140 --> 01:23.490
TypeScript kompiliert Ihren Code

01:23.490 --> 01:26.440
nicht nur von reinen TypeScript-Funktionen

01:26.440 --> 01:29.210
zu normalem JavaScript, sondern auch von

01:29.210 --> 01:33.000
modernem JavaScript zu altem JavaScript, wenn Sie TypeScript

01:33.000 --> 01:35.433
dazu auffordern.
