WEBVTT

00:02.240 --> 00:04.870
Prezenter: A więc mamy dodany pierwszy komponent.

00:04.870 --> 00:06.090
Dodajmy jeszcze drugie.

00:06.090 --> 00:09.970
NewTodo. tsx to nazwa pliku.

00:09.970 --> 00:13.060
Tam oczywiście importujemy react z react.

00:13.060 --> 00:16.170
I oczywiście można też budować komponenty oparte na klasach.

00:16.170 --> 00:18.270
Jest to również w pełni obsługiwane,

00:18.270 --> 00:22.410
ale użyję tego nowoczesnego stylu tylko funkcjonalnych komponentów.

00:22.410 --> 00:24.070
Więc tutaj znowu mamy funkcję, która

00:24.070 --> 00:26.180
później będzie tworzyła nasz komponent.

00:26.180 --> 00:29.258
I eksportuję NewTodo jako mój domyślny i dodajmy

00:29.258 --> 00:31.260
przypisanie typu i wyjaśnijmy,

00:31.260 --> 00:33.021
że będzie to komponent funkcji

00:33.021 --> 00:34.410
typu.

00:34.410 --> 00:35.800
I dlatego oczywiście tutaj

00:35.800 --> 00:38.220
brakuje nam jakiegoś zwróconego kodu jsx.

00:38.220 --> 00:39.730
Więc tutaj zwrócę formularz, w którym chcę

00:39.730 --> 00:42.030
dodać wszystkie kontrole, których potrzebuję, aby umożliwić

00:42.030 --> 00:43.780
użytkownikowi dodanie nowych todos.

00:45.060 --> 00:48.650
Teraz dodajmy ten nowy komponent todo w komponencie aplikacji.

00:48.650 --> 00:53.650
Tak więc w tym miejscu możemy zaimportować NewTodo z . /components/NewTodo i po prostu

00:55.130 --> 00:58.095
dodaj go tutaj zamiast komentarza.

00:58.095 --> 01:00.520
NewTodo jako komponent samozamykający, ponieważ

01:00.520 --> 01:02.790
w tej chwili nie przekazujemy nic pomiędzy

01:02.790 --> 01:04.750
znacznikami otwierającymi i zamykającymi,

01:04.750 --> 01:07.784
a także nie mamy tutaj żadnych rekwizytów, przynajmniej

01:07.784 --> 01:09.263
w tej chwili.

01:10.140 --> 01:11.540
Więc zamiast tego komponentu,

01:11.540 --> 01:13.330
możemy teraz dodać wejście,

01:13.330 --> 01:16.190
a także po przycisku.

01:16.190 --> 01:18.117
Dodaj więc tutaj div właściwie,

01:18.117 --> 01:20.020
w którym chcę mieć etykietę

01:20.020 --> 01:24.880
z atrybutami htmlFor, aby wskazać na powiedzmy "todo-tekst".

01:24.880 --> 01:26.560
To wszystko jest tylko

01:26.560 --> 01:31.250
znacznikiem tutaj, gdzie mówię "Todo Text", a następnie element

01:31.250 --> 01:35.170
wejściowy typu text z id "Todo text", aby etykieta i

01:35.170 --> 01:36.900
wejście były połączone

01:36.900 --> 01:39.640
poprawnie semantycznie.

01:39.640 --> 01:41.440
A poniżej tego diva, zamiast formularza

01:41.440 --> 01:43.120
dodam przycisk, gdzie powiem

01:43.120 --> 01:44.437
"DODAJ TODO", I ten przycisk

01:45.297 --> 01:49.670
powinien być typu submit, żeby, no, przesłał formularz.

01:49.670 --> 01:51.900
Jest to teraz bardzo podstawowy formularz, który możemy wykorzystać

01:51.900 --> 01:53.143
do dodania nowego Todo.

01:54.580 --> 01:57.060
Teraz upewnijmy się, że to działa i w tym

01:57.060 --> 01:59.660
celu faktycznie mamy kilka różnych kroków,

01:59.660 --> 02:01.820
które musimy zastosować.

02:01.820 --> 02:05.020
Musimy pobrać to, co użytkownik wprowadził tutaj, a następnie

02:05.020 --> 02:08.550
musimy przekazać to, co użytkownik wprowadzi tutaj do komponentu

02:08.550 --> 02:09.810
aplikacji, ponieważ to

02:09.810 --> 02:13.330
właśnie tam będziemy później zarządzać naszymi todosami.

02:13.330 --> 02:16.150
Więc najpierw zareagujmy na składanie formularzy może.

02:16.150 --> 02:18.050
Możemy dodać nową funkcję, a więc

02:18.050 --> 02:20.300
funkcję w komponencie funkcjonalnym,

02:20.300 --> 02:22.720
ale to będzie teraz zwykła funkcja, którą

02:22.720 --> 02:27.720
nazwiemy, "todoSubmitsHandler", dowolna nazwa, którą chcesz.

02:28.210 --> 02:29.990
Jest to funkcja, która powinna się odpalić za każdym

02:29.990 --> 02:31.860
razem, gdy ten formularz zostanie przesłany.

02:31.860 --> 02:35.571
Więc możemy powiązać go z rekwizytem onSubmit tutaj na końcu, todoSubmitsHandler,

02:35.571 --> 02:38.770
nie wykonuj go, po prostu wskaż na niego, aby był wykonywany

02:38.770 --> 02:40.900
dla nas za każdym razem, gdy ten formularz

02:40.900 --> 02:43.810
zostanie przesłany.

02:43.810 --> 02:46.270
Teraz w tym miejscu otrzymujemy obiekt zdarzenia i obiekt

02:46.270 --> 02:49.507
zdarzenia jest typu react. FormEvent.

02:51.290 --> 02:54.010
Teraz tam chcę wywołać event prevent default, aby zapobiec

02:54.010 --> 02:55.780
temu domyślnemu, czyli wysłać prawdziwe

02:55.780 --> 02:59.280
żądanie do serwera obsługującego tę aplikację.

02:59.280 --> 03:01.520
To oczywiście nie jest moment, w którym chciałbym, żeby się wydarzyło.

03:01.520 --> 03:04.680
Chcę obsłużyć to żądanie tylko tutaj w JavaScript

03:04.680 --> 03:08.350
i dlatego należy zapobiec tej domyślnej przeglądarce.

03:08.350 --> 03:09.770
Teraz z tym zapobieganiem,

03:09.770 --> 03:12.610
możemy uzyskać cokolwiek użytkownik wprowadził

03:12.610 --> 03:15.250
do wejścia i dla tego mamy dwa różne sposoby.

03:15.250 --> 03:18.310
Możemy albo zarządzać stanem danych wejściowych tutaj,

03:18.310 --> 03:20.970
w rodzaju wiązania dwukierunkowego, albo użyć ref,

03:20.970 --> 03:23.170
referencji, aby wyodrębnić to, co użytkownik

03:23.170 --> 03:25.010
wprowadził tutaj, gdy formularz został

03:25.010 --> 03:26.520
przesłany.

03:26.520 --> 03:28.410
Pójdę za tym drugim podejściem, ponieważ

03:28.410 --> 03:30.420
i tak za chwilę zobaczymy zarządzanie

03:30.420 --> 03:33.470
stanem w akcji w komponencie aplikacji.

03:33.470 --> 03:37.340
Aby skonfigurować taki ref, importujemy hak useRef z react,

03:37.340 --> 03:40.580
a haki to specjalne funkcje, które możesz wykonać

03:40.580 --> 03:45.290
i komponenty funkcyjne, aby dodać pewne funkcjonalności do komponentu

03:45.290 --> 03:48.101
i kiedy wykonamy tutaj useRef, to co dostaniemy

03:48.101 --> 03:53.730
z powrotem to obiekt Ref, który możemy przechowywać w stałej i nazwę go, "textInputRef"

03:53.730 --> 03:57.310
właściwie.

03:57.310 --> 04:00.176
Możemy, na przykład, użyć takiego odniesienia, aby

04:00.176 --> 04:04.980
przypisać je do elementu dom, a następnie wejść w interakcję z tym elementem dom z wnętrza

04:04.980 --> 04:06.500
naszego kodu tutaj.

04:06.500 --> 04:08.800
Więc na przykład, gdy ten formularz zostanie przesłany.

04:09.680 --> 04:11.510
Ustawiamy takie połączenie, dodając

04:11.510 --> 04:14.020
specjalny rekwizyt Ref do dowolnie wybranego

04:14.020 --> 04:16.580
elementu html i wskazując na ten obiekt, który

04:16.580 --> 04:19.150
stworzyliśmy tutaj na górze.

04:19.150 --> 04:21.530
Dodaj więc textInputRef.

04:21.530 --> 04:23.540
W ten sposób powstaje tu połączenie.

04:23.540 --> 04:27.380
Jednak już kolejny raz widać, że TypeScript tego nie lubi.

04:27.380 --> 04:30.110
Ponieważ useRef okazuje się być

04:30.110 --> 04:33.250
również funkcją generyczną.

04:33.250 --> 04:35.270
Teraz jaki typ moglibyśmy do niego przekazać.

04:35.270 --> 04:37.340
Co by tu ciekawego wiedzieć?

04:37.340 --> 04:39.200
Cóż, byłoby interesujące, aby wiedzieć,

04:39.200 --> 04:42.030
jaki rodzaj danych będzie przechowywany wewnątrz wykresu,

04:42.030 --> 04:43.970
a ponieważ wskazujesz na element wejściowy,

04:43.970 --> 04:47.880
będziemy mieli element wejściowy html przechowywany tam.

04:47.880 --> 04:50.420
Teraz wszyscy musielibyśmy dostarczyć domyślną wartość

04:50.420 --> 04:51.840
do Ref, kiedy jest on ustawiany

04:51.840 --> 04:53.190
i tam dostarczymy null, ponieważ

04:53.190 --> 04:54.710
kiedy komponent jest renderowany

04:54.710 --> 04:56.360
po raz pierwszy, kiedy ten kod się wykonuje,

04:56.360 --> 04:57.380
oczywiście to nie zostało

04:57.380 --> 04:59.460
wyrenderowane tam na dole, więc wtedy to nie będzie

04:59.460 --> 05:01.590
wskazywać na nic.

05:01.590 --> 05:03.350
Gdy to jednak zostanie oddane,

05:03.350 --> 05:04.950
połączenie zostanie nawiązane

05:04.950 --> 05:07.040
i wtedy ten Ref będzie działał.

05:07.040 --> 05:09.453
I teraz tutaj w todoSubmitHandler, możemy uzyskać

05:10.342 --> 05:15.342
wprowadzony tekst za pomocą textInputRef. prąd, to zawsze coś, co trzeba

05:15.500 --> 05:17.973
wprowadzić, gdy pracuje

05:17.973 --> 05:21.440
się z Ref, . wartość oczywiście tutaj, ponieważ

05:21.440 --> 05:24.530
pracujemy z elementem wejściowym html.

05:24.530 --> 05:27.940
Jednak tutaj problem polega na tym, że może to być null.

05:27.940 --> 05:29.630
Jest to problem, który już znamy, mieliśmy

05:29.630 --> 05:31.790
go również na początku kursu, gdy wybieraliśmy

05:31.790 --> 05:33.370
coś w Dom i mamy go również tutaj,

05:33.370 --> 05:34.630
ponieważ TypeScript nie

05:34.630 --> 05:37.020
może wiedzieć z całą pewnością, że to połączenie

05:37.020 --> 05:38.800
jest ustanowione.

05:38.800 --> 05:40.580
My to wiemy, napisaliśmy kod, ale

05:40.580 --> 05:43.050
TypeScript niestety nie rozumie, że rzeczywiście

05:43.050 --> 05:45.300
nawiązujemy połączenie na dole.

05:46.310 --> 05:48.920
Więc, aby to naprawić możemy dodać wykrzyknik tutaj,

05:48.920 --> 05:51.350
aby ponownie powiedzieć TypeScriptowi, że to będzie

05:51.350 --> 05:54.350
w porządku, że to będzie ustawione i jesteśmy dobrzy.

05:54.350 --> 05:56.130
Przy okazji TypeScript jest poprawny,

05:56.130 --> 05:58.920
gdybyśmy wywołali tutaj todoSubmitHandler, to zostałoby to

05:58.920 --> 06:00.590
wywołane the forward, to zostało wyrenderowane

06:00.590 --> 06:02.410
po raz pierwszy i wtedy rzeczywiście to

06:02.410 --> 06:05.000
nie byłoby jeszcze zainicjalizowane.

06:05.000 --> 06:07.910
Wiemy tylko, że zostanie zainicjalizowany z pewnością, ponieważ

06:07.910 --> 06:09.730
wiemy, że zostanie to wywołane tylko wtedy,

06:09.730 --> 06:10.830
gdy formularz zostanie złożony,

06:10.830 --> 06:13.830
a to może się zdarzyć tylko po wyrenderowaniu tego.

06:13.830 --> 06:16.120
Znamy więc sposób działania naszego kodu.

06:16.120 --> 06:18.360
To nigdy nie będzie zerowe.

06:18.360 --> 06:20.810
Jeśli byłaby jakaś inna możliwość, musiałbyś

06:20.810 --> 06:22.780
użyć if-check tutaj, aby sprawdzić,

06:22.780 --> 06:26.030
czy textInputRef. current jest null, a jeśli

06:26.030 --> 06:27.620
jest, to zrób coś innego.

06:27.620 --> 06:29.550
Ale tutaj to nie może mieć miejsca.

06:29.550 --> 06:31.230
Więc z tym wyodrębniamy wartość

06:31.230 --> 06:34.640
i możemy konsolować. zaloguj to tutaj, aby zobaczyć, czy to działa.

06:34.640 --> 06:37.040
Ale oczywiście nie jest to wtedy ostateczne ustawienie.

06:37.040 --> 06:40.900
Więc zapiszmy to, wejdźmy tutaj, zakończmy

06:40.900 --> 06:44.590
to za miesiąc i dodajmy todo, i widzimy

06:44.590 --> 06:47.970
to tutaj w logach konsoli.

06:47.970 --> 06:50.310
To działa tak, jak powinno.

06:50.310 --> 06:51.910
I z tym, że działa to tak jak powinno,

06:51.910 --> 06:55.460
upewnijmy się teraz, że dostaniemy tę wartość do komponentu aplikacji.

06:55.460 --> 06:58.820
Jeśli znasz jakąś reakcję zdecydowanie spróbuj najpierw na własnej skórze.

06:58.820 --> 07:00.963
Zrobimy to wspólnie w kolejnym wykładzie.
