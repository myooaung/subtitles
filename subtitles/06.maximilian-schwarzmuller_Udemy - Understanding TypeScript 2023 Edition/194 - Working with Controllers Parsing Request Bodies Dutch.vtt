WEBVTT

00:02.170 --> 00:03.860
Instructeur: Dus nu we enkele routes hebben geregistreerd,

00:03.860 --> 00:05.630
laten we wat logica toevoegen voor deze routes.

00:05.630 --> 00:07.730
Daarvoor voeg ik een controllers map toe.

00:07.730 --> 00:08.750
Dat is geen must, maar

00:08.750 --> 00:11.550
ik wil mijn logica hier opsplitsen in de controllers

00:11.550 --> 00:13.650
en de routes in de routes map.

00:13.650 --> 00:16.740
En in controllers, zal ik ook een todos toevoegen. ts bestand, en dat bevat

00:16.740 --> 00:19.230
nu de controllerfuncties waarnaar we

00:19.230 --> 00:21.990
willen verwijzen vanuit onze routes.

00:21.990 --> 00:25.120
Dus hier heb ik een functie nodig die ik zal exporteren, en

00:25.120 --> 00:27.220
ik zal hem maken als een pijlfunctie, wat

00:27.220 --> 00:29.170
echter geen must is, en ik zal deze createTodo

00:29.170 --> 00:31.290
noemen, en het is een functie die deze typische

00:32.420 --> 00:34.510
parameters zal ontvangen die je krijgt

00:34.510 --> 00:36.720
in elke middleware-functie in express,

00:36.720 --> 00:38.830
een verzoek, een antwoord, en de volgende

00:38.830 --> 00:41.297
functie.

00:41.297 --> 00:44.550
En we hebben net gezien waar we de types vandaan kunnen halen.

00:44.550 --> 00:47.190
We kunnen request, response, en

00:47.190 --> 00:50.460
next functie importeren van express.

00:50.460 --> 00:52.800
Dit importeert ons die types.

00:52.800 --> 00:54.910
Dan kunnen we ze hier toevoegen.

00:54.910 --> 00:57.230
Nu kan het altijd toevoegen van al deze types hier,

00:57.230 --> 00:59.980
zoals we dat ook deden in de middleware voor foutafhandeling,

00:59.980 --> 01:01.300
echter omslachtig zijn.

01:01.300 --> 01:03.750
Het werkt, maar het kan vervelend zijn.

01:03.750 --> 01:05.190
Dus er is een kortere weg.

01:05.190 --> 01:08.220
In plaats van de types op al deze parameters in te stellen,

01:08.220 --> 01:11.160
kunnen we TypeScript ook gewoon vertellen welk

01:11.160 --> 01:14.610
soort functie we willen opslaan in deze createTodo constante,

01:14.610 --> 01:16.260
en dan kunnen we gewoon het type

01:16.260 --> 01:19.530
RequestHandler importeren van express, en dan stellen

01:19.530 --> 01:24.340
we dit hier, createTodo, in op type RequestHandler.

01:24.340 --> 01:28.780
En nu zie je dat TypeScript weet dat we hier een verzoek hebben, hier hebben

01:28.780 --> 01:30.560
we een antwoord, en hier hebben

01:30.560 --> 01:32.590
we deze volgende functie, omdat

01:32.590 --> 01:35.730
onze RequestHandler zo gedefinieerd is.

01:35.730 --> 01:38.080
Het is een functie met drie parameters waarbij

01:38.080 --> 01:40.160
de eerste parameter het verzoek is, de

01:40.160 --> 01:42.030
tweede parameter het antwoord, en

01:42.030 --> 01:44.810
de derde parameter de volgende functie.

01:44.810 --> 01:47.313
Dus dit kan de opstelling hier vereenvoudigen.

01:48.195 --> 01:49.380
RequestHandler is natuurlijk

01:49.380 --> 01:51.360
altijd beschikbaar omdat we de types voor express

01:51.360 --> 01:52.570
hebben geïnstalleerd en daarom

01:52.570 --> 01:55.270
kunnen we deze import hier toevoegen.

01:55.270 --> 01:57.940
Merk op dat deze import altijd weg zal zijn zodra

01:57.940 --> 01:59.960
dit compileert naar JavaScript, omdat

01:59.960 --> 02:02.300
we hier gewoon een type importeren.

02:02.300 --> 02:05.030
Dit importeert geen code die wordt uitgevoerd.

02:05.030 --> 02:06.930
Het is gewoon het importeren van een type.

02:06.930 --> 02:08.650
En daarom wordt het tijdens het

02:08.650 --> 02:11.290
compileren verwijderd, omdat het niets toevoegt

02:11.290 --> 02:15.860
dat nodig zou zijn wanneer dit in gewone JavaScript wordt uitgevoerd.

02:15.860 --> 02:16.693
Daarmee kreeg

02:16.693 --> 02:18.900
ik echter de functie createTodo, en

02:18.900 --> 02:22.240
waarom voegen we hier nu niet een TODOS-array toe om wat

02:22.240 --> 02:25.530
to dos in het geheugen te beheren, natuurlijk.

02:25.530 --> 02:28.310
Dit zal verdwijnen wanneer onze server opnieuw opstart,

02:28.310 --> 02:31.460
omdat het uiteindelijk gewoon een constante in JavaScript is.

02:31.460 --> 02:32.293
Je kunt je natuurlijk

02:32.293 --> 02:34.770
ook voorstellen dat je hier met een database praat,

02:34.770 --> 02:36.360
maar ik wil dit eenvoudig houden

02:36.360 --> 02:38.630
omdat het over JavaScript en TypeScript gaat

02:38.630 --> 02:41.323
en niet zozeer over databaseverbindingen.

02:42.390 --> 02:43.790
Dus hier heb ik to dos,

02:43.790 --> 02:47.600
en nu wil ik hier een nieuwe to do maken als we een inkomend

02:47.600 --> 02:49.320
verzoek krijgen, en dat moet

02:49.320 --> 02:51.020
een nieuw object zijn, en

02:51.020 --> 02:52.980
waarom maken we geen blauwdruk

02:52.980 --> 02:55.420
voor dit object, een model.

02:55.420 --> 02:57.640
Dus ik voeg een models map toe,

02:57.640 --> 02:59.030
en in die models map

02:59.030 --> 03:04.030
voeg ik een todo toe. ts bestand en exporteer hier een klasse, die ik

03:04.760 --> 03:06.250
Todo zal noemen, waarin ik definieer

03:06.250 --> 03:08.210
hoe Todo eruit moet zien.

03:08.210 --> 03:10.330
Daar kunnen we een constructor toevoegen

03:10.330 --> 03:13.129
en ook deze TypeScript shortcut gebruiken

03:13.129 --> 03:16.440
waarbij we een access modifier kunnen toevoegen zoals

03:16.440 --> 03:19.360
public en dan een property naam zoals ID, van het

03:19.360 --> 03:21.250
type string, laten we zeggen,

03:21.250 --> 03:24.050
en text, ook van het type string, en dan zal TypeScript

03:24.050 --> 03:27.470
automatisch velden toevoegen, properties met gelijke

03:27.470 --> 03:30.130
namen, en toegewezen waarden die we doorgeven

03:30.130 --> 03:32.750
aan de constructor aan die velden wanneer

03:32.750 --> 03:37.230
we die klasse instantiëren.

03:37.230 --> 03:38.670
Dus ik gebruik deze syntaxis

03:38.670 --> 03:40.060
hier, en die heb je al eerder

03:40.060 --> 03:41.810
in de cursus geleerd.

03:41.810 --> 03:44.660
En nu in todos. ts hier in de controller

03:44.660 --> 03:47.893
kunnen we natuurlijk Todo importeren van,

03:49.020 --> 03:53.403
een niveau hoger, models/todo, en dit type en deze klasse

03:54.530 --> 03:58.800
nu hier in ons bestand gebruiken.

03:58.800 --> 04:01.320
En het is zowel een type als een klasse, omdat het

04:01.320 --> 04:02.800
natuurlijk een klasse is, en

04:02.800 --> 04:05.750
elke klasse fungeert automatisch ook als een type.

04:05.750 --> 04:08.550
Dat is ook wat je in deze hele cursus hebt gezien.

04:08.550 --> 04:09.750
Dus nu kunnen we allereerst

04:09.750 --> 04:11.910
zeggen dat TODOS hier een reeks to

04:11.910 --> 04:13.550
do's zal zijn.

04:13.550 --> 04:15.480
Deze extra annotatie kan geen kwaad,

04:15.480 --> 04:18.590
zodat we de juiste ondersteuning krijgen zodra we to dos gaan

04:18.590 --> 04:21.410
toevoegen of gaan werken met de to dos in deze array.

04:21.410 --> 04:23.610
En hier als ik een nieuwe to do maak,

04:23.610 --> 04:26.220
maak ik die nu door deze klasse te instantiëren,

04:26.220 --> 04:28.370
en we moeten een ID doorgeven, en

04:28.370 --> 04:32.030
hier maak ik een willekeurige pseudo-unieke ID met Math

04:32.030 --> 04:34.230
random toString.

04:34.230 --> 04:35.270
Dit is niet echt uniek,

04:35.270 --> 04:36.660
maar goed genoeg hier.

04:36.660 --> 04:39.170
En nu voor de waarde hier, daar wil ik natuurlijk

04:39.170 --> 04:41.670
wat tekst instellen, die ik verwacht

04:41.670 --> 04:45.530
te krijgen in mijn inkomende request body.

04:45.530 --> 04:48.823
Dus ik verwacht mijn tekst hier te krijgen, in

04:49.750 --> 04:53.270
principe op verzoek. tekst, zodat ik hier

04:53.270 --> 04:56.280
tekst als waarde kan instellen.

04:56.280 --> 04:57.113
Nu werkt dit,

04:57.113 --> 04:59.640
maar zie dat dit alleen werkt omdat TypeScript

04:59.640 --> 05:02.320
ziet dat dit van het type any is.

05:02.320 --> 05:04.420
Het weet niet dat dit een string is.

05:04.420 --> 05:05.510
En het kan het niet weten,

05:05.510 --> 05:08.390
want hoe zou TypeScript weten welke gegevens deel

05:08.390 --> 05:11.140
uitmaken van onze inkomende verzoeken?

05:11.140 --> 05:12.430
Het is niet duidelijk.

05:12.430 --> 05:14.260
We zeggen nergens wat er

05:14.260 --> 05:17.620
in de aanvragen staat die we ontvangen.

05:17.620 --> 05:19.270
Nu, hoe kunnen we dit verbeteren?

05:19.270 --> 05:21.780
Nou, we kunnen typecasting gebruiken, bijvoorbeeld.

05:21.780 --> 05:23.660
Typecasting is altijd een goede oplossing

05:23.660 --> 05:26.090
als je een specifiek type kent, maar TypeScript

05:26.090 --> 05:27.360
doet dat niet.

05:27.360 --> 05:30.440
Dus hier in de request body, voordat we tekst openen, kunnen

05:30.440 --> 05:32.650
we dit typecasten tot een object waar we een

05:32.650 --> 05:34.900
text property hebben, wat een string is.

05:34.900 --> 05:36.920
Omdat we deze app bouwen, weten

05:36.920 --> 05:40.320
we wat we verwachten op onze inkomende verzoeken.

05:40.320 --> 05:42.750
Dus omdat we weten dat er een tekst-eigenschap zal

05:42.750 --> 05:44.166
zijn op de inkomende request

05:44.166 --> 05:46.630
body, kunnen we die casten naar zo'n object.

05:46.630 --> 05:51.480
En nu krijgen we hier goede TypeScript en ook IDE-ondersteuning.

05:51.480 --> 05:53.560
Dus daarmee voegen we een nieuwe to do toe.

05:53.560 --> 05:55.470
Nu kunnen we TODOS bereiken en

05:55.470 --> 05:58.280
het nieuwe te doen op deze matrix zetten.

05:58.280 --> 05:59.330
En nogmaals, dit slaat

05:59.330 --> 06:01.060
het hier natuurlijk alleen op

06:01.060 --> 06:02.750
als constante en dus alleen in

06:02.750 --> 06:05.650
het geheugen, omdat het werken met een database niet

06:05.650 --> 06:08.880
echt direct te maken heeft met node of TypeScript, maar,

06:08.880 --> 06:11.170
nou ja, met de database.

06:11.170 --> 06:14.140
Dus daarmee hebben we de Creëer Todo functie hier.

06:14.140 --> 06:16.400
Laten we nu naar de to do's routes gaan

06:16.400 --> 06:19.070
en deze controllerfunctie importeren.

06:19.070 --> 06:22.030
Dus importeer uit de controllers map uit

06:22.030 --> 06:24.000
het todos bestand daar, en

06:24.000 --> 06:26.660
importeer de create Todo functie en

06:26.660 --> 06:30.100
wijs naar deze functie hier op de post route zodat

06:30.100 --> 06:35.100
elk verzoek dat gericht is op slash todos slash niets de createTodo

06:36.060 --> 06:38.390
functie bereikt.

06:38.390 --> 06:39.580
Voer het hier niet uit.

06:39.580 --> 06:40.650
Wijs er gewoon naar.

06:40.650 --> 06:43.890
Het wordt later voor u uitgevoerd door node en express

06:43.890 --> 06:45.883
in uw draaiende webserver.

06:46.880 --> 06:49.630
Dus nu hebben we deze functie hier.

06:49.630 --> 06:50.900
Maar we zijn nog niet klaar.

06:50.900 --> 06:52.290
In de controller moeten we

06:52.290 --> 06:54.360
allemaal een antwoord terugsturen.

06:54.360 --> 06:56.720
dus hier kunnen we een antwoord sturen,

06:56.720 --> 06:59.420
bijvoorbeeld in JSON formaat met de JSON

06:59.420 --> 07:02.300
methode waar we zeggen bericht gemaakt de todo

07:02.300 --> 07:04.040
of wat je maar wilt, en we hebben

07:04.040 --> 07:07.770
createdTodo sleutel, misschien, waar we de nieuwe todo

07:07.770 --> 07:10.520
die werd toegevoegd op de server kant, zodat

07:10.520 --> 07:14.490
op de client, konden we ook dat gebruiken.

07:14.490 --> 07:17.750
En misschien ook een statuscode van 201 om aan te

07:17.750 --> 07:19.700
geven dat het gelukt is en dat

07:19.700 --> 07:21.793
er een bron is aangemaakt.

07:22.680 --> 07:24.640
Nu moeten we ervoor zorgen dat het

07:24.640 --> 07:28.500
lichaam dat we hier proberen uit te halen ook echt bestaat.

07:28.500 --> 07:29.770
En voor data en app. ts, moeten

07:29.770 --> 07:33.130
we de body's van inkomende verzoeken ontleden.

07:33.130 --> 07:37.620
Daarvoor kunnen we importeren uit het body-parser pakket

07:37.620 --> 07:39.220
dat we ook geïnstalleerd

07:39.220 --> 07:41.380
hebben, en uit dat pakket kunnen

07:41.380 --> 07:46.380
we de JSON methode als volgt importeren.

07:46.410 --> 07:49.170
En dan kun je hier deze uitgevoerde als

07:49.170 --> 07:51.310
middleware registreren.

07:51.310 --> 07:54.480
Dit is dus middleware, geleverd door een pakket

07:54.480 --> 07:58.130
van derden, die de body van alle inkomende verzoeken

07:58.130 --> 08:01.570
parseert en daar JSON-gegevens uit haalt, om vervolgens

08:01.570 --> 08:05.990
de body key van dit request object te vullen met die geparseerde

08:05.990 --> 08:07.970
JSON-gegevens.

08:07.970 --> 08:10.290
Dat is wat deze JSON middleware van

08:10.290 --> 08:12.503
het body-parser pakket doet.

08:13.890 --> 08:16.520
En daarmee zouden we een server moeten hebben

08:16.520 --> 08:18.230
die nieuwe to dos kan maken.

08:18.230 --> 08:22.210
Sla alle bestanden op en zorg ervoor dat het zonder fouten hercompileert.

08:22.210 --> 08:26.150
Zorg ervoor dat nodemon nog steeds de app serveert. js bestand.

08:26.150 --> 08:28.560
En nu moeten we een postverzoek sturen.

08:28.560 --> 08:31.150
En met de browser kunnen we dat niet, maar we

08:31.150 --> 08:34.260
kunnen er een hulpmiddel voor gebruiken, Postman.

08:34.260 --> 08:35.600
U kunt er gewoon naar zoeken

08:35.600 --> 08:38.160
en dan de Postman-app op uw systeem installeren.

08:38.160 --> 08:39.283
Het is gratis te gebruiken.

08:40.440 --> 08:41.570
Als je het eenmaal geïnstalleerd

08:41.570 --> 08:43.390
hebt, kun je het starten en zou je een scherm moeten zien

08:43.390 --> 08:44.440
dat er ongeveer zo uitziet.

08:44.440 --> 08:46.460
Als u een modale overlay ziet, kunt

08:46.460 --> 08:48.010
u die gewoon sluiten.

08:48.010 --> 08:50.240
En hier kunt u nu een nieuwe aanvraag aanmaken

08:50.240 --> 08:51.740
door op dat plusje te klikken,

08:51.740 --> 08:53.040
het type aanvraag te kiezen,

08:53.040 --> 08:55.100
in dit geval een postaanvraag, en de URL

08:55.100 --> 08:56.450
in te voeren.

08:56.450 --> 08:58.820
Hier is het localhost 3000, 3000 omdat

08:58.820 --> 09:01.660
dat de poort is die ik hier gekozen heb.

09:01.660 --> 09:03.100
En dan moeten we het verzoek

09:03.100 --> 09:06.320
naar slash todos slash nothing sturen.

09:06.320 --> 09:10.000
Dus hier aan slash todos slash niets.

09:10.000 --> 09:12.120
We willen een body toevoegen aan het

09:12.120 --> 09:15.440
verzoek, en dat moet een raw body JSON zijn om wat JSON gegevens

09:15.440 --> 09:17.010
te versturen.

09:17.010 --> 09:19.480
En nu wat moeten we hierheen sturen?

09:19.480 --> 09:21.840
Nou, wat we eruit halen in de middleware functie,

09:21.840 --> 09:22.880
dus in dit geval moeten

09:22.880 --> 09:24.570
we een tekst eigenschap hebben als

09:24.570 --> 09:27.410
onderdeel van onze JSON gegevens die we versturen.

09:27.410 --> 09:29.610
Dus laten we hier tekst toevoegen als

09:29.610 --> 09:31.070
naam en dan een tekst naar

09:31.070 --> 09:33.230
keuze, zoals beëindig de cursus.

09:33.230 --> 09:36.960
En als je nu op verzenden klikt, verstuurt hij het verzoek, en hier is

09:36.960 --> 09:38.990
het antwoord, en dit ziet er goed uit.

09:38.990 --> 09:40.670
We hebben de create a to do terug.

09:40.670 --> 09:43.600
We zien de gegenereerde ID en de tekst.

09:43.600 --> 09:45.870
Dus onze achterkant werkt hier duidelijk.

09:45.870 --> 09:47.690
En we schreven het allemaal met TypeScript,

09:47.690 --> 09:49.880
maar we serveren het als gewone JavaScript.

09:49.880 --> 09:51.183
Dat is de hele truc.
