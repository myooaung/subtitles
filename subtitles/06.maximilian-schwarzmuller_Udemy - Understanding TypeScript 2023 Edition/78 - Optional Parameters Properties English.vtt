WEBVTT

1
00:00:02.180 --> 00:00:05.590
<v Instructor>Let's come back to interfaces for objects.</v>

2
00:00:05.590 --> 00:00:10.090
You can also define optional properties

3
00:00:10.090 --> 00:00:14.100
in interfaces and also in classes, as I will show you.

4
00:00:14.100 --> 00:00:16.437
For that, you add your property name, let's say

5
00:00:16.437 --> 00:00:20.740
'outputName' here, can be whatever you want of course,

6
00:00:20.740 --> 00:00:22.238
and that should be a string.

7
00:00:22.238 --> 00:00:26.400
I don't want to force every class based on Named

8
00:00:26.400 --> 00:00:27.630
to have that.

9
00:00:27.630 --> 00:00:31.120
It should be optional whether you want to have it or not.

10
00:00:31.120 --> 00:00:34.289
You can specify an optional property

11
00:00:34.289 --> 00:00:37.670
by adding a question mark after the property name.

12
00:00:37.670 --> 00:00:40.130
This tells Tivescript that this property

13
00:00:40.130 --> 00:00:44.060
might exist in classes that implement this interface

14
00:00:44.060 --> 00:00:45.680
but it doesn't have to.

15
00:00:45.680 --> 00:00:48.540
And therefore, we get no error here in 'Person'

16
00:00:48.540 --> 00:00:51.180
even though I don't have an output name property

17
00:00:51.180 --> 00:00:53.440
because it is optional.

18
00:00:53.440 --> 00:00:56.072
Now of course, I can add output name here

19
00:00:56.072 --> 00:00:59.130
and initialize this with some value

20
00:00:59.130 --> 00:01:02.800
or use it like any other property but I don't have to.

21
00:01:02.800 --> 00:01:06.720
Now on a class you can also have an optional property.

22
00:01:06.720 --> 00:01:09.670
Let's same name here should be optional,

23
00:01:09.670 --> 00:01:13.840
because maybe we don't get a value here for N.

24
00:01:13.840 --> 00:01:16.010
We can add a question mark here as well

25
00:01:16.010 --> 00:01:17.460
in our class.

26
00:01:17.460 --> 00:01:20.890
We now just also have to make it optional here in Named

27
00:01:20.890 --> 00:01:23.610
otherwise we violate against our interface

28
00:01:23.610 --> 00:01:26.012
which forces this to be a string.

29
00:01:26.012 --> 00:01:29.000
Now I'm saying this can be optional.

30
00:01:29.000 --> 00:01:30.510
So here it's not optional,

31
00:01:30.510 --> 00:01:32.750
and here when I set this equal to N,

32
00:01:32.750 --> 00:01:36.190
I only want to do this if N is truthy,

33
00:01:36.190 --> 00:01:37.640
if it is set.

34
00:01:37.640 --> 00:01:40.080
So only if it's not an empty string for example.

35
00:01:40.080 --> 00:01:43.340
Otherwise, name will not be set and that is okay

36
00:01:43.340 --> 00:01:46.524
because I turned it to be an optional property

37
00:01:46.524 --> 00:01:49.853
both here in the interface but also in my class.

38
00:01:50.790 --> 00:01:53.070
Now here, when we construct a new object,

39
00:01:53.070 --> 00:01:56.203
we could do this without passing in a name.

40
00:01:57.060 --> 00:01:59.813
To allow that, we have to go to the constructor

41
00:01:59.813 --> 00:02:02.600
and provide a default value here

42
00:02:02.600 --> 00:02:05.120
or also add a question mark here.

43
00:02:05.120 --> 00:02:06.260
This is all to allow it.

44
00:02:06.260 --> 00:02:08.800
You can add optional parameters

45
00:02:08.800 --> 00:02:12.170
either by providing a default fall back value

46
00:02:12.170 --> 00:02:13.990
or by adding a question mark

47
00:02:13.990 --> 00:02:17.170
in which case the default value will be undefined.

48
00:02:17.170 --> 00:02:20.450
And now we can call this constructor without a value

49
00:02:20.450 --> 00:02:22.446
because we have that optional parameter

50
00:02:22.446 --> 00:02:25.960
and because we have the optional property that is okay,

51
00:02:25.960 --> 00:02:27.930
we don't need to initialize it.

52
00:02:27.930 --> 00:02:29.648
And hence thereafter if you greet,

53
00:02:29.648 --> 00:02:33.510
well this name of course will yield undefined.

54
00:02:33.510 --> 00:02:35.640
So probably we should check here as well

55
00:02:35.640 --> 00:02:37.000
if we got a name,

56
00:02:37.000 --> 00:02:39.100
and if we do we console.log this.

57
00:02:39.100 --> 00:02:42.970
Else, we console.log "hi" without any reference

58
00:02:42.970 --> 00:02:45.200
to the name because we don't have one.

59
00:02:45.200 --> 00:02:47.170
If we say that if everything compiles

60
00:02:47.170 --> 00:02:48.840
and we see just hi here

61
00:02:48.840 --> 00:02:51.520
because it didn't provide a name.

62
00:02:51.520 --> 00:02:53.950
So that would be optional properties

63
00:02:53.950 --> 00:02:56.008
both in a class and in an interface

64
00:02:56.008 --> 00:02:59.910
and also in my constructor list here.

65
00:02:59.910 --> 00:03:01.660
Now just to make it really clear again,

66
00:03:01.660 --> 00:03:04.790
these three things are only loosely related.

67
00:03:04.790 --> 00:03:07.980
You can an optional property in an interface

68
00:03:07.980 --> 00:03:11.060
and then implement it as a non optional property

69
00:03:11.060 --> 00:03:11.910
in the class.

70
00:03:11.910 --> 00:03:14.550
You then just have to make sure that your logic is such

71
00:03:14.550 --> 00:03:17.810
that this is always initialized otherwise you get an error

72
00:03:17.810 --> 00:03:19.720
as you just saw.

73
00:03:19.720 --> 00:03:22.180
Or you have an optional property in an interface

74
00:03:23.723 --> 00:03:26.870
and an optional property in your class,

75
00:03:26.870 --> 00:03:31.630
then you don't have to assign a value in all cases here.

76
00:03:31.630 --> 00:03:34.210
And in addition and totally unrelated here,

77
00:03:34.210 --> 00:03:36.020
you can have optional parameters

78
00:03:36.020 --> 00:03:38.300
in functions and therefore also in methods

79
00:03:38.300 --> 00:03:40.300
including the constructor method.

80
00:03:40.300 --> 00:03:42.670
Optional parameters are defined either

81
00:03:42.670 --> 00:03:43.810
with the question mark,

82
00:03:43.810 --> 00:03:48.040
where the default value if not set is therefore undefined

83
00:03:48.040 --> 00:03:51.690
or simply by assigning a default value like this.

84
00:03:51.690 --> 00:03:53.785
Then as you learn, this is also optional

85
00:03:53.785 --> 00:03:56.960
and the default value will be assumed if you don't pass in

86
00:03:56.960 --> 00:03:58.750
a more specific value.

87
00:03:58.750 --> 00:04:00.720
So this gives you more flexibility

88
00:04:00.720 --> 00:04:02.950
in how you structure your classes,

89
00:04:02.950 --> 00:04:04.770
and when we talk about interfaces,

90
00:04:04.770 --> 00:04:06.860
how you structure your contracts

91
00:04:06.860 --> 00:04:09.103
classes might need to adhere to.

