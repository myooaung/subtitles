WEBVTT

00:02.220 --> 00:04.080
-: Şimdi kesişim türleri bir şeydir.

00:04.080 --> 00:05.470
Bununla birlikte, daha sık

00:05.470 --> 00:07.800
kullanılan başka bir özellik, aslında biraz

00:07.800 --> 00:10.590
kullandığımız bir özellik olan tip korumalarıdır.

00:10.590 --> 00:12.400
Burada Combinable kullanalım.

00:12.400 --> 00:15.560
Bu, ya bir dize ya da bir sayıya sahip olduğumuz bir birleşik

00:15.560 --> 00:18.020
türdür ve tür korumaları birleşik türlerde bize

00:18.020 --> 00:21.050
yardımcı olur çünkü esnekliğe sahip olmak güzel olsa da,

00:21.050 --> 00:23.610
genellikle çalışma zamanında tam olarak hangi

00:23.610 --> 00:26.200
türü aldığınızı bilmeniz gerekir.

00:26.200 --> 00:28.630
Diyelim ki burada, Combinable türünde olması

00:28.630 --> 00:33.070
gereken bir sayı aldığım add fonksiyonumuz var, yani bir dize veya bir sayı

00:33.070 --> 00:35.100
ve bu nedenle aslında burada a olarak

00:35.100 --> 00:37.990
adlandıracağım ve sonra yine Combinable olması

00:37.990 --> 00:39.520
gereken başka bir argümanım

00:39.520 --> 00:42.110
var, yani bir sayı veya bir dize ve sonra a artı

00:42.110 --> 00:44.640
b döndürmek istiyorum.

00:44.640 --> 00:47.020
Geçmişte bunun işe yaramadığını gördük.

00:47.020 --> 00:51.320
Bunun yerine, örneğin typeof a'nın string'e eşit olup olmadığını

00:51.320 --> 00:53.740
veya typeof b'nin string'e eşit olup

00:55.660 --> 00:59.780
olmadığını kontrol etmemiz gerekir ve eğer durum buysa, a'yı

00:59.780 --> 01:04.681
döndürürüz.

01:04.681 --> 01:04.681
toString artı b. toString.

01:04.681 --> 01:06.750
Böylece bu iki dizeyi birleştiriyoruz;

01:06.750 --> 01:09.570
aksi takdirde, bu if deyimine girmezse, a artı b'yi

01:09.570 --> 01:11.510
bu şekilde döndürüyoruz çünkü artık

01:11.510 --> 01:13.270
tür grubu a ve b'nin burada sayı

01:13.270 --> 01:15.620
olması gerektiğini biliyor, çünkü bunlardan

01:15.620 --> 01:19.710
en az biri sayı olmasaydı, burada olurduk.

01:19.710 --> 01:22.890
Burada buna tip koruması deniyor çünkü birlik

01:22.890 --> 01:25.280
tiplerinin bize sağladığı esnekliği

01:25.280 --> 01:27.980
kullanmamıza ve kodumuzun çalışma zamanında

01:27.980 --> 01:32.550
doğru çalışmasını sağlamamıza olanak tanıyor, çünkü genellikle

01:32.550 --> 01:34.830
iki veya üç farklı tiple çalışan

01:34.830 --> 01:38.160
fonksiyonlarınız vardır ve bu nedenle birlik

01:38.160 --> 01:40.570
tipi mükemmeldir, ancak değerlerle

01:40.570 --> 01:43.890
tam olarak ne yapacağınız tipe bağlıdır, burada

01:43.890 --> 01:46.940
olduğu gibi ya birleştiririz ya da matematiksel

01:46.940 --> 01:51.670
olarak ekleriz.

01:51.670 --> 01:55.310
Şimdi bu typeof kullanarak bir tür koruması.

01:55.310 --> 01:58.970
Başka tür korumalar da yazabilirsiniz.

01:58.970 --> 02:00.880
ve bunun için, yönetici ve çalışan tiplerime

02:00.880 --> 02:03.050
geri dönmeme izin verin, burada yönetici

02:03.050 --> 02:04.950
üzerinde ayrıcalıklar ve çalışan üzerinde

02:04.950 --> 02:06.943
startDate var.

02:08.590 --> 02:11.810
Şimdi her ikisini de birleştiren ElevatedEmployee'ye sahibiz.

02:11.810 --> 02:14.980
Şimdi de burada başka bir tür oluşturun.

02:14.980 --> 02:16.330
Bu BilinmeyenÇalışan.

02:18.000 --> 02:21.940
Bu ya sadece bir çalışan ya da bir yönetici.

02:21.940 --> 02:25.540
Böylece iki özel nesne türümü kullanarak bir birleştirme türüne sahip olduk.

02:25.540 --> 02:28.173
Yani bilinmeyen çalışan ikisinden biri.

02:29.230 --> 02:32.003
Şimdi printEmployeeInformation adında bir fonksiyonumuz

02:34.620 --> 02:36.420
olabilir, burada bir çalışan girmem

02:36.420 --> 02:39.660
gerekir ve bu bilinmeyen çalışan tipinde olmalıdır.

02:39.660 --> 02:41.610
Şimdi burada, teselli etmek istiyorum. Çalışan hakkında

02:41.610 --> 02:44.030
çeşitli bilgileri günlüğe kaydedin.

02:44.030 --> 02:47.210
Örneğin, emp'deki isim. name, her iki çalışan

02:47.210 --> 02:48.580
türünün de bir name

02:48.580 --> 02:52.140
özelliği olduğundan sorunsuz çalışacaktır.

02:52.140 --> 02:56.730
Ama aynı zamanda teselli etmek de istiyorum. emp'ye erişerek ayrıcalıkları

02:58.160 --> 03:01.520
günlüğe kaydedin. privileges, ve burada zaten

03:01.520 --> 03:04.350
otomatik tamamlamada sorunlar yaşıyorum

03:04.350 --> 03:07.100
çünkü TypeScript bunun argümanda her zaman

03:07.100 --> 03:09.890
var olduğunu doğrulayamıyor, çünkü UnknownEmployee,

03:09.890 --> 03:16.260
privileges özelliği olmayan normal bir çalışan olabilir.

03:16.260 --> 03:18.330
Buna sadece yönetici sahiptir.

03:18.330 --> 03:20.100
Şimdi burada bir tip korumaya ihtiyacımız var.

03:20.100 --> 03:24.530
Sorun şu ki typeof ile hiçbir şey kazanamayacağız.

03:24.530 --> 03:26.830
Çalışanın türünü kontrol edersek, bu sadece

03:26.830 --> 03:29.470
çalışma zamanında nesne olacaktır.

03:29.470 --> 03:31.380
Yine de bu bize bu özelliğe sahip olup

03:31.380 --> 03:32.940
olmadığını söylemez.

03:32.940 --> 03:34.960
Dolayısıyla, bu if kontrolündeki kodu

03:34.960 --> 03:37.430
taşırsam, TypeScript eskisinden daha mutlu olmaz

03:37.430 --> 03:39.750
çünkü bir nesne, sadece bir nesnedir.

03:39.750 --> 03:41.920
Bize özellikler hakkında hiçbir şey söylemiyor.

03:41.920 --> 03:44.980
Employee türünde olup olmadığını kontrol edemeyiz

03:44.980 --> 03:48.130
çünkü bu JavaScript'in bildiği bir tür değildir ve

03:48.130 --> 03:49.840
bu kontrolün çalışma zamanında

03:49.840 --> 03:52.560
çalıştığını ve JavaScript'i kullandığını

03:52.560 --> 03:56.190
unutmayın, bu nedenle typeof'un bize verdiği türü yalnızca

03:56.190 --> 03:58.010
JavaScript'in bildiği türlerle

03:58.010 --> 04:01.920
karşılaştırabiliriz ve bunlar nesne, dize, sayı ve boolean'dır

04:01.920 --> 04:05.610
ve özel türümüz bunun bir parçası değildir.

04:05.610 --> 04:07.950
Bu yalnızca TypeScript dünyasında mevcuttur,

04:07.950 --> 04:11.020
derlenmiş JavaScript dünyasında değil.

04:11.020 --> 04:13.990
Dolayısıyla, bu da işe yaramıyor.

04:13.990 --> 04:17.960
Şimdi burada, geçici çözümümüz farklı bir if kontrolü kullanmaktır.

04:17.960 --> 04:20.240
Ayrıcalıklara erişmek istediğimizi biliyoruz,

04:20.240 --> 04:25.240
bu nedenle çalışan ayrıcalıklarının bir şey olup olmadığını kontrol edebiliriz.

04:26.400 --> 04:28.560
Sorun şu ki, TypeScript bu özelliğe

04:28.560 --> 04:30.690
erişmemize, hatta bu şekilde kontrol

04:30.690 --> 04:33.550
etmemize bile izin vermiyor, ancak kontrol

04:33.550 --> 04:36.200
etmemiz için farklı bir yol var.

04:36.200 --> 04:40.000
JavaScript'te yerleşik olarak bulunan in anahtar sözcüklerini kullanabiliriz.

04:40.000 --> 04:43.120
Şimdi bir dize olarak yazılan ayrıcalıkların

04:43.120 --> 04:46.690
emp içinde olup olmadığını kontrol edebiliriz.

04:46.690 --> 04:49.130
Bu, bunun çalışan üzerinde bir özellik

04:49.130 --> 04:53.480
olarak var olup olmadığını kontrol etmeyi sağlayan JavaScript

04:53.480 --> 04:58.380
kodudur ve durum böyleyse, TypeScript bu kontrolü burada algılar ve bu

04:58.380 --> 05:01.200
nedenle, buradaki if kontrolünün içindeki

05:01.200 --> 05:04.543
bu özelliğe erişmemize izin verir.

05:05.852 --> 05:08.380
Ve bunu startDate için tekrarlayabiliriz

05:08.380 --> 05:12.240
ve bu nedenle startDate'in burada bir özellik olup olmadığını

05:12.240 --> 05:15.710
kontrol edebiliriz ve bu nedenle bu if kontrolünde bunu

05:16.970 --> 05:18.730
da çıktılayabiliriz.

05:18.730 --> 05:23.687
Şimdi bununla birlikte, printEmployeeInformation'ı çağırırsak ve oluşturduğumuz

05:24.650 --> 05:28.363
bir çalışanı, e1'i aktarırsak, bunun hatasız bir şekilde

05:31.410 --> 05:34.860
derlendiğini ve gerçekten de ayrıcalıkların çıktısını

05:34.860 --> 05:37.430
verdiğini göreceksiniz ve tabii ki burada

05:37.430 --> 05:42.530
da veriler sadece Başlangıç Tarihi demelidir.

05:42.530 --> 05:45.820
Ancak bununla birlikte, bize beklediğimiz çıktıyı verir.

05:45.820 --> 05:48.590
Diğer taraftan, tüm bu alanlara sahip olmayan bir

05:48.590 --> 05:50.950
çalışan girersek, örneğin, yalnızca başlangıç

05:50.950 --> 05:53.090
tarihi olan ancak ayrıcalıkları olmayan

05:53.090 --> 05:56.383
bir çalışanı anında oluşturursak, o zaman tüm işler yapılır

05:57.850 --> 06:00.370
ve hatasız bir şekilde derlenir ve orada sahip

06:00.370 --> 06:03.160
olduğumuz bu if kontrolü nedeniyle ayrıcalıklar hakkında

06:03.160 --> 06:05.723
hiçbir şey yazdırmayız.

06:07.650 --> 06:09.800
Sınıflarla çalışırken, başka

06:09.800 --> 06:13.070
bir tür koruma da kullanabilirsiniz; bu

06:13.070 --> 06:16.520
da instanceof tür korumasıdır.

06:16.520 --> 06:21.460
Diyelim ki aşağıda Car adında bir sınıfımız var ve bunun sadece

06:21.460 --> 06:23.800
console dediği bir drive metodu

06:23.800 --> 06:26.523
var. log Driving, ve başka

06:28.480 --> 06:31.750
bir sınıfımız var, Truck, onun da bir drive metodu

06:31.750 --> 06:34.623
var, ya da belki Driving a truck diyebilirsiniz,

06:35.840 --> 06:40.250
ama metot adını söylememiz gerekiyor.

06:40.250 --> 06:43.980
Ayrıca bir loadCargo metodumuz var, burada bir

06:43.980 --> 06:46.570
sayı olan bir miktarımız var ve sonra

06:46.570 --> 06:49.040
burada sadece "Kargo artı miktar

06:49.040 --> 06:53.570
yükleniyor" dediğim bazı kukla kodlarım var. Bunun gibi bir şey, oops, miktar, bunun gibi bir şey.

06:53.570 --> 06:57.323
Şimdi, elbette bazı benzerlikleri olan, sürüş yöntemine sahip,

06:58.170 --> 06:59.320
ancak aynı zamanda

06:59.320 --> 07:02.090
bir farklılığı olan iki sınıfımız var.

07:02.090 --> 07:03.890
Şimdi, yine burada bir Araba

07:03.890 --> 07:08.200
ya da Kamyon olan Araç adında bir birlik türü oluşturabiliriz

07:08.200 --> 07:13.030
ve şimdi diyelim ki yeni bir Araba olan v1 adında yeni bir araç ve yeni

07:13.030 --> 07:18.030
bir Kamyon olan v2 adında başka bir araç oluşturduk.

07:18.050 --> 07:21.873
Şimdi bir fonksiyonum var, useVehicle, sadece araç

07:23.890 --> 07:26.443
tipinde olması gereken bir araç almayı

07:27.700 --> 07:29.780
bekliyor, yani bu birlik tipinde

07:29.780 --> 07:31.350
olmalı.

07:31.350 --> 07:34.203
Şimdi burada bir aracımız var ve diyelim ki amacımız

07:35.420 --> 07:37.490
araçlarla yapabileceğimiz her şeyi

07:37.490 --> 07:40.040
yapmak: sürmek ve yük yüklemek.

07:40.040 --> 07:43.400
Bu yüzden elbette araç çağırabiliriz. çünkü bu her zaman vardır, ama araç

07:43.400 --> 07:45.420
için. loadCargo, bir sorunumuz

07:45.420 --> 07:50.010
var çünkü buna sadece bir kamyon sahip.

07:50.010 --> 07:52.720
Arabada yok, o yüzden bu işe yaramaz.

07:52.720 --> 07:56.440
Şimdi, elbette, yine loadCargo'nun araçta olup olmadığını kontrol

07:56.440 --> 07:59.513
edebiliriz ve eğer durum buysa, onu kullanabiliriz.

08:00.760 --> 08:05.760
En azından buradaki yazım hatasını düzeltirsem.

08:06.430 --> 08:09.480
Şimdi bunu kaydediyoruz ve sonra useVehicle'ı

08:09.480 --> 08:13.230
çağırıp v1'i giriyoruz ve sonra v2 ile tekrar çağırıyoruz

08:13.230 --> 08:17.400
ve tüm bunları kaydediyorum, derleniyor ve çalışıyor.

08:17.400 --> 08:21.680
İşte bu da yapmanın bir yolu.

08:21.680 --> 08:23.340
Bu özellik dizesini yanlış

08:23.340 --> 08:26.580
yazma riskini de ortadan kaldırdığı için biraz

08:26.580 --> 08:28.600
daha şık olabilecek alternatif

08:28.600 --> 08:31.920
bir yol da instanceof kullanmaktır.

08:31.920 --> 08:34.080
vehicle'ın bir Truck örneği olup olmadığını kontrol edebiliriz.

08:34.080 --> 08:39.080
Eğer durum buysa, bir loadCargo metoduna sahip olacağını biliyoruz.

08:39.360 --> 08:42.510
instanceof, vanilla JavaScript'te yerleşik olarak

08:42.510 --> 08:45.230
bulunan normal bir operatördür, bu nedenle

08:45.230 --> 08:47.430
bu TypeScript kodu değildir.

08:47.430 --> 08:49.280
Tıpkı typeof gibi, bu da JavaScript'in

08:49.280 --> 08:52.250
bir parçasıdır ve çalışma zamanında yürütülür.

08:52.250 --> 08:54.290
JavaScript Truck türünü bilmez,

08:54.290 --> 08:56.780
ancak kurucu işlevleri bilir ve sonuçta

08:56.780 --> 08:59.330
sınıflar sadece kurucu işlevlere çevrilir

08:59.330 --> 09:01.490
ve TypeScript daha sonra Truck kurucu

09:01.490 --> 09:03.400
işlevine dayalı olarak aracın

09:03.400 --> 09:06.580
oluşturulup oluşturulmadığını bulabilir.

09:06.580 --> 09:10.290
Dolayısıyla, sınıflar JavaScript'in anladığı

09:10.290 --> 09:11.970
bir şeye, yapıcı işlevlere

09:11.970 --> 09:15.450
derlendiğinden, bunu kullanabilir.

09:15.450 --> 09:17.210
Burada bir sınıf yerine bir arayüz

09:17.210 --> 09:20.390
kullanıyor olsaydık ve bu nedenle, elbette, burada uygulamayı

09:20.390 --> 09:21.223
yapamazdık, ancak

09:21.223 --> 09:22.950
bunu nesne değişmez notasyonuyla

09:22.950 --> 09:25.130
bir nesne oluşturduğumuzda yapacağız, o zaman

09:25.130 --> 09:27.300
instanceof kullanamazdık çünkü öğrendiğiniz

09:27.300 --> 09:30.940
gibi arayüzler herhangi bir JavaScript koduna derlenmez ve bu nedenle

09:30.940 --> 09:34.370
bunları çalışma zamanında kullanamayız.

09:34.370 --> 09:37.160
Sınıflar için bunu yapabiliriz çünkü JavaScript

09:37.160 --> 09:40.010
sınıfları ve kurucu işlevleri destekler ve instanceof

09:40.010 --> 09:42.290
ile bir nesnenin o sınıfa dayanıp dayanmadığını

09:42.290 --> 09:44.500
öğrenebilirsiniz.

09:44.500 --> 09:47.660
Eğer öyle olup olmadığını bilirsek, o zaman bir loadCargo fonksiyonumuz olacaktır.

09:47.660 --> 09:51.850
Yani bunlar tip korumalar.

09:51.850 --> 09:53.480
Sonuç olarak, tip korumaları,

09:53.480 --> 09:55.890
kullanmaya çalışmadan önce belirli

09:55.890 --> 09:59.470
bir özellik veya yöntemin var olup olmadığını veya kullanmaya

09:59.470 --> 10:02.980
çalışmadan önce tiple bir şey yapıp yapamayacağınızı

10:02.980 --> 10:06.310
kontrol etme fikrini veya yaklaşımını tanımlayan

10:06.310 --> 10:08.470
bir terimdir.

10:08.470 --> 10:10.220
Nesneler için bu instanceof

10:10.220 --> 10:15.113
veya in ile yapılabilir, diğer türler için typeof kullanabilirsiniz ve bu

10:16.140 --> 10:19.780
nedenle, artık birleşik türlerin size sağladığı esnekliği

10:19.780 --> 10:22.280
kullanmak ve çalışma zamanında aldığınız

10:22.280 --> 10:25.090
tam türe göre bir şeyi veya diğerini yapan kod

10:25.090 --> 10:29.050
yazmak için tüm esnekliğe sahipsiniz.
