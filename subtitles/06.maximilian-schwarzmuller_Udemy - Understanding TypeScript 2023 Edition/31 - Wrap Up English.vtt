WEBVTT

1
00:00:02.150 --> 00:00:04.220
<v ->Now with that we had a thorough look</v>

2
00:00:04.220 --> 00:00:07.410
at all the core types and the TypeScript basics.

3
00:00:07.410 --> 00:00:11.640
You hopefully now understand how we create and assign types,

4
00:00:11.640 --> 00:00:14.427
how we assign types to variables

5
00:00:14.427 --> 00:00:17.510
and to parameters, and why we do that.

6
00:00:17.510 --> 00:00:20.740
How type assignments and types could differ from

7
00:00:20.740 --> 00:00:24.770
JavaScript type checks that JavaScript uses runtime types,

8
00:00:24.770 --> 00:00:27.310
and TypeScript uses static types

9
00:00:27.310 --> 00:00:29.400
that matter during development.

10
00:00:29.400 --> 00:00:31.710
That the built JavaScript code, therefore,

11
00:00:31.710 --> 00:00:34.410
does not include any type assignments.

12
00:00:34.410 --> 00:00:36.550
It of course includes any type checks,

13
00:00:36.550 --> 00:00:39.060
because that is regular JavaScript code,

14
00:00:39.060 --> 00:00:41.730
but something like this here...

15
00:00:43.050 --> 00:00:44.910
this is simply not allowed in JavaScript.

16
00:00:44.910 --> 00:00:46.280
This is not supported syntax.

17
00:00:46.280 --> 00:00:47.960
That's TypeScript only.

18
00:00:47.960 --> 00:00:49.550
So that's hopefully clear.

19
00:00:49.550 --> 00:00:52.740
And then we had a look a numbers, strings, Booleans

20
00:00:52.740 --> 00:00:55.750
at function types and setting return types,

21
00:00:55.750 --> 00:00:58.510
argument types, and also describing

22
00:00:58.510 --> 00:01:00.160
the type of an overall function

23
00:01:00.160 --> 00:01:02.490
which can be helpful if you wanna have a variable

24
00:01:02.490 --> 00:01:04.780
that eventually holds a function.

25
00:01:04.780 --> 00:01:07.890
We had a look at objects and arrays and enums

26
00:01:07.890 --> 00:01:10.140
and how that can be interesting and help you.

27
00:01:10.140 --> 00:01:12.030
The same is true for tuples.

28
00:01:12.030 --> 00:01:16.160
And now we also had a look at aliases, types aliases,

29
00:01:16.160 --> 00:01:18.605
where you can merge complex types

30
00:01:18.605 --> 00:01:21.220
into aliases which you can reuse.

31
00:01:21.220 --> 00:01:23.840
We had a look at literal types and union types,

32
00:01:23.840 --> 00:01:25.840
which can be useful for scenarios

33
00:01:25.840 --> 00:01:29.550
where you expect more than one possible type.

34
00:01:29.550 --> 00:01:33.455
And now at the end we also had a look at unknown and never,

35
00:01:33.455 --> 00:01:35.956
which are niche types but still

36
00:01:35.956 --> 00:01:39.430
in their niche they can be very useful.

37
00:01:39.430 --> 00:01:40.970
Now with these basics we'll

38
00:01:40.970 --> 00:01:43.180
dive deeper into individual aspects,

39
00:01:43.180 --> 00:01:45.630
and of course also explore other types

40
00:01:45.630 --> 00:01:49.163
and JavaScript constructs where types can be helpful.

