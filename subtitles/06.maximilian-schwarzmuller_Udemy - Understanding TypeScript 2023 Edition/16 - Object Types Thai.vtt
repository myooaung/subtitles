WEBVTT

00:02.280 --> 00:03.780
ผู้สอน: มาเจาะลึกถึงประเภทหลักที่

00:03.780 --> 00:06.450
TypeScript รองรับ

00:06.450 --> 00:09.800
ประเภทต่อมาที่น่าสนใจคือประเภทวัตถุ

00:09.800 --> 00:13.100
ตอนนี้ คุณรู้จักอ็อบเจกต์ใน JavaScript แล้ว พวกมันมีลักษณะดังนี้

00:13.100 --> 00:14.690
คุณมีวงเล็บปีกกา และจากนั้น

00:14.690 --> 00:16.350
คุณมีคู่ค่าคีย์ในนั้น และค่าดังกล่าวจะถือว่าเป็นประเภทวัตถุใน

00:16.350 --> 00:23.620
TypeScript ดังนั้นวัตถุ JavaScript ใดๆ จะเป็นวัตถุประเภท

00:23.620 --> 00:28.410
แม้ว่าฉันจะบอกไปแล้วว่ามีอ็อบเจกต์เวอร์ชันเฉพาะเจาะจงมากขึ้นใน TypeScript

00:28.410 --> 00:30.030
ดังนั้นคุณจึงพูดได้ว่านี่ไม่ใช่แค่ออบเจ็กต์ใดๆ

00:30.030 --> 00:39.490
แต่เป็นออบเจ็กต์ที่ต้องมีคุณสมบัติเหล่านี้หรือต้องอิงตามฟังก์ชันคอนสตรัคเตอร์นี้หรือฟังก์ชันนั้น

00:39.490 --> 00:41.322
แต่เราจะไปทีละขั้นตอน

00:41.322 --> 00:49.770
หากต้องการดำน้ำในวัตถุ ก่อนอื่นฉันจะเปลี่ยนชื่อแอป มาที่นี่และฉันจะเปลี่ยนชื่อเป็นพื้นฐาน

00:49.770 --> 00:49.770
อยู่ที่นี่

00:49.770 --> 00:55.400
และเพิ่มแอพใหม่ ts ซึ่งจะแทนที่แอปเก่า

00:55.400 --> 00:55.400
js

00:55.400 --> 00:58.600
เมื่อเราคอมไพล์แล้ว ซึ่งตอนนี้เราสามารถดำดิ่งลงไปในอ็อบเจกต์

00:58.600 --> 01:01.110
และเริ่มด้วยการสร้างวัตถุพื้นฐานที่นี่

01:01.110 --> 01:03.902
สมมติว่าคนที่มีวงเล็บปีกกาที่นี่

01:03.902 --> 01:05.870
และเราให้ชื่อนี้

01:05.870 --> 01:08.230
ฉันจะไปกับแม็กซิมิเลียนเพราะนั่นคือชื่อของฉันและอายุ

01:08.230 --> 01:10.700
30 ปี

01:10.700 --> 01:14.930
แน่นอนตอนนี้เราสามารถปลอบใจได้ เข้าสู่ระบบบุคคลที่นี่

01:14.930 --> 01:18.375
และถ้าเราทำเช่นนั้น และเรารวบรวมสิ่งนี้อย่างไม่น่าแปลกใจ

01:18.375 --> 01:24.536
เราควรเห็นว่าวัตถุนั้นถูกพิมพ์ที่นี่ในคอนโซล

01:24.536 --> 01:27.284
ตอนนี้ สิ่งที่เราสามารถทำได้ใน JavaScript

01:27.284 --> 01:33.970
คือเราสามารถพยายามเข้าถึง สมมติว่าชื่อเล่น คุณสมบัติที่ไม่มีอยู่ที่นี่

01:33.970 --> 01:37.320
ตอนนี้คุณเห็นได้ทันทีว่า TypeScript ไม่พอใจกับเรื่องนั้นมากเกินไป

01:37.320 --> 01:39.820
และด้วยเหตุนี้ IDE ของฉันจึงบอกฉัน

01:39.820 --> 01:44.050
มันบอกฉันว่าไม่มีชื่อเล่นคุณสมบัติในประเภทนั้น

01:44.050 --> 01:49.907
ดังนั้นถ้าเราบันทึกมันและฉันพยายามรวบรวมมัน เราก็พบข้อผิดพลาดเดียวกันตรงนั้น

01:49.907 --> 01:56.430
คอมไพเลอร์ TypeScript ไม่ชอบสิ่งนี้และบอกฉันว่าเราไม่มีคุณสมบัติชื่อเล่นในวัตถุนี้

01:56.430 --> 01:59.813
พบว่าเราไม่มีคุณสมบัติชื่อเล่นนี้ เพราะหากเราวางเมาส์เหนือบุคคลที่อนุมาน

01:59.813 --> 02:07.970
เราจะเห็นเครื่องหมายทวิภาคตามหลังบุคคล ดังนั้นตามหลังชื่อตัวแปรหรือค่าคงที่

02:07.970 --> 02:12.110
สรุปว่านี่คือประเภทของข้อมูลที่จัดเก็บไว้ในนั้น

02:12.110 --> 02:14.181
ตอนนี้มันไม่ใช่แค่วัตถุอย่างที่คุณบอกได้

02:14.181 --> 02:16.349
นั่นคือวัตถุที่เป็นรูปธรรม

02:16.349 --> 02:21.430
เป็นวัตถุที่มีคีย์ชื่อ โดยที่ประเภทจะต้องเป็นสตริง

02:21.430 --> 02:24.700
และคีย์อายุโดยประเภทต้องเป็นตัวเลข

02:24.700 --> 02:27.116
และอันที่จริง นี่อาจทำให้สับสนได้

02:27.116 --> 02:31.100
เห็นได้ชัดว่านี่ดูเหมือนวัตถุ JavaScript

02:31.100 --> 02:33.980
วงเล็บปีกกา คู่ค่าคีย์.

02:33.980 --> 02:38.520
สิ่งสำคัญอันดับแรกที่ต้องดูตรงนี้คือเรามีเครื่องหมายอัฒภาคหลังแต่ละบรรทัด

02:38.520 --> 02:40.580
เราไม่มีสิ่งนั้นในวัตถุ JavaScript

02:40.580 --> 02:41.750
เรามีเครื่องหมายจุลภาคที่นี่

02:41.750 --> 02:45.940
และแน่นอนว่านี่ไม่ใช่วัตถุ JavaScript ที่นี่ซึ่งสร้างขึ้นที่ไหนสักแห่ง

02:45.940 --> 02:50.600
นี่คือประเภทวัตถุที่อนุมานโดย TypeScript และประเภทวัตถุเขียนเกือบจะเหมือนกับวัตถุ

02:50.600 --> 02:59.239
แต่แน่นอนว่าเราไม่มีคู่ค่าคีย์ที่นั่น มีแต่คู่ประเภทคีย์

02:59.239 --> 03:06.064
ประเภทของวัตถุมีไว้เพื่ออธิบายประเภทของวัตถุที่ถูกนำมาใช้ที่ไหนสักแห่ง

03:06.064 --> 03:07.653
เราสามารถเป็นแบบทั่วไปมากขึ้น

03:07.653 --> 03:13.640
ฉันสามารถกำหนดประเภทที่นี่ให้กับค่าคงที่ของวัตถุได้อย่างชัดเจน

03:13.640 --> 03:16.100
ออบเจกต์เป็นหนึ่งในประเภทในตัว เช่นเดียวกับตัวเลขและสตริง

03:16.100 --> 03:17.460
และตอนนี้ถ้าผมวางเมาส์เหนือสิ่งนี้

03:17.460 --> 03:26.430
เราจะเห็นบุคคลประเภทออบเจ็กต์ และตอนนี้ TypeScript สนใจแต่ข้อเท็จจริงที่ว่านี่คือประเภทอ็อบเจกต์เท่านั้น

03:26.430 --> 03:28.423
ถึงกระนั้น เราคอมไพล์สิ่งนี้หรือไม่

03:28.423 --> 03:39.770
เราได้รับข้อผิดพลาดนั้น เนื่องจาก TypeScript ยังคงวิเคราะห์โค้ดของเราและเห็นว่าเราพยายามเข้าถึงบางสิ่งที่ไม่มีอยู่ในนั้น แต่สิ่งสำคัญคือต้องเข้าใจว่าทุกอย่างเริ่มต้นด้วยประเภทวัตถุทั่วไปที่สุดนี้

03:39.770 --> 03:42.140
.

03:42.140 --> 03:44.660
แต่บ่อยครั้งที่คุณต้องการเจาะจงมากกว่านั้น

03:44.660 --> 03:47.623
คุณไม่เพียงแค่ต้องการทำงานกับวัตถุประเภททั่วไปนั้น

03:47.623 --> 03:50.284
คุณต้องการได้รับการสนับสนุนอย่างเต็มที่

03:50.284 --> 03:53.550
ตัวอย่างเช่น ตอนนี้ ถ้าฉันเพิ่มจุดตรงนี้และดูที่การเติมข้อความอัตโนมัติของฉัน

03:53.550 --> 03:55.570
IDE ของฉันก็ไม่ได้รับความช่วยเหลือใดๆ

03:55.570 --> 03:58.080
เลย

03:58.080 --> 04:00.303
เหตุผลก็คือทั้งหมดที่เราบอก

04:00.303 --> 04:05.860
IDE คือเรามีค่าที่นี่ในตัวบุคคลซึ่งเป็นวัตถุประเภท

04:05.860 --> 04:08.300
ตอนนี้เราได้รับข้อผิดพลาดจริง ๆ

04:08.300 --> 04:10.210
หากฉันพยายามเข้าถึงชื่อ

04:10.210 --> 04:12.270
ชื่ออยู่ที่นี่ใช่ไหม?

04:12.270 --> 04:14.120
แต่สิ่งที่เราบอก TypeScript

04:14.120 --> 04:16.601
ที่นี่คือเรามีวัตถุที่เราไม่ได้ให้ข้อมูลใด

04:16.601 --> 04:18.889
ๆ ของเรากับ TypeScript

04:18.889 --> 04:21.739
อันที่จริง TypeScript ไม่รองรับคุณสมบัติประเภทใด

04:21.739 --> 04:26.210
ๆ เพราะเราไม่ได้บอกอะไรเกี่ยวกับวัตถุ

04:26.210 --> 04:28.050
ดังนั้นเราควรเจาะจงมากขึ้น

04:28.050 --> 04:32.000
และเราเจาะจงมากขึ้นด้วยการตั้งค่าประเภทวัตถุเฉพาะ

04:32.000 --> 04:34.795
สิ่งที่ TypeScript อนุมานโดยอัตโนมัติ

04:34.795 --> 04:38.548
เราทำได้โดยเพิ่มวงเล็บปีกกาตรงนี้หลังเครื่องหมายโคลอน

04:38.548 --> 04:43.370
หลังชื่อ const หรือตัวแปร

04:43.370 --> 04:46.213
ดังนั้นที่นี่จะไม่สร้างวัตถุ JavaScript ใหม่

04:46.213 --> 04:48.460
สิ่งนี้จะถูกลบออกจากโค้ด JavaScript

04:48.460 --> 04:50.310
ที่คอมไพล์แล้ว

04:50.310 --> 04:52.643
นี่เป็นเพียงสัญกรณ์ TypeScript

04:52.643 --> 04:55.855
ของประเภทวัตถุพิเศษเท่านั้น

04:55.855 --> 05:01.434
ประเภทของวัตถุที่เราให้ข้อมูลบางอย่างเกี่ยวกับโครงสร้างของวัตถุ

05:01.434 --> 05:04.520
ตอนนี้ โดยการกำหนดเพียงคู่เปล่าของวงเล็บปีกกาเป็นประเภท

05:04.520 --> 05:07.440
เราก็ทำเช่นเดียวกันกับวัตถุ

05:07.440 --> 05:09.765
เราบอก TypeScript ว่านี่คือวัตถุบางอย่าง

05:09.765 --> 05:12.740
ตอนนี้เราสามารถเจาะจงได้มากขึ้น

05:12.740 --> 05:16.550
เราสามารถเพิ่มรายการค่าคีย์ได้ที่นี่ แต่ไม่ใช่ค่าคีย์

05:16.550 --> 05:19.694
แต่เป็นประเภทคีย์แทน

05:19.694 --> 05:25.091
ในที่นี้เราอาจกล่าวได้ว่าวัตถุที่ควรเก็บไว้ในบุคคลควรมีคุณสมบัติชื่อ

05:25.091 --> 05:31.140
และค่าของคุณสมบัติชื่อนั้นควรเป็นประเภทสตริง

05:31.140 --> 05:36.440
ในที่นี้เราจะอธิบายถึงประเภทของค่าที่จะเก็บไว้ในชื่อในที่สุด

05:36.440 --> 05:39.320
อย่างไรก็ตาม ตอนนี้ คุณเห็นว่าฉันได้รับข้อผิดพลาดที่นี่

05:39.320 --> 05:41.090
เพราะตอนนี้ฉันกำลังบอก

05:41.090 --> 05:43.489
TypeScript ว่าคนของฉันควรมีออบเจกต์ที่มีคู่ค่าคีย์เดียว

05:43.489 --> 05:48.626
โดยที่คีย์คือชื่อและค่าของคีย์นั้นคือสตริง แต่เราไม่ได้กำหนดออบเจกต์ที่มีคู่ค่าคีย์สองคู่

05:48.626 --> 05:52.730
.

05:52.730 --> 05:55.020
ชื่อซึ่งมีสายอักขระนั้นใช้ได้

05:55.020 --> 05:58.500
แต่อายุซึ่งมีตัวเลขและนั่นคงไม่เป็นไร

05:58.500 --> 06:01.140
ตรงนี้เราต้องปรับค่านี้โดยเพิ่มเครื่องหมายอัฒภาค

06:01.140 --> 06:06.300
แล้วเพิ่มคู่ค่าคีย์อื่นที่นี่ ซึ่งเราบอกว่าอายุควรเป็นตัวเลขประเภท

06:06.300 --> 06:09.670
ดังนั้นไม่ใช่ 30 ในที่นี้ ซึ่งอันที่จริงแล้ว TypeScript

06:09.670 --> 06:15.600
รองรับ โดยเราจำกัดไว้ที่หมายเลขเฉพาะหนึ่ง แต่จากนั้นเราจะพบปัญหาทันทีที่เราเปลี่ยนแปลง

06:15.600 --> 06:19.060
ในที่นี้ฉันแค่อยากจะบอกว่าอายุควรเป็นตัวเลข

06:19.060 --> 06:24.870
และตอนนี้เรากำลังกำหนด TypeScript เดียวกันกับที่สรุปไว้ก่อนหน้านี้อย่างชัดเจน

06:24.870 --> 06:26.900
ตามที่คุณได้เรียนรู้ นั่นไม่ใช่แนวปฏิบัติที่ดี

06:26.900 --> 06:29.940
แต่เพื่อให้เข้าใจประเภทวัตถุ ฉันต้องการทำที่นี่

06:29.940 --> 06:32.315
นี่เป็นสิ่งที่คุณสามารถทำได้

06:32.315 --> 06:40.440
เป็นการดีกว่าที่จะให้ TypeScript สรุปสิ่งนี้เหมือนที่เราทำก่อนหน้านี้

06:40.440 --> 06:42.351
ทีนี้ เพื่อแสดงสิ่งที่น่าสนใจ

06:42.351 --> 06:45.450
ถ้าฉันเปลี่ยนกลับไปใช้โค้ดย่อยที่เหมาะสมเหล่านี้

06:45.450 --> 06:49.920
ซึ่งเรากำหนดประเภท TypeScript ไว้อย่างชัดเจนว่าจะสามารถอนุมานได้

06:49.920 --> 06:54.920
ถ้าเราคอมไพล์โค้ดนี้ แน่นอนว่ามันใช้งานได้

06:55.180 --> 06:56.900
เราสามารถเข้าถึงคุณสมบัติชื่อ

06:56.900 --> 07:01.220
แต่ถ้าเราดูที่แอพ js เราเห็นว่าการกำหนดประเภทนี้ถูกลบออกที่นี่

07:01.220 --> 07:03.417
และแน่นอนว่าควรเป็นสิ่งที่คาดหวัง

07:03.417 --> 07:06.290
ดังที่ฉันได้กล่าวไปแล้ว การกำหนดประเภทและประเภทไม่ได้เป็นส่วนหนึ่งของ

07:06.290 --> 07:08.120
JavaScript

07:08.120 --> 07:09.460
เป็น TypeScript เท่านั้น

07:09.460 --> 07:12.840
ฉันแค่ต้องการแสดงสิ่งนี้อีกครั้งเพื่อให้ชัดเจนว่าไวยากรณ์นี้ไม่ได้สร้างวัตถุ

07:12.840 --> 07:16.485
JavaScript ซึ่งอยู่ที่ไหนสักแห่งในโค้ดของเรา

07:16.485 --> 07:21.263
นี่เป็นเพียงการแสดงประเภทวัตถุของ TypeScript ที่ช่วยให้

07:21.263 --> 07:25.900
TypeScript เข้าใจวัตถุที่คุณกำลังทำงานด้วย

07:25.900 --> 07:29.950
แน่นอนว่าไวยากรณ์ที่ดีกว่าคือไวยากรณ์นี้ตามที่คุณได้เรียนรู้
