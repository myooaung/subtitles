WEBVTT

00:02.150 --> 00:03.290
Instruktor: Możesz również

00:03.290 --> 00:05.890
zaimplementować dziedziczenie w interfejsach.

00:05.890 --> 00:10.890
Powiedzmy, że mamy kolejny interfejs, Named, i jest to interfejs,

00:11.100 --> 00:13.600
który faktycznie zapewnia, że

00:13.600 --> 00:16.420
mamy właściwość name.

00:16.420 --> 00:18.510
Więc teraz, tutaj w Person, moglibyśmy

00:18.510 --> 00:20.950
zaimplementować Greetable i Named, aby być zmuszonym

00:20.950 --> 00:24.110
do posiadania zarówno metody greet, jak i nazwy.

00:24.110 --> 00:25.820
To jest coś, co moglibyśmy zrobić.

00:25.820 --> 00:30.200
Albo, jeśli wiemy, że Greetable myśli, że obiekty greetable zawsze muszą

00:30.200 --> 00:31.810
mieć nazwę, moglibyśmy upewnić

00:31.810 --> 00:34.500
się, że ten interfejs Greetable faktycznie

00:34.500 --> 00:36.970
rozszerza interfejs Named, tak że razem

00:36.970 --> 00:40.120
tworzą nowy interfejs, który zmusza każdy obiekt

00:40.120 --> 00:43.460
oparty na Greetable do posiadania metody greet, ale także

00:43.460 --> 00:46.150
do posiadania nazwy.

00:46.150 --> 00:48.840
I aby to zrobić, możemy dodać extends tutaj,

00:48.840 --> 00:52.700
na interfejsie również, i rozszerzamy Named.

00:52.700 --> 00:55.760
Teraz dlatego, jak powiedziałem, tworzy to nowy interfejs,

00:55.760 --> 00:58.330
który jest w końcu interfejsem, który zmusza nas do

00:58.330 --> 01:00.760
posiadania metody greet, ale nie tylko to, zmusza

01:00.760 --> 01:03.140
nas również do posiadania wszystkiego, co definiuje

01:03.140 --> 01:04.910
interfejs Named.

01:04.910 --> 01:07.150
W tym przypadku właściwość name.

01:07.150 --> 01:09.450
Więc jeśli usunąłbym tutaj name, to już

01:09.450 --> 01:12.120
dostałbym błąd, ponieważ ta klasa teraz niepoprawnie

01:12.120 --> 01:14.860
implementuje interfejs Greetable, ponieważ

01:14.860 --> 01:17.600
brakuje właściwości name.

01:17.600 --> 01:20.900
Tak więc również w ten sposób możemy łączyć interfejsy.

01:20.900 --> 01:23.410
Dlaczego mielibyśmy podzielić interfejs w ten sposób?

01:23.410 --> 01:25.600
Cóż, może masz aplikację, w której na niektórych

01:25.600 --> 01:27.810
obiektach chcesz tylko zmusić je do posiadania

01:27.810 --> 01:31.120
nazwy, a nie metody greet, podczas gdy na innych obiektach

01:31.120 --> 01:34.630
potrzebujesz zarówno greet, jak i name.

01:34.630 --> 01:36.830
Dzięki temu podziałowi jest to możliwe.

01:36.830 --> 01:40.630
Niektóre obiekty, lub niektóre klasy mogą po prostu implementować Named,

01:40.630 --> 01:42.590
a inne mogą implementować Greetable

01:42.590 --> 01:45.990
i są zmuszone do posiadania zarówno powitania, jak i nazwy.

01:45.990 --> 01:48.490
Tak więc rozszerzanie interfejsów jest możliwe.

01:48.490 --> 01:50.880
I tam też można przedłużyć więcej niż jeden.

01:50.880 --> 01:53.380
Możesz więc połączyć wiele interfejsów

01:53.380 --> 01:55.060
w jeden interfejs.

01:55.060 --> 01:58.570
Moglibyśmy scalić kolejny interfejs, gdybyśmy go mieli.

01:58.570 --> 02:00.860
Po prostu oddzielone przecinkiem.

02:00.860 --> 02:03.570
Pamiętajmy, że dla klas nie było to możliwe.

02:03.570 --> 02:05.710
Kiedy używasz klas w dziedziczeniu, możesz

02:05.710 --> 02:07.920
dziedziczyć tylko z jednej klasy.

02:07.920 --> 02:10.600
Nie można dziedziczyć z wielu klas.

02:10.600 --> 02:12.490
Dla interfejsów, które są różne.

02:12.490 --> 02:14.760
W przypadku interfejsów, rzeczywiście można

02:14.760 --> 02:16.920
dziedziczyć z wielu interfejsów, ponieważ

02:16.920 --> 02:18.920
w końcu wszystkie one są po prostu łączone

02:18.920 --> 02:21.430
razem, a w tej czystej funkcji TypeScript, która

02:21.430 --> 02:23.010
w rzeczywistości nie jest tłumaczona

02:23.010 --> 02:24.800
na JavaScript, jak zobaczysz, możemy

02:24.800 --> 02:27.080
zatem złamać zasady ustanowione dla klas

02:27.080 --> 02:31.733
JavaScript i rozszerzyć wiele interfejsów.
