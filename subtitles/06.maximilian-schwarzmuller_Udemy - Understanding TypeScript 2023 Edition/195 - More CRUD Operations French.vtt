WEBVTT

00:02.150 --> 00:03.930
Instructeur : Nous avons donc ajouté notre première

00:03.930 --> 00:06.120
requête POST, nous sommes capables de créer une TODO.

00:06.120 --> 00:07.250
Maintenant on a plus de routes.

00:07.250 --> 00:10.170
Nous avons également obtenu une route pour desservir tous les TODOS que nous avons créés.

00:10.170 --> 00:11.750
Maintenant, soyez conscient que vos

00:11.750 --> 00:14.160
TODOS seront réinitialisées à chaque fois que vous modifiez

00:14.160 --> 00:16.630
et sauvegardez votre code car cela redémarre votre serveur

00:16.630 --> 00:18.920
et cela perd tout ce qui était stocké en mémoire et nous

00:18.920 --> 00:21.330
ne gérons nos TODOS qu'en mémoire.

00:21.330 --> 00:23.560
C'est simplement quelque chose que nous avons ici dans l'application

00:23.560 --> 00:24.930
factice, dans une application réelle,

00:24.930 --> 00:28.200
vous stockeriez bien sûr cela dans une vraie base de données, vous le récupéreriez à partir

00:28.200 --> 00:30.280
de là et ainsi de suite et donc cela survivrait.

00:30.280 --> 00:35.060
Néanmoins ici, nous pouvons créer une nouvelle fonction, getTodos et ce sera

00:35.060 --> 00:38.030
un RequestHandler ici, donc vous n'avez pas à définir

00:38.030 --> 00:39.740
les types sur tous les paramètres

00:39.740 --> 00:42.330
individuellement.

00:42.330 --> 00:46.120
Et puis là, je veux simplement renvoyer une réponse où

00:46.120 --> 00:49.560
je renvoie des données JSON où j'ai mes todos et là,

00:49.560 --> 00:52.420
je veux juste atteindre mon tableau de TODOs

00:52.420 --> 00:54.330
et le renvoyer au client, et

00:54.330 --> 00:56.530
ça peut déjà être tout.

00:56.530 --> 00:57.810
Bien sûr, vous pouvez modifier

00:57.810 --> 00:59.640
cela, peut-être que vous voulez avoir une

00:59.640 --> 01:03.120
logique différente, peut-être que vous voulez trier les TODOS en premier ou

01:03.120 --> 01:06.690
quelque chose comme ça, mais dans sa forme la plus simple, c'est déjà tout ce dont

01:06.690 --> 01:10.530
nous avons besoin ici, il renvoie nos TODOS, donc une fonction très simple.

01:10.530 --> 01:13.240
Dans les voies TODOS, il ne nous reste plus qu'à connecter ceci.

01:13.240 --> 01:17.680
Alors importons getTodos de notre contrôleur et connectons-le

01:17.680 --> 01:20.640
ici avec cette route.

01:20.640 --> 01:23.430
Et avec cela, si nous sauvegardons maintenant, nous

01:23.430 --> 01:25.250
pouvons déjà le voir en action.

01:25.250 --> 01:29.860
Si nous revenons en arrière et créons une nouvelle requête,

01:29.860 --> 01:34.860
une requête GET, vers http://localhost:3000/todos/ et que nous

01:39.400 --> 01:41.410
envoyons ceci, nous obtenons

01:41.410 --> 01:44.400
un tableau vide, pourquoi ?

01:44.400 --> 01:46.750
Eh bien, j'ai dit que les TODOS seraient effacées chaque fois

01:46.750 --> 01:48.010
que nous modifierions le code et

01:48.010 --> 01:49.750
que le serveur redémarrerait par conséquent,

01:49.750 --> 01:51.470
donc nous devrions créer une nouvelle TODO

01:51.470 --> 01:54.110
maintenant sans redémarrer le serveur entre-temps.

01:54.110 --> 01:57.360
Et si nous avons créé cette TODO et que nous obtenons maintenant

01:57.360 --> 02:01.770
nos TODOS, nous voyons cette TODO créée avec l'ID, le numéro de série 9811

02:01.770 --> 02:04.380
et ainsi de suite, ici aussi.

02:04.380 --> 02:05.960
Donc ça marche déjà.

02:05.960 --> 02:08.980
Maintenant, puisque nous y sommes, travaillons également sur le patch et

02:08.980 --> 02:10.590
l'effacement et, bien sûr, n'hésitez pas

02:10.590 --> 02:12.680
à trouver une certaine logique par vous-même.

02:12.680 --> 02:14.970
En fin de compte, vous avez maintenant tous les éléments de base dont

02:14.970 --> 02:16.130
vous avez besoin pour cela.

02:16.130 --> 02:18.480
Bien sûr, nous allons maintenant le faire ensemble.

02:19.390 --> 02:21.570
Donc ici maintenant sur la demande de patch,

02:21.570 --> 02:24.350
ajoutons une nouvelle fonction de contrôleur.

02:24.350 --> 02:29.350
exporter const updateTodo, qui est de type RequestHandler et devrait contenir

02:30.660 --> 02:34.680
une fonction dans ce format que nous connaissons déjà.

02:34.680 --> 02:37.310
Et là, l'objectif est d'extraire de la demande

02:37.310 --> 02:40.630
entrante les données relatives à la nouvelle TODO, puis

02:40.630 --> 02:44.140
de mettre à jour la TODO avec ces nouvelles données.

02:44.140 --> 02:47.240
Maintenant, veuillez noter que dans le cadre de notre itinéraire ici,

02:47.240 --> 02:48.900
nous avons un segment dynamique.

02:48.900 --> 02:51.140
Nous avons ce segment d'identification.

02:51.140 --> 02:54.610
C'est donc quelque chose que nous pourrons extraire de l'URL,

02:54.610 --> 02:58.750
une valeur concrète pour ce segment dynamique peut être extraite.

02:58.750 --> 03:02.147
Donc ici, sur notre requête entrante, vous pouvez obtenir le todoId,

03:03.172 --> 03:07.987
à partir de nos paramètres de requête. id,. id, parce que c'est le nom que j'ai choisi ici.

03:07.987 --> 03:11.660
Si vous avez choisi un nom différent ici, vous devez utiliser un

03:11.660 --> 03:13.060
nom différent là-bas.

03:13.060 --> 03:15.810
Maintenant, nous n'avons pas de type de soutien ici, non ?

03:15.810 --> 03:18.410
Params est de type any.

03:18.410 --> 03:20.450
Maintenant, parce que les types peuvent

03:20.450 --> 03:23.400
analyser cette chaîne et comprendre ce qu'il y a dedans.

03:23.400 --> 03:25.460
Ainsi, pour obtenir de meilleurs types

03:25.460 --> 03:28.920
de support, nous pouvons en fait utiliser le RequestHandler ici

03:28.920 --> 03:32.880
est un type générique et nous pouvons ajouter des parenthèses angulaires

03:32.880 --> 03:35.880
et indiquer à TypeScript les paramètres qu'il aura.

03:35.880 --> 03:37.800
Il suffit de le définir comme un objet et

03:37.800 --> 03:39.300
nous avons maintenant une carte

03:39.300 --> 03:42.180
clé-valeur de tous les parents que nous avons dans l'URL.

03:42.180 --> 03:43.830
Ainsi, par exemple, nous avons un paramètre

03:43.830 --> 03:46.730
d'identification qui, à la fin, contient une chaîne.

03:46.730 --> 03:48.610
C'est quelque chose que nous pouvons ajouter ici et

03:48.610 --> 03:50.230
maintenant vous verrez que nous avons la complétion

03:50.230 --> 03:52.560
automatique et TypeScript sait que ce sera une chaîne.

03:52.560 --> 03:55.520
C'est donc mieux, en utilisant ce type générique.

03:55.520 --> 03:58.640
Maintenant, nous avons l'ID, nous avons également besoin de quelque

03:58.640 --> 04:01.050
chose du corps de la demande, pour être précis, nous avons

04:01.050 --> 04:03.560
besoin du nouveau texte du corps de la demande.

04:03.560 --> 04:08.130
Ainsi, le texte mis à jour peut être récupéré à partir du corps de la demande

04:08.130 --> 04:11.700
et, une fois de plus, utilisons le typage pour préciser

04:11.700 --> 04:14.100
qu'il y aura une propriété texte dans

04:14.100 --> 04:16.910
le corps et qu'elle sera de type String.

04:16.910 --> 04:19.750
Et récupérons le texte par la suite.

04:19.750 --> 04:22.373
Et maintenant nous pouvons mettre à jour le TODO dans notre tableau TODOS là-haut.

04:23.830 --> 04:27.720
Pour cela, trouvons l'index de la TODO que nous voulons mettre

04:27.720 --> 04:28.710
à jour.

04:28.710 --> 04:30.808
todoIndex, en accédant à TODOS, et avec

04:30.808 --> 04:33.760
findIndex, nous pouvons exécuter une certaine logique

04:33.760 --> 04:36.090
sur chaque élément du tableau TODOS.

04:36.090 --> 04:38.060
Et là, nous regardons chaque todo et

04:38.060 --> 04:40.010
si todo id est égal à todoId que nous

04:40.010 --> 04:44.300
avons ici, nous savons que c'est le TODO que nous voulons mettre à jour.

04:44.300 --> 04:47.140
Si, pour une raison ou une autre, ce chiffre est inférieur

04:47.140 --> 04:50.550
à un, cela signifie que nous n'avons pas trouvé ce TODO, donc si ce

04:50.550 --> 04:52.610
chiffre est inférieur à zéro, nous savons

04:52.610 --> 04:56.960
que quelque chose s'est mal passé et dans ce cas, je vais lancer une nouvelle erreur

04:56.960 --> 04:59.630
en disant : "Impossible de trouver le todo !

04:59.630 --> 05:03.633
Et cela devrait alors déclencher notre intergiciel de gestion des erreurs

05:04.760 --> 05:06.130
par défaut ici.

05:06.130 --> 05:08.633
Maintenant, si nous passons ce contrôle if, nous

05:09.870 --> 05:12.450
avons trouvé la TODO, et nous pouvons simplement

05:12.450 --> 05:15.040
mettre à jour la TODO à cet indice dans notre tableau

05:15.040 --> 05:18.960
TODOS pour en faire une nouvelle TODO, où nous gardons l'ancien id.

05:18.960 --> 05:23.270
Donc là où nous accédons à TODOS, todoIndex. id, donc on accède à l'ancien ID et on le stocke,

05:23.270 --> 05:27.030
mais le texte ici que

05:27.030 --> 05:29.490
j'ai défini, bien sûr on ne l'assigne

05:29.490 --> 05:31.713
pas comme ça.

05:32.870 --> 05:34.570
Mais le texte que nous avons défini ici, est maintenant le texte mis à jour.

05:34.570 --> 05:38.750
Cela remplace le TODO ici, et ensuite nous pouvons

05:38.750 --> 05:41.340
renvoyer une réponse, avec un

05:41.340 --> 05:45.280
message de, Mise à jour, par exemple.

05:45.280 --> 05:47.053
Et où nous ajoutons également le

05:47.990 --> 05:51.470
updatedTodo à la réponse sortante, et le rendons égal à, eh bien,

05:51.470 --> 05:55.090
TODOS todoIndex, qui contient maintenant la nouvelle valeur.

05:55.090 --> 05:59.090
C'est quelque chose que nous appelons faire ici dans notre logique de mise à jour,

05:59.090 --> 06:02.430
bien sûr, un peu de code factice parce que nous travaillons toujours

06:02.430 --> 06:03.960
avec ce tableau TODOS en mémoire,

06:03.960 --> 06:07.150
mais cela montre comment nous utilisons TypeScript ici, et c'est

06:07.150 --> 06:09.060
la chose principale.

06:09.060 --> 06:11.100
Essayons maintenant cette fonction de mise à jour.

06:11.100 --> 06:13.620
Pour cela, nous pouvons retourner à Postman, et à la fin,

06:13.620 --> 06:16.260
maintenant je veux envoyer une requête PATCH, parce que

06:16.260 --> 06:19.960
dans les routes, nous attendons cette requête de patch pour cette route.

06:19.960 --> 06:23.460
Et en parlant de ça, nous devrions peut-être aussi connecter

06:23.460 --> 06:24.293
cette route à cette

06:24.293 --> 06:26.490
fonction de contrôleur d'abord.

06:26.490 --> 06:28.850
Donc, allons dans le fichier des routes,

06:28.850 --> 06:33.420
importons updateTodo et établissons cette connexion ici.

06:33.420 --> 06:35.590
Et ensuite, nous pouvons procéder et envoyer cette demande.

06:35.590 --> 06:38.570
Revenons maintenant à Postman, PATCH est ce

06:38.570 --> 06:41.890
que nous voulons envoyer et ensuite c'est http://localhost:3000/todos

06:41.890 --> 06:46.320
et maintenant l'idée du TODO que nous voulons mettre à jour comme

06:46.320 --> 06:49.430
partie de l'URL.

06:49.430 --> 06:50.573
Maintenant, puisque nous avons sauvegardé quelque

06:51.500 --> 06:54.970
chose, puisque nous avons sauvegardé quelques changements, notre serveur a redémarré, donc tous les TODOS seront perdus de toute façon.

06:54.970 --> 06:58.890
Donc, tout d'abord, renvoyons cette requête POST pour

06:58.890 --> 07:01.150
créer une nouvelle TODO.

07:01.150 --> 07:02.450
Et là, on a l'ID de cette TODO.

07:02.450 --> 07:05.170
Maintenant nous pouvons ajouter cet id ici à cette URL.

07:05.170 --> 07:08.800
Et je vais également ajouter un corps qui devrait être de type JSON, où nous définissons

07:08.800 --> 07:11.780
ces nouvelles données que nous voulons envoyer au serveur.

07:11.780 --> 07:15.560
Maintenant, gardez à l'esprit que dans notre contrôleur de

07:15.560 --> 07:18.570
mise à jour, je cherche un champ nommé text, dans

07:18.570 --> 07:20.970
le corps de la requête entrante.

07:20.970 --> 07:22.900
Donc, nous devrions encore une fois le fournir ici

07:22.900 --> 07:24.580
dans les données JSON que nous envoyons.

07:24.580 --> 07:26.690
Finir le cours en un mois, c'est

07:26.690 --> 07:29.440
peut-être notre nouveau texte.

07:29.440 --> 07:31.520
Si nous l'envoyons maintenant, nous voyons qu'il a été mis à jour.

07:31.520 --> 07:35.210
Et si j'obtiens maintenant tous les TODOS, nous voyons aussi qu'il

07:35.210 --> 07:37.180
n'y a toujours qu'un seul TODO, mais

07:37.180 --> 07:39.430
le texte a simplement été modifié.

07:39.430 --> 07:41.623
Maintenant que cela fonctionne, nous sommes également en mesure de mettre à jour le TODO.

07:42.950 --> 07:46.470
Vérifions également ce qui se passe si j'ai un id qui n'existe pas,

07:46.470 --> 07:48.780
par exemple, en supprimant le dernier chiffre

07:48.780 --> 07:50.620
ici, alors j'obtiens, Could not find

07:50.620 --> 07:53.430
todo dans ma réponse d'erreur de type 500.

07:53.430 --> 07:57.670
Donc ça aussi ça se présente bien.

07:57.670 --> 07:59.660
Comme dernière étape, ajoutons une fonction pour supprimer une TODO.

07:59.660 --> 08:03.800
Ainsi, dans le dossier des contrôleurs, je vais exporter une constante

08:03.800 --> 08:07.210
nommée deleteTodo, qui est de type RequestHandler.

08:07.210 --> 08:11.460
Et encore une fois, on a notre requête, notre réponse, et ensuite

08:11.460 --> 08:14.040
la fonction suivante ici.

08:14.040 --> 08:17.320
Et ici, je veux maintenant trouver le TODO

08:17.320 --> 08:20.270
et simplement le supprimer.

08:20.270 --> 08:21.543
Pour cela, nous pouvons en fait

08:22.380 --> 08:25.090
copier ce code où nous obtenons l'ID de la TODO et ensuite l'index.

08:25.090 --> 08:29.360
Débarrassez-vous de cette ligne où nous extrayons le texte mis à jour parce que pour

08:29.360 --> 08:32.210
une requête DELETE, il n'y aura pas de corps de requête,

08:32.210 --> 08:35.660
mais nous avons besoin de l'identifiant de la TODO qui fait partie

08:35.660 --> 08:37.400
de notre route de l'URL.

08:37.400 --> 08:40.340
Ensuite, nous trouvons l'index et une fois que nous l'avons

08:40.340 --> 08:43.530
obtenu, nous pouvons aller dans les TODOs, appeler la méthode

08:43.530 --> 08:47.350
splice et supprimer le todo à l'index todoIndex, et seulement ce todo.

08:47.350 --> 08:51.620
Et par la suite, nous pouvons renvoyer une réponse où

08:51.620 --> 08:54.040
nous disons, Todo supprimé ! juste comme ça.

08:54.040 --> 08:58.490
Ça pourrait être notre logique de suppression.

08:58.490 --> 08:59.380
Maintenant il est temps

08:59.380 --> 09:01.760
de le connecter, donc dans le dossier routes, importons deleteTodo

09:01.760 --> 09:04.560
depuis les contrôleurs TODOs et connectons-le ici.

09:04.560 --> 09:07.440
Et avec cette connexion, si nous sauvegardons maintenant, encore une

09:08.340 --> 09:09.963
fois, nous devons ajouter un TODO parce

09:11.120 --> 09:14.370
que tous les TODO sont effacés à chaque redémarrage du serveur, donc le voici.

09:14.370 --> 09:16.720
Copiez cette identification.

09:16.720 --> 09:20.550
Et envoyons maintenant cette requête DELETE.

09:20.550 --> 09:22.680
Donc une nouvelle requête DELETE ici, vers

09:22.680 --> 09:24.980
http:/localhost:3000/todos/cette id.

09:24.980 --> 09:27.160
Aucun corps n'a besoin d'être ajouté.

09:27.160 --> 09:32.160
Cliquez sur Envoyer et ça marche.

09:32.800 --> 09:34.880
Si je l'envoie à nouveau, nous obtenons l'erreur "Impossible

09:34.880 --> 09:37.180
à trouver" parce que nous venons de le supprimer.

09:37.180 --> 09:39.950
Et si nous obtenons tous les TODOS, ça devrait être

09:39.950 --> 09:41.570
un tableau vide et ceci.

09:41.570 --> 09:42.723
Donc, cela fonctionne maintenant

09:42.723 --> 09:45.550
et c'est essentiellement une fonctionnalité CRUD, ajoutée

09:45.550 --> 09:46.750
avec TypeScript ici dans

09:46.750 --> 09:49.550
cette simple application Node et Express.

09:49.550 --> 09:50.990
Bien sûr, il s'agit là d'une application assez triviale,

09:50.990 --> 09:52.940
mais elle nous montre déjà une certaine utilisation de TypeScript.

09:52.940 --> 09:56.060
Il nous montre que nous écrivons du code qui devrait vous sembler familier

09:56.060 --> 09:58.870
si vous travaillez sur le reste de ce cours, et que nous utilisons

09:58.870 --> 10:00.480
toutes les fonctionnalités que vous

10:00.480 --> 10:02.000
avez apprises.

10:02.000 --> 10:04.750
Et tout comme dans la section React, c'est tout ce qui est important.

10:04.750 --> 10:07.610
Vous pouvez utiliser tout ce que vous avez appris

10:07.610 --> 10:10.110
sur TypeScript ici aussi, car il est compilé

10:10.110 --> 10:11.520
en code JavaScript normal

10:11.520 --> 10:14.990
à la fin, que nous servons ensuite.
