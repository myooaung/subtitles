WEBVTT

00:02.220 --> 00:03.053
-: Andiamo avanti.

00:03.053 --> 00:04.950
Abbiamo qui l'opzione outFile, ma questa

00:04.950 --> 00:07.730
opzione non è importante per noi in questo momento, non funzionerà

00:07.730 --> 00:09.440
in questo momento.

00:09.440 --> 00:12.340
Più interessanti per noi sono outDIR e rootDir.

00:12.340 --> 00:14.720
Più il progetto diventa grande,

00:14.720 --> 00:17.640
più si desidera organizzare i file.

00:17.640 --> 00:19.690
In genere, non si vuole che i file

00:19.690 --> 00:21.770
si trovino qui, nella cartella

00:21.770 --> 00:24.120
principale del progetto.

00:24.120 --> 00:26.580
Invece, quello che spesso si vede nei progetti è che

00:26.580 --> 00:28.080
c'è una cartella di origine e una

00:28.080 --> 00:29.790
cartella di distribuzione, poi un'altra

00:29.790 --> 00:31.240
e un'altra ancora.

00:31.240 --> 00:35.690
Quindi, la cartella dist ha il compito di contenere tutto l'output, quindi tutti

00:35.690 --> 00:37.800
i file JavaScript, per esempio.

00:37.800 --> 00:41.380
E la cartella source potrebbe contenere tutti i nostri file TypeScript.

00:41.380 --> 00:44.643
Quindi possiamo spostare i file TypeScript nella cartella

00:44.643 --> 00:47.430
dei sorgenti e se ora cancello la cartella JavaScript,

00:47.430 --> 00:49.891
abbiamo il problema che se compiliamo tutto,

00:49.891 --> 00:53.167
questi file TypeScript vengono compilati perché TypeScript,

00:53.167 --> 00:55.768
il compilatore, guarda nelle sottocartelle,

00:55.768 --> 01:00.050
ma l'output si trova accanto ai nostri file di input.

01:00.050 --> 01:02.760
E questo è qualcosa che possiamo controllare con outDir,

01:02.760 --> 01:03.660
per esempio.

01:03.660 --> 01:07.117
Se impostiamo outDir, possiamo dire ai tipi con il compilatore

01:07.117 --> 01:10.900
dove deve essere memorizzato il file creato.

01:10.900 --> 01:13.580
Potremmo impostarlo su dist.

01:13.580 --> 01:17.037
Ora, se si esegue chia seed, si vedrà che i file JavaScript,

01:17.037 --> 01:19.560
in effetti, non sono collocati nella

01:19.560 --> 01:21.500
cartella source, ma nella cartella

01:21.500 --> 01:23.170
dist.

01:23.170 --> 01:26.340
Ora dobbiamo solo regolare il nostro indice. html e lì puntare a

01:26.340 --> 01:31.630
dist/app. js e dist/analytics.

01:31.630 --> 01:31.630
js

01:31.630 --> 01:33.880
o in alternativa spostare l'indice. nella cartella dist, ma

01:33.880 --> 01:36.172
in questo caso il nostro server def non funzionerebbe

01:36.172 --> 01:37.550
più correttamente.

01:37.550 --> 01:39.875
Quindi regoliamo queste importazioni

01:39.875 --> 01:44.140
e otteniamo un'applicazione ancora funzionante, come vedete,

01:44.140 --> 01:45.270
ma con una struttura

01:45.270 --> 01:48.480
di progetto più pulita.

01:48.480 --> 01:49.650
Ora, la cosa buona è che

01:49.650 --> 01:51.530
se abbiamo una sottocartella qui, una

01:51.530 --> 01:52.980
cartella analytics, diciamo,

01:52.980 --> 01:54.893
e abbiamo il nostro file TypeScript lì

01:54.893 --> 01:57.350
dentro, se ricompiliamo, e non importa se lo facciamo

01:57.350 --> 02:00.373
con questo comando o con la modalità watch, questa struttura

02:00.373 --> 02:03.300
di cartelle che abbiamo nella cartella sorgente sarà replicata

02:03.300 --> 02:08.813
nella cartella dist, il che è, ovviamente, molto comodo perché assicura che si possano importare i file fondamentalmente

02:08.813 --> 02:16.640
come li importeremmo nella cartella sorgente, in modo che la struttura impostata lì sia mantenuta.

02:16.640 --> 02:18.800
Ora si può anche impostare la directory

02:18.800 --> 02:21.230
principale e impostarla specificamente sulla

02:21.230 --> 02:23.800
cartella in cui sono memorizzati i file, come in

02:23.800 --> 02:25.202
questo esempio, source,

02:25.202 --> 02:28.560
per assicurarsi che i tipi di compilatore non guardino nelle

02:28.560 --> 02:30.030
nostre cartelle.

02:30.030 --> 02:31.530
Anche questo si può fare con

02:31.530 --> 02:34.003
l'opzione include laggiù, giusto?

02:34.870 --> 02:36.007
Ma con la cartella

02:36.007 --> 02:38.781
principale, i tipi di compilatore non guardano

02:38.781 --> 02:41.450
solo alla cartella dei sorgenti, ma si assicurano

02:41.450 --> 02:44.700
anche che la struttura del progetto, impostata lì,

02:44.700 --> 02:45.680
sia conservata

02:45.680 --> 02:47.880
in una cartella dist.

02:47.880 --> 02:50.020
Ora, come avete visto, lo faceva per impostazione

02:50.020 --> 02:51.820
predefinita, ma tenete presente che prima

02:51.820 --> 02:54.280
avrebbe incluso tutti i file TypeScript qui, tutti i sorgenti

02:54.280 --> 02:55.699
iniziali, quindi, per esempio, se

02:55.699 --> 02:58.830
commentate temporaneamente questo, se avessimo una cartella utente qui

02:58.830 --> 03:03.280
al livello superiore con un utente.

03:03.280 --> 03:03.280
ts

03:03.280 --> 03:06.170
in cui abbiamo un nome utente, diciamo Max, quindi

03:06.170 --> 03:07.750
se compiliamo questo file,

03:07.750 --> 03:09.752
vedrete la cartella utente nella

03:09.752 --> 03:11.420
cartella dist.

03:11.420 --> 03:13.810
E ora anche la cartella dei sorgenti è inclusa,

03:13.810 --> 03:17.200
perché ora abbiamo un file dattiloscritto a un livello superiore

03:17.200 --> 03:19.950
e quindi il compilatore dattiloscritto pensa che l'intero

03:19.950 --> 03:21.780
progetto sia di nuovo l'input e replica

03:21.780 --> 03:25.970
la struttura delle cartelle che trova nella cartella dist.

03:25.970 --> 03:28.960
Naturalmente, questo non è ciò che vorremmo

03:28.960 --> 03:30.120
ed è qui che l'opzione

03:30.976 --> 03:32.660
rootDir ci aiuta.

03:32.660 --> 03:34.020
Ora, se impostiamo questa opzione

03:34.020 --> 03:35.950
su source, anche se avessimo altre cartelle

03:35.950 --> 03:38.630
con file TypeScript a livello di radice, queste non verrebbero

03:38.630 --> 03:40.400
incluse nell'output e la stessa cartella

03:40.400 --> 03:41.830
source non finirebbe improvvisamente

03:41.830 --> 03:43.780
lì.

03:43.780 --> 03:46.480
Spesso si impostano sia rootDir che outDir per

03:46.480 --> 03:49.650
avere ben chiaro dove si trovano i file di input e dove

03:49.650 --> 03:52.040
vengono generati i file di output.

03:52.040 --> 03:54.870
Se andiamo avanti, possiamo ignorare il composito.

03:54.870 --> 03:57.010
Possiamo dare un'occhiata a removeComments.

03:57.010 --> 03:58.780
Dovrebbe essere abbastanza

03:58.780 --> 04:00.850
chiaro che se si imposta questo parametro,

04:00.850 --> 04:04.450
qualsiasi commento presente nei file TypeScript sarà

04:04.450 --> 04:08.000
rimosso nei file JavaScript compilati.

04:08.000 --> 04:12.970
Quindi se commento questo e compilo il mio codice, vedrete un'applicazione.

04:12.970 --> 04:12.970
ts, ho un commento.

04:12.970 --> 04:14.990
Un'applicazione. js, non c'è.

04:14.990 --> 04:18.330
È quindi possibile farlo per rendere i file più piccoli e l'impegno

04:18.330 --> 04:20.950
potrebbe essere un'opzione piacevole.

04:20.950 --> 04:23.820
Si può anche impostare noEmit se non si vuole generare

04:23.820 --> 04:25.600
alcun file JavaScript.

04:25.600 --> 04:27.130
Ora, potrebbe sembrare strano,

04:27.130 --> 04:29.190
perché questa è l'idea di TypeScript, ma

04:29.190 --> 04:30.700
se si vuole solo controllare

04:30.700 --> 04:32.420
se i file sono corretti, ma non si vuole

04:32.420 --> 04:35.030
scrivere tutti questi file di output, per risparmiare

04:35.030 --> 04:37.680
tempo, per esempio, in un progetto più grande, si può

04:37.680 --> 04:39.120
impostare questo valore su

04:39.120 --> 04:41.792
"true", per far sì che i tipi di compilatore controllino

04:41.792 --> 04:45.460
i file e segnalino ogni potenziale errore, senza creare effettivamente

04:45.460 --> 04:47.903
un file di output.

04:47.903 --> 04:50.490
importHelpers non è molto importante per noi,

04:50.490 --> 04:52.065
possiamo ignorarlo.

04:52.065 --> 04:54.570
downlevelIteration è un'opzione avanzata.

04:54.570 --> 04:57.150
È interessante quando si compila il

04:57.150 --> 05:00.295
codice con versioni precedenti di JavaScript

05:00.295 --> 05:02.690
e si lavora con quattro cicli.

05:02.690 --> 05:05.798
In alcuni rari casi, poi, si potrebbe incorrere in problemi in

05:05.798 --> 05:08.378
cui la compilazione non funziona correttamente.

05:08.378 --> 05:10.440
Questa opzione, se attivata, consente

05:10.440 --> 05:12.770
di ottenere una compilazione più precisa,

05:12.770 --> 05:15.280
che funzionerà in questi casi di nicchia, per

05:15.280 --> 05:17.210
cui si potrebbe pensare di attivarla

05:17.210 --> 05:20.097
sempre, ma anche di produrre più codice.

05:20.097 --> 05:21.880
Quindi si dovrebbe attivare solo

05:21.880 --> 05:25.110
se si hanno dei loop e si nota che il codice generato si comporta

05:25.110 --> 05:27.700
improvvisamente in modo diverso da come dovrebbe

05:27.700 --> 05:29.023
per quei loop.
