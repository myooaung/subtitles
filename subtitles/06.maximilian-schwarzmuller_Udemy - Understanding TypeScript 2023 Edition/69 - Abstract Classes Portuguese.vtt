WEBVTT

00:02.060 --> 00:04.710
Assim, com propriedades estáticas fora do

00:04.710 --> 00:07.000
caminho, voltemos à herança e a um conceito

00:07.000 --> 00:08.743
relacionado a isso.

00:08.743 --> 00:11.740
Outra forma de acrescentar métodos às

00:11.740 --> 00:14.280
aulas, que você planeja herdar.

00:14.280 --> 00:16.660
Aqui está nossa classe de Departamento e, como

00:16.660 --> 00:19.200
você sabe, estamos herdando dela o Departamento

00:19.200 --> 00:21.360
de TI e o Departamento de Contabilidade.

00:21.360 --> 00:23.470
Agora, temos esse método descrito aqui

00:23.470 --> 00:26.160
em nossa classe de Departamento e, portanto, podemos

00:26.160 --> 00:28.850
chamar isso em qualquer instância, com base no Departamento

00:28.850 --> 00:31.850
de TI e no Departamento de Contabilidade, porque essas

00:31.850 --> 00:34.560
classes são baseadas no Departamento e têm acesso

00:34.560 --> 00:36.560
a todas as propriedades e métodos dessa

00:36.560 --> 00:39.523
classe base do Departamento.

00:40.380 --> 00:43.850
Agora, como você aprendeu, você pode substituir os métodos.

00:43.850 --> 00:46.550
Assim, por exemplo, aqui no Departamento de

00:46.550 --> 00:50.030
Contabilidade, poderíamos acrescentar nossa própria

00:50.030 --> 00:51.900
versão do método de descrição,

00:51.900 --> 00:56.880
onde eu quero fazer algo diferente, onde talvez quando eu disser ID do Departamento

00:56.880 --> 01:00.443
de Contabilidade, e depois acessar a ID de Distort.

01:02.040 --> 01:03.140
Agora, isto não funcionaria

01:03.140 --> 01:06.960
aqui, porque a identificação é uma propriedade privada do Departamento

01:06.960 --> 01:10.400
e, portanto, precisamos transformá-la em uma propriedade protegida

01:10.400 --> 01:12.590
para que esteja disponível também em classes

01:12.590 --> 01:14.750
baseadas nesta classe.

01:14.750 --> 01:16.210
Mas com isso, deve funcionar.

01:16.210 --> 01:19.080
E se eu agora chamo a descrição sobre contabilidade,

01:19.080 --> 01:20.540
o que podemos fazer, é claro,

01:20.540 --> 01:23.650
vamos talvez comentar estas duas linhas, e em vez disso,

01:23.650 --> 01:27.460
chamar a contabilidade. descrever lá embaixo, devemos

01:27.460 --> 01:29.300
ver essa nova saída, e de fato,

01:29.300 --> 01:33.340
vemos o ID do Departamento de Contabilidade, d2.

01:33.340 --> 01:36.570
Agora, é claro, poderíamos também ignorar o método

01:36.570 --> 01:38.900
de descrição no Departamento de TI.

01:38.900 --> 01:43.240
Mas às vezes você não quer apenas oferecer a opção de sobrepor

01:43.240 --> 01:46.440
um método, porque ele sempre existe.

01:46.440 --> 01:50.430
Em vez disso, você quer forçar os desenvolvedores a trabalhar com uma determinada

01:50.430 --> 01:53.390
classe ou a estender uma determinada classe para implementar

01:53.390 --> 01:54.820
um determinado método ou para

01:54.820 --> 01:56.840
anular um determinado método.

01:56.840 --> 01:58.360
Quando você faria isso?

01:58.360 --> 02:01.690
Bem, sempre que você quiser garantir que um determinado método

02:01.690 --> 02:05.670
esteja disponível em todas as classes com base em alguma classe base, neste

02:05.670 --> 02:07.320
caso, o Departamento.

02:07.320 --> 02:10.550
Mas quando também souber ao mesmo tempo que a implementação

02:10.550 --> 02:14.220
exata dependerá da versão específica, então quando você puder

02:14.220 --> 02:17.340
fornecer um método geral, mas quiser impor que este

02:17.340 --> 02:20.240
método existe, mas as classes herdeiras precisarão

02:20.240 --> 02:22.410
fornecer sua própria implementação

02:22.410 --> 02:24.270
porque você não pode fornecer

02:24.270 --> 02:28.520
uma implementação padrão na classe base.

02:28.520 --> 02:30.150
Portanto, em tal situação,

02:30.150 --> 02:34.600
você pode querer ter um método vazio em sua classe base e agora forçar

02:34.600 --> 02:38.460
todas as classes baseadas nessa classe a adicionar e anular

02:38.460 --> 02:40.810
este método e você pode fazê-lo adicionando

02:40.810 --> 02:44.880
a palavra-chave abstrata aqui.

02:44.880 --> 02:46.630
Se você adicionar o abstrato aqui,

02:46.630 --> 02:49.840
você verá que recebemos um erro de que este só está disponível

02:49.840 --> 02:51.440
em uma classe abstrata.

02:51.440 --> 02:54.220
Portanto, se você tem um método ou mais com abstrato

02:54.220 --> 02:57.390
na frente do método, você tem que adicionar abstrato aqui

02:57.390 --> 03:00.400
na frente da classe também e agora, estamos bem com relação

03:00.400 --> 03:01.690
a isso, mas agora você vê

03:01.690 --> 03:03.740
que eu tenho um erro aqui.

03:03.740 --> 03:05.650
Descrever não pode ter uma implementação

03:05.650 --> 03:07.850
porque é marcado como abstrato.

03:07.850 --> 03:10.340
Você tem que remover o aparelho encaracolado,

03:10.340 --> 03:14.030
adicionar um ponto-e-vírgula e, em vez disso, adicionar o tipo de

03:14.030 --> 03:16.820
retorno que este deve ter, neste caso, branco.

03:16.820 --> 03:18.400
Portanto, agora você está

03:18.400 --> 03:21.970
apenas definindo como este método deve se parecer com a sua estrutura,

03:21.970 --> 03:25.230
mas não está dizendo mais nada além disto.

03:25.230 --> 03:27.990
Agora, porém, recebemos um erro no Departamento

03:27.990 --> 03:31.120
de TI porque ele não implementa a descrição abstrata

03:31.120 --> 03:33.640
herdada do membro, o que significa que não

03:33.640 --> 03:36.330
oferecemos aqui o método de descrição.

03:36.330 --> 03:38.410
E temos que fazer isso porque estamos baseados

03:38.410 --> 03:41.000
na classe do Departamento, que é abstrata, e que tem

03:41.000 --> 03:42.860
um método tão abstrato.

03:42.860 --> 03:45.220
O que significa que este método tem que ser implementado

03:45.220 --> 03:48.623
por qualquer classe baseada nesta classe do Departamento.

03:49.620 --> 03:51.420
Portanto, agora aqui no Departamento de

03:51.420 --> 03:53.820
TI, temos que acrescentar um método de descrição.

03:53.820 --> 03:58.820
E lá dentro, podemos agora consolar o Departamento de TI, e depois

03:59.040 --> 04:01.120
fazer o que quisermos.

04:01.120 --> 04:03.070
Esta pode ser a mesma implementação que a temos

04:03.070 --> 04:04.900
no Departamento de Contabilidade, mas

04:04.900 --> 04:07.440
também pode ser uma implementação diferente.

04:07.440 --> 04:10.040
Assim, agora com isso, podemos salvar isto e recompilar,

04:10.040 --> 04:12.850
e obtemos quase a mesma produção de antes.

04:12.850 --> 04:15.240
Mas agora temos duas implementações diferentes

04:15.240 --> 04:18.090
do método de descrição em nossas diferentes classes,

04:18.090 --> 04:20.020
baseadas no Departamento.

04:20.020 --> 04:23.600
Portanto, o resumo pode ser muito útil se você quiser impor

04:23.600 --> 04:27.120
que todas as classes baseadas em alguma outra classe, compartilhar

04:27.120 --> 04:30.260
algum método ou propriedade em comum, você também pode

04:30.260 --> 04:33.150
ter propriedades abstratas.

04:33.150 --> 04:34.260
Mas, ao mesmo tempo,

04:34.260 --> 04:36.510
você quer ter certeza de que não precisa fornecer

04:36.510 --> 04:39.170
o valor concreto, a implementação concreta na classe

04:39.170 --> 04:41.000
base, mas, em vez disso, a classe herdeira

04:41.000 --> 04:43.440
tem que fazer isso.

04:43.440 --> 04:45.970
Também importantes, aulas abstratas.

04:45.970 --> 04:49.200
Assim, as classes marcadas como abstratas com esta palavra-chave

04:49.200 --> 04:51.420
podem ser instanciadas por si mesmas.

04:51.420 --> 04:54.240
Portanto, agora você não pode instanciar o Departamento.

04:54.240 --> 04:57.440
Basicamente, é apenas uma classe que se fixou para

04:57.440 --> 05:01.800
ser herdada para que as classes herdeiras possam ser instanciadas,

05:01.800 --> 05:05.230
e as classes herdeiras são forçadas a fornecer implementações

05:05.230 --> 05:09.040
concretas para, neste caso, descrever o método seguindo a estrutura

05:09.040 --> 05:11.770
que você expôs aqui.

05:11.770 --> 05:15.750
Portanto, com esta palavra-chave referindo-se a uma instância ou instância

05:15.750 --> 05:19.930
do Departamento, de alguma forma baseada no Departamento incluindo as classes

05:19.930 --> 05:21.530
herdadas que podem estar no meio

05:21.530 --> 05:23.610
e que não devolve nada
