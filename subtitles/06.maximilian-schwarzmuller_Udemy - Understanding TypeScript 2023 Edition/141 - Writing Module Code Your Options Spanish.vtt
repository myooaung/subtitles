WEBVTT

00:02.160 --> 00:03.740
Instructor: Entonces, ¿cuáles son nuestras

00:03.740 --> 00:06.440
opciones cuando queremos dividir el código en varios archivos?

00:06.440 --> 00:10.720
En realidad, tenemos tres opciones para ello.

00:10.720 --> 00:12.680
La primera opción sería simplemente escribir

00:12.680 --> 00:16.110
múltiples archivos de código, múltiples archivos TypeScript.

00:16.110 --> 00:17.460
TypeScript compilará entonces

00:17.460 --> 00:20.710
automáticamente todos los archivos de código en el directorio fuente

00:20.710 --> 00:23.020
e importará manualmente los archivos de script

00:23.020 --> 00:25.000
Java compilados en HTML.

00:25.000 --> 00:26.220
Esta es una opción y para

00:26.220 --> 00:28.970
algunos proyectos podría ser lo correcto, pero tendrías

00:28.970 --> 00:31.780
que gestionar todas estas importaciones manualmente,

00:31.780 --> 00:34.600
lo que puede ser engorroso y propenso a errores, y cuando

00:34.600 --> 00:36.980
se utilizan ciertas características de TypeScript,

00:36.980 --> 00:39.560
también renuncias al soporte de tipos si algún tipo

00:39.560 --> 00:43.670
está definido en el archivo A y lo utilizas en el archivo B y TypeScript no conoce

00:43.670 --> 00:46.030
esta conexión.

00:46.030 --> 00:47.480
Por eso no es una gran opción

00:47.480 --> 00:49.290
para proyectos grandes.

00:49.290 --> 00:52.500
En cambio, para proyectos más grandes tenemos dos opciones principales.

00:52.500 --> 00:55.470
Tenemos espacios de nombres y agrupación de archivos, por ejemplo.

00:55.470 --> 00:59.410
Ahora namespaces es una característica de TypeScript, una característica

00:59.410 --> 01:03.430
de sintaxis, puedes añadir código especial a tu código para usar

01:03.430 --> 01:04.840
esta característica y

01:04.840 --> 01:08.650
te permite básicamente agrupar código bajo un namespace y luego

01:08.650 --> 01:12.730
importar namespaces en otros archivos.

01:12.730 --> 01:16.020
Así que puedes tener un espacio de nombres por archivo, por ejemplo.

01:16.020 --> 01:18.790
Importar otro archivo en otro archivo y aprovechar

01:18.790 --> 01:21.930
ese espacio de nombres que vive en otro archivo de

01:21.930 --> 01:24.650
ese archivo de importación y lo veremos en

01:24.650 --> 01:25.970
la práctica por si no

01:25.970 --> 01:28.030
está del todo claro.

01:28.030 --> 01:30.020
TypeScript no sólo admite eso,

01:30.020 --> 01:34.130
sino que también agrupa los archivos en un solo archivo, de modo

01:34.130 --> 01:37.230
que al final escribes código en varios archivos

01:37.230 --> 01:39.560
que se compilan, pero que luego se importan

01:39.560 --> 01:42.750
entre sí, de modo que tienes menos importaciones

01:42.750 --> 01:45.190
que gestionar y no necesitas gestionar

01:45.190 --> 01:46.950
manualmente diferentes importaciones

01:46.950 --> 01:50.030
en un archivo HTML.

01:50.030 --> 01:52.180
Ahora una alternativa a los namespaces

01:52.180 --> 01:55.750
y podría decirse que la alternativa más importante y moderna,

01:55.750 --> 02:00.750
es usar ES6 Imports/Exports también conocidos como módulos ES6, porque resulta que totalmente

02:01.870 --> 02:06.480
desvinculado de TypeScript, el moderno Java script tiene una solución para este

02:06.480 --> 02:09.940
problema también porque tienes este problema no sólo en los

02:09.940 --> 02:11.440
proyectos de TypeScript,

02:11.440 --> 02:13.140
sino en cualquier proyecto más

02:13.140 --> 02:15.850
grande de Java script.

02:15.850 --> 02:18.200
Los scripts modernos de Java soportan declaraciones

02:18.200 --> 02:21.150
de importación y exportación, lo que te permite indicar

02:21.150 --> 02:23.110
qué archivo depende de qué otro archivo

02:23.110 --> 02:24.910
y entonces tienes todos estos archivos

02:24.910 --> 02:27.920
individuales pero no necesitas gestionar las importaciones

02:27.920 --> 02:30.560
manualmente, en cambio los navegadores, los navegadores

02:30.560 --> 02:33.770
modernos lo hacen.

02:33.770 --> 02:36.020
Lo entienden y descargan y ejecutan automáticamente

02:36.020 --> 02:38.800
los archivos de los que depende otro archivo.

02:38.800 --> 02:41.370
Para ello se utiliza la sintaxis de importación/exportación

02:41.370 --> 02:43.470
y TypeScript también lo soporta.

02:43.470 --> 02:46.870
Por lo tanto, se puede utilizar TypeScript sin ningún problema.

02:46.870 --> 02:48.700
Se compila por archivo, pero sólo

02:48.700 --> 02:50.810
se necesita una importación de scripts

02:50.810 --> 02:53.680
porque, como acabo de mencionar, los navegadores

02:53.680 --> 02:56.350
modernos saben cómo obtener todas las demás dependencias

02:56.350 --> 02:58.570
y también lo verás en acción en esta sección

02:58.570 --> 03:00.710
del núcleo.

03:00.710 --> 03:02.320
Ahora una nota importante aquí,

03:02.320 --> 03:03.830
con eso técnicamente terminaremos

03:03.830 --> 03:06.110
con múltiples archivos todavía y mientras que

03:06.110 --> 03:09.140
no tendremos que manejar las importaciones manualmente, las

03:09.140 --> 03:11.550
importaciones de scripts, todavía tenemos algunas

03:11.550 --> 03:13.730
desventajas debido a eso porque cada archivo

03:13.730 --> 03:15.130
del que dependes necesita ser

03:15.130 --> 03:16.900
descargado por separado lo que significa

03:16.900 --> 03:19.460
más peticiones HTTP y así sucesivamente y por lo tanto

03:19.460 --> 03:22.210
puedes agrupar archivos para trabajar en múltiples archivos

03:22.210 --> 03:24.860
durante el desarrollo pero enviar un solo archivo para

03:24.860 --> 03:30.840
la producción pero necesitas herramientas de terceros para eso, Por ejemplo Webpack, y te mostraré cómo funciona también

03:30.840 --> 03:33.700
pero en una sección separada donde echaremos un vistazo

03:33.700 --> 03:39.500
a Webpack y TypeScript y por qué lo usamos y cómo lo usamos.

03:39.500 --> 03:41.100
Así que por ahora vamos a utilizar

03:41.100 --> 03:43.900
estos dos enfoques en su forma básica y vamos a ver

03:43.900 --> 03:45.870
cómo podemos mejorar nuestro código

03:45.870 --> 03:48.853
dividiéndolo en varios archivos.
