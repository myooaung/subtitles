WEBVTT

00:02.220 --> 00:03.053
Instructeur : Maintenant,

00:03.053 --> 00:04.920
j'ai mentionné que les interfaces sont utilisées

00:04.920 --> 00:07.114
pour définir la structure d'un objet.

00:07.114 --> 00:09.690
Désormais, les interfaces peuvent également être utilisées

00:09.690 --> 00:11.750
pour définir la structure d'une fonction.

00:11.750 --> 00:14.330
Il s'agit donc essentiellement d'un remplacement des types de fonctions que

00:14.330 --> 00:15.578
vous avez déjà appris à connaître.

00:15.578 --> 00:17.890
Pour rappel, nous pouvons définir le

00:17.890 --> 00:20.090
type d'une fonction, par exemple, avec

00:20.090 --> 00:23.305
un type personnalisé à l'aide du mot-clé type.

00:23.305 --> 00:26.380
AddFn pour la fonction d'ajout qui pourrait alors contenir

00:26.380 --> 00:29.350
une définition de fonction comme celle-ci.

00:29.350 --> 00:30.830
Il doit retourner un nombre

00:30.830 --> 00:32.370
et prendre deux arguments,

00:32.370 --> 00:35.970
chaque argument étant également de type nombre.

00:35.970 --> 00:39.310
Maintenant, nous pourrions créer une nouvelle fonction

00:39.310 --> 00:42.860
add ici qui est de type AddFn et si nous ne l'initialisons pas

00:42.860 --> 00:45.040
mais assignons notre fonction plus

00:45.040 --> 00:46.580
tard, alors bien sûr, nous

00:46.580 --> 00:49.470
devons nous assurer que cette fonction prend deux

00:49.470 --> 00:51.300
arguments qui sont de type nombre

00:51.300 --> 00:55.170
et que là, nous retournons également un nombre.

00:55.170 --> 00:56.360
C'est quelque chose que nous pouvons faire.

00:56.360 --> 00:57.843
C'est ce que vous avez déjà appris.

00:57.843 --> 01:01.760
Maintenant, vous pouvez également utiliser une interface comme alternative

01:01.760 --> 01:03.077
à ce type personnalisé.

01:03.077 --> 01:06.860
Les interfaces sont là pour définir la structure d'un objet, comme je

01:06.860 --> 01:08.240
vous l'ai appris, mais au

01:08.240 --> 01:10.220
final, les fonctions ne sont que des

01:10.220 --> 01:12.720
objets et c'est donc une petite exception.

01:12.720 --> 01:15.350
Vous pouvez créer des types de fonctions avec des interfaces.

01:15.350 --> 01:18.930
Pour cela vous créez une interface, nommez-la AddFn

01:18.930 --> 01:20.930
pour garder ce nom ici.

01:20.930 --> 01:23.720
Et là, vous définissez la partie de la fonction

01:23.720 --> 01:28.300
en ajoutant simplement des parenthèses avec vos arguments, a : nombre,

01:28.300 --> 01:31.150
B:nombre, par exemple, et ensuite deux points,

01:31.150 --> 01:33.980
pas une flèche mais deux points ici avec le

01:33.980 --> 01:36.810
type de retour.

01:36.810 --> 01:39.780
En fin de compte, nous définissons une méthode comme

01:39.780 --> 01:41.630
nous le faisons ici avec greet,

01:41.630 --> 01:45.710
à l'exception du fait que nous n'ajoutons pas de nom de méthode.

01:45.710 --> 01:47.880
Donc nous avons une fonction anonyme

01:47.880 --> 01:49.300
si vous voulez l'appeler

01:49.300 --> 01:52.000
comme ça dans l'interface AddFn et TypeScript

01:52.000 --> 01:55.250
comprend cette syntaxe spéciale de cette fonction anonyme

01:55.250 --> 01:57.800
dans votre interface et comprend que vous

01:57.800 --> 02:00.410
voulez utiliser cette interface comme un type

02:00.410 --> 02:02.070
de fonction et c'est à ça que

02:02.070 --> 02:05.360
votre fonction doit ressembler.

02:05.360 --> 02:07.650
Nous pouvons maintenant utiliser AddFn ici

02:07.650 --> 02:10.440
et, en effet, si j'essayais d'accepter une chaîne ici,

02:10.440 --> 02:11.640
nous obtiendrions une

02:11.640 --> 02:13.786
erreur parce que ce n'est pas assignable,

02:13.786 --> 02:17.060
nous devons avoir un nombre au lieu d'une chaîne.

02:17.060 --> 02:19.670
Il s'agit donc simplement d'une alternative à ce type personnalisé.

02:19.670 --> 02:23.010
Bien sûr, ici, je dirais que l'utilisation du type personnalisé est probablement

02:23.010 --> 02:25.020
un peu plus courante, c'est aussi un peu plus

02:25.020 --> 02:26.470
court, mais c'est une syntaxe alternative

02:26.470 --> 02:28.340
intéressante à connaître, surtout si vous

02:28.340 --> 02:30.870
rencontrez cela dans un projet et que vous ne savez plus

02:30.870 --> 02:35.265
ce que cela signifie, cette étrange méthode anonyme.

02:35.265 --> 02:38.993
En fin de compte, c'est juste un type de fonction personnalisée.
