WEBVTT

00:02.110 --> 00:03.890
Instruktor: Więc teraz, po tych

00:03.890 --> 00:07.820
wszystkich funkcjach, gdzie pracowaliśmy z samymi typami, że tak powiem,

00:07.820 --> 00:10.340
gdzie pracowaliśmy nad sprawdzaniem typów,

00:10.340 --> 00:13.880
kosztowaniem typów, wróćmy do funkcji, które pomagają nam jeździć

00:13.880 --> 00:16.110
elastycznym kodem.

00:16.110 --> 00:17.930
Oczywiście, nadal piszcie te dwa typy.

00:17.930 --> 00:20.150
Jest to w końcu typescript, ale nie tak bardzo

00:20.150 --> 00:23.520
skupiony na samych typach, teraz możemy nimi zarządzać.

00:23.520 --> 00:25.830
W tym celu chciałbym zacząć od typów indeksowych,

00:25.830 --> 00:29.040
czyli funkcji, która pozwala nam tworzyć obiekty, które są bardziej

00:29.040 --> 00:31.150
elastyczne pod względem właściwości, jakie

00:31.150 --> 00:33.010
mogą posiadać.

00:33.010 --> 00:34.485
Co mam przez to rozumieć?

00:34.485 --> 00:36.813
Powiedzmy, że piszesz aplikację, w której sprawdzasz

00:36.813 --> 00:39.680
poprawność danych wprowadzanych przez użytkownika.

00:39.680 --> 00:41.810
Więc masz wiele pól wejściowych i w zależności

00:41.810 --> 00:44.603
od tego, co użytkownik wprowadza tam i które pole

00:44.603 --> 00:46.682
to jest, możesz chcieć przechowywać

00:46.682 --> 00:50.490
i ewentualnie pokazać różne komunikaty o błędach.

00:50.490 --> 00:52.520
Na przykład, jeśli jest to pole e-mail,

00:52.520 --> 00:54.360
chcesz sprawdzić, kto jest w e-mailu,

00:54.360 --> 00:55.590
a jeśli nie jest, to chcesz

00:55.590 --> 00:59.830
dodać odpowiedni komunikat o błędzie do kontenera błędów.

00:59.830 --> 01:01.133
Więc od tego właśnie zacznę.

01:01.133 --> 01:06.133
Będę miał tutaj swój kontener błędów interfejsu.

01:07.570 --> 01:09.530
I to powinien być obiekt, stąd używam tutaj

01:09.530 --> 01:11.400
interfejsu, ale powinien być elastyczny

01:11.400 --> 01:14.090
w odniesieniu do tego, co przechowuje.

01:14.090 --> 01:15.680
Ostatecznie moim celem jest to,

01:15.680 --> 01:17.692
że dzięki temu możemy traktować obiekty,

01:17.692 --> 01:20.782
w których mamy jakiś identyfikator błędu, który może być ideałem,

01:20.782 --> 01:23.700
jeśli pole wejściowe, do którego należy błąd.

01:23.700 --> 01:26.581
Na przykład e-mail. A potem jakiś ciąg

01:26.581 --> 01:31.581
błędów, not a valid email. A potem mamy jeszcze jedną nieruchomość.

01:32.130 --> 01:35.610
Powiedzmy, że nazwa użytkownika, a następnie ciąg

01:35.610 --> 01:37.150
błędu może przechowywać

01:37.150 --> 01:39.280
to pole wejściowe, jeśli pole wejściowe

01:39.280 --> 01:41.611
jest nieprawidłowe.

01:41.611 --> 01:45.770
Musi zaczynać się od znaku.

01:45.770 --> 01:49.170
Coś takiego powinno być przechowywane w tym obiekcie.

01:49.170 --> 01:51.992
Problem z tym jest taki, że nie wiem z góry, jakie dokładne

01:51.992 --> 01:55.320
nazwy nieruchomości, które będziemy tam mieć.

01:55.320 --> 01:58.021
Możesz powiedzieć, dobrze, że będziemy mieli e-mail i nazwę

01:58.021 --> 02:01.650
użytkownika, ale dla jednego chcę, aby to był elastyczny pojemnik.

02:01.650 --> 02:03.150
Chcę móc używać go na dowolnym formularzu,

02:03.150 --> 02:05.350
który mam na mojej stronie internetowej.

02:05.350 --> 02:07.560
I mogę mieć różne formularze z różnymi danymi

02:07.560 --> 02:10.157
wejściowymi z różnymi identyfikatorami.

02:10.157 --> 02:12.741
Nie chcę więc ograniczać się tylko do błędów

02:12.741 --> 02:16.150
związanych z naszym e-mailem i nazwą użytkownika.

02:16.150 --> 02:18.461
A dodatkowo, nawet jeśli zawsze mieliśmy

02:18.461 --> 02:20.859
tylko wejścia email i username i chcemy

02:20.859 --> 02:23.291
tylko przechowywać błędy dla tych.

02:23.291 --> 02:27.461
Co zrobić, jeśli tylko email jest nieprawidłowy, a nie nazwa użytkownika?

02:27.461 --> 02:30.912
Następnie oczywiście w tym obiekcie moglibyśmy przechowywać null jako

02:30.912 --> 02:34.421
wartość dla nazwy użytkownika, ale chciałbym go po prostu pominąć.

02:34.421 --> 02:37.232
Czy zatem mieliśmy obiekt, który przechowuje

02:37.232 --> 02:40.419
tylko właściwości dla wejść, w których mamy błąd?

02:40.419 --> 02:42.960
Możemy więc również zapętlić ten obiekt za pomocą

02:42.960 --> 02:46.260
pętli four in, aby przeczytać wszystkie błędy, które dostaliśmy

02:46.260 --> 02:48.200
na przykład i nie mieć tam żadnych właściwości,

02:48.200 --> 02:51.112
które faktycznie nie przechowują błędu.

02:51.112 --> 02:53.261
Więc długa historia, potrzebuję obiektu,

02:53.261 --> 02:56.861
w którym jestem dość jasny w odniesieniu do typu wartości.

02:56.861 --> 03:00.260
Powinien to być ciąg znaków, ale gdzie ja nie zaliczam

03:00.260 --> 03:02.190
ile będę miał właściwości i

03:02.190 --> 03:05.320
jaką nazwę będą miały właściwości.

03:05.320 --> 03:08.171
I do takiego scenariusza możemy wykorzystać typy indeksowe.

03:08.171 --> 03:10.760
Definiujesz typ indeksu poprzez użycie tutaj nawiasów kwadratowych.

03:10.760 --> 03:14.730
Pamiętaj normalnie napisalibyśmy tutaj nazwę właściwości, ale teraz używamy

03:14.730 --> 03:16.280
nawiasów kwadratowych.

03:16.280 --> 03:21.280
Następnie dowolna, wybrana przez siebie nazwa np. klucz lub rekwizyt.

03:23.581 --> 03:28.581
Następnie, dwukropek. A następnie typ wartości właściwości.

03:29.010 --> 03:30.010
A potem obiekt.

03:30.010 --> 03:33.760
Nie możesz mieć ciągów, liczb ani symboli jako właściwości.

03:33.760 --> 03:37.660
Ty na przykład nie możesz użyć boolean tutaj. To nie jest dozwolone.

03:37.660 --> 03:40.504
Ale możesz użyć tutaj stringów.

03:40.504 --> 03:43.190
Z tym po prostu mówię, że jakikolwiek obiekt,

03:43.190 --> 03:46.330
który konstruuję w oparciu o ten interfejs kontenera

03:46.330 --> 03:51.083
błędów później, musi mieć właściwości, które są ciągami.

03:52.120 --> 03:53.928
Na przykład nazwa użytkownika będzie poprawnym

03:53.928 --> 03:55.899
ciągiem, nawet jeśli nie zawinę jej w cudzysłów.

03:55.899 --> 03:59.980
Następnie dodajemy dwukropek. A następnie typ wartości, czyli

03:59.980 --> 04:01.629
string. Więc z tym mówię,

04:01.629 --> 04:04.320
że nie znam dokładnej nazwy nieruchomości.

04:04.320 --> 04:07.620
Nie znam też liczby nieruchomości.

04:07.620 --> 04:10.608
Wiem tylko, że każda właściwość, która jest dodawana

04:10.608 --> 04:13.459
do tego obiektu, który jest oparty na kontenerze błędów,

04:13.459 --> 04:16.959
musi mieć nazwę właściwości, która może być interpretowana

04:16.959 --> 04:20.640
jako ciąg znaków, a wartość właściwości również musi być ciągiem

04:20.640 --> 04:23.080
znaków. O tym właśnie mówię.

04:23.080 --> 04:28.080
Teraz, dzięki temu możemy również nadal dodawać predefiniowane właściwości,

04:29.560 --> 04:31.906
jednak tylko wtedy, gdy są one tego samego

04:31.906 --> 04:35.339
typu, co ten tutaj. Moglibyśmy więc dodać identyfikator, który jest ciągiem typu.

04:35.339 --> 04:39.760
I wtedy każdy obiekt, który zbudujemy, który trzyma się tego interfejsu,

04:39.760 --> 04:43.360
musi mieć właściwość ID i może dodać tyle innych propetencji,

04:43.360 --> 04:47.370
ile chce, ale nie możemy tutaj ustawić ID na przykład na liczbę, ponieważ

04:47.370 --> 04:49.277
mamy tutaj typ index.

04:49.277 --> 04:53.033
Więc to jest ograniczenie, które mamy, jeśli budujemy taki obiekt.

04:55.240 --> 04:56.550
Więc teraz jakie są tego konsekwencje?

04:56.550 --> 05:00.080
Teraz możemy stworzyć na przykład torbę błędów, która jest typu

05:00.080 --> 05:02.390
error container, która w związku z tym jest

05:02.390 --> 05:05.150
obiektem i byłaby ważna w ten sposób, ponieważ nie

05:05.150 --> 05:07.440
musimy dodawać żadnych właściwości.

05:07.440 --> 05:10.340
To wszystko jest ważne. Ale oczywiście możemy teraz dodać kilka.

05:10.340 --> 05:13.380
Na przykład e-mail nie jest prawidłowym e-mailem.

05:13.380 --> 05:15.780
I to jest w porządku. Nie byłoby w porządku, gdybym

05:15.780 --> 05:17.093
zamiast tego przypisał tutaj

05:17.093 --> 05:19.133
liczbę, ponieważ mówimy, że każda właściwość

05:19.133 --> 05:23.001
potrzebuje typu wartości łańcuchowej. Musimy więc użyć tutaj ciągu znaków.

05:23.001 --> 05:25.940
Jeśli użyję tutaj liczby, to zadziałałoby, ponieważ

05:25.940 --> 05:28.610
można to również zinterpretować jako ciąg.

05:28.610 --> 05:30.883
Więc mogę również użyć liczby jako typu klucza tutaj,

05:30.883 --> 05:33.031
jeśli chciałem. Jestem dość wolny w kwestii

05:33.031 --> 05:35.981
tego, czego używam tutaj. Jeśli zmieniłoby

05:35.981 --> 05:40.981
to typ rekwizytu tutaj na numer, to można to zrobić i

05:42.130 --> 05:44.810
byłoby ok. Ale tak by nie było,

05:44.810 --> 05:46.470
bo email to nie liczba.

05:46.470 --> 05:48.170
Tego nie da się przeliczyć na liczbę.

05:48.170 --> 05:51.550
Można go traktować jako ciąg znaków, ale nie jako liczbę.

05:51.550 --> 05:54.870
Tak więc w ten sposób kontrolujesz, jaki typ właściwości lub jakie

05:54.870 --> 05:56.990
nazwy właściwości dopuszczasz.

05:56.990 --> 05:59.493
I tutaj zrobiłem jeden, aby umożliwić nazwy właściwości ciągów.

05:59.493 --> 06:02.264
Więc wszystko, co można przekonwertować na ciąg znaków, jest poprawną

06:02.264 --> 06:04.740
nazwą właściwości. A następnie wartość musi

06:04.740 --> 06:06.413
być również ciągiem znaków.

06:06.413 --> 06:08.021
I jak powiedziałem oczywiście

06:08.021 --> 06:10.632
teraz możemy dodać wiele wartości tutaj, wiele

06:10.632 --> 06:12.830
wartości powinienem powiedzieć.

06:12.830 --> 06:17.263
Musi zaczynać się od wielkiej litery.

06:18.170 --> 06:21.220
Więc to jest teraz taki error bag, który mogliśmy

06:21.220 --> 06:22.722
zbudować za pomocą error

06:22.722 --> 06:25.392
container, który daje nam tę dodatkową elastyczność,

06:25.392 --> 06:27.522
że nie musimy z góry wiedzieć, jakich

06:27.522 --> 06:32.653
nazw właściwości chcemy użyć i ile właściwości potrzebujemy.
