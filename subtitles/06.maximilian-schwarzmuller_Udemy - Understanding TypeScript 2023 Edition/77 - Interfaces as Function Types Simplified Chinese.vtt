WEBVTT

00:02.220 --> 00:03.053
教师：现在,

00:03.053 --> 00:07.114
我提到接口是用来定义对象的结构的｡

00:07.114 --> 00:11.750
现在, 接口也可以用来定义函数的结构｡

00:11.750 --> 00:15.578
所以基本上作为你已经学过的函数类型的替代｡

00:15.578 --> 00:17.890
就像快速复习一样, 我们可以定义一个函数的类型,

00:17.890 --> 00:23.305
例如, 用type关键字定义一个自定义类型｡

00:23.305 --> 00:29.350
AddFn表示add函数, 它可以保存这样一个函数定义｡

00:29.350 --> 00:30.830
它应该返回一个数字,

00:30.830 --> 00:32.370
并且应该有两个参数,

00:32.370 --> 00:35.970
其中每个参数也是数字类型｡

00:35.970 --> 00:39.310
我们可以在这里创建一个新的函数add,

00:39.310 --> 00:42.860
它的类型是AddFn, 如果我们不初始化它,

00:42.860 --> 00:51.300
而是在以后赋值函数, 那么当然, 我们必须确保这个函数有两个参数, 都是number类型的,

00:51.300 --> 00:55.170
我们也会返回一个数字.

00:55.170 --> 00:56.360
这是我们可以做的事情｡ 

00:56.360 --> 00:57.843
这是你已经学过的｡ 

00:57.843 --> 01:03.077
现在, 您也可以使用界面做为这个自订型别的替代｡

01:03.077 --> 01:08.240
接口是用来定义对象的结构的, 正如我教过你们的,

01:08.240 --> 01:10.220
但最终, 函数只是对象,

01:10.220 --> 01:12.720
所以这是个例外.

01:12.720 --> 01:15.350
您可以建立具有界面的函式型别｡ 

01:15.350 --> 01:20.930
为此, 您创建了一个接口, 将其命名为AddFn, 以便在此处仍然保留该名称｡

01:20.930 --> 01:23.720
现在在这里, 你只需在参数中加上括号来定义函数,

01:23.720 --> 01:36.810
a：例如, B：number, 然后是冒号, 不是箭头, 而是返回类型的冒号｡

01:36.810 --> 01:41.630
最后, 就像我们在这里用greet定义方法一样,

01:41.630 --> 01:45.710
除了我们现在没有添加方法名｡

01:45.710 --> 01:47.880
所以我们有一个匿名函数,

01:47.880 --> 01:57.800
如果你想在AddFn接口中这样调用它, TypeScript理解这个匿名函数在你接口中的特殊语法,

01:57.800 --> 02:00.410
理解你想把这个接口作为函数类型,

02:00.410 --> 02:05.360
这就是你的函数应该是什么样子的｡

02:05.360 --> 02:07.650
所以现在我们可以在这里使用AddFn,

02:07.650 --> 02:11.640
如果我试图在这里接受一个字符串, 我们会得到一个错误,

02:11.640 --> 02:17.060
因为它是不可赋值的, 我们需要一个数字来代替字符串｡

02:17.060 --> 02:19.670
因此, 它只是此自定义类型的一种替代方法｡ 

02:19.670 --> 02:23.010
当然, 这里我认为使用自定义类型可能更常见一些,

02:23.010 --> 02:26.470
它也更短一些, 但它是一个很好的替代语法,

02:26.470 --> 02:30.870
需要注意, 特别是如果你在一些项目中遇到这种情况, 而你不知道它的含义,

02:30.870 --> 02:35.265
这种奇怪的匿名方法｡

02:35.265 --> 02:38.993
好吧, 它最终只是一个自定义函数类型｡ 
