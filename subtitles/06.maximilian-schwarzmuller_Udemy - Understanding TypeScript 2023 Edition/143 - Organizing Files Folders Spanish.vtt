WEBVTT

00:02.300 --> 00:04.180
Instructor: Así que empezamos con las

00:04.180 --> 00:05.960
bases de nombres, continuemos por

00:05.960 --> 00:08.460
ese camino, y dividámoslo en más archivos.

00:08.460 --> 00:11.090
Para ello aquí, la gestión del estado del proyecto.

00:11.090 --> 00:13.610
También podríamos ponerlo en un archivo separado.

00:13.610 --> 00:16.050
Así que voy a agarrar todo, incluyendo

00:16.050 --> 00:20.600
esta creación de la instancia de estado del proyecto aquí, cortarlo

00:20.600 --> 00:24.250
de la aplicación. ts y crear un nuevo archivo,

00:24.250 --> 00:27.060
project-state. ts.

00:27.060 --> 00:29.685
Mueve eso ahí y al igual que antes, ponlo

00:29.685 --> 00:32.070
en un espacio de nombres.

00:32.070 --> 00:35.400
Namespace app, el nombre es importante, tiene que ser App

00:35.400 --> 00:38.090
porque ahí está el resto de nuestro código.

00:38.090 --> 00:40.440
Poner todo allí y ahora importante, la exportación

00:40.440 --> 00:43.560
de lo que usted necesita fuera de este archivo, así, que

00:43.560 --> 00:46.120
en este caso es la clase projecttate, necesitamos

00:46.120 --> 00:48.830
que en el resto de nuestra aplicación, y también

00:48.830 --> 00:51.500
esta constante allí, tenemos que exportar esto

00:51.500 --> 00:53.880
también.

00:53.880 --> 00:57.060
No es necesario exportar el Listener aquí, y tampoco ese

00:57.060 --> 00:59.430
estado, porque ambas cosas sólo se usan en

00:59.430 --> 01:01.480
este archivo y por lo tanto, no necesitan

01:01.480 --> 01:02.823
ser exportadas.

01:03.700 --> 01:06.860
Ahora, tenemos que importar el estado de nuestro proyecto. ts, por lo que

01:06.860 --> 01:09.540
en App. ts, hora de otra importación allí arriba.

01:09.540 --> 01:13.290
Proyecta el estado del tablero, así de fácil.

01:13.290 --> 01:16.620
Si guardamos eso, debería compilar sin errores.

01:16.620 --> 01:19.480
Ahora, voy a continuar y la parte de validación aquí podría

01:19.480 --> 01:21.460
ir en un archivo separado también, así

01:21.460 --> 01:23.960
que voy a tomar todo esto, crear un nuevo archivo,

01:23.960 --> 01:26.890
la validación. ts, añadir el namespace

01:26.890 --> 01:30.760
App aquí, poner mi lógica de validación allí y exportar

01:30.760 --> 01:33.560
la interfaz validable y toda la función

01:33.560 --> 01:36.706
devalidate aquí, por supuesto.

01:36.706 --> 01:39.566
Y luego, de vuelta en App. ts, ya sabes cómo es, volvemos aquí

01:39.566 --> 01:41.700
a la parte superior y añadir una importación a la

01:41.700 --> 01:43.513
validación. ts.

01:45.160 --> 01:49.823
Ahora, el decorador también se puede trasladar a un archivo separado.

01:49.823 --> 01:54.410
Decorador de guiones automático. t, por ejemplo.

01:54.410 --> 01:58.863
Una vez más, añadir el espacio de nombres con el nombre de la aplicación a la misma,

01:58.863 --> 02:01.950
poner la función allí y la exportación, por supuesto, para

02:01.950 --> 02:04.820
que esté disponible fuera de este archivo también y luego

02:04.820 --> 02:08.430
aquí en la aplicación. ts, hora de otra importación en la que

02:08.430 --> 02:12.633
importo el decorador autobind dash. ts.

02:14.840 --> 02:16.484
Ahora tenemos más cosas que exportar,

02:16.484 --> 02:19.240
tenemos nuestro componente y luego todas estas clases.

02:19.240 --> 02:21.205
Quiero tener cada clase en un archivo

02:21.205 --> 02:25.440
separado para que cada archivo sea relativamente pequeño y fácil de manejar.

02:25.440 --> 02:28.280
Sin embargo, estamos entrando en un nuevo problema.

02:28.280 --> 02:30.385
Añadimos más y más archivos en el mismo

02:30.385 --> 02:33.934
nivel y por ahora, estoy usando la cosa del guión aquí para proporcionar

02:33.934 --> 02:37.800
alguna pista o ayuda sobre lo que hay en el archivo, el decorador autobind

02:37.800 --> 02:42.330
dash nos muestra que probablemente hay un decorador allí.

02:42.330 --> 02:44.300
Aquí, probablemente tengamos interfaces.

02:44.300 --> 02:46.246
Aquí, un modelo y así sucesivamente.

02:46.246 --> 02:49.070
Ahora, si sólo tienes tres o cuatro archivos,

02:49.070 --> 02:52.010
está perfectamente bien, pero si tienes más

02:52.010 --> 02:55.276
archivos, terminas con una estructura de carpetas

02:55.276 --> 02:57.430
muy difícil de entender.

02:57.430 --> 03:00.056
Así que lo que me gusta hacer es crear subcarpetas.

03:00.056 --> 03:02.697
Añadiré una subcarpeta de decoradores, moveré

03:02.697 --> 03:05.830
mi decorador autobind allí, y lo renombraré como autobind,

03:05.830 --> 03:09.260
porque ya está en la carpeta de decoradores.

03:09.260 --> 03:11.720
Por supuesto que hay un decorador ahí.

03:11.720 --> 03:14.440
A continuación, voy a añadir mi carpeta de modelos, y en realidad,

03:14.440 --> 03:17.523
aquí, voy a mover tanto las interfaces de arrastrar y soltar y el modelo

03:17.523 --> 03:19.355
de proyecto allí, simplemente porque

03:19.355 --> 03:21.763
creo que las interfaces de arrastrar y soltar todos

03:21.763 --> 03:24.187
en el final son sólo las definiciones de cómo arrastrarse

03:24.187 --> 03:27.263
y soltar las clases deben ser similares.

03:27.263 --> 03:29.910
Al igual que el modelo de proyecto es la definición de cómo

03:29.910 --> 03:31.630
debe ser una clase de proyecto o cómo

03:31.630 --> 03:33.655
debe ser nuestro objeto de proyecto.

03:33.655 --> 03:38.530
Así que voy a nombrar a este arrastrar y soltar y esto aquí sólo proyecto

03:38.530 --> 03:42.610
y luego aquí voy a añadir una carpeta de utilidad para la utilidad

03:42.610 --> 03:44.860
y añadir mi validación en allí y luego

03:44.860 --> 03:49.690
una carpeta de estado y añadir el estado del proyecto a eso.

03:49.690 --> 03:52.400
Aquí voy a mantener el nombre de proyecto-estado sólo para evitar

03:52.400 --> 03:55.300
la confusión con este proyecto. ts file aquí.

03:55.300 --> 03:56.716
Técnicamente, eso no sería un

03:56.716 --> 03:59.216
problema, pero también quiero dejarlo claro aquí en

03:59.216 --> 04:00.990
este curso para que te sea más fácil ver

04:00.990 --> 04:02.640
en qué archivo estoy trabajando.

04:02.640 --> 04:05.640
Definitivamente, podrías cambiar el nombre de esto por el de sólo proyecto. ts aquí si

04:05.640 --> 04:07.320
quieres.

04:07.320 --> 04:09.662
Ahora, con esa refactorización y estas subcarpetas,

04:09.662 --> 04:12.069
por supuesto nuestras importaciones aquí están rotas,

04:12.069 --> 04:14.010
así que debemos arreglarlas.

04:14.010 --> 04:17.366
Las interfaces de arrastre y soltar se encuentran en la carpeta de modelos y ahora

04:17.366 --> 04:21.216
se llama simplemente arrastrar y soltar. ts.

04:21.216 --> 04:25.630
Y el modelo del proyecto también se encuentra en la carpeta de modelos y ahora se llama

04:25.630 --> 04:28.560
simplemente proyecto. ts.

04:28.560 --> 04:31.100
El estado del proyecto se encuentra en la carpeta

04:31.100 --> 04:34.040
state, la validación se encuentra en la carpeta util,

04:34.040 --> 04:36.896
y el decorador autobind se encuentra en decorators

04:36.896 --> 04:39.860
y se llama simplemente autobind.

04:39.860 --> 04:42.547
Con eso, si guardamos eso, se compila sin errores

04:42.547 --> 04:44.128
y ahora tenemos una estructura

04:44.128 --> 04:47.290
de carpetas más manejable y legible, diría yo.

04:47.290 --> 04:50.500
Con eso, vamos a continuar, no hemos terminado.

04:50.500 --> 04:52.130
Tenemos nuestro componente

04:52.130 --> 04:54.813
aquí, ahora para eso, voy a añadir una subcarpeta

04:54.813 --> 04:59.813
de componentes y en ella quiero tener mi archivo ts de componente de tablero

05:00.210 --> 05:05.210
base y luego mi archivo ts de elemento de proyecto, mi archivo ts de lista de proyecto

05:07.600 --> 05:12.110
y también el archivo ts de entrada de proyecto.

05:12.110 --> 05:14.430
Por supuesto, siempre se puede organizar de otra manera,

05:14.430 --> 05:17.631
pero creo que esto mantiene los archivos relacionados juntos.

05:17.631 --> 05:22.253
Así que podemos tomar esta clase base de componente abstracto aquí, cortarlo

05:23.830 --> 05:27.023
de app ts y moverlo al componente base.

05:29.610 --> 05:33.180
Así, y por supuesto, también igual que antes,

05:33.180 --> 05:37.810
añádelo a un espacio de nombres con el nombre App.

05:37.810 --> 05:41.120
Y luego moverlo a este espacio de nombres.

05:41.120 --> 05:43.890
Por supuesto, lo ajustaré antes de que tengamos que exportarlo

05:43.890 --> 05:46.171
para poder utilizarlo en otro archivo.

05:46.171 --> 05:49.800
Ese otro archivo, sin embargo, no será app. ts porque los archivos o

05:49.800 --> 05:53.044
las clases en las que utilicé el componente

05:53.044 --> 05:54.910
también se moverán.

05:54.910 --> 05:56.856
La clase de elemento de proyecto aquí, por ejemplo, voy

05:56.856 --> 06:00.164
a agarrar eso y moverlo a elemento de proyecto. ts, para ser precisos,

06:00.164 --> 06:04.550
allí también añadiré un namespace app y lo moveré al namespace

06:04.550 --> 06:06.680
app allí y luego exportaré esta

06:06.680 --> 06:09.060
clase también.

06:09.060 --> 06:11.413
Ahora, importante, esto se basa en el componente, y el otro,

06:12.310 --> 06:14.740
si ahora guardé esto, obtendríamos un error que el componente

06:14.740 --> 06:16.497
no se encuentra en el final por lo que aquí de

06:16.497 --> 06:19.353
nuevo, la necesidad de añadir esta importación donde tenemos ruta de

06:19.353 --> 06:24.772
referencia es igual y luego aquí es base-componente.

06:24.772 --> 06:24.772
ts.

06:24.772 --> 06:27.330
Esto es siempre una importación relativa aquí,

06:27.330 --> 06:29.130
así que como esto está en la misma carpeta,

06:29.130 --> 06:32.320
no tenemos que decir componentes barra aquí, porque no tenemos

06:32.320 --> 06:34.608
que ir a la carpeta de componentes en primer

06:34.608 --> 06:37.300
lugar este archivo, el archivo de elementos de proyecto,

06:37.300 --> 06:38.729
ya está en la carpeta de componentes

06:38.729 --> 06:40.617
por lo que relativa de este archivo componente

06:40.617 --> 06:44.913
base se importa sólo con su nombre aquí.

06:46.060 --> 06:48.030
Así que ahora el artículo del proyecto está aquí.

06:48.030 --> 06:51.963
Ahora, por supuesto, en la app. ts, también tenemos la lista de proyectos.

06:55.940 --> 07:00.662
Vamos a agarrar eso, moverlo al archivo ts de la lista de proyectos aquí y allí en un

07:00.662 --> 07:04.940
espacio de nombres App, y luego también aquí a la entrada del proyecto vamos

07:04.940 --> 07:07.050
a agarrar esto, cortarlo de aquí, de la

07:08.010 --> 07:14.480
aplicación de espacio de nombres en la aplicación.

07:14.480 --> 07:14.480
ts,

07:14.480 --> 07:17.097
y moverlo al archivo ts de entrada del proyecto y

07:17.097 --> 07:19.857
allí a un espacio de nombres de la aplicación.

07:20.750 --> 07:24.350
Ahora, importante al igual que antes, exportar esta clase aquí, el elemento

07:24.350 --> 07:27.550
de proyecto y también la lista de proyectos, por supuesto, todo

07:27.550 --> 07:30.200
tiene que ser exportado, con eso tenemos un montón de

07:30.200 --> 07:31.580
errores porque, por supuesto,

07:31.580 --> 07:34.343
todavía hay importaciones que faltan.

07:35.200 --> 07:39.930
En aplicación. ts, deberíamos importar todos estos componentes ahora, así que aquí

07:39.930 --> 07:42.934
deberíamos importar project-input. ts, lista de

07:42.934 --> 07:47.380
proyectos. ts, y luego guardar esto.

07:47.380 --> 07:50.240
Ahora, por supuesto, todavía se bloquea porque tenemos más

07:50.240 --> 07:51.087
cosas que faltan,

07:51.087 --> 07:53.192
en el proyecto de entrada estamos utilizando

07:53.192 --> 07:55.541
el componente al igual que en la lista de proyectos,

07:55.541 --> 07:57.780
por lo que al igual que lo hicimos en el elemento

07:57.780 --> 08:00.091
de proyecto, tenemos que añadir esa importación

08:00.091 --> 08:02.920
de componente base en el archivo ts de entrada del proyecto

08:02.920 --> 08:05.790
y también en el archivo ts de la lista de proyectos.

08:05.790 --> 08:08.665
Y con eso, compila sin errores y veamos

08:08.665 --> 08:10.880
si también funciona, si recargamos

08:10.880 --> 08:15.118
aquí y añado esto, es arrastrable y soltable, y todo eso

08:15.118 --> 08:16.540
parece funcionar

08:16.540 --> 08:19.480
como debería, y ahora dividimos esto

08:19.480 --> 08:22.340
en varios archivos.

08:22.340 --> 08:23.978
Al final seguimos teniendo un solo

08:23.978 --> 08:26.010
archivo, pero cuando trabajamos en nuestro

08:26.010 --> 08:28.110
código, ahora es mucho más manejable.

08:28.110 --> 08:30.978
Porque tenemos archivos más pequeños y concentrados en los que

08:30.978 --> 08:33.829
podemos encontrar rápidamente lo que buscamos y en los que no

08:33.829 --> 08:36.358
tenemos que desplazarnos por un archivo enorme para encontrar

08:36.358 --> 08:39.363
el lugar en el que queremos trabajar a continuación.
