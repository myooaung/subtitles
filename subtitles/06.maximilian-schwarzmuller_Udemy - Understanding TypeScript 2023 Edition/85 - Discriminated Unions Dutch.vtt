WEBVTT

00:02.210 --> 00:04.920
Verteller: Nu, een speciaal type typebeschermer,

00:04.920 --> 00:05.753
zou je kunnen zeggen,

00:05.753 --> 00:07.940
of iets dat je helpt met typebeschermers,

00:07.940 --> 00:10.000
is de gediscrimineerde unie.

00:10.000 --> 00:11.300
Wat is dat?

00:11.300 --> 00:13.310
Het is een patroon, dat u kunt gebruiken

00:13.310 --> 00:15.030
bij het werken met union-types,

00:15.030 --> 00:18.900
dat het implementeren van type guards eenvoudiger maakt.

00:18.900 --> 00:22.000
Het is beschikbaar wanneer u werkt met objecttypes.

00:22.000 --> 00:24.580
Ik zal je laten zien hoe het werkt.

00:24.580 --> 00:26.850
Laten we zeggen dat we een paar interfaces hebben,

00:26.850 --> 00:28.450
en dit zouden ook klassen kunnen zijn,

00:28.450 --> 00:29.950
maar hier ga ik voor interfaces om

00:29.950 --> 00:32.193
te laten zien dat het daar ook mee werkt.

00:33.170 --> 00:34.803
En daar heb ik mijn vogel, die

00:36.480 --> 00:38.830
een vliegsnelheid heeft, die van het type

00:38.830 --> 00:40.973
nummer moet zijn, laten we zeggen.

00:42.660 --> 00:45.890
En ik heb ook mijn paard, dat een grondsnelheid

00:45.890 --> 00:50.310
of een loopsnelheid heeft, die van type nummer moet

00:50.310 --> 00:51.913
zijn.

00:53.130 --> 00:55.430
Dus we hebben deze twee interfaces hier.

00:55.430 --> 00:58.800
Nu maken we ons eigen unie-type, dier,

00:58.800 --> 00:59.633
dat ofwel

01:00.750 --> 01:03.370
een vogel ofwel een paard is.

01:03.370 --> 01:05.743
En net als voorheen kunnen we een functie

01:06.740 --> 01:08.480
hebben, verplaats dier, die een

01:09.800 --> 01:13.040
dier als invoer neemt, dat van het type dier is, Dus met behulp

01:13.040 --> 01:14.800
van ons unie-type.

01:14.800 --> 01:19.800
En nu wil ik daarin zeggen bewegen met snelheid, en nu moet ik natuurlijk

01:19.990 --> 01:21.050
ofwel vliegende

01:21.050 --> 01:25.180
snelheid ofwel lopende snelheid openen.

01:25.180 --> 01:27.730
We hadden het natuurlijk ook gewoon snelheid kunnen noemen.

01:27.730 --> 01:30.840
Maar dit is slechts een vereenvoudigd voorbeeld van een echt geval

01:30.840 --> 01:33.900
waarmee u te maken kunt krijgen, waarbij u een aantal interfaces

01:33.900 --> 01:37.390
of objecten in het algemeen hebt, die een soort van verwant zijn, maar

01:37.390 --> 01:40.500
verschillende eigenschappen of methoden hebben.

01:40.500 --> 01:42.050
Dus hier is het de snelheidseigenschap,

01:42.050 --> 01:43.900
die eigenlijk anders is.

01:43.900 --> 01:46.780
Dus het heeft geen toegang tot vliegsnelheid, want natuurlijk

01:46.780 --> 01:49.240
hebben niet alle dieren een vliegsnelheid.

01:49.240 --> 01:51.210
Nu kunnen we doen wat we eerder hebben geleerd.

01:51.210 --> 01:56.063
We kunnen hier controleren of de vliegsnelheid bij dieren is.

01:58.240 --> 02:01.063
En als dat het geval is, kunnen we deze code uitvoeren.

02:01.960 --> 02:04.470
Nu is dit een aanpak die we kunnen volgen, maar

02:04.470 --> 02:07.430
hoe meer potentiële dieren we daar krijgen, hoe meer

02:07.430 --> 02:09.233
dingen we moeten controleren.

02:10.880 --> 02:14.100
We kunnen ons ook vergissen in deze string.

02:14.100 --> 02:15.810
We kunnen bijvoorbeeld een E vergeten

02:15.810 --> 02:18.460
en ons afvragen waarom dit niet werkt.

02:18.460 --> 02:20.410
Nu, we kunnen hier geen voorbeeld van gebruiken

02:20.410 --> 02:22.570
omdat ik breek met interfaces.

02:22.570 --> 02:27.490
Zoals ik heb uitgelegd, zal animal instance of bird niet werken omdat data

02:27.490 --> 02:29.680
een interface is, die niet is gecompileerd

02:29.680 --> 02:31.840
naar JavaScript.

02:31.840 --> 02:33.970
Dus bij runtime zal dit niet beschikbaar

02:33.970 --> 02:36.210
zijn als constructorfunctie.

02:36.210 --> 02:37.690
Dus daarom werkt dit niet.

02:37.690 --> 02:40.380
Nu kunnen we hier een gediscrimineerde unie bouwen

02:40.380 --> 02:42.460
door elke interface te geven.

02:42.460 --> 02:45.380
Dus elk object dat deel zou moeten uitmaken van

02:45.380 --> 02:47.130
de Unie, en extra eigendom.

02:47.130 --> 02:48.640
Je kunt elke naam gebruiken die je wilt.

02:48.640 --> 02:51.490
Vaak gebruik je hier soort, of type.

02:51.490 --> 02:55.090
Ik ga voor type, en noem deze vogel.

02:55.090 --> 02:57.480
Nu belangrijk, we verhandelen hier een interface.

02:57.480 --> 03:02.480
Dus dit is eigenlijk geen waarde voor de type eigenschap.

03:02.650 --> 03:05.410
Dit is in plaats daarvan een letterlijk type, zoals je geleerd

03:05.410 --> 03:09.110
hebt, waarbij type een string moet bevatten, die vogel moet zijn.

03:09.110 --> 03:10.880
Dit is dus een typetoewijzing,

03:10.880 --> 03:15.000
waarbij we de waarde die in het type kan worden opgeslagen, beperken

03:15.000 --> 03:17.590
tot precies deze string-waarde.

03:17.590 --> 03:19.810
En doe dan hetzelfde voor paard, alleen

03:19.810 --> 03:22.283
met paard als letterlijk type.

03:23.400 --> 03:25.060
Nu kunnen we hier, in

03:25.060 --> 03:27.550
onze functie, een switch statement

03:27.550 --> 03:29.840
gebruiken en overschakelen

03:29.840 --> 03:32.280
op dierpunt type.

03:32.280 --> 03:34.080
Elk dier heeft een type eigenschap

03:34.080 --> 03:36.330
omdat we die hebben toegevoegd aan alle interfaces

03:36.330 --> 03:38.350
waaruit ons dier bestaat.

03:38.350 --> 03:40.730
En dan hebben we hier een paar gevallen

03:40.730 --> 03:42.330
waar we zelfs auto completion

03:42.330 --> 03:44.990
krijgen omdat TypeScript en onze IDE begrijpen

03:44.990 --> 03:49.040
dat type alleen vogel of paard kan zijn.

03:49.040 --> 03:51.050
En als het een vogel is, dan

03:51.050 --> 03:55.003
kunnen we een variabele snelheid instellen op, laten

03:55.900 --> 03:58.860
we zeggen, de vliegsnelheid van het dier

03:59.880 --> 04:02.250
en daarna breken.

04:02.250 --> 04:05.183
Anders, als het om een paard gaat, stellen

04:06.830 --> 04:11.753
wij de snelheid gelijk aan de snelheid van het dier.

04:14.150 --> 04:17.490
En daarna kunnen we de console loggen,

04:17.490 --> 04:20.843
bewegend op snelheid plus snelheid.

04:22.490 --> 04:26.540
Als ik nu noem, dier verplaatsen met een dier dat ik hier on the

04:26.540 --> 04:30.300
fly maak, waarbij ik het type op vogel instel en ik alleen

04:30.300 --> 04:32.810
toesta om vogel of paard te gebruiken,

04:32.810 --> 04:34.930
dan moet ik mijn vliegsnelheid

04:36.140 --> 04:39.210
instellen en trouwens, TypeScript herkent zelfs

04:39.210 --> 04:42.050
dat een concept loopsnelheid hier om dat te

04:42.050 --> 04:44.220
proberen en dit op 10 in te stellen,

04:44.220 --> 04:48.980
klaagt het dat dit niet beschikbaar is voor type vogel.

04:48.980 --> 04:51.360
Als ik het op vliegsnelheid instel, werkt

04:51.360 --> 04:55.120
het wel, als we dat opslaan, voert het dit correct uit, en compileert

04:55.120 --> 04:57.700
het ook zonder fouten.

04:57.700 --> 04:59.530
Nu is dit een gediscrimineerde

04:59.530 --> 05:04.060
unie omdat we één gemeenschappelijke eigenschap hebben in elk object

05:04.060 --> 05:08.040
dat onze unie vormt, die dat object beschrijft, zodat we deze

05:08.040 --> 05:11.490
eigenschap die dit object beschrijft kunnen gebruiken

05:11.490 --> 05:16.490
in onze controle om 100% typeveiligheid te hebben en te begrijpen welke eigenschappen

05:16.770 --> 05:21.930
beschikbaar zijn voor zo'n object en welke niet.

05:21.930 --> 05:24.500
Dit is dus een nieuw bruikbaar patroon dat je kunt

05:24.500 --> 05:28.060
gebruiken bij het werken met objecten en met union-typen.

05:28.060 --> 05:30.340
En het werkt zelfs met interfaces,

05:30.340 --> 05:33.630
want deze interface dwingt elk object dat je bouwt

05:33.630 --> 05:37.050
op basis van deze interface, om dit type te hebben.

05:37.050 --> 05:39.400
Dus in plaats van te controleren op het bestaan

05:39.400 --> 05:41.200
van een bepaalde eigenschap, of in plaats

05:41.200 --> 05:43.660
van instantie van te gebruiken, gebruiken we een

05:43.660 --> 05:46.310
eigenschap waarvan we weten dat die bestaat om te controleren

05:46.310 --> 05:49.020
met welk type objecten we werken.

05:49.020 --> 05:51.930
We elimineren ook het gevaar van verkeerd typen, omdat

05:51.930 --> 05:54.730
TypeScript begrijpt dat de enige gevallen die we hier

05:54.730 --> 05:58.480
kunnen hebben, voor diertype, vogel en paard zijn en daarom geeft het ons

05:58.480 --> 06:00.810
deze kunst van het aanvullen en als je een typefout

06:00.810 --> 06:02.770
zou introduceren, zouden we onmiddellijk

06:02.770 --> 06:04.690
een fout krijgen.

06:04.690 --> 06:06.780
Dit is dus een zeer nuttig patroon bij

06:06.780 --> 06:09.333
het werken met objecten en unie-typen.
