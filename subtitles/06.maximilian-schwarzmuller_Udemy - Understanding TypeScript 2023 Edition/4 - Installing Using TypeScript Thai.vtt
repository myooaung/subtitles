WEBVTT

00:02.160 --> 00:06.440
ผู้สอน: นี่คือตัวอย่างเดียวกันโดยพื้นฐานแล้วในโครงการจริง

00:06.440 --> 00:08.550
คุณจะพบโปรเจ็กต์ง่ายๆ ไฟล์ดัชนี

00:08.550 --> 00:13.340
HTML และไฟล์ JavaScript ที่แนบมากับวิดีโอนี้ในไฟล์ย่อย

00:13.340 --> 00:16.900
คุณสามารถเปิดไฟล์นี้แล้วเปิดไฟล์ดัชนี HTML

00:16.900 --> 00:20.890
คุณยังสามารถเปิดรหัสในโปรแกรมแก้ไขข้อความใดก็ได้ที่คุณต้องการ

00:20.890 --> 00:22.160
ที่นี่ ฉันใช้ VisualStudioCode

00:22.160 --> 00:26.250
และฉันจะกลับมาที่การตั้งค่าที่ถูกต้องของฉันในภายหลังในโมดูลนี้

00:26.250 --> 00:31.180
สำหรับตอนนี้ คุณสามารถเปิดไฟล์ข้อความทั้งสองนี้ด้วยโปรแกรมแก้ไขข้อความใดก็ได้

00:31.180 --> 00:34.110
สิ่งที่คุณจะพบในนั้นคือไฟล์ JavaScript

00:34.110 --> 00:37.000
ซึ่งโต้ตอบกับไฟล์ HTML ดัชนีนี้

00:37.000 --> 00:41.050
จากนั้นไฟล์ดัชนี HTML คุณจะพบสองอินพุตและปุ่มและไฟล์

00:41.050 --> 00:43.698
JavaScript ใด ๆ ที่ถูกนำเข้าที่นี่

00:43.698 --> 00:45.843
โดยพื้นฐานแล้วเราจะเข้าถึงองค์ประกอบเหล่านี้

00:45.843 --> 00:53.830
จากนั้นเรามีฟังก์ชันที่นี่และตัวฟังเหตุการณ์บนปุ่มที่เรียกใช้ฟังก์ชันและบันทึกผลลัพธ์ของฟังก์ชันที่นี่ในคอนโซล

00:53.830 --> 00:56.750
ตอนนี้ หากเราเปิดไฟล์ดัชนี HTML นั้นโดยดับเบิลคลิกที่ไฟล์นั้นใน

00:56.750 --> 01:00.701
Windows Explorer หรือ Mac Finder เพื่อเปิดขึ้นมาในเบราว์เซอร์

01:00.701 --> 01:05.150
สิ่งที่คุณจะเห็นคือสิ่งนี้

01:05.150 --> 01:07.250
สองอินพุตและปุ่มเพิ่ม และที่นี่

01:07.250 --> 01:11.170
ฉันเปิดเครื่องมือสำหรับนักพัฒนาเบราว์เซอร์ด้วย

01:11.170 --> 01:13.760
ตัวอย่างเช่น ถ้าคุณป้อน 10 และ 5 ที่นี่

01:13.760 --> 01:16.640
คุณอาจคาดว่าจะเห็น 15 เป็นผลลัพธ์ที่นี่ทางด้านขวา

01:16.640 --> 01:19.420
แต่คุณจะเห็น 105 แทน

01:19.420 --> 01:23.460
และนี่แสดงให้เราเห็นจุดอ่อนของ JavaScript ที่นี่

01:23.460 --> 01:25.890
นี่ไม่ใช่ข้อผิดพลาดทางเทคนิค

01:25.890 --> 01:31.640
ไม่ใช่ข้อผิดพลาดที่เกิดขึ้น แต่เป็นข้อผิดพลาดเชิงตรรกะในแอปพลิเคชันของเรา

01:31.640 --> 01:33.986
ตอนนี้ข้อผิดพลาดนี้มาจากไหน

01:33.986 --> 01:37.490
ที่นี่ใน JavaScript ฉันเข้าถึงอินพุตทั้งสองนี้และเมื่อคลิกปุ่ม

01:37.490 --> 01:45.300
ในตอนท้ายฉันได้รับค่าขององค์ประกอบอินพุตทั้งสองและส่งต่อที่นี่เพื่อเพิ่ม

01:45.300 --> 01:46.970
และที่นี่ สิ่งสำคัญคือต้องรู้ว่าใน

01:46.970 --> 01:50.100
JavaScript เมื่อคุณเข้าถึงค่าขององค์ประกอบอินพุต

01:50.100 --> 01:53.130
ค่านั้นจะเป็นสตริงเสมอ

01:53.130 --> 01:55.790
เสมอไม่ว่าจะเป็นอินพุตประเภทไหนก็ตาม

01:55.790 --> 01:59.633
หากเป็นหมายเลขประเภทหรือไม่ จะเป็นสตริงเสมอ

02:00.645 --> 02:03.995
ดังนั้นฉันจึงส่งสตริงสองสตริงไปยังจุดสิ้นสุดของฟังก์ชันนี้

02:03.995 --> 02:05.890
และถ้าคุณเพิ่มสองสตริงใน JavaScript

02:05.890 --> 02:09.570
สตริงเหล่านั้นจะเชื่อมกันแทนที่จะเพิ่มทางคณิตศาสตร์

02:09.570 --> 02:14.210
ซึ่งเป็นเหตุผลที่เราเห็น 105, 10 และ 5 ต่อกัน

02:14.210 --> 02:17.090
นี่เป็นปัญหาของ JavaScript ที่นี่

02:17.090 --> 02:19.980
และนี่คือสิ่งที่ TypeScript สามารถช่วยเราได้

02:19.980 --> 02:22.360
ตอนนี้ไม่มี TypeScript เราสามารถเพิ่ม

02:22.360 --> 02:24.380
if ตรวจสอบที่นี่และตรวจสอบว่าประเภทของ

02:24.380 --> 02:28.048
num เท่ากับจำนวนหรือไม่

02:28.048 --> 02:33.048
และถ้าประเภทของเลขสองเท่ากับตัวเลข และถ้าเป็นกรณีนั้น ฉันจะกลับการคำนวณของฉันแบบนี้

02:34.030 --> 02:43.304
ไม่เช่นนั้นฉันอาจโยนข้อผิดพลาด หรืออย่างน้อยฉันก็แปลงทั้งสองเป็นตัวเลขโดยใส่เครื่องหมายบวกไว้หน้าพารามิเตอร์แต่ละตัวที่นี่

02:43.304 --> 02:47.428
.

02:47.428 --> 02:50.510
นี่คือโค้ดบางส่วนที่เราสามารถเขียนได้

02:50.510 --> 02:53.023
อาจจะละเอียดกว่านี้เล็กน้อยใน JavaScript

02:53.023 --> 02:57.130
และด้วยเหตุนี้เราจะทำให้แน่ใจว่าเราแปลงตัวเลขหรือข้อมูลที่ป้อนเป็นตัวเลข

02:57.130 --> 03:00.670
หากยังไม่ใช่ตัวเลข

03:00.670 --> 03:02.430
ถ้าผมโหลดมันซ้ำและทำซ้ำ

03:02.430 --> 03:07.590
ตอนนี้เราได้ 15 เพราะรหัสที่เราเปลี่ยน

03:07.590 --> 03:09.350
แน่นอนว่าเราสามารถทำได้ใน JavaScript

03:09.350 --> 03:10.970
และนี่คือวานิลลา JavaScript

03:10.970 --> 03:13.440
ไม่มี TypeScript-ish เกี่ยวกับมัน

03:13.440 --> 03:19.048
แต่เราเขียนโค้ดเพิ่มเติมสำหรับข้อผิดพลาดซึ่งอันที่จริงแล้วฉันต้องการป้องกันตั้งแต่แรก

03:19.048 --> 03:22.210
ฉันไม่ต้องการให้สิ่งนี้เกิดขึ้น

03:22.210 --> 03:26.260
ฉันต้องการให้แน่ใจว่าเราไม่สามารถส่งสตริงที่นี่เพื่อบวกได้

03:26.260 --> 03:31.020
เพราะการบวกควรเป็นฟังก์ชันที่ทำงานกับตัวเลขเท่านั้น

03:31.020 --> 03:35.650
เพื่อที่เราจะได้ไม่ต้องมาเช็คว่าได้เลขหรือเปล่า

03:35.650 --> 03:38.500
ดังนั้นฉันจึงต้องการให้ฟังก์ชันนี้อยู่ในสถานะเดิม

03:38.500 --> 03:41.630
ฉันต้องการฟังก์ชันนี้ตรงนี้ แบบนี้

03:41.630 --> 03:44.003
และนั่นคือสิ่งที่ TypeScript สามารถช่วยเราได้

03:45.088 --> 03:45.921
ดังนั้น TypeScript

03:45.921 --> 03:48.900
สามารถช่วยเราในสถานการณ์เช่นที่ฉันเพิ่งแสดงให้เห็น

03:48.900 --> 03:52.690
ตอนนี้เพื่อดูว่ามันช่วยเราได้อย่างไร มาติดตั้งกัน

03:52.690 --> 03:56.590
ดังนั้นใน typescriptlang org คุณสามารถคลิกที่ดาวน์โหลด

03:56.590 --> 03:58.540
และคุณจะได้เรียนรู้วิธีติดตั้งที่นั่น

03:58.540 --> 04:02.880
และเราจะติดตั้งด้วยคำสั่งนี้ซึ่งใช้เครื่องมือ NPM และเครื่องมือ

04:02.880 --> 04:06.750
NPM เป็นส่วนหนึ่งของแพ็คเกจ Node JS

04:06.750 --> 04:10.210
ดังนั้น แม้ว่าเราจะไม่เขียนโค้ด Node JS ที่นี่

04:10.210 --> 04:17.770
แต่เรายังคงต้องติดตั้ง Node JS เพียงเพราะเบื้องหลังจะถูกใช้งานโดยเครื่องมือบางอย่างที่เราใช้

04:17.770 --> 04:21.780
และเมื่อเราติดตั้ง Node JS เรายังติดตั้ง NPM ซึ่งเป็น Node

04:21.780 --> 04:24.956
Package Manager ซึ่งเป็นเครื่องมือที่เราสามารถใช้ติดตั้ง

04:24.956 --> 04:29.200
TypeScript ทั่วโลกบนเครื่องของเรา

04:29.200 --> 04:34.220
เพียงเข้าไปที่ nodejs org และที่นั่น ให้ติดตั้งเวอร์ชันล่าสุดที่คุณพบที่นี่

04:34.220 --> 04:35.723
เพียงคลิกที่ปุ่มนี้

04:36.586 --> 04:39.420
จากนั้นจะดาวน์โหลดและติดตั้ง หรือคุณสามารถแนะนำตัวติดตั้งนั้นได้

04:39.420 --> 04:42.360
รองรับทุกระบบปฏิบัติการ

04:42.360 --> 04:47.936
และเมื่อคุณติดตั้ง Node JS แล้ว คุณจะสามารถเรียกใช้คำสั่งนี้ได้

04:47.936 --> 04:54.800
เพียงเปิดเทอร์มินัลปกติหรือพรอมต์คำสั่งแล้วคัดลอกในคำสั่งนั้น

04:54.800 --> 04:57.223
ข้อสำคัญ บน Mac และ Linux คุณอาจต้องเพิ่ม sudo

04:57.223 --> 04:59.412
ข้างหน้าเพื่อรับสิทธิ์ที่ถูกต้อง

04:59.412 --> 05:02.810
บน Windows จะไม่จำเป็น

05:02.810 --> 05:05.100
ดังนั้น ตรวจสอบให้แน่ใจว่าคุณติดตั้ง TypeScript

05:05.100 --> 05:06.810
ด้วยคำสั่งนี้แล้ว

05:06.810 --> 05:09.372
ป้อนรหัสผ่านของคุณในกรณีที่คุณควรได้รับพร้อมท์

05:09.372 --> 05:12.176
และด้วยเหตุนี้ คุณได้ติดตั้ง TypeScript ทั่วโลกในเครื่องของคุณ

05:12.176 --> 05:15.430
แล้วนี่หมายความว่าอย่างไร

05:15.430 --> 05:17.696
ติดตั้ง TypeScript แล้ว

05:17.696 --> 05:22.750
ตอนนี้โปรดจำไว้ว่า TypeScript เป็นภาษาโปรแกรม แต่เป็นเพียงภาษาโปรแกรมเท่านั้นที่ใช้งานได้

05:22.750 --> 05:25.212
เพราะเรามีคอมไพเลอร์นี้ด้วย ซึ่งเป็นเครื่องมือที่คอมไพล์เป็น

05:25.212 --> 05:28.137
JavaScript

05:28.137 --> 05:36.116
ในท้ายที่สุด สิ่งที่เราติดตั้งที่นี่ มันคือคอมไพเลอร์และทุกสิ่งที่จำเป็นต้องรู้เพื่อทำความเข้าใจโค้ด

05:36.116 --> 05:39.020
TypeScript เพื่อแปลงเป็น JavaScript

05:39.020 --> 05:41.036
ด้วยเหตุนี้ เราจึงติดตั้งคอมไพเลอร์แล้ว

05:41.036 --> 05:44.460
และเราสามารถเรียกใช้คำสั่ง TSC ได้ทันที ซึ่งจะเรียกคอมไพเลอร์

05:44.460 --> 05:47.210
TypeScript นี้เพื่อคอมไพล์ไฟล์ TypeScript

05:47.210 --> 05:50.870
เป็น JavaScript

05:50.870 --> 05:54.140
เพื่อให้เห็นสิ่งนี้ในโปรเจ็กต์ที่เราทำ ลองเพิ่มไฟล์ใหม่โดยใช้

05:54.140 --> 05:56.563
ts ตัวอย่างเช่น

05:56.563 --> 05:58.677
ชื่ออะไรก็ได้ แต่นามสกุลควรเป็น . ts ซึ่งย่อมาจาก

05:58.677 --> 06:03.677
TypeScript

06:05.100 --> 06:07.651
ตอนนี้ เรามาคัดลอกโค้ด JavaScript

06:07.651 --> 06:09.850
นั้นลงในไฟล์ TypeScript

06:09.850 --> 06:14.280
ที่นี่ใน VisualStudioCode ฉันได้รับข้อผิดพลาดทันที ซึ่งตอนนี้เราจะแก้ไข

06:14.280 --> 06:16.379
และนี่คือข้อดีอย่างหนึ่งของ TypeScript

06:16.379 --> 06:18.915
หากคุณใช้ IDE ที่ถูกต้อง และคำแนะนำที่ชัดเจนของฉันคือ

06:18.915 --> 06:24.420
VisualStudioCode และฉันจะกลับมาอีกครั้งในภายหลัง

06:24.420 --> 06:27.810
จากนั้นคุณจะได้รับการสนับสนุนที่ดีใน IDE

06:27.810 --> 06:30.230
เมื่อทำงานในไฟล์ TypeScript

06:30.230 --> 06:36.910
โดยทั่วไปแล้ว มันให้ TypeScript วิเคราะห์โค้ดของฉันและระบุจุดอ่อนบางอย่าง

06:36.910 --> 06:39.720
ซึ่งดีมากเพราะนั่นคือสิ่งที่ฉันต้องการ

06:39.720 --> 06:42.110
ในตัวอย่างนี้ ผมขอลบไฟล์ JavaScript

06:42.110 --> 06:44.003
เท่านั้น JS

06:45.952 --> 06:48.360
และด้วยเหตุนี้ ข้อผิดพลาดบางส่วนจึงหมดไป

06:48.360 --> 06:50.539
เนื่องจากระบุว่ามีการใช้ค่าคงที่บางอย่างและอื่นๆ

06:50.539 --> 06:53.230
ในหลายไฟล์

06:53.230 --> 06:55.787
แต่ก็ยังทำให้ฉันมีข้อผิดพลาดที่นั่น

06:55.787 --> 07:00.108
และสิ่งที่คุณเห็น เช่น ไม่แน่ใจว่ามีคุณสมบัติค่าจริงหรือไม่

07:00.108 --> 07:03.200
นั่นเป็นข้อผิดพลาดที่ฉันไม่เคยพิจารณามาก่อนใน

07:03.200 --> 07:05.720
JavaScript แต่มันเป็นความจริง

07:05.720 --> 07:08.350
ฉันกำลังเลือกองค์ประกอบตาม ID ที่นี่

07:08.350 --> 07:11.680
ตอนนี้ TypeScript ไม่สามารถรู้ได้ว่าจะใช้งานได้จริงหรือไม่

07:11.680 --> 07:13.160
บางทีฉันอาจจะพิมพ์ผิดที่นี่

07:13.160 --> 07:15.940
ในกรณีนี้ ฉันไม่สามารถเลือกองค์ประกอบได้

07:15.940 --> 07:17.704
องค์ประกอบนี้จะไม่มีอยู่บนหน้า

07:17.704 --> 07:20.164
ดังนั้นเราจึงอาจพิมพ์ผิดและ TypeScript ไม่วิเคราะห์รหัส

07:20.164 --> 07:22.472
HTML ของคุณเพื่อดูว่าใช้งานได้หรือไม่

07:22.472 --> 07:24.468
ประการหนึ่งสิ่งนี้อาจล้มเหลว

07:24.468 --> 07:30.910
แต่แม้ว่าจะประสบความสำเร็จและเราเลือกองค์ประกอบที่นั่น ก็ไม่จำเป็นต้องเป็นองค์ประกอบอินพุต

07:30.910 --> 07:37.450
อาจเป็นองค์ประกอบอื่นก็ได้ และองค์ประกอบ HTML ส่วนใหญ่ไม่มีคุณสมบัติค่าที่คุณสามารถเข้าถึงได้

07:37.450 --> 07:38.630
และนี่เป็นสิ่งที่ดีมาก

07:38.630 --> 07:41.372
TypeScript บังคับให้เราต้องชัดเจนมากขึ้น

07:41.372 --> 07:44.060
ชัดเจนมากขึ้นเกี่ยวกับความตั้งใจของเรา

07:44.060 --> 07:46.130
และตรวจสอบรหัสของเราอีกครั้ง

07:46.130 --> 07:49.820
และตัวอย่างที่นี่ และคุณไม่จำเป็นต้องเข้าใจไวยากรณ์ทั้งหมดนั้น

07:49.820 --> 07:52.172
เราจะเรียนรู้ทีละขั้นตอนตลอดหลักสูตร

07:52.172 --> 08:00.080
แต่ตัวอย่างที่นี่ เราสามารถแจ้งให้ TypeScript ทราบว่าเราแน่ใจว่าจะได้รับองค์ประกอบโดยการเพิ่มเครื่องหมายอัศเจรีย์

08:00.080 --> 08:04.170
โดยทั่วไปจะบอก TypeScript ว่าสิ่งนี้จะไม่ให้ผลเป็นโมฆะ

08:04.170 --> 08:06.370
สิ่งนี้จะพบองค์ประกอบเสมอ

08:06.370 --> 08:10.350
และในฐานะนักพัฒนา แน่นอนว่าฉันรู้ว่าสิ่งนี้จะพบองค์ประกอบเสมอ

08:10.350 --> 08:11.920
เพราะฉันตรวจสอบ ID ซ้ำแล้วซ้ำอีก

08:11.920 --> 08:14.763
และพบว่าใช่ ฉันมี ID นั้นอยู่ที่นี่

08:15.610 --> 08:19.500
นอกจากนี้ ฉันยังรู้ว่ามันจะเป็นองค์ประกอบอินพุตเสมอ

08:19.500 --> 08:22.408
ดังนั้นเราจึงสามารถใช้เป็นองค์ประกอบอินพุต HTML

08:22.408 --> 08:25.470
ซึ่งเป็นไวยากรณ์ที่เรียกว่า typecasting ซึ่งฉันจะอธิบายในรายละเอียดในภายหลัง

08:25.470 --> 08:30.327
เพื่อให้ TypeScript รู้ว่าองค์ประกอบประเภทใด

08:30.327 --> 08:32.926
เราสามารถใช้สิ่งนี้กับองค์ประกอบที่สองได้เช่นกัน

08:32.926 --> 08:35.650
เพื่อให้ชัดเจนจริงๆ นี่คือไวยากรณ์

08:35.650 --> 08:37.510
TypeScript

08:37.510 --> 08:39.520
ฉันสามารถใช้เครื่องหมายอัศเจรีย์นี้ที่นี่

08:39.520 --> 08:41.600
และฉันสามารถใช้ typecasting ที่นี่ได้

08:41.600 --> 08:44.786
เพราะเราอยู่ในไฟล์ . ts เราอยู่ในไฟล์ TypeScript

08:44.786 --> 08:48.380
เราจะรวบรวมสิ่งนี้เป็น JavaScript

08:48.380 --> 08:51.050
สิ่งนี้จะไม่ทำงานในวานิลลา JavaScript

08:51.050 --> 08:53.427
ไม่สามารถใช้ได้ที่นั่น

08:53.427 --> 08:56.300
ด้วยสิ่งนี้ เราถูกบังคับให้ชัดเจนมากขึ้นเกี่ยวกับความตั้งใจของเรา

08:56.300 --> 08:58.460
และคิดถึงโค้ดของเราจริงๆ และตรวจสอบอีกครั้ง

08:58.460 --> 09:01.060
ซึ่งดีมาก

09:01.060 --> 09:03.160
แต่นั่นไม่ใช่ข้อได้เปรียบที่ใหญ่ที่สุด

09:04.270 --> 09:06.820
ข้อได้เปรียบที่ใหญ่ที่สุดคือการเพิ่มประเภท

09:06.820 --> 09:09.630
นั่นคือสิ่งที่ทำให้ TypeScript เป็นชื่อของมัน

09:09.630 --> 09:14.204
และที่นี่ฉันไม่ได้พูดอะไรเกี่ยวกับประเภทของข้อมูลที่ฟังก์ชันนี้ดำเนินการอยู่

09:14.204 --> 09:17.886
ถ้าเราวางเมาส์เหนือหนึ่งในพารามิเตอร์เหล่านี้

09:17.886 --> 09:20.126
เราจะเห็นสิ่งนี้ที่นี่

09:20.126 --> 09:22.828
และท้ายที่สุด นี่คือ TypeScript ที่บอกเราว่า

09:22.828 --> 09:24.880
"ฉันไม่รู้ว่ามีอะไรอยู่ในนั้น อาจเป็นค่าประเภทใดก็ได้

09:24.880 --> 09:27.162
ตอนนี้เราสามารถเพิ่มประเภทที่ชัดเจนยิ่งขึ้นในไฟล์ TypeScript

09:27.162 --> 09:33.806
ดังนั้นไม่ได้อยู่ในไฟล์ JavaScript แต่อยู่ในไฟล์ TypeScript โดยเพิ่มเครื่องหมายโคลอนที่นี่แล้วระบุประเภท

09:33.806 --> 09:38.580
ตัวอย่างเช่น หมายเลข.

09:38.580 --> 09:40.730
ทำโน่นทำนี่ไปเรื่อย

09:40.730 --> 09:43.300
ด้วยไวยากรณ์พิเศษนี้ซึ่ง TypeScript

09:43.300 --> 09:45.246
ซึ่งคอมไพเลอร์นี้เข้าใจ เรากำลังบอก

09:45.246 --> 09:50.960
TypeScript ว่านี่จะเป็นหมายเลขประเภทและนี่จะเป็นหมายเลขประเภท

09:50.960 --> 09:54.010
และตอนนี้เราได้รับข้อผิดพลาดที่นี่อีกครั้ง

09:54.010 --> 09:56.126
และเราไม่ได้รับข้อผิดพลาดนี้ใน

09:56.126 --> 09:58.060
IDE อย่างไรก็ตาม

09:58.060 --> 09:59.370
เราเข้าใจเช่นกันหากเราพยายามคอมไพล์โค้ดนี้

09:59.370 --> 10:01.940
เพราะนั่นคือสิ่งที่เราต้องทำในท้ายที่สุด

10:01.940 --> 10:03.820
ใช่ไหม

10:03.820 --> 10:05.326
ตอนนี้เพื่อรวบรวมสิ่งนี้ฉันจะเปิดเทอร์มินัล

10:05.326 --> 10:08.670
และที่นี่ฉันเพิ่งเปิดเทอร์มินัลหรือพรอมต์คำสั่งซึ่งรวมอยู่ใน

10:08.670 --> 10:10.760
IDE นี้

10:10.760 --> 10:13.683
เป็นพรอมต์คำสั่งของระบบปกติ

10:14.947 --> 10:19.533
เทอร์มินัลคำสั่งระบบปกติที่ฉันใช้ที่นี่เพิ่งนำทางไปยังโฟลเดอร์นี้แล้ว

10:20.510 --> 10:22.446
ดังนั้น หากคุณไม่ได้ใช้เทอร์มินัล

10:22.446 --> 10:30.265
IDE ในตัว คุณสามารถใช้เทอร์มินัลปกติได้ แต่ให้นำซีดีไปยังโฟลเดอร์เริ่มต้นที่แยกออกมาซึ่งคุณเพิ่มไฟล์

10:30.265 --> 10:33.960
TypeScript ของคุณ

10:33.960 --> 10:36.300
และเมื่อคุณอยู่ในโฟลเดอร์นั้นแล้ว คุณสามารถเรียกใช้ TSC ได้

10:36.300 --> 10:38.888
ซึ่งจะเรียกใช้คอมไพเลอร์ TypeScript

10:38.888 --> 10:42.980
ที่เราติดตั้งไว้ก่อนหน้านี้โดยใช้ dash ts ท.

10:42.980 --> 10:47.980
และถ้าคุณเรียกใช้สิ่งนี้ คุณจะได้รับข้อผิดพลาดจริงๆ

10:47.990 --> 10:50.728
คุณจะยังคงได้รับไฟล์ JavaScript เนื่องจากโดยค่าเริ่มต้น

10:50.728 --> 10:53.267
TypeScript จะยังคงคอมไพล์เป็น JavaScript

10:53.267 --> 11:00.050
คุณจะได้เรียนรู้วิธีระงับสิ่งนี้ในภายหลังในหลักสูตรนั้น

11:00.050 --> 11:02.900
แต่มันให้ข้อผิดพลาดของคอมไพเลอร์แก่คุณในขณะที่ทำเช่นนั้น

11:02.900 --> 11:09.070
มันบอกคุณว่าอาร์กิวเมนต์ของสตริงประเภทไม่สามารถกำหนดให้กับพารามิเตอร์ของประเภทตัวเลขได้

11:09.070 --> 11:18.930
ดังนั้นปัญหาที่นี่คือ TypeScript เข้าใจว่าสิ่งที่เราได้รับจากคุณสมบัติค่าขององค์ประกอบอินพุตของเราจะเป็นสตริง

11:18.930 --> 11:23.130
เรายังเห็นสิ่งนี้ที่นี่ใน IDE

11:23.130 --> 11:24.786
และเราไม่สามารถส่งนี่ไปบวกได้

11:24.786 --> 11:28.130
เพราะตรงนั้น เราไม่ต้องการสตริง เราต้องการตัวเลข

11:28.130 --> 11:33.600
เราจึงต้องแก้ไขโดย เช่น แปลงเป็นตัวเลขตรงนี้ด้วยการบวก

11:33.600 --> 11:36.790
และทันทีที่เราทำเช่นนี้ เราสามารถคอมไพล์โค้ดนี้อีกครั้งโดยทำซ้ำคำสั่งนั้น

11:36.790 --> 11:42.406
และตอนนี้โค้ดก็คอมไพล์โดยไม่มีข้อผิดพลาด

11:42.406 --> 11:53.090
มันให้สิ่งนี้แก่เราโดยใช้ TypeScript ไฟล์ JavaScript และตอนนี้มันแสดงข้อผิดพลาดอีกครั้งเนื่องจากไม่เข้าใจว่าจะไม่ใช้ทั้งสองไฟล์พร้อมกันที่นี่

11:54.028 --> 11:58.530
อีกครั้ง นี่คือสิ่งที่จะดีขึ้นในภายหลังในหลักสูตรเมื่อเรากำหนดค่านี้

11:58.530 --> 12:00.428
เราสามารถเพิกเฉยต่อสิ่งนี้ได้ในตอนนี้

12:00.428 --> 12:01.261
ดังนั้นมันจึงให้ไฟล์นี้แก่ฉัน

12:02.588 --> 12:04.348
และถ้าเราเปิดสิ่งนี้ เราจะเห็นสิ่งที่น่าสนใจในที่นี่

12:04.348 --> 12:06.210
เราเห็นว่าที่นั่นแน่นอนประเภทของเราหายไป

12:06.210 --> 12:08.690
ความหล่อนี่หายไปเลย

12:08.690 --> 12:11.280
เรามีวานิลลา JavaScript อีกครั้ง

12:11.280 --> 12:13.308
ดังนั้นหากเราดูไฟล์ TypeScript ของเราที่นี่

12:13.308 --> 12:16.250
เราจะเห็นว่าเรามีส่วนเพิ่มเติมที่ดีทั้งหมดเหล่านี้

12:16.250 --> 12:18.786
แต่อย่างที่ฉันได้กล่าวไปแล้วนี่เป็นเพียงคุณสมบัติ TypeScript เท่านั้น

12:18.786 --> 12:24.600
เมื่อคุณคอมไพล์เป็น JavaScript พวกมันจะถูกใช้เพื่อประเมินโค้ดของคุณและค้นหาข้อผิดพลาดที่อาจเกิดขึ้น

12:24.600 --> 12:26.770
แต่หลังจากนั้นพวกมันจะถูกแยกออกและเราจะได้รับ JavaScript

12:26.770 --> 12:29.090
ตามปกติเป็นเอาต์พุต

12:29.090 --> 12:33.960
ตอนนี้เราสามารถไปที่ไฟล์ HTML ดัชนีของเราและนำเข้าโดยใช้

12:33.960 --> 12:37.010
ts js และที่สำคัญ

12:37.010 --> 12:41.230
นำเข้าไฟล์ JavaScript เสมอ เนื่องจากเบราว์เซอร์ไม่สามารถเรียกใช้

12:41.230 --> 12:43.550
TypeScript

12:43.550 --> 12:45.990
เราจำเป็นต้องนำเข้าผลลัพธ์ของการรวบรวมของเรา

12:45.990 --> 12:49.480
และในตอนนี้ หากเราโหลดสิ่งนี้ซ้ำ เราก็มีโค้ดที่ใช้งานได้

12:49.480 --> 12:52.108
เพราะตอนนี้เรามีโค้ด JavaScript

12:52.108 --> 13:01.110
ที่เหมาะสมแล้ว ซึ่งเราแก้ไขปัญหานี้โดยการส่งอินพุตของเราก่อนที่เราจะส่งต่อไปยังฟังก์ชัน

13:01.110 --> 13:06.087
แต่เราสามารถแก้ไขปัญหาเหล่านี้ได้เนื่องจากคำอธิบายประกอบประเภทของเราที่นี่

13:06.087 --> 13:08.100
และอย่างที่คุณเห็น เราต้องเขียนส่วนอื่นๆ

13:08.100 --> 13:10.720
ของโค้ดด้วยวิธีที่สะอาดขึ้นเช่นกัน

13:10.720 --> 13:13.220
และนั่นคือสาเหตุที่ TypeScript นั้นยอดเยี่ยมมาก

13:13.220 --> 13:15.400
มันบังคับให้เราเขียนโค้ดที่ดีขึ้น

13:15.400 --> 13:17.880
สะอาดขึ้น และเกิดข้อผิดพลาดน้อยลง
