WEBVTT

00:02.130 --> 00:03.970
Instructor: Als erstes können wir hier unseren

00:03.970 --> 00:06.480
Entwicklungsserver mit npm start starten, und diesen Prozess

00:06.480 --> 00:08.440
sollten wir weiterlaufen lassen, weil er unsere

00:08.440 --> 00:10.940
Dateien auf Änderungen überwacht.

00:10.940 --> 00:13.270
Und wenn sich etwas ändert, d. h. wenn Sie eine

00:13.270 --> 00:15.620
bestimmte Änderung speichern, werden die

00:15.620 --> 00:17.776
Codetypen zu JavaScript neu kompiliert,

00:17.776 --> 00:20.090
JSX wird zu JavaScript neu kompiliert, und

00:20.090 --> 00:22.500
am Ende wird Ihre React-Anwendung erstellt

00:22.500 --> 00:25.750
und auf dem lokalen Host 3000 bereitgestellt, auf dem Sie im

00:25.750 --> 00:27.630
Moment nicht viel sehen.

00:27.630 --> 00:29.430
Sie können hier in der Dev-Konsole sehen, dass

00:29.430 --> 00:31.800
es aufgrund dieser Ausgabe hier zu funktionieren scheint.

00:31.800 --> 00:32.900
Man sieht natürlich

00:32.900 --> 00:34.340
nicht viel, weil wir hier in

00:34.340 --> 00:36.700
App nichts rendern. tsx im Moment.

00:36.700 --> 00:38.170
Das wird sich natürlich ändern.

00:38.170 --> 00:39.420
Jetzt können wir

00:39.420 --> 00:41.130
etwas Code schreiben oder

00:41.130 --> 00:43.580
analysieren, was wir haben.

00:43.580 --> 00:46.750
Im Index. tsx haben wir doch nichts Besonderes, oder?

00:46.750 --> 00:49.060
Dies ist normaler JavaScript-Code.

00:49.060 --> 00:52.950
In App. tsx sehen wir diese Typenzuweisung,

00:52.950 --> 00:55.250
und dort können wir sehen, dass wir App

00:55.250 --> 00:57.980
diesen seltsamen Typ zugewiesen haben.

00:57.980 --> 01:00.270
Nun, wenn wir diesen Typ für eine Sekunde ignorieren,

01:00.270 --> 01:02.480
was ist eigentlich in App gespeichert?

01:02.480 --> 01:04.840
Nun, eine Funktion, eine Pfeilfunktion, aber das

01:04.840 --> 01:07.290
ist immer noch eine reguläre Funktion, also.

01:07.290 --> 01:09.960
Warum funktioniert dieser Typ hier nicht oder warum gehört er

01:09.960 --> 01:12.570
nicht zu den Funktionstypen, die wir kennengelernt haben?

01:12.570 --> 01:14.030
Nun, es ist unter der Haube,

01:14.030 --> 01:16.450
aber dies ist ein Typ, der von React bereitgestellt

01:16.450 --> 01:18.100
wird, und jetzt, wichtig, natürlich

01:18.100 --> 01:21.070
vom React-Typen-Paket bereitgestellt.

01:21.070 --> 01:26.070
Wenn man in die Node-Module geht, sieht man den @types-Ordner hier und darin

01:26.390 --> 01:28.470
eine Menge Typen, und wir sehen

01:28.470 --> 01:30.670
auch die React-Typen hier, alle

01:30.670 --> 01:32.600
React-Dom-Typen.

01:32.600 --> 01:35.840
Und am Ende wird dieser Typ implizit automatisch

01:35.840 --> 01:39.340
aus dem Ordner react types importiert.

01:39.340 --> 01:40.870
Was ist dieser Typ?

01:40.870 --> 01:44.490
FC steht einfach für Funktionskomponente.

01:44.490 --> 01:46.310
Es gibt auch eine längere Form davon, die Sie stattdessen

01:46.310 --> 01:47.570
verwenden können.

01:47.570 --> 01:49.240
Das ist genau derselbe Typ.

01:49.240 --> 01:51.090
Das andere ist nur eine Abkürzung

01:51.090 --> 01:54.300
und definiert einfach, dass das, was wir hier in der App speichern,

01:54.300 --> 01:57.750
eine Funktion sein muss, aber eine Funktion, die sich als Funktionskomponente

01:57.750 --> 02:00.550
in React qualifiziert.

02:00.550 --> 02:02.840
Sie können natürlich auch klassenbasierte Komponenten

02:02.840 --> 02:05.760
schreiben, und daher haben Sie hier auch eine klassische Komponente,

02:05.760 --> 02:07.420
in der Sie eine Klasse statt einer Funktion

02:07.420 --> 02:09.480
speichern müssen, aber wir werden in diesem

02:09.480 --> 02:12.720
Kurs mit Funktionskomponenten arbeiten.

02:12.720 --> 02:14.670
Dies ist eine Funktionskomponente,

02:14.670 --> 02:17.620
da sie eine Funktion ist, die JSX zurückgibt, und so

02:17.620 --> 02:20.850
wird eine Funktionskomponente in React erstellt.

02:20.850 --> 02:24.180
Wenn ich diese Return-Anweisung vorübergehend entferne, könnte es

02:24.180 --> 02:26.730
zu einem Fehler kommen, wenn ich versuche, die Datei

02:26.730 --> 02:28.800
zu speichern und sie kompilieren möchte.

02:28.800 --> 02:32.440
Wir würden einen Fehler erhalten, weil wir TypeScript mitteilen, dass wir

02:32.440 --> 02:34.960
hier eine Funktionskomponente speichern wollen,

02:34.960 --> 02:38.520
und alles, was wir speichern, ist eine normale Funktion, keine Funktion,

02:38.520 --> 02:40.770
die JSX oder etwas anderes zurückgibt, das als

02:40.770 --> 02:42.800
React-Element qualifiziert.

02:42.800 --> 02:44.440
Daher wäre dies ungültig und wir

02:44.440 --> 02:45.810
müssten es korrigieren.

02:45.810 --> 02:48.530
Hier können wir also schon sehen, wie TypeScript unser

02:48.530 --> 02:50.360
Projekt ein wenig verbessert.

02:50.360 --> 02:52.500
Es gibt uns zusätzliche Typsicherheit und

02:52.500 --> 02:55.420
stellt sicher, dass wir nicht in eine Situation geraten, in

02:55.420 --> 02:58.353
der wir zum Beispiel eine ungültige Komponente bauen.

02:59.200 --> 03:03.230
Nebenbei bemerkt: Wenn es unrealistisch erscheint, dass Sie diese Rückgabeanweisung

03:03.230 --> 03:05.370
jemals vergessen würden, bedenken Sie, dass

03:05.370 --> 03:07.970
Sie eine größere Komponente mit mehreren if-Anweisungen

03:07.970 --> 03:11.070
und verschiedenen Rückgabeanweisungen bauen.

03:11.070 --> 03:14.370
Sie könnten eine in einem Zweig Ihrer if-Anweisung vergessen,

03:14.370 --> 03:17.010
und dann kann TypeScript Ihnen definitiv den Arsch

03:17.010 --> 03:19.130
retten und Ihnen die Warnung etwas früher

03:19.130 --> 03:21.500
geben, als zur Laufzeit, wo es sonst in manchen

03:21.500 --> 03:23.710
Situationen abstürzen könnte.

03:23.710 --> 03:25.620
Das ist also TypeScript, das etwas

03:25.620 --> 03:27.740
tut, aber damit genug vom Gerede.

03:27.740 --> 03:28.690
Ich möchte hier

03:28.690 --> 03:31.670
eine relativ einfache App bauen, eine To-Do-App,

03:31.670 --> 03:34.590
ziemlich klassisch, aber eine To-Do-App, mit

03:34.590 --> 03:36.370
der wir einige Kernkonzepte

03:36.370 --> 03:39.480
von React mit TypeScript üben können.

03:39.480 --> 03:41.270
Deshalb werden wir in den nächsten Vorlesungen

03:41.270 --> 03:44.363
mit unseren ersten benutzerdefinierten Komponenten beginnen.
