WEBVTT

00:02.090 --> 00:07.002
教师：在我们深入讨论任何功能之前, 您可以在本课程的附件中找到此页面的链接｡

00:07.002 --> 00:13.610
这个页面基本上列出了所有或多或少现代化的JavaScript特性,

00:13.610 --> 00:19.700
哪些浏览器支持这些特性, 以及哪些编译器支持这些特性｡

00:19.700 --> 00:23.150
在那里你还可以找到TypeScript, TypeScript与core-js相结合,

00:23.150 --> 00:27.210
这是一个polyfill提供程序｡

00:27.210 --> 00:32.070
但一般来说, 这描述了TypeScript能够编译的内容｡

00:32.070 --> 00:34.110
现在, 如果您正在寻找一个特定的功能,

00:34.110 --> 00:35.990
比如说, const关键字, 您可以随时使用此资源,

00:35.990 --> 00:40.860
您想知道TypeScript是否可以使用它｡

00:40.860 --> 00:43.340
然后你可以看到它是如何工作的,

00:43.340 --> 00:46.580
有什么限制, 哪些浏览器支持这个｡

00:46.580 --> 00:48.250
顺便说一句, 这也为您提供了关于您可能希望以哪些浏览器为目标､

00:48.250 --> 00:53.967
关于TypeScript目标等等的提示｡

00:53.967 --> 00:55.260
因此, 这是一个很好的资源,

00:55.260 --> 00:58.600
它允许您在JavaScript的不同迭代之间切换,

00:58.600 --> 01:04.220
以及每个迭代引入的特性, 以及如何支持这些特性｡

01:04.220 --> 01:06.140
所以一定要把它作为一个资源来找出你可以使用什么,

01:06.140 --> 01:11.060
你可以编译什么, 以及你可能需要设置哪些目标｡

01:11.060 --> 01:14.060
接下来, 让我们从最重要､ 最明显､

01:14.060 --> 01:19.260
最常用的介绍开始, 下一代JavaScript补充道｡

01:19.260 --> 01:21.780
顺便说一下, 下一代JavaScript,

01:21.780 --> 01:24.700
我的意思是, ES6或更近｡

01:24.700 --> 01:27.860
这就是我所说的let或const

01:27.860 --> 01:32.750
它允许您定义常量或变量｡ 

01:32.750 --> 01:39.910
不同之处在于常量, 所以用const关键字定义的变量不能更改｡

01:39.910 --> 01:42.410
如果你试图在这里赋值, 即使它的类型是正确的,

01:42.410 --> 01:47.220
你也会得到一个错误, 因为它是一个常量｡

01:47.220 --> 01:50.200
顺便说一下, 这是一个由TypeScript形成的错误｡

01:50.200 --> 01:53.340
在Vanilla JavaScript中, 当您在此处运行代码时,

01:53.340 --> 01:57.280
浏览器会显示一个错误, 这就是TypeScript背后的想法, 正如您所了解的,

01:57.280 --> 02:02.990
当您编写代码时, 我们已经显示了一个错误, 因为这当然对我们作为开发人员来说更好｡

02:02.990 --> 02:07.820
它允许我们在控制台中测试之前更早地修复此代码｡

02:07.820 --> 02:11.330
因此, 在这里, 如果我们删除这一行或注释掉这一行,

02:11.330 --> 02:12.830
现在它会重新编译,

02:12.830 --> 02:17.130
因此, 我们在浏览器中也不会得到错误｡

02:17.130 --> 02:20.860
所以, 这是常数｡  设是一个可以改变的变量,

02:20.860 --> 02:23.620
因此, 当然, 它类似于var｡

02:23.620 --> 02:29.550
Var仍然存在, 因为JavaScript的工作原理是不会突然取消功能,

02:29.550 --> 02:33.460
因为旧的浏览器和它们的脚本可能会崩溃｡

02:33.460 --> 02:35.160
但是你不应该再用var了｡ 

02:35.160 --> 02:37.860
为什么不应该再使用var呢？

02:37.860 --> 02:39.670
我的意思是, 我们有const是有道理的,

02:39.670 --> 02:42.520
因为它确实增加了一个新的特性, 常量｡

02:42.520 --> 02:43.380
但为什么要让呢？

02:43.380 --> 02:45.380
为什么要在这里引入一个新的关键词？

02:45.380 --> 02:47.223
他们为什么不坚持var？

02:48.280 --> 02:51.460
令和const对var有一个重要的区别｡ 

02:51.460 --> 02:53.300
const的明显区别是它的值不能改变,

02:53.300 --> 02:57.040
但是let的值也有区别｡

02:57.040 --> 03:00.930
这就是这个变量的作用域｡ 

03:00.930 --> 03:04.363
现在, 您应该了解JavaScript中的作用域概念｡ 

03:05.609 --> 03:09.260
使用var, 您有一个全局作用域和一个函数作用域｡ 

03:09.260 --> 03:15.340
这意味着您在函数之外定义的变量在脚本中的任何地方都可用｡

03:15.340 --> 03:19.370
在函数内部定义的变量仅在该函数中可用｡

03:19.370 --> 03:22.610
比如这里｡  如果我有一个函数add,

03:22.610 --> 03:27.610
可能会得到两个数, a和b｡

03:27.670 --> 03:29.750
然后我们可以在这里添加一个变量,

03:29.750 --> 03:32.280
比如说, 我们设置result = a

03:32.280 --> 03:34.730
+ b, 然后我们返回result,

03:34.730 --> 03:36.230
当然, 我们可以用更短的方式来写,

03:36.230 --> 03:40.570
但是我想展示一下var是做什么的｡

03:40.570 --> 03:41.860
这样就可以了｡ 

03:41.860 --> 03:44.188
而结果只能在这个函数内部使用｡

03:44.188 --> 03:47.723
如果我尝试在这里控制台日志结果, 这将失败,

03:47.723 --> 03:52.190
因为它只在这个函数的范围内可用｡

03:52.190 --> 03:53.970
如果我在var harbor之外定义它,

03:53.970 --> 03:58.180
那么一切都正常, 因为现在它在全球都可用, 因此我可以在这里访问它｡

03:58.180 --> 04:00.220
而且, JavaScript的工作方式,

04:00.220 --> 04:03.580
你可以在更高的级别上访问变量｡

04:03.580 --> 04:05.210
在一个函数中, 你可以使用变量作用域,

04:05.210 --> 04:12.563
但所有变量都有更高的作用域, 比如这里的全局作用域.

04:13.580 --> 04:14.980
这就是var｡ 

04:14.980 --> 04:19.180
现在对于let, 行为大体上是相同的｡ 

04:19.180 --> 04:21.580
这个有用, 这个也有用｡ 

04:21.580 --> 04:23.800
所以对于let来说基本上是一样的｡ 

04:23.800 --> 04:27.180
但一个重要的区别是, 对于var,

04:27.180 --> 04:30.860
您实际上只有全局和函数作用域｡

04:30.860 --> 04:32.460
如果语句呢？

04:32.460 --> 04:36.720
如果我们在这里选择age〉20, 然后在这里我们创建一个变量isOld,

04:36.720 --> 04:50.090
并将其设置为true, 那么如果控制台日志是Old, 我们会在TypeScript中得到一个错误, 但实际上在JavaScript中不会得到一个错误｡

04:50.090 --> 04:56.280
这里的这段代码, 如果您只是为了查看它是否工作, 然后移动到控制台中的JavaScript开发人员工具,

04:56.280 --> 04:57.190
我们将其粘贴到那里并按Enter键,

04:57.190 --> 05:00.970
您会看到此处打印的是true｡

05:01.830 --> 05:02.960
事实上, 如果你试图访问isOld,

05:02.960 --> 05:05.040
你会得到true｡

05:05.040 --> 05:10.530
isOld变量是全局注册的, 而不仅仅是在if语句中.

05:10.530 --> 05:15.860
因为对于var, JavaScript不知道除了函数和全局作用域之外的任何其他作用域｡

05:15.860 --> 05:17.400
这一点随着左而改变｡ 

05:17.400 --> 05:19.690
现在, 正如我所说的, TypeScript仍然会抱怨,

05:19.690 --> 05:21.600
因为这不是一个好的代码, 但从技术上讲,

05:21.600 --> 05:23.170
它会工作｡

05:23.170 --> 05:25.100
有了let, 情况就不同了｡ 

05:25.100 --> 05:26.350
现在用let,

05:26.350 --> 05:29.880
它只在这些花括号里面可用｡

05:29.880 --> 05:33.540
因为let和const引入了一个新的概念,

05:33.540 --> 05:40.420
称为块作用域, 这意味着变量或常量在定义它的块或任何更低的块中总是可用的｡

05:40.420 --> 05:44.900
一个块基本上总是一个用大括号括起来的片段,

05:44.900 --> 05:46.710
比如if语句, for循环,

05:46.710 --> 05:52.670
函数, 甚至, 如果你像这样加上大括号的话.

05:52.670 --> 05:56.760
此处定义的任何变量仅在该块中可用｡

05:56.760 --> 05:57.700
这是一件好事,

05:57.700 --> 06:00.000
因为它迫使你编写更干净的代码,

06:00.000 --> 06:02.470
避免类似的情况｡

06:02.470 --> 06:03.640
为了证明浏览器中存在差异,

06:03.640 --> 06:05.530
如果我使用let复制此代码,

06:05.530 --> 06:09.750
并在此处重新加载页面, 现在在此处输入此代码, 您会看到一个错误,

06:09.750 --> 06:14.706
即isOld未定义｡

06:14.706 --> 06:14.706
我们之前没有收到错误｡ 

06:14.706 --> 06:19.706
实际上, 如果我试图输出isOld, 我会再次得到该错误｡ 

06:20.070 --> 06:21.060
这就是区别｡ 

06:21.060 --> 06:23.370
因此, let和const更好,

06:23.370 --> 06:25.740
不仅因为我们得到了这个常量特性,

06:25.740 --> 06:29.150
还因为我们被迫编写更干净的代码｡

06:29.150 --> 06:30.130
因此, 让我注释掉它,

06:30.130 --> 06:31.230
使它再次工作｡
