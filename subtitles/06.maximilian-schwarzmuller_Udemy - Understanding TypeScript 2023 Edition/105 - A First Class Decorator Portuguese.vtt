WEBVTT

00:02.130 --> 00:05.620
-: Para isso você encontra em anexo nosso bom e velho projeto

00:05.620 --> 00:08.470
inicial, eu já iniciei o servidor com NPM start.

00:08.470 --> 00:12.320
E o processo de relógio TypeScript com TSC-W.

00:12.320 --> 00:14.870
E a primeira coisa que precisamos configurar

00:14.870 --> 00:18.030
ali está em um arquivo tsconfig, certifique-se de que

00:18.030 --> 00:21.620
seu alvo esteja definido para es6 e depois, se você rolar para

00:21.620 --> 00:24.230
baixo, certifique-se de adicionar esta linha

00:24.230 --> 00:26.720
de decorador experimental aqui.

00:26.720 --> 00:28.380
E acrescente uma vírgula em frente

00:28.380 --> 00:31.700
a isto e então você pode formatar tudo isso corretamente.

00:31.700 --> 00:34.020
Isto é importante caso contrário, você não poderá

00:34.020 --> 00:36.000
usar decoradores em seu projeto.

00:36.000 --> 00:37.250
Portanto, certifique-se

00:37.250 --> 00:40.540
de afinar seu tsconfig. json arquivar apropriadamente.

00:40.540 --> 00:42.630
E com isso, podemos mergulhar e escrever nosso

00:42.630 --> 00:46.980
primeiro decorador aqui no aplicativo. ts arquivar.

00:46.980 --> 00:50.950
E quero começar com um decorador que possamos acrescentar a uma classe.

00:50.950 --> 00:54.530
Agora os decoradores em geral são todos sobre classes, mas este

00:54.530 --> 00:55.363
é um decorador

00:55.363 --> 00:58.220
que vamos acrescentar à classe como um todo.

00:58.220 --> 01:00.730
Para isso, digamos que temos uma classe,

01:00.730 --> 01:04.360
Pessoa, uma classe muito trivial, onde temos um nome.

01:04.360 --> 01:07.530
Talvez com um valor de Max, pré-inicializado aqui.

01:07.530 --> 01:10.520
Onde temos uma função construtora onde eu apenas registro

01:10.520 --> 01:12.600
a criação de objeto pessoa, para que

01:12.600 --> 01:14.763
vejamos que isto é executado.

01:15.880 --> 01:19.363
E então, claro, podemos criar aqui uma nova pessoa, com uma

01:20.760 --> 01:22.910
nova palavra-chave, como esta.

01:22.910 --> 01:24.030
E se quisermos, é claro

01:24.030 --> 01:26.490
que podemos registrar essa pessoa criada.

01:26.490 --> 01:28.330
E isso não deve nos surpreender,

01:28.330 --> 01:29.430
se salvarmos tudo

01:29.430 --> 01:32.090
isso, ele se compila sem erros.

01:32.090 --> 01:33.700
E se visitarmos nossa página

01:33.700 --> 01:36.670
então, em Localhost: 3000, no console JavaScript,

01:36.670 --> 01:38.900
vemos Criar objeto pessoa que está

01:38.900 --> 01:41.140
vindo do construtor.

01:41.140 --> 01:44.603
E todos nós, é claro, vemos a própria Pessoa aqui.

01:45.810 --> 01:49.550
Agora, neste exemplo, não temos decoradores envolvidos.

01:49.550 --> 01:51.000
Vamos mudar isso.

01:51.000 --> 01:53.370
Na parte superior do arquivo, vamos adicionar um decorador.

01:53.370 --> 01:56.060
E um decorador, e isso é realmente importante de se entender,

01:56.060 --> 01:58.080
é no final apenas uma função.

01:58.080 --> 02:01.280
Uma função que você aplica a algo, por exemplo,

02:01.280 --> 02:03.530
a uma classe de uma certa forma.

02:03.530 --> 02:04.750
Então vamos criar uma

02:04.750 --> 02:09.523
função aqui, com a palavra-chave função, e eu lhe darei o nome de Logger.

02:10.390 --> 02:13.290
Agora esta é uma função, a única coisa especial aqui

02:13.290 --> 02:15.570
é que eu começo com um caráter capital.

02:15.570 --> 02:16.492
A propósito, isto

02:16.492 --> 02:20.200
não é uma obrigação, você não precisa usar um caractere inicial

02:20.200 --> 02:22.470
maiúsculo, você pode usar também um minúsculo,

02:22.470 --> 02:25.610
você só vê muitos decoradores por aí em bibliotecas que

02:25.610 --> 02:27.680
você pode usar que usam caracteres

02:27.680 --> 02:30.030
iniciais em maiúsculas e, portanto, eu

02:30.030 --> 02:32.200
farei o mesmo aqui.

02:32.200 --> 02:35.450
Portanto, a função de registrador aqui é uma função

02:35.450 --> 02:39.330
e podemos aplicá-la como um decorador, como vai acontecer.

02:39.330 --> 02:42.730
Agora vamos adicionar um console de login aqui, Logging, para que possamos

02:42.730 --> 02:44.730
ver quando esta função é executada.

02:44.730 --> 02:47.300
Porque eu não vou chamá-lo diretamente.

02:47.300 --> 02:50.330
Em vez disso, quero adicioná-lo como decorador a esta classe.

02:50.330 --> 02:53.710
E o fazemos adicionando um símbolo @ aqui na

02:53.710 --> 02:57.370
frente da classe e depois nossa função aqui.

02:57.370 --> 02:58.440
Assim mesmo.

02:58.440 --> 03:00.320
Agora, um par de coisas especiais aqui.

03:00.320 --> 03:03.780
O símbolo @ aqui é um identificador especial que

03:03.780 --> 03:06.170
o TypeScript vê ou reconhece.

03:06.170 --> 03:09.110
E então a coisa diretamente após o símbolo @ deve

03:09.110 --> 03:11.010
apontar para uma função.

03:11.010 --> 03:13.460
Não a execute, mas aponte para ela,

03:13.460 --> 03:15.800
que deve ser seu decorador.

03:15.800 --> 03:17.400
Agora aqui você vê que o Logger então

03:17.400 --> 03:20.650
aceita muito poucos argumentos para ser usado como decorador aqui.

03:20.650 --> 03:23.010
Portanto, o bom é que o TypeScript entende que eu

03:23.010 --> 03:24.930
quero usá-lo como decorador aqui.

03:24.930 --> 03:27.980
O mau é que não passamos argumentos suficientes.

03:27.980 --> 03:31.000
E de fato, os decoradores recebem argumentos.

03:31.000 --> 03:34.870
Quantos argumentos dependem de onde você usa o decorador.

03:34.870 --> 03:39.710
Aqui, para um decorador que acrescentamos a uma classe, temos um argumento.

03:39.710 --> 03:42.910
Esse é o objetivo deste decorador, por assim

03:42.910 --> 03:46.160
dizer, que é nossa função de construtor.

03:46.160 --> 03:49.020
Portanto, podemos dizer que temos aqui uma

03:49.020 --> 03:51.240
função como argumento no final.

03:51.240 --> 03:54.110
Também podemos nomeá-lo construtor, porque no final

03:54.110 --> 03:56.650
teremos nossa função de construtor desta classe,

03:56.650 --> 03:59.550
ou seja qual for a classe à qual acrescentamos este decorador

03:59.550 --> 04:01.470
como argumento.

04:01.470 --> 04:06.310
Vamos também consolar. logar isso para que possamos ter alguma

04:06.310 --> 04:09.650
visão deste argumento do construtor aqui.

04:09.650 --> 04:10.550
E vamos salvar isto.

04:10.550 --> 04:12.750
E, como você vê, compila sem erros.

04:12.750 --> 04:14.750
E se agora tivermos um olhar para nossa saída,

04:14.750 --> 04:16.580
vemos o código antigo de antes, mas também

04:16.580 --> 04:18.590
vemos a saída de Logging, e esta função construtora

04:18.590 --> 04:20.810
sendo registrada.

04:20.810 --> 04:22.760
Bem, nós realmente vemos a classe inteira

04:22.760 --> 04:24.520
aqui, mas as classes no final são apenas

04:24.520 --> 04:27.670
um pouco de açúcar tático sobre as funções do construtor.

04:27.670 --> 04:31.450
Observe também que nossa saída de decorador, Logging,

04:31.450 --> 04:35.030
e esta classe ou este log de função de construtor aqui

04:35.030 --> 04:39.460
é impressa primeiro, antes de vermos Criar objeto pessoa e nosso

04:39.460 --> 04:41.540
objeto Pessoa.

04:41.540 --> 04:44.360
Porque, de fato, os decoradores e isso é realmente

04:44.360 --> 04:48.430
importante, os decoradores executam quando sua classe é definida.

04:48.430 --> 04:50.530
Não quando é instanciado.

04:50.530 --> 04:53.020
Você não precisa instanciar sua classe em absoluto.

04:53.020 --> 04:55.760
Poderíamos remover esse código para instanciar

04:55.760 --> 04:58.780
a classe, e ainda teríamos aquela saída de decorador.

04:58.780 --> 05:02.210
Assim, o decorador funciona quando o JavaScript encontra a definição

05:02.210 --> 05:05.660
de sua classe, a definição de sua função de construtor.

05:05.660 --> 05:08.580
Não quando você usa essa função construtora para

05:08.580 --> 05:10.070
instanciar um objeto.

05:10.070 --> 05:13.280
Isso é realmente importante de se entender.

05:13.280 --> 05:15.170
Portanto, este é nosso primeiro decorador.

05:15.170 --> 05:16.670
Mas não é a única maneira

05:16.670 --> 05:19.063
de criarmos um decorador.
