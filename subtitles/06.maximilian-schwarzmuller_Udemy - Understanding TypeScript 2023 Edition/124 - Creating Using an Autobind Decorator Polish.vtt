WEBVTT

00:02.220 --> 00:04.550
-: Mówię o dekoratorze, który możemy dodać,

00:04.550 --> 00:07.350
który automatycznie wiąże słowo kluczowe "this",

00:07.350 --> 00:09.930
abyśmy nie musieli wywoływać bind tutaj.

00:09.930 --> 00:12.500
Teraz oczywiście wywołanie bind tutaj nie jest wielką

00:12.500 --> 00:14.160
rzeczą, jeśli nie ma w tym nic złego,

00:14.160 --> 00:16.460
ale chcemy również praktykować to, czego się

00:16.460 --> 00:20.220
nauczyliśmy i jeśli musimy to zrobić w wielu miejscach w naszej aplikacji

00:20.220 --> 00:22.730
mając dekorator, który po prostu możemy dodać może

00:22.730 --> 00:24.970
być faktycznie łatwiejsze.

00:24.970 --> 00:27.100
Więc, pozbądźmy się wiązania tego tutaj.

00:27.100 --> 00:30.010
I zamiast tego, nad klasą tutaj, dodam dekorator

00:30.010 --> 00:33.010
auto bind i po prostu dodaję kilka komentarzy

00:33.010 --> 00:34.920
tutaj, aby utrzymać ten plik

00:34.920 --> 00:38.750
zorganizowany, przynajmniej trochę.

00:38.750 --> 00:40.490
Klasa ProjectInput

00:42.260 --> 00:44.790
Czym więc jest dekorator?

00:44.790 --> 00:46.770
Dekorator to funkcja, prawda?

00:46.770 --> 00:48.130
I możesz go znaleźć albo z

00:48.130 --> 00:51.383
dekoracją funkcji tutaj, albo jako wyrażenie funkcji.

00:52.490 --> 00:54.780
Więc, tutaj użyję dekoracji funkcji

00:54.780 --> 00:57.780
i nazwę ją autobind, nazwa zależy od ciebie.

00:57.780 --> 01:01.670
I ten dekorator otrzyma wolne argumenty cel, nazwę metody,

01:01.670 --> 01:03.173
z którą jest związany,

01:04.430 --> 01:06.430
ponieważ zamierzam stworzyć

01:06.430 --> 01:09.083
tutaj dekorator metody.

01:09.980 --> 01:12.960
A także deskryptor

01:12.960 --> 01:15.720
tej metody.

01:15.720 --> 01:18.370
Uh, deskryptor właściwości, ponieważ metody w

01:18.370 --> 01:22.760
końcu są tylko właściwościami, właściwościami, które przechowują funkcje.

01:22.760 --> 01:24.400
Teraz, dlaczego jest to dekorator metody?

01:24.400 --> 01:29.210
Ponieważ chodzi o to, że możemy dodać go do submitHandler

01:29.210 --> 01:32.210
jak to, i być zrobionym z nim.

01:32.210 --> 01:33.680
Taki jest zamysł.

01:33.680 --> 01:35.500
Teraz, nie jesteśmy jeszcze całkowicie

01:35.500 --> 01:38.143
tam, ale tak to powinno działać w końcu.

01:39.090 --> 01:42.950
Teraz, aby to zadziałało, wróćmy do naszej funkcji

01:42.950 --> 01:46.880
tam na górze i co musi wejść do ciała funkcji?

01:46.880 --> 01:49.490
No i tam przede wszystkim chcę uzyskać

01:49.490 --> 01:51.950
dostęp do oryginalnej metody.

01:51.950 --> 01:56.593
Z deskryptorem. wartość tak, że przechowujemy metodę,

01:56.593 --> 01:59.380
z którą pierwotnie zdefiniowaliśmy.

01:59.380 --> 02:03.540
Następnie chcę stworzyć mój dostosowany deskryptor tutaj, który

02:03.540 --> 02:04.873
jest obiektem.

02:06.650 --> 02:11.090
Wpiszę PropertyDescriptor, w rzeczywistości.

02:11.090 --> 02:13.880
Gdzie configurable powinien być ustawiony na true,

02:13.880 --> 02:15.910
abyśmy zawsze mogli go zmienić.

02:15.910 --> 02:17.573
I gdzie wtedy potrzebujemy gettera.

02:18.510 --> 02:21.770
I w tym getterze, tutaj, który powinien zostać wykonany,

02:21.770 --> 02:24.270
gdy próbujesz uzyskać dostęp do funkcji.

02:24.270 --> 02:27.710
Ustawimy tutaj funkcję związaną, używając oryginalnej

02:27.710 --> 02:29.220
metody, którą wyodrębniamy

02:29.220 --> 02:31.030
tam na górze.

02:31.030 --> 02:34.063
I nawołując do wiązania tego na nim.

02:35.370 --> 02:36.203
Następnie chcę

02:37.860 --> 02:40.170
zwrócić tę związaną funkcję i to powinno

02:40.170 --> 02:41.603
być wszystko.

02:42.510 --> 02:44.190
I ogólnie oczywiście, dlatego

02:44.190 --> 02:46.620
zwrócę dostosowany deskryptor w tym

02:46.620 --> 02:48.653
dekoratorze metody.

02:49.510 --> 02:52.880
Teraz otrzymujemy błąd z tym, na submitHandlerze.

02:52.880 --> 02:56.020
To, eksperymentalne wsparcie dla dekoratorów jest funkcją,

02:56.020 --> 02:57.960
która w zasadzie musi być włączona.

02:57.960 --> 03:00.400
Powinniśmy więc przejść do pliku tsconfig,

03:00.400 --> 03:02.320
a tam po prostu przewinąć w dół.

03:02.320 --> 03:05.770
Powinieneś znaleźć tę opcję "experimentalDecorators"

03:05.770 --> 03:07.450
po prostu skomentuj to w.

03:07.450 --> 03:09.980
I dodaj przed nim przecinek.

03:09.980 --> 03:14.183
Zapisz to, a następnie ponownie uruchom proces kompilacji typów.

03:15.180 --> 03:17.700
Teraz nadal pokazuje mi tutaj błędy, jeśli rozszerzę

03:17.700 --> 03:18.913
to, metodaName jest zadeklarowana,

03:20.212 --> 03:23.170
ale jej wartość nigdy nie jest odczytywana.

03:23.170 --> 03:25.410
W aplikacji. ts linia czwarta.

03:25.410 --> 03:26.760
Odnosi się do tego tutaj, dostałem

03:26.760 --> 03:29.020
ten argument, który otrzymałem tutaj, którego

03:29.020 --> 03:30.940
właściwie nigdy nie użyłem.

03:30.940 --> 03:34.370
To samo dotyczy targetu, nigdy tego nie używałem.

03:34.370 --> 03:36.343
Teraz można to rozwiązać na dwa sposoby.

03:37.200 --> 03:39.610
Jednym ze sposobów, jest przejście do tsconfig

03:39.610 --> 03:42.813
i poluzowanie naszych reguł ścisłości, tutaj.

03:44.160 --> 03:46.740
noUnusedParameters, jeśli ustawimy to na false to faktycznie

03:46.740 --> 03:49.090
pozwalamy na nieużywane parametry.

03:49.090 --> 03:50.670
Więc to byłoby jedno,

03:50.670 --> 03:52.910
lub używasz specjalnych nazw

03:52.910 --> 03:54.053
underscore, i underscore

03:55.180 --> 03:56.653
dwa.

03:57.770 --> 04:01.860
To właściwie jest, podpowiedź dla typescript i javascript, że jesteś świadomy,

04:01.860 --> 04:03.130
że nie zamierzasz używać

04:03.130 --> 04:05.930
tych wartości, ale musisz je zaakceptować, ponieważ

04:05.930 --> 04:08.740
potrzebujesz argumentu, po którym są.

04:08.740 --> 04:11.810
Jeśli teraz zapiszesz to, to skompiluje się bez

04:11.810 --> 04:14.700
błędów i jeśli wrócimy i wpiszemy hello here

04:14.700 --> 04:17.040
i prześlemy to, to nadal działa teraz

04:17.040 --> 04:20.060
dzięki naszemu dekoratorowi auto bind.

04:20.060 --> 04:23.120
Co miejmy nadzieję pokazuje również, że ten dekorator może

04:23.120 --> 04:24.950
mieć jakieś realne zastosowanie.

04:24.950 --> 04:27.530
Teraz oczywiście tutaj jest faktycznie trochę więcej

04:27.530 --> 04:29.510
pracy, niż tylko wywołanie bind.

04:29.510 --> 04:32.120
Ale wyobraź sobie, że jest to stosowane na coraz większej ilości metod,

04:32.120 --> 04:33.820
które wszystkie muszą być związane.

04:33.820 --> 04:36.140
Brak konieczności ręcznego wywoływania bindowania może

04:36.140 --> 04:38.140
następnie ponownie zaoszczędzić trochę czasu, a

04:38.140 --> 04:40.430
także zapobiec niektórym potencjalnym błędom w przypadkach,

04:40.430 --> 04:42.343
w których po prostu zapomniałeś o tym.
