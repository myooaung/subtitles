WEBVTT

00:02.170 --> 00:03.003
Kursleiter: Da wir nun

00:03.003 --> 00:04.760
ein richtig konfiguriertes Projekt haben, wollen

00:04.760 --> 00:08.130
wir uns nun etwas eingehender damit befassen, wie Sie Ihr Projekt debuggen können oder wie

00:08.130 --> 00:10.500
Sie einen großartigen Entwicklungsablauf haben können.

00:10.500 --> 00:13.560
Zu Beginn dieses Kurses zeige ich Ihnen meine grundlegende

00:13.560 --> 00:14.575
IDE-Einrichtung.

00:14.575 --> 00:17.750
Vergewissern Sie sich, dass Sie die richtigen Erweiterungen installiert haben.

00:17.750 --> 00:22.750
Bei TypeScript kommt ESLint zum Einsatz, das Sie beim Linting Ihres

00:22.980 --> 00:26.410
TypeScript-Codes unterstützen kann.

00:26.410 --> 00:29.310
Um die Codequalität zu verbessern, müssen Sie jedoch möglicherweise

00:29.310 --> 00:31.620
zusätzliche Konfigurationen vornehmen, damit

00:31.620 --> 00:33.900
ESLint eine Wirkung zeigt.

00:33.900 --> 00:36.310
Es kann Ihnen bei fortgeschrittenen Projekten

00:37.220 --> 00:38.570
helfen, aber noch interessanter

00:38.570 --> 00:40.818
ist, dass Sie wirklich Prettier verwenden

00:40.818 --> 00:43.370
möchten, um Ihren Code automatisch zu formatieren

00:43.370 --> 00:45.770
und einen schön formatierten Code zu haben,

00:45.770 --> 00:49.870
und Sie sollten vielleicht Debugger for Chrome ausprobieren, denn damit

00:49.870 --> 00:53.140
können Sie Ihre TypeScript-Dateien sogar aus VS Code heraus

00:53.140 --> 00:55.810
über Chrome debuggen, ohne die Chrome Dev Tools

00:55.810 --> 00:59.440
zu verwenden.

00:59.440 --> 01:01.820
Natürlich können Sie diese auch verwenden, wenn Sie

01:01.820 --> 01:02.653
es gelernt haben.

01:02.653 --> 01:05.154
Wenn Sie sourceMaps hier aktivieren, was Sie natürlich

01:05.154 --> 01:07.160
immer tun können, erhalten Sie diese übersetzten

01:07.160 --> 01:10.429
Dateien auch dort, was wirklich nett ist.

01:10.429 --> 01:14.170
Sie können aber auch VS Code verwenden.

01:14.170 --> 01:15.960
Sie können hier Haltepunkte platzieren,

01:15.960 --> 01:17.340
sagen wir im clickHandler

01:17.340 --> 01:19.842
und jetzt, um Ihre Dateien hier durch VS Code

01:19.842 --> 01:24.842
zu starten, müssen Sie auch sourceMaps aktivieren, aber wir werden immer noch in der

01:26.100 --> 01:28.690
Lage sein, VS Code anstelle der Browser Dev Tools

01:28.690 --> 01:30.950
zu verwenden.

01:30.950 --> 01:34.570
Aktivieren Sie also sourceMaps, setzen Sie Ihren

01:34.570 --> 01:38.930
Haltepunkt und gehen Sie dann auf Debug, Start Debugging.

01:38.930 --> 01:40.320
Wenn Sie dies zum ersten Mal ausführen,

01:40.320 --> 01:42.170
sollten Sie nach der Umgebung gefragt werden,

01:42.170 --> 01:45.350
und wenn Sie die Erweiterung Debugger für Chrome installiert haben,

01:45.350 --> 01:47.850
sollten Sie Chrome auswählen können.

01:47.850 --> 01:49.960
Es wird nun zu einem Laucnh kommen. json-Datei, in der

01:49.960 --> 01:53.200
Sie konfigurieren, wie es gestartet werden soll, und

01:53.200 --> 01:56.740
dort sollten Sie es auf localhost:3000 verweisen, weil dort

01:56.740 --> 01:59.330
unser Entwicklungsserver läuft und natürlich

01:59.330 --> 02:02.710
sollte der Prozess, also der npm-Startprozess, laufen

02:02.710 --> 02:04.220
und laufen.

02:04.220 --> 02:06.910
Um dort auf localhost:3000 und als webRoot zu zeigen,

02:06.910 --> 02:09.740
können Sie diesen Platzhalter hier lassen, was bedeutet,

02:09.740 --> 02:11.890
dass dieser Projektordner als Host für Ihre

02:11.890 --> 02:13.780
Dateien angenommen wird, was der Fall

02:13.780 --> 02:17.120
ist, und kompilieren Sie jetzt Ihren Code, so dass die sourceMaps

02:17.120 --> 02:19.780
auch generiert werden, nachdem Sie die sourceMaps-Konfiguration

02:19.780 --> 02:22.470
auf true gesetzt haben, so dass wir diese jetzt im JavaScript-Code

02:22.470 --> 02:25.290
haben.

02:25.290 --> 02:26.870
Mit dem hier hinzugefügten Haltepunkt

02:26.870 --> 02:28.400
und Ihrem Start. json konfiguriert haben,

02:28.400 --> 02:30.400
lassen Sie uns hier die Fehlersuche durchführen.

02:30.400 --> 02:32.140
Starten Sie das Debugging jetzt wirklich

02:32.140 --> 02:34.830
und es wird automatisch eine neue Registerkarte geöffnet.

02:34.830 --> 02:36.020
Diese Registerkarte wird geschlossen,

02:36.020 --> 02:38.730
wenn Sie den Debugging-Prozess beenden oder wenn Sie die Registerkarte

02:38.730 --> 02:41.940
schließen, wird der Debugging-Prozess beendet.

02:41.940 --> 02:44.590
Damit gelangen Sie nun in die Debugging-Ansicht in

02:44.590 --> 02:46.790
VS Code, wo Sie Variablen verfolgen, bestimmte

02:46.790 --> 02:48.230
Ausdrücke beobachten und den

02:48.230 --> 02:50.120
aktuellen Aufrufstapel sehen können.

02:50.120 --> 02:51.910
Wenn Sie nun auf Click Me klicken,

02:51.910 --> 02:54.120
sollten Sie zurück in den Editor gelangen

02:54.120 --> 02:56.590
und die Codeausführung wird an Ihrem Haltepunkt

02:56.590 --> 02:59.630
in der TypeScript-Datei angehalten und Sie können nun durch

02:59.630 --> 03:01.410
die Datei gehen, lokale Werte für

03:01.410 --> 03:04.540
dieses Schlüsselwort oder für die Nachrichtenvariable untersuchen,

03:04.540 --> 03:07.120
zum Beispiel skriptweite Variablen, die Sie haben

03:07.120 --> 03:09.750
könnten, und globale Variablen, die Zugriff auf

03:09.750 --> 03:13.320
globale Objekte haben.

03:13.320 --> 03:15.560
Sie können bestimmte Ausdrücke wie

03:15.560 --> 03:19.290
Nachricht + mehrere Ausrufezeichen beobachten und dann

03:19.290 --> 03:22.690
können Sie immer den Wert verfolgen, der hier in diesem

03:22.690 --> 03:27.483
Fenster steht, wenn Sie das möchten, also würde das funktionieren.

03:27.483 --> 03:30.480
Und Sie können den aktuellen Funktionsaufrufstapel sehen,

03:30.480 --> 03:33.010
der z.B. im clickHandler auftreten würde, und jetzt

03:33.010 --> 03:34.710
können Sie mit diesen Steuerelementen

03:34.710 --> 03:37.590
durch Ihren Code schreiten, um zum nächsten Schritt zu gehen,

03:37.590 --> 03:39.800
den nächsten Funktionsaufruf zu überspringen,

03:39.800 --> 03:41.500
in den Funktionsaufruf hineinzuspringen

03:41.500 --> 03:43.827
oder aus dem aktuellen Funktionsaufruf herauszuspringen,

03:43.827 --> 03:46.710
und der Aufrufstapel passt sich natürlich entsprechend an,

03:46.710 --> 03:49.280
und damit können Sie dieses Browser-Ding hier ignorieren,

03:49.280 --> 03:51.920
damit können Sie die Codeausführung immer wieder fortsetzen,

03:51.920 --> 04:00.290
indem Sie auf den Play-Button klicken und nur pausieren, wenn Sie beim nächsten Mal Ihren Haltepunkt erreichen.

04:00.290 --> 04:02.080
So können Sie also Code debuggen.

04:02.080 --> 04:04.050
Sie können einen Haltepunkt entfernen, indem Sie ihn anklicken.

04:04.050 --> 04:05.910
So können Sie Code in VS Code mit Hilfe

04:05.910 --> 04:07.310
der eingebauten Debugging-Tools,

04:07.310 --> 04:09.728
der Chrome-Debugger-Erweiterung, abgeleiteten

04:09.728 --> 04:17.743
Konfigurationen und SoureMaps, die in Ihrer TypeScript-Konfiguration eingerichtet sind, debuggen.
