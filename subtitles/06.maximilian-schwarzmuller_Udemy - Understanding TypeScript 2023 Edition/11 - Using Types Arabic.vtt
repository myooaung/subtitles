WEBVTT

00:02.060 --> 00:06.410
مدرس: يوفر Typescript أنواعًا عديدة لـ JavaScript.

00:06.410 --> 00:10.100
الآن ، تعرف JavaScript نفسها أيضًا بعض أنواع البيانات

00:10.100 --> 00:12.230
، وسأعود إلى ذلك في هذه الوحدة أيضًا

00:12.230 --> 00:14.950
، ولكن تضيف أنواع أخرى كثيرة ، وكما ستتعلم

00:14.950 --> 00:17.380
أيضًا في هذه الدورة التدريبية ، تتيح

00:17.380 --> 00:21.110
لك شركة Typescript أيضًا كتابة الأنواع الخاصة.

00:21.110 --> 00:24.320
الآن ، لنبدأ ببعض أنواع Core ، التي يعرفها

00:24.320 --> 00:26.250
JavaScript بالفعل وأيها

00:26.250 --> 00:28.289
يدعم Typescript أيضًا ، وسنلقي

00:28.289 --> 00:30.550
نظرة أيضًا على ما يعنيه الاختلاف

00:30.550 --> 00:33.380
بين JavaScript ، ومعرفة النوع ، و Typescript

00:33.380 --> 00:36.800
، باستخدام هذا النوع.

00:36.800 --> 00:38.287
أحد الأنواع الأساسية التي

00:38.287 --> 00:41.740
نعمل معها في JavaScript و Typescript ، هو نوع الرقم.

00:41.740 --> 00:45.220
الآن ، في JavaScript ، والشيء نفسه بالنسبة لـ Typescript

00:45.220 --> 00:47.290
، يوجد نوع رقم واحد فقط.

00:47.290 --> 00:50.750
لا يوجد نوع خاص للأعداد الصحيحة أو العائمة.

00:50.750 --> 00:55.520
بدلاً من ذلك ، ستكون هذه القيم كلها أرقامًا.

00:55.520 --> 00:58.180
واحد سيكون رقمًا بدون منزلة عشرية.

00:58.180 --> 01:01.640
5. من الواضح أن 3 هي واحدة ذات

01:01.640 --> 01:04.532
منزلة عشرية وجميع هذه القيم من النوع رقم.

01:04.532 --> 01:08.180
لغات البرمجة الأخرى لها أنواع أعداد صحيحة

01:08.180 --> 01:10.480
وأنواع عائمة أو مزدوجة.

01:10.480 --> 01:11.980
لا يحتوي JavaScript على

01:11.980 --> 01:14.120
ذلك ولا يمتلكه Typescript أيضًا.

01:14.120 --> 01:16.070
لذلك ، لدينا نوع الرقم ، والذي

01:16.070 --> 01:19.810
نعرفه من JavaScript ، أيضًا كنوع ، في Typescript.

01:19.810 --> 01:23.950
لدينا أيضًا نوع بيانات السلسلة ، وسيكون ذلك نصًا ، والذي يمكنك تحديده بإحدى

01:23.950 --> 01:26.370
هذه الطرق الثلاث ، بعلامات اقتباس مفردة ،

01:26.370 --> 01:28.285
أو بعلامات اقتباس مزدوجة ، أو أيضًا

01:28.285 --> 01:30.950
باستخدام علامات الاقتباس الخلفية.

01:30.950 --> 01:34.720
التدوين الأخير باستخدام backticks هو بناء جملة خاص

01:34.720 --> 01:38.640
، يتم توفيره في JavaScript الحديث وأيضًا في Typescript

01:38.640 --> 01:42.440
، مما يسمح لنا بكتابة ما يسمى بالقوالب الحرفية ، وهي

01:42.440 --> 01:44.550
سلاسل عادية حيث يمكنك حقن بعض

01:44.550 --> 01:47.520
البيانات ديناميكيًا فيها.

01:47.520 --> 01:49.240
لذلك ، السلاسل عبارة

01:49.240 --> 01:53.000
عن نصوص وتعرف JavaScript أنواع قيم السلسلة.

01:53.000 --> 01:55.000
المطبعية تفعل ذلك أيضًا.

01:55.000 --> 01:57.240
أخيرًا وليس آخرًا ، أحد أنواع البيانات الأساسية

01:57.240 --> 01:59.790
، الذي يعرفه JavaScript ويدعمه Typescript أيضًا

01:59.790 --> 02:02.250
، هو نوع البيانات المنطقية.

02:02.250 --> 02:03.810
سيكون هذا صحيحًا أو خاطئًا

02:03.810 --> 02:06.610
، وهذا أمر مهم للغاية في البرمجة ، من الواضح

02:06.610 --> 02:08.920
، خاصة عند العمل مع عبارات IF.

02:08.920 --> 02:10.970
هنا ، حصلنا على هاتين القيمتين

02:10.970 --> 02:13.690
، وهذا مهم ، لأنه في JavaScript ،

02:13.690 --> 02:17.520
قد تعرف أيضًا فكرة قيم الصواب والخطأ ، على سبيل

02:17.520 --> 02:22.190
المثال أن الصفر ، الرقم صفر ، هو قيمة خاطئة.

02:22.190 --> 02:25.510
إذا كنت تستخدمه في شرط IF ، فسيتم التعامل معه على أنه خطأ.

02:25.510 --> 02:28.560
نوع البيانات المنطقية Boolean data ، يعرف حقًا هاتين القيمتين ، على

02:28.560 --> 02:31.230
الرغم من صواب أو خطأ ، وهذا ليس هو الحال بالنسبة إلى Typescript

02:31.230 --> 02:33.160
، ولكن أيضًا بالنسبة إلى JavaScript.

02:33.160 --> 02:35.532
هذا المفهوم الصادق والخطأ ، الذي يجب

02:35.532 --> 02:38.280
أن تعرفه ، لا يتعلق بأنواع البيانات.

02:38.280 --> 02:40.840
هذا عمل من وراء الكواليس.

02:40.840 --> 02:43.030
يضيف JavaScript وقت تشغيل

02:43.030 --> 02:46.510
، عندما ترى قيمًا معينة ، وشروط IF.

02:46.510 --> 02:48.530
لذلك ، باستخدام الأرقام والسلاسل والقيمة المنطقية ، نحصل

02:48.530 --> 02:50.060
على نوعين من أنواع البيانات الأساسية.

02:50.060 --> 02:51.450
بالطبع ، ليس كل شيء ، لدينا

02:51.450 --> 02:53.410
كائنات وما إلى ذلك أيضًا ، ولكن

02:53.410 --> 02:54.617
دعنا نركز على هذه الأنواع

02:54.617 --> 02:57.330
ونرى ما الذي يفعله نظام كتابة الكتابة بها

02:57.330 --> 03:00.930
، أو ما يمكننا فعله بها ، بمساعدة تنضيد.

03:00.930 --> 03:02.620
لهذا ، عدت إلى المشروع ، ورأينا

03:02.620 --> 03:05.190
في وحدة الدورة التدريبية الأولى ، وهناك

03:05.190 --> 03:07.600
أوضحت لك أن كل ما عليك فعله الآن ، هو تشغيل

03:07.600 --> 03:10.320
npm ابدأ في Terminal ، والتنقل فيه إلى مجلد

03:10.320 --> 03:12.280
المشروع هذا ، لتدوير فوق خادم

03:12.280 --> 03:15.130
التطوير المباشر هذا ، والذي سيتم إعادة تحميله

03:15.130 --> 03:18.110
، كلما قمنا بتغيير شيء ما ، وهنا ، فتحت هذا المضيف

03:18.110 --> 03:22.300
المحلي: عنوان 3000 في علامة التبويب الجديدة في المتصفح الخاص

03:22.300 --> 03:24.890
بي.

03:24.890 --> 03:26.070
حسنًا ، أعلم ، تلقيت خطأ

03:26.070 --> 03:28.300
، لأنه ليس لدي علبة تطبيقات كملف ، حتى الآن.

03:28.300 --> 03:30.380
بالطبع ، ستجد أن مشروع البداية

03:30.380 --> 03:32.280
هذا ، وكله مرتبط بهذه المحاضرة

03:32.280 --> 03:34.400
، سيحصل على علبة التطبيق كملف ، والذي

03:34.400 --> 03:37.590
نحاول استيراده هنا ، في ملف فهرس html الخاص بنا

03:37.590 --> 03:42.050
، بمجرد تجميع التطبيق. ts من Typescript إلى JavaScript ويمكننا القيام

03:42.050 --> 03:45.070
بذلك في علامة تبويب جديدة للمحطة الطرفية ، حتى نحافظ على تشغيل هذه

03:45.070 --> 03:46.860
العملية ونفتح علامة تبويب جديدة بدلاً

03:46.860 --> 03:51.117
من ذلك ، ببساطة عن طريق تشغيل تطبيق tsc. ts وما يفعله هذا ، فهو يجمع

03:53.920 --> 03:56.630
ملف Typescript ويخرج ملف JavaScript

03:56.630 --> 03:58.680
، وبمجرد حدوث ذلك ، يمكننا

03:58.680 --> 04:01.570
إعادة تحميل هذه الصفحة ونحصل على الوقت

04:01.570 --> 04:05.520
للبدء ... الإخراج هنا.

04:05.520 --> 04:08.000
إذن ، لدينا الآن هذا الإعداد هنا ، هل يمكننا

04:08.000 --> 04:10.620
كتابة بعض التعليمات البرمجية التي يتم كتابتها

04:10.620 --> 04:14.650
ثم تجميعها في كود JavaScript ، لمعرفة ما يفعله.

04:14.650 --> 04:17.000
الآن ، مع ذلك في ملف Typescript ، سأتخلص

04:17.000 --> 04:18.870
فعليًا من المحتوى هناك ، لأنني

04:18.870 --> 04:21.820
الآن أريد الغوص في أنواع البيانات الأساسية هذه ،

04:21.820 --> 04:23.720
والتي عرضتها عليك للتو على الشريحة

04:23.720 --> 04:27.230
، حتى تفهم كيفية التعامل معها في الكتابة المطبوعة.

04:27.230 --> 04:29.430
الآن ، لنبدأ بسيطًا جدًا.

04:29.430 --> 04:32.240
دعنا نقول ، لدينا وظيفة جديدة ، نضيفها ، وهناك

04:32.240 --> 04:34.990
نتوقع رقمين ، n1 ونضيف اثنين ، ويعود ذلك

04:34.990 --> 04:38.610
n1 زائد n2 ، تمامًا بهذه الطريقة ، وظيفة بسيطة جدًا ،

04:38.610 --> 04:42.370
لا يوجد شيء من النوع Typescript-ish بخصوصها.

04:42.370 --> 04:46.080
الآن ، لدينا رقمان نريد العمل بهما.

04:46.080 --> 04:49.800
يمكن أن يكون هذا الرقم 1 هنا ، وهو ، على سبيل المثال ، خمسة

04:49.800 --> 04:54.680
وكذلك رقم 2 ، والذي ربما يكون 2. 8 ، كل ما تريد ،

04:54.680 --> 04:57.060
رقمان هنا.

04:57.060 --> 04:59.820
الآن ، من الواضح وليس بشكل مفاجئ ، يمكننا

04:59.820 --> 05:02.950
إضافة أو استدعاء وظيفة الإضافة وتمرير

05:02.950 --> 05:05.280
الرقم 1 والرقم 2 كوسيطتين لهذه

05:05.280 --> 05:07.320
الوظيفة ، وتخزين النتيجة

05:07.320 --> 05:10.360
في ثابت جديد ربما ، وبعد ذلك لرؤية شيء ما

05:10.360 --> 05:12.470
على الشاشة ، يمكننا التحكم

05:12.470 --> 05:15.080
. سجل النتيجة.

05:15.080 --> 05:20.080
إذا فعلنا ذلك ، وقمت بإعادة تجميع هذا الملف باستخدام تطبيق tsc. ts ، فيجب إعادة تحميل هذه الصفحة

05:20.270 --> 05:22.730
تلقائيًا ، بالفعل.

05:22.730 --> 05:24.350
إذا لم يكن كذلك ، يمكنك إعادة التحميل

05:24.350 --> 05:27.010
يدويًا ، بالطبع ، وسترى 7. 8.

05:27.010 --> 05:30.250
الآن ، قد تعتقد أن هذا ليس خاصًا جدًا ، أليس كذلك؟

05:30.250 --> 05:33.650
هذا مقتطف جافا سكريبت مستقيم جدًا ، وفي الواقع

05:33.650 --> 05:37.330
، لا يوجد شيء يفعله Typescript-ish حيال ذلك.

05:37.330 --> 05:39.450
حسنًا ، لنفعل شيئًا من شأنه أن يوقف

05:39.450 --> 05:41.900
هذا المقتطف في جافا سكريبت العادي.

05:41.900 --> 05:45.100
دعنا نقول ، هذا الإدخال هنا ليس في الواقع

05:45.100 --> 05:48.530
رقمًا ، ولكن بعض النص ، خمسة في النص ، وإذا

05:48.530 --> 05:49.880
حفظنا ذلك الآن ،

05:49.880 --> 05:53.380
وأعدنا تشغيل أمر التجميع هنا ، فسترى أنه بمجرد

05:53.380 --> 05:56.110
إعادة تحميل هذه الصفحة هنا ، سأحصل

05:56.110 --> 05:59.530
على 52 . 8 كناتج ومن الواضح أن هذه

05:59.530 --> 06:02.200
ليست النتيجة الصحيحة لهذه الإضافة.

06:02.200 --> 06:04.500
الآن ، هل تعرف سبب حصولنا على هذا الإخراج

06:04.500 --> 06:06.450
في JavaScript عادي ، والذي نقوم

06:06.450 --> 06:08.670
في النهاية بتنفيذه هنا.

06:08.670 --> 06:10.150
حسنًا ، لقد حصلنا على

06:10.150 --> 06:14.710
هذا الإخراج ، لأن هذا ليس نتيجة الجمع الرياضي ، ولكن بدلاً من ذلك ،

06:14.710 --> 06:17.760
هذا يربط هذا كسلسلة ، لأن هذا الإدخال ، هنا ، خمسة

06:17.760 --> 06:21.060
، عبارة عن سلسلة ثم ترى JavaScript ، "حسنًا ، أنا

06:21.060 --> 06:23.997
حصلت على سلسلة ، "أنا أضيف شيئًا إلى هذه السلسلة

06:23.997 --> 06:27.667
، بينما بالتأكيد ،" يجب أيضًا تحويل هذا الشيء إلى سلسلة

06:27.667 --> 06:32.097
، "لذلك بشكل عام ، حصلت على سلسلة ،" لأن القيمة الأولى كانت سلسلة

06:32.097 --> 06:34.190
، "وبالتالي ما يفعله JavaScript

06:34.190 --> 06:39.240
هو أنه يحول 2.

06:39.240 --> 06:39.240
8

06:39.240 --> 06:42.720
من رقم إلى سلسلة ، تسلسل سلسلة أطول من خمسة و 2. 8 ، وبالتالي

06:42.720 --> 06:46.700
أسفر عن 52. 8 ، كسلسلة وإرجاع ذلك.

06:46.700 --> 06:49.490
لذلك ، لا يتم التعامل مع هذا بطريقة رياضية ، ولكن

06:49.490 --> 06:50.850
بدلاً من ذلك ، كسلسلة ، ومع

06:50.850 --> 06:52.900
JavaScript ، يمكن أن يحدث هذا.

06:52.900 --> 06:54.037
الآن ، بالطبع ، قد تفكر ،

06:54.037 --> 06:55.427
"لماذا أكتب مثل هذا الرمز؟

06:55.427 --> 06:58.160
"أنا المطور ، لماذا أرتكب هذا الخطأ؟ حسنًا ، ربما لست أنت الشخص الذي ترتكب هذا الخطأ.

06:58.160 --> 07:01.230
ربما ، يتم جلب هذا من بعض مدخلات المستخدم

07:01.230 --> 07:04.180
وقد أدخلت خطأً بسيطًا في التعليمات

07:04.180 --> 07:06.690
البرمجية الخاصة بك ، حيث نسيت تحويل

07:06.690 --> 07:09.350
هذا ، أو أنك تعمل في فريق ولديك ملفان

07:09.350 --> 07:12.460
نصيان ، تعملان معًا ، و قدم مطور آخر مثل

07:12.460 --> 07:14.740
هذا الخطأ.

07:14.740 --> 07:17.270
ليس من المستحيل ارتكاب مثل هذه الأخطاء

07:17.270 --> 07:20.110
، ولكن قد يكون من الصعب تعقبها.

07:20.110 --> 07:22.340
هنا ، بالطبع ، من الواضح جدًا أن شيئًا

07:22.340 --> 07:24.010
ما قد حدث خطأ ، لأن لدينا نصًا

07:24.010 --> 07:26.400
أساسيًا ، ولكن في نص أكبر ، قد لا تدرك على

07:26.400 --> 07:28.320
الفور حدوث خطأ ما هنا ، وكان هذا

07:28.320 --> 07:31.520
ما يمكن أن يساعدنا في "كتابة السكربت".

07:31.520 --> 07:33.720
يمكننا إضافة تعيينات النوع

07:33.720 --> 07:36.390
في هذه الوظيفة إلى معلماتنا.

07:36.390 --> 07:38.820
يمكننا إخبار Typescript أن هاتين

07:38.820 --> 07:42.280
المعلمتين يجب أن تكون من النوع رقم وليس من النوع

07:42.280 --> 07:45.340
، لا يهمني أيهما هو الافتراضي.

07:45.340 --> 07:47.535
لذلك ، نقوم بذلك ، بإضافة نقطتين

07:47.535 --> 07:50.300
هنا ، بعد القيمة التي نريد تعيين نوع

07:50.300 --> 07:52.890
لها ، لذلك ، في هذه الحالة ، بعد اسم

07:52.890 --> 07:55.220
المعلمة ثم اسم النوع.

07:55.220 --> 07:57.140
على سبيل المثال ، سيكون الرقم أحد الأسماء المدعومة.

07:57.140 --> 08:00.560
إلى جانب العدد ، لديك أيضًا سلسلة ، أو

08:00.560 --> 08:03.480
منطقية ، لكننا سنعود إليها.

08:03.480 --> 08:05.990
في الوقت الحالي ، نحتاج إلى رقم ولا نحتاجه

08:05.990 --> 08:07.750
فقط في المعلمة الأولى هنا

08:07.750 --> 08:10.530
، ولكن أيضًا في المعامل الثاني.

08:10.530 --> 08:12.010
لذلك ، هنا أيضًا ، يمكننا

08:12.010 --> 08:16.150
إضافة نقطتين ، ثم رقم ، والآن ، ما نقوله لـ Typescript ، هو ، "مرحبًا

08:16.150 --> 08:18.367
، يجب أن تكون كلا المعلمتين هنا من

08:18.367 --> 08:22.147
النوع رقم" ، ويمر في قيم من نوع مختلف غير مسموح به ، "وبالفعل

08:22.147 --> 08:25.530
، يشكو IDE الخاص بي بالفعل هنا ، لأن Visual Studio Code

08:25.530 --> 08:28.360
يحتوي على دعم الأنواع المضمنة ، ولكن حتى لو

08:28.360 --> 08:32.510
أغفلنا ذلك ، بمجرد إعادة تجميع هذا ، عن طريق إعادة تشغيل تطبيق

08:32.510 --> 08:34.260
tsc. ts ، سترى ، حصلنا

08:34.260 --> 08:39.193
على خطأ.

08:40.040 --> 08:41.670
حصلنا على خطأ ، وهو أن "الوسيطة

08:41.670 --> 08:42.697
من النوع" 5 "غير

08:42.697 --> 08:46.250
قابلة للتخصيص إلى معلمة من النوع" number "، بل إنها

08:46.250 --> 08:48.660
توضح لنا مكان حدوث ذلك وتعطينا رقم

08:48.660 --> 08:51.140
السطر ، السطر الثامن ، وهي توضح لنا

08:51.140 --> 08:54.430
أساسًا نفسه ، يظهر IDE هنا.

08:54.430 --> 08:56.740
لذلك ، في حالة التغاضي عنها في IDE ، فإن

08:56.740 --> 08:58.707
تجميعها ، يؤدي الآن إلى حدوث خطأ

08:58.707 --> 09:01.340
، وهذا هو الشيء المهم في Typescript.

09:01.340 --> 09:03.284
إنه يساعدنا فقط أثناء التجميع.

09:03.284 --> 09:06.220
لا يغير JavaScript ليعمل بشكل مختلف في وقت

09:06.220 --> 09:10.110
التشغيل ، لأن المتصفحات لا تحتوي على دعم إنشائي مضمّن.

09:10.110 --> 09:13.510
يمكن أن يساعدنا فقط أثناء التطوير ، قبل أن نقوم

09:13.510 --> 09:15.700
بتجميع كود التنضيد الخاص بنا إلى

09:15.700 --> 09:19.310
JavaScript ، ولكن هناك ، يكون مفيدًا للغاية ، لأنه

09:19.310 --> 09:21.520
يضيف خطوة إضافية ، وفحصًا إضافيًا

09:21.520 --> 09:25.560
للعقل ، حيث نكتشف هنا ، "أوه ، لقد ارتكبنا خطأ .

09:25.560 --> 09:28.407
"هنا ، لا ينبغي أن يكون هذا سلسلة ، يجب أن يكون

09:28.407 --> 09:31.660
هذا رقمًا" ، ويمكننا إصلاح هذا الأمر ونحن جيدون.

09:31.660 --> 09:34.210
هذا ما يفعله كتاب الطباعة.

09:34.210 --> 09:35.670
يساعدك أثناء التطوير.

09:35.670 --> 09:37.390
لا يغير رمز وقت التشغيل الخاص بك.

09:37.390 --> 09:40.130
في الواقع ، هنا ، حتى مع الإعدادات الافتراضية

09:40.130 --> 09:42.800
، قام بتجميع الخطأ الخاص بنا هنا ، على الرغم

09:42.800 --> 09:44.700
من اكتشافه أثناء التجميع ، وإنشاء

09:44.700 --> 09:47.220
ملف يتسبب في نتيجة غير صحيحة ، لأنه افتراضيًا

09:47.220 --> 09:50.690
، لا يتدخل Typescript هنا.

09:50.690 --> 09:53.560
ستتعلم لاحقًا ، كيف يمكنك التأكد من ذلك ،

09:53.560 --> 09:56.300
ولكن افتراضيًا ، لا يمنع حتى التجميع.

09:56.300 --> 09:59.260
ومع ذلك ، فهو يصرخ في وجهك ويشير إلى هذا

09:59.260 --> 10:03.570
الخطأ ، حتى تتمكن من إصلاحه ، وبالتالي يمكنك تجنب مثل هذه

10:03.570 --> 10:04.850
الأخطاء هنا.

10:04.850 --> 10:07.450
بالمناسبة ، تأكد من عدم وجود

10:07.450 --> 10:09.020
التطبيق لديك. js والتطبيق. ts مفتوحة في نفس الوقت.

10:09.020 --> 10:11.950
يمكن أن تحصل على أخطاء هنا في

10:11.950 --> 10:13.470
IDE ، فيما يتعلق بتنفيذ الوظائف المكررة.

10:13.470 --> 10:15.830
يؤدي إغلاق ملف JavaScript إلى إصلاح هذا.
