WEBVTT

00:02.540 --> 00:05.610
Instructeur: Vervolgens wil ik functie-overloads

00:05.610 --> 00:08.050
onderzoeken, een functie waarmee we meerdere

00:08.050 --> 00:11.450
functie-handtekeningen kunnen definiëren, zeg maar,

00:11.450 --> 00:13.840
voor één en dezelfde functie.

00:13.840 --> 00:17.080
Dat betekent simpelweg dat we meerdere mogelijke manieren kunnen

00:17.080 --> 00:20.340
hebben om een functie aan te roepen met verschillende parameters,

00:20.340 --> 00:24.300
bijvoorbeeld om vervolgens iets te doen binnen die functie.

00:24.300 --> 00:26.540
En een goed voorbeeld waar functie-overloads

00:26.540 --> 00:29.060
ons kunnen helpen zie je iets verder hierboven.

00:29.060 --> 00:32.090
Deze add-functie die we eerder schreven,

00:32.090 --> 00:35.940
neemt twee combineerbare waarden, dat wil zeggen

00:35.940 --> 00:37.960
strings of getallen, en zoals

00:37.960 --> 00:39.830
je ziet leidt TypeScript

00:39.830 --> 00:43.450
hier uit af dat alles combineerbaar is.

00:43.450 --> 00:45.370
Dit betekent gewoon dat TypeScript

00:45.370 --> 00:47.960
begrijpt dat wat het teruggeeft ook een string

00:47.960 --> 00:51.080
of een getal is, maar eigenlijk is dat, als je erover nadenkt,

00:51.080 --> 00:52.880
niet echt waar.

00:52.880 --> 00:55.280
Ik bedoel, technisch gezien is het waar, maar we weten

00:55.280 --> 00:57.620
dat als we twee getallen invoeren, het terugkeertype

00:57.620 --> 00:59.400
altijd een getal zal zijn.

00:59.400 --> 01:01.940
Als we ten minste één string invoeren, zal het

01:01.940 --> 01:03.950
retourneertype string zijn.

01:03.950 --> 01:05.460
Waarom is dit belangrijk?

01:05.460 --> 01:08.225
Onthoud dat de add-functie als volgt is geschreven.

01:08.225 --> 01:11.060
En eigenlijk kun je alles eronder uitcommentariëren

01:11.060 --> 01:15.390
en wat nieuwe code toevoegen, precies onder de functie.

01:15.390 --> 01:18.670
Als ik nu hier mijn resultaat krijg door add aan te roepen,

01:18.670 --> 01:21.870
ik geef één en vijf in, zie je dat het resultaat van het type

01:21.870 --> 01:23.390
combineerbaar is.

01:23.390 --> 01:27.010
Een gevolg hiervan is dat TypeScript niet weet

01:27.010 --> 01:30.390
of het resultaat een getal of een string is.

01:30.390 --> 01:34.510
Dit kan van belang zijn als we strings doorgeven.

01:34.510 --> 01:39.510
Als ik hier Max Schwarz doorgeef, dan werkt dit, maar ik krijg nog steeds

01:39.700 --> 01:41.750
combineerbaar terug.

01:41.750 --> 01:43.990
Als gevolg daarvan kan ik nu geen stringfuncties

01:43.990 --> 01:46.120
aanroepen op het resultaat, ik kan bijvoorbeeld

01:46.120 --> 01:50.600
geen split aanroepen om te splitsen op de witte ruimte.

01:50.600 --> 01:52.870
Ik weet dat dit zal werken, want ik weet

01:52.870 --> 01:55.270
dat wanneer ik de functie zo aanroep, ik er

01:55.270 --> 01:57.200
deze if-tak van maak en ik een string

01:57.200 --> 01:59.980
terugkrijg, dus ik weet dat de resultaten de string

01:59.980 --> 02:03.030
zullen bevatten, maar TypeScript weet gewoon dat het

02:03.030 --> 02:05.620
een string of een getal bevat.

02:05.620 --> 02:08.350
Nu kunnen we natuurlijk type casting gebruiken en TypeScript

02:08.350 --> 02:11.340
vertellen dat wat we terugkrijgen een string is.

02:11.340 --> 02:13.930
We kunnen dat doen met de type casting syntaxis

02:13.930 --> 02:16.040
waar je eerder over geleerd hebt.

02:16.040 --> 02:18.840
Toch is het niet optimaal dat we dat moeten doen, zou ik zeggen,

02:18.840 --> 02:21.800
omdat we hier meer code moeten schrijven ook al zouden we verwachten

02:21.800 --> 02:24.560
dat TypeScript begrijpt dat wanneer we deze functie zo

02:24.560 --> 02:26.070
aanroepen we altijd een string

02:26.070 --> 02:27.740
terugkrijgen.

02:27.740 --> 02:30.890
Maar TypeScript analyseert onze code hier niet goed

02:30.890 --> 02:33.700
genoeg, en dat is waar een functie-overload

02:33.700 --> 02:35.000
ons kan helpen.

02:35.000 --> 02:38.730
Een functie-overload wordt geschreven door simpelweg

02:38.730 --> 02:41.880
een functie te schrijven direct boven je hoofdfunctie,

02:41.880 --> 02:46.683
zeg maar, met dezelfde naam, dus je herhaalt deze regel hier in principe,

02:47.880 --> 02:50.890
echter zonder de accolades, geen openende en

02:50.890 --> 02:54.080
sluitende accolades daarna, en nu wil je hier specifieke

02:54.080 --> 02:57.980
types nummer en getal gebruiken en dan het terugvindtype voor

02:57.980 --> 03:03.410
wanneer dit het geval is als je tenminste één getal krijgt.

03:03.410 --> 03:06.643
En daar kunnen we zeggen, dan is het terugkeertype een getal.

03:08.840 --> 03:10.980
Dus nu zeggen we tegen TypeScript, als

03:10.980 --> 03:14.980
we deze functie aanroepen en beide argumenten zijn een getal, dan geeft

03:14.980 --> 03:17.180
deze functie een getal terug.

03:17.180 --> 03:19.430
Nu is dit natuurlijk geen syntaxis die in JavaScript

03:19.430 --> 03:22.480
zou werken, het wordt door TypeScript geëlimineerd in het

03:22.480 --> 03:24.430
compilatieproces.

03:24.430 --> 03:28.480
Maar TypeScript voegt deze functie-informatie en deze

03:28.480 --> 03:31.380
functie-declaratie hier samen en combineert

03:31.380 --> 03:33.640
in feite de kennis van deze twee

03:33.640 --> 03:35.550
regels hier.

03:35.550 --> 03:38.590
En nu weet het oké, we kunnen deze functie hier

03:38.590 --> 03:41.490
aanroepen met A en B van het type combineerbaar

03:41.490 --> 03:43.790
of met A en B van het type nummer.

03:43.790 --> 03:47.060
Overigens kun je hier ook meer of minder parameters toevoegen

03:47.060 --> 03:50.100
in je overloads, je bent daar echt flexibel.

03:50.100 --> 03:53.640
Je voegt hier ook functie add toe en verwacht

03:53.640 --> 03:57.620
gewoon een getal en geeft een getal terug, en dit

03:57.620 --> 04:01.210
zou ook werken als we B optioneel maken in onze

04:01.210 --> 04:03.270
andere overloads.

04:03.270 --> 04:05.254
Want uiteindelijk moet je er natuurlijk

04:05.254 --> 04:08.630
voor zorgen dat je code hier altijd werkt en je uiteindelijk alle

04:08.630 --> 04:10.850
argumenten krijgt die je nodig hebt.

04:10.850 --> 04:13.610
Dus B zou hier optioneel zijn, dan zie je dat

04:13.610 --> 04:15.170
dit werkt, nu moeten we er

04:15.170 --> 04:17.850
natuurlijk omheen werken dat B daar mogelijk

04:17.850 --> 04:19.550
optioneel is.

04:19.550 --> 04:21.390
Ik heb dat echter niet nodig, dus ik

04:21.390 --> 04:24.460
haal dat weg en laat dit gewoon staan, maar ik wilde ook geen

04:24.460 --> 04:27.200
overload voor als we dit aanroepen met strings.

04:27.200 --> 04:30.060
Dus voeg ik hier nog een functie-overload

04:30.060 --> 04:33.450
toe waarbij A een string is en B een string en dan

04:33.450 --> 04:36.090
is het vrij duidelijk dat wat we teruggeven

04:36.090 --> 04:38.460
een string zal zijn.

04:38.460 --> 04:40.280
Overigens is het een goed gebruik om

04:40.280 --> 04:43.660
hier een puntkomma toe te voegen na deze overbelastingsregels.

04:43.660 --> 04:46.560
Dus als we deze functie aanroepen met twee getallen,

04:46.560 --> 04:49.100
krijgen we altijd een getal terug.

04:49.100 --> 04:52.170
Als we het aanroepen met twee strings, krijgen we altijd een string terug.

04:52.170 --> 04:54.510
Als we het aanroepen met één string en één nummer, krijgen

04:54.510 --> 04:57.020
we technisch gezien ook altijd een string terug, maar ik

04:57.020 --> 04:57.853
wil niet al deze mogelijke

04:57.853 --> 04:59.410
combinaties hier bij elkaar optellen,

04:59.410 --> 05:01.240
ik zou natuurlijk meer kunnen toevoegen

05:01.240 --> 05:03.173
en dan ook nummer hier toevoegen, of de andere

05:04.040 --> 05:07.500
combinatie die we zouden kunnen hebben, en dat is deze.

05:07.500 --> 05:10.060
Ik denk dat ik nu wel alle combinaties heb toegevoegd.

05:10.060 --> 05:12.540
En nu som ik hier alle mogelijke combinaties

05:12.540 --> 05:16.040
van waarden op en wat we in elk geval terugkrijgen.

05:16.040 --> 05:18.260
Nu zie je dat de fout daar beneden weg is omdat

05:18.260 --> 05:20.520
TypeScript nu weet dat de resultaten van het

05:20.520 --> 05:24.790
type string zullen zijn als we add aanroepen met deze twee waarden die beide strings

05:24.790 --> 05:25.623
zijn.

05:25.623 --> 05:28.510
En als ik met de muis over add ga, zie je dat er drie

05:28.510 --> 05:31.100
extra overloads beschikbaar zijn.

05:31.100 --> 05:32.980
Hier roep ik add aan met twee strings, maar

05:32.980 --> 05:35.560
TypeScript weet dat er drie andere manieren zijn om dit

05:35.560 --> 05:36.630
aan te roepen.

05:36.630 --> 05:39.450
Bijvoorbeeld met een string en een getal,

05:39.450 --> 05:41.340
in welk geval ik een string terugkrijg,

05:41.340 --> 05:46.340
met een getal en een of andere string, of met twee getallen.

05:47.430 --> 05:48.630
Dit zou ook werken.

05:48.630 --> 05:50.210
Dan kan ik natuurlijk niet splitsen

05:50.210 --> 05:52.650
aanroepen omdat TypeScript correct vaststelt dat

05:52.650 --> 05:54.630
wanneer ik dit aanroep met twee getallen,

05:54.630 --> 05:58.253
ik een getal terug krijg, en op een getal kun je geen splitsen aanroepen.

05:59.260 --> 06:02.010
Dit zijn dus functie-overloads en ze kunnen je helpen

06:02.010 --> 06:04.060
in situaties zoals deze hier, waar TypeScript

06:04.060 --> 06:06.780
zelf niet in staat zou zijn om het terugkeertype correct

06:06.780 --> 06:08.590
af te leiden, hier kan je echt duidelijk

06:08.590 --> 06:11.660
zijn over wat er wordt teruggegeven voor de verschillende

06:11.660 --> 06:16.033
combinaties die je zou kunnen ondersteunen in je functie.
