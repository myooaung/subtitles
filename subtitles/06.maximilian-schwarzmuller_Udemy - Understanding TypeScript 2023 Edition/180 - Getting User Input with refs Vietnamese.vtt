WEBVTT

00:02.240 --> 00:04.870
Người trình bày: Vì vậy, chúng tôi đã thêm thành phần đầu tiên của mình.

00:04.870 --> 00:06.090
Hãy thêm một cái thứ hai.

00:06.090 --> 00:09.970
MớiTodo. tsx là tên tệp.

00:09.970 --> 00:13.060
Tất nhiên, trong đó, chúng tôi nhập phản ứng từ phản ứng.

00:13.060 --> 00:16.170
Và tất nhiên bạn cũng có thể xây dựng các thành phần dựa trên lớp.

00:16.170 --> 00:18.270
Điều này cũng được hỗ trợ đầy đủ,

00:18.270 --> 00:22.410
nhưng tôi sẽ chỉ sử dụng kiểu thành phần chức năng hiện đại này.

00:22.410 --> 00:24.070
Vì vậy, ở đây một lần nữa chúng ta có một chức

00:24.070 --> 00:26.180
năng sẽ tạo nên thành phần của chúng ta sau này.

00:26.180 --> 00:29.258
Và tôi xuất NewTodo làm mặc định của mình và hãy thêm

00:29.258 --> 00:31.260
một phép gán kiểu và hãy làm rõ rằng

00:31.260 --> 00:33.021
đây sẽ là một thành phần chức

00:33.021 --> 00:34.410
năng kiểu.

00:34.410 --> 00:35.800
Và do đó, tất nhiên ở đây,

00:35.800 --> 00:38.220
chúng tôi thiếu một số mã jsx được trả về.

00:38.220 --> 00:39.730
Vì vậy, ở đây tôi sẽ trả về một biểu mẫu

00:39.730 --> 00:42.030
mà tôi muốn thêm tất cả các điều khiển mà tôi cần để cho

00:42.030 --> 00:43.780
phép người dùng thêm các todo mới.

00:45.060 --> 00:48.650
Bây giờ, hãy thêm thành phần việc cần làm mới này vào thành phần ứng dụng.

00:48.650 --> 00:53.650
Vì vậy, tại đây, chúng tôi có thể nhập NewTodo từ tệp . /components/NewTodo và chỉ cần

00:55.130 --> 00:58.095
thêm nó vào đây thay vì bình luận.

00:58.095 --> 01:00.520
NewTodo như một thành phần tự đóng, bởi

01:00.520 --> 01:02.790
vì hiện tại chúng tôi không chuyển bất

01:02.790 --> 01:04.750
kỳ thứ gì giữa thẻ mở và thẻ đóng và

01:04.750 --> 01:07.784
chúng tôi cũng không có bất kỳ đạo cụ nào ở đây, ít nhất

01:07.784 --> 01:09.263
là vào lúc này.

01:10.140 --> 01:11.540
Vì vậy, thay vì thành

01:11.540 --> 01:13.330
phần này, giờ đây chúng ta có

01:13.330 --> 01:16.190
thể thêm một đầu vào và sau đó là một nút.

01:16.190 --> 01:18.117
Vì vậy, hãy thêm một div ở đây

01:18.117 --> 01:20.020
thực sự mà tôi muốn có một nhãn

01:20.020 --> 01:24.880
với các thuộc tính htmlFor trỏ đến giả sử, "văn bản cần làm".

01:24.880 --> 01:26.560
Tất cả chỉ là đánh dấu ở

01:26.560 --> 01:31.250
đây, trong đó tôi nói "Văn bản việc cần làm" và sau đó nhập phần

01:31.250 --> 01:35.170
tử loại văn bản có id là "văn bản việc cần làm", để nhãn

01:35.170 --> 01:36.900
và đầu vào được kết nối

01:36.900 --> 01:39.640
chính xác về mặt ngữ nghĩa.

01:39.640 --> 01:41.440
Và bên dưới div đó ở đây, thay

01:41.440 --> 01:43.120
vì biểu mẫu, tôi sẽ thêm một

01:43.120 --> 01:44.437
nút mà tôi nói, "THÊM

01:45.297 --> 01:47.970
VIỆC CẦN LÀM", Và nút đó phải thuộc loại gửi

01:47.970 --> 01:49.670
để nó gửi biểu mẫu.

01:49.670 --> 01:51.900
Đây hiện là một biểu mẫu rất cơ bản mà chúng ta có thể sử

01:51.900 --> 01:53.143
dụng để thêm một Todo mới.

01:54.580 --> 01:57.060
Bây giờ, hãy đảm bảo rằng điều này hoạt động

01:57.060 --> 01:59.660
và đối với điều này, chúng ta thực sự có một số bước

01:59.660 --> 02:01.820
khác nhau mà chúng ta cần áp dụng.

02:01.820 --> 02:05.020
Chúng tôi cần lấy bất cứ thứ gì người dùng đã nhập vào đây và

02:05.020 --> 02:08.550
sau đó chúng tôi cần chuyển tiếp những gì người dùng nhập vào đây

02:08.550 --> 02:09.810
tới thành phần ứng dụng

02:09.810 --> 02:13.330
vì đó là nơi chúng tôi sẽ quản lý các công việc của mình sau này.

02:13.330 --> 02:16.150
Vì vậy, trước hết, hãy phản ứng với việc gửi biểu mẫu.

02:16.150 --> 02:18.050
Chúng ta có thể thêm một chức năng mới,

02:18.050 --> 02:20.300
do đó, một chức năng trong thành phần chức năng,

02:20.300 --> 02:22.720
nhưng giờ đây chức năng đó sẽ là một chức năng thông

02:22.720 --> 02:27.720
thường mà chúng ta sẽ đặt tên là "todoSubmitsHandler", bất kỳ tên nào bạn muốn.

02:28.210 --> 02:29.990
Đây là một chức năng sẽ kích hoạt bất

02:29.990 --> 02:31.860
cứ khi nào biểu mẫu này được gửi.

02:31.860 --> 02:35.571
Vì vậy, cuối cùng chúng ta có thể liên kết nó với onSubmit prop

02:35.571 --> 02:38.770
ở đây, todoSubmitsHandler, không thực thi nó, chỉ

02:38.770 --> 02:40.900
trỏ vào nó, để nó được thực thi cho chúng

02:40.900 --> 02:43.810
ta bất cứ khi nào biểu mẫu này được gửi.

02:43.810 --> 02:46.270
Bây giờ ở đây chúng ta có một đối tượng sự kiện và đối tượng

02:46.270 --> 02:49.507
sự kiện thuộc loại phản ứng. FormEvent.

02:51.290 --> 02:54.010
Bây giờ, tôi muốn gọi sự kiện ngăn mặc định

02:54.010 --> 02:55.780
để ngăn mặc định đó, tức là gửi

02:55.780 --> 02:58.300
một yêu cầu thực sự đến máy chủ phục vụ ứng

02:58.300 --> 02:59.280
dụng này.

02:59.280 --> 03:01.520
Đó là tất nhiên không phải khi tôi muốn xảy ra.

03:01.520 --> 03:04.680
Tôi chỉ muốn xử lý yêu cầu này ở đây bằng JavaScript

03:04.680 --> 03:08.350
và do đó, mặc định trình duyệt này phải được ngăn chặn.

03:08.350 --> 03:09.770
Bây giờ với điều đó đã được ngăn chặn,

03:09.770 --> 03:12.610
chúng tôi có thể lấy bất cứ thứ gì người dùng đã nhập vào đầu vào và

03:12.610 --> 03:15.250
để làm được điều này, chúng tôi có hai cách khác nhau.

03:15.250 --> 03:18.310
Chúng tôi có thể quản lý trạng thái của đầu vào ở đây,

03:18.310 --> 03:20.970
loại có ràng buộc hai chiều hoặc chúng tôi sử dụng

03:20.970 --> 03:23.170
ref, một tham chiếu, để trích xuất những

03:23.170 --> 03:25.010
gì người dùng đã nhập ở đây khi biểu

03:25.010 --> 03:26.520
mẫu được gửi.

03:26.520 --> 03:28.410
Tôi sẽ sử dụng cách tiếp cận thứ hai

03:28.410 --> 03:30.420
vì chúng ta sẽ thấy quản lý trạng thái

03:30.420 --> 03:33.470
hoạt động trong thành phần ứng dụng trong giây lát.

03:33.470 --> 03:37.340
Để thiết lập một ref như vậy, chúng tôi nhập hook useRef từ phản

03:37.340 --> 03:40.580
ứng và hook là các chức năng đặc biệt mà bạn có thể thực

03:40.580 --> 03:44.010
thi và vận hành các thành phần để thêm các chức năng nhất

03:44.010 --> 03:45.290
định vào thành phần

03:45.290 --> 03:48.101
và khi chúng tôi thực thi useRef tại đây, thứ

03:48.101 --> 03:51.190
chúng tôi nhận được là một đối tượng Ref, mà chúng

03:51.190 --> 03:53.730
ta có thể lưu trữ trong một hằng số và tôi

03:53.730 --> 03:57.310
sẽ đặt tên nó là "textInputRef".

03:57.310 --> 04:00.176
Và chúng ta có thể, ví dụ, sử dụng một tham chiếu như

04:00.176 --> 04:04.980
vậy để gán nó cho một phần tử dom và sau đó tương tác với phần tử dom đó từ bên trong

04:04.980 --> 04:06.500
mã của chúng ta ở đây.

04:06.500 --> 04:08.800
Vì vậy, ví dụ, khi biểu mẫu đó được gửi.

04:09.680 --> 04:11.510
Chúng tôi thiết lập một kết nối

04:11.510 --> 04:14.020
như vậy bằng cách thêm phần tử Ref đặc biệt

04:14.020 --> 04:16.580
vào bất kỳ thành phần html nào bạn chọn và trỏ

04:16.580 --> 04:19.150
vào đối tượng mà chúng tôi đã tạo ở đây.

04:19.150 --> 04:21.530
Vì vậy, hãy thêm textInputRef.

04:21.530 --> 04:23.540
Điều này tạo ra một kết nối ở đây.

04:23.540 --> 04:27.380
Tuy nhiên, bạn đã thấy một lần nữa TypeScript không thích điều này.

04:27.380 --> 04:30.110
Bởi vì useRef hóa ra cũng

04:30.110 --> 04:33.250
là một chức năng chung.

04:33.250 --> 04:35.270
Bây giờ loại nào chúng ta có thể chuyển sang nó.

04:35.270 --> 04:37.340
Điều gì sẽ là thú vị để biết ở đây?

04:37.340 --> 04:39.200
Chà, sẽ rất thú vị khi biết loại

04:39.200 --> 04:42.030
dữ liệu nào sẽ được lưu trữ bên trong biểu đồ và

04:42.030 --> 04:43.970
vì bạn chỉ vào phần tử đầu vào, chúng

04:43.970 --> 04:47.880
tôi sẽ có một phần tử đầu vào html được lưu trữ trong đó.

04:47.880 --> 04:50.420
Bây giờ tất cả chúng ta sẽ chỉ phải cung cấp một giá trị mặc

04:50.420 --> 04:51.840
định cho Tham chiếu khi nó được thiết

04:51.840 --> 04:53.190
lập và ở đó chúng ta sẽ cung cấp

04:53.190 --> 04:54.710
giá trị rỗng, bởi vì khi thành phần

04:54.710 --> 04:56.360
được hiển thị lần đầu tiên, khi mã này

04:56.360 --> 04:57.380
thực thi, tất nhiên điều

04:57.380 --> 04:59.460
này không có được hiển thị ở dưới đó, vì vậy điều

04:59.460 --> 05:01.590
này sẽ không chỉ ra bất cứ điều gì.

05:01.590 --> 05:03.350
Tuy nhiên, khi điều này đã được hiển

05:03.350 --> 05:04.950
thị, kết nối sẽ được thiết lập và

05:04.950 --> 05:07.040
sau đó Tham chiếu này sẽ hoạt động.

05:07.040 --> 05:09.453
Và bây giờ ở đây trong todoSubmitHandler, chúng ta có

05:10.342 --> 05:15.342
thể lấy văn bản đã nhập bằng cách sử dụng textInputRef. hiện tại, đó luôn là thứ

05:15.500 --> 05:17.973
bạn cần nhập khi làm việc

05:17.973 --> 05:21.440
với Ref, . giá trị tất nhiên ở đây vì

05:21.440 --> 05:24.530
chúng tôi làm việc với phần tử đầu vào html.

05:24.530 --> 05:27.940
Tuy nhiên, vấn đề ở đây là điều này có thể là null.

05:27.940 --> 05:29.630
Đó là một vấn đề mà chúng tôi đã biết rồi,

05:29.630 --> 05:31.790
chúng tôi cũng đã gặp phải vấn đề này ngay từ đầu

05:31.790 --> 05:33.370
khóa học khi chúng tôi chọn thứ gì đó

05:33.370 --> 05:34.630
trong Dom và chúng tôi cũng có

05:34.630 --> 05:37.020
nó ở đây, vì TypeScript không thể biết chắc chắn rằng

05:37.020 --> 05:38.800
kết nối này đã được thiết lập.

05:38.800 --> 05:40.580
Chúng tôi biết điều đó, chúng tôi đã viết

05:40.580 --> 05:43.050
mã, nhưng thật không may, TypeScript không hiểu rằng

05:43.050 --> 05:45.300
chúng tôi thiết lập kết nối ở dưới đó.

05:46.310 --> 05:48.920
Vì vậy, để khắc phục điều này, chúng ta có thể thêm dấu chấm

05:48.920 --> 05:51.350
than ở đây, để một lần nữa nói với TypeScript rằng điều

05:51.350 --> 05:54.350
này sẽ ổn, điều này sẽ được thiết lập và chúng tôi ổn.

05:54.350 --> 05:56.130
Nhân tiện, TypeScript là chính xác

05:56.130 --> 05:58.920
nếu chúng ta gọi todoSubmitHandler ở đây, cái này

05:58.920 --> 06:00.590
sẽ được gọi là chuyển tiếp, cái

06:00.590 --> 06:02.410
này được hiển thị lần đầu tiên và sau

06:02.410 --> 06:05.000
đó thực sự cái này sẽ chưa được khởi tạo.

06:05.000 --> 06:07.910
Chúng tôi chỉ biết rằng nó sẽ được khởi tạo một cách chắc chắn

06:07.910 --> 06:09.730
bởi vì chúng tôi biết điều này sẽ chỉ được

06:09.730 --> 06:10.830
gọi khi biểu mẫu được gửi

06:10.830 --> 06:13.830
và điều đó chỉ có thể xảy ra sau khi điều này được hiển thị.

06:13.830 --> 06:16.120
Vì vậy, chúng tôi biết cách mã của chúng tôi hoạt động.

06:16.120 --> 06:18.360
Điều này sẽ không bao giờ là vô giá trị.

06:18.360 --> 06:20.810
Nếu có một số khả năng khác, bạn sẽ phải sử

06:20.810 --> 06:22.780
dụng kiểm tra nếu tại đây để kiểm

06:22.780 --> 06:26.030
tra xem textInputRef. hiện tại là null và nếu có,

06:26.030 --> 06:27.620
hãy làm việc khác.

06:27.620 --> 06:29.550
Nhưng ở đây điều này không thể xảy ra.

06:29.550 --> 06:31.230
Vì vậy, với điều đó, chúng tôi đang trích xuất

06:31.230 --> 06:34.640
một giá trị và chúng tôi có thể điều khiển. đăng nhập cái này ở đây để xem nó có hoạt động không.

06:34.640 --> 06:37.040
Nhưng tất nhiên đây không phải là thiết lập cuối cùng sau đó.

06:37.040 --> 06:40.900
Vì vậy, hãy lưu cái này, hãy nhập vào đây, hoàn thành

06:40.900 --> 06:44.590
nó sau một tháng và thêm việc cần làm, và chúng tôi

06:44.590 --> 06:47.970
thấy nó ở đây trong nhật ký bảng điều khiển.

06:47.970 --> 06:50.310
Đó là làm việc theo cách nó nên.

06:50.310 --> 06:51.910
Và khi nó hoạt động theo đúng cách,

06:51.910 --> 06:55.460
bây giờ hãy đảm bảo rằng chúng ta nhận được giá trị đó cho thành phần ứng dụng.

06:55.460 --> 06:58.820
Nếu bạn biết một số phản ứng chắc chắn hãy thử nó một mình trước.

06:58.820 --> 07:00.963
Chúng ta sẽ làm điều đó cùng nhau trong bài giảng tiếp theo.
