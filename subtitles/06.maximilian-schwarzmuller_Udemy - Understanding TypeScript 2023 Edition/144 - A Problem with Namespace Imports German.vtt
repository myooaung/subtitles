WEBVTT

00:02.250 --> 00:04.380
-: Ein wichtiger Hinweis nebenbei: Sie werden

00:04.380 --> 00:07.280
sich vielleicht wundern, warum autobind hier in ProjectList

00:07.280 --> 00:09.960
funktioniert, obwohl ich dem autobind Dekorator keinen

00:09.960 --> 00:11.840
Import hinzugefügt habe.

00:11.840 --> 00:15.860
Nun, weil in app. ts, ich habe alle diese Importe.

00:15.860 --> 00:18.610
Wenn ich nun diese Importe dort entferne, was

00:18.610 --> 00:21.430
korrekt wäre, denn hier verwende ich technisch

00:21.430 --> 00:25.010
gesehen nur ProjectInput ProjectList is on, haben wir ein

00:25.010 --> 00:26.253
Problem.

00:27.260 --> 00:30.680
Sie sehen, wenn dies neu geladen wird, haben wir hier einen Fehler, auch wenn

00:30.680 --> 00:33.280
wir leider keinen Kompilierungsfehler erhalten, aber wir

00:33.280 --> 00:35.010
erhalten einen Laufzeitfehler.

00:35.010 --> 00:37.470
Wir müssen also sicherstellen, dass wir alles, was wir in einer

00:37.470 --> 00:40.150
Datei verwenden, in diese Datei importieren, um sicher zu sein.

00:40.150 --> 00:42.890
Technisch gesehen können wir alles in die App importieren. ts, und da ProjectInput und

00:42.890 --> 00:45.260
ProjectList, die zum Beispiel den Autobind-Dekorator

00:45.260 --> 00:48.320
verwenden, später kommen, wird der Autobind-Dekorator

00:48.320 --> 00:51.750
verfügbar sein, wenn sie ihn brauchen.

00:51.750 --> 00:54.320
Aber das ist nicht der sauberste Weg.

00:54.320 --> 00:56.740
Wenn Sie stattdessen alles, was eine Datei braucht,

00:56.740 --> 00:58.450
aus dieser Datei importieren, müssen

00:58.450 --> 01:00.540
Sie garantieren, dass diese Datei es zur Verfügung

01:00.540 --> 01:02.360
hat, wenn sie es braucht, und Sie verlassen

01:02.360 --> 01:04.400
sich nicht auf eine globale Datei, die alles

01:04.400 --> 01:05.790
importiert, wo Sie dann vielleicht

01:05.790 --> 01:07.500
einen Import entfernen und plötzlich

01:07.500 --> 01:09.570
alles kaputt geht.

01:09.570 --> 01:11.390
Was ist also die Lösung für dieses Problem?

01:11.390 --> 01:13.350
Nun, gehen wir zurück zu den Dateien und importieren,

01:13.350 --> 01:14.530
was sie brauchen.

01:14.530 --> 01:16.630
So benötigt ProjectInput beispielsweise nicht

01:16.630 --> 01:18.790
nur die Basiskomponente, sondern auch die Validierungslogik

01:18.790 --> 01:21.270
und die automatische Bindung.

01:21.270 --> 01:23.630
Hier werde ich also importieren, indem

01:24.970 --> 01:27.110
ich eine Ebene höher gehe, mit zwei

01:27.110 --> 01:32.110
Punkten, von decorators, dem autobind decorator, ups, so, und von util, der

01:32.670 --> 01:35.366
Validierung. ts-Datei.

01:35.366 --> 01:39.770
Das wird in dieser Datei hier definitiv benötigt.

01:39.770 --> 01:42.210
Ich brauche hier auch den Status des Projekts.

01:42.210 --> 01:46.810
Ich werde also /state/project-state importieren. ts.

01:46.810 --> 01:50.690
Ich werde diese Importe nehmen und zu ProjectItem gehen, und dort brauche ich den

01:50.690 --> 01:53.210
Projektstatus und die Validierung nicht, also können

01:53.210 --> 01:54.320
wir das entfernen.

01:54.320 --> 01:56.560
Aber wir brauchen den Autobind-Dekorator.

01:56.560 --> 02:00.580
Wir brauchen auch die verschiebbare Schnittstelle und das Projektmodell.

02:00.580 --> 02:04.040
Wir gehen also auch hier in den Ordner models und importieren

02:04.040 --> 02:08.257
das Projekt. ts und Drag-Drop. ts.

02:10.820 --> 02:14.720
In ProjectList brauchen wir keine Validierung, aber ich

02:14.720 --> 02:17.520
brauche ProjectState und Autobind.

02:17.520 --> 02:21.100
Und zusätzlich brauche ich aus dem Models-Ordner

02:21.100 --> 02:25.710
das Projekt. ts-Datei und dem Drag-Drop. ts-Datei.

02:25.710 --> 02:27.840
Damit wird einfach gespeichert und kompiliert,

02:27.840 --> 02:30.170
und jetzt funktioniert alles wieder, wie Sie sehen,

02:30.170 --> 02:32.820
jetzt haben wir keine Laufzeitfehler, weil wir jetzt alle

02:32.820 --> 02:35.520
diese Importe wieder in den Dateien haben.

02:35.520 --> 02:37.380
Das ist also der richtige Weg, jede

02:37.380 --> 02:40.060
Datei gibt an, was sie braucht, und wir können unseren

02:40.060 --> 02:41.500
Code aufteilen und haben am

02:41.500 --> 02:43.310
Ende immer noch eine Datei, sozusagen

02:43.310 --> 02:45.940
das Beste aus beiden Welten.

02:45.940 --> 02:48.000
Dies ist jedoch nicht unbedingt der

02:48.000 --> 02:49.963
bestmögliche Weg, dies zu tun.
