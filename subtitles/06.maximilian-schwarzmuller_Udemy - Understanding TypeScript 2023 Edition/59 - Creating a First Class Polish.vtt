WEBVTT

00:02.270 --> 00:03.103
Instruktor: Na to mam

00:03.103 --> 00:04.620
dla was mały projekt startowy.

00:04.620 --> 00:05.610
Znajdziesz go w załączniku.

00:05.610 --> 00:07.070
To ten sam projekt wyjściowy,

00:07.070 --> 00:08.810
który wykorzystywaliśmy w kółko.

00:08.810 --> 00:12.080
Uruchamiasz serwer programistyczny za pomocą npm-start,

00:12.080 --> 00:15.510
a następnie uruchomiłem kompilację TypeScript w trybie

00:15.510 --> 00:19.830
zegarka za pomocą tsc-w w osobnym terminalu.

00:19.830 --> 00:22.890
Więc tutaj w moim wbudowanym terminalu mam dwie zakładki.

00:22.890 --> 00:24.390
Jedna z serwerem deweloperskim,

00:24.390 --> 00:26.070
który powinieneś utrzymywać w

00:26.070 --> 00:27.670
ruchu, aby obserwował zmiany

00:27.670 --> 00:30.720
i przeładowywał stronę i utrzymywał serwer w ruchu, a także

00:30.720 --> 00:32.820
inną zakładkę, w której mam ten działający

00:32.820 --> 00:35.530
watcher kompilacji TypeScript.

00:35.530 --> 00:36.930
Teraz z tym możemy pracować

00:36.930 --> 00:39.400
w aplikacji. ts, który jest teraz pusty

00:39.400 --> 00:41.520
i zacznij pisać tam jakiś kod, a ja chcę zacząć

00:41.520 --> 00:42.990
od razu od zdefiniowania klasy,

00:42.990 --> 00:45.603
której będziemy mogli używać.

00:46.490 --> 00:49.420
Robimy to poprzez użycie słowa kluczowego class,

00:49.420 --> 00:51.340
tak po prostu, a następnie nazwy klasy

00:51.340 --> 00:54.030
i tam powiedzmy, że budujemy aplikację, aplikację

00:54.030 --> 00:56.880
internetową, interfejs użytkownika dla jakiegoś

00:56.880 --> 01:00.700
narzędzia internetowego, które pozwala nam zarządzać różnymi działami,

01:00.700 --> 01:04.100
które możemy mieć w naszej firmie.

01:04.100 --> 01:05.770
Może budujemy jakieś wewnętrzne

01:05.770 --> 01:08.440
narzędzie firmy cokolwiek to jest i musimy

01:08.440 --> 01:11.290
mieć tam wiele działów.

01:11.290 --> 01:13.790
Teraz możemy użyć obiektów do zarządzania

01:13.790 --> 01:16.320
danymi dla różnych działów i możemy

01:16.320 --> 01:19.960
również dodać metody do każdego obiektu, tak abyśmy

01:19.960 --> 01:21.980
mogli renderować informacje

01:21.980 --> 01:24.020
o dziale na ekranie i aby uprościć

01:24.020 --> 01:26.980
tworzenie tych różnych obiektów działów,

01:26.980 --> 01:30.430
które będą wyglądały tak samo, jest stworzenie

01:30.430 --> 01:33.000
klasy działu.

01:33.000 --> 01:35.690
Moglibyśmy więc nazwać tę klasę Department.

01:35.690 --> 01:36.830
Nazwa jest całkowicie zależna od Ciebie.

01:36.830 --> 01:40.030
Konwencja jest taka, że zaczyna się od wielkiej litery,

01:40.030 --> 01:42.720
aby było jasne, że jest to klasa.

01:42.720 --> 01:45.670
Teraz, jeśli jesteś w pobliżu rozwoju JavaScript

01:45.670 --> 01:48.270
przez dłuższy czas, możesz znać ideę funkcji

01:48.270 --> 01:50.090
konstruktora przy okazji i klasy

01:50.090 --> 01:52.140
w końcu są syntaktycznym cukrem dla

01:52.140 --> 01:53.920
tego, można powiedzieć, ale zobaczymy

01:53.920 --> 01:56.980
to, gdy skompilujemy nasz kod.

01:56.980 --> 01:59.220
Więc tutaj mamy naszą klasę Department

01:59.220 --> 02:02.080
i teraz w niej możemy mieć właściwość name.

02:02.080 --> 02:04.010
Możesz dodać go tak po prostu, bez

02:04.010 --> 02:07.290
żadnego let czy const przed nim tak po prostu, bezpośrednio

02:07.290 --> 02:09.840
w klasie, a następnie oczywiście możesz

02:09.840 --> 02:12.550
również przypisać typ do tego.

02:12.550 --> 02:14.690
Robisz to dodając tutaj dwukropek,

02:14.690 --> 02:17.920
a następnie typ na przykład string i to jest ważne.

02:17.920 --> 02:21.150
To może wyglądać jak obiekt, ale nim nie jest.

02:21.150 --> 02:23.240
W obiekcie używasz par klucz-wartość z

02:23.240 --> 02:25.520
dwukropkiem, aby mieć nazwę klucza, a następnie

02:25.520 --> 02:27.000
wartość dla klucza.

02:27.000 --> 02:28.810
W tym przypadku tak nie jest.

02:28.810 --> 02:32.250
Jest to tak zwane pole klasy.

02:32.250 --> 02:34.680
Tworzysz klasę z nawiasami klamrowymi,

02:34.680 --> 02:37.110
ale tutaj nie jest to para klucz-wartość,

02:37.110 --> 02:39.120
to po prostu definiuje nazwę klucza,

02:39.120 --> 02:41.040
który będziesz miał w obiekcie,

02:41.040 --> 02:43.530
który utworzysz na podstawie klasy i definiujesz

02:43.530 --> 02:48.530
typ wartości, który klucz będzie przechowywał na końcu.

02:48.550 --> 02:52.363
Możesz również ustawić tutaj wartość początkową za pomocą = 'DEFAULT',

02:53.840 --> 02:55.920
ale nie musisz tego robić.

02:55.920 --> 02:59.050
Zamiast tego inną rzeczą, którą powszechnie

02:59.050 --> 03:03.410
masz w klasach, jest specjalna funkcja tam, tak zwana metoda.

03:03.410 --> 03:06.780
Funkcje w obiektach nazywane są po prostu metodami,

03:06.780 --> 03:09.410
czyli metodą konstruktora.

03:09.410 --> 03:12.500
Możemy go dodać w ten sposób i jest to słowo zastrzeżone.

03:12.500 --> 03:16.170
Konstruktor jest zarezerwowanym słowem kluczowym rozumianym

03:16.170 --> 03:18.390
przez TypeScript i przez nowoczesny

03:18.390 --> 03:22.480
JavaScript, a to jest zasadniczo funkcja związana z tą klasą i związana

03:22.480 --> 03:25.840
z każdym obiektem, który tworzysz w oparciu o klasę, która

03:25.840 --> 03:29.640
jest wykonywana podczas tworzenia obiektu.

03:29.640 --> 03:33.500
Więc to pozwala ci w zasadzie zrobić trochę pracy inicjalizacyjnej

03:33.500 --> 03:35.700
dla obiektu, który budujesz.

03:35.700 --> 03:38.280
Teraz w nim można było przyjąć argument.

03:38.280 --> 03:41.910
Nazwijmy go n może, który może być również typu string, a następnie

03:41.910 --> 03:45.620
chcesz przechowywać to w swoim polu nazwy tutaj lub możesz

03:45.620 --> 03:47.000
to zrobić, sięgając do

03:47.000 --> 03:49.050
nazwy ze słowem kluczowym this i

03:49.050 --> 03:51.200
przechowując n w nim.

03:51.200 --> 03:55.200
Co to robi, to ustawia wartość pola name, zwanego

03:55.200 --> 03:58.630
również właściwością so of the name, na wartość,

03:58.630 --> 04:01.180
którą otrzymujesz na n, gdy tworzony

04:01.180 --> 04:04.550
jest obiekt department.

04:04.550 --> 04:07.030
Jak teraz moglibyśmy stworzyć taki obiekt działu?

04:07.030 --> 04:08.890
Nie ma nic prostszego niż to.

04:08.890 --> 04:13.110
Poza klasą, którą stworzyłeś za pomocą słowa kluczowego new, które

04:13.110 --> 04:16.200
jest również wbudowane w TypeScript i JavaScript,

04:16.200 --> 04:18.410
a następnie powtarzasz nazwę klasy,

04:18.410 --> 04:20.160
następnie dodajesz nawiasy

04:20.160 --> 04:22.440
i to stworzyłoby nowy obiekt działu,

04:22.440 --> 04:26.240
ale konstruktor jest wywoływany w tym momencie, gdy wykonujesz

04:26.240 --> 04:29.620
tę klasę w ten sposób za pomocą słowa kluczowego new i konstruktor

04:29.620 --> 04:33.440
tutaj przyjmuje argument, ciąg znaków.

04:33.440 --> 04:35.600
Teraz przekazujesz argumenty konstruktora

04:35.600 --> 04:39.800
do tego wywołania działu tutaj, więc między tymi nawiasami.

04:39.800 --> 04:41.640
Więc tutaj moglibyśmy nazwać to Accounting,

04:41.640 --> 04:44.730
bo może budujemy tutaj dział księgowości.

04:44.730 --> 04:46.100
Teraz spowoduje to utworzenie

04:46.100 --> 04:49.800
nowego obiektu JavaScript na podstawie tego blueprintu.

04:49.800 --> 04:53.910
Więc teraz możemy przechowywać to w stałej na przykład, a następnie

04:53.910 --> 04:58.010
konsoli. log. księgowanie tutaj, aby zobaczyć, co dostajemy.

04:58.010 --> 04:59.620
Jeśli teraz to zapiszemy, a

04:59.620 --> 05:02.020
następnie wrócimy do naszej strony tutaj

05:02.020 --> 05:03.780
i zajrzymy do konsoli deweloperskiej

05:03.780 --> 05:05.660
tutaj w def tools, powinniśmy nasz

05:05.660 --> 05:07.930
obiekt Department tutaj.

05:07.930 --> 05:10.000
Jest to zwykły obiekt JavaScript, tylko

05:10.000 --> 05:13.770
ma ten typ Departamentu dołączony do niego, można powiedzieć, i w

05:13.770 --> 05:15.290
końcu jest to obiekt z jedną

05:15.290 --> 05:18.140
parą klucz-wartość, gdzie kluczem jest nazwa, ponieważ

05:18.140 --> 05:20.270
to jest to, co zdefiniowaliśmy tam na

05:20.270 --> 05:23.110
górze, a wartość to Księgowość.

05:23.110 --> 05:25.530
Mamy tutaj tę wartość Accounting, ponieważ

05:25.530 --> 05:27.460
przekazujemy to jako argument

05:27.460 --> 05:29.560
do konstruktora.

05:29.560 --> 05:31.770
Tam przyjmujemy taki ciąg znaków,

05:31.770 --> 05:34.830
przywracając wartość w tym polu, a pola są

05:34.830 --> 05:38.400
w końcu tylko przetłumaczone na właściwości, obiekt

05:38.400 --> 05:41.890
oparty na klasie będzie miał tam po.

05:41.890 --> 05:44.480
Tak więc w ten sposób możemy stworzyć prostą

05:44.480 --> 05:46.570
klasę i jaka jest jej ogólna idea.

05:46.570 --> 05:50.143
Teraz zobaczmy, co faktycznie otrzymamy w JavaScript.
