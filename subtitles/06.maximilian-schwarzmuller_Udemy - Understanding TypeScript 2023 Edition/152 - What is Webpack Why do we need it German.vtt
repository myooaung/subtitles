WEBVTT

00:02.050 --> 00:04.090
Ausbilder: Welchen Nachteil haben wir also?

00:04.090 --> 00:06.030
Dies ist das Projekt, an dem wir

00:06.030 --> 00:08.020
gearbeitet haben, aufgeteilt in

00:08.020 --> 00:12.390
mehrere Dateien unter Verwendung dieser ES6-Modulimporte hier.

00:12.390 --> 00:15.620
Jetzt können wir dieses Projekt tatsächlich

00:15.620 --> 00:18.400
bauen und dafür, wie zuvor, npm-start

00:18.400 --> 00:21.930
ausführen, um den Lite-Server zu starten.

00:21.930 --> 00:24.710
Und natürlich, sehr wichtig in einer neuen Registerkarte,

00:24.710 --> 00:26.367
die alle laufen tsc-dash zu starten

00:27.820 --> 00:31.430
TypeScript Kompilierung im Watch-Modus.

00:31.430 --> 00:35.590
Damit haben wir unser Projekt, und wenn wir nun die Registerkarte "Netzwerk"

00:35.590 --> 00:39.570
in den Entwicklertools des Browsers öffnen und diese Datei neu laden, sehen

00:39.570 --> 00:42.360
wir den Nachteil, den wir hier haben, oder das Problem,

00:42.360 --> 00:44.840
das wir mit dieser Einrichtung haben.

00:44.840 --> 00:47.490
Wir sehen eine Reihe von HTTP-Anfragen.

00:47.490 --> 00:49.160
Die letzten können Sie ignorieren,

00:49.160 --> 00:51.380
sie kommen von unserem Entwicklungsserver.

00:51.380 --> 00:58.290
Aber all das sind unsere Anfragen hier an app. js, Projekt-Eingabe.

00:58.290 --> 00:58.290
js, Projekt-Liste. js, Basis-Komponente. js

00:58.290 --> 01:00.960
und weiter, das ist das Problem.

01:00.960 --> 01:04.610
Sie werden feststellen, dass all diese Dateien nicht sehr groß,

01:04.610 --> 01:06.320
sondern relativ klein sind.

01:06.320 --> 01:07.590
Das ist natürlich in Ordnung,

01:07.590 --> 01:11.010
aber wir haben hier eine Menge HTTP-Anfragen.

01:11.010 --> 01:12.600
Wo liegt nun das Problem?

01:12.600 --> 01:15.070
Das Problem dabei wird deutlich, wenn wir

01:15.070 --> 01:17.810
uns den Wasserfall hier rechts ansehen.

01:17.810 --> 01:20.330
Jede HTTP-Anfrage, die gestellt werden muss,

01:20.330 --> 01:22.470
braucht natürlich ein wenig Zeit.

01:22.470 --> 01:24.480
Das Herunterladen der Dateien dauert eine

01:24.480 --> 01:27.760
Weile, aber da sie nicht so groß sind, ist das kein Problem.

01:27.760 --> 01:31.390
Aber jede HTTP-Anfrage hat einen Basis-Overhead,

01:31.390 --> 01:34.540
eine Basisdauer, die sie immer benötigt.

01:34.540 --> 01:38.570
Dieses kleine Kästchen, das Sie vor den Diagrammen sehen, ist hier zu sehen.

01:38.570 --> 01:41.250
Das ist ungefähr die Zeit, die der Browser benötigt,

01:41.250 --> 01:43.910
um die Anfrage zu erstellen und zu senden.

01:43.910 --> 01:46.280
Das Herunterladen der Datei mag zwar relativ

01:46.280 --> 01:49.600
schnell gehen, aber das Einrichten der Anfrage, die Arbeit

01:49.600 --> 01:52.860
auf dem Server, der die Datei bereitstellt, und all das

01:52.860 --> 01:55.310
nimmt einige Zeit in Anspruch.

01:55.310 --> 01:57.890
Und jetzt haben wir eine sehr schnelle Einrichtung,

01:57.890 --> 02:00.310
weil alles auf unserem Rechner passiert.

02:00.310 --> 02:03.020
Wir haben schließlich einen lokalen Entwicklungsserver.

02:03.020 --> 02:06.160
Wenn Sie das im Web bereitstellen, können so viele

02:06.160 --> 02:08.690
Anfragen wirklich eine Menge Latenz verursachen

02:08.690 --> 02:11.140
und Ihr Projekt verlangsamen, allein aufgrund

02:11.140 --> 02:14.760
der schieren Menge an HTTP-Anfragen.

02:14.760 --> 02:17.280
Wenn wir also eine Lösung finden können, um

02:17.280 --> 02:21.370
die Anzahl der HTTP-Anfragen zu reduzieren, wäre das großartig.

02:21.370 --> 02:24.020
Und genau hier kommt Webpack ins Spiel.

02:24.020 --> 02:28.190
Sie können zu webpack gehen. js. org, um mehr darüber zu erfahren.

02:28.190 --> 02:30.290
Letztendlich ist webpack ein Werkzeug,

02:30.290 --> 02:33.750
das uns hilft, unsere Dateien zu bündeln.

02:33.750 --> 02:36.530
Und ich kann ihre umfangreiche und umfassende Dokumentation,

02:36.530 --> 02:39.980
die Sie auf ihrer Seite finden, wirklich empfehlen.

02:39.980 --> 02:42.300
Wenn Sie alles über Webpack lernen wollen.

02:42.300 --> 02:44.820
In diesem Kurs werden wir einige ausgewählte Funktionen verwenden,

02:44.820 --> 02:46.563
die uns bei TypeScript helfen.

02:47.560 --> 02:49.850
Was genau ist also Webpack?

02:49.850 --> 02:53.850
Es ist ein Bündelungs-, man könnte auch sagen, ein Build-Orchestrierungswerkzeug.

02:53.850 --> 02:56.190
Es ist ein Werkzeug, das uns hilft, die Anzahl

02:56.190 --> 02:59.560
der HTTP-Anfragen zu reduzieren, indem es den Code bündelt.

02:59.560 --> 03:03.010
Wir schreiben also Code, der auf mehrere Dateien aufgeteilt ist,

03:03.010 --> 03:05.390
aber Webpack nimmt dann alle diese Dateien

03:05.390 --> 03:07.050
und bündelt sie zusammen.

03:07.050 --> 03:10.050
Darüber hinaus kann Webpack noch mehr leisten.

03:10.050 --> 03:13.920
Dadurch wird auch unser Code optimiert und wir können weitere

03:13.920 --> 03:17.760
Build-Schritte und Build-Tools hinzufügen, die uns zum

03:17.760 --> 03:20.410
Beispiel bei CSS-Dateien helfen.

03:20.410 --> 03:23.180
Das werden wir uns in diesem Modul aber nicht ansehen, denn

03:23.180 --> 03:26.220
ich möchte mich auf Webpack und TypeScript konzentrieren.

03:26.220 --> 03:28.710
Werfen wir also zunächst einen Blick auf unser normales

03:28.710 --> 03:30.700
Setup, bei dem wir Webpack nicht verwenden.

03:30.700 --> 03:32.800
Dort haben wir mehrere TypeScript-Dateien,

03:32.800 --> 03:34.870
aber wenn wir dann diese Importe verwenden,

03:34.870 --> 03:36.920
erhalten wir mehrere HTTP-Anfragen,

03:36.920 --> 03:40.220
was aus den genannten Gründen nicht so gut ist.

03:40.220 --> 03:43.450
Ein weiteres Thema, mit dem ich mich bisher noch nicht befasst

03:43.450 --> 03:47.670
habe, ist, dass wir sehr wahrscheinlich nicht optimierten Code haben,

03:47.670 --> 03:51.290
was bedeutet, dass er nicht so klein wie möglich ist.

03:51.290 --> 03:53.330
Wir können den Code sicherlich weiter optimieren,

03:53.330 --> 03:55.750
indem wir Funktionsnamen usw. kürzen.

03:55.750 --> 03:58.690
Und natürlich wollen wir ein Werkzeug, das dies automatisch

03:58.690 --> 04:01.030
erledigt, damit wir nicht manuell mit unlesbarem

04:01.030 --> 04:03.000
Code arbeiten müssen.

04:03.000 --> 04:06.080
Wir wollen als Entwickler perfekt lesbaren Code schreiben.

04:06.080 --> 04:07.850
Aber es wäre toll, wenn wir ein Werkzeug

04:07.850 --> 04:10.740
hätten, das diesen Code kürzt und ihn wirklich so klein

04:10.740 --> 04:14.960
wie möglich macht, so kurze Variablen- und Funktionsnamen wie möglich verwendet,

04:14.960 --> 04:19.130
damit wir so wenig Code wie möglich ausliefern.

04:19.130 --> 04:22.940
Denn weniger Code bedeutet, dass die Nutzer ihn schneller herunterladen können,

04:22.940 --> 04:25.530
was wiederum bedeutet, dass unsere Anwendung auf unseren

04:25.530 --> 04:27.600
Rechnern schneller startet.

04:27.600 --> 04:29.440
Außerdem haben wir in unserem aktuellen

04:29.440 --> 04:32.860
Setup einen zusätzlichen Entwicklungsserver, lite-server,

04:32.860 --> 04:35.150
der ein zusätzliches Paket ist, das wir aufsetzen

04:35.150 --> 04:36.860
müssen.

04:36.860 --> 04:39.320
Wäre es nicht ein kleiner Bonus, ein netter Bonus,

04:39.320 --> 04:42.280
wenn wir einen Befehl hätten, der alles macht, unser

04:42.280 --> 04:45.360
Projekt baut, aber auch so einen Server hochfährt, der

04:45.360 --> 04:48.170
automatisch unsere Website neu lädt, wenn wir eine

04:48.170 --> 04:50.713
Datei in unserem Projekt ändern.

04:51.550 --> 04:54.270
Nun, und genau dabei kann uns Webpack helfen.

04:54.270 --> 04:57.240
Es bündelt unseren Code, so dass wir weniger Importe haben

04:57.240 --> 05:00.670
und stattdessen einige, nun ja, Codebündel, die wir ausliefern,

05:00.670 --> 05:05.100
es hilft uns, unseren Code zu optimieren, ihn zu minifizieren, wie es heißt, so dass

05:05.100 --> 05:06.717
wir weniger Code ausliefern und

05:06.717 --> 05:10.130
unsere Nutzer weniger Code herunterladen müssen.

05:10.130 --> 05:12.530
Und wir können auch leicht mehr Build-Schritte hinzufügen,

05:12.530 --> 05:15.750
wenn Sie wollen, können wir eine solche Entwicklung Server hinzufügen,

05:15.750 --> 05:19.270
aber wir können auch viele andere Dinge tun, wenn wir wirklich wollen und die

05:19.270 --> 05:22.160
offiziellen Webpack-Dokumente sind der Ort zu gehen, wenn Sie

05:22.160 --> 05:24.130
alles über sie lernen wollen.

05:24.130 --> 05:27.880
Sehen wir uns also ein Beispiel-Setup in unserem Projekt an und lernen

05:27.880 --> 05:30.433
wir, wie wir Webpack dort verwenden können.
