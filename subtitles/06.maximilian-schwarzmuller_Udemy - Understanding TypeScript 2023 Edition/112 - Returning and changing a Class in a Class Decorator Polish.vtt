WEBVTT

00:02.090 --> 00:02.923
Narrator: Aby robić

00:02.923 --> 00:04.750
bardziej zaawansowane rzeczy z dekoratorami,

00:04.750 --> 00:07.340
będziesz musiał zauważyć, że niektóre dekoratory

00:07.340 --> 00:09.200
na przykład dekoratory klas, ale także

00:09.200 --> 00:11.700
dekoratory metod, na przykład, faktycznie są również

00:11.700 --> 00:14.650
w stanie zwrócić coś.

00:14.650 --> 00:16.570
Teraz nie zwracam nic u żadnego

00:16.570 --> 00:17.510
dekoratora.

00:17.510 --> 00:18.430
Nie mówię o funkcji

00:18.430 --> 00:20.010
dekoratora, która zostaje

00:20.010 --> 00:22.460
zwrócona w fabryce dekoratorów.

00:22.460 --> 00:23.701
Naprawdę mam na myśli

00:23.701 --> 00:26.040
wartość zwracaną wewnątrz funkcji dekoratora,

00:26.040 --> 00:28.890
a my nie mamy nigdzie takiej wartości.

00:28.890 --> 00:31.559
Teraz w funkcji WithTemplate, w tej funkcji dekoratora

00:31.559 --> 00:34.670
WithTemplate, powinienem powiedzieć, moglibyśmy dodać

00:34.670 --> 00:36.930
taką wartość zwrotną.

00:36.930 --> 00:38.520
A to, co możesz zwrócić i co TypeScript

00:38.520 --> 00:40.430
jest w stanie wykorzystać, zależy

00:40.430 --> 00:43.660
od tego, z jakim rodzajem dekoratora pracujesz.

00:43.660 --> 00:44.990
Tutaj pracujemy z dekoratorem,

00:44.990 --> 00:47.270
który zostaje dodany do klasy, a w takiej

00:47.270 --> 00:48.750
funkcji dekoratora można

00:48.750 --> 00:51.677
zwrócić nową funkcję konstruktora, która zastąpi

00:51.677 --> 00:53.800
starą.

00:53.800 --> 00:55.590
Więc, który zastąpi klasę, do której

00:55.590 --> 00:58.330
dodałeś do dekoratora, mógłbyś powiedzieć.

00:58.330 --> 01:01.073
Więc tutaj możemy zwrócić nową funkcję, nową

01:01.073 --> 01:02.490
funkcję konstruktora,

01:02.490 --> 01:06.370
albo po prostu zwrócić nową klasę, w końcu, bo klasa, słowo

01:06.370 --> 01:08.280
kluczowe class, pozwala nam

01:08.280 --> 01:11.150
użyć tego cukru syntaktycznego do stworzenia

01:11.150 --> 01:13.360
takiej funkcji konstruktora, a klasa,

01:13.360 --> 01:15.951
którą tutaj tworzę, nie musi mieć nazwy,

01:15.951 --> 01:17.463
ale możemy i powinniśmy

01:17.463 --> 01:22.250
rozszerzyć konstruktor, który tutaj dostajemy.

01:22.250 --> 01:23.730
Więc to, co teraz robię, to

01:23.730 --> 01:25.848
w mojej funkcji dekoratora tutaj,

01:25.848 --> 01:28.060
zwracam nową klasę, i ponownie pamiętaj,

01:28.060 --> 01:29.270
że to tylko cukier syntaktyczny

01:29.270 --> 01:30.910
dla funkcji konstruktora,

01:30.910 --> 01:32.770
więc zwracam funkcję konstruktora,

01:32.770 --> 01:35.400
w końcu, która jest oparta na oryginalnej funkcji

01:35.400 --> 01:38.830
konstruktora, tak, że zachowuję wszystkie właściwości

01:38.830 --> 01:50.520
mojej oryginalnej klasy, mojej oryginalnej funkcji konstruktora, nie musimy tego robić, ale nie chcę stracić moich właściwości tutaj, więc zrobię to.

01:50.520 --> 01:53.670
A następnie w tym miejscu możemy dodać nową funkcjonalność.

01:53.670 --> 01:56.716
Na przykład, i będę musiał zmienić kilka nazw tutaj,

01:56.716 --> 02:00.340
mogę dodać nową funkcję konstruktora tam, i aby uniknąć zamieszania,

02:00.340 --> 02:01.500
zmienię nazwę konstruktora,

02:01.500 --> 02:04.040
który dostaję tutaj.

02:04.040 --> 02:06.640
Więc klasa, w której dodałem ten dekorator,

02:06.640 --> 02:09.620
nazwę to tutaj, originalConstructor i skopiuję

02:12.889 --> 02:15.690
to wszystko tutaj.

02:15.690 --> 02:18.950
I teraz, zamiast tej funkcji konstruktora tutaj,

02:18.950 --> 02:20.853
muszę wywołać super, aby wywołać

02:20.853 --> 02:24.530
tę oryginalną funkcję konstruktora z wnętrza, ponieważ

02:24.530 --> 02:25.430
jeśli dodasz funkcję

02:25.430 --> 02:27.410
konstruktora w klasie, która rozszerza

02:27.410 --> 02:29.920
inną klasę, co jest w końcu tym, co robimy

02:29.920 --> 02:33.630
tutaj, to musisz wywołać super.

02:33.630 --> 02:36.108
A teraz w tym miejscu możesz napisać dowolną logikę.

02:36.108 --> 02:40.040
I, na przykład, tutaj, możemy przenieść tę logikę renderowania

02:40.040 --> 02:42.782
szablonu tutaj, z naszej funkcji dekoratora

02:42.782 --> 02:49.020
do tej nowej funkcji konstruktora, którą zwracamy tutaj.

02:49.020 --> 02:50.960
Więc znowu, naprawdę pamiętaj, że tworzymy

02:50.960 --> 02:52.550
tutaj klasę, która w końcu po prostu

02:52.550 --> 02:54.540
tworzy funkcję konstruktora z tą logiką

02:54.540 --> 02:55.833
w niej.

02:56.670 --> 02:58.850
Więc teraz to, co próbuję zrobić,

02:58.850 --> 03:01.367
to próbuję zastąpić klasę.

03:01.367 --> 03:04.298
Funkcja konstruktora, do której dodaliśmy nasz

03:04.298 --> 03:07.550
dekorator z nową klasą, z nową funkcją konstruktora,

03:07.550 --> 03:10.290
w której nadal wykonuję starą logikę, ale w której

03:10.290 --> 03:12.920
dodaję również własną nową logikę, a zatem

03:12.920 --> 03:14.670
teraz szablon powinien być faktycznie

03:14.670 --> 03:17.450
renderowany do DOM tylko wtedy, gdy rzeczywiście

03:17.450 --> 03:21.340
instaluję tutaj mój obiekt.

03:21.340 --> 03:22.890
A nie cały czas, kiedy ta funkcja

03:22.890 --> 03:25.180
dekoratora jest wykonywana, co jak

03:25.180 --> 03:26.340
się dowiedziałeś,

03:26.340 --> 03:29.620
dzieje się zaraz po zdefiniowaniu klasy.

03:29.620 --> 03:31.010
Teraz mała poprawka tutaj, nie wywołuję

03:31.010 --> 03:34.290
już mojego oryginalnego konstruktora tutaj, zamiast tego możemy po prostu

03:34.290 --> 03:37.380
uzyskać dostęp do tego. name, aby uzyskać

03:37.380 --> 03:40.180
wartość właściwości name tworzonej

03:40.180 --> 03:42.750
przez nas instancji.

03:42.750 --> 03:45.120
Teraz dostajemy tam na dole małą skargę

03:45.120 --> 03:47.750
dotyczącą niepoprawności typów.

03:47.750 --> 03:51.330
Aby to naprawić, możemy zamienić naszą funkcję dekoratora

03:51.330 --> 03:53.990
w funkcję generyczną, gdzie otrzymujemy

03:53.990 --> 03:57.113
typ i ustawiamy go jako typ oryginalnego konstruktora,

03:58.090 --> 03:59.820
a teraz wyjaśnić, że będzie

03:59.820 --> 04:01.668
to w zasadzie funkcja konstruktora,

04:01.668 --> 04:05.780
i możemy to wyjaśnić, przypisując specjalny typ, typ obiektu,

04:05.780 --> 04:13.290
gdzie ustawiamy nową właściwość, jest to oczywiście nazwa rezerwowa, ale mówi TypeScriptowi, że w końcu będzie

04:13.290 --> 04:17.760
to obiekt, który może być nowy.

04:17.760 --> 04:19.690
Będzie to więc funkcja konstruktora, funkcja,

04:19.690 --> 04:22.170
którą możemy wywołać za pomocą słowa kluczowego new,

04:22.170 --> 04:24.380
aby wygenerować nowy obiekt.

04:24.380 --> 04:27.410
I ta nowa funkcja, ta nowa metoda, którą będzie miał

04:27.410 --> 04:30.660
obiekt T, otrzyma dowolną ilość argumentów, więc używam

04:30.660 --> 04:33.520
tutaj parametrów spoczynkowych, aby przyjąć dowolną

04:33.520 --> 04:35.380
ilość argumentów, tak aby były

04:35.380 --> 04:37.290
one naprawdę elastyczne, jeśli

04:37.290 --> 04:39.840
chodzi o argumenty, które można przekazać

04:39.840 --> 04:42.200
do konstruktora klasy, którą próbujemy

04:42.200 --> 04:44.000
zmienić.

04:45.420 --> 04:46.430
Dodaj nowa funkcja

04:46.430 --> 04:49.063
będzie następnie w końcu zwrócić obiekt tutaj.

04:50.140 --> 04:53.500
Teraz powinienem również skopiować definicję parametru rest do mojego

04:53.500 --> 04:55.680
konstruktora, aby ten konstruktor był w stanie

04:55.680 --> 04:57.640
zaakceptować wszystkie argumenty, które

04:57.640 --> 05:00.260
możemy otrzymać, abyśmy mogli, w zasadzie, zainicjować

05:00.260 --> 05:02.380
Personę z dowolnymi argumentami, które chcesz

05:02.380 --> 05:04.380
przekazać tutaj.

05:04.380 --> 05:06.610
Z dowolnymi argumentami, których możemy również

05:06.610 --> 05:09.279
potrzebować tutaj, w oryginalnej funkcji konstruktora.

05:09.279 --> 05:11.600
I z tym jedynym problemem, jaki napotkamy,

05:11.600 --> 05:14.021
jest to, że nie wiemy, czy taka właściwość name

05:14.021 --> 05:16.250
istnieje, a poprawnie nie wiemy, do której

05:16.250 --> 05:19.639
klasy dodamy ten dekorator WithTemplate, więc nie wiemy, czy

05:19.639 --> 05:22.530
będzie istniała właściwość name na klasie, do której

05:22.530 --> 05:23.951
go dodamy.

05:23.951 --> 05:25.560
Ale, możemy to naprawić po prostu

05:25.560 --> 05:27.140
mówiąc TypeScriptowi, że obiekt

05:27.140 --> 05:30.200
T jest oparty na, więc nasza oryginalna funkcja konstruktora,

05:30.200 --> 05:32.773
nie będzie po prostu produkować dowolnego obiektu,

05:32.773 --> 05:37.460
ale faktycznie będzie produkować obiekt z właściwością name, która będzie typu

05:37.460 --> 05:41.140
string i to jest poprawne.

05:41.140 --> 05:44.922
Nasz dekorator WithTemplate dodajemy do klasy, która będzie miała

05:44.922 --> 05:46.250
właściwość name.

05:46.250 --> 05:47.300
Gdybym to wykomentował,

05:47.300 --> 05:48.133
dostalibyśmy

05:48.133 --> 05:50.740
błąd, bo teraz próbowalibyśmy dodać ten dekorator

05:50.740 --> 05:53.460
do klasy, która nie spełnia tego kryterium, ale

05:53.460 --> 05:55.543
tutaj to spełnia.

05:55.543 --> 05:58.790
Teraz dostaję błąd, kiedy próbuję to skompilować, ponieważ

05:58.790 --> 06:00.630
nie używam tutaj args, możemy zmienić

06:00.630 --> 06:02.660
to na _, aby powiedzieć typescriptowi,

06:02.660 --> 06:06.230
że wiemy, że nie używamy go i że chcemy to zignorować.

06:06.230 --> 06:08.050
Jest to poprawna nazwa parametru,

06:08.050 --> 06:10.678
jest to po prostu specjalna nazwa, którą typescript

06:10.678 --> 06:13.220
bierze jako I get it, I need to accept it, but I

06:13.220 --> 06:15.260
won't use it parameter.

06:15.260 --> 06:18.273
I z tym, to wszystko kompiluje i jeśli przeładujemy,

06:19.440 --> 06:22.420
widzisz, nadal widzimy Maxa na stronie tutaj.

06:22.420 --> 06:23.910
Interesującą rzeczą jest to,

06:23.910 --> 06:25.480
że jeśli teraz usuniemy ten kod,

06:25.480 --> 06:27.060
w którym instancjonujemy Person,

06:27.060 --> 06:28.440
jeśli skomentuję to tak,

06:28.440 --> 06:30.740
że po prostu znajdę klasę Person, ale nigdy

06:30.740 --> 06:33.550
nie instancjonuję jej nigdzie, widzisz, jak to się

06:33.550 --> 06:36.890
przeładowuje, nie widzimy Maxa na ekranie.

06:36.890 --> 06:39.467
Wszystkie dekoratory nadal się wykonują,

06:39.467 --> 06:42.410
ale nie renderujemy już niczego na ekranie.

06:42.410 --> 06:43.243
Powodem tego

06:43.243 --> 06:46.340
jest fakt, że teraz jeszcze bardziej rozbudowaliśmy

06:46.340 --> 06:49.520
nasz dekorator, wykorzystując jego funkcję, w której

06:49.520 --> 06:52.360
możemy zwrócić nową wartość lub w tym przypadku

06:52.360 --> 06:55.350
nową funkcję konstruktora.

06:55.350 --> 06:57.205
W przypadku dekoratora klasy.

06:57.205 --> 07:00.780
Jest to nowa funkcja konstruktora lub nowa klasa, która, jak

07:00.780 --> 07:03.040
wyjaśniłem, jest tylko cukrem syntaktycznym

07:03.040 --> 07:04.300
dla funkcji konstruktora,

07:04.300 --> 07:06.750
a ta funkcja konstruktora, dlatego zastępuje

07:06.750 --> 07:09.070
naszą oryginalną klasę, naszą oryginalną

07:09.070 --> 07:12.160
funkcję konstruktora.

07:12.160 --> 07:15.220
Teraz, ponieważ nazwałem super tutaj, zapisujemy

07:15.220 --> 07:17.610
oryginalną funkcję.

07:17.610 --> 07:19.690
Zapisujemy oryginalną klasę, wszystko,

07:19.690 --> 07:22.540
co inicjalizujemy tutaj w zasadzie nadal się dzieje, ponieważ

07:22.540 --> 07:25.530
robię to również w moim zastępczym konstruktorze, a ja rozszerzam

07:25.530 --> 07:27.480
oryginalną klasę.

07:27.480 --> 07:30.420
Zapisujemy więc wszystko, co było w oryginalnej klasie.

07:30.420 --> 07:31.550
Nie musisz tego robić,

07:31.550 --> 07:32.670
ale robię to tutaj, ponieważ

07:32.670 --> 07:35.560
nie chcę stracić tych oryginalnych danych.

07:35.560 --> 07:36.850
Ale za kulisami, zastępuję

07:36.850 --> 07:39.770
klasę moją nową klasą niestandardową tutaj, a to pozwala

07:39.770 --> 07:42.370
nam dodać dodatkową logikę, która powinna działać,

07:42.370 --> 07:45.600
gdy klasa jest instancjonowana.

07:45.600 --> 07:49.090
I teraz nagle jesteśmy w stanie dodać logikę, która nie

07:49.090 --> 07:52.410
jest uruchamiana, gdy klasa jest zdefiniowana, ale

07:52.410 --> 07:54.660
gdy klasa jest instancjonowana.

07:54.660 --> 07:57.150
I to dlatego powinno być świetnym pierwszym

07:57.150 --> 08:01.860
przykładem pełnej mocy, jaką można wyzwolić za pomocą dekoratorów, jeśli naprawdę

08:01.860 --> 08:04.480
rozumie się, co można z nimi zrobić.

08:04.480 --> 08:06.800
I nie możesz po prostu zdefiniować ich jako funkcji,

08:06.800 --> 08:09.970
a także nie możesz ich zdefiniować za pomocą funkcji czynnika.

08:09.970 --> 08:12.600
W niektórych dekoratorach, takich jak dekorator

08:12.600 --> 08:14.400
klasy, możesz również zwrócić

08:14.400 --> 08:17.650
coś, aby zastąpić rzecz, do której dodałeś dekorator w naszym

08:17.650 --> 08:19.470
przypadku klasy, z nową klasą,

08:19.470 --> 08:23.000
która może zaimplementować starą klasę, ale także dodać swoją

08:23.000 --> 08:25.711
nową niestandardową logikę.

08:25.711 --> 08:28.004
I z tym, jeśli skomentujemy to z powrotem,

08:28.004 --> 08:30.240
ponownie renderujemy Maxa na ekranie

08:30.240 --> 08:31.570
z naszą własną klasą, która

08:31.570 --> 08:35.793
zastępuje, lub która rozszerza i zastępuje starą klasę.
