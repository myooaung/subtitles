WEBVTT

00:02.150 --> 00:03.930
ผู้สอน: ดังนั้นเราจึงเพิ่มคำขอ POST

00:03.930 --> 00:06.120
แรกของเรา เราสามารถสร้างสิ่งที่ต้องทำได้

00:06.120 --> 00:07.250
ตอนนี้เรามีเส้นทางเพิ่มเติม

00:07.250 --> 00:10.170
เรายังมีเส้นทางที่จะให้บริการ TODOS ทั้งหมดที่เราสร้างขึ้น

00:10.170 --> 00:14.160
ตอนนี้โปรดทราบว่า TODOS ของคุณจะรีเซ็ตทุกครั้งที่คุณเปลี่ยนแปลงและบันทึกโค้ดของคุณ

00:14.160 --> 00:16.630
เนื่องจากจะเป็นการรีสตาร์ทเซิร์ฟเวอร์และทำให้ทุกอย่างที่เก็บไว้ในหน่วยความจำสูญเสียไป

00:16.630 --> 00:21.330
และเราจะจัดการเฉพาะ TODOS ของเราในหน่วยความจำเท่านั้น

00:21.330 --> 00:23.560
นั่นเป็นสิ่งที่เรามีอยู่ตรงนี้ในแอปจำลอง

00:23.560 --> 00:24.930
ในแอปจริง แน่นอนว่าคุณจะต้องเก็บข้อมูลนี้ไว้ในฐานข้อมูลจริง

00:24.930 --> 00:30.280
เรียกมันจากที่นั่นและต่อไปเรื่อย ๆ ดังนั้นมันก็จะอยู่รอด

00:30.280 --> 00:35.060
อย่างไรก็ตาม ที่นี่ เราสามารถสร้างฟังก์ชันใหม่ getTodos และนี่จะเป็น

00:35.060 --> 00:42.330
RequestHandler ที่นี่ ดังนั้นคุณจึงไม่ต้องตั้งค่าประเภทพารามิเตอร์ทั้งหมดทีละรายการ

00:42.330 --> 00:46.120
จากนั้นในนั้น ฉันแค่ต้องการตอบกลับโดยส่งคืนข้อมูล JSON

00:46.120 --> 00:49.560
บางส่วนที่ฉันมีสิ่งที่ต้องทำและที่นั่น ฉันแค่ต้องการเข้าถึงอาร์เรย์

00:49.560 --> 00:54.330
TODO ของฉันและส่งกลับไปยังไคลเอนต์ และนั่นสามารถทำได้ทั้งหมดแล้ว

00:54.330 --> 00:56.530
.

00:56.530 --> 00:57.810
แน่นอน คุณสามารถปรับแต่งสิ่งนี้ได้

00:57.810 --> 00:59.640
บางทีคุณอาจต้องการตรรกะที่แตกต่างออกไป

00:59.640 --> 01:06.690
บางทีคุณอาจต้องการจัดเรียง TODOS ก่อนหรืออะไรทำนองนั้น แต่นี่ในรูปแบบที่ง่ายที่สุดคือสิ่งที่เราต้องการที่นี่ มันส่งคืน

01:06.690 --> 01:10.530
TODOS ของเรา ดังนั้นฟังก์ชันที่ง่ายมาก .

01:10.530 --> 01:13.240
ในเส้นทาง TODOS ตอนนี้เราต้องเชื่อมต่อสิ่งนี้

01:13.240 --> 01:20.640
ลองนำเข้า getTodos จากคอนโทรลเลอร์ของเราและเชื่อมต่อที่นี่ด้วยเส้นทางนี้

01:20.640 --> 01:25.250
และด้วยเหตุนี้ ถ้าเราบันทึกสิ่งนี้ เราก็สามารถเห็นมันในการดำเนินการแล้ว

01:25.250 --> 01:29.860
หากเราย้อนกลับไปและสร้างคำขอใหม่ คำขอ

01:29.860 --> 01:44.400
GET ไปยัง http://localhost:3000/todos/ และเราส่งสิ่งนี้ เราจะได้อาร์เรย์เปล่ากลับมา ทำไมจึงเป็นอย่างนั้น

01:44.400 --> 01:48.010
ฉันบอกว่า TODOS จะถูกล้างเมื่อใดก็ตามที่เราเปลี่ยนรหัสและเซิร์ฟเวอร์รีสตาร์ท

01:48.010 --> 01:54.110
ดังนั้นเราควรสร้าง TODO ใหม่ทันทีโดยไม่ต้องรีสตาร์ทเซิร์ฟเวอร์ในระหว่างนี้

01:54.110 --> 01:57.360
และถ้าเราสร้าง TODO นั้นและตอนนี้เราได้ TODOS

01:57.360 --> 02:01.770
ของเรา เราจะเห็นว่าสิ่งที่ต้องทำนั้นสร้างด้วย ID, serial

02:01.770 --> 02:04.380
9811 และอื่นๆ ที่นี่เช่นกัน

02:04.380 --> 02:05.960
นั่นก็ได้ผลแล้ว

02:05.960 --> 02:12.680
ตอนนี้เมื่อเราทำเสร็จแล้ว เรามาทำงานกับแพตช์และลบ และแน่นอนว่าอย่าลังเลที่จะคิดหาตรรกะบางอย่างที่นั่นด้วยตัวคุณเอง

02:12.680 --> 02:16.130
ในท้ายที่สุด ตอนนี้คุณก็มีแบบเอกสารสำเร็จรูปทั้งหมดที่คุณต้องการแล้ว

02:16.130 --> 02:18.480
แน่นอนว่าตอนนี้เราจะทำมันด้วยกัน

02:19.390 --> 02:24.350
ตอนนี้ตามคำขอแพตช์ มาเพิ่มฟังก์ชันคอนโทรลเลอร์ใหม่กันเถอะ

02:24.350 --> 02:34.680
ส่งออก const updateTodo ซึ่งเป็นประเภท RequestHandler และควรมีฟังก์ชันในรูปแบบนี้ที่เราทราบอยู่แล้ว

02:34.680 --> 02:40.630
และในนั้น เป้าหมายคือการดึงข้อมูลเกี่ยวกับสิ่งที่ต้องทำใหม่จากคำขอที่เข้ามา

02:40.630 --> 02:44.140
แล้วอัปเดตสิ่งที่ต้องทำด้วยข้อมูลใหม่นั้น

02:44.140 --> 02:47.240
ตอนนี้ โปรดทราบว่าเป็นส่วนหนึ่งของเส้นทางของเราที่นี่

02:47.240 --> 02:48.900
เรามีกลุ่มไดนามิก

02:48.900 --> 02:51.140
เรามีส่วนรหัสนี้

02:51.140 --> 02:58.750
นั่นคือสิ่งที่เราจะสามารถแยกออกจาก URL ได้ สามารถแยกค่าที่เป็นรูปธรรมสำหรับกลุ่มไดนามิกนี้ได้

02:58.750 --> 03:02.147
ดังนั้นในคำขอที่เข้ามาของเรา คุณจะได้รับ todoId

03:03.172 --> 03:07.987
จากพารามิเตอร์คำขอของเรา รหัส,. id เพราะนั่นคือชื่อที่ฉันเลือกที่นี่

03:07.987 --> 03:13.060
หากคุณเลือกชื่ออื่นที่นี่ คุณต้องใช้ชื่ออื่นที่นั่น

03:13.060 --> 03:15.810
ตอนนี้เราไม่ได้รับการสนับสนุนที่นี่ใช่ไหม

03:15.810 --> 03:18.410
Params เป็นประเภทใดก็ได้

03:18.410 --> 03:23.400
ตอนนี้เนื่องจากประเภทสามารถแยกวิเคราะห์สตริงนี้และเข้าใจว่ามีอะไรอยู่ในนั้น

03:23.400 --> 03:25.460
ดังนั้นเพื่อให้ได้รูปแบบการสนับสนุนที่ดีขึ้น

03:25.460 --> 03:28.920
เราสามารถใช้ RequestHandler ในที่นี้เป็นประเภททั่วไป

03:28.920 --> 03:32.880
และเราสามารถเพิ่มวงเล็บเหลี่ยมและโดยทั่วไปจะบอก TypeScript

03:32.880 --> 03:35.880
ได้ว่าพารามิเตอร์ใดจะมี

03:35.880 --> 03:37.800
เราเพียงแค่ตั้งค่านี้เป็นวัตถุ

03:37.800 --> 03:39.300
และตอนนี้เรามีแผนที่ค่าคีย์ของพาเรนต์ทั้งหมดที่เรามีใน

03:39.300 --> 03:42.180
URL

03:42.180 --> 03:43.830
ตัวอย่างเช่น เรามีพารามิเตอร์

03:43.830 --> 03:46.730
ID ซึ่งในตอนท้ายมีสตริง

03:46.730 --> 03:50.230
นั่นคือสิ่งที่เราสามารถเพิ่มที่นี่ และตอนนี้คุณจะเห็นว่าเราได้รับการเติมข้อความอัตโนมัติและ

03:50.230 --> 03:52.560
TypeScript รู้ว่านี่จะเป็นสตริง

03:52.560 --> 03:55.520
ใช้ประเภททั่วไปนี้ดีกว่า

03:55.520 --> 03:58.640
ตอนนี้ เรามีรหัสแล้ว เราต้องการบางอย่างจากเนื้อหาคำขอ

03:58.640 --> 04:03.560
เพื่อให้แม่นยำ เราต้องการข้อความใหม่จากเนื้อหาคำขอ

04:03.560 --> 04:08.130
จึงสามารถดึงข้อความที่ได้รับการปรับปรุงจากเนื้อหาคำขอได้ และอีกครั้ง

04:08.130 --> 04:16.910
ให้ใช้การเรียงพิมพ์ที่นี่ เพื่อให้ชัดเจนว่าจะมีคุณสมบัติข้อความในเนื้อหา และสิ่งนี้จะเป็นประเภทสตริง

04:16.910 --> 04:19.750
และขอดึงข้อความหลังจากนั้น

04:19.750 --> 04:22.373
และตอนนี้เราสามารถอัปเดต TODO ในอาร์เรย์ TODOS ของเราได้แล้ว

04:23.830 --> 04:28.710
เพื่อหาดัชนีของสิ่งที่ต้องทำที่เราต้องการอัปเดต

04:28.710 --> 04:30.808
todoIndex โดยการเข้าถึง TODOS และด้วย

04:30.808 --> 04:33.760
findIndex เราสามารถเรียกใช้ตรรกะบางอย่างกับทุกรายการในอาร์เรย์

04:33.760 --> 04:36.090
TODOS

04:36.090 --> 04:38.060
และที่นั่นเรากำลังดูสิ่งที่ต้องทำทั้งหมด

04:38.060 --> 04:40.010
และถ้า todo id เท่ากับ todoId ที่เรามีที่นี่

04:40.010 --> 04:44.300
เรารู้ว่านั่นคือสิ่งที่ต้องทำที่เราต้องการอัปเดต

04:44.300 --> 04:47.140
ทีนี้ ถ้าด้วยเหตุผลบางอย่างควรเป็นลบหนึ่ง

04:47.140 --> 04:52.610
แสดงว่าเราไม่พบสิ่งที่ต้องทำนั้น ดังนั้น ถ้านั่นมีค่าน้อยกว่าศูนย์โดยหลักแล้ว

04:52.610 --> 04:56.960
เรารู้ว่ามีบางอย่างผิดพลาด และในกรณีนี้ ฉันจะโยนข้อผิดพลาดใหม่โดยที่ฉันพูดว่า

04:56.960 --> 04:59.630
ไม่พบสิ่งที่ต้องทำ!

04:59.630 --> 05:06.130
และนั่นควรทำให้เกิดข้อผิดพลาดเริ่มต้นของเราในการจัดการมิดเดิลแวร์ที่นี่

05:06.130 --> 05:08.633
ตอนนี้ถ้าเราทำผ่าน if check แล้ว เราพบ

05:09.870 --> 05:12.450
TODO แล้ว จากนั้นเราก็สามารถอัปเดต

05:12.450 --> 05:15.040
todo ที่ดัชนีนี้ในอาร์เรย์ TODOS ของเราให้เป็น

05:15.040 --> 05:18.960
TODO ใหม่ โดยที่เราเก็บ id เก่าไว้

05:18.960 --> 05:27.030
ดังนั้นจุดที่เราเข้าถึง TODOS, todoIndex id เราจึงเข้าถึง ID เก่าและเก็บไว้ แต่ข้อความตรงนี้ที่ฉันตั้งไว้

05:27.030 --> 05:31.713
แน่นอนว่าเราไม่ได้กำหนดแบบนี้

05:32.870 --> 05:34.570
แต่ข้อความที่เราตั้งไว้ที่นี่ ตอนนี้เป็นข้อความที่ได้รับการปรับปรุงแล้ว

05:34.570 --> 05:38.750
ซึ่งจะแทนที่สิ่งที่ต้องทำที่นี่ และหลังจากนั้น

05:38.750 --> 05:41.340
เราสามารถส่งการตอบกลับกลับได้

05:41.340 --> 05:45.280
เช่น ข้อความอัปเดต เป็นต้น

05:45.280 --> 05:47.053
และจากนั้นเรายังผนวกสิ่งที่ต้องทำที่อัปเดตแล้วเข้ากับการตอบกลับขาออก

05:47.990 --> 05:55.090
และตั้งค่านี้เท่ากับ TODOS todoIndex ซึ่งตอนนี้เก็บค่าใหม่

05:55.090 --> 06:03.960
นี่คือสิ่งที่เราเรียกว่าทำที่นี่ในตรรกะการอัปเดตของเรา แน่นอนว่าเป็นรหัสจำลองเพราะเรายังคงทำงานกับสิ่งนี้ในอาร์เรย์

06:03.960 --> 06:09.060
TODOS ของหน่วยความจำ แต่มันแสดงให้เห็นว่าเราใช้ TypeScript ที่นี่อย่างไร และนั่นคือสิ่งสำคัญ

06:09.060 --> 06:11.100
ลองใช้ฟังก์ชันอัปเดตตอนนี้กันเถอะ

06:11.100 --> 06:13.620
เพื่อที่เราจะได้กลับไปที่บุรุษไปรษณีย์

06:13.620 --> 06:16.260
และท้ายที่สุด ตอนนี้ฉันต้องการส่งคำขอ PATCH

06:16.260 --> 06:19.960
เพราะในเส้นทาง เรากำลังรอคำขอแก้ไขนี้ไปยังเส้นทางนี้

06:19.960 --> 06:26.490
และพูดถึงว่าเราควรเชื่อมต่อเส้นทางนี้กับฟังก์ชันคอนโทรลเลอร์นี้ก่อน

06:26.490 --> 06:28.850
ไปที่ไฟล์เส้นทางและนำเข้า

06:28.850 --> 06:33.420
updateTodo และสร้างการเชื่อมต่อนี้ที่นี่

06:33.420 --> 06:35.590
และหลังจากนั้น เราสามารถดำเนินการและส่งคำขอนี้

06:35.590 --> 06:38.570
ตอนนี้กลับไปที่บุรุษไปรษณีย์ PATCH คือสิ่งที่เราต้องการส่ง

06:38.570 --> 06:41.890
จากนั้นเป็น http://localhost:3000/todos

06:41.890 --> 06:46.320
และตอนนี้แนวคิดของ TODO ที่เราต้องการอัปเดตเป็นส่วนหนึ่งของ

06:46.320 --> 06:49.430
URL

06:49.430 --> 06:50.573
เนื่องจากเราได้บันทึกบางอย่างไว้ เนื่องจากเราบันทึกการเปลี่ยนแปลงบางอย่าง

06:51.500 --> 06:54.970
เซิร์ฟเวอร์ของเราจึงเริ่มต้นใหม่ ดังนั้น TODOS ทั้งหมดจะสูญหายไป

06:54.970 --> 07:01.150
ก่อนอื่น ก่อนอื่น ให้ส่งคำขอ POST อีกครั้งเพื่อสร้างสิ่งที่ต้องทำใหม่

07:01.150 --> 07:02.450
จากนั้นเราก็ได้รับ ID ของสิ่งที่ต้องทำนั้น

07:02.450 --> 07:05.170
ตอนนี้เราสามารถเพิ่มรหัสนี้ที่นี่ใน URL นี้

07:05.170 --> 07:11.780
และฉันจะเพิ่มเนื้อหาที่ควรเป็นประเภท JSON ซึ่งเราตั้งค่าข้อมูลใหม่ที่เราต้องการส่งไปยังเซิร์ฟเวอร์

07:11.780 --> 07:15.560
โปรดจำไว้ว่าในตัวควบคุมการอัปเดตของเรา

07:15.560 --> 07:20.970
ฉันกำลังมองหาฟิลด์ชื่อ text ในเนื้อหาคำขอที่เข้ามา

07:20.970 --> 07:22.900
ดังนั้น เราควรระบุสิ่งนี้อีกครั้งในข้อมูล

07:22.900 --> 07:24.580
JSON ที่เรากำลังส่ง

07:24.580 --> 07:26.690
จบหลักสูตรในหนึ่งเดือน

07:26.690 --> 07:29.440
นี่อาจเป็นข้อความใหม่ของเรา

07:29.440 --> 07:31.520
ถ้าเราส่งตอนนี้ เราจะเห็นว่ามีการอัปเดต

07:31.520 --> 07:35.210
และถ้าตอนนี้ฉันได้รับ TODOS ทั้งหมด เราก็จะเห็นว่ายังมี

07:35.210 --> 07:39.430
TODO เพียงอันเดียว แต่มีการเปลี่ยนข้อความ

07:39.430 --> 07:41.623
ตอนนี้ใช้งานได้แล้ว เรายังสามารถอัปเดตสิ่งที่ต้องทำได้อีกด้วย

07:42.950 --> 07:46.470
ตรวจสอบว่าจะเกิดอะไรขึ้นหากฉันมีรหัสที่ไม่มีอยู่

07:46.470 --> 07:48.780
เช่น ลบหลักสุดท้ายที่นี่ แล้วฉันจะได้รับ

07:48.780 --> 07:50.620
ไม่พบสิ่งที่ต้องทำในการตอบสนองข้อผิดพลาดประเภท

07:50.620 --> 07:53.430
500

07:53.430 --> 07:57.670
ดังนั้นนี่ก็ดูดีเช่นกัน

07:57.670 --> 07:59.660
ขั้นตอนสุดท้าย เรามาเพิ่มฟังก์ชันเพื่อลบสิ่งที่ต้องทำ

07:59.660 --> 08:03.800
ดังนั้นในโฟลเดอร์คอนโทรลเลอร์ ฉันจะส่งออกค่าคงที่ชื่อ

08:03.800 --> 08:07.210
deleteTodo ซึ่งเป็นประเภท RequestHandler

08:07.210 --> 08:14.040
และอีกครั้ง เราได้รับคำขอ การตอบสนอง และหน้าที่ถัดไปที่นี่

08:14.040 --> 08:20.270
และที่นี่ ตอนนี้ฉันต้องการค้นหาสิ่งที่ต้องทำและเพียงแค่ลบออก

08:20.270 --> 08:21.543
เพื่อสิ่งนั้น เราสามารถคัดลอกโค้ดนี้โดยที่เราได้รับ

08:22.380 --> 08:25.090
ID ของสิ่งที่ต้องทำและดัชนี

08:25.090 --> 08:29.360
เพียงกำจัดบรรทัดนั้นที่เราแยกข้อความที่อัปเดตออกเพราะสำหรับคำขอ

08:29.360 --> 08:32.210
DELETE จะไม่มีเนื้อหาคำขอ แต่เราต้องการ

08:32.210 --> 08:37.400
id ของ TODO ซึ่งเป็นส่วนหนึ่งของเส้นทาง URL ของเรา

08:37.400 --> 08:40.340
จากนั้นเราก็พบดัชนี และเมื่อเราได้ดัชนีแล้ว

08:40.340 --> 08:43.530
เราสามารถไปที่ TODO เรียกใช้เมธอด splice และลบสิ่งที่ต้องทำที่

08:43.530 --> 08:47.350
todoIndex และเฉพาะสิ่งที่ต้องทำนั้น

08:47.350 --> 08:51.620
และหลังจากนั้น เราสามารถตอบกลับโดยที่เราพูดว่า

08:51.620 --> 08:54.040
ลบสิ่งที่ต้องทำแล้ว! เป็นแบบนั้น.

08:54.040 --> 08:58.490
นี่อาจเป็นตรรกะในการลบของเรา

08:58.490 --> 08:59.380
ตอนนี้ได้เวลาเชื่อมต่อแล้ว

08:59.380 --> 09:01.760
ดังนั้นในโฟลเดอร์เส้นทาง ให้นำเข้า DeleteTodo

09:01.760 --> 09:04.560
จากตัวควบคุม TODO และเชื่อมต่อลงไปที่นั่น

09:04.560 --> 09:07.440
และด้วยการเชื่อมต่อนี้ หากเราบันทึกสิ่งนี้ อีกครั้ง เราจำเป็นต้องเพิ่มสิ่งที่ต้องทำ

09:08.340 --> 09:09.963
เนื่องจากสิ่งที่ต้องทำทั้งหมดจะถูกล้างด้วยการรีสตาร์ทเซิร์ฟเวอร์ทุกครั้ง

09:11.120 --> 09:14.370
ดังนั้นนี่คือ

09:14.370 --> 09:16.720
คัดลอกรหัสนั้น

09:16.720 --> 09:20.550
และตอนนี้ให้ส่งคำขอ DELETE นั้น

09:20.550 --> 09:22.680
ดังนั้นขอ DELETE ใหม่ที่นี่เพื่อ http:/localhost:3000/todos/this

09:22.680 --> 09:24.980
id

09:24.980 --> 09:27.160
ร่างกายไม่ต้องเสริม

09:27.160 --> 09:32.160
คลิกส่งและใช้งานได้

09:32.800 --> 09:34.880
ถ้าส่งอีกครั้ง เราขึ้น error

09:34.880 --> 09:37.180
ไม่พบเพราะเราเพิ่งลบไป

09:37.180 --> 09:41.570
และถ้าเราได้รับ TODOS ทั้งหมด นั่นควรเป็นอาร์เรย์ว่างและนี่

09:41.570 --> 09:42.723
ตอนนี้ใช้งานได้แล้วและนี่คือฟังก์ชัน

09:42.723 --> 09:46.750
CRUD โดยพื้นฐานแล้วเพิ่มด้วย TypeScript ที่นี่ในแอป

09:46.750 --> 09:49.550
Node และ Express ที่เรียบง่ายนี้

09:49.550 --> 09:50.990
แน่นอนว่าตอนนี้เป็นแอปพลิเคชั่นที่ค่อนข้างไม่สำคัญ

09:50.990 --> 09:52.940
แต่มันแสดงให้เราเห็นการใช้งาน TypeScript บางส่วนแล้ว

09:52.940 --> 09:56.060
มันแสดงให้เราเห็นว่าเราเขียนโค้ดที่น่าจะคุ้นเคยสำหรับคุณหากคุณทำงานจนจบหลักสูตรนี้

09:56.060 --> 10:02.000
และเรากำลังใช้คุณลักษณะทั้งหมดที่คุณได้เรียนรู้จากที่นั่น

10:02.000 --> 10:04.750
และเช่นเดียวกับในส่วน React นั่นคือทั้งหมดที่สำคัญ

10:04.750 --> 10:07.610
คุณสามารถใช้สิ่งที่คุณเรียนรู้เกี่ยวกับ TypeScript

10:07.610 --> 10:11.520
ได้ที่นี่เช่นกัน เพราะสุดท้ายแล้วเรากำลังรวบรวมเป็นโค้ด

10:11.520 --> 10:14.990
JavaScript ปกติ ซึ่งเราจะให้บริการ
