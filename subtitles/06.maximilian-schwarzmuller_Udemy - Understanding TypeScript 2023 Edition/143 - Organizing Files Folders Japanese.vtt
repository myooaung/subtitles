WEBVTT

00:02.300 --> 00:04.180
講師：では､ ネームベースから始めて､

00:04.180 --> 00:08.460
その路線を継続し､ さらにファイルに分割していきましょう｡

00:08.460 --> 00:11.090
ここではそのために､ プロジェクトの状態管理を行う｡ 

00:11.090 --> 00:13.610
それも別ファイルにすればいい｡ 

00:13.610 --> 00:16.050
そこで､ このプロジェクト状態のインスタンスの作成を含むすべてを､

00:16.050 --> 00:24.250
アプリから切り取ります｡

00:24.250 --> 00:24.250
tsファイルを作成し､

00:24.250 --> 00:27.060
新しいファイルproject-stateを作成します｡ ツ｡ 

00:27.060 --> 00:29.685
これを移動して､ 先ほどと同じように､

00:29.685 --> 00:32.070
名前空間に配置します｡

00:32.070 --> 00:38.090
名前空間appは重要で､ Appでなければなりません｡

00:38.090 --> 00:46.120
この場合､ projectstateクラスはアプリケーションの残りの部分に必要です｡

00:46.120 --> 00:53.880
また､ この下にある定数も同様にエクスポートする必要があります｡

00:53.880 --> 00:59.430
Listenerも､ その状態も､ このファイルの中でしか使われていないので､

00:59.430 --> 01:02.823
エクスポートする必要はありません｡

01:03.700 --> 01:06.860
ここで､ projectstateをインポートする必要があります｡  tsファイルなので､

01:06.860 --> 01:09.540
App. ts､ そこでまた輸入の時間だ｡ 

01:09.540 --> 01:13.290
プロジェクトダッシュ状態､ そのまんまです｡ 

01:13.290 --> 01:16.620
それを保存すれば､ エラーなくコンパイルできるはずです｡ 

01:16.620 --> 01:19.480
さて､ このまま続けて､ 検証部分も別のファイルにすることができますので､

01:19.480 --> 01:21.460
これらをすべて取り込んで､ 新しいファイル､

01:21.460 --> 01:26.890
validationを作成します｡

01:26.890 --> 01:26.890
ts､

01:26.890 --> 01:30.760
名前空間 App をここに追加し､ 検証ロジックをここに置き､ validatable

01:30.760 --> 01:36.706
インターフェイスとすべての devalidate 関数をここにエクスポートします｡

01:36.706 --> 01:39.566
そして､ Appに戻る｡  ts, you know how it is, go

01:39.566 --> 01:41.700
back here to top and add an import to

01:41.700 --> 01:43.513
validation. ツ｡ 

01:45.160 --> 01:49.823
これで､ デコレーターも別ファイルに移せるようになりました｡ 

01:49.823 --> 01:54.410
ダッシュ装飾を自動化する｡  ツなどです｡ 

01:54.410 --> 01:58.863
もう一度､ Appという名前の名前空間を追加し､ そこに関数を置いて､ もちろん､

01:58.863 --> 02:01.950
このファイルの外でも利用できるようにエクスポートし､

02:01.950 --> 02:08.430
ここでもappで利用できるようにします｡

02:08.430 --> 02:08.430
ts,

02:08.430 --> 02:12.633
autobind dash decorator をインポートしてみました｡ ツ｡ 

02:14.840 --> 02:16.484
さて､ エクスポートするものが増えました｡

02:16.484 --> 02:19.240
コンポーネントと､ これらすべてのクラスです｡

02:19.240 --> 02:21.205
各クラスを別々のファイルにして､

02:21.205 --> 02:25.440
各ファイルを比較的小さくして管理しやすくしたいんだ｡

02:25.440 --> 02:28.280
さて､ ここで新たな問題が出てきたわけですが｡ 

02:28.280 --> 02:30.385
同じレベルのファイルをどんどん追加していきます｡

02:30.385 --> 02:33.934
とりあえず､ ここにあるダッシュというものを使って､ ファイルの中身に関するヒントやヘルプを提供します｡

02:33.934 --> 02:42.330
autobind dash decoratorは､ おそらくそこにデコレータがあることを示します｡

02:42.330 --> 02:44.300
ここでは､ おそらくインターフェイスがあるのでしょう｡ 

02:44.300 --> 02:46.246
ここで､ 模型など｡ 

02:46.246 --> 02:49.070
さて､ ファイルが3つか4つしかない場合は全く問題ありませんが､

02:49.070 --> 02:57.430
それ以上のファイルがある場合は､ ここで非常に分かりにくいフォルダ構造になってしまいます｡

02:57.430 --> 03:00.056
そこで､ 私がやりたいのは､ サブフォルダーを作ることです｡ 

03:00.056 --> 03:02.697
decorators サブフォルダを追加して､

03:02.697 --> 03:05.830
そこに autobind デコレーターを移動し､

03:05.830 --> 03:09.260
名前を autobind だけに変更します｡

03:09.260 --> 03:11.720
もちろん､ そこにはデコレーターがいる｡ 

03:11.720 --> 03:14.440
ドラッグ＆ドロップ・インターフェースは､

03:14.440 --> 03:27.263
結局のところ､ ドラッグ＆ドロップ可能なクラスがどうあるべきかの定義に過ぎないと思うからです｡

03:27.263 --> 03:33.655
プロジェクトモデルが､ プロジェクトクラスがどのように見えるか､ あるいは私たちのプロジェクトオブジェクトがどのように見えるべきかの定義であるのと同じように｡

03:33.655 --> 03:42.610
このドラッグ＆ドロップをprojectと名付け､ utilフォルダを追加してvalidationを追加し､

03:42.610 --> 03:44.860
stateフォルダを追加してproject

03:44.860 --> 03:49.690
stateを追加することにします｡

03:49.690 --> 03:55.300
ここでは､ このプロジェクトとの混同を避けるために､ project-stateという名前のままにしておきます｡

03:55.300 --> 03:55.300
tsファイルはこちら

03:55.300 --> 03:56.716
技術的には問題ないのですが､

03:56.716 --> 03:59.216
この講座では､ どのファイルで作業しているのかをわかりやすくするためにも､

03:59.216 --> 04:02.640
この点を明確にしておきたいと思います｡

04:02.640 --> 04:07.320
これ､ 絶対プロジェクトだけに名前変えた方がいいよね｡  を､ ここで紹介したいと思います｡

04:07.320 --> 04:09.662
さて､ このリファクタリングとサブフォルダによって､

04:09.662 --> 04:12.069
当然ながらここでのインポートが壊れているので､

04:12.069 --> 04:14.010
それを修正する必要があります｡

04:14.010 --> 04:21.216
ドラッグ＆ドロップのインターフェースはモデルフォルダ内にあり､ 現在はドラッグ＆ドロップという名称になっています｡

04:21.216 --> 04:21.216
ツ｡ 

04:21.216 --> 04:28.560
そして､ プロジェクトモデルもモデルフォルダ内にあり､ projectという名前だけになっています｡

04:28.560 --> 04:28.560
ツ｡ 

04:28.560 --> 04:31.100
Project stateはstateフォルダに､

04:31.100 --> 04:34.040
validationはutilフォルダに､ autobind

04:34.040 --> 04:39.860
decoratorはdecoratorsにあり､ 単にautobindという名前になっています｡

04:39.860 --> 04:42.547
これで､ それを保存すれば､ エラーなくコンパイルされ､

04:42.547 --> 04:44.128
今ではより管理しやすく読みやすいフォルダー構造になっていると､

04:44.128 --> 04:47.290
私は主張します｡

04:47.290 --> 04:50.500
それを踏まえて､ まだまだ続けましょう｡ 

04:50.500 --> 04:52.130
コンポーネントができましたので､

04:52.130 --> 04:54.813
components サブフォルダーを追加し､

04:54.813 --> 04:59.813
その中にベースとなる dash component ts ファイル､ project

05:00.210 --> 05:05.210
item ts ファイル､ project list ts ファイル､ project

05:07.600 --> 05:12.110
input ts ファイルを配置したいと思います｡

05:12.110 --> 05:14.430
もちろん､ これとは別の方法で整理することもできますが､

05:14.430 --> 05:17.631
これによって関連するファイルをまとめておくことができると思います｡

05:17.631 --> 05:22.253
そこで､ この抽象的なコンポーネントの基本クラスを､ app tsから切り取って､

05:23.830 --> 05:27.023
基本コンポーネントに移動させます｡

05:29.610 --> 05:33.180
このように､ もちろん､ 先ほどと同じように､

05:33.180 --> 05:37.810
Appという名前で名前空間に追加してください｡

05:37.810 --> 05:41.120
そして､ このネームスペースに移動させます｡ 

05:41.120 --> 05:46.171
もちろん､ 別のファイルで使えるように､ 書き出しが必要になる前に調整しますよ｡

05:46.171 --> 05:54.910
しかし､ その別のファイルは､ アプリにはなりません｡  コンポーネントを使用していたファイルやクラスも移動してしまうからです｡

05:54.910 --> 06:00.164
例えば､ このプロジェクト・アイテム・クラスは､ プロジェクト・アイテムの中に移動させます｡

06:00.164 --> 06:00.164
ts､

06:00.164 --> 06:04.550
正確には､ その中に名前空間appも追加して､ その中に移動して､

06:04.550 --> 06:09.060
このクラスもエクスポートします｡

06:09.060 --> 06:14.740
重要なのは､ これはコンポーネントに依存しているということです｡ もう一つは､ これを保存すると､

06:14.740 --> 06:24.772
最後にコンポーネントが見つからないというエラーが発生します｡

06:24.772 --> 06:24.772
ツ｡ 

06:24.772 --> 06:29.130
これは常に相対的なインポートで､

06:29.130 --> 06:44.913
同じフォルダーにあるので､ ここでコンポーネントスラッシュと言う必要はありません｡

06:46.060 --> 06:48.030
それで今､ プロジェクトの項目はここにあります｡ 

06:48.030 --> 06:51.963
今はもちろん､ アプリで｡  ts､ プロジェクトリストも手に入れました｡ 

06:55.940 --> 07:00.662
このファイルをプロジェクトリストのtsファイルに移動して､

07:00.662 --> 07:14.480
ネームスペースのAppに移動します｡

07:14.480 --> 07:14.480
tsファイルを､

07:14.480 --> 07:17.097
プロジェクトのinput tsファイルに移動し､ そこでapp

07:17.097 --> 07:19.857
namespaceに移動してください｡

07:20.750 --> 07:24.350
さて､ 先ほどと同様に､ このクラスをエクスポートすると､

07:24.350 --> 07:27.550
プロジェクト・アイテムもプロジェクト・リストも､

07:27.550 --> 07:34.343
もちろん､ すべてエクスポートする必要があります｡

07:35.200 --> 07:42.934
アプリで｡  ts､ これらのコンポーネントをすべてインポートする必要があるので､ ここではproject-inputをインポートします｡

07:42.934 --> 07:42.934
ts､

07:42.934 --> 07:47.380
project-list｡ ts､ そしてこれを保存します｡ 

07:47.380 --> 07:53.192
プロジェクト・インプットでは､

07:53.192 --> 08:05.790
プロジェクト・リストと同じようにコンポーネントを使用しています｡

08:05.790 --> 08:08.665
これで､ エラーなしでコンパイルされ､

08:08.665 --> 08:10.880
動作するかどうか見てみましょう｡

08:10.880 --> 08:16.540
ここでリロードして､ これを追加すると､ ドラッグ＆ドロップが可能になり､

08:16.540 --> 08:22.340
すべて正常に動作するようです｡

08:22.340 --> 08:23.978
それでも最終的には1つのファイルになりますが､

08:23.978 --> 08:28.110
コードに取り組む際には､ より管理しやすいものになりました｡

08:28.110 --> 08:30.978
なぜなら､ より小さなファイルに集中しているので､

08:30.978 --> 08:39.363
探しているものをすぐに見つけることができ､ 次に作業したい場所を見つけるために巨大なファイルをスクロールする必要がないからです｡
