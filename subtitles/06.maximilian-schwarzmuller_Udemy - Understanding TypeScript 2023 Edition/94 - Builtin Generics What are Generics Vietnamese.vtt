WEBVTT

00:02.130 --> 00:02.963
Người kể chuyện: Để làm điều

00:02.963 --> 00:05.260
đó một lần nữa, tôi quay lại Thiết lập Dự án giả của chúng ta, mà chúng

00:05.260 --> 00:06.690
ta đã sử dụng đi sử dụng lại nhiều lần.

00:06.690 --> 00:08.260
Trong đó, chúng ta có thể chạy NPM started

00:08.260 --> 00:10.190
để hiển thị máy chủ phát triển đó.

00:10.190 --> 00:13.690
Và sau đó, trong một cửa sổ đầu cuối mới với máy chủ đang chạy

00:13.690 --> 00:15.260
trong một cửa sổ đầu cuối khác,

00:15.260 --> 00:17.419
tôi chạy TSC dash W để bắt đầu quá trình

00:17.419 --> 00:21.540
biên dịch TypeScript của mình và tiếp tục duy trì hoạt động đó.

00:21.540 --> 00:23.470
Tất nhiên, với điều đó, chúng tôi có một

00:23.470 --> 00:24.560
trang trống vì không có

00:24.560 --> 00:27.060
gì trên đó nhưng bây giờ chúng tôi có thể thử trong tệp

00:27.060 --> 00:29.480
TS của ứng dụng và bắt đầu với thuốc generic.

00:29.480 --> 00:32.940
Và tôi nghĩ sẽ dễ hiểu khái quát nhất nếu chúng

00:32.940 --> 00:35.450
ta xem xét một loại mặc định, được

00:35.450 --> 00:37.450
tích hợp vào TypeScript mà

00:37.450 --> 00:39.610
chúng tôi thực sự đã làm việc

00:39.610 --> 00:41.890
rất nhiều, hóa ra là một loại chung

00:41.890 --> 00:44.410
và đó sẽ là một mảng.

00:44.410 --> 00:46.900
Giả sử chúng ta có một mảng tên.

00:46.900 --> 00:50.370
Max và Manual hãy nói.

00:50.370 --> 00:51.620
Vì vậy, chúng tôi nhận

00:51.620 --> 00:54.610
được hai tên trong đó, tất nhiên, loại hằng

00:54.610 --> 00:57.210
số của tên là một chuỗi các chuỗi.

00:57.210 --> 00:59.610
Trên thực tế, chúng ta có thể

00:59.610 --> 01:02.460
coi đây là hai loại được kết hợp.

01:02.460 --> 01:05.760
Giống như bạn có thể có một đối tượng với các thuộc tính khác nhau,

01:05.760 --> 01:07.700
trong mỗi thuộc tính bạn có thể lưu trữ

01:07.700 --> 01:09.310
một loại khác nhau.

01:09.310 --> 01:13.750
Một mảng luôn chỉ là một thứ có dữ liệu khác nhau trong đó, trong

01:13.750 --> 01:16.440
trường hợp này là các chuỗi trong đó.

01:16.440 --> 01:20.230
Vì vậy, chúng tôi thực sự có kiểu mảng, chỉ là một mảng và

01:20.230 --> 01:22.770
nếu tôi xóa tên ở đây và cắt chúng, bạn

01:22.770 --> 01:25.010
sẽ thấy rằng TypeScript sẽ suy ra

01:25.010 --> 01:29.140
đây là một mảng kiểu bất kỳ với bất kỳ dữ liệu nào trong đó.

01:29.140 --> 01:32.690
Quả thực TypeScript biết kiểu mảng.

01:32.690 --> 01:35.280
Vì vậy, chúng tôi có thể nói, đây phải là một mảng nhưng

01:35.280 --> 01:37.600
như bạn thấy nếu tôi chỉ định như thế này, chúng

01:37.600 --> 01:39.900
tôi sẽ gặp lỗi mặc dù tôi có thể cho bạn biết rằng

01:39.900 --> 01:43.570
loại mảng này, như thế này, tồn tại trong TypeScript.

01:43.570 --> 01:45.870
Nhưng chúng tôi thấy rằng đó là một

01:45.870 --> 01:48.710
loại chung và nó yêu cầu một đối số loại.

01:48.710 --> 01:50.950
Và bây giờ, đó là điều chúng ta chưa từng thấy trước đây.

01:50.950 --> 01:53.870
Chúng tôi chưa bao giờ nghe nói về các loại chung trước đây.

01:53.870 --> 01:55.750
Bây giờ, ký hiệu kỳ lạ này ở đây, bất cứ

01:55.750 --> 01:58.120
khi nào bạn nhìn thấy thứ gì đó như thế này trong

01:58.120 --> 02:01.060
TypeScript, thì bạn đang xử lý một loại chung chung.

02:01.060 --> 02:05.610
Loại chung là loại được kết nối với một số

02:05.610 --> 02:08.890
loại khác và thực sự linh hoạt

02:08.890 --> 02:12.920
về loại chính xác của loại khác.

02:12.920 --> 02:14.130
Nghe có vẻ khó?

02:14.130 --> 02:16.820
Chà, hãy quay lại ví dụ về mảng đó.

02:16.820 --> 02:19.380
Chúng tôi biết rằng chúng tôi muốn lưu trữ một mảng ở đây.

02:19.380 --> 02:22.250
Vì vậy, bản thân một mảng có thể là một loại, bạn

02:22.250 --> 02:24.610
có thể nói đó là một danh sách dữ liệu mà

02:24.610 --> 02:26.730
chính nó đã tạo nên một loại.

02:26.730 --> 02:29.770
Cũng giống như một đối tượng là một loại của riêng nó, ngay cả

02:29.770 --> 02:32.200
khi chúng ta chưa biết dữ liệu nào sẽ đi vào đó.

02:32.200 --> 02:34.490
Vì vậy, một mảng là một loại của riêng mình.

02:34.490 --> 02:38.230
Nhưng một mảng tất nhiên lưu trữ dữ liệu của một loại

02:38.230 --> 02:39.860
nhất định trong đó.

02:39.860 --> 02:42.690
Bây giờ, kiểu mảng không quan tâm loại dữ liệu

02:42.690 --> 02:44.810
nào được lưu trữ trong đó.

02:44.810 --> 02:48.150
Kiểu mảng không quan tâm bạn đang lưu trữ

02:48.150 --> 02:50.540
danh sách chuỗi, số, đối tượng

02:50.540 --> 02:52.430
hay dữ liệu hỗn hợp.

02:52.430 --> 02:54.500
Loại mảng thực sự không quan tâm nhưng

02:54.500 --> 02:58.640
nó quan tâm đến việc lấy ít nhất một số thông tin, Ngay cả khi bạn nói với

02:58.640 --> 03:01.200
nó là tôi không biết, bằng cách đặt loại này

03:01.200 --> 03:02.960
để nhập bất kỳ mảng nào.

03:02.960 --> 03:05.870
Nó tốt hơn là không chỉ định bất cứ điều gì.

03:05.870 --> 03:08.330
Bây giờ, đây là một cách để xác định kiểu mảng, kiểu

03:08.330 --> 03:10.070
dữ liệu được lưu trữ trong đó và sau

03:10.070 --> 03:11.430
đó là dấu ngoặc vuông.

03:11.430 --> 03:14.620
Một cách khác, sẽ tạo chính xác cùng một loại là sử dụng

03:14.620 --> 03:15.830
thứ Array đó và sau đó

03:15.830 --> 03:17.630
là các dấu ngoặc nhọn này.

03:17.630 --> 03:20.030
Và bây giờ giữa các dấu ngoặc nhọn

03:20.030 --> 03:22.340
này, bạn chỉ định loại dữ liệu

03:22.340 --> 03:24.140
sẽ đi vào mảng.

03:24.140 --> 03:26.330
Ví dụ: một chuỗi và điều

03:26.330 --> 03:31.330
này ở đây giống 100% với việc xác định loại này ở đây.

03:32.030 --> 03:34.950
Tất nhiên, ở đây bạn cũng có thể sử dụng một kiểu kết

03:34.950 --> 03:37.730
hợp để nói, mảng này lưu trữ các chuỗi hoặc số hoặc

03:37.730 --> 03:40.850
sử dụng bất kỳ nếu bạn không muốn nói bất cứ điều gì về kiểu

03:40.850 --> 03:42.970
hoặc như chúng ta vừa có chuỗi.

03:42.970 --> 03:44.330
Vì vậy, đây là một loại chung,

03:44.330 --> 03:46.900
một loại chung được tích hợp trong TypeScript.

03:46.900 --> 03:50.440
Một loại được kết nối với một loại khác, nơi chúng

03:50.440 --> 03:53.980
tôi muốn biết loại của mình là loại nào để TypeScript

03:53.980 --> 03:56.810
có thể hỗ trợ chúng tôi tốt hơn.

03:56.810 --> 03:57.910
Bởi vì ở đây chẳng hạn,

03:57.910 --> 04:01.510
nếu chúng ta biết rằng những gì chúng ta lưu trữ trong đó sẽ là một chuỗi,

04:01.510 --> 04:04.380
thì chúng ta sẽ biết bất cứ khi nào tôi truy cập một phần

04:04.380 --> 04:06.143
tử trong mảng đó, tôi có thể thực

04:07.100 --> 04:09.410
hiện các công cụ chuỗi với nó.

04:09.410 --> 04:12.260
Ví dụ, tôi có thể gọi tất cả các phương thức

04:12.260 --> 04:15.280
chuỗi này và TypeScript sẽ không phàn nàn

04:15.280 --> 04:18.220
vì nó biết, mảng này giữ các chuỗi.

04:18.220 --> 04:20.410
Đó là ý tưởng của các loại chung chung.

04:20.410 --> 04:23.230
Một loại nhất định trong trường hợp này, kiểu

04:23.230 --> 04:26.780
mảng có thể đơn giản là hoạt động tốt hơn hoặc hoàn toàn

04:26.780 --> 04:29.040
không hoạt động nếu bạn cung cấp thông

04:29.040 --> 04:33.430
tin bổ sung về một loại dữ liệu được cung cấp trong kiểu mảng này và

04:33.430 --> 04:36.590
tất nhiên, kiểu mảng chỉ là một ví dụ.

04:36.590 --> 04:39.840
Một loại chung khác được tích hợp trong TypeScript

04:39.840 --> 04:42.130
là loại lời hứa.

04:42.130 --> 04:45.470
Bây giờ lời hứa là một tính năng JavaScript, phải không?

04:45.470 --> 04:46.970
Nó không phải là một tính năng TypeScript.

04:46.970 --> 04:49.437
Bạn có thể tạo lời hứa bằng JavaScript và

04:49.437 --> 04:52.000
trong trường hợp bạn không chắc lời hứa là

04:52.000 --> 04:53.870
gì, hãy tìm liên kết đính kèm.

04:53.870 --> 04:58.150
Một lời hứa có thể được tạo bằng cách sử dụng lời hứa mới.

04:58.150 --> 05:00.640
Một lần nữa, đây là một hàm tạo, một

05:00.640 --> 05:03.270
lớp được tích hợp trong JavaScript

05:03.270 --> 05:05.870
và hàm tạo hứa hẹn nhận một đối số mà chính

05:05.870 --> 05:07.640
nó là một hàm, sau đó sẽ nhận

05:07.640 --> 05:10.650
được hai đối số cuối cùng là hàm giải quyết

05:10.650 --> 05:12.580
và hàm từ chối.

05:12.580 --> 05:15.180
Giờ đây, những thứ này sẽ được JavaScript tự động

05:15.180 --> 05:17.790
chuyển cho chúng tôi trong trình duyệt.

05:17.790 --> 05:22.400
Và sau đó, trong một lời hứa, chẳng hạn, chúng ta có thể đặt bộ hẹn giờ và sau

05:22.400 --> 05:25.640
đó trong chức năng gọi lại của bộ hẹn giờ đó, chúng ta

05:25.640 --> 05:28.140
có thể giải quyết lời hứa bên ngoài.

05:28.140 --> 05:30.140
Vì vậy, ở đây trong chức năng gọi

05:30.140 --> 05:34.823
lại này, chúng ta có thể gọi giải quyết và nói rằng điều này đã hoàn thành.

05:36.500 --> 05:41.020
Bây giờ khi chúng ta làm như vậy, lời hứa này ở đây sẽ tạo ra một đối tượng mới, một đối

05:41.020 --> 05:43.860
tượng lời hứa được lưu trữ trong hằng số lời hứa.

05:43.860 --> 05:47.700
Bây giờ, hằng số lời hứa này thực sự có một loại cụ thể.

05:47.700 --> 05:49.470
Đó là loại lời hứa và sau đó,

05:49.470 --> 05:51.130
bạn thấy những dấu ngoặc

05:51.130 --> 05:56.130
nhọn này bởi vì lời hứa này cuối cùng sẽ giải quyết được điều gì đó.

05:56.480 --> 05:58.930
Bây giờ ở đây nó nói là không biết vì TypeScript

05:58.930 --> 06:01.470
không thể hiểu đầy đủ rằng chúng tôi thực sự sẽ

06:01.470 --> 06:03.880
giải quyết thành một chuỗi ở đây.

06:03.880 --> 06:05.870
Nhưng do đó, chúng tôi có thể nói đây là

06:05.870 --> 06:08.120
một lời hứa, cuối cùng sẽ tạo ra một chuỗi và

06:08.120 --> 06:11.450
chúng tôi thực hiện lại bằng cách sử dụng loại chung của mình.

06:11.450 --> 06:14.030
Loại chính là lời hứa, nhưng một lời hứa

06:14.030 --> 06:16.120
giống như một mảng, loại này hoạt

06:16.120 --> 06:18.380
động cùng với các loại khác.

06:18.380 --> 06:22.000
Một mảng đã sử dụng các loại khác vì dữ liệu được lưu trữ trong đó, dữ

06:22.000 --> 06:23.350
liệu của một số loại nhất

06:23.350 --> 06:25.640
định và lời hứa hoạt động cùng với các loại

06:25.640 --> 06:29.750
khác vì cuối cùng nó trả về một số dữ liệu thuộc một số loại và trong trường hợp

06:29.750 --> 06:31.140
này, đó là một lời hứa cuối

06:31.140 --> 06:32.940
cùng sẽ trả về một chuỗi.

06:32.940 --> 06:34.470
Bây giờ một lần nữa, tại sao điều đó lại hữu ích?

06:34.470 --> 06:37.550
Tại sao thông tin loại bổ sung này hữu ích?

06:37.550 --> 06:40.350
Chà, nếu chúng ta chỉ có một loại lời hứa ở đây và điều

06:40.350 --> 06:41.430
đó sẽ không được phép

06:41.430 --> 06:44.770
nhưng nếu chúng ta nói lời hứa về loại bất cứ điều gì, về cơ bản

06:44.770 --> 06:46.870
giống như các loại sẽ không biết các loại

06:46.870 --> 06:48.390
chung nếu nó không có bất kỳ

06:48.390 --> 06:51.280
thông tin nào về những gì chúng ta trở lại.

06:51.280 --> 06:53.340
Tất nhiên, với lời hứa này, chúng ta có thể sử

06:53.340 --> 06:55.750
dụng chúng vì chúng ta có thể thực hiện mọi lời hứa và cuối

06:55.750 --> 06:57.770
cùng chúng ta sẽ nhận được một số dữ liệu nhưng

06:57.770 --> 06:59.770
chúng ta không biết gì về dữ liệu đó.

06:59.770 --> 07:02.500
Ví dụ, tôi không thể gọi một phương thức chuỗi trên đó.

07:02.500 --> 07:04.850
Chà, tôi có thể vì đó là bất kỳ trường hợp nào trong trường hợp

07:04.850 --> 07:07.590
này nhưng tôi không nhận được bất kỳ hỗ trợ TypeScript cụ thể nào.

07:07.590 --> 07:11.313
Tôi cũng có thể thử những thứ trên đó, chắc chắn sẽ không hiệu quả.

07:12.170 --> 07:13.800
Ví dụ: nếu chúng tôi thay đổi điều

07:13.800 --> 07:15.220
này và chúng tôi trả về một số

07:15.220 --> 07:17.320
ở đây, tôi vẫn có thể gọi một phương thức

07:17.320 --> 07:19.390
chuỗi ở đây vì TypeScript không có thông

07:19.390 --> 07:22.640
tin về dữ liệu mà lời hứa này cuối cùng sẽ mang lại.

07:22.640 --> 07:24.070
Bây giờ với các loại chung, chúng

07:24.070 --> 07:26.280
tôi cung cấp thông tin đó cho TypeScript.

07:26.280 --> 07:28.160
Chúng tôi có thể nói với TypeScript rằng

07:28.160 --> 07:30.240
lời hứa này cuối cùng sẽ tạo ra một chuỗi hoặc

07:30.240 --> 07:32.840
trong trường hợp này là một số và sau đó TypeScript có

07:32.840 --> 07:34.940
thể cảnh báo chúng tôi tại đây.

07:34.940 --> 07:37.390
Nếu tôi cố lưu cái này, nó sẽ báo lỗi cho

07:37.390 --> 07:40.870
chúng tôi vì nó biết rằng lời hứa này cuối cùng sẽ mang

07:40.870 --> 07:44.092
lại một số và bạn có thể gọi phân tách trên đó.

07:44.092 --> 07:48.010
Vì vậy, chúng tôi nhận được sự an toàn loại tốt hơn với các loại chung.

07:48.010 --> 07:50.510
Vì vậy, bạn thực sự linh hoạt về những gì bạn

07:50.510 --> 07:52.720
làm với thông tin loại chung đó.

07:52.720 --> 07:54.830
Một mảng biết dữ liệu nào nó lưu trữ,

07:54.830 --> 07:57.140
một lời hứa biết dữ liệu nào nó trả về.

07:57.140 --> 07:59.840
Nếu bạn xây dựng các lớp hoặc hàm chung của riêng mình, bạn

07:59.840 --> 08:02.140
có thể làm điều gì đó hoàn toàn khác so với ở đó.

08:02.140 --> 08:04.570
Nhưng cuối cùng, các loại chung giúp

08:04.570 --> 08:06.970
bạn có được thông tin loại bổ sung nếu

08:06.970 --> 08:10.640
bạn có một lớp phức tạp hơn hoặc hàm phức tạp hơn để thực hiện

08:10.640 --> 08:14.240
điều gì đó với dữ liệu đang đến, theo cách mà nó không thực

08:14.240 --> 08:16.020
sự quan tâm đến dữ liệu đang

08:16.020 --> 08:18.700
tồn tại. của một loại cụ thể, nhưng nơi bạn

08:18.700 --> 08:21.500
muốn lưu trữ thông tin loại ngoài dữ liệu đến

08:21.500 --> 08:24.850
để nhận hỗ trợ TypeScript tốt hơn bất cứ khi nào bạn làm

08:24.850 --> 08:27.590
việc với loại chung của mình.

08:27.590 --> 08:30.450
Vì vậy, bất cứ khi nào bạn làm việc với lời hứa hoặc mảng

08:30.450 --> 08:33.270
dữ liệu đó, về cơ bản đó là ý tưởng về thuốc generic.

08:33.270 --> 08:36.300
Vì vậy, ở đây, tất cả đều được xây dựng bằng thuốc generic.

08:36.300 --> 08:37.460
Hãy bình luận điều đó ra.

08:37.460 --> 08:40.450
Bây giờ chúng ta hãy xây dựng từ loại chung của riêng chúng ta.

08:40.450 --> 08:42.653
Hãy sử dụng các loại chung của riêng chúng ta.
