WEBVTT

00:02.130 --> 00:05.180
講師：さて､ 今回はTypeScriptが知っているコアな型をいくつか取り上げました｡

00:05.180 --> 00:06.590
では､ 次に進みましょう｡ 

00:06.590 --> 00:11.670
そのために､ アプリ名を変更します｡  このファイルをobjs-arrays-enumsに変更することもできますが､

00:11.670 --> 00:12.750
基本的にはそのファイルを保持したまま､

00:12.750 --> 00:17.130
新しいアプリを作成します｡

00:17.130 --> 00:17.130
tsファイルを作成することで､

00:17.130 --> 00:20.500
再び空のファイルを作成し､ そこで作業することができます｡

00:20.500 --> 00:25.790
さて､ このファイルでは､ TypeScriptで見られるもう一つの興味深い型に飛び込んでみたいと思います｡

00:25.790 --> 00:28.640
しかも､ それがユニオンタイプ｡ 

00:28.640 --> 00:30.190
さて､ それは何でしょう？

00:30.190 --> 00:37.270
先ほど書いたadd関数に戻りましょう､ それをコピーしてappに移動します｡

00:37.270 --> 00:37.270
ツ｡ 

00:37.270 --> 00:39.190
そのコメントをここで解消して､ ここでaddで､

00:39.190 --> 00:44.170
ベーシックを閉じましょう｡ tsで､ そのエラーを解消するようにしました｡

00:44.170 --> 00:49.920
このaddでは､ もっと柔軟に対応できるようにしたいと思っています｡

00:49.920 --> 00:52.570
showResultとfraseも､

00:52.570 --> 00:54.370
いらないので消します｡

00:54.370 --> 00:55.690
そして､ 私がやりたいことは､

00:55.690 --> 00:58.590
結果を計算してそれを返すことだけです｡

00:58.590 --> 01:01.960
でも､ 入力に関しては､ もっと柔軟に対応したいんです｡ 

01:01.960 --> 01:06.045
前回は､ 数字だけを扱うことを確認しました｡ 

01:06.045 --> 01:09.357
では､ 実際にこのコンバインに名前を付けて､

01:09.357 --> 01:13.190
数字と文字列の両方で動作するようにするとしよう｡

01:13.190 --> 01:18.595
このプラス演算子で数値と文字列の両方を結合できることがわかりましたが､

01:18.595 --> 01:21.650
唯一の違いは､ このモジュールの初期にすでに見たように､

01:21.650 --> 01:24.030
一方のシナリオでは結果として数値を返し､

01:24.030 --> 01:30.150
もう一方のシナリオでは結合された文字列を返すことです｡

01:30.150 --> 01:38.963
なぜなら､ 数字や文字列を扱う柔軟な組み合わせの関数が必要なアプリケーションがあるからです｡

01:39.830 --> 01:42.360
そこで､ この入力1､ 入力2にも名前をつけて､

01:42.360 --> 01:47.340
この2つを結合することにします｡

01:47.340 --> 01:49.740
しかし､ もちろん1つの問題があります｡

01:49.740 --> 01:53.180
今は両方のパラメータを数字に設定しています｡

01:53.180 --> 01:58.190
つまり､ 数字を扱うのであれば､ この関数を呼び出すことができる｡

01:58.190 --> 02:01.640
ここで､ combinedAgesという新しい定数を作成するとします｡

02:02.931 --> 02:04.690
そこで､ 30歳と26歳を､

02:04.690 --> 02:09.602
どのようなアプリケーションであれ､ 年齢として組み合わせたり､

02:09.602 --> 02:12.000
渡したりするのです｡

02:12.000 --> 02:15.014
コンソールログcombinedAgesの後にもう一つ､

02:15.014 --> 02:17.240
このファイルをコンパイルして､ このページをリロードすると､

02:17.240 --> 02:22.360
56になるのは､ それほど驚くことではありません｡

02:22.360 --> 02:24.690
だから､ これはうまくいって､ この数字になるんです｡ 

02:24.690 --> 02:28.838
しかし､ 当然ながら､ ここで文字列を作ろうとすると問題が発生する｡

02:28.838 --> 02:31.610
CombinedNamesなど｡ 

02:31.610 --> 02:36.033
ここでMaxとAnnaを組み合わせようとすると､ もちろんこれは文字列なので､

02:37.230 --> 02:44.350
Maxはnumber型に割り当てられないというエラーがすぐに出ます｡

02:44.350 --> 02:47.750
もちろん､ 数値の代わりに文字列を受け取るように変更することもできますが､

02:47.750 --> 02:50.130
その場合､ 最初の関数呼び出しは失敗します｡

02:50.130 --> 02:52.750
そこで､ ユニオン系が役に立つのです｡ 

02:52.750 --> 02:55.692
アプリケーションの中で､ 関数のパラメータや定数､

02:55.692 --> 02:58.810
あるいはどこかで使っている変数など､

02:58.810 --> 03:05.030
2種類の値を受け入れる場所があるとします｡

03:05.030 --> 03:07.410
それなら､ ユニオン系が役に立ちますね｡ 

03:07.410 --> 03:12.690
TypeScriptに「数字でも文字列でもいいよ」と伝えるために､

03:12.690 --> 03:20.660
ここでは数字､ そしてパイプ記号を使い､ もう一方の型も受け付ける｡

03:20.660 --> 03:22.340
そして､ 2種類以上､ 必要な数だけ､

03:22.340 --> 03:25.220
ここで受け付けることができます｡

03:25.220 --> 03:27.050
そこで､ ここでは2つだけ必要なものがあります｡

03:27.050 --> 03:28.880
それは､ アフォード型の割り当てで､

03:28.880 --> 03:31.720
数値か文字列かを選択します｡

03:31.720 --> 03:33.690
ここで､ プラス演算子は文字列または数値､

03:33.690 --> 03:39.120
文字列または数値の型には適用できないというエラーが発生しました｡

03:39.120 --> 03:46.670
というのも､ プラス演算子は数字にも文字列にも使えるからです｡

03:46.670 --> 03:49.600
しかしTypeScriptは､ ここにユニオン型があることを認識するだけで､

03:49.600 --> 03:56.010
ユニオン型の中身は分析せず､ 「そうか､ 複数の型を期待しているんだな」と認識するだけです｡

03:56.010 --> 03:59.460
もしかしたら､ プラス演算子が使えない型も含まれているかもしれないので､

03:59.460 --> 04:01.640
ここで文句を言っておきます｡ 今はありがたいことに､ その問題を回避することができるようになりましたが｡ 

04:01.640 --> 04:05.410
ここで実行時の型チェックを追加して､

04:05.410 --> 04:07.910
input1 の typeof

04:07.910 --> 04:15.170
が数値に等しいかどうか､ input2 の typeof が数値に等しいかどうかを確認し､

04:16.530 --> 04:28.510
この計算をそこに移します｡ もうひとつ改良して､ ロックスコープの関係で､ if チェックで結果を変数として作成して､

04:28.510 --> 04:37.873
関数全体で利用できる変数にして､ 新しい値をそこに代入するだけです｡

04:37.873 --> 04:40.310
では､ ここで2つの数字があるかどうかをチェックします｡ 

04:40.310 --> 04:45.890
したがって､ TypeScriptは､ ここではinput1もinput2も数字であることを認識している｡

04:45.890 --> 04:49.790
では､ ここに他のチェックを追加してみましょう｡ 

04:49.790 --> 04:56.913
そして､ そこでresultをinput1と同じにすることができる｡  tostring で明示的に文字列に変換し､

04:58.550 --> 05:00.570
input2. を文字列にします｡ 

05:00.570 --> 05:02.880
そして､ これはTypeScriptやJavaScriptでも大丈夫です｡

05:02.880 --> 05:05.700
なぜなら､ 2つの文字列を連結することができるからです｡

05:05.700 --> 05:08.220
つまり､ ほとんど同じ計算をしているのですが､

05:08.220 --> 05:15.730
ここでは常に数字を扱い､ ここでは常に文字列を扱うことを明確にして､ その結果を返しているのです｡

05:15.730 --> 05:17.490
そして､ その結合された名前をコンソールログに記録し､

05:17.490 --> 05:20.870
このファイルをコンパイルすると､ このページを再訪したときに､

05:20.870 --> 05:35.090
結合された数字が表示され､ それが単に足された結果としての数字と､ 結合された2つの名前がここに表示されていることがわかります｡

05:35.090 --> 05:36.850
このように､ ユニオン型を使って､

05:36.850 --> 05:43.770
関数やその他のコードで何をするかについて､ より柔軟に対応することができるのです｡

05:43.770 --> 05:45.920
このような実行時の型チェックは､

05:45.920 --> 05:51.230
ユニオン型を使っているときには必ずしも必要ではありませんが､ ユニオン型を使うと､

05:51.230 --> 05:56.350
たとえば受け取るパラメータをより柔軟に設定できるため､ 多くの場合､

05:56.350 --> 06:00.940
ユニオン型が必要になってきます｡

06:00.940 --> 06:05.640
このように､ 関数は複数のタイプの値を扱うことができますが､

06:05.640 --> 06:10.320
取得するタイプによって若干異なる処理を行います｡

06:10.320 --> 06:12.410
そのため､ ユニオン型を扱う際にこのような実行時チェックが必要になることがよくありますが､

06:12.410 --> 06:16.700
常に必要になるわけではありません｡

06:16.700 --> 06:18.490
また､ TypeScriptのプログラムでは､

06:18.490 --> 06:24.060
実行時の型チェックなしでユニオン型を使用できる状況に遭遇することがあるのは確かです｡

06:24.060 --> 06:25.870
本当に書いているロジックによりますね｡ 
