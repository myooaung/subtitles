WEBVTT

00:02.200 --> 00:03.210
Instrutor: Então, vamos começar

00:03.210 --> 00:05.520
com TypeScript e Node. js e para isso, estou essencialmente

00:05.520 --> 00:08.660
em uma nova pasta vazia aqui, apenas alguns arquivos de configuração

00:08.660 --> 00:12.140
ali, e vamos começar muito simples.

00:12.140 --> 00:15.020
Vamos adicionar um aplicativo. ts arquivar aqui.

00:15.020 --> 00:17.370
Você pode nomear o que quiser, é claro.

00:17.370 --> 00:19.180
E aí, vamos escrever algum código que

00:19.180 --> 00:22.220
queremos executar com o Node. js, mas onde queremos

00:22.220 --> 00:24.980
usar o TypeScript.

00:24.980 --> 00:26.350
Um script simples poderia

00:26.350 --> 00:28.910
ser que nós apenas registramos algo no console.

00:28.910 --> 00:30.450
Isto funciona no navegador, mas isto

00:30.450 --> 00:33.350
também funciona com o Node. js.

00:33.350 --> 00:35.840
Agora certifique-se de que você tem Node. js instalados, o que

00:35.840 --> 00:37.220
você definitivamente

00:37.220 --> 00:38.740
deveria ter se você seguisse

00:38.740 --> 00:42.077
esse curso porque o usamos no NPM com Webpack e com muitas

00:42.077 --> 00:43.910
outras ferramentas e bibliotecas

00:43.910 --> 00:46.710
que já instalamos com NPM.

00:46.710 --> 00:48.480
Portanto, você deve ter Nodo. js instalados.

00:48.480 --> 00:50.300
E se você o tiver instalado, você

00:50.300 --> 00:52.130
poderá executar este arquivo

00:52.130 --> 00:54.110
se o compilar em JavaScript.

00:54.110 --> 00:57.000
Portanto, se eu executar o aplicativo tsc. ts, e eu produzo

00:57.000 --> 01:00.360
meu aplicativo. js, portanto, posso

01:00.360 --> 01:02.890
executar isto com o nó e imprimo

01:02.890 --> 01:04.503
algo aqui.

01:06.550 --> 01:08.990
Agora, quando eu apagar o aplicativo. js e eu tentamos

01:08.990 --> 01:11.890
executar o app. ts com nódulo, você

01:11.890 --> 01:13.810
verá algo estranho.

01:13.810 --> 01:15.070
Isto também funciona.

01:15.070 --> 01:18.010
Então, se o nó capaz de executar TypeScript?

01:18.010 --> 01:20.380
Não, não é e isso é realmente importante.

01:20.380 --> 01:23.210
Ele simplesmente não se importa com a extensão do arquivo,

01:23.210 --> 01:25.260
mas o que quer que ele encontre no arquivo

01:25.260 --> 01:27.420
que ele trata como um JavaScript normal e

01:27.420 --> 01:30.180
isto aqui não usa nenhum recurso TypeScript, então ele

01:30.180 --> 01:31.370
funciona.

01:31.370 --> 01:34.340
Isso muda se acrescentarmos conteúdo diferente aqui.

01:34.340 --> 01:36.400
Digamos que em vez disso temos uma variável de idade,

01:36.400 --> 01:37.370
que é um número, e então

01:37.370 --> 01:42.250
aqui eu defino isto para 30, e então eu consolo.

01:42.250 --> 01:42.250
idade dos toros aqui.

01:42.250 --> 01:44.840
Este, é claro, é um código TypeScript válido.

01:44.840 --> 01:46.790
Mas se tentarmos executar isto com o nó,

01:46.790 --> 01:48.370
você verá que obtemos um erro.

01:48.370 --> 01:52.450
Portanto, o nó não é capaz de analisar e compilar TypeScript, ele

01:52.450 --> 01:54.210
apenas trata cada arquivo que

01:54.210 --> 01:56.960
você executa com ele como JavaScript.

01:56.960 --> 01:59.030
E se você não estiver usando nenhum recurso TypeScript

01:59.030 --> 02:01.100
no arquivo, então sim, ele funciona.

02:01.100 --> 02:02.950
Mas se você fizer isso, não vai funcionar.

02:02.950 --> 02:04.920
Você sempre tem que compilar o arquivo

02:04.920 --> 02:06.550
em JavaScript primeiro, então,

02:06.550 --> 02:08.960
para depois executar o arquivo JavaScript, que

02:08.960 --> 02:11.350
só tem código JavaScript válido nele.

02:11.350 --> 02:13.030
Isso é realmente importante de se entender.

02:13.030 --> 02:15.890
O nó não executa TypeScript.

02:15.890 --> 02:20.710
Agora você pode realmente instalar um pacote, o ts-node, que no final lhe dá aquele

02:20.710 --> 02:24.230
compilador TypeScript, combinado com o executável do nó,

02:24.230 --> 02:27.880
você poderia dizer, para que você possa instalar uma ferramenta

02:27.880 --> 02:30.320
globalmente, que você pode usar para rodar

02:30.320 --> 02:34.170
arquivos TypeScript exatamente como este.

02:34.170 --> 02:35.210
Mas, nos bastidores,

02:35.210 --> 02:37.620
ele apenas fará a compilação para você e executará

02:37.620 --> 02:39.440
o código de compilação.

02:39.440 --> 02:42.610
Portanto, basicamente combina o tsc e o nó

02:42.610 --> 02:43.890
em um só passo.

02:43.890 --> 02:46.060
Portanto, é um pacote que você poderia usar,

02:46.060 --> 02:49.150
mas embora isto possa ser bom para desenvolvimento, para

02:49.150 --> 02:52.330
produção, para realmente servir seus arquivos em algum servidor

02:52.330 --> 02:54.850
web, em algum host web, isto provavelmente não

02:54.850 --> 02:56.950
é o ideal, porque ter esta etapa extra de

02:56.950 --> 02:59.910
compilação toda vez que seu código é executado, simplesmente

02:59.910 --> 03:02.160
adiciona um pouco de sobrecarga extra, o que

03:02.160 --> 03:04.370
é bom durante o desenvolvimento, mas que você

03:04.370 --> 03:06.110
provavelmente não quer quando seu

03:06.110 --> 03:07.970
código está pronto para produção e

03:07.970 --> 03:09.890
você realmente quer servi-lo em algum

03:09.890 --> 03:12.090
lugar.

03:12.090 --> 03:13.260
Portanto, neste módulo,

03:13.260 --> 03:15.950
não usaremos o nó ts e não tentaremos executar nenhum

03:15.950 --> 03:18.180
arquivo TypeScript com nó.

03:18.180 --> 03:21.570
Em vez disso, vou mostrar uma configuração que podemos usar para

03:21.570 --> 03:24.520
construir uma aplicação web expressa de nó ou de repouso

03:24.520 --> 03:26.150
API aqui, com apenas TypeScript

03:26.150 --> 03:31.343
e o compilador TypeScript e o nó de baunilha.

03:31.343 --> 03:31.343
js.
