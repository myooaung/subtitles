WEBVTT

00:02.440 --> 00:04.260
-: Antes de sumergirnos en más ejemplos,

00:04.260 --> 00:05.433
vamos a entender el orden

00:05.433 --> 00:07.940
en que se ejecutan los decoradores.

00:07.940 --> 00:10.530
Y aquí, es importante entender que, en primer lugar,

00:10.530 --> 00:11.950
todos ellos se están ejecutando

00:11.950 --> 00:13.710
sin que nosotros instanciemos

00:13.710 --> 00:15.396
este producto.

00:15.396 --> 00:16.600
O, en otras palabras,

00:16.600 --> 00:18.300
si creo un producto aquí

00:18.300 --> 00:19.670
con, nuevo producto,

00:19.670 --> 00:21.233
libro, por 19 dólares,

00:21.233 --> 00:24.563
y creo otro producto aquí, libro dos por, 29

00:24.563 --> 00:26.660
dólares.

00:26.660 --> 00:27.887
esto cumplió sin errores

00:27.887 --> 00:29.970
de mi código decorador aquí no se ejecuta

00:29.970 --> 00:31.730
más a menudo.

00:31.730 --> 00:35.350
Así que no es la instanciación de esta clase lo que importa.

00:35.350 --> 00:36.680
Todos estos decoradores,

00:36.680 --> 00:38.452
no importa si se trata de un decorador

00:38.452 --> 00:41.810
de propiedades, un decorador de métodos, un decorador de accesos

00:41.810 --> 00:43.620
o un decorador de parámetros, todos

00:43.620 --> 00:46.770
se ejecutan cuando se define esta clase, y eso es importante

00:46.770 --> 00:48.930
de entender.

00:48.930 --> 00:50.960
No se trata de decoradores que se ejecutan en

00:50.960 --> 00:53.190
tiempo de ejecución cuando se llama a un método o

00:53.190 --> 00:55.100
cuando se trabaja con una propiedad.

00:55.100 --> 00:57.190
Esto no es lo que hacen.

00:57.190 --> 00:59.360
En cambio, estos decoradores le permiten

00:59.360 --> 01:01.875
hacer un trabajo adicional de configuración entre

01:01.875 --> 01:04.397
bastidores cuando se define una clase.

01:04.397 --> 01:06.590
Volvemos al concepto de metaprogramación

01:06.590 --> 01:08.070
que expliqué antes.

01:08.070 --> 01:10.200
Esa es la idea detrás de los decoradores

01:10.200 --> 01:12.410
o ese es su caso de uso principal.

01:12.410 --> 01:15.520
No son escuchadores de eventos que añades a algo para que cuando

01:15.520 --> 01:17.100
trabajes con una propiedad puedas

01:17.100 --> 01:18.490
ejecutar algún código.

01:18.490 --> 01:19.740
Puedes hacer que algo

01:19.740 --> 01:21.069
así funcione con decoradores

01:21.069 --> 01:23.740
en realidad, pero ajustando y editando algo

01:23.740 --> 01:24.977
entre bastidores, pero

01:24.977 --> 01:26.756
el decorador en sí mismo es sólo

01:26.756 --> 01:29.710
una función que se ejecuta cuando tu clase está definida,

01:29.710 --> 01:35.010
cuando tu (murmullos) y entonces puedes usar el decorador para hacer algo de trabajo

01:35.010 --> 01:37.460
entre bastidores, para luego configurar

01:37.460 --> 01:39.890
algún código que debería ejecutarse cada

01:39.890 --> 01:43.660
vez que esto es llamado.

01:43.660 --> 01:47.310
Para añadir metadatos adicionales o almacenar algunos datos sobre una

01:47.310 --> 01:50.030
propiedad en algún otro lugar de su proyecto o en su biblioteca,

01:50.030 --> 01:51.696
que está creando.

01:51.696 --> 01:54.075
Esto es para lo que puedes usar los decoradores,

01:54.075 --> 01:55.756
y ese es todo el patrón que verás

01:55.756 --> 01:58.420
cuando ahora te muestre estos ejemplos de

01:58.420 --> 02:00.320
lo que puedes construir con los

02:00.320 --> 02:02.290
decoradores.

02:02.290 --> 02:04.740
Están añadiendo una funcionalidad extra

02:04.740 --> 02:06.200
entre bastidores que a veces

02:06.200 --> 02:08.060
puede ejecutarse cuando haces

02:08.060 --> 02:10.530
algo con tu clase o con tu método, pero que

02:10.530 --> 02:11.600
también puede hacer

02:11.600 --> 02:14.313
cosas totalmente diferentes.

02:15.240 --> 02:17.860
Todo esto es importante para nuestro ejemplo

02:17.860 --> 02:21.320
de persona de antes con el decorador de plantillas.

02:21.320 --> 02:22.980
Esto no añade esta plantilla cada

02:22.980 --> 02:25.160
vez que instanciamos una persona aquí.

02:25.160 --> 02:27.890
Lo añade siempre que definimos esta clase.

02:27.890 --> 02:29.820
Tendríamos que añadir una lógica extra dentro

02:29.820 --> 02:31.650
de nuestra función decoradora para cambiar

02:31.650 --> 02:33.140
este comportamiento.

02:33.140 --> 02:35.980
Y tal vez sólo almacenar esta plantilla en alguna

02:35.980 --> 02:38.441
otra estructura de datos de nuestro proyecto

02:38.441 --> 02:41.380
que luego la ficha en cada vez que hacemos crear

02:41.380 --> 02:43.650
una nueva persona aquí.

02:43.650 --> 02:45.278
Así que, básicamente, sólo configuramos

02:45.278 --> 02:47.240
esto cuando definimos la clase, pero luego

02:47.240 --> 02:48.400
sólo lo almacenamos detrás

02:48.400 --> 02:49.890
de las escenas internamente y luego

02:49.890 --> 02:51.170
podemos usarlo cuando queremos

02:51.170 --> 02:52.350
usarlo.

02:52.350 --> 02:54.160
En este momento, siempre lo hacemos

02:54.160 --> 02:55.380
cuando definimos esta clase,

02:55.380 --> 02:57.610
no cuando se crea una nueva instancia.

02:57.610 --> 02:59.570
Así es como se ejecutan los decoradores

02:59.570 --> 03:00.403
y como dije, ahora

03:00.403 --> 03:01.940
les mostraré un par de ejemplos

03:01.940 --> 03:04.504
donde aprovechamos los decoradores en general

03:04.504 --> 03:06.900
y su tiempo de ejecución para hacer algunas cosas

03:06.900 --> 03:08.883
bonitas con ellos.
