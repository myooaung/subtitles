WEBVTT

00:02.140 --> 00:03.620
-: Continuiamo a esercitarci

00:03.620 --> 00:06.220
con questi tipi generici, perché so che possono

00:06.220 --> 00:08.305
essere strani da capire; alla fine, però,

00:08.305 --> 00:09.970
sono molto semplici.

00:09.970 --> 00:12.180
Creiamo una funzione generica

00:12.180 --> 00:14.810
media, conta e stampa.

00:14.810 --> 00:19.810
Ora questa funzione dovrebbe accettare qualche argomento, qualche parametro.

00:20.330 --> 00:23.470
Chiamiamolo elemento, ma il nome dipende da

00:23.470 --> 00:26.530
voi, che dovrebbe essere di tipo generico.

00:26.530 --> 00:28.340
Perché non mi interessa davvero il

00:28.340 --> 00:30.380
tipo, almeno sotto certi aspetti.

00:30.380 --> 00:33.400
Supponiamo di avere un tipo generico in questa funzione

00:33.400 --> 00:35.800
e che il nostro parametro sia di quel tipo.

00:35.800 --> 00:38.350
Questo è, tra l'altro, tutto ciò che è tipico dei tipi generici.

00:38.350 --> 00:40.030
Se si dispone di una funzione generica,

00:40.030 --> 00:42.180
spesso il parametro sarà di quel tipo.

00:42.180 --> 00:43.890
Non è necessario, ma spesso è così

00:43.890 --> 00:45.890
che si lavora con le funzioni generiche,

00:45.890 --> 00:46.920
come si vedrà man mano

00:46.920 --> 00:49.080
che si fa esperienza con esse.

00:49.080 --> 00:50.670
Quindi abbiamo count e print

00:50.670 --> 00:52.350
con il nostro tipo generico

00:52.350 --> 00:54.430
e element è di questo tipo.

00:54.430 --> 00:56.500
Ora, ciò che voglio restituire

00:56.500 --> 01:00.300
è una tupla nienda con due elementi, il primo dei

01:00.300 --> 01:03.190
quali dovrebbe essere il mio elemento

01:03.190 --> 01:07.070
e il secondo una stringa di descrizione.

01:07.070 --> 01:10.160
Forse lo chiamiamo conteggio e lo descriviamo, quindi.

01:10.160 --> 01:15.160
Quindi qui ho il mio testo di descrizione e qui dirò che

01:15.410 --> 01:19.890
non ha valore e voglio usarlo se passiamo un elemento

01:19.890 --> 01:22.620
che non ha lunghezza.

01:22.620 --> 01:25.570
L'idea di count e describe è che si possa passare

01:25.570 --> 01:29.040
un array o una stringa e ottenere la quantità di caratteri

01:29.040 --> 01:32.040
o elementi in quella stringa o in quell'array.

01:32.040 --> 01:34.040
Quindi, se abbiamo una stringa

01:34.040 --> 01:37.440
vuota o un array vuoto, voglio usare il valore got no,

01:37.440 --> 01:42.440
ma se verifico che la lunghezza del punto dell'elemento è maggiore di zero,

01:43.210 --> 01:46.170
allora voglio impostare il testo della descrizione

01:47.430 --> 01:52.430
a got più la lunghezza del punto dell'elemento più gli elementi.

01:55.850 --> 01:58.100
Si potrebbe essere ancora più specifici

01:58.100 --> 02:03.100
e controllare se la lunghezza è uguale a uno e quindi dire got un elemento,

02:06.590 --> 02:11.590
altrimenti se la lunghezza dell'elemento è maggiore di uno, abbiamo un testo

02:11.720 --> 02:13.750
di descrizione uguale a got più

02:13.750 --> 02:21.173
gli elementi della lunghezza dell'elemento, in modo da ottenere la forma plurale corretta.

02:22.850 --> 02:25.220
Ora qui, il testo di descrizione è presente per il secondo elemento

02:25.220 --> 02:27.040
e ritorna qui. Qui si vedono già

02:27.040 --> 02:29.480
tipi di lamentele sulla lunghezza.

02:29.480 --> 02:32.350
Perché non è chiaro che l'elemento abbia una lunghezza.

02:32.350 --> 02:34.770
Quindi forse dovremmo chiarire che è così.

02:34.770 --> 02:38.430
Potremmo farlo creando una nuova interfaccia o un tipo personalizzato

02:38.430 --> 02:41.060
con la parola chiave type e qui sceglierò un'interfaccia

02:41.060 --> 02:44.750
che chiamerò lengthy e che alla fine garantisce che abbiamo un

02:44.750 --> 02:47.440
oggetto con una proprietà length che alla fine

02:47.440 --> 02:50.820
dovrebbe dare un numero.

02:50.820 --> 02:52.870
E poi possiamo impostare un vincolo e

02:52.870 --> 02:54.740
dire che T estende la lunghezza.

02:54.740 --> 02:57.710
Quindi sappiamo che qualsiasi cosa otteniamo, avremo una proprietà

02:57.710 --> 03:01.053
length e un array o una stringa avranno una proprietà length.

03:02.030 --> 03:07.030
Ora, posso registrare il conteggio e la descrizione della console

03:07.500 --> 03:11.240
e passare, ad esempio, ciao a tutti.

03:11.240 --> 03:14.280
Questo funziona perché una stringa ha una proprietà di lunghezza.

03:14.280 --> 03:15.290
Non è un oggetto.

03:15.290 --> 03:17.310
È una stringa, ma dietro le quinte,

03:17.310 --> 03:19.980
Javascript la converte in un oggetto al volo

03:19.980 --> 03:21.720
e aggiunge la proprietà length

03:21.720 --> 03:23.940
quando serve. Possiamo quindi chiamarlo

03:23.940 --> 03:26.960
tranquillamente così. Prima di tutto, restituiamo

03:26.960 --> 03:33.580
un array con un elemento di tipo stringa o di tipo T.

03:33.580 --> 03:33.580
Ora

03:33.580 --> 03:36.060
voglio avere una tupla, quindi sarò più specifico

03:36.060 --> 03:39.110
e imposterò il tipo di ritorno come un array con due elementi

03:39.110 --> 03:41.330
esatti, dove il primo elemento sarà di tipo

03:41.330 --> 03:43.850
T e il secondo di tipo string.

03:43.850 --> 03:46.270
Quindi ora sto solo dicendo che restituiamo

03:46.270 --> 03:49.360
una tupla in cui il primo elemento sarà, beh, qualsiasi

03:49.360 --> 03:52.010
elemento del nostro tipo generico e il secondo

03:52.010 --> 03:54.110
elemento sarà una stringa.

03:54.110 --> 03:56.820
Ora, se lo salviamo, viene ricompilato

03:56.820 --> 04:00.330
senza errori e stampa Ciao, ho nove elementi perché

04:00.330 --> 04:02.330
ci sono nove caratteri.

04:04.320 --> 04:06.890
Potremmo anche chiamarlo con un array

04:06.890 --> 04:09.530
in cui abbiamo sport e cucina, e ora vedrete

04:09.530 --> 04:12.460
che abbiamo due elementi come testo di descrizione,

04:12.460 --> 04:15.990
oppure con un array vuoto, naturalmente, nel qual caso,

04:15.990 --> 04:18.660
se lo salvo, non avremo alcun valore, ma

04:18.660 --> 04:22.500
non potremo chiamarlo, per esempio, con un numero perché

04:22.500 --> 04:24.103
un numero non ha la proprietà

04:24.103 --> 04:28.090
length e quindi non funziona.

04:28.090 --> 04:32.900
Quindi, anche in questo caso, abbiamo la nostra funzione generica.

04:32.900 --> 04:35.043
L'idea è simile alla funzione precedente.

04:35.043 --> 04:38.680
Vogliamo essere poco specifici sul tipo di dati che otteniamo

04:38.680 --> 04:40.540
qui. Non ci interessa se si tratta

04:40.540 --> 04:43.180
di una stringa, di un array o di qualsiasi altra cosa che abbia una

04:43.180 --> 04:45.610
proprietà length. Ci interessa solo che abbia

04:45.610 --> 04:47.930
una proprietà length e poi vogliamo fare qualcosa con

04:47.930 --> 04:49.980
essa, perché ci affidiamo alla proprietà length

04:49.980 --> 04:51.970
nel nostro codice, quindi dobbiamo garantire

04:51.970 --> 04:53.540
che l'abbiamo ottenuta, ma a parte

04:53.540 --> 04:55.370
questo, non abbiamo alcun interesse nel

04:55.370 --> 04:59.490
tipo di dati che stiamo ottenendo.

04:59.490 --> 04:59.490
Non

04:59.490 --> 05:01.820
voglio che sia vincolato a una stringa o a un array e non

05:01.820 --> 05:04.220
voglio creare una serie di sovraccarichi per gestire tutti

05:04.220 --> 05:05.830
i diversi tipi possibili.

05:05.830 --> 05:08.124
Inoltre, non voglio creare un tipo di unione

05:08.124 --> 05:10.970
molto lungo, perché potrei dimenticare i tipi che

05:10.970 --> 05:13.610
hanno una proprietà di lunghezza o, se creo il

05:13.610 --> 05:16.220
mio oggetto con una proprietà di lunghezza, potrei

05:16.220 --> 05:18.640
non permetterlo se limito questo tipo di oggetto

05:18.640 --> 05:21.580
a stringhe, array o simili.

05:21.580 --> 05:23.500
Pertanto, voglio essere più flessibile

05:23.500 --> 05:25.380
e con i tipi generici possiamo esserlo,

05:25.380 --> 05:27.550
non ci interessa il tipo esatto.

05:27.550 --> 05:30.080
Qui, grazie al vincolo, mi interessa

05:30.080 --> 05:33.363
solo che abbia una proprietà di lunghezza.
