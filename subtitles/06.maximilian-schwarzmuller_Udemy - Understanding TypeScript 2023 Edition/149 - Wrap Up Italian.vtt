WEBVTT

00:02.350 --> 00:04.720
-: E questo è tutto per i moduli.

00:04.720 --> 00:08.850
L'uso dei moduli è una caratteristica molto utile e importante, perché

00:08.850 --> 00:11.130
consente di scrivere codice più manutenibile

00:11.130 --> 00:14.550
e gestibile. Avere tutto in un unico file è

00:14.550 --> 00:16.360
un pasticcio e non è un'opzione

00:16.360 --> 00:19.360
per nulla, se non per progetti molto piccoli.

00:19.360 --> 00:22.350
L'uso degli spazi dei nomi o dei moduli ES

00:22.350 --> 00:24.710
è un'alternativa migliore.

00:24.710 --> 00:27.620
In quanto si assicura che ogni file sia relativamente

00:27.620 --> 00:30.780
piccolo e che quindi rimanga gestibile.

00:30.780 --> 00:33.470
E comunque si finisce per avere l'intera, grande

00:33.470 --> 00:36.690
applicazione che si desidera avere alla fine.

00:36.690 --> 00:38.580
Ora, quando si tratta di questi

00:38.580 --> 00:42.883
due approcci, Namespaces e moduli ES, la raccomandazione chiara è quella

00:42.883 --> 00:46.520
dei moduli ES, perché si ottiene una maggiore sicurezza dei

00:46.520 --> 00:48.910
tipi e si garantisce che ogni file debba

00:48.910 --> 00:52.210
specificare chiaramente ciò che vuole.

00:52.210 --> 00:54.270
Con gli spazi dei nomi, era sufficiente

00:54.270 --> 00:56.280
che un file importasse qualcosa di cui

00:56.280 --> 00:58.350
aveva bisogno anche un altro file.

00:58.350 --> 00:59.970
Se il file che ha importato

00:59.970 --> 01:02.230
la cosa viene rimosso, anche l'altro

01:02.230 --> 01:05.640
file si rompe, senza che l'utente se ne accorga.

01:05.640 --> 01:08.774
Almeno, senza che l'utente se ne accorga prima di eseguire il codice.

01:08.774 --> 01:11.340
Utilizzate quindi i moduli ES.

01:11.340 --> 01:14.250
Usate gli spazi dei nomi in progetti più piccoli

01:14.250 --> 01:18.100
o se per qualche motivo non potete usare i moduli ES e non potete

01:18.100 --> 01:19.970
usare un altro bundler che traduca

01:19.970 --> 01:24.290
tali moduli. Al codice non modulo, che funziona

01:24.290 --> 01:26.360
con tutti i browser.

01:26.360 --> 01:30.070
Ma a parte questo, si usano davvero i moduli, i moduli ES.

01:30.070 --> 01:31.748
Quello che ho appena detto è importante.

01:31.748 --> 01:34.828
Questi moduli, nel modo in cui li usiamo, funzionano

01:34.828 --> 01:37.620
solo nei browser moderni.

01:37.620 --> 01:39.670
Perché ci affidiamo al browser per importare

01:39.670 --> 01:42.640
tutti questi file. Giusto?

01:42.640 --> 01:44.675
Ora, naturalmente vogliamo costruire

01:44.675 --> 01:48.940
applicazioni con typescript, che funzionino anche in tutti i browser.

01:48.940 --> 01:52.090
Internet Explorer 9, ad esempio.

01:52.090 --> 01:54.130
In questo caso non sarebbe supportato.

01:54.130 --> 01:55.730
Questa sintassi non è supportata.

01:55.730 --> 01:57.410
Pertanto, l'applicazione non può essere eseguita in quel punto.

01:57.410 --> 01:59.160
Potremmo anche utilizzare altre

01:59.160 --> 02:01.280
funzioni non supportate, ma principalmente

02:01.280 --> 02:03.840
questa non è supportata da tutti i browser.

02:03.840 --> 02:06.250
Quindi, per farlo funzionare in tutti i browser, possiamo

02:06.250 --> 02:09.283
usare uno strumento di bundling. Possiamo usare Webpack, ad esempio.

02:09.283 --> 02:12.431
Per riunire il tutto in un unico file JavaScript.

02:12.431 --> 02:15.810
In questo modo, durante lo sviluppo abbiamo un'esperienza di

02:15.810 --> 02:19.060
digitazione forte e su più file, ma quando spediamo il nostro

02:19.060 --> 02:21.310
codice abbiamo in realtà un solo file.

02:21.310 --> 02:23.600
Il vantaggio di spedire un solo file

02:23.600 --> 02:25.676
invece di tutti quelli che abbiamo

02:25.676 --> 02:28.177
qui, è che assicuriamo anche che il browser

02:28.177 --> 02:31.181
non debba scaricare tanti file.

02:31.181 --> 02:33.630
Perché ogni file che deve essere scaricato è un viaggio

02:33.630 --> 02:37.010
di andata e ritorno in più. Nella scheda Rete degli strumenti di

02:37.010 --> 02:38.510
sviluppo è possibile vederlo.

02:38.510 --> 02:40.650
L'area in cui si vede questo grafico a cascata

02:40.650 --> 02:42.230
e si vede questo piccolo riquadro

02:42.230 --> 02:44.520
bianco all'inizio di ogni blocco.

02:44.520 --> 02:46.380
Questo è fondamentalmente il tempo di configurazione

02:46.380 --> 02:48.506
necessario per impostare la richiesta HDP.

02:48.506 --> 02:51.807
Quindi, anche se i file che stiamo scaricando sono molto piccoli,

02:51.807 --> 02:54.700
come si può notare, questo richiede comunque un po' di tempo

02:54.700 --> 02:56.900
a causa di tutte le impostazioni aggiuntive

02:56.900 --> 02:59.100
ridondanti, per ogni richiesta di HDP.

02:59.100 --> 03:02.330
Quindi fare meno richieste è una buona idea in ogni caso, indipendentemente

03:02.330 --> 03:04.640
dal supporto del browser.

03:04.640 --> 03:08.370
Quindi, per queste due ragioni, il supporto del browser e la riduzione delle richieste,

03:08.370 --> 03:11.000
daremo un'occhiata al bundling, con Webpack, nella prossima

03:11.000 --> 03:12.453
sezione del corso.
