WEBVTT

00:00.000 --> 00:02.410
(diam) -: Jadi kita sudah melihat bagaimana

00:02.410 --> 00:04.190
TypeScript dapat membantu kita

00:04.190 --> 00:06.200
selama pengembangan.

00:06.200 --> 00:10.560
Sekarang, kita juga tahu bahwa ada tipe angka dalam JavaScript.

00:10.560 --> 00:14.010
Dan kita bisa melihatnya dengan tipe operator bawaan.

00:14.010 --> 00:15.781
Ini sekarang tidak spesifik TypeScript,

00:15.781 --> 00:17.560
ini adalah operator bawaan dan kata

00:17.560 --> 00:20.420
kunci yang didukung oleh JavaScript.

00:20.420 --> 00:22.910
Kita bisa menggunakannya untuk mendapatkan tipe dari nilai tertentu.

00:22.910 --> 00:27.050
Jadi di sini, kita bisa konsol jenis kunci nomor satu.

00:27.050 --> 00:27.992
Dan apa yang akan kita lihat

00:27.992 --> 00:30.780
jika kita melakukan itu adalah segera setelah kita mengkompilasi ini, sehingga

00:30.780 --> 00:32.623
kita menjalankan kode yang diperbarui.

00:33.780 --> 00:37.040
Di sini, kita mencetak angka ke konsol.

00:37.040 --> 00:39.330
Sekarang kita melakukan itu, berkat output ini di

00:39.330 --> 00:41.180
sini, dan berkat jenis operator dan dalam

00:41.180 --> 00:43.770
Vanilla JavaScript, tanpa TypeScript, kita dapat menggunakannya

00:43.770 --> 00:46.710
untuk selalu meningkatkan fungsi kita di sini.

00:46.710 --> 00:51.500
Kita bisa mengecek apakah tipe bilangan sama dengan angka.

00:51.500 --> 00:54.300
Maaf, tipe n1 yang saya maksud, jika itu

00:54.300 --> 00:56.350
sama dengan angka, dan kita

00:56.350 --> 01:00.710
juga bisa memeriksa apakah tipe n2 sama dengan angka.

01:00.710 --> 01:02.349
dan hanya melakukan operasi kita

01:02.349 --> 01:05.220
di sini jika itu adalah kesalahan yang dilemparkan

01:05.220 --> 01:07.860
atau melakukan yang sebaliknya dan memeriksa

01:07.860 --> 01:10.820
apakah itu tidak sama, atau jika n2 tidak sama.

01:10.820 --> 01:13.230
Dan jika salah satu dari keduanya bukan angka,

01:13.230 --> 01:16.360
maka kita bisa melemparkan error baru di mana kita mengatakan,

01:16.360 --> 01:19.690
input yang salah. Ini sebenarnya akan menjadi cara

01:19.690 --> 01:22.300
non TypeScript untuk memastikan bahwa kita tidak

01:22.300 --> 01:25.700
bisa memanggil fungsi ini dengan string di sini.

01:25.700 --> 01:26.760
Jika saya melakukan ini sekarang,

01:26.760 --> 01:29.060
dan saya mengkompilasi ulang, kita mendapatkan kesalahan TypeScript,

01:29.060 --> 01:30.830
tetapi mari kita abaikan itu untuk saat ini.

01:30.830 --> 01:31.730
Jika kita menjalankan

01:31.730 --> 01:33.100
ulang ini, kita mendapatkan input

01:33.100 --> 01:34.940
yang salah, yang kita lemparkan sendiri.

01:34.940 --> 01:38.080
Jadi sekarang kita mengeraskan disfungsi dalam JavaScript,

01:38.080 --> 01:39.930
gagal pada saat runtime, tetapi gagal

01:39.930 --> 01:41.970
di sini mungkin lebih baik daripada menunjukkan

01:41.970 --> 01:44.950
output yang salah yang kita miliki sebelumnya.

01:44.950 --> 01:47.640
Jadi, ini akan menjadi cara untuk memeriksa input hanya

01:47.640 --> 01:48.715
dalam JavaScript.

01:48.715 --> 01:50.640
Anda tidak memerlukan TypeScript untuk itu.

01:50.640 --> 01:53.200
Itu adalah kode JavaScript biasa.

01:53.200 --> 01:54.033
Tetapi tentu saja, pendekatan

01:54.033 --> 01:55.160
ini memiliki kelemahan.

01:55.160 --> 01:57.160
Terkadang itu adalah hal yang benar untuk dilakukan.

01:57.160 --> 02:01.440
Terkadang Anda hanya bisa memvalidasi input tertentu pada saat runtime.

02:01.440 --> 02:03.150
Namun kekurangannya adalah di sini,

02:03.150 --> 02:05.480
kita memeriksa sesuatu yang sebenarnya dapat

02:05.480 --> 02:08.950
kita hindari selama pengembangan dengan TypeScript.

02:08.950 --> 02:11.180
Jadi ya, kita melempar kesalahan.

02:11.180 --> 02:14.210
Dan dalam aplikasi kita, kita mungkin telah membangun langkah-langkah

02:14.210 --> 02:16.860
yang kemudian dapat kembali ke beberapa perilaku lain untuk

02:16.860 --> 02:19.080
menyelamatkan aplikasi yang sedang berjalan.

02:19.080 --> 02:20.750
Tetapi tetap saja, kita melemparkan

02:20.750 --> 02:24.180
error, yang sebenarnya tidak perlu terjadi sejak awal.

02:24.180 --> 02:27.350
Kita bisa mencegahnya dengan TypeScript.

02:27.350 --> 02:28.830
Dan di sini, kita benar-benar melihat

02:28.830 --> 02:30.400
perbedaan antara JavaScript dan TypeScript,

02:30.400 --> 02:31.450
dalam hal tipe.

02:31.450 --> 02:33.750
JavaScript diketik secara dinamis, yang berarti

02:33.750 --> 02:35.610
tidak masalah jika kita memiliki variabel

02:35.610 --> 02:36.880
yang pada awalnya mungkin

02:36.880 --> 02:39.100
menyimpan angka, di mana kita kemudian menetapkan

02:39.100 --> 02:41.600
string ke dalamnya.

02:41.600 --> 02:44.500
Dan itulah mengapa kita harus mengetik off operator sehingga

02:44.500 --> 02:48.024
kita dapat memeriksa tipe saat ini dari sesuatu pada saat runtime

02:48.024 --> 02:50.124
jika kita memiliki beberapa kode yang bergantung

02:50.124 --> 02:52.267
pada tipe tertentu.

02:52.267 --> 02:53.570
TypeScript di sisi lain,

02:53.570 --> 02:55.094
diketik secara statis,

02:55.094 --> 02:58.480
yang berarti kita mendefinisikan jenis variabel dan

02:58.480 --> 03:01.740
parameter berakhir selama pengembangan, mereka

03:01.740 --> 03:04.980
tidak tiba-tiba berubah selama runtime.

03:04.980 --> 03:05.813
Sekarang, tentu

03:05.813 --> 03:09.090
saja, karena TypeScript dikompilasi ke JavaScript, mereka

03:09.090 --> 03:10.660
secara teoritis bisa.

03:10.660 --> 03:12.510
Tetapi jika kita menggunakan TypeScript,

03:12.510 --> 03:13.790
dan kita menulis kode di mana

03:13.790 --> 03:17.530
kita tiba-tiba menetapkan tipe data baru ke dalam variabel, di mana sebelumnya

03:17.530 --> 03:19.840
kita mengatakan bahwa ini harus berupa angka,

03:19.840 --> 03:22.900
misalnya, dan sekarang kita menetapkan string, maka kita

03:22.900 --> 03:25.810
mendapatkan kesalahan selama pengembangan, sehingga

03:25.810 --> 03:27.480
kita dipaksa untuk jelas mengenai

03:27.480 --> 03:29.670
jenisnya, sesuatu yang bisa atau tidak bisa

03:29.670 --> 03:32.120
dipegang.

03:32.120 --> 03:33.710
Itulah perbedaannya di sini.

03:33.710 --> 03:36.620
Jadi kita tidak benar-benar ingin menggunakan implementasi

03:36.620 --> 03:38.330
atau solusi seperti itu, jika kita

03:38.330 --> 03:40.810
bisa menghindarinya dengan TypeScript.

03:40.810 --> 03:42.200
Namun, penting untuk diketahui

03:42.200 --> 03:43.890
bahwa JavaScript tentu saja

03:43.890 --> 03:46.400
tahu tentang konsep tipe.

03:46.400 --> 03:48.740
Ia tahu tentang beberapa tipe seperti

03:48.740 --> 03:50.640
angka, string dan Boolean.

03:50.640 --> 03:52.300
Tetapi menggunakan itu selalu berarti

03:52.300 --> 03:53.540
bahwa kita hanya bisa gagal pada

03:53.540 --> 03:56.400
saat runtime, bukan selama pengembangan, yang merupakan tempat

03:56.400 --> 03:58.700
yang lebih baik bagi kita sebagai pengembang.

03:58.700 --> 04:01.550
Hal ini memungkinkan kami untuk memperbaiki bug lebih awal.

04:01.550 --> 04:02.840
Selain itu, JavaScript

04:02.840 --> 04:05.410
hanya mengetahui beberapa jenis.

04:05.410 --> 04:07.170
Seperti yang akan Anda pelajari sepanjang kursus ini.

04:07.170 --> 04:10.540
TypeScript mengetahui lebih banyak tipe daripada JavaScript.

04:10.540 --> 04:14.450
Jadi, pengecekan runtime benar-benar tidak sefleksibel atau tidak

04:14.450 --> 04:18.030
sekuat apa yang dapat kita lakukan dengan TypeScript.

04:18.030 --> 04:19.490
Dan untuk semua alasan ini, pendekatan

04:19.490 --> 04:20.660
ini sebenarnya bukan pendekatan

04:20.660 --> 04:22.550
yang ingin kita gunakan di sini.

04:22.550 --> 04:26.540
Kadang-kadang bisa berguna untuk mendapatkan tipe pada saat runtime.

04:26.540 --> 04:28.790
Tetapi kadang-kadang, seperti dalam contoh ini,

04:28.790 --> 04:31.740
jauh lebih baik untuk mendapatkannya selama pengembangan.

04:31.740 --> 04:34.280
Satu-satunya hal penting yang perlu dikenali tentu

04:34.280 --> 04:36.070
saja, hanya saja dengan TypeScript,

04:36.070 --> 04:38.670
Anda hanya bisa mendukung selama pengembangan, bukan

04:38.670 --> 04:39.596
saat runtime, karena

04:39.596 --> 04:41.610
fitur dan pemeriksaan TypeScript ini tidak

04:41.610 --> 04:44.650
dibangun ke dalam mesin JavaScript sehingga logika tidak dapat

04:44.650 --> 04:47.590
dieksekusi di browser, hanya dapat dieksekusi selama pengembangan

04:47.590 --> 04:51.223
saat Anda mengkompilasi kode Anda.
