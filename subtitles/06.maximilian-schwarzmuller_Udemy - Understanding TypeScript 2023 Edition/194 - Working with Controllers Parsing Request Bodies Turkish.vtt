WEBVTT

00:02.170 --> 00:03.860
Eğitmen: Şimdi bazı rotaları kaydettiğimize göre,

00:03.860 --> 00:05.630
bu rotalar için bazı mantıklar ekleyelim.

00:05.630 --> 00:07.730
Bunun için bir kontrolörler klasörü ekleyeceğim.

00:07.730 --> 00:08.750
Bu bir zorunluluk değil,

00:08.750 --> 00:11.550
ancak buradaki mantığımı kontrolörlere ve rotaları da rotalar

00:11.550 --> 00:13.650
klasörüne bölmek istiyorum.

00:13.650 --> 00:16.740
Kontrolörlere de bir yapılacaklar listesi ekleyeceğim. ts dosyası ve bu artık rotalarımızın

00:16.740 --> 00:19.230
içinden işaret etmek istediğimiz denetleyici

00:19.230 --> 00:21.990
işlevlerini tutacak.

00:21.990 --> 00:25.120
Burada, dışa aktaracağım bir işleve ihtiyacım var ve

00:25.120 --> 00:27.220
bunu bir ok işlevi olarak oluşturacağım,

00:27.220 --> 00:29.170
ancak bu bir zorunluluk değil ve buna

00:29.170 --> 00:31.290
createTodo adını vereceğim ve bu, express'teki

00:32.420 --> 00:34.510
her ara katman işlevinde aldığınız

00:34.510 --> 00:36.720
bu tipik parametreleri, bir isteği, bir

00:36.720 --> 00:38.830
yanıtı ve bir sonraki işlevi alacak

00:38.830 --> 00:41.297
bir işlevdir.

00:41.297 --> 00:44.550
Ve az önce türleri nereden alabileceğimizi gördük.

00:44.550 --> 00:47.190
Express'ten request, response ve next

00:47.190 --> 00:50.460
fonksiyonlarını içe aktarabiliriz.

00:50.460 --> 00:52.800
Bu bize o tipleri ithal ediyor.

00:52.800 --> 00:54.910
Daha sonra onları buraya ekleyebiliriz.

00:54.910 --> 00:57.230
Şimdi, hata işleme ara yazılımında da yaptığımız

00:57.230 --> 00:59.980
gibi tüm bu türleri her zaman buraya eklemek zahmetli

00:59.980 --> 01:01.300
olabilir.

01:01.300 --> 01:03.750
İşe yarıyor ama can sıkıcı olabiliyor.

01:03.750 --> 01:05.190
Yani bir kısayol var.

01:05.190 --> 01:08.220
Tüm bu parametrelerin türlerini ayarlamak yerine,

01:08.220 --> 01:11.160
TypeScript'e bu createTodo sabitinde hangi tür

01:11.160 --> 01:14.610
işlevi saklamak istediğimizi söyleyebilir ve ardından

01:14.610 --> 01:16.260
express'ten RequestHandler

01:16.260 --> 01:19.530
türünü içe aktarabilir ve ardından buradaki createTodo

01:19.530 --> 01:24.340
öğesini RequestHandler türüne ayarlayabiliriz.

01:24.340 --> 01:28.780
Ve şimdi TypeScript'in burada bir isteğimiz olduğunu, burada bir yanıtımız olduğunu ve

01:28.780 --> 01:30.560
burada bir sonraki işlevimiz olduğunu

01:30.560 --> 01:32.590
bildiğini görüyorsunuz, çünkü RequestHandler'ımız

01:32.590 --> 01:35.730
şöyle görünecek şekilde tanımlanmıştır.

01:35.730 --> 01:38.080
İlk parametrenin istek, ikinci parametrenin

01:38.080 --> 01:40.160
yanıt ve üçüncü parametrenin bir

01:40.160 --> 01:42.030
sonraki işlev olduğu üç parametreli

01:42.030 --> 01:44.810
bir işlevdir.

01:44.810 --> 01:47.313
Böylece buradaki kurulum basitleştirilebilir.

01:48.195 --> 01:49.380
RequestHandler elbette

01:49.380 --> 01:51.360
her zaman kullanılabilir çünkü express

01:51.360 --> 01:52.570
için türleri yükledik ve

01:52.570 --> 01:55.270
bu nedenle bu içe aktarmayı buraya ekleyebiliriz.

01:55.270 --> 01:57.940
Burada sadece bir türü içe aktardığımız için JavaScript'e

01:57.940 --> 01:59.960
derlendiğinde bu içe aktarmanın her zaman

01:59.960 --> 02:02.300
ortadan kalkacağını unutmayın.

02:02.300 --> 02:05.030
Bu, yürütülecek herhangi bir kodu içe aktarmaz.

02:05.030 --> 02:06.930
Sadece bir türü içe aktarıyor.

02:06.930 --> 02:08.650
Ve bu nedenle, derleme sırasında

02:08.650 --> 02:11.290
kaldırılacaktır çünkü bu normal JavaScript'te

02:11.290 --> 02:15.860
çalıştığında gerekli olacak hiçbir şey eklememektedir.

02:15.860 --> 02:16.693
Bununla birlikte,

02:16.693 --> 02:18.900
createTodo fonksiyonunu elde ettim

02:18.900 --> 02:22.240
ve şimdi neden sadece bellekteki bazı to dos'ları yönetmek

02:22.240 --> 02:25.530
için buraya bir TODOS dizisi eklemiyoruz?

02:25.530 --> 02:28.310
Bu, sunucumuz yeniden başlatıldığında ortadan kalkacaktır

02:28.310 --> 02:31.460
çünkü sonuçta JavaScript'te bir sabittir.

02:31.460 --> 02:32.293
Elbette burada bir

02:32.293 --> 02:34.770
veritabanıyla konuştuğunuzu da hayal edebilirsiniz,

02:34.770 --> 02:36.360
ancak bunu basit tutmak istiyorum

02:36.360 --> 02:38.630
çünkü bu JavaScript ve TypeScript ile ilgili ve veritabanı

02:38.630 --> 02:41.323
bağlantıları hakkında çok fazla değil.

02:42.390 --> 02:43.790
Burada to dos var ve şimdi

02:43.790 --> 02:47.600
burada gelen bir istek olduğunda yapılacak yeni bir şey oluşturmak

02:47.600 --> 02:49.320
istiyorum ve bu yeni bir nesne

02:49.320 --> 02:51.020
olmalı ve neden bu nesne için

02:51.020 --> 02:55.420
bir blueprint, bir model oluşturmuyoruz?

02:55.420 --> 02:57.640
Bu yüzden bir modeller klasörü ekleyeceğim

02:57.640 --> 02:59.030
ve bu modeller klasörüne

02:59.030 --> 03:04.030
bir yapılacaklar ekleyeceğim. ts dosyasını açın ve burada Todo adını vereceğim ve yapılacakların

03:04.760 --> 03:06.250
nasıl görünmesi gerektiğini tanımladığım

03:06.250 --> 03:08.210
bir sınıfı dışa aktarın.

03:08.210 --> 03:10.330
Burada bir kurucu ekleyebilir ve

03:10.330 --> 03:13.129
ayrıca public gibi bir erişim değiştiricisi

03:13.129 --> 03:16.440
ve ardından diyelim ki string türünde olan ID ve yine

03:16.440 --> 03:19.360
string türünde olan text gibi bir özellik adı

03:19.360 --> 03:21.250
ekleyebileceğimiz bu TypeScript

03:21.250 --> 03:24.050
kısayolunu kullanabiliriz ve ardından TypeScript

03:24.050 --> 03:27.470
otomatik olarak eşit adlara sahip alanlar, özellikler

03:27.470 --> 03:30.130
ekleyecek ve bunu yapmak için sınıfı her

03:30.130 --> 03:32.750
örneklediğimizde bu alanlara kurucuya

03:32.750 --> 03:37.230
aktardığımız değerleri atayacaktır.

03:37.230 --> 03:38.670
Burada bu sözdizimini kullanacağım

03:38.670 --> 03:40.060
ve bu sözdizimini kursun başlarında

03:40.060 --> 03:41.810
zaten öğrenmiştiniz.

03:41.810 --> 03:44.660
Ve şimdi de todos. Burada controller'da,

03:44.660 --> 03:47.893
elbette Todo'yu bir seviye yukarı çıkarak

03:49.020 --> 03:53.403
models/todo'dan içe aktarabilir ve bu türü ve sınıfı şimdi

03:54.530 --> 03:58.800
burada dosyamızda kullanabiliriz.

03:58.800 --> 04:01.320
Ve hem bir tür hem de bir sınıftır çünkü, açıkçası,

04:01.320 --> 04:02.800
bir sınıftır ve her sınıf

04:02.800 --> 04:05.750
otomatik olarak bir tür gibi davranır.

04:05.750 --> 04:08.550
Bu kurs boyunca gördüğünüz şey de buydu.

04:08.550 --> 04:09.750
Şimdi burada, öncelikle

04:09.750 --> 04:11.910
TODOS'un bir yapılacaklar dizisi olacağını

04:11.910 --> 04:13.550
söyleyebiliriz.

04:13.550 --> 04:15.480
Bu ekstra açıklama, to dos eklemeye başladığımızda

04:15.480 --> 04:18.590
veya bu dizideki to dos ile çalışmaya başladığımızda uygun

04:18.590 --> 04:21.410
desteği almamız için zarar vermez.

04:21.410 --> 04:23.610
Ve burada yeni bir to do oluşturduğumda,

04:23.610 --> 04:26.220
şimdi bu sınıfı örnekleyerek oluşturuyorum

04:26.220 --> 04:28.370
ve bir kimlik girmemiz gerekiyor ve

04:28.370 --> 04:32.030
burada Math random toString ile rastgele bir sözde benzersiz

04:32.030 --> 04:34.230
kimlik oluşturacağım.

04:34.230 --> 04:35.270
Bu gerçekten benzersiz değil,

04:35.270 --> 04:36.660
ancak burada yeterince iyi.

04:36.660 --> 04:39.170
Ve şimdi buradaki değer için, elbette

04:39.170 --> 04:41.670
gelen istek gövdesinde almayı beklediğim

04:41.670 --> 04:45.530
bazı metinleri ayarlamak istiyorum.

04:45.530 --> 04:48.823
Bu yüzden metnimi burada, temel olarak istek gövdesinde

04:49.750 --> 04:53.270
almayı bekliyorum. metin, böylece metni burada

04:53.270 --> 04:56.280
bir değer olarak ayarlayabilirim.

04:56.280 --> 04:57.113
Şimdi, bu çalışır,

04:57.113 --> 04:59.640
ancak lütfen bunun yalnızca TypeScript'in bunun herhangi

04:59.640 --> 05:02.320
bir türde olduğunu görmesi nedeniyle çalıştığını görün.

05:02.320 --> 05:04.420
Bunun bir dize olduğunu bilmez.

05:04.420 --> 05:05.510
Ve bilemez, çünkü

05:05.510 --> 05:08.390
TypeScript hangi verilerin gelen isteklerimizin

05:08.390 --> 05:11.140
bir parçası olacağını nasıl bilebilir?

05:11.140 --> 05:12.430
Bu açık değil.

05:12.430 --> 05:14.260
Aldığımız taleplerin içinde

05:14.260 --> 05:17.620
ne olacağını hiçbir yerde belirtmiyoruz.

05:17.620 --> 05:19.270
Şimdi, bunu nasıl geliştirebiliriz?

05:19.270 --> 05:21.780
Örneğin, tiplemeyi kullanabiliriz.

05:21.780 --> 05:23.660
Belirli bir türü biliyorsanız tip

05:23.660 --> 05:26.090
atama her zaman harika bir çözümdür, ancak TypeScript

05:26.090 --> 05:27.360
bunu yapmaz.

05:27.360 --> 05:30.440
Burada, istek gövdesinde, metne erişmeden önce, bunu

05:30.440 --> 05:32.650
bir string olan text özelliğine sahip bir

05:32.650 --> 05:34.900
nesne olarak typecast edebiliriz.

05:34.900 --> 05:36.920
Bu uygulamayı inşa ettiğimiz için, gelen

05:36.920 --> 05:40.320
taleplerimizde ne olmasını beklediğimizi biliyoruz.

05:40.320 --> 05:42.750
Dolayısıyla, gelen istek gövdesinde bir metin özelliği

05:42.750 --> 05:44.166
olacağını bildiğimiz için, onu

05:44.166 --> 05:46.630
böyle bir nesne olarak atayabiliriz.

05:46.630 --> 05:51.480
Ve şimdi burada uygun TypeScript ve ayrıca IDE desteği alıyoruz.

05:51.480 --> 05:53.560
Böylece, yapılacak işlere bir yenisini ekliyoruz.

05:53.560 --> 05:55.470
Şimdi TODOS'a ulaşabilir ve yeni

05:55.470 --> 05:58.280
yapılacakları bu diziye aktarabiliriz.

05:58.280 --> 05:59.330
Ve yine, bu, elbette,

05:59.330 --> 06:01.060
burada yalnızca sabit olarak

06:01.060 --> 06:02.750
ve dolayısıyla yalnızca bellekte

06:02.750 --> 06:05.650
saklanacaktır, çünkü bir veritabanıyla çalışmak

06:05.650 --> 06:08.880
gerçekten doğrudan node veya TypeScript ile değil, veritabanıyla

06:08.880 --> 06:11.170
ilgilidir.

06:11.170 --> 06:14.140
Böylece, burada Todo oluşturma fonksiyonumuz var.

06:14.140 --> 06:16.400
Şimdi yapılacaklar rotalarına gidelim

06:16.400 --> 06:19.070
ve bu denetleyici işlevini içe aktaralım.

06:19.070 --> 06:22.030
Bu nedenle, controllers klasöründen

06:22.030 --> 06:24.000
todos dosyasını içe aktarın

06:24.000 --> 06:26.660
ve create Todo işlevini içe aktarın

06:26.660 --> 06:30.100
ve post rotasında bu işlevi işaret edin, böylece

06:30.100 --> 06:38.390
slash todos slash nothing'i hedefleyen herhangi bir istek createTodo işlevine ulaşır.

06:38.390 --> 06:39.580
Burada infaz etme.

06:39.580 --> 06:40.650
Sadece işaret et.

06:40.650 --> 06:43.890
Sizin için node tarafından çalıştırılacak ve daha sonra çalışan

06:43.890 --> 06:45.883
web sunucunuzda ifade edilecektir.

06:46.880 --> 06:49.630
Şimdi burada bu fonksiyonumuz var.

06:49.630 --> 06:50.900
Yine de işimiz bitmedi.

06:50.900 --> 06:52.290
Denetleyicide, hepimiz

06:52.290 --> 06:54.360
sadece bir yanıt döndürmeliyiz.

06:54.360 --> 06:56.720
Bu yüzden burada örneğin JSON metoduyla

06:56.720 --> 06:59.420
JSON formatında bir yanıt gönderebiliriz,

06:59.420 --> 07:02.300
burada mesaj todo'yu oluşturdu ya da ne isterseniz

07:02.300 --> 07:04.040
diyebiliriz ve belki de sunucu

07:04.040 --> 07:07.770
tarafında eklenen yeni todo'yu ilettiğimiz createdTodo

07:07.770 --> 07:14.490
anahtarımız vardır, böylece istemcide de bunu kullanabiliriz.

07:14.490 --> 07:17.750
Başarılı olduğumuzu ve bir kaynak oluşturulduğunu

07:17.750 --> 07:19.700
belirtmek için burada 201 durum

07:19.700 --> 07:21.793
kodunu da ayarlayabiliriz.

07:22.680 --> 07:24.640
Şimdi burada çıkarmaya çalıştığımız

07:24.640 --> 07:28.500
gövdenin gerçekten var olduğundan emin olmamız gerekiyor.

07:28.500 --> 07:29.770
Ve veri ve uygulama için. ts, gelen

07:29.770 --> 07:33.130
isteklerin gövdelerini ayrıştırmamız gerekir.

07:33.130 --> 07:37.620
Bunun için yine yüklediğimiz body-parser paketinden

07:37.620 --> 07:39.220
import edebiliriz

07:39.220 --> 07:41.380
ve o paketten JSON metodunu

07:41.380 --> 07:46.380
şu şekilde import edebiliriz.

07:46.410 --> 07:49.170
Ve sonra burada bu çalıştırılanı bir ara yazılım

07:49.170 --> 07:51.310
olarak kaydedebilirsiniz.

07:51.310 --> 07:54.480
Yani bu, gelen tüm isteklerin gövdelerini ayrıştıracak

07:54.480 --> 07:58.130
ve orada bulduğu JSON verilerini çıkaracak ve daha sonra bu

07:58.130 --> 08:01.570
istek nesnesindeki gövde anahtarını bu ayrıştırılmış JSON

08:01.570 --> 08:05.990
verileriyle dolduracak olan üçüncü taraf bir paket tarafından sağlanan

08:05.990 --> 08:07.970
bir ara yazılımdır.

08:07.970 --> 08:10.290
Body-parser paketindeki bu JSON ara

08:10.290 --> 08:12.503
yazılımının yaptığı da budur.

08:13.890 --> 08:16.520
Ve bununla birlikte, yeni to dos oluşturabilecek

08:16.520 --> 08:18.230
bir sunucuya sahip olmalıyız.

08:18.230 --> 08:22.210
Tüm dosyaları kaydedin ve hatasız olarak yeniden derlendiğinden emin olun.

08:22.210 --> 08:26.150
Nodemon'un hala uygulamaya hizmet verdiğinden emin olun. js dosyası.

08:26.150 --> 08:28.560
Ve şimdi bir gönderi isteği göndermemiz gerekiyor.

08:28.560 --> 08:31.150
Tarayıcı ile bunu yapamayız, ancak bunun

08:31.150 --> 08:34.260
için bir araç kullanabiliriz, Postman.

08:34.260 --> 08:35.600
Basitçe arayabilir ve ardından

08:35.600 --> 08:38.160
Postman uygulamasını sisteminize yükleyebilirsiniz.

08:38.160 --> 08:39.283
Kullanımı ücretsizdir.

08:40.440 --> 08:41.570
Yükledikten sonra, başlatabilirsiniz

08:41.570 --> 08:44.440
ve buna benzer bir ekran görmeniz gerekir.

08:44.440 --> 08:46.460
Modal bir yer paylaşımı görürseniz,

08:46.460 --> 08:48.010
bunu kapatabilirsiniz.

08:48.010 --> 08:50.240
Ve burada artık bu artıya tıklayarak,

08:50.240 --> 08:51.740
talep türünü seçerek, bu durumda

08:51.740 --> 08:53.040
bir gönderi talebi, URL'yi

08:53.040 --> 08:56.450
girerek yeni bir talep oluşturabilirsiniz.

08:56.450 --> 08:58.820
Burada localhost 3000, 3000 çünkü

08:58.820 --> 09:01.660
burada seçtiğim bağlantı noktası bu.

09:01.660 --> 09:03.100
Ve sonra isteği slash

09:03.100 --> 09:06.320
todos slash nothing'e göndermemiz gerekiyor.

09:06.320 --> 09:10.000
Yani burada todos'u kesmek için hiçbir şeyi kesmek yok.

09:10.000 --> 09:12.120
İsteğe bir gövde eklemek istiyoruz

09:12.120 --> 09:15.440
ve bu, bazı JSON verilerini göndermek için burada bir ham

09:15.440 --> 09:17.010
gövde JSON olmalıdır.

09:17.010 --> 09:19.480
Şimdi buraya ne göndermemiz gerekiyor?

09:19.480 --> 09:21.840
Ara yazılım işlevinde çıkardığımız şey, yani

09:21.840 --> 09:22.880
bu durumda, gönderdiğimiz

09:22.880 --> 09:24.570
JSON verilerimizin bir parçası olarak

09:24.570 --> 09:27.410
bir metin özelliğine sahip olmalıyız.

09:27.410 --> 09:29.610
Burada, ad olarak bir metin ve ardından

09:29.610 --> 09:31.070
kursu bitir gibi istediğiniz

09:31.070 --> 09:33.230
herhangi bir metni ekleyelim.

09:33.230 --> 09:36.960
Ve şimdi gönder'e tıklarsanız, isteği gönderir ve işte

09:36.960 --> 09:38.990
yanıt ve bu iyi görünüyor.

09:38.990 --> 09:40.670
Yapılacaklar listesini geri aldık.

09:40.670 --> 09:43.600
Oluşturulan kimliği ve metni görüyoruz.

09:43.600 --> 09:45.870
Yani arka ucumuz burada açıkça çalışıyor.

09:45.870 --> 09:47.690
Ve hepsini TypeScript ile yazdık, ancak

09:47.690 --> 09:49.880
normal JavaScript olarak sunuyoruz.

09:49.880 --> 09:51.183
Bütün numara bu.
