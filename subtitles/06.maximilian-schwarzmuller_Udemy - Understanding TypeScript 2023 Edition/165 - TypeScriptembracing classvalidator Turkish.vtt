WEBVTT

00:02.130 --> 00:03.630
Anlatıcı: Bu yüzden, bazı çevirileri

00:03.630 --> 00:06.210
yüklememiz gereken vanilya bir JavaScript paketi

00:06.210 --> 00:08.360
olan Lodash'a bir göz attık.

00:08.360 --> 00:10.310
Ve vanilla JavaScript'te de

00:10.310 --> 00:13.530
çalışan, ancak TypeScript'te de özellikle

00:13.530 --> 00:17.328
iyi çalışan class-transformer'a bir göz attık.

00:17.328 --> 00:20.330
Şimdi class-validator'a bir göz atalım.

00:20.330 --> 00:24.540
Bu artık TypeScript'i gerçekten kullanan bir paket.

00:24.540 --> 00:28.300
TypeScript dekoratörleri kavramını temel alır ve bize

00:28.300 --> 00:32.340
onlarla çalışmak için yepyeni bir yol sunar, ya da en azından

00:32.340 --> 00:34.330
neredeyse yepyeni.

00:34.330 --> 00:38.230
Bu kurstaki dekoratör modülümü takip ettiyseniz,

00:38.230 --> 00:41.200
aslında bu derste de kendi başımıza oluşturduğumuz

00:41.200 --> 00:44.150
bir şey göreceksiniz.

00:44.150 --> 00:47.100
Ancak şimdi, bu üçüncü taraf kütüphanesi ile tekerleği sıfırdan

00:47.100 --> 00:49.330
yeniden icat etmek zorunda değiliz, kendi başımıza

00:49.330 --> 00:51.193
inşa etmek zorunda değiliz.

00:51.193 --> 00:53.320
Ve bu kütüphane de tartışmalı bir şekilde,

00:53.320 --> 00:55.710
dekoratör modülündeki çözümümüzden biraz

00:55.710 --> 00:57.830
daha ayrıntılıdır.

00:57.830 --> 01:00.026
Ben doğrulamadan bahsediyorum.

01:00.026 --> 01:02.870
Bu, bir sınıfın içine bazı dekoratörler yardımıyla

01:02.870 --> 01:06.390
doğrulama kuralları eklememize olanak tanıyan bir pakettir

01:06.390 --> 01:08.590
ve daha sonra böyle bir sınıfı örneklediğimizde,

01:08.590 --> 01:09.920
dekoratörler yardımıyla

01:09.920 --> 01:12.610
orada belirlediğimiz kurallar için onu gerçekten

01:12.610 --> 01:15.610
doğrulayabiliriz.

01:15.610 --> 01:18.960
Şimdi başlamak için bu paketi buraya aktarmamız gerekiyor.

01:18.960 --> 01:23.130
Yani npm install class-validator --save, ve bundan

01:23.130 --> 01:26.130
sonra hemen başlayabiliriz.

01:26.130 --> 01:29.220
Şimdi webpack-dev-server'ı yeniden başlatayım ve

01:29.220 --> 01:30.600
bu paketi kullanmak için

01:30.600 --> 01:33.580
modellere, yani belirli özellikleri doğrulamak istediğimiz

01:33.580 --> 01:35.740
sınıflara birkaç dekoratör eklememiz

01:35.740 --> 01:37.490
gerekiyor.

01:37.490 --> 01:39.730
Yani benim durumumda burada ürün modelinde,

01:39.730 --> 01:43.240
class-validator'dan bir şey içe aktaracağım.

01:43.240 --> 01:45.110
Ve şimdi tekrar, eğer bu kurstaki

01:45.110 --> 01:47.360
dekoratör modülünü takip ettiyseniz,

01:47.360 --> 01:49.640
bu zaten bu paket olmadan da sıfırdan

01:49.640 --> 01:52.870
oluşturduğum bir konsept.

01:52.870 --> 01:56.270
Ancak elbette çok naif ve temel bir sürüm oluşturduk, bu

01:56.270 --> 01:57.840
paketle kendi başımıza inşa

01:57.840 --> 02:01.200
etmek zorunda değiliz ve ayrıca daha ayrıntılı.

02:01.200 --> 02:02.770
Şimdi class-validator'dan belirli

02:02.770 --> 02:04.820
dekoratörleri içe aktarabiliriz.

02:04.820 --> 02:05.893
Örneğin,

02:07.139 --> 02:08.630
IsNotEmpty veya

02:08.630 --> 02:11.410
ayrıca IsNumber.

02:11.410 --> 02:13.500
IsPositive öğesini de içe aktarabiliriz.

02:15.940 --> 02:18.940
Şimdi bunları doğrulamak istediğimiz özelliklere ekleyebiliriz.

02:18.940 --> 02:20.900
Örneğin burada, başlıkta IsNotEmpty'yi

02:20.900 --> 02:24.220
bunun gibi bir dekoratör olarak ekleyebiliriz ve bunların

02:24.220 --> 02:26.390
hepsi dekoratör fabrikalarıdır, bu nedenle

02:26.390 --> 02:29.610
her zaman bunları çalıştırmanız gerekir.

02:29.610 --> 02:31.318
Ve ayrıca

02:31.318 --> 02:37.380
burada, IsNumber ve IsPositive.

02:37.380 --> 02:38.763
Hadi bunu uygulayalım.

02:40.250 --> 02:41.730
Şimdi burada dekoratörleri kullanmak

02:41.730 --> 02:44.730
için tsconfig'e de gitmelisiniz. js dosyasını açın ve

02:44.730 --> 02:49.550
orada deneysel dekoratörleri açtığınızdan emin olun.

02:49.550 --> 02:51.593
Bundan sonra, bunu kaydedin ve şimdi

02:52.750 --> 02:55.040
buradaki bu alanlar da gitmelidir.

02:55.040 --> 02:57.300
Ayrıca, yeni tsconfig'i alması için geliştirme sunucusunu

02:57.300 --> 03:00.840
yeniden başlatmamız gerekiyor. js dönüşümü.

03:00.840 --> 03:02.650
Şimdi bu kuralları, bu doğrulama

03:02.650 --> 03:04.768
kurallarını buraya ekledik.

03:04.768 --> 03:07.710
Temel olarak başlığın asla boş bir dize olmaması gerektiğini

03:07.710 --> 03:11.830
ve sayıların pozitif bir sayı olması gerektiğini söylüyoruz.

03:11.830 --> 03:15.119
Şimdi burada yeni bir ürün oluşturabiliriz,

03:15.119 --> 03:16.870
newProd diyelim, burada

03:16.870 --> 03:19.078
yeni ürün diyoruz ve başlık

03:19.078 --> 03:21.720
için boş bir dize ve ardından eksi

03:21.720 --> 03:25.210
5 geçiyorum. 99 numara için.

03:25.210 --> 03:26.700
Eğer o zaman teselli edersem. log newProd,

03:27.576 --> 03:29.920
getInformation ve bunu

03:29.920 --> 03:31.730
çalıştırın, nerede

03:31.730 --> 03:34.830
çalıştığını görelim.

03:34.830 --> 03:35.683
Tamam, bunu sakla.

03:37.840 --> 03:40.040
İşe yarıyor.

03:40.040 --> 03:42.330
Henüz tam olarak o noktada değiliz.

03:42.330 --> 03:46.470
Dekoratörlerimizle birlikte kuralları belirliyoruz.

03:46.470 --> 03:49.560
Ancak bu dekoratörler tek başlarına fazla bir şey yapmazlar.

03:49.560 --> 03:52.880
Bunun yerine şimdi class-validator'dan validator

03:52.880 --> 03:56.190
yöntemini de içe aktarmamız gerekiyor.

03:56.190 --> 03:57.300
Bu paketten validate'i

03:57.300 --> 03:59.840
içe aktarıyoruz ve bunu somut bir örnek üzerinde,

03:59.840 --> 04:02.260
dekoratörlerimizi eklediğimiz sınıf

04:02.260 --> 04:05.750
dışında çalıştırmamız gerekiyor.

04:05.750 --> 04:07.300
Yani bu durumda validate'i

04:07.300 --> 04:12.020
çalıştırabilir ve newProd'u ona aktarabiliriz.

04:12.020 --> 04:14.670
Ve validate daha sonra doğrulama

04:14.670 --> 04:19.150
hataları verebilecek bir söz döndürecektir.

04:19.150 --> 04:21.440
Böylece buraya ekleyebiliriz, eğer bir hafifletme

04:21.440 --> 04:23.080
fonksiyonunda olsaydınız, elbette

04:23.080 --> 04:25.680
tek bir ağırlık da kullanabilirdiniz.

04:25.680 --> 04:27.920
Ve burada bu validate fonksiyonunun

04:27.920 --> 04:30.093
bulduğu hataları geri alıyoruz.

04:30.980 --> 04:31.813
Şimdi önemli

04:31.813 --> 04:34.950
olan, hata olsa bile her zaman then bloğuna gireriz,

04:34.950 --> 04:36.560
yani doğrulama hataları

04:36.560 --> 04:38.420
varsa catch bloğuna girmeyiz,

04:38.420 --> 04:41.120
her zaman then bloğuna gireriz.

04:41.120 --> 04:44.360
Şimdi burada, bir Dizi olan hataların nokta uzunluğunun

04:44.360 --> 04:45.980
sıfırdan büyük olup olmadığını

04:45.980 --> 04:48.400
kontrol edebiliriz.

04:48.400 --> 04:51.300
Bu da doğrulama hataları olduğu anlamına gelir.

04:51.300 --> 04:52.910
Bu durumda doğrulama hatalarını

04:53.750 --> 04:56.700
günlüğe kaydedebilir ve belki de bulduğumuz hataların

04:56.700 --> 04:59.200
çıktısını alabiliriz.

04:59.200 --> 05:01.820
Yani konsol. hataları günlüğe kaydederim

05:01.820 --> 05:03.700
ve aksi takdirde buradaki durumumda bilgileri

05:03.700 --> 05:05.290
günlüğe kaydederim.

05:05.290 --> 05:06.580
Elbette burada ne yapmak istediğiniz

05:06.580 --> 05:09.100
oluşturduğunuz uygulamaya bağlıdır.

05:09.100 --> 05:10.860
Hata varsa bu durumda kullanıcıya

05:10.860 --> 05:13.790
bir uyarı göstermek isteyebilirsiniz.

05:13.790 --> 05:15.360
Girişi sıfırlamak isteyebilirsiniz,

05:15.360 --> 05:16.520
ne yapmak isterseniz.

05:16.520 --> 05:19.690
Burada sadece konsola bir şey kaydedeceğim.

05:19.690 --> 05:22.080
Ve şimdi bunu kaydedersek, doğrulama

05:22.080 --> 05:24.870
hatalarını ve ardından burada bulunan

05:24.870 --> 05:27.830
hataların bir dizisini görürsünüz.

05:27.830 --> 05:31.890
Örneğin ilk hata title özelliğindedir,

05:31.890 --> 05:34.770
boş olmaması gerekir.

05:34.770 --> 05:38.290
İkinci hata ise fiyat özelliğinde, yani pozitif

05:38.290 --> 05:41.150
bir sayı olması gerektiği konusunda.

05:41.150 --> 05:44.950
İşte bu dekoratör tabanlı yaklaşımla projelerinize

05:44.950 --> 05:47.960
oldukça güçlü bir doğrulamayı bu kadar kolay

05:47.960 --> 05:50.170
ekleyebilirsiniz.

05:50.170 --> 05:53.190
Kursta daha önce yaptığımız şeyle ve dekoratörler

05:53.190 --> 05:54.530
modülüyle ilgili, ancak

05:54.530 --> 05:56.062
birkaç kez bahsettiğim

05:56.062 --> 05:59.890
gibi, bir dizi yerleşik kuralla daha ayrıntılı ve elbette bu

05:59.890 --> 06:01.190
paketin dokümanlarında

06:01.190 --> 06:03.610
ve tekerleği yeniden icat etmeden her

06:03.610 --> 06:06.350
şeyi öğrenebilirsiniz.

06:06.350 --> 06:09.300
Dolayısıyla class-validator paketi, TypeScript

06:09.300 --> 06:10.930
ile daha büyük projeler oluşturuyorsanız

06:10.930 --> 06:14.693
bilmeniz gereken güçlü bir pakettir.
