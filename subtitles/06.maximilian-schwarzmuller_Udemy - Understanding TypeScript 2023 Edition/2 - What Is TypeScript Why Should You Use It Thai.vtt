WEBVTT

00:02.350 --> 00:04.170
ผู้สอน: แล้ว TypeScript คืออะไร?

00:04.170 --> 00:06.860
มันเกี่ยวกับอะไร ทำไมเราถึงใช้มัน?

00:06.860 --> 00:10.820
TypeScript เป็น JavaScript Superset

00:10.820 --> 00:12.190
ตอนนี้หมายความว่าอย่างไร

00:12.190 --> 00:14.250
หมายความว่าในที่สุด TypeScript

00:14.250 --> 00:16.370
ก็เป็นภาษาหนึ่ง ซึ่งเป็นภาษาโปรแกรมที่สร้างขึ้นจาก

00:16.370 --> 00:18.710
JavaScript

00:18.710 --> 00:20.940
ไม่ใช่ภาษาใหม่ แต่ใช้ภาษา

00:20.940 --> 00:23.980
JavaScript และเพิ่มคุณสมบัติและข้อดีใหม่

00:23.980 --> 00:27.450
ๆ ให้กับมัน

00:27.450 --> 00:32.840
มันทำให้การเขียนโค้ด JavaScript ง่ายขึ้นและมีประสิทธิภาพมากขึ้น

00:32.840 --> 00:35.624
แต่เรามีข้อเสียอย่างหนึ่งอย่างใหญ่หลวง

00:35.624 --> 00:39.786
TypeScript ไม่สามารถดำเนินการโดยสภาพแวดล้อม JavaScript

00:39.786 --> 00:41.760
เช่นเบราว์เซอร์

00:41.760 --> 00:44.270
เบราว์เซอร์ไม่สามารถเรียกใช้ TypeScript

00:44.270 --> 00:48.486
และตัวอย่างเช่น Node js ยังไม่สามารถเรียกใช้ TypeScript

00:48.486 --> 00:52.250
ได้ ดังนั้นสภาพแวดล้อมที่เราสามารถเรียกใช้ JavaScript จึงไม่รองรับ

00:52.250 --> 00:54.080
TypeScript

00:54.080 --> 00:56.140
แนวคิดเบื้องหลัง TypeScript คืออะไร

00:56.140 --> 01:00.760
มันเป็น JavaScript เวอร์ชันที่ดีกว่าและเราไม่สามารถใช้งานได้?

01:00.760 --> 01:02.130
ก็ไม่เชิง

01:02.130 --> 01:06.050
TypeScript เป็นภาษาโปรแกรม แต่ก็เป็นเครื่องมือเช่นกัน

01:06.050 --> 01:10.049
เป็นคอมไพเลอร์ที่มีประสิทธิภาพซึ่งคุณรันโค้ดของคุณเพื่อคอมไพล์โค้ด

01:10.049 --> 01:14.410
typescript เป็น JavaScript

01:14.410 --> 01:16.540
ดังนั้น สิ่งที่คุณจะได้รับเมื่อเขียนโค้ดใน

01:16.540 --> 01:20.260
TypeScript ก็คือ JavaScript

01:20.260 --> 01:22.870
แต่คุณไม่ได้เขียนโค้ด JavaScript นั้น

01:22.870 --> 01:27.480
คุณเขียนโค้ด TypeScript ด้วยคุณลักษณะใหม่ทั้งหมดและข้อดีทั้งหมด

01:27.480 --> 01:30.670
และคุณได้รับโค้ด JavaScript ปกติ

01:30.670 --> 01:33.810
แน่นอนว่ามีคำถามสำคัญข้อหนึ่งเกิดขึ้น TypeScript

01:33.810 --> 01:36.710
จะเพิ่มคุณสมบัติใหม่ได้อย่างไรหากสิ่งที่คุณได้รับในตอนท้ายคือ

01:36.710 --> 01:40.630
JavaScript ปกติ

01:40.630 --> 01:43.460
และคำตอบก็คือ คอมไพเลอร์ TypeScript จะคอมไพล์ฟีเจอร์ใหม่เหล่านี้ให้กับวิธีแก้ไข

01:43.460 --> 02:02.060
JavaScript ดังนั้นในท้ายที่สุด มันอาจจะให้ไวยากรณ์ที่ดีกว่าแก่คุณ เป็นวิธีที่ง่ายกว่าในการทำบางสิ่ง จากนั้นมันก็จะคอมไพล์วิธีที่ดีกว่าและง่ายกว่าให้กับ JavaScript ที่ซับซ้อนมากขึ้น ตัวอย่างซึ่งคุณจะต้องเขียนเป็นอย่างอื่น

02:02.060 --> 02:03.230
ดังนั้นมันจึงไม่ใช่เรื่องวิเศษ

02:03.230 --> 02:06.790
แน่นอนว่ามันไม่สามารถเพิ่มสิ่งที่ไม่สามารถทำได้เลยในภาษา

02:06.790 --> 02:11.150
JavaScript แต่มันสามารถเพิ่มคุณสมบัติใหม่ๆ ที่ใช้งานง่ายกว่า ไวยากรณ์ที่ดีกว่า

02:11.150 --> 02:15.020
อะไรทำนองนี้

02:15.020 --> 02:20.900
นอกจากนี้ TypeScript ยังทำสิ่งที่สำคัญอย่างหนึ่งซึ่งชื่อนี้มีความหมายอยู่แล้ว

02:20.900 --> 02:22.740
มันเพิ่มประเภท เพิ่มคุณสมบัติให้กับภาษา

02:22.740 --> 02:28.750
JavaScript ซึ่งเราจะตรวจสอบอย่างใกล้ชิดในอีกไม่กี่วินาที ซึ่งจะทำให้คุณเป็นนักพัฒนาจริง

02:28.750 --> 02:35.070
ๆ โอกาสในการระบุข้อผิดพลาดในโค้ดของคุณก่อนหน้านี้ ก่อนที่สคริปต์ของคุณจะทำงาน

02:35.070 --> 02:41.350
และ เกิดข้อผิดพลาดขณะรันไทม์ในเบราว์เซอร์

02:41.350 --> 02:46.690
ดังนั้น ไม่เพียงแต่ให้ฟีเจอร์ใหม่และวิธีการทำบางอย่างที่ดีกว่าเท่านั้น

02:46.690 --> 02:54.153
แต่ยังให้การตรวจสอบข้อผิดพลาดพิเศษที่ข้อผิดพลาดที่คุณอาจได้รับเนื่องจากข้อผิดพลาดรันไทม์สามารถตรวจจับและแก้ไขได้ตั้งแต่เนิ่นๆ

02:54.153 --> 02:58.370
ในระหว่างการพัฒนา

02:58.370 --> 03:00.600
เหตุใดเราจึงต้องใช้ TypeScript

03:00.600 --> 03:02.570
ลองพิจารณาตัวอย่างนี้ ฟังก์ชัน

03:02.570 --> 03:06.710
JavaScript ที่ค่อนข้างง่ายซึ่งบวกเลขสองตัว

03:06.710 --> 03:08.760
เมื่อฉันเรียกมัน โปรดสังเกตว่าฉันกำลังส่งสองสตริงแทนที่จะเป็นตัวเลขสองตัว

03:08.760 --> 03:18.090
และฉันจะแสดงตัวอย่างจริงให้คุณเห็น ซึ่งสิ่งนี้สามารถเกิดขึ้นได้จริงในเวลาเพียงเสี้ยววินาที

03:18.090 --> 03:20.270
ดังนั้นเราจึงเรียกฟังก์ชันนี้ด้วยสองสตริง

03:20.270 --> 03:27.240
และผลลัพธ์ที่คุณจะได้รับจากที่นี่น่าจะเป็นพฤติกรรมที่ไม่ต้องการ เพราะถ้าคุณเพิ่มสองสตริง JavaScript

03:27.240 --> 03:32.780
จะเชื่อมสตริงเข้าด้วยกันแทนที่จะคำนวณทางคณิตศาสตร์ที่นี่

03:32.780 --> 03:38.980
ดังนั้น ผลลัพธ์จะไม่ใช่ห้า แต่เป็นยี่สิบสาม ซึ่งเป็นสตริงที่ต่อกันของตัวเลขสองตัว

03:38.980 --> 03:41.690
นี่เป็นข้อผิดพลาดที่คุณอาจมีใน JavaScript

03:41.690 --> 03:43.530
ไม่ใช่ข้อผิดพลาดทางเทคนิค

03:43.530 --> 03:49.832
คุณอาจไม่ได้รับข้อผิดพลาดรันไทม์ แต่คุณมีข้อผิดพลาดเชิงตรรกะในโค้ดของคุณ

03:49.832 --> 03:52.820
และแน่นอนว่าอาจนำไปสู่ปัญหาใหญ่ในเว็บแอปพลิเคชันที่คุณกำลังเขียนด้วย

03:52.820 --> 03:55.870
JavaScript

03:55.870 --> 03:59.360
ตอนนี้ แน่นอนว่าใน JavaScript เรามีกลยุทธ์การลดขนาด เราสามารถเพิ่ม

03:59.360 --> 04:02.541
if check ในฟังก์ชันเพื่อตรวจสอบประเภทของอินพุตในขณะรันไทม์

04:02.541 --> 04:05.440
เรายังสามารถตรวจสอบความถูกต้องและฆ่าเชื้ออินพุตของผู้ใช้

04:05.440 --> 04:15.840
และในขณะที่เราอาจต้องการทำทั้งหมดนั้น คงจะดีไม่น้อยหากเราสามารถตรวจพบข้อผิดพลาดเช่นนี้ในระหว่างการพัฒนาได้แล้ว

04:15.840 --> 04:21.810
และโชคดีที่สิ่งนี้เป็นไปได้ด้วย TypeScript เพราะนักพัฒนาสามารถเขียนโค้ดที่ไม่ถูกต้องที่นี่และแนะนำบอทแบบนี้ใน

04:21.810 --> 04:30.060
JavaScript และด้วย TypeScript เรามีเครื่องมือที่ช่วยให้เราเขียนโค้ดได้ดีขึ้นและหลีกเลี่ยงปัญหาดังกล่าว

04:30.060 --> 04:31.910
มาดูกันดีกว่า
