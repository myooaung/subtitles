WEBVTT

00:02.050 --> 00:04.090
Instrutor: Então, qual é a nossa desvantagem?

00:04.090 --> 00:06.030
Este é o projeto em que trabalhamos,

00:06.030 --> 00:08.020
dividido em vários arquivos

00:08.020 --> 00:12.390
usando estas importações do módulo ES6 aqui.

00:12.390 --> 00:15.620
Agora, vamos construir este projeto e para isso,

00:15.620 --> 00:18.400
como já fizemos antes, podemos começar

00:18.400 --> 00:21.930
npm-start para trazer o lite-server à tona.

00:21.930 --> 00:24.710
E, claro, muito importante em uma nova aba, todos

00:24.710 --> 00:26.367
os traços tsc-dash para iniciar

00:27.820 --> 00:31.430
a compilação do TypeScript no modo relógio.

00:31.430 --> 00:35.590
Isto nos dá nosso projeto e se agora abrirmos a aba Network nas ferramentas

00:35.590 --> 00:39.570
de desenvolvimento do navegador e recarregarmos este arquivo, veremos

00:39.570 --> 00:42.360
a desvantagem que temos aqui ou o problema que temos

00:42.360 --> 00:44.840
com esta configuração.

00:44.840 --> 00:47.490
Vemos um monte de solicitações HTTP.

00:47.490 --> 00:49.160
Agora você pode ignorar as últimas aqui, estas

00:49.160 --> 00:51.380
estão vindo de nosso servidor de desenvolvimento.

00:51.380 --> 00:58.290
Mas todos estes nossos pedidos aqui para aplicar. js, projeto-entrada.

00:58.290 --> 00:58.290
js, lista de projetos. js, componente de base. js

00:58.290 --> 01:00.960
e sobre isso é o problema.

01:00.960 --> 01:04.610
Você notará que todos estes arquivos não são tão grandes, são

01:04.610 --> 01:06.320
relativamente pequenos.

01:06.320 --> 01:07.590
Portanto, é claro que

01:07.590 --> 01:11.010
isso é bom, mas temos muitos pedidos HTTP aqui.

01:11.010 --> 01:12.600
Agora qual é o problema com isso?

01:12.600 --> 01:15.070
O problema com isso pode ser visto se dermos

01:15.070 --> 01:17.810
uma olhada naquela cachoeira aqui à direita.

01:17.810 --> 01:20.330
Toda solicitação HTTP que precisa ser feita,

01:20.330 --> 01:22.470
naturalmente, leva um pouco de tempo.

01:22.470 --> 01:24.480
Leva tempo para baixar os arquivos, mas

01:24.480 --> 01:27.760
como eles não são tão grandes assim, isso não é um problema.

01:27.760 --> 01:31.390
Mas cada solicitação HTTP tem como uma sobrecarga de

01:31.390 --> 01:34.540
base, uma duração de base que sempre leva.

01:34.540 --> 01:38.570
Esta pequena caixa que você vê em frente a estes gráficos aqui.

01:38.570 --> 01:41.250
Isso está próximo ao momento em que é necessário que

01:41.250 --> 01:43.910
o navegador configure esse pedido e o envie.

01:43.910 --> 01:46.280
Assim, embora o download real do arquivo

01:46.280 --> 01:49.600
possa ser relativamente rápido, configurar o pedido,

01:49.600 --> 01:52.860
fazer o trabalho no servidor, que serve o arquivo e

01:52.860 --> 01:55.310
tudo isso leva algum tempo.

01:55.310 --> 01:57.890
E agora aqui temos uma configuração muito rápida porque

01:57.890 --> 02:00.310
tudo isso está acontecendo em nossa máquina.

02:00.310 --> 02:03.020
Temos um servidor de desenvolvimento local, depois de tudo.

02:03.020 --> 02:06.160
Se você implantar isso na web, ter tantas solicitações

02:06.160 --> 02:08.690
pode realmente introduzir muita latência

02:08.690 --> 02:11.140
e retardar seu projeto só por causa da enorme

02:11.140 --> 02:14.760
quantidade de solicitações HTTP feitas.

02:14.760 --> 02:17.280
Portanto, se pudermos encontrar uma solução para

02:17.280 --> 02:21.370
reduzir essa quantidade de solicitações HTTP, isso seria incrível.

02:21.370 --> 02:24.020
E é aí que entra em jogo o webpack.

02:24.020 --> 02:28.190
Você pode ir ao webpack. js. org, para saber mais sobre isso.

02:28.190 --> 02:30.290
No final, o webpack é uma ferramenta

02:30.290 --> 02:33.750
que nos ajudará a agrupar nossos arquivos.

02:33.750 --> 02:36.530
E eu posso realmente recomendar sua extensa e abrangente

02:36.530 --> 02:39.980
documentação que você encontra em sua página.

02:39.980 --> 02:42.300
Se você quer aprender tudo sobre webpack.

02:42.300 --> 02:44.820
Neste curso, usaremos algumas características selecionadas

02:44.820 --> 02:46.563
que nos ajudam com o TypeScript.

02:47.560 --> 02:49.850
Então o que é exatamente o webpack?

02:49.850 --> 02:53.850
É uma ferramenta de agrupamento, e pode-se dizer, construir uma ferramenta de orquestração.

02:53.850 --> 02:56.190
É uma ferramenta que nos ajuda a reduzir a quantidade

02:56.190 --> 02:59.560
de solicitações HTTP através do agrupamento de códigos.

02:59.560 --> 03:03.010
Para que possamos escrever o código dividido em vários arquivos,

03:03.010 --> 03:05.390
mas o webpack então pega todos esses arquivos

03:05.390 --> 03:07.050
e os agrupa.

03:07.050 --> 03:10.050
E além disso, o webpack é capaz de fazer mais.

03:10.050 --> 03:13.920
Ele também otimizará nosso código e também nos permitirá adicionar mais

03:13.920 --> 03:17.760
etapas de construção, mais ferramentas de construção, por exemplo, para

03:17.760 --> 03:20.410
nos ajudar com arquivos CSS e assim por diante.

03:20.410 --> 03:23.180
Mas não é isso que vamos ver neste módulo, porque

03:23.180 --> 03:26.220
quero me concentrar no webpack e no TypeScript.

03:26.220 --> 03:28.710
Portanto, antes de tudo, vamos dar uma olhada em nossa configuração

03:28.710 --> 03:30.700
normal onde não usamos webpack.

03:30.700 --> 03:32.800
Lá temos vários arquivos TypeScript,

03:32.800 --> 03:34.870
mas se depois usarmos essas importações,

03:34.870 --> 03:36.920
recebemos várias solicitações HTTP,

03:36.920 --> 03:40.220
o que não é tão bom pelas razões que mencionei.

03:40.220 --> 03:43.450
Além disso, um tópico que eu ainda não tinha visto antes

03:43.450 --> 03:47.670
é muito provável que também tenhamos um código não otimizado, o que

03:47.670 --> 03:51.290
significa que não é tão pequeno quanto possível.

03:51.290 --> 03:53.330
Podemos certamente otimizar mais o código

03:53.330 --> 03:55.750
encurtando nomes de funções e assim por diante.

03:55.750 --> 03:58.690
E, é claro, queremos uma ferramenta que faça isso automaticamente,

03:58.690 --> 04:01.030
para que não tenhamos um trabalho muito manual

04:01.030 --> 04:03.000
com código ilegível.

04:03.000 --> 04:06.080
Queremos escrever código perfeitamente legível como um desenvolvedor.

04:06.080 --> 04:07.850
Mas seria ótimo se tivéssemos uma

04:07.850 --> 04:10.740
ferramenta que então encurtasse este código e realmente

04:10.740 --> 04:14.960
o tornasse o menor possível, utilizasse nomes de variáveis e funções tão curtos

04:14.960 --> 04:17.170
quanto possível, para que enviássemos o

04:17.170 --> 04:19.130
menor código possível.

04:19.130 --> 04:22.940
Porque menos código significa que os usuários podem baixá-lo mais rapidamente,

04:22.940 --> 04:25.530
o que significa que nossa aplicação pode ser iniciada

04:25.530 --> 04:27.600
mais rapidamente em nossas máquinas.

04:27.600 --> 04:29.440
E além disso, nossa configuração

04:29.440 --> 04:32.860
atual, temos este servidor de desenvolvimento extra, lite-server,

04:32.860 --> 04:35.150
que é um pacote extra instalado, que temos

04:35.150 --> 04:36.860
que girar para cima.

04:36.860 --> 04:39.320
Não seria um pequeno bônus, um bom bônus se tivéssemos

04:39.320 --> 04:42.280
um único comando e que fizesse tudo, construir nosso

04:42.280 --> 04:45.360
projeto, mas também girar tal servidor, que automaticamente

04:45.360 --> 04:48.170
recarrega nosso site sempre que alteramos um arquivo

04:48.170 --> 04:50.713
em nosso projeto.

04:51.550 --> 04:54.270
Bem, e é aí que o webpack pode nos ajudar.

04:54.270 --> 04:57.240
Ele agrupa nosso código para que tenhamos menos importações

04:57.240 --> 05:00.670
em vez disso, temos alguns pacotes de códigos que enviamos,

05:00.670 --> 05:05.100
ele nos ajuda a otimizar nosso código, minificá-lo como ele é chamado, para que

05:05.100 --> 05:06.717
enviemos menos código e nossos

05:06.717 --> 05:10.130
usuários tenham menos código para baixar.

05:10.130 --> 05:12.530
E também podemos facilmente adicionar mais passos de

05:12.530 --> 05:15.750
construção se você quiser, podemos adicionar tal servidor de desenvolvimento,

05:15.750 --> 05:19.270
mas também podemos fazer muitas outras coisas se quisermos realmente e os documentos

05:19.270 --> 05:22.160
oficiais do webpack são o lugar para ir se você quiser aprender

05:22.160 --> 05:24.130
tudo sobre isso.

05:24.130 --> 05:27.880
Com isso, vamos ver um exemplo de configuração em nosso projeto e vamos

05:27.880 --> 05:30.433
aprender como poderíamos usar o webpack lá.
