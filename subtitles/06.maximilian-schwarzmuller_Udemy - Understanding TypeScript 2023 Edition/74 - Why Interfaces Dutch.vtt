WEBVTT

00:02.250 --> 00:04.870
-Nu we deze krachtige functies kennen, is een voor

00:04.870 --> 00:07.960
de hand liggende vraag: waarom zouden we die gebruiken?

00:07.960 --> 00:09.610
Waarom is dat nuttig?

00:09.610 --> 00:12.200
Nou, het is nuttig in situaties als deze, waar we

00:12.200 --> 00:13.780
weten dat we een bepaalde set

00:13.780 --> 00:15.820
functionaliteiten willen hebben.

00:15.820 --> 00:18.750
Laten we zeggen een groet methode, en we willen er zeker

00:18.750 --> 00:21.910
van zijn dat een clausule zo'n groet methode heeft, en een

00:21.910 --> 00:24.450
andere clausule misschien ook, wel, dan kunnen

00:24.450 --> 00:26.360
we een interface implementeren die

00:26.360 --> 00:29.570
het bestaan van deze methode afdwingt.

00:29.570 --> 00:32.690
Dan kunnen we gemakkelijk functionaliteit delen tussen clausules,

00:32.690 --> 00:35.850
en elke clausule moet zijn eigen implementatie toevoegen, de exacte

00:35.850 --> 00:38.060
code die moet worden uitgevoerd wanneer de methode

00:38.060 --> 00:39.450
wordt aangeroepen, maar we dwingen

00:39.450 --> 00:41.370
een bepaalde structuur af met behulp van

00:41.370 --> 00:43.280
interfaces.

00:43.280 --> 00:46.400
Dit kan nuttig zijn als we geen andere delen van onze code

00:46.400 --> 00:48.550
hebben die op die structuur steunen.

00:48.550 --> 00:51.680
Hier stellen we in dat user1 van het type Greetable is,

00:51.680 --> 00:55.240
en daarmee zeggen we dat het ons niet uitmaakt wat er in user zit,

00:55.240 --> 00:57.840
maar wat er in moet zitten is een greet-methode,

00:57.840 --> 00:59.730
en we weten dat die er in moet zitten

00:59.730 --> 01:03.510
omdat alles wat we in user1 opslaan greetable moet zijn.

01:03.510 --> 01:07.350
Daardoor kunnen we echt krachtige en flexibele code schrijven waarbij

01:07.350 --> 01:09.840
we niet alles hoeven te weten over een object,

01:09.840 --> 01:11.710
of alles over een clausule, maar we

01:11.710 --> 01:14.710
weten gewoon dat wat ik hier in user1 krijg een greet-methode

01:14.710 --> 01:16.210
moet hebben.

01:16.210 --> 01:18.850
Het kan ons niet schelen of Person nog iets anders heeft,

01:18.850 --> 01:20.630
hier zijn we geÃ¯nteresseerd in greet,

01:20.630 --> 01:22.400
vandaar dat we naar Greetable hebben

01:22.400 --> 01:25.180
gestuurd, en daarom kunnen we niets in user1 opslaan

01:25.180 --> 01:27.190
dat geen greet-methode zou hebben, omdat

01:27.190 --> 01:32.333
Greetable alles wat je erop baseert dwingt zo'n greet-methode te hebben.
