WEBVTT

00:02.170 --> 00:03.420
Instruktur: Jadi, mari kita mulai.

00:03.420 --> 00:06.330
Seperti yang saya sebutkan, di sini saya akan membuat REST

00:06.330 --> 00:09.130
API yang sangat dasar tetapi tentu saja Anda dapat membangun

00:09.130 --> 00:10.810
aplikasi Node apa pun dengan atau tanpa

00:10.810 --> 00:13.780
express dan dengan cara apa pun dengan TypeScript jadi ini hanyalah

00:13.780 --> 00:15.570
sebuah contoh.

00:15.570 --> 00:18.990
Anda tidak terbatas pada aplikasi spesifik ini.

00:18.990 --> 00:21.560
Di folder src saya akan menambahkan aplikasi. ts yang akan menjadi

00:21.560 --> 00:23.060
titik masuk root di

00:23.060 --> 00:25.970
mana kita memutar server itu.

00:25.970 --> 00:29.530
Dan di sana saya ingin mengimpor sesuatu dari Express, dari

00:29.530 --> 00:31.203
framework Express ini.

00:32.970 --> 00:35.460
Sekarang Anda mungkin tahu bagaimana kita bisa menambahkan

00:35.460 --> 00:37.890
Express di sini dan menyiapkan server web dengan Express.

00:37.890 --> 00:41.330
Kita mengimpor Express dengan sintaksis ini di sini

00:41.330 --> 00:46.330
dan kemudian di sini kita dapat mengeksekusi Express sebagai fungsi.

00:46.380 --> 00:50.170
Kita mendapatkan kembali objek aplikasi seperti itu, di mana kita bisa memanggil

00:50.170 --> 00:53.750
listen untuk mendengarkan pada port tertentu untuk permintaan yang masuk.

00:53.750 --> 00:56.120
Sekarang ini akan bekerja dalam JavaScript normal, tetapi

00:56.120 --> 00:58.420
Anda sudah melihat saya mendapatkan kesalahan di sini.

00:59.540 --> 01:01.600
Sekarang saya juga mendapatkan saran

01:01.600 --> 01:03.500
mengapa saya mungkin mendapatkan

01:03.500 --> 01:06.290
kesalahan ini di sini karena require sebenarnya adalah

01:06.290 --> 01:10.100
fungsi yang ada di note. js, tetapi tidak di sisi browser.

01:10.100 --> 01:12.540
Sekarang di tsconfig. Saya tidak menggunakan

01:12.540 --> 01:16.640
lib khusus yang akan mendukung node. js sehingga dalam TypeScript

01:16.640 --> 01:18.120
ini tidak menyadari

01:18.120 --> 01:20.150
fungsi umum ini yang ada dalam

01:20.150 --> 01:22.900
sebuah node. lingkungan js.

01:22.900 --> 01:27.140
Sekarang untuk membuat ini bekerja, kita perlu menginstal tipe tambahan dengan "npm

01:27.140 --> 01:30.220
install --save-dev" kita dapat menginstal "@types/node"

01:30.220 --> 01:32.410
untuk menginstal semua tipe yang kita butuhkan

01:32.410 --> 01:36.291
untuk bekerja dengan node. js Jadi mari kita jalankan perintah

01:36.291 --> 01:39.460
ini dan lihat apakah itu membantu kita.

01:39.460 --> 01:42.320
Ya, sudah selesai dan kesalahan ini sudah hilang.

01:42.320 --> 01:44.390
Tetapi mungkin Anda juga melihat bahwa pada aplikasi

01:44.390 --> 01:46.680
saya tidak mendapatkan pelengkapan otomatis.

01:46.680 --> 01:50.190
Ini juga tidak error, tetapi jika kita mengarahkan kursor ke aplikasi kita melihat

01:50.190 --> 01:52.410
bahwa TypeScript tidak tahu apa yang ada di sana.

01:52.410 --> 01:54.210
Ini adalah tipe "any" (apa saja).

01:54.210 --> 01:56.530
Jadi kita mungkin harus menginstal lebih

01:56.530 --> 01:59.930
banyak tipe dan juga menginstal "@types/express" untuk

01:59.930 --> 02:02.410
menginstal tipe khusus express.

02:02.410 --> 02:04.320
Dan itu adalah pola yang sudah Anda ketahui.

02:04.320 --> 02:06.850
Kita telah melihat hal itu di bagian perpustakaan pihak

02:06.850 --> 02:08.350
ketiga dalam kursus ini.

02:08.350 --> 02:12.030
Di sana, saya juga menunjukkan kepada Anda bagaimana Anda dapat menginstal paket tipe

02:12.030 --> 02:15.220
untuk mendapatkan dukungan yang lebih baik dalam skrip TypeScript Anda.

02:15.220 --> 02:19.320
Jadi dengan tipe ini ditambahkan, tanpa konfigurasi tambahan,

02:19.320 --> 02:22.030
Hah, tetap saja tidak berfungsi.

02:22.030 --> 02:23.140
Alasannya adalah sintaks

02:23.140 --> 02:25.330
impor yang kita gunakan di sini.

02:25.330 --> 02:28.270
Ini adalah hal biasa yang umum. sintaks impor js yang perlu

02:28.270 --> 02:30.450
diperhatikan. js digunakan secara default,

02:30.450 --> 02:33.660
tetapi di sini kita sebenarnya berada dalam lingkungan di TypeScript di mana

02:33.660 --> 02:36.140
kita dapat menggunakan sintaks impor yang berbeda.

02:36.140 --> 02:38.230
Kita dapat menggunakan sintaks impor yang sama

02:38.230 --> 02:40.373
yang kita ketahui dari modul ES di browser.

02:41.240 --> 02:46.240
Jadi kita bisa menggunakan "import express dari 'express'" misalnya.

02:46.710 --> 02:48.620
Dan jika kita melakukan itu dan kemudian mengarahkan kursor ke "app",

02:48.620 --> 02:49.910
Anda lihat sekarang ini bertipe 'Express'.

02:49.910 --> 02:53.040
Jadi sekarang kita sudah mendapat dukungan TypeScript.

02:53.040 --> 02:54.569
Sekarang, satu catatan penting.

02:54.569 --> 02:58.790
Sebagai catatan. js juga terdapat sintaksis yang

02:58.790 --> 03:00.810
mirip dengan sintaksis ini.

03:00.810 --> 03:03.420
Sekarang berada di bawah bendera eksperimental, dan sudah

03:03.420 --> 03:06.190
berada di bawah bendera itu untuk waktu yang sangat lama, jadi

03:06.190 --> 03:10.010
menggunakan yang umum. js dalam catatan. js sejauh ini merupakan cara

03:10.010 --> 03:13.482
default dan paling umum untuk menambahkan impor dan ekspor.

03:13.482 --> 03:16.060
Sintaksis yang tampak seperti ini didukung jika Anda mengatur

03:16.060 --> 03:18.380
flag eksperimental ini, tetapi di sini dalam kode

03:18.380 --> 03:19.990
ini kita sebenarnya tidak menggunakan

03:19.990 --> 03:24.012
node eksperimental ini. sintaksis js.

03:24.012 --> 03:26.209
Sebagai gantinya kita menggunakan TypeScript.

03:26.209 --> 03:29.859
Setelah kita mengkompilasi ini ke JavaScript, ini akan berubah.

03:29.859 --> 03:31.860
Dan saya sebenarnya bisa menunjukkan ini kepada

03:31.860 --> 03:34.060
Anda sehingga kita juga bisa melaksanakannya.

03:34.060 --> 03:36.230
Jika Anda menjalankan "tsc" di

03:36.230 --> 03:40.330
sini, mungkin "tsc-w" untuk sudah masuk ke watch mode, Anda

03:40.330 --> 03:42.680
melihat ini memulai kompilasi.

03:42.680 --> 03:44.110
Ini menciptakan folder dist, dan di sana

03:44.110 --> 03:46.770
kita sekarang memiliki aplikasi. js, dan di sini,

03:46.770 --> 03:50.040
ini sekarang terlihat berbeda.

03:50.040 --> 03:54.500
Anda lihat, di sana sekarang tidak mengatur impor seperti yang kita

03:54.500 --> 03:55.710
miliki di sini.

03:55.710 --> 03:58.900
Ini menggunakan sintaksis yang berbeda.

03:58.900 --> 04:02.350
Jadi di sini, ini adalah kode yang sebenarnya akan dieksekusi.

04:02.350 --> 04:04.780
Dan kita dapat menjalankan ini dengan nodemon

04:04.780 --> 04:07.640
dengan alat ini yang secara otomatis me-restart server

04:07.640 --> 04:09.470
jika kode kita berubah dengan membuka

04:09.470 --> 04:12.230
tab baru di sini di terminal.

04:12.230 --> 04:13.620
Biarkan tab lain tetap terbuka

04:13.620 --> 04:15.960
karena itu adalah proses kompilasi TypeScript

04:15.960 --> 04:18.760
kita, dan di tab baru itu kita ingin memulai server kita dengan

04:18.760 --> 04:20.095
bantuan nodemon.

04:20.095 --> 04:22.990
Untuk itu, mari kita buka paketnya. json dan tambahkan skrip

04:22.990 --> 04:26.260
baru, mungkin skrip awal, di mana kita mengatakan

04:26.260 --> 04:30.900
"nodemon dist/app. js" sehingga nodemon mengeksekusi

04:30.900 --> 04:34.200
file ini di folder dist dan memulai server

04:34.200 --> 04:36.360
kita dengan itu.

04:36.360 --> 04:39.430
Dan dengan tambahan itu dan paketnya. file json yang tersimpan dapat

04:39.430 --> 04:43.240
kita jalankan npmstart untuk menjalankan server pengembangan kita.

04:43.240 --> 04:47.710
Dan sekarang sedang melayani aplikasi dist ini. Sekarang itulah pengaturan umum yang kita

04:47.710 --> 04:49.230
miliki, dan TypeScript sudah

04:49.230 --> 04:52.030
melakukan beberapa pekerjaan di sini.

04:52.030 --> 04:53.940
Kami juga memiliki TypeSupport.

04:53.940 --> 04:55.360
Dan di sini Anda lihat di aplikasi. ts kita dapat menulis

04:55.360 --> 04:57.756
kode yang terlihat sangat akrab bagi kita dengan

04:57.756 --> 05:01.420
sintaks impor/ekspor yang sudah kita ketahui, tetapi apa yang kita dapatkan

05:01.420 --> 05:03.640
sebagai output pada akhirnya adalah node JavaScript

05:03.640 --> 05:07.000
biasa. js dan itu sangat

05:07.000 --> 05:09.640
berguna.

05:09.640 --> 05:12.140
Sekarang dengan itu, mari kita lakukan hal-hal yang lebih berguna

05:12.140 --> 05:15.003
daripada hanya memulai server yang tidak melakukan apa pun.
