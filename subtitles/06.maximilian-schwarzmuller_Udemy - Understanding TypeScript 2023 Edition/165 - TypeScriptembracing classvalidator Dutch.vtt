WEBVTT

00:02.130 --> 00:03.630
Verteller: We hebben dus gekeken

00:03.630 --> 00:06.210
naar Lodash, een vanille JavaScript pakket waar we enkele

00:06.210 --> 00:08.360
vertalingen moesten installeren.

00:08.360 --> 00:10.310
En we hebben gekeken naar class-transformer,

00:10.310 --> 00:13.530
die ook werkt in vanilla JavaScript, maar ook bijzonder

00:13.530 --> 00:17.328
goed werkt in TypeScript.

00:17.328 --> 00:20.330
Laten we nu eens kijken naar class-validator.

00:20.330 --> 00:24.540
Dit is nu een pakket dat echt gebruik maakt van TypeScript.

00:24.540 --> 00:28.300
Het bouwt voort op het concept van TypeScript decorators,

00:28.300 --> 00:32.340
en het geeft ons een gloednieuwe manier om ermee te werken, of

00:32.340 --> 00:34.330
toch bijna gloednieuw.

00:34.330 --> 00:38.230
Als je mijn decoratormodule in deze cursus hebt gevolgd,

00:38.230 --> 00:41.200
zul je hier in deze lezing iets zien dat

00:41.200 --> 00:44.150
we ook zelf hebben opgebouwd.

00:44.150 --> 00:47.100
Maar nu, met deze bibliotheek van derden, hoeven we het

00:47.100 --> 00:49.330
wiel niet helemaal opnieuw uit te vinden,

00:49.330 --> 00:51.193
we hoeven het niet zelf te bouwen.

00:51.193 --> 00:53.320
En ook deze bibliotheek is aantoonbaar

00:53.320 --> 00:55.710
wat uitgebreider dan onze oplossing

00:55.710 --> 00:57.830
in de decoratormodule.

00:57.830 --> 01:00.026
Ik heb het over validatie.

01:00.026 --> 01:02.870
Dit is een pakket waarmee we validatieregels kunnen

01:02.870 --> 01:06.390
toevoegen met behulp van enkele decoratoren, binnen een klasse

01:06.390 --> 01:09.920
en dan telkens wanneer we zo'n klasse instantiëren, kunnen we

01:09.920 --> 01:12.610
die valideren voor de regels die we daar met behulp

01:12.610 --> 01:15.610
van decoratoren hebben ingesteld.

01:15.610 --> 01:18.960
Om te beginnen moeten we dit pakket importeren.

01:18.960 --> 01:23.130
Dus npm install class-validator --save, en daarna

01:23.130 --> 01:26.130
kunnen we meteen beginnen.

01:26.130 --> 01:29.220
Dus laat me de webpack-dev-server opnieuw opstarten, en om

01:29.220 --> 01:30.600
dit pakket te gebruiken, moeten

01:30.600 --> 01:33.580
we een paar decoratoren toevoegen aan de modellen, dus aan

01:33.580 --> 01:35.740
de klassen waar we bepaalde eigenschappen

01:35.740 --> 01:37.490
willen valideren.

01:37.490 --> 01:39.730
Dus in mijn geval hier in het productmodel,

01:39.730 --> 01:43.240
zal ik iets importeren van class-validator.

01:43.240 --> 01:45.110
En nu weer, als je de decoratormodule

01:45.110 --> 01:47.360
in deze cursus hebt gevolgd, is dit

01:47.360 --> 01:49.640
een concept dat ik daar ook al vanaf

01:49.640 --> 01:52.870
nul heb opgebouwd zonder dit pakket.

01:52.870 --> 01:56.270
Maar we hebben natuurlijk een zeer naïeve en basale versie ingebouwd,

01:56.270 --> 01:57.840
met dit pakket hoeven we het

01:57.840 --> 02:01.200
niet zelf te bouwen en het is ook uitgebreider.

02:01.200 --> 02:02.770
Nu kunnen we vanuit class-validator

02:02.770 --> 02:04.820
bepaalde decorators importeren.

02:04.820 --> 02:05.893
Bijvoorbeeld,

02:07.139 --> 02:08.630
IsNotEmpty,

02:08.630 --> 02:11.410
of ook, IsNumber.

02:11.410 --> 02:13.500
We kunnen ook IsPositive importeren.

02:15.940 --> 02:18.940
Nu kunnen we ze toevoegen aan de eigenschappen die we willen valideren.

02:18.940 --> 02:20.900
Dus hier bijvoorbeeld op de titel

02:20.900 --> 02:24.220
kunnen we IsNotEmpty als decorator toevoegen, en

02:24.220 --> 02:26.390
dit zijn allemaal decoratorfabrieken,

02:26.390 --> 02:29.610
dus je moet ze altijd uitvoeren.

02:29.610 --> 02:31.318
En ook hier,

02:31.318 --> 02:33.485
IsNumber en

02:34.472 --> 02:37.380
IsPositive.

02:37.380 --> 02:38.763
Laten we dat uitvoeren.

02:40.250 --> 02:41.730
Om hier decorateurs te gebruiken,

02:41.730 --> 02:44.730
moet je ook naar tsconfig gaan. js bestand, en zorg

02:44.730 --> 02:49.550
ervoor dat je daar experimentele decoraties aanzet.

02:49.550 --> 02:51.593
Sla dit daarna op, en nu moeten

02:52.750 --> 02:55.040
deze gebieden hier ook weg.

02:55.040 --> 02:57.300
We moeten echter ook de dev server opnieuw opstarten,

02:57.300 --> 03:00.840
zodat deze de nieuwe tsconfig oppikt. js conversie.

03:00.840 --> 03:02.650
Dus nu hebben we deze regels toegevoegd,

03:02.650 --> 03:04.768
deze validatie regels hier.

03:04.768 --> 03:07.710
We zeggen eigenlijk dat de titel nooit een lege string

03:07.710 --> 03:11.830
mag zijn en dat de getallen een positief getal moeten zijn.

03:11.830 --> 03:13.980
Nu kunnen we hier een nieuw product

03:13.980 --> 03:15.119
maken, laten we zeggen

03:15.119 --> 03:16.870
daar, newProd, waarbij we

03:16.870 --> 03:19.078
nieuw product oproepen en ik een

03:19.078 --> 03:21.720
lege tekenreeks doorgeef voor de titel,

03:21.720 --> 03:25.210
en dan min 5. 99 in voor het nummer.

03:25.210 --> 03:26.700
Als ik dan console. log newProd,

03:27.576 --> 03:29.920
getInformation, en voer

03:29.920 --> 03:33.120
dit uit, laten we kijken waar het

03:33.120 --> 03:34.830
werkt.

03:34.830 --> 03:35.683
Oké, bewaar dat.

03:37.840 --> 03:40.040
Huh, het werkt.

03:40.040 --> 03:42.330
Nou, we zijn er nog niet helemaal.

03:42.330 --> 03:46.470
Met onze decorateurs stellen we de regels op.

03:46.470 --> 03:49.560
Maar deze decorateurs alleen doen niet veel.

03:49.560 --> 03:52.880
In plaats daarvan moeten we nu ook de validator

03:52.880 --> 03:56.190
methode importeren van class-validator.

03:56.190 --> 03:57.300
Dus uit dit pakket importeren

03:57.300 --> 03:59.840
we valideren en we moeten dit uitvoeren op een

03:59.840 --> 04:02.260
concrete instantie, van de klasse waaraan

04:02.260 --> 04:05.750
we onze decoratoren hebben toegevoegd.

04:05.750 --> 04:07.300
Dus in dit geval

04:07.300 --> 04:12.020
kunnen we valideren en de newProd doorgeven.

04:12.020 --> 04:14.670
En valideren zal dan een belofte teruggeven

04:14.670 --> 04:19.150
die eigenlijk validatiefouten kan opleveren.

04:19.150 --> 04:21.440
Dus we kunnen dan hier toevoegen, als je in een

04:21.440 --> 04:23.080
easing functie zit, zou je natuurlijk

04:23.080 --> 04:25.680
ook een enkel gewicht kunnen gebruiken.

04:25.680 --> 04:27.920
En hier krijgen we de fouten terug die

04:27.920 --> 04:30.093
deze valideerfunctie vindt.

04:30.980 --> 04:31.813
Nu belangrijk,

04:31.813 --> 04:34.950
we eindigen altijd in then, zelfs als er fouten zijn, dus

04:34.950 --> 04:36.560
als er validatie fouten zijn,

04:36.560 --> 04:38.420
komen we niet in een of ander catch

04:38.420 --> 04:41.120
blok, we gaan altijd in het then blok.

04:41.120 --> 04:44.360
Nu kunnen we hier controleren of fouten,

04:44.360 --> 04:45.980
wat een Array is, puntlengte

04:45.980 --> 04:48.400
groter is dan nul.

04:48.400 --> 04:51.300
Wat betekent dat er validatie fouten zijn.

04:51.300 --> 04:52.910
In dit geval kunnen we validatiefouten

04:53.750 --> 04:56.700
loggen, en misschien ook de gevonden fouten

04:56.700 --> 04:59.200
uitvoeren.

04:59.200 --> 05:01.820
Dus console. log fouten, en anders

05:01.820 --> 05:03.700
in mijn geval hier, zal ik de

05:03.700 --> 05:05.290
informatie loggen.

05:05.290 --> 05:06.580
Nu hangt het natuurlijk af van

05:06.580 --> 05:09.100
de toepassing die je bouwt wat je hier wilt doen.

05:09.100 --> 05:10.860
In dit geval kunt u de gebruiker

05:10.860 --> 05:13.790
een waarschuwing geven als er fouten zijn.

05:13.790 --> 05:15.360
Misschien moet je de ingang opnieuw instellen,

05:15.360 --> 05:16.520
wat je ook wilt doen.

05:16.520 --> 05:19.690
Hier log ik iets op de console.

05:19.690 --> 05:22.080
En als we dat nu opslaan, dan zie

05:22.080 --> 05:24.870
je validatiefouten, en dan hier een

05:24.870 --> 05:27.830
array van de gevonden fouten.

05:27.830 --> 05:31.890
De eerste fout betreft bijvoorbeeld de titel,

05:31.890 --> 05:34.770
die niet leeg mag zijn.

05:34.770 --> 05:38.290
En de tweede fout betreft de prijseigenschap,

05:38.290 --> 05:41.150
dat het een positief getal moet zijn.

05:41.150 --> 05:44.950
En dit is hoe gemakkelijk u vrij krachtige validatie kunt

05:44.950 --> 05:47.960
toevoegen aan uw projecten met deze op decoratoren

05:47.960 --> 05:50.170
gebaseerde aanpak.

05:50.170 --> 05:53.190
Verwant aan wat we eerder in de cursus deden, en de

05:53.190 --> 05:54.530
decorators module, maar

05:54.530 --> 05:56.062
zoals ik al meerdere keren

05:56.062 --> 05:59.890
zei, uitgebreider met een hoop ingebouwde regels, en daar kun

05:59.890 --> 06:01.190
je natuurlijk alles over

06:01.190 --> 06:03.610
leren in de docs van dit pakket, en zonder

06:03.610 --> 06:06.350
het wiel opnieuw uit te vinden.

06:06.350 --> 06:09.300
Het class-validator pakket is dus echt een krachtig

06:09.300 --> 06:10.930
pakket waarvan u op de hoogte

06:10.930 --> 06:14.693
moet zijn als u grotere projecten bouwt met TypeScript.
