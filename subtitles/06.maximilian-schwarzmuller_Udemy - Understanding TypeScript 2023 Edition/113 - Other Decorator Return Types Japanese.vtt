WEBVTT

00:02.440 --> 00:05.240
ナレーター: デコレーターやデコレーターファクトリー､

00:05.240 --> 00:08.120
そしてデコレーターの戻り値を利用することで､

00:08.120 --> 00:27.230
非常に素晴らしいものを構築できることを確認しました｡ この例では､ クラスデコレーターによって､ デコレーターを追加したクラスをまったく別のクラスに置き換えることができます｡

00:27.230 --> 00:32.030
これで､ 他のデコレータでも値を返すことができるようになりましたが､ すべてのデコレータで返せるわけではありません｡

00:32.030 --> 00:35.430
あるいは､ そのすべてが戻り値を尊重するわけではありません｡ 

00:35.430 --> 00:38.150
さて､ 何かを返すことができるデコレータは､

00:38.150 --> 00:43.540
メソッドに追加するデコレータとアクセッサに追加するデコレータがあります｡

00:43.540 --> 00:47.400
つまり､ セッターのlog 2とメソッドのlog 3､ これら2つのデコレータは何かを返すことができ､

00:47.400 --> 00:54.080
TypeScriptはそれを使うことができるのです｡

00:54.080 --> 00:58.040
もちろん､ プロパティやパラメータに対するデコレータも､ 何かを返すことができるが､

00:58.040 --> 01:02.500
TypeScriptはそれを無視する｡

01:02.500 --> 01:05.030
そのため､ 戻り値はそこではサポートされていないか､

01:05.030 --> 01:07.700
正確には使用されていません｡

01:07.700 --> 01:09.690
さて､ ログ3では何が返せるのでしょうか？

01:09.690 --> 01:12.680
メソッドデコレータでもログ2でもそうですが､

01:12.680 --> 01:15.320
アクセサーデコレータでもそうです｡

01:15.320 --> 01:19.320
全く新しいプロパティディスクリプタを返すことができる｡ 

01:19.320 --> 01:23.110
ログ2とログ3､ これは私が言っている2つのデコレーターのことですよね？

01:23.110 --> 01:30.510
ログ2とログ3は､ どちらもプロパティやメソッドからディスクリプタを取得します｡

01:30.510 --> 01:33.034
アクセサはメソッドのようなものですから､

01:33.034 --> 01:36.220
そこで実行される関数があるわけです｡

01:36.220 --> 01:39.072
ご存知のように､ プロパティ記述子はJavaScriptのものです｡

01:39.072 --> 01:41.980
このページをもう一度見て､ 再読み込みしてみると､

01:41.980 --> 01:47.260
たとえばアクセサ・デコレータでは､ プロパティ記述子はこのオブジェクトで､ 設定可能､

01:47.260 --> 01:54.910
列挙可能､ 取得と設定のプロパティを持っていることがわかります｡

01:54.910 --> 01:57.660
そして､ メソッド・デコレーターの記述子は､ このオブジェクトで､

01:57.660 --> 01:59.330
configurable､ enumerable､

01:59.330 --> 02:02.290
value､ writableを持ちます｡

02:02.290 --> 02:04.410
そして､ これはバニラJavaScriptです｡ 

02:04.410 --> 02:07.830
バニラJavaScriptにもプロパティ記述子はありますよね｡ 

02:07.830 --> 02:11.710
これらは､ プロパティをより詳細に定義することができる｡ 

02:11.710 --> 02:14.430
もちろん､ プロパティに値を割り当てることもできますし､

02:14.430 --> 02:15.990
メソッドについて話しているので､

02:15.990 --> 02:17.940
この場合の値は関数ですが､ 書き込み可能かどうか､

02:17.940 --> 02:24.700
つまりオブジェクトが作成された後に変更できるかどうかを制御することもできます｡

02:24.700 --> 02:25.950
設定可能かどうか､ つまり､

02:25.950 --> 02:27.140
設定を変更できるかどうか､

02:27.140 --> 02:29.570
このプロパティを削除できるかどうかです｡

02:29.570 --> 02:30.770
また､ 列挙可能かどうか､

02:30.770 --> 02:35.410
つまり､ 例えばオブジェクトをループしたときに表示されるかどうかということです｡

02:35.410 --> 02:38.790
したがって､ 例えばデフォルトではこのメソッドはfalseに設定され､

02:38.790 --> 02:40.930
オブジェクトでfor inループを使用した場合､

02:40.930 --> 02:44.040
このメソッドはプロパティとして出力されません｡

02:44.040 --> 02:47.180
アクセサには､ configurableとenumerableもありますが､

02:47.180 --> 02:49.750
getとsetがあり､ もちろん､ 例えば､

02:49.750 --> 02:53.040
全く新しいsetメソッドを割り当てた新しいディスクリプタを返したり､

02:53.040 --> 02:58.750
突然get機能を追加したりすることも可能です｡

02:58.750 --> 03:01.585
つまり､ ログ2やログ3では､ 最終的に新しいディスクリプタオブジェクトを返すことができ､

03:01.585 --> 03:10.560
それをTypeScriptに明示するために､ 戻り値の型をプロパティディスクリプタに設定したり､ そこでsetキーワードやgetキーワード､

03:10.560 --> 03:24.800
configurableやenumerableプロパティを設定して､ このアクセッサやメソッドがどう構成されるかを変更することができるのだ｡

03:24.800 --> 03:29.800
しかし､ 実際にメソッド・デコレーターを使った例をお見せしましょう｡

03:29.800 --> 03:32.520
このメソッド・デコレーターは何かを返すので､

03:32.520 --> 03:42.533
デコレーターの助けを借りて興味深いものを作ることができます｡
