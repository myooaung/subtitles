WEBVTT

00:02.170 --> 00:03.860
Instrutor: Então agora que registramos algumas rotas,

00:03.860 --> 00:05.630
vamos adicionar alguma lógica para estas rotas.

00:05.630 --> 00:07.730
Para isso, vou adicionar uma pasta de controladores.

00:07.730 --> 00:08.750
Isso não é uma obrigação,

00:08.750 --> 00:11.550
mas quero dividir minha lógica aqui nos controladores

00:11.550 --> 00:13.650
e as rotas na pasta de rotas.

00:13.650 --> 00:16.740
E nos controladores, acrescentarei também um todos. ts, e que agora vai realizar

00:16.740 --> 00:19.230
as funções de controlador que queremos apontar

00:19.230 --> 00:21.990
a partir de dentro de nossas rotas.

00:21.990 --> 00:25.120
Portanto, aqui, eu preciso de uma função que vou exportar,

00:25.120 --> 00:27.220
e vou criá-la como uma função de seta, que

00:27.220 --> 00:29.170
não é uma função obrigatória, e vou nomear

00:29.170 --> 00:31.290
este createTodo, e é uma função que receberá

00:32.420 --> 00:34.510
estes parâmetros típicos que você recebe

00:34.510 --> 00:36.720
em cada função de middleware de forma expressa,

00:36.720 --> 00:38.830
uma solicitação, uma resposta, e a próxima

00:38.830 --> 00:41.297
função.

00:41.297 --> 00:44.550
E acabamos de ver de onde podemos obter os tipos.

00:44.550 --> 00:47.190
Podemos importar pedido, resposta

00:47.190 --> 00:50.460
e próxima função do Express.

00:50.460 --> 00:52.800
Isto nos importa esses tipos.

00:52.800 --> 00:54.910
Podemos então adicioná-las aqui.

00:54.910 --> 00:57.230
Agora, acrescentar sempre todos esses tipos aqui como

00:57.230 --> 00:59.980
fizemos no middleware de tratamento de erros também pode ser

00:59.980 --> 01:01.300
incômodo, no entanto.

01:01.300 --> 01:03.750
Funciona, mas pode ser incômodo.

01:03.750 --> 01:05.190
Portanto, há um atalho.

01:05.190 --> 01:08.220
Em vez de definir os tipos em todos estes parâmetros,

01:08.220 --> 01:11.160
podemos também simplesmente dizer ao TypeScript

01:11.160 --> 01:14.610
que tipo de função queremos armazenar nesta constante do CreateTodo,

01:14.610 --> 01:16.260
e então podemos simplesmente

01:16.260 --> 01:19.530
importar o tipo RequestHandler do Express, e então definimos

01:19.530 --> 01:24.340
isto aqui, CreateTodo, para digitar RequestHandler.

01:24.340 --> 01:28.780
E agora você vê o TypeScript sabe que aqui temos um pedido, aqui temos uma resposta,

01:28.780 --> 01:30.560
e aqui temos esta próxima função,

01:30.560 --> 01:32.590
porque nosso RequestHandler está

01:32.590 --> 01:35.730
definido para se parecer com isto.

01:35.730 --> 01:38.080
É uma função com três parâmetros onde o primeiro

01:38.080 --> 01:40.160
parâmetro é a solicitação, o segundo

01:40.160 --> 01:42.030
parâmetro é a resposta, e o terceiro

01:42.030 --> 01:44.810
parâmetro é a função seguinte.

01:44.810 --> 01:47.313
Portanto, isto pode simplificar esta configuração aqui.

01:48.195 --> 01:49.380
RequestHandler, claro,

01:49.380 --> 01:51.360
está sempre disponível porque instalamos

01:51.360 --> 01:52.570
os tipos para expresso e, portanto,

01:52.570 --> 01:55.270
podemos acrescentar esta importação aqui.

01:55.270 --> 01:57.940
Esteja ciente de que esta importação sempre desaparecerá uma

01:57.940 --> 01:59.960
vez que esta compilação for feita em JavaScript,

01:59.960 --> 02:02.300
porque estamos apenas importando um tipo aqui.

02:02.300 --> 02:05.030
Isto não é importar qualquer código que possa executar.

02:05.030 --> 02:06.930
É apenas a importação de um tipo.

02:06.930 --> 02:08.650
E, portanto, durante a compilação,

02:08.650 --> 02:11.290
ele será removido porque não acrescenta nada

02:11.290 --> 02:15.860
que seria necessário quando isto é executado em JavaScript regular.

02:15.860 --> 02:16.693
Com isso, entretanto,

02:16.693 --> 02:18.900
consegui a função createTodo, e agora

02:18.900 --> 02:22.240
por que não adicionamos aqui um array de TODOS para gerenciar

02:22.240 --> 02:25.530
alguns apenas na memória, é claro.

02:25.530 --> 02:28.310
Isto desaparecerá sempre que nosso servidor for reiniciado,

02:28.310 --> 02:31.460
pois no final é apenas uma constante no JavaScript.

02:31.460 --> 02:32.293
Você poderia, é claro,

02:32.293 --> 02:34.770
imaginar falar com um banco de dados aqui também,

02:34.770 --> 02:36.360
mas eu quero manter isto simples

02:36.360 --> 02:38.630
porque se trata de JavaScript e TypeScript e

02:38.630 --> 02:41.323
não tanto de conexões de banco de dados.

02:42.390 --> 02:43.790
Então aqui eu tenho que

02:43.790 --> 02:47.600
dosar, e agora aqui eu quero criar um novo para fazer aqui quando

02:47.600 --> 02:49.320
recebemos um pedido, e isso

02:49.320 --> 02:51.020
deve ser um novo objeto, e por

02:51.020 --> 02:52.980
que não criamos um plano para este

02:52.980 --> 02:55.420
objeto, um modelo.

02:55.420 --> 02:57.640
Portanto, vou adicionar uma pasta

02:57.640 --> 02:59.030
de modelos, e nessa pasta

02:59.030 --> 03:04.030
de modelos, vou adicionar um todo. ts arquivam e exportam uma classe aqui, que

03:04.760 --> 03:06.250
eu nomeio Todo, onde eu defino

03:06.250 --> 03:08.210
como deve ser o aspecto.

03:08.210 --> 03:10.330
Lá podemos adicionar um construtor

03:10.330 --> 03:13.129
e também usar este atalho TypeScript onde podemos

03:13.129 --> 03:16.440
adicionar um modificador de acesso como público e depois

03:16.440 --> 03:19.360
um nome de propriedade como ID, que é do tipo string,

03:19.360 --> 03:21.250
digamos, e texto, que também é

03:21.250 --> 03:24.050
do tipo string, e então o TypeScript irá automaticamente

03:24.050 --> 03:32.750
adicionar campos, propriedades com nomes iguais, e valores atribuídos que passamos para o construtor a esses campos sempre que instanciarmos

03:32.750 --> 03:37.230
isso para fazer classe.

03:37.230 --> 03:38.670
Portanto, vou usar esta sintaxe

03:38.670 --> 03:40.060
aqui, e você já aprendeu sobre

03:40.060 --> 03:41.810
esta sintaxe no início do curso.

03:41.810 --> 03:44.660
E agora em todos. ts aqui no controlador,

03:44.660 --> 03:47.893
é claro que podemos importar Todo de,

03:49.020 --> 03:53.403
subindo um nível, modelos/todo, e usar este tipo

03:54.530 --> 03:58.800
e classe agora aqui em nosso arquivo.

03:58.800 --> 04:01.320
E é tanto um tipo quanto uma classe porque, bem,

04:01.320 --> 04:02.800
obviamente, é uma classe, e

04:02.800 --> 04:05.750
cada classe também age automaticamente como um tipo.

04:05.750 --> 04:08.550
Isso também foi o que você viu ao longo deste curso.

04:08.550 --> 04:09.750
Portanto, agora aqui,

04:09.750 --> 04:11.910
podemos dizer, antes de tudo, que o TODOS aqui

04:11.910 --> 04:13.550
será um conjunto de dosar.

04:13.550 --> 04:15.480
Esta anotação extra não dói para que tenhamos

04:15.480 --> 04:18.590
o suporte adequado uma vez que começamos a adicionar ou começar

04:18.590 --> 04:21.410
a trabalhar com os dosar nesta matriz.

04:21.410 --> 04:23.610
E aqui quando eu crio um novo para

04:23.610 --> 04:26.220
fazer, agora eu o crio instanciando esta

04:26.220 --> 04:28.370
classe, e temos que passar em um

04:28.370 --> 04:32.030
ID, e aqui eu criarei um ID pseudo-único aleatório com

04:32.030 --> 04:34.230
Math random toString.

04:34.230 --> 04:35.270
Isto não é realmente único,

04:35.270 --> 04:36.660
mas é suficientemente bom aqui.

04:36.660 --> 04:39.170
E agora pelo valor aqui, lá eu quero,

04:39.170 --> 04:41.670
é claro, definir algum texto, que eu

04:41.670 --> 04:45.530
espero receber em meu corpo de solicitação de entrada.

04:45.530 --> 04:48.823
Portanto, espero receber meu texto aqui, basicamente

04:49.750 --> 04:53.270
no corpo do pedido. texto, para que eu possa

04:53.270 --> 04:56.280
então definir o texto como um valor aqui.

04:56.280 --> 04:57.113
Agora, isto funciona,

04:57.113 --> 04:59.640
mas por favor, veja que isto só funciona porque o

04:59.640 --> 05:02.320
TypeScript vê que isto é de qualquer tipo.

05:02.320 --> 05:04.420
Não sabe que se trata de um fio.

05:04.420 --> 05:05.510
E não pode saber, porque

05:05.510 --> 05:08.390
como o TypeScript saberia quais dados farão parte

05:08.390 --> 05:11.140
de nossos pedidos recebidos?

05:11.140 --> 05:12.430
Não está claro para ele.

05:12.430 --> 05:14.260
Nunca estamos declarando em nenhum

05:14.260 --> 05:17.620
lugar o que estará dentro das solicitações que recebemos.

05:17.620 --> 05:19.270
Agora, como podemos melhorar isso?

05:19.270 --> 05:21.780
Bem, podemos utilizar a digitação, por exemplo.

05:21.780 --> 05:23.660
A digitação é sempre uma ótima solução

05:23.660 --> 05:26.090
se você souber de um tipo específico, mas o TypeScript

05:26.090 --> 05:27.360
não.

05:27.360 --> 05:30.440
Portanto, aqui no corpo do pedido, antes de acessarmos o texto, podemos

05:30.440 --> 05:32.650
datilografá-lo para ser um objeto onde temos uma

05:32.650 --> 05:34.900
propriedade de texto, que é uma cadeia.

05:34.900 --> 05:36.920
Como estamos construindo este aplicativo,

05:36.920 --> 05:40.320
sabemos o que esperamos ser em nossos pedidos recebidos.

05:40.320 --> 05:42.750
Portanto, como sabemos que haverá uma propriedade de texto

05:42.750 --> 05:44.166
no corpo de solicitação entrante,

05:44.166 --> 05:46.630
podemos lançá-lo para ser um objeto desse tipo.

05:46.630 --> 05:51.480
E agora, aqui nós obtemos o TypeScript adequado e também o suporte IDE.

05:51.480 --> 05:53.560
Então, com isso, acrescentamos um novo a fazer.

05:53.560 --> 05:55.470
Agora podemos alcançar a TODOS

05:55.470 --> 05:58.280
e empurrar o novo para fazer nesta série.

05:58.280 --> 05:59.330
E mais uma vez, isto,

05:59.330 --> 06:01.060
naturalmente, só o guardará aqui

06:01.060 --> 06:02.750
como constante e, portanto, só

06:02.750 --> 06:05.650
na memória, porque trabalhar com um banco de dados não

06:05.650 --> 06:08.880
está realmente diretamente relacionado ao nó ou TypeScript,

06:08.880 --> 06:11.170
mas, bem, ao banco de dados.

06:11.170 --> 06:14.140
Então, com isso, temos aqui a função criar Todo.

06:14.140 --> 06:16.400
Agora vamos às rotas para fazer e importar

06:16.400 --> 06:19.070
esta função de controlador.

06:19.070 --> 06:22.030
Portanto, importe da pasta dos controladores

06:22.030 --> 06:24.000
a partir do arquivo de todos

06:24.000 --> 06:26.660
lá dentro, e importe a função create Todo

06:26.660 --> 06:30.100
e aponte para esta função aqui na rota do correio,

06:30.100 --> 06:35.100
para que qualquer pedido que vise cortar todos os cortes nada alcance a

06:36.060 --> 06:38.390
função createTodo.

06:38.390 --> 06:39.580
Não o execute aqui.

06:39.580 --> 06:40.650
Basta apontar para ele.

06:40.650 --> 06:43.890
Ele será executado para você por nó e expresso em seu servidor

06:43.890 --> 06:45.883
web em execução mais tarde.

06:46.880 --> 06:49.630
Agora temos esta função aqui.

06:49.630 --> 06:50.900
No entanto, ainda não terminamos.

06:50.900 --> 06:52.290
No controlador, todos nós devemos

06:52.290 --> 06:54.360
apenas devolver uma resposta.

06:54.360 --> 06:56.720
Assim, aqui podemos enviar uma resposta,

06:56.720 --> 06:59.420
por exemplo, no formato JSON com o método JSON,

06:59.420 --> 07:02.300
onde dizemos que a mensagem criou o todo ou o que

07:02.300 --> 07:04.040
você quiser, e criamos a chave

07:04.040 --> 07:07.770
Todo, talvez, onde encaminhamos o novo para fazer isso foi

07:07.770 --> 07:10.520
adicionado no lado do servidor para que no

07:10.520 --> 07:12.660
cliente, também pudéssemos usar

07:12.660 --> 07:14.490
isso.

07:14.490 --> 07:17.750
E talvez também definir aqui um código de status de 201

07:17.750 --> 07:19.700
para indicar que fomos bem-sucedidos

07:19.700 --> 07:21.793
e que um recurso foi criado.

07:22.680 --> 07:24.640
Agora só temos que ter certeza de que

07:24.640 --> 07:28.500
o corpo que estamos tentando extrair aqui realmente existe.

07:28.500 --> 07:29.770
E para dados e aplicativos. ts, precisamos

07:29.770 --> 07:33.130
analisar os corpos dos pedidos recebidos.

07:33.130 --> 07:37.620
Para isso, podemos importar do pacote de carroceria

07:37.620 --> 07:39.220
que também instalamos,

07:39.220 --> 07:41.380
e a partir desse pacote,

07:41.380 --> 07:46.380
podemos importar o método JSON assim.

07:46.410 --> 07:49.170
E então aqui você pode registrar isto executado

07:49.170 --> 07:51.310
como um middleware.

07:51.310 --> 07:54.480
Portanto, este é um middleware fornecido por um pacote

07:54.480 --> 07:58.130
de terceiros que analisará os corpos de todos os pedidos recebidos

07:58.130 --> 08:01.570
e extrairá quaisquer dados JSON encontrados ali para então

08:01.570 --> 08:05.990
preencher a chave do corpo deste objeto de pedido com aqueles dados JSON

08:05.990 --> 08:07.970
analisados.

08:07.970 --> 08:10.290
É o que faz este middleware JSON

08:10.290 --> 08:12.503
do pacote body-parser.

08:13.890 --> 08:16.520
E com isso, devemos ter um servidor que seja capaz

08:16.520 --> 08:18.230
de criar novos dosadores.

08:18.230 --> 08:22.210
Salvar todos os arquivos e garantir que eles sejam recompilados sem erros.

08:22.210 --> 08:26.150
Certifique-se de que o nodemon ainda esteja servindo o aplicativo. arquivo js.

08:26.150 --> 08:28.560
E agora precisamos enviar um pedido pelo correio.

08:28.560 --> 08:31.150
E com o navegador, não podemos fazer isso, mas

08:31.150 --> 08:34.260
podemos usar uma ferramenta para isso, carteiro.

08:34.260 --> 08:35.600
Você pode simplesmente procurá-lo

08:35.600 --> 08:38.160
e depois instalar o aplicativo do carteiro em seu sistema.

08:38.160 --> 08:39.283
É de uso livre.

08:40.440 --> 08:41.570
Uma vez instalado, você

08:41.570 --> 08:43.390
pode iniciar e deve ver uma tela que se

08:43.390 --> 08:44.440
parece com esta.

08:44.440 --> 08:46.460
Se você vir uma sobreposição modal, você pode

08:46.460 --> 08:48.010
simplesmente fechar isso.

08:48.010 --> 08:50.240
E aqui você pode agora criar uma nova solicitação

08:50.240 --> 08:51.740
clicando sobre isso mais, escolhendo

08:51.740 --> 08:53.040
o tipo de solicitação, neste

08:53.040 --> 08:55.100
caso, uma solicitação postal, inserindo

08:55.100 --> 08:56.450
a URL.

08:56.450 --> 08:58.820
Aqui é o localhost 3000, 3000 porque

08:58.820 --> 09:01.660
foi o porto que eu escolhi aqui.

09:01.660 --> 09:03.100
E então precisamos enviar

09:03.100 --> 09:06.320
o pedido para cortar todos os cortes de nada.

09:06.320 --> 09:10.000
Portanto, aqui para cortar todos os cortes, nada.

09:10.000 --> 09:12.120
Queremos anexar um corpo ao pedido,

09:12.120 --> 09:15.440
e que deve ser um corpo bruto JSON aqui para enviar alguns

09:15.440 --> 09:17.010
dados JSON.

09:17.010 --> 09:19.480
E agora, o que precisamos enviar aqui?

09:19.480 --> 09:21.840
Bem, o que extraímos na função de middleware, então

09:21.840 --> 09:22.880
neste caso, devemos

09:22.880 --> 09:24.570
ter uma propriedade de texto como

09:24.570 --> 09:27.410
parte de nossos dados JSON que estamos enviando.

09:27.410 --> 09:29.610
Então aqui, vamos adicionar um texto como

09:29.610 --> 09:31.070
nome e depois qualquer texto

09:31.070 --> 09:33.230
de sua escolha, como terminar o curso.

09:33.230 --> 09:36.960
E se você agora clicar em enviar, ele envia o pedido, e aqui está

09:36.960 --> 09:38.990
a resposta, e isto parece bom.

09:38.990 --> 09:40.670
Temos a criar um a fazer de volta.

09:40.670 --> 09:43.600
Vemos a identificação que foi gerada e o texto.

09:43.600 --> 09:45.870
Portanto, nosso backend funciona claramente aqui.

09:45.870 --> 09:47.690
E escrevemos tudo isso com TypeScript, mas

09:47.690 --> 09:49.880
estamos servindo como JavaScript regular.

09:49.880 --> 09:51.183
Esse é o truque todo.
