WEBVTT

00:02.130 --> 00:03.970
Instructeur: Allereerst kunnen we hier onze

00:03.970 --> 00:06.480
ontwikkelingsserver starten met npm start, en dit is een

00:06.480 --> 00:08.440
proces dat we moeten blijven draaien omdat dit

00:08.440 --> 00:10.940
onze bestanden in de gaten houdt voor wijzigingen.

00:10.940 --> 00:13.270
En als er iets verandert, dus als u specifiek

00:13.270 --> 00:15.620
een wijziging opslaat, zal het de soorten

00:15.620 --> 00:17.776
codes opnieuw compileren naar JavaScript,

00:17.776 --> 00:20.090
JSX opnieuw compileren naar JavaScript,

00:20.090 --> 00:22.500
en uiteindelijk, dan bouwt u uw react-applicatie

00:22.500 --> 00:25.750
en serveert het op lokale host 3000, waar, op dit moment, u niet

00:25.750 --> 00:27.630
veel ziet.

00:27.630 --> 00:29.430
Je kunt hier in de Dev console zien dat

00:29.430 --> 00:31.800
het lijkt te werken door die uitvoer hier.

00:31.800 --> 00:32.900
Je ziet natuurlijk

00:32.900 --> 00:34.340
niet veel omdat we hier in

00:34.340 --> 00:36.700
App niets renderen. tsx op dit moment.

00:36.700 --> 00:38.170
Dat zal natuurlijk veranderen.

00:38.170 --> 00:39.420
En nu dat klaar is,

00:39.420 --> 00:41.130
kunnen we wat code schrijven

00:41.130 --> 00:43.580
of analyseren wat we hebben.

00:43.580 --> 00:46.750
In de index. tsx hebben we niets speciaals, toch?

00:46.750 --> 00:49.060
Dit is gewone JavaScript code.

00:49.060 --> 00:52.950
In App. tsx, zien we deze typetoewijzing

00:52.950 --> 00:55.250
wel en daar, wat we kunnen zien is dat we

00:55.250 --> 00:57.980
dit vreemde type hebben toegewezen aan App.

00:57.980 --> 01:00.270
Nu, als we dat type even negeren, wat is

01:00.270 --> 01:02.480
er eigenlijk opgeslagen in App?

01:02.480 --> 01:04.840
Nou ja, een functie, een pijlfunctie, maar

01:04.840 --> 01:07.290
dat is dus nog steeds een gewone functie.

01:07.290 --> 01:09.960
Waarom functioneert dit type hier niet of waarom is dit niet

01:09.960 --> 01:12.570
een van de functietypes waarover we geleerd hebben?

01:12.570 --> 01:14.030
Nou, het is onder de motorkap,

01:14.030 --> 01:16.450
maar dit is een type voorzien door react,

01:16.450 --> 01:18.100
en nu, belangrijk natuurlijk

01:18.100 --> 01:21.070
voorzien door het react types pakket.

01:21.070 --> 01:26.070
Als je naar node modules gaat zien we hier de @types map en daarin

01:26.390 --> 01:28.470
zien we veel types, en we zien

01:28.470 --> 01:30.670
hier ook de react-types, alle

01:30.670 --> 01:32.600
react-dom types.

01:32.600 --> 01:35.840
En uiteindelijk wordt dit type impliciet automatisch

01:35.840 --> 01:39.340
geÃ¯mporteerd uit de map react types, zou je kunnen zeggen.

01:39.340 --> 01:40.870
Nu, wat is dit type?

01:40.870 --> 01:44.490
FC staat gewoon voor functiecomponent.

01:44.490 --> 01:46.310
Er is ook een langere vorm, die je zou

01:46.310 --> 01:47.570
kunnen gebruiken.

01:47.570 --> 01:49.240
Dat is precies hetzelfde type.

01:49.240 --> 01:51.090
De andere is gewoon een snelkoppeling

01:51.090 --> 01:54.300
en deze definieert gewoon dat wat we hier in App opslaan

01:54.300 --> 01:57.750
een functie moet zijn, maar een functie die in aanmerking

01:57.750 --> 02:00.550
komt als functiecomponent in react.

02:00.550 --> 02:02.840
Je kunt natuurlijk ook op klasse gebaseerde componenten

02:02.840 --> 02:05.760
schrijven, en daarom heb je hier ook een klassieke component

02:05.760 --> 02:07.420
en dan zou je daar een klasse in moeten

02:07.420 --> 02:09.480
opslaan in plaats van een functie, maar we gaan

02:09.480 --> 02:12.720
hier in deze cursus voor functiecomponenten.

02:12.720 --> 02:14.670
Nu, dit is een functiecomponent

02:14.670 --> 02:17.620
omdat het een functie is die JSX teruggeeft en dat

02:17.620 --> 02:20.850
is hoe een functiecomponent wordt gemaakt in react.

02:20.850 --> 02:24.180
Als ik dit return statement tijdelijk zou verwijderen, zouden we

02:24.180 --> 02:26.730
dus een fout kunnen krijgen, allemaal als ik dit probeer

02:26.730 --> 02:28.800
op te slaan en het wil compileren.

02:28.800 --> 02:32.440
We zouden een fout krijgen omdat we TypeScript vertellen dat we hier

02:32.440 --> 02:34.960
een functiecomponent willen opslaan, en alles

02:34.960 --> 02:38.520
wat we opslaan is een normale functie, niet een functie die JSX teruggeeft

02:38.520 --> 02:40.770
of iets anders dat in aanmerking komt als

02:40.770 --> 02:42.800
een react element.

02:42.800 --> 02:44.440
En daarom zou dit ongeldig zijn en zouden

02:44.440 --> 02:45.810
we het moeten herstellen.

02:45.810 --> 02:48.530
Hier kunnen we dus al zien hoe TypeScript ons project

02:48.530 --> 02:50.360
een beetje verbetert.

02:50.360 --> 02:52.500
Het geeft ons extra typeveiligheid en zorgt

02:52.500 --> 02:55.420
ervoor dat we niet in een situatie terecht kunnen komen waarin

02:55.420 --> 02:58.353
we bijvoorbeeld een ongeldige component bouwen.

02:59.200 --> 03:03.230
Kanttekening: als het misschien onrealistisch lijkt dat u dit return statement

03:03.230 --> 03:05.370
ooit zou vergeten, bedenk dan dat u een

03:05.370 --> 03:07.970
groter onderdeel bouwt met meerdere if statements

03:07.970 --> 03:11.070
en verschillende return statements.

03:11.070 --> 03:14.370
Misschien vergeet je er een in een tak van je if statement

03:14.370 --> 03:17.010
en dan kan TypeScript je zeker redden en je die

03:17.010 --> 03:19.130
waarschuwing iets eerder geven dan

03:19.130 --> 03:21.500
tijdens runtime, waar het anders in sommige

03:21.500 --> 03:23.710
situaties zou kunnen crashen.

03:23.710 --> 03:25.620
Dus dit is TypeScript dat iets

03:25.620 --> 03:27.740
doet, maar daarmee is de kous af.

03:27.740 --> 03:28.690
Laten we iets bouwen

03:28.690 --> 03:31.670
en ik wil hier een relatief eenvoudige app bouwen,

03:31.670 --> 03:34.590
een to-do app, vrij klassiek, maar een to-do app waarmee

03:34.590 --> 03:36.370
we dus enkele kernconcepten van

03:36.370 --> 03:39.480
react met TypeScript kunnen oefenen.

03:39.480 --> 03:41.270
En daarom beginnen we in de volgende

03:41.270 --> 03:44.363
lezingen met onze eerste aangepaste componenten.
