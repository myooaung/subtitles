WEBVTT

00:02.160 --> 00:04.930
Instruktor: Oto ten sam przykład w zasadzie w

00:04.930 --> 00:06.440
prawdziwym projekcie.

00:06.440 --> 00:08.550
Znajdziesz ten prosty projekt, plik

00:08.550 --> 00:11.270
HTML z indeksem i ten plik JavaScript, dołączony

00:11.270 --> 00:13.340
do tego filmu w pliku podrzędnym.

00:13.340 --> 00:16.900
Możesz po prostu otworzyć to, a następnie otworzyć plik HTML indeksu.

00:16.900 --> 00:18.610
Możesz również otworzyć kod w dowolnym

00:18.610 --> 00:20.890
edytorze tekstu, który wybierzesz.

00:20.890 --> 00:22.160
Tutaj używam VisualStudioCode,

00:22.160 --> 00:25.000
a do mojej dokładnej konfiguracji wrócę w dalszej części

00:25.000 --> 00:26.250
tego modułu.

00:26.250 --> 00:29.250
Na razie możesz po prostu otworzyć te dwa pliki tekstowe za

00:29.250 --> 00:31.180
pomocą dowolnego edytora tekstu.

00:31.180 --> 00:34.110
Teraz to co tam znajdziesz to plik JavaScript, który

00:34.110 --> 00:37.000
współdziała z plikiem HTML tego indeksu.

00:37.000 --> 00:38.830
A potem ten plik index HTML, znajdziesz

00:38.830 --> 00:41.050
dwa wejścia i przycisk oraz dowolny plik JavaScript,

00:41.050 --> 00:43.698
który zostanie tutaj zaimportowany.

00:43.698 --> 00:45.843
Zasadniczo sięgamy po te elementy.

00:45.843 --> 00:47.968
Następnie mamy funkcję tutaj i słuchacza

00:47.968 --> 00:50.020
zdarzeń na przycisku, który uruchamia

00:50.020 --> 00:53.830
funkcję i loguje wynik funkcji tutaj w konsoli.

00:53.830 --> 00:56.750
Jeśli otworzymy ten plik HTML, klikając

00:56.750 --> 01:00.701
na niego dwukrotnie w Eksploratorze Windows lub Mac Finderze,

01:00.701 --> 01:03.220
aby otworzył się w przeglądarce, zobaczymy

01:03.220 --> 01:05.150
to.

01:05.150 --> 01:07.250
Dwa wejścia i przycisk dodaj i tutaj

01:07.250 --> 01:11.170
też otworzyłem narzędzia deweloperskie przeglądarki.

01:11.170 --> 01:13.760
Teraz, jeśli wprowadzisz 10 i pięć tutaj na przykład,

01:13.760 --> 01:16.640
możesz oczekiwać, że zobaczysz 15 jako wynik tutaj po prawej

01:16.640 --> 01:19.420
stronie, ale zamiast tego zobaczysz 105.

01:19.420 --> 01:23.460
I to pokazuje nam tutaj słabość JavaScript.

01:23.460 --> 01:25.890
To nie jest błąd techniczny.

01:25.890 --> 01:28.050
To nie jest błąd, który jest rzucany,

01:28.050 --> 01:31.640
ale jest to błąd logiczny w naszej aplikacji.

01:31.640 --> 01:33.986
Teraz jednak skąd się bierze ten błąd?

01:33.986 --> 01:37.490
No tutaj w JavaScript sięgam do tych dwóch inputów i po

01:37.490 --> 01:39.612
kliknięciu przycisku, na koniec

01:39.612 --> 01:41.920
dostaję wartości tych dwóch elementów

01:41.920 --> 01:45.300
inputowych i przekazuję je tutaj do dodania.

01:45.300 --> 01:46.970
I tutaj warto wiedzieć, że w

01:46.970 --> 01:50.100
JavaScript, gdy uzyskujemy dostęp do wartości elementu

01:50.100 --> 01:53.130
wejściowego, zawsze jest to ciąg znaków.

01:53.130 --> 01:55.790
Zawsze, niezależnie od tego, jaki jest to typ wejścia.

01:55.790 --> 01:59.633
Jeśli to jest typu liczba lub nie, to zawsze jest to ciąg znaków.

02:00.645 --> 02:03.995
Więc przekazuję dwa ciągi do tej funkcji koniec, a jeśli dodajesz

02:03.995 --> 02:05.890
dwa ciągi w JavaScript, otrzymują

02:05.890 --> 02:09.570
one konkatenację zamiast dodawania matematycznego.

02:09.570 --> 02:14.210
Dlatego widzimy 105, 10 i pięć konkatenowanych.

02:14.210 --> 02:17.090
To jest właśnie problem z JavaScriptem w tym przypadku.

02:17.090 --> 02:19.980
I to jest coś, gdzie TypeScript może nam pomóc.

02:19.980 --> 02:22.360
Teraz bez TypeScript, moglibyśmy oczywiście

02:22.360 --> 02:24.380
dodać tutaj sprawdzenie if i sprawdzić,

02:24.380 --> 02:28.048
czy typ num one jest równy liczbie.

02:28.048 --> 02:33.048
I jeśli typ num two jest równy liczbie, i jeśli tak jest to

02:34.030 --> 02:37.390
zwracam moje wyliczenie tak, inaczej

02:37.390 --> 02:40.588
mogę rzucić błąd lub przynajmniej konwertuję

02:40.588 --> 02:43.304
oba na liczby dodając plus przed

02:43.304 --> 02:47.428
każdym parametrem tutaj.

02:47.428 --> 02:50.510
Teraz to jest jakiś kod, który moglibyśmy napisać.

02:50.510 --> 02:53.023
Może nieco bardziej wyrafinowane niż to w JavaScript.

02:53.023 --> 02:57.130
I z tym zapewnilibyśmy sobie konwersję liczb lub danych wejściowych

02:57.130 --> 03:00.670
na liczby, jeśli nie są one jeszcze liczbami.

03:00.670 --> 03:02.430
Więc z tym, jeśli przeładuję

03:02.430 --> 03:05.220
to i powtórzę to, teraz dostaniemy 15 z powodu

03:05.220 --> 03:07.590
naszego zmienionego kodu.

03:07.590 --> 03:09.350
Więc oczywiście możemy to zrobić w JavaScript.

03:09.350 --> 03:10.970
I to jest waniliowy JavaScript,

03:10.970 --> 03:13.440
nic w nim nie ma z TypeScript.

03:13.440 --> 03:16.640
Ale napisaliśmy trochę dodatkowego kodu dla błędu, który w rzeczywistości

03:16.640 --> 03:19.048
chciałbym zapobiec w pierwszej kolejności.

03:19.048 --> 03:22.210
Nie chcę, żeby to się stało.

03:22.210 --> 03:26.260
Chcę się upewnić, że nie możemy nawet przekazać ciągów tutaj do add, ponieważ

03:26.260 --> 03:28.930
add powinien być funkcją, która działa tylko na

03:29.890 --> 03:31.020
liczbach.

03:31.020 --> 03:32.570
Tak, że tam nie musimy sprawdzać

03:33.428 --> 03:35.650
czy dostajemy liczbę czy nie.

03:35.650 --> 03:37.000
Chcę więc zachować tę funkcję w

03:37.000 --> 03:38.500
stanie, w którym była wcześniej.

03:38.500 --> 03:41.630
Chcę mieć tę funkcję tutaj, tak jak teraz.

03:41.630 --> 03:44.003
I tu właśnie może nam pomóc TypeScript.

03:45.088 --> 03:45.921
Dlatego TypeScript

03:45.921 --> 03:48.900
może nam pomóc w takich sytuacjach, jak właśnie pokazałem.

03:48.900 --> 03:52.690
Teraz, aby zobaczyć jak nam pomaga, zainstalujmy go.

03:52.690 --> 03:56.590
Czyli na typescriptlang. org, można kliknąć na download.

03:56.590 --> 03:58.540
I tam dowiesz się jak go zainstalować.

03:58.540 --> 04:00.250
I faktycznie zainstalujemy go

04:01.136 --> 04:02.880
za pomocą tego polecenia, które

04:02.880 --> 04:06.750
używa narzędzia NPM, a narzędzie NPM jest częścią pakietu Node JS.

04:06.750 --> 04:10.210
Więc nawet jeśli nie będziemy tutaj pisać kodu Node JS, to i tak musimy

04:10.210 --> 04:12.910
zainstalować Node JS po prostu dlatego, że za kulisami

04:12.910 --> 04:14.760
będzie to również wykorzystywane przez

04:14.760 --> 04:17.770
niektóre narzędzia, z których korzystamy.

04:17.770 --> 04:21.780
A kiedy instalujemy Node JS, instalujemy również NPM, czyli Node Package

04:21.780 --> 04:24.956
Manager, narzędzie, które następnie możemy wykorzystać

04:24.956 --> 04:29.200
do globalnej instalacji TypeScript na naszej maszynie.

04:29.200 --> 04:31.452
Wystarczy więc odwiedzić stronę nodejs. org i tam zainstaluj

04:31.452 --> 04:34.220
najnowszą wersję, którą znajdziesz tutaj.

04:34.220 --> 04:35.723
Wystarczy kliknąć na ten przycisk.

04:36.586 --> 04:38.276
Następnie pobierze i zainstaluje lub możesz przejść

04:38.276 --> 04:39.420
przez ten instalator.

04:39.420 --> 04:42.360
Jest on obsługiwany dla wszystkich systemów operacyjnych.

04:42.360 --> 04:45.300
A gdy już będziesz miał zainstalowany Node JS,

04:45.300 --> 04:47.936
będziesz mógł uruchomić to polecenie.

04:47.936 --> 04:51.440
Po prostu otwórz swój normalny terminal lub wiersz

04:51.440 --> 04:54.800
poleceń, a następnie skopiuj to polecenie.

04:54.800 --> 04:57.223
Ważne, na Macu i Linuksie może być konieczne dodanie sudo

04:57.223 --> 04:59.412
przed tym, aby uzyskać odpowiednie uprawnienia.

04:59.412 --> 05:02.810
W systemie Windows nie będzie to wymagane.

05:02.810 --> 05:05.100
Więc po prostu upewnij się, że następnie zainstalujesz

05:05.100 --> 05:06.810
TypeScript za pomocą tego polecenia.

05:06.810 --> 05:09.372
Wpisz swoje hasło na wypadek, gdybyś został o nie poproszony.

05:09.372 --> 05:12.176
I z tym, masz TypeScript zainstalowany globalnie

05:12.176 --> 05:15.430
na swojej maszynie, teraz co to oznacza?

05:15.430 --> 05:17.696
Zainstalowany TypeScript.

05:17.696 --> 05:20.810
Teraz pamiętaj, że TypeScript jest językiem programowania,

05:20.810 --> 05:22.750
ale jest to tylko język programowania,

05:22.750 --> 05:25.212
który działa, ponieważ mamy również ten kompilator,

05:25.212 --> 05:28.137
to narzędzie, które kompiluje do JavaScript.

05:28.137 --> 05:31.310
Więc w końcu to, co zainstalowaliśmy tutaj, to

05:31.310 --> 05:33.296
kompilator i wszystko, co musi

05:33.296 --> 05:36.116
wiedzieć, aby zrozumieć kod TypeScript,

05:36.116 --> 05:39.020
aby przekonwertować go na JavaScript.

05:39.020 --> 05:41.036
W ten sposób mamy zainstalowany

05:41.036 --> 05:44.460
kompilator i możemy teraz uruchomić polecenie TSC,

05:44.460 --> 05:47.210
które wywołuje kompilator TypeScript,

05:47.210 --> 05:50.870
aby skompilować plik TypeScript do JavaScript.

05:50.870 --> 05:54.140
Więc aby zobaczyć to w tym projekcie, nad którym pracowaliśmy, po prostu dodajmy

05:54.140 --> 05:56.563
nowy plik za pomocą ts. ts na przykład.

05:56.563 --> 05:58.677
Nazwa dowolna, ale rozszerzenie powinno być . ts, co jest

05:58.677 --> 06:03.677
skrótem od TypeScript.

06:05.100 --> 06:07.651
Teraz skopiujmy ten kod JavaScript

06:07.651 --> 06:09.850
do pliku TypeScript.

06:09.850 --> 06:13.100
Tutaj w VisualStudioCode od razu dostaję kilka błędów, które

06:13.100 --> 06:14.280
teraz naprawimy.

06:14.280 --> 06:16.379
I to jest jedna wielka zaleta TypeScript.

06:16.379 --> 06:18.915
Jeśli używasz odpowiedniego IDE, a moją

06:18.915 --> 06:22.710
silną rekomendacją naprawdę jest VisualStudioCode, i wrócę

06:22.710 --> 06:24.420
do tego później.

06:24.420 --> 06:27.810
Następnie otrzymujesz już świetne wsparcie w IDE podczas

06:27.810 --> 06:30.230
pracy wewnątrz plików TypeScript.

06:30.230 --> 06:34.710
Tutaj już w zasadzie pozwala TypeScriptowi przeanalizować mój

06:34.710 --> 06:36.910
kod i wskazać pewne słabości.

06:36.910 --> 06:39.720
Co jest świetne, bo właśnie tego chcę.

06:39.720 --> 06:42.110
Więc tutaj w tym przykładzie pozwól mi usunąć

06:42.110 --> 06:44.003
plik JavaScript tylko JS.

06:45.952 --> 06:48.360
I z tym, niektóre błędy zniknęły, ponieważ

06:48.360 --> 06:50.539
zidentyfikował, że niektóre stałe

06:50.539 --> 06:53.230
i tak dalej były używane w wielu plikach.

06:53.230 --> 06:55.787
Ale nadal daje mi błąd na dole.

06:55.787 --> 06:57.700
I to, co widzisz, na przykład, to, że nie jest

06:57.700 --> 07:00.108
pewien, czy naprawdę istnieje właściwość wartości.

07:00.108 --> 07:03.200
Teraz jest to błąd, którego nawet nie rozważałem

07:03.200 --> 07:05.720
wcześniej w JavaScript, ale to prawda.

07:05.720 --> 07:08.350
Wybieram tutaj element według identyfikatora.

07:08.350 --> 07:11.680
Teraz TypeScript nie może wiedzieć, czy to naprawdę będzie działać.

07:11.680 --> 07:13.160
Może mam tu jakąś literówkę.

07:13.160 --> 07:15.940
W tym przypadku nie byłbym w stanie wybrać elementu.

07:15.940 --> 07:17.704
Ten element po prostu nie istniałby na stronie.

07:17.704 --> 07:20.164
Więc możemy mieć literówkę i TypeScript nie analizuje twojego

07:20.164 --> 07:22.472
kodu HTML, aby dowiedzieć się, czy to działa.

07:22.472 --> 07:24.468
Więc dla jednego może się to nie udać.

07:24.468 --> 07:28.740
Ale nawet jeśli się uda i wybierzemy tam jakiś element, to nie musi

07:28.740 --> 07:30.910
to być element wejściowy.

07:30.910 --> 07:34.720
Może to być dowolny inny element, a większość elementów HTML nie ma właściwości

07:34.720 --> 07:37.450
wartości, do której można uzyskać dostęp.

07:37.450 --> 07:38.630
I to już jest świetne.

07:38.630 --> 07:41.372
TypeScript zmusza nas do bycia bardziej wyraźnym, do

07:41.372 --> 07:44.060
jaśniejszego określenia naszych intencji i do podwójnego

07:44.060 --> 07:46.130
sprawdzenia naszego kodu.

07:46.130 --> 07:48.100
I na przykład tutaj, i nie musisz rozumieć

07:48.100 --> 07:49.820
całej tej składni.

07:49.820 --> 07:52.172
Będziemy się go uczyć krok po kroku przez cały kurs.

07:52.172 --> 07:55.660
Ale na przykład tutaj moglibyśmy dać znać TypeScriptowi,

07:55.660 --> 07:58.204
że jesteśmy pewni, że otrzymamy element,

07:58.204 --> 08:00.080
dodając wykrzyknik.

08:00.080 --> 08:04.170
To w zasadzie mówi TypeScriptowi, że to nigdy nie da wyniku null.

08:04.170 --> 08:06.370
Dzięki temu zawsze znajdzie się jakiś element.

08:06.370 --> 08:08.420
I jako deweloper, oczywiście wiem, że to

08:08.420 --> 08:10.350
zawsze znajdzie element, ponieważ dwukrotnie

08:10.350 --> 08:11.920
sprawdziłem identyfikator i

08:11.920 --> 08:14.763
widzę tak, mam ten identyfikator tutaj.

08:15.610 --> 08:17.270
Teraz dodatkowo wiem też, że

08:17.270 --> 08:19.500
zawsze będzie to element wejściowy.

08:19.500 --> 08:22.408
Możemy więc użyć jako elementu wejściowego HTML, składni

08:22.408 --> 08:25.470
zwanej typecasting, którą również wyjaśnię bardziej szczegółowo

08:25.470 --> 08:27.746
później, aby pozwolić TypeScriptowi wiedzieć,

08:27.746 --> 08:30.327
jaki typ elementu to będzie.

08:30.327 --> 08:32.926
Możemy to zastosować również do drugiego elementu.

08:32.926 --> 08:35.650
Więc po prostu, aby być naprawdę jasnym tutaj,

08:35.650 --> 08:37.510
to jest składnia TypeScript.

08:37.510 --> 08:39.520
Mogę użyć tutaj tego wykrzyknika

08:39.520 --> 08:41.600
i mogę użyć tutaj tego typecastingu,

08:41.600 --> 08:44.786
ponieważ jesteśmy w . ts, jesteśmy w pliku TypeScript.

08:44.786 --> 08:48.380
Skompilujemy to do języka JavaScript.

08:48.380 --> 08:51.050
To nie działałoby w waniliowym JavaScript.

08:51.050 --> 08:53.427
To nie jest tam dostępne.

08:53.427 --> 08:56.300
Dzięki temu jesteśmy zmuszeni do bycia jaśniejszym w naszych

08:56.300 --> 08:58.460
intencjach i do naprawdę przemyślenia naszego

08:58.460 --> 09:01.060
kodu i podwójnego sprawdzenia go, co jest świetne.

09:01.060 --> 09:03.160
Ale to nawet nie jest największa zaleta.

09:04.270 --> 09:06.820
Największą zaletą jest dodanie typów.

09:06.820 --> 09:09.630
To jest to, co daje TypeScriptowi jego nazwę, po wszystkim.

09:09.630 --> 09:12.282
I tutaj nie mówię nic o typach danych, na których

09:12.282 --> 09:14.204
ta funkcja operuje.

09:14.204 --> 09:17.886
Jeśli najedziemy na jeden z tych parametrów,

09:17.886 --> 09:20.126
to widzimy to coś tutaj.

09:20.126 --> 09:22.828
I w końcu jest to TypeScript mówiący nam:

09:22.828 --> 09:24.880
"Nie wiem, co tam jest. Może to być dowolny rodzaj wartości.

09:24.880 --> 09:27.162
Teraz możemy dodać bardziej jawny typ w plikach TypeScript.

09:27.162 --> 09:31.960
Więc nie w plikach JavaScript, ale w plikach TypeScript, dodając tutaj dwukropek,

09:31.960 --> 09:33.806
a następnie określając typ.

09:33.806 --> 09:38.580
Na przykład numer.

09:38.580 --> 09:40.730
Robiąc to tutaj i robiąc to tutaj.

09:40.730 --> 09:43.300
Dzięki tej dodatkowej składni, którą TypeScript,

09:43.300 --> 09:45.246
który ten kompilator rozumie,

09:45.246 --> 09:47.928
mówimy TypeScriptowi, że to tutaj będzie typu

09:47.928 --> 09:50.960
number i to będzie typu number.

09:50.960 --> 09:54.010
I dlatego teraz znowu dostajemy tutaj błąd.

09:54.010 --> 09:56.126
I nie dostajemy tego błędu tylko

09:56.126 --> 09:58.060
w IDE, przy okazji.

09:58.060 --> 09:59.370
Dostaniemy go również, jeśli

09:59.370 --> 10:01.940
spróbujemy skompilować ten kod, ponieważ to jest ostatecznie

10:01.940 --> 10:03.820
to, co musimy zrobić, prawda?

10:03.820 --> 10:05.326
Teraz, aby to skompilować, otworzę terminal.

10:05.326 --> 10:08.670
I tutaj właśnie otwieram mój terminal lub wiersz poleceń,

10:08.670 --> 10:10.760
który jest zintegrowany z tym IDE.

10:10.760 --> 10:13.683
Jest to zwykły systemowy wiersz poleceń.

10:14.947 --> 10:16.530
Zwykły terminal poleceń systemowych,

10:16.530 --> 10:18.110
którego również tutaj używałem, po prostu

10:18.110 --> 10:19.533
już nawigował do tego folderu.

10:20.510 --> 10:22.446
Więc jeśli nie używasz jakiegoś

10:22.446 --> 10:27.420
wbudowanego terminala IDE, możesz użyć swojego zwykłego, ale CD nawiguj

10:27.420 --> 10:30.265
do tego wyodrębnionego folderu początkowego,

10:30.265 --> 10:33.960
w którym dodałeś swój plik TypeScript.

10:33.960 --> 10:36.300
A gdy już znajdziesz się w tym folderze, możesz uruchomić TSC.

10:36.300 --> 10:38.888
To wywoła ten kompilator TypeScript,

10:38.888 --> 10:42.980
który zainstalowaliśmy wcześniej za pomocą dash ts. ts.

10:42.980 --> 10:47.980
A jeśli uruchomisz to, faktycznie otrzymasz błąd.

10:47.990 --> 10:50.728
Nadal otrzymasz plik JavaScript, ponieważ

10:50.728 --> 10:53.267
domyślnie TypeScript nadal będzie kompilował

10:53.267 --> 10:57.460
go do JavaScript, dowiesz się również, jak to stłumić w dalszej

10:57.460 --> 11:00.050
części tego kursu.

11:00.050 --> 11:02.900
Ale daje ci błąd kompilatora, gdy to robisz.

11:02.900 --> 11:05.904
Mówi ci, że argument typu string nie jest możliwy

11:05.904 --> 11:09.070
do przypisania do parametru typu number.

11:09.070 --> 11:13.128
Więc problem tutaj polega na tym, że TypeScript rozumie, że to,

11:13.128 --> 11:16.550
co otrzymamy na właściwości value naszego elementu

11:16.550 --> 11:18.930
wejściowego, będzie łańcuchem.

11:18.930 --> 11:23.130
Widzimy to również tutaj w IDE.

11:23.130 --> 11:24.786
I nie możemy tego przekazać

11:24.786 --> 11:28.130
do add, bo tam nie chcemy ciągu, chcemy liczby.

11:28.130 --> 11:31.026
Musimy więc to naprawić np. zamieniając

11:31.026 --> 11:33.600
to na liczbę tutaj dodając plus.

11:33.600 --> 11:36.790
I jak tylko to zrobimy, możemy ponownie skompilować

11:36.790 --> 11:39.708
ten kod, powtarzając to polecenie i teraz

11:39.708 --> 11:42.406
kompiluje się bez błędów.

11:42.406 --> 11:45.225
Daje nam to zastosowanie języka TypeScript. Plik JavaScript, a teraz ponownie pokazuje kilka

11:45.225 --> 11:49.030
błędów, ponieważ nie rozumie,

11:49.030 --> 11:50.690
że nigdy nie będzie używać obu

11:50.690 --> 11:53.090
plików w tym samym czasie tutaj.

11:54.028 --> 11:55.373
Ponownie, to wszystko jest czymś, co

11:56.466 --> 11:58.530
będzie lepsze później w kursie, gdy skonfigurujemy to.

11:58.530 --> 12:00.428
Możemy to na razie zignorować.

12:00.428 --> 12:01.261
Więc daje mi ten plik.

12:02.588 --> 12:04.348
I jeśli to otworzymy, to zobaczymy tu coś ciekawego.

12:04.348 --> 12:06.210
Widzimy, że tam oczywiście nasze typy zniknęły.

12:06.210 --> 12:08.690
Ten casting tutaj już nie istnieje.

12:08.690 --> 12:11.280
Znów mamy waniliowy JavaScript.

12:11.280 --> 12:13.308
Więc jeśli mamy spojrzeć na nasz plik TypeScript

12:13.308 --> 12:16.250
tutaj, widzimy, że tam mamy wszystkie te ładne dodatki.

12:16.250 --> 12:18.786
Ale jak wspomniałem, są to tylko funkcje TypeScript.

12:18.786 --> 12:22.130
Kiedy kompilujesz do JavaScript, są one używane do oceny twojego

12:22.130 --> 12:24.600
kodu i znalezienia potencjalnych błędów,

12:24.600 --> 12:26.770
ale potem są usuwane i otrzymujemy zwykły

12:26.770 --> 12:29.090
JavaScript jako wyjście.

12:29.090 --> 12:33.960
Więc teraz możemy przejść do naszego pliku HTML indeksu

12:33.960 --> 12:37.010
i zaimportować go za pomocą ts. js i to jest ważne.

12:37.010 --> 12:41.230
Zawsze importuj pliki JavaScript, ponieważ

12:41.230 --> 12:43.550
przeglądarka nie może uruchomić TypeScript.

12:43.550 --> 12:45.990
Musimy zaimportować wynik naszej kompilacji.

12:45.990 --> 12:49.480
I teraz z tym, jeśli przeładujemy to, mamy nasz działający

12:49.480 --> 12:52.108
kod, ponieważ teraz mamy właściwy kod

12:52.108 --> 12:55.750
JavaScript, w którym naprawiliśmy ten problem, rzucając

12:55.750 --> 13:01.110
nasze dane wejściowe, zanim przekazaliśmy je do funkcji.

13:01.110 --> 13:03.010
Ale byliśmy w stanie naprawić te problemy

13:03.986 --> 13:06.087
z powodu naszych adnotacji typu tutaj.

13:06.087 --> 13:08.100
I jak widziałeś, musieliśmy napisać kilka

13:08.100 --> 13:10.720
innych części kodu również w czystszy sposób.

13:10.720 --> 13:13.220
I właśnie dlatego TypeScript jest niesamowity.

13:13.220 --> 13:15.400
Zmusza nas do pisania lepszego, czystszego

13:15.400 --> 13:17.880
i mniej podatnego na błędy kodu.
