WEBVTT

00:02.310 --> 00:03.143
Instructeur : Pour cela, je reviens

00:03.143 --> 00:05.860
à la configuration générale du projet sur laquelle nous avons travaillé auparavant.

00:05.860 --> 00:10.940
Vous le trouverez en annexe dans l'index. html et l'application.

00:10.940 --> 00:10.940
fichier ts.

00:10.940 --> 00:15.410
Et là, je veux me plonger directement dans les types d'intersection.

00:15.410 --> 00:19.570
Les types d'intersection nous permettent de combiner d'autres types.

00:19.570 --> 00:23.280
Disons que nous avons un type admin, qui est un type d'objet, donc

00:23.280 --> 00:25.430
encore une fois, ce n'est pas la création

00:25.430 --> 00:28.170
d'un objet ici, nous définissons un type, donc

00:28.170 --> 00:30.340
je suis juste en train de définir une définition

00:31.200 --> 00:35.560
de type ici et admin devrait avoir un nom, qui est une chaîne, disons, et un admin

00:35.560 --> 00:38.230
devrait également avoir des privilèges, et cela

00:39.910 --> 00:44.370
devrait être un tableau de chaînes, par exemple.

00:44.370 --> 00:47.010
Maintenant, nous aurions pu créer ceci

00:47.010 --> 00:48.950
avec une interface mais ici

00:49.810 --> 00:54.470
je le fais avec un type et maintenant j'ai un autre type, un type d'employé

00:54.470 --> 00:59.130
général, disons, et là j'ai aussi un nom, string.

00:59.130 --> 01:02.890
Je n'ai pas de privilège, mais j'ai une date de début.

01:02.890 --> 01:04.380
Cela pourrait être du type date.

01:04.380 --> 01:07.350
Nous n'avons pas vu cela avant, mais la date est un type qui est

01:07.350 --> 01:10.340
pris en charge par le script sur la base de l'objet de données

01:10.340 --> 01:12.163
qui est construit en JavaScript.

01:13.730 --> 01:17.580
Nous voulons maintenant créer un nouveau type ici,

01:17.580 --> 01:21.120
un employé élevé, disons, qui devrait être la

01:21.120 --> 01:23.900
combinaison de ces deux types.

01:23.900 --> 01:26.470
Bien sûr, nous pourrions le créer manuellement

01:26.470 --> 01:28.770
en définissant simplement un type d'objet,

01:28.770 --> 01:31.750
qui a un nom, qui a une date de début, et qui a un privilège,

01:31.750 --> 01:34.120
mais si nous avons déjà ces deux types, alors

01:34.120 --> 01:37.540
nous pouvons aussi simplement les combiner en disant admin et,

01:37.540 --> 01:42.000
donc nous utilisons le symbole de l'esperluette ici, employee.

01:42.000 --> 01:44.370
Et maintenant le résultat est un nouveau type

01:44.370 --> 01:46.390
d'objet qui doit avoir les deux.

01:46.390 --> 01:50.470
Ainsi, si j'ai mon employé, E one, qui doit être de type

01:50.470 --> 01:54.770
elevated employee, je peux y stocker un objet qui doit avoir

01:54.770 --> 01:57.440
une propriété name, qui doit avoir

01:57.440 --> 02:00.113
une propriété privilege, create server,

02:02.510 --> 02:08.800
et qui doit aussi avoir une date de début avec de nouvelles données.

02:08.800 --> 02:10.070
Créer un nouvel objet de données

02:10.070 --> 02:12.700
qui est simplement l'horodatage actuel.

02:12.700 --> 02:15.610
Il s'agit donc maintenant d'un moyen simple de combiner deux types.

02:15.610 --> 02:17.740
Maintenant, je dirai que les types

02:17.740 --> 02:21.550
d'intersection sont étroitement liés à l'héritage d'interface

02:21.550 --> 02:24.320
parce que, bien sûr, nous aurions pu réaliser

02:24.320 --> 02:28.590
la même chose ici en utilisant une interface admin et ensuite

02:29.620 --> 02:32.420
une interface employee, et ensuite nous

02:32.420 --> 02:34.700
pourrions également utiliser un

02:34.700 --> 02:38.853
type d'intersection sur ces interfaces ou nous créons une

02:40.100 --> 02:44.040
troisième interface, elevated employee, qui étend employee

02:47.230 --> 02:50.653
et admin.

02:52.700 --> 02:54.520
Par conséquent, si je le commente maintenant,

02:54.520 --> 02:56.830
nous aurons exactement le même effet.

02:56.830 --> 02:58.550
Maintenant, on peut dire que c'est un peu plus codé.

02:58.550 --> 03:01.750
L'une des raisons pour lesquelles nous préférerions peut-être

03:01.750 --> 03:04.280
utiliser des types plutôt que des interfaces, mais

03:04.280 --> 03:06.300
la relation est très proche et vous pouvez

03:06.300 --> 03:09.770
tout à fait utiliser des interfaces dans cet exemple.

03:09.770 --> 03:13.040
Toutefois, il convient de noter que si les types d'intersection peuvent

03:13.040 --> 03:15.600
être particulièrement utiles lorsqu'ils sont utilisés

03:15.600 --> 03:18.240
en conjonction avec des types d'objet, comme nous le faisons

03:18.240 --> 03:20.910
ici, vous pouvez les utiliser avec n'importe quel type.

03:20.910 --> 03:22.683
Donc, si vous aviez un autre type,

03:23.655 --> 03:28.450
combinable, disons, qui est soit une chaîne de caractères soit un nombre, nous avons

03:28.450 --> 03:29.940
donc un type d'union ici avec

03:29.940 --> 03:32.380
les types de base chaîne de caractères ou

03:32.380 --> 03:34.770
nombre et ensuite nous avons un type numérique

03:34.770 --> 03:38.660
ici, qui est soit un nombre soit un booléen, eh bien, nous pourrions

03:38.660 --> 03:43.660
avoir notre, disons, type universel ici en intersectant combinable avec numérique

03:43.730 --> 03:48.160
et à la fin, les types pourraient alors voir l'universel bien sûr est de type

03:48.160 --> 03:49.800
nombre parce que c'est la seule

03:49.800 --> 03:51.950
intersection que nous avons ici, mais

03:51.950 --> 03:56.520
si vous aviez plus d'intersections, alors ce serait le type qui est assigné universel,

03:56.520 --> 04:04.940
donc il pourrait aussi être un type d'union, qui est l'intersection de ces deux types d'union.

04:04.940 --> 04:07.800
L'opérateur d'intersection peut donc être utilisé

04:07.800 --> 04:11.790
avec n'importe quel type et il construit simplement l'intersection

04:11.790 --> 04:12.980
de ces types.

04:12.980 --> 04:14.330
Dans le cas d'un type d'union,

04:14.330 --> 04:17.300
il s'agit essentiellement des types qu'ils ont en commun.

04:17.300 --> 04:18.890
Dans le cas des types d'objet,

04:18.890 --> 04:22.220
il s'agit simplement de la combinaison de ces propriétés d'objet,

04:22.220 --> 04:23.510
pour ainsi dire.

04:23.510 --> 04:25.960
Ce sont donc des types d'intersection.

04:25.960 --> 04:27.360
Peut parfois être utile.

04:27.360 --> 04:29.050
Vous ne les utiliserez pas tout le temps,

04:29.050 --> 04:31.570
mais vous pouvez certainement rencontrer des situations

04:31.570 --> 04:35.010
où vous pouvez exprimer quelque chose de manière plus simple ou plus courte

04:35.010 --> 04:37.230
en utilisant les types d'intersection.

04:37.230 --> 04:39.520
Maintenant, juste pour prouver que tout cela fonctionne,

04:39.520 --> 04:42.050
laissez-moi ouvrir un nouvel onglet ici dans mon terminal

04:42.050 --> 04:45.390
et exécuter TSC dash W pour démarrer le mode veille afin que je n'aie pas seulement

04:45.390 --> 04:47.770
à aller dans le serveur en direct mais que je construise

04:47.770 --> 04:49.850
aussi mon code.

04:49.850 --> 04:51.210
Maintenant, si je recharge une

04:51.210 --> 04:53.200
fois ici, nous voyons que cela fonctionne sans

04:53.200 --> 04:55.443
erreurs et que cela compile aussi sans erreurs.
