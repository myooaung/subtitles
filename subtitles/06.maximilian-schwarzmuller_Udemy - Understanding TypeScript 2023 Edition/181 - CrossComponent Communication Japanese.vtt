WEBVTT

00:02.230 --> 00:07.960
講師：では､ ここで入力したテキストをNewTodoコンポーネントからappコンポーネントに取り込みましょう｡

00:07.960 --> 00:09.690
なぜアプリコンポーネントに？

00:09.690 --> 00:11.160
なぜなら､ このコンポーネントが､

00:11.160 --> 00:16.340
NewTodoとTodoListの両方のコンポーネントに直接リンクしているからです｡

00:16.340 --> 00:19.320
ここでは新しい関数を追加して､

00:20.800 --> 00:25.393
todoAddHandlerと名付けます｡

00:25.393 --> 00:31.390
名前は自由に決めてください｡

00:31.390 --> 00:37.970
そして､ ここでは文字列として､ テキストを取得することを期待しています｡

00:37.970 --> 00:40.720
そして､ これをTodoとしてここに追加したいと思います｡ 

00:40.720 --> 00:42.270
もちろん､ React をご存じの方なら､

00:42.270 --> 00:45.230
この配列を更新するだけではトリックを実行できず､

00:45.230 --> 00:49.360
このコンポーネントを再レンダリングできないことはおわかりでしょうから､

00:49.360 --> 00:54.750
これを動作させるにはここで何らかの状態管理を行う必要があります｡

00:54.750 --> 01:00.133
そこで､ ここでテキストを記録し､ 第二段階としてその状態管理部分に注目することにしましょう｡

01:01.000 --> 01:05.850
そのためには､ このtodoAddHandler関数がNewTodoコンポーネントの内部から呼び出されるようにする必要があります｡

01:05.850 --> 01:12.113
なぜなら､ 最終的にTodoを追加するのはこのコンポーネントだからです｡

01:13.090 --> 01:17.860
さて､ この関数をコンポーネントの内部から呼び出せるようにするにはどうしたらよいでしょうか｡

01:17.860 --> 01:22.300
この関数のポインタをそのコンポーネントに渡すのです｡ 

01:22.300 --> 01:27.280
ここでは､ onAddTodoというプロパティ名を追加します｡

01:27.280 --> 01:28.560
この名前は好きなように付けることができますが､

01:28.560 --> 01:34.600
私はこのように名付けました｡

01:34.600 --> 01:56.220
ここでは､ todoAddHandlerを転送したいので､ この関数へのポインタをonAddTodoに渡しています（ここで実行するわけではありません）｡

01:56.220 --> 01:56.220
しかし､

01:56.220 --> 01:59.640
もちろんTypeScriptはこれを好まない｡ なぜなら､

01:59.640 --> 02:03.440
このpropsにonAddTodoというpropが存在すること､

02:03.440 --> 02:08.240
そしてそのpropがどのように見えるかを知らないからだ｡

02:08.240 --> 02:11.670
そのため､ TodoListと同じように､ プロップのインターフェース､

02:11.670 --> 02:14.540
または単純な型定義を設定する必要があります｡

02:14.540 --> 02:18.200
では､ NewTodoに移動して､ もう一度､ インターフェースを追加して､

02:18.200 --> 02:23.060
コースの種類を追加してみましょう｡

02:23.060 --> 02:25.380
私は通常､ 必ずインターフェースを使いますが､

02:25.380 --> 02:27.660
型を使ってもかまいません｡

02:27.660 --> 02:30.493
ここでは､ NewTodoPropsという名前をつけて､

02:31.357 --> 02:36.830
onAddTodoプロップというオブジェクト型にし､ これは関数型にして､

02:36.830 --> 02:40.753
関数を指定することにします｡

02:41.720 --> 02:44.290
このように関数の型を定義します｡ 学習したように､

02:44.290 --> 02:46.760
これは何も返さない関数になりますが､ 1つの境界を期待し､

02:46.760 --> 02:51.410
それはユーザーが入力したテキストになります｡

02:51.410 --> 02:57.123
つまり､ Todoテキストは文字列型であり､ この関数はそれを想定しているのです｡

02:58.920 --> 03:03.103
では､ この汎用型に設定し､ NewTodoPropsを指定します｡

03:04.510 --> 03:08.620
そして､ これでonAddTodoを呼び出して､ 文字列を渡すことができます｡ 

03:08.620 --> 03:11.470
そして､ 例えばここで数値を渡そうとすると､ もちろんエラーになります｡

03:11.470 --> 03:17.590
なぜなら､ 引数は文字列でなければならないと明確に定義しているからです｡

03:17.590 --> 03:18.733
では､ これを元に戻してみましょう｡ 

03:20.550 --> 03:24.630
これで､ また新しい目標を入力して､ 1ヶ月で終了させると､

03:24.630 --> 03:28.690
またここにログが表示されますが､ 今度はこのログをここに追加したので､

03:28.690 --> 03:34.170
明らかにアプリのコンポーネントから来るものだとわかります｡

03:34.170 --> 03:39.480
このNewTodoコンポーネントとアプリコンポーネントの間の通信がここで動作するわけです｡

03:39.480 --> 03:46.850
ToDoを更新するたびにこのコンポーネントも再レンダリングされるように､

03:46.850 --> 03:54.460
Todoの状態をレンダリングするようにします｡

03:54.460 --> 03:56.263
それは次の講義でやりましょう｡ 
