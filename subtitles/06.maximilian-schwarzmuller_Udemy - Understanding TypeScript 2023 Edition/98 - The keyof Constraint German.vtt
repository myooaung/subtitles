WEBVTT

00:02.230 --> 00:03.280
Kursleiter: Wir haben also hoffentlich

00:03.280 --> 00:04.930
die Grundlagen der Generics verstanden. Jetzt

00:04.930 --> 00:07.150
wollen wir uns etwas eingehender mit Constraints beschäftigen,

00:07.150 --> 00:09.250
oder mit einer bestimmten Art von Constraint, die Sie hinzufügen

00:09.250 --> 00:10.400
können.

00:10.400 --> 00:12.680
Dafür werde ich eine weitere Funktion, eine generische

00:12.680 --> 00:16.293
Funktion, die ich extractAndConvert nennen werde, eintauschen.

00:18.700 --> 00:21.550
Die Idee dieser Funktion hier ist, dass wir

00:21.550 --> 00:24.120
ein Objekt als erstes Argument erhalten,

00:24.120 --> 00:26.340
und der zweite Parameter ist letztendlich

00:26.340 --> 00:28.413
ein Schlüssel.

00:30.050 --> 00:32.570
Jetzt möchte ich den Wert für diesen Schlüssel im Objekt zurückgeben,

00:32.570 --> 00:35.310
was wir mit dieser Standard-JavaScript-Notation tun können.

00:35.310 --> 00:36.310
Mit den eckigen Klammern

00:36.310 --> 00:38.200
zu exe als eine Eigenschaft in einem Objekt,

00:38.200 --> 00:39.840
aber das ist nichts TypeScript-spezifisches,

00:39.840 --> 00:42.010
das ist wieder Vanilla JavaScript.

00:42.010 --> 00:43.000
Hier könnten wir also

00:43.000 --> 00:44.580
sagen, dass wir ein Objekt haben wollen,

00:44.580 --> 00:48.460
und für den Schlüssel wollen wir eine Zeichenkette haben, sagen wir mal.

00:48.460 --> 00:50.160
Hier bekomme ich allerdings

00:50.160 --> 00:52.000
einen Fehler, denn wir wissen

00:52.000 --> 00:54.500
ja nicht, ob das Objekt, das wir hier bekommen,

00:54.500 --> 00:57.510
wirklich diesen Schlüssel hat.

00:57.510 --> 00:59.410
Das ist das Ende, was TypeScript uns mit

00:59.410 --> 01:01.430
diesem seltsamen Fehler mitteilt.

01:01.430 --> 01:02.530
Hier könnte ich zum

01:02.530 --> 01:05.700
Beispiel das Ergebnis des Aufrufs mit, sagen wir, einem

01:05.700 --> 01:09.770
leeren Objekt und dann name auf der Konsole protokollieren.

01:09.770 --> 01:12.600
Und hier nenne ich das übrigens extractAndConvert,

01:12.600 --> 01:16.025
weil ich das ohne Konsolenprotokoll aufrufen und einfach

01:16.025 --> 01:18.600
Value, colon, plus sagen will.

01:18.600 --> 01:19.660
Aber das ist nur eine Randbemerkung,

01:19.660 --> 01:22.450
die ich uns am Ende mit den abgerufenen Daten gebe.

01:22.450 --> 01:23.840
Aber das Hauptproblem hier ist, ich

01:23.840 --> 01:25.160
könnte es so aufrufen und es würde

01:26.091 --> 01:28.020
in ein Objekt als ersten Parameter übergeben,

01:28.020 --> 01:29.890
und dann eine Zeichenfolge als zweiten.

01:29.890 --> 01:31.430
Aber korrekterweise sagt mir TypeScript,

01:31.430 --> 01:33.200
dass es am Ende nicht garantiert ist, dass dieser

01:33.200 --> 01:35.193
Schlüssel in diesem Objekt existiert.

01:36.420 --> 01:39.920
Um dies zu gewährleisten, können wir auch hier generische Typen verwenden.

01:39.920 --> 01:41.620
Wir könnten sagen, wir haben einen Typ T,

01:41.620 --> 01:43.130
und das wird hier unser Objekt sein.

01:43.130 --> 01:46.550
Wir können sagen, erweitertes Objekt.

01:46.550 --> 01:48.363
Aber wir müssen auch U schreiben.

01:49.440 --> 01:52.850
Unser Schlüssel hier, sagen wir mal, der letztendlich

01:52.850 --> 01:56.320
ein Schlüssel unseres T-Typs sein muss.

01:56.320 --> 01:58.210
Bei diesem Objekt wollen wir also sicherstellen,

01:58.210 --> 02:01.560
dass das, was wir hier als zweiten Parameter als Schlüssel erhalten,

02:01.560 --> 02:04.890
eine Eigenschaft des ersten Typs ist.

02:04.890 --> 02:09.130
Und dafür können wir sagen, erweitert Schlüssel von T.

02:11.550 --> 02:13.540
Und jetzt sehen Sie, dass der Fehler hier verschwunden

02:13.540 --> 02:15.370
ist, und stattdessen habe ich den Fehler

02:15.370 --> 02:17.930
dort unten, weil ich jetzt TypeScript hier informiere,

02:17.930 --> 02:21.800
dass der erste Parameter eine beliebige Art von Objekt und der zweite Parameter

02:21.800 --> 02:23.610
eine beliebige Art von Schlüssel in diesem

02:23.610 --> 02:25.870
Objekt sein sollte.

02:25.870 --> 02:28.480
Und hier, ja, wir übergeben jede Art von Objekt, aber wir

02:28.480 --> 02:30.430
haben keinen Namensschlüssel darin.

02:30.430 --> 02:34.990
Dieser Fehler verschwindet erst, wenn ich einen Namensschlüssel hinzufüge.

02:34.990 --> 02:37.990
Das ist also die ganze Zeit, in der wir generische Typen mit diesem

02:37.990 --> 02:41.800
Keyoff-Schlüsselwort hier verwenden können, um TypeScript mitzuteilen, dass

02:41.800 --> 02:45.730
wir sicherstellen wollen, dass wir diese korrekte Struktur haben, und das ist natürlich

02:45.730 --> 02:47.460
sehr nützlich, weil es uns erlaubt, sicherzustellen,

02:47.460 --> 02:49.120
dass wir keine dummen Fehler machen,

02:49.120 --> 02:51.160
bei denen wir versuchen, diese Funktion aufzurufen,

02:51.160 --> 02:53.390
die wir am Ende als eine Eigenschaft ausgeben wollten,

02:53.390 --> 02:56.740
die nicht existiert.

02:56.740 --> 02:58.140
Das funktioniert also.

02:58.140 --> 02:59.870
Aber wenn ich hier versuche, als 'age' auszuführen, erhalte

02:59.870 --> 03:01.570
ich wieder eine Fehlermeldung, zum Beispiel.

03:02.890 --> 03:05.560
Stellen wir also wieder auf den "Namen" um.
