WEBVTT

1
00:00:02.170 --> 00:00:03.860
<v Instructor>So now that we registered some routes,</v>

2
00:00:03.860 --> 00:00:05.630
let's add some logic for these routes.

3
00:00:05.630 --> 00:00:07.730
For that I'll add a controllers folder.

4
00:00:07.730 --> 00:00:08.750
That's not a must do,

5
00:00:08.750 --> 00:00:11.550
but I wanna split my logic here into the controllers

6
00:00:11.550 --> 00:00:13.650
and the routes into the routes folder.

7
00:00:13.650 --> 00:00:16.740
And in controllers, I'll also add a todos.ts file,

8
00:00:16.740 --> 00:00:19.230
and that will now hold the controller functions

9
00:00:19.230 --> 00:00:21.990
we wanna point at from inside our routes.

10
00:00:21.990 --> 00:00:25.120
So in here, I need a function which I'll export,

11
00:00:25.120 --> 00:00:27.220
and I'll create it as a arrow function,

12
00:00:27.220 --> 00:00:29.170
which is not a must do, though,

13
00:00:29.170 --> 00:00:31.290
and I'll name this createTodo,

14
00:00:32.420 --> 00:00:34.510
and it is a function which will receive

15
00:00:34.510 --> 00:00:36.720
these typical parameters you get

16
00:00:36.720 --> 00:00:38.830
in every middleware function in express,

17
00:00:38.830 --> 00:00:41.297
a request, a response, and the next function.

18
00:00:41.297 --> 00:00:44.550
And we just saw where we can get the types from.

19
00:00:44.550 --> 00:00:47.190
We can import request, response,

20
00:00:47.190 --> 00:00:50.460
and next function from express.

21
00:00:50.460 --> 00:00:52.800
This imports us those types.

22
00:00:52.800 --> 00:00:54.910
We can then add them here.

23
00:00:54.910 --> 00:00:57.230
Now, always adding all these types here

24
00:00:57.230 --> 00:00:59.980
as we did it in the error handling middleware, as well,

25
00:00:59.980 --> 00:01:01.300
can be cumbersome, though.

26
00:01:01.300 --> 00:01:03.750
It works, but it can be annoying.

27
00:01:03.750 --> 00:01:05.190
So there is a shortcut.

28
00:01:05.190 --> 00:01:08.220
Instead of setting the types on all these parameters,

29
00:01:08.220 --> 00:01:11.160
we can also just tell TypeScript which kind of function

30
00:01:11.160 --> 00:01:14.610
we wanna store in this createTodo constant,

31
00:01:14.610 --> 00:01:16.260
and we can then simply import

32
00:01:16.260 --> 00:01:19.530
the RequestHandler type from express,

33
00:01:19.530 --> 00:01:22.330
and then we set this here, createTodo,

34
00:01:22.330 --> 00:01:24.340
to type RequestHandler.

35
00:01:24.340 --> 00:01:28.780
And now you see TypeScript knows that here we got a request,

36
00:01:28.780 --> 00:01:30.560
here we got a response,

37
00:01:30.560 --> 00:01:32.590
and here we got this next function,

38
00:01:32.590 --> 00:01:35.730
because our RequestHandler is defined to look like this.

39
00:01:35.730 --> 00:01:38.080
It is a function with three parameters

40
00:01:38.080 --> 00:01:40.160
where the first parameter is the request,

41
00:01:40.160 --> 00:01:42.030
the second parameter is the response,

42
00:01:42.030 --> 00:01:44.810
and the third parameter is the next function.

43
00:01:44.810 --> 00:01:47.313
So this can simplify this setup here.

44
00:01:48.195 --> 00:01:49.380
RequestHandler, of course,

45
00:01:49.380 --> 00:01:51.360
always is available because we installed

46
00:01:51.360 --> 00:01:52.570
the types for express

47
00:01:52.570 --> 00:01:55.270
and therefore we can add this import here.

48
00:01:55.270 --> 00:01:57.940
Be aware that this import will always be gone

49
00:01:57.940 --> 00:01:59.960
once this compiles to JavaScript

50
00:01:59.960 --> 00:02:02.300
because we're just importing a type here.

51
00:02:02.300 --> 00:02:05.030
This is not importing any code that would execute.

52
00:02:05.030 --> 00:02:06.930
It's just importing a type.

53
00:02:06.930 --> 00:02:08.650
And therefore, during compilation,

54
00:02:08.650 --> 00:02:11.290
it will be removed because it doesn't add anything

55
00:02:11.290 --> 00:02:15.860
that would be required when this runs in regular JavaScript.

56
00:02:15.860 --> 00:02:16.693
With that, however,

57
00:02:16.693 --> 00:02:18.900
I got the createTodo function,

58
00:02:18.900 --> 00:02:22.240
and now why don't we add a TODOS array here

59
00:02:22.240 --> 00:02:25.530
to manage some to dos in memory only, of course.

60
00:02:25.530 --> 00:02:28.310
This will be gone whenever our server restarts

61
00:02:28.310 --> 00:02:31.460
because it's just a constant in JavaScript in the end.

62
00:02:31.460 --> 00:02:32.293
You could, of course,

63
00:02:32.293 --> 00:02:34.770
imagine talking to a database here, as well,

64
00:02:34.770 --> 00:02:36.360
but I wanna keep this simple

65
00:02:36.360 --> 00:02:38.630
because it's about JavaScript and TypeScript

66
00:02:38.630 --> 00:02:41.323
and not so much about database connections.

67
00:02:42.390 --> 00:02:43.790
So here I got to dos,

68
00:02:43.790 --> 00:02:47.600
and now here I want to create a new to do here

69
00:02:47.600 --> 00:02:49.320
when we got an incoming request,

70
00:02:49.320 --> 00:02:51.020
and that should be a new object,

71
00:02:51.020 --> 00:02:52.980
and why don't we create a blueprint

72
00:02:52.980 --> 00:02:55.420
for this object, a model.

73
00:02:55.420 --> 00:02:57.640
So I'll add a models folder,

74
00:02:57.640 --> 00:02:59.030
and in that models folder,

75
00:02:59.030 --> 00:03:04.030
I'll add a todo.ts file and export a class here,

76
00:03:04.760 --> 00:03:06.250
which I'll name Todo,

77
00:03:06.250 --> 00:03:08.210
where I define how to do should look like.

78
00:03:08.210 --> 00:03:10.330
There we can add a constructor

79
00:03:10.330 --> 00:03:13.129
and also use this TypeScript shortcut

80
00:03:13.129 --> 00:03:16.440
where we can add an access modifier like public

81
00:03:16.440 --> 00:03:19.360
and then a property name like ID,

82
00:03:19.360 --> 00:03:21.250
which is of type string, let's say,

83
00:03:21.250 --> 00:03:24.050
and text, which is also type string,

84
00:03:24.050 --> 00:03:27.470
and then TypeScript will automatically add fields,

85
00:03:27.470 --> 00:03:30.130
properties with equal names,

86
00:03:30.130 --> 00:03:32.750
and assigned values we pass to the constructor

87
00:03:32.750 --> 00:03:37.230
to those fields whenever we instantiate that to do class.

88
00:03:37.230 --> 00:03:38.670
So I'll use this syntax here,

89
00:03:38.670 --> 00:03:40.060
and you learned about this syntax

90
00:03:40.060 --> 00:03:41.810
earlier in the course already.

91
00:03:41.810 --> 00:03:44.660
And now in todos.ts here in the controller,

92
00:03:44.660 --> 00:03:47.893
we can of course import Todo from,

93
00:03:49.020 --> 00:03:53.403
going up one level, models/todo,

94
00:03:54.530 --> 00:03:58.800
and use this type and class now here in our file.

95
00:03:58.800 --> 00:04:01.320
And it's both a type and a class because, well,

96
00:04:01.320 --> 00:04:02.800
obviously, it's a class,

97
00:04:02.800 --> 00:04:05.750
and every class automatically also acts as a type.

98
00:04:05.750 --> 00:04:08.550
That's also what you saw throughout this course.

99
00:04:08.550 --> 00:04:09.750
So now here,

100
00:04:09.750 --> 00:04:11.910
we can first of all say that TODOS here

101
00:04:11.910 --> 00:04:13.550
will be an array of to dos.

102
00:04:13.550 --> 00:04:15.480
This extra annotation doesn't hurt

103
00:04:15.480 --> 00:04:18.590
so that we get proper support once we start adding to dos

104
00:04:18.590 --> 00:04:21.410
or start working with the to dos in this array.

105
00:04:21.410 --> 00:04:23.610
And here when I create a new to do,

106
00:04:23.610 --> 00:04:26.220
I now create it by instantiating this class,

107
00:04:26.220 --> 00:04:28.370
and we have to pass in an ID,

108
00:04:28.370 --> 00:04:32.030
and here I'll create a random pseudo-unique ID

109
00:04:32.030 --> 00:04:34.230
with Math random toString.

110
00:04:34.230 --> 00:04:35.270
This is not really unique,

111
00:04:35.270 --> 00:04:36.660
but good enough here.

112
00:04:36.660 --> 00:04:39.170
And now for the value here,

113
00:04:39.170 --> 00:04:41.670
there I of course want to set some text,

114
00:04:41.670 --> 00:04:45.530
which I expect to get in my incoming request body.

115
00:04:45.530 --> 00:04:48.823
So I expect to get my text here,

116
00:04:49.750 --> 00:04:53.270
basically on request body.text,

117
00:04:53.270 --> 00:04:56.280
so that I can then set text as a value here.

118
00:04:56.280 --> 00:04:57.113
Now, this works,

119
00:04:57.113 --> 00:04:59.640
but please see that this only works

120
00:04:59.640 --> 00:05:02.320
because TypeScript sees that this is of type any.

121
00:05:02.320 --> 00:05:04.420
It does not know that this is a string.

122
00:05:04.420 --> 00:05:05.510
And it can't know,

123
00:05:05.510 --> 00:05:08.390
because how would TypeScript know which data

124
00:05:08.390 --> 00:05:11.140
will be part of our incoming requests?

125
00:05:11.140 --> 00:05:12.430
It's not clear to it.

126
00:05:12.430 --> 00:05:14.260
We're never stating anywhere

127
00:05:14.260 --> 00:05:17.620
what will be inside of the requests we receive.

128
00:05:17.620 --> 00:05:19.270
Now, how can we improve this?

129
00:05:19.270 --> 00:05:21.780
Well, we can use typecasting, for example.

130
00:05:21.780 --> 00:05:23.660
Typecasting is always a great solution

131
00:05:23.660 --> 00:05:26.090
if you know about a specific type,

132
00:05:26.090 --> 00:05:27.360
but TypeScript doesn't.

133
00:05:27.360 --> 00:05:30.440
So here on request body, before we access text,

134
00:05:30.440 --> 00:05:32.650
we can typecast this to be an object

135
00:05:32.650 --> 00:05:34.900
where we have a text property, which is a string.

136
00:05:34.900 --> 00:05:36.920
Because we are building this app,

137
00:05:36.920 --> 00:05:40.320
we know what we expect to be on our incoming requests.

138
00:05:40.320 --> 00:05:42.750
So since we know that there will be a text property

139
00:05:42.750 --> 00:05:44.166
on the incoming request body,

140
00:05:44.166 --> 00:05:46.630
we can cast it to be such an object.

141
00:05:46.630 --> 00:05:51.480
And now here we get proper TypeScript and also IDE support.

142
00:05:51.480 --> 00:05:53.560
So with that, we add a new to do.

143
00:05:53.560 --> 00:05:55.470
Now we can reach out to TODOS

144
00:05:55.470 --> 00:05:58.280
and push the new to do onto this array.

145
00:05:58.280 --> 00:05:59.330
And again, this will, of course,

146
00:05:59.330 --> 00:06:01.060
only store it here as constant

147
00:06:01.060 --> 00:06:02.750
and therefore only in memory,

148
00:06:02.750 --> 00:06:05.650
because working with a database is not really

149
00:06:05.650 --> 00:06:08.880
directly related to node or TypeScript,

150
00:06:08.880 --> 00:06:11.170
but, well, to the database.

151
00:06:11.170 --> 00:06:14.140
So with that, we got the create Todo function here.

152
00:06:14.140 --> 00:06:16.400
Now let's go to the to do's routes

153
00:06:16.400 --> 00:06:19.070
and import this controller function.

154
00:06:19.070 --> 00:06:22.030
So import from the controllers folder

155
00:06:22.030 --> 00:06:24.000
from the todos file in there,

156
00:06:24.000 --> 00:06:26.660
and import the create Todo function

157
00:06:26.660 --> 00:06:30.100
and point at this function here on the post route

158
00:06:30.100 --> 00:06:35.100
so that any request which targets slash todos slash nothing

159
00:06:36.060 --> 00:06:38.390
reaches the createTodo function.

160
00:06:38.390 --> 00:06:39.580
Don't execute it here.

161
00:06:39.580 --> 00:06:40.650
Just point at it.

162
00:06:40.650 --> 00:06:43.890
It will be executed for you by node and express

163
00:06:43.890 --> 00:06:45.883
in your running web server later.

164
00:06:46.880 --> 00:06:49.630
So now we got this function here.

165
00:06:49.630 --> 00:06:50.900
We're not done, though.

166
00:06:50.900 --> 00:06:52.290
In the controller,

167
00:06:52.290 --> 00:06:54.360
we all just should return a response.

168
00:06:54.360 --> 00:06:56.720
so here we can send a response, for example,

169
00:06:56.720 --> 00:06:59.420
in JSON format with the JSON method

170
00:06:59.420 --> 00:07:02.300
where we say message created the todo

171
00:07:02.300 --> 00:07:04.040
or whatever you want,

172
00:07:04.040 --> 00:07:07.770
and we have createdTodo key, maybe,

173
00:07:07.770 --> 00:07:10.520
where we forward the new to do that was added

174
00:07:10.520 --> 00:07:12.660
on the server side so that on the client,

175
00:07:12.660 --> 00:07:14.490
we could also use that.

176
00:07:14.490 --> 00:07:17.750
And maybe also set a status code of 201 here

177
00:07:17.750 --> 00:07:19.700
to indicate that we were successful

178
00:07:19.700 --> 00:07:21.793
and that a resource was created.

179
00:07:22.680 --> 00:07:24.640
Now we just have to make sure

180
00:07:24.640 --> 00:07:28.500
that the body we're trying to extract here actually exists.

181
00:07:28.500 --> 00:07:29.770
And for data and app.ts,

182
00:07:29.770 --> 00:07:33.130
we need to parse the bodies of incoming requests.

183
00:07:33.130 --> 00:07:37.620
For that, we can import from the body-parser package

184
00:07:37.620 --> 00:07:39.220
we also installed,

185
00:07:39.220 --> 00:07:41.380
and from that package,

186
00:07:41.380 --> 00:07:46.380
we can import the JSON method like this.

187
00:07:46.410 --> 00:07:49.170
And then here you can register this

188
00:07:49.170 --> 00:07:51.310
executed as a middleware.

189
00:07:51.310 --> 00:07:54.480
So this is middleware provided by a third-party package

190
00:07:54.480 --> 00:07:58.130
which will parse the bodies of all incoming requests

191
00:07:58.130 --> 00:08:01.570
and extract any JSON data it finds in there

192
00:08:01.570 --> 00:08:05.990
to then populate the body key on this request object

193
00:08:05.990 --> 00:08:07.970
with that parsed JSON data.

194
00:08:07.970 --> 00:08:10.290
That's what this JSON middleware

195
00:08:10.290 --> 00:08:12.503
from the body-parser package does.

196
00:08:13.890 --> 00:08:16.520
And with that, we should have a server that is capable

197
00:08:16.520 --> 00:08:18.230
of creating new to dos.

198
00:08:18.230 --> 00:08:22.210
Save all files and ensure that it recompiles without errors.

199
00:08:22.210 --> 00:08:26.150
Make sure nodemon is still serving the app.js file.

200
00:08:26.150 --> 00:08:28.560
And now we need to send a post request.

201
00:08:28.560 --> 00:08:31.150
And with the browser, we can't do that,

202
00:08:31.150 --> 00:08:34.260
but we can use a tool for that, Postman.

203
00:08:34.260 --> 00:08:35.600
You can simply search for it

204
00:08:35.600 --> 00:08:38.160
and then install the Postman app on your system.

205
00:08:38.160 --> 00:08:39.283
It's free to use.

206
00:08:40.440 --> 00:08:41.570
Once you've got it installed,

207
00:08:41.570 --> 00:08:43.390
you can start it and you should see a screen

208
00:08:43.390 --> 00:08:44.440
that looks something like this.

209
00:08:44.440 --> 00:08:46.460
If you see a modal overlay,

210
00:08:46.460 --> 00:08:48.010
you can simply close that.

211
00:08:48.010 --> 00:08:50.240
And here you can now create a new request

212
00:08:50.240 --> 00:08:51.740
by clicking on that plus,

213
00:08:51.740 --> 00:08:53.040
choosing the request type,

214
00:08:53.040 --> 00:08:55.100
in this case, a post request,

215
00:08:55.100 --> 00:08:56.450
entering the URL.

216
00:08:56.450 --> 00:08:58.820
Here it's localhost 3000,

217
00:08:58.820 --> 00:09:01.660
3000 because that the port I chose here.

218
00:09:01.660 --> 00:09:03.100
And then we need to send the request

219
00:09:03.100 --> 00:09:06.320
to slash todos slash nothing.

220
00:09:06.320 --> 00:09:10.000
So here to slash todos slash nothing.

221
00:09:10.000 --> 00:09:12.120
We wanna attach a body to the request,

222
00:09:12.120 --> 00:09:15.440
and that should be a raw body JSON here

223
00:09:15.440 --> 00:09:17.010
to send some JSON data.

224
00:09:17.010 --> 00:09:19.480
And now what do we need to send here?

225
00:09:19.480 --> 00:09:21.840
Well, what we extract in the middleware function,

226
00:09:21.840 --> 00:09:22.880
so in this case,

227
00:09:22.880 --> 00:09:24.570
we should have a text property

228
00:09:24.570 --> 00:09:27.410
as part of our JSON data we're sending.

229
00:09:27.410 --> 00:09:29.610
So here, let's add text as a name

230
00:09:29.610 --> 00:09:31.070
and then any text of your choice,

231
00:09:31.070 --> 00:09:33.230
like finish the course.

232
00:09:33.230 --> 00:09:36.960
And if you now click send, it sends the request,

233
00:09:36.960 --> 00:09:38.990
and here's the response, and this looks good.

234
00:09:38.990 --> 00:09:40.670
We got the create a to do back.

235
00:09:40.670 --> 00:09:43.600
We see the ID that was generated and the text.

236
00:09:43.600 --> 00:09:45.870
So our backend clearly works here.

237
00:09:45.870 --> 00:09:47.690
And we wrote it all with TypeScript,

238
00:09:47.690 --> 00:09:49.880
but we're serving it as regular JavaScript.

239
00:09:49.880 --> 00:09:51.183
That's the entire trick.

