WEBVTT

00:02.250 --> 00:05.050
Instructeur: Voordat we meer nuttige gebruikssituaties

00:05.050 --> 00:07.811
of scenario's voor sommige decoratoren gaan verkennen.

00:07.811 --> 00:10.700
Ik wil je kort alle andere plaatsen laten zien waar je

00:10.700 --> 00:12.550
decorateurs kunt toevoegen.

00:12.550 --> 00:15.670
Uiteraard kunnen we decoratoren toevoegen aan klassen, maar er zijn

00:15.670 --> 00:17.731
meer plaatsen waar we ze kunnen toevoegen.

00:17.731 --> 00:20.750
Daarvoor maak ik een nieuwe klasse, want we hebben een klasse nodig

00:20.750 --> 00:22.460
voor elke decorator die we willen gebruiken,

00:22.460 --> 00:24.580
maar we hoeven niet alle decorators direct aan

00:24.580 --> 00:26.420
de klasse toe te voegen.

00:26.420 --> 00:28.480
Laten we zeggen dat we hier een productklasse

00:28.480 --> 00:31.523
hebben en in de productklasse hebben we misschien

00:31.523 --> 00:34.540
een titel, die een string is.

00:34.540 --> 00:37.070
En we kunnen hier een waarde toewijzen met de constructor.

00:37.070 --> 00:39.600
Natuurlijk kunnen we altijd de snelkoppeling gebruiken en

00:39.600 --> 00:41.570
alles in één stap doen in een constructor, zoals

00:41.570 --> 00:42.680
je eerder hebt geleerd.

00:42.680 --> 00:44.451
Hier neem ik de langere route.

00:44.451 --> 00:49.451
We kunnen hier een methode hebben, prijs met belasting.

00:50.150 --> 00:53.442
Daarvoor verwacht ik een belastingtarief dat een getal is

00:53.442 --> 00:57.150
en om dat te laten werken moeten we hier ook een prijs opslaan.

00:57.150 --> 01:01.200
Prijs eigenschap die we ook krijgen als onderdeel van de constructor.

01:01.200 --> 01:04.060
Ook hier kunnen we de snelkoppeling gebruiken,

01:04.060 --> 01:05.340
maar ik doe het zo.

01:05.340 --> 01:08.120
En dan zal ik in deze methode

01:08.120 --> 01:13.120
terugkeren, Dit. prijs maal één plus belasting.

01:13.200 --> 01:15.300
Dus we hebben deze utility methode en

01:15.300 --> 01:17.610
we kunnen ook een getter en een setter toevoegen

01:17.610 --> 01:19.090
als je dat wilt.

01:19.090 --> 01:22.700
We kunnen hier bijvoorbeeld een setter voor de prijs toevoegen, waarbij we

01:22.700 --> 01:25.850
de waarde krijgen die een getal moet zijn en waarbij we regelen dat

01:25.850 --> 01:28.231
we alleen bepaalde waarden kunnen instellen.

01:28.231 --> 01:32.090
Om dit te laten werken, hernoem ik prijs hier, om prijs

01:32.090 --> 01:35.350
te onderstrepen en het privé te maken, zodat we

01:35.350 --> 01:37.540
er niet direct bij kunnen.

01:37.540 --> 01:39.970
En hier zal ik deze underscore prijs instellen

01:39.970 --> 01:42.580
en hier zal ik deze underscore prijs gebruiken.

01:42.580 --> 01:44.800
En met deze veranderingen in de setter, kunnen

01:44.800 --> 01:48.350
we deze underscore prijs gelijk stellen aan de waarde die we krijgen.

01:48.350 --> 01:51.290
Maar voordat we dat doen, kunnen we controleren of

01:51.290 --> 01:52.770
de waarde groter is dan nul,

01:52.770 --> 01:55.630
zodat we geen negatieve prijzen accepteren.

01:55.630 --> 01:57.220
Dus daarmee stellen we alleen de

01:57.220 --> 02:00.159
prijs in als die groter is dan nul, anders doen we niets.

02:00.159 --> 02:04.330
In het andere geval zouden we een fout kunnen krijgen.

02:04.330 --> 02:08.389
Ongeldige prijs moet positief zijn.

02:08.389 --> 02:11.350
Dus dat kunnen we doen, nu hebben we een klasse

02:11.350 --> 02:14.020
met twee eigenschappen, met een accessor

02:14.020 --> 02:16.700
en ook met methode hier en deze methode heeft

02:16.700 --> 02:18.570
een parameter.

02:18.570 --> 02:21.180
Aan al deze dingen kunnen we decorateurs toevoegen

02:21.180 --> 02:25.910
en laten we beginnen met een goede oude vriend, een log decorator.

02:25.910 --> 02:28.960
Hier noem ik het log om niet te botsen met logger daarboven, omdat

02:28.960 --> 02:30.650
deze log decorator niet wordt toegevoegd

02:30.650 --> 02:31.960
aan een klasse en daarom andere

02:31.960 --> 02:33.770
argumenten krijgt.

02:33.770 --> 02:35.671
Het krijgt wel argumenten, en welke

02:35.671 --> 02:38.580
argumenten decorator krijgt, hangt af van waar

02:38.580 --> 02:40.030
je het toevoegt.

02:40.030 --> 02:41.960
Daarom kan ik logger niet hergebruiken,

02:41.960 --> 02:45.700
want dat is zo afgestemd dat het alleen met klassen werkt.

02:45.700 --> 02:48.100
Nu heb ik hier eigenlijk geen decoratorfabriek,

02:48.100 --> 02:49.980
ik moet gewoon een functie als deze decoreren,

02:49.980 --> 02:53.510
maar toch, welke argumenten deze decoratorfunctie krijgt, hangt af van

02:53.510 --> 02:55.230
waar we hem gebruiken.

02:55.230 --> 02:58.750
We kunnen bijvoorbeeld een decorator toevoegen aan een eigenschap.

02:58.750 --> 03:01.120
Hier kan ik zo een log toevoegen en als je een

03:01.120 --> 03:03.840
decorator toevoegt aan een eigenschap, krijgt

03:03.840 --> 03:05.759
de decorator twee argumenten.

03:05.759 --> 03:09.830
Het eerste argument, is het doel van de eigenschap en voor een instantie-eigenschap

03:09.830 --> 03:12.010
zoals deze, die we aanroepen op een

03:12.010 --> 03:15.290
instantie als u ermee werkt.

03:15.290 --> 03:19.490
Dit wordt het prototype van het gemaakte object.

03:19.490 --> 03:22.140
Als we hier een statische eigenschap hadden, zou doel

03:22.140 --> 03:24.850
verwijzen naar de staat van de constructorfunctie.

03:24.850 --> 03:27.770
Dus hier zeg ik elke, omdat ik niet precies weet welke

03:27.770 --> 03:30.140
structuur het object zal hebben.

03:30.140 --> 03:35.140
Het tweede argument dat we krijgen, is simpelweg de naam van de eigenschap.

03:35.290 --> 03:37.682
Dat kan hier een string zijn, kan

03:37.682 --> 03:40.400
natuurlijk ook een symbool zijn.

03:40.400 --> 03:43.470
We weten niet wat we als eigendomsaanduiding gebruiken.

03:43.470 --> 03:48.037
En dan zal ik hier de property decorator loggen, zodat we

03:49.130 --> 03:51.120
kunnen zien wanneer dit

03:51.120 --> 03:55.980
loopt en ik wil een console. log doel en ook eigenschap naam.

03:55.980 --> 03:57.780
Zodat we zien wat er in deze twee waarden zit.

03:57.780 --> 04:01.280
Als we daarmee opslaan zodat het compileert zonder fouten,

04:01.280 --> 04:03.080
en als we naar onze server gaan,

04:03.080 --> 04:06.871
zien we dat de property decorator daar wordt afgedrukt.

04:06.871 --> 04:08.630
En dit is de output die we krijgen.

04:08.630 --> 04:13.220
We zien hier het prototype van ons object omdat we hier

04:13.220 --> 04:15.850
geen titel en prijs zien.

04:15.850 --> 04:18.160
Maar we zien wel get price met tax en inderdaad

04:18.160 --> 04:19.770
worden methoden geregistreerd

04:19.770 --> 04:21.900
op het prototype van een object.

04:21.900 --> 04:24.240
Dus dat is het prototype van ons object en

04:24.240 --> 04:26.640
we zien titel hier rechts, dat is de naam van

04:26.640 --> 04:28.943
de eigenschap waarmee we werken.

04:29.800 --> 04:33.770
Maar wanneer wordt deze logger precies uitgevoerd?

04:33.770 --> 04:37.880
Nou zoals je kunt zien, omdat ik nooit een product instantiëer,

04:37.880 --> 04:41.670
voert het in principe uit wanneer je klasse definitie wordt

04:41.670 --> 04:43.980
geregistreerd door JavaScript.

04:43.980 --> 04:47.660
Het wordt dus uitgevoerd wanneer u deze eigenschap definieert in

04:47.660 --> 04:49.140
JavaScript, als onderdeel

04:49.140 --> 04:50.960
van uw klasse hier, als onderdeel

04:50.960 --> 04:52.970
van deze constructorfunctie.

04:52.970 --> 04:54.610
Die hier uiteindelijk ontstaat.

04:54.610 --> 04:58.053
Dit is wanneer deze property decorator wordt uitgevoerd.
