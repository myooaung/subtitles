WEBVTT

00:01.538 --> 00:03.725
الراوي: للبدء ، دعنا أولاً ننتقل

00:03.725 --> 00:07.086
إلى tsconfig. json لأننا بحاجة إلى

00:07.086 --> 00:09.965
التأكد من تهيئة بعض الأشياء.

00:09.965 --> 00:12.780
تأكد من أن الهدف هنا ، قد تم ضبطه فعليًا

00:12.780 --> 00:16.286
على es5 أو es6 ، هذا الأمر متروك لك.

00:16.286 --> 00:19.423
يعتمد ذلك على المتصفحات التي تخطط لدعمها.

00:19.423 --> 00:22.190
لأنه في نهاية حزمة الويب والأنواع التي يستخدمها

00:22.190 --> 00:24.050
المُحمل هذا الهدف لتحديد كيفية

00:24.050 --> 00:26.543
تحويل التعليمات البرمجية الخاصة بك.

00:26.543 --> 00:28.960
هل يجب تحويل أنواع التعليمات البرمجية الخاصة

00:28.960 --> 00:32.480
بك إلى كود Java النصي الذي يتم تشغيله في المتصفحات القديمة أيضًا؟

00:32.480 --> 00:36.210
أو كما هو الحال مع es6 إلى الكود الذي يعمل فقط في

00:36.210 --> 00:37.811
المتصفحات الأحدث؟

00:37.811 --> 00:42.640
ثم يجب ضبط الوحدة النمطية على es2015 أو es6 بحيث يكون هذا الإعداد

00:42.640 --> 00:44.110
على ما يرام.

00:44.110 --> 00:49.110
بالإضافة إلى ذلك ، تريد أيضًا التحقق من خروجه.

00:50.560 --> 00:53.520
سأحتفظ به للتوزيع ولكن يمكنك تغيير هذا إذا كنت تريد ترجمة

00:53.520 --> 00:55.997
التعليمات البرمجية الخاصة بك إلى دليل مختلف.

00:55.997 --> 00:59.378
لا تحتاج إلى الوصول إلى الدليل الجذر بعد الآن ،

00:59.378 --> 01:02.260
لأن حزمة الويب ستتولى هناك ، وستحدد حزمة

01:02.260 --> 01:05.014
الويب مكان ملفات الجذر الخاصة بك.

01:05.014 --> 01:07.660
لذلك بشكل عام يجب أن تكون هذه الإعدادات جيدة.

01:07.660 --> 01:09.525
يمكننا دائمًا تعديلها لاحقًا

01:09.525 --> 01:12.487
إذا لم يعمل شيء ما بالطريقة التي نريدها أن تعمل.

01:12.487 --> 01:15.220
يتيح ذلك إضافة ملف تكوين جديد بجوار

01:15.220 --> 01:19.848
tsconfig. json وهذا هو webpack. التكوين. js.

01:19.848 --> 01:22.368
وتأكد من تسميته فعلاً بهذا الشكل

01:22.368 --> 01:24.150
لأن هذا هو ملف webpack

01:24.150 --> 01:27.579
الذي سيبحث عنه تلقائيًا وسيخبر webpack

01:27.579 --> 01:30.220
بكيفية العمل مع مشروعنا.

01:30.220 --> 01:32.840
لأن حزمة الويب هي أداة يجب تهيئتها

01:32.840 --> 01:34.568
لتعمل بشكل صحيح هنا.

01:34.568 --> 01:37.568
إذن ماذا نفعل في حزمة الويب هذه. ملف التكوين؟

01:37.568 --> 01:40.338
يستخدم ملف التكوين هذا JavaScript ويستخدم

01:40.338 --> 01:43.288
بالفعل العقدة. شبيبة الميزات.

01:43.288 --> 01:46.747
لذلك نريد استخدام العقدة. يقوم js بتصدير البنية ، والتي

01:46.747 --> 01:50.379
تبدو هكذا لتصدير كائن JavaScript بعد ذلك.

01:50.379 --> 01:53.538
والذي سيكون كائن التكوين الذي تم اختياره بواسطة حزمة الويب.

01:53.538 --> 01:55.585
لذلك في حالة عدم رؤيتك لذلك من قبل ، فهذه هي الطريقة

01:55.585 --> 01:59.648
التي تُصدِّر بها الأشياء في عقدة. شبيبة البيئة.

01:59.648 --> 02:02.877
وها نحن نقوم بتصدير كائن JavaScript.

02:02.877 --> 02:05.920
يحتاج webpack الآن إلى بعض المعلومات.

02:05.920 --> 02:09.840
الأهم من ذلك أنه يحتاج إلى معرفة الملف الذي يبدأ

02:09.840 --> 02:14.585
به مشروعك بالكامل ؛ فأين نقطة الدخول الخاصة بك.

02:14.585 --> 02:17.370
في حالتنا هذا هو التطبيق. ts.

02:17.370 --> 02:18.922
يجب تنفيذ هذا الملف أولاً

02:18.922 --> 02:20.981
، وما سيفعله webpack بعد ذلك هو

02:20.981 --> 02:24.013
إلقاء نظرة على الواردات في هذا الملف والانتقال

02:24.013 --> 02:25.461
إلى هذه الملفات وإلقاء

02:25.461 --> 02:27.378
نظرة على وارداتها وواردات الملفات

02:27.378 --> 02:30.219
المستوردة وما إلى ذلك.

02:30.219 --> 02:33.461
حتى يعرف كل الملفات التي يستخدمها مشروعك في النهاية.

02:33.461 --> 02:36.201
وبعد ذلك سيتم استعراض محتويات الملفات

02:36.201 --> 02:38.740
مثل هذا المحتوى هنا وجميع المحتويات

02:38.740 --> 02:41.690
الموجودة في جميع الملفات وتجميعها بمساعدة

02:41.690 --> 02:44.290
ts. حزمة محمل ذكرت.

02:44.290 --> 02:46.960
الآن لجعل حزمة الويب تعمل بشكل صحيح ، يجب عليك

02:46.960 --> 02:51.598
الآن إزالة جميع ملفات. شبيبة في جميع الواردات.

02:51.598 --> 02:54.400
كنا بحاجة إلى ذلك من قبل ، عندما استخدمنا المتصفح

02:54.400 --> 02:57.885
الأصلي المدمج في ts. وظيفة الوحدة النمطية ، ولكن

02:57.885 --> 03:01.130
مع حزمة الويب لا تحتاج إلى هذه الملحقات.

03:01.130 --> 03:03.664
لأن webpack سيبحث تلقائيًا عن ملفات. js وبعض ملفات الامتداد الأخرى.

03:03.664 --> 03:06.501
لذلك لا تفعل ولا يجب عليك إضافتها هنا ، وإلا فإن

03:06.501 --> 03:09.270
webpack سيبحث عن الملفات ذات الامتداد المزدوج

03:09.270 --> 03:10.716
، وهو ما لا تريده.

03:10.716 --> 03:13.655
لذا قم بإزالة. js على كل هذه الواردات هنا ، وبمجرد

03:13.655 --> 03:18.441
قيامك بذلك ، احفظ كل هذه الملفات

03:18.441 --> 03:21.370
للتأكد من تطبيق التغييرات.

03:21.370 --> 03:24.043
عد الآن إلى حزمة الويب. التكوين. js ، يجب عليك الآن إضافة

03:24.043 --> 03:26.498
خاصية

03:26.498 --> 03:31.320
إدخال في هذا الكائن المُصدَّر.

03:31.320 --> 03:32.740
وأشر إلى. / src / التطبيق. ts في مثالنا.

03:32.740 --> 03:37.740
لذلك في ملف إدخال الجذر لمشروعك.

03:38.680 --> 03:42.444
بعد ذلك ، أضف مفتاح الإخراج هنا.

03:42.444 --> 03:45.880
الإخراج الآن هو كائن هنا.

03:45.880 --> 03:48.051
حيث نحدد أولاً اسم الملف.

03:48.051 --> 03:51.120
سيكون هذا هو ملف JavaScript الوحيد الذي

03:51.120 --> 03:52.998
سيتم إنتاجه في النهاية.

03:52.998 --> 03:55.440
وهنا سنسميها حزمة. js ، ولكن يمكنك تسميته كما

03:55.440 --> 03:57.350
تريد.

03:57.350 --> 03:58.788
تطبيق. js ، أو أي شيء تريده.

03:58.788 --> 04:01.709
يمكنك أيضًا إضافة أجزاء

04:01.709 --> 04:05.171
ديناميكية هنا ، على سبيل المثال ، تجزئة المحتوى ، لإخبار

04:05.171 --> 04:08.971
webpack بإنشاء خاصية فريدة لكل تصميم والتي يمكن أن تساعدك

04:08.971 --> 04:11.829
في التخزين المؤقت في المتصفح.

04:11.829 --> 04:13.578
ولكن مرة أخرى يمكنك معرفة المزيد عن ذلك في webpack docs.

04:13.578 --> 04:16.229
نحن هنا لسنا في حاجة إليها ، لذا سنقوم فقط بتسمية حزمة الملفات. شبيبة.

04:16.229 --> 04:19.779
بالإضافة إلى اسم الملف ، تحتاج

04:19.779 --> 04:23.320
أيضًا إلى تحديد المسار ، حيث يجب كتابة المخرجات إليه.

04:23.320 --> 04:26.131
وبالطبع يجب أن يتطابق ذلك مع

04:26.131 --> 04:28.900
المسار الذي لديك في ts. التكوين. js لتجنب الأخطاء.

04:28.900 --> 04:32.970
لذلك في هذا المجلد.

04:32.970 --> 04:34.189
الآن على عكس ما في ts. config ، js file

04:34.189 --> 04:37.010
، فلا يجب أن تكتب. / dist هنا.

04:37.010 --> 04:39.819
يريد Webpack مسارًا مطلقًا هنا.

04:39.819 --> 04:42.099
ولإنشاء واحدة يمكننا استخدام عقدة. شبيبة.

04:42.099 --> 04:45.669
لذلك يمكننا استخدام العقدة. js بنية الاستيراد ، والتي تستخدم

04:45.669 --> 04:48.880
الكلمة الأساسية المطلوبة

04:48.880 --> 04:51.280
، واستيراد وحدة المسار.

04:51.280 --> 04:54.220
لا تحتاج إلى تثبيت هذا كمكتبة ،

04:54.220 --> 04:56.050
فهذه عقدة أساسية. js التي لديك بالفعل

04:56.050 --> 04:59.651
إذا كان لديك عقدة. js ، وهو ما تفعله لأننا فعلناه سابقًا

04:59.651 --> 05:02.149
في الدورة التدريبية.

05:02.149 --> 05:04.966
يمكنك الآن استخدام المسار لاستدعاء

05:04.966 --> 05:08.552
طريقة الحل هناك والتي تسمح لك ببناء مسار

05:08.552 --> 05:11.280
مطلق لمجلد معين.

05:11.280 --> 05:12.910
لذلك نستخدم ثابتًا خاصًا

05:12.910 --> 05:15.320
، ثابت الاسم __dirname ، والذي يتوفر

05:15.320 --> 05:17.236
عالميًا في العقدة. شبيبة البيئة.

05:17.236 --> 05:21.150
و webpack كما قلت يستخدم العقدة. js لتنفيذ ملفاتك.

05:21.150 --> 05:24.692
وبعد ذلك ، كوسيطة ثانية ، dist

05:24.692 --> 05:27.433
، في النهاية ، تقوم dist فقط ببناء مسار مطلق

05:27.433 --> 05:30.661
إلى مجلد dist الذي يستخدمه webpack بعد ذلك لكتابة

05:30.661 --> 05:33.190
الإخراج الخاص بك هناك.

05:33.190 --> 05:35.452
وبهذا تحصل على نقطة دخول ونقطة إخراج

05:35.452 --> 05:38.753
، لكنك لا تخبر حزمة الويب بما يجب أن تفعله بملفات

05:38.753 --> 05:40.743
TypeScript الخاصة بك.

05:40.743 --> 05:42.553
نظرًا لأن حزمة الويب الافتراضية

05:42.553 --> 05:45.140
لا تعرف ذلك ، فهي بشكل افتراضي مجرد أداة تجميع.

05:45.140 --> 05:46.884
أي وظائف إضافية ، مثل ترجمة

05:46.884 --> 05:48.684
TypeScript إلى JavaScript

05:48.684 --> 05:51.261
، يجب أن يتم تعليمها لحزمة الويب.

05:51.261 --> 05:53.452
سنفعل ذلك في المحاضرة القادمة.
