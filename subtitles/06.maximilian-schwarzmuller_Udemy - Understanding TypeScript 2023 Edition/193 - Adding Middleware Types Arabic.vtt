WEBVTT

00:02.210 --> 00:04.200
المدرب: لقد قمنا بتشغيل هذا الخادم

00:04.200 --> 00:05.490
الوهمي الأساسي ، لكن

00:05.490 --> 00:08.380
هذا الخادم لا يقوم بأي شيء مفيد بالطبع.

00:08.380 --> 00:11.430
الآن ، قلت إنني أريد إنشاء واجهة برمجة تطبيقات بسيطة جدًا

00:11.430 --> 00:13.110
للراحة ، ولهذا ، سأقوم بالفعل بإنشاء

00:13.110 --> 00:15.570
مجلد فرعي جديد في المجلد المصدر ، والذي سأقوم بتسمية

00:15.570 --> 00:16.830
المسارات.

00:16.830 --> 00:19.870
هناك ، سأضيف ملفًا يجب أن يتعامل مع مجموعة معينة من المسارات لواجهة

00:19.870 --> 00:22.540
برمجة التطبيقات (API) الباقية هذه ، والآن يعود الأمر

00:22.540 --> 00:25.710
إليك بشأن نوع واجهة برمجة التطبيقات التي تريد إنشاءها.

00:25.710 --> 00:28.520
سأقوم ببناء todo API هنا ، إذا أخذت React

00:28.520 --> 00:30.770
في قسم TypeScript ، يبدو هذا مألوفًا

00:30.770 --> 00:32.140
لك لأننا أنشأنا تطبيق

00:32.140 --> 00:34.530
todo أيضًا ، وهذا منفصل تمامًا عن

00:34.530 --> 00:36.820
هذا القسم على الرغم من أنه لن يعمل

00:36.820 --> 00:38.710
مع React ، من بالطبع ، يمكنك

00:38.710 --> 00:41.250
توصيله بنفسك ، ولكن هنا سأبني واجهة

00:41.250 --> 00:43.870
برمجة تطبيقات todo البسيطة ببساطة حتى

00:43.870 --> 00:48.350
نرى كيف يعمل TypeScript مع Node و Express.

00:48.350 --> 00:51.400
التطبيق الذي نقوم ببنائه ليس معقدًا للغاية ، لكنه

00:51.400 --> 00:54.760
سيحتوي على الكثير من المفاهيم المثيرة للاهتمام.

00:54.760 --> 00:57.080
هنا ، سنضيف مسارات todo الخاصة

00:57.080 --> 01:01.800
بي عن طريق إضافة todos. ts في مجلد المسارات ، وهناك ، أريد الآن

01:01.800 --> 01:04.570
استخدام Express. شبيبة لتسجيل

01:04.570 --> 01:06.630
بعض المسارات.

01:06.630 --> 01:09.730
لذلك ، سوف أقوم باستيراد شيء ما من Express

01:09.730 --> 01:13.700
، وهذا الشيء هو في الواقع جهاز التوجيه.

01:13.700 --> 01:16.160
الآن بناء جملة JS الشائع لذلك

01:16.160 --> 01:20.950
هو أنك تقوم باستيراد Express باستخدام تتطلب express ،

01:20.950 --> 01:23.550
ثم في سطر جديد ، غالبًا ما ترى رمزًا

01:23.550 --> 01:25.673
حيث نقوم بذلك هنا.

01:27.090 --> 01:28.180
الآن هذا شيء يمكنك القيام

01:28.180 --> 01:30.130
به ، لكن هنا سأقوم باستيراده بهذه الطريقة.

01:31.130 --> 01:34.120
الآن هذا يعطينا جهاز توجيه ، ويمكننا ببساطة استدعاء

01:34.120 --> 01:36.750
Router هنا كوظيفة ، وهذا يسمح لنا بتسجيل البرامج

01:36.750 --> 01:39.300
الوسيطة ، لذلك في النهاية ، يتم توجيه نقاط

01:39.300 --> 01:41.980
النهاية للطلبات الواردة حيث نقوم بعد ذلك بتنفيذ

01:41.980 --> 01:45.540
بعض المنطق بناءً على هذه الطلبات.

01:45.540 --> 01:48.980
الآن بالنسبة لتطبيق todo ، أرغب في تسجيل بعض المسارات الأساسية

01:48.980 --> 01:53.700
، مسار نشر في slash لا شيء حيث يمكننا إضافة مهام جديدة ، لذلك سنحتاج هنا إلى بعض التعليمات

01:53.700 --> 01:55.760
البرمجية ، بعض الوظائف التي تضيف بعد

01:55.760 --> 01:58.860
ذلك todo في مكان ما ، في الوقت الحالي أنا ' ليرة لبنانية

01:58.860 --> 02:01.250
فقط تحديد أي رمز على الإطلاق ، فقط إعداد المسار

02:01.250 --> 02:03.380
بشكل عام هنا.

02:03.380 --> 02:05.110
إذن لدينا طلب النشر ، ثم

02:05.110 --> 02:08.770
طلب الحصول ، والحصول على جميع المهام ، دعنا نقول

02:08.770 --> 02:12.900
، ثم لنفترض أيضًا طلب التصحيح لتحديث المهام ، وهناك

02:12.900 --> 02:15.520
أتوقع الحصول على المعرف ، ومقطع

02:15.520 --> 02:19.280
ديناميكي في عنوان URL ، ثم هنا أيضًا طلب حذف لحذف

02:19.280 --> 02:22.700
ما يجب القيام به عن طريق المعرف.

02:22.700 --> 02:25.720
هذه هي مساراتي ، والآن يمكننا تصدير جهاز التوجيه

02:25.720 --> 02:28.620
الذي تم تكوينه كإعداد افتراضي في هذا الملف.

02:28.620 --> 02:30.930
الآن لن يحدث شيء على هذه الطرق ، أليس كذلك؟

02:30.930 --> 02:32.510
لم أقم بإعداد أي وظيفة يتم

02:32.510 --> 02:35.830
تنفيذها عندما يصل الطلب إلى نقاط النهاية هذه ، لكننا

02:35.830 --> 02:38.620
على الأقل نعرف الآن المسارات التي نريدها

02:38.620 --> 02:41.740
، وسنضيف الوظائف في خطوة ثانية لاحقًا.

02:41.740 --> 02:44.100
في الوقت الحالي ، لنقم فقط بتوصيل جهاز التوجيه هنا ، المسارات

02:44.100 --> 02:48.320
المكونة لخادمنا قيد التشغيل هنا في التطبيق. ts ، وللقيام بذلك ،

02:48.320 --> 02:53.211
نقوم فقط باستيراد ، دعنا نقول todoRoutes

02:53.211 --> 02:54.290
من. / طرق / todos.

02:56.040 --> 02:58.910
لذلك نحن نستورد جهاز التوجيه الذي تم تصديره في

02:58.910 --> 03:01.610
todos إلى التطبيق. ts ، والآن هنا ، نحتاج

03:01.610 --> 03:03.390
إلى توصيله بتطبيق Express

03:03.390 --> 03:08.340
قيد التشغيل باستخدام التطبيق. استخدم ، ثم لنفترض أننا نريد إعادة

03:08.340 --> 03:10.800
توجيه جميع الطلبات التي تبدأ بـ

03:10.800 --> 03:14.600
/ todos إلى todoRoutes ، لذلك لن يتم التعامل مع

03:14.600 --> 03:17.210
الطلبات التي تستهدف عنوان URL مختلف

03:17.210 --> 03:18.703
هناك.

03:19.920 --> 03:23.730
عند الحديث عن المناولة ، في إعداد البرنامج الوسيط Express الذي نستخدمه هنا ، يمكننا

03:23.730 --> 03:25.983
أيضًا إعداد برمجية وسيطة تتعامل مع الأخطاء ، لذلك

03:25.983 --> 03:29.030
أي أخطاء قد يتم طرحها في أي مكان في التعليمات البرمجية الخاصة بنا

03:29.030 --> 03:33.610
، ونقوم بذلك باستخدام التطبيق.

03:33.610 --> 03:33.610
استخدم

03:33.610 --> 03:37.470
، ثم قمنا بإعداد وظيفة وسيطة نموذجية هنا حيث نحصل على الطلب والاستجابة

03:37.470 --> 03:40.640
والوظيفة التالية ، ومرة أخرى ، كل هذا يتطلب منك معرفة

03:40.640 --> 03:48.330
بعض Express. شبيبة ومعرفة العقدة.

03:48.330 --> 03:48.330
js

03:48.330 --> 03:51.160
، لن أتعمق في كيفية عمل البرامج الوسيطة بالضبط في Express

03:51.160 --> 03:52.970
وما هي البرامج الوسيطة.

03:52.970 --> 03:54.960
إذن فهذه وظيفة وسيطة عادية هنا كما يجب أن

03:54.960 --> 03:57.150
تعرفها من Express. js ، وربما تعلم

03:57.150 --> 03:59.050
أيضًا أن هناك بديلًا لهذه

03:59.050 --> 04:02.310
الوظيفة ، وهي دالة تأخذ أربعة معلمات

04:02.310 --> 04:04.680
حيث يكون المعامل الأول خطأ

04:04.680 --> 04:07.350
محتملًا ، والآن هذا خطأ في معالجة

04:07.350 --> 04:10.720
وظيفة البرامج الوسيطة ، والتي سيتم تشغيلها

04:10.720 --> 04:15.290
تلقائيًا بواسطة Express إذا كان في أي برنامج وسيط آخر

04:15.290 --> 04:18.750
قبل هذا لديك خطأ.

04:18.750 --> 04:21.200
هذا هو خطئي في التعامل مع وظيفة البرامج الوسيطة

04:21.200 --> 04:23.380
، كما ترى ، لدينا مجموعة من الأخطاء هنا.

04:23.380 --> 04:26.260
مجموعة من الأخطاء لأن هذا النوع كله موجود

04:26.260 --> 04:29.030
ونحن أيضًا لا نستخدم كل هذه القيم ، لكن

04:29.030 --> 04:33.080
اسمحوا لي أن أوضح أي نوع من الأنواع لدينا هنا.

04:33.080 --> 04:35.510
سيكون هذا من النوع Error ، وسيكون

04:35.510 --> 04:39.890
من النوع express. اطلب ، أو يمكنك ببساطة استيراد

04:39.890 --> 04:43.020
الطلب هنا كاستيراد باسم إضافي من express ،

04:43.020 --> 04:45.540
وهذا يعمل أيضًا إذا كنت قد قمت بتثبيت

04:45.540 --> 04:46.670
أنواع Express التي

04:46.670 --> 04:49.310
نقوم بها ، ثم هنا أيضًا حصلنا على الاستجابة

04:49.310 --> 04:54.310
، ووظيفة Next هنا ، ومن ثم يمكننا تعديل أنواعنا هنا ، هذا الآن من النوع

04:54.490 --> 04:56.310
Request ، وهذا من النوع Response

04:56.310 --> 05:03.650
، وهذه هي NextFunction التي يمكننا تنفيذها للسماح للطلب بمواصلة رحلته إلى البرنامج الوسيط التالي

05:03.650 --> 05:06.680
في السطر.

05:06.680 --> 05:08.590
الآن هذا هو خطأنا في التعامل

05:08.590 --> 05:10.820
مع البرامج الوسيطة ، فسيتم إطلاقها

05:10.820 --> 05:13.030
كلما حدث خطأ في أحد البرامج الوسيطة

05:13.030 --> 05:15.000
الأخرى ، وهنا ، يمكننا إرسال

05:15.000 --> 05:17.690
رد باستخدام بيانات JSON ، حيث لدينا

05:17.690 --> 05:22.690
رسالة بها خطأ. الرسالة ، والمكان الذي ربما نضعه أيضًا

05:22.855 --> 05:24.630
، يخطئ. أعني الرسالة

05:24.630 --> 05:28.510
، وحيث ربما نقوم أيضًا بتعيين رمز الحالة 500 ، وبالطبع ، يمكن

05:28.510 --> 05:29.610
أن يكون لديك وظيفة

05:29.610 --> 05:32.460
معالجة الأخطاء أكثر تفصيلاً مما لدي هنا ،

05:32.460 --> 05:35.020
ولكن مع ذلك ، أضفنا مساراتنا ، أضفنا معالجة

05:35.020 --> 05:38.830
الأخطاء برمجية وسيطة ، لماذا لا نضيف بعض المنطق إلى واجهة

05:38.830 --> 05:40.670
برمجة التطبيقات هذه الآن في

05:40.670 --> 05:43.103
المحاضرة التالية.
