WEBVTT

00:02.150 --> 00:06.180
Instructor: Así que somos capaces de recoger nuestro valor de entrada del título e imprimirlo

00:06.180 --> 00:07.420
en la consola, pero por supuesto,

00:07.420 --> 00:10.160
esa no es en última instancia la idea.

00:10.160 --> 00:13.940
En cambio, la idea es que reunamos todos nuestros valores de entrada,

00:13.940 --> 00:15.420
los validemos rápidamente

00:15.420 --> 00:17.890
y luego hagamos algo con ellos.

00:17.890 --> 00:20.598
Para ello, voy a añadir otro método nuevo,

00:20.598 --> 00:21.860
otro método privado,

00:21.860 --> 00:25.700
porque sólo voy a llamarlo desde dentro de la clase, y es

00:25.700 --> 00:28.530
el método gatherUserInput.

00:28.530 --> 00:30.460
El nombre depende totalmente de ti.

00:30.460 --> 00:33.240
Mi idea es que este método sea llamado aquí.

00:33.240 --> 00:35.230
Después de prevenir el defecto, esto

00:35.230 --> 00:38.980
debería básicamente llegar a todas nuestras entradas aquí, recoger

00:38.980 --> 00:40.870
la entrada del usuario allí, validarlo,

00:40.870 --> 00:43.060
y luego devolverlo.

00:43.060 --> 00:45.950
Así que aquí, tengo mi userInput, que

00:45.950 --> 00:50.090
podría ser una tupla con el título, la descripción, y

00:50.090 --> 00:53.810
la gente, como los valores de la tupla libre.

00:53.810 --> 00:55.510
En realidad, me gusta esa idea.

00:55.510 --> 00:57.800
Por lo tanto, vamos a definir ya un tipo de retorno aquí.

00:57.800 --> 00:59.880
El tipo de retorno es una tupla.

00:59.880 --> 01:02.620
¿Recuerdas ahora cómo se define una tupla?

01:02.620 --> 01:05.630
¿Cómo se define el tipo de una tupla?

01:05.630 --> 01:08.620
No es una cadena, son corchetes.

01:08.620 --> 01:12.260
Eso significa que está devolviendo un array de cadenas.

01:12.260 --> 01:14.550
En cambio, quiero decir que

01:14.550 --> 01:18.160
devuelvo un array de exactamente X elementos

01:18.160 --> 01:21.510
de exactamente estos tres tipos.

01:21.510 --> 01:23.650
Y para ello, se establece el tipo de retorno

01:23.650 --> 01:27.160
aquí, dos corchetes, y luego dentro de los corchetes, se añaden los

01:27.160 --> 01:30.240
diferentes elementos, y los tipos de elementos.

01:30.240 --> 01:32.900
Por ejemplo, cadena, cadena y número.

01:32.900 --> 01:37.130
Con eso, usted está diciendo que este método aquí devuelve una tupla, que tiene tres

01:37.130 --> 01:38.510
elementos, donde el primer

01:38.510 --> 01:40.300
elemento es una cadena, el segundo

01:40.300 --> 01:41.820
elemento es una cadena, y el tercer

01:41.820 --> 01:44.080
elemento es en realidad un número.

01:44.080 --> 01:46.360
Y ahora podemos añadir algo de lógica a este

01:46.360 --> 01:48.540
método para que se haga realidad.

01:48.540 --> 01:52.670
Para ello, primero vamos a obtener el título introducido desde

01:52.670 --> 01:57.210
este titleInputElement. valor.

01:57.210 --> 01:58.340
Y podemos repetirlo.

01:58.340 --> 02:01.920
También queremos la descripción introducida del curso desde este

02:01.920 --> 02:05.100
descriptionInputElement. y la cantidad de

02:05.100 --> 02:09.510
enteredPeople, o sólo enteredPeople de este

02:09.510 --> 02:12.440
peopleInputElement.

02:12.440 --> 02:13.870
Ahora he almacenado esto en constantes

02:13.870 --> 02:15.490
para no tener que repetir siempre

02:15.490 --> 02:17.640
estas expresiones más largas.

02:17.640 --> 02:19.370
Ahora, podemos validar esto.

02:19.370 --> 02:21.500
Una validación trivial sería comprobar

02:21.500 --> 02:24.850
si enteredTitle. recortar, Así que eliminar el

02:24.850 --> 02:27.610
espacio ancho de la X al principio y al final.

02:27.610 --> 02:35.350
Length es igual a cero, o si enteredDescription.

02:35.350 --> 02:35.350
es

02:35.350 --> 02:41.520
igual a cero, o si enteredPeople.

02:41.520 --> 02:41.520
la

02:41.520 --> 02:44.380
longitud del recorte es igual a cero.

02:44.380 --> 02:48.410
Eso comprobaría que ninguna entrada está vacía.

02:48.410 --> 02:50.330
Sin embargo, no comprueba todo lo que podríamos

02:50.330 --> 02:51.860
querer comprobar.

02:51.860 --> 02:54.770
No estamos comprobando si las personas introducidas

02:54.770 --> 02:57.160
son, digamos, un número positivo.

02:57.160 --> 03:00.170
No podemos establecer una longitud mínima.

03:00.170 --> 03:02.190
Tendríamos que añadir más y más condiciones

03:02.190 --> 03:04.050
aquí, y aunque podemos hacerlo, esto

03:04.050 --> 03:06.820
no sería realmente una solución escalable.

03:06.820 --> 03:09.110
Si tenemos nuestras partes en la aplicación donde

03:09.110 --> 03:11.550
también queremos validar la entrada del usuario,

03:11.550 --> 03:14.440
siempre tenemos que repetir largas sentencias if.

03:14.440 --> 03:18.390
Así que pronto presentaré una solución de validación

03:18.390 --> 03:21.960
más inteligente o más escalable.

03:21.960 --> 03:23.780
Por ahora, podemos dejarlo así.

03:23.780 --> 03:26.190
Sin embargo, ya puedes pensar en esto y,

03:26.190 --> 03:28.520
por supuesto, después de esta conferencia,

03:28.520 --> 03:32.220
párate a pensar en cómo podrías externalizar esto en una función

03:32.220 --> 03:34.670
de validación separada que sea configurable,

03:34.670 --> 03:38.350
y cómo los tipos podrían ayudarte ahí.

03:38.350 --> 03:41.370
Definitivamente hay muchos enfoques posibles, y compartiré

03:41.370 --> 03:44.040
el mío con ustedes en la próxima conferencia.

03:44.040 --> 03:45.620
Pero antes de llegar allí,

03:45.620 --> 03:48.350
vamos a utilizar este enfoque trivial aquí

03:48.350 --> 03:52.130
y hacer algo si todas estas condiciones se cumplen.

03:52.130 --> 03:53.620
Ahora si lo hacemos en este bloque

03:53.620 --> 03:56.000
if, sabemos que al menos una validación falló,

03:56.000 --> 03:57.350
y entonces podemos a través

03:57.350 --> 04:01.833
de la alerta, donde decimos Entrada inválida, por favor intente de nuevo.

04:03.450 --> 04:04.910
Si no lo conseguimos,

04:04.910 --> 04:06.200
sabemos que tenemos

04:06.200 --> 04:08.600
una entrada válida, si no, quiero

04:08.600 --> 04:11.310
devolver mi tupla.

04:11.310 --> 04:14.170
Así que aquí, quiero devolver el título introducido,

04:14.170 --> 04:17.090
la descripción introducida, y también las

04:17.090 --> 04:19.660
personas introducidas.

04:19.660 --> 04:20.630
Sin embargo, como se puede

04:20.630 --> 04:21.850
ver, el grupo de tipos no está

04:21.850 --> 04:24.210
contento, porque las personas ingresadas deberían ser

04:24.210 --> 04:25.370
un número, no un texto.

04:25.370 --> 04:27.410
Y en realidad, todo lo que se extraiga

04:27.410 --> 04:28.720
de la propiedad value

04:28.720 --> 04:32.350
de un elemento de entrada será texto por defecto.

04:32.350 --> 04:34.520
Así que para convertir esto en un número,

04:34.520 --> 04:38.060
podemos llamar a parseFloat, por ejemplo, o simplemente

04:38.060 --> 04:40.610
añadir un plus delante de él, y esto lo convertirá

04:40.610 --> 04:42.850
en un número, y aún así el grupo de tipos

04:42.850 --> 04:45.430
no está contento porque, bueno, no siempre

04:45.430 --> 04:48.910
devolvemos una tupla.

04:48.910 --> 04:50.830
¿Y esta parte de aquí?

04:50.830 --> 04:52.310
Si lo hacemos en el bloque if estamos

04:52.310 --> 04:53.510
mostrando una alerta, pero

04:53.510 --> 04:55.820
no estamos devolviendo una tupla.

04:55.820 --> 04:59.810
Bueno, hay varias cosas que podríamos hacer en su lugar.

04:59.810 --> 05:03.460
Podemos no devolver nada, así.

05:03.460 --> 05:06.320
También podríamos lanzar un error.

05:06.320 --> 05:08.360
Entonces, en realidad no devolveríamos

05:08.360 --> 05:11.100
nada, pero lanzaremos un error en ese caso.

05:11.100 --> 05:12.820
Ahora, no quiero lanzar un error aquí

05:12.820 --> 05:15.570
porque realmente no quiero implementar el manejo de errores,

05:15.570 --> 05:18.090
así que lo que haré es añadir una declaración de retorno,

05:18.090 --> 05:20.100
pero por supuesto esto no es una tupla.

05:20.100 --> 05:23.110
Así que en realidad, el tipo de retorno aquí es

05:23.110 --> 05:25.923
una tupla, o en realidad es indefinido.

05:27.320 --> 05:29.040
Sin embargo, como has aprendido,

05:29.040 --> 05:30.750
no debes usar undefined aquí como

05:30.750 --> 05:32.550
tipo de retorno en las funciones.

05:32.550 --> 05:34.040
En su lugar, utiliza void.

05:34.040 --> 05:35.410
Es casi lo mismo, pero

05:35.410 --> 05:37.040
exclusivo de las funciones,

05:37.040 --> 05:39.350
y esto le dice a TypeScript que se trata

05:39.350 --> 05:44.350
de una función que tiene al menos una rama que no devuelve ningún valor como

05:45.230 --> 05:46.930
lo hace esta.

05:46.930 --> 05:49.160
Aquí, por supuesto, también utilizamos un tipo de

05:49.160 --> 05:51.240
unión porque tenemos ambas posibilidades.

05:51.240 --> 05:53.170
Podemos no devolver nada,

05:53.170 --> 05:55.660
o devolver una tupla.

05:55.660 --> 05:57.510
Así que ahora, tenemos gatherUserInput

05:57.510 --> 05:59.370
y userInput allí para todo

05:59.370 --> 06:01.670
es indefinido en el final o es que

06:01.670 --> 06:04.130
tuple.

06:04.130 --> 06:07.640
Así que ahora, antes de seguir adelante y mejorar la validación, vamos

06:07.640 --> 06:09.620
a construir sobre ese userInput.

06:09.620 --> 06:12.480
Cuando reunimos el userInput ahí abajo, ahora

06:12.480 --> 06:14.820
tenemos esa cosa userInput, y ahora podemos

06:14.820 --> 06:17.050
comprobar si es una tupla.

06:17.050 --> 06:19.820
Ahora el problema es que en tiempo de ejecución

06:19.820 --> 06:22.620
no tenemos forma de comprobar si es una tupla.

06:22.620 --> 06:25.200
No hay ninguna instancia que podamos utilizar.

06:25.200 --> 06:28.560
No hay ningún tipo de tupla que podamos comprobar.

06:28.560 --> 06:31.020
Tampoco podemos comprobar si typof

06:33.803 --> 06:36.053
userInput es igual a tuple porque

06:37.130 --> 06:40.050
eso no existe en Vanilla JavaScript.

06:40.050 --> 06:41.850
La cadena existe, por ejemplo,

06:41.850 --> 06:44.950
pero la tupla no es un tipo de JavaScript.

06:44.950 --> 06:47.020
Así que para comprobar si se trata de una

06:47.020 --> 06:48.900
tupla, tenemos que recordar que las

06:48.900 --> 06:50.990
tuplas al final sólo se borran.

06:50.990 --> 06:52.750
Son especiales en TypeScript,

06:52.750 --> 06:54.860
pero una vez que estamos en la tierra

06:54.860 --> 06:55.940
de JavaScript se borran

06:55.940 --> 06:58.320
porque la idea de una tupla en la que el número

06:58.320 --> 06:59.950
de elementos y los tipos de elementos

06:59.950 --> 07:02.000
son fijos realmente sólo existe en

07:02.000 --> 07:04.470
TypeScript.

07:04.470 --> 07:05.930
Así que, durante el tiempo

07:05.930 --> 07:09.370
de ejecución, todo lo que necesitamos comprobar aquí es si es

07:09.370 --> 07:12.950
un array, y para ello, podemos utilizar el objeto array en JavaScript,

07:12.950 --> 07:15.180
y allí el método isArray.

07:15.180 --> 07:17.500
Es un método incorporado en Vanilla JavaScript

07:17.500 --> 07:20.290
que nos permite comprobar si esto de aquí es un array.

07:20.290 --> 07:23.200
Sabemos que es un indefinido o una tupla.

07:23.200 --> 07:24.630
Una tupla es un array, así

07:24.630 --> 07:26.000
que si esto devuelve true,

07:26.000 --> 07:27.400
tenemos la tupla.

07:27.400 --> 07:31.010
Y luego aquí, podemos utilizar la estructuración, por ejemplo,

07:31.010 --> 07:34.070
para obtener el título, la descripción, y la gente de

07:34.070 --> 07:35.560
la entrada del usuario, y luego

07:35.560 --> 07:37.720
hacer algo con esa entrada.

07:37.720 --> 07:39.230
Por ejemplo, por ahora,

07:39.230 --> 07:42.623
la consola. título del registro, descripción y personas.

07:43.980 --> 07:46.060
Si hacemos todo eso y lo guardamos

07:46.060 --> 07:47.950
todo, se compila sin errores,

07:47.950 --> 07:49.870
y si volvemos aquí, y hago clic en

07:49.870 --> 07:51.310
el proyecto así, me sale

07:51.310 --> 07:53.050
una entrada no válida.

07:53.050 --> 07:54.580
Si entro en Hola, todavía lo consigo

07:54.580 --> 07:56.950
porque no tenemos ninguna descripción.

07:56.950 --> 07:58.890
Esta es una descripción.

07:58.890 --> 08:00.180
Todavía lo conseguimos, por

08:00.180 --> 08:02.940
supuesto, pero si ahora también introduzco algo en la gente,

08:02.940 --> 08:05.220
esto funciona y lo imprimimos aquí.

08:05.220 --> 08:09.330
Esto es, por supuesto, un buen paso en la dirección correcta.

08:09.330 --> 08:10.990
Todavía no hemos llegado al final.

08:10.990 --> 08:13.330
Como he dicho, podemos mejorar la validación.

08:13.330 --> 08:16.230
Sólo una cosa que quiero hacer de inmediato antes de hacer eso,

08:16.230 --> 08:20.070
quiero borrar todas las entradas después de hacer clic en AÑADIR PROYECTO.

08:20.070 --> 08:22.440
Así que quiero vaciar todas las entradas de nuevo.

08:22.440 --> 08:25.290
Ahora para eso, podemos añadir un nuevo método privado, clearInput

08:25.290 --> 08:27.043
o clearInputs, y allí, podemos establecer

08:28.210 --> 08:32.740
este titleInputElement. igual a una cadena vacía y

08:32.740 --> 08:34.130
repite eso para

08:36.200 --> 08:38.980
las otras entradas también.

08:38.980 --> 08:41.960
Así que aquí, tenemos el descriptionInputElement,

08:41.960 --> 08:44.250
y aquí, tenemos el peopleInputElement,

08:44.250 --> 08:48.190
y ahora, si llamamos a esto. clearInputs aquí, debemos asegurarnos

08:48.190 --> 08:50.200
de que el formulario se borra una vez

08:50.200 --> 08:51.730
que se envía.

08:51.730 --> 08:52.870
Así que si intentamos

08:52.870 --> 08:54.380
esto de nuevo, introducimos

08:54.380 --> 08:56.230
algo aquí, ves que se imprime aquí,

08:56.230 --> 08:57.740
y el formulario se borra.

08:57.740 --> 09:00.720
Con eso, en general estoy contento con cómo manejamos

09:00.720 --> 09:03.300
esto, pero ahora quiero mejorar la validación

09:03.300 --> 09:06.970
y escribir esto de una manera más reutilizable y escalable.

09:06.970 --> 09:07.840
Como ya he mencionado,

09:07.840 --> 09:10.320
no dudes en hacerlo primero por tu cuenta.

09:10.320 --> 09:11.530
En la próxima conferencia,

09:11.530 --> 09:12.580
lo haremos juntos.
