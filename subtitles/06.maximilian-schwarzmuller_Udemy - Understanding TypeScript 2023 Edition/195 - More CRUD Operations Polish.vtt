WEBVTT

00:02.150 --> 00:03.930
Instruktor: Czyli dodaliśmy nasze pierwsze

00:03.930 --> 00:06.120
żądanie POST, jesteśmy w stanie stworzyć TODO.

00:06.120 --> 00:07.250
Teraz mamy więcej tras.

00:07.250 --> 00:10.170
Dostaliśmy też trasę do obsługi wszystkich stworzonych przez nas RODO.

00:10.170 --> 00:11.750
Teraz należy pamiętać, że, twój TODOS

00:11.750 --> 00:14.160
zresetuje się za każdym razem, gdy zmienisz i zapiszesz

00:14.160 --> 00:16.630
swój kod, ponieważ to restartuje twój serwer i to traci

00:16.630 --> 00:18.920
wszystko, co było przechowywane w pamięci, a my tylko

00:18.920 --> 00:21.330
zarządzamy naszym TODOS w pamięci.

00:21.330 --> 00:23.560
To po prostu coś, co mamy tutaj w aplikacji dummy,

00:23.560 --> 00:24.930
w prawdziwej aplikacji, oczywiście

00:24.930 --> 00:28.200
przechowywałbyś to w prawdziwej bazie danych, pobierając ją stamtąd i

00:28.200 --> 00:30.280
tak dalej, a zatem przetrwałoby to.

00:30.280 --> 00:35.060
Niemniej jednak tutaj możemy stworzyć nową funkcję, getTodos i to będzie

00:35.060 --> 00:38.030
RequestHandler tutaj, więc nie musisz ustawiać

00:38.030 --> 00:39.740
typów na wszystkich parametrach

00:39.740 --> 00:42.330
indywidualnie.

00:42.330 --> 00:46.120
A potem tam po prostu chcę zwrócić odpowiedź, gdzie zwracam

00:46.120 --> 00:49.560
jakieś dane JSON, gdzie mam swoje todos i tam po prostu

00:49.560 --> 00:52.420
chcę sięgnąć do mojej tablicy TODOs i wysłać

00:52.420 --> 00:54.330
to z powrotem do klienta, a to

00:54.330 --> 00:56.530
już może być wszystko.

00:56.530 --> 00:57.810
Oczywiście, możesz to podrasować,

00:57.810 --> 00:59.640
może chcesz mieć inną logikę, może

00:59.640 --> 01:03.120
chcesz posortować TODOS najpierw lub cokolwiek takiego, ale to

01:03.120 --> 01:06.690
w najprostszej formie już jest wszystko, czego potrzebujemy tutaj,

01:06.690 --> 01:10.530
zwraca nasz TODOS, więc bardzo prosta funkcja.

01:10.530 --> 01:13.240
W trasach TODOS, teraz musimy tylko połączyć to.

01:13.240 --> 01:17.680
Zaimportujmy więc również getTodos z naszego kontrolera

01:17.680 --> 01:20.640
i połączmy go tutaj z tą trasą.

01:20.640 --> 01:23.430
I dzięki temu, jeśli teraz to zapiszemy, możemy

01:23.430 --> 01:25.250
zobaczyć to już w akcji.

01:25.250 --> 01:29.860
Jeśli wrócimy i stworzymy nowe żądanie, żądanie GET,

01:29.860 --> 01:34.860
do http://localhost:3000/todos/ i wyślemy to, otrzymamy

01:39.400 --> 01:41.410
z powrotem pustą tablicę,

01:41.410 --> 01:44.400
teraz dlaczego tak jest?

01:44.400 --> 01:46.750
Cóż, powiedziałem, że TODOS zostanie wyczyszczony za

01:46.750 --> 01:48.010
każdym razem, gdy zmienialiśmy

01:48.010 --> 01:49.750
kod i serwer dlatego restartuje się, więc

01:49.750 --> 01:51.470
powinniśmy stworzyć nowe TODO teraz bez

01:51.470 --> 01:54.110
ponownego uruchamiania serwera w między czasie.

01:54.110 --> 01:57.360
I jeśli stworzyliśmy to RODO i teraz dostajemy

01:57.360 --> 02:01.770
nasze RODO, to widzimy tutaj również to stworzone RODO z identyfikatorem,

02:01.770 --> 02:04.380
serią 9811 i tak dalej.

02:04.380 --> 02:05.960
Więc to już działa.

02:05.960 --> 02:08.980
Teraz, ponieważ jesteśmy na nim, pracujmy również nad łatą i usunięciem

02:08.980 --> 02:10.590
i oczywiście nie krępuj się wymyślić

02:10.590 --> 02:12.680
jakąś logikę tam na własną rękę.

02:12.680 --> 02:14.970
W końcu teraz masz wszystkie potrzebne

02:14.970 --> 02:16.130
do tego budulce.

02:16.130 --> 02:18.480
Oczywiście teraz też będziemy to robić razem chociaż.

02:19.390 --> 02:21.570
Więc tutaj teraz na żądaniu poprawki

02:21.570 --> 02:24.350
dodajmy nową funkcję kontrolera.

02:24.350 --> 02:29.350
export const updateTodo, który jest typu RequestHandler i powinien

02:30.660 --> 02:34.680
trzymać funkcję w tym formacie, który już znamy.

02:34.680 --> 02:37.310
A tam celem jest wydobycie danych o

02:37.310 --> 02:40.630
nowym TODO z przychodzącego żądania, a następnie

02:40.630 --> 02:44.140
zaktualizowanie TODO o te nowe dane.

02:44.140 --> 02:47.240
Teraz proszę zauważyć, że w ramach naszej trasy tutaj,

02:47.240 --> 02:48.900
mamy dynamiczny segment.

02:48.900 --> 02:51.140
Mamy ten segment id.

02:51.140 --> 02:54.610
Więc to jest coś, co będziemy mogli wyodrębnić z adresu URL,

02:54.610 --> 02:58.750
można wyodrębnić konkretną wartość dla tego dynamicznego segmentu.

02:58.750 --> 03:02.147
Więc tutaj na naszym przychodzącym żądaniu, możesz uzyskać

03:03.172 --> 03:07.987
todoId, z naszych parametrów żądania. id,. id, bo taką nazwę tu wybrałem.

03:07.987 --> 03:11.660
Jeśli wybrałeś inną nazwę tutaj, musisz użyć

03:11.660 --> 03:13.060
innej nazwy tam.

03:13.060 --> 03:15.810
Teraz nie dostajemy tutaj typów wsparcia, prawda?

03:15.810 --> 03:18.410
Params jest typu dowolnego.

03:18.410 --> 03:20.450
Teraz, ponieważ typy mogą parsować

03:20.450 --> 03:23.400
ten String i zrozumieć, co tam jest.

03:23.400 --> 03:25.460
Tak więc, aby uzyskać lepsze typy wsparcia,

03:25.460 --> 03:28.920
możemy faktycznie wykorzystać, że RequestHandler tutaj jest

03:28.920 --> 03:32.880
typem generycznym i możemy dodać nawiasy kątowe i zasadniczo powiedzieć

03:32.880 --> 03:35.880
TypeScriptowi, które parametry będą miały.

03:35.880 --> 03:37.800
Po prostu ustawiamy to na obiekt i tam mamy

03:37.800 --> 03:39.300
teraz mapę wartości klucza wszystkich

03:39.300 --> 03:42.180
naszych rodziców, które mamy w adresie URL.

03:42.180 --> 03:43.830
Czyli na przykład, że mamy

03:43.830 --> 03:46.730
parametr ID, który na końcu trzyma String.

03:46.730 --> 03:48.610
To jest coś, co możemy dodać tutaj i teraz zobaczysz,

03:48.610 --> 03:50.230
że otrzymamy automatyczne uzupełnianie

03:50.230 --> 03:52.560
i TypeScript wie, że to będzie String.

03:52.560 --> 03:55.520
Więc to jest lepsze, używając tego generycznego typu.

03:55.520 --> 03:58.640
Teraz mamy ID, potrzebujemy też czegoś z ciała

03:58.640 --> 04:01.050
żądania, a dokładnie potrzebujemy

04:01.050 --> 04:03.560
nowego tekstu z ciała żądania.

04:03.560 --> 04:08.130
Tak więc updatedText może być pobrany z ciała żądania i teraz

04:08.130 --> 04:11.700
ponownie użyjmy typecasting tutaj, aby wyjaśnić,

04:11.700 --> 04:14.100
że będzie właściwość text w ciele

04:14.100 --> 04:16.910
i że będzie to typ String.

04:16.910 --> 04:19.750
A następnie pobierzmy tekst.

04:19.750 --> 04:22.373
A teraz możemy zaktualizować TODO w naszej tablicy TODOS tam na górze.

04:23.830 --> 04:28.710
W tym celu znajdźmy indeks RODO, który chcemy zaktualizować.

04:28.710 --> 04:30.808
todoIndex, sięgając do TODOS, a dzięki

04:30.808 --> 04:33.760
findIndex możemy uruchomić pewną logikę na każdym

04:33.760 --> 04:36.090
elemencie w tablicy TODOS.

04:36.090 --> 04:38.060
I tam patrzymy na każde todo i jeśli

04:38.060 --> 04:40.010
todo id jest równe todoId, które

04:40.010 --> 04:44.300
mamy tutaj, wiemy, że to jest TODO, które chcemy zaktualizować.

04:44.300 --> 04:47.140
Teraz, jeśli z jakiegoś powodu powinno być minus

04:47.140 --> 04:50.550
jeden, oznacza to, że nie znaleźliśmy tego TODO, więc jeśli

04:50.550 --> 04:52.610
jest to mniejsze niż zero zasadniczo,

04:52.610 --> 04:56.960
wiemy, że coś poszło źle i w tym przypadku, rzucę nowy błąd, w którym powiem,

04:56.960 --> 04:59.630
Could not find todo!

04:59.630 --> 05:03.633
I to powinno następnie uruchomić nasze domyślne oprogramowanie pośrednie

05:04.760 --> 05:06.130
do obsługi błędów tutaj.

05:06.130 --> 05:08.633
Teraz, jeśli uda nam się przejść przez to sprawdzenie,

05:09.870 --> 05:12.450
znaleźliśmy TODO, a następnie możemy po prostu

05:12.450 --> 05:15.040
zaktualizować todo na tym indeksie w naszej tablicy

05:15.040 --> 05:18.960
TODOS, aby być nowym TODO, gdzie zachowujemy stare id.

05:18.960 --> 05:23.270
Czyli tam gdzie mamy dostęp do TODOS, todoIndex. id, więc uzyskujemy dostęp do starego ID i zapisujemy go,

05:23.270 --> 05:27.030
ale tekst tutaj, który ustawiam,

05:27.030 --> 05:29.490
oczywiście nie przypisujemy go

05:29.490 --> 05:31.713
w ten sposób.

05:32.870 --> 05:34.570
Ale tekst tutaj, który ustawiliśmy, jest teraz updatedText.

05:34.570 --> 05:38.750
To zastępuje TODO tutaj, a następnie możemy

05:38.750 --> 05:41.340
odesłać odpowiedź, z wiadomością

05:41.340 --> 05:45.280
o, Aktualizacja, na przykład.

05:45.280 --> 05:47.053
I gdzie następnie dołączamy zaktualizowaneTodo

05:47.990 --> 05:51.470
do wychodzącej odpowiedzi i ustawiamy to równe, cóż, TODOS

05:51.470 --> 05:55.090
todoIndex, który teraz ma nową wartość.

05:55.090 --> 05:59.090
To jest coś, co wywołujemy tutaj w naszej logice aktualizacji,

05:59.090 --> 06:02.430
oczywiście jakiś dummy code, ponieważ wciąż pracujemy

06:02.430 --> 06:03.960
z tym w pamięci TODOS array,

06:03.960 --> 06:07.150
ale pokazuje, jak używamy TypeScript tutaj, i to jest

06:07.150 --> 06:09.060
główna rzecz.

06:09.060 --> 06:11.100
Wypróbujmy więc teraz tę funkcję aktualizacji.

06:11.100 --> 06:13.620
W tym celu możemy wrócić do Postmana, a na

06:13.620 --> 06:16.260
koniec teraz chcę wysłać żądanie PATCH, ponieważ

06:16.260 --> 06:19.960
w trasach czekamy na to żądanie patcha do tej trasy.

06:19.960 --> 06:23.460
A mówiąc o tym, że powinniśmy może też najpierw podłączyć

06:23.460 --> 06:24.293
tę trasę do tej

06:24.293 --> 06:26.490
funkcji kontrolera.

06:26.490 --> 06:28.850
Przejdźmy więc do pliku routes

06:28.850 --> 06:33.420
i zaimportujmy updateTodo i ustalmy to połączenie tutaj.

06:33.420 --> 06:35.590
I po tym możemy przystąpić do działania i wysłać ten wniosek.

06:35.590 --> 06:38.570
Więc teraz z powrotem do Postmana, PATCH jest

06:38.570 --> 06:41.890
tym, co chcemy wysłać, a następnie jest http://localhost:3000/todos

06:41.890 --> 06:46.320
i teraz pomysł TODO, który chcemy zaktualizować jako część adresu

06:46.320 --> 06:49.430
URL.

06:49.430 --> 06:50.573
Teraz, skoro coś zapisaliśmy, skoro

06:51.500 --> 06:54.970
zapisaliśmy jakieś zmiany, nasz serwer zrestartował się, więc wszystkie TODOS i tak zostaną utracone.

06:54.970 --> 06:58.890
Więc najpierw wyślijmy ponownie to żądanie POST,

06:58.890 --> 07:01.150
aby utworzyć nowe TODO.

07:01.150 --> 07:02.450
A potem tutaj dostaliśmy ID tego RODO.

07:02.450 --> 07:05.170
Teraz możemy dodać to id tutaj do tego adresu URL.

07:05.170 --> 07:08.800
I dodam też body, które powinno być typu JSON, gdzie ustawiamy

07:08.800 --> 07:11.780
te nowe dane, które chcemy wysłać na serwer.

07:11.780 --> 07:15.560
Teraz pamiętaj, że w naszym kontrolerze aktualizacji,

07:15.560 --> 07:18.570
szukam pola o nazwie text, w przychodzącym

07:18.570 --> 07:20.970
ciele żądania.

07:20.970 --> 07:22.900
Więc powinniśmy ponownie dostarczyć to tutaj

07:22.900 --> 07:24.580
w danych JSON, które wysyłamy.

07:24.580 --> 07:26.690
Skończ kurs w miesiąc,

07:26.690 --> 07:29.440
to może być nasz nowy tekst.

07:29.440 --> 07:31.520
Jeśli teraz wyślemy to, widzimy, że zostało to zaktualizowane.

07:31.520 --> 07:35.210
I jeśli teraz dostanę wszystkie TODOS, widzimy również, że

07:35.210 --> 07:37.180
nadal jest tylko jedno TODO, ale

07:37.180 --> 07:39.430
jest po prostu zmieniony tekst.

07:39.430 --> 07:41.623
Więc teraz to działa, jesteśmy również w stanie zaktualizować TODO.

07:42.950 --> 07:46.470
Sprawdźmy też, co się stanie, jeśli mam id, które nie istnieje,

07:46.470 --> 07:48.780
na przykład usuwając ostatnią cyfrę tutaj,

07:48.780 --> 07:50.620
wtedy dostaję, Could not find todo

07:50.620 --> 07:53.430
w mojej odpowiedzi na błąd typu 500.

07:53.430 --> 07:57.670
Więc to też dobrze wygląda.

07:57.670 --> 07:59.660
Jako Ostatni krok, dodajmy funkcję do usuwania TODO.

07:59.660 --> 08:03.800
Więc w folderze kontrolerów wyeksportuję stałą o nazwie,

08:03.800 --> 08:07.210
deleteTodo, która jest typu RequestHandler.

08:07.210 --> 08:11.460
I znów otrzymujemy nasze żądanie, naszą odpowiedź, a następnie

08:11.460 --> 08:14.040
kolejną funkcję tutaj.

08:14.040 --> 08:17.320
A w tym miejscu, teraz chcę znaleźć

08:17.320 --> 08:20.270
TODO i po prostu go usunąć.

08:20.270 --> 08:21.543
W tym celu możemy faktycznie skopiować

08:22.380 --> 08:25.090
ten kod, w którym otrzymujemy identyfikator RODO, a następnie indeks.

08:25.090 --> 08:29.360
Po prostu pozbądź się tej linii, w której wyodrębniamy zaktualizowany tekst,

08:29.360 --> 08:32.210
ponieważ w przypadku żądania DELETE nie będzie ciała

08:32.210 --> 08:35.660
żądania, ale potrzebujemy, id RODO, które jest częścią naszej

08:35.660 --> 08:37.400
trasy adresu URL.

08:37.400 --> 08:40.340
A następnie znajdujemy indeks i gdy już mamy

08:40.340 --> 08:43.530
indeks, możemy przejść do TODOs, wywołać metodę

08:43.530 --> 08:47.350
splice i usunąć todo na todoIndex, i tylko to todo.

08:47.350 --> 08:51.620
A następnie możemy odesłać odpowiedź, w której

08:51.620 --> 08:54.040
mówimy: Todo deleted! tak po prostu.

08:54.040 --> 08:58.490
To może być nasza logika usuwania.

08:58.490 --> 08:59.380
Teraz nadszedł czas,

08:59.380 --> 09:01.760
aby połączyć to, więc w folderze tras, zaimportujmy

09:01.760 --> 09:04.560
deleteTodo z kontrolerów TODOs i podłączmy go tam na dole.

09:04.560 --> 09:07.440
I z tym podłączonym, jeśli teraz zapiszemy to, ponownie, musimy

09:08.340 --> 09:09.963
dodać TODO, ponieważ wszystkie TODO

09:11.120 --> 09:14.370
są czyszczone przy każdym restarcie serwera, więc tutaj jest.

09:14.370 --> 09:16.720
Skopiuj ten identyfikator.

09:16.720 --> 09:20.550
A teraz wyślijmy to żądanie DELETE.

09:20.550 --> 09:22.680
Więc nowe żądanie DELETE tutaj, do http:/localhost:3000/todos/this

09:22.680 --> 09:24.980
id.

09:24.980 --> 09:27.160
Nie trzeba dodawać żadnego ciała.

09:27.160 --> 09:32.160
Kliknij Wyślij i działa.

09:32.800 --> 09:34.880
Jeśli wyślę go ponownie, otrzymujemy błąd could

09:34.880 --> 09:37.180
not find, ponieważ właśnie go usunęliśmy.

09:37.180 --> 09:39.950
A jeśli dostaniemy wszystkie RODO, to powinna

09:39.950 --> 09:41.570
być pusta tablica i to.

09:41.570 --> 09:42.723
Więc to teraz działa

09:42.723 --> 09:45.550
i jest to zasadniczo funkcjonalność CRUD, dodana

09:45.550 --> 09:46.750
za pomocą TypeScript

09:46.750 --> 09:49.550
tutaj w tej prostej aplikacji Node i Express.

09:49.550 --> 09:50.990
Teraz oczywiście jest to dość trywialna aplikacja,

09:50.990 --> 09:52.940
ale już pokazuje nam pewne wykorzystanie TypeScript.

09:52.940 --> 09:56.060
Pokazuje nam, że piszemy kod, który powinien wyglądać dla

09:56.060 --> 09:58.870
Ciebie znajomo, jeśli przepracujesz resztę tego kursu,

09:58.870 --> 10:00.480
i że używamy wszystkich funkcji,

10:00.480 --> 10:02.000
które tam poznałeś.

10:02.000 --> 10:04.750
I tak jak w części poświęconej Reactowi, to wszystko jest ważne.

10:04.750 --> 10:07.610
Możesz użyć wszystkiego, czego nauczyłeś się o TypeScript

10:07.610 --> 10:10.110
również tutaj, ponieważ jest on coraz kompilowany

10:10.110 --> 10:11.520
do zwykłego kodu JavaScript

10:11.520 --> 10:14.990
w końcu, który następnie serwujemy.
