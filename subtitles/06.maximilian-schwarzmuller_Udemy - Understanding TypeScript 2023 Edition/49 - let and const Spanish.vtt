WEBVTT

00:02.090 --> 00:04.730
Instructor: Ahora bien, antes de que nos sumerjamos en cualquier característica,

00:04.730 --> 00:07.002
adjunto a esta conferencia encontrarás un enlace a esta página.

00:07.002 --> 00:11.350
Esta página básicamente enumera todas las características más o menos

00:11.350 --> 00:13.610
modernas de JavaScript, qué navegadores

00:13.610 --> 00:16.770
soportan estas características y también qué compiladores

00:16.770 --> 00:19.700
soportan estas características.

00:19.700 --> 00:23.150
Y allí también se encuentra TypeScript, TypeScript

00:23.150 --> 00:25.310
combinado con core-js, que es un

00:25.310 --> 00:27.210
proveedor de polyfill.

00:27.210 --> 00:28.820
Pero generalmente esto describe

00:28.820 --> 00:32.070
lo que TypeScript es capaz de compilar.

00:32.070 --> 00:34.110
Ahora siempre puedes usar este recurso si estás

00:34.110 --> 00:35.990
buscando una característica específica

00:35.990 --> 00:37.960
como, digamos, la palabra clave const, donde

00:37.960 --> 00:40.860
quieres saber si TypeScript funciona con eso o no.

00:40.860 --> 00:43.340
Entonces puedes ver cómo funciona con eso, y cuáles

00:43.340 --> 00:46.580
son las restricciones, qué navegadores lo soportan.

00:46.580 --> 00:48.250
Esto también, por cierto, le da una pista

00:48.250 --> 00:51.090
con respecto a los navegadores a los que podría querer dirigirse,

00:51.090 --> 00:53.967
con respecto al objetivo de TypeScript, y así sucesivamente.

00:53.967 --> 00:55.260
Por lo tanto, este es un gran

00:55.260 --> 00:58.600
recurso que le permite cambiar entre diferentes iteraciones de JavaScript,

00:58.600 --> 01:01.940
y las características que cada iteración introdujo, y cómo estas características

01:01.940 --> 01:04.220
son compatibles.

01:04.220 --> 01:06.140
Así que, sin duda, utilícelo como recurso

01:06.140 --> 01:08.800
para saber qué puede utilizar, qué puede compilar

01:08.800 --> 01:11.060
y qué objetivos debe establecer.

01:11.060 --> 01:14.060
Y con eso, empecemos con una de las introducciones

01:14.060 --> 01:17.030
más importantes y obvias, y a menudo utilizadas,

01:17.030 --> 01:19.260
Next-Gen JavaScript añadido.

01:19.260 --> 01:21.780
Por cierto, con Next-Gen JavaScript

01:21.780 --> 01:24.700
me refiero a ES6 o más reciente.

01:24.700 --> 01:27.860
Y eso es let o const, de lo que estoy hablando.

01:27.860 --> 01:32.750
Permite definir constantes o variables.

01:32.750 --> 01:35.350
La diferencia es que las constantes, es decir,

01:35.350 --> 01:38.730
las variables definidas con la palabra clave const, no pueden

01:38.730 --> 01:39.910
ser modificadas.

01:39.910 --> 01:42.410
Si tratas de asignar un nuevo valor aquí, incluso

01:42.410 --> 01:44.270
si tiene el tipo correcto, obtendrás

01:44.270 --> 01:47.220
un error porque es una constante.

01:47.220 --> 01:48.280
Ahora, esto es por cierto,

01:48.280 --> 01:50.200
un error que se forma por TypeScript.

01:50.200 --> 01:53.340
En Vanilla JavaScript, obtendrías un error por parte del navegador cuando

01:53.340 --> 01:55.100
ejecutes tu código aquí, y esa es la idea detrás

01:55.100 --> 01:57.280
de TypeScript, como has aprendido, obtenemos un error

01:57.280 --> 02:00.410
ya mientras estás escribiendo el código, porque eso, por supuesto, es mejor

02:00.410 --> 02:02.990
para nosotros como desarrollador.

02:02.990 --> 02:04.930
Nos permite arreglar este código

02:04.930 --> 02:07.820
antes de probarlo en la consola.

02:07.820 --> 02:11.330
Así que aquí, si eliminamos eso o comentamos esta línea,

02:11.330 --> 02:12.830
ahora se recompila y, por

02:12.830 --> 02:14.400
lo tanto, no obtenemos ningún

02:14.400 --> 02:17.130
error en el navegador, también.

02:17.130 --> 02:20.860
Así que, eso es const. Let es una variable que puede ser modificada,

02:20.860 --> 02:23.620
y por lo tanto, por supuesto, es similar a var.

02:23.620 --> 02:27.260
El var también sigue existiendo porque JavaScript funciona de tal manera

02:27.260 --> 02:29.550
que no se quitan las funciones de repente, porque

02:29.550 --> 02:33.460
entonces los navegadores más antiguos y sus scripts podrían romperse.

02:33.460 --> 02:35.160
Pero no deberías usar más var.

02:35.160 --> 02:37.860
¿Y por qué no deberías usar más var?

02:37.860 --> 02:39.670
Quiero decir, tiene sentido que tengamos const,

02:39.670 --> 02:42.520
porque eso realmente añade una nueva característica, las constantes.

02:42.520 --> 02:43.380
Pero, ¿por qué dejar?

02:43.380 --> 02:45.380
¿Por qué han introducido aquí una nueva palabra clave?

02:45.380 --> 02:47.223
¿Por qué no se han ceñido al var?

02:48.280 --> 02:51.460
Let y const tienen una importante diferencia con var.

02:51.460 --> 02:53.300
Bueno, la diferencia obvia para const es

02:53.300 --> 02:55.240
que el valor no puede ser cambiado, pero para

02:55.240 --> 02:57.040
let, también tenemos una diferencia.

02:57.040 --> 03:00.930
Y ese es el ámbito en el que esta variable está disponible.

03:00.930 --> 03:04.363
Ahora debes conocer este concepto de ámbitos en JavaScript.

03:05.609 --> 03:09.260
Y con var, tienes un ámbito global y otro de función.

03:09.260 --> 03:10.700
Esto significa que las variables

03:10.700 --> 03:12.550
que se definen fuera de las funciones están

03:12.550 --> 03:15.340
disponibles en todas las partes de los scripts.

03:15.340 --> 03:17.410
Las variables definidas dentro de las funciones

03:17.410 --> 03:19.370
sólo están disponibles en esa función.

03:19.370 --> 03:22.610
Por ejemplo, aquí. Si tuviera una función

03:22.610 --> 03:27.610
sumar, y allí podría obtener dos números, a y b.

03:27.670 --> 03:29.750
Entonces podemos añadir una variable allí

03:29.750 --> 03:32.280
con var resultado, digamos, y establecemos resultado

03:32.280 --> 03:34.730
= a + b entonces, y luego devolvemos resultado, y

03:34.730 --> 03:36.230
por supuesto, podríamos haber

03:36.230 --> 03:38.430
escrito esto de una manera más corta pero quiero

03:38.430 --> 03:40.570
mostrar lo que hace var.

03:40.570 --> 03:41.860
Y esto estaría bien.

03:41.860 --> 03:43.012
Y el resultado sólo estaría disponible

03:43.012 --> 03:44.188
dentro de esta función.

03:44.188 --> 03:47.723
Si trato de registrar el resultado en la consola aquí, eso

03:47.723 --> 03:49.470
fallaría porque sólo está disponible

03:49.470 --> 03:52.190
en el ámbito de esta función.

03:52.190 --> 03:53.970
Si lo defino fuera de var harbor todo funciona

03:53.970 --> 03:56.610
porque ahora está disponible globalmente, por lo tanto

03:56.610 --> 03:58.180
aquí puedo acceder a él.

03:58.180 --> 04:00.220
Y además, tal y como funciona JavaScript,

04:00.220 --> 04:03.580
puedes acceder a las variables en un nivel superior.

04:03.580 --> 04:05.210
Por lo tanto, dentro de una función

04:05.210 --> 04:08.260
se puede trabajar con variables de ámbito a esta función, pero

04:08.260 --> 04:11.100
todas las variables que tienen un ámbito superior, como

04:11.100 --> 04:12.563
el ámbito global aquí.

04:13.580 --> 04:14.980
Así que, eso es var.

04:14.980 --> 04:19.180
Ahora bien, en el caso de las lechugas, el comportamiento es generalmente el mismo.

04:19.180 --> 04:21.580
Esto funciona y esto funciona.

04:21.580 --> 04:23.800
Así que, en general, es lo mismo para Let.

04:23.800 --> 04:27.180
Pero una diferencia importante es que en el caso de var,

04:27.180 --> 04:30.860
en realidad sólo tienes alcance global y de funciones.

04:30.860 --> 04:32.460
¿Qué pasa con las sentencias if?

04:32.460 --> 04:36.720
Si comprobamos la edad > 20 aquí, y luego allí creamos una

04:36.720 --> 04:38.889
variable, isOld, y la ponemos

04:38.889 --> 04:41.190
a true, entonces si una consola

04:41.190 --> 04:44.500
registra isOld aquí obtenemos un error en TypeScript,

04:44.500 --> 04:46.270
pero en realidad no lo obtendríamos

04:46.270 --> 04:50.090
en JavaScript.

04:50.090 --> 04:53.620
Este código de aquí, si lo coges sólo para ver que funciona, y te mueves

04:53.620 --> 04:56.280
a las herramientas de desarrollo de JavaScript ahí

04:56.280 --> 04:57.190
en la consola, y lo

04:57.190 --> 04:59.120
pegamos ahí y pulsamos enter, ves que

04:59.120 --> 05:00.970
se imprime true aquí.

05:01.830 --> 05:02.960
Y efectivamente, si se intenta

05:02.960 --> 05:05.040
acceder a isOld, se obtiene true.

05:05.040 --> 05:08.380
Así, esta variable isOld, se registra globalmente, y

05:08.380 --> 05:10.530
no sólo dentro de la sentencia if.

05:10.530 --> 05:11.700
Porque con var, JavaScript

05:11.700 --> 05:13.080
no conoce más ámbitos que

05:13.080 --> 05:15.860
el de las funciones y el global.

05:15.860 --> 05:17.400
Y eso cambia con el let.

05:17.400 --> 05:19.690
Ahora, como he dicho, TypeScript se queja sin embargo,

05:19.690 --> 05:21.600
porque este no es un buen código para escribir,

05:21.600 --> 05:23.170
pero técnicamente, funcionaría.

05:23.170 --> 05:25.100
Con let, eso cambia.

05:25.100 --> 05:26.350
Ahora con let, esto realmente

05:26.350 --> 05:29.880
sólo está disponible dentro de estas llaves rizadas.

05:29.880 --> 05:32.300
Porque let y const introdujeron un nuevo concepto

05:32.300 --> 05:33.540
llamado ámbito de bloque,

05:33.540 --> 05:36.550
que significa que una variable o constante siempre está disponible

05:36.550 --> 05:40.420
en el bloque en el que se define o en cualquier bloque inferior.

05:40.420 --> 05:43.060
Y un bloque es básicamente siempre un fragmento

05:43.060 --> 05:44.900
rodeado de llaves, como lo tienes

05:44.900 --> 05:46.710
para una sentencia if, en un bucle

05:46.710 --> 05:48.760
for, en una función, o incluso, eso

05:48.760 --> 05:50.590
es posible, si simplemente añades

05:50.590 --> 05:52.670
llaves como esta.

05:52.670 --> 05:54.230
Cualquier variable definida

05:54.230 --> 05:56.760
aquí sólo estará disponible en ese bloque.

05:56.760 --> 05:57.700
Y eso es bueno porque

05:57.700 --> 06:00.000
te obliga a escribir un código más limpio

06:00.000 --> 06:02.470
y evitar situaciones como ésta.

06:02.470 --> 06:03.640
Así que sólo para ofrecer una

06:03.640 --> 06:05.530
prueba de que hay una diferencia en el navegador,

06:05.530 --> 06:09.750
si copio este código usando let, y vuelvo a cargar mi página aquí, y ahora introduzco esto aquí, ves

06:09.750 --> 06:14.706
que obtengo un error que isOld no está definido.

06:14.706 --> 06:14.706
Antes no teníamos ningún error.

06:14.706 --> 06:19.706
Efectivamente, si intento dar salida a isOld, vuelvo a tener ese error.

06:20.070 --> 06:21.060
Así que esa es la diferencia.

06:21.060 --> 06:23.370
Y por lo tanto, let y const es mejor, no sólo porque

06:23.370 --> 06:25.740
obtenemos esta característica constante, sino

06:25.740 --> 06:29.150
también porque nos vemos obligados a escribir un código más limpio.

06:29.150 --> 06:30.130
Así que déjame comentar esto

06:30.130 --> 06:31.230
para que vuelva a funcionar.
