WEBVTT

00:02.450 --> 00:04.900
Instrutor: Agora o que fazer se você tem

00:04.900 --> 00:07.090
uma biblioteca onde não é possível instalar

00:07.090 --> 00:10.470
tipos como fizemos para Lodash, por exemplo?

00:10.470 --> 00:14.440
Para Lodash, felizmente temos esse tipo de pacote, e como mencionei,

00:14.440 --> 00:15.880
para a maioria das bibliotecas

00:15.880 --> 00:18.870
de terceiros, você tem isso, mas não necessariamente

00:18.870 --> 00:21.210
para todos.

00:21.210 --> 00:25.320
Ou, e se você tiver algum outro código JavaScript, digamos que

00:25.320 --> 00:27.320
em seu índice. html, você tem

00:27.320 --> 00:29.800
algum outro código de script, que

00:29.800 --> 00:34.800
executa o stare, onde você define alguma variável global.

00:35.350 --> 00:38.450
GLOBAL = 'ESTE ESTÁ DISPONÍVEL' Algo assim

00:38.450 --> 00:40.770
onde no final você sabe que isto estará

00:40.770 --> 00:43.180
disponível globalmente.

00:43.180 --> 00:46.240
Como você sabe, tais variáveis adicionadas desta forma

00:46.240 --> 00:48.600
serão adicionadas ao objeto janela global,

00:48.600 --> 00:50.210
e você quer utilizá-las de dentro

00:50.210 --> 00:52.670
de seu código TypeScript.

00:52.670 --> 00:53.503
Por exemplo,

00:53.503 --> 00:57.770
aqui, se eu quiser consolar. log(GLOBAL) como este, eu recebo

00:57.770 --> 00:59.990
um erro aqui em minha IDE.

00:59.990 --> 01:04.299
E se eu executar o tsc -w para iniciar a compilação, eu também

01:04.299 --> 01:06.340
recebo um erro aqui.

01:06.340 --> 01:09.470
Portanto, não gosta dessa coisa global, apesar

01:09.470 --> 01:11.530
de sabermos que funcionará porque

01:11.530 --> 01:15.630
nosso índice. O arquivo html define esta variável global.

01:15.630 --> 01:18.010
E, como adiamos este roteiro, este

01:18.010 --> 01:19.493
roteiro será executado

01:19.493 --> 01:22.170
depois deste roteiro lá embaixo.

01:22.170 --> 01:23.780
Nesses casos, você tem outra

01:23.780 --> 01:26.460
sintaxe disponível no TypeScript, que

01:26.460 --> 01:29.460
é o comando declare que você pode usar.

01:29.460 --> 01:32.110
Você pode declarar certas variáveis, por

01:32.110 --> 01:34.150
exemplo, para TypeScript.

01:34.150 --> 01:36.730
Você pode declarar var GLOBAL e dizer ao

01:36.730 --> 01:38.640
TypeScript que, por exemplo,

01:38.640 --> 01:42.050
isto será um fio, ou que isto é qualquer coisa.

01:42.050 --> 01:43.687
Isto basicamente diz TypeScript,

01:43.687 --> 01:45.910
"Não se preocupe, ele existirá",

01:45.910 --> 01:47.823
e se nós salvarmos isto, e eu deixar

01:49.090 --> 01:52.580
este compilador e usar webpack em seu lugar, nós vemos

01:52.580 --> 01:55.740
esta saída em nossa página, porque tecnicamente

01:55.740 --> 01:59.060
funciona, e com declarar var, nós também dizemos TypeScript

01:59.060 --> 02:02.270
que isto existe.

02:02.270 --> 02:04.420
Agora vou remover este dmidecode aqui, mas

02:04.420 --> 02:06.770
estar ciente da declaração, desta palavra-chave,

02:06.770 --> 02:08.830
deste comando é importante.

02:08.830 --> 02:12.160
Ele permite que você declare características ou variáveis TypeScript

02:12.160 --> 02:14.590
onde você sabe que elas existem ou deixe o TypeScript

02:14.590 --> 02:17.210
saber sobre pacotes, variáveis globais em geral,

02:17.210 --> 02:18.670
que o Typescript não pode saber,

02:18.670 --> 02:20.150
mas enquanto você, como desenvolvedor,

02:20.150 --> 02:23.373
sabe que elas estarão lá.
