WEBVTT

00:02.200 --> 00:04.080
教师：是时候创建另一个新文件了｡ 

00:04.080 --> 00:13.760
我将重命名应用程序｡  在这里联合别名｡  ts, 并添加新的应用程序｡

00:13.760 --> 00:13.760
ts文件,

00:13.760 --> 00:16.370
我们可以从头开始, 关闭其他文件｡

00:16.370 --> 00:20.660
现在我想更深入地了解函数｡ 

00:20.660 --> 00:22.640
当然, 现在已经与功能一起工作过了｡ 

00:22.640 --> 00:26.340
例如, 这里在union别名文件中使用combine函数｡

00:26.340 --> 00:29.260
例如, 你可以看到, 对于函数,

00:29.260 --> 00:32.520
你可以给函数的参数赋值｡

00:32.520 --> 00:36.483
事实上, 函数和类型还有更多的功能｡

00:37.590 --> 00:40.430
为此, 我将重新创建add函数,

00:40.430 --> 00:43.373
它只接受数字, 而不接受字符串｡

00:44.270 --> 00:49.513
它做了一件简单的事情, 它返回n1加n2, 所以不太复杂｡

00:51.004 --> 00:53.740
正如我所提到的, 我们可以为参数分配类型,

00:53.740 --> 00:55.180
这并不是新的｡

00:55.180 --> 00:57.030
然而, 函数总体上有一个重要的类型,

00:57.030 --> 01:01.050
它有一个返回类型｡

01:01.050 --> 01:03.990
这里的返回类型是由TypeScript推断的｡ 

01:03.990 --> 01:06.490
如果将鼠标悬停在add上, 就可以看到它｡ 

01:06.490 --> 01:10.760
在最后, 参数列表后面的冒号,

01:10.760 --> 01:14.190
描述了函数的返回类型｡

01:14.190 --> 01:16.800
所以返回值的类型｡ 

01:16.800 --> 01:20.020
这里, 我返回n 1和n 2的加法｡ 

01:20.020 --> 01:24.930
因为这两个输入都是数字, 所以TypeScript能够推断出这个函数的结果将是一个数字,

01:24.930 --> 01:30.830
并且因为我们返回它, 所以这个函数数据的返回类型将是一个数字｡

01:30.830 --> 01:33.320
如果您在这里将它们作为字符串连接起来,

01:33.320 --> 01:41.900
例如使用toString, 那么TypeScript将正确地推断我们在这里返回一个字符串｡

01:41.900 --> 01:44.350
当然, 我们可以在这里显式地指定一个返回类型,

01:44.350 --> 01:46.910
方法是在参数列表后面加一个冒号,

01:46.910 --> 01:48.490
然后是你想返回的类型,

01:48.490 --> 01:51.263
比如number｡

01:52.850 --> 01:54.560
这将与推断的类型相同｡ 

01:54.560 --> 01:56.760
例如, 如果我将它设置为string,

01:56.760 --> 02:03.540
我会在这里得到一个错误, 因为很明显, 我在这里的计算与我描述的返回类型不匹配｡

02:03.540 --> 02:10.080
现在, 就像使用变量一样, 让TypeScript完成其有关类型推断的工作是一个好主意｡

02:10.080 --> 02:12.610
如果您没有明确设定型别的特定理由,

02:12.610 --> 02:20.470
就不应该设定型别, 而是让TypeScript推断型别｡

02:20.470 --> 02:22.660
关于返回类型, 有一个有趣的类型是我们以前没有见过的,

02:22.660 --> 02:30.240
如果您有使用其他编程语言的经验, 可能对您来说是全新的｡

02:30.240 --> 02:33.250
因为它是JavaScript中并不存在的类型｡

02:33.250 --> 02:35.180
它是空类型｡ 

02:35.180 --> 02:38.160
假设我们有printResult方法｡ 

02:38.160 --> 02:41.190
这里我们得到了一个数字参数,

02:41.190 --> 02:44.120
它应该是一个数字｡

02:44.120 --> 02:47.510
而在那里, 我想安慰一下｡  日志编号

02:47.510 --> 02:49.450
我想安慰你｡  将其记录为字符串一部分,

02:49.450 --> 02:52.150
我说result加上num｡

02:52.150 --> 02:53.670
现在, 它将连接成一个长字符串,

02:53.670 --> 02:56.090
并输出｡

02:56.090 --> 02:57.777
现在我可以调用printResult｡ 

02:57.777 --> 03:01.020
比如说, 传递我的add函数调用的结果,

03:01.020 --> 03:05.010
5加, 比如说12｡

03:05.010 --> 03:07.670
所以我在这里执行加法运算, 有两个数字｡ 

03:07.670 --> 03:13.130
add返回的结果, 作为参数传递给printResult.

03:13.130 --> 03:15.780
这样就能把它打印到控制台上｡ 

03:15.780 --> 03:19.150
如果我们现在编译它, 然后在我们的页面上,

03:19.150 --> 03:21.110
或者在我们的页面上, 我们看到结果17,

03:21.110 --> 03:24.280
这是有意义的｡

03:24.280 --> 03:27.640
有趣的是printResult的返回类型｡

03:27.640 --> 03:30.353
您猜这里的返回类型是什么？

03:31.240 --> 03:33.240
也许 你 认为 它 是 字符 串 , 因为 我

03:33.240 --> 03:35.150
在 这里 创建 了 一 个 字符 串 ｡

03:35.150 --> 03:37.360
但记住我们不会把这个退回去的｡ 

03:37.360 --> 03:39.400
我们不退任何东西｡ 

03:39.400 --> 03:42.010
因此这里的printResult函数有一个特殊的返回类型,

03:42.010 --> 03:44.990
void.

03:44.990 --> 03:49.830
现在您可能注意到了其他编程语言中的void返回类型｡

03:49.830 --> 03:52.230
你有这样的东西｡ 

03:52.230 --> 03:53.940
JavaScript并不真正了解这一点,

03:53.940 --> 03:56.740
或者说并没有真正为这种情况命名｡

03:56.740 --> 03:58.590
然而, TypeScript却可以｡ 

03:58.590 --> 04:01.840
所以这个函数的返回类型是void.

04:01.840 --> 04:04.065
当然, 您不需要在这里指定它｡ 

04:04.065 --> 04:06.440
TypeScript的推理完成了它的工作｡ 

04:06.440 --> 04:09.610
但我想明确地说明它的返回类型是void,

04:09.610 --> 04:13.730
这就是我在这里添加它的原因, 用于演示目的｡

04:13.730 --> 04:17.070
void实际上只是意味着这个函数没有return语句,

04:17.070 --> 04:21.020
它不返回任何东西.

04:21.020 --> 04:24.540
它成功地完成了任务｡ 

04:24.540 --> 04:28.170
它执行代码, 不会产生错误或类似的结果,

04:28.170 --> 04:32.550
但不会返回任何结果｡

04:32.550 --> 04:34.990
这是void返回类型｡ 

04:34.990 --> 04:39.490
现在技术上讲是JavaScript, 当然, 如果我们可以控制的话｡

04:39.490 --> 04:39.490
在这里记录printResult的结果,

04:39.490 --> 04:46.270
我现在编译它, 我们可以看到在页面上输出了什么｡

04:46.270 --> 04:49.480
我们可以看到它返回了undefined｡ 

04:49.480 --> 04:51.540
从技术上讲, 这很有趣, 在JavaScript中,

04:51.540 --> 05:00.830
如果我们使用一个不返回任何东西的函数的返回值, 我们会得到undefined作为一个值｡

05:00.830 --> 05:05.720
你可能知道, JavaScript中的undefined实际上是一个实数｡

05:05.720 --> 05:08.430
例如, 当您尝试存取不存在的物件上的属性时,

05:08.430 --> 05:11.880
也会取得的值｡

05:11.880 --> 05:13.670
所以这里我们得到了void,

05:13.670 --> 05:16.680
尽管从技术上讲它返回了undefined｡

05:16.680 --> 05:23.300
现在让它更混乱的是, undefined实际上是TypeScript中的一个类型｡

05:23.300 --> 05:25.640
您可以将undefined当做型别｡ 

05:25.640 --> 05:34.700
例如, 一个全新的变量someValue可以接收undefined作为一个类型, 而不会出现错误｡

05:34.700 --> 05:37.380
这个变量将永远处于未定义状态｡ 

05:37.380 --> 05:39.970
这可能有多大用处是另一个问题｡ 

05:39.970 --> 05:43.720
但在TypeScript中undefined是有效的类型｡ 

05:43.720 --> 05:46.600
尽管如此, 在这里您可以看到我们得到了一个错误｡ 

05:46.600 --> 05:48.010
我们得到了一个错误,

05:48.010 --> 05:51.690
因为函数不允许返回undefined｡

05:51.690 --> 05:53.300
从技术上讲, 它当然是这样的,

05:53.300 --> 05:56.850
但是TypeScript对函数的考虑有点不同｡

05:56.850 --> 06:00.200
如果一个函数没有返回任何东西, 并且没有未定义,

06:00.200 --> 06:08.260
那么这里应该使用void, 因为使用void可以清楚地表明这个函数故意没有return语句｡

06:08.260 --> 06:10.690
如果你在这里说undefined,

06:10.690 --> 06:13.460
那么TypeScript会认为你有一个return语句,

06:13.460 --> 06:17.080
你只是不返回一个值｡

06:17.080 --> 06:18.660
这就是技术上的区别｡ 

06:18.660 --> 06:20.670
现在你看到我没有得到一个错误｡ 

06:20.670 --> 06:22.860
从JavaScript的角度来看,

06:22.860 --> 06:26.610
这基本上与此相同｡

06:26.610 --> 06:29.050
但是TypeScript在这里做了一个区分,

06:29.050 --> 06:31.240
因此如果你没有return语句,

06:31.240 --> 06:33.760
你要使用void类型｡

06:33.760 --> 06:37.200
Undefined, 老实说, 您很少需要它,

06:37.200 --> 06:41.100
如果您返回时没有返回实际值, 则可以使用它｡

06:41.100 --> 06:47.560
但同样, 这是一个罕见的用例, 您也可以将void与这样的return语句一起使用｡

06:47.560 --> 06:49.040
您不会收到错误｡ 

06:49.040 --> 06:50.610
默认情况下, 在这种情况下,

06:50.610 --> 06:52.770
实际上总是使用void｡

06:52.770 --> 06:56.750
除非你真的有一个函数应该产生undefined,

06:56.750 --> 06:58.620
而且你想清楚这一点｡

06:58.620 --> 07:01.430
但同样, 这种情况很少发生｡ 

07:01.430 --> 07:05.870
我只是想确认一下, 你们明白void和undefined的区别,

07:05.870 --> 07:10.930
void是一个标准, 在所有的情况下, 当函数不返回值时,

07:10.930 --> 07:15.770
都可以使用, 并且可以显式赋值.

07:15.770 --> 07:20.440
当然, TypeScript也能够推断出它, 就像它在这里也能够一样｡

07:20.440 --> 07:23.083
我只是在这里添加了这个演示｡ 
