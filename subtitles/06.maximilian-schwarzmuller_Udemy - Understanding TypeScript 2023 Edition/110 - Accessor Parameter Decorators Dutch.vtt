WEBVTT

00:02.210 --> 00:03.450
Mannelijke instructeur:

00:03.450 --> 00:06.170
Nu kun je naast eigenschappen ook decoratoren toevoegen

00:06.170 --> 00:09.200
aan accessors en daar zal ik een nieuwe decoratorfunctie maken,

00:09.200 --> 00:11.660
want die krijgt nu vrije argumenten.

00:11.660 --> 00:16.430
Log2, het zal ook het doel krijgen dat weer ofwel het prototype is, als we te maken

00:16.430 --> 00:18.330
hebben met een instance accessor,

00:18.330 --> 00:21.290
of als we te maken hebben met een statische, zal

00:21.290 --> 00:23.360
het de constructor functie zijn,

00:23.360 --> 00:24.960
zodat we niet weten dat we

00:24.960 --> 00:27.290
van elk type zullen zijn.

00:27.290 --> 00:32.290
Dan hebben we de naam van het lid waarmee we te maken hebben.

00:32.410 --> 00:35.030
Dus de naam van de accessor op het einde.

00:35.030 --> 00:38.683
En we hebben hier ook de property descriptor, die van het

00:39.580 --> 00:42.030
type property descriptor zal zijn.

00:42.030 --> 00:44.600
Dat is het type ingebouwd in TypeScript.

00:44.600 --> 00:49.600
Dus daarbinnen, laten we de accessor decorator loggen en dan

00:50.030 --> 00:54.210
zal ik ook console log het doel hier, dan misschien

00:54.210 --> 00:56.470
nieuwe regels om ze leesbaarder

00:56.470 --> 01:01.470
te maken in de uitvoer, de naam en ook de descriptor.

01:01.720 --> 01:05.890
Nu voegen we log2 toe aan de setter en kijken wat

01:05.890 --> 01:07.350
we krijgen.

01:07.350 --> 01:10.733
Als we dat opslaan, zie je daar beneden de accessor

01:10.733 --> 01:14.090
decorator die hier wordt uitgevoerd.

01:14.090 --> 01:19.090
We kregen ons prototype weer, net als een buff voor het pand.

01:19.320 --> 01:23.570
Dan hebben we de naam van onze accessor, prijs in dit geval.

01:23.570 --> 01:24.900
Niet underscore prijs, dus

01:24.900 --> 01:27.890
niet de eigenschap waarmee het zich intern bezighoudt.

01:27.890 --> 01:30.570
In plaats daarvan echt de naam van de accessor zelf.

01:30.570 --> 01:33.630
En we hebben hier een property descriptor waar we zien

01:33.630 --> 01:36.240
dat bijvoorbeeld een setter functie is gedefinieerd,

01:36.240 --> 01:37.600
een getter functie niet,

01:37.600 --> 01:41.990
want voor prijs heb ik alleen een setter, geen getter.

01:41.990 --> 01:44.320
En we zien dat het niet opsombaar is, maar

01:44.320 --> 01:45.680
wel configureerbaar.

01:45.680 --> 01:47.810
Zodat we deze definitie hier kunnen wijzigen,

01:47.810 --> 01:51.000
bijvoorbeeld dat we het kunnen verwijderen enzovoort.

01:51.000 --> 01:54.520
Dit alles bestaat en dit is hoe we een decorator kunnen toevoegen

01:54.520 --> 01:56.650
aan een accessor, en wat we dan binnen

01:56.650 --> 01:58.920
deze decorator kunnen benaderen.

01:58.920 --> 02:00.910
Naast properties en accessors hebben

02:00.910 --> 02:04.350
we nu ook methods en kunnen we decorators toevoegen aan methods.

02:04.350 --> 02:09.350
Dus hier voeg ik Log3 toe, en voeg dat toe aan mijn methode om

02:09.430 --> 02:11.970
prijs met tekst te krijgen.

02:11.970 --> 02:13.220
En nu is de vraag natuurlijk

02:13.220 --> 02:17.323
welke argumenten zo'n method decorator krijgt?

02:18.180 --> 02:22.230
Een method decorator krijgt ook vrije argumenten, waarvan

02:22.230 --> 02:25.520
het doel weer het prototype van het object is

02:25.520 --> 02:28.420
als het een instance methode is.

02:28.420 --> 02:31.150
Als het een statische methode is, de constructorfunctie

02:31.150 --> 02:34.993
net als voorheen, dan de naam van de methode hier, dus een string

02:36.450 --> 02:39.380
of een symbool eigenlijk.

02:39.380 --> 02:44.380
En ook de descriptor aan het einde, eigendomsdescriptor.

02:44.490 --> 02:46.140
Dit zijn de vrije argumenten die we hier

02:46.140 --> 02:48.110
krijgen, en je ziet dat dit dezelfde argumenten

02:48.110 --> 02:49.410
zijn als in onze accessor.

02:49.410 --> 02:51.630
Dus inderdaad zouden we dit ook kunnen

02:51.630 --> 02:54.340
hergebruiken, maar ik zal een nieuwe maken zodat

02:54.340 --> 02:57.483
ik hier methode decorator kan afdrukken.

02:59.020 --> 03:00.840
Als ik dit nu opsla, wordt dit uitgevoerd

03:01.980 --> 03:04.410
en zie je hier onze methode decorator uitvoeren

03:04.410 --> 03:09.380
en dan krijgen we hier ons prototype, hetzelfde object als voorheen.

03:09.380 --> 03:11.310
We krijgen de naam van de methode

03:11.310 --> 03:14.700
hier en we krijgen de descriptor van deze methode hier.

03:14.700 --> 03:17.440
Dus eigenlijk hetzelfde gedrag als voorheen, alleen een

03:17.440 --> 03:19.400
descriptor is een beetje anders omdat het

03:19.400 --> 03:20.950
een methode descriptor is en geen

03:20.950 --> 03:22.550
accessor descriptor.

03:22.550 --> 03:25.720
We hebben hier een waarde en een beschrijfbare eigenschap.

03:25.720 --> 03:27.750
Eerder hadden we op de accessor descriptor

03:27.750 --> 03:28.860
get en set.

03:28.860 --> 03:30.910
Maar dat is gewoon een java script verschil,

03:30.910 --> 03:33.088
niets TypeScript specifiek.

03:33.088 --> 03:38.088
Hier hebben we dus onze derde decoratorfunctie die we nu aan de methode

03:38.150 --> 03:40.070
hebben toegevoegd.

03:40.070 --> 03:43.390
De laatste decorator die we kunnen toevoegen is aan een parameter.

03:43.390 --> 03:45.260
Dus laten we dat nu doen.

03:45.260 --> 03:47.550
Daarvoor maak ik hier nog een functie aan,

03:47.550 --> 03:51.269
Log4 en ik wil Log4 toevoegen aan deze ene parameter die ik hier

03:51.269 --> 03:53.660
krijg, de belasting, en je kunt er natuurlijk

03:53.660 --> 03:55.510
aan elke parameter die je krijgt

03:55.510 --> 03:57.130
een toevoegen.

03:57.130 --> 03:59.560
Dat hoeft niet, maar u kunt ze onafhankelijk toevoegen

03:59.560 --> 04:02.990
aan elke parameter waaraan u een decorator wilt toevoegen.

04:02.990 --> 04:06.419
Wat krijgt een parameter decorator nu als argumenten?

04:06.419 --> 04:10.790
Nou, het doel wordt hetzelfde als voorheen.

04:10.790 --> 04:12.520
Het volgende argument dat we krijgen is de

04:12.520 --> 04:14.100
naam, en niet de naam van de parameter,

04:14.100 --> 04:17.310
maar de naam van de methode waarin we deze parameter hebben gebruikt.

04:17.310 --> 04:20.530
Dus eigenlijk hetzelfde als in de method decorator tot nu toe.

04:20.530 --> 04:22.170
Maar het laatste argument is anders.

04:22.170 --> 04:24.250
Dit is nu niet de property descriptor,

04:24.250 --> 04:28.380
maar dit is de positie van dit argument, dus het nummer van

04:28.380 --> 04:30.100
het argument.

04:30.100 --> 04:32.763
Hier zou dat bijvoorbeeld het eerste argument zijn.

04:35.310 --> 04:38.670
Dus laten we dat hier kopiÃ«ren en

04:38.670 --> 04:43.550
alles in de Log4 parameter decorator zetten.

04:43.550 --> 04:45.410
En laten we de positie hier ook uitvoeren,

04:45.410 --> 04:47.170
zodat we kunnen zien wat erin zit.

04:47.170 --> 04:50.960
Als we het nu opslaan, zien we onze parameter decorator daarboven, niet de

04:50.960 --> 04:53.480
allerlaatste uitvoer omdat de uitvoeringsvolgorde

04:53.480 --> 04:55.630
anders is, maar we zien onze parameter decorator

04:55.630 --> 04:57.180
hier en dan hier.

04:57.180 --> 04:59.530
We kregen het prototype zoals voorheen.

04:59.530 --> 05:00.860
We hebben de naam van de methode

05:00.860 --> 05:02.190
waarin we deze parameter

05:02.190 --> 05:04.770
hebben gebruikt, en dan de index van dat argument,

05:04.770 --> 05:06.240
en die begint bij nul, dus het

05:06.240 --> 05:09.070
eerste argument heeft hier een nummer van nul, een index

05:09.070 --> 05:10.360
van nul, en dat is onze parameter

05:10.360 --> 05:12.740
decorator.

05:12.740 --> 05:14.920
Dit zijn dus alle plaatsen waar we decorators en

05:14.920 --> 05:16.370
TypeScript kunnen toevoegen, en

05:16.370 --> 05:18.570
we kunnen er verschillende dingen mee doen.

05:18.570 --> 05:20.450
Nu zal ik in deze module een paar

05:20.450 --> 05:21.660
voorbeelden laten

05:21.660 --> 05:24.813
zien, en ik zal ook bibliotheken of frameworks laten

05:24.813 --> 05:28.380
zien die veel gebruik maken van decorators.

05:28.380 --> 05:30.550
En ik zal je laten zien wat ze doen met decorateurs

05:30.550 --> 05:34.583
om je een idee te geven van de kracht die decorateurs kunnen hebben.
