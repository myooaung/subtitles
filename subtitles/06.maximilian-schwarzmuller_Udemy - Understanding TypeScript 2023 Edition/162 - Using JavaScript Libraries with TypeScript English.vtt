WEBVTT

1
00:00:02.120 --> 00:00:05.910
<v ->Now we'll start with a very popular utility library,</v>

2
00:00:05.910 --> 00:00:06.770
Lodash.

3
00:00:06.770 --> 00:00:09.840
Now what you'll learn here basically acts as an example

4
00:00:09.840 --> 00:00:13.250
of any JavaScript library you wanna use.

5
00:00:13.250 --> 00:00:17.430
No matter if that's Lodash, jQuery, or anything else.

6
00:00:17.430 --> 00:00:19.510
Now a little side note at this point,

7
00:00:19.510 --> 00:00:21.640
if you're interested in how to work with

8
00:00:21.640 --> 00:00:24.150
React and TypeScript or let's say

9
00:00:24.150 --> 00:00:26.718
Node.js.and Express and TypeScript,

10
00:00:26.718 --> 00:00:31.350
I have dedicated modules on that later down in the course,

11
00:00:31.350 --> 00:00:33.760
because there you will learn a bit more than just

12
00:00:33.760 --> 00:00:35.730
adding them with TypeScript.

13
00:00:35.730 --> 00:00:40.470
But for a simpler librarys, like Lodash, like jQuery and on

14
00:00:40.470 --> 00:00:43.010
here's an approach that will work.

15
00:00:43.010 --> 00:00:45.340
So we want to use Lodash in our project.

16
00:00:45.340 --> 00:00:48.460
Lodash of course is a JavaScript library.

17
00:00:48.460 --> 00:00:50.800
We don't need TypeScript to use it,

18
00:00:50.800 --> 00:00:53.480
we can use it in any JavaScript project

19
00:00:53.480 --> 00:00:56.770
and we can install it as you basically learn here

20
00:00:56.770 --> 00:00:59.200
on Lodash official docs.

21
00:00:59.200 --> 00:01:01.400
If you are using npm, which we are,

22
00:01:01.400 --> 00:01:05.390
you can run npm i or npm install, that's just a short form,

23
00:01:05.390 --> 00:01:06.477
"--save/lodash".

24
00:01:07.750 --> 00:01:10.820
So here in this example project which uses webpack

25
00:01:10.820 --> 00:01:12.640
without a production workflow though

26
00:01:12.640 --> 00:01:14.180
just a development workflow.

27
00:01:14.180 --> 00:01:16.570
There we can add this library by just running

28
00:01:16.570 --> 00:01:18.607
nmp install dash dash save Lodash.

29
00:01:18.607 --> 00:01:21.700
And this will now install it into this project

30
00:01:21.700 --> 00:01:23.500
and thanks to our webpack setup

31
00:01:23.500 --> 00:01:26.250
we can just import it into our code files

32
00:01:26.250 --> 00:01:27.517
and utilize it there.

33
00:01:27.517 --> 00:01:30.670
And that would be the same in any webpack powered

34
00:01:30.670 --> 00:01:32.250
JavaScript Project.

35
00:01:32.250 --> 00:01:34.990
If you're not using webpack, then of course

36
00:01:34.990 --> 00:01:37.720
you could also simply use the CDN and so on.

37
00:01:37.720 --> 00:01:40.630
However, what I will show you in the next steps

38
00:01:40.630 --> 00:01:42.390
a little bit later in this module,

39
00:01:42.390 --> 00:01:45.130
will only work in a webpack setup.

40
00:01:45.130 --> 00:01:47.730
So here we have a webpack setup, we now installed Lodash,

41
00:01:47.730 --> 00:01:49.320
and now if we want to use it,

42
00:01:49.320 --> 00:01:51.510
we can simply import it here.

43
00:01:51.510 --> 00:01:55.600
We can import, let's say underscore from 'Lodash'.

44
00:01:55.600 --> 00:01:57.960
That is a syntax which should be available

45
00:01:57.960 --> 00:01:59.960
with Lodash installed.

46
00:01:59.960 --> 00:02:03.057
However, this now already gives us an error.

47
00:02:03.057 --> 00:02:06.850
"Could not find a declaration file for module Lodash".

48
00:02:06.850 --> 00:02:09.890
And we'll have another problem, if you want to use Lodash

49
00:02:09.890 --> 00:02:12.230
for example to shuffle an array,

50
00:02:12.230 --> 00:02:16.810
well we could consol log underscore shuffle

51
00:02:16.810 --> 00:02:19.000
and then pass let's say a simple array to

52
00:02:19.000 --> 00:02:20.430
this shuffle method.

53
00:02:20.430 --> 00:02:23.110
The shuffle method is a method Lodash supports.

54
00:02:23.110 --> 00:02:25.790
We can learn this in the official documentation

55
00:02:25.790 --> 00:02:26.820
of Lodash.

56
00:02:26.820 --> 00:02:29.056
There, if you search for "shuffle", you learn that

57
00:02:29.056 --> 00:02:32.370
you can shuffle an array with this method.

58
00:02:32.370 --> 00:02:37.010
So, it kind of should work, but it really doesn't

59
00:02:37.010 --> 00:02:39.480
work this way, as you can tell.

60
00:02:39.480 --> 00:02:43.058
If I now start my webpack server here,

61
00:02:43.058 --> 00:02:45.890
we will see that the CDN gives us an error.

62
00:02:45.890 --> 00:02:47.077
And again it tells us that it

63
00:02:47.077 --> 00:02:50.940
"can't find a declaration file for module Lodash".

64
00:02:50.940 --> 00:02:54.720
So, this is not really working in the way it should.

65
00:02:54.720 --> 00:02:57.610
Now the problem with that is, that Lodash

66
00:02:57.610 --> 00:02:59.930
is a simple JavaScript library.

67
00:02:59.930 --> 00:03:02.250
It's built with vanilla JavaScript,

68
00:03:02.250 --> 00:03:05.150
and it's built for vanilla JavaScript.

69
00:03:05.150 --> 00:03:08.530
We can verify this if we go to node modules,

70
00:03:08.530 --> 00:03:10.280
where we have a lot of dependencies,

71
00:03:10.280 --> 00:03:12.450
because we have a lot of dependencies of webpack

72
00:03:12.450 --> 00:03:14.220
and it's dependencies there.

73
00:03:14.220 --> 00:03:17.010
But here, if we search for Lodash,

74
00:03:17.010 --> 00:03:17.930
here it is.

75
00:03:17.930 --> 00:03:21.330
And we expand as we see there are a bunch of JavaScript

76
00:03:21.330 --> 00:03:22.750
files in there, right?

77
00:03:22.750 --> 00:03:26.380
And that's there in all of Lodash source code.

78
00:03:26.380 --> 00:03:30.010
Bunch of JavaScript code but certainly no TypeScript code.

79
00:03:30.010 --> 00:03:31.750
Now what's the problem with that?

80
00:03:31.750 --> 00:03:35.550
The problem is TypeScript doesn't understand

81
00:03:35.550 --> 00:03:37.070
what's in this package.

82
00:03:37.070 --> 00:03:41.020
It doesn't understand which methods Lodash exports.

83
00:03:41.020 --> 00:03:43.480
Now you will see that it actually works if we go to

84
00:03:43.480 --> 00:03:45.500
the tsconfig.json file.

85
00:03:45.500 --> 00:03:48.740
And we make sure that we do emit an output upon an error.

86
00:03:48.740 --> 00:03:52.650
So if we switch "noEmitOnError" to "false" so that we do

87
00:03:52.650 --> 00:03:55.770
emit new output if something errors out.

88
00:03:55.770 --> 00:03:57.600
For now, start this again,

89
00:03:57.600 --> 00:04:00.230
it in the end will give us that same error,

90
00:04:00.230 --> 00:04:02.160
so we'll still see that.

91
00:04:02.160 --> 00:04:05.090
But if I reload this page here,

92
00:04:05.090 --> 00:04:07.120
you actually will get an output here.

93
00:04:07.120 --> 00:04:08.922
You can ignore the error at the bottom here,

94
00:04:08.922 --> 00:04:12.580
you will see an output which is the shuffled array.

95
00:04:12.580 --> 00:04:14.920
You see, it looks different every time I reload.

96
00:04:14.920 --> 00:04:16.530
And that's very interesting.

97
00:04:16.530 --> 00:04:19.770
It proves that Lodash works, it proves that

98
00:04:19.770 --> 00:04:21.280
this code is correct.

99
00:04:21.280 --> 00:04:24.170
But unfortunately, TypeScript does not understand it,

100
00:04:24.170 --> 00:04:28.400
and it can't because Lodash uses JavaScript, not TypeScript.

101
00:04:28.400 --> 00:04:31.220
Now the problem is there is no TypeScript

102
00:04:31.220 --> 00:04:34.080
the version of Lodash, so we have to live with that.

103
00:04:34.080 --> 00:04:37.220
And that's a scenario you will encounter quite a bit.

104
00:04:37.220 --> 00:04:39.365
You wanna use a certain third party library,

105
00:04:39.365 --> 00:04:42.270
and it's only built for JavaScript, and hence

106
00:04:42.270 --> 00:04:44.210
you get errors like that.

107
00:04:44.210 --> 00:04:46.060
This is annoying because it in theory,

108
00:04:46.060 --> 00:04:47.430
we can of course use it.

109
00:04:47.430 --> 00:04:49.630
TypeScript builds up on JavaScript.

110
00:04:49.630 --> 00:04:53.160
We can use any JavaScript Library in a TypeScript project,

111
00:04:53.160 --> 00:04:56.150
we just have to translate it to TypeScript.

112
00:04:56.150 --> 00:04:58.890
And that thankfully in possible.

113
00:04:58.890 --> 00:05:02.564
So let me turn on this setting here,

114
00:05:02.564 --> 00:05:04.220
"noEmitOnError true".

115
00:05:04.220 --> 00:05:07.200
Let me show you how we can tell TypeScript

116
00:05:07.200 --> 00:05:10.053
about Lodash and about what it offers.

117
00:05:11.140 --> 00:05:13.662
You can install the so-called types

118
00:05:13.662 --> 00:05:16.250
of a third party library.

119
00:05:16.250 --> 00:05:20.050
If you search for Lodash types, you will find an npm package

120
00:05:20.050 --> 00:05:24.140
which here is called "@types/lodash".

121
00:05:24.140 --> 00:05:26.440
There you also see install command,

122
00:05:26.440 --> 00:05:28.120
which will run in a second.

123
00:05:28.120 --> 00:05:30.580
But if you go down to details you also find a link

124
00:05:30.580 --> 00:05:32.220
to github repository.

125
00:05:32.220 --> 00:05:36.320
It links to DefinitelyTyped, which is a huge repository

126
00:05:36.320 --> 00:05:39.260
with tons of translations for all kinds

127
00:05:39.260 --> 00:05:40.820
of third party libraries.

128
00:05:40.820 --> 00:05:43.120
Here we are in the Lodash folder.

129
00:05:43.120 --> 00:05:46.590
And there you find so-called .dts files.

130
00:05:46.590 --> 00:05:50.180
So not just .ts but .dts.

131
00:05:50.180 --> 00:05:53.460
These are so-called declaration files which means

132
00:05:53.460 --> 00:05:55.760
they don't contain any actual logic,

133
00:05:55.760 --> 00:05:58.750
but if we have a look at the shuffle .dts file,

134
00:05:58.750 --> 00:06:01.848
they contain instructions to TypeScript.

135
00:06:01.848 --> 00:06:05.200
They basically tell TypeScript how something works

136
00:06:05.200 --> 00:06:08.720
and what's included in this package.

137
00:06:08.720 --> 00:06:10.700
And you can explore different files here

138
00:06:10.700 --> 00:06:14.280
all in different sub-folders, to learn more about that.

139
00:06:14.280 --> 00:06:17.717
So in the end these files simply provide a translation

140
00:06:17.717 --> 00:06:21.750
from plain JavaScript to TypeScript.

141
00:06:21.750 --> 00:06:23.860
They don't contain any logic that runs,

142
00:06:23.860 --> 00:06:26.950
but they define the types this library works with.

143
00:06:26.950 --> 00:06:30.010
They define the types you use, the types you get back

144
00:06:30.010 --> 00:06:32.490
when you call a method, and so on.

145
00:06:32.490 --> 00:06:35.410
You can also write such .dts files on your own,

146
00:06:35.410 --> 00:06:38.510
and the official types of docs provide a guide on that

147
00:06:38.510 --> 00:06:40.470
if that's what you're interested in.

148
00:06:40.470 --> 00:06:42.110
But for your own types of projects

149
00:06:42.110 --> 00:06:43.160
you don't have to do that,

150
00:06:43.160 --> 00:06:45.820
because if you're writing TypeScript codes only

151
00:06:45.820 --> 00:06:48.110
TypeScript of course understands that.

152
00:06:48.110 --> 00:06:50.310
But if you're working with a third party library

153
00:06:50.310 --> 00:06:53.840
written in JavaScript without any TypeScript code,

154
00:06:53.840 --> 00:06:56.860
or without built in .dts files,

155
00:06:56.860 --> 00:06:59.950
which some third party libraries ship by the way,

156
00:06:59.950 --> 00:07:02.240
even if they are written in JavaScript,

157
00:07:02.240 --> 00:07:03.960
Lodash doesn't though.

158
00:07:03.960 --> 00:07:06.890
So if you're working with a library that does not contain

159
00:07:06.890 --> 00:07:08.330
built-in translation files,

160
00:07:08.330 --> 00:07:11.180
and that is not natively written in TypeScript,

161
00:07:11.180 --> 00:07:15.760
then, using such a types packages is the solution.

162
00:07:15.760 --> 00:07:20.760
So here we then run "npm install --save@types/Lodash".

163
00:07:21.860 --> 00:07:24.600
You can actually also run "save-dev",

164
00:07:24.600 --> 00:07:27.920
because dev is a dependency that's really only required

165
00:07:27.920 --> 00:07:29.230
during development,

166
00:07:29.230 --> 00:07:30.980
because then the code is complied

167
00:07:30.980 --> 00:07:32.360
through JavaScript anyways.

168
00:07:32.360 --> 00:07:36.130
And this now installs this translation

169
00:07:36.130 --> 00:07:38.060
from TypeScript to understand it.

170
00:07:38.060 --> 00:07:40.630
And you see, as soon as this is installed,

171
00:07:40.630 --> 00:07:42.510
this error is gone.

172
00:07:42.510 --> 00:07:46.220
And if I now restart npm start, you will see the error

173
00:07:46.220 --> 00:07:48.270
won't come back here either.

174
00:07:48.270 --> 00:07:51.640
So you see now this works without any errors,

175
00:07:51.640 --> 00:07:55.190
both in the compilation as well as in the browser.

176
00:07:55.190 --> 00:07:57.270
Technically it worked before as well,

177
00:07:57.270 --> 00:07:59.160
but now with the translation,

178
00:07:59.160 --> 00:08:01.580
we also can utilize TypeScript.

179
00:08:01.580 --> 00:08:04.660
And for example now we also get all the completion here,

180
00:08:04.660 --> 00:08:05.493
in the IDE.

181
00:08:05.493 --> 00:08:10.070
If I type a dot here, I see the Lodash methods I can use.

182
00:08:10.070 --> 00:08:13.930
This therefore is a very important piece of knowledge,

183
00:08:13.930 --> 00:08:16.400
something you definitely have to be aware of,

184
00:08:16.400 --> 00:08:19.370
which allows you to use regular, normal,

185
00:08:19.370 --> 00:08:21.177
vanilla JavaScript libraries,

186
00:08:21.177 --> 00:08:24.220
in a TypeScript project, and still get

187
00:08:24.220 --> 00:08:26.880
great support, great auto-completion,

188
00:08:26.880 --> 00:08:28.490
and avoid errors.

189
00:08:28.490 --> 00:08:33.030
With the help of these tranlastion types packages,

190
00:08:33.030 --> 00:08:33.990
you could say.

191
00:08:33.990 --> 00:08:38.990
And these packages, which are always named "@types",

192
00:08:39.290 --> 00:08:40.860
and then the package name,

193
00:08:40.860 --> 00:08:45.270
these basically exist for any popular third party library

194
00:08:45.270 --> 00:08:46.730
you can find out there.

195
00:08:46.730 --> 00:08:49.960
You can always search for library name, and then types

196
00:08:49.960 --> 00:08:51.690
for example jQuery types,

197
00:08:51.690 --> 00:08:54.400
and you should find such an entry.

198
00:08:54.400 --> 00:08:57.350
So that is how you can work with types

199
00:08:57.350 --> 00:08:59.373
in vanilla JavaScript libraries.

