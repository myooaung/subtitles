WEBVTT

00:02.200 --> 00:03.970
Instrutor: Agora é isto para este módulo.

00:03.970 --> 00:06.080
Obviamente, o JavaScript moderno também tem algumas

00:06.080 --> 00:07.790
outras características bem arrumadas.

00:07.790 --> 00:09.810
Por exemplo, vou cobrir aulas no módulo

00:09.810 --> 00:11.120
de aula e, em geral, este

00:11.120 --> 00:13.470
não é um curso de JavaScript.

00:13.470 --> 00:16.540
Não quero aborrecê-lo com toneladas de conhecimento de

00:16.540 --> 00:19.030
JavaScript que não está realmente relacionado

00:19.030 --> 00:20.140
ao TypeScript.

00:20.140 --> 00:22.700
Eu queria mencionar estas características específicas

00:22.700 --> 00:24.650
porque é bom saber que o TypeScript nos ajuda

00:24.650 --> 00:28.210
a usar estas características de uma forma que ainda funciona em navegadores

00:28.210 --> 00:29.580
mais antigos.

00:29.580 --> 00:32.920
Porque isso é algo que você nunca deve esquecer.

00:32.920 --> 00:35.600
Seu código é compilado.

00:35.600 --> 00:38.690
Atualmente, tenho que estabelecer como meta o ES6 e,

00:38.690 --> 00:41.540
portanto, se verificarmos a pasta dist que vemos

00:41.540 --> 00:44.280
constantes, todas estão disponíveis também no

00:44.280 --> 00:46.030
arquivo do aplicativo JS.

00:46.030 --> 00:48.070
Objeto de estruturação, há uma maneira

00:48.070 --> 00:50.600
de gostar disso lá porque todas essas características

00:50.600 --> 00:52.480
são suportadas no ES6.

00:52.480 --> 00:55.230
Se eu definir a meta para o ES5 e comentar a liberdade

00:55.230 --> 00:56.590
agora, para que as liberdades

00:56.590 --> 00:58.680
corretas sejam importadas para o alvo

00:58.680 --> 01:00.930
ES5, o que acontecerá por padrão, você

01:00.930 --> 01:05.290
verá que o código gerado agora parece bem diferente.

01:05.290 --> 01:08.140
É muito mais longo porque agora estamos usando var

01:08.140 --> 01:09.810
e TypeScript teve que encontrar

01:09.810 --> 01:12.960
trabalho em torno de certas sintaxes que não são suportadas

01:12.960 --> 01:14.730
no ES5 JavaScript.

01:14.730 --> 01:18.240
Por exemplo, a sintaxe de estruturação foi removida.

01:18.240 --> 01:21.140
Portanto, isso é uma coisa importante a ter sempre em mente.

01:21.140 --> 01:23.490
O TypeScript compila seu código, não

01:23.490 --> 01:26.440
apenas das características do TypeScript até

01:26.440 --> 01:29.210
o JavaScript normal, mas todos eles do JavaScript

01:29.210 --> 01:33.000
moderno ao JavaScript antigo, se você disser ao TypeScript

01:33.000 --> 01:35.433
para fazer isso.
