WEBVTT

00:02.340 --> 00:04.100
Erzähler: Wir haben also mit Generics

00:04.100 --> 00:06.670
angefangen und es ist hoffentlich klar, was TypeScript

00:06.670 --> 00:10.240
hier macht: Wir übergeben einige zusätzliche Informationen an die Merge-Funktion,

00:10.240 --> 00:12.130
so dass wir besser mit dem Ergebnis der Merge-Funktion

00:12.130 --> 00:14.370
arbeiten können.

00:14.370 --> 00:16.540
Dafür sind Generika normalerweise da.

00:16.540 --> 00:19.890
Sie ermöglichen es Ihnen, mit Ihren Daten in optimaler TypeScript-Manier

00:19.890 --> 00:21.960
weiterzuarbeiten.

00:21.960 --> 00:23.820
In diesem Fall hätten wir jedoch

00:23.820 --> 00:25.810
ein Problem, wenn ich hier, sagen

00:25.810 --> 00:28.570
wir, nur eine Zahl 30 eingebe.

00:28.570 --> 00:30.470
Natürlich gibt TypeScript jetzt einen Fehler aus, weil

00:30.470 --> 00:32.010
es versucht, auf das Alter zuzugreifen, aber

00:32.010 --> 00:33.870
der Zugriff auf den Namen würde funktionieren.

00:33.870 --> 00:37.100
Nichtsdestotrotz, wenn wir das speichern, kompiliert es ohne

00:37.100 --> 00:39.710
Fehler, und wenn ich das gesamte zusammengeführte

00:39.710 --> 00:41.610
Objekt ausdrucke, sehen wir, was ich

00:41.610 --> 00:43.910
zurückbekomme, ist nur Hobbys und Name in meinem

00:43.910 --> 00:46.570
Objekt, was Sinn macht, weil 30 eine Zahl ist, und wenn

00:46.570 --> 00:48.010
wir das als zweites Argument

00:48.010 --> 00:50.080
an object assign übergeben, was wir letztendlich

00:50.080 --> 00:51.920
hier tun, nun, dann schlägt das einfach

00:51.920 --> 00:54.590
stillschweigend fehl.

00:54.590 --> 00:57.860
JavaScript wirft keinen Fehler, es beschwert sich nicht.

00:57.860 --> 01:00.460
Aber natürlich wird auch nicht die 30 in das neu erstellte

01:00.460 --> 01:02.270
Objekt eingefügt, wie Sie sehen,

01:02.270 --> 01:04.690
gibt es keine 30 in diesem Objekt.

01:04.690 --> 01:06.540
Wie würde JavaScript dies tun?

01:06.540 --> 01:08.470
Da es sich bei 30 nicht um ein Objekt handelt,

01:08.470 --> 01:12.150
ist eine Objektzuweisung nur in der Lage, verschiedene Objekte miteinander

01:12.150 --> 01:14.090
zu verschmelzen.

01:14.090 --> 01:15.410
Was wollen wir also am Ende retten?

01:15.410 --> 01:17.600
Nun, der genaue Typ ist uns egal, ebenso

01:17.600 --> 01:20.040
wie die genaue Struktur des Objekts,

01:20.040 --> 01:22.980
das Sie hier für U und T bereitstellen.

01:22.980 --> 01:26.600
Was uns aber wichtig ist, ist, dass beide Parameter,

01:26.600 --> 01:31.370
beide Typen T und U, jede Art von Objekt sein sollten, aber sie

01:31.370 --> 01:34.420
sollten immer ein Objekt sein.

01:34.420 --> 01:36.830
Und im Moment sagen wir das nicht.

01:36.830 --> 01:37.820
Zurzeit sagen wir nur,

01:37.820 --> 01:40.110
dass sie von jeder Art sein sollten, es ist mir egal.

01:40.110 --> 01:41.750
Das ist aber oft nicht in Ordnung.

01:41.750 --> 01:45.060
Sie wollen die Typen T und U hier einschränken, lösen Sie

01:45.060 --> 01:46.683
Ihre generischen Typen.

01:47.830 --> 01:51.540
Das kann man mit Type Constraints machen.

01:51.540 --> 01:55.170
Für generische Typen können Sie bestimmte Einschränkungen in Bezug auf

01:55.170 --> 01:58.280
die Typen festlegen, auf denen Ihre generischen Typen basieren

01:58.280 --> 02:01.120
können, und Sie tun dies mit dem erweiterten Schlüsselwort

02:01.120 --> 02:05.150
hier in den spitzen Klammern nach dem Typ, den Sie einschränken möchten.

02:05.150 --> 02:07.410
Hier könnten wir also sagen: extends

02:07.410 --> 02:09.020
object, und damit will ich

02:09.020 --> 02:12.740
sagen, der Typ T kann ein beliebiges Objekt mit beliebiger Struktur

02:12.740 --> 02:15.340
sein, aber es muss ein Objekt sein.

02:15.340 --> 02:17.480
Wir können dasselbe für Sie tun.

02:17.480 --> 02:19.040
Und wenn ich das tue, sehe

02:19.040 --> 02:21.820
ich jetzt schon einen Fehler hier in der IDE.

02:21.820 --> 02:23.980
Und wenn ich versuche, das zu speichern,

02:23.980 --> 02:26.150
bekomme ich auch einen Fehler im Compiler,

02:26.150 --> 02:28.640
weil das Argument vom Typ 30 hier nicht dem

02:28.640 --> 02:31.133
Typ Objekt zuzuordnen ist.

02:32.080 --> 02:34.480
Das ist natürlich das Verhalten, das wir hier wollen.

02:34.480 --> 02:38.190
Jetzt sind wir gezwungen, wieder ein Objekt zu übergeben,

02:38.190 --> 02:39.940
hoppla, etwa so.

02:39.940 --> 02:41.990
Jetzt sind wir gezwungen, das wieder einzugeben, und

02:41.990 --> 02:43.680
deshalb verbessern wir diese Funktion, weil

02:43.680 --> 02:45.290
sie jetzt wirklich funktioniert.

02:45.290 --> 02:48.980
Und wir wissen, dass die Objektzuordnung zwei Objekte will.

02:48.980 --> 02:51.000
Letztendlich wollen wir also garantieren,

02:51.000 --> 02:52.820
dass wir zwei Objekte erhalten, indem wir

02:52.820 --> 02:56.370
bestimmte Einschränkungen für unsere generischen Typen festlegen.

02:56.370 --> 02:58.630
Und diese Zwänge können alles Mögliche sein.

02:58.630 --> 03:01.290
Sie können sich auf Objekte beziehen, auf Strings, Sie können

03:01.290 --> 03:03.730
Ihren eigenen Typ verwenden, wenn Sie ihn haben.

03:03.730 --> 03:06.700
Sie können hier auch Vereinigungstypen verwenden, wenn Sie wollen, Sie

03:06.700 --> 03:08.470
sind da wirklich flexibel, Sie können alle

03:08.470 --> 03:10.510
Einschränkungen festlegen, die Sie wollen.

03:10.510 --> 03:12.620
Und natürlich müssen Sie nicht alle generischen

03:12.620 --> 03:13.720
Typen einschränken.

03:13.720 --> 03:16.560
Wenn Sie nur U einschränken wollen, können Sie das tun.

03:16.560 --> 03:19.620
In diesem Beispiel ist es nur sinnvoll, beide einzuschränken,

03:19.620 --> 03:22.880
weil object assign hier zwei Objekte will, aber Sie sind da

03:22.880 --> 03:24.640
wirklich flexibel.

03:24.640 --> 03:26.620
Es ist wichtig, sich dieses Konzept der

03:26.620 --> 03:28.440
Beschränkungen bewusst zu machen,

03:28.440 --> 03:30.560
denn es ermöglicht Ihnen, mit generischen

03:30.560 --> 03:32.640
Typen auf optimale Weise zu arbeiten, wodurch

03:32.640 --> 03:34.810
unnötige Fehler oder seltsames Verhalten

03:34.810 --> 03:37.513
vermieden werden, wie wir es zuvor hatten.
