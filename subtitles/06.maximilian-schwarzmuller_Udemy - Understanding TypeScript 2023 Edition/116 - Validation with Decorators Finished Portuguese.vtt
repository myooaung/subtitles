WEBVTT

00:02.320 --> 00:05.210
Instrutor: Para implementar isto, primeiro vou criar

00:05.210 --> 00:08.217
uma interface ValidatorConfig, onde eu quero configurar

00:09.550 --> 00:12.680
aquele armazenamento com o qual quero trabalhar.

00:12.680 --> 00:15.130
Minha idéia ali é ter um par de propriedades, e por

00:15.130 --> 00:17.653
isso uso esta notação de tipo de índice aqui.

00:19.720 --> 00:21.450
Que são basicamente cordas,

00:21.450 --> 00:23.440
onde o valor é mais um objeto.

00:23.440 --> 00:26.380
Porque este aqui seria basicamente o nome da classe para a

00:26.380 --> 00:29.570
qual queremos registrar algumas propriedades validadas.

00:29.570 --> 00:31.700
E então, no objeto que armazenamos

00:31.700 --> 00:34.580
ali, temos as propriedades concretas da classe

00:34.580 --> 00:37.010
que têm validadores ligados a eles.

00:37.010 --> 00:40.610
Portanto, aqui temos a propriedade validável, se você

00:40.610 --> 00:42.240
quiser chamá-la assim, que

00:42.240 --> 00:44.660
também será uma chave de corda.

00:44.660 --> 00:47.350
E então o valor para isso deve ser um conjunto

00:47.350 --> 00:50.010
de cordas onde basicamente temos algo como

00:52.420 --> 00:55.490
necessário, positivo, e assim por diante.

00:55.490 --> 00:57.460
Portanto, algo assim poderia ser adicionado

00:57.460 --> 00:59.323
aqui como uma lista de validadores.

01:00.300 --> 01:05.300
Agora podemos criar nossos validadores registrados aqui, que devem ser do tipo

01:05.790 --> 01:07.950
ValidatorConfig, que inicialmente

01:07.950 --> 01:09.640
é um objeto vazio.

01:09.640 --> 01:11.500
Porque inicialmente, quando o aplicativo

01:11.500 --> 01:13.920
começa, quando nossa biblioteca de terceiros é carregada,

01:13.920 --> 01:16.293
nenhum validador foi registrado ainda.

01:17.640 --> 01:19.920
Bem, e então aqui em nossos diretores

01:19.920 --> 01:23.490
queremos acrescentar algo a esse registro.

01:23.490 --> 01:28.020
Agora tenha em mente que uma função decoradora de propriedade recebe dois

01:28.020 --> 01:31.010
argumentos: o alvo, que é o protótipo do objeto

01:31.010 --> 01:33.910
sobre o qual a propriedade se assenta, ou a função

01:33.910 --> 01:37.340
construtora se fosse uma propriedade estática, e o nome

01:37.340 --> 01:39.300
da propriedade.

01:39.300 --> 01:40.710
Estes são os dois argumentos

01:40.710 --> 01:44.370
que temos aqui, não temos o descritor de propriedades.

01:44.370 --> 01:46.760
Agora podemos ir até nossos validadores registrados

01:46.760 --> 01:51.463
e lá quero acrescentar uma nova entrada para o alvo. construtor.

01:52.730 --> 01:56.070
O protótipo da instância com a qual estamos trabalhando

01:56.070 --> 01:58.430
terá uma chave construtora que aponta

01:58.430 --> 02:02.610
para a função construtora que foi usada para criar nosso objeto.

02:02.610 --> 02:04.690
E isso, portanto, será basicamente algo

02:04.690 --> 02:06.120
como curso aqui, de modo que

02:06.120 --> 02:08.460
o nome dessa função do construtor no final pode

02:08.460 --> 02:10.560
ser recuperado daquele construtor.

02:10.560 --> 02:11.900
Como construtor é uma função,

02:11.900 --> 02:13.400
podemos usar a propriedade do

02:13.400 --> 02:15.900
nome, que existe em qualquer função em JavaScript

02:15.900 --> 02:18.310
para obter o nome da função, e este será então o

02:18.310 --> 02:20.620
nome do curso aqui, por exemplo.

02:20.620 --> 02:23.390
Portanto, agora registramos o nome da classe como uma chave

02:23.390 --> 02:25.030
em validadores registrados.

02:25.030 --> 02:28.130
E o valor para isso então deve ser outro objeto.

02:28.130 --> 02:30.630
Por isso, coloco aqui isto igual a outro objeto.

02:30.630 --> 02:32.390
E nesse objeto eu também tenho uma

02:32.390 --> 02:34.640
propriedade dinamicamente designada onde

02:34.640 --> 02:37.400
uso meu propNome, portanto a propriedade para a qual

02:37.400 --> 02:40.190
eu quero adicionar um validador como chave.

02:40.190 --> 02:42.310
Agora o valor aqui é um conjunto de cordas,

02:42.310 --> 02:45.530
e aqui eu acrescentarei o necessário como uma corda.

02:45.530 --> 02:47.920
Agora, claro, este é um validador muito ingênuo.

02:47.920 --> 02:50.000
Se já tivéssemos outros validadores registrados

02:50.000 --> 02:52.830
para esta propriedade, agora eu a sobregravaria aqui.

02:52.830 --> 02:54.900
Portanto, seria melhor primeiro recuperar

02:54.900 --> 02:58.360
quaisquer validadores existentes e depois copiá-los para esta matriz

02:58.360 --> 03:01.320
e apenas adicionar o necessário a essa matriz existente.

03:01.320 --> 03:02.870
Mais uma vez, para economizar algum

03:02.870 --> 03:04.740
tempo aqui, e apenas para mostrar a idéia geral,

03:04.740 --> 03:06.873
eu terei aqui esta abordagem mais ingênua.

03:07.980 --> 03:11.180
Com isso, porém, obtivemos a anotação necessária,

03:11.180 --> 03:14.690
vamos agora trabalhar na anotação do número positivo.

03:14.690 --> 03:16.730
E, é claro, é basicamente a mesma coisa.

03:16.730 --> 03:21.410
Eu copio esse código, mas defino aqui o código como positivo ou qualquer identificador

03:21.410 --> 03:23.600
que você queira usar e, é claro, temos

03:23.600 --> 03:25.010
que ter certeza de aceitar

03:25.010 --> 03:27.650
os argumentos corretos.

03:27.650 --> 03:30.990
Assim, junto com isto que acrescentamos até agora,

03:30.990 --> 03:34.420
registramos estas propriedades e seus validadores

03:34.420 --> 03:38.640
em nossa configuração global quando esta classe é definida.

03:38.640 --> 03:41.460
Agora só precisamos trabalhar na função de validação.

03:41.460 --> 03:43.400
A função de validação deve passar por

03:43.400 --> 03:46.240
todos os validadores registrados, e então basicamente

03:46.240 --> 03:50.340
executar uma lógica diferente baseada em quais validadores ela encontra.

03:50.340 --> 03:54.857
Portanto, antes de tudo, quero recuperar a configuração para o objeto

03:54.857 --> 03:57.600
concreto com o qual estamos lidando.

03:57.600 --> 04:00.390
Para isso, precisamos descobrir em qual função do construtor

04:00.390 --> 04:04.277
o objeto se baseia e então obter a configuração de validação ou os mapeamentos

04:04.277 --> 04:07.040
de validação de propriedade aqui que montamos para

04:07.040 --> 04:09.070
aquele objeto.

04:09.070 --> 04:11.960
Portanto, aqui vou nomear este objeto validador,

04:11.960 --> 04:14.520
ou objValidatorConfig talvez.

04:14.520 --> 04:17.110
E aqui chegamos até os validadores registrados e acessamos um

04:17.110 --> 04:22.110
imóvel que deve ser objeto de objeção. construtor. nome, a mesma lógica de antes, acessamos

04:23.900 --> 04:27.060
a propriedade do construtor que existe no protótipo do objeto

04:27.060 --> 04:28.980
e, portanto, podemos acessá-la diretamente

04:28.980 --> 04:31.720
no objeto graças ao funcionamento do JavaScript e,

04:31.720 --> 04:33.340
graças à cadeia de protótipos,

04:33.340 --> 04:36.710
chegaremos ao protótipo se não conseguirmos encontrar a propriedade

04:36.710 --> 04:41.580
do construtor no próprio objeto, e isso funcionará.

04:41.580 --> 04:43.840
E, portanto, agora temos o nome do construtor

04:43.840 --> 04:46.970
e descobrimos que, por exemplo, este Curso aqui se baseia

04:46.970 --> 04:49.050
nesta classe de Curso.

04:49.050 --> 04:51.290
Portanto, procuramos qualquer configuração de validador

04:51.290 --> 04:52.800
que tenhamos para a classe do Curso.

04:52.800 --> 04:55.910
Portanto, agora estamos olhando para este objeto, basicamente.

04:55.910 --> 04:58.207
Isto está agora na objValidatorConfig.

04:59.310 --> 05:01.540
Agora, é claro que podemos não encontrar isto se

05:01.540 --> 05:03.270
estivermos tentando validar nosso objeto

05:03.270 --> 05:05.110
para o qual nada foi registrado.

05:05.110 --> 05:08.270
Então se não tivermos nenhuma configuração de validador,

05:08.270 --> 05:11.640
se não encontrarmos nada lá, quero voltar a ser verdadeiro, porque

05:11.640 --> 05:14.010
então isto certamente é válido, certo?

05:14.010 --> 05:15.330
Não há nada para validar,

05:15.330 --> 05:18.350
portanto o objeto certamente é válido.

05:18.350 --> 05:20.900
Caso contrário, se o encontrarmos, quero

05:20.900 --> 05:24.910
que ele passe por este objeto interno aqui com um for in loop.

05:24.910 --> 05:27.580
Assim, com isso, eu faço loop através de minhas

05:27.580 --> 05:29.560
propriedades para as quais registrei

05:29.560 --> 05:33.007
validadores, com const prop em objValidatorConfig.

05:34.380 --> 05:36.950
Isto me dá acesso a todos os nomes de propriedade

05:36.950 --> 05:39.630
para os quais poderíamos então ter validadores.

05:39.630 --> 05:41.180
Portanto, é claro que agora eu preciso passar

05:41.180 --> 05:43.970
por todos os validadores que possamos ter para uma propriedade.

05:43.970 --> 05:45.230
Isto deve ser sempre uma matriz,

05:45.230 --> 05:47.680
mesmo que tenhamos apenas um validador adicionado.

05:47.680 --> 05:49.530
Portanto, podemos usar um for

05:49.530 --> 05:53.040
of loop aqui agora e obter o validador concreto, que temos,

05:53.040 --> 05:56.930
para a objValidatorConfig para esta propriedade dada.

05:56.930 --> 06:00.560
Portanto, agora estamos recebendo coisas como positivas ou obrigatórias, que

06:00.560 --> 06:02.963
são armazenadas na constante de validação então.

06:04.080 --> 06:06.110
E então poderíamos ter uma declaração de mudança

06:06.110 --> 06:08.030
aqui, ou, é claro, chamar funções externas com

06:08.030 --> 06:09.810
base em qual validador encontramos.

06:09.810 --> 06:12.130
Mas aqui eu vou com uma declaração de interruptor

06:12.130 --> 06:16.620
embutida, ligar o validador e depois basicamente ter casos diferentes.

06:16.620 --> 06:19.683
Por exemplo, o caso necessário aqui.

06:20.800 --> 06:22.163
Whoops, assim.

06:23.470 --> 06:27.900
Aqui, quero voltar a ser verdadeiro se nossa propriedade, que estamos

06:27.900 --> 06:28.950
olhando...

06:28.950 --> 06:33.260
Portanto, esta propriedade sobre este objeto tem um valor não vazio.

06:33.260 --> 06:38.260
Portanto, voltarei a ser verdadeiro se a obj for verdadeira.

06:39.170 --> 06:42.010
E para converter isto em um valor verdadeiro ou falso,

06:42.010 --> 06:44.420
podemos usar o operador do double bang.

06:44.420 --> 06:46.840
Agora eu ouço tipos de reclamações que não sabe se o objeto

06:46.840 --> 06:49.440
tem esta propriedade, então aqui nós deveríamos realmente

06:49.440 --> 06:51.220
mudar isto para qualquer outro para obter

06:51.220 --> 06:53.560
esta flexibilidade extra aqui.

06:53.560 --> 06:56.150
É claro que você também poderia trabalhar com os tipos aqui.

06:56.150 --> 07:00.480
E, por exemplo, também transforme seus identificadores aqui em tipos claramente

07:00.480 --> 07:03.430
definidos onde os Enums com os quais você trabalha e talvez

07:03.430 --> 07:05.490
também melhore a digitação aqui.

07:05.490 --> 07:07.420
Embora, para ser honesto, como eu quero que isto

07:07.420 --> 07:09.960
funcione com qualquer objeto, é difícil melhorar isto de uma

07:09.960 --> 07:11.810
maneira que o TypeScript vai gostar.

07:11.810 --> 07:13.330
Poderíamos trabalhar com

07:13.330 --> 07:16.800
tipos genéricos, mas então novamente precisaríamos nos restringir

07:16.800 --> 07:19.740
a quais objetos os tipos genéricos deveriam se estender

07:19.740 --> 07:22.110
e aceitar, portanto.

07:22.110 --> 07:25.850
Portanto, qualquer uma pode ser nossa melhor opção aqui para ser realmente

07:25.850 --> 07:27.880
flexível e aceitar muitos objetos diferentes

07:27.880 --> 07:30.640
nesta função de validação.

07:30.640 --> 07:32.270
Agora voltando ao segmento de comutação,

07:32.270 --> 07:34.750
o caso necessário é um caso possível, temos também

07:34.750 --> 07:37.650
o caso positivo que queremos tratar.

07:37.650 --> 07:39.280
E lá quero retornar verdadeiro

07:39.280 --> 07:43.770
se a propriedade que estamos vendo for maior que zero.

07:43.770 --> 07:47.260
Portanto, se o adereço do objeto é maior que zero, então este retorna

07:47.260 --> 07:50.463
verdadeiro, caso contrário, isto retornará falso.

07:52.890 --> 07:55.730
Agora, se não conseguirmos fazer isto por bloco

07:55.730 --> 07:57.970
ou se, de alguma forma, tivermos um loop

07:57.970 --> 07:59.310
que não passe por nada porque

07:59.310 --> 08:01.500
não registramos nenhum validador,

08:01.500 --> 08:04.130
passamos uma matriz vazia aqui ou algo assim,

08:04.130 --> 08:06.350
então, se você fizer isto por loop, eu

08:06.350 --> 08:10.280
retornarei verdadeiro como um padrão também.

08:10.280 --> 08:12.800
E agora devolvemos algo em todas as circunstâncias

08:12.800 --> 08:14.503
e podemos utilizar a validação.

08:15.450 --> 08:19.253
Com isso, vamos ver se funciona, se agora salvarmos isto, e recarregamos nosso

08:23.610 --> 08:26.330
aplicativo aqui e eu tento enviar isto, recebemos um

08:26.330 --> 08:29.400
erro, entrada inválida, por favor tente novamente.

08:29.400 --> 08:30.780
Se eu digitar algum texto

08:30.780 --> 08:34.793
aqui: JavaScript The Complete Guide, eu ainda recebo isto porque

08:35.940 --> 08:38.100
meu número está errado.

08:38.100 --> 08:40.440
Se eu entrar menos um aqui, também teremos isso

08:40.440 --> 08:42.020
porque isso não é positivo.

08:42.020 --> 08:45.020
Se eu inserir um número positivo, no entanto, ele funciona.

08:45.020 --> 08:48.230
Se eu tiver um número positivo mas o primeiro campo estiver vazio,

08:48.230 --> 08:49.860
então isto também funciona, então

08:49.860 --> 08:52.190
isso é algo em que teremos que trabalhar.

08:52.190 --> 08:54.600
Então, vamos descobrir qual é o problema.

08:54.600 --> 08:57.380
E para descobrir que na verdade vou adicionar um pequeno registro

08:57.380 --> 08:59.830
de console aqui e registrar a propriedade que estamos

08:59.830 --> 09:00.720
analisando.

09:00.720 --> 09:02.340
É claro que também poderíamos usar pontos de parada

09:02.340 --> 09:03.513
e ferramentas de desenvolvimento.

09:04.820 --> 09:07.410
Agora se eu clicar em salvar aqui, você vê que a primeira

09:07.410 --> 09:09.250
coisa que é validada aqui é o preço e depois

09:09.250 --> 09:10.623
nós paramos.

09:11.530 --> 09:15.100
Portanto, o preço é o primeiro imóvel que é validado.

09:15.100 --> 09:16.980
E isso é o interessante aqui, o preço

09:16.980 --> 09:20.090
é na verdade apenas propriedade que importa aqui porque

09:20.090 --> 09:22.230
voltamos em validar.

09:22.230 --> 09:25.840
Isso significa que a primeira vez que encontramos algum validador que

09:25.840 --> 09:29.050
retorna verdadeiro ou falso, retornamos imediatamente e não

09:29.050 --> 09:31.480
nos importamos com os outros validadores.

09:31.480 --> 09:33.320
Agora, no caso de falso, tudo bem porque

09:33.320 --> 09:35.360
se um elemento é falso, se uma propriedade

09:35.360 --> 09:37.450
é falsa, é inválida, então estamos bem

09:37.450 --> 09:40.140
nem mesmo olhando para os outros.

09:40.140 --> 09:42.590
Mas para o verdadeiro caso, é um problema.

09:42.590 --> 09:44.970
Se voltarmos a ser verdadeiros na primeira

09:44.970 --> 09:49.410
vez que um imóvel atender às nossas expectativas, temos um problema.

09:49.410 --> 09:51.540
Por isso, devemos melhorar isto, tendo

09:51.540 --> 09:55.130
aqui uma propriedade isValid, o que inicialmente é verdade.

09:55.130 --> 09:56.780
É uma variável válida.

09:56.780 --> 10:01.780
E então aqui estabelecemos isValid igual a isValid e este aqui,

10:03.857 --> 10:08.857
e o mesmo aqui embaixo, estabelecemos este igual a este.

10:09.570 --> 10:11.290
Para que não retornemos imediatamente,

10:11.290 --> 10:14.750
em vez disso, apenas atualizamos isValid e quebramos depois

10:14.750 --> 10:16.700
para não cairmos.

10:16.700 --> 10:19.200
O resultado disso é que no final, depois de

10:19.200 --> 10:22.710
todos esses loops, ou ainda é válido, mas assim que uma dessas

10:22.710 --> 10:25.710
verificações aqui for falsa, graças à forma como o

10:25.710 --> 10:27.530
JavaScript funciona, o valor total

10:27.530 --> 10:29.670
de isValid será falso, porque o verdadeiro

10:29.670 --> 10:33.000
combinado com falso retornará falso.

10:33.000 --> 10:36.020
E então lá embaixo devemos retornar éVálido.

10:36.020 --> 10:39.330
Assim, agora garantimos que todas as propriedades sejam verificadas

10:39.330 --> 10:42.433
e não apenas a primeira que o JavaScript tenha uma olhada.

10:43.320 --> 10:45.460
No entanto, este não será nosso único problema,

10:45.460 --> 10:47.750
também temos aqui um problema quando analisamos

10:47.750 --> 10:50.480
como registramos nossa lógica de validador.

10:50.480 --> 10:53.720
Eu sempre substituo os validadores registrados por

10:53.720 --> 10:57.130
um determinado nome de classe com um novo objeto.

10:57.130 --> 11:00.050
Em vez disso, devemos acrescentar aqui quaisquer validadores existentes

11:00.050 --> 11:01.630
para que não façamos isso.

11:01.630 --> 11:04.140
Por exemplo, temos o operador de spread como esse

11:04.140 --> 11:08.130
para pegar qualquer par de valores chave existente para aquele nome de classe

11:08.130 --> 11:10.870
nos validadores registrados e adicionar isso primeiro

11:10.870 --> 11:14.413
antes de adicionarmos o nosso, também lá embaixo, é claro.

11:16.890 --> 11:18.733
E agora com isso, se salvarmos isto,

11:19.650 --> 11:21.980
e voltarmos à nossa aplicação aqui.

11:21.980 --> 11:24.150
Se eu tenho ambos vazios, falhamos.

11:24.150 --> 11:26.280
Se entrarmos com um preço válido mas tivermos

11:26.280 --> 11:28.490
um título inválido, falhamos.

11:28.490 --> 11:31.510
Se ambos forem válidos, teremos sucesso.

11:31.510 --> 11:35.570
Se tivermos um título válido mas não um preço, falhamos.

11:35.570 --> 11:37.230
Também com um preço negativo.

11:37.230 --> 11:39.170
E, portanto, isto agora me parece bom

11:39.170 --> 11:42.280
e esta é agora nossa primeira implementação ingênua de como

11:42.280 --> 11:44.500
um validador desse tipo poderia funcionar

11:44.500 --> 11:46.670
com a ajuda de decoradores TypeScript.

11:46.670 --> 11:49.150
E tenha em mente que tudo isso aqui, todos os decoradores,

11:49.150 --> 11:52.310
a função de validação e o registro, ficariam escondidos

11:52.310 --> 11:53.590
de você.

11:53.590 --> 11:55.820
Isso poderia fazer parte de uma biblioteca de terceiros

11:55.820 --> 11:56.780
na qual você está trabalhando,

11:56.780 --> 11:59.250
é claro, de uma forma mais elaborada do que provavelmente a que

11:59.250 --> 12:01.300
você compartilha com seus usuários finais.

12:01.300 --> 12:04.160
E você, como usuário final, apenas importaria estas coisas,

12:04.160 --> 12:06.800
adicionaria estes decoradores e chamaria validar,

12:06.800 --> 12:08.840
e teria então uma maneira muito conveniente

12:08.840 --> 12:11.763
de adicionar validação a suas aulas.
