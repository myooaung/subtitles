WEBVTT

1
00:00:02.300 --> 00:00:04.180
<v Instructor>So we get started with names bases,</v>

2
00:00:04.180 --> 00:00:05.960
let's continue on that route,

3
00:00:05.960 --> 00:00:08.460
and let's split it into more files.

4
00:00:08.460 --> 00:00:11.090
For that here, the project state management.

5
00:00:11.090 --> 00:00:13.610
We could put that into a separate file as well.

6
00:00:13.610 --> 00:00:16.050
So I'll grab everything

7
00:00:16.050 --> 00:00:20.600
including this creation of the project state instance here,

8
00:00:20.600 --> 00:00:24.250
cut it from the app.ts file and create a new file,

9
00:00:24.250 --> 00:00:27.060
project-state.ts.

10
00:00:27.060 --> 00:00:29.685
Move that in there and just as before,

11
00:00:29.685 --> 00:00:32.070
put it into a namespace.

12
00:00:32.070 --> 00:00:35.400
Namespace app, name is important, it has to be App

13
00:00:35.400 --> 00:00:38.090
because that's where the rest of our code is in.

14
00:00:38.090 --> 00:00:40.440
Put it all in there and now important,

15
00:00:40.440 --> 00:00:43.560
export what you need outside of this file as well,

16
00:00:43.560 --> 00:00:46.120
which in this case is the projectstate class,

17
00:00:46.120 --> 00:00:48.830
we need that in the rest of our application,

18
00:00:48.830 --> 00:00:51.500
and also this constant down there,

19
00:00:51.500 --> 00:00:53.880
we need to export this as well.

20
00:00:53.880 --> 00:00:57.060
You don't need to export the Listener here,

21
00:00:57.060 --> 00:00:59.430
and also not that state, because both things

22
00:00:59.430 --> 00:01:01.480
are only used in this file and therefore,

23
00:01:01.480 --> 00:01:02.823
don't need to be exported.

24
00:01:03.700 --> 00:01:06.860
Now, we have to import our projectstate.ts file,

25
00:01:06.860 --> 00:01:09.540
so in App.ts, time for another import up there.

26
00:01:09.540 --> 00:01:13.290
Project dash state, just like that.

27
00:01:13.290 --> 00:01:16.620
If we save that, it should compile without errors.

28
00:01:16.620 --> 00:01:19.480
Now, I will continue and the validation part here

29
00:01:19.480 --> 00:01:21.460
could go into a separate file as well,

30
00:01:21.460 --> 00:01:23.960
so I'll grab all of this,

31
00:01:23.960 --> 00:01:26.890
create a new file, validation.ts,

32
00:01:26.890 --> 00:01:30.760
add the namespace App here, put my validation logic in there

33
00:01:30.760 --> 00:01:33.560
and export the validatable interface

34
00:01:33.560 --> 00:01:36.706
and all the devalidate function here, of course.

35
00:01:36.706 --> 00:01:39.566
And then, back in App.ts, you know how it is,

36
00:01:39.566 --> 00:01:41.700
we go back here to the top

37
00:01:41.700 --> 00:01:43.513
and add an import to validation.ts.

38
00:01:45.160 --> 00:01:49.823
Now, the decorator also can be moved into a separate file.

39
00:01:49.823 --> 00:01:54.410
Autobind dash decorator.ts, for example.

40
00:01:54.410 --> 00:01:58.863
Again, add the namespace with the name App to it,

41
00:01:58.863 --> 00:02:01.950
put the function in there and export it, of course,

42
00:02:01.950 --> 00:02:04.820
to make it available outside of this file as well

43
00:02:04.820 --> 00:02:08.430
and then here in app.ts, time for another import

44
00:02:08.430 --> 00:02:12.633
where I import autobind dash decorator.ts.

45
00:02:14.840 --> 00:02:16.484
Now we got more things to export,

46
00:02:16.484 --> 00:02:19.240
we got our component and then all these classes.

47
00:02:19.240 --> 00:02:21.205
I wanna have each class in a separate file

48
00:02:21.205 --> 00:02:25.440
so that each file is relatively small and easy to manage.

49
00:02:25.440 --> 00:02:28.280
Now, we're getting into a new problem here, though.

50
00:02:28.280 --> 00:02:30.385
We add more and more files on the same level

51
00:02:30.385 --> 00:02:33.934
and for now, I'm using the dash thing here

52
00:02:33.934 --> 00:02:37.800
to provide some hint or help on what's in the file,

53
00:02:37.800 --> 00:02:41.260
autobind dash decorator shows us that there's probably

54
00:02:41.260 --> 00:02:42.330
a decorator in there.

55
00:02:42.330 --> 00:02:44.300
Here, we probably have interfaces.

56
00:02:44.300 --> 00:02:46.246
Here, a model and so on.

57
00:02:46.246 --> 00:02:49.070
Now, if you only have three or four files,

58
00:02:49.070 --> 00:02:52.010
that is perfectly fine but if you have more files,

59
00:02:52.010 --> 00:02:55.276
you end up with a very hard to understand

60
00:02:55.276 --> 00:02:57.430
folder structure here.

61
00:02:57.430 --> 00:03:00.056
So what I like to do is I want to create subfolders.

62
00:03:00.056 --> 00:03:02.697
I'll add a decorators subfolder,

63
00:03:02.697 --> 00:03:05.830
move my autobind decorator in there, and re-name it

64
00:03:05.830 --> 00:03:08.290
to just autobind, because it's already in

65
00:03:08.290 --> 00:03:09.260
the decorators folder.

66
00:03:09.260 --> 00:03:11.720
Of course there's a decorator in there.

67
00:03:11.720 --> 00:03:14.440
Then, I'll add my models folder,

68
00:03:14.440 --> 00:03:17.523
and actually, here, I'll move both drag and drop interfaces

69
00:03:17.523 --> 00:03:19.355
and project model in there,

70
00:03:19.355 --> 00:03:21.763
simply because I think the drag and drop interfaces

71
00:03:21.763 --> 00:03:24.187
all in the end are just definitions of how draggable

72
00:03:24.187 --> 00:03:27.263
and droppable classes should look like.

73
00:03:27.263 --> 00:03:29.910
Just as the project model is the definition

74
00:03:29.910 --> 00:03:31.630
of how a project class should look like

75
00:03:31.630 --> 00:03:33.655
or how our project object should look like.

76
00:03:33.655 --> 00:03:38.530
So I'll name this drag and drop and this here just project

77
00:03:38.530 --> 00:03:42.610
and then here I'll add a util folder for utility

78
00:03:42.610 --> 00:03:44.860
and add my validation in there

79
00:03:44.860 --> 00:03:49.690
and then a state folder and add project state to that.

80
00:03:49.690 --> 00:03:52.400
Here I will keep the name project-state

81
00:03:52.400 --> 00:03:55.300
just to avoid confusion with this project.ts file here.

82
00:03:55.300 --> 00:03:56.716
Technically, that would not be a problem

83
00:03:56.716 --> 00:03:59.216
but I want to also make it clear here in this course

84
00:03:59.216 --> 00:04:00.990
so that you have an easier time seeing

85
00:04:00.990 --> 00:04:02.640
in which file I'm working.

86
00:04:02.640 --> 00:04:05.640
You could definitely rename this to just project.ts here

87
00:04:05.640 --> 00:04:07.320
if you wanted to.

88
00:04:07.320 --> 00:04:09.662
Now, with that re-factoring and these sub-folders,

89
00:04:09.662 --> 00:04:12.069
of course our imports here are broken,

90
00:04:12.069 --> 00:04:14.010
so we should fix them.

91
00:04:14.010 --> 00:04:17.366
Drag and drop interfaces is found in the models folder

92
00:04:17.366 --> 00:04:21.216
and now is name just drag-drop.ts.

93
00:04:21.216 --> 00:04:25.630
And the project model also is found in the models folder

94
00:04:25.630 --> 00:04:28.560
and is now just named project.ts.

95
00:04:28.560 --> 00:04:31.100
Project state is found in the state folder,

96
00:04:31.100 --> 00:04:34.040
validation is found in the util folder,

97
00:04:34.040 --> 00:04:36.896
and autobind decorator is found in decorators

98
00:04:36.896 --> 00:04:39.860
and is just named autobind.

99
00:04:39.860 --> 00:04:42.547
With that, if we save that, it compiles without errors

100
00:04:42.547 --> 00:04:44.128
and now we have a more manageable

101
00:04:44.128 --> 00:04:47.290
and readable folder structure, I would argue.

102
00:04:47.290 --> 00:04:50.500
With that, let's continue, we're not done.

103
00:04:50.500 --> 00:04:52.130
We have our component here,

104
00:04:52.130 --> 00:04:54.813
now for that, I'll add a components sub-folder

105
00:04:54.813 --> 00:04:59.813
and in there I want to have my base dash component ts file

106
00:05:00.210 --> 00:05:05.210
and then my project item ts file, my project list ts file

107
00:05:07.600 --> 00:05:12.110
and also the project input ts file.

108
00:05:12.110 --> 00:05:14.430
Of course, you can always organize this differently,

109
00:05:14.430 --> 00:05:17.631
but I think this keeps related files together.

110
00:05:17.631 --> 00:05:22.253
So we can grab this abstract component base class here,

111
00:05:23.830 --> 00:05:27.023
cut it from app ts and move it into base component.

112
00:05:29.610 --> 00:05:33.180
Like this, and of course, also just as before,

113
00:05:33.180 --> 00:05:37.810
add it into a namespace with the name App.

114
00:05:37.810 --> 00:05:41.120
And then move it into this namespace.

115
00:05:41.120 --> 00:05:43.890
Of course, I'll adjust this before we need to export it

116
00:05:43.890 --> 00:05:46.171
so that we can use it in another file.

117
00:05:46.171 --> 00:05:49.800
That other file, however, will not be app.ts

118
00:05:49.800 --> 00:05:53.044
because the files or the classes where I used the component

119
00:05:53.044 --> 00:05:54.910
will also be moved.

120
00:05:54.910 --> 00:05:56.856
The project item class here, for example,

121
00:05:56.856 --> 00:06:00.164
I'll grab that and move it into project item.ts,

122
00:06:00.164 --> 00:06:04.550
to be precise, in there I'll also add a namespace app

123
00:06:04.550 --> 00:06:06.680
and move it into the namespace app in there

124
00:06:06.680 --> 00:06:09.060
and then export this class as well.

125
00:06:09.060 --> 00:06:11.413
Now, important, this relies on component,

126
00:06:12.310 --> 00:06:14.740
and the other, if I now saved this, we would get an error

127
00:06:14.740 --> 00:06:16.497
that component isn't found in the end

128
00:06:16.497 --> 00:06:19.353
so here we again, need to add this import

129
00:06:19.353 --> 00:06:22.027
where we have reference path equals

130
00:06:22.027 --> 00:06:24.772
and then here it's base-component.ts.

131
00:06:24.772 --> 00:06:27.330
This is always a relative import here,

132
00:06:27.330 --> 00:06:29.130
so since this is in the same folder,

133
00:06:29.130 --> 00:06:32.320
we don't have to say components slash here,

134
00:06:32.320 --> 00:06:34.608
because we don't need to go into the components folder first

135
00:06:34.608 --> 00:06:37.300
this file, the project item file,

136
00:06:37.300 --> 00:06:38.729
is already in the components folder

137
00:06:38.729 --> 00:06:40.617
so relative from this file

138
00:06:40.617 --> 00:06:44.913
base component is imported just by using its name here.

139
00:06:46.060 --> 00:06:48.030
So now the project item is here.

140
00:06:48.030 --> 00:06:51.963
Now, of course, in app.ts, we also got the project list.

141
00:06:55.940 --> 00:07:00.662
Let's grab that, move it to the project list ts file here

142
00:07:00.662 --> 00:07:04.940
and there into a namespace App, and then also here

143
00:07:04.940 --> 00:07:07.050
to project input

144
00:07:08.010 --> 00:07:13.010
let's grab this, cut it from here, from the namespace app

145
00:07:13.140 --> 00:07:14.480
in the app.ts file,

146
00:07:14.480 --> 00:07:17.097
and move it into the project input ts file

147
00:07:17.097 --> 00:07:19.857
and there into a app namespace.

148
00:07:20.750 --> 00:07:24.350
Now, important just as before, export this class here,

149
00:07:24.350 --> 00:07:27.550
project item and also project list, of course,

150
00:07:27.550 --> 00:07:30.200
all needs to be exported,

151
00:07:30.200 --> 00:07:31.580
with that we get a bunch of errors

152
00:07:31.580 --> 00:07:34.343
because of course, still there are missing imports.

153
00:07:35.200 --> 00:07:39.930
In app.ts, we should import all these components now,

154
00:07:39.930 --> 00:07:42.934
so here we should import project-input.ts,

155
00:07:42.934 --> 00:07:47.380
project-list.ts, and then save this.

156
00:07:47.380 --> 00:07:50.240
Now, of course, it still crashes because we got more things

157
00:07:50.240 --> 00:07:51.087
that are missing,

158
00:07:51.087 --> 00:07:53.192
in project-input we are using component

159
00:07:53.192 --> 00:07:55.541
just as we are in project list,

160
00:07:55.541 --> 00:07:57.780
so just as we did it in project item,

161
00:07:57.780 --> 00:08:00.091
we need to add that import of base component

162
00:08:00.091 --> 00:08:02.920
in the project input ts file

163
00:08:02.920 --> 00:08:05.790
and also in the project list ts file.

164
00:08:05.790 --> 00:08:08.665
And with that, it compiles without errors

165
00:08:08.665 --> 00:08:10.880
and let's see if it also works,

166
00:08:10.880 --> 00:08:15.118
if we reload here and I add this,

167
00:08:15.118 --> 00:08:16.540
is draggable and droppable,

168
00:08:16.540 --> 00:08:19.480
and that all seems to work just as it should,

169
00:08:19.480 --> 00:08:22.340
and now we split this across multiple files.

170
00:08:22.340 --> 00:08:23.978
We still get one file in the end,

171
00:08:23.978 --> 00:08:26.010
but when we work on our code,

172
00:08:26.010 --> 00:08:28.110
it's now much more manageable.

173
00:08:28.110 --> 00:08:30.978
Because we have smaller focused files

174
00:08:30.978 --> 00:08:33.829
where we can quickly find what we're looking for

175
00:08:33.829 --> 00:08:36.358
and where we don't have to scroll through a huge file

176
00:08:36.358 --> 00:08:39.363
to find the place we wanna work on next.

