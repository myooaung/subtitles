WEBVTT

00:02.170 --> 00:03.830
Pozostańmy przy funkcjach.

00:03.830 --> 00:07.120
Inną miłą cechą, która jest dostępna w nowoczesnym JavaScript,

00:07.120 --> 00:09.450
jest możliwość przypisania domyślnych argumentów

00:09.450 --> 00:11.033
do parametrów funkcji.

00:11.880 --> 00:13.830
Powiedzmy tutaj w naszej funkcji

00:13.830 --> 00:17.720
add, z jakiegoś powodu chcieliśmy mieć domyślną wartość dla b.

00:17.720 --> 00:20.180
Wiemy więc, że chcemy umieć dodać do siebie dwie liczby.

00:20.180 --> 00:23.850
Ale w przypadku, gdy wywołasz tę funkcję z tylko jedną

00:23.850 --> 00:28.130
liczbą, przyjmiemy domyślny dla drugiego argumentu lub dla

00:28.130 --> 00:29.990
drugiego parametru.

00:29.990 --> 00:32.120
Możemy to zrobić, dodając znak równości tutaj na liście

00:32.120 --> 00:34.980
parametrów, a następnie ustawiając naszą domyślną wartość.

00:34.980 --> 00:36.920
Co oczywiście musi odpowiadać naszemu typowi.

00:36.920 --> 00:40.020
Na przykład jeden lub cokolwiek, co powinno być domyślne.

00:40.020 --> 00:42.770
I teraz to umożliwia nam wywołanie tej funkcji z tylko

00:42.770 --> 00:44.080
jednym argumentem.

00:44.080 --> 00:46.700
Więc mógłbym go wywołać w ten sposób i TypeScript nie

00:46.700 --> 00:48.830
narzekałby, ponieważ wykrywa, że mamy tutaj

00:48.830 --> 00:50.200
domyślny argument, który jest

00:50.200 --> 00:51.860
następnie brany za b.

00:51.860 --> 00:53.910
I dlatego tutaj otrzymuję wyjście

00:53.910 --> 00:58.910
sześć, ponieważ moje domyślne b to jeden i dodaję pięć, co daje sześć Teraz jedna

00:59.130 --> 01:03.113
ważna uwaga na temat domyślnych argumentów tutaj.

01:04.010 --> 01:07.090
Muszą być ostatnie na liście.

01:07.090 --> 01:10.710
Jeśli np. przypiszemy domyślny argument do a, to będziemy

01:10.710 --> 01:12.640
mieli problem, dlaczego?

01:12.640 --> 01:15.290
Ponieważ domyślne argumenty nie są pomijane podczas

01:15.290 --> 01:16.840
wywoływania funkcji.

01:16.840 --> 01:19.490
Więc jeśli wywołam tutaj funkcję z jednym argumentem,

01:19.490 --> 01:21.990
to argumenty, które przekazuję tutaj, są przekazywane

01:21.990 --> 01:25.060
do parametrów w tej samej kolejności.

01:25.060 --> 01:27.240
Więc wywołanie funkcji z jednym argumentem, pięcioma

01:27.240 --> 01:29.900
w tym przypadku, przekazuje ten jeden argument do pierwszego

01:29.900 --> 01:32.400
argumentu tutaj na liście parametrów.

01:32.400 --> 01:34.150
A ponieważ drugi argument nie

01:34.150 --> 01:37.660
jest dostarczany z domyślnym, nie jest opcjonalny.

01:37.660 --> 01:40.920
I stąd nie podajemy w ogóle drugiego argumentu.

01:40.920 --> 01:43.730
Więc TypeScript, lub JavaScript właściwie,

01:43.730 --> 01:46.800
nie patrzy na twoją definicję funkcji i zgaduje,

01:46.800 --> 01:50.650
że prawdopodobnie chcesz pominąć domyślny argument i przekazać

01:50.650 --> 01:53.290
swoją wartość do nie-domyślnego.

01:53.290 --> 01:55.740
Zamiast tego po prostu przestrzega porządku.

01:55.740 --> 01:59.720
I dlatego powinieneś ustawić domyślne wartości z prawej strony.

01:59.720 --> 02:01.830
Upewnij się więc, że parametry, dla których

02:01.830 --> 02:04.010
nie akceptujesz domyślnych argumentów,

02:04.010 --> 02:07.523
pojawiają się najpierw przed twoimi domyślnymi parametrami.
