WEBVTT

00:02.160 --> 00:03.740
講師：では､ コードを複数のファイルに分割する場合､

00:03.740 --> 00:06.440
どのような選択肢があるのでしょうか｡

00:06.440 --> 00:10.720
さて､ 実はこれには3つのオプションがあります｡ 

00:10.720 --> 00:12.680
最初の選択肢は､ 単純に複数のコードファイル､

00:12.680 --> 00:16.110
複数のTypeScriptファイルを書くことでしょう｡

00:16.110 --> 00:20.710
その後､ TypeScriptはソースディレクトリ内のすべてのコードファイルを自動的にコンパイルし､

00:20.710 --> 00:25.000
コンパイルされたJavaスクリプトファイルを手動でHTMLに取り込みます｡

00:25.000 --> 00:28.970
しかし､ これらのインポートをすべて手動で管理する必要があり､

00:28.970 --> 00:34.600
面倒でエラーが起こりやすい｡ また､ ある種のTypeScriptの機能を使用する場合､

00:34.600 --> 00:36.980
ファイルAで定義された型をファイルBで使用すると､

00:36.980 --> 00:46.030
TypeScriptがこの接続について知らない場合､ 型のサポートをあきらめることにもなる｡

00:46.030 --> 00:49.290
そのため､ 大きなプロジェクトにはあまり向いていません｡

00:49.290 --> 00:52.500
その代わり､ 大きなプロジェクトでは､ 主に2つの選択肢があります｡ 

00:52.500 --> 00:55.470
例えば､ 名前空間やファイルのバンドルなどがあります｡ 

00:55.470 --> 00:59.410
名前空間はTypeScriptの機能であり､ 構文の機能である｡

00:59.410 --> 01:12.730
この機能を使うためにコードに特別なコードを追加することができ､ 基本的に名前空間の下でコードをまとめ､ 他のファイルに名前空間をインポートできる｡

01:12.730 --> 01:16.020
ですから､ 例えばファイルごとに名前空間を持つことができます｡ 

01:16.020 --> 01:18.790
別のファイルを別のファイルにインポートして､

01:18.790 --> 01:28.030
インポートしたファイルから別のファイルに存在する名前空間を利用します｡

01:28.030 --> 01:30.020
TypeScriptはそれをサポートするだけでなく､

01:30.020 --> 01:39.560
ファイルを1つにまとめてくれます｡ 最終的には複数のファイルにコードを書いてコンパイルし､ それらを互いにインポートすることで､

01:39.560 --> 01:50.030
管理するインポート数を減らし､ HTMLファイル内の異なるインポートを手動で管理する必要がありません｡

01:50.030 --> 02:00.750
なぜなら､ この問題はTypeScriptのプロジェクトだけでなく､

02:01.870 --> 02:15.850
大規模なJavaスクリプトのプロジェクトでも発生するからだ｡

02:15.850 --> 02:18.200
最近のJavaスクリプトは､

02:18.200 --> 02:24.910
インポートとエクスポートのステートメントをサポートしており､

02:24.910 --> 02:33.770
どのファイルが他のどのファイルに依存しているかを記述することができます｡

02:33.770 --> 02:36.020
それを理解して､ 別のファイルが依存するファイルを自動的にダウンロードし､

02:36.020 --> 02:38.800
実行するのです｡

02:38.800 --> 02:43.470
そのためにimport/export構文を使うのですが､ TypeScriptもこれをサポートしています｡

02:43.470 --> 02:46.870
そのため､ TypeScriptでも問題なく使用することができます｡ 

02:46.870 --> 02:48.700
ファイルごとにコンパイルしますが､

02:48.700 --> 02:50.810
スクリプトのインポートは1つで十分です｡

02:50.810 --> 03:00.710
先ほど述べたように､ モダンブラウザは他のすべての依存関係を取得する方法を知っているからです｡

03:00.710 --> 03:02.320
この場合､

03:02.320 --> 03:09.140
技術的には複数のファイルが存在することになります｡

03:09.140 --> 03:39.500
スクリプトのインポートを手動で管理する必要はありませんが､ 依存するすべてのファイルを別々にダウンロードする必要があるため､ HTTPリクエストなどが増えるというデメリットがあります｡

03:39.500 --> 03:41.100
そこで､ とりあえずこの2つのアプローチを基本形として､

03:41.100 --> 03:48.853
コードを複数のファイルに分割することでどのように改善できるかを見てみましょう｡
