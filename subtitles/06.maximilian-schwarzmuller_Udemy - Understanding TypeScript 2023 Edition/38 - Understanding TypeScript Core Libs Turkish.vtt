WEBVTT

00:02.190 --> 00:03.570
-: Burada da modülümüz var.

00:03.570 --> 00:06.050
Şimdi, modül şimdilik atlayacağım bir seçenek,

00:06.050 --> 00:07.540
çünkü TypeScript'teki modülleri

00:07.540 --> 00:10.830
ve birden fazla dosyayı nasıl bağlayabileceğimizi öğrendikten

00:10.830 --> 00:13.400
sonra gerçekten anlamlı hale geliyor.

00:13.400 --> 00:15.350
O yüzden şimdilik bunu görmezden gelelim.

00:15.350 --> 00:17.250
Yine de Lib ilginç biri.

00:17.250 --> 00:20.890
Lib, TypeScript'in hangi varsayılan nesneleri ve

00:20.890 --> 00:25.650
özellikleri bildiğini belirtmenizi sağlayan bir seçenektir.

00:25.650 --> 00:28.580
Bununla dom ile çalışmak gibi şeyleri kastediyorum.

00:28.580 --> 00:31.930
Endeks diyelim. html bir butonumuz var ve bu butonun

00:31.930 --> 00:33.700
üzerinde "Beni tıklayın. Şimdi, bu düğmeye tıkladığımızda sadece

00:33.700 --> 00:35.100
mesajı yazdırmak istiyoruz.

00:35.100 --> 00:36.610
Şimdi, uygulamada. bu düğmeyi seçebiliriz.

00:36.610 --> 00:39.820
Bu düğmeye belge ile

00:39.820 --> 00:41.420
erişebiliriz. querySelector.

00:43.808 --> 00:44.641
Örneğin, bulduğumuz ilk düğmeyi seçiyoruz.

00:44.641 --> 00:48.130
Şimdi eğer bunu yaparsak bu işe yarar.

00:48.130 --> 00:51.580
Burada hiçbir hata türü almayız.

00:51.580 --> 00:53.000
Dolayısıyla, düğmeme gider

00:53.000 --> 00:58.000
ve buraya bir EventListener eklersem, burada bir hata alırım çünkü TypeScript burada bir düğme

00:58.390 --> 01:00.990
bulup bulmadığımızdan emin değildir.

01:00.990 --> 01:04.010
Şimdilik bu satırdan sonra bir ünlem işareti koyarak

01:04.010 --> 01:07.310
bu sorunu çözebiliriz ve ileride bunun tam olarak ne işe yaradığına

01:07.310 --> 01:08.860
geri döneceğim.

01:08.860 --> 01:11.320
Temel olarak TypeScript'e "Merak etme,

01:11.320 --> 01:13.667
böyle bir düğme var olacak" der.

01:13.667 --> 01:15.097
"Burada bir değer elde edeceğiz. Şimdi buraya bir tıklama olayı ekleyebiliriz.

01:15.097 --> 01:17.360
Ve sonra belki bir konsolun olduğu yerde

01:17.360 --> 01:19.470
anonim bir fonksiyon bulun. log tıklandı.

01:19.470 --> 01:21.670
Şimdi, burada ilginç olan şey ünlem işaretini

01:21.670 --> 01:24.920
eklemek zorunda kalmam değil, dediğim

01:24.920 --> 01:26.450
gibi buna geri döneceğim, ancak

01:26.450 --> 01:29.310
tsc'yi çalıştırırsam bu sadece derleniyor.

01:29.310 --> 01:31.150
Şimdi, TypeScript'in burada

01:31.150 --> 01:34.840
belgenin bilinmediğinden şikayet etmesi gerekmez mi?

01:34.840 --> 01:38.370
Böyle bir belge, sabit veya değişkenin mevcut olduğunu

01:38.370 --> 01:39.690
nereden biliyor?

01:39.690 --> 01:43.290
Elimizde mevcut olsa bile, querySelector

01:43.290 --> 01:45.610
yöntemimize sahip bir nesneyi

01:45.610 --> 01:48.350
tuttuğunu nasıl biliyor?

01:48.350 --> 01:50.010
Düğmenin addEventListener yöntemine

01:50.010 --> 01:51.690
sahip bir şey olduğunu nasıl biliyor?

01:51.690 --> 01:55.932
TypeScript tüm bunları nasıl biliyor?

01:55.932 --> 01:57.120
Şimdi diyebilirsiniz ki, "Elbette biliyor. Çünkü Vanilla JavaScript'te

01:57.120 --> 01:59.290
bu geçerli bir kod olacaktır, ancak TypeScript

01:59.290 --> 02:01.430
kodu yazarken bunu tarayıcı için yazmadığınızı

02:01.430 --> 02:03.290
unutmayın.

02:03.290 --> 02:05.580
Node'unuzu yazıyor olabilirsiniz. TypeScript ile js uygulaması

02:05.580 --> 02:08.080
ve orada gerçekten bunların

02:08.080 --> 02:11.310
hepsi çalışmazdı.

02:11.310 --> 02:13.200
Bunun işe yaramasının nedeni

02:13.200 --> 02:14.630
bu lib seçeneğidir ve gördüğünüz gibi

02:14.630 --> 02:18.280
burada ayarlanmamıştır bile, ancak ayarlanmazsa bazı varsayılanlar varsayılır.

02:18.280 --> 02:21.940
Eğer ayarlanmamışsa varsayılanlar buradaki

02:21.940 --> 02:24.420
JavaScript hedefinize bağlıdır

02:24.420 --> 02:28.180
ve es6 için varsayılan olarak es6'da global olarak

02:28.180 --> 02:31.536
mevcut olan tüm özellikleri içerir.

02:31.536 --> 02:33.270
Örneğin, es6'da mevcut olan Map nesnesi.

02:33.270 --> 02:35.940
Bu nedenle Map kullanırsanız şikayet etmez.

02:35.940 --> 02:40.120
Bu nedenle, JavaScript'te global olarak kullanıma

02:40.120 --> 02:45.120
sunulan tüm es6 özelliklerinin TypeScript'te de mevcut

02:46.400 --> 02:48.700
olduğunu varsayar.

02:50.677 --> 02:51.780
Ayrıca tüm DOM API'lerinin

02:51.780 --> 02:54.530
kullanılabilir olduğunu varsayar.

02:54.530 --> 02:57.070
Bu arada, tüm bu seçeneklerle ilgili ayrıntılı açıklamaları,

02:57.070 --> 03:01.740
bu modülün sonundaki derste bağlantısı verilen resmi kutuda bulacaksınız.

03:01.740 --> 03:04.550
Uzun lafın kısası, lib seçeneği ayarlanmazsa bazı

03:04.550 --> 03:07.300
varsayılanlar kabul edilir ve bunlar genellikle

03:07.300 --> 03:09.490
TypeScript'in tarayıcıda çalışması için

03:09.490 --> 03:11.520
gereken varsayılanlardır.

03:11.520 --> 03:13.760
Yani, tüm DOM API'leri gitti.

03:13.760 --> 03:16.030
Bunu yorumlarsak ve şimdi

03:16.030 --> 03:19.014
her şeyi derlersem kesinlikle bir

03:19.014 --> 03:20.670
hata alırım, çünkü

03:20.670 --> 03:24.780
artık varsayılan ayarlara sahip değiliz.

03:24.780 --> 03:26.010
Bunun yerine, "Hey, lütfen bazı varsayılan

03:26.010 --> 03:28.050
kütüphaneleri," diyebileceğiniz bazı varsayılan tip tanımlarını

03:28.050 --> 03:30.370
ekleyin, bunları size bu dizide vereceğim" diyoruz.

03:30.370 --> 03:32.437
Ve gördüğünüz gibi, burada herhangi

03:32.437 --> 03:36.330
bir açıklama, herhangi bir yol, herhangi bir değer geçmiyorum.

03:36.330 --> 03:39.470
Bu nedenle, TypeScript'e şu anda söylediğim şey, "Hey,

03:39.470 --> 03:43.213
tüm varsayılanlarla ilgili olarak, bilirsiniz, "lütfen bunu dikkate

03:44.162 --> 03:45.050
alın. Ve, bilirsin, hiçbir şey.

03:45.050 --> 03:46.920
Yani, yalnızca bu yorumlanırsa çalışır,

03:46.920 --> 03:50.037
çünkü o zaman TypeScript bazı varsayılanları varsayacaktır.

03:50.037 --> 03:51.770
Varsayılanı açıkça ayarlarsam,

03:51.770 --> 03:53.580
TypeScript elbette burada ayarladığım

03:53.580 --> 03:55.300
şeye bağlı kalır.

03:55.300 --> 03:57.410
Ve örneğin burada, belgeyi bilmiyor,

03:57.410 --> 03:59.740
buradaki konsolu bile bilmiyor.

03:59.740 --> 04:01.600
Bu nedenle, bu iki makul değeri ayarlamak

04:01.600 --> 04:02.680
istiyoruz ve yine kontrol

04:02.680 --> 04:05.410
boşluğuna basarsanız, burada otomatik tamamlama

04:05.410 --> 04:07.343
elde edersiniz.

04:08.900 --> 04:10.930
Örneğin, oraya dom ekleyebiliriz.

04:10.930 --> 04:12.360
Bu bir tanımlayıcıdır ve TypeScript'in anladığı

04:12.360 --> 04:13.800
bazı önceden tanımlanmış tanımlayıcılar vardır,

04:13.800 --> 04:15.800
yine resmi dokümanlarda tam bir liste bulabilirsiniz.

04:15.800 --> 04:18.280
Bu seçeneğe ilişkin dokümanlar

04:18.280 --> 04:21.070
da bu derse eklenmiştir.

04:21.070 --> 04:22.840
Bu, TypeScript'in anladığı bir tanımlayıcıdır

04:22.840 --> 04:26.070
ve temel olarak TypeScript'teki tüm DOM API'lerinin kilidini açan

04:26.070 --> 04:27.750
bir tanımlayıcıdır, böylece TypeScript

04:27.750 --> 04:30.100
burada ne yaptığınızı anlar.

04:30.100 --> 04:32.680
Yani şimdi, zaten konsolu bildiğini, belgeyi

04:32.680 --> 04:35.150
bildiğini vb. görüyorsunuz.

04:35.150 --> 04:37.040
Şimdi Yeni Nesil JavaScript ile

04:37.040 --> 04:40.100
çalıştığımız için es6 seçeneğini de eklemeliyiz,

04:40.100 --> 04:42.550
böylece TypeScript küresel olarak mevcut

04:42.550 --> 04:45.400
tüm es6 seçeneklerini de anlayacaktır.

04:45.400 --> 04:47.896
Ayrıca dom eklemek de iyi bir fikirdir. iterable ve

04:47.896 --> 04:50.830
scripthost.

04:50.830 --> 04:54.130
Bununla birlikte, çalışmak isteyeceğiniz tüm temel JavaScript özelliklerinin

04:54.130 --> 04:56.540
kilidini açacağız ve bu arada, hedefi es6 olarak ayarladığınızda

04:56.540 --> 05:00.620
elde edeceğiniz varsayılan kurulum tam olarak

05:00.620 --> 05:02.530
budur.

05:02.530 --> 05:05.250
Bu nedenle, bunu yorumlayıp bu şekilde ayarlarsanız,

05:05.250 --> 05:07.360
lib'i hiç belirtmediğinizle tamamen

05:07.360 --> 05:09.980
aynı davranışa sahip olursunuz.

05:09.980 --> 05:13.550
Şimdi, burada bunu yorumlayacağım ve bununla

05:13.550 --> 05:15.860
birlikte bu derlenecek.

05:15.860 --> 05:17.959
Yine, bunu ayarlamak biraz gereksiz olsa

05:17.959 --> 05:20.920
da, sadece ne işe yaradığını açıklamak istiyorum.
