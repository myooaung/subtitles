WEBVTT

00:02.251 --> 00:03.380
Istruttore: Un'altra

00:03.380 --> 00:05.350
bella caratteristica riguarda le

00:05.350 --> 00:08.000
proprietà e i metodi, che esiste anche in JavaScript

00:08.000 --> 00:10.010
quando si usa ES6 o successivo, ma tutti

00:10.010 --> 00:11.180
i dattiloscritti sono

00:11.180 --> 00:14.010
proprietà e metodi statici.

00:14.010 --> 00:17.520
Le proprietà e i metodi statici consentono di aggiungere alle

00:17.520 --> 00:20.620
classi proprietà e metodi a cui non si accede su un'istanza

00:20.620 --> 00:22.530
della classe, per cui non è necessario

00:22.530 --> 00:26.080
chiamare prima il nome di una nuova classe, ma a cui si accede

00:26.080 --> 00:28.950
direttamente sulla classe.

00:28.950 --> 00:31.350
Questo è spesso usato per le funzioni

00:31.350 --> 00:35.922
di utilità che si vogliono raggruppare o mappare in una classe in modo logico,

00:35.922 --> 00:40.860
o per le costanti globali che si vogliono memorizzare in una classe.

00:40.860 --> 00:43.270
Un esempio incorporato in JavaScript,

00:43.270 --> 00:46.050
che non è definito da typescript e non è definito

00:46.050 --> 00:48.290
da voi, ma fa parte di JavaScript nel

00:48.290 --> 00:51.170
browser, è la funzione del costruttore Math,

00:51.170 --> 00:53.220
o classe se volete chiamarla così,

00:53.220 --> 00:55.500
che è globalmente disponibile in JavaScript,

00:55.500 --> 01:01.400
dove potete accedere a pi greco come valore costante per ottenere il numero pi greco, o a funzioni,

01:01.400 --> 01:05.050
o metodi per essere precisi, come pow per calcolare la potenza

01:05.050 --> 01:08.610
di qualcosa.

01:08.610 --> 01:10.530
Si tratta di metodi e proprietà a cui

01:10.530 --> 01:13.370
non è possibile accedere all'istanza di Math.

01:13.370 --> 01:16.310
Non è necessario chiamare prima la nuova matematica.

01:16.310 --> 01:19.830
In effetti non funziona, ma si accede a queste proprietà con metodi

01:19.830 --> 01:22.360
direttamente sulla classe stessa.

01:22.360 --> 01:25.340
Quindi Math agisce più come uno spazio dei nomi come meccanismo

01:25.340 --> 01:27.370
di raggruppamento e questo è un caso d'uso

01:27.370 --> 01:28.640
comune per i metodi e le proprietà

01:28.640 --> 01:30.480
statiche, che si possono aggiungere

01:30.480 --> 01:33.650
anche alle proprie classi.

01:33.650 --> 01:36.770
Diciamo che in Dipartimento vogliamo avere un metodo

01:36.770 --> 01:40.050
che ci aiuti a creare i dipendenti e questo è qualcosa a

01:40.050 --> 01:43.450
cui potremmo voler accedere senza istanziare il Dipartimento,

01:43.450 --> 01:45.390
perché di solito istanziamo le nostre

01:45.390 --> 01:46.890
versioni più specializzate,

01:46.890 --> 01:51.290
il dipartimento IT e il dipartimento di contabilità e non vogliamo istanziare

01:51.290 --> 01:58.490
il Dipartimento solo per richiamare un metodo di utilità e quindi possiamo aggiungere un metodo qui, create Employee,

01:58.490 --> 02:03.490
diciamo, dove vogliamo ottenere il nome, che è una stringa come parametro e vogliamo

02:03.680 --> 02:07.621
restituire qualcosa.

02:07.621 --> 02:10.230
Ora, per renderlo un metodo statico, a cui possiamo

02:10.230 --> 02:12.920
accedere senza istanziare questa classe, aggiungiamo

02:12.920 --> 02:16.250
la parola chiave static davanti a questo metodo e poi qui

02:16.250 --> 02:18.549
forse restituiamo un oggetto in cui abbiamo

02:18.549 --> 02:23.549
la proprietà name mappata su questo valore name.

02:25.170 --> 02:27.010
Naturalmente si tratta di un metodo molto

02:27.010 --> 02:28.690
semplice, ma l'idea è chiara.

02:28.690 --> 02:31.960
Ora, per utilizzarlo, possiamo andare laggiù dove eseguiamo

02:31.960 --> 02:33.490
il nostro codice e diciamo

02:33.490 --> 02:36.940
che vogliamo un nuovo dipendente, employee1.

02:39.300 --> 02:41.020
Beh, allora possiamo chiudere

02:41.020 --> 02:46.020
la faccenda con il Dipartimento. createEmployee e inserire Max, ad esempio,

02:46.920 --> 02:50.680
e se poi console. log(employee1) si dovrebbe

02:50.680 --> 02:53.170
vedere un oggetto con il nome di Max.

02:53.170 --> 02:55.630
Quindi, se lo salvo, ecco il

02:55.630 --> 02:58.240
dipendente appena creato.

02:58.240 --> 03:01.200
Questo sarebbe un tipico esempio di metodo statico.

03:01.200 --> 03:04.870
Lo chiamiamo direttamente sulla classe, senza la parola chiave new,

03:04.870 --> 03:06.360
e quindi usiamo la classe come

03:06.360 --> 03:09.030
un meccanismo di raggruppamento, per così dire,

03:09.030 --> 03:11.630
e se volessimo aggiungere una proprietà statica,

03:11.630 --> 03:13.470
potremmo farlo anche noi.

03:13.470 --> 03:17.950
Se si ha qualcosa come l'anno fiscale che si vuole usare nella propria

03:19.730 --> 03:22.040
azienda, si può impostare questo valore

03:22.040 --> 03:24.980
a, diciamo, 2020 e poi, per renderlo disponibile

03:24.980 --> 03:27.310
senza istanziare questo campo, si

03:27.310 --> 03:28.560
può aggiungere static

03:28.560 --> 03:30.810
davanti a questa proprietà o a questo

03:30.810 --> 03:33.950
campo e accedervi.

03:33.950 --> 03:36.560
Quindi ora giù la console. log. (dipendente creato da me).

03:38.050 --> 03:42.420
Qui si può accedere anche al Dipartimento. fiscale. senza istanziarlo

03:43.900 --> 03:47.150
e se lo salviamo, non sorprende che

03:47.150 --> 03:51.130
qui venga registrato il 2020.

03:51.130 --> 03:53.347
Si tratta quindi di metodi e proprietà statiche.

03:53.347 --> 03:55.250
Una parola importante su di loro,

03:55.250 --> 03:56.947
o una cosa da tenere a mente.

03:56.947 --> 03:59.067
Quando li si aggiunge a una classe,

03:59.067 --> 04:03.370
non è possibile accedervi dall'interno delle parti non statiche.

04:03.370 --> 04:04.870
Quindi, se si vuole accedere

04:04.870 --> 04:08.150
all'anno fiscale qui nel costruttore e si vuole usare

04:08.150 --> 04:10.375
la console. registrarlo qui,

04:10.375 --> 04:13.490
questo, come si può vedere non funzionerà.

04:13.490 --> 04:15.600
Ricevo un errore che indica che

04:15.600 --> 04:18.690
la proprietà fiscalYear è un membro statico.

04:18.690 --> 04:20.976
Non possiamo accedervi perché il costruttore

04:20.976 --> 04:24.290
e tutto ciò che c'è dentro, anche tutti i metodi, che non sono

04:24.290 --> 04:26.530
contrassegnati da static, e non è possibile

04:26.530 --> 04:29.427
contrassegnare il costruttore come statico, tra l'altro,

04:29.427 --> 04:32.430
non saranno in grado di accedere alle proprietà statiche,

04:32.430 --> 04:34.770
perché queste si riferiscono all'istanza

04:34.770 --> 04:37.660
creata in base alla classe, mentre la proprietà statica

04:37.660 --> 04:41.450
non è disponibile sull'istanza, perché l'idea alla base delle proprietà

04:41.450 --> 04:44.150
statiche e dei metodi statici è che sono staccati

04:44.150 --> 04:47.780
dalle istanze.

04:47.780 --> 04:50.930
Quindi non è possibile accedervi con la parola chiave this.

04:50.930 --> 04:53.940
Se si desidera utilizzare la proprietà o il metodo statico

04:53.940 --> 04:56.080
dall'interno della classe, si dovrà

04:56.080 --> 04:59.380
utilizzare il nome della classe per accedervi.

04:59.380 --> 05:01.337
Ciò consente di accedere alle proprietà

05:01.337 --> 05:04.290
e ai metodi statici dall'interno della classe.

05:04.290 --> 05:06.593
Questa è una cosa importante da tenere a mente.
