WEBVTT

00:02.190 --> 00:05.030
講師：そこで､ 異なるファイルを1つのバンドルにまとめることができる､

00:05.030 --> 00:09.690
非常に重要なツールであるwebpackを追加しました｡

00:09.690 --> 00:12.090
これは､ HTTPリクエストの量を減らし､

00:12.090 --> 00:16.500
アプリケーションを高速化するのに非常に有効です｡

00:16.500 --> 00:22.270
もしあなたが､ 大きなプロジェクトで通常行うような､ たくさんの個別のファイルを扱うことになった場合､

00:22.270 --> 00:24.360
webpackのようなツールは必ず使うべきもので､

00:24.360 --> 00:28.200
webpackはそれを助けてくれる最も重要で目立つツールなので､

00:28.200 --> 00:31.190
ここで紹介したいと思います｡

00:31.190 --> 00:33.730
webpackが高度に設定可能であることはお分かりいただけたと思いますが､

00:33.730 --> 00:39.630
何度も述べたように､ webpackの公式ドキュメントはそのすべてを学ぶために行くべき場所です｡

00:39.630 --> 00:42.120
ローダーの違い､ 設定できるエラー設定の違い､

00:42.120 --> 00:44.770
仕組みについて､ 全般的に｡

00:44.770 --> 00:47.109
ですから､ もしあなたがwebpackのマスターになりたいと思っていて､

00:47.109 --> 00:52.720
より精巧な設定をしたいのであれば､ 間違いなくこのドキュメントに飛び込んでください｡

00:52.720 --> 00:55.610
しかし､ 今回の基本設定では､ TypeScriptファイルをwebpackでコンパイルし､

00:55.610 --> 01:03.820
すべての出力を1つのバンドルにまとめることがすでに可能になっています｡

01:03.820 --> 01:03.820
jsファイルです｡ 

01:03.820 --> 01:11.510
そして､ デバッグを容易にし､ より親切なエラーメッセージを表示する開発用のコンフィギュレーションも設定しました｡

01:11.510 --> 01:13.250
そして､ 本番環境では､ 高度に最適化されたコードが得られ､

01:13.250 --> 01:21.160
それをサーバーにデプロイすることで､ サーバーにできるだけ少ないコードで出荷できるようになります｡

01:21.160 --> 01:22.210
そして､ それだけです｡ 

01:22.210 --> 01:25.740
webpackは本当にコアなツールで､ これを使えること､

01:25.740 --> 01:26.573
そして本当にただ動くだけの設定を持つことは､

01:26.573 --> 01:30.260
非常に重要です｡

01:30.260 --> 01:38.763
このモジュールでは､ TypeScriptプロジェクトでこれをどのように使い始めることができるかを学びます｡
