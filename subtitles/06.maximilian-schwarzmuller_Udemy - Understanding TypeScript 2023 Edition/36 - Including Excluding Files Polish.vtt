WEBVTT

00:02.200 --> 00:03.840
Instruktor: Tak oto teraz możemy zarządzać

00:03.840 --> 00:06.290
wieloma plikami za pomocą TypeScript.

00:06.290 --> 00:08.870
Teraz jedno słowo o posiadaniu wielu plików, kiedy

00:08.870 --> 00:11.500
pracujesz z wieloma plikami, tak jak to robimy tutaj,

00:11.500 --> 00:15.280
możesz również importować je do siebie za pomocą modułów, które możesz znać

00:15.280 --> 00:18.180
z waniliowego JavaScriptu, tam również mamy moduły, jest

00:18.180 --> 00:20.770
to coś, co omówię w dedykowanej sekcji tego kursu chociaż,

00:20.770 --> 00:23.830
więc na razie mamy po prostu dwa pliki, które nie są importowane

00:23.830 --> 00:25.560
do siebie, ale które są zamiast tego

00:25.560 --> 00:31.040
importowane do indeksu.

00:31.040 --> 00:31.040
html.

00:31.040 --> 00:32.990
Teraz, gdy już to zrobiliśmy,

00:32.990 --> 00:35.930
wiemy, że możemy zarządzać tym jako projektem

00:35.930 --> 00:39.060
i że możemy skompilować wiele plików.

00:39.060 --> 00:41.910
Teraz spójrzmy na tsconfig. json, ponieważ jest

00:41.910 --> 00:45.660
to kluczowy plik do zarządzania tym projektem,

00:45.660 --> 00:48.100
zasadniczo mówi TypeScriptowi,

00:48.100 --> 00:51.290
jak powinien skompilować te pliki.

00:51.290 --> 00:55.260
Teraz, zanim zanurkujemy w compilerOptions, gdzie, jak sama

00:55.260 --> 00:56.470
nazwa wskazuje, możemy

00:56.470 --> 00:59.620
skonfigurować jak zachowuje się kompilator, przewińmy

00:59.620 --> 01:02.220
w dół do miejsca przed zamykającym nawiasem

01:02.220 --> 01:03.760
klamrowym, ale po tym zagnieżdżonym

01:03.760 --> 01:08.340
zamykającym nawiasie klamrowym, i zobaczmy niektóre z opcji, które możemy

01:08.340 --> 01:14.190
dodać tutaj, które nie wpływają na kompilację lub zachowanie kroku kompilacji, ale zamiast

01:14.190 --> 01:18.410
tego, jak kompilator pracuje z tym projektem, ponieważ tam na przykład

01:18.410 --> 01:23.410
można ustawić opcję exclude.

01:23.700 --> 01:26.770
Teraz jeśli dodasz tutaj exclude, będzie to tablica,

01:26.770 --> 01:30.450
a to co możesz tu wpisać to ścieżki do plików, które nie powinny

01:30.450 --> 01:33.480
być uwzględnione w kompilacji, gdy uruchomisz

01:33.480 --> 01:36.400
TSC na całym projekcie.

01:36.400 --> 01:38.010
Czyli na przykład tutaj możemy powiedzieć,

01:38.010 --> 01:41.137
że chcemy wykluczyć analitykę. ts z kompilacji, i oczywiście

01:41.137 --> 01:43.390
nie ma to tutaj większego sensu, ale tylko

01:43.390 --> 01:45.300
po to, aby pokazać, jak to działa.

01:45.300 --> 01:49.350
Jeśli to zrobimy i teraz ponownie uruchomimy tsc, a ja przede wszystkim

01:49.350 --> 01:51.600
usunę analytics. js, abyśmy mogli zobaczyć,

01:51.600 --> 01:53.730
czy jest on odtwarzany, jeśli teraz

01:53.730 --> 01:57.140
uruchomimy tsc lub tsc w trybie zegarka, nie widać żadnej

01:57.140 --> 01:59.810
analityki. js jest tworzony, a powodem

01:59.810 --> 02:02.060
tego jest to, że wykluczamy ten plik.

02:02.060 --> 02:03.340
Oczywiście dla tego pliku

02:03.340 --> 02:04.670
nie ma to większego sensu,

02:04.670 --> 02:07.250
ponieważ zazwyczaj chcę go dołączyć, ale jeśli masz

02:07.250 --> 02:09.360
plik, który z jakiegoś powodu nie powinien

02:09.360 --> 02:12.440
być skompilowany, możesz go wykluczyć w ten sposób.

02:12.440 --> 02:14.210
Możesz również pracować z symbolami wieloznacznymi,

02:14.210 --> 02:15.810
a na przykład, jeśli miałeś plik, który

02:15.810 --> 02:20.810
nazywa się analytics. dev. ts i tak naprawdę nie chcesz tego kompilować,

02:20.850 --> 02:22.900
możesz powiedzieć, że wszystkie pliki, które

02:22.900 --> 02:25.770
kończą się dev. ts nie powinien być kompilowany

02:25.770 --> 02:27.790
i możesz to zrobić dodając gwiazdkę, która

02:27.790 --> 02:29.620
jest symbolem wieloznacznym i teraz

02:29.620 --> 02:31.630
TypeScript będzie ignorował wszystkie

02:31.630 --> 02:36.470
pliki, które mają .

02:36.470 --> 02:36.470
dev. ts zawierał.

02:36.470 --> 02:40.037
Można też dodać tutaj gwiazdkę, gwiazdkę, ukośnik, a to

02:40.037 --> 02:43.080
oznaczałoby, że każdy plik z tym wzorcem w dowolnym

02:43.080 --> 02:45.770
folderze zostanie zignorowany.

02:45.770 --> 02:47.420
Więc to są rzeczy, które możesz ustawić

02:47.420 --> 02:49.220
tutaj, jedyną rzeczą, którą chcę ustawić

02:49.220 --> 02:51.500
tutaj, i to jest ustawienie, które często znajdziesz,

02:51.500 --> 02:54.103
jest to, że chcę wykluczyć node_modules, a pomysł tutaj

02:55.409 --> 02:58.260
jest taki, że nie chcę kompilować żadnych plików TypeScript,

02:58.260 --> 03:01.373
które mogę mieć wewnątrz node_modules.

03:02.449 --> 03:05.080
Teraz, node_modules jest tym folderem, który przechowuje

03:05.080 --> 03:07.160
wszystkie zależności, które instalujemy

03:07.160 --> 03:09.570
tutaj w pakiecie. json i zależności tych

03:09.570 --> 03:11.890
zależności, a zatem są to biblioteki

03:11.890 --> 03:14.660
stron trzecich, które importujemy, których

03:14.660 --> 03:16.810
nie chcemy dotykać, a jeśli któraś

03:16.810 --> 03:18.510
z tych bibliotek powinna wysłać

03:18.510 --> 03:20.630
jakiś kod TypeScript, to na pewno nie

03:20.630 --> 03:22.690
chcemy go kompilować, to tylko spowolni

03:22.690 --> 03:25.840
nasz proces kompilacji, a w najgorszym przypadku może

03:25.840 --> 03:29.200
nawet złamać nasz projekt.

03:29.200 --> 03:30.370
Więc dlatego jest to

03:30.370 --> 03:33.330
dość powszechne, aby wykluczyć node_modules tutaj,

03:33.330 --> 03:36.510
chociaż powiem, jeśli nie określisz opcji exclude w ogóle,

03:36.510 --> 03:41.420
node_modules jest automatycznie wykluczony jako ustawienie domyślne, więc naprawdę

03:41.420 --> 03:43.980
nie musisz dodawać tej opcji tutaj, to byłoby

03:43.980 --> 03:48.520
domyślne, chcę tylko pokazać, że exclude istnieje i jak możesz go użyć, jeśli

03:48.520 --> 03:50.570
jedyną rzeczą, którą chcesz wykluczyć,

03:50.570 --> 03:53.404
jest node_modules, nie musisz dodawać klucza exclude

03:53.404 --> 03:55.670
w ogóle.

03:55.670 --> 03:58.500
Jeśli jednak dodasz go, powinieneś ustawić node_modules,

03:58.500 --> 04:01.400
ponieważ w przeciwnym razie nie wykluczy tego.

04:01.400 --> 04:04.570
Teraz oprócz exclude, mamy również include, a include

04:04.570 --> 04:06.630
pozwala na zrobienie czegoś odwrotnego,

04:06.630 --> 04:09.570
pozwala powiedzieć TypeScriptowi, które pliki

04:09.570 --> 04:12.730
chcemy włączyć do procesu kompilacji, a wszystko, co

04:12.730 --> 04:16.380
nie jest wymienione tutaj, nie zostanie skompilowane, więc

04:16.380 --> 04:20.620
jeśli wskażę na app. ts tutaj, zobaczysz, jeśli ponownie uruchomię tsc, również

04:20.620 --> 04:23.470
nie dostaniemy żadnej analityki. plik ts, lub brak

04:23.470 --> 04:25.570
analityki. plik js powinienem powiedzieć.

04:25.570 --> 04:26.403
Dlaczego?

04:26.403 --> 04:29.230
Bo analityka. js nie jest uwzględniony w include,

04:29.230 --> 04:32.370
i jak powiedziałem, jeśli ustawimy klucz include, to naprawdę

04:32.370 --> 04:33.970
musimy uwzględnić wszystko, co

04:33.970 --> 04:35.810
chcemy skompilować.

04:35.810 --> 04:40.080
Więc oczywiście tutaj możemy potem dodać również analitykę. ts tutaj, i z tym dodatkiem byśmy zaczęli

04:40.080 --> 04:46.740
i skompilowali, jak widzisz teraz mamy analitykę.

04:46.740 --> 04:46.740
js,

04:46.740 --> 04:49.650
lub alternatywnie podajemy tutaj cały folder, w którym zazwyczaj

04:49.650 --> 04:52.560
znajdują się pliki, które chcemy skompilować.

04:52.560 --> 04:55.520
Exclude przy okazji, jeśli ustawione obok include,

04:55.520 --> 04:57.160
będzie filtrować w dół include,

04:57.160 --> 05:00.290
więc jeśli wykluczymy jakiś podfolder folderu, który

05:00.290 --> 05:01.740
jest częścią include, to

05:01.740 --> 05:04.980
ten wykluczony podfolder będzie wykluczony, więc w zasadzie

05:04.980 --> 05:08.720
kompilujemy include minus exclude.

05:08.720 --> 05:10.420
Teraz oczywiście tutaj nie chcę ustawiać

05:10.420 --> 05:12.520
include, chcę skompilować wszystkie pliki TypeScript,

05:12.520 --> 05:15.050
a zatem nie muszę się o to martwić, wykluczenie node_modules

05:15.050 --> 05:17.200
jest wszystkim, czego potrzebuję, i jak wyjaśniłem,

05:17.200 --> 05:18.930
teoretycznie nie muszę nawet dodawać

05:18.930 --> 05:20.280
tego, ponieważ byłoby to domyślnie

05:20.280 --> 05:22.423
wykluczone.

05:23.260 --> 05:25.310
Teraz masz również opcję plików, to pozwala

05:25.310 --> 05:27.560
wskazać poszczególne pliki, więc to trochę

05:27.560 --> 05:30.870
jak include z tą różnicą, że tutaj nie można określić całych folderów,

05:30.870 --> 05:34.200
które chcesz dołączyć, zamiast tego naprawdę po prostu określić

05:34.200 --> 05:36.020
poszczególne pliki, które chcesz

05:36.020 --> 05:38.220
skompilować, to może być opcja dla mniejszych

05:38.220 --> 05:40.710
projektów, gdzie wiesz, że będziesz pracować

05:40.710 --> 05:48.560
tylko z wolnymi plikami, a z jakiegoś powodu masz kilka innych plików TypeScript, które nie chcesz dotknąć chociaż, to możesz ustawić listę plików

05:48.560 --> 05:51.340
w ten sposób.

05:51.340 --> 05:53.360
W rzeczywistości możesz jednak nie

05:53.360 --> 05:55.740
potrzebować tego ustawienia tak często.

05:55.740 --> 05:58.530
I dlatego to tyle jeśli chodzi o podstawowe opcje kompilacji

05:58.530 --> 06:00.910
czy zarządzania projektami tutaj.

06:00.910 --> 06:03.900
Teraz oczywiście możemy określić znacznie więcej,

06:03.900 --> 06:08.230
znacznie więcej możemy określić o samym kompilatorze i jak zachowuje

06:08.230 --> 06:10.793
się podczas etapu kompilacji.
