WEBVTT

00:02.270 --> 00:03.850
Instruktor: Używamy więc

00:03.850 --> 00:07.450
podstawowych typów number, boolean i string.

00:07.450 --> 00:10.840
I tutaj na liście parametrów tej funkcji,

00:10.840 --> 00:13.970
zawsze jawnie przypisujemy typy z dwukropkiem

00:13.970 --> 00:16.540
po nazwie parametru, a następnie

00:16.540 --> 00:18.410
nazwą typu.

00:18.410 --> 00:21.350
Czyli tutaj nazwy to number, boolean, string.

00:21.350 --> 00:23.100
I na wypadek, gdybyś się zastanawiał,

00:23.100 --> 00:25.420
są to teraz specjalne identyfikatory.

00:25.420 --> 00:28.530
Ta ogólna, tutaj, jest specjalną składnią, która jest

00:28.530 --> 00:30.170
dodawana przez TypeScript.

00:30.170 --> 00:32.900
Nie jest to część skompilowanego kodu JavaScript.

00:32.900 --> 00:35.040
Jeśli sprawdzimy ten kod tutaj, te

00:35.040 --> 00:37.280
przypisania typów zniknęły, ponieważ

00:37.280 --> 00:39.530
JavaScript nie obsługuje ich.

00:39.530 --> 00:42.390
Ten dwukropek rzecz po zmiennej, lub

00:42.390 --> 00:43.920
po parametrze.

00:43.920 --> 00:46.320
A potem number i boolean i string.

00:46.320 --> 00:48.290
Te specjalne słowa kluczowe.

00:48.290 --> 00:50.840
Takie rozwiązanie zostało wprowadzone przez TypeScript.

00:50.840 --> 00:53.500
Kompilator TypeScript rozumie to.

00:53.500 --> 00:55.480
IDE tutaj obsługuje TypeScript,

00:55.480 --> 00:58.580
a zatem nie narzeka na te specjalne słowa kluczowe.

00:58.580 --> 01:01.760
JavaScript nie rozumie tej składni.

01:01.760 --> 01:04.590
Nie rozumie dwukropka po parametrze lub dwukropka

01:04.590 --> 01:06.560
po zmiennej, a następnie specjalnego

01:06.560 --> 01:09.190
słowa kluczowego liczby lub ciągu.

01:09.190 --> 01:11.540
JavaScript nie rozumie tego i dlatego nie

01:11.540 --> 01:13.560
jest to część wyjścia JavaScript.

01:13.560 --> 01:15.920
To naprawdę jest po prostu używane przez kompilator TypeScript.

01:15.920 --> 01:18.130
A potem, cóż, jest to kompilator,

01:18.130 --> 01:21.820
ponieważ konwertuje ten kod na kod JavaScript.

01:21.820 --> 01:24.880
Uwaga boczna, widzisz również, że przełącza const

01:24.880 --> 01:27.700
dla var, ale to coś, do czego wrócę później.

01:27.700 --> 01:30.590
Mamy więc tutaj nasze jawne przypisanie typu i jest

01:30.590 --> 01:33.060
to zrozumiałe tylko dla TypeScript.

01:33.060 --> 01:35.763
Świetnie, dlaczego nie mamy ich tam na dole?

01:36.880 --> 01:39.890
Nie mam tu jednoznacznych przydziałów typów.

01:39.890 --> 01:41.180
A tak na marginesie, również

01:41.180 --> 01:43.450
nie tutaj, gdy np. obliczamy wynik, bo

01:43.450 --> 01:45.530
TypeScript ma wbudowaną funkcję,

01:45.530 --> 01:48.400
która nazywa się type inference.

01:48.400 --> 01:51.000
Oznacza to, że TypeScript robi wszystko,

01:51.000 --> 01:53.010
co w jego mocy, i robi tam całkiem

01:53.010 --> 01:56.400
dobrą robotę, aby zrozumieć, jaki typ masz w określonej

01:56.400 --> 01:58.860
zmiennej lub stałej.

01:58.860 --> 02:02.300
A tu na przykład rozumie, że liczba1 zawsze

02:02.300 --> 02:05.780
będzie na końcu typu liczba, bo inicjalizujesz

02:05.780 --> 02:08.020
ją liczbą.

02:08.020 --> 02:09.950
Teraz, to faktycznie jest stała, więc jest

02:09.950 --> 02:11.740
jeszcze bardziej specyficzna niż ta.

02:11.740 --> 02:15.350
A typ, który tu identyfikuje, to nie byle jaka

02:15.350 --> 02:17.490
liczba, to liczba pięć.

02:17.490 --> 02:20.110
Ponieważ i tak nie będziesz mógł przypisać

02:20.110 --> 02:23.870
nowej liczby, lub nowej wartości do wartości const.

02:23.870 --> 02:25.840
Jeśli miałbyś zmienić to na zmienną,

02:25.840 --> 02:28.460
więc jeśli użyłbyś let zamiast tego, to oczywiście

02:28.460 --> 02:30.180
nie złamałoby to niczego.

02:30.180 --> 02:32.940
Możemy tam użyć zmiennej, może nie jest to najlepsza praktyka,

02:32.940 --> 02:34.540
ponieważ ta wartość nigdy się nie zmienia,

02:34.540 --> 02:36.210
ale nie jest też straszna.

02:36.210 --> 02:38.260
Ale teraz, jeśli najechać na to widzimy,

02:38.260 --> 02:41.210
że TypeScript nie mówi, ok, to musi być piątka.

02:41.210 --> 02:45.510
Ale nadal wykrywa, że typ tutaj jest liczbą.

02:45.510 --> 02:49.260
Teraz, absolutnie moglibyśmy napisać ten kod tutaj na własną rękę.

02:49.260 --> 02:51.970
Możemy po nazwie zmiennej po lewej stronie

02:51.970 --> 02:53.870
znaku równości dodać dwukropek,

02:53.870 --> 02:55.590
a następnie nazwę typu.

02:55.590 --> 02:56.880
Czyli w zasadzie to samo,

02:56.880 --> 02:59.470
co zrobiliśmy w parametrach tej funkcji.

02:59.470 --> 03:01.860
Ale, jest to zbędne i właściwie nie

03:01.860 --> 03:04.620
jest też uważane za dobrą praktykę.

03:04.620 --> 03:06.790
Ponieważ TypeScript jest w stanie

03:06.790 --> 03:09.990
doskonale wywnioskować ten typ stamtąd.

03:09.990 --> 03:13.690
Przypisywanie tego nie jest więc dobrym pomysłem.

03:13.690 --> 03:16.420
Zmienia się to tylko wtedy, gdy stworzyłbyś tę zmienną

03:16.420 --> 03:18.053
w sposób nieprzypisany.

03:19.000 --> 03:22.130
Jak to, jeśli nie zainicjalizujesz go natychmiast.

03:22.130 --> 03:25.700
Następnie, dobrą praktyką jest powiedzenie TypeScriptowi, która

03:25.700 --> 03:29.070
wartość będzie ostatecznie przechowywana w tym miejscu.

03:29.070 --> 03:32.590
Tak, że kiedy później przypiszesz do niego wartość, i oczywiście jest to

03:32.590 --> 03:34.080
trochę zbędne tutaj, aby podzielić

03:34.080 --> 03:35.320
to na dwie linie.

03:35.320 --> 03:37.800
Robię to tylko dla celów demonstracyjnych.

03:37.800 --> 03:39.480
Ale teraz, jeśli przypiszę to

03:39.480 --> 03:42.460
tutaj, to łamie się, ponieważ powiedziałem TypeScriptowi

03:42.460 --> 03:44.630
z góry, że będzie to typ liczby.

03:44.630 --> 03:45.610
Nie musisz tego robić.

03:45.610 --> 03:47.420
Działa również, jeśli tego nie zrobisz.

03:47.420 --> 03:50.330
Ale teraz mógłbyś również dodać tę piątkę i nie dostałbyś

03:50.330 --> 03:51.630
błędu, ponieważ nie mówisz

03:51.630 --> 03:53.470
TypeScriptowi nic o typie, który

03:53.470 --> 03:56.975
będzie przechowywany w tej zmiennej, a zatem TypeScript

03:56.975 --> 03:59.630
pozwala na dowolny typ.

03:59.630 --> 04:02.600
Jeśli zamiast tego dodasz tutaj liczbę dwukropka,

04:02.600 --> 04:05.417
mówisz TypeScriptowi, "Hej, ostatecznie "liczba

04:05.417 --> 04:07.370
będzie tam przechowywana. I stąd jeśli później przechowasz tam coś

04:07.370 --> 04:10.060
innego, jak w tym przypadku, gdzie przechowaliśmy ciąg

04:10.060 --> 04:12.470
znaków, dostaniesz błąd tutaj w IDE, i oczywiście

04:12.470 --> 04:15.170
również jeśli skompilowałeś swój kod.

04:15.170 --> 04:17.570
Otrzymamy błąd, który widzieliśmy już wcześniej.

04:17.570 --> 04:20.253
Tak więc w ten sposób można przypisać typy.

04:22.300 --> 04:24.920
Teraz, nawet jeśli TypeScript właśnie wywnioskował typ

04:24.920 --> 04:27.830
i pozwól mi to naprawić, będzie krzyczeć na ciebie, jeśli złamiesz

04:27.830 --> 04:29.310
ten wywnioskowany typ.

04:29.310 --> 04:32.720
Właściwie to błędne jest stwierdzenie, że nawet, bo oczywiście

04:32.720 --> 04:35.670
tak jest, dlaczego miałby tego nie robić?

04:35.670 --> 04:37.000
Wnioskowanie o typie jest po to, abyś

04:37.000 --> 04:39.750
mógł zapisać swój kod, aby uniknąć tego, że ręcznie musisz przypisać typ.

04:39.750 --> 04:42.730
Oczywiście TypeScript krzyczy na ciebie, jeśli

04:42.730 --> 04:44.520
następnie użyjesz złego typu,

04:44.520 --> 04:46.510
typu, którego nie wnioskował.

04:46.510 --> 04:48.640
Na przykład tutaj, jeśli resultPhrase

04:48.640 --> 04:52.460
jest tworzony z let tak, że jest zmienny, to TypeScript tutaj infirmuje,

04:52.460 --> 04:54.000
że to będzie typu string,

04:54.000 --> 04:57.670
ponieważ inicjalizujemy go łańcuchem.

04:57.670 --> 04:59.850
Więc jest to w zasadzie odpowiednik nie inicjalizowania

04:59.850 --> 05:03.060
go i ustawiania typu na własną rękę, a następnie przypisywania

05:03.060 --> 05:04.970
wartości później.

05:04.970 --> 05:07.410
Teraz, jeśli zmienimy resultPhrase na,

05:07.410 --> 05:12.310
powiedzmy, zero tutaj, z jakiegokolwiek powodu moglibyśmy chcieć to zrobić, cóż,

05:12.310 --> 05:15.660
wtedy dostaniemy błąd tutaj, że typ zero nie jest przypisany

05:15.660 --> 05:17.330
do typu string.

05:17.330 --> 05:21.210
I to ma sens, prawda?

05:21.210 --> 05:22.690
TypeScript wywnioskował, że chcemy

05:22.690 --> 05:25.430
przechowywać ciąg znaków, teraz próbujemy przechowywać

05:25.430 --> 05:27.290
liczbę, otrzymujemy błąd.

05:27.290 --> 05:28.530
To jest właśnie zadanie, podstawowe zadanie TypeScript.

05:28.530 --> 05:33.000
Sprawdzanie typów i krzyczenie na nas, jeśli używamy

05:33.000 --> 05:35.280
ich niepoprawnie.
