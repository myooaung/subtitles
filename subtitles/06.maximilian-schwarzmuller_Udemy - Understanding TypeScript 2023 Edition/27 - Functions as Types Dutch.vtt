WEBVTT

00:02.140 --> 00:04.980
-: Je kunt dus types gebruiken voor functieparameters

00:04.980 --> 00:06.750
en voor de retourwaarde van de

00:06.750 --> 00:08.100
functie.

00:08.100 --> 00:10.420
Nu, om het naar het volgende niveau

00:10.420 --> 00:14.820
te brengen, wat als ze ook een functietype zelf zouden zijn.

00:14.820 --> 00:17.170
Laat me nu duidelijk maken wat ik bedoel.

00:17.170 --> 00:19.333
Laten we zeggen dat we een variabele 'combinevalues'

00:21.360 --> 00:24.200
hebben en dat deze variabele standaard het type 'any' heeft. Zoals je geleerd hebt, is 'elk' niet zo handig.

00:24.200 --> 00:26.860
Wat ik uiteindelijk wil doen is, ik wil 'combinevalues'

00:26.860 --> 00:29.617
gelijk stellen aan 'add. Dus ik wil die 'add' functie, een pointer naar

00:29.617 --> 00:32.600
deze 'add' functie, opslaan in 'combinevalues',

00:32.600 --> 00:35.330
zodat we op het einde, console log, waarden

00:35.330 --> 00:37.430
kunnen combineren, en 'combinevalues'

00:37.430 --> 00:39.160
kunnen uitvoeren als een functie

00:39.160 --> 00:41.580
met 8 en 8.

00:41.580 --> 00:44.520
Als ik dat opsla, en ik voer dit uit, na het

00:44.520 --> 00:47.480
compileren, dus ik heb dit bestand gecompileerd

00:47.480 --> 00:52.130
en dan laten we dit herladen, dan krijgen we hier 16.

00:52.130 --> 00:54.660
Dus, dat werkt, en we zouden verwachten dat het werkt omdat dat

00:54.660 --> 00:55.840
normale JavaScript code is.

00:55.840 --> 00:58.820
We kunnen een pointer naar een functie opslaan,

00:58.820 --> 01:00.880
in een nummer variabele, en dan het

01:00.880 --> 01:03.350
aanbod uitvoeren van deze variabele als

01:03.350 --> 01:05.440
een functie, omdat, nou ja, het wijst

01:05.440 --> 01:07.300
naar de functie, toch?

01:07.300 --> 01:08.580
Dus we kunnen die functie uitvoeren, via die variabele.

01:08.580 --> 01:09.910
Het probleem dat we hebben

01:09.910 --> 01:13.250
met dit fragment hier vanuit een TypeScript perspectief,

01:13.250 --> 01:15.900
is gewoon dat 'combinevalues' any is.

01:15.900 --> 01:19.640
Dus als ik hier daarna 'combinevalues' op een getal zet, kunnen we

01:19.640 --> 01:20.670
dit natuurlijk niet

01:20.670 --> 01:24.520
compileren, want TypeScript heeft geen kans om te detecteren dat dit

01:24.520 --> 01:27.910
ongewenst is of dat dit een probleem kan veroorzaken.

01:27.910 --> 01:30.543
Maar een run time, het zou een fout krijgen omdat we

01:30.543 --> 01:34.230
blijkbaar probeerden 'combinevalues' uit te voeren als functie, terwijl

01:34.230 --> 01:36.220
het eigenlijk een getal is.

01:36.220 --> 01:39.090
Nu willen we dit vermijden, en daarvoor moet het duidelijk

01:39.090 --> 01:42.080
zijn dat "combinevalues" een functie zal bevatten.

01:42.080 --> 01:44.870
Nu de eerste stap in die richting,

01:44.870 --> 01:48.650
is dat we het type hier, op functie zetten.

01:48.650 --> 01:50.550
Functie is uiteindelijk een

01:50.550 --> 01:54.770
door TypeScript geleverd type, en dit maakt duidelijk dat wat

01:54.770 --> 01:57.940
we hier ook opslaan een functie moet zijn.

01:57.940 --> 02:00.870
Daarom krijg ik hier een fout, omdat 5 een getal

02:00.870 --> 02:02.230
is en geen functie.

02:02.230 --> 02:05.350
En als ik dit uitcommentaar, kunnen we dit compileren, anders zouden

02:05.350 --> 02:06.660
we een fout krijgen tijdens

02:06.660 --> 02:09.670
het compileren, en nu loopt het weer zoals verwacht.

02:09.670 --> 02:12.860
Dus dit is goed, maar het is niet perfect, want nu zeggen

02:12.860 --> 02:15.380
we dat dit een functie moet zijn, maar het

02:15.380 --> 02:17.940
zou ook 'combinevalues' gelijk kunnen stellen

02:17.940 --> 02:21.460
aan 'printResult' bijvoorbeeld hier.

02:21.460 --> 02:25.290
En natuurlijk zou TypeScript niet klagen omdat 'printResult' een

02:25.290 --> 02:27.150
functie is, maar het is natuurlijk

02:27.150 --> 02:29.600
geen functie die twee argumenten neemt.

02:29.600 --> 02:32.620
Dus als ik dit opnieuw compileer, zal TypeScript niet klagen.

02:32.620 --> 02:34.800
Maar als we herladen zien we hier ongedefinieerd en resultaat 8.

02:34.800 --> 02:38.720
Ik krijg dus niet het gewenste resultaat omdat ik

02:38.720 --> 02:42.470
er de verkeerde functie in heb opgeslagen.

02:42.470 --> 02:45.980
Nogmaals, het zou mooi zijn als TypeScript ons dat

02:45.980 --> 02:47.350
zou vertellen.

02:47.350 --> 02:49.980
TypeScript kan ons hierover niet inlichten, want het enige wat

02:49.980 --> 02:51.340
we tegen TypeScript hebben gezegd

02:51.340 --> 02:54.410
is dat we er een functie willen opslaan en dat is duidelijk het geval.

02:54.410 --> 02:58.040
Het zou dus goed zijn als we preciezer zouden kunnen aangeven

02:58.040 --> 03:00.550
hoe de functie eruit moet zien die we

03:00.550 --> 03:03.810
in 'combinevalues' willen opslaan. En dat is waar functietypes om de hoek komen kijken.

03:03.810 --> 03:07.200
Functietypen zijn typen die een functie beschrijven

03:07.200 --> 03:08.380
met betrekking tot

03:08.380 --> 03:11.900
de parameters en de retourwaarde van die functie.

03:11.900 --> 03:15.690
Een functietype wordt gemaakt met deze pijlfunctie-notatie die

03:15.690 --> 03:18.360
u kent uit JavaScript of die daar tenminste dicht

03:18.360 --> 03:19.870
bij in de buurt komt.

03:19.870 --> 03:23.710
Je voegt hier geen accolades toe omdat we

03:23.710 --> 03:25.530
hier geen pijlfunctie

03:25.530 --> 03:28.890
maken, maar een functietype.

03:28.890 --> 03:31.610
Nu geef je aan de rechterkant van deze pijl het terugkeertype

03:31.610 --> 03:33.690
op van de functie die je hier uiteindelijk

03:33.690 --> 03:35.450
wilt kunnen opslaan.

03:35.450 --> 03:37.180
Dat moet nummer zijn.

03:37.180 --> 03:40.840
Daarmee zeggen we dat 'combinevalues' elke functie accepteert die

03:40.840 --> 03:42.640
geen parameters neemt en vervolgens

03:42.640 --> 03:44.120
een getal teruggeeft.

03:44.120 --> 03:47.200
Dat is natuurlijk niet helemaal wat we willen.

03:47.200 --> 03:50.430
We willen ervoor zorgen dat 'combinevalues' een functie neemt

03:50.430 --> 03:51.840
of functies kan opslaan die

03:51.840 --> 03:54.180
2 getallen nemen en een getal teruggeven.

03:54.180 --> 03:57.130
En daarvoor kunnen we hier parameters

03:57.130 --> 04:01.400
toevoegen aan dit functietype.

04:01.400 --> 04:02.400
We hoeven de namen van

04:02.400 --> 04:05.040
de parameters niet te matchen, alleen de types.

04:05.040 --> 04:06.020
Dus we kunnen a hebben die

04:06.020 --> 04:09.060
van het type nummer moet zijn en b die van het type nummer moet zijn.

04:09.060 --> 04:10.510
En wat we nu tegen TypeScript

04:10.510 --> 04:14.070
zeggen is dat 'combinevalues' elke functie moet accepteren

04:14.070 --> 04:15.660
die twee parameters neemt

04:15.660 --> 04:18.322
waarbij elke parameter een getal is, en waarbij

04:18.322 --> 04:22.930
de functie als geheel dan een getal teruggeeft.

04:22.930 --> 04:24.350
En daarom klaagt TypeScript er niet

04:24.350 --> 04:27.780
over dat we 'add' opslaan in combinatiewaarden, want 'add' is een functie die perfect

04:27.780 --> 04:29.690
voldoet aan deze typedefinitie.

04:29.690 --> 04:33.380
Maar het klaagt wel over 'printResult' omdat 'printResult',

04:33.380 --> 04:36.890
zoals het ons hier vertelt, een functie is van het

04:36.890 --> 04:40.632
type één argument dat een getal is, er wordt niets teruggegeven,

04:40.632 --> 04:44.360
terwijl we eigenlijk een functie verwachten met twee

04:44.360 --> 04:48.690
argumenten waarbij elk argument een getal is en we ook een getal

04:48.690 --> 04:52.310
teruggeven.

04:52.310 --> 04:55.810
Dus we hebben hier een mismatch, en als ik dit zou proberen

04:55.810 --> 04:58.700
te compileren, zouden we daarom hier een fout

04:58.700 --> 05:00.480
krijgen, natuurlijk, in de

05:00.480 --> 05:03.440
compiler, en we kunnen dit alleen oplossen door

05:03.440 --> 05:06.270
deze regel code te verwijderen.

05:06.270 --> 05:07.110
Nu kunnen we dit zonder fouten hercompileren.

05:07.110 --> 05:10.930
En nu loopt dit zoals verwacht.

05:10.930 --> 05:12.060
Dus functie types,

05:12.060 --> 05:15.140
laten ons toe te beschrijven welk type functie we specifiek

05:15.140 --> 05:17.413
ergens willen gebruiken.

05:18.290 --> 05:20.887
Of dat nu een verwachte waarde is in een parameter,

05:20.887 --> 05:23.890
om een functie te maken met een terugroepfunctie, of, zoals

05:23.890 --> 05:25.420
hier, een variabele.
