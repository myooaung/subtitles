WEBVTT

00:02.290 --> 00:03.910
Người hướng dẫn: Vì vậy, để cho Webpack

00:03.910 --> 00:06.710
biết phải làm gì với các tệp TypeScript, chúng ta cần thêm một

00:06.710 --> 00:08.830
mục mới vào đối tượng cấu hình tại đây.

00:08.830 --> 00:11.510
Và đó là thuộc tính mô-đun.

00:11.510 --> 00:14.020
Mô-đun cũng lấy một đối tượng JavaScript

00:14.020 --> 00:15.470
để định cấu hình nó.

00:15.470 --> 00:17.440
Một mô-đun cuối cùng chỉ là một tệp, vì vậy ở

00:17.440 --> 00:20.520
đây chúng tôi cho Webpack biết cách làm việc với các tệp mà nó tìm thấy,

00:20.520 --> 00:22.940
giống như với ứng dụng. ts và sau đó, khi

00:22.940 --> 00:25.520
nó hiểu tệp đó, cách xử lý tất cả các

00:25.520 --> 00:27.290
lần nhập trong tệp.

00:27.290 --> 00:29.800
Vậy Webpack nên xử lý các tệp này như thế nào?

00:29.800 --> 00:33.640
Chà, chúng tôi nói với Webpack bằng cách thêm một mảng quy tắc ở đây, bởi vì

00:33.640 --> 00:35.430
bạn có thể thiết lập nhiều quy tắc sẽ

00:35.430 --> 00:37.300
được áp dụng cho tất cả các tệp.

00:37.300 --> 00:40.690
Ở đây chúng tôi chỉ cần một, nhưng trong các dự án phức tạp hơn,

00:40.690 --> 00:44.030
nơi bạn cũng muốn sử dụng Webpack để xử lý các tệp CSS, hình ảnh

00:44.030 --> 00:46.140
hoặc bất kỳ thứ gì tương tự, bạn có thể thêm

00:46.140 --> 00:49.220
nhiều quy tắc hơn cho các loại tệp khác nhau.

00:49.220 --> 00:51.500
Và như đã đề cập trước đây, các tài liệu chính thức

00:51.500 --> 00:53.840
là một nơi tuyệt vời để tìm hiểu thêm về các trình

00:53.840 --> 00:55.730
tải, mà cuối cùng bạn sử dụng để dạy Webpack

00:55.730 --> 00:57.980
nhiều hơn về các tệp khác nhau và để tìm hiểu thêm

00:57.980 --> 00:59.720
về Webpack nói chung.

00:59.720 --> 01:02.560
Vì vậy, ở đây, chúng tôi sẽ thực sự thêm một trình tải như vậy.

01:02.560 --> 01:06.110
Trình tải chỉ đơn giản là một gói cho Webpack biết cách xử lý một

01:06.110 --> 01:07.780
số tệp nhất định và tất nhiên

01:07.780 --> 01:09.960
ở đây, chúng tôi có trình tải ts, giúp

01:09.960 --> 01:11.520
chúng tôi cho Webpack biết

01:11.520 --> 01:13.690
cách xử lý các tệp TypeScript.

01:13.690 --> 01:16.850
Vì vậy, chúng tôi thêm một quy tắc chỉ là một đối tượng JavaScript,

01:16.850 --> 01:19.720
nơi trước hết chúng tôi thêm một thuộc tính thử nghiệm.

01:19.720 --> 01:22.950
Điều này mô tả một Webpack thử nghiệm sẽ thực hiện trên

01:22.950 --> 01:26.510
bất kỳ tệp nào mà nó tìm thấy để tìm hiểu xem quy tắc này ở đây

01:26.510 --> 01:28.550
có áp dụng cho tệp đó hay không.

01:28.550 --> 01:31.080
Và bài kiểm tra ở đây là một biểu thức chính quy.

01:31.080 --> 01:33.610
Và ở đó tôi muốn nói với Webpack rằng bất

01:33.610 --> 01:36.950
kỳ tệp nào kết thúc bằng . ts nên được sử dụng hoặc nên

01:36.950 --> 01:38.913
được xử lý theo quy tắc này.

01:39.860 --> 01:42.940
Biểu thức chính quy kiểm tra phần mở rộng của tệp có thể sử dụng dấu

01:42.940 --> 01:46.260
gạch chéo ngược tại đây, sau đó . ts, và sau đó là ký

01:46.260 --> 01:47.550
hiệu đô la.

01:47.550 --> 01:50.840
Đây là biểu thức chính quy của chúng tôi, sau đó cho Webpack biết rằng bạn

01:50.840 --> 01:54.593
muốn kiểm tra các tệp kết thúc bằng . ts.

01:55.560 --> 01:58.810
Sau đó, bạn cũng phải chỉ định Webpack sẽ làm gì với

01:58.810 --> 02:02.590
những tệp đó và bạn làm điều đó với từ khóa sử dụng ở đây.

02:02.590 --> 02:05.290
Và ở đó, bạn chỉ định trình tải Webpack nên sử dụng,

02:05.290 --> 02:07.590
trong trường hợp của tôi là ts-loader.

02:07.590 --> 02:10.600
Vì vậy, chúng tôi nói với Webpack rằng bất kỳ tệp TypeScript

02:10.600 --> 02:12.720
nào mà nó tìm thấy phải được xử lý bởi trình

02:12.720 --> 02:16.010
tải TypeScript, sau đó sẽ biết phải làm gì với một tệp như vậy.

02:16.010 --> 02:17.680
Trình tải ts sẽ tự động lấy

02:17.680 --> 02:20.330
tệp tsconfig. json vào tài khoản nên chúng

02:20.330 --> 02:23.430
tôi không cần chỉ định bất kỳ cấu hình bổ sung nào tại đây.

02:23.430 --> 02:26.050
Chỉ cần một cấu hình không bao giờ gây hại,

02:26.050 --> 02:29.910
loại trừ các mô-đun nút dưới dạng biểu thức chính quy để

02:29.910 --> 02:33.773
Webpack cũng không cố gắng xem xét các mô-đun nút.

02:35.130 --> 02:38.400
Cùng với đó, chúng ta cần thêm một cấu hình bổ

02:38.400 --> 02:42.800
sung ở đây sau cấu hình mô-đun và đó là phím giải quyết.

02:42.800 --> 02:47.800
Ở đó, chúng tôi cho Webpack biết phần mở rộng tệp nào nó thêm vào phần

02:47.820 --> 02:49.750
nhập mà nó tìm thấy.

02:49.750 --> 02:52.440
Tôi đã nói Webpack sẽ tự thêm các tiện ích mở rộng và theo

02:52.440 --> 02:56.160
mặc định, nó sẽ tìm kiếm các tệp . tập tin js.

02:56.160 --> 02:59.220
Bây giờ ở đây chúng tôi muốn Webpack tìm kiếm các tệp . ts và sau đó để giải quyết

02:59.220 --> 03:01.280
tại đây, chúng ta có thể thêm thuộc

03:01.280 --> 03:05.390
tính tiện ích mở rộng, đặt bằng với một mảng và nói với Webpack rằng

03:05.390 --> 03:08.390
nó sẽ tìm kiếm các tệp . các tệp ts cũng

03:08.390 --> 03:10.640
như . tập tin js.

03:10.640 --> 03:13.360
Vì vậy, bây giờ Webpack về cơ bản sẽ tìm kiếm các

03:13.360 --> 03:16.900
tệp như vậy và sau đó nhóm tất cả các tệp có các phần mở rộng này

03:16.900 --> 03:18.723
mà bạn đang nhập cùng nhau.

03:19.760 --> 03:22.770
Và đó là thiết lập của chúng tôi gần như đã hoàn tất vào lúc này,

03:22.770 --> 03:24.690
ít nhất là tệp cấu hình của chúng tôi gần

03:24.690 --> 03:26.150
như đã hoàn thành vào lúc này.

03:26.150 --> 03:28.730
Cùng với đó, chúng ta cũng nên truy cập

03:28.730 --> 03:33.070
tsconfig và đảm bảo rằng bạn đặt sourceMap thành true.

03:33.070 --> 03:35.210
Điều này sẽ giúp chúng tôi gỡ lỗi mã của mình

03:35.210 --> 03:37.130
và Webpack cũng hỗ trợ điều này.

03:37.130 --> 03:39.850
Bây giờ chúng ta chỉ cần thêm một mục nhập,

03:39.850 --> 03:41.340
có thể ở đây bên dưới đầu

03:41.340 --> 03:43.710
ra và đó là khóa devtool.

03:43.710 --> 03:47.210
Và ở đó, giá trị phải là inline-source-map dưới

03:47.210 --> 03:48.510
dạng một chuỗi.

03:48.510 --> 03:51.620
Sau đó, điều này nói với Webpack rằng sẽ có các bản

03:51.620 --> 03:53.700
đồ nguồn được tạo sẵn, bản đồ này sẽ

03:53.700 --> 03:57.210
trích xuất và về cơ bản kết nối chính xác với gói mà nó tạo,

03:57.210 --> 04:00.170
để trong khi chúng tôi nhận được một gói như vậy,

04:00.170 --> 04:03.603
chúng tôi vẫn có trải nghiệm phát triển tuyệt vời.

04:05.830 --> 04:08.360
Bây giờ với điều đó, chúng ta có thể sử dụng Webpack và câu hỏi đặt

04:08.360 --> 04:09.823
ra là chúng ta sử dụng nó như thế nào?

04:11.000 --> 04:14.720
Một cách đơn giản để sử dụng nó là vào gói. json và ở đó hãy thêm

04:14.720 --> 04:16.650
một tập lệnh.

04:16.650 --> 04:18.440
Ví dụ: xây dựng.

04:18.440 --> 04:19.810
Bạn có thể đặt cho nó bất kỳ tên

04:19.810 --> 04:21.620
nào bạn muốn ở đây trong phần tập lệnh.

04:21.620 --> 04:23.930
Và ở đó, chỉ cần chạy Webpack, vì

04:23.930 --> 04:26.453
vậy chỉ cần gõ webpack như thế này.

04:27.560 --> 04:29.880
Bây giờ chúng ta hãy chuyển đến thư mục

04:29.880 --> 04:32.993
dist và cuối cùng xóa mọi thứ trong đó, và với phần

04:34.000 --> 04:36.870
lưu đó, bây giờ hãy chạy npm run build và xem liệu

04:36.870 --> 04:38.663
nó có hoạt động không.

04:39.970 --> 04:43.000
Và nó thất bại ...

04:45.440 --> 04:47.800
Vâng, tôi chỉ đơn giản là mắc một lỗi đánh

04:47.800 --> 04:51.440
máy, đó không phải là devtools, mà là devtool ở đây.

04:51.440 --> 04:53.830
Vì vậy, hãy thay đổi điều này thành devtool trong tệp

04:53.830 --> 04:56.143
cấu hình và bây giờ hãy lặp lại npm run build.

04:59.500 --> 05:02.620
Và, với điều đó, bạn có thể bỏ qua cảnh báo bạn nhận được ở đây.

05:02.620 --> 05:04.230
Bạn sẽ thấy trong file

05:04.230 --> 05:06.410
dist có 1 file js đi kèm.

05:06.410 --> 05:08.150
Và những gì bạn thấy trong

05:08.150 --> 05:09.960
đó cũng đã là mã khá khó đọc,

05:09.960 --> 05:14.060
bởi vì chúng tôi thực sự có sự thu nhỏ này đang hoạt động ở đây.

05:14.060 --> 05:18.680
Vì vậy, đây thực sự đã là mã được tối ưu hóa này.

05:18.680 --> 05:21.410
Bây giờ trước khi chúng ta thấy cách chúng ta cũng có thể làm

05:21.410 --> 05:23.490
việc với các cấu hình khác nhau ở đây, chúng ta

05:23.490 --> 05:26.120
hãy thực sự đi đến chỉ mục. html và điều chỉnh quá

05:26.120 --> 05:27.510
trình nhập của chúng tôi

05:27.510 --> 05:30.350
tại đây và gói điểm. js và hiện tại, vì chúng

05:30.350 --> 05:32.220
tôi chưa sử dụng Webpack

05:32.220 --> 05:35.140
Dev Server, hãy chạy npm start để hiển

05:35.140 --> 05:38.480
thị chỉ mục đó. tệp html một lần nữa.

05:38.480 --> 05:40.510
Và nếu bây giờ bạn tải

05:40.510 --> 05:44.890
lại trang này, bạn sẽ thấy nó hoạt động!

05:44.890 --> 05:46.610
Nếu chúng tôi nhập một cái gì

05:46.610 --> 05:49.230
đó ở đây, dự án của chúng tôi sẽ hoạt động theo

05:49.230 --> 05:52.030
cách nó nên làm và nó sẽ nhập tệp js được đóng gói

05:52.030 --> 05:56.200
ở đây, vì vậy chỉ một tệp thay vì tất cả các tệp riêng lẻ này.

05:56.200 --> 05:59.020
Và đó đã là một cải tiến.

05:59.020 --> 06:01.640
Ở đây chúng tôi đã có mã được gói để tránh

06:01.640 --> 06:05.410
tất cả các yêu cầu htp không cần thiết này.

06:05.410 --> 06:07.690
Và nếu bạn đi đến tab nguồn và bạn muốn gỡ lỗi

06:07.690 --> 06:09.420
mã của mình, bạn sẽ tìm thấy thư

06:09.420 --> 06:11.250
mục Webpack này và trong đó có một

06:11.250 --> 06:12.770
thư mục nguồn và ở đó bạn có thể

06:12.770 --> 06:15.300
truy cập các tệp TypeScript của mình.

06:15.300 --> 06:19.090
Và ví dụ, ở đây, trên đầu vào dự án, bạn cũng có thể đặt

06:19.090 --> 06:22.110
điểm ngắt ở đây trên tập hợpUserInput và

06:22.110 --> 06:24.970
nếu bây giờ bạn nhấn nút, nó sẽ tạm dừng

06:24.970 --> 06:26.190
ở đó và bạn có thể gỡ

06:26.190 --> 06:27.680
lỗi mã của mình.

06:27.680 --> 06:29.650
Và đó là bản đồ nguồn xuất hiện, thứ thực sự giúp

06:29.650 --> 06:31.200
chúng tôi phát triển và giúp cuộc sống

06:31.200 --> 06:34.050
của chúng tôi với tư cách là nhà phát triển dễ dàng hơn.

06:34.050 --> 06:37.520
Chúng tôi có mã được tối ưu hóa này, nhưng nhờ có bản đồ nguồn, chúng

06:37.520 --> 06:40.750
tôi có thể gỡ lỗi mã TypeScript gốc của mình tại đây.

06:40.750 --> 06:43.260
Vì vậy, chúng tôi đã có một thiết lập khá

06:43.260 --> 06:46.280
tuyệt vời, mang lại cho chúng tôi rất nhiều tối ưu

06:46.280 --> 06:48.440
hóa, bây giờ hãy hoàn thành việc này

06:48.440 --> 06:52.050
và đảm bảo rằng chúng tôi thực sự có Webpack Dev Server đi

06:52.050 --> 06:54.440
kèm, và sau đó chúng tôi thực sự có hai quy

06:54.440 --> 06:58.443
trình công việc, một cho sản xuất và một cho phát triển .
