WEBVTT

00:02.450 --> 00:05.030
Istruttore: Lasciamo da parte i sovraccarichi di

00:05.030 --> 00:09.010
funzioni e introduciamo un'altra caratteristica molto interessante.

00:09.010 --> 00:13.350
E questo è un concatenamento opzionale.

00:13.350 --> 00:16.720
Supponiamo di avere un'applicazione in

00:16.720 --> 00:21.603
cui si ottengono dati da un backend, da un database o da qualsiasi

00:21.603 --> 00:26.350
fonte in cui non si sa con certezza se in un oggetto è definita

00:26.350 --> 00:29.500
una certa proprietà.

00:29.500 --> 00:33.920
Supponiamo di avere fetchedUserData e fetchedUserData potrebbe essere un oggetto

00:33.920 --> 00:36.380
su un utente che abbiamo recuperato.

00:36.380 --> 00:39.705
Potremmo avere un ID, potremmo avere un

00:39.705 --> 00:44.705
nome Max e potremmo anche aspettarci un'altra proprietà

00:45.730 --> 00:50.550
job, ovvero un oggetto che ha un titolo e che poi ha anche

00:50.550 --> 00:53.950
una descrizione, la mia azienda.

00:53.950 --> 00:56.900
Ora, se otteniamo dati come questi, possiamo ovviamente lavorarci.

00:56.900 --> 01:00.150
Ora si possono fare cose più complesse, ma per

01:00.150 --> 01:03.940
cominciare diciamo che tutto ciò che sto facendo è caricare

01:03.940 --> 01:06.871
il titolo del lavoro qui, giusto.

01:06.871 --> 01:09.940
Ora, se lo salviamo con il nostro server di sviluppo attivo

01:09.940 --> 01:12.880
e funzionante e la compilazione in modalità di osservazione,

01:12.880 --> 01:14.420
otterrò il CEO qui.

01:14.420 --> 01:17.395
Ora, questo non è troppo complicato, tuttavia,

01:17.395 --> 01:22.395
se stiamo recuperando questi dati da un backend, per qualsiasi motivo, forse

01:23.080 --> 01:27.690
non recuperiamo tutti i dati di cui abbiamo bisogno, forse alcuni dati

01:27.690 --> 01:30.490
non sono impostati a questo punto.

01:30.490 --> 01:34.730
Nelle applicazioni più grandi e complesse, a volte si

01:34.730 --> 01:39.240
lavora con strutture con dati annidati, dove non si sa con

01:39.240 --> 01:42.650
certezza se una proprietà di un oggetto è impostata

01:42.650 --> 01:45.340
o se è indefinita.

01:45.340 --> 01:49.680
Quindi, se il lavoro non esiste, per qualsiasi motivo non viene

01:49.680 --> 01:53.180
recuperato, si ottiene un errore e TypeScript si lamenta

01:53.180 --> 01:55.930
di questo perché sa che non esiste una proprietà

01:55.930 --> 01:57.843
del lavoro.

01:57.843 --> 02:01.347
Il problema è che sa che per questi dati non saprebbe

02:01.347 --> 02:05.660
se si trattasse di dati recuperati da un file non controllato da

02:05.660 --> 02:09.720
TypeScript o, come ho appena detto, se si trattasse di dati recuperati

02:09.720 --> 02:12.530
dal backend e non si sapesse con certezza quali

02:12.530 --> 02:15.550
dati saranno restituiti.

02:15.550 --> 02:18.150
Ora, se non si sa se è definito o meno, ciò che

02:18.150 --> 02:21.730
si può fare in un normale JavaScript è provare ad accedere

02:21.730 --> 02:25.098
a job e, se funziona, continuare ad accedere a title.

02:25.098 --> 02:29.450
Questo è il modo in cui JavaScript controlla se qualcosa esiste prima

02:29.450 --> 02:33.520
di approfondire quel potenziale oggetto e se questo è undefined,

02:33.520 --> 02:37.110
il codice non viene mai eseguito e quindi si ha un errore

02:37.110 --> 02:39.400
di esecuzione più ampio.

02:39.400 --> 02:42.410
Anche in questo caso, TypeScript sa che il lavoro non

02:42.410 --> 02:45.180
esiste, ma se questo viene recuperato da una fonte

02:45.180 --> 02:48.470
che TypeScript non può esaminare, come il risultato di

02:48.470 --> 02:52.910
una richiesta HTTP, questo sarebbe il modo sicuro per evitare errori di esecuzione

02:52.910 --> 02:54.920
in JavaScript.

02:54.920 --> 02:58.110
Se questo esiste, si ottiene lo stesso risultato di prima.

02:58.110 --> 03:02.233
Se non esiste, non si ottiene almeno un errore di esecuzione.

03:02.233 --> 03:07.020
Con TypeScript, si ha un modo migliore per farlo.

03:07.020 --> 03:10.520
Avete l'operatore di concatenamento opzionale.

03:10.520 --> 03:15.320
È possibile aggiungere un punto interrogativo dopo l'elemento che non si è sicuri

03:15.320 --> 03:16.880
sia definito o meno.

03:16.880 --> 03:21.600
Almeno se si utilizza la versione 3 di TypeScript. 7 o superiore.

03:21.600 --> 03:24.770
Al mio IDE non piace, ma questa è una sintassi

03:24.770 --> 03:26.300
supportata.

03:26.300 --> 03:30.370
Questo dice a TypeScript se questo esiste, se esiste accedere a job e quindi

03:30.370 --> 03:33.450
possiamo aggiungere il punto interrogativo e quindi

03:33.450 --> 03:36.314
accedere al titolo solo se job è definito.

03:36.314 --> 03:39.300
Se lo facciamo, otterrò comunque un errore se provo

03:39.300 --> 03:42.490
a compilarlo, perché TypeScript sa ancora con certezza

03:42.490 --> 03:44.510
che il lavoro non esiste.

03:44.510 --> 03:47.370
Ma se non lo sapesse o se lo commentassi, la compilazione

03:47.370 --> 03:51.840
andrebbe bene e tutto verrebbe eseguito come prima.

03:51.840 --> 03:56.400
Quindi questo operatore di concatenamento opzionale ci aiuta ad accedere

03:56.400 --> 04:00.730
in modo sicuro alle proprietà e agli oggetti annidati nei nostri dati

04:00.730 --> 04:03.610
degli oggetti e se la cosa davanti al punto interrogativo

04:03.610 --> 04:07.061
è indefinita, non accederà alla cosa in seguito e quindi

04:07.061 --> 04:12.420
non lancerà un errore di runtime, ma semplicemente non continuerà.

04:12.420 --> 04:15.210
Quindi, dietro le quinte, questo è fondamentalmente compilato con

04:15.210 --> 04:18.380
un controllo if che verifica l'esistenza di questo elemento prima di tentare

04:18.380 --> 04:19.213
di accedervi.
