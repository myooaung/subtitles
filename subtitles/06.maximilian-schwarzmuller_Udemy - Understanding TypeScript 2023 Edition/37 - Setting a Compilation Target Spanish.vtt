WEBVTT

00:02.450 --> 00:04.810
Instructor: Así que ahora que tenemos una comprensión de

00:04.810 --> 00:07.850
cómo podemos manejar nuestros archivos con el compilador, vamos a sumergirnos

00:07.850 --> 00:09.870
en las opciones del compilador, porque eso es realmente

00:09.870 --> 00:11.300
interesante.

00:11.300 --> 00:13.860
Esto nos permite controlar cómo se compila

00:13.860 --> 00:16.620
nuestro código TypeScript, así que no sólo

00:16.620 --> 00:18.360
qué archivos, sino también

00:18.360 --> 00:20.920
cómo los archivos que se están compilando

00:20.920 --> 00:23.230
son tratados por TypeScript.

00:23.230 --> 00:26.760
Y ahí ves que tenemos un montón de opciones.

00:26.760 --> 00:29.560
Tienes breves explicaciones junto a estas opciones.

00:29.560 --> 00:32.450
Podría decirse que algunas explicaciones son muy crípticas.

00:32.450 --> 00:34.210
Otros son bastante claros.

00:34.210 --> 00:36.450
Y diré que muchas de estas opciones, la mayoría

00:36.450 --> 00:39.950
de estas opciones no importarán en la mayoría de los proyectos.

00:39.950 --> 00:43.900
Por lo tanto, no vas a establecer todas estas opciones, ni siquiera cerca.

00:43.900 --> 00:46.070
Normalmente se pueden ignorar muchas de estas opciones.

00:46.070 --> 00:48.765
Ahora voy a retomar las opciones importantes aquí a lo largo de

00:48.765 --> 00:50.230
este curso, porque algunas opciones

00:50.230 --> 00:52.140
sólo tienen sentido cuando aprendemos sobre

00:52.140 --> 00:53.911
una determinada característica.

00:53.911 --> 00:55.940
Sin embargo, quiero sumergirme en algunas

00:55.940 --> 00:57.250
opciones ahora mismo.

00:57.250 --> 01:00.840
Y para ello, repasemos el archivo de arriba a abajo y veamos

01:00.840 --> 01:02.340
qué tenemos ahí.

01:02.340 --> 01:04.410
Empecemos por la opción del objetivo.

01:04.410 --> 01:07.230
Como ves, esto está establecido por defecto.

01:07.230 --> 01:08.750
No está comentado.

01:08.750 --> 01:10.780
Y lo que haces con esta opción es

01:10.780 --> 01:15.530
decirle a TypeScript para qué versión de JavaScript de destino quieres

01:15.530 --> 01:16.970
compilar el código.

01:16.970 --> 01:18.850
Porque lo que hace TypeScript

01:18.850 --> 01:21.600
es que no sólo compila nuevas características

01:21.600 --> 01:23.500
como las anotaciones de tipo que

01:23.500 --> 01:26.960
no existen en JavaScript al código JavaScript.

01:26.960 --> 01:29.667
Así que no sólo se encarga

01:29.667 --> 01:33.270
de que esto funcione aquí.

01:33.270 --> 01:37.530
También compila el código en JavaScript que se ejecuta

01:37.530 --> 01:41.370
en un determinado conjunto de navegadores.

01:41.370 --> 01:43.798
Y básicamente se define qué navegadores soportan

01:43.798 --> 01:46.980
el código de compilación estableciendo el objetivo.

01:46.980 --> 01:49.520
El objetivo por defecto aquí en este proyecto como usted

01:49.520 --> 01:52.430
ve, el objetivo inicial que se está configurando es es5, lo que

01:52.430 --> 01:55.517
significa que todos los tipos de código se compila hacia abajo.

01:55.517 --> 01:57.550
Podemos ver eso.

01:57.550 --> 02:00.770
Si ejecuto TSC aquí para compilar todos mis archivos,

02:00.770 --> 02:03.260
vemos en app. ts Estoy usando let y

02:03.260 --> 02:05.732
const, pero en app. js, se var.

02:05.732 --> 02:09.890
Y eso pasa porque tenemos un objetivo de es5 y

02:09.890 --> 02:13.816
en el mundo de es5, no tenemos let y const.

02:13.816 --> 02:16.810
Así que lo bueno aquí es que podemos usar TypeScript para

02:16.810 --> 02:20.650
generar código que funcione también en navegadores antiguos.

02:20.650 --> 02:22.930
Pero depende totalmente del uso si queremos hacerlo.

02:22.930 --> 02:25.550
Tal vez no queramos hacer eso con TypeScript, porque tal

02:25.550 --> 02:27.670
vez tenemos alguna otra herramienta de construcción

02:27.670 --> 02:30.560
que se encargará de la transpilación de JavaScript y por lo tanto

02:30.560 --> 02:33.290
no queremos que TypeScript haga eso, o tal vez queremos enviar

02:33.290 --> 02:35.340
código que sólo funciona en los navegadores

02:35.340 --> 02:37.030
modernos porque sabemos que nuestra

02:37.030 --> 02:41.170
aplicación sólo se ejecutará en los navegadores modernos.

02:41.170 --> 02:44.160
Y por lo tanto, las opciones alternativas se pueden

02:44.160 --> 02:46.070
ver aquí si se elimina el valor y luego

02:46.070 --> 02:48.080
aquí en vscode por lo menos, si se pulsa

02:48.080 --> 02:51.300
Control + Espacio para obtener el auto-completado, se

02:51.300 --> 02:54.180
ve un montón de sugerencias y ver todos los valores

02:54.180 --> 02:56.450
disponibles aquí.

02:56.450 --> 02:58.700
Ahora, con el tiempo, esto por supuesto cambiará

02:58.700 --> 03:01.900
porque tenemos nuevas versiones de JavaScript publicadas.

03:01.900 --> 03:03.785
Ya has visto que hemos puesto esto en es5.

03:03.785 --> 03:06.150
Si no se especifica el objetivo en absoluto, entonces

03:06.150 --> 03:09.520
en este momento, TypeScript compila a es3 incluso, por lo que es compatible

03:09.520 --> 03:12.200
con una versión aún más antigua.

03:12.200 --> 03:15.130
Pero también puedes ir con es6, que es más moderno,

03:15.130 --> 03:17.510
que, por ejemplo, soporta const y deja

03:17.510 --> 03:19.310
o toma una versión aún más reciente,

03:19.310 --> 03:24.310
es6 es equivalente a es2015, sólo para el registro.

03:24.870 --> 03:27.480
Así que si ponemos esto en es6, por ejemplo, y vuelvo

03:27.480 --> 03:29.580
a ejecutar el comando tsc después de cambiar

03:29.580 --> 03:32.460
el tsconfig. json, lo verás ahora

03:32.460 --> 03:35.440
en la aplicación. js, tenemos let y const,

03:35.440 --> 03:38.130
porque ahora eso se apoya allí.

03:38.130 --> 03:39.340
Así que eso depende de ti.

03:39.340 --> 03:41.720
Por supuesto, cuanto más moderna sea la versión

03:41.720 --> 03:43.641
de JavaScript que elijas aquí, más

03:43.641 --> 03:47.450
conciso será el código generado porque TypeScript tiene que compilar

03:47.450 --> 03:50.440
cada vez menos código, o tiene que trabajar alrededor

03:50.440 --> 03:54.010
de características inexistentes en menos situaciones, y por

03:54.010 --> 03:56.190
lo tanto, el código compilado normalmente

03:56.190 --> 03:59.560
se hace más conciso y más corto.

03:59.560 --> 04:01.150
Así que ese es el objetivo.

04:01.150 --> 04:02.623
¿Y las demás opciones?
