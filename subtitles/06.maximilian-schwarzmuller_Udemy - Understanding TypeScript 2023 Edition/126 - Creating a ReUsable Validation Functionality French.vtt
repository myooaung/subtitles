WEBVTT

00:02.160 --> 00:06.060
Instructeur : Alors, que pourrions-nous faire à propos de la validation ?

00:06.060 --> 00:10.450
Eh bien, peut-être, commençons par le résultat final souhaité.

00:10.450 --> 00:14.850
Mon idée est que nous ayons plus tard une fonction de validation

00:14.850 --> 00:17.950
qui n'existe pas encore, mais que nous l'ayons

00:17.950 --> 00:21.230
plus tard, à laquelle je passe le enteredTitle,

00:21.230 --> 00:25.360
ou en fait un objet de configuration je dirais où la valeur

00:25.360 --> 00:27.900
est le enteredTitle, donc la chose

00:27.900 --> 00:30.300
à valider.

00:30.300 --> 00:33.260
Mais j'ai aussi des propriétés supplémentaires

00:33.260 --> 00:37.350
qui indiquent à la fonction de validation comment la

00:37.350 --> 00:39.130
valider.

00:39.130 --> 00:43.210
Ainsi, par exemple, nous avons défini required sur true ici,

00:43.210 --> 00:47.009
minLength sur five pour imposer cinq caractères, et ainsi

00:47.009 --> 00:48.360
de suite.

00:48.360 --> 00:50.040
Et puis nous faisons cela ici pour

00:50.040 --> 00:51.540
les trois entrées, et valider

00:51.540 --> 00:53.900
est une fonction qui renvoie vrai si c'est valide,

00:53.900 --> 00:56.620
et faux si ce n'est pas valide, et à la fin, nous pourrions

00:56.620 --> 00:59.580
avoir quelque chose comme ceci.

00:59.580 --> 01:04.580
Ou enteredDescription et enteredPeople, ce serait

01:04.790 --> 01:06.790
à peu près l'idée.

01:06.790 --> 01:09.210
Bien sûr, ce n'est qu'une façon de procéder,

01:09.210 --> 01:11.703
mais c'est une façon qui me plaît beaucoup.

01:12.600 --> 01:15.320
Pour cela, en haut du fichier,

01:15.320 --> 01:19.470
je vais ajouter une logique de validation.

01:19.470 --> 01:22.380
Et, encore une fois, il existe de nombreuses façons de le faire.

01:22.380 --> 01:24.390
Je vais tout d'abord commencer

01:24.390 --> 01:27.840
par définir la structure d'un tel objet validable.

01:27.840 --> 01:31.280
Nous transmettons donc cet objet à la fonction de validation,

01:31.280 --> 01:33.430
parce que, bien sûr, il doit toujours

01:33.430 --> 01:37.820
avoir une structure similaire avec un certain nombre de propriétés qui peuvent

01:37.820 --> 01:40.100
être présentes et certains types de propriétés,

01:40.100 --> 01:42.410
de sorte que la fonction de validation

01:42.410 --> 01:44.950
sache réellement avec quoi elle travaille

01:44.950 --> 01:47.400
et puisse extraire correctement les propriétés,

01:47.400 --> 01:49.870
etc.

01:49.870 --> 01:52.850
Je vais donc commencer par définir une interface.

01:52.850 --> 01:55.380
Nous pourrions également opter pour un type personnalisé,

01:55.380 --> 01:56.550
à vous de choisir.

01:56.550 --> 01:58.690
Comme je vais définir la structure d'un objet,

01:58.690 --> 02:02.793
je suis toujours plus favorable à la définition d'une simple interface.

02:03.810 --> 02:06.700
Je vais le nommer Validatable ici,

02:06.700 --> 02:09.940
parce qu'il décrit un objet validable,

02:09.940 --> 02:13.300
et il aura une valeur qui devrait être une

02:13.300 --> 02:17.140
chaîne de caractères ou aussi un nombre.

02:17.140 --> 02:18.980
Il aura une propriété requise,

02:18.980 --> 02:21.240
qui aura une valeur booléenne, donc

02:21.240 --> 02:22.630
vrai ou faux.

02:22.630 --> 02:26.470
Ensuite, disons que nous prenons en charge la validation de la longueur

02:26.470 --> 02:28.212
minimale, qui doit être un nombre,

02:28.212 --> 02:30.220
de la longueur maximale, qui doit être

02:30.220 --> 02:32.510
un nombre, et aussi, au cas où nous obtenons

02:32.510 --> 02:35.240
un nombre, une valeur minimale et maximale.

02:35.240 --> 02:37.417
La différence avec minLength et maxLength

02:37.417 --> 02:40.310
est que ceci vérifie la longueur de la chaîne, ceci la

02:40.310 --> 02:42.320
valeur du nombre si elle est supérieure

02:42.320 --> 02:43.960
à un certain nombre ou inférieure

02:43.960 --> 02:46.010
à un certain maximum.

02:46.010 --> 02:48.870
Ce sont les propriétés que je veux soutenir.

02:48.870 --> 02:50.470
Maintenant, à part la valeur,

02:50.470 --> 02:52.140
ils devraient tous être facultatifs,

02:52.140 --> 02:54.410
ce que nous pouvons imposer en ajoutant

02:54.410 --> 02:57.650
un point d'interrogation après les noms.

02:57.650 --> 03:00.070
À propos, l'alternative à l'utilisation d'un point d'interrogation

03:00.070 --> 03:02.720
est d'autoriser des valeurs indéfinies.

03:02.720 --> 03:04.880
Le point d'interrogation fait fondamentalement la même chose.

03:04.880 --> 03:09.370
Il est dit que required est soit un booléen, soit indéfini.

03:09.370 --> 03:12.610
Nous avons donc maintenant l'interface validable.

03:12.610 --> 03:13.893
Que pouvons-nous faire avec ça ?

03:14.930 --> 03:17.893
Maintenant que cette interface est créée, nous

03:18.830 --> 03:21.330
pouvons créer cette fonction, cette fonction

03:21.330 --> 03:24.220
de validation que je recherche.

03:24.220 --> 03:27.410
Cela devrait permettre d'obtenir un tel objet validable.

03:27.410 --> 03:32.410
Donc ValidatableInput est de type Validatable.

03:32.410 --> 03:33.450
C'est mon idée.

03:33.450 --> 03:36.400
Il obtient donc un objet qui a cette structure.

03:36.400 --> 03:38.270
Et là, nous pouvons vérifier

03:38.270 --> 03:41.670
l'existence de toutes ces propriétés, puis effectuer

03:41.670 --> 03:44.810
la validation appropriée.

03:44.810 --> 03:46.150
Maintenant, que faisons-nous exactement

03:46.150 --> 03:48.200
dans la fonction de validation donc ?

03:48.200 --> 03:49.033
Eh bien, à la fin ici,

03:49.033 --> 03:50.930
je veux créer une variable, isValid, qui

03:50.930 --> 03:52.330
initialement est vrai.

03:52.330 --> 03:54.030
Donc la supposition par défaut est que

03:54.030 --> 03:55.510
ce que nous obtenons est vrai.

03:55.510 --> 03:57.430
Mais nous le mettrons à faux

03:57.430 --> 04:01.330
dès qu'au moins une de nos vérifications échouera.

04:01.330 --> 04:03.480
Et maintenant, commençons par le premier contrôle.

04:03.480 --> 04:06.410
Voyons si le validatableInput ici,

04:06.410 --> 04:08.220
cet argument que nous

04:08.220 --> 04:11.380
recevons, a une prop obligatoire ?

04:11.380 --> 04:13.260
Si ce n'est pas indéfini.

04:13.260 --> 04:16.490
Si elle est définie, et si elle est donc vraie, cela

04:16.490 --> 04:18.630
signifie que la valeur est obligatoire

04:18.630 --> 04:20.630
et ne doit pas être vide.

04:20.630 --> 04:22.080
Donc maintenant, ici,

04:22.080 --> 04:26.160
nous pouvons définir isValid égal à isValid et la façon dont

04:26.160 --> 04:27.700
JavaScript fonctionne,

04:27.700 --> 04:30.550
cela garantit que la nouvelle valeur de isValid

04:30.550 --> 04:34.330
sera fausse si la chose après et est fausse.

04:34.330 --> 04:36.870
Car si au moins une des deux choses est fausse,

04:36.870 --> 04:38.660
la valeur globale sera fausse.

04:38.660 --> 04:40.500
Maintenant, isValid est initialement

04:40.500 --> 04:44.070
vrai, mais si la chose après l'opérateur logique et est fausse,

04:44.070 --> 04:46.300
isValid sera faux.

04:46.300 --> 04:48.700
Et à la fin, je renverrai isValid.

04:48.700 --> 04:50.040
Alors maintenant, que devons-nous

04:50.040 --> 04:53.550
ajouter après les deux symboles de l'esperluette donc ?

04:53.550 --> 04:58.170
Je veux vérifier si validatableInput. si elle est vide.

04:58.170 --> 05:00.530
Et pour cela, nous pouvons le

05:00.530 --> 05:04.210
couper et vérifier la longueur, ou bien ?

05:04.210 --> 05:05.630
Le problème, c'est qu'on ne

05:05.630 --> 05:07.510
sait pas si value est une chaîne.

05:07.510 --> 05:09.090
C'est une chaîne ou un nombre.

05:09.090 --> 05:10.910
Il n'est donc pas garanti qu'il s'agisse

05:10.910 --> 05:12.140
d'une chaîne, et la méthode

05:12.140 --> 05:14.100
trim n'est donc pas toujours disponible.

05:14.100 --> 05:17.570
Il existe plusieurs façons de contourner ce problème.

05:17.570 --> 05:19.600
Nous pourrions ajouter un garde de type, nous pourrions

05:19.600 --> 05:23.390
vérifier si typeof validatableInput. est une chaîne de caractères,

05:25.250 --> 05:30.250
et n'effectue cette vérification que si c'est le cas.

05:30.920 --> 05:33.040
Mais en fait, ce serait un peu redondant.

05:33.040 --> 05:36.120
Ce que nous pouvons faire ici est très simple.

05:36.120 --> 05:37.257
Nous pouvons simplement dire "bien,

05:37.257 --> 05:39.140
convertissez-le en chaîne de caractères". Si c'était un nombre, c'est à nouveau une chaîne.

05:39.140 --> 05:41.370
Si c'était une chaîne, rien ne changeait.

05:41.370 --> 05:44.170
Et avec ça, on fait ça.

05:44.170 --> 05:45.900
Maintenant, je dois juste ajouter mon

05:45.900 --> 05:47.950
contrôle ici pour vérifier si c'est zéro.

05:47.950 --> 05:50.360
Ou pour être précis, si elle n'est pas nulle.

05:50.360 --> 05:53.463
Donc, s'il n'est pas égal à zéro, il

05:54.680 --> 05:56.810
retournera vrai, et isValid

05:56.810 --> 05:58.740
restera vrai.

05:58.740 --> 06:00.500
Si elle est nulle, donc si elle est de

06:00.500 --> 06:02.760
longueur zéro, si elle est vide, elle renverra

06:02.760 --> 06:04.940
false et donc isValid deviendra false.

06:04.940 --> 06:06.890
Et nous ne le vérifions que si la vérification

06:06.890 --> 06:08.280
requise est signalée par

06:08.280 --> 06:11.190
le paramètre required à true.

06:11.190 --> 06:13.530
C'est le premier contrôle que je veux effectuer ici.

06:13.530 --> 06:15.560
Ce n'est pas le seul, bien sûr.

06:15.560 --> 06:17.660
Nous pouvons continuer et vérifier si

06:17.660 --> 06:18.950
validatableInput. minLength est défini, si

06:18.950 --> 06:23.880
minLength est défini, alors la chaîne que nous

06:23.880 --> 06:25.190
obtenons doit avoir une

06:25.190 --> 06:27.050
certaine longueur minimale.

06:27.050 --> 06:28.780
Important, la chaîne doit avoir une

06:28.780 --> 06:30.440
certaine longueur minimale.

06:30.440 --> 06:31.620
Nous ne nous soucions pas des nombres

06:31.620 --> 06:33.600
ici, nous ne vérifions pas la valeur minimale d'un nombre.

06:33.600 --> 06:37.060
Nous pouvons donc ajouter une protection de type, l'incorporer

06:37.060 --> 06:42.320
à cette vérification et vérifier si typeof validatableInput.

06:42.320 --> 06:42.320
est

06:42.320 --> 06:46.910
égal à la chaîne de caractères.

06:46.910 --> 06:48.460
Si ce n'est pas le cas, nous n'avons pas besoin d'effectuer

06:48.460 --> 06:50.357
ce contrôle parce qu'il n'y a alors rien à vérifier.

06:50.357 --> 06:52.570
Si notre valeur est un nombre, nous ne nous en soucions pas.

06:52.570 --> 06:55.330
Si nous définissons une longueur minimale pour un nombre,

06:55.330 --> 06:57.710
nous sautons cette vérification car elle n'a

06:57.710 --> 06:59.330
pas beaucoup de sens.

06:59.330 --> 07:01.890
Si nous avons une chaîne de caractères, et

07:01.890 --> 07:03.420
que minLength est défini,

07:03.420 --> 07:05.663
alors je veux que isValid soit égal à

07:06.570 --> 07:10.053
isValid et, et encore une fois, notre vérification.

07:11.181 --> 07:12.600
Et la vérification

07:12.600 --> 07:16.580
ici est de savoir si validatableInput. La valeur, que nous savons être une chaîne de caractères

07:16.580 --> 07:20.810
à ce stade, la longueur, est

07:20.810 --> 07:24.070
supérieure à validatableInput. minLength.

07:24.070 --> 07:28.520
Donc plus grande que la valeur qui a été définie ici.

07:28.520 --> 07:31.660
Maintenant, nous avons un problème potentiel

07:31.660 --> 07:33.920
ici, et vous voyez lequel ?

07:33.920 --> 07:36.163
Cela devrait généralement fonctionner, mais cela échouera

07:37.030 --> 07:38.630
si minLength est fixé à zéro.

07:38.630 --> 07:42.210
L'intention du développeur de le mettre à zéro n'est

07:42.210 --> 07:45.760
probablement pas de sauter cette vérification, mais

07:45.760 --> 07:48.760
de vérifier si nous avons bien la longueur minimale

07:48.760 --> 07:50.170
de zéro.

07:50.170 --> 07:51.960
On peut dire qu'il s'agit d'un contrôle redondant,

07:51.960 --> 07:53.800
car il s'agit essentiellement de vérifier si

07:53.800 --> 07:55.850
nous avons quelque chose, ce que nous faisons déjà

07:55.850 --> 07:57.260
avec le contrôle requis.

07:57.260 --> 07:59.300
Ce n'est donc pas un gros problème.

07:59.300 --> 08:01.330
Cependant, si vous voulez être super

08:01.330 --> 08:05.470
sécurisé ici, nous devrions vérifier si validatableInput.

08:05.470 --> 08:05.470
minLength n'est pas égal à undefined.

08:05.470 --> 08:10.470
Ou pas égal à null, avec un signe

08:10.640 --> 08:14.910
égal, cela inclut null et undefined, c'est ainsi que

08:14.910 --> 08:17.130
JavaScript fonctionne.

08:17.130 --> 08:18.890
C'est un peu plus sûr, car nous nous assurons

08:18.890 --> 08:20.470
maintenant de toujours exécuter

08:20.470 --> 08:23.010
cette vérification, même si minLength est fixé à zéro,

08:23.010 --> 08:25.140
ce qui est une valeur erronée.

08:25.140 --> 08:27.222
Encore une fois, on peut se demander si cela a un

08:27.222 --> 08:29.740
sens, parce que c'est essentiellement le même contrôle

08:29.740 --> 08:32.270
que là-haut, mais quand même, ici je veux le faire.

08:32.270 --> 08:34.930
C'est donc la longueur minimale.

08:34.930 --> 08:36.790
Maintenant je vais copier ça, et faire la

08:36.790 --> 08:38.130
même chose pour maxLength.

08:38.130 --> 08:40.720
Ainsi, la longueur maximale est également vérifiée

08:40.720 --> 08:44.350
ici, ainsi qu'ici et uniquement pour les chaînes de caractères.

08:44.350 --> 08:46.870
Et bien sûr, ici, nous devons juste revenir en arrière.

08:46.870 --> 08:49.280
Nous voulons nous assurer que la longueur de la valeur

08:49.280 --> 08:52.380
qui est fournie est inférieure à notre longueur maximale.

08:52.380 --> 08:55.173
Bien, et maintenant il nous reste deux vérifications supplémentaires

08:56.810 --> 08:58.760
pour les valeurs min et max qui n'ont de sens

08:58.760 --> 09:00.160
que pour un nombre.

09:00.160 --> 09:03.310
Donc ici, je vais ajouter une autre vérification et vérifier

09:03.310 --> 09:05.150
si validatableInput. min n'est pas égal

09:05.150 --> 09:08.280
à null.

09:09.720 --> 09:11.100
Encore une fois, je ne vérifie pas seulement la

09:11.100 --> 09:13.820
véracité des informations, car cela poserait des problèmes avec une valeur de zéro.

09:13.820 --> 09:17.050
Et puis je vais vérifier si le type de validatableInput. est égal à un

09:17.050 --> 09:21.770
nombre.

09:21.770 --> 09:23.250
Parce que je ne vois pas trop l'intérêt

09:23.250 --> 09:25.640
de vérifier cela pour une chaîne de caractères.

09:25.640 --> 09:26.760
Si vous voulez vérifier s'il s'agit d'une chaîne

09:26.760 --> 09:28.020
de caractères, vous pouvez bien sûr l'omettre.

09:28.020 --> 09:29.680
Il vous suffit ensuite de vous assurer que vous

09:29.680 --> 09:32.120
convertissez la valeur en un nombre lorsque vous l'utilisez dans

09:32.120 --> 09:34.380
le contrôle que nous sommes sur le point d'écrire.

09:34.380 --> 09:35.970
La vérification que nous nous apprêtons à écrire,

09:35.970 --> 09:37.220
encore une fois, utilise l'ancienne

09:37.220 --> 09:39.740
valeur de isValid et la combine avec une nouvelle vérification pour ensuite

09:39.740 --> 09:41.500
la stocker à nouveau dans isValid.

09:41.500 --> 09:44.000
Et la nouvelle vérification devrait maintenant

09:44.000 --> 09:47.210
bien intégrer notre nombre et vérifier s'il est supérieur

09:47.210 --> 09:48.730
à la valeur minimale.

09:48.730 --> 09:54.650
Donc ici, je vérifie si validatableInput. est supérieure à validatableInput.

09:54.650 --> 09:54.650
min.

09:54.650 --> 09:58.690
Et maintenant nous pouvons répéter ceci

09:58.690 --> 10:02.010
pour max, donc ici nous avons besoin de max et ici nous avons aussi

10:02.010 --> 10:06.190
besoin de max et nous devons changer ceci ici en un symbole plus petit que.

10:06.190 --> 10:10.363
Avec ça, nous vérifions tous les différents scénarios que vous pourriez

10:11.920 --> 10:13.230
avoir ici.

10:13.230 --> 10:16.930
Et on renvoie isValid.

10:16.930 --> 10:18.710
Il ne nous reste plus qu'à créer des objets

10:19.840 --> 10:21.600
qui adhèrent à cette interface pour ensuite

10:21.600 --> 10:23.630
les envoyer à la fonction de validation.

10:23.630 --> 10:26.573
Pour cela, descendons dans le projet input,

10:28.160 --> 10:31.360
et là dans gatherUserInput je veux construire

10:31.360 --> 10:34.000
mon objet validable.

10:34.000 --> 10:36.360
Remarque : en plus d'une interface, nous aurions

10:36.360 --> 10:38.420
pu créer une classe ici, puis l'instancier

10:38.420 --> 10:40.870
avec le mot-clé new, mais pour des raisons pratiques

10:40.870 --> 10:43.570
et de démonstration, je veux montrer comment cela fonctionne

10:43.570 --> 10:46.070
avec une interface.

10:46.070 --> 10:48.990
Nous avons donc ici notre titleValidatable,

10:48.990 --> 10:51.900
qui doit être de type Validatable.

10:52.850 --> 10:54.970
Et il s'agit bien sûr d'un objet qui doit

10:54.970 --> 10:56.830
avoir une propriété de valeur.

10:56.830 --> 10:58.930
Et c'est notre enteredTitle.

10:58.930 --> 11:01.020
Il n'a pas besoin d'autres propriétés

11:01.020 --> 11:03.550
mais je veux vérifier s'il n'est pas vide,

11:03.550 --> 11:06.750
donc nous allons mettre required à true.

11:06.750 --> 11:08.743
Et ensuite, nous pouvons copier et répéter

11:09.710 --> 11:12.430
cela pour la description et pour les personnes.

11:12.430 --> 11:16.270
Et ici nous avons la description, oups, la description

11:16.270 --> 11:19.250
saisie je veux dire.

11:19.250 --> 11:21.880
Ici, nous avons les gens entrés.

11:21.880 --> 11:24.260
Pour être précis, je veux avoir un numéro.

11:24.260 --> 11:26.230
Je le convertis donc en un nombre avec un symbole plus.

11:26.230 --> 11:29.020
Tout doit être obligatoire, mais disons aussi que la

11:29.020 --> 11:30.810
description doit avoir une longueur

11:30.810 --> 11:32.890
minimale de cinq caractères et que pour

11:32.890 --> 11:35.420
les personnes, le minimum doit être de un, de sorte

11:35.420 --> 11:38.823
que nous ayons au moins deux personnes affectées.

11:39.820 --> 11:42.030
D'ailleurs, c'est vous qui décidez de la manière dont vous mettez en œuvre ce système.

11:42.030 --> 11:44.020
Bien sûr, dans votre logique de validation,

11:44.020 --> 11:47.200
vous pouvez également vérifier si le plus grand est égal

11:47.200 --> 11:50.080
au plus petit si vous le souhaitez.

11:50.080 --> 11:52.030
Idem pour la durée du cours.

11:52.030 --> 11:54.200
Plus grand égal, plus petit égal.

11:54.200 --> 11:56.940
C'est également possible.

11:56.940 --> 11:58.660
En fait, je vais garder ces changements.

11:58.660 --> 12:00.520
Nous avons donc maintenant un minimum d'une personne

12:00.520 --> 12:01.920
affectée et un maximum de cinq.

12:01.920 --> 12:05.253
Nous avons maintenant ces trois objets validables

12:06.100 --> 12:08.500
et maintenant ici, à la fonction de validation,

12:08.500 --> 12:11.680
nous passons notre titleValidatable, au deuxième

12:11.680 --> 12:16.440
appel de fonction je passe la descriptionValidatable, et au troisième

12:16.440 --> 12:21.310
appel de fonction je passe peopleValidatable.

12:21.310 --> 12:24.460
Et maintenant, validate devrait renvoyer true si elles sont

12:24.460 --> 12:26.380
toutes valides, et false sinon.

12:26.380 --> 12:29.480
Je veux maintenant vérifier si au moins l'une

12:29.480 --> 12:32.420
d'entre elles échoue en vérifiant si elles

12:32.420 --> 12:36.580
sont toutes fausses en ajoutant un point d'exclamation devant,

12:36.580 --> 12:38.970
pour vérifier si ceci est faux ou ceci

12:38.970 --> 12:41.560
est faux ou ceci est faux.

12:41.560 --> 12:42.740
Et si au moins l'un d'entre eux

12:42.740 --> 12:44.750
est faux, donc si au moins l'un des appels de la fonction

12:44.750 --> 12:45.730
de validation renvoie faux,

12:45.730 --> 12:47.760
nous le ferons là et montrerons l'alerte.

12:47.760 --> 12:49.860
Et ceci étant dit, pour tester

12:51.930 --> 12:53.610
cela, je vais aller à

12:53.610 --> 12:54.860
l'index. html, parce qu'à l'entrée

12:54.860 --> 12:56.270
des personnes,

12:56.270 --> 12:58.210
j'autorise en fait un maximum de

12:58.210 --> 13:00.410
10 et un minimum de zéro.

13:00.410 --> 13:01.460
Ainsi, dans la saisie, nous pouvons techniquement entrer des valeurs invalides.

13:01.460 --> 13:05.120
Délibérément, bien sûr, pour que nous puissions tester

13:05.120 --> 13:06.240
notre logique.

13:06.240 --> 13:08.090
Et voilà pour l'instant, sauvegardons

13:08.090 --> 13:10.200
tout ça, ça compile sans erreurs.

13:10.200 --> 13:11.750
Faisons maintenant un essai.

13:11.750 --> 13:13.083
Si je clique sur ajouter un projet,

13:13.920 --> 13:16.000
j'obtiens une erreur, ce qui est bien.

13:16.000 --> 13:17.430
Maintenant entrons le test ici, j'ai toujours une erreur.

13:17.430 --> 13:21.370
Entrons test ici et cinq ici, et j'ai

13:21.370 --> 13:24.180
toujours une erreur.

13:24.180 --> 13:25.390
Parce que ma description est trop courte.

13:25.390 --> 13:26.870
Si je saisis un caractère supplémentaire,

13:26.870 --> 13:28.160
j'ai la longueur minimale et

13:28.160 --> 13:29.500
je peux créer ceci.

13:29.500 --> 13:31.210
Alors maintenant, entrons, disons,

13:31.210 --> 13:32.640
moins une personne, et bien

13:32.640 --> 13:34.580
ok html ne supporte pas cela.

13:34.580 --> 13:37.940
Mais entrons zéro ou six et nous obtenons

13:37.940 --> 13:39.200
des erreurs.

13:39.200 --> 13:42.040
Et ce n'est que si j'entre quelque chose entre un

13:42.040 --> 13:43.840
et cinq que cela fonctionne.

13:43.840 --> 13:46.100
Donc ça semble fonctionner

13:46.100 --> 13:49.260
comme il se doit, et c'est plutôt bien.

13:49.260 --> 13:50.240
Et ce n'est bien sûr qu'une façon

13:50.240 --> 13:51.850
parmi d'autres de mettre en œuvre la validation.

13:51.850 --> 13:53.570
Mais un moyen qui est maintenant assez

13:53.570 --> 13:56.510
réutilisable, pourrait être utilisé comme ça dans différentes

13:56.510 --> 13:59.170
parties de l'application et, bien sûr, il tire parti de Typescript

13:59.170 --> 14:01.660
et nous offre un grand soutien et une vérification de

14:01.660 --> 14:04.480
type pour éviter les erreurs inutiles.
