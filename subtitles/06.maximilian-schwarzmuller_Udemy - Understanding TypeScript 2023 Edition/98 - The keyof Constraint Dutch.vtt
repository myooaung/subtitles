WEBVTT

00:02.230 --> 00:03.280
Instructeur: Dus we hebben

00:03.280 --> 00:04.930
de basis over generieken hopelijk onder

00:04.930 --> 00:07.150
de knie, laten we nu wat dieper duiken in beperkingen,

00:07.150 --> 00:09.250
of in één specifiek type beperking, die je kunt

00:09.250 --> 00:10.400
toevoegen.

00:10.400 --> 00:12.680
Daarvoor ruil ik nog een functie, een

00:12.680 --> 00:16.293
generieke functie, die ik extractAndConvert zal noemen.

00:18.700 --> 00:21.550
Het idee van deze functie hier is dat we een

00:21.550 --> 00:24.120
object krijgen als eerste argument,

00:24.120 --> 00:26.340
en de tweede parameter is uiteindelijk

00:26.340 --> 00:28.413
een sleutel.

00:30.050 --> 00:32.570
Nu wil ik de waarde voor die sleutel in het object teruggeven,

00:32.570 --> 00:35.310
wat we kunnen doen met deze standaard JavaScript-notatie.

00:35.310 --> 00:36.310
De vierkante haakjes

00:36.310 --> 00:38.200
gebruiken als een eigenschap in een object,

00:38.200 --> 00:39.840
maar dat is niets TypeScript specifieks,

00:39.840 --> 00:42.010
dat is weer Vanilla JavaScript.

00:42.010 --> 00:43.000
Nu zouden we dus kunnen

00:43.000 --> 00:44.580
zeggen dat we hier een object

00:44.580 --> 00:48.460
willen hebben, en voor de sleutel een string, laten we zeggen.

00:48.460 --> 00:50.160
Nu krijg ik hier echter een

00:50.160 --> 00:52.000
fout, want wat we hier uiteindelijk

00:52.000 --> 00:54.500
niet weten, is of het object dat we hier

00:54.500 --> 00:57.510
krijgen echt die sleutel zal hebben.

00:57.510 --> 00:59.410
Dat is het einde wat TypeScript ons vertelt

00:59.410 --> 01:01.430
met deze vreemde foutmelding.

01:01.430 --> 01:02.530
Hier zou ik bijvoorbeeld

01:02.530 --> 01:05.700
het resultaat kunnen loggen van het aanroepen van

01:05.700 --> 01:09.770
dit met laten we zeggen een leeg object en dan de naam.

01:09.770 --> 01:12.600
En hier noem ik trouwens extractAndConvert,

01:12.600 --> 01:16.025
omdat ik dit wil aanroepen zonder console log en gewoon

01:16.025 --> 01:18.600
Value, colon, plus wil zeggen.

01:18.600 --> 01:19.660
Maar dat is slechts een kanttekening

01:19.660 --> 01:22.450
die ik uiteindelijk met die opgehaalde gegevens teruggeef.

01:22.450 --> 01:23.840
Maar het grootste probleem hier is,

01:23.840 --> 01:25.160
dat ik het zo zou kunnen aanroepen

01:26.091 --> 01:28.020
en het zou een object als eerste parameter doorgeven,

01:28.020 --> 01:29.890
en dan een string als tweede.

01:29.890 --> 01:31.430
Maar juist, TypeScript vertelt me

01:31.430 --> 01:33.200
dat het uiteindelijk niet gegarandeerd

01:33.200 --> 01:35.193
is dat deze sleutel bestaat in dit object.

01:36.420 --> 01:39.920
Om dit te garanderen kunnen we ook hier generieke types gebruiken.

01:39.920 --> 01:41.620
We kunnen zeggen dat we een type T hebben,

01:41.620 --> 01:43.130
en dat wordt ons object hier.

01:43.130 --> 01:46.550
We kunnen zeggen, breidt object uit.

01:46.550 --> 01:48.363
Maar we moeten ook U typen.

01:49.440 --> 01:52.850
Onze sleutel hier laten we zeggen, die uiteindelijk

01:52.850 --> 01:56.320
toch een sleutel van ons T-type moet zijn.

01:56.320 --> 01:58.210
Dus van dit object willen we garanderen

01:58.210 --> 02:01.560
dat wat we hier als tweede parameter als sleutel krijgen,

02:01.560 --> 02:04.890
een eigenschap is van dat eerste type.

02:04.890 --> 02:09.130
En daarvoor kunnen we zeggen verlengt de sleutel van T.

02:11.550 --> 02:13.540
En nu zie je dat de fout hier weg is,

02:13.540 --> 02:15.370
en in plaats daarvan heb ik de fout

02:15.370 --> 02:17.930
daar beneden, omdat ik TypeScript nu vertel

02:17.930 --> 02:21.800
dat de eerste parameter een willekeurig object moet zijn, en de

02:21.800 --> 02:23.610
tweede parameter een willekeurige

02:23.610 --> 02:25.870
sleutel in dat object.

02:25.870 --> 02:28.480
En hier, ja we geven elk soort object door, maar

02:28.480 --> 02:30.430
we hebben geen naamsleutel.

02:30.430 --> 02:34.990
Deze fout gaat alleen weg zodra ik een naamsleutel toevoeg.

02:34.990 --> 02:37.990
Dit zijn dus alle momenten waarop we generieke types kunnen

02:37.990 --> 02:41.800
gebruiken, ook met dit keyoff keyword hier, om TypeScript te vertellen dat

02:41.800 --> 02:45.730
we zeker willen zijn dat we deze correcte structuur hebben, en dat is natuurlijk

02:45.730 --> 02:47.460
heel nuttig, want zo kunnen we ervoor

02:47.460 --> 02:49.120
zorgen dat we geen domme fouten maken,

02:49.120 --> 02:51.160
waarbij we deze functie proberen aan te

02:51.160 --> 02:53.390
roepen, die we uiteindelijk probeerden te

02:53.390 --> 02:56.740
exe als een eigenschap die niet bestaat.

02:56.740 --> 02:58.140
Dus dit werkt.

02:58.140 --> 02:59.870
Maar als ik hier probeer te exe als 'age', krijg

02:59.870 --> 03:01.570
ik weer een foutmelding, bijvoorbeeld.

03:02.890 --> 03:05.560
Laten we dit dus terugschakelen naar 'naam'.
