WEBVTT

1
00:00:02.140 --> 00:00:04.167
<v Instructor>Now besides let and const,</v>

2
00:00:04.167 --> 00:00:06.100
another major feature added

3
00:00:06.100 --> 00:00:10.170
with Next-Gen JavaScript with ES6 specifically

4
00:00:10.170 --> 00:00:12.580
were arrow functions.

5
00:00:12.580 --> 00:00:15.230
Now let's rewrite this add function down here,

6
00:00:15.230 --> 00:00:16.970
and let's not use the function keyword,

7
00:00:16.970 --> 00:00:20.037
but let's instead use this new arrow function syntax.

8
00:00:20.037 --> 00:00:22.730
For that you have to write the function as an expression,

9
00:00:22.730 --> 00:00:24.010
which you store in a variable.

10
00:00:24.010 --> 00:00:26.000
So we could have our add variable.

11
00:00:26.000 --> 00:00:28.720
And that can hold a function with the function keyword,

12
00:00:28.720 --> 00:00:30.450
as you probably know.

13
00:00:30.450 --> 00:00:31.740
But you can now also write a function,

14
00:00:31.740 --> 00:00:35.110
without the function keyword, with your parameter list,

15
00:00:35.110 --> 00:00:37.210
then an arrow, which you construct

16
00:00:37.210 --> 00:00:39.559
by using an equals sign, and a greater than sign,

17
00:00:39.559 --> 00:00:41.700
and then your function body.

18
00:00:41.700 --> 00:00:43.800
And this is a valid function,

19
00:00:43.800 --> 00:00:48.140
so here you can now also assign parameters, and use them,

20
00:00:48.140 --> 00:00:50.910
and, for example, return it like this.

21
00:00:50.910 --> 00:00:54.950
And then if you console log add two and five here like that

22
00:00:54.950 --> 00:00:59.090
and we save everything, we'll see seven in the console here.

23
00:00:59.090 --> 00:01:02.930
So that is something we can do, that's a new syntax,

24
00:01:02.930 --> 00:01:05.850
and one obvious benefit is that it's a bit shorter.

25
00:01:05.850 --> 00:01:07.670
We saved the function keyword.

26
00:01:07.670 --> 00:01:10.900
Another benefit is that it has a couple of nice variations

27
00:01:10.900 --> 00:01:13.270
which make it even more useful.

28
00:01:13.270 --> 00:01:16.751
For example, besides this already very short syntax here,

29
00:01:16.751 --> 00:01:19.865
you could also, if you just have one expression,

30
00:01:19.865 --> 00:01:21.974
omit the curly braces

31
00:01:21.974 --> 00:01:22.940
like this,

32
00:01:22.940 --> 00:01:25.348
and then also remove the return statement

33
00:01:25.348 --> 00:01:27.570
and just write this function like that.

34
00:01:27.570 --> 00:01:29.010
If you only have one expression,

35
00:01:29.010 --> 00:01:31.334
you can omit the curly braces, and the result of that

36
00:01:31.334 --> 00:01:34.410
one expression is then automatically returned.

37
00:01:34.410 --> 00:01:36.920
So there always is an implicit return statement

38
00:01:36.920 --> 00:01:38.540
in front of this.

39
00:01:38.540 --> 00:01:41.670
So now, this is way shorter than the function alternative,

40
00:01:41.670 --> 00:01:42.503
as you can tell.

41
00:01:42.503 --> 00:01:44.060
Now again, this only is available though

42
00:01:44.060 --> 00:01:45.260
if you have one expression.

43
00:01:45.260 --> 00:01:47.210
If you have two expressions or more

44
00:01:47.210 --> 00:01:50.003
in the body of the function, you could not use

45
00:01:50.003 --> 00:01:51.540
this shorter syntax.

46
00:01:51.540 --> 00:01:54.220
You would need a real, normal function body

47
00:01:54.220 --> 00:01:56.003
surrounded with curly braces.

48
00:01:56.950 --> 00:02:00.420
Another nice variation is that if you have a function

49
00:02:00.420 --> 00:02:04.048
that only takes one parameter,

50
00:02:04.048 --> 00:02:05.430
let's say we have

51
00:02:05.430 --> 00:02:08.480
our print output function,

52
00:02:08.480 --> 00:02:10.980
and that takes output,

53
00:02:10.980 --> 00:02:14.450
which is a string or a number, let's say,

54
00:02:14.450 --> 00:02:17.023
using a little unit type here,

55
00:02:17.023 --> 00:02:21.220
and then we console log output here.

56
00:02:21.220 --> 00:02:26.220
Then, we can of course use that to call print output here

57
00:02:26.730 --> 00:02:28.653
and add five and two.

58
00:02:30.110 --> 00:02:31.910
But now of course from one, we can shorten this

59
00:02:31.910 --> 00:02:33.890
by removing the curly braces.

60
00:02:33.890 --> 00:02:36.550
I'm not really interested in the returned value

61
00:02:36.550 --> 00:02:38.930
of console log, but that's also another problem

62
00:02:38.930 --> 00:02:40.570
if we do return it, because, as we learned,

63
00:02:40.570 --> 00:02:42.820
there is an implicit return statement.

64
00:02:42.820 --> 00:02:47.370
But now, since we only have one argument, we can even omit

65
00:02:47.370 --> 00:02:48.930
the parentheses around that argument.

66
00:02:48.930 --> 00:02:51.590
However with that type assignment, it will then not work.

67
00:02:51.590 --> 00:02:53.927
It would work like that, which works in Vanilla JavaScript

68
00:02:53.927 --> 00:02:56.650
but which is not supported in TypeScript because we

69
00:02:56.650 --> 00:02:58.530
omit the type assignment.

70
00:02:58.530 --> 00:03:00.420
But if you would have the type assignment

71
00:03:00.420 --> 00:03:03.270
in a different place, let's say with the function type

72
00:03:03.270 --> 00:03:05.440
assigned to the constant, which also

73
00:03:05.440 --> 00:03:08.020
gives TypeScript information about what will be stored

74
00:03:08.020 --> 00:03:11.350
in a constant, then this would be a syntax we can use.

75
00:03:11.350 --> 00:03:13.480
So, if we have

76
00:03:14.640 --> 00:03:16.720
this setup here

77
00:03:16.720 --> 00:03:19.078
and we give that type information two types

78
00:03:19.078 --> 00:03:20.390
in a different place,

79
00:03:20.390 --> 00:03:23.550
then we could use this more concise syntax.

80
00:03:23.550 --> 00:03:26.050
Now arguably, here we don't save a lot because now

81
00:03:26.050 --> 00:03:29.170
we will have to add that type assignment on our own.

82
00:03:29.170 --> 00:03:31.700
But a case where we would save a lot is, for example,

83
00:03:31.700 --> 00:03:34.240
if you were to reach out to a button,

84
00:03:34.240 --> 00:03:37.460
which we find in the DOM maybe, and please note here

85
00:03:37.460 --> 00:03:39.280
I have no button in DOM, but we can

86
00:03:39.280 --> 00:03:40.843
try to find one nonetheless.

87
00:03:43.270 --> 00:03:45.190
And we then add an event listener.

88
00:03:45.190 --> 00:03:47.700
And now, to make sure the TypeScript does not complete

89
00:03:47.700 --> 00:03:50.360
because button could be null, as it actually is here,

90
00:03:50.360 --> 00:03:52.880
we can wrap this code into an if check as you learned.

91
00:03:52.880 --> 00:03:56.030
And now, add an event listener to a click.

92
00:03:56.030 --> 00:03:58.610
And now here, we want to pass on a function

93
00:03:58.610 --> 00:03:59.750
that should be executed,

94
00:03:59.750 --> 00:04:02.460
well, that can be an anonymous function here.

95
00:04:02.460 --> 00:04:03.430
Just like that,
(static)

96
00:04:03.430 --> 00:04:06.120
and that shows us how great arrow functions are.

97
00:04:06.120 --> 00:04:08.150
That's really not a lot of code.

98
00:04:08.150 --> 00:04:09.350
And, in here

99
00:04:10.520 --> 00:04:11.990
we get the event object

100
00:04:13.550 --> 00:04:17.062
which we now could console log like this.

101
00:04:17.062 --> 00:04:19.050
Now here we don't need to specify

102
00:04:19.050 --> 00:04:21.890
any function type anywhere because TypeScript knows

103
00:04:21.890 --> 00:04:24.347
what add event listener will provide to us,

104
00:04:24.347 --> 00:04:26.460
that this will be an event object,

105
00:04:26.460 --> 00:04:28.980
so indeed TypeScript is able to infer this,

106
00:04:28.980 --> 00:04:30.970
even the correct event object

107
00:04:30.970 --> 00:04:32.880
based on the event we're listening to.

108
00:04:32.880 --> 00:04:35.653
And hence here, we can re-take advantage

109
00:04:35.653 --> 00:04:38.310
of this very short and concise syntax.

110
00:04:38.310 --> 00:04:40.710
So these are some of the variations of arrow functions

111
00:04:40.710 --> 00:04:42.334
and of course, I've already used arrow functions

112
00:04:42.334 --> 00:04:43.960
thus far in the course.

113
00:04:43.960 --> 00:04:45.660
Just wanted to make it really clear again

114
00:04:45.660 --> 00:04:48.400
what they are, and what we can do with them.

