WEBVTT

00:02.450 --> 00:04.900
Instruktur: Sekarang apa yang Anda lakukan jika Anda

00:04.900 --> 00:07.090
memiliki perpustakaan di mana Anda tidak dapat

00:07.090 --> 00:10.470
menginstal tipe seperti yang kita lakukan untuk Lodash, misalnya?

00:10.470 --> 00:14.440
Untuk Lodash, untungnya kami memiliki paket tipe seperti itu, dan seperti

00:14.440 --> 00:15.880
yang saya sebutkan, untuk

00:15.880 --> 00:18.870
sebagian besar library pihak ketiga, Anda memilikinya,

00:18.870 --> 00:21.210
tetapi belum tentu untuk semua.

00:21.210 --> 00:25.320
Atau, bagaimana jika Anda memiliki beberapa kode JavaScript lainnya, katakanlah

00:25.320 --> 00:27.320
di indeks Anda. html, Anda memiliki

00:27.320 --> 00:29.800
beberapa kode skrip lain, yang mengeksekusi

00:29.800 --> 00:34.800
tatapan, di mana Anda mengatur beberapa variabel global.

00:35.350 --> 00:38.450
GLOBAL = 'INI SUDAH DIATUR' Sesuatu seperti ini

00:38.450 --> 00:40.770
di mana Anda pada akhirnya tahu ini

00:40.770 --> 00:43.180
akan tersedia secara global.

00:43.180 --> 00:46.240
Seperti yang Anda ketahui, variabel yang ditambahkan seperti

00:46.240 --> 00:48.600
ini akan ditambahkan ke objek jendela global,

00:48.600 --> 00:50.210
dan Anda ingin memanfaatkannya

00:50.210 --> 00:52.670
dari dalam kode TypeScript Anda.

00:52.670 --> 00:53.503
Misalnya, di

00:53.503 --> 00:57.770
sini jika saya ingin konsol. log(GLOBAL) seperti ini, saya

00:57.770 --> 00:59.990
mendapatkan error di IDE saya.

00:59.990 --> 01:04.299
Dan jika saya menjalankan tsc -w untuk memulai kompilasi, saya juga

01:04.299 --> 01:06.340
mendapatkan error di sini.

01:06.340 --> 01:09.470
Jadi, tidak seperti hal global itu, meskipun

01:09.470 --> 01:11.530
kita tahu bahwa itu akan berhasil

01:11.530 --> 01:15.630
karena indeks kita. html mendefinisikan variabel global ini.

01:15.630 --> 01:18.010
Dan, karena kita memiliki defer pada skrip

01:18.010 --> 01:19.493
ini, skrip ini akan dieksekusi

01:19.493 --> 01:22.170
setelah skrip ini di bawah sana.

01:22.170 --> 01:23.780
Dalam kasus seperti itu, Anda memiliki

01:23.780 --> 01:26.460
sintaks lain yang tersedia di TypeScript, dan itu adalah

01:26.460 --> 01:29.460
perintah declare yang dapat Anda gunakan.

01:29.460 --> 01:32.110
Anda dapat mendeklarasikan variabel-variabel tertentu,

01:32.110 --> 01:34.150
misalnya, untuk TypeScript.

01:34.150 --> 01:36.730
Anda dapat mengatakan declare var GLOBAL dan memberitahu

01:36.730 --> 01:38.640
TypeScript bahwa, misalnya, ini akan

01:38.640 --> 01:42.050
menjadi string, atau bahwa ini adalah apa saja.

01:42.050 --> 01:43.687
Ini pada dasarnya memberi tahu

01:43.687 --> 01:45.910
TypeScript, "Jangan khawatir, ini akan

01:45.910 --> 01:47.823
ada," dan jika kita menyimpan ini,

01:49.090 --> 01:52.580
dan saya keluar dari compiler ini dan menggunakan webpack sebagai

01:52.580 --> 01:55.740
gantinya, kita melihat output ini di halaman kita, karena

01:55.740 --> 01:57.650
secara teknis berfungsi, dan dengan

01:57.650 --> 01:59.060
mendeklarasikan var, kita

01:59.060 --> 02:02.270
juga memberi tahu TypeScript bahwa ini ada.

02:02.270 --> 02:04.420
Sekarang saya akan menghapus dmidecode

02:04.420 --> 02:06.770
ini di sini, tetapi menyadari declare, kata

02:06.770 --> 02:08.830
kunci ini, perintah ini penting.

02:08.830 --> 02:12.160
Ini memungkinkan Anda untuk mendeklarasikan fitur atau variabel TypeScript

02:12.160 --> 02:14.590
di mana Anda tahu bahwa mereka ada atau membiarkan TypeScript

02:14.590 --> 02:17.210
tahu tentang paket, variabel global secara umum, yang

02:17.210 --> 02:20.150
tidak dapat diketahui oleh Typescript, tetapi Anda sebagai pengembang

02:20.150 --> 02:23.373
tahu bahwa mereka akan ada di sana.
