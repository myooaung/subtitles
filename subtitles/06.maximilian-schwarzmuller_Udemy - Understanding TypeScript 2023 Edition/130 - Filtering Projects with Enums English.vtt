WEBVTT

1
00:00:02.310 --> 00:00:03.940
<v Man>So we get two issues,</v>

2
00:00:03.940 --> 00:00:06.500
if we want to call them like that, to fix.

3
00:00:06.500 --> 00:00:07.820
Now I want to start

4
00:00:07.820 --> 00:00:10.960
with the issue that projects show up in both boxes.

5
00:00:10.960 --> 00:00:13.050
I want to introduce some filtering

6
00:00:13.050 --> 00:00:15.980
and the best place to filter is,

7
00:00:15.980 --> 00:00:18.930
of course, our listener function.

8
00:00:18.930 --> 00:00:22.743
If we go to the place where we register our listener,

9
00:00:26.000 --> 00:00:29.170
here in the project list clause.

10
00:00:29.170 --> 00:00:32.270
Then, here, we get a- a list of projects, right?

11
00:00:32.270 --> 00:00:36.170
Now, that list of projects comprises all projects.

12
00:00:36.170 --> 00:00:39.400
Now, inside of the project list clause however,

13
00:00:39.400 --> 00:00:43.140
we're only interested in active or finished projects.

14
00:00:43.140 --> 00:00:44.250
Now, here, by the way,

15
00:00:44.250 --> 00:00:49.103
we could also theoretically use our enum but, actually,

16
00:00:50.660 --> 00:00:53.160
I need the concrete values stored

17
00:00:53.160 --> 00:00:56.440
in the enum down there or in the type down there

18
00:00:56.440 --> 00:00:57.880
and, therefore, here I don't want

19
00:00:57.880 --> 00:00:58.990
to use a enum always

20
00:00:58.990 --> 00:01:02.180
because I want to show the string literal types.

21
00:01:02.180 --> 00:01:06.190
So, what we'll do here inside of our listener function is,

22
00:01:06.190 --> 00:01:08.690
before we store the projects and render them,

23
00:01:08.690 --> 00:01:10.470
we want to filter them.

24
00:01:10.470 --> 00:01:13.020
So, here we have our relevant projects,

25
00:01:13.020 --> 00:01:16.660
you could say, and that's, of course, projects filtered.

26
00:01:16.660 --> 00:01:19.070
The filter method is a default method which exists

27
00:01:19.070 --> 00:01:21.460
on any array in JavaScript.

28
00:01:21.460 --> 00:01:23.690
This takes a function which then executes

29
00:01:23.690 --> 00:01:26.820
on every item in that projects array

30
00:01:26.820 --> 00:01:29.660
and when this function here returns true,

31
00:01:29.660 --> 00:01:30.940
we keep the item

32
00:01:30.940 --> 00:01:33.530
in a newly created array which is then stored

33
00:01:33.530 --> 00:01:35.040
in relevant projects.

34
00:01:35.040 --> 00:01:38.130
If this function returns false, we drop the item,

35
00:01:38.130 --> 00:01:39.770
not from the original list,

36
00:01:39.770 --> 00:01:41.660
but in the new list which is generated

37
00:01:41.660 --> 00:01:44.230
and which is stored in relevant projects.

38
00:01:44.230 --> 00:01:46.600
So, in here, we have to return true or false depending

39
00:01:46.600 --> 00:01:48.810
on whether we want to keep the project or not.

40
00:01:48.810 --> 00:01:52.430
And for that, of course, we just need to look at the status.

41
00:01:52.430 --> 00:01:55.310
Project status is a enum and we want

42
00:01:55.310 --> 00:01:59.070
to check whether project status is equal

43
00:01:59.070 --> 00:02:03.590
to project status active if we're

44
00:02:03.590 --> 00:02:05.790
in an active project list,

45
00:02:05.790 --> 00:02:07.940
so if the type property is active,

46
00:02:07.940 --> 00:02:10.640
or if the project status is finished if we're

47
00:02:10.640 --> 00:02:12.270
in a finished list.

48
00:02:12.270 --> 00:02:15.430
So here I'll actually write a- a real function body

49
00:02:15.430 --> 00:02:17.250
by wrapping this with curly braces,

50
00:02:17.250 --> 00:02:19.110
not using the arrow function shortcut

51
00:02:19.110 --> 00:02:20.100
and then we can check,

52
00:02:20.100 --> 00:02:23.480
if this type is equal active,

53
00:02:23.480 --> 00:02:25.540
then I want to return

54
00:02:26.800 --> 00:02:31.480
the result of this check here else

55
00:02:31.480 --> 00:02:34.130
and therefore, simply after this if statement,

56
00:02:34.130 --> 00:02:37.150
I want to return the comparison

57
00:02:37.150 --> 00:02:40.160
to the finished project status.

58
00:02:40.160 --> 00:02:42.220
With that, we get our relevant projects

59
00:02:42.220 --> 00:02:43.520
which we can now store here,

60
00:02:43.520 --> 00:02:45.490
in assigned projects.

61
00:02:45.490 --> 00:02:47.070
So, let's now see whether it works.

62
00:02:47.070 --> 00:02:48.053
If I reload,

63
00:02:49.310 --> 00:02:51.570
and we add a project here,

64
00:02:51.570 --> 00:02:52.743
does this work?

65
00:02:54.950 --> 00:02:55.930
This works and, you see,

66
00:02:55.930 --> 00:02:58.050
it only is added to active projects,

67
00:02:58.050 --> 00:03:00.020
not to finished projects.

68
00:03:00.020 --> 00:03:02.390
However, if I add a second project here,

69
00:03:02.390 --> 00:03:04.740
we still have that duplication going on.

70
00:03:04.740 --> 00:03:08.720
Now, that's related to how we render our projects.

71
00:03:08.720 --> 00:03:10.520
Inside of render projects,

72
00:03:10.520 --> 00:03:13.430
we always go through all our project items

73
00:03:13.430 --> 00:03:15.090
and append them to the list.

74
00:03:15.090 --> 00:03:16.640
Now, the problem with that, of course,

75
00:03:16.640 --> 00:03:19.900
is that we already might have a project item rendered

76
00:03:19.900 --> 00:03:21.950
out onto the screen.

77
00:03:21.950 --> 00:03:25.020
Now, the best possible solution here would be

78
00:03:25.020 --> 00:03:27.450
to kind of run some comparison

79
00:03:27.450 --> 00:03:30.170
where you check what has already been rendered

80
00:03:30.170 --> 00:03:31.730
and what you need to render,

81
00:03:31.730 --> 00:03:34.110
to avoid unnecessary re rendering.

82
00:03:34.110 --> 00:03:35.760
However, running this comparison

83
00:03:35.760 --> 00:03:38.440
by looking at the real DOM also costs quite a bit

84
00:03:38.440 --> 00:03:39.710
of performance.

85
00:03:39.710 --> 00:03:43.100
For this application here, it's therefore perfectly fine

86
00:03:43.100 --> 00:03:45.250
to simply take our list element

87
00:03:45.250 --> 00:03:48.720
and clear all its content by setting inner HTML

88
00:03:48.720 --> 00:03:49.640
to an empty string,

89
00:03:49.640 --> 00:03:52.460
which means we get rid of all list items

90
00:03:52.460 --> 00:03:53.710
and then re render.

91
00:03:53.710 --> 00:03:56.350
That means that whenever we add a new project,

92
00:03:56.350 --> 00:03:58.470
we re render all projects but,

93
00:03:58.470 --> 00:04:00.210
for the purpose of this project here,

94
00:04:00.210 --> 00:04:01.670
for this application here,

95
00:04:01.670 --> 00:04:03.490
that is absolutely fine.

96
00:04:03.490 --> 00:04:05.410
So, now with that, if we save that,

97
00:04:05.410 --> 00:04:06.987
let's give it another try.

98
00:04:06.987 --> 00:04:10.540
"Does this work?" is the first project

99
00:04:10.540 --> 00:04:12.960
and now if I add another project here,

100
00:04:12.960 --> 00:04:14.530
you see, it gets added

101
00:04:14.530 --> 00:04:17.453
but the other project doesn't get added again.

102
00:04:18.430 --> 00:04:21.870
Whoops and, now, here I got (mumbles) error

103
00:04:21.870 --> 00:04:23.540
because the description wasn't long enough.

104
00:04:23.540 --> 00:04:26.230
So, this now all works, as you can tell

105
00:04:26.230 --> 00:04:28.150
and we're rendering these projects

106
00:04:28.150 --> 00:04:30.090
in the way they should be rendered

107
00:04:30.090 --> 00:04:32.170
which, of course, is right.

108
00:04:32.170 --> 00:04:35.050
And, with that, the application doesn't look too bad.

109
00:04:35.050 --> 00:04:36.890
The one thing that's missing is some drag

110
00:04:36.890 --> 00:04:39.550
and drop functionality or some way

111
00:04:39.550 --> 00:04:44.040
of getting projects from this first list to the second list.

112
00:04:44.040 --> 00:04:45.180
We're also not really outputting the

113
00:04:45.180 --> 00:04:46.930
other information we got,

114
00:04:46.930 --> 00:04:48.900
description and number of people.

115
00:04:48.900 --> 00:04:50.750
So, that's also not great.

116
00:04:50.750 --> 00:04:54.980
And, we also have a bit of code duplication

117
00:04:54.980 --> 00:04:57.620
when we actually have a look at project list

118
00:04:57.620 --> 00:04:58.910
at this clause here

119
00:04:58.910 --> 00:05:01.000
and at the project input clause.

120
00:05:01.000 --> 00:05:04.270
In both we have template element, host element and element

121
00:05:04.270 --> 00:05:06.970
and we have an attach method and so on.

122
00:05:06.970 --> 00:05:09.180
So, I want to improve the code here

123
00:05:09.180 --> 00:05:11.800
and reuse some code by using inheritance

124
00:05:11.800 --> 00:05:14.480
and using a base clause and, thereafter,

125
00:05:14.480 --> 00:05:16.850
I also want to create a dedicated clause

126
00:05:16.850 --> 00:05:18.580
for every project item

127
00:05:18.580 --> 00:05:20.340
where we then just instantiate

128
00:05:20.340 --> 00:05:22.200
that project item clause inside

129
00:05:22.200 --> 00:05:23.725
of project list instead

130
00:05:23.725 --> 00:05:27.050
of appending a list item manually, like this

131
00:05:27.050 --> 00:05:30.700
and then inside that 'to be created' project item clause,

132
00:05:30.700 --> 00:05:33.600
that appending part should happen

133
00:05:33.600 --> 00:05:34.540
and then I also want

134
00:05:34.540 --> 00:05:37.150
to output more information about the project item,

135
00:05:37.150 --> 00:05:38.440
including its description

136
00:05:38.440 --> 00:05:40.540
and the number of people assigned.

137
00:05:40.540 --> 00:05:42.080
So, there is some work left to do

138
00:05:42.080 --> 00:05:44.520
and, before we work on the project item

139
00:05:44.520 --> 00:05:47.120
in that form in which I want to have it,

140
00:05:47.120 --> 00:05:48.660
let's actually make sure we,

141
00:05:48.660 --> 00:05:53.660
first of all add some inheritance to make our project list

142
00:05:53.800 --> 00:05:57.693
and project input, or certain parts of it, more reusable.

