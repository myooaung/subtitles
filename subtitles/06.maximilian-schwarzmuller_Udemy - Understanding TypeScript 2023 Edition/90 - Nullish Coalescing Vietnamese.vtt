WEBVTT

00:02.300 --> 00:04.800
Người hướng dẫn: Bây giờ liên quan lỏng lẻo đến chuỗi

00:04.800 --> 00:06.930
tùy chọn, chúng tôi có một tính năng hay khác

00:06.930 --> 00:09.550
trong TypeScript, giúp chúng tôi xử lý dữ liệu rỗng.

00:09.550 --> 00:12.820
Và tính năng đó được gọi là kết hợp vô hiệu.

00:12.820 --> 00:15.900
Bây giờ, hãy tưởng tượng bạn có một số dữ liệu, một số dữ liệu

00:15.900 --> 00:17.530
đầu vào mà bạn không biết chắc

00:17.530 --> 00:19.830
liệu dữ liệu đó là rỗng hay không xác định hoặc

00:19.830 --> 00:23.320
liệu nó có thực sự là một phần dữ liệu hợp lệ hay không.

00:23.320 --> 00:28.180
Ví dụ: giả sử userInput có thể là null.

00:28.180 --> 00:31.040
Bây giờ, một lần nữa, ở đây, chúng tôi mã hóa cứng cái này

00:31.040 --> 00:33.580
thành TypeScript, do đó TypeScript biết rằng cái

00:33.580 --> 00:36.500
này là null, nhưng nếu bạn đang tìm nạp cái này thông qua một

00:36.500 --> 00:38.650
số API DOM, nơi bạn không biết chắc chắn về

00:38.650 --> 00:41.320
nó hoặc nếu bạn đang nhận được cái này từ back-end, thì

00:41.320 --> 00:42.970
bạn có thể không biết trước và TypeScript

00:42.970 --> 00:46.510
có thể không biết liệu đây có phải là null hay không.

00:46.510 --> 00:50.650
Sau đó, nếu bạn muốn lưu trữ giá trị này trong một số hằng số hoặc biến

00:50.650 --> 00:52.803
khác như storedData, bạn có thể muốn

00:54.090 --> 00:56.150
đảm bảo rằng nếu giá trị đó là null,

00:56.150 --> 00:58.760
bạn sẽ lưu trữ một giá trị dự phòng.

00:58.760 --> 01:03.560
Bây giờ bạn có thể làm như vậy với toán tử OR logic, nơi bạn lưu trữ một giá

01:03.560 --> 01:05.330
trị mặc định, nơi bạn nhận

01:05.330 --> 01:06.740
được giá trị thứ hai của

01:06.740 --> 01:08.940
giá trị đầu tiên là không xác định

01:08.940 --> 01:11.550
hoặc null, nếu chính xác là sai.

01:11.550 --> 01:13.690
Vấn đề với cách tiếp cận này là, nếu

01:13.690 --> 01:17.110
đây thực sự không phải là null hoặc không xác định,

01:17.110 --> 01:18.960
nhưng giả sử là một chuỗi rỗng,

01:18.960 --> 01:21.740
thì nó được coi là một giá trị sai và do đó, giá

01:21.740 --> 01:25.600
trị dự phòng, mặc định đó sẽ bắt đầu hoạt động.

01:25.600 --> 01:28.850
Vì vậy, nếu tôi an ủi. log storedData tại đây,

01:28.850 --> 01:31.700
bạn sẽ thấy bản in này MẶC ĐỊNH.

01:31.700 --> 01:33.430
Bây giờ có lẽ đó là điều bạn muốn, và

01:33.430 --> 01:36.540
trong trường hợp đó, đây là một giải pháp hoàn toàn tốt.

01:36.540 --> 01:38.800
Nhưng nếu bạn muốn giữ thông tin nhập của người

01:38.800 --> 01:40.730
dùng đó hoặc bất kỳ dữ liệu nào bạn đang

01:40.730 --> 01:44.110
làm việc, trừ khi nó thực sự là null hoặc không xác định, thì bạn cần

01:44.110 --> 01:45.530
một cách tiếp cận khác vì ở đây

01:45.530 --> 01:48.970
chúng tôi sẽ coi điều này là sai và sử dụng dự phòng.

01:48.970 --> 01:51.720
Nhưng có thể bạn muốn giữ một đầu vào trống rỗng

01:51.720 --> 01:54.370
hoặc không xác định nên được xử lý khác.

01:54.370 --> 01:56.390
Đối với điều đó, TypeScript cũng

01:56.390 --> 01:58.780
có một toán tử, toán tử dấu chấm hỏi

01:58.780 --> 02:02.210
kép, đây được gọi là toán tử kết hợp nullish.

02:02.210 --> 02:05.250
Và điều đó có nghĩa là nếu giá trị này là null hoặc không

02:05.250 --> 02:06.730
xác định, và thực sự chỉ có thế,

02:06.730 --> 02:09.180
không phải chuỗi rỗng, không phải số 0, thực

02:09.180 --> 02:11.540
sự chỉ là null hoặc không xác định, thì chúng

02:11.540 --> 02:13.370
tôi sẽ sử dụng dự phòng.

02:13.370 --> 02:16.700
Nếu nó không phải là null hoặc không xác định, thì chúng tôi sẽ sử dụng giá trị đó.

02:16.700 --> 02:19.220
Vì vậy, trong trường hợp này ở đây, phần này sẽ biên dịch

02:19.220 --> 02:21.400
và bạn thấy đấy, chúng tôi đã lưu trữ chuỗi trống,

02:21.400 --> 02:23.060
do đó, tôi không in bất kỳ thứ gì ở đây,

02:23.060 --> 02:24.720
đây là chuỗi trống.

02:24.720 --> 02:26.060
Mặt khác, nếu cái này không

02:26.060 --> 02:28.550
được xác định ở đây, và tôi lưu cái này, bạn thấy

02:28.550 --> 02:30.400
đấy, bây giờ nó nói MẶC ĐỊNH, bởi

02:30.400 --> 02:32.980
vì nhờ toán tử dấu chấm hỏi kép này, chúng tôi

02:32.980 --> 02:35.500
quay lại cái này, tốt, dự phòng và do đó chúng

02:35.500 --> 02:38.320
tôi có ở đây một tính năng rất hữu ích khác có thể giúp

02:38.320 --> 02:40.580
bạn xử lý các giá trị rỗng hoặc không xác

02:40.580 --> 02:42.773
định một cách dễ dàng.
