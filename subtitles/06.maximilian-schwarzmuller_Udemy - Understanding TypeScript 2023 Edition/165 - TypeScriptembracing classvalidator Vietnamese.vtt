WEBVTT

00:02.130 --> 00:03.630
Người kể chuyện: Vì vậy, chúng

00:03.630 --> 00:06.210
tôi đã xem qua Lodash, đây là gói JavaScript cơ bản

00:06.210 --> 00:08.360
mà chúng tôi cần cài đặt một số bản dịch.

00:08.360 --> 00:10.310
Và chúng tôi đã xem qua class-transformer,

00:10.310 --> 00:13.530
nó cũng hoạt động trong vanilla JavaScript, nhưng

00:13.530 --> 00:17.328
cũng hoạt động đặc biệt tốt trong TypeScript.

00:17.328 --> 00:20.330
Bây giờ chúng ta hãy xem class-validator.

00:20.330 --> 00:24.540
Bây giờ đây là một gói thực sự sử dụng TypeScript.

00:24.540 --> 00:28.300
Nó được xây dựng dựa trên khái niệm về các trình trang trí TypeScript

00:28.300 --> 00:32.340
và nó mang lại cho chúng tôi một cách hoàn toàn mới để làm việc với chúng hoặc

00:32.340 --> 00:34.330
ít nhất là gần như hoàn toàn mới.

00:34.330 --> 00:38.230
Nếu bạn theo dõi mô-đun trang trí của tôi trong khóa học này,

00:38.230 --> 00:41.200
bạn sẽ thực sự thấy điều gì đó ở đây trong bài giảng

00:41.200 --> 00:44.150
này, thứ mà chúng tôi cũng tự xây dựng ở đó.

00:44.150 --> 00:47.100
Tuy nhiên, giờ đây, với thư viện của bên thứ ba này, chúng tôi

00:47.100 --> 00:49.330
không phải phát minh lại bánh xe từ đầu, chúng

00:49.330 --> 00:51.193
tôi không phải tự xây dựng nó.

00:51.193 --> 00:53.320
Và thư viện này cũng được cho là phức tạp

00:53.320 --> 00:55.710
hơn một chút so với giải pháp của chúng tôi

00:55.710 --> 00:57.830
trong mô-đun của trình trang trí.

00:57.830 --> 01:00.026
Tôi đang nói về xác nhận.

01:00.026 --> 01:02.870
Đây là một gói cho phép chúng tôi thêm các quy tắc xác thực

01:02.870 --> 01:06.390
với sự trợ giúp của một số trình trang trí, bên trong một lớp và sau đó

01:06.390 --> 01:08.590
bất cứ khi nào chúng tôi khởi tạo một lớp như

01:08.590 --> 01:09.920
vậy, chúng tôi thực sự có thể

01:09.920 --> 01:12.610
xác thực nó cho các quy tắc mà chúng tôi đã thiết lập

01:12.610 --> 01:15.610
ở đó với sự trợ giúp của các trình trang trí.

01:15.610 --> 01:18.960
Bây giờ để bắt đầu, chúng ta chỉ cần nhập gói này vào đây.

01:18.960 --> 01:23.130
Vì vậy, npm cài đặt class-validator --save, và

01:23.130 --> 01:26.130
sau đó chúng ta có thể bắt đầu ngay.

01:26.130 --> 01:29.220
Vì vậy, hãy để tôi khởi động lại webpack-dev-server và

01:29.220 --> 01:30.600
để sử dụng gói này, chúng tôi

01:30.600 --> 01:33.580
phải thêm một vài trình trang trí cho các mô hình, vì vậy,

01:33.580 --> 01:35.740
cho các lớp mà chúng tôi muốn xác thực các

01:35.740 --> 01:37.490
thuộc tính nhất định.

01:37.490 --> 01:39.730
Vì vậy, trong trường hợp của tôi ở đây trong

01:39.730 --> 01:43.240
mô hình sản phẩm, tôi sẽ nhập thứ gì đó từ trình xác nhận lớp.

01:43.240 --> 01:45.110
Và bây giờ một lần nữa, nếu bạn đã

01:45.110 --> 01:47.360
theo dõi mô-đun trang trí trong khóa

01:47.360 --> 01:49.640
học này, thì đây là một khái niệm mà tôi

01:49.640 --> 01:52.870
cũng đã xây dựng từ đầu ở đó mà không có gói này.

01:52.870 --> 01:56.270
Nhưng tất nhiên chúng tôi đã xây dựng ở một phiên bản rất ngây

01:56.270 --> 01:57.840
thơ và cơ bản, với gói này, chúng

01:57.840 --> 02:01.200
tôi không phải tự xây dựng nó và nó cũng phức tạp hơn.

02:01.200 --> 02:02.770
Bây giờ từ trình xác nhận lớp, chúng ta

02:02.770 --> 02:04.820
có thể nhập một số trình trang trí nhất định.

02:04.820 --> 02:08.630
Ví dụ: IsNotEmpty hoặc

02:08.630 --> 02:11.410
IsNumber.

02:11.410 --> 02:13.500
Chúng tôi cũng có thể nhập IsPositive.

02:15.940 --> 02:18.940
Bây giờ chúng tôi có thể thêm chúng vào các thuộc tính mà chúng tôi muốn xác thực.

02:18.940 --> 02:20.900
Vì vậy, ở đây, ví dụ trên tiêu đề,

02:20.900 --> 02:24.220
chúng ta có thể thêm IsNotEmpty làm công cụ trang trí

02:24.220 --> 02:26.390
như thế này và đây đều là các nhà máy

02:26.390 --> 02:29.610
trang trí, vì vậy bạn luôn phải thực hiện chúng.

02:29.610 --> 02:31.318
Và cũng ở đây,

02:31.318 --> 02:37.380
IsNumber và IsPositive.

02:37.380 --> 02:38.763
Hãy thực hiện điều đó.

02:40.250 --> 02:41.730
Bây giờ để sử dụng các công cụ trang trí

02:41.730 --> 02:44.730
ở đây, bạn cũng nên truy cập tsconfig. js và đảm bảo rằng

02:44.730 --> 02:49.550
bạn bật trình trang trí thử nghiệm ở đó.

02:49.550 --> 02:51.593
Sau đó, lưu cái này, và bây giờ những

02:52.750 --> 02:55.040
vùng này ở đây cũng sẽ biến mất.

02:55.040 --> 02:57.300
Tuy nhiên, chúng tôi cũng cần khởi động lại máy

02:57.300 --> 03:00.840
chủ dev để nó nhận tệp tsconfig. chuyển đổi js.

03:00.840 --> 03:02.650
Vì vậy, bây giờ chúng tôi đã thêm các quy

03:02.650 --> 03:04.768
tắc này, các quy tắc xác thực này tại đây.

03:04.768 --> 03:07.710
Về cơ bản, chúng tôi muốn nói rằng tiêu đề không

03:07.710 --> 03:11.830
bao giờ được là một chuỗi trống và các số phải là số dương.

03:11.830 --> 03:13.980
Bây giờ chúng ta có thể tạo một

03:13.980 --> 03:15.119
sản phẩm mới ở đây,

03:15.119 --> 03:16.870
giả sử ở đó, newProd, nơi

03:16.870 --> 03:19.078
chúng ta gọi sản phẩm mới và tôi

03:19.078 --> 03:21.720
chuyển một chuỗi trống cho tiêu đề,

03:21.720 --> 03:25.210
sau đó trừ 5. 99 trong cho số.

03:25.210 --> 03:26.700
Nếu tôi thì console. log newProd,

03:27.576 --> 03:29.920
getInformation, và thực

03:29.920 --> 03:31.730
hiện điều này, hãy

03:31.730 --> 03:33.120
xem nó hoạt động

03:33.120 --> 03:34.830
ở đâu.

03:34.830 --> 03:35.683
Được rồi, lưu lại.

03:37.840 --> 03:40.040
Nó hoạt động.

03:40.040 --> 03:42.330
Chà, chúng tôi chưa hoàn toàn ở đó.

03:42.330 --> 03:46.470
Với những người trang trí của chúng tôi, chúng tôi thiết lập các quy tắc.

03:46.470 --> 03:49.560
Nhưng những người trang trí này không làm được gì nhiều.

03:49.560 --> 03:52.880
Thay vào đó, bây giờ chúng ta cũng phải nhập phương

03:52.880 --> 03:56.190
thức trình xác thực từ trình xác thực lớp.

03:56.190 --> 03:57.300
Vì vậy, từ gói này, chúng

03:57.300 --> 03:59.840
tôi nhập xác thực và chúng tôi phải thực hiện điều

03:59.840 --> 04:02.260
này trên một phiên bản cụ thể, ngoài lớp mà chúng

04:02.260 --> 04:05.750
tôi đã thêm các công cụ trang trí của mình vào.

04:05.750 --> 04:07.300
Vì vậy, trong trường hợp

04:07.300 --> 04:12.020
này ở đây, chúng ta có thể chạy xác thực và chuyển newProd cho nó.

04:12.020 --> 04:14.670
Và xác thực sau đó sẽ trả về một

04:14.670 --> 04:19.150
lời hứa thực sự có thể mang lại lỗi xác thực.

04:19.150 --> 04:21.440
Vì vậy, sau đó chúng ta có thể thêm sau đó ở đây, nếu bạn

04:21.440 --> 04:23.080
đang ở trong một chức năng nới lỏng, tất

04:23.080 --> 04:25.680
nhiên bạn cũng có thể sử dụng một trọng lượng duy nhất.

04:25.680 --> 04:27.920
Và ở đây chúng tôi lấy lại các lỗi mà

04:27.920 --> 04:30.093
chức năng xác thực này tìm thấy.

04:30.980 --> 04:31.813
Điều quan trọng

04:31.813 --> 04:34.950
bây giờ là, chúng tôi luôn kết thúc ở then ngay cả khi có lỗi,

04:34.950 --> 04:36.560
vì vậy nếu có lỗi xác thực, chúng

04:36.560 --> 04:38.420
tôi sẽ không truy cập vào khối catch

04:38.420 --> 04:41.120
nào đó, chúng tôi luôn truy cập vào khối then.

04:41.120 --> 04:44.360
Bây giờ ở đây, bây giờ chúng ta có thể kiểm tra xem có lỗi

04:44.360 --> 04:45.980
hay không, đó là một Mảng, độ

04:45.980 --> 04:48.400
dài dấu chấm có lớn hơn 0 hay không.

04:48.400 --> 04:51.300
Điều đó có nghĩa là có lỗi xác thực.

04:51.300 --> 04:52.910
Trong trường hợp này, chúng

04:53.750 --> 04:56.700
tôi có thể ghi lại các lỗi xác thực và cũng có thể

04:56.700 --> 04:59.200
xuất các lỗi mà chúng tôi tìm thấy.

04:59.200 --> 05:01.820
Vì vậy, bảng điều khiển. log, và nếu không thì

05:01.820 --> 05:03.700
trong trường hợp của tôi ở đây,

05:03.700 --> 05:05.290
tôi sẽ ghi lại thông tin.

05:05.290 --> 05:06.580
Tất nhiên, bây giờ nó phụ thuộc

05:06.580 --> 05:09.100
vào ứng dụng bạn đang xây dựng những gì bạn muốn làm ở đây.

05:09.100 --> 05:10.860
Bạn có thể muốn hiển thị cảnh báo cho

05:10.860 --> 05:13.790
người dùng trong trường hợp này tại đây nếu có lỗi.

05:13.790 --> 05:15.360
Bạn có thể muốn đặt lại đầu vào, bất

05:15.360 --> 05:16.520
cứ điều gì bạn muốn làm.

05:16.520 --> 05:19.690
Ở đây, tôi sẽ chỉ ghi một cái gì đó vào bảng điều khiển.

05:19.690 --> 05:22.080
Và nếu bây giờ chúng tôi lưu nó, thì

05:22.080 --> 05:24.870
bạn sẽ thấy các lỗi xác thực, và sau đó

05:24.870 --> 05:27.830
là một loạt các lỗi đã được tìm thấy.

05:27.830 --> 05:31.890
Ví dụ: lỗi đầu tiên nằm ở thuộc tính tiêu đề,

05:31.890 --> 05:34.770
rằng nó không được để trống.

05:34.770 --> 05:38.290
Và lỗi thứ hai là thuộc tính giá,

05:38.290 --> 05:41.150
nó phải là một số dương.

05:41.150 --> 05:44.950
Và đây là cách bạn có thể dễ dàng thêm xác thực mạnh mẽ

05:44.950 --> 05:47.960
vào các dự án của mình bằng cách tiếp cận dựa

05:47.960 --> 05:50.170
trên trình trang trí này.

05:50.170 --> 05:53.190
Liên quan đến những gì chúng ta đã làm trước đó trong

05:53.190 --> 05:54.530
khóa học và mô-đun trang

05:54.530 --> 05:56.062
trí, nhưng như tôi đã đề cập

05:56.062 --> 05:59.890
nhiều lần, phức tạp hơn với một loạt các quy tắc dựng sẵn và tất nhiên

05:59.890 --> 06:01.190
bạn có thể tìm hiểu tất

06:01.190 --> 06:03.610
cả về điều đó trong các tài liệu của gói này

06:03.610 --> 06:06.350
mà không cần phát minh lại bánh xe.

06:06.350 --> 06:09.300
Vì vậy, gói trình xác thực lớp thực sự là một gói

06:09.300 --> 06:10.930
mạnh mẽ mà bạn nên biết nếu

06:10.930 --> 06:14.693
bạn đang xây dựng các dự án lớn hơn bằng TypeScript.
