WEBVTT

00:02.150 --> 00:03.930
المدرب: لذلك أضفنا طلب POST الأول

00:03.930 --> 00:06.120
لدينا ، فنحن قادرون على إنشاء TODO.

00:06.120 --> 00:07.250
الآن لدينا المزيد من الطرق.

00:07.250 --> 00:10.170
لدينا أيضًا طريق لخدمة جميع TODOS التي أنشأناها.

00:10.170 --> 00:11.750
الآن يرجى العلم أن TODOS الخاص

00:11.750 --> 00:14.160
بك سيتم إعادة تعيينه في كل مرة تقوم فيها بتغيير

00:14.160 --> 00:16.630
الرمز الخاص بك وحفظه لأن ذلك يعيد تشغيل الخادم

00:16.630 --> 00:18.920
الخاص بك ويفقد كل شيء تم تخزينه في الذاكرة ونحن

00:18.920 --> 00:21.330
فقط ندير TODOS الخاصة بنا في الذاكرة.

00:21.330 --> 00:23.560
هذا ببساطة شيء لدينا هنا في التطبيق الوهمي

00:23.560 --> 00:24.930
، في تطبيق حقيقي ، يمكنك بالطبع

00:24.930 --> 00:28.200
تخزينه في قاعدة بيانات حقيقية ، وجلبه من هناك وهكذا ، وبالتالي

00:28.200 --> 00:30.280
سيبقى على قيد الحياة.

00:30.280 --> 00:35.060
ومع ذلك ، يمكننا هنا إنشاء وظيفة جديدة ، getTodos وسيكون هذا

00:35.060 --> 00:38.030
RequestHandler هنا ، لذلك لا يتعين عليك

00:38.030 --> 00:39.740
تعيين الأنواع على جميع

00:39.740 --> 00:42.330
المعلمات بشكل فردي.

00:42.330 --> 00:46.120
وبعد ذلك هناك ، أريد ببساطة أن أعيد ردًا حيث أعيد بعض بيانات

00:46.120 --> 00:49.560
JSON حيث لديّ قائمة المهام الخاصة بي وهناك ، أريد فقط

00:49.560 --> 00:52.420
الوصول إلى مصفوفة TODO الخاصة بي وإرسالها

00:52.420 --> 00:54.330
مرة أخرى إلى العميل ، ويمكن أن

00:54.330 --> 00:56.530
يكون هذا بالفعل كل شيء .

00:56.530 --> 00:57.810
بالطبع ، يمكنك تعديل

00:57.810 --> 00:59.640
هذا ، ربما تريد أن يكون لديك منطق

00:59.640 --> 01:03.120
مختلف ، ربما تريد فرز TODOS أولاً أو أي شيء من هذا القبيل

01:03.120 --> 01:06.690
، لكن هذا في أبسط أشكاله هو بالفعل كل ما نحتاجه هنا ، فهو

01:06.690 --> 01:10.530
يعيد TODOS الخاص بنا ، لذلك وظيفة بسيطة جدًا .

01:10.530 --> 01:13.240
في مسارات TODOS ، نحتاج الآن فقط إلى توصيل هذا.

01:13.240 --> 01:17.680
لذلك دعنا نستورد getTodos من وحدة التحكم الخاصة بنا

01:17.680 --> 01:20.640
أيضًا ونوصلها هنا بهذا المسار.

01:20.640 --> 01:23.430
وبهذا ، إذا حفظنا هذا الآن ، يمكننا رؤيته

01:23.430 --> 01:25.250
قيد التنفيذ بالفعل.

01:25.250 --> 01:29.860
إذا عدنا وقمنا بإنشاء طلب جديد ، طلب GET ،

01:29.860 --> 01:34.860
إلى http: // localhost: 3000 / todos / وأرسلنا

01:39.400 --> 01:41.410
هذا ، سنسترجع مصفوفة

01:41.410 --> 01:44.400
فارغة ، الآن لماذا؟

01:44.400 --> 01:46.750
حسنًا ، لقد قلت أنه سيتم مسح TODOS كلما

01:46.750 --> 01:48.010
قمنا بتغيير الرمز وبالتالي

01:48.010 --> 01:49.750
إعادة تشغيل الخادم ، لذلك يجب

01:49.750 --> 01:51.470
علينا إنشاء TODO جديد الآن دون

01:51.470 --> 01:54.110
إعادة تشغيل الخادم بين الآن.

01:54.110 --> 01:57.360
وإذا أنشأنا TODO وحصلنا الآن على TODOS

01:57.360 --> 02:01.770
، فإننا نرى ذلك الذي أنشأ TODO بالمعرف ، التسلسلي 9811

02:01.770 --> 02:04.380
وما إلى ذلك ، هنا أيضًا.

02:04.380 --> 02:05.960
هذا يعمل بالفعل.

02:05.960 --> 02:08.980
الآن بما أننا نعمل عليه ، فلنعمل أيضًا على التصحيح

02:08.980 --> 02:10.590
والحذف وبالطبع لا تتردد في

02:10.590 --> 02:12.680
التوصل إلى بعض المنطق هناك بنفسك.

02:12.680 --> 02:14.970
في النهاية ، لديك الآن كل اللبنات الأساسية

02:14.970 --> 02:16.130
التي تحتاجها لذلك.

02:16.130 --> 02:18.480
بالطبع سنفعل ذلك معًا الآن أيضًا.

02:19.390 --> 02:21.570
إذن هنا الآن في طلب التصحيح

02:21.570 --> 02:24.350
، دعنا نضيف وظيفة تحكم جديدة.

02:24.350 --> 02:29.350
تصدير const updateTodo ، وهو من النوع RequestHandler ويجب أن

02:30.660 --> 02:34.680
يحتوي على وظيفة بهذا التنسيق الذي نعرفه بالفعل.

02:34.680 --> 02:37.310
وهناك ، الهدف هو استخراج البيانات

02:37.310 --> 02:40.630
حول TODO الجديد من الطلب الوارد ، ثم تحديث

02:40.630 --> 02:44.140
TODO بتلك البيانات الجديدة.

02:44.140 --> 02:47.240
الآن ، يرجى ملاحظة أنه كجزء من طريقنا هنا ،

02:47.240 --> 02:48.900
لدينا قطاع ديناميكي.

02:48.900 --> 02:51.140
لدينا شريحة الهوية هذه.

02:51.140 --> 02:54.610
لذلك هذا شيء سنتمكن من استخراجه من عنوان URL

02:54.610 --> 02:58.750
، يمكن استخراج قيمة ملموسة لهذا الجزء الديناميكي.

02:58.750 --> 03:02.147
لذلك هنا بناءً على طلبنا الوارد ، يمكنك الحصول على

03:03.172 --> 03:07.987
todoId من معلمات الطلب الخاصة بنا. هوية شخصية،. معرف ، لأن هذا هو الاسم الذي اخترته هنا.

03:07.987 --> 03:11.660
إذا اخترت اسمًا مختلفًا هنا ، فيجب عليك استخدام

03:11.660 --> 03:13.060
اسم مختلف هناك.

03:13.060 --> 03:15.810
الآن ، لا نحصل على أنواع الدعم هنا ، أليس كذلك؟

03:15.810 --> 03:18.410
Params من أي نوع.

03:18.410 --> 03:20.450
الآن لأن الأنواع يمكنها تحليل

03:20.450 --> 03:23.400
هذه السلسلة وفهم ما بداخلها.

03:23.400 --> 03:25.460
لذلك للحصول على أنواع دعم أفضل

03:25.460 --> 03:28.920
، يمكننا في الواقع الاستفادة من أن RequestHandler

03:28.920 --> 03:32.880
هنا هو نوع عام ويمكننا إضافة أقواس بزاوية وإخبار TypeScript

03:32.880 --> 03:35.880
أساسًا بالمعلمات التي ستحتوي عليها.

03:35.880 --> 03:37.800
لقد قمنا ببساطة بتعيين هذا على كائن

03:37.800 --> 03:39.300
وهناك لدينا الآن خريطة قيمة

03:39.300 --> 03:42.180
رئيسية لجميع آبائنا الموجودين لدينا في عنوان URL.

03:42.180 --> 03:43.830
على سبيل المثال ، لدينا معلمة

03:43.830 --> 03:46.730
ID ، والتي في النهاية تحتوي على سلسلة.

03:46.730 --> 03:48.610
هذا شيء يمكننا إضافته هنا والآن سترى

03:48.610 --> 03:50.230
أننا نحصل على الإكمال التلقائي

03:50.230 --> 03:52.560
ويعرف TypeScript أن هذا سيكون سلسلة.

03:52.560 --> 03:55.520
لذلك هذا أفضل ، باستخدام هذا النوع العام.

03:55.520 --> 03:58.640
الآن ، لدينا المعرف ، نحتاج أيضًا إلى شيء

03:58.640 --> 04:01.050
من نص الطلب ، وللتحديد ، نحتاج

04:01.050 --> 04:03.560
إلى النص الجديد من نص الطلب.

04:03.560 --> 04:08.130
لذلك يمكن استرداد النص المحدث من نص الطلب ، والآن مرة أخرى

04:08.130 --> 04:11.700
، دعنا نستخدم أسلوب الطباعة هنا ، لتوضيح أنه

04:11.700 --> 04:14.100
ستكون هناك خاصية نصية في النص

04:14.100 --> 04:16.910
وأن هذا سيكون من النوع String.

04:16.910 --> 04:19.750
ودعنا نسترجع النص بعد ذلك.

04:19.750 --> 04:22.373
والآن يمكننا تحديث TODO في مجموعة TODOS الخاصة بنا هناك.

04:23.830 --> 04:27.720
لذلك ، دعنا نجد فهرس TODO الذي نريد

04:27.720 --> 04:28.710
تحديثه.

04:28.710 --> 04:30.808
todoIndex ، من خلال الوصول إلى TODOS

04:30.808 --> 04:33.760
، وباستخدام findIndex ، يمكننا تشغيل بعض المنطق

04:33.760 --> 04:36.090
على كل عنصر في مصفوفة TODOS.

04:36.090 --> 04:38.060
وهناك نحن نبحث في كل ما يجب فعله

04:38.060 --> 04:40.010
وإذا كان معرف المهام مساويًا

04:40.010 --> 04:44.300
لـ todoId لدينا هنا ، فنحن نعلم أن هذا هو TODO الذي نريد تحديثه.

04:44.300 --> 04:47.140
الآن إذا كان ذلك لسبب ما يجب أن يكون ناقصًا واحدًا

04:47.140 --> 04:50.550
، فهذا يعني أننا لم نعثر على TODO ، لذلك إذا كان هذا أصغر

04:50.550 --> 04:52.610
من الصفر بشكل أساسي ، فنحن نعلم أن

04:52.610 --> 04:56.960
شيئًا ما حدث خطأ وفي هذه الحالة ، سأقوم بإلقاء خطأ جديد حيث أقول ، لا يمكن

04:56.960 --> 04:59.630
العثور على ما يجب القيام به!

04:59.630 --> 05:03.633
ومن المفترض أن يؤدي ذلك بعد ذلك إلى تشغيل الخطأ الافتراضي في معالجة

05:04.760 --> 05:06.130
البرامج الوسيطة هنا.

05:06.130 --> 05:08.633
الآن إذا تجاوزنا هذا إذا تم التحقق ، فسنجد

05:09.870 --> 05:12.450
TODO ، وبعد ذلك يمكننا ببساطة تحديث todo

05:12.450 --> 05:15.040
في هذا الفهرس في مجموعة TODOS الخاصة بنا

05:15.040 --> 05:18.960
ليكون TODO جديدًا ، حيث نحتفظ بالمعرف القديم.

05:18.960 --> 05:23.270
إذن من أين نصل إلى TODOS ، todoIndex. id ، لذلك نصل إلى المعرف القديم وقمنا بتخزينه

05:23.270 --> 05:27.030
، لكن النص الذي قمت

05:27.030 --> 05:29.490
بتعيينه هنا ، بالطبع لا نخصصه

05:29.490 --> 05:31.713
بهذا الشكل.

05:32.870 --> 05:34.570
لكن النص الذي وضعناه هنا هو النص المحدث الآن.

05:34.570 --> 05:38.750
يحل هذا محل TODO هنا ، وبعد ذلك يمكننا

05:38.750 --> 05:41.340
إرسال رد برسالة ، محدث

05:41.340 --> 05:45.280
، على سبيل المثال.

05:45.280 --> 05:47.053
وحيث نقوم أيضًا بإلحاق التحديث

05:47.990 --> 05:51.470
المحدث بالاستجابة الصادرة ، وقمنا بتعيين هذا يساوي ، حسنًا

05:51.470 --> 05:55.090
، TODOS todoIndex ، والذي يحمل الآن القيمة الجديدة.

05:55.090 --> 05:59.090
هذا شيء نسميه القيام به هنا في منطق التحديث الخاص بنا ، بالطبع

05:59.090 --> 06:02.430
، بعض الأكواد الوهمية لأننا ما زلنا نعمل مع هذا

06:02.430 --> 06:03.960
في مصفوفة ذاكرة TODOS

06:03.960 --> 06:07.150
لكنه يوضح كيف نستخدم TypeScript هنا ، وهذا هو

06:07.150 --> 06:09.060
الشيء الرئيسي.

06:09.060 --> 06:11.100
لذلك دعونا نجرب وظيفة التحديث هذه الآن.

06:11.100 --> 06:13.620
لذلك يمكننا العودة إلى Postman ، وفي النهاية

06:13.620 --> 06:16.260
، أريد الآن إرسال طلب PATCH ، لأننا في المسارات

06:16.260 --> 06:19.960
ننتظر طلب التصحيح هذا إلى هذا الطريق.

06:19.960 --> 06:23.460
وبالحديث عن ذلك ، ربما ينبغي علينا أيضًا ربط هذا

06:23.460 --> 06:24.293
المسار بوظيفة

06:24.293 --> 06:26.490
وحدة التحكم هذه أولاً.

06:26.490 --> 06:28.850
لذلك ، دعنا ننتقل إلى ملف المسارات

06:28.850 --> 06:33.420
ونستورد updateTodo وننشئ هذا الاتصال هنا.

06:33.420 --> 06:35.590
وبعد ذلك ، يمكننا المضي قدمًا وإرسال هذا الطلب.

06:35.590 --> 06:38.570
والآن بالعودة إلى Postman ، فإن

06:38.570 --> 06:41.890
PATCH هو ما نريد إرساله ومن ثم http:

06:41.890 --> 06:46.320
// localhost: 3000 / todos والآن فكرة TODO التي

06:46.320 --> 06:49.430
نريد تحديثها كجزء من عنوان URL.

06:49.430 --> 06:50.573
الآن بما أننا حفظنا شيئًا ما ، نظرًا

06:51.500 --> 06:54.970
لأننا حفظنا بعض التغييرات ، تمت إعادة تشغيل خادمنا ، لذلك ستفقد جميع TODOS على أي حال.

06:54.970 --> 06:58.890
لذلك دعونا أولاً وقبل كل شيء ، نعيد إرسال طلب POST

06:58.890 --> 07:01.150
هذا لإنشاء TODO جديد.

07:01.150 --> 07:02.450
ثم هنا حصلنا على معرف TODO.

07:02.450 --> 07:05.170
الآن يمكننا إضافة هذا المعرف هنا إلى عنوان URL هذا.

07:05.170 --> 07:08.800
وسأضيف أيضًا جسمًا يجب أن يكون من النوع JSON ، حيث نقوم بتعيين هذه

07:08.800 --> 07:11.780
البيانات الجديدة التي نريد إرسالها إلى الخادم.

07:11.780 --> 07:15.560
ضع في اعتبارك الآن في وحدة التحكم في التحديث

07:15.560 --> 07:18.570
الخاصة بنا ، فأنا أبحث عن حقل باسم النص

07:18.570 --> 07:20.970
، في نص الطلب الوارد.

07:20.970 --> 07:22.900
لذا يجب أن نقدم هذا مرة أخرى هنا في

07:22.900 --> 07:24.580
بيانات JSON التي نرسلها.

07:24.580 --> 07:26.690
قم بإنهاء الدورة في شهر واحد

07:26.690 --> 07:29.440
، قد يكون هذا نصنا الجديد.

07:29.440 --> 07:31.520
إذا أرسلنا هذا الآن ، فسنرى أنه تم تحديثه.

07:31.520 --> 07:35.210
وإذا حصلت الآن على جميع TODOS ، فسنرى أيضًا أنه لا

07:35.210 --> 07:37.180
يزال هناك TODO واحد فقط ، ولكن

07:37.180 --> 07:39.430
تم تغيير النص ببساطة.

07:39.430 --> 07:41.623
والآن يعمل هذا ، يمكننا أيضًا تحديث TODO.

07:42.950 --> 07:46.470
دعنا نتحقق أيضًا مما يحدث إذا كان لدي معرف غير موجود ، على سبيل

07:46.470 --> 07:48.780
المثال ، عن طريق حذف الرقم الأخير هنا ، ثم

07:48.780 --> 07:50.620
أحصل على ، تعذر العثور على ما يجب

07:50.620 --> 07:53.430
فعله في استجابة الخطأ الخاصة بي من النوع 500.

07:53.430 --> 07:57.670
لذلك هذا أيضًا يبدو جيدًا.

07:57.670 --> 07:59.660
كخطوة أخيرة ، دعنا نضيف وظيفة لحذف TODO.

07:59.660 --> 08:03.800
لذا في مجلد وحدات التحكم ، سأصدر ثابتًا باسم deleteTodo

08:03.800 --> 08:07.210
، وهو من النوع RequestHandler.

08:07.210 --> 08:11.460
ومرة أخرى ، نحصل على طلبنا ، وردنا ، ثم

08:11.460 --> 08:14.040
الوظيفة التالية هنا.

08:14.040 --> 08:17.320
وهنا ، أريد الآن العثور على

08:17.320 --> 08:20.270
TODO وإزالته ببساطة.

08:20.270 --> 08:21.543
لذلك ، يمكننا في الواقع

08:22.380 --> 08:25.090
نسخ هذا الرمز حيث نحصل على معرف TODO ثم الفهرس.

08:25.090 --> 08:29.360
فقط تخلص من هذا السطر حيث نستخرج النص المحدث لأنه بالنسبة

08:29.360 --> 08:32.210
لطلب الحذف ، لن يكون هناك نص طلب ، لكننا

08:32.210 --> 08:35.660
نحتاج إلى معرف TODO الذي يعد جزءًا من مسار عنوان

08:35.660 --> 08:37.400
URL الخاص بنا.

08:37.400 --> 08:40.340
ثم نعثر على الفهرس وبمجرد حصولنا على الفهرس

08:40.340 --> 08:43.530
، يمكننا الذهاب إلى TODOs ، واستدعاء طريقة لصق

08:43.530 --> 08:47.350
وإزالة todo في todoIndex ، وفقط تلك المهام.

08:47.350 --> 08:51.620
وبعد ذلك يمكننا إرسال رد حيث نقول

08:51.620 --> 08:54.040
، تم حذف Todo! مثل هذا تماما.

08:54.040 --> 08:58.490
قد يكون هذا منطق الحذف لدينا.

08:58.490 --> 08:59.380
حان الوقت الآن لتوصيل

08:59.380 --> 09:01.760
هذا ، لذا في مجلد المسارات ، دعنا نستورد deleteTodo

09:01.760 --> 09:04.560
من أدوات التحكم TODO وقم بتوصيلها هناك.

09:04.560 --> 09:07.440
ومع هذا الاتصال ، إذا حفظنا هذا الآن ، مرة أخرى ، نحتاج

09:08.340 --> 09:09.963
إلى إضافة TODO لأن جميع TODO

09:11.120 --> 09:14.370
يتم مسحها مع كل إعادة تشغيل للخادم ، لذا ها هي.

09:14.370 --> 09:16.720
انسخ هذا المعرف.

09:16.720 --> 09:20.550
ودعنا الآن نرسل طلب الحذف هذا.

09:20.550 --> 09:22.680
إذن ، طلب DELETE جديد هنا ، إلى http: /

09:22.680 --> 09:24.980
localhost: 3000 / todos / هذا المعرف.

09:24.980 --> 09:27.160
لا حاجة لإضافة أي شخص.

09:27.160 --> 09:32.160
انقر فوق إرسال ويعمل.

09:32.800 --> 09:34.880
إذا أرسلته مرة أخرى ، فسنحصل على خطأ

09:34.880 --> 09:37.180
تعذر العثور عليه لأننا حذفناه للتو.

09:37.180 --> 09:39.950
وإذا حصلنا على جميع TODOS ، فيجب أن تكون

09:39.950 --> 09:41.570
مصفوفة فارغة وهذه.

09:41.570 --> 09:42.723
هذا يعمل الآن وهذه

09:42.723 --> 09:45.550
وظيفة CRUD بشكل أساسي ، تمت إضافتها مع TypeScript

09:45.550 --> 09:46.750
هنا في تطبيق Node

09:46.750 --> 09:49.550
and Express البسيط هذا.

09:49.550 --> 09:50.990
الآن بالطبع هذا تطبيق تافه إلى حد ما هنا

09:50.990 --> 09:52.940
، لكنه يوضح لنا بالفعل بعض استخدام TypeScript.

09:52.940 --> 09:56.060
يوضح لنا أننا نكتب رمزًا يجب أن يبدو مألوفًا لك إذا

09:56.060 --> 09:58.870
كنت تعمل في بقية هذه الدورة التدريبية ، وأننا

09:58.870 --> 10:00.480
نستخدم جميع الميزات التي

10:00.480 --> 10:02.000
تعلمتها هناك.

10:02.000 --> 10:04.750
وكما هو الحال في قسم React ، هذا كل شيء مهم.

10:04.750 --> 10:07.610
يمكنك استخدام أي شيء تعلمته عن TypeScript

10:07.610 --> 10:10.110
هنا أيضًا ، لأنه يتم تجميعه إلى كود

10:10.110 --> 10:11.520
JavaScript عادي في

10:11.520 --> 10:13.340
النهاية ، والذي نعرضه بعد

10:13.340 --> 10:14.990
ذلك.
