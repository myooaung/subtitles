WEBVTT

00:02.340 --> 00:04.100
解说员：我们从泛型开始,

00:04.100 --> 00:06.670
希望大家清楚TypeScript在这里做什么,

00:06.670 --> 00:14.370
我们把一些额外的信息传递给合并函数, 这样我们就可以更好地处理合并函数的结果｡

00:14.370 --> 00:16.540
这就是泛型的典型用途｡ 

00:16.540 --> 00:21.960
它们允许您继续以TypeScript最佳方式处理数据｡

00:21.960 --> 00:23.820
现在, 在这个例子中, 这里, 但是,

00:23.820 --> 00:25.810
我们会有一个问题, 如果我通过,

00:25.810 --> 00:28.570
让我们说, 只是一个数字30在这里｡

00:28.570 --> 00:30.470
当然, TypeScript现在会抛出一个错误,

00:30.470 --> 00:33.870
因为它试图访问年龄, 但访问名称是可行的｡

00:33.870 --> 00:37.100
尽管如此, 如果我们保存它, 它编译时不会出错,

00:37.100 --> 00:41.610
如果我打印整个合并的对象, 我们会看到我得到的只是对象中的爱好和名字,

00:41.610 --> 00:43.910
这是有意义的, 因为30是一个数字,

00:43.910 --> 00:48.010
当我们把它作为第二个参数传递给object assign时,

00:48.010 --> 00:54.590
我们最后在这里做的, 嗯, 然后它就默默地失败了｡

00:54.590 --> 00:57.860
JavaScript不会抛出错误, 也不会抱怨｡ 

00:57.860 --> 01:00.460
当然, 它也不会将30合并到新创建的对象中,

01:00.460 --> 01:04.690
你会看到这个对象中没有30｡

01:04.690 --> 01:06.540
那么JavaScript是如何做到的呢？

01:06.540 --> 01:08.470
因为30不是一个对象,

01:08.470 --> 01:14.090
所以对象分配器只能将不同对象彼此合并｡

01:14.090 --> 01:15.410
那么我们最后想救什么呢？

01:15.410 --> 01:17.600
我们不关心具体的类型,

01:17.600 --> 01:22.980
也不关心你为U和T提供的对象的具体结构.

01:22.980 --> 01:26.600
但我们真正关心的是, 两个参数,

01:26.600 --> 01:31.370
两个类型T和U, 应该是任何类型的对象,

01:31.370 --> 01:34.420
但它们应该一直是对象｡

01:34.420 --> 01:36.830
目前我们还没这么说｡ 

01:36.830 --> 01:37.820
目前, 我们只是说,

01:37.820 --> 01:40.110
他们应该是任何类型的, 我不在乎｡

01:40.110 --> 01:41.750
通常情况下, 这是不好的｡ 

01:41.750 --> 01:46.683
你想限制这里的T和U的类型, 解决你的泛型类型｡

01:47.830 --> 01:51.540
您可以使用型别条件约束来完成这项工作｡ 

01:51.540 --> 01:55.170
对于泛型类型, 您可以设置有关泛型类型可以基于的类型的某些约束,

01:55.170 --> 02:05.150
并且可以使用要约束的类型后面的尖括号中的扩展关键字来执行此操作｡

02:05.150 --> 02:07.410
所以这里我们可以说extends

02:07.410 --> 02:09.020
object, 我是说,

02:09.020 --> 02:15.340
T类型可以是任何结构的任何对象, 但它必须是一个对象.

02:15.340 --> 02:17.480
我们可以为你做同样的事情｡ 

02:17.480 --> 02:21.820
如果我这样做, 您会看到IDE中已经出现错误｡

02:21.820 --> 02:26.150
如果我试图保存它, 我也会在编译器中得到一个错误,

02:26.150 --> 02:31.133
因为这里的类型30参数是不能赋值给类型对象的｡

02:32.080 --> 02:34.480
这就是我们想要的行为｡ 

02:34.480 --> 02:38.190
现在我们又被迫传入一个对象, 哎呀,

02:38.190 --> 02:39.940
就像这样｡

02:39.940 --> 02:41.990
现在我们不得不再次传入这个函数,

02:41.990 --> 02:45.290
因此我们改进了这个函数, 因为现在它真的起作用了｡

02:45.290 --> 02:48.980
我们知道对象赋值需要两个对象｡ 

02:48.980 --> 02:56.370
最后, 我们希望通过在泛型类型上设置某些约束来保证我们在这里得到两个对象｡

02:56.370 --> 02:58.630
这里的约束可以是任何东西｡ 

02:58.630 --> 03:01.290
你可以引用对象, 字符串, 你可以使用你自己的类型,

03:01.290 --> 03:03.730
如果你有的话｡

03:03.730 --> 03:06.700
如果你想的话, 你也可以在这里使用联合类型,

03:06.700 --> 03:10.510
你在这里非常灵活, 你可以设置任何你想要的约束｡

03:10.510 --> 03:13.720
当然, 您不必约束所有泛型类型｡

03:13.720 --> 03:16.560
如果只想约束U, 可以这样做｡ 

03:16.560 --> 03:19.620
在这个例子中, 约束这两个对象是有意义的,

03:19.620 --> 03:24.640
因为对象赋值在这里需要两个对象, 但在那里你真的很灵活｡

03:24.640 --> 03:26.620
但是, 了解约束的概念是很重要的,

03:26.620 --> 03:30.560
因为它允许您以最佳方式更好地处理泛型类型,

03:30.560 --> 03:37.513
从而避免不必要的错误或奇怪的行为, 就像我们以前遇到的那样｡
