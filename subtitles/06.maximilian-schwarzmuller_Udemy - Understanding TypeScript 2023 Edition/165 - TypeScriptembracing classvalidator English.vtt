WEBVTT

1
00:00:02.130 --> 00:00:03.630
<v Narrator>So we had a look at Lodash,</v>

2
00:00:03.630 --> 00:00:06.210
which is a vanilla JavaScript package where

3
00:00:06.210 --> 00:00:08.360
we needed to install some translations.

4
00:00:08.360 --> 00:00:10.310
And we had a look at class-transformer,

5
00:00:10.310 --> 00:00:13.530
which is also working in vanilla JavaScript,

6
00:00:13.530 --> 00:00:17.328
but also works particularly well in TypeScript.

7
00:00:17.328 --> 00:00:20.330
Now let's have a look at class-validator.

8
00:00:20.330 --> 00:00:24.540
This now is a package which really utilizes TypeScript.

9
00:00:24.540 --> 00:00:28.300
It builds up on the concept of TypeScript decorators,

10
00:00:28.300 --> 00:00:32.340
and it gives us a brand new way of working with them,

11
00:00:32.340 --> 00:00:34.330
or at least almost brand new.

12
00:00:34.330 --> 00:00:38.230
If you followed through my decorator module in this course,

13
00:00:38.230 --> 00:00:41.200
you will actually see something here in this lecture,

14
00:00:41.200 --> 00:00:44.150
which we kind of built on our own there as well.

15
00:00:44.150 --> 00:00:47.100
Now, however, with this third party library,

16
00:00:47.100 --> 00:00:49.330
we don't have to reinvent the wheel from scratch,

17
00:00:49.330 --> 00:00:51.193
we don't have to build it on our own.

18
00:00:51.193 --> 00:00:53.320
And this library also arguably,

19
00:00:53.320 --> 00:00:55.710
is a bit more elaborate than our solution in

20
00:00:55.710 --> 00:00:57.830
the decorator's module.

21
00:00:57.830 --> 00:01:00.026
I am talking about validation.

22
00:01:00.026 --> 00:01:02.870
This is a package which allows us to

23
00:01:02.870 --> 00:01:06.390
add validation rules with the help of some decorators,

24
00:01:06.390 --> 00:01:08.590
inside of a class and then whenever we

25
00:01:08.590 --> 00:01:09.920
instantiate such a class,

26
00:01:09.920 --> 00:01:12.610
we can actually validate it for the rules we

27
00:01:12.610 --> 00:01:15.610
set up there with the help of decorators.

28
00:01:15.610 --> 00:01:18.960
Now to get started we just need to import this package here.

29
00:01:18.960 --> 00:01:23.130
So npm install class-validator --save,

30
00:01:23.130 --> 00:01:26.130
and thereafter we can start right away.

31
00:01:26.130 --> 00:01:29.220
So let me restart the webpack-dev-server,

32
00:01:29.220 --> 00:01:30.600
and to use this package,

33
00:01:30.600 --> 00:01:33.580
we have to add a couple of decorators to the models,

34
00:01:33.580 --> 00:01:35.740
so to the classes where we wanna

35
00:01:35.740 --> 00:01:37.490
validate certain properties.

36
00:01:37.490 --> 00:01:39.730
So in my case here in the product model,

37
00:01:39.730 --> 00:01:43.240
I will import something from class-validator.

38
00:01:43.240 --> 00:01:45.110
And now again, if you followed through the

39
00:01:45.110 --> 00:01:47.360
decorator module in this course,

40
00:01:47.360 --> 00:01:49.640
this is a concept which I already also

41
00:01:49.640 --> 00:01:52.870
built from scratch there without this package.

42
00:01:52.870 --> 00:01:56.270
But of course we built in a very naive and basic version,

43
00:01:56.270 --> 00:01:57.840
with this package we don't have to

44
00:01:57.840 --> 00:02:01.200
build it on our own and it's also more elaborate.

45
00:02:01.200 --> 00:02:02.770
Now from class-validator,

46
00:02:02.770 --> 00:02:04.820
we can import certain decorators.

47
00:02:04.820 --> 00:02:05.893
For example,

48
00:02:07.139 --> 00:02:08.630
IsNotEmpty,

49
00:02:08.630 --> 00:02:10.098
or also,

50
00:02:10.098 --> 00:02:11.410
IsNumber.

51
00:02:11.410 --> 00:02:13.500
We can also import IsPositive.

52
00:02:15.940 --> 00:02:18.940
Now we can add them to the properties we wanna validate.

53
00:02:18.940 --> 00:02:20.900
So here for example on the title,

54
00:02:20.900 --> 00:02:24.220
we can add IsNotEmpty as a decorator like this,

55
00:02:24.220 --> 00:02:26.390
and these are all decorator factories,

56
00:02:26.390 --> 00:02:29.610
so you always have to execute them.

57
00:02:29.610 --> 00:02:31.318
And also here,

58
00:02:31.318 --> 00:02:33.485
IsNumber

59
00:02:34.472 --> 00:02:37.380
and IsPositive.

60
00:02:37.380 --> 00:02:38.763
Let's execute that.

61
00:02:40.250 --> 00:02:41.730
Now to use decorators here,

62
00:02:41.730 --> 00:02:44.730
you also should go to tsconfig.js file,

63
00:02:44.730 --> 00:02:49.550
and make sure you turn experimental decorators on there.

64
00:02:49.550 --> 00:02:51.593
Thereafter, save this,

65
00:02:52.750 --> 00:02:55.040
and now these areas here should also go away.

66
00:02:55.040 --> 00:02:57.300
We also need to restart the dev server though,

67
00:02:57.300 --> 00:03:00.840
so that it picks up the new tsconfig.js conversion.

68
00:03:00.840 --> 00:03:02.650
So now we added these rules,

69
00:03:02.650 --> 00:03:04.768
these validation rules here.

70
00:03:04.768 --> 00:03:07.710
We're basically saying the title must never be

71
00:03:07.710 --> 00:03:11.830
an empty string and the numbers should be a positive number.

72
00:03:11.830 --> 00:03:13.980
Now we can create a new product here,

73
00:03:13.980 --> 00:03:15.119
let's say there,

74
00:03:15.119 --> 00:03:16.870
newProd,

75
00:03:16.870 --> 00:03:19.078
where we call new product and

76
00:03:19.078 --> 00:03:21.720
I pass an empty string for the title,

77
00:03:21.720 --> 00:03:25.210
and then minus 5.99 in for the number.

78
00:03:25.210 --> 00:03:26.700
If I then console.log

79
00:03:27.576 --> 00:03:29.920
newProd,

80
00:03:29.920 --> 00:03:31.730
getInformation,

81
00:03:31.730 --> 00:03:33.120
and execute this,

82
00:03:33.120 --> 00:03:34.830
let's see where it works.

83
00:03:34.830 --> 00:03:35.683
Okay, save that.

84
00:03:37.840 --> 00:03:40.040
Huh, it works.

85
00:03:40.040 --> 00:03:42.330
Well, we're not entirely there yet.

86
00:03:42.330 --> 00:03:46.470
With our decorators we set up the rules.

87
00:03:46.470 --> 00:03:49.560
But these decorators on their own don't do much.

88
00:03:49.560 --> 00:03:52.880
Instead we now also have to import the

89
00:03:52.880 --> 00:03:56.190
validator method from class-validator.

90
00:03:56.190 --> 00:03:57.300
So from this package,

91
00:03:57.300 --> 00:03:59.840
we import validate and we have to

92
00:03:59.840 --> 00:04:02.260
execute this on a concrete instance,

93
00:04:02.260 --> 00:04:05.750
off the class where we added our decorators to.

94
00:04:05.750 --> 00:04:07.300
So in this case here,

95
00:04:07.300 --> 00:04:12.020
we can run validate and pass the newProd to it.

96
00:04:12.020 --> 00:04:14.670
And validate will then return

97
00:04:14.670 --> 00:04:19.150
a promise which actually might yield validation errors.

98
00:04:19.150 --> 00:04:21.440
So we can then add then here,

99
00:04:21.440 --> 00:04:23.080
if you were in a easing function,

100
00:04:23.080 --> 00:04:25.680
you could also use a single weight of course.

101
00:04:25.680 --> 00:04:27.920
And here we get back the errors

102
00:04:27.920 --> 00:04:30.093
this validate function finds.

103
00:04:30.980 --> 00:04:31.813
Now important,

104
00:04:31.813 --> 00:04:34.950
we always end up in then even if there are errors,

105
00:04:34.950 --> 00:04:36.560
so if there are validation errors,

106
00:04:36.560 --> 00:04:38.420
we don't get into some catch block,

107
00:04:38.420 --> 00:04:41.120
we always go into the then block.

108
00:04:41.120 --> 00:04:44.360
Now in here we can now check if errors,

109
00:04:44.360 --> 00:04:45.980
which is an Array,

110
00:04:45.980 --> 00:04:48.400
dot length is greater than zero.

111
00:04:48.400 --> 00:04:51.300
Which means there are validation errors.

112
00:04:51.300 --> 00:04:52.910
In this case we can log

113
00:04:53.750 --> 00:04:56.700
validation errors,

114
00:04:56.700 --> 00:04:59.200
and maybe also output the errors we found.

115
00:04:59.200 --> 00:05:01.820
So console.log errors,

116
00:05:01.820 --> 00:05:03.700
and otherwise in my case here,

117
00:05:03.700 --> 00:05:05.290
I will log the information.

118
00:05:05.290 --> 00:05:06.580
Now of course it depends on the

119
00:05:06.580 --> 00:05:09.100
application you're building what you wanna do here.

120
00:05:09.100 --> 00:05:10.860
You might wanna show an alert to the

121
00:05:10.860 --> 00:05:13.790
user in this case here if there are errors.

122
00:05:13.790 --> 00:05:15.360
You might wanna reset the input,

123
00:05:15.360 --> 00:05:16.520
whatever you wanna do.

124
00:05:16.520 --> 00:05:19.690
Here, I'll just log something to the console.

125
00:05:19.690 --> 00:05:22.080
And if we now save that,

126
00:05:22.080 --> 00:05:24.870
well you see validation errors,

127
00:05:24.870 --> 00:05:27.830
and then here an array of the errors that were found.

128
00:05:27.830 --> 00:05:31.890
For example the first error is on the title property,

129
00:05:31.890 --> 00:05:34.770
that it should not be empty.

130
00:05:34.770 --> 00:05:38.290
And the second error is on the price property,

131
00:05:38.290 --> 00:05:41.150
that it must be a positive number.

132
00:05:41.150 --> 00:05:44.950
And this is how easily you can add quite powerful

133
00:05:44.950 --> 00:05:47.960
validation to your projects with this

134
00:05:47.960 --> 00:05:50.170
decorator based approach.

135
00:05:50.170 --> 00:05:53.190
Related to what we did earlier in the course,

136
00:05:53.190 --> 00:05:54.530
and the decorators module,

137
00:05:54.530 --> 00:05:56.062
but as I mentioned multiple times,

138
00:05:56.062 --> 00:05:59.890
more elaborate with a bunch of built in rules,

139
00:05:59.890 --> 00:06:01.190
and you can learn all about that

140
00:06:01.190 --> 00:06:03.610
of course in the docs of this package,

141
00:06:03.610 --> 00:06:06.350
and without reinventing the wheel.

142
00:06:06.350 --> 00:06:09.300
So the class-validator package really is

143
00:06:09.300 --> 00:06:10.930
a powerful package you should be

144
00:06:10.930 --> 00:06:14.693
aware of if you're building bigger projects with TypeScript.

