WEBVTT

00:02.130 --> 00:02.963
Per questo, sono tornato

00:02.963 --> 00:05.260
alla configurazione del progetto fittizio, che abbiamo

00:05.260 --> 00:06.690
usato più e più volte.

00:06.690 --> 00:08.260
Lì, possiamo eseguire NPM starts

00:08.260 --> 00:10.190
per far apparire il server di sviluppo.

00:10.190 --> 00:13.690
Poi, in una nuova finestra di terminale con il server in esecuzione

00:13.690 --> 00:15.260
in un'altra finestra di terminale,

00:15.260 --> 00:17.419
eseguo TSC dash W per avviare il processo

00:17.419 --> 00:21.540
di compilazione di TypeScript e mantenerlo attivo e funzionante.

00:21.540 --> 00:23.470
Naturalmente, abbiamo una pagina vuota,

00:23.470 --> 00:24.560
perché non c'è nulla,

00:24.560 --> 00:27.060
ma ora possiamo giocare con il file TS dell'applicazione

00:27.060 --> 00:29.480
e iniziare a usare i generici.

00:29.480 --> 00:32.940
Penso che sia più facile capire i generici se diamo

00:32.940 --> 00:35.450
un'occhiata a un tipo predefinito,

00:35.450 --> 00:37.450
che è incorporato in TypeScript

00:37.450 --> 00:39.610
e con il quale abbiamo lavorato

00:39.610 --> 00:41.890
molto, che risulta essere un generico

00:41.890 --> 00:44.410
e cioè un array.

00:44.410 --> 00:46.900
Supponiamo di avere un array di nomi.

00:46.900 --> 00:50.370
Max e Manual, diciamo.

00:50.370 --> 00:51.620
Quindi abbiamo due

00:51.620 --> 00:54.610
nomi e, naturalmente, il tipo della costante

00:54.610 --> 00:57.210
del nome è un array di stringhe.

00:57.210 --> 00:59.610
In realtà, potremmo pensare che

00:59.610 --> 01:02.460
si tratti di due tipi combinati.

01:02.460 --> 01:05.760
Così come si può avere un oggetto con diverse proprietà,

01:05.760 --> 01:07.700
dove in ogni proprietà si può memorizzare

01:07.700 --> 01:09.310
un tipo diverso.

01:09.310 --> 01:13.750
Un array è sempre e solo una cosa con diversi dati al suo interno,

01:13.750 --> 01:16.440
in questo caso con stringhe.

01:16.440 --> 01:20.230
Quindi abbiamo il tipo di array, solo un array e se rimuovessi

01:20.230 --> 01:22.770
i nomi qui e li tagliassi, vedreste che TypeScript

01:22.770 --> 01:25.010
dedurrebbe che si tratta di un array

01:25.010 --> 01:29.140
di tipo qualsiasi con qualsiasi dato al suo interno.

01:29.140 --> 01:32.690
Infatti TypeScript conosce il tipo di array.

01:32.690 --> 01:35.280
Quindi potremmo dire che questo qui dovrebbe essere

01:35.280 --> 01:37.600
un array, ma come vedete, se lo specifico in questo

01:37.600 --> 01:39.900
modo, otteniamo un errore, anche se possiamo

01:39.900 --> 01:43.570
dire che questo tipo di array, come questo, esiste in TypeScript.

01:43.570 --> 01:45.870
Ma vediamo che è un tipo generico

01:45.870 --> 01:48.710
e che richiede un argomento di tipo.

01:48.710 --> 01:50.950
E questo è qualcosa che non abbiamo mai visto prima.

01:50.950 --> 01:53.870
Non abbiamo mai sentito parlare di tipi generici prima d'ora.

01:53.870 --> 01:55.750
Ora, questa strana notazione qui,

01:55.750 --> 01:58.120
ogni volta che si vede qualcosa del genere in

01:58.120 --> 02:01.060
TypeScript, si ha a che fare con un tipo generico.

02:01.060 --> 02:05.610
Un tipo generico è un tipo che è in qualche modo collegato a

02:05.610 --> 02:08.890
un altro tipo ed è molto flessibile per quanto

02:08.890 --> 02:12.920
riguarda il tipo esatto di quell'altro tipo.

02:12.920 --> 02:14.130
Sembra difficile?

02:14.130 --> 02:16.820
Torniamo all'esempio dell'array.

02:16.820 --> 02:19.380
Sappiamo che vogliamo memorizzare un array qui.

02:19.380 --> 02:22.250
Quindi un array stesso potrebbe essere un tipo,

02:22.250 --> 02:24.610
è un elenco di dati che di per sé costituisce

02:24.610 --> 02:26.730
già un tipo, si potrebbe dire.

02:26.730 --> 02:29.770
Proprio come un oggetto è un tipo a sé stante, anche se

02:29.770 --> 02:32.200
non si sa ancora quali dati vi entreranno.

02:32.200 --> 02:34.490
Quindi un array è un tipo a sé stante.

02:34.490 --> 02:38.230
Ma un array, ovviamente, contiene dati

02:38.230 --> 02:39.860
di un certo tipo.

02:39.860 --> 02:42.690
Il tipo di array in sé non si preoccupa del

02:42.690 --> 02:44.810
tipo di dati memorizzati.

02:44.810 --> 02:48.150
Il tipo array non si preoccupa di memorizzare un

02:48.150 --> 02:50.540
elenco di stringhe, di numeri, di

02:50.540 --> 02:52.430
oggetti o di dati misti.

02:52.430 --> 02:54.500
Il tipo di array non si preoccupa,

02:54.500 --> 02:58.640
ma si preoccupa di ottenere almeno qualche informazione, anche se

02:58.640 --> 03:01.200
gli si dice che non lo so, impostando questo

03:01.200 --> 03:02.960
tipo a un array qualsiasi.

03:02.960 --> 03:05.870
È meglio che non specificare nulla.

03:05.870 --> 03:08.330
Questo è un modo per definire un tipo di array, il tipo

03:08.330 --> 03:10.070
di dati che vi sono memorizzati e poi

03:10.070 --> 03:11.430
le parentesi quadre.

03:11.430 --> 03:14.620
L'altro modo, che creerebbe esattamente lo stesso tipo, sarebbe

03:14.620 --> 03:15.830
quello di usare la matrice

03:15.830 --> 03:17.630
e poi le parentesi angolari.

03:17.630 --> 03:20.030
Ora, tra queste parentesi angolari,

03:20.030 --> 03:22.340
si specifica il tipo di dati da inserire

03:22.340 --> 03:24.140
nell'array.

03:24.140 --> 03:26.330
Per esempio una stringa, e

03:26.330 --> 03:31.330
questo qui è al 100% lo stesso che definire questo tipo qui.

03:32.030 --> 03:34.950
Naturalmente, qui si potrebbe anche usare un tipo di unione

03:34.950 --> 03:37.730
per dire che questo array memorizza stringhe o numeri

03:37.730 --> 03:40.850
o usare qualsiasi tipo se non si vuole dire nulla sul tipo o, come

03:40.850 --> 03:42.970
abbiamo appena fatto, stringa.

03:42.970 --> 03:44.330
Si tratta quindi di un tipo generico,

03:44.330 --> 03:46.900
un tipo generico integrato in TypeScript.

03:46.900 --> 03:50.440
Un tipo che è collegato a un altro tipo, dove vogliamo

03:50.440 --> 03:53.980
sapere quale tipo è collegato a TypeScript, che

03:53.980 --> 03:56.810
può darci un supporto migliore.

03:56.810 --> 03:57.910
Perché, ad esempio,

03:57.910 --> 04:01.510
se sappiamo che ciò che memorizziamo sarà una stringa,

04:01.510 --> 04:04.380
sappiamo che ogni volta che accedo a un elemento

04:04.380 --> 04:06.143
di quell'array, posso fare

04:07.100 --> 04:09.410
cose di stringa con esso.

04:09.410 --> 04:12.260
Posso chiamare tutti questi metodi per le stringhe,

04:12.260 --> 04:15.280
ad esempio, e TypeScript non si lamenterà perché

04:15.280 --> 04:18.220
sa che questo array contiene stringhe.

04:18.220 --> 04:20.410
Questa è l'idea dei tipi generici.

04:20.410 --> 04:23.230
Un certo tipo, in questo caso il tipo di array,

04:23.230 --> 04:26.780
potrebbe semplicemente funzionare meglio o funzionare

04:26.780 --> 04:29.040
del tutto se si forniscono informazioni

04:29.040 --> 04:33.430
aggiuntive su un tipo di dati forniti in questo tipo di array e, naturalmente,

04:33.430 --> 04:36.590
il tipo di array è solo un esempio.

04:36.590 --> 04:39.840
Un altro tipo generico integrato in TypeScript

04:39.840 --> 04:42.130
è il tipo promise.

04:42.130 --> 04:45.470
Le promesse sono una caratteristica di JavaScript, giusto?

04:45.470 --> 04:46.970
Non è una caratteristica di TypeScript.

04:46.970 --> 04:49.437
È possibile creare promesse in JavaScript e, nel

04:49.437 --> 04:52.000
caso in cui non siate sicuri di cosa siano le promesse,

04:52.000 --> 04:53.870
in allegato trovate il link.

04:53.870 --> 04:58.150
Una promessa può essere creata utilizzando new promise.

04:58.150 --> 05:00.640
Anche in questo caso, si tratta di una funzione costruttrice,

05:00.640 --> 05:03.270
una classe incorporata in JavaScript e la funzione costruttrice

05:03.270 --> 05:05.870
della promessa prende un argomento, che a sua volta è

05:05.870 --> 05:07.640
una funzione, che a sua volta riceverà

05:07.640 --> 05:10.650
due argomenti, alla fine una funzione di risoluzione e una di

05:10.650 --> 05:12.580
rifiuto.

05:12.580 --> 05:15.180
Ora questi saranno trasmessi automaticamente

05:15.180 --> 05:17.790
da JavaScript nel browser.

05:17.790 --> 05:22.400
E poi in una promessa possiamo, ad esempio, impostare un timer e poi

05:22.400 --> 05:25.640
nella funzione di callback del timer possiamo

05:25.640 --> 05:28.140
risolvere la promessa esterna.

05:28.140 --> 05:30.140
Quindi, in questa funzione di callback,

05:30.140 --> 05:34.823
potremmo chiamare la funzione resolve e dire che questo è fatto.

05:36.500 --> 05:41.020
Quando lo facciamo, questa promessa crea un nuovo oggetto, un oggetto promise,

05:41.020 --> 05:43.860
che viene memorizzato nella costante promise.

05:43.860 --> 05:47.700
Ora, questa costante di promessa ha un tipo specifico.

05:47.700 --> 05:49.470
È di tipo promise e poi ancora,

05:49.470 --> 05:51.130
si vedono queste parentesi

05:51.130 --> 05:56.130
angolari perché questa promessa alla fine si risolverà in qualcosa.

05:56.480 --> 05:58.930
Ora qui dice unknown, perché TypeScript

05:58.930 --> 06:01.470
non è in grado di capire che in realtà si

06:01.470 --> 06:03.880
risolverà in una stringa.

06:03.880 --> 06:05.870
Ma possiamo dire che questa è una promessa,

06:05.870 --> 06:08.120
che alla fine produrrà una stringa e lo facciamo

06:08.120 --> 06:11.450
usando ancora una volta il nostro tipo generico.

06:11.450 --> 06:14.030
Il tipo principale è promise, ma una promise,

06:14.030 --> 06:16.120
proprio come un array, lavora

06:16.120 --> 06:18.380
insieme ad altri tipi.

06:18.380 --> 06:22.000
Un array utilizza altri tipi perché contiene dati di un certo

06:22.000 --> 06:23.350
tipo e la promessa lavora

06:23.350 --> 06:25.640
con altri tipi perché alla fine restituisce

06:25.640 --> 06:29.750
dati di un certo tipo e in questo caso si tratta di una promessa che alla

06:29.750 --> 06:32.940
fine restituisce una stringa.

06:32.940 --> 06:34.470
Di nuovo, perché è utile?

06:34.470 --> 06:37.550
Perché sono utili queste informazioni aggiuntive sul tipo?

06:37.550 --> 06:40.350
Beh, se avessimo solo un tipo promise qui e questo non sarebbe

06:40.350 --> 06:41.430
consentito, ma se dicessimo

06:41.430 --> 06:44.770
promise di tipo qualsiasi, che sarebbe fondamentalmente la stessa

06:44.770 --> 06:46.870
cosa di of types, non conoscerebbe i tipi generici

06:46.870 --> 06:48.390
se non avesse alcuna informazione

06:48.390 --> 06:51.280
su ciò che viene restituito.

06:51.280 --> 06:53.340
Naturalmente, su questa promessa, possiamo

06:53.340 --> 06:55.750
usarli come facciamo con tutte le promesse e alla

06:55.750 --> 06:57.770
fine otterremo dei dati, ma non sappiamo

06:57.770 --> 06:59.770
nulla di questi dati.

06:59.770 --> 07:02.500
Non posso chiamare un metodo stringa su di esso, ad esempio.

07:02.500 --> 07:04.850
Posso farlo perché in questo caso è qualsiasi, ma

07:04.850 --> 07:07.590
non ottengo alcun supporto particolare da TypeScript.

07:07.590 --> 07:11.313
Potrei anche provarci sopra, ma sicuramente non funzionerà.

07:12.170 --> 07:13.800
Ad esempio, se si inverte la rotta

07:13.800 --> 07:15.220
e si restituisce un numero,

07:15.220 --> 07:17.320
si può comunque chiamare un metodo stringa,

07:17.320 --> 07:19.390
perché TypeScript non ha informazioni

07:19.390 --> 07:22.640
sui dati che questa promessa restituirà.

07:22.640 --> 07:24.070
Ora, con i tipi generici, forniamo

07:24.070 --> 07:26.280
queste informazioni a TypeScript.

07:26.280 --> 07:28.160
Possiamo dire a TypeScript che questa

07:28.160 --> 07:30.240
promessa alla fine produrrà una stringa

07:30.240 --> 07:32.840
o, in questo caso, un numero e quindi TypeScript

07:32.840 --> 07:34.940
può avvisarci qui.

07:34.940 --> 07:37.390
Se provo a salvarlo, mi darà un errore

07:37.390 --> 07:40.870
perché sa che questa promessa alla fine produrrà un

07:40.870 --> 07:44.092
numero e si può chiamare split su questo.

07:44.092 --> 07:48.010
Pertanto, con i tipi generici si ottiene una migliore sicurezza dei tipi.

07:48.010 --> 07:50.510
In questo modo si è davvero flessibili su ciò che si fa

07:50.510 --> 07:52.720
con quelle informazioni di tipo generico.

07:52.720 --> 07:54.830
Un array sa quali dati memorizza, una

07:54.830 --> 07:57.140
promessa sa quali dati restituisce.

07:57.140 --> 07:59.840
Se si costruiscono le proprie classi o funzioni generiche, si può fare

07:59.840 --> 08:02.140
qualcosa di completamente diverso da quello che si fa qui.

08:02.140 --> 08:04.570
Ma alla fine i tipi generici aiutano a ottenere

08:04.570 --> 08:06.970
informazioni aggiuntive sul tipo se si

08:06.970 --> 08:10.640
ha una classe più complessa o una funzione più complessa che

08:10.640 --> 08:14.240
fa qualcosa con i dati in arrivo, in un modo in cui non gli interessa

08:14.240 --> 08:16.020
che i dati siano di un tipo particolare,

08:16.020 --> 08:18.700
ma in cui si vogliono memorizzare le informazioni

08:18.700 --> 08:21.500
sul tipo dai dati in arrivo per ottenere un migliore

08:21.500 --> 08:27.590
supporto TypeScript quando si lavora con il tipo generico.

08:27.590 --> 08:30.450
Quindi, ogni volta che si lavora con una promessa o un array

08:30.450 --> 08:33.270
di dati, questa è fondamentalmente l'idea dei generici.

08:33.270 --> 08:36.300
Quindi questo qui, tutti sono stati costruiti in modo generico.

08:36.300 --> 08:37.460
Commentiamo questo punto.

08:37.460 --> 08:40.450
Costruiamo ora la nostra parola di tipo generico.

08:40.450 --> 08:42.653
Utilizziamo i nostri tipi generici.
