WEBVTT

00:02.130 --> 00:04.110
Kursleiter: Wir haben hier unseren Entwicklungs-Workflow

00:04.110 --> 00:06.137
für Webpack vorbereitet, indem wir ihn für den

00:06.137 --> 00:08.490
Webpack Dev-Server konfiguriert, den Modus auf Entwicklung

00:08.490 --> 00:10.840
gesetzt und Source-Maps eingerichtet haben, um unsere

00:10.840 --> 00:13.210
Debugging-Erfahrung zu verbessern, um bessere Fehlermeldungen

00:13.210 --> 00:16.570
zu erhalten und so weiter.

00:16.570 --> 00:20.150
Für die Produktion, also wenn wir unseren Code vorbereiten wollen, um ihn auf

00:20.150 --> 00:23.260
einen Server hochzuladen, wo er dann unseren Endbenutzern zur Verfügung

00:23.260 --> 00:27.070
gestellt wird, wollen wir normalerweise einen anderen Arbeitsablauf.

00:27.070 --> 00:28.790
Deshalb füge ich eine neue Konfiguration namens

00:28.790 --> 00:31.820
webpack hinzu. Konfiguration. prod. js.

00:31.820 --> 00:33.210
Dieser Name ist nicht frei wählbar,

00:33.210 --> 00:36.043
da Webpack standardmäßig nicht danach sucht.

00:36.880 --> 00:39.710
Wir werden ihm aber gleich sagen, dass es danach suchen soll.

00:39.710 --> 00:41.920
Bevor wir das sagen, sollten wir

00:41.920 --> 00:44.708
das gesamte Entwicklungs-Setup in diese

00:44.708 --> 00:48.480
Konfiguration kopieren. prod-Datei, aber jetzt wollen wir sie noch feiner abstimmen.

00:48.480 --> 00:51.150
Wir können z. B. den Modus auf Produktion setzen.

00:51.150 --> 00:54.380
Damit wird Webpack angewiesen, diese Optimierungen vorzunehmen,

00:54.380 --> 00:56.550
unseren Code zu minimieren und so weiter, also

00:56.550 --> 00:59.220
sollten Sie dies hier unbedingt einstellen.

00:59.220 --> 01:00.440
Wir verlassen den Eingang.

01:00.440 --> 01:02.910
In der Ausgabe können wir den öffentlichen Pfad nicht loswerden,

01:02.910 --> 01:05.860
da dieser für den Webpack-Entwicklungsserver erforderlich war.

01:05.860 --> 01:08.810
Wir werden es hier nicht verwenden, denn für die Produktion wollen wir

01:08.810 --> 01:10.430
das Webpack-Skript ausführen und unsere

01:10.430 --> 01:12.940
Ausgabe generieren, die auf die Festplatte geschrieben

01:12.940 --> 01:16.900
und nicht vorübergehend auf einem lokal laufenden Server bereitgestellt wird.

01:16.900 --> 01:19.350
Wir können devtool auf none setzen, um hier

01:19.350 --> 01:22.090
keine Source-Maps zu erzeugen, da wir sie in der

01:22.090 --> 01:24.913
Produktion möglicherweise nicht benötigen.

01:26.140 --> 01:30.160
Der Rest kann so bleiben, wie er ist, aber wir werden mehr hinzufügen.

01:30.160 --> 01:34.620
Unten möchte ich einen Plugin-Eintrag hinzufügen und diesen

01:34.620 --> 01:36.220
auf ein Array setzen.

01:36.220 --> 01:41.070
Plugins sind zusätzliche Erweiterungen oder, nun ja, Plugins, die Sie zu Ihrem Webpack-Workflow

01:41.070 --> 01:43.020
hinzufügen können und die im Grunde

01:43.020 --> 01:46.080
auf die gesamte Ausgabe, das gesamte Projekt, angewendet

01:46.080 --> 01:47.820
werden.

01:47.820 --> 01:50.190
Regeln und Module werden spezifisch

01:50.190 --> 01:52.870
auf Dateiebene angewendet.

01:52.870 --> 01:57.260
Plugins werden auf den allgemeinen Arbeitsablauf angewendet.

01:57.260 --> 01:58.730
Hier möchte ich ein Plugin

01:58.730 --> 02:00.620
hinzufügen, das automatisch alles

02:00.620 --> 02:04.370
im dist-Ordner löscht, bevor eine neue Ausgabe dorthin geschrieben

02:04.370 --> 02:06.540
wird, so dass wir immer nur die neueste,

02:06.540 --> 02:09.410
aktuellste Ausgabe im dist-Ordner haben.

02:09.410 --> 02:11.900
Dazu installiere ich ein brandneues

02:11.900 --> 02:16.900
Paket mit --save-dev und das ist das clean-webpack-plugin.

02:19.090 --> 02:21.900
Dies wird uns helfen, den dist-Ordner

02:21.900 --> 02:26.360
aufzuräumen, wenn wir unser Projekt neu erstellen.

02:26.360 --> 02:29.820
Wenn wir das installiert haben, können wir es hier oben importieren.

02:29.820 --> 02:32.090
Ich nenne es CleanPlugin und importiere

02:32.090 --> 02:36.400
es mit require clean-webpack-plugin. Wenn es im Plugin-Array

02:36.400 --> 02:39.810
unten installiert ist, rufen wir einfach new CleanPlugin

02:39.810 --> 02:44.073
auf. CleanWebpackPlugin und instanziieren

02:45.422 --> 02:46.500
dieses.

02:46.500 --> 02:49.660
Dies ist eine Konstruktorfunktion und wird nun instanziiert.

02:49.660 --> 02:51.650
Dies ist alles, was Sie hier tun müssen

02:51.650 --> 02:53.260
und dies wird am Ende Webpack sagen,

02:53.260 --> 02:56.490
dass, bevor es etwas in diesen Ausgabeordner schreibt, es alles,

02:56.490 --> 02:58.593
was dort ist, löschen wird.

02:59.440 --> 03:02.020
Jetzt haben wir den fertigen Produktionsworkflow.

03:02.020 --> 03:04.620
Um es nun zu verwenden, gehen wir zu Paket. json und passen

03:04.620 --> 03:07.280
wir dort das Build-Skript an.

03:07.280 --> 03:10.510
Hier möchte ich Wepback anweisen, diese prod-Datei, diese Produktionskonfigurationsdatei

03:10.510 --> 03:13.110
zu verwenden, und wir tun dies, indem wir --config und dann

03:13.110 --> 03:21.140
webpack hinzufügen.

03:21.140 --> 03:21.140
Konfiguration. prod. js hier.

03:21.140 --> 03:23.610
Hier sollte der von Ihnen gewählte Dateiname stehen, der

03:23.610 --> 03:27.000
Webpack anweist, diese Konfigurationsdatei anstelle des Standard-Webpacks

03:27.000 --> 03:29.730
zu verwenden. Konfiguration. js-Datei, nach

03:29.730 --> 03:32.030
der er normalerweise sucht.

03:32.030 --> 03:34.600
Wenn Sie nun npn run build ausführen, wird Ihre Anwendung

03:34.600 --> 03:36.700
für die Produktion erstellt, was bedeutet,

03:36.700 --> 03:39.950
dass Sie diese optimierte Ausgabe erhalten.

03:39.950 --> 03:42.460
Wenn Sie also warten, haben wir hier das Bündel. js-Datei und dies ist

03:42.460 --> 03:45.110
nun wirklich der optimierte Code für die

03:45.110 --> 03:47.880
Produktion gebaut und dies zusammen mit Ihrem

03:47.880 --> 03:50.980
Index. html-Datei und die Anwendung. css-Datei ist das,

03:50.980 --> 03:53.800
was Sie hier auf einen Server legen würden, wenn Sie

03:53.800 --> 03:56.393
Ihre Anwendung bereitstellen wollen.

03:57.260 --> 04:00.440
Dies ist auch das Ende dieses Moduls.

04:00.440 --> 04:02.140
Lassen Sie mich nun zusammenfassen, was wir gelernt haben.
