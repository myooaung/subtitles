WEBVTT

00:02.090 --> 00:04.750
ผู้บรรยาย: ในการทำสิ่งที่ก้าวหน้ายิ่งขึ้นด้วยมัณฑนากร

00:04.750 --> 00:09.200
คุณจะต้องทราบว่ามัณฑนากรบางคน เช่น มัณฑนากรในคลาสแต่รวมถึงเมธอดมัณฑนากรด้วย

00:09.200 --> 00:14.650
ตัวอย่างเช่น อันที่จริงแล้วยังสามารถส่งคืนบางสิ่งได้ด้วย

00:14.650 --> 00:17.510
ตอนนี้ฉันไม่คืนอะไรให้กับมัณฑนากร

00:17.510 --> 00:22.460
ฉันไม่ได้พูดถึงฟังก์ชันมัณฑนากรซึ่งส่งคืนจากโรงงานมัณฑนากร

00:22.460 --> 00:26.040
ฉันหมายถึงค่าที่ส่งคืนภายในฟังก์ชันมัณฑนากร

00:26.040 --> 00:28.890
และเราไม่มีค่าดังกล่าวทุกที่

00:28.890 --> 00:31.559
ตอนนี้ในฟังก์ชัน WithTemplate ในฟังก์ชันตัวตกแต่ง

00:31.559 --> 00:36.930
WithTemplate นี้ ฉันควรจะบอกว่า เราสามารถเพิ่มค่าส่งคืนดังกล่าวได้

00:36.930 --> 00:38.520
และสิ่งที่คุณสามารถส่งคืนและสิ่งที่

00:38.520 --> 00:43.660
TypeScript สามารถใช้ได้นั้นขึ้นอยู่กับประเภทของมัณฑนากรที่คุณทำงานด้วย

00:43.660 --> 00:47.270
ที่นี่ เรากำลังทำงานกับมัณฑนากรที่เพิ่มเข้ามาในชั้นเรียน

00:47.270 --> 00:48.750
และในฟังก์ชันมัณฑนากรดังกล่าว

00:48.750 --> 00:53.800
คุณสามารถส่งคืนฟังก์ชันคอนสตรัคเตอร์ใหม่ ซึ่งจะแทนที่ฟังก์ชันเก่า

00:53.800 --> 00:58.330
ซึ่งจะแทนที่คลาสที่คุณเพิ่มในมัณฑนากรที่คุณพูดได้

00:58.330 --> 01:01.073
ในที่นี้เราสามารถคืนค่าฟังก์ชันใหม่

01:01.073 --> 01:02.490
ฟังก์ชันคอนสตรัคเตอร์ใหม่

01:02.490 --> 01:08.280
หรือเพียงแค่คืนค่าคลาสใหม่ ในตอนท้าย เนื่องจากคลาสซึ่งเป็นคีย์เวิร์ดของคลาส

01:08.280 --> 01:13.360
อนุญาตให้เราใช้น้ำตาลวากยสัมพันธ์นี้เพื่อสร้างฟังก์ชันคอนสตรัคเตอร์ดังกล่าว

01:13.360 --> 01:22.250
และคลาส ฉันสร้างที่นี่ไม่จำเป็นต้องมีชื่อ แต่เราทำได้และเราควรขยายตัวสร้างที่เราได้รับที่นี่

01:22.250 --> 01:25.848
สิ่งที่ฉันทำอยู่ตอนนี้คือในฟังก์ชันมัณฑนากรของฉันที่นี่

01:25.848 --> 01:30.910
ฉันกำลังส่งคืนคลาสใหม่ และจำไว้อีกครั้งว่านั่นเป็นเพียงน้ำตาลวากยสัมพันธ์สำหรับฟังก์ชันคอนสตรัคเตอร์

01:30.910 --> 01:32.770
ดังนั้นฉันจึงส่งคืนฟังก์ชันคอนสตรัคเตอร์

01:32.770 --> 01:35.400
ในท้ายที่สุด ซึ่งอิงตามฟังก์ชันคอนสตรัคเตอร์ดั้งเดิม

01:35.400 --> 01:42.610
ดังนั้นฉันจึงเก็บคุณสมบัติทั้งหมดของคลาสเดิมของฉัน ของฟังก์ชันคอนสตรัคเตอร์ดั้งเดิมของฉัน เราไม่จำเป็นต้องทำเช่นนั้น

01:42.610 --> 01:50.520
แต่ฉันไม่ต้องการสูญเสียคุณสมบัติของฉันที่นี่ ดังนั้น ฉันจะทำมัน.

01:50.520 --> 01:53.670
จากนั้นที่นี่เราสามารถเพิ่มฟังก์ชันใหม่ได้

01:53.670 --> 01:56.716
ตัวอย่างเช่น ฉันจะต้องเปลี่ยนชื่อบางอย่างที่นี่ ฉันสามารถเพิ่มฟังก์ชันคอนสตรัคเตอร์ใหม่เข้าไปได้

01:56.716 --> 02:04.040
และเพื่อหลีกเลี่ยงความสับสน ฉันจะเปลี่ยนชื่อคอนสตรัคเตอร์ที่ฉันได้รับที่นี่

02:04.040 --> 02:06.640
ดังนั้นคลาสที่ฉันเพิ่มมัณฑนากรนี้

02:06.640 --> 02:09.620
ฉันจะตั้งชื่อที่นี่ว่า originalConstructor

02:12.889 --> 02:15.690
และคัดลอกทั้งหมดที่นี่

02:15.690 --> 02:18.950
และตอนนี้ แทนที่จะใช้ฟังก์ชันคอนสตรัคเตอร์ตรงนี้

02:18.950 --> 02:27.410
ฉันต้องเรียก super เพื่อเรียกฟังก์ชันคอนสตรัคเตอร์ดั้งเดิมนี้จากข้างใน เพราะถ้าคุณเพิ่มฟังก์ชันคอนสตรัคเตอร์ในคลาสที่ขยายคลาสอื่น

02:27.410 --> 02:33.630
ซึ่งก็คือสิ่งที่เรา 'ทำที่นี่แล้วคุณต้องเรียกซุปเปอร์

02:33.630 --> 02:36.108
และตอนนี้ คุณสามารถเขียนตรรกะใดๆ ที่คุณต้องการได้ที่นี่

02:36.108 --> 02:40.040
และตัวอย่างเช่น ที่นี่ เราสามารถย้ายตรรกะการเรนเดอร์เทมเพลตนี้ที่นี่

02:40.040 --> 02:49.020
จากฟังก์ชันมัณฑนากรของเราไปยังฟังก์ชันคอนสตรัคเตอร์ใหม่ที่เรากลับมาที่นี่

02:49.020 --> 02:50.960
ย้ำอีกครั้งว่าเรากำลังสร้างคลาสที่นี่

02:50.960 --> 02:55.833
ซึ่งสุดท้ายแล้วก็แค่สร้างฟังก์ชันคอนสตรัคเตอร์ที่มีตรรกะนี้อยู่ในนั้น

02:56.670 --> 02:58.850
ตอนนี้สิ่งที่ฉันพยายามทำคือ

02:58.850 --> 03:01.367
ฉันพยายามแทนที่คลาส

03:01.367 --> 03:04.298
ฟังก์ชันคอนสตรัคเตอร์ที่เราเพิ่มมัณฑนากรของเราด้วยคลาสใหม่

03:04.298 --> 03:12.920
ด้วยฟังก์ชันคอนสตรัคเตอร์ใหม่ ซึ่งฉันยังคงดำเนินการตามตรรกะเก่า แต่ที่ฉันเพิ่มตรรกะใหม่ของฉันเองด้วย ดังนั้น

03:12.920 --> 03:21.340
ตอนนี้ เทมเพลตควรถูกเรนเดอร์เท่านั้น DOM ถ้าฉันยกตัวอย่างวัตถุของฉันที่นี่จริงๆ

03:21.340 --> 03:22.890
และไม่ใช่ทุกครั้ง เมื่อฟังก์ชันมัณฑนากรนี้ทำงาน

03:22.890 --> 03:29.620
ซึ่งตามที่คุณได้เรียนรู้ จะเกิดขึ้นทันทีที่เรากำหนดคลาส

03:29.620 --> 03:31.010
ปรับแต่งเล็กน้อยที่นี่ ฉันไม่เรียกตัวสร้างดั้งเดิมของฉันที่นี่อีกต่อไป

03:31.010 --> 03:37.380
แต่เราสามารถเข้าถึงสิ่งนี้ได้

03:37.380 --> 03:37.380
ชื่อเพื่อรับค่าคุณสมบัติของชื่ออินสแตนซ์ที่เรากำลังสร้าง

03:42.750 --> 03:47.750
ตอนนี้เราได้รับการร้องเรียนเล็กน้อยเกี่ยวกับประเภทที่ไม่ถูกต้อง

03:47.750 --> 03:53.990
ในการแก้ไขปัญหานั้น เราสามารถเปลี่ยนฟังก์ชันมัณฑนากรของเราให้เป็นฟังก์ชันทั่วไปที่เราได้รับประเภท

03:53.990 --> 03:57.113
และตั้งค่าให้เป็นประเภทของตัวสร้างดั้งเดิม

03:58.090 --> 04:01.668
และตอนนี้ทำให้ชัดเจนว่านี่จะเป็นฟังก์ชันตัวสร้างโดยพื้นฐาน

04:01.668 --> 04:05.780
และเราสามารถสร้างสิ่งนั้นได้ ชัดเจนโดยการกำหนดประเภทพิเศษ

04:05.780 --> 04:11.610
ประเภทออบเจกต์ ซึ่งเราตั้งค่าคุณสมบัติใหม่ แน่นอนว่าเป็นชื่อสำรอง แต่จะบอก TypeScript

04:11.610 --> 04:17.760
ว่าท้ายที่สุดแล้ว นี่จะเป็นออบเจกต์ที่สามารถสร้างใหม่ได้

04:17.760 --> 04:24.380
นั่นคือฟังก์ชันคอนสตรัคเตอร์ ซึ่งเป็นฟังก์ชันที่เราสามารถเรียกใช้ด้วยคีย์เวิร์ดใหม่เพื่อสร้างวัตถุใหม่

04:24.380 --> 04:27.410
และฟังก์ชันใหม่ วิธีการใหม่นี้ ซึ่งวัตถุ T อิงตาม

04:27.410 --> 04:30.660
จะมีอาร์กิวเมนต์เท่าใดก็ได้ ดังนั้นฉันจึงใช้พารามิเตอร์ที่เหลือที่นี่

04:30.660 --> 04:44.000
เพื่อยอมรับอาร์กิวเมนต์ได้มากเท่าที่คุณต้องการ เพื่อให้พวกมันมีความยืดหยุ่นจริงๆ เกี่ยวกับอาร์กิวเมนต์ที่สามารถส่งไปยังตัวสร้างของคลาสที่เรากำลังพยายามเปลี่ยนแปลง

04:45.420 --> 04:49.063
เพิ่มฟังก์ชันใหม่แล้วในที่สุดจะส่งคืนวัตถุที่นี่

04:50.140 --> 04:53.500
ตอนนี้ฉันควรคัดลอกการกำหนดพารามิเตอร์ส่วนที่เหลือไปยังตัวสร้างของฉันที่นี่

04:53.500 --> 04:57.640
เพื่อให้ตัวสร้างนี้ยังสามารถยอมรับอาร์กิวเมนต์ทั้งหมดที่เราอาจได้รับ

04:57.640 --> 05:04.380
เพื่อให้เราสามารถยกตัวอย่างบุคคลด้วยอาร์กิวเมนต์ใดๆ ที่คุณต้องการส่งผ่าน ที่นี่.

05:04.380 --> 05:06.610
ด้วยอาร์กิวเมนต์ใด ๆ ที่เราอาจต้องการที่นี่

05:06.610 --> 05:09.279
ในฟังก์ชันตัวสร้างดั้งเดิม

05:09.279 --> 05:11.600
และด้วยปัญหาเดียวที่เราจะเผชิญก็คือ

05:11.600 --> 05:14.021
เราไม่รู้ว่ามีคุณสมบัติชื่อดังกล่าวอยู่

05:14.021 --> 05:16.250
และถูกต้อง เราไม่รู้ว่าเราจะเพิ่มตัวตกแต่ง

05:16.250 --> 05:23.951
WithTemplate นี้ในคลาสใด ดังนั้นเราจึงไม่รู้ว่า หากจะมีคุณสมบัติชื่อในคลาสที่เราเพิ่มเข้าไป

05:23.951 --> 05:25.560
แต่เราสามารถแก้ไขได้โดยการบอก

05:25.560 --> 05:27.140
TypeScript ว่าวัตถุ T

05:27.140 --> 05:32.773
อิงตาม ดังนั้นฟังก์ชันคอนสตรัคเตอร์ดั้งเดิมของเราจะไม่เพียงแค่สร้างวัตถุใด

05:32.773 --> 05:41.140
ๆ แต่จริง ๆ แล้วจะสร้างวัตถุที่มีคุณสมบัติชื่อซึ่งจะเป็นประเภทสตริงและนั่นคือ ถูกต้อง.

05:41.140 --> 05:46.250
มัณฑนากร WithTemplate ของเราถูกเพิ่มไปยังคลาส ซึ่งจะมีคุณสมบัติชื่อ

05:46.250 --> 05:47.300
ถ้าฉันจะแสดงความคิดเห็น

05:47.300 --> 05:48.133
เราจะได้รับข้อผิดพลาด

05:48.133 --> 05:53.460
เพราะตอนนี้เราจะพยายามเพิ่มมัณฑนากรนี้ในชั้นเรียนที่ไม่เป็นไปตามเกณฑ์นี้ แต่ในที่นี้

05:53.460 --> 05:55.543
สิ่งนี้จะเติมเต็ม

05:55.543 --> 05:58.790
ตอนนี้ ฉันพบข้อผิดพลาดที่นี่เมื่อฉันพยายามคอมไพล์สิ่งนี้ เพราะฉันไม่ได้ใช้

05:58.790 --> 06:00.630
args ที่นี่ เราสามารถเปลี่ยนสิ่งนี้เป็น

06:00.630 --> 06:02.660
_ เพื่อบอก typescript ว่าเรารู้ว่าเราไม่ได้ใช้มัน

06:02.660 --> 06:06.230
และเราต้องการเพิกเฉยต่อสิ่งนี้

06:06.230 --> 06:08.050
นี่เป็นชื่อพารามิเตอร์ที่ถูกต้อง

06:08.050 --> 06:10.678
เป็นเพียงชื่อพิเศษที่ typescript ใช้เป็น

06:10.678 --> 06:15.260
ฉันเข้าใจแล้ว ฉันต้องยอมรับ แต่จะไม่ใช้พารามิเตอร์นั้น

06:15.260 --> 06:18.273
และด้วยเหตุนี้ คอมไพล์ทั้งหมดและถ้าเราโหลดซ้ำ

06:19.440 --> 06:22.420
คุณคงเห็น Max อยู่บนหน้านี้

06:22.420 --> 06:25.480
สิ่งที่น่าสนใจคือ ถ้าตอนนี้เราเอาโค้ดที่เราสร้างอินสแตนซ์ของ

06:25.480 --> 06:33.550
Person ออก ถ้าฉันแสดงความคิดเห็นนี้ออก เพื่อที่ฉันจะได้พบคลาสของ Person แต่ฉันไม่เคยสร้างอินสแตนซ์ที่ใดก็ได้ คุณจะเห็นว่าโหลดซ้ำ

06:33.550 --> 06:36.890
เราไม่เห็น Max บน หน้าจอ.

06:36.890 --> 06:42.410
นักตกแต่งทั้งหมดยังคงดำเนินการ แต่เราไม่ได้เรนเดอร์อะไรบนหน้าจออีกต่อไป

06:42.410 --> 06:43.243
และเหตุผลก็คือ

06:43.243 --> 06:46.340
ตอนนี้เราได้ปรับปรุงมัณฑนากรของเราที่นี่ให้ดียิ่งขึ้น

06:46.340 --> 06:49.520
โดยใช้ประโยชน์จากคุณสมบัติที่เราสามารถคืนค่าใหม่

06:49.520 --> 06:55.350
หรือในกรณีนี้คือฟังก์ชันคอนสตรัคเตอร์ใหม่

06:55.350 --> 06:57.205
ในกรณีของมัณฑนากร

06:57.205 --> 07:00.780
นี่คือฟังก์ชันคอนสตรัคเตอร์ใหม่ หรือคลาสใหม่ ซึ่งอย่างที่ฉันอธิบายไป

07:00.780 --> 07:04.300
เป็นเพียงน้ำตาลสังเคราะห์สำหรับฟังก์ชันคอนสตรัคเตอร์

07:04.300 --> 07:12.160
ดังนั้น ฟังก์ชันคอนสตรัคเตอร์นี้จึงแทนที่คลาสเดิมของเรา ซึ่งเป็นฟังก์ชันคอนสตรัคเดิมของเรา

07:12.160 --> 07:15.220
ทีนี้ เนื่องจากผมเรียกว่า super ตรงนี้

07:15.220 --> 07:17.610
เราจึงบันทึกฟังก์ชันเดิม

07:17.610 --> 07:22.540
เราบันทึกคลาสเดิม ทุกอย่างที่เราเริ่มต้นที่นี่โดยพื้นฐานแล้วยังคงเกิดขึ้น

07:22.540 --> 07:27.480
เพราะฉันทำแบบนั้นในตัวสร้างแทนที่ด้วย และขยายคลาสเดิม

07:27.480 --> 07:30.420
ดังนั้นเราจึงบันทึกทุกอย่างที่อยู่ในคลาสเดิม

07:30.420 --> 07:31.550
คุณไม่จำเป็นต้องทำอย่างนั้น

07:31.550 --> 07:35.560
แต่ฉันกำลังทำที่นี่ เพราะฉันไม่ต้องการสูญเสียข้อมูลต้นฉบับนั้น

07:35.560 --> 07:39.770
แต่เบื้องหลัง ฉันแทนที่คลาสด้วยคลาสที่กำหนดเองใหม่ของฉันที่นี่

07:39.770 --> 07:42.370
และนั่นทำให้เราสามารถเพิ่มตรรกะพิเศษ

07:42.370 --> 07:45.600
ซึ่งควรรันเมื่อคลาสถูกสร้างอินสแตนซ์

07:45.600 --> 07:49.090
และในตอนนี้ เราสามารถเพิ่มลอจิกที่ไม่รันเมื่อมีการกำหนดคลาส

07:49.090 --> 07:54.660
แต่เมื่อสร้างอินสแตนซ์ของคลาส

07:54.660 --> 07:57.150
และนี่ควรเป็นตัวอย่างแรกที่ดีของพลังเต็มที่ที่คุณสามารถปลดปล่อยกับนักตกแต่งได้

07:57.150 --> 08:04.480
หากคุณเข้าใจจริงๆ ว่าคุณสามารถทำอะไรกับพวกเขาได้บ้าง

08:04.480 --> 08:06.800
และคุณไม่สามารถกำหนดพวกมันเป็นฟังก์ชันได้

08:06.800 --> 08:09.970
และคุณไม่สามารถกำหนดพวกมันด้วยฟังก์ชันตัวประกอบได้

08:09.970 --> 08:12.600
ในมัณฑนากรบางตัว เช่น มัณฑนากรของคลาส

08:12.600 --> 08:19.470
คุณสามารถคืนค่าบางอย่างเพื่อแทนที่สิ่งที่คุณเพิ่มมัณฑนากรเข้าไปในกรณีของเราคือคลาส

08:19.470 --> 08:25.711
ด้วยคลาสใหม่ที่สามารถนำคลาสเก่าไปใช้ได้ แต่ยังเพิ่มตรรกะที่กำหนดเองใหม่

08:25.711 --> 08:28.004
และด้วยเหตุนี้ ถ้าเราแสดงความคิดเห็นกลับเข้าไป

08:28.004 --> 08:31.570
เราจะแสดง Max บนหน้าจออีกครั้งด้วยคลาสของเราเองที่มาแทนที่

08:31.570 --> 08:35.793
หรือขยายและแทนที่คลาสเก่า
