WEBVTT

00:02.390 --> 00:04.530
Instructeur: Nu is het verzenden van verzoeken

00:04.530 --> 00:06.890
mogelijk zonder een pakket van derden.

00:06.890 --> 00:10.140
In moderne JavaScript in moderne browsers

00:10.140 --> 00:11.910
moet je de API ophalen.

00:11.910 --> 00:13.620
Dit is ingebouwd in browsers,

00:13.620 --> 00:16.710
het is een wereldwijd beschikbare functie en u kunt het

00:16.710 --> 00:19.600
gebruiken om verzoeken naar URL's te sturen.

00:19.600 --> 00:22.450
Nu is er niets dat tegen deze API spreekt, behalve

00:22.450 --> 00:24.870
het feit dat de foutafhandeling ermee

00:24.870 --> 00:27.210
een beetje onhandig kan zijn.

00:27.210 --> 00:29.250
Maar ik wil ook het gebruik van bibliotheken

00:29.250 --> 00:31.123
van derden oefenen.

00:31.960 --> 00:36.070
Daarom zullen wij het zeer populaire axios-pakket gebruiken.

00:36.070 --> 00:38.510
Dit is een pakket dat u in JavaScript

00:38.510 --> 00:43.510
en dus ook in TypeScript kunt gebruiken om HTTP-verzoeken te versturen.

00:43.880 --> 00:47.263
Dus we hoeven alleen maar axios te installeren om het te gaan gebruiken.

00:48.100 --> 00:51.080
Voor dit in ons project waar we NPM kunnen gebruiken

00:51.080 --> 00:54.150
om afhankelijkheden te beheren, kunnen we npm install,

00:54.150 --> 00:57.620
dash, dash save axios gewoon uitvoeren en dit zal nu het

00:57.620 --> 01:00.520
axios pakket installeren.

01:00.520 --> 01:04.750
Met dit geïnstalleerd, kunnen we nu axios hier importeren, axios

01:04.750 --> 01:07.390
importeren van axios, en je zult iets interessants

01:07.390 --> 01:09.170
zien.

01:09.170 --> 01:12.090
Als ik dit nu ga gebruiken en ik typ hier een punt,

01:12.090 --> 01:13.990
dan krijg ik autocompletie.

01:13.990 --> 01:16.290
En bijvoorbeeld, je hebt hier een get methode

01:16.290 --> 01:18.523
die een get verzoek naar een URL stuurt.

01:19.850 --> 01:23.150
Dus hier hebben we eigenlijk ingebouwde TypeScript ondersteuning.

01:23.150 --> 01:25.640
En als we naar node modules gaan

01:25.640 --> 01:29.670
en we kijken naar het axios pakket, hier is het.

01:29.670 --> 01:33.970
U zult zien dat er een index is. dts bestand.

01:33.970 --> 01:38.970
De auteurs van de axios-bibliotheek hebben hun bibliotheek dus

01:39.430 --> 01:43.750
al gebundeld met zo'n TypeScript-vertaalpakket.

01:43.750 --> 01:47.440
Daarin wordt alles uitgelegd aan TypeScript.

01:47.440 --> 01:50.120
Dit pakket of dit bestand hier legt TypeScript

01:50.120 --> 01:53.660
uit wat deze JavaScript-bibliotheek kan en welke types

01:53.660 --> 01:55.600
ze gebruikt.

01:55.600 --> 01:59.100
Sommige bibliotheken doen dat en axios is er één van.

01:59.100 --> 02:02.070
Je weet vrij snel of een bibliotheek dit doet of niet, als

02:02.070 --> 02:03.420
je hem gaat gebruiken.

02:03.420 --> 02:05.520
Als u geen ondersteuning krijgt voor autocompletion

02:05.520 --> 02:07.930
en u krijgt veel compilatiefouten, dan moet u waarschijnlijk

02:07.930 --> 02:10.750
extra types installeren.

02:10.750 --> 02:12.970
Als je goede ondersteuning krijgt zoals

02:12.970 --> 02:16.120
wij hier en je krijgt daarna geen compilatiefouten meer,

02:16.120 --> 02:18.140
dan heb je al een bibliotheek met ingebouwde

02:18.140 --> 02:20.170
typevertalingen.

02:20.170 --> 02:23.120
En dus hoeft u geen extra types te installeren.

02:23.120 --> 02:26.240
Goed om te weten en hier hebben we een geweldig voorbeeld.

02:26.240 --> 02:27.800
Dus omdat we ingebouwde ondersteuning

02:27.800 --> 02:30.410
hebben, kunnen we toegang meteen gaan gebruiken.

02:30.410 --> 02:34.350
En ik wil nu een HTTP verzoek sturen naar deze URL.

02:34.350 --> 02:37.980
Dus laten we deze URL kopiëren en hier invoeren.

02:37.980 --> 02:40.220
En ik zal het tussen backticks invoeren

02:40.220 --> 02:42.440
om een template literal te maken, zodat

02:42.440 --> 02:45.880
ze gemakkelijk delen van deze string kunnen verwisselen

02:45.880 --> 02:49.050
voor dynamische voor andere waarden.

02:49.050 --> 02:51.730
Dus laten we die string erin plakken, hij is vrij lang

02:51.730 --> 02:55.460
en laten we beginnen met uw API-sleutel aan het einde te vervangen door onze

02:55.460 --> 02:59.210
Google API-sleutel die we hebben opgeslagen in deze constante.

02:59.210 --> 03:01.690
Hiervoor, aangezien dit een template literal

03:01.690 --> 03:04.110
is, kunnen we dollarteken toevoegen, accolades,

03:04.110 --> 03:09.110
en dan wijzen naar Google API sleutel om deze constante te gebruiken.

03:10.820 --> 03:13.240
Laten we bovendien dit adres omwisselen.

03:13.240 --> 03:15.500
Hier hebben we een dummy adres ingevoerd en natuurlijk

03:15.500 --> 03:17.130
wil ik daar het adres gebruiken dat

03:17.130 --> 03:19.300
de gebruiker heeft ingevoerd.

03:19.300 --> 03:22.540
Nu even een belangrijke opmerking, dit adres is natuurlijk

03:22.540 --> 03:24.910
precies de tekst die de gebruiker heeft ingevoerd

03:24.910 --> 03:27.560
en ze aangeboden kan speciale tekens, spaties,

03:27.560 --> 03:30.650
komma's, en nog veel meer bevatten.

03:30.650 --> 03:32.250
En niet al deze tekens

03:32.250 --> 03:35.580
en symbolen worden ondersteund in URL's.

03:35.580 --> 03:37.750
Dus moeten we deze ingevoerde string

03:37.750 --> 03:40.550
omzetten in een URL-compatibele string.

03:40.550 --> 03:43.810
En gelukkig hebben TypeScript en JavaScript

03:43.810 --> 03:46.940
specifiek een ingebouwde functie die ons

03:46.940 --> 03:50.460
daarbij helpt, de encodeer URI functie.

03:50.460 --> 03:53.020
We kunnen dat aanroepen en er een string aan

03:53.020 --> 03:54.770
doorgeven, die dan wordt omgezet

03:54.770 --> 03:57.460
in een URL-compatibele string.

03:57.460 --> 03:59.845
Daarmee hebben we de voltooide URL waarnaar

03:59.845 --> 04:01.600
we het verzoek kunnen sturen

04:01.600 --> 04:04.900
om onze coördinaten terug te krijgen.

04:04.900 --> 04:07.390
Nu geeft get ons een belofte, want natuurlijk

04:07.390 --> 04:10.620
is het versturen van zo'n verzoek een asynchrone taak.

04:10.620 --> 04:13.430
En daar hebben we dan een log als dit lukt of

04:13.430 --> 04:15.690
vangen als we een technische fout

04:15.690 --> 04:18.620
of een foutieve responscode hebben.

04:18.620 --> 04:21.560
Dus hier loggen we eventuele fouten die we op dit punt

04:21.560 --> 04:24.710
krijgen, want normaal gesproken zou het moeten lukken.

04:24.710 --> 04:27.820
En daarom verwacht ik hier mijn antwoord

04:27.820 --> 04:32.400
in het then blok en wil ik ook dit antwoord then loggen.

04:32.400 --> 04:35.820
Dus nu met dat, zou ik zeggen, laten we kijken wat dit ons geeft.

04:35.820 --> 04:39.720
Laten we NPM start opnieuw uitvoeren om dat webpack proces opnieuw op te starten

04:39.720 --> 04:40.953
en dit te bouwen.

04:42.120 --> 04:43.790
En laten we teruggaan naar onze

04:43.790 --> 04:47.220
toepassing en een plaats als Sixth Avenue invoeren.

04:47.220 --> 04:50.090
Als ik op Zoek Adres druk, zie je na een tijdje dat je hier

04:50.090 --> 04:51.480
een uitvoer krijgt.

04:51.480 --> 04:53.660
En daar zou je een statuscode van 200 moeten hebben,

04:53.660 --> 04:56.120
wat betekent dat het verzoek geslaagd is.

04:56.120 --> 04:59.090
En je hebt een gegevensveld dat de gegevens bevat

04:59.090 --> 05:01.240
waarmee de server antwoordt.

05:01.240 --> 05:03.890
Dat gegevensveld heeft een resultatenveld en

05:03.890 --> 05:06.570
daarin hebben we een array, zoals je kunt zien.

05:06.570 --> 05:10.690
In die matrix hebben we een paar items, het aantal varieert.

05:10.690 --> 05:13.770
En dit zijn eigenlijk de resultaten die Google vond.

05:13.770 --> 05:16.740
En het eerste resultaat is meestal het beste.

05:16.740 --> 05:18.790
Dus als je daar naar kijkt, zien we bijvoorbeeld

05:18.790 --> 05:20.460
het geformatteerde adres.

05:20.460 --> 05:22.520
Dus het adres dat Google heeft gevonden voor

05:22.520 --> 05:23.790
dit adres dat we hebben ingevoerd,

05:23.790 --> 05:26.570
is iets vollediger dan wat we hebben ingevoerd.

05:26.570 --> 05:29.300
En we hebben de geometrische sleutel hier.

05:29.300 --> 05:31.880
En als we dit uitbreiden, zien we dat het op zijn beurt

05:31.880 --> 05:35.240
een locatiesleutel heeft en dit is uiteindelijk een object met de

05:35.240 --> 05:37.540
coördinaten waarin we geïnteresseerd zijn,

05:37.540 --> 05:39.700
een breedtegraad en een lengtegraad.

05:39.700 --> 05:43.000
Dus uiteindelijk moeten we boren in gegevens, resultaten

05:43.000 --> 05:47.390
en dan daar het eerste resultaat, geometrie, locatie en we zullen een object

05:47.390 --> 05:50.030
hebben met een lengte- en breedtegraad.

05:50.030 --> 05:52.840
En later kunnen we deze lengte- en breedtegraad

05:52.840 --> 05:55.240
op een kaart weergeven.

05:55.240 --> 05:57.430
Dus voor nu halen we dit er gewoon

05:57.430 --> 05:59.360
uit en krijgen we onze coördinaten

05:59.360 --> 06:04.360
door toegang tot response dot data dot results.

06:04.600 --> 06:09.600
En dan het eerste resultaat punt geometrie punt locatie, dus

06:11.200 --> 06:13.093
echt boren in deze.

06:15.130 --> 06:16.880
Nu zult u natuurlijk merken

06:16.880 --> 06:19.850
dat TypeScript hier niet klaagt, maar dat we ook

06:19.850 --> 06:23.280
geen goede TypeScript ondersteuning hebben, toch?

06:23.280 --> 06:25.740
Als ik hier een punt typ, suggereert het niet dat

06:25.740 --> 06:27.620
er een resultaat eigenschap is.

06:27.620 --> 06:30.350
En inderdaad, ik zou hier alles kunnen proberen

06:30.350 --> 06:33.840
te openen, zelfs iets dat niet bestaat op het antwoord en dat

06:33.840 --> 06:34.820
is logisch.

06:34.820 --> 06:38.010
Hoe weet TypeScript wat er in het antwoord staat

06:38.010 --> 06:40.920
van een URL waarnaar ik een verzoek stuur?

06:40.920 --> 06:42.810
TypeScript gaat niet tijdens

06:42.810 --> 06:44.970
de ontwikkeling het verzoek sturen

06:44.970 --> 06:46.510
om uit te zoeken wat er in

06:46.510 --> 06:49.170
zit, dat zou ook niet zo goed zijn.

06:49.170 --> 06:51.400
Maar we kunnen TypeScript vertellen

06:51.400 --> 06:53.950
wat we verwachten in het antwoord, want deze

06:53.950 --> 06:58.950
get methode is eigenlijk een generieke methode en er is hier van alles, dat is eigenlijk

06:59.040 --> 07:02.830
het type van het antwoord dat we verwachten te krijgen.

07:02.830 --> 07:06.880
Hier kan ik dus mijn type antwoord toevoegen en TypeScript

07:06.880 --> 07:11.270
vertellen dat ik een object verwacht met een resultatensleutel,

07:11.270 --> 07:15.260
die op zijn beurt een array vol objecten is, waarbij

07:15.260 --> 07:18.330
elk object een geometriesleutel heeft,

07:18.330 --> 07:24.330
die op zijn beurt een object is met een lokatiesleutel, die op zijn beurt een

07:24.330 --> 07:28.160
object is met een breedtegraad, die een getal is,

07:28.160 --> 07:33.510
en een lengtegraad, die een getal is.

07:33.510 --> 07:36.030
Dus zeker een vrij complex type.

07:36.030 --> 07:39.400
Maar daarmee, als we hier een punt typen, krijg ik autocompletie

07:39.400 --> 07:42.220
en TypeScript begrijpt wat ik hier benader.

07:42.220 --> 07:44.860
En natuurlijk kunnen we ook dit type hieruit halen

07:44.860 --> 07:46.620
en ons eigen type alias maken.

07:46.620 --> 07:50.497
Misschien hier, Google geocodeer antwoord.

07:53.220 --> 07:55.380
Dat zou mijn aangepaste type hier

07:55.380 --> 07:58.420
zijn, en dan kan ik TypeScript vertellen dat ik hier

07:58.420 --> 08:01.540
die Google geocodering respons verwacht.

08:01.540 --> 08:03.900
Nu bevat het antwoord natuurlijk meer

08:03.900 --> 08:07.020
dan alleen de resultatenmatrix, het heeft ook een

08:07.020 --> 08:09.460
statuscode en meerdere andere velden in

08:09.460 --> 08:13.040
elk item van de resultatenmatrix, dan de geometrie.

08:13.040 --> 08:17.030
Nu kunt u natuurlijk gewoon al deze velden toevoegen aan uw aangepast

08:18.210 --> 08:21.330
type, maar hier wil ik me echt alleen concentreren

08:21.330 --> 08:25.640
op de waarden waarin ik actief geïnteresseerd ben.

08:25.640 --> 08:27.360
En daarom is er eigenlijk nog een ander

08:27.360 --> 08:30.900
veld dat ik zal toevoegen, en dat is de status naast de resultaten.

08:30.900 --> 08:34.520
Dus hier op het hoogste niveau hebben we status en dat zal een

08:34.520 --> 08:35.500
string zijn die

08:35.500 --> 08:38.390
ons vertelt of Google geslaagd is of niet.

08:38.390 --> 08:41.810
En status zal eigenlijk of oké zijn of een

08:41.810 --> 08:44.010
paar andere waarden.

08:44.010 --> 08:46.910
Dit is eigenlijk een statusbericht waarmee Google

08:46.910 --> 08:50.020
antwoordt of het al dan niet gelukt is om coördinaten

08:50.020 --> 08:51.890
voor dit adres op te halen.

08:51.890 --> 08:54.000
En natuurlijk kunnen we in de officiële documenten

08:54.000 --> 08:57.280
lezen wat voor reacties we hier terug kunnen krijgen.

08:57.280 --> 08:58.900
Als u iets naar beneden scrolt

08:58.900 --> 09:01.070
en klikt op begrijp het antwoord, leert

09:01.070 --> 09:04.240
u wat er in het antwoord staat dat u terugkrijgt en klikt

09:04.240 --> 09:07.000
u dus op geocodering van antwoorden.

09:07.000 --> 09:08.580
En dan op statuscodes, leren

09:08.580 --> 09:11.090
we over de beschikbare statuscodes.

09:11.090 --> 09:15.090
Zo kregen we allemaal nul resultaten als er niets werd gevonden.

09:15.090 --> 09:16.850
We hebben ook nog een paar andere codes,

09:16.850 --> 09:19.223
maar hier gaat het alleen om deze twee.

09:20.200 --> 09:23.310
Dus vertel ik TypeScript dat ik hier een statuscode krijg die

09:23.310 --> 09:24.890
een van deze twee waarden is.

09:24.890 --> 09:27.480
Nu weer, het kan ook een getalwaarde hebben,

09:27.480 --> 09:29.830
maar dit is goed voor mij hier.

09:29.830 --> 09:31.640
Zoals ik al zei, kun je dit natuurlijk

09:31.640 --> 09:33.700
vollediger schrijven.

09:33.700 --> 09:36.230
Nu dat is toegevoegd, kunnen we daar beneden in

09:36.230 --> 09:41.230
het then blok controleren of response dot data dot status niet in orde is, wat betekent dat er

09:41.580 --> 09:44.120
iets fout is gegaan en in dat geval kunnen we hier

09:44.120 --> 09:46.710
een fout gooien en komen we dus in het catch blok terecht

09:46.710 --> 09:48.090
waar we wat foutafhandeling

09:48.090 --> 09:49.810
kunnen instellen.

09:49.810 --> 09:54.280
Dus hier gooien we een foutmelding, kan locatie niet ophalen.

09:54.280 --> 09:57.080
En dan hier in de error handler om iets te doen, kunnen

09:57.080 --> 09:59.150
we een alert gooien waar we tenminste

09:59.150 --> 10:01.230
de foutmelding uitvoeren.

10:01.230 --> 10:04.660
Dit is natuurlijk slechts een zeer elementaire foutafhandeling.

10:04.660 --> 10:06.950
Anders, als we een succesvolle respons hebben,

10:06.950 --> 10:09.910
halen we hier onze coördinaten op en nu kunnen we deze coördinaten

10:09.910 --> 10:12.113
gebruiken om ze op een kaart uit te voeren.
