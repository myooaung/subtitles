WEBVTT

00:02.130 --> 00:03.970
Instruktur: Pertama-tama, kita dapat memulai

00:03.970 --> 00:06.480
server pengembangan kita di sini dengan npm start, dan ini adalah

00:06.480 --> 00:08.440
proses yang harus terus kita jalankan karena ini

00:08.440 --> 00:10.940
akan mengawasi file kita untuk perubahan.

00:10.940 --> 00:13.270
Dan jika ada sesuatu yang berubah, jadi jika Anda

00:13.270 --> 00:15.620
menyimpan perubahan secara khusus, itu akan mengkompilasi

00:15.620 --> 00:17.776
ulang jenis kode ke JavaScript, mengkompilasi

00:17.776 --> 00:20.090
ulang JSX ke JavaScript, dan pada akhirnya, kemudian

00:20.090 --> 00:22.500
membangun aplikasi react Anda dan menyajikannya

00:22.500 --> 00:27.630
di host lokal 3000, di mana, saat ini, Anda tidak melihat banyak.

00:27.630 --> 00:29.430
Anda hanya dapat melihatnya di sini di konsol

00:29.430 --> 00:31.800
Dev yang tampaknya berfungsi karena output itu di sini.

00:31.800 --> 00:32.900
Tentu saja Anda tidak melihat

00:32.900 --> 00:34.340
banyak karena kami tidak merender

00:34.340 --> 00:36.700
apa pun di sini di App. tsx saat ini.

00:36.700 --> 00:38.170
Itu tentu saja akan berubah.

00:38.170 --> 00:39.420
Dan dengan itu, sekarang

00:39.420 --> 00:41.130
mari kita tulis beberapa kode atau

00:41.130 --> 00:43.580
mari kita analisis apa yang kita dapatkan.

00:43.580 --> 00:46.750
Dalam indeks. tsx kita tidak memiliki sesuatu yang istimewa, bukan?

00:46.750 --> 00:49.060
Ini adalah kode JavaScript biasa.

00:49.060 --> 00:52.950
Dalam Aplikasi. tsx, kita melihat penugasan tipe ini

00:52.950 --> 00:55.250
dan di sana, apa yang dapat kita lihat adalah

00:55.250 --> 00:57.980
bahwa kita menetapkan tipe aneh ini ke App.

00:57.980 --> 01:00.270
Sekarang, jika kita abaikan tipe itu sejenak,

01:00.270 --> 01:02.480
apa yang sebenarnya tersimpan dalam App?

01:02.480 --> 01:04.840
Nah, fungsi, fungsi panah, tetapi itu masih

01:04.840 --> 01:07.290
merupakan fungsi biasa, oleh karena itu.

01:07.290 --> 01:09.960
Mengapa tipe di sini tidak berfungsi atau mengapa ini

01:09.960 --> 01:12.570
bukan salah satu tipe fungsi yang kita pelajari?

01:12.570 --> 01:14.030
Nah, ini ada di bawah kap, tetapi

01:14.030 --> 01:16.450
ini adalah tipe yang disediakan oleh react,

01:16.450 --> 01:18.100
dan sekarang, yang penting tentu

01:18.100 --> 01:21.070
saja disediakan oleh paket react types.

01:21.070 --> 01:26.070
Jika Anda masuk ke modul node, kita melihat folder @types di sini dan di sana,

01:26.390 --> 01:28.470
kita melihat banyak tipe, dan kita

01:28.470 --> 01:30.670
juga melihat tipe react di sini, semua

01:30.670 --> 01:32.600
tipe react-dom.

01:32.600 --> 01:35.840
Dan pada akhirnya, tipe ini secara implisit secara otomatis

01:35.840 --> 01:39.340
diimpor dari folder react types, bisa dibilang.

01:39.340 --> 01:40.870
Sekarang, apakah jenis ini?

01:40.870 --> 01:44.490
FC secara sederhana adalah singkatan dari function component (komponen fungsi).

01:44.490 --> 01:46.310
Ada juga bentuk yang lebih panjang dari ini, yang bisa

01:46.310 --> 01:47.570
Anda gunakan sebagai gantinya.

01:47.570 --> 01:49.240
Itu jenis yang persis sama.

01:49.240 --> 01:51.090
Yang lainnya hanyalah shortcut

01:51.090 --> 01:54.300
dan ini hanya mendefinisikan bahwa apa yang kita simpan

01:54.300 --> 01:57.750
di sini di App harus berupa fungsi, tetapi fungsi yang memenuhi

01:57.750 --> 02:00.550
syarat sebagai komponen fungsi dalam react.

02:00.550 --> 02:02.840
Anda juga tentu saja menulis komponen berbasis kelas,

02:02.840 --> 02:05.760
dan oleh karena itu, Anda memiliki komponen klasik di sini juga

02:05.760 --> 02:07.420
dan kemudian, Anda harus menyimpan

02:07.420 --> 02:09.480
kelas di sana alih-alih fungsi, tetapi kita

02:09.480 --> 02:12.720
akan menggunakan komponen fungsi di sini dalam kursus ini.

02:12.720 --> 02:14.670
Sekarang, ini adalah komponen fungsi

02:14.670 --> 02:17.620
karena ini adalah fungsi yang mengembalikan JSX dan

02:17.620 --> 02:20.850
begitulah cara komponen fungsi dibuat di react.

02:20.850 --> 02:24.180
Jika saya menghapus pernyataan kembali ini untuk sementara, maka kita bisa

02:24.180 --> 02:26.730
mendapatkan error di sini, semua jika saya mencoba untuk

02:26.730 --> 02:28.800
menyimpan ini dan ingin mengkompilasinya.

02:28.800 --> 02:32.440
Kita akan mendapatkan error karena sekarang, kita memberitahu TypeScript

02:32.440 --> 02:34.960
bahwa di sini, kita ingin menyimpan komponen fungsi,

02:34.960 --> 02:38.520
dan semua yang kita simpan adalah fungsi normal, bukan fungsi yang mengembalikan

02:38.520 --> 02:40.770
JSX atau apa pun yang memenuhi syarat sebagai

02:40.770 --> 02:42.800
elemen react.

02:42.800 --> 02:44.440
Dan oleh karena itu, ini tidak valid dan

02:44.440 --> 02:45.810
kami harus memperbaikinya.

02:45.810 --> 02:48.530
Jadi di sini, kita sudah bisa melihat bagaimana TypeScript

02:48.530 --> 02:50.360
sedikit meningkatkan proyek kita.

02:50.360 --> 02:52.500
Ini memberi kita keamanan tipe ekstra dan memastikan

02:52.500 --> 02:55.420
kita tidak dapat berjalan dalam situasi di mana kita, misalnya,

02:55.420 --> 02:58.353
kita membangun komponen yang tidak valid.

02:59.200 --> 03:03.230
Catatan tambahan, jika mungkin Anda merasa tidak realistis bahwa Anda akan melupakan pernyataan

03:03.230 --> 03:05.370
pengembalian ini, pertimbangkan bahwa Anda sedang

03:05.370 --> 03:07.970
membangun komponen yang lebih besar dengan beberapa pernyataan

03:07.970 --> 03:11.070
if dan pernyataan pengembalian yang berbeda.

03:11.070 --> 03:14.370
Anda mungkin lupa satu dalam satu cabang pernyataan if Anda dan kemudian

03:14.370 --> 03:17.010
TypeScript pasti dapat menyelamatkan Anda dan memberi

03:17.010 --> 03:19.130
Anda peringatan itu sedikit lebih awal, daripada

03:19.130 --> 03:21.500
selama runtime, di mana jika tidak, mungkin akan

03:21.500 --> 03:23.710
macet dalam beberapa situasi.

03:23.710 --> 03:25.620
Jadi ini adalah TypeScript yang melakukan sesuatu,

03:25.620 --> 03:27.740
tetapi dengan itu, cukup tentang pembicaraan.

03:27.740 --> 03:28.690
Mari kita membangun

03:28.690 --> 03:31.670
sesuatu dan saya ingin membangun aplikasi yang relatif sederhana

03:31.670 --> 03:34.590
di sini, aplikasi to-do, cukup klasik, tetapi aplikasi to-do

03:34.590 --> 03:36.370
yang memungkinkan kita untuk mempraktikkan

03:36.370 --> 03:39.480
beberapa konsep inti dari react dengan TypeScript.

03:39.480 --> 03:41.270
Dan oleh karena itu, dalam perkuliahan berikutnya,

03:41.270 --> 03:44.363
mari kita benar-benar memulai komponen kustom pertama kita.
