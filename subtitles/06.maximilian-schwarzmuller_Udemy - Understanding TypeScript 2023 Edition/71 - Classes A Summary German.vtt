WEBVTT

00:02.140 --> 00:04.200
-: Das war's mit dem Unterricht.

00:04.200 --> 00:06.180
Wir haben etwas über den Unterricht selbst gelernt.

00:06.180 --> 00:08.260
Wir lernten ihre Eigenschaften

00:08.260 --> 00:09.850
kennen, die Achsenmodifikatoren,

00:09.850 --> 00:12.110
private für interne Achsen, protected

00:12.110 --> 00:15.990
für interne Achsen auch in geerbten Klassen und public

00:15.990 --> 00:19.560
für Achsen von überall.

00:19.560 --> 00:21.610
Wir haben auch etwas über Methoden gelernt, die wir hinzufügen können.

00:21.610 --> 00:23.520
Über statische Methoden und Eigenschaften.

00:23.520 --> 00:25.520
Über abstrakte Methoden und abstrakte

00:25.520 --> 00:28.280
Klassen, was wichtig ist, wenn wir über ein anderes

00:28.280 --> 00:31.350
wichtiges Konzept sprechen, die Vererbung, die wir

00:31.350 --> 00:33.490
verwenden können.

00:33.490 --> 00:36.360
Hier erben wir von "Department" mit dem Schlüsselwort

00:36.360 --> 00:37.660
"extends".

00:37.660 --> 00:40.440
Dadurch können wir Funktionen, Eigenschaften und

00:40.440 --> 00:41.830
Methoden der Klasse "Abteilung"

00:41.830 --> 00:45.100
mit dieser vererbenden Klasse gemeinsam nutzen und unsere

00:45.100 --> 00:47.162
eigenen Funktionen hinzufügen oder

00:47.162 --> 00:50.300
bestehende Funktionen außer Kraft setzen.

00:50.300 --> 00:52.560
Entweder, weil wir überschreiben müssen, wie

00:52.560 --> 00:55.620
im Fall von "describe", das eine abstrakte Methode ist.

00:55.620 --> 00:58.710
Oder weil wir sie außer Kraft setzen wollen, wie im Fall von

00:58.710 --> 01:01.640
"addEmployee" hier in der Buchhaltungsabteilung.

01:01.640 --> 01:04.290
Das ist keine abstrakte Methode in der Basisklasse, aber natürlich

01:04.290 --> 01:07.540
können wir sie trotzdem überschreiben, wenn wir das wollen.

01:07.540 --> 01:10.370
Wir haben auch etwas über das Singleton-Muster und "private

01:10.370 --> 01:13.150
Konstruktoren" gelernt, die manchmal auch nützlich

01:13.150 --> 01:14.180
sein können.

01:14.180 --> 01:17.290
Und insgesamt haben Sie jetzt hoffentlich eine gute Vorstellung

01:17.290 --> 01:20.290
von Klassen und was Sie mit ihnen in TypeScript machen können.

01:20.290 --> 01:22.760
Im Allgemeinen müssen Sie natürlich wissen, was

01:22.760 --> 01:26.030
Klassen und Objekte sind, und auch ein bisschen, was Prototypen

01:26.030 --> 01:29.690
in Vanilla JavaScript sind, weil das im Allgemeinen nicht etwas ist,

01:29.690 --> 01:31.870
das von TypeScript eingeführt wurde, aber

01:31.870 --> 01:34.600
natürlich etwas, mit dem TypeScript verwandt ist, weil

01:34.600 --> 01:37.800
TypeScript auf diesen Standard-JavaScript-Funktionen aufbaut

01:37.800 --> 01:41.663
und seine eigene Magie auf diese Funktionen aufbaut.
