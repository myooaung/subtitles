WEBVTT

00:02.290 --> 00:04.300
Narrateur : Vous avez donc vu TypeScript

00:04.300 --> 00:06.700
en action et il offre de grands avantages.

00:06.700 --> 00:10.570
Cela rend l'écriture d'un code propre vraiment plus facile.

00:10.570 --> 00:14.060
TypeScript ajoute des Types et des données super importantes.

00:14.060 --> 00:16.810
Avec les types, nous devons être beaucoup plus explicites

00:16.810 --> 00:20.970
sur la façon dont les choses fonctionnent et nous pouvons éviter de nombreuses

00:20.970 --> 00:24.460
erreurs inacceptables et inutiles en utilisant les types.

00:24.460 --> 00:27.640
En plus de cela, nous pouvons également utiliser des IDE

00:27.640 --> 00:31.070
modernes qui ont une prise en charge intégrée des types et qui

00:31.070 --> 00:33.130
peuvent détecter ces types et nous donner

00:33.130 --> 00:36.940
une meilleure complétion automatique et des erreurs intégrées qui

00:36.940 --> 00:39.570
s'affichent avant même que nous compilions le

00:39.570 --> 00:43.050
code, car ils comprennent également TypeScript.

00:43.050 --> 00:46.870
Mais outre les types et les avantages considérables que nous obtenons en utilisant

00:46.870 --> 00:49.660
les types, nous bénéficions également d'autres fonctionnalités

00:49.660 --> 00:51.410
ajoutées par TypeScript.

00:51.410 --> 00:55.170
Nous pouvons utiliser certaines fonctionnalités JavaScript de nouvelle génération

00:55.170 --> 00:58.340
que vous pouvez écrire et utiliser dans nos fichiers TypeScript et qui

00:58.340 --> 01:01.890
seront ensuite compilées en code JavaScript afin d'offrir des solutions de

01:01.890 --> 01:05.630
contournement qui fonctionnent même dans les anciens navigateurs.

01:05.630 --> 01:08.170
Si vous connaissez Bevel, qui est un outil permettant

01:08.170 --> 01:11.120
de faire de même avec Vanilla JavaScript, c'est un peu

01:11.120 --> 01:14.680
la même chose, mais déjà intégré à TypeScript.

01:14.680 --> 01:18.350
Nous pouvons utiliser des fonctionnalités JavaScript modernes tout en produisant et en

01:18.350 --> 01:21.773
expédiant un code qui fonctionne également dans les navigateurs plus anciens.

01:22.610 --> 01:25.210
TypeScript ajoute également certaines fonctionnalités

01:25.210 --> 01:26.930
que seul TypeScript comprend, comme

01:26.930 --> 01:29.070
les interfaces et les génériques.

01:29.070 --> 01:32.560
Il s'agit de fonctionnalités qui compilent en JavaScript mais qui ne

01:32.560 --> 01:35.360
doivent pas l'être car ce sont des fonctionnalités qui

01:35.360 --> 01:39.610
nous aident pendant le développement, qui nous donnent des erreurs plus claires et

01:39.610 --> 01:42.200
qui nous aident à éviter encore plus d'erreurs.

01:42.200 --> 01:45.660
Il ajoute donc d'autres fonctionnalités sur ce front, en plus

01:45.660 --> 01:47.950
des types que nous connaissons déjà.

01:47.950 --> 01:50.900
Il nous donne également certaines fonctionnalités de métaprogrammation

01:50.900 --> 01:53.700
comme les décorateurs, sur lesquels j'ai un module entier

01:53.700 --> 01:55.850
dans ce cours où vous comprendrez ce que sont

01:55.850 --> 01:59.520
exactement les décorateurs, pourquoi ils sont si méta, et pourquoi ils

01:59.520 --> 02:01.790
sont étonnants.

02:01.790 --> 02:04.230
TypeScript alls est hautement configurable.

02:04.230 --> 02:06.390
Nous ne l'avons pas configuré jusqu'à présent,

02:06.390 --> 02:09.350
mais j'ai un module entier dans le cours où nous parlons uniquement

02:09.350 --> 02:12.510
du compilateur et de la façon de le configurer.

02:12.510 --> 02:15.700
Et vous pouvez vraiment l'adapter à vos besoins

02:15.700 --> 02:18.960
pour le rendre plus strict ou plus souple et faire

02:18.960 --> 02:23.310
en sorte qu'il se comporte exactement comme vous le souhaitez.

02:23.310 --> 02:26.790
Et grâce aux outils modernes des IDE modernes, vous bénéficiez

02:26.790 --> 02:30.610
même d'une prise en charge dans les projets non-TypeScript.

02:30.610 --> 02:33.700
L'environnement de développement intégré que vous venez de voir,

02:33.700 --> 02:37.740
Visual Studio Code, offre même une meilleure prise en charge des fichiers JavaScript

02:37.740 --> 02:41.010
ordinaires, car il est capable d'utiliser certaines fonctionnalités

02:41.010 --> 02:44.710
TypeScript sans que vous utilisiez explicitement TypeScript.

02:44.710 --> 02:47.640
Il s'agit donc d'un gain gratuit que vous obtenez d'emblée

02:47.640 --> 02:49.810
en étant conscient de TypeScript et en utilisant

02:49.810 --> 02:52.020
des outils modernes.

02:52.020 --> 02:54.830
Il existe donc de nombreuses raisons d'utiliser TypeScript et c'est

02:54.830 --> 02:57.460
probablement la raison pour laquelle vous avez suivi ce cours.

02:57.460 --> 03:00.360
Dans ce cours, nous allons maintenant l'apprendre étape par étape et

03:00.360 --> 03:03.663
nous allons découvrir toutes les fonctionnalités étonnantes qu'il ajoute.
