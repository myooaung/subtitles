WEBVTT

00:02.050 --> 00:04.090
Instructeur : Alors quel inconvénient avons-nous ?

00:04.090 --> 00:06.030
Voici le projet sur lequel nous

00:06.030 --> 00:08.020
avons travaillé, divisé en plusieurs

00:08.020 --> 00:12.390
fichiers en utilisant ces importations de modules ES6 ici.

00:12.390 --> 00:15.620
Maintenant, construisons effectivement ce projet et pour

00:15.620 --> 00:18.400
cela, comme nous l'avons fait auparavant, nous pouvons

00:18.400 --> 00:21.930
lancer npm-start pour faire apparaître le lite-server.

00:21.930 --> 00:24.710
Et bien sûr, très important dans un nouvel onglet,

00:24.710 --> 00:26.367
toute l'exécution tsc-dash

00:27.820 --> 00:31.430
pour démarrer la compilation TypeScript en mode veille.

00:31.430 --> 00:35.590
Cela nous donne notre projet et si nous ouvrons maintenant l'onglet Réseau dans les

00:35.590 --> 00:39.570
outils de développement du navigateur et que nous rechargeons ce fichier, nous

00:39.570 --> 00:42.360
verrons l'inconvénient que nous avons ici ou le problème

00:42.360 --> 00:44.840
que nous avons avec cette configuration.

00:44.840 --> 00:47.490
On voit un tas de requêtes HTTP.

00:47.490 --> 00:49.160
Maintenant vous pouvez ignorer les derniers

00:49.160 --> 00:51.380
ici, ils viennent de notre serveur de développement.

00:51.380 --> 00:58.290
Mais toutes ces demandes, nous les faisons ici pour les appliquer. js, project-input.

00:58.290 --> 00:58.290
js, liste de projets. js, composant de base. js

00:58.290 --> 01:00.960
et sur c'est le problème.

01:00.960 --> 01:04.610
Vous remarquerez que tous ces fichiers ne sont pas très volumineux,

01:04.610 --> 01:06.320
ils sont relativement petits.

01:06.320 --> 01:07.590
Donc, bien sûr, c'est

01:07.590 --> 01:11.010
très bien, mais nous avons beaucoup de demandes HTTP ici.

01:11.010 --> 01:12.600
Quel est le problème avec ça ?

01:12.600 --> 01:15.070
Le problème avec cela peut être vu si nous regardons

01:15.070 --> 01:17.810
cette chute d'eau ici sur la droite.

01:17.810 --> 01:20.330
Chaque requête HTTP qui doit être effectuée

01:20.330 --> 01:22.470
prend bien sûr un peu de temps.

01:22.470 --> 01:24.480
Le téléchargement des fichiers prend du temps,

01:24.480 --> 01:27.760
mais comme ils ne sont pas très volumineux, ce n'est pas un problème.

01:27.760 --> 01:31.390
Mais chaque requête HTTP a comme un coût de base, une

01:31.390 --> 01:34.540
durée de base qu'elle prend toujours.

01:34.540 --> 01:38.570
Cette petite boîte que vous voyez en face de ces graphiques ici.

01:38.570 --> 01:41.250
C'est à peu près le temps qu'il faut au navigateur

01:41.250 --> 01:43.910
pour préparer cette requête et l'envoyer.

01:43.910 --> 01:46.280
Ainsi, si le téléchargement effectif du

01:46.280 --> 01:49.600
fichier peut être relativement rapide, l'établissement

01:49.600 --> 01:52.860
de la demande, le travail sur le serveur, qui sert le fichier

01:52.860 --> 01:55.310
et tout cela prend un certain temps.

01:55.310 --> 01:57.890
Et maintenant, nous avons une installation très rapide

01:57.890 --> 02:00.310
parce que tout se passe sur notre machine.

02:00.310 --> 02:03.020
Nous avons un serveur de développement local.

02:03.020 --> 02:06.160
Si vous déployez cela sur le web, le fait d'avoir autant

02:06.160 --> 02:08.690
de requêtes peut vraiment introduire beaucoup

02:08.690 --> 02:11.140
de latence et ralentir votre projet simplement

02:11.140 --> 02:14.760
à cause de la quantité de requêtes HTTP effectuées.

02:14.760 --> 02:17.280
Donc si nous pouvons trouver une solution

02:17.280 --> 02:21.370
pour réduire ce nombre de requêtes HTTP, ce serait formidable.

02:21.370 --> 02:24.020
Et c'est là que webpack entre en jeu.

02:24.020 --> 02:28.190
Tu peux aller sur webpack. js. org, pour en savoir plus.

02:28.190 --> 02:30.290
En fin de compte, webpack est un

02:30.290 --> 02:33.750
outil qui nous aidera à regrouper nos fichiers.

02:33.750 --> 02:36.530
Et je peux vraiment recommander leur documentation

02:36.530 --> 02:39.980
étendue et complète que vous trouvez sur leur page.

02:39.980 --> 02:42.300
Si tu veux tout apprendre sur webpack.

02:42.300 --> 02:44.820
Dans ce cours, nous utiliserons certaines fonctionnalités sélectionnées

02:44.820 --> 02:46.563
qui nous aident avec TypeScript.

02:47.560 --> 02:49.850
Alors, qu'est-ce que c'est exactement, webpack ?

02:49.850 --> 02:53.850
Il s'agit d'un outil d'orchestration de regroupement, et on pourrait dire de construction.

02:53.850 --> 02:56.190
C'est un outil qui nous aide à réduire

02:56.190 --> 02:59.560
le nombre de requêtes HTTP en regroupant du code.

02:59.560 --> 03:03.010
Ainsi, nous écrivons du code réparti sur plusieurs fichiers,

03:03.010 --> 03:05.390
mais webpack prend ensuite tous ces fichiers

03:05.390 --> 03:07.050
et les regroupe.

03:07.050 --> 03:10.050
Et en plus, webpack est capable de faire plus.

03:10.050 --> 03:13.920
Il optimisera également notre code et nous permettra d'ajouter d'autres

03:13.920 --> 03:17.760
étapes de construction, d'autres outils de construction, par exemple,

03:17.760 --> 03:20.410
pour nous aider avec les fichiers CSS, etc.

03:20.410 --> 03:23.180
Mais ce n'est pas ce que nous allons voir dans ce module,

03:23.180 --> 03:26.220
car je veux me concentrer sur webpack et TypeScript.

03:26.220 --> 03:28.710
Tout d'abord, regardons notre configuration normale

03:28.710 --> 03:30.700
où nous n'utilisons pas webpack.

03:30.700 --> 03:32.800
Nous avons donc plusieurs fichiers TypeScript,

03:32.800 --> 03:34.870
mais si nous utilisons ensuite ces importations,

03:34.870 --> 03:36.920
nous obtenons plusieurs requêtes HTTP, ce qui

03:36.920 --> 03:40.220
n'est pas génial pour les raisons que j'ai mentionnées.

03:40.220 --> 03:43.450
En outre, un sujet que je n'ai pas examiné auparavant

03:43.450 --> 03:47.670
est que nous avons aussi très probablement un code non optimisé, ce

03:47.670 --> 03:51.290
qui signifie qu'il n'est pas aussi petit que possible.

03:51.290 --> 03:53.330
Nous pouvons certainement optimiser davantage

03:53.330 --> 03:55.750
le code en raccourcissant les noms de fonctions, etc.

03:55.750 --> 03:58.690
Et bien sûr, nous voulons un outil qui le fasse automatiquement,

03:58.690 --> 04:01.030
afin de ne pas avoir à travailler manuellement

04:01.030 --> 04:03.000
avec un code illisible.

04:03.000 --> 04:06.080
En tant que développeur, nous voulons écrire un code parfaitement lisible.

04:06.080 --> 04:07.850
Mais ce serait formidable si nous disposions

04:07.850 --> 04:10.740
d'un outil qui raccourcisse ce code et le rende vraiment aussi

04:10.740 --> 04:14.960
petit que possible, en utilisant des noms de variables et de fonctions aussi courts

04:14.960 --> 04:17.170
que possible, afin que nous expédions le moins

04:17.170 --> 04:19.130
de code possible.

04:19.130 --> 04:22.940
Parce que moins de code signifie que les utilisateurs peuvent le télécharger plus

04:22.940 --> 04:25.530
rapidement, ce qui signifie que notre application peut

04:25.530 --> 04:27.600
démarrer plus rapidement sur nos machines.

04:27.600 --> 04:29.440
En outre, dans notre configuration actuelle,

04:29.440 --> 04:32.860
nous avons ce serveur de développement supplémentaire, lite-server, qui

04:32.860 --> 04:35.150
est un paquet supplémentaire installé, que nous

04:35.150 --> 04:36.860
devons mettre en route.

04:36.860 --> 04:39.320
Ce ne serait pas un petit bonus, un joli bonus si

04:39.320 --> 04:42.280
nous avions une commande qui ferait tout, construire notre

04:42.280 --> 04:45.360
projet, mais aussi faire tourner un tel serveur, qui recharge

04:45.360 --> 04:48.170
automatiquement notre site web chaque fois que nous changeons

04:48.170 --> 04:50.713
un fichier dans notre projet.

04:51.550 --> 04:54.270
C'est là que webpack peut nous aider.

04:54.270 --> 04:57.240
Il regroupe notre code de sorte que nous ayons moins d'importations

04:57.240 --> 05:00.670
et que nous ayons plutôt des paquets de code que nous expédions, il

05:00.670 --> 05:05.100
nous aide à optimiser notre code, à le minifier comme on l'appelle, de sorte que nous expédions

05:05.100 --> 05:06.717
moins de code et que nos utilisateurs

05:06.717 --> 05:10.130
aient moins de code à télécharger.

05:10.130 --> 05:12.530
Et nous pouvons aussi facilement ajouter d'autres étapes

05:12.530 --> 05:15.750
de construction si vous le souhaitez, nous pouvons ajouter un serveur de développement

05:15.750 --> 05:19.270
mais nous pouvons aussi faire beaucoup d'autres choses si nous le voulons vraiment

05:19.270 --> 05:22.160
et la documentation officielle de webpack est l'endroit où aller si

05:22.160 --> 05:24.130
vous voulez tout apprendre.

05:24.130 --> 05:27.880
Avec cela, voyons un exemple de configuration dans notre projet et apprenons

05:27.880 --> 05:30.433
comment nous pourrions y utiliser webpack.
