WEBVTT

00:02.440 --> 00:05.240
Abbiamo visto come si possano costruire cose piuttosto

00:05.240 --> 00:08.120
sorprendenti con i decoratori, le fabbriche di decoratori

00:08.120 --> 00:11.740
e poi anche utilizzando i valori di ritorno dei decoratori; negli

00:11.740 --> 00:12.790
esempi, il decoratore

00:12.790 --> 00:14.930
di classi ci permette di sostituire la

00:14.930 --> 00:18.740
classe a cui abbiamo aggiunto il decoratore con una classe completamente

00:18.740 --> 00:21.400
diversa, che si basa sulla classe esistente, come

00:21.400 --> 00:23.900
nel nostro caso, e che quindi potrebbe aggiungere

00:23.900 --> 00:27.230
alcune funzionalità.

00:27.230 --> 00:30.490
Ora è possibile restituire valori anche in altri decoratori,

00:30.490 --> 00:32.030
ma non in tutti.

00:32.030 --> 00:35.430
Oppure non in tutti il valore di ritorno è rispettato.

00:35.430 --> 00:38.150
Ora, i decoratori che permettono di restituire qualcosa

00:38.150 --> 00:41.330
sono i decoratori che si possono aggiungere ai metodi e i decoratori

00:41.330 --> 00:43.540
che si aggiungono agli accessi.

00:43.540 --> 00:47.400
Quindi, nel setter log 2 e log 3 del metodo, questi due

00:47.400 --> 00:51.210
decoratori, log 2 e log 3, potrebbero restituire qualcosa

00:51.210 --> 00:54.080
e TypeScript lo userebbe.

00:54.080 --> 00:58.040
Naturalmente, anche i decoratori sulle proprietà e sui parametri

00:58.040 --> 01:00.670
possono restituire qualcosa, ma TypeScript

01:00.670 --> 01:02.500
lo ignorerà.

01:02.500 --> 01:05.030
Quindi i valori di ritorno non sono supportati

01:05.030 --> 01:07.700
o non sono utilizzati per essere precisi.

01:07.700 --> 01:09.690
Ora, cosa si può restituire sul log 3?

01:09.690 --> 01:12.680
Così sui decoratori di metodi e sul log 2,

01:12.680 --> 01:15.320
così sui decoratori di accessi.

01:15.320 --> 01:19.320
È possibile restituire un descrittore di proprietà nuovo di zecca.

01:19.320 --> 01:22.050
Log 2 e log 3, che sono i due decoratori di cui sto parlando,

01:22.050 --> 01:23.110
giusto?

01:23.110 --> 01:28.110
I log 2 e 3 ottengono entrambi il descrittore dalla proprietà o dal

01:28.170 --> 01:30.510
metodo a cui sono collegati.

01:30.510 --> 01:33.034
Poiché un accessor è un po' come un metodo,

01:33.034 --> 01:36.220
c'è una funzione che viene eseguita lì.

01:36.220 --> 01:39.072
Ora, il descrittore delle proprietà è un elemento

01:39.072 --> 01:41.980
di JavaScript, come sapete, se guardiamo di nuovo

01:41.980 --> 01:44.500
questa pagina e la ricarichiamo, vediamo

01:44.500 --> 01:47.260
che, per esempio per il nostro decoratore di accessi,

01:47.260 --> 01:50.497
il descrittore delle proprietà è questo oggetto qui che

01:50.497 --> 01:52.470
ha le proprietà configurabili, enumerabili,

01:52.470 --> 01:54.910
get e set.

01:54.910 --> 01:57.660
E per il decoratore di metodi, il nostro descrittore è questo

01:57.660 --> 01:59.330
oggetto, che ha anche le caratteristiche

01:59.330 --> 02:02.290
di configurabile, enumerabile, valore e scrivibile.

02:02.290 --> 02:04.410
E questo è JavaScript vanilla.

02:04.410 --> 02:07.830
I descrittori di proprietà sono presenti anche in JavaScript vanilla.

02:07.830 --> 02:11.710
Permettono di definire una proprietà in modo più dettagliato.

02:11.710 --> 02:14.430
Si può naturalmente assegnare un valore a una proprietà e,

02:14.430 --> 02:15.990
poiché stiamo parlando di un metodo,

02:15.990 --> 02:17.940
in questo caso il valore è una funzione, ma

02:17.940 --> 02:20.010
si può anche controllare se è scrivibile, quindi

02:20.010 --> 02:22.910
se può essere modificata dopo che è stata creata, dopo che l'oggetto

02:22.910 --> 02:24.700
è stato creato.

02:24.700 --> 02:25.950
Se è configurabile, quindi se è

02:25.950 --> 02:27.140
possibile modificare la configurazione

02:27.140 --> 02:29.570
e se è possibile eliminare questa proprietà.

02:29.570 --> 02:30.770
E se è enumerabile, cioè

02:30.770 --> 02:33.166
se viene visualizzato quando si esegue il

02:33.166 --> 02:35.410
ciclo dell'oggetto, ad esempio.

02:35.410 --> 02:36.810
E quindi un metodo, ad esempio per

02:36.810 --> 02:38.790
impostazione predefinita, è impostato su false,

02:38.790 --> 02:40.930
in modo che se si utilizza un ciclo for in su un oggetto,

02:40.930 --> 02:44.040
questo metodo non viene stampato come proprietà.

02:44.040 --> 02:45.240
Per un accessor abbiamo

02:45.240 --> 02:47.180
anche configurable ed enumerable,

02:47.180 --> 02:49.750
ma abbiamo get e set e, naturalmente, si potrebbe

02:49.750 --> 02:53.040
anche, per esempio, restituire un nuovo descrittore che

02:53.040 --> 02:56.180
assegna un nuovo metodo set o che improvvisamente aggiunge

02:56.180 --> 02:58.750
anche una funzionalità get.

02:58.750 --> 03:01.585
Quindi, qui nel registro 2 e nel registro 3 si

03:01.585 --> 03:05.190
può restituire un nuovo oggetto descrittore alla fine

03:05.190 --> 03:08.020
e rendere chiaro a TypeScript che lo si farà

03:08.020 --> 03:10.560
restituendo o impostando il tipo di ritorno

03:10.560 --> 03:14.860
a property descriptor e quindi si può anche impostare la parola chiave

03:14.860 --> 03:17.010
set, la parola chiave get, la proprietà

03:17.010 --> 03:22.010
configurable o enumerable e cambiare il modo in cui questo accessor o metodo

03:22.500 --> 03:24.800
è configurato.

03:24.800 --> 03:27.560
Non voglio farlo per l'accessor, non c'è niente

03:27.560 --> 03:29.800
di interessante da fare, quindi non restituirò

03:29.800 --> 03:32.520
un descrittore di proprietà, ma vi mostrerò

03:32.520 --> 03:36.400
un esempio con il decoratore del metodo, dove restituiremo qualcosa

03:36.400 --> 03:40.080
e potremo costruire qualcosa di interessante con l'aiuto dei

03:40.080 --> 03:42.533
decoratori.
