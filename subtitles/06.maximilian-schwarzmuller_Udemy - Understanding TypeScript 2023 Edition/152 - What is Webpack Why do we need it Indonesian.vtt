WEBVTT

00:02.050 --> 00:04.090
Instruktur: Jadi, kerugian mana yang kita miliki?

00:04.090 --> 00:06.030
Ini adalah proyek yang kami

00:06.030 --> 00:08.020
kerjakan, dipecah menjadi

00:08.020 --> 00:12.390
beberapa file menggunakan impor modul ES6 di sini.

00:12.390 --> 00:15.620
Sekarang, mari kita secara aktual membangun proyek ini dan untuk

00:15.620 --> 00:18.400
itu, seperti yang kita lakukan sebelumnya, kita dapat

00:18.400 --> 00:21.930
menjalankan npm-start untuk memunculkan lite-server.

00:21.930 --> 00:24.710
Dan tentu saja, sangat penting dalam tab baru,

00:24.710 --> 00:26.367
semua menjalankan tsc-dash

00:27.820 --> 00:31.430
untuk memulai kompilasi TypeScript dalam mode tontonan.

00:31.430 --> 00:35.590
Ini memberi kita proyek kita dan jika sekarang kita membuka tab Jaringan di

00:35.590 --> 00:39.570
alat pengembang browser dan kita memuat ulang file ini, kita akan melihat

00:39.570 --> 00:42.360
kerugian yang kita miliki di sini atau masalah yang

00:42.360 --> 00:44.840
kita miliki dengan pengaturan ini.

00:44.840 --> 00:47.490
Kita melihat sekumpulan permintaan HTTP.

00:47.490 --> 00:49.160
Sekarang Anda dapat mengabaikan yang terakhir

00:49.160 --> 00:51.380
di sini, ini berasal dari server pengembangan kami.

00:51.380 --> 00:58.290
Tetapi semua ini permintaan kami di sini untuk aplikasi. js, proyek-masukan.

00:58.290 --> 00:58.290
js, daftar proyek. js, komponen dasar. js

00:58.290 --> 01:00.960
dan seterusnya itulah masalahnya.

01:00.960 --> 01:04.610
Anda akan melihat bahwa semua file ini tidak terlalu

01:04.610 --> 01:06.320
besar, relatif kecil.

01:06.320 --> 01:07.590
Jadi tentu saja itu baik-baik

01:07.590 --> 01:11.010
saja tetapi kami memiliki banyak permintaan HTTP di sini.

01:11.010 --> 01:12.600
Sekarang apa masalahnya dengan itu?

01:12.600 --> 01:15.070
Masalah dengan itu bisa dilihat jika kita

01:15.070 --> 01:17.810
melihat air terjun di sebelah kanan.

01:17.810 --> 01:20.330
Setiap permintaan HTTP yang perlu dilakukan tentu

01:20.330 --> 01:22.470
saja membutuhkan sedikit waktu.

01:22.470 --> 01:24.480
Perlu waktu untuk mengunduh file, tetapi

01:24.480 --> 01:27.760
karena file tidak terlalu besar, itu tidak menjadi masalah.

01:27.760 --> 01:31.390
Tetapi setiap permintaan HTTP memiliki overhead dasar,

01:31.390 --> 01:34.540
durasi dasar yang selalu dibutuhkan.

01:34.540 --> 01:38.570
Kotak kecil yang Anda lihat di depan grafik ini di sini.

01:38.570 --> 01:41.250
Itu mendekati waktu yang diperlukan browser untuk

01:41.250 --> 01:43.910
menyiapkan permintaan itu dan mengirimkannya.

01:43.910 --> 01:46.280
Jadi, meskipun pengunduhan file yang sebenarnya

01:46.280 --> 01:49.600
mungkin relatif cepat, namun menyiapkan permintaan, melakukan

01:49.600 --> 01:52.860
pekerjaan pada server, yang melayani file dan sebagainya,

01:52.860 --> 01:55.310
semuanya memerlukan waktu.

01:55.310 --> 01:57.890
Dan sekarang di sini kita memiliki penyiapan yang sangat

01:57.890 --> 02:00.310
cepat karena semuanya terjadi pada mesin kita.

02:00.310 --> 02:03.020
Kami punya server pengembangan lokal dari semua.

02:03.020 --> 02:06.160
Jika Anda menyebarkannya ke web, memiliki banyak permintaan

02:06.160 --> 02:08.690
itu benar-benar dapat menimbulkan banyak

02:08.690 --> 02:11.140
latensi dan memperlambat proyek Anda hanya

02:11.140 --> 02:14.760
karena banyaknya permintaan HTTP yang dibuat.

02:14.760 --> 02:17.280
Jadi, jika kita bisa menemukan solusi untuk

02:17.280 --> 02:21.370
mengurangi jumlah permintaan HTTP, itu akan luar biasa.

02:21.370 --> 02:24.020
Dan di situlah webpack berperan.

02:24.020 --> 02:28.190
Anda bisa pergi ke webpack. js. org, untuk mempelajari lebih lanjut tentang hal itu.

02:28.190 --> 02:30.290
Pada akhirnya webpack adalah alat

02:30.290 --> 02:33.750
yang akan membantu kita menggabungkan file-file kita.

02:33.750 --> 02:36.530
Dan saya sangat merekomendasikan dokumentasi mereka yang

02:36.530 --> 02:39.980
ekstensif dan komprehensif yang Anda temukan di halaman mereka.

02:39.980 --> 02:42.300
Jika Anda ingin mempelajari semua tentang webpack.

02:42.300 --> 02:44.820
Dalam kursus ini, kita akan menggunakan beberapa fitur pilihan

02:44.820 --> 02:46.563
yang membantu kita dengan TypeScript.

02:47.560 --> 02:49.850
Jadi, apa sebenarnya webpack itu?

02:49.850 --> 02:53.850
Ini adalah bundling, dan bisa dibilang alat orkestrasi bangunan.

02:53.850 --> 02:56.190
Ini adalah alat yang membantu kita mengurangi

02:56.190 --> 02:59.560
jumlah permintaan HTTP dengan menggabungkan kode bersama.

02:59.560 --> 03:03.010
Sehingga kita menulis kode yang terpecah di beberapa file tetapi

03:03.010 --> 03:05.390
webpack kemudian mengambil semua file ini

03:05.390 --> 03:07.050
dan menggabungkannya.

03:07.050 --> 03:10.050
Dan selain itu webpack mampu melakukan lebih banyak hal.

03:10.050 --> 03:13.920
Ini juga akan mengoptimalkan kode kita dan juga memungkinkan kita untuk menambahkan

03:13.920 --> 03:17.760
lebih banyak langkah build, lebih banyak alat build, misalnya, untuk membantu

03:17.760 --> 03:20.410
kita dengan file CSS dan sebagainya.

03:20.410 --> 03:23.180
Namun, bukan itu yang akan kita lihat dalam modul ini,

03:23.180 --> 03:26.220
karena saya ingin fokus pada webpack dan TypeScript.

03:26.220 --> 03:28.710
Jadi pertama-tama mari kita lihat pengaturan normal kita

03:28.710 --> 03:30.700
di mana kita tidak menggunakan webpack.

03:30.700 --> 03:32.800
Di sana kita memiliki beberapa file TypeScript

03:32.800 --> 03:34.870
tetapi jika kita kemudian menggunakan impor

03:34.870 --> 03:36.920
ini, kita mendapatkan beberapa permintaan

03:36.920 --> 03:40.220
HTTP, yang tidak terlalu bagus untuk alasan yang saya sebutkan.

03:40.220 --> 03:43.450
Selain itu, topik yang belum pernah saya bahas sebelumnya

03:43.450 --> 03:47.670
adalah kita juga sangat mungkin memiliki kode yang belum dioptimalkan,

03:47.670 --> 03:51.290
yang berarti tidak sekecil mungkin.

03:51.290 --> 03:53.330
Kita tentu bisa lebih mengoptimalkan kode dengan

03:53.330 --> 03:55.750
mempersingkat nama fungsi dan sebagainya.

03:55.750 --> 03:58.690
Dan tentu saja, kita menginginkan alat yang melakukan ini secara otomatis,

03:58.690 --> 04:01.030
sehingga kita tidak perlu bekerja secara manual dengan

04:01.030 --> 04:03.000
kode yang tidak dapat dibaca.

04:03.000 --> 04:06.080
Kita ingin menulis kode yang dapat dibaca dengan sempurna sebagai pengembang.

04:06.080 --> 04:07.850
Tetapi akan sangat bagus jika kita

04:07.850 --> 04:10.740
memiliki alat yang kemudian mempersingkat kode ini dan

04:10.740 --> 04:14.960
benar-benar membuatnya sekecil mungkin, menggunakan nama variabel dan fungsi

04:14.960 --> 04:17.170
sesingkat mungkin, sehingga kita mengirimkan

04:17.170 --> 04:19.130
kode sesedikit mungkin.

04:19.130 --> 04:22.940
Karena kode yang lebih sedikit berarti pengguna dapat mengunduhnya

04:22.940 --> 04:25.530
lebih cepat, yang berarti aplikasi kami dapat

04:25.530 --> 04:27.600
memulai lebih cepat di mesin kami.

04:27.600 --> 04:29.440
Dan sebagai tambahan, pengaturan kami

04:29.440 --> 04:32.860
saat ini, kami memiliki server pengembangan ekstra ini, lite-server

04:32.860 --> 04:35.150
yang merupakan paket tambahan yang diinstal,

04:35.150 --> 04:36.860
yang harus kami putar.

04:36.860 --> 04:39.320
Ini tidak akan menjadi bonus kecil, bonus yang bagus

04:39.320 --> 04:42.280
jika kita memiliki satu perintah dan yang akan melakukan segalanya,

04:42.280 --> 04:45.360
membangun proyek kita, tetapi juga memutar server seperti itu,

04:45.360 --> 04:48.170
yang secara otomatis memuat ulang situs web kita setiap kali

04:48.170 --> 04:50.713
kita mengubah file dalam proyek kita.

04:51.550 --> 04:54.270
Nah, dan di situlah webpack dapat membantu kita.

04:54.270 --> 04:57.240
Ini membundel kode kami sehingga kami memiliki lebih sedikit

04:57.240 --> 05:00.670
impor daripada kami memiliki beberapa, yah bundel kode yang kami kirim,

05:00.670 --> 05:05.100
ini membantu kami mengoptimalkan kode kami, meminimalkannya seperti yang disebut, sehingga

05:05.100 --> 05:06.717
kami mengirimkan lebih sedikit kode

05:06.717 --> 05:10.130
dan pengguna kami memiliki lebih sedikit kode untuk diunduh.

05:10.130 --> 05:12.530
Dan kita juga dapat dengan mudah menambahkan lebih banyak

05:12.530 --> 05:15.750
langkah build jika Anda mau, kita dapat menambahkan server pengembangan seperti

05:15.750 --> 05:19.270
itu tetapi kita juga dapat melakukan banyak hal lain jika kita benar-benar menginginkannya

05:19.270 --> 05:22.160
dan dokumen webpack resmi adalah tempat yang tepat jika Anda ingin mempelajari

05:22.160 --> 05:24.130
semuanya.

05:24.130 --> 05:27.880
Dengan itu, mari kita lihat contoh pengaturan dalam proyek kita dan mari kita pelajari

05:27.880 --> 05:30.433
bagaimana kita bisa menggunakan webpack di sana.
