WEBVTT

00:02.220 --> 00:03.053
Istruttore: Ora,

00:03.053 --> 00:04.883
se si va avanti, abbiamo altre opzioni,

00:04.883 --> 00:07.920
noUnusedLocals, noUnusedParameters, noImplicitReturns.

00:07.920 --> 00:10.470
In pratica, questo aiuta la qualità del codice.

00:10.470 --> 00:13.110
TypeScript si lamenterà se ci sono alcune

00:13.110 --> 00:15.930
variabili inutilizzate e così via.

00:15.930 --> 00:20.930
Quindi, se attiviamo queste tre opzioni, per esempio, questa opzione ci aiuta con le

00:21.711 --> 00:24.230
istruzioni Switch, dove si potrebbe dimenticare

00:24.230 --> 00:26.270
la parola chiave break.

00:26.270 --> 00:28.880
Ma se attiviamo queste tre opzioni, ciò di cui

00:28.880 --> 00:31.760
TypeScript si lamenterà è, per esempio, se si ha

00:31.760 --> 00:33.600
una variabile username qui, localmente

00:33.600 --> 00:36.730
in questa funzione, e non la si usa.

00:36.730 --> 00:39.490
Questo ha delle linee gialle grigie perché

00:39.490 --> 00:41.500
non è un errore, in realtà.

00:41.500 --> 00:43.179
È più che altro un avvertimento o un suggerimento.

00:43.179 --> 00:45.643
Quindi, se compilo qui, vedrete che ora

00:47.750 --> 00:49.500
ottengo un errore, perché TypeScript

00:49.500 --> 00:51.900
conosce solo gli errori.

00:51.900 --> 00:54.140
Vediamo che il nome utente è dichiarato,

00:54.140 --> 00:57.080
ma il suo valore non viene mai letto, perché ci siamo

00:57.080 --> 01:00.550
assicurati di non volere variabili locali inutilizzate.

01:00.550 --> 01:02.483
Le variabili globali non utilizzate,

01:03.440 --> 01:06.340
quindi se avessi qualcosa come appId qui, sono consentite,

01:06.340 --> 01:09.130
perché TypeScript non può sapere se si ha bisogno

01:09.130 --> 01:13.870
di quel valore definito globalmente in un altro file di script.

01:13.870 --> 01:14.980
Quindi questo è consentito,

01:14.980 --> 01:17.280
ma in una funzione in cui non c'è altro posto in cui

01:17.280 --> 01:20.010
potrebbe essere necessario, TypeScript si lamenterà ora

01:20.010 --> 01:22.020
se si ha del codice inutilizzato.

01:22.020 --> 01:23.540
E in genere è una buona idea.

01:23.540 --> 01:26.021
Permette di eliminare il codice inutilizzato.

01:26.021 --> 01:28.510
Lo stesso vale per i parametri non utilizzati.

01:28.510 --> 01:31.350
Se si prende una H qui dove uno, ovviamente, il

01:31.350 --> 01:33.050
bind è rotto ora, ma anche se

01:33.050 --> 01:35.970
passiamo questo in questo funziona, ma ora, di nuovo,

01:35.970 --> 01:39.220
TypeScript e quindi l'ID ci dice che questo è inutilizzato

01:39.220 --> 01:41.780
e o questo, quindi forse si dovrebbe rimuovere

01:41.780 --> 01:44.293
o iniziare a usarlo.

01:45.238 --> 01:48.173
Quindi questo è noUnusedParameters.

01:48.173 --> 01:51.365
E noImplicitReturns significa che otterremo

01:51.365 --> 01:55.620
un errore se abbiamo una funzione che a volte restituisce qualcosa

01:55.620 --> 01:57.130
e a volte no.

01:57.130 --> 02:00.913
Supponiamo di avere un'altra funzione, add, in cui otteniamo

02:01.912 --> 02:02.940
due numeri.

02:02.940 --> 02:05.906
e n2 è un numero.

02:05.906 --> 02:10.906
E, naturalmente, possiamo restituire n1 più n2.

02:14.030 --> 02:15.710
Ma diciamo che, per qualche motivo,

02:15.710 --> 02:18.518
stiamo controllando se n1 più n2 è maggiore di zero,

02:18.518 --> 02:21.800
perché vogliamo restituire solo se abbiamo un risultato

02:21.800 --> 02:23.700
maggiore di zero.

02:23.700 --> 02:25.040
Poi vogliamo un valore restituito.

02:25.040 --> 02:26.940
Altrimenti non vogliamo restituire nulla.

02:26.940 --> 02:28.170
Non vogliamo un ritorno.

02:28.170 --> 02:30.550
Allora riceviamo un avviso a causa dell'impostazione

02:30.550 --> 02:32.598
aggiuntiva con noImplicitReturns.

02:32.598 --> 02:36.401
TypeScript rileva che non tutti i rami di questa funzione portano a una dichiarazione

02:36.401 --> 02:38.760
di ritorno e, a causa della nostra impostazione,

02:38.760 --> 02:40.650
ciò non è consentito.

02:40.650 --> 02:44.150
Dobbiamo almeno deliberatamente non restituire nulla, aggiungendo

02:44.150 --> 02:45.790
la parola chiave return.

02:45.790 --> 02:48.260
La semplice omissione non è consentita in questo caso.

02:48.260 --> 02:49.730
È consentito se avete una funzione

02:49.730 --> 02:52.446
che non restituisce nulla, in nessun ramo, ma se avete

02:52.446 --> 02:54.520
almeno un caso in cui la vostra funzione

02:54.520 --> 02:56.423
restituisce qualcosa, allora dovete

02:56.423 --> 02:58.770
assicurarvi di restituire qualcosa in tutti

02:58.770 --> 02:59.933
i casi.

03:01.830 --> 03:03.130
E con questo ci avviciniamo alla fine di questa

03:03.130 --> 03:04.240
guida alla configurazione.

03:04.240 --> 03:06.526
Possiamo ignorare la risoluzione del modulo.

03:06.526 --> 03:08.933
Tutte queste opzioni sono in realtà piuttosto avanzate,

03:08.933 --> 03:10.830
che non hanno importanza per noi qui, non

03:10.830 --> 03:13.510
hanno importanza per voi in molti progetti.

03:13.510 --> 03:16.600
Le Opzioni mappa sorgente consentono di modificare le mappe sorgente

03:16.600 --> 03:18.180
che abbiamo visto in precedenza.

03:18.180 --> 03:21.440
Quindi questi file di traduzione da JavaScript a TypeScript.

03:21.440 --> 03:23.720
In genere le impostazioni predefinite dovrebbero

03:23.720 --> 03:26.000
andare bene, quindi se non si sa cosa si sta cambiando

03:26.000 --> 03:27.010
e perché lo si sta facendo,

03:27.010 --> 03:29.470
in genere non è necessario modificare nulla.

03:29.470 --> 03:31.512
Per quanto riguarda le opzioni

03:31.512 --> 03:34.380
sperimentali, le esaminerò, in particolare

03:34.380 --> 03:37.010
experimentalDecorators, più avanti nel

03:37.010 --> 03:38.910
modulo dei decoratori.

03:38.910 --> 03:41.810
In pratica, questo permette di utilizzare in TypeScript

03:41.810 --> 03:45.060
alcune funzionalità che sono davvero sperimentali,

03:45.060 --> 03:48.271
per le quali non è sicuro che finiranno in JavaScript

03:48.271 --> 03:50.270
in futuro e con le quali si potrebbe

03:50.270 --> 03:52.940
comunque voler lavorare.

03:52.940 --> 03:55.220
Poi si deve dire esplicitamente a TypeScript che si

03:55.220 --> 03:57.070
vuole lavorare con queste caratteristiche

03:57.070 --> 03:59.390
e lo si può fare con questa configurazione.

03:59.390 --> 04:01.880
Ma, ancora una volta, tornerò su questo punto.

04:01.880 --> 04:04.170
E quindi, ora, passiamo a questo file, con molte

04:04.170 --> 04:05.870
opzioni che si possono impostare.

04:05.870 --> 04:08.222
Con la crescita di TypeScript, di solito vengono

04:08.222 --> 04:10.612
aggiunte sempre più opzioni, per cui i documenti

04:10.612 --> 04:13.837
ufficiali sono sempre un ottimo posto per approfondire e

04:13.837 --> 04:16.160
assicurarsi di non perdere un'opzione interessante

04:16.160 --> 04:20.343
che potrebbe aiutarci nel nostro progetto.
