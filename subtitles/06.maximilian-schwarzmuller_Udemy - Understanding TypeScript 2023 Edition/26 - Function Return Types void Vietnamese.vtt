WEBVTT

00:02.200 --> 00:04.080
Người hướng dẫn: Đã đến lúc cho một tập tin mới khác.

00:04.080 --> 00:09.080
Tôi sẽ đổi tên app. ts ở đây thành bí danh công đoàn. ts và thêm một ứng

00:11.100 --> 00:13.760
dụng mới. ts nơi chúng tôi có thể

00:13.760 --> 00:16.370
bắt đầu lại từ đầu, hãy đóng tệp khác.

00:16.370 --> 00:20.660
Và bây giờ ở đây tôi muốn tìm hiểu sâu hơn một chút về chức năng.

00:20.660 --> 00:22.640
Tất nhiên, bây giờ, với các hàm đã làm việc.

00:22.640 --> 00:24.940
Ví dụ: ở đây trong tệp bí danh hợp có

00:24.940 --> 00:26.340
chức năng kết hợp.

00:26.340 --> 00:29.260
Và ví dụ, bạn đã thấy rằng đối với các hàm,

00:29.260 --> 00:32.520
bạn có thể gán kiểu cho các tham số của hàm.

00:32.520 --> 00:34.310
Chà, hóa ra bạn có thể làm thêm

00:34.310 --> 00:36.483
một chút nữa với các hàm và kiểu.

00:37.590 --> 00:40.430
Để làm được điều đó, tôi sẽ tạo lại chức năng thêm của mình,

00:40.430 --> 00:43.373
chức năng này chỉ chấp nhận số chứ không phải chuỗi.

00:44.270 --> 00:48.340
Mà thực hiện một điều đơn giản, nó trả về n một cộng n hai, vì vậy không

00:48.340 --> 00:49.513
quá phức tạp.

00:51.004 --> 00:53.740
Như tôi đã đề cập, chúng ta có thể gán kiểu cho tham

00:53.740 --> 00:55.180
số, điều đó không mới.

00:55.180 --> 00:57.030
Tuy nhiên, về tổng thể,

00:57.030 --> 01:01.050
hàm có một kiểu quan trọng khác, đó là kiểu trả về.

01:01.050 --> 01:03.990
Và ở đây, kiểu trả về được suy ra bởi TypeScript.

01:03.990 --> 01:06.490
Chúng ta có thể thấy nó nếu di chuột qua add.

01:06.490 --> 01:10.760
Ở cuối, dấu hai chấm sau danh sách tham số,

01:10.760 --> 01:14.190
ở đây, mô tả kiểu trả về của hàm.

01:14.190 --> 01:16.800
Vì vậy, loại giá trị trả về.

01:16.800 --> 01:20.020
Ở đây, tôi trả lại phép cộng n một và n hai.

01:20.020 --> 01:23.050
Và vì cả hai đầu vào này đều là số, TypeScript có

01:23.050 --> 01:24.930
thể suy ra rằng kết quả của điều

01:24.930 --> 01:26.770
này sẽ là một số và vì chúng tôi

01:26.770 --> 01:28.820
trả về nó nên kiểu trả về của dữ liệu

01:28.820 --> 01:30.830
hàm này sẽ là một số.

01:30.830 --> 01:33.320
Nếu bạn nối chúng thành các chuỗi

01:33.320 --> 01:35.363
ở đây, ví dụ với toString, thì

01:36.550 --> 01:39.030
TypeScript sẽ suy luận chính xác

01:39.030 --> 01:41.900
rằng chúng ta trả về một chuỗi ở đây.

01:41.900 --> 01:44.350
Tất nhiên, bây giờ chúng ta luôn có thể chỉ định

01:44.350 --> 01:46.910
một cách rõ ràng kiểu trả về ở đây bằng cách thêm dấu

01:46.910 --> 01:48.490
hai chấm sau danh sách tham số,

01:48.490 --> 01:51.263
sau đó là kiểu bạn muốn trả về, chẳng hạn như số.

01:52.850 --> 01:54.560
Đây sẽ là loại giống như được suy ra.

01:54.560 --> 01:56.760
Ví dụ, nếu tôi đặt chuỗi này thành chuỗi,

01:56.760 --> 02:00.020
tôi sẽ gặp lỗi ở đây, vì rõ ràng phép tính của tôi ở đây

02:00.020 --> 02:03.540
không khớp với kiểu trả về được mô tả của tôi.

02:03.540 --> 02:06.480
Bây giờ, giống như với các biến, bạn nên để TypeScript

02:06.480 --> 02:10.080
thực hiện công việc của mình liên quan đến suy luận kiểu.

02:10.080 --> 02:12.610
Và nếu bạn không có lý do cụ thể để

02:12.610 --> 02:14.810
đặt loại một cách rõ ràng, do

02:14.810 --> 02:17.090
đó, bạn không nên đặt loại và thay

02:17.090 --> 02:20.470
vào đó hãy để TypeScript suy ra loại.

02:20.470 --> 02:22.660
Tuy nhiên, về các kiểu trả về, có một kiểu

02:22.660 --> 02:25.910
thú vị mà chúng ta chưa từng thấy trước đây và kiểu này có thể hoàn

02:25.910 --> 02:27.530
toàn mới đối với bạn nếu bạn phải

02:27.530 --> 02:30.240
trải nghiệm với các ngôn ngữ lập trình khác.

02:30.240 --> 02:31.200
Bởi vì nó là một loại

02:31.200 --> 02:33.250
không thực sự tồn tại trong JavaScript.

02:33.250 --> 02:35.180
Đó là loại khoảng trống.

02:35.180 --> 02:38.160
Giả sử chúng ta có phương thức printResult.

02:38.160 --> 02:41.190
Ở đó, chúng tôi nhận được một

02:41.190 --> 02:44.120
đối số số, phải là một số.

02:44.120 --> 02:47.510
Và trong đó, tôi muốn an ủi. nhật ký số.

02:47.510 --> 02:49.450
Và tôi muốn an ủi. log nó như là một phần

02:49.450 --> 02:52.150
của một chuỗi, nơi tôi nói kết quả cộng với số.

02:52.150 --> 02:53.670
Vì vậy, bây giờ điều này sẽ được

02:53.670 --> 02:56.090
nối thành một chuỗi dài và sẽ được xuất ra.

02:56.090 --> 02:57.777
Và bây giờ tôi có thể gọi printResult.

02:57.777 --> 03:01.020
Và ví dụ, chuyển qua kết quả của lệnh gọi

03:01.020 --> 03:05.010
hàm add của tôi, với 5 dấu cộng, giả sử là 12.

03:05.010 --> 03:07.670
Vì vậy, tôi đang thực hiện thêm ở đây, với hai số.

03:07.670 --> 03:10.160
Và kết quả của điều đó, vì vậy những gì add trả về,

03:10.160 --> 03:13.130
sau đó được chuyển dưới dạng đối số vào printResult.

03:13.130 --> 03:15.780
Và điều đó sẽ in nó ra bàn điều khiển.

03:15.780 --> 03:19.150
Nếu bây giờ chúng tôi biên dịch cái này và sau đó xem nó trong trang

03:19.150 --> 03:21.110
của chúng tôi hoặc trên trang của chúng

03:21.110 --> 03:24.280
tôi ở đây, chúng tôi sẽ thấy kết quả 17, điều này có ý nghĩa.

03:24.280 --> 03:25.660
Điều thú vị ở đây là kiểu

03:25.660 --> 03:27.640
trả về của printResult.

03:27.640 --> 03:30.353
Bạn đoán kiểu trả về ở đây là gì?

03:31.240 --> 03:33.240
Vì vậy, có thể bạn nghĩ đó là chuỗi, bởi

03:33.240 --> 03:35.150
vì tôi đang tạo một chuỗi ở đây.

03:35.150 --> 03:37.360
Nhưng hãy ghi nhớ, chúng tôi sẽ không trả lại cái này.

03:37.360 --> 03:39.400
Chúng tôi sẽ không trả lại bất cứ thứ gì ở đây.

03:39.400 --> 03:42.010
Và do đó, hàm printResult này ở đây

03:42.010 --> 03:44.990
có một kiểu trả về đặc biệt, void.

03:44.990 --> 03:47.910
Bây giờ bạn có thể nhận thấy kiểu trả về void từ

03:47.910 --> 03:49.830
các ngôn ngữ lập trình khác.

03:49.830 --> 03:52.230
Ở đó bạn có một cái gì đó như thế này.

03:52.230 --> 03:53.940
JavaScript không thực sự biết điều

03:53.940 --> 03:56.740
đó hoặc không thực sự có tên cho tình huống này.

03:56.740 --> 03:58.590
Tuy nhiên, TypeScript thì có.

03:58.590 --> 04:01.840
Vì vậy, thực sự, hàm này ở đây có kiểu trả về là void.

04:01.840 --> 04:04.065
Và tất nhiên, bạn không cần phải chỉ định nó ở đây.

04:04.065 --> 04:06.440
Suy luận của TypeScript đã thực hiện công việc của nó.

04:06.440 --> 04:07.630
Nhưng tôi muốn thực

04:07.630 --> 04:09.610
sự làm rõ rằng cái này có kiểu trả về

04:09.610 --> 04:13.730
void, đó là lý do tại sao tôi thêm nó vào đây, cho mục đích minh họa.

04:13.730 --> 04:17.070
Bây giờ, void thực sự chỉ có nghĩa là hàm này không

04:17.070 --> 04:21.020
có câu lệnh trả về, nó không trả về bất cứ thứ gì.

04:21.020 --> 04:24.540
Nó hoàn thành thành công, nó làm công việc của nó.

04:24.540 --> 04:28.170
Nó thực thi mã của nó, nó không tạo ra lỗi hoặc bất cứ

04:28.170 --> 04:32.550
điều gì tương tự, nhưng sau đó nó không trả về bất cứ điều gì.

04:32.550 --> 04:34.990
Đó là kiểu trả về void.

04:34.990 --> 04:37.330
Tất nhiên, bây giờ về mặt kỹ thuật trong JavaScript, nếu

04:37.330 --> 04:39.490
chúng ta muốn điều khiển. ghi lại kết quả của

04:39.490 --> 04:43.550
printResult tại đây và bây giờ tôi sẽ biên dịch kết quả này, và chúng

04:43.550 --> 04:46.270
ta xem kết quả đầu ra ở đây trên trang này.

04:46.270 --> 04:49.480
Chúng tôi thấy rằng không xác định được trả về bởi điều đó.

04:49.480 --> 04:51.540
Vì vậy, về mặt kỹ thuật, và điều đó

04:51.540 --> 04:56.450
thực sự thú vị, trong JavaScript, nếu chúng ta sử dụng giá trị trả về của một hàm không

04:56.450 --> 05:00.830
trả về bất kỳ thứ gì, chúng ta sẽ nhận được giá trị không xác định.

05:00.830 --> 05:03.730
Và như bạn có thể biết, không xác định trong JavaScript

05:03.730 --> 05:05.720
thực sự là một giá trị thực.

05:05.720 --> 05:08.430
Ví dụ, một giá trị bạn cũng nhận được nếu bạn cố gắng

05:08.430 --> 05:11.880
truy cập một thuộc tính trên một đối tượng không tồn tại.

05:11.880 --> 05:13.670
Vì vậy, ở đây chúng tôi nhận được khoảng

05:13.670 --> 05:16.680
trống, mặc dù về mặt kỹ thuật, điều này trả về không xác định.

05:16.680 --> 05:19.020
Và bây giờ để làm cho nó trở nên khó

05:19.020 --> 05:23.300
hiểu hơn, undefined thực sự là một loại trong TypeScript.

05:23.300 --> 05:25.640
Bạn có thể không xác định là một loại.

05:25.640 --> 05:29.570
Và ví dụ: một biến hoàn toàn mới, someValue, có thể nhận dạng

05:30.770 --> 05:33.270
không xác định dưới dạng loại và bạn sẽ

05:33.270 --> 05:34.700
không gặp lỗi.

05:34.700 --> 05:37.380
Biến này bây giờ sẽ mãi mãi không được xác định.

05:37.380 --> 05:39.970
Làm thế nào hữu ích đó có thể là một câu hỏi khác nhau.

05:39.970 --> 05:43.720
Nhưng không xác định là một loại hợp lệ trong TypeScript.

05:43.720 --> 05:46.600
Tuy nhiên, ở đây bạn thấy chúng tôi đang gặp lỗi.

05:46.600 --> 05:48.010
Và chúng tôi đang gặp

05:48.010 --> 05:51.690
lỗi vì hàm không được phép trả về không xác định.

05:51.690 --> 05:53.300
Về mặt kỹ thuật, tất nhiên là như

05:53.300 --> 05:56.850
vậy, nhưng TypeScript nghĩ về các chức năng hơi khác một chút.

05:56.850 --> 06:00.200
Bạn nên sử dụng void ở đây nếu một hàm không trả

06:00.200 --> 06:04.300
về gì cả và không phải là không xác định, bởi vì với void bạn

06:04.300 --> 06:05.940
làm rõ rằng hàm này cố tình

06:05.940 --> 06:08.260
không có câu lệnh trả về.

06:08.260 --> 06:10.690
Nếu bạn nói không xác định ở đây, thì

06:10.690 --> 06:13.460
TypeScript sẽ mong đợi rằng bạn có một câu

06:13.460 --> 06:17.080
lệnh trả về trong đó bạn không trả về một giá trị.

06:17.080 --> 06:18.660
Đó là sự khác biệt về kỹ thuật.

06:18.660 --> 06:20.670
Bây giờ bạn thấy tôi không gặp lỗi.

06:20.670 --> 06:22.860
Từ góc độ JavaScript,

06:22.860 --> 06:26.610
điều này về cơ bản giống như điều này.

06:26.610 --> 06:29.050
Nhưng TypeScript tạo ra sự khác biệt ở

06:29.050 --> 06:31.240
đây và do đó, void là loại bạn muốn sử

06:31.240 --> 06:33.760
dụng nếu bạn không có câu lệnh trả về.

06:33.760 --> 06:37.200
Thành thật mà nói, không xác định, thứ mà bạn sẽ hiếm khi cần đến,

06:37.200 --> 06:41.100
có thể được sử dụng nếu bạn quay lại mà không trả lại giá trị thực.

06:41.100 --> 06:45.750
Nhưng một lần nữa, đây là trường hợp sử dụng hiếm gặp và bạn cũng có thể sử dụng void

06:45.750 --> 06:47.560
với câu lệnh trả về như thế này.

06:47.560 --> 06:49.040
Bạn sẽ không nhận được một lỗi.

06:49.040 --> 06:50.610
Và theo mặc định, bạn thực sự sẽ

06:50.610 --> 06:52.770
luôn sử dụng void trong trường hợp này.

06:52.770 --> 06:54.680
Trừ khi bạn thực sự có một chức

06:54.680 --> 06:56.750
năng sẽ tạo ra không xác định và bạn

06:56.750 --> 06:58.620
muốn rõ ràng về điều đó.

06:58.620 --> 07:01.430
Nhưng một lần nữa, điều đó sẽ hiếm khi xảy ra.

07:01.430 --> 07:03.620
Ở đây, tôi chỉ muốn đảm bảo rằng bạn hiểu

07:03.620 --> 07:05.870
sự khác biệt giữa khoảng trống và không

07:05.870 --> 07:08.160
xác định, khoảng trống đó là tiêu chuẩn

07:08.160 --> 07:10.930
mà bạn sẽ sử dụng trong hầu hết các tình huống mà

07:10.930 --> 07:13.450
bạn có một hàm không trả về giá trị và bạn có

07:13.450 --> 07:15.770
thể gán nó một cách rõ ràng.

07:15.770 --> 07:18.780
Nhưng tất nhiên, TypeScript cũng có thể suy ra nó, giống

07:18.780 --> 07:20.440
như nó cũng có thể ở đây.

07:20.440 --> 07:23.083
Tôi vừa thêm cái này cho mục đích demo ở đây.
