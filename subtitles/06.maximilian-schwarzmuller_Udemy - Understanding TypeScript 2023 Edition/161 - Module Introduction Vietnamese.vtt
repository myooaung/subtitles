WEBVTT

00:02.370 --> 00:04.500
Người hướng dẫn: Trong quá trình phát triển web

00:04.500 --> 00:07.910
hiện đại, chúng tôi cũng thường làm việc với các thư viện của bên thứ ba.

00:07.910 --> 00:11.330
Chúng tôi không tự mình viết tất cả mã cho các dự án của mình.

00:11.330 --> 00:14.760
Thay vào đó, chúng tôi thường sử dụng các thư viện của bên

00:14.760 --> 00:17.510
thứ ba để không phải luôn tự phát minh lại bánh

00:17.510 --> 00:20.980
xe mà có thể thêm một số chức năng nhất định vào dự án của mình

00:20.980 --> 00:23.510
và sau đó chỉ cần tập trung vào logic kinh

00:23.510 --> 00:25.610
doanh cốt lõi của mình.

00:25.610 --> 00:27.660
Bây giờ, trong mô-đun này, chúng

00:27.660 --> 00:31.180
ta sẽ xem xét các thư viện của bên thứ ba và cách bạn có thể

00:31.180 --> 00:32.750
thêm chúng vào dự án TypeScript

00:32.750 --> 00:36.520
của mình và cụ thể, chúng ta sẽ xem xét hai loại thư viện và

00:36.520 --> 00:39.250
ý nghĩa của việc làm việc với chúng trong

00:39.250 --> 00:41.620
dự án TypeScript .

00:41.620 --> 00:44.100
Chúng ta sẽ xem xét các thư viện thông thường

00:44.100 --> 00:47.400
mà bạn cũng có thể sử dụng trong các dự án JavaScript thông

00:47.400 --> 00:49.780
thường và bạn sẽ tìm hiểu cách bạn có thể sử

00:49.780 --> 00:52.470
dụng chúng trong TypeScript và tận dụng tối đa

00:52.470 --> 00:54.430
chúng, nhưng sau đó chúng ta cũng

00:54.430 --> 00:57.890
sẽ xem xét một số thư viện cụ thể của TypeScript.

00:57.890 --> 01:00.960
Sự khác biệt sẽ là đây là những thư viện thực sự sử dụng

01:00.960 --> 01:05.560
và bao gồm một số loại tính năng nhất định để cung cấp cho bạn một cách hoàn toàn

01:05.560 --> 01:08.120
mới để làm việc với chúng nhằm cung cấp cho

01:08.120 --> 01:10.700
bạn một số chức năng nhất định mà bạn không thể

01:10.700 --> 01:14.040
xây dựng như thế này với vanilla JavaScript.

01:14.040 --> 01:16.523
Vì vậy, chúng ta hãy xem xét cả hai trong mô-đun này.
